{"context": "\n\nGenmai \u3068 Gorp \u30d7\u30c1\u6bd4\u8f03 \uff0b \u304a\u307e\u3051\nGo \u306e\u7c21\u6613 ORM(Object-Relational Mapping)\u3067\u3042\u308b genmai\u3068 gorp\u306b\u3064\u3044\u3066\u3001\u53e4\u3044\u60c5\u5831\u304c\u6563\u898b\u3055\u308c\u308b\u3068\u3044\u3046\u3053\u3068\u3082\u3042\u308a\u3001\u30e9\u30a4\u30c8\u30e6\u30fc\u30b6\u30fc\u3068\u3057\u3066\u6c17\u306b\u306a\u308b\u7bc4\u56f2\u3067\u3061\u3087\u3063\u3068\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002 \u6bd4\u8f03\u3068\u3044\u3046\u3088\u308a\u3001\u4ed5\u69d8\u30e1\u30e2\u307f\u305f\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002 \n\n\u5bfe\u8c61 gorp\u30d0\u30fc\u30b8\u30e7\u30f3\u306f v1\u3067\u306f\u306a\u304f\u3001Pre v2 (go-gorp/gorp)\u3067\u3059\u3002\u5b89\u5b9a\u7248\u3067\u306f\u306a\u304f\u4f5c\u696d\u4e2d\u3068\u3044\u3046\u3053\u3068\u306a\u306e\u3067\u3001\u672c\u7a3f\u306e\u8cde\u5473\u671f\u9650\u306f\u77ed\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093(2016\u5e746\u6708\u6295\u7a3f)\u3002  \ntransaction \u3084 migration\u3001\u30b9\u30d4\u30fc\u30c9\u3001\u305d\u306e\u4ed6\u8abf\u3079\u3066\u306a\u3044\u3067\u3059\u3002 \u53cc\u65b9\u3068\u3082transaction\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u308b\u307f\u305f\u3044\u3067\u3059\u3002 \u307e\u305f\u3001migration\u306e\u30b5\u30dd\u30fc\u30c8\u306fgenmai\u306b\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001gorp\u306b\u306f\u4f55\u304c\u3057\u304b\u3042\u308b\u3088\u3046\u3067\u3059\u3002  \ngorp,gorm\u305d\u306e\u4ed6\u306e\u6a5f\u80fd\u6bd4\u8f03\u306f\u3001http://present.go-steel-programmers.org/talk-review-orms \u306e\u30b9\u30e9\u30a4\u30c9\u304c\u8981\u9818\u3088\u304f\u7e8f\u307e\u3063\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059(\u77e2\u5370\u30ad\u30fc\u4f7f\u7528)\u3002  \n\u74b0\u5883\uff1a\nGo 1.6.2\nWindows8 64bit, (CentOS7 64bit MySQL\u306e\u307f\u78ba\u8a8d)\nMySQL5.6\u3001InnoDB\u3001github.com/go-sql-driver/mysql\nPostgreSQL9.5\u3001github.com/lib/pq  \n\u672c\u7a3f\u3067\u306f,DB\u30c6\u30fc\u30d6\u30eb\u306b\u76f4\u63a5\u7d10\u3065\u3051\u30fb\u5909\u63db\u3055\u308c\u308b\u69cb\u9020\u4f53\u3092 \u300c\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u300d\u3001\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308b\u305f\u3081\u306e\u69cb\u9020\u4f53\u3092\u300c\u53d7\u3051\u5074\u69cb\u9020\u4f53\u300d\u3068\u8a00\u3046\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 \u3053\u308c\u306f\u5f79\u5272\u4e0a\u306e\u8868\u73fe\u306a\u306e\u3067\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u4e0a\u306f\u540c\u3058\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u540d\u306f XxxxxTbl \u306e\u5f62\u306b\u3057\u3066\u307e\u3059\u3002 \u307e\u305f\u3001\u8868\u8a18\u4e0a\u300c\u69cb\u9020\u4f53\u300d\u3068\u300c\u69cb\u9020\u4f53\u5909\u6570\u300d\u306e\u533a\u5225\u304c\u3042\u308a\u307e\u305b\u3093\u306e\u3067\u9069\u5b9c\u8aad\u307f\u66ff\u3048\u3066\u304f\u3060\u3055\u3044\u3002  \ngenmai\u3084 gorp\u5b9f\u884c\u6642\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u529b\u3055\u308c\u308b\u5834\u5408\u306f\u30a8\u30e9\u30fc\u6271\u3044\u3057\u3066\u3044\u307e\u3059\u3002 \u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u529b\u3055\u308c\u3066\u3082\u30c7\u30fc\u30bf\u306f\u3061\u3083\u3093\u3068\u8a2d\u5b9a\u3055\u308c\u308b\u304b\u3089\u7121\u8996\u3057\u3066\u51fa\u529b\u3092\u5229\u7528\u3057\u3088\u3046\u3068\u3044\u3046\u65b9\u306f\u3001\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u4e0a\u4fdd\u969c\u3055\u308c\u3066\u3044\u308b\u4f7f\u3044\u65b9\u304b\u5426\u304b\u3088\u304f\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002 \u305f\u3068\u3048\u3070\u3001gorp\u5b9f\u884c\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u529b\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306b\u3001\"SELECT * \"\u306e\u3068\u304d\u306fOK\u3060\u304c \"SELECT \u30ab\u30e9\u30e0\u540d\"\u3068\u3059\u308b\u3068\u8a2d\u5b9a\u3055\u308c\u306a\u3044\u3001\u3068\u3044\u3046\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002  \n\u898b\u3084\u3059\u3055\u3092\u512a\u5148\u3057\u3066\u3001query\u6587\u5b57\u5217\u4e2d\u306e\u30c6\u30fc\u30d6\u30eb\u540d\u3084\u30ab\u30e9\u30e0\u540d\u3092 quote\u3057\u3066\u306a\u3044\u3053\u3068\u3084\u3001\u4e00\u90e8MySQL\u7528\u3068PostgreSQL\u7528\u304c\u6df7\u5728\u3057\u3066\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u30ea\u30b9\u30c8\u3092\u7e26\u306b\u7e2e\u3081\u308b\u305f\u3081\u3068\u3001\u5f53\u65b9\u306e\u597d\u307f\u3067\u6a19\u6e96\u306ego\u8a18\u6cd5\u306b\u5247\u3063\u3066\u3044\u306a\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002  \ngenmai\u306e github\u306e\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f\u3001\u30c6\u30fc\u30d6\u30eb\u751f\u6210\u3067\u306f ORM\u3089\u3057\u304b\u3089\u306c\u4f8b\u3057\u304b\u306e\u3063\u3066\u306a\u3044\u306e\u3067\u3001\uff14.\uff11.\uff11 \u306b\u5f53\u65b9\u306e\u74b0\u5883(\u30ed\u30fc\u30ab\u30eb)\u3067\u306e\u7c21\u6613\u30d7\u30ed\u30b0\u30e9\u30e0\u4f8b\u3092\u8a18\u8f09\u3057\u3066\u304a\u304d\u307e\u3057\u305f\u3002\u3064\u3044\u3067\u306a\u306e\u3067 \uff14.\uff12.\uff11 \u306b gorp\u306e\u7c21\u6613\u4f8b\u3082\u3002  \n\n\uff0a\u672c\u7a3f\u306b\u8a18\u3057\u305f\u5185\u5bb9\u3084\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5229\u7528\u3068\u305d\u306e\u7d50\u679c\u751f\u3058\u308b\u4e8b\u614b\u306b\u3064\u3044\u3066\u3001\n\u3000\u5f53\u65b9\u306f\u4e00\u5207\u8cac\u4efb\u3092\u8ca0\u3044\u304b\u306d\u307e\u3059\u3002 \u3054\u81ea\u8eab\u306e\u8cac\u4efb\u306b\u304a\u3044\u3066\u3054\u5229\u7528\u304f\u3060\u3055\u3044\u3002 \n\n\uff11\u7ae0 \u69cb\u9020\u4f53 <-> DB\u30c6\u30fc\u30d6\u30eb\u306e\u9759\u7684\u5bfe\u5fdc\u4f8b(MySQL)\n\n\uff11.\uff11 genmai\n\ngenmai\ntype Test00 struct {\n    Val32x  uint32\n}\n                                              \uff0a\uff0a\uff0a MySQL , UTF-8 , Windows8 64bit \uff0a\uff0a\uff0a\ntype OtherNameTbl struct {                  Field           Type       Null  Key   Default \n                                        +- - - - - - +- - - - - - - - +- - -+- - -+- - - +- - - - \nId        int64    `db:\"pk\"`            | id         | bigint(20)     | NO  | PRI | NULL | auto_increment\nStr0      string   `db:\"unique\"`        | str0       | varchar(255)   | NO  | UNI | NULL |\nStr1      string   `default:\"'abc'\"`    | str1       | varchar(255)   | NO  |     | abc  |\nStr32     string   `size:\"32\"`          | str32      | varchar(32)    | NO  |     | NULL |\nStr255    string   `size:\"255\"`         | str255     | varchar(255)   | NO  |     | NULL |\nStr1024   string   `size:\"1024\"`        | str1024    | varchar(1024)  | NO  |     | NULL |\nStr65536  string   `size:\"65536\"`       | str65536   | mediumtext     | NO  |     | NULL |\nStrNull   sql.NullString                | str_null   | varchar(255)   | YES |     | NULL |\nStrPtr    *string  `size:\"2048\"`        | str_ptr    | varchar(2048)  | YES |     | NULL |\n\nSlice0      []byte                      | slice0     | varbinary(255) | YES |     | NULL |\nSlice32     []byte  `size:\"32\"`         | slice32    | varbinary(32)  | YES |     | NULL |\nSlice255    []byte  `size:\"255\"`        | slice255   | varbinary(255) | YES |     | NULL |\nSlice1024   []byte  `size:\"1024\"`       | slice1024  | varbinary(1024)| YES |     | NULL |\nSlice65536  []byte  `size:\"65536\"`      | slice65536 | mediumblob     | YES |     | NULL |\n\nVal8        int8                        | val8       | smallint(6)    | NO  |     | NULL |\nVal8u       uint8                       | val8u      | smallint(6)    | NO  |     | NULL |\nVal32       int32   `default:\"15\"`      | val32      | int(11)        | NO  |     | 15   |\nVal32u      uint32                      | val32u     | int(11)        | NO  |     | NULL |\nVal64Null   sql.NullInt64               | val64_null | bigint(20)     | YES |     | NULL |\nVal8Ptr     *int8                       | val8_ptr   | smallint(6)    | YES |     | NULL |\n\n// ValF32   float32            // panic\n// ValF64   float64            // panic\n// ValF64Null sql.NullFloat64  // panic\nValF32G     genmai.Float32              | val_f32_g  | double         | NO  |     | NULL |\nValF64G     genmai.Float64              | val_f64_g  | double         | NO  |     | NULL |\n\nDate        time.Time                   | date\u3000     | datetime       | NO  |     | NULL |\n            genmai.TimeStamp            | created_at | datetime       | NO  |     | NULL |\n                                        | updated_at | datetime       | NO  |     | NULL |\n            Test00                      | val32x     | int(11)        | NO  |     | NULL |\nValName     int      `column:\"reNamed\"` | reNamed    | int(11)        | NO  |     | NULL |\nNothing     int      `db:\"-\"`  // \u975e\u30ab\u30e9\u30e0\nlowerName   int                // \u975e\u30ab\u30e9\u30e0\n}\n        // []byte  size\uff1d 0: \"VARBINARY(255)\"\u3001\uff1c \u7d0464KB: \"VARBINARY(size)\"\n        //             \uff1c 16MB: \"MEDIUMBLOB\" \u3001\uff1e\uff1d : \"LONGBLOB\"\n\n\ndb.Insert(&OtherNameTbl{}); db.Select(&rslt); fmt.Println(rslt) \u306e\u51fa\u529b(\u4e00\u90e8\u7de8\u96c6\u3042\u308a)\n\ngenmai\n    0 [{1       { false} <nil>\n        [] [] [] [] [] \n        0 0 0 0 {0 false} <nil>\n        0 0 \n        0001-01-01 00:00:00 +0000 UTC\n        {2016-05-23 02:37:17 +0000 UTC 2016-05-23 02:37:17 +0000 UTC} \n        {0} \n        0 0 0}]\n\n\n\n\uff11.\uff12 gorp\n\ngorp\ntype Test00 struct {\n    Val32x  uint32\n}\n                                              \uff0a\uff0a\uff0a MySQL , UTF-8 , Windows8 64bit \uff0a\uff0a\uff0a\ntype OtherNameTbl struct {                     Field           Type         Null  Key  Default \n                                           +- - - - - - +- - - - - - - - - +- -  +- - +- - - +- - - - \nId   int64 `db:\",primarykey,autoincrement\"`| Id         | bigint(20)       | NO  | PRI| NULL | auto_incremen\nStr0        string /* unique\u6307\u5b9a\u306f\u30b3\u30fc\u30c9*/ | Str0       | varchar(255)     | YES |    | NULL |\nStr1        string  `db:\",default:\\\"abc\\\"\"`| Str1       | varchar(255)     | YES |    | NULL | \nStr32       string  `db:\",size:32\"`        | Str32      | varchar(32)      | YES |    | NULL |\nStr255      string  `db:\",size:255\"`       | Str255     | varchar(255)     | YES |    | NULL |\nStr1024     string  `db:\",size:1024\"`      | Str1024    | text             | YES |    | NULL |\nStr65536    string  `db:\",size:65536\"`     | Str65536   | text             | YES |    | NULL |\nStrNull     sql.NullString                 | StrNull    | varchar(255)     | YES |    | NULL |\nStrPtr      *string `db:\",size:2048\"`      | StrPtr     | text             | YES |    | NULL |\n\nSlice0      []byte                         | Slice0     | mediumblob       | YES |    | NULL |\nSlice32     []byte  `db:\",size:32\"`        | Slice32    | mediumblob       | YES |    | NULL |\nSlice255    []byte  `db:\",size:255\"`       | Slice255   | mediumblob       | YES |    | NULL |\nSlice1024   []byte  `db:\",size:1024\"`      | Slice1024  | mediumblob       | YES |    | NULL |\nSlice65536  []byte  `db:\",size:65536\"`     | Slice65536 | mediumblob       | YES |    | NULL |\n\nVal8        int8                           | Val8       | tinyint(4)       | YES |    | NULL |\nVal8u       uint8                          | Val8u      | tinyint(3) unsigned| YES |  | NULL |\nVal32       int32   `db:\",default:0xf\"`    | Val32      | int(11)          | YES |    | NULL |\nVal32u      uint32                         | Val32u     | int(10) unsigned | YES |    | NULL |\nVal64Null   sql.NullInt64                  | Val64Null  | bigint(20)       | YES |    | NULL |\nVal8Ptr     *int8                          | Val8Ptr    | tinyint(4)       | YES |    | NULL |\n\nValF32      float32                        | ValF32     | double           | YES |    | NULL |\nValF64      float64                        | ValF64     | double           | YES |    | NULL |\nValF64Null  sql.NullFloat64                | ValF64Null | double           | YES |    | NULL |\n\nDate        time.Time                      | Date       | datetime         | YES |    | NULL |\n\n            Test00                         | Val32x     | int(10) unsigned | YES |    | NULL |\nValName     int   `db:\"reNamed\"`           | reNamed    | int(11)          | YES |    | NULL |\nNothing     int   `db:\"-\"`      // \u975e\u30ab\u30e9\u30e0\n//lowerName int                 // panic\n}\n\n\ndbmap.Insert(&OtherNameTbl{}); dbmap.Select(&rslt,\"SELECT * FROM OtherNameTbl\"); fmt.Println(rslt)\u306e\u51fa\u529b(\u4e00\u90e8\u7de8\u96c6\u3042\u308a)\n\ngorp\n    0 [{1  abc     { false} <nil>\n        [] [] [] [] [] \n        0 0 15 0 {0 false} <nil>\n        0 0 {0 false} \n        0001-01-01 00:00:00 +0000 UTC \n        {0} \n        0 0}]\n\n\n\n\uff11.\uff13 \u6bd4\u8f03\n\u5c55\u958b\u3055\u308c\u308b\u30c7\u30fc\u30bf\u578b\u306f\u30b7\u30b9\u30c6\u30e0\u306b\u3088\u3063\u3066\u7570\u306a\u308a\u307e\u3059\u306e\u3067\u3001\u53c2\u8003\u7a0b\u5ea6\u306b\u304a\u8aad\u307f\u304f\u3060\u3055\u3044\u3002 \u4ee5\u4e0b\u306f\u4e3b\u306b MySQL,Windows64bit\u3067\u306e\u8a71\u3067\u3059\u3002\n\uff11. genmai\u3067\u306f\u3001\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f snake_case\u5909\u63db\u3055\u308c\u3066\u30ab\u30e9\u30e0\u540d\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u30bf\u30b0\u3092\u4f7f\u3063\u3066\u7570\u306a\u308b\u30ab\u30e9\u30e0\u540d\u3092\u3064\u3051\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002  gorp\u3067\u306f\u3001\u30bf\u30b0\u3042\u308b\u3044\u306f\u30b3\u30fc\u30c9(\u52d5\u7684)\u3067\u30ab\u30e9\u30e0\u540d\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 \n\uff12. genmai\u3067\u306f\u30c6\u30fc\u30d6\u30eb\u540d\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u69cb\u9020\u4f53\u540d\u3092snake_case\u5909\u63db\u3057\u305f\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u69cb\u9020\u4f53\u306b TableNamer\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3067\u5225\u540d\u306b\u3067\u304d\u307e\u3059\u3002  gorp\u3067\u306f\u3001\u30c6\u30fc\u30d6\u30eb\u540d\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u69cb\u9020\u4f53\u540d\u3068\u540c\u3058\u3067\u3059\u304c\u3001\u30b3\u30fc\u30c9\u3067\u5225\u540d\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\n\ngenmai\n    type OtherTbl struct {\n        Id        int64     `db:\"pk\"`\n    }\n    func (tbl *OtherTbl) TableName() string { // \u30c6\u30fc\u30d6\u30eb\u540d\n        return \"another_tbl\"                  //   other_tbl -> another_tbl\n    }\n\n\n\uff13. genmai\u3067\u3082gorp\u3067\u3082\u3001\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u30fb\u53d7\u3051\u5074\u69cb\u9020\u4f53\u3068\u3082\u306b\u69cb\u9020\u4f53\u306e\u57cb\u8fbc\u307f(\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u306a\u3057)\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002 \u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u3064\u3051\u308b\u5834\u5408\u306b\u306f\u3001\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u3067\u306f\u975e\u30ab\u30e9\u30e0(db:\"-\")\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u3064\u307e\u308a\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u306e\u3064\u3044\u305f\u69cb\u9020\u4f53\u30d5\u30a3\u30fc\u30eb\u30c9\u306fDB\u30c6\u30fc\u30d6\u30eb\u306e\u30ab\u30e9\u30e0\u5b9a\u7fa9\u7528\u9014\u306b\u306f\u4f7f\u3048\u307e\u305b\u3093\u3002\n(2016-05\u306e\u6642\u70b9\u3067gorp\u3067\u306f\u3001 \u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3067 varchar(255)\u306e\u30ab\u30e9\u30e0\u304c\u4f5c\u3089\u308c\u307e\u3059)\n(2016-05\u306e\u6642\u70b9\u3067genmai\u3067\u306f\u3001\u591a\u6bb5\u306e\u57cb\u3081\u8fbc\u307f\u306b\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002\u4fee\u6b63\u30b3\u30fc\u30c9\u3092\u672c\u7bc0\u6700\u5f8c\u306b\u8a18\u3057\u307e\u3059)\n    type PsnlData struct {\n        Name    string\n        Age     int\n    }\n    type UserTbl struct {\n        Id      int64       `db:\"pk\"` // `db:\",primarykey,autoincrement\"`\n                PsnlData              // \u57cb\u3081\u8fbc\u307f\n    //  Person  PsnlData              // \u4e0d\u53ef\n        Person  PsnlData    `db:\"-\"`  // \u975e\u30ab\u30e9\u30e0\n    }\n\n\uff14. genmai\u3067\u306f string,int\u306a\u3069\u306b\u5225\u306e\u578b\u540d\u3092\u3064\u3051\u3066\u30ab\u30e9\u30e0\u306b\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093(\u30c6\u30fc\u30d6\u30eb\u751f\u6210\u6642panic)\u3002  gorp\u3067\u306f\u30ab\u30e9\u30e0\u306f\u4f5c\u3089\u308c\u3001int\u7cfb\u306f OK\u306b\u898b\u3048\u307e\u3059\u304c\u3001 string\u306f\u73fe\u72b6\u3067\u306fInsert( )\u6642\u306b sql: converting Exec argument #21's type: unsupported type main.PsnStr, a string \u3068\u51fa\u529b\u3055\u308c\u3001Insert( )\u3067\u304d\u307e\u305b\u3093\u3002 \n    type PsnStr string\n    type PsnVal int\n\n    type UserTbl struct {\n        Id      int64       `db:\"pk\"` // `db:\",primarykey,autoincrement\"`\n    //  Name    PsnStr          \u3000\u3000  // \u4e0d\u53ef\n    //  Age     PsnVal          \u3000\u3000  // genmai\u3067\u306f\u4e0d\u53ef\n    }\n\n\uff15. \u5c0f\u6587\u5b57\u3067\u59cb\u307e\u308b\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u3001genmai\u3067\u306f\u975e\u30ab\u30e9\u30e0\u6271\u3044\u3067\u3059\u3002  gorp\u3067\u306f\u30ab\u30e9\u30e0\u306f\u4f5c\u3089\u308c\u307e\u3059\u304c\u3001insert()\u3067 panic\u3092\u8d77\u3053\u3059\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 \n\uff16. \u3069\u3061\u3089\u3082\u57fa\u672c\u7684\u306b\u306f\u914d\u5217\u8868\u8a18\u306b\u5bfe\u5fdc\u3057\u3066\u304a\u3089\u305a\u3001\u30b9\u30e9\u30a4\u30b9 [] uint8 \u307e\u305f\u306f [] byte \u306e\u307f\u53ef\u80fd\u306a\u3088\u3046\u3067\u3059\u3002 \n\uff17. \u3069\u3061\u3089\u3082(not)null\u3001index\u95a2\u9023\u306f\u30b3\u30fc\u30c9(\u30c0\u30a4\u30ca\u30df\u30c3\u30af)\u3067\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 \n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001genmai\u3067\u306f NullXXX\u3084 \u30dd\u30a4\u30f3\u30bf\u3001\u30b9\u30e9\u30a4\u30b9\u3067\u306a\u3051\u308c\u3070 \u57fa\u672c\u7684\u306b NOT NULL\u3001gorp\u3067\u306f\u3001\u57fa\u672c\u7684\u306b NULL\u5024\u53ef\u3068\u8a2d\u5b9a\u3055\u308c\u307e\u3059\u3002 \n\uff18. \u30bf\u30b0\u6307\u5b9adefault\u5024\u306e\u6271\u3044\u306f\u5927\u304d\u304f\u7570\u306a\u308a\u3001genmai\u3067\u306fDB\u30c6\u30fc\u30d6\u30eb\u4e0a\u3067\u30ab\u30e9\u30e0\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3068\u3057\u3066\u8a2d\u5b9a\u3055\u308c\u307e\u3059\u304c \"TestTbl{}\"\u3092insert\u3059\u308b\u3068\u3001(\u5f53\u7136\u3060\u304c)\u305d\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306b\u306f\u306a\u308a\u307e\u305b\u3093\u3002 \n\u9006\u306b gorp\u3067\u306f\u3001DB\u30c6\u30fc\u30d6\u30eb\u4e0a\u3067\u30ab\u30e9\u30e0\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306b\u306f\u8a2d\u5b9a\u3055\u308c\u307e\u305b\u3093\u304c\u3001\"TestTbl{}\"\u3092insert\u3059\u308b\u3068\u3001DB\u4e0a\u305d\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3068\u306a\u308a\u307e\u3059\u3002 \u305f\u3060\u3057 gorp\u3067\u306f\u3001\u30bf\u30b0\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\u3068 Insert( )\u6642\u306b\u6307\u5b9a\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5024\u304c\u7121\u8996\u3055\u308c\u3066\u3001\u305d\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u304cDB\u306b\u53cd\u6620\u3055\u308c\u308b\u306e\u306f\u5947\u5999\u3067\u3059(2016-05\u6642\u70b9)\u3002 \n\uff19. \u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u540d(\u30ab\u30e9\u30e0\u540d)\u3068\u57cb\u3081\u8fbc\u307e\u308c\u305f\u69cb\u9020\u4f53\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u540d(\u30ab\u30e9\u30e0\u540d)\u306b\u91cd\u8907\u304c\u3042\u3063\u305f\u5834\u5408\u3001\u30c6\u30fc\u30d6\u30eb\u751f\u6210\u6642\u306bgenmai\u3067\u306f\u30a8\u30e9\u30fc\u3068\u306a\u308a\u307e\u3059\u304c\u3001gorp\u3067\u306f \u30a8\u30e9\u30fc\u306b\u306a\u3089\u306a\u3044\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u610f\u56f3\u3057\u3066\u306a\u3044\u306e\u306a\u3089\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002 \n\ngorp\n        type UserTbl  struct { Field int ; Field2 int }\n        type UserATbl struct { Field int ; fielda int ; User }\n            \u30fb\u30fb\u30fb\n        dbmap.AddTable( UserATbl ) \n        dbmap.CreateTable()        // ---> \u30ab\u30e9\u30e0\u306f Field,fielda,Field2 \u304c\u3067\u304d\u308b\n\n\n\uff11\uff10. \u6642\u9593\u578b\u306b\u3064\u3044\u3066\u306f json\u3084\u30c9\u30e9\u30a4\u30d0\u30fc\u3068\u306e\u95a2\u4fc2\u3067\u3044\u308d\u3044\u308d\u5fae\u5999\u306a\u3082\u306e\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u304c\u3001\u672a\u8abf\u67fb\u3067\u3059\u3002  genmai\u306b\u306f \u4e0b\u8a18\u306eTimeStamp\u578b\u304c\u3042\u308a\u3001\u751f\u6210\u6642\u3084update\u6642\u306b\u4f55\u304c\u3057\u304b\u306e\u30b5\u30dd\u30fc\u30c8\u304c\u3042\u308b\u307f\u305f\u3044\u3067\u3059\u3002 \n\ngenmai\n    type TimeStamp struct {\n        // \u751f\u6210\u6642\u523b\u3002 \u3053\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306fBeforeInsert\u306b\u3088\u308a\u81ea\u52d5\u7684\u306b\u8a2d\u5b9a\u3055\u308c\u308b\n        CreatedAt time.Time `json:\"created_at\"`\n        // update\u6642\u523b\u3002 \u3053\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306fBeforeUpdate\u306b\u3088\u308a\u81ea\u52d5\u7684\u306b\u8a2d\u5b9a\u3055\u308c\u308b\n        UpdatedAt time.Time `json:\"updated_at\"`\n    }\n\n\ngorp\u306b\u306f\u3001\u300ctime.Time\u30d5\u30a3\u30fc\u30eb\u30c9\u3092 database/sql\u30c9\u30e9\u30a4\u30d0\u30fc\u3078\u6e21\u3059\u304c\u3001\u3053\u306e\u578b\u306e\u632f\u821e\u3044\u306f\u30c9\u30e9\u30a4\u30d0\u30fc\u306b\u3088\u308b\u3002 MySQL\u30e6\u30fc\u30b6\u306f\u3068\u304f\u306b\u6ce8\u610f\u8981\u3002 timezone/DST\u306e\u6f5c\u5728\u7684\u554f\u984c\u3092\u907f\u3051\u308b\u306b\u306f\u3001time\u30c7\u30fc\u30bf\u7528\u306b\u6574\u6570\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u7528\u3044 UNIX\u30bf\u30a4\u30e0\u3092\u30b9\u30c8\u30a2\u3059\u308b\u3053\u3068\u3082\u8003\u3048\u308b\u307f\u308b\u3079\u3057\u300d\u307f\u305f\u3044\u306a\u3053\u3068\u304c\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002 \n\uff0agenmai \u591a\u6bb5\u57cb\u3081\u8fbc\u307f\u5bfe\u51e6\n\ngenmai.go\n        \u30fb\u30fb\u30fb\n    func (db *DB) fieldIndexByName(t reflect.Type, name string, index []int) []int {\n            \u30fb\u30fb\u30fb\n            if field.Anonymous {\n                if idx := db.fieldIndexByName(field.Type, name, append(index, i)); len(idx) > 0 {\n                    //return append(index, idx...)  *** \u30a2\u30da\u30f3\u30c9\u305b\u305a\u306b idx\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059 ***\n                    return idx\n                }\n            }\n            \u30fb\u30fb\u30fb\n    }\n\n\n\n\n\uff12\u7ae0 \u30c6\u30fc\u30d6\u30eb\u751f\u6210\u30fbQUERY\u306e\u65b9\u5f0f\n\u672c\u7ae0\u3067\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002 \n    // \u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53 <---> DB\u30c6\u30fc\u30d6\u30eb  // ------ gorp --------\n    type UserTbl struct {               // \u5909\u540d --> user_tbl\n        Id       int64  `db:\"pk\"`       // `db:\"id,primarykey,autoincrement\"` \n        Name     string                 // `db:\"name\"`\n        Age      int                    // `db:\"age\"`\n    }\n    // \u53d7\u3051\u5074\u69cb\u9020\u4f53\uff1aDB\u3068\u76f4\u63a5\u306e\u7d10\u3065\u3051\u306a\u3057\n    type UserData struct {              //\n        Age       int                   //\n        lowerDmy  int                   //\n        Name2 string    `column:\"name\"` // `db:\"name\"`\n    }\n        \u30fb\u30fb\u30fb\n    db.Insert( &UserTbl{ Name: \"Alice\", Age:22 })\n    db.Insert( &UserTbl{ Name: \"John\" , Age:33 })\n\n\n\uff12.\uff11 genmai\n\n\uff12.\uff11.\uff11 \u65b9\u5f0f\n\uff11. \u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u306b\u57fa\u3065\u304f DB\u30c6\u30fc\u30d6\u30eb\u4f5c\u6210\u6642\u3001\u305d\u306e\u4ed6 DB\u3068\u306e\u3084\u308a\u53d6\u308a\u6642\u306f\n\u3000\u6307\u5b9a\u3055\u308c\u305f\u69cb\u9020\u4f53\u3092\u6bce\u56de\u89e3\u6790\u3057\u3001\u30ea\u30fc\u30c9\u30fb\u30e9\u30a4\u30c8\u3057\u307e\u3059\u3002 \n\uff12. \u30af\u30a8\u30ea\u306f\u95a2\u6570\u5f62\u5f0f\u3067\u7d44\u307f\u7acb\u3066\u307e\u3059\n\ngenmai\n    var users []UserTbl \n    db.Select( &users )                           // \u5168\u884c\u30fb\u5168\u30ab\u30e9\u30e0\n    db.Select( &users, db.Where( \"age\",\">\",30 ))  // \u5168\u30ab\u30e9\u30e0\u3001\u6761\u4ef6\u4ed8\u304d\n    db.Select( &users, []string{ \"name\",\"age\" })  // \u4e00\u90e8\u30ab\u30e9\u30e0(name,age)\n        \u30fb\u30fb\u30fb\n    db.Update( &users )                           // primaryKey\u306b\u57fa\u3065\u304f\n\n\n\n\u30ab\u30e9\u30e0\u306e\u6307\u5b9a\u306f\u57fa\u672c\u7684\u306b\u306fDB\u4e0a\u306e\u540d\u79f0\u3092\u7528\u3044\u307e\u3059\u3002 ALIAS\u6307\u5b9a\u3067\u304d\u307e\u305b\u3093\u3002 \nSelect( )\u306e\u7b2c\u4e00\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u30ab\u30e9\u30e0\u5024\u3092\u53d7\u3051\u53d6\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3001\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u300c\u30b9\u30e9\u30a4\u30b9\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3067\u3001\u305d\u306e\u8981\u7d20\u578b\u306f\u69cb\u9020\u4f53\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u300d\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002  \u3057\u304b\u3057\u3001\u30bd\u30fc\u30b9\u4e0a\u306f\u6b21\u306e\u3069\u3061\u3089\u304b\u3067\u3082OK\u306b\u307f\u3048\u307e\u3059\u3002 \n\na. \u30b9\u30e9\u30a4\u30b9\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3067\u3001\u305d\u306e\u8981\u7d20\u578b\u306f\u69cb\u9020\u4f53\u307e\u305f\u306f\u69cb\u9020\u4f53\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3002\n\u3000\u30c7\u30fc\u30bf\u306f \u4e0a\u66f8\u304d\u3067\u306f\u306a\u3044 \u3067\u3059\u3002 \nb. int,string\u7b49(\u975e\u69cb\u9020\u4f53)\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3067\u3001\u30ab\u30e9\u30e0\u6307\u5b9a\u306f\uff11\u3064\u3067\u3042\u308b\u3053\u3068\u3002\n\u3000\u6700\u521d\u306b\u898b\u3064\u304b\u3063\u305f\u884c\u306e\u5024\u304c\u8a2d\u5b9a\u3055\u308c\u308b\u3002 \n\ngenmai\n                            // '\u69cb\u9020\u4f53\u3078\u306e\u30dd\u30a4\u30f3\u30bf'\u306e\u30b9\u30e9\u30a4\u30b9\u3078\u306e\u30dd\u30a4\u30f3\u30bf\n    var  data [](*UserData) \n    data = append( data,&UserData{ Name2:\"Bob-0\",Age:15 } )\n    data = append( data,&UserData{ Name2:\"Bob-1\",Age:15 } )\n    data = append( data,&UserData{ Name2:\"Bob-2\",Age:15 } )\n    err = db.Select( &data, []string{\"name\",\"age\"},db.From(&UserTbl{}))\n    fmt.Println( data )                 // --> [0xc08209f0c0 0xc08209f120]\n    fmt.Println( *data[0],*data[1] )    // --> {22 0 Alice} {33 0 John}\n\n                                        // string\u3078\u306e\u30dd\u30a4\u30f3\u30bf\n    var name string\n    err = db.Select( &name, \"name\", db.From(&UserTbl{}), \n                    db.Where( \"age\",\">\",1 ).OrderBy(\"id\", \"DESC\")) \n    fmt.Println( name )                 // --> John\n\n    var user UserTbl;                                  \n    db.Select( &user,db.From(&UserTbl{}),db.Limit(1) ) // \u30a8\u30e9\u30fc(\u69cb\u9020\u4f53\u3078\u306e\u30dd\u30a4\u30f3\u30bf)\n\n    var ids []int64 ; \n    db.Select( &ids, \"id\",From(&UserTbl{}))            // \u30a8\u30e9\u30fc(\u975e\u69cb\u9020\u4f53\u306e\u30b9\u30e9\u30a4\u30b9)\n\n\n\nOn( )\u3067\u306e\u8a18\u8ff0\u306f\u6b21\u306e\u30d1\u30bf\u30fc\u30f3\u3067\u3059\n\n\ngenmai\n    On( \"id\" )                  From() or \u53d7\u3051\u5074\u69cb\u9020\u4f53\u30c6\u30fc\u30d6\u30eb.id = Join\u30c6\u30fc\u30d6\u30eb.id\n    On( \"id\", \"=\", 1 )          From() or \u53d7\u3051\u5074\u69cb\u9020\u4f53\u30c6\u30fc\u30d6\u30eb.id = 1\n    On( &Table{}, \"id\" )        table.id = Join\u30c6\u30fc\u30d6\u30eb.id\n    On( &Table{},\"id\",\"=\", 1 )  table.id = 1, Table{} \u306f\u30dd\u30a4\u30f3\u30bf\u3067\u306a\u304f\u3066\u3082\u53ef\n\n\n\nWhere( )\u3001And( )\u3001Or( )\u7b49\u3067\u306e\u8a18\u8ff0\u306f\u6b21\u306e\u30d1\u30bf\u30fc\u30f3\u3067\u3059\n\n\ngenmai\n    Or( db.Where(\u30fb\u30fb\u30fb).And(\u30fb\u30fb\u30fb))   \u6761\u4ef6\u306e\u30cd\u30b9\u30c8\n    Where( \"id\" )                       \u3042\u3068\u306b.Between()\u305d\u306e\u4ed6 Condition\u304c\u7d9a\u304f\n    Where( &Table{}, \"id\" )             \u3042\u3068\u306b.Between()\u305d\u306e\u4ed6 Condition\u304c\u7d9a\u304f\n    Where( \"id\", \"=\", 1 )               \u30d1\u30e9\u30e1\u30fc\u30bf 3\u3064\n    Where( &Table{}, \"id\", \"=\", 1 )     \u30d1\u30e9\u30e1\u30fc\u30bf 4\u3064\n\n\n\n\uff12.\uff11.\uff12 genmai.Select( )\u306e\u53d7\u3051\u5074\u69cb\u9020\u4f53\u3068DB\u30c6\u30fc\u30d6\u30eb\u306e\u95a2\u4fc2\n\uff11. From( )\u3067\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u3092\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u3001\u305d\u306e\u53d7\u3051\u5074\u69cb\u9020\u4f53\u306b\u5bfe\u5fdc\u3059\u308b\n\u3000\u3000DB\u30c6\u30fc\u30d6\u30eb\u306e\u51e6\u7406\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002 (\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\uff1d\u53d7\u3051\u5074\u69cb\u9020\u4f53)\n\uff12. From( )\u3067\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\n\n\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u3068\u306f\u7570\u306a\u308b\u69cb\u9020\u4f53(\u53d7\u3051\u5074\u69cb\u9020\u4f53)\u3067DB\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u3068\u308c\u307e\u3059\u3002\nDB\u304b\u3089\u30ea\u30fc\u30c9\u3057\u305f\u30ab\u30e9\u30e0\u540d\u3068\u4e00\u81f4\u3059\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u53d7\u3051\u5074\u69cb\u9020\u4f53\u304b\u3089\u691c\u7d22\u3055\u308c\u307e\u3059\u304c\u3001\u53d7\u3051\u5074\u69cb\u9020\u4f53\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u30bf\u30b0\u306b\u3088\u308b\u30ab\u30e9\u30e0\u540d\u6307\u5b9a( column:\"xxx\" )\u304c\u3042\u308b\u306a\u3089\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u305d\u306e\u540d\u524d\u3068\u3057\u3066\u6271\u308f\u308c\u3001\u30ab\u30e9\u30e0\u6307\u5b9a\u304c\u306a\u3044\u306a\u3089\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306esnake_case\u5909\u63db\u3055\u308c\u305f\u540d\u524d\u3068\u3057\u3066\u6271\u308f\u308c\u307e\u3059\u3002 \n\n\ngenmai\n    var  data []UserData\n    db.Select( &data, []string{\"name\",\"age\"},db.From(&UserTbl{}))\n    fmt.Println( data )          // --> [{22 0 Alice} {33 0 John}]\n\n\n\n\u53d7\u3051\u5074\u69cb\u9020\u4f53\u306e\u5c0f\u6587\u5b57\u3067\u59cb\u307e\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u3067\u306f\u3001\u30ab\u30e9\u30e0\u5024\u3092\u53d7\u3051\u53d6\u308c\u307e\u305b\u3093\u3002 \n\u53d7\u3051\u5074\u69cb\u9020\u4f53\u306b\u306f\u3001\u30e6\u30fc\u30b6\u304c\u5b9a\u7fa9\u3057\u305f\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u4ed8\u304d\u306e\u69cb\u9020\u4f53\u578b(\u57cb\u3081\u8fbc\u307f\u3067\u306a\u3044)\u304c\u3042\u3063\u3066\u3082\u304b\u307e\u3044\u307e\u305b\u3093\u304c\u3001\u30ab\u30e9\u30e0\u5024\u306f\u53d7\u3051\u53d6\u308c\u307e\u305b\u3093\u3002\n\u53d7\u3051\u5074\u69cb\u9020\u4f53\u3067\u306f\u3001\u30bf\u30b0\u306b\u3088\u308b\u975e\u30ab\u30e9\u30e0(db:\"-\")\u6307\u5b9a\u306e\u3042\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u3067\u3082\u30ab\u30e9\u30e0\u5024\u3092\u53d7\u3051\u53d6\u308c\u307e\u3059\u3002 (\u5c0f\u6587\u5b57\u3067\u59cb\u307e\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u9664\u304f)\n\u30ab\u30e9\u30e0\u540d\u306b\u5bfe\u5fdc\u3059\u308b\u53d7\u3051\u5074\u69cb\u9020\u4f53\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u307f\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u306f\u30a8\u30e9\u30fc\u304c\u8fd4\u308a\u307e\u3059\u3002 \n\n\ngenmai\n    type UserData2 struct {\n        Age     int\n    }\n    type UserData3 struct {\n        Name    string\n    }\n    type UserData4 struct {     // \u53d7\u3051\u5074\u69cb\u9020\u4f53\uff1aDB\u3068\u76f4\u63a5\u306e\u7d10\u3065\u3051\u306a\u3057\n             UserData2          //  \u53d7\u3051\u53d6\u308a\u53ef\n        User UserData3          //  \u53d7\u3051\u53d6\u308a\u4e0d\u53ef(\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3042\u308a)\n    //  name string             //  \u53d7\u3051\u53d6\u308a\u4e0d\u53ef(\u5c0f\u6587\u5b57\u3067\u59cb\u307e\u308b)\n        Name string           \n        Id   int64  `db:\"-\"`    //  \u53d7\u3051\u53d6\u308a\u53ef(\u975e\u30ab\u30e9\u30e0\u5316\u3067\u3082)\n    }\n        \u30fb\u30fb\u30fb\n    var data4  []UserData4\n    db.Select( &data4, []string{\"name\",\"age\",\"id\"},db.From(&UserTbl{}))\n    fmt.Println( data4 )    // --> [{{22} {} Alice 1 } {{33} {} John 2 }]\n\n\n\n\uff12.\uff12 gorp\n\n\uff12.\uff12.\uff11 \u65b9\u5f0f\n\uff11. \u306f\u3058\u3081\u306bDB\u30c7\u30fc\u30bf\u3068\u69cb\u9020\u4f53\u306e\u7d10\u3065\u3051\u60c5\u5831\u3092\u4f5c\u6210\u767b\u9332\u3057\u3001\u4ee5\u5f8c\u3001\u305d\u306e\u60c5\u5831\u3092\u3082\u3068\u306b\n\u3000\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002 \n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u8d77\u52d5\u6642\u306b\u306f\u6bce\u56de\u3001\u60c5\u5831\u306e\u767b\u9332\u4f5c\u696d(AddTable)\u3059\u308b\u306e\u304c\u57fa\u672c\u3068\u306a\u308a\u307e\u3059(\u767b\u9332\u3057\u305f\u3060\u3051\u3067\u306fDB\u4e0a\u306e\u30c7\u30fc\u30bf\u306b\u76f4\u63a5\u7684\u306a\u5f71\u97ff\u306f\u3042\u308a\u307e\u305b\u3093)\u3002  \nSelect\u7cfb\u3001insert\u7b49\u3067\u306f\u3001\u767b\u9332\u3057\u3066\u3044\u306a\u304f\u3066\u3082DB\u3068\u30c7\u30fc\u30bf\u3092\u3084\u308a\u53d6\u308a\u3067\u304d\u307e\u3059\u3002\nSelect( )\u3067\u306f\u305d\u3046\u3059\u308b\u3053\u3068\u3067\u53d7\u3051\u5074\u69cb\u9020\u4f53\u306e\u81ea\u7531\u5ea6\u304c\u5897\u3057\u307e\u3059\u3002 \u3057\u304b\u3057 insert( )\u306e\u5834\u5408\u306f\u3001\u4f8b\u3048\u3070 \u30c6\u30fc\u30d6\u30eb\u540d\u3084\u30ab\u30e9\u30e0\u540d\u3092\u52d5\u7684\u306b\u5909\u540d\u3057\u3066\u3044\u305f\u5834\u5408\u3001\u6b21\u56de\u8d77\u52d5\u5f8c\u306b\u672a\u767b\u9332\u306e\u72b6\u614b\u3067\u4f7f\u3048\u308b\u306e\u304b\u4e0d\u660e\u3067\u3059(\u672a\u8abf\u67fb)\u3002   \n\u901a\u5e38\u306f\u4f7f\u3044\u307e\u305b\u3093\u304c\u3001\u30c6\u30fc\u30d6\u30eb\u540d\u3092\u6307\u5b9a\u3057\u306a\u3044DropTables( )\u3084 TrucateTables( ) \u306f\u3001DbMap\u306b\u767b\u9332\u3055\u308c\u305f\u30c6\u30fc\u30d6\u30eb\u60c5\u5831\u3092\u3082\u3068\u306b\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002 \u5f93\u3063\u3066\u3001\u3042\u3089\u304b\u3058\u3081 DbMap\u306b AddTable\u3055\u308c\u3066\u3044\u306a\u3044DB\u4e0a\u306e\u30c7\u30fc\u30bf\u306b\u306f\u5f71\u97ff\u3057\u307e\u305b\u3093\u3002 \u30c6\u30b9\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u7b49\u3092\u66f8\u304f\u3068\u304d\u306b\u306f\u3061\u3087\u3063\u3068\u3054\u6ce8\u610f\u3002\n\u307e\u305f\u3001DropTables( )\u3042\u308b\u3044\u306f\u3001\u69cb\u9020\u4f53\u3092\u6307\u5b9a\u3057\u305f DropTable( )\u3092\u30b3\u30fc\u30eb\u3057\u3066\u3082\u3001DbMap\u4e2d\u306e\u767b\u9332\u60c5\u5831\u306e\u65b9\u306f\u6d88\u3048\u306a\u3044\u3088\u3046\u3067\u3059\u3002 DbMap\u4e2d\u306e\u767b\u9332\u60c5\u5831\u306e\u4e00\u90e8\u3060\u3051\u3092\u524a\u9664\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u306f\u306a\u3044\u307f\u305f\u3044\u3067\u3059(\u5168\u524a\u9664\uff1d\u65b0\u898f\u4f5c\u6210)\u3002 \n\n\uff12. Select( )\u3067\u306f\u30af\u30a8\u30ea\u3092SQL\u6587\u3067\u8a18\u8ff0\u3057\u307e\u3059\n\ngorp\n    var users []UserTbl                     // PostgreSQL\u3067\u306f  ? -> $1\n    dbmap.Select( &users, `SELECT * FROM user_tbl WHERE age > ?`,30 )\n        \u30fb\u30fb\u30fb\n    dbmap.Update( &users )                        // primaryKey\u306b\u57fa\u3065\u304f\n\n\n\n\u30ab\u30e9\u30e0\u306e\u6307\u5b9a\u306f\u57fa\u672c\u7684\u306b\u306fDB\u30c6\u30fc\u30d6\u30eb\u4e0a\u306e\u540d\u79f0\u3092\u7528\u3044\u307e\u3059\u3002 ALIAS\u6307\u5b9a\u3082\u3067\u304d\u307e\u3059\u3002 \nSelect( )\u306e\u7b2c\u4e00\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\n\na. \u30b9\u30e9\u30a4\u30b9\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u306e\u5834\u5408(\u305d\u306e\u8981\u7d20\u578b\u306f\u69cb\u9020\u4f53\u3067\u306a\u304f\u3066\u3082OK\u3001\u30dd\u30a4\u30f3\u30bf\u3082OK)\u3001\n\u3000\u7d50\u679c\u306f\u305d\u306e\u30b9\u30e9\u30a4\u30b9\u306b \u4ed8\u52a0 \u3055\u308c\u307e\u3059\u3002\nb. \u69cb\u9020\u4f53 or \u69cb\u9020\u4f53\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u306e\u5834\u5408\u3001\u7d50\u679c\u306f\u30e1\u30bd\u30c3\u30c9\u306e\u623b\u308a\u5024\u3068\u3057\u3066\u30dd\u30a4\u30f3\u30bf\u306e\n\u3000\u30b9\u30e9\u30a4\u30b9\u3067\u8fd4\u3055\u308c\u307e\u3059\u3002  \u5143\u306e\u69cb\u9020\u4f53(\u7b2c\u4e00\u30d1\u30e9\u30e1\u30fc\u30bf)\u306b\u306f\u5f71\u97ff\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \n\ngorp\n    // \u30b9\u30e9\u30a4\u30b9\u3078\u306e\u30dd\u30a4\u30f3\u30bf\n    users  := []UserTbl{ {100,\"Bob\",44} }\n    dbmap.Select( &users,`SELECT * FROM user_tbl` )\n    fmt.Println( users )    // -->[{100 Bob 44} {1 Alice 22} {2 John 33}] \u4ed8\u52a0\n\n    // \u30b9\u30e9\u30a4\u30b9\u3078\u306e\u30dd\u30a4\u30f3\u30bf\n    ids  := []int64{100,200}\n    dbmap.Select( &ids,`SELECT id FROM user_tbl` )\n    fmt.Println( ids )      // -->[100 200 1 2] \u4ed8\u52a0\n\n    // \u69cb\u9020\u4f53\n    var usp2 []interface{}\n    usp2,_ = dbmap.Select( UserTbl{},`SELECT * FROM user_tbl` ) \n    fmt.Println( usp2 )            // --> [0xc0820058c0 0xc082005940]\n    fmt.Println( usp2[0],usp2[1] ) // --> &{1 Alice 22} &{2 John 33}\n\n    // \u69cb\u9020\u4f53\u3078\u306e\u30dd\u30a4\u30f3\u30bf\n    user := UserTbl{500,\"Mick\",11}\n    usp2,_ = dbmap.Select( &user,`SELECT * FROM user_tbl` ) \n    fmt.Println( usp2 )             // --> [0xc082084cc0 0xc082084d40]\n    fmt.Println( usp2[0],usp2[1] )  // --> &{1 Alice 22} &{2 John 33}\n    fmt.Println( user )             // -->[{500 Mick 11}] \u5909\u5316\u306a\u3057\n\n\n\n\u5bfe\u8c61\u3068\u306a\u308b\u884c\u304c\uff11\u884c\u306e\u5834\u5408\u306f SelectOne( )\u306e\u7b2c\u4e00\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3001\u6c42\u3081\u308b\u5024\u304c\uff11\u3064\u306e int64 \u3084 string\u305d\u306e\u4ed6\u306e\u5834\u5408\u306f SelectInt( ),SelectStr( )\u3001\u305d\u306e\u4ed6\u306e\u623b\u308a\u5024\u3067\u30ab\u30e9\u30e0\u5024\u3092\u53d7\u3051\u53d6\u308c\u307e\u3059\u3002 \n\n\ngorp\n    var user UserTbl                            // PostgreSQL\u3067\u306f  ? -> $1\n    dbmap.SelectOne( &user,`SELECT * FROM user_tbl WHERE id=?`,1 ) \n    fmt.Println( user )             // -->{1 Alice 22}\n\n\n\n\n\u30af\u30a8\u30ea\u6587\u306b\u4ed5\u8fbc\u3080\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u306e\u62e1\u5f35\u3068\u3057\u3066\u3001 \":id\" \u306e\u5f62\u306e\u3001\u540d\u524d\u306b\u3088\u308b\u57cb\u3081\u8fbc\u307f\u65b9\u6cd5\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \n\n\ngorp\n    // \u30de\u30c3\u30d7\u306b\u3088\u308b\u7f6e\u63db \n    var users4 []UserTbl\n    replMap := map[string]interface{}{ \"name\": \"Alice\", \"age\": 20 }\n    dbmap.Select( &users4, `SELECT * FROM user_tbl \n                            WHERE name = :name AND age > :age`, replMap )\n    fmt.Println( users4 )            // -->[{1 Alice 22}]\n\n    // \u69cb\u9020\u4f53\u306b\u3088\u308b\u7f6e\u63db\n    type DataStr struct {\n        UserName string\n        Age      int\n    }\n    users4  = []UserTbl{}\n    replStr := DataStr{ UserName:\"Alice\", Age: 20 }\n    dbmap.Select( &users4, `SELECT * FROM user_tbl WHERE name = :UserName \n                            AND age > :Age`, &replStr )\n    fmt.Println( users4 )            // -->[{1 Alice 22}]\n\n\n\n\uff12.\uff12.\uff12 gorp.Select( )\u306e\u53d7\u3051\u5074\u69cb\u9020\u4f53\u3068DB\u30c6\u30fc\u30d6\u30eb\u306e\u95a2\u4fc2\nSelect( )\u306e\u53d7\u3051\u5074\u69cb\u9020\u4f53\u3068DB\u30c6\u30fc\u30d6\u30eb\u306f\u76f4\u63a5\u306b\u306f\u95a2\u4fc2\u3042\u308a\u307e\u305b\u3093\u3002  \u4e8b\u524d\u306eAddTable\u767b\u9332\u304c\u306a\u304f\u3066\u3082\u52d5\u304d\u307e\u3059\u3002 DB\u304b\u3089\u30ea\u30fc\u30c9\u3057\u305f\u30ab\u30e9\u30e0\u540d\u3068\u4e00\u81f4\u3059\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u53d7\u3051\u5074\u69cb\u9020\u4f53\u304b\u3089\u691c\u7d22\u3055\u308c\u307e\u3059\u304c\u3001\u53d7\u3051\u5074\u69cb\u9020\u4f53\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u30bf\u30b0\u306b\u3088\u308b\u30ab\u30e9\u30e0\u540d\u6307\u5b9a(db:\"xxx\")\u304c\u3042\u308b\u306a\u3089\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u305d\u306e\u540d\u524d\u3068\u3057\u3066\u6271\u308f\u308c\u3001\u30ab\u30e9\u30e0\u6307\u5b9a\u304c\u306a\u3044\u306a\u3089\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u540d\u524d\u306e\u307e\u307e\u6271\u308f\u308c\u307e\u3059\u3002\n\u306a\u304a\u3001\u3053\u3053\u3067\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u30fb\u30ab\u30e9\u30e0\u540d\u306f \u5927\u5c0f\u6587\u5b57\u306e\u533a\u5225\u306f\u7121\u3044 \u307f\u305f\u3044\u3067\u3059(\u30bd\u30fc\u30b9\u3092\u30c1\u30e9\u898b\u3057\u305f\u9650\u308a\u3067\u306f\u5c0f\u6587\u5b57\u5909\u63db\u3057\u3066\u6bd4\u8f03\u3057\u3066\u3044\u308b\u3088\u3046\u3060\u3057\u3001\u72ed\u3044\u7bc4\u56f2\u3067\u306e\u5b9f\u9a13\u3067\u3082\u305d\u3046\u306a\u308a\u307e\u3059\u304c\u3001\u3042\u307e\u308a\u81ea\u4fe1\u306f\u306a\u3044\u3067\u3059)\u3002\ngenmai\u3068\u540c\u69d8\u3001\u6b21\u306e\u5236\u9650\u304c\u3042\u308a\u307e\u3059\n\n\u53d7\u3051\u5074\u69cb\u9020\u4f53\u306e\u5c0f\u6587\u5b57\u3067\u59cb\u307e\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u3067\u3001\u30ab\u30e9\u30e0\u5024\u3092\u53d7\u3051\u53d6\u308d\u3046\u3068\u3059\u308b\u3068panic\u3068\u306a\u308a\u307e\u3059\u3002\n\u53d7\u3051\u5074\u69cb\u9020\u4f53\u306b\u306f\u3001\u30e6\u30fc\u30b6\u304c\u5b9a\u7fa9\u3057\u305f\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u4ed8\u304d\u306e\u69cb\u9020\u4f53\u578b(\u57cb\u3081\u8fbc\u307f\u3067\u306a\u3044)\u304c\u3042\u3063\u3066\u3082\u304b\u307e\u3044\u307e\u305b\u3093\u304c\u3001\u30ab\u30e9\u30e0\u5024\u306f\u53d7\u3051\u53d6\u308c\u307e\u305b\u3093\u3002\n\u53d7\u3051\u5074\u69cb\u9020\u4f53\u3067\u306f\u3001\u30bf\u30b0\u306b\u3088\u308b\u975e\u30ab\u30e9\u30e0(db:\"-\")\u6307\u5b9a\u306e\u3042\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u3067\u306f\u30ab\u30e9\u30e0\u5024\u306f\u53d7\u3051\u53d6\u308c\u307e\u305b\u3093\u3002 \n\u30ab\u30e9\u30e0\u540d\u306b\u5bfe\u5fdc\u3059\u308b\u53d7\u3051\u5074\u69cb\u9020\u4f53\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u307f\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u306f\u30a8\u30e9\u30fc\u304c\u8fd4\u308a\u307e\u3059\u3002 \n\n\n\uff13\u7ae0 genmai\u306e\u62e1\u5f35\ngenmai\u3068gorp\u306e\u6700\u5927\u306e\u9055\u3044\u306f\u3001\u30af\u30a8\u30ea\u306b\u95a2\u6570\u5f62\u5f0f\u3092\u7528\u3044\u308b\u304b\u3001SQL\u6587\u3092\u4f7f\u3046\u304b\u306b\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002 genmai\u3067\u7c21\u5358\u306a\u5834\u5408\u306b\u306f\u95a2\u6570\u5f62\u5f0f\u3092\u4f7f\u3063\u3066\u3044\u3066\u3082\u3001\u8907\u96d1\u306a\u5834\u5408\u306f\u6a19\u6e96\u306edatabase/sql\u3092\u53d6\u308a\u51fa\u3057\u3066\u4f7f\u3048\u3070\u3044\u3044\u306e\u3067\u3059\u304c\u3001\u305d\u308c\u3067\u306f\u3001\u69cb\u9020\u4f53\u3068\u306e\u9023\u643a\u304c\u3068\u308c\u307e\u305b\u3093\u3002 \u305d\u3053\u3067 woremacx\u3055\u3093\u304c genmai\u3067SQL\u6587\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b SelectSql( )\u3092\u516c\u958b\u3057\u307e\u3057\u305f\u3002 (http://qiita.com/woremacx/items/ac3585d786f5f7e52318)\n\u79c1\u3082\u6c0f\u306b\u5023\u3063\u3066\u3001genmai\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5c11\u3057\u3044\u3058\u3063\u3066\u3001SelectSql2( )\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002  \u5177\u4f53\u4f8b\u306f\uff14\u7ae0 \u53c2\u7167\u3002 \n\u306a\u304a\u3001\u672c\u62e1\u5f35\u306f\u3001\u7c21\u5358\u306a\u3053\u3068\u306f\u7c21\u5358\u306b\u3067\u304d\u308b\u3088\u3046\u306b\u3068\u8003\u3048\u305f\u3067\u3042\u308d\u3046genmai\u4f5c\u8005\u306e\u610f\u306b\u53cd\u3059\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3053\u3068\u3092\u8a18\u3057\u3066\u304a\u304d\u307e\u3059\u3002 \n\n\uff13.\uff11 SelectSql2( )\ngorp\u3068\u540c\u69d8\u306e\u30af\u30a8\u30eaSQL\u6587\u65b9\u5f0f\u3067\u3059\u3002 \n\u53d7\u3051\u5074\u3092\u8907\u6570\u6307\u5b9a\u3067\u304d\u3001\u307e\u305f AS \u3092\u4f7f\u3063\u3066\u30ab\u30e9\u30e0\u5024\u3092\u67d4\u8edf\u306b\u51e6\u7406\u3067\u304d\u307e\u3059\u3002 \u4f7f\u3044\u65b9\u306f\uff14\u7ae0\u53c2\u7167\n\n\u62e1\u5f35genmai\n    func (db *DB) SelectSql2( args ...interface{} ) error\n\n    \u4f8b\uff1a \n        err = db.SelectSql2( &users,&camps, \n                    `SELECT * FROM user_tbl JOIN campany_tbl\n                     ON user_tbl.campany_id = campany_tbl.id \n                     WHERE age > ? `,20 )       // PostgreSQL\u3067\u306f  ? -> $1\n\n\n\uff11. \u53d7\u3051\u5074\u30c7\u30fc\u30bf\u306e\u6307\u5b9a\u69d8\u5f0f\u306f\u6b21\u306e\u3069\u308c\u304b\uff11\u3064\u3067\u6df7\u5728\u306f\u4e0d\u53ef\u3002 \na. \u30b9\u30e9\u30a4\u30b9\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3067\u3001\u305d\u306e\u8981\u7d20\u578b\u306f\u69cb\u9020\u4f53(\u30dd\u30a4\u30f3\u30bf\u4e0d\u53ef)\u3002 \u8907\u6570\u6307\u5b9a\u53ef\u3002\nb. \u30b9\u30e9\u30a4\u30b9\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3067\u3001\u305d\u306e\u8981\u7d20\u578b\u306f\u975e\u69cb\u9020\u4f53(\u30dd\u30a4\u30f3\u30bf\u4e0d\u53ef)\u3002 \u8907\u6570\u6307\u5b9a\u53ef\n\u3000 \u3067\u3059\u304c\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u6307\u5b9a\u9806\u306b\u30ab\u30e9\u30e0\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u578b\u4e0d\u4e00\u81f4\u6642\u306e\u52d5\u4f5c\u306f\u4e0d\u5b9a\u3002\nc. int,string\u7b49(\u975e\u69cb\u9020\u4f53)\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3002 \u8907\u6570\u6307\u5b9a\u53ef\u3067\u3059\u304c\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u6307\u5b9a\u9806\n\u3000 \u306b\u30ab\u30e9\u30e0\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 \u578b\u4e0d\u4e00\u81f4\u6642\u306e\u52d5\u4f5c\u306f\u4e0d\u5b9a\u3002\na. \u3067\u306f\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u3068\u306f\u7570\u306a\u308b(\u53d7\u3051\u5074)\u69cb\u9020\u4f53\u3067\u5024\u3092\u53d7\u3051\u3068\u308c\u307e\u3059\u3002\n\u53d7\u3051\u53d6\u308a\u6642\u306b\u691c\u7d22\u3055\u308c\u308b\u540d\u79f0\u306f\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u306b\u6700\u5916\u306e\u69cb\u9020\u4f53\u540d(*1)\u3092\u524d\u7f6e\u3057\u305f\u3082\u306e\u3068\u3001\u3057\u306a\u3044\u3082\u306e\u306e\u4e21\u65b9\u3067\u3059\u3002 \u57cb\u3081\u8fbc\u307e\u308c\u305f(\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u306e\u306a\u3044)\u69cb\u9020\u4f53\u306e\u69cb\u9020\u4f53\u540d\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\n\u30ab\u30e9\u30e0\u5024\u3092\u53d7\u3051\u53d6\u308b\u3068\u304d\u306e\u691c\u7d22\u5bfe\u8c61\u540d\u306f\u3001\u3064\u304e\u306e\uff14\u30d1\u30bf\u30fc\u30f3\u3068\u306a\u308a\u307e\u3059\u3002 \n`\u6700\u5916\u306e\u69cb\u9020\u4f53\u540d(*1).\u975e\u69cb\u9020\u4f53\u8981\u7d20\u30d5\u30a3\u30fc\u30eb\u30c9\u540d(*2)`\n                   `\u975e\u69cb\u9020\u4f53\u8981\u7d20\u30d5\u30a3\u30fc\u30eb\u30c9\u540d(*2)`\n`\u6700\u5916\u306e\u69cb\u9020\u4f53\u540d(*1).\u57cb\u3081\u8fbc\u307e\u308c\u305f\u69cb\u9020\u4f53\u5185\u306e\u975e\u69cb\u9020\u4f53\u8981\u7d20\u30d5\u30a3\u30fc\u30eb\u30c9\u540d(*2)`\n                   `\u57cb\u3081\u8fbc\u307e\u308c\u305f\u69cb\u9020\u4f53\u5185\u306e\u975e\u69cb\u9020\u4f53\u8981\u7d20\u30d5\u30a3\u30fc\u30eb\u30c9\u540d(*2)`\n\n\u4f8b\uff1a\n        UserB struct { ValB int ; }\n        UserA struct { ValA int ; UserB }   // \u53d7\u3051\u5074\u69cb\u9020\u4f53\n\n\u306e\u3068\u304d\u3001UserA \u3092\u53d7\u3051\u5074\u69cb\u9020\u4f53\u306b\u3059\u308b\u3068\n        val_a\n        user_a.val_a\n        val_b\n        user_a.val_b\n\n\u304c\u691c\u7d22\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\u3002 \n(\uff0a1) TableNamer\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308c\u3070\u305d\u308c\u3067\u5b9a\u7fa9\u3057\u305f\u30c6\u30fc\u30d6\u30eb\u540d\u3001\n\u3000\u3000\u3000\u5b9f\u88c5\u3057\u3066\u3044\u306a\u3051\u308c\u3070snake_case\u5909\u63db\u3055\u308c\u305f\u540d\u79f0\n(\uff0a2) \u30bf\u30b0\u306b\u3088\u308b\u30ab\u30e9\u30e0\u540d\u6307\u5b9a\u304c\u3042\u308c\u3070\u305d\u306e\u540d\u79f0\u3001\u306a\u3051\u308c\u3070snake_case\u5909\u63db\n\u3000\u3000\u3000\u3055\u308c\u305f\u540d\u79f0\n\u975e\u30ab\u30e9\u30e0\u5316(db:\"-\")\u306f\u7121\u52b9(\u3064\u307e\u308a\u3042\u3063\u3066\u3082\u691c\u7d22\u3055\u308c\u308b)\u3002 \n\u5c0f\u6587\u5b57\u3067\u59cb\u307e\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30ab\u30e9\u30e0\u5024\u306e\u53d7\u3051\u53d6\u308a\u306b\u6307\u5b9a\u3067\u304d\u307e\u305b\u3093\u3002 \n\uff12. \u53d7\u3051\u53d6\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u5834\u5408\u3001\u3042\u308b\u3044\u306f\u53d7\u3051\u53d6\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u5019\u88dc\u304c\u8907\u6570\u898b\u3064\u304b\u3063\u305f\u5834\u5408\u306f\u3001\u30a8\u30e9\u30fc\u304c\u8fd4\u308a\u307e\u3059\u3002 \n\n\uff13.\uff12 ReplaceQueryKey( )\n\u30af\u30a8\u30ea\u306a\u3069\u306e\u6587\u5b57\u5217\u306b\u5bfe\u3057\u3066\u3001\"{key}\" \u306e\u5f62\u3092\u3001\u6587\u5b57\u5217\u7f6e\u63db\u3067\u304d\u307e\u3059\u3002 \n\n\u62e1\u5f35genmai\n    func (db *DB) ReplaceQueryKey( query string, quote bool,\n                                 args ...interface{} ) (string,error)\n\n\n\u6e21\u3055\u308c\u305fquery\u304b\u3089 \"{\"+key+\"}\" \u3092\u5358\u7d14\u306b\u63a2\u3057\u3001\u3042\u308c\u3070\u3059\u3079\u3066\u7f6e\u304d\u63db\u3048\u3001\u306a\u3051\u308c\u3070\u4f55\u3082\u3057\u307e\u305b\u3093\u3002 quote\u304ctrue\u306a\u3089\u7f6e\u63db\u6587\u5b57\u5217\u3092quote\u3057\u307e\u3059\u3002 \n\u5b89\u6613\u30fb\u5358\u7d14\u306a\u6587\u5b57\u5217\u7f6e\u63db\u3067\u3042\u3063\u3066\u3001gorp\u306e\u3088\u3046\u306a \u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u3078\u306e\u5c55\u958b\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002  \u307e\u305f\u3001\u305d\u308c\u304c\u6587\u5b57\u5217\u30c7\u30fc\u30bf\u4e2d\u304b\u3068\u304b\u3001\u305d\u306e\u4ed6\u306e\u5224\u5225\u3082\u4e00\u5207\u3057\u307e\u305b\u3093\u3002 \n\uff11. string\u3092 key\u3068\u3057\u305f\u3001map \u3042\u308b\u3044\u306f(\u30e6\u30fc\u30b6\u5b9a\u7fa9\u306e)\u69cb\u9020\u4f53\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u6e21\n\u3000\u3057\u3066\u304f\u3060\u3055\u3044\u3002  map\u3067\u3082\u69cb\u9020\u4f53\u3067\u3082\u3001string\u578b\u3001\u307e\u305f\u306f complex\u4ee5\u5916\u306e\u6570\u5024\u578b\n\u3000\u306e\u307f\u8a2d\u5b9a\u53ef\u80fd\u3067\u3059(\u4ed6\u306f\u7121\u8996)\u3002 \n\uff12. \u69cb\u9020\u4f53\u306f\u57cb\u3081\u8fbc\u307f(\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u306a\u3057)\u306e\u307f\u53ef\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u306fcolumn\u6307\u5b9a\u6709\u52b9\n\u3000\u3067\u3059\u304c\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f snake_case\u5909\u63db\u3055\u308c\u307e\u3059\u3002\n\n\u62e1\u5f35genmai\n    // \u30de\u30c3\u30d7\u306b\u3088\u308b\u7f6e\u63db\n    repls := map[string]interface{}{ \n                \"tbl\": \"`user_tbl`\", \"age\": \"11,22\" } \n\n    query,_ := db.ReplaceQueryKey( `SELECT * FROM {tbl} \n                                    WHERE age IN({age})`, \n                                    false,repls )\n    fmt.Println( query )// --> \"SELECT * FROM `user_tbl` WHERE age IN(11,22)\"\n\n    // \u69cb\u9020\u4f53\u306b\u3088\u308b\u7f6e\u63db\n    type AgeInt  int\n    type DataStr struct {\n        UserName string     `column:\"u_name\"`   // \"{u_name}\" \u3092\u7f6e\u63db\n        UserAge  AgeInt                         // \"{user_age}\" \u3092\u7f6e\u63db\n    }\n    data := DataStr{ UserName:\"Alice\", UserAge: 31 }\n    query,_ = db.ReplaceQueryKey( `SELECT * FROM user_tbl \n                    WHERE name = {u_name} AND age < {user_age}`, \n                    true,&data )\n    fmt.Println( query )    // --> SELECT * FROM user_tbl\n                            //          WHERE name = \"Alice\" AND age < 31\n        \u30fb\u30fb\u30fb\n    db.SelectSql2( &users,query )\n\n\n\u672c\u95a2\u6570\u3092 sql\u76f4\u63a5\u547c\u51fa\u3057\u7b49\u3067 prepare\u3092\u307e\u305f\u3044\u3067\u5229\u7528\u3059\u308b\u3088\u3046\u306a\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 genmai\u3067\u306f prepare\u3092\u5916\u306b\u898b\u305b\u3066\u3044\u307e\u305b\u3093\u3002 \n\n\uff13.\uff13 Select2( )\nSelectSql2( )\u3068\u306a\u308b\u3079\u304f\u6574\u5408\u304c\u3068\u308c\u308b\u3088\u3046\u306b\u3001Select( )\u3082\u5c11\u3057\u3060\u3051\u5909\u3048\u3066\u307f\u307e\u3057\u305f\u3002 \n\n\u62e1\u5f35genmai\n    func (db *DB) Select2( output interface{}, \n                            args ...interface{} ) error\n\n\n\uff11. \u30d1\u30e9\u30e1\u30fc\u30bf\u306bFrom( )\u3067\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\n\u3000\u3000\u30aa\u30ea\u30b8\u30ca\u30eb\u306e genmai.Select( )\u3068\u5168\u304f\u540c\u3058\u3067\u3059\u3002 \n\uff12. \u30d1\u30e9\u30e1\u30fc\u30bf\u306bFrom( )\u3067\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\n\n\u5148\u982d\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u7fa4\u306f\u3001SelectSql2( )\u3068\u540c\u3058\u3067\u53d7\u3051\u3092\u8907\u6570\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\nSELECT\u3059\u308b\u30ab\u30e9\u30e0\u6307\u5b9a\u3060\u3051\u306f\u3001ALIAS\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\nSELECT\u3067\u30ab\u30e9\u30e0\u3092\u6307\u5b9a\u3059\u308b\u969b\u306f\u57fa\u672c\u7684\u306b \"user_tbl.*\" \u3084\"user_tbl.column\" \u306e\u3088\u3046\u306b\u30c6\u30fc\u30d6\u30eb\u540d\u3092\u660e\u793a\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u3053\u306e\u69d8\u5f0f\u306f \u30aa\u30ea\u30b8\u30ca\u30eb\u306e Select()\u3068\u306f\u7570\u306a\u308a\u307e\u3059\u3002 \u5358\u7d14\u306a\"*\"\u306e\u610f\u5473\u306f \u30aa\u30ea\u30b8\u30ca\u30ebSelect()\u3068\u306f\u7570\u306a\u308a\u307e\u3059\u3002\n\n\uff13. Join( ),Where( ),On( )\u305d\u306e\u4ed6\u306f\u3001\u30aa\u30ea\u30b8\u30ca\u30ebgenmai\u3068\u5168\u304f\u540c\u3058\u3067\u3059\u3002 \n\u8907\u6570\u30c6\u30fc\u30d6\u30eb\u304c\u95a2\u4e0e\u3059\u308b\u6642\u306f\u30ab\u30e9\u30e0\u6307\u5b9a\u304c\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002  \u554f\u984c\u306e\u3042\u308b\u5834\u5408\u3084\u7d30\u304b\u3044\u3053\u3068\u3092\u3055\u308c\u308b\u65b9\u306f SelectSql2( )\u3092\u3054\u5229\u7528\u304f\u3060\u3055\u3044\u3002 \nsquirrel \u3084\u3001MySQL\u306a\u3089 sqlbuilder\u306e\u3088\u3046\u306a\u30af\u30a8\u30ea\u30d3\u30eb\u30c0\u30fc\u306e\u5229\u7528\u3082\u3042\u308a\u3068\u601d\u3044\u307e\u3059(\u3088\u304f\u77e5\u308a\u307e\u305b\u3093\u304c)\n\n\uff13.\uff14 ColumnAlias2( )\n    func (db *DB) ColumnAlias2( pref bool,tbl interface{} ) []string \n\n\u6307\u5b9a\u3055\u308c\u305f\u69cb\u9020\u4f53\u3092\u53d7\u3051\u5074\u69cb\u9020\u4f53\u306b\u898b\u7acb\u3066\u3066\u3001DB\u4e0a\u306e\u30ab\u30e9\u30e0\u3068\u53d7\u3051\u5074\u3067\u691c\u7d22\u3055\u308c\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u7d10\u3065\u3051\u308b ALIAS\u306e\u30b9\u30e9\u30a4\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002 \u4f7f\u3044\u65b9\u306f \uff14.\uff11\u53c2\u7167\n\uff11. \u53d7\u3051\u5074\u69cb\u9020\u4f53\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u6e21\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u6307\u5b9a\u3055\u308c\u305f\u69cb\u9020\u4f53\u306e\u5404\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u3064\u3044\u3066\u3001pref\u304c true\u304b\u3001\u3042\u308b\u3044\u306f\u4ed6\u306e\u69cb\u9020\u4f53\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3068\u91cd\u8907\u3059\u308b\u3068\u304d\u306f\n    \"\u6700\u5916\u69cb\u9020\u4f53\u540d(*1)\".\"\u30d5\u30a3\u30fc\u30eb\u30c9\u540d(*2)\" AS \"\u6700\u5916\u69cb\u9020\u4f53\u540d(*1).\u30d5\u30a3\u30fc\u30eb\u30c9\u540d(*2)\"\n\npref \u304c false \u304b\u3064\u91cd\u8907\u3057\u306a\u3044\u306a\u3089\n    \"\u30d5\u30a3\u30fc\u30eb\u30c9\u540d(*2)\" AS \"\u30d5\u30a3\u30fc\u30eb\u30c9\u540d(*2)\" \u3000\n\n\u3092\u51fa\u529b\u3057\u307e\u3059\u3002 \n(\uff0a1) TableNamer\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308c\u3070\u305d\u308c\u3067\u5b9a\u7fa9\u3057\u305f\u30c6\u30fc\u30d6\u30eb\u540d\u3001\n\u3000\u3000 \u5b9f\u88c5\u3057\u3066\u3044\u306a\u3051\u308c\u3070snake_case\u5909\u63db\u3055\u308c\u305f\u540d\u79f0\n(\uff0a2) \u30bf\u30b0\u306b\u3088\u308b\u30ab\u30e9\u30e0\u540d\u6307\u5b9a\u304c\u3042\u308c\u3070\u305d\u306e\u540d\u79f0\u3001\u306a\u3051\u308c\u3070snake_case\u5909\u63db\n\u3000\u3000\u3055\u308c\u305f\u540d\u79f0\n\uff12. \u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u6301\u305f\u306a\u3044\u57cb\u3081\u8fbc\u307e\u308c\u305f\u69cb\u9020\u4f53\u306e\u69cb\u9020\u4f53\u540d\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002 \n\uff13. \u5c0f\u6587\u5b57\u3067\u59cb\u307e\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u3001\u975e\u30ab\u30e9\u30e0(db:\"-\")\u6307\u5b9a\u306e\u3042\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u3001\n\u3000\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u6301\u3064\u30cd\u30b9\u30c8\u3057\u305f\u69cb\u9020\u4f53\u7b49(time.Time\u3084sql.NullXxxx\u3092\u9664\u304f)\u306f\u51fa\u529b\u3057\u307e\u305b\u3093\u3002 \n\n\u62e1\u5f35genmai\n        User  struct { Val int ; }\n        UserA struct { ValA int ; ValX int ; User }\n        UserB struct { ValB int ; ValX int : User }\n\n        clmAs,_ := db.ColumnAlias2( false,&UserDataA{},&UserDataB{} )\n        fmt.Prinfln( clmAs )//-->[ `val_a` AS `val_a`\n                            //     `user_a`.`val_x` AS `user_a.val_x`\n                            //     `user_a`.`val` AS `user_a.val`\n                            //     `val_b` AS `val_b`\n                            //     `user_b`.`val_x` AS `user_b.val_x`\n                            //     `user_b`.`val` AS `user_b.val` ] (\u7de8\u96c6\u3042\u308a)\n\n\n\n\uff14\u7ae0 JOIN\ngenmai/gorp\u3069\u3061\u3089\u3082JOIN\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044/\u4f7f\u3048\u306a\u3044\u3068(\u6614\u306f)\u8a00\u308f\u308c\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u6c7a\u3057\u3066\u305d\u3046\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u3044\u3067\u3059\u3002 \n\n\u672c\u7ae0\u3067\u306e\u8ab2\u984c\u306b\u3064\u3044\u3066\u306f\u79c1\u306e\u8a66\u3057\u305f\u7bc4\u56f2\u3067\u306f\u3001genmai\u30aa\u30ea\u30b8\u30ca\u30eb\u306e Join\u51e6\u7406(LeftJoin\u3067\u306f\u306a\u3044)\u3067\u306f\u3001From()\u3067\u6307\u5b9a\u3057\u305f\u30c6\u30fc\u30d6\u30eb\u540d\u304c SELECT\u30ab\u30e9\u30e0\u306e\u524d\u306b\u524d\u7f6e\u3055\u308c\u308b\u305f\u3081\u3001Join()\u3059\u308b\u30c6\u30fc\u30d6\u30eb\u306e\u30ab\u30e9\u30e0\u3092\u6307\u5b9a\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002 \u307e\u305f\u3001SELECT\u3067 \"*\" \u3092\u6307\u5b9a\u3057\u305f\u6642\u306f\u3001 Join\u3067\u3082 LeftJoin \u3067\u3082\u3000From\u30c6\u30fc\u30d6\u30eb\u306e\u30ab\u30e9\u30e0\u5024\u3057\u304b\u53d6\u5f97\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f(2016-05\u6642\u70b9)\u3002 \u4ee5\u964d\u3067\u306f\u3001\u62e1\u5f35genmai\u306b\u3064\u3044\u3066\u8a71\u3092\u9032\u3081\u307e\u3059\u3002 \n\u3053\u3053\u3067\u306f\u3001\u305d\u308c\u305e\u308c\u306e\u8ab2\u984c\u306b\u5bfe\u3057\u3066\u7c21\u6613\u306a\uff11\u65b9\u6cd5\u3092\u3042\u3052\u305f\u3060\u3051\u3067\u3059\u3002 \u4ed6\u306b\u3082\u3044\u308d\u3044\u308d\u306a\u3084\u308a\u65b9\u3001\u4f8b\u3048\u3070\u30d5\u30c3\u30af\u30e1\u30bd\u30c3\u30c9\u306e\u5229\u7528\u7b49\u3082\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002  \n\u30bd\u30fc\u30b9\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u89e3\u6790\u3057\u3066\u30e6\u30fc\u30b6\u304c\u76f4\u63a5\u5b9a\u7fa9\u3057\u3066\u3044\u306a\u3044\u69cb\u9020\u4f53\u3084\u30d8\u30eb\u30d1\u30fc\u95a2\u6570\u3092\u4f5c\u6210\u3059\u308b\u3088\u3046\u306a\u3053\u3068\u306f\u8003\u3048\u3066\u307e\u305b\u3093\u30fb\u30fb\u30fb\u305d\u3046\u3044\u3063\u305f\u65b9\u5f0f\u306e\u307b\u3046\u304c\u3044\u3044\u6c17\u3082\u3057\u307e\u3059\u304c\u3002  \n\u3061\u3087\u3063\u3068\u9577\u304f\u306a\u308a\u307e\u3059\u304c\u3001\uff14.\uff11.\uff11\u3001\uff14.\uff12.\uff11 \u306b\u5f53\u65b9\u306e\u74b0\u5883(\u30ed\u30fc\u30ab\u30eb)\u3067\u306e\u7c21\u6613\u30d7\u30ed\u30b0\u30e9\u30e0\u4f8b\u3092\u3042\u307e\u308a\u7701\u7565\u305b\u305a\u306b\u8a18\u8f09\u3057\u307e\u3057\u305f\u3002\n\n\n\uff14.\uff11 \u62e1\u5f35 genmai\n\u30e1\u30a4\u30f3\u306eDB\u30c6\u30fc\u30d6\u30eb\uff0bJOIN\u3059\u308bDB\u30c6\u30fc\u30d6\u30eb\u306e\u4e00\u90e8\u307e\u305f\u306f\u5168\u30ab\u30e9\u30e0\u5024\u306e\u53d6\u5f97\u65b9\u6cd5\u3092\u8003\u3048\u3066\u307f\u307e\u3059\u3002 \n\n\uff14.\uff11.\uff11 \u65b0\u898f\u306e\u53d7\u3051\u5074\u69cb\u9020\u4f53\u3067\u3046\u3051\u308b\n\u5fc5\u8981\u306a\u30ab\u30e9\u30e0\u304c\u5c11\u306a\u3044\u3068\u304d\u3084\u4f59\u8a08\u306a\u540d\u524d\u3092\u51fa\u3057\u305f\u304f\u306a\u3044\u6642\u306f\u3001\u53d7\u3051\u5074\u69cb\u9020\u4f53\u3092\u5fc5\u8981\u306b\u3042\u308f\u305b\u3066\u5b9a\u7fa9\u3059\u308b\u306e\u304c\u7c21\u5358\u3067\u3057\u3087\u3046\u3002 \u30ab\u30e9\u30e0\u540d\u306b\u91cd\u8907\u304c\u3042\u308b\u5834\u5408\u306f AS\u3092\u4f7f\u3063\u3066\u632f\u308a\u5206\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \n\n\u62e1\u5f35genmai\npackage main\nimport (\n    _ \"database/sql\"\n      \"fmt\"\n      \"os\"\n    _ \"time\"\n    _  \"strings\"\n//  _ \"github.com/mattn/go-sqlite3\"\n    _ \"github.com/go-sql-driver/mysql\"\n//  _ \"github.com/lib/pq\"\n      \"github.com/naoina/genmai\"\n)\ntype UserTbl struct {\n    Id          int64   `db:\"pk\"`\n    Name        string              // \u91cd\u8907\n    Age         int\n    CampanyId   int64\n}\ntype CampanyTbl struct {            // \u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\n    Id          int64   `db:\"pk\"`\n    Name        string              // \u91cd\u8907\n}\ntype UserData struct {              // \u53d7\u3051\u5074\u69cb\u9020\u4f53\n    Name        string              // <- user_tbl.name\n    Age         int                 // <- user_tbl.age\n    CampanyName string              // <- campany_tbl.name\n}\n//---------------------------------------------------------------------\nfunc main() {\n\n    db,err := genmai.New( &genmai.MySQLDialect{},\"user:password@/test?parseTime=true\" )\n    //db,err := genmai.New( &genmai.SQLite3Dialect{}, \":memory:\")\n    //db,err := genmai.New( &genmai.PostgresDialect{}, \n    //      \"user=postgres password=postgresql host=localhost dbname=test sslmode=disable\" )\n    if err != nil { fmt.Println( err ) }\n\n    defer db.Close()\n    db.SetLogOutput( os.Stderr )\n    err = db.SetLogFormat( `--{{.time.Format \"15:04:05\"}}--{{.query}}` )\n\n    err = db.DropTable( &UserTbl{} )        // DB\u30c6\u30fc\u30d6\u30eb\u524a\u9664\n    err = db.DropTable( &CampanyTbl{} )     // DB\u30c6\u30fc\u30d6\u30eb\u524a\u9664\n    err = db.CreateTable( &UserTbl{} )      // DB\u30c6\u30fc\u30d6\u30eb\u524a\u9664\n    err = db.CreateTable( &CampanyTbl{} )   // DB\u30c6\u30fc\u30d6\u30eb\u524a\u9664\n    if err != nil { fmt.Println( err ) }\n\n    obj1 := CampanyTbl{ Name: \"camp-1\" }; _,err = db.Insert( &obj1 );\n    obj2 := CampanyTbl{ Name: \"camp-2\" }; _,err = db.Insert( &obj2 );\n    obj3 := CampanyTbl{ Name: \"camp-3\" }; _,err = db.Insert( &obj3 );\n\n    _,err = db.Insert( &UserTbl{ Name: \"Alice1\", Age:11, CampanyId: obj1.Id })\n    _,err = db.Insert( &UserTbl{ Name: \"Bob2\"  , Age:22, CampanyId: obj1.Id })\n    _,err = db.Insert( &UserTbl{ Name: \"John3\" , Age:33, CampanyId: obj3.Id })\n    if err != nil { fmt.Println( err ) }\n\n    var data []UserData\n    err = db.SelectSql2( &data,`SELECT  user_tbl.name AS name , \n                                        age ,\n                                        campany_tbl.name AS campany_name \n                        FROM user_tbl JOIN campany_tbl \n                        ON user_tbl.campany_id = campany_tbl.id ` )\n    if err != nil { fmt.Println( err ) }\n    fmt.Println( data )     // --> [{Alice1 11 camp-1} \n                            //      {Bob2 22 camp-1} \n                            //      {John3 33 camp-3}]\n\n    err = db.Select2( &data, []string{ \n                            \"user_tbl.name AS name\" , \n                            \"age\" ,\n                            \"campany_tbl.name AS campany_name\" } ,\n                    db.From( &UserTbl{} ),\n                    db.Join( &CampanyTbl{} ).On( \"campany_id\",\"=\",\"id\" ))\n}\n\n\nAS\u53e5\u306e\u624b\u66f8\u304d\u306f\u9593\u9055\u3044\u306e\u3082\u3068\u3067\u3059\u304c\u3001\u6b21\u306e\u3088\u3046\u306b\u53d7\u3051\u5074\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u691c\u7d22\u5bfe\u8c61\u540d\u3092\u30bf\u30b0\u30ab\u30e9\u30e0\u6307\u5b9a\u3059\u308c\u3070\u3001\uff13\u7ae0 ColumnAlias2( )\u3092\u4f7f\u3063\u3066\u78ba\u5b9f\u306b\u51e6\u7406\u3067\u304d\u307e\u3059\u3002 \n\n\u62e1\u5f35genmai\n    type UserData2 struct {             // \u53d7\u3051\u5074\u5c02\u7528\u69cb\u9020\u4f53(\u975e\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53)\n        Name        string  `column:\"user_tbl.name\"`\n        Age         int     `column:\"user_tbl.age\"`     // \u91cd\u8907\u3057\u306a\u3044\u5834\u5408\u3082\u6307\u5b9a\u306e\u3053\u3068\n        CampanyName string  `column:\"campany_tbl.name\"`\n    }\n    clmAs,_ = db.ColumnAlias2( false,&UserData2{} )\n\n    var data2 []UserData2\n    db.SelectSql2( &data2,`SELECT ` + strings.Join( clmAs,\", \" ) +\n                          ` FROM user_tbl JOIN campany_tbl \n                           ON user_tbl.campany_id = campany_tbl.id` )\n\n    db.Select2( &data2, clmAs ,db.From( &UserTbl{} ),\n                         db.Join( &CampanyTbl{} ).On( \"campany_id\",\"=\",\"id\" ))\n\n\n\u4ed6\u306b\u3001\u3084\u3084\u30c8\u30ea\u30c3\u30ad\u30fc\u3067\u304a\u52e7\u3081\u3057\u307e\u305b\u3093\u304c\u3001\u53d7\u3051\u5074\u69cb\u9020\u4f53\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u975e\u30ab\u30e9\u30e0\u5316(db:\"-\")\u304c\u7121\u52b9\u3068\u306a\u308b(\u3064\u307e\u308a\u691c\u7d22\u3055\u308c\u308b)\u3053\u3068\u3092\u5229\u7528\u3057\u3066\u3001\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u306e\u4e2d\u306b\u53d6\u5f97\u3057\u305f\u3044\u4ed6\u30c6\u30fc\u30d6\u30eb\u306e\u30ab\u30e9\u30e0\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u6f5c\u308a\u8fbc\u307e\u305b\u308b\u65b9\u6cd5\u3082\u3042\u308a\u307e\u3059(Select2( )\u3067\u306fFrom( )\u6307\u5b9a\u8981)\u3002 \n\n\u62e1\u5f35genmai\n    type UserTbl struct {           // \u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\n        Id          int64   `db:\"pk\"`\n        Name        string\n        Age         int64\n        CampanyId   int64\n        CampanyName string  `db:\"-\"` // \u975e\u30ab\u30e9\u30e0 <-- \u5225\u30c6\u30fc\u30d6\u30eb\u306e\u30c7\u30fc\u30bf\u53d7\u3051\u53d6\u308a\n    }\n\n\n\n\uff14.\uff11.\uff12 \u30c7\u30fc\u30bf\u500b\u5225\u306b\u3046\u3051\u308b\n\u540c\u6642\u306b\u30ea\u30fc\u30c9\u3059\u308b\u30ab\u30e9\u30e0\u304c\u5c11\u306a\u3044\u3068\u304d\u306f\u3001\u30c7\u30fc\u30bf\u3092\u500b\u5225\u306b\u53d7\u3051\u308b\u306e\u304c\u7c21\u5358\u3067\u3059\u3002 \n\u30ab\u30e9\u30e0\u3068\u30c7\u30fc\u30bf\u306e\u6307\u5b9a\u9806\u306b\u6ce8\u610f\u9858\u3044\u307e\u3059\u3002 \u578b\u4e0d\u4e00\u81f4\u6642\u306e\u52d5\u4f5c\u306f\u4e0d\u5b9a\u3067\u3059\u3002 \n\n\u62e1\u5f35genmai\n            \u30fb\u30fb\u30fb \n    var userNames []string\n    var ages      []int\n    var campNames []string\n\n    db.SelectSql2( &userNames,&ages,&campNames,`SELECT\n                            user_tbl.name , age ,campany_tbl.name \n                        FROM user_tbl JOIN campany_tbl \n                        ON user_tbl.campany_id = campany_tbl.id` )\n    fmt.Println( userNames )    // --> [Alice1 Bob2 John3]\n    fmt.Println( ages )         // --> [11 22 33]\n    fmt.Println( campNames )    // --> [camp-1 camp-1 camp-3]\n\n    db.Select2( &userNames,&ages,&campNames,[]string{ \n                            \"user_tbl.name AS name\" , \n                            \"age\" ,\n                            \"campany_tbl.name AS campany_name\" } ,\n                    db.From( &UserTbl{} ),\n                    db.Join( &CampanyTbl{} ).On( \"campany_id\",\"=\",\"id\" ))\n\n\n\n\uff14.\uff11.\uff13 \u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u3067\u3046\u3051\u308b\n\uff11. \u30ab\u30e9\u30e0\u540d\u306b\u91cd\u8907\u304c\u306a\u3044\u5834\u5408\n\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u3092\u305d\u306e\u307e\u307e\u4f7f\u3063\u3066\u30ab\u30e9\u30e0\u5024\u3092\u53d6\u5f97\u3059\u308b\u4e00\u756a\u7c21\u5358\u30fb\u78ba\u5b9f\u306a\u65b9\u6cd5\u306f\u3001\u540c\u6642\u306b\u30ea\u30fc\u30c9\u3059\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u3059\u3079\u3066\u7570\u306a\u308b\u540d\u524d\u306b\u3057\u3066\u3078\u305f\u306b\u5909\u540d\u305b\u305a(\u30c7\u30d5\u30a9\u30eb\u30c8\u306esnake_case\u5909\u63db\u306b\u4efb\u305b\u308b)\u3001\u305d\u308c\u3089\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u3092\uff11\u3064\u306e\u53d7\u3051\u5074\u69cb\u9020\u4f53\u306b\u57cb\u3081\u8fbc\u3080\u304b\u3001\u305d\u306e\u307e\u307e\u8907\u6570\u306e\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u3067\u3046\u3051\u308b\u65b9\u5f0f\u3067\u3059\u3002 \n\n\u62e1\u5f35genmai\n    type UserTbl struct {\n        Id          int64   `db:\"pk\"`\n        Name        string\n        Age         int64\n        CampanyId   int64\n    }\n    type CampanyTbl struct {\n        Id          int64   `db:\"pk\"`\n        CampanyName string\n    }\n    type UserData struct {\n        UserTbl             // \u57cb\u3081\u8fbc\u307f\n        CampanyTbl          // \u57cb\u3081\u8fbc\u307f\n    }\n        \u30fb\u30fb\u30fb\n                                    // \uff11\u3064\u306e\u69cb\u9020\u4f53\u3067\u53d7\u3051\u308b\n    var data []UserData\n    db.SelectSql2( &data,`SELECT user_tbl.name,\n                                 user_tbl.age, \n                                 campany_tbl.campany_name\n                        FROM user_tbl JOIN campany_tbl \n                        ON user_tbl.campany_id = campany_tbl.id` )\n    fmt.Println( data )     // -->[ {{0 Alice1 11 0} {0 camp-1}} \n                            //      {{0 Bob2 22 0}   {0 camp-1}} \n                            //      {{0 John3 33 0}  {0 camp-3}}]\n\n    db.Select2( &data, []string{ \"user_tbl.name\",\n                                 \"user_tbl.age\", \n                                 \"campany_tbl.campany_name\" } ,\n                    db.From( &UserTbl{} ),\n                    db.Join( &CampanyTbl{} ).On( \"campany_id\",\"=\",\"id\" ))\n\n                                    // \u8907\u6570\u306e\u69cb\u9020\u4f53\u3067\u53d7\u3051\u308b\n    var users []UserTbl\n    var camps []CampanyTbl\n    db.SelectSql2( &users,&camps, `SELECT user_tbl.name,\n                                          user_tbl.age, \n                                          campany_tbl.campany_name\n                    FROM user_tbl JOIN campany_tbl\n                    ON user_tbl.campany_id = campany_tbl.id` )\n    fmt.Println( users ) // --> [{0 Alice1 11 0} {0 Bob2 22 0} {0 John3 33 0}]\n    fmt.Println( camps ) // --> [{0 camp-1}      {0 camp-1}    {0 camp-3}]\n\n    db.Select2( &users,&camps, []string{ \"user_tbl.name\",\n                                         \"user_tbl.age\", \n                                         \"campany_tbl.campany_name\" } ,\n                    db.From( &UserTbl{} ),\n                    db.Join( &CampanyTbl{} ).On( \"campany_id\",\"=\",\"id\" ))\n\n\n\uff12. \u30ab\u30e9\u30e0\u540d\u306b\u91cd\u8907\u304c\u3042\u308b\u5834\u5408\n\u4e00\u822c\u7684\u306b\u306f\u3001\u30ab\u30e9\u30e0\u540d\u3084\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u306f\u91cd\u8907\u3059\u308b\u3067\u3057\u3087\u3046\u3002  \u3053\u306e\u5834\u5408\u306b\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\u306b\u306f\u3001\u5404\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u3092\u4e26\u3079\u3001AS\u3067\u632f\u308a\u5206\u3051\u307e\u3059\u3002 \n\n\u62e1\u5f35genmai\n    type UserTbl struct {\n        Id          int64   `db:\"pk\"`\n        Name        string              // \u91cd\u8907\n        Age         int\n        CampanyId   int64\n    }\n    type CampanyTbl struct {\n        Id          int64   `db:\"pk\"`\n        Name        string              // \u91cd\u8907\n    }\n        \u30fb\u30fb\u30fb\n    var users []UserTbl\n    var camps []CampanyTbl\n                                                        // \u4e00\u90e8\u30ab\u30e9\u30e0\n    db.SelectSql2( &users,&camps ,`SELECT ` +\n                        `user_tbl.name AS \"user_tbl.name\", ` +\n                        `user_tbl.age  AS \"user_tbl.age\", ` +\n                        `campany_tbl.name AS \"campany_tbl.name\" ` +\n                    ` FROM user_tbl JOIN campany_tbl \n                    ON user_tbl.campany_id = campany_tbl.id` )\n    fmt.Println( users )// --> [{0 Alice1 11 0} {0 Bob2 22 0} {0 John3 33 0}]\n    fmt.Println( camps )// --> [{0 camp-1}      {0 camp-1}    {0 camp-3}]\n\n    db.Select2( &users,&camps, []string{ \n                        `user_tbl.name AS \"user_tbl.name\"`,\n                        `user_tbl.age  AS \"user_tbl.age\"`,\n                        `campany_tbl.name AS \"campany_tbl.name\"` },\n                    db.From( &UserTbl{} ),\n                    db.Join( &CampanyTbl{} ).On( \"campany_id\",\"=\",\"id\" ))\n\n\n\u3082\u3057\u3001\u5168\u30ab\u30e9\u30e0\u3092\u53d7\u3051\u3066\u3082\u69cb\u308f\u306a\u3044\u306a\u3089\u3001\u30ab\u30e9\u30e0\u6307\u5b9a\u306f \uff13\u7ae0 ColumnAlias2( )\u3092\u4f7f\u3063\u3066\u6b21\u306e\u3088\u3046\u306b\u3067\u304d\u307e\u3059\u3002 \n\n\u62e1\u5f35genmai\n                                                        // \u5168\u30ab\u30e9\u30e0\n    clmAs,_ = db.ColumnAlias2( true,&UserTbl{},&CampanyTbl{} )\n\n    db.SelectSql2( &users,&camps , \"SELECT \" + strings.Join( clmAs,\",\" ) + \n                        ` FROM user_tbl JOIN campany_tbl \n                        ON user_tbl.campany_id = campany_tbl.id` )\n\n    db.Select2( &users,&camps, clmAs ,db.From( &UserTbl{} ),\n                                 db.Join( &CampanyTbl{} ).\n                                 On( \"campany_id\",\"=\",\"id\" ))\n\n\n\n\uff14.\uff12 gorp\n\uff14.\uff11\u3068\u540c\u69d8\u306b\u3001\u30e1\u30a4\u30f3\u306eDB\u30c6\u30fc\u30d6\u30eb\uff0bJOIN\u3059\u308bDB\u30c6\u30fc\u30d6\u30eb\u306e\u4e00\u90e8\u307e\u305f\u306f\u5168\u30ab\u30e9\u30e0\u306e\u53d6\u5f97\u65b9\u6cd5\u3092\u8003\u3048\u3066\u307f\u307e\u3059\u3002\n\n\uff14.\uff12.\uff11 \u65b0\u898f\u306e\u53d7\u3051\u5074\u69cb\u9020\u4f53\u3067\u3046\u3051\u308b\n\u5fc5\u8981\u306a\u30ab\u30e9\u30e0\u304c\u5c11\u306a\u3044\u3068\u304d\u3084\u4f59\u8a08\u306a\u540d\u524d\u3092\u51fa\u3057\u305f\u304f\u306a\u3044\u6642\u306f\u3001\u53d7\u3051\u5074\u69cb\u9020\u4f53\u3092\u5fc5\u8981\u306b\u3042\u308f\u305b\u3066\u5b9a\u7fa9\u3059\u308b\u306e\u304c\u7c21\u5358\u3067\u3057\u3087\u3046\u3002 \u30ab\u30e9\u30e0\u540d\u306b\u91cd\u8907\u304c\u3042\u308b\u5834\u5408\u306f AS\u3092\u4f7f\u3063\u3066\u632f\u308a\u5206\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \n\ngorp\npackage main\nimport (\n      \"os\"\n      \"log\"\n      \"fmt\"\n    _  \"time\"\n    _ \"log\"\n//    _ \"github.com/mattn/go-sqlite3\"\n    _ \"github.com/go-sql-driver/mysql\"\n//    _ \"github.com/lib/pq\"\n      \"database/sql\"\n      \"github.com/go-gorp/gorp\"\n)\ntype UserTbl struct {\n    Id          int64   `db:\"id,primarykey,autoincrement\"` \n    Name        string  `db:\"name\"`            // \u91cd\u8907\n    Age         int     `db:\"age\"`\n    CampanyId   int64   `db:\"campany_id\"`\n}\ntype CampanyTbl struct {\n    Id          int64   `db:\"id,primarykey,autoincrement\"`\n    Name        string  `db:\"name\"`            // \u91cd\u8907\n}\ntype UserData struct {              // \u53d7\u3051\u5074\u69cb\u9020\u4f53\n    Name        string              // <- UserTbl.Name\n    Age         int                 // <- UserTbl.Age\n    CampanyName string              // <- CampanyTbl.Name\n}\n//---------------------------------------------------------------------\nfunc main() {\n\n    dialect := gorp.MySQLDialect{\"InnoDB\", \"UTF8\"}\n    dbm,err := sql.Open( \"mysql\", \"user:password@/test?parseTime=true\" )  // []byte -> time.Time\u5909\u63db\n    //dialect := gorp.PostgresDialect{}\n    //dbm,err := sql.Open( \"postgres\",\"user=postgres password=postgresql host=localhost dbname=test sslmode=disable\" )\n    //dialect := gorp.SqliteDialect{}\n    //dbm,err := sql.Open( \"sqlite3\", \":memory:\")\n    if err != nil { fmt.Println( err ) }\n\n    dbmap := &gorp.DbMap{Db: dbm, Dialect: dialect}\n    defer dbmap.Db.Close()\n    dbmap.TraceOn( \"[gorp]\",log.New( os.Stderr,\"\",log.Ltime ))\n\n    dbmap.AddTableWithName( UserTbl{},\"user_tbl\" )      // \u30c6\u30fc\u30d6\u30eb\u540d UserTbl -> user_tbl\n    dbmap.AddTableWithName( CampanyTbl{},\"campany_tbl\" )// \u30c6\u30fc\u30d6\u30eb\u540d CampanyTbl -> campany_tbl\n\n    err = dbmap.DropTablesIfExists()                // \u30c6\u30fc\u30d6\u30eb\u524a\u9664\n    if err != nil { fmt.Println( err ) }\n\n    err = dbmap.CreateTables()\n    if err != nil { fmt.Println( err ) }\n\n    obj1 := CampanyTbl{ Name: \"camp-1\" }; err = dbmap.Insert( &obj1 );\n    obj2 := CampanyTbl{ Name: \"camp-2\" }; err = dbmap.Insert( &obj2 );\n    obj3 := CampanyTbl{ Name: \"camp-3\" }; err = dbmap.Insert( &obj3 );\n    if err != nil { fmt.Println( err ) }\n\n    err = dbmap.Insert( &UserTbl{ Name: \"Alice1\", Age:11, CampanyId: obj1.Id })\n    err = dbmap.Insert( &UserTbl{ Name: \"Bob2\"  , Age:22, CampanyId: obj1.Id })\n    err = dbmap.Insert( &UserTbl{ Name: \"John3\" , Age:33, CampanyId: obj3.Id })\n    if err != nil { fmt.Println( err ) }\n\n    var data []UserData\n    _,err = dbmap.Select( &data,`SELECT user_tbl.name AS \"Name\" ,\n                                        age AS \"Age\" ,\n                                        campany_tbl.name AS \"CampanyName\"\n                        FROM user_tbl JOIN campany_tbl \n                        ON user_tbl.campany_id = campany_tbl.id ` )\n    if err != nil { fmt.Println( err ) }\n    fmt.Println( data )     // --> [{Alice1 11 camp-1} \n                            //      {Bob2 22 camp-1} \n                            //      {John3 33 camp-3}]\n}\n\n\ngenmai \uff14.\uff11.\uff11 \u306e\u6700\u5f8c\u3067\u3084\u3063\u305f\u3088\u3046\u306a\u3001\u5143\u306e\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u306b\u5225\u30c6\u30fc\u30d6\u30eb\u306e\u30ab\u30e9\u30e0\u3092\u6f5c\u307e\u305b\u308b\u624b\u306f\u4f7f\u3048\u307e\u305b\u3093\u3002  \u3057\u304b\u3057\u6b21\u306f\u6709\u52b9\u306a\u306e\u3067\u3001genmai.ColumnAlias2()\u3068\u540c\u3058\u3082\u306e\u3092\u81ea\u4f5c\u3059\u308c\u3070\u3001AS\u53e5\u3092\u624b\u66f8\u304d\u3057\u306a\u304f\u3066\u3082\u6e08\u307f\u307e\u3059\u3002 \n\ngorp\n    type UserData2 struct {             // \u53d7\u3051\u5074\u5c02\u7528\u69cb\u9020\u4f53(\u975e\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53)\n        Name        string  `db:\"user_tbl.name\"`\n        Age         int     `db:\"user_tbl.age\"` \n        CampanyName string  `db:\"campany_tbl.name\"`\n    }\n    var data2 []UserData2\n    dbmap.Select( &data2,`SELECT ` + `user_tbl.name AS \"user_tbl.name\" , ` +\n                                     `user_tbl.age AS \"user_tbl.age\" ,` +\n                                     `campany_tbl.name AS \"campany_tbl.name\" ` +\n                        ` FROM user_tbl JOIN campany_tbl \n                          ON user_tbl.campany_id = campany_tbl.id` )\n    fmt.Println( data2 )    // --> \u4e0a\u8a18\u3068\u540c\u3058\n\n\n\n\uff14.\uff12.\uff12 \u30c7\u30fc\u30bf\u500b\u5225\u306b\u3046\u3051\u308b\n\u5fc5\u8981\u306a\u30ab\u30e9\u30e0\u304c\uff11\u3064\u306e\u3068\u304d\u306b\u306f\u3001SelectOne( )\u3067\u3082\u53ef\u80fd\u3067\u3059\u304c\u3001\u62e1\u5f35genmai\u306e\u3088\u3046\u306a\u8907\u6570\u6307\u5b9a\u306f\u3067\u304d\u307e\u305b\u3093\u3002 \n\n\uff14.\uff12.\uff13 \u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u3067\u3046\u3051\u308b\n\uff11. \u30ab\u30e9\u30e0\u540d\u306b\u91cd\u8907\u304c\u306a\u3044\u5834\u5408\n\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u3092\u305d\u306e\u307e\u307e\u4f7f\u3063\u3066\u30ab\u30e9\u30e0\u5024\u3092\u53d6\u5f97\u3059\u308b\u7c21\u5358\u306a\u65b9\u6cd5\u306f\u3001\u540c\u6642\u306b\u30ea\u30fc\u30c9\u3059\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u306b\u7570\u306a\u308b\u540d\u524d\u3092\u4e0e\u3048\u3001(\u4e00\u822c\u7684\u306b\u306f\u30ab\u30e9\u30e0\u540d\u3092\u5c0f\u6587\u5b57\u3068\u3057\u3066)\u3001\u305d\u308c\u3089\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u3092\uff11\u3064\u306e\u53d7\u3051\u5074\u69cb\u9020\u4f53\u306b\u57cb\u3081\u8fbc\u3080\u65b9\u5f0f\u3067\u3059\u3002 \n\ngorp\n    type UserTbl struct {\n        Id          int64   `db:\"id,primarykey,autoincrement\"`\n        Name        string  `db:\"name\"`\n        Age         int64   `db:\"age\"`\n        CampanyId   int64   `db:\"campany_id\"`\n    }\n    type CampanyTbl struct {\n        Id          int64   `db:\"id,primarykey,autoincrement\"`\n        CampanyName string  `db:\"campany_name\"`\n    }\n    type UserData struct {\n        UserTbl             // \u57cb\u3081\u8fbc\u307f\n        CampanyTbl          // \u57cb\u3081\u8fbc\u307f\n    }\n            \u30fb\u30fb\u30fb\n    _,err = dbmap.Select( &data,`SELECT user_tbl.name,\n                                 user_tbl.age, \n                                 campany_tbl.campany_name\n                        FROM user_tbl JOIN campany_tbl \n                        ON user_tbl.campany_id = campany_tbl.id` )\n    if err != nil { fmt.Println( err ) }\n    fmt.Println( data )     // -->[ {{0 Alice1 11 0} {0 camp-1}} \n                            //      {{0 Bob2 22 0}   {0 camp-1}} \n                            //      {{0 John3 33 0}  {0 camp-3}}]\n\n\n\uff12. \u30ab\u30e9\u30e0\u540d\u306b\u91cd\u8907\u304c\u3042\u308b\u5834\u5408\n\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\u306b\u306f\u3001\u53d7\u3051\u5074\u69cb\u9020\u4f53\u3092\u8907\u6570\u6307\u5b9a\u3067\u304d\u306a\u3044\u305f\u3081\u3001\uff11\u3064\u306e\u53d7\u3051\u5074\u69cb\u9020\u4f53\u306b\u8907\u6570\u306e\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u3092\u57cb\u3081\u8fbc\u3080\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u30ab\u30e9\u30e0\u540d\u306b\u91cd\u8907\u304c\u3042\u308b\u6642\u3001\u540c\u6642\u306b\u30ea\u30fc\u30c9\u3057\u306a\u3051\u308c\u3070\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u91cd\u8907\u3057\u305f\u3082\u306e\u3092\u540c\u6642\u306b\u30ea\u30fc\u30c9\u3057\u3066\u632f\u308a\u5206\u3051\u308b\u3053\u3068\u306f\u3001\u79c1\u306e\u8a66\u3057\u305f\u7bc4\u56f2\u3067\u306f\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u6b21\u306f\u3001\u8868\u984c\u306b\u53cd\u3057\u307e\u3059\u304c\u3001\u30ab\u30e9\u30e0\u540d\u91cd\u8907\u5206\u3060\u3051\u5b9a\u7fa9\u3057\u306a\u304a\u3059\u4f8b\u3067\u3059\u3002 \n\ngorp\n    type UserTbl struct {\n        IdUser      int64   `db:\"id,primarykey,autoincrement\"`\n        Name        string  `db:\"name\"`     // \u91cd\u8907\n        Age         int64   `db:\"age\"`\n        CampanyId   int64   `db:\"campany_id\"`\n    }\n    type CampanyTbl struct {\n        IdCampany   int64   `db:\"id,primarykey,autoincrement\"`\n        Name        string  `db:\"name\"`     // \u91cd\u8907\n    }\n    type UserData struct {          //\u65b0\u898f \u53d7\u3051\u5074\u69cb\u9020\u4f53\n        UserTbl\n        CampanyTbl\n        UserName    string          // \u30ea\u30fc\u30c9\u3059\u308b\u30ab\u30e9\u30e0\u540d\u91cd\u8907\u306e\u5206\n        CampanyName string          //\n    }\n            \u30fb\u30fb\u30fb\n    dbmap.Select( &data,\n            `SELECT     age ,\n                        user_tbl.name    AS \"UserName\", \n                        campany_tbl.name AS \"CampanyName\"\n                        FROM user_tbl INNER JOIN campany_tbl \n                        ON user_tbl.campany_id = campany_tbl.id` )\n    if err != nil { fmt.Println( err ) }\n    fmt.Println( data )         // --> [ {{0  11 0} {0 } Alice1 camp-1} \n                                //       {{0  22 0} {0 } Bob2 camp-1} \n                                //       {{0  33 0} {0 } John3 camp-3}]\n\n\n\uff0a\u4e0a\u4f8b\u3088\u308a\u3082 \uff14.\uff12.\uff11 \u3084 gorp\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u4f8b\u306e\u3088\u3046\u306b\u3001\u5fc5\u8981\u306a\u30ab\u30e9\u30e0\u5206\n\u3000\u3060\u3051\u3092\u5b9a\u7fa9\u3059\u308b\u65b9\u304c\u30d9\u30bf\u30fc\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002 \n\n\uff15\u7ae0 \u307e\u3068\u3081\n\n\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u5341\u5206\u3068\u3044\u3046\u4eba\u3082\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u5c0f\u898f\u6a21\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3082\u30c6\u30fc\u30d6\u30eb\u306f10\u500b\u4ee5\u4e0a\u306b\u306f\u306a\u308a\u307e\u3059\u3057\u3001\u958b\u767a\u6bb5\u968e\u3067\u4f55\u5ea6\u3082\u624b\u76f4\u3057\u304c\u5165\u308b\u3053\u3068\u3092\u8003\u3048\u308b\u3068\u3001\u3069\u3061\u3089\u3067\u3082\u5341\u5206\u4fbf\u5229\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002  \n\u4e16\u754c\u7684\u306b\u898b\u3066\u60c5\u5831\u91cf\u30fb\u4eba\u6c17\u3068\u3082gorp\u306b\u8ecd\u914d\u304c\u3042\u304c\u308a\u307e\u3059\u304c\u3001genmai\u3042\u308b\u3044\u306f \u62e1\u5f35genmai\u306f\u30b9\u30d4\u30fc\u30c9\u306b\u5bfe\u3059\u308b\u61f8\u5ff5\u306f\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306esnake_case\u5909\u63db\u3082\u5bc4\u4e0e\u3057\u3066\u3001\u30b7\u30f3\u30d7\u30eb\u3067\u3042\u308a\u306a\u304c\u3089\u6a5f\u80fd\u7684\u306b\u3082\u305d\u3053\u305d\u3053\u592a\u5200\u6253\u3061\u3067\u304d\u308b\u3082\u306e\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u2605\u2605\u6ce8\u610f\u2605\u2605\n\u672c\u7a3f\u306f\u3001\u307e\u3060\u5341\u5206\u306b\u691c\u8a3c\u3055\u308c\u3066\u3044\u308b\u3068\u306f\u8a00\u3048\u307e\u305b\u3093\u3002 \u5229\u7528\u306b\u306f\u5341\u5206\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3002 \u8aa4\u308a\u7b49\u3042\u308c\u3070\u3054\u5831\u544a\u3044\u305f\u3060\u3051\u308b\u3068\u6709\u96e3\u3044\u3067\u3059\u3002 \n\n\uff16\u7ae0 \u30bd\u30fc\u30b9\u30ea\u30b9\u30c8\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f godep\u3092\u3064\u304b\u3046\u306e\u304c\u666e\u901a\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u79c1\u306f\u9069\u5f53\u306b\u6e08\u307e\u305b\u307e\u3057\u305f\u3002 \u304a\u52e7\u3081\u3057\u307e\u305b\u3093\u304c\u3001\u4e0b\u8a18\u306e Go\u30d5\u30a1\u30a4\u30eb(genmai2.go)\u3092 ($GOPATH)/src/github.com/naoina/genmai \u306b\u7f6e\u3044\u3066\u3001\n    ($GOPATH)/src/github.com/naoina \u306b\u3066 \n    $ go install -v ./genmai\n\n\u3067\u518d\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308c\u3070\u3068\u308a\u3042\u3048\u305a\u306f\u52d5\u304d\u307e\u3059\u3002\nWindows 64bit\u306e\u3068\u304d\u306b\u306f\u3001mingw 64\u3067\u3042\u308b\u3053\u3068\u3084 gcc\u306e\u30d1\u30b9\u306b\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3002\n\u4ee5\u4e0b\u306e\u8ffd\u52a0\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u5b9f\u969b\u306e\u3068\u3053\u308d\u3001\u307b\u3068\u3093\u3069naoina\u3055\u3093\u306e\u305d\u308c(\u3088\u304f\u4f3c\u305f\u95a2\u6570\u540d)\u3068\u540c\u3058\u3067\u3059\u3002 \u3044\u305a\u308c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u6574\u3048\u3066\u3001github\u306bgenmai\u306e\u5225fork\u3068\u3057\u3066\u3042\u3052\u305f\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\ngenmai2.go\n// Copyright (c) 2016 Norifumi Mizuo\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Package genmai provides simple, better and easy-to-use Object-Relational Mapper.\npackage genmai\n\nimport (\n    \"database/sql\"\n  _ \"errors\"\n    \"fmt\"\n  _ \"io\"\n    \"reflect\"\n    \"runtime\"\n  _ \"sort\"\n  _ \"strconv\"\n    \"strings\"\n  _ \"sync\"\n  _  \"github.com/naoina/go-stringutil\"\n)\n//-----------------------------------------------------------------------------------\n// SelectSql2() works like Select() but it requires SQL query string.\n// you can specify the output parameter multiply \nfunc (db *DB) SelectSql2( args ...interface{}) (err error) {\n    defer func() {\n        if e := recover(); e != nil {\n            buf := make([]byte, 4096)\n            n := runtime.Stack(buf, false)\n            err = fmt.Errorf(\"genmai:%v\\n%v\", e, string(buf[:n]))\n        }\n    }()\n    if len(args) < 2 { return fmt.Errorf( \"genmai.SelectSql2: you need data-receiver and query string\") }\n\n    var rTypes  []reflect.Type\n    var rValues []reflect.Value\n    var query   string\n    var offs    int\n    var paramId int = -1    // 0:slice of struct all , 1:slice of non-struct all\n                            // 2: non-slice & non-struct all\n    for i,arg := range args {\n        offs = i\n        rv := reflect.ValueOf(arg)\n        if rv.Kind() == reflect.String { \n            query = arg.(string)\n            break \n        }\n        if rv.Kind() != reflect.Ptr { return fmt.Errorf( \"genmai.SelectSql2: data-receiver must be a pointer\") }\n        rv = rv.Elem()\n        rValues = append( rValues,rv )\n        rTypes = append( rTypes,rv.Type() )\n\n        switch rv.Kind() {\n        case reflect.Ptr :\n            return fmt.Errorf( \"genmai.SelectSql2: `%v` duplicated pointer not supported\",rv.Type() )\n        case reflect.Slice :\n            t := rv.Type().Elem()\n            if t.Kind() == reflect.Ptr { \n                return fmt.Errorf( \"genmai.SelectSql2: `%v` slice of pointer not supported\",t )\n            }\n            if t.Kind() == reflect.Struct {\n                if paramId == -1 { paramId = 0 }\n                if paramId != 0 { \n                    return fmt.Errorf( \"genmai.SelectSql2: `%v` data-reciever must be slice all / non-slice all / simple type all\",rv.Type() ) \n                }\n            } else {\n                if paramId == -1 { paramId = 1 }\n                if paramId != 1 { \n                    return fmt.Errorf( \"genmai.SelectSql2: `%v` data-reciever must be slice all / non-slice all / simple type all\",rv.Type() ) \n                }\n            }\n        case reflect.Invalid: \n            return fmt.Errorf(\"genmai.SelectSql2: nil pointer dereference\")\n        default:\n            if paramId == -1 { paramId = 2 }\n            if paramId != 2 {\n                return fmt.Errorf( \"genmai.SelectSql2: `%v` data-reciever must be slice all / non-slice all / simple type all\",rv.Type() ) \n            }\n        }\n    }\n    if paramId == -1 { return fmt.Errorf( \"genmai.SelectSql2: you need data-receiver\" ) }\n    if query == \"\" { return fmt.Errorf( \"genmai.SelectSql2: you need query string\" ) }\n    args = args[offs+1:]\n\n                                    //---------------------------------\n    stmt, err := db.prepare(query)\n    if err != nil { return err }\n    defer stmt.Close()\n    rows, err := stmt.Query(args...)\n    if err != nil { return err }\n    defer rows.Close()\n\n                                    //---------------------------------\n    var values []reflect.Value\n    switch paramId {\n    case 0 : values,err = db.selectToSliceStruct4( rows,rTypes )\n    case 1 : values,err = db.selectToSliceValues4( rows,rTypes )\n    case 2 : values,err = db.selectToValues4( rows,rTypes )\n    }\n    for i,value := range values { rValues[i].Set(value) }\n    if err != nil { return err }\n    return nil\n}\n//---------------------------------------------------------------------\n// Select2() works like Select() but you can specify the output parameter multiply\n// when you specify the From() \nfunc (db *DB) Select2( args ...interface{} ) (err error) {\n    defer func() {\n        e := recover()\n        if e != nil {\n            buf := make([]byte, 4096)\n            n := runtime.Stack(buf, false)\n            err = fmt.Errorf(\"genmai:%v\\n%v\", e, string(buf[:n]))\n        }\n    }()\n                                        //---------------------------------\n    var tableName string\n    var rTypes  []reflect.Type\n    var rValues []reflect.Value\n    var offs    int\n    var paramId int = -1    // 0:slice of struct all , 1:slice of non-struct all\n                            // 2: non-slice & non-struct all\n                                        //---------------------------------\n    for _, arg := range args {          //          No From() ---> Select()\n        if f, ok := arg.(*From); ok {\n            if tableName != \"\" { return fmt.Errorf(\"Select2: From statement specified more than once\") }\n            tableName = f.TableName\n        }\n    }\n    if tableName == \"\" { return db.Select( args ) }\n\n                                    //---------------------------------\n    if len(args) < 1 { return fmt.Errorf( \"genmai.Select2: you need data-receiver\") }\n\n    for i,arg := range args {       //  ptr,[ptr], [string/[]string],[non-ptr],[non-ptr]\n        offs = i\n        rv := reflect.ValueOf(arg)\n        if rv.Kind() != reflect.Ptr { break }\n        rv = rv.Elem()\n        rValues = append( rValues,rv )\n        rTypes = append( rTypes,rv.Type() )\n\n        switch rv.Kind() {\n        case reflect.Ptr :\n            return fmt.Errorf( \"genmai.Select2: `%v` duplicated pointer not supported\",rv.Type() )\n        case reflect.Slice :\n            t := rv.Type().Elem()\n            if t.Kind() == reflect.Ptr { \n                return fmt.Errorf( \"genmai.Select2: `%v` slice of pointer not supported\",t )\n            }\n            if t.Kind() == reflect.Struct {\n                if paramId == -1 { paramId = 0 }\n                if paramId != 0 { \n                    return fmt.Errorf( \"genmai.Select2: `%v` data-reciever must be slice all / non-slice all / simple type all\",rv.Type() ) \n                }\n            } else {\n                if paramId == -1 { paramId = 1 }\n                if paramId != 1 { \n                    return fmt.Errorf( \"genmai.Select2: `%v` data-reciever must be slice all / non-slice all / simple type all\",rv.Type() ) \n                }\n            }\n        case reflect.Invalid: \n            return fmt.Errorf(\"genmai.Select2: nil pointer dereference\")\n        default:\n            if paramId == -1 { paramId = 2 }\n            if paramId != 2 {\n                return fmt.Errorf( \"genmai.Select2: `%v` data-reciever must be slice all / non-slice all / simple type all\",rv.Type() ) \n            }\n        }\n    }\n\n    if paramId == -1 { return fmt.Errorf( \"genmai.Select2: you need data-receiver (pointer)\" ) }\n    args = args[offs:]\n                                    //---------------------------------\n    col, from, conditions, err := db.classify2(tableName, args)\n    if err != nil { return err }\n\n    queries := []string{`SELECT`, col, `FROM`, db.dialect.Quote(from)}\n\n    var values []interface{}\n    for _, cond := range conditions {\n        q, a := cond.build(0, false)\n        queries = append(queries, q...)\n        values = append(values, a...)\n    }\n    query := strings.Join(queries, \" \")\n    stmt, err := db.prepare(query, values...)\n    if err != nil { return err }\n    defer stmt.Close()\n    rows, err := stmt.Query(values...)\n    if err != nil { return err }\n    defer rows.Close()\n                                    //---------------------------------\n    var vals []reflect.Value\n    switch paramId {\n    case 0 : vals,err = db.selectToSliceStruct4( rows,rTypes )\n    case 1 : vals,err = db.selectToSliceValues4( rows,rTypes )\n    case 2 : vals,err = db.selectToValues4( rows,rTypes )\n    }\n    for i,value := range vals { rValues[i].Set(value) }\n    if err != nil { return err }\n    return nil\n}\n//-----------------------------------------------------------------------------------\n// selectToSlice returns a slice value fetched from rows.\nfunc (db *DB) classify2(tableName string, args []interface{}) (column, from string, conditions []*Condition, err error) {\n\n    if len(args) == 0 {\n        //return columnName2(db.dialect, tableName, \"*\"), tableName, nil, nil\n        return columnName2(db.dialect, \"\", \"*\"), tableName, nil, nil\n    }\n    offset := 1\n    switch t := args[0].(type) {\n    case string:\n        if t != \"\" {\n            //column = columnNameAs2(db.dialect, tableName, t)\n            column = columnNameAs2(db.dialect, \"\", t)\n        }\n    case []string:\n        //column = db.columnsAs2(tableName, ToInterfaceSlice(t))\n        column = db.columnsAs2( \"\", ToInterfaceSlice(t))\n    case *Distinct:\n        //column = fmt.Sprintf(\"DISTINCT %s\", db.columns2(tableName, ToInterfaceSlice(t.columns)))\n        column = fmt.Sprintf(\"DISTINCT %s\", db.columns2(\"\", ToInterfaceSlice(t.columns)))\n    case *Function:\n        var col string\n        if len(t.Args) == 0 {\n            col = \"*\"\n        } else {\n            //col = db.columns2( tableName, t.Args)\n            col = db.columns2( \"\", t.Args)\n        }\n        column = fmt.Sprintf(\"%s(%s)\", t.Name, col)\n    default:\n        offset--\n    }\n    for i := offset; i < len(args); i++ {\n        switch t := args[i].(type) {\n        case *Condition:\n            t.tableName = tableName\n            conditions = append(conditions, t)\n        case string, []string:\n            return \"\", \"\", nil, fmt.Errorf(\"genmai:argument of %T type must be before the *Condition arguments\", t)\n        case *From:\n            // ignore.\n        case *Function:\n            return \"\", \"\", nil, fmt.Errorf(\"genmai:%s function must be specified to the first argument\", t.Name)\n        default:\n            return \"\", \"\", nil, fmt.Errorf(\"genmai:unsupported argument type: %T\", t)\n        }\n    }\n    if column == \"\" {\n        //column = columnName2(db.dialect, tableName, \"*\")\n        column = columnName2(db.dialect, \"\", \"*\")\n    }\n    return column, tableName, conditions, nil\n}\n// columnAs2 returns the comma-separated column name with quoted.\nfunc (db *DB) columnsAs2(tableName string, columns []interface{}) string {\n    if len(columns) == 0 {\n        return columnName2(db.dialect, tableName, \"*\")\n    }\n    names := make([]string, len(columns))\n    for i, col := range columns {\n        switch c := col.(type) {\n        case Raw:\n            names[i] = fmt.Sprint(*c)\n        case string:\n            names[i] = columnNameAs2(db.dialect, tableName, c)\n        case *Distinct:\n            names[i] = fmt.Sprintf(\"DISTINCT %s\", db.columns2(tableName, ToInterfaceSlice(c.columns)))\n        default:\n            panic(fmt.Errorf(\"genmai:column name must be string, Raw or *Distinct, got %T\", c))\n        }\n    }\n    return strings.Join(names, \", \")\n}\n// columns returns the comma-separated column name with quoted.\nfunc (db *DB) columns2(tableName string, columns []interface{}) string {\n    if len(columns) == 0 {\n        return columnName2(db.dialect, tableName, \"*\")\n    }\n    names := make([]string, len(columns))\n    for i, col := range columns {\n        switch c := col.(type) {\n        case Raw:\n            names[i] = fmt.Sprint(*c)\n        case string:\n            names[i] = columnName2(db.dialect, tableName, c)\n        case *Distinct:\n            names[i] = fmt.Sprintf(\"DISTINCT %s\", db.columns2(tableName, ToInterfaceSlice(c.columns)))\n        default:\n            panic(fmt.Errorf(\"genmai:column name must be string, Raw or *Distinct, got %T\", c))\n        }\n    }\n    return strings.Join(names, \", \")\n}\n\n// columnName returns the column name that added the table name with quoted if needed.\nfunc columnNameAs2(d Dialect, tname, cname string) string {\n    cname = strings.TrimSpace(cname)\n    strs := strings.Fields( cname )\n    if len(strs) == 2 { \n        return fmt.Sprintf(\"%s %s\", columnName2(d,tname,strs[0]), quoteIfNot( d,strs[1]) )\n    }\n    if len(strs) == 3 && strings.ToUpper(strs[1]) == \"AS\" { \n        return fmt.Sprintf(\"%s AS %s\", columnName2(d,tname,strs[0]), quoteIfNot( d,strs[2]) )\n    }\n    return columnName2( d,tname,cname )\n}\n\nfunc quoteIfNot( d Dialect, name string) string {\n    return d.Quote( strings.Trim( name,\"'`\\\"\") )    //  firsr == last ?  \n}                                                   // Attention: columnQuoteDot()\nfunc columnName2(d Dialect, tname, cname string) string {\n    //cname = strings.TrimSpace(cname)\n    cname = strings.Trim( cname,\"'`\\\" \") \n    if cname == \"*\" { \n        return cname\n        //if tname == \"\"  { return cname }\n        //return fmt.Sprintf(\"%s.%s\", d.Quote(tname), cname)\n        }\n\n    strs := strings.SplitN( cname,\".\",2 )\n    if len(strs) == 2 {\n        strs[0] = strings.Trim( strs[0],\"'`\\\" \") \n        strs[1] = strings.Trim( strs[1],\"'`\\\" \") \n        if strs[1] == \"*\" { return quoteIfNot(d,strs[0]) + \".*\" }\n        return quoteIfNot(d,strs[0]) + \".\" + quoteIfNot(d,strs[1]) \n    }\n    cname = quoteIfNot(d,cname)\n    if tname == \"\"  { return cname }\n    return fmt.Sprintf( \"%s.%s\", quoteIfNot(d,tname), cname)\n}\n//---------------------------------------------------------------------\n// ReplaceQuery substiutes the string \"{key}\" for the value of map/struct data.\nfunc (db *DB) ReplaceQueryKey( query string, stringQuote bool,\n                        args ...interface{} ) (q string,err error) {\n    for _, arg := range args {    \n        rVal := reflect.ValueOf(arg)\n        if rVal.Kind() == reflect.Ptr { rVal = rVal.Elem() }\n\n        switch rVal.Kind() {\n        case reflect.Struct: query,err = db.replQueryKeyStruct( query,stringQuote,rVal )\n        case reflect.Map:    query,err = db.replQueryKeyMap( query,stringQuote,rVal )\n        default: \n            return query,fmt.Errorf( \"genmai.ReplaceQueryKey: type `%v` is not supported\",\n                                            reflect.TypeOf( arg ).String() )\n        }\n        if err != nil { return query,err }\n    }\n    return query,nil\n}\n\n//---------------------------------------------------------------------\nfunc (db *DB) replQueryKeyMap( query string, strQuote bool, \n                            rVal reflect.Value ) (q string,err error) {\n    for _,key := range rVal.MapKeys() {\n        val := rVal.MapIndex( key )\n        query,err = db.replQuery( query,strQuote,fmt.Sprintf( \"%s\",key ),\n                                        reflect.ValueOf(val.Interface()))\n        if err != nil { return query,err }\n    }\n    return query,err\n}\n//---------------------------------------------------------------------\nfunc (db *DB) replQueryKeyStruct( query string, strQuote bool, \n                                rVal reflect.Value ) (q string,err error) {\n    for i := 0; i < rVal.NumField(); i++ {\n\n        rTyp := rVal.Type()\n        fieldVal := rVal.Field(i)\n        fieldTyp := rTyp.Field(i)\n\n        switch fieldVal.Kind() {\n        case reflect.Struct:\n            if fieldTyp.Anonymous { \n                query,err = db.replQueryKeyStruct( query,strQuote,fieldVal )\n                if err != nil { return query,err }\n            }\n        case reflect.Ptr:\n        default:\n            candidate := db.columnFromTag( fieldTyp ) \n            query,err = db.replQuery( query,strQuote,candidate,fieldVal )\n            //query,err = db.replQuery( query,strQuote,fieldTyp.Name,fieldVal )\n            if err != nil { return query,err }\n        }\n    }\n    return query,err\n}\n//---------------------------------------------------------------------\nfunc (db *DB) replQuery( query string, strQuote bool,src string, rVal reflect.Value ) (q string,err error) {\n    dest := fmt.Sprintf( \"%v\",rVal )\n    switch rVal.Kind() {\n    case reflect.String: \n        if strQuote { dest = db.Quote( dest ) }\n    case reflect.Bool, reflect.Int,reflect.Int8,reflect.Int16,\n         reflect.Int32,reflect.Int64,\n         reflect.Uint,reflect.Uint8,reflect.Uint16,\n         reflect.Uint32,reflect.Uint64,\n         reflect.Float32,reflect.Float64:\n    default:\n        return query,nil\n    }\n    return strings.Replace( query,\"{\"+src+\"}\",dest,-1 ),nil\n}\n//-----------------------------------------------------------------------------------\n// selectToSlice returns a slice value fetched from rows. \n// elements are struct all / simple-type all\nfunc (db *DB) selectToSliceStruct4(rows *sql.Rows, \n                            ts []reflect.Type) ([]reflect.Value, error) {\n    var     ptrN [255]int       // maybe len(ts) < 255\n\n    columns, err := rows.Columns()\n    if err != nil { return []reflect.Value{}, err }\n    for j := 0 ; j < len(ts) ; j++ {\n        ts[j] = ts[j].Elem()\n        if ts[j].Kind() == reflect.Ptr { ptrN[j] = 1 ; ts[j] = ts[j].Elem() }\n        if ts[j].Kind() == reflect.Ptr {\n            return []reflect.Value{} , fmt.Errorf( \"genmai.SelectXXX2: duplicated pointer isn't supported %v\", ts[j] )\n        }\n    }\n\n    tsIndex := make( []int,len(columns) )\n    fieldIndexes := make([][]int, len(columns))\n    for i, column := range columns {\n        var findTs = -1\n        var findIndex []int\n\n        for j := 0 ; j < len(ts) ; j++ {\n            tmp,err := db.fieldIndexByName2(ts[j], column,\"\", nil)\n            if err != nil { return []reflect.Value{}, err }\n            if len(tmp) < 1 {\n                if ts[j].Kind() == reflect.Struct {     \n                    //strName := stringutil.ToSnakeCase(ts[j].Name())\n                    strName := db.tableName( ts[j] )        // most outer structure's name\n                    tmp,err = db.fieldIndexByName2(ts[j], column,strName + \".\", nil)\n                    if err != nil { return []reflect.Value{}, err }\n                }\n            }\n            if len(tmp) >= 1 {\n                if findTs >= 0 { return []reflect.Value{}, fmt.Errorf(\"genmai.SelectXXX2: `%v` field is ambigous\", column ) }\n                findTs = j\n                findIndex = tmp\n            } \n        }\n        //if findTs < 0 { return []reflect.Value{}, fmt.Errorf(\"genmai.SelectXXX2: `%v` field isn't defined in embedded struct\", stringutil.ToUpperCamelCase(column) ) }\n        if findTs < 0 { return []reflect.Value{}, fmt.Errorf(\"genmai.SelectXXX2: `%v` field isn't defined in embedded struct\", column ) }\n        tsIndex[i] = findTs\n        fieldIndexes[i] = findIndex\n    }\n\n    dest   := make([]interface{}, len(columns))\n    vs     := make([]reflect.Value,len(ts))\n    result := make([][]reflect.Value,len(ts))\n\n    for j := 0 ; j < len(ts) ; j++ { \n        result[j] = make( []reflect.Value,0 )\n    }\n\n    for rows.Next() {\n        for j := 0 ; j < len(ts) ; j++ { \n            vs[j] = reflect.New(ts[j]).Elem() \n        }\n        for i, index := range fieldIndexes {\n            field := vs[tsIndex[i]].FieldByIndex(index)\n            dest[i] = field.Addr().Interface()\n        }\n        err = rows.Scan(dest...)\n        if err != nil { return []reflect.Value{}, err }\n        for j := 0 ; j < len(ts) ; j++ { \n            result[j] = append( result[j], vs[j] )\n        }\n    }\n    err = rows.Err()\n    if err != nil { return []reflect.Value{}, err }\n\n    slice := make([]reflect.Value,len(ts))\n    for j := 0 ; j < len(ts) ; j++ {\n        if ptrN[j] == 1 { ts[j] = reflect.PtrTo(ts[j]) }\n        slice[j] = reflect.MakeSlice( reflect.SliceOf(ts[j]), len(result[j]), len(result[j]))\n        for line, v := range result[j] {\n            if ptrN[j] == 1 { v = v.Addr() }\n            slice[j].Index(line).Set(v)\n        }\n    }\n//fmt.Printf( \"slice[0][0]:%v \\n\",slice[0].Index(0).Interface() )\n//fmt.Printf( \"slice[0][1]:%v \\n\",slice[0].Index(1).Interface() )\n//fmt.Printf( \"slice[0][2]:%v \\n\",slice[0].Index(2).Interface() )\n    return slice, nil\n}\n\n//-----------------------------------------------------------------------------------\n// selectToSlice returns a slice value fetched from rows. \n// elements are simple-type all\nfunc (db *DB) selectToSliceValues4(rows *sql.Rows, \n                            ts []reflect.Type) ([]reflect.Value, error) {\n    var     ptrN [255]int       // maybe len(ts) < 255\n    columns, err := rows.Columns()\n    if err != nil { return []reflect.Value{}, err }\n\n    if len(ts) != len(columns) {\n        return []reflect.Value{} , fmt.Errorf( \"genmai.SelectXXX2: number of receive-data unmatch to column\" )\n    }\n\n    for j := 0 ; j < len(ts) ; j++ {\n        ts[j] = ts[j].Elem()\n        if ts[j].Kind() == reflect.Ptr { ptrN[j] = 1 ; ts[j] = ts[j].Elem() }\n        if ts[j].Kind() == reflect.Ptr {\n            return []reflect.Value{} , fmt.Errorf( \"genmai.SelectXXX2: duplicated pointer isn't supported %v\", ts[j] )\n        }\n    }\n    dest   := make([]interface{}, len(ts))\n    vs     := make([]reflect.Value,len(ts))\n    result := make([][]reflect.Value,len(ts))\n\n    for j := 0 ; j < len(ts) ; j++ { \n        result[j] = make( []reflect.Value,0 )\n    }\n\n    for rows.Next() {\n        for j := 0 ; j < len(ts) ; j++ { \n            vs[j] = reflect.New(ts[j]).Elem() \n        }\n        for i := 0 ; i < len(ts) ; i++ {\n            field := vs[i]\n            dest[i] = field.Addr().Interface()\n        }\n        err = rows.Scan(dest...)\n        if err != nil { return []reflect.Value{}, err }\n        for j := 0 ; j < len(ts) ; j++ { \n            result[j] = append( result[j], vs[j] )\n        }\n    }\n    err = rows.Err()\n    if err != nil { return []reflect.Value{}, err }\n\n    slice := make([]reflect.Value,len(ts))\n    for j := 0 ; j < len(ts) ; j++ {\n        if ptrN[j] == 1 { ts[j] = reflect.PtrTo(ts[j]) }\n        slice[j] = reflect.MakeSlice( reflect.SliceOf(ts[j]), len(result[j]), len(result[j]))\n        for line, v := range result[j] {\n            if ptrN[j] == 1 { v = v.Addr() }\n            slice[j].Index(line).Set(v)\n        }\n    }\n    return slice, nil\n}\n//-----------------------------------------------------------------------------------\n// selectToValues4 \nfunc (db *DB) selectToValues4( rows *sql.Rows, \n                            ts []reflect.Type) ([]reflect.Value, error) {\n    var     ptrN    [256]int        // maybe len(ts) < 256\n    var     err     error\n\n    columns, err := rows.Columns()\n    if err != nil { return []reflect.Value{}, err }\n\n    for j := 0 ; j < len(ts) && j < len(columns) ; j++ {\n        if ts[j].Kind() == reflect.Ptr { ptrN[j] = 1 ; ts[j] = ts[j].Elem() }\n        switch ts[j].Kind() {\n        case reflect.Ptr :\n            return []reflect.Value{} , fmt.Errorf( \"genmai.SelectXXX2: duplicated pointer isn't supported %v\", ts[j] )\n        case reflect.Struct :\n            return []reflect.Value{} , fmt.Errorf( \"genmai.SelectXXX2: non-slice of struct isn't supported %v\", ts[j] )\n        }\n    }\n    if len(ts) != len(columns) {        // after pointer/struct checking\n        return []reflect.Value{} , fmt.Errorf( \"genmai.SelectXXX2: number of receive-data arear unmatch to column\" )\n    }\n\n    dest   := make([]interface{}, len(ts))\n    vs     := make([]reflect.Value,len(ts))\n\n    for rows.Next() {\n        for j := 0 ; j < len(ts) ; j++ { \n            vs[j] = reflect.New(ts[j]).Elem() \n        }\n        for i := 0 ; i < len(ts) ; i++ {\n            dest[i] = vs[i].Addr().Interface()\n        }\n        err = rows.Scan(dest...)\n        if err != nil { return []reflect.Value{}, err }\n    }\n    err = rows.Err()\n    if err != nil { return []reflect.Value{}, err }\n\n    slice  := make([]reflect.Value,len(ts))\n    for j := 0 ; j < len(ts) ; j++ {\n        if ptrN[j] == 1 { vs[j] = vs[j].Addr() }\n        slice[j] = vs[j]\n    }\n    return slice, nil\n}\n//-----------------------------------------------------------------------------------\n// fieldIndexByName2 returns the index sequence corresponding to the nested field\nfunc (db *DB) fieldIndexByName2(t reflect.Type, \n                name string, pref string, index []int) ([]int,error) {\n    find := 0\n    for i := 0; i < t.NumField(); i++ {\n        field := t.Field(i)\n        candidate := db.columnFromTag( field );\n        if pref + candidate == name {\n            if find > 0 { return nil, fmt.Errorf( \"genmai.SelectXXX2: `%v` receive field is ambigous\",name ) }\n            index = append( index,i )\n            find++\n            continue \n        }\n        if field.Anonymous {\n            idx,err := db.fieldIndexByName2( field.Type,name,pref,append( index,i ) ); \n            if err != nil { return nil,err }\n            if len(idx) > 0 {\n                if find > 0 { return nil, fmt.Errorf( \"genmai.SelectXXX2: `%v` receive field is ambigous\",name ) }\n                index = idx\n                find++\n                continue \n            }\n        }\n    }\n    if find > 0 { return index,nil }\n    return nil,nil\n}\n//-----------------------------------------------------------------------------------\n// ColumnAlias returns the slice of AS-clause which asciates the table column and the struct field.\nfunc (db *DB) ColumnAlias2( pref bool,args ...interface{} ) ([]string,error) {\n\n    var fieldAs []string \n    var name,name1,name2,strName string     // stack over?  pq runtime: VirtualAlloc error\n    var i,j,x1,x2,y1,y2 int                 // \n    var err error\n\n    fields := make([][]string,len(args))\n    dup    := make([][]bool,len(args))\n\n    for i,arg := range args {\n        rv := reflect.ValueOf(arg)\n        if rv.Kind() == reflect.Ptr { rv = rv.Elem() }\n        if rv.Kind() != reflect.Struct { \n            return nil, fmt.Errorf( \"genmai.ColumnAlias2:parameter must be a struct or a pointer of struct\",rv.Type().Name() )\n        }\n        fields[i],err = db.collectTableFieldsAs2( rv.Type() )\n        // fmt.Println( fields )\n        if err != nil { return nil,err }\n    }\n    if pref == false {\n    //---------------- check the duplication between other struct's field\n        for x1,_ = range fields { dup[x1] = make([]bool,len(fields[x1])) }\n        for x1,_ = range fields {\n            for y1,name1 = range fields[x1] {\n                for x2 = x1+1 ; x2 < len(fields) ; x2++ {\n                    for y2,name2 = range fields[x2] {\n                        if name1 == name2 {\n                            dup[x1][y1] = true \n                            dup[x2][y2] = true \n                            break\n                        }\n                    }\n                }\n            }\n        }\n    }\n    //------------------------------------------------------------------\n    // duplicated     \uff1a \"table\".\"column\" AS \"table.column\"\n    // not duplicated \uff1a         \"column\" AS \"column\"\n    //------------------------------------------------------------------\n    for i,_ = range fields {\n        for j,name =  range fields[i] {\n            if pref == true || dup[i][j] {\n                rv := reflect.ValueOf(args[i])\n                if rv.Kind() == reflect.Ptr { rv = rv.Elem() }\n                t := rv.Type()\n                //strName := stringutil.ToSnakeCase(t.Name())\n                strName = db.tableName( t )\n                name2 = db.Quote(strName + \".\" + name)\n                name1 = db.Quote(strName) + \".\" + db.Quote(name)\n                name = name1 + \" AS \" + name2\n            } else {\n                //name = name + \" AS \" + db.Quote(name)\n                name = columnName2(db.dialect,\"\",name) + \" AS \" + db.Quote(name)\n            }\n        fieldAs = append( fieldAs, name )\n        }\n    }\n    return fieldAs,nil\n}\n\n//-------------------------------------------------------------------------------\nfunc (db *DB) collectTableFieldsAs2(t reflect.Type) (fields []string, err error) {\n    for i := 0; i < t.NumField(); i++ {\n        field := t.Field(i)\n        if IsUnexportedField(field) { continue }\n        if db.hasSkipTag(&field) { continue }\n        if field.Anonymous {\n            fs, err := db.collectTableFieldsAs2(field.Type)\n            if err != nil { return nil, err }\n            fields = append(fields, fs...)\n            continue\n        }\n        t := field.Type\n        if t.Kind() == reflect.Struct { \n            switch t.String() {\n            case \"sql.NullString\",\"sql.NullBool\",\"sql.NullInt64\",\"sql.NullFloat64\":\n            case \"time.Time\":\n            default:\n                continue \n            }\n        }\n        fields = append( fields,db.columnFromTag(field) )\n        //fields = append( fields,db.dialect.Quote(db.columnFromTag(field)) )\n    }\n    return fields, nil\n}\n\n\nnaoina\u3055\u3093\u3001woremacx\u3055\u3093\u3001\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002 \nGenmai \u3068 Gorp \u30d7\u30c1\u6bd4\u8f03 \uff0b \u304a\u307e\u3051\n---------------------------------\nGo \u306e\u7c21\u6613 ORM(Object-Relational Mapping)\u3067\u3042\u308b genmai\u3068 gorp\u306b\u3064\u3044\u3066\u3001\u53e4\u3044\u60c5\u5831\u304c\u6563\u898b\u3055\u308c\u308b\u3068\u3044\u3046\u3053\u3068\u3082\u3042\u308a\u3001\u30e9\u30a4\u30c8\u30e6\u30fc\u30b6\u30fc\u3068\u3057\u3066\u6c17\u306b\u306a\u308b\u7bc4\u56f2\u3067\u3061\u3087\u3063\u3068\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002 \u6bd4\u8f03\u3068\u3044\u3046\u3088\u308a\u3001\u4ed5\u69d8\u30e1\u30e2\u307f\u305f\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002 \n\n- \u5bfe\u8c61 gorp\u30d0\u30fc\u30b8\u30e7\u30f3\u306f v1\u3067\u306f\u306a\u304f\u3001Pre v2 (go-gorp/gorp)\u3067\u3059\u3002\u5b89\u5b9a\u7248\u3067\u306f\u306a\u304f\u4f5c\u696d\u4e2d\u3068\u3044\u3046\u3053\u3068\u306a\u306e\u3067\u3001\u672c\u7a3f\u306e\u8cde\u5473\u671f\u9650\u306f\u77ed\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093(2016\u5e746\u6708\u6295\u7a3f)\u3002  \n\n- transaction \u3084 migration\u3001\u30b9\u30d4\u30fc\u30c9\u3001\u305d\u306e\u4ed6\u8abf\u3079\u3066\u306a\u3044\u3067\u3059\u3002 \u53cc\u65b9\u3068\u3082transaction\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u308b\u307f\u305f\u3044\u3067\u3059\u3002 \u307e\u305f\u3001migration\u306e\u30b5\u30dd\u30fc\u30c8\u306fgenmai\u306b\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001gorp\u306b\u306f\u4f55\u304c\u3057\u304b\u3042\u308b\u3088\u3046\u3067\u3059\u3002  \n\n- gorp,gorm\u305d\u306e\u4ed6\u306e\u6a5f\u80fd\u6bd4\u8f03\u306f\u3001http://present.go-steel-programmers.org/talk-review-orms \u306e\u30b9\u30e9\u30a4\u30c9\u304c\u8981\u9818\u3088\u304f\u7e8f\u307e\u3063\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059(\u77e2\u5370\u30ad\u30fc\u4f7f\u7528)\u3002  \n\n- \u74b0\u5883\uff1a\nGo 1.6.2\nWindows8 64bit, (CentOS7 64bit MySQL\u306e\u307f\u78ba\u8a8d)\nMySQL5.6\u3001InnoDB\u3001github.com/go-sql-driver/mysql\nPostgreSQL9.5\u3001github.com/lib/pq  \n\n- \u672c\u7a3f\u3067\u306f,DB\u30c6\u30fc\u30d6\u30eb\u306b\u76f4\u63a5\u7d10\u3065\u3051\u30fb\u5909\u63db\u3055\u308c\u308b\u69cb\u9020\u4f53\u3092 \u300c**\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53**\u300d\u3001\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308b\u305f\u3081\u306e\u69cb\u9020\u4f53\u3092\u300c**\u53d7\u3051\u5074\u69cb\u9020\u4f53**\u300d\u3068\u8a00\u3046\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 \u3053\u308c\u306f\u5f79\u5272\u4e0a\u306e\u8868\u73fe\u306a\u306e\u3067\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u4e0a\u306f\u540c\u3058\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u540d\u306f XxxxxTbl \u306e\u5f62\u306b\u3057\u3066\u307e\u3059\u3002 \u307e\u305f\u3001\u8868\u8a18\u4e0a\u300c\u69cb\u9020\u4f53\u300d\u3068\u300c\u69cb\u9020\u4f53\u5909\u6570\u300d\u306e\u533a\u5225\u304c\u3042\u308a\u307e\u305b\u3093\u306e\u3067\u9069\u5b9c\u8aad\u307f\u66ff\u3048\u3066\u304f\u3060\u3055\u3044\u3002  \n\n- genmai\u3084 gorp\u5b9f\u884c\u6642\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u529b\u3055\u308c\u308b\u5834\u5408\u306f\u30a8\u30e9\u30fc\u6271\u3044\u3057\u3066\u3044\u307e\u3059\u3002 \u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u529b\u3055\u308c\u3066\u3082\u30c7\u30fc\u30bf\u306f\u3061\u3083\u3093\u3068\u8a2d\u5b9a\u3055\u308c\u308b\u304b\u3089\u7121\u8996\u3057\u3066\u51fa\u529b\u3092\u5229\u7528\u3057\u3088\u3046\u3068\u3044\u3046\u65b9\u306f\u3001\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u4e0a\u4fdd\u969c\u3055\u308c\u3066\u3044\u308b\u4f7f\u3044\u65b9\u304b\u5426\u304b\u3088\u304f\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002 \u305f\u3068\u3048\u3070\u3001gorp\u5b9f\u884c\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u529b\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306b\u3001`\"SELECT * \"`\u306e\u3068\u304d\u306fOK\u3060\u304c `\"SELECT \u30ab\u30e9\u30e0\u540d\"`\u3068\u3059\u308b\u3068\u8a2d\u5b9a\u3055\u308c\u306a\u3044\u3001\u3068\u3044\u3046\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002  \n\n- \u898b\u3084\u3059\u3055\u3092\u512a\u5148\u3057\u3066\u3001query\u6587\u5b57\u5217\u4e2d\u306e\u30c6\u30fc\u30d6\u30eb\u540d\u3084\u30ab\u30e9\u30e0\u540d\u3092 quote\u3057\u3066\u306a\u3044\u3053\u3068\u3084\u3001\u4e00\u90e8MySQL\u7528\u3068PostgreSQL\u7528\u304c\u6df7\u5728\u3057\u3066\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u30ea\u30b9\u30c8\u3092\u7e26\u306b\u7e2e\u3081\u308b\u305f\u3081\u3068\u3001\u5f53\u65b9\u306e\u597d\u307f\u3067\u6a19\u6e96\u306ego\u8a18\u6cd5\u306b\u5247\u3063\u3066\u3044\u306a\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002  \n\n- genmai\u306e github\u306e\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f\u3001\u30c6\u30fc\u30d6\u30eb\u751f\u6210\u3067\u306f ORM\u3089\u3057\u304b\u3089\u306c\u4f8b\u3057\u304b\u306e\u3063\u3066\u306a\u3044\u306e\u3067\u3001\uff14.\uff11.\uff11 \u306b\u5f53\u65b9\u306e\u74b0\u5883(\u30ed\u30fc\u30ab\u30eb)\u3067\u306e\u7c21\u6613\u30d7\u30ed\u30b0\u30e9\u30e0\u4f8b\u3092\u8a18\u8f09\u3057\u3066\u304a\u304d\u307e\u3057\u305f\u3002\u3064\u3044\u3067\u306a\u306e\u3067 \uff14.\uff12.\uff11 \u306b gorp\u306e\u7c21\u6613\u4f8b\u3082\u3002  \n\n\uff0a\u672c\u7a3f\u306b\u8a18\u3057\u305f\u5185\u5bb9\u3084\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5229\u7528\u3068\u305d\u306e\u7d50\u679c\u751f\u3058\u308b\u4e8b\u614b\u306b\u3064\u3044\u3066\u3001\n\u3000\u5f53\u65b9\u306f\u4e00\u5207\u8cac\u4efb\u3092\u8ca0\u3044\u304b\u306d\u307e\u3059\u3002 \u3054\u81ea\u8eab\u306e\u8cac\u4efb\u306b\u304a\u3044\u3066\u3054\u5229\u7528\u304f\u3060\u3055\u3044\u3002 \n\n\n#\uff11\u7ae0 \u69cb\u9020\u4f53 <-> DB\u30c6\u30fc\u30d6\u30eb\u306e\u9759\u7684\u5bfe\u5fdc\u4f8b(MySQL)\n## \uff11.\uff11 genmai\n\n```go:genmai\ntype Test00 struct {\n    Val32x  uint32\n}\n                                              \uff0a\uff0a\uff0a MySQL , UTF-8 , Windows8 64bit \uff0a\uff0a\uff0a\ntype OtherNameTbl struct {                  Field           Type       Null  Key   Default \n                                        +- - - - - - +- - - - - - - - +- - -+- - -+- - - +- - - - \nId        int64    `db:\"pk\"`            | id         | bigint(20)     | NO  | PRI | NULL | auto_increment\nStr0      string   `db:\"unique\"`        | str0       | varchar(255)   | NO  | UNI | NULL |\nStr1      string   `default:\"'abc'\"`    | str1       | varchar(255)   | NO  |     | abc  |\nStr32     string   `size:\"32\"`          | str32      | varchar(32)    | NO  |     | NULL |\nStr255    string   `size:\"255\"`         | str255     | varchar(255)   | NO  |     | NULL |\nStr1024   string   `size:\"1024\"`        | str1024    | varchar(1024)  | NO  |     | NULL |\nStr65536  string   `size:\"65536\"`       | str65536   | mediumtext     | NO  |     | NULL |\nStrNull   sql.NullString                | str_null   | varchar(255)   | YES |     | NULL |\nStrPtr    *string  `size:\"2048\"`        | str_ptr    | varchar(2048)  | YES |     | NULL |\n\nSlice0      []byte                      | slice0     | varbinary(255) | YES |     | NULL |\nSlice32     []byte  `size:\"32\"`         | slice32    | varbinary(32)  | YES |     | NULL |\nSlice255    []byte  `size:\"255\"`        | slice255   | varbinary(255) | YES |     | NULL |\nSlice1024   []byte  `size:\"1024\"`       | slice1024  | varbinary(1024)| YES |     | NULL |\nSlice65536  []byte  `size:\"65536\"`      | slice65536 | mediumblob     | YES |     | NULL |\n\nVal8        int8                        | val8       | smallint(6)    | NO  |     | NULL |\nVal8u       uint8                       | val8u      | smallint(6)    | NO  |     | NULL |\nVal32       int32   `default:\"15\"`      | val32      | int(11)        | NO  |     | 15   |\nVal32u      uint32                      | val32u     | int(11)        | NO  |     | NULL |\nVal64Null   sql.NullInt64               | val64_null | bigint(20)     | YES |     | NULL |\nVal8Ptr     *int8                       | val8_ptr   | smallint(6)    | YES |     | NULL |\n\n// ValF32   float32            // panic\n// ValF64   float64            // panic\n// ValF64Null sql.NullFloat64  // panic\nValF32G     genmai.Float32              | val_f32_g  | double         | NO  |     | NULL |\nValF64G     genmai.Float64              | val_f64_g  | double         | NO  |     | NULL |\n\nDate        time.Time                   | date\u3000     | datetime       | NO  |     | NULL |\n            genmai.TimeStamp            | created_at | datetime       | NO  |     | NULL |\n                                        | updated_at | datetime       | NO  |     | NULL |\n            Test00                      | val32x     | int(11)        | NO  |     | NULL |\nValName     int      `column:\"reNamed\"` | reNamed    | int(11)        | NO  |     | NULL |\nNothing     int      `db:\"-\"`  // \u975e\u30ab\u30e9\u30e0\nlowerName   int                // \u975e\u30ab\u30e9\u30e0\n}\n        // []byte  size\uff1d 0: \"VARBINARY(255)\"\u3001\uff1c \u7d0464KB: \"VARBINARY(size)\"\n        //             \uff1c 16MB: \"MEDIUMBLOB\" \u3001\uff1e\uff1d : \"LONGBLOB\"\n```\n\ndb.Insert(&OtherNameTbl{}); db.Select(&rslt); fmt.Println(rslt) \u306e\u51fa\u529b(\u4e00\u90e8\u7de8\u96c6\u3042\u308a)\n\n```go:genmai\n    0 [{1       { false} <nil>\n        [] [] [] [] [] \n        0 0 0 0 {0 false} <nil>\n        0 0 \n        0001-01-01 00:00:00 +0000 UTC\n        {2016-05-23 02:37:17 +0000 UTC 2016-05-23 02:37:17 +0000 UTC} \n        {0} \n        0 0 0}]\n```\n\n## \uff11.\uff12 gorp\n\n```go:gorp\ntype Test00 struct {\n    Val32x  uint32\n}\n                                              \uff0a\uff0a\uff0a MySQL , UTF-8 , Windows8 64bit \uff0a\uff0a\uff0a\ntype OtherNameTbl struct {                     Field           Type         Null  Key  Default \n                                           +- - - - - - +- - - - - - - - - +- -  +- - +- - - +- - - - \nId   int64 `db:\",primarykey,autoincrement\"`| Id         | bigint(20)       | NO  | PRI| NULL | auto_incremen\nStr0        string /* unique\u6307\u5b9a\u306f\u30b3\u30fc\u30c9*/ | Str0       | varchar(255)     | YES |    | NULL |\nStr1        string  `db:\",default:\\\"abc\\\"\"`| Str1       | varchar(255)     | YES |    | NULL | \nStr32       string  `db:\",size:32\"`        | Str32      | varchar(32)      | YES |    | NULL |\nStr255      string  `db:\",size:255\"`       | Str255     | varchar(255)     | YES |    | NULL |\nStr1024     string  `db:\",size:1024\"`      | Str1024    | text             | YES |    | NULL |\nStr65536    string  `db:\",size:65536\"`     | Str65536   | text             | YES |    | NULL |\nStrNull     sql.NullString                 | StrNull    | varchar(255)     | YES |    | NULL |\nStrPtr      *string `db:\",size:2048\"`      | StrPtr     | text             | YES |    | NULL |\n\nSlice0      []byte                         | Slice0     | mediumblob       | YES |    | NULL |\nSlice32     []byte  `db:\",size:32\"`        | Slice32    | mediumblob       | YES |    | NULL |\nSlice255    []byte  `db:\",size:255\"`       | Slice255   | mediumblob       | YES |    | NULL |\nSlice1024   []byte  `db:\",size:1024\"`      | Slice1024  | mediumblob       | YES |    | NULL |\nSlice65536  []byte  `db:\",size:65536\"`     | Slice65536 | mediumblob       | YES |    | NULL |\n\nVal8        int8                           | Val8       | tinyint(4)       | YES |    | NULL |\nVal8u       uint8                          | Val8u      | tinyint(3) unsigned| YES |  | NULL |\nVal32       int32   `db:\",default:0xf\"`    | Val32      | int(11)          | YES |    | NULL |\nVal32u      uint32                         | Val32u     | int(10) unsigned | YES |    | NULL |\nVal64Null   sql.NullInt64                  | Val64Null  | bigint(20)       | YES |    | NULL |\nVal8Ptr     *int8                          | Val8Ptr    | tinyint(4)       | YES |    | NULL |\n\nValF32      float32                        | ValF32     | double           | YES |    | NULL |\nValF64      float64                        | ValF64     | double           | YES |    | NULL |\nValF64Null  sql.NullFloat64                | ValF64Null | double           | YES |    | NULL |\n\nDate        time.Time                      | Date       | datetime         | YES |    | NULL |\n                                      \n            Test00                         | Val32x     | int(10) unsigned | YES |    | NULL |\nValName     int   `db:\"reNamed\"`           | reNamed    | int(11)          | YES |    | NULL |\nNothing     int   `db:\"-\"`      // \u975e\u30ab\u30e9\u30e0\n//lowerName int                 // panic\n}\n```\n\ndbmap.Insert(&OtherNameTbl{}); dbmap.Select(&rslt,\"SELECT * FROM OtherNameTbl\"); fmt.Println(rslt)\u306e\u51fa\u529b(\u4e00\u90e8\u7de8\u96c6\u3042\u308a)\n\n```go:gorp\n    0 [{1  abc     { false} <nil>\n        [] [] [] [] [] \n        0 0 15 0 {0 false} <nil>\n        0 0 {0 false} \n        0001-01-01 00:00:00 +0000 UTC \n        {0} \n        0 0}]\n```\n\n\n## \uff11.\uff13 \u6bd4\u8f03\n\n\u5c55\u958b\u3055\u308c\u308b\u30c7\u30fc\u30bf\u578b\u306f\u30b7\u30b9\u30c6\u30e0\u306b\u3088\u3063\u3066\u7570\u306a\u308a\u307e\u3059\u306e\u3067\u3001\u53c2\u8003\u7a0b\u5ea6\u306b\u304a\u8aad\u307f\u304f\u3060\u3055\u3044\u3002 \u4ee5\u4e0b\u306f\u4e3b\u306b MySQL,Windows64bit\u3067\u306e\u8a71\u3067\u3059\u3002\n\n\uff11. genmai\u3067\u306f\u3001\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f snake_case\u5909\u63db\u3055\u308c\u3066\u30ab\u30e9\u30e0\u540d\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u30bf\u30b0\u3092\u4f7f\u3063\u3066\u7570\u306a\u308b\u30ab\u30e9\u30e0\u540d\u3092\u3064\u3051\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002  gorp\u3067\u306f\u3001\u30bf\u30b0\u3042\u308b\u3044\u306f\u30b3\u30fc\u30c9(\u52d5\u7684)\u3067\u30ab\u30e9\u30e0\u540d\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 \n\n\uff12. genmai\u3067\u306f\u30c6\u30fc\u30d6\u30eb\u540d\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u69cb\u9020\u4f53\u540d\u3092snake_case\u5909\u63db\u3057\u305f\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u69cb\u9020\u4f53\u306b TableNamer\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3067\u5225\u540d\u306b\u3067\u304d\u307e\u3059\u3002  gorp\u3067\u306f\u3001\u30c6\u30fc\u30d6\u30eb\u540d\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u69cb\u9020\u4f53\u540d\u3068\u540c\u3058\u3067\u3059\u304c\u3001\u30b3\u30fc\u30c9\u3067\u5225\u540d\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\n\n```go:genmai\n    type OtherTbl struct {\n        Id        int64     `db:\"pk\"`\n    }\n    func (tbl *OtherTbl) TableName() string { // \u30c6\u30fc\u30d6\u30eb\u540d\n        return \"another_tbl\"                  //   other_tbl -> another_tbl\n    }\n```\n\n\n\uff13. genmai\u3067\u3082gorp\u3067\u3082\u3001\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u30fb\u53d7\u3051\u5074\u69cb\u9020\u4f53\u3068\u3082\u306b\u69cb\u9020\u4f53\u306e\u57cb\u8fbc\u307f(\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u306a\u3057)\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002 \u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u3064\u3051\u308b\u5834\u5408\u306b\u306f\u3001\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u3067\u306f\u975e\u30ab\u30e9\u30e0(`db:\"-\"`)\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u3064\u307e\u308a\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u306e\u3064\u3044\u305f\u69cb\u9020\u4f53\u30d5\u30a3\u30fc\u30eb\u30c9\u306fDB\u30c6\u30fc\u30d6\u30eb\u306e\u30ab\u30e9\u30e0\u5b9a\u7fa9\u7528\u9014\u306b\u306f\u4f7f\u3048\u307e\u305b\u3093\u3002\n(2016-05\u306e\u6642\u70b9\u3067gorp\u3067\u306f\u3001 \u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3067 varchar(255)\u306e\u30ab\u30e9\u30e0\u304c\u4f5c\u3089\u308c\u307e\u3059)\n(2016-05\u306e\u6642\u70b9\u3067genmai\u3067\u306f\u3001\u591a\u6bb5\u306e\u57cb\u3081\u8fbc\u307f\u306b\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002\u4fee\u6b63\u30b3\u30fc\u30c9\u3092\u672c\u7bc0\u6700\u5f8c\u306b\u8a18\u3057\u307e\u3059)\n\n```go\n    type PsnlData struct {\n        Name    string\n        Age     int\n    }\n    type UserTbl struct {\n        Id      int64       `db:\"pk\"` // `db:\",primarykey,autoincrement\"`\n                PsnlData              // \u57cb\u3081\u8fbc\u307f\n    //  Person  PsnlData              // \u4e0d\u53ef\n        Person  PsnlData    `db:\"-\"`  // \u975e\u30ab\u30e9\u30e0\n    }\n```\n\n\uff14. genmai\u3067\u306f string,int\u306a\u3069\u306b\u5225\u306e\u578b\u540d\u3092\u3064\u3051\u3066\u30ab\u30e9\u30e0\u306b\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093(\u30c6\u30fc\u30d6\u30eb\u751f\u6210\u6642panic)\u3002  gorp\u3067\u306f\u30ab\u30e9\u30e0\u306f\u4f5c\u3089\u308c\u3001int\u7cfb\u306f OK\u306b\u898b\u3048\u307e\u3059\u304c\u3001 string\u306f\u73fe\u72b6\u3067\u306fInsert( )\u6642\u306b `sql: converting Exec argument #21's type: unsupported type main.PsnStr, a string` \u3068\u51fa\u529b\u3055\u308c\u3001Insert( )\u3067\u304d\u307e\u305b\u3093\u3002 \n\n```go\n    type PsnStr string\n    type PsnVal int\n\n    type UserTbl struct {\n        Id      int64       `db:\"pk\"` // `db:\",primarykey,autoincrement\"`\n    //  Name    PsnStr          \u3000\u3000  // \u4e0d\u53ef\n    //  Age     PsnVal          \u3000\u3000  // genmai\u3067\u306f\u4e0d\u53ef\n    }\n```\n\n\uff15. \u5c0f\u6587\u5b57\u3067\u59cb\u307e\u308b\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u3001genmai\u3067\u306f\u975e\u30ab\u30e9\u30e0\u6271\u3044\u3067\u3059\u3002  gorp\u3067\u306f\u30ab\u30e9\u30e0\u306f\u4f5c\u3089\u308c\u307e\u3059\u304c\u3001insert()\u3067 panic\u3092\u8d77\u3053\u3059\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 \n\n\uff16. \u3069\u3061\u3089\u3082\u57fa\u672c\u7684\u306b\u306f\u914d\u5217\u8868\u8a18\u306b\u5bfe\u5fdc\u3057\u3066\u304a\u3089\u305a\u3001\u30b9\u30e9\u30a4\u30b9 `[] uint8` \u307e\u305f\u306f `[] byte` \u306e\u307f\u53ef\u80fd\u306a\u3088\u3046\u3067\u3059\u3002 \n\n\uff17. \u3069\u3061\u3089\u3082(not)null\u3001index\u95a2\u9023\u306f\u30b3\u30fc\u30c9(\u30c0\u30a4\u30ca\u30df\u30c3\u30af)\u3067\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 \n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001genmai\u3067\u306f NullXXX\u3084 \u30dd\u30a4\u30f3\u30bf\u3001\u30b9\u30e9\u30a4\u30b9\u3067\u306a\u3051\u308c\u3070 \u57fa\u672c\u7684\u306b NOT NULL\u3001gorp\u3067\u306f\u3001\u57fa\u672c\u7684\u306b NULL\u5024\u53ef\u3068\u8a2d\u5b9a\u3055\u308c\u307e\u3059\u3002 \n\n\uff18. \u30bf\u30b0\u6307\u5b9adefault\u5024\u306e\u6271\u3044\u306f\u5927\u304d\u304f\u7570\u306a\u308a\u3001genmai\u3067\u306fDB\u30c6\u30fc\u30d6\u30eb\u4e0a\u3067\u30ab\u30e9\u30e0\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3068\u3057\u3066\u8a2d\u5b9a\u3055\u308c\u307e\u3059\u304c `\"TestTbl{}\"`\u3092insert\u3059\u308b\u3068\u3001(\u5f53\u7136\u3060\u304c)\u305d\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306b\u306f\u306a\u308a\u307e\u305b\u3093\u3002 \n\u9006\u306b gorp\u3067\u306f\u3001DB\u30c6\u30fc\u30d6\u30eb\u4e0a\u3067\u30ab\u30e9\u30e0\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306b\u306f\u8a2d\u5b9a\u3055\u308c\u307e\u305b\u3093\u304c\u3001`\"TestTbl{}\"`\u3092insert\u3059\u308b\u3068\u3001DB\u4e0a\u305d\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3068\u306a\u308a\u307e\u3059\u3002 \u305f\u3060\u3057 gorp\u3067\u306f\u3001\u30bf\u30b0\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\u3068 Insert( )\u6642\u306b\u6307\u5b9a\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5024\u304c\u7121\u8996\u3055\u308c\u3066\u3001\u305d\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u304cDB\u306b\u53cd\u6620\u3055\u308c\u308b\u306e\u306f\u5947\u5999\u3067\u3059(2016-05\u6642\u70b9)\u3002 \n\n\n\uff19. \u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u540d(\u30ab\u30e9\u30e0\u540d)\u3068\u57cb\u3081\u8fbc\u307e\u308c\u305f\u69cb\u9020\u4f53\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u540d(\u30ab\u30e9\u30e0\u540d)\u306b\u91cd\u8907\u304c\u3042\u3063\u305f\u5834\u5408\u3001\u30c6\u30fc\u30d6\u30eb\u751f\u6210\u6642\u306bgenmai\u3067\u306f\u30a8\u30e9\u30fc\u3068\u306a\u308a\u307e\u3059\u304c\u3001gorp\u3067\u306f \u30a8\u30e9\u30fc\u306b\u306a\u3089\u306a\u3044\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u610f\u56f3\u3057\u3066\u306a\u3044\u306e\u306a\u3089\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002 \n\n```go:gorp\n        type UserTbl  struct { Field int ; Field2 int }\n        type UserATbl struct { Field int ; fielda int ; User }\n            \u30fb\u30fb\u30fb\n        dbmap.AddTable( UserATbl ) \n        dbmap.CreateTable()        // ---> \u30ab\u30e9\u30e0\u306f Field,fielda,Field2 \u304c\u3067\u304d\u308b\n```\n\n\uff11\uff10. \u6642\u9593\u578b\u306b\u3064\u3044\u3066\u306f json\u3084\u30c9\u30e9\u30a4\u30d0\u30fc\u3068\u306e\u95a2\u4fc2\u3067\u3044\u308d\u3044\u308d\u5fae\u5999\u306a\u3082\u306e\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u304c\u3001\u672a\u8abf\u67fb\u3067\u3059\u3002  genmai\u306b\u306f \u4e0b\u8a18\u306eTimeStamp\u578b\u304c\u3042\u308a\u3001\u751f\u6210\u6642\u3084update\u6642\u306b\u4f55\u304c\u3057\u304b\u306e\u30b5\u30dd\u30fc\u30c8\u304c\u3042\u308b\u307f\u305f\u3044\u3067\u3059\u3002 \n\n```go:genmai\n    type TimeStamp struct {\n        // \u751f\u6210\u6642\u523b\u3002 \u3053\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306fBeforeInsert\u306b\u3088\u308a\u81ea\u52d5\u7684\u306b\u8a2d\u5b9a\u3055\u308c\u308b\n        CreatedAt time.Time `json:\"created_at\"`\n        // update\u6642\u523b\u3002 \u3053\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306fBeforeUpdate\u306b\u3088\u308a\u81ea\u52d5\u7684\u306b\u8a2d\u5b9a\u3055\u308c\u308b\n        UpdatedAt time.Time `json:\"updated_at\"`\n    }\n```\n\ngorp\u306b\u306f\u3001\u300ctime.Time\u30d5\u30a3\u30fc\u30eb\u30c9\u3092 database/sql\u30c9\u30e9\u30a4\u30d0\u30fc\u3078\u6e21\u3059\u304c\u3001\u3053\u306e\u578b\u306e\u632f\u821e\u3044\u306f\u30c9\u30e9\u30a4\u30d0\u30fc\u306b\u3088\u308b\u3002 MySQL\u30e6\u30fc\u30b6\u306f\u3068\u304f\u306b\u6ce8\u610f\u8981\u3002 timezone/DST\u306e\u6f5c\u5728\u7684\u554f\u984c\u3092\u907f\u3051\u308b\u306b\u306f\u3001time\u30c7\u30fc\u30bf\u7528\u306b\u6574\u6570\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u7528\u3044 UNIX\u30bf\u30a4\u30e0\u3092\u30b9\u30c8\u30a2\u3059\u308b\u3053\u3068\u3082\u8003\u3048\u308b\u307f\u308b\u3079\u3057\u300d\u307f\u305f\u3044\u306a\u3053\u3068\u304c\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002 \n\n\n\uff0agenmai \u591a\u6bb5\u57cb\u3081\u8fbc\u307f\u5bfe\u51e6\n\n```go:genmai.go\n        \u30fb\u30fb\u30fb\n    func (db *DB) fieldIndexByName(t reflect.Type, name string, index []int) []int {\n            \u30fb\u30fb\u30fb\n            if field.Anonymous {\n                if idx := db.fieldIndexByName(field.Type, name, append(index, i)); len(idx) > 0 {\n                    //return append(index, idx...)  *** \u30a2\u30da\u30f3\u30c9\u305b\u305a\u306b idx\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059 ***\n                    return idx\n                }\n            }\n            \u30fb\u30fb\u30fb\n    }\n\n```\n\n\n#\uff12\u7ae0 \u30c6\u30fc\u30d6\u30eb\u751f\u6210\u30fbQUERY\u306e\u65b9\u5f0f\n\u672c\u7ae0\u3067\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002 \n\n```go\n    // \u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53 <---> DB\u30c6\u30fc\u30d6\u30eb  // ------ gorp --------\n    type UserTbl struct {               // \u5909\u540d --> user_tbl\n        Id       int64  `db:\"pk\"`       // `db:\"id,primarykey,autoincrement\"` \n        Name     string                 // `db:\"name\"`\n        Age      int                    // `db:\"age\"`\n    }\n    // \u53d7\u3051\u5074\u69cb\u9020\u4f53\uff1aDB\u3068\u76f4\u63a5\u306e\u7d10\u3065\u3051\u306a\u3057\n    type UserData struct {              //\n        Age       int                   //\n        lowerDmy  int                   //\n        Name2 string    `column:\"name\"` // `db:\"name\"`\n    }\n        \u30fb\u30fb\u30fb\n    db.Insert( &UserTbl{ Name: \"Alice\", Age:22 })\n    db.Insert( &UserTbl{ Name: \"John\" , Age:33 })\n```\n\n\n\n## \uff12.\uff11 genmai\n### \uff12.\uff11.\uff11 \u65b9\u5f0f\n\n\uff11. \u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u306b\u57fa\u3065\u304f DB\u30c6\u30fc\u30d6\u30eb\u4f5c\u6210\u6642\u3001\u305d\u306e\u4ed6 DB\u3068\u306e\u3084\u308a\u53d6\u308a\u6642\u306f\n\u3000\u6307\u5b9a\u3055\u308c\u305f\u69cb\u9020\u4f53\u3092\u6bce\u56de\u89e3\u6790\u3057\u3001\u30ea\u30fc\u30c9\u30fb\u30e9\u30a4\u30c8\u3057\u307e\u3059\u3002 \n\n\uff12. \u30af\u30a8\u30ea\u306f\u95a2\u6570\u5f62\u5f0f\u3067\u7d44\u307f\u7acb\u3066\u307e\u3059\n\n```go:genmai\n    var users []UserTbl \n    db.Select( &users )                           // \u5168\u884c\u30fb\u5168\u30ab\u30e9\u30e0\n    db.Select( &users, db.Where( \"age\",\">\",30 ))  // \u5168\u30ab\u30e9\u30e0\u3001\u6761\u4ef6\u4ed8\u304d\n    db.Select( &users, []string{ \"name\",\"age\" })  // \u4e00\u90e8\u30ab\u30e9\u30e0(name,age)\n        \u30fb\u30fb\u30fb\n    db.Update( &users )                           // primaryKey\u306b\u57fa\u3065\u304f\n```\n\n+ \u30ab\u30e9\u30e0\u306e\u6307\u5b9a\u306f\u57fa\u672c\u7684\u306b\u306fDB\u4e0a\u306e\u540d\u79f0\u3092\u7528\u3044\u307e\u3059\u3002 ALIAS\u6307\u5b9a\u3067\u304d\u307e\u305b\u3093\u3002 \n\n+ Select( )\u306e\u7b2c\u4e00\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u30ab\u30e9\u30e0\u5024\u3092\u53d7\u3051\u53d6\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3001\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u300c\u30b9\u30e9\u30a4\u30b9\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3067\u3001\u305d\u306e\u8981\u7d20\u578b\u306f\u69cb\u9020\u4f53\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u300d\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002  \u3057\u304b\u3057\u3001\u30bd\u30fc\u30b9\u4e0a\u306f\u6b21\u306e\u3069\u3061\u3089\u304b\u3067\u3082OK\u306b\u307f\u3048\u307e\u3059\u3002 \n\na. \u30b9\u30e9\u30a4\u30b9\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3067\u3001\u305d\u306e\u8981\u7d20\u578b\u306f\u69cb\u9020\u4f53\u307e\u305f\u306f\u69cb\u9020\u4f53\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3002\n\u3000\u30c7\u30fc\u30bf\u306f **\u4e0a\u66f8\u304d\u3067\u306f\u306a\u3044** \u3067\u3059\u3002 \nb. int,string\u7b49(\u975e\u69cb\u9020\u4f53)\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3067\u3001\u30ab\u30e9\u30e0\u6307\u5b9a\u306f\uff11\u3064\u3067\u3042\u308b\u3053\u3068\u3002\n\u3000\u6700\u521d\u306b\u898b\u3064\u304b\u3063\u305f\u884c\u306e\u5024\u304c\u8a2d\u5b9a\u3055\u308c\u308b\u3002 \n\n```go:genmai\n                            // '\u69cb\u9020\u4f53\u3078\u306e\u30dd\u30a4\u30f3\u30bf'\u306e\u30b9\u30e9\u30a4\u30b9\u3078\u306e\u30dd\u30a4\u30f3\u30bf\n    var  data [](*UserData) \n    data = append( data,&UserData{ Name2:\"Bob-0\",Age:15 } )\n    data = append( data,&UserData{ Name2:\"Bob-1\",Age:15 } )\n    data = append( data,&UserData{ Name2:\"Bob-2\",Age:15 } )\n    err = db.Select( &data, []string{\"name\",\"age\"},db.From(&UserTbl{}))\n    fmt.Println( data )                 // --> [0xc08209f0c0 0xc08209f120]\n    fmt.Println( *data[0],*data[1] )    // --> {22 0 Alice} {33 0 John}\n\n                                        // string\u3078\u306e\u30dd\u30a4\u30f3\u30bf\n    var name string\n    err = db.Select( &name, \"name\", db.From(&UserTbl{}), \n                    db.Where( \"age\",\">\",1 ).OrderBy(\"id\", \"DESC\")) \n    fmt.Println( name )                 // --> John\n\n    var user UserTbl;                                  \n    db.Select( &user,db.From(&UserTbl{}),db.Limit(1) ) // \u30a8\u30e9\u30fc(\u69cb\u9020\u4f53\u3078\u306e\u30dd\u30a4\u30f3\u30bf)\n\n    var ids []int64 ; \n    db.Select( &ids, \"id\",From(&UserTbl{}))            // \u30a8\u30e9\u30fc(\u975e\u69cb\u9020\u4f53\u306e\u30b9\u30e9\u30a4\u30b9)\n```\n\n+ On( )\u3067\u306e\u8a18\u8ff0\u306f\u6b21\u306e\u30d1\u30bf\u30fc\u30f3\u3067\u3059\n\n```go:genmai\n    On( \"id\" )                  From() or \u53d7\u3051\u5074\u69cb\u9020\u4f53\u30c6\u30fc\u30d6\u30eb.id = Join\u30c6\u30fc\u30d6\u30eb.id\n    On( \"id\", \"=\", 1 )          From() or \u53d7\u3051\u5074\u69cb\u9020\u4f53\u30c6\u30fc\u30d6\u30eb.id = 1\n    On( &Table{}, \"id\" )        table.id = Join\u30c6\u30fc\u30d6\u30eb.id\n    On( &Table{},\"id\",\"=\", 1 )  table.id = 1, Table{} \u306f\u30dd\u30a4\u30f3\u30bf\u3067\u306a\u304f\u3066\u3082\u53ef\n```\n\n+ Where( )\u3001And( )\u3001Or( )\u7b49\u3067\u306e\u8a18\u8ff0\u306f\u6b21\u306e\u30d1\u30bf\u30fc\u30f3\u3067\u3059\n\n```go:genmai\n    Or( db.Where(\u30fb\u30fb\u30fb).And(\u30fb\u30fb\u30fb))   \u6761\u4ef6\u306e\u30cd\u30b9\u30c8\n    Where( \"id\" )                       \u3042\u3068\u306b.Between()\u305d\u306e\u4ed6 Condition\u304c\u7d9a\u304f\n    Where( &Table{}, \"id\" )             \u3042\u3068\u306b.Between()\u305d\u306e\u4ed6 Condition\u304c\u7d9a\u304f\n    Where( \"id\", \"=\", 1 )               \u30d1\u30e9\u30e1\u30fc\u30bf 3\u3064\n    Where( &Table{}, \"id\", \"=\", 1 )     \u30d1\u30e9\u30e1\u30fc\u30bf 4\u3064\n```\n\n\n\n### \uff12.\uff11.\uff12 genmai.Select( )\u306e\u53d7\u3051\u5074\u69cb\u9020\u4f53\u3068DB\u30c6\u30fc\u30d6\u30eb\u306e\u95a2\u4fc2\n\n\uff11. From( )\u3067\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u3092\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u3001\u305d\u306e\u53d7\u3051\u5074\u69cb\u9020\u4f53\u306b\u5bfe\u5fdc\u3059\u308b\n\u3000\u3000DB\u30c6\u30fc\u30d6\u30eb\u306e\u51e6\u7406\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002 (\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\uff1d\u53d7\u3051\u5074\u69cb\u9020\u4f53)\n\n\uff12. From( )\u3067\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\n\n+ \u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u3068\u306f\u7570\u306a\u308b\u69cb\u9020\u4f53(\u53d7\u3051\u5074\u69cb\u9020\u4f53)\u3067DB\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u3068\u308c\u307e\u3059\u3002\nDB\u304b\u3089\u30ea\u30fc\u30c9\u3057\u305f\u30ab\u30e9\u30e0\u540d\u3068\u4e00\u81f4\u3059\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u53d7\u3051\u5074\u69cb\u9020\u4f53\u304b\u3089\u691c\u7d22\u3055\u308c\u307e\u3059\u304c\u3001\u53d7\u3051\u5074\u69cb\u9020\u4f53\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u30bf\u30b0\u306b\u3088\u308b\u30ab\u30e9\u30e0\u540d\u6307\u5b9a( `column:\"xxx\"` )\u304c\u3042\u308b\u306a\u3089\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u305d\u306e\u540d\u524d\u3068\u3057\u3066\u6271\u308f\u308c\u3001\u30ab\u30e9\u30e0\u6307\u5b9a\u304c\u306a\u3044\u306a\u3089\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306esnake_case\u5909\u63db\u3055\u308c\u305f\u540d\u524d\u3068\u3057\u3066\u6271\u308f\u308c\u307e\u3059\u3002 \n\n```go:genmai\n    var  data []UserData\n    db.Select( &data, []string{\"name\",\"age\"},db.From(&UserTbl{}))\n    fmt.Println( data )          // --> [{22 0 Alice} {33 0 John}]\n```\n\n+ \u53d7\u3051\u5074\u69cb\u9020\u4f53\u306e\u5c0f\u6587\u5b57\u3067\u59cb\u307e\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u3067\u306f\u3001\u30ab\u30e9\u30e0\u5024\u3092\u53d7\u3051\u53d6\u308c\u307e\u305b\u3093\u3002 \n\n+ \u53d7\u3051\u5074\u69cb\u9020\u4f53\u306b\u306f\u3001\u30e6\u30fc\u30b6\u304c\u5b9a\u7fa9\u3057\u305f\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u4ed8\u304d\u306e\u69cb\u9020\u4f53\u578b(\u57cb\u3081\u8fbc\u307f\u3067\u306a\u3044)\u304c\u3042\u3063\u3066\u3082\u304b\u307e\u3044\u307e\u305b\u3093\u304c\u3001\u30ab\u30e9\u30e0\u5024\u306f\u53d7\u3051\u53d6\u308c\u307e\u305b\u3093\u3002\n\n+ \u53d7\u3051\u5074\u69cb\u9020\u4f53\u3067\u306f\u3001\u30bf\u30b0\u306b\u3088\u308b\u975e\u30ab\u30e9\u30e0(`db:\"-\"`)\u6307\u5b9a\u306e\u3042\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u3067\u3082\u30ab\u30e9\u30e0\u5024\u3092\u53d7\u3051\u53d6\u308c\u307e\u3059\u3002 (\u5c0f\u6587\u5b57\u3067\u59cb\u307e\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u9664\u304f)\n\n+ \u30ab\u30e9\u30e0\u540d\u306b\u5bfe\u5fdc\u3059\u308b\u53d7\u3051\u5074\u69cb\u9020\u4f53\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u307f\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u306f\u30a8\u30e9\u30fc\u304c\u8fd4\u308a\u307e\u3059\u3002 \n\n```go:genmai\n    type UserData2 struct {\n        Age     int\n    }\n    type UserData3 struct {\n        Name    string\n    }\n    type UserData4 struct {     // \u53d7\u3051\u5074\u69cb\u9020\u4f53\uff1aDB\u3068\u76f4\u63a5\u306e\u7d10\u3065\u3051\u306a\u3057\n             UserData2          //  \u53d7\u3051\u53d6\u308a\u53ef\n        User UserData3          //  \u53d7\u3051\u53d6\u308a\u4e0d\u53ef(\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3042\u308a)\n    //  name string             //  \u53d7\u3051\u53d6\u308a\u4e0d\u53ef(\u5c0f\u6587\u5b57\u3067\u59cb\u307e\u308b)\n        Name string           \n        Id   int64  `db:\"-\"`    //  \u53d7\u3051\u53d6\u308a\u53ef(\u975e\u30ab\u30e9\u30e0\u5316\u3067\u3082)\n    }\n        \u30fb\u30fb\u30fb\n    var data4  []UserData4\n    db.Select( &data4, []string{\"name\",\"age\",\"id\"},db.From(&UserTbl{}))\n    fmt.Println( data4 )    // --> [{{22} {} Alice 1 } {{33} {} John 2 }]\n```\n\n\n## \uff12.\uff12 gorp\n### \uff12.\uff12.\uff11 \u65b9\u5f0f\n\n\uff11. \u306f\u3058\u3081\u306bDB\u30c7\u30fc\u30bf\u3068\u69cb\u9020\u4f53\u306e\u7d10\u3065\u3051\u60c5\u5831\u3092\u4f5c\u6210\u767b\u9332\u3057\u3001\u4ee5\u5f8c\u3001\u305d\u306e\u60c5\u5831\u3092\u3082\u3068\u306b\n\u3000\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002 \n\n+ \u30d7\u30ed\u30b0\u30e9\u30e0\u8d77\u52d5\u6642\u306b\u306f\u6bce\u56de\u3001\u60c5\u5831\u306e\u767b\u9332\u4f5c\u696d(AddTable)\u3059\u308b\u306e\u304c\u57fa\u672c\u3068\u306a\u308a\u307e\u3059(\u767b\u9332\u3057\u305f\u3060\u3051\u3067\u306fDB\u4e0a\u306e\u30c7\u30fc\u30bf\u306b\u76f4\u63a5\u7684\u306a\u5f71\u97ff\u306f\u3042\u308a\u307e\u305b\u3093)\u3002  \n\n+ Select\u7cfb\u3001insert\u7b49\u3067\u306f\u3001\u767b\u9332\u3057\u3066\u3044\u306a\u304f\u3066\u3082DB\u3068\u30c7\u30fc\u30bf\u3092\u3084\u308a\u53d6\u308a\u3067\u304d\u307e\u3059\u3002\nSelect( )\u3067\u306f\u305d\u3046\u3059\u308b\u3053\u3068\u3067\u53d7\u3051\u5074\u69cb\u9020\u4f53\u306e\u81ea\u7531\u5ea6\u304c\u5897\u3057\u307e\u3059\u3002 \u3057\u304b\u3057 insert( )\u306e\u5834\u5408\u306f\u3001\u4f8b\u3048\u3070 \u30c6\u30fc\u30d6\u30eb\u540d\u3084\u30ab\u30e9\u30e0\u540d\u3092\u52d5\u7684\u306b\u5909\u540d\u3057\u3066\u3044\u305f\u5834\u5408\u3001\u6b21\u56de\u8d77\u52d5\u5f8c\u306b\u672a\u767b\u9332\u306e\u72b6\u614b\u3067\u4f7f\u3048\u308b\u306e\u304b\u4e0d\u660e\u3067\u3059(\u672a\u8abf\u67fb)\u3002   \n\n+ \u901a\u5e38\u306f\u4f7f\u3044\u307e\u305b\u3093\u304c\u3001\u30c6\u30fc\u30d6\u30eb\u540d\u3092\u6307\u5b9a\u3057\u306a\u3044DropTables( )\u3084 TrucateTables( ) \u306f\u3001DbMap\u306b\u767b\u9332\u3055\u308c\u305f\u30c6\u30fc\u30d6\u30eb\u60c5\u5831\u3092\u3082\u3068\u306b\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002 \u5f93\u3063\u3066\u3001\u3042\u3089\u304b\u3058\u3081 DbMap\u306b AddTable\u3055\u308c\u3066\u3044\u306a\u3044DB\u4e0a\u306e\u30c7\u30fc\u30bf\u306b\u306f\u5f71\u97ff\u3057\u307e\u305b\u3093\u3002 \u30c6\u30b9\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u7b49\u3092\u66f8\u304f\u3068\u304d\u306b\u306f\u3061\u3087\u3063\u3068\u3054\u6ce8\u610f\u3002\n\u307e\u305f\u3001DropTables( )\u3042\u308b\u3044\u306f\u3001\u69cb\u9020\u4f53\u3092\u6307\u5b9a\u3057\u305f DropTable( )\u3092\u30b3\u30fc\u30eb\u3057\u3066\u3082\u3001DbMap\u4e2d\u306e\u767b\u9332\u60c5\u5831\u306e\u65b9\u306f\u6d88\u3048\u306a\u3044\u3088\u3046\u3067\u3059\u3002 DbMap\u4e2d\u306e\u767b\u9332\u60c5\u5831\u306e\u4e00\u90e8\u3060\u3051\u3092\u524a\u9664\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u306f\u306a\u3044\u307f\u305f\u3044\u3067\u3059(\u5168\u524a\u9664\uff1d\u65b0\u898f\u4f5c\u6210)\u3002 \n\n\n\uff12. Select( )\u3067\u306f\u30af\u30a8\u30ea\u3092SQL\u6587\u3067\u8a18\u8ff0\u3057\u307e\u3059\n\n```go:gorp\n    var users []UserTbl                     // PostgreSQL\u3067\u306f  ? -> $1\n    dbmap.Select( &users, `SELECT * FROM user_tbl WHERE age > ?`,30 )\n        \u30fb\u30fb\u30fb\n    dbmap.Update( &users )                        // primaryKey\u306b\u57fa\u3065\u304f\n```\n\n+ \u30ab\u30e9\u30e0\u306e\u6307\u5b9a\u306f\u57fa\u672c\u7684\u306b\u306fDB\u30c6\u30fc\u30d6\u30eb\u4e0a\u306e\u540d\u79f0\u3092\u7528\u3044\u307e\u3059\u3002 ALIAS\u6307\u5b9a\u3082\u3067\u304d\u307e\u3059\u3002 \n\n+ Select( )\u306e\u7b2c\u4e00\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\n\na. \u30b9\u30e9\u30a4\u30b9\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u306e\u5834\u5408(\u305d\u306e\u8981\u7d20\u578b\u306f\u69cb\u9020\u4f53\u3067\u306a\u304f\u3066\u3082OK\u3001\u30dd\u30a4\u30f3\u30bf\u3082OK)\u3001\n\u3000\u7d50\u679c\u306f\u305d\u306e\u30b9\u30e9\u30a4\u30b9\u306b **\u4ed8\u52a0** \u3055\u308c\u307e\u3059\u3002\n\nb. \u69cb\u9020\u4f53 or \u69cb\u9020\u4f53\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u306e\u5834\u5408\u3001\u7d50\u679c\u306f\u30e1\u30bd\u30c3\u30c9\u306e\u623b\u308a\u5024\u3068\u3057\u3066\u30dd\u30a4\u30f3\u30bf\u306e\n\u3000\u30b9\u30e9\u30a4\u30b9\u3067\u8fd4\u3055\u308c\u307e\u3059\u3002  \u5143\u306e\u69cb\u9020\u4f53(\u7b2c\u4e00\u30d1\u30e9\u30e1\u30fc\u30bf)\u306b\u306f\u5f71\u97ff\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \n\n```go:gorp\n    // \u30b9\u30e9\u30a4\u30b9\u3078\u306e\u30dd\u30a4\u30f3\u30bf\n    users  := []UserTbl{ {100,\"Bob\",44} }\n    dbmap.Select( &users,`SELECT * FROM user_tbl` )\n    fmt.Println( users )    // -->[{100 Bob 44} {1 Alice 22} {2 John 33}] \u4ed8\u52a0\n\n    // \u30b9\u30e9\u30a4\u30b9\u3078\u306e\u30dd\u30a4\u30f3\u30bf\n    ids  := []int64{100,200}\n    dbmap.Select( &ids,`SELECT id FROM user_tbl` )\n    fmt.Println( ids )      // -->[100 200 1 2] \u4ed8\u52a0\n\n    // \u69cb\u9020\u4f53\n    var usp2 []interface{}\n    usp2,_ = dbmap.Select( UserTbl{},`SELECT * FROM user_tbl` ) \n    fmt.Println( usp2 )            // --> [0xc0820058c0 0xc082005940]\n    fmt.Println( usp2[0],usp2[1] ) // --> &{1 Alice 22} &{2 John 33}\n\n    // \u69cb\u9020\u4f53\u3078\u306e\u30dd\u30a4\u30f3\u30bf\n    user := UserTbl{500,\"Mick\",11}\n    usp2,_ = dbmap.Select( &user,`SELECT * FROM user_tbl` ) \n    fmt.Println( usp2 )             // --> [0xc082084cc0 0xc082084d40]\n    fmt.Println( usp2[0],usp2[1] )  // --> &{1 Alice 22} &{2 John 33}\n    fmt.Println( user )             // -->[{500 Mick 11}] \u5909\u5316\u306a\u3057\n```\n\n+ \u5bfe\u8c61\u3068\u306a\u308b\u884c\u304c\uff11\u884c\u306e\u5834\u5408\u306f SelectOne( )\u306e\u7b2c\u4e00\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3001\u6c42\u3081\u308b\u5024\u304c\uff11\u3064\u306e int64 \u3084 string\u305d\u306e\u4ed6\u306e\u5834\u5408\u306f SelectInt( ),SelectStr( )\u3001\u305d\u306e\u4ed6\u306e\u623b\u308a\u5024\u3067\u30ab\u30e9\u30e0\u5024\u3092\u53d7\u3051\u53d6\u308c\u307e\u3059\u3002 \n\n```go:gorp\n    var user UserTbl                            // PostgreSQL\u3067\u306f  ? -> $1\n    dbmap.SelectOne( &user,`SELECT * FROM user_tbl WHERE id=?`,1 ) \n    fmt.Println( user )             // -->{1 Alice 22}\n\n```\n\n+ \u30af\u30a8\u30ea\u6587\u306b\u4ed5\u8fbc\u3080\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u306e\u62e1\u5f35\u3068\u3057\u3066\u3001 `\":id\"` \u306e\u5f62\u306e\u3001\u540d\u524d\u306b\u3088\u308b\u57cb\u3081\u8fbc\u307f\u65b9\u6cd5\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \n\n```go:gorp\n    // \u30de\u30c3\u30d7\u306b\u3088\u308b\u7f6e\u63db \n    var users4 []UserTbl\n    replMap := map[string]interface{}{ \"name\": \"Alice\", \"age\": 20 }\n    dbmap.Select( &users4, `SELECT * FROM user_tbl \n                            WHERE name = :name AND age > :age`, replMap )\n    fmt.Println( users4 )            // -->[{1 Alice 22}]\n\n    // \u69cb\u9020\u4f53\u306b\u3088\u308b\u7f6e\u63db\n    type DataStr struct {\n        UserName string\n        Age      int\n    }\n    users4  = []UserTbl{}\n    replStr := DataStr{ UserName:\"Alice\", Age: 20 }\n    dbmap.Select( &users4, `SELECT * FROM user_tbl WHERE name = :UserName \n                            AND age > :Age`, &replStr )\n    fmt.Println( users4 )            // -->[{1 Alice 22}]\n```\n\n\n\n### \uff12.\uff12.\uff12 gorp.Select( )\u306e\u53d7\u3051\u5074\u69cb\u9020\u4f53\u3068DB\u30c6\u30fc\u30d6\u30eb\u306e\u95a2\u4fc2\n\nSelect( )\u306e\u53d7\u3051\u5074\u69cb\u9020\u4f53\u3068DB\u30c6\u30fc\u30d6\u30eb\u306f\u76f4\u63a5\u306b\u306f\u95a2\u4fc2\u3042\u308a\u307e\u305b\u3093\u3002  \u4e8b\u524d\u306eAddTable\u767b\u9332\u304c\u306a\u304f\u3066\u3082\u52d5\u304d\u307e\u3059\u3002 DB\u304b\u3089\u30ea\u30fc\u30c9\u3057\u305f\u30ab\u30e9\u30e0\u540d\u3068\u4e00\u81f4\u3059\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u53d7\u3051\u5074\u69cb\u9020\u4f53\u304b\u3089\u691c\u7d22\u3055\u308c\u307e\u3059\u304c\u3001\u53d7\u3051\u5074\u69cb\u9020\u4f53\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u30bf\u30b0\u306b\u3088\u308b\u30ab\u30e9\u30e0\u540d\u6307\u5b9a(`db:\"xxx\"`)\u304c\u3042\u308b\u306a\u3089\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u305d\u306e\u540d\u524d\u3068\u3057\u3066\u6271\u308f\u308c\u3001\u30ab\u30e9\u30e0\u6307\u5b9a\u304c\u306a\u3044\u306a\u3089\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u540d\u524d\u306e\u307e\u307e\u6271\u308f\u308c\u307e\u3059\u3002\n\u306a\u304a\u3001\u3053\u3053\u3067\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u30fb\u30ab\u30e9\u30e0\u540d\u306f **\u5927\u5c0f\u6587\u5b57\u306e\u533a\u5225\u306f\u7121\u3044** \u307f\u305f\u3044\u3067\u3059(\u30bd\u30fc\u30b9\u3092\u30c1\u30e9\u898b\u3057\u305f\u9650\u308a\u3067\u306f\u5c0f\u6587\u5b57\u5909\u63db\u3057\u3066\u6bd4\u8f03\u3057\u3066\u3044\u308b\u3088\u3046\u3060\u3057\u3001\u72ed\u3044\u7bc4\u56f2\u3067\u306e\u5b9f\u9a13\u3067\u3082\u305d\u3046\u306a\u308a\u307e\u3059\u304c\u3001\u3042\u307e\u308a\u81ea\u4fe1\u306f\u306a\u3044\u3067\u3059)\u3002\n\ngenmai\u3068\u540c\u69d8\u3001\u6b21\u306e\u5236\u9650\u304c\u3042\u308a\u307e\u3059\n\n+ \u53d7\u3051\u5074\u69cb\u9020\u4f53\u306e\u5c0f\u6587\u5b57\u3067\u59cb\u307e\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u3067\u3001\u30ab\u30e9\u30e0\u5024\u3092\u53d7\u3051\u53d6\u308d\u3046\u3068\u3059\u308b\u3068panic\u3068\u306a\u308a\u307e\u3059\u3002\n\n+ \u53d7\u3051\u5074\u69cb\u9020\u4f53\u306b\u306f\u3001\u30e6\u30fc\u30b6\u304c\u5b9a\u7fa9\u3057\u305f\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u4ed8\u304d\u306e\u69cb\u9020\u4f53\u578b(\u57cb\u3081\u8fbc\u307f\u3067\u306a\u3044)\u304c\u3042\u3063\u3066\u3082\u304b\u307e\u3044\u307e\u305b\u3093\u304c\u3001\u30ab\u30e9\u30e0\u5024\u306f\u53d7\u3051\u53d6\u308c\u307e\u305b\u3093\u3002\n\n+ \u53d7\u3051\u5074\u69cb\u9020\u4f53\u3067\u306f\u3001\u30bf\u30b0\u306b\u3088\u308b\u975e\u30ab\u30e9\u30e0(`db:\"-\"`)\u6307\u5b9a\u306e\u3042\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u3067\u306f\u30ab\u30e9\u30e0\u5024\u306f\u53d7\u3051\u53d6\u308c\u307e\u305b\u3093\u3002 \n\n+ \u30ab\u30e9\u30e0\u540d\u306b\u5bfe\u5fdc\u3059\u308b\u53d7\u3051\u5074\u69cb\u9020\u4f53\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u307f\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u306f\u30a8\u30e9\u30fc\u304c\u8fd4\u308a\u307e\u3059\u3002 \n\n\n\n\n# \uff13\u7ae0 genmai\u306e\u62e1\u5f35\n\ngenmai\u3068gorp\u306e\u6700\u5927\u306e\u9055\u3044\u306f\u3001\u30af\u30a8\u30ea\u306b\u95a2\u6570\u5f62\u5f0f\u3092\u7528\u3044\u308b\u304b\u3001SQL\u6587\u3092\u4f7f\u3046\u304b\u306b\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002 genmai\u3067\u7c21\u5358\u306a\u5834\u5408\u306b\u306f\u95a2\u6570\u5f62\u5f0f\u3092\u4f7f\u3063\u3066\u3044\u3066\u3082\u3001\u8907\u96d1\u306a\u5834\u5408\u306f\u6a19\u6e96\u306edatabase/sql\u3092\u53d6\u308a\u51fa\u3057\u3066\u4f7f\u3048\u3070\u3044\u3044\u306e\u3067\u3059\u304c\u3001\u305d\u308c\u3067\u306f\u3001\u69cb\u9020\u4f53\u3068\u306e\u9023\u643a\u304c\u3068\u308c\u307e\u305b\u3093\u3002 \u305d\u3053\u3067 woremacx\u3055\u3093\u304c genmai\u3067SQL\u6587\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b SelectSql( )\u3092\u516c\u958b\u3057\u307e\u3057\u305f\u3002 (http://qiita.com/woremacx/items/ac3585d786f5f7e52318)\n\u79c1\u3082\u6c0f\u306b\u5023\u3063\u3066\u3001genmai\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5c11\u3057\u3044\u3058\u3063\u3066\u3001SelectSql2( )\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002  \u5177\u4f53\u4f8b\u306f\uff14\u7ae0 \u53c2\u7167\u3002 \n\n\u306a\u304a\u3001\u672c\u62e1\u5f35\u306f\u3001\u7c21\u5358\u306a\u3053\u3068\u306f\u7c21\u5358\u306b\u3067\u304d\u308b\u3088\u3046\u306b\u3068\u8003\u3048\u305f\u3067\u3042\u308d\u3046genmai\u4f5c\u8005\u306e\u610f\u306b\u53cd\u3059\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3053\u3068\u3092\u8a18\u3057\u3066\u304a\u304d\u307e\u3059\u3002 \n\n\n\n## \uff13.\uff11 SelectSql2( )\n\ngorp\u3068\u540c\u69d8\u306e\u30af\u30a8\u30eaSQL\u6587\u65b9\u5f0f\u3067\u3059\u3002 \n\u53d7\u3051\u5074\u3092\u8907\u6570\u6307\u5b9a\u3067\u304d\u3001\u307e\u305f AS \u3092\u4f7f\u3063\u3066\u30ab\u30e9\u30e0\u5024\u3092\u67d4\u8edf\u306b\u51e6\u7406\u3067\u304d\u307e\u3059\u3002 \u4f7f\u3044\u65b9\u306f\uff14\u7ae0\u53c2\u7167\n\n```go:\u62e1\u5f35genmai\n    func (db *DB) SelectSql2( args ...interface{} ) error\n\n    \u4f8b\uff1a \n        err = db.SelectSql2( &users,&camps, \n                    `SELECT * FROM user_tbl JOIN campany_tbl\n                     ON user_tbl.campany_id = campany_tbl.id \n                     WHERE age > ? `,20 )       // PostgreSQL\u3067\u306f  ? -> $1\n```\n\n\uff11. \u53d7\u3051\u5074\u30c7\u30fc\u30bf\u306e\u6307\u5b9a\u69d8\u5f0f\u306f\u6b21\u306e\u3069\u308c\u304b\uff11\u3064\u3067\u6df7\u5728\u306f\u4e0d\u53ef\u3002 \n\na. \u30b9\u30e9\u30a4\u30b9\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3067\u3001\u305d\u306e\u8981\u7d20\u578b\u306f\u69cb\u9020\u4f53(\u30dd\u30a4\u30f3\u30bf\u4e0d\u53ef)\u3002 \u8907\u6570\u6307\u5b9a\u53ef\u3002\nb. \u30b9\u30e9\u30a4\u30b9\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3067\u3001\u305d\u306e\u8981\u7d20\u578b\u306f\u975e\u69cb\u9020\u4f53(\u30dd\u30a4\u30f3\u30bf\u4e0d\u53ef)\u3002 \u8907\u6570\u6307\u5b9a\u53ef\n\u3000 \u3067\u3059\u304c\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u6307\u5b9a\u9806\u306b\u30ab\u30e9\u30e0\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u578b\u4e0d\u4e00\u81f4\u6642\u306e\u52d5\u4f5c\u306f\u4e0d\u5b9a\u3002\nc. int,string\u7b49(\u975e\u69cb\u9020\u4f53)\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3002 \u8907\u6570\u6307\u5b9a\u53ef\u3067\u3059\u304c\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u6307\u5b9a\u9806\n\u3000 \u306b\u30ab\u30e9\u30e0\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 \u578b\u4e0d\u4e00\u81f4\u6642\u306e\u52d5\u4f5c\u306f\u4e0d\u5b9a\u3002\n\na. \u3067\u306f\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u3068\u306f\u7570\u306a\u308b(\u53d7\u3051\u5074)\u69cb\u9020\u4f53\u3067\u5024\u3092\u53d7\u3051\u3068\u308c\u307e\u3059\u3002\n\u53d7\u3051\u53d6\u308a\u6642\u306b\u691c\u7d22\u3055\u308c\u308b\u540d\u79f0\u306f\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u306b\u6700\u5916\u306e\u69cb\u9020\u4f53\u540d(*1)\u3092\u524d\u7f6e\u3057\u305f\u3082\u306e\u3068\u3001\u3057\u306a\u3044\u3082\u306e\u306e\u4e21\u65b9\u3067\u3059\u3002 \u57cb\u3081\u8fbc\u307e\u308c\u305f(\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u306e\u306a\u3044)\u69cb\u9020\u4f53\u306e\u69cb\u9020\u4f53\u540d\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\n\n\u30ab\u30e9\u30e0\u5024\u3092\u53d7\u3051\u53d6\u308b\u3068\u304d\u306e\u691c\u7d22\u5bfe\u8c61\u540d\u306f\u3001\u3064\u304e\u306e\uff14\u30d1\u30bf\u30fc\u30f3\u3068\u306a\u308a\u307e\u3059\u3002 \n\n    `\u6700\u5916\u306e\u69cb\u9020\u4f53\u540d(*1).\u975e\u69cb\u9020\u4f53\u8981\u7d20\u30d5\u30a3\u30fc\u30eb\u30c9\u540d(*2)`\n                       `\u975e\u69cb\u9020\u4f53\u8981\u7d20\u30d5\u30a3\u30fc\u30eb\u30c9\u540d(*2)`\n    `\u6700\u5916\u306e\u69cb\u9020\u4f53\u540d(*1).\u57cb\u3081\u8fbc\u307e\u308c\u305f\u69cb\u9020\u4f53\u5185\u306e\u975e\u69cb\u9020\u4f53\u8981\u7d20\u30d5\u30a3\u30fc\u30eb\u30c9\u540d(*2)`\n                       `\u57cb\u3081\u8fbc\u307e\u308c\u305f\u69cb\u9020\u4f53\u5185\u306e\u975e\u69cb\u9020\u4f53\u8981\u7d20\u30d5\u30a3\u30fc\u30eb\u30c9\u540d(*2)`\n\n\u4f8b\uff1a\n\n            UserB struct { ValB int ; }\n            UserA struct { ValA int ; UserB }   // \u53d7\u3051\u5074\u69cb\u9020\u4f53\n          \n\u306e\u3068\u304d\u3001UserA \u3092\u53d7\u3051\u5074\u69cb\u9020\u4f53\u306b\u3059\u308b\u3068\n\n            val_a\n            user_a.val_a\n            val_b\n            user_a.val_b\n\n\u304c\u691c\u7d22\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\u3002 \n\n(\uff0a1) TableNamer\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308c\u3070\u305d\u308c\u3067\u5b9a\u7fa9\u3057\u305f\u30c6\u30fc\u30d6\u30eb\u540d\u3001\n\u3000\u3000\u3000\u5b9f\u88c5\u3057\u3066\u3044\u306a\u3051\u308c\u3070snake_case\u5909\u63db\u3055\u308c\u305f\u540d\u79f0\n(\uff0a2) \u30bf\u30b0\u306b\u3088\u308b\u30ab\u30e9\u30e0\u540d\u6307\u5b9a\u304c\u3042\u308c\u3070\u305d\u306e\u540d\u79f0\u3001\u306a\u3051\u308c\u3070snake_case\u5909\u63db\n\u3000\u3000\u3000\u3055\u308c\u305f\u540d\u79f0\n\n\u975e\u30ab\u30e9\u30e0\u5316(`db:\"-\"`)\u306f\u7121\u52b9(\u3064\u307e\u308a\u3042\u3063\u3066\u3082\u691c\u7d22\u3055\u308c\u308b)\u3002 \n\u5c0f\u6587\u5b57\u3067\u59cb\u307e\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30ab\u30e9\u30e0\u5024\u306e\u53d7\u3051\u53d6\u308a\u306b\u6307\u5b9a\u3067\u304d\u307e\u305b\u3093\u3002 \n\n\n\uff12. \u53d7\u3051\u53d6\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u5834\u5408\u3001\u3042\u308b\u3044\u306f\u53d7\u3051\u53d6\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u5019\u88dc\u304c\u8907\u6570\u898b\u3064\u304b\u3063\u305f\u5834\u5408\u306f\u3001\u30a8\u30e9\u30fc\u304c\u8fd4\u308a\u307e\u3059\u3002 \n\n\n\n\n## \uff13.\uff12 ReplaceQueryKey( )\n\n\u30af\u30a8\u30ea\u306a\u3069\u306e\u6587\u5b57\u5217\u306b\u5bfe\u3057\u3066\u3001`\"{key}\"` \u306e\u5f62\u3092\u3001\u6587\u5b57\u5217\u7f6e\u63db\u3067\u304d\u307e\u3059\u3002 \n\n```go:\u62e1\u5f35genmai\n    func (db *DB) ReplaceQueryKey( query string, quote bool,\n                                 args ...interface{} ) (string,error)\n```\n\n\u6e21\u3055\u308c\u305fquery\u304b\u3089 `\"{\"+key+\"}\"` \u3092\u5358\u7d14\u306b\u63a2\u3057\u3001\u3042\u308c\u3070\u3059\u3079\u3066\u7f6e\u304d\u63db\u3048\u3001\u306a\u3051\u308c\u3070\u4f55\u3082\u3057\u307e\u305b\u3093\u3002 quote\u304ctrue\u306a\u3089\u7f6e\u63db\u6587\u5b57\u5217\u3092quote\u3057\u307e\u3059\u3002 \n\u5b89\u6613\u30fb\u5358\u7d14\u306a\u6587\u5b57\u5217\u7f6e\u63db\u3067\u3042\u3063\u3066\u3001gorp\u306e\u3088\u3046\u306a **\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u3078\u306e\u5c55\u958b\u3067\u306f\u3042\u308a\u307e\u305b\u3093**\u3002  \u307e\u305f\u3001\u305d\u308c\u304c\u6587\u5b57\u5217\u30c7\u30fc\u30bf\u4e2d\u304b\u3068\u304b\u3001\u305d\u306e\u4ed6\u306e\u5224\u5225\u3082\u4e00\u5207\u3057\u307e\u305b\u3093\u3002 \n\n\uff11. string\u3092 key\u3068\u3057\u305f\u3001map \u3042\u308b\u3044\u306f(\u30e6\u30fc\u30b6\u5b9a\u7fa9\u306e)\u69cb\u9020\u4f53\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u6e21\n\u3000\u3057\u3066\u304f\u3060\u3055\u3044\u3002  map\u3067\u3082\u69cb\u9020\u4f53\u3067\u3082\u3001string\u578b\u3001\u307e\u305f\u306f complex\u4ee5\u5916\u306e\u6570\u5024\u578b\n\u3000\u306e\u307f\u8a2d\u5b9a\u53ef\u80fd\u3067\u3059(\u4ed6\u306f\u7121\u8996)\u3002 \n\n\uff12. \u69cb\u9020\u4f53\u306f\u57cb\u3081\u8fbc\u307f(\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u306a\u3057)\u306e\u307f\u53ef\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u306fcolumn\u6307\u5b9a\u6709\u52b9\n\u3000\u3067\u3059\u304c\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f snake_case\u5909\u63db\u3055\u308c\u307e\u3059\u3002\n\n\n```go:\u62e1\u5f35genmai\n    // \u30de\u30c3\u30d7\u306b\u3088\u308b\u7f6e\u63db\n    repls := map[string]interface{}{ \n                \"tbl\": \"`user_tbl`\", \"age\": \"11,22\" } \n\n    query,_ := db.ReplaceQueryKey( `SELECT * FROM {tbl} \n                                    WHERE age IN({age})`, \n                                    false,repls )\n    fmt.Println( query )// --> \"SELECT * FROM `user_tbl` WHERE age IN(11,22)\"\n\n    // \u69cb\u9020\u4f53\u306b\u3088\u308b\u7f6e\u63db\n    type AgeInt  int\n    type DataStr struct {\n        UserName string     `column:\"u_name\"`   // \"{u_name}\" \u3092\u7f6e\u63db\n        UserAge  AgeInt                         // \"{user_age}\" \u3092\u7f6e\u63db\n    }\n    data := DataStr{ UserName:\"Alice\", UserAge: 31 }\n    query,_ = db.ReplaceQueryKey( `SELECT * FROM user_tbl \n                    WHERE name = {u_name} AND age < {user_age}`, \n                    true,&data )\n    fmt.Println( query )    // --> SELECT * FROM user_tbl\n                            //          WHERE name = \"Alice\" AND age < 31\n        \u30fb\u30fb\u30fb\n    db.SelectSql2( &users,query )\n```\n\n\u672c\u95a2\u6570\u3092 sql\u76f4\u63a5\u547c\u51fa\u3057\u7b49\u3067 prepare\u3092\u307e\u305f\u3044\u3067\u5229\u7528\u3059\u308b\u3088\u3046\u306a\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 genmai\u3067\u306f prepare\u3092\u5916\u306b\u898b\u305b\u3066\u3044\u307e\u305b\u3093\u3002 \n\n\n\n## \uff13.\uff13 Select2( )\n\nSelectSql2( )\u3068\u306a\u308b\u3079\u304f\u6574\u5408\u304c\u3068\u308c\u308b\u3088\u3046\u306b\u3001Select( )\u3082\u5c11\u3057\u3060\u3051\u5909\u3048\u3066\u307f\u307e\u3057\u305f\u3002 \n\n```go:\u62e1\u5f35genmai\n    func (db *DB) Select2( output interface{}, \n                            args ...interface{} ) error\n```\n\n\uff11. \u30d1\u30e9\u30e1\u30fc\u30bf\u306bFrom( )\u3067\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\n\u3000\u3000\u30aa\u30ea\u30b8\u30ca\u30eb\u306e genmai.Select( )\u3068\u5168\u304f\u540c\u3058\u3067\u3059\u3002 \n\n\uff12. \u30d1\u30e9\u30e1\u30fc\u30bf\u306bFrom( )\u3067\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\n\n- \u5148\u982d\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u7fa4\u306f\u3001SelectSql2( )\u3068\u540c\u3058\u3067\u53d7\u3051\u3092\u8907\u6570\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\n- SELECT\u3059\u308b\u30ab\u30e9\u30e0\u6307\u5b9a\u3060\u3051\u306f\u3001ALIAS\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\n- SELECT\u3067\u30ab\u30e9\u30e0\u3092\u6307\u5b9a\u3059\u308b\u969b\u306f\u57fa\u672c\u7684\u306b `\"user_tbl.*\"` \u3084`\"user_tbl.column\"` \u306e\u3088\u3046\u306b\u30c6\u30fc\u30d6\u30eb\u540d\u3092\u660e\u793a\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u3053\u306e\u69d8\u5f0f\u306f \u30aa\u30ea\u30b8\u30ca\u30eb\u306e Select()\u3068\u306f\u7570\u306a\u308a\u307e\u3059\u3002 \u5358\u7d14\u306a`\"*\"`\u306e\u610f\u5473\u306f \u30aa\u30ea\u30b8\u30ca\u30ebSelect()\u3068\u306f\u7570\u306a\u308a\u307e\u3059\u3002\n\n\uff13. Join( ),Where( ),On( )\u305d\u306e\u4ed6\u306f\u3001\u30aa\u30ea\u30b8\u30ca\u30ebgenmai\u3068\u5168\u304f\u540c\u3058\u3067\u3059\u3002 \n\u8907\u6570\u30c6\u30fc\u30d6\u30eb\u304c\u95a2\u4e0e\u3059\u308b\u6642\u306f\u30ab\u30e9\u30e0\u6307\u5b9a\u304c\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002  \u554f\u984c\u306e\u3042\u308b\u5834\u5408\u3084\u7d30\u304b\u3044\u3053\u3068\u3092\u3055\u308c\u308b\u65b9\u306f SelectSql2( )\u3092\u3054\u5229\u7528\u304f\u3060\u3055\u3044\u3002 \nsquirrel \u3084\u3001MySQL\u306a\u3089 sqlbuilder\u306e\u3088\u3046\u306a\u30af\u30a8\u30ea\u30d3\u30eb\u30c0\u30fc\u306e\u5229\u7528\u3082\u3042\u308a\u3068\u601d\u3044\u307e\u3059(\u3088\u304f\u77e5\u308a\u307e\u305b\u3093\u304c)\n\n\n\n## \uff13.\uff14 ColumnAlias2( )\n\n\n```go\n    func (db *DB) ColumnAlias2( pref bool,tbl interface{} ) []string \n```\n\n\u6307\u5b9a\u3055\u308c\u305f\u69cb\u9020\u4f53\u3092\u53d7\u3051\u5074\u69cb\u9020\u4f53\u306b\u898b\u7acb\u3066\u3066\u3001DB\u4e0a\u306e\u30ab\u30e9\u30e0\u3068\u53d7\u3051\u5074\u3067\u691c\u7d22\u3055\u308c\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u7d10\u3065\u3051\u308b ALIAS\u306e\u30b9\u30e9\u30a4\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002 \u4f7f\u3044\u65b9\u306f \uff14.\uff11\u53c2\u7167\n\n\uff11. \u53d7\u3051\u5074\u69cb\u9020\u4f53\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u6e21\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u6307\u5b9a\u3055\u308c\u305f\u69cb\u9020\u4f53\u306e\u5404\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u3064\u3044\u3066\u3001pref\u304c true\u304b\u3001\u3042\u308b\u3044\u306f\u4ed6\u306e\u69cb\u9020\u4f53\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3068\u91cd\u8907\u3059\u308b\u3068\u304d\u306f\n\n        \"\u6700\u5916\u69cb\u9020\u4f53\u540d(*1)\".\"\u30d5\u30a3\u30fc\u30eb\u30c9\u540d(*2)\" AS \"\u6700\u5916\u69cb\u9020\u4f53\u540d(*1).\u30d5\u30a3\u30fc\u30eb\u30c9\u540d(*2)\"\n\npref \u304c false \u304b\u3064\u91cd\u8907\u3057\u306a\u3044\u306a\u3089\n\n        \"\u30d5\u30a3\u30fc\u30eb\u30c9\u540d(*2)\" AS \"\u30d5\u30a3\u30fc\u30eb\u30c9\u540d(*2)\" \u3000\n\n\u3092\u51fa\u529b\u3057\u307e\u3059\u3002 \n\n(\uff0a1) TableNamer\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308c\u3070\u305d\u308c\u3067\u5b9a\u7fa9\u3057\u305f\u30c6\u30fc\u30d6\u30eb\u540d\u3001\n\u3000\u3000 \u5b9f\u88c5\u3057\u3066\u3044\u306a\u3051\u308c\u3070snake_case\u5909\u63db\u3055\u308c\u305f\u540d\u79f0\n(\uff0a2) \u30bf\u30b0\u306b\u3088\u308b\u30ab\u30e9\u30e0\u540d\u6307\u5b9a\u304c\u3042\u308c\u3070\u305d\u306e\u540d\u79f0\u3001\u306a\u3051\u308c\u3070snake_case\u5909\u63db\n\u3000\u3000\u3055\u308c\u305f\u540d\u79f0\n\n\n\uff12. \u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u6301\u305f\u306a\u3044\u57cb\u3081\u8fbc\u307e\u308c\u305f\u69cb\u9020\u4f53\u306e\u69cb\u9020\u4f53\u540d\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002 \n\n\uff13. \u5c0f\u6587\u5b57\u3067\u59cb\u307e\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u3001\u975e\u30ab\u30e9\u30e0(`db:\"-\"`)\u6307\u5b9a\u306e\u3042\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u3001\n\u3000\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u6301\u3064\u30cd\u30b9\u30c8\u3057\u305f\u69cb\u9020\u4f53\u7b49(time.Time\u3084sql.NullXxxx\u3092\u9664\u304f)\u306f\u51fa\u529b\u3057\u307e\u305b\u3093\u3002 \n\n\n```go:\u62e1\u5f35genmai\n        User  struct { Val int ; }\n        UserA struct { ValA int ; ValX int ; User }\n        UserB struct { ValB int ; ValX int : User }\n\n        clmAs,_ := db.ColumnAlias2( false,&UserDataA{},&UserDataB{} )\n        fmt.Prinfln( clmAs )//-->[ `val_a` AS `val_a`\n                            //     `user_a`.`val_x` AS `user_a.val_x`\n                            //     `user_a`.`val` AS `user_a.val`\n                            //     `val_b` AS `val_b`\n                            //     `user_b`.`val_x` AS `user_b.val_x`\n                            //     `user_b`.`val` AS `user_b.val` ] (\u7de8\u96c6\u3042\u308a)\n```\n\n\n\n# \uff14\u7ae0 JOIN\n\ngenmai/gorp\u3069\u3061\u3089\u3082JOIN\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044/\u4f7f\u3048\u306a\u3044\u3068(\u6614\u306f)\u8a00\u308f\u308c\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u6c7a\u3057\u3066\u305d\u3046\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u3044\u3067\u3059\u3002 \n\n- \u672c\u7ae0\u3067\u306e\u8ab2\u984c\u306b\u3064\u3044\u3066\u306f\u79c1\u306e\u8a66\u3057\u305f\u7bc4\u56f2\u3067\u306f\u3001genmai\u30aa\u30ea\u30b8\u30ca\u30eb\u306e Join\u51e6\u7406(LeftJoin\u3067\u306f\u306a\u3044)\u3067\u306f\u3001From()\u3067\u6307\u5b9a\u3057\u305f\u30c6\u30fc\u30d6\u30eb\u540d\u304c SELECT\u30ab\u30e9\u30e0\u306e\u524d\u306b\u524d\u7f6e\u3055\u308c\u308b\u305f\u3081\u3001Join()\u3059\u308b\u30c6\u30fc\u30d6\u30eb\u306e\u30ab\u30e9\u30e0\u3092\u6307\u5b9a\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002 \u307e\u305f\u3001SELECT\u3067 `\"*\"` \u3092\u6307\u5b9a\u3057\u305f\u6642\u306f\u3001 Join\u3067\u3082 LeftJoin \u3067\u3082\u3000From\u30c6\u30fc\u30d6\u30eb\u306e\u30ab\u30e9\u30e0\u5024\u3057\u304b\u53d6\u5f97\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f(2016-05\u6642\u70b9)\u3002 \u4ee5\u964d\u3067\u306f\u3001\u62e1\u5f35genmai\u306b\u3064\u3044\u3066\u8a71\u3092\u9032\u3081\u307e\u3059\u3002 \n\n- \u3053\u3053\u3067\u306f\u3001\u305d\u308c\u305e\u308c\u306e\u8ab2\u984c\u306b\u5bfe\u3057\u3066\u7c21\u6613\u306a\uff11\u65b9\u6cd5\u3092\u3042\u3052\u305f\u3060\u3051\u3067\u3059\u3002 \u4ed6\u306b\u3082\u3044\u308d\u3044\u308d\u306a\u3084\u308a\u65b9\u3001\u4f8b\u3048\u3070\u30d5\u30c3\u30af\u30e1\u30bd\u30c3\u30c9\u306e\u5229\u7528\u7b49\u3082\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002  \n\n- \u30bd\u30fc\u30b9\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u89e3\u6790\u3057\u3066\u30e6\u30fc\u30b6\u304c\u76f4\u63a5\u5b9a\u7fa9\u3057\u3066\u3044\u306a\u3044\u69cb\u9020\u4f53\u3084\u30d8\u30eb\u30d1\u30fc\u95a2\u6570\u3092\u4f5c\u6210\u3059\u308b\u3088\u3046\u306a\u3053\u3068\u306f\u8003\u3048\u3066\u307e\u305b\u3093\u30fb\u30fb\u30fb\u305d\u3046\u3044\u3063\u305f\u65b9\u5f0f\u306e\u307b\u3046\u304c\u3044\u3044\u6c17\u3082\u3057\u307e\u3059\u304c\u3002  \n\n- \u3061\u3087\u3063\u3068\u9577\u304f\u306a\u308a\u307e\u3059\u304c\u3001\uff14.\uff11.\uff11\u3001\uff14.\uff12.\uff11 \u306b\u5f53\u65b9\u306e\u74b0\u5883(\u30ed\u30fc\u30ab\u30eb)\u3067\u306e\u7c21\u6613\u30d7\u30ed\u30b0\u30e9\u30e0\u4f8b\u3092\u3042\u307e\u308a\u7701\u7565\u305b\u305a\u306b\u8a18\u8f09\u3057\u307e\u3057\u305f\u3002\n\n\n## \uff14.\uff11 \u62e1\u5f35 genmai\n\n\u30e1\u30a4\u30f3\u306eDB\u30c6\u30fc\u30d6\u30eb\uff0bJOIN\u3059\u308bDB\u30c6\u30fc\u30d6\u30eb\u306e\u4e00\u90e8\u307e\u305f\u306f\u5168\u30ab\u30e9\u30e0\u5024\u306e\u53d6\u5f97\u65b9\u6cd5\u3092\u8003\u3048\u3066\u307f\u307e\u3059\u3002 \n\n\n### \uff14.\uff11.\uff11 \u65b0\u898f\u306e\u53d7\u3051\u5074\u69cb\u9020\u4f53\u3067\u3046\u3051\u308b\n\n\u5fc5\u8981\u306a\u30ab\u30e9\u30e0\u304c\u5c11\u306a\u3044\u3068\u304d\u3084\u4f59\u8a08\u306a\u540d\u524d\u3092\u51fa\u3057\u305f\u304f\u306a\u3044\u6642\u306f\u3001\u53d7\u3051\u5074\u69cb\u9020\u4f53\u3092\u5fc5\u8981\u306b\u3042\u308f\u305b\u3066\u5b9a\u7fa9\u3059\u308b\u306e\u304c\u7c21\u5358\u3067\u3057\u3087\u3046\u3002 \u30ab\u30e9\u30e0\u540d\u306b\u91cd\u8907\u304c\u3042\u308b\u5834\u5408\u306f AS\u3092\u4f7f\u3063\u3066\u632f\u308a\u5206\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \n\n```go:\u62e1\u5f35genmai\npackage main\nimport (\n    _ \"database/sql\"\n      \"fmt\"\n      \"os\"\n    _ \"time\"\n    _  \"strings\"\n//  _ \"github.com/mattn/go-sqlite3\"\n    _ \"github.com/go-sql-driver/mysql\"\n//  _ \"github.com/lib/pq\"\n      \"github.com/naoina/genmai\"\n)\ntype UserTbl struct {\n    Id          int64   `db:\"pk\"`\n    Name        string              // \u91cd\u8907\n    Age         int\n    CampanyId   int64\n}\ntype CampanyTbl struct {            // \u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\n    Id          int64   `db:\"pk\"`\n    Name        string              // \u91cd\u8907\n}\ntype UserData struct {              // \u53d7\u3051\u5074\u69cb\u9020\u4f53\n    Name        string              // <- user_tbl.name\n    Age         int                 // <- user_tbl.age\n    CampanyName string              // <- campany_tbl.name\n}\n//---------------------------------------------------------------------\nfunc main() {\n\n    db,err := genmai.New( &genmai.MySQLDialect{},\"user:password@/test?parseTime=true\" )\n    //db,err := genmai.New( &genmai.SQLite3Dialect{}, \":memory:\")\n    //db,err := genmai.New( &genmai.PostgresDialect{}, \n    //      \"user=postgres password=postgresql host=localhost dbname=test sslmode=disable\" )\n    if err != nil { fmt.Println( err ) }\n\n    defer db.Close()\n    db.SetLogOutput( os.Stderr )\n    err = db.SetLogFormat( `--{{.time.Format \"15:04:05\"}}--{{.query}}` )\n\n    err = db.DropTable( &UserTbl{} )        // DB\u30c6\u30fc\u30d6\u30eb\u524a\u9664\n    err = db.DropTable( &CampanyTbl{} )     // DB\u30c6\u30fc\u30d6\u30eb\u524a\u9664\n    err = db.CreateTable( &UserTbl{} )      // DB\u30c6\u30fc\u30d6\u30eb\u524a\u9664\n    err = db.CreateTable( &CampanyTbl{} )   // DB\u30c6\u30fc\u30d6\u30eb\u524a\u9664\n    if err != nil { fmt.Println( err ) }\n\n    obj1 := CampanyTbl{ Name: \"camp-1\" }; _,err = db.Insert( &obj1 );\n    obj2 := CampanyTbl{ Name: \"camp-2\" }; _,err = db.Insert( &obj2 );\n    obj3 := CampanyTbl{ Name: \"camp-3\" }; _,err = db.Insert( &obj3 );\n\n    _,err = db.Insert( &UserTbl{ Name: \"Alice1\", Age:11, CampanyId: obj1.Id })\n    _,err = db.Insert( &UserTbl{ Name: \"Bob2\"  , Age:22, CampanyId: obj1.Id })\n    _,err = db.Insert( &UserTbl{ Name: \"John3\" , Age:33, CampanyId: obj3.Id })\n    if err != nil { fmt.Println( err ) }\n\n    var data []UserData\n    err = db.SelectSql2( &data,`SELECT  user_tbl.name AS name , \n                                        age ,\n                                        campany_tbl.name AS campany_name \n                        FROM user_tbl JOIN campany_tbl \n                        ON user_tbl.campany_id = campany_tbl.id ` )\n    if err != nil { fmt.Println( err ) }\n    fmt.Println( data )     // --> [{Alice1 11 camp-1} \n                            //      {Bob2 22 camp-1} \n                            //      {John3 33 camp-3}]\n\n    err = db.Select2( &data, []string{ \n                            \"user_tbl.name AS name\" , \n                            \"age\" ,\n                            \"campany_tbl.name AS campany_name\" } ,\n                    db.From( &UserTbl{} ),\n                    db.Join( &CampanyTbl{} ).On( \"campany_id\",\"=\",\"id\" ))\n}\n```\n\nAS\u53e5\u306e\u624b\u66f8\u304d\u306f\u9593\u9055\u3044\u306e\u3082\u3068\u3067\u3059\u304c\u3001\u6b21\u306e\u3088\u3046\u306b\u53d7\u3051\u5074\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u691c\u7d22\u5bfe\u8c61\u540d\u3092\u30bf\u30b0\u30ab\u30e9\u30e0\u6307\u5b9a\u3059\u308c\u3070\u3001\uff13\u7ae0 ColumnAlias2( )\u3092\u4f7f\u3063\u3066\u78ba\u5b9f\u306b\u51e6\u7406\u3067\u304d\u307e\u3059\u3002 \n\n```go:\u62e1\u5f35genmai\n    type UserData2 struct {             // \u53d7\u3051\u5074\u5c02\u7528\u69cb\u9020\u4f53(\u975e\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53)\n        Name        string  `column:\"user_tbl.name\"`\n        Age         int     `column:\"user_tbl.age\"`     // \u91cd\u8907\u3057\u306a\u3044\u5834\u5408\u3082\u6307\u5b9a\u306e\u3053\u3068\n        CampanyName string  `column:\"campany_tbl.name\"`\n    }\n    clmAs,_ = db.ColumnAlias2( false,&UserData2{} )\n\n    var data2 []UserData2\n    db.SelectSql2( &data2,`SELECT ` + strings.Join( clmAs,\", \" ) +\n                          ` FROM user_tbl JOIN campany_tbl \n                           ON user_tbl.campany_id = campany_tbl.id` )\n\n    db.Select2( &data2, clmAs ,db.From( &UserTbl{} ),\n                         db.Join( &CampanyTbl{} ).On( \"campany_id\",\"=\",\"id\" ))\n```\n\n\u4ed6\u306b\u3001\u3084\u3084\u30c8\u30ea\u30c3\u30ad\u30fc\u3067\u304a\u52e7\u3081\u3057\u307e\u305b\u3093\u304c\u3001\u53d7\u3051\u5074\u69cb\u9020\u4f53\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u975e\u30ab\u30e9\u30e0\u5316(`db:\"-\"`)\u304c\u7121\u52b9\u3068\u306a\u308b(\u3064\u307e\u308a\u691c\u7d22\u3055\u308c\u308b)\u3053\u3068\u3092\u5229\u7528\u3057\u3066\u3001\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u306e\u4e2d\u306b\u53d6\u5f97\u3057\u305f\u3044\u4ed6\u30c6\u30fc\u30d6\u30eb\u306e\u30ab\u30e9\u30e0\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u6f5c\u308a\u8fbc\u307e\u305b\u308b\u65b9\u6cd5\u3082\u3042\u308a\u307e\u3059(Select2( )\u3067\u306fFrom( )\u6307\u5b9a\u8981)\u3002 \n\n```go:\u62e1\u5f35genmai\n    type UserTbl struct {           // \u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\n        Id          int64   `db:\"pk\"`\n        Name        string\n        Age         int64\n        CampanyId   int64\n        CampanyName string  `db:\"-\"` // \u975e\u30ab\u30e9\u30e0 <-- \u5225\u30c6\u30fc\u30d6\u30eb\u306e\u30c7\u30fc\u30bf\u53d7\u3051\u53d6\u308a\n    }\n```\n\n\n\n### \uff14.\uff11.\uff12 \u30c7\u30fc\u30bf\u500b\u5225\u306b\u3046\u3051\u308b\n\n\u540c\u6642\u306b\u30ea\u30fc\u30c9\u3059\u308b\u30ab\u30e9\u30e0\u304c\u5c11\u306a\u3044\u3068\u304d\u306f\u3001\u30c7\u30fc\u30bf\u3092\u500b\u5225\u306b\u53d7\u3051\u308b\u306e\u304c\u7c21\u5358\u3067\u3059\u3002 \n\u30ab\u30e9\u30e0\u3068\u30c7\u30fc\u30bf\u306e\u6307\u5b9a\u9806\u306b\u6ce8\u610f\u9858\u3044\u307e\u3059\u3002 \u578b\u4e0d\u4e00\u81f4\u6642\u306e\u52d5\u4f5c\u306f\u4e0d\u5b9a\u3067\u3059\u3002 \n\n```go:\u62e1\u5f35genmai\n            \u30fb\u30fb\u30fb \n    var userNames []string\n    var ages      []int\n    var campNames []string\n\n    db.SelectSql2( &userNames,&ages,&campNames,`SELECT\n                            user_tbl.name , age ,campany_tbl.name \n                        FROM user_tbl JOIN campany_tbl \n                        ON user_tbl.campany_id = campany_tbl.id` )\n    fmt.Println( userNames )    // --> [Alice1 Bob2 John3]\n    fmt.Println( ages )         // --> [11 22 33]\n    fmt.Println( campNames )    // --> [camp-1 camp-1 camp-3]\n\n    db.Select2( &userNames,&ages,&campNames,[]string{ \n                            \"user_tbl.name AS name\" , \n                            \"age\" ,\n                            \"campany_tbl.name AS campany_name\" } ,\n                    db.From( &UserTbl{} ),\n                    db.Join( &CampanyTbl{} ).On( \"campany_id\",\"=\",\"id\" ))\n```\n\n\n### \uff14.\uff11.\uff13 \u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u3067\u3046\u3051\u308b\n\n\uff11. \u30ab\u30e9\u30e0\u540d\u306b\u91cd\u8907\u304c\u306a\u3044\u5834\u5408\n\n\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u3092\u305d\u306e\u307e\u307e\u4f7f\u3063\u3066\u30ab\u30e9\u30e0\u5024\u3092\u53d6\u5f97\u3059\u308b\u4e00\u756a\u7c21\u5358\u30fb\u78ba\u5b9f\u306a\u65b9\u6cd5\u306f\u3001\u540c\u6642\u306b\u30ea\u30fc\u30c9\u3059\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u3059\u3079\u3066\u7570\u306a\u308b\u540d\u524d\u306b\u3057\u3066\u3078\u305f\u306b\u5909\u540d\u305b\u305a(\u30c7\u30d5\u30a9\u30eb\u30c8\u306esnake_case\u5909\u63db\u306b\u4efb\u305b\u308b)\u3001\u305d\u308c\u3089\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u3092\uff11\u3064\u306e\u53d7\u3051\u5074\u69cb\u9020\u4f53\u306b\u57cb\u3081\u8fbc\u3080\u304b\u3001\u305d\u306e\u307e\u307e\u8907\u6570\u306e\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u3067\u3046\u3051\u308b\u65b9\u5f0f\u3067\u3059\u3002 \n\n```go:\u62e1\u5f35genmai\n    type UserTbl struct {\n        Id          int64   `db:\"pk\"`\n        Name        string\n        Age         int64\n        CampanyId   int64\n    }\n    type CampanyTbl struct {\n        Id          int64   `db:\"pk\"`\n        CampanyName string\n    }\n    type UserData struct {\n        UserTbl             // \u57cb\u3081\u8fbc\u307f\n        CampanyTbl          // \u57cb\u3081\u8fbc\u307f\n    }\n        \u30fb\u30fb\u30fb\n                                    // \uff11\u3064\u306e\u69cb\u9020\u4f53\u3067\u53d7\u3051\u308b\n    var data []UserData\n    db.SelectSql2( &data,`SELECT user_tbl.name,\n                                 user_tbl.age, \n                                 campany_tbl.campany_name\n                        FROM user_tbl JOIN campany_tbl \n                        ON user_tbl.campany_id = campany_tbl.id` )\n    fmt.Println( data )     // -->[ {{0 Alice1 11 0} {0 camp-1}} \n                            //      {{0 Bob2 22 0}   {0 camp-1}} \n                            //      {{0 John3 33 0}  {0 camp-3}}]\n\n    db.Select2( &data, []string{ \"user_tbl.name\",\n                                 \"user_tbl.age\", \n                                 \"campany_tbl.campany_name\" } ,\n                    db.From( &UserTbl{} ),\n                    db.Join( &CampanyTbl{} ).On( \"campany_id\",\"=\",\"id\" ))\n\n                                    // \u8907\u6570\u306e\u69cb\u9020\u4f53\u3067\u53d7\u3051\u308b\n    var users []UserTbl\n    var camps []CampanyTbl\n    db.SelectSql2( &users,&camps, `SELECT user_tbl.name,\n                                          user_tbl.age, \n                                          campany_tbl.campany_name\n                    FROM user_tbl JOIN campany_tbl\n                    ON user_tbl.campany_id = campany_tbl.id` )\n    fmt.Println( users ) // --> [{0 Alice1 11 0} {0 Bob2 22 0} {0 John3 33 0}]\n    fmt.Println( camps ) // --> [{0 camp-1}      {0 camp-1}    {0 camp-3}]\n\n    db.Select2( &users,&camps, []string{ \"user_tbl.name\",\n                                         \"user_tbl.age\", \n                                         \"campany_tbl.campany_name\" } ,\n                    db.From( &UserTbl{} ),\n                    db.Join( &CampanyTbl{} ).On( \"campany_id\",\"=\",\"id\" ))\n```\n\n\n\uff12. \u30ab\u30e9\u30e0\u540d\u306b\u91cd\u8907\u304c\u3042\u308b\u5834\u5408\n\n\u4e00\u822c\u7684\u306b\u306f\u3001\u30ab\u30e9\u30e0\u540d\u3084\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u306f\u91cd\u8907\u3059\u308b\u3067\u3057\u3087\u3046\u3002  \u3053\u306e\u5834\u5408\u306b\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\u306b\u306f\u3001\u5404\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u3092\u4e26\u3079\u3001AS\u3067\u632f\u308a\u5206\u3051\u307e\u3059\u3002 \n\n```go:\u62e1\u5f35genmai\n    type UserTbl struct {\n        Id          int64   `db:\"pk\"`\n        Name        string              // \u91cd\u8907\n        Age         int\n        CampanyId   int64\n    }\n    type CampanyTbl struct {\n        Id          int64   `db:\"pk\"`\n        Name        string              // \u91cd\u8907\n    }\n        \u30fb\u30fb\u30fb\n    var users []UserTbl\n    var camps []CampanyTbl\n                                                        // \u4e00\u90e8\u30ab\u30e9\u30e0\n    db.SelectSql2( &users,&camps ,`SELECT ` +\n                        `user_tbl.name AS \"user_tbl.name\", ` +\n                        `user_tbl.age  AS \"user_tbl.age\", ` +\n                        `campany_tbl.name AS \"campany_tbl.name\" ` +\n                    ` FROM user_tbl JOIN campany_tbl \n                    ON user_tbl.campany_id = campany_tbl.id` )\n    fmt.Println( users )// --> [{0 Alice1 11 0} {0 Bob2 22 0} {0 John3 33 0}]\n    fmt.Println( camps )// --> [{0 camp-1}      {0 camp-1}    {0 camp-3}]\n\n    db.Select2( &users,&camps, []string{ \n                        `user_tbl.name AS \"user_tbl.name\"`,\n                        `user_tbl.age  AS \"user_tbl.age\"`,\n                        `campany_tbl.name AS \"campany_tbl.name\"` },\n                    db.From( &UserTbl{} ),\n                    db.Join( &CampanyTbl{} ).On( \"campany_id\",\"=\",\"id\" ))\n```\n\n\n\u3082\u3057\u3001\u5168\u30ab\u30e9\u30e0\u3092\u53d7\u3051\u3066\u3082\u69cb\u308f\u306a\u3044\u306a\u3089\u3001\u30ab\u30e9\u30e0\u6307\u5b9a\u306f \uff13\u7ae0 ColumnAlias2( )\u3092\u4f7f\u3063\u3066\u6b21\u306e\u3088\u3046\u306b\u3067\u304d\u307e\u3059\u3002 \n\n```go:\u62e1\u5f35genmai\n                                                        // \u5168\u30ab\u30e9\u30e0\n    clmAs,_ = db.ColumnAlias2( true,&UserTbl{},&CampanyTbl{} )\n\n    db.SelectSql2( &users,&camps , \"SELECT \" + strings.Join( clmAs,\",\" ) + \n                        ` FROM user_tbl JOIN campany_tbl \n                        ON user_tbl.campany_id = campany_tbl.id` )\n\n    db.Select2( &users,&camps, clmAs ,db.From( &UserTbl{} ),\n                                 db.Join( &CampanyTbl{} ).\n                                 On( \"campany_id\",\"=\",\"id\" ))\n```\n\n\n\n## \uff14.\uff12 gorp\n\uff14.\uff11\u3068\u540c\u69d8\u306b\u3001\u30e1\u30a4\u30f3\u306eDB\u30c6\u30fc\u30d6\u30eb\uff0bJOIN\u3059\u308bDB\u30c6\u30fc\u30d6\u30eb\u306e\u4e00\u90e8\u307e\u305f\u306f\u5168\u30ab\u30e9\u30e0\u306e\u53d6\u5f97\u65b9\u6cd5\u3092\u8003\u3048\u3066\u307f\u307e\u3059\u3002\n\n\n### \uff14.\uff12.\uff11 \u65b0\u898f\u306e\u53d7\u3051\u5074\u69cb\u9020\u4f53\u3067\u3046\u3051\u308b\n\n\u5fc5\u8981\u306a\u30ab\u30e9\u30e0\u304c\u5c11\u306a\u3044\u3068\u304d\u3084\u4f59\u8a08\u306a\u540d\u524d\u3092\u51fa\u3057\u305f\u304f\u306a\u3044\u6642\u306f\u3001\u53d7\u3051\u5074\u69cb\u9020\u4f53\u3092\u5fc5\u8981\u306b\u3042\u308f\u305b\u3066\u5b9a\u7fa9\u3059\u308b\u306e\u304c\u7c21\u5358\u3067\u3057\u3087\u3046\u3002 \u30ab\u30e9\u30e0\u540d\u306b\u91cd\u8907\u304c\u3042\u308b\u5834\u5408\u306f AS\u3092\u4f7f\u3063\u3066\u632f\u308a\u5206\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \n\n```go:gorp\npackage main\nimport (\n      \"os\"\n      \"log\"\n      \"fmt\"\n    _  \"time\"\n    _ \"log\"\n//    _ \"github.com/mattn/go-sqlite3\"\n    _ \"github.com/go-sql-driver/mysql\"\n//    _ \"github.com/lib/pq\"\n      \"database/sql\"\n      \"github.com/go-gorp/gorp\"\n)\ntype UserTbl struct {\n    Id          int64   `db:\"id,primarykey,autoincrement\"` \n    Name        string  `db:\"name\"`            // \u91cd\u8907\n    Age         int     `db:\"age\"`\n    CampanyId   int64   `db:\"campany_id\"`\n}\ntype CampanyTbl struct {\n    Id          int64   `db:\"id,primarykey,autoincrement\"`\n    Name        string  `db:\"name\"`            // \u91cd\u8907\n}\ntype UserData struct {              // \u53d7\u3051\u5074\u69cb\u9020\u4f53\n    Name        string              // <- UserTbl.Name\n    Age         int                 // <- UserTbl.Age\n    CampanyName string              // <- CampanyTbl.Name\n}\n//---------------------------------------------------------------------\nfunc main() {\n\n    dialect := gorp.MySQLDialect{\"InnoDB\", \"UTF8\"}\n    dbm,err := sql.Open( \"mysql\", \"user:password@/test?parseTime=true\" )  // []byte -> time.Time\u5909\u63db\n    //dialect := gorp.PostgresDialect{}\n    //dbm,err := sql.Open( \"postgres\",\"user=postgres password=postgresql host=localhost dbname=test sslmode=disable\" )\n    //dialect := gorp.SqliteDialect{}\n    //dbm,err := sql.Open( \"sqlite3\", \":memory:\")\n    if err != nil { fmt.Println( err ) }\n\n    dbmap := &gorp.DbMap{Db: dbm, Dialect: dialect}\n    defer dbmap.Db.Close()\n    dbmap.TraceOn( \"[gorp]\",log.New( os.Stderr,\"\",log.Ltime ))\n\n    dbmap.AddTableWithName( UserTbl{},\"user_tbl\" )      // \u30c6\u30fc\u30d6\u30eb\u540d UserTbl -> user_tbl\n    dbmap.AddTableWithName( CampanyTbl{},\"campany_tbl\" )// \u30c6\u30fc\u30d6\u30eb\u540d CampanyTbl -> campany_tbl\n\n    err = dbmap.DropTablesIfExists()                // \u30c6\u30fc\u30d6\u30eb\u524a\u9664\n    if err != nil { fmt.Println( err ) }\n\n    err = dbmap.CreateTables()\n    if err != nil { fmt.Println( err ) }\n    \n    obj1 := CampanyTbl{ Name: \"camp-1\" }; err = dbmap.Insert( &obj1 );\n    obj2 := CampanyTbl{ Name: \"camp-2\" }; err = dbmap.Insert( &obj2 );\n    obj3 := CampanyTbl{ Name: \"camp-3\" }; err = dbmap.Insert( &obj3 );\n    if err != nil { fmt.Println( err ) }\n\n    err = dbmap.Insert( &UserTbl{ Name: \"Alice1\", Age:11, CampanyId: obj1.Id })\n    err = dbmap.Insert( &UserTbl{ Name: \"Bob2\"  , Age:22, CampanyId: obj1.Id })\n    err = dbmap.Insert( &UserTbl{ Name: \"John3\" , Age:33, CampanyId: obj3.Id })\n    if err != nil { fmt.Println( err ) }\n\n    var data []UserData\n    _,err = dbmap.Select( &data,`SELECT user_tbl.name AS \"Name\" ,\n                                        age AS \"Age\" ,\n                                        campany_tbl.name AS \"CampanyName\"\n                        FROM user_tbl JOIN campany_tbl \n                        ON user_tbl.campany_id = campany_tbl.id ` )\n    if err != nil { fmt.Println( err ) }\n    fmt.Println( data )     // --> [{Alice1 11 camp-1} \n                            //      {Bob2 22 camp-1} \n                            //      {John3 33 camp-3}]\n}\n```\n\ngenmai \uff14.\uff11.\uff11 \u306e\u6700\u5f8c\u3067\u3084\u3063\u305f\u3088\u3046\u306a\u3001\u5143\u306e\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u306b\u5225\u30c6\u30fc\u30d6\u30eb\u306e\u30ab\u30e9\u30e0\u3092\u6f5c\u307e\u305b\u308b\u624b\u306f\u4f7f\u3048\u307e\u305b\u3093\u3002  \u3057\u304b\u3057\u6b21\u306f\u6709\u52b9\u306a\u306e\u3067\u3001genmai.ColumnAlias2()\u3068\u540c\u3058\u3082\u306e\u3092\u81ea\u4f5c\u3059\u308c\u3070\u3001AS\u53e5\u3092\u624b\u66f8\u304d\u3057\u306a\u304f\u3066\u3082\u6e08\u307f\u307e\u3059\u3002 \n\n```go:gorp\n    type UserData2 struct {             // \u53d7\u3051\u5074\u5c02\u7528\u69cb\u9020\u4f53(\u975e\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53)\n        Name        string  `db:\"user_tbl.name\"`\n        Age         int     `db:\"user_tbl.age\"` \n        CampanyName string  `db:\"campany_tbl.name\"`\n    }\n    var data2 []UserData2\n    dbmap.Select( &data2,`SELECT ` + `user_tbl.name AS \"user_tbl.name\" , ` +\n                                     `user_tbl.age AS \"user_tbl.age\" ,` +\n                                     `campany_tbl.name AS \"campany_tbl.name\" ` +\n                        ` FROM user_tbl JOIN campany_tbl \n                          ON user_tbl.campany_id = campany_tbl.id` )\n    fmt.Println( data2 )    // --> \u4e0a\u8a18\u3068\u540c\u3058\n```\n\n\n\n### \uff14.\uff12.\uff12 \u30c7\u30fc\u30bf\u500b\u5225\u306b\u3046\u3051\u308b\n\n\u5fc5\u8981\u306a\u30ab\u30e9\u30e0\u304c\uff11\u3064\u306e\u3068\u304d\u306b\u306f\u3001SelectOne( )\u3067\u3082\u53ef\u80fd\u3067\u3059\u304c\u3001\u62e1\u5f35genmai\u306e\u3088\u3046\u306a\u8907\u6570\u6307\u5b9a\u306f\u3067\u304d\u307e\u305b\u3093\u3002 \n\n\n### \uff14.\uff12.\uff13 \u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u3067\u3046\u3051\u308b\n\n\uff11. \u30ab\u30e9\u30e0\u540d\u306b\u91cd\u8907\u304c\u306a\u3044\u5834\u5408\n\n\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u3092\u305d\u306e\u307e\u307e\u4f7f\u3063\u3066\u30ab\u30e9\u30e0\u5024\u3092\u53d6\u5f97\u3059\u308b\u7c21\u5358\u306a\u65b9\u6cd5\u306f\u3001\u540c\u6642\u306b\u30ea\u30fc\u30c9\u3059\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u306b\u7570\u306a\u308b\u540d\u524d\u3092\u4e0e\u3048\u3001(\u4e00\u822c\u7684\u306b\u306f\u30ab\u30e9\u30e0\u540d\u3092\u5c0f\u6587\u5b57\u3068\u3057\u3066)\u3001\u305d\u308c\u3089\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u3092\uff11\u3064\u306e\u53d7\u3051\u5074\u69cb\u9020\u4f53\u306b\u57cb\u3081\u8fbc\u3080\u65b9\u5f0f\u3067\u3059\u3002 \n\n```go:gorp\n    type UserTbl struct {\n        Id          int64   `db:\"id,primarykey,autoincrement\"`\n        Name        string  `db:\"name\"`\n        Age         int64   `db:\"age\"`\n        CampanyId   int64   `db:\"campany_id\"`\n    }\n    type CampanyTbl struct {\n        Id          int64   `db:\"id,primarykey,autoincrement\"`\n        CampanyName string  `db:\"campany_name\"`\n    }\n    type UserData struct {\n        UserTbl             // \u57cb\u3081\u8fbc\u307f\n        CampanyTbl          // \u57cb\u3081\u8fbc\u307f\n    }\n            \u30fb\u30fb\u30fb\n    _,err = dbmap.Select( &data,`SELECT user_tbl.name,\n                                 user_tbl.age, \n                                 campany_tbl.campany_name\n                        FROM user_tbl JOIN campany_tbl \n                        ON user_tbl.campany_id = campany_tbl.id` )\n    if err != nil { fmt.Println( err ) }\n    fmt.Println( data )     // -->[ {{0 Alice1 11 0} {0 camp-1}} \n                            //      {{0 Bob2 22 0}   {0 camp-1}} \n                            //      {{0 John3 33 0}  {0 camp-3}}]\n```\n\n\n\n\uff12. \u30ab\u30e9\u30e0\u540d\u306b\u91cd\u8907\u304c\u3042\u308b\u5834\u5408\n\n\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\u306b\u306f\u3001\u53d7\u3051\u5074\u69cb\u9020\u4f53\u3092\u8907\u6570\u6307\u5b9a\u3067\u304d\u306a\u3044\u305f\u3081\u3001\uff11\u3064\u306e\u53d7\u3051\u5074\u69cb\u9020\u4f53\u306b\u8907\u6570\u306e\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u4f53\u3092\u57cb\u3081\u8fbc\u3080\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u30ab\u30e9\u30e0\u540d\u306b\u91cd\u8907\u304c\u3042\u308b\u6642\u3001\u540c\u6642\u306b\u30ea\u30fc\u30c9\u3057\u306a\u3051\u308c\u3070\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u91cd\u8907\u3057\u305f\u3082\u306e\u3092\u540c\u6642\u306b\u30ea\u30fc\u30c9\u3057\u3066\u632f\u308a\u5206\u3051\u308b\u3053\u3068\u306f\u3001\u79c1\u306e\u8a66\u3057\u305f\u7bc4\u56f2\u3067\u306f\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u6b21\u306f\u3001\u8868\u984c\u306b\u53cd\u3057\u307e\u3059\u304c\u3001\u30ab\u30e9\u30e0\u540d\u91cd\u8907\u5206\u3060\u3051\u5b9a\u7fa9\u3057\u306a\u304a\u3059\u4f8b\u3067\u3059\u3002 \n\n```go:gorp\n    type UserTbl struct {\n        IdUser      int64   `db:\"id,primarykey,autoincrement\"`\n        Name        string  `db:\"name\"`     // \u91cd\u8907\n        Age         int64   `db:\"age\"`\n        CampanyId   int64   `db:\"campany_id\"`\n    }\n    type CampanyTbl struct {\n        IdCampany   int64   `db:\"id,primarykey,autoincrement\"`\n        Name        string  `db:\"name\"`     // \u91cd\u8907\n    }\n    type UserData struct {          //\u65b0\u898f \u53d7\u3051\u5074\u69cb\u9020\u4f53\n        UserTbl\n        CampanyTbl\n        UserName    string          // \u30ea\u30fc\u30c9\u3059\u308b\u30ab\u30e9\u30e0\u540d\u91cd\u8907\u306e\u5206\n        CampanyName string          //\n    }\n            \u30fb\u30fb\u30fb\n    dbmap.Select( &data,\n            `SELECT     age ,\n                        user_tbl.name    AS \"UserName\", \n                        campany_tbl.name AS \"CampanyName\"\n                        FROM user_tbl INNER JOIN campany_tbl \n                        ON user_tbl.campany_id = campany_tbl.id` )\n    if err != nil { fmt.Println( err ) }\n    fmt.Println( data )         // --> [ {{0  11 0} {0 } Alice1 camp-1} \n                                //       {{0  22 0} {0 } Bob2 camp-1} \n                                //       {{0  33 0} {0 } John3 camp-3}]\n```\n\n\uff0a\u4e0a\u4f8b\u3088\u308a\u3082 \uff14.\uff12.\uff11 \u3084 gorp\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u4f8b\u306e\u3088\u3046\u306b\u3001\u5fc5\u8981\u306a\u30ab\u30e9\u30e0\u5206\n\u3000\u3060\u3051\u3092\u5b9a\u7fa9\u3059\u308b\u65b9\u304c\u30d9\u30bf\u30fc\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002 \n\n\n\n\n# \uff15\u7ae0 \u307e\u3068\u3081\n\n- \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u5341\u5206\u3068\u3044\u3046\u4eba\u3082\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u5c0f\u898f\u6a21\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3082\u30c6\u30fc\u30d6\u30eb\u306f10\u500b\u4ee5\u4e0a\u306b\u306f\u306a\u308a\u307e\u3059\u3057\u3001\u958b\u767a\u6bb5\u968e\u3067\u4f55\u5ea6\u3082\u624b\u76f4\u3057\u304c\u5165\u308b\u3053\u3068\u3092\u8003\u3048\u308b\u3068\u3001\u3069\u3061\u3089\u3067\u3082\u5341\u5206\u4fbf\u5229\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002  \n\n- \u4e16\u754c\u7684\u306b\u898b\u3066\u60c5\u5831\u91cf\u30fb\u4eba\u6c17\u3068\u3082gorp\u306b\u8ecd\u914d\u304c\u3042\u304c\u308a\u307e\u3059\u304c\u3001genmai\u3042\u308b\u3044\u306f \u62e1\u5f35genmai\u306f\u30b9\u30d4\u30fc\u30c9\u306b\u5bfe\u3059\u308b\u61f8\u5ff5\u306f\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306esnake_case\u5909\u63db\u3082\u5bc4\u4e0e\u3057\u3066\u3001\u30b7\u30f3\u30d7\u30eb\u3067\u3042\u308a\u306a\u304c\u3089\u6a5f\u80fd\u7684\u306b\u3082\u305d\u3053\u305d\u3053\u592a\u5200\u6253\u3061\u3067\u304d\u308b\u3082\u306e\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u2605\u2605\u6ce8\u610f\u2605\u2605\n\u672c\u7a3f\u306f\u3001\u307e\u3060\u5341\u5206\u306b\u691c\u8a3c\u3055\u308c\u3066\u3044\u308b\u3068\u306f\u8a00\u3048\u307e\u305b\u3093\u3002 \u5229\u7528\u306b\u306f\u5341\u5206\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3002 \u8aa4\u308a\u7b49\u3042\u308c\u3070\u3054\u5831\u544a\u3044\u305f\u3060\u3051\u308b\u3068\u6709\u96e3\u3044\u3067\u3059\u3002 \n\n\n\n# \uff16\u7ae0 \u30bd\u30fc\u30b9\u30ea\u30b9\u30c8\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f godep\u3092\u3064\u304b\u3046\u306e\u304c\u666e\u901a\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u79c1\u306f\u9069\u5f53\u306b\u6e08\u307e\u305b\u307e\u3057\u305f\u3002 \u304a\u52e7\u3081\u3057\u307e\u305b\u3093\u304c\u3001\u4e0b\u8a18\u306e Go\u30d5\u30a1\u30a4\u30eb(genmai2.go)\u3092 `($GOPATH)/src/github.com/naoina/genmai` \u306b\u7f6e\u3044\u3066\u3001\n\n```\n    ($GOPATH)/src/github.com/naoina \u306b\u3066 \n    $ go install -v ./genmai\n```\n\n\u3067\u518d\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308c\u3070\u3068\u308a\u3042\u3048\u305a\u306f\u52d5\u304d\u307e\u3059\u3002\nWindows 64bit\u306e\u3068\u304d\u306b\u306f\u3001mingw 64\u3067\u3042\u308b\u3053\u3068\u3084 gcc\u306e\u30d1\u30b9\u306b\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3002\n\n\u4ee5\u4e0b\u306e\u8ffd\u52a0\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u5b9f\u969b\u306e\u3068\u3053\u308d\u3001\u307b\u3068\u3093\u3069naoina\u3055\u3093\u306e\u305d\u308c(\u3088\u304f\u4f3c\u305f\u95a2\u6570\u540d)\u3068\u540c\u3058\u3067\u3059\u3002 \u3044\u305a\u308c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u6574\u3048\u3066\u3001github\u306bgenmai\u306e\u5225fork\u3068\u3057\u3066\u3042\u3052\u305f\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\n\n```go:genmai2.go\n// Copyright (c) 2016 Norifumi Mizuo\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Package genmai provides simple, better and easy-to-use Object-Relational Mapper.\npackage genmai\n\nimport (\n    \"database/sql\"\n  _ \"errors\"\n    \"fmt\"\n  _ \"io\"\n    \"reflect\"\n    \"runtime\"\n  _ \"sort\"\n  _ \"strconv\"\n    \"strings\"\n  _ \"sync\"\n  _  \"github.com/naoina/go-stringutil\"\n)\n//-----------------------------------------------------------------------------------\n// SelectSql2() works like Select() but it requires SQL query string.\n// you can specify the output parameter multiply \nfunc (db *DB) SelectSql2( args ...interface{}) (err error) {\n    defer func() {\n        if e := recover(); e != nil {\n            buf := make([]byte, 4096)\n            n := runtime.Stack(buf, false)\n            err = fmt.Errorf(\"genmai:%v\\n%v\", e, string(buf[:n]))\n        }\n    }()\n    if len(args) < 2 { return fmt.Errorf( \"genmai.SelectSql2: you need data-receiver and query string\") }\n\n    var rTypes  []reflect.Type\n    var rValues []reflect.Value\n    var query   string\n    var offs    int\n    var paramId int = -1    // 0:slice of struct all , 1:slice of non-struct all\n                            // 2: non-slice & non-struct all\n    for i,arg := range args {\n        offs = i\n        rv := reflect.ValueOf(arg)\n        if rv.Kind() == reflect.String { \n            query = arg.(string)\n            break \n        }\n        if rv.Kind() != reflect.Ptr { return fmt.Errorf( \"genmai.SelectSql2: data-receiver must be a pointer\") }\n        rv = rv.Elem()\n        rValues = append( rValues,rv )\n        rTypes = append( rTypes,rv.Type() )\n\n        switch rv.Kind() {\n        case reflect.Ptr :\n            return fmt.Errorf( \"genmai.SelectSql2: `%v` duplicated pointer not supported\",rv.Type() )\n        case reflect.Slice :\n            t := rv.Type().Elem()\n            if t.Kind() == reflect.Ptr { \n                return fmt.Errorf( \"genmai.SelectSql2: `%v` slice of pointer not supported\",t )\n            }\n            if t.Kind() == reflect.Struct {\n                if paramId == -1 { paramId = 0 }\n                if paramId != 0 { \n                    return fmt.Errorf( \"genmai.SelectSql2: `%v` data-reciever must be slice all / non-slice all / simple type all\",rv.Type() ) \n                }\n            } else {\n                if paramId == -1 { paramId = 1 }\n                if paramId != 1 { \n                    return fmt.Errorf( \"genmai.SelectSql2: `%v` data-reciever must be slice all / non-slice all / simple type all\",rv.Type() ) \n                }\n            }\n        case reflect.Invalid: \n            return fmt.Errorf(\"genmai.SelectSql2: nil pointer dereference\")\n        default:\n            if paramId == -1 { paramId = 2 }\n            if paramId != 2 {\n                return fmt.Errorf( \"genmai.SelectSql2: `%v` data-reciever must be slice all / non-slice all / simple type all\",rv.Type() ) \n            }\n        }\n    }\n    if paramId == -1 { return fmt.Errorf( \"genmai.SelectSql2: you need data-receiver\" ) }\n    if query == \"\" { return fmt.Errorf( \"genmai.SelectSql2: you need query string\" ) }\n    args = args[offs+1:]\n\n                                    //---------------------------------\n    stmt, err := db.prepare(query)\n    if err != nil { return err }\n    defer stmt.Close()\n    rows, err := stmt.Query(args...)\n    if err != nil { return err }\n    defer rows.Close()\n\n                                    //---------------------------------\n    var values []reflect.Value\n    switch paramId {\n    case 0 : values,err = db.selectToSliceStruct4( rows,rTypes )\n    case 1 : values,err = db.selectToSliceValues4( rows,rTypes )\n    case 2 : values,err = db.selectToValues4( rows,rTypes )\n    }\n    for i,value := range values { rValues[i].Set(value) }\n    if err != nil { return err }\n    return nil\n}\n//---------------------------------------------------------------------\n// Select2() works like Select() but you can specify the output parameter multiply\n// when you specify the From() \nfunc (db *DB) Select2( args ...interface{} ) (err error) {\n    defer func() {\n        e := recover()\n        if e != nil {\n            buf := make([]byte, 4096)\n            n := runtime.Stack(buf, false)\n            err = fmt.Errorf(\"genmai:%v\\n%v\", e, string(buf[:n]))\n        }\n    }()\n                                        //---------------------------------\n    var tableName string\n    var rTypes  []reflect.Type\n    var rValues []reflect.Value\n    var offs    int\n    var paramId int = -1    // 0:slice of struct all , 1:slice of non-struct all\n                            // 2: non-slice & non-struct all\n                                        //---------------------------------\n    for _, arg := range args {          //          No From() ---> Select()\n        if f, ok := arg.(*From); ok {\n            if tableName != \"\" { return fmt.Errorf(\"Select2: From statement specified more than once\") }\n            tableName = f.TableName\n        }\n    }\n    if tableName == \"\" { return db.Select( args ) }\n\n                                    //---------------------------------\n    if len(args) < 1 { return fmt.Errorf( \"genmai.Select2: you need data-receiver\") }\n\n    for i,arg := range args {       //  ptr,[ptr], [string/[]string],[non-ptr],[non-ptr]\n        offs = i\n        rv := reflect.ValueOf(arg)\n        if rv.Kind() != reflect.Ptr { break }\n        rv = rv.Elem()\n        rValues = append( rValues,rv )\n        rTypes = append( rTypes,rv.Type() )\n\n        switch rv.Kind() {\n        case reflect.Ptr :\n            return fmt.Errorf( \"genmai.Select2: `%v` duplicated pointer not supported\",rv.Type() )\n        case reflect.Slice :\n            t := rv.Type().Elem()\n            if t.Kind() == reflect.Ptr { \n                return fmt.Errorf( \"genmai.Select2: `%v` slice of pointer not supported\",t )\n            }\n            if t.Kind() == reflect.Struct {\n                if paramId == -1 { paramId = 0 }\n                if paramId != 0 { \n                    return fmt.Errorf( \"genmai.Select2: `%v` data-reciever must be slice all / non-slice all / simple type all\",rv.Type() ) \n                }\n            } else {\n                if paramId == -1 { paramId = 1 }\n                if paramId != 1 { \n                    return fmt.Errorf( \"genmai.Select2: `%v` data-reciever must be slice all / non-slice all / simple type all\",rv.Type() ) \n                }\n            }\n        case reflect.Invalid: \n            return fmt.Errorf(\"genmai.Select2: nil pointer dereference\")\n        default:\n            if paramId == -1 { paramId = 2 }\n            if paramId != 2 {\n                return fmt.Errorf( \"genmai.Select2: `%v` data-reciever must be slice all / non-slice all / simple type all\",rv.Type() ) \n            }\n        }\n    }\n\n    if paramId == -1 { return fmt.Errorf( \"genmai.Select2: you need data-receiver (pointer)\" ) }\n    args = args[offs:]\n                                    //---------------------------------\n    col, from, conditions, err := db.classify2(tableName, args)\n    if err != nil { return err }\n\n    queries := []string{`SELECT`, col, `FROM`, db.dialect.Quote(from)}\n\n    var values []interface{}\n    for _, cond := range conditions {\n        q, a := cond.build(0, false)\n        queries = append(queries, q...)\n        values = append(values, a...)\n    }\n    query := strings.Join(queries, \" \")\n    stmt, err := db.prepare(query, values...)\n    if err != nil { return err }\n    defer stmt.Close()\n    rows, err := stmt.Query(values...)\n    if err != nil { return err }\n    defer rows.Close()\n                                    //---------------------------------\n    var vals []reflect.Value\n    switch paramId {\n    case 0 : vals,err = db.selectToSliceStruct4( rows,rTypes )\n    case 1 : vals,err = db.selectToSliceValues4( rows,rTypes )\n    case 2 : vals,err = db.selectToValues4( rows,rTypes )\n    }\n    for i,value := range vals { rValues[i].Set(value) }\n    if err != nil { return err }\n    return nil\n}\n//-----------------------------------------------------------------------------------\n// selectToSlice returns a slice value fetched from rows.\nfunc (db *DB) classify2(tableName string, args []interface{}) (column, from string, conditions []*Condition, err error) {\n\n    if len(args) == 0 {\n        //return columnName2(db.dialect, tableName, \"*\"), tableName, nil, nil\n        return columnName2(db.dialect, \"\", \"*\"), tableName, nil, nil\n    }\n    offset := 1\n    switch t := args[0].(type) {\n    case string:\n        if t != \"\" {\n            //column = columnNameAs2(db.dialect, tableName, t)\n            column = columnNameAs2(db.dialect, \"\", t)\n        }\n    case []string:\n        //column = db.columnsAs2(tableName, ToInterfaceSlice(t))\n        column = db.columnsAs2( \"\", ToInterfaceSlice(t))\n    case *Distinct:\n        //column = fmt.Sprintf(\"DISTINCT %s\", db.columns2(tableName, ToInterfaceSlice(t.columns)))\n        column = fmt.Sprintf(\"DISTINCT %s\", db.columns2(\"\", ToInterfaceSlice(t.columns)))\n    case *Function:\n        var col string\n        if len(t.Args) == 0 {\n            col = \"*\"\n        } else {\n            //col = db.columns2( tableName, t.Args)\n            col = db.columns2( \"\", t.Args)\n        }\n        column = fmt.Sprintf(\"%s(%s)\", t.Name, col)\n    default:\n        offset--\n    }\n    for i := offset; i < len(args); i++ {\n        switch t := args[i].(type) {\n        case *Condition:\n            t.tableName = tableName\n            conditions = append(conditions, t)\n        case string, []string:\n            return \"\", \"\", nil, fmt.Errorf(\"genmai:argument of %T type must be before the *Condition arguments\", t)\n        case *From:\n            // ignore.\n        case *Function:\n            return \"\", \"\", nil, fmt.Errorf(\"genmai:%s function must be specified to the first argument\", t.Name)\n        default:\n            return \"\", \"\", nil, fmt.Errorf(\"genmai:unsupported argument type: %T\", t)\n        }\n    }\n    if column == \"\" {\n        //column = columnName2(db.dialect, tableName, \"*\")\n        column = columnName2(db.dialect, \"\", \"*\")\n    }\n    return column, tableName, conditions, nil\n}\n// columnAs2 returns the comma-separated column name with quoted.\nfunc (db *DB) columnsAs2(tableName string, columns []interface{}) string {\n    if len(columns) == 0 {\n        return columnName2(db.dialect, tableName, \"*\")\n    }\n    names := make([]string, len(columns))\n    for i, col := range columns {\n        switch c := col.(type) {\n        case Raw:\n            names[i] = fmt.Sprint(*c)\n        case string:\n            names[i] = columnNameAs2(db.dialect, tableName, c)\n        case *Distinct:\n            names[i] = fmt.Sprintf(\"DISTINCT %s\", db.columns2(tableName, ToInterfaceSlice(c.columns)))\n        default:\n            panic(fmt.Errorf(\"genmai:column name must be string, Raw or *Distinct, got %T\", c))\n        }\n    }\n    return strings.Join(names, \", \")\n}\n// columns returns the comma-separated column name with quoted.\nfunc (db *DB) columns2(tableName string, columns []interface{}) string {\n    if len(columns) == 0 {\n        return columnName2(db.dialect, tableName, \"*\")\n    }\n    names := make([]string, len(columns))\n    for i, col := range columns {\n        switch c := col.(type) {\n        case Raw:\n            names[i] = fmt.Sprint(*c)\n        case string:\n            names[i] = columnName2(db.dialect, tableName, c)\n        case *Distinct:\n            names[i] = fmt.Sprintf(\"DISTINCT %s\", db.columns2(tableName, ToInterfaceSlice(c.columns)))\n        default:\n            panic(fmt.Errorf(\"genmai:column name must be string, Raw or *Distinct, got %T\", c))\n        }\n    }\n    return strings.Join(names, \", \")\n}\n\n// columnName returns the column name that added the table name with quoted if needed.\nfunc columnNameAs2(d Dialect, tname, cname string) string {\n    cname = strings.TrimSpace(cname)\n    strs := strings.Fields( cname )\n    if len(strs) == 2 { \n        return fmt.Sprintf(\"%s %s\", columnName2(d,tname,strs[0]), quoteIfNot( d,strs[1]) )\n    }\n    if len(strs) == 3 && strings.ToUpper(strs[1]) == \"AS\" { \n        return fmt.Sprintf(\"%s AS %s\", columnName2(d,tname,strs[0]), quoteIfNot( d,strs[2]) )\n    }\n    return columnName2( d,tname,cname )\n}\n\nfunc quoteIfNot( d Dialect, name string) string {\n    return d.Quote( strings.Trim( name,\"'`\\\"\") )    //  firsr == last ?  \n}                                                   // Attention: columnQuoteDot()\nfunc columnName2(d Dialect, tname, cname string) string {\n    //cname = strings.TrimSpace(cname)\n    cname = strings.Trim( cname,\"'`\\\" \") \n    if cname == \"*\" { \n        return cname\n        //if tname == \"\"  { return cname }\n        //return fmt.Sprintf(\"%s.%s\", d.Quote(tname), cname)\n        }\n\n    strs := strings.SplitN( cname,\".\",2 )\n    if len(strs) == 2 {\n        strs[0] = strings.Trim( strs[0],\"'`\\\" \") \n        strs[1] = strings.Trim( strs[1],\"'`\\\" \") \n        if strs[1] == \"*\" { return quoteIfNot(d,strs[0]) + \".*\" }\n        return quoteIfNot(d,strs[0]) + \".\" + quoteIfNot(d,strs[1]) \n    }\n    cname = quoteIfNot(d,cname)\n    if tname == \"\"  { return cname }\n    return fmt.Sprintf( \"%s.%s\", quoteIfNot(d,tname), cname)\n}\n//---------------------------------------------------------------------\n// ReplaceQuery substiutes the string \"{key}\" for the value of map/struct data.\nfunc (db *DB) ReplaceQueryKey( query string, stringQuote bool,\n                        args ...interface{} ) (q string,err error) {\n    for _, arg := range args {    \n        rVal := reflect.ValueOf(arg)\n        if rVal.Kind() == reflect.Ptr { rVal = rVal.Elem() }\n\n        switch rVal.Kind() {\n        case reflect.Struct: query,err = db.replQueryKeyStruct( query,stringQuote,rVal )\n        case reflect.Map:    query,err = db.replQueryKeyMap( query,stringQuote,rVal )\n        default: \n            return query,fmt.Errorf( \"genmai.ReplaceQueryKey: type `%v` is not supported\",\n                                            reflect.TypeOf( arg ).String() )\n        }\n        if err != nil { return query,err }\n    }\n    return query,nil\n}\n\n//---------------------------------------------------------------------\nfunc (db *DB) replQueryKeyMap( query string, strQuote bool, \n                            rVal reflect.Value ) (q string,err error) {\n    for _,key := range rVal.MapKeys() {\n        val := rVal.MapIndex( key )\n        query,err = db.replQuery( query,strQuote,fmt.Sprintf( \"%s\",key ),\n                                        reflect.ValueOf(val.Interface()))\n        if err != nil { return query,err }\n    }\n    return query,err\n}\n//---------------------------------------------------------------------\nfunc (db *DB) replQueryKeyStruct( query string, strQuote bool, \n                                rVal reflect.Value ) (q string,err error) {\n    for i := 0; i < rVal.NumField(); i++ {\n\n        rTyp := rVal.Type()\n        fieldVal := rVal.Field(i)\n        fieldTyp := rTyp.Field(i)\n\n        switch fieldVal.Kind() {\n        case reflect.Struct:\n            if fieldTyp.Anonymous { \n                query,err = db.replQueryKeyStruct( query,strQuote,fieldVal )\n                if err != nil { return query,err }\n            }\n        case reflect.Ptr:\n        default:\n            candidate := db.columnFromTag( fieldTyp ) \n            query,err = db.replQuery( query,strQuote,candidate,fieldVal )\n            //query,err = db.replQuery( query,strQuote,fieldTyp.Name,fieldVal )\n            if err != nil { return query,err }\n        }\n    }\n    return query,err\n}\n//---------------------------------------------------------------------\nfunc (db *DB) replQuery( query string, strQuote bool,src string, rVal reflect.Value ) (q string,err error) {\n    dest := fmt.Sprintf( \"%v\",rVal )\n    switch rVal.Kind() {\n    case reflect.String: \n        if strQuote { dest = db.Quote( dest ) }\n    case reflect.Bool, reflect.Int,reflect.Int8,reflect.Int16,\n         reflect.Int32,reflect.Int64,\n         reflect.Uint,reflect.Uint8,reflect.Uint16,\n         reflect.Uint32,reflect.Uint64,\n         reflect.Float32,reflect.Float64:\n    default:\n        return query,nil\n    }\n    return strings.Replace( query,\"{\"+src+\"}\",dest,-1 ),nil\n}\n//-----------------------------------------------------------------------------------\n// selectToSlice returns a slice value fetched from rows. \n// elements are struct all / simple-type all\nfunc (db *DB) selectToSliceStruct4(rows *sql.Rows, \n                            ts []reflect.Type) ([]reflect.Value, error) {\n    var     ptrN [255]int       // maybe len(ts) < 255\n\n    columns, err := rows.Columns()\n    if err != nil { return []reflect.Value{}, err }\n    for j := 0 ; j < len(ts) ; j++ {\n        ts[j] = ts[j].Elem()\n        if ts[j].Kind() == reflect.Ptr { ptrN[j] = 1 ; ts[j] = ts[j].Elem() }\n        if ts[j].Kind() == reflect.Ptr {\n            return []reflect.Value{} , fmt.Errorf( \"genmai.SelectXXX2: duplicated pointer isn't supported %v\", ts[j] )\n        }\n    }\n\n    tsIndex := make( []int,len(columns) )\n    fieldIndexes := make([][]int, len(columns))\n    for i, column := range columns {\n        var findTs = -1\n        var findIndex []int\n\n        for j := 0 ; j < len(ts) ; j++ {\n            tmp,err := db.fieldIndexByName2(ts[j], column,\"\", nil)\n            if err != nil { return []reflect.Value{}, err }\n            if len(tmp) < 1 {\n                if ts[j].Kind() == reflect.Struct {     \n                    //strName := stringutil.ToSnakeCase(ts[j].Name())\n                    strName := db.tableName( ts[j] )        // most outer structure's name\n                    tmp,err = db.fieldIndexByName2(ts[j], column,strName + \".\", nil)\n                    if err != nil { return []reflect.Value{}, err }\n                }\n            }\n            if len(tmp) >= 1 {\n                if findTs >= 0 { return []reflect.Value{}, fmt.Errorf(\"genmai.SelectXXX2: `%v` field is ambigous\", column ) }\n                findTs = j\n                findIndex = tmp\n            } \n        }\n        //if findTs < 0 { return []reflect.Value{}, fmt.Errorf(\"genmai.SelectXXX2: `%v` field isn't defined in embedded struct\", stringutil.ToUpperCamelCase(column) ) }\n        if findTs < 0 { return []reflect.Value{}, fmt.Errorf(\"genmai.SelectXXX2: `%v` field isn't defined in embedded struct\", column ) }\n        tsIndex[i] = findTs\n        fieldIndexes[i] = findIndex\n    }\n\n    dest   := make([]interface{}, len(columns))\n    vs     := make([]reflect.Value,len(ts))\n    result := make([][]reflect.Value,len(ts))\n\n    for j := 0 ; j < len(ts) ; j++ { \n        result[j] = make( []reflect.Value,0 )\n    }\n\n    for rows.Next() {\n        for j := 0 ; j < len(ts) ; j++ { \n            vs[j] = reflect.New(ts[j]).Elem() \n        }\n        for i, index := range fieldIndexes {\n            field := vs[tsIndex[i]].FieldByIndex(index)\n            dest[i] = field.Addr().Interface()\n        }\n        err = rows.Scan(dest...)\n        if err != nil { return []reflect.Value{}, err }\n        for j := 0 ; j < len(ts) ; j++ { \n            result[j] = append( result[j], vs[j] )\n        }\n    }\n    err = rows.Err()\n    if err != nil { return []reflect.Value{}, err }\n\n    slice := make([]reflect.Value,len(ts))\n    for j := 0 ; j < len(ts) ; j++ {\n        if ptrN[j] == 1 { ts[j] = reflect.PtrTo(ts[j]) }\n        slice[j] = reflect.MakeSlice( reflect.SliceOf(ts[j]), len(result[j]), len(result[j]))\n        for line, v := range result[j] {\n            if ptrN[j] == 1 { v = v.Addr() }\n            slice[j].Index(line).Set(v)\n        }\n    }\n//fmt.Printf( \"slice[0][0]:%v \\n\",slice[0].Index(0).Interface() )\n//fmt.Printf( \"slice[0][1]:%v \\n\",slice[0].Index(1).Interface() )\n//fmt.Printf( \"slice[0][2]:%v \\n\",slice[0].Index(2).Interface() )\n    return slice, nil\n}\n\n//-----------------------------------------------------------------------------------\n// selectToSlice returns a slice value fetched from rows. \n// elements are simple-type all\nfunc (db *DB) selectToSliceValues4(rows *sql.Rows, \n                            ts []reflect.Type) ([]reflect.Value, error) {\n    var     ptrN [255]int       // maybe len(ts) < 255\n    columns, err := rows.Columns()\n    if err != nil { return []reflect.Value{}, err }\n\n    if len(ts) != len(columns) {\n        return []reflect.Value{} , fmt.Errorf( \"genmai.SelectXXX2: number of receive-data unmatch to column\" )\n    }\n\n    for j := 0 ; j < len(ts) ; j++ {\n        ts[j] = ts[j].Elem()\n        if ts[j].Kind() == reflect.Ptr { ptrN[j] = 1 ; ts[j] = ts[j].Elem() }\n        if ts[j].Kind() == reflect.Ptr {\n            return []reflect.Value{} , fmt.Errorf( \"genmai.SelectXXX2: duplicated pointer isn't supported %v\", ts[j] )\n        }\n    }\n    dest   := make([]interface{}, len(ts))\n    vs     := make([]reflect.Value,len(ts))\n    result := make([][]reflect.Value,len(ts))\n\n    for j := 0 ; j < len(ts) ; j++ { \n        result[j] = make( []reflect.Value,0 )\n    }\n\n    for rows.Next() {\n        for j := 0 ; j < len(ts) ; j++ { \n            vs[j] = reflect.New(ts[j]).Elem() \n        }\n        for i := 0 ; i < len(ts) ; i++ {\n            field := vs[i]\n            dest[i] = field.Addr().Interface()\n        }\n        err = rows.Scan(dest...)\n        if err != nil { return []reflect.Value{}, err }\n        for j := 0 ; j < len(ts) ; j++ { \n            result[j] = append( result[j], vs[j] )\n        }\n    }\n    err = rows.Err()\n    if err != nil { return []reflect.Value{}, err }\n\n    slice := make([]reflect.Value,len(ts))\n    for j := 0 ; j < len(ts) ; j++ {\n        if ptrN[j] == 1 { ts[j] = reflect.PtrTo(ts[j]) }\n        slice[j] = reflect.MakeSlice( reflect.SliceOf(ts[j]), len(result[j]), len(result[j]))\n        for line, v := range result[j] {\n            if ptrN[j] == 1 { v = v.Addr() }\n            slice[j].Index(line).Set(v)\n        }\n    }\n    return slice, nil\n}\n//-----------------------------------------------------------------------------------\n// selectToValues4 \nfunc (db *DB) selectToValues4( rows *sql.Rows, \n                            ts []reflect.Type) ([]reflect.Value, error) {\n    var     ptrN    [256]int        // maybe len(ts) < 256\n    var     err     error\n\n    columns, err := rows.Columns()\n    if err != nil { return []reflect.Value{}, err }\n\n    for j := 0 ; j < len(ts) && j < len(columns) ; j++ {\n        if ts[j].Kind() == reflect.Ptr { ptrN[j] = 1 ; ts[j] = ts[j].Elem() }\n        switch ts[j].Kind() {\n        case reflect.Ptr :\n            return []reflect.Value{} , fmt.Errorf( \"genmai.SelectXXX2: duplicated pointer isn't supported %v\", ts[j] )\n        case reflect.Struct :\n            return []reflect.Value{} , fmt.Errorf( \"genmai.SelectXXX2: non-slice of struct isn't supported %v\", ts[j] )\n        }\n    }\n    if len(ts) != len(columns) {        // after pointer/struct checking\n        return []reflect.Value{} , fmt.Errorf( \"genmai.SelectXXX2: number of receive-data arear unmatch to column\" )\n    }\n\n    dest   := make([]interface{}, len(ts))\n    vs     := make([]reflect.Value,len(ts))\n\n    for rows.Next() {\n        for j := 0 ; j < len(ts) ; j++ { \n            vs[j] = reflect.New(ts[j]).Elem() \n        }\n        for i := 0 ; i < len(ts) ; i++ {\n            dest[i] = vs[i].Addr().Interface()\n        }\n        err = rows.Scan(dest...)\n        if err != nil { return []reflect.Value{}, err }\n    }\n    err = rows.Err()\n    if err != nil { return []reflect.Value{}, err }\n\n    slice  := make([]reflect.Value,len(ts))\n    for j := 0 ; j < len(ts) ; j++ {\n        if ptrN[j] == 1 { vs[j] = vs[j].Addr() }\n        slice[j] = vs[j]\n    }\n    return slice, nil\n}\n//-----------------------------------------------------------------------------------\n// fieldIndexByName2 returns the index sequence corresponding to the nested field\nfunc (db *DB) fieldIndexByName2(t reflect.Type, \n                name string, pref string, index []int) ([]int,error) {\n    find := 0\n    for i := 0; i < t.NumField(); i++ {\n        field := t.Field(i)\n        candidate := db.columnFromTag( field );\n        if pref + candidate == name {\n            if find > 0 { return nil, fmt.Errorf( \"genmai.SelectXXX2: `%v` receive field is ambigous\",name ) }\n            index = append( index,i )\n            find++\n            continue \n        }\n        if field.Anonymous {\n            idx,err := db.fieldIndexByName2( field.Type,name,pref,append( index,i ) ); \n            if err != nil { return nil,err }\n            if len(idx) > 0 {\n                if find > 0 { return nil, fmt.Errorf( \"genmai.SelectXXX2: `%v` receive field is ambigous\",name ) }\n                index = idx\n                find++\n                continue \n            }\n        }\n    }\n    if find > 0 { return index,nil }\n    return nil,nil\n}\n//-----------------------------------------------------------------------------------\n// ColumnAlias returns the slice of AS-clause which asciates the table column and the struct field.\nfunc (db *DB) ColumnAlias2( pref bool,args ...interface{} ) ([]string,error) {\n\n    var fieldAs []string \n    var name,name1,name2,strName string     // stack over?  pq runtime: VirtualAlloc error\n    var i,j,x1,x2,y1,y2 int                 // \n    var err error\n\n    fields := make([][]string,len(args))\n    dup    := make([][]bool,len(args))\n\n    for i,arg := range args {\n        rv := reflect.ValueOf(arg)\n        if rv.Kind() == reflect.Ptr { rv = rv.Elem() }\n        if rv.Kind() != reflect.Struct { \n            return nil, fmt.Errorf( \"genmai.ColumnAlias2:parameter must be a struct or a pointer of struct\",rv.Type().Name() )\n        }\n        fields[i],err = db.collectTableFieldsAs2( rv.Type() )\n        // fmt.Println( fields )\n        if err != nil { return nil,err }\n    }\n    if pref == false {\n    //---------------- check the duplication between other struct's field\n        for x1,_ = range fields { dup[x1] = make([]bool,len(fields[x1])) }\n        for x1,_ = range fields {\n            for y1,name1 = range fields[x1] {\n                for x2 = x1+1 ; x2 < len(fields) ; x2++ {\n                    for y2,name2 = range fields[x2] {\n                        if name1 == name2 {\n                            dup[x1][y1] = true \n                            dup[x2][y2] = true \n                            break\n                        }\n                    }\n                }\n            }\n        }\n    }\n    //------------------------------------------------------------------\n    // duplicated     \uff1a \"table\".\"column\" AS \"table.column\"\n    // not duplicated \uff1a         \"column\" AS \"column\"\n    //------------------------------------------------------------------\n    for i,_ = range fields {\n        for j,name =  range fields[i] {\n            if pref == true || dup[i][j] {\n                rv := reflect.ValueOf(args[i])\n                if rv.Kind() == reflect.Ptr { rv = rv.Elem() }\n                t := rv.Type()\n                //strName := stringutil.ToSnakeCase(t.Name())\n                strName = db.tableName( t )\n                name2 = db.Quote(strName + \".\" + name)\n                name1 = db.Quote(strName) + \".\" + db.Quote(name)\n                name = name1 + \" AS \" + name2\n            } else {\n                //name = name + \" AS \" + db.Quote(name)\n                name = columnName2(db.dialect,\"\",name) + \" AS \" + db.Quote(name)\n            }\n        fieldAs = append( fieldAs, name )\n        }\n    }\n    return fieldAs,nil\n}\n\n//-------------------------------------------------------------------------------\nfunc (db *DB) collectTableFieldsAs2(t reflect.Type) (fields []string, err error) {\n    for i := 0; i < t.NumField(); i++ {\n        field := t.Field(i)\n        if IsUnexportedField(field) { continue }\n        if db.hasSkipTag(&field) { continue }\n        if field.Anonymous {\n            fs, err := db.collectTableFieldsAs2(field.Type)\n            if err != nil { return nil, err }\n            fields = append(fields, fs...)\n            continue\n        }\n        t := field.Type\n        if t.Kind() == reflect.Struct { \n            switch t.String() {\n            case \"sql.NullString\",\"sql.NullBool\",\"sql.NullInt64\",\"sql.NullFloat64\":\n            case \"time.Time\":\n            default:\n                continue \n            }\n        }\n        fields = append( fields,db.columnFromTag(field) )\n        //fields = append( fields,db.dialect.Quote(db.columnFromTag(field)) )\n    }\n    return fields, nil\n}\n```\n\nnaoina\u3055\u3093\u3001woremacx\u3055\u3093\u3001\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002 \n", "tags": ["Go", "golang", "ORM", "SQL"]}