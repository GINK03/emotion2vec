{"context": " More than 1 year has passed since last update.\n\n\u300c\u30b3\u30fc\u30c9\u30fb\u30c8\u30e9\u30a4\u30a2\u30b9\u30ed\u30f3\u300d\u6570\u5b66\u306e\u554f\u984c\n\u3000CodeIQ\u3067\u9762\u767d\u305d\u3046\u306a\u554f\u984c\u304c\u3042\u3063\u305f\u306e\u3067\u30c1\u30e3\u30ec\u30f3\u30b8\u3002\u7d20\u6570\u5217\u306b\u95a2\u9023\u3057\u305f\u95a2\u6570\u306e\u5b9a\u7fa9\u3092\u4e0e\u3048\u3089\u308c\u3066\u305d\u308c\u3092\u5b9f\u88c5\u3059\u308b\u554f\u984c\u3002\u5b9f\u884c\u6642\u9593\u5236\u9650\u306e\u3042\u308b\u554f\u984c\u3060\u3063\u305f\u304c\u30e1\u30e2\u5316\u518d\u5e30\u3057\u305f\u3089\u901a\u3063\u305f\u3002\u5b9f\u884c\u6642\u95934.66\u79d2\u3068\u4f55\u3068\u304b\u53ca\u7b2c\u70b9\u306e\u7d50\u679c\u3060\u304c\u3082\u3046\u5c11\u3057\u9ad8\u901f\u5316\u3067\u304d\u305d\u3046\u3002\u4ee5\u4e0b\u306f\u63d0\u51fa\u30b3\u30fc\u30c9\u3002\n\nmy_code.rb\nrequire 'prime'\n\n\n@cache_f = { 0 => 3, 1 => 0, 2 => 2 }\ndef f(n)\n  @cache_f[n] ||= f(n - 2) + f(n - 3)\nend\n\n\n@cache_p = []\ndef get_p(n)\n  raise unless n > 0\n  until @cache_p[n - 1]\n    i = @cache_p.last || (2 - 1)\n    begin\n      i += 1\n    end until f(i) % i == 0\n    @cache_p << i\n  end\n  f(@cache_p[n - 1])\nend\n\n\ndef g(n)\n  Prime.prime_division(n).map{|a| a[0] }.max\nend\n\n\ndef h(n)\n  raise unless n > 0\n  prime_cache = []\n  prime_prime = []\n  Prime.each.with_index do |p, i|\n    break if p > n\n    prime_cache << p\n    prime_prime << p if prime_cache.include?(i + 1)\n  end\n  prime_prime.inject(0){|s,i| s + i }\nend\n\n\n\n\nP = get_p(30)\nQ = g(P)\nR = h(Q)\n\nputs \"P: #{P}, Q: #{Q}, R: #{R}\"\n\n\n\n## \u300c\u30b3\u30fc\u30c9\u30fb\u30c8\u30e9\u30a4\u30a2\u30b9\u30ed\u30f3\u300d\u6570\u5b66\u306e\u554f\u984c\n\n\u3000CodeIQ\u3067[\u9762\u767d\u305d\u3046\u306a\u554f\u984c](https://codeiq.jp/q/1383)\u304c\u3042\u3063\u305f\u306e\u3067\u30c1\u30e3\u30ec\u30f3\u30b8\u3002\u7d20\u6570\u5217\u306b\u95a2\u9023\u3057\u305f\u95a2\u6570\u306e\u5b9a\u7fa9\u3092\u4e0e\u3048\u3089\u308c\u3066\u305d\u308c\u3092\u5b9f\u88c5\u3059\u308b\u554f\u984c\u3002\u5b9f\u884c\u6642\u9593\u5236\u9650\u306e\u3042\u308b\u554f\u984c\u3060\u3063\u305f\u304c\u30e1\u30e2\u5316\u518d\u5e30\u3057\u305f\u3089\u901a\u3063\u305f\u3002\u5b9f\u884c\u6642\u95934.66\u79d2\u3068\u4f55\u3068\u304b\u53ca\u7b2c\u70b9\u306e\u7d50\u679c\u3060\u304c\u3082\u3046\u5c11\u3057\u9ad8\u901f\u5316\u3067\u304d\u305d\u3046\u3002\u4ee5\u4e0b\u306f\u63d0\u51fa\u30b3\u30fc\u30c9\u3002\n\n\n```ruby:my_code.rb\nrequire 'prime'\n\n\n@cache_f = { 0 => 3, 1 => 0, 2 => 2 }\ndef f(n)\n  @cache_f[n] ||= f(n - 2) + f(n - 3)\nend\n\n\n@cache_p = []\ndef get_p(n)\n  raise unless n > 0\n  until @cache_p[n - 1]\n    i = @cache_p.last || (2 - 1)\n    begin\n      i += 1\n    end until f(i) % i == 0\n    @cache_p << i\n  end\n  f(@cache_p[n - 1])\nend\n\n\ndef g(n)\n  Prime.prime_division(n).map{|a| a[0] }.max\nend\n\n\ndef h(n)\n  raise unless n > 0\n  prime_cache = []\n  prime_prime = []\n  Prime.each.with_index do |p, i|\n    break if p > n\n    prime_cache << p\n    prime_prime << p if prime_cache.include?(i + 1)\n  end\n  prime_prime.inject(0){|s,i| s + i }\nend\n\n\n\n\nP = get_p(30)\nQ = g(P)\nR = h(Q)\n\nputs \"P: #{P}, Q: #{Q}, R: #{R}\"\n```\n\n", "tags": ["Ruby", "codeiq"]}