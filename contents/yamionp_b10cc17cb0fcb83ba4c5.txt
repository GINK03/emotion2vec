{"context": " More than 1 year has passed since last update.\n\nLocust\u3067Websocket\u306e\u8ca0\u8377\u8a66\u9a13\u3092\u3059\u308b\nlocust\u826f\u3044\u3067\u3059\u3088\u306d\u3002 locust\u3002\u6700\u8fd1\u306e\u8ca0\u8377\u8a66\u9a13\u306f\u5168\u90e8locust\u3067\u6e08\u307e\u305b\u3066\u3044\u307e\u3059\u3002\u8907\u96d1\u306a\u30b7\u30ca\u30ea\u30aa\u3067\u3082python\u3067\u304b\u3051\u308b\u306e\u3067\u3059\u3054\u3044\u697d\u3067\u3059\u3002\n\u3068\u306f\u3044\u3048\u6700\u8fd1\u306f\u5e38\u6642\u63a5\u7d9a\u578b\u306e\u30a2\u30d7\u30ea\u3082\u5897\u3048\u3066\u304d\u3066\u5358\u7d14\u306areq/res\u30e2\u30c7\u30eb\u3067\u306f\u3046\u307e\u304f\u8ca0\u8377\u304c\u304b\u3051\u308c\u306a\u3044\u72b6\u6cc1\u3082\u591a\u3044\u611f\u3058\u3067\u3059\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001Locust\u306e\u30bf\u30b9\u30af\u3067Websocket\u3092\u4f7f\u3063\u305f\u8ca0\u8377\u3092\u304b\u3051\u3066\u3001Web\u306e\u753b\u9762\u304b\u3089\u78ba\u8a8d\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3060\u3068\u5358\u4f4d\u304cms\u306a\u3093\u3067\u3059\u304c\u3001\u30bd\u30b1\u30c3\u30c8\u901a\u4fe1\u3067ms\u3060\u3068\u666e\u901a\u306b0\u304c\u9023\u767a\u3055\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u5358\u4f4d\u306f\u03bcs\u306b\u306a\u308a\u307e\u3059\u3002\n\u30b3\u30fc\u30c9\u307f\u308b\u3068\u308f\u304b\u308a\u307e\u3059\u304c\u5358\u306bTask\u306e\u4e2d\u3067socket\u3064\u304f\u3063\u3066\u901a\u4fe1\u3057\u3001\u7d50\u679c\u3092locust\u306b\u901a\u77e5\u3057\u3066\u308b\u3060\u3051\u306a\u306e\u3067locust\u672c\u4f53\u306b\u306f\u307e\u3063\u305f\u304f\u624b\u3092\u5165\u308c\u3066\u3044\u307e\u305b\u3093\u3002\nlocust\u306f\u8a2d\u8a08\u304c\u30b7\u30f3\u30d7\u30eb\u3067\u5206\u6563\u74b0\u5883\u306e\u69cb\u7bc9\u90e8\u5206\u3068\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u305f\u308a\u305d\u306e\u7d50\u679c\u3092\u96c6\u8a08\u3059\u308b\u90e8\u5206\u304c\u5206\u304b\u308c\u3066\u308b\u306e\u3067\u3053\u3046\u3044\u3046\u4e8b\u304c\u7c21\u5358\u306b\u51fa\u6765\u308b\u306e\u3082\u826f\u3044\u3067\u3059\u3002\n\nlocustfile.py\n# -*- coding:utf-8 -*-\nfrom __future__ import absolute_import\nfrom __future__ import unicode_literals\nfrom __future__ import print_function\n\nimport json\nimport uuid\nimport time\nimport gevent\n\nfrom websocket import create_connection\nimport six\n\nfrom locust import HttpLocust, TaskSet, task\nfrom locust.events import request_success\n\n\nclass ChatTaskSet(TaskSet):\n    def on_start(self):\n        self.user_id = six.text_type(uuid.uuid4())\n        ws = create_connection('ws://127.0.0.1:5000/chat')\n        self.ws = ws\n\n        def _receive():\n            while True:\n                res = ws.recv()\n                data = json.loads(res)\n                end_at = time.time()\n                response_time = int((end_at - data['start_at']) * 1000000)\n                request_success.fire(\n                    request_type='WebSocket Recv',\n                    name='test/ws/chat',\n                    response_time=response_time,\n                    response_length=len(res),\n                )\n\n        gevent.spawn(_receive)\n\n    @task\n    def sent(self):\n        start_at = time.time()\n        body = json.dumps({'message': 'hello, world', 'user_id': self.user_id, 'start_at': start_at})\n        self.ws.send(body)\n        request_success.fire(\n            request_type='WebSocket Sent',\n            name='test/ws/chat',\n            response_time=int((time.time() - start_at) * 1000000),\n            response_length=len(body),\n        )\n\n\n\nclass ChatLocust(HttpLocust):\n    task_set = ChatTaskSet\n    min_wait = 0\n    max_wait = 100\n\n\n\n\u30dd\u30a4\u30f3\u30c8\u306f events.request_success.fire \u3067\u7d50\u679c\u3092\u901a\u77e5\u3059\u308b\u4e8b\u3068\u3001\u53d7\u3051\u53d6\u308a\u7528\u306e gevent thread \u3092\u7acb\u3061\u4e0a\u3052\u308b\u4e8b\u3067\u3059\u3002\n\u666e\u901a\u306b\u53d7\u3051\u53d6\u308a\u3092@task\u306e\u4e2d\u3067\u5b9a\u7fa9\u3059\u308b\u3068\u305d\u306e\u9593task\u304c\u6b62\u307e\u308a\u3001\u540c\u3058TaskSet\u5185\u306e\u4ed6\u306etask\u3082\u30b9\u30c8\u30c3\u30d7\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u8ca0\u8377\u3092\u304b\u3051\u305f\u30b5\u30f3\u30d7\u30eb\u306eEcho&PubSub\u30b5\u30fc\u30d0\u30fc\u306f\u4ee5\u4e0b\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u306b\u306a\u308a\u307e\u3059\u3002\n\nserver.py\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import\nfrom __future__ import unicode_literals\nfrom __future__ import print_function\n\nfrom collections import defaultdict\nimport json\n\nfrom geventwebsocket.handler import WebSocketHandler\nfrom gevent.pywsgi import WSGIServer\nfrom flask import Flask, request\nfrom werkzeug.exceptions import abort\n\n\napp = Flask(__name__)\n\nctr = defaultdict(int)\n\n\n@app.route('/echo')\ndef echo():\n    ws = request.environ['wsgi.websocket']\n    if not ws:\n        abort(400)\n\n    while True:\n        message = ws.receive()\n        if message is not None:\n            r = json.loads(message)\n            ctr[r['user_id']] += 1\n\n        ws.send(message)\n\n\n@app.route('/report')\ndef report():\n    return '\\n'.join(['{}:\\t{}'.format(user_id, count) for user_id, count in ctr.items()])\n\n\nsocket_handlers = set()\n\n\n@app.route('/chat')\ndef chat():\n    ws = request.environ['wsgi.websocket']\n    socket_handlers.add(ws)\n\n    while True:\n        message = ws.receive()\n        for socket_handler in socket_handlers:\n            try:\n                socket_handler.send(message)\n            except:\n                socket_handlers.remove(socket_handler)\n\n\nif __name__ == '__main__':\n    http_server = WSGIServer(('', 5000), app, handler_class=WebSocketHandler)\n    http_server.serve_forever()\n\n\n\n\u30d5\u30a1\u30a4\u30eb\u306f\u4ee5\u4e0b\u306e\u30ec\u30dd\u30b8\u30c8\u30ea\u306b\u3082up\u3057\u3066\u3042\u308a\u307e\u3059\u3002\nhttps://gist.github.com/yamionp/9112dd6e54694d594306\n# Locust\u3067Websocket\u306e\u8ca0\u8377\u8a66\u9a13\u3092\u3059\u308b\n\nlocust\u826f\u3044\u3067\u3059\u3088\u306d\u3002 locust\u3002\u6700\u8fd1\u306e\u8ca0\u8377\u8a66\u9a13\u306f\u5168\u90e8locust\u3067\u6e08\u307e\u305b\u3066\u3044\u307e\u3059\u3002\u8907\u96d1\u306a\u30b7\u30ca\u30ea\u30aa\u3067\u3082python\u3067\u304b\u3051\u308b\u306e\u3067\u3059\u3054\u3044\u697d\u3067\u3059\u3002\n\n\u3068\u306f\u3044\u3048\u6700\u8fd1\u306f\u5e38\u6642\u63a5\u7d9a\u578b\u306e\u30a2\u30d7\u30ea\u3082\u5897\u3048\u3066\u304d\u3066\u5358\u7d14\u306areq/res\u30e2\u30c7\u30eb\u3067\u306f\u3046\u307e\u304f\u8ca0\u8377\u304c\u304b\u3051\u308c\u306a\u3044\u72b6\u6cc1\u3082\u591a\u3044\u611f\u3058\u3067\u3059\u3002\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001Locust\u306e\u30bf\u30b9\u30af\u3067Websocket\u3092\u4f7f\u3063\u305f\u8ca0\u8377\u3092\u304b\u3051\u3066\u3001Web\u306e\u753b\u9762\u304b\u3089\u78ba\u8a8d\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\n![websocketlocust.png](https://qiita-image-store.s3.amazonaws.com/0/14510/2856d6be-0864-4ed8-fcd9-8ec0b02afb77.png)\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3060\u3068\u5358\u4f4d\u304cms\u306a\u3093\u3067\u3059\u304c\u3001\u30bd\u30b1\u30c3\u30c8\u901a\u4fe1\u3067ms\u3060\u3068\u666e\u901a\u306b0\u304c\u9023\u767a\u3055\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u5358\u4f4d\u306f\u03bcs\u306b\u306a\u308a\u307e\u3059\u3002\n\u30b3\u30fc\u30c9\u307f\u308b\u3068\u308f\u304b\u308a\u307e\u3059\u304c\u5358\u306bTask\u306e\u4e2d\u3067socket\u3064\u304f\u3063\u3066\u901a\u4fe1\u3057\u3001\u7d50\u679c\u3092locust\u306b\u901a\u77e5\u3057\u3066\u308b\u3060\u3051\u306a\u306e\u3067locust\u672c\u4f53\u306b\u306f\u307e\u3063\u305f\u304f\u624b\u3092\u5165\u308c\u3066\u3044\u307e\u305b\u3093\u3002\n\nlocust\u306f\u8a2d\u8a08\u304c\u30b7\u30f3\u30d7\u30eb\u3067\u5206\u6563\u74b0\u5883\u306e\u69cb\u7bc9\u90e8\u5206\u3068\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u305f\u308a\u305d\u306e\u7d50\u679c\u3092\u96c6\u8a08\u3059\u308b\u90e8\u5206\u304c\u5206\u304b\u308c\u3066\u308b\u306e\u3067\u3053\u3046\u3044\u3046\u4e8b\u304c\u7c21\u5358\u306b\u51fa\u6765\u308b\u306e\u3082\u826f\u3044\u3067\u3059\u3002\n\n```locustfile.py\n# -*- coding:utf-8 -*-\nfrom __future__ import absolute_import\nfrom __future__ import unicode_literals\nfrom __future__ import print_function\n\nimport json\nimport uuid\nimport time\nimport gevent\n\nfrom websocket import create_connection\nimport six\n\nfrom locust import HttpLocust, TaskSet, task\nfrom locust.events import request_success\n\n\nclass ChatTaskSet(TaskSet):\n    def on_start(self):\n        self.user_id = six.text_type(uuid.uuid4())\n        ws = create_connection('ws://127.0.0.1:5000/chat')\n        self.ws = ws\n\n        def _receive():\n            while True:\n                res = ws.recv()\n                data = json.loads(res)\n                end_at = time.time()\n                response_time = int((end_at - data['start_at']) * 1000000)\n                request_success.fire(\n                    request_type='WebSocket Recv',\n                    name='test/ws/chat',\n                    response_time=response_time,\n                    response_length=len(res),\n                )\n\n        gevent.spawn(_receive)\n\n    @task\n    def sent(self):\n        start_at = time.time()\n        body = json.dumps({'message': 'hello, world', 'user_id': self.user_id, 'start_at': start_at})\n        self.ws.send(body)\n        request_success.fire(\n            request_type='WebSocket Sent',\n            name='test/ws/chat',\n            response_time=int((time.time() - start_at) * 1000000),\n            response_length=len(body),\n        )\n\n\n        \nclass ChatLocust(HttpLocust):\n    task_set = ChatTaskSet\n    min_wait = 0\n    max_wait = 100\n\n```\n\n\u30dd\u30a4\u30f3\u30c8\u306f events.request_success.fire \u3067\u7d50\u679c\u3092\u901a\u77e5\u3059\u308b\u4e8b\u3068\u3001\u53d7\u3051\u53d6\u308a\u7528\u306e gevent thread \u3092\u7acb\u3061\u4e0a\u3052\u308b\u4e8b\u3067\u3059\u3002\n\u666e\u901a\u306b\u53d7\u3051\u53d6\u308a\u3092@task\u306e\u4e2d\u3067\u5b9a\u7fa9\u3059\u308b\u3068\u305d\u306e\u9593task\u304c\u6b62\u307e\u308a\u3001\u540c\u3058TaskSet\u5185\u306e\u4ed6\u306etask\u3082\u30b9\u30c8\u30c3\u30d7\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\u3061\u306a\u307f\u306b\u8ca0\u8377\u3092\u304b\u3051\u305f\u30b5\u30f3\u30d7\u30eb\u306eEcho&PubSub\u30b5\u30fc\u30d0\u30fc\u306f\u4ee5\u4e0b\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u306b\u306a\u308a\u307e\u3059\u3002\n\n```server.py\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import\nfrom __future__ import unicode_literals\nfrom __future__ import print_function\n\nfrom collections import defaultdict\nimport json\n\nfrom geventwebsocket.handler import WebSocketHandler\nfrom gevent.pywsgi import WSGIServer\nfrom flask import Flask, request\nfrom werkzeug.exceptions import abort\n\n\napp = Flask(__name__)\n\nctr = defaultdict(int)\n\n\n@app.route('/echo')\ndef echo():\n    ws = request.environ['wsgi.websocket']\n    if not ws:\n        abort(400)\n\n    while True:\n        message = ws.receive()\n        if message is not None:\n            r = json.loads(message)\n            ctr[r['user_id']] += 1\n\n        ws.send(message)\n\n\n@app.route('/report')\ndef report():\n    return '\\n'.join(['{}:\\t{}'.format(user_id, count) for user_id, count in ctr.items()])\n\n\nsocket_handlers = set()\n\n\n@app.route('/chat')\ndef chat():\n    ws = request.environ['wsgi.websocket']\n    socket_handlers.add(ws)\n\n    while True:\n        message = ws.receive()\n        for socket_handler in socket_handlers:\n            try:\n                socket_handler.send(message)\n            except:\n                socket_handlers.remove(socket_handler)\n\n\nif __name__ == '__main__':\n    http_server = WSGIServer(('', 5000), app, handler_class=WebSocketHandler)\n    http_server.serve_forever()\n\n```\n\n\u30d5\u30a1\u30a4\u30eb\u306f\u4ee5\u4e0b\u306e\u30ec\u30dd\u30b8\u30c8\u30ea\u306b\u3082up\u3057\u3066\u3042\u308a\u307e\u3059\u3002\nhttps://gist.github.com/yamionp/9112dd6e54694d594306\n", "tags": ["locust", "Python", "\u8ca0\u8377\u8a66\u9a13"]}