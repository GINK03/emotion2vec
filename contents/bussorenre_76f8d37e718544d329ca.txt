{"context": "\u8272\u3005\u63a2\u3057\u305f\u3051\u3069\u3071\u3063\u3068\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3002\n\u65e2\u51fa\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u30b0\u30b0\u30e9\u30d3\u30ea\u30c6\u30a3\u304c\u4f4e\u304b\u3063\u305f\u3067\u3059\u3002\n\u53c2\u8003\u306b\u3057\u305f\u3082\u306e\u306f\n - Go Quickstart \u00a0|\u00a0 Drive REST API \u00a0|\u00a0 Google Developers\n - analytics - GoDoc\n - Dimensions & Metrics Explorer \u00a0|\u00a0 Analytics Reporting API V4 \u00a0|\u00a0 Google Developers\n\u307e\u305a\u3001Google API Console \u3067oauth\u7528\u306e\u8a8d\u8a3c\u30c8\u30fc\u30af\u30f3\u3092\u767a\u884c\u3059\u308b\uff08\u5272\u611b\u3002\u53c2\u8003\u8cc7\u6599\u306eGo Quickstart\u3092\u53c2\u7167\u306e\u4e8b\uff09\n\u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\n$ go get -u google.golang.org/api/drive/v3\n$ go get -u golang.org/x/oauth2/...\n\n\u4ee5\u4e0b\u304c\u304a\u304a\u307e\u304b\u306a\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059\u3002\n\nsample.go\n\npackage main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"log\"\n    \"net/http\"\n    \"net/url\"\n    \"os\"\n    \"os/user\"\n    \"path/filepath\"\n\n    \"golang.org/x/net/context\"\n    \"golang.org/x/oauth2\"\n    \"golang.org/x/oauth2/google\"\n    \"google.golang.org/api/analytics/v3\"\n)\n\n\nfunc getClient(ctx context.Context, config *oauth2.Config) *http.Client {\n    cacheFile, err := tokenCacheFile()\n    if err != nil {\n        log.Fatalf(\"Unable to get path to cached credential file. %v\", err)\n    }\n    token, err := tokenFromFile(cacheFile)\n    if err != nil {\n        token = getTokenFromWeb(config)\n        saveToken(cacheFile,token)\n    }\n\n    return config.Client(ctx, token)\n}\n\nfunc getTokenFromWeb(config *oauth2.Config) *oauth2.Token {\n    authURL := config.AuthCodeURL(\"state-token\", oauth2.AccessTypeOffline)\n    fmt.Printf(\"Go to the following link in your browser then type the authorization code : \\n%v \\n\", authURL)\n    var code string\n    if _, err := fmt.Scan(&code); err != nil {\n        log.Fatalf(\"Unable to read authorization code %v\", err)\n    }\n    token, err := config.Exchange(oauth2.NoContext, code)\n    if err != nil {\n        log.Fatalf(\"Unable to retrieve toke from web %v\", err)\n    }\n    return token\n\n}\n\nfunc tokenCacheFile() (string, error){\n    usr, err := user.Current()\n    if err != nil {\n        return \"\", err\n    }\n    tokenCacheDir := filepath.Join(usr.HomeDir, \".credentials\")\n    os.MkdirAll(tokenCacheDir, 0700)\n    return filepath.Join(tokenCacheDir, url.QueryEscape(\"google-api-tokens.json\")), err\n\n}\n\n\nfunc tokenFromFile(file string) (*oauth2.Token, error) {\n    f, err := os.Open(file)\n    if err != nil {\n        return nil, err\n    }\n    t := &oauth2.Token{}\n    err = json.NewDecoder(f).Decode(t)\n    defer f.Close()\n    return t,err\n}\n\n\nfunc saveToken(file string, token *oauth2.Token) {\n    fmt.Printf(\"Save credentials file to %s\\n\", file)\n    f,err := os.Create(file)\n    if err != nil {\n        log.Fatalf(\"Unable to cache oauth token: %v\", err)\n    }\n    defer f.Close()\n    json.NewEncoder(f).Encode(token)\n}\n\nfunc main() {\n    ctx := context.Background()\n\n    b, err := ioutil.ReadFile(\"client_secret.json\")\n    if err != nil {\n        log.Fatalf(\"Unable to read client secret file: %v\", err)\n    }\n    config, err := google.ConfigFromJSON(b, analytics.AnalyticsReadonlyScope)\n    if err != nil {\n        log.Fatalf(\"Unable to read client secret file: %v\", err)\n    }\n    client := getClient(ctx, config)\n\n\n    // Google Analytics \u3068\u63a5\u7d9a\u3059\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210\n    gasrv, err := analytics.New(client)\n    if err != nil {\n        log.Fatalf(\"Unable to Access Google Analytics: %v\", err)\n    }\n\n    // \u30a2\u30ab\u30a6\u30f3\u30c8\u304c\u6301\u3064\u5168\u3066\u306e\u30d7\u30ed\u30d5\u30a1\u30a4\u30ebID\u3092\u53d6\u5f97\n    accounts, err := gasrv.Management.Accounts.List().Do()\n    if err != nil {\n        log.Fatalf(\"Unable to Get Accounts List: %v\", err)\n    }\n    for _, account := range accounts.Items {\n       properties, err := gasrv.Management.Webproperties.List(account.Id).Do()\n       if err != nil {\n            log.Fatalf(\"Error: %v\", err)\n        }\n        for _, property := range properties.Items {\n            profiles, err := gasrv.Management.Profiles.List(account.Id, property.Id).Do()\n            if err != nil {\n                log.Fatalf(\"Error: %v\", err)\n            }\n            for _, profile := range profiles.Items {\n                result, err := gasrv.Data.Ga.Get(\"ga:\"+profile.Id, \"7daysAgo\", \"today\", \"ga:sessions\").Do()\n                if err != nil {\n                    log.Fatalf(\"\u3082\u3046\u30a8\u30e9\u30fc\u51e6\u7406\u306f\u5acc\u3060: %v\",err)\n                }\n                fmt.Println(\"\u9805\u76ee\u540d: \"+  result.ProfileInfo.ProfileName)\n                fmt.Printf(\"Total Sessions: \" + result.Rows[0][0]+\"\\n\\n\")\n            }\n        }\n    }\n}\n\n\n\n\u4ee5\u4e0a\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u8272\u3005\u63a2\u3057\u305f\u3051\u3069\u3071\u3063\u3068\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3002\n\u65e2\u51fa\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u30b0\u30b0\u30e9\u30d3\u30ea\u30c6\u30a3\u304c\u4f4e\u304b\u3063\u305f\u3067\u3059\u3002\n\n\u53c2\u8003\u306b\u3057\u305f\u3082\u306e\u306f\n - [Go Quickstart \u00a0|\u00a0 Drive REST API \u00a0|\u00a0 Google Developers](https://developers.google.com/drive/v3/web/quickstart/go)\n - [analytics - GoDoc](https://godoc.org/google.golang.org/api/analytics/v3)\n - [Dimensions & Metrics Explorer \u00a0|\u00a0 Analytics Reporting API V4 \u00a0|\u00a0 Google Developers](https://developers.google.com/analytics/devguides/reporting/core/dimsmets)\n\n\n\u307e\u305a\u3001Google API Console \u3067oauth\u7528\u306e\u8a8d\u8a3c\u30c8\u30fc\u30af\u30f3\u3092\u767a\u884c\u3059\u308b\uff08\u5272\u611b\u3002\u53c2\u8003\u8cc7\u6599\u306e[Go Quickstart](https://developers.google.com/drive/v3/web/quickstart/go)\u3092\u53c2\u7167\u306e\u4e8b\uff09\n\n\u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\n\n```\n$ go get -u google.golang.org/api/drive/v3\n$ go get -u golang.org/x/oauth2/...\n```\n\n\n\u4ee5\u4e0b\u304c\u304a\u304a\u307e\u304b\u306a\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059\u3002\n\n```go:sample.go\n\npackage main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"log\"\n    \"net/http\"\n    \"net/url\"\n    \"os\"\n    \"os/user\"\n    \"path/filepath\"\n\n    \"golang.org/x/net/context\"\n    \"golang.org/x/oauth2\"\n    \"golang.org/x/oauth2/google\"\n    \"google.golang.org/api/analytics/v3\"\n)\n\n\nfunc getClient(ctx context.Context, config *oauth2.Config) *http.Client {\n    cacheFile, err := tokenCacheFile()\n    if err != nil {\n        log.Fatalf(\"Unable to get path to cached credential file. %v\", err)\n    }\n    token, err := tokenFromFile(cacheFile)\n    if err != nil {\n        token = getTokenFromWeb(config)\n        saveToken(cacheFile,token)\n    }\n\n    return config.Client(ctx, token)\n}\n\nfunc getTokenFromWeb(config *oauth2.Config) *oauth2.Token {\n    authURL := config.AuthCodeURL(\"state-token\", oauth2.AccessTypeOffline)\n    fmt.Printf(\"Go to the following link in your browser then type the authorization code : \\n%v \\n\", authURL)\n    var code string\n    if _, err := fmt.Scan(&code); err != nil {\n        log.Fatalf(\"Unable to read authorization code %v\", err)\n    }\n    token, err := config.Exchange(oauth2.NoContext, code)\n    if err != nil {\n        log.Fatalf(\"Unable to retrieve toke from web %v\", err)\n    }\n    return token\n\n}\n\nfunc tokenCacheFile() (string, error){\n    usr, err := user.Current()\n    if err != nil {\n        return \"\", err\n    }\n    tokenCacheDir := filepath.Join(usr.HomeDir, \".credentials\")\n    os.MkdirAll(tokenCacheDir, 0700)\n    return filepath.Join(tokenCacheDir, url.QueryEscape(\"google-api-tokens.json\")), err\n\n}\n\n\nfunc tokenFromFile(file string) (*oauth2.Token, error) {\n    f, err := os.Open(file)\n    if err != nil {\n        return nil, err\n    }\n    t := &oauth2.Token{}\n    err = json.NewDecoder(f).Decode(t)\n    defer f.Close()\n    return t,err\n}\n\n\nfunc saveToken(file string, token *oauth2.Token) {\n    fmt.Printf(\"Save credentials file to %s\\n\", file)\n    f,err := os.Create(file)\n    if err != nil {\n        log.Fatalf(\"Unable to cache oauth token: %v\", err)\n    }\n    defer f.Close()\n    json.NewEncoder(f).Encode(token)\n}\n\nfunc main() {\n    ctx := context.Background()\n\n    b, err := ioutil.ReadFile(\"client_secret.json\")\n    if err != nil {\n        log.Fatalf(\"Unable to read client secret file: %v\", err)\n    }\n    config, err := google.ConfigFromJSON(b, analytics.AnalyticsReadonlyScope)\n    if err != nil {\n        log.Fatalf(\"Unable to read client secret file: %v\", err)\n    }\n    client := getClient(ctx, config)\n\n\n    // Google Analytics \u3068\u63a5\u7d9a\u3059\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210\n    gasrv, err := analytics.New(client)\n    if err != nil {\n        log.Fatalf(\"Unable to Access Google Analytics: %v\", err)\n    }\n\n    // \u30a2\u30ab\u30a6\u30f3\u30c8\u304c\u6301\u3064\u5168\u3066\u306e\u30d7\u30ed\u30d5\u30a1\u30a4\u30ebID\u3092\u53d6\u5f97\n    accounts, err := gasrv.Management.Accounts.List().Do()\n    if err != nil {\n        log.Fatalf(\"Unable to Get Accounts List: %v\", err)\n    }\n    for _, account := range accounts.Items {\n       properties, err := gasrv.Management.Webproperties.List(account.Id).Do()\n       if err != nil {\n            log.Fatalf(\"Error: %v\", err)\n        }\n        for _, property := range properties.Items {\n            profiles, err := gasrv.Management.Profiles.List(account.Id, property.Id).Do()\n            if err != nil {\n                log.Fatalf(\"Error: %v\", err)\n            }\n            for _, profile := range profiles.Items {\n                result, err := gasrv.Data.Ga.Get(\"ga:\"+profile.Id, \"7daysAgo\", \"today\", \"ga:sessions\").Do()\n                if err != nil {\n                    log.Fatalf(\"\u3082\u3046\u30a8\u30e9\u30fc\u51e6\u7406\u306f\u5acc\u3060: %v\",err)\n                }\n                fmt.Println(\"\u9805\u76ee\u540d: \"+  result.ProfileInfo.ProfileName)\n                fmt.Printf(\"Total Sessions: \" + result.Rows[0][0]+\"\\n\\n\")\n            }\n        }\n    }\n}\n\n```\n\n\n\u4ee5\u4e0a\u306b\u306a\u308a\u307e\u3059\u3002\n", "tags": ["golang", "Go", "GoogleAnalytics"]}