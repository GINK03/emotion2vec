{"context": " More than 1 year has passed since last update.Composite Value \u3068\u306f\u3001 PofEAA \u306b\u3042\u308b\u30d1\u30bf\u30fc\u30f3\u3067\u3001Entity \u304c\u6301\u3063\u3066\u3044\u308b\u5c5e\u6027\u3068\u306a\u308b\u30b7\u30f3\u30d7\u30eb\u306a Value Object \u3092\u3001\u305d\u306e Entity \u304c\u30de\u30c3\u30d7\u3055\u308c\u308b\u30c6\u30fc\u30d6\u30eb\u306e\u8907\u6570\u306e\u30ab\u30e9\u30e0\u3068\u3057\u3066\u30de\u30c3\u30d7\u3059\u308b\u3053\u3068\u3067\u3059\u3002\n\u4f3c\u305f\u30d1\u30bf\u30fc\u30f3\u3067 Serialized LOB \u3068\u3044\u3046\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092 JSON \u7b49\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066 BLOB \u3084 CLOB \u306b\u5165\u308c\u3066\u3057\u307e\u3046\u30d1\u30bf\u30fc\u30f3\u3082\u6709\u308a\u307e\u3059\u3002 Composite Value \u306f Serialized LOB \u306b\u6bd4\u3079\u308b\u3068\u3001 SQL \u304b\u3089\u4f7f\u3048\u308b\u3068\u3044\u3046\u30e1\u30ea\u30c3\u30c8\u304c\u6709\u308a\u307e\u3059\u3002\nSQLAlchemy \u3067 Composite Value \u3092\u3059\u308b\u4f8b\u306f\u3001\u672c\u5bb6\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3042\u308a\u307e\u3059\u3002\nComposite Column Types\n\u3067\u3059\u304c\u3001\u3053\u306e\u4f8b\u3067\u306f\u30aa\u30da\u30ec\u30fc\u30bf\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u7b49\u5024\u6bd4\u8f03\u3057\u304b\u3067\u304d\u307e\u305b\u3093\u3002\ncomparator_factory \u3092\u4f7f\u3046\u3068\u3001SQL\u306e\u751f\u6210\u90e8\u5206\u3082\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u308b\u306e\u3067\u3059\u304c\u3001\u305d\u306e\u90e8\u5206\u306e\u30b5\u30f3\u30d7\u30eb\u304c\u5206\u304b\u308c\u3066\u3044\u305f\u306e\u3067\u3001\u4e00\u7dd2\u306b\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n\u3053\u3061\u3089\u306e\u30b5\u30f3\u30d7\u30eb\u306e\u307b\u3046\u304c\u3001 named tuple \u3092\u4f7f\u3063\u3066 Value Object \u3092\u4f5c\u3063\u3066\u308b\u306e\u3067\u697d\u3092\u3067\u304d\u3066\u3044\u307e\u3059\u3002\n\ncomposite_example.py\n# -*- coding: utf-8 -*-\nfrom __future__ import division, print_function, absolute_import\n\nfrom collections import namedtuple\nfrom sqlalchemy import *\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm.properties import CompositeProperty\nfrom sqlalchemy.orm import composite, sessionmaker, configure_mapper\n\n# ORM tutorial \u3088\u308a\u30b3\u30d4\u30da\nBase = declarative_base()\nengine = create_engine('sqlite:///:memory:', echo=True)\nSession = sessionmaker(engine)\n\n\n# \u4eca\u56de\u306e Value Object \u3068\u306a\u308b Range \u578b\u3002 start \u3068 end\u3000\u304c\u3042\u308b\u3002\nclass Range(namedtuple('Range', 'start end')):\n\n    # \u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u30bf\u30d7\u30eb\u3067\u30de\u30c3\u30d7\u3055\u308c\u3066\u308b\u5024\u3092\u8fd4\u3059\u3093\u3060\u3051\u3069\u3001\n    # namedtuple \u306f\u30bf\u30d7\u30eb\u306a\u306e\u3067 self \u3092\u8fd4\u3059\u3060\u3051\u3067\u5341\u5206\n    def __composite_values__(self):\n        return self\n\n    # \u3053\u3063\u3061\u306f\u305f\u3060\u306e\u30e1\u30bd\u30c3\u30c9\u3002\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30e1\u30f3\u30d0\u7d4c\u7531\u3067\u4f7f\u3046\n    def includes(self, value):\n        return self.start <= value < self.end\n\n\n# \u3053\u3061\u3089\u304c SQL \u3092\u751f\u6210\u3059\u308b\u65b9\nclass RangeComparator(CompositeProperty.Comparator):\n    # SQL \u3092\u751f\u6210\u3059\u308b\u30e1\u30bd\u30c3\u30c9.  Value Object \u306e\u30e1\u30bd\u30c3\u30c9\u3068\u4f7f\u3044\u65b9\u3092\u5408\u308f\u305b\u3088\u3046\n    def includes(self, value):\n        # \u30de\u30c3\u30d7\u3055\u308c\u3066\u308b\u30ab\u30e9\u30e0\u3092\u53d6\u308a\u51fa\u3059\u3002\u3053\u306e\u90e8\u5206\u306f\u30b3\u30d4\u30da.\n        start, end = self.__clause_element__().clauses\n        # and_() \u3092\u4f7f\u3063\u3066 SQL \u3092\u751f\u6210.\n        return and_(start <= value, value < end)\n\n\n# \u30d8\u30eb\u30d1\u95a2\u6570\ndef range_composite(start, end):\n    return composite(Range, start, end, comparator_factory=RangeComparator)\n\n\nclass MyTable(Base):\n    __tablename__ = 'mytable'\n    id = Column(Integer, primary_key=True)\n    foo_start = Column(Integer)\n    foo_end = Column(Integer)\n    foo_range = range_composite(foo_start, foo_end)\n\n    def __repr__(self):\n        return \"MyTable(foo_start={0.foo_start!r}, foo_end={0.foo_end!r}\".format(self)\n\n\n# \u3053\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u4e0d\u8981. \u3060\u3051\u3069\u3001\u8907\u96d1\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u3053\u308c\u3092\u3084\u3063\u3066\u304a\u304b\u306a\u3044\u3068\n# \u8907\u6570\u306e\u30af\u30e9\u30b9\u3092\u307e\u305f\u304c\u308b\u30de\u30c3\u30d4\u30f3\u30b0\u304c\u5b8c\u6210\u3057\u3066\u306a\u304f\u3066SQL\u751f\u6210\u306b\u5931\u6557\u3059\u308b\u30b1\u30fc\u30b9\u304c\u3042\u308b\u306e\u3067\u3001\n# \u5168\u30e2\u30c7\u30eb\u3092\u5b9a\u7fa9\u3057\u305f\u5f8c\u306b\u3084\u3063\u3066\u304a\u3053\u3046\u3002\n# configure_mappers()\n\n\nprint(\"Create tables\")\nBase.metadata.create_all(engine)\n\nsession = Session()\nprint(\"Insert test data\")\nsession.add(MyTable(foo_start=10, foo_end=100))\nsession.add(MyTable(foo_start=100, foo_end=200))\nsession.add(MyTable(foo_start=1, foo_end=10))\nsession.commit()\n\nprint(\"Select using filter\")\n# RangeComparator.includes() \u3092\u4f7f\u3063\u3066 filter \u90e8\u5206\u3092\u69cb\u7bc9\u3067\u304d\u308b\nvalues = session.query(MyTable).filter(MyTable.foo_range.includes(42)).all()\nprint(\"values:\", values)\n\n# \u3082\u3061\u308d\u3093\u3001 Range.includes() \u306f\u666e\u901a\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u4f7f\u3048\u308b\nv = values[0]\nprint(\"test\")\nprint(9, v.foo_range.includes(9))\nprint(10, v.foo_range.includes(10))\nprint(99, v.foo_range.includes(99))\nprint(100, v.foo_range.includes(100))\n\n\n\u51fa\u529b\u306f\u3053\u3046\u306a\u308a\u307e\u3059\u3002\nCreate tables\n2014-01-15 22:59:15,334 INFO sqlalchemy.engine.base.Engine PRAGMA table_info(\"mytable\")\n2014-01-15 22:59:15,334 INFO sqlalchemy.engine.base.Engine ()\n2014-01-15 22:59:15,335 INFO sqlalchemy.engine.base.Engine\nCREATE TABLE mytable (\n    id INTEGER NOT NULL,\n    foo_start INTEGER,\n    foo_end INTEGER,\n    PRIMARY KEY (id)\n)\n\n\n2014-01-15 22:59:15,335 INFO sqlalchemy.engine.base.Engine ()\n2014-01-15 22:59:15,335 INFO sqlalchemy.engine.base.Engine COMMIT\nInsert test data\n2014-01-15 22:59:15,336 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)\n2014-01-15 22:59:15,337 INFO sqlalchemy.engine.base.Engine INSERT INTO mytable (foo_start, foo_end) VALUES (?, ?)\n2014-01-15 22:59:15,337 INFO sqlalchemy.engine.base.Engine (10, 100)\n2014-01-15 22:59:15,337 INFO sqlalchemy.engine.base.Engine INSERT INTO mytable (foo_start, foo_end) VALUES (?, ?)\n2014-01-15 22:59:15,337 INFO sqlalchemy.engine.base.Engine (100, 200)\n2014-01-15 22:59:15,338 INFO sqlalchemy.engine.base.Engine INSERT INTO mytable (foo_start, foo_end) VALUES (?, ?)\n2014-01-15 22:59:15,338 INFO sqlalchemy.engine.base.Engine (1, 10)\n2014-01-15 22:59:15,338 INFO sqlalchemy.engine.base.Engine COMMIT\nSelect using filter\n2014-01-15 22:59:15,339 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)\n2014-01-15 22:59:15,340 INFO sqlalchemy.engine.base.Engine SELECT mytable.id AS mytable_id, mytable.foo_start AS mytable_foo_start, mytable.foo_end AS mytable_foo_end\nFROM mytable\nWHERE mytable.foo_start <= ? AND mytable.foo_end > ?\n2014-01-15 22:59:15,340 INFO sqlalchemy.engine.base.Engine (42, 42)\nvalues: [MyTable(foo_start=10, foo_end=100]\ntest\n9 False\n10 True\n99 True\n100 False\n\n\nComposite Value \u3068\u306f\u3001 PofEAA \u306b\u3042\u308b\u30d1\u30bf\u30fc\u30f3\u3067\u3001Entity \u304c\u6301\u3063\u3066\u3044\u308b\u5c5e\u6027\u3068\u306a\u308b\u30b7\u30f3\u30d7\u30eb\u306a Value Object \u3092\u3001\u305d\u306e Entity \u304c\u30de\u30c3\u30d7\u3055\u308c\u308b\u30c6\u30fc\u30d6\u30eb\u306e\u8907\u6570\u306e\u30ab\u30e9\u30e0\u3068\u3057\u3066\u30de\u30c3\u30d7\u3059\u308b\u3053\u3068\u3067\u3059\u3002\n\n\u4f3c\u305f\u30d1\u30bf\u30fc\u30f3\u3067 Serialized LOB \u3068\u3044\u3046\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092 JSON \u7b49\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066 BLOB \u3084 CLOB \u306b\u5165\u308c\u3066\u3057\u307e\u3046\u30d1\u30bf\u30fc\u30f3\u3082\u6709\u308a\u307e\u3059\u3002 Composite Value \u306f Serialized LOB \u306b\u6bd4\u3079\u308b\u3068\u3001 SQL \u304b\u3089\u4f7f\u3048\u308b\u3068\u3044\u3046\u30e1\u30ea\u30c3\u30c8\u304c\u6709\u308a\u307e\u3059\u3002\n\nSQLAlchemy \u3067 Composite Value \u3092\u3059\u308b\u4f8b\u306f\u3001\u672c\u5bb6\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3042\u308a\u307e\u3059\u3002\n[Composite Column Types](http://docs.sqlalchemy.org/en/rel_0_9/orm/mapper_config.html#mapper-composite)\n\n\u3067\u3059\u304c\u3001\u3053\u306e\u4f8b\u3067\u306f\u30aa\u30da\u30ec\u30fc\u30bf\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u7b49\u5024\u6bd4\u8f03\u3057\u304b\u3067\u304d\u307e\u305b\u3093\u3002\n`comparator_factory` \u3092\u4f7f\u3046\u3068\u3001SQL\u306e\u751f\u6210\u90e8\u5206\u3082\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u308b\u306e\u3067\u3059\u304c\u3001\u305d\u306e\u90e8\u5206\u306e\u30b5\u30f3\u30d7\u30eb\u304c\u5206\u304b\u308c\u3066\u3044\u305f\u306e\u3067\u3001\u4e00\u7dd2\u306b\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n\u3053\u3061\u3089\u306e\u30b5\u30f3\u30d7\u30eb\u306e\u307b\u3046\u304c\u3001 named tuple \u3092\u4f7f\u3063\u3066 Value Object \u3092\u4f5c\u3063\u3066\u308b\u306e\u3067\u697d\u3092\u3067\u304d\u3066\u3044\u307e\u3059\u3002\n\n```python:composite_example.py\n# -*- coding: utf-8 -*-\nfrom __future__ import division, print_function, absolute_import\n\nfrom collections import namedtuple\nfrom sqlalchemy import *\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm.properties import CompositeProperty\nfrom sqlalchemy.orm import composite, sessionmaker, configure_mapper\n\n# ORM tutorial \u3088\u308a\u30b3\u30d4\u30da\nBase = declarative_base()\nengine = create_engine('sqlite:///:memory:', echo=True)\nSession = sessionmaker(engine)\n\n\n# \u4eca\u56de\u306e Value Object \u3068\u306a\u308b Range \u578b\u3002 start \u3068 end\u3000\u304c\u3042\u308b\u3002\nclass Range(namedtuple('Range', 'start end')):\n\n    # \u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u30bf\u30d7\u30eb\u3067\u30de\u30c3\u30d7\u3055\u308c\u3066\u308b\u5024\u3092\u8fd4\u3059\u3093\u3060\u3051\u3069\u3001\n    # namedtuple \u306f\u30bf\u30d7\u30eb\u306a\u306e\u3067 self \u3092\u8fd4\u3059\u3060\u3051\u3067\u5341\u5206\n    def __composite_values__(self):\n        return self\n\n    # \u3053\u3063\u3061\u306f\u305f\u3060\u306e\u30e1\u30bd\u30c3\u30c9\u3002\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30e1\u30f3\u30d0\u7d4c\u7531\u3067\u4f7f\u3046\n    def includes(self, value):\n        return self.start <= value < self.end\n\n\n# \u3053\u3061\u3089\u304c SQL \u3092\u751f\u6210\u3059\u308b\u65b9\nclass RangeComparator(CompositeProperty.Comparator):\n    # SQL \u3092\u751f\u6210\u3059\u308b\u30e1\u30bd\u30c3\u30c9.  Value Object \u306e\u30e1\u30bd\u30c3\u30c9\u3068\u4f7f\u3044\u65b9\u3092\u5408\u308f\u305b\u3088\u3046\n    def includes(self, value):\n        # \u30de\u30c3\u30d7\u3055\u308c\u3066\u308b\u30ab\u30e9\u30e0\u3092\u53d6\u308a\u51fa\u3059\u3002\u3053\u306e\u90e8\u5206\u306f\u30b3\u30d4\u30da.\n        start, end = self.__clause_element__().clauses\n        # and_() \u3092\u4f7f\u3063\u3066 SQL \u3092\u751f\u6210.\n        return and_(start <= value, value < end)\n\n\n# \u30d8\u30eb\u30d1\u95a2\u6570\ndef range_composite(start, end):\n    return composite(Range, start, end, comparator_factory=RangeComparator)\n\n\nclass MyTable(Base):\n    __tablename__ = 'mytable'\n    id = Column(Integer, primary_key=True)\n    foo_start = Column(Integer)\n    foo_end = Column(Integer)\n    foo_range = range_composite(foo_start, foo_end)\n\n    def __repr__(self):\n        return \"MyTable(foo_start={0.foo_start!r}, foo_end={0.foo_end!r}\".format(self)\n\n\n# \u3053\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u4e0d\u8981. \u3060\u3051\u3069\u3001\u8907\u96d1\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u3053\u308c\u3092\u3084\u3063\u3066\u304a\u304b\u306a\u3044\u3068\n# \u8907\u6570\u306e\u30af\u30e9\u30b9\u3092\u307e\u305f\u304c\u308b\u30de\u30c3\u30d4\u30f3\u30b0\u304c\u5b8c\u6210\u3057\u3066\u306a\u304f\u3066SQL\u751f\u6210\u306b\u5931\u6557\u3059\u308b\u30b1\u30fc\u30b9\u304c\u3042\u308b\u306e\u3067\u3001\n# \u5168\u30e2\u30c7\u30eb\u3092\u5b9a\u7fa9\u3057\u305f\u5f8c\u306b\u3084\u3063\u3066\u304a\u3053\u3046\u3002\n# configure_mappers()\n\n\nprint(\"Create tables\")\nBase.metadata.create_all(engine)\n\nsession = Session()\nprint(\"Insert test data\")\nsession.add(MyTable(foo_start=10, foo_end=100))\nsession.add(MyTable(foo_start=100, foo_end=200))\nsession.add(MyTable(foo_start=1, foo_end=10))\nsession.commit()\n\nprint(\"Select using filter\")\n# RangeComparator.includes() \u3092\u4f7f\u3063\u3066 filter \u90e8\u5206\u3092\u69cb\u7bc9\u3067\u304d\u308b\nvalues = session.query(MyTable).filter(MyTable.foo_range.includes(42)).all()\nprint(\"values:\", values)\n\n# \u3082\u3061\u308d\u3093\u3001 Range.includes() \u306f\u666e\u901a\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u4f7f\u3048\u308b\nv = values[0]\nprint(\"test\")\nprint(9, v.foo_range.includes(9))\nprint(10, v.foo_range.includes(10))\nprint(99, v.foo_range.includes(99))\nprint(100, v.foo_range.includes(100))\n```\n\n\u51fa\u529b\u306f\u3053\u3046\u306a\u308a\u307e\u3059\u3002\n\n```\nCreate tables\n2014-01-15 22:59:15,334 INFO sqlalchemy.engine.base.Engine PRAGMA table_info(\"mytable\")\n2014-01-15 22:59:15,334 INFO sqlalchemy.engine.base.Engine ()\n2014-01-15 22:59:15,335 INFO sqlalchemy.engine.base.Engine\nCREATE TABLE mytable (\n\tid INTEGER NOT NULL,\n\tfoo_start INTEGER,\n\tfoo_end INTEGER,\n\tPRIMARY KEY (id)\n)\n\n\n2014-01-15 22:59:15,335 INFO sqlalchemy.engine.base.Engine ()\n2014-01-15 22:59:15,335 INFO sqlalchemy.engine.base.Engine COMMIT\nInsert test data\n2014-01-15 22:59:15,336 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)\n2014-01-15 22:59:15,337 INFO sqlalchemy.engine.base.Engine INSERT INTO mytable (foo_start, foo_end) VALUES (?, ?)\n2014-01-15 22:59:15,337 INFO sqlalchemy.engine.base.Engine (10, 100)\n2014-01-15 22:59:15,337 INFO sqlalchemy.engine.base.Engine INSERT INTO mytable (foo_start, foo_end) VALUES (?, ?)\n2014-01-15 22:59:15,337 INFO sqlalchemy.engine.base.Engine (100, 200)\n2014-01-15 22:59:15,338 INFO sqlalchemy.engine.base.Engine INSERT INTO mytable (foo_start, foo_end) VALUES (?, ?)\n2014-01-15 22:59:15,338 INFO sqlalchemy.engine.base.Engine (1, 10)\n2014-01-15 22:59:15,338 INFO sqlalchemy.engine.base.Engine COMMIT\nSelect using filter\n2014-01-15 22:59:15,339 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)\n2014-01-15 22:59:15,340 INFO sqlalchemy.engine.base.Engine SELECT mytable.id AS mytable_id, mytable.foo_start AS mytable_foo_start, mytable.foo_end AS mytable_foo_end\nFROM mytable\nWHERE mytable.foo_start <= ? AND mytable.foo_end > ?\n2014-01-15 22:59:15,340 INFO sqlalchemy.engine.base.Engine (42, 42)\nvalues: [MyTable(foo_start=10, foo_end=100]\ntest\n9 False\n10 True\n99 True\n100 False\n```", "tags": ["Python", "sqlalchemy"]}