{"context": "\n\n\u9806\u5e8f\u306a\u3057\u30ea\u30b9\u30c8\u3068\u3057\u3066\u306e\u96c6\u5408\n; 2.3.3 \u96c6\u5408\u3092\u8868\u73fe\u3059\u308b\n\n; \u9806\u5e8f\u306a\u3057\u30ea\u30b9\u30c8\u3068\u3057\u3066\u306e\u96c6\u5408\n\n; \u96c6\u5408\u306bx\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u304b\uff1f\n(define (element-of-set? x set)\n    (cond \n        ((null? set) #f)\n        ((equal? x (car set)) #t)\n    (else (element-of-set? x (cdr set)))))\n\n\n; \u96c6\u5408\u306e\u7a4d intersection-set \n(define (intersection-set set1 set2)\n    (cond \n        ((or (null? set1) (null? set2)) '())\n        ((element-of-set? (car set1) set2)\n            (cons (car set1) (intersection-set (cdr set1) set2)))\n    (else (intersection-set (cdr set1) set2))))\n\n\n; Test\n(define s1 (list 1 2 3))\n(define s2 (list 1 3 5))\n\n(print \"s1:\" s1)\n(print \"s2:\" s2)\n\n(print \"\u8981\u7d20\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u304b\")\n(print \"(element-of-set? 1 s1):\" (element-of-set? 1 s1))\n(print \"(element-of-set? 10 s1):\" (element-of-set? 10 s1))\n\ns1:(1 2 3)\ns2:(1 3 5)\n\u8981\u7d20\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u304b\n(element-of-set? 1 s1):#t\n(element-of-set? 10 s1):#f\n\n\nEx 2.59\n(print \"===Ex 2.59===\")\n;\u7df4\u7fd2\u554f\u984c 2.59: \u9806\u5e8f\u306a\u3057\u30ea\u30b9\u30c8\u3068\u3057\u3066\u8868\u73fe\u3057\u305f\u96c6\u5408\u306b\u5bfe\u3059\u308b\n;union-set \u6f14\u7b97\u3092\u5b9f\u88c5\u305b\u3088\u3002\n\n(define (union-set base target)\n    ;(print \"base: \" base \"target: \" target)\n    (cond \n        ((null? target) base)\n        ((not (element-of-set? (car target) base)) \n            (union-set (cons (car target) base) (cdr target)))\n    (else (union-set base (cdr target))))\n)\n\n(print \"(union-set s1 s2):\" (union-set s1 s2))\n\nbase: (1 2 3)target: (1 3 5)\nbase: (1 2 3)target: (3 5)\nbase: (1 2 3)target: (5)\nbase: ((1 2 3) . 5)target: ()\n(union-set s1 s2):(5 1 2 3)\n\n\nEx 2.60\n\n\u5f93\u6765\u306e\u91cd\u8907\u306a\u3057\u306e\u30ea\u30b9\u30c8\u3067\u8868\u73fe\u3057\u305f\u5834\u5408\n\n\n\n\u540d\u524d\n\u610f\u5473\n\u8a08\u7b97\u91cf\n\n\n\n\nelement-of-set?\n\u542b\u3080\u304b\nO(n)\n\n\nadjoin-set\n\u8981\u7d20\u306e\u8ffd\u52a0\nO(n)\n\n\nunion-set\n\u8981\u7d20\u306e\u8ad6\u7406\u548c\nO(n^2)\n\n\nintersection-set\n\u8981\u7d20\u306e\u8ad6\u7406\u7a4d\nO(n^2)\n\n\n\n\n\u91cd\u8907\u3042\u308a\u306e\u30ea\u30b9\u30c8\u3067\u8868\u73fe\u3057\u305f\u5834\u5408\n\n\n\n\u540d\u524d\n\u610f\u5473\n\u8a08\u7b97\u91cf\n\n\n\n\nelement-of-set?\n\u542b\u3080\u304b\nO(n)\n\n\nadjoin-set\n\u8981\u7d20\u306e\u8ffd\u52a0\nO(1)\n\n\nunion-set\n\u8981\u7d20\u306e\u8ad6\u7406\u548c\nO(n)\n\n\nintersection-set\n\u8981\u7d20\u306e\u8ad6\u7406\u7a4d\nO(n^2)\n\n\n\n\u203b\u305f\u3060\u3057n\u304c\u30c9\u30f3\u30c9\u30f3\u304a\u3063\u304d\u304f\u306a\u3063\u3066\u304f\u3088\u306d\u30fb\u30fb\u30fb\n(print \"===Ex 2.60===\")\n;\u4e0a\u306e\u4f8b\u3067\u306f\u3001\u96c6\u5408\u306f\u91cd\u8907\u306e\u306a\u3044\u30ea\u30b9\u30c8\u3068\u3057\u3066\u8868\u73fe\u3059\n;\u308b\u3088\u3046\u898f\u5b9a\u3057\u305f\u3002\u3053\u3053\u3067\u3001\u91cd\u8907\u3092\u8a31\u3059\u5834\u5408\u306b\u3064\u3044\u3066\u8003\u3048\u3066\u307f\u3088\u3046\u3002\u305d\n;\u306e\u5834\u5408\u3001\u4f8b\u3048\u3070 {1, 2, 3} \u3068\u3044\u3046\u96c6\u5408\u306f (2 3 2 1 3 2 2) \u3068\u3044\u3046\u30ea\u30b9\n;\u30c8\u3068\u3057\u3066\u8868\u73fe\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\u3053\u306e\u8868\u73fe\u306b\u5bfe\u3057\u3066\u6f14\u7b97\u3092\u884c\u3046\u624b\u7d9a\n;\u304d element-of-set?, adjoin-set, union-set, intersection-set\n;\u3092\u8a2d\u8a08\u305b\u3088\u3002\u305d\u308c\u305e\u308c\u306e\u52b9\u7387\u306f\u3001\u91cd\u8907\u306a\u3057\u8868\u73fe\u306b\u5bfe\u3059\u308b\u624b\u7d9a\u304d\u3067\n;\u305d\u308c\u306b\u5bfe\u5fdc\u3059\u308b\u3082\u306e\u3068\u6bd4\u3079\u3066\u3069\u3046\u3060\u308d\u3046\u304b\u3002\u91cd\u8907\u306a\u3057\u306e\u8868\u73fe\u3088\u308a\n;\u3082\u3053\u306e\u8868\u73fe\u306e\u307b\u3046\u304c\u5411\u3044\u3066\u3044\u308b\u3088\u3046\u306a\u5fdc\u7528\u306f\u3042\u308b\u3060\u308d\u3046\u304b\u3002\n\n;adjoin-set: \u8981\u7d20\u306e\u8ffd\u52a0\n;intersection: \u7a4d\n;union-set: \u548c\n\n(define (adjoin-set x set) (cons set x))\n\n(define (union-set set1 set2)\n    (append set1 set2)\n)\n\n(print \"(adjoin-set 5 s1): \" (adjoin-set 5 s1))\n(print \"(adjoin-set s2 s1): \" (adjoin-set s2 s1))\n\n\n(adjoin-set 5 s1): ((1 2 3) . 5)\n(adjoin-set s2 s1): ((1 2 3) 1 3 5)\n\n\u96d1\u8ac7\u30e1\u30e2\n> \u91cd\u8907\u307f\u306a\u3044\u306e\u3001\u624b\u629c\u304d\u3063\u307d\u3044\u306e\u306b\u51e6\u7406\u91cf\u3078\u308b\u306e\u306a\u3093\u3060\u304b\u3075\u3057\u304e\u301c\u301c\n\n\u8a08\u7b97\u91cf\u306f\u6e1b\u308a\u307e\u3059\u3051\u3069\nset(\u96c6\u5408)\u306e\u76ee\u7684\u3068\u3057\u3066\u3001\u300c\u301c\u306f\u542b\u307e\u308c\u3066\u3044\u308b\u304b\u300d \u306e element-of-set\u304c (edited)\n\u30e1\u30a4\u30f3\u3067\u4f7f\u308f\u308c\u308b\u3082\u306e\u3060\u3068\u601d\u3046\u306e\u3067 (edited)\n\u671f\u5f85\u3067\u304d\u308b\u6642\u9593\u3068\u3057\u3066\u306f\u5727\u5012\u7684\u306b\u306e\u3073\u307e\u3059\u3088\u306d\u3002\n\u7d50\u5c40union, intersection\u3057\u3066\u3082\u3001\u3064\u304b\u308f\u306a\u304b\u3063\u305f\u3089\u610f\u5473\u306a\u3044\u3067\u3059\u3057\u30fb\u30fb\u30fb\u3002\n\n> \u306a\u308b\u307b\u3069\u3002\n\n\u7d50\u5c40\u3001\u3069\u306e\u51e6\u7406\u3092\uff11\u756a\u30e1\u30a4\u30f3\u306b\u4f7f\u3046\u304b\u3002\u30e1\u30a4\u30f3\u3067\u4f7f\u3046\u95a2\u6570\u306e\u8a08\u7b97\u91cf\u3092\u6e1b\u3089\u305b\u308b\u5b9f\u88c5\u306b\u3059\u308b\u306e\u304c\u5927\u4e8b\u3067\u3059\u306d\u301c\uff1e\uff1c\n\n\n\u9806\u5e8f\u3064\u304d\u30ea\u30b9\u30c8\u3068\u3057\u3066\u306e\u96c6\u5408\n\nEx 2.61\n\n\u9806\u5e8f\u3042\u308a\u306e\u30ea\u30b9\u30c8\u3067\u8868\u73fe\u3057\u305f\u5834\u5408\n\n\n\n\u540d\u524d\n\u610f\u5473\n\u8a08\u7b97\u91cf\n\n\n\n\nelement-of-set?\n\u542b\u3080\u304b\nO(n)\n\n\nadjoin-set\n\u8981\u7d20\u306e\u8ffd\u52a0\nO(n)\n\n\nunion-set\n\u8981\u7d20\u306e\u8ad6\u7406\u548c\nO(n)\n\n\nintersection-set\n\u8981\u7d20\u306e\u8ad6\u7406\u7a4d\nO(n)\n\n\n\n\nelement-of-set?\n\u8a08\u7b97\u91cf\u3068\u3057\u3066\u306f\u5909\u308f\u3089\u306a\u3044\u3051\u3069\n\u5e73\u5747\u7684\u306b\u306f\u534a\u5206\u3057\u304b\u63a2\u7d22\u3057\u306a\u3044\u306e\u3067\u3001\n\u5b9f\u969b\u306e\u63a2\u7d22\u6642\u9593\u306f\u534a\u6e1b\u304c\u671f\u5f85\u3067\u304d\u308b\n\n\u8ad6\u7406\u548c\u3001\u8ad6\u7406\u7a4d\n\u9806\u5e8f\u4ed8\u3060\u3068\u3001element-of-set\u3092\u4f7f\u3063\u3066\u306e\u30c1\u30a7\u30c3\u30af\u3092\u3057\u306a\u304f\u3066\u6e08\u3080\u306e\u3067\u4e00\u6c17\u77ed\u304f\u306a\u308b\u266a O(n^2)-> O(n)\n(print \"===Ex2.61===\")\n;\u9806\u5e8f\u3064\u304d\u8868\u73fe\u3092\u4f7f\u3063\u305f adjoin-set \u3092\u5b9f\u88c5\u305b\u3088\u3002\n;element-of-set? \u304b\u3089\u985e\u63a8\u3057\u3066\u3001\u9806\u5e8f\u3064\u304d\u3067\u3042\u308b\u3053\u3068\u306e\u5229\u70b9\u3092\u751f\n;\u304b\u3057\u3066\u3001\u9806\u5e8f\u306a\u3057\u306e\u8868\u73fe\u306b\u6bd4\u3079\u3066\u5e73\u5747\u7684\u306b\u534a\u5206\u306e\u30b9\u30c6\u30c3\u30d7\u3092\u5fc5\u8981\n;\u3068\u3059\u308b\u624b\u7d9a\u304d\u3092\u4f5c\u308b\u3084\u308a\u65b9\u3092\u793a\u305b\u3002\n\n; \u305d\u3082\u305d\u3082\u30ea\u30b9\u30c8\u306e\u771f\u3093\u4e2d\u306b\u633f\u5165\u306fO(1)\u3067\u51fa\u6765\u308b\uff1f\n; 0~N \u307e\u3067\u306e\u30ea\u30b9\u30c8 \u3068 N~M\u307e\u3067\u306e\u30ea\u30b9\u30c8\u306b\u5206\u3051\u3089\u308c\u308b\u3063\u3051\u30fb\u30fb\u30fb\n\n\n(define (adjoin-set x set)\n\n    (cond \n        ((null? set) (list x))\n        ((= x (car set)) set)\n        ((< x (car set)) (cons x set))\n        (else \n            (cons (car set) (adjoin-set x (cdr set))))\n    )\n)\n\n\n(define s1 (list 1 2 3 4 5))\n(define s2 (list 1 3 5 7 9))\n(print \"s1:\" s1)\n(print \"s2:\" s2)\n(print \"(adjoin-set 5 s1):\" (adjoin-set 5 s1))\n(print \"(adjoin-set 4 s2):\" (adjoin-set 4 s2))\n\n\n\ns1:(1 2 3 4 5)\ns2:(1 3 5 7 9)\n(adjoin-set 5 s1):(1 2 3 4 5)\n(adjoin-set 4 s2):(1 3 4 5 7 9)\n\n\n\u30e1\u30e2\nPair\u3067\u9023\u7d50\u3055\u308c\u305f\u3084\u3064\u306e\u9593\u306b\u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b\u65b9\u6cd5\n\u2028(define s1 (list 1 2 3 4 5))\n(print (cons (car s1) (cons 100 (cdr s1))))\n\n; (1 100 2 3 4 5)\n; \u3053\u308c\u3067\uff11\u500b\u76ee\u306e\u8981\u7d20\u306e\u3042\u3068\u306b\u65b0\u3057\u3044\u8981\u7d20\u3092\u8ffd\u52a0\u3067\u304d\u308b\u3063\n\n\nEx 2.62\n(print \"===Ex2.62===\")\n; \u9806\u5e8f\u4ed8\u30ea\u30b9\u30c8O(n)\u3067union-set\u3092\u5b9f\u88c5\n\n(define (union-set base target)\n    (define (itr result l1 l2)\n        ;(print result \" \" l1 (null? l1) \" \" l2 (null? l2))\n        (cond\n            ((and (null? l1) (null? l2)) result)\n            ((or \n                (null? l2)\n                (and (not (null? l1)) (<= (car l1) (car l2))))\n             (itr (cons (car l1) result) (cdr l1) l2))\n            ;((or \n            ;    (null? l1)\n            ;    (and (not (null? l2)) (> (car l1) (car l2))))\n            (else\n             (itr (cons (car l2) result) l1 (cdr l2)))\n        )\n    )\n(reverse (itr (list) base target)))\n\n(define s1 (list 1 2 3 4 5))\n(define s2 (list 1 3 5 7 9))\n(print \"s1:\" s1)\n(print \"s2:\" s2)\n(print \"(union-set s1 s2):\" (union-set s1 s2))\n\n===Ex2.62===\ns1:(1 2 3 4 5)\ns2:(1 3 5 7 9)\n() (1 2 3 4 5)#f (1 3 5 7 9)#f\n(1) (2 3 4 5)#f (1 3 5 7 9)#f\n(1 1) (2 3 4 5)#f (3 5 7 9)#f\n(2 1 1) (3 4 5)#f (3 5 7 9)#f\n(3 2 1 1) (4 5)#f (3 5 7 9)#f\n(3 3 2 1 1) (4 5)#f (5 7 9)#f\n(4 3 3 2 1 1) (5)#f (5 7 9)#f\n(5 4 3 3 2 1 1) ()#t (5 7 9)#f\n(5 5 4 3 3 2 1 1) ()#t (7 9)#f\n(7 5 5 4 3 3 2 1 1) ()#t (9)#f\n(9 7 5 5 4 3 3 2 1 1) ()#t ()#t\n(union-set s1 s2):(1 1 2 3 3 4 5 5 7 9)\n\nhio\u3055\u3093\u5225\u89e3\n\u3053\u3063\u3061\u306e\u307b\u3046\u304c\u3057\u3093\u3077\u308b\u3060\u301c\n(define (union-set set1 set2)\n    (cond\n        ((null? set1) set2)\n        ((null? set2) set1)\n        (else\n            (let ((x1 (car set1)) (x2 (car set2)))\n                (cond\n                    ((= x1 x2)\n                        (cons x1 (union-set (cdr set1) (cdr set2))))\n                    ((< x1 x2)\n                        (cons x1 (union-set (cdr set1) set2)))\n                    ((< x2 x1)\n                        (cons x2 (union-set set1 (cdr set2)))))))))\n\n\n\u4e8c\u5206\u6728\u3068\u3057\u3066\u306e\u96c6\u5408\n\nEx 2.63\n(print \"===Ex2.63===\")\n(define (tree->list-1 tree)\n    (if (null? tree)\n        '()\n        (append (tree->list-1 (left-branch tree))\n            (cons (entry tree)\n            (tree->list-1\n            (right-branch tree))))))\n\n(define (tree->list-2 tree)\n    (define (copy-to-list tree result-list)\n        (if (null? tree)\n            result-list\n            (copy-to-list (left-branch tree)\n                (cons (entry tree)\n                    (copy-to-list\n                    (right-branch tree)\n                result-list )))))\n(copy-to-list tree '()))\n\n(define s (adjoin-set 5 '()))\n(define s2 (adjoin-set 10 s))\n(define s3 (adjoin-set 3 s2))\n(define s4 (adjoin-set 4 s3))   \n(print s4)\n;(5 (3 () (4 () ())) (10 () ()))\n\n;     5\n;    /\\\n;   3 10\n;   \\\n;    4\n\n(print (tree->list-1 s4))\n(print (tree->list-2 s4))\n;(3 4 5 10)\n;(3 4 5 10)\n\n(define s (adjoin-set 1 '()))  \n(define s (adjoin-set 2 s))\n(define s (adjoin-set 3 s))\n(define s (adjoin-set 4 s))\n(define s (adjoin-set 5 s))\n(define s (adjoin-set 6 s))\n(define s (adjoin-set 7 s))\n(print s)\n\n(print \"tree->list-1: \" (tree->list-1 s))\n(print \"tree->list-2: \" (tree->list-2 s))\n;tree->list-1: (1 2 3 4 5 6 7)\n;tree->list-2: (1 2 3 4 5 6 7)\n\n\n\na.\n\u304a\u3093\u306a\u3058\n\nb.\n1: O(nlogn) \u6bce\u56de\u534a\u5206\u305a\u3064append\u3059\u308b\u306e\u3067\n 2: O(n)\n\n\u30b5\u30f3\u30d7\u30eb\u306e\u4f5c\u308a\u65b9\n\u30b5\u30f3\u30d7\u30eb\u306e\u4f5c\u308a\u65b9\u306f\u3053\u3063\u3061\u306e\u65b9\u304c\u3044\u3044!\n\n(define s (fold adjoin-set '() (list 1 2 3 4 5 6 7)))\n; (1 () (2 () (3 () (4 () (5 () (6 () (7 () ())))))))\u2028\n\n\nmemo\n\u9577\u3055n \u306elist\u306b\u5225\u306e\u9577\u3055n\u306elist\u3092append\u3059\u308b\u306e\u3063\u3066Order\u7684\u306bn\n\nlog n \u56de tree->list-1\u304c\u547c\u3073\u51fa\u3055\u308c\u3066\n\u305d\u306e\u4e2d\u306eappend\u304cn\u3060\u304b\u3089\n1\u306f O(n log n)\n\n\nEx 2.64\nQuotient: \u4f59\u308a\n(print \"===Ex2.64===\")\n(define (list->tree elements)\n    (car (partial-tree elements (length elements))))\n\n\n(define (partial-tree elts n)\n    ;(print \"partial-tree  elts:\" elts \" n:\" n)\n    (if (= n 0)\n        (cons '() elts)\n        (let\n            (\n                (left-size (quotient (- n 1) 2)); leftsize = n / 2\n            ) \n            (let\n                (\n                    (left-result (partial-tree elts left-size)) ;leftresult = element\u306eleft-size\u5206\n                )\n                (let \n                    (\n                        (left-tree (car left-result))           ; left-tree         = left-result\u306e1\u3053\u3081\n                        (non-left-elts (cdr left-result))       ; non-left-elts     = leftresult\u306e\u306e\u3053\u308a\n                        (right-size (- n (+ left-size 1)))      ; right-size        = (n - leftsize) + 1\n                    )\n                    (let \n                        (\n                            (this-entry (car non-left-elts))    ; this entry = non-left-elts\u306e1\u3053\u3081\n                            (right-result                       ; right-result = left-result\u306e3\u3053\u3081\u4ee5\u964d\u306e\u6728\n                                (partial-tree\n                                    (cdr non-left-elts)\n                                    right-size))\n                        )\n                        (let \n                            (\n                                (right-tree (car right-result))     ; right-tree: right-result\u306e\uff11\u756a\u6700\u521d\n                                (remaining-elts (cdr right-result)) ; \u306e\u3053\u308a: right result\u306e2\u3053\u76ee\u4ee5\u964d\n                            )\n\n                            (cons\n                                (make-tree\n                                    this-entry\n                                    left-tree\n                                    right-tree)\n                                remaining-elts )\n                        )))))))\n\n(define l (list 1 2 3 4 5 6 7))\n\n\n\n;  2\n; /\\\n;1  3  (4 5 6 7)\n\n;  2                 5\n; /\\                /\\\n;1  3  \u3068 (4 ) \u3068  6  7\n; \n;     4\n;    /\\\n;  2    5\n; /\\   /\\\n;1  3  6  7\n\n\u6319\u52d5\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((1 () ()) 2 3 4 5 6 7)\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((3 () ()) 4 5 6 7)\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((2 (1 () ()) (3 () ())) 4 5 6 7)\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((5 () ()) 6 7)\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((7 () ()))\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((6 (5 () ()) (7 () ())))\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((4 (2 (1 () ()) (3 () ())) (6 (5 () ()) (7 () ()))))\n(4 (2 (1 () ()) (3 () ())) (6 (5 () ()) (7 () ())))\n\n;1-14\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((2 () ()) 3 4 5 6 7 8 9 10 11 12 13 14)\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((1 () (2 () ())) 3 4 5 6 7 8 9 10 11 12 13 14)\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((4 () ()) 5 6 7 8 9 10 11 12 13 14)\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((6 () ()) 7 8 9 10 11 12 13 14)\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((5 (4 () ()) (6 () ())) 7 8 9 10 11 12 13 14)\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((3 (1 () (2 () ())) (5 (4 () ()) (6 () ()))) 7 8 9 10 11 12  ...\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((8 () ()) 9 10 11 12 13 14)\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((10 () ()) 11 12 13 14)\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((9 (8 () ()) (10 () ())) 11 12 13 14)\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((12 () ()) 13 14)\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((14 () ()))\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((13 (12 () ()) (14 () ())))\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((11 (9 (8 () ()) (10 () ())) (13 (12 () ()) (14 () ()))))\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((7 (3 (1 () (2 () ())) (5 (4 () ()) (6 () ()))) (11 (9 (8 () ...\n(7 (3 (1 () (2 () ())) (5 (4 () ()) (6 () ()))) (11 (9 (8 () ()) (10 () ())) (13 (12 () ()) (14 () ()))))\n\n\n\u30ea\u30b9\u30c8\u306e\u771f\u3093\u4e2d\u3092\u3068\u3063\u3066\u304d\u3066\n\u305d\u3053\u304b\u3089\u771f\u3093\u4e2d\u4ee5\u5916\u306e\u5de6\u3068\u53f3\u306b\u308f\u3051\u308b\n1.\u7e70\u308a\u8fd4\u3057 \n\n\u307f\u305f\u3044\u306a\u3044\u3081\u30fc\u3058\na. \n(print (list->tree l))\n;     4\n;    / \\\n;  2     6\n; /\\     /\\\n;1  3   5  7\n\nb. \nO (n)\n\nEx.2.65\n(print \"===Ex2.65===\")\n\n;(\u8ad6\u7406\u548c)\n(define (union-set set1 set2)\n    (define (union-set-i set l)\n        ;(print set l)\n        (if \n            (null? l)\n            set\n            (let \n                (\n                    (first (car l))\n                    (lst (cdr l))) \n                (union-set-i (adjoin-set first set) lst)\n            )\n        )\n    )\n    (union-set-i set1 (tree->list-1 set2))\n)\n\n(define l1 (list 1 2 3 4 5 6 7))\n(define l2 (list 1 3 5 7 9))\n(print (union-set (list->tree l1) (list->tree l2)))\n\n1\u500b\u306e\u8981\u7d20\u8ffd\u52a0\u306b\u304b\u304b\u308b\u30b3\u30b9\u30c8\u304clog_n\n\u306a\u306e\u3067\u3053\u308c\u3060\u3068 O(n log_n)\n\n(print \"===O(n)===\")\n;; ?\n(define (union-set set1 set2)\n    (define (union-list base target)\n        ; \u6700\u5f8c\u306e\u8981\u7d20\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u8ffd\u52a0\n        (define (add x l)\n            (cond \n                ((null? l) (cons x l))\n                ((= (car l) x) l)\n                (else (cons x l))\n            ))\n\n        (define (itr result l1 l2)\n            (print result \" \" l1 (null? l1) \" \" l2 (null? l2))\n            (cond\n                ((and (null? l1) (null? l2)) result)\n                ;((null? l2) ())\n                ((or \n                    (null? l2)\n                    (and (not (null? l1)) (<= (car l1) (car l2))))\n                 (itr (add (car l1) result) (cdr l1) l2))\n                (else\n                    (itr (add (car l2) result) l1 (cdr l2)))\n\n            )\n        )\n    (reverse (itr (list) base target)))\n    (list->tree (union-list (tree->list-1 set1) (tree->list-1 set2)))\n)\n(print (union-set (list->tree l1) (list->tree l2)))\n\n;() (1 2 3 4 5 6 7)#f (1 3 5 7 9)#f\n;(1) (2 3 4 5 6 7)#f (1 3 5 7 9)#f\n;(1) (2 3 4 5 6 7)#f (3 5 7 9)#f\n;(2 1) (3 4 5 6 7)#f (3 5 7 9)#f\n;(3 2 1) (4 5 6 7)#f (3 5 7 9)#f\n;(3 2 1) (4 5 6 7)#f (5 7 9)#f\n;(4 3 2 1) (5 6 7)#f (5 7 9)#f\n;(5 4 3 2 1) (6 7)#f (5 7 9)#f\n;(5 4 3 2 1) (6 7)#f (7 9)#f\n;(6 5 4 3 2 1) (7)#f (7 9)#f\n;(7 6 5 4 3 2 1) ()#t (7 9)#f\n;(7 6 5 4 3 2 1) ()#t (9)#f\n;(9 7 6 5 4 3 2 1) ()#t ()#t\n;(1 2 3 4 5 6 7 9)\n;(4 (2 (1 () ()) (3 () ())) (6 (5 () ()) (7 () (9 () ()))))\n(print \"===intersection(\u7a4d)===\")\n(define (intersection-set set1 set2)\n    (define (intersection-list base target)\n        (print base target)\n        (if (or (null? base) (null? target))\n            '()\n            (let ((x1 (car base)) (x2 (car target)))\n                (cond \n                    ((= x1 x2) (cons x1 (intersection-list (cdr base) (cdr target))))\n                    ((< x1 x2) (intersection-list (cdr base) target))\n                    ((< x2 x1) (intersection-list base (cdr target)))))\n        )\n    )\n    (list->tree  (intersection-list (tree->list-1 set1) (tree->list-1 set2)))\n)\n(print (intersection-set (list->tree l1) (list->tree l2)))\n;(1 2 3 4 5 6 7)(1 3 5 7 9)\n;(2 3 4 5 6 7)(3 5 7 9)\n;(3 4 5 6 7)(3 5 7 9)\n;(4 5 6 7)(5 7 9)\n;(5 6 7)(5 7 9)\n;(6 7)(7 9)\n;(7)(7 9)\n;()(9)\n;(3 (1 () ()) (5 () (7 () ())))\n\n\u3053\u308c\u3060\u30682\u30fbn\u3067\u5b9f\u884c\u3067\u304d\u308b\u306e\u3067 O(n) \u304b\u306a\uff1f\n\n\u4e8c\u5206\u6728\u3067\u5b9f\u88c5\u3057\u305f\u5834\u5408\u306e\u8a08\u7b97\u91cf\n\n\n\n\u540d\u524d\n\u610f\u5473\n\u8a08\u7b97\u91cf(\u5e73\u5747)\n\u8a08\u7b97\u91cf(\u6700\u60aa)\n\n\n\n\nelement-of-set?\n\u542b\u3080\u304b\nO(log n)\nO(n)\n\n\nadjoin-set\n\u8981\u7d20\u306e\u8ffd\u52a0\nO(log n)\nO(n)\n\n\nunion-set\n\u8981\u7d20\u306e\u8ad6\u7406\u548c\nO(n)\nO(n)\n\n\nintersection-set\n\u8981\u7d20\u306e\u8ad6\u7406\u7a4d\nO(n)\nO(n)\n\n\n\n\nEx.2.66\n(print \"===Ex2.66===\")\n\n(define (make-record k v) (list k v))\n(define (key record) (car record))\n(define (value record) (cadr record))\n\n(define (lookup k records)\n    ;(print records)\n    (if \n        (null? records) \n        #f\n        (let \n            ((record (entry records)))\n            (cond \n                ((= k (key record)) (value record))\n                ((< k (key record)) (lookup k (left-branch records)))\n                ((> k (key record)) (lookup k (right-branch records)))\n            ))\n    )\n)\n\n\n(define _records\n    (list->tree\n    (list (make-record 1 \"a\") (make-record 2 \"b\") (make-record 3 \"ab\")))\n)\n\n(print (lookup 1 _records)) ;a\n(print (lookup 3 _records)) ;ab\n\n\n\n## \u9806\u5e8f\u306a\u3057\u30ea\u30b9\u30c8\u3068\u3057\u3066\u306e\u96c6\u5408\n\n```lisp\n; 2.3.3 \u96c6\u5408\u3092\u8868\u73fe\u3059\u308b\n\n; \u9806\u5e8f\u306a\u3057\u30ea\u30b9\u30c8\u3068\u3057\u3066\u306e\u96c6\u5408\n\n; \u96c6\u5408\u306bx\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u304b\uff1f\n(define (element-of-set? x set)\n    (cond \n        ((null? set) #f)\n        ((equal? x (car set)) #t)\n    (else (element-of-set? x (cdr set)))))\n\n\n; \u96c6\u5408\u306e\u7a4d intersection-set \n(define (intersection-set set1 set2)\n    (cond \n        ((or (null? set1) (null? set2)) '())\n        ((element-of-set? (car set1) set2)\n            (cons (car set1) (intersection-set (cdr set1) set2)))\n    (else (intersection-set (cdr set1) set2))))\n\n\n; Test\n(define s1 (list 1 2 3))\n(define s2 (list 1 3 5))\n\n(print \"s1:\" s1)\n(print \"s2:\" s2)\n\n(print \"\u8981\u7d20\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u304b\")\n(print \"(element-of-set? 1 s1):\" (element-of-set? 1 s1))\n(print \"(element-of-set? 10 s1):\" (element-of-set? 10 s1))\n```\n\n```\ns1:(1 2 3)\ns2:(1 3 5)\n\u8981\u7d20\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u304b\n(element-of-set? 1 s1):#t\n(element-of-set? 10 s1):#f\n```\n\n## Ex 2.59\n\n\n```lisp\n(print \"===Ex 2.59===\")\n;\u7df4\u7fd2\u554f\u984c 2.59: \u9806\u5e8f\u306a\u3057\u30ea\u30b9\u30c8\u3068\u3057\u3066\u8868\u73fe\u3057\u305f\u96c6\u5408\u306b\u5bfe\u3059\u308b\n;union-set \u6f14\u7b97\u3092\u5b9f\u88c5\u305b\u3088\u3002\n\n(define (union-set base target)\n    ;(print \"base: \" base \"target: \" target)\n    (cond \n        ((null? target) base)\n        ((not (element-of-set? (car target) base)) \n            (union-set (cons (car target) base) (cdr target)))\n    (else (union-set base (cdr target))))\n)\n\n(print \"(union-set s1 s2):\" (union-set s1 s2))\n```\n\n\n```\nbase: (1 2 3)target: (1 3 5)\nbase: (1 2 3)target: (3 5)\nbase: (1 2 3)target: (5)\nbase: ((1 2 3) . 5)target: ()\n(union-set s1 s2):(5 1 2 3)\n```\n\n## Ex 2.60\n\n### \u5f93\u6765\u306e\u91cd\u8907\u306a\u3057\u306e\u30ea\u30b9\u30c8\u3067\u8868\u73fe\u3057\u305f\u5834\u5408\n\n|\u540d\u524d|\u610f\u5473|\u8a08\u7b97\u91cf|\n|---|---|---|\n|element-of-set?|\u542b\u3080\u304b|O(n)|\n|adjoin-set|\u8981\u7d20\u306e\u8ffd\u52a0|O(n)|\n|union-set|\u8981\u7d20\u306e\u8ad6\u7406\u548c|O(n^2)|\n|intersection-set|\u8981\u7d20\u306e\u8ad6\u7406\u7a4d|O(n^2)|\n\n### \u91cd\u8907\u3042\u308a\u306e\u30ea\u30b9\u30c8\u3067\u8868\u73fe\u3057\u305f\u5834\u5408\n|\u540d\u524d|\u610f\u5473|\u8a08\u7b97\u91cf|\n|---|---|---|\n|element-of-set?|\u542b\u3080\u304b|O(n)|\n|adjoin-set|\u8981\u7d20\u306e\u8ffd\u52a0|O(1)|\n|union-set|\u8981\u7d20\u306e\u8ad6\u7406\u548c|O(n)|\n|intersection-set|\u8981\u7d20\u306e\u8ad6\u7406\u7a4d|O(n^2)|\n\u203b\u305f\u3060\u3057n\u304c\u30c9\u30f3\u30c9\u30f3\u304a\u3063\u304d\u304f\u306a\u3063\u3066\u304f\u3088\u306d\u30fb\u30fb\u30fb\n\n\n```lisp\n(print \"===Ex 2.60===\")\n;\u4e0a\u306e\u4f8b\u3067\u306f\u3001\u96c6\u5408\u306f\u91cd\u8907\u306e\u306a\u3044\u30ea\u30b9\u30c8\u3068\u3057\u3066\u8868\u73fe\u3059\n;\u308b\u3088\u3046\u898f\u5b9a\u3057\u305f\u3002\u3053\u3053\u3067\u3001\u91cd\u8907\u3092\u8a31\u3059\u5834\u5408\u306b\u3064\u3044\u3066\u8003\u3048\u3066\u307f\u3088\u3046\u3002\u305d\n;\u306e\u5834\u5408\u3001\u4f8b\u3048\u3070 {1, 2, 3} \u3068\u3044\u3046\u96c6\u5408\u306f (2 3 2 1 3 2 2) \u3068\u3044\u3046\u30ea\u30b9\n;\u30c8\u3068\u3057\u3066\u8868\u73fe\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\u3053\u306e\u8868\u73fe\u306b\u5bfe\u3057\u3066\u6f14\u7b97\u3092\u884c\u3046\u624b\u7d9a\n;\u304d element-of-set?, adjoin-set, union-set, intersection-set\n;\u3092\u8a2d\u8a08\u305b\u3088\u3002\u305d\u308c\u305e\u308c\u306e\u52b9\u7387\u306f\u3001\u91cd\u8907\u306a\u3057\u8868\u73fe\u306b\u5bfe\u3059\u308b\u624b\u7d9a\u304d\u3067\n;\u305d\u308c\u306b\u5bfe\u5fdc\u3059\u308b\u3082\u306e\u3068\u6bd4\u3079\u3066\u3069\u3046\u3060\u308d\u3046\u304b\u3002\u91cd\u8907\u306a\u3057\u306e\u8868\u73fe\u3088\u308a\n;\u3082\u3053\u306e\u8868\u73fe\u306e\u307b\u3046\u304c\u5411\u3044\u3066\u3044\u308b\u3088\u3046\u306a\u5fdc\u7528\u306f\u3042\u308b\u3060\u308d\u3046\u304b\u3002\n\n;adjoin-set: \u8981\u7d20\u306e\u8ffd\u52a0\n;intersection: \u7a4d\n;union-set: \u548c\n\n(define (adjoin-set x set) (cons set x))\n\n(define (union-set set1 set2)\n    (append set1 set2)\n)\n\n(print \"(adjoin-set 5 s1): \" (adjoin-set 5 s1))\n(print \"(adjoin-set s2 s1): \" (adjoin-set s2 s1))\n\n```\n\n```\n(adjoin-set 5 s1): ((1 2 3) . 5)\n(adjoin-set s2 s1): ((1 2 3) 1 3 5)\n```\n\n\u96d1\u8ac7\u30e1\u30e2\n\n```\n> \u91cd\u8907\u307f\u306a\u3044\u306e\u3001\u624b\u629c\u304d\u3063\u307d\u3044\u306e\u306b\u51e6\u7406\u91cf\u3078\u308b\u306e\u306a\u3093\u3060\u304b\u3075\u3057\u304e\u301c\u301c\n\n\u8a08\u7b97\u91cf\u306f\u6e1b\u308a\u307e\u3059\u3051\u3069\nset(\u96c6\u5408)\u306e\u76ee\u7684\u3068\u3057\u3066\u3001\u300c\u301c\u306f\u542b\u307e\u308c\u3066\u3044\u308b\u304b\u300d \u306e element-of-set\u304c (edited)\n\u30e1\u30a4\u30f3\u3067\u4f7f\u308f\u308c\u308b\u3082\u306e\u3060\u3068\u601d\u3046\u306e\u3067 (edited)\n\u671f\u5f85\u3067\u304d\u308b\u6642\u9593\u3068\u3057\u3066\u306f\u5727\u5012\u7684\u306b\u306e\u3073\u307e\u3059\u3088\u306d\u3002\n\u7d50\u5c40union, intersection\u3057\u3066\u3082\u3001\u3064\u304b\u308f\u306a\u304b\u3063\u305f\u3089\u610f\u5473\u306a\u3044\u3067\u3059\u3057\u30fb\u30fb\u30fb\u3002\n\n> \u306a\u308b\u307b\u3069\u3002\n\n\u7d50\u5c40\u3001\u3069\u306e\u51e6\u7406\u3092\uff11\u756a\u30e1\u30a4\u30f3\u306b\u4f7f\u3046\u304b\u3002\u30e1\u30a4\u30f3\u3067\u4f7f\u3046\u95a2\u6570\u306e\u8a08\u7b97\u91cf\u3092\u6e1b\u3089\u305b\u308b\u5b9f\u88c5\u306b\u3059\u308b\u306e\u304c\u5927\u4e8b\u3067\u3059\u306d\u301c\uff1e\uff1c\n```\n\n## \u9806\u5e8f\u3064\u304d\u30ea\u30b9\u30c8\u3068\u3057\u3066\u306e\u96c6\u5408\n\n## Ex 2.61\n\n### \u9806\u5e8f\u3042\u308a\u306e\u30ea\u30b9\u30c8\u3067\u8868\u73fe\u3057\u305f\u5834\u5408\n|\u540d\u524d|\u610f\u5473|\u8a08\u7b97\u91cf|\n|---|---|---|\n|element-of-set?|\u542b\u3080\u304b|O(n)|\n|adjoin-set|\u8981\u7d20\u306e\u8ffd\u52a0|O(n)|\n|union-set|\u8981\u7d20\u306e\u8ad6\u7406\u548c|O(n)|\n|intersection-set|\u8981\u7d20\u306e\u8ad6\u7406\u7a4d|O(n)|\n\n#### element-of-set? \n\u8a08\u7b97\u91cf\u3068\u3057\u3066\u306f\u5909\u308f\u3089\u306a\u3044\u3051\u3069\n\u5e73\u5747\u7684\u306b\u306f\u534a\u5206\u3057\u304b\u63a2\u7d22\u3057\u306a\u3044\u306e\u3067\u3001\n\u5b9f\u969b\u306e\u63a2\u7d22\u6642\u9593\u306f\u534a\u6e1b\u304c\u671f\u5f85\u3067\u304d\u308b\n\n#### \u8ad6\u7406\u548c\u3001\u8ad6\u7406\u7a4d\n\u9806\u5e8f\u4ed8\u3060\u3068\u3001element-of-set\u3092\u4f7f\u3063\u3066\u306e\u30c1\u30a7\u30c3\u30af\u3092\u3057\u306a\u304f\u3066\u6e08\u3080\u306e\u3067\u4e00\u6c17\u77ed\u304f\u306a\u308b\u266a O(n^2)-> O(n)\n\n\n```lisp\n(print \"===Ex2.61===\")\n;\u9806\u5e8f\u3064\u304d\u8868\u73fe\u3092\u4f7f\u3063\u305f adjoin-set \u3092\u5b9f\u88c5\u305b\u3088\u3002\n;element-of-set? \u304b\u3089\u985e\u63a8\u3057\u3066\u3001\u9806\u5e8f\u3064\u304d\u3067\u3042\u308b\u3053\u3068\u306e\u5229\u70b9\u3092\u751f\n;\u304b\u3057\u3066\u3001\u9806\u5e8f\u306a\u3057\u306e\u8868\u73fe\u306b\u6bd4\u3079\u3066\u5e73\u5747\u7684\u306b\u534a\u5206\u306e\u30b9\u30c6\u30c3\u30d7\u3092\u5fc5\u8981\n;\u3068\u3059\u308b\u624b\u7d9a\u304d\u3092\u4f5c\u308b\u3084\u308a\u65b9\u3092\u793a\u305b\u3002\n\n; \u305d\u3082\u305d\u3082\u30ea\u30b9\u30c8\u306e\u771f\u3093\u4e2d\u306b\u633f\u5165\u306fO(1)\u3067\u51fa\u6765\u308b\uff1f\n; 0~N \u307e\u3067\u306e\u30ea\u30b9\u30c8 \u3068 N~M\u307e\u3067\u306e\u30ea\u30b9\u30c8\u306b\u5206\u3051\u3089\u308c\u308b\u3063\u3051\u30fb\u30fb\u30fb\n\n\n(define (adjoin-set x set)\n\n    (cond \n        ((null? set) (list x))\n        ((= x (car set)) set)\n        ((< x (car set)) (cons x set))\n        (else \n            (cons (car set) (adjoin-set x (cdr set))))\n    )\n)\n\n\n(define s1 (list 1 2 3 4 5))\n(define s2 (list 1 3 5 7 9))\n(print \"s1:\" s1)\n(print \"s2:\" s2)\n(print \"(adjoin-set 5 s1):\" (adjoin-set 5 s1))\n(print \"(adjoin-set 4 s2):\" (adjoin-set 4 s2))\n\n\n```\n\n```\ns1:(1 2 3 4 5)\ns2:(1 3 5 7 9)\n(adjoin-set 5 s1):(1 2 3 4 5)\n(adjoin-set 4 s2):(1 3 4 5 7 9)\n```\n\n\n## \u30e1\u30e2\n\nPair\u3067\u9023\u7d50\u3055\u308c\u305f\u3084\u3064\u306e\u9593\u306b\u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b\u65b9\u6cd5\n\n```lisp\n\u2028(define s1 (list 1 2 3 4 5))\n(print (cons (car s1) (cons 100 (cdr s1))))\n\n; (1 100 2 3 4 5)\n; \u3053\u308c\u3067\uff11\u500b\u76ee\u306e\u8981\u7d20\u306e\u3042\u3068\u306b\u65b0\u3057\u3044\u8981\u7d20\u3092\u8ffd\u52a0\u3067\u304d\u308b\u3063\n```\n\n\n## Ex 2.62\n\n```lisp\n(print \"===Ex2.62===\")\n; \u9806\u5e8f\u4ed8\u30ea\u30b9\u30c8O(n)\u3067union-set\u3092\u5b9f\u88c5\n\n(define (union-set base target)\n    (define (itr result l1 l2)\n        ;(print result \" \" l1 (null? l1) \" \" l2 (null? l2))\n        (cond\n            ((and (null? l1) (null? l2)) result)\n            ((or \n                (null? l2)\n                (and (not (null? l1)) (<= (car l1) (car l2))))\n             (itr (cons (car l1) result) (cdr l1) l2))\n            ;((or \n            ;    (null? l1)\n            ;    (and (not (null? l2)) (> (car l1) (car l2))))\n            (else\n             (itr (cons (car l2) result) l1 (cdr l2)))\n        )\n    )\n(reverse (itr (list) base target)))\n\n(define s1 (list 1 2 3 4 5))\n(define s2 (list 1 3 5 7 9))\n(print \"s1:\" s1)\n(print \"s2:\" s2)\n(print \"(union-set s1 s2):\" (union-set s1 s2))\n```\n\n```\n===Ex2.62===\ns1:(1 2 3 4 5)\ns2:(1 3 5 7 9)\n() (1 2 3 4 5)#f (1 3 5 7 9)#f\n(1) (2 3 4 5)#f (1 3 5 7 9)#f\n(1 1) (2 3 4 5)#f (3 5 7 9)#f\n(2 1 1) (3 4 5)#f (3 5 7 9)#f\n(3 2 1 1) (4 5)#f (3 5 7 9)#f\n(3 3 2 1 1) (4 5)#f (5 7 9)#f\n(4 3 3 2 1 1) (5)#f (5 7 9)#f\n(5 4 3 3 2 1 1) ()#t (5 7 9)#f\n(5 5 4 3 3 2 1 1) ()#t (7 9)#f\n(7 5 5 4 3 3 2 1 1) ()#t (9)#f\n(9 7 5 5 4 3 3 2 1 1) ()#t ()#t\n(union-set s1 s2):(1 1 2 3 3 4 5 5 7 9)\n```\n\n\nhio\u3055\u3093\u5225\u89e3\n\u3053\u3063\u3061\u306e\u307b\u3046\u304c\u3057\u3093\u3077\u308b\u3060\u301c\n\n```lisp\n(define (union-set set1 set2)\n    (cond\n        ((null? set1) set2)\n        ((null? set2) set1)\n        (else\n            (let ((x1 (car set1)) (x2 (car set2)))\n                (cond\n                    ((= x1 x2)\n                        (cons x1 (union-set (cdr set1) (cdr set2))))\n                    ((< x1 x2)\n                        (cons x1 (union-set (cdr set1) set2)))\n                    ((< x2 x1)\n                        (cons x2 (union-set set1 (cdr set2)))))))))\n```\n\n## \u4e8c\u5206\u6728\u3068\u3057\u3066\u306e\u96c6\u5408\n\n## Ex 2.63\n\n```lisp\n(print \"===Ex2.63===\")\n(define (tree->list-1 tree)\n    (if (null? tree)\n        '()\n        (append (tree->list-1 (left-branch tree))\n            (cons (entry tree)\n            (tree->list-1\n            (right-branch tree))))))\n\n(define (tree->list-2 tree)\n    (define (copy-to-list tree result-list)\n        (if (null? tree)\n            result-list\n            (copy-to-list (left-branch tree)\n                (cons (entry tree)\n                    (copy-to-list\n                    (right-branch tree)\n                result-list )))))\n(copy-to-list tree '()))\n\n(define s (adjoin-set 5 '()))\n(define s2 (adjoin-set 10 s))\n(define s3 (adjoin-set 3 s2))\n(define s4 (adjoin-set 4 s3))   \n(print s4)\n;(5 (3 () (4 () ())) (10 () ()))\n\n;     5\n;    /\\\n;   3 10\n;   \\\n;    4\n\n(print (tree->list-1 s4))\n(print (tree->list-2 s4))\n;(3 4 5 10)\n;(3 4 5 10)\n\n(define s (adjoin-set 1 '()))  \n(define s (adjoin-set 2 s))\n(define s (adjoin-set 3 s))\n(define s (adjoin-set 4 s))\n(define s (adjoin-set 5 s))\n(define s (adjoin-set 6 s))\n(define s (adjoin-set 7 s))\n(print s)\n\n(print \"tree->list-1: \" (tree->list-1 s))\n(print \"tree->list-2: \" (tree->list-2 s))\n;tree->list-1: (1 2 3 4 5 6 7)\n;tree->list-2: (1 2 3 4 5 6 7)\n\n```\n\n### a.\n\n\u304a\u3093\u306a\u3058\n\n### b. \n 1: O(nlogn) \u6bce\u56de\u534a\u5206\u305a\u3064append\u3059\u308b\u306e\u3067\n 2: O(n)\n \n\n\n### \u30b5\u30f3\u30d7\u30eb\u306e\u4f5c\u308a\u65b9\n\n\u30b5\u30f3\u30d7\u30eb\u306e\u4f5c\u308a\u65b9\u306f\u3053\u3063\u3061\u306e\u65b9\u304c\u3044\u3044!\n\n\n```lisp\n\n(define s (fold adjoin-set '() (list 1 2 3 4 5 6 7)))\n; (1 () (2 () (3 () (4 () (5 () (6 () (7 () ())))))))\u2028\n```\n\n### memo\n\n```\n\u9577\u3055n \u306elist\u306b\u5225\u306e\u9577\u3055n\u306elist\u3092append\u3059\u308b\u306e\u3063\u3066Order\u7684\u306bn\n\nlog n \u56de tree->list-1\u304c\u547c\u3073\u51fa\u3055\u308c\u3066\n\u305d\u306e\u4e2d\u306eappend\u304cn\u3060\u304b\u3089\n1\u306f O(n log n)\n```\n\n\n## Ex 2.64\nQuotient: \u4f59\u308a\n\n```lisp\n(print \"===Ex2.64===\")\n(define (list->tree elements)\n    (car (partial-tree elements (length elements))))\n\n\n(define (partial-tree elts n)\n    ;(print \"partial-tree  elts:\" elts \" n:\" n)\n    (if (= n 0)\n        (cons '() elts)\n        (let\n            (\n                (left-size (quotient (- n 1) 2)); leftsize = n / 2\n            ) \n            (let\n                (\n                    (left-result (partial-tree elts left-size)) ;leftresult = element\u306eleft-size\u5206\n                )\n                (let \n                    (\n                        (left-tree (car left-result))           ; left-tree         = left-result\u306e1\u3053\u3081\n                        (non-left-elts (cdr left-result))       ; non-left-elts     = leftresult\u306e\u306e\u3053\u308a\n                        (right-size (- n (+ left-size 1)))      ; right-size        = (n - leftsize) + 1\n                    )\n                    (let \n                        (\n                            (this-entry (car non-left-elts))    ; this entry = non-left-elts\u306e1\u3053\u3081\n                            (right-result                       ; right-result = left-result\u306e3\u3053\u3081\u4ee5\u964d\u306e\u6728\n                                (partial-tree\n                                    (cdr non-left-elts)\n                                    right-size))\n                        )\n                        (let \n                            (\n                                (right-tree (car right-result))     ; right-tree: right-result\u306e\uff11\u756a\u6700\u521d\n                                (remaining-elts (cdr right-result)) ; \u306e\u3053\u308a: right result\u306e2\u3053\u76ee\u4ee5\u964d\n                            )\n                            \n                            (cons\n                                (make-tree\n                                    this-entry\n                                    left-tree\n                                    right-tree)\n                                remaining-elts )\n                        )))))))\n\n(define l (list 1 2 3 4 5 6 7))\n\n\n\n;  2\n; /\\\n;1  3  (4 5 6 7)\n\n;  2                 5\n; /\\                /\\\n;1  3  \u3068 (4 ) \u3068  6  7\n; \n;     4\n;    /\\\n;  2    5\n; /\\   /\\\n;1  3  6  7\n```\n\n\u6319\u52d5\n\n```\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((1 () ()) 2 3 4 5 6 7)\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((3 () ()) 4 5 6 7)\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((2 (1 () ()) (3 () ())) 4 5 6 7)\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((5 () ()) 6 7)\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((7 () ()))\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((6 (5 () ()) (7 () ())))\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((4 (2 (1 () ()) (3 () ())) (6 (5 () ()) (7 () ()))))\n(4 (2 (1 () ()) (3 () ())) (6 (5 () ()) (7 () ())))\n```\n\n```lisp\n;1-14\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((2 () ()) 3 4 5 6 7 8 9 10 11 12 13 14)\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((1 () (2 () ())) 3 4 5 6 7 8 9 10 11 12 13 14)\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((4 () ()) 5 6 7 8 9 10 11 12 13 14)\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((6 () ()) 7 8 9 10 11 12 13 14)\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((5 (4 () ()) (6 () ())) 7 8 9 10 11 12 13 14)\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((3 (1 () (2 () ())) (5 (4 () ()) (6 () ()))) 7 8 9 10 11 12  ...\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((8 () ()) 9 10 11 12 13 14)\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((10 () ()) 11 12 13 14)\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((9 (8 () ()) (10 () ())) 11 12 13 14)\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((12 () ()) 13 14)\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((14 () ()))\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((13 (12 () ()) (14 () ())))\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((11 (9 (8 () ()) (10 () ())) (13 (12 () ()) (14 () ()))))\n#?=\"./2.3.3.scm\":301:(cons (make-tree this-entry left-tree right-tree) remaining-elts)\n#?-    ((7 (3 (1 () (2 () ())) (5 (4 () ()) (6 () ()))) (11 (9 (8 () ...\n(7 (3 (1 () (2 () ())) (5 (4 () ()) (6 () ()))) (11 (9 (8 () ()) (10 () ())) (13 (12 () ()) (14 () ()))))\n```\n\n1. \u30ea\u30b9\u30c8\u306e\u771f\u3093\u4e2d\u3092\u3068\u3063\u3066\u304d\u3066\n2. \u305d\u3053\u304b\u3089\u771f\u3093\u4e2d\u4ee5\u5916\u306e\u5de6\u3068\u53f3\u306b\u308f\u3051\u308b\n3. 1.\u7e70\u308a\u8fd4\u3057 \n\n\u307f\u305f\u3044\u306a\u3044\u3081\u30fc\u3058\n\n\n\na. \n\n```lisp\n(print (list->tree l))\n;     4\n;    / \\\n;  2     6\n; /\\     /\\\n;1  3   5  7\n```\n\nb. \nO (n)\n\n## Ex.2.65\n\n```lisp\n(print \"===Ex2.65===\")\n\n;(\u8ad6\u7406\u548c)\n(define (union-set set1 set2)\n    (define (union-set-i set l)\n        ;(print set l)\n        (if \n            (null? l)\n            set\n            (let \n                (\n                    (first (car l))\n                    (lst (cdr l))) \n                (union-set-i (adjoin-set first set) lst)\n            )\n        )\n    )\n    (union-set-i set1 (tree->list-1 set2))\n)\n\n(define l1 (list 1 2 3 4 5 6 7))\n(define l2 (list 1 3 5 7 9))\n(print (union-set (list->tree l1) (list->tree l2)))\n```\n\n1\u500b\u306e\u8981\u7d20\u8ffd\u52a0\u306b\u304b\u304b\u308b\u30b3\u30b9\u30c8\u304clog_n\n\u306a\u306e\u3067\u3053\u308c\u3060\u3068 `O(n log_n)`\n\n```lisp\n\n(print \"===O(n)===\")\n;; ?\n(define (union-set set1 set2)\n    (define (union-list base target)\n        ; \u6700\u5f8c\u306e\u8981\u7d20\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u8ffd\u52a0\n        (define (add x l)\n            (cond \n                ((null? l) (cons x l))\n                ((= (car l) x) l)\n                (else (cons x l))\n            ))\n\n        (define (itr result l1 l2)\n            (print result \" \" l1 (null? l1) \" \" l2 (null? l2))\n            (cond\n                ((and (null? l1) (null? l2)) result)\n                ;((null? l2) ())\n                ((or \n                    (null? l2)\n                    (and (not (null? l1)) (<= (car l1) (car l2))))\n                 (itr (add (car l1) result) (cdr l1) l2))\n                (else\n                    (itr (add (car l2) result) l1 (cdr l2)))\n\n            )\n        )\n    (reverse (itr (list) base target)))\n    (list->tree (union-list (tree->list-1 set1) (tree->list-1 set2)))\n)\n(print (union-set (list->tree l1) (list->tree l2)))\n\n;() (1 2 3 4 5 6 7)#f (1 3 5 7 9)#f\n;(1) (2 3 4 5 6 7)#f (1 3 5 7 9)#f\n;(1) (2 3 4 5 6 7)#f (3 5 7 9)#f\n;(2 1) (3 4 5 6 7)#f (3 5 7 9)#f\n;(3 2 1) (4 5 6 7)#f (3 5 7 9)#f\n;(3 2 1) (4 5 6 7)#f (5 7 9)#f\n;(4 3 2 1) (5 6 7)#f (5 7 9)#f\n;(5 4 3 2 1) (6 7)#f (5 7 9)#f\n;(5 4 3 2 1) (6 7)#f (7 9)#f\n;(6 5 4 3 2 1) (7)#f (7 9)#f\n;(7 6 5 4 3 2 1) ()#t (7 9)#f\n;(7 6 5 4 3 2 1) ()#t (9)#f\n;(9 7 6 5 4 3 2 1) ()#t ()#t\n;(1 2 3 4 5 6 7 9)\n;(4 (2 (1 () ()) (3 () ())) (6 (5 () ()) (7 () (9 () ()))))\n(print \"===intersection(\u7a4d)===\")\n(define (intersection-set set1 set2)\n    (define (intersection-list base target)\n        (print base target)\n        (if (or (null? base) (null? target))\n            '()\n            (let ((x1 (car base)) (x2 (car target)))\n                (cond \n                    ((= x1 x2) (cons x1 (intersection-list (cdr base) (cdr target))))\n                    ((< x1 x2) (intersection-list (cdr base) target))\n                    ((< x2 x1) (intersection-list base (cdr target)))))\n        )\n    )\n    (list->tree  (intersection-list (tree->list-1 set1) (tree->list-1 set2)))\n)\n(print (intersection-set (list->tree l1) (list->tree l2)))\n;(1 2 3 4 5 6 7)(1 3 5 7 9)\n;(2 3 4 5 6 7)(3 5 7 9)\n;(3 4 5 6 7)(3 5 7 9)\n;(4 5 6 7)(5 7 9)\n;(5 6 7)(5 7 9)\n;(6 7)(7 9)\n;(7)(7 9)\n;()(9)\n;(3 (1 () ()) (5 () (7 () ())))\n```\n\n\u3053\u308c\u3060\u30682\u30fbn\u3067\u5b9f\u884c\u3067\u304d\u308b\u306e\u3067 `O(n)` \u304b\u306a\uff1f\n\n### \u4e8c\u5206\u6728\u3067\u5b9f\u88c5\u3057\u305f\u5834\u5408\u306e\u8a08\u7b97\u91cf\n|\u540d\u524d|\u610f\u5473|\u8a08\u7b97\u91cf(\u5e73\u5747)|\u8a08\u7b97\u91cf(\u6700\u60aa)|\n|---|---|---|---|\n|element-of-set?|\u542b\u3080\u304b|O(log n)|O(n)|\n|adjoin-set|\u8981\u7d20\u306e\u8ffd\u52a0|O(log n)|O(n)|\n|union-set|\u8981\u7d20\u306e\u8ad6\u7406\u548c|O(n)|O(n)\n|intersection-set|\u8981\u7d20\u306e\u8ad6\u7406\u7a4d|O(n)|O(n)|\n\n\n## Ex.2.66\n\n```lisp\n(print \"===Ex2.66===\")\n\n(define (make-record k v) (list k v))\n(define (key record) (car record))\n(define (value record) (cadr record))\n\n(define (lookup k records)\n    ;(print records)\n    (if \n        (null? records) \n        #f\n        (let \n            ((record (entry records)))\n            (cond \n                ((= k (key record)) (value record))\n                ((< k (key record)) (lookup k (left-branch records)))\n                ((> k (key record)) (lookup k (right-branch records)))\n            ))\n    )\n)\n\n\n(define _records\n    (list->tree\n    (list (make-record 1 \"a\") (make-record 2 \"b\") (make-record 3 \"ab\")))\n)\n\n(print (lookup 1 _records)) ;a\n(print (lookup 3 _records)) ;ab\n```\n", "tags": ["SICP"]}