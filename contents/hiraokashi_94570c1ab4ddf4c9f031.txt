{"context": "\u79c1\u304c\u958b\u767a\u3057\u3066\u3044\u308b\u30a2\u30d7\u30ea\u3067\u4f4d\u7f6e\u60c5\u5831\u3092\u3064\u304b\u3063\u305f\u6280\u8853\u3092\u5b9f\u88c5\u3057\u305f\u306e\u3067\u5171\u6709\u3057\u307e\u3059\u3002\n\n\u6982\u5ff5\u30fb\u57fa\u672c\n\u4f4d\u7f6e\u60c5\u5831\u3092\u6271\u3046\u969b\u306e\u57fa\u672c\u7684\u306a\u8a9e\u53e5\u3084\u6982\u5ff5\u3092\u6574\u7406\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\nGeolocation API\n\n\n\u30e6\u30fc\u30b6\u30fc\u306e\u4f4d\u7f6e\u60c5\u5831\u3092\u6271\u3046\u305f\u3081\u306eAPI\n\nHTML5\u304b\u3089JavaScript\u3067\u4f4d\u7f6e\u60c5\u5831\u3092\u53d6\u5f97\u3067\u304d\u308b\u3088\u3046\u306b\u6a19\u6e96\u5316\u3055\u308c\u3066\u3044\u308b\n\n getCurrentPosition() \u2026\u2026 \u30e6\u30fc\u30b6\u30fc\u306e\u73fe\u5728\u306e\u4f4d\u7f6e\u60c5\u5831\u3092\u4e00\u56de\u3060\u3051\u53d6\u5f97\u3059\u308b\n\n watchPosition() \u2026\u2026 \u30e6\u30fc\u30b6\u30fc\u306e\u4f4d\u7f6e\u60c5\u5831\u3092\u5b9a\u671f\u7684\u306b\u76e3\u8996\u3059\u308b\n\n clearWatch() \u2026\u2026 watchPosition()\u306b\u3088\u308b\u4f4d\u7f6e\u60c5\u5831\u306e\u76e3\u8996\u3092\u30af\u30ea\u30a2\u3059\u308b\n\n\u53c2\u8003\n\n\n\n\u30b8\u30aa\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\n\n\n\u5e83\u7fa9\u306b\u306f, \u5404\u7a2e\u60c5\u5831\u306b\u5bfe\u3057\u3066\u3001\u95a2\u9023\u3059\u308b\u5730\u7406\u5ea7\u6a19\uff08\u5178\u578b\u7684\u306b\u306f\u7def\u5ea6\u30fb\u7d4c\u5ea6\uff09\u3092\u4ed8\u52a0\u3059\u308b\u3053\u3068(wikipedia)\n\n\u72ed\u7fa9\u306b\u306f,  \u72ed\u7fa9\u306b\u306f\u5730\u540d\u3001\u4f4f\u6240\u304c\u793a\u3059\u5834\u6240\u306b\u5bfe\u3057\u3066\u3001\u5730\u7406\u5ea7\u6a19\u3092\u4e0e\u3048\u308b\u3053\u3068\u3092\u8a00\u3046(wikkipedia)\n\n\u4f8b\u3068\u3057\u3066\u306fGoogle Maps API \u3084 geocoder gem\n\n\n\u5b9f\u88c5\n\n\u3084\u308a\u305f\u304b\u3063\u305f\u3053\u3068\n\n\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u767b\u9332\u3057\u305f\u4f4d\u7f6e\u60c5\u5831\u3092googlemap\u3067\u8868\u793a\u3057\u305f\u3044\n\n\u73fe\u5728\u4f4d\u7f6e\u3092\u76e3\u8996\u3057\u3066\u3001\u7279\u5b9a\u306e\u4f4f\u6240\u306b\u8fd1\u3065\u3044\u305f\u3089\u753b\u9762\u306b\u901a\u77e5\u3092\u3060\u3059\n\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u683c\u7d0d\u3055\u308c\u305f\u4f4d\u7f6e\u60c5\u5831\u3092\u73fe\u5728\u4f4d\u7f6e\u306b\u8fd1\u3044\u9806\u306b\u8868\u793a\u3059\u308b \n\n\n\u3084\u308a\u305f\u3044\u3053\u3068\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u5b9f\u88c5\n\n\n\u30d5\u30ed\u30f3\u30c8\u5074\u3067\u73fe\u5728\u4f4d\u7f6e\u3092\u53d6\u5f97\u3059\u308b\n\n\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u4f4d\u7f6e\u60c5\u5831\u3092\u683c\u7d0d\u3059\u308b\n\nmap\u3078\u30b5\u30fc\u30d0\u306e\u4f4d\u7f6e\u60c5\u5831\u3092\u8868\u793a\u3059\u308b\n\n\u30d5\u30ed\u30f3\u30c8\u5074\u3067\uff12\u3064\u306e\u4f4d\u7f6e\u9593\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\u3059\u308b\n\n\u30b5\u30fc\u30d0\u5074\u3067\u8ddd\u96e2\u3092\uff12\u3064\u306e\u4f4d\u7f6e\u9593\u306e\u8a08\u7b97\u3059\u308b\n\n\n\u30d5\u30ed\u30f3\u30c8\u5074\u3067\u73fe\u5728\u4f4d\u7f6e\u3092\u53d6\u5f97\u3059\u308b\n\nget_current_pos.coffee\n    successCallback = (position) ->\n      # \u4f4d\u7f6e\u60c5\u5831\u304c\u6e21\u3063\u3063\u3066\u304f\u308b\u306e\u3067\u3001ajax\u3067\u304a\u304f\u308b\u306a\u3069\u3001\u8ddd\u96e2\u8a08\u7b97\u306b\u3064\u304b\u3046\u306a\u3069\u3059\u3048\n\n    errorCallback = (errors) ->\n        # \u30a8\u30e9\u30fc\u51e6\u7406\n\n    navigator.geolocation.getCurrentPosition(successCallback,errorCallback)\n\n\n\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u4f4d\u7f6e\u60c5\u5831\u3092\u683c\u7d0d\u3059\u308b\n\u53c2\u8003:Rails4\u3067GoogleMap\u3092\u8868\u793a\u3055\u305b\u308b\n\nGemFile\ngem 'geocoder'\ngem \"gmaps4rails\"\n\n\n\nspace.rb\nclass Space < ActiveRecord::Base\n  geocoded_by :address\n  after_validation :geocode\nend\n\n\nclass CreateSpaces < ActiveRecord::Migration\n  def change\n    create_table :spaces do |t|\n      t.string :address\n      t.decimal :latitude, precision: 9, scale: 6\n      t.decimal :longitude, precision: 10, scale: 6\n    end\n  end\nend\n\n\nGooglemap\u3078\u30b5\u30fc\u30d0\u306e\u4f4d\u7f6e\u60c5\u5831\u3092\u8868\u793a\u3059\u308b\n\u53c2\u8003:Rails4\u3067GoogleMap\u3092\u8868\u793a\u3055\u305b\u308b\n\napplication.html.slim\n    script[src=\"//maps.googleapis.com/maps/api/js?key=\u3042\u306a\u305f\u306e\u30ad\u30fc&libraries=geometry\" type=\"text/javascript\"]\n\n\n\napplication.js\n// \u30de\u30fc\u30ab\u30fc\u30af\u30e9\u30b9\u30bf\u30fc\u306e\u8aad\u307f\u8fbc\u307f\n// download here! \n// https://github.com/googlemaps/js-marker-clusterer\n//= reqire markerclusterer_compiled \n\n\n\n\nspaces_controller.rb\n  def show\n    # \u30de\u30fc\u30ab\u30fc\u30af\u30e9\u30b9\u30bf\u30fc\u306b\u6e21\u3059\u60c5\u5831\u3092\u751f\u6210\u3059\u308b\n    @hash = Gmaps4rails.build_markers([@space]) do |space, marker|\n      marker.lat space.latitude.to_f\n      marker.lng space.longitude.to_f\n      marker.infowindow space.name\n      marker.json(title: space.name)\n    end\n\n    @joined_users = @space.joined_users\n  end\n\n\n\nspaces/show.html.slim\n          .map_container\n            #map.space_map\n            javascript:\n\n              var latlng = new google.maps.LatLng( parseFloat(#{@hash[0][:lat]}), parseFloat(#{@hash[0][:lng]}) );\n              handler = Gmaps.build('Google');\n              handler.buildMap(\n                {provider: {}, internal: {id: 'map'}},\n                function(){\n                  markers = handler.addMarkers(#{raw  @hash.to_json});\n                  handler.bounds.extendWith(markers);\n                  handler.fitMapToBounds();\n                  handler.getMap().setCenter(latlng);\n                  handler.getMap().setZoom(15);\n                }\n              );\n\n\n\n\n\n\u30d5\u30ed\u30f3\u30c8\u5074\u3067\uff12\u3064\u306e\u4f4d\u7f6e\u9593\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\u3059\u308b\n\ngmap_util.coffee\n  calc_distance = (from_pos, to_pos) ->\n\n    from = new google.maps.LatLng( parseFloat(from_pos[0]), parseFloat(from_pos[1]) )\n    to = new google.maps.LatLng( parseFloat(to_pos[0]), parseFloat(to_pos[1]) )\n\n    google.maps.geometry.spherical.computeDistanceBetween(from, to)\n\n\n\n\n\u30b5\u30fc\u30d0\u5074\u3067\u8ddd\u96e2\u3092\uff12\u3064\u306e\u4f4d\u7f6e\u9593\u306e\u8a08\u7b97\u3059\u308b\n\nconfig/initializer/geocoder.rb\nGeocoder.configure(units: :km)\n\n\n\nspacr.rb\n  def distance(pos)\n    Geocoder::Calculations.distance_between([pos[0], pos[1]], [latitude, longitude]) * 1000.0\n  end\n# gem\u306e\u969b\u3068\u307f\u305f\u3089\u3044\u308d\u3044\u308d\u4fbf\u5229\u30e1\u30bd\u30c3\u30c9\u3042\u3063\u305f\n# if obj.geocoded?\n#  obj.nearbys(30)                      # other objects within 30 miles\n# obj.distance_from([40.714,-100.234]) # distance from arbitrary point to object\n#  obj.bearing_to(\"Paris, France\")      # direction from object to arbitrary point\nend\n\n\ngem geocoder\n\n\u53c2\u8003\nRails4\u3067GoogleMap\u3092\u8868\u793a\u3055\u305b\u308b\nGeolocation API\n\n[\u79c1\u304c\u958b\u767a\u3057\u3066\u3044\u308b\u30a2\u30d7\u30ea](https://coderstable.com)\u3067\u4f4d\u7f6e\u60c5\u5831\u3092\u3064\u304b\u3063\u305f\u6280\u8853\u3092\u5b9f\u88c5\u3057\u305f\u306e\u3067\u5171\u6709\u3057\u307e\u3059\u3002\n\n# \b\u6982\u5ff5\u30fb\u57fa\u672c\n\u4f4d\u7f6e\u60c5\u5831\u3092\u6271\u3046\u969b\u306e\u57fa\u672c\u7684\u306a\u8a9e\u53e5\u3084\u6982\u5ff5\u3092\u6574\u7406\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n### Geolocation API\n- [ ] \u30e6\u30fc\u30b6\u30fc\u306e\u4f4d\u7f6e\u60c5\u5831\u3092\u6271\u3046\u305f\u3081\u306eAPI\n- [ ] HTML5\u304b\u3089JavaScript\u3067\u4f4d\u7f6e\u60c5\u5831\u3092\u53d6\u5f97\u3067\u304d\u308b\u3088\u3046\u306b\u6a19\u6e96\u5316\u3055\u308c\u3066\u3044\u308b\n- [ ]  getCurrentPosition() \u2026\u2026 \u30e6\u30fc\u30b6\u30fc\u306e\u73fe\u5728\u306e\u4f4d\u7f6e\u60c5\u5831\u3092\u4e00\u56de\u3060\u3051\u53d6\u5f97\u3059\u308b\n- [ ]  watchPosition() \u2026\u2026 \u30e6\u30fc\u30b6\u30fc\u306e\u4f4d\u7f6e\u60c5\u5831\u3092\u5b9a\u671f\u7684\u306b\u76e3\u8996\u3059\u308b\n- [ ]  clearWatch() \u2026\u2026 watchPosition()\u306b\u3088\u308b\u4f4d\u7f6e\u60c5\u5831\u306e\u76e3\u8996\u3092\u30af\u30ea\u30a2\u3059\u308b\n- [ ] [\u53c2\u8003](http://www.htmq.com/geolocation/)\n\n### \u30b8\u30aa\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\n- [ ] \u5e83\u7fa9\u306b\u306f, \u5404\u7a2e\u60c5\u5831\u306b\u5bfe\u3057\u3066\u3001\u95a2\u9023\u3059\u308b\u5730\u7406\u5ea7\u6a19\uff08\u5178\u578b\u7684\u306b\u306f\u7def\u5ea6\u30fb\u7d4c\u5ea6\uff09\u3092\u4ed8\u52a0\u3059\u308b\u3053\u3068(wikipedia)\n- [ ] \u72ed\u7fa9\u306b\u306f,  \u72ed\u7fa9\u306b\u306f\u5730\u540d\u3001\u4f4f\u6240\u304c\u793a\u3059\u5834\u6240\u306b\u5bfe\u3057\u3066\u3001\u5730\u7406\u5ea7\u6a19\u3092\u4e0e\u3048\u308b\u3053\u3068\u3092\u8a00\u3046(wikkipedia)\n- [ ] \u4f8b\u3068\u3057\u3066\u306fGoogle Maps API \u3084 geocoder gem\n\n# \u5b9f\u88c5\n### \u3084\u308a\u305f\u304b\u3063\u305f\u3053\u3068\n- [ ] \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u767b\u9332\u3057\u305f\u4f4d\u7f6e\u60c5\u5831\u3092googlemap\u3067\u8868\u793a\u3057\u305f\u3044\n- [ ] \u73fe\u5728\u4f4d\u7f6e\u3092\u76e3\u8996\u3057\u3066\u3001\u7279\u5b9a\u306e\u4f4f\u6240\u306b\u8fd1\u3065\u3044\u305f\u3089\u753b\u9762\u306b\u901a\u77e5\u3092\u3060\u3059\n- [ ] \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u683c\u7d0d\u3055\u308c\u305f\u4f4d\u7f6e\u60c5\u5831\u3092\u73fe\u5728\u4f4d\u7f6e\u306b\u8fd1\u3044\u9806\u306b\u8868\u793a\u3059\u308b \n\n### \u3084\u308a\u305f\u3044\u3053\u3068\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u5b9f\u88c5\n- [ ] [\u30d5\u30ed\u30f3\u30c8\u5074\u3067\u73fe\u5728\u4f4d\u7f6e\u3092\u53d6\u5f97\u3059\u308b](#\u30d5\u30ed\u30f3\u30c8\u5074\u3067\u73fe\u5728\u4f4d\u7f6e\u3092\u53d6\u5f97\u3059\u308b)\n- [ ] \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u4f4d\u7f6e\u60c5\u5831\u3092\u683c\u7d0d\u3059\u308b\n- [ ] map\u3078\u30b5\u30fc\u30d0\u306e\u4f4d\u7f6e\u60c5\u5831\u3092\u8868\u793a\u3059\u308b\n- [ ] \u30d5\u30ed\u30f3\u30c8\u5074\u3067\uff12\u3064\u306e\u4f4d\u7f6e\u9593\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\u3059\u308b\n- [ ] \u30b5\u30fc\u30d0\u5074\u3067\u8ddd\u96e2\u3092\uff12\u3064\u306e\u4f4d\u7f6e\u9593\u306e\u8a08\u7b97\u3059\u308b\n\n\n### \u30d5\u30ed\u30f3\u30c8\u5074\u3067\u73fe\u5728\u4f4d\u7f6e\u3092\u53d6\u5f97\u3059\u308b\n\n```coffee:get_current_pos.coffee\n    successCallback = (position) ->\n      # \u4f4d\u7f6e\u60c5\u5831\u304c\u6e21\u3063\u3063\u3066\u304f\u308b\u306e\u3067\u3001ajax\u3067\u304a\u304f\u308b\u306a\u3069\u3001\u8ddd\u96e2\u8a08\u7b97\u306b\u3064\u304b\u3046\u306a\u3069\u3059\u3048\n\n    errorCallback = (errors) ->\n        # \u30a8\u30e9\u30fc\u51e6\u7406\n\n    navigator.geolocation.getCurrentPosition(successCallback,errorCallback)\n```\n### \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u4f4d\u7f6e\u60c5\u5831\u3092\u683c\u7d0d\u3059\u308b\n[\u53c2\u8003:Rails4\u3067GoogleMap\u3092\u8868\u793a\u3055\u305b\u308b](http://qiita.com/jacoyutorius/items/a107ff6c93529b6b393e#comment-84eb0d62006da032c37b)\n\n```ruby:GemFile\ngem 'geocoder'\ngem \"gmaps4rails\"\n```\n```ruby:space.rb\nclass Space < ActiveRecord::Base\n  geocoded_by :address\n  after_validation :geocode\nend\n```\n```ruby\nclass CreateSpaces < ActiveRecord::Migration\n  def change\n    create_table :spaces do |t|\n      t.string :address\n      t.decimal :latitude, precision: 9, scale: 6\n      t.decimal :longitude, precision: 10, scale: 6\n    end\n  end\nend\n```\n### Googlemap\u3078\u30b5\u30fc\u30d0\u306e\u4f4d\u7f6e\u60c5\u5831\u3092\u8868\u793a\u3059\u308b\n[\u53c2\u8003:Rails4\u3067GoogleMap\u3092\u8868\u793a\u3055\u305b\u308b](http://qiita.com/jacoyutorius/items/a107ff6c93529b6b393e#comment-84eb0d62006da032c37b)\n\n```slim:application.html.slim\n    script[src=\"//maps.googleapis.com/maps/api/js?key=\u3042\u306a\u305f\u306e\u30ad\u30fc&libraries=geometry\" type=\"text/javascript\"]\n```\n```js:application.js\n// \u30de\u30fc\u30ab\u30fc\u30af\u30e9\u30b9\u30bf\u30fc\u306e\u8aad\u307f\u8fbc\u307f\n// download here! \n// https://github.com/googlemaps/js-marker-clusterer\n//= reqire markerclusterer_compiled \n\n```\n\n```ruby:spaces_controller.rb\n  def show\n    # \u30de\u30fc\u30ab\u30fc\u30af\u30e9\u30b9\u30bf\u30fc\u306b\u6e21\u3059\u60c5\u5831\u3092\u751f\u6210\u3059\u308b\n    @hash = Gmaps4rails.build_markers([@space]) do |space, marker|\n      marker.lat space.latitude.to_f\n      marker.lng space.longitude.to_f\n      marker.infowindow space.name\n      marker.json(title: space.name)\n    end\n\n    @joined_users = @space.joined_users\n  end\n```\n\n```slim:spaces/show.html.slim\n          .map_container\n            #map.space_map\n            javascript:\n\n              var latlng = new google.maps.LatLng( parseFloat(#{@hash[0][:lat]}), parseFloat(#{@hash[0][:lng]}) );\n              handler = Gmaps.build('Google');\n              handler.buildMap(\n                {provider: {}, internal: {id: 'map'}},\n                function(){\n                  markers = handler.addMarkers(#{raw  @hash.to_json});\n                  handler.bounds.extendWith(markers);\n                  handler.fitMapToBounds();\n                  handler.getMap().setCenter(latlng);\n                  handler.getMap().setZoom(15);\n                }\n              );\n\n```\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-05-26 12.11.30 PM.jpg (86.2 kB)](https://img.esa.io/uploads/production/attachments/2315/2016/05/26/9911/97bc25b5-0ba1-4c25-b089-326568f68190.jpg)\n\n### \u30d5\u30ed\u30f3\u30c8\u5074\u3067\uff12\u3064\u306e\u4f4d\u7f6e\u9593\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\u3059\u308b\n```coffee:gmap_util.coffee\n  calc_distance = (from_pos, to_pos) ->\n\n    from = new google.maps.LatLng( parseFloat(from_pos[0]), parseFloat(from_pos[1]) )\n    to = new google.maps.LatLng( parseFloat(to_pos[0]), parseFloat(to_pos[1]) )\n\n    google.maps.geometry.spherical.computeDistanceBetween(from, to)\n\n```\n\n### \u30b5\u30fc\u30d0\u5074\u3067\u8ddd\u96e2\u3092\uff12\u3064\u306e\u4f4d\u7f6e\u9593\u306e\u8a08\u7b97\u3059\u308b\n\n```ruby:config/initializer/geocoder.rb\nGeocoder.configure(units: :km)\n```\n\n```ruby:spacr.rb\n  def distance(pos)\n    Geocoder::Calculations.distance_between([pos[0], pos[1]], [latitude, longitude]) * 1000.0\n  end\n# gem\u306e\u969b\u3068\u307f\u305f\u3089\u3044\u308d\u3044\u308d\u4fbf\u5229\u30e1\u30bd\u30c3\u30c9\u3042\u3063\u305f\n# if obj.geocoded?\n#  obj.nearbys(30)                      # other objects within 30 miles\n# obj.distance_from([40.714,-100.234]) # distance from arbitrary point to object\n#  obj.bearing_to(\"Paris, France\")      # direction from object to arbitrary point\nend\n```\n\n[gem geocoder](https://github.com/alexreisner/geocoder)\n\n# \u53c2\u8003\n[Rails4\u3067GoogleMap\u3092\u8868\u793a\u3055\u305b\u308b](http://qiita.com/jacoyutorius/items/a107ff6c93529b6b393e#comment-84eb0d62006da032c37b)\n[Geolocation API](http://www.htmq.com/geolocation/)\n", "tags": ["\u30b8\u30aa\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0", "slim", "GoogleMap", "Ruby", "Rails"]}