{"tags": ["React", "TypeScript", "redux"], "context": "\n\nINTRODUCTION\n\u524d\u56de\u306e\u7d9a\u304d\nReact\u3067\u9069\u5f53TODO\u4f5c\u6210\u3002\n\u3067\u3001\u3046\u307e\u304f\u3044\u3063\u305f\u3089state\u3092Redux\u3067\u7ba1\u7406\u3059\u308b\u3002\n\n\u5b9f\u8df5(React)\n\n\u4f7f\u3046\u3082\u306e\n\u307e\u3041\u666e\u901a\u3002\n\nreact\nreact-dom\n\n\nnpm\u3068typings\u3067\u30e9\u30a4\u30d6\u30e9\u30ea\u95a2\u4fc2\u5165\u308c\u8fbc\u3080\n$ npm i -S react react-dom\n$ typings i -S --global dt~react dt~react-dom\n\n\n\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5207\u308b\n$ mkdir ./app/scripts/{components,containers,models}\n$ mkdir ./app/scripts/components/ToDo\n\n\ntsx\u6271\u3048\u308b\u3088\u3046\u306b\u3059\u308b\n\n/tsconfig.json\n{\n  \"compilerOptions\": {\n    ...\n    \"jsx\": \"react\"\n  },\n\n\n\u3053\u308c\u3067\u3001.tsx\u5f62\u5f0f\u306e\u30d5\u30a1\u30a4\u30eb\u306fJSX\u3092\u6271\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3061\u3087\u3063\u3068\u3060\u3051html\u3044\u3058\u308b\nReact\u3092\u30de\u30a6\u30f3\u30c8\u3059\u308b\u8981\u7d20\u3092\u5165\u308c\u3068\u304f\u3002\n\n/static/index.html\n...\n  <main class=\"main\">\n    <span id=\"mount-point\"></span>\n  </main>\n...\n\n\n\n\u30b3\u30fc\u30c9\u66f8\u304f\n\n\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\nJSX\u3092\u5185\u5305\u3059\u308b\u3088\u3046\u306b\u306a\u308b\u306e\u3067\u62e1\u5f35\u5b50\u3092.tsx\u306b\u5909\u66f4\u3057\u306a\u3044\u3068\u30c0\u30e1\u3002\n$ mv ./app/scripts/entry_points/index.ts ./app/scripts/entry_points/index.tsx\n\n\u305d\u3093\u3067\u3082\u3063\u3066\u7de8\u96c6\n\n/app/scripts/entry_points/index.tsx\nimport * as React from 'react';\nimport { render } from 'react-dom';\n\nimport ToDo from '../containers/ToDo.tsx';\n\nwindow.addEventListener('DOMContentLoaded', () => {\n  render(<ToDo />, document.getElementById('mount-point'));\n});\n\n\n\n\u30e2\u30c7\u30eb\n\u9069\u5f53\u3002\u30e2\u30c7\u30eb\u3068\u306f\u8a00\u3048\u306a\u3044\u30ec\u30d9\u30eb\u3002\n\n/models/ToDo.ts\ninterface ToDoModel {\n  desc: string;\n  isDel: boolean;\n};\n\nexport default ToDoModel;\n\n\n\n\u30b3\u30f3\u30c6\u30ca\n\u3053\u3044\u3064\u306bstate\u3092\u96c6\u7d04\u3055\u305b\u308b\u3002\n\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306f\u4e00\u5207state\u6301\u305f\u306a\u3044\u3002\n\u306e\u3067\u3001\u5fc5\u7136\u7684\u306b\u81a8\u3089\u3080\u3002\n\n/app/scripts/containers/ToDo.tsx\n\nimport * as React from 'react';\n\nimport ToDoForm from '../components/ToDo/ToDoForm.tsx';\nimport ToDoList from '../components/ToDo/ToDoList.tsx';\nimport ToDoModel from '../models/ToDo.tsx';\n\nexport interface Props {};\nexport interface State {\n  todos: ToDoModel[];\n  inputValue: string;\n};\n\nexport default class ToDo extends React.Component<Props, State> {\n  state: State;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      todos: [],\n      inputValue: ''\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleAddClick = this.handleAddClick.bind(this);\n    this.handleRemoveClick = this.handleRemoveClick.bind(this);\n    this.handleListClick = this.handleListClick.bind(this);\n  }\n\n  handleInputChange({ target }: Event): void {\n    const node = target as HTMLInputElement;\n    this.setState(Object.assign({}, this.state, { inputValue: node.value }));\n  }\n\n  handleListClick({ target }: Event): void {\n    const node = getListNode(target as HTMLElement);\n    const index = parseInt(node.getAttribute('data-index'), 10);\n\n    this.setState(Object.assign({}, this.state, {\n      todos: this.state.todos.map((todo, i) => {\n        return i !== index ? todo : {\n          desc: todo.desc,\n          isDel: !todo.isDel\n        };\n      })\n    }));\n  }\n\n  handleAddClick(): void {\n    if (this.state.inputValue.length === 0) {\n      return;\n    }\n\n    this.setState({\n      inputValue: '',\n      todos: [\n        ...this.state.todos,\n        {\n          desc: this.state.inputValue,\n          isDel: false\n        }\n      ]\n    });\n  }\n\n  handleRemoveClick(): void {\n    this.setState(Object.assign({}, this.state, {\n      todos: this.state.todos.filter(todo => !todo.isDel)\n    }));\n  }\n\n  render(): JSX.Element {\n    const {\n      handleInputChange,\n      handleAddClick,\n      handleListClick,\n      handleRemoveClick,\n      state: { todos, inputValue }\n    }: ToDo = this;\n\n    return (\n      <div>\n        <ToDoForm onChange={handleInputChange} onAddClick={handleAddClick} onRemoveClick={handleRemoveClick} value={inputValue} canAddClick={inputValue.length > 0} />\n        <ToDoList todos={todos} handleClick={handleListClick} />\n      </div>\n    );\n  }\n}\n\nfunction getListNode(node: HTMLElement): HTMLElement {\n  return ['LI', 'BODY'].indexOf(node.nodeName) >= 0 ? node : getListNode(node.parentNode as HTMLElement);\n}\n\n\n\n\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\n\u524d\u8ff0\u3057\u305f\u3068\u304a\u308astateless\u3002\n\u3053\u306e\u8fba\u306b\u306a\u3063\u3066\u304f\u308b\u3068\u3001\u88dc\u5b8c\u52b9\u304d\u307e\u304f\u308a\u3067TypeScript\u3067\u3088\u304b\u3063\u305f\u301c\u3063\u3066\u601d\u3044\u307e\u3059\u3002\n\n/app/scripts/components/ToDo/ToDoForm.tsx\nimport * as React from 'react';\n\nexport interface Props {\n  onAddClick: (e: Event) => void;\n  onRemoveClick: (e: Event) => void;\n  onChange: (e: Event) => void;\n  value: string;\n  canAddClick: boolean;\n}\n\nconst ToDoForm: React.SFC<Props> = ({ value, canAddClick, onAddClick, onRemoveClick, onChange }) => (\n  <div>\n    <input type=\"text\" value={value} onChange={onChange} />\n    <button onClick={onAddClick} disabled={!canAddClick}>ADD</button>\n    <button onClick={onRemoveClick}>REMOVE</button>\n  </div>\n);\nexport default ToDoForm;\n\n\n\n/app/scripts/components/ToDo/ToDoList.tsx\nimport * as React from 'react';\n\nimport ToDoModel from '../../models/ToDo';\nimport ToDoRow from './ToDoRow.tsx';\n\nexport interface Props {\n  todos: ToDoModel[];\n  handleClick: (e: Event) => void;\n}\n\nconst ToDoList: React.SFC<Props> = ({ todos, handleClick }) => {\n  return (\n    todos.length > 0 ? (\n      <ul>\n      {todos.map(({ desc, isDel }, i) => (\n        <ToDoRow key={i} handleClick={handleClick} index={i} isDel={isDel} desc={desc} />\n      ))}\n      </ul>\n    ) : null\n  );\n};\n\nexport default ToDoList;\n\n\n\n/app/scripts/components/ToDo/ToDoRow.tsx\nimport * as React from 'react';\n\nexport interface Props {\n  index: number;\n  desc: string;\n  isDel: boolean;\n  handleClick: (e: Event) => void;\n}\n\nconst ToDoRow: React.SFC<Props> = ({ index, desc, isDel, handleClick }) => (\n  <li style={{ cursor: 'pointer' }} onClick={handleClick} data-index={index}>\n    {isDel ? <del>{desc}</del> : desc}\n  </li>\n);\nexport default ToDoRow;\n\n\n\n\u52d5\u304b\u3059\n$ npm start\n\n\u3075\u3064\u30fc\u306b\u3046\u3054\u304f\u304b\u3068\u3002\n\u4ee5\u4e0b\u306e\u6319\u52d5\u3092\u78ba\u8a8d\u3059\u308c\u3070\u3068\u308a\u3042\u3048\u305aOK\u3067\u3059\n\n\u30c6\u30ad\u30b9\u30c8\u30a8\u30ea\u30a2\u3068ADD\u3001REMOVE\u30dc\u30bf\u30f3\u304c\u8868\u793a\u3055\u308c\u308b\n\u30c6\u30ad\u30b9\u30c8\u30a8\u30ea\u30a2\u306b\u6587\u8a00\u5165\u308c\u308b\u3068ADD\u30dc\u30bf\u30f3\u6709\u52b9\u306b\u306a\u308a\u3001\u62bc\u3059\u3068\u5165\u529b\u3057\u305f\u6587\u8a00\u304c\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\n\u6587\u8a00\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u6253\u3061\u6d88\u3057\u7dda\u3092\u4ed8\u3051\u5916\u3057\u3067\u304d\u3066\u3001REMOVE\u62bc\u3059\u3068\u6253\u3061\u6d88\u3057\u7dda\u306e\u5165\u3063\u305f\u6587\u8a00\u304c\u524a\u9664\u3055\u308c\u308b\n\n\n\u5b9f\u8df5(redux)\n\u30b3\u30f3\u30c6\u30ca\u306estate\u3092redux\u3067\u7ba1\u7406\u3059\u308b\u3088\u3046\u306b\u3082\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u4f7f\u3046\u3082\u306e\naction\u4f5c\u308b\u306e\u9762\u5012\u306a\u306e\u3067redux-actions\u306b\u983c\u308a\u307e\u3059\u3002\nmiddleware\u306a\u3057\u3063\u3066\u306e\u3082\u3055\u307f\u3057\u3044\u306e\u3067redux-logger\u3092\u5165\u308c\u307e\u3059\u3002\n\nredux\nreact-redux\nredux-actions\nredux-logger\n\n\nnpm\u3068typings\u3067\u30e9\u30a4\u30d6\u30e9\u30ea\u95a2\u4fc2\u5165\u308c\u8fbc\u3080\n$ npm i -S react-redux redux redux-actions redux-logger\n$ typings i -S --global dt~react-redux dt~redux dt~redux-actions dt~redux-logger\n\n\n\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5207\u308b\n\u6b63\u76f4\u54041\u30d5\u30a1\u30a4\u30eb\u3057\u304b\u4f5c\u3089\u306a\u3044\u306e\u3067\u3044\u3089\u306a\u3044\u3063\u3061\u3083\u3044\u3089\u3093\u306e\u3060\u3051\u3069\u3002\n$ mkdir -p app/scripts/{actions,reducers}\n\n\n\u30d5\u30a1\u30a4\u30eb\u8ffd\u52a0\n\naction\n./app/scripts/containers/ToDo.tsx\u3067handle\u306a\u3093\u3061\u3083\u3089\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u308b\u30e1\u30bd\u30c3\u30c9\u3092action\u306b\u304a\u3053\u3059\u611f\u3058\u3002\n\n/app/scripts/actions/todo.ts\nimport { createAction } from 'redux-actions';\n\nexport const INPUT_TEXT = 'TODO_UPDATE_TEXT';\nexport const ON_LIST_CLICK = 'TODO_ON_LIST_CLICK';\nexport const EXEC_ADD = 'TODO_EXEC_ADD';\nexport const EXEC_REMOVE = 'TODO_EXEC_REMOVE';\n\nexport const inputText = createAction<string>(\n  INPUT_TEXT,\n  (text: string) => text\n);\n\nexport const onListClick = createAction<number>(\n  ON_LIST_CLICK,\n  (index: number) => index\n);\n\nexport const execAdd = createAction<string>(\n  EXEC_ADD,\n  (text: string) => text\n);\n\nexport const execRemove = createAction<void>(\n  EXEC_REMOVE,\n  () => {}\n);\n\n\n\nreducer\n./app/scripts/containers/ToDo.tsx\u306estate\u3092\u3072\u3068\u3064\u3072\u3068\u3064reducer\u306b\u3057\u307e\u3059\u3002\n\n/app/scripts/reducers/todo.ts\nimport { Action } from 'redux-actions';\nimport * as Actions from '../actions/todo';\n\nimport ToDoModel from '../models/ToDo';\n\nexport function inputValue(state: string = '', action: Action<string>): string {\n  switch (action.type) {\n  case Actions.INPUT_TEXT:\n    return action.payload;\n  case Actions.EXEC_ADD:\n    return '';\n  default:\n    return state;\n  }\n}\n\nexport function todos(state: Array<ToDoModel> = [], action: Action<number|string>): Array<ToDoModel> {\n  switch (action.type) {\n  case Actions.ON_LIST_CLICK:\n    return state.map((todo, i) => {\n      return i !== action.payload ? todo : {\n        desc: todo.desc as string,\n        isDel: !todo.isDel\n      };\n    });\n  case Actions.EXEC_ADD:\n    return [\n      ...state,\n      {\n        desc: action.payload as string,\n        isDel: false\n      }\n    ];\n  case Actions.EXEC_REMOVE:\n    return state.filter(todo => !todo.isDel);\n  default:\n    return state;\n  }\n}\n\nexport default {\n  inputValue,\n  todos\n};\n\n\n\n\u7de8\u96c6\n\ncontainer\nredux\u304b\u3089props\u3068\u3057\u3066\u5024\u3092\u53d7\u3051\u53d6\u308b\u3002\n\u3051\u3063\u3053\u3046\u5909\u308f\u3063\u3066\u308b\u306e\u3067\u5168\u6587\u8cbc\u308a\u307e\u3059\u3002\n\u3068\u306f\u8a00\u3046\u3082\u306e\u306e\u3001state\u3067\u7ba1\u7406\u3057\u3066\u305f\u3082\u306e\u304cprops\u306b\u306a\u3063\u3066\u3001\nsetState\u3067state\u3044\u3058\u3063\u3066\u305f\u3068\u3053\u308d\u304cactionCreater\u3092\u5b9f\u884c\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u304f\u3089\u3044\u3002\n\u3042\u3001\u3042\u3068store\u306e\u51e6\u7406\u3082\u9069\u5f53\u306b\u3084\u3063\u3066default export\u3044\u3058\u3063\u3066\u307e\u3059\u3002\n\n/app/scripts/components/ToDo/ToDoForm.tsx\nimport * as React from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\n\nimport * as Actions from '../actions/todo';\n\nimport ToDoForm from '../components/ToDo/ToDoForm.tsx';\nimport ToDoList from '../components/ToDo/ToDoList.tsx';\nimport ToDoModel from '../models/ToDo.tsx';\n\nexport interface Props {\n  dispatch: Dispatch;\n  inputValue: string;\n  todos: ToDoModel[];\n};\nexport interface State {};\n\nexport class ToDo extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleAddClick = this.handleAddClick.bind(this);\n    this.handleRemoveClick = this.handleRemoveClick.bind(this);\n    this.handleListClick = this.handleListClick.bind(this);\n  }\n\n  handleInputChange({ target }: Event): void {\n    const node = target as HTMLInputElement;\n    this.props.dispatch(Actions.inputText(node.value));\n  }\n\n  handleListClick({ target }: Event): void {\n    const node = getListNode(target as HTMLElement);\n    const index = parseInt(node.getAttribute('data-index'), 10);\n    this.props.dispatch(Actions.onListClick(index));\n  }\n\n  handleAddClick(): void {\n    if (this.props.inputValue.length === 0) {\n      return;\n    }\n\n    this.props.dispatch(Actions.execAdd(this.props.inputValue));\n  }\n\n  handleRemoveClick(): void {\n    this.props.dispatch(Actions.execRemove());\n  }\n\n  render(): JSX.Element {\n    const {\n      handleInputChange,\n      handleAddClick,\n      handleListClick,\n      handleRemoveClick,\n      props: { todos, inputValue }\n    }: ToDo = this;\n\n    return (\n      <div>\n        <ToDoForm onChange={handleInputChange} onAddClick={handleAddClick} onRemoveClick={handleRemoveClick} value={inputValue} canAddClick={inputValue.length > 0} />\n        <ToDoList todos={todos} handleClick={handleListClick} />\n      </div>\n    );\n  }\n}\n\nfunction getListNode(node: HTMLElement): HTMLElement {\n  return ['LI', 'BODY'].indexOf(node.nodeName) >= 0 ? node : getListNode(node.parentNode as HTMLElement);\n}\n\nconst mapStateToProps = (state: Object) => (state);\n\nexport default connect(mapStateToProps)(ToDo);\n\n\n\nentrypoint\ncombineReducers\u5b9f\u884c\u3068\u304bapplyMiddleware\u5b9f\u884c\u3068\u304b\u3002\nimport * as React from 'react';\nimport { render } from 'react-dom';\n\nimport { applyMiddleware, createStore, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport createLogger = require('redux-logger');\n\nimport todoReducers from '../reducers/todo';\n\nimport ToDo from '../containers/ToDo.tsx';\n\nwindow.addEventListener('DOMContentLoaded', () => {\n  const store = createStore(\n    combineReducers(todoReducers),\n    applyMiddleware(\n      createLogger()\n    )\n  );\n\n  render(\n    (\n      <Provider store={store}>\n        <ToDo />\n      </Provider>\n    ),\n    document.getElementById('mount-point')\n  );\n});\n\n\n\u5b9f\u884c\n\u540c\u3058\u3088\u3046\u306b\u52d5\u304d\u307e\u3059\u3002\n\u3067\u3001\u958b\u767a\u8005\u30c4\u30fc\u30eb\u3067console\u8ffd\u3046\u3068\u3001\u30ed\u30b0\u304c\u30b8\u30e3\u30f3\u30b8\u30e3\u30f3\u51fa\u3066\u308b\u306e\u304c\u308f\u304b\u308b\u304b\u3068\u3002\n\u304d\u308f\u3081\u3066\u9069\u5f53\u3067\u3057\u305f\u304c\u3053\u3093\u306a\u611f\u3058\u3067\u3002\nPropTypes\u3092\u30c0\u30e9\u30c0\u30e9\u66f8\u304f\u3053\u3068\u306a\u304f\u30d3\u30b7\u3063\u3068\u578b\u3092\u6c7a\u3081\u8fbc\u3093\u3067\u66f8\u3051\u308b\u306e\u304c\u697d\u3002\nJSX\u5185\u3067\u3082\u88dc\u5b8c\u52b9\u304f\u306e\u3067\u30b3\u30fc\u30c9\u8aad\u307f\u8fd4\u3059\u3053\u3068\u3082\u6e1b\u308b\u3057\u3002\n\u3044\u3044\u3082\u3093\u3067\u3059\u306d\u3002\n\u6b21\u56de\u306fava\u3067\u30c6\u30b9\u30c8\u3002\n\u5148\u306b\u8a00\u3063\u3066\u304a\u304d\u307e\u3059\u304c\u3001\u306a\u3093\u3067ava\u306a\u3093\u304b\u3063\u3066\u3044\u3046\u3068\n\u74b0\u5883\u69cb\u7bc9\u304c\u697d\u3067power-assert\u4f7f\u3048\u308b\u304b\u3089\u3068\u3044\u30462\u70b9\u306b\u5c3d\u304d\u307e\u3059\u3002\n\u69cb\u6587\u7684\u306b\u306fmocha\u304c\u597d\u304d\u306a\u3093\u3060\u3051\u3069\u306d\u3002\u898b\u6163\u308c\u3066\u308b\u4eba\u3082\u591a\u3044\u3060\u308d\u3046\u3057\u3002\n\u3044\u304f\u3089\u306a\u3093\u3067\u3082\u30b3\u30fc\u30c9\u306e\u7f85\u5217\u904e\u304e\u308b\u306e\u3067\u305d\u306e\u3046\u3061\u8ffd\u8a18\u3059\u308b\u304b\u3082\u3002\n\n## INTRODUCTION\n\n[\u524d\u56de](http://qiita.com/junkjunctions/items/13c8e87044bd6be31b0d)\u306e\u7d9a\u304d\nReact\u3067\u9069\u5f53TODO\u4f5c\u6210\u3002\n\u3067\u3001\u3046\u307e\u304f\u3044\u3063\u305f\u3089state\u3092Redux\u3067\u7ba1\u7406\u3059\u308b\u3002\n\n## \u5b9f\u8df5(React)\n### \u4f7f\u3046\u3082\u306e\n\n\u307e\u3041\u666e\u901a\u3002\n\n* react\n* react-dom\n\n### npm\u3068typings\u3067\u30e9\u30a4\u30d6\u30e9\u30ea\u95a2\u4fc2\u5165\u308c\u8fbc\u3080\n\n```bash\n$ npm i -S react react-dom\n$ typings i -S --global dt~react dt~react-dom\n```\n\n### \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5207\u308b\n\n```bash\n$ mkdir ./app/scripts/{components,containers,models}\n$ mkdir ./app/scripts/components/ToDo\n```\n\n### tsx\u6271\u3048\u308b\u3088\u3046\u306b\u3059\u308b\n\n```./tsconfig.json\n{\n  \"compilerOptions\": {\n    ...\n    \"jsx\": \"react\"\n  },\n```\n\n\u3053\u308c\u3067\u3001.tsx\u5f62\u5f0f\u306e\u30d5\u30a1\u30a4\u30eb\u306fJSX\u3092\u6271\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n### \u3061\u3087\u3063\u3068\u3060\u3051html\u3044\u3058\u308b\n\nReact\u3092\u30de\u30a6\u30f3\u30c8\u3059\u308b\u8981\u7d20\u3092\u5165\u308c\u3068\u304f\u3002\n\n```./static/index.html\n...\n  <main class=\"main\">\n    <span id=\"mount-point\"></span>\n  </main>\n...\n```\n\n### \u30b3\u30fc\u30c9\u66f8\u304f\n#### \u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\n\nJSX\u3092\u5185\u5305\u3059\u308b\u3088\u3046\u306b\u306a\u308b\u306e\u3067\u62e1\u5f35\u5b50\u3092`.tsx`\u306b\u5909\u66f4\u3057\u306a\u3044\u3068\u30c0\u30e1\u3002\n\n```bash\n$ mv ./app/scripts/entry_points/index.ts ./app/scripts/entry_points/index.tsx\n```\n\n\u305d\u3093\u3067\u3082\u3063\u3066\u7de8\u96c6\n\n```./app/scripts/entry_points/index.tsx\nimport * as React from 'react';\nimport { render } from 'react-dom';\n\nimport ToDo from '../containers/ToDo.tsx';\n\nwindow.addEventListener('DOMContentLoaded', () => {\n  render(<ToDo />, document.getElementById('mount-point'));\n});\n```\n\n#### \u30e2\u30c7\u30eb\n\n\u9069\u5f53\u3002\u30e2\u30c7\u30eb\u3068\u306f\u8a00\u3048\u306a\u3044\u30ec\u30d9\u30eb\u3002\n\n```./models/ToDo.ts\ninterface ToDoModel {\n  desc: string;\n  isDel: boolean;\n};\n\nexport default ToDoModel;\n```\n\n#### \u30b3\u30f3\u30c6\u30ca\n\n\u3053\u3044\u3064\u306bstate\u3092\u96c6\u7d04\u3055\u305b\u308b\u3002\n\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306f\u4e00\u5207state\u6301\u305f\u306a\u3044\u3002\n\u306e\u3067\u3001\u5fc5\u7136\u7684\u306b\u81a8\u3089\u3080\u3002\n\n```./app/scripts/containers/ToDo.tsx\n\nimport * as React from 'react';\n\nimport ToDoForm from '../components/ToDo/ToDoForm.tsx';\nimport ToDoList from '../components/ToDo/ToDoList.tsx';\nimport ToDoModel from '../models/ToDo.tsx';\n\nexport interface Props {};\nexport interface State {\n  todos: ToDoModel[];\n  inputValue: string;\n};\n\nexport default class ToDo extends React.Component<Props, State> {\n  state: State;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      todos: [],\n      inputValue: ''\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleAddClick = this.handleAddClick.bind(this);\n    this.handleRemoveClick = this.handleRemoveClick.bind(this);\n    this.handleListClick = this.handleListClick.bind(this);\n  }\n\n  handleInputChange({ target }: Event): void {\n    const node = target as HTMLInputElement;\n    this.setState(Object.assign({}, this.state, { inputValue: node.value }));\n  }\n\n  handleListClick({ target }: Event): void {\n    const node = getListNode(target as HTMLElement);\n    const index = parseInt(node.getAttribute('data-index'), 10);\n\n    this.setState(Object.assign({}, this.state, {\n      todos: this.state.todos.map((todo, i) => {\n        return i !== index ? todo : {\n          desc: todo.desc,\n          isDel: !todo.isDel\n        };\n      })\n    }));\n  }\n\n  handleAddClick(): void {\n    if (this.state.inputValue.length === 0) {\n      return;\n    }\n\n    this.setState({\n      inputValue: '',\n      todos: [\n        ...this.state.todos,\n        {\n          desc: this.state.inputValue,\n          isDel: false\n        }\n      ]\n    });\n  }\n\n  handleRemoveClick(): void {\n    this.setState(Object.assign({}, this.state, {\n      todos: this.state.todos.filter(todo => !todo.isDel)\n    }));\n  }\n\n  render(): JSX.Element {\n    const {\n      handleInputChange,\n      handleAddClick,\n      handleListClick,\n      handleRemoveClick,\n      state: { todos, inputValue }\n    }: ToDo = this;\n\n    return (\n      <div>\n        <ToDoForm onChange={handleInputChange} onAddClick={handleAddClick} onRemoveClick={handleRemoveClick} value={inputValue} canAddClick={inputValue.length > 0} />\n        <ToDoList todos={todos} handleClick={handleListClick} />\n      </div>\n    );\n  }\n}\n\nfunction getListNode(node: HTMLElement): HTMLElement {\n  return ['LI', 'BODY'].indexOf(node.nodeName) >= 0 ? node : getListNode(node.parentNode as HTMLElement);\n}\n```\n\n#### \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\n\n\u524d\u8ff0\u3057\u305f\u3068\u304a\u308astateless\u3002\n\u3053\u306e\u8fba\u306b\u306a\u3063\u3066\u304f\u308b\u3068\u3001\u88dc\u5b8c\u52b9\u304d\u307e\u304f\u308a\u3067TypeScript\u3067\u3088\u304b\u3063\u305f\u301c\u3063\u3066\u601d\u3044\u307e\u3059\u3002\n\n```./app/scripts/components/ToDo/ToDoForm.tsx\nimport * as React from 'react';\n\nexport interface Props {\n  onAddClick: (e: Event) => void;\n  onRemoveClick: (e: Event) => void;\n  onChange: (e: Event) => void;\n  value: string;\n  canAddClick: boolean;\n}\n\nconst ToDoForm: React.SFC<Props> = ({ value, canAddClick, onAddClick, onRemoveClick, onChange }) => (\n  <div>\n    <input type=\"text\" value={value} onChange={onChange} />\n    <button onClick={onAddClick} disabled={!canAddClick}>ADD</button>\n    <button onClick={onRemoveClick}>REMOVE</button>\n  </div>\n);\nexport default ToDoForm;\n```\n\n```./app/scripts/components/ToDo/ToDoList.tsx\nimport * as React from 'react';\n\nimport ToDoModel from '../../models/ToDo';\nimport ToDoRow from './ToDoRow.tsx';\n\nexport interface Props {\n  todos: ToDoModel[];\n  handleClick: (e: Event) => void;\n}\n\nconst ToDoList: React.SFC<Props> = ({ todos, handleClick }) => {\n  return (\n    todos.length > 0 ? (\n      <ul>\n      {todos.map(({ desc, isDel }, i) => (\n        <ToDoRow key={i} handleClick={handleClick} index={i} isDel={isDel} desc={desc} />\n      ))}\n      </ul>\n    ) : null\n  );\n};\n\nexport default ToDoList;\n```\n\n```./app/scripts/components/ToDo/ToDoRow.tsx\nimport * as React from 'react';\n\nexport interface Props {\n  index: number;\n  desc: string;\n  isDel: boolean;\n  handleClick: (e: Event) => void;\n}\n\nconst ToDoRow: React.SFC<Props> = ({ index, desc, isDel, handleClick }) => (\n  <li style={{ cursor: 'pointer' }} onClick={handleClick} data-index={index}>\n    {isDel ? <del>{desc}</del> : desc}\n  </li>\n);\nexport default ToDoRow;\n```\n\n### \u52d5\u304b\u3059\n\n```bash\n$ npm start\n```\n\n\u3075\u3064\u30fc\u306b\u3046\u3054\u304f\u304b\u3068\u3002\n\u4ee5\u4e0b\u306e\u6319\u52d5\u3092\u78ba\u8a8d\u3059\u308c\u3070\u3068\u308a\u3042\u3048\u305aOK\u3067\u3059\n\n* \u30c6\u30ad\u30b9\u30c8\u30a8\u30ea\u30a2\u3068ADD\u3001REMOVE\u30dc\u30bf\u30f3\u304c\u8868\u793a\u3055\u308c\u308b\n* \u30c6\u30ad\u30b9\u30c8\u30a8\u30ea\u30a2\u306b\u6587\u8a00\u5165\u308c\u308b\u3068ADD\u30dc\u30bf\u30f3\u6709\u52b9\u306b\u306a\u308a\u3001\u62bc\u3059\u3068\u5165\u529b\u3057\u305f\u6587\u8a00\u304c\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\n* \u6587\u8a00\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u6253\u3061\u6d88\u3057\u7dda\u3092\u4ed8\u3051\u5916\u3057\u3067\u304d\u3066\u3001REMOVE\u62bc\u3059\u3068\u6253\u3061\u6d88\u3057\u7dda\u306e\u5165\u3063\u305f\u6587\u8a00\u304c\u524a\u9664\u3055\u308c\u308b\n\n## \u5b9f\u8df5(redux)\n\n\u30b3\u30f3\u30c6\u30ca\u306estate\u3092redux\u3067\u7ba1\u7406\u3059\u308b\u3088\u3046\u306b\u3082\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\n### \u4f7f\u3046\u3082\u306e\n\naction\u4f5c\u308b\u306e\u9762\u5012\u306a\u306e\u3067redux-actions\u306b\u983c\u308a\u307e\u3059\u3002\nmiddleware\u306a\u3057\u3063\u3066\u306e\u3082\u3055\u307f\u3057\u3044\u306e\u3067redux-logger\u3092\u5165\u308c\u307e\u3059\u3002\n\n* redux\n* react-redux\n* redux-actions\n* redux-logger\n\n### npm\u3068typings\u3067\u30e9\u30a4\u30d6\u30e9\u30ea\u95a2\u4fc2\u5165\u308c\u8fbc\u3080\n\n```bash\n$ npm i -S react-redux redux redux-actions redux-logger\n$ typings i -S --global dt~react-redux dt~redux dt~redux-actions dt~redux-logger\n```\n\n### \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5207\u308b\n\n\u6b63\u76f4\u54041\u30d5\u30a1\u30a4\u30eb\u3057\u304b\u4f5c\u3089\u306a\u3044\u306e\u3067\u3044\u3089\u306a\u3044\u3063\u3061\u3083\u3044\u3089\u3093\u306e\u3060\u3051\u3069\u3002\n\n```bash\n$ mkdir -p app/scripts/{actions,reducers}\n```\n\n### \u30d5\u30a1\u30a4\u30eb\u8ffd\u52a0\n#### action\n\n`./app/scripts/containers/ToDo.tsx`\u3067handle\u306a\u3093\u3061\u3083\u3089\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u308b\u30e1\u30bd\u30c3\u30c9\u3092action\u306b\u304a\u3053\u3059\u611f\u3058\u3002\n\n```./app/scripts/actions/todo.ts\nimport { createAction } from 'redux-actions';\n\nexport const INPUT_TEXT = 'TODO_UPDATE_TEXT';\nexport const ON_LIST_CLICK = 'TODO_ON_LIST_CLICK';\nexport const EXEC_ADD = 'TODO_EXEC_ADD';\nexport const EXEC_REMOVE = 'TODO_EXEC_REMOVE';\n\nexport const inputText = createAction<string>(\n  INPUT_TEXT,\n  (text: string) => text\n);\n\nexport const onListClick = createAction<number>(\n  ON_LIST_CLICK,\n  (index: number) => index\n);\n\nexport const execAdd = createAction<string>(\n  EXEC_ADD,\n  (text: string) => text\n);\n\nexport const execRemove = createAction<void>(\n  EXEC_REMOVE,\n  () => {}\n);\n```\n\n#### reducer\n\n`./app/scripts/containers/ToDo.tsx`\u306estate\u3092\u3072\u3068\u3064\u3072\u3068\u3064reducer\u306b\u3057\u307e\u3059\u3002\n\n```./app/scripts/reducers/todo.ts\nimport { Action } from 'redux-actions';\nimport * as Actions from '../actions/todo';\n\nimport ToDoModel from '../models/ToDo';\n\nexport function inputValue(state: string = '', action: Action<string>): string {\n  switch (action.type) {\n  case Actions.INPUT_TEXT:\n    return action.payload;\n  case Actions.EXEC_ADD:\n    return '';\n  default:\n    return state;\n  }\n}\n\nexport function todos(state: Array<ToDoModel> = [], action: Action<number|string>): Array<ToDoModel> {\n  switch (action.type) {\n  case Actions.ON_LIST_CLICK:\n    return state.map((todo, i) => {\n      return i !== action.payload ? todo : {\n        desc: todo.desc as string,\n        isDel: !todo.isDel\n      };\n    });\n  case Actions.EXEC_ADD:\n    return [\n      ...state,\n      {\n        desc: action.payload as string,\n        isDel: false\n      }\n    ];\n  case Actions.EXEC_REMOVE:\n    return state.filter(todo => !todo.isDel);\n  default:\n    return state;\n  }\n}\n\nexport default {\n  inputValue,\n  todos\n};\n```\n\n### \u7de8\u96c6\n#### container\n\nredux\u304b\u3089props\u3068\u3057\u3066\u5024\u3092\u53d7\u3051\u53d6\u308b\u3002\n\u3051\u3063\u3053\u3046\u5909\u308f\u3063\u3066\u308b\u306e\u3067\u5168\u6587\u8cbc\u308a\u307e\u3059\u3002\n\u3068\u306f\u8a00\u3046\u3082\u306e\u306e\u3001state\u3067\u7ba1\u7406\u3057\u3066\u305f\u3082\u306e\u304cprops\u306b\u306a\u3063\u3066\u3001\nsetState\u3067state\u3044\u3058\u3063\u3066\u305f\u3068\u3053\u308d\u304cactionCreater\u3092\u5b9f\u884c\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u304f\u3089\u3044\u3002\n\u3042\u3001\u3042\u3068store\u306e\u51e6\u7406\u3082\u9069\u5f53\u306b\u3084\u3063\u3066default export\u3044\u3058\u3063\u3066\u307e\u3059\u3002\n\n```./app/scripts/components/ToDo/ToDoForm.tsx\nimport * as React from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\n\nimport * as Actions from '../actions/todo';\n\nimport ToDoForm from '../components/ToDo/ToDoForm.tsx';\nimport ToDoList from '../components/ToDo/ToDoList.tsx';\nimport ToDoModel from '../models/ToDo.tsx';\n\nexport interface Props {\n  dispatch: Dispatch;\n  inputValue: string;\n  todos: ToDoModel[];\n};\nexport interface State {};\n\nexport class ToDo extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleAddClick = this.handleAddClick.bind(this);\n    this.handleRemoveClick = this.handleRemoveClick.bind(this);\n    this.handleListClick = this.handleListClick.bind(this);\n  }\n\n  handleInputChange({ target }: Event): void {\n    const node = target as HTMLInputElement;\n    this.props.dispatch(Actions.inputText(node.value));\n  }\n\n  handleListClick({ target }: Event): void {\n    const node = getListNode(target as HTMLElement);\n    const index = parseInt(node.getAttribute('data-index'), 10);\n    this.props.dispatch(Actions.onListClick(index));\n  }\n\n  handleAddClick(): void {\n    if (this.props.inputValue.length === 0) {\n      return;\n    }\n\n    this.props.dispatch(Actions.execAdd(this.props.inputValue));\n  }\n\n  handleRemoveClick(): void {\n    this.props.dispatch(Actions.execRemove());\n  }\n\n  render(): JSX.Element {\n    const {\n      handleInputChange,\n      handleAddClick,\n      handleListClick,\n      handleRemoveClick,\n      props: { todos, inputValue }\n    }: ToDo = this;\n\n    return (\n      <div>\n        <ToDoForm onChange={handleInputChange} onAddClick={handleAddClick} onRemoveClick={handleRemoveClick} value={inputValue} canAddClick={inputValue.length > 0} />\n        <ToDoList todos={todos} handleClick={handleListClick} />\n      </div>\n    );\n  }\n}\n\nfunction getListNode(node: HTMLElement): HTMLElement {\n  return ['LI', 'BODY'].indexOf(node.nodeName) >= 0 ? node : getListNode(node.parentNode as HTMLElement);\n}\n\nconst mapStateToProps = (state: Object) => (state);\n\nexport default connect(mapStateToProps)(ToDo);\n```\n\n#### entrypoint\n\ncombineReducers\u5b9f\u884c\u3068\u304bapplyMiddleware\u5b9f\u884c\u3068\u304b\u3002\n\n```\nimport * as React from 'react';\nimport { render } from 'react-dom';\n\nimport { applyMiddleware, createStore, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport createLogger = require('redux-logger');\n\nimport todoReducers from '../reducers/todo';\n\nimport ToDo from '../containers/ToDo.tsx';\n\nwindow.addEventListener('DOMContentLoaded', () => {\n  const store = createStore(\n    combineReducers(todoReducers),\n    applyMiddleware(\n      createLogger()\n    )\n  );\n\n  render(\n    (\n      <Provider store={store}>\n        <ToDo />\n      </Provider>\n    ),\n    document.getElementById('mount-point')\n  );\n});\n```\n\n### \u5b9f\u884c\n\n\u540c\u3058\u3088\u3046\u306b\u52d5\u304d\u307e\u3059\u3002\n\u3067\u3001\u958b\u767a\u8005\u30c4\u30fc\u30eb\u3067console\u8ffd\u3046\u3068\u3001\u30ed\u30b0\u304c\u30b8\u30e3\u30f3\u30b8\u30e3\u30f3\u51fa\u3066\u308b\u306e\u304c\u308f\u304b\u308b\u304b\u3068\u3002\n\n\u304d\u308f\u3081\u3066\u9069\u5f53\u3067\u3057\u305f\u304c\u3053\u3093\u306a\u611f\u3058\u3067\u3002\nPropTypes\u3092\u30c0\u30e9\u30c0\u30e9\u66f8\u304f\u3053\u3068\u306a\u304f\u30d3\u30b7\u3063\u3068\u578b\u3092\u6c7a\u3081\u8fbc\u3093\u3067\u66f8\u3051\u308b\u306e\u304c\u697d\u3002\nJSX\u5185\u3067\u3082\u88dc\u5b8c\u52b9\u304f\u306e\u3067\u30b3\u30fc\u30c9\u8aad\u307f\u8fd4\u3059\u3053\u3068\u3082\u6e1b\u308b\u3057\u3002\n\u3044\u3044\u3082\u3093\u3067\u3059\u306d\u3002\n\n\u6b21\u56de\u306fava\u3067\u30c6\u30b9\u30c8\u3002\n\u5148\u306b\u8a00\u3063\u3066\u304a\u304d\u307e\u3059\u304c\u3001\u306a\u3093\u3067ava\u306a\u3093\u304b\u3063\u3066\u3044\u3046\u3068\n\u74b0\u5883\u69cb\u7bc9\u304c\u697d\u3067power-assert\u4f7f\u3048\u308b\u304b\u3089\u3068\u3044\u30462\u70b9\u306b\u5c3d\u304d\u307e\u3059\u3002\n\u69cb\u6587\u7684\u306b\u306fmocha\u304c\u597d\u304d\u306a\u3093\u3060\u3051\u3069\u306d\u3002\u898b\u6163\u308c\u3066\u308b\u4eba\u3082\u591a\u3044\u3060\u308d\u3046\u3057\u3002\n\n\n\u3044\u304f\u3089\u306a\u3093\u3067\u3082\u30b3\u30fc\u30c9\u306e\u7f85\u5217\u904e\u304e\u308b\u306e\u3067\u305d\u306e\u3046\u3061\u8ffd\u8a18\u3059\u308b\u304b\u3082\u3002\n"}