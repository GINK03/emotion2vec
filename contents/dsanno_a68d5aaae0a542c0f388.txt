{"context": "\n\n\u306f\u3058\u3081\u306b\nChainer\u306efunctions\u306e\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u3044\u308b\u3068cuda.elementwise\u3068\u304bcuda.reduce\u306e\u547c\u3073\u51fa\u3057\u3092\u898b\u304b\u3051\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u308c\u3089\u306f\u72ec\u81ea\u306e\u51e6\u7406\u3092GPU\u4e0a\u3067\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\nChainer function\u306e\u5b9f\u88c5\u306b\u306f\u6b20\u304b\u305b\u306a\u3044\u30e1\u30bd\u30c3\u30c9\u3068\u8a00\u3048\u308b\u308f\u3051\u3067\u3001Chainer\u4e2d\u7d1a\u8005\u306b\u306a\u308b\u305f\u3081\u306b\u5fc5\u8981\u305d\u3046\u306a\u306e\u3067\u8abf\u67fb\u3057\u307e\u3057\u305f\u3002\n\u3053\u306e\u8a18\u4e8b\u3067\u306fcuda.elementwise\u3092\u6271\u3044\u3001cuda.reduce\u306b\u3064\u3044\u3066\u306f\u8aac\u660e\u3057\u307e\u305b\u3093\u3002\ncuda.elementwise\u306e\u8aac\u660e\u306f\u4ee5\u4e0b\u306b\u3042\u308a\u307e\u3059\u3002\nhttp://docs.chainer.org/en/stable/cupy-reference/kernel.html\n\u307e\u305fSlideShare\u306bPreferred Networks\u306e\u5965\u7530\u6c0f\u306b\u3088\u308b\u89e3\u8aac\u304c\u3042\u308a\u307e\u3059\u3002\nhttp://www.slideshare.net/ryokuta/cupy\n\n\u78ba\u8a8d\u3057\u305f\u74b0\u5883\n\nWindows 10\nPython 2.7\nChainer 1.9.0\nCUDA 7.5\n\n\ncuda.elementwise\u306f\u4f55\u3092\u3059\u308b\u306e\u304b\uff1f\ncuda.elementwise\u306f\u3001CUDA kernel\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\nCUDA kernel\u3068\u306f\u3001CUDA\u306b\u5bfe\u5fdc\u3057\u305fGPU\u4e0a\u3067\u5b9f\u884c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002\ncuda.elementwise\u3092\u547c\u3076\u3068\u3001\u623b\u308a\u5024\u3068\u3057\u3066CUDA kernel\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u95a2\u6570kernel invocation function\u304c\u5f97\u3089\u308c\u3001kernel invocation function\u3092\u547c\u3076\u3068GPU\u4e0a\u3067CUDA kernel\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\nkernel invocation function\u306e\u5b9f\u4f53\u306fElementwiseKernel\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3001\u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306fcallable\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u6700\u521d\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u6700\u521d\u306e\u4f8b\u3068\u3057\u3066\u3001\u4e0e\u3048\u3089\u308c\u305f\u914d\u5217\u306e\u5168\u3066\u306e\u8981\u7d20\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002\n\u307e\u305a\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5fc5\u8981\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3001cuda.cupy\u306e\u53c2\u7167\u3068\u3057\u3066xp\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\u3053\u308c\u4ee5\u964d\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u524d\u63d0\u3068\u3057\u307e\u3059\u3002\nimport numpy as np\nimport chainer\nfrom chainer import cuda\n\nxp = cuda.cupy\n\n\u6b21\u306bcuda.elementwise\u3092\u4f7f\u3044\u3001\u914d\u5217\u8981\u7d20\u306e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3092\u884c\u3044\u307e\u3059\u3002\nx = xp.asarray([[1, 2, 3], [4, 5, 6]], dtype=np.float32)\n\ny = cuda.elementwise(\n'T x',\n'T y',\n'y = x + 1;',\n'sample1_fwd',\n)(x)\n\nprint(y)\n\n\u51fa\u529b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u5168\u3066\u306e\u8981\u7d20\u304c\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\nbefore\u306e\u51fa\u529b\u306e\u5f8cafter\u306e\u51fa\u529b\u3092\u884c\u3046\u307e\u3067\u306b\u5c11\u3057\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u304c\u3001\u88cf\u3067nvcc\u306b\u3088\u308b\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u884c\u3063\u3066\u3044\u308b\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n[[ 2.  3.  4.]\n [ 5.  6.  7.]]\n\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u89e3\u8aac\ncuda.elementwise\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b2\u6bb5\u968e\u306b\u5206\u3051\u3066\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u305f\u3060\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\u3067\u306fcuda.elementwise(...)(x)\u306e\u3088\u3046\u306b2\u3064\u306e\u51e6\u7406\u3092\u307e\u3068\u3081\u3066\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002\n\n\ncuda.elementwise\u3092\u547c\u3073\u51fa\u3057\u3066kernel invocation function\u3092\u751f\u6210\n\n\u751f\u6210\u3057\u305fkernel invocation function\u3092\u547c\u3073\u51fa\u3057\u3066\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\n\ncuda.elementwise\u306e\u5f15\u6570\u30fb\u623b\u308a\u5024\u306e\u8aac\u660e\u306f\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u306f\u306a\u304f\u3001cupy.ElementwiseKernel\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002\ncuda.elementwise\u306f\u5185\u90e8\u3067cupy.ElementwiseKernel\u3092\u547c\u3073\u51fa\u3057\u3066\u304a\u308a\u3001\u4e21\u8005\u306e\u5f15\u6570\u306f(cuda.elementwise\u3067name\u304c\u5fc5\u9808\u3067\u3042\u308b\u3053\u3068\u3092\u9664\u3044\u3066)\u540c\u3058\u3067\u3059\u3002\ncuda.elementwise\u306b\u306f\u4ee5\u4e0b\u306e\u5f15\u6570\u304c\u5fc5\u8981\u3067\u3059\u3002\u3053\u306e\u307b\u304b\u306bOptional\u306a\u5f15\u6570\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u307e\u3060\u5341\u5206\u7406\u89e3\u3067\u304d\u3066\u3044\u306a\u3044\u306e\u3067\u8aac\u660e\u306f\u5272\u611b\u3057\u307e\u3059\u3002\n\nin_params(str)\nout_params(str)\nopearation(str)\nname(str)\n\n\nin_params\n\u5165\u529b\u5f15\u6570\u3092\u5ba3\u8a00\u3059\u308b\u6587\u5b57\u5217\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u5f15\u6570\u306b\u306f\u578b\u3068\u5f15\u6570\u540d\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u578b\u6587\u5b57\u5217\u304c1\u6587\u5b57\u306e\u5834\u5408\u306b\u306ftype placeholder\u306b\u306a\u308a\u307e\u3059\u3002\ntype placeholder\u304c\u8868\u3059\u578b\u306fkernel invocation function\u5b9f\u884c\u6642\u306b\u6e21\u3057\u305f\u5909\u6570\u306e\u578b\u306b\u306a\u308a\u307e\u3059\u3002\n\u540c\u3058\u578b\u306e\u5909\u6570\u3092\u5ba3\u8a00\u3057\u305f\u3044\u3068\u304d\u306b\u4fbf\u5229\u3067\u3059\u3002\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u306fin_params\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n'T x',\n\n\u3053\u306e\u6587\u5b57\u5217\u306b\u3088\u3063\u3066\u4ee5\u4e0b\u3092\u8868\u73fe\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5165\u529b\u5f15\u6570\u3068\u3057\u3066x\u3092\u5ba3\u8a00\nx\u306e\u578b\u306fT\nT\u306ftype placeholder\n\n\nout_params\n\u51fa\u529b\u5f15\u6570\u3092\u5ba3\u8a00\u3059\u308b\u6587\u5b57\u5217\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\nin_params\u3068\u540c\u69d8\u306b\u5f15\u6570\u306b\u306f\u578b\u3068\u5f15\u6570\u540d\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u306fout_params\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n'T y',\n\n\u3053\u306e\u6587\u5b57\u5217\u306b\u3088\u3063\u3066\u4ee5\u4e0b\u3092\u8868\u73fe\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u51fa\u529b\u5f15\u6570\u3068\u3057\u3066y\u3092\u5ba3\u8a00\ny\u306e\u578b\u306fT\nT\u306ftype placeholder\u306a\u306e\u3067\u3001y\u306e\u578b\u306fx\u306e\u578b\u3068\u4e00\u7dd2\n\n\noperation\n\u5b9f\u884c\u3059\u308b\u51e6\u7406\u3092\u5b9a\u7fa9\u3059\u308b\u6587\u5b57\u5217\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u306f\u3001y\u306bx + 1\u3092\u4ee3\u5165\u3059\u308b\u51e6\u7406\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n'y = x + 1;',\n\n\nname\n\u51e6\u7406\u306e\u540d\u524d\u3067\u3059\u3002\nchainer.functions\u4ee5\u4e0b\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u5b9f\u88c5\u3092\u898b\u308b\u3068forward\u51e6\u7406\u306e\u5834\u5408\u306f\"function_name_fwd\"\u3001backward\u51e6\u7406\u306e\u5834\u5408\u306f\"function_name_bwd\"\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\nkernel invocation function\u306e\u5b9f\u884c\nkernel invocation function\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u5b9a\u7fa9\u3057\u305fCUDA kernel\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\u5b9f\u884c\u6642\u306b\u5f15\u6570\u3068\u3057\u3066in_params\u306b\u5bfe\u5fdc\u3057\u305f\u5909\u6570\u3092\u6e21\u3057\u307e\u3059\u3002\nout_params\u306b\u5bfe\u5fdc\u3057\u305f\u5909\u6570\u306f\u7701\u7565\u53ef\u80fd\u3067\u3059\u304c\u3001in_params\u306b\u5bfe\u5fdc\u3057\u305f\u5909\u6570\u306e\u5f8c\u306b\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u660e\u793a\u7684\u306b\u6e21\u3059\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\u623b\u308a\u5024\u306fout_params\u3067\u6307\u5b9a\u3057\u305f\u5f15\u6570\u3067\u3059\u3002\nout_params\u306b\u8907\u6570\u306e\u5f15\u6570\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306b\u306f\u623b\u308a\u5024\u304c\u305d\u308c\u3089\u306etuple\u306b\u306a\u308a\u307e\u3059\u3002\n\nout_params\u306b\u3082\u5024\u3092\u6e21\u3059\nout_params\u306b\u3082\u5024\u3092\u6e21\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nkernel invocation function\u306e\u5f15\u6570\u306bout_params\u306b\u5bfe\u5fdc\u3059\u308b\u5024\u3092\u6e21\u3059\u3060\u3051\u3067\u3059\u3002\nx = xp.asarray([[1, 2, 3], [4, 5, 6]], dtype=np.float32)\ny = xp.asarray([[1, 1, 1], [2, 2, 2]], dtype=np.float32)\n\ny = cuda.elementwise(\n'T x',\n'T y',\n'y += x;',\n'sample2_fwd',\n)(x, y)\n\nprint(y)\n\n\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u3001\u5143\u306ey\u306bx\u304c\u52a0\u7b97\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n[[ 2.  3.  4.]\n [ 6.  7.  8.]]\n\n\nBroadcasting\n\u914d\u5217\u306e\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u306f\u81ea\u52d5\u3067\u884c\u3063\u3066\u304f\u308c\u307e\u3059\u3002\nx = xp.asarray([1, 2, 3], dtype=np.float32)\ny = xp.asarray([[1, 1, 1], [2, 2, 2]], dtype=np.float32)\n\ny = cuda.elementwise(\n'T x',\n'T y',\n'y += x;',\n'sample3_fwd',\n)(x, y)\n\nprint(y)\n\n\u5b9f\u884c\u7d50\u679c:\n[[ 2.  3.  4.]\n [ 3.  4.  5.]]\n\n\u914d\u5217\u306e\u30b5\u30a4\u30ba\u304c\u5408\u308f\u305a\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u3067\u304d\u306a\u3044\u5834\u5408\u306f\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002\nx = xp.asarray([1, 2], dtype=np.float32)\ny = xp.asarray([[1, 1, 1], [2, 2, 2]], dtype=np.float32)\n\ny = cuda.elementwise(\n'T x',\n'T y',\n'y += x;',\n'sample4_fwd',\n)(x, y)\n\nprint(y)\n\n\u5b9f\u884c\u7d50\u679c:\nTraceback (most recent call last):\n  File \"elementwise_sample.py\", line 61, in <module>\n    )(x, y)\n  File \"cupy\\core\\elementwise.pxi\", line 508, in cupy.core.core.ElementwiseKernel.__call__ (cupy\\core\\core.cpp:34118)\n  File \"cupy\\core\\elementwise.pxi\", line 334, in cupy.core.core._broadcast (cupy\\core\\core.cpp:31734)\n  File \"cupy\\core\\core.pyx\", line 1504, in cupy.core.core.broadcast.__init__ (cupy\\core\\core.cpp:50697)\nValueError: Broadcasting failed\n\n\nIndexing\n\u914d\u5217\u3092\u64cd\u4f5c\u3059\u308b\u6642\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3057\u305f\u3044\u3053\u3068\u306f\u3088\u304f\u3042\u308a\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\n\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3057\u305f\u3044\u5909\u6570\u306braw\u3092\u3064\u3051\u308b\n\u7279\u6b8a\u5909\u6570i\u304c\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8868\u3059\n\n_ind.size()\u304c\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6570\u3092\u8868\u3059\n\n\u914d\u5217\u306e\u8981\u7d20\u3092\u9006\u9806\u306b\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u793a\u3057\u307e\u3059\u3002\nx = xp.asarray([1, 2, 3, 4], dtype=np.float32)\ny = xp.zeros_like(x, dtype=np.float32)\n\ny = cuda.elementwise(\n'raw T x',\n'T y',\n'y = x[_ind.size() - i - 1];',\n'sample5_fwd',\n)(x, y)\n\nprint(y)\n\n\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n[ 4.  3.  2.  1.]\n\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306fNumpy\u3092\u4f7f\u3063\u305f\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092GPU\u4e0a\u3067\u5b9f\u884c\u3057\u3066\u3044\u308b\u3068\u8003\u3048\u308c\u3070\u3088\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nx = np.asarray([1, 2, 3, 4], dtype=np.float32)\ny = np.zeros_like(x, dtype=np.float32)\ni = np.arange(4)\n\ny = x[4 - i - 1]\n\n\u6ce8\u610f\u70b9\u3068\u3057\u3066\u3001kernel invocation function\u306by\u3092\u6e21\u3059\u3053\u3068\u304c\u5fc5\u8981\u3067\u3042\u308b\u3053\u3068\u304c\u6319\u3052\u3089\u308c\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306by\u3092\u6e21\u3055\u306a\u3044\u3068ValueError: Loop size is Undecided\u3068\u3044\u3046\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002\n\u3053\u308c\u306fraw\u306a\u5f15\u6570\u3060\u3051\u3060\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u30b5\u30a4\u30ba\u3092\u6c7a\u3081\u3089\u308c\u306a\u3044\u305f\u3081\u306b\u8d77\u3053\u308b\u3088\u3046\u3067\u3059\u3002\nx = xp.asarray([1, 2, 3, 4], dtype=np.float32)\ny = xp.zeros_like(x, dtype=np.float32)\n\ny = cuda.elementwise(\n'raw T x',\n'T y',\n'y = x[_ind.size() - i - 1];',\n'sample6_fwd',\n)(x)\n\nprint(y)\n\n\n\u3082\u3046\u5c11\u3057\u8907\u96d1\u306aIndexing\nx\u304c2\u6b21\u5143\u306e\u914d\u5217\u3001t\u304c1\u6b21\u5143\u306e\u914d\u5217\u306e\u3068\u304d\u306b\u3001x[t[i]](i=0, 1, 2, ...)\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u3092\u8003\u3048\u307e\u3059\u3002\n\u3053\u308c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u66f8\u3051\u307e\u3059\u3002\nx = xp.asarray([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=np.float32)\nt = xp.asarray([0, 2, 1], dtype=np.int32)\n\ny = cuda.elementwise(\n'raw T x, S t',\n'T y',\n'int ind[] = {i, t}; y = x[ind];',\n'sample7_fwd',\n)(x, t)\n\nprint(y)\n\n\u5b9f\u884c\u7d50\u679c: \n[ 1.  6.  8.]\n\nint ind[] = {i, t};\u306f\u3001[(0, t[0]), (1, t[1]), (2, t[2])]\u3092\u793a\u3059\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\nfor\u30eb\u30fc\u30d7\nfor\u3001while\u306a\u3069C(\u6b63\u78ba\u306b\u306fnvcc?)\u306e\u69cb\u6587\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n\u4f8b\u3068\u3057\u3066\u3001x\u306e\u5217\u3054\u3068\u306e\u7d2f\u7a4d\u5024\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\ny[i, j]\u304cx[0, j]\u304b\u3089x[i, j]\u307e\u3067\u306e\u7d2f\u7a4d\u306b\u306a\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\nx = xp.asarray([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=np.float32)\ny = xp.zeros_like(x)\n\ny = cuda.elementwise(\n'raw T x, int32 c',\n'raw T y',\n'''\nint ind[] = {0, i};\ny[ind] = x[ind];\nfor (int j = 1; j < c; j++) {\n    int ind[] = {j, i};\n    int prev_ind[] = {j - 1, i};\n    y[ind] = y[prev_ind] + x[ind];\n}\n''',\n'sample8_fwd',\n)(x, x.shape[0], y, size=x.shape[1])\n\nprint(y)\n\n\u5b9f\u884c\u7d50\u679c:\n[[  1.   2.   3.]\n [  5.   7.   9.]\n [ 12.  15.  18.]]\n\n\nCUDA\u95a2\u6570\nCUDA\u306e\u95a2\u6570\u3082\u4f7f\u3048\u307e\u3059\u3002\n\u305f\u3060\u3057\u3069\u3053\u307e\u3067\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u304b\u306f\u4e0d\u660e\u3067\u3059\u3002\n\u4f8b\u3068\u3057\u3066atomicAdd\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n\nx = xp.zeros((3, 3), dtype=np.float32)\nt = xp.asarray([0, 1, 2], dtype=np.int32)\n\ny = cuda.elementwise(\n'S t',\n'raw T x',\n'int ind[] = {i, t}; atomicAdd(&x[ind], 1);',\n'sample9_fwd',\n)(t, x)\n\nprint(y)\n\n\u5b9f\u884c\u7d50\u679c:\n[[ 1.  0.  0.]\n [ 0.  1.  0.]\n [ 0.  0.  1.]]\n\n\n\u6700\u5f8c\u306b\ncuda.elementwise\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u3067\u3001Chainer\u306e\u7406\u89e3\u3082\u3088\u308a\u6df1\u307e\u308b\u3068\u601d\u3044\u307e\u3059\u3002\ncuda.elementwise\u3068cuda.reduce\u306fChainer\u5185\u90e8\u3067\u3088\u304f\u4f7f\u308f\u308c\u3066\u304a\u308a\u3001\u3082\u3063\u3068\u8a73\u3057\u304f\u77e5\u308a\u305f\u3044\u65b9\u306f\u305d\u3061\u3089\u3092\u53c2\u7167\u3059\u308b\u306e\u304c\u3088\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n# \u306f\u3058\u3081\u306b\n\nChainer\u306efunctions\u306e\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u3044\u308b\u3068`cuda.elementwise`\u3068\u304b`cuda.reduce`\u306e\u547c\u3073\u51fa\u3057\u3092\u898b\u304b\u3051\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u308c\u3089\u306f\u72ec\u81ea\u306e\u51e6\u7406\u3092GPU\u4e0a\u3067\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\nChainer function\u306e\u5b9f\u88c5\u306b\u306f\u6b20\u304b\u305b\u306a\u3044\u30e1\u30bd\u30c3\u30c9\u3068\u8a00\u3048\u308b\u308f\u3051\u3067\u3001Chainer\u4e2d\u7d1a\u8005\u306b\u306a\u308b\u305f\u3081\u306b\u5fc5\u8981\u305d\u3046\u306a\u306e\u3067\u8abf\u67fb\u3057\u307e\u3057\u305f\u3002\n\u3053\u306e\u8a18\u4e8b\u3067\u306f`cuda.elementwise`\u3092\u6271\u3044\u3001`cuda.reduce`\u306b\u3064\u3044\u3066\u306f\u8aac\u660e\u3057\u307e\u305b\u3093\u3002\n\n`cuda.elementwise`\u306e\u8aac\u660e\u306f\u4ee5\u4e0b\u306b\u3042\u308a\u307e\u3059\u3002\nhttp://docs.chainer.org/en/stable/cupy-reference/kernel.html\n\u307e\u305fSlideShare\u306bPreferred Networks\u306e\u5965\u7530\u6c0f\u306b\u3088\u308b\u89e3\u8aac\u304c\u3042\u308a\u307e\u3059\u3002\nhttp://www.slideshare.net/ryokuta/cupy\n\n# \u78ba\u8a8d\u3057\u305f\u74b0\u5883\n\n* Windows 10\n* Python 2.7\n* Chainer 1.9.0\n* CUDA 7.5\n\n# cuda.elementwise\u306f\u4f55\u3092\u3059\u308b\u306e\u304b\uff1f\n\n`cuda.elementwise`\u306f\u3001CUDA kernel\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\nCUDA kernel\u3068\u306f\u3001CUDA\u306b\u5bfe\u5fdc\u3057\u305fGPU\u4e0a\u3067\u5b9f\u884c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002\n`cuda.elementwise`\u3092\u547c\u3076\u3068\u3001\u623b\u308a\u5024\u3068\u3057\u3066CUDA kernel\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u95a2\u6570kernel invocation function\u304c\u5f97\u3089\u308c\u3001kernel invocation function\u3092\u547c\u3076\u3068GPU\u4e0a\u3067CUDA kernel\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\nkernel invocation function\u306e\u5b9f\u4f53\u306fElementwiseKernel\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3001\u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306fcallable\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n# \u6700\u521d\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n\u6700\u521d\u306e\u4f8b\u3068\u3057\u3066\u3001\u4e0e\u3048\u3089\u308c\u305f\u914d\u5217\u306e\u5168\u3066\u306e\u8981\u7d20\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002\n\u307e\u305a\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5fc5\u8981\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3001`cuda.cupy`\u306e\u53c2\u7167\u3068\u3057\u3066`xp`\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\u3053\u308c\u4ee5\u964d\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u524d\u63d0\u3068\u3057\u307e\u3059\u3002\n\n```py\nimport numpy as np\nimport chainer\nfrom chainer import cuda\n\nxp = cuda.cupy\n```\n\n\u6b21\u306b`cuda.elementwise`\u3092\u4f7f\u3044\u3001\u914d\u5217\u8981\u7d20\u306e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3092\u884c\u3044\u307e\u3059\u3002\n\n```py\nx = xp.asarray([[1, 2, 3], [4, 5, 6]], dtype=np.float32)\n\ny = cuda.elementwise(\n'T x',\n'T y',\n'y = x + 1;',\n'sample1_fwd',\n)(x)\n\nprint(y)\n```\n\n\u51fa\u529b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u5168\u3066\u306e\u8981\u7d20\u304c\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\nbefore\u306e\u51fa\u529b\u306e\u5f8cafter\u306e\u51fa\u529b\u3092\u884c\u3046\u307e\u3067\u306b\u5c11\u3057\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u304c\u3001\u88cf\u3067nvcc\u306b\u3088\u308b\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u884c\u3063\u3066\u3044\u308b\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n\n```\n[[ 2.  3.  4.]\n [ 5.  6.  7.]]\n```\n\n# \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u89e3\u8aac\n\n`cuda.elementwise`\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b2\u6bb5\u968e\u306b\u5206\u3051\u3066\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u305f\u3060\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\u3067\u306f`cuda.elementwise(...)(x)`\u306e\u3088\u3046\u306b2\u3064\u306e\u51e6\u7406\u3092\u307e\u3068\u3081\u3066\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002\n\n* `cuda.elementwise`\u3092\u547c\u3073\u51fa\u3057\u3066kernel invocation function\u3092\u751f\u6210  \n* \u751f\u6210\u3057\u305fkernel invocation function\u3092\u547c\u3073\u51fa\u3057\u3066\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\n\n`cuda.elementwise`\u306e\u5f15\u6570\u30fb\u623b\u308a\u5024\u306e\u8aac\u660e\u306f\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u306f\u306a\u304f\u3001[`cupy.ElementwiseKernel`\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://docs.chainer.org/en/stable/cupy-reference/kernel.html#cupy.ElementwiseKernel)\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n`cuda.elementwise`\u306f\u5185\u90e8\u3067`cupy.ElementwiseKernel`\u3092\u547c\u3073\u51fa\u3057\u3066\u304a\u308a\u3001\u4e21\u8005\u306e\u5f15\u6570\u306f(`cuda.elementwise`\u3067`name`\u304c\u5fc5\u9808\u3067\u3042\u308b\u3053\u3068\u3092\u9664\u3044\u3066)\u540c\u3058\u3067\u3059\u3002\n`cuda.elementwise`\u306b\u306f\u4ee5\u4e0b\u306e\u5f15\u6570\u304c\u5fc5\u8981\u3067\u3059\u3002\u3053\u306e\u307b\u304b\u306bOptional\u306a\u5f15\u6570\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u307e\u3060\u5341\u5206\u7406\u89e3\u3067\u304d\u3066\u3044\u306a\u3044\u306e\u3067\u8aac\u660e\u306f\u5272\u611b\u3057\u307e\u3059\u3002\n\n* in_params(str)\n* out_params(str)\n* opearation(str)\n* name(str)\n\n## in_params\n\n\u5165\u529b\u5f15\u6570\u3092\u5ba3\u8a00\u3059\u308b\u6587\u5b57\u5217\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u5f15\u6570\u306b\u306f\u578b\u3068\u5f15\u6570\u540d\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u578b\u6587\u5b57\u5217\u304c1\u6587\u5b57\u306e\u5834\u5408\u306b\u306f**type placeholder**\u306b\u306a\u308a\u307e\u3059\u3002\ntype placeholder\u304c\u8868\u3059\u578b\u306fkernel invocation function\u5b9f\u884c\u6642\u306b\u6e21\u3057\u305f\u5909\u6570\u306e\u578b\u306b\u306a\u308a\u307e\u3059\u3002\n\u540c\u3058\u578b\u306e\u5909\u6570\u3092\u5ba3\u8a00\u3057\u305f\u3044\u3068\u304d\u306b\u4fbf\u5229\u3067\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u306fin_params\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\n```py\n'T x',\n```\n\n\u3053\u306e\u6587\u5b57\u5217\u306b\u3088\u3063\u3066\u4ee5\u4e0b\u3092\u8868\u73fe\u3057\u3066\u3044\u307e\u3059\u3002\n\n* \u5165\u529b\u5f15\u6570\u3068\u3057\u3066x\u3092\u5ba3\u8a00\n* x\u306e\u578b\u306fT\n* T\u306ftype placeholder\n\n## out_params\n\n\u51fa\u529b\u5f15\u6570\u3092\u5ba3\u8a00\u3059\u308b\u6587\u5b57\u5217\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\nin_params\u3068\u540c\u69d8\u306b\u5f15\u6570\u306b\u306f\u578b\u3068\u5f15\u6570\u540d\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u306fout_params\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\n```py\n'T y',\n```\n\n\u3053\u306e\u6587\u5b57\u5217\u306b\u3088\u3063\u3066\u4ee5\u4e0b\u3092\u8868\u73fe\u3057\u3066\u3044\u307e\u3059\u3002\n\n* \u51fa\u529b\u5f15\u6570\u3068\u3057\u3066y\u3092\u5ba3\u8a00\n* y\u306e\u578b\u306fT\n* T\u306ftype placeholder\u306a\u306e\u3067\u3001y\u306e\u578b\u306fx\u306e\u578b\u3068\u4e00\u7dd2\n\n## operation\n\n\u5b9f\u884c\u3059\u308b\u51e6\u7406\u3092\u5b9a\u7fa9\u3059\u308b\u6587\u5b57\u5217\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u306f\u3001`y`\u306b`x + 1`\u3092\u4ee3\u5165\u3059\u308b\u51e6\u7406\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\n```py\n'y = x + 1;',\n```\n\n## name\n\n\u51e6\u7406\u306e\u540d\u524d\u3067\u3059\u3002\nchainer.functions\u4ee5\u4e0b\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u5b9f\u88c5\u3092\u898b\u308b\u3068forward\u51e6\u7406\u306e\u5834\u5408\u306f\"function_name_fwd\"\u3001backward\u51e6\u7406\u306e\u5834\u5408\u306f\"function_name_bwd\"\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n## kernel invocation function\u306e\u5b9f\u884c\n\nkernel invocation function\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u5b9a\u7fa9\u3057\u305fCUDA kernel\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\u5b9f\u884c\u6642\u306b\u5f15\u6570\u3068\u3057\u3066in_params\u306b\u5bfe\u5fdc\u3057\u305f\u5909\u6570\u3092\u6e21\u3057\u307e\u3059\u3002\nout_params\u306b\u5bfe\u5fdc\u3057\u305f\u5909\u6570\u306f\u7701\u7565\u53ef\u80fd\u3067\u3059\u304c\u3001in_params\u306b\u5bfe\u5fdc\u3057\u305f\u5909\u6570\u306e\u5f8c\u306b\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u660e\u793a\u7684\u306b\u6e21\u3059\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\u623b\u308a\u5024\u306fout_params\u3067\u6307\u5b9a\u3057\u305f\u5f15\u6570\u3067\u3059\u3002\nout_params\u306b\u8907\u6570\u306e\u5f15\u6570\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306b\u306f\u623b\u308a\u5024\u304c\u305d\u308c\u3089\u306etuple\u306b\u306a\u308a\u307e\u3059\u3002\n\n# out_params\u306b\u3082\u5024\u3092\u6e21\u3059\n\nout_params\u306b\u3082\u5024\u3092\u6e21\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nkernel invocation function\u306e\u5f15\u6570\u306bout_params\u306b\u5bfe\u5fdc\u3059\u308b\u5024\u3092\u6e21\u3059\u3060\u3051\u3067\u3059\u3002\n\n```py\nx = xp.asarray([[1, 2, 3], [4, 5, 6]], dtype=np.float32)\ny = xp.asarray([[1, 1, 1], [2, 2, 2]], dtype=np.float32)\n\ny = cuda.elementwise(\n'T x',\n'T y',\n'y += x;',\n'sample2_fwd',\n)(x, y)\n\nprint(y)\n```\n\n\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u3001\u5143\u306ey\u306bx\u304c\u52a0\u7b97\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```\n[[ 2.  3.  4.]\n [ 6.  7.  8.]]\n```\n\n# Broadcasting\n\n\u914d\u5217\u306e\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u306f\u81ea\u52d5\u3067\u884c\u3063\u3066\u304f\u308c\u307e\u3059\u3002\n\n```py\nx = xp.asarray([1, 2, 3], dtype=np.float32)\ny = xp.asarray([[1, 1, 1], [2, 2, 2]], dtype=np.float32)\n\ny = cuda.elementwise(\n'T x',\n'T y',\n'y += x;',\n'sample3_fwd',\n)(x, y)\n\nprint(y)\n```\n\n\u5b9f\u884c\u7d50\u679c:\n\n```\n[[ 2.  3.  4.]\n [ 3.  4.  5.]]\n```\n\n\u914d\u5217\u306e\u30b5\u30a4\u30ba\u304c\u5408\u308f\u305a\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u3067\u304d\u306a\u3044\u5834\u5408\u306f\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002\n\n```py\nx = xp.asarray([1, 2], dtype=np.float32)\ny = xp.asarray([[1, 1, 1], [2, 2, 2]], dtype=np.float32)\n\ny = cuda.elementwise(\n'T x',\n'T y',\n'y += x;',\n'sample4_fwd',\n)(x, y)\n\nprint(y)\n```\n\n\u5b9f\u884c\u7d50\u679c:\n\n```\nTraceback (most recent call last):\n  File \"elementwise_sample.py\", line 61, in <module>\n    )(x, y)\n  File \"cupy\\core\\elementwise.pxi\", line 508, in cupy.core.core.ElementwiseKernel.__call__ (cupy\\core\\core.cpp:34118)\n  File \"cupy\\core\\elementwise.pxi\", line 334, in cupy.core.core._broadcast (cupy\\core\\core.cpp:31734)\n  File \"cupy\\core\\core.pyx\", line 1504, in cupy.core.core.broadcast.__init__ (cupy\\core\\core.cpp:50697)\nValueError: Broadcasting failed\n```\n\n# Indexing\n\n\u914d\u5217\u3092\u64cd\u4f5c\u3059\u308b\u6642\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3057\u305f\u3044\u3053\u3068\u306f\u3088\u304f\u3042\u308a\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\n\n* \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3057\u305f\u3044\u5909\u6570\u306b`raw`\u3092\u3064\u3051\u308b\n* \u7279\u6b8a\u5909\u6570`i`\u304c\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8868\u3059\n* `_ind.size()`\u304c\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6570\u3092\u8868\u3059\n\n\u914d\u5217\u306e\u8981\u7d20\u3092\u9006\u9806\u306b\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u793a\u3057\u307e\u3059\u3002\n\n```py\nx = xp.asarray([1, 2, 3, 4], dtype=np.float32)\ny = xp.zeros_like(x, dtype=np.float32)\n\ny = cuda.elementwise(\n'raw T x',\n'T y',\n'y = x[_ind.size() - i - 1];',\n'sample5_fwd',\n)(x, y)\n\nprint(y)\n```\n\n\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```\n[ 4.  3.  2.  1.]\n```\n\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306fNumpy\u3092\u4f7f\u3063\u305f\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092GPU\u4e0a\u3067\u5b9f\u884c\u3057\u3066\u3044\u308b\u3068\u8003\u3048\u308c\u3070\u3088\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n```py\nx = np.asarray([1, 2, 3, 4], dtype=np.float32)\ny = np.zeros_like(x, dtype=np.float32)\ni = np.arange(4)\n\ny = x[4 - i - 1]\n```\n\n\u6ce8\u610f\u70b9\u3068\u3057\u3066\u3001kernel invocation function\u306b`y`\u3092\u6e21\u3059\u3053\u3068\u304c\u5fc5\u8981\u3067\u3042\u308b\u3053\u3068\u304c\u6319\u3052\u3089\u308c\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b`y`\u3092\u6e21\u3055\u306a\u3044\u3068`ValueError: Loop size is Undecided`\u3068\u3044\u3046\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002\n\u3053\u308c\u306fraw\u306a\u5f15\u6570\u3060\u3051\u3060\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u30b5\u30a4\u30ba\u3092\u6c7a\u3081\u3089\u308c\u306a\u3044\u305f\u3081\u306b\u8d77\u3053\u308b\u3088\u3046\u3067\u3059\u3002\n\n```py\nx = xp.asarray([1, 2, 3, 4], dtype=np.float32)\ny = xp.zeros_like(x, dtype=np.float32)\n\ny = cuda.elementwise(\n'raw T x',\n'T y',\n'y = x[_ind.size() - i - 1];',\n'sample6_fwd',\n)(x)\n\nprint(y)\n```\n\n# \u3082\u3046\u5c11\u3057\u8907\u96d1\u306aIndexing\n\n`x`\u304c2\u6b21\u5143\u306e\u914d\u5217\u3001`t`\u304c1\u6b21\u5143\u306e\u914d\u5217\u306e\u3068\u304d\u306b\u3001`x[t[i]]`(i=0, 1, 2, ...)\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u3092\u8003\u3048\u307e\u3059\u3002\n\u3053\u308c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u66f8\u3051\u307e\u3059\u3002\n\n```py\nx = xp.asarray([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=np.float32)\nt = xp.asarray([0, 2, 1], dtype=np.int32)\n\ny = cuda.elementwise(\n'raw T x, S t',\n'T y',\n'int ind[] = {i, t}; y = x[ind];',\n'sample7_fwd',\n)(x, t)\n\nprint(y)\n```\n\n\u5b9f\u884c\u7d50\u679c: \n\n```\n[ 1.  6.  8.]\n```\n\n`int ind[] = {i, t};`\u306f\u3001[(0, t[0]), (1, t[1]), (2, t[2])]\u3092\u793a\u3059\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n# for\u30eb\u30fc\u30d7\n\n`for`\u3001`while`\u306a\u3069C(\u6b63\u78ba\u306b\u306fnvcc?)\u306e\u69cb\u6587\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n\u4f8b\u3068\u3057\u3066\u3001x\u306e\u5217\u3054\u3068\u306e\u7d2f\u7a4d\u5024\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\n`y[i, j]`\u304c`x[0, j]`\u304b\u3089`x[i, j]`\u307e\u3067\u306e\u7d2f\u7a4d\u306b\u306a\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n```py\nx = xp.asarray([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=np.float32)\ny = xp.zeros_like(x)\n\ny = cuda.elementwise(\n'raw T x, int32 c',\n'raw T y',\n'''\nint ind[] = {0, i};\ny[ind] = x[ind];\nfor (int j = 1; j < c; j++) {\n    int ind[] = {j, i};\n    int prev_ind[] = {j - 1, i};\n    y[ind] = y[prev_ind] + x[ind];\n}\n''',\n'sample8_fwd',\n)(x, x.shape[0], y, size=x.shape[1])\n\nprint(y)\n```\n\n\u5b9f\u884c\u7d50\u679c:\n\n```\n[[  1.   2.   3.]\n [  5.   7.   9.]\n [ 12.  15.  18.]]\n```\n\n# CUDA\u95a2\u6570\n\nCUDA\u306e\u95a2\u6570\u3082\u4f7f\u3048\u307e\u3059\u3002\n\u305f\u3060\u3057\u3069\u3053\u307e\u3067\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u304b\u306f\u4e0d\u660e\u3067\u3059\u3002\n\u4f8b\u3068\u3057\u3066`atomicAdd`\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n\n```py\n\nx = xp.zeros((3, 3), dtype=np.float32)\nt = xp.asarray([0, 1, 2], dtype=np.int32)\n\ny = cuda.elementwise(\n'S t',\n'raw T x',\n'int ind[] = {i, t}; atomicAdd(&x[ind], 1);',\n'sample9_fwd',\n)(t, x)\n\nprint(y)\n```\n\n\u5b9f\u884c\u7d50\u679c:\n\n```\n[[ 1.  0.  0.]\n [ 0.  1.  0.]\n [ 0.  0.  1.]]\n```\n\n# \u6700\u5f8c\u306b\n\n`cuda.elementwise`\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u3067\u3001Chainer\u306e\u7406\u89e3\u3082\u3088\u308a\u6df1\u307e\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n`cuda.elementwise`\u3068`cuda.reduce`\u306fChainer\u5185\u90e8\u3067\u3088\u304f\u4f7f\u308f\u308c\u3066\u304a\u308a\u3001\u3082\u3063\u3068\u8a73\u3057\u304f\u77e5\u308a\u305f\u3044\u65b9\u306f\u305d\u3061\u3089\u3092\u53c2\u7167\u3059\u308b\u306e\u304c\u3088\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["Python", "Chainer", "DeepLearning"]}