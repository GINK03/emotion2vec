{"context": " More than 1 year has passed since last update.64bit\u5bfe\u5fdc\u3067\u30cf\u30de\u308a\u305d\u3046\u306a\u306e\u3067\u30e1\u30e2\u3002\n\n\u7d50\u8ad6\n\nLuaVM\u306f32bit\u3067\u56fa\u5b9a\u3055\u305b\u308b\nCocoaPods\u4f7f\u3046\n\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u3092\u4f7f\u308f\u306a\u3044\n\n\n\u74b0\u5883\n\n\n\nLua\n5.2.1\n\n\n\n\nOS X\n10.8.5\n\n\nXcode\n5.0\n\n\nCocoaPods\n0.25.0\n\n\ncc\nApple LLVM version 5.0 (clang-500.2.76) (based on LLVM 3.3svn)\n\n\n\n\niOS\u3067Lua\u3092\u52d5\u304b\u3059\n\u9069\u5f53\u306b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u308b\u3002\n[Create a new Xcode project] -> [iOS] -> [Application] -> [Empty Application]\nLua\u306fCocoaPods\u3067\u6301\u3063\u3066\u304f\u308b\u304b\u3001\u516c\u5f0f\u30b5\u30a4\u30c8\u306etar\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u81ea\u524d\u3067\u7d44\u8fbc\u3080\u3002\n\nCocoaPods\u306e\u5834\u5408\nPodfile\u3092\u6e96\u5099\u3002\n\nPodfile\nplatform :ios, '7.0'\npod 'lua', '~> 5.2.1'\n\n\nXcode\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3002\n\n$ cd /path/to/xcodeproject\n$ pod install\n\n\n\u81ea\u524d\u306e\u5834\u5408\n\u516c\u5f0f\u30b5\u30a4\u30c8\u304b\u3089tar\u3092\u53d6\u3063\u3066\u304f\u308b\u3002\n\n$ cd /path/to/work\n$ curl -R -O http://www.lua.org/ftp/lua-5.2.1.tar.gz\n$ tar zxf lua-5.2.1.tar.gz\n\n\u5c55\u958b\u3055\u308c\u305fsrc\u30d5\u30a9\u30eb\u30c0\u3092Xcode\u306b\u8ffd\u52a0\u3002\n\u5168\u90e8\u8ffd\u52a0\u3059\u308b\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u3067main\u95a2\u6570\u3092\u542b\u3093\u3067\u3044\u308blua.c\u3068luac.c\u3092\u9664\u5916\u3002\n\nLua\u3092\u52d5\u304b\u3059\nLua\u306e\u9762\u5012\u3092\u898b\u308b\u30d8\u30eb\u30d1\u30fc\u3002\n\nLuaManager.h\n#import <Foundation/Foundation.h>\n\n#import \"lualib.h\"\n#import \"lauxlib.h\"\n\n@interface LuaManager : NSObject {\n    lua_State *_L;\n}\n- (void)regFunction:(NSString*)function callback:(lua_CFunction)callback;\n\n- (BOOL)doLuaData:(NSData *)data tag:(NSString *)tag;\n- (BOOL)doLuaFile:(NSString*)file;\n- (BOOL)doLuaString:(NSString*)script tag:(NSString*)tag;\n@end\n\n\n\nLuaManager.m\n#import \"LuaManager.h\"\n\n@implementation LuaManager\n- (id)init\n{\n    if( (self = [super init]) != nil) {\n        _L = luaL_newstate();\n        luaL_openlibs(_L);\n    }\n    return self;\n}\n- (void)dealloc\n{\n    lua_close(_L);\n}\n\n- (void)regFunction:(NSString*)function callback:(lua_CFunction)callback\n{\n    const char *functionname = [function cStringUsingEncoding:NSUTF8StringEncoding];\n    lua_register(_L, functionname, callback);\n}\n\n- (BOOL)doLuaData:(NSData *)data tag:(NSString *)tag\n{\n    int err;\n    const char *scriptname = [tag cStringUsingEncoding:NSUTF8StringEncoding];\n\n    if ( (err = luaL_loadbuffer(_L, data.bytes, data.length, scriptname)) == LUA_OK) {\n        err = lua_pcall(_L, 0, 0, 0);\n    }\n    if (err == LUA_OK) {\n        return YES;\n    } else {\n        NSLog(@\"Lua error on '%@' '%s'\", name, lua_tostring(_L, lua_gettop(_L)));\n    }\n    return NO;\n}\n- (BOOL)doLuaFile:(NSString*)file\n{\n    if( !file) return NO;\n    NSData *data = [NSData dataWithContentsOfFile:file];\n    if( !data) return NO;\n    return [self doLuaData:data tag:file];\n}\n- (BOOL)doLuaString:(NSString*)script tag:(NSString*)tag\n{\n    if( !script || !tag) return NO;\n    NSData *data = [script dataUsingEncoding:NSUTF8StringEncoding];\n    if( !data) return NO;\n    return [self doLuaData:data tag:tag];\n}\n@end\n\n\nluaL_newstate()\u3067Lua\u74b0\u5883\u3092\u6e96\u5099\u3057\u3001luaL_loadbuffer()\u3067\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u30ed\u30fc\u30c9\u3001lua_pcall()\u3067\u5b9f\u884c\u3002\nLua\u304b\u3089\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3055\u308c\u308b\u95a2\u6570\u3092lua_register()\u3067\u767b\u9332\u3057\u3066\u304a\u3051\u3070Lua\u304c\u672c\u5f53\u306b\u52d5\u3044\u3066\u3044\u308b\u306e\u304b\u78ba\u8a8d\u3067\u304d\u308b\u3002\n\nViewController.m\n#import \"LuaManager.h\"\n\n..\n\n/* \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3055\u308c\u308b\u95a2\u6570 */\nstatic int _luaf_piyo(lua_State *L)\n{\n    NSLog( @\"piyo\");\n    return 0;\n}\n\n..\n\n- (void)exec\n{\n    LuaManager *lua = [[LuaManager alloc] init];\n    [lua regFunction:@\"piyo\" callback:_luaf_piyo];  // \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u767b\u9332\n    [lua doLuaString:@\"piyo()\" tag:@\"test\"];        // \u30b9\u30af\u30ea\u30d7\u30c8\u5b9f\u884c\uff08\u3055\u3063\u304d\u767b\u9332\u3057\u305fpiyo()\u95a2\u6570\u3092\u30b3\u30fc\u30eb\u3059\u308b\u3060\u3051\uff09\n}\n\n\n_luaf_piyo()\u306eNSLog()\u304c\u5b9f\u884c\u3055\u308c\u3066\u3044\u308c\u3070\u6e96\u5099\u5b8c\u4e86\u3002\n\n\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u306e\u30d8\u30c3\u30c0\u30fc\u30c1\u30a7\u30c3\u30af\nLua\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u540c\u3058\u3067\u3082\u3001luac\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u74b0\u5883\u306b\u3088\u3063\u3066LuaVM\u304c\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u304f\u308c\u306a\u3044\u3002\n\nlua-5.2.1/src/lundump.c\n/* the code below must be consistent with the code in luaU_header */\n#define N0  LUAC_HEADERSIZE\n#define N1  (sizeof(LUA_SIGNATURE)-sizeof(char))\n#define N2  N1+2\n#define N3  N2+6\n\nstatic void LoadHeader(LoadState* S)\n{\n    lu_byte h[LUAC_HEADERSIZE];\n    lu_byte s[LUAC_HEADERSIZE];\n    luaU_header(h);\n    memcpy(s,h,sizeof(char));           /* first char already read */\n    LoadBlock(S,s+sizeof(char),LUAC_HEADERSIZE-sizeof(char));\n    if (memcmp(h,s,N0)==0) return;\n    if (memcmp(h,s,N1)!=0) error(S,\"not a\");\n    if (memcmp(h,s,N2)!=0) error(S,\"version mismatch in\");\n    if (memcmp(h,s,N3)!=0) error(S,\"incompatible\"); else error(S,\"corrupted\");\n}\n\n..\n\n/*\n * make header for precompiled chunks\n * if you change the code below be sure to update LoadHeader and FORMAT above\n * and LUAC_HEADERSIZE in lundump.h\n */\nvoid luaU_header (lu_byte* h)\n{\n    int x=1;\n    memcpy(h,LUA_SIGNATURE,sizeof(LUA_SIGNATURE)-sizeof(char));\n    h+=sizeof(LUA_SIGNATURE)-sizeof(char);\n    *h++=cast_byte(VERSION);\n    *h++=cast_byte(FORMAT);\n    *h++=cast_byte(*(char*)&x);         /* endianness */\n    *h++=cast_byte(sizeof(int));\n    *h++=cast_byte(sizeof(size_t));\n    *h++=cast_byte(sizeof(Instruction));\n    *h++=cast_byte(sizeof(lua_Number));\n    *h++=cast_byte(((lua_Number)0.5)==0);       /* is lua_Number integral? */\n    memcpy(h,LUAC_TAIL,sizeof(LUAC_TAIL)-sizeof(char));\n}\n\n\n\n\u4f8b\u3048\u3070LuaVM\u304cILP32\u3067luac\u304cI32LP64\u3060\u3068\u3001\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u306fincompatible\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3002\n\niOS\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u306e\u6319\u52d5\n\u578b\u306e\u30b5\u30a4\u30ba\u3092\u78ba\u8a8d\u3002\n\nmain.m\nint main(int argc, char * argv[])\n{\n    NSLog( @\"sizeof(int): %zd\", sizeof(int));\n    NSLog( @\"sizeof(long): %zd\", sizeof(long));\n    NSLog( @\"sizeof(void*): %zd\", sizeof(void*));\n    NSLog( @\"sizeof(size_t): %zd\", sizeof(size_t));\n}\n\n\niPhone Retina (64bit) \u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u3067\u5b9f\u884c\u3002\n\nsizeof(int): 4\nsizeof(long): 8\nsizeof(void*): 8\nsizeof(size_t): 8\n\n64bit\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u306fI32LP64\u3002\niPhone Retina (32bit) \u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u3067\u5b9f\u884c\u3002\n\nsizeof(int): 4\nsizeof(long): 4\nsizeof(void*): 4\nsizeof(size_t): 4\n\n32bit\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u306fILP32\u3002\n\nMac\u5074\u306e\u6319\u52d5\nMac\u3067luac\u3057\u305f\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u3092iPhone\u3067\u4f7f\u3046\u306e\u3067\u3001\u3053\u3061\u3089\u3082\u691c\u8a3c\u3002\n\ntest.c\nint main( int argc, char **argv)\n{\n    printf( \"sizeof(int): %zd\\n\", sizeof( int));\n    printf( \"sizeof(long): %zd\\n\", sizeof( long));\n    printf( \"sizeof(size_t): %zd\\n\", sizeof( size_t));\n    printf( \"sizeof(void*): %zd\\n\", sizeof( void*));\n    return 0;\n}\n\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u5b9f\u884c\u3002\n\n$ gcc -o test64.o test.c\n$ ./test64.o\nsizeof(int): 4\nsizeof(long): 8\nsizeof(void*): 8\nsizeof(size_t): 8\n\n\u666e\u901a\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3068I32LP64\u3002\n32bit\u30b3\u30f3\u30d1\u30a4\u30eb\u306e\u5834\u5408\u3002\n\n$ gcc -m32 -o test32.o test.c\n$ ./test32.o\nsizeof(int): 4\nsizeof(long): 4\nsizeof(void*): 4\nsizeof(size_t): 4\n\nILP32\u306a\u306e\u3067\u3001iOS/Mac\u3067\u9069\u5207\u306b\u7d44\u307f\u5408\u308f\u305b\u306a\u3044\u3068\u52d5\u304b\u306a\u3044\u3002\n\nluac\u306e32bit\u30d3\u30eb\u30c9\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3060\u306864bit\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u308b\u306e\u3067Makefile\u3092\u4fee\u6b63\u3002-m32\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3002\n\nlua-5.2.1/src/Makefile(\u4fee\u6b63\u524d)\nCFLAGS= -O2 -Wall -DLUA_COMPAT_ALL $(SYSCFLAGS) $(MYCFLAGS)\nLDFLAGS= $(SYSLDFLAGS) $(MYLDFLAGS)\n\n\n\nlua-5.2.1/src/Makefile(\u4fee\u6b63\u5f8c)\nCFLAGS= -O2 -Wall -DLUA_COMPAT_ALL -m32 $(SYSCFLAGS) $(MYCFLAGS)\nLDFLAGS= $(SYSLDFLAGS) $(MYLDFLAGS) -m32\n\n\n\u30d3\u30eb\u30c9\u3002\n\n$ cd path/to/work/lua-5.2.1\n$ make generic\n$ ./src/luac -v\n\nILP32\u306a\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3059\u308bluac\u304c\u5b8c\u6210\u3002\n\niPhone\u3067Lua\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u3092\u52d5\u304b\u3059\n\u691c\u8a3c\u7528\u306eLua\u3092\u66f8\u304f\u3002\n\ntest.lua\npiyo()  -- ObjC\u5074\u3067lua_register()\u3057\u305f\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\n\n\n\u691c\u8a3c\u7528Lua\u30b3\u30fc\u30c9\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3002\u751f\u6210\u3055\u308c\u308b\u306e\u306fILP32\u306a\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u3002\n\n$ luac -s -o test32.bin test.lua\n\n64bit\u7248luac\u3067I32LP64\u306a\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u3082\u751f\u6210\u3057\u3066\u304a\u304f\u3002\n\n$ luac64 -s -o test64.bin test.lua\n\nXcode\u306b\u7d44\u307f\u8fbc\u3093\u3067\u52d5\u304b\u3057\u3066\u307f\u308b\u3002\n\ntest.lua\ntest32.bin\ntest64.bin\n\n\nViewController.m\n    LuaManager *lua = [[LuaManager alloc] init];\n    [lua regFunction:@\"piyo\" callback:_luaf_piyo];\n\n    [lua doLuaFile:[[NSBundle mainBundle] pathForResource:@\"test\" ofType:@\"lua\"]];      // OK\n    [lua doLuaFile:[[NSBundle mainBundle] pathForResource:@\"test32\" ofType:@\"bin\"]];    // \u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u4f9d\u5b58\n    [lua doLuaFile:[[NSBundle mainBundle] pathForResource:@\"test64\" ofType:@\"bin\"]];    // \u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u4f9d\u5b58\n\n\n\n\u30d3\u30eb\u30c9\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u3088\u308b\u9055\u3044\nBuild Settings\u306eArchitectures\u306e\u8a2d\u5b9a\u5024\u3088\u308b\u7d50\u679c\u3002\n\n$(ARCHS_STANDARD)\n\n\n\n\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u30fc\n32bit\n64bit\n\n\n\n\ntest.lua\nOK\nOK\n\n\ntest32.bin\nOK\nOK\n\n\ntest64.bin\nNG\nNG\n\n\n\nLuaVM\u304cILP32\u306a\u306e\u306764bit\u306e\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u306f\u52d5\u304b\u306a\u3044\u3002\n\n$(ARCHS_STANDARD_INCLUDING_64_BIT)\n\n\n\n\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u30fc\n32bit\n64bit\n\n\n\n\ntest.lua\nOK\nOK\n\n\ntest32.bin\nOK\nNG\n\n\ntest64.bin\nNG\nOK\n\n\n\nLuaVM\u304cILP32\u3068I32LP64\u306b\u5225\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u3069\u3061\u3089\u304b\u304c\u52d5\u304b\u306a\u3044\u3002\n\u4e21\u65b9\u306e\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u3092\u642d\u8f09\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u3053\u306e\u6319\u52d5\u306f\u56f0\u308b\u3002\n\n\n\u601d\u3063\u305f\u3053\u3068\n\n\u81ea\u524d\u3067Lua\u3092\u7d44\u307f\u8fbc\u3080\u3068\u4e8b\u6545\u308b\u6050\u308c\nCocoaPods\u3092\u4f7f\u3063\u3066\u3044\u308c\u307032bit\u56fa\u5b9a\u306b\u306a\u308b(?)\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u5b89\u5fc3\n64bit\u5bfe\u5fdc\u3059\u308b\u306a\u3089\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u4f7f\u308f\u305a\u5e73\u6587\u3067\u914d\u5e03\u3059\u308b\n\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u3057\u304b\u306a\u3044\u5834\u5408\u306f64bit\u5bfe\u5fdc\u3092\u8ae6\u3081\u308b\n\u5b9f\u6a5f\u306f\u3069\u3046\u306a\u308b\u306e\u304b\uff1fiPhone5s\u6301\u3063\u3066\u306a\u3044\u3002\u3002\n\n64bit\u5bfe\u5fdc\u3067\u30cf\u30de\u308a\u305d\u3046\u306a\u306e\u3067\u30e1\u30e2\u3002\n\n# \u7d50\u8ad6\n* LuaVM\u306f32bit\u3067\u56fa\u5b9a\u3055\u305b\u308b\n* CocoaPods\u4f7f\u3046\n* \u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u3092\u4f7f\u308f\u306a\u3044\n\n# \u74b0\u5883\n|Lua|5.2.1|\n|:--|:--|\n|OS X|10.8.5|\n|Xcode|5.0|\n|CocoaPods|0.25.0|\n|cc|Apple LLVM version 5.0 (clang-500.2.76) (based on LLVM 3.3svn)|\n\n# iOS\u3067Lua\u3092\u52d5\u304b\u3059\n\u9069\u5f53\u306b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u308b\u3002\n[Create a new Xcode project] -> [iOS] -> [Application] -> [Empty Application]\n\nLua\u306fCocoaPods\u3067\u6301\u3063\u3066\u304f\u308b\u304b\u3001\u516c\u5f0f\u30b5\u30a4\u30c8\u306etar\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u81ea\u524d\u3067\u7d44\u8fbc\u3080\u3002\n\n## CocoaPods\u306e\u5834\u5408\nPodfile\u3092\u6e96\u5099\u3002\n\n```ruby:Podfile\nplatform :ios, '7.0'\npod 'lua', '~> 5.2.1'\n```\n\nXcode\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3002\n\n> $ cd /path/to/xcodeproject\n> $ pod install\n\n## \u81ea\u524d\u306e\u5834\u5408\n\u516c\u5f0f\u30b5\u30a4\u30c8\u304b\u3089tar\u3092\u53d6\u3063\u3066\u304f\u308b\u3002\n\n> $ cd /path/to/work\n> $ curl -R -O http://www.lua.org/ftp/lua-5.2.1.tar.gz\n> $ tar zxf lua-5.2.1.tar.gz\n\n\u5c55\u958b\u3055\u308c\u305fsrc\u30d5\u30a9\u30eb\u30c0\u3092Xcode\u306b\u8ffd\u52a0\u3002\n\u5168\u90e8\u8ffd\u52a0\u3059\u308b\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u3067main\u95a2\u6570\u3092\u542b\u3093\u3067\u3044\u308blua.c\u3068luac.c\u3092\u9664\u5916\u3002\n\n## Lua\u3092\u52d5\u304b\u3059\nLua\u306e\u9762\u5012\u3092\u898b\u308b\u30d8\u30eb\u30d1\u30fc\u3002\n\n``` objectivec:LuaManager.h\n#import <Foundation/Foundation.h>\n\n#import \"lualib.h\"\n#import \"lauxlib.h\"\n\n@interface LuaManager : NSObject {\n    lua_State *_L;\n}\n- (void)regFunction:(NSString*)function callback:(lua_CFunction)callback;\n\n- (BOOL)doLuaData:(NSData *)data tag:(NSString *)tag;\n- (BOOL)doLuaFile:(NSString*)file;\n- (BOOL)doLuaString:(NSString*)script tag:(NSString*)tag;\n@end\n```\n\n``` objectivec:LuaManager.m\n#import \"LuaManager.h\"\n\n@implementation LuaManager\n- (id)init\n{\n    if( (self = [super init]) != nil) {\n        _L = luaL_newstate();\n        luaL_openlibs(_L);\n    }\n    return self;\n}\n- (void)dealloc\n{\n    lua_close(_L);\n}\n\n- (void)regFunction:(NSString*)function callback:(lua_CFunction)callback\n{\n    const char *functionname = [function cStringUsingEncoding:NSUTF8StringEncoding];\n    lua_register(_L, functionname, callback);\n}\n\n- (BOOL)doLuaData:(NSData *)data tag:(NSString *)tag\n{\n\tint err;\n\tconst char *scriptname = [tag cStringUsingEncoding:NSUTF8StringEncoding];\n    \n\tif ( (err = luaL_loadbuffer(_L, data.bytes, data.length, scriptname)) == LUA_OK) {\n\t\terr = lua_pcall(_L, 0, 0, 0);\n\t}\n\tif (err == LUA_OK) {\n\t\treturn YES;\n\t} else {\n\t\tNSLog(@\"Lua error on '%@' '%s'\", name, lua_tostring(_L, lua_gettop(_L)));\n\t}\n\treturn NO;\n}\n- (BOOL)doLuaFile:(NSString*)file\n{\n\tif( !file) return NO;\n\tNSData *data = [NSData dataWithContentsOfFile:file];\n\tif( !data) return NO;\n\treturn [self doLuaData:data tag:file];\n}\n- (BOOL)doLuaString:(NSString*)script tag:(NSString*)tag\n{\n\tif( !script || !tag) return NO;\n\tNSData *data = [script dataUsingEncoding:NSUTF8StringEncoding];\n\tif( !data) return NO;\n\treturn [self doLuaData:data tag:tag];\n}\n@end\n```\n\nluaL_newstate()\u3067Lua\u74b0\u5883\u3092\u6e96\u5099\u3057\u3001luaL_loadbuffer()\u3067\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u30ed\u30fc\u30c9\u3001lua_pcall()\u3067\u5b9f\u884c\u3002\nLua\u304b\u3089\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3055\u308c\u308b\u95a2\u6570\u3092lua_register()\u3067\u767b\u9332\u3057\u3066\u304a\u3051\u3070Lua\u304c\u672c\u5f53\u306b\u52d5\u3044\u3066\u3044\u308b\u306e\u304b\u78ba\u8a8d\u3067\u304d\u308b\u3002\n\n``` objectivec:ViewController.m\n#import \"LuaManager.h\"\n\n..\n\n/* \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3055\u308c\u308b\u95a2\u6570 */\nstatic int _luaf_piyo(lua_State *L)\n{\n    NSLog( @\"piyo\");\n    return 0;\n}\n\n..\n\n- (void)exec\n{\n    LuaManager *lua = [[LuaManager alloc] init];\n    [lua regFunction:@\"piyo\" callback:_luaf_piyo];\t// \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u767b\u9332\n    [lua doLuaString:@\"piyo()\" tag:@\"test\"];\t\t// \u30b9\u30af\u30ea\u30d7\u30c8\u5b9f\u884c\uff08\u3055\u3063\u304d\u767b\u9332\u3057\u305fpiyo()\u95a2\u6570\u3092\u30b3\u30fc\u30eb\u3059\u308b\u3060\u3051\uff09\n}\n```\n_luaf_piyo()\u306eNSLog()\u304c\u5b9f\u884c\u3055\u308c\u3066\u3044\u308c\u3070\u6e96\u5099\u5b8c\u4e86\u3002\n\n# \u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u306e\u30d8\u30c3\u30c0\u30fc\u30c1\u30a7\u30c3\u30af\nLua\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u540c\u3058\u3067\u3082\u3001luac\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u74b0\u5883\u306b\u3088\u3063\u3066LuaVM\u304c\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u304f\u308c\u306a\u3044\u3002\n\n``` cpp:lua-5.2.1/src/lundump.c\n/* the code below must be consistent with the code in luaU_header */\n#define N0\tLUAC_HEADERSIZE\n#define N1\t(sizeof(LUA_SIGNATURE)-sizeof(char))\n#define N2\tN1+2\n#define N3\tN2+6\n\nstatic void LoadHeader(LoadState* S)\n{\n\tlu_byte h[LUAC_HEADERSIZE];\n\tlu_byte s[LUAC_HEADERSIZE];\n\tluaU_header(h);\n\tmemcpy(s,h,sizeof(char));\t\t\t/* first char already read */\n\tLoadBlock(S,s+sizeof(char),LUAC_HEADERSIZE-sizeof(char));\n\tif (memcmp(h,s,N0)==0) return;\n\tif (memcmp(h,s,N1)!=0) error(S,\"not a\");\n\tif (memcmp(h,s,N2)!=0) error(S,\"version mismatch in\");\n\tif (memcmp(h,s,N3)!=0) error(S,\"incompatible\"); else error(S,\"corrupted\");\n}\n\n..\n\n/*\n * make header for precompiled chunks\n * if you change the code below be sure to update LoadHeader and FORMAT above\n * and LUAC_HEADERSIZE in lundump.h\n */\nvoid luaU_header (lu_byte* h)\n{\n\tint x=1;\n\tmemcpy(h,LUA_SIGNATURE,sizeof(LUA_SIGNATURE)-sizeof(char));\n\th+=sizeof(LUA_SIGNATURE)-sizeof(char);\n\t*h++=cast_byte(VERSION);\n\t*h++=cast_byte(FORMAT);\n\t*h++=cast_byte(*(char*)&x);\t\t\t/* endianness */\n\t*h++=cast_byte(sizeof(int));\n\t*h++=cast_byte(sizeof(size_t));\n\t*h++=cast_byte(sizeof(Instruction));\n\t*h++=cast_byte(sizeof(lua_Number));\n\t*h++=cast_byte(((lua_Number)0.5)==0);\t\t/* is lua_Number integral? */\n\tmemcpy(h,LUAC_TAIL,sizeof(LUAC_TAIL)-sizeof(char));\n}\n\n```\n\n\u4f8b\u3048\u3070LuaVM\u304cILP32\u3067luac\u304cI32LP64\u3060\u3068\u3001\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u306fincompatible\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3002\n\n## iOS\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u306e\u6319\u52d5\n\u578b\u306e\u30b5\u30a4\u30ba\u3092\u78ba\u8a8d\u3002\n\n``` objectivec:main.m\nint main(int argc, char * argv[])\n{\n    NSLog( @\"sizeof(int): %zd\", sizeof(int));\n    NSLog( @\"sizeof(long): %zd\", sizeof(long));\n    NSLog( @\"sizeof(void*): %zd\", sizeof(void*));\n    NSLog( @\"sizeof(size_t): %zd\", sizeof(size_t));\n}\n```\n\niPhone Retina (64bit) \u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u3067\u5b9f\u884c\u3002\n> sizeof(int): 4\n> sizeof(long): 8\n> sizeof(void*): 8\n> sizeof(size_t): 8\n\n64bit\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u306fI32LP64\u3002\n\niPhone Retina (32bit) \u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u3067\u5b9f\u884c\u3002\n> sizeof(int): 4\n> sizeof(long): 4\n> sizeof(void*): 4\n> sizeof(size_t): 4\n\n32bit\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u306fILP32\u3002\n\n## Mac\u5074\u306e\u6319\u52d5\nMac\u3067luac\u3057\u305f\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u3092iPhone\u3067\u4f7f\u3046\u306e\u3067\u3001\u3053\u3061\u3089\u3082\u691c\u8a3c\u3002\n\n``` cpp:test.c\nint main( int argc, char **argv)\n{\n\tprintf( \"sizeof(int): %zd\\n\", sizeof( int));\n\tprintf( \"sizeof(long): %zd\\n\", sizeof( long));\n\tprintf( \"sizeof(size_t): %zd\\n\", sizeof( size_t));\n\tprintf( \"sizeof(void*): %zd\\n\", sizeof( void*));\n\treturn 0;\n}\n```\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u5b9f\u884c\u3002\n> $ gcc -o test64.o test.c\n> $ ./test64.o\n> sizeof(int): 4\n> sizeof(long): 8\n> sizeof(void*): 8\n> sizeof(size_t): 8\n\n\u666e\u901a\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3068I32LP64\u3002\n\n32bit\u30b3\u30f3\u30d1\u30a4\u30eb\u306e\u5834\u5408\u3002\n> $ gcc -m32 -o test32.o test.c\n> $ ./test32.o\n> sizeof(int): 4\n> sizeof(long): 4\n> sizeof(void*): 4\n> sizeof(size_t): 4\n\nILP32\u306a\u306e\u3067\u3001iOS/Mac\u3067\u9069\u5207\u306b\u7d44\u307f\u5408\u308f\u305b\u306a\u3044\u3068\u52d5\u304b\u306a\u3044\u3002\n\n## luac\u306e32bit\u30d3\u30eb\u30c9\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3060\u306864bit\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u308b\u306e\u3067Makefile\u3092\u4fee\u6b63\u3002-m32\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3002\n\n``` CMake:lua-5.2.1/src/Makefile(\u4fee\u6b63\u524d)\nCFLAGS= -O2 -Wall -DLUA_COMPAT_ALL $(SYSCFLAGS) $(MYCFLAGS)\nLDFLAGS= $(SYSLDFLAGS) $(MYLDFLAGS)\n```\n\n``` CMake:lua-5.2.1/src/Makefile(\u4fee\u6b63\u5f8c)\nCFLAGS= -O2 -Wall -DLUA_COMPAT_ALL -m32 $(SYSCFLAGS) $(MYCFLAGS)\nLDFLAGS= $(SYSLDFLAGS) $(MYLDFLAGS) -m32\n```\n\n\u30d3\u30eb\u30c9\u3002\n\n> $ cd path/to/work/lua-5.2.1\n> $ make generic\n> $ ./src/luac -v\n\nILP32\u306a\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3059\u308bluac\u304c\u5b8c\u6210\u3002\n\n# iPhone\u3067Lua\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u3092\u52d5\u304b\u3059\n\u691c\u8a3c\u7528\u306eLua\u3092\u66f8\u304f\u3002\n\n```Lua:test.lua\npiyo()\t-- ObjC\u5074\u3067lua_register()\u3057\u305f\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\n```\n\n\u691c\u8a3c\u7528Lua\u30b3\u30fc\u30c9\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3002\u751f\u6210\u3055\u308c\u308b\u306e\u306fILP32\u306a\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u3002\n> $ luac -s -o test32.bin test.lua\n\n64bit\u7248luac\u3067I32LP64\u306a\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u3082\u751f\u6210\u3057\u3066\u304a\u304f\u3002\n> $ luac64 -s -o test64.bin test.lua\n\nXcode\u306b\u7d44\u307f\u8fbc\u3093\u3067\u52d5\u304b\u3057\u3066\u307f\u308b\u3002\n\n* test.lua\n* test32.bin\n* test64.bin\n\n``` objectivec:ViewController.m\n    LuaManager *lua = [[LuaManager alloc] init];\n    [lua regFunction:@\"piyo\" callback:_luaf_piyo];\n    \n    [lua doLuaFile:[[NSBundle mainBundle] pathForResource:@\"test\" ofType:@\"lua\"]];\t\t// OK\n    [lua doLuaFile:[[NSBundle mainBundle] pathForResource:@\"test32\" ofType:@\"bin\"]];\t// \u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u4f9d\u5b58\n    [lua doLuaFile:[[NSBundle mainBundle] pathForResource:@\"test64\" ofType:@\"bin\"]];\t// \u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u4f9d\u5b58\n```\n\n## \u30d3\u30eb\u30c9\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u3088\u308b\u9055\u3044\nBuild Settings\u306eArchitectures\u306e\u8a2d\u5b9a\u5024\u3088\u308b\u7d50\u679c\u3002\n\n### $(ARCHS_STANDARD)\n|\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u30fc|32bit|64bit|\n|:-:|:-:|:-:|\n|test.lua|OK|OK|\n|test32.bin|OK|OK|\n|test64.bin|**NG**|**NG**|\nLuaVM\u304cILP32\u306a\u306e\u306764bit\u306e\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u306f\u52d5\u304b\u306a\u3044\u3002\n### $(ARCHS_STANDARD_INCLUDING_64_BIT)\n|\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u30fc|32bit|64bit|\n|:-:|:-:|:-:|\n|test.lua|OK|OK|\n|test32.bin|OK|**NG**|\n|test64.bin|**NG**|OK|\nLuaVM\u304cILP32\u3068I32LP64\u306b\u5225\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u3069\u3061\u3089\u304b\u304c\u52d5\u304b\u306a\u3044\u3002\n\u4e21\u65b9\u306e\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u3092\u642d\u8f09\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u3053\u306e\u6319\u52d5\u306f\u56f0\u308b\u3002\n\n***\n# \u601d\u3063\u305f\u3053\u3068\n* \u81ea\u524d\u3067Lua\u3092\u7d44\u307f\u8fbc\u3080\u3068\u4e8b\u6545\u308b\u6050\u308c\n* CocoaPods\u3092\u4f7f\u3063\u3066\u3044\u308c\u307032bit\u56fa\u5b9a\u306b\u306a\u308b(?)\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u5b89\u5fc3\n* 64bit\u5bfe\u5fdc\u3059\u308b\u306a\u3089\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u4f7f\u308f\u305a\u5e73\u6587\u3067\u914d\u5e03\u3059\u308b\n* \u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u3057\u304b\u306a\u3044\u5834\u5408\u306f64bit\u5bfe\u5fdc\u3092\u8ae6\u3081\u308b\n* \u5b9f\u6a5f\u306f\u3069\u3046\u306a\u308b\u306e\u304b\uff1fiPhone5s\u6301\u3063\u3066\u306a\u3044\u3002\u3002\n", "tags": ["iOS", "Lua"]}