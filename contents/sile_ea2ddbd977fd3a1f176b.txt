{"context": " More than 1 year has passed since last update.\u8868\u984c\u306e\u4ef6\u3001\u5c11\u3057\u6c17\u306b\u306a\u3063\u305f\u306e\u3067\u8abf\u3079\u3066\u307f\u305f\u3002\n$ erl\nErlang/OTP 18 [erts-7.1] [source-2882b0c] [64-bit] [smp:4:4] [async-threads:10][hipe] [kernel-poll:false]\n\nEshell V7.1  (abort with ^G)\n> A_0 = lists:seq(1, 10000). % \u4e00\u4e07\u8981\u7d20\u306e\u30ea\u30b9\u30c8\n> A_1 = A_0.                 % `A_1`\u306b`A_0`\u3092\u675f\u7e1b (\u4e21\u8005\u306f\u540c\u3058\u30a2\u30c9\u30ec\u30b9\u3092\u6307\u3059\u306f\u305a)\n> B   = lists:seq(1, 10000). % \u5225\u306b\u4f5c\u3063\u305f\u4e00\u4e07\u8981\u7d20\u306e\u30ea\u30b9\u30c8\n\n%% \u53c2\u8003\u8a08\u6e2c: `1 =:= 1`\u3092\u4e00\u4e07\u56de\u5b9f\u884c\n> timer:tc(fun () -> lists:bforeach(fun (_) -> 1 =:= 1 end, A_0) end).\n{7954,ok} % 7.8\u30df\u30ea\u79d2\n\n%% `A_0`\u3068`A_1`\u306e\u540c\u5024\u30c1\u30a7\u30c3\u30af\u3092\u4e00\u4e07\u56de\n> timer:tc(fun () -> lists:foreach(fun (_) -> A_0 =:= A_1 end, A_0) end).\n{9840,ok}  % 9.8\u30df\u30ea\u79d2\n\n%% `A_0`\u3068`B`\u306e\u540c\u5024\u30c1\u30a7\u30c3\u30af\u3092\u4e00\u4e07\u56de\n> timer:tc(fun () -> lists:foreach(fun (_) -> A_0 =:= B end, A_0) end).  \n{269874,ok} % 269.8\u30df\u30ea\u79d2\n\n\u540c\u3058\u30a2\u30c9\u30ec\u30b9\u3092\u6307\u3059term\u540c\u58eb\u306f\u3001\u3061\u3083\u3093\u3068\u5b9a\u6570\u6642\u9593\u3067\u6bd4\u8f03\u3055\u308c\u3066\u3044\u308b\u6a21\u69d8\u3002\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u7684\u306b\u306futils.c\u306eeq\u95a2\u6570\u3068erl_term.h\u306eis_same\u30de\u30af\u30ed\u8fba\u308a\u304c\u304a\u305d\u3089\u304f\u8a72\u5f53\u7b87\u6240\u3002\n\nutils.c\nint eq(Eterm a, Eterm b)\n{\n    DECLARE_WSTACK(stack);\n    Sint sz;\n    Eterm* aa;\n    Eterm* bb;\n\ntailrecur:\n    /*** \u4e00\u756a\u521d\u3081\u306bis_same\u30de\u30af\u30ed(\u4e0b\u8a18)\u3067\u30a2\u30c9\u30ec\u30b9\u306e\u4e00\u81f4\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3063\u3066\u3044\u308b ***/\n    if (is_same(a, a_base, b, b_base)) goto pop_next;\ntailrecur_ne:\n\n    switch (primary_tag(a)) {\n    case TAG_PRIMARY_LIST:\n        if (is_list(b)) {\n            Eterm* aval = list_val_rel(a, a_base);\n            Eterm* bval = list_val_rel(b, b_base);\n            while (1) {\n                Eterm atmp = CAR(aval);\n                Eterm btmp = CAR(bval);\n                if (!is_same(atmp,a_base,btmp,b_base)) {\n                    WSTACK_PUSH2(stack,(UWord) CDR(bval),(UWord) CDR(aval));\n                    a = atmp;\n                    b = btmp;\n                    goto tailrecur_ne;\n                }\n                atmp = CDR(aval);\n                btmp = CDR(bval);\n                if (is_same(atmp,a_base,btmp,b_base)) {\n                    /*** \u30ea\u30b9\u30c8\u306e\u5834\u5408\u3001cdr\u90e8\u306e\u30a2\u30c9\u30ec\u30b9\u304c\u4e00\u81f4\u3057\u305f\u3089\u3001\u4ee5\u964d\u306e\u6bd4\u8f03\u306f\u7701\u7565\u3055\u308c\u308b ***/\n                    goto pop_next;\n                }\n                if (is_not_list(atmp) || is_not_list(btmp)) {\n                    a = atmp;\n                    b = btmp;\n                    goto tailrecur_ne;\n                }\n                aval = list_val_rel(atmp, a_base);\n                bval = list_val_rel(btmp, b_base);\n            }\n        }\n        break; /* not equal */\n\n    case TAG_PRIMARY_BOXED:\n/*** \u4ee5\u4e0b\u3001\u7565 ***/\n\n\nis_same\u30de\u30af\u30ed\u306f\u3001(HALFWORD\u30a8\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u304cOFF\u306e\u5834\u5408\u306f)\u5358\u306b\u30a2\u30c9\u30ec\u30b9\u306e\u6bd4\u8f03\u306e\u307f\u3092\u884c\u3063\u3066\u3044\u308b\u3002\n\nerl_term.h\n#define is_same(A,A_BASE,B,B_BASE) ((A)==(B))\n\n\n\u8868\u984c\u306e\u4ef6\u3001\u5c11\u3057\u6c17\u306b\u306a\u3063\u305f\u306e\u3067\u8abf\u3079\u3066\u307f\u305f\u3002\n\n```erlang\n$ erl\nErlang/OTP 18 [erts-7.1] [source-2882b0c] [64-bit] [smp:4:4] [async-threads:10][hipe] [kernel-poll:false]\n\nEshell V7.1  (abort with ^G)\n> A_0 = lists:seq(1, 10000). % \u4e00\u4e07\u8981\u7d20\u306e\u30ea\u30b9\u30c8\n> A_1 = A_0.                 % `A_1`\u306b`A_0`\u3092\u675f\u7e1b (\u4e21\u8005\u306f\u540c\u3058\u30a2\u30c9\u30ec\u30b9\u3092\u6307\u3059\u306f\u305a)\n> B   = lists:seq(1, 10000). % \u5225\u306b\u4f5c\u3063\u305f\u4e00\u4e07\u8981\u7d20\u306e\u30ea\u30b9\u30c8\n\n%% \u53c2\u8003\u8a08\u6e2c: `1 =:= 1`\u3092\u4e00\u4e07\u56de\u5b9f\u884c\n> timer:tc(fun () -> lists:bforeach(fun (_) -> 1 =:= 1 end, A_0) end).\n{7954,ok} % 7.8\u30df\u30ea\u79d2\n\n%% `A_0`\u3068`A_1`\u306e\u540c\u5024\u30c1\u30a7\u30c3\u30af\u3092\u4e00\u4e07\u56de\n> timer:tc(fun () -> lists:foreach(fun (_) -> A_0 =:= A_1 end, A_0) end).\n{9840,ok}  % 9.8\u30df\u30ea\u79d2\n\n%% `A_0`\u3068`B`\u306e\u540c\u5024\u30c1\u30a7\u30c3\u30af\u3092\u4e00\u4e07\u56de\n> timer:tc(fun () -> lists:foreach(fun (_) -> A_0 =:= B end, A_0) end).  \n{269874,ok} % 269.8\u30df\u30ea\u79d2\n```\n\n\u540c\u3058\u30a2\u30c9\u30ec\u30b9\u3092\u6307\u3059term\u540c\u58eb\u306f\u3001\u3061\u3083\u3093\u3068\u5b9a\u6570\u6642\u9593\u3067\u6bd4\u8f03\u3055\u308c\u3066\u3044\u308b\u6a21\u69d8\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u7684\u306b\u306f[utils.c\u306eeq\u95a2\u6570](https://github.com/erlang/otp/blob/OTP-18.1.3/erts/emulator/beam/utils.c#L2603)\u3068[erl_term.h\u306eis_same\u30de\u30af\u30ed](https://github.com/erlang/otp/blob/OTP-18.1.3/erts/emulator/beam/erl_term.h#L1237)\u8fba\u308a\u304c\u304a\u305d\u3089\u304f\u8a72\u5f53\u7b87\u6240\u3002\n\n```c:utils.c\nint eq(Eterm a, Eterm b)\n{\n    DECLARE_WSTACK(stack);\n    Sint sz;\n    Eterm* aa;\n    Eterm* bb;\n\ntailrecur:\n    /*** \u4e00\u756a\u521d\u3081\u306bis_same\u30de\u30af\u30ed(\u4e0b\u8a18)\u3067\u30a2\u30c9\u30ec\u30b9\u306e\u4e00\u81f4\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3063\u3066\u3044\u308b ***/\n    if (is_same(a, a_base, b, b_base)) goto pop_next;\ntailrecur_ne:\n\n    switch (primary_tag(a)) {\n    case TAG_PRIMARY_LIST:\n        if (is_list(b)) {\n            Eterm* aval = list_val_rel(a, a_base);\n            Eterm* bval = list_val_rel(b, b_base);\n            while (1) {\n                Eterm atmp = CAR(aval);\n                Eterm btmp = CAR(bval);\n                if (!is_same(atmp,a_base,btmp,b_base)) {\n                    WSTACK_PUSH2(stack,(UWord) CDR(bval),(UWord) CDR(aval));\n                    a = atmp;\n                    b = btmp;\n                    goto tailrecur_ne;\n                }\n                atmp = CDR(aval);\n                btmp = CDR(bval);\n                if (is_same(atmp,a_base,btmp,b_base)) {\n                    /*** \u30ea\u30b9\u30c8\u306e\u5834\u5408\u3001cdr\u90e8\u306e\u30a2\u30c9\u30ec\u30b9\u304c\u4e00\u81f4\u3057\u305f\u3089\u3001\u4ee5\u964d\u306e\u6bd4\u8f03\u306f\u7701\u7565\u3055\u308c\u308b ***/\n                    goto pop_next;\n                }\n                if (is_not_list(atmp) || is_not_list(btmp)) {\n                    a = atmp;\n                    b = btmp;\n                    goto tailrecur_ne;\n                }\n                aval = list_val_rel(atmp, a_base);\n                bval = list_val_rel(btmp, b_base);\n            }\n        }\n        break; /* not equal */\n\n    case TAG_PRIMARY_BOXED:\n/*** \u4ee5\u4e0b\u3001\u7565 ***/\n```\n\nis_same\u30de\u30af\u30ed\u306f\u3001(HALFWORD\u30a8\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u304cOFF\u306e\u5834\u5408\u306f)\u5358\u306b\u30a2\u30c9\u30ec\u30b9\u306e\u6bd4\u8f03\u306e\u307f\u3092\u884c\u3063\u3066\u3044\u308b\u3002\n\n```c:erl_term.h\n#define is_same(A,A_BASE,B,B_BASE) ((A)==(B))\n```\n", "tags": ["ErlangOTP18.1"]}