{"context": " More than 1 year has passed since last update.\n\nTR;DL\n\n\nrx.Single\u3092\u4f7f\u3048\u3070\u5024\u304c1\u56de\u3057\u304b\u6d41\u308c\u3066\u3053\u306a\u3044\u3088\n\nrxSingle\u306f\u4f55\u56de\u3082\u5024\u3092\u6d41\u305d\u3046\u3068\u3057\u3066\u3082\u4f55\u3082\u304a\u304d\u306a\u3044\u3088\n\nsingle() operator\u306f2\u3064\u76ee\u4ee5\u964d\u306e\u5024\u304c\u6d41\u308c\u3066\u304d\u305f\u3089Exception\u5410\u304f\u3088\n\n\nrx.Single<T>\nrx.Single<T>\u304cRxJava 1.1.0\u3067experimental\u304b\u3089beta\u306b\u6607\u683c\u3057\u305f\uff0erx.Observable\u306e\u4ee3\u308f\u308a\u306b\u4f7f\u3046\uff0eAPI\u3082\u3060\u3044\u305f\u3044\u4f3c\u305f\u3088\u3046\u306a\u611f\u3058\u3060\u304c\uff0c\u5927\u304d\u304f\u9055\u3046\u306e\u304csubscribe()\uff0e\npublic class Single<T> {\n    // ...\n\n    // https://github.com/ReactiveX/RxJava/blob/1.1.0/src/main/java/rx/Single.java#L1407-L1430\n    public final Subscription subscribe(final Action1<? super T> onSuccess) {\n      // ...\n    }\n\n    // https://github.com/ReactiveX/RxJava/blob/1.1.0/src/main/java/rx/Single.java#L1451-L1477\n    public final Subscription subscribe(final Action1<? super T> onSuccess, final Action1<Throwable> onError) {\n        // ...\n    }\n\n    // ...\n}\n\nrx.Single\u306b\u306f\u7b2c3\u5f15\u6570\u306bonComplete\u3092\u3068\u308bsubscribe()\u30e1\u30bd\u30c3\u30c9\u304c\u751f\u3048\u3066\u3044\u306a\u3044\uff0e\n\nrx.SingleSubscriber<T>\n\u5f93\u6765\u306erx.Subscriber<T>\u306b\u306fSubscription\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u52a0\u3048\uff0crx.Observer<T>\u306e3\u30e1\u30bd\u30c3\u30c9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\uff0e\n// https://github.com/ReactiveX/RxJava/blob/1.1.0/src/main/java/rx/Subscriber.java\npublic abstract class Subscriber<T> implements Observer<T>, Subscription {\n    void onCompleted();\n    void onError(Throwable e);\n    void onNext(T t);\n\n    // ...\n}\n\n\u4e00\u65b9\uff0crx.SingleSubscriber<T>\u306b\u306fSubscription\u306e\u3082\u306e\u3092\u9664\u3051\u3070\u30e1\u30bd\u30c3\u30c9\u304c2\u3064\u3057\u304b\u5b58\u5728\u3057\u306a\u3044\uff0e\n// https://github.com/ReactiveX/RxJava/blob/1.1.0/src/main/java/rx/SingleSubscriber.java\npublic abstract class SingleSubscriber<T> implements Subscription {\n    public abstract void onSuccess(T value);\n    public abstract void onError(Throwable error);\n\n    // ...\n}\n\n\nonSuccess()\u306f\u4f55\u56de\u547c\u3079\u308b\uff1f\n1\u56de\uff082\u56de\u76ee\u4ee5\u964d\u3082\u5b9f\u884c\u306f\u3067\u304d\u308b\u3051\u3069\u4f55\u3082\u8d77\u304d\u306a\u3044\uff09\uff0e\n@Test\npublic void testSingle() throws Exception {\n    final CountDownLatch latch = new CountDownLatch(3);\n\n    Single.create(\n            subscriber -> {\n                subscriber.onSuccess(0);\n                subscriber.onSuccess(1);\n                subscriber.onSuccess(2);\n            })\n            .subscribe(_v -> latch.countDown());\n\n    latch.await(100, TimeUnit.MILLISECONDS);\n\n    assertThat(latch.getCount(), is(2L));\n}\n\n\n\u4f55\u306b\u4f7f\u3046\uff1f\n\n\u4e00\u5ea6\u3057\u304b\u5024\u304c\u6d41\u308c\u306a\u3044\u3088\u3046\u306a\u3082\u306e\nPromise\u7684\u306a\u904b\u7528\n\n\nsingle operator\u3068\u306e\u4f7f\u3044\u5206\u3051\u306f\uff1f\noperator\u306e\u65b9\u306esingle()\u306f2\u3064\u76ee\u4ee5\u964d\u306e\u5024\u304c\u6d41\u308c\u3066\u304d\u305f\u3089Exception\u5410\u3044\u3066\u304f\u308b\uff0e2\u3064\u76ee\u4ee5\u964d\u306e\u5024\u306f\u6d41\u308c\u3066\u304d\u3066\u306f\u3044\u3051\u306a\u3044\u3082\u306e\u306a\u3089\u3070operator\u306e\u65b9\u306esingle()\u3092\u4f7f\u3048\u3070\u3044\u3044\u306e\u304b\u306a\uff1f\npublic final class OperatorSingle<T> implements Operator<T, T> {\n    // ...\n\n    private static final class ParentSubscriber<T> extends Subscriber<T> {\n        // ...\n\n        // https://github.com/ReactiveX/RxJava/blob/1.1.0/src/main/java/rx/internal/operators/OperatorSingle.java#L106-L116\n        @Override\n        public void onNext(T value) {\n            if (isNonEmpty) {\n                hasTooManyElements = true;\n                child.onError(new IllegalArgumentException(\"Sequence contains too many elements\"));\n                unsubscribe();\n            } else {\n                this.value = value;\n                isNonEmpty = true;\n            }\n        }\n\n        // ...\n    }\n}\n\n\n\u305d\u306e\u4ed6\ntoObservable()\u3057\u305f\u3089\u3044\u3064\u3082\u306erx.Observable\u304c\u8fd4\u3063\u3066\u304f\u308b\uff0e\npublic class Single<T> {\n    // ...\n\n    // https://github.com/ReactiveX/RxJava/blob/1.1.0/src/main/java/rx/Single.java#L248-L251\n    private static <T> Observable<T> asObservable(Single<T> t) {\n        return Observable.create(t.onSubscribe);\n    }\n\n    // https://github.com/ReactiveX/RxJava/blob/1.1.0/src/main/java/rx/Single.java#L1694-L1696\n    public final Observable<T> toObservable() {\n        return asObservable(this);\n    }\n}\n\n\nReferences\n\nReactiveX - Single\n\n## TR;DL\n* `rx.Single`\u3092\u4f7f\u3048\u3070\u5024\u304c1\u56de\u3057\u304b\u6d41\u308c\u3066\u3053\u306a\u3044\u3088\n* `rxSingle`\u306f\u4f55\u56de\u3082\u5024\u3092\u6d41\u305d\u3046\u3068\u3057\u3066\u3082\u4f55\u3082\u304a\u304d\u306a\u3044\u3088\n* `single()` operator\u306f2\u3064\u76ee\u4ee5\u964d\u306e\u5024\u304c\u6d41\u308c\u3066\u304d\u305f\u3089Exception\u5410\u304f\u3088\n\n\n## rx.Single&lt;T&gt;\nrx.Single&lt;T&gt;\u304c[RxJava](https://github.com/ReactiveX/RxJava) 1.1.0\u3067experimental\u304b\u3089beta\u306b\u6607\u683c\u3057\u305f\uff0e`rx.Observable`\u306e\u4ee3\u308f\u308a\u306b\u4f7f\u3046\uff0eAPI\u3082\u3060\u3044\u305f\u3044\u4f3c\u305f\u3088\u3046\u306a\u611f\u3058\u3060\u304c\uff0c\u5927\u304d\u304f\u9055\u3046\u306e\u304c`subscribe()`\uff0e\n\n```java\npublic class Single<T> {\n    // ...\n\n    // https://github.com/ReactiveX/RxJava/blob/1.1.0/src/main/java/rx/Single.java#L1407-L1430\n    public final Subscription subscribe(final Action1<? super T> onSuccess) {\n      // ...\n    }\n\n    // https://github.com/ReactiveX/RxJava/blob/1.1.0/src/main/java/rx/Single.java#L1451-L1477\n    public final Subscription subscribe(final Action1<? super T> onSuccess, final Action1<Throwable> onError) {\n        // ...\n    }\n\n    // ...\n}\n```\n\n`rx.Single`\u306b\u306f\u7b2c3\u5f15\u6570\u306b`onComplete`\u3092\u3068\u308b`subscribe()`\u30e1\u30bd\u30c3\u30c9\u304c\u751f\u3048\u3066\u3044\u306a\u3044\uff0e\n\n## rx.SingleSubscriber&lt;T&gt;\n\u5f93\u6765\u306e`rx.Subscriber<T>`\u306b\u306f`Subscription`\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u52a0\u3048\uff0c`rx.Observer<T>`\u306e3\u30e1\u30bd\u30c3\u30c9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\uff0e\n\n```java\n// https://github.com/ReactiveX/RxJava/blob/1.1.0/src/main/java/rx/Subscriber.java\npublic abstract class Subscriber<T> implements Observer<T>, Subscription {\n    void onCompleted();\n    void onError(Throwable e);\n    void onNext(T t);\n\n    // ...\n}\n```\n\n\u4e00\u65b9\uff0c`rx.SingleSubscriber<T>`\u306b\u306f`Subscription`\u306e\u3082\u306e\u3092\u9664\u3051\u3070\u30e1\u30bd\u30c3\u30c9\u304c2\u3064\u3057\u304b\u5b58\u5728\u3057\u306a\u3044\uff0e\n\n```java\n// https://github.com/ReactiveX/RxJava/blob/1.1.0/src/main/java/rx/SingleSubscriber.java\npublic abstract class SingleSubscriber<T> implements Subscription {\n    public abstract void onSuccess(T value);\n    public abstract void onError(Throwable error);\n\n    // ...\n}\n```\n\n\n## onSuccess()\u306f\u4f55\u56de\u547c\u3079\u308b\uff1f\n1\u56de\uff082\u56de\u76ee\u4ee5\u964d\u3082\u5b9f\u884c\u306f\u3067\u304d\u308b\u3051\u3069\u4f55\u3082\u8d77\u304d\u306a\u3044\uff09\uff0e\n\n```java\n@Test\npublic void testSingle() throws Exception {\n    final CountDownLatch latch = new CountDownLatch(3);\n\n    Single.create(\n            subscriber -> {\n                subscriber.onSuccess(0);\n                subscriber.onSuccess(1);\n                subscriber.onSuccess(2);\n            })\n            .subscribe(_v -> latch.countDown());\n\n    latch.await(100, TimeUnit.MILLISECONDS);\n\n    assertThat(latch.getCount(), is(2L));\n}\n```\n\n## \u4f55\u306b\u4f7f\u3046\uff1f\n* \u4e00\u5ea6\u3057\u304b\u5024\u304c\u6d41\u308c\u306a\u3044\u3088\u3046\u306a\u3082\u306e\n* Promise\u7684\u306a\u904b\u7528\n\n\n## single operator\u3068\u306e\u4f7f\u3044\u5206\u3051\u306f\uff1f\noperator\u306e\u65b9\u306e`single()`\u306f2\u3064\u76ee\u4ee5\u964d\u306e\u5024\u304c\u6d41\u308c\u3066\u304d\u305f\u3089`Exception`\u5410\u3044\u3066\u304f\u308b\uff0e**2\u3064\u76ee\u4ee5\u964d\u306e\u5024\u306f\u6d41\u308c\u3066\u304d\u3066\u306f\u3044\u3051\u306a\u3044\u3082\u306e**\u306a\u3089\u3070operator\u306e\u65b9\u306e`single()`\u3092\u4f7f\u3048\u3070\u3044\u3044\u306e\u304b\u306a\uff1f\n\n```java\npublic final class OperatorSingle<T> implements Operator<T, T> {\n    // ...\n\n    private static final class ParentSubscriber<T> extends Subscriber<T> {\n        // ...\n\n        // https://github.com/ReactiveX/RxJava/blob/1.1.0/src/main/java/rx/internal/operators/OperatorSingle.java#L106-L116\n        @Override\n        public void onNext(T value) {\n            if (isNonEmpty) {\n                hasTooManyElements = true;\n                child.onError(new IllegalArgumentException(\"Sequence contains too many elements\"));\n                unsubscribe();\n            } else {\n                this.value = value;\n                isNonEmpty = true;\n            }\n        }\n\n        // ...\n    }\n}\n```\n\n\n## \u305d\u306e\u4ed6\n`toObservable()`\u3057\u305f\u3089\u3044\u3064\u3082\u306e`rx.Observable`\u304c\u8fd4\u3063\u3066\u304f\u308b\uff0e\n\n```java\npublic class Single<T> {\n    // ...\n\n    // https://github.com/ReactiveX/RxJava/blob/1.1.0/src/main/java/rx/Single.java#L248-L251\n    private static <T> Observable<T> asObservable(Single<T> t) {\n        return Observable.create(t.onSubscribe);\n    }\n\n    // https://github.com/ReactiveX/RxJava/blob/1.1.0/src/main/java/rx/Single.java#L1694-L1696\n    public final Observable<T> toObservable() {\n    \treturn asObservable(this);\n    }\n}\n```\n\n## References\n* [ReactiveX - Single](http://reactivex.io/documentation/single.html)\n", "tags": ["Android", "RxJava"]}