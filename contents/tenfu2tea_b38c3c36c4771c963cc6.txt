{"tags": ["Mayavi", "Julia", "3D", "Anaconda", "Python"], "context": "Julia advent calendar 2016 6\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\u6700\u8fd1 conda\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u63d0\u4f9b\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u305f MayaVi \u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u3001Julia \u304b\u3089\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n\nMayaVi \u3068\u306f\n\u3000MayaVi \u306f 3\u6b21\u5143\u30d7\u30ed\u30c3\u30c8\u306e\u305f\u3081\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3067\u3059\u3002\u6982\u7565\u306f\u3001\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\n\u79d1\u5b66\u6280\u8853\u8a08\u7b97\u306e\u30b3\u30f3\u30b5\u30eb\u30bf\u30f3\u30c8\u4f1a\u793e Enthought\u793e \u304c\u958b\u767a\u3057\u3066\u3044\u308b Python\u5411\u3051 3\u6b21\u5143\u30d7\u30ed\u30c3\u30c8\u30d1\u30c3\u30b1\u30fc\u30b8\u3002 \u540c\u793e\u304c\u914d\u5e03\u3059\u308b\u7d71\u5408\u74b0\u5883 Enthough Canopy \u306b\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\u307e\u305f\u3001Windows\u5411\u3051\u306e\u79d1\u5b66\u6280\u8853\u8a08\u7b97Python\u30d1\u30c3\u30b1\u30fc\u30b8 Python(x,y) \u306b\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\n\u63cf\u753b\u30a8\u30f3\u30b8\u30f3\u306f\u3001C++\u3067\u66f8\u304b\u308c\u305f\u30e9\u30a4\u30d6\u30e9\u30ea The Visualization Toolkit (VTK) \u3067\u3059\u3002 vtk\u306f\u3001\u5927\u898f\u6a21\u30fb\u8907\u96d1\u306a\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u306b\u5411\u3044\u3066\u3044\u307e\u3059\u3002\nMayaVi \u306f \"Ma-ya-vee\" \u3068\u767a\u97f3\u3057\u307e\u3059\u3002\u30b5\u30f3\u30b9\u30af\u30ea\u30c3\u30c8\u8a9e\u3067\u3001\u82f1\u8a9e\u306e \"magical\" \u306b\u76f8\u5f53\u3059\u308b\u305d\u3046\u3067\u3059\u3002\n\n\u3000\u540c\u3058\u3088\u3046\u306a\u6027\u683c\u3092\u6301\u3064\u30e9\u30a4\u30d6\u30e9\u30ea\u306b ParaView \u304c\u3042\u308a\u307e\u3059\u3002\u3053\u3061\u3089\u306f\u4e26\u5217\u5206\u6563\u5316\u3092\u76ee\u6307\u3057\u3066\u3044\u3066\u3001Mayavi \u3088\u308a\u6709\u540d\u3067\u3057\u3087\u3046\u3002\n\u3000\u79c1\u306f\u3001MayaVi \u3092\u5148\u306b\u4f7f\u3044\u59cb\u3081\u3066\u304a\u308a\u3001ParaView \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u969b\u306b\u306f\u5927\u5909\u9762\u5012\u3067\u3042\u3063\u305f\u7d4c\u9a13\u304c\u3042\u308a\u307e\u3059\u3002\u4f7f\u3044\u52dd\u624b\u306f\u3001\u3060\u3044\u305f\u3044\u4f3c\u3066\u3044\u307e\u3059\u3057\u3001\u500b\u4eba\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f MayaVi \u306f\u304a\u3059\u3059\u3081\u3067\u3059\u3002\n\nmayavi \u306e conda \u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\n\u3000Julia\u3067\u306e conda\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u6271\u3044\u306f\u3001\u6628\u65e5\u306e\u8a18\u4e8b\u3067\u89e3\u8aac\u3057\u307e\u3057\u305f\u3002( conda \u30d1\u30c3\u30b1\u30fc\u30b8\u3092 Julia\u304b\u3089\u8ffd\u52a0\u3057\u3088\u3046 )\n\u3000Julia \u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f miniconda \u74b0\u5883\u306b mayavi \u3071\u3063\u3051\u30fc\u3058\u3092\u8ffd\u52a0\u3059\u308b\u306b\u306f Conda.add() \u3092\u4f7f\u3044\u307e\u3059\u3002\njulia> using Conda\n\njulia> Conda.add(\"mayavi\")\nUsing Anaconda Cloud api site https://api.anaconda.org\nFetching package metadata .......\nSolving package specifications: ..........\n\n# All requested packages already installed.\n# packages in environment at /Users/hs/.pyenv/versions/anaconda-2.4.0/envs/conda_jl:\n... \u4ee5\u4e0b\u7565\u3002\n\n\u3000\u81ea\u5206\u3067\u69cb\u7bc9\u3057\u305f anaconda\u74b0\u5883\u306b mayavi\u3092\u8ffd\u52a0\u3059\u308b\u306a\u3089\u3001\u30b7\u30a7\u30eb (\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u3001\u30bf\u30fc\u30df\u30ca\u30eb)\u304b\u3089 conda \u30b3\u30de\u30f3\u30c9\u3092\u305f\u305f\u3051\u3070\u3088\u3044\u3067\u3057\u3087\u3046\u3002\n$ conda install mayavi -n conda_jl\nUsing Anaconda Cloud api site https://api.anaconda.org\nFetching package metadata .............\nSolving package specifications: ..........\n\nPackage plan for installation in environment /Users/hs/.pyenv/versions/anaconda-2.4.0/envs/conda_jl:\n... \u4ee5\u4e0b\u7565\u3002\n\n\nMayaVi functions gallery\n\u3000\u6700\u521d\u306b MayaVi functions gallery \u306e\u4f8b\u984c\u3092\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\njulia> using PyCall\n\njulia> @pyimport mayavi.mlab as mlab\n\njulia> mlab.test_plot3d()\nPyObject <mayavi.modules.glyph.Glyph object at 0x337fc95f0>\n\njulia> mlab.show()\n\n\u4e0a\u306e\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb: plot3d() https://gist.github.com/d4578e1f4d22bbfa0f418f0caff239c7\n\u5b9f\u884c\u7d50\u679c (\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8)\n\n\u3000mayavi.mlab \u306f\u3001Python \u306e numpy.array \u3092\u3001\u30b7\u30f3\u30d7\u30eb\u306b\u30d7\u30ed\u30c3\u30c8\u3059\u308b\u305f\u3081\u306e\u30c4\u30fc\u30eb\u3067\u3059\u3002 matplotlib \u3092\u77e5\u3063\u3066\u3044\u308b\u65b9\u306b\u306f\u3001matplotlib.pyplot \u306b\u76f8\u5f53\u3059\u308b\u3068\u3044\u3048\u3070\u5bdf\u3057\u3066\u3044\u305f\u3060\u3051\u307e\u3059\u304b\u3002\n\u3000mlab.show() \u3092\u8d77\u52d5\u3059\u308b\u3068\u3001\u5b9f\u969b\u306e\u63cf\u753b\u304c\u884c\u308f\u308c\u307e\u3059\u3002 3\u6b21\u5143\u30d7\u30ed\u30c3\u30c8\u306e\u4e0a\u90e8\u306b\u3001\u3044\u304f\u3064\u304b\u306e\u30a2\u30a4\u30b3\u30f3\u304c\u4e26\u3093\u3060\u30e1\u30cb\u30e5\u30fc\u30d0\u30fc\u304c\u3042\u308a\u3001\u56f3\u5f62\u3092\u56de\u8ee2\u30fb\u62e1\u5927\u7e2e\u5c0f\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u8fba\u306e\u6a5f\u80fd\u306f traits \u3068\u547c\u3070\u308c\u3066\u3044\u307e\u3059 (\u3046\u307e\u3044\u8a33\u8a9e\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093)\u3002\n\u3000\u3055\u3066\u3001Mayavi Functions gallery \u306b\u3042\u308b\u3001\u4ed6 8\u3064\u306e\u4f8b\u984c\u3082\u3001\u3046\u307e\u304f\u8868\u793a\u3067\u304d\u307e\u3057\u305f\u3002\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092 gist\u306b\u7f6e\u3044\u3066\u304a\u304d\u307e\u3059\u3002\n- \u70b9(\u7403) points3d(): https://gist.github.com/a3b0b95b58a42b7b010aea779536e6f3\n- \u753b\u50cf imshow(): https://gist.github.com/326f9b72a56f6187f0d62b7e9e3ca4ed\n- \u7b49\u9ad8\u9762 surf(): https://gist.github.com/53d022bfcb9b268ea829f23f9e2aae4e\n- \u7b49\u9ad8\u7dda contour_surf(): https://gist.github.com/bc51e4baf2f09df352e8019e37f34bdf\n- \u66f2\u9762 mesh(): https://gist.github.com/8fc119d17a4bd44cefdbb7439a3a028f\n- \u68d2\u30b0\u30e9\u30d5 barchart(): https://gist.github.com/89d6a5f3a6a321fd099d1b04e9cc7ea7\n- \u4e09\u89d2\u30e1\u30c3\u30b7\u30e5 triangular_mesh(): https://gist.github.com/3c44621b47282921458803c2c15c1aaf\n- \u7b49\u5024\u9762 contour3d(): https://gist.github.com/002372eecca7cc831764ea731acaf155\ntest_mesh() \u306e\u5b9f\u884c\u7d50\u679c (\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8)\n\n\nsurface_from_irregular_data\n\u3000\u4ee5\u4e0b 4\u3064\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u4f8b\u3092\u901a\u3057\u3066\u3001Python \u306b\u3088\u308b Mayavi\u30d7\u30ed\u30b0\u30e9\u30e0\u3092 Julia \u306b\u79fb\u690d\u3059\u308b\u969b\u306e\u30dd\u30a4\u30f3\u30c8\u3068 \u95a2\u9023\u3059\u308b tips \u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u3000surface_from_irregular_data.py \u3068\u3044\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002\n\nPython\u30bd\u30fc\u30b9: http://docs.enthought.com/mayavi/mayavi/auto/example_surface_from_irregular_data.html\n\n\u4e0b\u306e Julia \u30bd\u30fc\u30b9: https://gist.github.com/2cbe32c7b10a2b1c90657e06e9ba4237\n\n\nfunction f(x, y)\n  exp(-(x .^ 2 + y .^ 2))\nend\n\nsrand(12345)\nxs = 4.0 * (rand(500) - 0.5)\nys = 4.0 * (rand(500) - 0.5)\nzs = f(xs, ys)\n\nusing PyCall\n@pyimport mayavi.mlab as mlab\nmlab.figure(1, fgcolor=(0, 0, 0), bgcolor=(1, 1, 1))\n\n# Visualize the points\npts = mlab.points3d(xs, ys, zs, zs, scale_mode=\"none\", scale_factor=0.2)\n\n# Create and visualize the mesh\nmesh = mlab.pipeline[:delaunay2d](pts)\nsurf = mlab.pipeline[:surface](mesh)\n\nmlab.view(47, 57, 8.2, (0.1, 0.15, 0.14))\nmlab.show()\n\n\u5b9f\u884c\u7d50\u679c (\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8)\n\n\u3000\u4e0d\u898f\u5247\u306a 2\u6b21\u5143\u70b9 (x,y) \u3092 \u95a2\u6570 z=f(x,y) \u3092\u7528\u3044\u3066\u30013\u6b21\u5143\u70b9 (x,y,z) \u306b\u62e1\u5f35\u3057\u307e\u3059\u3002\u305d\u308c\u3089\u3092\u70b9(\u7403)\u3068\u3057\u3066\u63cf\u753b\u3057\u307e\u3059(points3d)\u3002\u307e\u305f\u30013\u6b21\u5143\u70b9\u3092\u88dc\u9593\u3057(delaunay2d)\u3001\u305d\u306e\u8868\u9762\u3092\u63cf\u753b\u3057\u307e\u3059 (surf)\u3002\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u3001\u3044\u304f\u3064\u304b\u306e\u51e6\u7406\u3092\u52a0\u3048\u3066\u3044\u304f\u904e\u7a0b\u306f\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3 (pipeline) \u3068\u547c\u3070\u308c\u307e\u3059\u3002\n\u3000Julia\u30bd\u30fc\u30b9\u306f\u3001Python\u30bd\u30fc\u30b9\u3068\u307b\u307c\u540c\u3058\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u70b9\u306b\u6ce8\u610f\u3057\u307e\u3057\u305f\u3002\n- Python \u306e mlab.pipeline.delaunay2d \u306a\u3069\u306f\u3001\u305d\u306e\u307e\u307e\u547c\u3079\u305a mlab.pipeline[:delaunay2d] \u306a\u3069\u3068\u3057\u307e\u3059\u3002\n- function \u5185\u3067\u3001\u8981\u7d20\u6bce\u306e\u3079\u304d\u4e57\u3092 .^ \u306b\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n\ntriangular_mesh\n\u3000\u6b21\u306b\u3000test_triangular_mesh \u306e\u4e2d\u8eab\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u3001Julia \u306b\u79fb\u690d\u3057\u3066\u307f\u307e\u3059\u3002\n\nPython\u30bd\u30fc\u30b9: http://docs.enthought.com/mayavi/mayavi/auto/mlab_helper_functions.html?highlight=triangular%20mesh#triangular-mesh\n\n\u4e0b\u306e Julia \u30bd\u30fc\u30b9: https://gist.github.com/bc98e07f807ebc03f75837cb76117b79\n\n\n# An example of a cone, ie a non-regular mesh defined by its triangles.\nn = 8\nt = linspace(-pi, pi, n)\nxy = exp(im * t)\nx = real(xy)\ny = imag(xy)\nz = zeros(n)\n\ntriangles = [ (0, i, i + 1) for i in 1:n-1 ]\nunshift!(x,0.0)\nunshift!(y,0.0)\nunshift!(z,1.0)\nt=collect(t)\nunshift!(t,0.0)\n\nusing PyCall\n@pyimport mayavi.mlab as mlab\nmlab.triangular_mesh(x, y, z, triangles, scalars=PyObject(t))\nmlab.show()\n\n\u5b9f\u884c\u7d50\u679c (\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8)  \u203b \u56f3\u5f62\u3092\u7e2e\u5c0f\u30fb\u56de\u8ee2\u3057\u3066\u3044\u307e\u3059: \n\n\u3000mlab.triangular_mesh\u306f\u3001(\u8907\u6570\u306e)\u4e09\u89d2\u5f62\u3092\u63cf\u753b\u3059\u308b\u547d\u4ee4\u3067\u3059\u3002\u5f15\u6570\u3068\u3057\u3066\u3001\u9802\u70b9\u3068\u306a\u308b\u70b9\u306e\u5ea7\u6a19\u3068\u3001\u4e09\u89d2\u5f62\u306e\u9802\u70b9\u306e\u756a\u53f7\u3092\u4e0e\u3048\u307e\u3059\u3002 @pyimport \u3067\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u305f\u95a2\u6570\u3067\u306f\u3001\u914d\u5217\u306e\u5f15\u6570\u3092 numpy.array \u3068\u3057\u3066 Python \u306b\u6e21\u3057\u307e\u3059\u3002\u901a\u5e38\u306e\u30ea\u30b9\u30c8\u3068\u3057\u3066\u6e21\u3057\u305f\u3044\u306a\u3089 PyObject() \u3067\u304f\u308b\u307f\u307e\u3059\u3002\n\u3000\u6ce8\u610f\u3059\u3079\u304d\u306f\u3001\u914d\u5217\u306e\u6dfb\u5b57\u304c Julia \u3067\u306f 1 \u304b\u3089\u59cb\u307e\u308b\u306e\u306b\u5bfe\u3057\u3066\u3001Python\u3067\u306f 0 \u304b\u3089\u59cb\u307e\u308b\u3053\u3068\u3067\u3059\u3002 triangles \u3067\u793a\u3055\u308c\u308b\u9802\u70b9\u306e\u70b9\u756a\u53f7\u3068\u3001Julia\u3067\u306e\u914d\u5217\u6dfb\u5b57\u304c 1\u3064\u305a\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u3000\u305d\u306e\u307b\u304b Julia \u306e tips \u3092\u3044\u304f\u3064\u304b\u3002\n- linspace(start, end, n) \u306f\u3001\u8981\u7d20 n \u500b\u306e\u7b49\u5dee\u6570\u5217\u3092\u4f5c\u308a\u307e\u3059\u3002\u6570\u5024\u3092\u5f97\u308b\u306b\u306f\u3002collect \u3092\u4f7f\u3044\u307e\u3059\u3002\n- im \u306f\u865a\u6570\u5358\u4f4d\u3067\u3059\u3002\n- zeros(n) \u306f\u3001n\u500b\u306e\u8981\u7d20\u304b\u3089\u306a\u308b Float64 \u306e\u914d\u5217\u3092\u4f5c\u308a\u307e\u3059\u3002\u5024\u306f 0.0 \u3067\u3059\u3002\n- unshift!(v,e) \u306f\u3001\u914d\u5217 v \u306e\u5148\u982d\u306b\u3001\u8981\u7d20 e \u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u672b\u5c3e\u306b\u8ffd\u52a0\u3059\u308b\u306e\u306f push!(v,e) \u307e\u305f\u306f append!(v,e) \u3067\u3059\u3002\u3069\u306e\u547d\u4ee4\u3082\u3001\u914d\u5217 v \u306f\u7834\u58ca\u3055\u308c\u307e\u3059\u3002 (\u547d\u4ee4\u672b\u5c3e\u306e! \u3067\u3059\u306d)\n\nspherical_harmonics\n\u3000\u4eca\u5ea6\u306f example_spherical_harmonics.py \u3092\u3001Julia\u306b\u79fb\u690d\u3057\u3066\u307f\u307e\u3059\u3002\n\nPython\u30bd\u30fc\u30b9: http://docs.enthought.com/mayavi/mayavi/auto/example_spherical_harmonics.html\n\n\u4e0b\u306e Julia \u30bd\u30fc\u30b9: https://gist.github.com/60d97f20a19d820e299c253612728907\n\n\n# phi, theta = np.mgrid[0:pi:101j, 0:2 * pi:101j]\nphi   = [ u1 for u1 in linspace(0,pi,101), v1 in linspace(0,2*pi,101) ]\ntheta = [ v1 for u1 in linspace(0,pi,101), v1 in linspace(0,2*pi,101) ]\n\nr = 0.3\nx = r * sin(phi) .* cos(theta)\ny = r * sin(phi) .* sin(theta)\nz = r * cos(phi)\n\nusing PyCall\n@pyimport mayavi.mlab as mlab\n@pyimport scipy.special as spe\n\nmlab.figure(1, bgcolor=(1, 1, 1), fgcolor=(0,0,0), size=(400, 300))\nmlab.clf()\n# Represent spherical harmonics on the surface of the sphere\nfor n in 1:6-1, m in 0:n-1\n  s = real( spe.sph_harm(m, n, theta, phi) )\n  mlab.mesh(x - m, y - n, z, scalars=s, colormap=\"jet\")\n  s[s .< 0] *= 0.97\n  s /= maximum(s)\n  mlab.mesh(s .* x - m, s .* y - n, s .* z + 1.3, scalars=s, colormap=\"Spectral\" )\nend\n\nmlab.view(90, 70, 6.2, (-1.3, -2.9, 0.25))\nmlab.show()\n\n\u5b9f\u884c\u7d50\u679c (\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8)\n\n\u3000\u7403\u9762\u8abf\u548c\u95a2\u6570\u306e\u8a08\u7b97\u306b\u306f Python \u306e scipy.special.sph_harm \u3092\u547c\u3073\u51fa\u3057\u3066\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u5f8c\u3001\u66f2\u9762\u3092\u63cf\u304d\u307e\u3059 (mesh)\u3002\n\u3000\u3046\u307e\u304f\u63cf\u753b\u3067\u304d\u3066\u3044\u307e\u3059\u306d\u3002\u7269\u7406\u5316\u5b66\u3067\u51fa\u3066\u304f\u308b\u539f\u5b50\u8ecc\u9053\u306e\u65b9\u4f4d\u91cf\u5b50\u6570 s, p, d ... \u3067\u3059\u3002\n\u3000tips \u3092\u3044\u304f\u3064\u304b\u3002\n- numpy.mgrid \u306f\u3001\uff12\u6b21\u5143\u5ea7\u6a19\u4ee5\u4e0a\u306e\u76f4\u7a4d\u3092\u4f5c\u308b\u95a2\u6570\u3067\u3059\u304c\u3001Julia \u306b\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3057\u304b\u3057\u3001\u305d\u306e\u610f\u5473\u3092\u8003\u3048\u308c\u3070\u3001comprehension \u3067\u7c21\u5358\u306b\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3002\n- Julia \u306e for \u6587\u306f\u3001\u591a\u91cd\u30eb\u30fc\u30d7\u3092\u66f8\u3051\u307e\u3059\u3002\u53f3\u306b\u66f8\u304b\u308c\u305f\u3082\u306e\u304c\u5185\u5074\u306e\u30eb\u30fc\u30d7\u3067\u3059\u3002\n- Python \u306e range(n)\u306f Julia \u306e 0:n-1 \u306b\u76f8\u5f53\u3057\u307e\u3059\u3002Python \u306e range(m,n)\u306f Julia \u306e m:n-1 \u306b\u76f8\u5f53\u3057\u307e\u3059\u3002\n\nsimple structured grid\n\u3000\u6700\u5f8c\u306e\u4f8b\u306f\u3001\u5c11\u3057\u6ce8\u610f\u3092\u8981\u3057\u307e\u3059\u3002example_simple_structured_grid.py \u3092\u3001Julia\u306b\u79fb\u690d\u3057\u3066\u307f\u307e\u3059\u3002\n\nPython\u30bd\u30fc\u30b9: http://docs.enthought.com/mayavi/mayavi/auto/example_simple_structured_grid.html#example-simple-structured-grid\n\nJulia \u30bd\u30fc\u30b9: https://gist.github.com/d0c2c1c9a6fdb04c258f1961d559ee3b\n\n\n# x, y, z = mgrid[1:6:11j, 0:4:13j, 0:3:6j]\nx = [ x1 for x1 in linspace(1.0,6.0,11), y1 in linspace(0.0,4.0,13), z1 in linspace(0.0,3.0,6) ]\ny = [ y1 for x1 in linspace(1.0,6.0,11), y1 in linspace(0.0,4.0,13), z1 in linspace(0.0,3.0,6) ]\nz = [ z1 for x1 in linspace(1.0,6.0,11), y1 in linspace(0.0,4.0,13), z1 in linspace(0.0,3.0,6) ]\nbase=x[:,:,1] + y[:,:,1]\nfor i in 1:size(z)[3]\n  z[:,:, i] = base[:,:] * 0.25 * (i-1)\nend\n\npts=zeros(Float64, tuple(size(z)...,3))\npts[:,:,:,1] = x\npts[:,:,:,2] = y\npts[:,:,:,3] = z\nscalars1 = x .* x + y .* y + z .* z\n\nvectors1=zeros(Float64, tuple(size(z)...,3))\nvectors1[:,:,:,1] = (4.0 - y * 2.0)\nvectors1[:,:,:,2] = (x * 3.0 - 12.0)\nvectors1[:,:,:,3] = sin(z * pi)\n\n# pts = pts.transpose(2, 1, 0, 3).copy()\n# pts= permutedims(pts, [3,2,1,4] )\n# pts= reshape(pts, ( prod(size(pts)[1:3]), 3))\n\n# vectors1= permutedims(vectors1, [3,2,1,4] )\n# vectors1= reshape(vectors1, ( prod(size(vectors1)[1:3]), 3))\n\nusing PyCall\n@pyimport tvtk.api as tvtk_api\n\n# Create the dataset.vec\nsg=tvtk_api.tvtk[:StructuredGrid](dimensions=size(x), points=pts)\nsg[:point_data][:scalars] = vec(scalars1)\nsg[:point_data][:scalars][:name] = \"temperature\"\nsg[:point_data][:vectors] = vectors1\nsg[:point_data][:vectors][:name] = \"velocity\"\n\n@pyimport mayavi.mlab as mlab\n\nd = mlab.pipeline[:add_dataset](sg)\ngx = mlab.pipeline[:grid_plane](d)\ngy = mlab.pipeline[:grid_plane](d)\ngy[:grid_plane][:axis] = \"y\"\ngz = mlab.pipeline[:grid_plane](d)\ngz[:grid_plane][:axis] = \"z\"\niso = mlab.pipeline[:iso_surface](d)\niso[:contour][:maximum_contour] = 75.0\nvec1 = mlab.pipeline[:vectors](d)\nvec1[:glyph][:mask_input_points] = true\nvec1[:glyph][:glyph][:scale_factor] = 1.5\n\nmlab.show()\n\n\n\u5b9f\u884c\u7d50\u679c (\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8)\n\nPython\u306e\u5b9f\u884c\u7d50\u679c (\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8)\n\n\n\u3000\uff13\u6b21\u5143\u683c\u5b50\u3092\u4f5c\u308a\u307e\u3059 (StructuredGrid)\u3002\u305d\u306e\u5404\u70b9\u3067\u3001\u30b9\u30ab\u30e9\u30fc\u5024(scalar1)\u3068\u30d9\u30af\u30c8\u30eb\u5024(vector1)\u3092\u5272\u308a\u3042\u3066\u307e\u3059 (point_data)\u3002\u3053\u308c\u3092\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306b\u6d41\u3057\u8fbc\u3093\u3067\u3001\u7b49\u5024\u9762(iso_surface)\u3068\u30d9\u30af\u30c8\u30eb(vectors)\u3092\u63cf\u753b\u3057\u307e\u3059\u3002\u307e\u305f\u3001x=0, y=0, z=0 \u306e\u9762\u3082\u63cf\u753b\u3057\u307e\u3059 (grid_plane\uff09\u3002\n\u3000vtk \u306b\u5ea7\u6a19\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u308b\u3068\u304d\u306f\u3001\u6700\u521d\u306bx, \u6b21\u306b y\u3001\u6700\u5f8c\u306b z \u304c\u52d5\u304f\u3088\u3046\u306b\u914d\u5217\u3092\u4e0e\u3048\u307e\u3059 (column major)\u3002python-numpy \u306f row-major \u3067\u3059\u304b\u3089\u3001\u5143\u306e python \u30bd\u30fc\u30b9\u3067\u306f\u683c\u7d0d\u9806\u3092\u5165\u308c\u66ff\u3048\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306b\u5bfe\u3057\u3066\u3001Julia \u306f\u3001column major \u3067\u3059\u304b\u3089\u3001\u305d\u306e\u307e\u307e\u3067\u5927\u4e08\u592b\u3067\u3059\u3002 (\u53c2\u8003 Row-major order\u3068Column-major order )\n\u3000\u3061\u306a\u307f\u306b\u3001Python \u306e numpy.transpose \u547d\u4ee4\u3092\u3001\u591a\u6b21\u5143\u914d\u5217\u306e\u8ef8\u3092\u5165\u308c\u66ff\u3048\u308b\u306e\u306b\u4f7f\u3048\u307e\u3059\u3002 Julia\u306e transpose \u306f \u884c\u5217(2\u6b21\u5143\u914d\u5217)\u306e\u884c\u3068\u5217\u3092\u5165\u308c\u66ff\u3048\u308b\u3060\u3051\u3067\u3001\u591a\u6b21\u5143\u914d\u5217\u306b\u306f\u4f7f\u3048\u307e\u305b\u3093\u3002Julia \u3067\u591a\u6b21\u5143\u914d\u5217\u306e\u8ef8\u3092\u5165\u308c\u66ff\u3048\u308b\u306b\u306f permutedims \u3092\u4f7f\u3044\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u4e8c\u3064\u304c\u7b49\u4fa1\u3068\u306a\u308a\u307e\u3059 (Julia\u3067\u306f\u3001\u8ef8\u3082 1 \u304b\u3089\u6570\u3048\u307e\u3059)\u3002\na = a.transpose(2, 1, 0, 3).copy()\n\na = permutedims(a, [3,2,1,4] )\n# \u914d\u5217\u3092\u66f8\u304d\u63db\u3048\u308b\u5834\u5408\npermutedims!(a, [3,2,1,4] )\n\n\u3000tips \u3092\u3044\u304f\u3064\u304b\u3002\n\u3000tuple \u306e\u5165\u308c\u5b50\u306f\u5c55\u958b\u3057\u307e\u305b\u3093\u3002\u5c55\u958b\u3059\u308b\u306b\u306f ... \u3092\u4ed8\u3051\u307e\u3059\u3002splat construct \u3068\u3044\u3044\u307e\u3059\u3002\njulia> ((1,2),(3,4))\n((1,2),(3,4))\n\njulia> ((1,2)...,(3,4))\n(1,2,(3,4))\n\njulia> ((1,2),(3,4)...)\n((1,2),3,4)\n\njulia> ((1,2)...,(3,4)...)\n(1,2,3,4)\n\n\u3000\u591a\u6b21\u5143\u914d\u5217 a \u306b\u5bfe\u3057\u3066\u3001Python-numpy\u306e a.shape \u306f Julia \u306e size(a)\u3067\u3059\u3002\n\n\u7d42\u308f\u308a\u306b\n\u3000\u4ee5\u4e0a\u3001\u99c6\u3051\u8db3\u3067\u3001Mayavi \u3092 Julia \u3067\u4f7f\u3046\u4f8b\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\u3002 \u591a\u304f\u306e\u5834\u5408 Python\u30bd\u30fc\u30b9\u3092\u898b\u306a\u304c\u3089\u3001\u307b\u307c\u6a5f\u68b0\u7684\u306b\u66f8\u304d\u63db\u3048\u308c\u3070\u3088\u3044\u3053\u3068\u3092\u793a\u3057\u307e\u3057\u305f\u3002\n\u3000\u3055\u3066\u3001Mayavi \u3092 Jupyter \u306e\u4e2d\u3067\u8868\u793a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u5225\u306e\u8a18\u4e8b\u3067\u7d39\u4ecb\u3059\u308b\u4e88\u5b9a\u3067\u3059\u3002-> \u66f8\u304d\u307e\u3057\u305f\u3002[Python, Julia] Jupyter \u3067 3D \u8868\u793a - Mayavi \u30e9\u30a4\u30d6\u30e9\u30ea\n [Julia advent calendar 2016](http://qiita.com/advent-calendar/2016/julialang) 6\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n \u6700\u8fd1 conda\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u63d0\u4f9b\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u305f MayaVi \u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u3001Julia \u304b\u3089\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n\n\n# MayaVi \u3068\u306f\n\n\u3000[MayaVi](http://docs.enthought.com/mayavi/mayavi/) \u306f 3\u6b21\u5143\u30d7\u30ed\u30c3\u30c8\u306e\u305f\u3081\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3067\u3059\u3002\u6982\u7565\u306f\u3001\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\n- \u79d1\u5b66\u6280\u8853\u8a08\u7b97\u306e\u30b3\u30f3\u30b5\u30eb\u30bf\u30f3\u30c8\u4f1a\u793e [Enthought\u793e](http://docs.enthought.com) \u304c\u958b\u767a\u3057\u3066\u3044\u308b Python\u5411\u3051 3\u6b21\u5143\u30d7\u30ed\u30c3\u30c8\u30d1\u30c3\u30b1\u30fc\u30b8\u3002 \u540c\u793e\u304c\u914d\u5e03\u3059\u308b\u7d71\u5408\u74b0\u5883 [Enthough Canopy](https://www.enthought.com/canopy-subscriptions/) \u306b\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\u307e\u305f\u3001Windows\u5411\u3051\u306e\u79d1\u5b66\u6280\u8853\u8a08\u7b97Python\u30d1\u30c3\u30b1\u30fc\u30b8 [Python(x,y)](https://python-xy.github.io/downloads.html) \u306b\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\n- \u63cf\u753b\u30a8\u30f3\u30b8\u30f3\u306f\u3001C++\u3067\u66f8\u304b\u308c\u305f\u30e9\u30a4\u30d6\u30e9\u30ea [The Visualization Toolkit (VTK)](http://www.vtk.org) \u3067\u3059\u3002 vtk\u306f\u3001\u5927\u898f\u6a21\u30fb\u8907\u96d1\u306a\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u306b\u5411\u3044\u3066\u3044\u307e\u3059\u3002\n- MayaVi \u306f \"Ma-ya-vee\" \u3068\u767a\u97f3\u3057\u307e\u3059\u3002\u30b5\u30f3\u30b9\u30af\u30ea\u30c3\u30c8\u8a9e\u3067\u3001\u82f1\u8a9e\u306e \"magical\" \u306b\u76f8\u5f53\u3059\u308b\u305d\u3046\u3067\u3059\u3002\n\n\u3000\u540c\u3058\u3088\u3046\u306a\u6027\u683c\u3092\u6301\u3064\u30e9\u30a4\u30d6\u30e9\u30ea\u306b [ParaView](http://www.paraview.org) \u304c\u3042\u308a\u307e\u3059\u3002\u3053\u3061\u3089\u306f\u4e26\u5217\u5206\u6563\u5316\u3092\u76ee\u6307\u3057\u3066\u3044\u3066\u3001Mayavi \u3088\u308a\u6709\u540d\u3067\u3057\u3087\u3046\u3002\n\u3000\u79c1\u306f\u3001MayaVi \u3092\u5148\u306b\u4f7f\u3044\u59cb\u3081\u3066\u304a\u308a\u3001ParaView \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u969b\u306b\u306f\u5927\u5909\u9762\u5012\u3067\u3042\u3063\u305f\u7d4c\u9a13\u304c\u3042\u308a\u307e\u3059\u3002\u4f7f\u3044\u52dd\u624b\u306f\u3001\u3060\u3044\u305f\u3044\u4f3c\u3066\u3044\u307e\u3059\u3057\u3001\u500b\u4eba\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f MayaVi \u306f\u304a\u3059\u3059\u3081\u3067\u3059\u3002\n\n\n# mayavi \u306e conda \u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\n\n\u3000Julia\u3067\u306e conda\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u6271\u3044\u306f\u3001\u6628\u65e5\u306e\u8a18\u4e8b\u3067\u89e3\u8aac\u3057\u307e\u3057\u305f\u3002( [conda \u30d1\u30c3\u30b1\u30fc\u30b8\u3092 Julia\u304b\u3089\u8ffd\u52a0\u3057\u3088\u3046](http://qiita.com/tenfu2tea/items/d2ac1427eaed7a548287) )\n\u3000Julia \u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f miniconda \u74b0\u5883\u306b mayavi \u3071\u3063\u3051\u30fc\u3058\u3092\u8ffd\u52a0\u3059\u308b\u306b\u306f `Conda.add()` \u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```Julia\njulia> using Conda\n\njulia> Conda.add(\"mayavi\")\nUsing Anaconda Cloud api site https://api.anaconda.org\nFetching package metadata .......\nSolving package specifications: ..........\n\n# All requested packages already installed.\n# packages in environment at /Users/hs/.pyenv/versions/anaconda-2.4.0/envs/conda_jl:\n... \u4ee5\u4e0b\u7565\u3002\n```\n\n\u3000\u81ea\u5206\u3067\u69cb\u7bc9\u3057\u305f anaconda\u74b0\u5883\u306b mayavi\u3092\u8ffd\u52a0\u3059\u308b\u306a\u3089\u3001\u30b7\u30a7\u30eb (\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u3001\u30bf\u30fc\u30df\u30ca\u30eb)\u304b\u3089 conda \u30b3\u30de\u30f3\u30c9\u3092\u305f\u305f\u3051\u3070\u3088\u3044\u3067\u3057\u3087\u3046\u3002\n\n```shell-session\n$ conda install mayavi -n conda_jl\nUsing Anaconda Cloud api site https://api.anaconda.org\nFetching package metadata .............\nSolving package specifications: ..........\n\nPackage plan for installation in environment /Users/hs/.pyenv/versions/anaconda-2.4.0/envs/conda_jl:\n... \u4ee5\u4e0b\u7565\u3002\n```\n\n# MayaVi functions gallery\n\n\u3000\u6700\u521d\u306b [MayaVi functions gallery](http://docs.enthought.com/mayavi/mayavi/auto/examples.html#mlab-functions-gallery) \u306e\u4f8b\u984c\u3092\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\n\n\n```Julia\njulia> using PyCall\n\njulia> @pyimport mayavi.mlab as mlab\n\njulia> mlab.test_plot3d()\nPyObject <mayavi.modules.glyph.Glyph object at 0x337fc95f0>\n\njulia> mlab.show()\n```\n\n\u4e0a\u306e\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb: plot3d() https://gist.github.com/d4578e1f4d22bbfa0f418f0caff239c7\n\n\u5b9f\u884c\u7d50\u679c (\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8)\n<img width=\"512\" alt=\"scr-do-test_plot3d.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/103217/68ac1f7a-b95c-7f8a-f165-b0d8b2b3e63c.png\">\n\n\u3000`mayavi.mlab` \u306f\u3001Python \u306e `numpy.array` \u3092\u3001\u30b7\u30f3\u30d7\u30eb\u306b\u30d7\u30ed\u30c3\u30c8\u3059\u308b\u305f\u3081\u306e\u30c4\u30fc\u30eb\u3067\u3059\u3002 `matplotlib` \u3092\u77e5\u3063\u3066\u3044\u308b\u65b9\u306b\u306f\u3001`matplotlib.pyplot` \u306b\u76f8\u5f53\u3059\u308b\u3068\u3044\u3048\u3070\u5bdf\u3057\u3066\u3044\u305f\u3060\u3051\u307e\u3059\u304b\u3002\n\n\u3000`mlab.show()` \u3092\u8d77\u52d5\u3059\u308b\u3068\u3001\u5b9f\u969b\u306e\u63cf\u753b\u304c\u884c\u308f\u308c\u307e\u3059\u3002 3\u6b21\u5143\u30d7\u30ed\u30c3\u30c8\u306e\u4e0a\u90e8\u306b\u3001\u3044\u304f\u3064\u304b\u306e\u30a2\u30a4\u30b3\u30f3\u304c\u4e26\u3093\u3060\u30e1\u30cb\u30e5\u30fc\u30d0\u30fc\u304c\u3042\u308a\u3001\u56f3\u5f62\u3092\u56de\u8ee2\u30fb\u62e1\u5927\u7e2e\u5c0f\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u8fba\u306e\u6a5f\u80fd\u306f `traits` \u3068\u547c\u3070\u308c\u3066\u3044\u307e\u3059 (\u3046\u307e\u3044\u8a33\u8a9e\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093)\u3002\n\n\u3000\u3055\u3066\u3001Mayavi Functions gallery \u306b\u3042\u308b\u3001\u4ed6 8\u3064\u306e\u4f8b\u984c\u3082\u3001\u3046\u307e\u304f\u8868\u793a\u3067\u304d\u307e\u3057\u305f\u3002\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092 gist\u306b\u7f6e\u3044\u3066\u304a\u304d\u307e\u3059\u3002\n- \u70b9(\u7403) points3d(): https://gist.github.com/a3b0b95b58a42b7b010aea779536e6f3\n- \u753b\u50cf imshow(): https://gist.github.com/326f9b72a56f6187f0d62b7e9e3ca4ed\n- \u7b49\u9ad8\u9762 surf(): https://gist.github.com/53d022bfcb9b268ea829f23f9e2aae4e\n- \u7b49\u9ad8\u7dda contour_surf(): https://gist.github.com/bc51e4baf2f09df352e8019e37f34bdf\n- \u66f2\u9762 mesh(): https://gist.github.com/8fc119d17a4bd44cefdbb7439a3a028f\n- \u68d2\u30b0\u30e9\u30d5 barchart(): https://gist.github.com/89d6a5f3a6a321fd099d1b04e9cc7ea7\n- \u4e09\u89d2\u30e1\u30c3\u30b7\u30e5 triangular_mesh(): https://gist.github.com/3c44621b47282921458803c2c15c1aaf\n- \u7b49\u5024\u9762 contour3d(): https://gist.github.com/002372eecca7cc831764ea731acaf155\n\ntest_mesh() \u306e\u5b9f\u884c\u7d50\u679c (\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8)\n<img width=\"484\" alt=\"scr-do-test_mesh.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/103217/37aea92c-6bbd-60d3-5471-76e92f7a4932.png\">\n\n\n# surface_from_irregular_data\n\n\u3000\u4ee5\u4e0b 4\u3064\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u4f8b\u3092\u901a\u3057\u3066\u3001Python \u306b\u3088\u308b Mayavi\u30d7\u30ed\u30b0\u30e9\u30e0\u3092 Julia \u306b\u79fb\u690d\u3059\u308b\u969b\u306e\u30dd\u30a4\u30f3\u30c8\u3068 \u95a2\u9023\u3059\u308b tips \u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u3000`surface_from_irregular_data.py` \u3068\u3044\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002\n\n- Python\u30bd\u30fc\u30b9: http://docs.enthought.com/mayavi/mayavi/auto/example_surface_from_irregular_data.html\n- \u4e0b\u306e Julia \u30bd\u30fc\u30b9: https://gist.github.com/2cbe32c7b10a2b1c90657e06e9ba4237\n\n```Julia\nfunction f(x, y)\n  exp(-(x .^ 2 + y .^ 2))\nend\n\nsrand(12345)\nxs = 4.0 * (rand(500) - 0.5)\nys = 4.0 * (rand(500) - 0.5)\nzs = f(xs, ys)\n\nusing PyCall\n@pyimport mayavi.mlab as mlab\nmlab.figure(1, fgcolor=(0, 0, 0), bgcolor=(1, 1, 1))\n\n# Visualize the points\npts = mlab.points3d(xs, ys, zs, zs, scale_mode=\"none\", scale_factor=0.2)\n\n# Create and visualize the mesh\nmesh = mlab.pipeline[:delaunay2d](pts)\nsurf = mlab.pipeline[:surface](mesh)\n\nmlab.view(47, 57, 8.2, (0.1, 0.15, 0.14))\nmlab.show()\n```\n\n\u5b9f\u884c\u7d50\u679c (\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8)\n<img width=\"512\" alt=\"scr-surface_from_irregular_mesh.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/103217/f8798973-082e-ef9c-bee9-3daedddd25f9.png\">\n\n\u3000\u4e0d\u898f\u5247\u306a 2\u6b21\u5143\u70b9 `(x,y)` \u3092 \u95a2\u6570 `z=f(x,y)` \u3092\u7528\u3044\u3066\u30013\u6b21\u5143\u70b9 `(x,y,z)` \u306b\u62e1\u5f35\u3057\u307e\u3059\u3002\u305d\u308c\u3089\u3092\u70b9(\u7403)\u3068\u3057\u3066\u63cf\u753b\u3057\u307e\u3059(points3d)\u3002\u307e\u305f\u30013\u6b21\u5143\u70b9\u3092\u88dc\u9593\u3057(delaunay2d)\u3001\u305d\u306e\u8868\u9762\u3092\u63cf\u753b\u3057\u307e\u3059 (surf)\u3002\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u3001\u3044\u304f\u3064\u304b\u306e\u51e6\u7406\u3092\u52a0\u3048\u3066\u3044\u304f\u904e\u7a0b\u306f\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3 (pipeline) \u3068\u547c\u3070\u308c\u307e\u3059\u3002\n\u3000Julia\u30bd\u30fc\u30b9\u306f\u3001Python\u30bd\u30fc\u30b9\u3068\u307b\u307c\u540c\u3058\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u70b9\u306b\u6ce8\u610f\u3057\u307e\u3057\u305f\u3002\n- Python \u306e `mlab.pipeline.delaunay2d` \u306a\u3069\u306f\u3001\u305d\u306e\u307e\u307e\u547c\u3079\u305a `mlab.pipeline[:delaunay2d]` \u306a\u3069\u3068\u3057\u307e\u3059\u3002\n- `function` \u5185\u3067\u3001\u8981\u7d20\u6bce\u306e\u3079\u304d\u4e57\u3092 `.^` \u306b\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n\n# triangular_mesh\n\n\u3000\u6b21\u306b\u3000`test_triangular_mesh` \u306e\u4e2d\u8eab\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u3001Julia \u306b\u79fb\u690d\u3057\u3066\u307f\u307e\u3059\u3002\n\n- Python\u30bd\u30fc\u30b9: http://docs.enthought.com/mayavi/mayavi/auto/mlab_helper_functions.html?highlight=triangular%20mesh#triangular-mesh\n- \u4e0b\u306e Julia \u30bd\u30fc\u30b9: https://gist.github.com/bc98e07f807ebc03f75837cb76117b79\n\n```Julia\n# An example of a cone, ie a non-regular mesh defined by its triangles.\nn = 8\nt = linspace(-pi, pi, n)\nxy = exp(im * t)\nx = real(xy)\ny = imag(xy)\nz = zeros(n)\n\ntriangles = [ (0, i, i + 1) for i in 1:n-1 ]\nunshift!(x,0.0)\nunshift!(y,0.0)\nunshift!(z,1.0)\nt=collect(t)\nunshift!(t,0.0)\n\nusing PyCall\n@pyimport mayavi.mlab as mlab\nmlab.triangular_mesh(x, y, z, triangles, scalars=PyObject(t))\nmlab.show()\n```\n\n\u5b9f\u884c\u7d50\u679c (\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8)  \u203b \u56f3\u5f62\u3092\u7e2e\u5c0f\u30fb\u56de\u8ee2\u3057\u3066\u3044\u307e\u3059: \n<img width=\"512\" alt=\"scr-triangular-mesh.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/103217/ac0516f6-f433-e1c5-9595-1c4a27f8a181.png\">\n\n\n\u3000`mlab.triangular_mesh`\u306f\u3001(\u8907\u6570\u306e)\u4e09\u89d2\u5f62\u3092\u63cf\u753b\u3059\u308b\u547d\u4ee4\u3067\u3059\u3002\u5f15\u6570\u3068\u3057\u3066\u3001\u9802\u70b9\u3068\u306a\u308b\u70b9\u306e\u5ea7\u6a19\u3068\u3001\u4e09\u89d2\u5f62\u306e\u9802\u70b9\u306e\u756a\u53f7\u3092\u4e0e\u3048\u307e\u3059\u3002 @pyimport \u3067\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u305f\u95a2\u6570\u3067\u306f\u3001\u914d\u5217\u306e\u5f15\u6570\u3092 `numpy.array` \u3068\u3057\u3066 Python \u306b\u6e21\u3057\u307e\u3059\u3002\u901a\u5e38\u306e\u30ea\u30b9\u30c8\u3068\u3057\u3066\u6e21\u3057\u305f\u3044\u306a\u3089 `PyObject()` \u3067\u304f\u308b\u307f\u307e\u3059\u3002\n\u3000\u6ce8\u610f\u3059\u3079\u304d\u306f\u3001\u914d\u5217\u306e\u6dfb\u5b57\u304c Julia \u3067\u306f 1 \u304b\u3089\u59cb\u307e\u308b\u306e\u306b\u5bfe\u3057\u3066\u3001Python\u3067\u306f 0 \u304b\u3089\u59cb\u307e\u308b\u3053\u3068\u3067\u3059\u3002 `triangles` \u3067\u793a\u3055\u308c\u308b\u9802\u70b9\u306e\u70b9\u756a\u53f7\u3068\u3001Julia\u3067\u306e\u914d\u5217\u6dfb\u5b57\u304c 1\u3064\u305a\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3000\u305d\u306e\u307b\u304b Julia \u306e tips \u3092\u3044\u304f\u3064\u304b\u3002\n- `linspace(start, end, n)` \u306f\u3001\u8981\u7d20 `n` \u500b\u306e\u7b49\u5dee\u6570\u5217\u3092\u4f5c\u308a\u307e\u3059\u3002\u6570\u5024\u3092\u5f97\u308b\u306b\u306f\u3002`collect` \u3092\u4f7f\u3044\u307e\u3059\u3002\n- `im` \u306f\u865a\u6570\u5358\u4f4d\u3067\u3059\u3002\n- `zeros(n)` \u306f\u3001`n`\u500b\u306e\u8981\u7d20\u304b\u3089\u306a\u308b `Float64` \u306e\u914d\u5217\u3092\u4f5c\u308a\u307e\u3059\u3002\u5024\u306f `0.0` \u3067\u3059\u3002\n- `unshift!(v,e)` \u306f\u3001\u914d\u5217 `v` \u306e\u5148\u982d\u306b\u3001\u8981\u7d20 `e` \u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u672b\u5c3e\u306b\u8ffd\u52a0\u3059\u308b\u306e\u306f `push!(v,e)` \u307e\u305f\u306f `append!(v,e)` \u3067\u3059\u3002\u3069\u306e\u547d\u4ee4\u3082\u3001\u914d\u5217 `v` \u306f\u7834\u58ca\u3055\u308c\u307e\u3059\u3002 (\u547d\u4ee4\u672b\u5c3e\u306e`!` \u3067\u3059\u306d)\n\n\n# spherical_harmonics\n\n\u3000\u4eca\u5ea6\u306f `example_spherical_harmonics.py` \u3092\u3001Julia\u306b\u79fb\u690d\u3057\u3066\u307f\u307e\u3059\u3002\n\n- Python\u30bd\u30fc\u30b9: http://docs.enthought.com/mayavi/mayavi/auto/example_spherical_harmonics.html\n- \u4e0b\u306e Julia \u30bd\u30fc\u30b9: https://gist.github.com/60d97f20a19d820e299c253612728907\n\n```Julia\n# phi, theta = np.mgrid[0:pi:101j, 0:2 * pi:101j]\nphi   = [ u1 for u1 in linspace(0,pi,101), v1 in linspace(0,2*pi,101) ]\ntheta = [ v1 for u1 in linspace(0,pi,101), v1 in linspace(0,2*pi,101) ]\n\nr = 0.3\nx = r * sin(phi) .* cos(theta)\ny = r * sin(phi) .* sin(theta)\nz = r * cos(phi)\n\nusing PyCall\n@pyimport mayavi.mlab as mlab\n@pyimport scipy.special as spe\n\nmlab.figure(1, bgcolor=(1, 1, 1), fgcolor=(0,0,0), size=(400, 300))\nmlab.clf()\n# Represent spherical harmonics on the surface of the sphere\nfor n in 1:6-1, m in 0:n-1\n  s = real( spe.sph_harm(m, n, theta, phi) )\n  mlab.mesh(x - m, y - n, z, scalars=s, colormap=\"jet\")\n  s[s .< 0] *= 0.97\n  s /= maximum(s)\n  mlab.mesh(s .* x - m, s .* y - n, s .* z + 1.3, scalars=s, colormap=\"Spectral\" )\nend\n\nmlab.view(90, 70, 6.2, (-1.3, -2.9, 0.25))\nmlab.show()\n```\n\n\u5b9f\u884c\u7d50\u679c (\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8)\n<img width=\"512\" alt=\"scr-spherical-harmonics.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/103217/d6e28838-f1d8-5a4f-f4c4-d558e5105a77.png\">\n\n\u3000\u7403\u9762\u8abf\u548c\u95a2\u6570\u306e\u8a08\u7b97\u306b\u306f Python \u306e `scipy.special.sph_harm` \u3092\u547c\u3073\u51fa\u3057\u3066\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u5f8c\u3001\u66f2\u9762\u3092\u63cf\u304d\u307e\u3059 (mesh)\u3002\n\u3000\u3046\u307e\u304f\u63cf\u753b\u3067\u304d\u3066\u3044\u307e\u3059\u306d\u3002\u7269\u7406\u5316\u5b66\u3067\u51fa\u3066\u304f\u308b\u539f\u5b50\u8ecc\u9053\u306e\u65b9\u4f4d\u91cf\u5b50\u6570 s, p, d ... \u3067\u3059\u3002\n\u3000tips \u3092\u3044\u304f\u3064\u304b\u3002\n- `numpy.mgrid` \u306f\u3001\uff12\u6b21\u5143\u5ea7\u6a19\u4ee5\u4e0a\u306e\u76f4\u7a4d\u3092\u4f5c\u308b\u95a2\u6570\u3067\u3059\u304c\u3001Julia \u306b\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3057\u304b\u3057\u3001\u305d\u306e\u610f\u5473\u3092\u8003\u3048\u308c\u3070\u3001comprehension \u3067\u7c21\u5358\u306b\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3002\n- Julia \u306e for \u6587\u306f\u3001\u591a\u91cd\u30eb\u30fc\u30d7\u3092\u66f8\u3051\u307e\u3059\u3002\u53f3\u306b\u66f8\u304b\u308c\u305f\u3082\u306e\u304c\u5185\u5074\u306e\u30eb\u30fc\u30d7\u3067\u3059\u3002\n- Python \u306e `range(n)`\u306f Julia \u306e `0:n-1` \u306b\u76f8\u5f53\u3057\u307e\u3059\u3002Python \u306e `range(m,n)`\u306f Julia \u306e `m:n-1` \u306b\u76f8\u5f53\u3057\u307e\u3059\u3002\n\n# simple structured grid\n\n\u3000\u6700\u5f8c\u306e\u4f8b\u306f\u3001\u5c11\u3057\u6ce8\u610f\u3092\u8981\u3057\u307e\u3059\u3002`example_simple_structured_grid.py` \u3092\u3001Julia\u306b\u79fb\u690d\u3057\u3066\u307f\u307e\u3059\u3002\n\n- Python\u30bd\u30fc\u30b9: http://docs.enthought.com/mayavi/mayavi/auto/example_simple_structured_grid.html#example-simple-structured-grid\n- Julia \u30bd\u30fc\u30b9: https://gist.github.com/d0c2c1c9a6fdb04c258f1961d559ee3b\n\n```Julia\n# x, y, z = mgrid[1:6:11j, 0:4:13j, 0:3:6j]\nx = [ x1 for x1 in linspace(1.0,6.0,11), y1 in linspace(0.0,4.0,13), z1 in linspace(0.0,3.0,6) ]\ny = [ y1 for x1 in linspace(1.0,6.0,11), y1 in linspace(0.0,4.0,13), z1 in linspace(0.0,3.0,6) ]\nz = [ z1 for x1 in linspace(1.0,6.0,11), y1 in linspace(0.0,4.0,13), z1 in linspace(0.0,3.0,6) ]\nbase=x[:,:,1] + y[:,:,1]\nfor i in 1:size(z)[3]\n  z[:,:, i] = base[:,:] * 0.25 * (i-1)\nend\n\npts=zeros(Float64, tuple(size(z)...,3))\npts[:,:,:,1] = x\npts[:,:,:,2] = y\npts[:,:,:,3] = z\nscalars1 = x .* x + y .* y + z .* z\n\nvectors1=zeros(Float64, tuple(size(z)...,3))\nvectors1[:,:,:,1] = (4.0 - y * 2.0)\nvectors1[:,:,:,2] = (x * 3.0 - 12.0)\nvectors1[:,:,:,3] = sin(z * pi)\n\n# pts = pts.transpose(2, 1, 0, 3).copy()\n# pts= permutedims(pts, [3,2,1,4] )\n# pts= reshape(pts, ( prod(size(pts)[1:3]), 3))\n\n# vectors1= permutedims(vectors1, [3,2,1,4] )\n# vectors1= reshape(vectors1, ( prod(size(vectors1)[1:3]), 3))\n\nusing PyCall\n@pyimport tvtk.api as tvtk_api\n\n# Create the dataset.vec\nsg=tvtk_api.tvtk[:StructuredGrid](dimensions=size(x), points=pts)\nsg[:point_data][:scalars] = vec(scalars1)\nsg[:point_data][:scalars][:name] = \"temperature\"\nsg[:point_data][:vectors] = vectors1\nsg[:point_data][:vectors][:name] = \"velocity\"\n\n@pyimport mayavi.mlab as mlab\n\nd = mlab.pipeline[:add_dataset](sg)\ngx = mlab.pipeline[:grid_plane](d)\ngy = mlab.pipeline[:grid_plane](d)\ngy[:grid_plane][:axis] = \"y\"\ngz = mlab.pipeline[:grid_plane](d)\ngz[:grid_plane][:axis] = \"z\"\niso = mlab.pipeline[:iso_surface](d)\niso[:contour][:maximum_contour] = 75.0\nvec1 = mlab.pipeline[:vectors](d)\nvec1[:glyph][:mask_input_points] = true\nvec1[:glyph][:glyph][:scale_factor] = 1.5\n\nmlab.show()\n```\n\n- \u5b9f\u884c\u7d50\u679c (\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8)\n<img width=\"512\" alt=\"scr-python-structured-grid-1.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/103217/32e19a07-ae6e-a889-cae1-5d8d31ada36e.png\">\n\n- Python\u306e\u5b9f\u884c\u7d50\u679c (\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8)\n<img width=\"512\" alt=\"scr-python-structured-grid-1.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/103217/4e33c5c9-dc7e-f8ef-db94-ccb101b972be.png\">\n\n\u3000\uff13\u6b21\u5143\u683c\u5b50\u3092\u4f5c\u308a\u307e\u3059 (StructuredGrid)\u3002\u305d\u306e\u5404\u70b9\u3067\u3001\u30b9\u30ab\u30e9\u30fc\u5024(scalar1)\u3068\u30d9\u30af\u30c8\u30eb\u5024(vector1)\u3092\u5272\u308a\u3042\u3066\u307e\u3059 (point_data)\u3002\u3053\u308c\u3092\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306b\u6d41\u3057\u8fbc\u3093\u3067\u3001\u7b49\u5024\u9762(iso_surface)\u3068\u30d9\u30af\u30c8\u30eb(vectors)\u3092\u63cf\u753b\u3057\u307e\u3059\u3002\u307e\u305f\u3001x=0, y=0, z=0 \u306e\u9762\u3082\u63cf\u753b\u3057\u307e\u3059 (grid_plane\uff09\u3002\n\u3000vtk \u306b\u5ea7\u6a19\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u308b\u3068\u304d\u306f\u3001\u6700\u521d\u306bx, \u6b21\u306b y\u3001\u6700\u5f8c\u306b z \u304c\u52d5\u304f\u3088\u3046\u306b\u914d\u5217\u3092\u4e0e\u3048\u307e\u3059 (column major)\u3002python-numpy \u306f row-major \u3067\u3059\u304b\u3089\u3001\u5143\u306e python \u30bd\u30fc\u30b9\u3067\u306f\u683c\u7d0d\u9806\u3092\u5165\u308c\u66ff\u3048\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306b\u5bfe\u3057\u3066\u3001Julia \u306f\u3001column major \u3067\u3059\u304b\u3089\u3001\u305d\u306e\u307e\u307e\u3067\u5927\u4e08\u592b\u3067\u3059\u3002 (\u53c2\u8003 [Row-major order\u3068Column-major order](http://qiita.com/niusounds/items/65099654673f5df3be9b) )\n\u3000\u3061\u306a\u307f\u306b\u3001Python \u306e `numpy.transpose` \u547d\u4ee4\u3092\u3001\u591a\u6b21\u5143\u914d\u5217\u306e\u8ef8\u3092\u5165\u308c\u66ff\u3048\u308b\u306e\u306b\u4f7f\u3048\u307e\u3059\u3002 Julia\u306e `transpose` \u306f \u884c\u5217(2\u6b21\u5143\u914d\u5217)\u306e\u884c\u3068\u5217\u3092\u5165\u308c\u66ff\u3048\u308b\u3060\u3051\u3067\u3001\u591a\u6b21\u5143\u914d\u5217\u306b\u306f\u4f7f\u3048\u307e\u305b\u3093\u3002Julia \u3067\u591a\u6b21\u5143\u914d\u5217\u306e\u8ef8\u3092\u5165\u308c\u66ff\u3048\u308b\u306b\u306f `permutedims` \u3092\u4f7f\u3044\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u4e8c\u3064\u304c\u7b49\u4fa1\u3068\u306a\u308a\u307e\u3059 (Julia\u3067\u306f\u3001\u8ef8\u3082 1 \u304b\u3089\u6570\u3048\u307e\u3059)\u3002\n\n```Python\na = a.transpose(2, 1, 0, 3).copy()\n```\n\n```Julia\na = permutedims(a, [3,2,1,4] )\n# \u914d\u5217\u3092\u66f8\u304d\u63db\u3048\u308b\u5834\u5408\npermutedims!(a, [3,2,1,4] )\n```\n\n\u3000tips \u3092\u3044\u304f\u3064\u304b\u3002\n\u3000tuple \u306e\u5165\u308c\u5b50\u306f\u5c55\u958b\u3057\u307e\u305b\u3093\u3002\u5c55\u958b\u3059\u308b\u306b\u306f `...` \u3092\u4ed8\u3051\u307e\u3059\u3002splat construct \u3068\u3044\u3044\u307e\u3059\u3002\n\n```Julia\njulia> ((1,2),(3,4))\n((1,2),(3,4))\n\njulia> ((1,2)...,(3,4))\n(1,2,(3,4))\n\njulia> ((1,2),(3,4)...)\n((1,2),3,4)\n\njulia> ((1,2)...,(3,4)...)\n(1,2,3,4)\n```\n\n\u3000\u591a\u6b21\u5143\u914d\u5217 `a` \u306b\u5bfe\u3057\u3066\u3001Python-numpy\u306e `a.shape` \u306f Julia \u306e `size(a)`\u3067\u3059\u3002\n\n\n# \u7d42\u308f\u308a\u306b\n\n\u3000\u4ee5\u4e0a\u3001\u99c6\u3051\u8db3\u3067\u3001Mayavi \u3092 Julia \u3067\u4f7f\u3046\u4f8b\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\u3002 \u591a\u304f\u306e\u5834\u5408 Python\u30bd\u30fc\u30b9\u3092\u898b\u306a\u304c\u3089\u3001\u307b\u307c\u6a5f\u68b0\u7684\u306b\u66f8\u304d\u63db\u3048\u308c\u3070\u3088\u3044\u3053\u3068\u3092\u793a\u3057\u307e\u3057\u305f\u3002\n\u3000\u3055\u3066\u3001Mayavi \u3092 Jupyter \u306e\u4e2d\u3067\u8868\u793a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u5225\u306e\u8a18\u4e8b\u3067\u7d39\u4ecb\u3059\u308b\u4e88\u5b9a\u3067\u3059\u3002-> \u66f8\u304d\u307e\u3057\u305f\u3002[[Python, Julia] Jupyter \u3067 3D \u8868\u793a - Mayavi \u30e9\u30a4\u30d6\u30e9\u30ea](http://qiita.com/tenfu2tea/items/088b750f0204debe4f7f)\n \n"}