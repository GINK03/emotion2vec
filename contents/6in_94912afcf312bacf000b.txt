{"context": "\n\n\u6982\u8981\nnim\u306ePure\u5b9f\u88c5\u3055\u308c\u305fasynchttpserver\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u904a\u3093\u3067\u307f\u3088\u3046\u3068\u3057\u305f\u3089\u3001\u30b3\u30a2\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u30d1\u30c3\u30c1\u5165\u308c\u308b\u3053\u3068\u306b\u306a\u3063\u305f\n\n\u307e\u305a\u306f\u30b3\u30fc\u30c9\n\u30b5\u30fc\u30d0\u30fc\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u52d5\u304b\u3057\u306a\u304c\u3089\u3001Request\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u4f55\u304c\u5165\u3063\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\u3057\u3088\u3046\u3068\u3057\u305f\u306e\u3067\u3059\u304c\u3001\u30d8\u30c3\u30c0\u30fc\u3092\u30c0\u30f3\u30d7\u3057\u3088\u3046\u3068\u3057\u305f\u3089\u3001\u30d8\u30c3\u30c0\u30fc\u306e\u30ad\u30fc\u540d\u3092\u53d6\u5f97\u3067\u304d\u308bapi\u304c\u898b\u3064\u304b\u3089\u305a\u30fb\u30fb\u30fb\n\u306a\u3044\u306a\u3089\u4f5c\u3063\u3066\u3057\u307e\u3048\u3068\u3044\u3046\u3053\u3068\u3067\u3001httpcore.nim\u306b\u30d1\u30c3\u30c1\u3068\u3057\u3066\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u8ffd\u52a0\u3057\u3001nimcache\u3092\u30af\u30ea\u30a2\u3057\u3066\u518d\u30b3\u30f3\u30d1\u30a4\u30eb\u3002\n\n\u30d1\u30c3\u30c1\u30bd\u30fc\u30b9\n\n${nim_dir}/lib/pure/httpcore.nim\n\nproc keys*(headers: HttpHeaders): seq[string] =\n  ## Returns headers key  \n  var ret:seq[string] = @[]\n  for key in  headers.table.keys:\n    ret.add(key)\n  return ret\n]#\n\n\n\n\u30b5\u30f3\u30d7\u30eb\n\nhttpserver_test.nim\n\nimport asynchttpserver, asyncdispatch\nimport sequtils\nimport strutils\n\n# \u30b5\u30fc\u30d0\u30fc\u4f5c\u6210\nvar server = newAsyncHttpServer()\n\n# \u51e6\u7406\u30cf\u30f3\u30c9\u30e9\nproc cb(req: Request) {.async.} =\n  echo \"Headers = \" , $req.headers.keys() # !! \u3053\u306ekeys()\u3092\u8ffd\u52a0\u3057\u305f\n  echo \"Protocol = \" , req.protocol\n  echo \"Url = \" , $req.url\n  echo \"HttpMethod = \" , req.reqMethod\n  echo \"HostName = \" , req.hostname\n  echo \"Body = \" , req.body\n\n  await req.respond(Http200, \"Hello World\")\n\n# \u305a\u3063\u3068\u5f85\u3064\nwaitFor server.serve(Port(8080), cb) \n\n\n\ncurl\u30b3\u30de\u30f3\u30c9\u3067\u3001POST\u3092\u5b9f\u884c\u3059\u308b\n$ curl -v -H \"Accept: application/json\" -H \"Content-type: application/json\" -X POST -d '{\"user\":{\"first_name\":\"firstname\",\"last_name\":\"lastname\",\"email\":\"email@email.com\",\"password\":\"app123\",\"password_confirmation\":\"app123\"}}'  http://localhost:8080/api/1/users\nNote: Unnecessary use of -X or --request, POST is already inferred.\n*   Trying ::1...\n* connect to ::1 port 8080 failed: Connection refused\n*   Trying 127.0.0.1...\n* Connected to localhost (127.0.0.1) port 8080 (#0)\n> POST /api/1/users HTTP/1.1\n> Host: localhost:8080\n> User-Agent: curl/7.47.1\n> Accept: application/json\n> Content-type: application/json\n> Content-Length: 137\n> \n* upload completely sent off: 137 out of 137 bytes\n< HTTP/1.1 200 OK\n< Content-Length: 11\n< \n* Connection #0 to host localhost left intact\nHello World\n\n\n\nnim\u5074\u306e\u8868\u793a\nHeaders = @[content-length, user-agent, accept, content-type, host]\nProtocol = (orig: HTTP/1.1, major: 1, minor: 1)\nUrl = (scheme: , username: , password: , hostname: , port: , path: /api/1/users, query: , anchor: , opaque: false)\nHttpMethod = POST\nHostName = 127.0.0.1\nBody = {\"user\":{\"first_name\":\"firstname\",\"last_name\":\"lastname\",\"email\":\"email@email.com\",\"password\":\"app123\",\"password_confirmation\":\"app123\"}}\n\n\n\n\u672c\u6765\u306e\u76ee\u7684\u306b\u306f\u5c4a\u304b\u306a\u304b\u3063\u305f\u3051\u3069\u30fb\u30fb\u30fb\n\u3042\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30bd\u30fc\u30b9\u3082\u4fee\u6b63\u3067\u304d\u3061\u3083\u3046\u306e\u306d\u30fb\u30fb\u3068\u3044\u3046\u9a5a\u304d\u3067\u3057\u305f\n\n# \u6982\u8981\n\nnim\u306ePure\u5b9f\u88c5\u3055\u308c\u305fasynchttpserver\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u904a\u3093\u3067\u307f\u3088\u3046\u3068\u3057\u305f\u3089\u3001\u30b3\u30a2\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u30d1\u30c3\u30c1\u5165\u308c\u308b\u3053\u3068\u306b\u306a\u3063\u305f\n\n## \u307e\u305a\u306f\u30b3\u30fc\u30c9\n\n\u30b5\u30fc\u30d0\u30fc\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u52d5\u304b\u3057\u306a\u304c\u3089\u3001Request\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u4f55\u304c\u5165\u3063\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\u3057\u3088\u3046\u3068\u3057\u305f\u306e\u3067\u3059\u304c\u3001\u30d8\u30c3\u30c0\u30fc\u3092\u30c0\u30f3\u30d7\u3057\u3088\u3046\u3068\u3057\u305f\u3089\u3001\u30d8\u30c3\u30c0\u30fc\u306e\u30ad\u30fc\u540d\u3092\u53d6\u5f97\u3067\u304d\u308bapi\u304c\u898b\u3064\u304b\u3089\u305a\u30fb\u30fb\u30fb\n\n\u306a\u3044\u306a\u3089\u4f5c\u3063\u3066\u3057\u307e\u3048\u3068\u3044\u3046\u3053\u3068\u3067\u3001httpcore.nim\u306b\u30d1\u30c3\u30c1\u3068\u3057\u3066\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u8ffd\u52a0\u3057\u3001nimcache\u3092\u30af\u30ea\u30a2\u3057\u3066\u518d\u30b3\u30f3\u30d1\u30a4\u30eb\u3002\n\n### \u30d1\u30c3\u30c1\u30bd\u30fc\u30b9\n\n```nim:${nim_dir}/lib/pure/httpcore.nim\n\nproc keys*(headers: HttpHeaders): seq[string] =\n  ## Returns headers key  \n  var ret:seq[string] = @[]\n  for key in  headers.table.keys:\n    ret.add(key)\n  return ret\n]#\n```\n\n### \u30b5\u30f3\u30d7\u30eb\n\n```nim:httpserver_test.nim\n\nimport asynchttpserver, asyncdispatch\nimport sequtils\nimport strutils\n\n# \u30b5\u30fc\u30d0\u30fc\u4f5c\u6210\nvar server = newAsyncHttpServer()\n\n# \u51e6\u7406\u30cf\u30f3\u30c9\u30e9\nproc cb(req: Request) {.async.} =\n  echo \"Headers = \" , $req.headers.keys() # !! \u3053\u306ekeys()\u3092\u8ffd\u52a0\u3057\u305f\n  echo \"Protocol = \" , req.protocol\n  echo \"Url = \" , $req.url\n  echo \"HttpMethod = \" , req.reqMethod\n  echo \"HostName = \" , req.hostname\n  echo \"Body = \" , req.body\n\n  await req.respond(Http200, \"Hello World\")\n\n# \u305a\u3063\u3068\u5f85\u3064\nwaitFor server.serve(Port(8080), cb) \n\n```\n\ncurl\u30b3\u30de\u30f3\u30c9\u3067\u3001POST\u3092\u5b9f\u884c\u3059\u308b\n\n```shell-session\n$ curl -v -H \"Accept: application/json\" -H \"Content-type: application/json\" -X POST -d '{\"user\":{\"first_name\":\"firstname\",\"last_name\":\"lastname\",\"email\":\"email@email.com\",\"password\":\"app123\",\"password_confirmation\":\"app123\"}}'  http://localhost:8080/api/1/users\nNote: Unnecessary use of -X or --request, POST is already inferred.\n*   Trying ::1...\n* connect to ::1 port 8080 failed: Connection refused\n*   Trying 127.0.0.1...\n* Connected to localhost (127.0.0.1) port 8080 (#0)\n> POST /api/1/users HTTP/1.1\n> Host: localhost:8080\n> User-Agent: curl/7.47.1\n> Accept: application/json\n> Content-type: application/json\n> Content-Length: 137\n> \n* upload completely sent off: 137 out of 137 bytes\n< HTTP/1.1 200 OK\n< Content-Length: 11\n< \n* Connection #0 to host localhost left intact\nHello World\n\n```\n\n# nim\u5074\u306e\u8868\u793a\n\n```\nHeaders = @[content-length, user-agent, accept, content-type, host]\nProtocol = (orig: HTTP/1.1, major: 1, minor: 1)\nUrl = (scheme: , username: , password: , hostname: , port: , path: /api/1/users, query: , anchor: , opaque: false)\nHttpMethod = POST\nHostName = 127.0.0.1\nBody = {\"user\":{\"first_name\":\"firstname\",\"last_name\":\"lastname\",\"email\":\"email@email.com\",\"password\":\"app123\",\"password_confirmation\":\"app123\"}}\n\n```\n\n## \u672c\u6765\u306e\u76ee\u7684\u306b\u306f\u5c4a\u304b\u306a\u304b\u3063\u305f\u3051\u3069\u30fb\u30fb\u30fb\n\n\u3042\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30bd\u30fc\u30b9\u3082\u4fee\u6b63\u3067\u304d\u3061\u3083\u3046\u306e\u306d\u30fb\u30fb\u3068\u3044\u3046\u9a5a\u304d\u3067\u3057\u305f\n\n\n", "tags": ["Nim"]}