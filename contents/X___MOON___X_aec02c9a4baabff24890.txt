{"context": " More than 1 year has passed since last update.gauche\u3067\u3002\nscheme\u521d\u5fc3\u8005\u306a\u306e\u3067\u3082\u3046\u3061\u3087\u3044\u8272\u3005\u306a\u5b9f\u88c5\u898b\u3066\u307f\u305f\u3044\u306a\u3041\uff08\u30c1\u30e9\n(use util.queue)\n(use math.mt-random)\n(define mt (make <mersenne-twister> :seed (sys-time)))\n\n(define (doudesuka? arr-src)\n  (define (get-one lst)\n    (let loop ((c (mt-random-integer mt 4)) (arr lst))\n      (if (= c 0)\n          (car arr)\n          (loop (- c 1) (cdr arr)))))\n  (define q (list->queue (list (get-one arr-src)\n                               (get-one arr-src)\n                               (get-one arr-src)\n                               (get-one arr-src))))\n  (let loop ((d \"\") (sum-chars 0) (chk-lst q))\n    (if (equal? (queue->list q) arr-src)\n        (begin\n          (map (lambda (x) (set! sum-chars (+ sum-chars (string-length x)))) arr-src)\n          (map (lambda (x) (display x)) (queue->list q))\n          (newline)\n          (print sum-chars \"\u6587\u5b57\u3067\u717d\u3089\u308c\u307e\u3057\u305f\u3002\" arr-src \"!!!\"))\n        (begin\n          (display (set! d (dequeue! q)))\n          (loop d (+ sum-chars (string-length d)) (enqueue! q (get-one arr-src)))\n          ))))\n\n(doudesuka? '(\"\u9032\u6357\" \"\u3069\u3046\" \"\u3067\u3059\" \"\u304b\"))\n\n\n\u9032\u6357\u9032\u6357\u9032\u6357\u9032\u6357\u3069\u3046\u9032\u6357\u3069\u3046\u3067\u3059\u3069\u3046\u3069\u3046\u3069\u3046\u3069\u3046\u3067\u3059\u9032\u6357\u3067\u3059\u3067\u3059\u3069\u3046\u304b\u3069\u3046\u9032\u6357\u304b\u9032\u6357\u304b\u9032\u6357\u304b\u304b\u304b\u9032\u6357\u9032\u6357\u304b\u304b\u3069\u3046\u3067\u3059\u304b\u3067\u3059\u304b\u3069\u3046\u3067\u3059\u3069\u3046\u304b\u3067\u3059\u3069\u3046\u9032\u6357\u9032\u6357\u304b\u3069\u3046\u9032\u6357\u3067\u3059\u304b\u9032\u6357\u3067\u3059\u3067\u3059\u304b\u3069\u3046\u9032\u6357\u3067\u3059\u3067\u3059\u304b\u3067\u3059\u9032\u6357\u9032\u6357\u304b\u9032\u6357\u304b\u9032\u6357\u304b\u9032\u6357\u3069\u3046\u9032\u6357\u3067\u3059\u9032\u6357\u9032\u6357\u3067\u3059\u9032\u6357\u3067\u3059\u304b\u304b\u3069\u3046\u3069\u3046\u9032\u6357\u304b\u9032\u6357\u3069\u3046\u9032\u6357\u3067\u3059\u3069\u3046\u9032\u6357\u304b\u9032\u6357\u9032\u6357\u3067\u3059\u3069\u3046\u9032\u6357\u304b\u3069\u3046\u3069\u3046\u3069\u3046\u9032\u6357\u3069\u3046\u3067\u3059\u304b\n178\u6587\u5b57\u3067\u717d\u3089\u308c\u307e\u3057\u305f\u3002(\u9032\u6357 \u3069\u3046 \u3067\u3059 \u304b)!!!\n\ngauche\u3067\u3002\nscheme\u521d\u5fc3\u8005\u306a\u306e\u3067\u3082\u3046\u3061\u3087\u3044\u8272\u3005\u306a\u5b9f\u88c5\u898b\u3066\u307f\u305f\u3044\u306a\u3041\uff08\u30c1\u30e9\n\n```scm\n(use util.queue)\n(use math.mt-random)\n(define mt (make <mersenne-twister> :seed (sys-time)))\n\n(define (doudesuka? arr-src)\n  (define (get-one lst)\n    (let loop ((c (mt-random-integer mt 4)) (arr lst))\n      (if (= c 0)\n          (car arr)\n          (loop (- c 1) (cdr arr)))))\n  (define q (list->queue (list (get-one arr-src)\n                               (get-one arr-src)\n                               (get-one arr-src)\n                               (get-one arr-src))))\n  (let loop ((d \"\") (sum-chars 0) (chk-lst q))\n    (if (equal? (queue->list q) arr-src)\n        (begin\n          (map (lambda (x) (set! sum-chars (+ sum-chars (string-length x)))) arr-src)\n          (map (lambda (x) (display x)) (queue->list q))\n          (newline)\n          (print sum-chars \"\u6587\u5b57\u3067\u717d\u3089\u308c\u307e\u3057\u305f\u3002\" arr-src \"!!!\"))\n        (begin\n          (display (set! d (dequeue! q)))\n          (loop d (+ sum-chars (string-length d)) (enqueue! q (get-one arr-src)))\n          ))))\n\n(doudesuka? '(\"\u9032\u6357\" \"\u3069\u3046\" \"\u3067\u3059\" \"\u304b\"))\n```\n\n>\u9032\u6357\u9032\u6357\u9032\u6357\u9032\u6357\u3069\u3046\u9032\u6357\u3069\u3046\u3067\u3059\u3069\u3046\u3069\u3046\u3069\u3046\u3069\u3046\u3067\u3059\u9032\u6357\u3067\u3059\u3067\u3059\u3069\u3046\u304b\u3069\u3046\u9032\u6357\u304b\u9032\u6357\u304b\u9032\u6357\u304b\u304b\u304b\u9032\u6357\u9032\u6357\u304b\u304b\u3069\u3046\u3067\u3059\u304b\u3067\u3059\u304b\u3069\u3046\u3067\u3059\u3069\u3046\u304b\u3067\u3059\u3069\u3046\u9032\u6357\u9032\u6357\u304b\u3069\u3046\u9032\u6357\u3067\u3059\u304b\u9032\u6357\u3067\u3059\u3067\u3059\u304b\u3069\u3046\u9032\u6357\u3067\u3059\u3067\u3059\u304b\u3067\u3059\u9032\u6357\u9032\u6357\u304b\u9032\u6357\u304b\u9032\u6357\u304b\u9032\u6357\u3069\u3046\u9032\u6357\u3067\u3059\u9032\u6357\u9032\u6357\u3067\u3059\u9032\u6357\u3067\u3059\u304b\u304b\u3069\u3046\u3069\u3046\u9032\u6357\u304b\u9032\u6357\u3069\u3046\u9032\u6357\u3067\u3059\u3069\u3046\u9032\u6357\u304b\u9032\u6357\u9032\u6357\u3067\u3059\u3069\u3046\u9032\u6357\u304b\u3069\u3046\u3069\u3046\u3069\u3046\u9032\u6357\u3069\u3046\u3067\u3059\u304b\n>178\u6587\u5b57\u3067\u717d\u3089\u308c\u307e\u3057\u305f\u3002(\u9032\u6357 \u3069\u3046 \u3067\u3059 \u304b)!!!\n\n", "tags": ["Scheme", "Gauche"]}