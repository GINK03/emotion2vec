{"context": "\n\n\u306f\u3058\u3081\u306b\n\u5e73\u621028\u5e744\u6708\u3001ISLisp\u306e\u3053\u3068\u3092\u77e5\u308a\u307e\u3057\u305f\u3002\u305d\u308c\u307e\u3067\u540d\u524d\u3060\u3051\u306f\u77e5\u3063\u3066\u3044\u305f\u3082\u306e\u306e\u3001\u305d\u306e\u8a73\u7d30\u306f\u77e5\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u6e6f\u6d45\u5148\u751f\u306a\u3069\u65e5\u672c\u4eba\u7814\u7a76\u8005\u306e\u65b9\u3005\u304c\u95a2\u308f\u3063\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u304b\u3089\u8208\u5473\u304c\u308f\u304d\u3001\u898f\u683c\u66f8\u3092\u8aad\u3093\u3067\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\u8aad\u307f\u9032\u3081\u308b\u3046\u3061\u306b\u3001ISLisp\u306f\u30b3\u30f3\u30d1\u30af\u30c8\u3067\u4e00\u8cab\u6027\u306e\u3042\u308b\u512a\u308c\u305f\u8a2d\u8a08\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u3066\u304d\u307e\u3057\u305f\u3002\u7b2c\u4e00\u4eba\u8005\u3067\u3042\u308b\u4e94\u5473\u5148\u751f\u306e\u52a9\u8a00\u3092\u53d7\u3051\u3064\u3064\u30018\u6708\u9803\u306b\u306f\u81ea\u4f5c\u306eEasy\uff0dISLisp\uff08\u7565\u79f0EISL)\u304c\u5b8c\u6210\u3057\u307e\u3057\u305f\u3002\n\u307e\u305f\u3001\u3053\u306e\u9803\u3001\u6df1\u5c64\u5b66\u7fd2\u306e\u3053\u3068\u3092\u72ec\u5b66\u3057\u3066\u304a\u308a\u3001\u5ca1\u8c37\u5148\u751f\u306e\u672c\u3092\u8aad\u307f\u3064\u3064\u81ea\u5206\u3067\u3082\u6df1\u5c64\u5b66\u7fd2\u306e\u4ed5\u7d44\u307f\u3092\u5b9f\u88c5\u3057\u305f\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3057\u305f\u3002\u6df1\u5c64\u5b66\u7fd2\u306b\u304a\u3044\u3066\u306f\u5927\u91cf\u306e\u884c\u5217\u8a08\u7b97\u304c\u5fc5\u8981\u3067\u3042\u308a\u3001GPU\u304c\u5fc5\u8981\u3067\u3057\u305f\u3002CUDA\u3092\u4f7f\u3046\u3068\u3057\u3066\u3001C\u8a00\u8a9e\u306b\u3088\u308b\u8a18\u8ff0\u306b\u306f\u624b\u9593\u304c\u304b\u304b\u308a\u3001\u8a66\u884c\u932f\u8aa4\u306e\u305f\u3081\u306b\u30b3\u30fc\u30c9\u3092\u4fee\u6b63\u3059\u308b\u3053\u3068\u304c\u5104\u52ab\u3067\u3057\u305f\u3002\u305d\u3053\u3067\u3061\u3087\u3046\u3069\u5b8c\u6210\u3057\u305fEISL\u306bGPU\u3092\u4f7f\u3046\u72ec\u81ea\u6a5f\u80fd\u3092\u8ffd\u52a0\u3001ISLisp\u3067\u6df1\u5c64\u5b66\u7fd2\u306e\u5b9f\u9a13\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\nISLisp\u306e\u7279\u9577\nCommon Lisp\u3092\u30d9\u30fc\u30b9\u306b\u3057\u3064\u3064\u3082\u3001Scheme\u3084EULisp\u306e\u826f\u3055\u3082\u53d6\u308a\u8fbc\u3093\u3067\u3044\u307e\u3059\u3002\u30b5\u30a4\u30ba\u304c\u5c0f\u3055\u304f\u5b66\u7fd2\u7528\u3001\u7814\u7a76\u7528\u306b\u5411\u3044\u3066\u3044\u307e\u3059\u3002CLOS\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u3067\u3042\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u30b7\u30b9\u30c6\u30e0ILOS\u3092\u542b\u307f\u307e\u3059\u3002\u8a2d\u8a08\u304c\u6bd4\u8f03\u7684\u65b0\u3057\u3044\u305f\u3081\u30a8\u30e9\u30fc\u51e6\u7406\u304c\u5145\u5b9f\u3057\u3066\u3044\u307e\u3059\u3002\u5168\u4f53\u3068\u3057\u3066\u30b3\u30f3\u30d1\u30af\u30c8\u3067\u4e00\u8cab\u6027\u304c\u3042\u308bLisp\u56fd\u969b\u6a19\u6e96\u898f\u683c\u3067\u3059\u3002\n\nCUDA\u306e\u5c0e\u5165\n\u30b2\u30fc\u30e0\u7528GTX960GPU\u3092\u642d\u8f09\u3057\u305fWindows\u30de\u30b7\u30f3\u3092\u5c0e\u5165\u3057\u307e\u3057\u305f\u3002CUDA\u306fWindows\u3068Linux\u3067\u5229\u7528\u53ef\u80fd\u3067\u3059\u304c\u3001Windows\u3067\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002Windows\u3067\u4f7f\u3046\u5834\u5408\u3001GCC\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u304a\u3089\u305a\u3001\u30de\u30a4\u30af\u30ed\u30bd\u30d5\u30c8\u306eVC\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\u30022013\u7248\u306eVisualStudio\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002CUDA\u306f\u6700\u65b0\u7248\u306eVisualStudio\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u305b\u3093\u3002\u305d\u306e\u5f8c\u306b\u3001NVIDIA\u793e\u306e\u30da\u30fc\u30b8\u3088\u308aCUDA\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3057\u305f\u3002\n\nEISL\u3078\u306eCUDA\u306e\u7d44\u307f\u8fbc\u307f\n\u81ea\u4f5c\u306eISLisp\u51e6\u7406\u7cfb\uff08\u4ee5\u4e0b\u300cEISL]\uff09\u306f\u6a19\u6e96\u7684\u306aC\u8a00\u8a9e\u306e\u6a5f\u80fd\u3057\u304b\u4f7f\u3063\u3066\u3044\u307e\u305b\u3093\u3002\u3044\u304f\u3064\u304b\u306e\u4fee\u6b63\u3092\u3057\u3066VC\u3067\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u53ef\u80fd\u3068\u3057\u307e\u3057\u305f\u3002\u3055\u3089\u306b\u3001CUDA\u306b\u542b\u307e\u308c\u308bCUBLAS\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u53d6\u308a\u8fbc\u307f\u307e\u3059\u3002\n\u72ec\u81ea\u62e1\u5f35\u95a2\u6570\u3092\u8a18\u8ff0\u3057\u305fC\u30d5\u30a1\u30a4\u30eb\u306e\u30d8\u30c3\u30c0\u306b\n\u3000#include <cublas.h>\u3000\n\n\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u3053\u308c\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u306b\u306fNVIDIA\u306e\u63d0\u4f9b\u3057\u3066\u3044\u308bNVCC\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u4f7f\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u6b21\u306e\u3088\u3046\u306b\u3057\u3066\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4e0e\u3048\u307e\u3059\u3002\nnvcc extension.c  -c -lcublas\n\nEISL\u306f\u3044\u304f\u3064\u304b\u306e\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u6210\u3063\u3066\u304a\u308a\u3001\u305d\u308c\u3089\u3092\u30ea\u30f3\u30af\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3057\u305f\u3002\u8a66\u884c\u932f\u8aa4\u3057\u3066\u307f\u308b\u3068NVCC\u306f\u30ea\u30f3\u30ab\u306e\u6a5f\u80fd\u3082\u542b\u3093\u3067\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u3066\u304d\u307e\u3057\u305f\u3002CUBLAS\u3092\u4f7f\u7528\u3057\u306a\u3044\u4ed6\u306e\u30d5\u30a1\u30a4\u30eb\u3082NVCC\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u30ea\u30f3\u30af\u3059\u308c\u3070\u3044\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3057\u305f\u3002\u6b21\u306e\u30d0\u30c3\u30c1\u30d5\u30a1\u30a4\u30eb\u306b\u3057\u307e\u3057\u305f\u3002\nnvcc -O2 -c main.c\nnvcc -O2 -c function.c\nnvcc -O2 -c data.c\nnvcc -O2 -c gbc.c\nnvcc -O2 -c cell.c\nnvcc -O2 -c syntax.c\nnvcc -O2 -c bignum.c\nnvcc -O2 -c compute.c\nnvcc -O2 -c error.c\nnvcc extension.c  -c -lcublas\n\nnvcc main.obj function.obj data.obj gbc.obj cell.obj syntax.obj bignum.obj compute.obj error.obj extension.obj -lcublas -o eisl.exe\n\n\u3053\u308c\u306b\u3088\u308aCUBLAS\u306b\u3088\u308b\u72ec\u81ea\u62e1\u5f35\u95a2\u6570\u3092\u542b\u3093\u3060EISL\u304c\u8d77\u52d5\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\neisl\nEasy-ISLisp Ver0.42\n> \n\n\n\n\u72ec\u81ea\u62e1\u5f35\u95a2\u6570\n\u307e\u305a\u306f\u5358\u7d14\u306a\u884c\u5217\u3068\u884c\u5217\u306e\u7a4d\u3092\u8a08\u7b97\u3059\u308b\u3082\u306e\u3092\u4f5c\u3063\u3066\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002 (set-matmat c a b)\u3068\u3044\u3046\u95a2\u6570\u3067a,b,c\u306b\u306f\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u3092\u8981\u7d20\u3068\u3059\u308b2\u6b21\u5143\u914d\u5217\u3092\u3068\u308a\u307e\u3059\u30022\u6b21\u5143\u914d\u5217\u3092\u884c\u5217\u3068\u307f\u3066a*b\u306e\u7d50\u679c\u3092C\u306b\u7834\u58ca\u7684\u4ee3\u5165\u3057\u307e\u3059\u3002Lisp\u3067\u306f\u57fa\u672c\u7684\u306b\u5024\u3092\u751f\u6210\u3057\u3066\u8fd4\u3057\u3001\u7834\u58ca\u7684\u4ee3\u5165\u306f\u3057\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u5927\u304d\u306a\u884c\u5217\u306f\u30bb\u30eb\u3092\u5927\u91cf\u306b\u6d88\u8cbb\u3059\u308b\u3053\u3068\u304b\u3089\u7701\u30e1\u30e2\u30ea\u306e\u305f\u3081\u306b\u3001\u305d\u3046\u3057\u307e\u3057\u305f\u3002\nC\u8a00\u8a9e\u30b3\u30fc\u30c9\u306f\u9577\u3044\u306e\u3067\u3001\u5dfb\u672b\u306b\u63b2\u8f09\u3057\u307e\u3057\u305f\u3002\u4f7f\u3044\u65b9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\nEasy-ISLisp Ver0.42\n> (defglobal a #2a((1.0 2.0)(3.0 4.0)))\nA\n> (defglobal b #2a((3.0 2.0)(1.0 4.0)))\nB\n> (defglobal c (create-array '(2 2)))\nC\n> (set-matmat c a b)\nNIL\n> c\n#2a((5.0 10.0) (13.0 22.0))\n> \n\n\n\u9806\u4f1d\u64ad\u8a08\u7b97\nGPU\u3092\u5229\u7528\u3057\u305f\u884c\u5217\u8a08\u7b97\u307e\u3067\u306f\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002ISLisp\u304b\u3089CUDA\u3092\u547c\u3073\u51fa\u3059\u3068\u30bf\u30a4\u30e0\u30ed\u30b9\u304c\u767a\u751f\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u8a08\u7b97\u7d50\u679c\u3092\u305d\u306e\u90fd\u5ea6\u30bb\u30eb\u306b\u66f8\u304d\u8fbc\u3080\u306e\u3067\u306f\u7701\u30e1\u30e2\u30ea\u306e\u70b9\u3067\u3082\u4e0d\u5229\u3067\u3059\u3002\u305d\u3053\u3067\u3001\u6df1\u5c64\u5b66\u7fd2\u306e\u5165\u529b\u5c64\u304b\u3089\u51fa\u529b\u5c64\u3078\u304b\u3051\u3066\u306e\u9806\u4f1d\u64ad\u8a08\u7b97\u3092\u4e00\u6c17\u306bGPU\u3092\u4f7f\u3063\u3066\u3084\u3063\u3066\u3057\u307e\u3046\u72ec\u81ea\u62e1\u5f35\u95a2\u6570\u3092\u7528\u610f\u3059\u308b\u3053\u3068\u3068\u3057\u307e\u3057\u305f\u3002(forward w u fn) \u3068\u3044\u3046\u5f62\u5f0f\u3067\u3001w\u306f\u91cd\u307f\u884c\u5217\u3001u\u306f\u5165\u529b\u5c64\u53ca\u3073\u5404\u5c64\u306e\u51fa\u529b\uff08\u3064\u307e\u308a\u6b21\u306e\u5c64\u3078\u306e\u5165\u529b\uff09\u3092\u8a18\u61b6\u3059\u308b\u884c\u5217\u3001fn\u306f\u6d3b\u6027\u5316\u95a2\u6570\u3067\u3059\u3002\u30b3\u30fc\u30c9\u306f\u5dfb\u672b\u306b\u63b2\u8f09\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30c7\u30fc\u30bf\u69cb\u9020\n\u6df1\u5c64\u5b66\u7fd2\u306e\u6559\u79d1\u66f8\u3067\u306fw\u306f\u884c\u5217\u3001u\u306f\u30d9\u30af\u30c8\u30eb\u3067\u8868\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u524d\u8ff0\u3057\u305f\u3088\u3046\u306bforward\u3092\u7d44\u307f\u8fbc\u307f\u95a2\u6570\u306b\u3057\u3066\u8a08\u7b97\u901f\u5ea6\u3092\u7a3c\u304e\u305f\u3044\u3068\u601d\u3044\u307e\u3057\u305f\u3002\u4e00\u6c17\u306b\u8a08\u7b97\u3059\u308b\u305f\u3081\u306b\u5404\u5c64\u306ew\u884c\u5217\u3092\u3072\u3068\u307e\u3068\u3081\u306b\u3057\u3066\u30013\u6b21\u5143\u914d\u5217\u3001\u30c6\u30f3\u30bd\u30eb\u306e\u3088\u3046\u306a\u3082\u306e\u306b\u3057\u307e\u3057\u305f\u3002\u540c\u69d8\u306b\u5404\u5c64\u306eu\u30d9\u30af\u30c8\u30eb\u3082\u3072\u3068\u307e\u3068\u3081\u306b\u3057\u3066\u884c\u5217\u306b\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\n\uff57\u306fm*n\u884c\u5217\u3092l\u5c64\u5206\u91cd\u306d\u305f\u3082\u306e\u3068\u3057\u3066\u307e\u3059\u3002\n\nu\u884c\u5217\u306f\u30d9\u30af\u30c8\u30eb\u3092l\u5c64\u5206\u3001\u5bc4\u305b\u96c6\u3081\u305f\u884c\u5217\u3067\u3059\u3002\u7b2c0\u5217\u304c\u5165\u529b\u5c64\u3067\u3059\u3002\n\n\u8aa4\u5dee\u9006\u4f1d\u9054\u6cd5\u3000\u30c7\u30eb\u30bf\u8a08\u7b97\n\u4eca\u5ea6\u306f\u5b66\u7fd2\u306b\u3088\u308a\u91cd\u307f\u884c\u5217\u3092\u66f4\u65b0\u3057\u3066\u3044\u304f\u3053\u3068\u3092\u8003\u3048\u307e\u3059\u3002\u8aa4\u5dee\u9006\u4f1d\u64ad\u6cd5\u304c\u8a08\u7b97\u91cf\u306e\u7bc0\u7d04\u306e\u305f\u3081\u306b\u6709\u52b9\u3067\u3059\u3002\u3053\u308c\u3092ISLisp\u3067\u3069\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3059\u308b\u304b\u306b\u3064\u3044\u3066\u8003\u3048\u307e\u3057\u305f\u3002\u3053\u306e\u8a08\u7b97\u3067\u306f\u03b4\uff08\u30c7\u30eb\u30bf\uff09\u304c\u91cd\u8981\u306a\u5f79\u5272\u3092\u679c\u305f\u3057\u307e\u3059\u3002\n\n\u5ca1\u8c37\u5148\u751f\u306e\u672c\u306e\uff14\uff17\u30da\u30fc\u30b8\u306b\u3042\u308b\u03b4\u306e\u6570\u5f0f\u3067\u3059\u3002\u5404\u5c64\u3092\u8868\u3059\u3000\uff4c\uff08\u30a8\u30eb\uff09\u3092\u773a\u3081\u3066\u3044\u308b\u3068\u518d\u5e30\u69cb\u9020\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u51fa\u529b\u5c64\u3092\u8d77\u70b9\u306b\u3057\u3066\u305d\u306e\u3072\u3068\u3064\u524d\u306e\u5c64\u3092\u6c42\u3081\u308b\u3001\u3055\u3089\u306b\u305d\u308c\u3092\u57fa\u306b\u3057\u3066\u3082\u3046\u3072\u3068\u3064\u524d\u306e\u5c64\u3092\u6c42\u3081\u308b\u3002\u3053\u306e\u518d\u5e30\u3092ISLisp\u306b\u66f8\u304d\u76f4\u3057\u307e\u3057\u305f\u3002\n(defun calc-delta()\n  (for ((i 0 (+ i 1)))\n       ((> i m1))\n       (set-aref (- (aref U i (+ l1 1)) (aref d i)) delta i l1))\n  (for ((l (- l1 1) (- l 1)))\n       ((< l 0))\n       (for ((j 0 (+ j 1)))\n            ((> j n1))\n            (set-aref (* (funcall #'fdash (aref U j l))\n                         (for ((k 0 (+ k 1))\n                               (s 0 (+ s (* (aref delta k (+ l 1))\n                                            (aref w (+ l 1) k j)))))\n                              ((> k m1) s)))\n                            delta j l))))\n\n(defun fdash(x)\n  (* (logistic x)(- 1 (logistic x))))\n\n\n\nISLisp\u306f\u7e70\u308a\u8fd4\u3057\u306bfor\u3068\u3044\u3046\u69cb\u6587\u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u3002Scheme\u306edo\u3068\u540c\u69d8\u306e\u4ed5\u7d44\u307f\u3067\u3059\u3002\u6d3b\u6027\u5316\u95a2\u6570\u306b\u3068\u308a\u3042\u3048\u305a\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u95a2\u6570\u3092\u4e0e\u3048\u307e\u3057\u305f\u3002\n\u3053\u306e\u03b4\u8a08\u7b97\u304c\u3067\u304d\u308c\u3070\u91cd\u307f\u884c\u5217\u3092\u66f4\u65b0\u3057\u3066\u3044\u304f\u95a2\u6570\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n(defun backward()\n  (calc-delta)\n  (for ((l 0 (+ l 1)))\n       ((> l l1))\n       (for ((i 0 (+ i 1)))\n            ((> i m1))\n            (for ((j 0 (+ j 1)))\n                 ((> j n1))\n                 (set-aref (- (aref W l i j)\n                              (* (aref W l i j) larning-rate (aref delta j l)(aref U i l)))\n                           W l i j)))))\n\n(defglobal larning-rate 0.15)\n\n\nlarning-rate\u306f\u5b66\u7fd2\u4fc2\u6570\u3092\u8868\u3059\u5927\u57df\u5b9a\u7fa9\u5909\u6570\u3067\u3059\u3002\u8a66\u884c\u932f\u8aa4\u3057\u306a\u304c\u3089\u3044\u3058\u308a\u307e\u3059\u3002\n\n\u5b9f\u9a13\n\u3055\u3042\u3001\u3046\u307e\u304f\u52d5\u304f\u3082\u306e\u3067\u3057\u3087\u3046\u304b\u3002\u3068\u3082\u304b\u304f\u3084\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002ISLisp\u306e\u30b3\u30fc\u30c9\u306f\u6700\u5f8c\u306b\u63b2\u8f09\u3057\u307e\u3057\u305f\u3002\n\uff13\uff0a\uff13\u884c\u5217\u306e3\u5c64\u306e\u304a\u3082\u3061\u3083\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u3059\u3002\u3069\u3046\u3067\u3057\u3087\u3046\uff1f\u3000\u30ef\u30af\u30ef\u30af\nEasy-ISLisp Ver0.42\n> T\n> (init)\nNIL\n> (test0 300)\nT\n> (test1 300)\nT\n> (res0)\n0.794126377371483\n0.6994092773060174\n0.8406864839267559\nT\n> (res1)\n0.7945477320524553\n0.699789306814949\n0.841136369619266\nT\n> \n\n\u3093\uff5e\u3080\uff1f\u3000\u5b9f\u9a13\u5931\u6557\uff1f\n\uff12\u3064\u306e\u7570\u306a\u308b\u5165\u529b\u306b\u5bfe\u3057\u3066\u6559\u5e2b\u30c7\u30fc\u30bf\u3092\uff080.5\u30010.8\u30010.7\uff09\u306b\u3057\u305f\u3064\u3082\u308a\u306a\u306e\u3067\u3059\u304c\u3002\u679c\u305f\u3057\u3066\u5c11\u3057\u306f\u3046\u307e\u304f\u3044\u3063\u305f\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\u3000\u306f\u305f\u307e\u305f\u30d0\u30b0\u3001\u8003\u3048\u9593\u9055\u3044\uff1f\u3000\u3068\u308a\u3042\u3048\u305a\u306f\u4e00\u6b69\u524d\u9032\u3002\n\n\u3078\u305d\u66f2\u304c\u308a\nPython\u306b\u306f\u512a\u79c0\u306a\u5b9a\u756a\u306e\u6df1\u5c64\u5b66\u7fd2\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308a\u3001\u305d\u308c\u3092\u4f7f\u3048\u3070\u3044\u3044\u306e\u306f\u308f\u304b\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u305d\u308c\u3092\u5229\u7528\u3057\u3066\u7d50\u679c\u3092\u5f97\u308b\u3060\u3051\u3067\u306f\u5358\u306a\u308b\u30d6\u30e9\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u307e\u307e\u3067\u306f\u306a\u3044\u306e\u304b\uff1f\u3000\u305d\u3093\u306a\u6c17\u6301\u3061\u304b\u3089\u81ea\u5206\u3067\u6570\u5f0f\u304b\u3089\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3053\u3046\u3068\u8a66\u884c\u932f\u8aa4\u3057\u3066\u3044\u307e\u3059\u3002\u3072\u3068\u3064\u3060\u3051\u8a00\u3048\u308b\u306e\u306fISLisp\u306f\u3053\u3046\u3044\u3063\u305f\u8a66\u884c\u932f\u8aa4\u3059\u308b\u306e\u306b\u3061\u3087\u3046\u3069\u3088\u3044Lisp\u3060\u3068\u3044\u3046\u3053\u3068\u3001\u3053\u308c\u306f\u81ea\u4fe1\u3092\u6301\u3063\u3066\u8a00\u3048\u307e\u3059\u3002\u6df1\u5c64\u5b66\u7fd2\u306e\u7406\u89e3\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u307e\u3060\u307e\u3060\u5148\u306f\u9060\u3044\u3088\u3046\u3067\u3059\u3002\n\n\u8b1d\u8f9e\nISLisp\u306e\u4ed5\u69d8\u7406\u89e3\u3001\u5b9f\u88c5\u306b\u3042\u305f\u3063\u3066\u306f\u4e94\u5473\u5148\u751f\u306b\u305f\u3044\u3078\u3093\u304a\u4e16\u8a71\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u79c1\u306e\u3064\u307e\u3089\u306a\u3044\u7591\u554f\u306b\u5bfe\u3057\u3066\u8fc5\u901f\u3001\u304b\u3064\u3001\u771f\u646f\u306b\u304a\u7b54\u3048\u304f\u3060\u3055\u3063\u305f\u4e94\u5473\u5148\u751f\u306b\u611f\u8b1d\u7533\u3057\u4e0a\u3052\u307e\u3059\u3002\n\n\u30b3\u30de\u30fc\u30b7\u30e3\u30eb\n\u81ea\u4f5c\u306eISLisp\u51e6\u7406\u7cfbEISL\u306b\u3064\u3044\u3066\u306f\u96fb\u5b50\u66f8\u7c4d\u306b\u307e\u3068\u3081\u3066\u30b3\u30fc\u30c9\u3064\u304d\u3067Kindle\u306b\u3066\u8ca9\u58f2\u3057\u3066\u304a\u308a\u307e\u3059\u3002\u3088\u304b\u3063\u305f\u3089\u7acb\u3061\u8aad\u307f\u3057\u3066\u3044\u3063\u3066\u304f\u3060\u3055\u3044\u3002\nhttps://www.amazon.co.jp/dp/B01IMUKOHS\n\n\n\u53c2\u8003\u6587\u732e\n\u300cGPU\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u5165\u9580\u300d\u3000\u4f0a\u85e4\u667a\u7fa9\u3000\u8457\u3000\u8b1b\u8ac7\u793e\n\u300c\u6df1\u5c64\u5b66\u7fd2\u300d\u3000\u5ca1\u8c37\u8cb4\u4e4b\u3000\u8457\u3000\u8b1b\u8ac7\u793e\n\u300cISLISP\u898f\u683c\u4ed5\u69d8\u66f8\u300d\u3000http://islisp.org/jp/ISLisp-spec-jp.html\n\n\u30b3\u30fc\u30c9\u3000set-matmat\n#define IDX2C(i,j,ld) (((j)*(ld))+(i))\n\nint f_set_matmat(int arglist){\n    int i,j,k,k1,m,m1,n,n1,arg1,arg2,arg3;\n    cublasStatus stat;\n    float* devPtrA;\n    float* devPtrB;\n    float* devPtrC;\n    float* a = 0;\n    float* b = 0;\n    float* c = 0;\n\n    arg1 = car(arglist);\n    arg2 = cadr(arglist);\n    arg3 = caddr(arglist);\n    m = GET_INT(car(GET_CDR(arg2)));\n    k = GET_INT(cadr(GET_CDR(arg2)));\n    k1 = GET_INT(car(GET_CDR(arg3)));\n    n = GET_INT(cadr(GET_CDR(arg3)));\n    m1 = GET_INT(car(GET_CDR(arg1)));\n    n1 = GET_INT(cadr(GET_CDR(arg1)));\n    if(m != m1 || k != k1 || n != n1)\n        error(ILLEGAL_ARGS,\"set-matmat\",NIL);\n\n    // Memory Allocation\n    a = (float *)malloc (m * k * sizeof (*a));\n    if (!a)\n        error(ILLEGAL_ARGS,\"set-matmat\",NIL);\n    b = (float *)malloc (m * k * sizeof (*b));\n    if (!b)\n        error(ILLEGAL_ARGS,\"set-matmat\",NIL);\n    c = (float *)malloc (m * k * sizeof (*c));\n    if (!c)\n        error(ILLEGAL_ARGS,\"set-matmat\",NIL);\n\n    // Initalize\n    for(j=0;j<k;j++)\n        for(i=0;i<m;i++)\n            a[IDX2C(i,j,m)] = GET_FLT(vector_ref(arg2,i*k+j));\n\n    for (j=0;j<n;j++)\n        for (i=0;i<k;i++)\n            b[IDX2C(i,j,k)] = GET_FLT(vector_ref(arg3,i*n+j));\n\n    for(j=0;j<n;j++)\n        for(i=0;i<m;i++)\n            c[IDX2C(i,j,m)] = 0.0;\n\n    // Initialize CUBLAS\n    cublasInit();\n\n    stat = cublasAlloc (m*k, sizeof(*a), (void**)&devPtrA);\n    if(stat != CUBLAS_STATUS_SUCCESS)\n        error(ILLEGAL_ARGS,\"set-matmat\",NIL);\n    stat = cublasAlloc (k*n, sizeof(*b), (void**)&devPtrB);\n    if(stat != CUBLAS_STATUS_SUCCESS)\n        error(ILLEGAL_ARGS,\"set-matmat\",NIL); \n    stat = cublasAlloc (m*n, sizeof(*c), (void**)&devPtrC);\n    if(stat != CUBLAS_STATUS_SUCCESS)\n        error(ILLEGAL_ARGS,\"set-matmat\",NIL); \n\n\n    stat = cublasSetMatrix (m, k, sizeof(*a), a, m, devPtrA, m);\n    if(stat != CUBLAS_STATUS_SUCCESS)\n    error(ILLEGAL_ARGS,\"set-matmat\",NIL);\n    stat = cublasSetMatrix (k, n, sizeof(*b), b, k, devPtrB, k);\n    if(stat != CUBLAS_STATUS_SUCCESS)\n        error(ILLEGAL_ARGS,\"set-matmat\",NIL);\n    stat = cublasSetMatrix (m, n, sizeof(*c), c, m, devPtrC, m);\n    if(stat != CUBLAS_STATUS_SUCCESS)\n        error(ILLEGAL_ARGS,\"set-matmat\",NIL); \n\n\n    //Sgemm\n    cublasSgemm('N', 'N', m, n, k, 1.0, devPtrA, m, devPtrB, k, 0.0, devPtrC, m);\n\n    stat = cublasGetMatrix (m, n, sizeof(*c), devPtrC, m, c, m);\n    if(stat != CUBLAS_STATUS_SUCCESS){\n        cublasFree(devPtrA);\n        cublasFree(devPtrB);\n        cublasFree(devPtrC);\n        cublasShutdown();\n        error(ILLEGAL_ARGS,\"set-matmat\",NIL); \n    }\n\n    // Shutdown CUBLAS\n    cublasFree(devPtrA);\n    cublasFree(devPtrB);\n    cublasFree(devPtrC);\n    cublasShutdown();\n\n    // Set matrix After sgemm\n    for(j=0;j<n;j++)\n        for (i=0;i<m;i++){\n            SET_TAG(vector_ref(arg1,i*n+j),FLTN);\n            SET_FLT(vector_ref(arg1,i*n+j),c[IDX2C(i,j,m)]);\n        }\n\n    free(a);\n    free(b);\n    free(c);\n    return(NIL);\n}\n\n\n\n\u30b3\u30fc\u30c9\u3000forward\n//for deep larning forward process\n//W 3 dimension\n//U 2 dimension\n\n//U(l+1) = W(l)*U(l) \n\nint f_forward(int arglist){\n    int d1,d2,i,j,k,l,m,n,arg1,arg2,arg3;\n    double r;\n    cublasStatus stat;\n    float* devPtrA;\n    float* devPtrB;\n    float* devPtrC;\n    float* a = 0;\n    float* b = 0;\n    float* c = 0;\n\n    arg1 = car(arglist); //W\n    arg2 = cadr(arglist); //U\n    arg3 = caddr(arglist); //f\n    d1 = GET_CDR(arg1); //dimensions\n    d2 = GET_CDR(arg2); //dimensions\n    if(length(d1) != 3)\n        error(ILLEGAL_ARGS,\"forward\",d1);\n    if(length(d2) != 2)\n        error(ILLEGAL_ARGS,\"forward\",d2);\n    if(GET_INT(cadr(d1)) != GET_INT(car(d2))) // W(m,n,l) U(n,l+1) check n\n        error(ILLEGAL_ARGS,\"forward\",list2(d1,d2));\n    if(GET_INT(caddr(d1))+1 != GET_INT(cadr(d2)))// W(m,n,l) U(n,l+1) check l\n        error(ILLEGAL_ARGS,\"forward\",list2(d1,d2));\n    if(!(IS_SUBR(arg3)))\n        error(ILLEGAL_ARGS,\"forward\",arg3);\n\n    m = GET_INT(car(d1));\n    n = GET_INT(cadr(d1));\n    l = GET_INT(caddr(d1));\n\n    // Memory Allocation\n    a = (float *)malloc (m * n * sizeof (*a));\n    if (!a)\n        error(ILLEGAL_ARGS,\"forward\",NIL);\n    b = (float *)malloc (n * sizeof (*b));\n    if (!b)\n        error(ILLEGAL_ARGS,\"forward\",NIL);\n    c = (float *)malloc (n * sizeof (*c));\n    if (!c)\n        error(ILLEGAL_ARGS,\"forward\",NIL);\n\n    k = 0;\n    while(k<l){ \n        // Initalize\n        for (j=0;j<n;j++)\n            for (i=0;i<m;i++){\n                a[IDX2C(i,j,m)] = GET_FLT(vector_ref(arg1,i*n+j+k*m*n));\n            }\n\n        for(i=0;i<n;i++){\n            b[i] = GET_FLT(vector_ref(arg2,i*(l+1)+k));\n        }\n        for(i=0;i<n;i++)\n            c[i] = 0.0;\n\n        // Initialize CUBLAS\n        cublasInit();\n\n        stat = cublasAlloc (m*n, sizeof(*a), (void**)&devPtrA);\n        if(stat != CUBLAS_STATUS_SUCCESS)\n            error(ILLEGAL_ARGS,\"forward\",NIL);\n        stat = cublasAlloc (n, sizeof(*b), (void**)&devPtrB);\n        if(stat != CUBLAS_STATUS_SUCCESS)\n            error(ILLEGAL_ARGS,\"forward\",NIL); \n        stat = cublasAlloc (n, sizeof(*c), (void**)&devPtrC);\n        if(stat != CUBLAS_STATUS_SUCCESS)\n            error(ILLEGAL_ARGS,\"forward\",NIL); \n\n\n        stat = cublasSetMatrix (m, n, sizeof(*a), a, m, devPtrA, m);\n        if(stat != CUBLAS_STATUS_SUCCESS) \n            error(ILLEGAL_ARGS,\"forward\",NIL);\n        stat = cublasSetVector (n, sizeof(*b), b, 1, devPtrB, 1);\n        if(stat != CUBLAS_STATUS_SUCCESS)\n            error(ILLEGAL_ARGS,\"forward\",NIL);\n        stat = cublasSetVector (n, sizeof(*c), c, 1, devPtrC, 1);\n        if(stat != CUBLAS_STATUS_SUCCESS)\n            error(ILLEGAL_ARGS,\"forward\",NIL); \n\n\n        //Sgemv\n        cublasSgemv('N', m, n, 1.0, devPtrA, m, devPtrB, 1, 0.0, devPtrC, 1);\n\n        stat = cublasGetVector(n, sizeof(*c), devPtrC, 1, c, 1);\n        if(stat != CUBLAS_STATUS_SUCCESS){\n            cublasFree(devPtrA);\n            cublasFree(devPtrB);\n            cublasFree(devPtrC);\n            cublasShutdown();\n            error(ILLEGAL_ARGS,\"forward\",NIL); \n        }\n        // Set vector After sgemv\n        for (i=0;i<n;i++){\n            r = (GET_SUBR(arg3))(list1(makeflt(c[i])));\n            vector_set(arg2,i*(l+1)+k+1,r);\n        }\n        k++;\n    }\n\n    // Shutdown CUBLAS\n    cublasFree(devPtrA);\n    cublasFree(devPtrB);\n    cublasFree(devPtrC);\n    cublasShutdown();\n\n    free(a);\n    free(b);\n    free(c);\n    return(NIL);\n}\n\n\n\n\n\u5b9f\u9a13\u30b3\u30fc\u30c9\n#|\n\u30e1\u30e2\nU\u306f\u5165\u529b\u30c6\u30f3\u30bd\u30eb\u30020\u6b21\u5143\u306f\u5404\u5c64\u306e\u30e6\u30cb\u30c3\u30c8\u30011\u6b21\u5143\u306f\u5c64\u3092\u8868\u3059\u3002\nW\u306f\u91cd\u307f\u30c6\u30f3\u30bd\u30eb\u30020\u6b21\u51431\u6b21\u5143\u306f\u5404\u5c64\u306e\u4fc2\u6570\u884c\u5217\u30012\u6b21\u5143\u306f\u5c64\u3092\u8868\u3059\u3002\n|#\n(defglobal W (create-array '(3 3 3) 0.5))\n(defglobal U #2a((0.5 0.0 0.0 0.0)\n                 (0.6 0.0 0.0 0.0)\n                 (0.5 0.0 0.0 0.0)))\n(defglobal delta (create-array '(3 3)))\n(defglobal d #(0.5 0.7 0.8))\n(defglobal l1 (- (elt (array-dimensions W) 0) 1))\n(defglobal n1 (- (elt (array-dimensions W) 2) 1))\n(defglobal m1 (- (elt (array-dimensions W) 1) 1))\n(defglobal larning-rate 0.15)\n\n(defun init ()\n  (for ((k 0 (+ k 1)))\n       ((> k l1))\n       (for ((i 0 (+ i 1)))\n            ((> i m1))\n            (for ((j 0 (+ j 1)))\n                 ((> j n1))\n                 (set-aref (random-real) w k i j)))))\n\n(defun test0 (n)\n  (set-aref 0.5 U 0 0)\n  (set-aref 0.6 U 1 0)\n  (set-aref 0.7 U 2 0)\n  (for ((i 0 (+ i 1)))\n       ((> i n) t)\n       (forward W U #'logistic)\n       (backward)))\n\n(defun test1(n)\n  (set-aref 0.5 U 0 0)\n  (set-aref 0.7 U 1 0)\n  (set-aref 0.6 U 2 0)\n  (for ((i 0 (+ i 1)))\n       ((> i n) t)\n       (forward W U #'logistic)\n       (backward)))\n\n(defun res0()\n  (set-aref 0.5 U 0 0)\n  (set-aref 0.6 U 1 0)\n  (set-aref 0.7 U 2 0)\n  (forward W U #'logistic)\n  (for ((i 0 (+ i 1)))\n       ((> i n1) t)\n       (print (aref u i (+ l1 1)))))\n\n(defun res1()\n  (set-aref 0.5 U 0 0)\n  (set-aref 0.7 U 1 0)\n  (set-aref 0.6 U 2 0)\n  (forward W U #'logistic)\n  (for ((i 0 (+ i 1)))\n       ((> i n1) t)\n       (print (aref u i (+ l1 1)))))\n\n(defun calc-delta()\n  (for ((i 0 (+ i 1)))\n       ((> i m1))\n       (set-aref (- (aref U i (+ l1 1)) (aref d i)) delta i l1))\n  (for ((l (- l1 1) (- l 1)))\n       ((< l 0))\n       (for ((j 0 (+ j 1)))\n            ((> j n1))\n            (set-aref (* (funcall #'fdash (aref U j l))\n                         (for ((k 0 (+ k 1))\n                               (s 0 (+ s (* (aref delta k (+ l 1))\n                                            (aref w (+ l 1) k j)))))\n                              ((> k m1) s)))\n                            delta j l))))\n\n(defun backward()\n  (calc-delta)\n  (for ((l 0 (+ l 1)))\n       ((> l l1))\n       (for ((i 0 (+ i 1)))\n            ((> i m1))\n            (for ((j 0 (+ j 1)))\n                 ((> j n1))\n                 (set-aref (- (aref W l i j)\n                              (* (aref W l i j) larning-rate (aref delta j l)(aref U i l)))\n                           W l i j)))))\n\n\n(defun fdash(x)\n  (* (logistic x)(- 1 (logistic x))))\n\n\n\n#\u306f\u3058\u3081\u306b\n\u5e73\u621028\u5e744\u6708\u3001ISLisp\u306e\u3053\u3068\u3092\u77e5\u308a\u307e\u3057\u305f\u3002\u305d\u308c\u307e\u3067\u540d\u524d\u3060\u3051\u306f\u77e5\u3063\u3066\u3044\u305f\u3082\u306e\u306e\u3001\u305d\u306e\u8a73\u7d30\u306f\u77e5\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u6e6f\u6d45\u5148\u751f\u306a\u3069\u65e5\u672c\u4eba\u7814\u7a76\u8005\u306e\u65b9\u3005\u304c\u95a2\u308f\u3063\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u304b\u3089\u8208\u5473\u304c\u308f\u304d\u3001\u898f\u683c\u66f8\u3092\u8aad\u3093\u3067\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\u8aad\u307f\u9032\u3081\u308b\u3046\u3061\u306b\u3001ISLisp\u306f\u30b3\u30f3\u30d1\u30af\u30c8\u3067\u4e00\u8cab\u6027\u306e\u3042\u308b\u512a\u308c\u305f\u8a2d\u8a08\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u3066\u304d\u307e\u3057\u305f\u3002\u7b2c\u4e00\u4eba\u8005\u3067\u3042\u308b\u4e94\u5473\u5148\u751f\u306e\u52a9\u8a00\u3092\u53d7\u3051\u3064\u3064\u30018\u6708\u9803\u306b\u306f\u81ea\u4f5c\u306eEasy\uff0dISLisp\uff08\u7565\u79f0EISL)\u304c\u5b8c\u6210\u3057\u307e\u3057\u305f\u3002\n\u307e\u305f\u3001\u3053\u306e\u9803\u3001\u6df1\u5c64\u5b66\u7fd2\u306e\u3053\u3068\u3092\u72ec\u5b66\u3057\u3066\u304a\u308a\u3001\u5ca1\u8c37\u5148\u751f\u306e\u672c\u3092\u8aad\u307f\u3064\u3064\u81ea\u5206\u3067\u3082\u6df1\u5c64\u5b66\u7fd2\u306e\u4ed5\u7d44\u307f\u3092\u5b9f\u88c5\u3057\u305f\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3057\u305f\u3002\u6df1\u5c64\u5b66\u7fd2\u306b\u304a\u3044\u3066\u306f\u5927\u91cf\u306e\u884c\u5217\u8a08\u7b97\u304c\u5fc5\u8981\u3067\u3042\u308a\u3001GPU\u304c\u5fc5\u8981\u3067\u3057\u305f\u3002CUDA\u3092\u4f7f\u3046\u3068\u3057\u3066\u3001C\u8a00\u8a9e\u306b\u3088\u308b\u8a18\u8ff0\u306b\u306f\u624b\u9593\u304c\u304b\u304b\u308a\u3001\u8a66\u884c\u932f\u8aa4\u306e\u305f\u3081\u306b\u30b3\u30fc\u30c9\u3092\u4fee\u6b63\u3059\u308b\u3053\u3068\u304c\u5104\u52ab\u3067\u3057\u305f\u3002\u305d\u3053\u3067\u3061\u3087\u3046\u3069\u5b8c\u6210\u3057\u305fEISL\u306bGPU\u3092\u4f7f\u3046\u72ec\u81ea\u6a5f\u80fd\u3092\u8ffd\u52a0\u3001ISLisp\u3067\u6df1\u5c64\u5b66\u7fd2\u306e\u5b9f\u9a13\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\n#ISLisp\u306e\u7279\u9577\nCommon Lisp\u3092\u30d9\u30fc\u30b9\u306b\u3057\u3064\u3064\u3082\u3001Scheme\u3084EULisp\u306e\u826f\u3055\u3082\u53d6\u308a\u8fbc\u3093\u3067\u3044\u307e\u3059\u3002\u30b5\u30a4\u30ba\u304c\u5c0f\u3055\u304f\u5b66\u7fd2\u7528\u3001\u7814\u7a76\u7528\u306b\u5411\u3044\u3066\u3044\u307e\u3059\u3002CLOS\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u3067\u3042\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u30b7\u30b9\u30c6\u30e0ILOS\u3092\u542b\u307f\u307e\u3059\u3002\u8a2d\u8a08\u304c\u6bd4\u8f03\u7684\u65b0\u3057\u3044\u305f\u3081\u30a8\u30e9\u30fc\u51e6\u7406\u304c\u5145\u5b9f\u3057\u3066\u3044\u307e\u3059\u3002\u5168\u4f53\u3068\u3057\u3066\u30b3\u30f3\u30d1\u30af\u30c8\u3067\u4e00\u8cab\u6027\u304c\u3042\u308bLisp\u56fd\u969b\u6a19\u6e96\u898f\u683c\u3067\u3059\u3002\n\n#CUDA\u306e\u5c0e\u5165\n\u30b2\u30fc\u30e0\u7528GTX960GPU\u3092\u642d\u8f09\u3057\u305fWindows\u30de\u30b7\u30f3\u3092\u5c0e\u5165\u3057\u307e\u3057\u305f\u3002CUDA\u306fWindows\u3068Linux\u3067\u5229\u7528\u53ef\u80fd\u3067\u3059\u304c\u3001Windows\u3067\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002Windows\u3067\u4f7f\u3046\u5834\u5408\u3001GCC\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u304a\u3089\u305a\u3001\u30de\u30a4\u30af\u30ed\u30bd\u30d5\u30c8\u306eVC\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\u30022013\u7248\u306eVisualStudio\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002CUDA\u306f\u6700\u65b0\u7248\u306eVisualStudio\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u305b\u3093\u3002\u305d\u306e\u5f8c\u306b\u3001NVIDIA\u793e\u306e\u30da\u30fc\u30b8\u3088\u308aCUDA\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3057\u305f\u3002\n\n#EISL\u3078\u306eCUDA\u306e\u7d44\u307f\u8fbc\u307f\n\u81ea\u4f5c\u306eISLisp\u51e6\u7406\u7cfb\uff08\u4ee5\u4e0b\u300cEISL]\uff09\u306f\u6a19\u6e96\u7684\u306aC\u8a00\u8a9e\u306e\u6a5f\u80fd\u3057\u304b\u4f7f\u3063\u3066\u3044\u307e\u305b\u3093\u3002\u3044\u304f\u3064\u304b\u306e\u4fee\u6b63\u3092\u3057\u3066VC\u3067\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u53ef\u80fd\u3068\u3057\u307e\u3057\u305f\u3002\u3055\u3089\u306b\u3001CUDA\u306b\u542b\u307e\u308c\u308bCUBLAS\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u53d6\u308a\u8fbc\u307f\u307e\u3059\u3002\n\n\u72ec\u81ea\u62e1\u5f35\u95a2\u6570\u3092\u8a18\u8ff0\u3057\u305fC\u30d5\u30a1\u30a4\u30eb\u306e\u30d8\u30c3\u30c0\u306b\n\n```\n\u3000#include <cublas.h>\u3000\n```\n\n\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u3053\u308c\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u306b\u306fNVIDIA\u306e\u63d0\u4f9b\u3057\u3066\u3044\u308bNVCC\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u4f7f\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u6b21\u306e\u3088\u3046\u306b\u3057\u3066\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4e0e\u3048\u307e\u3059\u3002\n\n```\nnvcc extension.c  -c -lcublas\n```\n\nEISL\u306f\u3044\u304f\u3064\u304b\u306e\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u6210\u3063\u3066\u304a\u308a\u3001\u305d\u308c\u3089\u3092\u30ea\u30f3\u30af\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3057\u305f\u3002\u8a66\u884c\u932f\u8aa4\u3057\u3066\u307f\u308b\u3068NVCC\u306f\u30ea\u30f3\u30ab\u306e\u6a5f\u80fd\u3082\u542b\u3093\u3067\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u3066\u304d\u307e\u3057\u305f\u3002CUBLAS\u3092\u4f7f\u7528\u3057\u306a\u3044\u4ed6\u306e\u30d5\u30a1\u30a4\u30eb\u3082NVCC\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u30ea\u30f3\u30af\u3059\u308c\u3070\u3044\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3057\u305f\u3002\u6b21\u306e\u30d0\u30c3\u30c1\u30d5\u30a1\u30a4\u30eb\u306b\u3057\u307e\u3057\u305f\u3002\n\n```\nnvcc -O2 -c main.c\nnvcc -O2 -c function.c\nnvcc -O2 -c data.c\nnvcc -O2 -c gbc.c\nnvcc -O2 -c cell.c\nnvcc -O2 -c syntax.c\nnvcc -O2 -c bignum.c\nnvcc -O2 -c compute.c\nnvcc -O2 -c error.c\nnvcc extension.c  -c -lcublas\n\nnvcc main.obj function.obj data.obj gbc.obj cell.obj syntax.obj bignum.obj compute.obj error.obj extension.obj -lcublas -o eisl.exe\n```\n\u3053\u308c\u306b\u3088\u308aCUBLAS\u306b\u3088\u308b\u72ec\u81ea\u62e1\u5f35\u95a2\u6570\u3092\u542b\u3093\u3060EISL\u304c\u8d77\u52d5\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n```\neisl\nEasy-ISLisp Ver0.42\n> \n\n```\n\n#\u72ec\u81ea\u62e1\u5f35\u95a2\u6570\n\u307e\u305a\u306f\u5358\u7d14\u306a\u884c\u5217\u3068\u884c\u5217\u306e\u7a4d\u3092\u8a08\u7b97\u3059\u308b\u3082\u306e\u3092\u4f5c\u3063\u3066\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002 (set-matmat c a b)\u3068\u3044\u3046\u95a2\u6570\u3067a,b,c\u306b\u306f\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u3092\u8981\u7d20\u3068\u3059\u308b2\u6b21\u5143\u914d\u5217\u3092\u3068\u308a\u307e\u3059\u30022\u6b21\u5143\u914d\u5217\u3092\u884c\u5217\u3068\u307f\u3066a*b\u306e\u7d50\u679c\u3092C\u306b\u7834\u58ca\u7684\u4ee3\u5165\u3057\u307e\u3059\u3002Lisp\u3067\u306f\u57fa\u672c\u7684\u306b\u5024\u3092\u751f\u6210\u3057\u3066\u8fd4\u3057\u3001\u7834\u58ca\u7684\u4ee3\u5165\u306f\u3057\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u5927\u304d\u306a\u884c\u5217\u306f\u30bb\u30eb\u3092\u5927\u91cf\u306b\u6d88\u8cbb\u3059\u308b\u3053\u3068\u304b\u3089\u7701\u30e1\u30e2\u30ea\u306e\u305f\u3081\u306b\u3001\u305d\u3046\u3057\u307e\u3057\u305f\u3002\n\nC\u8a00\u8a9e\u30b3\u30fc\u30c9\u306f\u9577\u3044\u306e\u3067\u3001\u5dfb\u672b\u306b\u63b2\u8f09\u3057\u307e\u3057\u305f\u3002\u4f7f\u3044\u65b9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\n```\nEasy-ISLisp Ver0.42\n> (defglobal a #2a((1.0 2.0)(3.0 4.0)))\nA\n> (defglobal b #2a((3.0 2.0)(1.0 4.0)))\nB\n> (defglobal c (create-array '(2 2)))\nC\n> (set-matmat c a b)\nNIL\n> c\n#2a((5.0 10.0) (13.0 22.0))\n> \n```\n\n#\u9806\u4f1d\u64ad\u8a08\u7b97\nGPU\u3092\u5229\u7528\u3057\u305f\u884c\u5217\u8a08\u7b97\u307e\u3067\u306f\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002ISLisp\u304b\u3089CUDA\u3092\u547c\u3073\u51fa\u3059\u3068\u30bf\u30a4\u30e0\u30ed\u30b9\u304c\u767a\u751f\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u8a08\u7b97\u7d50\u679c\u3092\u305d\u306e\u90fd\u5ea6\u30bb\u30eb\u306b\u66f8\u304d\u8fbc\u3080\u306e\u3067\u306f\u7701\u30e1\u30e2\u30ea\u306e\u70b9\u3067\u3082\u4e0d\u5229\u3067\u3059\u3002\u305d\u3053\u3067\u3001\u6df1\u5c64\u5b66\u7fd2\u306e\u5165\u529b\u5c64\u304b\u3089\u51fa\u529b\u5c64\u3078\u304b\u3051\u3066\u306e\u9806\u4f1d\u64ad\u8a08\u7b97\u3092\u4e00\u6c17\u306bGPU\u3092\u4f7f\u3063\u3066\u3084\u3063\u3066\u3057\u307e\u3046\u72ec\u81ea\u62e1\u5f35\u95a2\u6570\u3092\u7528\u610f\u3059\u308b\u3053\u3068\u3068\u3057\u307e\u3057\u305f\u3002(forward w u fn) \u3068\u3044\u3046\u5f62\u5f0f\u3067\u3001w\u306f\u91cd\u307f\u884c\u5217\u3001u\u306f\u5165\u529b\u5c64\u53ca\u3073\u5404\u5c64\u306e\u51fa\u529b\uff08\u3064\u307e\u308a\u6b21\u306e\u5c64\u3078\u306e\u5165\u529b\uff09\u3092\u8a18\u61b6\u3059\u308b\u884c\u5217\u3001fn\u306f\u6d3b\u6027\u5316\u95a2\u6570\u3067\u3059\u3002\u30b3\u30fc\u30c9\u306f\u5dfb\u672b\u306b\u63b2\u8f09\u3057\u3066\u3044\u307e\u3059\u3002\n\n#\u30c7\u30fc\u30bf\u69cb\u9020\n\u6df1\u5c64\u5b66\u7fd2\u306e\u6559\u79d1\u66f8\u3067\u306fw\u306f\u884c\u5217\u3001u\u306f\u30d9\u30af\u30c8\u30eb\u3067\u8868\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u524d\u8ff0\u3057\u305f\u3088\u3046\u306bforward\u3092\u7d44\u307f\u8fbc\u307f\u95a2\u6570\u306b\u3057\u3066\u8a08\u7b97\u901f\u5ea6\u3092\u7a3c\u304e\u305f\u3044\u3068\u601d\u3044\u307e\u3057\u305f\u3002\u4e00\u6c17\u306b\u8a08\u7b97\u3059\u308b\u305f\u3081\u306b\u5404\u5c64\u306ew\u884c\u5217\u3092\u3072\u3068\u307e\u3068\u3081\u306b\u3057\u3066\u30013\u6b21\u5143\u914d\u5217\u3001\u30c6\u30f3\u30bd\u30eb\u306e\u3088\u3046\u306a\u3082\u306e\u306b\u3057\u307e\u3057\u305f\u3002\u540c\u69d8\u306b\u5404\u5c64\u306eu\u30d9\u30af\u30c8\u30eb\u3082\u3072\u3068\u307e\u3068\u3081\u306b\u3057\u3066\u884c\u5217\u306b\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\n![Weight.png](https://qiita-image-store.s3.amazonaws.com/0/33927/376dccd0-19bd-4589-c012-cd6e3bf509e0.png)\n\n\uff57\u306fm*n\u884c\u5217\u3092l\u5c64\u5206\u91cd\u306d\u305f\u3082\u306e\u3068\u3057\u3066\u307e\u3059\u3002\n\n![Umatrix.png](https://qiita-image-store.s3.amazonaws.com/0/33927/f4936059-85c0-a651-2e75-79aa384d8a27.png)\n\nu\u884c\u5217\u306f\u30d9\u30af\u30c8\u30eb\u3092l\u5c64\u5206\u3001\u5bc4\u305b\u96c6\u3081\u305f\u884c\u5217\u3067\u3059\u3002\u7b2c0\u5217\u304c\u5165\u529b\u5c64\u3067\u3059\u3002\n\n\n\n#\u8aa4\u5dee\u9006\u4f1d\u9054\u6cd5\u3000\u30c7\u30eb\u30bf\u8a08\u7b97\n\u4eca\u5ea6\u306f\u5b66\u7fd2\u306b\u3088\u308a\u91cd\u307f\u884c\u5217\u3092\u66f4\u65b0\u3057\u3066\u3044\u304f\u3053\u3068\u3092\u8003\u3048\u307e\u3059\u3002\u8aa4\u5dee\u9006\u4f1d\u64ad\u6cd5\u304c\u8a08\u7b97\u91cf\u306e\u7bc0\u7d04\u306e\u305f\u3081\u306b\u6709\u52b9\u3067\u3059\u3002\u3053\u308c\u3092ISLisp\u3067\u3069\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3059\u308b\u304b\u306b\u3064\u3044\u3066\u8003\u3048\u307e\u3057\u305f\u3002\u3053\u306e\u8a08\u7b97\u3067\u306f\u03b4\uff08\u30c7\u30eb\u30bf\uff09\u304c\u91cd\u8981\u306a\u5f79\u5272\u3092\u679c\u305f\u3057\u307e\u3059\u3002\n\n![formura.png](https://qiita-image-store.s3.amazonaws.com/0/33927/6a6e4e93-91e7-15ef-ca51-bcde620db905.png)\n\n\u5ca1\u8c37\u5148\u751f\u306e\u672c\u306e\uff14\uff17\u30da\u30fc\u30b8\u306b\u3042\u308b\u03b4\u306e\u6570\u5f0f\u3067\u3059\u3002\u5404\u5c64\u3092\u8868\u3059\u3000\uff4c\uff08\u30a8\u30eb\uff09\u3092\u773a\u3081\u3066\u3044\u308b\u3068\u518d\u5e30\u69cb\u9020\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u51fa\u529b\u5c64\u3092\u8d77\u70b9\u306b\u3057\u3066\u305d\u306e\u3072\u3068\u3064\u524d\u306e\u5c64\u3092\u6c42\u3081\u308b\u3001\u3055\u3089\u306b\u305d\u308c\u3092\u57fa\u306b\u3057\u3066\u3082\u3046\u3072\u3068\u3064\u524d\u306e\u5c64\u3092\u6c42\u3081\u308b\u3002\u3053\u306e\u518d\u5e30\u3092ISLisp\u306b\u66f8\u304d\u76f4\u3057\u307e\u3057\u305f\u3002\n\n```\n(defun calc-delta()\n  (for ((i 0 (+ i 1)))\n       ((> i m1))\n       (set-aref (- (aref U i (+ l1 1)) (aref d i)) delta i l1))\n  (for ((l (- l1 1) (- l 1)))\n       ((< l 0))\n       (for ((j 0 (+ j 1)))\n            ((> j n1))\n            (set-aref (* (funcall #'fdash (aref U j l))\n                         (for ((k 0 (+ k 1))\n                               (s 0 (+ s (* (aref delta k (+ l 1))\n                                            (aref w (+ l 1) k j)))))\n                              ((> k m1) s)))\n                            delta j l))))\n\n(defun fdash(x)\n  (* (logistic x)(- 1 (logistic x))))\n   \n\n```\nISLisp\u306f\u7e70\u308a\u8fd4\u3057\u306bfor\u3068\u3044\u3046\u69cb\u6587\u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u3002Scheme\u306edo\u3068\u540c\u69d8\u306e\u4ed5\u7d44\u307f\u3067\u3059\u3002\u6d3b\u6027\u5316\u95a2\u6570\u306b\u3068\u308a\u3042\u3048\u305a\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u95a2\u6570\u3092\u4e0e\u3048\u307e\u3057\u305f\u3002\n\n\u3053\u306e\u03b4\u8a08\u7b97\u304c\u3067\u304d\u308c\u3070\u91cd\u307f\u884c\u5217\u3092\u66f4\u65b0\u3057\u3066\u3044\u304f\u95a2\u6570\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```\n(defun backward()\n  (calc-delta)\n  (for ((l 0 (+ l 1)))\n       ((> l l1))\n       (for ((i 0 (+ i 1)))\n            ((> i m1))\n            (for ((j 0 (+ j 1)))\n                 ((> j n1))\n                 (set-aref (- (aref W l i j)\n                              (* (aref W l i j) larning-rate (aref delta j l)(aref U i l)))\n                           W l i j)))))\n\n(defglobal larning-rate 0.15)\n\n```\n\nlarning-rate\u306f\u5b66\u7fd2\u4fc2\u6570\u3092\u8868\u3059\u5927\u57df\u5b9a\u7fa9\u5909\u6570\u3067\u3059\u3002\u8a66\u884c\u932f\u8aa4\u3057\u306a\u304c\u3089\u3044\u3058\u308a\u307e\u3059\u3002\n\n#\u5b9f\u9a13\n\u3055\u3042\u3001\u3046\u307e\u304f\u52d5\u304f\u3082\u306e\u3067\u3057\u3087\u3046\u304b\u3002\u3068\u3082\u304b\u304f\u3084\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002ISLisp\u306e\u30b3\u30fc\u30c9\u306f\u6700\u5f8c\u306b\u63b2\u8f09\u3057\u307e\u3057\u305f\u3002\n\n\uff13\uff0a\uff13\u884c\u5217\u306e3\u5c64\u306e\u304a\u3082\u3061\u3083\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u3059\u3002\u3069\u3046\u3067\u3057\u3087\u3046\uff1f\u3000\u30ef\u30af\u30ef\u30af\n\n```\nEasy-ISLisp Ver0.42\n> T\n> (init)\nNIL\n> (test0 300)\nT\n> (test1 300)\nT\n> (res0)\n0.794126377371483\n0.6994092773060174\n0.8406864839267559\nT\n> (res1)\n0.7945477320524553\n0.699789306814949\n0.841136369619266\nT\n> \n```\n\n\u3093\uff5e\u3080\uff1f\u3000\u5b9f\u9a13\u5931\u6557\uff1f\n\uff12\u3064\u306e\u7570\u306a\u308b\u5165\u529b\u306b\u5bfe\u3057\u3066\u6559\u5e2b\u30c7\u30fc\u30bf\u3092\uff080.5\u30010.8\u30010.7\uff09\u306b\u3057\u305f\u3064\u3082\u308a\u306a\u306e\u3067\u3059\u304c\u3002\u679c\u305f\u3057\u3066\u5c11\u3057\u306f\u3046\u307e\u304f\u3044\u3063\u305f\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\u3000\u306f\u305f\u307e\u305f\u30d0\u30b0\u3001\u8003\u3048\u9593\u9055\u3044\uff1f\u3000\u3068\u308a\u3042\u3048\u305a\u306f\u4e00\u6b69\u524d\u9032\u3002\n\n#\u3078\u305d\u66f2\u304c\u308a\nPython\u306b\u306f\u512a\u79c0\u306a\u5b9a\u756a\u306e\u6df1\u5c64\u5b66\u7fd2\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308a\u3001\u305d\u308c\u3092\u4f7f\u3048\u3070\u3044\u3044\u306e\u306f\u308f\u304b\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u305d\u308c\u3092\u5229\u7528\u3057\u3066\u7d50\u679c\u3092\u5f97\u308b\u3060\u3051\u3067\u306f\u5358\u306a\u308b\u30d6\u30e9\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u307e\u307e\u3067\u306f\u306a\u3044\u306e\u304b\uff1f\u3000\u305d\u3093\u306a\u6c17\u6301\u3061\u304b\u3089\u81ea\u5206\u3067\u6570\u5f0f\u304b\u3089\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3053\u3046\u3068\u8a66\u884c\u932f\u8aa4\u3057\u3066\u3044\u307e\u3059\u3002\u3072\u3068\u3064\u3060\u3051\u8a00\u3048\u308b\u306e\u306fISLisp\u306f\u3053\u3046\u3044\u3063\u305f\u8a66\u884c\u932f\u8aa4\u3059\u308b\u306e\u306b\u3061\u3087\u3046\u3069\u3088\u3044Lisp\u3060\u3068\u3044\u3046\u3053\u3068\u3001\u3053\u308c\u306f\u81ea\u4fe1\u3092\u6301\u3063\u3066\u8a00\u3048\u307e\u3059\u3002\u6df1\u5c64\u5b66\u7fd2\u306e\u7406\u89e3\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u307e\u3060\u307e\u3060\u5148\u306f\u9060\u3044\u3088\u3046\u3067\u3059\u3002\n\n#\u8b1d\u8f9e\nISLisp\u306e\u4ed5\u69d8\u7406\u89e3\u3001\u5b9f\u88c5\u306b\u3042\u305f\u3063\u3066\u306f\u4e94\u5473\u5148\u751f\u306b\u305f\u3044\u3078\u3093\u304a\u4e16\u8a71\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u79c1\u306e\u3064\u307e\u3089\u306a\u3044\u7591\u554f\u306b\u5bfe\u3057\u3066\u8fc5\u901f\u3001\u304b\u3064\u3001\u771f\u646f\u306b\u304a\u7b54\u3048\u304f\u3060\u3055\u3063\u305f\u4e94\u5473\u5148\u751f\u306b\u611f\u8b1d\u7533\u3057\u4e0a\u3052\u307e\u3059\u3002\n\n#\u30b3\u30de\u30fc\u30b7\u30e3\u30eb\n\u81ea\u4f5c\u306eISLisp\u51e6\u7406\u7cfbEISL\u306b\u3064\u3044\u3066\u306f\u96fb\u5b50\u66f8\u7c4d\u306b\u307e\u3068\u3081\u3066\u30b3\u30fc\u30c9\u3064\u304d\u3067Kindle\u306b\u3066\u8ca9\u58f2\u3057\u3066\u304a\u308a\u307e\u3059\u3002\u3088\u304b\u3063\u305f\u3089\u7acb\u3061\u8aad\u307f\u3057\u3066\u3044\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\nhttps://www.amazon.co.jp/dp/B01IMUKOHS\n\n![cover.jpg](https://qiita-image-store.s3.amazonaws.com/0/33927/3f9b8b05-9792-0281-d471-b05590d867b5.jpeg)\n\n\n\n#\u53c2\u8003\u6587\u732e\n\n\u300cGPU\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u5165\u9580\u300d\u3000\u4f0a\u85e4\u667a\u7fa9\u3000\u8457\u3000\u8b1b\u8ac7\u793e\n\u300c\u6df1\u5c64\u5b66\u7fd2\u300d\u3000\u5ca1\u8c37\u8cb4\u4e4b\u3000\u8457\u3000\u8b1b\u8ac7\u793e\n\u300cISLISP\u898f\u683c\u4ed5\u69d8\u66f8\u300d\u3000http://islisp.org/jp/ISLisp-spec-jp.html\n\n#\u30b3\u30fc\u30c9\u3000set-matmat\n\n```\n#define IDX2C(i,j,ld) (((j)*(ld))+(i))\n\nint f_set_matmat(int arglist){\n    int i,j,k,k1,m,m1,n,n1,arg1,arg2,arg3;\n    cublasStatus stat;\n    float* devPtrA;\n    float* devPtrB;\n    float* devPtrC;\n    float* a = 0;\n    float* b = 0;\n    float* c = 0;\n  \n    arg1 = car(arglist);\n    arg2 = cadr(arglist);\n    arg3 = caddr(arglist);\n    m = GET_INT(car(GET_CDR(arg2)));\n    k = GET_INT(cadr(GET_CDR(arg2)));\n    k1 = GET_INT(car(GET_CDR(arg3)));\n    n = GET_INT(cadr(GET_CDR(arg3)));\n    m1 = GET_INT(car(GET_CDR(arg1)));\n    n1 = GET_INT(cadr(GET_CDR(arg1)));\n    if(m != m1 || k != k1 || n != n1)\n        error(ILLEGAL_ARGS,\"set-matmat\",NIL);\n    \n    // Memory Allocation\n    a = (float *)malloc (m * k * sizeof (*a));\n    if (!a)\n        error(ILLEGAL_ARGS,\"set-matmat\",NIL);\n    b = (float *)malloc (m * k * sizeof (*b));\n    if (!b)\n        error(ILLEGAL_ARGS,\"set-matmat\",NIL);\n    c = (float *)malloc (m * k * sizeof (*c));\n    if (!c)\n        error(ILLEGAL_ARGS,\"set-matmat\",NIL);\n        \n    // Initalize\n    for(j=0;j<k;j++)\n        for(i=0;i<m;i++)\n            a[IDX2C(i,j,m)] = GET_FLT(vector_ref(arg2,i*k+j));\n    \n    for (j=0;j<n;j++)\n        for (i=0;i<k;i++)\n            b[IDX2C(i,j,k)] = GET_FLT(vector_ref(arg3,i*n+j));\n        \n    for(j=0;j<n;j++)\n        for(i=0;i<m;i++)\n            c[IDX2C(i,j,m)] = 0.0;\n            \n    // Initialize CUBLAS\n    cublasInit();\n\n    stat = cublasAlloc (m*k, sizeof(*a), (void**)&devPtrA);\n    if(stat != CUBLAS_STATUS_SUCCESS)\n        error(ILLEGAL_ARGS,\"set-matmat\",NIL);\n    stat = cublasAlloc (k*n, sizeof(*b), (void**)&devPtrB);\n    if(stat != CUBLAS_STATUS_SUCCESS)\n        error(ILLEGAL_ARGS,\"set-matmat\",NIL); \n    stat = cublasAlloc (m*n, sizeof(*c), (void**)&devPtrC);\n    if(stat != CUBLAS_STATUS_SUCCESS)\n        error(ILLEGAL_ARGS,\"set-matmat\",NIL); \n  \n\n    stat = cublasSetMatrix (m, k, sizeof(*a), a, m, devPtrA, m);\n    if(stat != CUBLAS_STATUS_SUCCESS)\n    error(ILLEGAL_ARGS,\"set-matmat\",NIL);\n    stat = cublasSetMatrix (k, n, sizeof(*b), b, k, devPtrB, k);\n    if(stat != CUBLAS_STATUS_SUCCESS)\n        error(ILLEGAL_ARGS,\"set-matmat\",NIL);\n    stat = cublasSetMatrix (m, n, sizeof(*c), c, m, devPtrC, m);\n    if(stat != CUBLAS_STATUS_SUCCESS)\n        error(ILLEGAL_ARGS,\"set-matmat\",NIL); \n\n  \n    //Sgemm\n    cublasSgemm('N', 'N', m, n, k, 1.0, devPtrA, m, devPtrB, k, 0.0, devPtrC, m);\n\n    stat = cublasGetMatrix (m, n, sizeof(*c), devPtrC, m, c, m);\n    if(stat != CUBLAS_STATUS_SUCCESS){\n        cublasFree(devPtrA);\n        cublasFree(devPtrB);\n        cublasFree(devPtrC);\n        cublasShutdown();\n        error(ILLEGAL_ARGS,\"set-matmat\",NIL); \n    }\n\n    // Shutdown CUBLAS\n    cublasFree(devPtrA);\n    cublasFree(devPtrB);\n    cublasFree(devPtrC);\n    cublasShutdown();\n\n    // Set matrix After sgemm\n    for(j=0;j<n;j++)\n        for (i=0;i<m;i++){\n            SET_TAG(vector_ref(arg1,i*n+j),FLTN);\n            SET_FLT(vector_ref(arg1,i*n+j),c[IDX2C(i,j,m)]);\n        }\n  \n    free(a);\n    free(b);\n    free(c);\n    return(NIL);\n}\n\n```\n\n#\u30b3\u30fc\u30c9\u3000forward\n\n```\n//for deep larning forward process\n//W 3 dimension\n//U 2 dimension\n\n//U(l+1) = W(l)*U(l) \n\nint f_forward(int arglist){\n  \tint d1,d2,i,j,k,l,m,n,arg1,arg2,arg3;\n    double r;\n  \tcublasStatus stat;\n  \tfloat* devPtrA;\n    float* devPtrB;\n    float* devPtrC;\n  \tfloat* a = 0;\n  \tfloat* b = 0;\n  \tfloat* c = 0;\n  \n\targ1 = car(arglist); //W\n    arg2 = cadr(arglist); //U\n\targ3 = caddr(arglist); //f\n    d1 = GET_CDR(arg1); //dimensions\n    d2 = GET_CDR(arg2); //dimensions\n    if(length(d1) != 3)\n    \terror(ILLEGAL_ARGS,\"forward\",d1);\n    if(length(d2) != 2)\n    \terror(ILLEGAL_ARGS,\"forward\",d2);\n    if(GET_INT(cadr(d1)) != GET_INT(car(d2))) // W(m,n,l) U(n,l+1) check n\n    \terror(ILLEGAL_ARGS,\"forward\",list2(d1,d2));\n    if(GET_INT(caddr(d1))+1 != GET_INT(cadr(d2)))// W(m,n,l) U(n,l+1) check l\n    \terror(ILLEGAL_ARGS,\"forward\",list2(d1,d2));\n    if(!(IS_SUBR(arg3)))\n    \terror(ILLEGAL_ARGS,\"forward\",arg3);\n    \n    m = GET_INT(car(d1));\n    n = GET_INT(cadr(d1));\n    l = GET_INT(caddr(d1));\n    \n  \t// Memory Allocation\n  \ta = (float *)malloc (m * n * sizeof (*a));\n  \tif (!a)\n    \terror(ILLEGAL_ARGS,\"forward\",NIL);\n  \tb = (float *)malloc (n * sizeof (*b));\n  \tif (!b)\n    \terror(ILLEGAL_ARGS,\"forward\",NIL);\n\tc = (float *)malloc (n * sizeof (*c));\n  \tif (!c)\n    \terror(ILLEGAL_ARGS,\"forward\",NIL);\n    \n    k = 0;\n    while(k<l){ \n  \t\t// Initalize\n    \tfor (j=0;j<n;j++)\n    \t\tfor (i=0;i<m;i++){\n      \t\t\ta[IDX2C(i,j,m)] = GET_FLT(vector_ref(arg1,i*n+j+k*m*n));\n\t\t\t}\n    \n    \tfor(i=0;i<n;i++){\n    \t\tb[i] = GET_FLT(vector_ref(arg2,i*(l+1)+k));\n    \t}\n    \tfor(i=0;i<n;i++)\n    \t\tc[i] = 0.0;\n          \n  \t\t// Initialize CUBLAS\n  \t\tcublasInit();\n\n  \t\tstat = cublasAlloc (m*n, sizeof(*a), (void**)&devPtrA);\n  \t\tif(stat != CUBLAS_STATUS_SUCCESS)\n  \t\t\terror(ILLEGAL_ARGS,\"forward\",NIL);\n  \t\tstat = cublasAlloc (n, sizeof(*b), (void**)&devPtrB);\n  \t\tif(stat != CUBLAS_STATUS_SUCCESS)\n  \t\t\terror(ILLEGAL_ARGS,\"forward\",NIL); \n  \t\tstat = cublasAlloc (n, sizeof(*c), (void**)&devPtrC);\n  \t\tif(stat != CUBLAS_STATUS_SUCCESS)\n  \t\t\terror(ILLEGAL_ARGS,\"forward\",NIL); \n  \n\n  \t\tstat = cublasSetMatrix (m, n, sizeof(*a), a, m, devPtrA, m);\n\t\tif(stat != CUBLAS_STATUS_SUCCESS) \n  \t\t\terror(ILLEGAL_ARGS,\"forward\",NIL);\n  \t\tstat = cublasSetVector (n, sizeof(*b), b, 1, devPtrB, 1);\n  \t\tif(stat != CUBLAS_STATUS_SUCCESS)\n  \t\t\terror(ILLEGAL_ARGS,\"forward\",NIL);\n  \t\tstat = cublasSetVector (n, sizeof(*c), c, 1, devPtrC, 1);\n  \t\tif(stat != CUBLAS_STATUS_SUCCESS)\n  \t\t\terror(ILLEGAL_ARGS,\"forward\",NIL); \n\n  \n  \t\t//Sgemv\n  \t\tcublasSgemv('N', m, n, 1.0, devPtrA, m, devPtrB, 1, 0.0, devPtrC, 1);\n\n  \t\tstat = cublasGetVector(n, sizeof(*c), devPtrC, 1, c, 1);\n  \t\tif(stat != CUBLAS_STATUS_SUCCESS){\n    \t\tcublasFree(devPtrA);\n    \t\tcublasFree(devPtrB);\n  \t\t\tcublasFree(devPtrC);\n    \t\tcublasShutdown();\n    \t\terror(ILLEGAL_ARGS,\"forward\",NIL); \n  \t\t}\n    \t// Set vector After sgemv\n  \t\tfor (i=0;i<n;i++){\n\t\t\tr = (GET_SUBR(arg3))(list1(makeflt(c[i])));\n    \t\tvector_set(arg2,i*(l+1)+k+1,r);\n    \t}\n\t\tk++;\n\t}\n    \n  \t// Shutdown CUBLAS\n  \tcublasFree(devPtrA);\n  \tcublasFree(devPtrB);\n  \tcublasFree(devPtrC);\n  \tcublasShutdown();\n\n  \tfree(a);\n    free(b);\n    free(c);\n  \treturn(NIL);\n}\n\n\n```\n\n#\u5b9f\u9a13\u30b3\u30fc\u30c9\n\n```\n#|\n\u30e1\u30e2\nU\u306f\u5165\u529b\u30c6\u30f3\u30bd\u30eb\u30020\u6b21\u5143\u306f\u5404\u5c64\u306e\u30e6\u30cb\u30c3\u30c8\u30011\u6b21\u5143\u306f\u5c64\u3092\u8868\u3059\u3002\nW\u306f\u91cd\u307f\u30c6\u30f3\u30bd\u30eb\u30020\u6b21\u51431\u6b21\u5143\u306f\u5404\u5c64\u306e\u4fc2\u6570\u884c\u5217\u30012\u6b21\u5143\u306f\u5c64\u3092\u8868\u3059\u3002\n|#\n(defglobal W (create-array '(3 3 3) 0.5))\n(defglobal U #2a((0.5 0.0 0.0 0.0)\n                 (0.6 0.0 0.0 0.0)\n                 (0.5 0.0 0.0 0.0)))\n(defglobal delta (create-array '(3 3)))\n(defglobal d #(0.5 0.7 0.8))\n(defglobal l1 (- (elt (array-dimensions W) 0) 1))\n(defglobal n1 (- (elt (array-dimensions W) 2) 1))\n(defglobal m1 (- (elt (array-dimensions W) 1) 1))\n(defglobal larning-rate 0.15)\n\n(defun init ()\n  (for ((k 0 (+ k 1)))\n       ((> k l1))\n       (for ((i 0 (+ i 1)))\n            ((> i m1))\n            (for ((j 0 (+ j 1)))\n                 ((> j n1))\n                 (set-aref (random-real) w k i j)))))\n\n(defun test0 (n)\n  (set-aref 0.5 U 0 0)\n  (set-aref 0.6 U 1 0)\n  (set-aref 0.7 U 2 0)\n  (for ((i 0 (+ i 1)))\n       ((> i n) t)\n       (forward W U #'logistic)\n       (backward)))\n\n(defun test1(n)\n  (set-aref 0.5 U 0 0)\n  (set-aref 0.7 U 1 0)\n  (set-aref 0.6 U 2 0)\n  (for ((i 0 (+ i 1)))\n       ((> i n) t)\n       (forward W U #'logistic)\n       (backward)))\n\n(defun res0()\n  (set-aref 0.5 U 0 0)\n  (set-aref 0.6 U 1 0)\n  (set-aref 0.7 U 2 0)\n  (forward W U #'logistic)\n  (for ((i 0 (+ i 1)))\n       ((> i n1) t)\n       (print (aref u i (+ l1 1)))))\n\n(defun res1()\n  (set-aref 0.5 U 0 0)\n  (set-aref 0.7 U 1 0)\n  (set-aref 0.6 U 2 0)\n  (forward W U #'logistic)\n  (for ((i 0 (+ i 1)))\n       ((> i n1) t)\n       (print (aref u i (+ l1 1)))))\n\n(defun calc-delta()\n  (for ((i 0 (+ i 1)))\n       ((> i m1))\n       (set-aref (- (aref U i (+ l1 1)) (aref d i)) delta i l1))\n  (for ((l (- l1 1) (- l 1)))\n       ((< l 0))\n       (for ((j 0 (+ j 1)))\n            ((> j n1))\n            (set-aref (* (funcall #'fdash (aref U j l))\n                         (for ((k 0 (+ k 1))\n                               (s 0 (+ s (* (aref delta k (+ l 1))\n                                            (aref w (+ l 1) k j)))))\n                              ((> k m1) s)))\n                            delta j l))))\n\n(defun backward()\n  (calc-delta)\n  (for ((l 0 (+ l 1)))\n       ((> l l1))\n       (for ((i 0 (+ i 1)))\n            ((> i m1))\n            (for ((j 0 (+ j 1)))\n                 ((> j n1))\n                 (set-aref (- (aref W l i j)\n                              (* (aref W l i j) larning-rate (aref delta j l)(aref U i l)))\n                           W l i j)))))\n\n              \n(defun fdash(x)\n  (* (logistic x)(- 1 (logistic x))))\n   \n\n```\n\n\n", "tags": ["ISLisp", "lisp", "GPU", "\u6df1\u5c64\u5b66\u7fd2"]}