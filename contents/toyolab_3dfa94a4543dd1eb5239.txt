{"tags": ["Python", "\u30c6\u30af\u30cb\u30ab\u30eb\u6307\u6a19", "FX", "\u30b7\u30b9\u30c8\u30ec", "\u6700\u9069\u5316"], "context": "Python\u3067FX\u30b7\u30b9\u30c8\u30ec\u306e\u30d0\u30c3\u30af\u30c6\u30b9\u30c8\n\u3067\u3001\u30d0\u30c3\u30af\u30c6\u30b9\u30c8\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u305f\u306e\u3067\u3001\u3053\u3093\u3069\u306f\u30b7\u30b9\u30c8\u30ec\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6700\u9069\u5316\u3092\u3084\u3063\u3066\u307f\u307e\u3059\u3002\u30c8\u30ec\u30fc\u30c9\u30b7\u30b9\u30c6\u30e0\u306e\u6700\u9069\u5316\u3068\u3044\u3063\u3066\u3082\u3001\u4eca\u6d41\u884c\u308a\u306e\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u3092\u3084\u308b\u308f\u3051\u3067\u306f\u306a\u304f\u3001\u5358\u306b\u30c6\u30af\u30cb\u30ab\u30eb\u6307\u6a19\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u3092\u8272\u3005\u3068\u5909\u3048\u3066\u3001\u6700\u3082\u8a55\u4fa1\u5024\u306e\u9ad8\u304f\u306a\u308b\u3082\u306e\u3092\u898b\u3064\u3051\u308b\u3060\u3051\u3067\u3059\u3002Python\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u7df4\u7fd2\u306e\u305f\u3081\u3067\u3059\u3002\n\n\u6e96\u5099\nPython\u3067FX\u30b7\u30b9\u30c8\u30ec\u306e\u30d0\u30c3\u30af\u30c6\u30b9\u30c8\n\u3068\u540c\u3058\u304f\u3001FX\u306e\u30d2\u30b9\u30c8\u30ea\u30ab\u30eb\u30c7\u30fc\u30bf\u3092\u6e96\u5099\u3057\u307e\u3059\u3002\u524d\u3068\u540c\u3058\u304fEUR/USD\u306e2015\u5e74\u306e1\u6642\u9593\u8db3\u306e\u30c7\u30fc\u30bf\u3092\u4f5c\u3063\u3066\u304a\u304d\u307e\u3059\u3002\nimport numpy as np\nimport pandas as pd\nimport indicators as ind #indicators.py\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\n\ndataM1 = pd.read_csv('DAT_ASCII_EURUSD_M1_2015.csv', sep=';',\n                     names=('Time','Open','High','Low','Close', ''),\n                     index_col='Time', parse_dates=True)\ndataM1.index += pd.offsets.Hour(7) #7\u6642\u9593\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\nohlc = ind.TF_ohlc(dataM1, 'H') #\uff11\u6642\u9593\u8db3\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\n\nindicators.py\u306fGitHub\u306b\u4e0a\u3052\u3066\u3042\u308b\u3082\u306e\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n\u30d0\u30c3\u30af\u30c6\u30b9\u30c8\u3068\u305d\u306e\u8a55\u4fa1\n\u30d0\u30c3\u30af\u30c6\u30b9\u30c8\u306e\u95a2\u6570\u306f\u524d\u56de\u3068\u540c\u3058\u3082\u306e\u3092\u4f7f\u3044\u307e\u3059\u3002\u30d2\u30b9\u30c8\u30ea\u30ab\u30eb\u30c7\u30fc\u30bf\u3068\u58f2\u8cb7\u30b7\u30b0\u30ca\u30eb\u3092\u5165\u308c\u3066\u58f2\u8cb7\u7d50\u679c\u3068\u640d\u76ca\u3092\u7b97\u51fa\u3057\u307e\u3059\u3002\ndef Backtest(ohlc, BuyEntry, SellEntry, BuyExit, SellExit, lots=0.1, spread=2):\n    Open = ohlc['Open'].values #\u59cb\u5024\n    Point = 0.0001 #1pip\u306e\u5024\n    if(Open[0] > 50): Point = 0.01 #\u30af\u30ed\u30b9\u5186\u306e1pip\u306e\u5024\n    Spread = spread*Point #\u30b9\u30d7\u30ec\u30c3\u30c9\n    Lots = lots*100000 #\u5b9f\u969b\u306e\u58f2\u8cb7\u91cf\n    N = len(ohlc) #FX\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\n    BuyExit[N-2] = SellExit[N-2] = True #\u6700\u5f8c\u306b\u5f37\u5236\u30a8\u30b0\u30b8\u30c3\u30c8\n    BuyPrice = SellPrice = 0.0 # \u58f2\u8cb7\u4fa1\u683c\n\n    LongTrade = np.zeros(N) # \u8cb7\u3044\u30c8\u30ec\u30fc\u30c9\u60c5\u5831\n    ShortTrade = np.zeros(N) # \u58f2\u308a\u30c8\u30ec\u30fc\u30c9\u60c5\u5831\n\n    LongPL = np.zeros(N) # \u8cb7\u3044\u30dd\u30b8\u30b7\u30e7\u30f3\u306e\u640d\u76ca\n    ShortPL = np.zeros(N) # \u58f2\u308a\u30dd\u30b8\u30b7\u30e7\u30f3\u306e\u640d\u76ca\n\n    for i in range(1,N):\n        if BuyEntry[i-1] and BuyPrice == 0: #\u8cb7\u3044\u30a8\u30f3\u30c8\u30ea\u30fc\u30b7\u30b0\u30ca\u30eb\n            BuyPrice = Open[i]+Spread\n            LongTrade[i] = BuyPrice #\u8cb7\u3044\u30dd\u30b8\u30b7\u30e7\u30f3\u30aa\u30fc\u30d7\u30f3\n        elif BuyExit[i-1] and BuyPrice != 0: #\u8cb7\u3044\u30a8\u30b0\u30b8\u30c3\u30c8\u30b7\u30b0\u30ca\u30eb\n            ClosePrice = Open[i]\n            LongTrade[i] = -ClosePrice #\u8cb7\u3044\u30dd\u30b8\u30b7\u30e7\u30f3\u30af\u30ed\u30fc\u30ba\n            LongPL[i] = (ClosePrice-BuyPrice)*Lots #\u640d\u76ca\u78ba\u5b9a\n            BuyPrice = 0\n\n        if SellEntry[i-1] and SellPrice == 0: #\u58f2\u308a\u30a8\u30f3\u30c8\u30ea\u30fc\u30b7\u30b0\u30ca\u30eb\n            SellPrice = Open[i]\n            ShortTrade[i] = SellPrice #\u58f2\u308a\u30dd\u30b8\u30b7\u30e7\u30f3\u30aa\u30fc\u30d7\u30f3\n        elif SellExit[i-1] and SellPrice != 0: #\u58f2\u308a\u30a8\u30b0\u30b8\u30c3\u30c8\u30b7\u30b0\u30ca\u30eb\n            ClosePrice = Open[i]+Spread\n            ShortTrade[i] = -ClosePrice #\u58f2\u308a\u30dd\u30b8\u30b7\u30e7\u30f3\u30af\u30ed\u30fc\u30ba\n            ShortPL[i] = (SellPrice-ClosePrice)*Lots #\u640d\u76ca\u78ba\u5b9a\n            SellPrice = 0\n\n    return pd.DataFrame({'Long':LongTrade, 'Short':ShortTrade}, index=ohlc.index),\\\n            pd.DataFrame({'Long':LongPL, 'Short':ShortPL}, index=ohlc.index)\n\n\u30b7\u30b9\u30c6\u30e0\u306e\u8a55\u4fa1\u3068\u3057\u3066\u306f\u3001\u6b21\u306e\u95a2\u6570\u3067\u3001 \u7dcf\u640d\u76ca\u3001\u53d6\u5f15\u6570\u3001\u5e73\u5747\u640d\u76ca\u3001\u30d7\u30ed\u30d5\u30a3\u30c3\u30c8\u30d5\u30a1\u30af\u30bf\u30fc\u3001\u6700\u5927\u30c9\u30ed\u30fc\u30c0\u30a6\u30f3\u3001\u30ea\u30ab\u30d0\u30ea\u30fc\u30d5\u30a1\u30af\u30bf\u30fc\u3092\u7b97\u51fa\u3057\u307e\u3059\u3002\u3060\u3044\u305f\u3044MetaTrader\u306e\u6700\u9069\u5316\u3067\u51fa\u529b\u3055\u308c\u308b\u306e\u3068\u540c\u3058\u3082\u306e\u3067\u3059\u3002\ndef BacktestReport(Trade, PL):\n    LongPL = PL['Long']\n    ShortPL = PL['Short']\n    LongTrades = np.count_nonzero(Trade['Long'])//2\n    ShortTrades = np.count_nonzero(Trade['Short'])//2\n    GrossProfit = LongPL.clip_lower(0).sum()+ShortPL.clip_lower(0).sum()\n    GrossLoss = LongPL.clip_upper(0).sum()+ShortPL.clip_upper(0).sum()\n    #\u7dcf\u640d\u76ca\n    Profit = GrossProfit+GrossLoss\n    #\u53d6\u5f15\u6570\n    Trades = LongTrades+ShortTrades\n    #\u5e73\u5747\u640d\u76ca\n    if Trades==0: Average = 0\n    else: Average = Profit/Trades\n    #\u30d7\u30ed\u30d5\u30a3\u30c3\u30c8\u30d5\u30a1\u30af\u30bf\u30fc\n    if GrossLoss==0: PF=100\n    else: PF = -GrossProfit/GrossLoss\n    #\u6700\u5927\u30c9\u30ed\u30fc\u30c0\u30a6\u30f3\n    Equity = (LongPL+ShortPL).cumsum()\n    MDD = (Equity.cummax()-Equity).max()\n    #\u30ea\u30ab\u30d0\u30ea\u30fc\u30d5\u30a1\u30af\u30bf\u30fc\n    if MDD==0: RF=100\n    else: RF = Profit/MDD\n    return np.array([Profit, Trades, Average, PF, MDD, RF])\n\n\n\u6700\u9069\u5316\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u305d\u306e\u7bc4\u56f2\n\u524d\u56de\u306e\u30d0\u30c3\u30af\u30c6\u30b9\u30c8\u3067\u306f\u3001\u9577\u671f\u79fb\u52d5\u5e73\u5747\u306e\u671f\u9593\u309230\u3001\u77ed\u671f\u79fb\u52d5\u5e73\u5747\u306e\u671f\u9593\u309210\u3001\u3068\u56fa\u5b9a\u3057\u3066\u30c6\u30b9\u30c8\u3057\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306e\u6700\u9069\u5316\u3067\u306f\u3001\u3053\u306e\u4e8c\u3064\u306e\u671f\u9593\u3092\u5909\u3048\u3066\u307f\u307e\u3059\u3002\n\u5909\u5316\u3055\u305b\u308b\u671f\u9593\u306f\u3001\u9577\u671f\u79fb\u52d5\u5e73\u5747\u306710\u304b\u308950\u3001\u77ed\u671f\u79fb\u52d5\u5e73\u5747\u30675\u304b\u308930\u3068\u3057\u3066\u307f\u307e\u3059\u3002\u6b21\u306e\u3088\u3046\u306b\u914d\u5217\u306b\u5165\u308c\u3066\u304a\u304d\u307e\u3059\u3002\nSlowMAperiod = np.arange(10, 51) #\u9577\u671f\u79fb\u52d5\u5e73\u5747\u671f\u9593\u306e\u7bc4\u56f2\nFastMAperiod = np.arange(5, 31)  #\u77ed\u671f\u79fb\u52d5\u5e73\u5747\u671f\u9593\u306e\u7bc4\u56f2\n\n\u305d\u308c\u305e\u308c\u306e\u671f\u9593\u306f41\u901a\u308a\u300126\u901a\u308a\u3067\u3059\u304c\u3001\u4e8c\u3064\u306e\u671f\u9593\u306e\u7d44\u307f\u5408\u308f\u305b\u3060\u3068\u300141\u00d726=106641\u00d726=106641\\times 26=1066\u901a\u308a\u3068\u306a\u308a\u307e\u3059\u3002\n\n\u6700\u9069\u5316\n\u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u671f\u9593\u306e\u7bc4\u56f2\u3092\u4ee3\u5165\u3057\u3066\u6700\u9069\u5316\u3092\u884c\u3044\u307e\u3059\u3002\u671f\u9593\u306e\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\u304c\u5897\u3048\u3066\u304f\u308b\u3068\u8a08\u7b97\u6642\u9593\u304c\u7121\u8996\u3067\u304d\u306a\u304f\u306a\u308b\u306e\u3067\u3001\u6975\u529b\u3001\u7121\u99c4\u306a\u8a08\u7b97\u3092\u7701\u304b\u306a\u304f\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002\n\u3068\u308a\u3042\u3048\u305a\u300141\u901a\u308a\u300126\u901a\u308a\u306e\u79fb\u52d5\u5e73\u5747\u306e\u6642\u7cfb\u5217\u3092\u3042\u3089\u304b\u3058\u3081\u8a08\u7b97\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u305d\u3057\u3066\u30011066\u901a\u308a\u306e\u7d44\u307f\u5408\u308f\u305b\u306b\u5bfe\u3057\u3066\u3001\u58f2\u8cb7\u30b7\u30b0\u30ca\u30eb\u306e\u751f\u6210\u3001\u30d0\u30c3\u30af\u30c6\u30b9\u30c8\u3001\u8a55\u4fa1\u3092\u884c\u3044\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u3001\u8a55\u4fa1\u5024\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\u30b3\u30fc\u30c9\u306e\u4e00\u4f8b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\ndef Optimize(ohlc, SlowMAperiod, FastMAperiod):\n    SlowMA = np.empty([len(SlowMAperiod), len(ohlc)]) #\u9577\u671f\u79fb\u52d5\u5e73\u5747\n    for i in range(len(SlowMAperiod)):\n        SlowMA[i] = ind.iMA(ohlc, SlowMAperiod[i])\n\n    FastMA = np.empty([len(FastMAperiod), len(ohlc)]) #\u77ed\u671f\u79fb\u52d5\u5e73\u5747\n    for i in range(len(FastMAperiod)):\n        FastMA[i] = ind.iMA(ohlc, FastMAperiod[i])\n\n    N = len(SlowMAperiod)*len(FastMAperiod)\n    Eval = np.empty([N, 6]) #\u8a55\u4fa1\u9805\u76ee\n    Slow = np.empty(N) #\u9577\u671f\u79fb\u52d5\u5e73\u5747\u671f\u9593\n    Fast = np.empty(N) #\u77ed\u671f\u79fb\u52d5\u5e73\u5747\u671f\u9593\n    def shift(x, n=1): return np.concatenate((np.zeros(n), x[:-n])) #\u30b7\u30d5\u30c8\u95a2\u6570\n    k = 0\n    for i in range(len(SlowMAperiod)):\n        for j in range(len(FastMAperiod)):\n            #\u8cb7\u3044\u30a8\u30f3\u30c8\u30ea\u30fc\u30b7\u30b0\u30ca\u30eb\n            BuyEntry = (FastMA[j] > SlowMA[i]) & (shift(FastMA[j]) <= shift(SlowMA[i]))\n            #\u58f2\u308a\u30a8\u30f3\u30c8\u30ea\u30fc\u30b7\u30b0\u30ca\u30eb\n            SellEntry = (FastMA[j] < SlowMA[i]) & (shift(FastMA[j]) >= shift(SlowMA[i]))\n            #\u8cb7\u3044\u30a8\u30b0\u30b8\u30c3\u30c8\u30b7\u30b0\u30ca\u30eb\n            BuyExit = SellEntry.copy()\n            #\u58f2\u308a\u30a8\u30b0\u30b8\u30c3\u30c8\u30b7\u30b0\u30ca\u30eb\n            SellExit = BuyEntry.copy()\n            #\u30d0\u30c3\u30af\u30c6\u30b9\u30c8\n            Trade, PL = Backtest(ohlc, BuyEntry, SellEntry, BuyExit, SellExit) \n            Eval[k] = BacktestReport(Trade, PL)\n            Slow[k] = SlowMAperiod[i]\n            Fast[k] = FastMAperiod[j]\n            k += 1\n    return pd.DataFrame({'Slow':Slow, 'Fast':Fast, 'Profit': Eval[:,0], 'Trades':Eval[:,1],\n                         'Average':Eval[:,2],'PF':Eval[:,3], 'MDD':Eval[:,4], 'RF':Eval[:,5]},\n                         columns=['Slow','Fast','Profit','Trades','Average','PF','MDD','RF'])\n\nresult = Optimize(ohlc, SlowMAperiod, FastMAperiod)\n\n\u8a08\u7b97\u6642\u9593\u304c\u6c17\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u304c\u3001Core i5-3337U 1.8GHz\u306eCPU\u3067\u300112\u79d2\u307b\u3069\u3067\u3057\u305f\u3002\u540c\u3058\u6761\u4ef6\u306e\u6700\u9069\u5316\u3092MetaTrader5\u3067\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u304c\u300150\u79d2\u8fd1\u304f\u304b\u304b\u3063\u305f\u306e\u3067\u3001Python\u3068\u3057\u3066\u306f\u3001\u307e\u3042\u307e\u3042\u5b9f\u7528\u53ef\u80fd\u306a\u901f\u5ea6\u3060\u3063\u305f\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u6700\u9069\u5316\u306e\u7d50\u679c\n\u6700\u9069\u5316\u306e\u7d50\u679c\u306f\u3001\u597d\u307f\u306e\u9805\u76ee\u3067\u30bd\u30fc\u30c8\u3059\u308b\u3053\u3068\u3067\u3001\u6700\u9069\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u7dcf\u640d\u76ca\u3067\u30bd\u30fc\u30c8\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nresult.sort_values('Profit', ascending=False).head(20)\n\n        Slow  Fast  Profit  Trades   Average        PF     MDD        RF\n   445  27.0   8.0  2507.1   264.0  9.496591  1.423497   485.1  5.168213\n   470  28.0   7.0  2486.0   260.0  9.561538  1.419642   481.2  5.166251\n   446  27.0   9.0  2263.3   252.0  8.981349  1.376432   624.7  3.623019\n   444  27.0   7.0  2171.4   272.0  7.983088  1.341276   504.7  4.302358\n   471  28.0   8.0  2102.3   250.0  8.409200  1.359030   540.3  3.890986\n   497  29.0   8.0  2093.3   242.0  8.650000  1.365208   603.8  3.466876\n   495  29.0   6.0  2063.5   256.0  8.060547  1.342172   620.6  3.325008\n   498  29.0   9.0  2053.5   238.0  8.628151  1.362451   686.5  2.991260\n   546  31.0   5.0  1959.4   254.0  7.714173  1.344256   529.7  3.699075\n   520  30.0   5.0  1940.3   276.0  7.030072  1.313538   681.7  2.846267\n   496  29.0   7.0  1931.5   248.0  7.788306  1.322891   611.3  3.159660\n   422  26.0  11.0  1903.4   248.0  7.675000  1.309702   708.7  2.685763\n   523  30.0   8.0  1903.0   232.0  8.202586  1.327680   823.9  2.309746\n   524  30.0   9.0  1875.8   234.0  8.016239  1.328598   908.6  2.064495\n   573  32.0   6.0  1820.8   242.0  7.523967  1.320688   639.8  2.845889\n   420  26.0   9.0  1819.1   258.0  7.050775  1.282035   667.0  2.727286\n   572  32.0   5.0  1808.2   256.0  7.063281  1.313564   522.9  3.458023\n   598  33.0   5.0  1799.6   248.0  7.256452  1.317183   613.2  2.934768\n   419  26.0   8.0  1777.4   274.0  6.486861  1.273817   552.7  3.215849\n   434  26.0  23.0  1739.6   368.0  4.727174  1.241049  1235.5  1.408013\n\n\u3053\u308c\u3088\u308a\u3001\u7dcf\u640d\u76ca\u304c\u6700\u5927\u3068\u306a\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u306f\u3001\u9577\u671f\u79fb\u52d5\u5e73\u5747\u306e\u671f\u9593\u304c27\u3001\u77ed\u671f\u79fb\u52d5\u5e73\u5747\u306e\u671f\u9593\u304c8\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u8a66\u3057\u306b\u3001\u3053\u306e\u671f\u9593\u3067\u30d0\u30c3\u30af\u30c6\u30b9\u30c8\u3057\u305f\u8cc7\u7523\u66f2\u7dda\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3044\u3044\u3067\u3059\u306d\u3002\u305f\u3060\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6700\u9069\u5316\u3092\u3059\u308c\u3070\u3001\u3053\u306e\u7a0b\u5ea6\u306e\u7d50\u679c\u304c\u51fa\u308b\u306e\u306f\u5f53\u305f\u308a\u524d\u3067\u3001\u3042\u307e\u308a\u559c\u3079\u308b\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u5225\u306e\u671f\u9593\u306e\u30d0\u30c3\u30af\u30c6\u30b9\u30c8\u3092\u3057\u3066\u304c\u3063\u304b\u308a\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\u4eca\u56de\u306fMetaTrader\u306e\u30d0\u30c3\u30af\u30c6\u30b9\u30c8\u3088\u308a\u901f\u3044\u7d50\u679c\u304c\u51fa\u305f\u3060\u3051\u3067\u3088\u3057\u3068\u3057\u307e\u3059\u3002MetaTrader\u3067\u306f\u30c6\u30a3\u30c3\u30af\u5358\u4f4d\u306e\u30d0\u30c3\u30af\u30c6\u30b9\u30c8\u3082\u3067\u304d\u308b\u306e\u3067\u3059\u304c\u3001\u305d\u308c\u3092Python\u3067\u3084\u308d\u3046\u3068\u3059\u308b\u3068\u3001\u3084\u3063\u3071\u308a\u304b\u306a\u308a\u6642\u9593\u304c\u304b\u304b\u308b\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u307e\u3060\u307e\u3060\u5148\u306f\u9577\u3044\u3067\u3059\u3002\n[Python\u3067FX\u30b7\u30b9\u30c8\u30ec\u306e\u30d0\u30c3\u30af\u30c6\u30b9\u30c8](http://qiita.com/toyolab/items/e8292d2f051a88517cb2)\n\u3067\u3001\u30d0\u30c3\u30af\u30c6\u30b9\u30c8\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u305f\u306e\u3067\u3001\u3053\u3093\u3069\u306f\u30b7\u30b9\u30c8\u30ec\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6700\u9069\u5316\u3092\u3084\u3063\u3066\u307f\u307e\u3059\u3002\u30c8\u30ec\u30fc\u30c9\u30b7\u30b9\u30c6\u30e0\u306e\u6700\u9069\u5316\u3068\u3044\u3063\u3066\u3082\u3001\u4eca\u6d41\u884c\u308a\u306e\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u3092\u3084\u308b\u308f\u3051\u3067\u306f\u306a\u304f\u3001\u5358\u306b\u30c6\u30af\u30cb\u30ab\u30eb\u6307\u6a19\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u3092\u8272\u3005\u3068\u5909\u3048\u3066\u3001\u6700\u3082\u8a55\u4fa1\u5024\u306e\u9ad8\u304f\u306a\u308b\u3082\u306e\u3092\u898b\u3064\u3051\u308b\u3060\u3051\u3067\u3059\u3002Python\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u7df4\u7fd2\u306e\u305f\u3081\u3067\u3059\u3002\n\n# \u6e96\u5099\n[Python\u3067FX\u30b7\u30b9\u30c8\u30ec\u306e\u30d0\u30c3\u30af\u30c6\u30b9\u30c8](http://qiita.com/toyolab/items/e8292d2f051a88517cb2)\n\u3068\u540c\u3058\u304f\u3001FX\u306e\u30d2\u30b9\u30c8\u30ea\u30ab\u30eb\u30c7\u30fc\u30bf\u3092\u6e96\u5099\u3057\u307e\u3059\u3002\u524d\u3068\u540c\u3058\u304fEUR/USD\u306e2015\u5e74\u306e1\u6642\u9593\u8db3\u306e\u30c7\u30fc\u30bf\u3092\u4f5c\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n\n````py\nimport numpy as np\nimport pandas as pd\nimport indicators as ind #indicators.py\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\n\ndataM1 = pd.read_csv('DAT_ASCII_EURUSD_M1_2015.csv', sep=';',\n                     names=('Time','Open','High','Low','Close', ''),\n                     index_col='Time', parse_dates=True)\ndataM1.index += pd.offsets.Hour(7) #7\u6642\u9593\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\nohlc = ind.TF_ohlc(dataM1, 'H') #\uff11\u6642\u9593\u8db3\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\n````\n\nindicators.py\u306f[GitHub](https://github.com/toyolab/MT5IndicatorsPy)\u306b\u4e0a\u3052\u3066\u3042\u308b\u3082\u306e\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n# \u30d0\u30c3\u30af\u30c6\u30b9\u30c8\u3068\u305d\u306e\u8a55\u4fa1\n\u30d0\u30c3\u30af\u30c6\u30b9\u30c8\u306e\u95a2\u6570\u306f\u524d\u56de\u3068\u540c\u3058\u3082\u306e\u3092\u4f7f\u3044\u307e\u3059\u3002\u30d2\u30b9\u30c8\u30ea\u30ab\u30eb\u30c7\u30fc\u30bf\u3068\u58f2\u8cb7\u30b7\u30b0\u30ca\u30eb\u3092\u5165\u308c\u3066\u58f2\u8cb7\u7d50\u679c\u3068\u640d\u76ca\u3092\u7b97\u51fa\u3057\u307e\u3059\u3002\n\n````py\ndef Backtest(ohlc, BuyEntry, SellEntry, BuyExit, SellExit, lots=0.1, spread=2):\n    Open = ohlc['Open'].values #\u59cb\u5024\n    Point = 0.0001 #1pip\u306e\u5024\n    if(Open[0] > 50): Point = 0.01 #\u30af\u30ed\u30b9\u5186\u306e1pip\u306e\u5024\n    Spread = spread*Point #\u30b9\u30d7\u30ec\u30c3\u30c9\n    Lots = lots*100000 #\u5b9f\u969b\u306e\u58f2\u8cb7\u91cf\n    N = len(ohlc) #FX\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\n    BuyExit[N-2] = SellExit[N-2] = True #\u6700\u5f8c\u306b\u5f37\u5236\u30a8\u30b0\u30b8\u30c3\u30c8\n    BuyPrice = SellPrice = 0.0 # \u58f2\u8cb7\u4fa1\u683c\n    \n    LongTrade = np.zeros(N) # \u8cb7\u3044\u30c8\u30ec\u30fc\u30c9\u60c5\u5831\n    ShortTrade = np.zeros(N) # \u58f2\u308a\u30c8\u30ec\u30fc\u30c9\u60c5\u5831\n    \n    LongPL = np.zeros(N) # \u8cb7\u3044\u30dd\u30b8\u30b7\u30e7\u30f3\u306e\u640d\u76ca\n    ShortPL = np.zeros(N) # \u58f2\u308a\u30dd\u30b8\u30b7\u30e7\u30f3\u306e\u640d\u76ca\n\n    for i in range(1,N):\n        if BuyEntry[i-1] and BuyPrice == 0: #\u8cb7\u3044\u30a8\u30f3\u30c8\u30ea\u30fc\u30b7\u30b0\u30ca\u30eb\n            BuyPrice = Open[i]+Spread\n            LongTrade[i] = BuyPrice #\u8cb7\u3044\u30dd\u30b8\u30b7\u30e7\u30f3\u30aa\u30fc\u30d7\u30f3\n        elif BuyExit[i-1] and BuyPrice != 0: #\u8cb7\u3044\u30a8\u30b0\u30b8\u30c3\u30c8\u30b7\u30b0\u30ca\u30eb\n            ClosePrice = Open[i]\n            LongTrade[i] = -ClosePrice #\u8cb7\u3044\u30dd\u30b8\u30b7\u30e7\u30f3\u30af\u30ed\u30fc\u30ba\n            LongPL[i] = (ClosePrice-BuyPrice)*Lots #\u640d\u76ca\u78ba\u5b9a\n            BuyPrice = 0\n\n        if SellEntry[i-1] and SellPrice == 0: #\u58f2\u308a\u30a8\u30f3\u30c8\u30ea\u30fc\u30b7\u30b0\u30ca\u30eb\n            SellPrice = Open[i]\n            ShortTrade[i] = SellPrice #\u58f2\u308a\u30dd\u30b8\u30b7\u30e7\u30f3\u30aa\u30fc\u30d7\u30f3\n        elif SellExit[i-1] and SellPrice != 0: #\u58f2\u308a\u30a8\u30b0\u30b8\u30c3\u30c8\u30b7\u30b0\u30ca\u30eb\n            ClosePrice = Open[i]+Spread\n            ShortTrade[i] = -ClosePrice #\u58f2\u308a\u30dd\u30b8\u30b7\u30e7\u30f3\u30af\u30ed\u30fc\u30ba\n            ShortPL[i] = (SellPrice-ClosePrice)*Lots #\u640d\u76ca\u78ba\u5b9a\n            SellPrice = 0\n\n    return pd.DataFrame({'Long':LongTrade, 'Short':ShortTrade}, index=ohlc.index),\\\n            pd.DataFrame({'Long':LongPL, 'Short':ShortPL}, index=ohlc.index)\n````\n\n\u30b7\u30b9\u30c6\u30e0\u306e\u8a55\u4fa1\u3068\u3057\u3066\u306f\u3001\u6b21\u306e\u95a2\u6570\u3067\u3001 \u7dcf\u640d\u76ca\u3001\u53d6\u5f15\u6570\u3001\u5e73\u5747\u640d\u76ca\u3001\u30d7\u30ed\u30d5\u30a3\u30c3\u30c8\u30d5\u30a1\u30af\u30bf\u30fc\u3001\u6700\u5927\u30c9\u30ed\u30fc\u30c0\u30a6\u30f3\u3001\u30ea\u30ab\u30d0\u30ea\u30fc\u30d5\u30a1\u30af\u30bf\u30fc\u3092\u7b97\u51fa\u3057\u307e\u3059\u3002\u3060\u3044\u305f\u3044MetaTrader\u306e\u6700\u9069\u5316\u3067\u51fa\u529b\u3055\u308c\u308b\u306e\u3068\u540c\u3058\u3082\u306e\u3067\u3059\u3002\n\n````py\ndef BacktestReport(Trade, PL):\n    LongPL = PL['Long']\n    ShortPL = PL['Short']\n    LongTrades = np.count_nonzero(Trade['Long'])//2\n    ShortTrades = np.count_nonzero(Trade['Short'])//2\n    GrossProfit = LongPL.clip_lower(0).sum()+ShortPL.clip_lower(0).sum()\n    GrossLoss = LongPL.clip_upper(0).sum()+ShortPL.clip_upper(0).sum()\n    #\u7dcf\u640d\u76ca\n    Profit = GrossProfit+GrossLoss\n    #\u53d6\u5f15\u6570\n    Trades = LongTrades+ShortTrades\n    #\u5e73\u5747\u640d\u76ca\n    if Trades==0: Average = 0\n    else: Average = Profit/Trades\n    #\u30d7\u30ed\u30d5\u30a3\u30c3\u30c8\u30d5\u30a1\u30af\u30bf\u30fc\n    if GrossLoss==0: PF=100\n    else: PF = -GrossProfit/GrossLoss\n    #\u6700\u5927\u30c9\u30ed\u30fc\u30c0\u30a6\u30f3\n    Equity = (LongPL+ShortPL).cumsum()\n    MDD = (Equity.cummax()-Equity).max()\n    #\u30ea\u30ab\u30d0\u30ea\u30fc\u30d5\u30a1\u30af\u30bf\u30fc\n    if MDD==0: RF=100\n    else: RF = Profit/MDD\n    return np.array([Profit, Trades, Average, PF, MDD, RF])\n````\n\n# \u6700\u9069\u5316\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u305d\u306e\u7bc4\u56f2\n\n\u524d\u56de\u306e\u30d0\u30c3\u30af\u30c6\u30b9\u30c8\u3067\u306f\u3001\u9577\u671f\u79fb\u52d5\u5e73\u5747\u306e\u671f\u9593\u309230\u3001\u77ed\u671f\u79fb\u52d5\u5e73\u5747\u306e\u671f\u9593\u309210\u3001\u3068\u56fa\u5b9a\u3057\u3066\u30c6\u30b9\u30c8\u3057\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306e\u6700\u9069\u5316\u3067\u306f\u3001\u3053\u306e\u4e8c\u3064\u306e\u671f\u9593\u3092\u5909\u3048\u3066\u307f\u307e\u3059\u3002\n\n\u5909\u5316\u3055\u305b\u308b\u671f\u9593\u306f\u3001\u9577\u671f\u79fb\u52d5\u5e73\u5747\u306710\u304b\u308950\u3001\u77ed\u671f\u79fb\u52d5\u5e73\u5747\u30675\u304b\u308930\u3068\u3057\u3066\u307f\u307e\u3059\u3002\u6b21\u306e\u3088\u3046\u306b\u914d\u5217\u306b\u5165\u308c\u3066\u304a\u304d\u307e\u3059\u3002\n\n````py\nSlowMAperiod = np.arange(10, 51) #\u9577\u671f\u79fb\u52d5\u5e73\u5747\u671f\u9593\u306e\u7bc4\u56f2\nFastMAperiod = np.arange(5, 31)  #\u77ed\u671f\u79fb\u52d5\u5e73\u5747\u671f\u9593\u306e\u7bc4\u56f2\n````\n\n\u305d\u308c\u305e\u308c\u306e\u671f\u9593\u306f41\u901a\u308a\u300126\u901a\u308a\u3067\u3059\u304c\u3001\u4e8c\u3064\u306e\u671f\u9593\u306e\u7d44\u307f\u5408\u308f\u305b\u3060\u3068\u3001$41\\times 26=1066$\u901a\u308a\u3068\u306a\u308a\u307e\u3059\u3002\n\n# \u6700\u9069\u5316\n\n\u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u671f\u9593\u306e\u7bc4\u56f2\u3092\u4ee3\u5165\u3057\u3066\u6700\u9069\u5316\u3092\u884c\u3044\u307e\u3059\u3002\u671f\u9593\u306e\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\u304c\u5897\u3048\u3066\u304f\u308b\u3068\u8a08\u7b97\u6642\u9593\u304c\u7121\u8996\u3067\u304d\u306a\u304f\u306a\u308b\u306e\u3067\u3001\u6975\u529b\u3001\u7121\u99c4\u306a\u8a08\u7b97\u3092\u7701\u304b\u306a\u304f\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002\n\n\u3068\u308a\u3042\u3048\u305a\u300141\u901a\u308a\u300126\u901a\u308a\u306e\u79fb\u52d5\u5e73\u5747\u306e\u6642\u7cfb\u5217\u3092\u3042\u3089\u304b\u3058\u3081\u8a08\u7b97\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u305d\u3057\u3066\u30011066\u901a\u308a\u306e\u7d44\u307f\u5408\u308f\u305b\u306b\u5bfe\u3057\u3066\u3001\u58f2\u8cb7\u30b7\u30b0\u30ca\u30eb\u306e\u751f\u6210\u3001\u30d0\u30c3\u30af\u30c6\u30b9\u30c8\u3001\u8a55\u4fa1\u3092\u884c\u3044\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u3001\u8a55\u4fa1\u5024\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\u30b3\u30fc\u30c9\u306e\u4e00\u4f8b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n````py\ndef Optimize(ohlc, SlowMAperiod, FastMAperiod):\n    SlowMA = np.empty([len(SlowMAperiod), len(ohlc)]) #\u9577\u671f\u79fb\u52d5\u5e73\u5747\n    for i in range(len(SlowMAperiod)):\n        SlowMA[i] = ind.iMA(ohlc, SlowMAperiod[i])\n\n    FastMA = np.empty([len(FastMAperiod), len(ohlc)]) #\u77ed\u671f\u79fb\u52d5\u5e73\u5747\n    for i in range(len(FastMAperiod)):\n        FastMA[i] = ind.iMA(ohlc, FastMAperiod[i])\n    \n    N = len(SlowMAperiod)*len(FastMAperiod)\n    Eval = np.empty([N, 6]) #\u8a55\u4fa1\u9805\u76ee\n    Slow = np.empty(N) #\u9577\u671f\u79fb\u52d5\u5e73\u5747\u671f\u9593\n    Fast = np.empty(N) #\u77ed\u671f\u79fb\u52d5\u5e73\u5747\u671f\u9593\n    def shift(x, n=1): return np.concatenate((np.zeros(n), x[:-n])) #\u30b7\u30d5\u30c8\u95a2\u6570\n    k = 0\n    for i in range(len(SlowMAperiod)):\n        for j in range(len(FastMAperiod)):\n            #\u8cb7\u3044\u30a8\u30f3\u30c8\u30ea\u30fc\u30b7\u30b0\u30ca\u30eb\n            BuyEntry = (FastMA[j] > SlowMA[i]) & (shift(FastMA[j]) <= shift(SlowMA[i]))\n            #\u58f2\u308a\u30a8\u30f3\u30c8\u30ea\u30fc\u30b7\u30b0\u30ca\u30eb\n            SellEntry = (FastMA[j] < SlowMA[i]) & (shift(FastMA[j]) >= shift(SlowMA[i]))\n            #\u8cb7\u3044\u30a8\u30b0\u30b8\u30c3\u30c8\u30b7\u30b0\u30ca\u30eb\n            BuyExit = SellEntry.copy()\n            #\u58f2\u308a\u30a8\u30b0\u30b8\u30c3\u30c8\u30b7\u30b0\u30ca\u30eb\n            SellExit = BuyEntry.copy()\n            #\u30d0\u30c3\u30af\u30c6\u30b9\u30c8\n            Trade, PL = Backtest(ohlc, BuyEntry, SellEntry, BuyExit, SellExit) \n            Eval[k] = BacktestReport(Trade, PL)\n            Slow[k] = SlowMAperiod[i]\n            Fast[k] = FastMAperiod[j]\n            k += 1\n    return pd.DataFrame({'Slow':Slow, 'Fast':Fast, 'Profit': Eval[:,0], 'Trades':Eval[:,1],\n                         'Average':Eval[:,2],'PF':Eval[:,3], 'MDD':Eval[:,4], 'RF':Eval[:,5]},\n                         columns=['Slow','Fast','Profit','Trades','Average','PF','MDD','RF'])\n            \nresult = Optimize(ohlc, SlowMAperiod, FastMAperiod)\n````\n\n\u8a08\u7b97\u6642\u9593\u304c\u6c17\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u304c\u3001Core i5-3337U 1.8GHz\u306eCPU\u3067\u300112\u79d2\u307b\u3069\u3067\u3057\u305f\u3002\u540c\u3058\u6761\u4ef6\u306e\u6700\u9069\u5316\u3092MetaTrader5\u3067\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u304c\u300150\u79d2\u8fd1\u304f\u304b\u304b\u3063\u305f\u306e\u3067\u3001Python\u3068\u3057\u3066\u306f\u3001\u307e\u3042\u307e\u3042\u5b9f\u7528\u53ef\u80fd\u306a\u901f\u5ea6\u3060\u3063\u305f\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u6700\u9069\u5316\u306e\u7d50\u679c\n\n\u6700\u9069\u5316\u306e\u7d50\u679c\u306f\u3001\u597d\u307f\u306e\u9805\u76ee\u3067\u30bd\u30fc\u30c8\u3059\u308b\u3053\u3068\u3067\u3001\u6700\u9069\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u7dcf\u640d\u76ca\u3067\u30bd\u30fc\u30c8\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n````py\nresult.sort_values('Profit', ascending=False).head(20)\n````\n\n            Slow  Fast  Profit  Trades   Average        PF     MDD        RF\n       445  27.0   8.0  2507.1   264.0  9.496591  1.423497   485.1  5.168213\n       470  28.0   7.0  2486.0   260.0  9.561538  1.419642   481.2  5.166251\n       446  27.0   9.0  2263.3   252.0  8.981349  1.376432   624.7  3.623019\n       444  27.0   7.0  2171.4   272.0  7.983088  1.341276   504.7  4.302358\n       471  28.0   8.0  2102.3   250.0  8.409200  1.359030   540.3  3.890986\n       497  29.0   8.0  2093.3   242.0  8.650000  1.365208   603.8  3.466876\n       495  29.0   6.0  2063.5   256.0  8.060547  1.342172   620.6  3.325008\n       498  29.0   9.0  2053.5   238.0  8.628151  1.362451   686.5  2.991260\n       546  31.0   5.0  1959.4   254.0  7.714173  1.344256   529.7  3.699075\n       520  30.0   5.0  1940.3   276.0  7.030072  1.313538   681.7  2.846267\n       496  29.0   7.0  1931.5   248.0  7.788306  1.322891   611.3  3.159660\n       422  26.0  11.0  1903.4   248.0  7.675000  1.309702   708.7  2.685763\n       523  30.0   8.0  1903.0   232.0  8.202586  1.327680   823.9  2.309746\n       524  30.0   9.0  1875.8   234.0  8.016239  1.328598   908.6  2.064495\n       573  32.0   6.0  1820.8   242.0  7.523967  1.320688   639.8  2.845889\n       420  26.0   9.0  1819.1   258.0  7.050775  1.282035   667.0  2.727286\n       572  32.0   5.0  1808.2   256.0  7.063281  1.313564   522.9  3.458023\n       598  33.0   5.0  1799.6   248.0  7.256452  1.317183   613.2  2.934768\n       419  26.0   8.0  1777.4   274.0  6.486861  1.273817   552.7  3.215849\n       434  26.0  23.0  1739.6   368.0  4.727174  1.241049  1235.5  1.408013\n\n\u3053\u308c\u3088\u308a\u3001\u7dcf\u640d\u76ca\u304c\u6700\u5927\u3068\u306a\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u306f\u3001\u9577\u671f\u79fb\u52d5\u5e73\u5747\u306e\u671f\u9593\u304c27\u3001\u77ed\u671f\u79fb\u52d5\u5e73\u5747\u306e\u671f\u9593\u304c8\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u8a66\u3057\u306b\u3001\u3053\u306e\u671f\u9593\u3067\u30d0\u30c3\u30af\u30c6\u30b9\u30c8\u3057\u305f\u8cc7\u7523\u66f2\u7dda\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n![chart.png](https://qiita-image-store.s3.amazonaws.com/0/131169/88fc9f6a-c148-1a7d-7287-b226d781d854.png)\n\n\u3044\u3044\u3067\u3059\u306d\u3002\u305f\u3060\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6700\u9069\u5316\u3092\u3059\u308c\u3070\u3001\u3053\u306e\u7a0b\u5ea6\u306e\u7d50\u679c\u304c\u51fa\u308b\u306e\u306f\u5f53\u305f\u308a\u524d\u3067\u3001\u3042\u307e\u308a\u559c\u3079\u308b\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u5225\u306e\u671f\u9593\u306e\u30d0\u30c3\u30af\u30c6\u30b9\u30c8\u3092\u3057\u3066\u304c\u3063\u304b\u308a\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\n\u4eca\u56de\u306fMetaTrader\u306e\u30d0\u30c3\u30af\u30c6\u30b9\u30c8\u3088\u308a\u901f\u3044\u7d50\u679c\u304c\u51fa\u305f\u3060\u3051\u3067\u3088\u3057\u3068\u3057\u307e\u3059\u3002MetaTrader\u3067\u306f\u30c6\u30a3\u30c3\u30af\u5358\u4f4d\u306e\u30d0\u30c3\u30af\u30c6\u30b9\u30c8\u3082\u3067\u304d\u308b\u306e\u3067\u3059\u304c\u3001\u305d\u308c\u3092Python\u3067\u3084\u308d\u3046\u3068\u3059\u308b\u3068\u3001\u3084\u3063\u3071\u308a\u304b\u306a\u308a\u6642\u9593\u304c\u304b\u304b\u308b\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u307e\u3060\u307e\u3060\u5148\u306f\u9577\u3044\u3067\u3059\u3002\n"}