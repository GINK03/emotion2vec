{"context": " More than 1 year has passed since last update.\n\nSqoop\u3092\u4f7f\u3063\u3066\u307f\u308b\nSqoop\u306f\u3001RDB\u306a\u3069\u306e\u69cb\u9020\u5316\u3055\u308c\u305f\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u304b\u3089\u3001\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3057\u3066Hadoop\u3068\u9023\u643a\u3059\u308b\u30c4\u30fc\u30eb\u3002Apache \u306e\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3002\u5b9f\u969b\u4f7f\u3063\u3066\u307f\u305f\u306e\u3067\u3001\u5099\u5fd8\u9332\u4ee3\u308f\u308a\u306bBlog\u306b\u66f8\u3044\u3066\u304a\u304d\u307e\u3059\u3002\n\nhttp://sqoop.apache.org/\n\n\u74b0\u5883\u69cb\u7bc9\u306f\u5272\u611b\u3057\u307e\u3059\u3001\u3053\u3053\u3067\u306fHotronworks\u306eSandbox\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\u3068\u3042\u308b\u74b0\u5883\u5909\u6570\u304c\u672a\u8a2d\u5b9a\u3068\u304b\u3044\u3046WARNING\u304c\u51fa\u3066\u307e\u3059\u304c\u7121\u8996\u3057\u307e\u3059\u3002\n[root@sandbox ~]# sqoop version\nWarning: /usr/lib/sqoop/../accumulo does not exist! Accumulo imports will fail.\nPlease set $ACCUMULO_HOME to the root of your Accumulo installation.\n14/08/14 22:46:05 INFO sqoop.Sqoop: Running Sqoop version: 1.4.4.2.1.1.0-385\nSqoop 1.4.4.2.1.1.0-385\ngit commit id d3c37763356e55bbf152053f6db24b1bfe582972\nCompiled by jenkins on Wed Apr 16 16:12:40 PDT 2014\n\n\nhttp://hortonworks.com/products/hortonworks-sandbox/\n\n\n\u3084\u3063\u3066\u307f\u308b\nMySQL \u2192 HDFS\u3067\u3059\u3002\n\nDB\u4f5c\u6210\n\u3068\u308a\u3042\u3048\u305a\u3001sqoopsample DB\u3092\u4f5c\u6210\u3057\u3066\u6a29\u9650\u3092\u304c\u3063\u3064\u308a\u3042\u305f\u3048\u308b\u3002\n> mysql -u root -p\n> CREATE DATABASE sqoopsample;\n> GRANT ALL PRIVILEGES ON sqoopsample.* TO '%'@'localhost';\n> GRANT ALL PRIVILEGES ON sqoopsample.* TO ''@'localhost';\n> quit;\n\n\u6b21\u306e\u4ee5\u4e0b\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3057\u3066\u3001\u30c7\u30fc\u30bf\u3092\u5165\u308c\u308b\u3002\n\nmysql sqoopsample < sql.cmd\n\nCREATE TABLE employees(id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,\n                       name VARCHAR(64) NOT NULL,\n                       age  INT,\n                       birtday DATE,\n                       description VARCHAR(100));\nINSERT INTO employees  VALUES(NULL, 'TANAKA Ichiro', 30, '1984-10-10', 'hoge');\nINSERT INTO employees  VALUES(NULL, 'TANAKA Jiro'  , 29, '1985-12-22', 'fuge');\nINSERT INTO employees  VALUES(NULL, 'TANAKA Saburo', 28, '1986-08-01', NULL);\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30c7\u30fc\u30bf\u304c\u5165\u308c\u3070\u554f\u984c\u306a\u3044\u3067\u3059\u3002\nmysql> select * from employees;\n+----+---------------+------+------------+-------------+\n| id | name          | age  | birtday    | description |\n+----+---------------+------+------------+-------------+\n|  1 | TANAKA Ichiro |   30 | 1984-10-10 | hoge        |\n|  2 | TANAKA Jiro   |   29 | 1985-12-22 | fuge        |\n|  3 | TANAKA Saburo |   28 | 1986-08-01 | NULL        |\n+----+---------------+------+------------+-------------+\n3 rows in set (0.00 sec)\n\n\nSqoop\u5b9f\u884c\nSqoop\u3067\u30a4\u30f3\u30dd\u30fc\u30c8\u3092\u5b9f\u884c\u3057\u3066HDFS\u3078\u30c7\u30fc\u30bf\u3092\u8ee2\u9001\u3057\u307e\u3059\u3002\u8ee2\u9001\u305d\u308c\u81ea\u8eab\u304cMR\u30d7\u30ed\u30b0\u30e9\u30e0\u3089\u3057\u3044\u306e\u3067\u3001-m \u3067Mapper\u306e\u6570\u3092\u6307\u5b9a\u3067\u304d\u306a\u307e\u3057\u305f\u3002\u4ee5\u4e0b\u5b9f\u884c\u7d50\u679c\u3002\n[root@sandbox ~]# sqoop import --connect jdbc:mysql://localhost/sqoopsample --table employees -m 1\n\n...\n...\n\n[root@sandbox ~]# hadoop fs -ls employees\nFound 2 items\n-rw-r--r--   1 root root          0 2014-08-14 22:43 employees/_SUCCESS\n-rw-r--r--   1 root root        103 2014-08-14 22:43 employees/part-m-00000\n[root@sandbox ~]# hadoop fs -cat employees/part-m-00000\n1,TANAKA Ichiro,30,1984-10-10,hoge\n2,TANAKA Jiro,29,1985-12-22,fuge\n3,TANAKA Saburo,28,1986-08-01,null\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u8ee2\u9001\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u8ffd\u8a18\n\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u81ea\u52d5\u751f\u6210\u3055\u308c\u305fMR\u306eJava\u30d7\u30ed\u30b0\u30e9\u30e0\uff08\u30d5\u30a1\u30a4\u30eb\uff09\u304c\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\u3061\u3087\u3063\u3068\u9577\u3044\u306e\u3067\u3059\u304c\u3001\u8cbc\u308a\u4ed8\u3051\u3066\u304a\u304d\u307e\u3059\u3002\n// ORM class for table 'employees'\n// WARNING: This class is AUTO-GENERATED. Modify at your own risk.\n//\n// Debug information:\n// Generated date: Thu Aug 14 22:43:02 PDT 2014\n// For connector: org.apache.sqoop.manager.MySQLManager\nimport org.apache.hadoop.io.BytesWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.io.Writable;\nimport org.apache.hadoop.mapred.lib.db.DBWritable;\nimport com.cloudera.sqoop.lib.JdbcWritableBridge;\nimport com.cloudera.sqoop.lib.DelimiterSet;\nimport com.cloudera.sqoop.lib.FieldFormatter;\nimport com.cloudera.sqoop.lib.RecordParser;\nimport com.cloudera.sqoop.lib.BooleanParser;\nimport com.cloudera.sqoop.lib.BlobRef;\nimport com.cloudera.sqoop.lib.ClobRef;\nimport com.cloudera.sqoop.lib.LargeObjectLoader;\nimport com.cloudera.sqoop.lib.SqoopRecord;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.io.DataInput;\nimport java.io.DataOutput;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.sql.Date;\nimport java.sql.Time;\nimport java.sql.Timestamp;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.TreeMap;\n\npublic class employees extends SqoopRecord  implements DBWritable, Writable {\n  private final int PROTOCOL_VERSION = 3;\n  public int getClassFormatVersion() { return PROTOCOL_VERSION; }\n  protected ResultSet __cur_result_set;\n  private Integer id;\n  public Integer get_id() {\n    return id;\n  }\n  public void set_id(Integer id) {\n    this.id = id;\n  }\n  public employees with_id(Integer id) {\n    this.id = id;\n    return this;\n  }\n  private String name;\n  public String get_name() {\n    return name;\n  }\n  public void set_name(String name) {\n    this.name = name;\n  }\n  public employees with_name(String name) {\n    this.name = name;\n    return this;\n  }\n  private Integer age;\n  public Integer get_age() {\n    return age;\n  }\n  public void set_age(Integer age) {\n    this.age = age;\n  }\n  public employees with_age(Integer age) {\n    this.age = age;\n    return this;\n  }\n  private java.sql.Date birtday;\n  public java.sql.Date get_birtday() {\n    return birtday;\n  }\n  public void set_birtday(java.sql.Date birtday) {\n    this.birtday = birtday;\n  }\n  public employees with_birtday(java.sql.Date birtday) {\n    this.birtday = birtday;\n    return this;\n  }\n  private String description;\n  public String get_description() {\n    return description;\n  }\n  public void set_description(String description) {\n    this.description = description;\n  }\n  public employees with_description(String description) {\n    this.description = description;\n    return this;\n  }\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (!(o instanceof employees)) {\n      return false;\n    }\n    employees that = (employees) o;\n    boolean equal = true;\n    equal = equal && (this.id == null ? that.id == null : this.id.equals(that.id));\n    equal = equal && (this.name == null ? that.name == null : this.name.equals(that.name));\n    equal = equal && (this.age == null ? that.age == null : this.age.equals(that.age));\n    equal = equal && (this.birtday == null ? that.birtday == null : this.birtday.equals(that.birtday));\n    equal = equal && (this.description == null ? that.description == null : this.description.equals(that.description));\n    return equal;\n  }\n  public void readFields(ResultSet __dbResults) throws SQLException {\n    this.__cur_result_set = __dbResults;\n    this.id = JdbcWritableBridge.readInteger(1, __dbResults);\n    this.name = JdbcWritableBridge.readString(2, __dbResults);\n    this.age = JdbcWritableBridge.readInteger(3, __dbResults);\n    this.birtday = JdbcWritableBridge.readDate(4, __dbResults);\n    this.description = JdbcWritableBridge.readString(5, __dbResults);\n  }\n  public void loadLargeObjects(LargeObjectLoader __loader)\n      throws SQLException, IOException, InterruptedException {\n  }\n  public void write(PreparedStatement __dbStmt) throws SQLException {\n    write(__dbStmt, 0);\n  }\n\n  public int write(PreparedStatement __dbStmt, int __off) throws SQLException {\n    JdbcWritableBridge.writeInteger(id, 1 + __off, 4, __dbStmt);\n    JdbcWritableBridge.writeString(name, 2 + __off, 12, __dbStmt);\n    JdbcWritableBridge.writeInteger(age, 3 + __off, 4, __dbStmt);\n    JdbcWritableBridge.writeDate(birtday, 4 + __off, 91, __dbStmt);\n    JdbcWritableBridge.writeString(description, 5 + __off, 12, __dbStmt);\n    return 5;\n  }\n  public void readFields(DataInput __dataIn) throws IOException {\n    if (__dataIn.readBoolean()) { \n        this.id = null;\n    } else {\n    this.id = Integer.valueOf(__dataIn.readInt());\n    }\n    if (__dataIn.readBoolean()) { \n        this.name = null;\n    } else {\n    this.name = Text.readString(__dataIn);\n    }\n    if (__dataIn.readBoolean()) { \n        this.age = null;\n    } else {\n    this.age = Integer.valueOf(__dataIn.readInt());\n    }\n    if (__dataIn.readBoolean()) { \n        this.birtday = null;\n    } else {\n    this.birtday = new Date(__dataIn.readLong());\n    }\n    if (__dataIn.readBoolean()) { \n        this.description = null;\n    } else {\n    this.description = Text.readString(__dataIn);\n    }\n  }\n  public void write(DataOutput __dataOut) throws IOException {\n    if (null == this.id) { \n        __dataOut.writeBoolean(true);\n    } else {\n        __dataOut.writeBoolean(false);\n    __dataOut.writeInt(this.id);\n    }\n    if (null == this.name) { \n        __dataOut.writeBoolean(true);\n    } else {\n        __dataOut.writeBoolean(false);\n    Text.writeString(__dataOut, name);\n    }\n    if (null == this.age) { \n        __dataOut.writeBoolean(true);\n    } else {\n        __dataOut.writeBoolean(false);\n    __dataOut.writeInt(this.age);\n    }\n    if (null == this.birtday) { \n        __dataOut.writeBoolean(true);\n    } else {\n        __dataOut.writeBoolean(false);\n    __dataOut.writeLong(this.birtday.getTime());\n    }\n    if (null == this.description) { \n        __dataOut.writeBoolean(true);\n    } else {\n        __dataOut.writeBoolean(false);\n    Text.writeString(__dataOut, description);\n    }\n  }\n  private static final DelimiterSet __outputDelimiters = new DelimiterSet((char) 44, (char) 10, (char) 0, (char) 0, false);\n  public String toString() {\n    return toString(__outputDelimiters, true);\n  }\n  public String toString(DelimiterSet delimiters) {\n    return toString(delimiters, true);\n  }\n  public String toString(boolean useRecordDelim) {\n    return toString(__outputDelimiters, useRecordDelim);\n  }\n  public String toString(DelimiterSet delimiters, boolean useRecordDelim) {\n    StringBuilder __sb = new StringBuilder();\n    char fieldDelim = delimiters.getFieldsTerminatedBy();\n    __sb.append(FieldFormatter.escapeAndEnclose(id==null?\"null\":\"\" + id, delimiters));\n    __sb.append(fieldDelim);\n    __sb.append(FieldFormatter.escapeAndEnclose(name==null?\"null\":name, delimiters));\n    __sb.append(fieldDelim);\n    __sb.append(FieldFormatter.escapeAndEnclose(age==null?\"null\":\"\" + age, delimiters));\n    __sb.append(fieldDelim);\n    __sb.append(FieldFormatter.escapeAndEnclose(birtday==null?\"null\":\"\" + birtday, delimiters));\n    __sb.append(fieldDelim);\n    __sb.append(FieldFormatter.escapeAndEnclose(description==null?\"null\":description, delimiters));\n    if (useRecordDelim) {\n      __sb.append(delimiters.getLinesTerminatedBy());\n    }\n    return __sb.toString();\n  }\n  private static final DelimiterSet __inputDelimiters = new DelimiterSet((char) 44, (char) 10, (char) 0, (char) 0, false);\n  private RecordParser __parser;\n  public void parse(Text __record) throws RecordParser.ParseError {\n    if (null == this.__parser) {\n      this.__parser = new RecordParser(__inputDelimiters);\n    }\n    List<String> __fields = this.__parser.parseRecord(__record);\n    __loadFromFields(__fields);\n  }\n\n  public void parse(CharSequence __record) throws RecordParser.ParseError {\n    if (null == this.__parser) {\n      this.__parser = new RecordParser(__inputDelimiters);\n    }\n    List<String> __fields = this.__parser.parseRecord(__record);\n    __loadFromFields(__fields);\n  }\n\n  public void parse(byte [] __record) throws RecordParser.ParseError {\n    if (null == this.__parser) {\n      this.__parser = new RecordParser(__inputDelimiters);\n    }\n    List<String> __fields = this.__parser.parseRecord(__record);\n    __loadFromFields(__fields);\n  }\n\n  public void parse(char [] __record) throws RecordParser.ParseError {\n    if (null == this.__parser) {\n      this.__parser = new RecordParser(__inputDelimiters);\n    }\n    List<String> __fields = this.__parser.parseRecord(__record);\n    __loadFromFields(__fields);\n  }\n\n  public void parse(ByteBuffer __record) throws RecordParser.ParseError {\n    if (null == this.__parser) {\n      this.__parser = new RecordParser(__inputDelimiters);\n    }\n    List<String> __fields = this.__parser.parseRecord(__record);\n    __loadFromFields(__fields);\n  }\n\n  public void parse(CharBuffer __record) throws RecordParser.ParseError {\n    if (null == this.__parser) {\n      this.__parser = new RecordParser(__inputDelimiters);\n    }\n    List<String> __fields = this.__parser.parseRecord(__record);\n    __loadFromFields(__fields);\n  }\n\n  private void __loadFromFields(List<String> fields) {\n    Iterator<String> __it = fields.listIterator();\n    String __cur_str = null;\n    try {\n    __cur_str = __it.next();\n    if (__cur_str.equals(\"null\") || __cur_str.length() == 0) { this.id = null; } else {\n      this.id = Integer.valueOf(__cur_str);\n    }\n\n    __cur_str = __it.next();\n    if (__cur_str.equals(\"null\")) { this.name = null; } else {\n      this.name = __cur_str;\n    }\n\n    __cur_str = __it.next();\n    if (__cur_str.equals(\"null\") || __cur_str.length() == 0) { this.age = null; } else {\n      this.age = Integer.valueOf(__cur_str);\n    }\n\n    __cur_str = __it.next();\n    if (__cur_str.equals(\"null\") || __cur_str.length() == 0) { this.birtday = null; } else {\n      this.birtday = java.sql.Date.valueOf(__cur_str);\n    }\n\n    __cur_str = __it.next();\n    if (__cur_str.equals(\"null\")) { this.description = null; } else {\n      this.description = __cur_str;\n    }\n\n    } catch (RuntimeException e) {    throw new RuntimeException(\"Can't parse input data: '\" + __cur_str + \"'\", e);    }  }\n\n  public Object clone() throws CloneNotSupportedException {\n    employees o = (employees) super.clone();\n    o.birtday = (o.birtday != null) ? (java.sql.Date) o.birtday.clone() : null;\n    return o;\n  }\n\n  public Map<String, Object> getFieldMap() {\n    Map<String, Object> __sqoop$field_map = new TreeMap<String, Object>();\n    __sqoop$field_map.put(\"id\", this.id);\n    __sqoop$field_map.put(\"name\", this.name);\n    __sqoop$field_map.put(\"age\", this.age);\n    __sqoop$field_map.put(\"birtday\", this.birtday);\n    __sqoop$field_map.put(\"description\", this.description);\n    return __sqoop$field_map;\n  }\n\n  public void setField(String __fieldName, Object __fieldVal) {\n    if (\"id\".equals(__fieldName)) {\n      this.id = (Integer) __fieldVal;\n    }\n    else    if (\"name\".equals(__fieldName)) {\n      this.name = (String) __fieldVal;\n    }\n    else    if (\"age\".equals(__fieldName)) {\n      this.age = (Integer) __fieldVal;\n    }\n    else    if (\"birtday\".equals(__fieldName)) {\n      this.birtday = (java.sql.Date) __fieldVal;\n    }\n    else    if (\"description\".equals(__fieldName)) {\n      this.description = (String) __fieldVal;\n    }\n    else {\n      throw new RuntimeException(\"No such field: \" + __fieldName);\n    }\n  }\n}\n\n## Sqoop\u3092\u4f7f\u3063\u3066\u307f\u308b\nSqoop\u306f\u3001RDB\u306a\u3069\u306e\u69cb\u9020\u5316\u3055\u308c\u305f\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u304b\u3089\u3001\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3057\u3066Hadoop\u3068\u9023\u643a\u3059\u308b\u30c4\u30fc\u30eb\u3002Apache \u306e\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3002\u5b9f\u969b\u4f7f\u3063\u3066\u307f\u305f\u306e\u3067\u3001\u5099\u5fd8\u9332\u4ee3\u308f\u308a\u306bBlog\u306b\u66f8\u3044\u3066\u304a\u304d\u307e\u3059\u3002\n\n* http://sqoop.apache.org/\n\n\n\u74b0\u5883\u69cb\u7bc9\u306f\u5272\u611b\u3057\u307e\u3059\u3001\u3053\u3053\u3067\u306fHotronworks\u306eSandbox\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\u3068\u3042\u308b\u74b0\u5883\u5909\u6570\u304c\u672a\u8a2d\u5b9a\u3068\u304b\u3044\u3046WARNING\u304c\u51fa\u3066\u307e\u3059\u304c\u7121\u8996\u3057\u307e\u3059\u3002\n\n```shell-session\n[root@sandbox ~]# sqoop version\nWarning: /usr/lib/sqoop/../accumulo does not exist! Accumulo imports will fail.\nPlease set $ACCUMULO_HOME to the root of your Accumulo installation.\n14/08/14 22:46:05 INFO sqoop.Sqoop: Running Sqoop version: 1.4.4.2.1.1.0-385\nSqoop 1.4.4.2.1.1.0-385\ngit commit id d3c37763356e55bbf152053f6db24b1bfe582972\nCompiled by jenkins on Wed Apr 16 16:12:40 PDT 2014\n```\n\n* http://hortonworks.com/products/hortonworks-sandbox/\n\n## \u3084\u3063\u3066\u307f\u308b\n\nMySQL \u2192 HDFS\u3067\u3059\u3002\n\n### DB\u4f5c\u6210\n\n\u3068\u308a\u3042\u3048\u305a\u3001sqoopsample DB\u3092\u4f5c\u6210\u3057\u3066\u6a29\u9650\u3092\u304c\u3063\u3064\u308a\u3042\u305f\u3048\u308b\u3002\n\n```sql\n> mysql -u root -p\n> CREATE DATABASE sqoopsample;\n> GRANT ALL PRIVILEGES ON sqoopsample.* TO '%'@'localhost';\n> GRANT ALL PRIVILEGES ON sqoopsample.* TO ''@'localhost';\n> quit;\n```\n\n\u6b21\u306e\u4ee5\u4e0b\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3057\u3066\u3001\u30c7\u30fc\u30bf\u3092\u5165\u308c\u308b\u3002\n\n> mysql sqoopsample < sql.cmd\n\n```sql\nCREATE TABLE employees(id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,\n                       name VARCHAR(64) NOT NULL,\n                       age  INT,\n                       birtday DATE,\n                       description VARCHAR(100));\nINSERT INTO employees  VALUES(NULL, 'TANAKA Ichiro', 30, '1984-10-10', 'hoge');\nINSERT INTO employees  VALUES(NULL, 'TANAKA Jiro'  , 29, '1985-12-22', 'fuge');\nINSERT INTO employees  VALUES(NULL, 'TANAKA Saburo', 28, '1986-08-01', NULL);\n```\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30c7\u30fc\u30bf\u304c\u5165\u308c\u3070\u554f\u984c\u306a\u3044\u3067\u3059\u3002\n\n```sql\nmysql> select * from employees;\n+----+---------------+------+------------+-------------+\n| id | name          | age  | birtday    | description |\n+----+---------------+------+------------+-------------+\n|  1 | TANAKA Ichiro |   30 | 1984-10-10 | hoge        |\n|  2 | TANAKA Jiro   |   29 | 1985-12-22 | fuge        |\n|  3 | TANAKA Saburo |   28 | 1986-08-01 | NULL        |\n+----+---------------+------+------------+-------------+\n3 rows in set (0.00 sec)\n```\n\n## Sqoop\u5b9f\u884c\n\nSqoop\u3067\u30a4\u30f3\u30dd\u30fc\u30c8\u3092\u5b9f\u884c\u3057\u3066HDFS\u3078\u30c7\u30fc\u30bf\u3092\u8ee2\u9001\u3057\u307e\u3059\u3002\u8ee2\u9001\u305d\u308c\u81ea\u8eab\u304cMR\u30d7\u30ed\u30b0\u30e9\u30e0\u3089\u3057\u3044\u306e\u3067\u3001-m \u3067Mapper\u306e\u6570\u3092\u6307\u5b9a\u3067\u304d\u306a\u307e\u3057\u305f\u3002\u4ee5\u4e0b\u5b9f\u884c\u7d50\u679c\u3002\n\n```shell-session\n[root@sandbox ~]# sqoop import --connect jdbc:mysql://localhost/sqoopsample --table employees -m 1\n\n...\n...\n\n[root@sandbox ~]# hadoop fs -ls employees\nFound 2 items\n-rw-r--r--   1 root root          0 2014-08-14 22:43 employees/_SUCCESS\n-rw-r--r--   1 root root        103 2014-08-14 22:43 employees/part-m-00000\n[root@sandbox ~]# hadoop fs -cat employees/part-m-00000\n1,TANAKA Ichiro,30,1984-10-10,hoge\n2,TANAKA Jiro,29,1985-12-22,fuge\n3,TANAKA Saburo,28,1986-08-01,null\n```\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u8ee2\u9001\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n## \u8ffd\u8a18\n\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u81ea\u52d5\u751f\u6210\u3055\u308c\u305fMR\u306eJava\u30d7\u30ed\u30b0\u30e9\u30e0\uff08\u30d5\u30a1\u30a4\u30eb\uff09\u304c\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\u3061\u3087\u3063\u3068\u9577\u3044\u306e\u3067\u3059\u304c\u3001\u8cbc\u308a\u4ed8\u3051\u3066\u304a\u304d\u307e\u3059\u3002\n\n```java\n// ORM class for table 'employees'\n// WARNING: This class is AUTO-GENERATED. Modify at your own risk.\n//\n// Debug information:\n// Generated date: Thu Aug 14 22:43:02 PDT 2014\n// For connector: org.apache.sqoop.manager.MySQLManager\nimport org.apache.hadoop.io.BytesWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.io.Writable;\nimport org.apache.hadoop.mapred.lib.db.DBWritable;\nimport com.cloudera.sqoop.lib.JdbcWritableBridge;\nimport com.cloudera.sqoop.lib.DelimiterSet;\nimport com.cloudera.sqoop.lib.FieldFormatter;\nimport com.cloudera.sqoop.lib.RecordParser;\nimport com.cloudera.sqoop.lib.BooleanParser;\nimport com.cloudera.sqoop.lib.BlobRef;\nimport com.cloudera.sqoop.lib.ClobRef;\nimport com.cloudera.sqoop.lib.LargeObjectLoader;\nimport com.cloudera.sqoop.lib.SqoopRecord;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.io.DataInput;\nimport java.io.DataOutput;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.sql.Date;\nimport java.sql.Time;\nimport java.sql.Timestamp;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.TreeMap;\n\npublic class employees extends SqoopRecord  implements DBWritable, Writable {\n  private final int PROTOCOL_VERSION = 3;\n  public int getClassFormatVersion() { return PROTOCOL_VERSION; }\n  protected ResultSet __cur_result_set;\n  private Integer id;\n  public Integer get_id() {\n    return id;\n  }\n  public void set_id(Integer id) {\n    this.id = id;\n  }\n  public employees with_id(Integer id) {\n    this.id = id;\n    return this;\n  }\n  private String name;\n  public String get_name() {\n    return name;\n  }\n  public void set_name(String name) {\n    this.name = name;\n  }\n  public employees with_name(String name) {\n    this.name = name;\n    return this;\n  }\n  private Integer age;\n  public Integer get_age() {\n    return age;\n  }\n  public void set_age(Integer age) {\n    this.age = age;\n  }\n  public employees with_age(Integer age) {\n    this.age = age;\n    return this;\n  }\n  private java.sql.Date birtday;\n  public java.sql.Date get_birtday() {\n    return birtday;\n  }\n  public void set_birtday(java.sql.Date birtday) {\n    this.birtday = birtday;\n  }\n  public employees with_birtday(java.sql.Date birtday) {\n    this.birtday = birtday;\n    return this;\n  }\n  private String description;\n  public String get_description() {\n    return description;\n  }\n  public void set_description(String description) {\n    this.description = description;\n  }\n  public employees with_description(String description) {\n    this.description = description;\n    return this;\n  }\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (!(o instanceof employees)) {\n      return false;\n    }\n    employees that = (employees) o;\n    boolean equal = true;\n    equal = equal && (this.id == null ? that.id == null : this.id.equals(that.id));\n    equal = equal && (this.name == null ? that.name == null : this.name.equals(that.name));\n    equal = equal && (this.age == null ? that.age == null : this.age.equals(that.age));\n    equal = equal && (this.birtday == null ? that.birtday == null : this.birtday.equals(that.birtday));\n    equal = equal && (this.description == null ? that.description == null : this.description.equals(that.description));\n    return equal;\n  }\n  public void readFields(ResultSet __dbResults) throws SQLException {\n    this.__cur_result_set = __dbResults;\n    this.id = JdbcWritableBridge.readInteger(1, __dbResults);\n    this.name = JdbcWritableBridge.readString(2, __dbResults);\n    this.age = JdbcWritableBridge.readInteger(3, __dbResults);\n    this.birtday = JdbcWritableBridge.readDate(4, __dbResults);\n    this.description = JdbcWritableBridge.readString(5, __dbResults);\n  }\n  public void loadLargeObjects(LargeObjectLoader __loader)\n      throws SQLException, IOException, InterruptedException {\n  }\n  public void write(PreparedStatement __dbStmt) throws SQLException {\n    write(__dbStmt, 0);\n  }\n\n  public int write(PreparedStatement __dbStmt, int __off) throws SQLException {\n    JdbcWritableBridge.writeInteger(id, 1 + __off, 4, __dbStmt);\n    JdbcWritableBridge.writeString(name, 2 + __off, 12, __dbStmt);\n    JdbcWritableBridge.writeInteger(age, 3 + __off, 4, __dbStmt);\n    JdbcWritableBridge.writeDate(birtday, 4 + __off, 91, __dbStmt);\n    JdbcWritableBridge.writeString(description, 5 + __off, 12, __dbStmt);\n    return 5;\n  }\n  public void readFields(DataInput __dataIn) throws IOException {\n    if (__dataIn.readBoolean()) { \n        this.id = null;\n    } else {\n    this.id = Integer.valueOf(__dataIn.readInt());\n    }\n    if (__dataIn.readBoolean()) { \n        this.name = null;\n    } else {\n    this.name = Text.readString(__dataIn);\n    }\n    if (__dataIn.readBoolean()) { \n        this.age = null;\n    } else {\n    this.age = Integer.valueOf(__dataIn.readInt());\n    }\n    if (__dataIn.readBoolean()) { \n        this.birtday = null;\n    } else {\n    this.birtday = new Date(__dataIn.readLong());\n    }\n    if (__dataIn.readBoolean()) { \n        this.description = null;\n    } else {\n    this.description = Text.readString(__dataIn);\n    }\n  }\n  public void write(DataOutput __dataOut) throws IOException {\n    if (null == this.id) { \n        __dataOut.writeBoolean(true);\n    } else {\n        __dataOut.writeBoolean(false);\n    __dataOut.writeInt(this.id);\n    }\n    if (null == this.name) { \n        __dataOut.writeBoolean(true);\n    } else {\n        __dataOut.writeBoolean(false);\n    Text.writeString(__dataOut, name);\n    }\n    if (null == this.age) { \n        __dataOut.writeBoolean(true);\n    } else {\n        __dataOut.writeBoolean(false);\n    __dataOut.writeInt(this.age);\n    }\n    if (null == this.birtday) { \n        __dataOut.writeBoolean(true);\n    } else {\n        __dataOut.writeBoolean(false);\n    __dataOut.writeLong(this.birtday.getTime());\n    }\n    if (null == this.description) { \n        __dataOut.writeBoolean(true);\n    } else {\n        __dataOut.writeBoolean(false);\n    Text.writeString(__dataOut, description);\n    }\n  }\n  private static final DelimiterSet __outputDelimiters = new DelimiterSet((char) 44, (char) 10, (char) 0, (char) 0, false);\n  public String toString() {\n    return toString(__outputDelimiters, true);\n  }\n  public String toString(DelimiterSet delimiters) {\n    return toString(delimiters, true);\n  }\n  public String toString(boolean useRecordDelim) {\n    return toString(__outputDelimiters, useRecordDelim);\n  }\n  public String toString(DelimiterSet delimiters, boolean useRecordDelim) {\n    StringBuilder __sb = new StringBuilder();\n    char fieldDelim = delimiters.getFieldsTerminatedBy();\n    __sb.append(FieldFormatter.escapeAndEnclose(id==null?\"null\":\"\" + id, delimiters));\n    __sb.append(fieldDelim);\n    __sb.append(FieldFormatter.escapeAndEnclose(name==null?\"null\":name, delimiters));\n    __sb.append(fieldDelim);\n    __sb.append(FieldFormatter.escapeAndEnclose(age==null?\"null\":\"\" + age, delimiters));\n    __sb.append(fieldDelim);\n    __sb.append(FieldFormatter.escapeAndEnclose(birtday==null?\"null\":\"\" + birtday, delimiters));\n    __sb.append(fieldDelim);\n    __sb.append(FieldFormatter.escapeAndEnclose(description==null?\"null\":description, delimiters));\n    if (useRecordDelim) {\n      __sb.append(delimiters.getLinesTerminatedBy());\n    }\n    return __sb.toString();\n  }\n  private static final DelimiterSet __inputDelimiters = new DelimiterSet((char) 44, (char) 10, (char) 0, (char) 0, false);\n  private RecordParser __parser;\n  public void parse(Text __record) throws RecordParser.ParseError {\n    if (null == this.__parser) {\n      this.__parser = new RecordParser(__inputDelimiters);\n    }\n    List<String> __fields = this.__parser.parseRecord(__record);\n    __loadFromFields(__fields);\n  }\n\n  public void parse(CharSequence __record) throws RecordParser.ParseError {\n    if (null == this.__parser) {\n      this.__parser = new RecordParser(__inputDelimiters);\n    }\n    List<String> __fields = this.__parser.parseRecord(__record);\n    __loadFromFields(__fields);\n  }\n\n  public void parse(byte [] __record) throws RecordParser.ParseError {\n    if (null == this.__parser) {\n      this.__parser = new RecordParser(__inputDelimiters);\n    }\n    List<String> __fields = this.__parser.parseRecord(__record);\n    __loadFromFields(__fields);\n  }\n\n  public void parse(char [] __record) throws RecordParser.ParseError {\n    if (null == this.__parser) {\n      this.__parser = new RecordParser(__inputDelimiters);\n    }\n    List<String> __fields = this.__parser.parseRecord(__record);\n    __loadFromFields(__fields);\n  }\n\n  public void parse(ByteBuffer __record) throws RecordParser.ParseError {\n    if (null == this.__parser) {\n      this.__parser = new RecordParser(__inputDelimiters);\n    }\n    List<String> __fields = this.__parser.parseRecord(__record);\n    __loadFromFields(__fields);\n  }\n\n  public void parse(CharBuffer __record) throws RecordParser.ParseError {\n    if (null == this.__parser) {\n      this.__parser = new RecordParser(__inputDelimiters);\n    }\n    List<String> __fields = this.__parser.parseRecord(__record);\n    __loadFromFields(__fields);\n  }\n\n  private void __loadFromFields(List<String> fields) {\n    Iterator<String> __it = fields.listIterator();\n    String __cur_str = null;\n    try {\n    __cur_str = __it.next();\n    if (__cur_str.equals(\"null\") || __cur_str.length() == 0) { this.id = null; } else {\n      this.id = Integer.valueOf(__cur_str);\n    }\n\n    __cur_str = __it.next();\n    if (__cur_str.equals(\"null\")) { this.name = null; } else {\n      this.name = __cur_str;\n    }\n\n    __cur_str = __it.next();\n    if (__cur_str.equals(\"null\") || __cur_str.length() == 0) { this.age = null; } else {\n      this.age = Integer.valueOf(__cur_str);\n    }\n\n    __cur_str = __it.next();\n    if (__cur_str.equals(\"null\") || __cur_str.length() == 0) { this.birtday = null; } else {\n      this.birtday = java.sql.Date.valueOf(__cur_str);\n    }\n\n    __cur_str = __it.next();\n    if (__cur_str.equals(\"null\")) { this.description = null; } else {\n      this.description = __cur_str;\n    }\n\n    } catch (RuntimeException e) {    throw new RuntimeException(\"Can't parse input data: '\" + __cur_str + \"'\", e);    }  }\n\n  public Object clone() throws CloneNotSupportedException {\n    employees o = (employees) super.clone();\n    o.birtday = (o.birtday != null) ? (java.sql.Date) o.birtday.clone() : null;\n    return o;\n  }\n\n  public Map<String, Object> getFieldMap() {\n    Map<String, Object> __sqoop$field_map = new TreeMap<String, Object>();\n    __sqoop$field_map.put(\"id\", this.id);\n    __sqoop$field_map.put(\"name\", this.name);\n    __sqoop$field_map.put(\"age\", this.age);\n    __sqoop$field_map.put(\"birtday\", this.birtday);\n    __sqoop$field_map.put(\"description\", this.description);\n    return __sqoop$field_map;\n  }\n\n  public void setField(String __fieldName, Object __fieldVal) {\n    if (\"id\".equals(__fieldName)) {\n      this.id = (Integer) __fieldVal;\n    }\n    else    if (\"name\".equals(__fieldName)) {\n      this.name = (String) __fieldVal;\n    }\n    else    if (\"age\".equals(__fieldName)) {\n      this.age = (Integer) __fieldVal;\n    }\n    else    if (\"birtday\".equals(__fieldName)) {\n      this.birtday = (java.sql.Date) __fieldVal;\n    }\n    else    if (\"description\".equals(__fieldName)) {\n      this.description = (String) __fieldVal;\n    }\n    else {\n      throw new RuntimeException(\"No such field: \" + __fieldName);\n    }\n  }\n}\n```\n", "tags": ["hadoop"]}