{"context": "\n\n\u6982\u8981\npython \u306b\u306f redis-py \u3068\u3044\u3046\u4fbf\u5229\u306a redis \u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u5b89\u5168\u306b\u4f7f\u3046\u306e\u304c\u96e3\u3057\u304b\u3063\u305f\u306e\u3067\u3001\u30b7\u30f3\u30d7\u30eb\u3067\u76f4\u611f\u7684\u306a\u30e9\u30c3\u30d1\u30fc\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n\nhttps://github.com/groove-x/gxredis\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\n$ pip install gxredis\n\n\n\u8a2d\u8a08\u601d\u60f3\n\n\u7121\u7406\u306b Active Record \u4ed5\u69d8\u306b\u3057\u306a\u3044\u3067\u3001\u7d20\u76f4\u306b redis \u306e\u7279\u6027\u3092\u6d3b\u304b\u3059\n\u8aa4\u3063\u305f\u64cd\u4f5c\u304c\u767a\u751f\u3057\u306b\u304f\u3044\u69cb\u6210\u306b\u3059\u308b\nredis-py \u3067\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u305d\u306e\u307e\u307e\u6d3b\u304b\u3059\n\n\n\u4f7f\u3044\u65b9\n\nDAO \u306e\u5b9a\u7fa9\nDAO \u306b\u306f key \u306e\u66f8\u5f0f\u3068\u7a2e\u985e\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\nimport redis\nfrom gxredis import *\n\nclass ItemDao(RedisDao):\n       item = RedisString(\"device:{device_id}:item:{item_id}\")\n       item_list = RedisList(\"device:{device_id}:list\")\n       item_set = RedisSet(\"device:{device_id}:set\")\n       item_hash = RedisHash(\"device:{device_id}:hash\")\n       item_zset = RedisSortedSet(\"device:{device_id}:zset\")\n\n\nDAO \u306e\u521d\u671f\u5316\nredis-py \u306e StrictRedis \u3092\u7b2c1\u5f15\u6570\u306b\u6e21\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u7b2c2\u5f15\u6570\u306b\u306f\u3001key \u3092\u69cb\u6210\u3059\u308b\u305f\u3081\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6e21\u3057\u307e\u3059\u3002\u8db3\u308a\u306a\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u5f8c\u3067\u88dc\u5b8c\u3067\u304d\u308b\u306e\u3067\u3001 DAO \u306e\u751f\u6210\u6642\u70b9\u3067\u78ba\u5b9a\u3057\u3066\u3044\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3060\u3051\u3092\u6e21\u305b\u3070\u3088\u3044\u3067\u3059\u3002\nclient = redis.StrictRedis(\"localhost\", 6379, 15)\ndao = ItemDao(client, key_params={\"device_id\": \"GX123\"})\n\n\nDAO \u306e\u5c5e\u6027\nDAO \u306e\u5c5e\u6027\u306f redis \u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306e\u30a2\u30af\u30bb\u30b5\u3067\u3059\u3002\n>>> dao.item\nRedisString(key=\"device:{device_id}:item:{item_id}\", key_params={'device_id': 'GX123'})\n\n>>> dao.item_list\nRedisList(key=\"device:{device_id}:list\", key_params={'device_id': 'GX123'})\n\n\n\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\n\u30a2\u30af\u30bb\u30b5\u306b\u5bfe\u3057\u3066\u3001\u578b\u306b\u898b\u5408\u3063\u305f\u64cd\u4f5c\u304c\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002key \u306f\u30a2\u30af\u30bb\u30b5\u306b\u5bfe\u5fdc\u3057\u305f\u3082\u306e\u304c\u4f7f\u308f\u308c\u308b\u306e\u3067\u3001redis \u30b3\u30de\u30f3\u30c9\u306e\u7b2c2\u5f15\u6570\u4ee5\u964d\u3092\u6307\u5b9a\u3057\u3066\u4e0b\u3055\u3044\u3002\n>>> dao.item_list.lpush(\"a\")\n>>> dao.item_list.lpush(\"b\")\n>>> dao.item_list.lpush(\"c\")\n>>> dao.item_list.lrange(0, 3)\n['c', 'b', 'a']\n\nkey \u306b\u5bfe\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u5341\u5206\u306b\u63d0\u4f9b\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u4f8b\u5916\u304c\u767a\u751f\u3057\u307e\u3059\u3002\n>>> dao.item.get()\n...\nAttributeError: Not enough keys are provided for redis operation\n\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u88dc\u5b8c\u3059\u308b\n\u30a2\u30af\u30bb\u30b5\u306b\u8ffd\u52a0\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6e21\u3057\u3066\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u88dc\u5b8c\u3055\u308c\u305f\u65b0\u3057\u3044\u30a2\u30af\u30bb\u30b5\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n>>> dao.item(item_id=1)\nRedisString(key=\"device:{device_id}:item:{item_id}\", key_params={'item_id': 1, 'device_id': 'GX123'})\n\n\u65b0\u898f\u306b\u751f\u6210\u3055\u308c\u305f\u30a2\u30af\u30bb\u30b5\u306b\u5bfe\u3057\u3066 redis \u30b3\u30de\u30f3\u30c9\u304c\u767a\u884c\u3067\u304d\u307e\u3059\u3002\n>>> accr = dao.item(item_id=1)\n>>> accr.set(\"abc\")\n>>> accr.get()\n'abc'\n\n\npipeline \u3092\u5229\u7528\u3059\u308b\npipeline \u3082\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n>>> pipe = dao.pipeline()\n>>> accr1 = pipe.item(item_id=1)     # accessor for item01\n>>> accr2 = pipe.item(item_id=2)     # accessor for item02\n>>> accr1.set(\"item01\")\n>>> accr2.set(\"item02\")\n>>> pipe.item_list.rpush(accr1.key)\n>>> pipe.item_list.rpush(accr2.key)\n>>> pipe.execute()\n>>> dao.item_list.lrange(0, 100)\n['device:GX123:item:1', 'device:GX123:item:2',]\n\n\nJSON \u3092\u5229\u7528\u3059\u308b\nJSON \u3067\u5165\u51fa\u529b\u3059\u308b\u305f\u3081\u306b\u3001\u4e00\u90e8\u3001\u4fbf\u5229\u95a2\u6570\u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u3002\n>>> dao.item(item_id=1).set_json({'hello': 'world'})\n>>> dao.item(item_id=1).get_json()\n{u'hello': u'world'}\n\n\nSET \u3084 LIST \u306b\u683c\u7d0d\u3055\u308c\u305f key \u3067 MGET \u3059\u308b\n\u3053\u3061\u3089\u3082\u4fbf\u5229\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u3002\n>>> dao.item_list.lrange_mget(0, 100)\n({'device:GX123:item:1', 'device:GX123:item:2'}, ['{\"hello\": \"world\"}', 'item02'])\n>>> dao.item_set.smembers_mget_json(0, 0)\n(['device:GX123:item:1'], [{u'hello': u'world'}])\n\nsmembers_mget, smembers_mget_json \u3082\u4f7f\u3048\u307e\u3059\u3002\n\n\u307e\u3068\u3081\nredis-py \u3092\u5b89\u5168\u306b\u4f7f\u3046\u305f\u3081\u306e\u3001\u8efd\u3081\u306e\u30e9\u30c3\u30d1\u30fc\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\u30b3\u30fc\u30c9\u884c\u6570\u306f\u77ed\u3081\u306a\u306e\u3067\u3001\u826f\u304b\u3063\u305f\u3089\u8aad\u3093\u3067\u307f\u3066\u4e0b\u3055\u3044\u3002\n\u4eca\u5f8c\u3001key \u306e validation \u6a5f\u80fd\u306a\u3069\u3092\u8ffd\u52a0\u3059\u308b\u4e88\u5b9a\u3067\u3059\u3002\n\u3042\u3001\u305d\u306e\u524d\u306b pypi \u306b\u767b\u9332\u3057\u306a\u304d\u3083\u3067\u3059\u306d\u3002 \nPyPi \u767b\u9332 Done !\n## \u6982\u8981\n\npython \u306b\u306f [redis-py](https://redis-py.readthedocs.io/en/latest/) \u3068\u3044\u3046\u4fbf\u5229\u306a redis \u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u5b89\u5168\u306b\u4f7f\u3046\u306e\u304c\u96e3\u3057\u304b\u3063\u305f\u306e\u3067\u3001\u30b7\u30f3\u30d7\u30eb\u3067\u76f4\u611f\u7684\u306a\u30e9\u30c3\u30d1\u30fc\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n\n- https://github.com/groove-x/gxredis\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\n\n``` bash\n$ pip install gxredis\n```\n\n## \u8a2d\u8a08\u601d\u60f3\n\n- \u7121\u7406\u306b Active Record \u4ed5\u69d8\u306b\u3057\u306a\u3044\u3067\u3001\u7d20\u76f4\u306b redis \u306e\u7279\u6027\u3092\u6d3b\u304b\u3059\n- \u8aa4\u3063\u305f\u64cd\u4f5c\u304c\u767a\u751f\u3057\u306b\u304f\u3044\u69cb\u6210\u306b\u3059\u308b\n- redis-py \u3067\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u305d\u306e\u307e\u307e\u6d3b\u304b\u3059\n\n## \u4f7f\u3044\u65b9\n\n### DAO \u306e\u5b9a\u7fa9\n\nDAO \u306b\u306f key \u306e\u66f8\u5f0f\u3068\u7a2e\u985e\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n``` python\nimport redis\nfrom gxredis import *\n\nclass ItemDao(RedisDao):\n       item = RedisString(\"device:{device_id}:item:{item_id}\")\n       item_list = RedisList(\"device:{device_id}:list\")\n       item_set = RedisSet(\"device:{device_id}:set\")\n       item_hash = RedisHash(\"device:{device_id}:hash\")\n       item_zset = RedisSortedSet(\"device:{device_id}:zset\")\n```\n\n### DAO \u306e\u521d\u671f\u5316\n\nredis-py \u306e `StrictRedis` \u3092\u7b2c1\u5f15\u6570\u306b\u6e21\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u7b2c2\u5f15\u6570\u306b\u306f\u3001key \u3092\u69cb\u6210\u3059\u308b\u305f\u3081\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6e21\u3057\u307e\u3059\u3002\u8db3\u308a\u306a\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u5f8c\u3067\u88dc\u5b8c\u3067\u304d\u308b\u306e\u3067\u3001 DAO \u306e\u751f\u6210\u6642\u70b9\u3067\u78ba\u5b9a\u3057\u3066\u3044\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3060\u3051\u3092\u6e21\u305b\u3070\u3088\u3044\u3067\u3059\u3002\n\n``` python\nclient = redis.StrictRedis(\"localhost\", 6379, 15)\ndao = ItemDao(client, key_params={\"device_id\": \"GX123\"})\n```\n\n### DAO \u306e\u5c5e\u6027\n\nDAO \u306e\u5c5e\u6027\u306f redis \u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306e\u30a2\u30af\u30bb\u30b5\u3067\u3059\u3002\n\n``` python\n>>> dao.item\nRedisString(key=\"device:{device_id}:item:{item_id}\", key_params={'device_id': 'GX123'})\n\n>>> dao.item_list\nRedisList(key=\"device:{device_id}:list\", key_params={'device_id': 'GX123'})\n```\n\n### \u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\n\n\u30a2\u30af\u30bb\u30b5\u306b\u5bfe\u3057\u3066\u3001\u578b\u306b\u898b\u5408\u3063\u305f\u64cd\u4f5c\u304c\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002key \u306f\u30a2\u30af\u30bb\u30b5\u306b\u5bfe\u5fdc\u3057\u305f\u3082\u306e\u304c\u4f7f\u308f\u308c\u308b\u306e\u3067\u3001redis \u30b3\u30de\u30f3\u30c9\u306e\u7b2c2\u5f15\u6570\u4ee5\u964d\u3092\u6307\u5b9a\u3057\u3066\u4e0b\u3055\u3044\u3002\n\n``` python\n>>> dao.item_list.lpush(\"a\")\n>>> dao.item_list.lpush(\"b\")\n>>> dao.item_list.lpush(\"c\")\n>>> dao.item_list.lrange(0, 3)\n['c', 'b', 'a']\n```\n\nkey \u306b\u5bfe\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u5341\u5206\u306b\u63d0\u4f9b\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u4f8b\u5916\u304c\u767a\u751f\u3057\u307e\u3059\u3002\n\n``` python\n>>> dao.item.get()\n...\nAttributeError: Not enough keys are provided for redis operation\n```\n\n### \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u88dc\u5b8c\u3059\u308b\n\n\u30a2\u30af\u30bb\u30b5\u306b\u8ffd\u52a0\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6e21\u3057\u3066\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u88dc\u5b8c\u3055\u308c\u305f\u65b0\u3057\u3044\u30a2\u30af\u30bb\u30b5\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n\n``` python\n>>> dao.item(item_id=1)\nRedisString(key=\"device:{device_id}:item:{item_id}\", key_params={'item_id': 1, 'device_id': 'GX123'})\n```\n\n\u65b0\u898f\u306b\u751f\u6210\u3055\u308c\u305f\u30a2\u30af\u30bb\u30b5\u306b\u5bfe\u3057\u3066 redis \u30b3\u30de\u30f3\u30c9\u304c\u767a\u884c\u3067\u304d\u307e\u3059\u3002\n\n``` python\n>>> accr = dao.item(item_id=1)\n>>> accr.set(\"abc\")\n>>> accr.get()\n'abc'\n```\n\n### pipeline \u3092\u5229\u7528\u3059\u308b\n\npipeline \u3082\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\n``` python\n>>> pipe = dao.pipeline()\n>>> accr1 = pipe.item(item_id=1)     # accessor for item01\n>>> accr2 = pipe.item(item_id=2)     # accessor for item02\n>>> accr1.set(\"item01\")\n>>> accr2.set(\"item02\")\n>>> pipe.item_list.rpush(accr1.key)\n>>> pipe.item_list.rpush(accr2.key)\n>>> pipe.execute()\n>>> dao.item_list.lrange(0, 100)\n['device:GX123:item:1', 'device:GX123:item:2',]\n```\n\n### JSON \u3092\u5229\u7528\u3059\u308b\n\nJSON \u3067\u5165\u51fa\u529b\u3059\u308b\u305f\u3081\u306b\u3001\u4e00\u90e8\u3001\u4fbf\u5229\u95a2\u6570\u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u3002\n\n``` python\n>>> dao.item(item_id=1).set_json({'hello': 'world'})\n>>> dao.item(item_id=1).get_json()\n{u'hello': u'world'}\n```\n\n### SET \u3084 LIST \u306b\u683c\u7d0d\u3055\u308c\u305f key \u3067 MGET \u3059\u308b\n\n\u3053\u3061\u3089\u3082\u4fbf\u5229\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u3002\n\n``` python\n>>> dao.item_list.lrange_mget(0, 100)\n({'device:GX123:item:1', 'device:GX123:item:2'}, ['{\"hello\": \"world\"}', 'item02'])\n>>> dao.item_set.smembers_mget_json(0, 0)\n(['device:GX123:item:1'], [{u'hello': u'world'}])\n```\n\n`smembers_mget`, `smembers_mget_json` \u3082\u4f7f\u3048\u307e\u3059\u3002\n\n## \u307e\u3068\u3081\n\nredis-py \u3092\u5b89\u5168\u306b\u4f7f\u3046\u305f\u3081\u306e\u3001\u8efd\u3081\u306e\u30e9\u30c3\u30d1\u30fc\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\u30b3\u30fc\u30c9\u884c\u6570\u306f\u77ed\u3081\u306a\u306e\u3067\u3001\u826f\u304b\u3063\u305f\u3089\u8aad\u3093\u3067\u307f\u3066\u4e0b\u3055\u3044\u3002\n\n\u4eca\u5f8c\u3001key \u306e validation \u6a5f\u80fd\u306a\u3069\u3092\u8ffd\u52a0\u3059\u308b\u4e88\u5b9a\u3067\u3059\u3002\n\n\n~~\u3042\u3001\u305d\u306e\u524d\u306b pypi \u306b\u767b\u9332\u3057\u306a\u304d\u3083\u3067\u3059\u306d\u3002~~ \n\nPyPi \u767b\u9332 Done !\n", "tags": ["Python", "Redis"]}