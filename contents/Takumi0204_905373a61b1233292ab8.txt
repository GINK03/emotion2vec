{"context": "\n\n\u74b0\u5883\n\nPython 3.5.2\nnumpy 1.11.1\nmatplotlib 1.5.1\n\n\n\u6d3b\u6027\u5316\u95a2\u6570\n\u5165\u529b\u4fe1\u53f7\u306e\u7dcf\u548c\u3092\u51fa\u529b\u4fe1\u53f7\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\u3092\u6d3b\u6027\u5316\u95a2\u6570\u3068\u3044\u3046\u3002\u6d3b\u6027\u5316\u95a2\u6570\u306f\u5165\u529b\u4fe1\u53f7\u306e\u7dcf\u548c\u304c\u3069\u306e\u3088\u3046\u306b\u6d3b\u6027\u5316\u3059\u308b\u306e\u304b\u3092\u6c7a\u5b9a\u3059\u308b\u5f79\u5272\u3092\u6301\u3064\u3002\n\u4ee5\u4e0b\u306b\u4ee3\u8868\u7684\u306a\u6d3b\u6027\u5316\u95a2\u6570\u3092\u793a\u3059\u3002\n\n\u30b9\u30c6\u30c3\u30d7\u95a2\u6570\n#\u3000\u30b9\u30c6\u30c3\u30d7\u95a2\u6570\n\nimport numpy as np\ndef step(x):\n    return np.array(x>0, dtype=np.int)\n\n\n\n\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\n# \u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\n\nimport numpy as np\ndef sigmoid(x):\n    return 1/(1+ np.exp(-x))\n\n\n\nReLU\u95a2\u6570\n# ReLU\u95a2\u6570\n\nimport numpy as np\ndef relu(x):\n    return np.maximum(0,x)\n\n\n\n\u51fa\u529b\u5c64\u306e\u8a2d\u8a08\n\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306f\u3001\u56de\u5e30\u554f\u984c\u3068\u5206\u985e\u554f\u984c\u3069\u3061\u3089\u306b\u3082\u7528\u3044\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u4e00\u822c\u7684\u306b\u3001\u56de\u5e30\u554f\u984c\u306b\u306f\u6052\u7b49\u95a2\u6570\u3001\u5206\u985e\u554f\u984c\u306b\u306f\u30bd\u30d5\u30c8\u30de\u30c3\u30af\u30b9\u95a2\u6570\u3092\u7528\u3044\u308b\u3002\n\u6052\u7b49\u95a2\u6570\u3068\u306f\u3001\u5165\u529b\u3055\u308c\u305f\u5024\u3092\u305d\u306e\u307e\u307e\u51fa\u529b\u3059\u308b\u95a2\u6570\u3067\u3042\u308b\u305f\u3081\u3001\u3053\u3053\u3067\u306f\u6271\u308f\u305a\u3001\u30bd\u30d5\u30c8\u30de\u30c3\u30af\u30b9\u95a2\u6570\u306e\u307f\u4ee5\u4e0b\u306b\u793a\u3059\u3002\n\n\u30bd\u30d5\u30c8\u30de\u30c3\u30af\u30b9\u95a2\u6570\n# \u30bd\u30d5\u30c8\u30de\u30c3\u30af\u30b9\u95a2\u6570\n\nimport numpy as np\ndef softmax(x):\n    c = np.max(x)\n    exp_x = np.exp(x-c)\n    sum_exp_x = np.sum(exp_x)\n\n    return exp_x / sum_exp_x\n\n\n3\u5c64\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\uff08\u30d5\u30a9\u30ef\u30fc\u30c9\u51e6\u7406\uff09\n\u4ee5\u4e0b\u306b\u4eca\u56de\u4f5c\u6210\u3059\u308b3\u5c64\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u30a4\u30e1\u30fc\u30b8\u56f3\u3092\u793a\u3059\u3002\n\nimport numpy as np\n\n# \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u8a2d\u5b9a\ndef init_network():\n    network={}\n    network['w1'] = np.array([[0.1, 0.3, 0.5], [0.2, 0.4, 0.6]])\n    network['b1'] = np.array([0.1,0.2,0.3])\n    network['w2'] = np.array([[0.1, 0.4],[0.2, 0.5],[0.3,0.6]])\n    network['b2'] = np.array([0.1, 0.2])\n    network['w3'] = np.array([[0.1,0.3],[0.2,0.4]])\n    network['b3'] = np.array([0.1,0.2])\n\n    return network\n\n\n# \u30d5\u30a9\u30ef\u30fc\u30c9\u51e6\u7406\ndef forward(network, x):\n    w1, w2, w3 = network['w1'], network['w2'], network['w3']\n    b1, b2, b3 = network['b1'], network['b2'], network['b3']\n\n    a1 = np.dot(x, w1) + b1\n    z1 = sigmoid(a1)\n    a2 = np.dot(z1, w2) + b2\n    z2 = sigmoid(a2)\n    a3 = np.dot(z2, w3) + b3\n    y = softmax(a3)\n\n    return y\n\n\nnetwork = init_network()\nx = np.array([1.0, 0.5])\ny = forward(network, x)\nprint(y)\n\n\u672c\u8a18\u4e8b\u3067\u306f\u3001\u300c\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u5165\u9580\u300d\u3068\u304b\u683c\u597d\u826f\u304f\u8a00\u3063\u3066\u306f\u3044\u308b\u3082\u306e\u306e\u3001\u884c\u5217\u306e\u7a4d\u3068\u548c\u3092\u8a08\u7b97\u3057\u3066\u308b\u306b\u904e\u304e\u306a\u3044\u3002\n\u4eca\u56de\u306finit_network\u306b\u3088\u308a\u4e88\u3081\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u304c\u3001\u5b9f\u969b\u306f\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u3082\u3068\u306b\u6700\u9069\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6c7a\u5b9a\u3057\u3066\u3044\u304f\u3002\n\u6700\u9069\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u9078\u3076\u305f\u3081\u306e\u5b66\u7fd2\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f\u6b21\u56de\u89e6\u308c\u305f\u3044\u3068\u601d\u3046\u3002\n\n## \u74b0\u5883\n* Python 3.5.2\n* numpy 1.11.1\n* matplotlib 1.5.1\n\n## \u6d3b\u6027\u5316\u95a2\u6570\n\n\u5165\u529b\u4fe1\u53f7\u306e\u7dcf\u548c\u3092\u51fa\u529b\u4fe1\u53f7\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\u3092\u6d3b\u6027\u5316\u95a2\u6570\u3068\u3044\u3046\u3002\u6d3b\u6027\u5316\u95a2\u6570\u306f\u5165\u529b\u4fe1\u53f7\u306e\u7dcf\u548c\u304c\u3069\u306e\u3088\u3046\u306b\u6d3b\u6027\u5316\u3059\u308b\u306e\u304b\u3092\u6c7a\u5b9a\u3059\u308b\u5f79\u5272\u3092\u6301\u3064\u3002\n\u4ee5\u4e0b\u306b\u4ee3\u8868\u7684\u306a\u6d3b\u6027\u5316\u95a2\u6570\u3092\u793a\u3059\u3002\n\n### \u30b9\u30c6\u30c3\u30d7\u95a2\u6570\n\n\n```python\n#\u3000\u30b9\u30c6\u30c3\u30d7\u95a2\u6570\n\nimport numpy as np\ndef step(x):\n    return np.array(x>0, dtype=np.int)\n```\n\n![step](https://cl.ly/1k060b1I1Z2R/step.png)\n\n\n### \u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\n\n\n```python\n# \u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\n\nimport numpy as np\ndef sigmoid(x):\n    return 1/(1+ np.exp(-x))\n```\n\n![sigmoid](https://cl.ly/3r452M3X1z1w/sigmoid.png)\n\n\n\n### ReLU\u95a2\u6570\n\n\n```python\n# ReLU\u95a2\u6570\n\nimport numpy as np\ndef relu(x):\n    return np.maximum(0,x)\n```\n\n![ReLU](https://cl.ly/2H0z051P0S0W/ReLU.png)\n\n\n## \u51fa\u529b\u5c64\u306e\u8a2d\u8a08\n\n\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306f\u3001\u56de\u5e30\u554f\u984c\u3068\u5206\u985e\u554f\u984c\u3069\u3061\u3089\u306b\u3082\u7528\u3044\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u4e00\u822c\u7684\u306b\u3001\u56de\u5e30\u554f\u984c\u306b\u306f\u6052\u7b49\u95a2\u6570\u3001\u5206\u985e\u554f\u984c\u306b\u306f\u30bd\u30d5\u30c8\u30de\u30c3\u30af\u30b9\u95a2\u6570\u3092\u7528\u3044\u308b\u3002\n\u6052\u7b49\u95a2\u6570\u3068\u306f\u3001\u5165\u529b\u3055\u308c\u305f\u5024\u3092\u305d\u306e\u307e\u307e\u51fa\u529b\u3059\u308b\u95a2\u6570\u3067\u3042\u308b\u305f\u3081\u3001\u3053\u3053\u3067\u306f\u6271\u308f\u305a\u3001\u30bd\u30d5\u30c8\u30de\u30c3\u30af\u30b9\u95a2\u6570\u306e\u307f\u4ee5\u4e0b\u306b\u793a\u3059\u3002\n\n\n### \u30bd\u30d5\u30c8\u30de\u30c3\u30af\u30b9\u95a2\u6570\n\n\n```python\n# \u30bd\u30d5\u30c8\u30de\u30c3\u30af\u30b9\u95a2\u6570\n\nimport numpy as np\ndef softmax(x):\n    c = np.max(x)\n    exp_x = np.exp(x-c)\n    sum_exp_x = np.sum(exp_x)\n\n    return exp_x / sum_exp_x\n```\n\n## 3\u5c64\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\uff08\u30d5\u30a9\u30ef\u30fc\u30c9\u51e6\u7406\uff09\n\n\u4ee5\u4e0b\u306b\u4eca\u56de\u4f5c\u6210\u3059\u308b3\u5c64\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u30a4\u30e1\u30fc\u30b8\u56f3\u3092\u793a\u3059\u3002\n\n![3layer_neuralnet](https://cl.ly/3c2M1E131427/3layer_neuralnet.png)\n\n\n\n```python\nimport numpy as np\n\n# \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u8a2d\u5b9a\ndef init_network():\n    network={}\n    network['w1'] = np.array([[0.1, 0.3, 0.5], [0.2, 0.4, 0.6]])\n    network['b1'] = np.array([0.1,0.2,0.3])\n    network['w2'] = np.array([[0.1, 0.4],[0.2, 0.5],[0.3,0.6]])\n    network['b2'] = np.array([0.1, 0.2])\n    network['w3'] = np.array([[0.1,0.3],[0.2,0.4]])\n    network['b3'] = np.array([0.1,0.2])\n   \n    return network\n\n\n# \u30d5\u30a9\u30ef\u30fc\u30c9\u51e6\u7406\ndef forward(network, x):\n    w1, w2, w3 = network['w1'], network['w2'], network['w3']\n    b1, b2, b3 = network['b1'], network['b2'], network['b3']\n    \n    a1 = np.dot(x, w1) + b1\n    z1 = sigmoid(a1)\n    a2 = np.dot(z1, w2) + b2\n    z2 = sigmoid(a2)\n    a3 = np.dot(z2, w3) + b3\n    y = softmax(a3)\n    \n    return y\n\n\nnetwork = init_network()\nx = np.array([1.0, 0.5])\ny = forward(network, x)\nprint(y)\n```\n\n\u672c\u8a18\u4e8b\u3067\u306f\u3001\u300c\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u5165\u9580\u300d\u3068\u304b\u683c\u597d\u826f\u304f\u8a00\u3063\u3066\u306f\u3044\u308b\u3082\u306e\u306e\u3001\u884c\u5217\u306e\u7a4d\u3068\u548c\u3092\u8a08\u7b97\u3057\u3066\u308b\u306b\u904e\u304e\u306a\u3044\u3002\n\u4eca\u56de\u306finit_network\u306b\u3088\u308a\u4e88\u3081\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u304c\u3001\u5b9f\u969b\u306f\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u3082\u3068\u306b\u6700\u9069\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6c7a\u5b9a\u3057\u3066\u3044\u304f\u3002\n\u6700\u9069\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u9078\u3076\u305f\u3081\u306e\u5b66\u7fd2\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f\u6b21\u56de\u89e6\u308c\u305f\u3044\u3068\u601d\u3046\u3002\n", "tags": ["\u6a5f\u68b0\u5b66\u7fd2", "Python", "\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af"]}