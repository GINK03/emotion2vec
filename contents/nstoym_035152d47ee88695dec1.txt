{"context": " More than 1 year has passed since last update.\n\nAkka FSM \u3067 \u30b9\u30c6\u30fc\u30c8\u30de\u30b7\u30f3\u3092\u30b5\u30af\u30c3\u3068\nAkka FSM\u306e\u65e5\u672c\u8a9e\u306e\u8a18\u4e8b\u3092\u898b\u304b\u3051\u306a\u3044\u306e\u3067\u3001\u3082\u3063\u3068\u967d\u306e\u3042\u305f\u308b\u5834\u6240\u306b\u3063\u3066\u3053\u3068\u3067\u3001\u3053\u3061\u3089 \u304b\u3089\u8ee2\u8f09\u3057\u307e\u3057\u305f\u3002\nAkka\u306e FSM(Finit State Machine) \u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u5185\u90e8DSL\u3067\u30b9\u30c6\u30fc\u30c8\u30de\u30b7\u30f3\u3092\u30b5\u30af\u30c3\u3068\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3002\n\u4f8b\u3068\u3057\u3066\u3001FoolBoss\u304cWorker(\u30b9\u30c6\u30fc\u30c8\u30de\u30b7\u30f3)\u306b\u9069\u5f53\u306b\u6307\u793a\u3059\u308b\u3068\u3044\u3046\u30e2\u30c7\u30eb\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3059\u3002\n\u307e\u305a\u306fWorker\u306e\u30b9\u30c6\u30fc\u30c8\u306e\u5b9a\u7fa9\nsealed trait State\ncase object Sleeping extends State\ncase object Ready    extends State\ncase object Working  extends State\n\n\u7d9a\u3044\u3066\u3001\u30b9\u30c6\u30fc\u30c8\u306e\u5185\u90e8\u60c5\u5831\u306b\u76f8\u5f53\u3059\u308b\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3002\nPower\u306e\u91cf\u3067 Working\u306b\u306a\u308b\u304bSleeping\u306b\u9077\u79fb\u3059\u308b\u304b\u306b\u306a\u308a\u307e\u3059\u3002\nsealed trait Power\ncase class InRest(value: Int) extends Power\ncase class InWorking(value: Int, boss: ActorRef, request: String) extends Power\n\nWorker(\u30b9\u30c6\u30fc\u30c8\u30de\u30b7\u30f3)\u306b\u5bfe\u3059\u308b\u6307\u793a\u3068\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u5b9a\u7fa9\u3002\n\u3053\u308c\u306f\u306a\u304f\u3066\u3082\u3088\u3044\u3093\u3060\u3051\u3069\u3001\u3088\u308a\u5b9f\u8df5\u307d\u304f\u3059\u308b\u305f\u3081\u306b\u5b9a\u7fa9\u3002\nsealed trait Command\ncase object WakeUp               extends Command\ncase class Work(request: String) extends Command\ncase object Stop                 extends Command\nsealed trait Response\ncase class InBed(power: Int)     extends Response\ncase object Ok                   extends Response\ncase object Busy                 extends Response\ncase class  Done(result: String) extends Response\n\nCommand\u3068State\u306b\u3088\u3063\u3066\u3001Worker\u306eState\u304c\u9077\u79fb\u3057\u305f\u308a\u3057\u306a\u304b\u3063\u305f\u308a\u3057\u3064\u3064\u3001\nResponse\u3092\u8fd4\u3057\u305f\u308a\u3001\u8fd4\u3055\u306a\u304b\u3063\u305f\u308a\u3057\u307e\u3059\u3002\n\u305d\u3057\u3066\u3001\u5b9f\u969b\u306eWorker(\u30b9\u30c6\u30fc\u30c8\u30de\u30b7\u30f3)\u3092\u4ee5\u4e0b\u306e\u69d8\u306b\u5b9f\u88c5\u3057\u307e\u3059\u3002\nclass Worker extends FSM[State, Power] {\n  startWith(Sleeping, InRest(0))\n  val cost = 3\n  when(Sleeping){\n    case Event(_, InRest(v)) if v < cost => stay        using InRest(v+1) replying InBed(v+1)\n    case Event(WakeUp, InRest(v))        => goto(Ready) using InRest(v+1) replying Ok\n    case Event(_, InRest(v))             => stay        using InRest(v+1) replying InBed(v+1)\n  }\n  when(Ready){\n    case Event(Work(req), InRest(v)) if cost <= v => goto(Working)  using InWorking(v, sender, req)\n    case Event(_, InRest(v)) if v < cost          => goto(Sleeping) using InRest(v+1) replying InBed(v+1)\n    case _                                        => stay replying Ok\n  }\n  when(Working, stateTimeout = 3 second) {\n    case Event(StateTimeout, InWorking(v, boss, req)) =>\n      boss ! Done(req.toUpperCase + \"?\")\n      goto(Ready) using InRest(v - cost)\n    case Event(Stop, InWorking(v, _, _))  => goto(Ready) using InRest(v - cost/2)\n    case _                                => stay replying Busy\n  }\n  initialize()\n}\n\n\u30af\u30e9\u30b9\u5b9a\u7fa9\u3067FSM\u3092\u7d99\u627f\u3057\u3001Type parameter\u3067\u30b9\u30c6\u30fc\u30c8\u3068\u5185\u90e8\u60c5\u5831\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\nstartWith\u3067\u521d\u671f\u30b9\u30c6\u30fc\u30c8\u3068\u5185\u90e8\u60c5\u5831\u3092\u6e21\u3057\u307e\u3059\u3002\nclass Worker extends FSM[State, Power] {\n  startWith(Sleeping, InRest(0))\n\nwhen(\u30b9\u30c6\u30fc\u30c8) \u3068PartialFunction[Event,State] \u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002PartialFunction \u306a\u306e\u3067\u3001orElse \u3067\u5408\u6210\u3082\u3067\u304d\u307e\u3059\u3002\ninitialize() \u3067\u521d\u671f\u30b9\u30c6\u30fc\u30c8\u306b\u9077\u79fb\u3055\u305b\u308b\u3088\u3046\u3067\u3059\u3002(\u30bf\u30a4\u30de\u30fc\u306e\u521d\u671f\u5316\u3082\u3053\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3089\u3057\u3044)\n\u307e\u305f\u3001\u4eca\u56de\u8a18\u8ff0\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001whenUnhandled \u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u3001\u5168\u3066\u306e\u30b9\u30c6\u30fc\u30c8\u3067\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3067\u304d\u306a\u304b\u3063\u305fEvent\u306b\u5bfe\u3059\u308b\u51e6\u7406\u304c\u66f8\u3051\u307e\u3059\u3002\n  when(Sleeping){\n    case Event(_, InRest(v)) if v < cost => stay        using InRest(v+1) replying InBed(v+1)\n    case Event(WakeUp, InRest(v))        => goto(Ready) using InRest(v+1) replying Ok\n    case Event(_, InRest(v))             => stay        using InRest(v+1) replying InBed(v+1)\n  }\n  //(\u4e2d\u7565)\n  initialize()\n\n\u6b21\u306f\u3001FoolBoss\u3067\u3059\u3002\n\u81ea\u8eab\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067Worker\u306b\u30e9\u30f3\u30c0\u30e0\u306a\u6307\u793a\u3092\u51fa\u3057\u307e\u3059\u3002\nWorker\u304b\u3089\u306eResponse\u304cOk\u3067\u3042\u308c\u3070\u3001\u4ed5\u4e8b\u306e\u6307\u793a(Work)\u3092\u51fa\u3057\u307e\u3059\u3002\nclass FoolBoss(val worker :ActorRef)(implicit xc: ExecutionContext = ExecutionContext.global) extends Actor {\n  private case object Tick\n  self ! Tick\n\n  val messages = List(WakeUp, Work(\"Well, Your work is ...\"), Stop)\n\n  def nextTickIn: FiniteDuration = (1.0 + ThreadLocalRandom.current.nextDouble() * 9.0).seconds\n\n  def receive = {\n    case Tick =>\n      val msg = util.Random.shuffle(messages).head\n      println(s\"Tickked! send to Worker: $msg\")\n      worker ! msg\n    case InBed(power) =>\n      println(s\"Worker In Bed, power $power\")\n      context.system.scheduler.scheduleOnce(nextTickIn, self, Tick)\n    case Ok =>\n      println(s\"Worker is Ready!\")\n      worker ! Work(\"OK, Your work is ...\")\n    case Busy =>\n      println(s\"Worker is Busy!\")\n      context.system.scheduler.scheduleOnce(nextTickIn, self, Tick)\n    case Done(result) =>\n      println(s\"worker done: $result\")\n      context.system.scheduler.scheduleOnce(nextTickIn, self, Tick)\n  }\n}\n\n\u6700\u5f8c\u306bmain\u95a2\u6570\u3067\u3059\u3002(\u5b9f\u969b\u306fApp\u3067\u3059\u304c)\nobject FSMApp extends App {\n  val system = ActorSystem()\n  val worker = system.actorOf(Props(classOf[Worker]))\n  val boss = system.actorOf(Props(new FoolBoss(worker)()))\n}\n\n\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u69d8\u306b\u306a\u308a\u307e\u3059\u3002\nOh! send to Worker: WakeUp\nWorker In Bed, power 1\nOh! send to Worker: Stop\nWorker In Bed, power 2\nOh! send to Worker: Work(Well, Your work is ...)\nWorker In Bed, power 3\nOh! send to Worker: Work(Well, Your work is ...)\nWorker In Bed, power 4\nOh! send to Worker: Work(Well, Your work is ...)\nWorker In Bed, power 5\nOh! send to Worker: Stop\nWorker In Bed, power 6\nOh! send to Worker: Stop\nWorker In Bed, power 7\nOh! send to Worker: WakeUp\nWorker is Ready!\nworker done: OK! YOUR WORK IS ...?\nOh! send to Worker: Stop\nWorker is Ready!\nworker done: OK! YOUR WORK IS ...?\nOh! send to Worker: Work(Well, Your work is ...)\nWorker In Bed, power 3\n(\u4ee5\u4e0b\u7565)\n\nFoolBoss\u3068Worker\u306e\u3084\u308a\u3068\u308a\u304c\u898b\u3048\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001\u30b9\u30c6\u30fc\u30c8\u5b9a\u7fa9\u3067\u30cf\u30f3\u30c9\u30eb\u3067\u304d\u306a\u3044Event\u304c\u3042\u308b\u3068\u3001\u30ed\u30b0\u3068\u3057\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u51fa\u529b\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\nunhandled event WakeUp in state Ready\n\n\u540c\u69d8\u306e\u3053\u3068\u306f\u3001Actor\u306ebecome\u30e1\u30bd\u30c3\u30c9\u3067\u3082\u3067\u304d\u307e\u3059\u3002\nFSM\u306e\u65b9\u304c\u3001DSL\u3092\u899a\u3048\u308b\u3068\u3044\u3046\u65b0\u305f\u306a\u30b3\u30b9\u30c8\u304c\u3042\u308a\u307e\u3059\u304c\u3001\n\u3088\u308a\u30b9\u30c6\u30fc\u30c8\u3068\u5185\u90e8\u30c7\u30fc\u30bf\u306e\u72b6\u614b\u3092\u5ba3\u8a00\u7684\u306b\u5b9f\u88c5\u3067\u304d\u3001\u898b\u901a\u3057\u304c\u3088\u304f\u306a\u308b\u3068\u500b\u4eba\u7684\u306b\u611f\u3058\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001become\u3067\u6307\u5b9a\u3057\u305fRecieve\u578b(PartialFunction[Any, Unit])\u3067\u30cf\u30f3\u30c9\u30eb\u3067\u304d\u306a\u3044\u3082\u306e\u304c\u3042\u3063\u3066\u3082\u3001\nFSM\u306ewhen\u3068\u7570\u306a\u308a\u3001\u4e0a\u8a18\u306e\u3088\u3046\u306a\u30ed\u30b0\u306f\u51fa\u529b\u3055\u308c\u305a\u306b\u3001\u6c88\u9ed9\u3057\u305f\u307e\u307e\u306b\u306a\u308a\u307e\u3059\u3002\nFSM\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 \u306f Actor\u306e\u52b9\u679c\u7684\u306a\u4f7f\u3044\u65b9\u3068DSL\u306e\u52c9\u5f37\u306b\u3082\u3088\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u3088\u308b\u3068\u3001FSM\u3082receive\u3067\u6700\u7d42\u7684\u306b\u5168\u3066\u3092Event\u306b\u5305\u3093\u3067\u3044\u308b\u3060\u3051\u306e\u3088\u3046\u3067\u3059\u3002\nFSM\u306ereceive\u306b\u9001\u3089\u308c\u3066\u304d\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6e21\u305b\u3070\u3088\u3044\u306e\u3067\u3001\u30c7\u30d0\u30c3\u30b0\u306a\u3069\u3067\u30c7\u30fc\u30bf\u3092\u8997\u304d\u898b\u308b\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3067\u304d\u307e\u3059\u3002\n  def allLogging : PartialFunction[Any, Any] = {\n    case x => log.debug(s\"Received : $x\")\n      x\n  }\n  override def receive = allLogging andThen super.receive\n\n# Akka FSM \u3067 \u30b9\u30c6\u30fc\u30c8\u30de\u30b7\u30f3\u3092\u30b5\u30af\u30c3\u3068\n\nAkka FSM\u306e\u65e5\u672c\u8a9e\u306e\u8a18\u4e8b\u3092\u898b\u304b\u3051\u306a\u3044\u306e\u3067\u3001\u3082\u3063\u3068\u967d\u306e\u3042\u305f\u308b\u5834\u6240\u306b\u3063\u3066\u3053\u3068\u3067\u3001[\u3053\u3061\u3089](https://monolog.linkode.co.jp/articles/satoyama/StateMachine%20by%20Akka%20FSM) \u304b\u3089\u8ee2\u8f09\u3057\u307e\u3057\u305f\u3002\n\nAkka\u306e [FSM](http://doc.akka.io/docs/akka/snapshot/scala/fsm.html)(Finit State Machine) \u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u5185\u90e8DSL\u3067\u30b9\u30c6\u30fc\u30c8\u30de\u30b7\u30f3\u3092\u30b5\u30af\u30c3\u3068\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3002\n\n\u4f8b\u3068\u3057\u3066\u3001FoolBoss\u304cWorker(\u30b9\u30c6\u30fc\u30c8\u30de\u30b7\u30f3)\u306b\u9069\u5f53\u306b\u6307\u793a\u3059\u308b\u3068\u3044\u3046\u30e2\u30c7\u30eb\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3059\u3002\n\n\n\u307e\u305a\u306fWorker\u306e\u30b9\u30c6\u30fc\u30c8\u306e\u5b9a\u7fa9\n\n```scala\nsealed trait State\ncase object Sleeping extends State\ncase object Ready    extends State\ncase object Working  extends State\n```\n\n\u7d9a\u3044\u3066\u3001\u30b9\u30c6\u30fc\u30c8\u306e\u5185\u90e8\u60c5\u5831\u306b\u76f8\u5f53\u3059\u308b\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3002\nPower\u306e\u91cf\u3067 Working\u306b\u306a\u308b\u304bSleeping\u306b\u9077\u79fb\u3059\u308b\u304b\u306b\u306a\u308a\u307e\u3059\u3002\n\n```scala\nsealed trait Power\ncase class InRest(value: Int) extends Power\ncase class InWorking(value: Int, boss: ActorRef, request: String) extends Power\n```\n\n\nWorker(\u30b9\u30c6\u30fc\u30c8\u30de\u30b7\u30f3)\u306b\u5bfe\u3059\u308b\u6307\u793a\u3068\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u5b9a\u7fa9\u3002\n\u3053\u308c\u306f\u306a\u304f\u3066\u3082\u3088\u3044\u3093\u3060\u3051\u3069\u3001\u3088\u308a\u5b9f\u8df5\u307d\u304f\u3059\u308b\u305f\u3081\u306b\u5b9a\u7fa9\u3002\n\n```scala\nsealed trait Command\ncase object WakeUp               extends Command\ncase class Work(request: String) extends Command\ncase object Stop                 extends Command\nsealed trait Response\ncase class InBed(power: Int)     extends Response\ncase object Ok                   extends Response\ncase object Busy                 extends Response\ncase class  Done(result: String) extends Response\n```\nCommand\u3068State\u306b\u3088\u3063\u3066\u3001Worker\u306eState\u304c\u9077\u79fb\u3057\u305f\u308a\u3057\u306a\u304b\u3063\u305f\u308a\u3057\u3064\u3064\u3001\nResponse\u3092\u8fd4\u3057\u305f\u308a\u3001\u8fd4\u3055\u306a\u304b\u3063\u305f\u308a\u3057\u307e\u3059\u3002\n\n\u305d\u3057\u3066\u3001\u5b9f\u969b\u306eWorker(\u30b9\u30c6\u30fc\u30c8\u30de\u30b7\u30f3)\u3092\u4ee5\u4e0b\u306e\u69d8\u306b\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n```scala\nclass Worker extends FSM[State, Power] {\n  startWith(Sleeping, InRest(0))\n  val cost = 3\n  when(Sleeping){\n    case Event(_, InRest(v)) if v < cost => stay        using InRest(v+1) replying InBed(v+1)\n    case Event(WakeUp, InRest(v))        => goto(Ready) using InRest(v+1) replying Ok\n    case Event(_, InRest(v))             => stay        using InRest(v+1) replying InBed(v+1)\n  }\n  when(Ready){\n    case Event(Work(req), InRest(v)) if cost <= v => goto(Working)  using InWorking(v, sender, req)\n    case Event(_, InRest(v)) if v < cost          => goto(Sleeping) using InRest(v+1) replying InBed(v+1)\n    case _                                        => stay replying Ok\n  }\n  when(Working, stateTimeout = 3 second) {\n    case Event(StateTimeout, InWorking(v, boss, req)) =>\n      boss ! Done(req.toUpperCase + \"?\")\n      goto(Ready) using InRest(v - cost)\n    case Event(Stop, InWorking(v, _, _))  => goto(Ready) using InRest(v - cost/2)\n    case _                                => stay replying Busy\n  }\n  initialize()\n}\n```\n\u30af\u30e9\u30b9\u5b9a\u7fa9\u3067FSM\u3092\u7d99\u627f\u3057\u3001Type parameter\u3067\u30b9\u30c6\u30fc\u30c8\u3068\u5185\u90e8\u60c5\u5831\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\nstartWith\u3067\u521d\u671f\u30b9\u30c6\u30fc\u30c8\u3068\u5185\u90e8\u60c5\u5831\u3092\u6e21\u3057\u307e\u3059\u3002\n\n```scala\nclass Worker extends FSM[State, Power] {\n  startWith(Sleeping, InRest(0))\n```\n\nwhen(\u30b9\u30c6\u30fc\u30c8) \u3068PartialFunction[Event,State] \u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002PartialFunction \u306a\u306e\u3067\u3001orElse \u3067\u5408\u6210\u3082\u3067\u304d\u307e\u3059\u3002\ninitialize() \u3067\u521d\u671f\u30b9\u30c6\u30fc\u30c8\u306b\u9077\u79fb\u3055\u305b\u308b\u3088\u3046\u3067\u3059\u3002(\u30bf\u30a4\u30de\u30fc\u306e\u521d\u671f\u5316\u3082\u3053\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3089\u3057\u3044)\n\u307e\u305f\u3001\u4eca\u56de\u8a18\u8ff0\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001whenUnhandled \u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u3001\u5168\u3066\u306e\u30b9\u30c6\u30fc\u30c8\u3067\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3067\u304d\u306a\u304b\u3063\u305fEvent\u306b\u5bfe\u3059\u308b\u51e6\u7406\u304c\u66f8\u3051\u307e\u3059\u3002\n\n```scala\n  when(Sleeping){\n    case Event(_, InRest(v)) if v < cost => stay        using InRest(v+1) replying InBed(v+1)\n    case Event(WakeUp, InRest(v))        => goto(Ready) using InRest(v+1) replying Ok\n    case Event(_, InRest(v))             => stay        using InRest(v+1) replying InBed(v+1)\n  }\n  //(\u4e2d\u7565)\n  initialize()\n```\n\n\n\n\u6b21\u306f\u3001FoolBoss\u3067\u3059\u3002\n\u81ea\u8eab\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067Worker\u306b\u30e9\u30f3\u30c0\u30e0\u306a\u6307\u793a\u3092\u51fa\u3057\u307e\u3059\u3002\nWorker\u304b\u3089\u306eResponse\u304cOk\u3067\u3042\u308c\u3070\u3001\u4ed5\u4e8b\u306e\u6307\u793a(Work)\u3092\u51fa\u3057\u307e\u3059\u3002\n\n```scala\nclass FoolBoss(val worker :ActorRef)(implicit xc: ExecutionContext = ExecutionContext.global) extends Actor {\n  private case object Tick\n  self ! Tick\n\n  val messages = List(WakeUp, Work(\"Well, Your work is ...\"), Stop)\n\n  def nextTickIn: FiniteDuration = (1.0 + ThreadLocalRandom.current.nextDouble() * 9.0).seconds\n\n  def receive = {\n    case Tick =>\n      val msg = util.Random.shuffle(messages).head\n      println(s\"Tickked! send to Worker: $msg\")\n      worker ! msg\n    case InBed(power) =>\n      println(s\"Worker In Bed, power $power\")\n      context.system.scheduler.scheduleOnce(nextTickIn, self, Tick)\n    case Ok =>\n      println(s\"Worker is Ready!\")\n      worker ! Work(\"OK, Your work is ...\")\n    case Busy =>\n      println(s\"Worker is Busy!\")\n      context.system.scheduler.scheduleOnce(nextTickIn, self, Tick)\n    case Done(result) =>\n      println(s\"worker done: $result\")\n      context.system.scheduler.scheduleOnce(nextTickIn, self, Tick)\n  }\n}\n```\n\n\u6700\u5f8c\u306bmain\u95a2\u6570\u3067\u3059\u3002(\u5b9f\u969b\u306fApp\u3067\u3059\u304c)\n\n```scala\nobject FSMApp extends App {\n  val system = ActorSystem()\n  val worker = system.actorOf(Props(classOf[Worker]))\n  val boss = system.actorOf(Props(new FoolBoss(worker)()))\n}\n```\n\n\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u69d8\u306b\u306a\u308a\u307e\u3059\u3002\n\n```shell\nOh! send to Worker: WakeUp\nWorker In Bed, power 1\nOh! send to Worker: Stop\nWorker In Bed, power 2\nOh! send to Worker: Work(Well, Your work is ...)\nWorker In Bed, power 3\nOh! send to Worker: Work(Well, Your work is ...)\nWorker In Bed, power 4\nOh! send to Worker: Work(Well, Your work is ...)\nWorker In Bed, power 5\nOh! send to Worker: Stop\nWorker In Bed, power 6\nOh! send to Worker: Stop\nWorker In Bed, power 7\nOh! send to Worker: WakeUp\nWorker is Ready!\nworker done: OK! YOUR WORK IS ...?\nOh! send to Worker: Stop\nWorker is Ready!\nworker done: OK! YOUR WORK IS ...?\nOh! send to Worker: Work(Well, Your work is ...)\nWorker In Bed, power 3\n(\u4ee5\u4e0b\u7565)\n```\n\nFoolBoss\u3068Worker\u306e\u3084\u308a\u3068\u308a\u304c\u898b\u3048\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001\u30b9\u30c6\u30fc\u30c8\u5b9a\u7fa9\u3067\u30cf\u30f3\u30c9\u30eb\u3067\u304d\u306a\u3044Event\u304c\u3042\u308b\u3068\u3001\u30ed\u30b0\u3068\u3057\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u51fa\u529b\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n\n```shell\nunhandled event WakeUp in state Ready\n```\n\n\n\u540c\u69d8\u306e\u3053\u3068\u306f\u3001Actor\u306ebecome\u30e1\u30bd\u30c3\u30c9\u3067\u3082\u3067\u304d\u307e\u3059\u3002\nFSM\u306e\u65b9\u304c\u3001DSL\u3092\u899a\u3048\u308b\u3068\u3044\u3046\u65b0\u305f\u306a\u30b3\u30b9\u30c8\u304c\u3042\u308a\u307e\u3059\u304c\u3001\n\u3088\u308a\u30b9\u30c6\u30fc\u30c8\u3068\u5185\u90e8\u30c7\u30fc\u30bf\u306e\u72b6\u614b\u3092\u5ba3\u8a00\u7684\u306b\u5b9f\u88c5\u3067\u304d\u3001\u898b\u901a\u3057\u304c\u3088\u304f\u306a\u308b\u3068\u500b\u4eba\u7684\u306b\u611f\u3058\u3066\u3044\u307e\u3059\u3002\n\n\u307e\u305f\u3001become\u3067\u6307\u5b9a\u3057\u305fRecieve\u578b(PartialFunction[Any, Unit])\u3067\u30cf\u30f3\u30c9\u30eb\u3067\u304d\u306a\u3044\u3082\u306e\u304c\u3042\u3063\u3066\u3082\u3001\nFSM\u306ewhen\u3068\u7570\u306a\u308a\u3001\u4e0a\u8a18\u306e\u3088\u3046\u306a\u30ed\u30b0\u306f\u51fa\u529b\u3055\u308c\u305a\u306b\u3001\u6c88\u9ed9\u3057\u305f\u307e\u307e\u306b\u306a\u308a\u307e\u3059\u3002\n\n[FSM\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9](https://github.com/akka/akka/blob/master/akka-actor/src/main/scala/akka/actor/FSM.scala) \u306f Actor\u306e\u52b9\u679c\u7684\u306a\u4f7f\u3044\u65b9\u3068DSL\u306e\u52c9\u5f37\u306b\u3082\u3088\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u3088\u308b\u3068\u3001FSM\u3082receive\u3067\u6700\u7d42\u7684\u306b\u5168\u3066\u3092Event\u306b\u5305\u3093\u3067\u3044\u308b\u3060\u3051\u306e\u3088\u3046\u3067\u3059\u3002\nFSM\u306ereceive\u306b\u9001\u3089\u308c\u3066\u304d\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6e21\u305b\u3070\u3088\u3044\u306e\u3067\u3001\u30c7\u30d0\u30c3\u30b0\u306a\u3069\u3067\u30c7\u30fc\u30bf\u3092\u8997\u304d\u898b\u308b\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3067\u304d\u307e\u3059\u3002\n\n```scala\n  def allLogging : PartialFunction[Any, Any] = {\n    case x => log.debug(s\"Received : $x\")\n      x\n  }\n  override def receive = allLogging andThen super.receive\n```\n", "tags": ["Scala", "Akka", "actor", "statemachine", "FSM"]}