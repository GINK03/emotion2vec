{"context": " More than 1 year has passed since last update.\u554f\u984c http://nabetani.sakura.ne.jp/hena/ord24eliseq/\n\u89e3\u7b54\u30ea\u30f3\u30af\u96c6 http://qiita.com/Nabetani/items/1c83005a854d2c6cbb69\n\u30a4\u30d9\u30f3\u30c8 http://yhpg.doorkeeper.jp/events/13159\n\u5f53\u65e5\u304a\u898b\u305b\u3057\u305f\u5b9f\u88c5\u3002\ndef is_sq(b)\n  (b**0.5).round**2==b\nend\n\ndef is_cu(b)\n  (b**(1r/3)).round**3==b\nend\n\nmodule Enumerable\n  def prepend( a )\n    if block_given?\n      a.each{ |e| yield e }\n      self.each{ |e| yield e }\n    else\n      to_enum( :prepend, a )\n    end\n  end\nend\n\ndef remove_before( seq )\n  seq.each_cons(2).select{ |i| ! yield i[1] }.map{ |i| i[0] }\nend\n\ndef remove_after( seq )\n  seq.each_cons(2).select{ |i| ! yield i[0] }.map{ |i| i[1] }.prepend( seq.first(1) )\nend\n\ndef solve_core( s )\n  seq=loop.lazy.with_index(1).map{ |*i| i.last }\n  s.chars.each do |cmd|\n    seq=case cmd\n    when \"s\"; remove_before( seq ){ |n| is_sq(n) }\n    when \"S\"; remove_after( seq ){ |n| is_sq(n) }\n    when \"c\"; remove_before( seq ){ |n| is_cu(n) }\n    when \"C\"; remove_after( seq ){ |n| is_cu(n) }\n    when \"h\"; seq.drop(100)\n    when /[2-9]/\n      seq.each_slice(cmd.to_i).flat_map{ |i| i[0..-2] }\n    else\n      raise \"unexpected cmd : #{cmd} in #{s}\"\n    end\n  end\n  seq\nend\n\ndef solve( s, len=10 )\n  solve_core( s ).first(len).to_a.join(\",\")\nend\n\nDATA.map{ |line|\n  id, src, expected = line.split(/\\s+/ )\n  actual = solve( src )\n  ok = actual == expected\n  puts \"***NG*** : %s %s->%s ( %s )\" % [ id, src, actual, expected ] unless ok\n  ok\n}.all?.tap{ |r| puts ( r ? \"ok\" : \"NG\" ) }\n\n__END__\n0 ss6cc24S  1,9,21,30,33,37,42,44,49,56\n1 h 101,102,103,104,105,106,107,108,109,110\n2 hh  201,202,203,204,205,206,207,208,209,210\n3 hhh 301,302,303,304,305,306,307,308,309,310\n50  23h465Ssc9CchC  1027,1033,1045,1047,1057,1069,1071,1075,1081,1093\n\n\u3044\u3064\u3082\u901a\u308a\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u306f\u7701\u7565\u3002\n\u305f\u3076\u3093\u3001\u9045\u5ef6\u8a55\u4fa1\u3092\u524d\u63d0\u306b\u7121\u9650\u30ea\u30b9\u30c8\u3092\u4f5c\u3063\u3066\u3001\u305d\u308c\u3092\u3053\u306d\u308b\u3068\u51fa\u6765\u4e0a\u304c\u308b\u3001\u3068\u3044\u3046\u306e\u304c\u9806\u5f53\u306a\u5b9f\u88c5\u3060\u3068\u601d\u3046\u3002\n\u9045\u5ef6\u8a55\u4fa1\u304c\u306a\u3044\u51e6\u7406\u7cfb\u3060\u3068\u56fa\u5b9a\u9577\u3067\u7528\u610f\u3057\u3066\u3044\u304f\u3093\u3060\u3068\u601d\u3046\u3051\u3069\u3001ruby \u306b\u306f lazy \u304c\u3042\u308b\u306e\u3067\u5927\u4e08\u592b\u3002\n\u5b9f\u88c5\u3067\u624b\u9593\u53d6\u3063\u305f\u306e\u306f\n\u3000\u300c\u7121\u9650\u30ea\u30b9\u30c8\u306e\u524d\u306b\u8981\u7d20\u3092\uff11\u3064\u8ffd\u52a0\u3059\u308b\u300d\n\u3068\u3044\u3046\u51e6\u7406\u3092\u66f8\u304f\u90e8\u5206\u3002\n\u5f53\u521d\u306f\u3069\u3046\u305b\u3042\u308b\u3060\u308d\u3046\u3068\u601d\u3063\u3066\u8abf\u3079\u305f\u3093\u3060\u3051\u3069\u5b9f\u306f\u5b58\u5728\u305b\u305a\u3001\u5b9f\u88c5\u3059\u308b\u306f\u3081\u306b\u306a\u3063\u305f\u3002\n\u666e\u901a\u306b [1]+lazy_enum \u3068\u3044\u3046\u611f\u3058\u3067\u52a0\u7b97\u3067\u304d\u3066\u3044\u3044\u3068\u601d\u3046\u3093\u3060\u3051\u3069\u3002\n\u5f53\u65e5\u7f60\u3068\u3057\u3066\u6a5f\u80fd\u3057\u305f\u4e09\u4e57\u6839\u306e\u8a08\u7b97\u306f\n(b**(1r/3)).round**3==b\n\u3068\u3044\u3046\u98a8\u306b\u3057\u3066\u6d6e\u52d5\u5c0f\u6570\u70b9\u306e\u8a08\u7b97\u8aa4\u5dee\u3092\u56de\u907f\u3057\u305f\u3093\u3060\u3051\u3069\u3001ruby \u306b\u306f  Math.cbrt \u304c\u3042\u308b\u3053\u3068\u3092\u6559\u3048\u3066\u3044\u305f\u3060\u3044\u305f\u3002\nMath.cbrt(100**3) #=> 100.0\n(100**3)**(1r/3) #=> 99.99999999999997\n\nMath.cbrt(100.00000000000001**3) #=> 100.00000000000001\n (100.00000000000001**3)**(1r/3) #=> 99.99999999999999\n\n\u3068\u3044\u3046\u611f\u3058\u3002\u7d20\u6674\u3089\u3057\u3044\u3002\n\n\u554f\u984c http://nabetani.sakura.ne.jp/hena/ord24eliseq/\n\u89e3\u7b54\u30ea\u30f3\u30af\u96c6 http://qiita.com/Nabetani/items/1c83005a854d2c6cbb69\n\u30a4\u30d9\u30f3\u30c8 http://yhpg.doorkeeper.jp/events/13159\n\n\u5f53\u65e5\u304a\u898b\u305b\u3057\u305f\u5b9f\u88c5\u3002\n\n```ruby\ndef is_sq(b)\n  (b**0.5).round**2==b\nend\n\ndef is_cu(b)\n  (b**(1r/3)).round**3==b\nend\n\nmodule Enumerable\n  def prepend( a )\n    if block_given?\n      a.each{ |e| yield e }\n      self.each{ |e| yield e }\n    else\n      to_enum( :prepend, a )\n    end\n  end\nend\n\ndef remove_before( seq )\n  seq.each_cons(2).select{ |i| ! yield i[1] }.map{ |i| i[0] }\nend\n\ndef remove_after( seq )\n  seq.each_cons(2).select{ |i| ! yield i[0] }.map{ |i| i[1] }.prepend( seq.first(1) )\nend\n\ndef solve_core( s )\n  seq=loop.lazy.with_index(1).map{ |*i| i.last }\n  s.chars.each do |cmd|\n    seq=case cmd\n    when \"s\"; remove_before( seq ){ |n| is_sq(n) }\n    when \"S\"; remove_after( seq ){ |n| is_sq(n) }\n    when \"c\"; remove_before( seq ){ |n| is_cu(n) }\n    when \"C\"; remove_after( seq ){ |n| is_cu(n) }\n    when \"h\"; seq.drop(100)\n    when /[2-9]/\n      seq.each_slice(cmd.to_i).flat_map{ |i| i[0..-2] }\n    else\n      raise \"unexpected cmd : #{cmd} in #{s}\"\n    end\n  end\n  seq\nend\n\ndef solve( s, len=10 )\n  solve_core( s ).first(len).to_a.join(\",\")\nend\n\nDATA.map{ |line|\n  id, src, expected = line.split(/\\s+/ )\n  actual = solve( src )\n  ok = actual == expected\n  puts \"***NG*** : %s %s->%s ( %s )\" % [ id, src, actual, expected ] unless ok\n  ok\n}.all?.tap{ |r| puts ( r ? \"ok\" : \"NG\" ) }\n\n__END__\n0 ss6cc24S  1,9,21,30,33,37,42,44,49,56\n1 h 101,102,103,104,105,106,107,108,109,110\n2 hh  201,202,203,204,205,206,207,208,209,210\n3 hhh 301,302,303,304,305,306,307,308,309,310\n50  23h465Ssc9CchC  1027,1033,1045,1047,1057,1069,1071,1075,1081,1093\n```\n\n\u3044\u3064\u3082\u901a\u308a\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u306f\u7701\u7565\u3002\n\n\u305f\u3076\u3093\u3001\u9045\u5ef6\u8a55\u4fa1\u3092\u524d\u63d0\u306b\u7121\u9650\u30ea\u30b9\u30c8\u3092\u4f5c\u3063\u3066\u3001\u305d\u308c\u3092\u3053\u306d\u308b\u3068\u51fa\u6765\u4e0a\u304c\u308b\u3001\u3068\u3044\u3046\u306e\u304c\u9806\u5f53\u306a\u5b9f\u88c5\u3060\u3068\u601d\u3046\u3002\n\n\u9045\u5ef6\u8a55\u4fa1\u304c\u306a\u3044\u51e6\u7406\u7cfb\u3060\u3068\u56fa\u5b9a\u9577\u3067\u7528\u610f\u3057\u3066\u3044\u304f\u3093\u3060\u3068\u601d\u3046\u3051\u3069\u3001ruby \u306b\u306f lazy \u304c\u3042\u308b\u306e\u3067\u5927\u4e08\u592b\u3002\n\n\u5b9f\u88c5\u3067\u624b\u9593\u53d6\u3063\u305f\u306e\u306f\n\u3000\u300c\u7121\u9650\u30ea\u30b9\u30c8\u306e\u524d\u306b\u8981\u7d20\u3092\uff11\u3064\u8ffd\u52a0\u3059\u308b\u300d\n\u3068\u3044\u3046\u51e6\u7406\u3092\u66f8\u304f\u90e8\u5206\u3002\n\u5f53\u521d\u306f\u3069\u3046\u305b\u3042\u308b\u3060\u308d\u3046\u3068\u601d\u3063\u3066\u8abf\u3079\u305f\u3093\u3060\u3051\u3069\u5b9f\u306f\u5b58\u5728\u305b\u305a\u3001\u5b9f\u88c5\u3059\u308b\u306f\u3081\u306b\u306a\u3063\u305f\u3002\n\u666e\u901a\u306b `[1]+lazy_enum` \u3068\u3044\u3046\u611f\u3058\u3067\u52a0\u7b97\u3067\u304d\u3066\u3044\u3044\u3068\u601d\u3046\u3093\u3060\u3051\u3069\u3002\n\n\u5f53\u65e5\u7f60\u3068\u3057\u3066\u6a5f\u80fd\u3057\u305f\u4e09\u4e57\u6839\u306e\u8a08\u7b97\u306f\n\n`(b**(1r/3)).round**3==b`\n\n\u3068\u3044\u3046\u98a8\u306b\u3057\u3066\u6d6e\u52d5\u5c0f\u6570\u70b9\u306e\u8a08\u7b97\u8aa4\u5dee\u3092\u56de\u907f\u3057\u305f\u3093\u3060\u3051\u3069\u3001ruby \u306b\u306f  `Math.cbrt` \u304c\u3042\u308b\u3053\u3068\u3092\u6559\u3048\u3066\u3044\u305f\u3060\u3044\u305f\u3002\n\n```ruby\nMath.cbrt(100**3) #=> 100.0\n(100**3)**(1r/3) #=> 99.99999999999997\n\nMath.cbrt(100.00000000000001**3) #=> 100.00000000000001\n (100.00000000000001**3)**(1r/3) #=> 99.99999999999999\n```\n\n\u3068\u3044\u3046\u611f\u3058\u3002\u7d20\u6674\u3089\u3057\u3044\u3002\n", "tags": ["Ruby", "yhpg", "\u3069\u3046\u66f8\u304f"]}