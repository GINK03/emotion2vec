{"context": "\n\n\u4e09\u89d2\u6570\u3068\u306f\n\u4e09\u89d2\u6570\u3068\u306f\u3001\u81ea\u7136\u6570\u3092\u9806\u6b21\u52a0\u3048\u308b\u3053\u3068\u3067\u6c42\u3081\u3089\u308c\u308b\u6570\u306e\u3053\u3068\u3067\u3059\u3002\u5177\u4f53\u7684\u306b\u306f\u3001\n1\n3   (=1+2)\n6   (=1+2+3)\n10  (=1+2+3+4)\n15  (=1+2+3+4+5)\n...\n\n\u3068\u306a\u308a\u307e\u3059\u3002\n\u3053\u308c\u3092\u3069\u3046\u3057\u3066\u4e09\u89d2\u6570\u3068\u8a00\u3046\u306e\u304b\u306f\u3001\u7c73\u4ff5\u3092\u4e09\u89d2\u5f62\u306b\u7a4d\u307f\u4e0a\u3052\u3066\u3044\u3063\u305f\u6642\u306e\u69d8\u5b50\u3092\u601d\u3044\u6d6e\u304b\u3079\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u5206\u304b\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\nn\u756a\u76ee\u306e\u4e09\u89d2\u6570\u3092 t(n) \u3068\u3059\u308b\u3068\u3001\nt(0) = 0\nt(n) = t(n-1) + n\n\n\u3068\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\n\nC#\u306e\u30b3\u30fc\u30c9\n\u4ee5\u4e0b\u306e\uff13\u3064\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u66f8\u3044\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n\u5148\u982d\u304b\u3089n\u500b\u306e\u4e09\u89d2\u6570\u3092\u6c42\u3081\u308b\n\u4e09\u89d2\u6570\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b\nn\u756a\u76ee\u306e\u4e09\u89d2\u6570\u3092\u6c42\u3081\u308b\n\n\u4ee5\u4e0b\u306b\u3001C#\u306e\u30b3\u30fc\u30c9TriangularNumber\u30af\u30e9\u30b9\u3092\u793a\u3057\u307e\u3059\u3002\n\nTriangularNumber.cs\npublic static class TriangularNumber {\n    // \u4e09\u89d2\u6570\u3092\u5217\u6319\u3059\u308b\n    public static IEnumerable<int> Take(int n) {\n        yield return 0;\n        int ans = 0;\n        for (int i = 1; i < n; i++) {\n            ans += i;\n            yield return ans;\n        }\n    }\n\n    // \u4e09\u89d2\u6570\u304b\u3092\u8abf\u3079\u308b\n    public static bool IsCorrect(long x) {\n        long a = 8 * x + 1;\n        long b = (long)(Math.Sqrt(a));\n        if (b * b != a)\n            return false;\n        return (b - 1) % 2 == 0;\n    }\n\n    // \uff4e\u756a\u76ee\u306e\u4e09\u89d2\u6570\u3092\u6c42\u3081\u308b\n    public static long GetAt(int nth) {\n        return (long)nth * (nth + 1) / 2;\n    }\n}\n\n\n\u300cn\u756a\u76ee\u306e\u4e09\u89d2\u6570\u3092\u6c42\u3081\u308b\u300dGetAt\u30e1\u30bd\u30c3\u30c9\u306f\u524d\u8ff0\u306e\u5b9a\u7fa9\u901a\u308a\u306b\u3001\u518d\u5e30\u3092\u4f7f\u3046\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u304c\u3001n \u304c\u5927\u304d\u306a\u6570\u306e\u5834\u5408\u306f\u3001\u3042\u307e\u308a\u52b9\u7387\u7684\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u516c\u5f0f\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\nt(n) = n * (n + 1) / 2\n\n\nTriangularNumber.Take\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u884c\u4f8b\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u5148\u982d\u304b\u308930\u500b\u307e\u3067\u306e\u4e09\u89d2\u6570\u3092\u5217\u6319\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n    var nums = TriangularNumber.Take(30);\n    int n = 0;\n    foreach (var tn in nums) {\n        Console.WriteLine($\"{n} : {tn}\");\n        n++;\n    }\n\n\u7d50\u679c\n0 : 0\n1 : 1\n2 : 3\n3 : 6\n4 : 10\n5 : 15\n6 : 21\n7 : 28\n8 : 36\n9 : 45\n10 : 55\n11 : 66\n12 : 78\n13 : 91\n14 : 105\n15 : 120\n16 : 136\n17 : 153\n18 : 171\n19 : 190\n20 : 210\n21 : 231\n22 : 253\n23 : 276\n24 : 300\n25 : 325\n26 : 351\n27 : 378\n28 : 406\n29 : 435\n\n\n\u3053\u306e\u8a18\u4e8b\u306f\u3001Gushwell's C# Programming Page\u3067\u516c\u958b\u3057\u305f\u3082\u306e\u3092\u52a0\u7b46\u30fb\u4fee\u6b63\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\n## \u4e09\u89d2\u6570\u3068\u306f\n\u4e09\u89d2\u6570\u3068\u306f\u3001\u81ea\u7136\u6570\u3092\u9806\u6b21\u52a0\u3048\u308b\u3053\u3068\u3067\u6c42\u3081\u3089\u308c\u308b\u6570\u306e\u3053\u3068\u3067\u3059\u3002\u5177\u4f53\u7684\u306b\u306f\u3001\n\n<pre>\n1\n3   (=1+2)\n6   (=1+2+3)\n10  (=1+2+3+4)\n15  (=1+2+3+4+5)\n...\n</pre>\n\n\u3068\u306a\u308a\u307e\u3059\u3002\n\u3053\u308c\u3092\u3069\u3046\u3057\u3066\u4e09\u89d2\u6570\u3068\u8a00\u3046\u306e\u304b\u306f\u3001\u7c73\u4ff5\u3092\u4e09\u89d2\u5f62\u306b\u7a4d\u307f\u4e0a\u3052\u3066\u3044\u3063\u305f\u6642\u306e\u69d8\u5b50\u3092\u601d\u3044\u6d6e\u304b\u3079\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u5206\u304b\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\nn\u756a\u76ee\u306e\u4e09\u89d2\u6570\u3092 t(n) \u3068\u3059\u308b\u3068\u3001\n\n<pre>\nt(0) = 0\nt(n) = t(n-1) + n\n</pre>\n\n\u3068\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\n\n\n## C#\u306e\u30b3\u30fc\u30c9\n\n\u4ee5\u4e0b\u306e\uff13\u3064\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u66f8\u3044\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n- \u5148\u982d\u304b\u3089n\u500b\u306e\u4e09\u89d2\u6570\u3092\u6c42\u3081\u308b\n- \u4e09\u89d2\u6570\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b\n- n\u756a\u76ee\u306e\u4e09\u89d2\u6570\u3092\u6c42\u3081\u308b\n\n\n\u4ee5\u4e0b\u306b\u3001C#\u306e\u30b3\u30fc\u30c9TriangularNumber\u30af\u30e9\u30b9\u3092\u793a\u3057\u307e\u3059\u3002\n\n```csharp:TriangularNumber.cs\npublic static class TriangularNumber {\n    // \u4e09\u89d2\u6570\u3092\u5217\u6319\u3059\u308b\n    public static IEnumerable<int> Take(int n) {\n        yield return 0;\n        int ans = 0;\n        for (int i = 1; i < n; i++) {\n            ans += i;\n            yield return ans;\n        }\n    }\n\n    // \u4e09\u89d2\u6570\u304b\u3092\u8abf\u3079\u308b\n    public static bool IsCorrect(long x) {\n        long a = 8 * x + 1;\n        long b = (long)(Math.Sqrt(a));\n        if (b * b != a)\n            return false;\n        return (b - 1) % 2 == 0;\n    }\n\n    // \uff4e\u756a\u76ee\u306e\u4e09\u89d2\u6570\u3092\u6c42\u3081\u308b\n    public static long GetAt(int nth) {\n        return (long)nth * (nth + 1) / 2;\n    }\n}\n```\n\n\n\u300cn\u756a\u76ee\u306e\u4e09\u89d2\u6570\u3092\u6c42\u3081\u308b\u300dGetAt\u30e1\u30bd\u30c3\u30c9\u306f\u524d\u8ff0\u306e\u5b9a\u7fa9\u901a\u308a\u306b\u3001\u518d\u5e30\u3092\u4f7f\u3046\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u304c\u3001n \u304c\u5927\u304d\u306a\u6570\u306e\u5834\u5408\u306f\u3001\u3042\u307e\u308a\u52b9\u7387\u7684\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u516c\u5f0f\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\n<pre>\nt(n) = n * (n + 1) / 2\n</pre>\n\n## TriangularNumber.Take\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u884c\u4f8b\n\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u5148\u982d\u304b\u308930\u500b\u307e\u3067\u306e\u4e09\u89d2\u6570\u3092\u5217\u6319\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n```csharp\n    var nums = TriangularNumber.Take(30);\n    int n = 0;\n    foreach (var tn in nums) {\n        Console.WriteLine($\"{n} : {tn}\");\n        n++;\n    }\n```\n\n\u7d50\u679c\n\n<pre>\n0 : 0\n1 : 1\n2 : 3\n3 : 6\n4 : 10\n5 : 15\n6 : 21\n7 : 28\n8 : 36\n9 : 45\n10 : 55\n11 : 66\n12 : 78\n13 : 91\n14 : 105\n15 : 120\n16 : 136\n17 : 153\n18 : 171\n19 : 190\n20 : 210\n21 : 231\n22 : 253\n23 : 276\n24 : 300\n25 : 325\n26 : 351\n27 : 378\n28 : 406\n29 : 435\n</pre>\n\n-------------------------\n\u3053\u306e\u8a18\u4e8b\u306f\u3001Gushwell's C# Programming Page\u3067\u516c\u958b\u3057\u305f\u3082\u306e\u3092\u52a0\u7b46\u30fb\u4fee\u6b63\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\n\n\n\n\n", "tags": ["C#", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0", "C#\u5c0f\u54c1\u96c6\u30b7\u30ea\u30fc\u30b9"]}