{"tags": ["OpenMP", "C++"], "context": "\n\n\u306f\u3058\u3081\u306b\nC++\u3067OpenMP\u3092\u4f7f\u3063\u305f\u4e26\u5217\u5316\u3092\u3059\u308b\u969b\u3001parallel\u30ea\u30fc\u30b8\u30e7\u30f3\u3067\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u5909\u6570\u3092shared\u6307\u5b9a\u3067\u304d\u306a\u3044\u306e\u3060\u304c\u3001\u305d\u306e\u3053\u3068\u3092\u66f8\u3044\u305f\u65e5\u672c\u8a9e\u306e\u8a18\u4e8b\u304c\u3001\u5927\u6614\u306b\u81ea\u5206\u3067\u66f8\u3044\u305f\u8a18\u4e8b\u3057\u304b\u898b\u3064\u3051\u3089\u308c\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u3042\u3089\u305f\u3081\u3066\u3053\u3063\u3061\u306b\u3082\u66f8\u3044\u3066\u304a\u304f\u3002\n\n\u73fe\u8c61\n\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u5909\u6570\u3092OpenMP\u306eshared\u6307\u5b9a\u3059\u308b\u3068\u30a8\u30e9\u30fc\u3067\u6012\u3089\u308c\u308b\u3002\u4f8b\u3048\u3070\u3053\u3093\u306a\u30b3\u30fc\u30c9\u3002\n\ntest.cpp\n#include <iostream>\n#include <omp.h>\n#include <vector>\nclass Hoge {\nprivate:\n  std::vector<int> v;\npublic:\n  void func(void) {\n    int tid;\n    #pragma omp parallel shared(v) private(tid)\n    {\n      tid = omp_get_thread_num();\n      #pragma omp critical\n      v.push_back(tid);\n    }\n    for (unsigned int i = 0; i < v.size(); i++) {\n      std::cout << v[i] << std::endl;\n    }\n  }\n};\nint\nmain(void) {\n  Hoge h;\n  h.func();\n}\n\n\n\u3053\u308c\u306f\u3001\u30b9\u30ec\u30c3\u30c9\u756a\u53f7\u3092\u81ea\u5206\u306e\u30e1\u30f3\u30d0\u5909\u6570\u3067\u3042\u308bstd::vector<int>\u306b\u8caf\u3081\u308b\u3053\u3068\u3092\u610f\u56f3\u3057\u305f\u30b3\u30fc\u30c9\u3060\u304c\u3001g++\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3068\u3053\u3093\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u3002\n$ g++ -fopenmp test.cpp \ntest.cpp: \u30e1\u30f3\u30d0\u95a2\u6570 \u2018void Hoge::func()\u2019 \u5185:\ntest.cpp:10:48: \u30a8\u30e9\u30fc: \u2018Hoge::v\u2019 is not a variable in clause \u2018shared\u2019\n     #pragma omp parallel shared(v) private(tid)\n\n\nicpc\u3060\u3068\u3053\u3093\u306a\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\n$ icpc -fopenmp test.cpp \ntest.cpp(10): error: invalid entity for this variable list in omp clause\n      #pragma omp parallel shared(v) private(tid)\n                                  ^\n\ncompilation aborted for test.cpp (code 2)\n\n\n\n\u56de\u907f\u7b561\n\u4e00\u5ea6\u30c6\u30f3\u30dd\u30e9\u30ea\u306a\u5909\u6570\u306b\u53d7\u3051\u3066\u304b\u3089\u30b3\u30d4\u30fc\u3059\u308c\u3070\u5927\u4e08\u592b\u3002\u4f8b\u3048\u3070\u3053\u3093\u306a\u611f\u3058\u3002\n\ntest2.cpp\n#include <iostream>\n#include <omp.h>\n#include <vector>\nclass Hoge {\nprivate:\n  std::vector<int> v;\npublic:\n  void func(void) {\n    int tid;\n    std::vector<int> vtmp;\n    #pragma omp parallel shared(vtmp) private(tid)\n    {\n      tid = omp_get_thread_num();\n      #pragma omp critical\n      vtmp.push_back(tid);\n    }\n    for (unsigned int i = 0; i < vtmp.size(); i++) {\n      v.push_back(vtmp[i]);\n    }\n    for (unsigned int i = 0; i < v.size(); i++) {\n      std::cout << v[i] << std::endl;\n    }\n  }\n};\nint\nmain(void) {\n  Hoge h;\n  h.func();\n}\n\n\n$ g++ -fopenmp test2.cpp  \n\n$ OMP_NUM_THREADS=4 ./a.out \n1\n2\n0\n3\n\n\n\n\u56de\u907f\u7b562\n\u3069\u3046\u305b\u7121\u6307\u5b9a\u306e\u5909\u6570\u306fshared\u306b\u306a\u308b\u306f\u305a\u3067\u3042\u308b\u3057\u3001critical\u6307\u5b9a\u3057\u3066\u3044\u308c\u3070\u826f\u3044\u306f\u305a\u306a\u306e\u3067\u3001shared\u6307\u5b9a\u3092\u5916\u3059\u3068\u3044\u3046\u65b9\u6cd5\u3082\u3042\u308b\u3002\n\ntest3.cpp\n#include <iostream>\n#include <omp.h>\n#include <vector>\nclass Hoge {\nprivate:\n  std::vector<int> v;\npublic:\n  void func(void) {\n    int tid;\n    #pragma omp parallel private(tid)\n    {\n      tid = omp_get_thread_num();\n      #pragma omp critical\n      v.push_back(tid);\n    }\n    for (unsigned int i = 0; i < v.size(); i++) {\n      std::cout << v[i] << std::endl;\n    }\n  }\n};\nint\nmain(void) {\n  Hoge h;\n  h.func();\n}\n\n\n\u306a\u3093\u304b\u4e0d\u5b89\u306a\u306e\u3060\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u6b63\u3057\u304f\u52d5\u3044\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u308b\u3002\n\n\u539f\u56e0\uff1f\n\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u5909\u6570\u306fOpenMP\u3067shared\u6307\u5b9a\u3067\u304d\u305a\u3001\u4e00\u5ea6\u30c6\u30f3\u30dd\u30e9\u30ea\u5909\u6570\u306b\u843d\u3068\u3057\u3066\u5f8c\u3067\u30b3\u30d4\u30fc\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u3053\u308c\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u3082\u306e\u30ba\u30d0\u30ea\u306e\u56de\u7b54(\u3068\u3044\u3046\u304b\u4ed5\u69d8)\u3092\u898b\u3064\u3051\u3089\u308c\u306a\u3044\u306e\u3060\u304c\u3001StackOverflow\u3067\u306e\u56de\u7b54\u305d\u306e1\u3084\u305d\u306e2\u306b\u3088\u308c\u3070\u3001\n\n\u30af\u30e9\u30b9\u5909\u6570\u306f\u3001\u5b9f\u884c\u6642\u307e\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u308c\u3066\u3044\u306a\u3044\n\u306a\u306e\u3067\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u305d\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u77e5\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\nshared\u306a\u3089\u826f\u3044\u304c\u3001private\u5316\u3059\u308b\u306b\u306f\u30c7\u30fc\u30bf\u3092\u30b3\u30d4\u30fc\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u305a\u3001\u305d\u308c\u306f\u3067\u304d\u306a\u3044\u304b\u3089\u30a8\u30e9\u30fc\u306b\u306a\u308b\n\n\u3068\u3044\u3046\u7406\u5c48\u3089\u3057\u3044\u3002\u305f\u3060\u3001\u3053\u308c\u3060\u3068private\u6307\u5b9a\u3057\u3066\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u306f\u308f\u304b\u308b\u304c\u3001\u4e0a\u8a18\u306e\u3088\u3046\u306bshared\u6307\u5b9a\u3057\u305f\u3089\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3053\u3068\u306e\u8aac\u660e\u304c\u3067\u304d\u306a\u3044\u6c17\u304c\u3059\u308b\uff1f\n\nstatic\u30e1\u30f3\u30d0\u3068const\u5909\u6570\n\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u30a2\u30c9\u30ec\u30b9\u304c\u6c7a\u307e\u3063\u3066\u3044\u308c\u3070\u3044\u3044\u306e\uff1f\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u30e1\u30f3\u30d0\u5909\u6570\u3092static\u306b\u3057\u3066\u307f\u308b\u3002\n\ntest4.cpp\n#include <iostream>\n#include <omp.h>\n#include <vector>\nclass Hoge {\nprivate:\n  static std::vector<int> v;\npublic:\n  void func(void) {\n    int tid;\n    #pragma omp parallel shared(v) private(tid)\n    {\n      tid = omp_get_thread_num();\n      #pragma omp critical\n      v.push_back(tid);\n    }\n    for (unsigned int i = 0; i < v.size(); i++) {\n      std::cout << v[i] << std::endl;\n    }\n  }\n};\nstd::vector<int> Hoge::v;\nint\nmain(void) {\n  Hoge h;\n  h.func();\n}\n\n\n\u3053\u308c\u3092g++\u306b\u98df\u308f\u3059\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\n$ g++ -fopenmp test4.cpp\ntest4.cpp: In member function 'void Hoge::func()':\ntest4.cpp:10:48: error: 'Hoge::v' is predetermined 'shared' for 'shared'\n\n\u3053\u308c\u306f\u3053\u3046\u3044\u3046\u3053\u3068\u304c\u8d77\u304d\u3066\u3044\u308b\u3089\u3057\u3044\u3002\n\n\u30b3\u30f3\u30d1\u30a4\u30e9\u306fHoge::v\u304cstatic\u306a\u306e\u3067\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067shared\u3060\u3068\u5224\u65ad\u3059\u308b\n\u306a\u306e\u306b\u30d7\u30ed\u30b0\u30e9\u30de\u304c\u660e\u793a\u7684\u306bshared\u6307\u5b9a\u3057\u305f\u306e\u3067\u300c\u4e8c\u91cd\u6307\u5b9a\u3060\u300d\u3068\u6012\u308b\n\n\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u5224\u65ad\u3068\u4e00\u81f4\u3057\u3066\u3044\u308b\u306e\u3060\u304b\u3089\u6012\u308b\u3053\u3068\u306a\u3044\u3058\u3083\u3093\u3001\u3068\u601d\u3046\u306e\u3060\u304c\u30fb\u30fb\u30fb\n\u306a\u304a\u3001static\u30e1\u30f3\u30d0\u3067\u306a\u304f\u3001const\u5909\u6570\u306b\u3064\u3044\u3066\u3082g++\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067shared\u5224\u5b9a\u3092\u3059\u308b\u305f\u3081\u3001\u30d7\u30ed\u30b0\u30e9\u30de\u304c\u660e\u793a\u7684\u306bshared\u6307\u5b9a\u3059\u308b\u3068\u300c\u4e8c\u91cd\u6307\u5b9a\u3060\uff01\u300d\u3068\u6012\u3089\u308c\u308b\u3002\n\ntest5.cpp\n#include <iostream>\n#include <omp.h>\n\nconst int c = 1;\n\nint\nmain(void){\n  int x[10];\n#pragma omp parallel for shared(c)\n  for(int i=0;i<10;i++){\n    x[i] = c;\n  }\n  for(int i=0;i<10;i++){\n    std::cout << x[i] << std::endl;\n  }\n}\n\n\n$ g++ -fopenmp test5.cpp\ntest5.cpp: In function 'int main()':\ntest5.cpp:9:35: error: 'c' is predetermined 'shared' for 'shared'\n\n\u3061\u306a\u307f\u306b\u3001\u30a4\u30f3\u30c6\u30eb\u30b3\u30f3\u30d1\u30a4\u30e9(icpc)\u3060\u3068\u3001static\u30e1\u30f3\u30d0\u306eshared\u6307\u5b9a\u306b\u3064\u3044\u3066\u306f\u30a8\u30e9\u30fc\u3001const\u5909\u6570\u306eshared\u6307\u5b9a\u306b\u3064\u3044\u3066\u306f\u901a\u308b\u3002\n$ icpc -fopenmp test4.cpp # \u6012\u308b\n\ntest4.cpp(10): error: invalid entity for this variable list in omp clause\n      #pragma omp parallel shared(v) private(tid)\n                                  ^\n\ncompilation aborted for test4.cpp (code 2)\n\n$ icpc -fopenmp test5.cpp # \u901a\u308b\n\n\u3055\u3089\u306b\u8a00\u3048\u3070\u3001\u5bcc\u58eb\u901a\u30b3\u30f3\u30d1\u30a4\u30e9\u3060\u3068\u3001\u30e1\u30f3\u30d0\u5909\u6570\u306eshared\u6307\u5b9a\u306f\u3067\u304d\u306a\u3044\u304c\u3001static\u30e1\u30f3\u30d0\u3082const\u5909\u6570\u3082shared\u6307\u5b9a\u3067\u304d\u308b\u3002\n\u307e\u3068\u3081\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u3002\n\n\n\nshared\u6307\u5b9a\u3059\u308b\u3082\u306e\ng++\n\u30a4\u30f3\u30c6\u30eb\u30b3\u30f3\u30d1\u30a4\u30e9\n\u5bcc\u58eb\u901a\u30b3\u30f3\u30d1\u30a4\u30e9\n\n\n\n\n\u30e1\u30f3\u30d0\u5909\u6570\n\u00d7\n\u00d7\n\u00d7\n\n\nstatic\u30e1\u30f3\u30d0\n\u00d7\n\u00d7\n\u25cb\n\n\nconst\u5909\u6570\n\u00d7\n\u25cb\n\u25cb\n\n\n\n\n\u307e\u3068\u3081\nOpenMP\u3088\u304f\u308f\u304b\u3093\u306a\u3044\u3002\n# \u306f\u3058\u3081\u306b\n\nC++\u3067OpenMP\u3092\u4f7f\u3063\u305f\u4e26\u5217\u5316\u3092\u3059\u308b\u969b\u3001parallel\u30ea\u30fc\u30b8\u30e7\u30f3\u3067\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u5909\u6570\u3092shared\u6307\u5b9a\u3067\u304d\u306a\u3044\u306e\u3060\u304c\u3001\u305d\u306e\u3053\u3068\u3092\u66f8\u3044\u305f\u65e5\u672c\u8a9e\u306e\u8a18\u4e8b\u304c\u3001[\u5927\u6614\u306b\u81ea\u5206\u3067\u66f8\u3044\u305f\u8a18\u4e8b](http://d.hatena.ne.jp/kaityo/20120523/1337743800)\u3057\u304b\u898b\u3064\u3051\u3089\u308c\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u3042\u3089\u305f\u3081\u3066\u3053\u3063\u3061\u306b\u3082\u66f8\u3044\u3066\u304a\u304f\u3002\n\n# \u73fe\u8c61\n\n\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u5909\u6570\u3092OpenMP\u306eshared\u6307\u5b9a\u3059\u308b\u3068\u30a8\u30e9\u30fc\u3067\u6012\u3089\u308c\u308b\u3002\u4f8b\u3048\u3070\u3053\u3093\u306a\u30b3\u30fc\u30c9\u3002\n\n```cpp:test.cpp\n#include <iostream>\n#include <omp.h>\n#include <vector>\nclass Hoge {\nprivate:\n  std::vector<int> v;\npublic:\n  void func(void) {\n    int tid;\n    #pragma omp parallel shared(v) private(tid)\n    {\n      tid = omp_get_thread_num();\n      #pragma omp critical\n      v.push_back(tid);\n    }\n    for (unsigned int i = 0; i < v.size(); i++) {\n      std::cout << v[i] << std::endl;\n    }\n  }\n};\nint\nmain(void) {\n  Hoge h;\n  h.func();\n}\n```\n\n\u3053\u308c\u306f\u3001\u30b9\u30ec\u30c3\u30c9\u756a\u53f7\u3092\u81ea\u5206\u306e\u30e1\u30f3\u30d0\u5909\u6570\u3067\u3042\u308b`std::vector<int>`\u306b\u8caf\u3081\u308b\u3053\u3068\u3092\u610f\u56f3\u3057\u305f\u30b3\u30fc\u30c9\u3060\u304c\u3001g++\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3068\u3053\u3093\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u3002\n\n```shell-session\n$ g++ -fopenmp test.cpp \ntest.cpp: \u30e1\u30f3\u30d0\u95a2\u6570 \u2018void Hoge::func()\u2019 \u5185:\ntest.cpp:10:48: \u30a8\u30e9\u30fc: \u2018Hoge::v\u2019 is not a variable in clause \u2018shared\u2019\n     #pragma omp parallel shared(v) private(tid)\n\n```\n\nicpc\u3060\u3068\u3053\u3093\u306a\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\n\n```shell-session\n$ icpc -fopenmp test.cpp \ntest.cpp(10): error: invalid entity for this variable list in omp clause\n      #pragma omp parallel shared(v) private(tid)\n                                  ^\n\ncompilation aborted for test.cpp (code 2)\n\n```\n\n# \u56de\u907f\u7b561\n\n\u4e00\u5ea6\u30c6\u30f3\u30dd\u30e9\u30ea\u306a\u5909\u6570\u306b\u53d7\u3051\u3066\u304b\u3089\u30b3\u30d4\u30fc\u3059\u308c\u3070\u5927\u4e08\u592b\u3002\u4f8b\u3048\u3070\u3053\u3093\u306a\u611f\u3058\u3002\n\n```cpp:test2.cpp\n#include <iostream>\n#include <omp.h>\n#include <vector>\nclass Hoge {\nprivate:\n  std::vector<int> v;\npublic:\n  void func(void) {\n    int tid;\n    std::vector<int> vtmp;\n    #pragma omp parallel shared(vtmp) private(tid)\n    {\n      tid = omp_get_thread_num();\n      #pragma omp critical\n      vtmp.push_back(tid);\n    }\n    for (unsigned int i = 0; i < vtmp.size(); i++) {\n      v.push_back(vtmp[i]);\n    }\n    for (unsigned int i = 0; i < v.size(); i++) {\n      std::cout << v[i] << std::endl;\n    }\n  }\n};\nint\nmain(void) {\n  Hoge h;\n  h.func();\n}\n```\n\n```shell-session\n$ g++ -fopenmp test2.cpp  \n\n$ OMP_NUM_THREADS=4 ./a.out \n1\n2\n0\n3\n\n```\n# \u56de\u907f\u7b562\n\n\u3069\u3046\u305b\u7121\u6307\u5b9a\u306e\u5909\u6570\u306fshared\u306b\u306a\u308b\u306f\u305a\u3067\u3042\u308b\u3057\u3001critical\u6307\u5b9a\u3057\u3066\u3044\u308c\u3070\u826f\u3044\u306f\u305a\u306a\u306e\u3067\u3001shared\u6307\u5b9a\u3092\u5916\u3059\u3068\u3044\u3046\u65b9\u6cd5\u3082\u3042\u308b\u3002\n\n```cpp:test3.cpp\n#include <iostream>\n#include <omp.h>\n#include <vector>\nclass Hoge {\nprivate:\n  std::vector<int> v;\npublic:\n  void func(void) {\n    int tid;\n    #pragma omp parallel private(tid)\n    {\n      tid = omp_get_thread_num();\n      #pragma omp critical\n      v.push_back(tid);\n    }\n    for (unsigned int i = 0; i < v.size(); i++) {\n      std::cout << v[i] << std::endl;\n    }\n  }\n};\nint\nmain(void) {\n  Hoge h;\n  h.func();\n}\n```\n\n\u306a\u3093\u304b\u4e0d\u5b89\u306a\u306e\u3060\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u6b63\u3057\u304f\u52d5\u3044\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u308b\u3002\n\n# \u539f\u56e0\uff1f\n\n\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u5909\u6570\u306fOpenMP\u3067shared\u6307\u5b9a\u3067\u304d\u305a\u3001\u4e00\u5ea6\u30c6\u30f3\u30dd\u30e9\u30ea\u5909\u6570\u306b\u843d\u3068\u3057\u3066\u5f8c\u3067\u30b3\u30d4\u30fc\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u3053\u308c\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u3082\u306e\u30ba\u30d0\u30ea\u306e\u56de\u7b54(\u3068\u3044\u3046\u304b\u4ed5\u69d8)\u3092\u898b\u3064\u3051\u3089\u308c\u306a\u3044\u306e\u3060\u304c\u3001[StackOverflow\u3067\u306e\u56de\u7b54\u305d\u306e1](http://stackoverflow.com/a/5007203)\u3084[\u305d\u306e2](http://stackoverflow.com/a/5007203)\u306b\u3088\u308c\u3070\u3001\n\n* \u30af\u30e9\u30b9\u5909\u6570\u306f\u3001\u5b9f\u884c\u6642\u307e\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u308c\u3066\u3044\u306a\u3044\n* \u306a\u306e\u3067\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u305d\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u77e5\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\n* shared\u306a\u3089\u826f\u3044\u304c\u3001private\u5316\u3059\u308b\u306b\u306f\u30c7\u30fc\u30bf\u3092\u30b3\u30d4\u30fc\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u305a\u3001\u305d\u308c\u306f\u3067\u304d\u306a\u3044\u304b\u3089\u30a8\u30e9\u30fc\u306b\u306a\u308b\n\n\u3068\u3044\u3046\u7406\u5c48\u3089\u3057\u3044\u3002\u305f\u3060\u3001\u3053\u308c\u3060\u3068private\u6307\u5b9a\u3057\u3066\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u306f\u308f\u304b\u308b\u304c\u3001\u4e0a\u8a18\u306e\u3088\u3046\u306bshared\u6307\u5b9a\u3057\u305f\u3089\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3053\u3068\u306e\u8aac\u660e\u304c\u3067\u304d\u306a\u3044\u6c17\u304c\u3059\u308b\uff1f\n\n# static\u30e1\u30f3\u30d0\u3068const\u5909\u6570\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u30a2\u30c9\u30ec\u30b9\u304c\u6c7a\u307e\u3063\u3066\u3044\u308c\u3070\u3044\u3044\u306e\uff1f\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u30e1\u30f3\u30d0\u5909\u6570\u3092static\u306b\u3057\u3066\u307f\u308b\u3002\n\n```cpp:test4.cpp\n#include <iostream>\n#include <omp.h>\n#include <vector>\nclass Hoge {\nprivate:\n  static std::vector<int> v;\npublic:\n  void func(void) {\n    int tid;\n    #pragma omp parallel shared(v) private(tid)\n    {\n      tid = omp_get_thread_num();\n      #pragma omp critical\n      v.push_back(tid);\n    }\n    for (unsigned int i = 0; i < v.size(); i++) {\n      std::cout << v[i] << std::endl;\n    }\n  }\n};\nstd::vector<int> Hoge::v;\nint\nmain(void) {\n  Hoge h;\n  h.func();\n}\n```\n\n\u3053\u308c\u3092g++\u306b\u98df\u308f\u3059\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\n\n```shell-session\n$ g++ -fopenmp test4.cpp\ntest4.cpp: In member function 'void Hoge::func()':\ntest4.cpp:10:48: error: 'Hoge::v' is predetermined 'shared' for 'shared'\n```\n\n\u3053\u308c\u306f\u3053\u3046\u3044\u3046\u3053\u3068\u304c\u8d77\u304d\u3066\u3044\u308b\u3089\u3057\u3044\u3002\n\n* \u30b3\u30f3\u30d1\u30a4\u30e9\u306f`Hoge::v`\u304cstatic\u306a\u306e\u3067\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067shared\u3060\u3068\u5224\u65ad\u3059\u308b\n* \u306a\u306e\u306b\u30d7\u30ed\u30b0\u30e9\u30de\u304c\u660e\u793a\u7684\u306bshared\u6307\u5b9a\u3057\u305f\u306e\u3067\u300c\u4e8c\u91cd\u6307\u5b9a\u3060\u300d\u3068\u6012\u308b\n\n\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u5224\u65ad\u3068\u4e00\u81f4\u3057\u3066\u3044\u308b\u306e\u3060\u304b\u3089\u6012\u308b\u3053\u3068\u306a\u3044\u3058\u3083\u3093\u3001\u3068\u601d\u3046\u306e\u3060\u304c\u30fb\u30fb\u30fb\n\n\u306a\u304a\u3001static\u30e1\u30f3\u30d0\u3067\u306a\u304f\u3001const\u5909\u6570\u306b\u3064\u3044\u3066\u3082g++\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067shared\u5224\u5b9a\u3092\u3059\u308b\u305f\u3081\u3001\u30d7\u30ed\u30b0\u30e9\u30de\u304c\u660e\u793a\u7684\u306bshared\u6307\u5b9a\u3059\u308b\u3068\u300c\u4e8c\u91cd\u6307\u5b9a\u3060\uff01\u300d\u3068\u6012\u3089\u308c\u308b\u3002\n\n```cpp:test5.cpp\n#include <iostream>\n#include <omp.h>\n\nconst int c = 1;\n\nint\nmain(void){\n  int x[10];\n#pragma omp parallel for shared(c)\n  for(int i=0;i<10;i++){\n    x[i] = c;\n  }\n  for(int i=0;i<10;i++){\n    std::cout << x[i] << std::endl;\n  }\n}\n```\n\n```shell-session\n$ g++ -fopenmp test5.cpp\ntest5.cpp: In function 'int main()':\ntest5.cpp:9:35: error: 'c' is predetermined 'shared' for 'shared'\n```\n\n\u3061\u306a\u307f\u306b\u3001\u30a4\u30f3\u30c6\u30eb\u30b3\u30f3\u30d1\u30a4\u30e9(icpc)\u3060\u3068\u3001static\u30e1\u30f3\u30d0\u306eshared\u6307\u5b9a\u306b\u3064\u3044\u3066\u306f\u30a8\u30e9\u30fc\u3001const\u5909\u6570\u306eshared\u6307\u5b9a\u306b\u3064\u3044\u3066\u306f\u901a\u308b\u3002\n\n```shell-session\n$ icpc -fopenmp test4.cpp # \u6012\u308b\n\ntest4.cpp(10): error: invalid entity for this variable list in omp clause\n      #pragma omp parallel shared(v) private(tid)\n                                  ^\n\ncompilation aborted for test4.cpp (code 2)\n\n$ icpc -fopenmp test5.cpp # \u901a\u308b\n```\n\n\u3055\u3089\u306b\u8a00\u3048\u3070\u3001\u5bcc\u58eb\u901a\u30b3\u30f3\u30d1\u30a4\u30e9\u3060\u3068\u3001\u30e1\u30f3\u30d0\u5909\u6570\u306eshared\u6307\u5b9a\u306f\u3067\u304d\u306a\u3044\u304c\u3001static\u30e1\u30f3\u30d0\u3082const\u5909\u6570\u3082shared\u6307\u5b9a\u3067\u304d\u308b\u3002\n\n\u307e\u3068\u3081\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u3002\n\n| shared\u6307\u5b9a\u3059\u308b\u3082\u306e | g++ | \u30a4\u30f3\u30c6\u30eb\u30b3\u30f3\u30d1\u30a4\u30e9 | \u5bcc\u58eb\u901a\u30b3\u30f3\u30d1\u30a4\u30e9 |\n|:-:|:-:|:-:|:-:|\n| \u30e1\u30f3\u30d0\u5909\u6570  | \u00d7 | \u00d7 | \u00d7 |\n| static\u30e1\u30f3\u30d0  | \u00d7  | \u00d7 | \u25cb |\n| const\u5909\u6570  | \u00d7  | \u25cb | \u25cb |\n\n# \u307e\u3068\u3081\n\nOpenMP\u3088\u304f\u308f\u304b\u3093\u306a\u3044\u3002\n"}