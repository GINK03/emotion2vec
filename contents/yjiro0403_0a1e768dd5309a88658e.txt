{"context": "\u7d30\u3005\u3068\u3057\u305f\u3082\u306e\u3092\u7d30\u3005\u3068\u8f09\u305b\u3066\u3044\u304d\u307e\u3059\n\n\u6a19\u6e96\u30a8\u30e9\u30fc\u51fa\u529b\n\u6a19\u6e96\u51fa\u529b(stdout.writeln\u3084writeln)\u306f\u5165\u529b\u3068\u304b\u306e\u5f8c\u306b\u307e\u3068\u3081\u3066\u51fa\u529b\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059. \nstderr\u3067\u306f\u305d\u306e\u5834\u3067\u51fa\u529b\u3055\u308c\u307e\u3059.\n\nstderr.writeln(\"\u5165\u529b\u524d\u306b\u51fa\u529b\u3055\u308c\u308b\");\nstdout.writeln(\"\u5165\u529b\u5f8c\u306b\u51fa\u529b\u3055\u308c\u308b\");\nwriteln(\"\u5165\u529b\u5f8c~~\")\n\nchar[] hoge = readln().dup;\n\nwriteln(hoge);\n\n\n[\u51fa\u529b]\n\u5165\u529b\u524d\u306b\u51fa\u529b\u3055\u308c\u308b\n(\u5165\u529b)\n\u5165\u529b\u5f8c\u306b\u51fa\u529b\u3055\u308c\u308b\n\u5165\u529b\u5f8c~~\n(\u5165\u529b\u7d50\u679c)\n\n\u306e\u9806\u3067\u51fa\u529b\u3055\u308c\u307e\u3059\n\n\u5165\u529b\n\u30c6\u30ad\u30b9\u30c8\u5165\u529b\nimport std.file, std.string, std.algorithm, std.array;\n\n//\u30c1\u30a7\u30a4\u30f3\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u308f\u306a\u3044\u51e6\u7406\nstring[] text = splitLines(readText(\"text.txt\"));\nstring[] hoge;\n\nforeach(int i; text){\n    hoge[i] = text[i];\n}\n\n\n//\u6700\u521d\u306b\u30c7\u30fc\u30bf\u3092\u3059\u3079\u3066\u8aad\u307f\u8fbc\u3093\u3067\u4e00\u6c17\u306b\u5206\u5272\u3059\u308b\u65b9\u6cd5\n//\u5bfe\u8c61\u30d5\u30a1\u30a4\u30eb\u304c\u5927\u304d\u3044\u3068\u7d50\u69cb\u30e1\u30e2\u30ea\u3092\u98df\u3046\u3089\u3057\u3044\nstring[] text2 = splitLines(readText(\"text.txt\")).map!strip.array;\n\n//\u5404\u884c\u3092\u9806\u3005\u306b\u51e6\u7406\nauto strippedLines = File(\"text.txt\").byLineCopy().map!strip.array;\n\n\u53c2\u8003: \u5f31\u5c0fPHPer\u306eD\u8a00\u8a9e\u6311\u6226\u8a184\n\u30ad\u30fc\u30dc\u30fc\u30c9\u5165\u529b\nimport std.string, std.algorithm, std.array, std.conv;\n\n//char[]\u578b\u306e\u5165\u529b\nchar[] arr = readln().dup;\n\n//\u4efb\u610f\u306e\u8981\u7d20\u3092int\u578b\u306b\u5909\u63db\u3057\u3066\u683c\u7d0d\n//\u5165\u529b\u3059\u308b\u3068\u304d\u306f\u30b9\u30da\u30fc\u30b9\u3067\u533a\u5207\u308b\n//\u3082\u3063\u3068\u3044\u3044\u3084\u308a\u65b9\u3042\u308b\u3088\u306d...\nstring[] input = readln().split;\nint num = input[0].to!int;\n\n//int\u306e\u914d\u5217\u306b\u4ee3\u5165\nint[] a = readln().split.map!(to!int).array;\n\n\u203breadln()\u306b\u3064\u3044\u3066\nbuf = readln()\u3068\u3044\u3046\u5f62\u306b\u3059\u308b\u3088\u308areadln(buf)\u306e\u307b\u3046\u304c\u9ad8\u901f\u3089\u3057\u3044\u3067\u3059\n\n\u4e8c\u6b21\u5143\u914d\u5217\nint\u578b\u306e\u4e8c\u6b21\u5143\u914d\u5217\n//int\u578b\u306e\u914d\u5217\nint[3][] arr_i = [[1,2,3],\n                  [4,5,6],];\n\n//\u6ce8\u610f\uff01\n//\u5b9a\u7fa9\u306e[i][j]\u306f\u53c2\u7167\u3067\u306f[j][i]\u306b\u306a\u3063\u3066\u3044\u308b\uff01\nassert(arr_i[0][2] == 3);\n\n//\u6587\u5b57\u5217\u306e\u914d\u5217\nchar[4][] arr_c = [\"abcd\",\n                   \"efgh\",];\n//\u3053\u308c\u3067\u3082ok\nstring[]  arr_s = [\"abcd\",\n                   \"efgh\",];\n\narr_c[1][2] = 'i'; //string\u3067\u306f\u3053\u3093\u306a\u3075\u3046\u306b\u3067\u304d\u306a\u3044\narr_s[0]    = \"test\"; //\u3053\u308c\u306a\u3089\u3067\u304d\u308b\n\n\n\nalias\n\u30b7\u30f3\u30dc\u30eb\u306b\u5225\u540d\u3092\u4ed8\u3051\u308b\u6a5f\u80fd.\ntypedef\u306e\u3088\u3046\u306b\u3082\u4f7f\u3048\u307e\u3059.\nalias myint = int;\n\nvoid foo(int x) {...}\nvoid foo(myint m) {...} //\u30a8\u30e9\u30fc : foo(int x)\u3068\u540c\u3058. \n\n\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\ntemplate Integer(int nbits)\n{\n    static if (nbits <= 8)\n    alias  byte Integer; //alias Integer = byte \u3068\u540c\u7fa9\n    else static if (nbits <= 16)\n    alias short Integer;\n    else static if (nbits <= 32)\n    alias int Integer;\n    else static if (nbits <= 64)\n    alias long Integer;\n    else\n    static assert(0);\n}\n\nint main()\n{\n    Integer!(8) i ;\n    Integer!(16) j ;\n    Integer!(29) k ;\n    Integer!(64) l ;\n\n    assert(i.sizeof == byte.sizeof\n       && j.sizeof == short.sizeof\n       && k.sizeof == int.sizeof\n       && l.sizeof == long.sizeof);\n\n    return 0;\n}\n\n\u307e\u305f\u4ee5\u4e0b\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u5b9a\u6570\u3092\u6c42\u3081\u308b\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\ntemplate Fibonacci(int n)\n{\n    static if (n >= 2)\n    enum Fibonacci = Fibonacci!(n-1) + Fibonacci!(n-2);\n    else static if (n == 1)\n    enum Fibonacci = 1;\n    else static if (n == 0)\n    enum Fibonacci = 0;\n    else\n    static assert(0);\n}\n\nvoid main()\n{\n    assert(Fibonacci!(10)==55);\n}\n\n\u53c2\u8003:\n\u516c\u5f0f(\u65e5\u672c\u8a9e\u8a33)\n\nAppender\nimport std.array;\nimport std.algorithm;\n\nvoid main() {\n    auto app = appender!string();\n    string b = \"abcdefg\";\n    app.put(b);    \n    assert(app.data == \"abcdefg\");\n    assert(app.data[3..5] == \"de\");\n\n    app.clear(); //\u914d\u5217\u3092\u30af\u30ea\u30a2\n\n    int[] a = [ 1, 2 ];\n    auto app2 = appender(a);\n    app2.put(3);\n    app2.put([ 4, 5, 6 ]);\n    assert(app2.data == [ 1, 2, 3, 4, 5, 6 ]);\n\n    //appender\u306edata\u306f\u666e\u901a\u306e\u914d\u5217\u3068\u540c\u3058\u3088\u3046\u306b\u4f7f\u3048\u308b\u307f\u305f\u3044\n    app.data[1..3].bringToFront(app.data[4..6]);\n    assert(app.data == [0,4,5,3,1,2,6]);\n}\n    app ~= [7,8]; //\u3053\u308c\u3082OK\n    assert(app.data == [0,4,5,3,1,2,6,7,8]);\n\n\u53c2\u8003:\nD\u8a00\u8a9e\u53cb\u306e\u4f1a\n\n\u305d\u306e\u4ed6\n\n\u6587\u5b57\u304b\u6570\u5b57\u304b\u5224\u65ad\nisNumeric\u304c\u3044\u3044\u306d\n //\u6570\u5024\u306b\u306f\u3067\u304d\u306a\u3044\u306e\u3067false\n assert(isNumeric(\"d3e\"))==false);\n\n //\u6570\u5b57\u5217\u306a\u306e\u3067true\n assert(isNumeric(\"123\")==true);\n\nstd.traits\u306b\u306f\u826f\u3055\u3052\u306a\u6a5f\u80fd\u304c\u305f\u304f\u3055\u3093\u3042\u308a\u305d\u3046\u3067\u3059\n\nSleep\u51e6\u7406\nimport core.thread;\n\n Thread.sleep( dur!(\"msecs\")( 50 ) );  // 50\u30df\u30ea\u79d2sleep\n Thread.sleep( dur!(\"seconds\")( 5 ) ); // 5\u79d2sleep\n\n\n\u6642\u9593\nimport std.stdio;\nimport std.datetime;\n\nvoid main()\n{\n    auto t= Clock.currTime();\n    writef(\"%04d-%02d-%02d %02d:%02d:%02d\\n\"\n        ,t.year\n        ,t.month\n        ,t.day\n        ,t.hour\n        ,t.minute\n        ,t.second);\n}\n\n\u53c2\u8003:\n\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u30b5\u30f3\u30d7\u30eb\u96c6\n\u7d30\u3005\u3068\u3057\u305f\u3082\u306e\u3092\u7d30\u3005\u3068\u8f09\u305b\u3066\u3044\u304d\u307e\u3059\n\n#\u6a19\u6e96\u30a8\u30e9\u30fc\u51fa\u529b\n\u6a19\u6e96\u51fa\u529b(stdout.writeln\u3084writeln)\u306f\u5165\u529b\u3068\u304b\u306e\u5f8c\u306b\u307e\u3068\u3081\u3066\u51fa\u529b\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059. \nstderr\u3067\u306f\u305d\u306e\u5834\u3067\u51fa\u529b\u3055\u308c\u307e\u3059.\n\n```d\n\nstderr.writeln(\"\u5165\u529b\u524d\u306b\u51fa\u529b\u3055\u308c\u308b\");\nstdout.writeln(\"\u5165\u529b\u5f8c\u306b\u51fa\u529b\u3055\u308c\u308b\");\nwriteln(\"\u5165\u529b\u5f8c~~\")\n\nchar[] hoge = readln().dup;\n\nwriteln(hoge);\n\n```\n\n```\n[\u51fa\u529b]\n\u5165\u529b\u524d\u306b\u51fa\u529b\u3055\u308c\u308b\n(\u5165\u529b)\n\u5165\u529b\u5f8c\u306b\u51fa\u529b\u3055\u308c\u308b\n\u5165\u529b\u5f8c~~\n(\u5165\u529b\u7d50\u679c)\n```\n\n\u306e\u9806\u3067\u51fa\u529b\u3055\u308c\u307e\u3059\n\n#\u5165\u529b\n\u30c6\u30ad\u30b9\u30c8\u5165\u529b\n\n```d\nimport std.file, std.string, std.algorithm, std.array;\n\n//\u30c1\u30a7\u30a4\u30f3\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u308f\u306a\u3044\u51e6\u7406\nstring[] text = splitLines(readText(\"text.txt\"));\nstring[] hoge;\n\nforeach(int i; text){\n    hoge[i] = text[i];\n}\n\n\n//\u6700\u521d\u306b\u30c7\u30fc\u30bf\u3092\u3059\u3079\u3066\u8aad\u307f\u8fbc\u3093\u3067\u4e00\u6c17\u306b\u5206\u5272\u3059\u308b\u65b9\u6cd5\n//\u5bfe\u8c61\u30d5\u30a1\u30a4\u30eb\u304c\u5927\u304d\u3044\u3068\u7d50\u69cb\u30e1\u30e2\u30ea\u3092\u98df\u3046\u3089\u3057\u3044\nstring[] text2 = splitLines(readText(\"text.txt\")).map!strip.array;\n\n//\u5404\u884c\u3092\u9806\u3005\u306b\u51e6\u7406\nauto strippedLines = File(\"text.txt\").byLineCopy().map!strip.array;\n```\n\n\u53c2\u8003: [\u5f31\u5c0fPHPer\u306eD\u8a00\u8a9e\u6311\u6226\u8a184](http://qiita.com/kiridaruma/items/2acd43f9cc505f0eccf1)\n\n\u30ad\u30fc\u30dc\u30fc\u30c9\u5165\u529b\n\n```d\nimport std.string, std.algorithm, std.array, std.conv;\n\n//char[]\u578b\u306e\u5165\u529b\nchar[] arr = readln().dup;\n\n//\u4efb\u610f\u306e\u8981\u7d20\u3092int\u578b\u306b\u5909\u63db\u3057\u3066\u683c\u7d0d\n//\u5165\u529b\u3059\u308b\u3068\u304d\u306f\u30b9\u30da\u30fc\u30b9\u3067\u533a\u5207\u308b\n//\u3082\u3063\u3068\u3044\u3044\u3084\u308a\u65b9\u3042\u308b\u3088\u306d...\nstring[] input = readln().split;\nint num = input[0].to!int;\n\n//int\u306e\u914d\u5217\u306b\u4ee3\u5165\nint[] a = readln().split.map!(to!int).array;\n```\n\n\u203breadln()\u306b\u3064\u3044\u3066\nbuf = readln()\u3068\u3044\u3046\u5f62\u306b\u3059\u308b\u3088\u308areadln(buf)\u306e\u307b\u3046\u304c\u9ad8\u901f\u3089\u3057\u3044\u3067\u3059\n\n#\u4e8c\u6b21\u5143\u914d\u5217\nint\u578b\u306e\u4e8c\u6b21\u5143\u914d\u5217\n\n```d\n//int\u578b\u306e\u914d\u5217\nint[3][] arr_i = [[1,2,3],\n                  [4,5,6],];\n\n//\u6ce8\u610f\uff01\n//\u5b9a\u7fa9\u306e[i][j]\u306f\u53c2\u7167\u3067\u306f[j][i]\u306b\u306a\u3063\u3066\u3044\u308b\uff01\nassert(arr_i[0][2] == 3);\n\n//\u6587\u5b57\u5217\u306e\u914d\u5217\nchar[4][] arr_c = [\"abcd\",\n                   \"efgh\",];\n//\u3053\u308c\u3067\u3082ok\nstring[]  arr_s = [\"abcd\",\n                   \"efgh\",];\n\narr_c[1][2] = 'i'; //string\u3067\u306f\u3053\u3093\u306a\u3075\u3046\u306b\u3067\u304d\u306a\u3044\narr_s[0]    = \"test\"; //\u3053\u308c\u306a\u3089\u3067\u304d\u308b\n\n```\n\n#alias\n\u30b7\u30f3\u30dc\u30eb\u306b\u5225\u540d\u3092\u4ed8\u3051\u308b\u6a5f\u80fd.\ntypedef\u306e\u3088\u3046\u306b\u3082\u4f7f\u3048\u307e\u3059.\n\n```\nalias myint = int;\n\nvoid foo(int x) {...}\nvoid foo(myint m) {...} //\u30a8\u30e9\u30fc : foo(int x)\u3068\u540c\u3058. \n```\n\n#\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\n\n```\ntemplate Integer(int nbits)\n{\n    static if (nbits <= 8)\n\talias  byte Integer; //alias Integer = byte \u3068\u540c\u7fa9\n    else static if (nbits <= 16)\n\talias short Integer;\n    else static if (nbits <= 32)\n\talias int Integer;\n    else static if (nbits <= 64)\n\talias long Integer;\n    else\n\tstatic assert(0);\n}\n\nint main()\n{\n    Integer!(8) i ;\n    Integer!(16) j ;\n    Integer!(29) k ;\n    Integer!(64) l ;\n\n    assert(i.sizeof == byte.sizeof\n\t   && j.sizeof == short.sizeof\n\t   && k.sizeof == int.sizeof\n\t   && l.sizeof == long.sizeof);\n    \n    return 0;\n}\n```\n\n\u307e\u305f\u4ee5\u4e0b\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u5b9a\u6570\u3092\u6c42\u3081\u308b\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\n\n```\ntemplate Fibonacci(int n)\n{\n    static if (n >= 2)\n\tenum Fibonacci = Fibonacci!(n-1) + Fibonacci!(n-2);\n    else static if (n == 1)\n\tenum Fibonacci = 1;\n    else static if (n == 0)\n\tenum Fibonacci = 0;\n    else\n\tstatic assert(0);\n}\n\nvoid main()\n{\n    assert(Fibonacci!(10)==55);\n}\n```\n\n\u53c2\u8003:\n[\u516c\u5f0f(\u65e5\u672c\u8a9e\u8a33)](http://www.kmonos.net/alang/d/cpptod.html)\n\n#Appender\n\n```d\nimport std.array;\nimport std.algorithm;\n\nvoid main() {\n    auto app = appender!string();\n    string b = \"abcdefg\";\n    app.put(b);    \n    assert(app.data == \"abcdefg\");\n    assert(app.data[3..5] == \"de\");\n\n    app.clear(); //\u914d\u5217\u3092\u30af\u30ea\u30a2\n\n    int[] a = [ 1, 2 ];\n    auto app2 = appender(a);\n    app2.put(3);\n    app2.put([ 4, 5, 6 ]);\n    assert(app2.data == [ 1, 2, 3, 4, 5, 6 ]);\n    \n    //appender\u306edata\u306f\u666e\u901a\u306e\u914d\u5217\u3068\u540c\u3058\u3088\u3046\u306b\u4f7f\u3048\u308b\u307f\u305f\u3044\n    app.data[1..3].bringToFront(app.data[4..6]);\n    assert(app.data == [0,4,5,3,1,2,6]);\n}\n    app ~= [7,8]; //\u3053\u308c\u3082OK\n    assert(app.data == [0,4,5,3,1,2,6,7,8]);\n```\n\n\u53c2\u8003:\n[D\u8a00\u8a9e\u53cb\u306e\u4f1a](http://dusers.dip.jp/modules/wiki/?SampleCodes%2FPhobos%2Frange%2F2)\n\n#\u305d\u306e\u4ed6\n##\u6587\u5b57\u304b\u6570\u5b57\u304b\u5224\u65ad\nisNumeric\u304c\u3044\u3044\u306d\n\n```d\n //\u6570\u5024\u306b\u306f\u3067\u304d\u306a\u3044\u306e\u3067false\n assert(isNumeric(\"d3e\"))==false);\n\n //\u6570\u5b57\u5217\u306a\u306e\u3067true\n assert(isNumeric(\"123\")==true);\n```\n\nstd.traits\u306b\u306f\u826f\u3055\u3052\u306a\u6a5f\u80fd\u304c\u305f\u304f\u3055\u3093\u3042\u308a\u305d\u3046\u3067\u3059\n\n##Sleep\u51e6\u7406\n\n```d\nimport core.thread;\n\n Thread.sleep( dur!(\"msecs\")( 50 ) );  // 50\u30df\u30ea\u79d2sleep\n Thread.sleep( dur!(\"seconds\")( 5 ) ); // 5\u79d2sleep\n```\n\n##\u6642\u9593\n\n```d\nimport std.stdio;\nimport std.datetime;\n\t\nvoid main()\n{\n\tauto t= Clock.currTime();\n\twritef(\"%04d-%02d-%02d %02d:%02d:%02d\\n\"\n\t\t,t.year\n\t\t,t.month\n\t\t,t.day\n\t\t,t.hour\n\t\t,t.minute\n\t\t,t.second);\n}\n```\n\n\u53c2\u8003:\n[\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u30b5\u30f3\u30d7\u30eb\u96c6](http://simplesandsamples.com/date-d.d.html)\n", "tags": ["dlang", "D\u8a00\u8a9e"]}