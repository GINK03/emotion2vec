{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nnode + express\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3053\u3068\u3092\u3057\u3066\u307f\u307e\u3059\n\nmongoDB\u306b\u4fdd\u5b58\u3057\u3066\u3044\u308bname/pass\u3067\u30e6\u30fc\u30b6\u8a8d\u8a3c\n\u8a8d\u8a3cOK\u306a\u3089JWT\u5f62\u5f0f\u306etoken\u3092\u767a\u884c\u3057\u3066\u8fd4\u5374\nJWT\u30c8\u30fc\u30af\u30f3\u3092\u4f7f\u3063\u3066\u8a8d\u8a3c\u8981\u306eAPI\u306b\u30a2\u30af\u30bb\u30b9\n\n\u3053\u308c\u3089\u3092form\u8a8d\u8a3c\u3067\u306a\u304f\u3001CUrl\u7b49\u3092\u5229\u7528\u3057\u3066\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\u3053\u306e\u30b5\u30a4\u30c8\u306b\u3057\u305f\u304c\u3063\u3066\u5b9f\u65bd\u3057\u3066\u307f\u307e\u3059\n\n\u5fc5\u8981\u306a\u3082\u306e\n\nnode\nnpm\nPOSTman(api\u691c\u8a3c\u7528\u306echrome extention)\nmongoDB\n\n\n\u30b5\u30fc\u30d0\u306b\u5b9f\u88c5\u3059\u308b\u3082\u306e\n\nsecure\u3068secure\u5916\u306eURL\nname\u3068password\u306b\u3088\u308b\u30e6\u30fc\u30b6\u8a8d\u8a3c\n\n\n\u8a8d\u8a3c\u5f8c\u306btoken\u3092\u8fd4\u5374\n\n\n\u30e6\u30fc\u30b6\u306f\u53d6\u5f97\u3057\u305ftoken\u3092\u4fdd\u5b58\u3001\u5168\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u4ed8\u4e0e\ntoken\u3092\u691c\u8a3c\u3001OK\u3067\u3042\u308c\u3070JSON\u3067\u60c5\u5831\u3092\u8fd4\u5374\n\n\nmongoDB\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb(mac)\n\n# install\nbrew install mongodb\n\n# mongoDB\u3092\u81ea\u52d5\u8d77\u52d5\nln -sfv /usr/local/opt/mongodb/*.plist ~/Library/LaunchAgents\nlaunchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist\n\n\n\nproject\u306e\u4f5c\u6210\nmkdir server.oauth\ncd server.oauth\nmkdir -p app/models\ntouch app/models/user.js\ntouch config.js\ntouch package.json\ntouch server.js\n\n- app/\n----- models/\n---------- user.js\n- config.js\n- package.json\n- server.js\n\n\npackage.json\n{\n  \"name\": \"server.oauth\",\n  \"main\": \"server.js\"\n}\n\n\n\u4f9d\u5b58\u30e9\u30a4\u30d6\u30e9\u30ea\u306einstall\nnpm install express body-parser morgan mongoose jsonwebtoken --save\n\n\n\nexpress is \u30dd\u30d4\u30e5\u30e9\u30fc\u306aNode Framework\n\nmongoose is MongoDB\u7528\u306eO/Rmapper\n\nmorgan is \u30ed\u30b0\u3092\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u51fa\u529b\u3059\u308b\u70ba\u306b\u5229\u7528\n\nbody-parser is post\u3055\u308c\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u306eparser\n\njsonwebtoken is JWT\u306e\u4f5c\u6210\u30fb\u691c\u8a3c\u7528library\n\n\nUser Model(app/models/user.js)\n// get mongoose.Schema\nvar mongoose = require('mongoose');\nvar Schema = mongoose.Schema;\n\n// make user model and export\nmodule.exports = mongoose.model('User', new Schema({\n  name: String,\n  password: String,\n  admin: Boolean\n}));\n\n\nConfig File(config.js)\nmodule.exports = {\n  'secret': 'oauthServerSampleSecret',\n  'database': 'mongodb://localhost/server_oauth'\n}\n\n\n\nsecret : JWT\u306e\u4f5c\u6210\u3068\u691c\u8a3c\u306b\u4f7f\u7528\u3059\u308b\u6587\u5b57\u5217\u3001\u4efb\u610f\u306b\u5909\u66f4\u3059\u308b\n\ndatabase : mongoDB\u306e\u63a5\u7d9aURI\n\n\nMain file(server.js)\n\n\u3072\u3068\u307e\u305a\u521d\u671f\u8a2d\u5b9a\u3068\u8d77\u52d5\u3059\u308b\u6700\u4f4e\u9650\u306e\u307f\u8a18\u8ff0\n\n// =======================\n// get instance we need\n// =======================\nvar express         = require('express');\nvar app                = express();\nvar bodyParser    = require('body-parser');\nvar morgan          = require('morgan');\nvar mongoose      = require('mongoose');\nvar jwt                   = require('jsonwebtoken');\n\nvar config              = require('./config');\nvar User                = require('./app/models/user');\n\n// =======================\n// configuration\n// =======================\n// server setting\nvar port = process.env.PORT || 8080;\n\n// connect databse\nmongoose.connect(config.database);\n\n// application variables\napp.set('superSecret', config.secret);\n\n// config for body-parser\napp.use(bodyParser.urlencoded({ extended: false}));\napp.use(bodyParser.json());\n\n// log request\napp.use(morgan('dev'));\n\n// =======================\n// routes\n// =======================\napp.get('/', function(req, res) {\n  res.send('Hello! The API is at http://localhost:' + port + '/api');\n});\n\n\n\n// =======================\n// start the server\n// =======================\napp.listen(port);\nconsole.log('started http://localhost:' + port + '/');\n\n\n\n\n\u304a\u305f\u3081\u3057\u8d77\u52d5\nnode server.js\n\n\n\u8d77\u52d5\u3057\u305f\u3089\u30d6\u30e9\u30a6\u30b6\u3092\u958b\u304d\u3001http://localhost:8080/\u306b\u30a2\u30af\u30bb\u30b9\n\n\u6210\u529f\u3059\u308c\u3070Hello...\u306e\u6587\u5b57\u304c\u8868\u793a\u3055\u308c\u308b\n\n\n\u505c\u6b62\u3059\u308b\u306b\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u3067 control+c\n\n\n\n\u30bd\u30fc\u30b9\u5909\u66f4\u3092\u53cd\u6620\u3059\u308b\u306b\u306f\u518d\u8d77\u52d5\u304c\u5fc5\u8981\u3002\n\u3081\u3093\u3069\u304f\u3055\u3044\u5834\u5408\u3001npm install -g nodemon \u3092\u3057\u3066\nnodemon server.js \u3068\u3057\u3066\u304a\u304f\u3068\u5909\u66f4\u3092\u691c\u77e5\u3057\u3066\u81ea\u52d5\u518d\u8d77\u52d5\u3057\u3066\u304f\u308c\u308b\n\n\n\u30c6\u30b9\u30c8\u30e6\u30fc\u30b6\u4f5c\u6210\u7528URL\u306e\u4f5c\u6210(server.js)\n// for create test user to db\napp.get('/setup', function(req, res) {\n  var demo = new User({\n    name: 'demouser',\n    password: 'password',   // TODO: encrypt password\n    admin: true\n  });\n\n  demo.save(function(err) {\n    if (err) throw err;\n\n    console.log('User saved successfully');\n    res.json({ success: true});\n  });\n\n});\n\n\n\n\u30d6\u30e9\u30a6\u30b6\u304b\u3089 http://localhost:8080/setup \u306b\u30a2\u30af\u30bb\u30b9\n\n\nsuccess: true\u3068\u8868\u793a\u3055\u308c\u308c\u3070DB\u306b\u767b\u9332OK\n\n\n\n\nmongoDB\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\nmongo\nuse server_oauth\ndb.users.find()\n\n\nmongodb\u306e\u64cd\u4f5c\u306f\u3053\u3053\u3092\u53c2\u7167\ndatabase\u4e00\u89a7\u3092\u898b\u308b\u306b\u306f show dbs\ntable\u4e00\u89a7\u3092\u898b\u308b\u306b\u306f show collections\n\n\nAPI\u3092\u4f5c\u6210\u3059\u308b(server.js)\n\nAPI\u7528\u306eURL\u3092\u4f5c\u6210\n\n\nAPI\u7528\u306eURL\u306fexpress.Router\u3092\u4f7f\u3063\u3066\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u3066\u5b9a\u7fa9\u3059\u308b\n\n\n\u30e6\u30fc\u30b6\u306e\u4e00\u89a7\u3092\u53d6\u5f97\u3059\u308bAPI\u3092\u4f5c\u6210\n\n// API ROUTES ================\n\nvar apiRoutes = express.Router();\n\n// GET(http://localhost:8080/api/)\napiRoutes.get('/', function(req, res) {\n  res.json({ message: 'Welcome to API routing'});\n});\n\n// GET(http://localhost:8080/api/users)\napiRoutes.get('/users', function(req, res) {\n  User.find({}, function(err, users) {\n    if (err) throw err;\n    res.json(users);\n  });\n});\n\n// apply the routes to our application(prefix /api)\napp.use('/api', apiRoutes);\n\n\n\n\u30d6\u30e9\u30a6\u30b6\u3088\u308a http://localhost:8080/api \u306b\u30a2\u30af\u30bb\u30b9\n\u540c\u3058\u304f http://localhost:8080/api/users \u306b\u30a2\u30af\u30bb\u30b9\n\n\n\u30e6\u30fc\u30b6\u306e\u60c5\u5831\u304cjson\u3067\u53d6\u5f97\u3067\u304d\u308b\n\n\nPOSTman\u3092\u8d77\u52d5\u3057\u3066\u4e0a\u8a18\u306eURL\u3092\u767a\u884c\u3057\u3066\u3082\u78ba\u8a8d\u3067\u304d\u308b\n\n\nAuthenticating and Creating a Token\n\nPOST http://localhost:8080/api/authenticate \u3092\u4f5c\u6210\nname\u3068password\u3092\u53d7\u3051\u53d6\u3063\u3066\u30e6\u30fc\u30b6\u8a8d\u8a3c\u306evalidate\nvalid\u306a\u3089JWT token\u3092\u4f5c\u6210\u3057\u3066json\u3067\u8fd4\u5374\n\n// POST(http://localhost:8080/api/authenticate)\napiRoutes.post('/authenticate', function(req, res) {\n\n  // find db by posted name\n  User.findOne({\n    name: req.body.name\n  }, function(err, user) {\n    if (err) throw err;\n\n    // validation\n    if (!user) {\n      res.json({\n        success: false,\n        message: 'Authentication failed. User not found.'\n      });\n      return;\n    }\n\n    if (user.password != req.body.password) {\n      res.json({\n        success: false,\n        message: 'Authentication failed. Wrong password.'\n      });\n      return;\n    }\n\n    // when valid -> create token\n    var token = jwt.sign(user, app.get('superSecret'), {\n      expiresIn: '24h'\n    });\n\n    res.json({\n      success: true,\n      message: 'Authentication successfully finished.',\n      token: token\n    });\n\n  });\n\n});\n\n\n\nAuthenticate\u306e\u30c6\u30b9\u30c8\n\nPOSTman\u3092\u4f7f\u3063\u3066\u8a66\u3059\n\n\nmethod\u3092POST\u306b\u3059\u308b\nBody\u30bf\u30d6\u3092\u958b\u304d\u3001x-www-form-urlencoded\u3092\u9078\u629e\nKey, value\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30bb\u30c3\u30c8\n\n\nKey: name Value: demouser\nKey: password Value: password\n\n\n\u3046\u307e\u304f\u3044\u3051\u3070token\u304c\u8fd4\u5374\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\n\n\n\n\n\n\u8a8d\u8a3c\u304c\u5fc5\u8981\u306a\u30da\u30fc\u30b8\u3092protect\u3057\u3001token\u304c\u5408\u81f4\u3059\u308c\u3070\u901a\u3059\n\n\u8a8d\u8a3cFilter\u306fexpress.Router().use\u3067\u4f5c\u6210\u3059\u308b\nFilter\u3092\u5b9a\u7fa9\u3057\u305f\u4ee5\u964d\u306b\u5b9a\u7fa9\u3057\u305fURL\u306fFilter\u901a\u904e\u5f8c\u306b\u52d5\u4f5c\u3059\u308b\n\n\n\n\u30b3\u30fc\u30c9\u306e\u66f8\u304f\u9806\u5e8f \u304c\u5927\u4e8b\n\n\n\n// API ROUTES\n\nvar apiRoutes = express.Router();\n\n// non secure api --------\n\n// POST(http://localhost:8080/api/authenticate)\n...\n\n\n// Authentification Filter\napiRoutes.use(function(req, res, next) {\n\n  // get token from body:token or query:token of Http Header:x-access-token\n  var token = req.body.token || req.query.token || req.headers['x-access-token'];\n\n  // validate token\n  if (!token) {\n    return res.status(403).send({\n      success: false,\n      message: 'No token provided.'\n    });\n  }\n\n  jwt.verify(token, app.get('superSecret'), function(err, decoded) {\n    if (err) {\n      return res.json({\n        success: false,\n        message: 'Invalid token'\n      });\n    }\n\n    // if token valid -> save token to request for use in other routes\n    req.decoded = decoded;\n    next();\n\n  });\n\n});\n\n// secure api --------\n\n// GET(http://localhost:8080/api/)\n...\n\n// GET(http://localhost:8080/api/users)\n...\n\n// apply the routes to our application(prefix /api)\napp.use('/api', apiRoutes);\n\n\n\n\ntoken\u3092\u4f7f\u3063\u3066API\u304c\u4f7f\u3048\u308b\u3053\u3068\u3092\u691c\u8a3c\n\ntoken\u3092\u4f7f\u308f\u305a\u3001api\u3092\u30b3\u30fc\u30eb\u3059\u308b\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\n\n\n\nPOSTman\u3092\u4f7f\u3063\u3066\u3001\u6b63\u3057\u3044name/password\u3092POST\n\u53d6\u5f97\u3067\u304d\u305ftoken\u3092\u30b3\u30d4\u30fc\n\n\n\nPOSTman\u3067token\u3092\u542b\u3081\u305f\u5f62\u3067API\u3092call\n\n\n\n# \u306f\u3058\u3081\u306b\nnode + express\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3053\u3068\u3092\u3057\u3066\u307f\u307e\u3059\n\n* mongoDB\u306b\u4fdd\u5b58\u3057\u3066\u3044\u308bname/pass\u3067\u30e6\u30fc\u30b6\u8a8d\u8a3c\n* \u8a8d\u8a3cOK\u306a\u3089JWT\u5f62\u5f0f\u306etoken\u3092\u767a\u884c\u3057\u3066\u8fd4\u5374\n* JWT\u30c8\u30fc\u30af\u30f3\u3092\u4f7f\u3063\u3066\u8a8d\u8a3c\u8981\u306eAPI\u306b\u30a2\u30af\u30bb\u30b9\n\n\u3053\u308c\u3089\u3092form\u8a8d\u8a3c\u3067\u306a\u304f\u3001CUrl\u7b49\u3092\u5229\u7528\u3057\u3066\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n[\u3053\u306e\u30b5\u30a4\u30c8](https://scotch.io/tutorials/authenticate-a-node-js-api-with-json-web-tokens)\u306b\u3057\u305f\u304c\u3063\u3066\u5b9f\u65bd\u3057\u3066\u307f\u307e\u3059\n\n# \u5fc5\u8981\u306a\u3082\u306e\n* node\n* npm\n* POSTman(api\u691c\u8a3c\u7528\u306echrome extention)\n* mongoDB\n\n# \u30b5\u30fc\u30d0\u306b\u5b9f\u88c5\u3059\u308b\u3082\u306e\n* secure\u3068secure\u5916\u306eURL\n* name\u3068password\u306b\u3088\u308b\u30e6\u30fc\u30b6\u8a8d\u8a3c\n\t* \u8a8d\u8a3c\u5f8c\u306btoken\u3092\u8fd4\u5374\n* \u30e6\u30fc\u30b6\u306f\u53d6\u5f97\u3057\u305ftoken\u3092\u4fdd\u5b58\u3001\u5168\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u4ed8\u4e0e\n* token\u3092\u691c\u8a3c\u3001OK\u3067\u3042\u308c\u3070JSON\u3067\u60c5\u5831\u3092\u8fd4\u5374\n\n# mongoDB\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb(mac)\n\n```\n\n# install\nbrew install mongodb\n\n# mongoDB\u3092\u81ea\u52d5\u8d77\u52d5\nln -sfv /usr/local/opt/mongodb/*.plist ~/Library/LaunchAgents\nlaunchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist\n\n``` \n\n\n# project\u306e\u4f5c\u6210\n\n```\nmkdir server.oauth\ncd server.oauth\nmkdir -p app/models\ntouch app/models/user.js\ntouch config.js\ntouch package.json\ntouch server.js\n```\n\n```filestructure\n- app/\n----- models/\n---------- user.js\n- config.js\n- package.json\n- server.js\n```\n\n# package.json\n\n```\n{\n  \"name\": \"server.oauth\",\n  \"main\": \"server.js\"\n}\n```\n\n\n# \u4f9d\u5b58\u30e9\u30a4\u30d6\u30e9\u30ea\u306einstall\n\n```\nnpm install express body-parser morgan mongoose jsonwebtoken --save\n```\n\n* **express** is \u30dd\u30d4\u30e5\u30e9\u30fc\u306aNode Framework\n* **mongoose** is MongoDB\u7528\u306eO/Rmapper\n* **morgan** is \u30ed\u30b0\u3092\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u51fa\u529b\u3059\u308b\u70ba\u306b\u5229\u7528\n* **body-parser** is post\u3055\u308c\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u306eparser\n* **jsonwebtoken** is JWT\u306e\u4f5c\u6210\u30fb\u691c\u8a3c\u7528library\n\n\n# User Model(app/models/user.js)\n\n```\n// get mongoose.Schema\nvar mongoose = require('mongoose');\nvar Schema = mongoose.Schema;\n\n// make user model and export\nmodule.exports = mongoose.model('User', new Schema({\n  name: String,\n  password: String,\n  admin: Boolean\n}));\n```\n\n# Config File(config.js)\n\n```\nmodule.exports = {\n  'secret': 'oauthServerSampleSecret',\n  'database': 'mongodb://localhost/server_oauth'\n}\n```\n\n* **secret** : JWT\u306e\u4f5c\u6210\u3068\u691c\u8a3c\u306b\u4f7f\u7528\u3059\u308b\u6587\u5b57\u5217\u3001\u4efb\u610f\u306b\u5909\u66f4\u3059\u308b\n* **database** : mongoDB\u306e\u63a5\u7d9aURI\n\n\n# Main file(server.js)\n* \u3072\u3068\u307e\u305a\u521d\u671f\u8a2d\u5b9a\u3068\u8d77\u52d5\u3059\u308b\u6700\u4f4e\u9650\u306e\u307f\u8a18\u8ff0\n\n```\n// =======================\n// get instance we need\n// =======================\nvar express         = require('express');\nvar app                = express();\nvar bodyParser    = require('body-parser');\nvar morgan          = require('morgan');\nvar mongoose      = require('mongoose');\nvar jwt                   = require('jsonwebtoken');\n\nvar config              = require('./config');\nvar User                = require('./app/models/user');\n\n// =======================\n// configuration\n// =======================\n// server setting\nvar port = process.env.PORT || 8080;\n\n// connect databse\nmongoose.connect(config.database);\n\n// application variables\napp.set('superSecret', config.secret);\n\n// config for body-parser\napp.use(bodyParser.urlencoded({ extended: false}));\napp.use(bodyParser.json());\n\n// log request\napp.use(morgan('dev'));\n\n// =======================\n// routes\n// =======================\napp.get('/', function(req, res) {\n  res.send('Hello! The API is at http://localhost:' + port + '/api');\n});\n\n\n\n// =======================\n// start the server\n// =======================\napp.listen(port);\nconsole.log('started http://localhost:' + port + '/');\n\n\n```\n\n# \u304a\u305f\u3081\u3057\u8d77\u52d5\n\n```\nnode server.js\n```\n\n* \u8d77\u52d5\u3057\u305f\u3089\u30d6\u30e9\u30a6\u30b6\u3092\u958b\u304d\u3001http://localhost:8080/\u306b\u30a2\u30af\u30bb\u30b9\n\t* \u6210\u529f\u3059\u308c\u3070Hello...\u306e\u6587\u5b57\u304c\u8868\u793a\u3055\u308c\u308b\n* \u505c\u6b62\u3059\u308b\u306b\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u3067 `control+c`\n\n> \u30bd\u30fc\u30b9\u5909\u66f4\u3092\u53cd\u6620\u3059\u308b\u306b\u306f\u518d\u8d77\u52d5\u304c\u5fc5\u8981\u3002\n> \u3081\u3093\u3069\u304f\u3055\u3044\u5834\u5408\u3001`npm install -g nodemon` \u3092\u3057\u3066\n> `nodemon server.js` \u3068\u3057\u3066\u304a\u304f\u3068\u5909\u66f4\u3092\u691c\u77e5\u3057\u3066\u81ea\u52d5\u518d\u8d77\u52d5\u3057\u3066\u304f\u308c\u308b\n\n# \u30c6\u30b9\u30c8\u30e6\u30fc\u30b6\u4f5c\u6210\u7528URL\u306e\u4f5c\u6210(server.js)\n\n```\n// for create test user to db\napp.get('/setup', function(req, res) {\n  var demo = new User({\n    name: 'demouser',\n    password: 'password',   // TODO: encrypt password\n    admin: true\n  });\n\n  demo.save(function(err) {\n    if (err) throw err;\n\n    console.log('User saved successfully');\n    res.json({ success: true});\n  });\n\n});\n\n```\n\n* \u30d6\u30e9\u30a6\u30b6\u304b\u3089 http://localhost:8080/setup \u306b\u30a2\u30af\u30bb\u30b9\n\t* success: true\u3068\u8868\u793a\u3055\u308c\u308c\u3070DB\u306b\u767b\u9332OK\n\n# mongoDB\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\n\n```\nmongo\nuse server_oauth\ndb.users.find()\n```\n\n> mongodb\u306e\u64cd\u4f5c\u306f[\u3053\u3053\u3092\u53c2\u7167](http://taka512.hatenablog.com/entry/20110220/1298195574)\n> database\u4e00\u89a7\u3092\u898b\u308b\u306b\u306f `show dbs`\n> table\u4e00\u89a7\u3092\u898b\u308b\u306b\u306f `show collections`\n\n\n# API\u3092\u4f5c\u6210\u3059\u308b(server.js)\n\n* API\u7528\u306eURL\u3092\u4f5c\u6210\n\t* API\u7528\u306eURL\u306f`express.Router`\u3092\u4f7f\u3063\u3066\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u3066\u5b9a\u7fa9\u3059\u308b\n* \u30e6\u30fc\u30b6\u306e\u4e00\u89a7\u3092\u53d6\u5f97\u3059\u308bAPI\u3092\u4f5c\u6210\n\n```\n// API ROUTES ================\n\nvar apiRoutes = express.Router();\n\n// GET(http://localhost:8080/api/)\napiRoutes.get('/', function(req, res) {\n  res.json({ message: 'Welcome to API routing'});\n});\n\n// GET(http://localhost:8080/api/users)\napiRoutes.get('/users', function(req, res) {\n  User.find({}, function(err, users) {\n    if (err) throw err;\n    res.json(users);\n  });\n});\n\n// apply the routes to our application(prefix /api)\napp.use('/api', apiRoutes);\n\n```\n\n* \u30d6\u30e9\u30a6\u30b6\u3088\u308a http://localhost:8080/api \u306b\u30a2\u30af\u30bb\u30b9\n* \u540c\u3058\u304f http://localhost:8080/api/users \u306b\u30a2\u30af\u30bb\u30b9\n\t* \u30e6\u30fc\u30b6\u306e\u60c5\u5831\u304cjson\u3067\u53d6\u5f97\u3067\u304d\u308b\n* POSTman\u3092\u8d77\u52d5\u3057\u3066\u4e0a\u8a18\u306eURL\u3092\u767a\u884c\u3057\u3066\u3082\u78ba\u8a8d\u3067\u304d\u308b\n\n# Authenticating and Creating a Token\n\n* POST http://localhost:8080/api/authenticate \u3092\u4f5c\u6210\n* name\u3068password\u3092\u53d7\u3051\u53d6\u3063\u3066\u30e6\u30fc\u30b6\u8a8d\u8a3c\u306evalidate\n* valid\u306a\u3089JWT token\u3092\u4f5c\u6210\u3057\u3066json\u3067\u8fd4\u5374\n\n```\n// POST(http://localhost:8080/api/authenticate)\napiRoutes.post('/authenticate', function(req, res) {\n\n  // find db by posted name\n  User.findOne({\n    name: req.body.name\n  }, function(err, user) {\n    if (err) throw err;\n\n    // validation\n    if (!user) {\n      res.json({\n        success: false,\n        message: 'Authentication failed. User not found.'\n      });\n      return;\n    }\n\n    if (user.password != req.body.password) {\n      res.json({\n        success: false,\n        message: 'Authentication failed. Wrong password.'\n      });\n      return;\n    }\n\n    // when valid -> create token\n    var token = jwt.sign(user, app.get('superSecret'), {\n      expiresIn: '24h'\n    });\n\n    res.json({\n      success: true,\n      message: 'Authentication successfully finished.',\n      token: token\n    });\n\n  });\n\n});\n\n```\n\n# Authenticate\u306e\u30c6\u30b9\u30c8\n\n* POSTman\u3092\u4f7f\u3063\u3066\u8a66\u3059\n\t* method\u3092POST\u306b\u3059\u308b\n\t* Body\u30bf\u30d6\u3092\u958b\u304d\u3001x-www-form-urlencoded\u3092\u9078\u629e\n\t* Key, value\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30bb\u30c3\u30c8\n\t\t* Key: name Value: demouser\n\t\t* Key: password Value: password\n\t* \u3046\u307e\u304f\u3044\u3051\u3070token\u304c\u8fd4\u5374\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\n\n![Kobito.4BNXEm.png](https://qiita-image-store.s3.amazonaws.com/0/60056/6492bc04-f51d-e797-bc32-871e5d0eef21.png \"Kobito.4BNXEm.png\")\n\n\n# \u8a8d\u8a3c\u304c\u5fc5\u8981\u306a\u30da\u30fc\u30b8\u3092protect\u3057\u3001token\u304c\u5408\u81f4\u3059\u308c\u3070\u901a\u3059\n\n* \u8a8d\u8a3cFilter\u306f`express.Router().use`\u3067\u4f5c\u6210\u3059\u308b\n* Filter\u3092\u5b9a\u7fa9\u3057\u305f\u4ee5\u964d\u306b\u5b9a\u7fa9\u3057\u305fURL\u306fFilter\u901a\u904e\u5f8c\u306b\u52d5\u4f5c\u3059\u308b\n\t* ***\u30b3\u30fc\u30c9\u306e\u66f8\u304f\u9806\u5e8f*** \u304c\u5927\u4e8b\n\n```\n// API ROUTES\n\nvar apiRoutes = express.Router();\n\n// non secure api --------\n\n// POST(http://localhost:8080/api/authenticate)\n...\n\n\n// Authentification Filter\napiRoutes.use(function(req, res, next) {\n\n  // get token from body:token or query:token of Http Header:x-access-token\n  var token = req.body.token || req.query.token || req.headers['x-access-token'];\n\n  // validate token\n  if (!token) {\n    return res.status(403).send({\n      success: false,\n      message: 'No token provided.'\n    });\n  }\n\n  jwt.verify(token, app.get('superSecret'), function(err, decoded) {\n    if (err) {\n      return res.json({\n        success: false,\n        message: 'Invalid token'\n      });\n    }\n\n    // if token valid -> save token to request for use in other routes\n    req.decoded = decoded;\n    next();\n\n  });\n\n});\n\n// secure api --------\n\n// GET(http://localhost:8080/api/)\n...\n\n// GET(http://localhost:8080/api/users)\n...\n\n// apply the routes to our application(prefix /api)\napp.use('/api', apiRoutes);\n\n\n```\n\n\n# token\u3092\u4f7f\u3063\u3066API\u304c\u4f7f\u3048\u308b\u3053\u3068\u3092\u691c\u8a3c\n\n* token\u3092\u4f7f\u308f\u305a\u3001api\u3092\u30b3\u30fc\u30eb\u3059\u308b\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\n\n![Kobito.MpW1qa.png](https://qiita-image-store.s3.amazonaws.com/0/60056/637f2d84-cd11-bda8-95e6-425b6c3f53f4.png \"Kobito.MpW1qa.png\")\n\n\n* POSTman\u3092\u4f7f\u3063\u3066\u3001\u6b63\u3057\u3044name/password\u3092POST\n* \u53d6\u5f97\u3067\u304d\u305ftoken\u3092\u30b3\u30d4\u30fc\n\n![Kobito.O6Xf7O.png](https://qiita-image-store.s3.amazonaws.com/0/60056/59aa0a0b-40b9-ed41-9943-4dc550340bde.png \"Kobito.O6Xf7O.png\")\n\n\n* POSTman\u3067token\u3092\u542b\u3081\u305f\u5f62\u3067API\u3092call\n\n![Kobito.onSu9R.png](https://qiita-image-store.s3.amazonaws.com/0/60056/d3f8b00c-ceac-a8ac-ba50-8623da7b113e.png \"Kobito.onSu9R.png\")\n\n\n\n\n\n\n\n\n\n\n\n", "tags": ["Node", "authentification", "JWT", "Express"]}