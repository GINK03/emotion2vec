{"tags": ["Ruby1.9.3", "ruby-libvirt0.4.0", "KVM"], "context": " More than 1 year has passed since last update.This is script which backup KVM disk image by using ruby-libvirt\nTest Enviroment\n\nKVM on CentOS release 6.3 (Final)\nruby 1.9.3p194 (2012-04-20) [x86_64-linux]\nruby-libvirt (0.4.0)\n\nScript\n#\n# KVM Disk Image Backup Script\n#\n#                fetaro@gmail.com\n#\n# usage : $ ruby kvmbackup.rb (domain-name)\n#\n# 1. Get Disk image paths from domain-xml\n# 2. Susupend domain if running\n# 3. Backup Disk image to BACKUP_DIR with BACKUP_CMD (cp or scp)\n# 4. Resume domain if suspended\n#\nrequire 'libvirt'\n\nBACKUP_CMD=\"scp\"\n#BACKUP_CMD=\"cp\"\nBACKUP_DIR=\"host:/path/to/backup/dir\"\n#BACKUP_DIR=\"/path/to/backup/dir\"\n\nif ARGV[0].nil?\n  STDERR.puts \"There is no argument\"\n  exit 1\nend\n\ndomain=ARGV[0]\nconn = Libvirt::open(\"qemu:///system\")\ndom = conn.lookup_domain_by_name(domain)\n\n# get disk image path\nimg_paths = []\nrequire \"rexml/document\"\nxml = REXML::Document.new(dom.xml_desc)\nxml.elements.to_a(\"domain/devices/disk\").each do |disk|\n  if disk.attributes[\"device\"] == \"disk\"\n    img_paths << disk.elements[\"source\"].attributes[\"file\"]\n  end\nend\n\nreturn_code = 0\nbegin\n  if dom.state[0] == 1 # domain is running\n    puts \"suspend #{domain}\"\n    dom.suspend\n  end\n\n  img_paths.each do |img_path|\n    cmd = \"#{BACKUP_CMD} #{img_path} #{BACKUP_DIR}\"\n    puts cmd\n    system cmd\n    if($? != 0) then\n      STDERR.puts \"fail to #{cmd}\"\n      return_code=1\n    end\n  end\nrescue => e\n  p e\n  return_code = 1\nensure\n  if dom.state[0] == 3 # domain is paused\n    puts \"resume #{domain}\"\n    dom.resume\n  end\nend\n\nexit return_code\n\nThis is script which backup KVM disk image by using ruby-libvirt\n\nTest Enviroment\n\n* KVM on CentOS release 6.3 (Final)\n* ruby 1.9.3p194 (2012-04-20) [x86_64-linux]\n* ruby-libvirt (0.4.0)\n\nScript\n\n```ruby\n#\n# KVM Disk Image Backup Script\n#\n#                fetaro@gmail.com\n#\n# usage : $ ruby kvmbackup.rb (domain-name)\n#\n# 1. Get Disk image paths from domain-xml\n# 2. Susupend domain if running\n# 3. Backup Disk image to BACKUP_DIR with BACKUP_CMD (cp or scp)\n# 4. Resume domain if suspended\n#\nrequire 'libvirt'\n\nBACKUP_CMD=\"scp\"\n#BACKUP_CMD=\"cp\"\nBACKUP_DIR=\"host:/path/to/backup/dir\"\n#BACKUP_DIR=\"/path/to/backup/dir\"\n\nif ARGV[0].nil?\n  STDERR.puts \"There is no argument\"\n  exit 1\nend\n\ndomain=ARGV[0]\nconn = Libvirt::open(\"qemu:///system\")\ndom = conn.lookup_domain_by_name(domain)\n\n# get disk image path\nimg_paths = []\nrequire \"rexml/document\"\nxml = REXML::Document.new(dom.xml_desc)\nxml.elements.to_a(\"domain/devices/disk\").each do |disk|\n  if disk.attributes[\"device\"] == \"disk\"\n    img_paths << disk.elements[\"source\"].attributes[\"file\"]\n  end\nend\n\nreturn_code = 0\nbegin\n  if dom.state[0] == 1 # domain is running\n    puts \"suspend #{domain}\"\n    dom.suspend\n  end\n\n  img_paths.each do |img_path|\n    cmd = \"#{BACKUP_CMD} #{img_path} #{BACKUP_DIR}\"\n    puts cmd\n    system cmd\n    if($? != 0) then\n      STDERR.puts \"fail to #{cmd}\"\n      return_code=1\n    end\n  end\nrescue => e\n  p e\n  return_code = 1\nensure\n  if dom.state[0] == 3 # domain is paused\n    puts \"resume #{domain}\"\n    dom.resume\n  end\nend\n\nexit return_code\n```"}