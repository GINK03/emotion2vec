{"context": "scikit-learn\u306b\u4ed8\u5c5e\u3057\u3066\u3044\u308b\u30c7\u30fc\u30bfBoston House Prices dataset\uff08\u30dc\u30b9\u30c8\u30f3\u306e\u4f4f\u5b85\u4fa1\u683c\u306b\u95a2\u3059\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\uff09\u3092\u4f7f\u3063\u3066\u91cd\u56de\u5e30\u5206\u6790\u3068\u63cf\u753b\u3092\u884c\u3044\u307e\u3057\u305f\uff0e\uff08\u53c2\u8003\uff09\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import load_boston\nfrom sklearn.linear_model import LinearRegression\nfrom mpl_toolkits.mplot3d import Axes3D\n\n#Boston HOuse Prices\u306e\u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9\nboston = load_boston()\nboston_df = pd.DataFrame(boston.data)\nboston_df.columns = boston.feature_names\nboston['Price'] = boston.target #\u76ee\u7684\u5909\u6570\u3092\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u8ffd\u52a0\n\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u306f\uff0c\u5404\u4f4f\u5b85\u306e\u90e8\u5c4b\u6570\uff08RM\uff09\uff0c\u4e0b\u4f4d\u30d1\u30fc\u30bb\u30f3\u30c6\u30fc\u30b8?\uff08LSTAT\uff09\u7b49\uff0c\uff113\u306e\u5c5e\u6027\uff08\u30b3\u30e9\u30e0\uff09\u304c\u542b\u307e\u308c\u307e\u3059\uff0e \u307e\u305aDataFrame\u30af\u30e9\u30b9\u306ecorr()\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u5404\u5c5e\u6027\u3068\u76ee\u7684\u5909\u6570\uff08Price\uff09\u306e\u76f8\u95a2\u4fc2\u6570\u3092\u8a08\u7b97\u3057\u307e\u3059\uff0e\n>> boston_df.corr()\n             CRIM        ZN     INDUS      CHAS       NOX        RM       AGE  \\\nCRIM     1.000000 -0.199458  0.404471 -0.055295  0.417521 -0.219940  0.350784   \nZN      -0.199458  1.000000 -0.533828 -0.042697 -0.516604  0.311991 -0.569537   \nINDUS    0.404471 -0.533828  1.000000  0.062938  0.763651 -0.391676  0.644779   \nCHAS    -0.055295 -0.042697  0.062938  1.000000  0.091203  0.091251  0.086518   \nNOX      0.417521 -0.516604  0.763651  0.091203  1.000000 -0.302188  0.731470   \nRM      -0.219940  0.311991 -0.391676  0.091251 -0.302188  1.000000 -0.240265   \nAGE      0.350784 -0.569537  0.644779  0.086518  0.731470 -0.240265  1.000000   \nDIS     -0.377904  0.664408 -0.708027 -0.099176 -0.769230  0.205246 -0.747881   \nRAD      0.622029 -0.311948  0.595129 -0.007368  0.611441 -0.209847  0.456022   \nTAX      0.579564 -0.314563  0.720760 -0.035587  0.668023 -0.292048  0.506456   \nPTRATIO  0.288250 -0.391679  0.383248 -0.121515  0.188933 -0.355501  0.261515   \nB       -0.377365  0.175520 -0.356977  0.048788 -0.380051  0.128069 -0.273534   \nLSTAT    0.452220 -0.412995  0.603800 -0.053929  0.590879 -0.613808  0.602339   \nPrice   -0.385832  0.360445 -0.483725  0.175260 -0.427321  0.695360 -0.376955   \n\n              DIS       RAD       TAX   PTRATIO         B     LSTAT     Price  \nCRIM    -0.377904  0.622029  0.579564  0.288250 -0.377365  0.452220 -0.385832  \nZN       0.664408 -0.311948 -0.314563 -0.391679  0.175520 -0.412995  0.360445  \nINDUS   -0.708027  0.595129  0.720760  0.383248 -0.356977  0.603800 -0.483725  \nCHAS    -0.099176 -0.007368 -0.035587 -0.121515  0.048788 -0.053929  0.175260  \nNOX     -0.769230  0.611441  0.668023  0.188933 -0.380051  0.590879 -0.427321  \nRM       0.205246 -0.209847 -0.292048 -0.355501  0.128069 -0.613808  0.695360  \nAGE     -0.747881  0.456022  0.506456  0.261515 -0.273534  0.602339 -0.376955  \nDIS      1.000000 -0.494588 -0.534432 -0.232471  0.291512 -0.496996  0.249929  \nRAD     -0.494588  1.000000  0.910228  0.464741 -0.444413  0.488676 -0.381626  \nTAX     -0.534432  0.910228  1.000000  0.460853 -0.441808  0.543993 -0.468536  \nPTRATIO -0.232471  0.464741  0.460853  1.000000 -0.177383  0.374044 -0.507787  \nB        0.291512 -0.444413 -0.441808 -0.177383  1.000000 -0.366087  0.333461  \nLSTAT   -0.496996  0.488676  0.543993  0.374044 -0.366087  1.000000 -0.737663  \nPrice    0.249929 -0.381626 -0.468536 -0.507787  0.333461 -0.737663  1.000000  \n\n\u5404\u5c5e\u6027\u306e\u5185\uff0c\u76f8\u95a2\u4fc2\u6570\u306e\u7d76\u5bfe\u5024\u304c\u5927\u304d\u3044\uff08\uff1d\u76f8\u95a2\u304c\u5927\u304d\u3044\uff09\u4e8c\u3064\u306e\u5c5e\u6027RM\u3068LSTAT\u3092\u8aac\u660e\u5909\u6570\u3068\u3057\u3066\uff0cPrice\u306e\u5024\u3092\u56de\u5e30\u5206\u6790\u3057\u307e\u3059\uff0e\n#\u8aac\u660e\u5909\u6570\u8981\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\uff08\u8aac\u660e\u5909\u6570\u3068RM\u3068LSTAT\u3092\u5229\u7528\uff09\ndf = pd.DataFrame()\ndf['RM'] = boston_df['RM']\ndf['LSTAT'] = boston_df['LSTAT']\n\nX_multi = df\nY_target = boston.target\n\n#\u30e2\u30c7\u30eb\u751f\u6210\u3068\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\nlreg = LinearRegression()\nlreg.fit(X_multi, Y_target)\na1, a2 = lreg.coef_ #\u4fc2\u6570\nb = lreg.intercept_ #\u5207\u7247\n\n\u63cf\u753b\u306b\u306fmatplotlib\u306eplot_surface()\u3068scatter3D\u3092\u5229\u7528\uff0e\n#3D\u63cf\u753b\uff08\u5b9f\u6e2c\u5024\u306e\u63cf\u753b\uff09\nx, y, z = np.array(df['RM']), np.array(df['LSTAT']), np.array(Y_target)\nfig = plt.figure()\nax = Axes3D(fig)\nax.scatter3D(np.ravel(x), np.ravel(y), np.ravel(z), c = 'red')\n\n#3D\u63cf\u753b\uff08\u56de\u5e30\u5e73\u9762\u306e\u63cf\u753b\uff09\nX, Y = np.meshgrid(np.arange(0, 10, 1), np.arange(0, 40, 1))\nZ = a1 * X + a2 * Y + b\nax.plot_surface(X, Y, Z, alpha = 0.5) #alpha\u3067\u900f\u660e\u5ea6\u3092\u6307\u5b9a\nax.set_xlabel(\"RM\")\nax.set_ylabel(\"LSTAT\")\nax.set_zlabel(\"Price\")\n\nplt.show()\n\n\nscikit-learn\u306b\u4ed8\u5c5e\u3057\u3066\u3044\u308b\u30c7\u30fc\u30bfBoston House Prices dataset\uff08\u30dc\u30b9\u30c8\u30f3\u306e\u4f4f\u5b85\u4fa1\u683c\u306b\u95a2\u3059\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\uff09\u3092\u4f7f\u3063\u3066\u91cd\u56de\u5e30\u5206\u6790\u3068\u63cf\u753b\u3092\u884c\u3044\u307e\u3057\u305f\uff0e\uff08[\u53c2\u8003](http://www.tsjshg.info/udemy/Lec72-75.html)\uff09\n\n```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import load_boston\nfrom sklearn.linear_model import LinearRegression\nfrom mpl_toolkits.mplot3d import Axes3D\n\n#Boston HOuse Prices\u306e\u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9\nboston = load_boston()\nboston_df = pd.DataFrame(boston.data)\nboston_df.columns = boston.feature_names\nboston['Price'] = boston.target #\u76ee\u7684\u5909\u6570\u3092\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u8ffd\u52a0\n```\n\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u306f\uff0c\u5404\u4f4f\u5b85\u306e\u90e8\u5c4b\u6570\uff08RM\uff09\uff0c\u4e0b\u4f4d\u30d1\u30fc\u30bb\u30f3\u30c6\u30fc\u30b8?\uff08LSTAT\uff09\u7b49\uff0c\uff113\u306e\u5c5e\u6027\uff08\u30b3\u30e9\u30e0\uff09\u304c\u542b\u307e\u308c\u307e\u3059\uff0e \u307e\u305aDataFrame\u30af\u30e9\u30b9\u306ecorr()\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u5404\u5c5e\u6027\u3068\u76ee\u7684\u5909\u6570\uff08Price\uff09\u306e\u76f8\u95a2\u4fc2\u6570\u3092\u8a08\u7b97\u3057\u307e\u3059\uff0e\n\n```\n>> boston_df.corr()\n             CRIM        ZN     INDUS      CHAS       NOX        RM       AGE  \\\nCRIM     1.000000 -0.199458  0.404471 -0.055295  0.417521 -0.219940  0.350784   \nZN      -0.199458  1.000000 -0.533828 -0.042697 -0.516604  0.311991 -0.569537   \nINDUS    0.404471 -0.533828  1.000000  0.062938  0.763651 -0.391676  0.644779   \nCHAS    -0.055295 -0.042697  0.062938  1.000000  0.091203  0.091251  0.086518   \nNOX      0.417521 -0.516604  0.763651  0.091203  1.000000 -0.302188  0.731470   \nRM      -0.219940  0.311991 -0.391676  0.091251 -0.302188  1.000000 -0.240265   \nAGE      0.350784 -0.569537  0.644779  0.086518  0.731470 -0.240265  1.000000   \nDIS     -0.377904  0.664408 -0.708027 -0.099176 -0.769230  0.205246 -0.747881   \nRAD      0.622029 -0.311948  0.595129 -0.007368  0.611441 -0.209847  0.456022   \nTAX      0.579564 -0.314563  0.720760 -0.035587  0.668023 -0.292048  0.506456   \nPTRATIO  0.288250 -0.391679  0.383248 -0.121515  0.188933 -0.355501  0.261515   \nB       -0.377365  0.175520 -0.356977  0.048788 -0.380051  0.128069 -0.273534   \nLSTAT    0.452220 -0.412995  0.603800 -0.053929  0.590879 -0.613808  0.602339   \nPrice   -0.385832  0.360445 -0.483725  0.175260 -0.427321  0.695360 -0.376955   \n\n              DIS       RAD       TAX   PTRATIO         B     LSTAT     Price  \nCRIM    -0.377904  0.622029  0.579564  0.288250 -0.377365  0.452220 -0.385832  \nZN       0.664408 -0.311948 -0.314563 -0.391679  0.175520 -0.412995  0.360445  \nINDUS   -0.708027  0.595129  0.720760  0.383248 -0.356977  0.603800 -0.483725  \nCHAS    -0.099176 -0.007368 -0.035587 -0.121515  0.048788 -0.053929  0.175260  \nNOX     -0.769230  0.611441  0.668023  0.188933 -0.380051  0.590879 -0.427321  \nRM       0.205246 -0.209847 -0.292048 -0.355501  0.128069 -0.613808  0.695360  \nAGE     -0.747881  0.456022  0.506456  0.261515 -0.273534  0.602339 -0.376955  \nDIS      1.000000 -0.494588 -0.534432 -0.232471  0.291512 -0.496996  0.249929  \nRAD     -0.494588  1.000000  0.910228  0.464741 -0.444413  0.488676 -0.381626  \nTAX     -0.534432  0.910228  1.000000  0.460853 -0.441808  0.543993 -0.468536  \nPTRATIO -0.232471  0.464741  0.460853  1.000000 -0.177383  0.374044 -0.507787  \nB        0.291512 -0.444413 -0.441808 -0.177383  1.000000 -0.366087  0.333461  \nLSTAT   -0.496996  0.488676  0.543993  0.374044 -0.366087  1.000000 -0.737663  \nPrice    0.249929 -0.381626 -0.468536 -0.507787  0.333461 -0.737663  1.000000  \n```\n\n\u5404\u5c5e\u6027\u306e\u5185\uff0c\u76f8\u95a2\u4fc2\u6570\u306e\u7d76\u5bfe\u5024\u304c\u5927\u304d\u3044\uff08\uff1d\u76f8\u95a2\u304c\u5927\u304d\u3044\uff09\u4e8c\u3064\u306e\u5c5e\u6027RM\u3068LSTAT\u3092\u8aac\u660e\u5909\u6570\u3068\u3057\u3066\uff0cPrice\u306e\u5024\u3092\u56de\u5e30\u5206\u6790\u3057\u307e\u3059\uff0e\n\n```python\n#\u8aac\u660e\u5909\u6570\u8981\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\uff08\u8aac\u660e\u5909\u6570\u3068RM\u3068LSTAT\u3092\u5229\u7528\uff09\ndf = pd.DataFrame()\ndf['RM'] = boston_df['RM']\ndf['LSTAT'] = boston_df['LSTAT']\n\nX_multi = df\nY_target = boston.target\n\n#\u30e2\u30c7\u30eb\u751f\u6210\u3068\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\nlreg = LinearRegression()\nlreg.fit(X_multi, Y_target)\na1, a2 = lreg.coef_ #\u4fc2\u6570\nb = lreg.intercept_ #\u5207\u7247\n```\n\n\u63cf\u753b\u306b\u306fmatplotlib\u306eplot_surface()\u3068scatter3D\u3092\u5229\u7528\uff0e\n\n```python\n#3D\u63cf\u753b\uff08\u5b9f\u6e2c\u5024\u306e\u63cf\u753b\uff09\nx, y, z = np.array(df['RM']), np.array(df['LSTAT']), np.array(Y_target)\nfig = plt.figure()\nax = Axes3D(fig)\nax.scatter3D(np.ravel(x), np.ravel(y), np.ravel(z), c = 'red')\n\n#3D\u63cf\u753b\uff08\u56de\u5e30\u5e73\u9762\u306e\u63cf\u753b\uff09\nX, Y = np.meshgrid(np.arange(0, 10, 1), np.arange(0, 40, 1))\nZ = a1 * X + a2 * Y + b\nax.plot_surface(X, Y, Z, alpha = 0.5) #alpha\u3067\u900f\u660e\u5ea6\u3092\u6307\u5b9a\nax.set_xlabel(\"RM\")\nax.set_ylabel(\"LSTAT\")\nax.set_zlabel(\"Price\")\n\nplt.show()\n```\n![figure_1.png](https://qiita-image-store.s3.amazonaws.com/0/102065/eef27758-27f9-d278-fb46-a148720dd531.png)\n\n", "tags": ["Python", "scikit-learn", "matplotlib", "pandas"]}