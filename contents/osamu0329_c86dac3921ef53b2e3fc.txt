{"context": " More than 1 year has passed since last update.\n\nstd::dynamic_lib::DynamicLibrary \u3092\u4f7f\u3063\u3066\u3001\u5b9f\u884c\u6642\u306b\u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8aad\u307f\u8fbc\u3080\u65b9\u6cd5\n\n\u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\uff08C \u5074\uff09\n\u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u308f\u306f\u30b7\u30f3\u30d7\u30eb\u306b 1 \u3092\u8fd4\u3059\u95a2\u6570\u3092\u5b9f\u88c5\nint one() {\n    return 1;\n}\n\n./libtest.so \u3068\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u304a\u304f\u3002\n\nRust\u5074\n\u5148\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u793a\u3059\u3068\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n#![feature(std_misc)]\n#![feature(convert)]\nuse std::env;\nuse std::path::Path;\nuse std::dynamic_lib::DynamicLibrary;\n\nfn main() {\n    let dylib = match DynamicLibrary::open(\n        Some(Path::new(env::args().nth(1).expect(\"no args\").as_str()))\n        ) {\n        Ok(x) => {x}\n        Err(x) => {panic!(x)}\n    };\n    unsafe {\n        let one = std::mem::transmute::<*mut u8, extern \"C\" fn() -> u32>(dylib.symbol(\"one\").ok().expect(\"error\"));\n        println!(\"{}\", one());\n    }\n}\n\n\u30dd\u30a4\u30f3\u30c8\u306f\u3001DynamicLibrary.symbol \u306e\u623b\u308a\u5024\u3092 std::mem::transmute\u3067\u30ad\u30e3\u30b9\u30c8\u3059\u308b\u70b9\u3002\u3053\u308c\u304c\u308f\u304b\u3089\u306a\u304f\u3066\u3001\u30b3\u30a2\u30c0\u30f3\u30d7\u3057\u307e\u304f\u3063\u305f\u3002\uff08\u6b63\u76f4\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u66f8\u3044\u3066\u304a\u3044\u3066\u307b\u3057\u3044\u3068\u3053\u308d\uff09\n\nsymbol\u306e\u623b\u308a\u5024\u3092\u30ad\u30e3\u30b9\u30c8\u3059\u308b\nlet one = std::mem::transmute::<*mut u8, extern \"C\" fn() -> u32>(dylib.symbol(\"one\").ok().expect(\"error\"));\n        println!(\"{}\", one());\n\n\n\n\u5b9f\u884c\u7d50\u679c\n$ cargo run $PWD/libtest.so one\n1\n$ \n\n\n\n\u756a\u5916\u7de8\uff1arust\u3067\u8a18\u8ff0\u3055\u308c\u305f\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3066\u307f\u308b\uff08\u5b9f\u9a13\uff09\nrust\u3067\u306f\u95a2\u6570\u540d\u306f\u30de\u30f3\u30b0\u30ea\u30f3\u30b0\u3055\u308c\u308b\u305f\u3081\u3001\u305f\u3060\u306e\u304a\u904a\u3073\u3067\u3059\u3002\n\uff08rust\u3067plugin\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u306f\u307e\u3060\u78ba\u7acb\u3057\u3066\u3044\u306a\u3044\u3060\u308d\u3046\u3057\uff09\n\u307b\u3093\u3068\u306f\u3001trait\u7d99\u627f\u3055\u305b\u305f\u95a2\u6570\u3092\u30ed\u30fc\u30c9\u3057\u305f\u304b\u3063\u305f\u306e\u3060\u3051\u3069\u3001\u8a66\u3059\u6642\u9593\u304c\u306a\u3044\u305f\u3081\u3001\u901a\u5e38\u306e\u95a2\u6570\u3092\u30ed\u30fc\u30c9\u3057\u3066\u307f\u308b\u3002\n\n\u547c\u3073\u51fa\u3055\u308c\u308b\u95a2\u6570\u5074\n\u306a\u306b\u306f\u3068\u3082\u3042\u308c\u3001\u547c\u3073\u51fa\u3055\u308c\u308b\u5074\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f5c\u6210\u3057\u3066\u304a\u304f\u3002\n$ cargo new plugin\n\nCargo.toml \u3067 crate-type \u3092\u6307\u5b9a\u3057\u3066\u304a\u304f\n\nplugin/Cargo.toml\n[package]\nname = \"plugin\"\nversion = \"0.1.0\"\nauthors = [\"Osamu NAKAMURA <osamu0329nakamura@gmail.com>\"]\n\n[lib]\nname = \"plugin\"\ncrate-type = [\"dylib\"]\n\n\n\nplugin/src/lib.rs\npub fn hello(s: &str) {\n    println!(\"{}\", s)\n}\n\n\n\u30d3\u30eb\u30c9\u3059\u308b\u3068 target/debug/libplugin.so \u304c\u751f\u6210\u3055\u308c\u308b\u306e\u3067\u3001nm\n\u3067\u30b7\u30f3\u30dc\u30eb\u540d\u3092\u78ba\u8a8d\u3057\u3066\u304a\u304f\u3002\n$ nm target/debug/libplugin.so | grep hello\n00000000003cf120 d _ZN5hello15__STATIC_FMTSTR20he86eaad7e5625859saaE\n00000000000b3580 T _ZN5hello20h9886c09a1f174ff1eaaE\n\n\n\u547c\u3073\u51fa\u3059\u5074\n\u3053\u3061\u3089\u306f\u30d0\u30a4\u30ca\u30ea\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u4f5c\u6210\u3059\u308b\u3002\uff08\u7701\u7565\uff09\n\u5148\u7a0b\u78ba\u8a8d\u3057\u305f\u30b7\u30f3\u30dc\u30eb\u3092\u30cf\u30fc\u30c9\u30b3\u30fc\u30c9\u3057\u3066\u3044\u307e\u3059\u3002\n\nmain.rs\n#![feature(std_misc)]\n\nuse std::dynamic_lib::DynamicLibrary;\n\nfn main() {\n    let path = Some(std::path::Path::new(\"../plugin/target/debug/libplugin.so\"));\n    let dylib = match DynamicLibrary::open(path) {\n        Ok(lib) => {lib}\n        Err(x) => {panic!(\"{}\", x)}\n    };                                                                              \n    let f = unsafe {\n        //let sym = \"_ZN13create_struct20hd017fab034f9fd02NbaE\";                    \n        let sym = \"_ZN5hello20h9886c09a1f174ff1eaaE\";\n        match dylib.symbol(sym) {                                                   \n            Ok(f) => {std::mem::transmute::<*mut u8, fn(&str) -> ()>(f)}\n            Err(s) => panic!(s)\n        }\n    };\n    f(\"Hello world!\");\n}\n\n\n\u3093\u3067\u3001\u5b9f\u884c\u3059\u308b\u3002\n$ cargo run\nHello world!\n\n\u95a2\u6570\u540d\u306e\u30de\u30f3\u30b0\u30ea\u30f3\u30b0\u306b\u3064\u3044\u3066\u306f\u3001librustc_trans/back/link.rs \u306e\u30b3\u30e1\u30f3\u30c8\u306b\u8a18\u8ff0\u304c\u3042\u308a\u307e\u3059\u3002\n# ``std::dynamic_lib::DynamicLibrary`` \u3092\u4f7f\u3063\u3066\u3001\u5b9f\u884c\u6642\u306b\u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8aad\u307f\u8fbc\u3080\u65b9\u6cd5\n\n## \u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\uff08C \u5074\uff09\n\n\u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u308f\u306f\u30b7\u30f3\u30d7\u30eb\u306b 1 \u3092\u8fd4\u3059\u95a2\u6570\u3092\u5b9f\u88c5\n\n```c\nint one() {\n    return 1;\n}\n```\n`./libtest.so` \u3068\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u304a\u304f\u3002\n\n## Rust\u5074\n\n\u5148\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u793a\u3059\u3068\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\n```rust\n#![feature(std_misc)]\n#![feature(convert)]\nuse std::env;\nuse std::path::Path;\nuse std::dynamic_lib::DynamicLibrary;\n\nfn main() {\n    let dylib = match DynamicLibrary::open(\n        Some(Path::new(env::args().nth(1).expect(\"no args\").as_str()))\n        ) {\n        Ok(x) => {x}\n        Err(x) => {panic!(x)}\n    };\n    unsafe {\n        let one = std::mem::transmute::<*mut u8, extern \"C\" fn() -> u32>(dylib.symbol(\"one\").ok().expect(\"error\"));\n        println!(\"{}\", one());\n    }\n}\n```\n\n\u30dd\u30a4\u30f3\u30c8\u306f\u3001DynamicLibrary.symbol \u306e\u623b\u308a\u5024\u3092 std::mem::transmute\u3067\u30ad\u30e3\u30b9\u30c8\u3059\u308b\u70b9\u3002\u3053\u308c\u304c\u308f\u304b\u3089\u306a\u304f\u3066\u3001\u30b3\u30a2\u30c0\u30f3\u30d7\u3057\u307e\u304f\u3063\u305f\u3002\uff08\u6b63\u76f4\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u66f8\u3044\u3066\u304a\u3044\u3066\u307b\u3057\u3044\u3068\u3053\u308d\uff09\n\n```rust:symbol\u306e\u623b\u308a\u5024\u3092\u30ad\u30e3\u30b9\u30c8\u3059\u308b\nlet one = std::mem::transmute::<*mut u8, extern \"C\" fn() -> u32>(dylib.symbol(\"one\").ok().expect(\"error\"));\n        println!(\"{}\", one());\n```\n\n```:\u5b9f\u884c\u7d50\u679c\n$ cargo run $PWD/libtest.so one\n1\n$ \n```\n\n## \u756a\u5916\u7de8\uff1arust\u3067\u8a18\u8ff0\u3055\u308c\u305f\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3066\u307f\u308b\uff08\u5b9f\u9a13\uff09\n\nrust\u3067\u306f\u95a2\u6570\u540d\u306f\u30de\u30f3\u30b0\u30ea\u30f3\u30b0\u3055\u308c\u308b\u305f\u3081\u3001\u305f\u3060\u306e\u304a\u904a\u3073\u3067\u3059\u3002\n\uff08rust\u3067plugin\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u306f\u307e\u3060\u78ba\u7acb\u3057\u3066\u3044\u306a\u3044\u3060\u308d\u3046\u3057\uff09\n\u307b\u3093\u3068\u306f\u3001trait\u7d99\u627f\u3055\u305b\u305f\u95a2\u6570\u3092\u30ed\u30fc\u30c9\u3057\u305f\u304b\u3063\u305f\u306e\u3060\u3051\u3069\u3001\u8a66\u3059\u6642\u9593\u304c\u306a\u3044\u305f\u3081\u3001\u901a\u5e38\u306e\u95a2\u6570\u3092\u30ed\u30fc\u30c9\u3057\u3066\u307f\u308b\u3002\n\n### \u547c\u3073\u51fa\u3055\u308c\u308b\u95a2\u6570\u5074\n\n\u306a\u306b\u306f\u3068\u3082\u3042\u308c\u3001\u547c\u3073\u51fa\u3055\u308c\u308b\u5074\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f5c\u6210\u3057\u3066\u304a\u304f\u3002\n\n```\n$ cargo new plugin\n```\n\nCargo.toml \u3067 crate-type \u3092\u6307\u5b9a\u3057\u3066\u304a\u304f\n\n```ini:plugin/Cargo.toml\n[package]\nname = \"plugin\"\nversion = \"0.1.0\"\nauthors = [\"Osamu NAKAMURA <osamu0329nakamura@gmail.com>\"]\n\n[lib]\nname = \"plugin\"\ncrate-type = [\"dylib\"]\n```\n\n```rust:plugin/src/lib.rs\npub fn hello(s: &str) {\n    println!(\"{}\", s)\n}\n```\n\n\u30d3\u30eb\u30c9\u3059\u308b\u3068 target/debug/libplugin.so \u304c\u751f\u6210\u3055\u308c\u308b\u306e\u3067\u3001`nm`\n\u3067\u30b7\u30f3\u30dc\u30eb\u540d\u3092\u78ba\u8a8d\u3057\u3066\u304a\u304f\u3002\n\n```\n$ nm target/debug/libplugin.so | grep hello\n00000000003cf120 d _ZN5hello15__STATIC_FMTSTR20he86eaad7e5625859saaE\n00000000000b3580 T _ZN5hello20h9886c09a1f174ff1eaaE\n```\n\n### \u547c\u3073\u51fa\u3059\u5074\n\n\u3053\u3061\u3089\u306f\u30d0\u30a4\u30ca\u30ea\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u4f5c\u6210\u3059\u308b\u3002\uff08\u7701\u7565\uff09\n\u5148\u7a0b\u78ba\u8a8d\u3057\u305f\u30b7\u30f3\u30dc\u30eb\u3092\u30cf\u30fc\u30c9\u30b3\u30fc\u30c9\u3057\u3066\u3044\u307e\u3059\u3002\n\n```rust:main.rs\n#![feature(std_misc)]\n\nuse std::dynamic_lib::DynamicLibrary;\n\nfn main() {\n    let path = Some(std::path::Path::new(\"../plugin/target/debug/libplugin.so\"));\n    let dylib = match DynamicLibrary::open(path) {\n        Ok(lib) => {lib}\n        Err(x) => {panic!(\"{}\", x)}\n    };                                                                              \n    let f = unsafe {\n        //let sym = \"_ZN13create_struct20hd017fab034f9fd02NbaE\";                    \n        let sym = \"_ZN5hello20h9886c09a1f174ff1eaaE\";\n        match dylib.symbol(sym) {                                                   \n            Ok(f) => {std::mem::transmute::<*mut u8, fn(&str) -> ()>(f)}\n            Err(s) => panic!(s)\n        }\n    };\n    f(\"Hello world!\");\n}\n```\n\n\u3093\u3067\u3001\u5b9f\u884c\u3059\u308b\u3002\n\n```\n$ cargo run\nHello world!\n```\n\n\u95a2\u6570\u540d\u306e\u30de\u30f3\u30b0\u30ea\u30f3\u30b0\u306b\u3064\u3044\u3066\u306f\u3001librustc_trans/back/link.rs \u306e\u30b3\u30e1\u30f3\u30c8\u306b\u8a18\u8ff0\u304c\u3042\u308a\u307e\u3059\u3002\n", "tags": ["rust1.2.0-dev"]}