{"context": "SpringBoot\u3067\u52d5\u7684\u306b\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u306e\u5207\u308a\u66ff\u3048\u3092\u3059\u308b\u5fc5\u8981\u304c\u3067\u304d\u305f\u306e\u3067\u3084\u308a\u65b9\u3092\u8abf\u3079\u307e\u3057\u305f\u3002\n\u3061\u306a\u307f\u306b\u3001lombok\u3001JPA\u3001MySQL\u3092\u4f7f\u3063\u3066\u307e\u3059\u3002\n\n1.\u307e\u305a\u306f\u30b7\u30f3\u30b0\u30eb\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u306e\u5834\u5408\nConfig\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u3066\uff08\u5225\u306bApp\u30af\u30e9\u30b9\u306b\u66f8\u3044\u3066\u3082\u3044\u3044\u3067\u3059\u304c\uff09Datasource\u306eBean\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u8a2d\u5b9a\u5185\u5bb9\u306f\u3068\u308a\u3042\u3048\u305a\u30aa\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3067\u3002\n\nDatasourceConfig\n@Component\n@Configuration\npublic class DatasourceConfig {\n\n    @Bean\n    public DataSource datasource(){\n        DataSource ds = new org.apache.tomcat.jdbc.pool.DataSource();\n        ds.setDriverClassName(\"com.mysql.jdbc.Driver\");\n        ds.setUrl(\"jdbc:mysql://localhost:3306/sample01\");\n        ds.setUsername(\"user01\");\n        ds.setPassword(\"pass\");\n        return ds;\n    }\n}\n\n\n\u78ba\u8a8d\u7528\u306b\u30c6\u30fc\u30d6\u30eb\u306e\u4e2d\u8eab\u3092\u5358\u7d14\u306b\u5410\u304d\u51fa\u3059RestController\u3092\u4f5c\u3063\u3066\u52d5\u304b\u3059\u3068\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u306d\u3002\n\nfindall\u306e\u7d50\u679c\n[{\"name\":\"\u30ad\u30e3\u30e9\",\"age\":21},\n{\"name\":\"\u4e38\u5c71\",\"age\":33},\n{\"name\":\"\u4e80\u5ca1\",\"age\":19},\n{\"name\":\"\u5009\u54e1\",\"age\":28},\n{\"name\":\"\u672c\u4e26\",\"age\":41},\n{\"name\":\"\u6797\",\"age\":26},\n{\"name\":\"\u9f4b\u85e4\",\"age\":15}]\n\n\n\u203b\u30c7\u30fc\u30bf\u306f\u9069\u5f53\u3067\u3059\uff08\u7279\u306b\u5e74\u9f62\uff09\n\n2.\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3092\u8907\u6570\u306b\u3057\u3066\u52d5\u7684\u306b\u5909\u66f4\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\n\n2.1.DatasourceConfig\u306e\u5909\u66f4\nDataSouce\u3092\u8907\u6570\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\nDatasourceConfig\n@Component\n@Configuration\npublic class DatasourceConfig {\n\n    @Bean\n    public DataSource datasource1(){\n        DataSource ds = new org.apache.tomcat.jdbc.pool.DataSource();\n        ds.setDriverClassName(\"com.mysql.jdbc.Driver\");\n        ds.setUrl(\"jdbc:mysql://localhost:3306/sample01\");\n        ds.setUsername(\"user01\");\n        ds.setPassword(\"pass\");\n        return ds;\n    }\n\n    @Bean\n    public DataSource datasource2(){\n        DataSource ds = new org.apache.tomcat.jdbc.pool.DataSource();\n        ds.setDriverClassName(\"com.mysql.jdbc.Driver\");\n        ds.setUrl(\"jdbc:mysql://localhost:3306/sample02\");\n        ds.setUsername(\"user02\");\n        ds.setPassword(\"pass\");\n        return ds;\n    }\n}\n\n\n\u3053\u308c\u3067\u5b9f\u884c\u3059\u308b\u3068\u3069\u3061\u3089\u306e\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3092\u4f7f\u3046\u304b\u308f\u304b\u3089\u306a\u3044\u304b\u3089@Primary\u3064\u3051\u308d\u3088\uff01\u3068\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\n2016-10-29 16:11:43.069  WARN 8160 --- [           main] ationConfigEmbeddedWebApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration': Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [javax.sql.DataSource] is defined: expected single matching bean but found 2: datasource1,datasource2\n\n\uff08\u4e2d\u7565\uff09\n\nConsider marking one of the beans as @Primary, updating the consumer to accept multiple beans, or using @Qualifier to identify the bean that should be consumed\n\n\u3082\u3061\u308d\u3093\u3069\u3063\u3061\u304b\u306bPrimary\u3064\u3051\u308c\u3070\u30a8\u30e9\u30fc\u306f\u7121\u304f\u306a\u308a\u307e\u3059\u304c\u3001\u305d\u308c\u3067\u306f\u52d5\u7684\u5909\u66f4\u306b\u306a\u308a\u307e\u305b\u3093\u306e\u3067\u3001\u52d5\u7684\u306b\u5909\u66f4\u3057\u3066\u304f\u308c\u308b\u8a2d\u5b9a\u3092\u4f5c\u308a\u3001\u305d\u3061\u3089\u3092Primary\u306b\u3057\u307e\u3059\u3002\n\nDatasourceConfig\n@Component\n@Configuration\npublic class DatasourceConfig {\n\n//  @Bean\n    public DataSource datasource1(){\n        DataSource ds = new org.apache.tomcat.jdbc.pool.DataSource();\n        ds.setDriverClassName(\"com.mysql.jdbc.Driver\");\n        ds.setUrl(\"jdbc:mysql://localhost:3306/sample01\");\n        ds.setUsername(\"user01\");\n        ds.setPassword(\"pass\");\n        return ds;\n    }\n\n//  @Bean\n    public DataSource datasource2(){\n        DataSource ds = new org.apache.tomcat.jdbc.pool.DataSource();\n        ds.setDriverClassName(\"com.mysql.jdbc.Driver\");\n        ds.setUrl(\"jdbc:mysql://localhost:3306/sample02\");\n        ds.setUsername(\"user02\");\n        ds.setPassword(\"pass\");\n        return ds;\n    }\n\n    @Bean\n//    @Primary\n    public DynamicRoutingDataSourceResolver dataSource() {\n        DynamicRoutingDataSourceResolver resolver = new DynamicRoutingDataSourceResolver();\n\n        Map<Object, Object> dataSources = new HashMap<Object,Object>();\n        dataSources.put(\"datasource1\", datasource1());\n        dataSources.put(\"datasource2\", datasource2());\n\n        resolver.setTargetDataSources(dataSources);\n\n        // default datasource\n        resolver.setDefaultTargetDataSource(datasource1());\n\n        return resolver;\n    }\n}\n\n\n\u3068\u601d\u3063\u305f\u3089\u4eca1.4.1\u3067\u3084\u308b\u3068\uff08\uff1f\uff09@Bean\u3092\uff11\u3064\u306b\u3057\u306a\u3044\u3068\u3046\u307e\u304f\u52d5\u304b\u306a\u304b\u3063\u305f\u3067\u3059\u306d\u3002\u3046\u30fc\u3080\u3002\n\u3042\u3068\u3001\u79c1\u306e\u74b0\u5883\u3067\u306f\uff08\uff1f\uff09resolver.setDefaultTargetDataSource\u3092\u6307\u5b9a\u3057\u3066\u3042\u3052\u306a\u3044\u3068\u3046\u307e\u304f\u52d5\u3044\u3066\u304f\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u7a81\u7136\u51fa\u3066\u304d\u305fDynamicRoutingDataSourceResolver\u3055\u3093\u306f\u6b21\u3067\u8a73\u3057\u304f\u3002\n\n2.2.DynamicRoutingDataSourceResolver\n\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3092\u4f7f\u7528\u3059\u308b\u524d\u306b\u52d5\u7684\u306b\u3069\u306e\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3092\u4f7f\u7528\u3059\u308b\u304b\u89e3\u6c7a\u3057\u3066\u3042\u3052\u308bSpring\u306e\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002\nAbstractRoutingDataSource\u3092\u7d99\u627f\u3057\u3066\u4f5c\u308bDynamicRoutingDataSourceResolver\u304c\u305d\u308c\u306b\u5f53\u305f\u308a\u307e\u3059\u3002\n\u3082\u3061\u308d\u3093\u7d99\u627f\u3055\u3048\u3057\u3066\u308c\u3070\u540d\u524d\u306f\u306a\u3093\u3067\u3082\u3044\u3044\u306e\u3067\u3059\u304c\u3002\n\nDynamicRoutingDataSourceResolver\nimport org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;\n\npublic class DynamicRoutingDataSourceResolver extends AbstractRoutingDataSource {\n\n    @Override\n    protected Object determineCurrentLookupKey() {\n        if (SchemaContextHolder.getSchemaType() == null) {\n            // \u30c7\u30d5\u30a9\u30eb\u30c8\n            return \"datasource1\";\n\n        } else if(SchemaContextHolder.getSchemaType() == SchemaType.DATA1) {\n            return \"datasource1\";\n\n        } else if(SchemaContextHolder.getSchemaType() == SchemaType.DATA2) {\n            return \"datasource2\";\n\n        }else{\n            // \u30c7\u30d5\u30a9\u30eb\u30c8\n            return \"datasource1\";\n        }\n    }\n\n}\n\n\n\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3059\u308b\u524d\u306b\u3053\u306edetermineCurrentLookupKey\u304c\u547c\u3070\u308c\u3066\u3069\u306e\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3092\u4f7f\u3046\u304b\u3092\u90fd\u5ea6\u6c7a\u5b9a\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u8fd4\u3059\u306e\u306f\u30ad\u30fc\u6587\u5b57\u5217\u3060\u3051\u306a\u306e\u3067\u3001\u5148\u307b\u3069DatasourceConfig\u3067setTargetDataSources\u306b\u6e21\u3057\u305fHashMap\u306e\u30ad\u30fc\u3068\u5bfe\u5fdc\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3055\u3089\u306b\u3053\u3053\u3067\u767b\u5834\u3057\u3066\u3044\u308bSchemaContextHolder\u306b\u3064\u3044\u3066\u306f\u6b21\u3002\n\n2.3.SchemaContextHolder\n\u3053\u308c\u306fPOJO\u306a\u306e\u3067\u5fc5\u305a\u3057\u3082\u3053\u306e\u5f62\u3067\u306a\u304f\u3066\u3082\u3044\u3044\u306e\u3067\u3059\u304c\u3001ThreadLocal\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u304c\u91cd\u8981\u3067\u3059\u3002\nWebServer\u306a\u306e\u3067\u8ab0\u304b\u304c\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u5909\u3048\u305f\u3089\u307f\u3093\u306a\u305d\u3063\u3061\u306b\u63a5\u7d9a\u306b\u3044\u304f\u3001\u306a\u3093\u3066\u3053\u3068\u304c\u3042\u3063\u305f\u3089\u56f0\u308a\u307e\u3059\u306e\u3067\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u4e2d\u8eab\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\nSchemaContextHolder\npublic class SchemaContextHolder {\n    private static ThreadLocal<SchemaType> contextHolder = new ThreadLocal<SchemaType>();\n\n    public static void setSchemaType(SchemaType datasourcename) {\n        Assert.notNull(datasourcename, \"Schema type cannot be null.\");\n        contextHolder.set(datasourcename);\n    }\n\n    public static SchemaType getSchemaType() {\n        return contextHolder.get();\n    }\n\n    public static void clear() {\n        contextHolder.remove();\n    }\n}\n\n\n\u3053\u3053\u3067\u306f\uff08\u3068\u3044\u3046\u304b\u3069\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u898b\u3066\u3082\uff09SchemaType\u3068\u3044\u3046Enum\u3092\u4f5c\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u5225\u306bString\u3067\u3082\u3061\u3083\u3093\u3068\u52d5\u304d\u307e\u3059\u3002\n\u4e00\u5fdcSchemaType\u306e\u4e2d\u8eab\u3002\n\nSchemaType\npublic enum SchemaType {\n    DATA1,\n    DATA2\n}\n\n\n\u5f8c\u306f\u4f7f\u3046\u3068\u304d\u306b\u30b9\u30ad\u30fc\u30de\u3092\u5207\u308a\u66ff\u3048\u3066\u3042\u3052\u308c\u3070OK\u3002\n\ncontroller\n    @GetMapping(\"findall\")\n    public List<User> findall(@RequestParam(\"ds\") String ds){\n        if(ds.equals(\"ds1\")){\n            SchemaContextHolder.setSchemaType(SchemaType.DATA1);\n        }else{\n            SchemaContextHolder.setSchemaType(SchemaType.DATA2);\n        }\n        return userService.findAll();\n    }\n\n\n\u3053\u308c\u3067\u5b9f\u884c\u3059\u308b\u3068\nhttp://localhost:8080/user/findall?ds=ds1\u306e\u7d50\u679c\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\nds1\n[{\"name\":\"\u30ad\u30e3\u30e9\",\"age\":21},\n{\"name\":\"\u4e38\u5c71\",\"age\":33},\n{\"name\":\"\u4e80\u5ca1\",\"age\":19},\n{\"name\":\"\u5009\u54e1\",\"age\":28},\n{\"name\":\"\u672c\u4e26\",\"age\":41},\n{\"name\":\"\u6797\",\"age\":26},\n{\"name\":\"\u9f4b\u85e4\",\"age\":15}]\n\n\n\u203b\u30c7\u30fc\u30bf\u306f\u9069\u5f53\u3067\u3059\u3002\uff08\u7279\u306b\u5e74\u9f62\uff01\uff01\uff01\uff09\nhttp://localhost:8080/user/findall?ds=ds2\u306e\u7d50\u679c\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\nds2\n[{\"name\":\"\u30b5\u30e9\",\"age\":26},\n{\"name\":\"\u4e0a\u91ce\",\"age\":15},\n{\"name\":\"\u58fa\u4e95\",\"age\":22},\n{\"name\":\"\u5df4\u6708\",\"age\":28},\n{\"name\":\"\u6210\u5bae\",\"age\":18},\n{\"name\":\"\u79cb\u8449\",\"age\":19},\n{\"name\":\"\u864e\u5c3e\",\"age\":20}]\n\n\n\u203b\u30c7\u30fc\u30bf\u306f\u9069\u5f53\u3067\u3059\u3002\uff08\u7279\u306b\u5e74\u9f62\uff01\uff01\uff01\uff01\uff01\uff01\uff09\n\u3055\u3066\u307e\u3042\u3001\u3053\u3053\u307e\u3067\u3067\u3082\u304a\u3057\u307e\u3044\u306a\u306e\u3067\u3059\u304c\u3001\u3082\u3046\u3061\u3087\u3063\u3068\u624b\u3092\u5165\u308c\u3066\u3044\u304d\u307e\u3059\u3002\n\n3.\u63a5\u7d9a\u5148\u3092application.yml\u3067\u7ba1\u7406\n\u63a5\u7d9a\u5148\u304c\u30aa\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306a\u3093\u3066\u304a\u3057\u3083\u308c\u3058\u3083\u306a\u3044\u306e\u3067appliation.yml\u3067\u7ba1\u7406\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002\n\u5171\u901a\u306e\u8a2d\u5b9a\u306f\u4f55\u5ea6\u3082\u66f8\u304b\u306a\u304f\u3066\u3044\u3044\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002\n\napplication.yml\n# Datasource BaseSetting\nmy.datasource.abstract:\n    driverClassName: com.mysql.jdbc.Driver\n    sqlScriptEncoding: UTF-8\n    # pooling\n    maxActive: 15\n    maxIdle: 10\n    minIdle: 5\n    initialSize: 2\n    # Re-connect\n    validationQuery: SELECT 1 FROM DUAL\n    testOnBorrow: true\n    testWhileIdle: true\n    timeBetweenEvictionRunsMillis: 600000\n    minEvictableIdleTimeMillis: 600000\n# datasource1\ndatasource.data1:\n    url: jdbc:mysql://localhost:3306/sample01\n    username: user01\n    password: pass\n# datasource2\ndatasource.data2:\n    url: jdbc:mysql://localhost:3306/sample02\n    username: user02\n    password: pass\n\n\n\u3067\u3001\u3053\u3044\u3064\u3092\u8aad\u307f\u53d6\u308b\u305f\u3081\u306e\u30af\u30e9\u30b9\u3092\uff13\u3064\u4f5c\u308a\u307e\u3059\u3002\n\nDatasourceBaseProperties(\u5171\u901a\u8a2d\u5b9a)\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.stereotype.Component;\n\nimport lombok.Data;\n\n@Data\n@Component\n@ConfigurationProperties(\"my.datasource.abstract\")\npublic class DatasourceBaseProperties {\n    private String driverClassName;\n    private String SqlScriptEncoding;\n    private Integer maxActive;\n    private Integer maxIdle;\n    private Integer minIdle;\n    private Integer initialSize;\n    private String validationQuery;\n    private Boolean testOnBorrow;\n    private Boolean testWhileIdle;\n    private Integer timeBetweenEvictionRunsMillis;\n    private Integer minEvictableIdleTimeMillis;\n}\n\n\n\nDataSourceProperties01\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.stereotype.Component;\n\nimport lombok.Data;\n\n@Data\n@Component\n@ConfigurationProperties(\"datasource.data1\")\npublic class DatasourceProperties01 {\n    private String url;\n    private String username;\n    private String password;\n}\n\n\n\nDataSourceProperties02\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.stereotype.Component;\n\nimport lombok.Data;\n\n@Data\n@Component\n@ConfigurationProperties(\"datasource.data2\")\npublic class DatasourceProperties02 {\n    private String url;\n    private String username;\n    private String password;\n}\n\n\n@Component\u3092\u3064\u3051\u308b\u3068SpringBoot\u306e\u8d77\u52d5\u6642\u306b\u8a2d\u5b9a\u30b9\u30ad\u30e3\u30f3\u306e\u5bfe\u8c61\u306b\u306a\u308a\u307e\u3059\u3002\n@ConfigurationProperties\u3092\u3064\u3051\u308b\u3068\u305d\u306e\u5024\uff0b\u5909\u6570\u540d\u3068\u540c\u540d\u306eapplication.yml\u306e\u8a2d\u5b9a\u304c\u53cd\u6620\u3055\u308c\u307e\u3059\u3002\n\u3064\u307e\u308aDatasourceConfig\u306f\u3053\u3046\u5909\u308f\u308b\u308f\u3051\u3067\u3059\u3002\n\uff08\u305d\u308c\u306b\u3057\u3066\u3082source\u306e\"s\"\u304c\u5927\u6587\u5b57\u3060\u3063\u305f\u308a\u5c0f\u6587\u5b57\u3060\u3063\u305f\u308a\u7d71\u4e00\u611f\u306a\u3044\u306a\u30fb\u30fb\u30fb\uff09\n\nDatasourceConfig\npublic class DatasourceConfig {\n    @Autowired\n    DatasourceBaseProperties datasourceBase;\n\n    @Autowired\n    DatasourceProperties01 datasourceP01;\n\n    @Autowired\n    DatasourceProperties02 datasourceP02;\n\n//  @Bean\n    public DataSource datasource1(){\n        DataSource ds = new org.apache.tomcat.jdbc.pool.DataSource();\n        ds.setDriverClassName(this.datasourceBase.getDriverClassName());\n        ds.setUrl(this.datasourceP01.getUrl());\n        ds.setUsername(this.datasourceP01.getUsername());\n        ds.setPassword(this.datasourceP01.getPassword());\n        return ds;\n    }\n\n//  @Bean\n    public DataSource datasource2(){\n        DataSource ds = new org.apache.tomcat.jdbc.pool.DataSource();\n        ds.setDriverClassName(this.datasourceBase.getDriverClassName());\n        ds.setUrl(this.datasourceP02.getUrl());\n        ds.setUsername(this.datasourceP02.getUsername());\n        ds.setPassword(this.datasourceP02.getPassword());\n        return ds;\n    }\n\n\uff08\u4ee5\u4e0b\u7565\uff09\n\n\n\u7d50\u679c\u306f\u5909\u308f\u3089\u306a\u3044\u306e\u3067\u7701\u7565\uff01\n\u3082\u3061\u308d\u3093\u300cOracle\u3067DB\u304c\uff11\u500b\u3067\u30b9\u30ad\u30fc\u30de\u304c\u9055\u3046\u3060\u3051\u3060\u304b\u3089url\u3082\u4e00\u7dd2\u3067\u3044\u3044\u3093\u3058\u3083\u3088\u300d\u3068\u3044\u3046\u5834\u5408\u306furl\u3092\u5171\u901a\u306b\u307e\u308f\u305b\u3070OK\u3002\n\u3081\u3067\u305f\u3057\u3081\u3067\u305f\u3057\u3002\n\n4.\u30af\u30e9\u30b9\u3092\u3059\u3063\u304d\u308a\u3055\u305b\u3088\u3046\n\u540c\u3058\u8a18\u8ff0\u304c\u4f55\u56de\u3082\u51fa\u3066\u304f\u308b\u306e\u3063\u3066\u6c17\u6301\u3061\u60aa\u3044\u3067\u3059\u3088\u306d\uff01\n\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u3063\u304d\u308a\u3055\u305b\u307e\u3059\u3002\n\u30fbDatasourceProperties01\u3068DatasourceProperties02\u306e\u5171\u901a\u9805\u76ee\u3092\u629c\u304d\u51fa\u3059\u305f\u3081\u306b\u57fa\u5e95\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\n\u30fbapplication.yml\u306e\u8a2d\u5b9a\u3092\u53d6\u5f97\u3059\u308b\u30af\u30e9\u30b9\u3068DatasourceProperties01\u304c\u5225\u306a\u306e\u304c\u3082\u3084\u3063\u3068\u3059\u308b\u306e\u3067\u4e00\u7dd2\u306b\u3057\u3066\u3057\u307e\u3046\u3002\n\u30fb\u3042\u308c\uff1f\u3058\u3083\u3042DatasourceConfig\u3082\u3082\u3063\u3068\u3059\u3063\u304d\u308a\u3059\u308b\u3093\u3058\u3083\u306d\uff1f\n\u3068\u3044\u3046\u308f\u3051\u3067\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\nAbstractDatasourceProperties\n@Data\npublic class AbstractDatasourceProperties {\n\n    @Autowired\n    DatasourceBaseProperties dataSourceProperties;\n\n    protected String url;\n    protected String username;\n    protected String password;\n\n    @Bean\n    public DataSource createDataSourceBean(){\n        DataSource ds = new org.apache.tomcat.jdbc.pool.DataSource();\n        ds.setDriverClassName(this.dataSourceProperties.getDriverClassName());\n\n        ds.setMaxActive(this.dataSourceProperties.getMaxActive());\n        ds.setMaxIdle(this.dataSourceProperties.getMaxIdle());\n        ds.setMinIdle(this.dataSourceProperties.getMinIdle());\n        ds.setInitialSize(this.dataSourceProperties.getInitialSize());\n\n        ds.setValidationQuery(this.dataSourceProperties.getValidationQuery());\n        ds.setTestOnBorrow(this.dataSourceProperties.getTestOnBorrow());\n        ds.setTestWhileIdle(this.dataSourceProperties.getTestWhileIdle());\n        ds.setTimeBetweenEvictionRunsMillis(this.dataSourceProperties.getTimeBetweenEvictionRunsMillis());\n        ds.setMinEvictableIdleTimeMillis(this.dataSourceProperties.getMinEvictableIdleTimeMillis());\n\n        ds.setUrl(this.getUrl());\n        ds.setUsername(this.getUsername());\n        ds.setPassword(this.getPassword());\n        return ds;\n    }\n}\n\n\n\nDatasourceProperties01\n@Component\n@ConfigurationProperties(\"datasource.data1\")\npublic class DatasourceProperties01 extends AbstractDatasourceProperties {\n    // has no methods...\n}\n\n\n(02\u3082\u540c\u3058\u306a\u306e\u3067\u7701\u7565\uff09\n\nDatasourceConfig\n@Component\n@Configuration\npublic class DatasourceConfig {\n    @Autowired\n    DatasourceBaseProperties datasourceBase;\n\n    @Autowired\n    DatasourceProperties01 datasourceP01;\n\n    @Autowired\n    DatasourceProperties02 datasourceP02;\n\n\n    @Bean\n    @Primary\n    public DynamicRoutingDataSourceResolver dataSource() {\n        DynamicRoutingDataSourceResolver resolver = new DynamicRoutingDataSourceResolver();\n\n        Map<Object, Object> dataSources = new HashMap<Object,Object>();\n        dataSources.put(\"datasource1\", datasourceP01.createDataSourceBean());\n        dataSources.put(\"datasource2\", datasourceP02.createDataSourceBean());\n\n        resolver.setTargetDataSources(dataSources);\n\n        // default datasource\n        resolver.setDefaultTargetDataSource(datasourceP01.createDataSourceBean());\n\n        return resolver;\n    }\n}\n\n\n\uff08DatasourceBaseProperties\u306f\u5909\u66f4\u306a\u3057\uff09\n\u7d50\u679c\u3082\u4f7f\u3044\u65b9\u3082\u5909\u308f\u3089\u305a\u3067\u3059\u306d\u3002\n\u3081\u3067\u305f\u3057\u3081\u3067\u305f\u3057\u3002\n\n5.\u30a4\u30f3\u30bf\u30fc\u30bb\u30d7\u30bf\u3067\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3092\u5207\u308a\u66ff\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\u4eba\u3084\u6a29\u9650\u3084\u8a2d\u5b9a\u306b\u3088\u3063\u3066\u4f7f\u7528\u3059\u308b\u30b9\u30ad\u30fc\u30de\uff08\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\uff09\u3092\u5207\u308a\u66ff\u3048\u308b\u3002\u3069\u306e\u30c6\u30fc\u30d6\u30eb\u3082\u4e00\u7dd2\u3002\n\u3063\u3066\u3044\u3046\u3053\u3068\u306f\u3064\u307e\u308a\u3001\u51e6\u7406\u306b\u3088\u3063\u3066\u898b\u308b\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u304c\u5909\u308f\u308b\u306a\u3093\u3066\u3053\u3068\u304c\u3042\u308b\u3068\u307e\u305a\u3044\u3002\n\u3082\u3057\u300c\u3042\u308c\uff1f\u3053\u3053\u306e\u51e6\u7406\u3060\u3051\u3044\u3064\u3082user01\u306eDB\u898b\u3066\u306d\uff1f\u300d\u306a\u3093\u3066\u30d0\u30b0\u304c\u898b\u3064\u304b\u3063\u305f\u3089\u4e0d\u6bdb\u306a\u6a2a\u5c55\u958b\u796d\u308a\u306e\u59cb\u307e\u308a\u3067\u3059\u3002\n\u3088\u304f\u308f\u304b\u3063\u3066\u306a\u3044\u4eba\u304c\u6a5f\u80fd\u8ffd\u52a0\u3084\u4fee\u6b63\u3057\u305f\u3089\u58ca\u308c\u308b\u3053\u3068\u9593\u9055\u3044\u306a\u3057\u3002\n\u5171\u901a\u51e6\u7406\u4f5c\u3063\u305f\u3063\u3066\u305d\u306e\u51e6\u7406\u547c\u3073\u51fa\u3057\u5fd8\u308c\u3066\u308b\u306a\u3093\u3066\u3053\u3068\u306f\u5f53\u7136\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\u5371\u967a\u306a\u3053\u3068\u3053\u306e\u4e0a\u306a\u3044\u306e\u3067\u3053\u3093\u306a\u3082\u306e\u30a4\u30f3\u30bf\u30fc\u30bb\u30d7\u30bf\u3067\u3084\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002\u500b\u3005\u306e\u51e6\u7406\u3067\u5207\u308a\u66ff\u3048\u308b\u306a\u3093\u3066\u3084\u3081\u3084\u3081\uff01\n\n5.1.\u30a4\u30f3\u30bf\u30fc\u30bb\u30d7\u30bf\u4f5c\u6210\n\nDatasourceInterceptor\npublic class DatasourceInterceptor extends HandlerInterceptorAdapter {\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)\n            throws Exception {\n        if(!StringUtils.isEmpty(request.getSession().getAttribute(\"datasource\"))){\n            SchemaContextHolder.setSchemaType((SchemaType)request.getSession().getAttribute(\"datasource\"));\n        }\n        return true;\n    }\n}\n\n\n\u30a4\u30f3\u30bf\u30fc\u30bb\u30d7\u30bf\u3092\u4f5c\u308b\u306b\u306fHandlerInterceptorAdapter\u3092\u7d99\u627f\u3059\u308c\u3070OK\u3002\n\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u306e\u8a2d\u5b9a\u306f\u30bb\u30c3\u30b7\u30e7\u30f3\u60c5\u5831\u306b\u6301\u3064\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u3069\u3046\u3067\u3082\u3044\u3044\u3051\u3069\u30a4\u30f3\u30bf\u30fc\u30bb\u30d7\u30bf\u306b\u95a2\u3059\u308b\u82f1\u8a9e\u30b5\u30a4\u30c8\u3092\u81ea\u52d5\u7ffb\u8a33\u3059\u308b\u3068\u3053\u3068\u3054\u3068\u304f\u300c\u8fce\u6483\u6226\u95d8\u6a5f\u300d\u306b\u7ffb\u8a33\u3057\u3066\u304f\u308c\u308b\u306e\u9762\u767d\u3059\u304e\u3067\u3059\u3088\u306d\u3002\u5408\u3063\u3066\u308b\u3051\u3069\u3002\n\n5.2.\u30a4\u30f3\u30bf\u30fc\u30bb\u30d7\u30bf\u767b\u9332\n\u4f5c\u6210\u3057\u305f\u30a4\u30f3\u30bf\u30fc\u30bb\u30d7\u30bf\u3092\u4f7f\u3046\u3088\u3046\u306bConfig\u30af\u30e9\u30b9\u306b\u8ffd\u8a18\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u5148\u307b\u3069\u4f5c\u3063\u305fDatasourceConfig\u306b\u8ffd\u8a18\u3057\u307e\u3057\u3087\u3046\u3002\n\nDatasourceConfig\uff08\u8ffd\u8a18\u306e\u307f\uff09\n    @Bean\n    public HandlerInterceptor datasourceInterceptor(){\n        return new com.example.interceptor.DatasourceInterceptor();\n    }\n\n    @Bean\n    public MappedInterceptor interceptorMapping(){\n        return new MappedInterceptor(new String[]{\"/**\"}, datasourceInterceptor());\n    }\n\n\nMappedInterceptor\u3067\u306f\u30a4\u30f3\u30bf\u30fc\u30bb\u30d7\u30bf\u3092\u9069\u7528\u3059\u308bURL\u3001\u9069\u7528\u9664\u5916\u3059\u308bURL\u304c\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\n\u4eca\u56de\u306f\u5168\u90e8\u5bfe\u8c61\u306b\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n5.3.\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u5207\u308a\u66ff\u3048\u7528\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\n\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u3064\u3044\u3067\u306b\u3002\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\nDatasourceSettingController\n@RestController\n@RequestMapping(\"datasource/\")\npublic class DatasourceSettingController {\n\n    @RequestMapping(\"set\")\n    public String setDatasource(HttpServletRequest request, @RequestParam(\"ds\") String ds){\n        SchemaType type;\n        switch(ds){\n        case \"ds1\":\n            type = SchemaType.DATA1;\n            break;\n        case \"ds2\":\n            type = SchemaType.DATA2;\n            break;\n        default:\n            type = SchemaType.DATA1;\n        }\n\n        request.getSession().setAttribute(\"datasource\", type);\n\n        return \"OK\";\n    }\n}\n\n\n\u3082\u3061\u308d\u3093\u53c2\u7167\u3059\u308b\u306e\u65b9\u306e\u5207\u308a\u66ff\u3048\u51e6\u7406\u306f\u6d88\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\ncontroller\n    @GetMapping(\"findall\")\n    public List<User> findall(){\n        return userService.findAll();\n    }\n\n\n\u3053\u308c\u3067http://localhost:8080/datasource/set?ds=ds2\u3092\u53e9\u3044\u3066\u304b\u3089findall\u3059\u308b\u3068\u7d50\u679c\u304c\u5909\u308f\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u3081\u3067\u305f\u3057\u3081\u3067\u305f\u3057\uff01\uff01\uff01\uff01\n\n\u4eca\u56de\u306e\u30bd\u30fc\u30b9\nGitHub\u306b\u7f6e\u304d\u307e\u3057\u305f\u3002\nhttps://github.com/syukai/SpringbootMultiDatasourceSample\n\uff11\uff5e\uff15\u306e\u305d\u308c\u305e\u308c\u3067commit\u5207\u3063\u3066\u308b\u306e\u3067\u53c2\u8003\u307e\u3067\u306b\u3002\n\n\u53c2\u8003\u30b5\u30a4\u30c8\n\u25cfSpring Blog - Dynamic DataSource Routing\nhttp://spring.io/blog/2007/01/23/dynamic-datasource-routing/\n\u21d2\u3053\u308c\u304c\u3059\u3079\u3066\u3068\u3044\u3048\u3070\u3059\u3079\u3066\u306a\u306e\u3067\u3059\u304c\u3001SpringBoot\u306a\u3093\u3067Bean\u306e\u66f8\u304d\u65b9\u304c\u9055\u3046\u3068\u304b\u3001application.yml\u3068\u306e\u3064\u306a\u304c\u308a\u3068\u304b\u8272\u3005\u3068\u66f8\u304d\u305f\u304b\u3063\u305f\u306e\u3067\u3002\n\u25cfm-namiki\u306e\u65e5\u8a18 \u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u306e\u52d5\u7684\u5207\u308a\u66ff\u3048\nhttp://m-namiki.hatenablog.jp/entries/2011/11/24\n\u21d2\u5927\u5909\u53c2\u8003\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u305f\u3076\u3093\u30b0\u30b0\u3063\u3066\u6700\u521d\u306b\u3044\u304d\u3064\u304f\u306e\u306f\u3053\u3053\u3067\u3059\u3088\u306d\u3002\n\u25cfAlexander Fedulov - Dynamic DataSource Routing with Spring @Transactional\nhttp://fedulov.website/2015/10/14/dynamic-datasource-routing-with-spring/\nSpringBoot\u3067\u52d5\u7684\u306b\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u306e\u5207\u308a\u66ff\u3048\u3092\u3059\u308b\u5fc5\u8981\u304c\u3067\u304d\u305f\u306e\u3067\u3084\u308a\u65b9\u3092\u8abf\u3079\u307e\u3057\u305f\u3002\n\u3061\u306a\u307f\u306b\u3001lombok\u3001JPA\u3001MySQL\u3092\u4f7f\u3063\u3066\u307e\u3059\u3002\n\n#1.\u307e\u305a\u306f\u30b7\u30f3\u30b0\u30eb\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u306e\u5834\u5408\n\nConfig\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u3066\uff08\u5225\u306bApp\u30af\u30e9\u30b9\u306b\u66f8\u3044\u3066\u3082\u3044\u3044\u3067\u3059\u304c\uff09Datasource\u306eBean\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u8a2d\u5b9a\u5185\u5bb9\u306f\u3068\u308a\u3042\u3048\u305a\u30aa\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3067\u3002\n\n```config:DatasourceConfig\n@Component\n@Configuration\npublic class DatasourceConfig {\n    \n\t@Bean\n\tpublic DataSource datasource(){\n\t\tDataSource ds = new org.apache.tomcat.jdbc.pool.DataSource();\n\t\tds.setDriverClassName(\"com.mysql.jdbc.Driver\");\n\t\tds.setUrl(\"jdbc:mysql://localhost:3306/sample01\");\n\t\tds.setUsername(\"user01\");\n\t\tds.setPassword(\"pass\");\n\t\treturn ds;\n\t}\n}\n```\n\n\u78ba\u8a8d\u7528\u306b\u30c6\u30fc\u30d6\u30eb\u306e\u4e2d\u8eab\u3092\u5358\u7d14\u306b\u5410\u304d\u51fa\u3059RestController\u3092\u4f5c\u3063\u3066\u52d5\u304b\u3059\u3068\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u306d\u3002\n\n```result:findall\u306e\u7d50\u679c\n[{\"name\":\"\u30ad\u30e3\u30e9\",\"age\":21},\n{\"name\":\"\u4e38\u5c71\",\"age\":33},\n{\"name\":\"\u4e80\u5ca1\",\"age\":19},\n{\"name\":\"\u5009\u54e1\",\"age\":28},\n{\"name\":\"\u672c\u4e26\",\"age\":41},\n{\"name\":\"\u6797\",\"age\":26},\n{\"name\":\"\u9f4b\u85e4\",\"age\":15}]\n```\n\u203b\u30c7\u30fc\u30bf\u306f\u9069\u5f53\u3067\u3059\uff08\u7279\u306b\u5e74\u9f62\uff09\n\n#2.\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3092\u8907\u6570\u306b\u3057\u3066\u52d5\u7684\u306b\u5909\u66f4\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\n##2.1.DatasourceConfig\u306e\u5909\u66f4\nDataSouce\u3092\u8907\u6570\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```datasource:DatasourceConfig\n@Component\n@Configuration\npublic class DatasourceConfig {\n    \n\t@Bean\n\tpublic DataSource datasource1(){\n\t\tDataSource ds = new org.apache.tomcat.jdbc.pool.DataSource();\n\t\tds.setDriverClassName(\"com.mysql.jdbc.Driver\");\n\t\tds.setUrl(\"jdbc:mysql://localhost:3306/sample01\");\n\t\tds.setUsername(\"user01\");\n\t\tds.setPassword(\"pass\");\n\t\treturn ds;\n\t}\n\n\t@Bean\n\tpublic DataSource datasource2(){\n\t\tDataSource ds = new org.apache.tomcat.jdbc.pool.DataSource();\n\t\tds.setDriverClassName(\"com.mysql.jdbc.Driver\");\n\t\tds.setUrl(\"jdbc:mysql://localhost:3306/sample02\");\n\t\tds.setUsername(\"user02\");\n\t\tds.setPassword(\"pass\");\n\t\treturn ds;\n\t}\n}\n```\n\n\u3053\u308c\u3067\u5b9f\u884c\u3059\u308b\u3068\u3069\u3061\u3089\u306e\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3092\u4f7f\u3046\u304b\u308f\u304b\u3089\u306a\u3044\u304b\u3089@Primary\u3064\u3051\u308d\u3088\uff01\u3068\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\n\n```\n2016-10-29 16:11:43.069  WARN 8160 --- [           main] ationConfigEmbeddedWebApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration': Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [javax.sql.DataSource] is defined: expected single matching bean but found 2: datasource1,datasource2\n\n\uff08\u4e2d\u7565\uff09\n\nConsider marking one of the beans as @Primary, updating the consumer to accept multiple beans, or using @Qualifier to identify the bean that should be consumed\n```\n\n\u3082\u3061\u308d\u3093\u3069\u3063\u3061\u304b\u306bPrimary\u3064\u3051\u308c\u3070\u30a8\u30e9\u30fc\u306f\u7121\u304f\u306a\u308a\u307e\u3059\u304c\u3001\u305d\u308c\u3067\u306f\u52d5\u7684\u5909\u66f4\u306b\u306a\u308a\u307e\u305b\u3093\u306e\u3067\u3001\u52d5\u7684\u306b\u5909\u66f4\u3057\u3066\u304f\u308c\u308b\u8a2d\u5b9a\u3092\u4f5c\u308a\u3001\u305d\u3061\u3089\u3092Primary\u306b\u3057\u307e\u3059\u3002\n\n```config:DatasourceConfig\n@Component\n@Configuration\npublic class DatasourceConfig {\n    \n//\t@Bean\n\tpublic DataSource datasource1(){\n\t\tDataSource ds = new org.apache.tomcat.jdbc.pool.DataSource();\n\t\tds.setDriverClassName(\"com.mysql.jdbc.Driver\");\n\t\tds.setUrl(\"jdbc:mysql://localhost:3306/sample01\");\n\t\tds.setUsername(\"user01\");\n\t\tds.setPassword(\"pass\");\n\t\treturn ds;\n\t}\n\n//\t@Bean\n\tpublic DataSource datasource2(){\n\t\tDataSource ds = new org.apache.tomcat.jdbc.pool.DataSource();\n\t\tds.setDriverClassName(\"com.mysql.jdbc.Driver\");\n\t\tds.setUrl(\"jdbc:mysql://localhost:3306/sample02\");\n\t\tds.setUsername(\"user02\");\n\t\tds.setPassword(\"pass\");\n\t\treturn ds;\n\t}\n\n    @Bean\n//    @Primary\n    public DynamicRoutingDataSourceResolver dataSource() {\n        DynamicRoutingDataSourceResolver resolver = new DynamicRoutingDataSourceResolver();\n\n        Map<Object, Object> dataSources = new HashMap<Object,Object>();\n        dataSources.put(\"datasource1\", datasource1());\n        dataSources.put(\"datasource2\", datasource2());\n\n        resolver.setTargetDataSources(dataSources);\n        \n        // default datasource\n        resolver.setDefaultTargetDataSource(datasource1());\n\n        return resolver;\n    }\n}\n```\n\n\u3068\u601d\u3063\u305f\u3089\u4eca1.4.1\u3067\u3084\u308b\u3068\uff08\uff1f\uff09@Bean\u3092\uff11\u3064\u306b\u3057\u306a\u3044\u3068\u3046\u307e\u304f\u52d5\u304b\u306a\u304b\u3063\u305f\u3067\u3059\u306d\u3002\u3046\u30fc\u3080\u3002\n\u3042\u3068\u3001\u79c1\u306e\u74b0\u5883\u3067\u306f\uff08\uff1f\uff09`resolver.setDefaultTargetDataSource`\u3092\u6307\u5b9a\u3057\u3066\u3042\u3052\u306a\u3044\u3068\u3046\u307e\u304f\u52d5\u3044\u3066\u304f\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u7a81\u7136\u51fa\u3066\u304d\u305f`DynamicRoutingDataSourceResolver`\u3055\u3093\u306f\u6b21\u3067\u8a73\u3057\u304f\u3002\n\n\n##2.2.DynamicRoutingDataSourceResolver\n\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3092\u4f7f\u7528\u3059\u308b\u524d\u306b\u52d5\u7684\u306b\u3069\u306e\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3092\u4f7f\u7528\u3059\u308b\u304b\u89e3\u6c7a\u3057\u3066\u3042\u3052\u308bSpring\u306e\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002\n`AbstractRoutingDataSource`\u3092\u7d99\u627f\u3057\u3066\u4f5c\u308b`DynamicRoutingDataSourceResolver`\u304c\u305d\u308c\u306b\u5f53\u305f\u308a\u307e\u3059\u3002\n\u3082\u3061\u308d\u3093\u7d99\u627f\u3055\u3048\u3057\u3066\u308c\u3070\u540d\u524d\u306f\u306a\u3093\u3067\u3082\u3044\u3044\u306e\u3067\u3059\u304c\u3002\n\n```resolver:DynamicRoutingDataSourceResolver\nimport org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;\n\npublic class DynamicRoutingDataSourceResolver extends AbstractRoutingDataSource {\n\n    @Override\n    protected Object determineCurrentLookupKey() {\n        if (SchemaContextHolder.getSchemaType() == null) {\n        \t// \u30c7\u30d5\u30a9\u30eb\u30c8\n            return \"datasource1\";\n\n        } else if(SchemaContextHolder.getSchemaType() == SchemaType.DATA1) {\n            return \"datasource1\";\n\n        } else if(SchemaContextHolder.getSchemaType() == SchemaType.DATA2) {\n            return \"datasource2\";\n\n        }else{\n        \t// \u30c7\u30d5\u30a9\u30eb\u30c8\n            return \"datasource1\";\n        }\n    }\n\n}\n```\n\n\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3059\u308b\u524d\u306b\u3053\u306e`determineCurrentLookupKey`\u304c\u547c\u3070\u308c\u3066\u3069\u306e\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3092\u4f7f\u3046\u304b\u3092\u90fd\u5ea6\u6c7a\u5b9a\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u8fd4\u3059\u306e\u306f\u30ad\u30fc\u6587\u5b57\u5217\u3060\u3051\u306a\u306e\u3067\u3001\u5148\u307b\u3069`DatasourceConfig`\u3067`setTargetDataSources`\u306b\u6e21\u3057\u305fHashMap\u306e\u30ad\u30fc\u3068\u5bfe\u5fdc\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u3055\u3089\u306b\u3053\u3053\u3067\u767b\u5834\u3057\u3066\u3044\u308bSchemaContextHolder\u306b\u3064\u3044\u3066\u306f\u6b21\u3002\n\n##2.3.SchemaContextHolder\n\u3053\u308c\u306fPOJO\u306a\u306e\u3067\u5fc5\u305a\u3057\u3082\u3053\u306e\u5f62\u3067\u306a\u304f\u3066\u3082\u3044\u3044\u306e\u3067\u3059\u304c\u3001`ThreadLocal`\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u304c\u91cd\u8981\u3067\u3059\u3002\nWebServer\u306a\u306e\u3067\u8ab0\u304b\u304c\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u5909\u3048\u305f\u3089\u307f\u3093\u306a\u305d\u3063\u3061\u306b\u63a5\u7d9a\u306b\u3044\u304f\u3001\u306a\u3093\u3066\u3053\u3068\u304c\u3042\u3063\u305f\u3089\u56f0\u308a\u307e\u3059\u306e\u3067\u3002\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u4e2d\u8eab\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\n```holder:SchemaContextHolder\npublic class SchemaContextHolder {\n    private static ThreadLocal<SchemaType> contextHolder = new ThreadLocal<SchemaType>();\n    \n    public static void setSchemaType(SchemaType datasourcename) {\n        Assert.notNull(datasourcename, \"Schema type cannot be null.\");\n        contextHolder.set(datasourcename);\n    }\n\n    public static SchemaType getSchemaType() {\n        return contextHolder.get();\n    }\n\n    public static void clear() {\n        contextHolder.remove();\n    }\n}\n```\n\u3053\u3053\u3067\u306f\uff08\u3068\u3044\u3046\u304b\u3069\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u898b\u3066\u3082\uff09SchemaType\u3068\u3044\u3046Enum\u3092\u4f5c\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u5225\u306bString\u3067\u3082\u3061\u3083\u3093\u3068\u52d5\u304d\u307e\u3059\u3002\n\n\u4e00\u5fdcSchemaType\u306e\u4e2d\u8eab\u3002\n\n```type:SchemaType\npublic enum SchemaType {\n\tDATA1,\n\tDATA2\n}\n```\n\n\u5f8c\u306f\u4f7f\u3046\u3068\u304d\u306b\u30b9\u30ad\u30fc\u30de\u3092\u5207\u308a\u66ff\u3048\u3066\u3042\u3052\u308c\u3070OK\u3002\n\n``` :controller\n\t@GetMapping(\"findall\")\n\tpublic List<User> findall(@RequestParam(\"ds\") String ds){\n\t\tif(ds.equals(\"ds1\")){\n\t\t\tSchemaContextHolder.setSchemaType(SchemaType.DATA1);\n\t\t}else{\n\t\t\tSchemaContextHolder.setSchemaType(SchemaType.DATA2);\n\t\t}\n\t\treturn userService.findAll();\n\t}\n```\n\n\u3053\u308c\u3067\u5b9f\u884c\u3059\u308b\u3068\n`http://localhost:8080/user/findall?ds=ds1`\u306e\u7d50\u679c\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\n```result:ds1\n[{\"name\":\"\u30ad\u30e3\u30e9\",\"age\":21},\n{\"name\":\"\u4e38\u5c71\",\"age\":33},\n{\"name\":\"\u4e80\u5ca1\",\"age\":19},\n{\"name\":\"\u5009\u54e1\",\"age\":28},\n{\"name\":\"\u672c\u4e26\",\"age\":41},\n{\"name\":\"\u6797\",\"age\":26},\n{\"name\":\"\u9f4b\u85e4\",\"age\":15}]\n```\n\u203b\u30c7\u30fc\u30bf\u306f\u9069\u5f53\u3067\u3059\u3002\uff08\u7279\u306b\u5e74\u9f62\uff01\uff01\uff01\uff09\n\n`http://localhost:8080/user/findall?ds=ds2`\u306e\u7d50\u679c\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\n```result:ds2\n[{\"name\":\"\u30b5\u30e9\",\"age\":26},\n{\"name\":\"\u4e0a\u91ce\",\"age\":15},\n{\"name\":\"\u58fa\u4e95\",\"age\":22},\n{\"name\":\"\u5df4\u6708\",\"age\":28},\n{\"name\":\"\u6210\u5bae\",\"age\":18},\n{\"name\":\"\u79cb\u8449\",\"age\":19},\n{\"name\":\"\u864e\u5c3e\",\"age\":20}]\n```\n\u203b\u30c7\u30fc\u30bf\u306f\u9069\u5f53\u3067\u3059\u3002\uff08\u7279\u306b\u5e74\u9f62\uff01\uff01\uff01\uff01\uff01\uff01\uff09\n\n\u3055\u3066\u307e\u3042\u3001\u3053\u3053\u307e\u3067\u3067\u3082\u304a\u3057\u307e\u3044\u306a\u306e\u3067\u3059\u304c\u3001\u3082\u3046\u3061\u3087\u3063\u3068\u624b\u3092\u5165\u308c\u3066\u3044\u304d\u307e\u3059\u3002\n\n#3.\u63a5\u7d9a\u5148\u3092application.yml\u3067\u7ba1\u7406\n\u63a5\u7d9a\u5148\u304c\u30aa\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306a\u3093\u3066\u304a\u3057\u3083\u308c\u3058\u3083\u306a\u3044\u306e\u3067appliation.yml\u3067\u7ba1\u7406\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002\n\u5171\u901a\u306e\u8a2d\u5b9a\u306f\u4f55\u5ea6\u3082\u66f8\u304b\u306a\u304f\u3066\u3044\u3044\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002\n\n```yml:application.yml\n# Datasource BaseSetting\nmy.datasource.abstract:\n    driverClassName: com.mysql.jdbc.Driver\n    sqlScriptEncoding: UTF-8\n    # pooling\n    maxActive: 15\n    maxIdle: 10\n    minIdle: 5\n    initialSize: 2\n    # Re-connect\n    validationQuery: SELECT 1 FROM DUAL\n    testOnBorrow: true\n    testWhileIdle: true\n    timeBetweenEvictionRunsMillis: 600000\n    minEvictableIdleTimeMillis: 600000\n# datasource1\ndatasource.data1:\n    url: jdbc:mysql://localhost:3306/sample01\n    username: user01\n    password: pass\n# datasource2\ndatasource.data2:\n    url: jdbc:mysql://localhost:3306/sample02\n    username: user02\n    password: pass\n```\n\n\u3067\u3001\u3053\u3044\u3064\u3092\u8aad\u307f\u53d6\u308b\u305f\u3081\u306e\u30af\u30e9\u30b9\u3092\uff13\u3064\u4f5c\u308a\u307e\u3059\u3002\n\n```base:DatasourceBaseProperties(\u5171\u901a\u8a2d\u5b9a)\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.stereotype.Component;\n\nimport lombok.Data;\n\n@Data\n@Component\n@ConfigurationProperties(\"my.datasource.abstract\")\npublic class DatasourceBaseProperties {\n\tprivate String driverClassName;\n\tprivate String SqlScriptEncoding;\n\tprivate Integer maxActive;\n\tprivate Integer maxIdle;\n\tprivate Integer minIdle;\n\tprivate Integer initialSize;\n\tprivate String validationQuery;\n\tprivate Boolean testOnBorrow;\n\tprivate Boolean testWhileIdle;\n\tprivate Integer timeBetweenEvictionRunsMillis;\n\tprivate Integer minEvictableIdleTimeMillis;\n}\n```\n\n```data1:DataSourceProperties01\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.stereotype.Component;\n\nimport lombok.Data;\n\n@Data\n@Component\n@ConfigurationProperties(\"datasource.data1\")\npublic class DatasourceProperties01 {\n\tprivate String url;\n\tprivate String username;\n\tprivate String password;\n}\n```\n\n```data1:DataSourceProperties02\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.stereotype.Component;\n\nimport lombok.Data;\n\n@Data\n@Component\n@ConfigurationProperties(\"datasource.data2\")\npublic class DatasourceProperties02 {\n\tprivate String url;\n\tprivate String username;\n\tprivate String password;\n}\n```\n\n@Component\u3092\u3064\u3051\u308b\u3068SpringBoot\u306e\u8d77\u52d5\u6642\u306b\u8a2d\u5b9a\u30b9\u30ad\u30e3\u30f3\u306e\u5bfe\u8c61\u306b\u306a\u308a\u307e\u3059\u3002\n@ConfigurationProperties\u3092\u3064\u3051\u308b\u3068\u305d\u306e\u5024\uff0b\u5909\u6570\u540d\u3068\u540c\u540d\u306eapplication.yml\u306e\u8a2d\u5b9a\u304c\u53cd\u6620\u3055\u308c\u307e\u3059\u3002\n\n\u3064\u307e\u308aDatasourceConfig\u306f\u3053\u3046\u5909\u308f\u308b\u308f\u3051\u3067\u3059\u3002\n\uff08\u305d\u308c\u306b\u3057\u3066\u3082source\u306e\"s\"\u304c\u5927\u6587\u5b57\u3060\u3063\u305f\u308a\u5c0f\u6587\u5b57\u3060\u3063\u305f\u308a\u7d71\u4e00\u611f\u306a\u3044\u306a\u30fb\u30fb\u30fb\uff09\n\n```config:DatasourceConfig\npublic class DatasourceConfig {\n\t@Autowired\n\tDatasourceBaseProperties datasourceBase;\n\t\n\t@Autowired\n\tDatasourceProperties01 datasourceP01;\n\t\n\t@Autowired\n\tDatasourceProperties02 datasourceP02;\n    \n//\t@Bean\n\tpublic DataSource datasource1(){\n\t\tDataSource ds = new org.apache.tomcat.jdbc.pool.DataSource();\n\t\tds.setDriverClassName(this.datasourceBase.getDriverClassName());\n\t\tds.setUrl(this.datasourceP01.getUrl());\n\t\tds.setUsername(this.datasourceP01.getUsername());\n\t\tds.setPassword(this.datasourceP01.getPassword());\n\t\treturn ds;\n\t}\n\n//\t@Bean\n\tpublic DataSource datasource2(){\n\t\tDataSource ds = new org.apache.tomcat.jdbc.pool.DataSource();\n\t\tds.setDriverClassName(this.datasourceBase.getDriverClassName());\n\t\tds.setUrl(this.datasourceP02.getUrl());\n\t\tds.setUsername(this.datasourceP02.getUsername());\n\t\tds.setPassword(this.datasourceP02.getPassword());\n\t\treturn ds;\n\t}\n\n\uff08\u4ee5\u4e0b\u7565\uff09\n```\n\n\u7d50\u679c\u306f\u5909\u308f\u3089\u306a\u3044\u306e\u3067\u7701\u7565\uff01\n\u3082\u3061\u308d\u3093\u300cOracle\u3067DB\u304c\uff11\u500b\u3067\u30b9\u30ad\u30fc\u30de\u304c\u9055\u3046\u3060\u3051\u3060\u304b\u3089url\u3082\u4e00\u7dd2\u3067\u3044\u3044\u3093\u3058\u3083\u3088\u300d\u3068\u3044\u3046\u5834\u5408\u306furl\u3092\u5171\u901a\u306b\u307e\u308f\u305b\u3070OK\u3002\n\u3081\u3067\u305f\u3057\u3081\u3067\u305f\u3057\u3002\n\n\n#4.\u30af\u30e9\u30b9\u3092\u3059\u3063\u304d\u308a\u3055\u305b\u3088\u3046\n\u540c\u3058\u8a18\u8ff0\u304c\u4f55\u56de\u3082\u51fa\u3066\u304f\u308b\u306e\u3063\u3066\u6c17\u6301\u3061\u60aa\u3044\u3067\u3059\u3088\u306d\uff01\n\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u3063\u304d\u308a\u3055\u305b\u307e\u3059\u3002\n\n\u30fbDatasourceProperties01\u3068DatasourceProperties02\u306e\u5171\u901a\u9805\u76ee\u3092\u629c\u304d\u51fa\u3059\u305f\u3081\u306b\u57fa\u5e95\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\n\u30fbapplication.yml\u306e\u8a2d\u5b9a\u3092\u53d6\u5f97\u3059\u308b\u30af\u30e9\u30b9\u3068DatasourceProperties01\u304c\u5225\u306a\u306e\u304c\u3082\u3084\u3063\u3068\u3059\u308b\u306e\u3067\u4e00\u7dd2\u306b\u3057\u3066\u3057\u307e\u3046\u3002\n\u30fb\u3042\u308c\uff1f\u3058\u3083\u3042DatasourceConfig\u3082\u3082\u3063\u3068\u3059\u3063\u304d\u308a\u3059\u308b\u3093\u3058\u3083\u306d\uff1f\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\n```ab:AbstractDatasourceProperties\n@Data\npublic class AbstractDatasourceProperties {\n\n\t@Autowired\n\tDatasourceBaseProperties dataSourceProperties;\n\t\n\tprotected String url;\n\tprotected String username;\n\tprotected String password;\n\n    @Bean\n\tpublic DataSource createDataSourceBean(){\n        DataSource ds = new org.apache.tomcat.jdbc.pool.DataSource();\n        ds.setDriverClassName(this.dataSourceProperties.getDriverClassName());\n        \n        ds.setMaxActive(this.dataSourceProperties.getMaxActive());\n        ds.setMaxIdle(this.dataSourceProperties.getMaxIdle());\n        ds.setMinIdle(this.dataSourceProperties.getMinIdle());\n        ds.setInitialSize(this.dataSourceProperties.getInitialSize());\n        \n        ds.setValidationQuery(this.dataSourceProperties.getValidationQuery());\n        ds.setTestOnBorrow(this.dataSourceProperties.getTestOnBorrow());\n        ds.setTestWhileIdle(this.dataSourceProperties.getTestWhileIdle());\n        ds.setTimeBetweenEvictionRunsMillis(this.dataSourceProperties.getTimeBetweenEvictionRunsMillis());\n        ds.setMinEvictableIdleTimeMillis(this.dataSourceProperties.getMinEvictableIdleTimeMillis());\n        \n        ds.setUrl(this.getUrl());\n        ds.setUsername(this.getUsername());\n        ds.setPassword(this.getPassword());\n        return ds;\n\t}\n}\n```\n\n```ds1:DatasourceProperties01\n@Component\n@ConfigurationProperties(\"datasource.data1\")\npublic class DatasourceProperties01 extends AbstractDatasourceProperties {\n    // has no methods...\n}\n```\n(02\u3082\u540c\u3058\u306a\u306e\u3067\u7701\u7565\uff09\n\n```config:DatasourceConfig\n@Component\n@Configuration\npublic class DatasourceConfig {\n\t@Autowired\n\tDatasourceBaseProperties datasourceBase;\n\t\n\t@Autowired\n\tDatasourceProperties01 datasourceP01;\n\t\n\t@Autowired\n\tDatasourceProperties02 datasourceP02;\n    \n\n    @Bean\n    @Primary\n    public DynamicRoutingDataSourceResolver dataSource() {\n        DynamicRoutingDataSourceResolver resolver = new DynamicRoutingDataSourceResolver();\n\n        Map<Object, Object> dataSources = new HashMap<Object,Object>();\n        dataSources.put(\"datasource1\", datasourceP01.createDataSourceBean());\n        dataSources.put(\"datasource2\", datasourceP02.createDataSourceBean());\n\n        resolver.setTargetDataSources(dataSources);\n        \n        // default datasource\n        resolver.setDefaultTargetDataSource(datasourceP01.createDataSourceBean());\n\n        return resolver;\n    }\n}\n```\n\n\uff08DatasourceBaseProperties\u306f\u5909\u66f4\u306a\u3057\uff09\n\n\u7d50\u679c\u3082\u4f7f\u3044\u65b9\u3082\u5909\u308f\u3089\u305a\u3067\u3059\u306d\u3002\n\u3081\u3067\u305f\u3057\u3081\u3067\u305f\u3057\u3002\n\n\n#5.\u30a4\u30f3\u30bf\u30fc\u30bb\u30d7\u30bf\u3067\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3092\u5207\u308a\u66ff\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\u4eba\u3084\u6a29\u9650\u3084\u8a2d\u5b9a\u306b\u3088\u3063\u3066\u4f7f\u7528\u3059\u308b\u30b9\u30ad\u30fc\u30de\uff08\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\uff09\u3092\u5207\u308a\u66ff\u3048\u308b\u3002\u3069\u306e\u30c6\u30fc\u30d6\u30eb\u3082\u4e00\u7dd2\u3002\n\u3063\u3066\u3044\u3046\u3053\u3068\u306f\u3064\u307e\u308a\u3001\u51e6\u7406\u306b\u3088\u3063\u3066\u898b\u308b\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u304c\u5909\u308f\u308b\u306a\u3093\u3066\u3053\u3068\u304c\u3042\u308b\u3068\u307e\u305a\u3044\u3002\n\u3082\u3057\u300c\u3042\u308c\uff1f\u3053\u3053\u306e\u51e6\u7406\u3060\u3051\u3044\u3064\u3082user01\u306eDB\u898b\u3066\u306d\uff1f\u300d\u306a\u3093\u3066\u30d0\u30b0\u304c\u898b\u3064\u304b\u3063\u305f\u3089\u4e0d\u6bdb\u306a\u6a2a\u5c55\u958b\u796d\u308a\u306e\u59cb\u307e\u308a\u3067\u3059\u3002\n\u3088\u304f\u308f\u304b\u3063\u3066\u306a\u3044\u4eba\u304c\u6a5f\u80fd\u8ffd\u52a0\u3084\u4fee\u6b63\u3057\u305f\u3089\u58ca\u308c\u308b\u3053\u3068\u9593\u9055\u3044\u306a\u3057\u3002\n\u5171\u901a\u51e6\u7406\u4f5c\u3063\u305f\u3063\u3066\u305d\u306e\u51e6\u7406\u547c\u3073\u51fa\u3057\u5fd8\u308c\u3066\u308b\u306a\u3093\u3066\u3053\u3068\u306f\u5f53\u7136\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\n\u5371\u967a\u306a\u3053\u3068\u3053\u306e\u4e0a\u306a\u3044\u306e\u3067\u3053\u3093\u306a\u3082\u306e\u30a4\u30f3\u30bf\u30fc\u30bb\u30d7\u30bf\u3067\u3084\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002\u500b\u3005\u306e\u51e6\u7406\u3067\u5207\u308a\u66ff\u3048\u308b\u306a\u3093\u3066\u3084\u3081\u3084\u3081\uff01\n\n##5.1.\u30a4\u30f3\u30bf\u30fc\u30bb\u30d7\u30bf\u4f5c\u6210\n\n```interceptor:DatasourceInterceptor\npublic class DatasourceInterceptor extends HandlerInterceptorAdapter {\n\n\t@Override\n\tpublic boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)\n\t\t\tthrows Exception {\n\t\tif(!StringUtils.isEmpty(request.getSession().getAttribute(\"datasource\"))){\n\t\t\tSchemaContextHolder.setSchemaType((SchemaType)request.getSession().getAttribute(\"datasource\"));\n\t\t}\n\t\treturn true;\n\t}\n}\n```\n\u30a4\u30f3\u30bf\u30fc\u30bb\u30d7\u30bf\u3092\u4f5c\u308b\u306b\u306f`HandlerInterceptorAdapter`\u3092\u7d99\u627f\u3059\u308c\u3070OK\u3002\n\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u306e\u8a2d\u5b9a\u306f\u30bb\u30c3\u30b7\u30e7\u30f3\u60c5\u5831\u306b\u6301\u3064\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u3069\u3046\u3067\u3082\u3044\u3044\u3051\u3069\u30a4\u30f3\u30bf\u30fc\u30bb\u30d7\u30bf\u306b\u95a2\u3059\u308b\u82f1\u8a9e\u30b5\u30a4\u30c8\u3092\u81ea\u52d5\u7ffb\u8a33\u3059\u308b\u3068\u3053\u3068\u3054\u3068\u304f\u300c\u8fce\u6483\u6226\u95d8\u6a5f\u300d\u306b\u7ffb\u8a33\u3057\u3066\u304f\u308c\u308b\u306e\u9762\u767d\u3059\u304e\u3067\u3059\u3088\u306d\u3002\u5408\u3063\u3066\u308b\u3051\u3069\u3002\n\n##5.2.\u30a4\u30f3\u30bf\u30fc\u30bb\u30d7\u30bf\u767b\u9332\n\u4f5c\u6210\u3057\u305f\u30a4\u30f3\u30bf\u30fc\u30bb\u30d7\u30bf\u3092\u4f7f\u3046\u3088\u3046\u306bConfig\u30af\u30e9\u30b9\u306b\u8ffd\u8a18\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u5148\u307b\u3069\u4f5c\u3063\u305fDatasourceConfig\u306b\u8ffd\u8a18\u3057\u307e\u3057\u3087\u3046\u3002\n\n```config:DatasourceConfig\uff08\u8ffd\u8a18\u306e\u307f\uff09\n    @Bean\n    public HandlerInterceptor datasourceInterceptor(){\n    \treturn new com.example.interceptor.DatasourceInterceptor();\n    }\n    \n    @Bean\n    public MappedInterceptor interceptorMapping(){\n    \treturn new MappedInterceptor(new String[]{\"/**\"}, datasourceInterceptor());\n    }\n```\n\nMappedInterceptor\u3067\u306f\u30a4\u30f3\u30bf\u30fc\u30bb\u30d7\u30bf\u3092\u9069\u7528\u3059\u308bURL\u3001\u9069\u7528\u9664\u5916\u3059\u308bURL\u304c\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\n\u4eca\u56de\u306f\u5168\u90e8\u5bfe\u8c61\u306b\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n##5.3.\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u5207\u308a\u66ff\u3048\u7528\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\n\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u3064\u3044\u3067\u306b\u3002\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\n```controller:DatasourceSettingController\n@RestController\n@RequestMapping(\"datasource/\")\npublic class DatasourceSettingController {\n\n\t@RequestMapping(\"set\")\n\tpublic String setDatasource(HttpServletRequest request, @RequestParam(\"ds\") String ds){\n\t\tSchemaType type;\n\t\tswitch(ds){\n\t\tcase \"ds1\":\n\t\t\ttype = SchemaType.DATA1;\n\t\t\tbreak;\n\t\tcase \"ds2\":\n\t\t\ttype = SchemaType.DATA2;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\ttype = SchemaType.DATA1;\n\t\t}\n\t\t\n\t\trequest.getSession().setAttribute(\"datasource\", type);\n\t\t\n\t\treturn \"OK\";\n\t}\n}\n```\n\n\u3082\u3061\u308d\u3093\u53c2\u7167\u3059\u308b\u306e\u65b9\u306e\u5207\u308a\u66ff\u3048\u51e6\u7406\u306f\u6d88\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```user:controller\n\t@GetMapping(\"findall\")\n\tpublic List<User> findall(){\n\t\treturn userService.findAll();\n\t}\n```\n\n\u3053\u308c\u3067`http://localhost:8080/datasource/set?ds=ds2`\u3092\u53e9\u3044\u3066\u304b\u3089`findall`\u3059\u308b\u3068\u7d50\u679c\u304c\u5909\u308f\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u3081\u3067\u305f\u3057\u3081\u3067\u305f\u3057\uff01\uff01\uff01\uff01\n\n\n#\u4eca\u56de\u306e\u30bd\u30fc\u30b9\nGitHub\u306b\u7f6e\u304d\u307e\u3057\u305f\u3002\nhttps://github.com/syukai/SpringbootMultiDatasourceSample\n\uff11\uff5e\uff15\u306e\u305d\u308c\u305e\u308c\u3067commit\u5207\u3063\u3066\u308b\u306e\u3067\u53c2\u8003\u307e\u3067\u306b\u3002\n\n\n#\u53c2\u8003\u30b5\u30a4\u30c8\n\u25cfSpring Blog - Dynamic DataSource Routing\nhttp://spring.io/blog/2007/01/23/dynamic-datasource-routing/\n\u21d2\u3053\u308c\u304c\u3059\u3079\u3066\u3068\u3044\u3048\u3070\u3059\u3079\u3066\u306a\u306e\u3067\u3059\u304c\u3001SpringBoot\u306a\u3093\u3067Bean\u306e\u66f8\u304d\u65b9\u304c\u9055\u3046\u3068\u304b\u3001application.yml\u3068\u306e\u3064\u306a\u304c\u308a\u3068\u304b\u8272\u3005\u3068\u66f8\u304d\u305f\u304b\u3063\u305f\u306e\u3067\u3002\n\n\u25cfm-namiki\u306e\u65e5\u8a18 \u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u306e\u52d5\u7684\u5207\u308a\u66ff\u3048\nhttp://m-namiki.hatenablog.jp/entries/2011/11/24\n\u21d2\u5927\u5909\u53c2\u8003\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u305f\u3076\u3093\u30b0\u30b0\u3063\u3066\u6700\u521d\u306b\u3044\u304d\u3064\u304f\u306e\u306f\u3053\u3053\u3067\u3059\u3088\u306d\u3002\n\n\u25cfAlexander Fedulov - Dynamic DataSource Routing with Spring @Transactional\nhttp://fedulov.website/2015/10/14/dynamic-datasource-routing-with-spring/\n\n", "tags": ["spring-boot1.4"]}