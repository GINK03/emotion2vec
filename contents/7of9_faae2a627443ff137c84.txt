{"context": "\u95a2\u9023 http://qiita.com/7of9/items/c5e39a8c08ca7a6e5af6\n\u95a2\u9023 http://qiita.com/7of9/items/3491b41f3b18a393e2cf\n\nv0.4\nGPIO\u5165\u529b\u5024\u3092UDP\u901a\u4fe1\u3067\u8fd4\u3059\u3088\u3046\u306b\u3057\u305f\u3002\nv0.4 @ github\n\nfootInputl.py\n#!/usr/bin/env python\n\n'''\nv0.4 2016 Apr 24\n  - add UDP_procCommand()\nv0.3 2016 Apr 23\n  - add UDP_recvData()\n  - add UDP_setup()\n  - add GPIO_setup()\nv0.2 2016 Apr 23\n  - define main()\n  - change interval to 10 msec base for UDP comm\nv0.1 2016 Apr 23\n  - can check 5 GPIO input\n'''\n\nimport RPi.GPIO as GPIO\nimport socket\nimport time\nimport os\n\nins = [40, 38, 36, 32, 26]\nvals = range(5)\n\ndef GPIO_setup():\n    GPIO.setmode(GPIO.BOARD)\n    for idx in range(5):\n        GPIO.setup(ins[idx], GPIO.IN, pull_up_down=GPIO.PUD_UP)\n\ndef UDP_setup():\n    # incoming data string port\n    datip=\"\" # INADDR_ANY\n    datport = 7002\n    datsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    datsock.bind((datip, datport))\n    datsock.setblocking(0)\n    return datsock\n\ndef UDP_recvData(datsock, rcvdat):\n    address = \"\"\n    try:\n    data,address = datsock.recvfrom(100)\n    except socket.error:\n    pass\n    else:\n    rcvdat = rcvdat + data\n    return rcvdat, True, address\n    return rcvdat, False, address\n\ndef UDP_procCommand(rcvdat, datsock, rcvadr):\n    if \"foot\" not in rcvdat:\n        return\n\n    ret = \"foot\"\n    for idx in range(5):\n        if vals[idx]==GPIO.HIGH:\n            ret = ret + \",1\"\n        else:\n            ret = ret + \",0\"\n    ret = ret + \"\\n\"            \n    datsock.sendto(ret, rcvadr)\n\n\ndef main():\n    GPIO_setup()\n    datsock = UDP_setup()\n\n    cnt=0\n    rcvdat = \"\"\n\n    while True:\n        cnt=cnt+1\n        rcvdat,rcvd,rcvadr = UDP_recvData(datsock, rcvdat)\n        time.sleep(0.01)\n\n        if rcvd == True and \"\\n\" in rcvdat:\n            UDP_procCommand(rcvdat, datsock, rcvadr)\n            rcvdat = \"\"\n\n        if cnt < 30: # 300msec\n            continue\n        cnt=0\n\n        for idx in range(5):\n            vals[idx]=GPIO.input(ins[idx])\n            print vals[idx],\n        print\n\nif __name__ == '__main__':\n    main()\n\n\n\n\u901a\u4fe1\u30d7\u30ed\u30c8\u30b3\u30eb\nUDP\u901a\u4fe1\u306f\u4ee5\u4e0b\u3068\u3057\u305f\n\n\u30dd\u30fc\u30c8: 7002\n\n\n\u9001\u4fe1\u8005\nfoot<LF>\n\n\n\nRPi\nfoot,1,0,0,1,1<LF>\n\n\n\n\u5b9f\u884c\u4f8b\nRPi\u5074\u3067\u4ee5\u4e0b\u3068\u3057\u3066\u304a\u304f\n\nRPi\n$ sudo python footInput.py\n\n\n\n\u4f8b\u3068\u3057\u3066Mac OS X \u304b\u3089\u306e\u30b3\u30de\u30f3\u30c9\u9001\u4fe1\n$ echo \"foot\" | nc -u 192.168.10.6 7002\nfoot,1,0,0,1,1\n\n\ncode v0.6\n\u8db3\u3067\u8e0f\u3093\u3067\u304b\u3089\u306e\u5fdc\u7b54\u6027\u3092\u6539\u826f\u3059\u308b\u305f\u3081IO\u53d6\u308a\u8fbc\u307f\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3092300msec\u304b\u3089100msec\u306b\u901f\u3081\u305f\u3002\nv0.6 @ github\n\u95a2\u9023 http://qiita.com/7of9/items/c5e39a8c08ca7a6e5af6\n\u95a2\u9023 http://qiita.com/7of9/items/3491b41f3b18a393e2cf\n\n## v0.4\n\nGPIO\u5165\u529b\u5024\u3092UDP\u901a\u4fe1\u3067\u8fd4\u3059\u3088\u3046\u306b\u3057\u305f\u3002\n\n[v0.4 @ github](https://github.com/yasokada/python-160423_footInput/releases/tag/v0.4)\n\n\n```footInputl.py\n#!/usr/bin/env python\n\n'''\nv0.4 2016 Apr 24\n  - add UDP_procCommand()\nv0.3 2016 Apr 23\n  - add UDP_recvData()\n  - add UDP_setup()\n  - add GPIO_setup()\nv0.2 2016 Apr 23\n  - define main()\n  - change interval to 10 msec base for UDP comm\nv0.1 2016 Apr 23\n  - can check 5 GPIO input\n'''\n\nimport RPi.GPIO as GPIO\nimport socket\nimport time\nimport os\n\nins = [40, 38, 36, 32, 26]\nvals = range(5)\n\ndef GPIO_setup():\n    GPIO.setmode(GPIO.BOARD)\n    for idx in range(5):\n        GPIO.setup(ins[idx], GPIO.IN, pull_up_down=GPIO.PUD_UP)\n\ndef UDP_setup():\n    # incoming data string port\n    datip=\"\" # INADDR_ANY\n    datport = 7002\n    datsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    datsock.bind((datip, datport))\n    datsock.setblocking(0)\n    return datsock\n\ndef UDP_recvData(datsock, rcvdat):\n    address = \"\"\n    try:\n\tdata,address = datsock.recvfrom(100)\n    except socket.error:\n\tpass\n    else:\n\trcvdat = rcvdat + data\n\treturn rcvdat, True, address\n    return rcvdat, False, address\n\ndef UDP_procCommand(rcvdat, datsock, rcvadr):\n    if \"foot\" not in rcvdat:\n        return\n    \n    ret = \"foot\"\n    for idx in range(5):\n        if vals[idx]==GPIO.HIGH:\n            ret = ret + \",1\"\n        else:\n            ret = ret + \",0\"\n    ret = ret + \"\\n\"            \n    datsock.sendto(ret, rcvadr)\n    \n\ndef main():\n    GPIO_setup()\n    datsock = UDP_setup()\n    \n    cnt=0\n    rcvdat = \"\"\n\n    while True:\n        cnt=cnt+1\n        rcvdat,rcvd,rcvadr = UDP_recvData(datsock, rcvdat)\n        time.sleep(0.01)\n\n        if rcvd == True and \"\\n\" in rcvdat:\n            UDP_procCommand(rcvdat, datsock, rcvadr)\n            rcvdat = \"\"\n\n        if cnt < 30: # 300msec\n            continue\n        cnt=0\n\n        for idx in range(5):\n            vals[idx]=GPIO.input(ins[idx])\n            print vals[idx],\n        print\n\nif __name__ == '__main__':\n    main()\n```\n\n## \u901a\u4fe1\u30d7\u30ed\u30c8\u30b3\u30eb\n\nUDP\u901a\u4fe1\u306f\u4ee5\u4e0b\u3068\u3057\u305f\n\n- \u30dd\u30fc\u30c8: 7002\n\n```txt:\u9001\u4fe1\u8005\nfoot<LF>\n```\n\n```txt:RPi\nfoot,1,0,0,1,1<LF>\n```\n\n## \u5b9f\u884c\u4f8b\n\nRPi\u5074\u3067\u4ee5\u4e0b\u3068\u3057\u3066\u304a\u304f\n\n```txt:RPi\n$ sudo python footInput.py\n\n```\n\n\u4f8b\u3068\u3057\u3066Mac OS X \u304b\u3089\u306e\u30b3\u30de\u30f3\u30c9\u9001\u4fe1\n\n```txt:\n$ echo \"foot\" | nc -u 192.168.10.6 7002\nfoot,1,0,0,1,1\n```\n\n\n## code v0.6\n\n\u8db3\u3067\u8e0f\u3093\u3067\u304b\u3089\u306e\u5fdc\u7b54\u6027\u3092\u6539\u826f\u3059\u308b\u305f\u3081IO\u53d6\u308a\u8fbc\u307f\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3092300msec\u304b\u3089100msec\u306b\u901f\u3081\u305f\u3002\n\n[v0.6 @ github](https://github.com/yasokada/python-160423_footInput/releases/tag/v0.6)\n\n\n", "tags": ["borgAugmentation", "networkApp"]}