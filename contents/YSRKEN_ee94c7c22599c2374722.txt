{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\n\u3000\u30cf\u30d5(Hough)\u5909\u63db\u306f\u3001\u753b\u50cf\u306e\u4e2d\u304b\u3089\u76f4\u7dda\u3084\u5186\u306a\u3069\u306e\u56f3\u5f62\u3092\u691c\u51fa\u3057\u305f\u3044\u969b\u306b\u3088\u304f\u7528\u3044\u3089\u308c\u308b\u624b\u6cd5\u306e\u4e00\u3064\u3067\u3059\u3002\u691c\u51fa\u7cbe\u5ea6\u306f\u9ad8\u3044\u3067\u3059\u304c\u3001\u305d\u306e\u5206\u6f14\u7b97\u8ca0\u8377\u304c\u9ad8\u304f\u3001\u307e\u305f\u30e1\u30e2\u30ea\u3082\u591a\u304f\u6d88\u8cbb\u3059\u308b\u306a\u3069\u306e\u6b20\u70b9\u304c\u3042\u308a\u307e\u3059\u3002\n\u3000\u3057\u304b\u3057\u3001\u7406\u8ad6\u304c\u7f8e\u3057\u3044\u3053\u3068\u304b\u3089\u3001\u305c\u3072\u899a\u3048\u3066\u304a\u304d\u305f\u3044\u753b\u50cf\u51e6\u7406\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u4e00\u3064\u3060\u3068\u79c1\u306f\u601d\u3044\u307e\u3057\u305f\u3002\u4ee5\u4e0b\u306e\u8a18\u8ff0\u306f\u3001\u6b21\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u3000Hough\u5909\u63db\u306b\u3088\u308b\u753b\u50cf\u304b\u3089\u306e\u76f4\u7dda\u3084\u5186\u306e\u691c\u51fa\uff1aCodeZine\uff08\u30b3\u30fc\u30c9\u30b8\u30f3\uff09\n\n\u305d\u3082\u305d\u3082\u30cf\u30d5\u5909\u63db\u3063\u3066\u4f55\u3092\u5909\u63db\u3057\u3066\u308b\u306e\uff1f\n\u3000\u7aef\u7684\u306b\u8a00\u3048\u3070\u3001\u5ea7\u6a19\u7cfb\u3092\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3060\u3051\u3067\u306f\u4f55\u3092\u8a00\u3063\u3066\u3044\u308b\u306e\u304b\u304c\u5206\u304b\u308a\u3065\u3089\u3044\u3068\u601d\u3044\u307e\u3059\u306e\u3067\u30012\u3064\u306e\u4f8b\u3067\u8aac\u660e\u3057\u307e\u3057\u3087\u3046\u3002\n\n\u76f4\u7dda\u3092\u691c\u51fa\u3057\u305f\u3044\u5834\u5408\n\u76f4\u7dda\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u304c2\u3064\u3042\u308c\u3070\u8868\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u6570\u5b66\u306e\u6559\u79d1\u66f8\u3067\u306e\u76f4\u7dda\u306f\u300cy=ax+by=ax+b\u300d\u3068\u304b\u300cax+by+c=0ax+by+c=0\u300d\u3068\u304b\u304c\u6709\u540d\u3067\u3059\u304c\u3001Hough\u5909\u63db\u7684\u306b\u306f\u300c\u03c1=x*cos\u03b8+y*sin\u03b8\u03c1=x*cos\u03b8+y*sin\u03b8\u300d\u3068\u3057\u3066\u03c1\u3068\u03b8\u3067\u8868\u3059\u306e\u304c\u4e00\u822c\u7684\u3067\u3059(a\u3068b\u306e\u7d44\u3060\u3068\u5782\u76f4\u30fb\u6c34\u5e73\u7dda\u304c\u6271\u3044\u3065\u3089\u3044\u305f\u3081)\u3002\u56f3\u306b\u3059\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u306d\u3002\n\n\u3000\u3053\u3053\u3067A\u70b9\u306f\u3001\u30cf\u30d5\u5909\u63db\u3059\u308b\u524d\u306e\u70b9\u3067\u305d\u306e\u5ea7\u6a19\u306f(x, y)\u3068\u8868\u3055\u308c\u307e\u3059\u3002\u305d\u306e\u70b9\u3092\u901a\u308b\u76f4\u7dda\u306f\u3001\u56f3\u306e\u3088\u3046\u306b\u03c1\u3068\u03b8\u3067\u8868\u3055\u308c\u307e\u3059\u3002\u3053\u3053\u3067\u6c17\u3065\u304b\u308c\u305f\u65b9\u3082\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001A\u70b9\u3092\u901a\u308b\u03c1\u3068\u03b8\u306e\u7d44\u306f\u7121\u6570\u306b\u3042\u308a\u307e\u3059\u3002\n\u3000\u2026\u2026\u307e\u3041\u843d\u3061\u4ed8\u3051\u3002\u9283\u3092\u7a81\u304d\u4ed8\u3051\u3089\u308c\u3066\u306f\u30d3\u30d3\u3063\u3066\u8a71\u3082\u3067\u304d\u3084\u3057\u306d\u3047\u3002A\u70b9\u3068\u3044\u3046\u57fa\u6e96\u304c1\u3064\u5b9a\u307e\u3063\u3066\u3044\u308b\u304a\u9670\u3067\u3001\u300c\u7121\u6570\u306b\u3042\u308b\u300d\u3068\u8a00\u3063\u3066\u30821\u6b21\u5143\u5206\u3060\u3051\u8003\u3048\u308c\u3070\u6e08\u307f\u307e\u3059\u3002\u306a\u305c\u306a\u3089\u3001\u03c1\u3068\u03b8\u306e\u3069\u3061\u3089\u304b\u3092\u5b9a\u3081\u308b\u3068\u3082\u3046\u4e00\u65b9\u306f\u8a08\u7b97\u3067\u51fa\u3066\u304d\u307e\u3059\u304b\u3089\u3002\u56f3\u5f62\u306e\u5bfe\u79f0\u6027\u304b\u3089\u03b8\u306f0\u2266\u03b8\uff1c\u03c0\u306e\u7bc4\u56f2\u3060\u3051\u8003\u3048\u308c\u3070\u3044\u3044\u3067\u3059\u3057\u3001\u03c1\u306f\u5143\u753b\u50cf\u306e\u5bfe\u89d2\u7dda\u3088\u308a\u9577\u304f\u306a\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u306e\u3067\u3001\u03c1\u3068\u03b8\u306e\u7d44\u306f\u6b21\u306e\u56f3\u306e\u3088\u3046\u306b\u5e73\u9762\u4e0a\u306b\u66f2\u7dda\u3068\u3057\u3066\u30d7\u30ed\u30c3\u30c8\u3067\u304d\u307e\u3059\u3002\n\n\u3053\u306e\u66f2\u7dda\u306f\u5f53\u7136\u3001\u5143\u753b\u50cf\u306b\u5b58\u5728\u3059\u308b\u70b9\u306e\u6570(\u30cf\u30d5\u5909\u63db\u3067\u53d6\u308a\u4e0a\u3052\u3089\u308c\u308b\u6570)\u3060\u3051\u5b58\u5728\u3057\u307e\u3059\u3002\u305d\u308c\u304c\u591a\u304f\u4ea4\u5dee\u3057\u305f\u70b9(\u56f3\u306b\u304a\u3051\u308b\u70b9B)\u3068\u306f\u3064\u307e\u308a\u3001\u5143\u753b\u50cf\u306e\u8907\u6570\u70b9\u304b\u3089\u5f37\u304f\u4e88\u6e2c\u3055\u308c\u308b\u03c1\u3068\u03b8\u306e\u7d44\uff1d\u6c42\u3081\u305f\u3044\u76f4\u7dda\u306b\u4ed6\u306a\u308a\u307e\u305b\u3093\u3002\u4ea4\u5dee\u70b9\u304c\u8907\u6570\u5b58\u5728\u3059\u308b\u5834\u5408\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u305d\u308c\u306f\u3064\u307e\u308a\u5143\u753b\u50cf\u306b\u8907\u6570\u306e\u76f4\u7dda\u304c\u5b58\u5728\u3059\u308b(\u53ef\u80fd\u6027\u304c\u9ad8\u3044)\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u306e\u3067\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002\u304b\u304f\u3057\u3066\u3001\u5143\u753b\u50cf\u306b\u6f5c\u3080\u76f4\u7dda\u3092\u898b\u3064\u3051\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u5186\u3092\u691c\u51fa\u3057\u305f\u3044\u5834\u5408\n\u3000\u5186\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u304c3\u3064\u3042\u308c\u3070\u8868\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u3053\u306f\u3001\u6570\u5b66\u306e\u6559\u79d1\u66f8\u306b\u8f09\u3063\u3066\u3044\u308b\u300c(x-p)^2+(y-q)^2=r^2(x-p)^2+(y-q)^2=r^2\u300d\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\u4e2d\u5fc3\u304c(p, q)\u3067\u534a\u5f84\u304cr\u306e\u5186\u3092\u8003\u3048\u308b\u308f\u3051\u3067\u3059\u306d\u3002\u4e0b\u306e\u56f3\u3067\u306f\u3001C\u70b9\u304c(x, y)\u3067D\u70b9\u304c(p, q)\u3068\u306a\u308a\u307e\u3059\u3002\n\n \u76f4\u7dda\u306e\u5834\u5408\u306f\u03b8\u3092\u5909\u5316\u3055\u305b\u305f\u308f\u3051\u3067\u3059\u304c\u3001\u4eca\u5ea6\u306fp\u3068q\u3092\u5909\u5316\u3055\u305b\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\u4e09\u5e73\u65b9\u306e\u5b9a\u7406\u304b\u3089r\u3092\u9006\u7b97\u3067\u304d\u307e\u3059\u306e\u3067\u3001\u76f4\u7dda\u306e\u5834\u5408\u3068\u540c\u3058\u304f\u3001\u5143\u753b\u50cf\u306e\u5168\u3066\u306e\u70b9\u306b\u5bfe\u3057\u3066\u540c\u3058\u4f5c\u696d\u3092\u884c\u3046\u3053\u3068\u3067\u3001\u591a\u304f\u4ea4\u5dee\u3057\u305f\u70b9(p, q, r)\uff1d\u6c42\u3081\u305f\u3044\u5186\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u66f8\u304d\u65b9\u3067\u304a\u5206\u304b\u308a\u306e\u901a\u308a\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u304c3\u3064\u3042\u308b\u3068\u30cf\u30d5\u5909\u63db\u5f8c\u306e\u7a7a\u9593\u306f3\u6b21\u5143\u306b\u306a\u308a\u307e\u3059\u3002n\u500b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u8868\u305b\u308b\u56f3\u5f62\u306a\u3089n\u6b21\u5143\u7a7a\u9593\u306b\u306a\u308a\u307e\u3059\u306d\u3002\n\n\u30cf\u30d5\u5909\u63db\u3057\u305f\u5f8c\u306b\u4f55\u3092\u3059\u308b\u3079\u304d\u304b\n\u3000\u4ee5\u4e0a\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u3057\u3066\u8a18\u8ff0\u3059\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002\n\n\u5143\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u3080\n\u524d\u51e6\u7406\u3092\u884c\u3046\u3002\u57fa\u672c\u7684\u306b\u306f\u3001\u4e8c\u5024\u5316\u3057\u305f\u5f8c\u306b\u30b4\u30df\u3092\u9664\u53bb\u3057\u3001\u7d30\u7dda\u5316\u51e6\u7406\u3092\u884c\u3046\u3053\u3068\u304c\u591a\u3044\n\u30cf\u30d5\u5909\u63db\u3092\u884c\u3044\u3001\u7d50\u679c\u3092\u914d\u5217\u306a\u3069\u3067\u53d6\u5f97\u3059\u308b\u3002\u30d1\u30e9\u30e1\u30fc\u30bf\u6570\u304c\u591a\u3044\u307b\u3069\u8a08\u7b97\u6642\u9593\u304c\u52a0\u901f\u5ea6\u7684\u306b\u5897\u52a0\u3059\u308b\u306e\u3067\u6ce8\u610f\n\u591a\u304f\u4ea4\u5dee\u3057\u305f\u70b9\u3092\u691c\u7d22\u3057\u3066\u53d6\u5f97\u3059\u308b\u3002\u305d\u3046\u3044\u3063\u305f\u70b9\u306f\u8907\u6570\u5f97\u3089\u308c\u308b\u3053\u3068\u3082\u3042\u308b\n\n\u300c\u306d\u3001\u7c21\u5358\u3067\u3057\u3087\u3046\uff1f\u300d\u3068\u8a00\u3044\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u304c\u3001\u305d\u3093\u306a\u308f\u3051\u306a\u3044\u3093\u3067\u3059\u3088\u306d\u2026\u2026\u3002\u6ce8\u610f\u3059\u3079\u304d\u30dd\u30a4\u30f3\u30c8\u3082\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u30cf\u30d5\u5909\u63db\u3059\u308b\u7bc4\u56f2\u3092\u3088\u304f\u8003\u3048\u308b\u3053\u3068\u3002\u8a08\u7b97\u91cf\u3092\u30b1\u30c1\u308a\u3064\u3064\u7cbe\u5ea6\u306e\u9ad8\u3044\u7d50\u679c\u3092\u5f97\u305f\u3044\u306e\u3067\u3001\u4f8b\u3048\u3070\u76f4\u7dda\u3067\u306f\u03b8\u306e\u7bc4\u56f2\u3084\u305d\u306e\u5206\u5272\u6570\u3001\u5186\u3067\u306f\u4e2d\u5fc3\u306e\u5ea7\u6a19(p, q)\u3084\u534a\u5f84r\u306e\u7bc4\u56f2\u306b\u3064\u3044\u3066\u4e8b\u524d\u306b\u6761\u4ef6\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002\n\u91cf\u5b50\u5316\u8aa4\u5dee\u3092\u8003\u616e\u3059\u308b\u3053\u3068\u3002\u7406\u8ad6\u4e0a\u306f\u4e0a\u8a18\u306e\u3088\u3046\u306b\u4ea4\u70b9\u304c\u7dba\u9e97\u306b\u51fa\u3066\u304f\u308b\u306f\u305a\u3067\u3059\u304c\u3001\u5b9f\u969b\u306b\u306f\u91cf\u5b50\u5316\u8aa4\u5dee\u306e\u305b\u3044\u3067\u3042\u308b\u7a0b\u5ea6\u70b9\u304c\u30d6\u30ec\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u8a73\u3057\u304f\u306f\u5f8c\u307b\u3069\u89e3\u8aac\u3057\u307e\u3059\u304c\u3001\u305d\u306e\u305b\u3044\u3067\u65e2\u306b\u767a\u898b\u3057\u305f\u4ea4\u70b9\u306e\u5468\u308a\u3092\u7121\u8996\u3059\u308b\u3068\u3044\u3063\u305f\u51e6\u7406\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\u305f\u3060\u305d\u3046\u306a\u308b\u3068\u3001\u4f3c\u305f\u611f\u3058\u306e\u56f3\u5f62\u304c\u4e26\u3093\u3067\u3044\u305f\u5834\u5408\u306b\u691c\u51fa\u3067\u304d\u306a\u304f\u306a\u3063\u305f\u308a\u3059\u308b\u306e\u3067\u30b8\u30ec\u30f3\u30de\u3067\u3059\u304c\u3002\n\u5e7e\u3064\u307e\u3067\u53d6\u5f97\u3059\u308b\u304b\u3092\u8003\u3048\u308b\u3053\u3068\u3002\u91cf\u5b50\u5316\u8aa4\u5dee\u306e\u8a71\u984c\u306b\u3082\u7e4b\u304c\u308a\u307e\u3059\u304c\u3001\u300c\u4e0a\u4f4d10\u7a2e\u985e\u300d\u3084\u300c\u3057\u304d\u3044\u5024\u672a\u6e80\u306a\u3089\u7121\u8996\u3059\u308b\u300d\u306a\u3069\u3067\u7be9\u306b\u639b\u3051\u306a\u3044\u3068\u5927\u91cf\u306e\u5019\u88dc\u304c\u691c\u51fa\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\n\u5b9f\u969b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u4f8b\n\u3000\u3068\u308a\u3042\u3048\u305aJava\u3067\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\u5b9f\u884c\u7d50\u679c\u306f\u6b21\u306e\u753b\u50cf\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\u51e6\u7406\u524d(640x360)\uff1ahttp://i.imgur.com/0g3vWFT.png\n\u30cf\u30d5\u5909\u63db\u5f8c\u306e\u9818\u57df(\u6a2a\u8ef8\u304c\u03b8\u3001\u7e26\u8ef8\u304c\u03c1)\uff1ahttp://i.imgur.com/TQbnDL7.png\n\u30cf\u30d5\u5909\u63db\u5f8c\u306e\u9818\u57df(\u6a2a\u8ef8\u304cp\u3001\u7e26\u8ef8\u304cq)\uff1ahttp://i.imgur.com/VcgM9Y4.png\n\u51e6\u7406\u5f8c(\u691c\u51fa\u3057\u305f\u56f3\u5f62\u3092\u8272\u4ed8\u3051)\uff1ahttp://i.imgur.com/65QtNLJ.png\n\u3000i7-4790K\u30fbWin10\u3067\u5b9f\u884c\u3057\u305f\u3068\u3053\u308d\u3001\u753b\u50cf\u51fa\u529b\u6642\u9593\u3092\u542b\u3081\u30662.4\u79d2\u307b\u3069\u639b\u304b\u308a\u307e\u3057\u305f\u3002\u307e\u3042\u5927\u90e8\u5206\u304c\u5186\u3092\u691c\u51fa\u3059\u308b\u969b\u306e\u30cf\u30d5\u5909\u63db\u51e6\u7406\u306a\u306e\u3067\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u304c1\u3064\u5897\u3048\u308b\u3060\u3051\u3067\u3044\u304b\u306b\u9762\u5012\u304b\u304c\u5206\u304b\u308a\u307e\u3059\u306d\u3002\n\n\u3000\u307e\u305f\u3001\u30cf\u30d5\u5909\u63db\u5f8c\u306e\u9818\u57df\u3092\u898b\u308c\u3070\u5206\u304b\u308b\u3088\u3046\u306b\u3001\u660e\u308b\u3044\u70b9\u306e\u5468\u308a\u306b\u30e2\u30e4\u306e\u3088\u3046\u306b\u307b\u3093\u306e\u308a\u3068\u660e\u308b\u3044\u70b9\u304c\u7d9a\u3044\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\u305d\u306e\u660e\u308b\u3044\u70b9\u3059\u3089\u3082\u3001\u96a3\u63a5\u30d4\u30af\u30bb\u30eb\u306f\u540c\u3058\u3050\u3089\u3044\u660e\u308b\u304b\u3063\u305f\u308a\u3059\u308b\u306e\u3067\u524d\u8ff0\u306e\u3088\u3046\u306a\u7be9\u639b\u3051\u3092\u3057\u306a\u3044\u3068\u4e0a\u624b\u304f\u691c\u51fa\u3067\u304d\u306a\u3044\u3068\u5206\u304b\u308b\u3067\u3057\u3087\u3046\u3002\n\u3000\u4ee5\u4e0b\u306b\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u307e\u3059\u304c\u3001\u52c9\u5f37\u3059\u308b\u969b\u306f\u305d\u306e\u307e\u307e\u30b3\u30d4\u30da\u306a\u3093\u3066\u305b\u305a\u81ea\u529b\u3067\u5b9f\u88c5\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\u3088\u308a\u591a\u304f\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5fc5\u8981\u3068\u3059\u308b\u56f3\u5f62\u3092\u691c\u51fa\u3057\u3066\u307f\u3066\u3082\u9762\u767d\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\nhough.java\n/* Hough\u5909\u63db\u306e\u30b5\u30f3\u30d7\u30eb\n * Hough\u5909\u63db\u3057\u305f\u969b\u306f\u3001\n * \u76f4\u7dda\u2192\u6a2a\u00d7\u7e26\u304c\u89d2\u5ea6\u5206\u5272\u6570\u00d7(2 * \u5bfe\u89d2\u7dda\u9577)\u306b\u5bfe\u5fdc\u3059\u308b\n * (\u3053\u3053\u3067\u5bfe\u89d2\u7dda\u9577\u30922\u500d\u3057\u3066\u3044\u308b\u306e\u306f\u8ca0\u6570\u3092\u60f3\u5b9a\u3057\u3066\u3044\u308b)\n * \u5186\u2192\u6a2a\u00d7\u7e26\u304c\u6a2a\u00d7\u7e26\u00d7\u534a\u5f84\u306b\u5bfe\u5fdc\u3059\u308b\n */\n\n/* \u5f15\u6570\u306e1\u3064\u76ee\u304c\u300cput\u300d\u3060\u3063\u305f\u306a\u3089\u3001counter*.png\u3092\u51fa\u529b\u3059\u308b */\n\nimport java.awt.Color;\nimport java.awt.Graphics2D;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.util.ArrayList;\nimport javax.imageio.ImageIO;\n\npublic class hough{\n    // \u5b9a\u6570\n    static final int kAngleSplits = 1024;   //0\uff5e\u03c0\u3092\u3053\u306e\u6570\u3060\u3051\u5206\u5272\u3059\u308b\n    static final int kMinCount = 100;       //\u30ab\u30a6\u30f3\u30c8\u304c\u3053\u306e\u6570\u672a\u6e80\u306a\u3089\u7121\u8996\u3059\u308b\n    static final int kMaxCircleR = 100; //\u5186\u304c\u3053\u308c\u4ee5\u4e0a\u306e\u5927\u304d\u3055\u306a\u3089\u7121\u8996\u3059\u308b\n    static final double kTableConst = Math.PI / kAngleSplits;   //\u8a08\u7b97\u7528\u5b9a\u6570\n    static final double kDegRad = 180 / Math.PI;    //\u5909\u63db\u7528\u5b9a\u6570\n    // \u5909\u6570\n    static int w, h, diagonal, d2;\n    static ArrayList<Double> sin_table, cos_table;\n    static ArrayList<Integer> dgl_table;\n    // main\u95a2\u6570\n    public static void main(String args[]){\n        boolean save_flg = false;\n        if(args.length > 0 && args[0].equals(\"put\")) save_flg = true;\n        // \u753b\u50cf\u3092\u8aad\u307f\u8fbc\u307f\n        BufferedImage load_image;\n        try{\n            load_image = ImageIO.read(new File(\"sample.png\"));\n        }\n        catch(Exception error){\n            error.printStackTrace();\n            return;\n        }\n        w = load_image.getWidth();\n        h = load_image.getHeight();\n        System.out.println(\"\u753b\u50cf\u30b5\u30a4\u30ba\uff1a\" + w + \"x\" + h);\n        long start = System.nanoTime();\n        // \u66f8\u304d\u8fbc\u307f\u7528\u753b\u50cf\u3092\u7528\u610f\u3059\u308b\n        BufferedImage save_image = new BufferedImage(w, h, BufferedImage.TYPE_INT_BGR);\n        Graphics2D g2d = (Graphics2D)save_image.getGraphics();\n        g2d.drawImage(load_image, 0, 0, null);\n        // \u4e8c\u5024\u5316\n        ArrayList<Integer> binary_image = toBinaryImage(load_image);\n        // \u6570\u5024\u8a08\u7b97\u7528\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u4e8b\u524d\u306b\u7528\u610f\u3059\u308b\n        sin_table = new ArrayList<Double>(kAngleSplits);\n        cos_table = new ArrayList<Double>(kAngleSplits);\n        for(int t = 0; t < kAngleSplits; t++){\n            sin_table.add(Math.sin(kTableConst * t));\n            cos_table.add(Math.cos(kTableConst * t));\n        }\n        dgl_table = new ArrayList<Integer>(w * h);\n        for(int y = 0; y < h; y++){\n            for(int x = 0; x < w; x++){\n                dgl_table.add((int)(Math.sqrt(x * x + y * y) + 0.5));\n            }\n        }\n        // \u76f4\u7dda\u3092\u691c\u51fa\u3059\u308b\n        ArrayList<Tuple2> line_list = calcHoughLine(binary_image, save_flg);\n        drawHoughLine(save_image, line_list);\n        // \u5186\u3092\u691c\u51fa\u3059\u308b\n        ArrayList<Tuple3> circle_list = calcHoughCircle(binary_image, save_flg);\n        drawHoughCircle(save_image, circle_list);\n        // \u7d50\u679c\u3092\u66f8\u304d\u51fa\u3057\n        long stop = System.nanoTime();\n        System.out.println((stop - start) / 1000 / 1000 + \"ms\");\n        try{\n            ImageIO.write(save_image, \"png\", new File(\"result.png\"));\n        }\n        catch(Exception error){\n            error.printStackTrace();\n            return;\n        }\n    }\n    // \u753b\u50cf\u3092\u4e8c\u5024\u5316\u3057\u3066\u8fd4\u3059\n    private static ArrayList<Integer> toBinaryImage(BufferedImage src_image){\n        ArrayList<Integer> dst_image = new ArrayList<Integer>(w * h);\n        for(int y = 0; y < h; y++){\n            for(int x = 0; x < w; x++){\n                int color = src_image.getRGB(x, y);\n                int r = (color & 0xff0000) >> 16;\n                int g = (color & 0xff00) >> 8;\n                int b = color & 0xff;\n                double Y = 0.299 * r + 0.587 * g + 0.114 * b;   //YCbCr\n                if(Y > 127.5)\n                    dst_image.add(0);\n                else\n                    dst_image.add(1);\n            }\n        }\n        return dst_image;\n    }\n    // \u753b\u50cf\u3092Hough\u5909\u63db\u3059\u308b(\u76f4\u7dda\u504f)\n    private static ArrayList<Integer> getHoughLine(ArrayList<Integer> src_image){\n        diagonal = (int)Math.sqrt(w * w + h * h);\n        d2 = diagonal * 2;\n        ArrayList<Integer> dst_image = new ArrayList<Integer>(kAngleSplits * d2);\n        for(int r = 0; r < d2; r++){\n            for(int t = 0; t < kAngleSplits; t++){\n                dst_image.add(0);\n            }\n        }\n        // \u5ea7\u6a19\u5909\u63db\u3092\u884c\u3044\u3001\u7d50\u679c\u306b\u52a0\u7b97\u3057\u3066\u304a\u304f\n        for(int y = 0; y < h; y++){\n            for(int x = 0; x < w; x++){\n                if(src_image.get(y * w + x) == 0) continue;\n                for(int t = 0; t < kAngleSplits; t++){\n                    int r = (int)(x * cos_table.get(t) + y * sin_table.get(t) + 0.5);\n                    int p = (r + diagonal) * kAngleSplits + t;\n                    dst_image.set(p, dst_image.get(p) + 1);\n                }\n            }\n        }\n        return dst_image;\n    }\n    // \u76f4\u7dda\u3092\u691c\u51fa\u3059\u308b\n    private static ArrayList<Tuple2> calcHoughLine(ArrayList<Integer> src_image, boolean save_flg){\n        ArrayList<Integer> counter = getHoughLine(src_image);\n        // \u30ab\u30a6\u30f3\u30c8\u3092\u753b\u50cf\u5316\u3059\u308b\n        int max_count = 0;\n        if(save_flg){\n            BufferedImage counter_image = new BufferedImage(kAngleSplits, d2, BufferedImage.TYPE_INT_BGR);\n            for(int r = 0; r < d2; r++){\n                for(int t = 0; t < kAngleSplits; t++){\n                    int cnt = counter.get(r * kAngleSplits + t);\n                    if(max_count < cnt) max_count = cnt;\n                }\n            }\n            for(int r = 0; r < d2; r++){\n                for(int t = 0; t < kAngleSplits; t++){\n                    int cnt = counter.get(r * kAngleSplits + t);\n                    int color = (int)(255.0 * cnt / max_count);\n                    counter_image.setRGB(t, r, color * 0x010101);\n                }\n            }\n            try{\n                ImageIO.write(counter_image, \"png\", new File(\"counter.png\"));\n            }\n            catch(Exception error){\n                error.printStackTrace();\n                return null;\n            }\n        }\n        // \u6700\u3082\u30ab\u30a6\u30f3\u30c8\u304c\u591a\u3044\u3082\u306e\u304b\u3089\u3001\u76f4\u7dda\u3068\u3057\u3066\u8868\u793a\u3059\u308b\n        ArrayList<Tuple2> result = new ArrayList<Tuple2>();\n        System.out.println(\"\u76f4\u7dda\u306e\u691c\u51fa\u7d50\u679c\uff1a\");\n        while(true){\n            // \u6700\u3082\u30ab\u30a6\u30f3\u30c8\u304c\u591a\u3044\u3082\u306e\u3092\u691c\u7d22\u3059\u308b\n            max_count = 0;\n            int t_max = 0, r_max = 0;\n            for(int r = 0; r < d2; r++){\n                for(int t = 0; t < kAngleSplits; t++){\n                    int cnt = counter.get(r * kAngleSplits + t);\n                    if(max_count < cnt){\n                        max_count = cnt;\n                        t_max = t;\n                        r_max = r;\n                    }\n                }\n            }\n            if(max_count < kMinCount) break;\n            result.add(new Tuple2<Integer, Integer>(t_max, r_max));\n            System.out.println(\"\u3000\u30ab\u30a6\u30f3\u30c8\uff1a\" + max_count + \" \u89d2\u5ea6\uff1a\" + (t_max * kTableConst * kDegRad) + \" \u8ddd\u96e2\uff1a\" + (r_max - diagonal));\n            // \u985e\u4f3c\u3057\u305f\u5468\u8fba\u306e\u30ab\u30a6\u30f3\u30c8\u3092\u6d88\u53bb\u3059\u308b\n            for(int r = -10; r <= 10; r++){\n                for(int t = -30; t <= 30; t++){\n                    int t2 = t_max + t, r2 = r_max + r;\n                    if(t2 < 0){\n                        t2 += kAngleSplits;\n                        r2 = -r2;\n                    }\n                    if(t2 >= kAngleSplits){\n                        t2 -= kAngleSplits;\n                        r2 = -r2;\n                    }\n                    if(r2 < 0 || r2 >= d2) continue;\n                    counter.set(r2 * kAngleSplits + t2, 0);\n                }\n            }\n        }\n        return result;\n    }\n    // \u76f4\u7dda\u3092\u66f8\u304d\u51fa\u3059\n    private static void drawHoughLine(BufferedImage image, ArrayList<Tuple2> list){\n        Graphics2D g2d = (Graphics2D)image.getGraphics();\n        g2d.setColor(Color.BLUE);\n        for(Tuple2<Integer, Integer> temp : list){\n            int t = temp.t1, r = temp.t2 - diagonal;\n            if(t != 0){\n                for(int x = 0; x < w; x++){\n                    int y = (int)((r - x * cos_table.get(t)) / sin_table.get(t));\n                    if(y < 0 || y >= h) continue;\n                    g2d.drawRect(x, y, 0, 0);\n                }\n            }\n            if(t != kAngleSplits / 2){\n                for(int y = 0; y < h; y++){\n                    int x = (int)((r - y * sin_table.get(t)) / cos_table.get(t));\n                    if(x < 0 || x >= w) continue;\n                    g2d.drawRect(x, y, 0, 0);\n                }\n            }\n        }\n    }\n    // \u753b\u50cf\u3092Hough\u5909\u63db\u3059\u308b(\u5186\u5f27\u504f)\n    private static ArrayList<Integer> getHoughCircle(ArrayList<Integer> src_image){\n        ArrayList<Integer> dst_image = new ArrayList<Integer>(w * h * kMaxCircleR);\n        for(int x = 0; x < w; x++){\n            for(int y = 0; y < h; y++){\n                for(int r = 0; r < kMaxCircleR; r++){\n                    dst_image.add(0);\n                }\n            }\n        }\n        // \u5ea7\u6a19\u5909\u63db\u3092\u884c\u3044\u3001\u7d50\u679c\u306b\u52a0\u7b97\u3057\u3066\u304a\u304f\n        for(int y = 0; y < h; y++){\n            for(int x = 0; x < w; x++){\n                if(src_image.get(y * w + x) == 0) continue;\n                for(int cy = Math.max(y - kMaxCircleR, 0); cy <= Math.min(y + kMaxCircleR, h - 1); cy++){\n                    int dy = Math.abs(cy - y);\n                    for(int cx = Math.max(x - kMaxCircleR, 0); cx <= Math.min(x + kMaxCircleR, w - 1); cx++){\n                        int dx = Math.abs(cx - x);\n                        int r = dgl_table.get(dy * w + dx);\n                        if(r >= kMaxCircleR) continue;\n                        int p = (cy * w + cx) * kMaxCircleR + r;\n                        dst_image.set(p, dst_image.get(p) + 1);\n                    }\n                }\n            }\n        }\n        return dst_image;\n    }\n    // \u5186\u3092\u691c\u51fa\u3059\u308b\n    private static ArrayList<Tuple3> calcHoughCircle(ArrayList<Integer> src_image, boolean save_flg){\n        ArrayList<Integer> counter = getHoughCircle(src_image);\n        // \u30ab\u30a6\u30f3\u30c8\u3092\u753b\u50cf\u5316\u3059\u308b\n        int max_count = 0;\n        if(save_flg){\n            BufferedImage counter_image_c = new BufferedImage(w, h, BufferedImage.TYPE_INT_BGR);\n            BufferedImage counter_image_r = new BufferedImage(w, h, BufferedImage.TYPE_INT_BGR);\n            for(int y = 0; y < h; y++){\n                for(int x = 0; x < w; x++){\n                    for(int r = 0; r < kMaxCircleR; r++){\n                        int cnt = counter.get((y * w + x) * kMaxCircleR + r);\n                        if(max_count < cnt) max_count = cnt;\n                    }\n                }\n            }\n            for(int y = 0; y < h; y++){\n                for(int x = 0; x < w; x++){\n                    int max_count_2 = 0, max_r = 0;\n                    for(int r = 0; r < kMaxCircleR; r++){\n                        int cnt = counter.get((y * w + x) * kMaxCircleR + r);\n                        if(max_count_2 < cnt){\n                            max_count_2 = cnt;\n                            max_r = r;\n                        }\n                    }\n                    counter_image_c.setRGB(x, y, 0x010101 * (int)(0xff * max_count_2 / max_count));\n                    counter_image_r.setRGB(x, y, 0x010101 * (int)(0xff * max_r / kMaxCircleR));\n                }\n            }\n            try{\n                ImageIO.write(counter_image_c, \"png\", new File(\"counter2_c.png\"));\n                ImageIO.write(counter_image_r, \"png\", new File(\"counter2_r.png\"));\n            }\n            catch(Exception error){\n                error.printStackTrace();\n                return null;\n            }\n        }\n        // \u6700\u3082\u30ab\u30a6\u30f3\u30c8\u304c\u591a\u3044\u3082\u306e\u304b\u3089\u3001\u5186\u3068\u3057\u3066\u8868\u793a\u3059\u308b\n        ArrayList<Tuple3> result = new ArrayList<Tuple3>();\n        System.out.println(\"\u5186\u306e\u691c\u51fa\u7d50\u679c\uff1a\");\n        while(true){\n            // \u6700\u3082\u30ab\u30a6\u30f3\u30c8\u304c\u591a\u3044\u3082\u306e\u3092\u691c\u7d22\u3059\u308b\n            max_count = 0;\n            int x_max = 0, y_max = 0, r_max = 0;\n            for(int y = 0; y < h; y++){\n                for(int x = 0; x < w; x++){\n                    for(int r = 0; r < kMaxCircleR; r++){\n                        int cnt = counter.get((y * w + x) * kMaxCircleR + r);\n                        if(max_count < cnt){\n                            max_count = cnt;\n                            x_max = x;\n                            y_max = y;\n                            r_max = r;\n                        }\n                    }\n                }\n            }\n            if(max_count < kMinCount) break;\n            Tuple3 t3 = new Tuple3<Integer, Integer, Integer>(x_max, y_max, r_max);\n            result.add(t3);\n            System.out.println(\"\u3000\u30ab\u30a6\u30f3\u30c8\uff1a\" + max_count + \" \u4e2d\u5fc3\uff1a(\" + x_max + \",\" + y_max + \") \u534a\u5f84\uff1a\" + r_max);\n            // \u985e\u4f3c\u3057\u305f\u5468\u8fba\u306e\u30ab\u30a6\u30f3\u30c8\u3092\u6d88\u53bb\u3059\u308b\n            for(int y = -5; y <= 5; y++){\n                int y2 = y_max + y;\n                if(y2 < 0 || y2 >= h) continue;\n                for(int x = -5; x <= 5; x++){\n                    int x2 = x_max + x;\n                    if(x2 < 0 || x2 >= w) continue;\n                    for(int r = -5; r <= 5; r++){\n                        int r2 = r_max + r;\n                        if(r2 < 0) continue;\n                        counter.set((y2 * w + x2) * kMaxCircleR + r2, 0);\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    // \u5186\u3092\u66f8\u304d\u51fa\u3059\n    private static void drawHoughCircle(BufferedImage image, ArrayList<Tuple3> list){\n        Graphics2D g2d = (Graphics2D)image.getGraphics();\n        g2d.setColor(Color.RED);\n        for(Tuple3<Integer, Integer, Integer> temp : list){\n            int x = temp.t1, y = temp.t2, r = temp.t3;\n            g2d.drawOval(x - r, y - r, r * 2, r * 2);\n        }\n    }\n}\n\n// \u30bf\u30d7\u30eb\nclass Tuple2<T1, T2>{\n    public T1 t1;\n    public T2 t2;\n    public Tuple2(){}\n    public Tuple2(T1 t1, T2 t2){\n        this.t1 = t1;\n        this.t2 = t2;\n    }\n}\nclass Tuple3<T1, T2, T3>{\n    public T1 t1;\n    public T2 t2;\n    public T3 t3;\n    public Tuple3(){}\n    public Tuple3(T1 t1, T2 t2, T3 t3){\n        this.t1 = t1;\n        this.t2 = t2;\n        this.t3 = t3;\n    }\n}\n\n\n#\u6982\u8981\n\u3000\u30cf\u30d5(Hough)\u5909\u63db\u306f\u3001**\u753b\u50cf\u306e\u4e2d\u304b\u3089\u76f4\u7dda\u3084\u5186\u306a\u3069\u306e\u56f3\u5f62\u3092\u691c\u51fa\u3057\u305f\u3044**\u969b\u306b\u3088\u304f\u7528\u3044\u3089\u308c\u308b\u624b\u6cd5\u306e\u4e00\u3064\u3067\u3059\u3002\u691c\u51fa\u7cbe\u5ea6\u306f\u9ad8\u3044\u3067\u3059\u304c\u3001\u305d\u306e\u5206\u6f14\u7b97\u8ca0\u8377\u304c\u9ad8\u304f\u3001\u307e\u305f\u30e1\u30e2\u30ea\u3082\u591a\u304f\u6d88\u8cbb\u3059\u308b\u306a\u3069\u306e\u6b20\u70b9\u304c\u3042\u308a\u307e\u3059\u3002\n\u3000\u3057\u304b\u3057\u3001**\u7406\u8ad6\u304c\u7f8e\u3057\u3044**\u3053\u3068\u304b\u3089\u3001\u305c\u3072\u899a\u3048\u3066\u304a\u304d\u305f\u3044\u753b\u50cf\u51e6\u7406\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u4e00\u3064\u3060\u3068\u79c1\u306f\u601d\u3044\u307e\u3057\u305f\u3002\u4ee5\u4e0b\u306e\u8a18\u8ff0\u306f\u3001\u6b21\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u3000[Hough\u5909\u63db\u306b\u3088\u308b\u753b\u50cf\u304b\u3089\u306e\u76f4\u7dda\u3084\u5186\u306e\u691c\u51fa\uff1aCodeZine\uff08\u30b3\u30fc\u30c9\u30b8\u30f3\uff09](http://codezine.jp/article/detail/153)\n\n#\u305d\u3082\u305d\u3082\u30cf\u30d5\u5909\u63db\u3063\u3066\u4f55\u3092\u5909\u63db\u3057\u3066\u308b\u306e\uff1f\n\u3000\u7aef\u7684\u306b\u8a00\u3048\u3070\u3001**\u5ea7\u6a19\u7cfb\u3092\u5909\u63db**\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3060\u3051\u3067\u306f\u4f55\u3092\u8a00\u3063\u3066\u3044\u308b\u306e\u304b\u304c\u5206\u304b\u308a\u3065\u3089\u3044\u3068\u601d\u3044\u307e\u3059\u306e\u3067\u30012\u3064\u306e\u4f8b\u3067\u8aac\u660e\u3057\u307e\u3057\u3087\u3046\u3002\n\n##\u76f4\u7dda\u3092\u691c\u51fa\u3057\u305f\u3044\u5834\u5408\n**\u76f4\u7dda\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u304c2\u3064\u3042\u308c\u3070\u8868\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059**\u3002\u6570\u5b66\u306e\u6559\u79d1\u66f8\u3067\u306e\u76f4\u7dda\u306f\u300c$y=ax+b$\u300d\u3068\u304b\u300c$ax+by+c=0$\u300d\u3068\u304b\u304c\u6709\u540d\u3067\u3059\u304c\u3001Hough\u5909\u63db\u7684\u306b\u306f\u300c$\u03c1=x*cos\u03b8+y*sin\u03b8$\u300d\u3068\u3057\u3066\u03c1\u3068\u03b8\u3067\u8868\u3059\u306e\u304c\u4e00\u822c\u7684\u3067\u3059(a\u3068b\u306e\u7d44\u3060\u3068\u5782\u76f4\u30fb\u6c34\u5e73\u7dda\u304c\u6271\u3044\u3065\u3089\u3044\u305f\u3081)\u3002\u56f3\u306b\u3059\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u306d\u3002\n![cap1.png](https://qiita-image-store.s3.amazonaws.com/0/29802/8286f87c-57ce-c313-c5de-b123dd45c3f6.png)\n\u3000\u3053\u3053\u3067A\u70b9\u306f\u3001\u30cf\u30d5\u5909\u63db\u3059\u308b\u524d\u306e\u70b9\u3067\u305d\u306e\u5ea7\u6a19\u306f(x, y)\u3068\u8868\u3055\u308c\u307e\u3059\u3002\u305d\u306e\u70b9\u3092\u901a\u308b\u76f4\u7dda\u306f\u3001\u56f3\u306e\u3088\u3046\u306b\u03c1\u3068\u03b8\u3067\u8868\u3055\u308c\u307e\u3059\u3002\u3053\u3053\u3067\u6c17\u3065\u304b\u308c\u305f\u65b9\u3082\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001**A\u70b9\u3092\u901a\u308b\u03c1\u3068\u03b8\u306e\u7d44\u306f\u7121\u6570\u306b\u3042\u308a\u307e\u3059**\u3002\n\u3000\u2026\u2026[\u307e\u3041\u843d\u3061\u4ed8\u3051\u3002\u9283\u3092\u7a81\u304d\u4ed8\u3051\u3089\u308c\u3066\u306f\u30d3\u30d3\u3063\u3066\u8a71\u3082\u3067\u304d\u3084\u3057\u306d\u3047](http://www7.atwiki.jp/commando-matome/pages/11.html)\u3002A\u70b9\u3068\u3044\u3046\u57fa\u6e96\u304c1\u3064\u5b9a\u307e\u3063\u3066\u3044\u308b\u304a\u9670\u3067\u3001\u300c\u7121\u6570\u306b\u3042\u308b\u300d\u3068\u8a00\u3063\u3066\u30821\u6b21\u5143\u5206\u3060\u3051\u8003\u3048\u308c\u3070\u6e08\u307f\u307e\u3059\u3002\u306a\u305c\u306a\u3089\u3001\u03c1\u3068\u03b8\u306e\u3069\u3061\u3089\u304b\u3092\u5b9a\u3081\u308b\u3068\u3082\u3046\u4e00\u65b9\u306f\u8a08\u7b97\u3067\u51fa\u3066\u304d\u307e\u3059\u304b\u3089\u3002\u56f3\u5f62\u306e\u5bfe\u79f0\u6027\u304b\u3089\u03b8\u306f0\u2266\u03b8\uff1c\u03c0\u306e\u7bc4\u56f2\u3060\u3051\u8003\u3048\u308c\u3070\u3044\u3044\u3067\u3059\u3057\u3001**\u03c1\u306f\u5143\u753b\u50cf\u306e\u5bfe\u89d2\u7dda\u3088\u308a\u9577\u304f\u306a\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093**\u306e\u3067\u3001\u03c1\u3068\u03b8\u306e\u7d44\u306f\u6b21\u306e\u56f3\u306e\u3088\u3046\u306b\u5e73\u9762\u4e0a\u306b\u66f2\u7dda\u3068\u3057\u3066\u30d7\u30ed\u30c3\u30c8\u3067\u304d\u307e\u3059\u3002\n![cap2.png](https://qiita-image-store.s3.amazonaws.com/0/29802/45957a8e-d8ba-8244-1958-118b7ca7e466.png)\n\u3053\u306e\u66f2\u7dda\u306f\u5f53\u7136\u3001\u5143\u753b\u50cf\u306b\u5b58\u5728\u3059\u308b\u70b9\u306e\u6570(\u30cf\u30d5\u5909\u63db\u3067\u53d6\u308a\u4e0a\u3052\u3089\u308c\u308b\u6570)\u3060\u3051\u5b58\u5728\u3057\u307e\u3059\u3002\u305d\u308c\u304c\u591a\u304f\u4ea4\u5dee\u3057\u305f\u70b9(\u56f3\u306b\u304a\u3051\u308b\u70b9B)\u3068\u306f\u3064\u307e\u308a\u3001**\u5143\u753b\u50cf\u306e\u8907\u6570\u70b9\u304b\u3089\u5f37\u304f\u4e88\u6e2c\u3055\u308c\u308b\u03c1\u3068\u03b8\u306e\u7d44\uff1d\u6c42\u3081\u305f\u3044\u76f4\u7dda**\u306b\u4ed6\u306a\u308a\u307e\u305b\u3093\u3002\u4ea4\u5dee\u70b9\u304c\u8907\u6570\u5b58\u5728\u3059\u308b\u5834\u5408\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u305d\u308c\u306f\u3064\u307e\u308a\u5143\u753b\u50cf\u306b**\u8907\u6570\u306e\u76f4\u7dda\u304c\u5b58\u5728\u3059\u308b**(\u53ef\u80fd\u6027\u304c\u9ad8\u3044)\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u306e\u3067\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002\u304b\u304f\u3057\u3066\u3001\u5143\u753b\u50cf\u306b\u6f5c\u3080\u76f4\u7dda\u3092\u898b\u3064\u3051\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n##\u5186\u3092\u691c\u51fa\u3057\u305f\u3044\u5834\u5408\n\u3000**\u5186\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u304c3\u3064\u3042\u308c\u3070\u8868\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059**\u3002\u3053\u3053\u306f\u3001\u6570\u5b66\u306e\u6559\u79d1\u66f8\u306b\u8f09\u3063\u3066\u3044\u308b\u300c$(x-p)^2+(y-q)^2=r^2$\u300d\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\u4e2d\u5fc3\u304c(p, q)\u3067\u534a\u5f84\u304cr\u306e\u5186\u3092\u8003\u3048\u308b\u308f\u3051\u3067\u3059\u306d\u3002\u4e0b\u306e\u56f3\u3067\u306f\u3001C\u70b9\u304c(x, y)\u3067D\u70b9\u304c(p, q)\u3068\u306a\u308a\u307e\u3059\u3002\n![cap3.png](https://qiita-image-store.s3.amazonaws.com/0/29802/a640b7dd-b4e5-4d27-1982-3847ed6b31d9.png)\n \u76f4\u7dda\u306e\u5834\u5408\u306f\u03b8\u3092\u5909\u5316\u3055\u305b\u305f\u308f\u3051\u3067\u3059\u304c\u3001\u4eca\u5ea6\u306fp\u3068q\u3092\u5909\u5316\u3055\u305b\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\u4e09\u5e73\u65b9\u306e\u5b9a\u7406\u304b\u3089r\u3092\u9006\u7b97\u3067\u304d\u307e\u3059\u306e\u3067\u3001\u76f4\u7dda\u306e\u5834\u5408\u3068\u540c\u3058\u304f\u3001\u5143\u753b\u50cf\u306e\u5168\u3066\u306e\u70b9\u306b\u5bfe\u3057\u3066\u540c\u3058\u4f5c\u696d\u3092\u884c\u3046\u3053\u3068\u3067\u3001**\u591a\u304f\u4ea4\u5dee\u3057\u305f\u70b9(p, q, r)\uff1d\u6c42\u3081\u305f\u3044\u5186**\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u66f8\u304d\u65b9\u3067\u304a\u5206\u304b\u308a\u306e\u901a\u308a\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u304c**3\u3064**\u3042\u308b\u3068\u30cf\u30d5\u5909\u63db\u5f8c\u306e\u7a7a\u9593\u306f**3\u6b21\u5143**\u306b\u306a\u308a\u307e\u3059\u3002n\u500b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u8868\u305b\u308b\u56f3\u5f62\u306a\u3089n\u6b21\u5143\u7a7a\u9593\u306b\u306a\u308a\u307e\u3059\u306d\u3002\n\n#\u30cf\u30d5\u5909\u63db\u3057\u305f\u5f8c\u306b\u4f55\u3092\u3059\u308b\u3079\u304d\u304b\n\u3000\u4ee5\u4e0a\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u3057\u3066\u8a18\u8ff0\u3059\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002\n\n* \u5143\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u3080\n* \u524d\u51e6\u7406\u3092\u884c\u3046\u3002\u57fa\u672c\u7684\u306b\u306f\u3001[\u4e8c\u5024\u5316](http://www.mvision.co.jp/WebHelpIM/_RESOURCE/BFT_Mvc_Thresh_level.html)\u3057\u305f\u5f8c\u306b\u30b4\u30df\u3092\u9664\u53bb\u3057\u3001[\u7d30\u7dda\u5316\u51e6\u7406](http://codezine.jp/article/detail/98)\u3092\u884c\u3046\u3053\u3068\u304c\u591a\u3044\n* \u30cf\u30d5\u5909\u63db\u3092\u884c\u3044\u3001\u7d50\u679c\u3092\u914d\u5217\u306a\u3069\u3067\u53d6\u5f97\u3059\u308b\u3002\u30d1\u30e9\u30e1\u30fc\u30bf\u6570\u304c\u591a\u3044\u307b\u3069\u8a08\u7b97\u6642\u9593\u304c\u52a0\u901f\u5ea6\u7684\u306b\u5897\u52a0\u3059\u308b\u306e\u3067\u6ce8\u610f\n* \u591a\u304f\u4ea4\u5dee\u3057\u305f\u70b9\u3092\u691c\u7d22\u3057\u3066\u53d6\u5f97\u3059\u308b\u3002\u305d\u3046\u3044\u3063\u305f\u70b9\u306f\u8907\u6570\u5f97\u3089\u308c\u308b\u3053\u3068\u3082\u3042\u308b\n\n**\u300c[\u306d\u3001\u7c21\u5358\u3067\u3057\u3087\u3046\uff1f](http://dic.pixiv.net/a/%E3%81%AD%E3%80%81%E7%B0%A1%E5%8D%98%E3%81%A7%E3%81%97%E3%82%87%3F)\u300d**\u3068\u8a00\u3044\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u304c\u3001\u305d\u3093\u306a\u308f\u3051\u306a\u3044\u3093\u3067\u3059\u3088\u306d\u2026\u2026\u3002\u6ce8\u610f\u3059\u3079\u304d\u30dd\u30a4\u30f3\u30c8\u3082\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u305f\u3002\n\n* \u30cf\u30d5\u5909\u63db\u3059\u308b\u7bc4\u56f2\u3092\u3088\u304f\u8003\u3048\u308b\u3053\u3068\u3002\u8a08\u7b97\u91cf\u3092\u30b1\u30c1\u308a\u3064\u3064\u7cbe\u5ea6\u306e\u9ad8\u3044\u7d50\u679c\u3092\u5f97\u305f\u3044\u306e\u3067\u3001\u4f8b\u3048\u3070\u76f4\u7dda\u3067\u306f**\u03b8\u306e\u7bc4\u56f2\u3084\u305d\u306e\u5206\u5272\u6570**\u3001\u5186\u3067\u306f**\u4e2d\u5fc3\u306e\u5ea7\u6a19(p, q)\u3084\u534a\u5f84r\u306e\u7bc4\u56f2**\u306b\u3064\u3044\u3066\u4e8b\u524d\u306b\u6761\u4ef6\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002\n* \u91cf\u5b50\u5316\u8aa4\u5dee\u3092\u8003\u616e\u3059\u308b\u3053\u3068\u3002\u7406\u8ad6\u4e0a\u306f\u4e0a\u8a18\u306e\u3088\u3046\u306b\u4ea4\u70b9\u304c\u7dba\u9e97\u306b\u51fa\u3066\u304f\u308b\u306f\u305a\u3067\u3059\u304c\u3001\u5b9f\u969b\u306b\u306f\u91cf\u5b50\u5316\u8aa4\u5dee\u306e\u305b\u3044\u3067\u3042\u308b\u7a0b\u5ea6\u70b9\u304c\u30d6\u30ec\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u8a73\u3057\u304f\u306f\u5f8c\u307b\u3069\u89e3\u8aac\u3057\u307e\u3059\u304c\u3001\u305d\u306e\u305b\u3044\u3067**\u65e2\u306b\u767a\u898b\u3057\u305f\u4ea4\u70b9\u306e\u5468\u308a\u3092\u7121\u8996\u3059\u308b**\u3068\u3044\u3063\u305f\u51e6\u7406\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\u305f\u3060\u305d\u3046\u306a\u308b\u3068\u3001\u4f3c\u305f\u611f\u3058\u306e\u56f3\u5f62\u304c\u4e26\u3093\u3067\u3044\u305f\u5834\u5408\u306b\u691c\u51fa\u3067\u304d\u306a\u304f\u306a\u3063\u305f\u308a\u3059\u308b\u306e\u3067\u30b8\u30ec\u30f3\u30de\u3067\u3059\u304c\u3002\n* \u5e7e\u3064\u307e\u3067\u53d6\u5f97\u3059\u308b\u304b\u3092\u8003\u3048\u308b\u3053\u3068\u3002\u91cf\u5b50\u5316\u8aa4\u5dee\u306e\u8a71\u984c\u306b\u3082\u7e4b\u304c\u308a\u307e\u3059\u304c\u3001\u300c\u4e0a\u4f4d10\u7a2e\u985e\u300d\u3084\u300c\u3057\u304d\u3044\u5024\u672a\u6e80\u306a\u3089\u7121\u8996\u3059\u308b\u300d\u306a\u3069\u3067\u7be9\u306b\u639b\u3051\u306a\u3044\u3068**\u5927\u91cf\u306e\u5019\u88dc**\u304c\u691c\u51fa\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n#\u5b9f\u969b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u4f8b\n\u3000\u3068\u308a\u3042\u3048\u305aJava\u3067\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\u5b9f\u884c\u7d50\u679c\u306f\u6b21\u306e\u753b\u50cf\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\u51e6\u7406\u524d(640x360)\uff1ahttp://i.imgur.com/0g3vWFT.png\n\u30cf\u30d5\u5909\u63db\u5f8c\u306e\u9818\u57df(\u6a2a\u8ef8\u304c\u03b8\u3001\u7e26\u8ef8\u304c\u03c1)\uff1ahttp://i.imgur.com/TQbnDL7.png\n\u30cf\u30d5\u5909\u63db\u5f8c\u306e\u9818\u57df(\u6a2a\u8ef8\u304cp\u3001\u7e26\u8ef8\u304cq)\uff1ahttp://i.imgur.com/VcgM9Y4.png\n\u51e6\u7406\u5f8c(\u691c\u51fa\u3057\u305f\u56f3\u5f62\u3092\u8272\u4ed8\u3051)\uff1ahttp://i.imgur.com/65QtNLJ.png\n\u3000i7-4790K\u30fbWin10\u3067\u5b9f\u884c\u3057\u305f\u3068\u3053\u308d\u3001\u753b\u50cf\u51fa\u529b\u6642\u9593\u3092\u542b\u3081\u30662.4\u79d2\u307b\u3069\u639b\u304b\u308a\u307e\u3057\u305f\u3002\u307e\u3042\u5927\u90e8\u5206\u304c**\u5186\u3092\u691c\u51fa\u3059\u308b\u969b\u306e\u30cf\u30d5\u5909\u63db\u51e6\u7406**\u306a\u306e\u3067\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u304c1\u3064\u5897\u3048\u308b\u3060\u3051\u3067\u3044\u304b\u306b\u9762\u5012\u304b\u304c\u5206\u304b\u308a\u307e\u3059\u306d\u3002\n![calc.png](https://qiita-image-store.s3.amazonaws.com/0/29802/29799cb0-13eb-57c5-2f07-25e636d3633a.png)\n\u3000\u307e\u305f\u3001\u30cf\u30d5\u5909\u63db\u5f8c\u306e\u9818\u57df\u3092\u898b\u308c\u3070\u5206\u304b\u308b\u3088\u3046\u306b\u3001\u660e\u308b\u3044\u70b9\u306e\u5468\u308a\u306b\u30e2\u30e4\u306e\u3088\u3046\u306b\u307b\u3093\u306e\u308a\u3068\u660e\u308b\u3044\u70b9\u304c\u7d9a\u3044\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\u305d\u306e\u660e\u308b\u3044\u70b9\u3059\u3089\u3082\u3001\u96a3\u63a5\u30d4\u30af\u30bb\u30eb\u306f\u540c\u3058\u3050\u3089\u3044\u660e\u308b\u304b\u3063\u305f\u308a\u3059\u308b\u306e\u3067\u524d\u8ff0\u306e\u3088\u3046\u306a\u7be9\u639b\u3051\u3092\u3057\u306a\u3044\u3068\u4e0a\u624b\u304f\u691c\u51fa\u3067\u304d\u306a\u3044\u3068\u5206\u304b\u308b\u3067\u3057\u3087\u3046\u3002\n\u3000\u4ee5\u4e0b\u306b\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u307e\u3059\u304c\u3001\u52c9\u5f37\u3059\u308b\u969b\u306f\u305d\u306e\u307e\u307e\u30b3\u30d4\u30da\u306a\u3093\u3066\u305b\u305a\u81ea\u529b\u3067\u5b9f\u88c5\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\u3088\u308a\u591a\u304f\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5fc5\u8981\u3068\u3059\u308b\u56f3\u5f62\u3092\u691c\u51fa\u3057\u3066\u307f\u3066\u3082\u9762\u767d\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n```hough.java\n/* Hough\u5909\u63db\u306e\u30b5\u30f3\u30d7\u30eb\n * Hough\u5909\u63db\u3057\u305f\u969b\u306f\u3001\n * \u76f4\u7dda\u2192\u6a2a\u00d7\u7e26\u304c\u89d2\u5ea6\u5206\u5272\u6570\u00d7(2 * \u5bfe\u89d2\u7dda\u9577)\u306b\u5bfe\u5fdc\u3059\u308b\n * (\u3053\u3053\u3067\u5bfe\u89d2\u7dda\u9577\u30922\u500d\u3057\u3066\u3044\u308b\u306e\u306f\u8ca0\u6570\u3092\u60f3\u5b9a\u3057\u3066\u3044\u308b)\n * \u5186\u2192\u6a2a\u00d7\u7e26\u304c\u6a2a\u00d7\u7e26\u00d7\u534a\u5f84\u306b\u5bfe\u5fdc\u3059\u308b\n */\n\n/* \u5f15\u6570\u306e1\u3064\u76ee\u304c\u300cput\u300d\u3060\u3063\u305f\u306a\u3089\u3001counter*.png\u3092\u51fa\u529b\u3059\u308b */\n\nimport java.awt.Color;\nimport java.awt.Graphics2D;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.util.ArrayList;\nimport javax.imageio.ImageIO;\n\npublic class hough{\n\t// \u5b9a\u6570\n\tstatic final int kAngleSplits = 1024;\t//0\uff5e\u03c0\u3092\u3053\u306e\u6570\u3060\u3051\u5206\u5272\u3059\u308b\n\tstatic final int kMinCount = 100;\t\t//\u30ab\u30a6\u30f3\u30c8\u304c\u3053\u306e\u6570\u672a\u6e80\u306a\u3089\u7121\u8996\u3059\u308b\n\tstatic final int kMaxCircleR = 100;\t//\u5186\u304c\u3053\u308c\u4ee5\u4e0a\u306e\u5927\u304d\u3055\u306a\u3089\u7121\u8996\u3059\u308b\n\tstatic final double kTableConst = Math.PI / kAngleSplits;\t//\u8a08\u7b97\u7528\u5b9a\u6570\n\tstatic final double kDegRad = 180 / Math.PI;\t//\u5909\u63db\u7528\u5b9a\u6570\n\t// \u5909\u6570\n\tstatic int w, h, diagonal, d2;\n\tstatic ArrayList<Double> sin_table, cos_table;\n\tstatic ArrayList<Integer> dgl_table;\n\t// main\u95a2\u6570\n\tpublic static void main(String args[]){\n\t\tboolean save_flg = false;\n\t\tif(args.length > 0 && args[0].equals(\"put\")) save_flg = true;\n\t\t// \u753b\u50cf\u3092\u8aad\u307f\u8fbc\u307f\n\t\tBufferedImage load_image;\n\t\ttry{\n\t\t\tload_image = ImageIO.read(new File(\"sample.png\"));\n\t\t}\n\t\tcatch(Exception error){\n\t\t\terror.printStackTrace();\n\t\t\treturn;\n\t\t}\n\t\tw = load_image.getWidth();\n\t\th = load_image.getHeight();\n\t\tSystem.out.println(\"\u753b\u50cf\u30b5\u30a4\u30ba\uff1a\" + w + \"x\" + h);\n\t\tlong start = System.nanoTime();\n\t\t// \u66f8\u304d\u8fbc\u307f\u7528\u753b\u50cf\u3092\u7528\u610f\u3059\u308b\n\t\tBufferedImage save_image = new BufferedImage(w, h, BufferedImage.TYPE_INT_BGR);\n\t\tGraphics2D g2d = (Graphics2D)save_image.getGraphics();\n\t\tg2d.drawImage(load_image, 0, 0, null);\n\t\t// \u4e8c\u5024\u5316\n\t\tArrayList<Integer> binary_image = toBinaryImage(load_image);\n\t\t// \u6570\u5024\u8a08\u7b97\u7528\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u4e8b\u524d\u306b\u7528\u610f\u3059\u308b\n\t\tsin_table = new ArrayList<Double>(kAngleSplits);\n\t\tcos_table = new ArrayList<Double>(kAngleSplits);\n\t\tfor(int t = 0; t < kAngleSplits; t++){\n\t\t\tsin_table.add(Math.sin(kTableConst * t));\n\t\t\tcos_table.add(Math.cos(kTableConst * t));\n\t\t}\n\t\tdgl_table = new ArrayList<Integer>(w * h);\n\t\tfor(int y = 0; y < h; y++){\n\t\t\tfor(int x = 0; x < w; x++){\n\t\t\t\tdgl_table.add((int)(Math.sqrt(x * x + y * y) + 0.5));\n\t\t\t}\n\t\t}\n\t\t// \u76f4\u7dda\u3092\u691c\u51fa\u3059\u308b\n\t\tArrayList<Tuple2> line_list = calcHoughLine(binary_image, save_flg);\n\t\tdrawHoughLine(save_image, line_list);\n\t\t// \u5186\u3092\u691c\u51fa\u3059\u308b\n\t\tArrayList<Tuple3> circle_list = calcHoughCircle(binary_image, save_flg);\n\t\tdrawHoughCircle(save_image, circle_list);\n\t\t// \u7d50\u679c\u3092\u66f8\u304d\u51fa\u3057\n\t\tlong stop = System.nanoTime();\n\t\tSystem.out.println((stop - start) / 1000 / 1000 + \"ms\");\n\t\ttry{\n\t\t\tImageIO.write(save_image, \"png\", new File(\"result.png\"));\n\t\t}\n\t\tcatch(Exception error){\n\t\t\terror.printStackTrace();\n\t\t\treturn;\n\t\t}\n\t}\n\t// \u753b\u50cf\u3092\u4e8c\u5024\u5316\u3057\u3066\u8fd4\u3059\n\tprivate static ArrayList<Integer> toBinaryImage(BufferedImage src_image){\n\t\tArrayList<Integer> dst_image = new ArrayList<Integer>(w * h);\n\t\tfor(int y = 0; y < h; y++){\n\t\t\tfor(int x = 0; x < w; x++){\n\t\t\t\tint color = src_image.getRGB(x, y);\n\t\t\t\tint r = (color & 0xff0000) >> 16;\n\t\t\t\tint g = (color & 0xff00) >> 8;\n\t\t\t\tint b = color & 0xff;\n\t\t\t\tdouble Y = 0.299 * r + 0.587 * g + 0.114 * b;\t//YCbCr\n\t\t\t\tif(Y > 127.5)\n\t\t\t\t\tdst_image.add(0);\n\t\t\t\telse\n\t\t\t\t\tdst_image.add(1);\n\t\t\t}\n\t\t}\n\t\treturn dst_image;\n\t}\n\t// \u753b\u50cf\u3092Hough\u5909\u63db\u3059\u308b(\u76f4\u7dda\u504f)\n\tprivate static ArrayList<Integer> getHoughLine(ArrayList<Integer> src_image){\n\t\tdiagonal = (int)Math.sqrt(w * w + h * h);\n\t\td2 = diagonal * 2;\n\t\tArrayList<Integer> dst_image = new ArrayList<Integer>(kAngleSplits * d2);\n\t\tfor(int r = 0; r < d2; r++){\n\t\t\tfor(int t = 0; t < kAngleSplits; t++){\n\t\t\t\tdst_image.add(0);\n\t\t\t}\n\t\t}\n\t\t// \u5ea7\u6a19\u5909\u63db\u3092\u884c\u3044\u3001\u7d50\u679c\u306b\u52a0\u7b97\u3057\u3066\u304a\u304f\n\t\tfor(int y = 0; y < h; y++){\n\t\t\tfor(int x = 0; x < w; x++){\n\t\t\t\tif(src_image.get(y * w + x) == 0) continue;\n\t\t\t\tfor(int t = 0; t < kAngleSplits; t++){\n\t\t\t\t\tint r = (int)(x * cos_table.get(t) + y * sin_table.get(t) + 0.5);\n\t\t\t\t\tint p = (r + diagonal) * kAngleSplits + t;\n\t\t\t\t\tdst_image.set(p, dst_image.get(p) + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dst_image;\n\t}\n\t// \u76f4\u7dda\u3092\u691c\u51fa\u3059\u308b\n\tprivate static ArrayList<Tuple2> calcHoughLine(ArrayList<Integer> src_image, boolean save_flg){\n\t\tArrayList<Integer> counter = getHoughLine(src_image);\n\t\t// \u30ab\u30a6\u30f3\u30c8\u3092\u753b\u50cf\u5316\u3059\u308b\n\t\tint max_count = 0;\n\t\tif(save_flg){\n\t\t\tBufferedImage counter_image = new BufferedImage(kAngleSplits, d2, BufferedImage.TYPE_INT_BGR);\n\t\t\tfor(int r = 0; r < d2; r++){\n\t\t\t\tfor(int t = 0; t < kAngleSplits; t++){\n\t\t\t\t\tint cnt = counter.get(r * kAngleSplits + t);\n\t\t\t\t\tif(max_count < cnt) max_count = cnt;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int r = 0; r < d2; r++){\n\t\t\t\tfor(int t = 0; t < kAngleSplits; t++){\n\t\t\t\t\tint cnt = counter.get(r * kAngleSplits + t);\n\t\t\t\t\tint color = (int)(255.0 * cnt / max_count);\n\t\t\t\t\tcounter_image.setRGB(t, r, color * 0x010101);\n\t\t\t\t}\n\t\t\t}\n\t\t\ttry{\n\t\t\t\tImageIO.write(counter_image, \"png\", new File(\"counter.png\"));\n\t\t\t}\n\t\t\tcatch(Exception error){\n\t\t\t\terror.printStackTrace();\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\t// \u6700\u3082\u30ab\u30a6\u30f3\u30c8\u304c\u591a\u3044\u3082\u306e\u304b\u3089\u3001\u76f4\u7dda\u3068\u3057\u3066\u8868\u793a\u3059\u308b\n\t\tArrayList<Tuple2> result = new ArrayList<Tuple2>();\n\t\tSystem.out.println(\"\u76f4\u7dda\u306e\u691c\u51fa\u7d50\u679c\uff1a\");\n\t\twhile(true){\n\t\t\t// \u6700\u3082\u30ab\u30a6\u30f3\u30c8\u304c\u591a\u3044\u3082\u306e\u3092\u691c\u7d22\u3059\u308b\n\t\t\tmax_count = 0;\n\t\t\tint t_max = 0, r_max = 0;\n\t\t\tfor(int r = 0; r < d2; r++){\n\t\t\t\tfor(int t = 0; t < kAngleSplits; t++){\n\t\t\t\t\tint cnt = counter.get(r * kAngleSplits + t);\n\t\t\t\t\tif(max_count < cnt){\n\t\t\t\t\t\tmax_count = cnt;\n\t\t\t\t\t\tt_max = t;\n\t\t\t\t\t\tr_max = r;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(max_count < kMinCount) break;\n\t\t\tresult.add(new Tuple2<Integer, Integer>(t_max, r_max));\n\t\t\tSystem.out.println(\"\u3000\u30ab\u30a6\u30f3\u30c8\uff1a\" + max_count + \" \u89d2\u5ea6\uff1a\" + (t_max * kTableConst * kDegRad) + \" \u8ddd\u96e2\uff1a\" + (r_max - diagonal));\n\t\t\t// \u985e\u4f3c\u3057\u305f\u5468\u8fba\u306e\u30ab\u30a6\u30f3\u30c8\u3092\u6d88\u53bb\u3059\u308b\n\t\t\tfor(int r = -10; r <= 10; r++){\n\t\t\t\tfor(int t = -30; t <= 30; t++){\n\t\t\t\t\tint t2 = t_max + t, r2 = r_max + r;\n\t\t\t\t\tif(t2 < 0){\n\t\t\t\t\t\tt2 += kAngleSplits;\n\t\t\t\t\t\tr2 = -r2;\n\t\t\t\t\t}\n\t\t\t\t\tif(t2 >= kAngleSplits){\n\t\t\t\t\t\tt2 -= kAngleSplits;\n\t\t\t\t\t\tr2 = -r2;\n\t\t\t\t\t}\n\t\t\t\t\tif(r2 < 0 || r2 >= d2) continue;\n\t\t\t\t\tcounter.set(r2 * kAngleSplits + t2, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t// \u76f4\u7dda\u3092\u66f8\u304d\u51fa\u3059\n\tprivate static void drawHoughLine(BufferedImage image, ArrayList<Tuple2> list){\n\t\tGraphics2D g2d = (Graphics2D)image.getGraphics();\n\t\tg2d.setColor(Color.BLUE);\n\t\tfor(Tuple2<Integer, Integer> temp : list){\n\t\t\tint t = temp.t1, r = temp.t2 - diagonal;\n\t\t\tif(t != 0){\n\t\t\t\tfor(int x = 0; x < w; x++){\n\t\t\t\t\tint y = (int)((r - x * cos_table.get(t)) / sin_table.get(t));\n\t\t\t\t\tif(y < 0 || y >= h) continue;\n\t\t\t\t\tg2d.drawRect(x, y, 0, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(t != kAngleSplits / 2){\n\t\t\t\tfor(int y = 0; y < h; y++){\n\t\t\t\t\tint x = (int)((r - y * sin_table.get(t)) / cos_table.get(t));\n\t\t\t\t\tif(x < 0 || x >= w) continue;\n\t\t\t\t\tg2d.drawRect(x, y, 0, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// \u753b\u50cf\u3092Hough\u5909\u63db\u3059\u308b(\u5186\u5f27\u504f)\n\tprivate static ArrayList<Integer> getHoughCircle(ArrayList<Integer> src_image){\n\t\tArrayList<Integer> dst_image = new ArrayList<Integer>(w * h * kMaxCircleR);\n\t\tfor(int x = 0; x < w; x++){\n\t\t\tfor(int y = 0; y < h; y++){\n\t\t\t\tfor(int r = 0; r < kMaxCircleR; r++){\n\t\t\t\t\tdst_image.add(0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// \u5ea7\u6a19\u5909\u63db\u3092\u884c\u3044\u3001\u7d50\u679c\u306b\u52a0\u7b97\u3057\u3066\u304a\u304f\n\t\tfor(int y = 0; y < h; y++){\n\t\t\tfor(int x = 0; x < w; x++){\n\t\t\t\tif(src_image.get(y * w + x) == 0) continue;\n\t\t\t\tfor(int cy = Math.max(y - kMaxCircleR, 0); cy <= Math.min(y + kMaxCircleR, h - 1); cy++){\n\t\t\t\t\tint dy = Math.abs(cy - y);\n\t\t\t\t\tfor(int cx = Math.max(x - kMaxCircleR, 0); cx <= Math.min(x + kMaxCircleR, w - 1); cx++){\n\t\t\t\t\t\tint dx = Math.abs(cx - x);\n\t\t\t\t\t\tint r = dgl_table.get(dy * w + dx);\n\t\t\t\t\t\tif(r >= kMaxCircleR) continue;\n\t\t\t\t\t\tint p = (cy * w + cx) * kMaxCircleR + r;\n\t\t\t\t\t\tdst_image.set(p, dst_image.get(p) + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dst_image;\n\t}\n\t// \u5186\u3092\u691c\u51fa\u3059\u308b\n\tprivate static ArrayList<Tuple3> calcHoughCircle(ArrayList<Integer> src_image, boolean save_flg){\n\t\tArrayList<Integer> counter = getHoughCircle(src_image);\n\t\t// \u30ab\u30a6\u30f3\u30c8\u3092\u753b\u50cf\u5316\u3059\u308b\n\t\tint max_count = 0;\n\t\tif(save_flg){\n\t\t\tBufferedImage counter_image_c = new BufferedImage(w, h, BufferedImage.TYPE_INT_BGR);\n\t\t\tBufferedImage counter_image_r = new BufferedImage(w, h, BufferedImage.TYPE_INT_BGR);\n\t\t\tfor(int y = 0; y < h; y++){\n\t\t\t\tfor(int x = 0; x < w; x++){\n\t\t\t\t\tfor(int r = 0; r < kMaxCircleR; r++){\n\t\t\t\t\t\tint cnt = counter.get((y * w + x) * kMaxCircleR + r);\n\t\t\t\t\t\tif(max_count < cnt) max_count = cnt;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int y = 0; y < h; y++){\n\t\t\t\tfor(int x = 0; x < w; x++){\n\t\t\t\t\tint max_count_2 = 0, max_r = 0;\n\t\t\t\t\tfor(int r = 0; r < kMaxCircleR; r++){\n\t\t\t\t\t\tint cnt = counter.get((y * w + x) * kMaxCircleR + r);\n\t\t\t\t\t\tif(max_count_2 < cnt){\n\t\t\t\t\t\t\tmax_count_2 = cnt;\n\t\t\t\t\t\t\tmax_r = r;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcounter_image_c.setRGB(x, y, 0x010101 * (int)(0xff * max_count_2 / max_count));\n\t\t\t\t\tcounter_image_r.setRGB(x, y, 0x010101 * (int)(0xff * max_r / kMaxCircleR));\n\t\t\t\t}\n\t\t\t}\n\t\t\ttry{\n\t\t\t\tImageIO.write(counter_image_c, \"png\", new File(\"counter2_c.png\"));\n\t\t\t\tImageIO.write(counter_image_r, \"png\", new File(\"counter2_r.png\"));\n\t\t\t}\n\t\t\tcatch(Exception error){\n\t\t\t\terror.printStackTrace();\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\t// \u6700\u3082\u30ab\u30a6\u30f3\u30c8\u304c\u591a\u3044\u3082\u306e\u304b\u3089\u3001\u5186\u3068\u3057\u3066\u8868\u793a\u3059\u308b\n\t\tArrayList<Tuple3> result = new ArrayList<Tuple3>();\n\t\tSystem.out.println(\"\u5186\u306e\u691c\u51fa\u7d50\u679c\uff1a\");\n\t\twhile(true){\n\t\t\t// \u6700\u3082\u30ab\u30a6\u30f3\u30c8\u304c\u591a\u3044\u3082\u306e\u3092\u691c\u7d22\u3059\u308b\n\t\t\tmax_count = 0;\n\t\t\tint x_max = 0, y_max = 0, r_max = 0;\n\t\t\tfor(int y = 0; y < h; y++){\n\t\t\t\tfor(int x = 0; x < w; x++){\n\t\t\t\t\tfor(int r = 0; r < kMaxCircleR; r++){\n\t\t\t\t\t\tint cnt = counter.get((y * w + x) * kMaxCircleR + r);\n\t\t\t\t\t\tif(max_count < cnt){\n\t\t\t\t\t\t\tmax_count = cnt;\n\t\t\t\t\t\t\tx_max = x;\n\t\t\t\t\t\t\ty_max = y;\n\t\t\t\t\t\t\tr_max = r;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(max_count < kMinCount) break;\n\t\t\tTuple3 t3 = new Tuple3<Integer, Integer, Integer>(x_max, y_max, r_max);\n\t\t\tresult.add(t3);\n\t\t\tSystem.out.println(\"\u3000\u30ab\u30a6\u30f3\u30c8\uff1a\" + max_count + \" \u4e2d\u5fc3\uff1a(\" + x_max + \",\" + y_max + \") \u534a\u5f84\uff1a\" + r_max);\n\t\t\t// \u985e\u4f3c\u3057\u305f\u5468\u8fba\u306e\u30ab\u30a6\u30f3\u30c8\u3092\u6d88\u53bb\u3059\u308b\n\t\t\tfor(int y = -5; y <= 5; y++){\n\t\t\t\tint y2 = y_max + y;\n\t\t\t\tif(y2 < 0 || y2 >= h) continue;\n\t\t\t\tfor(int x = -5; x <= 5; x++){\n\t\t\t\t\tint x2 = x_max + x;\n\t\t\t\t\tif(x2 < 0 || x2 >= w) continue;\n\t\t\t\t\tfor(int r = -5; r <= 5; r++){\n\t\t\t\t\t\tint r2 = r_max + r;\n\t\t\t\t\t\tif(r2 < 0) continue;\n\t\t\t\t\t\tcounter.set((y2 * w + x2) * kMaxCircleR + r2, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t// \u5186\u3092\u66f8\u304d\u51fa\u3059\n\tprivate static void drawHoughCircle(BufferedImage image, ArrayList<Tuple3> list){\n\t\tGraphics2D g2d = (Graphics2D)image.getGraphics();\n\t\tg2d.setColor(Color.RED);\n\t\tfor(Tuple3<Integer, Integer, Integer> temp : list){\n\t\t\tint x = temp.t1, y = temp.t2, r = temp.t3;\n\t\t\tg2d.drawOval(x - r, y - r, r * 2, r * 2);\n\t\t}\n\t}\n}\n\n// \u30bf\u30d7\u30eb\nclass Tuple2<T1, T2>{\n\tpublic T1 t1;\n\tpublic T2 t2;\n\tpublic Tuple2(){}\n\tpublic Tuple2(T1 t1, T2 t2){\n\t\tthis.t1 = t1;\n\t\tthis.t2 = t2;\n\t}\n}\nclass Tuple3<T1, T2, T3>{\n\tpublic T1 t1;\n\tpublic T2 t2;\n\tpublic T3 t3;\n\tpublic Tuple3(){}\n\tpublic Tuple3(T1 t1, T2 t2, T3 t3){\n\t\tthis.t1 = t1;\n\t\tthis.t2 = t2;\n\t\tthis.t3 = t3;\n\t}\n}\n```\n", "tags": ["Hough\u5909\u63db", "\u30cf\u30d5\u5909\u63db", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0", "Java", "\u753b\u50cf\u51e6\u7406"]}