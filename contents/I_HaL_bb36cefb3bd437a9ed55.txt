{"tags": ["RaspberryPi", "HDC1000", "\u96fb\u5b50\u5de5\u4f5c", "I2C", "Thread"], "context": "\u521d\u3081\u3066C++\u306710\u884c\u4ee5\u4e0a\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\u7a1a\u62d9\u306a\u70b9\u304c\u591a\u3005\u3042\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u304c\u304a\u8a31\u3057\u304f\u3060\u3055\u3044\u3002\n\n1.\u52d5\u6a5f\nRaspberry Pi\u306b\u5404\u7a2eI2C\u30bb\u30f3\u30b5\u30fc\u3092\u53d6\u308a\u4ed8\u3051\u3066\u6bd4\u8f03\u3092\u884c\u3044\u305f\u3044\u3068\u601d\u3044\u3001\u6700\u521d\u306fC\u8a00\u8a9e\u3092\u4f7f\u3063\u3066\u66f8\u3044\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u5404\u7a2eI2C\u30bb\u30f3\u30b5\u30fc\u306e\u521d\u671f\u5316\u30b3\u30fc\u30c9\u3084\u8aad\u307f\u51fa\u3057\u30b3\u30fc\u30c9\u304c\u5897\u3048\u3066\u304f\u308b\u3068\u3044\u3061\u3044\u3061\u95a2\u6570\u540d\u3092\u5909\u3048\u3066\u5bfe\u5fdc\u3059\u308b\u306e\u304c\u9762\u5012\u306a\u306e\u3068\u3001A/D\u5909\u63db\u5668\u306e\u8aad\u307f\u51fa\u3057\u6642\u9593\u3092\u5f85\u3064\u306e\u306b\u9010\u6b21\u5b9f\u884c\u306f\u52b9\u7387\u304c\u60aa\u3044\u3068\u8003\u3048\u3066\u3001\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306e\u7df4\u7fd2\u304c\u3066\u3089\u3001C++\u3092\u4f7f\u3046\u4e8b\u3092\u601d\u3044\u7acb\u3061\u307e\u3057\u305f\u3002\n\n2.\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u8aac\u660e\n1\u79d2\u9593\u306b1\u56de\u3001I2C\u30bb\u30f3\u30b5\u30fc\u304b\u3089\u3001\u6c17\u6e29\u3001\u6e7f\u5ea6\u3001\u5927\u6c17\u5727\u3092\u53d6\u5f97\u3057console\u306b\u51fa\u529b\u3057\u307e\u3059\u3002CTRL-C(SIGINT)\u3067\u505c\u6b62\u3057\u307e\u3059\u3002\n\n3.\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u7279\u5fb4\n\n\u5404\u7a2eI2C\u30bb\u30f3\u30b5\u30fc\u306e\u30b3\u30fc\u30c9\u3092\u30af\u30e9\u30b9\u5316\u3057\u3001\u7c21\u5358\u306b\u4f7f\u3048\u308b\u69d8\u306b\u3057\u305f\u3002\n\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u51e6\u7406\u3067I/O\u5f85\u3061\u6642\u9593\u306b\u4ed6\u306e\u51e6\u7406\u3092\u884c\u3048\u308b\u69d8\u306b\u3057\u305f\u3002\n\u7df4\u7fd2\u3067\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u3067\u3059\u306e\u3067\u3001\u307e\u3060\u304d\u3063\u3068\u30d0\u30b0\u304c\u6f5c\u3093\u3067\u3044\u308b\u3067\u3057\u3087\u3046\u3002\u3002\u3002\n\n\n4. \u7528\u610f\u3057\u305f\u3082\u306e\n\n\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\n\n\nRaspberry Pi 1 Model B\n\uff28\uff24\uff23\uff11\uff10\uff10\uff10\u4f7f\u7528\u3000\u6e29\u6e7f\u5ea6\u30bb\u30f3\u30b5\u30fc\u30e2\u30b8\u30e5\u30fc\u30eb (\u79cb\u6708\u96fb\u5b50)\n\uff2d\uff30\uff2c\uff11\uff11\uff15\uff21\uff12\u4f7f\u7528\u5927\u6c17\u5727\u30bb\u30f3\u30b5\u30fc\u30e2\u30b8\u30e5\u30fc\u30eb\u30ad\u30c3\u30c8\uff08\uff29\uff12\uff23\uff09(\u79cb\u6708\u96fb\u5b50)\n\uff2d\uff33\uff15\uff16\uff10\uff17\u9ad8\u5ea6\u8a08\u6e2c\u30e2\u30b8\u30e5\u30fc\u30eb(Parallax Inc.)\nRaspberry Pi\uff08\u30e9\u30ba\u30d9\u30ea\u30fc\u30d1\u30a4\uff09\u7528\u30e6\u30cb\u30d0\u30fc\u30b5\u30eb\u57fa\u677f UB-RPI01(\u30b5\u30f3\u30cf\u30e4\u30c8)\n\u30cf\u30f3\u30c0\u5c11\u3005\u3001\u914d\u7dda\u6750\u5c11\u3005\u3001\n\u305d\u306e\u4ed6\u3001SD\u30ab\u30fc\u30c9\u3001\u30b1\u30fc\u30d6\u30eb\u3001\u30b1\u30fc\u30b9\u306a\u3069\n\n\n\n\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\n\nOS Raspbian\nWiringPi\n\n\n\u53c2\u8003\n\n>uname -a\nLinux rasp1 3.12.28+ #709 PREEMPT Mon Sep 8 15:28:00 BST 2014 armv6l GNU/Linux\n>g++ --version\ng++ (Debian 4.6.3-14+rpi1) 4.6.3\nCopyright (C) 2011 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n\n\n5. Makefile\nMakefile\u3067\u3059\u3002\n# Makefile for test.cpp\ntest: test.cpp\n    g++ -Wall -O2 -o a.out test.cpp -lwiringPi -pthread -std=c++0x \n\n\n6. \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3067\u3059\u3002\u3082\u3057\u3001\u6c17\u306b\u306a\u308b\u3068\u3053\u3084\u9593\u9055\u3044\u306a\u3069\u3042\u308c\u3070\u30b3\u30e1\u30f3\u30c8\u3044\u305f\u3060\u3051\u308b\u3068\u52a9\u304b\u308a\u307e\u3059\u3002C\u8a00\u8a9e\u306e\u30ad\u30e3\u30b9\u30c8\u7b49\u3001\u307e\u3060\u81ea\u4fe1\u304c\u306a\u3044\u3067\u3059\u3002\n#include <iostream>\n#include <thread>\n#include <stdio.h>\n#include <stdint.h>\n#include <wiringPi.h>\n#include <wiringPiI2C.h>\n#include <time.h>\n#include <signal.h>\n\n//using namespace std;\n//MS5607-02BA03 Barometric Pressure Sensor\nclass MS5607\n{\npublic:\n  void Init();\n  void Get();\n  double Read( unsigned char data_type);\nprivate:\n  static const unsigned char cmd_reset    = 0x1e;\n  static const unsigned char cmd_adc_read = 0x00;\n  static const unsigned char cmd_adc_conv = 0x40;\n  static const unsigned char cmd_adc_d1   = 0x00;\n  static const unsigned char cmd_adc_d2   = 0x10;\n  static const unsigned char cmd_adc_256  = 0x00;\n  static const unsigned char cmd_adc_512  = 0x02;\n  static const unsigned char cmd_adc_1024 = 0x04;\n  static const unsigned char cmd_adc_2048 = 0x06;\n  static const unsigned char cmd_adc_4096 = 0x08;\n  static const unsigned char cmd_prom_rd  = 0xa0;\n  int fd;\n  unsigned char DevAddr; // 0x77\n\n  unsigned int c0,c1,c2,c3,c4,c5,c6,c7;//16bit\n  unsigned int d1,d2;//24bit\n  int dt,temp;\n  int64_t off,sens;\n  int p;\n\n  unsigned int swap16(unsigned int reg);\n  void debug();\n  void debug1();\n};\nunsigned int MS5607::swap16(unsigned int reg)\n{\n  reg=reg&0x0000ffff;\n  reg=(((reg<<8)|(reg>>8))&0x0000ffff);\n  return(reg);\n}\nvoid MS5607::debug1()\n{\n//debug data;\n  c1=46372;\n  c2=43981;\n  c3=29059;\n  c4=27842;\n  c5=31553;\n  c6=28165;\n  d1=6465444;\n  d2=8077636;\n}\n\nvoid MS5607::debug()\n{\n  printf(\"c1   c2    c3    c4    c5    c6\\n\");\n  printf(\"%05d %05d %05d %05d %05d %05d\\n\",\n    c1,c2,c3,c4,c5,c6);\n\n  printf(\"%04x %016x\\n\",0,c0);\n  printf(\"%04x %016x\\n\",1,c1);\n  printf(\"%04x %016x\\n\",2,c2);\n  printf(\"%04x %016x\\n\",3,c3);\n  printf(\"%04x %016x\\n\",4,c4);\n  printf(\"%04x %016x\\n\",5,c5);\n  printf(\"%04x %016x\\n\",6,c6);\n  printf(\"%04x %016x\\n\",7,c7);\n\n  printf(\"d1        d2\\n\");\n  printf(\"%08d  %08d\\n\",d1,d2);\n\n  printf(\"dt        temp\\n\");\n  printf(\"%08d  %08d\\n\",dt,temp);\n\n  printf(\"off       sens    p\\n\");\n  printf(\"%10lld  %10lld  %08d\\n\",off,sens,p);\n\n}\n\nvoid MS5607::Init()\n{\n  DevAddr=0x77;\n  fd= wiringPiI2CSetup(DevAddr);\n  if(fd<0)\n    {\n      std::cerr <<\"\u30bb\u30f3\u30b5\u30fc\u8a2d\u5b9a\u30a8\u30e9\u30fc\"<<std::endl;\n    }\n\n  wiringPiI2CWrite(fd, cmd_reset); //Reset\n  usleep(1000000);\n\n  unsigned int reg;\n  reg=wiringPiI2CReadReg16(fd,cmd_prom_rd+0);\n  c0=swap16(reg);\n  reg=wiringPiI2CReadReg16(fd,cmd_prom_rd+2);\n  c1=swap16(reg);\n  reg=wiringPiI2CReadReg16(fd,cmd_prom_rd+4);\n  c2=swap16(reg);\n  reg=wiringPiI2CReadReg16(fd,cmd_prom_rd+6);\n  c3=swap16(reg);\n  reg=wiringPiI2CReadReg16(fd,cmd_prom_rd+8);\n  c4=swap16(reg);\n  reg=wiringPiI2CReadReg16(fd,cmd_prom_rd+10);\n  c5=swap16(reg);\n  reg=wiringPiI2CReadReg16(fd,cmd_prom_rd+12);\n  c6=swap16(reg);\n  reg=wiringPiI2CReadReg16(fd,cmd_prom_rd+14);\n  c7=swap16(reg);\n}\nvoid MS5607::Get()\n{\n  unsigned int reg;\n  unsigned char buff[4];\n\n  wiringPiI2CWrite(fd, cmd_adc_conv|cmd_adc_d1|cmd_adc_4096); //Convert\n  usleep(100000);\n  wiringPiI2CWrite(fd, cmd_adc_read); //\n  read(fd,buff,3);\n  reg=0;\n  reg=reg |(buff[0]<<16);\n  reg=reg |(buff[1]<<8);\n  reg=reg |(buff[2]<<0);\n  d1=reg; \n\n  wiringPiI2CWrite(fd, cmd_adc_conv|cmd_adc_d2|cmd_adc_4096); //Convert\n  usleep(100000);\n\n  wiringPiI2CWrite(fd, cmd_adc_read); //\n  read(fd,buff,3);\n  reg=0;\n  reg=reg |(buff[0]<<16);\n  reg=reg |(buff[1]<<8);\n  reg=reg |(buff[2]<<0);\n  d2=reg; \n\n  //  debug1();\n  dt=(int)(d2-(c5<<8));\n  temp=2000+((dt*c6)>>23);\n  int64_t x1,x2,x3;\n  x1=(int64_t)c2<<17;\n  x2=(c4*dt);\n  x3=x2>>6;\n  off=x1+x3;\n  //  printf(\"x1=%lld x2=%lld x3=%lld off=%lld\\n\",x1,x2,x3,off);\n  //off=(c2<<17)+((c4*dt)>>6);\n  sens=(c1<<16)+((c3*dt)>>7);\n  x1=d1*sens>>21;\n  p=(int)((static_cast<int64_t>(x1)-static_cast<int64_t>(off))>>15);\n  //  debug();\n}\ndouble MS5607::Read(unsigned char data_type)\n{\n  if(data_type==0) return ((double)temp/100);\n  if(data_type==1) return ((double)p/100);\n  return((double)p/100);\n}\n\n//MPL115A2 Digital Barometer\nclass MPL115A2{\npublic:\n  void Init();\n  void Get();\n  double Read( unsigned char data_type);\n  void conv_test_exec();\nprivate:\n  double conv_double( unsigned int reg, unsigned int n);\n  void conv_test(unsigned int test,unsigned int n);\n  int fd;\n  unsigned char DevAddr; // 0x60\n  double padc;\n  double tadc;\n  double a0,b1,b2,c12,p_comp,p_hpa,temp;\n};\n\ndouble MPL115A2::conv_double( unsigned int reg, unsigned int n)\n{\n  union \n  {\n    double d;\n    uint64_t i;\n    struct\n    {\n      uint64_t frac :52;\n      unsigned int exp :11;\n      unsigned int sign :1;\n    } b;\n  }u;\n  unsigned int s,m;\n  u.i=0;\n  reg=(((reg<<8)|(reg>>8))&0x0000ffff);\n  if(reg==0)\n    {\n      u.d=0;\n    }\n  else \n    {\n      if(((reg>>15)&0x01)==0)\n        {\n          u.b.sign=0;\n        }\n      else\n        {\n          u.b.sign=1;\n          reg=((reg^(-1))+1)&0x0000ffff;//2\u306e\u88dc\u6570\u3092\u623b\u3059\u3002\n        }\n      m=0x8000;\n      for(s=0;s<15;s++)//\u6700\u4e0a\u4f4d\u306e1\u304c\u4f55\u30d3\u30c3\u30c8\u3081\u304b\u8abf\u3079\u308b\u3002\n    {\n      if(((m>>s)&reg) != 0) break;\n    }\n      u.b.frac = (uint64_t)((reg<<s)&0x7fff)<<(52-15);\n      u.b.exp  = 0x03ff+n-s;\n    }\n  return(u.d);\n}\nvoid MPL115A2::conv_test(unsigned int reg,unsigned int n)\n{\n  printf(\"--------------\\n\");\n  printf(\"reg=%08x n=%d\\n\",reg,n);\n  reg=(((reg<<8)|(reg>>8))&0x0000ffff);\n  printf(\"reg=%08x n=%d\\n\",reg,n);\n  double d;\n  d=conv_double(reg,n);\n  printf(\"dob=%g \\n\",d);\n  printf(\"dob=%15.10f \\n\",d);\n  printf(\"dob=%15.10e \\n\",d);\n}\nvoid MPL115A2::conv_test_exec()\n{\n  conv_test(0x0000,12);\n  conv_test(0x8000,12);\n  conv_test(0xffff,12);\n\n  conv_test(0x3ece,12);\n  conv_test(0xb3f9,2);\n  conv_test(0xc517,1);\n  conv_test(0x33c8,-9);\n\n  conv_test(0x6680>>1,10);//unsigned \u306a\u306e\u3067>>1\n  conv_test(0x7ec0>>1,10);\n}\nvoid MPL115A2::Init()\n{\n  DevAddr=0x60;\n  fd= wiringPiI2CSetup(DevAddr);\n  if(fd<0)\n    {\n      std::cerr <<\"\u30bb\u30f3\u30b5\u30fc\u8a2d\u5b9a\u30a8\u30e9\u30fc\"<<std::endl;\n    }\n\n  unsigned int reg;\n  reg=wiringPiI2CReadReg16(fd,0x04);//a0\n  a0=conv_double(reg,12);\n\n  reg=wiringPiI2CReadReg16(fd,0x06);//b1\n  b1=conv_double(reg,2);\n\n  reg=wiringPiI2CReadReg16(fd,0x08);//b2\n  b2=conv_double(reg,1);\n\n  reg=wiringPiI2CReadReg16(fd,0x0a);//c12\n  c12=conv_double(reg,-9);\n}\nvoid MPL115A2::Get()\n{\n\n  /*\n  //  printf(\"MPL115A2:StartConv1\\n\");\n  wiringPiI2CWrite(fd, 0x12); //Start Conversions\n  wiringPiI2CWrite(fd, 0x00); //\n  usleep(100000);\n  //  printf(\"MPL115A2:StartConv2\\n\");\n  wiringPiI2CWrite(fd, 0x12);\n  wiringPiI2CWrite(fd, 0x01);\n  usleep(100000);\n  */\n\n\n  wiringPiI2CWriteReg8(fd,0x12,0);//Start Conversions\n  usleep(100000);\n\n  unsigned int reg;\n  reg=wiringPiI2CReadReg16(fd,0x00);\n  //  printf(\"MPL115A2:padc %x\\n\",reg);\n  padc=conv_double(reg>>1,10);//unsigned \u306a\u306e\u3067 >>1\n  reg=wiringPiI2CReadReg16(fd,0x02);\n  //  printf(\"MPL115A2:tadc %x\\n\",reg);\n  tadc=conv_double(reg>>1,10);\n  //  printf(\"MPL115A2:padc %.4f tadc %.4f\\n\",padc,tadc);\n\n  p_comp = a0 + (b1 + c12 * tadc) * padc + b2 * tadc;\n  p_hpa = ((65.0/1023.0) * p_comp + 50) * 10;\n  temp=(tadc-498.0)/(-5.35)+25.0;\n  //  printf(\"MPL115A2:temp %.4f p_hpa %.4f\\n\",temp,p_hpa);\n\n}\ndouble MPL115A2::Read(unsigned char data_type)\n{\n  if(data_type==0) return (temp);\n  if(data_type==1) return (p_hpa);\n  return(p_hpa);\n}\n\n//HDC1000 Humidity and Temperature Digital Sensor Class\nclass HDC1000{\npublic:\n  void Init(); // \n  void Get();\n  double Read( unsigned char data_type);\nprivate:\n  int fd;\n// \u30c7\u30d0\u30a4\u30b9\u30a2\u30c9\u30ec\u30b9 \n// i2cdetect -y 1 \u3067\u8abf\u3079\u3089\u308c\u308b\n  unsigned char DevAddr;\n// \u6e29\u5ea6\u53d6\u5f97\u30dd\u30a4\u30f3\u30bf\u3068Config\u30dd\u30a4\u30f3\u30bf\u306e\u30a2\u30c9\u30ec\u30b9\u6307\u5b9a\u3002\n// \u57fa\u672c\u7684\u306b\u3053\u306e\u307e\u307e\u3067OK\u3002\u4eca\u56de\u306f\u6e29\u5ea6\u3068\u6e7f\u5ea6\u3092\u540c\u6642\u53d6\u5f97\u3059\u308b\u306e\u3067\n// \u6e29\u5ea6\u5074\u3060\u3051\u3067OK\n  unsigned char tempp;\n  unsigned char confp;\n// \u30c7\u30d0\u30a4\u30b9\u306e\u8a2d\u5b9a\n// 2\u30d0\u30a4\u30c8\u306e\u8a2d\u5b9a\u30c7\u30fc\u30bf\u30921\u30d0\u30a4\u30c8\u306b\u5206\u3051\u3066\u8a2d\u5b9a\u3002\n// 1\uff1d\u4e0a\u4f4d\u30d3\u30c3\u30c8\u5074 2\uff1d\u4e0b\u4f4d\u30d3\u30c3\u30c8\u5074\n// 0x1234\u3068\u3044\u3046\u8a2d\u5b9a\u30c7\u30fc\u30bf\u306a\u3089 1\uff1d0x12 2\uff1d0x34\u3068\u8a2d\u5b9a\n  unsigned char devconf1;\n  unsigned char devconf2;\n  //\n  double temp;\n  double humi;\n\n};\nvoid HDC1000::Init()\n{\n// \u30c7\u30d0\u30a4\u30b9\u30a2\u30c9\u30ec\u30b9 \n// i2cdetect -y 1 \u3067\u8abf\u3079\u3089\u308c\u308b\n  DevAddr=0x40;\n// \u6e29\u5ea6\u53d6\u5f97\u30dd\u30a4\u30f3\u30bf\u3068Config\u30dd\u30a4\u30f3\u30bf\u306e\u30a2\u30c9\u30ec\u30b9\u6307\u5b9a\u3002\n// \u57fa\u672c\u7684\u306b\u3053\u306e\u307e\u307e\u3067OK\u3002\u4eca\u56de\u306f\u6e29\u5ea6\u3068\u6e7f\u5ea6\u3092\u540c\u6642\u53d6\u5f97\u3059\u308b\u306e\u3067\n// \u6e29\u5ea6\u5074\u3060\u3051\u3067OK\n  tempp=0x00;\n  confp=0x02;\n// \u30c7\u30d0\u30a4\u30b9\u306e\u8a2d\u5b9a\n// 2\u30d0\u30a4\u30c8\u306e\u8a2d\u5b9a\u30c7\u30fc\u30bf\u30921\u30d0\u30a4\u30c8\u306b\u5206\u3051\u3066\u8a2d\u5b9a\u3002\n// 1\uff1d\u4e0a\u4f4d\u30d3\u30c3\u30c8\u5074 2\uff1d\u4e0b\u4f4d\u30d3\u30c3\u30c8\u5074\n// 0x1234\u3068\u3044\u3046\u8a2d\u5b9a\u30c7\u30fc\u30bf\u306a\u3089 1\uff1d0x12 2\uff1d0x34\u3068\u8a2d\u5b9a\n  devconf1=0x10;\n  devconf2=0x00;\n\n  unsigned char ConfData[3];\n  ConfData[0]= confp;\n  ConfData[1]= devconf1;\n  ConfData[2]= devconf2;\n  fd=wiringPiI2CSetup(DevAddr);\n  /*    \n  wiringPiSetupGpio();\n  pinMode(RDPin,INPUT);\n  */\n  if(write(fd,ConfData,sizeof(ConfData))<0)\n    {\n      std::cerr <<\"\u30bb\u30f3\u30b5\u30fc\u8a2d\u5b9a\u30a8\u30e9\u30fc\"<<std::endl;\n    }\n  //  return fd;\n}\nvoid HDC1000::Get()\n{\n  unsigned char GetData[1];\n  unsigned char ReData[4];\n\n  GetData[0]=tempp;\n  // \u30bb\u30f3\u30b5\u30fc\u306b\u6e29\u5ea6\u6e2c\u5b9a\u8981\u6c42\n  if(write(fd,GetData,1)<0)\n    {\n      printf(\"\u30c7\u30fc\u30bf\u8981\u6c42\u30a8\u30e9\u30fc\\n\");\n    }\n  // \u30bb\u30f3\u30b5\u30fc\u304c\u6e2c\u5b9a\u2192\u5909\u63db\u3092\u5b8c\u4e86\u3055\u305b\u308b\u306e\u3092\u5f85\u3064\n  //    while((digitalRead(RDPin))==1);\n  usleep(500000);\n  // \u30c7\u30fc\u30bf\u53d6\u5f97\n  if(read(fd,ReData,4)<0)\n    {\n      printf(\"\u30c7\u30fc\u30bf\u53d7\u4fe1\u30a8\u30e9\u30fc\\n\");\n    }\n  int conv;\n  conv=(ReData[0]<<8)|(ReData[1]);\n  // \u623b\u3063\u3066\u304d\u305f\u30c7\u30fc\u30bf\u3092\u304f\u3063\u3064\u3051\u3066\u8fd4\u3059\n  temp= ( (double)(conv)/65536.000) * 165.000 - 40.000;\n  conv=(ReData[2]<<8)|(ReData[3]);\n  humi= ( (double)(conv)/65536.000) * 100.000;\n}\ndouble HDC1000::Read(unsigned char data_type)\n{\n  if(data_type==0) return (temp);\n  if(data_type==1) return (humi);\n  return(temp);\n}\n\nvoid governor() {\n  sleep(1);\n}\n\nstatic int sig =0;\nvoid sig_handler(int signo)\n{\n  sig=1;\n}\n\nint main()\n{\n  HDC1000 hdc1000_1;\n  MPL115A2 mpl115a2_1;\n  MS5607 ms5607_1;\n  struct tm* date;\n  time_t timer;\n\n  hdc1000_1.Init();\n  mpl115a2_1.Init();\n  ms5607_1.Init();\n\n  std::cout << \"Hello\\nWorld!\\n\";\n\n  if( signal(SIGINT, sig_handler) == SIG_ERR) {\n    printf(\"sig_handler fail\\n\");\n  }\n\n  while(1) {\n    std::thread th0(governor);\n    //\n    std::thread th1([&]{hdc1000_1.Get();});\n    std::thread th2([&]{mpl115a2_1.Get();});\n    std::thread th3([&]{ms5607_1.Get();});\n    //\u73fe\u5728\u6642\u523b\u306e\u53d6\u5f97\n    time(&timer);\n    date=localtime(&timer);\n    //\n    th1.join();\n    th2.join();\n    th3.join();\n    // \u8868\u793a\n    printf(\"%.24s \u6c17\u6e29\uff1a%.2f\u2103  \u6e7f\u5ea6\uff1a%.2f\uff05 \u6c17\u5727\uff1a %.2fhp %.2fdeg %.2fmbar %.2fdeg\\n\",\n       asctime(date),\n       hdc1000_1.Read(0),//Temp\n       hdc1000_1.Read(1),//Humi\n       mpl115a2_1.Read(1),\n       mpl115a2_1.Read(0),\n       ms5607_1.Read(1),//\n       ms5607_1.Read(0) //Temp\n     );\n    //  Wait\n    th0.join();\n    //  Terminate\n    if(sig) {\n        printf(\"Recieve SIGINT\\n\");\n        break;\n    }\n  }\n}\n\n\n7.\u5b9f\u884c\u6642\u306e\u753b\u9762\n1\u79d2\u9593\u306b1\u56de\u3001I2C\u30bb\u30f3\u30b5\u30fc\u304b\u3089\u6c17\u6e29\u3001\u6e7f\u5ea6\u3001\u5927\u6c17\u5727\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002CTRL-C\u3067\u505c\u6b62\u3057\u307e\u3059\u3002\nThu May 12 20:12:58 2016 \u6c17\u6e29\uff1a35.41\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1024.08hp 31.17deg (2) 998.84mbar 22.97deg\nThu May 12 20:12:59 2016 \u6c17\u6e29\uff1a35.44\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1024.08hp 31.17deg (2) 998.87mbar 22.97deg\nThu May 12 20:13:00 2016 \u6c17\u6e29\uff1a35.45\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1024.08hp 31.17deg (2) 998.87mbar 22.98deg\nThu May 12 20:13:01 2016 \u6c17\u6e29\uff1a35.45\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1024.08hp 31.17deg (2) 998.84mbar 23.00deg\nThu May 12 20:13:02 2016 \u6c17\u6e29\uff1a35.45\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1017.66hp 31.17deg (2) 998.86mbar 23.01deg\nThu May 12 20:13:03 2016 \u6c17\u6e29\uff1a35.41\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1018.08hp 31.36deg (2) 998.87mbar 23.02deg\nThu May 12 20:13:04 2016 \u6c17\u6e29\uff1a35.45\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1024.08hp 31.17deg (2) 998.89mbar 23.02deg\nThu May 12 20:13:05 2016 \u6c17\u6e29\uff1a35.45\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1024.08hp 31.17deg (2) 998.92mbar 23.01deg\nThu May 12 20:13:06 2016 \u6c17\u6e29\uff1a35.45\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1024.08hp 31.17deg (2) 998.91mbar 23.02deg\nThu May 12 20:13:07 2016 \u6c17\u6e29\uff1a35.44\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1017.66hp 31.17deg (2) 998.89mbar 23.02deg\nThu May 12 20:13:08 2016 \u6c17\u6e29\uff1a35.41\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1024.08hp 31.17deg (2) 998.89mbar 23.02deg\nThu May 12 20:13:09 2016 \u6c17\u6e29\uff1a35.41\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1017.66hp 31.17deg (2) 998.89mbar 23.01deg\nThu May 12 20:13:10 2016 \u6c17\u6e29\uff1a35.41\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1024.08hp 31.17deg (2) 998.92mbar 23.01deg\nThu May 12 20:13:11 2016 \u6c17\u6e29\uff1a35.47\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1024.08hp 31.17deg (2) 998.92mbar 23.01deg\nThu May 12 20:13:12 2016 \u6c17\u6e29\uff1a35.45\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1024.50hp 31.36deg (2) 998.85mbar 23.01deg\nThu May 12 20:13:13 2016 \u6c17\u6e29\uff1a35.49\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1024.50hp 31.36deg (2) 998.91mbar 23.03deg\nThu May 12 20:13:14 2016 \u6c17\u6e29\uff1a35.50\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1017.66hp 31.17deg (2) 998.90mbar 23.04deg\n^CRecieve SIGINT\n\n\n8.\u8b1d\u8f9e\nsatorukun\u3055\u3093\u306e\u300cRaspberry Pi 2 Model B \u3067I2C \u6e29\u5ea6+\u6e7f\u5ea6\u30bb\u30f3\u30b5\u30fc\u30e2\u30b8\u30e5\u30fc\u30eb(HDC1000)\u3092\u4f7f\u3046\u300d\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n  \u521d\u3081\u3066C++\u306710\u884c\u4ee5\u4e0a\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\u7a1a\u62d9\u306a\u70b9\u304c\u591a\u3005\u3042\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u304c\u304a\u8a31\u3057\u304f\u3060\u3055\u3044\u3002\n\n# 1.\u52d5\u6a5f\n\n  Raspberry Pi\u306b\u5404\u7a2eI2C\u30bb\u30f3\u30b5\u30fc\u3092\u53d6\u308a\u4ed8\u3051\u3066\u6bd4\u8f03\u3092\u884c\u3044\u305f\u3044\u3068\u601d\u3044\u3001\u6700\u521d\u306fC\u8a00\u8a9e\u3092\u4f7f\u3063\u3066\u66f8\u3044\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u5404\u7a2eI2C\u30bb\u30f3\u30b5\u30fc\u306e\u521d\u671f\u5316\u30b3\u30fc\u30c9\u3084\u8aad\u307f\u51fa\u3057\u30b3\u30fc\u30c9\u304c\u5897\u3048\u3066\u304f\u308b\u3068\u3044\u3061\u3044\u3061\u95a2\u6570\u540d\u3092\u5909\u3048\u3066\u5bfe\u5fdc\u3059\u308b\u306e\u304c\u9762\u5012\u306a\u306e\u3068\u3001A/D\u5909\u63db\u5668\u306e\u8aad\u307f\u51fa\u3057\u6642\u9593\u3092\u5f85\u3064\u306e\u306b\u9010\u6b21\u5b9f\u884c\u306f\u52b9\u7387\u304c\u60aa\u3044\u3068\u8003\u3048\u3066\u3001\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306e\u7df4\u7fd2\u304c\u3066\u3089\u3001C++\u3092\u4f7f\u3046\u4e8b\u3092\u601d\u3044\u7acb\u3061\u307e\u3057\u305f\u3002\n\n# 2.\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u8aac\u660e\n  1\u79d2\u9593\u306b1\u56de\u3001I2C\u30bb\u30f3\u30b5\u30fc\u304b\u3089\u3001\u6c17\u6e29\u3001\u6e7f\u5ea6\u3001\u5927\u6c17\u5727\u3092\u53d6\u5f97\u3057console\u306b\u51fa\u529b\u3057\u307e\u3059\u3002CTRL-C(SIGINT)\u3067\u505c\u6b62\u3057\u307e\u3059\u3002\n\n# 3.\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u7279\u5fb4\n\n* \u5404\u7a2eI2C\u30bb\u30f3\u30b5\u30fc\u306e\u30b3\u30fc\u30c9\u3092\u30af\u30e9\u30b9\u5316\u3057\u3001\u7c21\u5358\u306b\u4f7f\u3048\u308b\u69d8\u306b\u3057\u305f\u3002\n\n* \u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u51e6\u7406\u3067I/O\u5f85\u3061\u6642\u9593\u306b\u4ed6\u306e\u51e6\u7406\u3092\u884c\u3048\u308b\u69d8\u306b\u3057\u305f\u3002\n\n* \u7df4\u7fd2\u3067\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u3067\u3059\u306e\u3067\u3001\u307e\u3060\u304d\u3063\u3068\u30d0\u30b0\u304c\u6f5c\u3093\u3067\u3044\u308b\u3067\u3057\u3087\u3046\u3002\u3002\u3002\n\n# 4. \u7528\u610f\u3057\u305f\u3082\u306e\n\n* \u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\n    * Raspberry Pi 1 Model B\n    * \uff28\uff24\uff23\uff11\uff10\uff10\uff10\u4f7f\u7528\u3000\u6e29\u6e7f\u5ea6\u30bb\u30f3\u30b5\u30fc\u30e2\u30b8\u30e5\u30fc\u30eb (\u79cb\u6708\u96fb\u5b50)\n    * \uff2d\uff30\uff2c\uff11\uff11\uff15\uff21\uff12\u4f7f\u7528\u5927\u6c17\u5727\u30bb\u30f3\u30b5\u30fc\u30e2\u30b8\u30e5\u30fc\u30eb\u30ad\u30c3\u30c8\uff08\uff29\uff12\uff23\uff09(\u79cb\u6708\u96fb\u5b50)\n    * \uff2d\uff33\uff15\uff16\uff10\uff17\u9ad8\u5ea6\u8a08\u6e2c\u30e2\u30b8\u30e5\u30fc\u30eb(Parallax Inc.)\n    * Raspberry Pi\uff08\u30e9\u30ba\u30d9\u30ea\u30fc\u30d1\u30a4\uff09\u7528\u30e6\u30cb\u30d0\u30fc\u30b5\u30eb\u57fa\u677f UB-RPI01(\u30b5\u30f3\u30cf\u30e4\u30c8)\n    * \u30cf\u30f3\u30c0\u5c11\u3005\u3001\u914d\u7dda\u6750\u5c11\u3005\u3001\n    * \u305d\u306e\u4ed6\u3001SD\u30ab\u30fc\u30c9\u3001\u30b1\u30fc\u30d6\u30eb\u3001\u30b1\u30fc\u30b9\u306a\u3069\n* \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\n    * OS Raspbian\n    * WiringPi\n\n* \u53c2\u8003\n\n```bash\n>uname -a\nLinux rasp1 3.12.28+ #709 PREEMPT Mon Sep 8 15:28:00 BST 2014 armv6l GNU/Linux\n>g++ --version\ng++ (Debian 4.6.3-14+rpi1) 4.6.3\nCopyright (C) 2011 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n```\n![012.png](https://qiita-image-store.s3.amazonaws.com/0/119510/af42f3c2-4b34-70c8-0377-fce55c4f9b2c.png)\n\n# 5. Makefile\n\n  Makefile\u3067\u3059\u3002\n\n```Makefile\n# Makefile for test.cpp\ntest: test.cpp\n\tg++ -Wall -O2 -o a.out test.cpp -lwiringPi -pthread -std=c++0x \n```\n\n# 6. \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n  \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3067\u3059\u3002\u3082\u3057\u3001\u6c17\u306b\u306a\u308b\u3068\u3053\u3084\u9593\u9055\u3044\u306a\u3069\u3042\u308c\u3070\u30b3\u30e1\u30f3\u30c8\u3044\u305f\u3060\u3051\u308b\u3068\u52a9\u304b\u308a\u307e\u3059\u3002C\u8a00\u8a9e\u306e\u30ad\u30e3\u30b9\u30c8\u7b49\u3001\u307e\u3060\u81ea\u4fe1\u304c\u306a\u3044\u3067\u3059\u3002\n\n```cpp\n#include <iostream>\n#include <thread>\n#include <stdio.h>\n#include <stdint.h>\n#include <wiringPi.h>\n#include <wiringPiI2C.h>\n#include <time.h>\n#include <signal.h>\n\n//using namespace std;\n//MS5607-02BA03 Barometric Pressure Sensor\nclass MS5607\n{\npublic:\n  void Init();\n  void Get();\n  double Read( unsigned char data_type);\nprivate:\n  static const unsigned char cmd_reset    = 0x1e;\n  static const unsigned char cmd_adc_read = 0x00;\n  static const unsigned char cmd_adc_conv = 0x40;\n  static const unsigned char cmd_adc_d1   = 0x00;\n  static const unsigned char cmd_adc_d2   = 0x10;\n  static const unsigned char cmd_adc_256  = 0x00;\n  static const unsigned char cmd_adc_512  = 0x02;\n  static const unsigned char cmd_adc_1024 = 0x04;\n  static const unsigned char cmd_adc_2048 = 0x06;\n  static const unsigned char cmd_adc_4096 = 0x08;\n  static const unsigned char cmd_prom_rd  = 0xa0;\n  int fd;\n  unsigned char DevAddr; // 0x77\n\n  unsigned int c0,c1,c2,c3,c4,c5,c6,c7;//16bit\n  unsigned int d1,d2;//24bit\n  int dt,temp;\n  int64_t off,sens;\n  int p;\n\n  unsigned int swap16(unsigned int reg);\n  void debug();\n  void debug1();\n};\nunsigned int MS5607::swap16(unsigned int reg)\n{\n  reg=reg&0x0000ffff;\n  reg=(((reg<<8)|(reg>>8))&0x0000ffff);\n  return(reg);\n}\nvoid MS5607::debug1()\n{\n//debug data;\n  c1=46372;\n  c2=43981;\n  c3=29059;\n  c4=27842;\n  c5=31553;\n  c6=28165;\n  d1=6465444;\n  d2=8077636;\n}\n\nvoid MS5607::debug()\n{\n  printf(\"c1   c2    c3    c4    c5    c6\\n\");\n  printf(\"%05d %05d %05d %05d %05d %05d\\n\",\n    c1,c2,c3,c4,c5,c6);\n\n  printf(\"%04x %016x\\n\",0,c0);\n  printf(\"%04x %016x\\n\",1,c1);\n  printf(\"%04x %016x\\n\",2,c2);\n  printf(\"%04x %016x\\n\",3,c3);\n  printf(\"%04x %016x\\n\",4,c4);\n  printf(\"%04x %016x\\n\",5,c5);\n  printf(\"%04x %016x\\n\",6,c6);\n  printf(\"%04x %016x\\n\",7,c7);\n\n  printf(\"d1        d2\\n\");\n  printf(\"%08d  %08d\\n\",d1,d2);\n\n  printf(\"dt        temp\\n\");\n  printf(\"%08d  %08d\\n\",dt,temp);\n\n  printf(\"off       sens    p\\n\");\n  printf(\"%10lld  %10lld  %08d\\n\",off,sens,p);\n\n}\n\nvoid MS5607::Init()\n{\n  DevAddr=0x77;\n  fd= wiringPiI2CSetup(DevAddr);\n  if(fd<0)\n    {\n      std::cerr <<\"\u30bb\u30f3\u30b5\u30fc\u8a2d\u5b9a\u30a8\u30e9\u30fc\"<<std::endl;\n    }\n\n  wiringPiI2CWrite(fd, cmd_reset); //Reset\n  usleep(1000000);\n\n  unsigned int reg;\n  reg=wiringPiI2CReadReg16(fd,cmd_prom_rd+0);\n  c0=swap16(reg);\n  reg=wiringPiI2CReadReg16(fd,cmd_prom_rd+2);\n  c1=swap16(reg);\n  reg=wiringPiI2CReadReg16(fd,cmd_prom_rd+4);\n  c2=swap16(reg);\n  reg=wiringPiI2CReadReg16(fd,cmd_prom_rd+6);\n  c3=swap16(reg);\n  reg=wiringPiI2CReadReg16(fd,cmd_prom_rd+8);\n  c4=swap16(reg);\n  reg=wiringPiI2CReadReg16(fd,cmd_prom_rd+10);\n  c5=swap16(reg);\n  reg=wiringPiI2CReadReg16(fd,cmd_prom_rd+12);\n  c6=swap16(reg);\n  reg=wiringPiI2CReadReg16(fd,cmd_prom_rd+14);\n  c7=swap16(reg);\n}\nvoid MS5607::Get()\n{\n  unsigned int reg;\n  unsigned char buff[4];\n\n  wiringPiI2CWrite(fd, cmd_adc_conv|cmd_adc_d1|cmd_adc_4096); //Convert\n  usleep(100000);\n  wiringPiI2CWrite(fd, cmd_adc_read); //\n  read(fd,buff,3);\n  reg=0;\n  reg=reg |(buff[0]<<16);\n  reg=reg |(buff[1]<<8);\n  reg=reg |(buff[2]<<0);\n  d1=reg; \n\n  wiringPiI2CWrite(fd, cmd_adc_conv|cmd_adc_d2|cmd_adc_4096); //Convert\n  usleep(100000);\n\n  wiringPiI2CWrite(fd, cmd_adc_read); //\n  read(fd,buff,3);\n  reg=0;\n  reg=reg |(buff[0]<<16);\n  reg=reg |(buff[1]<<8);\n  reg=reg |(buff[2]<<0);\n  d2=reg; \n\n  //  debug1();\n  dt=(int)(d2-(c5<<8));\n  temp=2000+((dt*c6)>>23);\n  int64_t x1,x2,x3;\n  x1=(int64_t)c2<<17;\n  x2=(c4*dt);\n  x3=x2>>6;\n  off=x1+x3;\n  //  printf(\"x1=%lld x2=%lld x3=%lld off=%lld\\n\",x1,x2,x3,off);\n  //off=(c2<<17)+((c4*dt)>>6);\n  sens=(c1<<16)+((c3*dt)>>7);\n  x1=d1*sens>>21;\n  p=(int)((static_cast<int64_t>(x1)-static_cast<int64_t>(off))>>15);\n  //  debug();\n}\ndouble MS5607::Read(unsigned char data_type)\n{\n  if(data_type==0) return ((double)temp/100);\n  if(data_type==1) return ((double)p/100);\n  return((double)p/100);\n}\n\n//MPL115A2 Digital Barometer\nclass MPL115A2{\npublic:\n  void Init();\n  void Get();\n  double Read( unsigned char data_type);\n  void conv_test_exec();\nprivate:\n  double conv_double( unsigned int reg, unsigned int n);\n  void conv_test(unsigned int test,unsigned int n);\n  int fd;\n  unsigned char DevAddr; // 0x60\n  double padc;\n  double tadc;\n  double a0,b1,b2,c12,p_comp,p_hpa,temp;\n};\n\ndouble MPL115A2::conv_double( unsigned int reg, unsigned int n)\n{\n  union \n  {\n    double d;\n    uint64_t i;\n    struct\n    {\n      uint64_t frac :52;\n      unsigned int exp :11;\n      unsigned int sign :1;\n    } b;\n  }u;\n  unsigned int s,m;\n  u.i=0;\n  reg=(((reg<<8)|(reg>>8))&0x0000ffff);\n  if(reg==0)\n    {\n      u.d=0;\n    }\n  else \n    {\n      if(((reg>>15)&0x01)==0)\n        {\n          u.b.sign=0;\n        }\n      else\n        {\n          u.b.sign=1;\n          reg=((reg^(-1))+1)&0x0000ffff;//2\u306e\u88dc\u6570\u3092\u623b\u3059\u3002\n        }\n      m=0x8000;\n      for(s=0;s<15;s++)//\u6700\u4e0a\u4f4d\u306e1\u304c\u4f55\u30d3\u30c3\u30c8\u3081\u304b\u8abf\u3079\u308b\u3002\n\t{\n\t  if(((m>>s)&reg) != 0) break;\n\t}\n      u.b.frac = (uint64_t)((reg<<s)&0x7fff)<<(52-15);\n      u.b.exp  = 0x03ff+n-s;\n    }\n  return(u.d);\n}\nvoid MPL115A2::conv_test(unsigned int reg,unsigned int n)\n{\n  printf(\"--------------\\n\");\n  printf(\"reg=%08x n=%d\\n\",reg,n);\n  reg=(((reg<<8)|(reg>>8))&0x0000ffff);\n  printf(\"reg=%08x n=%d\\n\",reg,n);\n  double d;\n  d=conv_double(reg,n);\n  printf(\"dob=%g \\n\",d);\n  printf(\"dob=%15.10f \\n\",d);\n  printf(\"dob=%15.10e \\n\",d);\n}\nvoid MPL115A2::conv_test_exec()\n{\n  conv_test(0x0000,12);\n  conv_test(0x8000,12);\n  conv_test(0xffff,12);\n\n  conv_test(0x3ece,12);\n  conv_test(0xb3f9,2);\n  conv_test(0xc517,1);\n  conv_test(0x33c8,-9);\n\n  conv_test(0x6680>>1,10);//unsigned \u306a\u306e\u3067>>1\n  conv_test(0x7ec0>>1,10);\n}\nvoid MPL115A2::Init()\n{\n  DevAddr=0x60;\n  fd= wiringPiI2CSetup(DevAddr);\n  if(fd<0)\n    {\n      std::cerr <<\"\u30bb\u30f3\u30b5\u30fc\u8a2d\u5b9a\u30a8\u30e9\u30fc\"<<std::endl;\n    }\n\n  unsigned int reg;\n  reg=wiringPiI2CReadReg16(fd,0x04);//a0\n  a0=conv_double(reg,12);\n\n  reg=wiringPiI2CReadReg16(fd,0x06);//b1\n  b1=conv_double(reg,2);\n\n  reg=wiringPiI2CReadReg16(fd,0x08);//b2\n  b2=conv_double(reg,1);\n\n  reg=wiringPiI2CReadReg16(fd,0x0a);//c12\n  c12=conv_double(reg,-9);\n}\nvoid MPL115A2::Get()\n{\n\n  /*\n  //  printf(\"MPL115A2:StartConv1\\n\");\n  wiringPiI2CWrite(fd, 0x12); //Start Conversions\n  wiringPiI2CWrite(fd, 0x00); //\n  usleep(100000);\n  //  printf(\"MPL115A2:StartConv2\\n\");\n  wiringPiI2CWrite(fd, 0x12);\n  wiringPiI2CWrite(fd, 0x01);\n  usleep(100000);\n  */\n\n  \n  wiringPiI2CWriteReg8(fd,0x12,0);//Start Conversions\n  usleep(100000);\n\n  unsigned int reg;\n  reg=wiringPiI2CReadReg16(fd,0x00);\n  //  printf(\"MPL115A2:padc %x\\n\",reg);\n  padc=conv_double(reg>>1,10);//unsigned \u306a\u306e\u3067 >>1\n  reg=wiringPiI2CReadReg16(fd,0x02);\n  //  printf(\"MPL115A2:tadc %x\\n\",reg);\n  tadc=conv_double(reg>>1,10);\n  //  printf(\"MPL115A2:padc %.4f tadc %.4f\\n\",padc,tadc);\n\n  p_comp = a0 + (b1 + c12 * tadc) * padc + b2 * tadc;\n  p_hpa = ((65.0/1023.0) * p_comp + 50) * 10;\n  temp=(tadc-498.0)/(-5.35)+25.0;\n  //  printf(\"MPL115A2:temp %.4f p_hpa %.4f\\n\",temp,p_hpa);\n\n}\ndouble MPL115A2::Read(unsigned char data_type)\n{\n  if(data_type==0) return (temp);\n  if(data_type==1) return (p_hpa);\n  return(p_hpa);\n}\n\n//HDC1000 Humidity and Temperature Digital Sensor Class\nclass HDC1000{\npublic:\n  void Init(); // \n  void Get();\n  double Read( unsigned char data_type);\nprivate:\n  int fd;\n// \u30c7\u30d0\u30a4\u30b9\u30a2\u30c9\u30ec\u30b9 \n// i2cdetect -y 1 \u3067\u8abf\u3079\u3089\u308c\u308b\n  unsigned char DevAddr;\n// \u6e29\u5ea6\u53d6\u5f97\u30dd\u30a4\u30f3\u30bf\u3068Config\u30dd\u30a4\u30f3\u30bf\u306e\u30a2\u30c9\u30ec\u30b9\u6307\u5b9a\u3002\n// \u57fa\u672c\u7684\u306b\u3053\u306e\u307e\u307e\u3067OK\u3002\u4eca\u56de\u306f\u6e29\u5ea6\u3068\u6e7f\u5ea6\u3092\u540c\u6642\u53d6\u5f97\u3059\u308b\u306e\u3067\n// \u6e29\u5ea6\u5074\u3060\u3051\u3067OK\n  unsigned char tempp;\n  unsigned char confp;\n// \u30c7\u30d0\u30a4\u30b9\u306e\u8a2d\u5b9a\n// 2\u30d0\u30a4\u30c8\u306e\u8a2d\u5b9a\u30c7\u30fc\u30bf\u30921\u30d0\u30a4\u30c8\u306b\u5206\u3051\u3066\u8a2d\u5b9a\u3002\n// 1\uff1d\u4e0a\u4f4d\u30d3\u30c3\u30c8\u5074 2\uff1d\u4e0b\u4f4d\u30d3\u30c3\u30c8\u5074\n// 0x1234\u3068\u3044\u3046\u8a2d\u5b9a\u30c7\u30fc\u30bf\u306a\u3089 1\uff1d0x12 2\uff1d0x34\u3068\u8a2d\u5b9a\n  unsigned char devconf1;\n  unsigned char devconf2;\n  //\n  double temp;\n  double humi;\n\n};\nvoid HDC1000::Init()\n{\n// \u30c7\u30d0\u30a4\u30b9\u30a2\u30c9\u30ec\u30b9 \n// i2cdetect -y 1 \u3067\u8abf\u3079\u3089\u308c\u308b\n  DevAddr=0x40;\n// \u6e29\u5ea6\u53d6\u5f97\u30dd\u30a4\u30f3\u30bf\u3068Config\u30dd\u30a4\u30f3\u30bf\u306e\u30a2\u30c9\u30ec\u30b9\u6307\u5b9a\u3002\n// \u57fa\u672c\u7684\u306b\u3053\u306e\u307e\u307e\u3067OK\u3002\u4eca\u56de\u306f\u6e29\u5ea6\u3068\u6e7f\u5ea6\u3092\u540c\u6642\u53d6\u5f97\u3059\u308b\u306e\u3067\n// \u6e29\u5ea6\u5074\u3060\u3051\u3067OK\n  tempp=0x00;\n  confp=0x02;\n// \u30c7\u30d0\u30a4\u30b9\u306e\u8a2d\u5b9a\n// 2\u30d0\u30a4\u30c8\u306e\u8a2d\u5b9a\u30c7\u30fc\u30bf\u30921\u30d0\u30a4\u30c8\u306b\u5206\u3051\u3066\u8a2d\u5b9a\u3002\n// 1\uff1d\u4e0a\u4f4d\u30d3\u30c3\u30c8\u5074 2\uff1d\u4e0b\u4f4d\u30d3\u30c3\u30c8\u5074\n// 0x1234\u3068\u3044\u3046\u8a2d\u5b9a\u30c7\u30fc\u30bf\u306a\u3089 1\uff1d0x12 2\uff1d0x34\u3068\u8a2d\u5b9a\n  devconf1=0x10;\n  devconf2=0x00;\n\n  unsigned char ConfData[3];\n  ConfData[0]= confp;\n  ConfData[1]= devconf1;\n  ConfData[2]= devconf2;\n  fd=wiringPiI2CSetup(DevAddr);\n  /*\t\n  wiringPiSetupGpio();\n  pinMode(RDPin,INPUT);\n  */\n  if(write(fd,ConfData,sizeof(ConfData))<0)\n    {\n      std::cerr <<\"\u30bb\u30f3\u30b5\u30fc\u8a2d\u5b9a\u30a8\u30e9\u30fc\"<<std::endl;\n    }\n  //  return fd;\n}\nvoid HDC1000::Get()\n{\n  unsigned char GetData[1];\n  unsigned char ReData[4];\n\n  GetData[0]=tempp;\n  // \u30bb\u30f3\u30b5\u30fc\u306b\u6e29\u5ea6\u6e2c\u5b9a\u8981\u6c42\n  if(write(fd,GetData,1)<0)\n    {\n      printf(\"\u30c7\u30fc\u30bf\u8981\u6c42\u30a8\u30e9\u30fc\\n\");\n    }\n  // \u30bb\u30f3\u30b5\u30fc\u304c\u6e2c\u5b9a\u2192\u5909\u63db\u3092\u5b8c\u4e86\u3055\u305b\u308b\u306e\u3092\u5f85\u3064\n  //\twhile((digitalRead(RDPin))==1);\n  usleep(500000);\n  // \u30c7\u30fc\u30bf\u53d6\u5f97\n  if(read(fd,ReData,4)<0)\n    {\n      printf(\"\u30c7\u30fc\u30bf\u53d7\u4fe1\u30a8\u30e9\u30fc\\n\");\n    }\n  int conv;\n  conv=(ReData[0]<<8)|(ReData[1]);\n  // \u623b\u3063\u3066\u304d\u305f\u30c7\u30fc\u30bf\u3092\u304f\u3063\u3064\u3051\u3066\u8fd4\u3059\n  temp= ( (double)(conv)/65536.000) * 165.000 - 40.000;\n  conv=(ReData[2]<<8)|(ReData[3]);\n  humi= ( (double)(conv)/65536.000) * 100.000;\n}\ndouble HDC1000::Read(unsigned char data_type)\n{\n  if(data_type==0) return (temp);\n  if(data_type==1) return (humi);\n  return(temp);\n}\n\nvoid governor() {\n  sleep(1);\n}\n\nstatic int sig =0;\nvoid sig_handler(int signo)\n{\n  sig=1;\n}\n\nint main()\n{\n  HDC1000 hdc1000_1;\n  MPL115A2 mpl115a2_1;\n  MS5607 ms5607_1;\n  struct tm* date;\n  time_t timer;\n\n  hdc1000_1.Init();\n  mpl115a2_1.Init();\n  ms5607_1.Init();\n\n  std::cout << \"Hello\\nWorld!\\n\";\n\n  if( signal(SIGINT, sig_handler) == SIG_ERR) {\n    printf(\"sig_handler fail\\n\");\n  }\n\n  while(1) {\n    std::thread th0(governor);\n    //\n    std::thread th1([&]{hdc1000_1.Get();});\n    std::thread th2([&]{mpl115a2_1.Get();});\n    std::thread th3([&]{ms5607_1.Get();});\n    //\u73fe\u5728\u6642\u523b\u306e\u53d6\u5f97\n    time(&timer);\n    date=localtime(&timer);\n    //\n    th1.join();\n    th2.join();\n    th3.join();\n    // \u8868\u793a\n    printf(\"%.24s \u6c17\u6e29\uff1a%.2f\u2103  \u6e7f\u5ea6\uff1a%.2f\uff05 \u6c17\u5727\uff1a %.2fhp %.2fdeg %.2fmbar %.2fdeg\\n\",\n\t   asctime(date),\n\t   hdc1000_1.Read(0),//Temp\n\t   hdc1000_1.Read(1),//Humi\n\t   mpl115a2_1.Read(1),\n\t   mpl115a2_1.Read(0),\n\t   ms5607_1.Read(1),//\n\t   ms5607_1.Read(0) //Temp\n\t );\n    //  Wait\n    th0.join();\n    //  Terminate\n    if(sig) {\n        printf(\"Recieve SIGINT\\n\");\n\t    break;\n    }\n  }\n}\n```\n\n\n# 7.\u5b9f\u884c\u6642\u306e\u753b\u9762\n\n  1\u79d2\u9593\u306b1\u56de\u3001I2C\u30bb\u30f3\u30b5\u30fc\u304b\u3089\u6c17\u6e29\u3001\u6e7f\u5ea6\u3001\u5927\u6c17\u5727\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002CTRL-C\u3067\u505c\u6b62\u3057\u307e\u3059\u3002\n  \n```bash\nThu May 12 20:12:58 2016 \u6c17\u6e29\uff1a35.41\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1024.08hp 31.17deg (2) 998.84mbar 22.97deg\nThu May 12 20:12:59 2016 \u6c17\u6e29\uff1a35.44\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1024.08hp 31.17deg (2) 998.87mbar 22.97deg\nThu May 12 20:13:00 2016 \u6c17\u6e29\uff1a35.45\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1024.08hp 31.17deg (2) 998.87mbar 22.98deg\nThu May 12 20:13:01 2016 \u6c17\u6e29\uff1a35.45\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1024.08hp 31.17deg (2) 998.84mbar 23.00deg\nThu May 12 20:13:02 2016 \u6c17\u6e29\uff1a35.45\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1017.66hp 31.17deg (2) 998.86mbar 23.01deg\nThu May 12 20:13:03 2016 \u6c17\u6e29\uff1a35.41\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1018.08hp 31.36deg (2) 998.87mbar 23.02deg\nThu May 12 20:13:04 2016 \u6c17\u6e29\uff1a35.45\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1024.08hp 31.17deg (2) 998.89mbar 23.02deg\nThu May 12 20:13:05 2016 \u6c17\u6e29\uff1a35.45\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1024.08hp 31.17deg (2) 998.92mbar 23.01deg\nThu May 12 20:13:06 2016 \u6c17\u6e29\uff1a35.45\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1024.08hp 31.17deg (2) 998.91mbar 23.02deg\nThu May 12 20:13:07 2016 \u6c17\u6e29\uff1a35.44\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1017.66hp 31.17deg (2) 998.89mbar 23.02deg\nThu May 12 20:13:08 2016 \u6c17\u6e29\uff1a35.41\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1024.08hp 31.17deg (2) 998.89mbar 23.02deg\nThu May 12 20:13:09 2016 \u6c17\u6e29\uff1a35.41\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1017.66hp 31.17deg (2) 998.89mbar 23.01deg\nThu May 12 20:13:10 2016 \u6c17\u6e29\uff1a35.41\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1024.08hp 31.17deg (2) 998.92mbar 23.01deg\nThu May 12 20:13:11 2016 \u6c17\u6e29\uff1a35.47\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1024.08hp 31.17deg (2) 998.92mbar 23.01deg\nThu May 12 20:13:12 2016 \u6c17\u6e29\uff1a35.45\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1024.50hp 31.36deg (2) 998.85mbar 23.01deg\nThu May 12 20:13:13 2016 \u6c17\u6e29\uff1a35.49\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1024.50hp 31.36deg (2) 998.91mbar 23.03deg\nThu May 12 20:13:14 2016 \u6c17\u6e29\uff1a35.50\u2103  \u6e7f\u5ea6\uff1a32.34\uff05 \u6c17\u5727\uff1a (1) 1017.66hp 31.17deg (2) 998.90mbar 23.04deg\n^CRecieve SIGINT\n```\n\n\n# 8.\u8b1d\u8f9e\n\n  satorukun\u3055\u3093\u306e\u300c[Raspberry Pi 2 Model B \u3067I2C \u6e29\u5ea6+\u6e7f\u5ea6\u30bb\u30f3\u30b5\u30fc\u30e2\u30b8\u30e5\u30fc\u30eb(HDC1000)\u3092\u4f7f\u3046](http://qiita.com/satorukun/items/0d8457df566975195f97)\u300d\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n  \n"}