{"context": "\u7279\u5b9a\u306e\u5ba3\u8a00\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u3089\u308c\u308b\u30e1\u30bf\u95a2\u6570\u304c\u5fc5\u8981\u3060\u3063\u305f\u306e\u3067\u4f5c\u3063\u3066\u307f\u305f\u3002\n\u3053\u308c\u304c\u3042\u308c\u3070\u3001\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30e1\u30bf\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n// range-based for loops\u304c\u5229\u7528\u53ef\u80fd\u304b\u3069\u3046\u304b\ntemplate< class T >\nstruct is_ranged\n  : typename std::integral_constant< bool,\n      has_begin< typename T::const_iterator (T::*)() const >::value && // \u8aad\u307f\u53d6\u308a\u5c02\u7528\u306ebegin()\u3092\u6301\u3063\u3066\u3044\u308b\n      has_end< typename T::const_iterator (T::*)() const >::value >::type {}; // \u8aad\u307f\u53d6\u308a\u5c02\u7528\u306eend()\u3092\u6301\u3063\u3066\u3044\u308b\n\ntemplate< class T >\nstruct is_ranged< T[] > : std::true_type {}; // \u751f\u914d\u5217\u306f\u554f\u7b54\u7121\u7528\u3067OK\n\n\u4e0a\u306e\u4f8b\u3067\u306f\u3001has_begin\u3068has_end\u3068\u3044\u3046\u30e1\u30bf\u95a2\u6570\u304c\u5fc5\u8981\u3067\u3059\u3002\u30e1\u30f3\u30d0\u95a2\u6570\u306e\u5ba3\u8a00\u3092\u53d7\u3051\u53d6\u308b\u306e\u3067\u3001\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306a\u3069\u306b\u3082\u5b8c\u5168\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u306e\u304c\u7279\u5fb4\u3067\u3059\u3002\u3057\u304b\u3057\u305d\u306e\u95a2\u6570\u540d\u3054\u3068\u306b\u4f55\u5ea6\u3082\u5b9a\u7fa9\u3057\u306a\u304a\u3057\u3066\u3084\u3089\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u304c\u9762\u5012\u3067\u3059\u306d\u3002\n\u4ee5\u4e0b\u306bhas_func\u30e1\u30bf\u95a2\u6570\u3092\u793a\u3057\u307e\u3059\u3002\u540d\u524d\u3055\u3048\u5909\u3048\u3066\u3057\u307e\u3048\u3070\u3069\u3093\u306a\u30e1\u30bd\u30c3\u30c9\u306b\u3082\u5bfe\u5fdc\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u306e\u3067\u3001\u30de\u30af\u30ed\u3092\u7528\u610f\u3059\u308b\u3068\u697d\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n//\n// determine if MemfunType is available\ntemplate< class MemfunType >\nstruct _has_func\n{\nprivate:\n  static std::false_type confirm(...);\n  template< class U >\n  static auto confirm(U u)->decltype(\n    static_cast< MemfunType >(&U::METHOD),\n    std::true_type());\n\npublic:\n  static constexpr bool value = decltype(\n      confirm(std::declval< rinse::owner_t< MemfunType > >()))::value;\n};\ntemplate< class MemfunType >\nstruct has_func\n  : rinse::meta_bool< _has_func< MemfunType >::value > {};\n\n\n\u7279\u5b9a\u306e\u5ba3\u8a00\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u3089\u308c\u308b\u30e1\u30bf\u95a2\u6570\u304c\u5fc5\u8981\u3060\u3063\u305f\u306e\u3067\u4f5c\u3063\u3066\u307f\u305f\u3002\n\u3053\u308c\u304c\u3042\u308c\u3070\u3001\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30e1\u30bf\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n```cpp\n// range-based for loops\u304c\u5229\u7528\u53ef\u80fd\u304b\u3069\u3046\u304b\ntemplate< class T >\nstruct is_ranged\n  : typename std::integral_constant< bool,\n      has_begin< typename T::const_iterator (T::*)() const >::value && // \u8aad\u307f\u53d6\u308a\u5c02\u7528\u306ebegin()\u3092\u6301\u3063\u3066\u3044\u308b\n      has_end< typename T::const_iterator (T::*)() const >::value >::type {}; // \u8aad\u307f\u53d6\u308a\u5c02\u7528\u306eend()\u3092\u6301\u3063\u3066\u3044\u308b\n\ntemplate< class T >\nstruct is_ranged< T[] > : std::true_type {}; // \u751f\u914d\u5217\u306f\u554f\u7b54\u7121\u7528\u3067OK\n```\n\n\u4e0a\u306e\u4f8b\u3067\u306f\u3001`has_begin`\u3068`has_end`\u3068\u3044\u3046\u30e1\u30bf\u95a2\u6570\u304c\u5fc5\u8981\u3067\u3059\u3002\u30e1\u30f3\u30d0\u95a2\u6570\u306e\u5ba3\u8a00\u3092\u53d7\u3051\u53d6\u308b\u306e\u3067\u3001\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306a\u3069\u306b\u3082\u5b8c\u5168\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u306e\u304c\u7279\u5fb4\u3067\u3059\u3002\u3057\u304b\u3057\u305d\u306e\u95a2\u6570\u540d\u3054\u3068\u306b\u4f55\u5ea6\u3082\u5b9a\u7fa9\u3057\u306a\u304a\u3057\u3066\u3084\u3089\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u304c\u9762\u5012\u3067\u3059\u306d\u3002\n\u4ee5\u4e0b\u306b`has_func`\u30e1\u30bf\u95a2\u6570\u3092\u793a\u3057\u307e\u3059\u3002\u540d\u524d\u3055\u3048\u5909\u3048\u3066\u3057\u307e\u3048\u3070\u3069\u3093\u306a\u30e1\u30bd\u30c3\u30c9\u306b\u3082\u5bfe\u5fdc\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u306e\u3067\u3001\u30de\u30af\u30ed\u3092\u7528\u610f\u3059\u308b\u3068\u697d\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n```cpp\n//\n// determine if MemfunType is available\ntemplate< class MemfunType >\nstruct _has_func\n{\nprivate:\n  static std::false_type confirm(...);\n  template< class U >\n  static auto confirm(U u)->decltype(\n    static_cast< MemfunType >(&U::METHOD),\n    std::true_type());\n\npublic:\n  static constexpr bool value = decltype(\n      confirm(std::declval< rinse::owner_t< MemfunType > >()))::value;\n};\ntemplate< class MemfunType >\nstruct has_func\n  : rinse::meta_bool< _has_func< MemfunType >::value > {};\n```\n\n", "tags": ["C++11", "C++"]}