{"context": " More than 1 year has passed since last update.poolboy\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3057\u3066\u3001Riak\u3078\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u8907\u6570\u7acb\u3061\u4e0a\u3052\u308b\u3053\u3068\u304c\u5fc5\u8981\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u305d\u306e\u3084\u308a\u65b9\u3092\u30e1\u30e2\u3057\u307e\u3059\u3002\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u3063\u3066\u3001mix.exs\u306b\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8a18\u5165\u3057\u307e\u3059\u3002\n$ mix new riakpool --sup --module RiakPool\n\nmix.exs\u30d5\u30a1\u30a4\u30eb\ndefp deps do\n  [\n    {:poolboy, \"~> 1.5\"},\n    {:riakc, \"~> 2.1\"}\n  ]\nend\n\nlib/riakpool.ex\u30d5\u30a1\u30a4\u30eb\u306bpoolboy\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002worker_module\u306eRiakPool.Worker\u3092\u3053\u308c\u304b\u3089\u4f5c\u6210\u3057\u307e\u3059\u3002\n defmodule RiakPool do\n   use Application\n\n   def start(_type, _args) do\n     import Supervisor.Spec, warn: false\n\n     poolboy_config = [\n       {:name, {:local, :riak_pool}},\n       {:worker_module, RiakPool.Worker},\n       {:size, 2},\n       {:max_overflow, 1}\n     ]\n\n     children = [\n       :poolboy.child_spec(:riak_pool,\n                             poolboy_config,\n                             []\n                           )\n     ]\n     opts = [strategy: :one_for_one, name: RiakPool.Supervisor]\n     Supervisor.start_link(children, opts)\n   end\n end\n\nlib/riakpool/worker.ex\u30d5\u30a1\u30a4\u30eb\u306bRiakPool.Worker\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n defmodule RiakPool.Worker do\n   use GenServer\n\n   def start_link([]) do\n     # # \u3053\u3053\u306bname: __MODULE__\u3092\u3064\u3051\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3001\n     # \u30d7\u30ed\u30bb\u30b9\u306f\u5168\u90e8\u540c\u3058\u540d\u524d\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u305f\u3081,\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\u3002\n     {:ok, pid} = GenServer.start_link(__MODULE__, :ok)\n     {:ok, pid}\n   end\n\n   def init(:ok) do\n     {:ok, %{}}\n   end\n end\n\n\u3053\u308c\u3067\u8d77\u52d5\u3057\u3066\u307f\u307e\u3059\u3002\u4e8c\u500b\u306e\u30d7\u30ed\u30bb\u30b9\u304c\u8d77\u52d5\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\n$ iex -S mix\niex> :observer.start\n\n\niex(2)> worker1 = :poolboy.checkout(:riak_pool)\n#PID<0.148.0>\niex(3)> worker2 = :poolboy.checkout(:riak_pool)\n#PID<0.147.0>\niex(4)> worker3 = :poolboy.checkout(:riak_pool)\n#PID<0.181.0>\niex(5)> worker4 = :poolboy.checkout(:riak_pool)\n** (exit) exited in: :gen_server.call(:riak_pool, {:checkout, #Reference<0.0.1.219>, true}, 5000)\n    ** (EXIT) time out\n    (stdlib) gen_server.erl:212: :gen_server.call/3\n             src/poolboy.erl:55: :poolboy.checkout/3\n\nworker3\u304ccheckout\u3055\u308c\u3066\u3044\u308b\u6642\u70b9\u3067\u3001\u3082\u3046\u4e00\u3064\u306eprocess <0.181.0>\u304c\u30b9\u30fc\u30d1\u30fc\u30d0\u30a4\u30b6\u30fc\u306b\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\u3053\u308c\u306f{:max_overflow, 1}\u304cpoolboy_config\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002size\u3068max_overflow\u306e\u9055\u3044\u306fsize\u6570\u306e\u30d7\u30ed\u30bb\u30b9\u306f\u5e38\u99d0\u3057\u3066\u3044\u308b\u611f\u3058\u3067\u3001max_overflow\u304c\u81e8\u6642\u306b\u8ffd\u52a0\u3055\u308c\u3066\u3001checkin\u3059\u308b\u3068\u3001\u6d88\u3048\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u3053\u306e\u30ea\u30f3\u30af\u3092\u898b\u308c\u3070\u308f\u304b\u308a\u307e\u3059\u3002\n\n\u3067\u3082\u3053\u308c\u306friak\u306b\u306a\u3093\u306e\u95a2\u4fc2\u3082\u306a\u3044\u306e\u3067\u3001\u7acb\u3061\u4e0a\u304c\u3063\u3066\u3044\u308b\u30d7\u30ed\u30bb\u30b9\u3092riak\u306b\u63a5\u7d9a\u3059\u308b\u3088\u3046\u306bRiakPool.Worker\u3092\u4fee\u6b63\u3057\u307e\u3059\u3002\nlib/riakpool/worker.ex\n defmodule RiakPool.Worker do\n   require Logger\n   use GenServer\n\n   def start_link([]) do\n\n     {:ok, pid} = GenServer.start_link(__MODULE__, :ok)\n     {:ok, pid}\n   end\n\n   def init(:ok) do\n     # riak\u306eip\u306fchar list\u3067\u6e21\u3059\u5fc5\u8981\u304c\u3042\u308b\n     {:ok, master_pid} = \n:riakc_pb_socket.start_link('ip.of.your.riak',8087)\n     {:ok, %{riak_pid: master_pid}}\n   end\nend\n\n\u3053\u308c\u3067\u7acb\u3061\u4e0a\u304c\u3063\u3066\u3044\u308b\u30d7\u30ed\u30bb\u30b9\u306f\u5168\u90e8Riak\u306b\u3064\u306a\u304c\u308a\u307e\u3057\u305f\u3002\n\n\u3053\u308c\u3067checkout\u3057\u305f\u30d7\u30ed\u30bb\u30b9\u306fRiak\u3092\u64cd\u4f5c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u306e\u3067\u3001Riak\u3092\u64cd\u4f5c\u3059\u308b\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\nlib/riakpool/worker.ex\n defmodule RiakPool.Worker do\n   require Logger\n   use GenServer\n\n   def start_link([]) do\n     {:ok, pid} = GenServer.start_link(__MODULE__, :ok)\n     {:ok, pid}\n   end\n\n   def init(:ok) do\n     {:ok, master_pid} = :riakc_pb_socket.start_link('210.140.87.185',8087)\n     {:ok, %{riak_pid: master_pid}}\n   end\n\n   def put_obj(pid, obj) do\n     GenServer.call(pid, {:put, obj})\n   end\n\n   def get_obj(pid, bucket, key) do\n     GenServer.call(pid, {:get, bucket, key})\n   end\n\n   def delete_obj(pid, bucket, key) do\n     GenServer.call(pid, {:delete, bucket, key})\n   end\n\n   def handle_call({:put, obj}, _from, %{riak_pid: master_pid} = state) do\n     res = :riakc_pb_socket.put(master_pid, obj)\n     {:reply, res, state}\n   end\n\n   def handle_call({:get, bucket, key}, _from, %{riak_pid: master_pid} = state) do\n     res = :riakc_pb_socket.get(master_pid, bucket, key)\n     {:reply, res, state}\n   end\n\n   def handle_call({:delete, bucket, key}, _from, %{riak_pid: master_pid} = state) do\n     res = :riakc_pb_socket.delete(master_pid, bucket, key)\n     {:reply, res, state}\n   end\n end\n\n\u3053\u308c\u3067get, put, delete\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\niex(1)> worker1 = :poolboy.checkout(:riak_pool)\n#PID<0.151.0>\niex(2)> object = :riakc_obj.new(\"my bucket\", \"my key\", \"my data\")\n{:riakc_obj, \"my bucket\", \"my key\", :undefined, [], :undefined, \"my data\"}\niex(3)> RiakPool.Worker.put_obj(worker1, object)\n:ok\niex(4)> RiakPool.Worker.get_obj(worker1, \"my bucket\", \"my key\")\n{:ok,\n {:riakc_obj, \"my bucket\", \"my key\",\n  <<107, 206, 97, 96, 96, 96, 204, 96, 202, 5, 82, 28, 147, 3, 54, 4, 134, 237, 176, 254, 152, 193, 148, 200, 152, 199, 202, 224, 154, 30, 114, 129, 47, 11, 0>>,\n  [{{:dict, 2, 16, 16, 8, 80, 48,\n     {[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []},\n     {{[], [], [], [], [], [], [], [], [], [],\n       [[\"X-Riak-VTag\", 52, 101, 88, 98, 112, 55, 69, 79, 69, 117, 104, 112, 83,\n         77, 57, 51, 68, 100, 122, 106, 65, 117]], [], [],\n       [[\"X-Riak-Last-Modified\" | {1457, 515333, 613191}]], [], []}}},\n    \"my data\"}], :undefined, :undefined}}\niex(5)> RiakPool.Worker.delete_obj(worker1, \"my bucket\", \"my key\")\n:ok\niex(6)> RiakPool.Worker.get_obj(worker1, \"my bucket\", \"my key\")\n{:error, :notfound}\n\npoolboy\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3057\u3066\u3001Riak\u3078\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u8907\u6570\u7acb\u3061\u4e0a\u3052\u308b\u3053\u3068\u304c\u5fc5\u8981\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u305d\u306e\u3084\u308a\u65b9\u3092\u30e1\u30e2\u3057\u307e\u3059\u3002\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u3063\u3066\u3001`mix.exs`\u306b\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8a18\u5165\u3057\u307e\u3059\u3002\n\n```\n$ mix new riakpool --sup --module RiakPool\n``` \n\n`mix.exs`\u30d5\u30a1\u30a4\u30eb\n\n```ex\ndefp deps do\n  [\n    {:poolboy, \"~> 1.5\"},\n    {:riakc, \"~> 2.1\"}\n  ]\nend\n```\n\n`lib/riakpool.ex`\u30d5\u30a1\u30a4\u30eb\u306b`poolboy`\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002`worker_module`\u306e`RiakPool.Worker`\u3092\u3053\u308c\u304b\u3089\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n```ex\n defmodule RiakPool do\n   use Application\n\n   def start(_type, _args) do\n     import Supervisor.Spec, warn: false\n\n     poolboy_config = [\n       {:name, {:local, :riak_pool}},\n       {:worker_module, RiakPool.Worker},\n       {:size, 2},\n       {:max_overflow, 1}\n     ]\n     \n     children = [\n       :poolboy.child_spec(:riak_pool,\n                             poolboy_config,\n                             []\n                           )\n     ]\n     opts = [strategy: :one_for_one, name: RiakPool.Supervisor]\n     Supervisor.start_link(children, opts)\n   end\n end\n```\n\n`lib/riakpool/worker.ex`\u30d5\u30a1\u30a4\u30eb\u306b`RiakPool.Worker`\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```ex\n defmodule RiakPool.Worker do\n   use GenServer\n\n   def start_link([]) do\n     # # \u3053\u3053\u306bname: __MODULE__\u3092\u3064\u3051\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3001\n     # \u30d7\u30ed\u30bb\u30b9\u306f\u5168\u90e8\u540c\u3058\u540d\u524d\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u305f\u3081,\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\u3002\n     {:ok, pid} = GenServer.start_link(__MODULE__, :ok)\n     {:ok, pid}\n   end\n\n   def init(:ok) do\n     {:ok, %{}}\n   end\n end\n```\n\n\u3053\u308c\u3067\u8d77\u52d5\u3057\u3066\u307f\u307e\u3059\u3002\u4e8c\u500b\u306e\u30d7\u30ed\u30bb\u30b9\u304c\u8d77\u52d5\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\n\n```\n$ iex -S mix\niex> :observer.start\n```\n\n<img width=\"544\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-03-08 18.01.06.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/54698/f0f17550-cc42-3315-a03a-f609b9078362.png\">\n\n```\niex(2)> worker1 = :poolboy.checkout(:riak_pool)\n#PID<0.148.0>\niex(3)> worker2 = :poolboy.checkout(:riak_pool)\n#PID<0.147.0>\niex(4)> worker3 = :poolboy.checkout(:riak_pool)\n#PID<0.181.0>\niex(5)> worker4 = :poolboy.checkout(:riak_pool)\n** (exit) exited in: :gen_server.call(:riak_pool, {:checkout, #Reference<0.0.1.219>, true}, 5000)\n    ** (EXIT) time out\n    (stdlib) gen_server.erl:212: :gen_server.call/3\n             src/poolboy.erl:55: :poolboy.checkout/3\n```\n\n`worker3`\u304c`checkout`\u3055\u308c\u3066\u3044\u308b\u6642\u70b9\u3067\u3001\u3082\u3046\u4e00\u3064\u306eprocess `<0.181.0>`\u304c\u30b9\u30fc\u30d1\u30fc\u30d0\u30a4\u30b6\u30fc\u306b\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\u3053\u308c\u306f`{:max_overflow, 1}`\u304c`poolboy_config`\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002`size`\u3068`max_overflow`\u306e\u9055\u3044\u306f`size`\u6570\u306e\u30d7\u30ed\u30bb\u30b9\u306f\u5e38\u99d0\u3057\u3066\u3044\u308b\u611f\u3058\u3067\u3001`max_overflow`\u304c\u81e8\u6642\u306b\u8ffd\u52a0\u3055\u308c\u3066\u3001`checkin`\u3059\u308b\u3068\u3001\u6d88\u3048\u3066\u3057\u307e\u3044\u307e\u3059\u3002[\u3053\u306e\u30ea\u30f3\u30af](https://github.com/devinus/poolboy/blob/3bb48a893ff5598f7c73731ac17545206d259fac/src/poolboy.erl#L310)\u3092\u898b\u308c\u3070\u308f\u304b\u308a\u307e\u3059\u3002\n\n<img width=\"552\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-03-08 18.02.20.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/54698/8d433dcd-e0a7-7784-354d-222e2a1d60d4.png\">\n\n\u3067\u3082\u3053\u308c\u306friak\u306b\u306a\u3093\u306e\u95a2\u4fc2\u3082\u306a\u3044\u306e\u3067\u3001\u7acb\u3061\u4e0a\u304c\u3063\u3066\u3044\u308b\u30d7\u30ed\u30bb\u30b9\u3092riak\u306b\u63a5\u7d9a\u3059\u308b\u3088\u3046\u306b`RiakPool.Worker`\u3092\u4fee\u6b63\u3057\u307e\u3059\u3002\n\n`lib/riakpool/worker.ex`\n\n```\n defmodule RiakPool.Worker do\n   require Logger\n   use GenServer\n\n   def start_link([]) do\n     \n     {:ok, pid} = GenServer.start_link(__MODULE__, :ok)\n     {:ok, pid}\n   end\n\n   def init(:ok) do\n     # riak\u306eip\u306fchar list\u3067\u6e21\u3059\u5fc5\u8981\u304c\u3042\u308b\n     {:ok, master_pid} = \n:riakc_pb_socket.start_link('ip.of.your.riak',8087)\n     {:ok, %{riak_pid: master_pid}}\n   end\nend\n```\n\u3053\u308c\u3067\u7acb\u3061\u4e0a\u304c\u3063\u3066\u3044\u308b\u30d7\u30ed\u30bb\u30b9\u306f\u5168\u90e8Riak\u306b\u3064\u306a\u304c\u308a\u307e\u3057\u305f\u3002\n\n<img width=\"637\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-03-09 18.07.17.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/54698/751e762c-bcb5-5539-3114-7547fb9efb44.png\">\n\n\u3053\u308c\u3067`checkout`\u3057\u305f\u30d7\u30ed\u30bb\u30b9\u306fRiak\u3092\u64cd\u4f5c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u306e\u3067\u3001Riak\u3092\u64cd\u4f5c\u3059\u308b\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n`lib/riakpool/worker.ex`\n\n```\n defmodule RiakPool.Worker do\n   require Logger\n   use GenServer\n\n   def start_link([]) do\n     {:ok, pid} = GenServer.start_link(__MODULE__, :ok)\n     {:ok, pid}\n   end\n\n   def init(:ok) do\n     {:ok, master_pid} = :riakc_pb_socket.start_link('210.140.87.185',8087)\n     {:ok, %{riak_pid: master_pid}}\n   end\n\n   def put_obj(pid, obj) do\n     GenServer.call(pid, {:put, obj})\n   end\n\n   def get_obj(pid, bucket, key) do\n     GenServer.call(pid, {:get, bucket, key})\n   end\n\n   def delete_obj(pid, bucket, key) do\n     GenServer.call(pid, {:delete, bucket, key})\n   end\n\n   def handle_call({:put, obj}, _from, %{riak_pid: master_pid} = state) do\n     res = :riakc_pb_socket.put(master_pid, obj)\n     {:reply, res, state}\n   end\n\n   def handle_call({:get, bucket, key}, _from, %{riak_pid: master_pid} = state) do\n     res = :riakc_pb_socket.get(master_pid, bucket, key)\n     {:reply, res, state}\n   end\n\n   def handle_call({:delete, bucket, key}, _from, %{riak_pid: master_pid} = state) do\n     res = :riakc_pb_socket.delete(master_pid, bucket, key)\n     {:reply, res, state}\n   end\n end\n```\n\u3053\u308c\u3067`get`, `put`, `delete`\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```\niex(1)> worker1 = :poolboy.checkout(:riak_pool)\n#PID<0.151.0>\niex(2)> object = :riakc_obj.new(\"my bucket\", \"my key\", \"my data\")\n{:riakc_obj, \"my bucket\", \"my key\", :undefined, [], :undefined, \"my data\"}\niex(3)> RiakPool.Worker.put_obj(worker1, object)\n:ok\niex(4)> RiakPool.Worker.get_obj(worker1, \"my bucket\", \"my key\")\n{:ok,\n {:riakc_obj, \"my bucket\", \"my key\",\n  <<107, 206, 97, 96, 96, 96, 204, 96, 202, 5, 82, 28, 147, 3, 54, 4, 134, 237, 176, 254, 152, 193, 148, 200, 152, 199, 202, 224, 154, 30, 114, 129, 47, 11, 0>>,\n  [{{:dict, 2, 16, 16, 8, 80, 48,\n     {[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []},\n     {{[], [], [], [], [], [], [], [], [], [],\n       [[\"X-Riak-VTag\", 52, 101, 88, 98, 112, 55, 69, 79, 69, 117, 104, 112, 83,\n         77, 57, 51, 68, 100, 122, 106, 65, 117]], [], [],\n       [[\"X-Riak-Last-Modified\" | {1457, 515333, 613191}]], [], []}}},\n    \"my data\"}], :undefined, :undefined}}\niex(5)> RiakPool.Worker.delete_obj(worker1, \"my bucket\", \"my key\")\n:ok\niex(6)> RiakPool.Worker.get_obj(worker1, \"my bucket\", \"my key\")\n{:error, :notfound}\n```\n", "tags": ["Elixir", "poolboy", "riak"]}