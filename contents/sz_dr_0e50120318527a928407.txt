{"context": " More than 1 year has passed since last update.\n\n\u3053\u306e\u8a18\u4e8b\u306f\u4f55\uff1f\n\u6a5f\u68b0\u5b66\u7fd2\u306e\u67a0\u7d44\u307f\u306e\u4e2d\u306b\u30e9\u30f3\u30af\u5b66\u7fd2(\u30e9\u30f3\u30ad\u30f3\u30b0\u5b66\u7fd2\uff0cLearning to Rank)\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308a\u307e\u3059\uff0e\n\u30e9\u30f3\u30af\u5b66\u7fd2\u306e\u30e2\u30c7\u30eb\u306e1\u3064\u3068\u3057\u3066\uff0c\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u7528\u3044\u305fRankNet\u304c\u3042\u308a\u307e\u3059\uff0e\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\uff0cRankNet\u3092Chainer\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3068\u3044\u3046\u8a71\u3092\u3057\u307e\u3059\uff0e\n\u4e88\u6e2c\u7d50\u679c\u3092\u898b\u308b\u3068\u306a\u3093\u3068\u306a\u304f\u5b9f\u88c5\u306f\u6b63\u3057\u3044\u3088\u3046\u306b\u601d\u3048\u308b\u306e\u3067\u3059\u304c\uff0cChainer\u306e\u4f7f\u3044\u65b9\u306a\u3069\u9593\u9055\u3063\u3066\u3044\u308b\u70b9\u304c\u3042\u308a\u307e\u3057\u305f\u3089\u305c\u3072\u305c\u3072\u3054\u6307\u6458\u3092\u9802\u3051\u308b\u3068\u5b09\u3057\u3044\u3067\u3059\uff0e\n\n\u305d\u3082\u305d\u3082\u30e9\u30f3\u30af\u5b66\u7fd2\u3068\u306f\u4f55\u3060\n\u30e9\u30f3\u30af\u5b66\u7fd2\u3067\u306f\uff0c(x,y)=(x,y)=({\\mathbf x}, y)=(\u7279\u5fb4\u91cf\uff0c\u9069\u5408\u5ea6)\u306e\u96c6\u5408\u304c\u5b66\u7fd2\u3055\u308c\u307e\u3059\uff0e\n\u9069\u5408\u5ea6\u306e\u5927\u304d\u3044\u30a2\u30a4\u30c6\u30e0\u306b\u306f\u5927\u304d\u3044\u5024\u3092\uff0c\u9069\u5408\u5ea6\u306e\u5c0f\u3055\u3044\u30a2\u30a4\u30c6\u30e0\u306b\u306f\u5c0f\u3055\u3044\u5024\u3092\u8fd4\u3059\u3088\u3046\u306a\u95a2\u6570fff\u3092\u5b66\u7fd2\u3057\u307e\u3059\uff0e\n\u4eca2\u3064\u306e\u30a2\u30a4\u30c6\u30e0AAA\u3068BBB\u304c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u3055\u308c\u3066\u3044\u308b\u3068\u3057\u307e\u3059\uff0e\nA=(\\mathbf{x}_A, y_A) \\\\\nB=(\\mathbf{x}_B, y_B)\nA=(xA,yA)B=(xB,yB)A=(xA,yA)B=(xB,yB){A=(\\mathbf{x}_A, y_A) \\\\\nB=(\\mathbf{x}_B, y_B)\n}\n\u307e\u305f\uff0cAAA\u306fBBB\u3088\u308a\u3082\u9069\u5408\u5ea6\u304c\u5927\u304d\u3044\u3068\u3057\u307e\u3059\uff0e\u3064\u307e\u308a\uff0cyA>yByA>yBy_A>y_B\u304c\u6210\u308a\u7acb\u3064\u3068\u3057\u307e\u3059\uff0e\n\u3053\u306e\u3068\u304d\uff0c\u95a2\u6570fff\u306f\u4ee5\u4e0b\u306e\u95a2\u4fc2\u304c\u6210\u308a\u7acb\u3064\u3088\u3046\u306b\u5b66\u7fd2\u3057\u307e\u3059\uff0e\nf(\\mathbf{x}_A)>f(\\mathbf{x}_B)\nf(xA)>f(xB)f(xA)>f(xB){f(\\mathbf{x}_A)>f(\\mathbf{x}_B)\n}\n\u4f55\u3058\u3083\u3053\u308a\u3083\u3068\u3044\u3046\u611f\u3058\u306a\u306e\u3067\uff0c\u30e9\u30d6\u30e9\u30a4\u30d6\uff01\u3092\u4f7f\u3063\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e\n\u307e\u305a\u306f\u30e9\u30d6\u30e9\u30a4\u30d6\uff01\u306e\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u306b\u9069\u5408\u5ea6\uff08\u2606\uff0c\u2606\u2606\uff0c\u2606\u2606\u2606\uff09\u3092\u4ed8\u3051\u3066\u3044\u304d\u307e\u3057\u3087\u3046\uff0e\n\u2606\u306e\u6570\u304c\u591a\u3044\u307b\u3069\u9069\u5408\u5ea6\u304c\u9ad8\u3044(\u597d\u307f\u3067\u3042\u308b)\u3053\u3068\u3092\u793a\u3057\u307e\u3059\uff0e\n\n\u4ee5\u4e0b\u306e\u30da\u30a2\u3092\u5b66\u7fd2\u3059\u308b\u3068\uff0c\u3053\u3093\u306a\u95a2\u6570fff\u304c\u5f97\u3089\u308c\u308b\u306f\u305a\u3067\u3059\uff0e\n\nf(x)=wTxf(x)=wTxf({\\bf x})={\\bf w}^T{\\bf x}\u306e\u3068\u304d\uff0c\u91cd\u307fww{\\bf w}\u306f\u4ee5\u4e0b\u306e\u56f3\u3067\u793a\u3055\u308c\u308b\u3088\u3046\u306b\uff0c\u7279\u5fb4\u91cf\u304c\u76f4\u4ea4\u5c04\u5f71\u3055\u308c\u305f\u70b9\u304c\u9069\u5408\u5ea6\u9806\u306b\u4e26\u3076\u3088\u3046\u306b\u63a8\u5b9a\u3055\u308c\u307e\u3059\uff0e\u5b9f\u969b\u306e\u554f\u984c\u3067\u306f\uff0c\u5b8c\u5168\u306b\u9069\u5408\u5ea6\u9806\u306b\u4e26\u3076\u3088\u3046\u306aww{\\bf w}\u306f\u5b58\u5728\u3057\u306a\u3044\u3067\u3057\u3087\u3046\u3051\u3069\u2026\uff08\u21d2\u7dda\u5f62\u5206\u96e2\u4e0d\u53ef\u80fd\uff09\n\n\u5b66\u7fd2\u306e\u7d50\u679c\u5f97\u3089\u308c\u305f\u95a2\u6570fff\u3092\u7528\u3044\u3066\uff0c\u307e\u3060\u9069\u5408\u5ea6\u3092\u4ed8\u3051\u3066\u3044\u306a\u3044\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u306e\u30e9\u30f3\u30ad\u30f3\u30b0\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\n\u3053\u3053\u3067\u306f\u300c\u30da\u30a2\u3092\u5b66\u7fd2\u3059\u308b\u300d\u3068\u66f8\u304d\u307e\u3057\u305f\u304c\uff0c\u5b9f\u306f\u30e9\u30f3\u30af\u5b66\u7fd2\u306b\u306f\u5927\u304d\u304f\u5206\u3051\u30663\u3064\u306e\u624b\u6cd5\u304c\u3042\u308a\uff0c\u305d\u306e\u3046\u3061\u306epairwise\u3068\u3044\u3046\u624b\u6cd5\u306b\u5f53\u305f\u308a\u307e\u3059\uff0e\u4ed6\u306b\u306fpointwise\uff0clistwise\u3068\u3044\u3063\u305f\u624b\u6cd5\u304c\u3042\u308a\u307e\u3059\u304c\uff0c\u3053\u308c\u3089\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u306e\u8cc7\u6599\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n\nDSIRNLP#1 \u30e9\u30f3\u30ad\u30f3\u30b0\u5b66\u7fd2\u3053\u3068\u306f\u3058\u3081\nConfidence Weighted\u3067 \u30e9\u30f3\u30af\u5b66\u7fd2\u3092\u5b9f\u88c5\u3057\u3066\u307f\u305f\n\n\nRankNet\u306b\u3064\u3044\u3066\nRankNet\u306f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u57fa\u3065\u304f\u30e9\u30f3\u30af\u5b66\u7fd2\u306e\u30e2\u30c7\u30eb\u3067\u3042\u308a\uff0cpairwise\u624b\u6cd5\u306b\u5f53\u305f\u308a\u307e\u3059\uff0e\n\u4e88\u6e2c\u30e2\u30c7\u30eb\u81ea\u4f53\u306f\u666e\u901a\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3068\u5909\u308f\u3089\u306a\u3044\u306e\u3067\u3059\u304c\uff0c\u30b3\u30b9\u30c8\u95a2\u6570\u306e\u8a2d\u8a08\u304c\u7570\u306a\u308a\u307e\u3059\uff0e\u3068\u3044\u3063\u3066\u3082\uff0c\u30b3\u30b9\u30c8\u95a2\u6570\u3068\u3057\u3066\u3088\u304f\u4f7f\u308f\u308c\u308b\u30af\u30ed\u30b9\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u95a2\u6570\u3068\u767a\u60f3\u306f\u540c\u3058\u3067\u3059\uff0e\n\u4e0a\u3068\u540c\u3058\u3088\u3046\u306b\uff0c\u30a2\u30a4\u30c6\u30e0AAA\u3068BBB\u304c\u305d\u308c\u305e\u308c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u3055\u308c\u3066\u3044\u308b\u3068\u3057\uff0cAAA\u306fBBB\u3088\u308a\u3082\u9069\u5408\u5ea6\u304c\u9ad8\u3044\u3068\u3057\u307e\u3059\uff0e\nA=(\\mathbf{x}_A, y_A) \\\\\nB=(\\mathbf{x}_B, y_B)\nA=(xA,yA)B=(xB,yB)A=(xA,yA)B=(xB,yB){A=(\\mathbf{x}_A, y_A) \\\\\nB=(\\mathbf{x}_B, y_B)\n}\n\u95a2\u6570fff\u306b\u3088\u308bAAA\u3068BBB\u306e\u30b9\u30b3\u30a2\u306f\u305d\u308c\u305e\u308c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6c42\u3081\u3089\u308c\u307e\u3059\uff0e\ns_A=f(\\mathbf{x}_A) \\\\\ns_B=f(\\mathbf{x}_B)\nsA=f(xA)sB=f(xB)sA=f(xA)sB=f(xB){s_A=f(\\mathbf{x}_A) \\\\\ns_B=f(\\mathbf{x}_B)\n}\nRankNet\u304c\u51fa\u529b\u3059\u308b\uff0cAAA\u304cBBB\u3088\u308a\u3082\u9ad8\u304f\u30e9\u30f3\u30af\u4ed8\u3051\u3055\u308c\u308b\u78ba\u7387\u306f\uff0csAsAs_A\u3068sBsBs_B\u3092\u7528\u3044\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u3055\u308c\u307e\u3059\uff0e\nP_{AB}=\\frac{1}{1+e^{-\\sigma(s_A-s_B)}}\nPAB=11+e\u2212\u03c3(sA\u2212sB)PAB=11+e\u2212\u03c3(sA\u2212sB){P_{AB}=\\frac{1}{1+e^{-\\sigma(s_A-s_B)}}\n}\n\u76f4\u611f\u7684\u306b\u306f\uff0csAsAs_A\u304c\u5927\u304d\u304f\u306a\u308c\u3070PABPABP_{AB}\u306f1\u306b\u8fd1\u3065\u304d\uff0csBsBs_B\u304c\u5927\u304d\u304f\u306a\u308c\u3070PABP_{AB}\u306f0\u306b\u8fd1\u3065\u304f\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\nPABP_{AB}\u3092\u7528\u3044\u3066\uff0c\u30b3\u30b9\u30c8\u95a2\u6570\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u3055\u308c\u307e\u3059\uff0e\nC_{AB}=-\\bar{P}_{AB}\\log{P_{AB}}-(1-\\bar{P}_{AB})\\log(1-P_{AB})\nCAB=\u2212\u02c9PABlogPAB\u2212(1\u2212\u02c9PAB)log(1\u2212PAB){C_{AB}=-\\bar{P}_{AB}\\log{P_{AB}}-(1-\\bar{P}_{AB})\\log(1-P_{AB})\n}\n\u3053\u3053\u3067\uff0c\u02c9PAB\\bar{P}_{AB}\u306fAA\u304cBB\u3088\u308a\u3082\u9ad8\u304f\u30e9\u30f3\u30af\u4ed8\u3051\u3055\u308c\u308b\u65e2\u77e5\u306e\u78ba\u7387\u3068\u3057\u307e\u3059\uff0e\n\u53c2\u8003\u6587\u732e\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3057\u305f\uff0e\n\\bar{P}_{AB}=\\begin{cases}\n1 & (A \\succ B) \\\\\n0 & (A \\prec B) \\\\\n\\frac{1}{2} & (otherwise)\n\\end{cases}\n\u02c9PAB={1(A\u227bB)0(A\u227aB)12(otherwise){\\bar{P}_{AB}=\\begin{cases}\n1 & (A \\succ B) \\\\\n0 & (A \\prec B) \\\\\n\\frac{1}{2} & (otherwise)\n\\end{cases}\n}\nCABC_{AB}\u306f\u307e\u3055\u306b\u30af\u30ed\u30b9\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u95a2\u6570\u3067\u3042\u308a\uff0cPABP_{AB}\u304c\u02c9PAB\\bar{P}_{AB}\u3068\u9060\u3051\u308c\u3070\u9060\u3044\u307b\u3069\u5927\u304d\u306a\u5024\u3068\u306a\u308a\u307e\u3059\uff0eRankNet\u3067\u306f\u3053\u306e\u30b3\u30b9\u30c8\u95a2\u6570\u3092\u6700\u5c0f\u5316\u3059\u308b\u3088\u3046\u306b\u5b66\u7fd2\u3057\u307e\u3059\uff0e\n\nChainer\u3067\u306eRankNet\u306e\u5b9f\u88c5\n\u305d\u308c\u3067\u306fRankNet\u3092Chainer\u3067\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\uff0e\nChainer\u3067\u306f\u640d\u5931\u95a2\u6570softmax_cross_entropy()\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3059\u304c\uff0csoftmax_cross_entropy()\u306f\u76ee\u6a19\u5909\u6570\u3068\u3057\u3066int32\u578b\u3057\u304b\u53d7\u3051\u53d6\u308c\u306a\u3044\u305f\u3081\u4f7f\u3048\u307e\u305b\u3093\uff0e(\u02c9PAB\\bar{P}_{AB}\u306f12\\frac{1}{2}\u3068\u306a\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\uff0e)\n\u305d\u3053\u3067\uff0c\u30b3\u30b9\u30c8\u95a2\u6570CABC_{AB}\u3092\u81ea\u524d\u3067\u5b9f\u88c5\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u3067\u3059\u304c\uff0c\u4ed6\u306e\u640d\u5931\u95a2\u6570\u3067\u306f\u5b9f\u88c5\u3057\u3066\u3044\u308bbackward()\u3092\u5b9f\u88c5\u3057\u306a\u304f\u3066\u3082\u5b66\u7fd2\u304c\u3067\u304d\u3066\u3057\u307e\u3063\u3066\u3044\u3066\u2026backward()\u3092\u5b9f\u88c5\u3057\u306a\u3044\u3068\u81ea\u52d5\u7684\u306b\u6570\u5024\u5fae\u5206\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff0c\u304a\u8a73\u3057\u3044\u65b9\u30b3\u30e1\u30f3\u30c8\u3092\u9802\u3051\u308b\u3068\u5b09\u3057\u3044\u3067\u3059\uff0e\n\u4ee5\u4e0bRankNet\u306e\u5b9f\u88c5\u3067\u3059\uff0c\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u30e2\u30c7\u30eb\u3068\u3057\u3066\u306f\uff0c\u3010\u5165\u529b\u5c64\u3011->\u3010\u96a0\u308c\u5c64\u3011->\u3010\u96a0\u308c\u5c64\u3011->\u3010\u51fa\u529b\u5c64\u3011\u306e\u5358\u7d14\u306a\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\uff0e\n\nnet.py\nfrom chainer import Chain\nimport chainer.functions as F\nimport chainer.links as L\n\n\nclass MLP(Chain):\n\n    def __init__(self, n_in, n_hidden):\n        super(MLP, self).__init__(\n            l1=L.Linear(n_in, n_hidden),\n            l2=L.Linear(n_hidden, n_hidden),\n            l3=L.Linear(n_hidden, 1)\n        )\n\n    def __call__(self, x):\n        h1 = F.relu(self.l1(x))\n        h2 = F.relu(self.l2(h1))\n        return self.l3(h2)\n\n\nclass RankNet(Chain):\n\n    def __init__(self, predictor):\n        super(RankNet, self).__init__(predictor=predictor)\n\n    def __call__(self, x_i, x_j, t_i, t_j):\n        s_i = self.predictor(x_i)\n        s_j = self.predictor(x_j)\n        s_diff = s_i - s_j\n        if t_i.data > t_j.data:\n            S_ij = 1\n        elif t_i.data < t_j.data:\n            S_ij = -1\n        else:\n            S_ij = 0\n        self.loss = (1 - S_ij) * s_diff / 2. + \\\n            F.math.exponential.Log()(1 + F.math.exponential.Exp()(-s_diff))\n        return self.loss\n\n\n\n\u5b9f\u88c5\u3057\u305fRankNet\u3092\u4eba\u5de5\u30c7\u30fc\u30bf\u306b\u9069\u7528\u3057\u3066\u307f\u307e\u3059\uff0e\n\u4eba\u5de5\u30c7\u30fc\u30bf\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u751f\u6210\u3057\u307e\u3057\u305f\uff0e\nX=({\\bf x}_1, {\\bf x}_2, \\dots, {\\bf x}_{1000})^{\\rm T} \\\\\n{\\bf y}=(y_1, y_2, \\dots, y_{1000}) \\\\\n{\\bf w} = {\\mathcal N}({\\bf 0}, {\\bf 1}) \\\\\ny_i = uniform(1,5) \\\\\n{\\bf x}_i={\\mathcal N}(0, 5) + y_i{\\bf w}\nX=(x1,x2,\u2026,x1000)Ty=(y1,y2,\u2026,y1000)w=N(0,1)yi=uniform(1,5)xi=N(0,5)+yiw{X=({\\bf x}_1, {\\bf x}_2, \\dots, {\\bf x}_{1000})^{\\rm T} \\\\\n{\\bf y}=(y_1, y_2, \\dots, y_{1000}) \\\\\n{\\bf w} = {\\mathcal N}({\\bf 0}, {\\bf 1}) \\\\\ny_i = uniform(1,5) \\\\\n{\\bf x}_i={\\mathcal N}(0, 5) + y_i{\\bf w}\n}\n50\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u30921000\u500b\uff0c\u9069\u5408\u5ea6\u306f[1,2,3,4,5]\u306e\u3044\u305a\u308c\u304b\u3067\u3059\uff0e\nPCA\u7a7a\u9593\u3067\u30d7\u30ed\u30c3\u30c8\u3059\u308b\u3068\uff0c\u4ee5\u4e0b\u306e\u69d8\u306a\u56f3\u3068\u306a\u308a\u307e\u3059\uff0e\n\n\u306a\u3093\u3068\u306a\u304f\uff0c\u56f3\u306e\u5de6\u4e0a\u306b\u884c\u304f\u307b\u3069\u9069\u5408\u5ea6\u304c\u9ad8\u304f\uff0c\u53f3\u4e0b\u306b\u884c\u304f\u307b\u3069\u9069\u5408\u5ea6\u304c\u5c0f\u3055\u304f\u306a\u308a\u305d\u3046\u3067\u3059\uff0e\n\u4ee5\u4e0b\u5b66\u7fd2\u3068\u8a55\u4fa1\u306e\u30b3\u30fc\u30c9\u3067\u3059\uff0e\n\u5b66\u7fd2\u306f\u78ba\u7387\u7684\u52fe\u914d\u964d\u4e0b\u6cd5\u3092\u7528\u3044\u3066\u3044\u307e\u3059\uff0c\u8a13\u7df4\u30c7\u30fc\u30bf\u306f\u6bce\u56de\u30e9\u30f3\u30c0\u30e0\u306b\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u3044\u307e\u3059\uff0e\n\u4e88\u6e2c\u7cbe\u5ea6\u306e\u8a55\u4fa1\u306fNDCG@100\u3092\u7528\u3044\u307e\u3057\u305f\uff0e\n\ntrain_toy.py\nimport numpy as np\nfrom chainer import Variable, optimizers\nfrom sklearn.cross_validation import train_test_split\nimport net\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef make_dataset(n_dim, n_rank, n_sample, sigma):\n    ys = np.random.random_integers(n_rank, size=n_sample)\n    w = np.random.randn(n_dim)\n    X = [sigma * np.random.randn(n_dim) + w * y for y in ys]\n    X = np.array(X).astype(np.float32)\n    ys = np.reshape(np.array(ys), (-1, 1))\n    return X, ys\n\n\ndef ndcg(y_true, y_score, k=100):\n    y_true = y_true.ravel()\n    y_score = y_score.ravel()\n    y_true_sorted = sorted(y_true, reverse=True)\n    ideal_dcg = 0\n    for i in range(k):\n        ideal_dcg += (2 ** y_true_sorted[i] - 1.) / np.log2(i + 2)\n    dcg = 0\n    argsort_indices = np.argsort(y_score)[::-1]\n    for i in range(k):\n        dcg += (2 ** y_true[argsort_indices[i]] - 1.) / np.log2(i + 2)\n    ndcg = dcg / ideal_dcg\n    return ndcg\n\nif __name__ == '__main__':\n    np.random.seed(0)\n    n_dim = 50\n    n_rank = 5\n    n_sample = 1000\n    sigma = 5.\n    X, ys = make_dataset(n_dim, n_rank, n_sample, sigma)\n    X_train, X_test, y_train, y_test = train_test_split(X, ys, test_size=0.33)\n\n    n_iter = 2000\n    n_hidden = 20\n    loss_step = 50\n    N_train = np.shape(X_train)[0]\n\n    model = net.RankNet(net.MLP(n_dim, n_hidden))\n    optimizer = optimizers.Adam()\n    optimizer.setup(model)\n\n    N_train = np.shape(X_train)[0]\n    train_ndcgs = []\n    test_ndcgs = []\n    for step in range(n_iter):\n        i, j = np.random.randint(N_train, size=2)\n        x_i = Variable(X_train[i].reshape(1, -1))\n        x_j = Variable(X_train[j].reshape(1, -1))\n        y_i = Variable(y_train[i])\n        y_j = Variable(y_train[j])\n        model.zerograds()\n        loss = model(x_i, x_j, y_i, y_j)\n        loss.backward()\n        optimizer.update()\n        if (step + 1) % loss_step == 0:\n            train_score = model.predictor(Variable(X_train))\n            test_score = model.predictor(Variable(X_test))\n            train_ndcg = ndcg(y_train, train_score.data)\n            test_ndcg = ndcg(y_test, test_score.data)\n            train_ndcgs.append(train_ndcg)\n            test_ndcgs.append(test_ndcg)\n            print(\"step: {0}\".format(step + 1))\n            print(\"NDCG@100 | train: {0}, test: {1}\".format(train_ndcg, test_ndcg))\n\n    plt.plot(train_ndcgs, label=\"Train\")\n    plt.plot(test_ndcgs, label=\"Test\")\n    xx = np.linspace(0, n_iter / loss_step, num=n_iter / loss_step + 1)\n    labels = np.arange(loss_step, n_iter + 1, loss_step)\n    plt.xticks(xx, labels, rotation=45)\n    plt.legend(loc=\"best\")\n    plt.xlabel(\"step\")\n    plt.ylabel(\"NDCG@10\")\n    plt.ylim(0, 1.1)\n    plt.tight_layout()\n    plt.savefig(\"result.pdf\")\n\n\n\n\n\u8a13\u7df4\u30c7\u30fc\u30bf\u3082\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3082\u540c\u3058\u5206\u5e03\u304b\u3089\u751f\u6210\u3057\u3066\u308b\u306e\u3067\uff0c\u5f53\u305f\u308a\u524d\u3068\u8a00\u3048\u3070\u5f53\u305f\u308a\u524d\u306a\u306e\u3067\u3059\u304c\uff0c\u8a55\u4fa1\u5024\u304c\u5171\u306b\u4e0a\u304c\u3063\u3066\u3044\u304f\u69d8\u5b50\u304c\u5206\u304b\u308a\u307e\u3059\uff0e\n\n\u305d\u306e\u4ed6\n\u4f55\u304b\u9762\u767d\u3044\u3082\u306e\u4f5c\u308a\u305f\u3044\n# \u3053\u306e\u8a18\u4e8b\u306f\u4f55\uff1f\n\u6a5f\u68b0\u5b66\u7fd2\u306e\u67a0\u7d44\u307f\u306e\u4e2d\u306b\u30e9\u30f3\u30af\u5b66\u7fd2(\u30e9\u30f3\u30ad\u30f3\u30b0\u5b66\u7fd2\uff0cLearning to Rank)\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308a\u307e\u3059\uff0e\n\u30e9\u30f3\u30af\u5b66\u7fd2\u306e\u30e2\u30c7\u30eb\u306e1\u3064\u3068\u3057\u3066\uff0c\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u7528\u3044\u305fRankNet\u304c\u3042\u308a\u307e\u3059\uff0e\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\uff0cRankNet\u3092Chainer\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3068\u3044\u3046\u8a71\u3092\u3057\u307e\u3059\uff0e\n\n\u4e88\u6e2c\u7d50\u679c\u3092\u898b\u308b\u3068\u306a\u3093\u3068\u306a\u304f\u5b9f\u88c5\u306f\u6b63\u3057\u3044\u3088\u3046\u306b\u601d\u3048\u308b\u306e\u3067\u3059\u304c\uff0cChainer\u306e\u4f7f\u3044\u65b9\u306a\u3069\u9593\u9055\u3063\u3066\u3044\u308b\u70b9\u304c\u3042\u308a\u307e\u3057\u305f\u3089\u305c\u3072\u305c\u3072\u3054\u6307\u6458\u3092\u9802\u3051\u308b\u3068\u5b09\u3057\u3044\u3067\u3059\uff0e\n\n# \u305d\u3082\u305d\u3082\u30e9\u30f3\u30af\u5b66\u7fd2\u3068\u306f\u4f55\u3060\n\u30e9\u30f3\u30af\u5b66\u7fd2\u3067\u306f\uff0c$({\\mathbf x}, y)=$(\u7279\u5fb4\u91cf\uff0c\u9069\u5408\u5ea6)\u306e\u96c6\u5408\u304c\u5b66\u7fd2\u3055\u308c\u307e\u3059\uff0e\n\u9069\u5408\u5ea6\u306e\u5927\u304d\u3044\u30a2\u30a4\u30c6\u30e0\u306b\u306f\u5927\u304d\u3044\u5024\u3092\uff0c\u9069\u5408\u5ea6\u306e\u5c0f\u3055\u3044\u30a2\u30a4\u30c6\u30e0\u306b\u306f\u5c0f\u3055\u3044\u5024\u3092\u8fd4\u3059\u3088\u3046\u306a\u95a2\u6570$f$\u3092\u5b66\u7fd2\u3057\u307e\u3059\uff0e\n\n\u4eca2\u3064\u306e\u30a2\u30a4\u30c6\u30e0$A$\u3068$B$\u304c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u3055\u308c\u3066\u3044\u308b\u3068\u3057\u307e\u3059\uff0e\n\n```math\nA=(\\mathbf{x}_A, y_A) \\\\\nB=(\\mathbf{x}_B, y_B)\n```\n\u307e\u305f\uff0c$A$\u306f$B$\u3088\u308a\u3082\u9069\u5408\u5ea6\u304c\u5927\u304d\u3044\u3068\u3057\u307e\u3059\uff0e\u3064\u307e\u308a\uff0c$y_A>y_B$\u304c\u6210\u308a\u7acb\u3064\u3068\u3057\u307e\u3059\uff0e\n\u3053\u306e\u3068\u304d\uff0c\u95a2\u6570$f$\u306f\u4ee5\u4e0b\u306e\u95a2\u4fc2\u304c\u6210\u308a\u7acb\u3064\u3088\u3046\u306b\u5b66\u7fd2\u3057\u307e\u3059\uff0e\n\n```math\nf(\\mathbf{x}_A)>f(\\mathbf{x}_B)\n```\n\n\u4f55\u3058\u3083\u3053\u308a\u3083\u3068\u3044\u3046\u611f\u3058\u306a\u306e\u3067\uff0c\u30e9\u30d6\u30e9\u30a4\u30d6\uff01\u3092\u4f7f\u3063\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e\n\u307e\u305a\u306f\u30e9\u30d6\u30e9\u30a4\u30d6\uff01\u306e\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u306b\u9069\u5408\u5ea6\uff08\u2606\uff0c\u2606\u2606\uff0c\u2606\u2606\u2606\uff09\u3092\u4ed8\u3051\u3066\u3044\u304d\u307e\u3057\u3087\u3046\uff0e\n\u2606\u306e\u6570\u304c\u591a\u3044\u307b\u3069\u9069\u5408\u5ea6\u304c\u9ad8\u3044(\u597d\u307f\u3067\u3042\u308b)\u3053\u3068\u3092\u793a\u3057\u307e\u3059\uff0e\n\n![cat_1.png](https://qiita-image-store.s3.amazonaws.com/0/58543/3aa38ad5-7e60-327b-deab-58268f3763f5.png)\n\n\n\u4ee5\u4e0b\u306e\u30da\u30a2\u3092\u5b66\u7fd2\u3059\u308b\u3068\uff0c\u3053\u3093\u306a\u95a2\u6570$f$\u304c\u5f97\u3089\u308c\u308b\u306f\u305a\u3067\u3059\uff0e\n![learning.PNG](https://qiita-image-store.s3.amazonaws.com/0/58543/e0d23200-66f4-d3e0-99e3-9b6aaff02a12.png)\n\n$f({\\bf x})={\\bf w}^T{\\bf x}$\u306e\u3068\u304d\uff0c\u91cd\u307f${\\bf w}$\u306f\u4ee5\u4e0b\u306e\u56f3\u3067\u793a\u3055\u308c\u308b\u3088\u3046\u306b\uff0c\u7279\u5fb4\u91cf\u304c\u76f4\u4ea4\u5c04\u5f71\u3055\u308c\u305f\u70b9\u304c\u9069\u5408\u5ea6\u9806\u306b\u4e26\u3076\u3088\u3046\u306b\u63a8\u5b9a\u3055\u308c\u307e\u3059\uff0e\u5b9f\u969b\u306e\u554f\u984c\u3067\u306f\uff0c\u5b8c\u5168\u306b\u9069\u5408\u5ea6\u9806\u306b\u4e26\u3076\u3088\u3046\u306a${\\bf w}$\u306f\u5b58\u5728\u3057\u306a\u3044\u3067\u3057\u3087\u3046\u3051\u3069\u2026\uff08\u21d2\u7dda\u5f62\u5206\u96e2\u4e0d\u53ef\u80fd\uff09\n\n![wpredict_1.png](https://qiita-image-store.s3.amazonaws.com/0/58543/d60957e2-b89e-43f4-b640-26f43a2dca95.png)\n\n\n\n\u5b66\u7fd2\u306e\u7d50\u679c\u5f97\u3089\u308c\u305f\u95a2\u6570$f$\u3092\u7528\u3044\u3066\uff0c\u307e\u3060\u9069\u5408\u5ea6\u3092\u4ed8\u3051\u3066\u3044\u306a\u3044\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u306e\u30e9\u30f3\u30ad\u30f3\u30b0\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\n![calc_f1.png](https://qiita-image-store.s3.amazonaws.com/0/58543/2fb1790f-0996-1112-338a-b23538514b35.png)\n\n\n\u3053\u3053\u3067\u306f\u300c\u30da\u30a2\u3092\u5b66\u7fd2\u3059\u308b\u300d\u3068\u66f8\u304d\u307e\u3057\u305f\u304c\uff0c\u5b9f\u306f\u30e9\u30f3\u30af\u5b66\u7fd2\u306b\u306f\u5927\u304d\u304f\u5206\u3051\u30663\u3064\u306e\u624b\u6cd5\u304c\u3042\u308a\uff0c\u305d\u306e\u3046\u3061\u306epairwise\u3068\u3044\u3046\u624b\u6cd5\u306b\u5f53\u305f\u308a\u307e\u3059\uff0e\u4ed6\u306b\u306fpointwise\uff0clistwise\u3068\u3044\u3063\u305f\u624b\u6cd5\u304c\u3042\u308a\u307e\u3059\u304c\uff0c\u3053\u308c\u3089\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u306e\u8cc7\u6599\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n\n* [DSIRNLP#1 \u30e9\u30f3\u30ad\u30f3\u30b0\u5b66\u7fd2\u3053\u3068\u306f\u3058\u3081](http://www.slideshare.net/sleepy_yoshi/dsirnlp1)\n* [Confidence Weighted\u3067 \u30e9\u30f3\u30af\u5b66\u7fd2\u3092\u5b9f\u88c5\u3057\u3066\u307f\u305f]\n(http://www.slideshare.net/tkng/confidence-weighted)\n\n# RankNet\u306b\u3064\u3044\u3066\nRankNet\u306f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u57fa\u3065\u304f\u30e9\u30f3\u30af\u5b66\u7fd2\u306e\u30e2\u30c7\u30eb\u3067\u3042\u308a\uff0cpairwise\u624b\u6cd5\u306b\u5f53\u305f\u308a\u307e\u3059\uff0e\n\u4e88\u6e2c\u30e2\u30c7\u30eb\u81ea\u4f53\u306f\u666e\u901a\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3068\u5909\u308f\u3089\u306a\u3044\u306e\u3067\u3059\u304c\uff0c\u30b3\u30b9\u30c8\u95a2\u6570\u306e\u8a2d\u8a08\u304c\u7570\u306a\u308a\u307e\u3059\uff0e\u3068\u3044\u3063\u3066\u3082\uff0c\u30b3\u30b9\u30c8\u95a2\u6570\u3068\u3057\u3066\u3088\u304f\u4f7f\u308f\u308c\u308b\u30af\u30ed\u30b9\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u95a2\u6570\u3068\u767a\u60f3\u306f\u540c\u3058\u3067\u3059\uff0e\n\n\u4e0a\u3068\u540c\u3058\u3088\u3046\u306b\uff0c\u30a2\u30a4\u30c6\u30e0$A$\u3068$B$\u304c\u305d\u308c\u305e\u308c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u3055\u308c\u3066\u3044\u308b\u3068\u3057\uff0c$A$\u306f$B$\u3088\u308a\u3082\u9069\u5408\u5ea6\u304c\u9ad8\u3044\u3068\u3057\u307e\u3059\uff0e\n\n```math\nA=(\\mathbf{x}_A, y_A) \\\\\nB=(\\mathbf{x}_B, y_B)\n```\n\n\u95a2\u6570$f$\u306b\u3088\u308b$A$\u3068$B$\u306e\u30b9\u30b3\u30a2\u306f\u305d\u308c\u305e\u308c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6c42\u3081\u3089\u308c\u307e\u3059\uff0e\n\n```math\ns_A=f(\\mathbf{x}_A) \\\\\ns_B=f(\\mathbf{x}_B)\n```\nRankNet\u304c\u51fa\u529b\u3059\u308b\uff0c$A$\u304c$B$\u3088\u308a\u3082\u9ad8\u304f\u30e9\u30f3\u30af\u4ed8\u3051\u3055\u308c\u308b\u78ba\u7387\u306f\uff0c$s_A$\u3068$s_B$\u3092\u7528\u3044\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u3055\u308c\u307e\u3059\uff0e\n\n```math\nP_{AB}=\\frac{1}{1+e^{-\\sigma(s_A-s_B)}}\n```\n\u76f4\u611f\u7684\u306b\u306f\uff0c$s_A$\u304c\u5927\u304d\u304f\u306a\u308c\u3070$P_{AB}$\u306f1\u306b\u8fd1\u3065\u304d\uff0c$s_B$\u304c\u5927\u304d\u304f\u306a\u308c\u3070$P_{AB}$\u306f0\u306b\u8fd1\u3065\u304f\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\n$P_{AB}$\u3092\u7528\u3044\u3066\uff0c\u30b3\u30b9\u30c8\u95a2\u6570\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u3055\u308c\u307e\u3059\uff0e\n\n```math\nC_{AB}=-\\bar{P}_{AB}\\log{P_{AB}}-(1-\\bar{P}_{AB})\\log(1-P_{AB})\n```\n\u3053\u3053\u3067\uff0c$\\bar{P}_{AB}$\u306f$A$\u304c$B$\u3088\u308a\u3082\u9ad8\u304f\u30e9\u30f3\u30af\u4ed8\u3051\u3055\u308c\u308b\u65e2\u77e5\u306e\u78ba\u7387\u3068\u3057\u307e\u3059\uff0e\n[\u53c2\u8003\u6587\u732e](http://research.microsoft.com/pubs/132652/MSR-TR-2010-82.pdf)\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3057\u305f\uff0e\n\n```math\n\\bar{P}_{AB}=\\begin{cases}\n1 & (A \\succ B) \\\\\n0 & (A \\prec B) \\\\\n\\frac{1}{2} & (otherwise)\n\\end{cases}\n```\n$C_{AB}$\u306f\u307e\u3055\u306b\u30af\u30ed\u30b9\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u95a2\u6570\u3067\u3042\u308a\uff0c$P_{AB}$\u304c$\\bar{P}_{AB}$\u3068\u9060\u3051\u308c\u3070\u9060\u3044\u307b\u3069\u5927\u304d\u306a\u5024\u3068\u306a\u308a\u307e\u3059\uff0eRankNet\u3067\u306f\u3053\u306e\u30b3\u30b9\u30c8\u95a2\u6570\u3092\u6700\u5c0f\u5316\u3059\u308b\u3088\u3046\u306b\u5b66\u7fd2\u3057\u307e\u3059\uff0e\n\n# Chainer\u3067\u306eRankNet\u306e\u5b9f\u88c5\n\u305d\u308c\u3067\u306fRankNet\u3092Chainer\u3067\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\uff0e\nChainer\u3067\u306f\u640d\u5931\u95a2\u6570softmax_cross_entropy()\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3059\u304c\uff0csoftmax_cross_entropy()\u306f\u76ee\u6a19\u5909\u6570\u3068\u3057\u3066int32\u578b\u3057\u304b\u53d7\u3051\u53d6\u308c\u306a\u3044\u305f\u3081\u4f7f\u3048\u307e\u305b\u3093\uff0e($\\bar{P}_{AB}$\u306f$\\frac{1}{2}$\u3068\u306a\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\uff0e)\n\n\u305d\u3053\u3067\uff0c\u30b3\u30b9\u30c8\u95a2\u6570$C_{AB}$\u3092\u81ea\u524d\u3067\u5b9f\u88c5\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u3067\u3059\u304c\uff0c\u4ed6\u306e\u640d\u5931\u95a2\u6570\u3067\u306f\u5b9f\u88c5\u3057\u3066\u3044\u308b**backward()\u3092\u5b9f\u88c5\u3057\u306a\u304f\u3066\u3082\u5b66\u7fd2\u304c\u3067\u304d\u3066\u3057\u307e\u3063\u3066\u3044\u3066**\u2026backward()\u3092\u5b9f\u88c5\u3057\u306a\u3044\u3068\u81ea\u52d5\u7684\u306b\u6570\u5024\u5fae\u5206\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff0c\u304a\u8a73\u3057\u3044\u65b9\u30b3\u30e1\u30f3\u30c8\u3092\u9802\u3051\u308b\u3068\u5b09\u3057\u3044\u3067\u3059\uff0e\n\n\u4ee5\u4e0bRankNet\u306e\u5b9f\u88c5\u3067\u3059\uff0c\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u30e2\u30c7\u30eb\u3068\u3057\u3066\u306f\uff0c\u3010\u5165\u529b\u5c64\u3011->\u3010\u96a0\u308c\u5c64\u3011->\u3010\u96a0\u308c\u5c64\u3011->\u3010\u51fa\u529b\u5c64\u3011\u306e\u5358\u7d14\u306a\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\uff0e\n\n```py:net.py\nfrom chainer import Chain\nimport chainer.functions as F\nimport chainer.links as L\n\n\nclass MLP(Chain):\n\n    def __init__(self, n_in, n_hidden):\n        super(MLP, self).__init__(\n            l1=L.Linear(n_in, n_hidden),\n            l2=L.Linear(n_hidden, n_hidden),\n            l3=L.Linear(n_hidden, 1)\n        )\n\n    def __call__(self, x):\n        h1 = F.relu(self.l1(x))\n        h2 = F.relu(self.l2(h1))\n        return self.l3(h2)\n\n\nclass RankNet(Chain):\n\n    def __init__(self, predictor):\n        super(RankNet, self).__init__(predictor=predictor)\n\n    def __call__(self, x_i, x_j, t_i, t_j):\n        s_i = self.predictor(x_i)\n        s_j = self.predictor(x_j)\n        s_diff = s_i - s_j\n        if t_i.data > t_j.data:\n            S_ij = 1\n        elif t_i.data < t_j.data:\n            S_ij = -1\n        else:\n            S_ij = 0\n        self.loss = (1 - S_ij) * s_diff / 2. + \\\n            F.math.exponential.Log()(1 + F.math.exponential.Exp()(-s_diff))\n        return self.loss\n\n```\n\n\u5b9f\u88c5\u3057\u305fRankNet\u3092\u4eba\u5de5\u30c7\u30fc\u30bf\u306b\u9069\u7528\u3057\u3066\u307f\u307e\u3059\uff0e\n\u4eba\u5de5\u30c7\u30fc\u30bf\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u751f\u6210\u3057\u307e\u3057\u305f\uff0e\n\n```math\nX=({\\bf x}_1, {\\bf x}_2, \\dots, {\\bf x}_{1000})^{\\rm T} \\\\\n{\\bf y}=(y_1, y_2, \\dots, y_{1000}) \\\\\n{\\bf w} = {\\mathcal N}({\\bf 0}, {\\bf 1}) \\\\\ny_i = uniform(1,5) \\\\\n{\\bf x}_i={\\mathcal N}(0, 5) + y_i{\\bf w}\n```\n\n50\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u30921000\u500b\uff0c\u9069\u5408\u5ea6\u306f[1,2,3,4,5]\u306e\u3044\u305a\u308c\u304b\u3067\u3059\uff0e\nPCA\u7a7a\u9593\u3067\u30d7\u30ed\u30c3\u30c8\u3059\u308b\u3068\uff0c\u4ee5\u4e0b\u306e\u69d8\u306a\u56f3\u3068\u306a\u308a\u307e\u3059\uff0e\n\n![pca_fig.png](https://qiita-image-store.s3.amazonaws.com/0/58543/53063e85-90cf-15f0-5522-46648ff36ad5.png)\n\n\u306a\u3093\u3068\u306a\u304f\uff0c\u56f3\u306e\u5de6\u4e0a\u306b\u884c\u304f\u307b\u3069\u9069\u5408\u5ea6\u304c\u9ad8\u304f\uff0c\u53f3\u4e0b\u306b\u884c\u304f\u307b\u3069\u9069\u5408\u5ea6\u304c\u5c0f\u3055\u304f\u306a\u308a\u305d\u3046\u3067\u3059\uff0e\n\n\u4ee5\u4e0b\u5b66\u7fd2\u3068\u8a55\u4fa1\u306e\u30b3\u30fc\u30c9\u3067\u3059\uff0e\n\u5b66\u7fd2\u306f\u78ba\u7387\u7684\u52fe\u914d\u964d\u4e0b\u6cd5\u3092\u7528\u3044\u3066\u3044\u307e\u3059\uff0c\u8a13\u7df4\u30c7\u30fc\u30bf\u306f\u6bce\u56de\u30e9\u30f3\u30c0\u30e0\u306b\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u3044\u307e\u3059\uff0e\n\u4e88\u6e2c\u7cbe\u5ea6\u306e\u8a55\u4fa1\u306fNDCG@100\u3092\u7528\u3044\u307e\u3057\u305f\uff0e\n\n```py:train_toy.py\nimport numpy as np\nfrom chainer import Variable, optimizers\nfrom sklearn.cross_validation import train_test_split\nimport net\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef make_dataset(n_dim, n_rank, n_sample, sigma):\n    ys = np.random.random_integers(n_rank, size=n_sample)\n    w = np.random.randn(n_dim)\n    X = [sigma * np.random.randn(n_dim) + w * y for y in ys]\n    X = np.array(X).astype(np.float32)\n    ys = np.reshape(np.array(ys), (-1, 1))\n    return X, ys\n\n\ndef ndcg(y_true, y_score, k=100):\n    y_true = y_true.ravel()\n    y_score = y_score.ravel()\n    y_true_sorted = sorted(y_true, reverse=True)\n    ideal_dcg = 0\n    for i in range(k):\n        ideal_dcg += (2 ** y_true_sorted[i] - 1.) / np.log2(i + 2)\n    dcg = 0\n    argsort_indices = np.argsort(y_score)[::-1]\n    for i in range(k):\n        dcg += (2 ** y_true[argsort_indices[i]] - 1.) / np.log2(i + 2)\n    ndcg = dcg / ideal_dcg\n    return ndcg\n\nif __name__ == '__main__':\n    np.random.seed(0)\n    n_dim = 50\n    n_rank = 5\n    n_sample = 1000\n    sigma = 5.\n    X, ys = make_dataset(n_dim, n_rank, n_sample, sigma)\n    X_train, X_test, y_train, y_test = train_test_split(X, ys, test_size=0.33)\n\n    n_iter = 2000\n    n_hidden = 20\n    loss_step = 50\n    N_train = np.shape(X_train)[0]\n\n    model = net.RankNet(net.MLP(n_dim, n_hidden))\n    optimizer = optimizers.Adam()\n    optimizer.setup(model)\n\n    N_train = np.shape(X_train)[0]\n    train_ndcgs = []\n    test_ndcgs = []\n    for step in range(n_iter):\n        i, j = np.random.randint(N_train, size=2)\n        x_i = Variable(X_train[i].reshape(1, -1))\n        x_j = Variable(X_train[j].reshape(1, -1))\n        y_i = Variable(y_train[i])\n        y_j = Variable(y_train[j])\n        model.zerograds()\n        loss = model(x_i, x_j, y_i, y_j)\n        loss.backward()\n        optimizer.update()\n        if (step + 1) % loss_step == 0:\n            train_score = model.predictor(Variable(X_train))\n            test_score = model.predictor(Variable(X_test))\n            train_ndcg = ndcg(y_train, train_score.data)\n            test_ndcg = ndcg(y_test, test_score.data)\n            train_ndcgs.append(train_ndcg)\n            test_ndcgs.append(test_ndcg)\n            print(\"step: {0}\".format(step + 1))\n            print(\"NDCG@100 | train: {0}, test: {1}\".format(train_ndcg, test_ndcg))\n\n    plt.plot(train_ndcgs, label=\"Train\")\n    plt.plot(test_ndcgs, label=\"Test\")\n    xx = np.linspace(0, n_iter / loss_step, num=n_iter / loss_step + 1)\n    labels = np.arange(loss_step, n_iter + 1, loss_step)\n    plt.xticks(xx, labels, rotation=45)\n    plt.legend(loc=\"best\")\n    plt.xlabel(\"step\")\n    plt.ylabel(\"NDCG@10\")\n    plt.ylim(0, 1.1)\n    plt.tight_layout()\n    plt.savefig(\"result.pdf\")\n\n```\n\n![result.PNG](https://qiita-image-store.s3.amazonaws.com/0/58543/5993e2a5-09b0-fe4f-d404-135ce5616a5d.png)\n\n\u8a13\u7df4\u30c7\u30fc\u30bf\u3082\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3082\u540c\u3058\u5206\u5e03\u304b\u3089\u751f\u6210\u3057\u3066\u308b\u306e\u3067\uff0c\u5f53\u305f\u308a\u524d\u3068\u8a00\u3048\u3070\u5f53\u305f\u308a\u524d\u306a\u306e\u3067\u3059\u304c\uff0c\u8a55\u4fa1\u5024\u304c\u5171\u306b\u4e0a\u304c\u3063\u3066\u3044\u304f\u69d8\u5b50\u304c\u5206\u304b\u308a\u307e\u3059\uff0e\n\n# \u305d\u306e\u4ed6\n\u4f55\u304b\u9762\u767d\u3044\u3082\u306e\u4f5c\u308a\u305f\u3044\n", "tags": ["Python", "MachineLearning", "Chainer"]}