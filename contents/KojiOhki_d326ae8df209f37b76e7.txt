{"tags": ["Go", "RabbitMQ", "amqp"], "context": " More than 1 year has passed since last update.\u74b0\u5883\u30fb\u30d0\u30fc\u30b8\u30e7\u30f3\nWindows 7\ngo 1.4.2\nRabbitMQ 3.4.1\ngo amqp 0.9.1\n\nAMQP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u5c0e\u5165\ngo get github.com/streadway/amqp\n\n\nSubscriber\n\nsub.go\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"github.com/streadway/amqp\"\n)\n\nvar amqpURI string = \"amqp://localhost:5672\"\n\nfunc failOnError(err error, msg string) {\n    if err != nil {\n        log.Fatalf(\"%s: %s\", msg, err)\n        panic(fmt.Sprintf(\"%s: %s\", msg, err))\n    }\n}\n\nfunc main() {\n    conn, err := amqp.Dial(amqpURI)\n    failOnError(err, \"Failed to connect to MQ\")\n    defer conn.Close()\n\n    channel, err := conn.Channel()\n    failOnError(err, \"Failed to open a channel\")\n\n    q, err := channel.QueueDeclare(\n        \"my-queue\", // name\n        false,      // durable\n        false,      // delete when unused\n        false,      // exclusive\n        false,      // no-wait\n        nil,        // arguments\n    )\n    failOnError(err, \"Failed to declare a queue\")\n\n    messages, err := channel.Consume(\n        q.Name,     // queue\n        \"\",         // consumer\n        true,       // auto-ack\n        false,      // exclusive\n        false,      // no-local\n        false,      // no-wait\n        nil,        // arguments\n    )\n    failOnError(err, \"Failed to register a consumer\")\n\n    forever := make(chan bool)\n\n    go func() {\n        for data := range messages {\n            log.Printf(\"%s\\n\", data.Body)\n        }\n    }()\n\n    log.Printf(\" [*] Waiting for messages. To exit press CTRL+C\\n\")\n    <-forever\n}\n\n\n\nPublisher\n\npub.go\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"github.com/streadway/amqp\"\n)\n\nvar amqpURI string = \"amqp://localhost:5672\"\n\nfunc failOnError(err error, msg string) {\n    if err != nil {\n        log.Fatalf(\"%s: %s\", msg, err)\n        panic(fmt.Sprintf(\"%s: %s\", msg, err))\n    }\n}\n\nfunc main() {\n    conn, err := amqp.Dial(amqpURI)\n    failOnError(err, \"Failed to connect to MQ\")\n    defer conn.Close()\n\n    channel, err := conn.Channel()\n    failOnError(err, \"Failed to open a channel\")\n\n    sendMessage(channel, \"my-queue\", \"Hello, AMQP1!!\")\n    sendMessage(channel, \"my-queue\", \"Hello, AMQP2!!\")\n    sendMessage(channel, \"my-queue\", \"Hello, AMQP3!!\")\n}\n\nfunc sendMessage(channel *amqp.Channel, queueName string, payload string) {\n    err := channel.Publish(\n        \"\",     // exchange\n        queueName,  // routing key\n        false,      // mandatory\n        false,      // immediate\n        amqp.Publishing{\n            ContentType:    \"text/plain\",\n            Body:           []byte(payload),\n        })\n    failOnError(err, \"Failed to publish a message\")\n}\n\n\n\n\u5b9f\u884c\u7d50\u679c\n2015/06/17 11:27:40  [*] Waiting for messages. To exit press CTRL+C\n2015/06/17 11:27:45 Hello, AMQP1!!\n2015/06/17 11:27:45 Hello, AMQP2!!\n2015/06/17 11:27:45 Hello, AMQP3!!\n\n**\u74b0\u5883\u30fb\u30d0\u30fc\u30b8\u30e7\u30f3**\nWindows 7\ngo 1.4.2\nRabbitMQ 3.4.1\ngo amqp 0.9.1\n\n###AMQP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u5c0e\u5165\n\n```\ngo get github.com/streadway/amqp\n```\n\n###Subscriber\n\n```go:sub.go\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"github.com/streadway/amqp\"\n)\n\nvar amqpURI string = \"amqp://localhost:5672\"\n\nfunc failOnError(err error, msg string) {\n\tif err != nil {\n\t\tlog.Fatalf(\"%s: %s\", msg, err)\n\t\tpanic(fmt.Sprintf(\"%s: %s\", msg, err))\n\t}\n}\n\nfunc main() {\n    conn, err := amqp.Dial(amqpURI)\n    failOnError(err, \"Failed to connect to MQ\")\n    defer conn.Close()\n\n    channel, err := conn.Channel()\n    failOnError(err, \"Failed to open a channel\")\n\n    q, err := channel.QueueDeclare(\n        \"my-queue\", // name\n        false,      // durable\n        false,      // delete when unused\n        false,      // exclusive\n        false,      // no-wait\n        nil,        // arguments\n    )\n    failOnError(err, \"Failed to declare a queue\")\n\n    messages, err := channel.Consume(\n        q.Name,     // queue\n        \"\",         // consumer\n        true,       // auto-ack\n        false,      // exclusive\n        false,      // no-local\n        false,      // no-wait\n        nil,        // arguments\n    )\n    failOnError(err, \"Failed to register a consumer\")\n\n    forever := make(chan bool)\n\n    go func() {\n        for data := range messages {\n            log.Printf(\"%s\\n\", data.Body)\n        }\n    }()\n\n    log.Printf(\" [*] Waiting for messages. To exit press CTRL+C\\n\")\n    <-forever\n}\n```\n\n###Publisher\n\n```go:pub.go\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"github.com/streadway/amqp\"\n)\n\nvar amqpURI string = \"amqp://localhost:5672\"\n\nfunc failOnError(err error, msg string) {\n\tif err != nil {\n\t\tlog.Fatalf(\"%s: %s\", msg, err)\n\t\tpanic(fmt.Sprintf(\"%s: %s\", msg, err))\n\t}\n}\n\nfunc main() {\n    conn, err := amqp.Dial(amqpURI)\n    failOnError(err, \"Failed to connect to MQ\")\n    defer conn.Close()\n\n    channel, err := conn.Channel()\n    failOnError(err, \"Failed to open a channel\")\n\n    sendMessage(channel, \"my-queue\", \"Hello, AMQP1!!\")\n    sendMessage(channel, \"my-queue\", \"Hello, AMQP2!!\")\n    sendMessage(channel, \"my-queue\", \"Hello, AMQP3!!\")\n}\n\nfunc sendMessage(channel *amqp.Channel, queueName string, payload string) {\n    err := channel.Publish(\n        \"\",     // exchange\n        queueName,  // routing key\n        false,      // mandatory\n        false,      // immediate\n        amqp.Publishing{\n            ContentType:    \"text/plain\",\n            Body:           []byte(payload),\n        })\n    failOnError(err, \"Failed to publish a message\")\n}\n```\n\n###\u5b9f\u884c\u7d50\u679c\n\n```\n2015/06/17 11:27:40  [*] Waiting for messages. To exit press CTRL+C\n2015/06/17 11:27:45 Hello, AMQP1!!\n2015/06/17 11:27:45 Hello, AMQP2!!\n2015/06/17 11:27:45 Hello, AMQP3!!\n```\n"}