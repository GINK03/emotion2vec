{"context": "\u5099\u5fd8\u9332\u5909\u308f\u308a\u306b\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\n\nKaggle \u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u767b\u9332\nKaggle \u306e\u30b5\u30a4\u30c8\u304b\u3089\u3001\u30a2\u30ab\u30a6\u30f3\u30c8\u767b\u9332\u3002\nFacebook \u3084 Google \u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u3067\u3082\u826f\u3044\u3057\u3001\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u304b\u3089\u767b\u9332\u3057\u3066\u3082\u826f\u3044\u3002\n\n\u53c2\u52a0\u3059\u308b\u30b3\u30f3\u30da\u306e\u9078\u629e\nCompetition \u304b\u3089\u9078\u3076\u3002\n\n\u4eca\u56de\u306f\u521d\u3081\u3066\u306a\u306e\u3067\u3001Tutorial \u306e Titanic \u306b\u3057\u305f\u3002\n\u4e57\u8239\u8005\u306e\u30c7\u30fc\u30bf\u304b\u3089\u3001\u4e57\u8239\u8005\u304c\u6551\u52a9\u3055\u308c\u305f\u304b\u3069\u3046\u304b\u3092\u4e88\u6e2c\u3059\u308b\u554f\u984c\u3002\n\n\u30c7\u30fc\u30bf\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n\u5fc5\u8981\u306a\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3002\nKaggle \u30c0\u30c3\u30b7\u30e5\u30dc\u30fc\u30c9\u753b\u9762\u5de6\u306b\u3042\u308b Data  \u304b\u3089\u3002\n\n\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u308b\u3002\u4eca\u56de\u4f7f\u3046\u306e\u306ftrain.csv\u3068test.csv\u306e\uff12\u3064\u3002\n\n\n\u5206\u6790 \uff5e Submit \u307e\u3067\u306e\u6d41\u308c\nTitanic \u306e\u30da\u30fc\u30b8\u672b\u5c3e\u306e Interactive Tutorials \u306b\u3057\u305f\u304c\u3063\u3066\u3001DataQuest \u306b\u5023\u3063\u305f\u3002\nDataQuest \u3067\u306f\u3001Titanic \u3092\u4f8b\u984c\u306b\u53d6\u308a\u4e0a\u3052\u3001\u30d6\u30e9\u30a6\u30b6\u4e0a\u3067 Python \u306e\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u30af\u30a4\u30ba\u306b\u7b54\u3048\u306a\u304c\u3089\u3001\u5206\u6790\u306e\u9032\u3081\u65b9\u304b\u3089 Submission \u7528\u306e\u30c7\u30fc\u30bf\u306e\u4f5c\u308a\u65b9\u306a\u3069\u3092\u77e5\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u3001\u4e88\u6e2c\u7d50\u679c\u304c\u5f97\u3089\u308c\u305f\u3089\u3001submit \u3059\u308b\u3002\nKaggle \u30c0\u30c3\u30b7\u30e5\u30dc\u30fc\u30c9\u753b\u9762\u5de6\u306b\u3042\u308b Make a submission  \u304b\u3089\u3002\n\u7d50\u679c\u3092\u51fa\u529b\u3057\u305f csv \u30d5\u30a1\u30a4\u30eb\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u3066\u304a\u3057\u307e\u3044\u3002\n\nDataQuest\u3067\u4f5c\u6210\u3057\u305f\u30b3\u30fc\u30c9\n\u7dda\u5f62\u56de\u5e30\u3068\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306e\uff12\u3064\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3002\n\ntitanic.py\n# -*- coding: utf-8 -*-\nimport os\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.cross_validation import KFold\n\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\ntitanic = pd.read_csv(u'path/to/train.csv')\n\n### \u30c7\u30fc\u30bf\u51e6\u7406 ###\n# replace na with median value in age\ntitanic.Age = titanic.Age.fillna(titanic.Age.median())\n\n# replace letters to numerics in Embarked Column\ntitanic.loc[titanic[\"Sex\"] == \"male\", \"Sex\"] = 0\ntitanic.loc[titanic[\"Sex\"] == \"female\", \"Sex\"] = 1\n\n# replace letters to numeric in Embarked Column\ntitanic.Embarked = titanic.Embarked.fillna('S')\ntitanic.loc[titanic.Embarked == 'S', 'Embarked'] = 0\ntitanic.loc[titanic.Embarked == 'C', 'Embarked'] = 1\ntitanic.loc[titanic.Embarked == 'Q', 'Embarked'] = 2\n\n# The columns we'll use to predict the target\npredictors = [\"Pclass\", \"Sex\", \"Age\", \"SibSp\", \"Parch\", \"Fare\", \"Embarked\"]\n\n# Initialize our algorithm class\nalg = LinearRegression()\n# Generate cross validation folds for the titanic dataset.  It return the row indices corresponding to train and test.\n# We set random_state to ensure we get the same splits every time we run this.\nkf = KFold(titanic.shape[0], n_folds=3, random_state=1)\n\npredictions = []\nfor train, test in kf:\n    # The predictors we're using the train the algorithm.  Note how we only take the rows in the train folds.\n    train_predictors = (titanic[predictors].iloc[train,:])\n    # The target we're using to train the algorithm.\n    train_target = titanic[\"Survived\"].iloc[train]\n    # Training the algorithm using the predictors and target.\n    alg.fit(train_predictors, train_target)\n    # We can now make predictions on the test fold\n    test_predictions = alg.predict(titanic[predictors].iloc[test,:])\n    predictions.append(test_predictions)\n\n# The predictions are in three separate numpy arrays.  Concatenate them into one.  \n# We concatenate them on axis 0, as they only have one axis.\npredictions = np.concatenate(predictions, axis=0)\n\n# Map predictions to outcomes (only possible outcomes are 1 and 0)\npredictions[predictions > .5] = 1\npredictions[predictions <=.5] = 0\n\n# Calculate accuracy\npositive = np.sum(np.equal(np.array(titanic.Survived), predictions))\naccuracy = positive/float(len(titanic.Survived))\nprint(accuracy)\n\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u3068\u524d\u51e6\u7406\ntitanic_test = pandas.read_csv(\"path/to/test.csv\")\n\ntitanic_test.Age = titanic_test.Age.fillna(titanic.Age.median())\ntitanic_test.loc[titanic_test[\"Sex\"] == \"male\", \"Sex\"] = 0\ntitanic_test.loc[titanic_test[\"Sex\"] == \"female\", \"Sex\"] = 1\n\ntitanic_test.Embarked = titanic_test.Embarked.fillna('S')\ntitanic_test.loc[titanic_test.Embarked == 'S', 'Embarked'] = 0\ntitanic_test.loc[titanic_test.Embarked == 'C', 'Embarked'] = 1\ntitanic_test.loc[titanic_test.Embarked == 'Q', 'Embarked'] = 2\n\ntitanic_test.Fare = titanic_test.Fare.fillna(titanic.Fare.median())\n\n# Make predictions using the test set.\npredictions = alg.predict(titanic_test[predictors])\n\n# Create a new dataframe with only the columns Kaggle wants from the dataset.\nsubmission = pd.DataFrame({\n        \"PassengerId\": titanic_test[\"PassengerId\"],\n        \"Survived\": predictions\n    })\n\n\n\n\u5099\u5fd8\u9332\u5909\u308f\u308a\u306b\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\n\n# Kaggle \u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u767b\u9332\n[Kaggle](https://www.kaggle.com/) \u306e\u30b5\u30a4\u30c8\u304b\u3089\u3001\u30a2\u30ab\u30a6\u30f3\u30c8\u767b\u9332\u3002\nFacebook \u3084 Google \u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u3067\u3082\u826f\u3044\u3057\u3001\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u304b\u3089\u767b\u9332\u3057\u3066\u3082\u826f\u3044\u3002\n\n# \u53c2\u52a0\u3059\u308b\u30b3\u30f3\u30da\u306e\u9078\u629e\n[Competition](https://www.kaggle.com/competitions) \u304b\u3089\u9078\u3076\u3002\n![image](https://qiita-image-store.s3.amazonaws.com/0/119826/42a10fc4-2510-e99e-8990-098c436f0d80.png)\n\n\u4eca\u56de\u306f\u521d\u3081\u3066\u306a\u306e\u3067\u3001Tutorial \u306e [Titanic](https://www.kaggle.com/c/titanic) \u306b\u3057\u305f\u3002\n\u4e57\u8239\u8005\u306e\u30c7\u30fc\u30bf\u304b\u3089\u3001\u4e57\u8239\u8005\u304c\u6551\u52a9\u3055\u308c\u305f\u304b\u3069\u3046\u304b\u3092\u4e88\u6e2c\u3059\u308b\u554f\u984c\u3002\n\n\n# \u30c7\u30fc\u30bf\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n\u5fc5\u8981\u306a\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3002\nKaggle \u30c0\u30c3\u30b7\u30e5\u30dc\u30fc\u30c9\u753b\u9762\u5de6\u306b\u3042\u308b [Data](https://www.kaggle.com/c/titanic/data)  \u304b\u3089\u3002\n![image](https://qiita-image-store.s3.amazonaws.com/0/119826/3c0a4a0f-396a-525a-d5dc-3118f4bf5df5.png)\n\n\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u308b\u3002\u4eca\u56de\u4f7f\u3046\u306e\u306ftrain.csv\u3068test.csv\u306e\uff12\u3064\u3002\n![image](https://qiita-image-store.s3.amazonaws.com/0/119826/e64d61a3-864b-1236-7730-a9763c5c1adf.png)\n\n\n# \u5206\u6790 \uff5e Submit \u307e\u3067\u306e\u6d41\u308c\n[Titanic](https://www.kaggle.com/c/titanic) \u306e\u30da\u30fc\u30b8\u672b\u5c3e\u306e Interactive Tutorials \u306b\u3057\u305f\u304c\u3063\u3066\u3001[DataQuest](https://www.dataquest.io/) \u306b\u5023\u3063\u305f\u3002\nDataQuest \u3067\u306f\u3001Titanic \u3092\u4f8b\u984c\u306b\u53d6\u308a\u4e0a\u3052\u3001\u30d6\u30e9\u30a6\u30b6\u4e0a\u3067 Python \u306e\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u30af\u30a4\u30ba\u306b\u7b54\u3048\u306a\u304c\u3089\u3001\u5206\u6790\u306e\u9032\u3081\u65b9\u304b\u3089 Submission \u7528\u306e\u30c7\u30fc\u30bf\u306e\u4f5c\u308a\u65b9\u306a\u3069\u3092\u77e5\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u3001\u4e88\u6e2c\u7d50\u679c\u304c\u5f97\u3089\u308c\u305f\u3089\u3001submit \u3059\u308b\u3002\nKaggle \u30c0\u30c3\u30b7\u30e5\u30dc\u30fc\u30c9\u753b\u9762\u5de6\u306b\u3042\u308b [Make a submission](https://www.kaggle.com/c/titanic/submissions/attach)  \u304b\u3089\u3002\n\u7d50\u679c\u3092\u51fa\u529b\u3057\u305f csv \u30d5\u30a1\u30a4\u30eb\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u3066\u304a\u3057\u307e\u3044\u3002\n\n# DataQuest\u3067\u4f5c\u6210\u3057\u305f\u30b3\u30fc\u30c9\n\u7dda\u5f62\u56de\u5e30\u3068\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306e\uff12\u3064\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3002\n\n```titanic.py\n# -*- coding: utf-8 -*-\nimport os\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.cross_validation import KFold\n\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\ntitanic = pd.read_csv(u'path/to/train.csv')\n\n### \u30c7\u30fc\u30bf\u51e6\u7406 ###\n# replace na with median value in age\ntitanic.Age = titanic.Age.fillna(titanic.Age.median())\n\n# replace letters to numerics in Embarked Column\ntitanic.loc[titanic[\"Sex\"] == \"male\", \"Sex\"] = 0\ntitanic.loc[titanic[\"Sex\"] == \"female\", \"Sex\"] = 1\n\n# replace letters to numeric in Embarked Column\ntitanic.Embarked = titanic.Embarked.fillna('S')\ntitanic.loc[titanic.Embarked == 'S', 'Embarked'] = 0\ntitanic.loc[titanic.Embarked == 'C', 'Embarked'] = 1\ntitanic.loc[titanic.Embarked == 'Q', 'Embarked'] = 2\n\n# The columns we'll use to predict the target\npredictors = [\"Pclass\", \"Sex\", \"Age\", \"SibSp\", \"Parch\", \"Fare\", \"Embarked\"]\n\n# Initialize our algorithm class\nalg = LinearRegression()\n# Generate cross validation folds for the titanic dataset.  It return the row indices corresponding to train and test.\n# We set random_state to ensure we get the same splits every time we run this.\nkf = KFold(titanic.shape[0], n_folds=3, random_state=1)\n\npredictions = []\nfor train, test in kf:\n    # The predictors we're using the train the algorithm.  Note how we only take the rows in the train folds.\n    train_predictors = (titanic[predictors].iloc[train,:])\n    # The target we're using to train the algorithm.\n    train_target = titanic[\"Survived\"].iloc[train]\n    # Training the algorithm using the predictors and target.\n    alg.fit(train_predictors, train_target)\n    # We can now make predictions on the test fold\n    test_predictions = alg.predict(titanic[predictors].iloc[test,:])\n    predictions.append(test_predictions)\n\n# The predictions are in three separate numpy arrays.  Concatenate them into one.  \n# We concatenate them on axis 0, as they only have one axis.\npredictions = np.concatenate(predictions, axis=0)\n\n# Map predictions to outcomes (only possible outcomes are 1 and 0)\npredictions[predictions > .5] = 1\npredictions[predictions <=.5] = 0\n\n# Calculate accuracy\npositive = np.sum(np.equal(np.array(titanic.Survived), predictions))\naccuracy = positive/float(len(titanic.Survived))\nprint(accuracy)\n\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u3068\u524d\u51e6\u7406\ntitanic_test = pandas.read_csv(\"path/to/test.csv\")\n\ntitanic_test.Age = titanic_test.Age.fillna(titanic.Age.median())\ntitanic_test.loc[titanic_test[\"Sex\"] == \"male\", \"Sex\"] = 0\ntitanic_test.loc[titanic_test[\"Sex\"] == \"female\", \"Sex\"] = 1\n\ntitanic_test.Embarked = titanic_test.Embarked.fillna('S')\ntitanic_test.loc[titanic_test.Embarked == 'S', 'Embarked'] = 0\ntitanic_test.loc[titanic_test.Embarked == 'C', 'Embarked'] = 1\ntitanic_test.loc[titanic_test.Embarked == 'Q', 'Embarked'] = 2\n\ntitanic_test.Fare = titanic_test.Fare.fillna(titanic.Fare.median())\n\n# Make predictions using the test set.\npredictions = alg.predict(titanic_test[predictors])\n\n# Create a new dataframe with only the columns Kaggle wants from the dataset.\nsubmission = pd.DataFrame({\n        \"PassengerId\": titanic_test[\"PassengerId\"],\n        \"Survived\": predictions\n    })\n\n```\n", "tags": ["\u6a5f\u68b0\u5b66\u7fd2", "Kaggle", "\u30c7\u30fc\u30bf\u5206\u6790"]}