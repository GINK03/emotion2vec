{"context": " More than 1 year has passed since last update.\u4e0b\u8a18\u30da\u30fc\u30b8\u53c2\u7167\n\u3000http://melan260.net/?p=530\n\u4e0b\u8a18URL\u306b\u89e3\u6c7a\u7b56\n\u3000http://forum.unity3d.com/threads/cant-use-gzipstream-from-c-behaviours.33973/\n\u3000ICSharpCode.SharpZipLib.dll\u304c\u5fc5\u8981\nusing System;\nusing System.IO;\nusing System.Text;\nusing ICSharpCode.SharpZipLib.BZip2;\n\n[System.Serializable]\npublic struct Zipper\n{\n    public static string ZipString(string sBuffer)\n    {\n        MemoryStream m_msBZip2 = null;\n        BZip2OutputStream m_osBZip2 = null;\n        string result;\n        try\n        {\n            m_msBZip2 = new MemoryStream();\n            Int32 size = sBuffer.Length;\n            // Prepend the compressed data with the length of the uncompressed data (firs 4 bytes)\n            //\n            using (BinaryWriter writer = new BinaryWriter(m_msBZip2, System.Text.Encoding.ASCII))\n            {\n                writer.Write( size );\n\n                m_osBZip2 = new BZip2OutputStream(m_msBZip2);\n                m_osBZip2.Write(Encoding.ASCII.GetBytes(sBuffer), 0, sBuffer.Length);\n\n                m_osBZip2.Close();\n                result = Convert.ToBase64String(m_msBZip2.ToArray());\n                m_msBZip2.Close();\n\n                writer.Close();\n            }\n        }\n        finally\n        {\n            if (m_osBZip2 != null)\n            {\n                m_osBZip2.Dispose();\n            }\n            if (m_msBZip2 != null)\n            {\n                m_msBZip2.Dispose();\n            }\n        }\n        return result;\n    }\n\n    public static string UnzipString(string compbytes)\n    {\n        string result;\n        MemoryStream m_msBZip2 = null;\n        BZip2InputStream m_isBZip2 = null;\n        try\n        {\n            m_msBZip2 = new MemoryStream(Convert.FromBase64String(compbytes));\n            // read final uncompressed string size stored in first 4 bytes\n            //\n            using (BinaryReader reader = new BinaryReader(m_msBZip2, System.Text.Encoding.ASCII))\n            {\n                Int32 size = reader.ReadInt32();\n\n                m_isBZip2 = new BZip2InputStream(m_msBZip2);\n                byte[] bytesUncompressed = new byte[size];\n                m_isBZip2.Read(bytesUncompressed, 0, bytesUncompressed.Length);\n                m_isBZip2.Close();\n                m_msBZip2.Close();\n\n                result = Encoding.ASCII.GetString(bytesUncompressed);\n\n                reader.Close();\n            }\n        }\n        finally\n        {\n            if (m_isBZip2 != null)\n            {\n                m_isBZip2.Dispose();\n            }\n            if (m_msBZip2 != null)\n            {\n                m_msBZip2.Dispose();\n            }\n        }\n        return result;\n    }\n}\n\n\u4e0b\u8a18\u30da\u30fc\u30b8\u53c2\u7167\n\u3000http://melan260.net/?p=530\n\n\n\u4e0b\u8a18URL\u306b\u89e3\u6c7a\u7b56\n\n\u3000http://forum.unity3d.com/threads/cant-use-gzipstream-from-c-behaviours.33973/\n\n\n\n\u3000ICSharpCode.SharpZipLib.dll\u304c\u5fc5\u8981\n\n```\nusing System;\nusing System.IO;\nusing System.Text;\nusing ICSharpCode.SharpZipLib.BZip2;\n \n[System.Serializable]\npublic struct Zipper\n{\n    public static string ZipString(string sBuffer)\n    {\n        MemoryStream m_msBZip2 = null;\n        BZip2OutputStream m_osBZip2 = null;\n        string result;\n        try\n        {\n            m_msBZip2 = new MemoryStream();\n            Int32 size = sBuffer.Length;\n            // Prepend the compressed data with the length of the uncompressed data (firs 4 bytes)\n            //\n            using (BinaryWriter writer = new BinaryWriter(m_msBZip2, System.Text.Encoding.ASCII))\n            {\n                writer.Write( size );\n               \n                m_osBZip2 = new BZip2OutputStream(m_msBZip2);\n                m_osBZip2.Write(Encoding.ASCII.GetBytes(sBuffer), 0, sBuffer.Length);\n               \n                m_osBZip2.Close();\n                result = Convert.ToBase64String(m_msBZip2.ToArray());\n                m_msBZip2.Close();\n               \n                writer.Close();\n            }\n        }\n        finally\n        {\n            if (m_osBZip2 != null)\n            {\n                m_osBZip2.Dispose();\n            }\n            if (m_msBZip2 != null)\n            {\n                m_msBZip2.Dispose();\n            }\n        }\n        return result;\n    }\n \n    public static string UnzipString(string compbytes)\n    {\n        string result;\n        MemoryStream m_msBZip2 = null;\n        BZip2InputStream m_isBZip2 = null;\n        try\n        {\n            m_msBZip2 = new MemoryStream(Convert.FromBase64String(compbytes));\n            // read final uncompressed string size stored in first 4 bytes\n            //\n            using (BinaryReader reader = new BinaryReader(m_msBZip2, System.Text.Encoding.ASCII))\n            {\n                Int32 size = reader.ReadInt32();\n               \n                m_isBZip2 = new BZip2InputStream(m_msBZip2);\n                byte[] bytesUncompressed = new byte[size];\n                m_isBZip2.Read(bytesUncompressed, 0, bytesUncompressed.Length);\n                m_isBZip2.Close();\n                m_msBZip2.Close();\n               \n                result = Encoding.ASCII.GetString(bytesUncompressed);\n               \n                reader.Close();\n            }\n        }\n        finally\n        {\n            if (m_isBZip2 != null)\n            {\n                m_isBZip2.Dispose();\n            }\n            if (m_msBZip2 != null)\n            {\n                m_msBZip2.Dispose();\n            }\n        }\n        return result;\n    }\n}\n```\n", "tags": ["Unity", "mono"]}