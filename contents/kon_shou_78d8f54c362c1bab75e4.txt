{"context": "\n\n\u6982\u8981\n\u4e8b\u524d\u306b\u8a2d\u5b9a\u3057\u305f\u30bf\u30a4\u30c8\u30eb/\u4f5c\u8005\u306e\u6f2b\u753b\u306e\u767a\u58f2\u65e5\u306b\u306a\u3063\u305f\u3089\u3001\u81ea\u52d5\u7684\u306bSlack\u306b\u901a\u77e5\u304c\u6765\u308b\n\n\u30c7\u30fc\u30bf\u7d4c\u8def\nRSS(\u65b0\u520a\u30cd\u30c3\u30c8)=>AWS Lambda=>Slack\n\n\u4f5c\u696d\u624b\u9806\n1.Lambda\u7528Role\u3092IAM\u3067\u4f5c\u6210\n2.AWS Lamda\u306b\u3066Function\u767b\u9332\n3.\u65b0\u520a\u30cd\u30c3\u30c8\u306b\u3066RSS\u751f\u6210\n4.\u30b3\u30fc\u30c9\u5b9f\u88c5\n\n1.Lambda\u7528Role\u3092IAM\u3092\u4f5c\u6210\nIAM\u3088\u308aLambda\u3067\u4f7f\u7528\u3059\u308b\u30ed\u30fc\u30eb\u3092\u4f5c\u6210\n\uff08\"Lambda\"\u3068\u3044\u3046\u6587\u5b57\u3092\u8fbf\u3063\u3066\u30dd\u30c1\u30dd\u30c1\u3057\u3066\u5b8c\u4e86\uff09\n\n\n2.AWS Lamda\u306b\u3066Function\u767b\u9332\n\u2460AWS Lambda\u3088\u308aFunction(node.js)\u4f5c\u6210\n\n\u2461blueprint\u306f[Blank Function]\u3092\u9078\u629e\n\u2462\u30c8\u30ea\u30ac\u30fc\u306bCron\u3092\u9078\u629e\uff08\u30ad\u30e3\u30d7\u30c1\u30e3\u3067\u306f\u6bce\u65e59:00\u306b\u8a2d\u5b9a\uff09\n\u3000\u203b[Enable trigger]\u306f\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044\uff01\n\n\u2463\u74b0\u5883\u5909\u6570\u306bSlck\u306eHookUrl/Channel\u3092\u6307\u5b9a\n  \u203b[Encryption key]\u306f\u3000IAM > \u6697\u53f7\u5316\u30ad\u30fc\u3088\u308a\u4f5c\u6210 \n\n\u2464\u3068\u308a\u3042\u3048\u305a\u4fdd\u5b58\n\n3.\u65b0\u520a\u30cd\u30c3\u30c8\u306b\u3066RSS\u751f\u6210\n\u2460\u65b0\u520a\u30cd\u30c3\u30c8\uff08 http://sinkan.net \uff09\u306b\u3066\u30a2\u30ab\u30a6\u30f3\u30c8\u4f5c\u6210\n\u2461\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u8a2d\u5b9a\u3057\u3001\u81ea\u5206\u7528\u306eRSS\u3092\u751f\u6210\n\n\u2462\u8a2d\u5b9a\u306e\u300c\u307e\u3082\u306a\u304f\u767a\u58f2\u306e\u8868\u793a\u7bc4\u56f2\u300d\u3092\u3000\u300c0\u65e5\u524d\u304b\u3089\u3001\uff11\u65e5\u5f8c\u307e\u3067\u300d\u306b\u8a2d\u5b9a\n\u21db\u300c\u672c\u65e5\u304c\u767a\u58f2\u65e5\u300d\u3067\u3042\u308b\u6f2b\u753b\u3092RSS\u306b\u8f09\u305b\u308b\u305f\u3081\n\n\n4.\u30b3\u30fc\u30c9\u5b9f\u88c5\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\uff1ahttps://github.com/kon-shou/lambda_manga\n\u2460RSS\u53d6\u5f97\u3092\u8a2d\u5b9a\npubTitleArr[]\u306b\u30bf\u30a4\u30c8\u30eb\u3092\u683c\u7d0d\u3001pubLinkArr[]\u306b\u5546\u54c1\u30ea\u30f3\u30af\u3092\u683c\u7d0d\n\nindex.js\nconst fetchOptions = {\n    uri: '\u65b0\u520a\u30cd\u30c3\u30c8\u306eRSS\u306eURL',\n    transform: function (body) {\n        let $ = cheerio.load(body ,{xmlMode : true});\n        $(\"channel > item\").each(function(i) {\n          pubTitleArr[i] = $(this).find(\"title\").text();\n          pubLinkArr[i] = $(this).find(\"link\").text();\n          console.log(pubTitleArr);\n          console.log(pubLinkArr);\n        });\n    }\n};\n\n\n\u2461AWS\u3088\u308aRSS\u53d6\u5f97\u3092\u5b9f\u884c\n  nodejs\u306f\u975e\u540c\u671f\u51e6\u7406\u306a\u306e\u3067\u3001request-promise\u306b\u3088\u3063\u3066\u540c\u671f\u51e6\u7406\u3092\u5b9f\u884c\n\nindex.js\nexports.handler = (event, context, callback) => {\n    rp(fetchOptions)\n    .then(function ($) {\n        processEventWithHookUrl (event, callback);\n    })\n    .catch(function (err) {\n        console.log(\"Error Fetch API\");\n    });\n};\n\n\n\u2462HookUrl/Channel\u3092AWS kms\u3088\u308a\u53d6\u5f97\n\nindex.js\nfunction processEventWithHookUrl (event, callback) {\n    if (hookUrl) {\n        // Container reuse, simply process the event with the key in memory\n        processEvent(event, callback);\n    } else if (kmsEncryptedHookUrl && kmsEncryptedHookUrl !== '<kmsEncryptedHookUrl>') {\n        const encryptedBuf = new Buffer(kmsEncryptedHookUrl, 'base64');\n        const cipherText = { CiphertextBlob: encryptedBuf };\n\n        const kms = new AWS.KMS();\n        kms.decrypt(cipherText, (err, data) => {\n            if (err) {\n                console.log('Decrypt error:', err);\n                return callback(err);\n            }\n            hookUrl = data.Plaintext.toString('ascii');\n            processEvent(event, callback);\n        });\n    } else {\n        callback('Hook URL has not been set.');\n    }\n}\n\n\n\u2463\u901a\u77e5(1)\npubTitleArr\u306e\u9577\u3055\u3067\u300c\u767a\u58f2\u30bf\u30a4\u30c8\u30eb\u306e\u6709\u7121\u300d\u3092\u5224\u5b9a\n\u8907\u6570\u30bf\u30a4\u30c8\u30eb\u306e\u5834\u5408\u306fpostMessage\u3092\u7e70\u308a\u8fd4\u3059\n\nindex.js\nfunction processEvent(event, callback) {\n  if (pubTitleArr.length > 0) {\n    for (let i = 0; i < pubTitleArr.length; i++) {\n      slackMessage = {\n        text: `${pubTitleArr[i]}\\n${pubLinkArr[i]}`,\n      };\n      console.log(slackMessage);\n\n      postMessage(slackMessage, (response) => {\n        if (response.statusCode < 400) {\n            console.info('Message posted successfully');\n            callback(null);\n        } else if (response.statusCode < 500) {\n            console.error(`Error posting message to Slack API: ${response.statusCode} - ${response.statusMessage}`);\n            callback(null);  // Don't retry because the error is due to a problem with the request\n        } else {\n            // Let Lambda retry\n            callback(`Server error when processing message: ${response.statusCode} - ${response.statusMessage}`);\n        }\n      });\n    }\n  } else {\n    callback(`\u672c\u65e5\u767a\u58f2\u306e\u6f2b\u753b\u306f\u3042\u308a\u307e\u305b\u3093`);\n  }\n}\n\n\n\u2464\u901a\u77e5(2)\nmessage\u3092json\u306b\u3057\u3066HTTP\u30e1\u30bd\u30c3\u30c9\u3067POST\u3059\u308b\n\nindex.js\nfunction postMessage(message, callback) {\n    const body = JSON.stringify(message);\n    const Sendoptions = url.parse(hookUrl);\n    Sendoptions.method = 'POST';\n    Sendoptions.headers = {\n        'Content-Type': 'application/json',\n        'Content-Length': Buffer.byteLength(body),\n    };\n\n    const postReq = https.request(Sendoptions, (res) => {\n        const chunks = [];\n        res.setEncoding('utf8');\n        res.on('data', (chunk) => chunks.push(chunk));\n        res.on('end', () => {\n            if (callback) {\n                callback({\n                    body: chunks.join(''),\n                    statusCode: res.statusCode,\n                    statusMessage: res.statusMessage,\n                });\n            }\n        });\n        return res;\n    });\n\n    postReq.write(body);\n    postReq.end();\n}\n\n\n\n\u901a\u77e5\u5b8c\u4e86\n\n\ntips\ntest\u30b3\u30fc\u30c9(\u4e0a\u8a18\u30ec\u30dd\u30b8\u30c8\u30ea\u306etest.js)\u3092\u4f5c\u3063\u3066\u304a\u304f\u3068\u3001\nnode test.js\n\u3067\u30b9\u30af\u30ea\u30d7\u30c8\u8d77\u52d5\u3067\u304d\u308b\u306e\u3067\u697d\n\n\u6700\u5f8c\u306b\nJavascript/Lambda\u521d\u5fc3\u8005\u304c\u4f5c\u3063\u305f\u306e\u3067\u9593\u9055\u3044\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u305d\u306e\u6642\u306f\u3054\u6307\u6458\u3092\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\n\u53c2\u8003\nhttp://www.bokukoko.info/entry/exec_aws_lambda_in_local\n#\u6982\u8981\n\u4e8b\u524d\u306b\u8a2d\u5b9a\u3057\u305f\u30bf\u30a4\u30c8\u30eb/\u4f5c\u8005\u306e\u6f2b\u753b\u306e\u767a\u58f2\u65e5\u306b\u306a\u3063\u305f\u3089\u3001\u81ea\u52d5\u7684\u306bSlack\u306b\u901a\u77e5\u304c\u6765\u308b\n\n#\u30c7\u30fc\u30bf\u7d4c\u8def\nRSS(\u65b0\u520a\u30cd\u30c3\u30c8)=>AWS Lambda=>Slack\n\n#\u4f5c\u696d\u624b\u9806\n1.Lambda\u7528Role\u3092IAM\u3067\u4f5c\u6210\n2.AWS Lamda\u306b\u3066Function\u767b\u9332\n3.\u65b0\u520a\u30cd\u30c3\u30c8\u306b\u3066RSS\u751f\u6210\n4.\u30b3\u30fc\u30c9\u5b9f\u88c5\n\n#1.Lambda\u7528Role\u3092IAM\u3092\u4f5c\u6210\n\nIAM\u3088\u308aLambda\u3067\u4f7f\u7528\u3059\u308b\u30ed\u30fc\u30eb\u3092\u4f5c\u6210\n\uff08\"Lambda\"\u3068\u3044\u3046\u6587\u5b57\u3092\u8fbf\u3063\u3066\u30dd\u30c1\u30dd\u30c1\u3057\u3066\u5b8c\u4e86\uff09\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-01-25 23.36.28.png](https://qiita-image-store.s3.amazonaws.com/0/158622/774ac6f9-3cfb-16b4-2ec2-e17b61f577ea.png)\n\n#2.AWS Lamda\u306b\u3066Function\u767b\u9332\n\u2460AWS Lambda\u3088\u308aFunction(node.js)\u4f5c\u6210\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-01-25 23.42.18.png](https://qiita-image-store.s3.amazonaws.com/0/158622/a6eb3fad-9b20-050a-571e-87b4b702edd3.png)\n\n\u2461blueprint\u306f[Blank Function]\u3092\u9078\u629e\n\n\u2462\u30c8\u30ea\u30ac\u30fc\u306bCron\u3092\u9078\u629e\uff08\u30ad\u30e3\u30d7\u30c1\u30e3\u3067\u306f\u6bce\u65e59:00\u306b\u8a2d\u5b9a\uff09\n\u3000\u203b[Enable trigger]\u306f\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044\uff01\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-01-25 18.27.34.png](https://qiita-image-store.s3.amazonaws.com/0/158622/acefe2e0-aeb8-33aa-2954-47ca61d84741.png)\n\n\u2463\u74b0\u5883\u5909\u6570\u306bSlck\u306eHookUrl/Channel\u3092\u6307\u5b9a\n  \u203b[Encryption key]\u306f\u3000IAM > \u6697\u53f7\u5316\u30ad\u30fc\u3088\u308a\u4f5c\u6210 \n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-01-25 18.49.52.png](https://qiita-image-store.s3.amazonaws.com/0/158622/4b96dadb-74a6-861d-9e5b-fcd3f6c2c8c4.png)\n\n\u2464\u3068\u308a\u3042\u3048\u305a\u4fdd\u5b58\n\n#3.\u65b0\u520a\u30cd\u30c3\u30c8\u306b\u3066RSS\u751f\u6210\n\u2460\u65b0\u520a\u30cd\u30c3\u30c8\uff08 http://sinkan.net \uff09\u306b\u3066\u30a2\u30ab\u30a6\u30f3\u30c8\u4f5c\u6210\n\n\u2461\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u8a2d\u5b9a\u3057\u3001\u81ea\u5206\u7528\u306eRSS\u3092\u751f\u6210\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-01-25 18.54.46.png](https://qiita-image-store.s3.amazonaws.com/0/158622/8ccbaad3-c2ce-fc4e-7aeb-3f65eccd6b6a.png)\n\n\u2462\u8a2d\u5b9a\u306e\u300c\u307e\u3082\u306a\u304f\u767a\u58f2\u306e\u8868\u793a\u7bc4\u56f2\u300d\u3092\u3000\u300c0\u65e5\u524d\u304b\u3089\u3001\uff11\u65e5\u5f8c\u307e\u3067\u300d\u306b\u8a2d\u5b9a\n\u21db\u300c\u672c\u65e5\u304c\u767a\u58f2\u65e5\u300d\u3067\u3042\u308b\u6f2b\u753b\u3092RSS\u306b\u8f09\u305b\u308b\u305f\u3081\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-01-25 23.43.44.png](https://qiita-image-store.s3.amazonaws.com/0/158622/f52f3c57-233b-b4fc-8804-3f6a3333f504.png)\n\n#4.\u30b3\u30fc\u30c9\u5b9f\u88c5\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\uff1ahttps://github.com/kon-shou/lambda_manga\n\n\u2460RSS\u53d6\u5f97\u3092\u8a2d\u5b9a\npubTitleArr[]\u306b\u30bf\u30a4\u30c8\u30eb\u3092\u683c\u7d0d\u3001pubLinkArr[]\u306b\u5546\u54c1\u30ea\u30f3\u30af\u3092\u683c\u7d0d\n\n```Javascript:index.js\nconst fetchOptions = {\n    uri: '\u65b0\u520a\u30cd\u30c3\u30c8\u306eRSS\u306eURL',\n    transform: function (body) {\n        let $ = cheerio.load(body ,{xmlMode : true});\n        $(\"channel > item\").each(function(i) {\n          pubTitleArr[i] = $(this).find(\"title\").text();\n          pubLinkArr[i] = $(this).find(\"link\").text();\n          console.log(pubTitleArr);\n          console.log(pubLinkArr);\n        });\n    }\n};\n```\n\n\u2461AWS\u3088\u308aRSS\u53d6\u5f97\u3092\u5b9f\u884c\n  nodejs\u306f\u975e\u540c\u671f\u51e6\u7406\u306a\u306e\u3067\u3001request-promise\u306b\u3088\u3063\u3066\u540c\u671f\u51e6\u7406\u3092\u5b9f\u884c\n\n```Javascript:index.js\nexports.handler = (event, context, callback) => {\n    rp(fetchOptions)\n    .then(function ($) {\n        processEventWithHookUrl (event, callback);\n    })\n    .catch(function (err) {\n        console.log(\"Error Fetch API\");\n    });\n};\n```\n\n\u2462HookUrl/Channel\u3092AWS kms\u3088\u308a\u53d6\u5f97\n\n```Javascript:index.js\nfunction processEventWithHookUrl (event, callback) {\n    if (hookUrl) {\n        // Container reuse, simply process the event with the key in memory\n        processEvent(event, callback);\n    } else if (kmsEncryptedHookUrl && kmsEncryptedHookUrl !== '<kmsEncryptedHookUrl>') {\n        const encryptedBuf = new Buffer(kmsEncryptedHookUrl, 'base64');\n        const cipherText = { CiphertextBlob: encryptedBuf };\n\n        const kms = new AWS.KMS();\n        kms.decrypt(cipherText, (err, data) => {\n            if (err) {\n                console.log('Decrypt error:', err);\n                return callback(err);\n            }\n            hookUrl = data.Plaintext.toString('ascii');\n            processEvent(event, callback);\n        });\n    } else {\n        callback('Hook URL has not been set.');\n    }\n}\n```\n\n\u2463\u901a\u77e5(1)\npubTitleArr\u306e\u9577\u3055\u3067\u300c\u767a\u58f2\u30bf\u30a4\u30c8\u30eb\u306e\u6709\u7121\u300d\u3092\u5224\u5b9a\n\u8907\u6570\u30bf\u30a4\u30c8\u30eb\u306e\u5834\u5408\u306fpostMessage\u3092\u7e70\u308a\u8fd4\u3059\n\n```Javascript:index.js\nfunction processEvent(event, callback) {\n  if (pubTitleArr.length > 0) {\n    for (let i = 0; i < pubTitleArr.length; i++) {\n      slackMessage = {\n        text: `${pubTitleArr[i]}\\n${pubLinkArr[i]}`,\n      };\n      console.log(slackMessage);\n\n      postMessage(slackMessage, (response) => {\n        if (response.statusCode < 400) {\n            console.info('Message posted successfully');\n            callback(null);\n        } else if (response.statusCode < 500) {\n            console.error(`Error posting message to Slack API: ${response.statusCode} - ${response.statusMessage}`);\n            callback(null);  // Don't retry because the error is due to a problem with the request\n        } else {\n            // Let Lambda retry\n            callback(`Server error when processing message: ${response.statusCode} - ${response.statusMessage}`);\n        }\n      });\n    }\n  } else {\n    callback(`\u672c\u65e5\u767a\u58f2\u306e\u6f2b\u753b\u306f\u3042\u308a\u307e\u305b\u3093`);\n  }\n}\n```\n\n\u2464\u901a\u77e5(2)\nmessage\u3092json\u306b\u3057\u3066HTTP\u30e1\u30bd\u30c3\u30c9\u3067POST\u3059\u308b\n\n```Javascript:index.js\nfunction postMessage(message, callback) {\n    const body = JSON.stringify(message);\n    const Sendoptions = url.parse(hookUrl);\n    Sendoptions.method = 'POST';\n    Sendoptions.headers = {\n        'Content-Type': 'application/json',\n        'Content-Length': Buffer.byteLength(body),\n    };\n\n    const postReq = https.request(Sendoptions, (res) => {\n        const chunks = [];\n        res.setEncoding('utf8');\n        res.on('data', (chunk) => chunks.push(chunk));\n        res.on('end', () => {\n            if (callback) {\n                callback({\n                    body: chunks.join(''),\n                    statusCode: res.statusCode,\n                    statusMessage: res.statusMessage,\n                });\n            }\n        });\n        return res;\n    });\n\n    postReq.write(body);\n    postReq.end();\n}\n```\n\n#\u901a\u77e5\u5b8c\u4e86\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-01-26 0.42.44.png](https://qiita-image-store.s3.amazonaws.com/0/158622/07c9b331-86c1-e20e-c884-8150463ec7a8.png)\n\n#tips\ntest\u30b3\u30fc\u30c9(\u4e0a\u8a18\u30ec\u30dd\u30b8\u30c8\u30ea\u306etest.js)\u3092\u4f5c\u3063\u3066\u304a\u304f\u3068\u3001\nnode test.js\n\u3067\u30b9\u30af\u30ea\u30d7\u30c8\u8d77\u52d5\u3067\u304d\u308b\u306e\u3067\u697d\n\n#\u6700\u5f8c\u306b\nJavascript/Lambda\u521d\u5fc3\u8005\u304c\u4f5c\u3063\u305f\u306e\u3067\u9593\u9055\u3044\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u305d\u306e\u6642\u306f\u3054\u6307\u6458\u3092\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\n#\u53c2\u8003\nhttp://www.bokukoko.info/entry/exec_aws_lambda_in_local\n", "tags": ["AWS", "lambda", "JavaScript", "RSS"]}