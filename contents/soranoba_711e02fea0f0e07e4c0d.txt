{"context": " More than 1 year has passed since last update.\n\ngproc (Erlang register\u62e1\u5f35\u30e9\u30a4\u30d6\u30e9\u30ea) \u306e\u4f7f\u3044\u65b9\nmururu\u3055\u3093\u304c\u6700\u8fd1\u7c21\u5358\u306a\u4f7f\u3044\u65b9\u3092\u6295\u7a3f\u3057\u3066\u304f\u3060\u3055\u3063\u305f\u5f71\u97ff\u304b\u306f\u5206\u304b\u3089\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u5468\u308a\u3067gproc\u3092\u4f7f\u3046\u4eba\u304c\u51fa\u3066\u304d\u305f\u306e\u3067\u3061\u3087\u3063\u3068\u89e6\u3063\u3066\u307f\u3088\u3046\u3068\u601d\u3063\u305f\u3089\u610f\u5916\u3068\u8a70\u307e\u3063\u305f\u306e\u3067, select\u7cfb\u4ee5\u5916\u3092\u3056\u3063\u3068\u8abf\u3079\u3066\u307f\u305f.\n\u4e00\u5fdc\u5b9f\u969b\u306b\u691c\u8a3c\u3057\u306a\u304c\u3089\u66f8\u3044\u3066\u3044\u308b\u304c, \u9593\u9055\u3044\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067, \u305d\u306e\u969b\u306f\u516c\u5f0f\u3092\u53c2\u7167\u3057\u3066\u6b32\u3057\u3044.\nsyntax_suger\uff1f\u7684\u306a\u95a2\u6570\u306f\u7701\u7565\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u60aa\u3057\u304b\u3089\u305a.\n\n\n\n\u30ec\u30dd\u30b8\u30c8\u30ea\nuwiger/gproc\n\n\n\n\n\u30d0\u30fc\u30b8\u30e7\u30f3\n0.3.1\n\n\n\u30e9\u30a4\u30bb\u30f3\u30b9\nErlang Public License\n\n\n\n\n\u57fa\u672c\u95a2\u6570\n\nreg/1, reg/2 \n\nreg(Key :: key()) -> true.\nreg(Key :: key(), Value :: term()) -> true.\n\n\u30d7\u30ed\u30bb\u30b9\u3092\u767b\u9332\u3059\u308b.\ntype()  :: n | p | c | a. %% n: name, p: property, c: counter, a: aggregate_counter\nscope() :: l, g.          %% l: local, g: global\nkey()   :: {type(), scope(), any()}\n\nn\u306f\u30e6\u30cb\u30fc\u30af\u306a\u540d\u524d. p\u306f\u8907\u6570\u306e\u30d7\u30ed\u30bb\u30b9\u306b\u5272\u308a\u5f53\u3066\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u30bf\u30b0.\nc\u306f\u30bf\u30b0 (p)\u3068\u540c\u69d8\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d, \u52a0\u3048\u3066Value\u3092integer()\u306e\u307f\u306b\u5236\u9650\u3059\u308b\u3053\u3068\u3067counter\u306e\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b.\na\u306fn\u3068\u540c\u69d8\u30e6\u30cb\u30fc\u30af\u3067\u3042\u308b\u304c, counter\u306e\u6a5f\u80fd\u306f\u4f7f\u3048\u306a\u3044\u70ba\u3000\u4f7f\u7528\u7528\u9014\u304c\u4e0d\u660e\u3060\u3063\u305f.\n\nunreg/1\nunreg(Key :: key()) -> true.\n\nkey/0\u3067reg/1 (reg/2)\u3057\u305f\u540d\u524d\u306e\u767b\u9332\u3092\u524a\u9664\u3059\u308b.\n\u547c\u3073\u51fa\u3057\u5143\u306e\u30d7\u30ed\u30bb\u30b9\u306e\u767b\u9332\u60c5\u5831\u306e\u307f\u524a\u9664\u53ef\u80fd.\n\ngoodbye/0\ngoodbye() -> ok.\n\n\u547c\u3073\u51fa\u3057\u5143\u306e\u30d7\u30ed\u30bb\u30b9\u306ereg\u60c5\u5831\u3092\u5168\u3066\u524a\u9664\u3059\u308b.\n\nwhere/1, lookup_pids/1, lookup_pid/1\nwhere(Key :: key())       -> pid() | undefiend.\nlookup_pid(Key :: key())  -> pid().\nlookup_pids(Key :: key()) -> [pid()].\n\nkey\u3067gproc:reg/1\u3055\u308c\u305fpid/0\u3092\u53d6\u5f97\u3059\u308b.\n{p | c, _, _}\u306e\u5834\u5408\u306flookup_pids/1\u3092\u3001\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f\u3069\u308c\u3067\u3082\u5229\u7528\u3067\u304d\u308b.\n\nreg/unreg\u62e1\u5f35\n\nmreg/3\nmreg(type(), scope(), [{Key :: any(), Value :: any()}]) -> true. \n\ntype() = n\u306e\u5834\u5408\u306f, 1\u3064\u3067\u306e\u767b\u9332\u3067\u304d\u306a\u3044\u3082\u306e\u304c\u3042\u308c\u3070\u5168\u3066\u767b\u9332\u3057\u306a\u3044.\nreg\u3092\u8907\u6570\u56de\u5b9f\u884c\u3059\u308b\u3088\u308a\u3082, gproc\u306egen_server\u3078\u306ecall\u304c1\u56de\u3057\u304b\u884c\u308f\u308c\u306a\u3044\u70ba, \u9ad8\u901f.\n\u5f15\u6570\u306b\u3064\u3044\u3066\u306freg\u3092\u53c2\u7167\n\nmunreg/3\nmunreg(type(), scope(), [Key :: any()]) -> true.\n\n\u540c\u6642\u306bunreg\u3059\u308b. \u6307\u5b9a\u3057\u305fkey\u3092\u5168\u3066unreg\u306e\u72b6\u614b\u306b\u3059\u308b. (\u4e00\u90e8\u304creg\u3055\u308c\u3066\u3044\u306a\u304f\u3066\u3082\u554f\u984c\u306a\u3044)\n\nreg_shared/1, reg_shared2 \n\nreg_shared(Key :: key())        -> true.\nreg_shared(Key :: key(), Value) -> true.\n\n\u7279\u5b9a\u306e\u30d7\u30ed\u30bb\u30b9\u306b\u7d10\u4ed8\u3051\u306a\u3044\u5171\u6709\u30e1\u30e2\u30ea\u306e\u3088\u3046\u306a\u4f7f\u7528\u304c\u3067\u304d\u308b.\u5909\u66f4\u3092\u3059\u308b\u306e\u306fgproc\u306e\u30d7\u30ed\u30bb\u30b9\u306e\u70ba, \u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u3067\u3042\u308b.\n\nreg_or_locate/1, reg_or_locate/2, reg_or_locate/3\nreg_or_locate(Key :: key())                               -> {pid(), Value}.\nreg_or_locate(Key :: key(), Value)                        -> {pid(), Value}.\nreg_or_locate(Key :: key(), Value, fun(() -> no_return()) -> {pid(), Value}.\n\nkey/0\u306b\u306f{n, _, _}\u306e\u307f\u5229\u7528\u3067\u304d\u308b.\n\u3082\u3057key/0\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u30d7\u30ed\u30bb\u30b9\u3092\u4f5c\u6210\u3059\u308b\u5834\u5408\u306b\u5229\u7528.\nreg_or_locate/3\u306f\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u5834\u5408, \u7b2c3\u5f15\u6570\u3092spawn\u3059\u308b.\n\u8fd4\u308a\u5024\u306f, \n\n\u5b58\u5728\u3057\u305f\u5834\u5408\u3000\uff1a\u767b\u9332\u3055\u308c\u3066\u3044\u308bpid/0, Value\u60c5\u5831\n\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\uff1a\u767b\u9332\u3057\u305fpid/0, Value\u60c5\u5831\n\n\ngive_away/2\ngive_away(From :: key(), To :: pid() | key()) -> undefined | pid().\n\n\u547c\u3073\u51fa\u3057\u5143\u30d7\u30ed\u30bb\u30b9\u306b\u3064\u3051\u3089\u308c\u305fkey\u3092\u59d4\u8b72\u3059\u308b.\nFrom = {_, l, _}\u306e\u5834\u5408\u306fTo = pid() | {n, l, _} (pid()\u306e\u5834\u5408\u306fnode(Pid) == node()) \u306e\u307f\u6307\u5b9a\u53ef\u80fd.\nFrom = {_, g, _}\u306e\u5834\u5408\u306fTo = pid() | {n | a, g, _}\u306e\u307f\u6307\u5b9a\u53ef\u80fd.\n\n\u30d7\u30ed\u30bb\u30b9\u76e3\u8996\u95a2\u6570\n\nmonitor/1, monitor/2\n%% monitor(Key)          @equiv monitor(Key, info)\nmonitor(Key :: key(), Type :: monitor_type()) -> reference().\n\nmonitor_type() = info | standby | follow.\n\nkey() = {n | a, _, _}\u306e\u307f\u6307\u5b9a\u53ef\u80fd.\n\u9001\u4fe1\u3055\u308c\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u306f4\u7a2e\u985e\n1. {gproc, unreg, Ref, Key}\n2. {gproc, {migrated, ToPid}, Ref, Key}\n3. {gproc, {failover, ToPid}, Ref, Key}\n4. {gproc, registered, Ref, Key}\nmonitor_type\u306b\u3088\u308b\u6319\u52d5\u306e\u9055\u3044\u306f\u4ee5\u4e0b\u306e\u901a\u308a\n\n\u5171\u901a\n\n\n\nmonitor\u3057\u305f\u969b\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f1\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5373\u5ea7\u306b\u9001\u51fa\u3055\u308c\u308b.\n\ngive_away/2\u304c\u884c\u308f\u308c\u305f\u5834\u5408, 2\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u9001\u51fa\u3055\u308c\u308b.\n1\u306e\u9001\u51fa\u6761\u4ef6\u3092\u6e80\u305f\u3057\u305f\u5834\u5408\u306bmonitor\u306f\u7d42\u4e86\u3059\u308b.\n\n\ninfo\n\n\n\u5171\u901a\u306e\u6319\u52d5\u306e\u307f.\n\n\nstandby\n\n\n1\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u9001\u51fa\u6761\u4ef6\u3092\u6e80\u305f\u3057\u305f\u6642, \u547c\u3073\u51fa\u3057\u5143\u30d7\u30ed\u30bb\u30b9\u306b\u540d\u524d\u306e\u59d4\u8b72\u3092\u884c\u3046. \u5b9f\u969b\u306b\u9001\u51fa\u3055\u308c\u308b\u306e\u306f3\u306e\u30e1\u30c3\u30bb\u30fc\u30b8.\n\n\nfollow\n\n\n1\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u9001\u51fa\u6761\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3082monitor\u306f\u7d42\u4e86\u305b\u305a, \u7d99\u7d9a\u3059\u308b.\n\u65b0\u3057\u304f\u30d7\u30ed\u30bb\u30b9\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u305f\u5834\u54084\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u9001\u51fa\u3055\u308c\u308b.\n\n\n\n\ndemonitor/2\ndemonitor(Key :: key(), Ref :: reference()) -> ok.\n\nkey\u306b\u306f{n | a, _, _}\u306e\u307f\u6307\u5b9a\u53ef\u80fd.\n\nawait/1, await/2, await/3\n%% await(Key)           @equiv await(node(), Key, infinity)\n%% await(Key, Timeout)  @equiv await(node(), Key, Timeout)\nawait(node(), key(), Timeout :: non_neg_integer() | infinity) -> {pid(), Value}\n\n\u6307\u5b9a\u3057\u305fkey\u3067reg/1(reg/2)\u3055\u308c\u308b\u306e\u3092\u5f85\u3064.\n\u65e2\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f, \u3059\u3050\u306b\u8fd4\u3059.\nkey\u306b\u306f{n, _, _}\u306e\u307f\u6307\u5b9a\u53ef\u80fd.\n\nwide_await/3\nwide_await(Nodes :: [node()], Key :: key(), Timeout :: non_neg_integer() | infinity) -> {pid(), Value}.\n\nawait\u306e\u62e1\u5f35. \u8907\u6570\u30ce\u30fc\u30c9\u4e0a\u3067\u76e3\u8996\u3092\u884c\u3046.\nkey\u306b\u306f{n, l, _}\u306e\u307f\u6307\u5b9a\u53ef\u80fd.\n\nnb_wait/1, nb_wait/2\n%% nb_wait(Key)         @equiv nb_wait(node(), Key)\nnb_wait(Node :: node(), Key :: key()) -> reference(). \n\nawait\u306e\u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u7248.\nkey\u306b\u306f{n, _, _}\u306e\u307f\u6307\u5b9a\u53ef\u80fd.\n\u30d7\u30ed\u30bb\u30b9\u4f5c\u6210\u6642\u306b{gproc, reference(), registered, {key(), pid(), Value}}\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u9001\u4fe1\u3055\u308c\u308b.\n\u65e2\u306b\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3067\u3082\u540c\u69d8\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u9001\u3089\u308c\u308b.\n\ncancel_wait/2, cancel_wait/3\ncancel_wait(Key :: key(), Ref :: all | reference()) -> ok.\ncancel_wait(Node :: node(), Key :: key(), Ref :: all | reference()) -> ok.\n\nnb_wait\u3092\u30ad\u30e3\u30f3\u30bb\u30eb\u3059\u308b.\n{_, g, _}\u3092\u6307\u5b9a\u3059\u308b\u5834\u5408\u306fcancel_wait/2\u3092\u6307\u5b9a\u3059\u308b.\n\naudit_process/1\naudit_process(Pid :: pid()) -> ok.\n\nis_process_alive/1\u304cfalse\u306e\u5834\u5408\u306freg/1\u3055\u308c\u3066\u3044\u308b\u60c5\u5831\u3092\u524a\u9664\u3059\u308b.\n\u5fc5\u8981\u304c\u306a\u3051\u308c\u3070\u4f7f\u3046\u3079\u304d\u3067\u306f\u306a\u3044.\n\n\u30e1\u30c3\u30bb\u30fc\u30b8\u9001\u4fe1\u95a2\u6570\n\nsend/2\nsend(Process | key(), Msg) -> Msg when\n    Process :: pid() | atom() | {pid() | atom(), node()},\n    Msg     :: any().  \n\nPid ! Msg\u3068\u540c\u7b49\u306e\u6a5f\u80fd.\n\u4f46\u3057, type() = p | c\u306e\u5834\u5408\u306f\u8a72\u5f53\u3059\u308b\u30d7\u30ed\u30bb\u30b9\u5168\u3066\u306b\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u3059\u308b.\nkey\u306bwildcard\u3092\u542b\u3093\u3067\u306f\u306a\u3089\u306a\u3044\n\nbcast/2, bcast/3\n%% bcast(Key, Msg)       @equiv bcast(nodes(), Key, Msg)\nbcast(Nodes :: [atom()], Key :: key(), Msg) -> Msg when\n    Msg :: any().\n\n\u6307\u5b9a\u3057\u305fnode()\u4e0a\u306ekey()\u306e\u30d7\u30ed\u30bb\u30b9\u306b\u5bfe\u3057\u3066\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u3059\u308b.\ngen_server:abcast/3\u3092\u5185\u90e8\u3067\u4f7f\u7528.\nkey\u306b\u306f{_, l, _}\u306e\u307f\u6307\u5b9a\u53ef\u80fd.\n\nCounter\u306b\u95a2\u3059\u308b\u95a2\u6570\n\n\nreset_counter/1\nreset_counter(Key :: key()) -> {ValueBefore, ValueAfter}.\n\nkey() = {c, _, _}\u306e\u307f\u6307\u5b9a\u53ef\u80fd.\nreg\u3057\u305f\u969b\u306e\u5024\u306b\u623b\u3059.\n\nupdate_counter/2, update_counter/3\nupdate_counter(Key :: key(), Incr :: increment())                        -> integer() | [integer()].\nupdate_counter(Key :: key(), Pid :: pid() | shared, Incr :: increment()) -> integer() | [integer()].\n\nctr_update() :: {Incr :: integer(), Threshold :: integer(), SetVal :: integer()}.\nincrement()  :: integer() | ctr_update() | [integer() | ctr_update()].\n\nctr_update/0\u306f, Threshold\u3092\u8d85\u3048\u305f\u5834\u5408, SetVal\u304c\u4ee3\u5165\u3055\u308c\u308b.\nIncr\u306b\u30ea\u30b9\u30c8\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f, foldl\u3092\u5b9f\u884c\u3057, \u305d\u306e\u9014\u4e2d\u7d50\u679c\u3092\u542b\u3080\u7d50\u679c\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059.\nkey() = {n | c, _, _}\u306e\u307f\u6307\u5b9a\u53ef\u80fd. \u4f46\u3057, n\u3092\u6307\u5b9a\u3059\u308b\u5834\u5408\u306freg/2\u3067\u5024\u3092integer()\u306b\u8a2d\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b.\n\nupdate_counters/2\nupdate_counters(scope(), [key(), pid() | shared, increment()]) -> [{key(), pid(), integer() | [integer()]}].\n\nkey() = {c, _, _}\u306e\u307f\u6307\u5b9a\u53ef\u80fd.\n\u4ed6\u306f, update_counter/3\u3068\u540c\u69d8\u306e\u6319\u52d5\u3092\u3059\u308b.\n\nattributes/values\u306b\u95a2\u3059\u308b\u95a2\u6570\n\nset_value/2\nset_value(Key :: key(), Value) -> true.\n\nreg\u3057\u305f\u969b\u306b\u8a2d\u5b9a\u3057\u305fValue\u3092\u5909\u66f4\u3059\u308b. \u547c\u3073\u51fa\u3057\u5143\u304creg\u3057\u305fkey\u306e\u307f\u5909\u66f4\u53ef\u80fd.\n\nget_value/1, get_value/2\nget_value(Key :: key())               -> Value.\nget_value(Key :: key(), Pid :: pid()) -> Value.\n\n{Pid, Key}\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308bValue\u3092\u53d6\u5f97\u3059\u308b. \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306fundefined | 0\n\nset_value_shared/2\nset_value_shared(Key :: key(), Value) -> true.\n\nkey = {p | c | a, _, _}\u306e\u307f\u6307\u5b9a\u53ef\u80fd.\nreg_shared\u306e\u969b\u306b\u8a2d\u5b9a\u3057\u305fValue\u3092\u5909\u66f4\u3059\u308b.\n\nget_value_shared/1\nget_value_shared(Key :: key()) -> Value.\n\nkey = {p | c | a, _, _}\u306e\u307f\u6307\u5b9a\u53ef\u80fd.\n\nset_attributes/2\nset_attributes(Key :: key(), Props :: [{Key :: atom(), Value :: any()}]) -> true.\n\n\u547c\u3073\u51fa\u3057\u5143\u30d7\u30ed\u30bb\u30b9\u306ekey()\u306b\u5bfe\u3057, attribute\u3092\u3064\u3051\u308b. \n\u3064\u307e\u308a, protected\u3067\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u306a\u5024.\n\nget_attribute/2, get_attribute/3\nget_attribute(Key :: key(), Attribute :: atom())        -> Value | undefined.\nget_attribute(Key :: key(), pid(), Attribute :: atom()) -> Value | undefined.\n\nset_attribute/2\u3067\u8a2d\u5b9a\u3057\u305f\u5024\u3092\u53d6\u308a\u51fa\u3059.\n\u5b58\u5728\u3057\u306a\u3044key\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u4f8b\u5916\u304c\u9001\u51fa\u3055\u308c, \u5024\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306fundefined\u306b\u306a\u308b.\n\nset_attributes_shared/2\nset_attributes_shared(Key :: key(), [{Key :: atom(), Value :: any()}]) -> true.\n\nkey() = {c | a | p, _, _}\u306e\u307f\u6307\u5b9a\u53ef\u80fd.\nset_attributes/2\u3068\u540c\u69d8\u306e\u3053\u3068\u3092, shared\u3067\u4f5c\u6210\u3057\u305fkey\u306b\u5bfe\u3057\u3066\u5b9f\u884c\u3059\u308b.\n\nget_attributes_shared/2\nget_attributes_shared(Key :: key(), Attr :: atom()) -> Value | undefined.\n\nset_attributes_shared/2\u3067\u8a2d\u5b9a\u3057\u305f\u5024\u3092\u53d6\u308a\u51fa\u3059.\n\u5b58\u5728\u3057\u306a\u3044key\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u4f8b\u5916\u304c\u9001\u51fa\u3055\u308c, \u5024\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306fundefined\u306b\u306a\u308b.\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u6d41\u3057\u8aad\u3093\u3067\u307f\u3066...\nscope() = g\u306b\u95a2\u3059\u308b\u51e6\u7406\u3092\u884c\u3046gproc_dist\u306f\u5168\u304f\u8aad\u3093\u3067\u306a\u3044\u3067\u3059\u304c, read\u7cfb\u306e\u51e6\u7406\u306b\u95a2\u3057\u3066\u306f\u6975\u529b\u547c\u3073\u51fa\u3057\u5143\u306e\u30d7\u30ed\u30bb\u30b9\u3067\u884c\u308f\u308c\u308b\u306e\u3067, \u901f\u5ea6\u7684\u306b\u554f\u984c\u306b\u306a\u308a\u305d\u3046\u306a\u3053\u3068\u306f\u306a\u3055\u305d\u3046\u3067\u306f\u3042\u308b.\n\u305f\u3060, \u30d7\u30ed\u30bb\u30b9\u306e\u7d42\u4e86\u3092\u691c\u77e5\u3057\u305f\u969b\u306b\u306fgproc\u306egen_server\u304c\u3064\u3051\u3089\u308c\u305f\u5168\u3066\u306ekey\u306b\u95a2\u3059\u308bmonitor\u306a\u3069\u3092\u8abf\u3079, \u64cd\u4f5c\u3092\u884c\u3046\u306e\u3067\u9ad8\u983b\u5ea6\u3067\u7d42\u4e86\u3059\u308b\u30d7\u30ed\u30bb\u30b9\u306b\u5bfe\u3057\u3066\u306f\u3042\u307e\u308a\u4f7f\u308f\u306a\u3044\u65b9\u3044\u3044\u306e\u304b\u3082\u3057\u308c\u306a\u3044...\n\u307e\u305f, \u3044\u304f\u3064\u304b\u306e\u51e6\u7406\u306f(\u4f8b\u3048\u3070give_away) \u884c\u3063\u305f\u5f8c\u3067\u3082\u30bf\u30a4\u30df\u30f3\u30b0\u5dee\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u6765\u308b\u5834\u5408\u304c\u3042\u308b\u70ba, \u78ba\u5b9f\u6027\u3092\u4fdd\u8a3c\u3059\u308b\u5834\u9762\u3067\u306fpid\u3092\u4f7f\u7528\u3059\u308b\u3079\u304d\u306a\u306e\u3060\u308d\u3046.\u9006\u306b\u4e0d\u78ba\u5b9f\u3067\u826f\u3044\u5834\u9762\u306e\u65b9\u304c\u6d3b\u8e8d\u3057\u305d\u3046\u3060.\n# gproc (Erlang register\u62e1\u5f35\u30e9\u30a4\u30d6\u30e9\u30ea) \u306e\u4f7f\u3044\u65b9\n[mururu\u3055\u3093\u304c\u6700\u8fd1\u7c21\u5358\u306a\u4f7f\u3044\u65b9\u3092\u6295\u7a3f\u3057\u3066\u304f\u3060\u3055\u3063\u305f](http://qiita.com/mururu/items/2fa4f06b8f3572be4b28)\u5f71\u97ff\u304b\u306f\u5206\u304b\u3089\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u5468\u308a\u3067gproc\u3092\u4f7f\u3046\u4eba\u304c\u51fa\u3066\u304d\u305f\u306e\u3067\u3061\u3087\u3063\u3068\u89e6\u3063\u3066\u307f\u3088\u3046\u3068\u601d\u3063\u305f\u3089\u610f\u5916\u3068\u8a70\u307e\u3063\u305f\u306e\u3067, `select`\u7cfb\u4ee5\u5916\u3092\u3056\u3063\u3068\u8abf\u3079\u3066\u307f\u305f.\n\n\u4e00\u5fdc\u5b9f\u969b\u306b\u691c\u8a3c\u3057\u306a\u304c\u3089\u66f8\u3044\u3066\u3044\u308b\u304c, \u9593\u9055\u3044\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067, \u305d\u306e\u969b\u306f\u516c\u5f0f\u3092\u53c2\u7167\u3057\u3066\u6b32\u3057\u3044.\n\nsyntax_suger\uff1f\u7684\u306a\u95a2\u6570\u306f\u7701\u7565\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u60aa\u3057\u304b\u3089\u305a.\n\n\u30ec\u30dd\u30b8\u30c8\u30ea|[uwiger/gproc](https://github.com/uwiger/gproc)|\n---|---|\n\u30d0\u30fc\u30b8\u30e7\u30f3|0.3.1|\n\u30e9\u30a4\u30bb\u30f3\u30b9| Erlang Public License|\n\n## \u57fa\u672c\u95a2\u6570\n### reg/1, reg/2 <a name=reg>\n```erlang\nreg(Key :: key()) -> true.\nreg(Key :: key(), Value :: term()) -> true.\n```\n\u30d7\u30ed\u30bb\u30b9\u3092\u767b\u9332\u3059\u308b.\n\n```erlang\ntype()  :: n | p | c | a. %% n: name, p: property, c: counter, a: aggregate_counter\nscope() :: l, g.          %% l: local, g: global\nkey()   :: {type(), scope(), any()}\n```\n`n`\u306f\u30e6\u30cb\u30fc\u30af\u306a\u540d\u524d. `p`\u306f\u8907\u6570\u306e\u30d7\u30ed\u30bb\u30b9\u306b\u5272\u308a\u5f53\u3066\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u30bf\u30b0.\n`c`\u306f\u30bf\u30b0 (`p`)\u3068\u540c\u69d8\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d, \u52a0\u3048\u3066Value\u3092`integer()`\u306e\u307f\u306b\u5236\u9650\u3059\u308b\u3053\u3068\u3067[counter\u306e\u6a5f\u80fd](#counter)\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b.\n`a`\u306f`n`\u3068\u540c\u69d8\u30e6\u30cb\u30fc\u30af\u3067\u3042\u308b\u304c, counter\u306e\u6a5f\u80fd\u306f\u4f7f\u3048\u306a\u3044\u70ba\u3000\u4f7f\u7528\u7528\u9014\u304c\u4e0d\u660e\u3060\u3063\u305f.\n\n### unreg/1\n```erlang\nunreg(Key :: key()) -> true.\n```\n`key/0`\u3067`reg/1` (`reg/2`)\u3057\u305f\u540d\u524d\u306e\u767b\u9332\u3092\u524a\u9664\u3059\u308b.\n\u547c\u3073\u51fa\u3057\u5143\u306e\u30d7\u30ed\u30bb\u30b9\u306e\u767b\u9332\u60c5\u5831\u306e\u307f\u524a\u9664\u53ef\u80fd.\n\n### goodbye/0\n```erlang\ngoodbye() -> ok.\n```\n\u547c\u3073\u51fa\u3057\u5143\u306e\u30d7\u30ed\u30bb\u30b9\u306e`reg`\u60c5\u5831\u3092\u5168\u3066\u524a\u9664\u3059\u308b.\n\n### where/1, lookup_pids/1, lookup_pid/1\n```erlang\nwhere(Key :: key())       -> pid() | undefiend.\nlookup_pid(Key :: key())  -> pid().\nlookup_pids(Key :: key()) -> [pid()].\n```\n`key`\u3067`gproc:reg/1`\u3055\u308c\u305f`pid/0`\u3092\u53d6\u5f97\u3059\u308b.\n`{p | c, _, _}`\u306e\u5834\u5408\u306f`lookup_pids/1`\u3092\u3001\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f\u3069\u308c\u3067\u3082\u5229\u7528\u3067\u304d\u308b.\n\n## reg/unreg\u62e1\u5f35\n### mreg/3\n```erlang\nmreg(type(), scope(), [{Key :: any(), Value :: any()}]) -> true. \n```\n`type() = n`\u306e\u5834\u5408\u306f, 1\u3064\u3067\u306e\u767b\u9332\u3067\u304d\u306a\u3044\u3082\u306e\u304c\u3042\u308c\u3070\u5168\u3066\u767b\u9332\u3057\u306a\u3044.\n`reg`\u3092\u8907\u6570\u56de\u5b9f\u884c\u3059\u308b\u3088\u308a\u3082, `gproc`\u306e`gen_server`\u3078\u306e`call`\u304c1\u56de\u3057\u304b\u884c\u308f\u308c\u306a\u3044\u70ba, \u9ad8\u901f.\n\n\u5f15\u6570\u306b\u3064\u3044\u3066\u306f[reg](#reg)\u3092\u53c2\u7167\n### munreg/3\n```erlang\nmunreg(type(), scope(), [Key :: any()]) -> true.\n```\n\u540c\u6642\u306b`unreg`\u3059\u308b. \u6307\u5b9a\u3057\u305f`key`\u3092\u5168\u3066`unreg`\u306e\u72b6\u614b\u306b\u3059\u308b. (\u4e00\u90e8\u304c`reg`\u3055\u308c\u3066\u3044\u306a\u304f\u3066\u3082\u554f\u984c\u306a\u3044)\n\n### reg_shared/1, reg_shared2 <a name=reg_shared>\n```erlang\nreg_shared(Key :: key())        -> true.\nreg_shared(Key :: key(), Value) -> true.\n```\n\u7279\u5b9a\u306e\u30d7\u30ed\u30bb\u30b9\u306b\u7d10\u4ed8\u3051\u306a\u3044\u5171\u6709\u30e1\u30e2\u30ea\u306e\u3088\u3046\u306a\u4f7f\u7528\u304c\u3067\u304d\u308b.\u5909\u66f4\u3092\u3059\u308b\u306e\u306f`gproc`\u306e\u30d7\u30ed\u30bb\u30b9\u306e\u70ba, \u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u3067\u3042\u308b.\n\n### reg_or_locate/1, reg_or_locate/2, reg_or_locate/3\n```erlang\nreg_or_locate(Key :: key())                               -> {pid(), Value}.\nreg_or_locate(Key :: key(), Value)                        -> {pid(), Value}.\nreg_or_locate(Key :: key(), Value, fun(() -> no_return()) -> {pid(), Value}.\n```\n`key/0`\u306b\u306f`{n, _, _}`\u306e\u307f\u5229\u7528\u3067\u304d\u308b.\n\u3082\u3057`key/0`\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u30d7\u30ed\u30bb\u30b9\u3092\u4f5c\u6210\u3059\u308b\u5834\u5408\u306b\u5229\u7528.\n`reg_or_locate/3`\u306f\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u5834\u5408, \u7b2c3\u5f15\u6570\u3092`spawn`\u3059\u308b.\n\n\u8fd4\u308a\u5024\u306f, \n\n- \u5b58\u5728\u3057\u305f\u5834\u5408\u3000\uff1a\u767b\u9332\u3055\u308c\u3066\u3044\u308b`pid/0`, `Value`\u60c5\u5831\n- \u5b58\u5728\u3057\u306a\u3044\u5834\u5408\uff1a\u767b\u9332\u3057\u305f`pid/0`, `Value`\u60c5\u5831\n\n### give_away/2\n```erlang\ngive_away(From :: key(), To :: pid() | key()) -> undefined | pid().\n```\n\u547c\u3073\u51fa\u3057\u5143\u30d7\u30ed\u30bb\u30b9\u306b\u3064\u3051\u3089\u308c\u305f`key`\u3092\u59d4\u8b72\u3059\u308b.\n\n`From = {_, l, _}`\u306e\u5834\u5408\u306f`To = pid() | {n, l, _}` (`pid()`\u306e\u5834\u5408\u306f`node(Pid) == node()`) \u306e\u307f\u6307\u5b9a\u53ef\u80fd.\n`From = {_, g, _}`\u306e\u5834\u5408\u306f`To = pid() | {n | a, g, _}`\u306e\u307f\u6307\u5b9a\u53ef\u80fd.\n\n## \u30d7\u30ed\u30bb\u30b9\u76e3\u8996\u95a2\u6570\n### monitor/1, monitor/2\n```erlang\n%% monitor(Key)          @equiv monitor(Key, info)\nmonitor(Key :: key(), Type :: monitor_type()) -> reference().\n```\n\n```erlang\nmonitor_type() = info | standby | follow.\n```\n`key() = {n | a, _, _}`\u306e\u307f\u6307\u5b9a\u53ef\u80fd.\n\n\u9001\u4fe1\u3055\u308c\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u306f4\u7a2e\u985e\n1. `{gproc, unreg, Ref, Key}`\n2. `{gproc, {migrated, ToPid}, Ref, Key}`\n3. `{gproc, {failover, ToPid}, Ref, Key}`\n4. `{gproc, registered, Ref, Key}`\n\n`monitor_type`\u306b\u3088\u308b\u6319\u52d5\u306e\u9055\u3044\u306f\u4ee5\u4e0b\u306e\u901a\u308a\n\n- \u5171\u901a\n - `monitor`\u3057\u305f\u969b\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f1\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5373\u5ea7\u306b\u9001\u51fa\u3055\u308c\u308b.\n - `give_away/2`\u304c\u884c\u308f\u308c\u305f\u5834\u5408, 2\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u9001\u51fa\u3055\u308c\u308b.\n - 1\u306e\u9001\u51fa\u6761\u4ef6\u3092\u6e80\u305f\u3057\u305f\u5834\u5408\u306b`monitor`\u306f\u7d42\u4e86\u3059\u308b.\n- info\n - \u5171\u901a\u306e\u6319\u52d5\u306e\u307f.\n- standby\n - 1\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u9001\u51fa\u6761\u4ef6\u3092\u6e80\u305f\u3057\u305f\u6642, \u547c\u3073\u51fa\u3057\u5143\u30d7\u30ed\u30bb\u30b9\u306b\u540d\u524d\u306e\u59d4\u8b72\u3092\u884c\u3046. \u5b9f\u969b\u306b\u9001\u51fa\u3055\u308c\u308b\u306e\u306f3\u306e\u30e1\u30c3\u30bb\u30fc\u30b8.\n- follow\n - 1\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u9001\u51fa\u6761\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3082`monitor`\u306f\u7d42\u4e86\u305b\u305a, \u7d99\u7d9a\u3059\u308b.\n - \u65b0\u3057\u304f\u30d7\u30ed\u30bb\u30b9\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u305f\u5834\u54084\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u9001\u51fa\u3055\u308c\u308b.\n\n### demonitor/2\n```erlang\ndemonitor(Key :: key(), Ref :: reference()) -> ok.\n```\n`key`\u306b\u306f`{n | a, _, _}`\u306e\u307f\u6307\u5b9a\u53ef\u80fd.\n\n### await/1, await/2, await/3\n```erlang\n%% await(Key)           @equiv await(node(), Key, infinity)\n%% await(Key, Timeout)  @equiv await(node(), Key, Timeout)\nawait(node(), key(), Timeout :: non_neg_integer() | infinity) -> {pid(), Value}\n```\n\u6307\u5b9a\u3057\u305f`key`\u3067`reg/1`(`reg/2`)\u3055\u308c\u308b\u306e\u3092\u5f85\u3064.\n\u65e2\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f, \u3059\u3050\u306b\u8fd4\u3059.\n`key`\u306b\u306f`{n, _, _}`\u306e\u307f\u6307\u5b9a\u53ef\u80fd.\n\n### wide_await/3\n```erlang\nwide_await(Nodes :: [node()], Key :: key(), Timeout :: non_neg_integer() | infinity) -> {pid(), Value}.\n```\n`await`\u306e\u62e1\u5f35. \u8907\u6570\u30ce\u30fc\u30c9\u4e0a\u3067\u76e3\u8996\u3092\u884c\u3046.\n`key`\u306b\u306f`{n, l, _}`\u306e\u307f\u6307\u5b9a\u53ef\u80fd.\n\n### nb_wait/1, nb_wait/2\n```erlang\n%% nb_wait(Key)         @equiv nb_wait(node(), Key)\nnb_wait(Node :: node(), Key :: key()) -> reference(). \n```\n`await`\u306e\u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u7248.\n`key`\u306b\u306f`{n, _, _}`\u306e\u307f\u6307\u5b9a\u53ef\u80fd.\n\u30d7\u30ed\u30bb\u30b9\u4f5c\u6210\u6642\u306b`{gproc, reference(), registered, {key(), pid(), Value}}`\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u9001\u4fe1\u3055\u308c\u308b.\n\u65e2\u306b\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3067\u3082\u540c\u69d8\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u9001\u3089\u308c\u308b.\n\n### cancel_wait/2, cancel_wait/3\n```erlang\ncancel_wait(Key :: key(), Ref :: all | reference()) -> ok.\ncancel_wait(Node :: node(), Key :: key(), Ref :: all | reference()) -> ok.\n```\n`nb_wait`\u3092\u30ad\u30e3\u30f3\u30bb\u30eb\u3059\u308b.\n`{_, g, _}`\u3092\u6307\u5b9a\u3059\u308b\u5834\u5408\u306f`cancel_wait/2`\u3092\u6307\u5b9a\u3059\u308b.\n\n### audit_process/1\n```erlang\naudit_process(Pid :: pid()) -> ok.\n```\n`is_process_alive/1`\u304cfalse\u306e\u5834\u5408\u306f`reg/1`\u3055\u308c\u3066\u3044\u308b\u60c5\u5831\u3092\u524a\u9664\u3059\u308b.\n\u5fc5\u8981\u304c\u306a\u3051\u308c\u3070\u4f7f\u3046\u3079\u304d\u3067\u306f\u306a\u3044.\n\n## \u30e1\u30c3\u30bb\u30fc\u30b8\u9001\u4fe1\u95a2\u6570\n### send/2\n```erlang\nsend(Process | key(), Msg) -> Msg when\n    Process :: pid() | atom() | {pid() | atom(), node()},\n    Msg     :: any().  \n```\n`Pid ! Msg`\u3068\u540c\u7b49\u306e\u6a5f\u80fd.\n\u4f46\u3057, `type() = p | c`\u306e\u5834\u5408\u306f\u8a72\u5f53\u3059\u308b\u30d7\u30ed\u30bb\u30b9\u5168\u3066\u306b\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u3059\u308b.\n*key\u306bwildcard\u3092\u542b\u3093\u3067\u306f\u306a\u3089\u306a\u3044*\n\n### bcast/2, bcast/3\n```erlang\n%% bcast(Key, Msg)       @equiv bcast(nodes(), Key, Msg)\nbcast(Nodes :: [atom()], Key :: key(), Msg) -> Msg when\n    Msg :: any().\n```\n\u6307\u5b9a\u3057\u305f`node()`\u4e0a\u306e`key()`\u306e\u30d7\u30ed\u30bb\u30b9\u306b\u5bfe\u3057\u3066\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u3059\u308b.\n`gen_server:abcast/3`\u3092\u5185\u90e8\u3067\u4f7f\u7528.\n`key`\u306b\u306f`{_, l, _}`\u306e\u307f\u6307\u5b9a\u53ef\u80fd.\n\n## Counter\u306b\u95a2\u3059\u308b\u95a2\u6570<a name=counter>\n### reset_counter/1\n```erlang\nreset_counter(Key :: key()) -> {ValueBefore, ValueAfter}.\n```\n`key() = {c, _, _}`\u306e\u307f\u6307\u5b9a\u53ef\u80fd.\n`reg`\u3057\u305f\u969b\u306e\u5024\u306b\u623b\u3059.\n\n### update_counter/2, update_counter/3\n```erlang\nupdate_counter(Key :: key(), Incr :: increment())                        -> integer() | [integer()].\nupdate_counter(Key :: key(), Pid :: pid() | shared, Incr :: increment()) -> integer() | [integer()].\n```\n```erlang\nctr_update() :: {Incr :: integer(), Threshold :: integer(), SetVal :: integer()}.\nincrement()  :: integer() | ctr_update() | [integer() | ctr_update()].\n```\n`ctr_update/0`\u306f, Threshold\u3092\u8d85\u3048\u305f\u5834\u5408, `SetVal`\u304c\u4ee3\u5165\u3055\u308c\u308b.\n`Incr`\u306b\u30ea\u30b9\u30c8\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f, foldl\u3092\u5b9f\u884c\u3057, \u305d\u306e\u9014\u4e2d\u7d50\u679c\u3092\u542b\u3080\u7d50\u679c\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059.\n`key() = {n | c, _, _}`\u306e\u307f\u6307\u5b9a\u53ef\u80fd. \u4f46\u3057, n\u3092\u6307\u5b9a\u3059\u308b\u5834\u5408\u306f`reg/2`\u3067\u5024\u3092`integer()`\u306b\u8a2d\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b.\n\n### update_counters/2\n```erlang\nupdate_counters(scope(), [key(), pid() | shared, increment()]) -> [{key(), pid(), integer() | [integer()]}].\n```\n`key() = {c, _, _}`\u306e\u307f\u6307\u5b9a\u53ef\u80fd.\n\u4ed6\u306f, `update_counter/3`\u3068\u540c\u69d8\u306e\u6319\u52d5\u3092\u3059\u308b.\n\n## attributes/values\u306b\u95a2\u3059\u308b\u95a2\u6570\n### set_value/2\n```erlang\nset_value(Key :: key(), Value) -> true.\n```\n`reg`\u3057\u305f\u969b\u306b\u8a2d\u5b9a\u3057\u305fValue\u3092\u5909\u66f4\u3059\u308b. \u547c\u3073\u51fa\u3057\u5143\u304c`reg`\u3057\u305f`key`\u306e\u307f\u5909\u66f4\u53ef\u80fd.\n### get_value/1, get_value/2\n```erlang\nget_value(Key :: key())               -> Value.\nget_value(Key :: key(), Pid :: pid()) -> Value.\n```\n`{Pid, Key}`\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308bValue\u3092\u53d6\u5f97\u3059\u308b. \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f`undefined | 0`\n\n### set_value_shared/2\n```erlang\nset_value_shared(Key :: key(), Value) -> true.\n```\n`key = {p | c | a, _, _}`\u306e\u307f\u6307\u5b9a\u53ef\u80fd.\n[reg_shared](#reg_shared)\u306e\u969b\u306b\u8a2d\u5b9a\u3057\u305fValue\u3092\u5909\u66f4\u3059\u308b.\n\n### get_value_shared/1\n```erlang\nget_value_shared(Key :: key()) -> Value.\n```\n`key = {p | c | a, _, _}`\u306e\u307f\u6307\u5b9a\u53ef\u80fd.\n\n### set_attributes/2\n```erlang\nset_attributes(Key :: key(), Props :: [{Key :: atom(), Value :: any()}]) -> true.\n```\n\u547c\u3073\u51fa\u3057\u5143\u30d7\u30ed\u30bb\u30b9\u306e`key()`\u306b\u5bfe\u3057, `attribute`\u3092\u3064\u3051\u308b. \n\u3064\u307e\u308a, `protected`\u3067\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u306a\u5024.\n\n### get_attribute/2, get_attribute/3\n```erlang\nget_attribute(Key :: key(), Attribute :: atom())        -> Value | undefined.\nget_attribute(Key :: key(), pid(), Attribute :: atom()) -> Value | undefined.\n```\n`set_attribute/2`\u3067\u8a2d\u5b9a\u3057\u305f\u5024\u3092\u53d6\u308a\u51fa\u3059.\n\u5b58\u5728\u3057\u306a\u3044`key`\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u4f8b\u5916\u304c\u9001\u51fa\u3055\u308c, \u5024\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f`undefined`\u306b\u306a\u308b.\n\n### set_attributes_shared/2\n```erlang\nset_attributes_shared(Key :: key(), [{Key :: atom(), Value :: any()}]) -> true.\n```\n`key() = {c | a | p, _, _}`\u306e\u307f\u6307\u5b9a\u53ef\u80fd.\n`set_attributes/2`\u3068\u540c\u69d8\u306e\u3053\u3068\u3092, [shared\u3067\u4f5c\u6210\u3057\u305f](#reg_shared)key\u306b\u5bfe\u3057\u3066\u5b9f\u884c\u3059\u308b.\n\n### get_attributes_shared/2\n```erlang\nget_attributes_shared(Key :: key(), Attr :: atom()) -> Value | undefined.\n```\n`set_attributes_shared/2`\u3067\u8a2d\u5b9a\u3057\u305f\u5024\u3092\u53d6\u308a\u51fa\u3059.\n\u5b58\u5728\u3057\u306a\u3044`key`\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u4f8b\u5916\u304c\u9001\u51fa\u3055\u308c, \u5024\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f`undefined`\u306b\u306a\u308b.\n\n## \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u6d41\u3057\u8aad\u3093\u3067\u307f\u3066...\n`scope() = g`\u306b\u95a2\u3059\u308b\u51e6\u7406\u3092\u884c\u3046`gproc_dist`\u306f\u5168\u304f\u8aad\u3093\u3067\u306a\u3044\u3067\u3059\u304c, read\u7cfb\u306e\u51e6\u7406\u306b\u95a2\u3057\u3066\u306f\u6975\u529b\u547c\u3073\u51fa\u3057\u5143\u306e\u30d7\u30ed\u30bb\u30b9\u3067\u884c\u308f\u308c\u308b\u306e\u3067, \u901f\u5ea6\u7684\u306b\u554f\u984c\u306b\u306a\u308a\u305d\u3046\u306a\u3053\u3068\u306f\u306a\u3055\u305d\u3046\u3067\u306f\u3042\u308b.\n\u305f\u3060, \u30d7\u30ed\u30bb\u30b9\u306e\u7d42\u4e86\u3092\u691c\u77e5\u3057\u305f\u969b\u306b\u306f`gproc`\u306e`gen_server`\u304c\u3064\u3051\u3089\u308c\u305f\u5168\u3066\u306e`key`\u306b\u95a2\u3059\u308b`monitor`\u306a\u3069\u3092\u8abf\u3079, \u64cd\u4f5c\u3092\u884c\u3046\u306e\u3067\u9ad8\u983b\u5ea6\u3067\u7d42\u4e86\u3059\u308b\u30d7\u30ed\u30bb\u30b9\u306b\u5bfe\u3057\u3066\u306f\u3042\u307e\u308a\u4f7f\u308f\u306a\u3044\u65b9\u3044\u3044\u306e\u304b\u3082\u3057\u308c\u306a\u3044...\n\n\u307e\u305f, \u3044\u304f\u3064\u304b\u306e\u51e6\u7406\u306f(\u4f8b\u3048\u3070give_away) \u884c\u3063\u305f\u5f8c\u3067\u3082\u30bf\u30a4\u30df\u30f3\u30b0\u5dee\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u6765\u308b\u5834\u5408\u304c\u3042\u308b\u70ba, \u78ba\u5b9f\u6027\u3092\u4fdd\u8a3c\u3059\u308b\u5834\u9762\u3067\u306f`pid`\u3092\u4f7f\u7528\u3059\u308b\u3079\u304d\u306a\u306e\u3060\u308d\u3046.\u9006\u306b\u4e0d\u78ba\u5b9f\u3067\u826f\u3044\u5834\u9762\u306e\u65b9\u304c\u6d3b\u8e8d\u3057\u305d\u3046\u3060.\n", "tags": ["Erlang"]}