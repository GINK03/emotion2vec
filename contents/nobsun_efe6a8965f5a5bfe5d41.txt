{"context": " More than 1 year has passed since last update.\u7d50\u57ce\u6d69 @hyuki \u3055\u3093\u51fa\u984c\u306e\u30b8\u30a7\u30e0\u30b9\u30c8\u30ea\u30f3\u30b0\u554f\u984c\uff08\u738b\u5973\u69d8\u306e\u5b9d\u77f3\u30d1\u30bf\u30fc\u30f3\u3092\u898b\u3064\u3051\u3088\u3046\uff01\uff09\u3092\u89e3\u3044\u3066\u307f\u307e\u3057\u305f\uff0e\n\nHaskell\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u30b3\u30fc\u30c9\n\u30d1\u30bf\u30fc\u30f3\u3092\u5148\u982d\u304b\u3089\u78ba\u5b9a\u3057\u3066\u3044\u3063\u3066\uff0c\u305d\u306e\u524d\u306b\u3069\u308c\u3060\u3051\u306e\u30d1\u30bf\u30fc\u30f3\u304c\u3042\u308b\u304b\u3092\u6570\u3048\u3066\u3044\u307e\u3059\uff0e\n\ngemstring.hs\n{-# LANGUAGE PostfixOperators #-}\n{-# LANGUAGE NPlusKPatterns #-}\nmodule Main where\n\nimport Data.List (unfoldr,delete,genericLength,group,foldl1')\nimport Data.Ratio (numerator,(%))\nimport Math.Polynomial (Poly,Endianness(..),poly,multPoly,polyCoeffs)\n       -- cabal install polynomial\n\nmain :: IO ()\nmain = do\n  { gems <- readFile \"gems.txt\"\n  ; princess <- readFile \"princess.txt\"\n  ; print $ patternIndex (head $ words gems) (head $ words princess)\n  }\n\npatternIndex :: (Eq a, Ord a) => [a] -> [a] -> Integer\npatternIndex xs pat = sum $ unfoldr phi (xs,pat)\n  where\n    phi (_ ,[]  ) = Nothing\n    phi (ys,z:zs) = Just (succ $ ggpermsBefore ys z, (delete z ys,zs))\n\nggpermsBefore :: (Eq a, Ord a) => [a] -> a -> Integer\nggpermsBefore xs a = genericLength bs + sum [ggperms (delete b xs) | b <- bs]\n  where\n    gs = group xs\n    ks = map head gs\n    bs = takeWhile (a>) ks\n\nggperms :: Eq a => [a] -> Integer        -- \u8a9e\u9577\u3054\u3068\u306e\u6570\u3048\u4e0a\u3052\u306e\u548c\nggperms xs = sum $ map (gperms xs) [1..length xs]\n\ngperms :: Eq a => [a] -> Int -> Integer  -- \u4e00\u822c\u9806\u5217\u306e\u6570\u3048\u4e0a\u3052\ngperms xs r = numerator\n           $ (* toRational (r !)) \n           $ (!! r) $ polyCoeffs LE \n           $ foldl1' multPoly \n           $ map eg ls\n  where\n    ls = map length (group xs)\n\neg :: Int -> Poly Rational               -- \u6307\u6570\u578b\u6bcd\u95a2\u6570\neg m = poly LE $ map ((1 %) . (!)) [0..m]\n\n(!) :: Integral a => a -> Integer        -- \u968e\u4e57\n(!) 0        = 1\n(!) n@(n'+1) = fromIntegral n * (n'!)\n\n\n\n\u4e00\u822c\u9806\u5217\u306e\u6570\u3048\u4e0a\u3052\u306f\u6307\u6570\u578b\u6bcd\u95a2\u6570\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u306e\u3067\uff0c\u30d6\u30eb\u30fc\u30c8\u30d5\u30a9\u30fc\u30b9\u306b\u5217\u6319\u3059\u308b\u3088\u308a\u3082\u9ad8\u901f\u306b\u8a08\u7b97\u3067\u304d\u307e\u3059\uff0e\nghci> :set +s\nghci> patternIndex \"abbbbcddddeefggg\" \"eagcdfbe\"\n5578864439\n(0.05 secs, 28983792 bytes)\n\n\u5b9f\u306f\u63d0\u51fa\u3057\u305f\u306e\u306f 5578864432 \u3068\u3044\u3046\u60dc\u3057\u3044(\u3061\u304c\u3046!!)\u5024\u3067\u3057\u305f\uff0e\npatternIndex\u95a2\u6570\u306e\u5b9a\u7fa9\u3067succ\u3092\u9069\u7528\u3059\u308b\u5834\u6240\u304c\u9055\u3063\u3066\u3044\u307e\u3057\u305f\uff0e\n\u6559\u8a13\uff1a\u30c6\u30b9\u30c8\u3057\u3088\u3046\uff0e\n\u7d50\u57ce\u6d69 @hyuki \u3055\u3093\u51fa\u984c\u306e[\u30b8\u30a7\u30e0\u30b9\u30c8\u30ea\u30f3\u30b0\u554f\u984c\uff08\u738b\u5973\u69d8\u306e\u5b9d\u77f3\u30d1\u30bf\u30fc\u30f3\u3092\u898b\u3064\u3051\u3088\u3046\uff01\uff09](https://codeiq.jp/ace/yuki_hiroshi/q684)\u3092\u89e3\u3044\u3066\u307f\u307e\u3057\u305f\uff0e\n\n## Haskell\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u30b3\u30fc\u30c9\n\n\u30d1\u30bf\u30fc\u30f3\u3092\u5148\u982d\u304b\u3089\u78ba\u5b9a\u3057\u3066\u3044\u3063\u3066\uff0c\u305d\u306e\u524d\u306b\u3069\u308c\u3060\u3051\u306e\u30d1\u30bf\u30fc\u30f3\u304c\u3042\u308b\u304b\u3092\u6570\u3048\u3066\u3044\u307e\u3059\uff0e\n\n```haskell:gemstring.hs\n{-# LANGUAGE PostfixOperators #-}\n{-# LANGUAGE NPlusKPatterns #-}\nmodule Main where\n\nimport Data.List (unfoldr,delete,genericLength,group,foldl1')\nimport Data.Ratio (numerator,(%))\nimport Math.Polynomial (Poly,Endianness(..),poly,multPoly,polyCoeffs)\n       -- cabal install polynomial\n\nmain :: IO ()\nmain = do\n  { gems <- readFile \"gems.txt\"\n  ; princess <- readFile \"princess.txt\"\n  ; print $ patternIndex (head $ words gems) (head $ words princess)\n  }\n\npatternIndex :: (Eq a, Ord a) => [a] -> [a] -> Integer\npatternIndex xs pat = sum $ unfoldr phi (xs,pat)\n  where\n    phi (_ ,[]  ) = Nothing\n    phi (ys,z:zs) = Just (succ $ ggpermsBefore ys z, (delete z ys,zs))\n\nggpermsBefore :: (Eq a, Ord a) => [a] -> a -> Integer\nggpermsBefore xs a = genericLength bs + sum [ggperms (delete b xs) | b <- bs]\n  where\n    gs = group xs\n    ks = map head gs\n    bs = takeWhile (a>) ks\n    \nggperms :: Eq a => [a] -> Integer        -- \u8a9e\u9577\u3054\u3068\u306e\u6570\u3048\u4e0a\u3052\u306e\u548c\nggperms xs = sum $ map (gperms xs) [1..length xs]\n\ngperms :: Eq a => [a] -> Int -> Integer  -- \u4e00\u822c\u9806\u5217\u306e\u6570\u3048\u4e0a\u3052\ngperms xs r = numerator\n           $ (* toRational (r !)) \n           $ (!! r) $ polyCoeffs LE \n           $ foldl1' multPoly \n           $ map eg ls\n  where\n    ls = map length (group xs)\n\neg :: Int -> Poly Rational               -- \u6307\u6570\u578b\u6bcd\u95a2\u6570\neg m = poly LE $ map ((1 %) . (!)) [0..m]\n\n(!) :: Integral a => a -> Integer        -- \u968e\u4e57\n(!) 0        = 1\n(!) n@(n'+1) = fromIntegral n * (n'!)\n\n```\n\n\u4e00\u822c\u9806\u5217\u306e\u6570\u3048\u4e0a\u3052\u306f\u6307\u6570\u578b\u6bcd\u95a2\u6570\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u306e\u3067\uff0c\u30d6\u30eb\u30fc\u30c8\u30d5\u30a9\u30fc\u30b9\u306b\u5217\u6319\u3059\u308b\u3088\u308a\u3082\u9ad8\u901f\u306b\u8a08\u7b97\u3067\u304d\u307e\u3059\uff0e\n\n```\nghci> :set +s\nghci> patternIndex \"abbbbcddddeefggg\" \"eagcdfbe\"\n5578864439\n(0.05 secs, 28983792 bytes)\n```\n\n\u5b9f\u306f\u63d0\u51fa\u3057\u305f\u306e\u306f 5578864432 \u3068\u3044\u3046\u60dc\u3057\u3044(\u3061\u304c\u3046!!)\u5024\u3067\u3057\u305f\uff0e\npatternIndex\u95a2\u6570\u306e\u5b9a\u7fa9\u3067succ\u3092\u9069\u7528\u3059\u308b\u5834\u6240\u304c\u9055\u3063\u3066\u3044\u307e\u3057\u305f\uff0e\n\n\u6559\u8a13\uff1a\u30c6\u30b9\u30c8\u3057\u3088\u3046\uff0e\n", "tags": ["Haskell", "codeiq"]}