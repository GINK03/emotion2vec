{"context": " More than 1 year has passed since last update.\u300e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e Julia \u3067\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u300f \u3067\u3068\u308a\u3042\u3048\u305a\u30b5\u30f3\u30d7\u30eb\u3092\u52d5\u304b\u3059\u3053\u3068\u306b\u6210\u529f\u3057\u305f\u304c\u3001\u81ea\u5206\u306e(Julia\u8a00\u8a9e\u306e)\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f5c\u3063\u305f\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u306b\u306f\u3069\u3046\u3057\u305f\u3089\u826f\u3044\u304b\u3092\u8abf\u3079\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\u51e1\u4f8b\u30fb\u8ef8\u30e9\u30d9\u30eb\u3092\u8868\u793a\u3057\u3001(\u5370\u5237\u7528\u306b)\u80cc\u666f\u8272\uff0f\u524d\u666f\u8272\u3092\u5909\u66f4\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u3063\u3066\u307f\u305f\u3002\n\u4f8b\u306b\u3088\u3063\u3066\u3001Julia \u3067\u6c42\u3081\u305f\u8a08\u7b97\u7d50\u679c\u3092 PyQtGraph \u3067\u30b0\u30e9\u30d5\u8868\u793a\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002(\u74b0\u5883\u3092\u4f5c\u3063\u3066\u662f\u975e\u52d5\u304b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044)\n\nArrowSample2.jl (Julia \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9)\u306f\u3001Python \u306e\u30bd\u30fc\u30b9\u5185\u306e graph_run() \u3068\u3044\u3046\u95a2\u6570\u306b\u914d\u5217\u3092\u6e21\u3059\u3002\u30b0\u30e9\u30d5\u306e\u63cf\u753b\u306f Python \u306b\u304a\u4efb\u305b\u3002y=x2 y=x^2  \u3068 y=2x+50 y=2x+50  \u306e y y  \u3092 \u221210\u2266x\u226610 -10\u2266x\u226610  \u306e\u7bc4\u56f2\u3067\u8a08\u7b97\u3059\u308b(x x  \u306f 0.1 \u523b\u307f 2000\u500b\u306e\u533a\u5206\u306b\u5206\u5272)\u3002\nArrowSample2.py (Python \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9)\u3067\u306f\u3001Julia \u304b\u3089\u6e21\u3055\u308c\u305f\u914d\u5217\u3092\u57fa\u306b\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u3002\nPyCall \u3092\u7528\u3044\u3066 Python \u306e\u30b3\u30fc\u30c9\u3092\u547c\u3073\u51fa\u3059\u969b\u306b\u306f\u3001C:\\julia-0.2.1-win32\\bin \u304c\u30ed\u30fc\u30c9\u30d1\u30b9\u306b\u542b\u307e\u308c\u308b\u306e\u3067\u3001ArrowSample2.jl \u304a\u3088\u3073 ArrowSample2.py \u306e\u4e21\u65b9\u5171\u3092 C:\\julia-0.2.1-win32\\bin \u914d\u4e0b\u306b\u4fdd\u5b58\u3057\u3066\u304a\u304f\u3053\u3068\u3002\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u4fdd\u5b58\u3059\u308b\u969b\u306b\u306f\u6587\u5b57\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306f utf-8 \u306b\u3057\u3066\u304a\u304f\u3053\u3068\u3002\n\u30b5\u30f3\u30d7\u30eb\u3092\u8d77\u52d5\u3059\u308b\u306b\u306f\u3001ArrowSample2.jl (Julia \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9) \u3092\u30a8\u30af\u30b9\u30d7\u30ed\u30fc\u30e9\u30fc\u304b\u3089\u30c0\u30d6\u30eb\u30af\u30ea\u30c3\u30af\u3059\u308b\u3002\n\n\n\u6ce8\u8a18\uff1a\u74b0\u5883\u69cb\u7bc9\u306b\u3064\u3044\u3066\u306f\u3001\u300e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e Julia \u3067\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u300f \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n\nArrowSample2.jl(C\n# -*- coding: utf-8 -*-\n\nusing PyCall\n\n@pyimport ArrowSample2\nx  = linspace(-10, 10, 2001)\ny1 = [ x[i]*x[i] for i=1:length(x) ]\ny2 = [ x[i]*2+50 for i=1:length(x) ]\nArrowSample2.graph_run(x, y1, y2)\n\n\n\nArrowSample2.py(C\n# -*- coding: utf-8 -*-\n\nfrom pyqtgraph.Qt import QtCore, QtGui\nimport pyqtgraph as pg\n\ndef graph_run(plot_data_x, plot_data_y1, plot_data_y2):\n\n    app = QtGui.QApplication([])\n\n    # \u30a2\u30f3\u30c1\u30a8\u30a4\u30ea\u30a2\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3068\u30d7\u30ed\u30c3\u30c8\u304c\u3088\u308a\u7dba\u9e97\u306b\u306a\u308b\n    pg.setConfigOptions(antialias=True)\n    pg.setConfigOption('background', (255, 255, 255)) # \u80cc\u666f\uff1d\u767d\n    pg.setConfigOption('foreground', (0, 0, 0))       # \u524d\u666f\uff1d\u9ed2\n\n    win = pg.GraphicsWindow(title=u'Julia+PyQtGraph \u30b5\u30f3\u30d7\u30eb')\n    win.resize(400,300)\n\n    mypen=pg.mkPen(color=(255, 0, 0), style=QtCore.Qt.DotLine) # \u70b9\u7dda\u3001\u8d64\n\n    p1 = win.addPlot(title=u'\u51e1\u4f8b\u3001\u8ef8\u30e9\u30d9\u30eb\u3001\u80cc\u666f\u8272\uff0f\u524d\u666f\u8272')\n    p1.setLabel('left', u'Y \u8ef8', units=u'\u79d2')\n    p1.setLabel('bottom', u'X \u8ef8', units=u'\uff4d')\n    p1.addLegend()\n    c1 = p1.plot(x=plot_data_x, y=plot_data_y1, pen=(0,0,255), name=u'\u30b0\u30e9\u30d51') # \u5b9f\u7dda\u3001\u9752\n    c2 = p1.plot(x=plot_data_x, y=plot_data_y2, pen=mypen, name=u'\u30b0\u30e9\u30d52')     # \u70b9\u7dda\u3001\u8d64\n    p1.showGrid(x=True, y=True) # \u30b0\u30ea\u30c3\u30c9\u3092\u8868\u793a\n\n    # \u30a2\u30ed\u30fc\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3 (\u30b0\u30e9\u30d51)\n    a1 = pg.CurveArrow(c1)\n    p1.addItem(a1)\n    anim1 = a1.makeAnimation(loop=-1)\n    anim1.start()\n\n    # \u30a2\u30ed\u30fc\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3 (\u30b0\u30e9\u30d52)\n    a2 = pg.CurveArrow(c2)\n    p1.addItem(a2)\n    anim2 = a2.makeAnimation(loop=-1)\n    anim2.start()\n\n    app.exec_()\n\n\n[\u300e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e Julia \u3067\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u300f](http://qiita.com/akmiyoshi/items/a2aca5369c8e3c11ae59) \u3067\u3068\u308a\u3042\u3048\u305a\u30b5\u30f3\u30d7\u30eb\u3092\u52d5\u304b\u3059\u3053\u3068\u306b\u6210\u529f\u3057\u305f\u304c\u3001\u81ea\u5206\u306e(Julia\u8a00\u8a9e\u306e)\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f5c\u3063\u305f\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u306b\u306f\u3069\u3046\u3057\u305f\u3089\u826f\u3044\u304b\u3092\u8abf\u3079\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\u51e1\u4f8b\u30fb\u8ef8\u30e9\u30d9\u30eb\u3092\u8868\u793a\u3057\u3001(\u5370\u5237\u7528\u306b)\u80cc\u666f\u8272\uff0f\u524d\u666f\u8272\u3092\u5909\u66f4\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u3063\u3066\u307f\u305f\u3002\n\u4f8b\u306b\u3088\u3063\u3066\u3001Julia \u3067\u6c42\u3081\u305f\u8a08\u7b97\u7d50\u679c\u3092 PyQtGraph \u3067\u30b0\u30e9\u30d5\u8868\u793a\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002(\u74b0\u5883\u3092\u4f5c\u3063\u3066\u662f\u975e\u52d5\u304b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044)\n\n* ArrowSample2.jl (Julia \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9)\u306f\u3001Python \u306e\u30bd\u30fc\u30b9\u5185\u306e graph_run() \u3068\u3044\u3046\u95a2\u6570\u306b\u914d\u5217\u3092\u6e21\u3059\u3002\u30b0\u30e9\u30d5\u306e\u63cf\u753b\u306f Python \u306b\u304a\u4efb\u305b\u3002$ y=x^2 $ \u3068 $ y=2x+50 $ \u306e $ y $ \u3092 $ -10\u2266x\u226610 $ \u306e\u7bc4\u56f2\u3067\u8a08\u7b97\u3059\u308b($ x $ \u306f <del>0.1 \u523b\u307f</del> 2000\u500b\u306e\u533a\u5206\u306b\u5206\u5272)\u3002\n* ArrowSample2.py (Python \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9)\u3067\u306f\u3001Julia \u304b\u3089\u6e21\u3055\u308c\u305f\u914d\u5217\u3092\u57fa\u306b\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u3002\n* PyCall \u3092\u7528\u3044\u3066 Python \u306e\u30b3\u30fc\u30c9\u3092\u547c\u3073\u51fa\u3059\u969b\u306b\u306f\u3001C:\\julia-0.2.1-win32\\bin \u304c\u30ed\u30fc\u30c9\u30d1\u30b9\u306b\u542b\u307e\u308c\u308b\u306e\u3067\u3001ArrowSample2.jl \u304a\u3088\u3073 ArrowSample2.py \u306e\u4e21\u65b9\u5171\u3092 C:\\julia-0.2.1-win32\\bin \u914d\u4e0b\u306b\u4fdd\u5b58\u3057\u3066\u304a\u304f\u3053\u3068\u3002\n* \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u4fdd\u5b58\u3059\u308b\u969b\u306b\u306f\u6587\u5b57\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306f utf-8 \u306b\u3057\u3066\u304a\u304f\u3053\u3068\u3002\n* \u30b5\u30f3\u30d7\u30eb\u3092\u8d77\u52d5\u3059\u308b\u306b\u306f\u3001ArrowSample2.jl (Julia \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9) \u3092\u30a8\u30af\u30b9\u30d7\u30ed\u30fc\u30e9\u30fc\u304b\u3089\u30c0\u30d6\u30eb\u30af\u30ea\u30c3\u30af\u3059\u308b\u3002\n\n> \u6ce8\u8a18\uff1a\u74b0\u5883\u69cb\u7bc9\u306b\u3064\u3044\u3066\u306f\u3001[\u300e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e Julia \u3067\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u300f](http://qiita.com/akmiyoshi/items/a2aca5369c8e3c11ae59) \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n![0703b.gif](https://qiita-image-store.s3.amazonaws.com/0/32879/68c8dca1-23fd-7c8b-7caa-fba4711ffcd1.gif)\n\n```jl:ArrowSample2.jl(C:\\julia-0.2.1-win32\\bin\u306b\u4fdd\u5b58\u3059\u308b\u3053\u3068)\n# -*- coding: utf-8 -*-\n\nusing PyCall\n\n@pyimport ArrowSample2\nx  = linspace(-10, 10, 2001)\ny1 = [ x[i]*x[i] for i=1:length(x) ]\ny2 = [ x[i]*2+50 for i=1:length(x) ]\nArrowSample2.graph_run(x, y1, y2)\n```\n\n```python:ArrowSample2.py(C:\\julia-0.2.1-win32\\bin\u306b\u4fdd\u5b58\u3059\u308b\u3053\u3068)\n# -*- coding: utf-8 -*-\n\nfrom pyqtgraph.Qt import QtCore, QtGui\nimport pyqtgraph as pg\n\ndef graph_run(plot_data_x, plot_data_y1, plot_data_y2):\n\n    app = QtGui.QApplication([])\n\n    # \u30a2\u30f3\u30c1\u30a8\u30a4\u30ea\u30a2\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3068\u30d7\u30ed\u30c3\u30c8\u304c\u3088\u308a\u7dba\u9e97\u306b\u306a\u308b\n    pg.setConfigOptions(antialias=True)\n    pg.setConfigOption('background', (255, 255, 255)) # \u80cc\u666f\uff1d\u767d\n    pg.setConfigOption('foreground', (0, 0, 0))       # \u524d\u666f\uff1d\u9ed2\n\n    win = pg.GraphicsWindow(title=u'Julia+PyQtGraph \u30b5\u30f3\u30d7\u30eb')\n    win.resize(400,300)\n\n    mypen=pg.mkPen(color=(255, 0, 0), style=QtCore.Qt.DotLine) # \u70b9\u7dda\u3001\u8d64\n\n    p1 = win.addPlot(title=u'\u51e1\u4f8b\u3001\u8ef8\u30e9\u30d9\u30eb\u3001\u80cc\u666f\u8272\uff0f\u524d\u666f\u8272')\n    p1.setLabel('left', u'Y \u8ef8', units=u'\u79d2')\n    p1.setLabel('bottom', u'X \u8ef8', units=u'\uff4d')\n    p1.addLegend()\n    c1 = p1.plot(x=plot_data_x, y=plot_data_y1, pen=(0,0,255), name=u'\u30b0\u30e9\u30d51') # \u5b9f\u7dda\u3001\u9752\n    c2 = p1.plot(x=plot_data_x, y=plot_data_y2, pen=mypen, name=u'\u30b0\u30e9\u30d52')     # \u70b9\u7dda\u3001\u8d64\n    p1.showGrid(x=True, y=True) # \u30b0\u30ea\u30c3\u30c9\u3092\u8868\u793a\n\n    # \u30a2\u30ed\u30fc\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3 (\u30b0\u30e9\u30d51)\n    a1 = pg.CurveArrow(c1)\n    p1.addItem(a1)\n    anim1 = a1.makeAnimation(loop=-1)\n    anim1.start()\n\n    # \u30a2\u30ed\u30fc\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3 (\u30b0\u30e9\u30d52)\n    a2 = pg.CurveArrow(c2)\n    p1.addItem(a2)\n    anim2 = a2.makeAnimation(loop=-1)\n    anim2.start()\n\n    app.exec_()\n```\n", "tags": ["Julia", "Windows", "Mac", "Linux", "Python"]}