{"context": " More than 1 year has passed since last update.\u8a2d\u8a08\u3092\u610f\u8b58\u3057\u305f\u30b3\u30fc\u30c9\u304c\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308b\u70ba\u306b\u3001\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u4fee\u884c\u3057\u307e\u3057\u305f\u3002\n\u4ed6\u306eDesign Pattern\u3082\u3061\u3087\u304f\u3061\u3087\u304f\u51fa\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u524d\u7f6e\u304d\n\n\n\u5897\u88dc\u6539\u8a02\u7248Java\u8a00\u8a9e\u3067\u5b66\u3076\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u5165\u9580\u3092Java\u304b\u3089Python\u306b\u3057\u3066\u307e\u3059\u3002\uff08Python\u306f3.4.2\uff09\ngithub\u306b\u30b3\u30fc\u30c9\u7f6e\u3044\u3066\u3042\u308a\u307e\u3059\uff08\u307e\u3060\u52d5\u304b\u306a\u3044\u3082\u306e\u3082\u3042\u308b\uff09\n\n\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u3092\u3069\u3046\u3044\u3046\u6642\u306b\u3001\u4f55\u3092\u3001\u3069\u3046\u4f7f\u3046\u306e\u304b\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u304c\u4e00\u5148\u305a\u306e\u76ee\u6a19\u3002\n\uff08Java\u3068\u3044\u3046\u304b\u9759\u7684\u578b\u4ed8\u8a00\u8a9e\u306f\u521d\u3081\u3066\u3067\u3001\u4e14\u3064python\u6b74\u3082\u305d\u3093\u306a\u306b\u9577\u304f\u306a\u3044\u306e\u3067\u3001Pythonista\u307d\u3063\u304f\u306a\u3044\u3068\u3053\u308d\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u3054\u6307\u6458\u3054\u3056\u3044\u307e\u3057\u305f\u3089\u3054\u6559\u6388\u304f\u3060\u3055\u3044\u3002\uff09\n\u4eca\u56de\u306f\u3001\u751f\u6210\u306b\u95a2\u3059\u308b\u30d1\u30bf\u30fc\u30f3FactoryMethod\u3002\n\nFactoryMethod\u3068\u306f\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u6210\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3068\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u751f\u6210\u3059\u308b\u5f79\u5272\u308a\u3092\u5206\u3051\u3066\u3001\u4ed6\u306e\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u30b5\u30d6\u30af\u30e9\u30b9\u3067\u4e0a\u66f8\u304d\u53ef\u80fd\u306a\u81ea\u5206\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u7f6e\u304d\u63db\u3048\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u751f\u6210\u3092\u30b5\u30d6\u30af\u30e9\u30b9\u306b\u4efb\u305b\u3066\u3001\u30af\u30e9\u30b9\u306e\u518d\u5229\u7528\u6027\u3092\u9ad8\u3081\u308b\u3002\n\n\u6982\u8981\n\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u8eab\u5206\u8a3c\u660e\u66f8\u30ab\u30fc\u30c9\uff08ID\u30ab\u30fc\u30c9\uff09\u3092\u4f5c\u308b\u5de5\u5834\u3092\u984c\u6750\u3068\u3057\u305f\u3082\u306e\u3067\u3059\u3002\u3053\u3053\u3067\u306f4\u3064\u306e\u30af\u30e9\u30b9\u304c\u767b\u5834\u3057\u307e\u3059\u3002\nProduct\u30af\u30e9\u30b9\u3068Factory\u30af\u30e9\u30b9\u306f\u3001Framework\u3068\u3044\u3046\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u5c5e\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e2\u3064\u306e\u30af\u30e9\u30b9\u304c\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u306e\u305f\u3081\u306e\u67a0\u7d44\u307f\uff08\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\uff09\u306e\u5f79\u5272\u3092\u679c\u305f\u3057\u307e\u3059\u3002\nID\u30af\u30e9\u30b9\u3068IDCardFactory\u30af\u30e9\u30b9\u306f\u3001\u5b9f\u969b\u306e\u8089\u4ed8\u3051\u3092\u884c\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306fIDCard\u3068\u3044\u3046\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u5c5e\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5168\u4f53\u306e\u30af\u30e9\u30b9\u56f3\n\n\nFramework/factory.py\nfrom abc import ABCMeta, abstractmethod\n\n\nclass Factory(metaclass=ABCMeta):\n\n    @abstractmethod\n    def _create_product(self, owner):\n        pass\n\n    @abstractmethod\n    def _register_product(self, product):\n        pass\n\n    def create(self, owner):\n        self.__p = self._create_product(owner)\n        self._register_product(self.__p)\n        return self.__p\n\n\n\u3053\u3053\u3067\u306fTemplate Method\u30d1\u30bf\u30fc\u30f3\u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\u3002Template Method\u30d1\u30bf\u30fc\u30f3\u306f\u300c\u30b9\u30fc\u30d1\u30fc\u30af\u30e9\u30b9\u3067\u51e6\u7406\u306e\u5927\u304d\u306a\u67a0\u7d44\u307f\u3092\u6c7a\u3081\u3066\u304a\u3044\u3066\u3001\u30b5\u30d6\u30af\u30e9\u30b9\u3067\u305d\u306e\u5177\u4f53\u7684\u51e6\u7406\u3092\u6c7a\u3081\u308b\u300d\u3053\u3068\u3002\n\u3053\u306e\u30af\u30e9\u30b9\u306f\u51e6\u7406\u306e\u5927\u304d\u306a\u67a0\u7d44\u307f\u3092\u898f\u5b9a\u3057\u3001\u5177\u4f53\u7684\u306a\u51e6\u7406\u304c\u6c7a\u307e\u3063\u3066\u3044\u306a\u3044create_product\u3068register_product\u306e\u4e21\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\u3092\u30b5\u30d6\u30af\u30e9\u30b9\u304c\u62c5\u3046\u3002\ncreate\u30e1\u30bd\u30c3\u30c9\u3067\u306fcreate_product\u3068register_product\u306e\u4e21\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u300c\u88fd\u54c1\u300d\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u3066\u3044\u308b\u3002\nFactory Method\u30d1\u30bf\u30fc\u30f3\u3067\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u306bTemplate Method\u30d1\u30bf\u30fc\u30f3\u304c\u4f7f\u308f\u308c\u308b\u3002\n\n\nFramework/product.py\nfrom abc import ABCMeta, abstractmethod\n\nclass Product(metaclass=ABCMeta):\n\n    @abstractmethod\n    def use(self):\n        pass\n\n\n\u62bd\u8c61\u30e1\u30bd\u30c3\u30c9use\u306e\u5ba3\u8a00\u3060\u3051\u3002\n\n\nIDCard/idcard.py\nfrom Framework.product import Product\n\n\nclass IDCard(Product):\n\n    def __init__(self, owner):\n        self.__owner = owner\n        print(self.__owner + '\u306e\u30ab\u30fc\u30c9\u3092\u4f5c\u6210\u3057\u307e\u3059')\n\n    def use(self):\n        print(self.__owner + '\u306e\u30ab\u30fc\u30c9\u3092\u4f7f\u3044\u307e\u3059')\n\n    def get_owner(self):\n        return self.__owner\n\n\nProduct\u30af\u30e9\u30b9\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3068\u3057\u3066\u5b9a\u7fa9\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f5c\u308a\u3001use\u30e1\u30bd\u30c3\u30c9\u3068get_owner\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3002\n\n\nIDCard/idcard_factory.py\nfrom Framework.factory import Factory\nfrom IDCard.idcard import IDCard\n\n\nclass IDCardFactory(Factory):\n\n    def __init__(self):\n        self.__registed = []\n\n    def _create_product(self, owner):\n        return IDCard(owner)\n\n    def _register_product(self, product):\n        self.__registed.append(product.get_owner())\n\n\ncreate_product\u3068register_product\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3002\ncreate_product\u30e1\u30bd\u30c3\u30c9\u306fIDCard\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u3002\nregister_product\u30e1\u30bd\u30c3\u30c9\u306fget_owner\u30e1\u30bd\u30c3\u30c9\u3067\u5f97\u305fIDCard\u306eowner\u3092\u30ea\u30b9\u30c8owners\u306b\u8ffd\u52a0\u3057\u3066\u3044\u308b\u3002\n\n\nmain.py\nfrom IDCard.idcard_factory import IDCardFactory\n\n\ndef main():\n    factory = IDCardFactory()\n    card1 = factory.create('\u7d50\u57ce\u6d69')\n    card2 = factory.create('\u3068\u3080\u3089')\n    card3 = factory.create('\u4f50\u85e4\u82b1\u5b50')\n\n    card1.use()\n    card2.use()\n    card3.use()\n\nif __name__ == '__main__':\n    main()\n\n\n\u51fa\u529b\u7d50\u679c\n\n\u7d50\u57ce\u6d69\u306e\u30ab\u30fc\u30c9\u3092\u4f5c\u6210\u3057\u307e\u3059\n\u3068\u3080\u3089\u306e\u30ab\u30fc\u30c9\u3092\u4f5c\u6210\u3057\u307e\u3059\n\u4f50\u85e4\u82b1\u5b50\u306e\u30ab\u30fc\u30c9\u3092\u4f5c\u6210\u3057\u307e\u3059\n\u7d50\u57ce\u6d69\u306e\u30ab\u30fc\u30c9\u3092\u4f7f\u3044\u307e\u3059\n\u3068\u3080\u3089\u306e\u30ab\u30fc\u30c9\u3092\u4f7f\u3044\u307e\u3059\n\u4f50\u85e4\u82b1\u5b50\u306e\u30ab\u30fc\u30c9\u3092\u4f7f\u3044\u307e\u3059\n\n\n\u307e\u3068\u3081\n\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3060\u3051\u898f\u5b9a\u3057\u3066\u3001\u30b5\u30d6\u30af\u30e9\u30b9\u304c\u3069\u3061\u3089\u306e\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b\u304b\u4efb\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u5185\u90e8\u306e\u5b9f\u88c5\u306f\u6c17\u306b\u305b\u305a\u3001\u5916\u90e8\u304b\u3089\u30e1\u30bd\u30c3\u30c9\u306b\u30a2\u30af\u30bb\u30b9\u3092\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u53c2\u8003\n\n\u30b5\u30eb\u3067\u3082\u308f\u304b\u308b \u9006\u5f15\u304d\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\nTECHSCORE\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\nWikipedia Software design pattern\nWikipedia \u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\nRuby 2.0.0\u3067\u5b66\u3076\u300114\u500b\u306e\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u3092\u4f5c\u308a\u307e\u3057\u305f[GoF][Design Pattern]\nRuby\u306b\u3088\u308b\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f35\u539f\u5247\n\n\u8a2d\u8a08\u3092\u610f\u8b58\u3057\u305f\u30b3\u30fc\u30c9\u304c\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308b\u70ba\u306b\u3001\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u4fee\u884c\u3057\u307e\u3057\u305f\u3002\n\u4ed6\u306eDesign Pattern\u3082\u3061\u3087\u304f\u3061\u3087\u304f\u51fa\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n## \u524d\u7f6e\u304d\n* [\u5897\u88dc\u6539\u8a02\u7248Java\u8a00\u8a9e\u3067\u5b66\u3076\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u5165\u9580](http://www.hyuki.com/dp/)\u3092Java\u304b\u3089Python\u306b\u3057\u3066\u307e\u3059\u3002\uff08Python\u306f3.4.2\uff09\n* [github\u306b\u30b3\u30fc\u30c9\u7f6e\u3044\u3066\u3042\u308a\u307e\u3059\uff08\u307e\u3060\u52d5\u304b\u306a\u3044\u3082\u306e\u3082\u3042\u308b\uff09](https://github.com/Nirperm/Design-Pattern)\n\n\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u3092\u3069\u3046\u3044\u3046\u6642\u306b\u3001\u4f55\u3092\u3001\u3069\u3046\u4f7f\u3046\u306e\u304b\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u304c\u4e00\u5148\u305a\u306e\u76ee\u6a19\u3002\n\uff08Java\u3068\u3044\u3046\u304b\u9759\u7684\u578b\u4ed8\u8a00\u8a9e\u306f\u521d\u3081\u3066\u3067\u3001\u4e14\u3064python\u6b74\u3082\u305d\u3093\u306a\u306b\u9577\u304f\u306a\u3044\u306e\u3067\u3001Pythonista\u307d\u3063\u304f\u306a\u3044\u3068\u3053\u308d\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u3054\u6307\u6458\u3054\u3056\u3044\u307e\u3057\u305f\u3089\u3054\u6559\u6388\u304f\u3060\u3055\u3044\u3002\uff09\n\n\u4eca\u56de\u306f\u3001\u751f\u6210\u306b\u95a2\u3059\u308b\u30d1\u30bf\u30fc\u30f3FactoryMethod\u3002\n\n## FactoryMethod\u3068\u306f\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u6210\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3068\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u751f\u6210\u3059\u308b\u5f79\u5272\u308a\u3092\u5206\u3051\u3066\u3001\u4ed6\u306e\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u30b5\u30d6\u30af\u30e9\u30b9\u3067\u4e0a\u66f8\u304d\u53ef\u80fd\u306a\u81ea\u5206\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u7f6e\u304d\u63db\u3048\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u751f\u6210\u3092\u30b5\u30d6\u30af\u30e9\u30b9\u306b\u4efb\u305b\u3066\u3001\u30af\u30e9\u30b9\u306e\u518d\u5229\u7528\u6027\u3092\u9ad8\u3081\u308b\u3002\n\n## \u6982\u8981\n\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u8eab\u5206\u8a3c\u660e\u66f8\u30ab\u30fc\u30c9\uff08ID\u30ab\u30fc\u30c9\uff09\u3092\u4f5c\u308b\u5de5\u5834\u3092\u984c\u6750\u3068\u3057\u305f\u3082\u306e\u3067\u3059\u3002\u3053\u3053\u3067\u306f4\u3064\u306e\u30af\u30e9\u30b9\u304c\u767b\u5834\u3057\u307e\u3059\u3002\n\nProduct\u30af\u30e9\u30b9\u3068Factory\u30af\u30e9\u30b9\u306f\u3001Framework\u3068\u3044\u3046\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u5c5e\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e2\u3064\u306e\u30af\u30e9\u30b9\u304c\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u306e\u305f\u3081\u306e\u67a0\u7d44\u307f\uff08\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\uff09\u306e\u5f79\u5272\u3092\u679c\u305f\u3057\u307e\u3059\u3002\n\nID\u30af\u30e9\u30b9\u3068IDCardFactory\u30af\u30e9\u30b9\u306f\u3001\u5b9f\u969b\u306e\u8089\u4ed8\u3051\u3092\u884c\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306fIDCard\u3068\u3044\u3046\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u5c5e\u3057\u3066\u3044\u307e\u3059\u3002\n\n## \u5168\u4f53\u306e\u30af\u30e9\u30b9\u56f3\n![](https://cacoo.com/diagrams/wV2XBBp0H1EL0YNz-A1B08.png?t=1432178926483)\n\n\n```Framework/factory.py\nfrom abc import ABCMeta, abstractmethod\n\n\nclass Factory(metaclass=ABCMeta):\n\n    @abstractmethod\n    def _create_product(self, owner):\n        pass\n\n    @abstractmethod\n    def _register_product(self, product):\n        pass\n\n    def create(self, owner):\n        self.__p = self._create_product(owner)\n        self._register_product(self.__p)\n        return self.__p\n```\n[\u3053\u3053\u3067\u306fTemplate Method\u30d1\u30bf\u30fc\u30f3\u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\u3002](http://qiita.com/nirperm/items/9651c1e0b29cdc31f064)Template Method\u30d1\u30bf\u30fc\u30f3\u306f\u300c\u30b9\u30fc\u30d1\u30fc\u30af\u30e9\u30b9\u3067\u51e6\u7406\u306e\u5927\u304d\u306a\u67a0\u7d44\u307f\u3092\u6c7a\u3081\u3066\u304a\u3044\u3066\u3001\u30b5\u30d6\u30af\u30e9\u30b9\u3067\u305d\u306e\u5177\u4f53\u7684\u51e6\u7406\u3092\u6c7a\u3081\u308b\u300d\u3053\u3068\u3002\n\n\u3053\u306e\u30af\u30e9\u30b9\u306f\u51e6\u7406\u306e\u5927\u304d\u306a\u67a0\u7d44\u307f\u3092\u898f\u5b9a\u3057\u3001\u5177\u4f53\u7684\u306a\u51e6\u7406\u304c\u6c7a\u307e\u3063\u3066\u3044\u306a\u3044create_product\u3068register_product\u306e\u4e21\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\u3092\u30b5\u30d6\u30af\u30e9\u30b9\u304c\u62c5\u3046\u3002\n\ncreate\u30e1\u30bd\u30c3\u30c9\u3067\u306fcreate_product\u3068register_product\u306e\u4e21\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u300c\u88fd\u54c1\u300d\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u3066\u3044\u308b\u3002\nFactory Method\u30d1\u30bf\u30fc\u30f3\u3067\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u306bTemplate Method\u30d1\u30bf\u30fc\u30f3\u304c\u4f7f\u308f\u308c\u308b\u3002\n<br>\n\n```Framework/product.py\nfrom abc import ABCMeta, abstractmethod\n\nclass Product(metaclass=ABCMeta):\n\n    @abstractmethod\n    def use(self):\n        pass\n```\n\u62bd\u8c61\u30e1\u30bd\u30c3\u30c9use\u306e\u5ba3\u8a00\u3060\u3051\u3002\n<br>\n\n```IDCard/idcard.py\nfrom Framework.product import Product\n\n\nclass IDCard(Product):\n\n    def __init__(self, owner):\n        self.__owner = owner\n        print(self.__owner + '\u306e\u30ab\u30fc\u30c9\u3092\u4f5c\u6210\u3057\u307e\u3059')\n\n    def use(self):\n        print(self.__owner + '\u306e\u30ab\u30fc\u30c9\u3092\u4f7f\u3044\u307e\u3059')\n\n    def get_owner(self):\n        return self.__owner\n```\nProduct\u30af\u30e9\u30b9\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3068\u3057\u3066\u5b9a\u7fa9\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f5c\u308a\u3001use\u30e1\u30bd\u30c3\u30c9\u3068get_owner\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3002\n<br>\n\n```IDCard/idcard_factory.py\nfrom Framework.factory import Factory\nfrom IDCard.idcard import IDCard\n\n\nclass IDCardFactory(Factory):\n\n    def __init__(self):\n        self.__registed = []\n\n    def _create_product(self, owner):\n        return IDCard(owner)\n\n    def _register_product(self, product):\n        self.__registed.append(product.get_owner())\n```\n\ncreate_product\u3068register_product\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3002\ncreate_product\u30e1\u30bd\u30c3\u30c9\u306fIDCard\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u3002\nregister_product\u30e1\u30bd\u30c3\u30c9\u306fget_owner\u30e1\u30bd\u30c3\u30c9\u3067\u5f97\u305fIDCard\u306eowner\u3092\u30ea\u30b9\u30c8owners\u306b\u8ffd\u52a0\u3057\u3066\u3044\u308b\u3002\n<br>\n\n```main.py\nfrom IDCard.idcard_factory import IDCardFactory\n\n\ndef main():\n    factory = IDCardFactory()\n    card1 = factory.create('\u7d50\u57ce\u6d69')\n    card2 = factory.create('\u3068\u3080\u3089')\n    card3 = factory.create('\u4f50\u85e4\u82b1\u5b50')\n\n    card1.use()\n    card2.use()\n    card3.use()\n\nif __name__ == '__main__':\n    main()\n```\n\n\u51fa\u529b\u7d50\u679c\n```\n\u7d50\u57ce\u6d69\u306e\u30ab\u30fc\u30c9\u3092\u4f5c\u6210\u3057\u307e\u3059\n\u3068\u3080\u3089\u306e\u30ab\u30fc\u30c9\u3092\u4f5c\u6210\u3057\u307e\u3059\n\u4f50\u85e4\u82b1\u5b50\u306e\u30ab\u30fc\u30c9\u3092\u4f5c\u6210\u3057\u307e\u3059\n\u7d50\u57ce\u6d69\u306e\u30ab\u30fc\u30c9\u3092\u4f7f\u3044\u307e\u3059\n\u3068\u3080\u3089\u306e\u30ab\u30fc\u30c9\u3092\u4f7f\u3044\u307e\u3059\n\u4f50\u85e4\u82b1\u5b50\u306e\u30ab\u30fc\u30c9\u3092\u4f7f\u3044\u307e\u3059\n```\n\n##\u307e\u3068\u3081\n\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3060\u3051\u898f\u5b9a\u3057\u3066\u3001\u30b5\u30d6\u30af\u30e9\u30b9\u304c\u3069\u3061\u3089\u306e\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b\u304b\u4efb\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u5185\u90e8\u306e\u5b9f\u88c5\u306f\u6c17\u306b\u305b\u305a\u3001\u5916\u90e8\u304b\u3089\u30e1\u30bd\u30c3\u30c9\u306b\u30a2\u30af\u30bb\u30b9\u3092\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n# \u53c2\u8003\n* [\u30b5\u30eb\u3067\u3082\u308f\u304b\u308b \u9006\u5f15\u304d\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3](http://www.nulab.co.jp/designPatterns/designPatterns1/designPatterns1-2.html)\n* [TECHSCORE\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3](http://www.techscore.com/tech/DesignPattern/foundation/foundation1.html/)\n* [Wikipedia Software design pattern]([http://en.wikipedia.org/wiki/Software_design_pattern)\n* [Wikipedia \u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3](http://goo.gl/lRi5)\n* [Ruby 2.0.0\u3067\u5b66\u3076\u300114\u500b\u306e\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u3092\u4f5c\u308a\u307e\u3057\u305f[GoF][Design Pattern]](http://morizyun.github.io/blog/ruby-design-pattern-matome-mokuzi/)\n* [Ruby\u306b\u3088\u308b\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f35\u539f\u5247](http://qiita.com/kidach1/items/4b63de9ad5a97726c50c)\n", "tags": ["Python", "DesignPatterns", "\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3"]}