{"context": " More than 1 year has passed since last update.\u30bf\u30a4\u30c8\u30eb\u306e\u901a\u308a\u3002\n\u3042\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u914d\u4e0b\u306b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u3044\u304f\u3064\u304b\u3042\u3063\u3066\u3001\n\u305d\u306e\u4e2d\u3067\u4e00\u756a\u30b5\u30a4\u30ba\u304c\u5927\u304d\u3044\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u77e5\u308a\u305f\u304b\u3063\u305f\u308a\u3057\u305f\u3044\u6642\u3068\u304b\u3002\n\ndef fileSize = { size, file -> \n  if (file.isDirectory()) {\n    file.eachFile {\n      size += owner.call(0, it)\n    }\n  } else {\n    size += file.size()\n  }\n  size\n}\n\ndef fileListSize = { path ->\n  assert path != null\n  assert path.class != String.getClass()\n\n  def file = new File(path)\n\n  assert file.exists()\n\n  def map = [:]\n  if (file.isDirectory()) {\n    file.eachFile {\n      map.put(it.name, fileSize(0,it))\n    }\n  } else {\n    map.put(file.name, file.size())\n  }\n  map\n}\n\n/*\n\u30c6\u30b9\u30c8\u7528\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210\ntest\n\u251ca\n\u2502\u2514aa.txt // 5byte\n\u251cb\n\u2502\u251cba.txt // 5byte\n\u2502\u2514bb.txt // 6byte\n\u251cc\n\u2502\u251cca\n\u2502\u2502\u2514caa.txt // 5yte\n\u2502\u251ccb\n\u2502\u2502\u251ccca.txt // 5byte\n\u2502\u2502\u2514ccb.txt // 6byte\n\u2502\u251ccc.txt // 5byte\n\u2502\u251ccd.txt // 6byte\n\u2502\u2514ce.txt // 7byte\n\u2514text.txt // 5byte\n*/\nassert fileSize(0, new File(/C:\\work\\filesize\\test\\text.txt/)) == 5\nassert fileSize(0, new File(/C:\\work\\filesize\\test\\a/)) == 5 \nassert fileSize(0, new File(/C:\\work\\filesize\\test\\b/)) == 11\nassert fileSize(0, new File(/C:\\work\\filesize\\test\\c/)) == 34\n\nassert fileListSize(/C:\\work\\filesize\\test\\text.txt/) == [\"text.txt\":5]\nassert fileListSize(/C:\\work\\filesize\\test/) == [\"a\":5, \"b\":11, \"c\":34, \"text.txt\":5]\n\n\u3082\u3063\u3068\u3044\u3044\u66f8\u304d\u65b9\u3042\u308a\u305d\u3046\u3060\u3051\u3069\u3001\u3044\u3044\u6848\u304c\u6d6e\u304b\u3070\u305a\u3002\u3002\u3002\n\u30bf\u30a4\u30c8\u30eb\u306e\u901a\u308a\u3002\n\u3042\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u914d\u4e0b\u306b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u3044\u304f\u3064\u304b\u3042\u3063\u3066\u3001\n\u305d\u306e\u4e2d\u3067\u4e00\u756a\u30b5\u30a4\u30ba\u304c\u5927\u304d\u3044\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u77e5\u308a\u305f\u304b\u3063\u305f\u308a\u3057\u305f\u3044\u6642\u3068\u304b\u3002\n\n``` groovy\n\ndef fileSize = { size, file -> \n  if (file.isDirectory()) {\n    file.eachFile {\n      size += owner.call(0, it)\n    }\n  } else {\n    size += file.size()\n  }\n  size\n}\n\ndef fileListSize = { path ->\n  assert path != null\n  assert path.class != String.getClass()\n  \n  def file = new File(path)\n  \n  assert file.exists()\n  \n  def map = [:]\n  if (file.isDirectory()) {\n    file.eachFile {\n      map.put(it.name, fileSize(0,it))\n    }\n  } else {\n    map.put(file.name, file.size())\n  }\n  map\n}\n\n/*\n\u30c6\u30b9\u30c8\u7528\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210\ntest\n\u251ca\n\u2502\u2514aa.txt // 5byte\n\u251cb\n\u2502\u251cba.txt // 5byte\n\u2502\u2514bb.txt // 6byte\n\u251cc\n\u2502\u251cca\n\u2502\u2502\u2514caa.txt // 5yte\n\u2502\u251ccb\n\u2502\u2502\u251ccca.txt // 5byte\n\u2502\u2502\u2514ccb.txt // 6byte\n\u2502\u251ccc.txt // 5byte\n\u2502\u251ccd.txt // 6byte\n\u2502\u2514ce.txt // 7byte\n\u2514text.txt // 5byte\n*/\nassert fileSize(0, new File(/C:\\work\\filesize\\test\\text.txt/)) == 5\nassert fileSize(0, new File(/C:\\work\\filesize\\test\\a/)) == 5 \nassert fileSize(0, new File(/C:\\work\\filesize\\test\\b/)) == 11\nassert fileSize(0, new File(/C:\\work\\filesize\\test\\c/)) == 34\n\nassert fileListSize(/C:\\work\\filesize\\test\\text.txt/) == [\"text.txt\":5]\nassert fileListSize(/C:\\work\\filesize\\test/) == [\"a\":5, \"b\":11, \"c\":34, \"text.txt\":5]\n```\n\n\u3082\u3063\u3068\u3044\u3044\u66f8\u304d\u65b9\u3042\u308a\u305d\u3046\u3060\u3051\u3069\u3001\u3044\u3044\u6848\u304c\u6d6e\u304b\u3070\u305a\u3002\u3002\u3002", "tags": ["Groovy"]}