{"tags": ["JavaScript", "es2015"], "context": "\n\n\u6982\u8981\n\n\n\u4ed6\u306e\u65b9\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u76f4\u3057\u305f\u3002\nclass\u69cb\u6587\u3092\u4f7f\u3044\u3001\u5927\u5e45\u306b\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u3002\n\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n\u5b9f\u884c\u30b5\u30f3\u30d7\u30eb\n\n<div class=\"form-group\">\n  <input type='text' id=\"keyword\" class=\"form-control\" placeholder=\"\u597d\u304d\u306a\u30d5\u30eb\u30fc\u30c4\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\">\n  <button type=\"button\" id=\"submit\" class=\"btn\">\u691c\u7d22</button>\n</div>\n<ul id=\"list\"></ul>\n\n/* twitter-bootstrap\u4f7f\u7528 */\n\n#keyword {\n  display: inline-block;\n  width: 50%;\n}\n#submit {\n  display: inline-block;\n  background-color: #6495ed;\n  color: #fff;\n  padding: 5.5px 20px;\n  vertical-align: top;\n}\n\n#list {\n  padding: 0;\n  margin: 0 auto;\n  width: 50%;\n  list-style: none;\n}\n\nli {\n  border-radius: 5px;\n  box-shadow: 0.5px 0.5px 1px 1px rgba(0,0,0,0.1) inset;\n  background-color: #eee;\n  margin: 10px;\n  padding: 10px;\n}\n\n.form-group {\n  width: 75%;\n  margin: 20px auto;\n  text-align: center;\n}\n\n\nconst fruits = ['apple', 'apricot', 'avocado', 'blueberry', 'cherry', 'coconut', 'cranberry', 'dragonfruit', 'durian', 'grape', 'grapefruit', 'guava', 'kiwi fruit', 'lemon', 'lime', 'lychee', 'mango', 'melon', 'watermelon', 'miracle fruit', 'orange', 'bloodorange', 'clementine', 'mandarine', 'tangerine', 'papaya', 'passionfruit', 'peach', 'pear', 'persimmon', 'physalis', 'plum/prune', 'pineapple', 'pomegranate', 'raspberry', 'rambutan', 'star fruit', 'strawberry'];\n\nclass IncrementalSearch {\n  constructor(option) {\n    const { input, result, data, notFound } = option;\n\n    this.data = data;\n    this.$input = $(input);\n    this.$result = $(result);\n    this.preVal = '';\n    this.notFound = notFound || 'not found';\n    this.bindEvent();\n  }\n  bindEvent() {\n    this.$input.on('keyup', () => this.suggestList());\n  }\n  makeTopMatchStr(str) {\n    return '^' + str;\n  }\n  makeReg(str){\n    const regStr = str.split('').map(this.makeTopMatchStr).join('|');\n\n    return new RegExp(regStr);\n  }\n  filterData(str) {\n    const reg = this.makeReg(str);\n\n    return this.data.filter(v => reg.test(v));\n  }\n  appendList(data) {\n    const $list = data.map(word => $('<li />').addClass('list').text(word));\n\n    this.$result.append($list);\n  }\n  clearList() {\n    this.$result.html('');\n  }\n  suggestList() {\n    const val = this.$input.val().trim().replace(/\\s/g, '');\n\n    if (val === this.preVal) {\n      return;\n    }\n\n    this.clearList();\n    this.preVal = val;\n\n    if (val.length === 0) {\n      return;\n    }\n\n    const matchData = this.filterData(val),\n      result = matchData.length > 0 ? matchData : [this.notFound];\n\n    this.appendList(result);\n  }\n};\n\n$(function() {\n  new IncrementalSearch({\n    input: '#keyword',\n    result: '#list',\n    data: fruits,\n    notFound: '\u4e00\u81f4\u3059\u308b\u679c\u7269\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f'\n  });\n});\n\n\n\u89e3\u8aac\n\n\u5206\u5272\u4ee3\u5165\n\n\u9023\u60f3\u914d\u5217\u304b\u3089\u5024\u3092\u52b9\u7387\u7684\u306b\u53d6\u308a\u51fa\u3057\u3001\u30ad\u30fc\u540d\u3068\u540c\u3058\u5909\u6570\u306b\u305d\u308c\u305e\u308c\u4ee3\u5165\u3002\n\n// \u5b9f\u884c\u30b3\u30fc\u30c9\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u8a2d\u5b9a\nnew IncrementalSearch({\n  input: '#keyword',\n  result: '#list',\n  data: fruits,\n  notFound: '\u4e00\u81f4\u3059\u308b\u679c\u7269\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f'\n});\n\n// \u30af\u30e9\u30b9\u8a2d\u5b9a\nclass IncrementalSearch {\n  constructor(option) {\n    const { input, result, data, notFound } = option;\n\n\n\u7a7a\u767d\u306e\u524a\u9664\n\nreplace + \u6b63\u898f\u8868\u73fe\u3067\u7a7a\u767d\u6307\u5b9a\uff08\\s\uff09\u3002\n\u3053\u308c\u3067\u5168\u90e8\u6d88\u305b\u308b\u306e\u3060\u304c\u3001\u30cd\u30a4\u30c6\u30a3\u30d6\u30e1\u30bd\u30c3\u30c9\u306b\u524d\u5f8c\u306e\u7a7a\u767d\u3092\u6d88\u3059trim()\u304c\u3042\u308b\u306e\u3067\u3001\u6700\u521d\u306b\u305d\u308c\u3092\u3057\u305f\u4e0a\u3067\u3001\u5165\u529b\u6587\u5b57\u5217\u306e\u9593\u306b\u6b8b\u3063\u305f\u7a7a\u767d\u3092\u6d88\u3059\u611f\u3058\u306b\u3002\n\nconst val = this.$input.val().trim().replace(/\\s/g, '');\n\n\n\u6b63\u898f\u8868\u73fe\u6587\u5b57\u5217\u306e\u4f5c\u6210\n\n\nab\u3068\u3044\u3046\u6587\u5b57\u5217 \u2192 /^a|^b/\u3068\u3044\u3046\u6b63\u898f\u8868\u73fe\u306b\u5909\u63db\u3002\n\n\n\u5148\u982d\u4e00\u81f4\uff08^a ^b\uff09\u3092 or(|) \u3067\u7e4b\u3044\u3067\u3044\u304f\u5f62\u3002 \n\n\n\n^a|^b\u3068\u3044\u3046\u6587\u5b57\u5217\u307e\u3067\u4f5c\u3063\u3066\u3001 \u305d\u306e\u6587\u5b57\u5217\u3092\u5f15\u6570\u306bnew RegExp()\u3059\u308b\u3068 \u6b63\u898f\u8868\u73fe\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e/^a|^b/\u306b\u306a\u308b\u3002\n\nmakeTopMatchStr(str) {\n  return '^' + str;\n}\nmakeReg(str){\n  const regStr = str.split('').map(this.makeTopMatchStr).join('|');\n\n  return new RegExp(regStr);\n}\n\n\n\u914d\u5217\u304b\u3089\u6761\u4ef6\u306b\u5408\u81f4\u3059\u308b\u8981\u7d20\u3092\u62bd\u51fa\n\nfilter\u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9 \uff0b \u6b63\u898f\u8868\u73fe\u306b\u3088\u308b\u30de\u30c3\u30c1\u30f3\u30b0\u3002\n\u6b63\u898f\u8868\u73fe\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u6301\u3064test\u30e1\u30bd\u30c3\u30c9\u3092\u5229\u7528\u3059\u308b\u3068\u3001\u7d50\u679c\u304ctrue, false\u3067\u8fd4\u3063\u3066\u304f\u308b\u3002\nfilter\u5185\u3067\u914d\u5217\u5185\u306e\u8981\u7d20\u3092\u5f15\u6570\u306btest\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3048\u3070\u3001\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3082\u306e\uff08true\u3092\u8fd4\u3059\u8981\u7d20\uff09\u3060\u3051\u3092\u62bd\u51fa\u3067\u304d\u308b\uff08!\u3092\u4f7f\u3048\u3070\u9006\u3082\u53ef\u80fd\uff09\u3002\n\nfilterData(str) {\n  const reg = this.makeReg(str);\n\n  return this.data.filter(v => reg.test(v));\n}\n\n\n\u30a2\u30da\u30f3\u30c9\n\n\u901a\u5e38\u306e\u914d\u5217\u3092\u5143\u306bDOM\u914d\u5217\u3092\u4f5c\u6210\u3002\n\u51fa\u6765\u4e0a\u304c\u3063\u305fDOM\u914d\u5217\u3092\u4e38\u3054\u3068append\u3059\u308b\u3002\n\nappendList(data) {\n  const $list = data.map(word => $('<li />').addClass('list').text(word));\n\n  this.$result.append($list);\n}\n\n\n\u51e6\u7406\u306e\u4e2d\u65ad\n\nif\u6587\u3068return\u3092\u5229\u7528\u3057\u3066\u3001\u51e6\u7406\u3092\u9014\u4e2d\u3067\u7d42\u308f\u3089\u305b\u308b\u3002\nreturn\u306e\u5f8c\u306e\u30b3\u30fc\u30c9\u306f\u3001\u305d\u308c\u307e\u3067\u306e\u4e2d\u65ad\u6761\u4ef6\u3092\u5168\u3066\u6e80\u305f\u3055\u306a\u304b\u3063\u305f\u5834\u5408\u306e\u307f\u5b9f\u884c\u3055\u308c\u308b\u3002\n\n// \u7121\u6761\u4ef6\u3067\u5b9f\u884c\u3059\u308b\n\nif (val === this.preVal) {\n      return;\n}\n\n// val !== this.preVal \u306a\u3089\u5b9f\u884c\n\nif (val.length === 0) {\n   return;\n}\n\n// val !== this.preVal \u304b\u3064 val.length > 0 \u306e\u5834\u5408\u306b\u5b9f\u884c\n\n\n\u5916\u90e8\u30ea\u30f3\u30af\n\njavaScript(jQuery)\u306e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30bf\u30eb\u30b5\u30fc\u30c1\u3067\u3001\u5168\u3066\u306e\u884c\u306b\u89e3\u8aac\u3092\u3064\u3051\u3066\u307f\u305f\u3002\nRegExp - MDN\nRegExp.prototype.test()\n\n# \u6982\u8981\n- [\u4ed6\u306e\u65b9\u306e\u30b3\u30fc\u30c9](http://qiita.com/Kohei_Kishimoto0214/items/2f08bf430a34023ef01d#comment-ab2b5d457ed2207a8b77)\u3092\u66f8\u304d\u76f4\u3057\u305f\u3002\n- class\u69cb\u6587\u3092\u4f7f\u3044\u3001\u5927\u5e45\u306b\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u3002\n\n# \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n- [\u5b9f\u884c\u30b5\u30f3\u30d7\u30eb](http://codepen.io/yama-t/pen/JErGNd)\n\n```html\n<div class=\"form-group\">\n  <input type='text' id=\"keyword\" class=\"form-control\" placeholder=\"\u597d\u304d\u306a\u30d5\u30eb\u30fc\u30c4\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\">\n  <button type=\"button\" id=\"submit\" class=\"btn\">\u691c\u7d22</button>\n</div>\n<ul id=\"list\"></ul>\n```\n\n```css\n/* twitter-bootstrap\u4f7f\u7528 */\n\n#keyword {\n  display: inline-block;\n  width: 50%;\n}\n#submit {\n  display: inline-block;\n  background-color: #6495ed;\n  color: #fff;\n  padding: 5.5px 20px;\n  vertical-align: top;\n}\n\n#list {\n  padding: 0;\n  margin: 0 auto;\n  width: 50%;\n  list-style: none;\n}\n\nli {\n  border-radius: 5px;\n  box-shadow: 0.5px 0.5px 1px 1px rgba(0,0,0,0.1) inset;\n  background-color: #eee;\n  margin: 10px;\n  padding: 10px;\n}\n\n.form-group {\n  width: 75%;\n  margin: 20px auto;\n  text-align: center;\n}\n\n```\n\n```js\nconst fruits = ['apple', 'apricot', 'avocado', 'blueberry', 'cherry', 'coconut', 'cranberry', 'dragonfruit', 'durian', 'grape', 'grapefruit', 'guava', 'kiwi fruit', 'lemon', 'lime', 'lychee', 'mango', 'melon', 'watermelon', 'miracle fruit', 'orange', 'bloodorange', 'clementine', 'mandarine', 'tangerine', 'papaya', 'passionfruit', 'peach', 'pear', 'persimmon', 'physalis', 'plum/prune', 'pineapple', 'pomegranate', 'raspberry', 'rambutan', 'star fruit', 'strawberry'];\n\nclass IncrementalSearch {\n  constructor(option) {\n    const { input, result, data, notFound } = option;\n\n    this.data = data;\n    this.$input = $(input);\n    this.$result = $(result);\n    this.preVal = '';\n    this.notFound = notFound || 'not found';\n    this.bindEvent();\n  }\n  bindEvent() {\n    this.$input.on('keyup', () => this.suggestList());\n  }\n  makeTopMatchStr(str) {\n    return '^' + str;\n  }\n  makeReg(str){\n    const regStr = str.split('').map(this.makeTopMatchStr).join('|');\n    \n    return new RegExp(regStr);\n  }\n  filterData(str) {\n    const reg = this.makeReg(str);\n    \n    return this.data.filter(v => reg.test(v));\n  }\n  appendList(data) {\n    const $list = data.map(word => $('<li />').addClass('list').text(word));\n\n    this.$result.append($list);\n  }\n  clearList() {\n    this.$result.html('');\n  }\n  suggestList() {\n    const val = this.$input.val().trim().replace(/\\s/g, '');\n\n    if (val === this.preVal) {\n      return;\n    }\n\n    this.clearList();\n    this.preVal = val;\n\n    if (val.length === 0) {\n      return;\n    }\n\n    const matchData = this.filterData(val),\n      result = matchData.length > 0 ? matchData : [this.notFound];\n    \n    this.appendList(result);\n  }\n};\n\n$(function() {\n  new IncrementalSearch({\n    input: '#keyword',\n    result: '#list',\n    data: fruits,\n    notFound: '\u4e00\u81f4\u3059\u308b\u679c\u7269\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f'\n  });\n});\n```\n\n# \u89e3\u8aac\n## \u5206\u5272\u4ee3\u5165\n- \u9023\u60f3\u914d\u5217\u304b\u3089\u5024\u3092\u52b9\u7387\u7684\u306b\u53d6\u308a\u51fa\u3057\u3001\u30ad\u30fc\u540d\u3068\u540c\u3058\u5909\u6570\u306b\u305d\u308c\u305e\u308c\u4ee3\u5165\u3002\n\n```js\n// \u5b9f\u884c\u30b3\u30fc\u30c9\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u8a2d\u5b9a\nnew IncrementalSearch({\n  input: '#keyword',\n  result: '#list',\n  data: fruits,\n  notFound: '\u4e00\u81f4\u3059\u308b\u679c\u7269\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f'\n});\n\n// \u30af\u30e9\u30b9\u8a2d\u5b9a\nclass IncrementalSearch {\n  constructor(option) {\n    const { input, result, data, notFound } = option;\n```\n\n## \u7a7a\u767d\u306e\u524a\u9664\n- replace + \u6b63\u898f\u8868\u73fe\u3067\u7a7a\u767d\u6307\u5b9a\uff08`\\s`\uff09\u3002\n- \u3053\u308c\u3067\u5168\u90e8\u6d88\u305b\u308b\u306e\u3060\u304c\u3001\u30cd\u30a4\u30c6\u30a3\u30d6\u30e1\u30bd\u30c3\u30c9\u306b\u524d\u5f8c\u306e\u7a7a\u767d\u3092\u6d88\u3059`trim()`\u304c\u3042\u308b\u306e\u3067\u3001\u6700\u521d\u306b\u305d\u308c\u3092\u3057\u305f\u4e0a\u3067\u3001\u5165\u529b\u6587\u5b57\u5217\u306e\u9593\u306b\u6b8b\u3063\u305f\u7a7a\u767d\u3092\u6d88\u3059\u611f\u3058\u306b\u3002\n\n```js\nconst val = this.$input.val().trim().replace(/\\s/g, '');\n```\n\n## \u6b63\u898f\u8868\u73fe\u6587\u5b57\u5217\u306e\u4f5c\u6210\n- `ab`\u3068\u3044\u3046\u6587\u5b57\u5217 \u2192 `/^a|^b/`\u3068\u3044\u3046\u6b63\u898f\u8868\u73fe\u306b\u5909\u63db\u3002\n - \u5148\u982d\u4e00\u81f4\uff08`^a` `^b`\uff09\u3092 or(`|`) \u3067\u7e4b\u3044\u3067\u3044\u304f\u5f62\u3002 \n- `^a|^b`\u3068\u3044\u3046\u6587\u5b57\u5217\u307e\u3067\u4f5c\u3063\u3066\u3001 \u305d\u306e\u6587\u5b57\u5217\u3092\u5f15\u6570\u306b`new RegExp()`\u3059\u308b\u3068 \u6b63\u898f\u8868\u73fe\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e`/^a|^b/`\u306b\u306a\u308b\u3002\n\n```js\nmakeTopMatchStr(str) {\n  return '^' + str;\n}\nmakeReg(str){\n  const regStr = str.split('').map(this.makeTopMatchStr).join('|');\n\n  return new RegExp(regStr);\n}\n```\n\n## \u914d\u5217\u304b\u3089\u6761\u4ef6\u306b\u5408\u81f4\u3059\u308b\u8981\u7d20\u3092\u62bd\u51fa\n- filter\u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9 \uff0b \u6b63\u898f\u8868\u73fe\u306b\u3088\u308b\u30de\u30c3\u30c1\u30f3\u30b0\u3002\n- \u6b63\u898f\u8868\u73fe\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u6301\u3064`test`\u30e1\u30bd\u30c3\u30c9\u3092\u5229\u7528\u3059\u308b\u3068\u3001\u7d50\u679c\u304ctrue, false\u3067\u8fd4\u3063\u3066\u304f\u308b\u3002\n- filter\u5185\u3067\u914d\u5217\u5185\u306e\u8981\u7d20\u3092\u5f15\u6570\u306btest\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3048\u3070\u3001\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3082\u306e\uff08true\u3092\u8fd4\u3059\u8981\u7d20\uff09\u3060\u3051\u3092\u62bd\u51fa\u3067\u304d\u308b\uff08`!`\u3092\u4f7f\u3048\u3070\u9006\u3082\u53ef\u80fd\uff09\u3002\n\n```js\nfilterData(str) {\n  const reg = this.makeReg(str);\n\n  return this.data.filter(v => reg.test(v));\n}\n```\n\n## \u30a2\u30da\u30f3\u30c9\n- \u901a\u5e38\u306e\u914d\u5217\u3092\u5143\u306bDOM\u914d\u5217\u3092\u4f5c\u6210\u3002\n- \u51fa\u6765\u4e0a\u304c\u3063\u305fDOM\u914d\u5217\u3092\u4e38\u3054\u3068append\u3059\u308b\u3002\n\n```js\nappendList(data) {\n  const $list = data.map(word => $('<li />').addClass('list').text(word));\n\n  this.$result.append($list);\n}\n```\n\n## \u51e6\u7406\u306e\u4e2d\u65ad\n- if\u6587\u3068return\u3092\u5229\u7528\u3057\u3066\u3001\u51e6\u7406\u3092\u9014\u4e2d\u3067\u7d42\u308f\u3089\u305b\u308b\u3002\n- return\u306e\u5f8c\u306e\u30b3\u30fc\u30c9\u306f\u3001\u305d\u308c\u307e\u3067\u306e\u4e2d\u65ad\u6761\u4ef6\u3092\u5168\u3066\u6e80\u305f\u3055\u306a\u304b\u3063\u305f\u5834\u5408\u306e\u307f\u5b9f\u884c\u3055\u308c\u308b\u3002\n\n```js\n// \u7121\u6761\u4ef6\u3067\u5b9f\u884c\u3059\u308b\n\nif (val === this.preVal) {\n      return;\n}\n\n// val !== this.preVal \u306a\u3089\u5b9f\u884c\n\nif (val.length === 0) {\n   return;\n}\n\n// val !== this.preVal \u304b\u3064 val.length > 0 \u306e\u5834\u5408\u306b\u5b9f\u884c\n```\n\n# \u5916\u90e8\u30ea\u30f3\u30af\n- [javaScript(jQuery)\u306e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30bf\u30eb\u30b5\u30fc\u30c1\u3067\u3001\u5168\u3066\u306e\u884c\u306b\u89e3\u8aac\u3092\u3064\u3051\u3066\u307f\u305f\u3002](http://qiita.com/Kohei_Kishimoto0214/items/2f08bf430a34023ef01d#comment-ab2b5d457ed2207a8b77)\n- [RegExp - MDN](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp)\n- [RegExp.prototype.test()](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test)\n"}