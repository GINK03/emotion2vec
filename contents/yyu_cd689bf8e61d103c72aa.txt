{"tags": ["Scala2.11.6", "\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0", "FunctionalProgramming"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002Scala\u306e\u30c8\u30e9\u30f3\u30dd\u30ea\u30f3\u5316\u306b\u3064\u3044\u3066\u306f\u4ee5\u524d\u8a18\u4e8b\u306b\u3057\u307e\u3057\u305f\u304c\u3001CPS\u5909\u63db\u306b\u3064\u3044\u3066\u306f\u6b21\u306e\u3088\u3046\u306a\u6307\u6458\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\n@_yyu_ CPS\u5909\u63db\u3067\u672b\u5c3e\u518d\u5e30\u306b\u3059\u308b\u3068\u30af\u30ed\u30fc\u30b8\u30e3\u751f\u6210\u306e\u30b3\u30b9\u30c8\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u9045\u304f\u306a\u3063\u305f\u308a\u3057\u307e\u305b\u3093\u304b\uff1f\u2014 \u30e9\u30e0\u30c0\u592a\u90ce (@lambdataro) 2015, 4\u6708 12\n\n\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u89e3\u6c7a\u3067\u304d\u308b\u5834\u5408\u3001\u305d\u3061\u3089\u306e\u65b9\u304c\u65e9\u305d\u3046\u3068\u3044\u3046\u4eee\u8aac\u3067\u3059\u304c\u3001\u3053\u308c\u304cScala\u3067\u306f\u3069\u3046\u306a\u308b\u306e\u304b\u8a66\u3059\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\n\u5b9f\u9a13\u306b\u4f7f\u3046\u30b3\u30fc\u30c9\n\u5f15\u6570nn\u3092\u53d6\u308a\u30011\u3092nn\u56de\u8db3\u3057\u7b97\u3059\u308b\u6b21\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7528\u3044\u307e\u3059\u3002\n\nTailRec.scala\npackage fpinscala.tailrec\n\nsealed trait TailRec[A] {\n  final def run : A = this match {\n    case Return(v)  => v\n    case Suspend(k) => k().run\n  }\n}\n\ncase class Return[A](v : A) extends TailRec[A]\ncase class Suspend[A](resume : () => TailRec[A]) extends TailRec[A]\n\n\n\nCounting.scala\nimport fpinscala.tailrec._\n\nobject Counting {\n  def normal (n : Int) : Int =\n    if (n == 0) 0\n    else 1 + normal(n - 1)\n\n  def cps (n : Int) : Int = {\n    def loop (i : Int, k : Int => TailRec[Int]) : TailRec[Int] =\n      if (i == 0) k(0)\n      else loop(i - 1, x => Suspend(() => k(1 + x)))\n\n    loop(n, t => Return(t)).run\n  }\n\n  def accum (n : Int) : Int = {\n    def loop (i : Int, a : Int) : Int =\n      if (i == 0) a\n      else loop(i - 1, a + 1)\n\n    loop(n, 0)\n  }\n\n  def main(args : Array[String]) : Unit = {\n    val n = 100000\n    val s1 = System.currentTimeMillis()\n    accum(n)\n    println(System.currentTimeMillis() - s1)\n\n    val s2 = System.currentTimeMillis()\n    cps(n)\n    println(System.currentTimeMillis() - s2)\n\n    val s3 = System.currentTimeMillis()\n    normal(n)\n    println(System.currentTimeMillis() - s3)\n  }\n}\n\n\nhttps://ideone.com/uuXEcX\n\n\u7d50\u679c\n\n\n\nfunction \\ nn\n100\n1000\n10000\n100000\n1000000\n10000000\n\n\n\n\nnormal\n0\n0\n1\n\u00d7\n\u00d7\n\u00d7\n\n\naccum\n240\n234\n243\n268\n239\n228\n\n\ncps (trampoline)\n8\n7\n12\n29\n133\n2264\n\n\n\n\n\u307e\u3068\u3081\n\u3069\u3046\u3084\u3089\u6b21\u306e\u3053\u3068\u304c\u8a00\u3048\u305d\u3046\u3067\u3059\u3002\n\nnn\u304c\u5c11\u306a\u3044\u6642\u306fnormal\u304c\u6700\u901f\nnn\u304c\u591a\u304f\u306f\u306a\u3044\u304c\u3001normal\u304cStackOverflow\u3059\u308b\u3088\u3046\u306a\u5834\u5408\u306fcps\u304c\u6709\u529b\n\u3069\u3093\u306ann\u306b\u5bfe\u3057\u3066\u3082accum\u306f\u4e00\u5b9a\u306e\u901f\u5ea6\n\nnn\u304c\u5897\u3048\u3066\u3082accum\u306e\u901f\u5ea6\u304c\u4e00\u5b9a\u306a\u306e\u306f\u3069\u3046\u3057\u3066\u306a\u306e\u304b\u5206\u304b\u3089\u306a\u3044\u3067\u3059\u304c\u3001\u3072\u3068\u307e\u305a\u3053\u306e\u3088\u3046\u306a\u7d50\u679c\u3068\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u8ffd\u8a18\n@xuwei_k \u3055\u3093\u306e\u6307\u6458\u306b\u57fa\u3065\u3044\u3066\u3001\u8907\u6570\u56de\u5b9f\u884c\u3057\u3066\u305d\u306e\u5e73\u5747\u6642\u9593\u3092\u53d6\u308b\u65b9\u6cd5\u306e\u7d50\u679c\u3082\u63b2\u8f09\u3057\u307e\u3059\u3002\n\n\u30b3\u30fc\u30c9\ndef main(args : Array[String]) : Unit = {\n  def getTime[A] (f : A => Any, i : A, n : Int) : Double = {\n    val s = System.currentTimeMillis()\n    for (_ <- 1 to n)\n      f(i)\n\n    (System.currentTimeMillis() - s).toDouble / n.toDouble\n  }\n\n  for (i <- 2 to 7)\n    print(s\"${getTime(accum, pow(10, i).toInt, 10)},\")\n\n  println()\n\n  for (i <- 2 to 7)\n    print(s\"${getTime(cps, pow(10, i).toInt, 10)},\")\n}\n\nhttps://ideone.com/7lkBdU\n\n\u7d50\u679c\n\n\n\nfunction \\ nn\n100\n1000\n10000\n100000\n1000000\n10000000\n\n\n\n\naccum\n0.1\n0.1\n0.2\n0.3\n0.0\n0.0\n\n\ncps (trampoline)\n0.8\n0.3\n1.6\n4.6\n71.7\n932.5\n\n\n\n@xuwei_k \u3055\u3093\u306e\u3054\u6307\u6458\u3069\u304a\u308a\u3001\u5e73\u5747\u3092\u53d6\u308b\u3068\u3069\u306e\u56de\u6570\u3067\u3082accum\u304c\u65e9\u3044\u3088\u3046\u3067\u3059\u3002\nScala\u306e\u30c8\u30e9\u30f3\u30dd\u30ea\u30f3\u5316\u306b\u3064\u3044\u3066\u306f\u4ee5\u524d[\u8a18\u4e8b](http://qiita.com/yyu/items/f1601749097ba3ee03db)\u306b\u3057\u307e\u3057\u305f\u304c\u3001CPS\u5909\u63db\u306b\u3064\u3044\u3066\u306f\u6b21\u306e\u3088\u3046\u306a\u6307\u6458\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\n<blockquote class=\"twitter-tweet\" lang=\"ja\"><p><a href=\"https://twitter.com/_yyu_\">@_yyu_</a> CPS\u5909\u63db\u3067\u672b\u5c3e\u518d\u5e30\u306b\u3059\u308b\u3068\u30af\u30ed\u30fc\u30b8\u30e3\u751f\u6210\u306e\u30b3\u30b9\u30c8\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u9045\u304f\u306a\u3063\u305f\u308a\u3057\u307e\u305b\u3093\u304b\uff1f</p>&mdash; \u30e9\u30e0\u30c0\u592a\u90ce (@lambdataro) <a href=\"https://twitter.com/lambdataro/status/587238154362470402\">2015, 4\u6708 12</a></blockquote> <script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u89e3\u6c7a\u3067\u304d\u308b\u5834\u5408\u3001\u305d\u3061\u3089\u306e\u65b9\u304c\u65e9\u305d\u3046\u3068\u3044\u3046\u4eee\u8aac\u3067\u3059\u304c\u3001\u3053\u308c\u304cScala\u3067\u306f\u3069\u3046\u306a\u308b\u306e\u304b\u8a66\u3059\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\n# \u5b9f\u9a13\u306b\u4f7f\u3046\u30b3\u30fc\u30c9\n\n\u5f15\u6570$n$\u3092\u53d6\u308a\u30011\u3092$n$\u56de\u8db3\u3057\u7b97\u3059\u308b\u6b21\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7528\u3044\u307e\u3059\u3002\n\n```scala:TailRec.scala\npackage fpinscala.tailrec\n\nsealed trait TailRec[A] {\n  final def run : A = this match {\n    case Return(v)  => v\n    case Suspend(k) => k().run\n  }\n}\n\ncase class Return[A](v : A) extends TailRec[A]\ncase class Suspend[A](resume : () => TailRec[A]) extends TailRec[A]\n```\n\n```scala:Counting.scala\nimport fpinscala.tailrec._\n\nobject Counting {\n  def normal (n : Int) : Int =\n    if (n == 0) 0\n    else 1 + normal(n - 1)\n\n  def cps (n : Int) : Int = {\n    def loop (i : Int, k : Int => TailRec[Int]) : TailRec[Int] =\n      if (i == 0) k(0)\n      else loop(i - 1, x => Suspend(() => k(1 + x)))\n\n    loop(n, t => Return(t)).run\n  }\n\n  def accum (n : Int) : Int = {\n    def loop (i : Int, a : Int) : Int =\n      if (i == 0) a\n      else loop(i - 1, a + 1)\n\n    loop(n, 0)\n  }\n\n  def main(args : Array[String]) : Unit = {\n    val n = 100000\n    val s1 = System.currentTimeMillis()\n    accum(n)\n    println(System.currentTimeMillis() - s1)\n\n    val s2 = System.currentTimeMillis()\n    cps(n)\n    println(System.currentTimeMillis() - s2)\n\n    val s3 = System.currentTimeMillis()\n    normal(n)\n    println(System.currentTimeMillis() - s3)\n  }\n}\n```\n\nhttps://ideone.com/uuXEcX\n\n# \u7d50\u679c\n\n|  function \\ $n$      |    100     |   1000      |   10000   |  100000  |  1000000  |  10000000   |\n|:----------------:|:----------:|:-----------:|:---------:|:--------:|:---------:|:----------:|\n| normal           |     0      |     0       |     1     |    \u00d7     |    \u00d7      |     \u00d7      |\n| accum           |    240     |   234       |    243    |   268    |   239     |    228     |\n| cps (trampoline) |     8      |     7       |     12    |   29     |   133     |   2264     |\n\n# \u307e\u3068\u3081\n\n\u3069\u3046\u3084\u3089\u6b21\u306e\u3053\u3068\u304c\u8a00\u3048\u305d\u3046\u3067\u3059\u3002\n\n- $n$\u304c\u5c11\u306a\u3044\u6642\u306f`normal`\u304c\u6700\u901f\n- $n$\u304c\u591a\u304f\u306f\u306a\u3044\u304c\u3001`normal`\u304cStackOverflow\u3059\u308b\u3088\u3046\u306a\u5834\u5408\u306f`cps`\u304c\u6709\u529b\n- \u3069\u3093\u306a$n$\u306b\u5bfe\u3057\u3066\u3082`accum`\u306f\u4e00\u5b9a\u306e\u901f\u5ea6\n\n$n$\u304c\u5897\u3048\u3066\u3082`accum`\u306e\u901f\u5ea6\u304c\u4e00\u5b9a\u306a\u306e\u306f\u3069\u3046\u3057\u3066\u306a\u306e\u304b\u5206\u304b\u3089\u306a\u3044\u3067\u3059\u304c\u3001\u3072\u3068\u307e\u305a\u3053\u306e\u3088\u3046\u306a\u7d50\u679c\u3068\u306a\u308a\u307e\u3057\u305f\u3002\n\n# \u8ffd\u8a18\n\n@xuwei_k \u3055\u3093\u306e\u6307\u6458\u306b\u57fa\u3065\u3044\u3066\u3001\u8907\u6570\u56de\u5b9f\u884c\u3057\u3066\u305d\u306e\u5e73\u5747\u6642\u9593\u3092\u53d6\u308b\u65b9\u6cd5\u306e\u7d50\u679c\u3082\u63b2\u8f09\u3057\u307e\u3059\u3002\n\n## \u30b3\u30fc\u30c9\n\n```scala\ndef main(args : Array[String]) : Unit = {\n  def getTime[A] (f : A => Any, i : A, n : Int) : Double = {\n    val s = System.currentTimeMillis()\n    for (_ <- 1 to n)\n      f(i)\n\n    (System.currentTimeMillis() - s).toDouble / n.toDouble\n  }\n\n  for (i <- 2 to 7)\n    print(s\"${getTime(accum, pow(10, i).toInt, 10)},\")\n\n  println()\n\n  for (i <- 2 to 7)\n    print(s\"${getTime(cps, pow(10, i).toInt, 10)},\")\n}\n```\n\nhttps://ideone.com/7lkBdU\n\n## \u7d50\u679c\n\n|  function \\ $n$  |    100     |   1000      |   10000   |  100000  |  1000000  |  10000000  |\n|:----------------:|:----------:|:-----------:|:---------:|:--------:|:---------:|:----------:|\n| accum            |    0.1     |    0.1      |   0.2     |   0.3    |   0.0     |    0.0     |\n| cps (trampoline) |    0.8     |    0.3      |   1.6     |   4.6    |   71.7    |   932.5    |\n\n@xuwei_k \u3055\u3093\u306e\u3054\u6307\u6458\u3069\u304a\u308a\u3001\u5e73\u5747\u3092\u53d6\u308b\u3068\u3069\u306e\u56de\u6570\u3067\u3082`accum`\u304c\u65e9\u3044\u3088\u3046\u3067\u3059\u3002\n"}