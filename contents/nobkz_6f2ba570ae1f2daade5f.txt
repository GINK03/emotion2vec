{"context": " More than 1 year has passed since last update.\n\nRick Core\u3092\u8aad\u3080\n\u73fe\u5728Riak_Core\u3092\u8abf\u67fb\u4e2d\u3067\u3042\u308a\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u3044\u308b\u3002\n\u3053\u306e\u30a8\u30f3\u30c8\u30ea\u306f\u3001\u305d\u306e\u30e1\u30e2\u3067\u3042\u308a\u3001\u307e\u3068\u3081\u3067\u3042\u308b\u3002\n\u3082\u3061\u308d\u3093\u3001\u305f\u3060\u306e\u3001\u500b\u4eba\u7684\u306a\u30e1\u30e2\u306a\u306e\u3067\u3001\u9593\u9055\u3048\u304c\u5f53\u7136\u306a\u304c\u3089\u542b\u307e\u308c\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\nRing\u3092\u8aad\u3080\n\nRing\u306e\u30b3\u30f3\u30bb\u30d7\u30c8\u3084\u3089\u6982\u5ff5\n\nRing\u3068\u306f?\nRiak Core\u306e\u30b3\u30f3\u30bb\u30d7\u30c8\u306bRing\u304c\u3042\u308b\u3002Ring\u3068\u306f\u3001\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3042\u308a\u3001\u30d1\u30fc\u30c6\u30a3\u30b7\u30e7\u30f3\u3084\u3001\u30d0\u30fc\u30c1\u30e3\u30eb\u30ce\u30fc\u30c9\u306e\u8cac\u52d9\u306e\u30c7\u30fc\u30bf\u3067\u3042\u308b\u3002Riak Core\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u306e\u5168\u3066\u306e\u30ce\u30fc\u30c9\u306b\u3001Ring\u304c\u30b3\u30d4\u30fc\u3055\u308c\u3066\u3044\u308b\u3002\n\nRing\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3084\u3001\u5468\u8fba\u306e\u30b3\u30fc\u30c9\nRing\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u3067\u3042\u308b\u3002\nhttps://github.com/basho/riak_core/blob/master/src/riak_core_ring.erl\nhttps://github.com/basho/riak_core/blob/master/src/riak_core_ring_manager.erl\nhttps://github.com/basho/riak_core/blob/develop/include/riak_core_ring.hrl\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\nhttps://github.com/basho/riak_core/blob/develop/test/riak_core_ring_eqc.erl\n\u306a\u3093\u304b\u3001\u30c6\u30b9\u30c8\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u3089\u3057\u304d\u30c7\u30fc\u30bf\nhttps://github.com/basho/riak_core/blob/develop/test/my_ring\n\u826f\u304f\u308f\u304b\u3089\u3093\u3002\n\n\u3068\u308a\u3042\u3048\u305a\u3001\u89e3\u8aac\u3059\u308b\u3002\n\n\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3001\u30ec\u30b3\u30fc\u30c9\u3001\u30c7\u30fc\u30bf\u3001\u305d\u306e\u4ed6\nriak_core_ring\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3001\u30c7\u30fc\u30bf\u3084\u3089\u3068\u89e3\u8aac\u3059\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\nchstate\n-define(CHSTATE, #chstate_v2).\n-record(chstate_v2, {\n    nodename :: term(),          % the Node responsible for this chstate\n    vclock   :: vclock:vclock() | undefined, % for this chstate object, entries are\n                                 % {Node, Ctr}\n    chring   :: chash:chash(),   % chash ring of {IndexAsInt, Node} mappings\n    meta     :: dict() | undefined,  % dict of cluster-wide other data (primarily\n                                 % bucket N-value, etc)\n\n    clustername :: {term(), term()},\n    next     :: [{integer(), term(), term(), [module()], awaiting | complete}],\n    members  :: [{node(), {member_status(), vclock:vclock(), [{atom(), term()}]}}],\n    claimant :: term(),\n    seen     :: [{term(), vclock:vclock()}],\n    rvsn     :: vclock:vclock()\n}). \n\n\u3068\u308a\u3042\u305a\u3001chstate\u306e\u30ec\u30b3\u30fc\u30c9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002chstate\u306e\"ch\"\u306e\u610f\u5473\u306f\u5206\u304b\u3089\u306a\u3044\u3001\u3068\u308a\u3042\u3048\u305a\u3001\u72b6\u614b\u3067\u3042\u308d\u3046\u3002(\u30b3\u30e1\u30f3\u30c8\u9802\u304d\u307e\u3057\u305f\u3002consistent hashing\u3089\u3057\u3044\u3067\u3059\u3088\u3002)\nnodename\u306f\u30ce\u30fc\u30c9\u306e\u540d\u524d\u3001vclock\u306f\u304a\u305d\u3089\u304f\u30d9\u30af\u30bf\u30fc\u30af\u30ed\u30c3\u30af\u3001chring\u306f\u306a\u3093\u304b\u826f\u304f\u308f\u304b\u3089\u306a\u3093\u3051\u3069\u30ad\u30e3\u30c3\u30b7\u30e5consistent hashing \u306e ring\u3001meta\u306f\u826f\u304f\u308f\u304b\u3089\u3093\u3051\u3069\u3001\u30d0\u30b1\u30c3\u30c8\u3084\u3089\u3001N-Value\u304c\u5165\u3063\u3066\u3044\u308b\u3089\u3057\u3044\u3001clustername\u306f\u30af\u30e9\u30b9\u30bf\u30fc\u306e\u540d\u524d?\u3001next?\u308f\u304b\u3089\u3093\u3001\u305f\u3076\u3093\u3053\u308c\u304b\u3089\u5206\u304b\u308b\u3002members\u30af\u30e9\u30b9\u30bf\u30fc\u306e\u30e1\u30f3\u30d0\u30fc\u3001claimant\u306f\u3001\u30b9\u30af\u3092\u5272\u308a\u5f53\u3066\u305f\u308a\u3001\u51e6\u7406\u3092\u7b49\u3057\u304f\u5206\u6563\u3059\u308b\u5f79\u5272\u306e\u30ce\u30fc\u30c9\u3001Seen\u3068rvsn\u306f\u307e\u3060\u826f\u304f\u308f\u304b\u3089\u3093\u3002\n%% Legacy chstate\n-record(chstate, {\n    nodename :: node(), % the Node responsible for this chstate\n    vclock,   % for this chstate object, entries are {Node, Ctr}\n    chring :: chash:chash(),   % chash ring of {IndexAsInt, Node} mappings\n    meta      % dict of cluster-wide other data (primarily bucket N-value, etc)\n}). \n\n\u30ec\u30ac\u30b7\u30fc\u306a\u3001chstate\u3089\u3057\u3044\u3002\n-type member_status() :: joining | valid | invalid | leaving | exiting | down.\n\n\u30e1\u30f3\u30d0\u30fc\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u3002\u3068\u3044\u3046\u304b\u3001\u72b6\u614b? join\u4e2d\u3001\u6709\u52b9\u3001\u7121\u52b9\u3001leave\u4e2d\u3001exit\u4e2d\u3001\u843d\u3061\u305f\u3002\u72b6\u614b\u9077\u79fb\u56f3\u66f8\u304f\u304b\u3082\u3002\n%% type meta_entry(). Record for each entry in #chstate.meta\n-record(meta_entry, {\n    value,    % The value stored under this entry\n    lastmod   % The last modified time of this entry, \n              %  from calendar:datetime_to_gregorian_seconds(\n              %                             calendar:universal_time()), \n}).\n\n\u300c\u30a8\u30f3\u30c8\u30ea\u300d\u306e\u305f\u3081\u306e\u30ec\u30b3\u30fc\u30c9\u3002\u30a8\u30f3\u30c8\u30ea\u3063\u3066\u306a\u3093\u3060?\n%% riak_core_ring() is the opaque data type used for partition ownership\n-type riak_core_ring() :: ?CHSTATE{}.\n-type chstate() :: riak_core_ring().\n\n-type pending_change() :: {Owner :: node(),\n                           NextOwner :: node(),\n                           awaiting | complete}\n                        | {undefined, undefined, undefined}.\n\n-type resize_transfer() :: {{integer(),term()}, ordsets:ordset(node()), awaiting | complete}.\n\n\u578b\u5468\u308a\u3002\u578b\u306f\u826f\u3044\u306d\u30fc\u3002\n\npublic API\n\u3053\u3053\u304b\u3089\u3001public API\u3092\u8aad\u3093\u3067\u884c\u304f\u9577\u3044\u3002\n\u3046\u30fc\u3093\u611a\u76f4\u306b\u4e0a\u304b\u3089\u8aad\u3093\u3067\u3082\u826f\u3044\u304c\u3001\u307e\u3041\u3001\u305d\u306e\u524d\u306b\u3001export\u3055\u308c\u3066\u3044\u308b\u95a2\u6570\u3092\u898b\u3088\u3046\u3002\n-export([all_members/1,\n         all_owners/1,\n         all_preflists/2,\n         diff_nodes/2,\n         equal_rings/2,\n         fresh/0,\n         fresh/1,\n         fresh/2,\n         get_meta/2,\n         get_buckets/1,\n         index_owner/2,\n         my_indices/1,\n         num_partitions/1,\n         owner_node/1,\n         preflist/2,\n         random_node/1,\n         random_other_index/1,\n         random_other_index/2,\n         random_other_node/1,\n         reconcile/2,\n         rename_node/3,\n         responsible_index/2,\n         transfer_node/3,\n         update_meta/3,\n         remove_meta/2]).\n\n-export([cluster_name/1,\n         legacy_ring/1,\n         legacy_reconcile/2,\n         upgrade/1,\n         downgrade/2,\n         set_tainted/1,\n         check_tainted/2,\n         nearly_equal/2,\n         claimant/1,\n         member_status/2,\n         pretty_print/2,\n         all_member_status/1,\n         update_member_meta/5,\n         clear_member_meta/3,\n         get_member_meta/3,\n         add_member/3,\n         remove_member/3,\n         leave_member/3,\n         exit_member/3,\n         down_member/3,\n         set_member/4,\n         set_member/5,\n         members/2,\n         set_claimant/2,\n         increment_vclock/2,\n         ring_version/1,\n         increment_ring_version/2,\n         set_pending_changes/2,\n         active_members/1,\n         claiming_members/1,\n         ready_members/1,\n         random_other_active_node/1,\n         down_members/1,\n         set_owner/2,\n         indices/2,\n         future_indices/2,\n         future_ring/1,\n         disowning_indices/2,\n         cancel_transfers/1,\n         pending_changes/1,\n         next_owner/1,\n         next_owner/2,\n         next_owner/3,\n         completed_next_owners/2,\n         all_next_owners/1,\n         change_owners/2,\n         handoff_complete/3,\n         ring_ready/0,\n         ring_ready/1,\n         ring_ready_info/1,\n         ring_changed/2,\n         set_cluster_name/2,\n         reconcile_names/2,\n         reconcile_members/2,\n         is_primary/2,\n         chash/1,\n         set_chash/2,\n         resize/2,\n         set_pending_resize/2,\n         set_pending_resize_abort/1,\n         maybe_abort_resize/1,\n         schedule_resize_transfer/3,\n         awaiting_resize_transfer/3,\n         resize_transfer_status/4,\n         resize_transfer_complete/4,\n         complete_resize_transfers/3,\n         reschedule_resize_transfers/3,\n         is_resizing/1,\n         is_post_resize/1,\n         is_resize_complete/1,\n         resized_ring/1,\n         set_resized_ring/2,\n         future_index/3,\n         future_index/4,\n         future_index/5,\n         is_future_index/4,\n         future_owner/2,\n         future_num_partitions/1,\n         vnode_type/2,\n         deletion_complete/3]).\n\n\u76f8\u5f53\u591a\u3044\u3002\n\u8aad\u3093\u3067\u884c\u3053\u3046\u3002\n\n\u540d\u524d\u3068\u5f15\u6570\u3068\u578b\u3092\u8aad\u3093\u3067\u884c\u304f\n\u3068\u308a\u3042\u3048\u305a\u3001\u578b\u3092\u8aad\u3093\u3067\u95a2\u6570\u306e\u610f\u5473\u3092\u8aad\u3093\u3067\u884c\u3053\u3046\u3002\u578b\u304c\u7121\u3044\u5834\u5408\u306f\u3001\u5b9f\u88c5\u3092\u8aad\u3080\u304b\u3001\u540d\u524d\u3068\u5f15\u6570\u3067\u3001\u63a8\u6e2c\u3059\u308b\u3002\n\nlegary_ring/1\nlegacy_ring(#chstate{}) ->\n    true;\nlegacy_ring(_) ->\n    false.\n\nlagacy_ring\u304b\u3069\u3046\u304b\u5224\u5b9a\u3059\u308b\u3002\u7c21\u5358\u3002\n\nupgrade/1\n%% @doc Upgrade old ring structures to the latest format.\nupgrade(Old=?CHSTATE{}) ->\n\n\u307e\u3041\u3001upgrade\u3059\u308b\u3088\u306d\u3002\u5b9f\u88c5\u306f\u3042\u3068\u3067\u8aad\u3080\u3002\n\ndowngrade/2\n%% @doc Downgrade the latest ring structure to a specified version.\ndowngrade(1,?CHSTATE{nodename=Node,\n                     vclock=VC,\n                     chring=Ring,\n                     meta=Meta}) -> \n...\n\nugrade\u304c\u3042\u308c\u3070\u3001downgrade\u3082\u3042\u308b\u3002\u5f15\u6570\u306f2\u3064\u3067\u3001\u7b2c\u4e00\u5f15\u6570\u304cversion\u3092\u53d6\u308b\u306e\u304b\u3002\n\nset_tainted\nset_tainted(Ring) ->\n    update_meta(riak_core_ring_tainted, true, Ring).\n\ntainted\u306f\u300c\u6c5a\u67d3\u3059\u308b\u3001\u8150\u6557\u3055\u305b\u308b\u300d\u3068\u3044\u3046\u610f\u5473\u3002\u306a\u3093\u304b\u5acc\u3060\u3002\n\ncheck_tainted\ncheck_tainted(#chstate{}, _Msg) -> \n...\n\n\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3089\u3057\u3044\u3002\n\nnearly_equal/2\n%% @doc Verify that the two rings are identical expect that metadata can\n%%      differ and RingB's vclock is allowed to be equal or a direct\n%%      descendant of RingA's vclock. This matches the changes that the\n%%      fix-up logic may make to a ring.\n-spec nearly_equal(chstate(), chstate()) -> boolean().\n\n2\u3064\u306echstate()\u3092\u53d6\u308a\u3001boolean()\u3092\u8fd4\u3059\u3002\u307e\u3041\u30012\u3064\u306ering\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u304c\u9055\u3044\u3001vclock\u304cequal\u304bdescendant\u3067\u3042\u308b\u306e\u3092\u8a31\u53ef\u3059\u308b\u3050\u3089\u3044\u306e\u540c\u4e00\u6027\u3066\u304b\u306d\u3002\n\nnearly_equal(RingA, RingB) ->\n    TestVC = vclock:descends(RingB?CHSTATE.vclock, RingA?CHSTATE.vclock),\n    RingA2 = RingA?CHSTATE{vclock=undefined, meta=undefined},\n    RingB2 = RingB?CHSTATE{vclock=undefined, meta=undefined},\n    TestRing = (RingA2 =:= RingB2),\n    TestVC and TestRing.\n\n\u307e\u3041\u3001vlock:descends/2\u3067\u3001vclock\u306e\u30c1\u30a7\u30c3\u30af\u3001\u305d\u3093\u3067\u3001vclock\u3068meta\u3092undefined\u306b\u3057\u3066\u3001\u7b49\u3057\u3044\u304b\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u308b\u3002\n\nis_primary/2\n%% @doc Determine if a given Index/Node `IdxNode' combination is a\n%%      primary.\n-spec is_primary(chstate(), {chash:index_as_int(), node()}) -> boolean().\nis_primary(Ring, IdxNode) ->\n    Owners = all_owners(Ring),\n    lists:member(IdxNode, Owners).\n\nchstate()\u3068\u3001{chash:index_as_int(), node()}\u3092\u53d6\u308a,boolean\u3092\u8fd4\u3059\u3002{chash:index_as_int(), node()}\u304cprimary\u3067\u3042\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\u3002\n\nchash/1\n-spec chash(chstate()) -> CHash::chash:chash().\nchash(?CHSTATE{chring=CHash}) ->\n    CHash.\n\n\u7c21\u5358\u3002 \n\nset_chash/2\nset_chash(State, CHash) ->\n    State?CHSTATE{chring=CHash}.\n\nchash\u304c\u3042\u308c\u3070\u3001set_chash\u3082\u3042\u308b\u3002\n\nall_membars/1 \u3068 all_membars/2\n%% @doc Produce a list of all nodes that are members of the cluster\n-spec all_members(State :: chstate()) -> [Node :: term()].\nall_members(?CHSTATE{members=Members}) ->\n    get_members(Members).\n\nmembers(?CHSTATE{members=Members}, Types) ->\n    get_members(Members, Types).\n\nchstate()\u306e\u5168\u30e1\u30f3\u30d0\u30fc\u306e\u30ea\u30b9\u30c8\u3092\u751f\u6210\u3059\u308b\u3002\n\nactive_members/1\n%% @doc Produce a list of all active (not marked as down) cluster members\nactive_members(?CHSTATE{members=Members}) ->\n    get_members(Members, [joining, valid, leaving, exiting]).\n\nactive\u306a(down\u3057\u3066\u306a\u3044)\u30af\u30e9\u30b9\u30bf\u30fc\u306e\u30e1\u30f3\u30d0\u30fc\u306e\u30ea\u30b9\u30c8\u3092\u751f\u6210\u3059\u308b\u3002\n# Rick Core\u3092\u8aad\u3080\n\n\u73fe\u5728Riak_Core\u3092\u8abf\u67fb\u4e2d\u3067\u3042\u308a\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u3044\u308b\u3002\n\n\u3053\u306e\u30a8\u30f3\u30c8\u30ea\u306f\u3001\u305d\u306e\u30e1\u30e2\u3067\u3042\u308a\u3001\u307e\u3068\u3081\u3067\u3042\u308b\u3002\n\u3082\u3061\u308d\u3093\u3001\u305f\u3060\u306e\u3001\u500b\u4eba\u7684\u306a\u30e1\u30e2\u306a\u306e\u3067\u3001\u9593\u9055\u3048\u304c\u5f53\u7136\u306a\u304c\u3089\u542b\u307e\u308c\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n# Ring\u3092\u8aad\u3080\n\n## Ring\u306e\u30b3\u30f3\u30bb\u30d7\u30c8\u3084\u3089\u6982\u5ff5\n\n### Ring\u3068\u306f? \n\nRiak Core\u306e\u30b3\u30f3\u30bb\u30d7\u30c8\u306bRing\u304c\u3042\u308b\u3002Ring\u3068\u306f\u3001\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3042\u308a\u3001\u30d1\u30fc\u30c6\u30a3\u30b7\u30e7\u30f3\u3084\u3001\u30d0\u30fc\u30c1\u30e3\u30eb\u30ce\u30fc\u30c9\u306e\u8cac\u52d9\u306e\u30c7\u30fc\u30bf\u3067\u3042\u308b\u3002Riak Core\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u306e\u5168\u3066\u306e\u30ce\u30fc\u30c9\u306b\u3001Ring\u304c\u30b3\u30d4\u30fc\u3055\u308c\u3066\u3044\u308b\u3002\n\n## Ring\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3084\u3001\u5468\u8fba\u306e\u30b3\u30fc\u30c9\n\nRing\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u3067\u3042\u308b\u3002\n\nhttps://github.com/basho/riak_core/blob/master/src/riak_core_ring.erl\nhttps://github.com/basho/riak_core/blob/master/src/riak_core_ring_manager.erl\nhttps://github.com/basho/riak_core/blob/develop/include/riak_core_ring.hrl\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n\nhttps://github.com/basho/riak_core/blob/develop/test/riak_core_ring_eqc.erl\n\n\u306a\u3093\u304b\u3001\u30c6\u30b9\u30c8\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u3089\u3057\u304d\u30c7\u30fc\u30bf\n\nhttps://github.com/basho/riak_core/blob/develop/test/my_ring\n\n\u826f\u304f\u308f\u304b\u3089\u3093\u3002\n\n## \u3068\u308a\u3042\u3048\u305a\u3001\u89e3\u8aac\u3059\u308b\u3002\n\n### \u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3001\u30ec\u30b3\u30fc\u30c9\u3001\u30c7\u30fc\u30bf\u3001\u305d\u306e\u4ed6\n\nriak_core_ring\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3001\u30c7\u30fc\u30bf\u3084\u3089\u3068\u89e3\u8aac\u3059\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n#### chstate \n```erlang\n-define(CHSTATE, #chstate_v2).\n-record(chstate_v2, {\n    nodename :: term(),          % the Node responsible for this chstate\n    vclock   :: vclock:vclock() | undefined, % for this chstate object, entries are\n                                 % {Node, Ctr}\n    chring   :: chash:chash(),   % chash ring of {IndexAsInt, Node} mappings\n    meta     :: dict() | undefined,  % dict of cluster-wide other data (primarily\n                                 % bucket N-value, etc)\n\n    clustername :: {term(), term()},\n    next     :: [{integer(), term(), term(), [module()], awaiting | complete}],\n    members  :: [{node(), {member_status(), vclock:vclock(), [{atom(), term()}]}}],\n    claimant :: term(),\n    seen     :: [{term(), vclock:vclock()}],\n    rvsn     :: vclock:vclock()\n}). \n```\n\n\u3068\u308a\u3042\u305a\u3001chstate\u306e\u30ec\u30b3\u30fc\u30c9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002chstate\u306e\"ch\"\u306e\u610f\u5473\u306f\u5206\u304b\u3089\u306a\u3044\u3001\u3068\u308a\u3042\u3048\u305a\u3001\u72b6\u614b\u3067\u3042\u308d\u3046\u3002(\u30b3\u30e1\u30f3\u30c8\u9802\u304d\u307e\u3057\u305f\u3002consistent hashing\u3089\u3057\u3044\u3067\u3059\u3088\u3002)\n\nnodename\u306f\u30ce\u30fc\u30c9\u306e\u540d\u524d\u3001vclock\u306f\u304a\u305d\u3089\u304f\u30d9\u30af\u30bf\u30fc\u30af\u30ed\u30c3\u30af\u3001chring\u306f~~\u306a\u3093\u304b\u826f\u304f\u308f\u304b\u3089\u306a\u3093\u3051\u3069\u30ad\u30e3\u30c3\u30b7\u30e5~~consistent hashing \u306e ring\u3001meta\u306f\u826f\u304f\u308f\u304b\u3089\u3093\u3051\u3069\u3001\u30d0\u30b1\u30c3\u30c8\u3084\u3089\u3001N-Value\u304c\u5165\u3063\u3066\u3044\u308b\u3089\u3057\u3044\u3001clustername\u306f\u30af\u30e9\u30b9\u30bf\u30fc\u306e\u540d\u524d?\u3001next?\u308f\u304b\u3089\u3093\u3001\u305f\u3076\u3093\u3053\u308c\u304b\u3089\u5206\u304b\u308b\u3002members\u30af\u30e9\u30b9\u30bf\u30fc\u306e\u30e1\u30f3\u30d0\u30fc\u3001claimant\u306f\u3001\u30b9\u30af\u3092\u5272\u308a\u5f53\u3066\u305f\u308a\u3001\u51e6\u7406\u3092\u7b49\u3057\u304f\u5206\u6563\u3059\u308b\u5f79\u5272\u306e\u30ce\u30fc\u30c9\u3001Seen\u3068rvsn\u306f\u307e\u3060\u826f\u304f\u308f\u304b\u3089\u3093\u3002\n\n\n```\n%% Legacy chstate\n-record(chstate, {\n    nodename :: node(), % the Node responsible for this chstate\n    vclock,   % for this chstate object, entries are {Node, Ctr}\n    chring :: chash:chash(),   % chash ring of {IndexAsInt, Node} mappings\n    meta      % dict of cluster-wide other data (primarily bucket N-value, etc)\n}). \n```\n\n\u30ec\u30ac\u30b7\u30fc\u306a\u3001chstate\u3089\u3057\u3044\u3002\n\n```\n-type member_status() :: joining | valid | invalid | leaving | exiting | down.\n```\n\n\u30e1\u30f3\u30d0\u30fc\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u3002\u3068\u3044\u3046\u304b\u3001\u72b6\u614b? join\u4e2d\u3001\u6709\u52b9\u3001\u7121\u52b9\u3001leave\u4e2d\u3001exit\u4e2d\u3001\u843d\u3061\u305f\u3002\u72b6\u614b\u9077\u79fb\u56f3\u66f8\u304f\u304b\u3082\u3002\n\n```\n%% type meta_entry(). Record for each entry in #chstate.meta\n-record(meta_entry, {\n    value,    % The value stored under this entry\n    lastmod   % The last modified time of this entry, \n              %  from calendar:datetime_to_gregorian_seconds(\n              %                             calendar:universal_time()), \n}).\n```\n\n\u300c\u30a8\u30f3\u30c8\u30ea\u300d\u306e\u305f\u3081\u306e\u30ec\u30b3\u30fc\u30c9\u3002\u30a8\u30f3\u30c8\u30ea\u3063\u3066\u306a\u3093\u3060?\n\n\n```\n%% riak_core_ring() is the opaque data type used for partition ownership\n-type riak_core_ring() :: ?CHSTATE{}.\n-type chstate() :: riak_core_ring().\n\n-type pending_change() :: {Owner :: node(),\n                           NextOwner :: node(),\n                           awaiting | complete}\n                        | {undefined, undefined, undefined}.\n\n-type resize_transfer() :: {{integer(),term()}, ordsets:ordset(node()), awaiting | complete}.\n```\n\n\u578b\u5468\u308a\u3002\u578b\u306f\u826f\u3044\u306d\u30fc\u3002\n\n### public API\n\n\u3053\u3053\u304b\u3089\u3001public API\u3092\u8aad\u3093\u3067\u884c\u304f\u9577\u3044\u3002\n\n\u3046\u30fc\u3093\u611a\u76f4\u306b\u4e0a\u304b\u3089\u8aad\u3093\u3067\u3082\u826f\u3044\u304c\u3001\u307e\u3041\u3001\u305d\u306e\u524d\u306b\u3001export\u3055\u308c\u3066\u3044\u308b\u95a2\u6570\u3092\u898b\u3088\u3046\u3002\n\n```erlang\n-export([all_members/1,\n         all_owners/1,\n         all_preflists/2,\n         diff_nodes/2,\n         equal_rings/2,\n         fresh/0,\n         fresh/1,\n         fresh/2,\n         get_meta/2,\n         get_buckets/1,\n         index_owner/2,\n         my_indices/1,\n         num_partitions/1,\n         owner_node/1,\n         preflist/2,\n         random_node/1,\n         random_other_index/1,\n         random_other_index/2,\n         random_other_node/1,\n         reconcile/2,\n         rename_node/3,\n         responsible_index/2,\n         transfer_node/3,\n         update_meta/3,\n         remove_meta/2]).\n\n-export([cluster_name/1,\n         legacy_ring/1,\n         legacy_reconcile/2,\n         upgrade/1,\n         downgrade/2,\n         set_tainted/1,\n         check_tainted/2,\n         nearly_equal/2,\n         claimant/1,\n         member_status/2,\n         pretty_print/2,\n         all_member_status/1,\n         update_member_meta/5,\n         clear_member_meta/3,\n         get_member_meta/3,\n         add_member/3,\n         remove_member/3,\n         leave_member/3,\n         exit_member/3,\n         down_member/3,\n         set_member/4,\n         set_member/5,\n         members/2,\n         set_claimant/2,\n         increment_vclock/2,\n         ring_version/1,\n         increment_ring_version/2,\n         set_pending_changes/2,\n         active_members/1,\n         claiming_members/1,\n         ready_members/1,\n         random_other_active_node/1,\n         down_members/1,\n         set_owner/2,\n         indices/2,\n         future_indices/2,\n         future_ring/1,\n         disowning_indices/2,\n         cancel_transfers/1,\n         pending_changes/1,\n         next_owner/1,\n         next_owner/2,\n         next_owner/3,\n         completed_next_owners/2,\n         all_next_owners/1,\n         change_owners/2,\n         handoff_complete/3,\n         ring_ready/0,\n         ring_ready/1,\n         ring_ready_info/1,\n         ring_changed/2,\n         set_cluster_name/2,\n         reconcile_names/2,\n         reconcile_members/2,\n         is_primary/2,\n         chash/1,\n         set_chash/2,\n         resize/2,\n         set_pending_resize/2,\n         set_pending_resize_abort/1,\n         maybe_abort_resize/1,\n         schedule_resize_transfer/3,\n         awaiting_resize_transfer/3,\n         resize_transfer_status/4,\n         resize_transfer_complete/4,\n         complete_resize_transfers/3,\n         reschedule_resize_transfers/3,\n         is_resizing/1,\n         is_post_resize/1,\n         is_resize_complete/1,\n         resized_ring/1,\n         set_resized_ring/2,\n         future_index/3,\n         future_index/4,\n         future_index/5,\n         is_future_index/4,\n         future_owner/2,\n         future_num_partitions/1,\n         vnode_type/2,\n         deletion_complete/3]).\n```\n\n\n\u76f8\u5f53\u591a\u3044\u3002\n\n\u8aad\u3093\u3067\u884c\u3053\u3046\u3002\n\n## \u540d\u524d\u3068\u5f15\u6570\u3068\u578b\u3092\u8aad\u3093\u3067\u884c\u304f\n\n\u3068\u308a\u3042\u3048\u305a\u3001\u578b\u3092\u8aad\u3093\u3067\u95a2\u6570\u306e\u610f\u5473\u3092\u8aad\u3093\u3067\u884c\u3053\u3046\u3002\u578b\u304c\u7121\u3044\u5834\u5408\u306f\u3001\u5b9f\u88c5\u3092\u8aad\u3080\u304b\u3001\u540d\u524d\u3068\u5f15\u6570\u3067\u3001\u63a8\u6e2c\u3059\u308b\u3002\n\n### legary_ring/1\n\n```erlang\nlegacy_ring(#chstate{}) ->\n    true;\nlegacy_ring(_) ->\n    false.\n```\n\nlagacy_ring\u304b\u3069\u3046\u304b\u5224\u5b9a\u3059\u308b\u3002\u7c21\u5358\u3002\n\n### upgrade/1\n\n```erlang\n%% @doc Upgrade old ring structures to the latest format.\nupgrade(Old=?CHSTATE{}) ->\n```\n\n\u307e\u3041\u3001upgrade\u3059\u308b\u3088\u306d\u3002\u5b9f\u88c5\u306f\u3042\u3068\u3067\u8aad\u3080\u3002\n\n### downgrade/2\n\n```erlang\n%% @doc Downgrade the latest ring structure to a specified version.\ndowngrade(1,?CHSTATE{nodename=Node,\n                     vclock=VC,\n                     chring=Ring,\n                     meta=Meta}) -> \n...\n```\n\nugrade\u304c\u3042\u308c\u3070\u3001downgrade\u3082\u3042\u308b\u3002\u5f15\u6570\u306f2\u3064\u3067\u3001\u7b2c\u4e00\u5f15\u6570\u304cversion\u3092\u53d6\u308b\u306e\u304b\u3002\n\n### set_tainted\n\n```erlang\nset_tainted(Ring) ->\n    update_meta(riak_core_ring_tainted, true, Ring).\n```\n\ntainted\u306f\u300c\u6c5a\u67d3\u3059\u308b\u3001\u8150\u6557\u3055\u305b\u308b\u300d\u3068\u3044\u3046\u610f\u5473\u3002\u306a\u3093\u304b\u5acc\u3060\u3002\n\n### check_tainted\n\n```erlang\ncheck_tainted(#chstate{}, _Msg) -> \n...\n```\n\n\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3089\u3057\u3044\u3002\n\n\n### nearly_equal/2\n\n```erlang\n%% @doc Verify that the two rings are identical expect that metadata can\n%%      differ and RingB's vclock is allowed to be equal or a direct\n%%      descendant of RingA's vclock. This matches the changes that the\n%%      fix-up logic may make to a ring.\n-spec nearly_equal(chstate(), chstate()) -> boolean().\n```\n\n2\u3064\u306echstate()\u3092\u53d6\u308a\u3001boolean()\u3092\u8fd4\u3059\u3002\u307e\u3041\u30012\u3064\u306ering\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u304c\u9055\u3044\u3001vclock\u304cequal\u304bdescendant\u3067\u3042\u308b\u306e\u3092\u8a31\u53ef\u3059\u308b\u3050\u3089\u3044\u306e\u540c\u4e00\u6027\u3066\u304b\u306d\u3002\n\n```erlang\n\nnearly_equal(RingA, RingB) ->\n    TestVC = vclock:descends(RingB?CHSTATE.vclock, RingA?CHSTATE.vclock),\n    RingA2 = RingA?CHSTATE{vclock=undefined, meta=undefined},\n    RingB2 = RingB?CHSTATE{vclock=undefined, meta=undefined},\n    TestRing = (RingA2 =:= RingB2),\n    TestVC and TestRing.\n```\n\n\u307e\u3041\u3001vlock:descends/2\u3067\u3001vclock\u306e\u30c1\u30a7\u30c3\u30af\u3001\u305d\u3093\u3067\u3001vclock\u3068meta\u3092undefined\u306b\u3057\u3066\u3001\u7b49\u3057\u3044\u304b\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u308b\u3002\n\n### is_primary/2\n\n```erlang\n%% @doc Determine if a given Index/Node `IdxNode' combination is a\n%%      primary.\n-spec is_primary(chstate(), {chash:index_as_int(), node()}) -> boolean().\nis_primary(Ring, IdxNode) ->\n    Owners = all_owners(Ring),\n    lists:member(IdxNode, Owners).\n```\n\nchstate()\u3068\u3001{chash:index_as_int(), node()}\u3092\u53d6\u308a,boolean\u3092\u8fd4\u3059\u3002{chash:index_as_int(), node()}\u304cprimary\u3067\u3042\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\u3002\n\n\n### chash/1\n\n```erlang\n-spec chash(chstate()) -> CHash::chash:chash().\nchash(?CHSTATE{chring=CHash}) ->\n    CHash.\n```\n\n\u7c21\u5358\u3002 \n\n### set_chash/2\n\n```erlang\nset_chash(State, CHash) ->\n    State?CHSTATE{chring=CHash}.\n```\n\nchash\u304c\u3042\u308c\u3070\u3001set_chash\u3082\u3042\u308b\u3002\n\n### all_membars/1 \u3068 all_membars/2\n\n```erlang\n%% @doc Produce a list of all nodes that are members of the cluster\n-spec all_members(State :: chstate()) -> [Node :: term()].\nall_members(?CHSTATE{members=Members}) ->\n    get_members(Members).\n\nmembers(?CHSTATE{members=Members}, Types) ->\n    get_members(Members, Types).\n```\n\nchstate()\u306e\u5168\u30e1\u30f3\u30d0\u30fc\u306e\u30ea\u30b9\u30c8\u3092\u751f\u6210\u3059\u308b\u3002\n\n\n### active_members/1\n\n```erlang\n%% @doc Produce a list of all active (not marked as down) cluster members\nactive_members(?CHSTATE{members=Members}) ->\n    get_members(Members, [joining, valid, leaving, exiting]).\n```\n\nactive\u306a(down\u3057\u3066\u306a\u3044)\u30af\u30e9\u30b9\u30bf\u30fc\u306e\u30e1\u30f3\u30d0\u30fc\u306e\u30ea\u30b9\u30c8\u3092\u751f\u6210\u3059\u308b\u3002\n\n\n\n", "tags": ["riak", "Erlang"]}