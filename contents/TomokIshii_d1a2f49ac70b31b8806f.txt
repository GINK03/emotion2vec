{"context": " More than 1 year has passed since last update.\u5148\u65e5\uff0c\u30b7\u30f3\u30d7\u30eb\u306aRecurrent Neural Network\uff08\u518d\u5e30\u578b\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\uff09\u306e\u30b3\u30fc\u30c9\u3092\u8abf\u3079\u3066\u307f\u305f\u304c\uff0c\u3053\u308c\u3092\u4f7f\u3063\u3066\u4f55\u304b\u3084\u3063\u3066\u307f\u305f\u3044\u3068\u3044\u3046\u767a\u60f3\u304b\u3089\uff0c\u97f3\u697d\u306e\u8abf\uff0c\u9577\u8abf\uff0f\u77ed\u8abf\u3092\u5206\u985e\u3067\u304d\u306a\u3044\u304b\uff0c\u304c\u601d\u3044\u6d6e\u304b\u3093\u3060\uff0e\u3082\u3061\u308d\u3093\u97f3\u697d\u306b\u8a73\u3057\u3044\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\uff0cWikipedia\u7b49\u3067\u9577\u8abf\uff0c\u77ed\u8abf\u306b\u3064\u3044\u3066\u8abf\u3079\u308b\u3053\u3068\u304b\u3089\u59cb\u3081\u3066\u307f\u305f\uff0e\n\n\u8abf\uff08\u3061\u3087\u3046\uff0ckey\uff09\u306f\u97f3\u697d\u7528\u8a9e\u306e\u4e00\u3064\uff0e\u30e1\u30ed\u30c7\u30a3\u30fc\u3084\u548c\u97f3\u304c\uff0c\u4e2d\u5fc3\u97f3\u3068\u95a2\u9023\u4ed8\u3051\u3089\u308c\u3066\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u3068\u304d\uff0c\u305d\u306e\u97f3\u697d\u306f\u8abf\u6027\u304c\u3042\u308b\u3068\u3044\u3046\uff0e\u72ed\u7fa9\u306b\u306f\uff0c\u4f1d\u7d71\u7684\u306a\u897f\u6d0b\u97f3\u697d\u306b\u304a\u3044\u3066\uff0c\u5168\u97f3\u968e(diatonic scale)\u306e\u97f3\u304b\u3089\u69cb\u6210\u3055\u308c\u308b\u9577\u8abf(major key)\u3068\u77ed\u8abf(minor key)\u306e2\u3064\u306e\u8abf\u304c\u77e5\u3089\u308c\uff0c\u305d\u308c\u305e\u308c\u5168\u97f3\u968e\u306e\u30c9\u306e\u97f3\u3068\u30e9\u306e\u97f3\u304c\u4e2d\u5fc3\u97f3\u3067\u3042\u308b\uff0e\n\n\u57fa\u672c\u5b9a\u7fa9\u3068\u3057\u3066\u306f\u3053\u306e\u3088\u3046\u306a\u8aac\u660e\u3068\u306a\u308b\u304c\uff0c\u5c0f\u4e2d\u5b66\u6821\u3067\u5b66\u3093\u3060\u901a\u308a\uff0c\u9577\u8abf\u306f\u300c\u660e\u308b\u304f\u5143\u6c17\u306a\u611f\u3058\u300d\u306b\u805e\u3053\u3048\u308b\u306e\u306b\u5bfe\u3057\uff0c\u77ed\u8abf\u306f\u300c\u6697\u304f\u91cd\u82e6\u3057\u3044\u611f\u3058\u300d\u306b\u805e\u3053\u3048\u308b\u66f2\u8abf\u3067\u3042\u308b\uff0e\u3053\u308c\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u5206\u985e\u3067\u304d\u306a\u3044\u304b\u306b\u3064\u3044\u3066\u8abf\u3079\u3066\u307f\u305f\uff0e\n\n\u9577\u8abf(major key)\u3068\u77ed\u8abf(minor key)\u306e\u8aac\u660e\u3092\u3082\u3046\u5c11\u3057\n\u4e2d\u5fc3\u97f3\u306f\u6839\u97f3\u3068\u3082\u547c\u3070\u308c\u308b\u304c\uff08\u4ee5\u964d\uff0cbase key\u3068\u547c\u3076\uff09\uff0c\u4e00\u756a\u3088\u304f\u77e5\u3089\u308c\u3066\u3044\u308b\u306e\u304c\uff0c\"C\"\u3092base key\u3068\u3059\u308b\"C major\"\u3067\uff0c\u3044\u308f\u3086\u308b\u300c\u30c9\u30ec\u30df\u30d5\u30a1\u30bd\u30e9\u30b7\u30c9\u300d\u3067\u3042\u308b\uff0e\uff08\u65e5\u672c\u3067\u306f\u300c\u30cf\u9577\u8abf\u300d\u3068\u3082\u547c\u3070\u308c\u308b\uff0e\uff09 \u307e\u305f\u30e9\u306e\u97f3\u304b\u3089\u59cb\u307e\u308b\u77ed\u8abf\u306f\uff0c\"A minor\" (\u300c\u30a4\u77ed\u8abf\u300d\uff09\u3067\u3042\u308b\uff0e\u3053\u306e\u4e21\u8005\u306e\u97f3\u968e\u3092wikipedia\u304b\u3089\u5f15\u7528\u3055\u305b\u3066\u3044\u305f\u3060\u304f\uff0e\nFig. C major scale\n\nFig. A minor scale\n\n\u304a\u5206\u304b\u308a\u3060\u308d\u3046\u304b\uff1f \u3053\u306e\uff12\u3064\u306e\u97f3\u968e\u3067\u306f\uff0c\u30c8\u97f3\u8a18\u53f7\uff08\u30aa\u30bf\u30de\u30b8\u30e3\u30af\u30b7\uff09\u306e\u53f3\u5074\u306b\u306f\u30b7\u30e3\u30fc\u30d7\u8a18\u53f7\u3082\u30d5\u30e9\u30c3\u30c8\u8a18\u53f7\u3082\u3064\u304b\u306a\u3044\u30d7\u30ec\u30fc\u30f3\u306a \u697d\u8b5c\u306e\u4e0a\u306b\u30b9\u30b1\u30fc\u30eb\u304c\u66f8\u304b\u308c\u3066\u3044\u308b\uff0e\u3064\u307e\u308a\uff0cC major\u3068A minor\u306f\"\u540c\u3058\u69cb\u6210\u97f3\"\u304b\u3089\u6210\u3063\u3066\u3044\u308b\uff0e\uff08\u8981\u7d20\u306f\u540c\u3058\uff0e\uff09\u4e21\u8005\u306e\u9055\u3044\u306fBase key\u304c \"C\" \u304b \"A\"\u304b\u3068\u3044\u3046\u3068\u3053\u308d\u306b\u3042\u308b\uff0e\uff08A minor \u304c\u4f4e\u304f\u30b7\u30d5\u30c8\u3057\u3066\u3044\u308b\uff0e\uff09\u56e0\u307f\u306b\uff0c\u3053\u306e\u3088\u3046\u306a\u69cb\u6210\u97f3\u304c\u540c\u30582\u3064\u306e\u30b9\u30b1\u30fc\u30eb\u306e\u95a2\u4fc2\u3092\u300c\u5e73\u884c\u8abf\u300d\u3068\u547c\u3076\u305d\u3046\u3067\u3042\u308b\uff0e\n\u3055\u3066\u97f3\u697d\u306e\u30b9\u30b1\u30fc\u30eb\u3092\u6271\u3046\u4e0a\u3067\u5404\u97f3\u306b\u6570\u5b57\u3092\u5272\u308a\u632f\u308b\uff0e\nFig. Key mapping\n\n\u4e0a\u56f3\u306f\uff11\u30aa\u30af\u30bf\u30fc\u30d6\u5206\u306e\u9375\u76e4\u3067\u3042\u308b\u304c\uff0c\u4e00\u756a\u5de6\u306e\"C\"\uff08\u30c9\uff09\u304b\u3089\u9806\u756a\u306b 3, 4, 5 ...\u3068\u6574\u6570\u3092\u5272\u308a\u632f\u308b\uff0e\u9ed2\u9375\u304c\u3042\u308b\u3068\u3053\u308d\u3082 \u756a\u53f7\u304c\u5272\u308a\u632f\u3089\u308c\u308b\u306e\u3067\uff0c\u767d\u9375\u3060\u3051\u3092\u898b\u308b\u3068\u3084\u3084\u4e0d\u898f\u5247\u306a\u6570\u5217\u306b\u306a\u308b\u304c\uff0c\u3053\u306e\u3084\u308a\u65b9\u3067\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u9032\u3081\u308b\u3053\u3068\u306b\u3059\u308b\uff0e\n\n\u554f\u984c\u8a2d\u5b9a\u3068\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u751f\u6210\n\u9577\u8abf\uff0c\u77ed\u8abf\u306e\u4ee3\u8868\u7684\u306a\u3082\u306e\u306b\"C major\"\u3068\u201dA minor\u201d\u304c\u3042\u308b\u3053\u3068\u306f\u8ff0\u3079\u305f\u304c\uff0c\u3053\u308c\u3060\u3051\u3067\u306f\u5206\u985e\u554f\u984c\u3068\u3057\u3066\u3064\u307e\u3089\u306a\u3044\u306e\u3067\uff0c5\u3064\u306e \u9577\u8abf\uff0c5\u3064\u306e\u77ed\u8abf\uff0c\u8a0810\u7a2e\u985e\u306e\u97f3\u697d\u30b9\u30b1\u30fc\u30eb\u3092\u6271\u3044\uff0c\u9577\u8abf(major)\u3068\u77ed\u8abf(minor)\u306b\u5927\u5225\u3059\u308b\u554f\u984c\u3092\u8a2d\u5b9a\u3057\u305f\uff0e\n\u7528\u610f\u3057\u305f\u306e\u306f\uff0c\u6b21\u306e10\u7a2e\u985e\u306e\u30b9\u30b1\u30fc\u30eb\uff0e\u9577\u8abf5\u3064\u3068\u77ed\u8abf5\u3064\u3067\u3042\u308b\uff0e\n C major, A minor (\u3053\u308c\u30892\u3064\u306f\u5e73\u884c\u8abf\uff09\uff0c\n G major, E minor (\u3053\u308c\u30892\u3064\u306f\u5e73\u884c\u8abf\uff09\uff0c\n D major, B minor (\u3053\u308c\u30892\u3064\u306f\u5e73\u884c\u8abf\uff09\uff0c\n A major, F sharp minor (\u3053\u308c\u30892\u3064\u306f\u5e73\u884c\u8abf\uff09\uff0c\n E major, C sharp minor (\u3053\u308c\u30892\u3064\u306f\u5e73\u884c\u8abf)\uff0e  \n\u3053\u308c\u308910\u7a2e\u985e\u306e\u30b9\u30b1\u30fc\u30eb\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u3073\uff0c\u66f2\uff08\u97f3\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\uff09\u3092\u751f\u6210\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7528\u3044\u305f\uff0e\u307e\u305a\uff0c\u8abf\u306e\u30eb\u30fc\u30eb\u306b\u5f93\u3046\u5b9a\u6570\u3092\u7528\u610f\u3057\u305f\uff0e\n scale_names = ['Cmj', 'Gmj', 'Dmj', 'Amj', 'Emj', 'Amn', 'Emn', 'Bmn', 'Fsmn', 'Csmn']\n\ncmj_set = [3, 5, 7, 8, 10, 12, 14]\ncmj_base = [3, 15]\namn_base = [12, 24]\n\ngmj_set = [3, 5, 7, 9, 10, 12, 14]\ngmj_base = [10, 22]\nemn_base = [7, 19]\n\ndmj_set = [4, 5, 7, 9, 10, 12, 14]\ndmj_base = [5, 17]\nbmn_base = [14, 26]\n\namj_set = [4, 5, 7, 9, 11, 12, 14] \namj_base = [12, 24]\nfsmn_base = [9, 21]\n\nemj_set = [4, 6, 7, 9, 11, 12, 14] \nemj_base = [7, 19]\ncsmn_base = [4, 16]\n\n\nscale_names \u306f\u30b9\u30b1\u30fc\u30eb\u306e\u6587\u5b57\u5217\u3067\u3042\u308b\uff0e\u6b21\u306b\uff081\u30aa\u30af\u30bf\u30fc\u30d6\u5206\u306e\uff09\uff17\u3064\u306e\u6574\u6570\u304b\u3089\u306a\u308b\u69cb\u6210\u97f3\u306e\u30ea\u30b9\u30c8\u3092\u7528\u610f\u3059\u308b\uff0e\u4f8b\u3048\u3070 C major\u306e\u69cb\u6210\u97f3\u300c\u30c9\u30ec\u30df\u30d5\u30a1\u30bd\u30e9\u30b7\u300d\u3092\u4e0a\u56f3 Key map \u3092\u53c2\u7167\u3057\uff0c[3, 5, 7, 8, 10, 12, 14] \u3068\u8a2d\u5b9a\u3059\u308b\uff0e\u3053\u308c\u30671\u30aa\u30af\u30bf\u30fc\u30d6\u5206\u3067\u3042\u308b\u306e\u3067\uff0c1\u30aa\u30af\u30bf\u30fc\u30d6\u4e0a\u306e\u97f3\u306f\u3053\u306e\u30ea\u30b9\u30c8\u8981\u7d20\u306b 12 \u3092\u8db3\u3057\u3066 [15, 17, 19, 20, 22, 24, 26]\u3068\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\uff0e\u307e\u305f\u305d\u308c\u305e\u308c\u306e\u30b9\u30b1\u30fc\u30eb\u306e Base Key\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304f\uff0eC major\u306e Base Key\u3092 cmj_base = [3, 15] \u306e\u3088\u3046\u306b\u300c\u30c9\u300d\u30681\u30aa\u30af\u30bf\u30fc\u30d6\u4e0a\u306e\u300c\u30c9\u300d\u3068\u3059\u308b\uff0e\n\u6b21\u306b\u77ed\u8abf\u3067\u3042\u308b\u304c\uff0c\u524d\u8a18\u306e\u901a\u308a\uff0cC major\u3068A minor\u306f\u5e73\u884c\u8abf\u306e\u95a2\u4fc2\u306b\u3042\u308a\uff0c\u69cb\u6210\u97f3\u306f\u4e00\u7dd2\u3067\u3042\u308b\uff0eA minor\u306eBase Key\u3060\u3051 amn_base = [12, 24] \uff08\u300c\u30e9\u300d\u306e\u97f3\uff09\u3068\u5b9a\u7fa9\u3059\u308b\uff0e\u5f8c\u3067\uff0cA minor\u306e\u66f2\uff08\u30b7\u30fc\u30b1\u30f3\u30b9\uff09\u3092\u751f\u6210\u3059\u308b\u969b\u306b\u306f\uff0cC major\u306e\u69cb\u6210\u97f3\u30ea\u30b9\u30c8 cmj_set\u3092\u53c2\u7167\u3057\u3066\u884c\u3046\uff0e\u3053\u306e\u3088\u3046\u306a\u300c\u5e73\u884c\u8abf\u300d\u306e\u95a2\u4fc2\u3092\u7528\u3044\u308b\u306e\u3067\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b9\u30b1\u30fc\u30eb\u5b9a\u7fa9\u5b9a\u6570\uff08\u30ea\u30b9\u30c8 in \u30ea\u30b9\u30c8\uff09\u3092\u4e88\u3081\u7528\u610f\u3057\u3066\u4f7f\u7528\u3057\u305f\uff0e\nscale_db = [\n    [cmj_set, cmj_base, amn_base],\n    [gmj_set, gmj_base, emn_base],\n    [dmj_set, dmj_base, bmn_base],\n    [amj_set, amj_base, fsmn_base],\n    [emj_set, emj_base, csmn_base]\n    ]\n\n\n\u6b21\u306b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u751f\u6210\u3067\u3042\u308b\u304c\uff0c\u7591\u4f3c\u30b3\u30fc\u30c9\u3067\u8868\u73fe\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\uff0e\n# Begin\n\u3000\u3000 # 0 .. 9\u3000\u306e\u4e71\u6570\u3092\u767a\u751f\u3055\u305b\uff0c\u5bfe\u5fdc\u3059\u308b 'key' \u3092\u6c7a\u3081\u308b\uff0e\n    key_index = np.random.randint(10)\n\n    # \u6c7a\u3081\u3089\u308c\u305f'key'\u304b\u3089\u305d\u306e\u69cb\u6210\u97f31\u30aa\u30af\u30bf\u30fc\u30d6\u5206\u306e\u30ea\u30b9\u30c8\u3068 Base Key\u30ea\u30b9\u30c8\u3092\u53d6\u308a\u51fa\u3059\uff0e\n    myset, mybase = (scale_db[][], scale_db[][])\n    # \u30b9\u30b1\u30fc\u30eb\u30922\u30aa\u30af\u30bf\u30fc\u30d6\u5206\u306b\u4f38\u9577\u3059\u308b\uff0e\n    myscale2 = prep_2x_scale(myset)\n\n    # \u30b7\u30fc\u30b1\u30f3\u30b9\u9577\u3055\u306e 'for' \u30eb\u30fc\u30d7\n    for i in range(m_len):\n        if i == 0:    # \u521d\u3081\u306e\u97f3\u306f\uff0cBase Key\uff08\uff11\u30aa\u30af\u30bf\u30fc\u30d6\u4e0a\u306e\u97f3\uff09\n        \u3000\u3000cur_key = base[1]\n        else:         # \uff12\u756a\u76ee\u4ee5\u964d\u306e\u97f3\u306f\uff0c\u30e9\u30f3\u30c0\u30e0\u306b\u65b9\u5411\u3092\u6c7a\u3081\u308b\uff0e\n            direct = np.random.randint(7)\n            if t < 3 :\n                \u30b9\u30b1\u30fc\u30eb\u30ea\u30b9\u30c8\u3067\uff0c\u524d\u306e\u97f3\u3088\u308a\u4e00\u3064\u4f4e\u3044\u97f3\u3092\u9078\u629e\u3059\u308b\uff0e\n            if t < 4 :\n                \u524d\u3068\u540c\u3058\u97f3\u3092\u9078\u629e\u3059\u308b\uff0e\n            else:\n                \u30b9\u30b1\u30fc\u30eb\u30ea\u30b9\u30c8\u3067\uff0c\u524d\u306e\u97f3\u3088\u308a\u4e00\u3064\u9ad8\u3044\u97f3\u3092\u9078\u629e\u3059\u308b\uff0e\n\n    \uff03 \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u7d42\u308f\u308a\u65b9\u30c1\u30a7\u30c3\u30af\n    if last_ley in base:    # \u6700\u5f8c\u306e\u97f3\u304c\u3000Base Key\uff1f\n        proper = True\n        \u30c7\u30fc\u30bf\u3068\u3057\u3066\u63a1\u7528\u3059\u308b\uff0e\n    else \n        proper = False\n        \u7d42\u308f\u308a\u65b9\u304c\u3088\u304f\u306a\u3044\u306e\u3067\uff0c\u4eca\u56de\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u306f\u68c4\u3066\u308b\uff0e\n\n# End\n\n\n\u3053\u306e\u3088\u3046\u306b\u4e71\u6570\u3092\u7528\u3044\u3066\uff0c\u97f3\u306eKey\u3092\u793a\u3059\u6570\u5b57\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u751f\u6210\u3057\u3066\u3044\u308b\uff0e\u4efb\u610f\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u9577\u3055\uff0c\u4efb\u610f\u306e\u500b\u6570\u3092\u751f\u6210\u53ef\u80fd\u3067\u3042\u308b\u304c\uff0c\u305d\u306e\u51fa\u529b\u4f8b\u306f\u6b21\u306e\u901a\u308a\u3067\u3042\u308b\uff0e\n\uff08\u4eca\u56de\u306f\uff0c\u30b7\u30fc\u30b1\u30f3\u30b9\u9577\u3055\u309220\u3068\u3057\u3066\u3044\u307e\u3059\uff0e\uff09\n21, 19, 17, 19, 21, 19, 17, 16, 14, 16, 17, 19, 21, 19, 21, 23, 21, 21, 19, 21, Fsmn\n16, 14, 16, 14, 16, 14, 12, 11, 12, 14, 12, 14, 12, 14, 16, 14, 12, 14, 16, 16, Csmn\n26, 24, 24, 24, 22, 22, 24, 22, 24, 22, 24, 22, 22, 21, 22, 24, 24, 22, 24, 26, Bmn\n21, 23, 21, 19, 21, 23, 24, 24, 26, 26, 24, 23, 21, 19, 21, 19, 21, 23, 23, 21, Fsmn\n24, 26, 26, 24, 22, 20, 22, 20, 19, 19, 17, 15, 14, 15, 17, 15, 17, 15, 14, 12, Amn\n ...\n\n\n\u3053\u306e\u3088\u3046\u306b\u6574\u6570\u30b7\u30fc\u30b1\u30f3\u30b9\u3068Key\u306e\u30e9\u30d9\u30eb\uff08\u6587\u5b57\u5217\uff09\u306e\u30bb\u30c3\u30c8\u3092\u51fa\u529b\u3057\u3066\u3044\u308b\u304c\uff0c\uff11\u884c\u76ee\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3067\u306f\uff0c'F sharp minor' \u306e\u30d9\u30fc\u30b9\u97f3 21 \u3067\u59cb\u307e\u308a\uff0c\u540c\u3058\u97f3 21 \u3067\u7d42\u308f\u3063\u3066\u3044\u308b\u306e\u304c\u78ba\u8a8d\u3067\u304d\u308b\uff0e\u307e\u305f5\u884c\u76ee\u306e'A minor' \u30b7\u30fc\u30b1\u30f3\u30b9\u3067\u306f\uff0c\u30d9\u30fc\u30b9\u97f3 24 \u3067\u59cb\u307e\u308a\uff0c\u305d\u306e1\u30aa\u30af\u30bf\u30fc\u30d6\u4e0b\u306e\u30d9\u30fc\u30b9\u97f3 12 \u3067\u7d42\u308f\u3063\u3066\u3044\u308b\u306e\u304c\u78ba\u8a8d\u3067\u304d\u308b\uff0e\n\n\uff08\u88dc\u8db3\uff09\n\u4eca\u56de\u8a2d\u5b9a\u3057\u305f\u554f\u984c\u306f\uff0c\u9577\u8abf\uff08\u660e\u308b\u3044\u611f\u3058\uff09\u3068\u77ed\u8abf\uff08\u6697\u3044\u611f\u3058\uff09\u3092\u5206\u985e\u3059\u308b\u3053\u3068\u3067\u3059\u304c\uff0c\u4e0a\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u751f\u6210\u3057\u305f\u30c7\u30fc\u30bf\u304c\u59a5\u5f53\u306a\u3082\u306e\u304b\u3069\u3046\u304b\u306f\uff0c\u5b9f\u969b\uff0c\u6f14\u594f\u3057\u3066\u805e\u3044\u3066\u307f\u308b\u306e\u304c\u78ba\u304b\u3060\u3068\u601d\u3044\u307e\u3059\uff0e\u79c1\u3082 iPad \u3092\u53d6\u308a\u51fa\u3057\u3066\u30a2\u30d7\u30eaGarageBand\u3067\u9375\u76e4\u3092\u62bc\u3057\u3066\u307f\u307e\u3057\u305f\u304c\uff0c\u66f2\u8abf\uff08\u660e\u308b\u3044/\u6697\u3044\uff09\u304c\u5206\u304b\u308b\u3088\u3046\u306b\u5f3e\u304f\u306e\u306f\u306a\u304b\u306a\u304b\u5927\u5909\u3067\uff0c\u3059\u3050\u306b\u65ad\u5ff5\u3057\u307e\u3057\u305f\uff0e\n\uff08midi\u898f\u683c\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u3057\u3066\u81ea\u52d5\u6f14\u594f\u3059\u308c\u3070\u3088\u304b\u3063\u305f\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\uff0c\u305d\u3053\u307e\u3067\u3084\u308b\u6280\u91cf\u3082\u6839\u6027\u3082\u3042\u308a\u307e\u305b\u3093\uff0e\u4f46\u3057\uff0c\u4eca\u56de\u6271\u3063\u305f10\u7a2e\u985e\u306eKey Scale\u306b\u3064\u3044\u3066\u306f\uff0c\u9375\u76e4\u3092\u53e9\u3044\u3066\uff08\u9650\u5b9a\u7684\u306b\u3067\u3059\u304c\uff09\u660e\u308b\u3044/\u6697\u3044\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\uff0e\uff09\n\nNeural Network\u306e\u30e2\u30c7\u30eb\uff08\u307e\u305aMLP\u3067\u4e8b\u524d\u691c\u8a0e\uff09\nRecurrent Neural Network(RNN)\u3092\u8a66\u3059\u524d\u306b\uff0c\u307e\u305aMulti-layer Perceptron(MLP) \u30e2\u30c7\u30eb\u3067\u3069\u3046\u306a\u308b\u304b\u3092\u8abf\u3079\u3066\u307f\u305f\uff0e\u6240\u5b9a\u9577\u3055\u306e\u97f3\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\uff0c\u305d\u308c\u305e\u308c\u72ec\u7acb\u3057\u305f\u6570\u5b57\u3068\u8003\u3048\uff0c\u3053\u308c\u3092\u500b\u6570\u5206\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30e6\u30cb\u30c3\u30c8\u306b\u5165\u529b\u3057\u3066\u51fa\u529b\u3092\u5f97\u308b\u3068\u3044\u3046\u30e2\u30c7\u30eb\u306b\u306a\u308b\uff0e\u540c\u3058\u69cb\u6210\u97f3\u304b\u3089\uff0c2\u3064\u306e\u8abf\uff08\u9577\u8abf\uff0c\u77ed\u8abf\uff09\u3092\u69cb\u6210\u3067\u304d\u308b\u3053\u3068\u304b\u3089\uff0c\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u7528\u3044\u306a\u3044\u3053\u306e\u30e2\u30c7\u30eb\u3067\u306f\u5206\u985e\u306e\u7cbe\u5ea6\u304c\u4e0a\u304c\u3089\u306a\u3044\u3068\u4e88\u60f3\u3057\u3066\u3044\u305f\uff0e\n\u3053\u306e\u30e2\u30c7\u30ebLayer\u306e\u69cb\u6210\u306f\uff0c\u6b21\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3068\u3057\u305f\uff0e\nclass HiddenLayer(object):\n\n\uff08\u7565\uff09\n\nclass ReadOutLayer(object):\n\n\uff08\u7565\uff09\n\nh_layer1 = HiddenLayer(input=x, n_in=seq_len, n_out=40)            # \u96a0\u308c\u5c641\nh_layer2 = HiddenLayer(input=h_layer1.output(), n_in=40, n_out=40) # \u96a0\u308c\u5c642\no_layer = ReadOutLayer(input=h_layer2.output(), n_in=40, n_out=1)  # \u51fa\u529b\u5c64\n\n\n\u96a0\u308c\u5c64\u304c2\u5c64\uff0c\u6700\u5f8c\u306b\u51fa\u529b\u5c64\u306e\u8a083\u5c64\u306eMLP\u30e2\u30c7\u30eb\u3067\u3042\u308b\uff0e(\u4eca\u56de\uff0c\u30b7\u30fc\u30b1\u30f3\u30b9\u9577\u3055\u306fseq_len=20\u306b\u3057\u3066\u3044\u308b\uff0e\uff09\u3053\u306e\u30e2\u30c7\u30eb\u3067\u884c\u3063\u305f\u8a08\u7b97\u306e\u72b6\u6cc1\u304c\u4e0b\u56f3\u3068\u306a\u308b\uff0e\nFig. Loss & Accuracy by MLP model (RMSProp)\n\n\u8d64\u7dda\u304c\u30b3\u30b9\u30c8\uff0c\u9752\u7dda\u304cTrain Data\u306e\u5206\u985e\u7cbe\u5ea6\u3067\u3042\u308b\uff0e\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\uff08\u3042\u308b\u3044\u306f\u6b63\u5247\u5316\u306e\u51e6\u7406\uff09\u304c\u9069\u5207\u3067\u306a\u304b\u3063\u305f\u305f\u3081\u304b\u632f\u52d5\u7684\u306a\u8a08\u7b97\u3068\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u304c\uff0c\u6700\u7d42\u7684\u306b\u7cbe\u5ea6\u304c 0.65 \u3068\u306a\u3063\u3066\u3044\u308b\uff0e2\u5024\u5206\u985e\u554f\u984c\u306a\u306e\u3067\uff0c\u30b5\u30a4\u30b3\u30ed\u3092\u632f\u308b or \u30b3\u30a4\u30f3\u30fb\u30c8\u30b9\u3092\u884c\u3063\u3066\u9069\u5f53\u306b\u5206\u985e\u3059\u308c\u3070\uff0c\u7cbe\u5ea6 0.50 \u306a\u306e\u3067\uff0c\u3053\u306e\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u304b\u3089\u306f\u82e5\u5e72\u6539\u5584\u3057\u305f\u7cbe\u5ea6\u3068\u306a\u3063\u305f\uff0e\u601d\u3063\u3066\u3044\u305f\u307b\u3069\u306b\u306f\u60aa\u304f\u306a\u304b\u3063\u305f\u3068\u3044\u3046\u5370\u8c61\u3067\u3042\u308b\uff0e\n\u8a08\u7b97\u306e\u521d\u671f\u306bLoss\u3068Accuracy\u304c\u505c\u6ede\u3057\u3066\u3044\u308b\u90e8\u5206\u3068\uff0c\u8a08\u7b97\u304c\u632f\u52d5\u7684\u306b\u306a\u3063\u3066\u3044\u308b\u70b9\u304c\u6c17\u306b\u306a\u3063\u305f\u306e\u3067\uff0c\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u3092\u5909\u3048\u3066\u8a08\u7b97\u3057\u3066\u307f\u305f\u7d50\u679c\u304c\u4e0b\u56f3\uff0e\nFig. Loss & Accuracy by MLP model (Gradient Descent)\n\n\u8a08\u7b97\u306e\u632f\u52d5\u306f\u306a\u304f\u306a\u3063\u305f\u304c\uff0c\u8a08\u7b97\u521d\u671f\u306e\u505c\u6ede\u306f\u6b8b\u3063\u3066\u3044\u308b\uff0e\u307e\u305f\u7cbe\u5ea6\u306f\u7d04 0.67 \u3068\u308f\u305a\u304b\u306a\u304c\u3089\u5411\u4e0a\u3057\u3066\u3044\u308b\uff0e\n\nRNN (Elman Net)\u3067\u8a08\u7b97\u3057\u3066\u307f\u305f\u304c...\n\u6b21\u306b\u672c\u547d\uff0c\u30b7\u30f3\u30d7\u30eb\u306aRNN(Recurrent Nueral Network)\u3067\u3042\u308bElman Net\u3092\u7528\u3044\u3066\u8a08\u7b97\u3092\u884c\u3063\u305f\uff0e\u3053\u306e\u30e2\u30c7\u30eb\u306e\u4e3b\u8981\u90e8\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3068\u3057\u305f\uff0e\nclass simpleRNN(object):\n    #   members:  slen  : state length\n    #             w_x   : weight of input-->hidden layer\n    #             w_rec : weight of recurrnce \n    def __init__(self, slen, nx, nrec, ny):\n        self.len = slen\n        self.w_h = theano.shared(\n            np.asarray(np.random.uniform(-.1, .1, (nx)),\n            dtype=theano.config.floatX)\n        )\n        self.w_rec = theano.shared(\n            np.asarray(np.random.uniform(-.1, .1, (nrec)),\n            dtype=theano.config.floatX)\n        )\n        self.w_o = theano.shared(\n            np.asarray(np.random.uniform(-1., .1, (ny)),\n            dtype=theano.config.floatX)\n        )\n        self.b_h = theano.shared(\n            np.asarray(0., dtype=theano.config.floatX)            \n        )\n        self.b_o = theano.shared(\n            np.asarray(0., dtype=theano.config.floatX)\n        )\n\n    def state_update(self, x_t, s0):\n        # this is the network updater for simpleRNN\n        def inner_fn(xv, s_tm1, wx, wr, wo, bh, bo):\n            s_t = xv * wx + s_tm1 * wr + bh\n            y_t = T.nnet.sigmoid(s_t * wo + bo)\n\n            return [s_t, y_t]\n\n        w_h_vec = self.w_h[0]\n        w_rec_vec = self.w_rec[0]\n        w_o = self.w_o[0]\n        b_h = self.b_h\n        b_o = self.b_o\n\n        [s_t, y_t], updates = theano.scan(fn=inner_fn,\n                        sequences=[x_t],\n                        outputs_info=[s0, None],\n                        non_sequences=[w_h_vec, w_rec_vec, w_o, b_h, b_o]\n        )\n        return y_t\n\uff08\u4e2d\u7565\uff09\n\n    net = simpleRNN(seq_len, 1, 1, 1)\n    y_t = net.state_update(x_t, s0)\n    y_hypo = y_t[-1]\n    prediction = y_hypo > 0.5\n\n    cross_entropy = T.nnet.binary_crossentropy(y_hypo, y_)\n\n\n\u8aac\u660e\u306e\u305f\u3081\u306b\u56f3\u3092\u53c2\u7167\u3059\u308b\uff0e\nFig. Simple RNN structure\n\n\u56f3\u306f\uff0cBPTT\u6cd5(Backpropagation through time)\u3092\u524d\u63d0\u306b\uff0c\u6642\u7cfb\u5217\u7684\u306b\u5c55\u958b\u3057\u305f\u69cb\u6210\u3092\u793a\u3057\u3066\u3044\u308b\uff0e\u97f3\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u30c7\u30fc\u30bf\u306f\uff0c[X1, X2, X3, ..., Xn] \u3068\u3057\u3066\u3053\u306e\u30e2\u30c7\u30eb\u306b\u5165\u529b\u3055\u308c\u308b\uff0e\u3053\u308c\u304c\u91cd\u307f\u3092\u304b\u3051\u305f\u5f8c\u96a0\u308c\u5c64S\u306b\u51fa\u529b\u3055\u308c\uff0c\u518d\u5e30\u3092\u8a08\u7b97\uff0c\u6700\u5f8c\u306b\u7cfb\u5217 [Y1, Y2, Y3, ..., Yn] \u304c\u51fa\u529b\u3055\u308c\u308b\uff0e\u3053\u306eY\u7cfb\u5217\u306e\u6700\u5f8c\u306e\u30e6\u30cb\u30c3\u30c8 Yn \u306e\u51fa\u529b\u3092\u6d3b\u6027\u5316\u95a2\u6570(Activation Function)\u3092\u901a\u3057\u30662\u5024\u306e\u6570\u5b57(0 or 1)\u3092\u5f97\u308b\uff0e\n\u671f\u5f85\u3092\u8fbc\u3081\u3066\u8a08\u7b97\u3092\u5b9f\u884c\u3057\u3066\u307f\u305f\u304c\uff0c\u6b8b\u5ff5\u306a\u7d50\u679c\u3068\u306a\u3063\u305f\uff0e\nFig. Loss & Accuracy by 1st RNN model (RMSProp)\n\n\u307b\u3068\u3093\u3069\u5b66\u7fd2\u304c\u9032\u884c\u305b\u305a\uff0c\u6700\u7d42\u7684\u306a\u7cbe\u5ea6\u306f 0.58 \u3067\u30bc\u30ed\u6027\u80fd 0.5 \u3068\u5927\u5dee\u306a\u3057\u306e\u7d50\u679c\u3067\u3042\u308b\uff0e\uff08\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u3068\u5909\u3048\u305f\u308a\uff0c\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3044\u3058\u3063\u3066\u307f\u3066\u3082\u3060\u3081\u3067\u3057\u305f\uff0e\uff09\n\u539f\u56e0\u3068\u3057\u3066\u306f\uff0c\u51fa\u529b\u30b7\u30fc\u30b1\u30f3\u30b9\u306e [Yn] \u306e\u307f\u3092\u53c2\u7167\u3057\uff0c\u6b8b\u308a\u306e\u60c5\u5831 [Y1 .. Yn-1] \u3092\u6368\u3066\u305f\u305f\u3081\u3067\u306f\u306a\u3044\u304b\u3068\u8003\u3048\u305f\uff0e\u305d\u3053\u3067\u30e2\u30c7\u30eb\u306e\u6539\u826f\u3092\u691c\u8a0e\u3057\u305f\uff0e\n\nRNN\u6539\u826f\u30e2\u30c7\u30eb\uff08\u51fa\u529b\u5c64\u3092\u8ffd\u52a0\uff09\n\u30b7\u30fc\u30b1\u30f3\u30b9 [Y1, Y2, ..., Yn] \u306e\u51fa\u529b\u5024\u3092\u3059\u3079\u3066\u53c2\u7167\u3059\u308b\u305f\u3081\uff0c\u3053\u308c\u3089\u306b\u91cd\u307f\u3092\u304b\u3051\u3066\u5206\u985e\u306e\u305f\u3081\u306e\u4fe1\u53f7\u3092\u3064\u304f\u308b\u3053\u3068\u306b\u3057\u305f\uff0e\nFig. Simple RNN + Read-out Layer structure\n\n\u30b3\u30fc\u30c9\u3068\u3057\u3066\u306f\uff0cMLP\u30e2\u30c7\u30eb\u306e\u51fa\u529b\u5c64\u90e8\u5206\u3092\u633f\u5165\u3057\u3066\u4f5c\u6210\u3057\u3066\u3044\u308b\uff0e\nclass simpleRNN(object):\n    #   members:  slen  : state length\n    #             w_x   : weight of input-->hidden layer\n    #             w_rec : weight of recurrnce \n    def __init__(self, slen, nx, nrec, ny):\n\n    \uff08\u7565\uff09\n\n    def state_update(self, x_t, s0):\n\n    \uff08\u7565\uff09\n\nclass ReadOutLayer(object):                 # <==== \u8ffd\u52a0\u30af\u30e9\u30b9\n    def __init__(self, input, n_in, n_out):\n        self.input = input\n\n        w_o_np = 0.05 * (np.random.standard_normal([n_in,n_out]))\n        w_o = theano.shared(np.asarray(w_o_np, dtype=theano.config.floatX))\n        b_o = theano.shared(\n            np.asarray(np.zeros(n_out, dtype=theano.config.floatX))\n        )\n\n        self.w = w_o\n        self.b = b_o\n        self.params = [self.w, self.b]\n\n    def output(self):\n        linarg = T.dot(self.input, self.w) + self.b\n        self.output = T.nnet.sigmoid(linarg)  \n\n        return self.output\n\n    \uff08\u7565\uff09\n\n    net = simpleRNN(seq_len, 1, 1, 1)\n    y_t = net.state_update(x_t, s0)\n    y_tt = T.transpose(y_t)\n    ro_layer = ReadOutLayer(input=y_tt, n_in=seq_len, n_out=1)  # <==== \u8ffd\u52a0\n\n    y_hypo = (ro_layer.output()).flatten()\n    prediction = y_hypo > 0.5\n\n    cross_entropy = T.nnet.binary_crossentropy(y_hypo, y_)\n\n    \uff08\u7565\uff09\n\n\u3053\u308c\u3067\u8a08\u7b97\u3092\u5b9f\u884c\u3057\u305f\u72b6\u6cc1\u306f\uff0c\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u305f\uff0e\nFig. Loss & Accuracy by 2nd RNN model (RMSProp)\n\n\u5b66\u7fd2\u304c\u9032\u884c\u3057\uff0c\u6700\u7d42\u7684\u306a\u7cbe\u5ea6\u3082 0.73 \u3068\u5411\u4e0a\u3057\u305f\uff0e\u7406\u7531\u3068\u3057\u3066\u306f\uff0c\u306d\u3089\u3044\u901a\u308a\u51fa\u529b\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u60c5\u5831\u3092\u3046\u307e\u304f\u53d6\u308a\u51fa\u305b\u305f\u3053\u3068\u3084\uff0c\u91cd\u307f\u4fc2\u6570(weights) \u306e\u6570\u304c\u5897\u3048\u3066 Network \u306e\u81ea\u7531\u5ea6\u304c\u4e0a\u304c\u3063\u305f\u305f\u3081\uff0c\u5b66\u7fd2\u904e\u7a0b\u3067\u306e\u9069\u5408\u5ea6\uff08\u67d4\u8edf\u6027\uff09\u304c\u4e0a\u304c\u3063\u305f\u305f\u3081\u3068\u8003\u3048\u3066\u3044\u308b\uff0e\n\u3057\u304b\u3057\u7cbe\u5ea6 0.73 \u3067\u306f\uff0c\u5f53\u521d\u306e\u671f\u5f85\u5024\u4ee5\u4e0b\u3067\u3042\u308b\uff0e\uff08\u76ee\u6a19\u3068\u3057\u3066 0.9 + \u306e\u5206\u985e\u7cbe\u5ea6\u3092\u8003\u3048\u3066\u3044\u307e\u3057\u305f\uff0e\uff09\u3082\u3046\u5c11\u3057\u5404weights\u306e\u52d5\u304d\u306a\u3069\u3092\u8abf\u67fb\u3057\u3066\u6539\u826f\u3059\u308c\u3070\uff0c\u66f4\u306a\u308b\u7cbe\u5ea6up\u304c\u3067\u304d\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u304c\uff0c\u4eca\u56de\u306f\u3053\u3053\u307e\u3067\u3068\u3057\u305f\u3044\uff0e\n\u4eca\u56de\u306f\uff0c\u97f3\u697d\u30c7\u30fc\u30bf\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4e71\u6570\u3067\u4f5c\u3063\u305f\u4eba\u5de5\u7684\u306a\u3082\u306e\u3092\u4f7f\u3063\u305f\u304c\uff0c\u3053\u308c\u3082\u4eca\u56de\u306e\u4f4e\u7cbe\u5ea6\u306b\u5f71\u97ff\u3057\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u8003\u3048\u3066\u3044\u308b\uff0e\uff08\u5b9f\u969b\u306e\u97f3\u697d\u306b\u306f\u3082\u3063\u3068\u8907\u96d1\u306a\u30eb\u30fc\u30eb\u304c\u3042\u308b\u306e\u3067\u306f\uff1f\uff09\u30c7\u30fc\u30bf\u7b49\u3092\u5165\u624b\u3067\u304d\u308c\u3070\uff0c\u4eba\u9593\u304c\u4f5c\u3063\u305f\u30e1\u30ed\u30c7\u30a3\u30fc\u306b\u5bfe\u3057\u3066\u9577\u8abf\uff0f\u77ed\u8abf\u306e\u5206\u985e\u3092\u3084\u3063\u3066\u307f\u305f\u3044\uff0e(\u97f3\u697d\u7406\u8ad6\u306b\u3064\u3044\u3066\u3082\uff0c\u3082\u3046\u5c11\u3057\u52c9\u5f37\u304c\u5fc5\u8981\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e\uff09\n\n\u53c2\u8003\u6587\u732e (web site)\n\n\u8abf - Wikipedia\n\u30cf\u9577\u8abf - Wikipedia\n\u30a4\u77ed\u8abf - Wikipedia\n[pdf] Artificial Neural Networks that Classify Music Chords\nTheano scan\u3000- Looping in Theano\nhttp://deeplearning.net/software/theano/library/scan.html\n\nTheano optimizers - Gist/ kastnerkyle/opimizers.py\nhttps://gist.github.com/kastnerkyle/816134462577399ee8b2\n\n\u6df1\u5c64\u5b66\u7fd2\uff0c\u8b1b\u8ac7\u793e\u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb\u30b7\u30ea\u30fc\u30ba\n\n\n\u5148\u65e5\uff0c\u30b7\u30f3\u30d7\u30eb\u306aRecurrent Neural Network\uff08\u518d\u5e30\u578b\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\uff09\u306e\u30b3\u30fc\u30c9\u3092\u8abf\u3079\u3066\u307f\u305f\u304c\uff0c\u3053\u308c\u3092\u4f7f\u3063\u3066\u4f55\u304b\u3084\u3063\u3066\u307f\u305f\u3044\u3068\u3044\u3046\u767a\u60f3\u304b\u3089\uff0c\u97f3\u697d\u306e\u8abf\uff0c\u9577\u8abf\uff0f\u77ed\u8abf\u3092\u5206\u985e\u3067\u304d\u306a\u3044\u304b\uff0c\u304c\u601d\u3044\u6d6e\u304b\u3093\u3060\uff0e\u3082\u3061\u308d\u3093\u97f3\u697d\u306b\u8a73\u3057\u3044\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\uff0cWikipedia\u7b49\u3067\u9577\u8abf\uff0c\u77ed\u8abf\u306b\u3064\u3044\u3066\u8abf\u3079\u308b\u3053\u3068\u304b\u3089\u59cb\u3081\u3066\u307f\u305f\uff0e\n\n> \u8abf\uff08\u3061\u3087\u3046\uff0ckey\uff09\u306f\u97f3\u697d\u7528\u8a9e\u306e\u4e00\u3064\uff0e\u30e1\u30ed\u30c7\u30a3\u30fc\u3084\u548c\u97f3\u304c\uff0c\u4e2d\u5fc3\u97f3\u3068\u95a2\u9023\u4ed8\u3051\u3089\u308c\u3066\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u3068\u304d\uff0c\u305d\u306e\u97f3\u697d\u306f\u8abf\u6027\u304c\u3042\u308b\u3068\u3044\u3046\uff0e\u72ed\u7fa9\u306b\u306f\uff0c\u4f1d\u7d71\u7684\u306a\u897f\u6d0b\u97f3\u697d\u306b\u304a\u3044\u3066\uff0c\u5168\u97f3\u968e(diatonic scale)\u306e\u97f3\u304b\u3089\u69cb\u6210\u3055\u308c\u308b\u9577\u8abf(major key)\u3068\u77ed\u8abf(minor key)\u306e2\u3064\u306e\u8abf\u304c\u77e5\u3089\u308c\uff0c\u305d\u308c\u305e\u308c\u5168\u97f3\u968e\u306e\u30c9\u306e\u97f3\u3068\u30e9\u306e\u97f3\u304c\u4e2d\u5fc3\u97f3\u3067\u3042\u308b\uff0e\n\n\u57fa\u672c\u5b9a\u7fa9\u3068\u3057\u3066\u306f\u3053\u306e\u3088\u3046\u306a\u8aac\u660e\u3068\u306a\u308b\u304c\uff0c\u5c0f\u4e2d\u5b66\u6821\u3067\u5b66\u3093\u3060\u901a\u308a\uff0c\u9577\u8abf\u306f\u300c\u660e\u308b\u304f\u5143\u6c17\u306a\u611f\u3058\u300d\u306b\u805e\u3053\u3048\u308b\u306e\u306b\u5bfe\u3057\uff0c\u77ed\u8abf\u306f\u300c\u6697\u304f\u91cd\u82e6\u3057\u3044\u611f\u3058\u300d\u306b\u805e\u3053\u3048\u308b\u66f2\u8abf\u3067\u3042\u308b\uff0e\u3053\u308c\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u5206\u985e\u3067\u304d\u306a\u3044\u304b\u306b\u3064\u3044\u3066\u8abf\u3079\u3066\u307f\u305f\uff0e\n\n## \u9577\u8abf(major key)\u3068\u77ed\u8abf(minor key)\u306e\u8aac\u660e\u3092\u3082\u3046\u5c11\u3057\n\n\u4e2d\u5fc3\u97f3\u306f\u6839\u97f3\u3068\u3082\u547c\u3070\u308c\u308b\u304c\uff08\u4ee5\u964d\uff0cbase key\u3068\u547c\u3076\uff09\uff0c\u4e00\u756a\u3088\u304f\u77e5\u3089\u308c\u3066\u3044\u308b\u306e\u304c\uff0c\"C\"\u3092base key\u3068\u3059\u308b\"C major\"\u3067\uff0c\u3044\u308f\u3086\u308b\u300c\u30c9\u30ec\u30df\u30d5\u30a1\u30bd\u30e9\u30b7\u30c9\u300d\u3067\u3042\u308b\uff0e\uff08\u65e5\u672c\u3067\u306f\u300c\u30cf\u9577\u8abf\u300d\u3068\u3082\u547c\u3070\u308c\u308b\uff0e\uff09 \u307e\u305f\u30e9\u306e\u97f3\u304b\u3089\u59cb\u307e\u308b\u77ed\u8abf\u306f\uff0c\"A minor\" (\u300c\u30a4\u77ed\u8abf\u300d\uff09\u3067\u3042\u308b\uff0e\u3053\u306e\u4e21\u8005\u306e\u97f3\u968e\u3092wikipedia\u304b\u3089\u5f15\u7528\u3055\u305b\u3066\u3044\u305f\u3060\u304f\uff0e\n \n **Fig. C major scale**\n![C_major_scale.png](https://qiita-image-store.s3.amazonaws.com/0/74152/4b8d69c5-37dc-9e32-9400-88cec3793a57.png)\n \n **Fig. A minor scale**\n![A_minor_scale.png](https://qiita-image-store.s3.amazonaws.com/0/74152/80e0b9c6-3680-4672-29ed-1781ffe5d290.png)\n \n  \u304a\u5206\u304b\u308a\u3060\u308d\u3046\u304b\uff1f \u3053\u306e\uff12\u3064\u306e\u97f3\u968e\u3067\u306f\uff0c\u30c8\u97f3\u8a18\u53f7\uff08\u30aa\u30bf\u30de\u30b8\u30e3\u30af\u30b7\uff09\u306e\u53f3\u5074\u306b\u306f\u30b7\u30e3\u30fc\u30d7\u8a18\u53f7\u3082\u30d5\u30e9\u30c3\u30c8\u8a18\u53f7\u3082\u3064\u304b\u306a\u3044\u30d7\u30ec\u30fc\u30f3\u306a \u697d\u8b5c\u306e\u4e0a\u306b\u30b9\u30b1\u30fc\u30eb\u304c\u66f8\u304b\u308c\u3066\u3044\u308b\uff0e\u3064\u307e\u308a\uff0cC major\u3068A minor\u306f\"\u540c\u3058\u69cb\u6210\u97f3\"\u304b\u3089\u6210\u3063\u3066\u3044\u308b\uff0e\uff08\u8981\u7d20\u306f\u540c\u3058\uff0e\uff09\u4e21\u8005\u306e\u9055\u3044\u306fBase key\u304c \"C\" \u304b \"A\"\u304b\u3068\u3044\u3046\u3068\u3053\u308d\u306b\u3042\u308b\uff0e\uff08A minor \u304c\u4f4e\u304f\u30b7\u30d5\u30c8\u3057\u3066\u3044\u308b\uff0e\uff09\u56e0\u307f\u306b\uff0c\u3053\u306e\u3088\u3046\u306a\u69cb\u6210\u97f3\u304c\u540c\u30582\u3064\u306e\u30b9\u30b1\u30fc\u30eb\u306e\u95a2\u4fc2\u3092\u300c\u5e73\u884c\u8abf\u300d\u3068\u547c\u3076\u305d\u3046\u3067\u3042\u308b\uff0e\n \n \u3055\u3066\u97f3\u697d\u306e\u30b9\u30b1\u30fc\u30eb\u3092\u6271\u3046\u4e0a\u3067\u5404\u97f3\u306b\u6570\u5b57\u3092\u5272\u308a\u632f\u308b\uff0e\n \n **Fig. Key mapping**\n![music_keyboard.png](https://qiita-image-store.s3.amazonaws.com/0/74152/b694d9ed-1276-77a6-a8ea-754a407922c5.png)\n \n \u4e0a\u56f3\u306f\uff11\u30aa\u30af\u30bf\u30fc\u30d6\u5206\u306e\u9375\u76e4\u3067\u3042\u308b\u304c\uff0c\u4e00\u756a\u5de6\u306e\"C\"\uff08\u30c9\uff09\u304b\u3089\u9806\u756a\u306b 3, 4, 5 ...\u3068\u6574\u6570\u3092\u5272\u308a\u632f\u308b\uff0e\u9ed2\u9375\u304c\u3042\u308b\u3068\u3053\u308d\u3082 \u756a\u53f7\u304c\u5272\u308a\u632f\u3089\u308c\u308b\u306e\u3067\uff0c\u767d\u9375\u3060\u3051\u3092\u898b\u308b\u3068\u3084\u3084\u4e0d\u898f\u5247\u306a\u6570\u5217\u306b\u306a\u308b\u304c\uff0c\u3053\u306e\u3084\u308a\u65b9\u3067\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u9032\u3081\u308b\u3053\u3068\u306b\u3059\u308b\uff0e\n\n## \u554f\u984c\u8a2d\u5b9a\u3068\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u751f\u6210\n \n \u9577\u8abf\uff0c\u77ed\u8abf\u306e\u4ee3\u8868\u7684\u306a\u3082\u306e\u306b\"C major\"\u3068\u201dA minor\u201d\u304c\u3042\u308b\u3053\u3068\u306f\u8ff0\u3079\u305f\u304c\uff0c\u3053\u308c\u3060\u3051\u3067\u306f\u5206\u985e\u554f\u984c\u3068\u3057\u3066\u3064\u307e\u3089\u306a\u3044\u306e\u3067\uff0c5\u3064\u306e \u9577\u8abf\uff0c5\u3064\u306e\u77ed\u8abf\uff0c\u8a0810\u7a2e\u985e\u306e\u97f3\u697d\u30b9\u30b1\u30fc\u30eb\u3092\u6271\u3044\uff0c\u9577\u8abf(major)\u3068\u77ed\u8abf(minor)\u306b\u5927\u5225\u3059\u308b\u554f\u984c\u3092\u8a2d\u5b9a\u3057\u305f\uff0e\n \n \u7528\u610f\u3057\u305f\u306e\u306f\uff0c\u6b21\u306e10\u7a2e\u985e\u306e\u30b9\u30b1\u30fc\u30eb\uff0e\u9577\u8abf5\u3064\u3068\u77ed\u8abf5\u3064\u3067\u3042\u308b\uff0e\n C major, A minor (\u3053\u308c\u30892\u3064\u306f\u5e73\u884c\u8abf\uff09\uff0c  \n G major, E minor (\u3053\u308c\u30892\u3064\u306f\u5e73\u884c\u8abf\uff09\uff0c  \n D major, B minor (\u3053\u308c\u30892\u3064\u306f\u5e73\u884c\u8abf\uff09\uff0c  \n A major, F sharp minor (\u3053\u308c\u30892\u3064\u306f\u5e73\u884c\u8abf\uff09\uff0c  \n E major, C sharp minor (\u3053\u308c\u30892\u3064\u306f\u5e73\u884c\u8abf)\uff0e  \n \n \u3053\u308c\u308910\u7a2e\u985e\u306e\u30b9\u30b1\u30fc\u30eb\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u3073\uff0c\u66f2\uff08\u97f3\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\uff09\u3092\u751f\u6210\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7528\u3044\u305f\uff0e\u307e\u305a\uff0c\u8abf\u306e\u30eb\u30fc\u30eb\u306b\u5f93\u3046\u5b9a\u6570\u3092\u7528\u610f\u3057\u305f\uff0e\n \n ```py\n scale_names = ['Cmj', 'Gmj', 'Dmj', 'Amj', 'Emj', 'Amn', 'Emn', 'Bmn', 'Fsmn', 'Csmn']\n\ncmj_set = [3, 5, 7, 8, 10, 12, 14]\ncmj_base = [3, 15]\namn_base = [12, 24]\n\ngmj_set = [3, 5, 7, 9, 10, 12, 14]\ngmj_base = [10, 22]\nemn_base = [7, 19]\n\ndmj_set = [4, 5, 7, 9, 10, 12, 14]\ndmj_base = [5, 17]\nbmn_base = [14, 26]\n\namj_set = [4, 5, 7, 9, 11, 12, 14] \namj_base = [12, 24]\nfsmn_base = [9, 21]\n\nemj_set = [4, 6, 7, 9, 11, 12, 14] \nemj_base = [7, 19]\ncsmn_base = [4, 16]\n\n```\n \nscale_names \u306f\u30b9\u30b1\u30fc\u30eb\u306e\u6587\u5b57\u5217\u3067\u3042\u308b\uff0e\u6b21\u306b\uff081\u30aa\u30af\u30bf\u30fc\u30d6\u5206\u306e\uff09\uff17\u3064\u306e\u6574\u6570\u304b\u3089\u306a\u308b\u69cb\u6210\u97f3\u306e\u30ea\u30b9\u30c8\u3092\u7528\u610f\u3059\u308b\uff0e\u4f8b\u3048\u3070 C major\u306e\u69cb\u6210\u97f3\u300c\u30c9\u30ec\u30df\u30d5\u30a1\u30bd\u30e9\u30b7\u300d\u3092\u4e0a\u56f3 Key map \u3092\u53c2\u7167\u3057\uff0c`[3, 5, 7, 8, 10, 12, 14]` \u3068\u8a2d\u5b9a\u3059\u308b\uff0e\u3053\u308c\u30671\u30aa\u30af\u30bf\u30fc\u30d6\u5206\u3067\u3042\u308b\u306e\u3067\uff0c1\u30aa\u30af\u30bf\u30fc\u30d6\u4e0a\u306e\u97f3\u306f\u3053\u306e\u30ea\u30b9\u30c8\u8981\u7d20\u306b `12` \u3092\u8db3\u3057\u3066 `[15, 17, 19, 20, 22, 24, 26]`\u3068\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\uff0e\u307e\u305f\u305d\u308c\u305e\u308c\u306e\u30b9\u30b1\u30fc\u30eb\u306e Base Key\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304f\uff0eC major\u306e Base Key\u3092 `cmj_base = [3, 15]` \u306e\u3088\u3046\u306b\u300c\u30c9\u300d\u30681\u30aa\u30af\u30bf\u30fc\u30d6\u4e0a\u306e\u300c\u30c9\u300d\u3068\u3059\u308b\uff0e\n\n\u6b21\u306b\u77ed\u8abf\u3067\u3042\u308b\u304c\uff0c\u524d\u8a18\u306e\u901a\u308a\uff0cC major\u3068A minor\u306f\u5e73\u884c\u8abf\u306e\u95a2\u4fc2\u306b\u3042\u308a\uff0c\u69cb\u6210\u97f3\u306f\u4e00\u7dd2\u3067\u3042\u308b\uff0eA minor\u306eBase Key\u3060\u3051 `amn_base = [12, 24]` \uff08\u300c\u30e9\u300d\u306e\u97f3\uff09\u3068\u5b9a\u7fa9\u3059\u308b\uff0e\u5f8c\u3067\uff0cA minor\u306e\u66f2\uff08\u30b7\u30fc\u30b1\u30f3\u30b9\uff09\u3092\u751f\u6210\u3059\u308b\u969b\u306b\u306f\uff0cC major\u306e\u69cb\u6210\u97f3\u30ea\u30b9\u30c8 `cmj_set`\u3092\u53c2\u7167\u3057\u3066\u884c\u3046\uff0e\u3053\u306e\u3088\u3046\u306a\u300c\u5e73\u884c\u8abf\u300d\u306e\u95a2\u4fc2\u3092\u7528\u3044\u308b\u306e\u3067\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b9\u30b1\u30fc\u30eb\u5b9a\u7fa9\u5b9a\u6570\uff08\u30ea\u30b9\u30c8 in \u30ea\u30b9\u30c8\uff09\u3092\u4e88\u3081\u7528\u610f\u3057\u3066\u4f7f\u7528\u3057\u305f\uff0e\n\n```py\nscale_db = [\n    [cmj_set, cmj_base, amn_base],\n    [gmj_set, gmj_base, emn_base],\n    [dmj_set, dmj_base, bmn_base],\n    [amj_set, amj_base, fsmn_base],\n    [emj_set, emj_base, csmn_base]\n    ]\n\n```\n\n\u6b21\u306b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u751f\u6210\u3067\u3042\u308b\u304c\uff0c\u7591\u4f3c\u30b3\u30fc\u30c9\u3067\u8868\u73fe\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\uff0e\n\n```\n# Begin\n\u3000\u3000 # 0 .. 9\u3000\u306e\u4e71\u6570\u3092\u767a\u751f\u3055\u305b\uff0c\u5bfe\u5fdc\u3059\u308b 'key' \u3092\u6c7a\u3081\u308b\uff0e\n    key_index = np.random.randint(10)\n    \n    # \u6c7a\u3081\u3089\u308c\u305f'key'\u304b\u3089\u305d\u306e\u69cb\u6210\u97f31\u30aa\u30af\u30bf\u30fc\u30d6\u5206\u306e\u30ea\u30b9\u30c8\u3068 Base Key\u30ea\u30b9\u30c8\u3092\u53d6\u308a\u51fa\u3059\uff0e\n    myset, mybase = (scale_db[][], scale_db[][])\n    # \u30b9\u30b1\u30fc\u30eb\u30922\u30aa\u30af\u30bf\u30fc\u30d6\u5206\u306b\u4f38\u9577\u3059\u308b\uff0e\n    myscale2 = prep_2x_scale(myset)\n    \n    # \u30b7\u30fc\u30b1\u30f3\u30b9\u9577\u3055\u306e 'for' \u30eb\u30fc\u30d7\n    for i in range(m_len):\n        if i == 0:    # \u521d\u3081\u306e\u97f3\u306f\uff0cBase Key\uff08\uff11\u30aa\u30af\u30bf\u30fc\u30d6\u4e0a\u306e\u97f3\uff09\n        \u3000\u3000cur_key = base[1]\n        else:         # \uff12\u756a\u76ee\u4ee5\u964d\u306e\u97f3\u306f\uff0c\u30e9\u30f3\u30c0\u30e0\u306b\u65b9\u5411\u3092\u6c7a\u3081\u308b\uff0e\n            direct = np.random.randint(7)\n            if t < 3 :\n                \u30b9\u30b1\u30fc\u30eb\u30ea\u30b9\u30c8\u3067\uff0c\u524d\u306e\u97f3\u3088\u308a\u4e00\u3064\u4f4e\u3044\u97f3\u3092\u9078\u629e\u3059\u308b\uff0e\n            if t < 4 :\n                \u524d\u3068\u540c\u3058\u97f3\u3092\u9078\u629e\u3059\u308b\uff0e\n            else:\n                \u30b9\u30b1\u30fc\u30eb\u30ea\u30b9\u30c8\u3067\uff0c\u524d\u306e\u97f3\u3088\u308a\u4e00\u3064\u9ad8\u3044\u97f3\u3092\u9078\u629e\u3059\u308b\uff0e\n                \n    \uff03 \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u7d42\u308f\u308a\u65b9\u30c1\u30a7\u30c3\u30af\n    if last_ley in base:    # \u6700\u5f8c\u306e\u97f3\u304c\u3000Base Key\uff1f\n        proper = True\n        \u30c7\u30fc\u30bf\u3068\u3057\u3066\u63a1\u7528\u3059\u308b\uff0e\n    else \n        proper = False\n        \u7d42\u308f\u308a\u65b9\u304c\u3088\u304f\u306a\u3044\u306e\u3067\uff0c\u4eca\u56de\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u306f\u68c4\u3066\u308b\uff0e\n\n# End\n\n```\n\n\u3053\u306e\u3088\u3046\u306b\u4e71\u6570\u3092\u7528\u3044\u3066\uff0c\u97f3\u306eKey\u3092\u793a\u3059\u6570\u5b57\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u751f\u6210\u3057\u3066\u3044\u308b\uff0e\u4efb\u610f\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u9577\u3055\uff0c\u4efb\u610f\u306e\u500b\u6570\u3092\u751f\u6210\u53ef\u80fd\u3067\u3042\u308b\u304c\uff0c\u305d\u306e\u51fa\u529b\u4f8b\u306f\u6b21\u306e\u901a\u308a\u3067\u3042\u308b\uff0e\n\uff08\u4eca\u56de\u306f\uff0c\u30b7\u30fc\u30b1\u30f3\u30b9\u9577\u3055\u309220\u3068\u3057\u3066\u3044\u307e\u3059\uff0e\uff09\n\n```text\n21, 19, 17, 19, 21, 19, 17, 16, 14, 16, 17, 19, 21, 19, 21, 23, 21, 21, 19, 21, Fsmn\n16, 14, 16, 14, 16, 14, 12, 11, 12, 14, 12, 14, 12, 14, 16, 14, 12, 14, 16, 16, Csmn\n26, 24, 24, 24, 22, 22, 24, 22, 24, 22, 24, 22, 22, 21, 22, 24, 24, 22, 24, 26, Bmn\n21, 23, 21, 19, 21, 23, 24, 24, 26, 26, 24, 23, 21, 19, 21, 19, 21, 23, 23, 21, Fsmn\n24, 26, 26, 24, 22, 20, 22, 20, 19, 19, 17, 15, 14, 15, 17, 15, 17, 15, 14, 12, Amn\n ...\n\n```\n\n\u3053\u306e\u3088\u3046\u306b\u6574\u6570\u30b7\u30fc\u30b1\u30f3\u30b9\u3068Key\u306e\u30e9\u30d9\u30eb\uff08\u6587\u5b57\u5217\uff09\u306e\u30bb\u30c3\u30c8\u3092\u51fa\u529b\u3057\u3066\u3044\u308b\u304c\uff0c\uff11\u884c\u76ee\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3067\u306f\uff0c'F sharp minor' \u306e\u30d9\u30fc\u30b9\u97f3 21 \u3067\u59cb\u307e\u308a\uff0c\u540c\u3058\u97f3 21 \u3067\u7d42\u308f\u3063\u3066\u3044\u308b\u306e\u304c\u78ba\u8a8d\u3067\u304d\u308b\uff0e\u307e\u305f5\u884c\u76ee\u306e'A minor' \u30b7\u30fc\u30b1\u30f3\u30b9\u3067\u306f\uff0c\u30d9\u30fc\u30b9\u97f3 24 \u3067\u59cb\u307e\u308a\uff0c\u305d\u306e1\u30aa\u30af\u30bf\u30fc\u30d6\u4e0b\u306e\u30d9\u30fc\u30b9\u97f3 12 \u3067\u7d42\u308f\u3063\u3066\u3044\u308b\u306e\u304c\u78ba\u8a8d\u3067\u304d\u308b\uff0e\n\n###\uff08\u88dc\u8db3\uff09\n\u4eca\u56de\u8a2d\u5b9a\u3057\u305f\u554f\u984c\u306f\uff0c\u9577\u8abf\uff08\u660e\u308b\u3044\u611f\u3058\uff09\u3068\u77ed\u8abf\uff08\u6697\u3044\u611f\u3058\uff09\u3092\u5206\u985e\u3059\u308b\u3053\u3068\u3067\u3059\u304c\uff0c\u4e0a\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u751f\u6210\u3057\u305f\u30c7\u30fc\u30bf\u304c\u59a5\u5f53\u306a\u3082\u306e\u304b\u3069\u3046\u304b\u306f\uff0c\u5b9f\u969b\uff0c\u6f14\u594f\u3057\u3066\u805e\u3044\u3066\u307f\u308b\u306e\u304c\u78ba\u304b\u3060\u3068\u601d\u3044\u307e\u3059\uff0e\u79c1\u3082 iPad \u3092\u53d6\u308a\u51fa\u3057\u3066\u30a2\u30d7\u30eaGarageBand\u3067\u9375\u76e4\u3092\u62bc\u3057\u3066\u307f\u307e\u3057\u305f\u304c\uff0c\u66f2\u8abf\uff08\u660e\u308b\u3044/\u6697\u3044\uff09\u304c\u5206\u304b\u308b\u3088\u3046\u306b\u5f3e\u304f\u306e\u306f\u306a\u304b\u306a\u304b\u5927\u5909\u3067\uff0c\u3059\u3050\u306b\u65ad\u5ff5\u3057\u307e\u3057\u305f\uff0e\n\uff08midi\u898f\u683c\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u3057\u3066\u81ea\u52d5\u6f14\u594f\u3059\u308c\u3070\u3088\u304b\u3063\u305f\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\uff0c\u305d\u3053\u307e\u3067\u3084\u308b\u6280\u91cf\u3082\u6839\u6027\u3082\u3042\u308a\u307e\u305b\u3093\uff0e\u4f46\u3057\uff0c\u4eca\u56de\u6271\u3063\u305f10\u7a2e\u985e\u306eKey Scale\u306b\u3064\u3044\u3066\u306f\uff0c\u9375\u76e4\u3092\u53e9\u3044\u3066\uff08\u9650\u5b9a\u7684\u306b\u3067\u3059\u304c\uff09\u660e\u308b\u3044/\u6697\u3044\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\uff0e\uff09\n\n## Neural Network\u306e\u30e2\u30c7\u30eb\uff08\u307e\u305aMLP\u3067\u4e8b\u524d\u691c\u8a0e\uff09\n\nRecurrent Neural Network(RNN)\u3092\u8a66\u3059\u524d\u306b\uff0c\u307e\u305aMulti-layer Perceptron(MLP) \u30e2\u30c7\u30eb\u3067\u3069\u3046\u306a\u308b\u304b\u3092\u8abf\u3079\u3066\u307f\u305f\uff0e\u6240\u5b9a\u9577\u3055\u306e\u97f3\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\uff0c\u305d\u308c\u305e\u308c\u72ec\u7acb\u3057\u305f\u6570\u5b57\u3068\u8003\u3048\uff0c\u3053\u308c\u3092\u500b\u6570\u5206\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30e6\u30cb\u30c3\u30c8\u306b\u5165\u529b\u3057\u3066\u51fa\u529b\u3092\u5f97\u308b\u3068\u3044\u3046\u30e2\u30c7\u30eb\u306b\u306a\u308b\uff0e\u540c\u3058\u69cb\u6210\u97f3\u304b\u3089\uff0c2\u3064\u306e\u8abf\uff08\u9577\u8abf\uff0c\u77ed\u8abf\uff09\u3092\u69cb\u6210\u3067\u304d\u308b\u3053\u3068\u304b\u3089\uff0c\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u7528\u3044\u306a\u3044\u3053\u306e\u30e2\u30c7\u30eb\u3067\u306f\u5206\u985e\u306e\u7cbe\u5ea6\u304c\u4e0a\u304c\u3089\u306a\u3044\u3068\u4e88\u60f3\u3057\u3066\u3044\u305f\uff0e\n\n\u3053\u306e\u30e2\u30c7\u30ebLayer\u306e\u69cb\u6210\u306f\uff0c\u6b21\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3068\u3057\u305f\uff0e\n\n```py\nclass HiddenLayer(object):\n\n\uff08\u7565\uff09\n\nclass ReadOutLayer(object):\n\n\uff08\u7565\uff09\n\nh_layer1 = HiddenLayer(input=x, n_in=seq_len, n_out=40)            # \u96a0\u308c\u5c641\nh_layer2 = HiddenLayer(input=h_layer1.output(), n_in=40, n_out=40) # \u96a0\u308c\u5c642\no_layer = ReadOutLayer(input=h_layer2.output(), n_in=40, n_out=1)  # \u51fa\u529b\u5c64\n\n```\n\n\u96a0\u308c\u5c64\u304c2\u5c64\uff0c\u6700\u5f8c\u306b\u51fa\u529b\u5c64\u306e\u8a083\u5c64\u306eMLP\u30e2\u30c7\u30eb\u3067\u3042\u308b\uff0e(\u4eca\u56de\uff0c\u30b7\u30fc\u30b1\u30f3\u30b9\u9577\u3055\u306fseq_len=20\u306b\u3057\u3066\u3044\u308b\uff0e\uff09\u3053\u306e\u30e2\u30c7\u30eb\u3067\u884c\u3063\u305f\u8a08\u7b97\u306e\u72b6\u6cc1\u304c\u4e0b\u56f3\u3068\u306a\u308b\uff0e\n\n**Fig. Loss & Accuracy by MLP model (RMSProp)**\n![mlp_learn1.png](https://qiita-image-store.s3.amazonaws.com/0/74152/7b138774-00a0-e44f-22d6-d259466ce8fb.png)\n\n\u8d64\u7dda\u304c\u30b3\u30b9\u30c8\uff0c\u9752\u7dda\u304cTrain Data\u306e\u5206\u985e\u7cbe\u5ea6\u3067\u3042\u308b\uff0e\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\uff08\u3042\u308b\u3044\u306f\u6b63\u5247\u5316\u306e\u51e6\u7406\uff09\u304c\u9069\u5207\u3067\u306a\u304b\u3063\u305f\u305f\u3081\u304b\u632f\u52d5\u7684\u306a\u8a08\u7b97\u3068\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u304c\uff0c\u6700\u7d42\u7684\u306b\u7cbe\u5ea6\u304c 0.65 \u3068\u306a\u3063\u3066\u3044\u308b\uff0e2\u5024\u5206\u985e\u554f\u984c\u306a\u306e\u3067\uff0c\u30b5\u30a4\u30b3\u30ed\u3092\u632f\u308b or \u30b3\u30a4\u30f3\u30fb\u30c8\u30b9\u3092\u884c\u3063\u3066\u9069\u5f53\u306b\u5206\u985e\u3059\u308c\u3070\uff0c\u7cbe\u5ea6 0.50 \u306a\u306e\u3067\uff0c\u3053\u306e\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u304b\u3089\u306f\u82e5\u5e72\u6539\u5584\u3057\u305f\u7cbe\u5ea6\u3068\u306a\u3063\u305f\uff0e\u601d\u3063\u3066\u3044\u305f\u307b\u3069\u306b\u306f\u60aa\u304f\u306a\u304b\u3063\u305f\u3068\u3044\u3046\u5370\u8c61\u3067\u3042\u308b\uff0e\n\n\u8a08\u7b97\u306e\u521d\u671f\u306bLoss\u3068Accuracy\u304c\u505c\u6ede\u3057\u3066\u3044\u308b\u90e8\u5206\u3068\uff0c\u8a08\u7b97\u304c\u632f\u52d5\u7684\u306b\u306a\u3063\u3066\u3044\u308b\u70b9\u304c\u6c17\u306b\u306a\u3063\u305f\u306e\u3067\uff0c\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u3092\u5909\u3048\u3066\u8a08\u7b97\u3057\u3066\u307f\u305f\u7d50\u679c\u304c\u4e0b\u56f3\uff0e\n\n**Fig. Loss & Accuracy by MLP model (Gradient Descent)**\n![mlp_learn2.png](https://qiita-image-store.s3.amazonaws.com/0/74152/c9e14540-314e-cb7c-20ae-2a9e8e55763c.png)\n\n\u8a08\u7b97\u306e\u632f\u52d5\u306f\u306a\u304f\u306a\u3063\u305f\u304c\uff0c\u8a08\u7b97\u521d\u671f\u306e\u505c\u6ede\u306f\u6b8b\u3063\u3066\u3044\u308b\uff0e\u307e\u305f\u7cbe\u5ea6\u306f\u7d04 0.67 \u3068\u308f\u305a\u304b\u306a\u304c\u3089\u5411\u4e0a\u3057\u3066\u3044\u308b\uff0e\n\n## RNN (Elman Net)\u3067\u8a08\u7b97\u3057\u3066\u307f\u305f\u304c...\n\n\u6b21\u306b\u672c\u547d\uff0c\u30b7\u30f3\u30d7\u30eb\u306aRNN(Recurrent Nueral Network)\u3067\u3042\u308bElman Net\u3092\u7528\u3044\u3066\u8a08\u7b97\u3092\u884c\u3063\u305f\uff0e\u3053\u306e\u30e2\u30c7\u30eb\u306e\u4e3b\u8981\u90e8\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3068\u3057\u305f\uff0e\n\n```py\nclass simpleRNN(object):\n    #   members:  slen  : state length\n    #             w_x   : weight of input-->hidden layer\n    #             w_rec : weight of recurrnce \n    def __init__(self, slen, nx, nrec, ny):\n        self.len = slen\n        self.w_h = theano.shared(\n            np.asarray(np.random.uniform(-.1, .1, (nx)),\n            dtype=theano.config.floatX)\n        )\n        self.w_rec = theano.shared(\n            np.asarray(np.random.uniform(-.1, .1, (nrec)),\n            dtype=theano.config.floatX)\n        )\n        self.w_o = theano.shared(\n            np.asarray(np.random.uniform(-1., .1, (ny)),\n            dtype=theano.config.floatX)\n        )\n        self.b_h = theano.shared(\n            np.asarray(0., dtype=theano.config.floatX)            \n        )\n        self.b_o = theano.shared(\n            np.asarray(0., dtype=theano.config.floatX)\n        )\n    \n    def state_update(self, x_t, s0):\n        # this is the network updater for simpleRNN\n        def inner_fn(xv, s_tm1, wx, wr, wo, bh, bo):\n            s_t = xv * wx + s_tm1 * wr + bh\n            y_t = T.nnet.sigmoid(s_t * wo + bo)\n            \n            return [s_t, y_t]\n        \n        w_h_vec = self.w_h[0]\n        w_rec_vec = self.w_rec[0]\n        w_o = self.w_o[0]\n        b_h = self.b_h\n        b_o = self.b_o\n        \n        [s_t, y_t], updates = theano.scan(fn=inner_fn,\n                        sequences=[x_t],\n                        outputs_info=[s0, None],\n                        non_sequences=[w_h_vec, w_rec_vec, w_o, b_h, b_o]\n        )\n        return y_t\n\uff08\u4e2d\u7565\uff09\n\n    net = simpleRNN(seq_len, 1, 1, 1)\n    y_t = net.state_update(x_t, s0)\n    y_hypo = y_t[-1]\n    prediction = y_hypo > 0.5\n    \n    cross_entropy = T.nnet.binary_crossentropy(y_hypo, y_)\n    \n```\n\n\u8aac\u660e\u306e\u305f\u3081\u306b\u56f3\u3092\u53c2\u7167\u3059\u308b\uff0e\n\n**Fig. Simple RNN structure**\n![RNN0_model.png](https://qiita-image-store.s3.amazonaws.com/0/74152/aa6a7df3-9368-0632-a95f-42d293fd1a92.png)\n\n\u56f3\u306f\uff0cBPTT\u6cd5(Backpropagation through time)\u3092\u524d\u63d0\u306b\uff0c\u6642\u7cfb\u5217\u7684\u306b\u5c55\u958b\u3057\u305f\u69cb\u6210\u3092\u793a\u3057\u3066\u3044\u308b\uff0e\u97f3\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u30c7\u30fc\u30bf\u306f\uff0c[X1, X2, X3, ..., Xn] \u3068\u3057\u3066\u3053\u306e\u30e2\u30c7\u30eb\u306b\u5165\u529b\u3055\u308c\u308b\uff0e\u3053\u308c\u304c\u91cd\u307f\u3092\u304b\u3051\u305f\u5f8c\u96a0\u308c\u5c64S\u306b\u51fa\u529b\u3055\u308c\uff0c\u518d\u5e30\u3092\u8a08\u7b97\uff0c\u6700\u5f8c\u306b\u7cfb\u5217 [Y1, Y2, Y3, ..., Yn] \u304c\u51fa\u529b\u3055\u308c\u308b\uff0e\u3053\u306eY\u7cfb\u5217\u306e\u6700\u5f8c\u306e\u30e6\u30cb\u30c3\u30c8 Yn \u306e\u51fa\u529b\u3092\u6d3b\u6027\u5316\u95a2\u6570(Activation Function)\u3092\u901a\u3057\u30662\u5024\u306e\u6570\u5b57(0 or 1)\u3092\u5f97\u308b\uff0e\n\n\u671f\u5f85\u3092\u8fbc\u3081\u3066\u8a08\u7b97\u3092\u5b9f\u884c\u3057\u3066\u307f\u305f\u304c\uff0c\u6b8b\u5ff5\u306a\u7d50\u679c\u3068\u306a\u3063\u305f\uff0e\n\n**Fig. Loss & Accuracy by 1st RNN model (RMSProp)**\n![rnn0_learn.png](https://qiita-image-store.s3.amazonaws.com/0/74152/c00e2c9c-5ee7-77c3-73fe-5c1ff9fab15a.png)\n\n\n\u307b\u3068\u3093\u3069\u5b66\u7fd2\u304c\u9032\u884c\u305b\u305a\uff0c\u6700\u7d42\u7684\u306a\u7cbe\u5ea6\u306f 0.58 \u3067\u30bc\u30ed\u6027\u80fd 0.5 \u3068\u5927\u5dee\u306a\u3057\u306e\u7d50\u679c\u3067\u3042\u308b\uff0e\uff08\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u3068\u5909\u3048\u305f\u308a\uff0c\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3044\u3058\u3063\u3066\u307f\u3066\u3082\u3060\u3081\u3067\u3057\u305f\uff0e\uff09\n\n\u539f\u56e0\u3068\u3057\u3066\u306f\uff0c\u51fa\u529b\u30b7\u30fc\u30b1\u30f3\u30b9\u306e [Yn] \u306e\u307f\u3092\u53c2\u7167\u3057\uff0c\u6b8b\u308a\u306e\u60c5\u5831 [Y1 .. Yn-1] \u3092\u6368\u3066\u305f\u305f\u3081\u3067\u306f\u306a\u3044\u304b\u3068\u8003\u3048\u305f\uff0e\u305d\u3053\u3067\u30e2\u30c7\u30eb\u306e\u6539\u826f\u3092\u691c\u8a0e\u3057\u305f\uff0e\n\n## RNN\u6539\u826f\u30e2\u30c7\u30eb\uff08\u51fa\u529b\u5c64\u3092\u8ffd\u52a0\uff09\n\n\u30b7\u30fc\u30b1\u30f3\u30b9 [Y1, Y2, ..., Yn] \u306e\u51fa\u529b\u5024\u3092\u3059\u3079\u3066\u53c2\u7167\u3059\u308b\u305f\u3081\uff0c\u3053\u308c\u3089\u306b\u91cd\u307f\u3092\u304b\u3051\u3066\u5206\u985e\u306e\u305f\u3081\u306e\u4fe1\u53f7\u3092\u3064\u304f\u308b\u3053\u3068\u306b\u3057\u305f\uff0e\n\n**Fig. Simple RNN + Read-out Layer structure**\n![RNN1_model.PNG](https://qiita-image-store.s3.amazonaws.com/0/74152/5f890c6c-dd54-29a7-a5e9-db5b4fee98e9.png)\n\n\u30b3\u30fc\u30c9\u3068\u3057\u3066\u306f\uff0cMLP\u30e2\u30c7\u30eb\u306e\u51fa\u529b\u5c64\u90e8\u5206\u3092\u633f\u5165\u3057\u3066\u4f5c\u6210\u3057\u3066\u3044\u308b\uff0e\n\n```py\nclass simpleRNN(object):\n    #   members:  slen  : state length\n    #             w_x   : weight of input-->hidden layer\n    #             w_rec : weight of recurrnce \n    def __init__(self, slen, nx, nrec, ny):\n\n    \uff08\u7565\uff09\n    \n    def state_update(self, x_t, s0):\n    \n    \uff08\u7565\uff09\n\nclass ReadOutLayer(object):                 # <==== \u8ffd\u52a0\u30af\u30e9\u30b9\n    def __init__(self, input, n_in, n_out):\n        self.input = input\n        \n        w_o_np = 0.05 * (np.random.standard_normal([n_in,n_out]))\n        w_o = theano.shared(np.asarray(w_o_np, dtype=theano.config.floatX))\n        b_o = theano.shared(\n            np.asarray(np.zeros(n_out, dtype=theano.config.floatX))\n        )\n       \n        self.w = w_o\n        self.b = b_o\n        self.params = [self.w, self.b]\n    \n    def output(self):\n        linarg = T.dot(self.input, self.w) + self.b\n        self.output = T.nnet.sigmoid(linarg)  \n\n        return self.output\n        \n    \uff08\u7565\uff09\n\n    net = simpleRNN(seq_len, 1, 1, 1)\n    y_t = net.state_update(x_t, s0)\n    y_tt = T.transpose(y_t)\n    ro_layer = ReadOutLayer(input=y_tt, n_in=seq_len, n_out=1)  # <==== \u8ffd\u52a0\n    \n    y_hypo = (ro_layer.output()).flatten()\n    prediction = y_hypo > 0.5\n    \n    cross_entropy = T.nnet.binary_crossentropy(y_hypo, y_)\n    \n    \uff08\u7565\uff09\n```\n\n\u3053\u308c\u3067\u8a08\u7b97\u3092\u5b9f\u884c\u3057\u305f\u72b6\u6cc1\u306f\uff0c\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u305f\uff0e\n\n**Fig. Loss & Accuracy by 2nd RNN model (RMSProp)**\n![rnn1_learn.png](https://qiita-image-store.s3.amazonaws.com/0/74152/2595c838-102d-8a0a-7087-69003316bdd6.png)\n\n\u5b66\u7fd2\u304c\u9032\u884c\u3057\uff0c\u6700\u7d42\u7684\u306a\u7cbe\u5ea6\u3082 0.73 \u3068\u5411\u4e0a\u3057\u305f\uff0e\u7406\u7531\u3068\u3057\u3066\u306f\uff0c\u306d\u3089\u3044\u901a\u308a\u51fa\u529b\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u60c5\u5831\u3092\u3046\u307e\u304f\u53d6\u308a\u51fa\u305b\u305f\u3053\u3068\u3084\uff0c\u91cd\u307f\u4fc2\u6570(weights) \u306e\u6570\u304c\u5897\u3048\u3066 Network \u306e\u81ea\u7531\u5ea6\u304c\u4e0a\u304c\u3063\u305f\u305f\u3081\uff0c\u5b66\u7fd2\u904e\u7a0b\u3067\u306e\u9069\u5408\u5ea6\uff08\u67d4\u8edf\u6027\uff09\u304c\u4e0a\u304c\u3063\u305f\u305f\u3081\u3068\u8003\u3048\u3066\u3044\u308b\uff0e\n\n\u3057\u304b\u3057\u7cbe\u5ea6 0.73 \u3067\u306f\uff0c\u5f53\u521d\u306e\u671f\u5f85\u5024\u4ee5\u4e0b\u3067\u3042\u308b\uff0e\uff08\u76ee\u6a19\u3068\u3057\u3066 0.9 + \u306e\u5206\u985e\u7cbe\u5ea6\u3092\u8003\u3048\u3066\u3044\u307e\u3057\u305f\uff0e\uff09\u3082\u3046\u5c11\u3057\u5404weights\u306e\u52d5\u304d\u306a\u3069\u3092\u8abf\u67fb\u3057\u3066\u6539\u826f\u3059\u308c\u3070\uff0c\u66f4\u306a\u308b\u7cbe\u5ea6up\u304c\u3067\u304d\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u304c\uff0c\u4eca\u56de\u306f\u3053\u3053\u307e\u3067\u3068\u3057\u305f\u3044\uff0e\n\n\u4eca\u56de\u306f\uff0c\u97f3\u697d\u30c7\u30fc\u30bf\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4e71\u6570\u3067\u4f5c\u3063\u305f\u4eba\u5de5\u7684\u306a\u3082\u306e\u3092\u4f7f\u3063\u305f\u304c\uff0c\u3053\u308c\u3082\u4eca\u56de\u306e\u4f4e\u7cbe\u5ea6\u306b\u5f71\u97ff\u3057\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u8003\u3048\u3066\u3044\u308b\uff0e\uff08\u5b9f\u969b\u306e\u97f3\u697d\u306b\u306f\u3082\u3063\u3068\u8907\u96d1\u306a\u30eb\u30fc\u30eb\u304c\u3042\u308b\u306e\u3067\u306f\uff1f\uff09\u30c7\u30fc\u30bf\u7b49\u3092\u5165\u624b\u3067\u304d\u308c\u3070\uff0c\u4eba\u9593\u304c\u4f5c\u3063\u305f\u30e1\u30ed\u30c7\u30a3\u30fc\u306b\u5bfe\u3057\u3066\u9577\u8abf\uff0f\u77ed\u8abf\u306e\u5206\u985e\u3092\u3084\u3063\u3066\u307f\u305f\u3044\uff0e(\u97f3\u697d\u7406\u8ad6\u306b\u3064\u3044\u3066\u3082\uff0c\u3082\u3046\u5c11\u3057\u52c9\u5f37\u304c\u5fc5\u8981\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e\uff09\n\n## \u53c2\u8003\u6587\u732e (web site)\n- [\u8abf - Wikipedia](https://ja.wikipedia.org/wiki/%E8%AA%BF)\n- [\u30cf\u9577\u8abf - Wikipedia](https://ja.wikipedia.org/wiki/%E3%83%8F%E9%95%B7%E8%AA%BF)\n- [\u30a4\u77ed\u8abf - Wikipedia](https://ja.wikipedia.org/wiki/%E3%82%A4%E7%9F%AD%E8%AA%BF)\n- [[pdf] Artificial Neural Networks that Classify Music Chords](http://www.bcp.psych.ualberta.ca/research/pdfstuff/Yaremchuk3.pdf)\n- Theano scan\u3000- Looping in Theano\n    http://deeplearning.net/software/theano/library/scan.html\n- Theano optimizers - Gist/ kastnerkyle/opimizers.py\n    https://gist.github.com/kastnerkyle/816134462577399ee8b2\n- \u6df1\u5c64\u5b66\u7fd2\uff0c\u8b1b\u8ac7\u793e\u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb\u30b7\u30ea\u30fc\u30ba\n\n", "tags": ["Python", "Theano", "MachineLearning", "\u6a5f\u68b0\u5b66\u7fd2"]}