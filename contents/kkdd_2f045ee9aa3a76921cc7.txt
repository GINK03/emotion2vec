{"context": "\u3053\u3093\u306b\u3061\u306f\u3002\n\u30b0\u30ec\u30b4\u30ea\u30a6\u30b9\u66a6\u65e5\u4ed8 Gregorian date $(year, month, day) $ \u3068\u4fee\u6b63\u30e6\u30ea\u30a6\u30b9\u65e5\uff08MJD\uff09\u3001Julian day number (JDN) \u3068\u306e\u9593\u306e\u63db\u7b97\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u5316\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u4e0b\u8a18\u306e\u3088\u3046\u306a\u5909\u63db\u8a08\u7b97\u306e\u6d41\u308c\u3067\u3059\u3002\n(year, month, day) \\leftrightarrow (y, m, d) \\leftrightarrow n \\leftrightarrow mjd  \\leftrightarrow jdn\n\n\u8a08\u7b97\u5f0f\u306b\u3064\u3044\u3066\u306f Wikipedia \u306e\u30e6\u30ea\u30a6\u30b9\u901a\u65e5#\u897f\u66a6\u304b\u3089\u306e\u63db\u7b97 (Julian day#Calculation) \u305d\u306e\u307e\u307e\u3067\u3059\u3002\n$ ./date.py --test\nTrue: ymd2n(0,0,0) == 0\nTrue: date2ymd(0,3,1) == (0,0,0)\nTrue: date2mjd(1858, 11, 17) == 0\n\n\ndate.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom __future__ import division\nfrom __future__ import print_function\n\n# n: the continuous count of days since March first in 1 B.C. proleptic Gregorian\n# date = (year, month, day) in the proleptic Gregorian calendar\n# ymd  = (y, m, d); modified date in the proleptic Gregorian calendar (see date2ymd() below)\n\ndef mjd2jdn(mjd):\n    return mjd + 2400001\n\ndef jdn2jd(jdn):\n    return jdn - 0.5  # 00:00:00\n\ndef n2mjd(n):\n    return n - 678881  # [Gregorian]\n\ndef date2mjd(year, month, day):\n    return n2mjd(date2n(year, month, day))\n\ndef diffdate(date1, date2):\n    return date2n(*date1) - date2n(*date2)\n\ndef adddate(date, d):\n    n = date2n(*date) + d\n    return ymd2date(n2ymd(n))\n\ndef date2n(year, month, day):\n    return ymd2n(*date2ymd(year, month, day))\n\ndef date2ymd(year, month, day):\n    y, m, d = year, month-3, day-1\n    if m < 0:\n        y, m = y-1, m%12\n    return y, m, d\n\ndef ymd2date(y,m,d):\n    year, month, day = y, m+3, d+1\n    if month > 12:\n        year, month = year+1, month%12\n    return year, month, day\n\ndef ymd2n(y,m,d):\n    n = d + (153*m+2)//5 + 365*y + y//4  # (1461*y)//4\n    n += -(y//100) + y//400  # (-3*(y//100))//4  [Gregorian]\n    return n\n\ndef n2ymd(n):\n    a = 4*n + 3\n    a += 4*((3*(((4*(n+1))//146097)+1))//4)  # [Gregorian]\n    b = 5*((a%1461)//4) + 2\n    y, m, d = a//1461, b//153, (b%153)//5\n    return y, m, d\n\n#===== test =====\ndef test_eval(str):\n    print(eval(str), str)\n    return 0\n\ndef test_epoch():\n    test_eval('ymd2n(0,0,0) == 0')\n    test_eval('date2ymd(0,3,1) == (0,0,0)')\n    test_eval('date2mjd(1858, 11, 17) == 0')\n    return 0\n\ndef test_ymd2n():\n    for n in range(-146097,146097):\n        y,m,d = n2ymd(n)\n        if n != ymd2n(y,m,d):\n            year, month, day = ymd2date(y,m,d)\n            print(n,'', year, month, day, 'error')\n            break\n    return 0\n\ndef test_n2ymd():\n    m, d = 0, 0\n    for y in range(-401,400):\n        n = ymd2n(y,m,d)\n        if (y,m,d) != n2ymd(n):\n            year, month, day = ymd2date(y,m,d)\n            print(n,'', year, month, day, 'error')\n            break\n    return 0\n\ndef main():\n    \"\"\"\n    {f}: Conversion between modified Julian day number and Gregorian calendar date.\n\n    usage: {f} [-h] [--test]\n\n    options:\n        -h, --help    show this help message and exit\n        --test        test\n    \"\"\"\n    import docopt, textwrap\n    args = docopt.docopt(textwrap.dedent(main.__doc__.format(f=__file__)))\n    if args.get(\"--test\", 0):\n        test_epoch()\n        test_ymd2n()\n        test_n2ymd()\n    return 0\n\nif __name__ == '__main__':\n    main()\n\n\n\u3053\u3093\u306b\u3061\u306f\u3002\n\u30b0\u30ec\u30b4\u30ea\u30a6\u30b9\u66a6\u65e5\u4ed8 Gregorian date $(year, month, day) $ \u3068\u4fee\u6b63\u30e6\u30ea\u30a6\u30b9\u65e5\uff08MJD\uff09\u3001Julian day number (JDN) \u3068\u306e\u9593\u306e\u63db\u7b97\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u5316\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u4e0b\u8a18\u306e\u3088\u3046\u306a\u5909\u63db\u8a08\u7b97\u306e\u6d41\u308c\u3067\u3059\u3002\n\n```math\n(year, month, day) \\leftrightarrow (y, m, d) \\leftrightarrow n \\leftrightarrow mjd  \\leftrightarrow jdn\n```\n\u8a08\u7b97\u5f0f\u306b\u3064\u3044\u3066\u306f Wikipedia \u306e[\u30e6\u30ea\u30a6\u30b9\u901a\u65e5#\u897f\u66a6\u304b\u3089\u306e\u63db\u7b97](https://ja.wikipedia.org/wiki/%E3%83%A6%E3%83%AA%E3%82%A6%E3%82%B9%E9%80%9A%E6%97%A5#.E8.A5.BF.E6.9A.A6.E3.81.8B.E3.82.89.E3.81.AE.E6.8F.9B.E7.AE.97) ([Julian day#Calculation](https://en.wikipedia.org/wiki/Julian_day#Calculation)) \u305d\u306e\u307e\u307e\u3067\u3059\u3002\n\n\n```\n$ ./date.py --test\nTrue: ymd2n(0,0,0) == 0\nTrue: date2ymd(0,3,1) == (0,0,0)\nTrue: date2mjd(1858, 11, 17) == 0\n```\n\n```python:date.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom __future__ import division\nfrom __future__ import print_function\n\n# n: the continuous count of days since March first in 1 B.C. proleptic Gregorian\n# date = (year, month, day) in the proleptic Gregorian calendar\n# ymd  = (y, m, d); modified date in the proleptic Gregorian calendar (see date2ymd() below)\n\ndef mjd2jdn(mjd):\n    return mjd + 2400001\n\ndef jdn2jd(jdn):\n    return jdn - 0.5  # 00:00:00\n\ndef n2mjd(n):\n    return n - 678881  # [Gregorian]\n\ndef date2mjd(year, month, day):\n    return n2mjd(date2n(year, month, day))\n\ndef diffdate(date1, date2):\n    return date2n(*date1) - date2n(*date2)\n\ndef adddate(date, d):\n    n = date2n(*date) + d\n    return ymd2date(n2ymd(n))\n\ndef date2n(year, month, day):\n    return ymd2n(*date2ymd(year, month, day))\n\ndef date2ymd(year, month, day):\n    y, m, d = year, month-3, day-1\n    if m < 0:\n        y, m = y-1, m%12\n    return y, m, d\n\ndef ymd2date(y,m,d):\n    year, month, day = y, m+3, d+1\n    if month > 12:\n        year, month = year+1, month%12\n    return year, month, day\n\ndef ymd2n(y,m,d):\n    n = d + (153*m+2)//5 + 365*y + y//4  # (1461*y)//4\n    n += -(y//100) + y//400  # (-3*(y//100))//4  [Gregorian]\n    return n\n\ndef n2ymd(n):\n    a = 4*n + 3\n    a += 4*((3*(((4*(n+1))//146097)+1))//4)  # [Gregorian]\n    b = 5*((a%1461)//4) + 2\n    y, m, d = a//1461, b//153, (b%153)//5\n    return y, m, d\n\n#===== test =====\ndef test_eval(str):\n    print(eval(str), str)\n    return 0\n    \ndef test_epoch():\n    test_eval('ymd2n(0,0,0) == 0')\n    test_eval('date2ymd(0,3,1) == (0,0,0)')\n    test_eval('date2mjd(1858, 11, 17) == 0')\n    return 0\n\ndef test_ymd2n():\n    for n in range(-146097,146097):\n        y,m,d = n2ymd(n)\n        if n != ymd2n(y,m,d):\n            year, month, day = ymd2date(y,m,d)\n            print(n,'', year, month, day, 'error')\n            break\n    return 0\n\ndef test_n2ymd():\n    m, d = 0, 0\n    for y in range(-401,400):\n        n = ymd2n(y,m,d)\n        if (y,m,d) != n2ymd(n):\n            year, month, day = ymd2date(y,m,d)\n            print(n,'', year, month, day, 'error')\n            break\n    return 0\n\ndef main():\n    \"\"\"\n    {f}: Conversion between modified Julian day number and Gregorian calendar date.\n\n    usage: {f} [-h] [--test]\n    \n    options:\n        -h, --help    show this help message and exit\n        --test        test\n    \"\"\"\n    import docopt, textwrap\n    args = docopt.docopt(textwrap.dedent(main.__doc__.format(f=__file__)))\n    if args.get(\"--test\", 0):\n        test_epoch()\n        test_ymd2n()\n        test_n2ymd()\n    return 0\n\nif __name__ == '__main__':\n    main()\n```\n", "tags": ["\u30ab\u30ec\u30f3\u30c0\u30fc", "Python", "calendar"]}