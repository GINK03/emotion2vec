{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nAkka Actor\u306eask(?)\u307e\u308f\u308a\u3092\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u30ea\u30fc\u30c7\u30a3\u30f3\u30b0 \u3067Actor\u5185\u3067\u4f8b\u5916\u304c\u767a\u751f\u3059\u308b\u3068Future\u306eSuccess/Failure\u306b\u306f\u76f4\u63a5\u5f71\u97ff\u306f\u53ca\u307c\u3055\u305a\u3001\u7d50\u679c\u7684\u306b\u306ftimeout\u306b\u3088\u3063\u3066Failure\u306b\u306a\u3063\u305f\u3053\u3068\u3092\u78ba\u8a8d\u3057\u305f\u3002\n\u4eca\u56de\u306f\u305d\u306e\u7d9a\u304d\u3067\u3001Actor\u5185\u3067\u4f8b\u5916\u304c\u767a\u751f\u3059\u308b\u3068\u3069\u3046\u306a\u308b\u3093\u3060\u3063\u3051\uff1f\u3092\u898b\u3066\u3044\u304f\u3002\n\n\u4eca\u56de\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\n\u4eca\u56de\u306fActor\u3092\uff12\u7a2e\u985e\u7528\u610f\u3057\u305f\u3002\nmain\u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u306fSupervisorExceptionActor\u3078\u3002\u305d\u3053\u304b\u3089ExceptionActor\u3078\u5358\u306b\u6a2a\u6d41\u3057\u3002\u3067\u3001\u4f8b\u5916\u767a\u751f\u3002\n\u5358\u7d14\u5316\u306e\u305f\u3081\u306b?(ask)\u3067\u306f\u306a\u304f\u3066!(tell)\u3092\u4f7f\u3063\u3066\u3044\u308b\u3002\nimport akka.actor._\n\nobject Main extends App {\n  val system = ActorSystem()\n  try {\n    val actor = system.actorOf(Props[SupervisorExceptionActor]) \n\n    actor ! 1\n    actor ! 4\n    actor ! 2\n\n    Thread.sleep(3000)\n  } finally {\n    system.shutdown()\n  }\n}\n\nclass SupervisorExceptionActor extends Actor {\n  val actor = context.actorOf(Props[ExceptionActor])\n\n  override def preStart() = println(\"preStart() in SupervisorExceptionActor\")\n\n  def receive = {\n    case x => actor ! x\n  }\n}\n\nclass ExceptionActor extends Actor {\n  override def preStart() = println(\"preStart() in ExceptionActor\")\n\n  def receive = {\n    case 4 => sys.error(\"\u6b7b\")\n    case x => println(x + \" : \" + this)\n  }\n}\n\nSupervisorExceptionActor\u5185\u3067 context.actorOf \u3067ExceptionActor\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u3067SupervisorExceptionActor\u306fExceptionActor\u306eSupervisor\uff08\u76e3\u7763\u8005\uff09\u3068\u306a\u308b\u3002\u8981\u306f\u89aa\u5b50\u95a2\u4fc2\u304c\u51fa\u6765\u308b\u3002\n\u306a\u304a\u3001 system.actorOf \u3067\u751f\u6210\u3059\u308b\u3068Supervisor\u306b\u306f\u306a\u3089\u306a\u3044\u306e\u3067\u6ce8\u610f\u3002  \nSupervisor\u306f\u76e3\u8996\u5bfe\u8c61\u306e\u5b50Actor\u3067\u4f8b\u5916\u304c\u767a\u751f\u3057\u305f\u969b\u306e\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u884c\u3046\u3002\n\u4e0a\u8a18\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u7279\u306b\u4f55\u3082\u8a2d\u5b9a\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u8a2d\u5b9a\u304c\u4f7f\u7528\u3055\u308c\u308b\u3002\u521d\u671f\u8a2d\u5b9a\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\nhttps://github.com/akka/akka/blob/release-2.3/akka-actor/src/main/scala/akka/actor/Actor.scala#L493\n  /**\n   * User overridable definition the strategy to use for supervising\n   * child actors.\n   */\n  def supervisorStrategy: SupervisorStrategy = SupervisorStrategy.defaultStrategy\n\nSupervisorStragegy.defaultStrategy\u306e\u5ba3\u8a00\u90e8\u306f\u4ee5\u4e0b\u3002\nhttps://github.com/akka/akka/blob/release-2.3/akka-actor/src/main/scala/akka/actor/FaultHandling.scala#L166-L168\n  /**\n   * When supervisorStrategy is not specified for an actor this\n   * is used by default. OneForOneStrategy with decider defined in\n   * [[#defaultDecider]].\n   */\n  final val defaultStrategy: SupervisorStrategy = {\n    OneForOneStrategy()(defaultDecider)\n  }\n\ndefaultDecider\u90e8\u5206\u3067\u4f8b\u5916\u6bce\u306e\u632f\u308b\u821e\u3044\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\nhttps://github.com/akka/akka/blob/release-2.3/akka-actor/src/main/scala/akka/actor/FaultHandling.scala#L154-L159\n  /**\n   * When supervisorStrategy is not specified for an actor this\n   * [[Decider]] is used by default in the supervisor strategy.\n   * The child will be stopped when [[akka.actor.ActorInitializationException]],\n   * [[akka.actor.ActorKilledException]], or [[akka.actor.DeathPactException]] is\n   * thrown. It will be restarted for other `Exception` types.\n   * The error is escalated if it's a `Throwable`, i.e. `Error`.\n   */\n  final val defaultDecider: Decider = {\n    case _: ActorInitializationException \u21d2 Stop\n    case _: ActorKilledException         \u21d2 Stop\n    case _: DeathPactException           \u21d2 Stop\n    case _: Exception                    \u21d2 Restart\n  }\n\n\u3053\u3053\u3067Stop\u3084Restart\u304c\u767b\u5834\u3057\u3066\u3044\u308b\u304c\u305d\u308c\u3089Directive\u306e\u7a2e\u985e\u3068\u305d\u306e\u610f\u5473\u3092\u307e\u3068\u3081\u308b\u3002\n\n\n\nDirective\u7a2e\u5225\n\u610f\u5473\n\n\n\n\nRestart\nActor\u3092\u518d\u4f5c\u6210\u3057\u3001\u51e6\u7406\u3092\u518d\u958b\uff08\u6b21\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u51e6\u7406\uff09\u3002Let it crash\u3068\u8a00\u308f\u308c\u308b\u306e\u306f\u3053\u306e\u632f\u308b\u821e\u3044\u3092\u6307\u3057\u3066\u3044\u308b(\u306f\u305a)\u3002\n\n\nResume\n\u51e6\u7406\u3092\u518d\u958b\uff08\u6b21\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u51e6\u7406\uff09\u3002Restart\u3068\u306e\u9055\u3044\u306fActor\u3092\u518d\u4f5c\u6210\u3057\u306a\u3044\u3053\u3068\u3002\n\n\nStop\nActor\u3092\u505c\u6b62\u3059\u308b\u3002Mailbox\u306b\u6e9c\u307e\u3063\u3066\u3044\u305f\u305d\u306e\u4ed6\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u51e6\u7406\u3055\u308c\u306a\u3044\u306e\u3067dead letter\u6271\u3044\u3068\u306a\u308b\u3002\n\n\nEscalate\n\u3055\u3089\u306b\u4e0a\u306eSupervisor\u306b\u4f8b\u5916\u3092\u4f1d\u642c\u3055\u305b\u308b\u3002\u5b50\u306b\u3064\u3044\u3066\u306f\u305d\u3053\u3067\u5b9a\u7fa9\u3057\u305fSupervisorStrategy\u306e\u632f\u308b\u821e\u3044\u306b\u5f93\u3046\u3002\n\n\n\n\u5b9f\u969b\u306b\u3053\u306e\u901a\u308a\u306b\u306a\u308b\u306e\u304b\u78ba\u8a8d\u3057\u3066\u307f\u308b\u3002\n\nRestart\n\u307e\u305a\u306f\u5192\u982d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u3002\u4f55\u3082\u6307\u5b9a\u3057\u3066\u3044\u306a\u3044\u306e\u3067defaultStrategy\u304c\u63a1\u7528\u3055\u308c\u308b\u3002RuntimeException\u304c\u767a\u751f\u3059\u308b\u306e\u3067Restart\u304c\u5b9f\u884c\u3055\u308c\u308b\u3002\npreStart() in SupervisorExceptionActor\npreStart() in ExceptionActor\n1 : ExceptionActor@603ed77d\npreStart() in ExceptionActor\n2 : ExceptionActor@69d00cce\n\nExceptionActor\u304c\u518d\u4f5c\u6210\u3055\u308c\u3001\u5225\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u305f\u3002\n\nResume\n\u6b21\u306bResume\u306e\u78ba\u8a8d\u3002\nSupervisor\u5074\u3067\u660e\u793a\u7684\u306b\u5b9a\u7fa9\u3059\u308b\u3088\u3046\u306b\u4ee5\u4e0b\u3092\u8ffd\u8a18\u3002\n  override def supervisorStrategy = OneForOneStrategy() {\n    case _ => Resume\n  }\n\n\u4ee5\u4e0b\u3001\u5b9f\u884c\u7d50\u679c\u3002\npreStart() in SupervisorExceptionActor\npreStart() in ExceptionActor\n1 : ExceptionActor@2bc2f760\n2 : ExceptionActor@2bc2f760\n\n\u540c\u3058\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u4f8b\u5916\u5f8c\u306e\u5f8c\u7d9a\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u3002preStart()\u3082\u5b9f\u884c\u3055\u308c\u3066\u3044\u306a\u3044\u3002\n\nStop\n\u6b21\u306bStop\u306e\u78ba\u8a8d\u3002Resume\u3068\u3057\u3066\u3044\u308b\u90e8\u5206\u3092Stop\u306b\u5909\u66f4\u3059\u308b\u3060\u3051\u3002\n  override def supervisorStrategy = OneForOneStrategy() {\n    case _ => Stop\n  }\n\n\u4ee5\u4e0b\u3001\u5b9f\u884c\u7d50\u679c\u3002\npreStart() in SupervisorExceptionActor\npreStart() in ExceptionActor\n1 : ExceptionActor@6f2612b9\n[INFO] [default-akka.actor.default-dispatcher-5] [akka://default/user/$a/$a] Message [java.lang.Integer] from Actor[akka://default/user/$a#-1970577465] to Actor[akka://default/user/$a/$a#1036814967] was not delivered. [1] dead letters encountered.\n\nStop\u3057\u305f\u306e\u3067\u3001\u300c4\u300d\u306e\u5f8c\u7d9a\u306e\u300c2\u300d\u304c\u51e6\u7406\u3055\u308c\u305a\u3001dead-letter\u884c\u304d\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u4e8b\u304c\u78ba\u8a8d\u3067\u304d\u305f\u3002\n\nEscalate\n\u6700\u5f8c\u306bEscalate\u3002Stop\u306e\u90e8\u5206\u3092Escalate\u306b\u5909\u3048\u308b\u3002\n\u30b3\u30ec\u306e\u52d5\u4f5c\u78ba\u8a8d\u3092\u884c\u3046\u306b\u306f\u66f4\u306a\u308bSupervisor\u3092\u7528\u610f\u3059\u308b\u5fc5\u8981\u3042\u308a\u3002\nclass SupervisorSupervisorExceptionActor extends Actor {\n  val actor = context.actorOf(Props[SupervisorExceptionActor])\n\n  override def supervisorStrategy = OneForOneStrategy() {\n    case _ => Restart\n  }\n\n  def receive = {\n    case x => actor ! x\n  }\n}\n\nSupervisorStrategyActor\u306fEscalate\u306b\u6307\u5b9a\u3059\u308b\u3002\n  override def supervisorStrategy = OneForOneStrategy() {\n    case _ => Escalate\n  }\n\n\u4ee5\u4e0b\u3001\u7d50\u679c\u3002\npreStart() in SupervisorExceptionActor\npreStart() in ExceptionActor\n1 : ExceptionActor@428ad712\n[INFO] [default-akka.actor.default-dispatcher-3] [akka://default/user/$a/$a/$a] Message [java.lang.Integer] from Actor[akka://default/user/$a/$a#2112516208] to Actor[akka://default/user/$a/$a/$a#1057736964] was not delivered. [1] dead letters encountered. \npreStart() in SupervisorExceptionActor\npreStart() in ExceptionActor\n\n\u4eca\u307e\u3067\u3068\u9055\u3063\u3066Supervisor\u306eSupervisor\u3067Restart\u3068\u5ba3\u8a00\u3057\u305f\u3053\u3068\u306b\u3088\u3063\u3066\u3001\u305d\u306e\u5b50\u3067\u3042\u308bSupervisor\u3082\u518d\u4f5c\u6210\u304c\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u3068\u3053\u308d\u3002\n\u305f\u3060\u3001\u300c2\u300d\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u306fdead-letters\u884c\u304d\u306b\u306a\u308b\u306e\u304b...\n\u30bf\u30a4\u30df\u30f3\u30b0\uff1f\u3053\u306e\u8fba\u306f\u672a\u3060\u3061\u3083\u3093\u3068\u7406\u89e3\u3067\u304d\u3066\u3044\u306a\u3044\u3002\n\u306a\u304a\u3001Resume\u306b\u3059\u308b\u3068\u300c2\u300d\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3082\u7121\u4e8b\u51e6\u7406\u3055\u308c\u305f\u3002\n\n\u4f8b\u5916\u767a\u751f\u3092\u547c\u3073\u51fa\u3057\u5143\u306b\u4f1d\u3048\u308b\u306b\u306f\uff1f\n\u3082\u3068\u3082\u3068\u3053\u306e\u30b7\u30ea\u30fc\u30ba\u306f?(ask)\u3067\u547c\u3073\u51fa\u3057\u305f\u6642\u306b\u4f8b\u5916\u304c\u547c\u3073\u51fa\u3057\u5143\u306b\u4f1d\u308f\u3089\u306a\u3044\u3068\u3044\u3046\u3082\u306e\u3060\u3063\u305f\u3002\n\u547c\u3073\u51fa\u3057\u5143\u306b\u8fd4\u3059\u306b\u306fActor\u5185\u304b\u3089!\u3092\u4f7f\u3063\u3066\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u3089\u306a\u3044\u3068\u5c4a\u304b\u306a\u3044\u3002\n\u3088\u3063\u3066\u4f8b\u5916\u767a\u751f\u3092\u4f1d\u3048\u308b\u306b\u306f\u305d\u308c\u3092\u6355\u7372\u3057\u3066!\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u9001\u4fe1\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u6210\u529f\u6642\u3068\u5931\u6557\u6642\u3067\u9001\u308b\u578b\u304c\u7570\u306a\u308b\u306e\u3067Either\u3092\u4f7f\u3046\u306e\u304c\u4e00\u822c\u7684\u3060\u308d\u3046\u304b\u3002\nclass ExceptionActor extends Actor {\n  def receive = {\n    case a => \n      Try { ...\u51e6\u7406... } match {\n        case Success(b) => \n          sender ! Right(\u6210\u529f\u6642\u306e\u30e1\u30c3\u30bb\u30fc\u30b8)\n        case Failure(c) => \n          sender ! Left(c) \n          throw c\n      }\n  }\n}\n\n\u547c\u3073\u51fa\u3057\u5143\u306fFuture[Either[Throwable, String]]\u3068\u3044\u3063\u305f\u611f\u3058\u306e\u578b\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u308b\u3053\u3068\u3068\u306a\u308b\u3002\n\u30e2\u30ca\u30c9\u30c8\u30e9\u30f3\u30b9\u30d5\u30a9\u30fc\u30de\u30fc...\n\u306a\u304a\u3001\u305d\u3082\u305d\u3082\u306e\u8a71\u3067\u3044\u3046\u3068\u3001?\u3067\u306f\u306a\u304f\u306a\u308b\u3079\u304f!\u3067\u5168\u4f53\u3092\u69cb\u7bc9\u3059\u308b\u3088\u3046\u306b\u8a2d\u8a08\u3059\u308b\u3053\u3068\u304c\u826f\u3044\u3068\u306f\u601d\u3046\u3002\n\u3053\u306e\u3078\u3093\u306e\u8a71\u306f\u307e\u305f\u6642\u9593\u304c\u3042\u308c\u3070\u3002\n# \u306f\u3058\u3081\u306b\n[Akka Actor\u306eask(?)\u307e\u308f\u308a\u3092\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u30ea\u30fc\u30c7\u30a3\u30f3\u30b0](http://qiita.com/mtoyoshi/items/87fc9b5deca6cc10c814) \u3067Actor\u5185\u3067\u4f8b\u5916\u304c\u767a\u751f\u3059\u308b\u3068Future\u306eSuccess/Failure\u306b\u306f\u76f4\u63a5\u5f71\u97ff\u306f\u53ca\u307c\u3055\u305a\u3001\u7d50\u679c\u7684\u306b\u306ftimeout\u306b\u3088\u3063\u3066Failure\u306b\u306a\u3063\u305f\u3053\u3068\u3092\u78ba\u8a8d\u3057\u305f\u3002\n\u4eca\u56de\u306f\u305d\u306e\u7d9a\u304d\u3067\u3001Actor\u5185\u3067\u4f8b\u5916\u304c\u767a\u751f\u3059\u308b\u3068\u3069\u3046\u306a\u308b\u3093\u3060\u3063\u3051\uff1f\u3092\u898b\u3066\u3044\u304f\u3002\n\n# \u4eca\u56de\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\n\u4eca\u56de\u306fActor\u3092\uff12\u7a2e\u985e\u7528\u610f\u3057\u305f\u3002\nmain\u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u306fSupervisorExceptionActor\u3078\u3002\u305d\u3053\u304b\u3089ExceptionActor\u3078\u5358\u306b\u6a2a\u6d41\u3057\u3002\u3067\u3001\u4f8b\u5916\u767a\u751f\u3002\n\u5358\u7d14\u5316\u306e\u305f\u3081\u306b?(ask)\u3067\u306f\u306a\u304f\u3066!(tell)\u3092\u4f7f\u3063\u3066\u3044\u308b\u3002\n\n```scala\nimport akka.actor._\n\nobject Main extends App {\n  val system = ActorSystem()\n  try {\n    val actor = system.actorOf(Props[SupervisorExceptionActor]) \n    \n    actor ! 1\n    actor ! 4\n    actor ! 2\n    \n    Thread.sleep(3000)\n  } finally {\n    system.shutdown()\n  }\n}\n\nclass SupervisorExceptionActor extends Actor {\n  val actor = context.actorOf(Props[ExceptionActor])\n\n  override def preStart() = println(\"preStart() in SupervisorExceptionActor\")\n\n  def receive = {\n    case x => actor ! x\n  }\n}\n\nclass ExceptionActor extends Actor {\n  override def preStart() = println(\"preStart() in ExceptionActor\")\n  \n  def receive = {\n    case 4 => sys.error(\"\u6b7b\")\n    case x => println(x + \" : \" + this)\n  }\n}\n```\n\nSupervisorExceptionActor\u5185\u3067 ```context.actorOf``` \u3067ExceptionActor\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u3067SupervisorExceptionActor\u306fExceptionActor\u306eSupervisor\uff08\u76e3\u7763\u8005\uff09\u3068\u306a\u308b\u3002\u8981\u306f\u89aa\u5b50\u95a2\u4fc2\u304c\u51fa\u6765\u308b\u3002\n\u306a\u304a\u3001 ```system.actorOf``` \u3067\u751f\u6210\u3059\u308b\u3068Supervisor\u306b\u306f\u306a\u3089\u306a\u3044\u306e\u3067\u6ce8\u610f\u3002  \n\nSupervisor\u306f\u76e3\u8996\u5bfe\u8c61\u306e\u5b50Actor\u3067\u4f8b\u5916\u304c\u767a\u751f\u3057\u305f\u969b\u306e\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u884c\u3046\u3002\n\u4e0a\u8a18\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u7279\u306b\u4f55\u3082\u8a2d\u5b9a\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u8a2d\u5b9a\u304c\u4f7f\u7528\u3055\u308c\u308b\u3002\u521d\u671f\u8a2d\u5b9a\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\nhttps://github.com/akka/akka/blob/release-2.3/akka-actor/src/main/scala/akka/actor/Actor.scala#L493\n\n```scala\n  /**\n   * User overridable definition the strategy to use for supervising\n   * child actors.\n   */\n  def supervisorStrategy: SupervisorStrategy = SupervisorStrategy.defaultStrategy\n```\n\nSupervisorStragegy.defaultStrategy\u306e\u5ba3\u8a00\u90e8\u306f\u4ee5\u4e0b\u3002\nhttps://github.com/akka/akka/blob/release-2.3/akka-actor/src/main/scala/akka/actor/FaultHandling.scala#L166-L168\n\n```scala\n  /**\n   * When supervisorStrategy is not specified for an actor this\n   * is used by default. OneForOneStrategy with decider defined in\n   * [[#defaultDecider]].\n   */\n  final val defaultStrategy: SupervisorStrategy = {\n    OneForOneStrategy()(defaultDecider)\n  }\n```\n\ndefaultDecider\u90e8\u5206\u3067\u4f8b\u5916\u6bce\u306e\u632f\u308b\u821e\u3044\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\nhttps://github.com/akka/akka/blob/release-2.3/akka-actor/src/main/scala/akka/actor/FaultHandling.scala#L154-L159\n\n```scala\n  /**\n   * When supervisorStrategy is not specified for an actor this\n   * [[Decider]] is used by default in the supervisor strategy.\n   * The child will be stopped when [[akka.actor.ActorInitializationException]],\n   * [[akka.actor.ActorKilledException]], or [[akka.actor.DeathPactException]] is\n   * thrown. It will be restarted for other `Exception` types.\n   * The error is escalated if it's a `Throwable`, i.e. `Error`.\n   */\n  final val defaultDecider: Decider = {\n    case _: ActorInitializationException \u21d2 Stop\n    case _: ActorKilledException         \u21d2 Stop\n    case _: DeathPactException           \u21d2 Stop\n    case _: Exception                    \u21d2 Restart\n  }\n```\n\n\u3053\u3053\u3067Stop\u3084Restart\u304c\u767b\u5834\u3057\u3066\u3044\u308b\u304c\u305d\u308c\u3089Directive\u306e\u7a2e\u985e\u3068\u305d\u306e\u610f\u5473\u3092\u307e\u3068\u3081\u308b\u3002\n\nDirective\u7a2e\u5225|\u610f\u5473\n----+----\nRestart|Actor\u3092\u518d\u4f5c\u6210\u3057\u3001\u51e6\u7406\u3092\u518d\u958b\uff08\u6b21\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u51e6\u7406\uff09\u3002Let it crash\u3068\u8a00\u308f\u308c\u308b\u306e\u306f\u3053\u306e\u632f\u308b\u821e\u3044\u3092\u6307\u3057\u3066\u3044\u308b(\u306f\u305a)\u3002\nResume|\u51e6\u7406\u3092\u518d\u958b\uff08\u6b21\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u51e6\u7406\uff09\u3002Restart\u3068\u306e\u9055\u3044\u306fActor\u3092\u518d\u4f5c\u6210\u3057\u306a\u3044\u3053\u3068\u3002\nStop|Actor\u3092\u505c\u6b62\u3059\u308b\u3002Mailbox\u306b\u6e9c\u307e\u3063\u3066\u3044\u305f\u305d\u306e\u4ed6\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u51e6\u7406\u3055\u308c\u306a\u3044\u306e\u3067dead letter\u6271\u3044\u3068\u306a\u308b\u3002\nEscalate|\u3055\u3089\u306b\u4e0a\u306eSupervisor\u306b\u4f8b\u5916\u3092\u4f1d\u642c\u3055\u305b\u308b\u3002\u5b50\u306b\u3064\u3044\u3066\u306f\u305d\u3053\u3067\u5b9a\u7fa9\u3057\u305fSupervisorStrategy\u306e\u632f\u308b\u821e\u3044\u306b\u5f93\u3046\u3002\n\n\u5b9f\u969b\u306b\u3053\u306e\u901a\u308a\u306b\u306a\u308b\u306e\u304b\u78ba\u8a8d\u3057\u3066\u307f\u308b\u3002\n\n## Restart\n\u307e\u305a\u306f\u5192\u982d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u3002\u4f55\u3082\u6307\u5b9a\u3057\u3066\u3044\u306a\u3044\u306e\u3067defaultStrategy\u304c\u63a1\u7528\u3055\u308c\u308b\u3002RuntimeException\u304c\u767a\u751f\u3059\u308b\u306e\u3067Restart\u304c\u5b9f\u884c\u3055\u308c\u308b\u3002\n\n```\npreStart() in SupervisorExceptionActor\npreStart() in ExceptionActor\n1 : ExceptionActor@603ed77d\npreStart() in ExceptionActor\n2 : ExceptionActor@69d00cce\n```\n\nExceptionActor\u304c\u518d\u4f5c\u6210\u3055\u308c\u3001\u5225\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u305f\u3002\n\n## Resume\n\u6b21\u306bResume\u306e\u78ba\u8a8d\u3002\nSupervisor\u5074\u3067\u660e\u793a\u7684\u306b\u5b9a\u7fa9\u3059\u308b\u3088\u3046\u306b\u4ee5\u4e0b\u3092\u8ffd\u8a18\u3002\n\n```scala\n  override def supervisorStrategy = OneForOneStrategy() {\n    case _ => Resume\n  }\n```\n\n\u4ee5\u4e0b\u3001\u5b9f\u884c\u7d50\u679c\u3002\n\n```\npreStart() in SupervisorExceptionActor\npreStart() in ExceptionActor\n1 : ExceptionActor@2bc2f760\n2 : ExceptionActor@2bc2f760\n```\n\n\u540c\u3058\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u4f8b\u5916\u5f8c\u306e\u5f8c\u7d9a\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u3002preStart()\u3082\u5b9f\u884c\u3055\u308c\u3066\u3044\u306a\u3044\u3002\n\n## Stop\n\u6b21\u306bStop\u306e\u78ba\u8a8d\u3002Resume\u3068\u3057\u3066\u3044\u308b\u90e8\u5206\u3092Stop\u306b\u5909\u66f4\u3059\u308b\u3060\u3051\u3002\n\n```scala\n  override def supervisorStrategy = OneForOneStrategy() {\n    case _ => Stop\n  }\n```\n\n\u4ee5\u4e0b\u3001\u5b9f\u884c\u7d50\u679c\u3002\n\n```\npreStart() in SupervisorExceptionActor\npreStart() in ExceptionActor\n1 : ExceptionActor@6f2612b9\n[INFO] [default-akka.actor.default-dispatcher-5] [akka://default/user/$a/$a] Message [java.lang.Integer] from Actor[akka://default/user/$a#-1970577465] to Actor[akka://default/user/$a/$a#1036814967] was not delivered. [1] dead letters encountered.\n```\n\nStop\u3057\u305f\u306e\u3067\u3001\u300c4\u300d\u306e\u5f8c\u7d9a\u306e\u300c2\u300d\u304c\u51e6\u7406\u3055\u308c\u305a\u3001dead-letter\u884c\u304d\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u4e8b\u304c\u78ba\u8a8d\u3067\u304d\u305f\u3002\n\n## Escalate\n\n\u6700\u5f8c\u306bEscalate\u3002Stop\u306e\u90e8\u5206\u3092Escalate\u306b\u5909\u3048\u308b\u3002\n\u30b3\u30ec\u306e\u52d5\u4f5c\u78ba\u8a8d\u3092\u884c\u3046\u306b\u306f\u66f4\u306a\u308bSupervisor\u3092\u7528\u610f\u3059\u308b\u5fc5\u8981\u3042\u308a\u3002\n\n```\nclass SupervisorSupervisorExceptionActor extends Actor {\n  val actor = context.actorOf(Props[SupervisorExceptionActor])\n\n  override def supervisorStrategy = OneForOneStrategy() {\n    case _ => Restart\n  }\n\n  def receive = {\n    case x => actor ! x\n  }\n}\n```\n\nSupervisorStrategyActor\u306fEscalate\u306b\u6307\u5b9a\u3059\u308b\u3002\n\n```scala\n  override def supervisorStrategy = OneForOneStrategy() {\n    case _ => Escalate\n  }\n```\n\n\u4ee5\u4e0b\u3001\u7d50\u679c\u3002\n\n```\npreStart() in SupervisorExceptionActor\npreStart() in ExceptionActor\n1 : ExceptionActor@428ad712\n[INFO] [default-akka.actor.default-dispatcher-3] [akka://default/user/$a/$a/$a] Message [java.lang.Integer] from Actor[akka://default/user/$a/$a#2112516208] to Actor[akka://default/user/$a/$a/$a#1057736964] was not delivered. [1] dead letters encountered. \npreStart() in SupervisorExceptionActor\npreStart() in ExceptionActor\n```\n\n\u4eca\u307e\u3067\u3068\u9055\u3063\u3066Supervisor\u306eSupervisor\u3067Restart\u3068\u5ba3\u8a00\u3057\u305f\u3053\u3068\u306b\u3088\u3063\u3066\u3001\u305d\u306e\u5b50\u3067\u3042\u308bSupervisor\u3082\u518d\u4f5c\u6210\u304c\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u3068\u3053\u308d\u3002\n\u305f\u3060\u3001\u300c2\u300d\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u306fdead-letters\u884c\u304d\u306b\u306a\u308b\u306e\u304b...\n\u30bf\u30a4\u30df\u30f3\u30b0\uff1f\u3053\u306e\u8fba\u306f\u672a\u3060\u3061\u3083\u3093\u3068\u7406\u89e3\u3067\u304d\u3066\u3044\u306a\u3044\u3002\n\u306a\u304a\u3001Resume\u306b\u3059\u308b\u3068\u300c2\u300d\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3082\u7121\u4e8b\u51e6\u7406\u3055\u308c\u305f\u3002\n\n# \u4f8b\u5916\u767a\u751f\u3092\u547c\u3073\u51fa\u3057\u5143\u306b\u4f1d\u3048\u308b\u306b\u306f\uff1f\n\u3082\u3068\u3082\u3068\u3053\u306e\u30b7\u30ea\u30fc\u30ba\u306f?(ask)\u3067\u547c\u3073\u51fa\u3057\u305f\u6642\u306b\u4f8b\u5916\u304c\u547c\u3073\u51fa\u3057\u5143\u306b\u4f1d\u308f\u3089\u306a\u3044\u3068\u3044\u3046\u3082\u306e\u3060\u3063\u305f\u3002\n\u547c\u3073\u51fa\u3057\u5143\u306b\u8fd4\u3059\u306b\u306fActor\u5185\u304b\u3089!\u3092\u4f7f\u3063\u3066\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u3089\u306a\u3044\u3068\u5c4a\u304b\u306a\u3044\u3002\n\u3088\u3063\u3066\u4f8b\u5916\u767a\u751f\u3092\u4f1d\u3048\u308b\u306b\u306f\u305d\u308c\u3092\u6355\u7372\u3057\u3066!\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u9001\u4fe1\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u6210\u529f\u6642\u3068\u5931\u6557\u6642\u3067\u9001\u308b\u578b\u304c\u7570\u306a\u308b\u306e\u3067Either\u3092\u4f7f\u3046\u306e\u304c\u4e00\u822c\u7684\u3060\u308d\u3046\u304b\u3002\n\n```scala\nclass ExceptionActor extends Actor {\n  def receive = {\n    case a => \n      Try { ...\u51e6\u7406... } match {\n        case Success(b) => \n          sender ! Right(\u6210\u529f\u6642\u306e\u30e1\u30c3\u30bb\u30fc\u30b8)\n        case Failure(c) => \n          sender ! Left(c) \n          throw c\n      }\n  }\n}\n```\n\n\u547c\u3073\u51fa\u3057\u5143\u306fFuture[Either[Throwable, String]]\u3068\u3044\u3063\u305f\u611f\u3058\u306e\u578b\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u308b\u3053\u3068\u3068\u306a\u308b\u3002\n\u30e2\u30ca\u30c9\u30c8\u30e9\u30f3\u30b9\u30d5\u30a9\u30fc\u30de\u30fc...\n\n\u306a\u304a\u3001\u305d\u3082\u305d\u3082\u306e\u8a71\u3067\u3044\u3046\u3068\u3001?\u3067\u306f\u306a\u304f\u306a\u308b\u3079\u304f!\u3067\u5168\u4f53\u3092\u69cb\u7bc9\u3059\u308b\u3088\u3046\u306b\u8a2d\u8a08\u3059\u308b\u3053\u3068\u304c\u826f\u3044\u3068\u306f\u601d\u3046\u3002\n\u3053\u306e\u3078\u3093\u306e\u8a71\u306f\u307e\u305f\u6642\u9593\u304c\u3042\u308c\u3070\u3002\n", "tags": ["Scala", "Akka"]}