{"context": " More than 1 year has passed since last update.\u6700\u8fd1 Reactor\u3068\u3044\u3046\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305f\u307f\u305f\u3044\u3060\u3063\u305f\u306e\u3067\u3001\nVert.x\u3068\u4e00\u7dd2\u306b\u4f7f\u3046\u306b\u306f\u3069\u3046\u3057\u305f\u3089\u3044\u3044\u304b\u3001\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nReactor\u306b\u306f\u3001Reactor\u30af\u30e9\u30b9\u3001Promise\u30af\u30e9\u30b9\u3001Stream\u30af\u30e9\u30b9\u3001\u305d\u308c\u3068\u3042\u3068\u3082\u3046\u4e00\u3064\u5909\u306a\u306e\u304c\u3042\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u4eca\u56de\u306fPromise\u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\u4f7f\u3044\u65b9\u306f\u3060\u3044\u305f\u3044\u4e00\u822c\u7684\u306aDefered\u3084Promise\u3068\u540c\u3058\u4f7f\u3044\u65b9\u3089\u3057\u3044\u307f\u305f\u3044\u3067\u3059\u306d\u3002\n\u30bd\u30fc\u30b9\u306f\u8a66\u884c\u932f\u8aa4\u3057\u306a\u304c\u3089\u3060\u3063\u305f\u306e\u3067\u3046\u307e\u304f\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u305d\u3057\u3066\u3061\u3087\u3063\u3068\u9577\u3044\u3067\u3059\u304c\u3001getDeferred\u30e1\u30bd\u30c3\u30c9\u3068\u3001Promises\u3092\u4f7f\u3063\u3066\u3044\u308b\u3042\u305f\u308a\u304cReactor\u3067\u3059\u3002\nPromise\u306eonSuccess\u3084onError\u306e\u7121\u540d\u30af\u30e9\u30b9\u304c\u3061\u3087\u3063\u3068\u9762\u5012\u304f\u3055\u3044\u3067\u3059\u306d\u3002\n\u672c\u5f53\u306fGroovy\u3067\u306f closure\u3067\u66f8\u3051\u308b\u307f\u305f\u3044\u306a\u306e\u3067\u3059\u304c\u3001Vert.x\u4e0a\u3067\u4f7f\u3046\u3068\u7121\u540d\u30af\u30e9\u30b9\u3092\u4f7f\u308f\u306a\u3044\u3068\u4e0a\u624b\u304f\u52d5\u304b\u306a\u304f\u3066\u3001\u3044\u307e\u8abf\u3079\u3066\u3044\u308b\u3068\u3053\u308d\u3067\u3059\u3002\npackage reactortest\n\nimport java.net.URLDecoder\n\nimport org.vertx.groovy.platform.Verticle\nimport org.vertx.groovy.core.Vertx\nimport org.vertx.groovy.core.eventbus.EventBus\nimport org.vertx.groovy.core.eventbus.Message\nimport org.vertx.groovy.core.http.HttpServerRequest\n\nimport reactor.core.Environment\nimport reactor.core.composable.Promise\nimport reactor.core.composable.spec.Promises\n\nimport reactor.function.Consumer\nimport reactor.event.Event\n\n// POST\u3067user_id\u3092\u53d7\u3051\u53d6\u3063\u3066\n// users\u30c6\u30fc\u30d6\u30eb\u3001user_statuses\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u8a72\u5f53\u306e\u30e6\u30fc\u30b6\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3066\u304d\u3066\n// \u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u3059\nclass Server extends Verticle {\n    Environment env = new Environment()\n\n    @Override\n    def start() {\n        DB.eventBus = vertx.eventBus\n        container.deployModule(DB.dbconfig.module, DB.dbconfig.config, 1) // mod-mysql-postgresql\u3092\u3067\u30d7\u30ed\u30a4\u3059\u308b\n\n        def server = vertx.createHttpServer()\n        server.requestHandler { processRequest(it) }.listen(8080)\n    }\n\n    @Override\n    def stop() {\n        env.shutdown()\n    }\n\n    def processRequest(request) {\n        new RequestHandler(request:request).perform()\n    }\n\n    def getDeferred() {\n        Promises.defer().env(env).dispatcher(Environment.RING_BUFFER).get()\n    }\n\n    // \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u51e6\u7406\u3059\u308b\u30af\u30e9\u30b9\n    class RequestHandler {\n        private HttpServerRequest request\n        private def db = new DB()\n\n        def perform() {\n            postParameters().then(onGotPostParameter(), onError())\n        }\n\n        // POST\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308bPromise\n        private def postParameters() {\n            def deferred = getDeferred()\n            def promise = deferred.compose()\n\n            request.bodyHandler { data ->\n                def body = data.getString(0, data.length)\n                deferred.accept(new Parameter(body))\n            }\n            promise\n        }\n\n        // POST\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d6\u5f97\u3067\u304d\u305f\u969b\u306eonSuccess -> DB\u304b\u3089user\u3068user_status\u3092\u53d6\u5f97\u3059\u308bPromise\n        private def onGotPostParameter() {\n            new Consumer<Parameter>() {\n                void accept(Parameter params) {\n                    def userId = params.get(\"user_id\")\n\n                    Promises.when(db.findUser(userId), db.findUserStatus(userId))\n                            .then(onGotUserAndUserStatus(), onError())\n                }\n            }\n        }\n\n        // User\u3068UserStatus\u3092\u53d6\u5f97\u3057\u305f\u969b\u306eonSuccess\n        private def onGotUserAndUserStatus() {\n            new Consumer<ArrayList>() {\n                void accept(ArrayList list) {\n                    request.response.end(list*.toString().join(\" - \"))\n                }\n            }\n        }\n\n        // \u30a8\u30e9\u30fc\n        private def onError() {\n            new Consumer<Throwable>() {\n                void accept(Throwable t) {\n                    request.response.end(t.toString())\n                }\n            }\n        }\n    }\n\n    //DB\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u30af\u30e9\u30b9\n    class DB {\n        static EventBus eventBus\n\n        def findUser(userId) {\n            find(queryUser(userId))\n        }\n\n        def findUserStatus(userId) {\n            find(queryUserStatus(userId))\n        }\n\n        private def find(query) {\n            def deferred = getDeferred()\n            def promise = deferred.compose()\n\n            eventBus.send(dbconfig.config.address, query) { message ->\n                def body = message.body\n                def result = (body.status != \"ok\") ? null : body.results[0]\n\n                deferred.accept(result)\n            }\n            promise\n        }\n\n        private def queryUser(userId) {\n            [\n                action: \"prepared\",\n                statement: \"SELECT * FROM users WHERE id=? LIMIT 1\",\n                values: [userId]\n            ]\n        }\n\n        private def queryUserStatus(userId) {\n            [\n                action: \"prepared\",\n                statement: \"SELECT * FROM user_statuses WHERE user_id=? LIMIT 1\",\n                values: [userId]\n            ]\n        }\n\n        static def dbconfig = [\n            module: \"io.vertx~mod-mysql-postgresql~0.2.0-SNAPSHOT\",\n            config: [\n                address: \"test\",\n                connection: \"mysql\",\n                host: \"localhost\",\n                port: 3306,\n                username: \"root\",\n                database: \"test\"\n            ]\n        ]\n    }\n\n    // POST\u30dc\u30c7\u30a3\u3092application/www-form-urlencoded\u3068\u898b\u306a\u3057\u3066\u30d1\u30c3\u30b7\u30e5\u306b\u5206\u89e3\u3059\u308b\u30af\u30e9\u30b9\n    class Parameter {\n        private def keyValues\n\n        Parameter(string) {\n            keyValues = parseRequestBody(string)\n        }\n\n        private def parseRequestBody(string) {\n            def kvs = [:]\n            string.split(\"&\").each { chunk ->\n                def keyValue = chunk.split(\"=\").collect { URLDecoder.decode(it, \"utf-8\") }\n                kvs[keyValue[0]] = keyValue[1]\n            }\n            return kvs\n        }\n\n        def get(key) {\n            keyValues[key]\n        }\n    }\n}\n\n\u6700\u8fd1 [Reactor](https://github.com/reactor/reactor \"Reactor\")\u3068\u3044\u3046\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305f\u307f\u305f\u3044\u3060\u3063\u305f\u306e\u3067\u3001\n[Vert.x](http://vertx.io/ \"Vert.x\")\u3068\u4e00\u7dd2\u306b\u4f7f\u3046\u306b\u306f\u3069\u3046\u3057\u305f\u3089\u3044\u3044\u304b\u3001\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\nReactor\u306b\u306f\u3001Reactor\u30af\u30e9\u30b9\u3001Promise\u30af\u30e9\u30b9\u3001Stream\u30af\u30e9\u30b9\u3001\u305d\u308c\u3068\u3042\u3068\u3082\u3046\u4e00\u3064\u5909\u306a\u306e\u304c\u3042\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u4eca\u56de\u306fPromise\u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\u4f7f\u3044\u65b9\u306f\u3060\u3044\u305f\u3044\u4e00\u822c\u7684\u306aDefered\u3084Promise\u3068\u540c\u3058\u4f7f\u3044\u65b9\u3089\u3057\u3044\u307f\u305f\u3044\u3067\u3059\u306d\u3002\n\n\n\u30bd\u30fc\u30b9\u306f\u8a66\u884c\u932f\u8aa4\u3057\u306a\u304c\u3089\u3060\u3063\u305f\u306e\u3067\u3046\u307e\u304f\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u305d\u3057\u3066\u3061\u3087\u3063\u3068\u9577\u3044\u3067\u3059\u304c\u3001getDeferred\u30e1\u30bd\u30c3\u30c9\u3068\u3001Promises\u3092\u4f7f\u3063\u3066\u3044\u308b\u3042\u305f\u308a\u304cReactor\u3067\u3059\u3002\n\nPromise\u306eonSuccess\u3084onError\u306e\u7121\u540d\u30af\u30e9\u30b9\u304c\u3061\u3087\u3063\u3068\u9762\u5012\u304f\u3055\u3044\u3067\u3059\u306d\u3002\n\u672c\u5f53\u306fGroovy\u3067\u306f closure\u3067\u66f8\u3051\u308b\u307f\u305f\u3044\u306a\u306e\u3067\u3059\u304c\u3001Vert.x\u4e0a\u3067\u4f7f\u3046\u3068\u7121\u540d\u30af\u30e9\u30b9\u3092\u4f7f\u308f\u306a\u3044\u3068\u4e0a\u624b\u304f\u52d5\u304b\u306a\u304f\u3066\u3001\u3044\u307e\u8abf\u3079\u3066\u3044\u308b\u3068\u3053\u308d\u3067\u3059\u3002\n\n~~~groovy\npackage reactortest\n\nimport java.net.URLDecoder\n\nimport org.vertx.groovy.platform.Verticle\nimport org.vertx.groovy.core.Vertx\nimport org.vertx.groovy.core.eventbus.EventBus\nimport org.vertx.groovy.core.eventbus.Message\nimport org.vertx.groovy.core.http.HttpServerRequest\n\nimport reactor.core.Environment\nimport reactor.core.composable.Promise\nimport reactor.core.composable.spec.Promises\n\nimport reactor.function.Consumer\nimport reactor.event.Event\n\n// POST\u3067user_id\u3092\u53d7\u3051\u53d6\u3063\u3066\n// users\u30c6\u30fc\u30d6\u30eb\u3001user_statuses\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u8a72\u5f53\u306e\u30e6\u30fc\u30b6\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3066\u304d\u3066\n// \u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u3059\nclass Server extends Verticle {\n    Environment env = new Environment()\n\n    @Override\n    def start() {\n        DB.eventBus = vertx.eventBus\n        container.deployModule(DB.dbconfig.module, DB.dbconfig.config, 1) // mod-mysql-postgresql\u3092\u3067\u30d7\u30ed\u30a4\u3059\u308b\n\n        def server = vertx.createHttpServer()\n        server.requestHandler { processRequest(it) }.listen(8080)\n    }\n\n    @Override\n    def stop() {\n        env.shutdown()\n    }\n\n    def processRequest(request) {\n        new RequestHandler(request:request).perform()\n    }\n\n    def getDeferred() {\n        Promises.defer().env(env).dispatcher(Environment.RING_BUFFER).get()\n    }\n\n    // \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u51e6\u7406\u3059\u308b\u30af\u30e9\u30b9\n    class RequestHandler {\n        private HttpServerRequest request\n        private def db = new DB()\n\n        def perform() {\n            postParameters().then(onGotPostParameter(), onError())\n        }\n\n        // POST\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308bPromise\n        private def postParameters() {\n            def deferred = getDeferred()\n            def promise = deferred.compose()\n\n            request.bodyHandler { data ->\n                def body = data.getString(0, data.length)\n                deferred.accept(new Parameter(body))\n            }\n            promise\n        }\n\n        // POST\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d6\u5f97\u3067\u304d\u305f\u969b\u306eonSuccess -> DB\u304b\u3089user\u3068user_status\u3092\u53d6\u5f97\u3059\u308bPromise\n        private def onGotPostParameter() {\n            new Consumer<Parameter>() {\n                void accept(Parameter params) {\n                    def userId = params.get(\"user_id\")\n\n                    Promises.when(db.findUser(userId), db.findUserStatus(userId))\n                            .then(onGotUserAndUserStatus(), onError())\n                }\n            }\n        }\n\n        // User\u3068UserStatus\u3092\u53d6\u5f97\u3057\u305f\u969b\u306eonSuccess\n        private def onGotUserAndUserStatus() {\n            new Consumer<ArrayList>() {\n                void accept(ArrayList list) {\n                    request.response.end(list*.toString().join(\" - \"))\n                }\n            }\n        }\n\n        // \u30a8\u30e9\u30fc\n        private def onError() {\n            new Consumer<Throwable>() {\n                void accept(Throwable t) {\n                    request.response.end(t.toString())\n                }\n            }\n        }\n    }\n\n    //DB\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u30af\u30e9\u30b9\n    class DB {\n        static EventBus eventBus\n\n        def findUser(userId) {\n            find(queryUser(userId))\n        }\n\n        def findUserStatus(userId) {\n            find(queryUserStatus(userId))\n        }\n\n        private def find(query) {\n            def deferred = getDeferred()\n            def promise = deferred.compose()\n\n            eventBus.send(dbconfig.config.address, query) { message ->\n                def body = message.body\n                def result = (body.status != \"ok\") ? null : body.results[0]\n\n                deferred.accept(result)\n            }\n            promise\n        }\n\n        private def queryUser(userId) {\n            [\n                action: \"prepared\",\n                statement: \"SELECT * FROM users WHERE id=? LIMIT 1\",\n                values: [userId]\n            ]\n        }\n\n        private def queryUserStatus(userId) {\n            [\n                action: \"prepared\",\n                statement: \"SELECT * FROM user_statuses WHERE user_id=? LIMIT 1\",\n                values: [userId]\n            ]\n        }\n\n        static def dbconfig = [\n            module: \"io.vertx~mod-mysql-postgresql~0.2.0-SNAPSHOT\",\n            config: [\n                address: \"test\",\n                connection: \"mysql\",\n                host: \"localhost\",\n                port: 3306,\n                username: \"root\",\n                database: \"test\"\n            ]\n        ]\n    }\n\n    // POST\u30dc\u30c7\u30a3\u3092application/www-form-urlencoded\u3068\u898b\u306a\u3057\u3066\u30d1\u30c3\u30b7\u30e5\u306b\u5206\u89e3\u3059\u308b\u30af\u30e9\u30b9\n    class Parameter {\n        private def keyValues\n\n        Parameter(string) {\n            keyValues = parseRequestBody(string)\n        }\n        \n        private def parseRequestBody(string) {\n            def kvs = [:]\n            string.split(\"&\").each { chunk ->\n                def keyValue = chunk.split(\"=\").collect { URLDecoder.decode(it, \"utf-8\") }\n                kvs[keyValue[0]] = keyValue[1]\n            }\n            return kvs\n        }\n\n        def get(key) {\n            keyValues[key]\n        }\n    }\n}\n~~~", "tags": ["Vert.x2.0.2", "Groovy2.2.0", "Reactor1.0.0"]}