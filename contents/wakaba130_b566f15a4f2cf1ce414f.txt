{"context": " More than 1 year has passed since last update.\n\nfindHomography\u3068\u306f\n2\u679a\u306e\u753b\u50cf\u9593\u306e\u30db\u30e2\u30b0\u30e9\u30d5\u30a3\u884c\u5217\u306e\u63a8\u5b9a\u306b\u4f7f\u3046\u95a2\u6570\u3067\u3059\uff0e\nOpenCV\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u898b\u308b\u3068\u4ee5\u4e0b\u306e\uff13\u3064\u306e\u30d1\u30bf\u30fc\u30f3\u3067\u4f7f\u7528\u3067\u304d\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\nfindHomography\ncv::Mat findHomography(const Mat& srcPoints, const Mat& dstPoints, Mat& status, int method=0, double ransacReprojThreshold=3)\ncv::Mat findHomography(const Mat& srcPoints, const Mat& dstPoints, vector<uchar>& status, int method=0, double ransacReprojThreshold=3)\ncv::Mat findHomography(const Mat& srcPoints, const Mat& dstPoints, int method=0, double ransacReprojThreshold=3)\n\n\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\nsrcPoints -> \u5143\u5e73\u9762\u306e\u70b9\u7fa4\u306e\u5ea7\u6a19\uff0e CV_32FC2 \u578b\u306e\u884c\u5217\uff0c\u3042\u308b\u3044\u306f vector<Point2f>\u3067\u5165\u529b \ndstPoints -> \u76ee\u7684\u5e73\u9762\u306e\u70b9\u7fa4\u306e\u5ea7\u6a19\uff0e CV_32FC2 \u578b\u306e\u884c\u5217\uff0c\u3042\u308b\u3044\u306f vector<Point2f>\u3067\u5165\u529b \nmethod -> \u30db\u30e2\u30b0\u30e9\u30d5\u30a3\u884c\u5217\u3092\u6c42\u3081\u308b\u305f\u3081\u306e\u624b\u6cd5\n\n\n\nmethod\u5165\u529b\u5024\n\u8aac\u660e\n\n\n\n\n0\n\u70b9\u306e\u7d44\u3092\u3059\u3079\u3066\u5229\u7528\u3059\u308b\u901a\u5e38\u306e\u624b\u6cd5\n\n\nCV_RANSAC\nRANSAC\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u57fa\u3065\u304f\u30ed\u30d0\u30b9\u30c8\u306a\u624b\u6cd5\n\n\nCV_LMEDS\nLMedS\u63a8\u5b9a\uff08Least-Median\uff09\u306b\u3088\u308b\u30ed\u30d0\u30b9\u30c8\u306a\u624b\u6cd5\n\n\n\nransacReprojThreshold ->\u70b9\u306e\u7d44\u3092\uff0c\u30a4\u30f3\u30e9\u30a4\u30a2\u5024\uff08\u5916\u308c\u5024\u3067\u306f\u306a\u3044\u3082\u306e\uff09\u3068\u3057\u3066\u6271\u3046\u305f\u3081\u306b\u8a31\u5bb9\u3055\u308c\u308b\u9006\u6295\u5f71\u8aa4\u5dee\u306e\u6700\u5927\u5024\uff08\u3053\u308c\u306f\uff0cRANSAC\u30e1\u30bd\u30c3\u30c9\u3067\u306e\u307f\u5229\u7528\u3055\u308c\u307e\u3059\uff09\uff0esrcPoints \u3068 dstPoints \u304c\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\u3067\u8868\u3055\u308c\u3066\u3044\u308b\u306a\u3089\u3070\uff0c\u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f1\u304b\u308910\u306e\u7bc4\u56f2\u5185\u306e\u5024\u304c\u59a5\u5f53\u3067\u3059\uff0e\nstatus -> \u30ed\u30d0\u30b9\u30c8\u624b\u6cd5\uff08 CV_RANSAC \u307e\u305f\u306f CV_LMEDS \uff09\u3092\u5229\u7528\u3057\u305f\u5834\u5408\u306b\uff0c\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u3057\u3066\u51fa\u529b\u3055\u308c\u308b\u30de\u30b9\u30af\uff0e \u5165\u529b\u30de\u30b9\u30af\u5024\u306f\u7121\u8996\u3055\u308c\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n\nRANSAC\u3067\u4f7f\u7528\u3057\u305f\u70b9\u306e\u307f\u3092\u51fa\u529b\u3059\u308b\nRANSAC\u304bLMEDS\u3092\u4f7f\u3063\u305f\u3068\u304d\u306b\u51fa\u529b\u3055\u308c\u308bstatus\u306b\u306f\uff0c\u30de\u30c3\u30c1\u70b9\u6570\u5206\u306e{0,1}\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\uff0e\n1\u306e\u70b9\u306f\u4f7f\u7528\u3055\u308c\u305f\u70b9\uff08inliner\uff09\u3067\uff0c0\u306e\u70b9\u306f\u4f7f\u7528\u3055\u308c\u3066\u3044\u306a\u3044\u70b9\uff08outliner\uff09\u3067\u3059\uff0e\n\n\u8868\u793a\u30d7\u30ed\u30b0\u30e9\u30e0\n\u5bfe\u5fdc\u70b9\u306e\u8868\u793a\u3068RANSAC\u3067\u9078\u3070\u308c\u305f\u30a4\u30f3\u30e9\u30a4\u30a2\u306e\u5bfe\u5fdc\u70b9\u306e\u8868\u793a\u3092\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\n\uff08\u6c5a\u304f\u3066\u3054\u3081\u3093\u306a\u3055\u3044\uff09\uff0e\n\ninliner\n#include<iostream>\n#include<vector>\n#include<string>\n#include<fstream>\n#include\"OpenCV3.h\" //OpenCV\u8aad\u307f\u8fbc\u307f\u81ea\u4f5c\u30d8\u30c3\u30c0\n\nusing namespace std;\nusing namespace cv;\n\nint main(void)\n{\n    Mat Src1 = imread(\"graf1.png\");\n    Mat Src2 = imread(\"graf3.png\");\n\n    //\u30ad\u30fc\u30dd\u30a4\u30f3\u30c8\u691c\u51fa\u3068\u7279\u5fb4\u91cf\u8a18\u8ff0\n    vector<KeyPoint> keypoints1;\n    vector<KeyPoint> keypoints2;\n    Mat descriptors1, descriptors2;\n    cv::Ptr<cv::AKAZE> akaze = cv::AKAZE::create();\n    akaze->detectAndCompute(Src1, cv::Mat(), keypoints1, descriptors1);\n    akaze->detectAndCompute(Src2, cv::Mat(), keypoints2, descriptors2);\n\n    //\u30de\u30c3\u30c1\u30f3\u30b0(knn\u30de\u30c3\u30c1\u30f3\u30b0)\n    vector<vector<cv::DMatch>> knnmatch_points;\n    cv::BFMatcher match(cv::NORM_HAMMING);\n    match.knnMatch(descriptors1, descriptors2, knnmatch_points, 2);\n\n    //\u5bfe\u5fdc\u70b9\u3092\u7d5e\u308b\n    const double match_par = 0.6; //\u5019\u88dc\u70b9\u3092\u6b8b\u3059\u5834\u5408\u306e\u3057\u304d\u3044\u5024\n    vector<cv::DMatch> goodMatch;\n    //KeyPoint -> Point2d\n    vector<cv::Point2f> match_point1;\n    vector<cv::Point2f> match_point2;\n    for (size_t i = 0; i < knnmatch_points.size(); ++i) {\n        double distance1 = knnmatch_points[i][0].distance;\n        double distance2 = knnmatch_points[i][1].distance;\n\n        //\u7b2c\u4e8c\u5019\u88dc\u70b9\u304b\u3089\u8ddd\u96e2\u5024\u304c\u96e2\u308c\u3066\u3044\u308b\u70b9\u306e\u307f\u62bd\u51fa\uff08\u3044\u3044\u70b9\u3060\u3051\u6b8b\u3059\uff09\n        if (distance1 <= distance2 * match_par) {\n            goodMatch.push_back(knnmatch_points[i][0]);\n            match_point1.push_back(keypoints1[knnmatch_points[i][0].queryIdx].pt);\n            match_point2.push_back(keypoints2[knnmatch_points[i][0].trainIdx].pt);\n        }\n    }\n\n    //\u30db\u30e2\u30b0\u30e9\u30d5\u30a3\u884c\u5217\u63a8\u5b9a\n    cv::Mat masks;\n    cv::Mat H = cv::findHomography(match_point1, match_point2, masks, cv::RANSAC, 3);\n\n    //RANSAC\u3067\u4f7f\u308f\u308c\u305f\u5bfe\u5fdc\u70b9\u306e\u307f\u62bd\u51fa\n    vector<cv::DMatch> inlinerMatch;\n    for (size_t i = 0; i < masks.rows; ++i) {\n        uchar *inliner = masks.ptr<uchar>(i);\n        if (inliner[0] == 1) {\n            inlinerMatch.push_back(goodMatch[i]);\n        }\n    }\n\n    //\u5bfe\u5fdc\u70b9\u306e\u8868\u793a\n    cv::Mat drawmatch;\n    cv::drawMatches(Src1, keypoints1, Src2, keypoints2, goodMatch,drawmatch);\n    imwrite(\"match_point.jpg\",drawmatch);\n\n    //\u30a4\u30f3\u30e9\u30a4\u30a2\u306e\u5bfe\u5fdc\u70b9\u306e\u307f\u8868\u793a\n    cv::Mat drawMatch_inliner;\n    cv::drawMatches(Src1,keypoints1,Src2,keypoints2,inlinerMatch,drawMatch_inliner);\n    imwrite(\"match_inliner.jpg\",drawMatch_inliner);\n\n    imshow(\"DrawMatch\", drawmatch);\n    imshow(\"Inliner\", drawMatch_inliner);\n    waitKey();\n\n    return 0;\n}\n\n\n\n\u51fa\u529b\u7d50\u679c\ncv::findHomography\u306b\u5165\u308c\u308b\u524d\u306e\u5bfe\u5fdc\u70b9\n\ncv::findHomography\u306b\u5165\u308c\u305f\u5f8c\uff08RANSAC\u3067\u6c42\u3081\u305f\u30a4\u30f3\u30e9\u30a4\u30a2\uff09\u306e\u5bfe\u5fdc\u70b9\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u8868\u793a\uff0c\u307e\u305f\u306f\u5229\u7528\u304c\u3067\u304d\u307e\u3059\uff0e\n#findHomography\u3068\u306f\n\n2\u679a\u306e\u753b\u50cf\u9593\u306e\u30db\u30e2\u30b0\u30e9\u30d5\u30a3\u884c\u5217\u306e\u63a8\u5b9a\u306b\u4f7f\u3046\u95a2\u6570\u3067\u3059\uff0e\n[OpenCV\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9](http://opencv.jp/opencv-2svn/cpp/camera_calibration_and_3d_reconstruction.html#cv-findhomography)\u3092\u898b\u308b\u3068\u4ee5\u4e0b\u306e\uff13\u3064\u306e\u30d1\u30bf\u30fc\u30f3\u3067\u4f7f\u7528\u3067\u304d\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\n\n```C++:findHomography\ncv::Mat findHomography(const Mat& srcPoints, const Mat& dstPoints, Mat& status, int method=0, double ransacReprojThreshold=3)\ncv::Mat findHomography(const Mat& srcPoints, const Mat& dstPoints, vector<uchar>& status, int method=0, double ransacReprojThreshold=3)\ncv::Mat findHomography(const Mat& srcPoints, const Mat& dstPoints, int method=0, double ransacReprojThreshold=3)\n```\n\n##\u30d1\u30e9\u30e1\u30fc\u30bf\n<b>srcPoints</b> -> \u5143\u5e73\u9762\u306e\u70b9\u7fa4\u306e\u5ea7\u6a19\uff0e CV_32FC2 \u578b\u306e\u884c\u5217\uff0c\u3042\u308b\u3044\u306f vector&lt;Point2f&gt;\u3067\u5165\u529b \n<b>dstPoints</b> -> \u76ee\u7684\u5e73\u9762\u306e\u70b9\u7fa4\u306e\u5ea7\u6a19\uff0e CV_32FC2 \u578b\u306e\u884c\u5217\uff0c\u3042\u308b\u3044\u306f vector&lt;Point2f&gt;\u3067\u5165\u529b \n<b>method</b> -> \u30db\u30e2\u30b0\u30e9\u30d5\u30a3\u884c\u5217\u3092\u6c42\u3081\u308b\u305f\u3081\u306e\u624b\u6cd5\n\n|method\u5165\u529b\u5024|\u8aac\u660e|\n|:--------:|:---------|\n|0|\u70b9\u306e\u7d44\u3092\u3059\u3079\u3066\u5229\u7528\u3059\u308b\u901a\u5e38\u306e\u624b\u6cd5|\n|CV_RANSAC|RANSAC\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u57fa\u3065\u304f\u30ed\u30d0\u30b9\u30c8\u306a\u624b\u6cd5|\n|CV_LMEDS|LMedS\u63a8\u5b9a\uff08Least-Median\uff09\u306b\u3088\u308b\u30ed\u30d0\u30b9\u30c8\u306a\u624b\u6cd5|\n\n<b>ransacReprojThreshold</b> ->\u70b9\u306e\u7d44\u3092\uff0c\u30a4\u30f3\u30e9\u30a4\u30a2\u5024\uff08\u5916\u308c\u5024\u3067\u306f\u306a\u3044\u3082\u306e\uff09\u3068\u3057\u3066\u6271\u3046\u305f\u3081\u306b\u8a31\u5bb9\u3055\u308c\u308b\u9006\u6295\u5f71\u8aa4\u5dee\u306e\u6700\u5927\u5024\uff08\u3053\u308c\u306f\uff0cRANSAC\u30e1\u30bd\u30c3\u30c9\u3067\u306e\u307f\u5229\u7528\u3055\u308c\u307e\u3059\uff09\uff0esrcPoints \u3068 dstPoints \u304c\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\u3067\u8868\u3055\u308c\u3066\u3044\u308b\u306a\u3089\u3070\uff0c\u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f1\u304b\u308910\u306e\u7bc4\u56f2\u5185\u306e\u5024\u304c\u59a5\u5f53\u3067\u3059\uff0e\n\n<b>status</b> -> \u30ed\u30d0\u30b9\u30c8\u624b\u6cd5\uff08 CV_RANSAC \u307e\u305f\u306f CV_LMEDS \uff09\u3092\u5229\u7528\u3057\u305f\u5834\u5408\u306b\uff0c\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u3057\u3066\u51fa\u529b\u3055\u308c\u308b\u30de\u30b9\u30af\uff0e \u5165\u529b\u30de\u30b9\u30af\u5024\u306f\u7121\u8996\u3055\u308c\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n\n#RANSAC\u3067\u4f7f\u7528\u3057\u305f\u70b9\u306e\u307f\u3092\u51fa\u529b\u3059\u308b\nRANSAC\u304bLMEDS\u3092\u4f7f\u3063\u305f\u3068\u304d\u306b\u51fa\u529b\u3055\u308c\u308bstatus\u306b\u306f\uff0c\u30de\u30c3\u30c1\u70b9\u6570\u5206\u306e{0,1}\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\uff0e\n1\u306e\u70b9\u306f\u4f7f\u7528\u3055\u308c\u305f\u70b9\uff08inliner\uff09\u3067\uff0c0\u306e\u70b9\u306f\u4f7f\u7528\u3055\u308c\u3066\u3044\u306a\u3044\u70b9\uff08outliner\uff09\u3067\u3059\uff0e\n\n##\u8868\u793a\u30d7\u30ed\u30b0\u30e9\u30e0\n\u5bfe\u5fdc\u70b9\u306e\u8868\u793a\u3068RANSAC\u3067\u9078\u3070\u308c\u305f\u30a4\u30f3\u30e9\u30a4\u30a2\u306e\u5bfe\u5fdc\u70b9\u306e\u8868\u793a\u3092\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\n\uff08\u6c5a\u304f\u3066\u3054\u3081\u3093\u306a\u3055\u3044\uff09\uff0e\n\n```C++:inliner\n#include<iostream>\n#include<vector>\n#include<string>\n#include<fstream>\n#include\"OpenCV3.h\" //OpenCV\u8aad\u307f\u8fbc\u307f\u81ea\u4f5c\u30d8\u30c3\u30c0\n\nusing namespace std;\nusing namespace cv;\n\nint main(void)\n{\n\tMat Src1 = imread(\"graf1.png\");\n\tMat Src2 = imread(\"graf3.png\");\n\n\t//\u30ad\u30fc\u30dd\u30a4\u30f3\u30c8\u691c\u51fa\u3068\u7279\u5fb4\u91cf\u8a18\u8ff0\n\tvector<KeyPoint> keypoints1;\n\tvector<KeyPoint> keypoints2;\n\tMat descriptors1, descriptors2;\n\tcv::Ptr<cv::AKAZE> akaze = cv::AKAZE::create();\n\takaze->detectAndCompute(Src1, cv::Mat(), keypoints1, descriptors1);\n\takaze->detectAndCompute(Src2, cv::Mat(), keypoints2, descriptors2);\n\n\t//\u30de\u30c3\u30c1\u30f3\u30b0(knn\u30de\u30c3\u30c1\u30f3\u30b0)\n\tvector<vector<cv::DMatch>> knnmatch_points;\n\tcv::BFMatcher match(cv::NORM_HAMMING);\n\tmatch.knnMatch(descriptors1, descriptors2, knnmatch_points, 2);\n\n\t//\u5bfe\u5fdc\u70b9\u3092\u7d5e\u308b\n\tconst double match_par = 0.6; //\u5019\u88dc\u70b9\u3092\u6b8b\u3059\u5834\u5408\u306e\u3057\u304d\u3044\u5024\n\tvector<cv::DMatch> goodMatch;\n\t//KeyPoint -> Point2d\n\tvector<cv::Point2f> match_point1;\n\tvector<cv::Point2f> match_point2;\n\tfor (size_t i = 0; i < knnmatch_points.size(); ++i) {\n\t\tdouble distance1 = knnmatch_points[i][0].distance;\n\t\tdouble distance2 = knnmatch_points[i][1].distance;\n\n\t\t//\u7b2c\u4e8c\u5019\u88dc\u70b9\u304b\u3089\u8ddd\u96e2\u5024\u304c\u96e2\u308c\u3066\u3044\u308b\u70b9\u306e\u307f\u62bd\u51fa\uff08\u3044\u3044\u70b9\u3060\u3051\u6b8b\u3059\uff09\n\t\tif (distance1 <= distance2 * match_par) {\n\t\t\tgoodMatch.push_back(knnmatch_points[i][0]);\n\t\t\tmatch_point1.push_back(keypoints1[knnmatch_points[i][0].queryIdx].pt);\n\t\t\tmatch_point2.push_back(keypoints2[knnmatch_points[i][0].trainIdx].pt);\n\t\t}\n\t}\n\n\t//\u30db\u30e2\u30b0\u30e9\u30d5\u30a3\u884c\u5217\u63a8\u5b9a\n\tcv::Mat masks;\n\tcv::Mat H = cv::findHomography(match_point1, match_point2, masks, cv::RANSAC, 3);\n\n\t//RANSAC\u3067\u4f7f\u308f\u308c\u305f\u5bfe\u5fdc\u70b9\u306e\u307f\u62bd\u51fa\n\tvector<cv::DMatch> inlinerMatch;\n\tfor (size_t i = 0; i < masks.rows; ++i) {\n\t\tuchar *inliner = masks.ptr<uchar>(i);\n\t\tif (inliner[0] == 1) {\n\t\t\tinlinerMatch.push_back(goodMatch[i]);\n\t\t}\n\t}\n\n\t//\u5bfe\u5fdc\u70b9\u306e\u8868\u793a\n\tcv::Mat drawmatch;\n\tcv::drawMatches(Src1, keypoints1, Src2, keypoints2, goodMatch,drawmatch);\n\timwrite(\"match_point.jpg\",drawmatch);\n\n\t//\u30a4\u30f3\u30e9\u30a4\u30a2\u306e\u5bfe\u5fdc\u70b9\u306e\u307f\u8868\u793a\n\tcv::Mat drawMatch_inliner;\n\tcv::drawMatches(Src1,keypoints1,Src2,keypoints2,inlinerMatch,drawMatch_inliner);\n\timwrite(\"match_inliner.jpg\",drawMatch_inliner);\n\n\timshow(\"DrawMatch\", drawmatch);\n\timshow(\"Inliner\", drawMatch_inliner);\n\twaitKey();\n\n\treturn 0;\n}\n```\n\n##\u51fa\u529b\u7d50\u679c\ncv::findHomography\u306b\u5165\u308c\u308b\u524d\u306e\u5bfe\u5fdc\u70b9\n![match_point.jpg](https://qiita-image-store.s3.amazonaws.com/0/104675/37e90ff7-b4db-27f2-38d9-fc576b4b03fd.jpeg)\n\ncv::findHomography\u306b\u5165\u308c\u305f\u5f8c\uff08RANSAC\u3067\u6c42\u3081\u305f\u30a4\u30f3\u30e9\u30a4\u30a2\uff09\u306e\u5bfe\u5fdc\u70b9\n![match_inliner.jpg](https://qiita-image-store.s3.amazonaws.com/0/104675/d1eff4d7-ead8-9073-1cc0-e735c166ff7c.jpeg)\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u8868\u793a\uff0c\u307e\u305f\u306f\u5229\u7528\u304c\u3067\u304d\u307e\u3059\uff0e\n", "tags": ["OpenCV", "findHomography", "\u30db\u30e2\u30b0\u30e9\u30d5\u30a3\u884c\u5217\u63a8\u5b9a"]}