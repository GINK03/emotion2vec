{"context": "\u3053\u306e\u30c6\u30b9\u30c8\u306f\u5931\u6557\u3059\u308b\u3002\nTEST_METHOD(BuggyAssertion)\n{\n    Assert::AreEqual(\"\u3042\u3044\u3046\u3048\u304a\", \"\u304b\u304d\u304f\u3051\u3053\");\n}\n\n\u554f\u984c\u306a\u306e\u306f\u3001\u5b9f\u884c\u7d50\u679c\u3002\u3053\u3046\u306a\u308b\u3002\n\n\n\u539f\u56e0\n\u4ee5\u4e0b\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u30d8\u30c3\u30c0\u30fc\u5185\u306b\u3001expect\u3068actual\u3092std::wstring\u578b\u306b\u30b3\u30f3\u30d0\u30fc\u30c8\u3059\u308btemplate\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u3002\n\nC:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\UnitTest\\include\n\n\nCppUnitTestAssert.h\n// std::string \u2192 std::wstring \u7248\ntemplate<> inline std::wstring ToString<std::string>           (const std::string& t)           { RETURN_WIDE_STRING(t.c_str()) ; }\n\n// char* \u2192 std::wstring \u7248\ntemplate<> inline std::wstring ToString<char>(char* t) { if (NULL == t) return std::wstring(L\"(NULL)\"); RETURN_WIDE_STRING(t); }\n\n\n\u5171\u901a\u3067\u4f7f\u7528\u3055\u308c\u308bRETURN_WIDE_STRING\u30de\u30af\u30ed\u306f\u3053\u3046\u306a\u3063\u3066\u3044\u308b\u3002\n#define RETURN_WIDE_STRING(inputValue)      std::wstringstream _s;_s << inputValue; return _s.str()\n\n\u898b\u3084\u3059\u304f\u3057\u3066\u307f\u308b\u3002\nstd::wstring RETURN_WIDE_STRING(/* std::string or char* */ inputValue)\n{\n    std::wstringstream _s;\n    _s << inputValue;\n    return _s.str();\n}\n\nstd::wstringstream\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u305f\u3060\u6d41\u3057\u8fbc\u3093\u3067\u3044\u308b\u3060\u3051\u3060\u3063\u305f\u3002\n\u30b9\u30de\u30fc\u30c8\u306b\u89e3\u6c7a\u3059\u308b\u65b9\u6cd5\u304c\u601d\u3044\u3064\u304b\u306a\u3044\u3002\n\u3053\u306e\u30c6\u30b9\u30c8\u306f\u5931\u6557\u3059\u308b\u3002\n\n```cpp\nTEST_METHOD(BuggyAssertion)\n{\n    Assert::AreEqual(\"\u3042\u3044\u3046\u3048\u304a\", \"\u304b\u304d\u304f\u3051\u3053\");\n}\n```\n\n\u554f\u984c\u306a\u306e\u306f\u3001\u5b9f\u884c\u7d50\u679c\u3002\u3053\u3046\u306a\u308b\u3002\n\n![assertion.png](https://qiita-image-store.s3.amazonaws.com/0/2883/efd19f37-e895-7c13-734d-52d1f5ba9853.png)\n\n## \u539f\u56e0\n\n\u4ee5\u4e0b\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u30d8\u30c3\u30c0\u30fc\u5185\u306b\u3001expect\u3068actual\u3092`std::wstring`\u578b\u306b\u30b3\u30f3\u30d0\u30fc\u30c8\u3059\u308btemplate\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u3002\n\n- `C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\UnitTest\\include`\n\n```cpp:CppUnitTestAssert.h\n// std::string \u2192 std::wstring \u7248\ntemplate<> inline std::wstring ToString<std::string>           (const std::string& t)           { RETURN_WIDE_STRING(t.c_str()) ; }\n\n// char* \u2192 std::wstring \u7248\ntemplate<> inline std::wstring ToString<char>(char* t) { if (NULL == t) return std::wstring(L\"(NULL)\"); RETURN_WIDE_STRING(t); }\n```\n\n\u5171\u901a\u3067\u4f7f\u7528\u3055\u308c\u308b`RETURN_WIDE_STRING`\u30de\u30af\u30ed\u306f\u3053\u3046\u306a\u3063\u3066\u3044\u308b\u3002\n\n```cpp\n#define RETURN_WIDE_STRING(inputValue)      std::wstringstream _s;_s << inputValue; return _s.str()\n```\n\n\u898b\u3084\u3059\u304f\u3057\u3066\u307f\u308b\u3002\n\n```cpp:\nstd::wstring RETURN_WIDE_STRING(/* std::string or char* */ inputValue)\n{\n    std::wstringstream _s;\n    _s << inputValue;\n    return _s.str();\n}\n```\n\n`std::wstringstream`\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u305f\u3060\u6d41\u3057\u8fbc\u3093\u3067\u3044\u308b\u3060\u3051\u3060\u3063\u305f\u3002\n\u30b9\u30de\u30fc\u30c8\u306b\u89e3\u6c7a\u3059\u308b\u65b9\u6cd5\u304c\u601d\u3044\u3064\u304b\u306a\u3044\u3002\n", "tags": ["VC++", "unittest", "VisualStudio2015"]}