{"tags": ["JavaScript", "\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002Javascript\u3067\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3 (\u305d\u306e7: Chain of Responsibility) - \u307e\u3081\u30fc\u30b8\u30a7\u30f3\u30c8\u8aad\u3093\u3060\u3002\u59d4\u8b72\u5148\u3067\u306e\u51e6\u7406\u306b\u975e\u540c\u671f\u51e6\u7406\u3092\u542b\u307e\u306a\u3044\u30d1\u30bf\u30fc\u30f3\u306a\u3089\u3001\u5358\u7d14\u306b\u30e6\u30fc\u30b6\u30fc\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\uff08client\uff09\u306b\u767b\u9332\u3057\u305f\u51e6\u7406\u5668\u3092\u9806\u756a\u306b\u5b9f\u884c\u3057\u3066\u3044\u3063\u305f\u307b\u3046\u304c\u30b7\u30f3\u30d7\u30eb\u3060\u3068\u601d\u3046\u3057\u3001\nvar client = new Client(\n    new TyepCheck\n  , new MinLengthCheck(min_length)\n  , new MaxLengthCheck(max_length)\n  , new MainHandler\n)\n\nclient.request(foo)\n\n\u306e\u3088\u3046\u306a\u66f8\u304d\u65b9\u306e\u65b9\u304c\uff08\u81ea\u5206\u306b\u306f\uff09\u308f\u304b\u308a\u3084\u3059\u3044\u304b\u306a\u3068\u3002\n\nclient.js\nfunction Client () {\n    this.validators = [].slice.apply(arguments).filter(flt)\n}\nfunction flt (validator) {\n    return 'function' === typeof (validator || {}).request\n}\n\nClient.prototype.request = function (input) {\n    for (var i = 0; i < this.validators.length; i++) {\n        this.validators[i].request(input)\n    }\n}\n\n\n\ntype-check.js\nfunction TypeCheck () {}\n\nTypeCheck.prototype.request = function (input) {\n    if ('string' !== typeof input)\n        throw new TypeError('\"input\" must be \"string\"')\n    return !0\n}\n\n\n\nmin-length-check.js\nfunction MinLengthCheck (min_length) {\n    this.min_length = min_length\n}\n\nMinLengthCheck.prototype.request = function (input) {\n    if (this.min_length < input)\n        throw new Error('too short')\n    return !0\n}\n\n\n\nmax-length-check.js\nfunction MaxLengthCheck (max_length) {\n    this.max_length = max_length\n}\n\nMinLengthCheck.prototype.request = function (input) {\n    if (this.max_length > input)\n        throw new Error('too long')\n    return !0\n}\n\n\n\nmain-handler.js\nfunction MainHandler () {}\nMainHandler.prototype.request = function (input) {\n    console.log('validate ok - \"%s\"', input)\n    return !0\n}\n\n\n\u5b9f\u969b\u306b\u4f7f\u3063\u3066\u307f\u308b\n\nmain.js\nvar client = new Client(\n    new TypeCheck\n  , new MinLengthCheck(4)\n  , new MaxLengthCheck(6)\n  , new MainHandler\n)\n\ntest()\ntest('lg')\ntest('looooog!!')\ntest('log')\n\nfunction test (input) {\n    try {\n        client.request(input)\n    } catch (err) {\n        console.error(err)\n    }\n}\n\n\n[Javascript\u3067\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3 (\u305d\u306e7: Chain of Responsibility) - \u307e\u3081\u30fc\u30b8\u30a7\u30f3\u30c8](http://mame0112.hatenablog.com/entry/2015/08/05/025102)\u8aad\u3093\u3060\u3002\u59d4\u8b72\u5148\u3067\u306e\u51e6\u7406\u306b\u975e\u540c\u671f\u51e6\u7406\u3092\u542b\u307e\u306a\u3044\u30d1\u30bf\u30fc\u30f3\u306a\u3089\u3001\u5358\u7d14\u306b\u30e6\u30fc\u30b6\u30fc\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\uff08client\uff09\u306b\u767b\u9332\u3057\u305f\u51e6\u7406\u5668\u3092\u9806\u756a\u306b\u5b9f\u884c\u3057\u3066\u3044\u3063\u305f\u307b\u3046\u304c\u30b7\u30f3\u30d7\u30eb\u3060\u3068\u601d\u3046\u3057\u3001\n\n```js\nvar client = new Client(\n    new TyepCheck\n  , new MinLengthCheck(min_length)\n  , new MaxLengthCheck(max_length)\n  , new MainHandler\n)\n\nclient.request(foo)\n```\n\n\u306e\u3088\u3046\u306a\u66f8\u304d\u65b9\u306e\u65b9\u304c\uff08\u81ea\u5206\u306b\u306f\uff09\u308f\u304b\u308a\u3084\u3059\u3044\u304b\u306a\u3068\u3002\n\n```js:client.js\nfunction Client () {\n    this.validators = [].slice.apply(arguments).filter(flt)\n}\nfunction flt (validator) {\n    return 'function' === typeof (validator || {}).request\n}\n\nClient.prototype.request = function (input) {\n    for (var i = 0; i < this.validators.length; i++) {\n        this.validators[i].request(input)\n    }\n}\n```\n\n```js:type-check.js\nfunction TypeCheck () {}\n\nTypeCheck.prototype.request = function (input) {\n    if ('string' !== typeof input)\n        throw new TypeError('\"input\" must be \"string\"')\n    return !0\n}\n```\n```js:min-length-check.js\nfunction MinLengthCheck (min_length) {\n    this.min_length = min_length\n}\n\nMinLengthCheck.prototype.request = function (input) {\n    if (this.min_length < input)\n        throw new Error('too short')\n    return !0\n}\n```\n```js:max-length-check.js\nfunction MaxLengthCheck (max_length) {\n    this.max_length = max_length\n}\n\nMinLengthCheck.prototype.request = function (input) {\n    if (this.max_length > input)\n        throw new Error('too long')\n    return !0\n}\n```\n```js:main-handler.js\nfunction MainHandler () {}\nMainHandler.prototype.request = function (input) {\n    console.log('validate ok - \"%s\"', input)\n    return !0\n}\n```\n\n\u5b9f\u969b\u306b\u4f7f\u3063\u3066\u307f\u308b\n\n```js:main.js\nvar client = new Client(\n    new TypeCheck\n  , new MinLengthCheck(4)\n  , new MaxLengthCheck(6)\n  , new MainHandler\n)\n\ntest()\ntest('lg')\ntest('looooog!!')\ntest('log')\n\nfunction test (input) {\n    try {\n        client.request(input)\n    } catch (err) {\n        console.error(err)\n    }\n}\n```\n"}