{"tags": ["Unity", "C#", "VR"], "context": "\u3000\u3000\u3053\u306e\u8a18\u4e8b\u306e\u5185\u5bb9\u306f\u3001Unity 5.4.1\u4ee5\u964d\u3067\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5185\u5bb9\n\u3000VR\u30a2\u30d7\u30ea\u3067\u591a\u7528\u3059\u308bRay\u3092\u898b\u3084\u3059\u304f\u3059\u308b\u65b9\u6cd5\u306e\u4e00\u3064\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\nRaymanager.cs\npublic class RayManager : MonoBehaviour {\n\n    //Ray\u306e\u57fa\u672c\u8a2d\u5b9a\u7528\n    public GameObject dive_Camera; //(VR\u7528\u30ab\u30e1\u30e9\u3068\u3057\u3066\u4f7f\u7528\u3055\u305b\u3066\u3082\u3089\u3063\u3066\u3044\u307e\u3059)\n    public GameObject reticle; //\u8868\u793a\u3057\u305f\u3044\u753b\u50cf\u3092\u30a2\u30bf\u30c3\u30c1\n    Vector3 defaultPos;\n    Quaternion defaultRotation;\n    public float rayDistance;\n\n    void Start () {\n        //Ray\u306e\u521d\u671f\u5316\u8a2d\u5b9a\n        defaultPos      = reticle.transform.localPosition;\n        defaultRotation = reticle.transform.localRotation;\n    }\n\n    void Update () {\n        //Ray\u306e\u5c04\u51fa(VR\u7528\u306bdive_Camera\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u304cRay\u3092\u751f\u6210\u3059\u308c\u3070\u4f55\u3067\u3082\u3088\u3044)\n        Ray ray = new Ray(dive_Camera.transform.position, dive_Camera.transform.rotation * Vector3.forward);\n        RaycastHit hit;\n\n        //Ray\u304c\u5f53\u305f\u3063\u3066\u3044\u308b\u3068\u304d\u306e\u51e6\u7406\n        if (Physics.Raycast(ray, out hit, rayDistance)) {\n            //Ray\u306e\u53ef\u8996\u5316\uff08\u30c7\u30d0\u30c3\u30b0\u7528\uff09\n            Debug.DrawLine(dive_Camera.transform.position, hit.point, Color.red);\n            Debug.DrawRay(hit.point, hit.normal, Color.green);\n\n\n            //Ray\u306e\u4f4d\u7f6e\u30fb\u52d5\u4f5c\u3092\u6c7a\u3081\u308b\u90e8\u5206\n            reticle.transform.rotation = Quaternion.LookRotation(hit.normal);\n            reticle.transform.position = hit.point + (hit.normal * hitRayPosition); //hitRayPosition \u306f\u753b\u50cf\u304c\u5f53\u305f\u3063\u305f\u5bfe\u8c61\u306b\u3081\u308a\u8fbc\u307e\u306a\u3044\u7a0b\u5ea6\u306b\u8a2d\u5b9a\u3059\u308b\n\n            //\u7565\n        }\n        //\u30c7\u30d5\u30a9\u30eb\u30c8\u306eRay\u306e\u4f4d\u7f6e\n        else {\n            reticle.transform.localPosition = new Vector3(0, 0, defaultPos.z);\n            reticle.transform.localRotation = defaultRotation;\n        }\n    }\n}\n\n\n\n\u3000\u30bf\u30a4\u30c8\u30eb\u56de\u53ce\u306b\u91cd\u8981\u306a\u306e\u306freticle.transform.rotation\u306e\u90e8\u5206\u3067\u3059\u3002\u2193\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u3067\u3001\u753b\u50cf\u306e\u8868\u308c\u65b9\u306b\u5473\u3092\u52a0\u3048\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\nreticle.transform.rotation = Quaternion.Slerp(reticle.transform.rotation, Quaternion.LookRotation(hit.normal), Time.deltaTime * 10.0f); \n\n\u3000\u2193\u306e\u3088\u3046\u306a\u52d5\u4f5c\u306b\u306a\u308a\u307e\u3059\u3002\n\u3000\n\u3000Ray\u306e\u5f53\u305f\u3063\u305f\u4f4d\u7f6e\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u5834\u5408\u306a\u3069\u306b\u3082\u4f7f\u7528\u3067\u304d\u308b\u306e\u3067\u3001\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u53c2\u8003\n(http://answers.unity3d.com/questions/16952/instantiate-based-on-raycasthitnormal.html)\n(https://docs.unity3d.com/ja/current/ScriptReference/RaycastHit-normal.html)\n(https://docs.unity3d.com/ja/current/ScriptReference/Quaternion.LookRotation.html)\n\u3000\u3000\u3053\u306e\u8a18\u4e8b\u306e\u5185\u5bb9\u306f\u3001Unity 5.4.1\u4ee5\u964d\u3067\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\n\n##\u5185\u5bb9\n\u3000VR\u30a2\u30d7\u30ea\u3067\u591a\u7528\u3059\u308bRay\u3092\u898b\u3084\u3059\u304f\u3059\u308b\u65b9\u6cd5\u306e\u4e00\u3064\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n```C#:Raymanager.cs\npublic class RayManager : MonoBehaviour {\n\n    //Ray\u306e\u57fa\u672c\u8a2d\u5b9a\u7528\n    public GameObject dive_Camera; //(VR\u7528\u30ab\u30e1\u30e9\u3068\u3057\u3066\u4f7f\u7528\u3055\u305b\u3066\u3082\u3089\u3063\u3066\u3044\u307e\u3059)\n    public GameObject reticle; //\u8868\u793a\u3057\u305f\u3044\u753b\u50cf\u3092\u30a2\u30bf\u30c3\u30c1\n    Vector3 defaultPos;\n    Quaternion defaultRotation;\n    public float rayDistance;\n\n    void Start () {\n        //Ray\u306e\u521d\u671f\u5316\u8a2d\u5b9a\n        defaultPos      = reticle.transform.localPosition;\n        defaultRotation = reticle.transform.localRotation;\n    }\n\n    void Update () {\n        //Ray\u306e\u5c04\u51fa(VR\u7528\u306bdive_Camera\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u304cRay\u3092\u751f\u6210\u3059\u308c\u3070\u4f55\u3067\u3082\u3088\u3044)\n        Ray ray = new Ray(dive_Camera.transform.position, dive_Camera.transform.rotation * Vector3.forward);\n        RaycastHit hit;\n\n        //Ray\u304c\u5f53\u305f\u3063\u3066\u3044\u308b\u3068\u304d\u306e\u51e6\u7406\n        if (Physics.Raycast(ray, out hit, rayDistance)) {\n            //Ray\u306e\u53ef\u8996\u5316\uff08\u30c7\u30d0\u30c3\u30b0\u7528\uff09\n            Debug.DrawLine(dive_Camera.transform.position, hit.point, Color.red);\n            Debug.DrawRay(hit.point, hit.normal, Color.green);\n\n\n            //Ray\u306e\u4f4d\u7f6e\u30fb\u52d5\u4f5c\u3092\u6c7a\u3081\u308b\u90e8\u5206\n            reticle.transform.rotation = Quaternion.LookRotation(hit.normal);\n            reticle.transform.position = hit.point + (hit.normal * hitRayPosition); //hitRayPosition \u306f\u753b\u50cf\u304c\u5f53\u305f\u3063\u305f\u5bfe\u8c61\u306b\u3081\u308a\u8fbc\u307e\u306a\u3044\u7a0b\u5ea6\u306b\u8a2d\u5b9a\u3059\u308b\n\n            //\u7565\n        }\n        //\u30c7\u30d5\u30a9\u30eb\u30c8\u306eRay\u306e\u4f4d\u7f6e\n        else {\n            reticle.transform.localPosition = new Vector3(0, 0, defaultPos.z);\n            reticle.transform.localRotation = defaultRotation;\n        }\n    }\n}\n\n```\n\n\u3000\u30bf\u30a4\u30c8\u30eb\u56de\u53ce\u306b\u91cd\u8981\u306a\u306e\u306f`reticle.transform.rotation`\u306e\u90e8\u5206\u3067\u3059\u3002\u2193\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u3067\u3001\u753b\u50cf\u306e\u8868\u308c\u65b9\u306b\u5473\u3092\u52a0\u3048\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n```\nreticle.transform.rotation = Quaternion.Slerp(reticle.transform.rotation, Quaternion.LookRotation(hit.normal), Time.deltaTime * 10.0f); \n```\n\n\u3000\u2193\u306e\u3088\u3046\u306a\u52d5\u4f5c\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3000![\u8cbc\u308a\u3064\u304fRay.gif](https://qiita-image-store.s3.amazonaws.com/0/134754/0911f5c5-150c-3bfc-248e-a85dd4205811.gif)\n\n\u3000Ray\u306e\u5f53\u305f\u3063\u305f\u4f4d\u7f6e\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u5834\u5408\u306a\u3069\u306b\u3082\u4f7f\u7528\u3067\u304d\u308b\u306e\u3067\u3001\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n##\u53c2\u8003\n(http://answers.unity3d.com/questions/16952/instantiate-based-on-raycasthitnormal.html)\n(https://docs.unity3d.com/ja/current/ScriptReference/RaycastHit-normal.html)\n(https://docs.unity3d.com/ja/current/ScriptReference/Quaternion.LookRotation.html)\n"}