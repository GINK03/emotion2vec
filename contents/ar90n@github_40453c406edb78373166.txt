{"context": " More than 1 year has passed since last update.\n\nAndroid\u306b\u304a\u3051\u308b\u30ab\u30e1\u30e9\u306e\u53d6\u308a\u6271\u3044\nAndroid\u306b\u304a\u3051\u308b\u30ab\u30e1\u30e9\u306e\u53d6\u6271\u3044\u306f\uff0c\u3061\u3087\u3063\u3068\u53e4\u3044\u3051\u3069\u3053\u306e\u8cc7\u6599\u304c\u5206\u304b\u308a\u3084\u3059\u3044\uff0e\n\u57fa\u672c\u7684\u306b,libcamera.so\u304c\u30ab\u30fc\u30cd\u30eb\u3055\u3093\u306b\u304a\u4f3a\u3044\u3092\u7acb\u3066\u305f\u308a\u3057\u3066\u753b\u50cf\u3092\u53d6\u5f97\uff0c\u305d\u308c\u3092CameraHardwareInterface\u7d4c\u7531\u3067libcameraservice.so\u306b\u6e21\u3059\u3063\u3066\u611f\u3058\uff0e\n\u4f55\u3089\u304b\u306e\u753b\u50cf\u51e6\u7406\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7d44\u307f\u8fbc\u3080\u5834\u5408\uff0clibcamera.so\u306b\u7d44\u307f\u8fbc\u3080\u306e\u304c\u30d9\u30b9\u30c8\u3067\u306f\u3042\u308b\u304c\uff0c\u3053\u306e\u90e8\u5206\u306f\u57fa\u672c\u7684\u306b\u30d7\u30ed\u30d7\u30e9\u30a4\u30a8\u30bf\u30ea\u306a\u306e\u3067SOC\u5c4b\u3055\u3093\u3068\u5951\u7d04\u304c\u5fc5\u8981.\n\u306a\u306e\u3067\uff0c\u4eca\u56de\u306f\u82e5\u5e72\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306f\u751f\u3058\u308b\u3051\u3069Camera\u30af\u30e9\u30b9\u306b\u30e9\u30c3\u30d1\u7d4c\u7531\u3067\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u3067\u753b\u50cf\u3092\u53d6\u5f97\u3059\u308b\uff0e\u3053\u308c\u306a\u3089APK\u3067\u914d\u5e03\u3082\u3067\u304d\u308b\u3057\u306d\uff01\uff01\n\n\u4f5c\u6210\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\n\u57fa\u672c\u7684\u306b\u306fNDK\u306e\u30b5\u30f3\u30d7\u30eb\u306b\u3042\u308bnative-activity\u306bOpenCV\u306e\u30d7\u30ec\u30d3\u30e5\u30fc\u8868\u793a\u3092\u7d44\u307f\u8fbc\u3080\u611f\u3058\u3067\u5b9f\u88c5\u3057\u305f\uff0e\nAndroid\u306eOpenCV\u306b\u3064\u3044\u3066\u306f\uff0c\u3053\u306e\u30da\u30fc\u30b8\u3068\u304b\u3092\u53c2\u8003\u306b\u3059\u308b\u3068\u826f\u3044\u3068\u601d\u3046\uff0e\n\u3068\u3042\u3048\u305a\uff0c\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u306e\u611f\u3058\uff0e\n\ncamera_test.cpp\n/*\n * Copyright (C) 2010 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n#include <android_native_app_glue.h>\n\n#include <errno.h>\n#include <jni.h>\n#include <sys/time.h>\n#include <time.h>\n#include <android/log.h>\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\n#include \"opencv2/highgui/highgui.hpp\"\n\n#define  LOG_TAG    \"native_camera_demo\"\n#define  LOGI(...)  __android_log_print(ANDROID_LOG_INFO,LOG_TAG,__VA_ARGS__)\n#define  LOGW(...)  __android_log_print(ANDROID_LOG_WARN,LOG_TAG,__VA_ARGS__)\n#define  LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG,__VA_ARGS__)\n\nstatic uint16_t  make565(int red, int green, int blue)\n{\n    return (uint16_t)( ((red   << 8) & 0xf800) |\n                       ((green << 2) & 0x03e0) |\n                       ((blue  >> 3) & 0x001f) );\n}\n\n// ----------------------------------------------------------------------\n\nstruct engine {\n    struct android_app* app;\n\n    int animating;\n    cv::Mat* frame;\n    cv::VideoCapture* capture;\n};\n\nstatic void engine_draw_frame(struct engine* engine) {\n    if (engine->app->window == NULL) {\n        // No window.\n        return;\n    }\n\n    ANativeWindow_Buffer buffer;\n    if (ANativeWindow_lock(engine->app->window, &buffer, NULL) < 0) {\n        LOGW(\"Unable to lock window buffer\");\n        return;\n    }\n\n    {\n        uint16_t* pixels = (uint16_t*)buffer.bits;\n\n        for( int y = 0; y < engine->frame->size().height; y ++ )\n        {\n            for( int x = 0; x < engine->frame->size().width; x ++ )\n            {\n                cv::Vec3b bgr = engine->frame->at< cv::Vec3b >( y, x );\n                pixels[x] = make565( bgr[2], bgr[1], bgr[0] );\n            }\n            pixels = (uint16_t*)pixels + buffer.stride;\n        }\n    }\n\n    ANativeWindow_unlockAndPost(engine->app->window);\n}\n\nstatic int engine_term_display(struct engine* engine) {\n    engine->animating = 0;\n}\n\nstatic int32_t engine_handle_input(struct android_app* app, AInputEvent* event) {\n    struct engine* engine = (struct engine*)app->userData;\n/*\n    if (AInputEvent_getType(event) == AINPUT_EVENT_TYPE_MOTION) {\n        return 1;\n    } else if (AInputEvent_getType(event) == AINPUT_EVENT_TYPE_KEY) {\n        LOGI(\"Key event: action=%d keyCode=%d metaState=0x%x\",\n                AKeyEvent_getAction(event),\n                AKeyEvent_getKeyCode(event),\n                AKeyEvent_getMetaState(event));\n    }\n*/\n    return 0;\n}\n\nstatic void engine_handle_cmd(struct android_app* app, int32_t cmd) {\n    struct engine* engine = (struct engine*)app->userData;\n    switch (cmd) {\n        case APP_CMD_INIT_WINDOW:\n            if (engine->app->window != NULL) {\n                engine_draw_frame(engine);\n                engine->animating = 1;\n            }\n\n            engine->capture->open( CV_CAP_ANDROID + 0 );\n\n            break;\n        case APP_CMD_TERM_WINDOW:\n            engine_term_display(engine);\n            engine->capture->release();\n\n            break;\n        case APP_CMD_LOST_FOCUS:\n            engine->animating = 0;\n            engine_draw_frame(engine);\n            break;\n    }\n}\n\nvoid android_main(struct android_app* state) {\n    struct engine engine;\n\n    // Make sure glue isn't stripped.\n    app_dummy();\n\n    memset(&engine, 0, sizeof(engine));\n    state->userData = &engine;\n    state->onAppCmd = engine_handle_cmd;\n    state->onInputEvent = engine_handle_input;\n    engine.app = state;\n\n    engine.frame = new cv::Mat();\n    engine.capture = new cv::VideoCapture( );\n\n    // loop waiting for stuff to do.\n\n    while (1) {\n        // Read all pending events.\n        int ident;\n        int events;\n        struct android_poll_source* source;\n\n        // If not animating, we will block forever waiting for events.\n        // If animating, we loop until all events are read, then continue\n        // to draw the next frame of animation.\n        while ((ident=ALooper_pollAll( 0, NULL, &events, (void**)&source)) >= 0) {\n\n            // Process this event.\n            if (source != NULL) {\n                source->process(state, source);\n            }\n\n            // Check if we are exiting.\n            if (state->destroyRequested != 0) {\n                LOGI(\"Engine thread destroy requested!\");\n                engine_term_display(&engine);\n                return;\n            }\n        }\n\n        if (engine.animating) {\n            if( engine.capture->isOpened() )\n            {\n                *(engine.capture) >> *(engine.frame);\n            }\n            engine_draw_frame(&engine);\n        }\n    }\n\n    delete engine.capture;\n    delete engine.frame;\n}\n\n\n\u57fa\u672c\u7684\u306a\u51e6\u7406\u306e\u6d41\u308c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\uff0e\n\nMat\u30af\u30e9\u30b9\uff0cVideoCapture\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\n\u30a2\u30d7\u30ea\u7d42\u4e86\u6642\u306bonAppCmd\u306b\u8a2d\u5b9a\u3057\u305f\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\uff08\u3053\u3053\u3067\u306fengine_handle_cmd\uff09\u306eAPP_CMD_INIT_WINDOW\u3067\u30ab\u30e1\u30e9\u3092\u30aa\u30fc\u30d7\u30f3\n\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u4e2d\u3067\u30d7\u30ec\u30d3\u30e5\u30fc\u753b\u50cf\u3092\u53d6\u5f97(168\u884c\u76ee)\n\u53d6\u5f97\u3057\u305f\u30d7\u30ec\u30d3\u30e5\u30fc\u753b\u50cf\u3092\u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u306b\u63cf\u753b\n\u30a2\u30d7\u30ea\u7d42\u4e86\u6642\u306bonAppCmd\u306b\u8a2d\u5b9a\u3057\u305f\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306eAPP_CMD_TERM_WINDOW\u3067\u53d6\u5f97\u3057\u305f\u30ab\u30e1\u30e9\u3092\u30ea\u30ea\u30fc\u30b9\n\u5358\u7d14\u306b\u30d7\u30ec\u30d3\u30e5\u30fc\u3092\u63cf\u753b\u3057\u305f\u304b\u3063\u305f\u3060\u3051\u306a\u306e\u3067\u30a2\u30af\u30c6\u30a3\u30d3\u30c6\u30a3\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u3068\u304b\u5168\u7136\u8003\u3048\u3066\u307e\u305b\u3093\uff0e\n\u306a\u306e\u3067\uff0c\u6642\u3005\u30b7\u30b9\u30c6\u30e0\u3092\u5dfb\u304d\u8fbc\u3093\u3067\u56fa\u307e\u308a\u307e\u3059\uff57\uff57\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u4e00\u5f0f\u3092\u898b\u305f\u3044\u4eba\u306f\u3053\u3061\u3089\u304b\u3089\u3069\u3046\u305e\uff0e\n\n\u5b9f\u884c\u7d50\u679c\n\n\u5168\u4f53\u7684\u306b\u8d64\u307f\u304c\u304b\u3063\u3066\u308b\u306e\u306f\u306a\u3093\u3067\u3060\u308d\u3046\uff1f\uff1f\u30db\u30ef\u30a4\u30c8\u30d0\u30e9\u30f3\u30b9\u306e\u8a2d\u5b9a\u304c\u5931\u6557\u3057\u3066\u308b\u306e\u304b\u306a\uff0e\n##Android\u306b\u304a\u3051\u308b\u30ab\u30e1\u30e9\u306e\u53d6\u308a\u6271\u3044\nAndroid\u306b\u304a\u3051\u308b\u30ab\u30e1\u30e9\u306e\u53d6\u6271\u3044\u306f\uff0c\u3061\u3087\u3063\u3068\u53e4\u3044\u3051\u3069[\u3053\u306e\u8cc7\u6599](http://kaku26.blogspot.jp/2011/03/camera-framework.html)\u304c\u5206\u304b\u308a\u3084\u3059\u3044\uff0e\n\u57fa\u672c\u7684\u306b,libcamera.so\u304c\u30ab\u30fc\u30cd\u30eb\u3055\u3093\u306b\u304a\u4f3a\u3044\u3092\u7acb\u3066\u305f\u308a\u3057\u3066\u753b\u50cf\u3092\u53d6\u5f97\uff0c\u305d\u308c\u3092CameraHardwareInterface\u7d4c\u7531\u3067libcameraservice.so\u306b\u6e21\u3059\u3063\u3066\u611f\u3058\uff0e\n\n\u4f55\u3089\u304b\u306e\u753b\u50cf\u51e6\u7406\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7d44\u307f\u8fbc\u3080\u5834\u5408\uff0clibcamera.so\u306b\u7d44\u307f\u8fbc\u3080\u306e\u304c\u30d9\u30b9\u30c8\u3067\u306f\u3042\u308b\u304c\uff0c\u3053\u306e\u90e8\u5206\u306f\u57fa\u672c\u7684\u306b\u30d7\u30ed\u30d7\u30e9\u30a4\u30a8\u30bf\u30ea\u306a\u306e\u3067SOC\u5c4b\u3055\u3093\u3068\u5951\u7d04\u304c\u5fc5\u8981.\n\n\u306a\u306e\u3067\uff0c\u4eca\u56de\u306f\u82e5\u5e72\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306f\u751f\u3058\u308b\u3051\u3069Camera\u30af\u30e9\u30b9\u306b\u30e9\u30c3\u30d1\u7d4c\u7531\u3067\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u3067\u753b\u50cf\u3092\u53d6\u5f97\u3059\u308b\uff0e\u3053\u308c\u306a\u3089APK\u3067\u914d\u5e03\u3082\u3067\u304d\u308b\u3057\u306d\uff01\uff01\n\n##\u4f5c\u6210\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\n\u57fa\u672c\u7684\u306b\u306fNDK\u306e\u30b5\u30f3\u30d7\u30eb\u306b\u3042\u308bnative-activity\u306bOpenCV\u306e\u30d7\u30ec\u30d3\u30e5\u30fc\u8868\u793a\u3092\u7d44\u307f\u8fbc\u3080\u611f\u3058\u3067\u5b9f\u88c5\u3057\u305f\uff0e\nAndroid\u306eOpenCV\u306b\u3064\u3044\u3066\u306f\uff0c\u3053\u306e\u30da\u30fc\u30b8\u3068\u304b\u3092\u53c2\u8003\u306b\u3059\u308b\u3068\u826f\u3044\u3068\u601d\u3046\uff0e\n\u3068\u3042\u3048\u305a\uff0c\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u306e\u611f\u3058\uff0e\n\n```c++:camera_test.cpp\n/*\n * Copyright (C) 2010 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n#include <android_native_app_glue.h>\n\n#include <errno.h>\n#include <jni.h>\n#include <sys/time.h>\n#include <time.h>\n#include <android/log.h>\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\n#include \"opencv2/highgui/highgui.hpp\"\n\n#define  LOG_TAG    \"native_camera_demo\"\n#define  LOGI(...)  __android_log_print(ANDROID_LOG_INFO,LOG_TAG,__VA_ARGS__)\n#define  LOGW(...)  __android_log_print(ANDROID_LOG_WARN,LOG_TAG,__VA_ARGS__)\n#define  LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG,__VA_ARGS__)\n\nstatic uint16_t  make565(int red, int green, int blue)\n{\n    return (uint16_t)( ((red   << 8) & 0xf800) |\n                       ((green << 2) & 0x03e0) |\n                       ((blue  >> 3) & 0x001f) );\n}\n\n// ----------------------------------------------------------------------\n\nstruct engine {\n    struct android_app* app;\n\n    int animating;\n    cv::Mat* frame;\n    cv::VideoCapture* capture;\n};\n\nstatic void engine_draw_frame(struct engine* engine) {\n    if (engine->app->window == NULL) {\n        // No window.\n        return;\n    }\n\n    ANativeWindow_Buffer buffer;\n    if (ANativeWindow_lock(engine->app->window, &buffer, NULL) < 0) {\n        LOGW(\"Unable to lock window buffer\");\n        return;\n    }\n\n    {\n        uint16_t* pixels = (uint16_t*)buffer.bits;\n\n        for( int y = 0; y < engine->frame->size().height; y ++ )\n        {\n            for( int x = 0; x < engine->frame->size().width; x ++ )\n            {\n                cv::Vec3b bgr = engine->frame->at< cv::Vec3b >( y, x );\n                pixels[x] = make565( bgr[2], bgr[1], bgr[0] );\n            }\n            pixels = (uint16_t*)pixels + buffer.stride;\n        }\n    }\n\n    ANativeWindow_unlockAndPost(engine->app->window);\n}\n\nstatic int engine_term_display(struct engine* engine) {\n    engine->animating = 0;\n}\n\nstatic int32_t engine_handle_input(struct android_app* app, AInputEvent* event) {\n    struct engine* engine = (struct engine*)app->userData;\n/*\n    if (AInputEvent_getType(event) == AINPUT_EVENT_TYPE_MOTION) {\n        return 1;\n    } else if (AInputEvent_getType(event) == AINPUT_EVENT_TYPE_KEY) {\n        LOGI(\"Key event: action=%d keyCode=%d metaState=0x%x\",\n                AKeyEvent_getAction(event),\n                AKeyEvent_getKeyCode(event),\n                AKeyEvent_getMetaState(event));\n    }\n*/\n    return 0;\n}\n\nstatic void engine_handle_cmd(struct android_app* app, int32_t cmd) {\n    struct engine* engine = (struct engine*)app->userData;\n    switch (cmd) {\n        case APP_CMD_INIT_WINDOW:\n            if (engine->app->window != NULL) {\n                engine_draw_frame(engine);\n                engine->animating = 1;\n            }\n\n            engine->capture->open( CV_CAP_ANDROID + 0 );\n\n            break;\n        case APP_CMD_TERM_WINDOW:\n            engine_term_display(engine);\n            engine->capture->release();\n\n            break;\n        case APP_CMD_LOST_FOCUS:\n            engine->animating = 0;\n            engine_draw_frame(engine);\n            break;\n    }\n}\n\nvoid android_main(struct android_app* state) {\n    struct engine engine;\n\n    // Make sure glue isn't stripped.\n    app_dummy();\n\n    memset(&engine, 0, sizeof(engine));\n    state->userData = &engine;\n    state->onAppCmd = engine_handle_cmd;\n    state->onInputEvent = engine_handle_input;\n    engine.app = state;\n\n    engine.frame = new cv::Mat();\n    engine.capture = new cv::VideoCapture( );\n\n    // loop waiting for stuff to do.\n\n    while (1) {\n        // Read all pending events.\n        int ident;\n        int events;\n        struct android_poll_source* source;\n\n        // If not animating, we will block forever waiting for events.\n        // If animating, we loop until all events are read, then continue\n        // to draw the next frame of animation.\n        while ((ident=ALooper_pollAll( 0, NULL, &events, (void**)&source)) >= 0) {\n\n            // Process this event.\n            if (source != NULL) {\n                source->process(state, source);\n            }\n\n            // Check if we are exiting.\n            if (state->destroyRequested != 0) {\n                LOGI(\"Engine thread destroy requested!\");\n                engine_term_display(&engine);\n                return;\n            }\n        }\n\n        if (engine.animating) {\n            if( engine.capture->isOpened() )\n            {\n                *(engine.capture) >> *(engine.frame);\n            }\n            engine_draw_frame(&engine);\n        }\n    }\n\n    delete engine.capture;\n    delete engine.frame;\n}\n```\n\u57fa\u672c\u7684\u306a\u51e6\u7406\u306e\u6d41\u308c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\uff0e\n\n1. Mat\u30af\u30e9\u30b9\uff0cVideoCapture\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\n2. \u30a2\u30d7\u30ea\u7d42\u4e86\u6642\u306bonAppCmd\u306b\u8a2d\u5b9a\u3057\u305f\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\uff08\u3053\u3053\u3067\u306fengine_handle_cmd\uff09\u306eAPP_CMD_INIT_WINDOW\u3067\u30ab\u30e1\u30e9\u3092\u30aa\u30fc\u30d7\u30f3\n3. \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u4e2d\u3067\u30d7\u30ec\u30d3\u30e5\u30fc\u753b\u50cf\u3092\u53d6\u5f97(168\u884c\u76ee)\n4. \u53d6\u5f97\u3057\u305f\u30d7\u30ec\u30d3\u30e5\u30fc\u753b\u50cf\u3092\u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u306b\u63cf\u753b\n5. \u30a2\u30d7\u30ea\u7d42\u4e86\u6642\u306bonAppCmd\u306b\u8a2d\u5b9a\u3057\u305f\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306eAPP_CMD_TERM_WINDOW\u3067\u53d6\u5f97\u3057\u305f\u30ab\u30e1\u30e9\u3092\u30ea\u30ea\u30fc\u30b9\n\u5358\u7d14\u306b\u30d7\u30ec\u30d3\u30e5\u30fc\u3092\u63cf\u753b\u3057\u305f\u304b\u3063\u305f\u3060\u3051\u306a\u306e\u3067\u30a2\u30af\u30c6\u30a3\u30d3\u30c6\u30a3\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u3068\u304b\u5168\u7136\u8003\u3048\u3066\u307e\u305b\u3093\uff0e\n\u306a\u306e\u3067\uff0c\u6642\u3005\u30b7\u30b9\u30c6\u30e0\u3092\u5dfb\u304d\u8fbc\u3093\u3067\u56fa\u307e\u308a\u307e\u3059\uff57\uff57\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u4e00\u5f0f\u3092\u898b\u305f\u3044\u4eba\u306f\u3053\u3061\u3089\u304b\u3089\u3069\u3046\u305e\uff0e\n\n\u5b9f\u884c\u7d50\u679c\n\n![camera_result.jpg](https://qiita-image-store.s3.amazonaws.com/0/16415/dd736285-3d16-b39d-7f3b-3d52b6467277.jpeg)\n\n\u5168\u4f53\u7684\u306b\u8d64\u307f\u304c\u304b\u3063\u3066\u308b\u306e\u306f\u306a\u3093\u3067\u3060\u308d\u3046\uff1f\uff1f\u30db\u30ef\u30a4\u30c8\u30d0\u30e9\u30f3\u30b9\u306e\u8a2d\u5b9a\u304c\u5931\u6557\u3057\u3066\u308b\u306e\u304b\u306a\uff0e", "tags": ["\u753b\u50cf\u51e6\u7406", "Android"]}