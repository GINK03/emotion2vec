{"context": " More than 1 year has passed since last update.\u524d\u56de boost::numeric::interval(1): C++ Boost \u533a\u9593\u6f14\u7b97\u30e9\u30a4\u30d6\u30e9\u30ea \u56db\u5247\u6f14\u7b97\u3068\u57fa\u672c\u7684\u306a\u95a2\u6570\n \u306b\u7d9a\u304d Boost \u533a\u9593\u6f14\u7b97\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u7d39\u4ecb\u3067\u3059\u3002\n\u4eca\u65e5\u306f\u3044\u304f\u3064\u304b\u306e\u533a\u9593\u7528\u306e\u6570\u5b66\u95a2\u6570\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\nmin, max, abs\n\u533a\u9593\u306e\u95a2\u6570\u306f\u57fa\u672c\u7684\u306b\u30d9\u30fc\u30b9\u306e\u578b\u306e\u95a2\u6570\u3092\u62e1\u5f35\u3057\u305f\u3082\u306e\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306f\u3001\u533a\u9593\u306e\u56db\u5247\u6f14\u7b97\u3068\u540c\u69d8\u300c\u533a\u9593\u5185\u306e\u6570\u306b\u5bfe\u3057\u3066\u95a2\u6570\u3092\u9069\u7528\u3057\u305f\u7d50\u679c\u304c \u5168\u3066 \u542b\u307e\u308c\u3066\u3044\u308b\u3088\u3046\u306a\u533a\u9593\u300d\u3092\u8a08\u7b97\u3059\u308b\u3082\u306e\u3067\u3059\u3002\n\u95a2\u6570 min \u306f 2 \u3064\u306e\u533a\u9593 [a, b], [c, d] \u3092\u5f15\u6570\u306b\u3068\u3063\u3066\u3001\u533a\u9593 [min(a, c), min(b, d)] \u3092\u8fd4\u3057\u307e\u3059\u3002max \u3082\u540c\u69d8\u3067\u3001\u3053\u3061\u3089\u306f\u533a\u9593 [max(a, c), max(b, d)] \u3092\u8fd4\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001max([1, 3], [2, 4]) \u306f [2, 4] \u306b\u306a\u308a\u307e\u3059\uff084 \u3084 [3, 4] \u3067\u306f\u306a\u3044\uff09\u3002\n\u4e00\u65b9\u3001\u95a2\u6570 abs \u304c\u8fd4\u3059\u533a\u9593\u306f abs([a, b]) = [abs(a), abs(b)] \u3067\u306f \u3042\u308a\u307e\u305b\u3093\u3002\u4f8b\u3048\u3070\u3001abs([-3, 1]) \u306f [0, 3] \u306b\u306a\u308a\u307e\u3059\u3002\u96c6\u5408\u306e\u8868\u8a18\u6cd5\u3092\u4f7f\u3048\u3070\u3001abs([a, b]) = {abs(x) | x\u2266b} \u3068\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u5177\u4f53\u7684\u306b\u66f8\u304d\u4e0b\u3059\u306b\u306f\u4e0e\u3048\u3089\u308c\u305f\u533a\u9593\u306e\u4e0b\u7aef a \u3068\u4e0a\u7aef b \u306e\u6b63\u8ca0\u3068\u7d76\u5bfe\u5024\u306e\u5927\u5c0f\u306b\u3088\u3063\u3066\u5834\u5408\u5206\u3051\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u304c\u3002\n\ntest-interval-fun-math-0.cpp\n#include <iostream>\n#include <boost/numeric/interval.hpp>\n#include <boost/numeric/interval/io.hpp>\n\nint main () {\n    typedef double R;\n    typedef boost::numeric::interval<R> IR;\n    using std::cout;\n    using std::endl;\n    const IR a(-1, 3);\n    const IR b(2, 4);\n    cout << \"a         = \" << a << endl;\n    cout << \"b         = \" << b << endl;\n    cout << \"min(a, b) = \" << min(a, b) << endl;\n    cout << \"max(a, b) = \" << max(a, b) << endl;\n    cout << \"abs(a)    = \" << abs(a) << endl;\n    return 0;\n}\n\n\n\noutput-for-test-interval-fun-math-0.txt\na         = [-1,3]\nb         = [2,4]\nmin(a, b) = [-1,3]\nmax(a, b) = [2,4]\nabs(a)    = [0,3]\n\n\n\nsquare, pow, nth_root\n\u3053\u308c\u3089\u306e\u95a2\u6570\u3082\u540c\u69d8\u3067\u3059\u304c\u3001\u3044\u304f\u3064\u304b\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u307e\u305a\u3001square \u306f\u305d\u306e\u540d\u524d\u306e\u901a\u308a\u3001\u533a\u9593\u306e\u6570\u3092\u5e73\u65b9\uff082\u4e57\uff09\u3057\u305f\u533a\u9593\u3092\u8a08\u7b97\u3057\u307e\u3059\u304c\u3001square(x) \u3068 x * x \u306f\u4e00\u822c\u306b\u306f\u7b49\u3057\u304f\u3042\u308a\u307e\u305b\u3093\u3002\u4f8b\u3048\u3070\u3001square([-3, 1]) \u306f [0, 9] \u3067\u3059\u304c\u3001[-3, 1] * [-3, 1] \u306f [-3, 9] \u3068\u306a\u308a\u8ca0\u306e\u6570\u3082\u542b\u307e\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u3053\u308c\u306f\u3001\u6307\u6570\u95a2\u6570 pow \u306b\u3064\u3044\u3066\u3082\u540c\u69d8\u3067\u3059\u3002\u4e0e\u3048\u3089\u308c\u305f\u6307\u6570 n \u304c\u5076\u6570\u306e\u5834\u5408\u306b\u306f pow(x, n) \u306f\u975e\u8ca0\u306e\u533a\u9593\u306b\u306a\u308a\u307e\u3059\u3002\u307e\u305f\u4e00\u822c\u306b\u3001\u5358\u7d14\u306b n \u56de\u4e57\u7b97\u3092\u884c\u3046\u3088\u308a\u3082 pow \u3092\u4f7f\u3063\u305f\u65b9\u304c\u4e57\u7b97\u306e\u56de\u6570\u304c\u5c11\u306a\u3044\u5206\u3001\u8aa4\u5dee\u306b\u3088\u308b\u533a\u9593\u306e\u5e83\u304c\u308a\u3092\u6291\u3048\u3089\u308c\u307e\u3059\u3002\u306a\u304a\u6307\u6570\u3092 0 \u306b\u3059\u308b\u3068\u3001\u4e00\u70b9\u533a\u9593 [1, 1] \u304c\u8fd4\u308a\u307e\u3059\uff08\u4e0e\u3048\u305f\u533a\u9593\u304c 0 \u3092\u542b\u3093\u3067\u3044\u3066\u3082\u305d\u3046\u306a\u308b\u306e\u3067\u6ce8\u610f\uff09\u3002\n\u6700\u5f8c\u306b\u3001nth_root \u306f n \u4e57\u6839\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3067\u3059\u304c\u3001\u3053\u306e\u95a2\u6570\u304c\u8a08\u7b97\u3059\u308b\u533a\u9593\u306f n \u306b\u3088\u3063\u3066\u6b21\u306e\u3088\u3046\u306b\u5834\u5408\u5206\u3051\u3067\u304d\u307e\u3059:\n\nn \u304c\u6b63\u306e\u5076\u6570\u306e\u5834\u5408: nth_root(pow(x, n), n) \u2287 abs(x) \u3092\u307f\u305f\u3059\u3088\u3046\u306a\u533a\u9593\u3092\u8fd4\u3059\u3002\nn \u304c\u6b63\u306e\u5947\u6570\u306e\u5834\u5408: nth_root(pow(x, n), n) \u2287 x \u3092\u307f\u305f\u3059\u3088\u3046\u306a\u533a\u9593\u3092\u8fd4\u3059\u3002\nn \u304c\u975e\u6b63\u6574\u6570\u306e\u5834\u5408: \u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u3002\n\n\ntest-interval-fun-math-1.cpp\n#include <iostream>\n#include <boost/numeric/interval.hpp>\n#include <boost/numeric/interval/io.hpp>\n\nint main () {\n    typedef double R;\n    typedef boost::numeric::interval<R> IR;\n    using std::cout;\n    using std::endl;\n    cout << \"--- interval power functions ---\" << endl;\n    const IR a(-1, 3);\n    cout << \"a              = \" << a << endl;\n    cout << \"square(a)      = \" << square(a) << endl;\n    cout << \"pow(a, 3)      = \" << pow(a, 3) << endl;\n    const IR b(2, 4);\n    cout << \"b              = \" << b << endl;\n    cout << \"nth_root(b, 2) = \" << nth_root(b, 2) << endl;\n    cout << \"--- checking inclusion property ---\" << endl;\n    const IR c = IR(-6, 8) / 3.0;\n    cout << \"c = \" << c << endl; \n    cout << \" k \\t d = c^k \\t e = d^(1/k) \\t inclusion\" << endl;\n    for ( int k = 1; k <= 5; k++ ) {\n        const IR d = pow(c, k);\n        const IR e = nth_root(d, k);\n        cout << k << '\\t' << d << '\\t' << e << '\\t';\n        if (k % 2 == 1 && subset(c, e)) {\n            cout << \"    c  is a subset of e.\" << endl;\n        } else if (k % 2 == 0 && subset(abs(c), e)) {\n            cout << \"abs(c) is a subset of e.\" << endl;\n        } else {\n            cout << endl;\n        }\n    }\n    return 0;\n}\n\n\n\noutput-for-test-interval-fun-math-1.txt\n--- interval power functions ---\na              = [-1,3]\nsquare(a)      = [0,9]\npow(a, 3)      = [-1,27]\nb              = [2,4]\nnth_root(b, 2) = [1.41421,2]\n--- checking inclusion property ---\nc = [-2,2.66667]\n k       d = c^k         e = d^(1/k)     inclusion\n1       [-2,2.66667]    [-2,2.66667]        c  is a subset of e.\n2       [0,7.11111]     [0,2.66667]     abs(c) is a subset of e.\n3       [-8,18.963]     [-2,2.66667]        c  is a subset of e.\n4       [0,50.5679]     [0,2.66667]     abs(c) is a subset of e.\n5       [-32,134.848]   [-2,2.66667]        c  is a subset of e.\n\n\n\nmultiplicative_inverse, division_part1, division_part2\n\u5272\u308a\u7b97\u306b\u95a2\u3057\u3066\u306f\u3001operator / \u3084 div \u4ee5\u5916\u306b\u3082\u3088\u308a\u7d30\u304b\u3044\u95a2\u6570\u304c\u3042\u308a\u307e\u3059\u3002\n\u307e\u305a\u3001multiplicative_inverse \u306f\u9006\u6570 1 / x \u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\u3067\u3059\u3002\u3053\u308c\u306b\u3064\u3044\u3066\u306f\u7279\u306b\u8aac\u660e\u3059\u308b\u3053\u3068\u3082\u306a\u3044\u3067\u3057\u3087\u3046\u3002\n\u3055\u3066\u3001\u524d\u56de\u306e\u56db\u5247\u6f14\u7b97\u306e\u8aac\u660e\u306e\u6642\u306b\u304d\u3061\u3093\u3068\u8a00\u53ca\u3057\u3066\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001Boost \u306e\u533a\u9593\u6f14\u7b97\u30e9\u30a4\u30d6\u30e9\u30ea\u3067 0 \u3092\u542b\u3080\u533a\u9593\u306b\u3088\u308b\u9664\u7b97 / \u3092\u884c\u304a\u3046\u3068\u3059\u308b\u3068\u3001\u00b1\u221e \u304c\u7d61\u3093\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001[1, 2] / [-3, 4] \u306f (-\u221e, \u221e) \u306b\u306a\u308a\u307e\u3059\u3002\nRemark. boost/numeric/interval/io.hpp \u306e\u5b9a\u7fa9\u306f\u5358\u7d14\u306a\u3082\u306e\u306a\u306e\u3067\u3001\u7121\u9650\u5927\u3092\u542b\u3080\u533a\u9593\u3082 [-inf,inf] \u3068\u540c\u3058\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u51fa\u529b\u3055\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u3057\u304b\u3057\u3001{ x / y | x\u2208[1, 2], y\u2208[-3, 4], y\u22600 } \u3092\u5305\u3080\u6700\u5c0f\u306e\u9589\u96c6\u5408\u306f\u3001\u5b9f\u969b\u306b\u306f\u5168\u533a\u9593\u3067\u306f\u306a\u304f (-\u221e, -1/3] \u222a [1/4, \u221e) \u3068\u3044\u3046 2 \u3064\u306e\u4ea4\u308f\u3089\u306a\u3044\u9589\u533a\u9593\u306e\u548c\u3067\u3059\u3002\u3053\u308c\u306f\u4e00\u3064\u306e\u533a\u9593\u3067\u306f\u8868\u305b\u306a\u3044\u305f\u3081\u3001Boost \u306e\u533a\u9593\u6f14\u7b97 / \u306f\u6700\u521d\u306e\u3088\u3046\u306b\u5168\u533a\u9593\u3092\u8fd4\u3059\u8a33\u3067\u3059\u3002\n\u305d\u3053\u3067\u3001\u3053\u306e\u3088\u3046\u306a\u5834\u5408\u306e\u305f\u3081\u306b\u3001\u9664\u7b97\u306e\u7d50\u679c\u3092\u3088\u308a\u5c0f\u3055\u3044\u533a\u9593\u3067\u5f97\u308b\u305f\u3081\u306e\u95a2\u6570\u304c division_part1 \u3068 division_part2 \u3067\u3059\u3002part1 \u3068 part2 \u306f\u305d\u308c\u305e\u308c\u3001\u9664\u7b97\u306e\u7d50\u679c\u304c\u5206\u5272\u3055\u308c\u308b\u6642\u306e\u8ca0\u306e\u5074\u306e\u533a\u9593\u3068\u6b63\u306e\u5074\u306e\u533a\u9593\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n\n\ndivision_part1(a, b, parted): a \u3092 b \u3067\u5272\u3063\u305f\u533a\u9593\u306e\u8ca0\u306e\u5074\u3092\u8fd4\u305d\u3046\u3068\u3059\u308b\u3002\n\n\n\u533a\u9593\u304c\u5206\u5272\u3055\u308c\u308b\u5834\u5408\u306f\u53c2\u7167\u5909\u6570 parted \u306b true \u304c\u30bb\u30c3\u30c8\u3055\u308c\u3001\u5206\u5272\u3055\u308c\u305f\u8ca0\u306e\u5074\u306e\u533a\u9593\u304c\u8fd4\u308b\u3002\n\u533a\u9593\u304c\u5206\u5272\u3055\u308c\u306a\u3044\u5834\u5408\u306f\u53c2\u7167\u5909\u6570 parted \u306b false \u304c\u30bb\u30c3\u30c8\u3055\u308c\u3001\u305d\u306e\u307e\u307e a / b \u3068\u540c\u3058\u7d50\u679c\u304c\u8fd4\u308b\u3002\n\n\n\ndivision_part2(a, b, parted): a \u3092 b \u3067\u5272\u3063\u305f\u533a\u9593\u306e\u6b63\u306e\u5074\u3092\u8fd4\u305d\u3046\u3068\u3059\u308b\u3002\n\n\nparted \u304c\u7701\u7565\u3055\u308c\u305f\u5834\u5408\u306f true \u3068\u307f\u306a\u3055\u308c\u308b\u3002\nparted \u304c true \u306e\u5834\u5408\u3001a \u3092 b \u3067\u5272\u3063\u305f\u6b63\u306e\u5074\u306e\u533a\u9593\u3092\u8fd4\u3059\u3002\nparted \u304c false \u306e\u5834\u5408\u3084\u3001\u533a\u9593\u304c\u5206\u5272\u3055\u308c\u306a\u3044\u5834\u5408\u3053\u306e\u95a2\u6570\u306e\u7d50\u679c\u306f undetermined \u3067\u3042\u308b\u3002(\u30a8\u30e9\u30fc\u304c\u6295\u3052\u3089\u308c\u308b\u306a\u3069)\n\n\n\n\ntest-interval-fun-math-2.cpp\n#include <iostream>\n#include <boost/numeric/interval.hpp>\n#include <boost/numeric/interval/io.hpp>\n\nint main () {\n    typedef double R;\n    typedef boost::numeric::interval<R> IR;\n    using std::cout;\n    using std::endl;\n    const IR a(1, 2);\n    const IR b(-3, 4);\n    cout << \"a     = \" << a << endl;\n    cout << \"b     = \" << b << endl;\n    cout << \"a / b = \" << a / b << endl;\n    bool parted = false;\n    const IR c = division_part1(a, b, parted);\n    const IR d = division_part2(a, b, parted);\n    if (parted) {\n        cout << \"negative part of a / b = \" << c << endl;\n        cout << \"positive part of a / b = \" << d << endl;\n    }\n    return 0;\n}\n\n\n\noutput-for-test-interval-fun-math-2.txt\na     = [1,2]\nb     = [-3,4]\na / b = [-inf,inf]\nnegative part of a / b = [-inf,-0.333333]\npositive part of a / b = [0.25,inf]\n\n\n\n\u4eca\u65e5\u3082\u3053\u306e\u8fba\u3067\u3002\u672c\u5bb6\u3088\u308a\u9577\u3044\u8aac\u660e\u66f8\u3044\u3066\u308b\u6c17\u304c\u3059\u308b\u306e\u306f\u304d\u3063\u3068\u6c17\u306e\u305b\u3044\u3067\u3059\u3002(\u81ea\u91cd\u3057\u306a\u3044\u3068)\n\u4eca\u56de\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u51fa\u529b\u4f8b: https://gist.github.com/2954837\n\u6b21: boost::numeric::interval<int>(3): C++ Boost \u533a\u9593\u6f14\u7b97\u30e9\u30a4\u30d6\u30e9\u30ea \u8d85\u8d8a\u95a2\u6570\n\u524d\u56de [boost::numeric::interval<int>(1): C++ Boost \u533a\u9593\u6f14\u7b97\u30e9\u30a4\u30d6\u30e9\u30ea \u56db\u5247\u6f14\u7b97\u3068\u57fa\u672c\u7684\u306a\u95a2\u6570](http://qiita.com/items/e4f554b8af864b638a6d)\n \u306b\u7d9a\u304d Boost \u533a\u9593\u6f14\u7b97\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u7d39\u4ecb\u3067\u3059\u3002\n\n\u4eca\u65e5\u306f\u3044\u304f\u3064\u304b\u306e\u533a\u9593\u7528\u306e\u6570\u5b66\u95a2\u6570\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\n### min, max, abs\n\n\u533a\u9593\u306e\u95a2\u6570\u306f\u57fa\u672c\u7684\u306b\u30d9\u30fc\u30b9\u306e\u578b\u306e\u95a2\u6570\u3092\u62e1\u5f35\u3057\u305f\u3082\u306e\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306f\u3001\u533a\u9593\u306e\u56db\u5247\u6f14\u7b97\u3068\u540c\u69d8\u300c\u533a\u9593\u5185\u306e\u6570\u306b\u5bfe\u3057\u3066\u95a2\u6570\u3092\u9069\u7528\u3057\u305f\u7d50\u679c\u304c **\u5168\u3066** \u542b\u307e\u308c\u3066\u3044\u308b\u3088\u3046\u306a\u533a\u9593\u300d\u3092\u8a08\u7b97\u3059\u308b\u3082\u306e\u3067\u3059\u3002\n\n\u95a2\u6570 `min` \u306f 2 \u3064\u306e\u533a\u9593 [a, b], [c, d] \u3092\u5f15\u6570\u306b\u3068\u3063\u3066\u3001\u533a\u9593 [min(a, c), min(b, d)] \u3092\u8fd4\u3057\u307e\u3059\u3002`max` \u3082\u540c\u69d8\u3067\u3001\u3053\u3061\u3089\u306f\u533a\u9593 [max(a, c), max(b, d)] \u3092\u8fd4\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001max([1, 3], [2, 4]) \u306f [2, 4] \u306b\u306a\u308a\u307e\u3059\uff084 \u3084 [3, 4] \u3067\u306f\u306a\u3044\uff09\u3002\n\n\u4e00\u65b9\u3001\u95a2\u6570 `abs` \u304c\u8fd4\u3059\u533a\u9593\u306f abs([a, b]) = [abs(a), abs(b)] \u3067\u306f **\u3042\u308a\u307e\u305b\u3093**\u3002\u4f8b\u3048\u3070\u3001abs([-3, 1]) \u306f [0, 3] \u306b\u306a\u308a\u307e\u3059\u3002\u96c6\u5408\u306e\u8868\u8a18\u6cd5\u3092\u4f7f\u3048\u3070\u3001abs([a, b]) = {abs(x) | x\u2266b} \u3068\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u5177\u4f53\u7684\u306b\u66f8\u304d\u4e0b\u3059\u306b\u306f\u4e0e\u3048\u3089\u308c\u305f\u533a\u9593\u306e\u4e0b\u7aef a \u3068\u4e0a\u7aef b \u306e\u6b63\u8ca0\u3068\u7d76\u5bfe\u5024\u306e\u5927\u5c0f\u306b\u3088\u3063\u3066\u5834\u5408\u5206\u3051\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u304c\u3002\n\n```c++:test-interval-fun-math-0.cpp\n#include <iostream>\n#include <boost/numeric/interval.hpp>\n#include <boost/numeric/interval/io.hpp>\n\nint main () {\n\ttypedef double R;\n\ttypedef boost::numeric::interval<R> IR;\n\tusing std::cout;\n\tusing std::endl;\n\tconst IR a(-1, 3);\n\tconst IR b(2, 4);\n\tcout << \"a         = \" << a << endl;\n\tcout << \"b         = \" << b << endl;\n\tcout << \"min(a, b) = \" << min(a, b) << endl;\n\tcout << \"max(a, b) = \" << max(a, b) << endl;\n\tcout << \"abs(a)    = \" << abs(a) << endl;\n\treturn 0;\n}\n```\n\n```txt:output-for-test-interval-fun-math-0.txt\na         = [-1,3]\nb         = [2,4]\nmin(a, b) = [-1,3]\nmax(a, b) = [2,4]\nabs(a)    = [0,3]\n```\n\n### square, pow, nth_root\n\n\u3053\u308c\u3089\u306e\u95a2\u6570\u3082\u540c\u69d8\u3067\u3059\u304c\u3001\u3044\u304f\u3064\u304b\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n\u307e\u305a\u3001`square` \u306f\u305d\u306e\u540d\u524d\u306e\u901a\u308a\u3001\u533a\u9593\u306e\u6570\u3092\u5e73\u65b9\uff082\u4e57\uff09\u3057\u305f\u533a\u9593\u3092\u8a08\u7b97\u3057\u307e\u3059\u304c\u3001`square(x)` \u3068 `x * x` \u306f\u4e00\u822c\u306b\u306f\u7b49\u3057\u304f\u3042\u308a\u307e\u305b\u3093\u3002\u4f8b\u3048\u3070\u3001square([-3, 1]) \u306f [0, 9] \u3067\u3059\u304c\u3001[-3, 1] * [-3, 1] \u306f [-3, 9] \u3068\u306a\u308a\u8ca0\u306e\u6570\u3082\u542b\u307e\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\u3053\u308c\u306f\u3001\u6307\u6570\u95a2\u6570 `pow` \u306b\u3064\u3044\u3066\u3082\u540c\u69d8\u3067\u3059\u3002\u4e0e\u3048\u3089\u308c\u305f\u6307\u6570 n \u304c\u5076\u6570\u306e\u5834\u5408\u306b\u306f `pow(x, n)` \u306f\u975e\u8ca0\u306e\u533a\u9593\u306b\u306a\u308a\u307e\u3059\u3002\u307e\u305f\u4e00\u822c\u306b\u3001\u5358\u7d14\u306b n \u56de\u4e57\u7b97\u3092\u884c\u3046\u3088\u308a\u3082 `pow` \u3092\u4f7f\u3063\u305f\u65b9\u304c\u4e57\u7b97\u306e\u56de\u6570\u304c\u5c11\u306a\u3044\u5206\u3001\u8aa4\u5dee\u306b\u3088\u308b\u533a\u9593\u306e\u5e83\u304c\u308a\u3092\u6291\u3048\u3089\u308c\u307e\u3059\u3002\u306a\u304a\u6307\u6570\u3092 0 \u306b\u3059\u308b\u3068\u3001\u4e00\u70b9\u533a\u9593 [1, 1] \u304c\u8fd4\u308a\u307e\u3059\uff08\u4e0e\u3048\u305f\u533a\u9593\u304c 0 \u3092\u542b\u3093\u3067\u3044\u3066\u3082\u305d\u3046\u306a\u308b\u306e\u3067\u6ce8\u610f\uff09\u3002\n\n\u6700\u5f8c\u306b\u3001`nth_root` \u306f n \u4e57\u6839\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3067\u3059\u304c\u3001\u3053\u306e\u95a2\u6570\u304c\u8a08\u7b97\u3059\u308b\u533a\u9593\u306f n \u306b\u3088\u3063\u3066\u6b21\u306e\u3088\u3046\u306b\u5834\u5408\u5206\u3051\u3067\u304d\u307e\u3059:\n\n- n \u304c\u6b63\u306e\u5076\u6570\u306e\u5834\u5408: `nth_root(pow(x, n), n)` \u2287 `abs(x)` \u3092\u307f\u305f\u3059\u3088\u3046\u306a\u533a\u9593\u3092\u8fd4\u3059\u3002\n- n \u304c\u6b63\u306e\u5947\u6570\u306e\u5834\u5408: `nth_root(pow(x, n), n)` \u2287 `x` \u3092\u307f\u305f\u3059\u3088\u3046\u306a\u533a\u9593\u3092\u8fd4\u3059\u3002\n- n \u304c\u975e\u6b63\u6574\u6570\u306e\u5834\u5408: \u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u3002\n\n```c++:test-interval-fun-math-1.cpp\n#include <iostream>\n#include <boost/numeric/interval.hpp>\n#include <boost/numeric/interval/io.hpp>\n\nint main () {\n\ttypedef double R;\n\ttypedef boost::numeric::interval<R> IR;\n\tusing std::cout;\n\tusing std::endl;\n\tcout << \"--- interval power functions ---\" << endl;\n\tconst IR a(-1, 3);\n\tcout << \"a              = \" << a << endl;\n\tcout << \"square(a)      = \" << square(a) << endl;\n\tcout << \"pow(a, 3)      = \" << pow(a, 3) << endl;\n\tconst IR b(2, 4);\n\tcout << \"b              = \" << b << endl;\n\tcout << \"nth_root(b, 2) = \" << nth_root(b, 2) << endl;\n\tcout << \"--- checking inclusion property ---\" << endl;\n\tconst IR c = IR(-6, 8) / 3.0;\n\tcout << \"c = \" << c << endl; \n\tcout << \" k \\t d = c^k \\t e = d^(1/k) \\t inclusion\" << endl;\n\tfor ( int k = 1; k <= 5; k++ ) {\n\t\tconst IR d = pow(c, k);\n\t\tconst IR e = nth_root(d, k);\n\t\tcout << k << '\\t' << d << '\\t' << e << '\\t';\n\t\tif (k % 2 == 1 && subset(c, e)) {\n\t\t\tcout << \"    c  is a subset of e.\" << endl;\n\t\t} else if (k % 2 == 0 && subset(abs(c), e)) {\n\t\t\tcout << \"abs(c) is a subset of e.\" << endl;\n\t\t} else {\n\t\t\tcout << endl;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n```txt:output-for-test-interval-fun-math-1.txt\n--- interval power functions ---\na              = [-1,3]\nsquare(a)      = [0,9]\npow(a, 3)      = [-1,27]\nb              = [2,4]\nnth_root(b, 2) = [1.41421,2]\n--- checking inclusion property ---\nc = [-2,2.66667]\n k       d = c^k         e = d^(1/k)     inclusion\n1       [-2,2.66667]    [-2,2.66667]        c  is a subset of e.\n2       [0,7.11111]     [0,2.66667]     abs(c) is a subset of e.\n3       [-8,18.963]     [-2,2.66667]        c  is a subset of e.\n4       [0,50.5679]     [0,2.66667]     abs(c) is a subset of e.\n5       [-32,134.848]   [-2,2.66667]        c  is a subset of e.\n```\n\n### multiplicative_inverse, division_part1, division_part2\n\n\u5272\u308a\u7b97\u306b\u95a2\u3057\u3066\u306f\u3001`operator /` \u3084 `div` \u4ee5\u5916\u306b\u3082\u3088\u308a\u7d30\u304b\u3044\u95a2\u6570\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u307e\u305a\u3001`multiplicative_inverse` \u306f\u9006\u6570 `1 / x` \u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\u3067\u3059\u3002\u3053\u308c\u306b\u3064\u3044\u3066\u306f\u7279\u306b\u8aac\u660e\u3059\u308b\u3053\u3068\u3082\u306a\u3044\u3067\u3057\u3087\u3046\u3002\n\n\u3055\u3066\u3001\u524d\u56de\u306e\u56db\u5247\u6f14\u7b97\u306e\u8aac\u660e\u306e\u6642\u306b\u304d\u3061\u3093\u3068\u8a00\u53ca\u3057\u3066\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001Boost \u306e\u533a\u9593\u6f14\u7b97\u30e9\u30a4\u30d6\u30e9\u30ea\u3067 0 \u3092\u542b\u3080\u533a\u9593\u306b\u3088\u308b\u9664\u7b97 `/` \u3092\u884c\u304a\u3046\u3068\u3059\u308b\u3068\u3001\u00b1\u221e \u304c\u7d61\u3093\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001[1, 2] / [-3, 4] \u306f (-\u221e, \u221e) \u306b\u306a\u308a\u307e\u3059\u3002\n\n__Remark__. boost/numeric/interval/io.hpp \u306e\u5b9a\u7fa9\u306f\u5358\u7d14\u306a\u3082\u306e\u306a\u306e\u3067\u3001\u7121\u9650\u5927\u3092\u542b\u3080\u533a\u9593\u3082 [-inf,inf] \u3068\u540c\u3058\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u51fa\u529b\u3055\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u3057\u304b\u3057\u3001{ x / y | x\u2208[1, 2], y\u2208[-3, 4], y\u22600 } \u3092\u5305\u3080\u6700\u5c0f\u306e\u9589\u96c6\u5408\u306f\u3001\u5b9f\u969b\u306b\u306f\u5168\u533a\u9593\u3067\u306f\u306a\u304f (-\u221e, -1/3] \u222a [1/4, \u221e) \u3068\u3044\u3046 2 \u3064\u306e\u4ea4\u308f\u3089\u306a\u3044\u9589\u533a\u9593\u306e\u548c\u3067\u3059\u3002\u3053\u308c\u306f\u4e00\u3064\u306e\u533a\u9593\u3067\u306f\u8868\u305b\u306a\u3044\u305f\u3081\u3001Boost \u306e\u533a\u9593\u6f14\u7b97 `/` \u306f\u6700\u521d\u306e\u3088\u3046\u306b\u5168\u533a\u9593\u3092\u8fd4\u3059\u8a33\u3067\u3059\u3002\n\n\u305d\u3053\u3067\u3001\u3053\u306e\u3088\u3046\u306a\u5834\u5408\u306e\u305f\u3081\u306b\u3001\u9664\u7b97\u306e\u7d50\u679c\u3092\u3088\u308a\u5c0f\u3055\u3044\u533a\u9593\u3067\u5f97\u308b\u305f\u3081\u306e\u95a2\u6570\u304c `division_part1` \u3068 `division_part2` \u3067\u3059\u3002part1 \u3068 part2 \u306f\u305d\u308c\u305e\u308c\u3001\u9664\u7b97\u306e\u7d50\u679c\u304c\u5206\u5272\u3055\u308c\u308b\u6642\u306e\u8ca0\u306e\u5074\u306e\u533a\u9593\u3068\u6b63\u306e\u5074\u306e\u533a\u9593\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n\n- `division_part1(a, b, parted)`: a \u3092 b \u3067\u5272\u3063\u305f\u533a\u9593\u306e\u8ca0\u306e\u5074\u3092\u8fd4\u305d\u3046\u3068\u3059\u308b\u3002\n   - \u533a\u9593\u304c\u5206\u5272\u3055\u308c\u308b\u5834\u5408\u306f\u53c2\u7167\u5909\u6570 parted \u306b true \u304c\u30bb\u30c3\u30c8\u3055\u308c\u3001\u5206\u5272\u3055\u308c\u305f\u8ca0\u306e\u5074\u306e\u533a\u9593\u304c\u8fd4\u308b\u3002\n   - \u533a\u9593\u304c\u5206\u5272\u3055\u308c\u306a\u3044\u5834\u5408\u306f\u53c2\u7167\u5909\u6570 parted \u306b false \u304c\u30bb\u30c3\u30c8\u3055\u308c\u3001\u305d\u306e\u307e\u307e a / b \u3068\u540c\u3058\u7d50\u679c\u304c\u8fd4\u308b\u3002\n- `division_part2(a, b, parted)`: a \u3092 b \u3067\u5272\u3063\u305f\u533a\u9593\u306e\u6b63\u306e\u5074\u3092\u8fd4\u305d\u3046\u3068\u3059\u308b\u3002\n   - parted \u304c\u7701\u7565\u3055\u308c\u305f\u5834\u5408\u306f true \u3068\u307f\u306a\u3055\u308c\u308b\u3002\n   - parted \u304c true \u306e\u5834\u5408\u3001a \u3092 b \u3067\u5272\u3063\u305f\u6b63\u306e\u5074\u306e\u533a\u9593\u3092\u8fd4\u3059\u3002\n   - parted \u304c false \u306e\u5834\u5408\u3084\u3001\u533a\u9593\u304c\u5206\u5272\u3055\u308c\u306a\u3044\u5834\u5408\u3053\u306e\u95a2\u6570\u306e\u7d50\u679c\u306f undetermined \u3067\u3042\u308b\u3002(\u30a8\u30e9\u30fc\u304c\u6295\u3052\u3089\u308c\u308b\u306a\u3069)\n\n```c++:test-interval-fun-math-2.cpp\n#include <iostream>\n#include <boost/numeric/interval.hpp>\n#include <boost/numeric/interval/io.hpp>\n\nint main () {\n\ttypedef double R;\n\ttypedef boost::numeric::interval<R> IR;\n\tusing std::cout;\n\tusing std::endl;\n\tconst IR a(1, 2);\n\tconst IR b(-3, 4);\n\tcout << \"a     = \" << a << endl;\n\tcout << \"b     = \" << b << endl;\n\tcout << \"a / b = \" << a / b << endl;\n\tbool parted = false;\n\tconst IR c = division_part1(a, b, parted);\n\tconst IR d = division_part2(a, b, parted);\n\tif (parted) {\n\t\tcout << \"negative part of a / b = \" << c << endl;\n\t\tcout << \"positive part of a / b = \" << d << endl;\n\t}\n\treturn 0;\n}\n```\n\n```txt:output-for-test-interval-fun-math-2.txt\na     = [1,2]\nb     = [-3,4]\na / b = [-inf,inf]\nnegative part of a / b = [-inf,-0.333333]\npositive part of a / b = [0.25,inf]\n```\n\n---\n\n\u4eca\u65e5\u3082\u3053\u306e\u8fba\u3067\u3002\u672c\u5bb6\u3088\u308a\u9577\u3044\u8aac\u660e\u66f8\u3044\u3066\u308b\u6c17\u304c\u3059\u308b\u306e\u306f\u304d\u3063\u3068\u6c17\u306e\u305b\u3044\u3067\u3059\u3002(\u81ea\u91cd\u3057\u306a\u3044\u3068)\n\n\u4eca\u56de\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u51fa\u529b\u4f8b: https://gist.github.com/2954837\n\u6b21: [boost::numeric::interval\\<int\\>(3): C++ Boost \u533a\u9593\u6f14\u7b97\u30e9\u30a4\u30d6\u30e9\u30ea \u8d85\u8d8a\u95a2\u6570](http://qiita.com/items/e08ca64b318917e6d4ab \"boost::numeric::interval<int>(3): C++ Boost \u533a\u9593\u6f14\u7b97\u30e9\u30a4\u30d6\u30e9\u30ea \u8d85\u8d8a\u95a2\u6570 #C++ #\u6570\u5024\u8a08\u7b97 #\u533a\u9593\u6f14\u7b97 #boost - Qiita\")\n", "tags": ["boost", "C++", "\u533a\u9593\u6f14\u7b97", "\u6570\u5024\u8a08\u7b97"]}