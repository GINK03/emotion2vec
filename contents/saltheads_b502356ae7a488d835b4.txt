{"context": "\n\n\u7d20\u6570\u3092\u6c42\u3081\u308b\n\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0Elixir\u3001\u7b2c10\u7ae0 p.105\u307e\u3067\u8aad\u3093\u3067\u305d\u3053\u307e\u3067\u306e\u5168\u3066\u306e\u6f14\u7fd2\u554f\u984c\u3092\u89e3\u304d\u307e\u3057\u305f\u3002p.105\u306e\u554f\u984c\u306f\u7d20\u6570\u3092\u6c42\u3081\u308b\u554f\u984c\u3067\u3059\u3002\u305d\u308c\u305e\u308c\u306e\u8a00\u8a9e\u3067\u7d20\u6570\u3092\u6c42\u3081\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u307f\u308b\u3068\u8a00\u8a9e\u3054\u3068\u306e\u7279\u5fb4\u304c\u51fa\u3066\u305d\u308c\u305e\u308c\u52c9\u5f37\u306b\u306a\u308a\u307e\u3059\u306d\u3002\uff11\u3064\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3082\u5b9f\u884c\u3057\u307e\u3057\u305f\u3002\n\nprime.exs\n# prime.exs\n_ = \"\"\"\nhere document\nhere document\nhere document\n\"\"\"\n\nExUnit.start()\ndefmodule MyUnitTest do\n  @upto 10000\n  use ExUnit.Case\n  test \"prime test\" do\n    defmodule Prime do\n      import Integer\n\n      def span(m,_) when not is_integer(m), do: raise \"integer is required\"\n      def span(_,n) when not is_integer(n), do: raise \"integer is required\"\n      def span(m,n) when m <= n, do: (m..n) |> Enum.to_list\n      def span(_,_), do: []\n\n      def is_prime?(n) when not is_integer(n), do: raise \"integer is required\"\n      def is_prime?(n) when n < 2, do: false\n      def is_prime?(2), do: true\n      def is_prime?(n) when is_even(n), do: false\n      def is_prime?(n) do\n        list = for i <- span(3,n-1), i*i <= n, is_odd(i), do: rem(n,i)\n        list |> Enum.map(&(&1 != 0)) |> Enum.all?\n      end\n\n      def primes(n) when n < 2, do: []\n      def primes(n), do: span(2,n) |> Enum.filter(&is_prime?/1)\n\n      def prime_count(n), do: primes(n) |> Enum.count()\n    end\n\n    assert     Prime.is_prime?(2)\n    assert     Prime.is_prime?(3)\n    assert not Prime.is_prime?(4)\n    assert     Prime.is_prime?(5)\n    assert not Prime.is_prime?(6)\n    assert     Prime.is_prime?(7)\n    assert not Prime.is_prime?(9)\n    assert     [] |> Enum.all?\n    assert     [true] |> Enum.all?\n    assert [true,true,true,false,true,true,false]\n        == [3,5,7,9,11,13,15] |> Enum.map(&Prime.is_prime?/1)\n    assert [2,3,4,5,6,7,8,9] == Prime.span(2,9)\n    assert [1,0] == for i <- Prime.span(2,3), do: rem(9,i)\n    assert [true,false] == [1,0] |> Enum.map(&(&1 != 0))\n    assert false == [1,0] |> Enum.map(&(&1 != 0)) |> Enum.all?\n    assert Prime.primes(10) == [2,3,5,7]\n    assert Prime.primes(100)\n           == [2,  3,  5,  7,  11, 13, 17, 19, 23, 29, 31, 37, 41,\n               43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    assert Prime.prime_count(100) == 25\n    assert Prime.prime_count(1000) == 168\n\n    IO.puts \"---- single ----\"\n    # IO.inspect Prime.prime_count(10000)\n    IO.inspect :timer.tc(Prime, :prime_count, [10000])\n\n\n\nElixir\u306f\u3001Haskell\u3068\u9055\u3063\u3066\u52d5\u7684\u578b\u4ed8\u3051\u8a00\u8a9e\u306a\u306e\u3067\u3001is_integer\u3067\u4e0e\u3048\u3089\u308c\u305f\u5f15\u6570\u304c\u6574\u6570\u578b\u304b\u8abf\u3079\u305f\u308a\u3057\u3066\u3044\u307e\u3059\u3002\nn\u304c\u7d20\u6570\u304b\u3069\u3046\u304b\u5224\u5b9a\u3059\u308b\u95a2\u6570\u304c\u3067\u304d\u305f\u306e\u3067\u3001n\u500b\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u4f5c\u3063\u3066\u3001\u305d\u308c\u305e\u308c\u4e26\u884c\u3057\u3066\u7d20\u6570\u3092\u6c42\u3081\u3055\u305b\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\u4e26\u884c\u51e6\u7406\u305d\u306e\u3082\u306e\u306f\u3001n\u500b\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u8d77\u52d5\u3057\u305f\u3042\u3068\u306b\u3001n\u500b\u306e\u7d50\u679c\u3092\u53d7\u4fe1\u3057\u305f\u3042\u3068\u3001sort\u3059\u308b\u3001\u3068\u3044\u3046\u5de5\u592b\u306e\u4f59\u5730\u304c\u304c\u591a\u3044\u51e6\u7406\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\nprime.exs\u7d9a\u304d\n\n    defmodule ConcurrentPrime do\n      def times(1,f), do: [f.()]\n      def times(n,f), do: [f.() | times(n-1,f)]\n      def times_with_index(1,f), do: [f.(1)]\n      def times_with_index(n,f), do: [f.(n) | times_with_index(n-1,f)]\n\n      defp chore(n) do\n        { Prime.is_prime?(n), n }\n      end\n      defp spawn_child(parent) do\n        fn(n) ->\n          spawn fn -> send parent, chore(n) end\n        end\n      end\n      def concurrentPrimes(upto) do\n        parent = self()\n        _pids = times_with_index(upto, spawn_child(parent))\n        times(upto, fn ->\n                       receive do\n                         {:true, n } -> n\n                         {_,     _ } -> 0\n                       end\n                     end)\n        |> Enum.filter(&(&1 > 0)) |> Enum.sort\n      end\n      def primes(n), do: concurrentPrimes(n)\n      def prime_count(n), do: primes(n) |> Enum.count()\n    end\n\n    IO.puts \"---- concurrent ----\"\n    # IO.inspect ConcurrentPrime.prime_count(10000)\n    IO.inspect :timer.tc(ConcurrentPrime, :prime_count, [10000])\n  end\nend\n\n\n\n:timer.tc \u306f\u5b9f\u884c\u7d50\u679c\u3092\uff12\u3064\u306e\u8981\u7d20\u304c\u5165\u3063\u305f\u30bf\u30d7\u30eb\u3067\u8fd4\u3057\u3001\uff11\u3064\u3081\u306e\u8981\u7d20\u304c\u5b9f\u884c\u6642\u9593\u3001\uff12\u3064\u3081\u304c\u95a2\u6570\u306e\u623b\u308a\u5024\u3067\u3059\u3002\n\u5b9f\u884c\u7d50\u679c\n$ elixir pp.exs \n---- single ----\n{2952219, 1229}\n---- concurrent ----\n{532454, 1229}\n.\n\nFinished in 4.8 seconds (0.08s on load, 4.7s on tests)\n1 test, 0 failures\n\nRandomized with seed 329355\n\n\uff18\u30b3\u30a2\u306e\u5168\u3066\u304c\u4f7f\u308f\u308c\u3066\u3044\u3066\u3001\u3060\u3044\u305f\u3044\uff15\u500d\u3050\u3089\u3044\u901f\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u7c21\u5358\u306b\u4e26\u884c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u304d\u3066\u3001\u7d20\u6575\u306a\u8a00\u8a9e\u3067\u3059\u3002\n## \u7d20\u6570\u3092\u6c42\u3081\u308b\n\n\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0Elixir\u3001\u7b2c10\u7ae0 p.105\u307e\u3067\u8aad\u3093\u3067\u305d\u3053\u307e\u3067\u306e\u5168\u3066\u306e\u6f14\u7fd2\u554f\u984c\u3092\u89e3\u304d\u307e\u3057\u305f\u3002p.105\u306e\u554f\u984c\u306f\u7d20\u6570\u3092\u6c42\u3081\u308b\u554f\u984c\u3067\u3059\u3002\u305d\u308c\u305e\u308c\u306e\u8a00\u8a9e\u3067\u7d20\u6570\u3092\u6c42\u3081\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u307f\u308b\u3068\u8a00\u8a9e\u3054\u3068\u306e\u7279\u5fb4\u304c\u51fa\u3066\u305d\u308c\u305e\u308c\u52c9\u5f37\u306b\u306a\u308a\u307e\u3059\u306d\u3002\uff11\u3064\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3082\u5b9f\u884c\u3057\u307e\u3057\u305f\u3002\n\n```elixir:prime.exs\n# prime.exs\n_ = \"\"\"\nhere document\nhere document\nhere document\n\"\"\"\n\nExUnit.start()\ndefmodule MyUnitTest do\n  @upto 10000\n  use ExUnit.Case\n  test \"prime test\" do\n    defmodule Prime do\n      import Integer\n\n      def span(m,_) when not is_integer(m), do: raise \"integer is required\"\n      def span(_,n) when not is_integer(n), do: raise \"integer is required\"\n      def span(m,n) when m <= n, do: (m..n) |> Enum.to_list\n      def span(_,_), do: []\n\n      def is_prime?(n) when not is_integer(n), do: raise \"integer is required\"\n      def is_prime?(n) when n < 2, do: false\n      def is_prime?(2), do: true\n      def is_prime?(n) when is_even(n), do: false\n      def is_prime?(n) do\n        list = for i <- span(3,n-1), i*i <= n, is_odd(i), do: rem(n,i)\n        list |> Enum.map(&(&1 != 0)) |> Enum.all?\n      end\n\n      def primes(n) when n < 2, do: []\n      def primes(n), do: span(2,n) |> Enum.filter(&is_prime?/1)\n\n      def prime_count(n), do: primes(n) |> Enum.count()\n    end\n\n    assert     Prime.is_prime?(2)\n    assert     Prime.is_prime?(3)\n    assert not Prime.is_prime?(4)\n    assert     Prime.is_prime?(5)\n    assert not Prime.is_prime?(6)\n    assert     Prime.is_prime?(7)\n    assert not Prime.is_prime?(9)\n    assert     [] |> Enum.all?\n    assert     [true] |> Enum.all?\n    assert [true,true,true,false,true,true,false]\n        == [3,5,7,9,11,13,15] |> Enum.map(&Prime.is_prime?/1)\n    assert [2,3,4,5,6,7,8,9] == Prime.span(2,9)\n    assert [1,0] == for i <- Prime.span(2,3), do: rem(9,i)\n    assert [true,false] == [1,0] |> Enum.map(&(&1 != 0))\n    assert false == [1,0] |> Enum.map(&(&1 != 0)) |> Enum.all?\n    assert Prime.primes(10) == [2,3,5,7]\n    assert Prime.primes(100)\n           == [2,  3,  5,  7,  11, 13, 17, 19, 23, 29, 31, 37, 41,\n               43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    assert Prime.prime_count(100) == 25\n    assert Prime.prime_count(1000) == 168\n\n    IO.puts \"---- single ----\"\n    # IO.inspect Prime.prime_count(10000)\n    IO.inspect :timer.tc(Prime, :prime_count, [10000])\n\n```\nElixir\u306f\u3001Haskell\u3068\u9055\u3063\u3066\u52d5\u7684\u578b\u4ed8\u3051\u8a00\u8a9e\u306a\u306e\u3067\u3001is_integer\u3067\u4e0e\u3048\u3089\u308c\u305f\u5f15\u6570\u304c\u6574\u6570\u578b\u304b\u8abf\u3079\u305f\u308a\u3057\u3066\u3044\u307e\u3059\u3002\n\nn\u304c\u7d20\u6570\u304b\u3069\u3046\u304b\u5224\u5b9a\u3059\u308b\u95a2\u6570\u304c\u3067\u304d\u305f\u306e\u3067\u3001n\u500b\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u4f5c\u3063\u3066\u3001\u305d\u308c\u305e\u308c\u4e26\u884c\u3057\u3066\u7d20\u6570\u3092\u6c42\u3081\u3055\u305b\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n\u4e26\u884c\u51e6\u7406\u305d\u306e\u3082\u306e\u306f\u3001n\u500b\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u8d77\u52d5\u3057\u305f\u3042\u3068\u306b\u3001n\u500b\u306e\u7d50\u679c\u3092\u53d7\u4fe1\u3057\u305f\u3042\u3068\u3001sort\u3059\u308b\u3001\u3068\u3044\u3046\u5de5\u592b\u306e\u4f59\u5730\u304c\u304c\u591a\u3044\u51e6\u7406\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```elixir:prime.exs\u7d9a\u304d\n\n    defmodule ConcurrentPrime do\n      def times(1,f), do: [f.()]\n      def times(n,f), do: [f.() | times(n-1,f)]\n      def times_with_index(1,f), do: [f.(1)]\n      def times_with_index(n,f), do: [f.(n) | times_with_index(n-1,f)]\n\n      defp chore(n) do\n        { Prime.is_prime?(n), n }\n      end\n      defp spawn_child(parent) do\n        fn(n) ->\n          spawn fn -> send parent, chore(n) end\n        end\n      end\n      def concurrentPrimes(upto) do\n        parent = self()\n        _pids = times_with_index(upto, spawn_child(parent))\n        times(upto, fn ->\n                       receive do\n                         {:true, n } -> n\n                         {_,     _ } -> 0\n                       end\n                     end)\n        |> Enum.filter(&(&1 > 0)) |> Enum.sort\n      end\n      def primes(n), do: concurrentPrimes(n)\n      def prime_count(n), do: primes(n) |> Enum.count()\n    end\n\n    IO.puts \"---- concurrent ----\"\n    # IO.inspect ConcurrentPrime.prime_count(10000)\n    IO.inspect :timer.tc(ConcurrentPrime, :prime_count, [10000])\n  end\nend\n\n```\n:timer.tc \u306f\u5b9f\u884c\u7d50\u679c\u3092\uff12\u3064\u306e\u8981\u7d20\u304c\u5165\u3063\u305f\u30bf\u30d7\u30eb\u3067\u8fd4\u3057\u3001\uff11\u3064\u3081\u306e\u8981\u7d20\u304c\u5b9f\u884c\u6642\u9593\u3001\uff12\u3064\u3081\u304c\u95a2\u6570\u306e\u623b\u308a\u5024\u3067\u3059\u3002\n\n\u5b9f\u884c\u7d50\u679c\n\n```elixir:\n$ elixir pp.exs \n---- single ----\n{2952219, 1229}\n---- concurrent ----\n{532454, 1229}\n.\n\nFinished in 4.8 seconds (0.08s on load, 4.7s on tests)\n1 test, 0 failures\n\nRandomized with seed 329355\n```\n\uff18\u30b3\u30a2\u306e\u5168\u3066\u304c\u4f7f\u308f\u308c\u3066\u3044\u3066\u3001\u3060\u3044\u305f\u3044\uff15\u500d\u3050\u3089\u3044\u901f\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n![win_task_mgr2.png](https://qiita-image-store.s3.amazonaws.com/0/11188/26c52bc8-3e68-171a-befc-61d329af7a0c.png)\n\n\n\u7c21\u5358\u306b\u4e26\u884c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u304d\u3066\u3001\u7d20\u6575\u306a\u8a00\u8a9e\u3067\u3059\u3002\n\n", "tags": ["Elixir", "unittest"]}