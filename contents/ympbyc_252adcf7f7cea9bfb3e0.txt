{"tags": ["Smalltalk72", "lisp", "Scheme"], "context": " More than 1 year has passed since last update.SICP\u7b2c2\u7248\u306e186\u30da\u30fc\u30b8(\u539f\u8457)\u304b\u3089\u51fa\u3066\u304f\u308bMessage passing\u306b\u3064\u3044\u3066\u3002\n\u4f8b\u3001\u52d5\u7269\u304c\u9cf4\u304d\u307e\u3059\u3002\u540d\u524d\u306f\u30b7\u30f3\u30dc\u30eb\u3082\u3057\u304f\u306f\u6587\u5b57\u5217\u3067\u3001\u8868\u793a\u6642\u306b\u5fc5\u8981\u306b\u5fdc\u3058\u3066coerce\u3057\u307e\u3059\u3002\n\nanimal.scm\n(define (animal name voice)\n  (lambda (m)\n    (cond\n      [(eq? m 'name) (if (symbol? name) (symbol->string name) name)]\n      [(eq? m 'talkTo) \n       (lambda (x) \n         (print (string-append (if (symbol? name) (symbol->string name) name) \" said \" voice \" to \" x)))])))\n\n(define felix (animal \"Felix the Cat\" \"meooow\"))\n(felix 'name) ;; \"Felix the Cat\"\n((felix 'talkTo) \"me\") ;; \"Felix the Cat said meooow to me\" #<undef>\n\n\n\u30e1\u30c3\u30bb\u30fc\u30b8\u30d1\u30c3\u30b7\u30f3\u30b0\u30b9\u30bf\u30a4\u30eb\u3001\u306a\u306b\u304b\u306b\u4f3c\u3066\u3044\u307e\u3059\u3002\u305d\u3046\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u3067\u3059\u3002animal\u3092\u547c\u3073\u51fa\u3057\u305f\u969b\u306b\u8fd4\u3055\u308c\u308b\u30af\u30ed\u30fc\u30b8\u30e3\u306fanimal\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4e0a\u306e\u4f8b\u3067\u306fname\u3068talkTo\u3067\u540c\u3058\u4e8b(coerce)\u3092\u3057\u3066\u3044\u307e\u3059\u3002\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u3067\u306f\u666e\u901a\u3053\u3046\u3044\u3046\u3068\u304dself\u3092\u4f7f\u3044\u307e\u3059\u3002\n\nanimal.st\nObject subclass: #Animal\n    instanceVariableNames: 'name voice'\n    classVariableNames: ''\n    poolDictionaries: ''\n    category: 'Example'!\n\n!Animal methodsFor: 'as yet unclassified' stamp: 'ympbyc 12/29/2012 02:32'!\ninitWithName: n voice: v\n  name := n.\n  voice := v! !\n\n!Animal methodsFor: 'as yet unclassified' stamp: 'ympbyc 12/29/2012 02:25'!\nname\n  ^ name asString! !\n\n!Animal methodsFor: 'as yet unclassified' stamp: 'ympbyc 12/29/2012 02:29'!\ntalkTo: whom\n  ^ self name ,' said ' , voice ,' to ' , whom! !\n\n\nself\u53c2\u7167\u3092\u5229\u7528\u3057\u3066\u3001\u81ea\u5206\u81ea\u8eab\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3076\u4e8b\u3067\u3001\u540c\u3058\u30b3\u30fc\u30c9\u30922\u30ab\u6240\u306b\u66f8\u304b\u305a\u306b\u6e08\u3093\u3067\u3044\u307e\u3059\u3002\n\u524d\u632f\u308a\u304c\u9577\u304b\u3063\u305f\u3067\u3059\u304c\u3053\u3053\u304b\u3089\u304c\u672c\u984c\u3002Scheme\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30d1\u30c3\u30b7\u30f3\u30b0\u30b9\u30bf\u30a4\u30eb\u3067self\u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nself\u3068\u3044\u3046\u30b7\u30f3\u30dc\u30eb\u306b\u3001\u3042\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u52dd\u624b\u306b\u7d50\u3073\u3064\u3051\u308b\u306e\u3067\u3001\u30a2\u30ca\u30d5\u30a9\u30ea\u30c3\u30af\u30de\u30af\u30ed\u3068\u3044\u3046\u3082\u306e\u3092\u66f8\u304d\u307e\u3059\u3002\u3064\u3044\u3067\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u306a\u308blambda\u3082\u4f5c\u3063\u3066\u3084\u308a\u307e\u3059\u3002\u30e1\u30bd\u30c3\u30c9\u540d\u306f\u30b7\u30f3\u30dc\u30eb=>\u306b\u675f\u7e1b\u3059\u308b\u4e8b\u306b\u3057\u307e\u3059\u3002\n\ndefine-class.scm\n;;Unhygenic anaphoric macro\n(define-macro (define-class class args body)\n  `(define ,class (lambda ,args \n      (Z (lambda (self) (lambda (=>) ,body))))))\n\n\n\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f(lambda (=>) ,body)\u306e\u90e8\u5206\u3067\u3059\u3002\u3053\u3044\u3064\u3092self\u306b\u5165\u308c\u305f\u3044\u306e\u3067\u3001\u7121\u540d\u95a2\u6570\u3060\u3051\u3067\u518d\u5e30\u3092\u5b9f\u73fe\u3059\u308bZ\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3068\u3044\u3046\u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002\n\nz.scm\n(define Z (lambda (f) ((lambda (p)\n (f (lambda (a) ((p p) a))))\n (lambda (p)\n   (f (lambda (a) ((p p) a)))))))\n\n\n(Z (lambda (f) ...))\u3068\u547c\u3073\u51fa\u3059\u3068\u3001f\u306b(lambda (f) ...)\u81ea\u8eab\u304c\u5165\u308b\u306e\u3067\u3001...\u306e\u90e8\u5206\u3067f\u3092\u53c2\u7167\u3059\u308c\u3070\u518d\u5e30\u304c\u3067\u304d\u308b\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002\n\u3053\u308c\u3067self\u304c\u624b\u306b\u5165\u308a\u307e\u3057\u305f\u3002\n\u5b9f\u969b\u306b\u4f7f\u3063\u3066\u307f\u308b\u524d\u306b\u3082\u3046\u4e00\u3064\u4fbf\u5229\u306a\u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u3053\u308c\u3092\u4f7f\u3046\u3068\u3001(on \u30e1\u30bd\u30c3\u30c9\u540d => \u30e1\u30bd\u30c3\u30c9\u672c\u4f53 ...\u3068\u3044\u3046\u98a8\u306b\u66f8\u3051\u307e\u3059\n\non.scm\n(define-syntax on\n  (syntax-rules ()\n    ((_ x y a b) (if (equal? x y) a b))\n    ((_ x y a) (if (equal? x y) a))))\n\n\n\u6e96\u5099\u304c\u3067\u304d\u307e\u3057\u305f\uff01\u4f7f\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nanimal2.scm\n(define-class animal (name voice)\n  (on 'name  => (if (symbol? name) (symbol->string name) name)\n  (on 'talkTo => (lambda (x) (print (string-append (self 'name) \" said \" voice \" to \" x))))))\n\n(define felix (animal \"Felix the Cat\" \"meooow\"))\n(felix 'name) ;;\"Felix the Cat\"\n((felix 'talkTo) \"me\") ;;\"Felix the Cat said meooow to me\" #<undef>\n\n\n\u4ee5\u4e0a\u3001\u5c0f\u30cd\u30bf\u3067\u3057\u305f\u3002\n\u30a2\u30ca\u30d5\u30a9\u30ea\u30c3\u30af\u30de\u30af\u30ed\u3068Z\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306e\u4f7f\u3044\u9053\u3092\u767a\u898b\u3057\u3066\u5b09\u3057\u304f\u306a\u3063\u305f\u306e\u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u3088\u3044\u304a\u5e74\u3092\uff01\nSICP\u7b2c2\u7248\u306e186\u30da\u30fc\u30b8(\u539f\u8457)\u304b\u3089\u51fa\u3066\u304f\u308b**Message passing**\u306b\u3064\u3044\u3066\u3002\n\n\u4f8b\u3001\u52d5\u7269\u304c\u9cf4\u304d\u307e\u3059\u3002\u540d\u524d\u306f\u30b7\u30f3\u30dc\u30eb\u3082\u3057\u304f\u306f\u6587\u5b57\u5217\u3067\u3001\u8868\u793a\u6642\u306b\u5fc5\u8981\u306b\u5fdc\u3058\u3066coerce\u3057\u307e\u3059\u3002\n\n```animal.scm\n(define (animal name voice)\n  (lambda (m)\n    (cond\n      [(eq? m 'name) (if (symbol? name) (symbol->string name) name)]\n      [(eq? m 'talkTo) \n       (lambda (x) \n         (print (string-append (if (symbol? name) (symbol->string name) name) \" said \" voice \" to \" x)))])))\n\n(define felix (animal \"Felix the Cat\" \"meooow\"))\n(felix 'name) ;; \"Felix the Cat\"\n((felix 'talkTo) \"me\") ;; \"Felix the Cat said meooow to me\" #<undef>\n```\n\n\u30e1\u30c3\u30bb\u30fc\u30b8\u30d1\u30c3\u30b7\u30f3\u30b0\u30b9\u30bf\u30a4\u30eb\u3001\u306a\u306b\u304b\u306b\u4f3c\u3066\u3044\u307e\u3059\u3002\u305d\u3046\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u3067\u3059\u3002animal\u3092\u547c\u3073\u51fa\u3057\u305f\u969b\u306b\u8fd4\u3055\u308c\u308b\u30af\u30ed\u30fc\u30b8\u30e3\u306fanimal\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4e0a\u306e\u4f8b\u3067\u306f`name`\u3068`talkTo`\u3067\u540c\u3058\u4e8b(coerce)\u3092\u3057\u3066\u3044\u307e\u3059\u3002\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u3067\u306f\u666e\u901a\u3053\u3046\u3044\u3046\u3068\u304dself\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```animal.st\nObject subclass: #Animal\n\tinstanceVariableNames: 'name voice'\n\tclassVariableNames: ''\n\tpoolDictionaries: ''\n\tcategory: 'Example'!\n\n!Animal methodsFor: 'as yet unclassified' stamp: 'ympbyc 12/29/2012 02:32'!\ninitWithName: n voice: v\n  name := n.\n  voice := v! !\n\n!Animal methodsFor: 'as yet unclassified' stamp: 'ympbyc 12/29/2012 02:25'!\nname\n  ^ name asString! !\n\n!Animal methodsFor: 'as yet unclassified' stamp: 'ympbyc 12/29/2012 02:29'!\ntalkTo: whom\n  ^ self name ,' said ' , voice ,' to ' , whom! !\n```\n\nself\u53c2\u7167\u3092\u5229\u7528\u3057\u3066\u3001\u81ea\u5206\u81ea\u8eab\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3076\u4e8b\u3067\u3001\u540c\u3058\u30b3\u30fc\u30c9\u30922\u30ab\u6240\u306b\u66f8\u304b\u305a\u306b\u6e08\u3093\u3067\u3044\u307e\u3059\u3002\n\n\u524d\u632f\u308a\u304c\u9577\u304b\u3063\u305f\u3067\u3059\u304c\u3053\u3053\u304b\u3089\u304c\u672c\u984c\u3002Scheme\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30d1\u30c3\u30b7\u30f3\u30b0\u30b9\u30bf\u30a4\u30eb\u3067self\u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nself\u3068\u3044\u3046\u30b7\u30f3\u30dc\u30eb\u306b\u3001\u3042\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u52dd\u624b\u306b\u7d50\u3073\u3064\u3051\u308b\u306e\u3067\u3001\u30a2\u30ca\u30d5\u30a9\u30ea\u30c3\u30af\u30de\u30af\u30ed\u3068\u3044\u3046\u3082\u306e\u3092\u66f8\u304d\u307e\u3059\u3002\u3064\u3044\u3067\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u306a\u308blambda\u3082\u4f5c\u3063\u3066\u3084\u308a\u307e\u3059\u3002\u30e1\u30bd\u30c3\u30c9\u540d\u306f\u30b7\u30f3\u30dc\u30eb`=>`\u306b\u675f\u7e1b\u3059\u308b\u4e8b\u306b\u3057\u307e\u3059\u3002\n\n```define-class.scm\n;;Unhygenic anaphoric macro\n(define-macro (define-class class args body)\n  `(define ,class (lambda ,args \n      (Z (lambda (self) (lambda (=>) ,body))))))\n```\n\n\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f`(lambda (=>) ,body)`\u306e\u90e8\u5206\u3067\u3059\u3002\u3053\u3044\u3064\u3092self\u306b\u5165\u308c\u305f\u3044\u306e\u3067\u3001\u7121\u540d\u95a2\u6570\u3060\u3051\u3067\u518d\u5e30\u3092\u5b9f\u73fe\u3059\u308bZ\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3068\u3044\u3046\u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```z.scm\n(define Z (lambda (f) ((lambda (p)\n (f (lambda (a) ((p p) a))))\n (lambda (p)\n   (f (lambda (a) ((p p) a)))))))\n```\n\n`(Z (lambda (f) ...))`\u3068\u547c\u3073\u51fa\u3059\u3068\u3001f\u306b`(lambda (f) ...)`\u81ea\u8eab\u304c\u5165\u308b\u306e\u3067\u3001`...`\u306e\u90e8\u5206\u3067f\u3092\u53c2\u7167\u3059\u308c\u3070\u518d\u5e30\u304c\u3067\u304d\u308b\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002\n\u3053\u308c\u3067self\u304c\u624b\u306b\u5165\u308a\u307e\u3057\u305f\u3002\n\n\u5b9f\u969b\u306b\u4f7f\u3063\u3066\u307f\u308b\u524d\u306b\u3082\u3046\u4e00\u3064\u4fbf\u5229\u306a\u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u3053\u308c\u3092\u4f7f\u3046\u3068\u3001`(on \u30e1\u30bd\u30c3\u30c9\u540d => \u30e1\u30bd\u30c3\u30c9\u672c\u4f53 ...`\u3068\u3044\u3046\u98a8\u306b\u66f8\u3051\u307e\u3059\n\n```on.scm\n(define-syntax on\n  (syntax-rules ()\n    ((_ x y a b) (if (equal? x y) a b))\n    ((_ x y a) (if (equal? x y) a))))\n```\n\n\u6e96\u5099\u304c\u3067\u304d\u307e\u3057\u305f\uff01\u4f7f\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```animal2.scm\n(define-class animal (name voice)\n  (on 'name  => (if (symbol? name) (symbol->string name) name)\n  (on 'talkTo => (lambda (x) (print (string-append (self 'name) \" said \" voice \" to \" x))))))\n\n(define felix (animal \"Felix the Cat\" \"meooow\"))\n(felix 'name) ;;\"Felix the Cat\"\n((felix 'talkTo) \"me\") ;;\"Felix the Cat said meooow to me\" #<undef>\n```\n\n\u4ee5\u4e0a\u3001\u5c0f\u30cd\u30bf\u3067\u3057\u305f\u3002\n\u30a2\u30ca\u30d5\u30a9\u30ea\u30c3\u30af\u30de\u30af\u30ed\u3068Z\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306e\u4f7f\u3044\u9053\u3092\u767a\u898b\u3057\u3066\u5b09\u3057\u304f\u306a\u3063\u305f\u306e\u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u3088\u3044\u304a\u5e74\u3092\uff01"}