{"tags": ["Tomcat7", "dll"], "context": "teratail\u3067\u8cea\u554f\u3057\u305f\u3093\u3067\u3059\u304c\u3001\u56de\u7b54\u304c\u4ed8\u304b\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305aQiita\u306b\u6b8b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u524d\u63d0\nTomcat Manager\u304b\u3089\u914d\u5099\u89e3\u9664\u3059\u308b\u3068\u3001jar\u30d5\u30a1\u30a4\u30eb\u304c\u6b8b\u3063\u3066\u5931\u6557\u3059\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n\u305d\u306e\u5bfe\u5fdc\u3068\u3057\u3066\u3001\u4e0b\u8a18\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306bconf/context.xml\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\nhttp://ameblo.jp/spring-beginner/entry-10435382344.html\n\nconf/context.xml\n<Context antiJARLocking =\"true\" antiResourceLocking=\"true\" >\n\n\n\n\u767a\u751f\u3057\u3066\u3044\u308b\u554f\u984c\u30fb\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\nDLL\u306e\u547c\u3073\u51fa\u3057\u3067\u3001\n\u300cjava.lang.NoClassDefFoundError: Could not initialize class CLibrary\u300d\u3068\u3044\u3046\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\u3002\nDLL\u306f\u4e0b\u8a18\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3057\u3066\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\nhttp://d.hatena.ne.jp/maachang/20110110\npublic class HelloWorld {\n    public interface CLibrary extends Library {\n        CLibrary INSTANCE = (CLibrary) Native.loadLibrary(\n        (Platform.isWindows() ? \"msvcrt\" : \"c\"), CLibrary.class);\n        void printf(String format, Object... args);\n    }\n\n    public static void main(String[] args) {\n        CLibrary.INSTANCE.printf(\"Hello, World\\n\");\n        for (int i = 0; i < args.length; i++) {\n            CLibrary.INSTANCE.printf(\"Argument %d: %s\\n\", i, args[i]);\n        }\n    }\n}\n\n\n\u539f\u56e0\u306e\u8abf\u67fb\n\u691c\u7d22\u3057\u3066\u3082\u30a8\u30e9\u30fc\u306e\u539f\u56e0\u304c\u5206\u304b\u3089\u305a\u3001\u3072\u3068\u307e\u305a\u30b5\u30fc\u30d0\u306e\u72b6\u614b\u3092\u5143\u306b\u623b\u3057\u305f\u3089\u3001DLL\u306f\u52d5\u304d\u307e\u3057\u305f\u3002\nantiJARLocking\u306fjar\u30d5\u30a1\u30a4\u30eb\u7528\u306e\u8a2d\u5b9a\u306a\u306e\u3067\u3001antiResourceLocking\u304c\u539f\u56e0\u3060\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\u3067\u3001antiResourceLocking\u3092true\u306b\u3059\u308b\u3068\u3001DLL\u304c\u52d5\u304b\u306a\u304f\u306a\u308b\u539f\u56e0\u304c\u5206\u304b\u308a\u307e\u305b\u3093\u3002\n\n\u88dc\u8db3\u60c5\u5831(\u8a00\u8a9e/FW/\u30c4\u30fc\u30eb\u7b49\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306a\u3069)\n\nTomcat7\nJava8\nWindows Server 2008 x64\nantiResourceLocking\u306e\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\uff08Tomcat7\u306b https://tomcat.apache.org/tomcat-7.0-doc/config/context.html\uff09\n\n\n\nIf true, Tomcat will prevent any file locking. This will significantly impact startup time of applications, but allows full webapp hot deploy and undeploy on platforms or configurations where file locking can occur. If not specified, the default value is false.\nantiJARLocking is a subset of antiResourceLocking and therefore, to prevent duplicate work and possible issues, only one of these attributes should be set to true at any one time.\nPlease note that setting this to true has some side effects, including the disabling of JSP reloading in a running server: see Bugzilla 37668.\nPlease note that setting this flag to true in applications that are outside the appBase for the Host (the webapps directory by default) will cause the application to be deleted on Tomcat shutdown. You probably don't want to do this, so think twice before setting antiResourceLocking=true on a webapp that's outside the appBase for its Host.\n\nteratail\u3067\u8cea\u554f\u3057\u305f\u3093\u3067\u3059\u304c\u3001\u56de\u7b54\u304c\u4ed8\u304b\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305aQiita\u306b\u6b8b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n# \u524d\u63d0\nTomcat Manager\u304b\u3089\u914d\u5099\u89e3\u9664\u3059\u308b\u3068\u3001jar\u30d5\u30a1\u30a4\u30eb\u304c\u6b8b\u3063\u3066\u5931\u6557\u3059\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n\u305d\u306e\u5bfe\u5fdc\u3068\u3057\u3066\u3001\u4e0b\u8a18\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306bconf/context.xml\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\nhttp://ameblo.jp/spring-beginner/entry-10435382344.html\n\n```xml:conf/context.xml\n<Context antiJARLocking =\"true\" antiResourceLocking=\"true\" >\n```\n\n# \u767a\u751f\u3057\u3066\u3044\u308b\u554f\u984c\u30fb\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\nDLL\u306e\u547c\u3073\u51fa\u3057\u3067\u3001\n\u300cjava.lang.NoClassDefFoundError: Could not initialize class CLibrary\u300d\u3068\u3044\u3046\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\u3002\nDLL\u306f\u4e0b\u8a18\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3057\u3066\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\nhttp://d.hatena.ne.jp/maachang/20110110\n\n```\npublic class HelloWorld {\n    public interface CLibrary extends Library {\n        CLibrary INSTANCE = (CLibrary) Native.loadLibrary(\n        (Platform.isWindows() ? \"msvcrt\" : \"c\"), CLibrary.class);\n        void printf(String format, Object... args);\n    }\n     \n    public static void main(String[] args) {\n        CLibrary.INSTANCE.printf(\"Hello, World\\n\");\n        for (int i = 0; i < args.length; i++) {\n            CLibrary.INSTANCE.printf(\"Argument %d: %s\\n\", i, args[i]);\n        }\n    }\n}\n```\n\n# \u539f\u56e0\u306e\u8abf\u67fb\n\u691c\u7d22\u3057\u3066\u3082\u30a8\u30e9\u30fc\u306e\u539f\u56e0\u304c\u5206\u304b\u3089\u305a\u3001\u3072\u3068\u307e\u305a\u30b5\u30fc\u30d0\u306e\u72b6\u614b\u3092\u5143\u306b\u623b\u3057\u305f\u3089\u3001DLL\u306f\u52d5\u304d\u307e\u3057\u305f\u3002\nantiJARLocking\u306fjar\u30d5\u30a1\u30a4\u30eb\u7528\u306e\u8a2d\u5b9a\u306a\u306e\u3067\u3001antiResourceLocking\u304c\u539f\u56e0\u3060\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\u3067\u3001antiResourceLocking\u3092true\u306b\u3059\u308b\u3068\u3001DLL\u304c\u52d5\u304b\u306a\u304f\u306a\u308b\u539f\u56e0\u304c\u5206\u304b\u308a\u307e\u305b\u3093\u3002\n\n\n\n\n###\u88dc\u8db3\u60c5\u5831(\u8a00\u8a9e/FW/\u30c4\u30fc\u30eb\u7b49\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306a\u3069)\n* Tomcat7\n* Java8\n* Windows Server 2008 x64\n* antiResourceLocking\u306e\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\uff08Tomcat7\u306b https://tomcat.apache.org/tomcat-7.0-doc/config/context.html\uff09\n\n> If true, Tomcat will prevent any file locking. This will significantly impact startup time of applications, but allows full webapp hot deploy and undeploy on platforms or configurations where file locking can occur. If not specified, the default value is false.\nantiJARLocking is a subset of antiResourceLocking and therefore, to prevent duplicate work and possible issues, only one of these attributes should be set to true at any one time.\nPlease note that setting this to true has some side effects, including the disabling of JSP reloading in a running server: see Bugzilla 37668.\nPlease note that setting this flag to true in applications that are outside the appBase for the Host (the webapps directory by default) will cause the application to be deleted on Tomcat shutdown. You probably don't want to do this, so think twice before setting antiResourceLocking=true on a webapp that's outside the appBase for its Host.\n"}