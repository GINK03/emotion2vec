{"context": "\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af 2015\u306e\u6311\u6226\u8a18\u9332\u3067\u3059\u3002\u74b0\u5883\u306fUbuntu 16.04 LTS \uff0b Python 3.5.2 :: Anaconda 4.1.1 (64-bit)\u3067\u3059\u3002\u904e\u53bb\u306e\u30ce\u30c3\u30af\u306e\u4e00\u89a7\u306f\u3053\u3061\u3089\u304b\u3089\u3069\u3046\u305e\u3002\n\n\u7b2c5\u7ae0: \u4fc2\u308a\u53d7\u3051\u89e3\u6790\n\n\u590f\u76ee\u6f31\u77f3\u306e\u5c0f\u8aac\u300e\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300f\u306e\u6587\u7ae0\uff08neko.txt\uff09\u3092CaboCha\u3092\u4f7f\u3063\u3066\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u3057\uff0c\u305d\u306e\u7d50\u679c\u3092neko.txt.cabocha\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u305b\u3088\uff0e\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u3044\u3066\uff0c\u4ee5\u4e0b\u306e\u554f\u306b\u5bfe\u5fdc\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u88c5\u305b\u3088\uff0e\n\n\n41. \u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u306e\u8aad\u307f\u8fbc\u307f\uff08\u6587\u7bc0\u30fb\u4fc2\u308a\u53d7\u3051\uff09\n\n40\u306b\u52a0\u3048\u3066\uff0c\u6587\u7bc0\u3092\u8868\u3059\u30af\u30e9\u30b9Chunk\u3092\u5b9f\u88c5\u305b\u3088\uff0e\u3053\u306e\u30af\u30e9\u30b9\u306f\u5f62\u614b\u7d20\uff08Morph\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u306e\u30ea\u30b9\u30c8\uff08morphs\uff09\uff0c\u4fc2\u308a\u5148\u6587\u7bc0\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\uff08dst\uff09\uff0c\u4fc2\u308a\u5143\u6587\u7bc0\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u306e\u30ea\u30b9\u30c8\uff08srcs\uff09\u3092\u30e1\u30f3\u30d0\u5909\u6570\u306b\u6301\u3064\u3053\u3068\u3068\u3059\u308b\uff0e\u3055\u3089\u306b\uff0c\u5165\u529b\u30c6\u30ad\u30b9\u30c8\u306eCaboCha\u306e\u89e3\u6790\u7d50\u679c\u3092\u8aad\u307f\u8fbc\u307f\uff0c\uff11\u6587\u3092Chunk\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30b9\u30c8\u3068\u3057\u3066\u8868\u73fe\u3057\uff0c8\u6587\u76ee\u306e\u6587\u7bc0\u306e\u6587\u5b57\u5217\u3068\u4fc2\u308a\u5148\u3092\u8868\u793a\u305b\u3088\uff0e\u7b2c5\u7ae0\u306e\u6b8b\u308a\u306e\u554f\u984c\u3067\u306f\uff0c\u3053\u3053\u3067\u4f5c\u3063\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u6d3b\u7528\u305b\u3088\uff0e\n\n\n\u51fa\u6765\u4e0a\u304c\u3063\u305f\u30b3\u30fc\u30c9\uff1a\n\nmain.py\n# coding: utf-8\nimport CaboCha\nimport re\n\nfname = 'neko.txt'\nfname_parsed = 'neko.txt.cabocha'\n\n\ndef parse_neko():\n    '''\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u3092\u4fc2\u308a\u53d7\u3051\u89e3\u6790\n    \u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d(neko.txt)\u3092\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u3057\u3066neko.txt.cabocha\u306b\u4fdd\u5b58\u3059\u308b\n    '''\n    with open(fname) as data_file, \\\n            open(fname_parsed, mode='w') as out_file:\n\n        cabocha = CaboCha.Parser()\n        for line in data_file:\n            out_file.write(\n                cabocha.parse(line).toString(CaboCha.FORMAT_LATTICE)\n            )\n\n\nclass Morph:\n    '''\n    \u5f62\u614b\u7d20\u30af\u30e9\u30b9\n    \u8868\u5c64\u5f62\uff08surface\uff09\u3001\u57fa\u672c\u5f62\uff08base\uff09\u3001\u54c1\u8a5e\uff08pos\uff09\u3001\u54c1\u8a5e\u7d30\u5206\u985e1\uff08pos1\uff09\u3092\n    \u30e1\u30f3\u30d0\u30fc\u5909\u6570\u306b\u6301\u3064\n    '''\n    def __init__(self, surface, base, pos, pos1):\n        '''\u521d\u671f\u5316'''\n        self.surface = surface\n        self.base = base\n        self.pos = pos\n        self.pos1 = pos1\n\n    def __str__(self):\n        '''\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u6587\u5b57\u5217\u8868\u73fe'''\n        return 'surface[{}]\\tbase[{}]\\tpos[{}]\\tpos1[{}]'\\\n            .format(self.surface, self.base, self.pos, self.pos1)\n\n\nclass Chunk:\n    '''\n    \u6587\u7bc0\u30af\u30e9\u30b9\n    \u5f62\u614b\u7d20\uff08Morph\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u306e\u30ea\u30b9\u30c8\uff08morphs\uff09\u3001\u4fc2\u308a\u5148\u6587\u7bc0\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\uff08dst\uff09\u3001\n    \u4fc2\u308a\u5143\u6587\u7bc0\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u306e\u30ea\u30b9\u30c8\uff08srcs\uff09\u3092\u30e1\u30f3\u30d0\u30fc\u5909\u6570\u306b\u6301\u3064\n    '''\n\n    def __init__(self):\n        '''\u521d\u671f\u5316'''\n        self.morphs = []\n        self.srcs = []\n        self.dst = -1\n\n    def __str__(self):\n        '''\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u6587\u5b57\u5217\u8868\u73fe'''\n        surface = ''\n        for morph in self.morphs:\n            surface += morph.surface\n        return '{}\\tsrcs{}\\tdst[{}]'.format(surface, self.srcs, self.dst)\n\n\ndef neco_lines():\n    '''\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u306e\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n    \u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u306e\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u3092\u9806\u6b21\u8aad\u307f\u8fbc\u3093\u3067\u3001\n    1\u6587\u305a\u3064Chunk\u30af\u30e9\u30b9\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\n\n    \u623b\u308a\u5024\uff1a\n    1\u6587\u306eChunk\u30af\u30e9\u30b9\u306e\u30ea\u30b9\u30c8\n    '''\n    with open(fname_parsed) as file_parsed:\n\n        chunks = dict()     # idx\u3092key\u306bChunk\u3092\u683c\u7d0d\n        idx = -1\n\n        for line in file_parsed:\n\n            # 1\u6587\u306e\u7d42\u4e86\u5224\u5b9a\n            if line == 'EOS\\n':\n\n                # Chunk\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\n                if len(chunks) > 0:\n\n                    # chunks\u3092key\u3067\u30bd\u30fc\u30c8\u3057\u3001value\u306e\u307f\u53d6\u308a\u51fa\u3057\n                    sorted_tuple = sorted(chunks.items(), key=lambda x: x[0])\n                    yield list(zip(*sorted_tuple))[1]\n                    chunks.clear()\n\n                else:\n                    yield []\n\n            # \u5148\u982d\u304c*\u306e\u884c\u306f\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u306a\u306e\u3067\u3001Chunk\u3092\u4f5c\u6210\n            elif line[0] == '*':\n\n                # Chunk\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u3068\u4fc2\u308a\u5148\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u53d6\u5f97\n                cols = line.split(' ')\n                idx = int(cols[1])\n                dst = int(re.search(r'(.*?)D', cols[2]).group(1))\n\n                # Chunk\u3092\u751f\u6210\uff08\u306a\u3051\u308c\u3070\uff09\u3057\u3001\u4fc2\u308a\u5148\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u30bb\u30c3\u30c8\n                if idx not in chunks:\n                    chunks[idx] = Chunk()\n                chunks[idx].dst = dst\n\n                # \u4fc2\u308a\u5148\u306eChunk\u3092\u751f\u6210\uff08\u306a\u3051\u308c\u3070\uff09\u3057\u3001\u4fc2\u308a\u5143\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u8ffd\u52a0\n                if dst != -1:\n                    if dst not in chunks:\n                        chunks[dst] = Chunk()\n                    chunks[dst].srcs.append(idx)\n\n            # \u305d\u308c\u4ee5\u5916\u306e\u884c\u306f\u5f62\u614b\u7d20\u89e3\u6790\u7d50\u679c\u306a\u306e\u3067\u3001Morph\u3092\u4f5c\u308aChunk\u306b\u8ffd\u52a0\n            else:\n\n                # \u8868\u5c64\u5f62\u306ftab\u533a\u5207\u308a\u3001\u305d\u308c\u4ee5\u5916\u306f','\u533a\u5207\u308a\u3067\u30d0\u30e9\u3059\n                cols = line.split('\\t')\n                res_cols = cols[1].split(',')\n\n                # Morph\u4f5c\u6210\u3001\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\n                chunks[idx].morphs.append(\n                    Morph(\n                        cols[0],        # surface\n                        res_cols[6],    # base\n                        res_cols[0],    # pos\n                        res_cols[1]     # pos1\n                    )\n                )\n\n        raise StopIteration\n\n\n# \u4fc2\u308a\u53d7\u3051\u89e3\u6790\nparse_neko()\n\n# 1\u6587\u305a\u3064\u30ea\u30b9\u30c8\u4f5c\u6210\nfor i, chunks in enumerate(neco_lines(), 1):\n\n    # 8\u6587\u76ee\u3092\u8868\u793a\n    if i == 8:\n        for j, chunk in enumerate(chunks):\n            print('[{}]{}'.format(j, chunk))\n        break\n\n\n\n\u5b9f\u884c\u7d50\u679c\uff1a\n\u300c\u4fc2\u308a\u5148\u3092\u8868\u793a\u305b\u3088\u300d\u3068\u3044\u3046\u554f\u984c\u3067\u3059\u304c\u3001Chunk\u30af\u30e9\u30b9\u306e\u5b9f\u88c5\u78ba\u8a8d\u3082\u517c\u306d\u3066\u4fc2\u308a\u5143\u3082\u8868\u793a\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u7aef\u672b\n[0]\u543e\u8f29\u306f    srcs[]  dst[5]\n[1]\u3053\u3053\u3067    srcs[]  dst[2]\n[2]\u59cb\u3081\u3066    srcs[1] dst[3]\n[3]\u4eba\u9593\u3068\u3044\u3046  srcs[2] dst[4]\n[4]\u3082\u306e\u3092    srcs[3] dst[5]\n[5]\u898b\u305f\u3002    srcs[0, 4]  dst[-1]\n\n\n\nCaboCha\u306e\u89e3\u6790\u7d50\u679c\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\nCaboCha\u306b\u3088\u308b\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u306f\u3001\u5f62\u614b\u7d20\u89e3\u6790\u7d50\u679c\u306b\u5bfe\u3057\u3066*\u3067\u59cb\u307e\u308b\u884c\u304c\u633f\u5165\u3055\u308c\u3066\u3001\u305d\u3053\u306b\u4fc2\u308a\u53d7\u3051\u306e\u89e3\u6790\u7d50\u679c\u304c\u51fa\u529b\u3055\u308c\u308b\u5f62\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u306e\u4f8b\n* 3 5D 1/2 0.656580\n\n\n\u3053\u306e\u884c\u306f\u7a7a\u767d\u533a\u5207\u308a\u3067\u3001\u6b21\u306e\u5185\u5bb9\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\n\n\u30ab\u30e9\u30e0\n\u610f\u5473\n\n\n\n\n1\n\u5148\u982d\u30ab\u30e9\u30e0\u306f*\u3002\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3059\u3002\n\n\n2\n\u6587\u7bc0\u756a\u53f7\uff080\u304b\u3089\u59cb\u307e\u308b\u6574\u6570\uff09\n\n\n3\n\u4fc2\u308a\u5148\u756a\u53f7\uff0bD\n\n\n\n4\n\u4e3b\u8f9e/\u6a5f\u80fd\u8a9e\u306e\u4f4d\u7f6e\u3068\u4efb\u610f\u306e\u500b\u6570\u306e\u7d20\u6027\u5217\n\n\n5\n\u4fc2\u308a\u95a2\u4fc2\u306e\u30b9\u30b3\u30a2\u3002\u4fc2\u308a\u3084\u3059\u3055\u306e\u5ea6\u5408\u3067\u3001\u4e00\u822c\u306b\u5927\u304d\u306a\u5024\u307b\u3069\u4fc2\u308a\u3084\u3059\u3044\u3002\n\n\n\n\u4eca\u56de\u306e\u554f\u984c\u3067\u4f7f\u3063\u3066\u3044\u308b\u306e\u306f\u30ab\u30e9\u30e0\u306e2\u30683\u306e\u307f\u3067\u3059\u3002\u89e3\u6790\u7d50\u679c\u306e\u8a73\u7d30\u306f\u30aa\u30d5\u30a3\u30b7\u30e3\u30eb\u30b5\u30a4\u30c8CaboCha/\u5357\u74dc: Yet Another Japanese Dependency Structure Analyzer\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\nChunk\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\u9806\u5e8f\n\u4eca\u56de\u60a9\u3093\u3060\u306e\u306f\u3001Chunk\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\u9806\u5e8f\u3067\u3059\u3002\n\u3068\u308a\u3042\u3048\u305aneko.txt.cabocha\u30921\u884c\u305a\u3064\u8aad\u3093\u3067\u3044\u3063\u3066\u3001Chunk\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u683c\u7d0d\u3059\u308b\u60c5\u5831\u304c1\u3064\u3067\u3082\u53d6\u5f97\u3067\u304d\u305f\u6642\u70b9\u3067\u8a72\u5f53Chunk\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3001\u3059\u3067\u306b\u4f5c\u3063\u3066\u3042\u3063\u305f\u5834\u5408\u306f\u305d\u3053\u306b\u60c5\u5831\u3092\u8ffd\u52a0\u3059\u308b\u3001\u3068\u3044\u3046\u6d41\u308c\u3067\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002Chunk\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\u9806\u5e8f\u306f\u51fa\u73fe\u9806\u3067\u306f\u306a\u304f\u3001\u3055\u3089\u306b\u8f9e\u66f8\u3082\u4f7f\u3063\u3066\u3044\u3066\u4e2d\u8eab\u304c\u9806\u4e0d\u540c\u306a\u306e\u3067\u3001\u6700\u5f8c\u306b\u6587\u7bc0\u756a\u53f7\u3067\u30bd\u30fc\u30c8\u3057\u3066\u53d6\u308a\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\n\u4f5c\u3063\u3066\u304b\u3089\u601d\u3044\u307e\u3057\u305f\u304c\u3001\u307e\u305a\u4fc2\u308a\u53d7\u3051\u306e\u60c5\u5831\u306a\u3057\u3067\u6587\u7bc0\u756a\u53f7\u9806\u306bChunk\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3001\u5f8c\u304b\u3089\u4fc2\u308a\u53d7\u3051\u306e\u60c5\u5831\u3092\u30bb\u30c3\u30c8\u3057\u3066\u3044\u3063\u305f\u65b9\u304c\u5b9f\u884c\u52b9\u7387\u306f\u826f\u304b\u3063\u305f\u304b\u3082\u77e5\u308c\u307e\u305b\u3093\u3002\n\u3000\n42\u672c\u76ee\u306e\u30ce\u30c3\u30af\u306f\u4ee5\u4e0a\u3067\u3059\u3002\u8aa4\u308a\u306a\u3069\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u307e\u3059\u3068\u5e78\u3044\u3067\u3059\u3002\n\n\u5b9f\u884c\u7d50\u679c\u306b\u306f\u3001100\u672c\u30ce\u30c3\u30af\u3067\u7528\u3044\u308b\u30b3\u30fc\u30d1\u30b9\u30fb\u30c7\u30fc\u30bf\u3067\u914d\u5e03\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306e\u4e00\u90e8\u304c\u542b\u307e\u308c\u307e\u3059\u3002\u3053\u306e\u7b2c5\u7ae0\u3067\u7528\u3044\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306f\u9752\u7a7a\u6587\u5eab\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u590f\u76ee\u6f31\u77f3\u306e\u9577\u7de8\u5c0f\u8aac\u300e\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300f\u304c\u5143\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n[\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af 2015](http://www.cl.ecei.tohoku.ac.jp/nlp100/)\u306e\u6311\u6226\u8a18\u9332\u3067\u3059\u3002\u74b0\u5883\u306fUbuntu 16.04 LTS \uff0b Python 3.5.2 \\:\\: Anaconda 4.1.1 (64-bit)\u3067\u3059\u3002\u904e\u53bb\u306e\u30ce\u30c3\u30af\u306e\u4e00\u89a7\u306f[\u3053\u3061\u3089](http://qiita.com/segavvy/items)\u304b\u3089\u3069\u3046\u305e\u3002\n\n## \u7b2c5\u7ae0: \u4fc2\u308a\u53d7\u3051\u89e3\u6790\n>\u590f\u76ee\u6f31\u77f3\u306e\u5c0f\u8aac\u300e\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300f\u306e\u6587\u7ae0\uff08neko.txt\uff09\u3092CaboCha\u3092\u4f7f\u3063\u3066\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u3057\uff0c\u305d\u306e\u7d50\u679c\u3092neko.txt.cabocha\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u305b\u3088\uff0e\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u3044\u3066\uff0c\u4ee5\u4e0b\u306e\u554f\u306b\u5bfe\u5fdc\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u88c5\u305b\u3088\uff0e\n\n###41. \u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u306e\u8aad\u307f\u8fbc\u307f\uff08\u6587\u7bc0\u30fb\u4fc2\u308a\u53d7\u3051\uff09\n>40\u306b\u52a0\u3048\u3066\uff0c\u6587\u7bc0\u3092\u8868\u3059\u30af\u30e9\u30b9Chunk\u3092\u5b9f\u88c5\u305b\u3088\uff0e\u3053\u306e\u30af\u30e9\u30b9\u306f\u5f62\u614b\u7d20\uff08Morph\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u306e\u30ea\u30b9\u30c8\uff08morphs\uff09\uff0c\u4fc2\u308a\u5148\u6587\u7bc0\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\uff08dst\uff09\uff0c\u4fc2\u308a\u5143\u6587\u7bc0\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u306e\u30ea\u30b9\u30c8\uff08srcs\uff09\u3092\u30e1\u30f3\u30d0\u5909\u6570\u306b\u6301\u3064\u3053\u3068\u3068\u3059\u308b\uff0e\u3055\u3089\u306b\uff0c\u5165\u529b\u30c6\u30ad\u30b9\u30c8\u306eCaboCha\u306e\u89e3\u6790\u7d50\u679c\u3092\u8aad\u307f\u8fbc\u307f\uff0c\uff11\u6587\u3092Chunk\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30b9\u30c8\u3068\u3057\u3066\u8868\u73fe\u3057\uff0c8\u6587\u76ee\u306e\u6587\u7bc0\u306e\u6587\u5b57\u5217\u3068\u4fc2\u308a\u5148\u3092\u8868\u793a\u305b\u3088\uff0e\u7b2c5\u7ae0\u306e\u6b8b\u308a\u306e\u554f\u984c\u3067\u306f\uff0c\u3053\u3053\u3067\u4f5c\u3063\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u6d3b\u7528\u305b\u3088\uff0e\n\n####\u51fa\u6765\u4e0a\u304c\u3063\u305f\u30b3\u30fc\u30c9\uff1a\n\n```python:main.py\n# coding: utf-8\nimport CaboCha\nimport re\n\nfname = 'neko.txt'\nfname_parsed = 'neko.txt.cabocha'\n\n\ndef parse_neko():\n\t'''\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u3092\u4fc2\u308a\u53d7\u3051\u89e3\u6790\n\t\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d(neko.txt)\u3092\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u3057\u3066neko.txt.cabocha\u306b\u4fdd\u5b58\u3059\u308b\n\t'''\n\twith open(fname) as data_file, \\\n\t\t\topen(fname_parsed, mode='w') as out_file:\n\n\t\tcabocha = CaboCha.Parser()\n\t\tfor line in data_file:\n\t\t\tout_file.write(\n\t\t\t\tcabocha.parse(line).toString(CaboCha.FORMAT_LATTICE)\n\t\t\t)\n\n\nclass Morph:\n\t'''\n\t\u5f62\u614b\u7d20\u30af\u30e9\u30b9\n\t\u8868\u5c64\u5f62\uff08surface\uff09\u3001\u57fa\u672c\u5f62\uff08base\uff09\u3001\u54c1\u8a5e\uff08pos\uff09\u3001\u54c1\u8a5e\u7d30\u5206\u985e1\uff08pos1\uff09\u3092\n\t\u30e1\u30f3\u30d0\u30fc\u5909\u6570\u306b\u6301\u3064\n\t'''\n\tdef __init__(self, surface, base, pos, pos1):\n\t\t'''\u521d\u671f\u5316'''\n\t\tself.surface = surface\n\t\tself.base = base\n\t\tself.pos = pos\n\t\tself.pos1 = pos1\n\n\tdef __str__(self):\n\t\t'''\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u6587\u5b57\u5217\u8868\u73fe'''\n\t\treturn 'surface[{}]\\tbase[{}]\\tpos[{}]\\tpos1[{}]'\\\n\t\t\t.format(self.surface, self.base, self.pos, self.pos1)\n\n\nclass Chunk:\n\t'''\n\t\u6587\u7bc0\u30af\u30e9\u30b9\n\t\u5f62\u614b\u7d20\uff08Morph\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u306e\u30ea\u30b9\u30c8\uff08morphs\uff09\u3001\u4fc2\u308a\u5148\u6587\u7bc0\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\uff08dst\uff09\u3001\n\t\u4fc2\u308a\u5143\u6587\u7bc0\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u306e\u30ea\u30b9\u30c8\uff08srcs\uff09\u3092\u30e1\u30f3\u30d0\u30fc\u5909\u6570\u306b\u6301\u3064\n\t'''\n\n\tdef __init__(self):\n\t\t'''\u521d\u671f\u5316'''\n\t\tself.morphs = []\n\t\tself.srcs = []\n\t\tself.dst = -1\n\n\tdef __str__(self):\n\t\t'''\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u6587\u5b57\u5217\u8868\u73fe'''\n\t\tsurface = ''\n\t\tfor morph in self.morphs:\n\t\t\tsurface += morph.surface\n\t\treturn '{}\\tsrcs{}\\tdst[{}]'.format(surface, self.srcs, self.dst)\n\n\ndef neco_lines():\n\t'''\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u306e\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n\t\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u306e\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u3092\u9806\u6b21\u8aad\u307f\u8fbc\u3093\u3067\u3001\n\t1\u6587\u305a\u3064Chunk\u30af\u30e9\u30b9\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\n\n\t\u623b\u308a\u5024\uff1a\n\t1\u6587\u306eChunk\u30af\u30e9\u30b9\u306e\u30ea\u30b9\u30c8\n\t'''\n\twith open(fname_parsed) as file_parsed:\n\n\t\tchunks = dict()\t\t# idx\u3092key\u306bChunk\u3092\u683c\u7d0d\n\t\tidx = -1\n\n\t\tfor line in file_parsed:\n\n\t\t\t# 1\u6587\u306e\u7d42\u4e86\u5224\u5b9a\n\t\t\tif line == 'EOS\\n':\n\n\t\t\t\t# Chunk\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\n\t\t\t\tif len(chunks) > 0:\n\n\t\t\t\t\t# chunks\u3092key\u3067\u30bd\u30fc\u30c8\u3057\u3001value\u306e\u307f\u53d6\u308a\u51fa\u3057\n\t\t\t\t\tsorted_tuple = sorted(chunks.items(), key=lambda x: x[0])\n\t\t\t\t\tyield list(zip(*sorted_tuple))[1]\n\t\t\t\t\tchunks.clear()\n\n\t\t\t\telse:\n\t\t\t\t\tyield []\n\n\t\t\t# \u5148\u982d\u304c*\u306e\u884c\u306f\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u306a\u306e\u3067\u3001Chunk\u3092\u4f5c\u6210\n\t\t\telif line[0] == '*':\n\n\t\t\t\t# Chunk\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u3068\u4fc2\u308a\u5148\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u53d6\u5f97\n\t\t\t\tcols = line.split(' ')\n\t\t\t\tidx = int(cols[1])\n\t\t\t\tdst = int(re.search(r'(.*?)D', cols[2]).group(1))\n\n\t\t\t\t# Chunk\u3092\u751f\u6210\uff08\u306a\u3051\u308c\u3070\uff09\u3057\u3001\u4fc2\u308a\u5148\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u30bb\u30c3\u30c8\n\t\t\t\tif idx not in chunks:\n\t\t\t\t\tchunks[idx] = Chunk()\n\t\t\t\tchunks[idx].dst = dst\n\n\t\t\t\t# \u4fc2\u308a\u5148\u306eChunk\u3092\u751f\u6210\uff08\u306a\u3051\u308c\u3070\uff09\u3057\u3001\u4fc2\u308a\u5143\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u8ffd\u52a0\n\t\t\t\tif dst != -1:\n\t\t\t\t\tif dst not in chunks:\n\t\t\t\t\t\tchunks[dst] = Chunk()\n\t\t\t\t\tchunks[dst].srcs.append(idx)\n\n\t\t\t# \u305d\u308c\u4ee5\u5916\u306e\u884c\u306f\u5f62\u614b\u7d20\u89e3\u6790\u7d50\u679c\u306a\u306e\u3067\u3001Morph\u3092\u4f5c\u308aChunk\u306b\u8ffd\u52a0\n\t\t\telse:\n\n\t\t\t\t# \u8868\u5c64\u5f62\u306ftab\u533a\u5207\u308a\u3001\u305d\u308c\u4ee5\u5916\u306f','\u533a\u5207\u308a\u3067\u30d0\u30e9\u3059\n\t\t\t\tcols = line.split('\\t')\n\t\t\t\tres_cols = cols[1].split(',')\n\n\t\t\t\t# Morph\u4f5c\u6210\u3001\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\n\t\t\t\tchunks[idx].morphs.append(\n\t\t\t\t\tMorph(\n\t\t\t\t\t\tcols[0],\t\t# surface\n\t\t\t\t\t\tres_cols[6],\t# base\n\t\t\t\t\t\tres_cols[0],\t# pos\n\t\t\t\t\t\tres_cols[1]\t\t# pos1\n\t\t\t\t\t)\n\t\t\t\t)\n\n\t\traise StopIteration\n\n\n# \u4fc2\u308a\u53d7\u3051\u89e3\u6790\nparse_neko()\n\n# 1\u6587\u305a\u3064\u30ea\u30b9\u30c8\u4f5c\u6210\nfor i, chunks in enumerate(neco_lines(), 1):\n\n\t# 8\u6587\u76ee\u3092\u8868\u793a\n\tif i == 8:\n\t\tfor j, chunk in enumerate(chunks):\n\t\t\tprint('[{}]{}'.format(j, chunk))\n\t\tbreak\n```\n\n####\u5b9f\u884c\u7d50\u679c\uff1a\n\n\u300c\u4fc2\u308a\u5148\u3092\u8868\u793a\u305b\u3088\u300d\u3068\u3044\u3046\u554f\u984c\u3067\u3059\u304c\u3001Chunk\u30af\u30e9\u30b9\u306e\u5b9f\u88c5\u78ba\u8a8d\u3082\u517c\u306d\u3066\u4fc2\u308a\u5143\u3082\u8868\u793a\u3057\u3066\u3044\u307e\u3059\u3002\n\n```console:\u7aef\u672b\n[0]\u543e\u8f29\u306f\tsrcs[]\tdst[5]\n[1]\u3053\u3053\u3067\tsrcs[]\tdst[2]\n[2]\u59cb\u3081\u3066\tsrcs[1]\tdst[3]\n[3]\u4eba\u9593\u3068\u3044\u3046\tsrcs[2]\tdst[4]\n[4]\u3082\u306e\u3092\tsrcs[3]\tdst[5]\n[5]\u898b\u305f\u3002\tsrcs[0, 4]\tdst[-1]\n```\n\n###CaboCha\u306e\u89e3\u6790\u7d50\u679c\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\nCaboCha\u306b\u3088\u308b\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u306f\u3001\u5f62\u614b\u7d20\u89e3\u6790\u7d50\u679c\u306b\u5bfe\u3057\u3066`*`\u3067\u59cb\u307e\u308b\u884c\u304c\u633f\u5165\u3055\u308c\u3066\u3001\u305d\u3053\u306b\u4fc2\u308a\u53d7\u3051\u306e\u89e3\u6790\u7d50\u679c\u304c\u51fa\u529b\u3055\u308c\u308b\u5f62\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```console:\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u306e\u4f8b\n* 3 5D 1/2 0.656580\n```\n\n\u3053\u306e\u884c\u306f\u7a7a\u767d\u533a\u5207\u308a\u3067\u3001\u6b21\u306e\u5185\u5bb9\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n| \u30ab\u30e9\u30e0 | \u610f\u5473 |\n|:--------:|--------|\n|1       |\u5148\u982d\u30ab\u30e9\u30e0\u306f`*`\u3002\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3059\u3002        |\n|2      |\u6587\u7bc0\u756a\u53f7\uff080\u304b\u3089\u59cb\u307e\u308b\u6574\u6570\uff09        |\n|3       |\u4fc2\u308a\u5148\u756a\u53f7\uff0b`D`        |\n|4       |\u4e3b\u8f9e/\u6a5f\u80fd\u8a9e\u306e\u4f4d\u7f6e\u3068\u4efb\u610f\u306e\u500b\u6570\u306e\u7d20\u6027\u5217        |\n|5       |\u4fc2\u308a\u95a2\u4fc2\u306e\u30b9\u30b3\u30a2\u3002\u4fc2\u308a\u3084\u3059\u3055\u306e\u5ea6\u5408\u3067\u3001\u4e00\u822c\u306b\u5927\u304d\u306a\u5024\u307b\u3069\u4fc2\u308a\u3084\u3059\u3044\u3002        |\n\n\u4eca\u56de\u306e\u554f\u984c\u3067\u4f7f\u3063\u3066\u3044\u308b\u306e\u306f\u30ab\u30e9\u30e0\u306e2\u30683\u306e\u307f\u3067\u3059\u3002\u89e3\u6790\u7d50\u679c\u306e\u8a73\u7d30\u306f\u30aa\u30d5\u30a3\u30b7\u30e3\u30eb\u30b5\u30a4\u30c8[CaboCha/\u5357\u74dc: Yet Another Japanese Dependency Structure Analyzer](https://taku910.github.io/cabocha/)\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\n\n###Chunk\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\u9806\u5e8f\n\u4eca\u56de\u60a9\u3093\u3060\u306e\u306f\u3001Chunk\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\u9806\u5e8f\u3067\u3059\u3002\n\u3068\u308a\u3042\u3048\u305aneko.txt.cabocha\u30921\u884c\u305a\u3064\u8aad\u3093\u3067\u3044\u3063\u3066\u3001Chunk\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u683c\u7d0d\u3059\u308b\u60c5\u5831\u304c1\u3064\u3067\u3082\u53d6\u5f97\u3067\u304d\u305f\u6642\u70b9\u3067\u8a72\u5f53Chunk\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3001\u3059\u3067\u306b\u4f5c\u3063\u3066\u3042\u3063\u305f\u5834\u5408\u306f\u305d\u3053\u306b\u60c5\u5831\u3092\u8ffd\u52a0\u3059\u308b\u3001\u3068\u3044\u3046\u6d41\u308c\u3067\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002Chunk\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\u9806\u5e8f\u306f\u51fa\u73fe\u9806\u3067\u306f\u306a\u304f\u3001\u3055\u3089\u306b\u8f9e\u66f8\u3082\u4f7f\u3063\u3066\u3044\u3066\u4e2d\u8eab\u304c\u9806\u4e0d\u540c\u306a\u306e\u3067\u3001\u6700\u5f8c\u306b\u6587\u7bc0\u756a\u53f7\u3067\u30bd\u30fc\u30c8\u3057\u3066\u53d6\u308a\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\n\u4f5c\u3063\u3066\u304b\u3089\u601d\u3044\u307e\u3057\u305f\u304c\u3001\u307e\u305a\u4fc2\u308a\u53d7\u3051\u306e\u60c5\u5831\u306a\u3057\u3067\u6587\u7bc0\u756a\u53f7\u9806\u306bChunk\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3001\u5f8c\u304b\u3089\u4fc2\u308a\u53d7\u3051\u306e\u60c5\u5831\u3092\u30bb\u30c3\u30c8\u3057\u3066\u3044\u3063\u305f\u65b9\u304c\u5b9f\u884c\u52b9\u7387\u306f\u826f\u304b\u3063\u305f\u304b\u3082\u77e5\u308c\u307e\u305b\u3093\u3002\n\u3000\n42\u672c\u76ee\u306e\u30ce\u30c3\u30af\u306f\u4ee5\u4e0a\u3067\u3059\u3002\u8aa4\u308a\u306a\u3069\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u307e\u3059\u3068\u5e78\u3044\u3067\u3059\u3002\n<hr>\n\n*\u5b9f\u884c\u7d50\u679c\u306b\u306f\u3001[100\u672c\u30ce\u30c3\u30af\u3067\u7528\u3044\u308b\u30b3\u30fc\u30d1\u30b9\u30fb\u30c7\u30fc\u30bf](http://www.cl.ecei.tohoku.ac.jp/nlp100/#data)\u3067\u914d\u5e03\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306e\u4e00\u90e8\u304c\u542b\u307e\u308c\u307e\u3059\u3002\u3053\u306e\u7b2c5\u7ae0\u3067\u7528\u3044\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306f[\u9752\u7a7a\u6587\u5eab](http://www.aozora.gr.jp)\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u590f\u76ee\u6f31\u77f3\u306e\u9577\u7de8\u5c0f\u8aac\u300e\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300f\u304c\u5143\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002*\n", "tags": ["Python", "Cabocha", "\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af", "\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]}