{"context": "There is a working Tcl/Tk binding for D, but getting it to work in windows is a little tricky. \nIf you are familiar with tkinter in Python, tkd is very easy to start with, since while D is under the family of C-style languages, the syntax is very similar to Python (basically imagine python with braces and semicolons).\nMake sure DUB is available.\n\ndub init {project-name} tkd\nAdd the following to your dub.json.\n\n\n\"lflags\":[\"-L/exet:nt/su:windows\"],\n\"postGenerateCommands-windows-x86\": [   \n    \"copy $TCLTK_PACKAGE_DIR\\\\dist\\\\x86\\\\tcl86t.dll build\\\\tcl86t.dll /y\",   \n    \"copy $TCLTK_PACKAGE_DIR\\\\dist\\\\x86\\\\tk86t.dll build\\\\tk86t.dll /y\",    \n    \"xcopy $TCLTK_PACKAGE_DIR\\\\dist\\\\library build\\\\library /i /e /y\",   \n],\n\nNote that I'm using \"targetPath\":\"./build\",\nThe additional linker flags is to prevent the console window from popping up when you start the program.\nIf done correctly you should have the following folder structure.\nbuild\n\u251c\u2500\u2500 app.exe\n\u251c\u2500\u2500 tcl86t.dll\n\u251c\u2500\u2500 tk86t.dll\n\u2514\u2500\u2500 library\n    \u2514\u2500\u2500 *.tcl files\n\nA sample program can be found below.\n\nimport tkd.tkdapplication;                               // Import Tkd.\n\nclass Application : TkdApplication                       // Extend TkdApplication.\n{\n    private void exitCommand(CommandArgs args)           // Create a callback.\n    {\n        this.exit();                                     // Exit the application.\n    }\n\n    override protected void initInterface()              // Initialise user interface.\n    {\n        auto frame = new Frame(2, ReliefStyle.groove)    // Create a frame.\n            .pack(10);                                   // Place the frame.\n\n        auto label = new Label(frame, \"Hello World!\")    // Create a label.\n            .pack(10);                                   // Place the label.\n\n        auto exitButton = new Button(frame, \"Exit\")      // Create a button.\n            .setCommand(&this.exitCommand)               // Use the callback.\n            .pack(10);                                   // Place the button.\n    }\n}\n\nvoid main(string[] args)\n{\n    auto app = new Application();                        // Create the application.\n    app.run();                                           // Run the application.\n}\n\nYou should see this:\n\nwithout the console window.\nThere is a working [Tcl/Tk binding for D](https://github.com/nomad-software/tkd), but getting it to work in windows is a little tricky. \n\nIf you are familiar with tkinter in Python, tkd is very easy to start with, since while D is under the family of C-style languages, the syntax is very similar to Python (basically imagine python with braces and semicolons).\n\nMake sure DUB is available.\n\n1. `dub init {project-name} tkd`\n2. Add the following to your `dub.json`.  \n\n```\n\"lflags\":[\"-L/exet:nt/su:windows\"],\n\"postGenerateCommands-windows-x86\": [   \n    \"copy $TCLTK_PACKAGE_DIR\\\\dist\\\\x86\\\\tcl86t.dll build\\\\tcl86t.dll /y\",   \n    \"copy $TCLTK_PACKAGE_DIR\\\\dist\\\\x86\\\\tk86t.dll build\\\\tk86t.dll /y\",    \n    \"xcopy $TCLTK_PACKAGE_DIR\\\\dist\\\\library build\\\\library /i /e /y\",   \n],\n```\nNote that I'm using `\"targetPath\":\"./build\",`\n\nThe additional linker flags is to prevent the console window from popping up when you start the program.\n\nIf done correctly you should have the following folder structure.\n\n```\nbuild\n\u251c\u2500\u2500 app.exe\n\u251c\u2500\u2500 tcl86t.dll\n\u251c\u2500\u2500 tk86t.dll\n\u2514\u2500\u2500 library\n    \u2514\u2500\u2500 *.tcl files\n```\n\nA sample program can be found below.\n\n```d\n\nimport tkd.tkdapplication;                               // Import Tkd.\n\nclass Application : TkdApplication                       // Extend TkdApplication.\n{\n    private void exitCommand(CommandArgs args)           // Create a callback.\n    {\n        this.exit();                                     // Exit the application.\n    }\n\n    override protected void initInterface()              // Initialise user interface.\n    {\n        auto frame = new Frame(2, ReliefStyle.groove)    // Create a frame.\n            .pack(10);                                   // Place the frame.\n\n        auto label = new Label(frame, \"Hello World!\")    // Create a label.\n            .pack(10);                                   // Place the label.\n\n        auto exitButton = new Button(frame, \"Exit\")      // Create a button.\n            .setCommand(&this.exitCommand)               // Use the callback.\n            .pack(10);                                   // Place the button.\n    }\n}\n\nvoid main(string[] args)\n{\n    auto app = new Application();                        // Create the application.\n    app.run();                                           // Run the application.\n}\n```\n\nYou should see this:\n![](http://i.imgur.com/XyPCDCS.png)\n\nwithout the console window.\n\n", "tags": ["dlang", "Tk", "Tcl"]}