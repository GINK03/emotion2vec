{"tags": ["Swift", "Realm", "Alamofire"], "context": " More than 1 year has passed since last update.API\u3092\u4f7f\u3046\u3068\u30ad\u30e3\u30c3\u30b7\u30e5\u65b9\u6cd5\u8003\u3048\u305f\u308a\u4f3c\u3066\u308b\u3051\u3069\u5fae\u5999\u306b\u4ed8\u5c5e\u30c7\u30fc\u30bf\u304c\u9055\u3046\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u3042\u3063\u3066\u8f9b\u304b\u3063\u305f\u308a\u3057\u307e\u3059\u3002\n\u300c\u30ed\u30fc\u30ab\u30eb\u306b\u30c7\u30fc\u30bf\u304c\u5168\u90e8\u3042\u3063\u3066\u30a2\u30d7\u30ea\u306eView\u4f5c\u308b\u6642\u306f\u305d\u3053\u304b\u3089\u53d6\u308b\u5f62\u306b\u3067\u304d\u308c\u3070\u697d\u306a\u306e\u306b\u3002\u300d\u3068\u601d\u3044\u8868\u984c\u306e\u4ed5\u7d44\u307f\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u4eca\u56de\u3084\u308b\u4e8b\nAlamofire\u3067\u30b5\u30fc\u30d0\u30fc\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3001ObjectMapper\u3067\u30ec\u30b9\u30dd\u30f3\u30b9\u3092Realm\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5f62\u5f0f\u306b\u5909\u63db\u30fb\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\u305d\u306e\u969b\u3001\u8907\u6570\u306eAPI\u3092\u53e9\u304f\u306e\u3067SwiftTask\u3067\u305d\u308c\u3089\u3092\u5236\u5fa1\u3057\u307e\u3059\u3002\n\n\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\n\u30d6\u30ed\u30b0\u306e\u8a18\u4e8b\u4e00\u89a7\u3092\u8868\u793a\u3059\u308b\u30a2\u30d7\u30ea\u3092\u60f3\u5b9a\u3057\u307e\u3059\u3002\n\u30c6\u30fc\u30d6\u30eb\u306fCategory\u3068Entry\u306e2\u3064\u3092\u4f5c\u308a\u307e\u3059\u3002\n\u25a0 Category\u30c6\u30fc\u30d6\u30eb\nid: Int\nname: String\n\n\u25a0 Entry\u30c6\u30fc\u30d6\u30eb\nid: Int\ntitle: String\nbody: String\ncategoryId: Int\ncreatedAt: NSDate\nupdatedAt: NSDate\n\n\n\u30b5\u30fc\u30d0\u30fc\u304b\u3089\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\n\n/api/v1/categories\n{\n  categories: [{\n    \"id\": 1\n    \"name\": \"Swift\"\n  },{\n    \"id\": 2\n    \"name\": \"Rails\"\n  }]\n}\n\n\n\n/api/v1/entries\n{\n  entries: [{\n    \"id\": 1,\n    \"title\": \"Swift\u306eOptional\",\n    \"body\": \"\u672c\u6587\",\n    \"category_id\": 1,\n    \"updated_at\": \"2015-11-04T00:00:00.000+09:00\",\n    \"created_at\": \"2015-11-04T00:00:00.000+09:00\"\n  },{\n    \"id\": 2,\n    \"title\": \"Swift\u306e\u914d\u5217\u3068\u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\",\n    \"body\": \"\u672c\u6587\",\n    \"category_id\": 1,\n    \"updated_at\": \"2015-11-03T00:00:00.000+09:00\",\n    \"created_at\": \"2015-11-03T00:00:00.000+09:00\"\n  },{\n    \"id\": 3,\n    \"title\": \"jbuilder\u306e\u66f8\u304d\u65b9\u4e00\u89a7\",\n    \"body\": \"\u672c\u6587\",\n    \"category_id\": 2,\n    \"updated_at\": \"2015-11-02T00:00:00.000+09:00\",\n    \"created_at\": \"2015-11-02T00:00:00.000+09:00\"\n  }\n}\n\n\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u30e9\u30a4\u30d6\u30e9\u30ea\u306fcocoapods\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\nPodfile\nuse_frameworks!\n\npod 'Alamofire'\npod 'ObjectMapper'\npod 'RealmSwift'\npod 'SwiftTask'\n\n\n\n\u30ed\u30fc\u30ab\u30eb\u306eModel\nRealm\u306eModel\u306f\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3059\u3002\nObjectMapper\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u3067\u3042\u308bMappable\u3082\u6301\u305f\u305b\u307e\u3059\u3002\n\ncategory.swift\nimport UIKit\nimport RealmSwift\nimport ObjectMapper\n\nclass Category: Object, Mappable {\n    dynamic var id = 0\n    dynamic var name = \"\"\n\n    override static func primaryKey() -> String? {\n        return \"id\"\n    }\n\n    required convenience init?(_ map: Map) {\n        self.init()\n        mapping(map)\n    }\n\n    func mapping(map: Map) {\n        id   <- map[\"id\"]\n        name <- map[\"name\"]\n    }\n}\n\n\n\nentry.swift\nimport UIKit\nimport RealmSwift\nimport ObjectMapper\n\nclass Entry: Object {\n    dynamic var id = 0\n    dynamic var title = \"\"\n    dynamic var body = \"\"\n    dynamic var categoryId = 0\n    dynamic var updatedAt = NSDate()\n    dynamic var createdAt = NSDate()\n\n    override static func primaryKey() -> String? {\n        return \"id\"\n    }\n\n    required convenience init?(_ map: Map) {\n        self.init()\n        mapping(map)\n    }\n\n    func mapping(map: Map) {\n        let formatter = NSDateFormatter()\n        formatter.dateFormat = \"YYYY-MM-dd'T'HH:mm:ss.SZ\"\n        let dateFormatterTransform = DateFormatterTransform(dateFormatter: formatter)\n\n        id         <- map[\"id\"]\n        title      <- map[\"title\"]\n        body       <- map[\"body\"]\n        categoryId <- map[\"category_id\"]\n        updatedAt  <- (map[\"updated_at\"], dateFormatterTransform)\n        createdAt  <- (map[\"created_at\"], dateFormatterTransform)\n    }\n}\n\n\n\n\u901a\u4fe1\u30fbDB\u3078\u306e\u4fdd\u5b58\u51e6\u7406\nAlamofire\u3067API\u3092\u53e9\u3044\u3066Realm\u306b\u4fdd\u5b58\u3059\u308b\u51e6\u7406\u3092\u66f8\u304d\u307e\u3059\u3002\n\nCategoryEndPoint.swift\nimport UIKit\nimport Alamofire\nimport ObjectMapper\nimport RealmSwift\n\nclass CategoryEndPoint {\n    func fetch() {\n        Alamofire.request(.GET, \"http://localhost:3000/api/v1/categories\").responseJSON { response in\n            guard let json = response.result.value as? Dictionary<String, Array<AnyObject>> else {\n                return\n            }\n\n            json[\"categories\"]?.forEach {\n                guard let category = Mapper<Category>().map($0) else {\n                    return\n                }\n\n                do {\n                    let realm = try Realm()\n                    try realm.write {\n                        // add:update:\u306f\u540c\u3058ID\u306e\u3082\u306e\u304c\u3042\u308c\u3070Update\u3001\u306a\u3051\u308c\u3070Insert\u3057\u3066\u304f\u308c\u308b\u30e1\u30bd\u30c3\u30c9\n                        realm.add(category, update: true)\n                    }\n                } catch {}\n            }\n        }\n    }\n}\n\n\n\nEntryEndPoint.swift\nimport UIKit\nimport Alamofire\nimport ObjectMapper\nimport RealmSwift\n\nclass EntryEndPoint {\n    func fetch() {\n        Alamofire.request(.GET, \"http://localhost:3000/api/v1/entries\").responseJSON { response in\n            guard let json = response.result.value as? Dictionary<String, Array<AnyObject>> else {\n                return\n            }\n\n            json[\"entries\"]?.forEach {\n                guard let entry = Mapper<Category>().map($0) else {\n                    return\n                }\n\n                do {\n                    let realm = try Realm()\n                    try realm.write {\n                        realm.add(entry, update: true)\n                    }\n                } catch {}\n            }\n        }\n    }\n}\n\n\nAppDelegate\u3092\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3051\u3070\u30a2\u30d7\u30ea\u8d77\u52d5\u6642\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u66f4\u65b0\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\nAppDelegate.swift\nimport UIKit\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n    var window: UIWindow?\n\n    func applicationDidBecomeActive(application: UIApplication) {\n        CategoryEndPoint().fetch()\n        EntryEndPoint().fetch()\n    }\n}\n\n\n\nSwiftTask\u3067\u30c7\u30fc\u30bf\u66f4\u65b0\u304c\u7d42\u308f\u3063\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u306e\u51e6\u7406\u3092\u66f8\u304f\n\u4eca\u306e\u307e\u307e\u3060\u3068\u5168\u30c7\u30fc\u30bf\u3092\u66f4\u65b0\u5f8c\u306e\u51e6\u7406\u3092\u66f8\u3051\u307e\u305b\u3093\u3002\nSwiftTask\u3092\u4f7f\u3063\u3066\u5168\u3066\u306e\u30c7\u30fc\u30bf\u66f4\u65b0\u304c\u7d42\u308f\u3063\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u51e6\u7406\u3092\u66f8\u3051\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\nCategoryEndPoint\u3068EntryEndPoint\u306efetch\u3092\u4fee\u6b63\u3057\u3066Task\u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9\u306b\u3057\u307e\u3059\u3002\n\nCategoryEndPoint.swift\nimport UIKit\nimport Alamofire\nimport ObjectMapper\nimport RealmSwift\nimport SwiftTask\n\nclass CategoryEndPoint {\n    func fetchTask() -> Task<Float, String, NSError?> {\n        return Task<Float, String, NSError?> { progress, fulfill, reject, configure in\n            Alamofire.request(.GET, \"http://localhost:3000/api/v1/categories\").responseJSON { response in\n                guard let json = response.result.value as? Dictionary<String, Array<AnyObject>> else {\n                    reject(nil)\n                    return\n                }\n\n                json[\"categories\"]?.forEach {\n                    guard let category = Mapper<Category>().map($0) else {\n                        return\n                    }\n\n                    do {\n                        let realm = try Realm()\n                        try realm.write {\n                            realm.add(category, update: true)\n                        }\n                    } catch {}\n                }\n                fulfill(\"SUCCESS\")\n            }\n        }\n    }\n}\n\n\n\nEntryEndPoint.swift\nimport UIKit\nimport Alamofire\nimport ObjectMapper\nimport RealmSwift\nimport SwiftTask\n\nclass EntryEndPoint {\n    func fetchTask() -> Task<Float, String, NSError?> {\n        return Task<Float, String, NSError?> { progress, fulfill, reject, configure in\n            Alamofire.request(.GET, \"http://localhost:3000/api/v1/entries\").responseJSON { response in\n                guard let json = response.result.value as? Dictionary<String, Array<AnyObject>> else {\n                    reject(nil)\n                    return\n                }\n\n                json[\"entries\"]?.forEach {\n                    guard let entry = Mapper<Category>().map($0) else {\n                        return\n                    }\n\n                    do {\n                        let realm = try Realm()\n                        try realm.write {\n                            realm.add(entry, update: true)\n                        }\n                    } catch {}\n                }\n                fulfill(\"SUCCESS\")\n            }\n        }\n    }\n}\n\n\nAppDelegate\u306fSwiftTask\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u306e\u66f4\u65b0\u3092\u884c\u3046\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\nAppDelegate.swift\nimport UIKit\nimport SwiftTask\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n    var window: UIWindow?\n\n    func applicationDidBecomeActive(application: UIApplication) {\n        resetCache()\n    }\n}\n\nextension AppDelegate {\n    private func resetCache() {\n        let tasks = [CategoryEndPoint().fetchTask(), EntryEndPoint().fetchTask()]\n\n        Task.all(tasks).success { _ in\n            // \u5168\u90e8\u306e\u901a\u4fe1\u304c\u5b8c\u4e86\u3057\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u3053\u3053\u306b\u6765\u308b\n            }.failure { _ in\n                // \u3069\u308c\u304b\u306e\u51e6\u7406\u304c\u5931\u6557\u3057\u305f\u3089\u3053\u3053\u306b\u6765\u308b\n        }\n    }\n}\n\n\n\n\u30a2\u30d7\u30ea\u4e0a\u3067\u30c7\u30fc\u30bf\u3092\u53c2\u7167\u3059\u308b\n\u30a2\u30d7\u30ea\u304b\u3089\u306fRealm\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\nRealm\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u306e\u3067\u691c\u7d22\u3084\u30bd\u30fc\u30c8\u3082\u7c21\u5358\u306b\u884c\u306a\u3048\u307e\u3059\u3002\n\nViewController.swift\nimport UIKit\nimport RealmSwift\n\nclass ViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        do {\n            let realm = try Realm()\n            print(realm.objects(Category)) // \u30ab\u30c6\u30b4\u30ea\u30fc\u4e00\u89a7\u3092\u53d6\u5f97\n        } catch {}\n    }\n}\n\n\n\n\u30b5\u30fc\u30d0\u30fc\u5074\u3067\u30c7\u30fc\u30bf\u304c\u6d88\u3055\u308c\u308b\u5834\u5408\n\u4eca\u306e\u5b9f\u88c5\u3067\u306f\u30b5\u30fc\u30d0\u30fc\u5074\u3067\u524a\u9664\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u691c\u77e5\u3067\u304d\u307e\u305b\u3093\u3002\n\u30b5\u30fc\u30d0\u30fc\u5074\u3067\u30c7\u30fc\u30bf\u3092\u524a\u9664\u3059\u308b\u4e8b\u304c\u3042\u308b\u3001\u5834\u5408\u306fAPI\u3092\u53e9\u3044\u305f\u5f8c\u306b\u4e00\u5ea6\u30ed\u30fc\u30ab\u30eb\u306e\u30c7\u30fc\u30bf\u3092\u5168\u524a\u9664\u3059\u308b\u65b9\u304c\u826f\u3044\u3067\u3059\u3002\n// \u4e00\u5ea6\u5168\u4ef6\u524a\u9664\u3059\u308b\ndo {\n    let realm = try Realm()\n    try realm.write {\n        realm.objects(Category).forEach { realm.delete($0) }\n    }\n} catch {}\n\njson[\"categories\"]?.forEach {\n    guard let category = Mapper<Category>().map($0) else {\n        return\n    }\n\n    do {\n        let realm = try Realm()\n        try realm.write {\n            realm.add(category)\n        }\n    } catch {}\n}\n\n\n\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u304c\u5909\u66f4\u3055\u308c\u305f\u6642\n\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u304c\u5909\u308f\u3063\u305f\u6642\u306f\u8a72\u5f53Model\u3092\u5909\u66f4\u3057\u3066Realm.Configuration(schemaVersion: 1)\u306eschemaVersion\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u66f4\u65b0\u3059\u308b\u3060\u3051\u3067\u5bfe\u5fdc\u3067\u304d\u307e\u3059\u3002\nRealm\u306fCoreData\u3068\u6bd4\u3079\u3066\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u304c\u683c\u6bb5\u306b\u697d\u306b\u306a\u3063\u305f\u306e\u304c\u5b09\u3057\u3044\u3067\u3059\u3002\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n    var window: UIWindow?\n\n    func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject : AnyObject]?) -> Bool {\n\n        // \u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u304c\u5909\u308f\u3063\u305f\u3089schemaVersion\u30922\u30013\u3068\u5897\u3084\u3057\u3066\u3044\u3051\u3070\u826f\u3044\n        let config = Realm.Configuration(schemaVersion: 1)\n        Realm.Configuration.defaultConfiguration = config\n\n        return true\n    }\n}\n\n\n\u53c2\u8003URL\nhttp://qiita.com/SatoshiN21/items/d09f9e028c129ef567c1\nAPI\u3092\u4f7f\u3046\u3068\u30ad\u30e3\u30c3\u30b7\u30e5\u65b9\u6cd5\u8003\u3048\u305f\u308a\u4f3c\u3066\u308b\u3051\u3069\u5fae\u5999\u306b\u4ed8\u5c5e\u30c7\u30fc\u30bf\u304c\u9055\u3046\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u3042\u3063\u3066\u8f9b\u304b\u3063\u305f\u308a\u3057\u307e\u3059\u3002\n\u300c\u30ed\u30fc\u30ab\u30eb\u306b\u30c7\u30fc\u30bf\u304c\u5168\u90e8\u3042\u3063\u3066\u30a2\u30d7\u30ea\u306eView\u4f5c\u308b\u6642\u306f\u305d\u3053\u304b\u3089\u53d6\u308b\u5f62\u306b\u3067\u304d\u308c\u3070\u697d\u306a\u306e\u306b\u3002\u300d\u3068\u601d\u3044\u8868\u984c\u306e\u4ed5\u7d44\u307f\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\n## \u4eca\u56de\u3084\u308b\u4e8b\nAlamofire\u3067\u30b5\u30fc\u30d0\u30fc\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3001ObjectMapper\u3067\u30ec\u30b9\u30dd\u30f3\u30b9\u3092Realm\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5f62\u5f0f\u306b\u5909\u63db\u30fb\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\u305d\u306e\u969b\u3001\u8907\u6570\u306eAPI\u3092\u53e9\u304f\u306e\u3067SwiftTask\u3067\u305d\u308c\u3089\u3092\u5236\u5fa1\u3057\u307e\u3059\u3002\n\n## \u30c6\u30fc\u30d6\u30eb\u69cb\u9020\n\u30d6\u30ed\u30b0\u306e\u8a18\u4e8b\u4e00\u89a7\u3092\u8868\u793a\u3059\u308b\u30a2\u30d7\u30ea\u3092\u60f3\u5b9a\u3057\u307e\u3059\u3002\n\u30c6\u30fc\u30d6\u30eb\u306fCategory\u3068Entry\u306e2\u3064\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n```\n\u25a0 Category\u30c6\u30fc\u30d6\u30eb\nid: Int\nname: String\n\n\u25a0 Entry\u30c6\u30fc\u30d6\u30eb\nid: Int\ntitle: String\nbody: String\ncategoryId: Int\ncreatedAt: NSDate\nupdatedAt: NSDate\n```\n\n## \u30b5\u30fc\u30d0\u30fc\u304b\u3089\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\n\n```:/api/v1/categories\n{\n  categories: [{\n    \"id\": 1\n    \"name\": \"Swift\"\n  },{\n    \"id\": 2\n    \"name\": \"Rails\"\n  }]\n}\n```\n\n```:/api/v1/entries\n{\n  entries: [{\n    \"id\": 1,\n    \"title\": \"Swift\u306eOptional\",\n    \"body\": \"\u672c\u6587\",\n    \"category_id\": 1,\n    \"updated_at\": \"2015-11-04T00:00:00.000+09:00\",\n    \"created_at\": \"2015-11-04T00:00:00.000+09:00\"\n  },{\n    \"id\": 2,\n    \"title\": \"Swift\u306e\u914d\u5217\u3068\u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\",\n    \"body\": \"\u672c\u6587\",\n    \"category_id\": 1,\n    \"updated_at\": \"2015-11-03T00:00:00.000+09:00\",\n    \"created_at\": \"2015-11-03T00:00:00.000+09:00\"\n  },{\n    \"id\": 3,\n    \"title\": \"jbuilder\u306e\u66f8\u304d\u65b9\u4e00\u89a7\",\n    \"body\": \"\u672c\u6587\",\n    \"category_id\": 2,\n    \"updated_at\": \"2015-11-02T00:00:00.000+09:00\",\n    \"created_at\": \"2015-11-02T00:00:00.000+09:00\"\n  }\n}\n```\n\n## \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u30e9\u30a4\u30d6\u30e9\u30ea\u306fcocoapods\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\n```rb:Podfile\nuse_frameworks!\n\npod 'Alamofire'\npod 'ObjectMapper'\npod 'RealmSwift'\npod 'SwiftTask'\n```\n\n## \u30ed\u30fc\u30ab\u30eb\u306eModel\nRealm\u306eModel\u306f\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3059\u3002\nObjectMapper\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u3067\u3042\u308bMappable\u3082\u6301\u305f\u305b\u307e\u3059\u3002\n\n```category.swift\nimport UIKit\nimport RealmSwift\nimport ObjectMapper\n\nclass Category: Object, Mappable {\n    dynamic var id = 0\n    dynamic var name = \"\"\n    \n    override static func primaryKey() -> String? {\n        return \"id\"\n    }\n    \n    required convenience init?(_ map: Map) {\n        self.init()\n        mapping(map)\n    }\n\n    func mapping(map: Map) {\n        id   <- map[\"id\"]\n        name <- map[\"name\"]\n    }\n}\n```\n\n```entry.swift\nimport UIKit\nimport RealmSwift\nimport ObjectMapper\n\nclass Entry: Object {\n    dynamic var id = 0\n    dynamic var title = \"\"\n    dynamic var body = \"\"\n    dynamic var categoryId = 0\n    dynamic var updatedAt = NSDate()\n    dynamic var createdAt = NSDate()\n    \n    override static func primaryKey() -> String? {\n        return \"id\"\n    }\n    \n    required convenience init?(_ map: Map) {\n        self.init()\n        mapping(map)\n    }\n    \n    func mapping(map: Map) {\n        let formatter = NSDateFormatter()\n        formatter.dateFormat = \"YYYY-MM-dd'T'HH:mm:ss.SZ\"\n        let dateFormatterTransform = DateFormatterTransform(dateFormatter: formatter)\n        \n        id         <- map[\"id\"]\n        title      <- map[\"title\"]\n        body       <- map[\"body\"]\n        categoryId <- map[\"category_id\"]\n        updatedAt  <- (map[\"updated_at\"], dateFormatterTransform)\n        createdAt  <- (map[\"created_at\"], dateFormatterTransform)\n    }\n}\n```\n\n## \u901a\u4fe1\u30fbDB\u3078\u306e\u4fdd\u5b58\u51e6\u7406\nAlamofire\u3067API\u3092\u53e9\u3044\u3066Realm\u306b\u4fdd\u5b58\u3059\u308b\u51e6\u7406\u3092\u66f8\u304d\u307e\u3059\u3002\n\n```CategoryEndPoint.swift\nimport UIKit\nimport Alamofire\nimport ObjectMapper\nimport RealmSwift\n\nclass CategoryEndPoint {\n    func fetch() {\n        Alamofire.request(.GET, \"http://localhost:3000/api/v1/categories\").responseJSON { response in\n            guard let json = response.result.value as? Dictionary<String, Array<AnyObject>> else {\n                return\n            }\n            \n            json[\"categories\"]?.forEach {\n                guard let category = Mapper<Category>().map($0) else {\n                    return\n                }\n                \n                do {\n                    let realm = try Realm()\n                    try realm.write {\n                        // add:update:\u306f\u540c\u3058ID\u306e\u3082\u306e\u304c\u3042\u308c\u3070Update\u3001\u306a\u3051\u308c\u3070Insert\u3057\u3066\u304f\u308c\u308b\u30e1\u30bd\u30c3\u30c9\n                        realm.add(category, update: true)\n                    }\n                } catch {}\n            }\n        }\n    }\n}\n```\n\n```EntryEndPoint.swift\nimport UIKit\nimport Alamofire\nimport ObjectMapper\nimport RealmSwift\n\nclass EntryEndPoint {\n    func fetch() {\n        Alamofire.request(.GET, \"http://localhost:3000/api/v1/entries\").responseJSON { response in\n            guard let json = response.result.value as? Dictionary<String, Array<AnyObject>> else {\n                return\n            }\n            \n            json[\"entries\"]?.forEach {\n                guard let entry = Mapper<Category>().map($0) else {\n                    return\n                }\n                \n                do {\n                    let realm = try Realm()\n                    try realm.write {\n                        realm.add(entry, update: true)\n                    }\n                } catch {}\n            }\n        }\n    }\n}\n```\n\nAppDelegate\u3092\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3051\u3070\u30a2\u30d7\u30ea\u8d77\u52d5\u6642\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u66f4\u65b0\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n```AppDelegate.swift\nimport UIKit\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n    var window: UIWindow?\n    \n    func applicationDidBecomeActive(application: UIApplication) {\n        CategoryEndPoint().fetch()\n        EntryEndPoint().fetch()\n    }\n}\n```\n\n## SwiftTask\u3067\u30c7\u30fc\u30bf\u66f4\u65b0\u304c\u7d42\u308f\u3063\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u306e\u51e6\u7406\u3092\u66f8\u304f\n\u4eca\u306e\u307e\u307e\u3060\u3068\u5168\u30c7\u30fc\u30bf\u3092\u66f4\u65b0\u5f8c\u306e\u51e6\u7406\u3092\u66f8\u3051\u307e\u305b\u3093\u3002\nSwiftTask\u3092\u4f7f\u3063\u3066\u5168\u3066\u306e\u30c7\u30fc\u30bf\u66f4\u65b0\u304c\u7d42\u308f\u3063\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u51e6\u7406\u3092\u66f8\u3051\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\nCategoryEndPoint\u3068EntryEndPoint\u306efetch\u3092\u4fee\u6b63\u3057\u3066Task\u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9\u306b\u3057\u307e\u3059\u3002\n\n```CategoryEndPoint.swift\nimport UIKit\nimport Alamofire\nimport ObjectMapper\nimport RealmSwift\nimport SwiftTask\n\nclass CategoryEndPoint {\n    func fetchTask() -> Task<Float, String, NSError?> {\n        return Task<Float, String, NSError?> { progress, fulfill, reject, configure in\n            Alamofire.request(.GET, \"http://localhost:3000/api/v1/categories\").responseJSON { response in\n                guard let json = response.result.value as? Dictionary<String, Array<AnyObject>> else {\n                    reject(nil)\n                    return\n                }\n                \n                json[\"categories\"]?.forEach {\n                    guard let category = Mapper<Category>().map($0) else {\n                        return\n                    }\n                    \n                    do {\n                        let realm = try Realm()\n                        try realm.write {\n                            realm.add(category, update: true)\n                        }\n                    } catch {}\n                }\n                fulfill(\"SUCCESS\")\n            }\n        }\n    }\n}\n```\n\n```EntryEndPoint.swift\nimport UIKit\nimport Alamofire\nimport ObjectMapper\nimport RealmSwift\nimport SwiftTask\n\nclass EntryEndPoint {\n    func fetchTask() -> Task<Float, String, NSError?> {\n        return Task<Float, String, NSError?> { progress, fulfill, reject, configure in\n            Alamofire.request(.GET, \"http://localhost:3000/api/v1/entries\").responseJSON { response in\n                guard let json = response.result.value as? Dictionary<String, Array<AnyObject>> else {\n                    reject(nil)\n                    return\n                }\n                \n                json[\"entries\"]?.forEach {\n                    guard let entry = Mapper<Category>().map($0) else {\n                        return\n                    }\n                    \n                    do {\n                        let realm = try Realm()\n                        try realm.write {\n                            realm.add(entry, update: true)\n                        }\n                    } catch {}\n                }\n                fulfill(\"SUCCESS\")\n            }\n        }\n    }\n}\n```\n\nAppDelegate\u306fSwiftTask\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u306e\u66f4\u65b0\u3092\u884c\u3046\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n```AppDelegate.swift\nimport UIKit\nimport SwiftTask\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n    var window: UIWindow?\n    \n    func applicationDidBecomeActive(application: UIApplication) {\n        resetCache()\n    }\n}\n\nextension AppDelegate {\n    private func resetCache() {\n        let tasks = [CategoryEndPoint().fetchTask(), EntryEndPoint().fetchTask()]\n        \n        Task.all(tasks).success { _ in\n            // \u5168\u90e8\u306e\u901a\u4fe1\u304c\u5b8c\u4e86\u3057\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u3053\u3053\u306b\u6765\u308b\n            }.failure { _ in\n                // \u3069\u308c\u304b\u306e\u51e6\u7406\u304c\u5931\u6557\u3057\u305f\u3089\u3053\u3053\u306b\u6765\u308b\n        }\n    }\n}\n```\n\n## \u30a2\u30d7\u30ea\u4e0a\u3067\u30c7\u30fc\u30bf\u3092\u53c2\u7167\u3059\u308b\n\u30a2\u30d7\u30ea\u304b\u3089\u306fRealm\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\nRealm\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u306e\u3067\u691c\u7d22\u3084\u30bd\u30fc\u30c8\u3082\u7c21\u5358\u306b\u884c\u306a\u3048\u307e\u3059\u3002\n\n```ViewController.swift\nimport UIKit\nimport RealmSwift\n\nclass ViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        do {\n            let realm = try Realm()\n            print(realm.objects(Category)) // \u30ab\u30c6\u30b4\u30ea\u30fc\u4e00\u89a7\u3092\u53d6\u5f97\n        } catch {}\n    }\n}\n```\n\n## \u30b5\u30fc\u30d0\u30fc\u5074\u3067\u30c7\u30fc\u30bf\u304c\u6d88\u3055\u308c\u308b\u5834\u5408\n\u4eca\u306e\u5b9f\u88c5\u3067\u306f\u30b5\u30fc\u30d0\u30fc\u5074\u3067\u524a\u9664\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u691c\u77e5\u3067\u304d\u307e\u305b\u3093\u3002\n\u30b5\u30fc\u30d0\u30fc\u5074\u3067\u30c7\u30fc\u30bf\u3092\u524a\u9664\u3059\u308b\u4e8b\u304c\u3042\u308b\u3001\u5834\u5408\u306fAPI\u3092\u53e9\u3044\u305f\u5f8c\u306b\u4e00\u5ea6\u30ed\u30fc\u30ab\u30eb\u306e\u30c7\u30fc\u30bf\u3092\u5168\u524a\u9664\u3059\u308b\u65b9\u304c\u826f\u3044\u3067\u3059\u3002\n\n```swift\n// \u4e00\u5ea6\u5168\u4ef6\u524a\u9664\u3059\u308b\ndo {\n    let realm = try Realm()\n    try realm.write {\n        realm.objects(Category).forEach { realm.delete($0) }\n    }\n} catch {}\n\njson[\"categories\"]?.forEach {\n    guard let category = Mapper<Category>().map($0) else {\n        return\n    }\n                    \n    do {\n        let realm = try Realm()\n        try realm.write {\n            realm.add(category)\n        }\n    } catch {}\n}\n```\n\n## \u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u304c\u5909\u66f4\u3055\u308c\u305f\u6642\n\u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u304c\u5909\u308f\u3063\u305f\u6642\u306f\u8a72\u5f53Model\u3092\u5909\u66f4\u3057\u3066`Realm.Configuration(schemaVersion: 1)`\u306eschemaVersion\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u66f4\u65b0\u3059\u308b\u3060\u3051\u3067\u5bfe\u5fdc\u3067\u304d\u307e\u3059\u3002\nRealm\u306fCoreData\u3068\u6bd4\u3079\u3066\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u304c\u683c\u6bb5\u306b\u697d\u306b\u306a\u3063\u305f\u306e\u304c\u5b09\u3057\u3044\u3067\u3059\u3002\n\n```swift\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n    var window: UIWindow?\n    \n    func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject : AnyObject]?) -> Bool {\n        \n        // \u30c6\u30fc\u30d6\u30eb\u69cb\u9020\u304c\u5909\u308f\u3063\u305f\u3089schemaVersion\u30922\u30013\u3068\u5897\u3084\u3057\u3066\u3044\u3051\u3070\u826f\u3044\n        let config = Realm.Configuration(schemaVersion: 1)\n        Realm.Configuration.defaultConfiguration = config\n        \n        return true\n    }\n}\n```\n\n## \u53c2\u8003URL\nhttp://qiita.com/SatoshiN21/items/d09f9e028c129ef567c1\n"}