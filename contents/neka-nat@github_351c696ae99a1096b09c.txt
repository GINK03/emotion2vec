{"context": " More than 1 year has passed since last update.\n\nboost.python\u3067\u5b66\u3093\u3060\u3042\u308c\u3053\u308c\nboost.python\u3092\u4f7f\u3063\u3066\u307f\u3066\u3042\u308c\u3053\u308c\u5b66\u3093\u3060\u3053\u3068\u3092\u66f8\u3044\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3092\u8ffd\u52a0\u3059\u308b\n\u3084\u308a\u305f\u3044\u3053\u3068\n>>> import hoge\n>>> hoge.GLOBAL_VALUE\n1\n\nboost::python::scope\u3092\u4f7f\u3044\u307e\u3059\u3002\nBOOST_PYTHON_MODULE(hoge)\n{\n    boost::python::scope().attr(\"GLOBAL_VALUE\") = 1;\n}\n\n\n__str__, __repr__\u3092\u5b9a\u7fa9\u3059\u308b\n\u3084\u308a\u305f\u3044\u3053\u3068\n>>> import hoge\n>>> h = hoge.hoge()\n>>> print h\nhoge\n>>> h\nhoge\n\n\u3044\u308d\u3044\u308d\u3084\u308a\u65b9\u306f\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001std::ostream\u304b\u3089python\u306e__str__, __repr__\u306b\u5909\u63db\u3059\u308b\u65b9\u6cd5\u3067\u3059\u3002\nclass hoge\n{\n};\n\nstd::ostream& operator<<(std::ostream& out, const hoge& )\n{\n    out << \"hoge\";\n    return out;\n}\n\nBOOST_PYTHON_MODULE(hoge)\n{\n    using namespace boost::python;\n    class_<hoge>(\"hoge\")\n    .def(self_ns::str(self))\n    .def(self_ns::repr(self));\n}\n\n\n\nstruct\u306e\u30e1\u30f3\u30d0\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\n\u3084\u308a\u305f\u3044\u3053\u3068\n>>> import hoge\n>>> f = hoge.foo()\n>>> f.a\n0\n>>> f.a = 5\n>>> f.a\n5\n\ndef_readwrite\u3092\u4f7f\u3044\u307e\u3059\u3002\nstruct foo\n{\n    int a;\n    foo(): a(0){};\n};\n\nBOOST_PYTHON_MODULE(hoge)\n{\n    using namespace boost::python;\n    class_<foo>(\"foo\")\n    .def_readwrite(\"a\", &foo::a);\n}\n\n\n\u95a2\u6570\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u3092\u4f7f\u3046\n\u3084\u308a\u305f\u3044\u3053\u3068\n>>> import hoge\n>>> hoge.add(1)\n1\n>>> hoge.add(1, 2)\n3\n>>> hoge.add(1, 2, 3)\n6\n\nBOOST_PYTHON_FUNCTION_OVERLOADS\u3068\u304bBOOST_PYTHON_MEMBER_FUNCTION_OVERLOADS\u3092\u4f7f\u3044\u307e\u3059\u3002\nBOOST_PYTHON_FUNCTION_OVERLOADS(add_overloads, add, 1, 3)\u306fadd\u306e\u6700\u5c0f\u5f15\u6570\u306e\u6570\u30921\u3001\u6700\u5927\u5f15\u6570\u306e\u6570\u30923\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\nint add(int a, int b = 0, int c = 0)\n{\n    return a + b + c;\n}\n\nBOOST_PYTHON_FUNCTION_OVERLOADS(add_overloads, add, 1, 3)\n\nBOOST_PYTHON_MODULE(hoge)\n{\n    using namespace boost::python;\n    def(\"add\", add, add_overloads());\n}\n\n\n\u4e0a\u306e\u4f8b\u3092\u53ef\u5909\u5f15\u6570\u3067\u3084\u308b\n\u3084\u308a\u305f\u3044\u3053\u3068\n>>> import hoge\n>>> hoge.add(1, 2, 3, a = 4, c = 5)\n>>> 15\n\nusing namespace boost::python;\n\nint add(tuple args, dict kw)\n{\n    int sum = 0;\n    for (int i = 0; i < len(args); ++i)\n    {\n    sum += extract<int>(args[i]);\n    }\n    list vals = kw.values();\n    for (int i = 0; i < len(vals); ++i)\n    {\n    sum += extract<int>(vals[i]);\n    }\n    return sum;\n}\n\nBOOST_PYTHON_MODULE(hoge)\n{\n    def(\"add\", raw_function(add));\n}\n\n\nboost::posix_time::ptime\u3092datetime\u306b\u5909\u63db\n\u3084\u308a\u305f\u3044\u3053\u3068\n>>> import hoge\n>>> f = hoge.foo()\n>>> f.now()\ndatetime.datetime(2015, 12, 30, 15, 29, 12)\n>>> f.now()\ndatetime.datetime(2015, 12, 30, 15, 29, 14)\n\nstatic long get_usecs(boost::posix_time::time_duration const& d)\n{\n    static long resolution\n    = boost::posix_time::time_duration::ticks_per_second();\n    long fracsecs = d.fractional_seconds();\n    if (resolution > 1000000)\n    return fracsecs / (resolution / 1000000);\n    else\n    return fracsecs * (1000000 / resolution);\n}\n\n\nstruct ptime_to_python_datetime\n{\n    static PyObject* convert(boost::posix_time::ptime const& pt)\n    {\n        boost::gregorian::date date = pt.date();\n        boost::posix_time::time_duration td = pt.time_of_day();\n        return PyDateTime_FromDateAndTime((int)date.year(),\n                      (int)date.month(),\n                      (int)date.day(),\n                      td.hours(),\n                      td.minutes(),\n                      td.seconds(),\n                      get_usecs(td));\n    }\n};\n\nclass foo\n{\npublic:\n    boost::posix_time::ptime now()\n    {\n    return boost::posix_time::second_clock::local_time();\n    }\n};\n\nBOOST_PYTHON_MODULE(hoge)\n{\n    using namespace boost::python;\n    PyDateTime_IMPORT;\n\n    to_python_converter<const boost::posix_time::ptime, ptime_to_python_datetime>();\n\n    class_<foo>(\"foo\")\n    .def(\"now\", &foo::now);\n}\n\n\nstruct\u306bdatetime\u3092\u6301\u305f\u305b\u305f\u3044\n\u3084\u308a\u305f\u3044\u3053\u3068\n>>> import hoge\n>>> import datetime\n>>> h = hoge.hoge()\n>>> h.date = datetime.datetime.now()\n>>> h.date\ndatetime.datetime(2015, 12, 30, 15, 40, 6, 406588)\n\n\u3055\u3063\u304d\u4f7f\u3063\u305fdef_readwrite\u306f\u4f7f\u3048\u306a\u304f\u3066\u3001add_property\u3092\u4f7f\u3044\u307e\u3059\u3002\n// \u4e0a\u306e\u4f8b\u3067\u4f7f\u3063\u305fptime_to_python_datetime\u306f\u540c\u69d8\u306b\u66f8\u3044\u3066\u304a\u304f\u3002\n\nstruct ptime_from_python_datetime\n{\n     ptime_from_python_datetime()\n     {\n         boost::python::converter::registry::push_back(&convertible,\n                               &construct,\n                               boost::python::type_id<boost::posix_time::ptime>());\n     }\n\n     static void* convertible(PyObject * obj_ptr)\n     {\n     if (!PyDateTime_Check(obj_ptr))\n         return 0;\n     return obj_ptr;\n     }\n\n     static void construct(PyObject* obj_ptr,\n               boost::python::converter::rvalue_from_python_stage1_data * data)\n     {\n     PyDateTime_DateTime const* pydate\n         = reinterpret_cast<PyDateTime_DateTime*>(obj_ptr);\n\n     // Create date object\n     boost::gregorian::date _date(PyDateTime_GET_YEAR(pydate),\n                      PyDateTime_GET_MONTH(pydate),\n                      PyDateTime_GET_DAY(pydate));\n\n     // Create time duration object\n     boost::posix_time::time_duration\n         _duration(PyDateTime_DATE_GET_HOUR(pydate),\n               PyDateTime_DATE_GET_MINUTE(pydate),\n               PyDateTime_DATE_GET_SECOND(pydate),\n               0);\n     // Set the usecs value\n     _duration += boost::posix_time::microseconds(PyDateTime_DATE_GET_MICROSECOND(pydate));\n\n     // Create posix time object\n     void* storage = ((boost::python::converter::rvalue_from_python_storage<boost::posix_time::ptime>*)\n              data)->storage.bytes;\n     new(storage) boost::posix_time::ptime(_date, _duration);\n     data->convertible = storage;\n     }\n};\n\nstruct hoge\n{\n    boost::posix_time::ptime date;\n};\n\nBOOST_PYTHON_MODULE(hoge)\n{\n    using namespace boost::python;\n    PyDateTime_IMPORT;\n\n    ptime_from_python_datetime();\n    to_python_converter<const boost::posix_time::ptime, ptime_to_python_datetime>();\n\n    class_<hoge>(\"hoge\")\n    .add_property(\"date\",\n              make_getter(&hoge::date, return_value_policy<return_by_value>()),\n              make_setter(&hoge::date, return_value_policy<copy_non_const_reference>()));\n\n}\n\n\nstd::vector\u3092\u6271\u3046\n\u3084\u308a\u305f\u3044\u3053\u3068\n>>> import hoge\n>>> v = hoge.DoubleVector()\n>>> v.append(1.0)\n>>> v.append(2.0)\n>>> v[0]\n1.0\n>>> v[1]\n2.0\n\nvector_indexing_suite\u3092\u4f7f\u3044\u307e\u3059\u3002\nBOOST_PYTHON_MODULE(hoge)\n{\n    using namespace boost::python;\n    class_<std::vector<double> >(\"DoubleVector\")\n        .def(vector_indexing_suite<std::vector<double> >());\n}\n\n\nstd::map\u3092\u4f7f\u3046\n\u3084\u308a\u305f\u3044\u3053\u3068\n>>> import hoge\n>>> m = hoge.StringDoubleMap()\n>>> m[\"a\"] = 1\n>>> m[\"b\"] = 2\n>>> m[\"a\"]\n1.0\n>>> m[\"b\"]\n2.0\n\nmap_indexing_suite\u3092\u4f7f\u3044\u307e\u3059\u3002\nBOOST_PYTHON_MODULE(hoge)\n{\n    using namespace boost::python;\n    class_<std::map<std::string, double> >(\"StringDoubleMap\")\n        .def(map_indexing_suite<std::map<std::string, double> >());\n}\n\n# boost.python\u3067\u5b66\u3093\u3060\u3042\u308c\u3053\u308c\nboost.python\u3092\u4f7f\u3063\u3066\u307f\u3066\u3042\u308c\u3053\u308c\u5b66\u3093\u3060\u3053\u3068\u3092\u66f8\u3044\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n## \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3092\u8ffd\u52a0\u3059\u308b\n\n\u3084\u308a\u305f\u3044\u3053\u3068\n\n```pycon\n>>> import hoge\n>>> hoge.GLOBAL_VALUE\n1\n```\n\n`boost::python::scope`\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```cpp\nBOOST_PYTHON_MODULE(hoge)\n{\n    boost::python::scope().attr(\"GLOBAL_VALUE\") = 1;\n}\n```\n\n## `__str__`, `__repr__`\u3092\u5b9a\u7fa9\u3059\u308b\n\n\u3084\u308a\u305f\u3044\u3053\u3068\n\n```pycon\n>>> import hoge\n>>> h = hoge.hoge()\n>>> print h\nhoge\n>>> h\nhoge\n```\n\n\u3044\u308d\u3044\u308d\u3084\u308a\u65b9\u306f\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001`std::ostream`\u304b\u3089python\u306e`__str__`, `__repr__`\u306b\u5909\u63db\u3059\u308b\u65b9\u6cd5\u3067\u3059\u3002\n\n```cpp\nclass hoge\n{\n};\n\nstd::ostream& operator<<(std::ostream& out, const hoge& )\n{\n    out << \"hoge\";\n    return out;\n}\n\nBOOST_PYTHON_MODULE(hoge)\n{\n    using namespace boost::python;\n    class_<hoge>(\"hoge\")\n\t.def(self_ns::str(self))\n\t.def(self_ns::repr(self));\n}\n\n```\n\n## struct\u306e\u30e1\u30f3\u30d0\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\n\n\u3084\u308a\u305f\u3044\u3053\u3068\n\n```pycon\n>>> import hoge\n>>> f = hoge.foo()\n>>> f.a\n0\n>>> f.a = 5\n>>> f.a\n5\n```\n\n`def_readwrite`\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```cpp\nstruct foo\n{\n    int a;\n    foo(): a(0){};\n};\n\nBOOST_PYTHON_MODULE(hoge)\n{\n    using namespace boost::python;\n    class_<foo>(\"foo\")\n\t.def_readwrite(\"a\", &foo::a);\n}\n```\n\n## \u95a2\u6570\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u3092\u4f7f\u3046\n\n\u3084\u308a\u305f\u3044\u3053\u3068\n\n```pycon\n>>> import hoge\n>>> hoge.add(1)\n1\n>>> hoge.add(1, 2)\n3\n>>> hoge.add(1, 2, 3)\n6\n```\n\n`BOOST_PYTHON_FUNCTION_OVERLOADS`\u3068\u304b`BOOST_PYTHON_MEMBER_FUNCTION_OVERLOADS`\u3092\u4f7f\u3044\u307e\u3059\u3002\n`BOOST_PYTHON_FUNCTION_OVERLOADS(add_overloads, add, 1, 3)`\u306f`add`\u306e\u6700\u5c0f\u5f15\u6570\u306e\u6570\u30921\u3001\u6700\u5927\u5f15\u6570\u306e\u6570\u30923\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n```cpp\nint add(int a, int b = 0, int c = 0)\n{\n    return a + b + c;\n}\n\nBOOST_PYTHON_FUNCTION_OVERLOADS(add_overloads, add, 1, 3)\n\nBOOST_PYTHON_MODULE(hoge)\n{\n    using namespace boost::python;\n    def(\"add\", add, add_overloads());\n}\n```\n\n## \u4e0a\u306e\u4f8b\u3092\u53ef\u5909\u5f15\u6570\u3067\u3084\u308b\n\n\u3084\u308a\u305f\u3044\u3053\u3068\n\n```pycon\n>>> import hoge\n>>> hoge.add(1, 2, 3, a = 4, c = 5)\n>>> 15\n```\n\n```cpp\nusing namespace boost::python;\n\nint add(tuple args, dict kw)\n{\n    int sum = 0;\n    for (int i = 0; i < len(args); ++i)\n    {\n\tsum += extract<int>(args[i]);\n    }\n    list vals = kw.values();\n    for (int i = 0; i < len(vals); ++i)\n    {\n\tsum += extract<int>(vals[i]);\n    }\n    return sum;\n}\n\nBOOST_PYTHON_MODULE(hoge)\n{\n    def(\"add\", raw_function(add));\n}\n```\n\n\n## `boost::posix_time::ptime`\u3092`datetime`\u306b\u5909\u63db\n\n\u3084\u308a\u305f\u3044\u3053\u3068\n\n```pycon\n>>> import hoge\n>>> f = hoge.foo()\n>>> f.now()\ndatetime.datetime(2015, 12, 30, 15, 29, 12)\n>>> f.now()\ndatetime.datetime(2015, 12, 30, 15, 29, 14)\n```\n\n```cpp\nstatic long get_usecs(boost::posix_time::time_duration const& d)\n{\n    static long resolution\n\t= boost::posix_time::time_duration::ticks_per_second();\n    long fracsecs = d.fractional_seconds();\n    if (resolution > 1000000)\n\treturn fracsecs / (resolution / 1000000);\n    else\n\treturn fracsecs * (1000000 / resolution);\n}\n\n\nstruct ptime_to_python_datetime\n{\n    static PyObject* convert(boost::posix_time::ptime const& pt)\n    {\n        boost::gregorian::date date = pt.date();\n        boost::posix_time::time_duration td = pt.time_of_day();\n        return PyDateTime_FromDateAndTime((int)date.year(),\n\t\t\t\t\t  (int)date.month(),\n\t\t\t\t\t  (int)date.day(),\n\t\t\t\t\t  td.hours(),\n\t\t\t\t\t  td.minutes(),\n\t\t\t\t\t  td.seconds(),\n\t\t\t\t\t  get_usecs(td));\n    }\n};\n\nclass foo\n{\npublic:\n    boost::posix_time::ptime now()\n    {\n\treturn boost::posix_time::second_clock::local_time();\n    }\n};\n\nBOOST_PYTHON_MODULE(hoge)\n{\n    using namespace boost::python;\n    PyDateTime_IMPORT;\n\n    to_python_converter<const boost::posix_time::ptime, ptime_to_python_datetime>();\n\n    class_<foo>(\"foo\")\n\t.def(\"now\", &foo::now);\n}\n```\n## struct\u306b`datetime`\u3092\u6301\u305f\u305b\u305f\u3044\n\u3084\u308a\u305f\u3044\u3053\u3068\n\n```pycon\n>>> import hoge\n>>> import datetime\n>>> h = hoge.hoge()\n>>> h.date = datetime.datetime.now()\n>>> h.date\ndatetime.datetime(2015, 12, 30, 15, 40, 6, 406588)\n```\n\n\u3055\u3063\u304d\u4f7f\u3063\u305f`def_readwrite`\u306f\u4f7f\u3048\u306a\u304f\u3066\u3001`add_property`\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```cpp\n// \u4e0a\u306e\u4f8b\u3067\u4f7f\u3063\u305fptime_to_python_datetime\u306f\u540c\u69d8\u306b\u66f8\u3044\u3066\u304a\u304f\u3002\n\nstruct ptime_from_python_datetime\n{\n     ptime_from_python_datetime()\n     {\n         boost::python::converter::registry::push_back(&convertible,\n\t\t\t\t\t\t       &construct,\n\t\t\t\t\t\t       boost::python::type_id<boost::posix_time::ptime>());\n     }\n\n     static void* convertible(PyObject * obj_ptr)\n     {\n\t if (!PyDateTime_Check(obj_ptr))\n\t     return 0;\n\t return obj_ptr;\n     }\n\n     static void construct(PyObject* obj_ptr,\n\t\t\t   boost::python::converter::rvalue_from_python_stage1_data * data)\n     {\n\t PyDateTime_DateTime const* pydate\n\t     = reinterpret_cast<PyDateTime_DateTime*>(obj_ptr);\n\n\t // Create date object\n\t boost::gregorian::date _date(PyDateTime_GET_YEAR(pydate),\n\t\t\t\t      PyDateTime_GET_MONTH(pydate),\n\t\t\t\t      PyDateTime_GET_DAY(pydate));\n\n\t // Create time duration object\n\t boost::posix_time::time_duration\n\t     _duration(PyDateTime_DATE_GET_HOUR(pydate),\n\t\t       PyDateTime_DATE_GET_MINUTE(pydate),\n\t\t       PyDateTime_DATE_GET_SECOND(pydate),\n\t\t       0);\n\t // Set the usecs value\n\t _duration += boost::posix_time::microseconds(PyDateTime_DATE_GET_MICROSECOND(pydate));\n\n\t // Create posix time object\n\t void* storage = ((boost::python::converter::rvalue_from_python_storage<boost::posix_time::ptime>*)\n\t\t\t  data)->storage.bytes;\n\t new(storage) boost::posix_time::ptime(_date, _duration);\n\t data->convertible = storage;\n     }\n};\n\nstruct hoge\n{\n    boost::posix_time::ptime date;\n};\n\nBOOST_PYTHON_MODULE(hoge)\n{\n    using namespace boost::python;\n    PyDateTime_IMPORT;\n\n    ptime_from_python_datetime();\n    to_python_converter<const boost::posix_time::ptime, ptime_to_python_datetime>();\n\n    class_<hoge>(\"hoge\")\n\t.add_property(\"date\",\n\t\t      make_getter(&hoge::date, return_value_policy<return_by_value>()),\n\t\t      make_setter(&hoge::date, return_value_policy<copy_non_const_reference>()));\n\n}\n```\n\n## `std::vector`\u3092\u6271\u3046\n\u3084\u308a\u305f\u3044\u3053\u3068\n\n```pycon\n>>> import hoge\n>>> v = hoge.DoubleVector()\n>>> v.append(1.0)\n>>> v.append(2.0)\n>>> v[0]\n1.0\n>>> v[1]\n2.0\n```\n\n`vector_indexing_suite`\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```cpp\nBOOST_PYTHON_MODULE(hoge)\n{\n    using namespace boost::python;\n    class_<std::vector<double> >(\"DoubleVector\")\n        .def(vector_indexing_suite<std::vector<double> >());\n}\n```\n\n## `std::map`\u3092\u4f7f\u3046\n\u3084\u308a\u305f\u3044\u3053\u3068\n\n```pycon\n>>> import hoge\n>>> m = hoge.StringDoubleMap()\n>>> m[\"a\"] = 1\n>>> m[\"b\"] = 2\n>>> m[\"a\"]\n1.0\n>>> m[\"b\"]\n2.0\n```\n\n`map_indexing_suite`\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```cpp\nBOOST_PYTHON_MODULE(hoge)\n{\n    using namespace boost::python;\n    class_<std::map<std::string, double> >(\"StringDoubleMap\")\n        .def(map_indexing_suite<std::map<std::string, double> >());\n}\n```\n", "tags": ["boost", "Python", "C++"]}