{"context": " More than 1 year has passed since last update.\u30bd\u30fc\u30b9\u306f\nhttps://github.com/osoken/tiltshift_effector\n.mov \u306a\u3069\u306e\u52d5\u753b\u30d5\u30a1\u30a4\u30eb\u306b\u3001\u507d\u30c6\u30a3\u30eb\u30c8\u30b7\u30d5\u30c8\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u639b\u3051\u308bPython\u30b9\u30af\u30ea\u30d7\u30c8\u3002\nNumpy, Scipy, OpenCV, Pillow \u3092\u4f7f\u7528\u3057\u305f\u3002Python 2.7 \u5411\u3051\u3002\n\u539f\u7406\u306f\u5358\u7d14\u3067\u3001\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u753b\u50cf\u3068\u3001\u307c\u3051\u305f\u753b\u50cf\u3092\u30de\u30b9\u30af\u3057\u306a\u304c\u3089\u5408\u6210\u3059\u308b\u3068\u3044\u3046\u3060\u3051\u306e\u3082\u306e\u3002\n\u30aa\u30ea\u30b8\u30ca\u30eb\n\n\u30de\u30b9\u30af\n\n\u307c\u3051\u305f\u753b\u50cf\n\n\u5408\u6210\u5f8c\n\n\u203b\u308f\u304b\u308a\u3084\u3059\u3044\u3088\u3046\u306b\u3001\u304b\u306a\u308a\u5f37\u3081\u306b\u639b\u3051\u3066\u3044\u307e\u3059\u3002\n\u30de\u30b9\u30af\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u3002\ndef gen_mask(sz, t, tc, c, bc):\n  bounds = (0,limit_value(int(sz[1]*t),0,sz[1]),limit_value(int(sz[1]*(t+tc)),0,sz[1]),limit_value(int(sz[1]*(t+tc+c)),0,sz[1]),limit_value(int(sz[1]*(t+tc+c+bc)),0,sz[1]),sz[1]);\n  mask = np.array(Image.new('L', sz));\n  mask[bounds[0]:bounds[1],:] = 255;\n  for i in range(bounds[1],bounds[2]):\n    mask[i,:] = 255 - int(255.0/float( bounds[2] - bounds[1] ) * float(i - bounds[1]));\n  mask[bounds[3]:bounds[2],:] = 0;\n  for i in range(bounds[3],bounds[4]):\n    mask[i,:] = int(255.0/float( bounds[4] - bounds[3] ) * float(i - bounds[3]));\n  mask[bounds[4]:bounds[5],:] = 255;\n  mask = Image.fromarray(mask);\n  return mask;\n\nsz\u306f(width,height)\u306e\u30bf\u30d7\u30eb\u3002t,tc,c,bc\u306f0.0\u304b\u30891.0\u306e\u6570\u5024\u3067\u3001t\u306f\u4e0a\u90e8\u306e\u767d\u3044\u9818\u57df\u3001c\u306f\u771f\u3093\u4e2d\u306e\u9ed2\u3044\u9818\u57df\u3001tc\u306ft\u3068c\u306e\u9593\u3001bc\u306fc\u3068\u4e0b\u306e\u767d\u3044\u9818\u57df\u306e\u9593\u306e\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u5e45\u3092\u3001\u5168\u4f53\u30921.0\u3068\u3057\u305f\u5272\u5408\u3067\u8868\u73fe\u3057\u307e\u3059\u3002\n\u307c\u3051\u305f\u753b\u50cf\u3092\u751f\u6210\u3059\u308b\u306e\u306f\u3001scipy\u306b\u5165\u3063\u3066\u3044\u308bgaussian_filter\u3092\u305d\u306e\u307e\u307e\u4f7f\u3044\u307e\u3057\u305f\u3002\ndef gen_blurred_image(image, blur_factor):\n  if blur_factor == 0:\n    return image;\n  im = np.array(image);\n  return Image.fromarray(ndimage.gaussian_filter(im, sigma=[blur_factor, blur_factor, 0]));\n\n\u5909\u6570image\u304cPIL\u306eImage\u578b\u3067\u3001\u30d5\u30a3\u30eb\u30bf\u639b\u3051\u308b\u305f\u3081\u3060\u3051\u306bnumpy.array\u578b\u306b\u5909\u63db\u3057\u3066\u3059\u3050\u306b\u623b\u3057\u3066\u3044\u308b\u306e\u304c\u7121\u99c4\u3063\u307d\u3044\u3067\u3059\u304c\u3001\u4ed6\u306e\u64cd\u4f5c\u3068\u306e\u517c\u306d\u5408\u3044\u3067\u3053\u3046\u306a\u3063\u3066\u3044\u307e\u3059\u2026\u3002blur_factor\u306f\u307c\u304b\u3057\u306e\u5f37\u3055\u3067\u3001\u6d6e\u52d5\u5c0f\u6570\u3067\u4e0e\u3048\u307e\u3059\u3002\n\u30de\u30b9\u30af\u3068\u3001\u307c\u3051\u305f\u753b\u50cf\u3092\u751f\u6210\u3057\u305f\u3089\u3001PIL\u306epaste\u95a2\u6570\u3067\u5408\u6210\u3057\u307e\u3059\u3002\ndef paste_image(base, layer, mask):\n  im = base;\n  im.paste(layer, mask = mask);\n  return im;\n\n\u3053\u3053\u307e\u3067\u6e96\u5099\u304c\u3067\u304d\u308c\u3070\u5f8c\u306f\u52d5\u753b\u3092\u958b\u3044\u3066\u6bce\u30d5\u30ec\u30fc\u30e0\u540c\u3058\u51e6\u7406\u3092\u639b\u3051\u3066\u3044\u304f\u3060\u3051\u3067\u3059\u3002\n  cap = cv2.VideoCapture('input.mov');\n  orig_size = (int(cap.get(cv2.cv.CV_CAP_PROP_FRAME_WIDTH)),int(cap.get(cv2.cv.CV_CAP_PROP_FRAME_HEIGHT)));\n  out = cv2.VideoWriter('output.mov', cv2.cv.CV_FOURCC('m','p','4','v'), int(cap.get(cv2.cv.CV_CAP_PROP_FPS)), orig_size);\n  mask = gen_mask(orig_size, 0.4, 0.15, 0.05, 0.1);\n  while cap.isOpened():\n    ret,im_orig = cap.read();\n    if ret == True:\n      im = Image.fromarray(im_orig);\n      im_blur = gen_blurred_image(im, 2.0);\n      im = np.array(paste_image(im, im_blur, mask));\n      cv2.imshow('view', im);\n      out.write(im);\n      key = cv2.waitKey(1);\n      if key == 27:\n        break;\n    else:\n      break;\n\n  out.release();\n  cap.release();\n  cv2.destroyAllWindows();\n\n\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u7f6e\u3044\u3066\u3042\u308b\u30f4\u30a1\u30fc\u30b8\u30e7\u30f3\u3067\u306f\u5165\u529b\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u51e6\u7406\u306a\u3069\u3092\u3084\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u884c\u6570\u304c\u5d69\u3093\u3067\u3044\u307e\u3059\u304c\u3001\u672c\u8cea\u7684\u306b\u306f\u3053\u3093\u306a\u3082\u3093\u304b\u3068\u3002\u3042\u3068\u3001\u753b\u8cea\u3084\u5f69\u5ea6\u306a\u3069\u306e\u8abf\u6574\u3082\u3057\u3066\u3044\u307e\u3059\u3002\u30eb\u30fc\u30d7\u306e\u6700\u5f8c\u306ekey == 27\u306fesc\u3067\u9014\u4e2d\u7d42\u4e86\u3067\u3059\u3002\n\u30bd\u30fc\u30b9\u306f\nhttps://github.com/osoken/tiltshift_effector\n\n`.mov` \u306a\u3069\u306e\u52d5\u753b\u30d5\u30a1\u30a4\u30eb\u306b\u3001\u507d\u30c6\u30a3\u30eb\u30c8\u30b7\u30d5\u30c8\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u639b\u3051\u308bPython\u30b9\u30af\u30ea\u30d7\u30c8\u3002\n`Numpy`, `Scipy`, `OpenCV`, `Pillow` \u3092\u4f7f\u7528\u3057\u305f\u3002Python 2.7 \u5411\u3051\u3002\n\n\u539f\u7406\u306f\u5358\u7d14\u3067\u3001\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u753b\u50cf\u3068\u3001\u307c\u3051\u305f\u753b\u50cf\u3092\u30de\u30b9\u30af\u3057\u306a\u304c\u3089\u5408\u6210\u3059\u308b\u3068\u3044\u3046\u3060\u3051\u306e\u3082\u306e\u3002\n\u30aa\u30ea\u30b8\u30ca\u30eb\n![orig.png](https://qiita-image-store.s3.amazonaws.com/0/51853/f161ce13-1c8e-dada-2cd9-650f18a2387a.png)\n\n\u30de\u30b9\u30af\n![mask.png](https://qiita-image-store.s3.amazonaws.com/0/51853/bd4902df-b282-aedb-44b9-466de214298a.png)\n\n\u307c\u3051\u305f\u753b\u50cf\n![blur.png](https://qiita-image-store.s3.amazonaws.com/0/51853/1439e02d-e5c6-99a4-46a8-1895a1521de4.png)\n\n\u5408\u6210\u5f8c\n![out.png](https://qiita-image-store.s3.amazonaws.com/0/51853/b7b6c5f8-d2ec-1106-7b51-05b395a2f627.png)\n\n\u203b\u308f\u304b\u308a\u3084\u3059\u3044\u3088\u3046\u306b\u3001\u304b\u306a\u308a\u5f37\u3081\u306b\u639b\u3051\u3066\u3044\u307e\u3059\u3002\n\n\u30de\u30b9\u30af\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u3002\n\n```\ndef gen_mask(sz, t, tc, c, bc):\n  bounds = (0,limit_value(int(sz[1]*t),0,sz[1]),limit_value(int(sz[1]*(t+tc)),0,sz[1]),limit_value(int(sz[1]*(t+tc+c)),0,sz[1]),limit_value(int(sz[1]*(t+tc+c+bc)),0,sz[1]),sz[1]);\n  mask = np.array(Image.new('L', sz));\n  mask[bounds[0]:bounds[1],:] = 255;\n  for i in range(bounds[1],bounds[2]):\n    mask[i,:] = 255 - int(255.0/float( bounds[2] - bounds[1] ) * float(i - bounds[1]));\n  mask[bounds[3]:bounds[2],:] = 0;\n  for i in range(bounds[3],bounds[4]):\n    mask[i,:] = int(255.0/float( bounds[4] - bounds[3] ) * float(i - bounds[3]));\n  mask[bounds[4]:bounds[5],:] = 255;\n  mask = Image.fromarray(mask);\n  return mask;\n```\n\n`sz`\u306f`(width,height)`\u306e\u30bf\u30d7\u30eb\u3002`t`,`tc`,`c`,`bc`\u306f`0.0`\u304b\u3089`1.0`\u306e\u6570\u5024\u3067\u3001`t`\u306f\u4e0a\u90e8\u306e\u767d\u3044\u9818\u57df\u3001`c`\u306f\u771f\u3093\u4e2d\u306e\u9ed2\u3044\u9818\u57df\u3001`tc`\u306f`t`\u3068`c`\u306e\u9593\u3001`bc`\u306f`c`\u3068\u4e0b\u306e\u767d\u3044\u9818\u57df\u306e\u9593\u306e\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u5e45\u3092\u3001\u5168\u4f53\u3092`1.0`\u3068\u3057\u305f\u5272\u5408\u3067\u8868\u73fe\u3057\u307e\u3059\u3002\n\n\u307c\u3051\u305f\u753b\u50cf\u3092\u751f\u6210\u3059\u308b\u306e\u306f\u3001`scipy`\u306b\u5165\u3063\u3066\u3044\u308b`gaussian_filter`\u3092\u305d\u306e\u307e\u307e\u4f7f\u3044\u307e\u3057\u305f\u3002\n\n```\ndef gen_blurred_image(image, blur_factor):\n  if blur_factor == 0:\n    return image;\n  im = np.array(image);\n  return Image.fromarray(ndimage.gaussian_filter(im, sigma=[blur_factor, blur_factor, 0]));\n```\n\n\u5909\u6570`image`\u304c`PIL`\u306e`Image`\u578b\u3067\u3001\u30d5\u30a3\u30eb\u30bf\u639b\u3051\u308b\u305f\u3081\u3060\u3051\u306b`numpy.array`\u578b\u306b\u5909\u63db\u3057\u3066\u3059\u3050\u306b\u623b\u3057\u3066\u3044\u308b\u306e\u304c\u7121\u99c4\u3063\u307d\u3044\u3067\u3059\u304c\u3001\u4ed6\u306e\u64cd\u4f5c\u3068\u306e\u517c\u306d\u5408\u3044\u3067\u3053\u3046\u306a\u3063\u3066\u3044\u307e\u3059\u2026\u3002`blur_factor`\u306f\u307c\u304b\u3057\u306e\u5f37\u3055\u3067\u3001\u6d6e\u52d5\u5c0f\u6570\u3067\u4e0e\u3048\u307e\u3059\u3002\n\n\u30de\u30b9\u30af\u3068\u3001\u307c\u3051\u305f\u753b\u50cf\u3092\u751f\u6210\u3057\u305f\u3089\u3001`PIL`\u306e`paste`\u95a2\u6570\u3067\u5408\u6210\u3057\u307e\u3059\u3002\n\n```\ndef paste_image(base, layer, mask):\n  im = base;\n  im.paste(layer, mask = mask);\n  return im;\n```\n\n\u3053\u3053\u307e\u3067\u6e96\u5099\u304c\u3067\u304d\u308c\u3070\u5f8c\u306f\u52d5\u753b\u3092\u958b\u3044\u3066\u6bce\u30d5\u30ec\u30fc\u30e0\u540c\u3058\u51e6\u7406\u3092\u639b\u3051\u3066\u3044\u304f\u3060\u3051\u3067\u3059\u3002\n\n```\n  cap = cv2.VideoCapture('input.mov');\n  orig_size = (int(cap.get(cv2.cv.CV_CAP_PROP_FRAME_WIDTH)),int(cap.get(cv2.cv.CV_CAP_PROP_FRAME_HEIGHT)));\n  out = cv2.VideoWriter('output.mov', cv2.cv.CV_FOURCC('m','p','4','v'), int(cap.get(cv2.cv.CV_CAP_PROP_FPS)), orig_size);\n  mask = gen_mask(orig_size, 0.4, 0.15, 0.05, 0.1);\n  while cap.isOpened():\n    ret,im_orig = cap.read();\n    if ret == True:\n      im = Image.fromarray(im_orig);\n      im_blur = gen_blurred_image(im, 2.0);\n      im = np.array(paste_image(im, im_blur, mask));\n      cv2.imshow('view', im);\n      out.write(im);\n      key = cv2.waitKey(1);\n      if key == 27:\n        break;\n    else:\n      break;\n\n  out.release();\n  cap.release();\n  cv2.destroyAllWindows();\n```\n\n\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u7f6e\u3044\u3066\u3042\u308b\u30f4\u30a1\u30fc\u30b8\u30e7\u30f3\u3067\u306f\u5165\u529b\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u51e6\u7406\u306a\u3069\u3092\u3084\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u884c\u6570\u304c\u5d69\u3093\u3067\u3044\u307e\u3059\u304c\u3001\u672c\u8cea\u7684\u306b\u306f\u3053\u3093\u306a\u3082\u3093\u304b\u3068\u3002\u3042\u3068\u3001\u753b\u8cea\u3084\u5f69\u5ea6\u306a\u3069\u306e\u8abf\u6574\u3082\u3057\u3066\u3044\u307e\u3059\u3002\u30eb\u30fc\u30d7\u306e\u6700\u5f8c\u306e`key == 27`\u306f`esc`\u3067\u9014\u4e2d\u7d42\u4e86\u3067\u3059\u3002\n", "tags": ["Python", "OpenCV"]}