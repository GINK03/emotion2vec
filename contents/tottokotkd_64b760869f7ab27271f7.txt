{"context": " More than 1 year has passed since last update.\u3000\u518d\u73fe\u3057\u3066\u305f\u30891\u9031\u9593\u304b\u304b\u3063\u305f\u306e\u306f\u79d8\u5bc6\u3002\n\u3000\u306a\u3093\u304b\u3059\u3054\u304f\u6642\u9593\u304c\u306a\u3044\u306e\u3067\u3001\u8a73\u3057\u3044\u3053\u3068\u306f\u6765\u9031\u52a0\u7b46\u3057\u307e\u3059\u3002\n\u3000\u672c\u5f53\u306f\u3082\u3063\u3068\u30de\u30c8\u30e2\u306a\u30a8\u30af\u30b9\u30c6\u30f3\u30b7\u30e7\u30f3\u306b\u3057\u305f\u304b\u3063\u305f\u3093\u3067\u3059\u2026\u3000\u3057\u304b\u3057\u6642\u9593\u304c\u2026\u3000\uff73\uff78\uff9e\uff6f\n\u3000\u6319\u52d5\u78ba\u8a8d\u3059\u308b\u3068\u304d\u306f\u8a8d\u8a3c\u30a2\u30d7\u30ea\u306b\u624b\u52d5\u3067\u30a2\u30ab\u30a6\u30f3\u30c8\u767b\u9332\u3057\u3066\u304f\u3060\u3057\u3042\n\nbridging-header.h\n#import <CommonCrypto/CommonHMAC.h>\n\n\n\nmain.swift\nimport Cocoa\n\nextension NSDate {\n    static func google2FA(key: String) -> String {\n        func base32decode(k: String) -> [UInt8] {\n            func decode(c: CChar) -> UInt8? {\n                switch c {\n                case 50...55:\n                    return UInt8(c - 24)\n                case 65...90:\n                    return UInt8(c - 65)\n                default:\n                    return nil\n                }\n            }\n            func convert(raw: ArraySlice<CChar>, result: [UInt8]) -> [UInt8] {\n                if let first = raw.first.flatMap(decode) {\n                    return convert(raw.dropFirst(), result: result + [first])\n                } else {\n                    return result\n                }\n            }\n            let nums = k.uppercaseString.cStringUsingEncoding(NSASCIIStringEncoding)\n                .map(ArraySlice.init).map { convert($0, result: []) } ?? []\n            var bs = [UInt8]()\n            var buffer = 0\n            var length = 0\n            for c in nums {\n                buffer = buffer << 5 | numericCast(c)\n                length += 5\n                if (length >= 8) {\n                    bs.append(numericCast(buffer >> (length - 8)))\n                    buffer -= (numericCast(bs.last!) << (length - 8))\n                    length -= 8\n                }\n            }\n            return bs\n        }\n        let secret = base32decode(key)\n\n        var time = CFSwapInt64HostToBig(UInt64(NSDate().timeIntervalSince1970) / 30)\n        var hash = [UInt8](count: numericCast(CC_SHA1_DIGEST_LENGTH), repeatedValue: 0)\n        CCHmac(numericCast(kCCHmacAlgSHA1), secret, secret.count, &time, sizeof(UInt64), &hash)\n\n        let offset = Int(hash.last!) & 0xf\n        let truncated = hash[offset...offset + 3]\n\n        var t = 0\n        for n in truncated {\n            t = (t << 8) | numericCast(n)\n        }\n        return String(format: \"%06d\", (t & (0x7fffffff) ) % 1000000)\n    }\n}\n\n// \u4f7f\u3044\u65b9\nprint(NSDate.google2FA(\"aaaaaaaaaaaaaaaa\"))\n\n\n\u3000\u518d\u73fe\u3057\u3066\u305f\u30891\u9031\u9593\u304b\u304b\u3063\u305f\u306e\u306f\u79d8\u5bc6\u3002\n\n\u3000\u306a\u3093\u304b\u3059\u3054\u304f\u6642\u9593\u304c\u306a\u3044\u306e\u3067\u3001\u8a73\u3057\u3044\u3053\u3068\u306f\u6765\u9031\u52a0\u7b46\u3057\u307e\u3059\u3002\n\u3000\u672c\u5f53\u306f\u3082\u3063\u3068\u30de\u30c8\u30e2\u306a\u30a8\u30af\u30b9\u30c6\u30f3\u30b7\u30e7\u30f3\u306b\u3057\u305f\u304b\u3063\u305f\u3093\u3067\u3059\u2026\u3000\u3057\u304b\u3057\u6642\u9593\u304c\u2026\u3000\uff73\uff78\uff9e\uff6f\n\n\u3000\u6319\u52d5\u78ba\u8a8d\u3059\u308b\u3068\u304d\u306f\u8a8d\u8a3c\u30a2\u30d7\u30ea\u306b\u624b\u52d5\u3067\u30a2\u30ab\u30a6\u30f3\u30c8\u767b\u9332\u3057\u3066\u304f\u3060\u3057\u3042\n\n``` bridging-header.h\n#import <CommonCrypto/CommonHMAC.h>\n```\n\n``` main.swift \nimport Cocoa\n\nextension NSDate {\n    static func google2FA(key: String) -> String {\n        func base32decode(k: String) -> [UInt8] {\n            func decode(c: CChar) -> UInt8? {\n                switch c {\n                case 50...55:\n                    return UInt8(c - 24)\n                case 65...90:\n                    return UInt8(c - 65)\n                default:\n                    return nil\n                }\n            }\n            func convert(raw: ArraySlice<CChar>, result: [UInt8]) -> [UInt8] {\n                if let first = raw.first.flatMap(decode) {\n                    return convert(raw.dropFirst(), result: result + [first])\n                } else {\n                    return result\n                }\n            }\n            let nums = k.uppercaseString.cStringUsingEncoding(NSASCIIStringEncoding)\n                .map(ArraySlice.init).map { convert($0, result: []) } ?? []\n            var bs = [UInt8]()\n            var buffer = 0\n            var length = 0\n            for c in nums {\n                buffer = buffer << 5 | numericCast(c)\n                length += 5\n                if (length >= 8) {\n                    bs.append(numericCast(buffer >> (length - 8)))\n                    buffer -= (numericCast(bs.last!) << (length - 8))\n                    length -= 8\n                }\n            }\n            return bs\n        }\n        let secret = base32decode(key)\n        \n        var time = CFSwapInt64HostToBig(UInt64(NSDate().timeIntervalSince1970) / 30)\n        var hash = [UInt8](count: numericCast(CC_SHA1_DIGEST_LENGTH), repeatedValue: 0)\n        CCHmac(numericCast(kCCHmacAlgSHA1), secret, secret.count, &time, sizeof(UInt64), &hash)\n        \n        let offset = Int(hash.last!) & 0xf\n        let truncated = hash[offset...offset + 3]\n        \n        var t = 0\n        for n in truncated {\n            t = (t << 8) | numericCast(n)\n        }\n        return String(format: \"%06d\", (t & (0x7fffffff) ) % 1000000)\n    }\n}\n\n// \u4f7f\u3044\u65b9\nprint(NSDate.google2FA(\"aaaaaaaaaaaaaaaa\"))\n```\n", "tags": ["Swift", "google"]}