{"context": "\n\n\u4f55\u304c\u3057\u305f\u3044\u304b\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u3092\u8003\u616e\u3057\u3066\u306a\u3044Fragment\u306e\u30b3\u30fc\u30c9\u306b\u5bfe\u3057\u3066\u3001\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u304d\u305f\u3044\u3002\u65e2\u5b58\u30b3\u30fc\u30c9\u3092\u5909\u66f4\u305b\u305a\u306b\u3002\n\u30c6\u30b9\u30c8\u3068\u3057\u3066\u306f\u4f8b\u3048\u3070\u3001API\u30a2\u30af\u30bb\u30b9\u306e\u7d50\u679c\u3001\u7279\u5b9a\u306e\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u5834\u5408\u306f\u5225\u753b\u9762\u306b\u9077\u79fb\u3059\u308b\u3068\u304b\u3002\n\n\u65e2\u5b58\u30b3\u30fc\u30c9\u306e\u4ed5\u7d44\u307f\nOkHttp+Retrofit\u3067API\u30a2\u30af\u30bb\u30b9\u3092\u7ba1\u7406\u3057\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001API\u306e\u63a5\u7d9a\u5148\u304c\u672c\u756a\u30fb\u30b9\u30c6\u30fc\u30b8\u30f3\u30b0\u30fb\u958b\u767a\u306e3\u74b0\u5883\u3042\u308b\u306e\u3067\u3001strings.xml\u3092\u5404build variants\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u7f6e\u3044\u3066\u3044\u307e\u3059\u3002\nApiClient\u3068\u3044\u3046\u30af\u30e9\u30b9\u3067\u3001Retrofit\u306e\u30b5\u30fc\u30d3\u30b9\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u3066\u3044\u307e\u3059\u3002\n\uff08\u30db\u30f3\u30c8\u306f\u3001Dagger\u3068\u304b\u3067DI\u3057\u305f\u307b\u3046\u304c\u826f\u3055\u305d\u3046\u3067\u3059\u304c\u3002\uff09\n\nApiClient.java\npublic class ApiClient {\n    private static ApiClient sApiClient;\n\n    private HogeService hogeService;\n\n    private ApiClient() {\n    }\n\n    public static ApiClient getInstance() {\n        if (sApiClient == null) {\n            sApiClient = new ApiClient();\n        }\n        return sApiClient;\n    }\n\n    public void initialize(final Context c) {\n        OkHttpClient okHttpClient = new OkHttpClient().newBuilder()\n                .addInterceptor(new HttpLoggingInterceptor().setLevel(BuildConfig.DEBUG ? HttpLoggingInterceptor.Level.BODY : HttpLoggingInterceptor.Level.NONE))\n                .build();\n\n        Retrofit retrofit = new Retrofit.Builder()\n                .baseUrl(context.getString(R.string.api_base_url))\n                .addConverterFactory(GsonConverterFactory.create())\n                .client(okHttpClient)\n                .build();\n\n        hogeService = retrofit.create(HogeService.class);\n    }\n\n    public HogeService getHogeService() {\n        return hogeService;\n    }\n}\n\n\n\u4e0a\u8a18\u306einitialize\u30e1\u30bd\u30c3\u30c9\u306f\u3001Application\u7d99\u627f\u30af\u30e9\u30b9\u304b\u3089\u3001onCreate\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u547c\u3073\u3060\u3055\u308c\u307e\u3059\u3002\nAPI\u3092\u5b9f\u884c\u3059\u308bFragment\u306e\u65b9\u3067\u306f\u3001\u30af\u30ea\u30c3\u30af\u30a4\u30d9\u30f3\u30c8\u306a\u3069\u3092\u5951\u6a5f\u306b\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n\nSomeFragment.java\nApiClient.getInstance().getHogeService().login(loginInfo).enqueue(new Callback<UserInfo>() {\n    @Override\n    public void onResponse(Call<UserInfo> call, Response<UserInfo> response) {\n        if (response.code() == 401) {\n            Intent intent = new Intent(activity, SignUpActivity.class);\n            startActivity(intent);\n            return;\n        }\n        // \u30ed\u30b0\u30a4\u30f3\u6210\u529f\u3057\u305f\u3068\u304d\u306e\u51e6\u7406\n    }\n\n    @Override\n    public void onFailure(Call<UserInfo> call, Throwable t) {\n    }\n});\n\n\n\u4e0a\u8a18\u3067\u306f\u3001\u4f8b\u3068\u3057\u3066\u3001\u300c\u30ed\u30b0\u30a4\u30f3API\u304c401\u3060\u3063\u305f\u3089\u767b\u9332Activity\u3092\u8868\u793a\u3059\u308b\u300d\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u3092 \u30b3\u30fc\u30c9\u3092\u5909\u66f4\u305b\u305a\u306b \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\uff08\u65e2\u5b58\u30b3\u30fc\u30c9\u306e\u554f\u984c\u70b9\u306f\u30b9\u30eb\u30fc\u3057\u3001\u30c6\u30b9\u30c8\u3092\u66f8\u304f\u3053\u3068\u3092\u512a\u5148\uff09\n\n\u57fa\u672c\u65b9\u91dd\n\n\nRobolectric\u3092\u5229\u7528\u3057\u3066\u3001Fragment\u306e\u751f\u6210\u3001\u30a4\u30d9\u30f3\u30c8\u306e\u767a\u751f\u3092\u884c\u3046\u3002\nOkHttp\u306eMockWebServer\u3092\u5229\u7528\u3057\u3066\u3001API\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u507d\u88c5\u3059\u308b\u3002\n\nMockito\u3084Robolectric\u306eShadow\u3092\u4f7f\u3044\u3001\u672c\u756a\u30b3\u30fc\u30c9\u3092\u4fee\u6b63\u3057\u306a\u3044\u3088\u3046\u306b\u30c6\u30b9\u30c8\u3092\u66f8\u304f\u3002\n\n\n\u3084\u3063\u305f\u3053\u3068\n\nbuild.gradle\nbuild.gradle\u3067\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30c6\u30b9\u30c8\u7528\u306e\u5404\u7a2e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3044\u307e\u3059\u3002\n    testCompile 'junit:junit:4.12'\n    testCompile 'org.mockito:mockito-core:1.10.19'\n    testCompile \"org.robolectric:robolectric:3.1\"\n    testCompile \"org.robolectric:shadows-support-v4:3.1\"\n    testCompile \"org.robolectric:shadows-multidex:3.0\"\n    testCompile \"com.squareup.okhttp3:mockwebserver:3.4.1\"\n\n\nMockWebServer\u3068\u901a\u4fe1\u3055\u305b\u308b\u305f\u3081\u3001Retrofit\u306ebaseUrl\u3092\u66f8\u304d\u63db\u3048\u308b\nrobolectric.properties\u3092\u4f5c\u6210\u3057\u3001\u30c6\u30b9\u30c8\u7528\u306eApplication\u7d99\u627f\u30af\u30e9\u30b9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\nrobolectric.properties\napplication=com.hoge.StubApp\nsdk=23\n\n\n\u307e\u305f\u3001SDK\u309223\u306b\u3059\u308b\u3053\u3068\u3067NoClassDefFoundError\u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u3001GL\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5b9a\u7fa9\u3060\u3051\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\u53c2\u8003: https://github.com/robolectric/robolectric-gradle-plugin/issues/145#issuecomment-95456798\npackage javax.microedition.khronos.opengles;\n\npublic interface GL {\n}\n\nStubApp\u30af\u30e9\u30b9\u5185\u3067\u3001Mockito\u306espy\u3092\u5229\u7528\u3057\u3066\u3001\u6539\u3056\u3093\u3057\u305fURL\u3067ApiClient\u3092\u521d\u671f\u5316\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n\nStubApp.java\npublic class StubApp extends Application {\n\n    public void initializeBaseUrl(MockWebServer server) {\n        StubApp spiedApp = spy(this);\n        when(spiedApp.getString(R.string.api_base_version)).thenReturn(server.url(\"/api/1.0.0/\").toString());\n\n        ApiClient.getInstance().initialize(spiedApp);\n    }\n}\n\n\n\u3053\u308c\u3067\u3001initializeBaseUrl\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001Fragment\u5185\u306a\u3069\u3067\u53d6\u5f97\u3067\u304d\u308bHogeService\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u5411\u304d\u5148\u3092\u5909\u3048\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3057\u305f\u3002\n\nMockWebServer\u3092\u8d77\u52d5\u30fb\u505c\u6b62\u3059\u308b\nMockWebServer\u306fTestRule\u3092\u7d99\u627f\u3057\u3066\u304a\u308a\u3001@Rule\u3092\u4ed8\u3051\u3066\u304a\u304f\u3053\u3068\u3067\u3001\u81ea\u52d5\u3067\u8d77\u52d5\u30fb\u505c\u6b62\u3092\u884c\u3063\u3066\u304f\u308c\u307e\u3059\u3002\n\uff08\u4ee5\u524d\u306fMockWebServerRule\u3068\u3044\u3046\u5225\u30af\u30e9\u30b9\u3060\u3063\u305f\u3088\u3046\u3067\u3059\u304c\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u30a2\u30c3\u30d7\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u7d71\u5408\u3055\u308c\u305f\u3088\u3046\u3067\u3059\u3002\uff09\n\nSomeFragmentTest.java\n@RunWith(CustomRobolectricTestRunner.class)\n@Config(shadows = {ShadowOkHttpClient.class})\npublic class SomeFragmentTest {\n    @Rule\n    public MockWebServer server = new MockWebServer();\n\n    private SomeFragment fragment;\n\n    @Before\n    public void setup() throws IOException {\n        fragment = new SomeFragment();\n        startFragment(fragment, SomeActivity.class);\n\n        ((StubApp) RuntimeEnvironment.application).initializeBaseUrl(server);\n    }\n...\n\n\n\nAPI\u306ecallback\u3092\u5373\u5ea7\u306b\u5b9f\u884c\u3059\u308b\u3088\u3046\u306b\u3059\u308b\n\u901a\u5e38\u3001enqueue\u3057\u305fretrofit2.Callback\u306e\u5404\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u975e\u540c\u671f\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n\u305d\u306e\u307e\u307e\u3060\u3068\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u5f85\u305f\u305a\u306bassert\u3092\u884c\u3046\u3053\u3068\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u3001\u6b63\u3057\u3044\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u305b\u3093\u3002\n\u305d\u306e\u305f\u3081\u3001Test\u30af\u30e9\u30b9\u3067\u8a2d\u5b9a\u3057\u3066\u3044\u305f CustomRobolectricTestRunner \u3068 ShadowOkHttpClient \u304c\u5fc5\u8981\u306b\u306a\u3063\u3066\u304d\u307e\u3059\u3002\n\nCustomRobolectricTestRunner.java\npublic class CustomRobolectricTestRunner extends RobolectricGradleTestRunner {\n    public CustomRobolectricTestRunner(Class<?> klass) throws InitializationError {\n        super(klass);\n    }\n\n    @Override\n    protected ShadowMap createShadowMap() {\n        return super.createShadowMap().newBuilder()\n                .addShadowClass(ShadowOkHttpClient.class)\n                .build();\n    }\n\n    public InstrumentationConfiguration createClassLoaderConfig() {\n        return InstrumentationConfiguration.newBuilder()\n                .addInstrumentedClass(OkHttpClient.class.getName())\n                .build();\n    }\n}\n\n\n\nShadowOkHttpClient.java\n@Implements(OkHttpClient.class)\npublic class ShadowOkHttpClient {\n    @RealObject\n    OkHttpClient realObject;\n\n    @Implementation\n    public OkHttpClient.Builder newBuilder() {\n        return Shadow.directlyOn(realObject, OkHttpClient.class)\n                .newBuilder()\n                .dispatcher(new Dispatcher(new AbstractExecutorService() {\n                    private boolean shuttingDown = false;\n                    private boolean terminated = false;\n\n                    @Override\n                    public void shutdown() {\n                        this.shuttingDown = true;\n                        this.terminated = true;\n                    }\n\n                    @NonNull\n                    @Override\n                    public List<Runnable> shutdownNow() {\n                        return new ArrayList<>();\n                    }\n\n                    @Override\n                    public boolean isShutdown() {\n                        return this.shuttingDown;\n                    }\n\n                    @Override\n                    public boolean isTerminated() {\n                        return this.terminated;\n                    }\n\n                    @Override\n                    public boolean awaitTermination(long timeout, @NonNull TimeUnit unit) throws InterruptedException {\n                        return false;\n                    }\n\n                    @Override\n                    public void execute(@NonNull Runnable command) {\n                        command.run();\n                    }\n                }));\n    }\n}\n\n\nCustomRobolectricTestRunner\u3067\u306f\u3001OkHttpClient\u304c\u5229\u7528\u3055\u308c\u305f\u3068\u304d\u306bShadowOkHttpClient\u3092\u5229\u7528\u3059\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\nShadowOkHttpClient\u3067\u306f\u3001newBuilder\u30e1\u30bd\u30c3\u30c9\u3092\u66f8\u304d\u63db\u3048\u3066\u3044\u307e\u3059\u3002\n\u672c\u6765newBuilder\u3067\u8fd4\u5374\u3059\u308b\u306f\u305a\u3060\u3063\u305f\u3082\u306e\u306b\u3001\u300c\u5373\u6642\u5b9f\u884c\u3059\u308bdispatcher\u300d\u3092\u8a2d\u5b9a\u3057\u3001\u305d\u308c\u3092\u8fd4\u5374\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30c6\u30b9\u30c8\u3092\u8a18\u8ff0\u3059\u308b\n\nHogeFragment.java\npublic class SomeFragmentTest {\n...\n    @Test\n    public void clickButton_showSignUpActivity() throws Exception {\n        server.enqueue(new MockResponse()\n                .setResponseCode(401)\n                .setBody(\"{\\\"message\\\":\\\"\u30e6\u30fc\u30b6\u30fc\u304c\u5b58\u5728\u3057\u307e\u305b\u3093\u3002\\\"}\"));\n\n        fragment.getView().findViewById(R.id.some_button).performClick();\n\n        assertThat(server.takeRequest().getPath(), is(\"/login\"));\n\n        Intent intent = Shadows.shadowOf(fragment.getActivity()).getNextStartedActivity();\n        Intent expect = new Intent(fragment.getActivity(), SignUpActivity.class);\n        assertThat(intent.filterEquals(expect), is(true));\n    }\n\n\n\u203b\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\u304b\u3089\u304b\u306a\u308a\u6539\u5909\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u52d5\u304b\u306a\u304b\u3063\u305f\u3089\u3054\u3081\u3093\u306a\u3055\u3044\u3002\nsome_button\u3092\u62bc\u3057\u305f\u6642\u306b\u3001\u524d\u8ff0\u306e\u300c\u30ed\u30b0\u30a4\u30f3API\u304c401\u3060\u3063\u305f\u3089\u767b\u9332Activity\u3092\u8868\u793a\u3059\u308b\u300d\u6a5f\u80fd\u304c\u3042\u308b\u3068\u601d\u3063\u3066\u304f\u3060\u3055\u3044\u3002\nperformClick\u3067\u3001\u30af\u30ea\u30c3\u30af\u30a4\u30d9\u30f3\u30c8\u3092\u64ec\u4f3c\u7684\u306b\u767a\u751f\u3055\u305b\u3001getNextStartedActivity\u3067\u6b21\u306b\u9077\u79fb\u3059\u308bActivity\u3092\u53d6\u5f97\u3001\u305d\u308c\u304c\u6b63\u3057\u3044\u304b\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u307e\u3068\u3081\nMockito\u3084Robolectric\u306eShadow\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u65e2\u5b58\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u63db\u3048\u305a\u3001\u3042\u308b\u7a0b\u5ea6\u8907\u96d1\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308bFragment\u306e\u30c6\u30b9\u30c8\u304c\u51fa\u6765\u305d\u3046\u3067\u3059\u3002\n\u305f\u3060\u3001newBuilder\u3092\u30d5\u30c3\u30af\u3057\u3066\u3044\u305f\u308a\u3068\u3001\u3042\u307e\u308a\u7dba\u9e97\u306a\u89e3\u6c7a\u65b9\u6cd5\u3067\u306f\u7121\u3044\u6c17\u304c\u3057\u3066\u3044\u307e\u3059\u3002\n\u30c6\u30b9\u30c8\u3057\u3084\u3059\u3044\u8a2d\u8a08\u3063\u3066\u5927\u4e8b\u3067\u3059\u306d\u3002\n## \u4f55\u304c\u3057\u305f\u3044\u304b\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u3092\u8003\u616e\u3057\u3066\u306a\u3044Fragment\u306e\u30b3\u30fc\u30c9\u306b\u5bfe\u3057\u3066\u3001\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u304d\u305f\u3044\u3002\u65e2\u5b58\u30b3\u30fc\u30c9\u3092\u5909\u66f4\u305b\u305a\u306b\u3002\n\u30c6\u30b9\u30c8\u3068\u3057\u3066\u306f\u4f8b\u3048\u3070\u3001API\u30a2\u30af\u30bb\u30b9\u306e\u7d50\u679c\u3001\u7279\u5b9a\u306e\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u5834\u5408\u306f\u5225\u753b\u9762\u306b\u9077\u79fb\u3059\u308b\u3068\u304b\u3002\n\n## \u65e2\u5b58\u30b3\u30fc\u30c9\u306e\u4ed5\u7d44\u307f\n\nOkHttp+Retrofit\u3067API\u30a2\u30af\u30bb\u30b9\u3092\u7ba1\u7406\u3057\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001API\u306e\u63a5\u7d9a\u5148\u304c\u672c\u756a\u30fb\u30b9\u30c6\u30fc\u30b8\u30f3\u30b0\u30fb\u958b\u767a\u306e3\u74b0\u5883\u3042\u308b\u306e\u3067\u3001`strings.xml`\u3092\u5404build variants\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u7f6e\u3044\u3066\u3044\u307e\u3059\u3002\n\nApiClient\u3068\u3044\u3046\u30af\u30e9\u30b9\u3067\u3001Retrofit\u306e\u30b5\u30fc\u30d3\u30b9\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u3066\u3044\u307e\u3059\u3002\n\uff08\u30db\u30f3\u30c8\u306f\u3001Dagger\u3068\u304b\u3067DI\u3057\u305f\u307b\u3046\u304c\u826f\u3055\u305d\u3046\u3067\u3059\u304c\u3002\uff09\n\n```java:ApiClient.java\npublic class ApiClient {\n    private static ApiClient sApiClient;\n\n    private HogeService hogeService;\n\n    private ApiClient() {\n    }\n\n    public static ApiClient getInstance() {\n        if (sApiClient == null) {\n            sApiClient = new ApiClient();\n        }\n        return sApiClient;\n    }\n\n    public void initialize(final Context c) {\n        OkHttpClient okHttpClient = new OkHttpClient().newBuilder()\n                .addInterceptor(new HttpLoggingInterceptor().setLevel(BuildConfig.DEBUG ? HttpLoggingInterceptor.Level.BODY : HttpLoggingInterceptor.Level.NONE))\n                .build();\n\n        Retrofit retrofit = new Retrofit.Builder()\n                .baseUrl(context.getString(R.string.api_base_url))\n                .addConverterFactory(GsonConverterFactory.create())\n                .client(okHttpClient)\n                .build();\n\n        hogeService = retrofit.create(HogeService.class);\n    }\n\n    public HogeService getHogeService() {\n        return hogeService;\n    }\n}\n```\n\n\u4e0a\u8a18\u306einitialize\u30e1\u30bd\u30c3\u30c9\u306f\u3001Application\u7d99\u627f\u30af\u30e9\u30b9\u304b\u3089\u3001onCreate\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u547c\u3073\u3060\u3055\u308c\u307e\u3059\u3002\n\nAPI\u3092\u5b9f\u884c\u3059\u308bFragment\u306e\u65b9\u3067\u306f\u3001\u30af\u30ea\u30c3\u30af\u30a4\u30d9\u30f3\u30c8\u306a\u3069\u3092\u5951\u6a5f\u306b\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n\n```java:SomeFragment.java\nApiClient.getInstance().getHogeService().login(loginInfo).enqueue(new Callback<UserInfo>() {\n    @Override\n    public void onResponse(Call<UserInfo> call, Response<UserInfo> response) {\n        if (response.code() == 401) {\n            Intent intent = new Intent(activity, SignUpActivity.class);\n            startActivity(intent);\n            return;\n        }\n        // \u30ed\u30b0\u30a4\u30f3\u6210\u529f\u3057\u305f\u3068\u304d\u306e\u51e6\u7406\n    }\n\n    @Override\n    public void onFailure(Call<UserInfo> call, Throwable t) {\n    }\n});\n```\n\n\u4e0a\u8a18\u3067\u306f\u3001\u4f8b\u3068\u3057\u3066\u3001\u300c\u30ed\u30b0\u30a4\u30f3API\u304c401\u3060\u3063\u305f\u3089\u767b\u9332Activity\u3092\u8868\u793a\u3059\u308b\u300d\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u3092 **\u30b3\u30fc\u30c9\u3092\u5909\u66f4\u305b\u305a\u306b** \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\uff08\u65e2\u5b58\u30b3\u30fc\u30c9\u306e\u554f\u984c\u70b9\u306f\u30b9\u30eb\u30fc\u3057\u3001\u30c6\u30b9\u30c8\u3092\u66f8\u304f\u3053\u3068\u3092\u512a\u5148\uff09\n\n## \u57fa\u672c\u65b9\u91dd\n\n- [Robolectric](http://robolectric.org/)\u3092\u5229\u7528\u3057\u3066\u3001Fragment\u306e\u751f\u6210\u3001\u30a4\u30d9\u30f3\u30c8\u306e\u767a\u751f\u3092\u884c\u3046\u3002\n- OkHttp\u306e[MockWebServer](https://github.com/square/okhttp/tree/master/mockwebserver)\u3092\u5229\u7528\u3057\u3066\u3001API\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u507d\u88c5\u3059\u308b\u3002\n- [Mockito](http://mockito.org/)\u3084Robolectric\u306eShadow\u3092\u4f7f\u3044\u3001\u672c\u756a\u30b3\u30fc\u30c9\u3092\u4fee\u6b63\u3057\u306a\u3044\u3088\u3046\u306b\u30c6\u30b9\u30c8\u3092\u66f8\u304f\u3002\n\n## \u3084\u3063\u305f\u3053\u3068\n\n### build.gradle\n\nbuild.gradle\u3067\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30c6\u30b9\u30c8\u7528\u306e\u5404\u7a2e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3044\u307e\u3059\u3002\n\n```\n    testCompile 'junit:junit:4.12'\n    testCompile 'org.mockito:mockito-core:1.10.19'\n    testCompile \"org.robolectric:robolectric:3.1\"\n    testCompile \"org.robolectric:shadows-support-v4:3.1\"\n    testCompile \"org.robolectric:shadows-multidex:3.0\"\n    testCompile \"com.squareup.okhttp3:mockwebserver:3.4.1\"\n```\n\n### MockWebServer\u3068\u901a\u4fe1\u3055\u305b\u308b\u305f\u3081\u3001Retrofit\u306ebaseUrl\u3092\u66f8\u304d\u63db\u3048\u308b\n\n`robolectric.properties`\u3092\u4f5c\u6210\u3057\u3001\u30c6\u30b9\u30c8\u7528\u306eApplication\u7d99\u627f\u30af\u30e9\u30b9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n```robolectric.properties\napplication=com.hoge.StubApp\nsdk=23\n```\n\n\u307e\u305f\u3001SDK\u309223\u306b\u3059\u308b\u3053\u3068\u3067NoClassDefFoundError\u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u3001GL\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5b9a\u7fa9\u3060\u3051\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\u53c2\u8003: https://github.com/robolectric/robolectric-gradle-plugin/issues/145#issuecomment-95456798\n\n```\npackage javax.microedition.khronos.opengles;\n\npublic interface GL {\n}\n```\n\nStubApp\u30af\u30e9\u30b9\u5185\u3067\u3001Mockito\u306e`spy`\u3092\u5229\u7528\u3057\u3066\u3001\u6539\u3056\u3093\u3057\u305fURL\u3067`ApiClient`\u3092\u521d\u671f\u5316\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n\n```java:StubApp.java\npublic class StubApp extends Application {\n\n    public void initializeBaseUrl(MockWebServer server) {\n        StubApp spiedApp = spy(this);\n        when(spiedApp.getString(R.string.api_base_version)).thenReturn(server.url(\"/api/1.0.0/\").toString());\n\n        ApiClient.getInstance().initialize(spiedApp);\n    }\n}\n```\n\n\u3053\u308c\u3067\u3001`initializeBaseUrl`\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001Fragment\u5185\u306a\u3069\u3067\u53d6\u5f97\u3067\u304d\u308b`HogeService`\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u5411\u304d\u5148\u3092\u5909\u3048\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3057\u305f\u3002\n\n### MockWebServer\u3092\u8d77\u52d5\u30fb\u505c\u6b62\u3059\u308b\n\nMockWebServer\u306f`TestRule`\u3092\u7d99\u627f\u3057\u3066\u304a\u308a\u3001`@Rule`\u3092\u4ed8\u3051\u3066\u304a\u304f\u3053\u3068\u3067\u3001\u81ea\u52d5\u3067\u8d77\u52d5\u30fb\u505c\u6b62\u3092\u884c\u3063\u3066\u304f\u308c\u307e\u3059\u3002\n\n\uff08\u4ee5\u524d\u306f`MockWebServerRule`\u3068\u3044\u3046\u5225\u30af\u30e9\u30b9\u3060\u3063\u305f\u3088\u3046\u3067\u3059\u304c\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u30a2\u30c3\u30d7\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u7d71\u5408\u3055\u308c\u305f\u3088\u3046\u3067\u3059\u3002\uff09\n\n```java:SomeFragmentTest.java\n@RunWith(CustomRobolectricTestRunner.class)\n@Config(shadows = {ShadowOkHttpClient.class})\npublic class SomeFragmentTest {\n    @Rule\n    public MockWebServer server = new MockWebServer();\n\n    private SomeFragment fragment;\n\n    @Before\n    public void setup() throws IOException {\n        fragment = new SomeFragment();\n        startFragment(fragment, SomeActivity.class);\n\n        ((StubApp) RuntimeEnvironment.application).initializeBaseUrl(server);\n    }\n...\n```\n\n### API\u306ecallback\u3092\u5373\u5ea7\u306b\u5b9f\u884c\u3059\u308b\u3088\u3046\u306b\u3059\u308b\n\n\u901a\u5e38\u3001`enqueue`\u3057\u305f`retrofit2.Callback`\u306e\u5404\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u975e\u540c\u671f\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n\u305d\u306e\u307e\u307e\u3060\u3068\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u5f85\u305f\u305a\u306bassert\u3092\u884c\u3046\u3053\u3068\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u3001\u6b63\u3057\u3044\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u305b\u3093\u3002\n\u305d\u306e\u305f\u3081\u3001Test\u30af\u30e9\u30b9\u3067\u8a2d\u5b9a\u3057\u3066\u3044\u305f `CustomRobolectricTestRunner` \u3068 `ShadowOkHttpClient` \u304c\u5fc5\u8981\u306b\u306a\u3063\u3066\u304d\u307e\u3059\u3002\n\n```java:CustomRobolectricTestRunner.java\npublic class CustomRobolectricTestRunner extends RobolectricGradleTestRunner {\n    public CustomRobolectricTestRunner(Class<?> klass) throws InitializationError {\n        super(klass);\n    }\n\n    @Override\n    protected ShadowMap createShadowMap() {\n        return super.createShadowMap().newBuilder()\n                .addShadowClass(ShadowOkHttpClient.class)\n                .build();\n    }\n\n    public InstrumentationConfiguration createClassLoaderConfig() {\n        return InstrumentationConfiguration.newBuilder()\n                .addInstrumentedClass(OkHttpClient.class.getName())\n                .build();\n    }\n}\n```\n\n```java:ShadowOkHttpClient.java\n@Implements(OkHttpClient.class)\npublic class ShadowOkHttpClient {\n    @RealObject\n    OkHttpClient realObject;\n\n    @Implementation\n    public OkHttpClient.Builder newBuilder() {\n        return Shadow.directlyOn(realObject, OkHttpClient.class)\n                .newBuilder()\n                .dispatcher(new Dispatcher(new AbstractExecutorService() {\n                    private boolean shuttingDown = false;\n                    private boolean terminated = false;\n\n                    @Override\n                    public void shutdown() {\n                        this.shuttingDown = true;\n                        this.terminated = true;\n                    }\n\n                    @NonNull\n                    @Override\n                    public List<Runnable> shutdownNow() {\n                        return new ArrayList<>();\n                    }\n\n                    @Override\n                    public boolean isShutdown() {\n                        return this.shuttingDown;\n                    }\n\n                    @Override\n                    public boolean isTerminated() {\n                        return this.terminated;\n                    }\n\n                    @Override\n                    public boolean awaitTermination(long timeout, @NonNull TimeUnit unit) throws InterruptedException {\n                        return false;\n                    }\n\n                    @Override\n                    public void execute(@NonNull Runnable command) {\n                        command.run();\n                    }\n                }));\n    }\n}\n```\n\n`CustomRobolectricTestRunner`\u3067\u306f\u3001`OkHttpClient`\u304c\u5229\u7528\u3055\u308c\u305f\u3068\u304d\u306b`ShadowOkHttpClient`\u3092\u5229\u7528\u3059\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n`ShadowOkHttpClient`\u3067\u306f\u3001`newBuilder`\u30e1\u30bd\u30c3\u30c9\u3092\u66f8\u304d\u63db\u3048\u3066\u3044\u307e\u3059\u3002\n\u672c\u6765`newBuilder`\u3067\u8fd4\u5374\u3059\u308b\u306f\u305a\u3060\u3063\u305f\u3082\u306e\u306b\u3001\u300c\u5373\u6642\u5b9f\u884c\u3059\u308bdispatcher\u300d\u3092\u8a2d\u5b9a\u3057\u3001\u305d\u308c\u3092\u8fd4\u5374\u3057\u3066\u3044\u307e\u3059\u3002\n\n### \u30c6\u30b9\u30c8\u3092\u8a18\u8ff0\u3059\u308b\n\n```java:HogeFragment.java\npublic class SomeFragmentTest {\n...\n    @Test\n    public void clickButton_showSignUpActivity() throws Exception {\n        server.enqueue(new MockResponse()\n                .setResponseCode(401)\n                .setBody(\"{\\\"message\\\":\\\"\u30e6\u30fc\u30b6\u30fc\u304c\u5b58\u5728\u3057\u307e\u305b\u3093\u3002\\\"}\"));\n\n        fragment.getView().findViewById(R.id.some_button).performClick();\n\n        assertThat(server.takeRequest().getPath(), is(\"/login\"));\n\n        Intent intent = Shadows.shadowOf(fragment.getActivity()).getNextStartedActivity();\n        Intent expect = new Intent(fragment.getActivity(), SignUpActivity.class);\n        assertThat(intent.filterEquals(expect), is(true));\n    }\n```\n\n\u203b\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\u304b\u3089\u304b\u306a\u308a\u6539\u5909\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u52d5\u304b\u306a\u304b\u3063\u305f\u3089\u3054\u3081\u3093\u306a\u3055\u3044\u3002\n\n`some_button`\u3092\u62bc\u3057\u305f\u6642\u306b\u3001\u524d\u8ff0\u306e\u300c\u30ed\u30b0\u30a4\u30f3API\u304c401\u3060\u3063\u305f\u3089\u767b\u9332Activity\u3092\u8868\u793a\u3059\u308b\u300d\u6a5f\u80fd\u304c\u3042\u308b\u3068\u601d\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n`performClick`\u3067\u3001\u30af\u30ea\u30c3\u30af\u30a4\u30d9\u30f3\u30c8\u3092\u64ec\u4f3c\u7684\u306b\u767a\u751f\u3055\u305b\u3001`getNextStartedActivity`\u3067\u6b21\u306b\u9077\u79fb\u3059\u308bActivity\u3092\u53d6\u5f97\u3001\u305d\u308c\u304c\u6b63\u3057\u3044\u304b\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\n\n## \u307e\u3068\u3081\n\nMockito\u3084Robolectric\u306eShadow\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u65e2\u5b58\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u63db\u3048\u305a\u3001\u3042\u308b\u7a0b\u5ea6\u8907\u96d1\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308bFragment\u306e\u30c6\u30b9\u30c8\u304c\u51fa\u6765\u305d\u3046\u3067\u3059\u3002\n\u305f\u3060\u3001`newBuilder`\u3092\u30d5\u30c3\u30af\u3057\u3066\u3044\u305f\u308a\u3068\u3001\u3042\u307e\u308a\u7dba\u9e97\u306a\u89e3\u6c7a\u65b9\u6cd5\u3067\u306f\u7121\u3044\u6c17\u304c\u3057\u3066\u3044\u307e\u3059\u3002\n\u30c6\u30b9\u30c8\u3057\u3084\u3059\u3044\u8a2d\u8a08\u3063\u3066\u5927\u4e8b\u3067\u3059\u306d\u3002\n", "tags": ["Android", "OkHttp", "robolectric", "\u30c6\u30b9\u30c8"]}