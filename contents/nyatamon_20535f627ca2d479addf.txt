{"context": " More than 1 year has passed since last update.\n\n\u74b0\u5883\n\nof_v0.8.4_vs_release\nVisual Studio Express 2012 for Windows\nkinect v2\nWindows Embedded 8\n\n\n\u5404\u7a2e\u30d1\u30b9\u306e\u8a2d\u5b9a\n\u307e\u305a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u958b\u304f\n1.\u69cb\u6210\u30d7\u30ed\u30d1\u30c6\u30a3 > C/C++ > \u8ffd\u52a0\u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b$(KINECTSDK20_DIR)\u00a5inc;\u3092\u8ffd\u52a0\n\n2.\u69cb\u6210\u30d7\u30ed\u30d1\u30c6\u30a3 > \u30ea\u30f3\u30ab\u30fc > \u5168\u822c > \u8ffd\u52a0\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b$(KINECTSDK20_DIR)\u00a5lib\u00a5x86;\u3092\u8ffd\u52a0\n\n3.\u69cb\u6210\u30d7\u30ed\u30d1\u30c6\u30a3 > \u30ea\u30f3\u30ab\u30fc > \u5165\u529b\u306bKinect20.lib\u3092\u8ffd\u52a0\n\n4.\u69cb\u6210\u30d7\u30ed\u30d1\u30c6\u30a3 > VC++\u30c7\u30a3\u30ec\u30af\u30c8\u30ea > \u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b$(KINECTSDK20_DIR)\\inc;\u3092\u5165\u529b\n5.\u69cb\u6210\u30d7\u30ed\u30d1\u30c6\u30a3 > VC++\u30c7\u30a3\u30ec\u30af\u30c8\u30ea > \u30e9\u30a4\u30d6\u30e9\u30ea\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b$(KINECTSDK20_DIR)\\lib\\x86;\u3092\u5165\u529b\n\n\n\u30ab\u30e9\u30fc\u753b\u50cf\u306e\u8868\u793a\n\nofApp.h\n\n#pragma once\n\n#include \"ofMain.h\"\n#include <kinect.h>\n\ntemplate<class Interface>\ninline void SafeRelease(Interface *& pInterfaceToRelease)\n{\n    if (pInterfaceToRelease != NULL) {\n        pInterfaceToRelease->Release();\n        pInterfaceToRelease = NULL;\n    }\n}\n\nclass ofApp : public ofBaseApp{\n\n    public:\n        void setup();\n        void update();\n        void draw();\n\n        void keyPressed(int key);\n        void keyReleased(int key);\n        void mouseMoved(int x, int y );\n        void mouseDragged(int x, int y, int button);\n        void mousePressed(int x, int y, int button);\n        void mouseReleased(int x, int y, int button);\n        void windowResized(int w, int h);\n        void dragEvent(ofDragInfo dragInfo);\n        void gotMessage(ofMessage msg);\n        bool initKinect();\n\n        IKinectSensor *sensor;\n\n        IColorFrameSource *colorSource;\n        IColorFrameSource *colorFrameSource;\n        IColorFrameReader *colorReader;\n        IFrameDescription* colorDescription;\n        int colorWidth, colorHeight;\n        unsigned int colorBytesPerPixels;\n\n        ofImage colorImage;\n\n};\n\n\n\n\n\nofApp.cpp\n\n#include \"ofApp.h\"\n\n//--------------------------------------------------------------\nvoid ofApp::setup(){\n    ofSetWindowShape(1920, 1080);\n    ofSetFrameRate(30);\n\n    if (!initKinect()) exit();\n\n    colorImage.allocate(colorWidth, colorHeight, OF_IMAGE_COLOR_ALPHA);\n}\n\n//--------------------------------------------------------------\nvoid ofApp::update(){\n    IColorFrame* colorFrame = nullptr;\n    HRESULT hResult = colorReader->AcquireLatestFrame(&colorFrame);\n\n    if (SUCCEEDED(hResult)) {\n        hResult = colorFrame->CopyConvertedFrameDataToArray(colorHeight * colorWidth * colorBytesPerPixels, colorImage.getPixels(), ColorImageFormat_Rgba);\n        colorImage.update();\n    }\n\n    SafeRelease(colorFrame);\n}\n\n//--------------------------------------------------------------\nvoid ofApp::draw(){\n    colorImage.draw(0,0);\n}\n\nbool ofApp:: initKinect() {\n    HRESULT hResult = S_OK;\n    hResult = GetDefaultKinectSensor(&sensor);\n    if (FAILED(hResult)) {\n        std::cerr << \"Error : GetDefaultKinectSensor\" << std::endl;\n        return -1;\n    }\n\n    hResult = sensor->Open();\n    if (FAILED(hResult)) {\n        std::cerr << \"Error : IKinectSensor::Open()\" << std::endl;\n        return -1;\n    }\n\n    hResult = sensor->get_ColorFrameSource(&colorSource);\n    if (FAILED(hResult)) {\n        std::cerr << \"Error : IKinectSensor::get_ColorFrameSource()\" << std::endl;\n        return -1;\n    }\n\n    hResult = colorSource->OpenReader(&colorReader);\n    if (FAILED(hResult)) {\n        std::cerr << \"Error : IColorFrameSource::OpenReader()\" << std::endl;\n        return -1;\n    }\n\n    hResult = colorSource->CreateFrameDescription(ColorImageFormat::ColorImageFormat_Rgba, &colorDescription);\n    if (FAILED(hResult)) {\n        std::cerr << \"Error : IColorFrameSource::get_FrameDescription()\" << std::endl;\n        return -1;\n    }\n    colorDescription->get_Width(&colorWidth);\n    colorDescription->get_Height(&colorHeight);\n    colorDescription->get_BytesPerPixel(&colorBytesPerPixels);\n\n    return true;\n}\n\n//--------------------------------------------------------------\nvoid ofApp::keyPressed(int key){\n\n}\n\n//--------------------------------------------------------------\nvoid ofApp::keyReleased(int key){\n\n}\n\n//--------------------------------------------------------------\nvoid ofApp::mouseMoved(int x, int y ){\n\n}\n\n//--------------------------------------------------------------\nvoid ofApp::mouseDragged(int x, int y, int button){\n\n}\n\n//--------------------------------------------------------------\nvoid ofApp::mousePressed(int x, int y, int button){\n\n}\n\n//--------------------------------------------------------------\nvoid ofApp::mouseReleased(int x, int y, int button){\n\n}\n\n//--------------------------------------------------------------\nvoid ofApp::windowResized(int w, int h){\n\n}\n\n//--------------------------------------------------------------\nvoid ofApp::gotMessage(ofMessage msg){\n\n}\n\n//--------------------------------------------------------------\nvoid ofApp::dragEvent(ofDragInfo dragInfo){ \n\n}\n\n\n\n\n\n\u53c2\u8003\n\nhttp://www.hirotakaster.com/weblog/openframeworks-0-8-3-and-kinect-v2/\nhttp://www.buildinsider.net/small/kinectv2cpp/02\n\n## \u74b0\u5883\n* of_v0.8.4_vs_release\n* Visual Studio Express 2012 for Windows\n* kinect v2\n* Windows Embedded 8\n\n\n## \u5404\u7a2e\u30d1\u30b9\u306e\u8a2d\u5b9a\n\u307e\u305a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u958b\u304f\n\n1.\u69cb\u6210\u30d7\u30ed\u30d1\u30c6\u30a3 > C/C++ > \u8ffd\u52a0\u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b**$(KINECTSDK20_DIR)\u00a5inc;**\u3092\u8ffd\u52a0\n\n![1.JPG](https://qiita-image-store.s3.amazonaws.com/0/42289/ae6aa710-6899-1b9e-16ad-fd7cabc3d6e7.jpeg)\n\n\n\n\n2.\u69cb\u6210\u30d7\u30ed\u30d1\u30c6\u30a3 > \u30ea\u30f3\u30ab\u30fc > \u5168\u822c > \u8ffd\u52a0\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b**$(KINECTSDK20_DIR)\u00a5lib\u00a5x86;**\u3092\u8ffd\u52a0\n\n![2.JPG](https://qiita-image-store.s3.amazonaws.com/0/42289/fe82b13d-116f-74b5-69b7-f4d6018ed9ce.jpeg)\n\n\n\n\n3.\u69cb\u6210\u30d7\u30ed\u30d1\u30c6\u30a3 > \u30ea\u30f3\u30ab\u30fc > \u5165\u529b\u306b**Kinect20.lib**\u3092\u8ffd\u52a0\n\n![5.JPG](https://qiita-image-store.s3.amazonaws.com/0/42289/0cd84c0b-9dc1-697d-7e2f-4e8a5b16b3e0.jpeg)\n\n\n\n\n\n4.\u69cb\u6210\u30d7\u30ed\u30d1\u30c6\u30a3 > VC++\u30c7\u30a3\u30ec\u30af\u30c8\u30ea > \u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b$(KINECTSDK20_DIR)\\inc;\u3092\u5165\u529b\n5.\u69cb\u6210\u30d7\u30ed\u30d1\u30c6\u30a3 > VC++\u30c7\u30a3\u30ec\u30af\u30c8\u30ea > \u30e9\u30a4\u30d6\u30e9\u30ea\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b$(KINECTSDK20_DIR)\\lib\\x86;\u3092\u5165\u529b\n\n![4.JPG](https://qiita-image-store.s3.amazonaws.com/0/42289/f72c8b01-1c77-7011-ac22-23ca0d650a43.jpeg)\n\n##\u30ab\u30e9\u30fc\u753b\u50cf\u306e\u8868\u793a\n```cpp:ofApp.h\n\n#pragma once\n\n#include \"ofMain.h\"\n#include <kinect.h>\n\ntemplate<class Interface>\ninline void SafeRelease(Interface *& pInterfaceToRelease)\n{\n\tif (pInterfaceToRelease != NULL) {\n\t\tpInterfaceToRelease->Release();\n\t\tpInterfaceToRelease = NULL;\n\t}\n}\n\nclass ofApp : public ofBaseApp{\n\n\tpublic:\n\t\tvoid setup();\n\t\tvoid update();\n\t\tvoid draw();\n\n\t\tvoid keyPressed(int key);\n\t\tvoid keyReleased(int key);\n\t\tvoid mouseMoved(int x, int y );\n\t\tvoid mouseDragged(int x, int y, int button);\n\t\tvoid mousePressed(int x, int y, int button);\n\t\tvoid mouseReleased(int x, int y, int button);\n\t\tvoid windowResized(int w, int h);\n\t\tvoid dragEvent(ofDragInfo dragInfo);\n\t\tvoid gotMessage(ofMessage msg);\n\t\tbool initKinect();\n\n\t\tIKinectSensor *sensor;\n\n\t\tIColorFrameSource *colorSource;\n\t\tIColorFrameSource *colorFrameSource;\n\t\tIColorFrameReader *colorReader;\n\t\tIFrameDescription* colorDescription;\n\t\tint colorWidth, colorHeight;\n\t\tunsigned int colorBytesPerPixels;\n\n\t\tofImage colorImage;\n\t\t\n};\n\n\n```\n\n```cpp:ofApp.cpp\n\n#include \"ofApp.h\"\n\n//--------------------------------------------------------------\nvoid ofApp::setup(){\n\tofSetWindowShape(1920, 1080);\n\tofSetFrameRate(30);\n\n\tif (!initKinect()) exit();\n\n\tcolorImage.allocate(colorWidth, colorHeight, OF_IMAGE_COLOR_ALPHA);\n}\n\n//--------------------------------------------------------------\nvoid ofApp::update(){\n\tIColorFrame* colorFrame = nullptr;\n\tHRESULT hResult = colorReader->AcquireLatestFrame(&colorFrame);\n\n\tif (SUCCEEDED(hResult)) {\n\t\thResult = colorFrame->CopyConvertedFrameDataToArray(colorHeight * colorWidth * colorBytesPerPixels, colorImage.getPixels(), ColorImageFormat_Rgba);\n\t\tcolorImage.update();\n\t}\n\n\tSafeRelease(colorFrame);\n}\n\n//--------------------------------------------------------------\nvoid ofApp::draw(){\n\tcolorImage.draw(0,0);\n}\n\nbool ofApp:: initKinect() {\n\tHRESULT hResult = S_OK;\n\thResult = GetDefaultKinectSensor(&sensor);\n\tif (FAILED(hResult)) {\n\t\tstd::cerr << \"Error : GetDefaultKinectSensor\" << std::endl;\n\t\treturn -1;\n\t}\n\n\thResult = sensor->Open();\n\tif (FAILED(hResult)) {\n\t\tstd::cerr << \"Error : IKinectSensor::Open()\" << std::endl;\n\t\treturn -1;\n\t}\n\n\thResult = sensor->get_ColorFrameSource(&colorSource);\n\tif (FAILED(hResult)) {\n\t\tstd::cerr << \"Error : IKinectSensor::get_ColorFrameSource()\" << std::endl;\n\t\treturn -1;\n\t}\n\n\thResult = colorSource->OpenReader(&colorReader);\n\tif (FAILED(hResult)) {\n\t\tstd::cerr << \"Error : IColorFrameSource::OpenReader()\" << std::endl;\n\t\treturn -1;\n\t}\n\n\thResult = colorSource->CreateFrameDescription(ColorImageFormat::ColorImageFormat_Rgba, &colorDescription);\n\tif (FAILED(hResult)) {\n\t\tstd::cerr << \"Error : IColorFrameSource::get_FrameDescription()\" << std::endl;\n\t\treturn -1;\n\t}\n\tcolorDescription->get_Width(&colorWidth);\n\tcolorDescription->get_Height(&colorHeight);\n\tcolorDescription->get_BytesPerPixel(&colorBytesPerPixels);\n\n\treturn true;\n}\n\n//--------------------------------------------------------------\nvoid ofApp::keyPressed(int key){\n\n}\n\n//--------------------------------------------------------------\nvoid ofApp::keyReleased(int key){\n\n}\n\n//--------------------------------------------------------------\nvoid ofApp::mouseMoved(int x, int y ){\n\n}\n\n//--------------------------------------------------------------\nvoid ofApp::mouseDragged(int x, int y, int button){\n\n}\n\n//--------------------------------------------------------------\nvoid ofApp::mousePressed(int x, int y, int button){\n\n}\n\n//--------------------------------------------------------------\nvoid ofApp::mouseReleased(int x, int y, int button){\n\n}\n\n//--------------------------------------------------------------\nvoid ofApp::windowResized(int w, int h){\n\n}\n\n//--------------------------------------------------------------\nvoid ofApp::gotMessage(ofMessage msg){\n\n}\n\n//--------------------------------------------------------------\nvoid ofApp::dragEvent(ofDragInfo dragInfo){ \n\n}\n\n\n```\n\n\n## \u53c2\u8003\n> http://www.hirotakaster.com/weblog/openframeworks-0-8-3-and-kinect-v2/\n> http://www.buildinsider.net/small/kinectv2cpp/02\n", "tags": ["openFrameworks", "Kinect"]}