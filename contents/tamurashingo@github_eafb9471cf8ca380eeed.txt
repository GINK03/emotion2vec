{"context": " More than 1 year has passed since last update.\n\nClojure\u3067Dropwizard\u3092\u4f7f\u3046\n\nMotivation\n\nClojure\u3067\u3082\u59cb\u3081\u305f\u3044\n\u305d\u308c\u306a\u3089\u4f7f\u3044\u6163\u308c\u305fDropwizard\u3067\u3082\u4f7f\u3063\u3066API\u3067\u3082\u4f5c\u3063\u3066\u307f\u3088\u3046\n\n\n\u7d50\u8ad6\n\n\nio.dropwizard.Application\u3092\u7d99\u627f\u3059\u308b\u90e8\u5206\u306fJava\u3067\u66f8\u304f\n\u305d\u308c\u4ee5\u5916\u306fClojure\u3067\u66f8\u3044\u3066\u3082\u5927\u4e08\u592b\n\n\n\u69cb\u6210\nleiningen\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\nJava\u3068Clojure\u306e\u30bd\u30fc\u30b9\u3092\u5206\u3051\u308b\u305f\u3081\u3001src\u4e0b\u3067\u3055\u3089\u306b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u533a\u5207\u3063\u3066\u3044\u307e\u3059\u3002\n  ./\n    resources/\n      test.yml\n    src/\n      clojure/\n        test2/\n          Test2Configuration.clj\n          Test2Resource.clj\n      java/\n        test2/\n          Test2Service.java\n    project.clj\n\n\nTest2Service.java\u306e\u4e2d\u3067Clojure\u3067\u4f5c\u6210\u3057\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u53c2\u7167\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u5148\u306bClojure\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\nproject.clj\n(defproject test \"0.1.0-SNAPSHOT\"\n  :description \"Dropwizard Test Project\"\n  :url \"http://example.com/FIXME\"\n  :license {:name \"MIT License\"\n            :url \"http://opensource.org/licenses/MIT\"}\n  :dependencies [[org.clojure/clojure \"1.6.0\"]\n                 [io.dropwizard/dropwizard-core \"0.7.1\"]]\n  :source-paths [\"src/clojure\"]\n  :java-source-paths [\"src/java\"]\n  :prep-tasks [[\"compile\" \"test2.Test2Configuration\"]\n               [\"compile\" \"test2.Test2Resource\"]\n               \"javac\"]\n  :main test2.Test2Service)\n\n\n\n\u666e\u901a\u306eJavaBean\u3063\u307d\u304f\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\uff08Test2Configuration\u306b\u5024\u304c\u8a2d\u5b9a\u3055\u308c\u308b\u306e\u306f\u8d77\u52d5\u6642\u306e\u307f\u3067\u3059\uff09\n\nTest2Configuration.clj\n(ns test2.Test2Configuration\n  (:import [com.fasterxml.jackson.annotation JsonProperty])\n  (:gen-class :name test2.Test2Configuration\n              :extends io.dropwizard.Configuration\n              :init init\n              :state template\n              :methods [[getTemplate [] String]\n                        [^{JsonProperty {}} setTemplate [String] void]]))\n\n(defn -init [& args]\n  [nil (ref \"\")])\n\n(defn -getTemplate [this]\n  @(.template this))\n\n(defn -setTemplate [this template]\n  (dosync\n    (ref-set (.template this) template)))\n\n\n\n\u30a2\u30af\u30bb\u30b9\u90e8\u5206\u3067\u3059\u3002gen-class\u90e8\u5206\u306b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u304c\u96c6\u4e2d\u3057\u307e\u3059\u3002\n\nTest2Resource.clj\n(ns test2.Test2Resource\n  (:gen-class :name ^{javax.ws.rs.Path \"/test\"\n                      javax.ws.rs.Produces [\"text/plain\"] #_javax.ws.rs.core.MediaType/TEXT_PLAIN}\n               test2.Test2Resource\n              :init init\n              :constructors {[test2.Test2Configuration] []}\n              :state template\n              :methods [[^{javax.ws.rs.GET {}} hello [] String]]))\n\n(defn -init [template]\n  [nil template])\n\n(defn -hello [this]\n  (.getTemplate (.template this)))\n\n\n\nJava\u306e\u30bd\u30fc\u30b9\u3067\u3059\u3002\n\nTestService.java\npackage test2;\n\nimport io.dropwizard.Application;\nimport io.dropwizard.setup.Bootstrap;\nimport io.dropwizard.setup.Environment;\n\npublic class Test2Service extends Application<Test2Configuration> {\n\n    public static void main(String...args) throws Exception {\n        new Test2Service().run(args);\n    }\n\n    @Override\n    public void run(Test2Configuration configuration, Environment environment) throws Exception {\n        System.out.println(\"run\");\n\n        environment.jersey().setUrlPattern(\"/api/*\");\n\n        environment.jersey().register(new Test2Resource(configuration));\n    }\n\n    @Override\n    public void initialize(Bootstrap<Test2Configuration> bootstrap) {\n        System.out.println(\"initialize\");\n    }\n}\n\n\n\n\u30d7\u30ed\u30d1\u30c6\u30a3\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002\n\ntest.yml\ntemplate: hello world!\n\n\n\n\u5b9f\u884c\nlein run server resource\\test.yml\n\n\u3068\u304b\u3084\u308c\u3070\u30b5\u30fc\u30d0\u304c\u52d5\u304d\u307e\u3059\u3002\nhttp://localhost:8080/api/test \u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068test.yml\u3067\u5b9a\u7fa9\u3057\u305f\u6587\u5b57\u5217\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n\u306a\u305cJava\u3092\u4f7f\u3063\u305f\u304b\nTest2Service.java\u306eClojure\u7248\u304cTestService.clj\u3067\u3059\u3002\n\nTestService.cjj\n(ns test.TestService\n  (:import [io.dropwizard.setup Bootstrap]\n           [io.dropwizard.setup Environment])\n  (:gen-class :extends ^{:parameters [test.TestConfiguration]} io.dropwizard.Application\n              :init init\n              :constructors {[] []}\n              :main true))\n\n(defn -init [& args]\n  [[] []])\n\n(defn -main [& args]\n  (.run (test.TestService.) (into-array args)))\n\n(defn -run [this configuration environment]\n  (println \"run\")\n  (.setUrlPattern (.jersey environment) \"/api/*\")\n  (.register (.jersey environment) (test.TestResource. configuration)))\n\n\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\u8d77\u52d5\u76f4\u5f8c\u306bjava.lang.IllegalStateException\u3067\u7570\u5e38\u7d42\u4e86\u3057\u307e\u3059\u3002\n\nStackTrace\nException in thread \"main\" java.lang.IllegalStateException: Cannot figure out type parameterization for test.TestService, ...\n        at clojure.lang.Compiler.load(Compiler.java:7142)\n        ...(\u7701\u7565)...\n        at clojure.main.main(main.java:37)\nCaused by: java.lang.IllegalStateException: Cannot figure out type parameterization for test.TestService\n        at io.dropwizard.util.Generics.getTypeParameter(Generics.java:62)\n        at io.dropwizard.Application.getConfigurationClass(Application.java:30)\n        at io.dropwizard.cli.ServerCommand.<init>(ServerCommand.java:25)\n        at io.dropwizard.Application.run(Application.java:68)\n        at test.TestService$_main.doInvoke(TestService.clj:13)\n        at clojure.lang.RestFn.invoke(RestFn.java:421)\n        at clojure.lang.Var.invoke(Var.java:383)\n        at user$eval5.invoke(form-init1306515106957402759.clj:1)\n        at clojure.lang.Compiler.eval(Compiler.java:6703)\n        at clojure.lang.Compiler.eval(Compiler.java:6693)\n        at clojure.lang.Compiler.load(Compiler.java:7130)\n        ... 11 more\n\n\nJava\u3067\u4f5c\u3063\u305f\u30af\u30e9\u30b9\u3068Clojure\u3067\u4f5c\u3063\u305f\u30af\u30e9\u30b9\u3092javap\u3067\u9006\u30a2\u30bb\u30f3\u30d6\u30eb\u3057\u3066\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3059\u3002\n\nTestService\u3092javap\npublic class test.TestService extends io.dropwizard.Application {\n  public static {};\n  public test.TestService();\n  public java.lang.Object clone();\n  public int hashCode();\n  public java.lang.String toString();\n  public boolean equals(java.lang.Object);\n  public void initialize(io.dropwizard.setup.Bootstrap);\n  public java.lang.String getName();\n  public void run(io.dropwizard.Configuration, io.dropwizard.setup.Environment);\n  public static void main(java.lang.String[]);\n}\n\n\n\nTest2Service\u3092javap\npublic class test2.Test2Service extends io.dropwizard.Application<test2.Test2Configuration> {\n  public test2.Test2Service();\n  public static void main(java.lang.String...) throws java.lang.Exception;\n  public void run(test2.Test2Configuration, io.dropwizard.setup.Environment) throws java.lang.Exception;\n  public void initialize(io.dropwizard.setup.Bootstrap<test2.Test2Configuration>);\n  public void run(io.dropwizard.Configuration, io.dropwizard.setup.Environment) throws java.lang.Exception;\n}\n\n\n\u6bd4\u8f03\u3059\u308b\u3068io.dropwizard.Application\u3068io.dropwizard.Appilcation<test2.Test2Configuration>\u304c\u9055\u3044\u307e\u3059\u3002\n\u3082\u3068\u306eio.dropwizard.Application\u306f<T>\u3067\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308b\u3088\u3046\u306b\u8a2d\u8a08\u3055\u308c\u3066\u3044\u3066\u3001\u305d\u306e\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3042\u3061\u3053\u3061\u6301\u3063\u3066\u56de\u308b\u3064\u304f\u308a\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u6700\u7d42\u7684\u306b\u306f\u3053\u3053\u3067\u4f8b\u5916\u3092\u5410\u3044\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/dropwizard/dropwizard/blob/master/dropwizard-util/src/main/java/io/dropwizard/util/Generics.java#L35\nClojure\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u65b9\u306f\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u60c5\u5831\u304c\u6d88\u3048\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u306e\u3067\u3001io.dropwizard.util.Generics.getTypeParameter\u3067\u5b9f\u884c\u6642\u306b\u30a8\u30e9\u30fc\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u5bfe\u7b56\n\u5148\u306b\u3082\u66f8\u3044\u305f\u306e\u3067\u3059\u304c\u3001io.dropwizard.Application\u3092\u7d99\u627f\u3059\u308b\u90e8\u5206\u3060\u3051Java\u3067\u66f8\u3044\u3066\u3001\u6b8b\u308a\u306fClojure\u3067\u66f8\u304d\u307e\u3059\u3002\nJava\u304b\u3089Clojure\u3092\u4f7f\u3046\u306e\u3067\u3001\u5148\u306bClojure\u306e\u30bd\u30fc\u30b9\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\nJava\u3067\u4f7f\u3063\u3066\u3044\u305f\u304b\u3089Dropwizard\u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u304c\u3001Liberator\u3092\u4f7f\u3046\u306e\u304c\u826f\u3044\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u53c2\u8003\nextend/implement parameterized types (generics)\nhttp://dev.clojure.org/jira/browse/CLJ-970\nIs it possible to extend a parameterized type using gen-class?\nhttps://groups.google.com/forum/#!topic/clojure/Xv1pKATfP0c\nLiberator\nhttp://clojure-liberator.github.io/liberator/\nheion (RESTful Clojure with Dropwizard)\nhttps://github.com/jblomo/heion\n\u4eca\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3060\u3068\u3053\u306e\u65b9\u6cd5\u3067\u52d5\u304b\u306a\u3044\u30fb\u30fb\u30fb\u30fb\nClojure\u3067Dropwizard\u3092\u4f7f\u3046\n========================\n\nMotivation\n----------\n- Clojure\u3067\u3082\u59cb\u3081\u305f\u3044\n- \u305d\u308c\u306a\u3089\u4f7f\u3044\u6163\u308c\u305fDropwizard\u3067\u3082\u4f7f\u3063\u3066API\u3067\u3082\u4f5c\u3063\u3066\u307f\u3088\u3046\n\n\n\u7d50\u8ad6\n----\n- `io.dropwizard.Application`\u3092\u7d99\u627f\u3059\u308b\u90e8\u5206\u306fJava\u3067\u66f8\u304f\n- \u305d\u308c\u4ee5\u5916\u306fClojure\u3067\u66f8\u3044\u3066\u3082\u5927\u4e08\u592b\n\n\n\u69cb\u6210\n----\n\nleiningen\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\nJava\u3068Clojure\u306e\u30bd\u30fc\u30b9\u3092\u5206\u3051\u308b\u305f\u3081\u3001src\u4e0b\u3067\u3055\u3089\u306b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u533a\u5207\u3063\u3066\u3044\u307e\u3059\u3002\n\n```\n  ./\n    resources/\n      test.yml\n    src/\n      clojure/\n        test2/\n          Test2Configuration.clj\n          Test2Resource.clj\n      java/\n        test2/\n          Test2Service.java\n    project.clj\n```\n\n---\n\n`Test2Service.java`\u306e\u4e2d\u3067Clojure\u3067\u4f5c\u6210\u3057\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u53c2\u7167\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u5148\u306bClojure\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n```clojure:project.clj\n(defproject test \"0.1.0-SNAPSHOT\"\n  :description \"Dropwizard Test Project\"\n  :url \"http://example.com/FIXME\"\n  :license {:name \"MIT License\"\n            :url \"http://opensource.org/licenses/MIT\"}\n  :dependencies [[org.clojure/clojure \"1.6.0\"]\n                 [io.dropwizard/dropwizard-core \"0.7.1\"]]\n  :source-paths [\"src/clojure\"]\n  :java-source-paths [\"src/java\"]\n  :prep-tasks [[\"compile\" \"test2.Test2Configuration\"]\n               [\"compile\" \"test2.Test2Resource\"]\n               \"javac\"]\n  :main test2.Test2Service)\n```\n\n---\n\n\u666e\u901a\u306eJavaBean\u3063\u307d\u304f\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\uff08Test2Configuration\u306b\u5024\u304c\u8a2d\u5b9a\u3055\u308c\u308b\u306e\u306f\u8d77\u52d5\u6642\u306e\u307f\u3067\u3059\uff09\n\n```clojure:Test2Configuration.clj\n(ns test2.Test2Configuration\n  (:import [com.fasterxml.jackson.annotation JsonProperty])\n  (:gen-class :name test2.Test2Configuration\n              :extends io.dropwizard.Configuration\n              :init init\n              :state template\n              :methods [[getTemplate [] String]\n                        [^{JsonProperty {}} setTemplate [String] void]]))\n\n(defn -init [& args]\n  [nil (ref \"\")])\n\n(defn -getTemplate [this]\n  @(.template this))\n\n(defn -setTemplate [this template]\n  (dosync\n    (ref-set (.template this) template)))\n```\n\n---\n\n\u30a2\u30af\u30bb\u30b9\u90e8\u5206\u3067\u3059\u3002`gen-class`\u90e8\u5206\u306b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u304c\u96c6\u4e2d\u3057\u307e\u3059\u3002\n\n```clojure:Test2Resource.clj\n(ns test2.Test2Resource\n  (:gen-class :name ^{javax.ws.rs.Path \"/test\"\n                      javax.ws.rs.Produces [\"text/plain\"] #_javax.ws.rs.core.MediaType/TEXT_PLAIN}\n               test2.Test2Resource\n              :init init\n              :constructors {[test2.Test2Configuration] []}\n              :state template\n              :methods [[^{javax.ws.rs.GET {}} hello [] String]]))\n\n(defn -init [template]\n  [nil template])\n\n(defn -hello [this]\n  (.getTemplate (.template this)))\n```\n\n---\n\nJava\u306e\u30bd\u30fc\u30b9\u3067\u3059\u3002\n\n```java:TestService.java\npackage test2;\n\nimport io.dropwizard.Application;\nimport io.dropwizard.setup.Bootstrap;\nimport io.dropwizard.setup.Environment;\n\npublic class Test2Service extends Application<Test2Configuration> {\n\n    public static void main(String...args) throws Exception {\n        new Test2Service().run(args);\n    }\n\n    @Override\n    public void run(Test2Configuration configuration, Environment environment) throws Exception {\n        System.out.println(\"run\");\n\n        environment.jersey().setUrlPattern(\"/api/*\");\n\n        environment.jersey().register(new Test2Resource(configuration));\n    }\n\n    @Override\n    public void initialize(Bootstrap<Test2Configuration> bootstrap) {\n        System.out.println(\"initialize\");\n    }\n}\n```\n\n---\n\n\u30d7\u30ed\u30d1\u30c6\u30a3\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002\n\n```:test.yml\ntemplate: hello world!\n```\n\n### \u5b9f\u884c\n\n```\nlein run server resource\\test.yml\n```\n\n\u3068\u304b\u3084\u308c\u3070\u30b5\u30fc\u30d0\u304c\u52d5\u304d\u307e\u3059\u3002\nhttp://localhost:8080/api/test \u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068`test.yml`\u3067\u5b9a\u7fa9\u3057\u305f\u6587\u5b57\u5217\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n\n## \u306a\u305cJava\u3092\u4f7f\u3063\u305f\u304b\n\n`Test2Service.java`\u306eClojure\u7248\u304c`TestService.clj`\u3067\u3059\u3002\n\n```clojure:TestService.cjj\n(ns test.TestService\n  (:import [io.dropwizard.setup Bootstrap]\n           [io.dropwizard.setup Environment])\n  (:gen-class :extends ^{:parameters [test.TestConfiguration]} io.dropwizard.Application\n              :init init\n              :constructors {[] []}\n              :main true))\n\n(defn -init [& args]\n  [[] []])\n\n(defn -main [& args]\n  (.run (test.TestService.) (into-array args)))\n\n(defn -run [this configuration environment]\n  (println \"run\")\n  (.setUrlPattern (.jersey environment) \"/api/*\")\n  (.register (.jersey environment) (test.TestResource. configuration)))\n```\n\n\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\u8d77\u52d5\u76f4\u5f8c\u306b`java.lang.IllegalStateException`\u3067\u7570\u5e38\u7d42\u4e86\u3057\u307e\u3059\u3002\n\n```:StackTrace\nException in thread \"main\" java.lang.IllegalStateException: Cannot figure out type parameterization for test.TestService, ...\n        at clojure.lang.Compiler.load(Compiler.java:7142)\n        ...(\u7701\u7565)...\n        at clojure.main.main(main.java:37)\nCaused by: java.lang.IllegalStateException: Cannot figure out type parameterization for test.TestService\n        at io.dropwizard.util.Generics.getTypeParameter(Generics.java:62)\n        at io.dropwizard.Application.getConfigurationClass(Application.java:30)\n        at io.dropwizard.cli.ServerCommand.<init>(ServerCommand.java:25)\n        at io.dropwizard.Application.run(Application.java:68)\n        at test.TestService$_main.doInvoke(TestService.clj:13)\n        at clojure.lang.RestFn.invoke(RestFn.java:421)\n        at clojure.lang.Var.invoke(Var.java:383)\n        at user$eval5.invoke(form-init1306515106957402759.clj:1)\n        at clojure.lang.Compiler.eval(Compiler.java:6703)\n        at clojure.lang.Compiler.eval(Compiler.java:6693)\n        at clojure.lang.Compiler.load(Compiler.java:7130)\n        ... 11 more\n```\n\nJava\u3067\u4f5c\u3063\u305f\u30af\u30e9\u30b9\u3068Clojure\u3067\u4f5c\u3063\u305f\u30af\u30e9\u30b9\u3092javap\u3067\u9006\u30a2\u30bb\u30f3\u30d6\u30eb\u3057\u3066\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3059\u3002\n\n```java:TestService\u3092javap\npublic class test.TestService extends io.dropwizard.Application {\n  public static {};\n  public test.TestService();\n  public java.lang.Object clone();\n  public int hashCode();\n  public java.lang.String toString();\n  public boolean equals(java.lang.Object);\n  public void initialize(io.dropwizard.setup.Bootstrap);\n  public java.lang.String getName();\n  public void run(io.dropwizard.Configuration, io.dropwizard.setup.Environment);\n  public static void main(java.lang.String[]);\n}\n```\n\n```java:Test2Service\u3092javap\npublic class test2.Test2Service extends io.dropwizard.Application<test2.Test2Configuration> {\n  public test2.Test2Service();\n  public static void main(java.lang.String...) throws java.lang.Exception;\n  public void run(test2.Test2Configuration, io.dropwizard.setup.Environment) throws java.lang.Exception;\n  public void initialize(io.dropwizard.setup.Bootstrap<test2.Test2Configuration>);\n  public void run(io.dropwizard.Configuration, io.dropwizard.setup.Environment) throws java.lang.Exception;\n}\n```\n\n\u6bd4\u8f03\u3059\u308b\u3068`io.dropwizard.Application`\u3068`io.dropwizard.Appilcation<test2.Test2Configuration>`\u304c\u9055\u3044\u307e\u3059\u3002\n\u3082\u3068\u306e`io.dropwizard.Application`\u306f`<T>`\u3067\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308b\u3088\u3046\u306b\u8a2d\u8a08\u3055\u308c\u3066\u3044\u3066\u3001\u305d\u306e\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3042\u3061\u3053\u3061\u6301\u3063\u3066\u56de\u308b\u3064\u304f\u308a\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u6700\u7d42\u7684\u306b\u306f\u3053\u3053\u3067\u4f8b\u5916\u3092\u5410\u3044\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/dropwizard/dropwizard/blob/master/dropwizard-util/src/main/java/io/dropwizard/util/Generics.java#L35\n\n\nClojure\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u65b9\u306f\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u60c5\u5831\u304c\u6d88\u3048\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u306e\u3067\u3001`io.dropwizard.util.Generics.getTypeParameter`\u3067\u5b9f\u884c\u6642\u306b\u30a8\u30e9\u30fc\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\n## \u5bfe\u7b56\n\n\u5148\u306b\u3082\u66f8\u3044\u305f\u306e\u3067\u3059\u304c\u3001`io.dropwizard.Application`\u3092\u7d99\u627f\u3059\u308b\u90e8\u5206\u3060\u3051Java\u3067\u66f8\u3044\u3066\u3001\u6b8b\u308a\u306fClojure\u3067\u66f8\u304d\u307e\u3059\u3002\nJava\u304b\u3089Clojure\u3092\u4f7f\u3046\u306e\u3067\u3001\u5148\u306bClojure\u306e\u30bd\u30fc\u30b9\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\nJava\u3067\u4f7f\u3063\u3066\u3044\u305f\u304b\u3089Dropwizard\u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u304c\u3001[Liberator](http://clojure-liberator.github.io/liberator/)\u3092\u4f7f\u3046\u306e\u304c\u826f\u3044\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\n## \u53c2\u8003\n\nextend/implement parameterized types (generics)\nhttp://dev.clojure.org/jira/browse/CLJ-970\n\nIs it possible to extend a parameterized type using gen-class?\n  https://groups.google.com/forum/#!topic/clojure/Xv1pKATfP0c\n\nLiberator\n  http://clojure-liberator.github.io/liberator/\n\nheion (RESTful Clojure with Dropwizard)\n  https://github.com/jblomo/heion\n\u4eca\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3060\u3068\u3053\u306e\u65b9\u6cd5\u3067\u52d5\u304b\u306a\u3044\u30fb\u30fb\u30fb\u30fb\n", "tags": ["Clojure", "dropwizard", "Leiningen"]}