{"context": "\u300c\u52aa\u529b\u3068\u6839\u6027\u300d\n\n\u6982\u8981\n\u30bd\u30fc\u30b9\u306fgithub\u306b\u3042\u308a\u307e\u3059\u3002\n\n\u4eca\u56de\u306e\u52d5\u6a5f\u3001TensorFlow\u3067\u306e\u30e2\u30c7\u30eb\u306e\u8a18\u8ff0\nTensorFlow\u3067\u306f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30e2\u30c7\u30eb\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u69cb\u7bc9\u3057\u307e\u3059\u3002\u81ea\u5206\u306e\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3002\u516c\u5f0f\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u3082\u3053\u3046\u3044\u3046\u30b9\u30bf\u30a4\u30eb\u3067\u8a18\u8ff0\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u3057\u3066\u3053\u308c\u304c\u82e5\u5e72\u3060\u308b\u3044\u3002\n(\u5fc5\u8981\u304c\u3042\u308c\u3070)\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u3063\u3066\u3001\ndef image_to_conv_layer(image, kernel_size, num_kernel):\n    with tf.device('/cpu:0'):\n        channels = image.get_shape()[3]\n        w = weight_variable([kernel_size,kernel_size, channels,num_kernel], name=\"weight\")\n        b = bias_variable([num_kernel], name=\"bias\")\n    with tf.device('/gpu:0'):\n        with tf.name_scope('conv_max'):\n            h_conv = tf.nn.relu(conv2d(image, w) + b)\n            h_pool = max_pool_2x2(h_conv)\n\n    return h_pool\n\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u7d44\u307f\u4e0a\u3052\u308b\u3002\ndef build_full_network(images,\n    with_conv1_pre_train=False, with_conv2_pre_train=False,\n    with_conv3_pre_train=False):\n\n    result = []\n\n    with tf.variable_scope('conv1'):\n        conv1 = image_to_conv_layer(images, 5, 64)\n\n        if with_conv1_pre_train:\n            with tf.variable_scope('pre_train'):\n                with tf.name_scope('inference'):\n                    pt_inf = conv_to_conv_transpose_layer(conv1, images)\n                image_summary = tf.image_summary('inference_image', pt_inf)\n                with tf.name_scope('loss'):\n                    pt_loss = pre_train_loss(images, pt_inf)\n                    tf.scalar_summary('loss/conv1', tf.log(tf.reduce_max(pt_loss)))\n                with tf.name_scope('train'):\n                    pt_train = pre_train_train(pt_loss, 1e-4)\n                    result = [pt_train] + result\n    # \u4ee5\u964d\u306e\u5c64\u304c\u7d9a\u304f\n\n\u3060\u308b\u3055\u306e\u539f\u56e0\u306f\u4ee5\u4e0b\u3060\u3068\u601d\u3044\u307e\u3059\n\n\u958b\u767a\u4e2d\u306b\u8abf\u6574\u3059\u3079\u304d\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u30b3\u30fc\u30c9\u4e2d\u306b\u6563\u8ca1\u3057\u304c\u3061\uff08\u958b\u767a\u8005\u306b\u3088\u308b\u3051\u308c\u3069\u3082\uff09\n\u8a18\u8ff0\u91cf\u304c\u591a\u304f\u306a\u308b\u50be\u5411\u304c\u3042\u308b\n\u8907\u6570\u306e\u30e2\u30c7\u30eb\u3092\u8a66\u3059\u3068\u304d\u306b\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u306e\u5165\u308c\u66ff\u3048\u3067\u306f\u306a\u304f\u30bd\u30fc\u30b9\u306e\u5165\u308c\u66ff\u3048\u3092\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\n\n\u3053\u308c\u3089\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306b\u30e2\u30c7\u30eb\u3092YAML\u3067\u66f8\u304f\u3068\u3069\u3046\u306a\u308b\u304b\u3092\u8a66\u3057\u307e\u3059\u3002\n\n\u306a\u305cYAML\u304b\n\u305d\u3053\u305d\u3053\u8fbc\u307f\u5165\u3063\u305f\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u4eba\u9593\u304c\u66f8\u3053\u3046\u3068\u3057\u305f\u3089YAML\u306b\u843d\u3061\u7740\u304f\u3088\u306d\u3001\u3068\u3044\u3046\u3044\u3064\u3082\u306e\u8a71\u3002\n\n\u4eba\u9593\u304c\u66f8\u3051\u308b(XML\u3067\u306f\u4e0d\u53ef)\n\u30b3\u30e1\u30f3\u30c8\u3092\u8a18\u8ff0\u3067\u304d\u308b(JSON\u3067\u306f\u4e0d\u53ef)\nPyYAML\u306b\u3088\u308aPython class\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u30fb\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u304c\u53ef\u80fd\nanchor/alias \u306b\u3088\u308a\u5c11\u3057\u697d\u304c\u3067\u304d\u308b\n\n\n\u6587\u66f8\u306e\u69cb\u6210\n\nYAML\u3067\u66f8\u304b\u308c\u305f\u30e2\u30c7\u30eb\u306e\u89e3\u8aac\nYAML\u30d1\u30fc\u30b5\u306e\u5b9f\u88c5\u306e\u89e3\u8aac\n\u30e2\u30c7\u30eb\u3068\u30d1\u30fc\u30b5\u306e\u5229\u7528\u306e\u89e3\u8aac\n\u3084\u3063\u3066\u307f\u305f\u611f\u60f3\n\u4eca\u5f8c\u306e\u8ab2\u984c\n\n\nYAML\u3067\u66f8\u304b\u308c\u305f\u30e2\u30c7\u30eb\n\u30e2\u30c7\u30eb\u3092\u8a18\u8ff0\u3057\u305fyaml\u30d5\u30a1\u30a4\u30eb\u306e\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\u3053\u306e\u3042\u3068\u5404\u8981\u7d20\u306e\u89e3\u8aac\u3092\u3057\u307e\u3059\u3002\nabies_model.yaml\n---\n# user data tree\nuser_variables:\n  - op_device: &op_device '/cpu:0'\n# graph data tree\nroot: !root\n  nodes_required: ['root']\n  nodes:\n    - !with\n      # can define tf.variable_scope, tf.name_scope, tf.device at same time\n      variable_scope: conv1\n      nodes:\n      - !conv2d\n        # nid is node id, to be used for node connection\n        { nid: c1, name: out, source: root, width: 5, height: 5, kernels_num: 64 }\n      - !with\n        variable_scope: train\n        tags: [train]\n        nodes:\n        - !conv2d_transpose\n          {nid: c1_tr, name: conv1tr, source: c1, shape_as: root, width: 5, height: 5}\n        - !conv2d_ae_loss\n          {nid: c1_ae_loss, source1: root, source2: c1_tr}\n        - !adam_optimizer {name: optimizer, source: c1_ae_loss, val: 1e-4}\n      - !with\n        device_scope: '/cpu:0'\n        tags: [train, log]\n        nodes:\n        - !reduce_mean\n          {nid: c1_ae_loss_mean, source: c1_ae_loss, dims: [1]}\n        - !scalar_summary\n          {summary_tag: 'conv1/loss', source: c1_ae_loss_mean}\n        - !image_summary\n          {summary_tag: 'conv1tr/image', source: c1_tr}\n    - !with\n      variable_scope: conv2\n      nodes:\n      - !conv2d\n        { nid: c2, name: out, source: c1, width: 5, height: 5, kernels_num: 64 }\n      - !with\n        variable_scope: train\n        tags: [train]\n        nodes:\n        - !conv2d_transpose\n          {nid: c2_tr, name: conv2tr, source: c2, shape_as: c1, width: 5, height: 5}\n        - !conv2d_ae_loss\n          {nid: c2_ae_loss, source1: c1, source2: c2_tr}\n        - !adam_optimizer {name: optimizer, source: c2_ae_loss, val: 1e-4}\n      - !with\n        device_scope: '/cpu:0'\n        tags: [train, log]\n        nodes:\n        - !reduce_mean\n          {nid: c2_ae_loss_mean, source: c2_ae_loss, dims: [1]}\n        - !scalar_summary\n          {summary_tag: 'conv2/loss', source: c2_ae_loss_mean}\n    - !with\n      variable_scope: conv3\n      nodes:\n      - !conv2d\n        { nid: c3, name: out, source: c2, width: 5, height: 5, kernels_num: 64 }\n      - !with\n        variable_scope: train\n        tags: [train]\n        nodes:\n        - !conv2d_transpose\n          {nid: c3_tr, name: conv2tr, source: c3, shape_as: c2, width: 5, height: 5}\n        - !conv2d_ae_loss\n          {nid: c3_ae_loss, source1: c2, source2: c3_tr}\n        - !adam_optimizer {name: optimizer, source: c3_ae_loss, val: 1e-4}\n      - !with\n        device_scope: '/cpu:0'\n        tags: [train, log]\n        nodes:\n        - !reduce_mean\n          {nid: c3_ae_loss_mean, source: c3_ae_loss, dims: [1]}\n        - !scalar_summary\n          {summary_tag: 'conv3/loss', source: c3_ae_loss_mean}\n    - !with\n      variable_scope: maxpool\n      nodes:\n      - !max_pool_2x2\n        {nid: mp1, source: c3}\n\n\u5192\u982d\u304b\u3089\u3002\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u533a\u5207\u308a\u3068\u30e6\u30fc\u30b6\u30fc\u30c7\u30fc\u30bf\u3067\u3059\u3002\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u81ea\u4f53\u3092\u3072\u3068\u3064\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306f\u3057\u3066\u3044\u306a\u3044\u305f\u3081\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3084YAML\u5185\u3067\u5229\u7528\u3059\u308b\u4efb\u610f\u306e\u30c7\u30fc\u30bf\u3092\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4eca\u56de\u306f\u8a66\u3057\u306b\u30c7\u30d0\u30a4\u30b9\u306e\u540d\u524d\u3092\u5165\u308c\u3066\u3044\u307e\u3059\u304c\u5229\u7528\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n---\n# user data tree\nuser_variables:\n  - op_device: &op_device '/cpu:0'\n\n\u30ad\u30fcroot\u306b!root\u30bf\u30b0\u3092\u6307\u5b9a\u3057\u3066\u30b0\u30e9\u30d5\u306e\u30eb\u30fc\u30c8\u3068\u3057\u3066\u3044\u307e\u3059\u3002nodes_required\u306f\u3053\u306e\u30b0\u30e9\u30d5\u306e\u5165\u529b\u306b\u6307\u5b9a\u3059\u3079\u304d\u540d\u524d\u3067\u3059\u3002\u3053\u306eYAML\u3092\u8aad\u307f\u8fbc\u3093\u3067\u30b0\u30e9\u30d5\u3092\u69cb\u7bc9\u3059\u308b\u969b\u306b\u5229\u7528\u3057\u307e\u3059\u3002nodes\u4ee5\u4e0b\u306e\u914d\u5217\u306bTensorFlow\u306e\u30ce\u30fc\u30c9\u304c\u4e26\u3073\u307e\u3059\u3002\n# graph data tree\nroot: !root\n  nodes_required: ['root']\n  nodes:\n\nTensorFlow\u3067\u983b\u7e41\u306b\u5229\u7528\u3059\u308bwith tf.variable_scope('some_scope'):\u3068\u7b49\u4fa1\u3067\u3059\u3002variable_scope\u306e\u4ed6\u306bname_scope\u3001device\u306e\u5404\u30ad\u30fc\u3092\u540c\u6642\u306b\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002nodes\u4ee5\u4e0b\u306e\u914d\u5217\u306bwith\u5185\u306e\u30ce\u30fc\u30c9\u304c\u4e26\u3073\u307e\u3059\u3002\n    - !with\n      # can define tf.variable_scope, tf.name_scope, tf.device at same time\n      variable_scope: conv1\n      nodes:\n\nconv\u5c64\u306e\u30ce\u30fc\u30c9\u3067\u3059\u3002nid\u306fnode id\u306e\u7565\u3067\u4e3b\u306bYAML\u5185\u3067\u4ed6\u306e\u30ce\u30fc\u30c9\u304b\u3089\u53c2\u7167\u3055\u308c\u308b\u305f\u3081\u306e\u540d\u524d\u3067\u3059\u3002name\u306fTensorFlow\u306e\u30ce\u30fc\u30c9\u306ename\u3001source\u306f\u3053\u306e\u30ce\u30fc\u30c9\u3078\u306e\u5165\u529b\u3067nid\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002width\u3001height\u3001kernels_num\u306fconv\u5c64\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3059\u3002\nnid\u3001name\u306f\u7701\u7565\u53ef\u80fd\u3067\u3059\u3002scalar_summary\u306e\u3088\u3046\u306a\u7d42\u7aef\u30ce\u30fc\u30c9\u3067\u306f\u7701\u7565\u3057\u3066\u3088\u3044\u3067\u3057\u3087\u3046\u3002\n      - !conv2d\n        # nid is node id, to be used for node connection\n        { nid: c1, name: out, source: root, width: 5, height: 5, kernels_num: 64 }\n\n!with\u3084!conv2d\u306a\u3069!root\u4ee5\u5916\u306e\u30ce\u30fc\u30c9\u306b\u306ftags\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u73fe\u5728\u306f\u7279\u5b9a\u306e\u30bf\u30b0\u306b\u3064\u3044\u3066TensorFlow\u306e\u30ce\u30fc\u30c9\u751f\u6210\u3092\u884c\u308f\u306a\u3044\u6307\u5b9a\u3092\u3059\u308b\u305f\u3081\u306b\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n      - !with\n        variable_scope: train\n        tags: [train]\n        nodes:\n\nnodes\u306f\u914d\u5217\u3092\u60f3\u5b9a\u3057\u3066\u3044\u308b\u305f\u3081\u5f53\u7136\u306b\u8907\u6570\u306e\u30ce\u30fc\u30c9\u3092\u4e26\u3079\u3089\u308c\u307e\u3059\u3002\n        - !conv2d_transpose\n          {nid: c1_tr, name: conv1tr, source: c1, shape_as: root, width: 5, height: 5}\n        - !conv2d_ae_loss\n          {nid: c1_ae_loss, source1: root, source2: c1_tr}\n        - !adam_optimizer {name: optimizer, source: c1_ae_loss, val: 1e-4}\n\nTensorBoard\u5411\u3051\u306e\u30b5\u30de\u30ea\u30fc\u306e\u305f\u3081\u306e\u30ce\u30fc\u30c9\u7fa4\u3067\u3059\u3002\u30b5\u30de\u30ea\u30fc\u306fCPU\u3067\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081device\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u307e\u305f!scalar_summary\u3001!image_summary\u306f\u305d\u306e\u3042\u3068\u53c2\u7167\u3059\u308b\u5fc5\u8981\u304c\u7121\u3044\u305f\u3081nid\u3092\u8a18\u8ff0\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n      - !with\n        device_scope: '/cpu:0'\n        tags: [train, log]\n        nodes:\n        - !reduce_mean\n          {nid: c1_ae_loss_mean, source: c1_ae_loss, dims: [1]}\n        - !scalar_summary\n          {summary_tag: 'conv1/loss', source: c1_ae_loss_mean}\n        - !image_summary\n          {summary_tag: 'conv1tr/image', source: c1_tr}\n\n\u4ee5\u4e0b\u3001\u540c\u69d8\u306b\u7d9a\u304d\u307e\u3059\u3002\n\nYAML\u306e\u8aad\u307f\u8fbc\u307f\n\u30d1\u30fc\u30b9\u306b\u306f PyYAML \u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002yaml.YAMLObject\u3092\u5229\u7528\u3057\u3066YAML\u306e\u5404\u30bf\u30b0\u3092\u30bf\u30b0\u7a2e\u3054\u3068\u306b\u5bfe\u5fdc\u3059\u308b\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5909\u63db\u3057\u307e\u3059\u3002\u500b\u3005\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304cTensorFlow\u306e\u30ce\u30fc\u30c9\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u3001\u30d1\u30fc\u30b9\u30b3\u30fc\u30c9\u3067\u3059\u3002\u500b\u5225\u306b\u89e3\u8aac\u3057\u307e\u3059\u3002\nyaml_loader.py\n\u5192\u982d\u3001\u96d1\u591a\u306a\u30e1\u30bd\u30c3\u30c9\u7fa4\u3067\u3059\u3002with\u6587\u306b\u4f55\u3082\u3057\u306a\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5165\u308c\u8fbc\u3080\u305f\u3081\u306bclass WithNone\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\nimport yaml\nimport tensorflow as tf\n\n# ------------------------------------------------------------\n# utilities\n# ------------------------------------------------------------\n\ndef weight_variable(shape, dev=0.35, name=None):\n    \"\"\"create weight variable for conv2d(weight sharing)\"\"\"\n\n    return tf.get_variable(name, shape,\n        initializer=tf.truncated_normal_initializer(stddev=dev))\n\ndef bias_variable(shape, val=0.1, name=None):\n    \"\"\"create bias variable for conv2d(weight sharing)\"\"\"\n\n    return tf.get_variable(\n        name, shape, initializer=tf.constant_initializer(val))\n\nclass WithNone:\n    def __enter__(self): pass\n    def __exit__(self,t,v,tb): pass\n\n\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u306e\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u7fa4\u3067\u3059\u3002YAML\u30c7\u30fc\u30bf\u306e\u30c1\u30a7\u30c3\u30af\u3092\u30c6\u30fc\u30d6\u30eb\u5316\u3059\u308b\u306e\u306b\u5229\u7528\u3057\u307e\u3059\u3002nop()\u306f\u5225\u3067\u578b\u5909\u63db\u3092\u3057\u306a\u3044\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n# ------------------------------------------------------------\n# assert\n# ------------------------------------------------------------\n\ndef nop(val):\n    return val\n\ndef is_exist(key, val):\n    return (val, '{} required'.format(key))\n\ndef not_empty(key, val):\n    return (len(val) > 0, '{} must not be empty'.format(key))\n\nclass is_greater_than:\n    def __init__(self, val):\n        self.val = val\n\n    def __call__(self, key, val):\n        return (val > self.val, '{} must be > {}'.format(key, self.val))\n\nclass is_typeof:\n    def __init__(self, val):\n        self.val = val\n\n    def __call__(self, key, val):\n        return (type(val) is self.val, '{} must be {}'.format(key, self.val))\n\nYAML\u306e\u30d1\u30fc\u30b9\u306e\u969b\u306bnid\u306e\u30e6\u30cb\u30fc\u30af\u30c1\u30a7\u30c3\u30af\u306e\u305f\u3081\u306e\u8f9e\u66f8\u3092\u5f15\u304d\u56de\u3057\u305f\u3044\u306e\u3067yaml.Loader\u3092\u30ab\u30b9\u30bf\u30e0\u3057\u3066\u3044\u307e\u3059\u3002\n# ------------------------------------------------------------\n# YAML Graph Nodes\n# ------------------------------------------------------------\n\nclass Loader(yaml.Loader):\n    def __init__(self, stream):\n        self.nids = {}\n        super(Loader, self).__init__(stream)\n\n\u30ce\u30fc\u30c9\u306b\u5171\u901a\u3059\u308b\u62bd\u8c61\u30af\u30e9\u30b9\u3067\u3059\u3002YAML\u306e\u30d1\u30fc\u30b9\u3068TensorFlow\u30ce\u30fc\u30c9\u751f\u6210\u306e\u969b\u306e\u5197\u9577\u306a\u51e6\u7406\u3092\u307e\u3068\u3081\u3066\u3044\u307e\u3059\u3002parse()\u3067\u306fYAML\u306ekey, value\u3092\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306ekey, value\u306b\u5909\u63db\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306e\u633f\u5165\u3001\u7c21\u5358\u306a\u578b\u30c1\u30a7\u30c3\u30af\u3001\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u3082\u884c\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u51e6\u7406\u306e\u5177\u8c61\u306f\u5404\u6d3e\u751f\u30af\u30e9\u30b9\u304b\u3089\u8f9e\u66f8\u3067\u6e21\u3055\u308c\u307e\u3059\u3002\nbuild()\u3067\u306f\u9664\u5916\u30bf\u30b0\u306e\u30b9\u30ad\u30c3\u30d7\u3068\u30e6\u30cb\u30fc\u30af\u30c1\u30a7\u30c3\u30af\u306e\u305f\u3081\u306e\u8f9e\u66f8\u306e\u8ffd\u52a0\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\nclass Node:\n    def __init__():\n        pass\n\n    def parse(self,loader,node,params):\n        yaml_dict = loader.construct_mapping(node, deep=True)\n        self.__dict__['nid'] =  None\n\n        for key, value in params.items():\n            got = yaml_dict.get(key, value[1])\n            self.__dict__[key] = value[0](got) if got is not None else got\n\n        assert self.nid not in loader.nids, \\\n            'line {}: nid \"{}\" is already exists at line {}'.format(\n                node.end_mark.line+1, self.nid, loader.nids[self.nid].line+1)\n\n        for key, val in params.items():\n            for cond in val[2]:\n                ret, mess = cond(key, self.__dict__[key])\n                assert ret, 'line {}: {}'.format(node.end_mark.line+1, mess)\n\n        if self.nid: loader.nids[self.nid] = node.end_mark\n\n    def build(self, nids, exclude_tags):\n        for exclude_tag in exclude_tags:\n            if exclude_tag in self.tags:\n                return nids\n\n        nids, nid, node = self.create_node(nids, exclude_tags)\n\n        if nid and node is not None: nids[nid] = node\n\n        return nids\n\n\u30b0\u30e9\u30d5\u30eb\u30fc\u30c8\u3067\u3059\u3002\u4ed6\u306e\u30ce\u30fc\u30c9\u3068\u306f\u7570\u306a\u308bbuild()\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002\nclass Root(yaml.YAMLObject):\n    yaml_tag = u'!root'\n\n    def __init__(self, nodes, nodes_required):\n        self.nodes = nodes\n        self.nodes_required = nodes_required\n\n    def __repr__(self):\n        return 'Root'\n\n    @classmethod\n    def from_yaml(cls, loader, node):\n        yaml_dict = loader.construct_mapping(node)\n\n        args = {\n            'nodes': yaml_dict.get('nodes', None),\n            'nodes_required': yaml_dict.get('nodes_required', None),\n        }\n\n        assert type(args['nodes']) is list, \\\n            'line {}: nodes must be list'.format(node.end_mark.line+1)\n        assert type(args['nodes_required']) is list, \\\n            'line {}: nodes_required must be list'.format(node.end_mark.line+1)\n\n        for required_node in args['nodes_required']:\n            assert required_node not in loader.nids, \\\n                'line {}: nid \"{}\" is already exists'.format(node.end_mark.line+1, required_node)\n            print(required_node)\n            loader.nids[required_node] = node.end_mark\n\n        return cls(**args)\n\n    def build(self, feed_dict={}, exclude_tags=[]):\n        self.__nids = {}\n\n        for key, val in feed_dict.items():\n            self.__nids[key]  = val\n\n        for required_node in self.nodes_required:\n            if required_node not in self.__nids:\n                raise ValueError('feed_dict requires {}.'.format(self.nodes_required))\n\n        for node in self.nodes:\n            self.__nids = node.build(self.__nids, exclude_tags)\n\n!with\u30bf\u30b0\u306b\u5bfe\u5fdc\u3059\u308b\u30af\u30e9\u30b9\u3067\u3059\u3002\n__init__()\u306f\u4ed6\u306e\u30ce\u30fc\u30c9\u30af\u30e9\u30b9\u3067\u3082\u5171\u901a\u3067\u3059\u304cparams\u8f9e\u66f8\u3092\u4f5c\u3063\u3066Node\u30af\u30e9\u30b9\u306eparse()\u306b\u6e21\u3059\u3068\u3044\u3046\u306e\u304c\u30eb\u30fc\u30c1\u30f3\u3067\u3059\u3002\nparams\u8f9e\u66f8\u306e'tags': (nop, [], [is_typeof(list)])\u306f\u300cYAML\u306e'tags'\u8981\u7d20\u306b\u3064\u3044\u3066\u3001\u578b\u5909\u63db\u3092\u884c\u308f\u305a\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f[]\u3067\u3001\u578b\u304clist\u3067\u3042\u308b\u3053\u3068\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u300d\u3068\u3044\u3046\u610f\u5473\u306b\u306a\u308a\u307e\u3059\u3002'kernels_num': (int, 0, [is_greater_than(0)])\u3060\u3068\u300c'kernels_num'\u8981\u7d20\u306b\u3064\u3044\u3066\u3001int\u306b\u5909\u63db\u3057\u3066\u3001\u521d\u671f\u5024\u306f0\u3067\u30010\u3088\u308a\u5927\u304d\u3044\u3053\u3068\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u300d\u3068\u3044\u3046\u610f\u5473\u306b\u306a\u308a\u307e\u3059\u3002\u521d\u671f\u5024\u3067\u306f\u30c1\u30a7\u30c3\u30af\u304c\u5931\u6557\u3059\u308b\u306e\u3067\u5fc5\u9808\u8981\u7d20\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\uff08\u578b\u5909\u63db\u3092\u5165\u308c\u3066\u3044\u308b\u7406\u7531\u306fPyYAML\u304c\u30d1\u30fc\u30b9\u306e\u969b\u306b\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u6307\u6570\u8868\u8a18\u3092\u6b63\u3057\u304f\u30d1\u30fc\u30b9\u3057\u3066\u304f\u308c\u306a\u3044\u304b\u3089\u3067\u3059\uff09\ncreate_node()\u304c\u5b9f\u969b\u306eTensorFlow\u306e\u30ce\u30fc\u30c9\u3092\u751f\u6210\u3059\u308b\u7b87\u6240\u306b\u306a\u308a\u307e\u3059\u3002!with\u306f\u30ce\u30fc\u30c9\u3092\u6301\u305f\u306a\u3044\u306e\u3067TensorFlow\u306ewith ...\u3092\u4f5c\u3063\u3066\u305d\u306e\u4e2d\u3067nodes\u4ee5\u4e0b\u306e\u8981\u7d20\u306ebuild()\u3092\u518d\u5e30\u7684\u306b\u547c\u3073\u51fa\u3059\u3060\u3051\u3067\u3059\u3002\nclass With(yaml.YAMLObject, Node):\n    yaml_tag = u'!with'\n\n    def __init__(self, loader, node):\n        params = {\n            'tags': (nop, [], [is_typeof(list)]),\n            'nodes': (nop, [], [is_typeof(list), not_empty]),\n            'variable_scope': (str, '', []),\n            'name_scope': (str, '', []),\n            'device_scope': (str, '', [])\n            }\n\n        self.parse(loader, node, params)\n\n        assert self.variable_scope or self.name_scope or self.device_scope, \\\n            'at leaset each of variable, name, device should not be None'\n\n    def __repr__(self):\n        return 'With'\n\n    @classmethod\n    def from_yaml(cls, loader, node):\n        return cls(loader, node)\n\n    def create_node(self, nids, exclude_tags):\n        vs = lambda x: ( tf.variable_scope(x) if x else WithNone() )\n        ns = lambda x: ( tf.name_scope(x) if x else WithNone() )\n        dv = lambda x: ( tf.device(x) if x else WithNone() )\n\n        with vs(self.variable_scope), ns(self.name_scope), dv(self.device_scope):\n            for node in self.nodes:\n                nids = node.build(nids, exclude_tags)\n\n        return nids, None, None\n\n!conv2d\u306e\u30ce\u30fc\u30c9\u30af\u30e9\u30b9\u3067\u3059\u3002__init__()\u306fWith\u3068\u540c\u69d8\u3067YAML\u306e\u30ad\u30fc\u3068\u305d\u308c\u306b\u5bfe\u5fdc\u3059\u308b\u5909\u63db\u578b\u3001\u521d\u671f\u5024\u3001\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u3092\u4e26\u3079\u308b\u3060\u3051\u3067\u3059\u3002\ncreate_node()\u3067\u5b9f\u969b\u306bTensorFlow\u306e\u30ce\u30fc\u30c9\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u5165\u529b\u306e\u30ce\u30fc\u30c9\u306fYAML\u3067\u6307\u5b9a\u3057\u305fnid\u306e\u8f9e\u66f8\u304c\u5f15\u6570\u3068\u3057\u3066\u5f15\u304d\u56de\u3055\u308c\u3066\u304f\u308b\u306e\u3067\u305d\u3053\u304b\u3089\u53c2\u7167\u3057\u307e\u3059\u3002\nclass Conv2d(yaml.YAMLObject, Node):\n    yaml_tag = u'!conv2d'\n\n    def __init__(self, loader, node):\n        params = {\n            'nid': (str, None, []),\n            'tags': (nop, [], [is_typeof(list)]),\n            'source': (nop, None, [is_exist]),\n            'width': (int, 0, [is_greater_than(0)]),\n            'height': (int, 0, [is_greater_than(0)]),\n            'kernels_num': (int, 0, [is_greater_than(0)]),\n            'strides': (nop, [1,1,1,1], [is_typeof(list)]),\n            'b_init': (float, 0.1, []),\n            'padding': (str, 'SAME', []),\n            'name': (str, None, []),\n            'variable_scope': (str, None, [])\n            }\n        self.parse(loader, node, params)\n\n    def __repr__(self):\n        return 'Conv2d'\n\n    @classmethod\n    def from_yaml(cls, loader, node):\n        return cls(loader, node)\n\n    def create_node(self, nids, exclude_tags):\n        source_node = nids[self.source]\n        channels = source_node.get_shape()[3]\n\n        with tf.variable_scope(self.variable_scope) if self.variable_scope else WithNone():\n            w = weight_variable(\n                [self.height, self.width, channels,self.kernels_num], name=\"weight\")\n            b = bias_variable([self.kernels_num], val=self.b_init, name=\"bias\")\n\n        return nids, self.nid, tf.add( tf.nn.conv2d(\n                source_node, w, strides=self.strides, padding=self.padding), b, name=self.name)\n\n\u4ee5\u4e0b\u3001TensorFlow\u306e\u30ce\u30fc\u30c9\u30af\u30e9\u30b9\u304c\u7d9a\u304d\u3001\u6700\u5f8c\u306b\u30ed\u30fc\u30c9\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u304c\u5927\u3057\u305f\u3053\u3068\u306f\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n# ------------------------------------------------------------\n# Loader function\n# ------------------------------------------------------------\n\ndef load(path):\n    graph= yaml.load(open(str(path)).read(), Loader=Loader)\n\n    if type(graph['root']) is not Root:\n        raise IOError(\"no Root in yaml file\")\n\n    return graph['root']\n\n\u3053\u3046\u3057\u3066YAML\u3092\u30ed\u30fc\u30c9\u3059\u308b\u6e96\u5099\u304c\u6574\u3063\u305f\u306e\u3067\u30d1\u30fc\u30b5\u3092\u4f7f\u3044\u59cb\u3081\u307e\u3059\u3002\n\n\u30e2\u30c7\u30eb\u306e\u5229\u7528\nabies.py\n\u57fa\u672c\u306fload()\u3057\u3066build()\u3059\u308b\u3060\u3051\u3067\u3059\u3002build()\u306efeed_dict\u306b\u306fYAML\u3067\u8a18\u8ff0\u3057\u305fnodes_required\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u304c\u3053\u306e\u30e2\u30c7\u30eb\u3078\u306e\u5165\u529b\u306b\u306a\u308a\u307e\u3059\u3002\nimport yaml_loader as yl\n\nMODEL_YAML_PATH='abies_model.yaml'\n\n# ...\n\n    with tf.variable_scope(ROOT_VARIABLE_SCOPE):\n        print('build network')\n        graph_root = yl.load(MODEL_YAML_PATH)\n        graph_root.build(feed_dict={'root': batch_images})\n\nbuild\u6642\u306bexclude_tags\u3092\u6307\u5b9a\u3059\u308b\u3068\u305d\u306e\u30bf\u30b0\u304c\u4ed8\u3044\u3066\u3044\u308b\u8981\u7d20\u306fTensorFlow\u306e\u30ce\u30fc\u30c9\u306e\u751f\u6210\u3092\u884c\u3044\u307e\u305b\u3093\u3002TensorBoard\u3067\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u78ba\u8a8d\u3092\u3059\u308b\u3068\u304d\u306b\u4e8b\u524d\u5b66\u7fd2\u306e\u305f\u3081\u306e\u4f59\u8a08\u306a\u30ce\u30fc\u30c9\u3092\u8868\u793a\u3057\u305f\u304f\u306a\u3044\u6642\u306b\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n    with tf.variable_scope(ROOT_VARIABLE_SCOPE):\n        graph_root = yl.load(MODEL_YAML_PATH)\n        tags = graph_root.build(feed_dict={'root': batch_images},\n            exclude_tags=['train'])\n\n\n\n\ntrain\u30bf\u30b0\u306e\u30ce\u30fc\u30c9\u5165\u308a\ntrain\u30bf\u30b0\u306e\u30ce\u30fc\u30c9\u3092\u9664\u5916\u3057\u305f\u3082\u306e\n\n\n\n\n\n\n\n\n\n\n\u3084\u3063\u3066\u307f\u305f\u611f\u60f3\n\u4ee5\u4e0b\u611f\u60f3\n\n\u8a18\u8ff0\u91cf\u306f\u5143\u306eTensorFlow\u30b3\u30fc\u30c9\u3068\u3042\u3093\u307e\u308a\u5909\u308f\u3063\u3066\u306a\u304f\u306d\uff1f\n\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u898b\u901a\u3057\u306f\u3088\u304f\u306a\u3063\u305f\u304b\u3082\n\u3072\u3068\u3064\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u3064\u3044\u3066\u4f3c\u305f\u30e2\u30c7\u30eb\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u9055\u3044\u306e\u540c\u4e00\u69cb\u9020\u306e\u30e2\u30c7\u30eb\u3092\u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u308f\u3051\u3066\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u3067\u304d\u308b\u306e\u306f\u826f\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002python\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u3057\u3066\u30b3\u30fc\u30c9\u3067\u66f8\u3044\u3066\u3057\u307e\u3046\u3068\u5dee\u3057\u66ff\u3048\u3084\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u304c\u30b0\u30c0\u30b0\u30c0\u306b\u306a\u308a\u304c\u3061\u306a\u306e\u3067\u3002\nTensorFlow\u306f\u3059\u3079\u3066\u306e\u8a08\u7b97\u8981\u7d20\u304c\u30b0\u30e9\u30d5\u306e\u30ce\u30fc\u30c9\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3053\u3046\u3044\u3046\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u3092\u30b7\u30f3\u30d7\u30eb\u306a\u8a2d\u8a08\u3067\u66f8\u304d\u3084\u3059\u3044\u306a\u3068\u601d\u3063\u305f\u3002\n\n\n\u4eca\u5f8c\u306e\u8ab2\u984c\n\u81ea\u5206\u7528\u306b\u4fbf\u5229\u306b\u80b2\u3066\u3066\u3044\u304d\u307e\u3059\u3002\n\nTensorFlow\u306e\u57fa\u672c\u7684\u306a\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066\u81ea\u5206\u304c\u4f7f\u7528\u3059\u308b\u3082\u306e\u304b\u3089\u3069\u3093\u3069\u3093\u8ffd\u52a0\u3057\u3066\u3044\u304d\u305f\u3044\n\nsource \u306b\u76f4\u63a5\u30ce\u30fc\u30c9\u3092\u8a18\u8ff0\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u3002\u30b5\u30de\u30ea\u30fc\u7528\u306e\u5909\u63db\u306a\u3093\u304b\u306f\u30ce\u30fc\u30c9\u3068\u3057\u3066\u72ec\u7acb\u306b\u66f8\u304f\u5fc5\u8981\u304c\u8584\u3044\u306e\u3067\u3002\nyaml_loader.py \u306e\u5404\u30af\u30e9\u30b9\u306e\u8a18\u8ff0\u3092\u3082\u3046\u3061\u3087\u3063\u3068\u697d\u306b\u3067\u304d\u306a\u3044\u3082\u306e\u304b\u3002\n\n\u300c\u52aa\u529b\u3068\u6839\u6027\u300d\n\n\u6982\u8981\n----------------------------------------\n\n\u30bd\u30fc\u30b9\u306f[github\u306b\u3042\u308a\u307e\u3059](https://github.com/YusukeSuzuki/abiesnet/tree/f3ed661b31fe81a692634a6752379edc411fe5f8)\u3002\n\n### \u4eca\u56de\u306e\u52d5\u6a5f\u3001TensorFlow\u3067\u306e\u30e2\u30c7\u30eb\u306e\u8a18\u8ff0\n\nTensorFlow\u3067\u306f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30e2\u30c7\u30eb\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u69cb\u7bc9\u3057\u307e\u3059\u3002\u81ea\u5206\u306e\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3002\u516c\u5f0f\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u3082\u3053\u3046\u3044\u3046\u30b9\u30bf\u30a4\u30eb\u3067\u8a18\u8ff0\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u3057\u3066\u3053\u308c\u304c\u82e5\u5e72\u3060\u308b\u3044\u3002\n\n(\u5fc5\u8981\u304c\u3042\u308c\u3070)\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u3063\u3066\u3001\n\n```py3\ndef image_to_conv_layer(image, kernel_size, num_kernel):\n    with tf.device('/cpu:0'):\n        channels = image.get_shape()[3]\n        w = weight_variable([kernel_size,kernel_size, channels,num_kernel], name=\"weight\")\n        b = bias_variable([num_kernel], name=\"bias\")\n    with tf.device('/gpu:0'):\n        with tf.name_scope('conv_max'):\n            h_conv = tf.nn.relu(conv2d(image, w) + b)\n            h_pool = max_pool_2x2(h_conv)\n\n    return h_pool\n```\n\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u7d44\u307f\u4e0a\u3052\u308b\u3002\n\n```py3\ndef build_full_network(images,\n    with_conv1_pre_train=False, with_conv2_pre_train=False,\n    with_conv3_pre_train=False):\n\n    result = []\n\n    with tf.variable_scope('conv1'):\n        conv1 = image_to_conv_layer(images, 5, 64)\n\n        if with_conv1_pre_train:\n            with tf.variable_scope('pre_train'):\n                with tf.name_scope('inference'):\n                    pt_inf = conv_to_conv_transpose_layer(conv1, images)\n                image_summary = tf.image_summary('inference_image', pt_inf)\n                with tf.name_scope('loss'):\n                    pt_loss = pre_train_loss(images, pt_inf)\n                    tf.scalar_summary('loss/conv1', tf.log(tf.reduce_max(pt_loss)))\n                with tf.name_scope('train'):\n                    pt_train = pre_train_train(pt_loss, 1e-4)\n                    result = [pt_train] + result\n    # \u4ee5\u964d\u306e\u5c64\u304c\u7d9a\u304f\n```\n\n\u3060\u308b\u3055\u306e\u539f\u56e0\u306f\u4ee5\u4e0b\u3060\u3068\u601d\u3044\u307e\u3059\n\n- \u958b\u767a\u4e2d\u306b\u8abf\u6574\u3059\u3079\u304d\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u30b3\u30fc\u30c9\u4e2d\u306b\u6563\u8ca1\u3057\u304c\u3061\uff08\u958b\u767a\u8005\u306b\u3088\u308b\u3051\u308c\u3069\u3082\uff09\n- \u8a18\u8ff0\u91cf\u304c\u591a\u304f\u306a\u308b\u50be\u5411\u304c\u3042\u308b\n- \u8907\u6570\u306e\u30e2\u30c7\u30eb\u3092\u8a66\u3059\u3068\u304d\u306b\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u306e\u5165\u308c\u66ff\u3048\u3067\u306f\u306a\u304f\u30bd\u30fc\u30b9\u306e\u5165\u308c\u66ff\u3048\u3092\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\n\n\u3053\u308c\u3089\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306b\u30e2\u30c7\u30eb\u3092YAML\u3067\u66f8\u304f\u3068\u3069\u3046\u306a\u308b\u304b\u3092\u8a66\u3057\u307e\u3059\u3002\n\n### \u306a\u305cYAML\u304b\n\n\u305d\u3053\u305d\u3053\u8fbc\u307f\u5165\u3063\u305f\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u4eba\u9593\u304c\u66f8\u3053\u3046\u3068\u3057\u305f\u3089YAML\u306b\u843d\u3061\u7740\u304f\u3088\u306d\u3001\u3068\u3044\u3046\u3044\u3064\u3082\u306e\u8a71\u3002\n\n- \u4eba\u9593\u304c\u66f8\u3051\u308b(XML\u3067\u306f\u4e0d\u53ef)\n- \u30b3\u30e1\u30f3\u30c8\u3092\u8a18\u8ff0\u3067\u304d\u308b(JSON\u3067\u306f\u4e0d\u53ef)\n- PyYAML\u306b\u3088\u308aPython class\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u30fb\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u304c\u53ef\u80fd\n- anchor/alias \u306b\u3088\u308a\u5c11\u3057\u697d\u304c\u3067\u304d\u308b\n\n### \u6587\u66f8\u306e\u69cb\u6210\n\n- YAML\u3067\u66f8\u304b\u308c\u305f\u30e2\u30c7\u30eb\u306e\u89e3\u8aac\n- YAML\u30d1\u30fc\u30b5\u306e\u5b9f\u88c5\u306e\u89e3\u8aac\n- \u30e2\u30c7\u30eb\u3068\u30d1\u30fc\u30b5\u306e\u5229\u7528\u306e\u89e3\u8aac\n- \u3084\u3063\u3066\u307f\u305f\u611f\u60f3\n- \u4eca\u5f8c\u306e\u8ab2\u984c\n\nYAML\u3067\u66f8\u304b\u308c\u305f\u30e2\u30c7\u30eb\n----------------------------------------\n\n\u30e2\u30c7\u30eb\u3092\u8a18\u8ff0\u3057\u305fyaml\u30d5\u30a1\u30a4\u30eb\u306e\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\u3053\u306e\u3042\u3068\u5404\u8981\u7d20\u306e\u89e3\u8aac\u3092\u3057\u307e\u3059\u3002\n\n[abies_model.yaml](https://github.com/YusukeSuzuki/abiesnet/blob/f3ed661b31fe81a692634a6752379edc411fe5f8/abies_model.yaml)\n\n```yaml\n---\n# user data tree\nuser_variables:\n  - op_device: &op_device '/cpu:0'\n# graph data tree\nroot: !root\n  nodes_required: ['root']\n  nodes:\n    - !with\n      # can define tf.variable_scope, tf.name_scope, tf.device at same time\n      variable_scope: conv1\n      nodes:\n      - !conv2d\n        # nid is node id, to be used for node connection\n        { nid: c1, name: out, source: root, width: 5, height: 5, kernels_num: 64 }\n      - !with\n        variable_scope: train\n        tags: [train]\n        nodes:\n        - !conv2d_transpose\n          {nid: c1_tr, name: conv1tr, source: c1, shape_as: root, width: 5, height: 5}\n        - !conv2d_ae_loss\n          {nid: c1_ae_loss, source1: root, source2: c1_tr}\n        - !adam_optimizer {name: optimizer, source: c1_ae_loss, val: 1e-4}\n      - !with\n        device_scope: '/cpu:0'\n        tags: [train, log]\n        nodes:\n        - !reduce_mean\n          {nid: c1_ae_loss_mean, source: c1_ae_loss, dims: [1]}\n        - !scalar_summary\n          {summary_tag: 'conv1/loss', source: c1_ae_loss_mean}\n        - !image_summary\n          {summary_tag: 'conv1tr/image', source: c1_tr}\n    - !with\n      variable_scope: conv2\n      nodes:\n      - !conv2d\n        { nid: c2, name: out, source: c1, width: 5, height: 5, kernels_num: 64 }\n      - !with\n        variable_scope: train\n        tags: [train]\n        nodes:\n        - !conv2d_transpose\n          {nid: c2_tr, name: conv2tr, source: c2, shape_as: c1, width: 5, height: 5}\n        - !conv2d_ae_loss\n          {nid: c2_ae_loss, source1: c1, source2: c2_tr}\n        - !adam_optimizer {name: optimizer, source: c2_ae_loss, val: 1e-4}\n      - !with\n        device_scope: '/cpu:0'\n        tags: [train, log]\n        nodes:\n        - !reduce_mean\n          {nid: c2_ae_loss_mean, source: c2_ae_loss, dims: [1]}\n        - !scalar_summary\n          {summary_tag: 'conv2/loss', source: c2_ae_loss_mean}\n    - !with\n      variable_scope: conv3\n      nodes:\n      - !conv2d\n        { nid: c3, name: out, source: c2, width: 5, height: 5, kernels_num: 64 }\n      - !with\n        variable_scope: train\n        tags: [train]\n        nodes:\n        - !conv2d_transpose\n          {nid: c3_tr, name: conv2tr, source: c3, shape_as: c2, width: 5, height: 5}\n        - !conv2d_ae_loss\n          {nid: c3_ae_loss, source1: c2, source2: c3_tr}\n        - !adam_optimizer {name: optimizer, source: c3_ae_loss, val: 1e-4}\n      - !with\n        device_scope: '/cpu:0'\n        tags: [train, log]\n        nodes:\n        - !reduce_mean\n          {nid: c3_ae_loss_mean, source: c3_ae_loss, dims: [1]}\n        - !scalar_summary\n          {summary_tag: 'conv3/loss', source: c3_ae_loss_mean}\n    - !with\n      variable_scope: maxpool\n      nodes:\n      - !max_pool_2x2\n        {nid: mp1, source: c3}\n```\n\n\u5192\u982d\u304b\u3089\u3002\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u533a\u5207\u308a\u3068\u30e6\u30fc\u30b6\u30fc\u30c7\u30fc\u30bf\u3067\u3059\u3002\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u81ea\u4f53\u3092\u3072\u3068\u3064\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306f\u3057\u3066\u3044\u306a\u3044\u305f\u3081\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3084YAML\u5185\u3067\u5229\u7528\u3059\u308b\u4efb\u610f\u306e\u30c7\u30fc\u30bf\u3092\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4eca\u56de\u306f\u8a66\u3057\u306b\u30c7\u30d0\u30a4\u30b9\u306e\u540d\u524d\u3092\u5165\u308c\u3066\u3044\u307e\u3059\u304c\u5229\u7528\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\n```yaml\n---\n# user data tree\nuser_variables:\n  - op_device: &op_device '/cpu:0'\n```\n\n\u30ad\u30fc`root`\u306b`!root`\u30bf\u30b0\u3092\u6307\u5b9a\u3057\u3066\u30b0\u30e9\u30d5\u306e\u30eb\u30fc\u30c8\u3068\u3057\u3066\u3044\u307e\u3059\u3002`nodes_required`\u306f\u3053\u306e\u30b0\u30e9\u30d5\u306e\u5165\u529b\u306b\u6307\u5b9a\u3059\u3079\u304d\u540d\u524d\u3067\u3059\u3002\u3053\u306eYAML\u3092\u8aad\u307f\u8fbc\u3093\u3067\u30b0\u30e9\u30d5\u3092\u69cb\u7bc9\u3059\u308b\u969b\u306b\u5229\u7528\u3057\u307e\u3059\u3002`nodes`\u4ee5\u4e0b\u306e\u914d\u5217\u306bTensorFlow\u306e\u30ce\u30fc\u30c9\u304c\u4e26\u3073\u307e\u3059\u3002\n\n```yaml\n# graph data tree\nroot: !root\n  nodes_required: ['root']\n  nodes:\n```\n\nTensorFlow\u3067\u983b\u7e41\u306b\u5229\u7528\u3059\u308b`with tf.variable_scope('some_scope'):`\u3068\u7b49\u4fa1\u3067\u3059\u3002`variable_scope`\u306e\u4ed6\u306b`name_scope`\u3001`device`\u306e\u5404\u30ad\u30fc\u3092\u540c\u6642\u306b\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002`nodes`\u4ee5\u4e0b\u306e\u914d\u5217\u306b`with`\u5185\u306e\u30ce\u30fc\u30c9\u304c\u4e26\u3073\u307e\u3059\u3002\n\n```yaml\n    - !with\n      # can define tf.variable_scope, tf.name_scope, tf.device at same time\n      variable_scope: conv1\n      nodes:\n```\n\nconv\u5c64\u306e\u30ce\u30fc\u30c9\u3067\u3059\u3002`nid`\u306f`node id`\u306e\u7565\u3067\u4e3b\u306bYAML\u5185\u3067\u4ed6\u306e\u30ce\u30fc\u30c9\u304b\u3089\u53c2\u7167\u3055\u308c\u308b\u305f\u3081\u306e\u540d\u524d\u3067\u3059\u3002`name`\u306fTensorFlow\u306e\u30ce\u30fc\u30c9\u306e`name`\u3001`source`\u306f\u3053\u306e\u30ce\u30fc\u30c9\u3078\u306e\u5165\u529b\u3067`nid`\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002`width`\u3001`height`\u3001`kernels_num`\u306fconv\u5c64\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3059\u3002\n\n`nid`\u3001`name`\u306f\u7701\u7565\u53ef\u80fd\u3067\u3059\u3002scalar_summary\u306e\u3088\u3046\u306a\u7d42\u7aef\u30ce\u30fc\u30c9\u3067\u306f\u7701\u7565\u3057\u3066\u3088\u3044\u3067\u3057\u3087\u3046\u3002\n\n```yaml\n      - !conv2d\n        # nid is node id, to be used for node connection\n        { nid: c1, name: out, source: root, width: 5, height: 5, kernels_num: 64 }\n```\n\n`!with`\u3084`!conv2d`\u306a\u3069`!root`\u4ee5\u5916\u306e\u30ce\u30fc\u30c9\u306b\u306f`tags`\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u73fe\u5728\u306f\u7279\u5b9a\u306e\u30bf\u30b0\u306b\u3064\u3044\u3066TensorFlow\u306e\u30ce\u30fc\u30c9\u751f\u6210\u3092\u884c\u308f\u306a\u3044\u6307\u5b9a\u3092\u3059\u308b\u305f\u3081\u306b\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n```yaml\n      - !with\n        variable_scope: train\n        tags: [train]\n        nodes:\n```\n\n`nodes`\u306f\u914d\u5217\u3092\u60f3\u5b9a\u3057\u3066\u3044\u308b\u305f\u3081\u5f53\u7136\u306b\u8907\u6570\u306e\u30ce\u30fc\u30c9\u3092\u4e26\u3079\u3089\u308c\u307e\u3059\u3002\n\n```yaml\n        - !conv2d_transpose\n          {nid: c1_tr, name: conv1tr, source: c1, shape_as: root, width: 5, height: 5}\n        - !conv2d_ae_loss\n          {nid: c1_ae_loss, source1: root, source2: c1_tr}\n        - !adam_optimizer {name: optimizer, source: c1_ae_loss, val: 1e-4}\n```\n\nTensorBoard\u5411\u3051\u306e\u30b5\u30de\u30ea\u30fc\u306e\u305f\u3081\u306e\u30ce\u30fc\u30c9\u7fa4\u3067\u3059\u3002\u30b5\u30de\u30ea\u30fc\u306fCPU\u3067\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081`device`\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u307e\u305f`!scalar_summary`\u3001`!image_summary`\u306f\u305d\u306e\u3042\u3068\u53c2\u7167\u3059\u308b\u5fc5\u8981\u304c\u7121\u3044\u305f\u3081`nid`\u3092\u8a18\u8ff0\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\n```yaml\n      - !with\n        device_scope: '/cpu:0'\n        tags: [train, log]\n        nodes:\n        - !reduce_mean\n          {nid: c1_ae_loss_mean, source: c1_ae_loss, dims: [1]}\n        - !scalar_summary\n          {summary_tag: 'conv1/loss', source: c1_ae_loss_mean}\n        - !image_summary\n          {summary_tag: 'conv1tr/image', source: c1_tr}\n```\n\n\u4ee5\u4e0b\u3001\u540c\u69d8\u306b\u7d9a\u304d\u307e\u3059\u3002\n\nYAML\u306e\u8aad\u307f\u8fbc\u307f\n----------------------------------------\n\n\u30d1\u30fc\u30b9\u306b\u306f [PyYAML](http://pyyaml.org/) \u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002`yaml.YAMLObject`\u3092\u5229\u7528\u3057\u3066YAML\u306e\u5404\u30bf\u30b0\u3092\u30bf\u30b0\u7a2e\u3054\u3068\u306b\u5bfe\u5fdc\u3059\u308b\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5909\u63db\u3057\u307e\u3059\u3002\u500b\u3005\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304cTensorFlow\u306e\u30ce\u30fc\u30c9\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u3001\u30d1\u30fc\u30b9\u30b3\u30fc\u30c9\u3067\u3059\u3002\u500b\u5225\u306b\u89e3\u8aac\u3057\u307e\u3059\u3002\n\n[yaml_loader.py](https://github.com/YusukeSuzuki/abiesnet/blob/f3ed661b31fe81a692634a6752379edc411fe5f8/yaml_loader.py)\n\n\u5192\u982d\u3001\u96d1\u591a\u306a\u30e1\u30bd\u30c3\u30c9\u7fa4\u3067\u3059\u3002`with`\u6587\u306b\u4f55\u3082\u3057\u306a\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5165\u308c\u8fbc\u3080\u305f\u3081\u306b`class WithNone`\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n\n```py3\nimport yaml\nimport tensorflow as tf\n\n# ------------------------------------------------------------\n# utilities\n# ------------------------------------------------------------\n\ndef weight_variable(shape, dev=0.35, name=None):\n    \"\"\"create weight variable for conv2d(weight sharing)\"\"\"\n\n    return tf.get_variable(name, shape,\n        initializer=tf.truncated_normal_initializer(stddev=dev))\n\ndef bias_variable(shape, val=0.1, name=None):\n    \"\"\"create bias variable for conv2d(weight sharing)\"\"\"\n\n    return tf.get_variable(\n        name, shape, initializer=tf.constant_initializer(val))\n\nclass WithNone:\n    def __enter__(self): pass\n    def __exit__(self,t,v,tb): pass\n```\n\n\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u306e\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u7fa4\u3067\u3059\u3002YAML\u30c7\u30fc\u30bf\u306e\u30c1\u30a7\u30c3\u30af\u3092\u30c6\u30fc\u30d6\u30eb\u5316\u3059\u308b\u306e\u306b\u5229\u7528\u3057\u307e\u3059\u3002`nop()`\u306f\u5225\u3067\u578b\u5909\u63db\u3092\u3057\u306a\u3044\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n\n```py3\n# ------------------------------------------------------------\n# assert\n# ------------------------------------------------------------\n\ndef nop(val):\n    return val\n\ndef is_exist(key, val):\n    return (val, '{} required'.format(key))\n\ndef not_empty(key, val):\n    return (len(val) > 0, '{} must not be empty'.format(key))\n\nclass is_greater_than:\n    def __init__(self, val):\n        self.val = val\n\n    def __call__(self, key, val):\n        return (val > self.val, '{} must be > {}'.format(key, self.val))\n\nclass is_typeof:\n    def __init__(self, val):\n        self.val = val\n\n    def __call__(self, key, val):\n        return (type(val) is self.val, '{} must be {}'.format(key, self.val))\n```\n\nYAML\u306e\u30d1\u30fc\u30b9\u306e\u969b\u306b`nid`\u306e\u30e6\u30cb\u30fc\u30af\u30c1\u30a7\u30c3\u30af\u306e\u305f\u3081\u306e\u8f9e\u66f8\u3092\u5f15\u304d\u56de\u3057\u305f\u3044\u306e\u3067`yaml.Loader`\u3092\u30ab\u30b9\u30bf\u30e0\u3057\u3066\u3044\u307e\u3059\u3002\n\n```py3\n# ------------------------------------------------------------\n# YAML Graph Nodes\n# ------------------------------------------------------------\n\nclass Loader(yaml.Loader):\n    def __init__(self, stream):\n        self.nids = {}\n        super(Loader, self).__init__(stream)\n```\n\n\u30ce\u30fc\u30c9\u306b\u5171\u901a\u3059\u308b\u62bd\u8c61\u30af\u30e9\u30b9\u3067\u3059\u3002YAML\u306e\u30d1\u30fc\u30b9\u3068TensorFlow\u30ce\u30fc\u30c9\u751f\u6210\u306e\u969b\u306e\u5197\u9577\u306a\u51e6\u7406\u3092\u307e\u3068\u3081\u3066\u3044\u307e\u3059\u3002`parse()`\u3067\u306fYAML\u306ekey, value\u3092\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306ekey, value\u306b\u5909\u63db\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306e\u633f\u5165\u3001\u7c21\u5358\u306a\u578b\u30c1\u30a7\u30c3\u30af\u3001\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u3082\u884c\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u51e6\u7406\u306e\u5177\u8c61\u306f\u5404\u6d3e\u751f\u30af\u30e9\u30b9\u304b\u3089\u8f9e\u66f8\u3067\u6e21\u3055\u308c\u307e\u3059\u3002\n`build()`\u3067\u306f\u9664\u5916\u30bf\u30b0\u306e\u30b9\u30ad\u30c3\u30d7\u3068\u30e6\u30cb\u30fc\u30af\u30c1\u30a7\u30c3\u30af\u306e\u305f\u3081\u306e\u8f9e\u66f8\u306e\u8ffd\u52a0\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\n```py3\nclass Node:\n    def __init__():\n        pass\n\n    def parse(self,loader,node,params):\n        yaml_dict = loader.construct_mapping(node, deep=True)\n        self.__dict__['nid'] =  None\n\n        for key, value in params.items():\n            got = yaml_dict.get(key, value[1])\n            self.__dict__[key] = value[0](got) if got is not None else got\n\n        assert self.nid not in loader.nids, \\\n            'line {}: nid \"{}\" is already exists at line {}'.format(\n                node.end_mark.line+1, self.nid, loader.nids[self.nid].line+1)\n\n        for key, val in params.items():\n            for cond in val[2]:\n                ret, mess = cond(key, self.__dict__[key])\n                assert ret, 'line {}: {}'.format(node.end_mark.line+1, mess)\n\n        if self.nid: loader.nids[self.nid] = node.end_mark\n\n    def build(self, nids, exclude_tags):\n        for exclude_tag in exclude_tags:\n            if exclude_tag in self.tags:\n                return nids\n\n        nids, nid, node = self.create_node(nids, exclude_tags)\n \n        if nid and node is not None: nids[nid] = node\n\n        return nids\n```\n\n\u30b0\u30e9\u30d5\u30eb\u30fc\u30c8\u3067\u3059\u3002\u4ed6\u306e\u30ce\u30fc\u30c9\u3068\u306f\u7570\u306a\u308b`build()`\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002\n\n```py3\nclass Root(yaml.YAMLObject):\n    yaml_tag = u'!root'\n\n    def __init__(self, nodes, nodes_required):\n        self.nodes = nodes\n        self.nodes_required = nodes_required\n\n    def __repr__(self):\n        return 'Root'\n\n    @classmethod\n    def from_yaml(cls, loader, node):\n        yaml_dict = loader.construct_mapping(node)\n\n        args = {\n            'nodes': yaml_dict.get('nodes', None),\n            'nodes_required': yaml_dict.get('nodes_required', None),\n        }\n\n        assert type(args['nodes']) is list, \\\n            'line {}: nodes must be list'.format(node.end_mark.line+1)\n        assert type(args['nodes_required']) is list, \\\n            'line {}: nodes_required must be list'.format(node.end_mark.line+1)\n\n        for required_node in args['nodes_required']:\n            assert required_node not in loader.nids, \\\n                'line {}: nid \"{}\" is already exists'.format(node.end_mark.line+1, required_node)\n            print(required_node)\n            loader.nids[required_node] = node.end_mark\n\n        return cls(**args)\n\n    def build(self, feed_dict={}, exclude_tags=[]):\n        self.__nids = {}\n\n        for key, val in feed_dict.items():\n            self.__nids[key]  = val\n\n        for required_node in self.nodes_required:\n            if required_node not in self.__nids:\n                raise ValueError('feed_dict requires {}.'.format(self.nodes_required))\n\n        for node in self.nodes:\n            self.__nids = node.build(self.__nids, exclude_tags)\n```\n\n`!with`\u30bf\u30b0\u306b\u5bfe\u5fdc\u3059\u308b\u30af\u30e9\u30b9\u3067\u3059\u3002\n\n`__init__()`\u306f\u4ed6\u306e\u30ce\u30fc\u30c9\u30af\u30e9\u30b9\u3067\u3082\u5171\u901a\u3067\u3059\u304c`params`\u8f9e\u66f8\u3092\u4f5c\u3063\u3066`Node`\u30af\u30e9\u30b9\u306e`parse()`\u306b\u6e21\u3059\u3068\u3044\u3046\u306e\u304c\u30eb\u30fc\u30c1\u30f3\u3067\u3059\u3002\n\n`params`\u8f9e\u66f8\u306e`'tags': (nop, [], [is_typeof(list)])`\u306f\u300cYAML\u306e'tags'\u8981\u7d20\u306b\u3064\u3044\u3066\u3001\u578b\u5909\u63db\u3092\u884c\u308f\u305a\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f[]\u3067\u3001\u578b\u304clist\u3067\u3042\u308b\u3053\u3068\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u300d\u3068\u3044\u3046\u610f\u5473\u306b\u306a\u308a\u307e\u3059\u3002`'kernels_num': (int, 0, [is_greater_than(0)])`\u3060\u3068\u300c'kernels_num'\u8981\u7d20\u306b\u3064\u3044\u3066\u3001int\u306b\u5909\u63db\u3057\u3066\u3001\u521d\u671f\u5024\u306f0\u3067\u30010\u3088\u308a\u5927\u304d\u3044\u3053\u3068\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u300d\u3068\u3044\u3046\u610f\u5473\u306b\u306a\u308a\u307e\u3059\u3002\u521d\u671f\u5024\u3067\u306f\u30c1\u30a7\u30c3\u30af\u304c\u5931\u6557\u3059\u308b\u306e\u3067\u5fc5\u9808\u8981\u7d20\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n\uff08\u578b\u5909\u63db\u3092\u5165\u308c\u3066\u3044\u308b\u7406\u7531\u306fPyYAML\u304c\u30d1\u30fc\u30b9\u306e\u969b\u306b\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u6307\u6570\u8868\u8a18\u3092\u6b63\u3057\u304f\u30d1\u30fc\u30b9\u3057\u3066\u304f\u308c\u306a\u3044\u304b\u3089\u3067\u3059\uff09\n\n`create_node()`\u304c\u5b9f\u969b\u306eTensorFlow\u306e\u30ce\u30fc\u30c9\u3092\u751f\u6210\u3059\u308b\u7b87\u6240\u306b\u306a\u308a\u307e\u3059\u3002`!with`\u306f\u30ce\u30fc\u30c9\u3092\u6301\u305f\u306a\u3044\u306e\u3067TensorFlow\u306e`with ...`\u3092\u4f5c\u3063\u3066\u305d\u306e\u4e2d\u3067`nodes`\u4ee5\u4e0b\u306e\u8981\u7d20\u306e`build()`\u3092\u518d\u5e30\u7684\u306b\u547c\u3073\u51fa\u3059\u3060\u3051\u3067\u3059\u3002\n\n```py3\nclass With(yaml.YAMLObject, Node):\n    yaml_tag = u'!with'\n\n    def __init__(self, loader, node):\n        params = {\n            'tags': (nop, [], [is_typeof(list)]),\n            'nodes': (nop, [], [is_typeof(list), not_empty]),\n            'variable_scope': (str, '', []),\n            'name_scope': (str, '', []),\n            'device_scope': (str, '', [])\n            }\n\n        self.parse(loader, node, params)\n\n        assert self.variable_scope or self.name_scope or self.device_scope, \\\n            'at leaset each of variable, name, device should not be None'\n\n    def __repr__(self):\n        return 'With'\n\n    @classmethod\n    def from_yaml(cls, loader, node):\n        return cls(loader, node)\n\n    def create_node(self, nids, exclude_tags):\n        vs = lambda x: ( tf.variable_scope(x) if x else WithNone() )\n        ns = lambda x: ( tf.name_scope(x) if x else WithNone() )\n        dv = lambda x: ( tf.device(x) if x else WithNone() )\n\n        with vs(self.variable_scope), ns(self.name_scope), dv(self.device_scope):\n            for node in self.nodes:\n                nids = node.build(nids, exclude_tags)\n\n        return nids, None, None\n```\n\n`!conv2d`\u306e\u30ce\u30fc\u30c9\u30af\u30e9\u30b9\u3067\u3059\u3002`__init__()`\u306f`With`\u3068\u540c\u69d8\u3067YAML\u306e\u30ad\u30fc\u3068\u305d\u308c\u306b\u5bfe\u5fdc\u3059\u308b\u5909\u63db\u578b\u3001\u521d\u671f\u5024\u3001\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u3092\u4e26\u3079\u308b\u3060\u3051\u3067\u3059\u3002\n\n`create_node()`\u3067\u5b9f\u969b\u306bTensorFlow\u306e\u30ce\u30fc\u30c9\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u5165\u529b\u306e\u30ce\u30fc\u30c9\u306fYAML\u3067\u6307\u5b9a\u3057\u305f`nid`\u306e\u8f9e\u66f8\u304c\u5f15\u6570\u3068\u3057\u3066\u5f15\u304d\u56de\u3055\u308c\u3066\u304f\u308b\u306e\u3067\u305d\u3053\u304b\u3089\u53c2\u7167\u3057\u307e\u3059\u3002\n\n```py3\nclass Conv2d(yaml.YAMLObject, Node):\n    yaml_tag = u'!conv2d'\n\n    def __init__(self, loader, node):\n        params = {\n            'nid': (str, None, []),\n            'tags': (nop, [], [is_typeof(list)]),\n            'source': (nop, None, [is_exist]),\n            'width': (int, 0, [is_greater_than(0)]),\n            'height': (int, 0, [is_greater_than(0)]),\n            'kernels_num': (int, 0, [is_greater_than(0)]),\n            'strides': (nop, [1,1,1,1], [is_typeof(list)]),\n            'b_init': (float, 0.1, []),\n            'padding': (str, 'SAME', []),\n            'name': (str, None, []),\n            'variable_scope': (str, None, [])\n            }\n        self.parse(loader, node, params)\n\n    def __repr__(self):\n        return 'Conv2d'\n\n    @classmethod\n    def from_yaml(cls, loader, node):\n        return cls(loader, node)\n\n    def create_node(self, nids, exclude_tags):\n        source_node = nids[self.source]\n        channels = source_node.get_shape()[3]\n\n        with tf.variable_scope(self.variable_scope) if self.variable_scope else WithNone():\n            w = weight_variable(\n                [self.height, self.width, channels,self.kernels_num], name=\"weight\")\n            b = bias_variable([self.kernels_num], val=self.b_init, name=\"bias\")\n\n        return nids, self.nid, tf.add( tf.nn.conv2d(\n                source_node, w, strides=self.strides, padding=self.padding), b, name=self.name)\n```\n\n\u4ee5\u4e0b\u3001TensorFlow\u306e\u30ce\u30fc\u30c9\u30af\u30e9\u30b9\u304c\u7d9a\u304d\u3001\u6700\u5f8c\u306b\u30ed\u30fc\u30c9\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u304c\u5927\u3057\u305f\u3053\u3068\u306f\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\n```py3\n# ------------------------------------------------------------\n# Loader function\n# ------------------------------------------------------------\n\ndef load(path):\n    graph= yaml.load(open(str(path)).read(), Loader=Loader)\n\n    if type(graph['root']) is not Root:\n        raise IOError(\"no Root in yaml file\")\n\n    return graph['root']\n```\n\n\u3053\u3046\u3057\u3066YAML\u3092\u30ed\u30fc\u30c9\u3059\u308b\u6e96\u5099\u304c\u6574\u3063\u305f\u306e\u3067\u30d1\u30fc\u30b5\u3092\u4f7f\u3044\u59cb\u3081\u307e\u3059\u3002\n\n\u30e2\u30c7\u30eb\u306e\u5229\u7528\n----------------------------------------\n\n[abies.py](https://github.com/YusukeSuzuki/abiesnet/blob/f3ed661b31fe81a692634a6752379edc411fe5f8/abies.py)\n\n\u57fa\u672c\u306f`load()`\u3057\u3066`build()`\u3059\u308b\u3060\u3051\u3067\u3059\u3002`build()`\u306e`feed_dict`\u306b\u306fYAML\u3067\u8a18\u8ff0\u3057\u305f`nodes_required`\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u304c\u3053\u306e\u30e2\u30c7\u30eb\u3078\u306e\u5165\u529b\u306b\u306a\u308a\u307e\u3059\u3002\n\n```py3\nimport yaml_loader as yl\n\nMODEL_YAML_PATH='abies_model.yaml'\n\n# ...\n\n    with tf.variable_scope(ROOT_VARIABLE_SCOPE):\n        print('build network')\n        graph_root = yl.load(MODEL_YAML_PATH)\n        graph_root.build(feed_dict={'root': batch_images})\n```\n\n`build`\u6642\u306b`exclude_tags`\u3092\u6307\u5b9a\u3059\u308b\u3068\u305d\u306e\u30bf\u30b0\u304c\u4ed8\u3044\u3066\u3044\u308b\u8981\u7d20\u306fTensorFlow\u306e\u30ce\u30fc\u30c9\u306e\u751f\u6210\u3092\u884c\u3044\u307e\u305b\u3093\u3002TensorBoard\u3067\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u78ba\u8a8d\u3092\u3059\u308b\u3068\u304d\u306b\u4e8b\u524d\u5b66\u7fd2\u306e\u305f\u3081\u306e\u4f59\u8a08\u306a\u30ce\u30fc\u30c9\u3092\u8868\u793a\u3057\u305f\u304f\u306a\u3044\u6642\u306b\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\n```py3\n    with tf.variable_scope(ROOT_VARIABLE_SCOPE):\n        graph_root = yl.load(MODEL_YAML_PATH)\n        tags = graph_root.build(feed_dict={'root': batch_images},\n            exclude_tags=['train'])\n```\n|train\u30bf\u30b0\u306e\u30ce\u30fc\u30c9\u5165\u308a|train\u30bf\u30b0\u306e\u30ce\u30fc\u30c9\u3092\u9664\u5916\u3057\u305f\u3082\u306e|\n|---|---|\n|![with_train.png](https://qiita-image-store.s3.amazonaws.com/0/25288/146e5ab2-dc8e-11cb-2999-0cc0640e4a3e.png)|![without_train.png](https://qiita-image-store.s3.amazonaws.com/0/25288/e43425d8-860c-6543-4fdc-b0ae686b2afc.png)|\n\n\n\u3084\u3063\u3066\u307f\u305f\u611f\u60f3\n----------------------------------------\n\n\u4ee5\u4e0b\u611f\u60f3\n\n- \u8a18\u8ff0\u91cf\u306f\u5143\u306eTensorFlow\u30b3\u30fc\u30c9\u3068\u3042\u3093\u307e\u308a\u5909\u308f\u3063\u3066\u306a\u304f\u306d\uff1f\n- \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u898b\u901a\u3057\u306f\u3088\u304f\u306a\u3063\u305f\u304b\u3082\n- \u3072\u3068\u3064\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u3064\u3044\u3066\u4f3c\u305f\u30e2\u30c7\u30eb\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u9055\u3044\u306e\u540c\u4e00\u69cb\u9020\u306e\u30e2\u30c7\u30eb\u3092\u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u308f\u3051\u3066\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u3067\u304d\u308b\u306e\u306f\u826f\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002python\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u3057\u3066\u30b3\u30fc\u30c9\u3067\u66f8\u3044\u3066\u3057\u307e\u3046\u3068\u5dee\u3057\u66ff\u3048\u3084\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u304c\u30b0\u30c0\u30b0\u30c0\u306b\u306a\u308a\u304c\u3061\u306a\u306e\u3067\u3002\n- TensorFlow\u306f\u3059\u3079\u3066\u306e\u8a08\u7b97\u8981\u7d20\u304c\u30b0\u30e9\u30d5\u306e\u30ce\u30fc\u30c9\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3053\u3046\u3044\u3046\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u3092\u30b7\u30f3\u30d7\u30eb\u306a\u8a2d\u8a08\u3067\u66f8\u304d\u3084\u3059\u3044\u306a\u3068\u601d\u3063\u305f\u3002\n\n\u4eca\u5f8c\u306e\u8ab2\u984c\n----------------------------------------\n\n\u81ea\u5206\u7528\u306b\u4fbf\u5229\u306b\u80b2\u3066\u3066\u3044\u304d\u307e\u3059\u3002\n\n- TensorFlow\u306e\u57fa\u672c\u7684\u306a\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066\u81ea\u5206\u304c\u4f7f\u7528\u3059\u308b\u3082\u306e\u304b\u3089\u3069\u3093\u3069\u3093\u8ffd\u52a0\u3057\u3066\u3044\u304d\u305f\u3044\n- `source` \u306b\u76f4\u63a5\u30ce\u30fc\u30c9\u3092\u8a18\u8ff0\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u3002\u30b5\u30de\u30ea\u30fc\u7528\u306e\u5909\u63db\u306a\u3093\u304b\u306f\u30ce\u30fc\u30c9\u3068\u3057\u3066\u72ec\u7acb\u306b\u66f8\u304f\u5fc5\u8981\u304c\u8584\u3044\u306e\u3067\u3002\n- yaml_loader.py \u306e\u5404\u30af\u30e9\u30b9\u306e\u8a18\u8ff0\u3092\u3082\u3046\u3061\u3087\u3063\u3068\u697d\u306b\u3067\u304d\u306a\u3044\u3082\u306e\u304b\u3002\n", "tags": ["TensorFlow", "YAML", "python3"]}