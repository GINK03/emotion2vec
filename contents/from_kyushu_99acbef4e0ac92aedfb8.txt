{"context": "\u6a2a\u6d5c\u3078\u306a\u3061\u3087\u3053\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u52c9\u5f37\u4f1a\u306b\u3066\u904e\u53bb\u306b\u51fa\u984c\u3055\u308c\u305f\u5883\u754c\u7dda\u5206\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n\u56de\u7b54\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306f50\u5206\u7a0b\u5ea6\u3002\nLineSegments#count\u306e\u4e2d\u8eab\u306f\u521d\u3081cline\u3068nline\u3092zip\u3057\u30011\u30de\u30b9\u305a\u3064\u6bd4\u8f03\u3057\u3066\u304b\u3089\u7d50\u679c\u3092\u51fa\u3057\u3066\u3044\u305f\u306e\u3060\u304c\u3001\u3088\u304f\u3088\u304f\u8003\u3048\u308c\u3070\u96a3\u308a\u5408\u3046\u884c\u306e\u30d3\u30c3\u30c8XOR\u3092\u53d6\u308b\u3060\u3051\u3067\u3088\u3044\u3053\u3068\u306b\u6c17\u4ed8\u3044\u305f\u306e\u3067\u66f8\u304d\u76f4\u3057\u305f\u3002\nclass LineSegments\n  def initialize input\n    @field = input.chars.each_slice(2).map{|c| (\"%06b\" % c.join.to_i(8)).chars.map &:to_i}\n  end\n\n  def lines\n    count(@field).zip(count(@field.transpose)).map{|r1, r2| r1 + r2}\n  end\n\n  private\n\n  def count field\n    field.each_cons(2).each_with_object(Array.new(6){0}){|(cline, nline), sum|\n      (\"%06b\" % (cline.join.to_i(2) ^ nline.join.to_i(2))).scan(/1+/){|m| sum[m.size - 1] += 1}\n    }\n  end\nend\n\ntest = <<_TEST\n/*0*/ test( \"060276724276\", \"6,2,1,1,0,1\" );    \n/*1*/ test( \"770175454177\", \"2,3,0,3,1,0\" );    \n/*2*/ test( \"743733377170\", \"9,3,1,0,0,0\" );    \n/*3*/ test( \"724212121273\", \"5,2,1,1,1,1\" );    \n/*4*/ test( \"100000000000\", \"3,0,0,0,0,0\" );    \n/*5*/ test( \"000002000000\", \"4,0,0,0,0,0\" );    \n/*6*/ test( \"003622223600\", \"0,4,0,4,0,0\" );    \n/*7*/ test( \"520073737070\", \"8,3,1,1,0,0\" );    \n/*8*/ test( \"770077007700\", \"0,0,0,0,0,5\" );    \n/*9*/ test( \"555555555514\", \"2,0,0,0,2,2\" );    \n/*10*/ test( \"764252427600\", \"4,0,4,0,2,0\" );    \n/*11*/ test( \"774555554177\", \"3,3,1,3,0,0\" );    \n/*12*/ test( \"674574754557\", \"11,5,0,1,0,0\" );    \n/*13*/ test( \"000000000000\", \"0,0,0,0,0,0\" );    \n/*14*/ test( \"777777777777\", \"0,0,0,0,0,0\" );    \n/*15*/ test( \"774377777577\", \"6,0,2,0,0,0\" );    \n/*16*/ test( \"070777777777\", \"0,1,1,0,0,0\" );    \n/*17*/ test( \"373737373737\", \"0,0,0,0,0,1\" );    \n/*18*/ test( \"603260327725\", \"30,0,0,0,0,0\" );    \n/*19*/ test( \"466331144663\", \"30,0,0,0,0,0\" );    \n/*20*/ test( \"000000000242\", \"3,2,0,0,0,0\" );    \n/*21*/ test( \"567656043772\", \"18,2,1,0,0,0\" );    \n/*22*/ test( \"200763012420\", \"15,4,1,0,0,0\" );    \n/*23*/ test( \"400101140052\", \"14,3,0,0,0,0\" );    \n/*24*/ test( \"764767476476\", \"13,2,0,1,0,0\" );    \n/*25*/ test( \"001110140110\", \"12,2,1,0,0,0\" );    \n/*26*/ test( \"765405076527\", \"16,3,0,1,0,0\" );    \n/*27*/ test( \"377323370373\", \"8,4,2,0,0,0\" );    \n/*28*/ test( \"250541131216\", \"11,5,2,0,0,0\" );    \n/*29*/ test( \"744165741476\", \"12,3,2,0,0,0\" );    \n/*30*/ test( \"042101000300\", \"10,3,0,0,0,0\" );    \n/*31*/ test( \"002004554101\", \"11,3,1,0,0,0\" );    \n/*32*/ test( \"371707762706\", \"15,1,1,0,0,0\" );    \n/*33*/ test( \"130371310175\", \"7,3,1,2,0,0\" );    \n/*34*/ test( \"212537003613\", \"13,2,1,1,1,0\" );    \n/*35*/ test( \"157700063411\", \"15,3,0,0,0,1\" );    \n/*36*/ test( \"011500036007\", \"6,7,1,0,0,0\" );    \n/*37*/ test( \"743113313517\", \"17,2,1,0,0,0\" );    \n/*38*/ test( \"174105270405\", \"13,3,1,1,0,0\" );    \n/*39*/ test( \"427272200311\", \"13,3,2,0,0,0\" );    \n/*40*/ test( \"725370332237\", \"12,5,1,1,0,0\" );    \n/*41*/ test( \"005640420046\", \"12,1,3,0,0,0\" );    \n/*42*/ test( \"700350001101\", \"14,3,1,0,0,0\" );    \n/*43*/ test( \"577627744076\", \"16,1,1,1,0,0\" );    \n/*44*/ test( \"620332232007\", \"10,4,2,1,0,0\" );    \n/*45*/ test( \"260406401000\", \"15,1,1,0,0,0\" );    \n/*46*/ test( \"737272723276\", \"5,0,0,0,3,0\" );    \n/*47*/ test( \"000400040444\", \"7,0,2,0,0,0\" );    \n/*48*/ test( \"370222002177\", \"13,2,2,0,0,0\" );    \n/*49*/ test( \"372236024656\", \"9,3,2,0,1,0\" );    \n/*50*/ test( \"276131137003\", \"11,6,2,0,0,0\" );    \n/*51*/ test( \"742134007240\", \"13,4,2,0,0,0\" );    \n/*52*/ test( \"777721775571\", \"13,1,2,0,0,0\" );    \n/*53*/ test( \"700301232233\", \"11,2,3,0,0,0\" );\n_TEST\n\nrequire 'minitest/autorun'\n\ndescribe 'LineSegment' do\n  test.split(\"\\n\").each do |line|\n    t, n, input, expect = line.match(/^\\/\\*(\\d+)\\*\\/\\s*test\\(\\s*\"([^\"]+)\",\\s*\"([^\"]+)\"\\s*\\);\\s*$/).to_a\n    ls = LineSegments.new input\n    it input do\n      assert_equal expect, ls.lines.join(\",\")\n    end\n  end\nend\n\n\n[\u6a2a\u6d5c\u3078\u306a\u3061\u3087\u3053\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u52c9\u5f37\u4f1a](https://yhpg.doorkeeper.jp/)\u306b\u3066\u904e\u53bb\u306b\u51fa\u984c\u3055\u308c\u305f[\u5883\u754c\u7dda\u5206](http://nabetani.sakura.ne.jp/hena/ord16boseg/)\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n\u56de\u7b54\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306f50\u5206\u7a0b\u5ea6\u3002\n\n`LineSegments#count`\u306e\u4e2d\u8eab\u306f\u521d\u3081`cline`\u3068`nline`\u3092`zip`\u3057\u30011\u30de\u30b9\u305a\u3064\u6bd4\u8f03\u3057\u3066\u304b\u3089\u7d50\u679c\u3092\u51fa\u3057\u3066\u3044\u305f\u306e\u3060\u304c\u3001\u3088\u304f\u3088\u304f\u8003\u3048\u308c\u3070\u96a3\u308a\u5408\u3046\u884c\u306e\u30d3\u30c3\u30c8XOR\u3092\u53d6\u308b\u3060\u3051\u3067\u3088\u3044\u3053\u3068\u306b\u6c17\u4ed8\u3044\u305f\u306e\u3067\u66f8\u304d\u76f4\u3057\u305f\u3002\n\n```ruby\nclass LineSegments\n  def initialize input\n    @field = input.chars.each_slice(2).map{|c| (\"%06b\" % c.join.to_i(8)).chars.map &:to_i}\n  end\n\n  def lines\n    count(@field).zip(count(@field.transpose)).map{|r1, r2| r1 + r2}\n  end\n\n  private\n\n  def count field\n    field.each_cons(2).each_with_object(Array.new(6){0}){|(cline, nline), sum|\n      (\"%06b\" % (cline.join.to_i(2) ^ nline.join.to_i(2))).scan(/1+/){|m| sum[m.size - 1] += 1}\n    }\n  end\nend\n\ntest = <<_TEST\n/*0*/ test( \"060276724276\", \"6,2,1,1,0,1\" );    \n/*1*/ test( \"770175454177\", \"2,3,0,3,1,0\" );    \n/*2*/ test( \"743733377170\", \"9,3,1,0,0,0\" );    \n/*3*/ test( \"724212121273\", \"5,2,1,1,1,1\" );    \n/*4*/ test( \"100000000000\", \"3,0,0,0,0,0\" );    \n/*5*/ test( \"000002000000\", \"4,0,0,0,0,0\" );    \n/*6*/ test( \"003622223600\", \"0,4,0,4,0,0\" );    \n/*7*/ test( \"520073737070\", \"8,3,1,1,0,0\" );    \n/*8*/ test( \"770077007700\", \"0,0,0,0,0,5\" );    \n/*9*/ test( \"555555555514\", \"2,0,0,0,2,2\" );    \n/*10*/ test( \"764252427600\", \"4,0,4,0,2,0\" );    \n/*11*/ test( \"774555554177\", \"3,3,1,3,0,0\" );    \n/*12*/ test( \"674574754557\", \"11,5,0,1,0,0\" );    \n/*13*/ test( \"000000000000\", \"0,0,0,0,0,0\" );    \n/*14*/ test( \"777777777777\", \"0,0,0,0,0,0\" );    \n/*15*/ test( \"774377777577\", \"6,0,2,0,0,0\" );    \n/*16*/ test( \"070777777777\", \"0,1,1,0,0,0\" );    \n/*17*/ test( \"373737373737\", \"0,0,0,0,0,1\" );    \n/*18*/ test( \"603260327725\", \"30,0,0,0,0,0\" );    \n/*19*/ test( \"466331144663\", \"30,0,0,0,0,0\" );    \n/*20*/ test( \"000000000242\", \"3,2,0,0,0,0\" );    \n/*21*/ test( \"567656043772\", \"18,2,1,0,0,0\" );    \n/*22*/ test( \"200763012420\", \"15,4,1,0,0,0\" );    \n/*23*/ test( \"400101140052\", \"14,3,0,0,0,0\" );    \n/*24*/ test( \"764767476476\", \"13,2,0,1,0,0\" );    \n/*25*/ test( \"001110140110\", \"12,2,1,0,0,0\" );    \n/*26*/ test( \"765405076527\", \"16,3,0,1,0,0\" );    \n/*27*/ test( \"377323370373\", \"8,4,2,0,0,0\" );    \n/*28*/ test( \"250541131216\", \"11,5,2,0,0,0\" );    \n/*29*/ test( \"744165741476\", \"12,3,2,0,0,0\" );    \n/*30*/ test( \"042101000300\", \"10,3,0,0,0,0\" );    \n/*31*/ test( \"002004554101\", \"11,3,1,0,0,0\" );    \n/*32*/ test( \"371707762706\", \"15,1,1,0,0,0\" );    \n/*33*/ test( \"130371310175\", \"7,3,1,2,0,0\" );    \n/*34*/ test( \"212537003613\", \"13,2,1,1,1,0\" );    \n/*35*/ test( \"157700063411\", \"15,3,0,0,0,1\" );    \n/*36*/ test( \"011500036007\", \"6,7,1,0,0,0\" );    \n/*37*/ test( \"743113313517\", \"17,2,1,0,0,0\" );    \n/*38*/ test( \"174105270405\", \"13,3,1,1,0,0\" );    \n/*39*/ test( \"427272200311\", \"13,3,2,0,0,0\" );    \n/*40*/ test( \"725370332237\", \"12,5,1,1,0,0\" );    \n/*41*/ test( \"005640420046\", \"12,1,3,0,0,0\" );    \n/*42*/ test( \"700350001101\", \"14,3,1,0,0,0\" );    \n/*43*/ test( \"577627744076\", \"16,1,1,1,0,0\" );    \n/*44*/ test( \"620332232007\", \"10,4,2,1,0,0\" );    \n/*45*/ test( \"260406401000\", \"15,1,1,0,0,0\" );    \n/*46*/ test( \"737272723276\", \"5,0,0,0,3,0\" );    \n/*47*/ test( \"000400040444\", \"7,0,2,0,0,0\" );    \n/*48*/ test( \"370222002177\", \"13,2,2,0,0,0\" );    \n/*49*/ test( \"372236024656\", \"9,3,2,0,1,0\" );    \n/*50*/ test( \"276131137003\", \"11,6,2,0,0,0\" );    \n/*51*/ test( \"742134007240\", \"13,4,2,0,0,0\" );    \n/*52*/ test( \"777721775571\", \"13,1,2,0,0,0\" );    \n/*53*/ test( \"700301232233\", \"11,2,3,0,0,0\" );\n_TEST\n\nrequire 'minitest/autorun'\n\ndescribe 'LineSegment' do\n  test.split(\"\\n\").each do |line|\n    t, n, input, expect = line.match(/^\\/\\*(\\d+)\\*\\/\\s*test\\(\\s*\"([^\"]+)\",\\s*\"([^\"]+)\"\\s*\\);\\s*$/).to_a\n    ls = LineSegments.new input\n    it input do\n      assert_equal expect, ls.lines.join(\",\")\n    end\n  end\nend\n```\n", "tags": ["Ruby", "\u3069\u3046\u66f8\u304f", "yhpg"]}