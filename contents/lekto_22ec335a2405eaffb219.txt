{"context": "\n\n\u524d\u63d0\u306e\u74b0\u5883\n\nOS: Ubuntu 16.04\nCUDA Driver, Toolkit \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u6e08\u307f\n\n\n\u624b\u9806\n\nDocker\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u4ee5\u4e0b\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3057\u3066sudo\u3067\u5b9f\u884c\u3059\u308b\u3002\n$ cat ./nvidia-docker-setup_1604.sh\n#! /bin/sh\n# Install Docker\napt-get update\napt-get install apt-transport-https ca-certificates\napt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D\necho \"deb https://apt.dockerproject.org/repo ubuntu-xenial main\" >> /etc/apt/sources.list.d/docker.list\napt-get update\napt-get install linux-image-extra-$(uname -r) linux-image-extra-virtual\napt-get install docker-engine\ndocker run hello-world\n# Install nvidia-docker and nvidia-docker-plugin\nwget -P /tmp https://github.com/NVIDIA/nvidia-docker/releases/download/v1.0.0-rc.3/nvidia-docker_1.0.0.rc.3-1_amd64.deb\ndpkg -i /tmp/nvidia-docker*.deb && rm /tmp/nvidia-docker*.deb\n# Test nvidia-smi\nnvidia-docker run --rm nvidia/cuda nvidia-smi\n\n$ chmod +x ./nvidia-docker-setup_1604.sh\n$ sudo ./nvidia-docker-setup_1604.sh\n\n\u53c2\u8003\uff08http://qiita.com/ksasaki/items/bd85786171424901b27d\uff09\n\u30b3\u30f3\u30c6\u30ca\u3092\u8d77\u52d5\nnvtest@WT72:~$ sudo nvidia-docker run --name digits -d -p 8080:34448 nvidia/digits\nUsing default tag: latest\nlatest: Pulling from nvidia/digits\n\n862a3e9af0ae: Already exists \n6498e51874bf: Already exists \n159ebdd1959b: Already exists \n0fdbedd3771a: Already exists \n7a1f7116d1e3: Already exists \n1a2b8e5c1cb0: Pull complete \nf79c18aad824: Pull complete \nd750f0e72581: Pull complete \nd399aa23f362: Pull complete \nf7534fde9b83: Pull complete \nab6e25a40827: Pull complete \nef0932bdd7af: Pull complete \n6616cddeb677: Pull complete \n37db32ac8c63: Pull complete \nDigest: sha256:be653fe4642928b584f44d03b206f6ddb433508c82b425d95ce6d277daa3462e\nStatus: Downloaded newer image for nvidia/digits:latest\n7f0cb8c00720ce141b7614831f194707926dc6814250f17a722fc3ecb414961d\nnvtest@WT72:~$ \n\n\n\u30b3\u30f3\u30c6\u30ca\u304b\u3089\u5916\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u3044\u554f\u984c\n\n\u73fe\u8c61\u78ba\u8a8d\nnvtest@WT72:~$ sudo nvidia-docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMES\n7f0cb8c00720        nvidia/digits       \"./digits-server\"   5 minutes ago       Up 5 minutes        0.0.0.0:8080->34448/tcp   digits\n052d94824a82        nvidia/cuda         \"/bin/bash\"         37 minutes ago      Up 37 minutes                                 awesome_brown\nnvtest@WT72:~$ sudo docker exec -it digits /bin/bash\nroot@7f0cb8c00720:/usr/share/digits#                                                                                                            \nroot@7f0cb8c00720:/usr/share/digits# \nroot@7f0cb8c00720:/usr/share/digits# ping google.com\n^C\nroot@7f0cb8c00720:/usr/share/digits# exit\nexit\nnvtest@WT72:~$ \n\nping \u304c\u5f85\u3066\u3069\u304f\u3089\u305b\u3069\u8fd4\u3063\u3066\u3053\u306a\u3044\u3002\n\n\u5bfe\u7b56 \uff08Ubuntu 15\u4ee5\u964d\uff09\n\u307e\u305a\u30b7\u30b9\u30c6\u30e0\u304c\u73fe\u5728\u5229\u7528\u3057\u3066\u3044\u308bDNS\u30b5\u30fc\u30d0\u30fc\u306eIP\u30a2\u30c9\u30ec\u30b9\u3092\u8abf\u3079\u308b\n*Ubuntu >= 15 \u306e\u5834\u5408\nnmcli device show <interfacename> | grep IP4.DNS\nnvtest@WT72:~$ nmcli device show enp4s0 | grep IP4.DNS\nIP4.DNS[1]:                             xx.xx.xx.aa\nIP4.DNS[2]:                             xx.xx.xx.bb\nIP4.DNS[3]:                             xx.xx.xx.xx\nIP4.DNS[4]:                             xx.xx.xx.xx\n\nDocker\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3002\n$ vi /etc/default/docker\n$ cat /etc/default/docker\n# Docker Upstart and SysVinit configuration file\n\n#\n# THIS FILE DOES NOT APPLY TO SYSTEMD\n#\n#   Please see the documentation for \"systemd drop-ins\":\n#   https://docs.docker.com/engine/articles/systemd/\n#\n\n# Customize location of Docker binary (especially for development testing).\n#DOCKERD=\"/usr/local/bin/dockerd\"\n\n# Use DOCKER_OPTS to modify the daemon startup options.\nDOCKER_OPTS=\"--dns xx.xx.xx.aa --dns xx.xx.xx.bb\"\n\n# If you need Docker to use an HTTP proxy, it can also be specified here.\n#export http_proxy=\"http://127.0.0.1:3128/\"\n\n# This is also a handy place to tweak where Docker's temporary files go.\n#export TMPDIR=\"/mnt/bigdrive/docker-tmp\"\n$\n\n\u3055\u3089\u306b Ubuntu 15\u4ee5\u964d\u304b\u3089\u306f systemd \u306b\u3088\u308b\u8a2d\u5b9a\u306b\u306a\u3063\u305f\u306e\u3067\u4ee5\u4e0b\u304c\u5fc5\u8981\n\u53c2\u8003\uff08http://blog.benhall.me.uk/2015/07/setting-dockers-docker_opts-on-ubuntu-15-04/\uff09\n$ cat /lib/systemd/system/docker.service \n[Unit]\nDescription=Docker Application Container Engine\nDocumentation=https://docs.docker.com\nAfter=network.target docker.socket\nRequires=docker.socket\n\n[Service]\nType=notify\n# the default is not to use systemd for cgroups because the delegate issues still\n# exists and systemd currently does not support the cgroup feature set required\n# for containers run by docker\nExecStart=/usr/bin/dockerd -H fd://\nExecReload=/bin/kill -s HUP $MAINPID\n# Having non-zero Limit*s causes performance problems due to accounting overhead\n# in the kernel. We recommend using cgroups to do container-local accounting.\nLimitNOFILE=infinity\nLimitNPROC=infinity\nLimitCORE=infinity\n# Uncomment TasksMax if your systemd version supports it.\n# Only systemd 226 and above support this version.\nTasksMax=infinity\nTimeoutStartSec=0\n# set delegate yes so that systemd does not reset the cgroups of docker containers\nDelegate=yes\n# kill only the docker process, not all processes in the cgroup\nKillMode=process\n\n[Install]\nWantedBy=multi-user.target\n$ sudo vi /lib/systemd/system/docker.service \n$ cat /lib/systemd/system/docker.service \n[Unit]\nDescription=Docker Application Container Engine\nDocumentation=https://docs.docker.com\nAfter=network.target docker.socket\nRequires=docker.socket\n\n[Service]\nType=notify\n# the default is not to use systemd for cgroups because the delegate issues still\n# exists and systemd currently does not support the cgroup feature set required\n# for containers run by docker\nEnvironmentFile=/etc/default/docker\nExecStart=/usr/bin/dockerd -H fd:// $DOCKER_OPTS\nExecReload=/bin/kill -s HUP $MAINPID\n# Having non-zero Limit*s causes performance problems due to accounting overhead\n# in the kernel. We recommend using cgroups to do container-local accounting.\nLimitNOFILE=infinity\nLimitNPROC=infinity\nLimitCORE=infinity\n# Uncomment TasksMax if your systemd version supports it.\n# Only systemd 226 and above support this version.\nTasksMax=infinity\nTimeoutStartSec=0\n# set delegate yes so that systemd does not reset the cgroups of docker containers\nDelegate=yes\n# kill only the docker process, not all processes in the cgroup\nKillMode=process\n\n[Install]\nWantedBy=multi-user.target\nnvtest@WT72:~$ \nnvtest@WT72:~$ sudo systemctl daemon-reload\nnvtest@WT72:~$ sudo service docker restart  \n\n\n\u5bfe\u7b56 \uff08Ubuntu 14 \u4ee5\u524d\uff09\n*Ubuntu <= 14 \u306e\u5834\u5408\nnmcli dev list iface <interfacename> | grep IP4\n$ nmcli dev list iface eth0 | grep IP4\nIP4.ADDRESS[1]:                         ip = xx.xx.xx.xx/23, gw = xx.xx.xx.xx\nIP4.DNS[1]:                             xx.xx.xx.aa\nIP4.DNS[2]:                             xx.xx.xx.bb\nIP4.DNS[3]:                             xx.xx.xx.xx\nIP4.DNS[4]:                             xx.xx.xx.xx\nIP4.DOMAIN[1]:                          xxxxxx.com\nIP4.WINS[1]:                            xx.xx.xx.xx\nIP4.WINS[2]:                            xx.xx.xx.xx\nIP4.WINS[3]:                            xx.xx.xx.xx\n\nDocker\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3002\n$ vi /etc/default/docker\n$ cat /etc/default/docker\n# Docker Upstart and SysVinit configuration file\n\n#\n# THIS FILE DOES NOT APPLY TO SYSTEMD\n#\n#   Please see the documentation for \"systemd drop-ins\":\n#   https://docs.docker.com/engine/articles/systemd/\n#\n\n# Customize location of Docker binary (especially for development testing).\n#DOCKERD=\"/usr/local/bin/dockerd\"\n\n# Use DOCKER_OPTS to modify the daemon startup options.\nDOCKER_OPTS=\"--dns xx.xx.xx.aa --dns xx.xx.xx.bb\"\n\n# If you need Docker to use an HTTP proxy, it can also be specified here.\n#export http_proxy=\"http://127.0.0.1:3128/\"\n\n# This is also a handy place to tweak where Docker's temporary files go.\n#export TMPDIR=\"/mnt/bigdrive/docker-tmp\"\n$\n$ sudo service docker restart  \n\n\nmnist \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\nnvtest@WT72:~$ sudo nvidia-docker restart digits\nnvtest@WT72:~$ sudo nvidia-docker exec -it digits /bin/bash\nroot@7f0cb8c00720:/usr/share/digits#                                                                                                            \nroot@7f0cb8c00720:/usr/share/digits# \nroot@0fa423b2a7ee:/usr/share/digits# ./tools/download_data/main.py mnist /opt/mnist\nDownloading url=http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz ...\nDownloading url=http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz ...\nDownloading url=http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz ...\nDownloading url=http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz ...\nUncompressing file=train-images-idx3-ubyte.gz ...\nUncompressing file=train-labels-idx1-ubyte.gz ...\nUncompressing file=t10k-images-idx3-ubyte.gz ...\nUncompressing file=t10k-labels-idx1-ubyte.gz ...\nReading labels from /opt/mnist/train-labels.bin ...\nReading images from /opt/mnist/train-images.bin ...\nReading labels from /opt/mnist/test-labels.bin ...\nReading images from /opt/mnist/test-images.bin ...\nDataset directory is created successfully at '/opt/mnist'\nDone after 130.443932056 seconds.\nroot@0fa423b2a7ee:/usr/share/digits# ll /opt/mnist/\ntotal 65024\ndrwxr-xr-x  4 root root     4096 Sep 17 17:18 ./\ndrwxr-xr-x  3 root root     4096 Sep 17 12:49 ../\n-rw-r--r--  1 root root  1648877 Sep 17 17:18 t10k-images-idx3-ubyte.gz\n-rw-r--r--  1 root root     4542 Sep 17 17:18 t10k-labels-idx1-ubyte.gz\ndrwxr-xr-x 12 root root     4096 Sep 17 17:18 test/\n-rw-r--r--  1 root root  7840016 Sep 17 17:18 test-images.bin\n-rw-r--r--  1 root root    10008 Sep 17 17:18 test-labels.bin\ndrwxr-xr-x 12 root root     4096 Sep 17 17:18 train/\n-rw-r--r--  1 root root  9912422 Sep 17 17:18 train-images-idx3-ubyte.gz\n-rw-r--r--  1 root root 47040016 Sep 17 17:18 train-images.bin\n-rw-r--r--  1 root root    28881 Sep 17 17:18 train-labels-idx1-ubyte.gz\n-rw-r--r--  1 root root    60008 Sep 17 17:18 train-labels.bin\nroot@0fa423b2a7ee:/usr/share/digits# \nroot@0fa423b2a7ee:/usr/share/digits# ll /opt/mnist/train\ntotal 3524\ndrwxr-xr-x 12 root root    4096 Sep 17 17:18 ./\ndrwxr-xr-x  4 root root    4096 Sep 17 17:18 ../\ndrwxr-xr-x  2 root root  163840 Sep 17 17:18 0/\ndrwxr-xr-x  2 root root  208896 Sep 17 17:18 1/\ndrwxr-xr-x  2 root root  167936 Sep 17 17:18 2/\ndrwxr-xr-x  2 root root  172032 Sep 17 17:18 3/\ndrwxr-xr-x  2 root root  167936 Sep 17 17:18 4/\ndrwxr-xr-x  2 root root  147456 Sep 17 17:18 5/\ndrwxr-xr-x  2 root root  147456 Sep 17 17:18 6/\ndrwxr-xr-x  2 root root  192512 Sep 17 17:18 7/\ndrwxr-xr-x  2 root root  159744 Sep 17 17:18 8/\ndrwxr-xr-x  2 root root  163840 Sep 17 17:18 9/\n-rw-r--r--  1 root root      20 Sep 17 17:18 labels.txt\n-rw-r--r--  1 root root 1860000 Sep 17 17:18 train.txt\nroot@0fa423b2a7ee:/usr/share/digits# \nroot@0fa423b2a7ee:/usr/share/digits# ll /opt/mnist/test \ntotal 700\ndrwxr-xr-x 12 root root   4096 Sep 17 17:18 ./\ndrwxr-xr-x  4 root root   4096 Sep 17 17:18 ../\ndrwxr-xr-x  2 root root  36864 Sep 17 17:18 0/\ndrwxr-xr-x  2 root root  36864 Sep 17 17:18 1/\ndrwxr-xr-x  2 root root  36864 Sep 17 17:18 2/\ndrwxr-xr-x  2 root root  36864 Sep 17 17:18 3/\ndrwxr-xr-x  2 root root  36864 Sep 17 17:18 4/\ndrwxr-xr-x  2 root root  32768 Sep 17 17:18 5/\ndrwxr-xr-x  2 root root  36864 Sep 17 17:18 6/\ndrwxr-xr-x  2 root root  36864 Sep 17 17:18 7/\ndrwxr-xr-x  2 root root  36864 Sep 17 17:18 8/\ndrwxr-xr-x  2 root root  32768 Sep 17 17:18 9/\n-rw-r--r--  1 root root     20 Sep 17 17:18 labels.txt\n-rw-r--r--  1 root root 300000 Sep 17 17:18 test.txt\nroot@0fa423b2a7ee:/usr/share/digits# \n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306bWeb\u30d6\u30e9\u30a6\u30b6\u7d4c\u7531\u3067DIGITS\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305fmnist\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u3057\u3066\u6307\u5b9a\u3002\n\n# \u524d\u63d0\u306e\u74b0\u5883\n\n- OS: Ubuntu 16.04\n- [CUDA Driver, Toolkit \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u6e08\u307f](http://qiita.com/lekto/items/e30ae79ccfb0ade84a3e)\n\n# \u624b\u9806\n\n## Docker\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n\u4ee5\u4e0b\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3057\u3066sudo\u3067\u5b9f\u884c\u3059\u308b\u3002\n\n```bash\n$ cat ./nvidia-docker-setup_1604.sh\n#! /bin/sh\n# Install Docker\napt-get update\napt-get install apt-transport-https ca-certificates\napt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D\necho \"deb https://apt.dockerproject.org/repo ubuntu-xenial main\" >> /etc/apt/sources.list.d/docker.list\napt-get update\napt-get install linux-image-extra-$(uname -r) linux-image-extra-virtual\napt-get install docker-engine\ndocker run hello-world\n# Install nvidia-docker and nvidia-docker-plugin\nwget -P /tmp https://github.com/NVIDIA/nvidia-docker/releases/download/v1.0.0-rc.3/nvidia-docker_1.0.0.rc.3-1_amd64.deb\ndpkg -i /tmp/nvidia-docker*.deb && rm /tmp/nvidia-docker*.deb\n# Test nvidia-smi\nnvidia-docker run --rm nvidia/cuda nvidia-smi\n\n$ chmod +x ./nvidia-docker-setup_1604.sh\n$ sudo ./nvidia-docker-setup_1604.sh\n```\n\u53c2\u8003\uff08http://qiita.com/ksasaki/items/bd85786171424901b27d\uff09\n\n\u30b3\u30f3\u30c6\u30ca\u3092\u8d77\u52d5\n\n```bash\nnvtest@WT72:~$ sudo nvidia-docker run --name digits -d -p 8080:34448 nvidia/digits\nUsing default tag: latest\nlatest: Pulling from nvidia/digits\n\n862a3e9af0ae: Already exists \n6498e51874bf: Already exists \n159ebdd1959b: Already exists \n0fdbedd3771a: Already exists \n7a1f7116d1e3: Already exists \n1a2b8e5c1cb0: Pull complete \nf79c18aad824: Pull complete \nd750f0e72581: Pull complete \nd399aa23f362: Pull complete \nf7534fde9b83: Pull complete \nab6e25a40827: Pull complete \nef0932bdd7af: Pull complete \n6616cddeb677: Pull complete \n37db32ac8c63: Pull complete \nDigest: sha256:be653fe4642928b584f44d03b206f6ddb433508c82b425d95ce6d277daa3462e\nStatus: Downloaded newer image for nvidia/digits:latest\n7f0cb8c00720ce141b7614831f194707926dc6814250f17a722fc3ecb414961d\nnvtest@WT72:~$ \n```\n\n## \u30b3\u30f3\u30c6\u30ca\u304b\u3089\u5916\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u3044\u554f\u984c\n\n### \u73fe\u8c61\u78ba\u8a8d\n\n```bash\nnvtest@WT72:~$ sudo nvidia-docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMES\n7f0cb8c00720        nvidia/digits       \"./digits-server\"   5 minutes ago       Up 5 minutes        0.0.0.0:8080->34448/tcp   digits\n052d94824a82        nvidia/cuda         \"/bin/bash\"         37 minutes ago      Up 37 minutes                                 awesome_brown\nnvtest@WT72:~$ sudo docker exec -it digits /bin/bash\nroot@7f0cb8c00720:/usr/share/digits#                                                                                                            \nroot@7f0cb8c00720:/usr/share/digits# \nroot@7f0cb8c00720:/usr/share/digits# ping google.com\n^C\nroot@7f0cb8c00720:/usr/share/digits# exit\nexit\nnvtest@WT72:~$ \n```\n\n`ping` \u304c\u5f85\u3066\u3069\u304f\u3089\u305b\u3069\u8fd4\u3063\u3066\u3053\u306a\u3044\u3002\n\n### \u5bfe\u7b56 \uff08Ubuntu 15\u4ee5\u964d\uff09\n\n\u307e\u305a\u30b7\u30b9\u30c6\u30e0\u304c\u73fe\u5728\u5229\u7528\u3057\u3066\u3044\u308bDNS\u30b5\u30fc\u30d0\u30fc\u306eIP\u30a2\u30c9\u30ec\u30b9\u3092\u8abf\u3079\u308b\n\n*Ubuntu >= 15 \u306e\u5834\u5408\n\n`nmcli device show <interfacename> | grep IP4.DNS`\n\n```bash\nnvtest@WT72:~$ nmcli device show enp4s0 | grep IP4.DNS\nIP4.DNS[1]:                             xx.xx.xx.aa\nIP4.DNS[2]:                             xx.xx.xx.bb\nIP4.DNS[3]:                             xx.xx.xx.xx\nIP4.DNS[4]:                             xx.xx.xx.xx\n```\n\nDocker\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3002\n\n```bash\n$ vi /etc/default/docker\n$ cat /etc/default/docker\n# Docker Upstart and SysVinit configuration file\n\n#\n# THIS FILE DOES NOT APPLY TO SYSTEMD\n#\n#   Please see the documentation for \"systemd drop-ins\":\n#   https://docs.docker.com/engine/articles/systemd/\n#\n\n# Customize location of Docker binary (especially for development testing).\n#DOCKERD=\"/usr/local/bin/dockerd\"\n\n# Use DOCKER_OPTS to modify the daemon startup options.\nDOCKER_OPTS=\"--dns xx.xx.xx.aa --dns xx.xx.xx.bb\"\n\n# If you need Docker to use an HTTP proxy, it can also be specified here.\n#export http_proxy=\"http://127.0.0.1:3128/\"\n\n# This is also a handy place to tweak where Docker's temporary files go.\n#export TMPDIR=\"/mnt/bigdrive/docker-tmp\"\n$\n```\n\n\u3055\u3089\u306b Ubuntu 15\u4ee5\u964d\u304b\u3089\u306f systemd \u306b\u3088\u308b\u8a2d\u5b9a\u306b\u306a\u3063\u305f\u306e\u3067\u4ee5\u4e0b\u304c\u5fc5\u8981\n\u53c2\u8003\uff08http://blog.benhall.me.uk/2015/07/setting-dockers-docker_opts-on-ubuntu-15-04/\uff09\n\n```bash\n$ cat /lib/systemd/system/docker.service \n[Unit]\nDescription=Docker Application Container Engine\nDocumentation=https://docs.docker.com\nAfter=network.target docker.socket\nRequires=docker.socket\n\n[Service]\nType=notify\n# the default is not to use systemd for cgroups because the delegate issues still\n# exists and systemd currently does not support the cgroup feature set required\n# for containers run by docker\nExecStart=/usr/bin/dockerd -H fd://\nExecReload=/bin/kill -s HUP $MAINPID\n# Having non-zero Limit*s causes performance problems due to accounting overhead\n# in the kernel. We recommend using cgroups to do container-local accounting.\nLimitNOFILE=infinity\nLimitNPROC=infinity\nLimitCORE=infinity\n# Uncomment TasksMax if your systemd version supports it.\n# Only systemd 226 and above support this version.\nTasksMax=infinity\nTimeoutStartSec=0\n# set delegate yes so that systemd does not reset the cgroups of docker containers\nDelegate=yes\n# kill only the docker process, not all processes in the cgroup\nKillMode=process\n\n[Install]\nWantedBy=multi-user.target\n$ sudo vi /lib/systemd/system/docker.service \n$ cat /lib/systemd/system/docker.service \n[Unit]\nDescription=Docker Application Container Engine\nDocumentation=https://docs.docker.com\nAfter=network.target docker.socket\nRequires=docker.socket\n\n[Service]\nType=notify\n# the default is not to use systemd for cgroups because the delegate issues still\n# exists and systemd currently does not support the cgroup feature set required\n# for containers run by docker\nEnvironmentFile=/etc/default/docker\nExecStart=/usr/bin/dockerd -H fd:// $DOCKER_OPTS\nExecReload=/bin/kill -s HUP $MAINPID\n# Having non-zero Limit*s causes performance problems due to accounting overhead\n# in the kernel. We recommend using cgroups to do container-local accounting.\nLimitNOFILE=infinity\nLimitNPROC=infinity\nLimitCORE=infinity\n# Uncomment TasksMax if your systemd version supports it.\n# Only systemd 226 and above support this version.\nTasksMax=infinity\nTimeoutStartSec=0\n# set delegate yes so that systemd does not reset the cgroups of docker containers\nDelegate=yes\n# kill only the docker process, not all processes in the cgroup\nKillMode=process\n\n[Install]\nWantedBy=multi-user.target\nnvtest@WT72:~$ \nnvtest@WT72:~$ sudo systemctl daemon-reload\nnvtest@WT72:~$ sudo service docker restart  \n```\n\n### \u5bfe\u7b56 \uff08Ubuntu 14 \u4ee5\u524d\uff09\n\n*Ubuntu <= 14 \u306e\u5834\u5408\n\n`nmcli dev list iface <interfacename> | grep IP4`\n\n```bash\n$ nmcli dev list iface eth0 | grep IP4\nIP4.ADDRESS[1]:                         ip = xx.xx.xx.xx/23, gw = xx.xx.xx.xx\nIP4.DNS[1]:                             xx.xx.xx.aa\nIP4.DNS[2]:                             xx.xx.xx.bb\nIP4.DNS[3]:                             xx.xx.xx.xx\nIP4.DNS[4]:                             xx.xx.xx.xx\nIP4.DOMAIN[1]:                          xxxxxx.com\nIP4.WINS[1]:                            xx.xx.xx.xx\nIP4.WINS[2]:                            xx.xx.xx.xx\nIP4.WINS[3]:                            xx.xx.xx.xx\n```\n\nDocker\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3002\n\n```bash\n$ vi /etc/default/docker\n$ cat /etc/default/docker\n# Docker Upstart and SysVinit configuration file\n\n#\n# THIS FILE DOES NOT APPLY TO SYSTEMD\n#\n#   Please see the documentation for \"systemd drop-ins\":\n#   https://docs.docker.com/engine/articles/systemd/\n#\n\n# Customize location of Docker binary (especially for development testing).\n#DOCKERD=\"/usr/local/bin/dockerd\"\n\n# Use DOCKER_OPTS to modify the daemon startup options.\nDOCKER_OPTS=\"--dns xx.xx.xx.aa --dns xx.xx.xx.bb\"\n\n# If you need Docker to use an HTTP proxy, it can also be specified here.\n#export http_proxy=\"http://127.0.0.1:3128/\"\n\n# This is also a handy place to tweak where Docker's temporary files go.\n#export TMPDIR=\"/mnt/bigdrive/docker-tmp\"\n$\n$ sudo service docker restart  \n```\n\n## mnist \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n\n```bash\nnvtest@WT72:~$ sudo nvidia-docker restart digits\nnvtest@WT72:~$ sudo nvidia-docker exec -it digits /bin/bash\nroot@7f0cb8c00720:/usr/share/digits#                                                                                                            \nroot@7f0cb8c00720:/usr/share/digits# \nroot@0fa423b2a7ee:/usr/share/digits# ./tools/download_data/main.py mnist /opt/mnist\nDownloading url=http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz ...\nDownloading url=http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz ...\nDownloading url=http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz ...\nDownloading url=http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz ...\nUncompressing file=train-images-idx3-ubyte.gz ...\nUncompressing file=train-labels-idx1-ubyte.gz ...\nUncompressing file=t10k-images-idx3-ubyte.gz ...\nUncompressing file=t10k-labels-idx1-ubyte.gz ...\nReading labels from /opt/mnist/train-labels.bin ...\nReading images from /opt/mnist/train-images.bin ...\nReading labels from /opt/mnist/test-labels.bin ...\nReading images from /opt/mnist/test-images.bin ...\nDataset directory is created successfully at '/opt/mnist'\nDone after 130.443932056 seconds.\nroot@0fa423b2a7ee:/usr/share/digits# ll /opt/mnist/\ntotal 65024\ndrwxr-xr-x  4 root root     4096 Sep 17 17:18 ./\ndrwxr-xr-x  3 root root     4096 Sep 17 12:49 ../\n-rw-r--r--  1 root root  1648877 Sep 17 17:18 t10k-images-idx3-ubyte.gz\n-rw-r--r--  1 root root     4542 Sep 17 17:18 t10k-labels-idx1-ubyte.gz\ndrwxr-xr-x 12 root root     4096 Sep 17 17:18 test/\n-rw-r--r--  1 root root  7840016 Sep 17 17:18 test-images.bin\n-rw-r--r--  1 root root    10008 Sep 17 17:18 test-labels.bin\ndrwxr-xr-x 12 root root     4096 Sep 17 17:18 train/\n-rw-r--r--  1 root root  9912422 Sep 17 17:18 train-images-idx3-ubyte.gz\n-rw-r--r--  1 root root 47040016 Sep 17 17:18 train-images.bin\n-rw-r--r--  1 root root    28881 Sep 17 17:18 train-labels-idx1-ubyte.gz\n-rw-r--r--  1 root root    60008 Sep 17 17:18 train-labels.bin\nroot@0fa423b2a7ee:/usr/share/digits# \nroot@0fa423b2a7ee:/usr/share/digits# ll /opt/mnist/train\ntotal 3524\ndrwxr-xr-x 12 root root    4096 Sep 17 17:18 ./\ndrwxr-xr-x  4 root root    4096 Sep 17 17:18 ../\ndrwxr-xr-x  2 root root  163840 Sep 17 17:18 0/\ndrwxr-xr-x  2 root root  208896 Sep 17 17:18 1/\ndrwxr-xr-x  2 root root  167936 Sep 17 17:18 2/\ndrwxr-xr-x  2 root root  172032 Sep 17 17:18 3/\ndrwxr-xr-x  2 root root  167936 Sep 17 17:18 4/\ndrwxr-xr-x  2 root root  147456 Sep 17 17:18 5/\ndrwxr-xr-x  2 root root  147456 Sep 17 17:18 6/\ndrwxr-xr-x  2 root root  192512 Sep 17 17:18 7/\ndrwxr-xr-x  2 root root  159744 Sep 17 17:18 8/\ndrwxr-xr-x  2 root root  163840 Sep 17 17:18 9/\n-rw-r--r--  1 root root      20 Sep 17 17:18 labels.txt\n-rw-r--r--  1 root root 1860000 Sep 17 17:18 train.txt\nroot@0fa423b2a7ee:/usr/share/digits# \nroot@0fa423b2a7ee:/usr/share/digits# ll /opt/mnist/test \ntotal 700\ndrwxr-xr-x 12 root root   4096 Sep 17 17:18 ./\ndrwxr-xr-x  4 root root   4096 Sep 17 17:18 ../\ndrwxr-xr-x  2 root root  36864 Sep 17 17:18 0/\ndrwxr-xr-x  2 root root  36864 Sep 17 17:18 1/\ndrwxr-xr-x  2 root root  36864 Sep 17 17:18 2/\ndrwxr-xr-x  2 root root  36864 Sep 17 17:18 3/\ndrwxr-xr-x  2 root root  36864 Sep 17 17:18 4/\ndrwxr-xr-x  2 root root  32768 Sep 17 17:18 5/\ndrwxr-xr-x  2 root root  36864 Sep 17 17:18 6/\ndrwxr-xr-x  2 root root  36864 Sep 17 17:18 7/\ndrwxr-xr-x  2 root root  36864 Sep 17 17:18 8/\ndrwxr-xr-x  2 root root  32768 Sep 17 17:18 9/\n-rw-r--r--  1 root root     20 Sep 17 17:18 labels.txt\n-rw-r--r--  1 root root 300000 Sep 17 17:18 test.txt\nroot@0fa423b2a7ee:/usr/share/digits# \n```\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306bWeb\u30d6\u30e9\u30a6\u30b6\u7d4c\u7531\u3067DIGITS\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305fmnist\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u3057\u3066\u6307\u5b9a\u3002\n\n![Screenshot from 2016-09-18 01:24:04.png](https://qiita-image-store.s3.amazonaws.com/0/111730/1c27d877-fb30-1649-4496-96e8928e50b1.png)\n\n", "tags": ["NVIDIA", "docker", "Digits"]}