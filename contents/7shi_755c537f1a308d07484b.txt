{"context": "\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306e\u5909\u63db\u5f0f\u3092\u9006\u7b97\u3057\u3066\u5909\u63db\u3057\u305f\u6642\u306b\u540c\u3058\u5024\u306b\u306a\u308b\u3088\u3046\u306b\u8abf\u6574\u3059\u308c\u3070\u3001\u3069\u3093\u306a\u8272\u5408\u3044\u306b\u306a\u308b\u306e\u304b\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3059\u3002\n\u3053\u306e\u8a18\u4e8b\u306f\u6b21\u306e\u7d9a\u7de8\u3067\u3059\u3002\n\n\nRGB\u5024\u306e\u5408\u8a08\u304c\u4e00\u5b9a\u306e\u753b\u50cf\u5909\u63db 2016.11.17\n\n\n\u5909\u63db\n\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u3078\u306e\u5909\u63db\u3092\u884c\u3046\u95a2\u6570\u3067\u3059\u3002\nlet grayF (r, g, b) =\n    r * 0.299 + g * 0.587 + b * 0.114\n\nColor\u304b\u3089float\u306e\u30bf\u30d7\u30eb\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\nlet toFloat (c:Color) =\n    float c.R, float c.G, float c.B\n\n\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306b\u5909\u63db\u3057\u305f\u3068\u304d1.0\u306b\u306a\u308b\u3088\u3046\u306a\u6bd4\u4f8b\u5b9a\u6570\u3092\u6c42\u3081\u3066\u8272\u3092\u8abf\u6574\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\nlet adjust2 (c:Color) =\n    let r, g, b = toFloat c\n    let c = grayF (r, g, b)\n    r / c, g / c, b / c\n\n\u753b\u50cf\u5168\u4f53\u306b\u5bfe\u3057\u3066adjust2\u3092\u9069\u7528\u3057\u3066RGB\u5024\u306e\u914d\u5217\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\nlet adjust2rgb (bmp:Bitmap) =\n [| for y = 0 to bmp.Height - 1 do\n    for x = 0 to bmp.Width  - 1 do\n    yield bmp.GetPixel(x, y) |> adjust2 |]\n\nRGB\u306e\u6700\u5927\u5024\u3092\u6307\u5b9a\u3057\u305f\u5024\uff08v\uff09\u306b\u63c3\u3048\u305f\u753b\u50cf\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\nlet conv2 v (bmp:Bitmap) =\n    let bmp = new Bitmap(bmp)\n    let rgb = adjust2rgb bmp\n    let conv =\n        let max =\n            rgb\n            |> Seq.map (fun (r, g, b) -> r |> max g |> max b)\n            |> Seq.max\n        if max = 0. then\n            let c = Color.FromArgb(v, v, v)\n            fun _ -> c\n        else\n            let a = float v / max\n            fun (r, g, b) ->\n                Color.FromArgb(a * r |> int, a * g |> int, a * b |> int)\n    let en = (rgb :> IEnumerable<float * float * float>).GetEnumerator()\n    for y = 0 to bmp.Height - 1 do\n        for x = 0 to bmp.Width - 1 do\n            if en.MoveNext() then\n                bmp.SetPixel(x, y, conv en.Current)\n    bmp\n\n\u6b21\u306e\u3088\u3046\u306b\u4f7f\u3044\u307e\u3059\u3002\nlet bmp = new Bitmap(\"Lenna.bmp\")\nlet adj2 = bmp |> conv2 255\nadj2.Save(\"Lenna-adj2.png\", Imaging.ImageFormat.Png)\n\n\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\n\n\n\u5143\u753b\u50cf\n\u5909\u63db\u5f8c\n\n\n\n\n\n\n\n\n\n\u304b\u306a\u308a\u4e0d\u81ea\u7136\u306a\u8272\u5408\u3044\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\nRGB\u5024\u306e\u5e73\u5747\u3068\u3001\u8f1d\u5ea6\u30d9\u30fc\u30b9\uff08grayF\uff09\u3068\u3067\u3001\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306b\u5909\u63db\u3057\u3066\u307f\u307e\u3059\u3002\n\n\n\n\u5e73\u5747\n\u8f1d\u5ea6\u30d9\u30fc\u30b9\n\n\n\n\n\n\n\n\n\n\u8f1d\u5ea6\u30d9\u30fc\u30b9\u3067\u753b\u50cf\u304c\u6d88\u3048\u3066\u3057\u307e\u3046\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002\n\u203b \u6d88\u3048\u308b\u306e\u306fgrayF\u306e\u5909\u63db\u5f0f\u306b\u4f9d\u5b58\u3057\u3066\u3044\u307e\u3059\u3002\u5225\u306e\u5909\u63db\u5f0f\uff08\u5e73\u5747\u306a\u3069\uff09\u3092\u4f7f\u7528\u3059\u308c\u3070\u6d88\u3048\u307e\u305b\u3093\u3002\n\n\u307e\u3068\u3081\n\u30b3\u30fc\u30c9\u3092\u307e\u3068\u3081\u3066\u6574\u7406\u3057\u305f\u3082\u306e\u3092\u63b2\u8f09\u3057\u307e\u3059\u3002\n\nRGB2.fsx\n#r \"System.Drawing\"\n\nopen System.Collections.Generic\nopen System.Drawing\nopen System.IO\n\nlet suffix fn sfx =\n    let dir = Path.GetDirectoryName fn\n    let fn2 = Path.GetFileNameWithoutExtension fn\n    Path.Combine(dir, fn2 + sfx)\n\nlet average (c:Color) =\n    let c = (int c.R + int c.G + int c.B) / 3\n    Color.FromArgb(c, c, c)\n\nlet toFloat (c:Color) =\n    float c.R, float c.G, float c.B\n\nlet grayF (r, g, b) =\n    r * 0.299 + g * 0.587 + b * 0.114\n\nlet gray (c:Color) =\n    let c = c |> toFloat |> grayF |> int\n    Color.FromArgb(c, c, c)\n\nlet conv f (bmp:Bitmap) =\n    let bmp = new Bitmap(bmp)\n    for y = 0 to bmp.Height - 1 do\n        for x = 0 to bmp.Width - 1 do\n            bmp.SetPixel(x, y, f (bmp.GetPixel(x, y)))\n    bmp\n\nlet adjust2 (c:Color) =\n    let r, g, b = toFloat c\n    let c = grayF (r, g, b)\n    r / c, g / c, b / c\n\nlet adjust2rgb (bmp:Bitmap) =\n [| for y = 0 to bmp.Height - 1 do\n    for x = 0 to bmp.Width  - 1 do\n    yield bmp.GetPixel(x, y) |> adjust2 |]\n\nlet conv2 v (bmp:Bitmap) =\n    let bmp = new Bitmap(bmp)\n    let rgb = adjust2rgb bmp\n    let conv =\n        let max =\n            rgb\n            |> Seq.map (fun (r, g, b) -> r |> max g |> max b)\n            |> Seq.max\n        if max = 0. then\n            let c = Color.FromArgb(v, v, v)\n            fun _ -> c\n        else\n            let a = float v / max\n            fun (r, g, b) ->\n                Color.FromArgb(a * r |> int, a * g |> int, a * b |> int)\n    let en = (rgb :> IEnumerable<float * float * float>).GetEnumerator()\n    for y = 0 to bmp.Height - 1 do\n        for x = 0 to bmp.Width - 1 do\n            if en.MoveNext() then\n                bmp.SetPixel(x, y, conv en.Current)\n    bmp\n\nlet save fn (bmp:Bitmap) =\n    bmp.Save(fn + \".png\", Imaging.ImageFormat.Png)\n    bmp.Dispose()\n\nlet src = \"Lenna.bmp\"\n\nlet bmp = new Bitmap(src)\nlet adj2 = bmp |> conv2 255\nadj2 |> conv average |> save (suffix src \"-adj2-avg\" )\nadj2 |> conv gray    |> save (suffix src \"-adj2-gray\")\nadj2                 |> save (suffix src \"-adj2\")\n\n\n\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306e\u5909\u63db\u5f0f\u3092\u9006\u7b97\u3057\u3066\u5909\u63db\u3057\u305f\u6642\u306b\u540c\u3058\u5024\u306b\u306a\u308b\u3088\u3046\u306b\u8abf\u6574\u3059\u308c\u3070\u3001\u3069\u3093\u306a\u8272\u5408\u3044\u306b\u306a\u308b\u306e\u304b\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u3053\u306e\u8a18\u4e8b\u306f\u6b21\u306e\u7d9a\u7de8\u3067\u3059\u3002\n\n* [RGB\u5024\u306e\u5408\u8a08\u304c\u4e00\u5b9a\u306e\u753b\u50cf\u5909\u63db](http://qiita.com/7shi/items/d223e347d67cc399f70c) 2016.11.17\n\n# \u5909\u63db\n\n\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u3078\u306e\u5909\u63db\u3092\u884c\u3046\u95a2\u6570\u3067\u3059\u3002\n\n```fsharp\nlet grayF (r, g, b) =\n    r * 0.299 + g * 0.587 + b * 0.114\n```\n\n`Color`\u304b\u3089`float`\u306e\u30bf\u30d7\u30eb\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\n\n```fsharp\nlet toFloat (c:Color) =\n    float c.R, float c.G, float c.B\n```\n\n\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306b\u5909\u63db\u3057\u305f\u3068\u304d`1.0`\u306b\u306a\u308b\u3088\u3046\u306a\u6bd4\u4f8b\u5b9a\u6570\u3092\u6c42\u3081\u3066\u8272\u3092\u8abf\u6574\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\n\n```fsharp\nlet adjust2 (c:Color) =\n    let r, g, b = toFloat c\n    let c = grayF (r, g, b)\n    r / c, g / c, b / c\n```\n\n\u753b\u50cf\u5168\u4f53\u306b\u5bfe\u3057\u3066`adjust2`\u3092\u9069\u7528\u3057\u3066RGB\u5024\u306e\u914d\u5217\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\n\n```fsharp\nlet adjust2rgb (bmp:Bitmap) =\n [| for y = 0 to bmp.Height - 1 do\n    for x = 0 to bmp.Width  - 1 do\n    yield bmp.GetPixel(x, y) |> adjust2 |]\n```\n\nRGB\u306e\u6700\u5927\u5024\u3092\u6307\u5b9a\u3057\u305f\u5024\uff08`v`\uff09\u306b\u63c3\u3048\u305f\u753b\u50cf\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\n\n```fsharp\nlet conv2 v (bmp:Bitmap) =\n    let bmp = new Bitmap(bmp)\n    let rgb = adjust2rgb bmp\n    let conv =\n        let max =\n            rgb\n            |> Seq.map (fun (r, g, b) -> r |> max g |> max b)\n            |> Seq.max\n        if max = 0. then\n            let c = Color.FromArgb(v, v, v)\n            fun _ -> c\n        else\n            let a = float v / max\n            fun (r, g, b) ->\n                Color.FromArgb(a * r |> int, a * g |> int, a * b |> int)\n    let en = (rgb :> IEnumerable<float * float * float>).GetEnumerator()\n    for y = 0 to bmp.Height - 1 do\n        for x = 0 to bmp.Width - 1 do\n            if en.MoveNext() then\n                bmp.SetPixel(x, y, conv en.Current)\n    bmp\n```\n\n\u6b21\u306e\u3088\u3046\u306b\u4f7f\u3044\u307e\u3059\u3002\n\n```fsharp\nlet bmp = new Bitmap(\"Lenna.bmp\")\nlet adj2 = bmp |> conv2 255\nadj2.Save(\"Lenna-adj2.png\", Imaging.ImageFormat.Png)\n```\n\n\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\n\u5143\u753b\u50cf|\u5909\u63db\u5f8c\n:--:|:--:\n![Lenna.png](https://qiita-image-store.s3.amazonaws.com/0/32057/be5a592f-d179-4e4e-ea50-165a21078463.png)|![Lenna-adj2.png](https://qiita-image-store.s3.amazonaws.com/0/32057/c97f9661-73cd-d2e2-6b7f-c4194307d6d2.png)\n\n\u304b\u306a\u308a\u4e0d\u81ea\u7136\u306a\u8272\u5408\u3044\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\nRGB\u5024\u306e\u5e73\u5747\u3068\u3001\u8f1d\u5ea6\u30d9\u30fc\u30b9\uff08`grayF`\uff09\u3068\u3067\u3001\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306b\u5909\u63db\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u5e73\u5747|\u8f1d\u5ea6\u30d9\u30fc\u30b9\n:--:|:--:\n![Lenna-adj2-avg.png](https://qiita-image-store.s3.amazonaws.com/0/32057/6dc62339-69a5-0ad7-37e3-4e10659ae9c6.png)|![Lenna-adj2-gray.png](https://qiita-image-store.s3.amazonaws.com/0/32057/978fb4d1-3a44-1f40-60db-8a1938b85275.png)\n\n\u8f1d\u5ea6\u30d9\u30fc\u30b9\u3067\u753b\u50cf\u304c\u6d88\u3048\u3066\u3057\u307e\u3046\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u203b \u6d88\u3048\u308b\u306e\u306f`grayF`\u306e\u5909\u63db\u5f0f\u306b\u4f9d\u5b58\u3057\u3066\u3044\u307e\u3059\u3002\u5225\u306e\u5909\u63db\u5f0f\uff08\u5e73\u5747\u306a\u3069\uff09\u3092\u4f7f\u7528\u3059\u308c\u3070\u6d88\u3048\u307e\u305b\u3093\u3002\n\n# \u307e\u3068\u3081\n\n\u30b3\u30fc\u30c9\u3092\u307e\u3068\u3081\u3066\u6574\u7406\u3057\u305f\u3082\u306e\u3092\u63b2\u8f09\u3057\u307e\u3059\u3002\n\n```fsharp:RGB2.fsx\n#r \"System.Drawing\"\n\nopen System.Collections.Generic\nopen System.Drawing\nopen System.IO\n\nlet suffix fn sfx =\n    let dir = Path.GetDirectoryName fn\n    let fn2 = Path.GetFileNameWithoutExtension fn\n    Path.Combine(dir, fn2 + sfx)\n\nlet average (c:Color) =\n    let c = (int c.R + int c.G + int c.B) / 3\n    Color.FromArgb(c, c, c)\n\nlet toFloat (c:Color) =\n    float c.R, float c.G, float c.B\n\nlet grayF (r, g, b) =\n    r * 0.299 + g * 0.587 + b * 0.114\n\nlet gray (c:Color) =\n    let c = c |> toFloat |> grayF |> int\n    Color.FromArgb(c, c, c)\n\nlet conv f (bmp:Bitmap) =\n    let bmp = new Bitmap(bmp)\n    for y = 0 to bmp.Height - 1 do\n        for x = 0 to bmp.Width - 1 do\n            bmp.SetPixel(x, y, f (bmp.GetPixel(x, y)))\n    bmp\n\nlet adjust2 (c:Color) =\n    let r, g, b = toFloat c\n    let c = grayF (r, g, b)\n    r / c, g / c, b / c\n\nlet adjust2rgb (bmp:Bitmap) =\n [| for y = 0 to bmp.Height - 1 do\n    for x = 0 to bmp.Width  - 1 do\n    yield bmp.GetPixel(x, y) |> adjust2 |]\n\nlet conv2 v (bmp:Bitmap) =\n    let bmp = new Bitmap(bmp)\n    let rgb = adjust2rgb bmp\n    let conv =\n        let max =\n            rgb\n            |> Seq.map (fun (r, g, b) -> r |> max g |> max b)\n            |> Seq.max\n        if max = 0. then\n            let c = Color.FromArgb(v, v, v)\n            fun _ -> c\n        else\n            let a = float v / max\n            fun (r, g, b) ->\n                Color.FromArgb(a * r |> int, a * g |> int, a * b |> int)\n    let en = (rgb :> IEnumerable<float * float * float>).GetEnumerator()\n    for y = 0 to bmp.Height - 1 do\n        for x = 0 to bmp.Width - 1 do\n            if en.MoveNext() then\n                bmp.SetPixel(x, y, conv en.Current)\n    bmp\n\nlet save fn (bmp:Bitmap) =\n    bmp.Save(fn + \".png\", Imaging.ImageFormat.Png)\n    bmp.Dispose()\n\nlet src = \"Lenna.bmp\"\n\nlet bmp = new Bitmap(src)\nlet adj2 = bmp |> conv2 255\nadj2 |> conv average |> save (suffix src \"-adj2-avg\" )\nadj2 |> conv gray    |> save (suffix src \"-adj2-gray\")\nadj2                 |> save (suffix src \"-adj2\")\n```\n", "tags": ["F#"]}