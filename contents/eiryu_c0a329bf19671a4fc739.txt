{"context": "\u4e00\u5fdc stackoverflow \u306b\u30b5\u30f3\u30d7\u30eb\u306f\u3042\u308b\u3002\n\u3053\u306e\u4f8b\u3060\u3068\u3001\n\n\u3082\u3068\u3082\u3068\u306e\u30af\u30a8\u30ea\u306e\u30e1\u30bd\u30c3\u30c9\u3092_getAccountById\u306b\u3057\u3066\u3001\u65b0\u3057\u304f\u4f5c\u3063\u305fgetAccountById\u3092\u547c\u3073\u51fa\u3059\n\ngetAccountById\u3067\u306f1\u4ef6\u3060\u3051\u8fd4\u3059\u3088\u3046\u306b\u8abf\u6574\u3002\u306a\u3044\u5834\u5408\u306fnull\u3092\u8fd4\u3059\n\n\u306e\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\n\u307e\u3068\u3081\u308b\u3068\u3001Mapper\u304c\u5168\u884c\u306b\u3064\u3044\u3066\u547c\u3070\u308c\u3066\u3057\u307e\u3046\uff08_getAccountById\u306e\u623b\u308a\u5024\u306e\u578b\u304c\u30ea\u30b9\u30c8\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u76ee\uff09\u305f\u3081\u3001\u5225\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u751f\u3084\u3057\u30661\u4ef6\u3060\u3051\u8fd4\u3059\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\n\u3057\u304b\u3057\u3001\u4e0a\u8a18\u306e\u4f8b\u3060\u3068\u3001one\u5074\u306eid\u304c1\u3064\u306e\u5834\u5408\u3057\u304b\u5bfe\u5fdc\u51fa\u6765\u306a\u3044\u306e\u3067\u3001\u81ea\u5206\u3067\u5225\u306e\u4f8b\u3092\u66f8\u3044\u3066\u307f\u305f\u3002\n\norder\u3068order_detail\u304c\u3042\u308a\u30011\u5bfen\u3067\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u3068\u3059\u308b\u3002\n-- create\ncreate table `order` (id bigint);\ncreate table order_detail (id bigint, order_id bigint);\n\n-- input data\ninsert into `order` values (1);\ninsert into `order` values (2);\ninsert into order_detail values (1, 1);\ninsert into order_detail values (2, 1);\ninsert into order_detail values (3, 2);\n\n// Groovy Version: 2.4.5 JVM: 1.8.0_77 Vendor: Oracle Corporation OS: Mac OS X\n@GrabConfig(systemClassLoader = true)\n@Grab('mysql:mysql-connector-java:5.1.31')\n@Grab('org.jdbi:jdbi:2.78')\n\nimport groovy.transform.ToString\nimport org.skife.jdbi.v2.DBI\nimport org.skife.jdbi.v2.StatementContext\nimport org.skife.jdbi.v2.sqlobject.Bind\nimport org.skife.jdbi.v2.sqlobject.SqlQuery\nimport org.skife.jdbi.v2.sqlobject.customizers.Mapper\nimport org.skife.jdbi.v2.tweak.ResultSetMapper\n\nimport java.sql.ResultSet\nimport java.sql.SQLException\nimport java.util.concurrent.ConcurrentHashMap\nimport java.util.stream.Collectors\n\nabstract class OrderDAO {\n    @Mapper(OrderMapper.class)\n    @SqlQuery(\"select o.id, od.id, od.order_id from `order` o join order_detail od on (o.id = od.order_id) where o.id = :id\")\n    abstract List<Order> _findOne(@Bind(\"id\") long id)\n\n    @Mapper(OrderMapper.class)\n    @SqlQuery(\"select o.id, od.id, od.order_id from `order` o join order_detail od on (o.id = od.order_id)\")\n    abstract List<Order> _findAll()\n\n    Order findOne(long id) {\n        List<Order> orders = _findOne(id)\n        return orders.isEmpty() ? null : orders.get(0)\n    }\n\n    List<Order> findAll() {\n        List<Order> orders = _findAll()\n        // \u91cd\u8907\u5224\u5b9a\u306f\u3082\u3046\u5c11\u3057\u3061\u3083\u3093\u3068\u3057\u305f\u65b9\u304c\u3088\u3055\u305d\u3046\n        return orders.stream().distinct().collect(Collectors.toList())\n    }\n}\n\n@ToString\nclass Order {\n    long id\n    List<OrderDetail> details = new ArrayList<>()\n}\n\n@ToString\nclass OrderDetail {\n    long id\n    long orderId\n}\n\nclass OrderMapper implements ResultSetMapper<Order> {\n    private Map<Long, Order> orderMap = new ConcurrentHashMap<>()\n\n    @Override\n    Order map(int index, ResultSet r, StatementContext ctx) throws SQLException {\n        long id = r.getLong(\"o.id\")\n        Order order = orderMap.get(id)\n        if (order == null) {\n            order = new Order()\n            order.id = r.getLong(\"o.id\")\n        }\n        OrderDetail detail = new OrderDetail()\n        detail.id = r.getLong(\"od.id\")\n        detail.orderId = r.getLong(\"od.order_id\")\n        order.details.add(detail)\n        orderMap.put(id, order)\n\n        return order\n    }\n}\n\nDBI dbi = new DBI(\"jdbc:mysql://localhost/sandbox\", \"root\", \"\")\n\nOrderDAO dao = dbi.onDemand(OrderDAO.class)\nprintln dao.findOne(1L)\nprintln dao.findOne(9L)\nprintln dao.findAll()\n\n\u7d50\u679c\nOrder(1, [OrderDetail(1, 1), OrderDetail(2, 1)])\nnull\n[Order(1, [OrderDetail(1, 1), OrderDetail(2, 1)]), Order(2, [OrderDetail(3, 2)])]\n\n\nps.\nMapper\u304c\u5b9f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u308b\u6df1\u3044\u3068\u3053\u308d\u307e\u3067\u306f\u8ffd\u3063\u3066\u3044\u306a\u3044\u304c\u3001\u4e00\u5fdc\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u306b\u306f\u306a\u3063\u3066\u308b\u3063\u307d\u3044\u3002\nGPars\u3067\u540c\u6642\u5b9f\u884c\u3057\u306a\u304c\u3089\u3001Mapper\u306e\u4e2d\u3067\u30e9\u30f3\u30c0\u30e0\u306a\u6587\u5b57\u5217\u5410\u3044\u3066\u78ba\u8a8d\u3057\u3066\u3082\u3001\u5168\u3066\u306e\u547c\u3073\u51fa\u3057\u3067\u540c\u3058\u6587\u5b57\u304c\u51fa\u3066\u304f\u308b\u3002\u304c\u3001\u7d50\u679c\u306f\u6b63\u3057\u304b\u3063\u305f\u3002\ncglib\u304cJDBI\u5185\u306b\u3042\u308b\u306e\u3067\u30011\u3064\u3060\u3051\u751f\u6210\u3057\u3066\u3001\u3042\u3068\u306f\u547c\u3073\u51fa\u3057\u6642\u306b\u305d\u308c\u3092\u96db\u5f62\u306b\u8907\u88fd\u3057\u3066\u5272\u308a\u5f53\u3066\u3066\u3044\u308b\u306e\u304b\u3057\u3089\uff1f\uff1f\uff1f\n\u4e00\u5fdc [stackoverflow](http://stackoverflow.com/questions/24337100/how-to-create-a-one-to-many-relationship-with-jdbi-sql-object-api) \u306b\u30b5\u30f3\u30d7\u30eb\u306f\u3042\u308b\u3002\n\n\u3053\u306e\u4f8b\u3060\u3068\u3001\n\n- \u3082\u3068\u3082\u3068\u306e\u30af\u30a8\u30ea\u306e\u30e1\u30bd\u30c3\u30c9\u3092`_getAccountById`\u306b\u3057\u3066\u3001\u65b0\u3057\u304f\u4f5c\u3063\u305f`getAccountById`\u3092\u547c\u3073\u51fa\u3059\n- `getAccountById`\u3067\u306f1\u4ef6\u3060\u3051\u8fd4\u3059\u3088\u3046\u306b\u8abf\u6574\u3002\u306a\u3044\u5834\u5408\u306fnull\u3092\u8fd4\u3059\n\n\u306e\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\n\n\u307e\u3068\u3081\u308b\u3068\u3001Mapper\u304c\u5168\u884c\u306b\u3064\u3044\u3066\u547c\u3070\u308c\u3066\u3057\u307e\u3046\uff08`_getAccountById`\u306e\u623b\u308a\u5024\u306e\u578b\u304c\u30ea\u30b9\u30c8\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u76ee\uff09\u305f\u3081\u3001\u5225\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u751f\u3084\u3057\u30661\u4ef6\u3060\u3051\u8fd4\u3059\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\n\n\n\u3057\u304b\u3057\u3001\u4e0a\u8a18\u306e\u4f8b\u3060\u3068\u3001one\u5074\u306eid\u304c1\u3064\u306e\u5834\u5408\u3057\u304b\u5bfe\u5fdc\u51fa\u6765\u306a\u3044\u306e\u3067\u3001\u81ea\u5206\u3067\u5225\u306e\u4f8b\u3092\u66f8\u3044\u3066\u307f\u305f\u3002\n\n---\n\n`order`\u3068`order_detail`\u304c\u3042\u308a\u30011\u5bfen\u3067\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u3068\u3059\u308b\u3002\n\n```sql \n-- create\ncreate table `order` (id bigint);\ncreate table order_detail (id bigint, order_id bigint);\n\n-- input data\ninsert into `order` values (1);\ninsert into `order` values (2);\ninsert into order_detail values (1, 1);\ninsert into order_detail values (2, 1);\ninsert into order_detail values (3, 2);\n```\n\n```groovy\n// Groovy Version: 2.4.5 JVM: 1.8.0_77 Vendor: Oracle Corporation OS: Mac OS X\n@GrabConfig(systemClassLoader = true)\n@Grab('mysql:mysql-connector-java:5.1.31')\n@Grab('org.jdbi:jdbi:2.78')\n\nimport groovy.transform.ToString\nimport org.skife.jdbi.v2.DBI\nimport org.skife.jdbi.v2.StatementContext\nimport org.skife.jdbi.v2.sqlobject.Bind\nimport org.skife.jdbi.v2.sqlobject.SqlQuery\nimport org.skife.jdbi.v2.sqlobject.customizers.Mapper\nimport org.skife.jdbi.v2.tweak.ResultSetMapper\n\nimport java.sql.ResultSet\nimport java.sql.SQLException\nimport java.util.concurrent.ConcurrentHashMap\nimport java.util.stream.Collectors\n\nabstract class OrderDAO {\n    @Mapper(OrderMapper.class)\n    @SqlQuery(\"select o.id, od.id, od.order_id from `order` o join order_detail od on (o.id = od.order_id) where o.id = :id\")\n    abstract List<Order> _findOne(@Bind(\"id\") long id)\n\n    @Mapper(OrderMapper.class)\n    @SqlQuery(\"select o.id, od.id, od.order_id from `order` o join order_detail od on (o.id = od.order_id)\")\n    abstract List<Order> _findAll()\n\n    Order findOne(long id) {\n        List<Order> orders = _findOne(id)\n        return orders.isEmpty() ? null : orders.get(0)\n    }\n\n    List<Order> findAll() {\n        List<Order> orders = _findAll()\n        // \u91cd\u8907\u5224\u5b9a\u306f\u3082\u3046\u5c11\u3057\u3061\u3083\u3093\u3068\u3057\u305f\u65b9\u304c\u3088\u3055\u305d\u3046\n        return orders.stream().distinct().collect(Collectors.toList())\n    }\n}\n\n@ToString\nclass Order {\n    long id\n    List<OrderDetail> details = new ArrayList<>()\n}\n\n@ToString\nclass OrderDetail {\n    long id\n    long orderId\n}\n\nclass OrderMapper implements ResultSetMapper<Order> {\n    private Map<Long, Order> orderMap = new ConcurrentHashMap<>()\n\n    @Override\n    Order map(int index, ResultSet r, StatementContext ctx) throws SQLException {\n        long id = r.getLong(\"o.id\")\n        Order order = orderMap.get(id)\n        if (order == null) {\n            order = new Order()\n            order.id = r.getLong(\"o.id\")\n        }\n        OrderDetail detail = new OrderDetail()\n        detail.id = r.getLong(\"od.id\")\n        detail.orderId = r.getLong(\"od.order_id\")\n        order.details.add(detail)\n        orderMap.put(id, order)\n\n        return order\n    }\n}\n\nDBI dbi = new DBI(\"jdbc:mysql://localhost/sandbox\", \"root\", \"\")\n\nOrderDAO dao = dbi.onDemand(OrderDAO.class)\nprintln dao.findOne(1L)\nprintln dao.findOne(9L)\nprintln dao.findAll()\n```\n\n\u7d50\u679c\n\n```\nOrder(1, [OrderDetail(1, 1), OrderDetail(2, 1)])\nnull\n[Order(1, [OrderDetail(1, 1), OrderDetail(2, 1)]), Order(2, [OrderDetail(3, 2)])]\n```\n\n### ps.\n\nMapper\u304c\u5b9f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u308b\u6df1\u3044\u3068\u3053\u308d\u307e\u3067\u306f\u8ffd\u3063\u3066\u3044\u306a\u3044\u304c\u3001\u4e00\u5fdc\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u306b\u306f\u306a\u3063\u3066\u308b\u3063\u307d\u3044\u3002\nGPars\u3067\u540c\u6642\u5b9f\u884c\u3057\u306a\u304c\u3089\u3001Mapper\u306e\u4e2d\u3067\u30e9\u30f3\u30c0\u30e0\u306a\u6587\u5b57\u5217\u5410\u3044\u3066\u78ba\u8a8d\u3057\u3066\u3082\u3001\u5168\u3066\u306e\u547c\u3073\u51fa\u3057\u3067\u540c\u3058\u6587\u5b57\u304c\u51fa\u3066\u304f\u308b\u3002\u304c\u3001\u7d50\u679c\u306f\u6b63\u3057\u304b\u3063\u305f\u3002\ncglib\u304cJDBI\u5185\u306b\u3042\u308b\u306e\u3067\u30011\u3064\u3060\u3051\u751f\u6210\u3057\u3066\u3001\u3042\u3068\u306f\u547c\u3073\u51fa\u3057\u6642\u306b\u305d\u308c\u3092\u96db\u5f62\u306b\u8907\u88fd\u3057\u3066\u5272\u308a\u5f53\u3066\u3066\u3044\u308b\u306e\u304b\u3057\u3089\uff1f\uff1f\uff1f\n", "tags": ["jdbi", "Groovy"]}