{"context": "btstack\u306e\u30e1\u30e2\u30ea\u7ba1\u7406\u90e8\u5206\u306e\u5b9f\u88c5\u3092\u8aad\u307f\u307e\u3057\u305f\u3002\nbtstack\u306f\u7d44\u8fbc\u307f\u5411\u3051\u306ebluetooth\u30d7\u30ed\u30c8\u30b3\u30eb\u30b9\u30bf\u30c3\u30af\u3067\u3059\u3002\nbtstack\u306f\u7d44\u8fbc\u307f\u5411\u3051\u306eport\u3067\u306f\u30e1\u30e2\u30ea\u30d7\u30fc\u30eb\u3092\u4f7f\u3046\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u30bd\u30fc\u30b9\n\n\nhttps://github.com/bluekitchen/btstack\n\nhttps://github.com/bluekitchen/btstack/blob/master/src/btstack_memory.c\nhttps://github.com/bluekitchen/btstack/blob/master/src/btstack_memory.h\nhttps://github.com/bluekitchen/btstack/blob/master/src/btstack_memory.c\n\nhttps://github.com/bluekitchen/btstack/blob/master/src/btstack_memory.h \n\n\n\n\n\u30e1\u30e2\u30ea\u306e\u521d\u671f\u5316 (\u30e1\u30e2\u30ea\u30d7\u30fc\u30eb\u306e\u5834\u5408)\n\nbtstack_memory.c \u306e btstack_memory_init()\u3067\u521d\u671f\u5316\u3059\u308b\u3002\nbtstack_memory_pool_create()\u3067\u7a2e\u985e\u6bce\u306e\u30e1\u30e2\u30ea\u30d7\u30fc\u30eb\u3092\u4f5c\u308b\u3002\n\n\nhci_connection\nl2cap_service\nrfcomm_multiplexer\nrfcomm_service\nrfcomm_channel\nbtstack_link_key_db_memory_entry\nbnep_service\nbnep_channel\nhfp_connection\nservice_record_item\ngatt_client\nwhitelist_entry\nsm_lookup_entry \n\n\n\n\nbtstack_memory.c\nvoid btstack_memory_init(void){\n#if MAX_NR_HCI_CONNECTIONS > 0\n    btstack_memory_pool_create(&hci_connection_pool, hci_connection_storage, MAX_NR_HCI_CONNECTIONS, sizeof(hci_connection_t));\n...\n\n\n\nstorage\u306b\u30d6\u30ed\u30c3\u30af\u30b5\u30a4\u30bablock_size\u30d0\u30a4\u30c8\u306e\u30e1\u30e2\u30ea\u30d6\u30ed\u30c3\u30af\u3092count\u500b\u4f5c\u6210\u3059\u308b\u3002\u30e1\u30e2\u30ea\u30d7\u30fc\u30eb\u7ba1\u7406\u60c5\u5831\u306fpool\u306b\u3042\u308b\u3002\n\n\nbtstack_memory_pool.c\nvoid btstack_memory_pool_create(btstack_memory_pool_t *pool, void * storage, int count, int block_size){\n    node_t *free_blocks = (node_t*) pool;\n    char   *mem_ptr = (char *) storage;\n    int i;\n\n    // create singly linked list of all available blocks\n    free_blocks->next = NULL;\n    for (i = 0 ; i < count ; i++){\n        btstack_memory_pool_free(pool, mem_ptr);\n        mem_ptr += block_size;\n    }\n}\n\n\n\nstorage\u306f\u9759\u7684\u306b\u78ba\u4fdd\u3059\u308b\n\n\nbtstack_memory.c\nstatic hci_connection_t hci_connection_storage[MAX_NR_HCI_CONNECTIONS];\n\n\n\n\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u3068\u89e3\u653e\n\u30b3\u30f3\u30d1\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u30673\u7a2e\u985e\u3042\u308b\n* \u30e1\u30e2\u30ea\u30d7\u30fc\u30eb \u500b\u65701\u4ee5\u4e0a\n* \u30e1\u30e2\u30ea\u30d7\u30fc\u30eb \u500b\u65700\n* malloc()/free()\u3092\u5229\u7528\n\n\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u3068\u89e3\u653e \u30e1\u30e2\u30ea\u30d7\u30fc\u30eb \u500b\u65701\u4ee5\u4e0a\n\nMAX_NR_HCI_CONNECTIONS > 0 \u306e\u5834\u5408\n\n\nbtstack_memory.c\n#ifdef MAX_NR_HCI_CONNECTIONS\n#if MAX_NR_HCI_CONNECTIONS > 0\nstatic hci_connection_t hci_connection_storage[MAX_NR_HCI_CONNECTIONS];\nstatic btstack_memory_pool_t hci_connection_pool;\nhci_connection_t * btstack_memory_hci_connection_get(void){\n    return (hci_connection_t *) btstack_memory_pool_get(&hci_connection_pool);\n}\nvoid btstack_memory_hci_connection_free(hci_connection_t *hci_connection){\n    btstack_memory_pool_free(&hci_connection_pool, hci_connection);\n}\n#else\n#endif\n#endif\n\n\n\nbtstack_memory_pool_get\n\n\u7a7a\u3044\u3066\u3044\u308b\u30e1\u30e2\u30ea\u30d6\u30ed\u30c3\u30af\u3092\u8fd4\u3059\u3002\n\n\nbtstack_memory_pool.c\nvoid * btstack_memory_pool_get(btstack_memory_pool_t *pool){\n    node_t *free_blocks = (node_t*) pool;\n\n    if (!free_blocks->next) return NULL;\n\n    // remove first\n    node_t *node      = free_blocks->next;\n    free_blocks->next = node->next;\n\n    return (void*) node;\n}\n\n\n\nbtstack_memory_pool_free\n\n\u4e8c\u91cd\u89e3\u653e\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\u7a7a\u304d\u30e1\u30e2\u30ea\u30d6\u30ed\u30c3\u30af\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\u3059\u308b\n\n\nbtstack_memory_pool.c\nvoid btstack_memory_pool_free(btstack_memory_pool_t *pool, void * block){\n    node_t *free_blocks = (node_t*) pool;\n    node_t *node        = (node_t*) block;\n\n    // raise error and abort if node already in list\n    node_t * it;\n    for (it = free_blocks->next; it ; it = it->next){\n        if (it == node) {\n            log_error(\"btstack_memory_pool_free: block %p freed twice for pool %p\", block, pool);\n            return;\n        }\n    }\n\n    // add block as node to list\n    node->next          = free_blocks->next;\n    free_blocks->next   = node;\n}\n\n\n\n\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u3068\u89e3\u653e \u30e1\u30e2\u30ea\u30d7\u30fc\u30eb \u500b\u65700\n\nMAX_NR_HCI_CONNECTIONS == 0 \u306e\u5834\u5408\u3002\u3000\u3069\u3046\u4f7f\u3046\u306e\u304b\u4e0d\u660e\u3002\n\n\nbtstack_memory.c\n#ifdef MAX_NR_HCI_CONNECTIONS\n#if MAX_NR_HCI_CONNECTIONS > 0\n#else\nhci_connection_t * btstack_memory_hci_connection_get(void){\n    return NULL;\n}\nvoid btstack_memory_hci_connection_free(hci_connection_t *hci_connection){\n    // silence compiler warning about unused parameter in a portable way\n    (void) hci_connection;\n};\n#endif\n#endif\n\n\n\n\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u3068\u89e3\u653e malloc()/free()\u3092\u5229\u7528\n\n\u5358\u7d14\u306b malloc()\u3068free() \u3059\u308b\u3002\n\n\nbtstack_memory.c\n#elif defined(HAVE_MALLOC)\nhci_connection_t * btstack_memory_hci_connection_get(void){\n    return (hci_connection_t*) malloc(sizeof(hci_connection_t));\n}\nvoid btstack_memory_hci_connection_free(hci_connection_t *hci_connection){\n    free(hci_connection);\n}\n#endif\n\n\n\n\u5404port\u306eHCI\u306e\u30e1\u30e2\u30ea\u78ba\u4fdd\u306e\u7a2e\u985e\n\n\u30e1\u30e2\u30ea\u30d7\u30fc\u30eb (MAX_NR_HCI_CONNECTIONS 1)\n\narduino\nez430-rf2560\nmsp430f5229lp-cc2564b\nmsp-exp430f5438-cc2564b\nnrf5x\npic32-harmony\nwiced\nstm32-f103rb-nucleo\n\n\nmalloc (HAVE_MALLOC)\n\nlibusb\nposix-h4\nposix-h5\nios\n\nbtstack\u306e\u30e1\u30e2\u30ea\u7ba1\u7406\u90e8\u5206\u306e\u5b9f\u88c5\u3092\u8aad\u307f\u307e\u3057\u305f\u3002\n\nbtstack\u306f\u7d44\u8fbc\u307f\u5411\u3051\u306ebluetooth\u30d7\u30ed\u30c8\u30b3\u30eb\u30b9\u30bf\u30c3\u30af\u3067\u3059\u3002\n\nbtstack\u306f\u7d44\u8fbc\u307f\u5411\u3051\u306eport\u3067\u306f\u30e1\u30e2\u30ea\u30d7\u30fc\u30eb\u3092\u4f7f\u3046\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n# \u30bd\u30fc\u30b9\n* https://github.com/bluekitchen/btstack\n * https://github.com/bluekitchen/btstack/blob/master/src/btstack_memory.c\n * https://github.com/bluekitchen/btstack/blob/master/src/btstack_memory.h\n * https://github.com/bluekitchen/btstack/blob/master/src/btstack_memory.c\n * https://github.com/bluekitchen/btstack/blob/master/src/btstack_memory.h \n\n# \u30e1\u30e2\u30ea\u306e\u521d\u671f\u5316 (\u30e1\u30e2\u30ea\u30d7\u30fc\u30eb\u306e\u5834\u5408)\n* btstack_memory.c \u306e btstack_memory_init()\u3067\u521d\u671f\u5316\u3059\u308b\u3002\n* btstack_memory_pool_create()\u3067\u7a2e\u985e\u6bce\u306e\u30e1\u30e2\u30ea\u30d7\u30fc\u30eb\u3092\u4f5c\u308b\u3002\n * hci_connection\n * l2cap_service\n * rfcomm_multiplexer\n * rfcomm_service\n * rfcomm_channel\n * btstack_link_key_db_memory_entry\n * bnep_service\n * bnep_channel\n * hfp_connection\n * service_record_item\n * gatt_client\n * whitelist_entry\n * sm_lookup_entry \n\n```c:btstack_memory.c \nvoid btstack_memory_init(void){\n#if MAX_NR_HCI_CONNECTIONS > 0\n    btstack_memory_pool_create(&hci_connection_pool, hci_connection_storage, MAX_NR_HCI_CONNECTIONS, sizeof(hci_connection_t));\n...\n```\n\n* storage\u306b\u30d6\u30ed\u30c3\u30af\u30b5\u30a4\u30bablock_size\u30d0\u30a4\u30c8\u306e\u30e1\u30e2\u30ea\u30d6\u30ed\u30c3\u30af\u3092count\u500b\u4f5c\u6210\u3059\u308b\u3002\u30e1\u30e2\u30ea\u30d7\u30fc\u30eb\u7ba1\u7406\u60c5\u5831\u306fpool\u306b\u3042\u308b\u3002\n\n```c:btstack_memory_pool.c\nvoid btstack_memory_pool_create(btstack_memory_pool_t *pool, void * storage, int count, int block_size){\n    node_t *free_blocks = (node_t*) pool;\n    char   *mem_ptr = (char *) storage;\n    int i;\n    \n    // create singly linked list of all available blocks\n    free_blocks->next = NULL;\n    for (i = 0 ; i < count ; i++){\n        btstack_memory_pool_free(pool, mem_ptr);\n        mem_ptr += block_size;\n    }\n}\n```\n\n* storage\u306f\u9759\u7684\u306b\u78ba\u4fdd\u3059\u308b\n\n```c:btstack_memory.c \nstatic hci_connection_t hci_connection_storage[MAX_NR_HCI_CONNECTIONS];\n```\n\n# \u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u3068\u89e3\u653e\n\u30b3\u30f3\u30d1\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u30673\u7a2e\u985e\u3042\u308b\n* \u30e1\u30e2\u30ea\u30d7\u30fc\u30eb \u500b\u65701\u4ee5\u4e0a\n* \u30e1\u30e2\u30ea\u30d7\u30fc\u30eb \u500b\u65700\n* malloc()/free()\u3092\u5229\u7528\n\n## \u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u3068\u89e3\u653e \u30e1\u30e2\u30ea\u30d7\u30fc\u30eb \u500b\u65701\u4ee5\u4e0a\n* MAX_NR_HCI_CONNECTIONS > 0 \u306e\u5834\u5408\n\n```c:btstack_memory.c \n#ifdef MAX_NR_HCI_CONNECTIONS\n#if MAX_NR_HCI_CONNECTIONS > 0\nstatic hci_connection_t hci_connection_storage[MAX_NR_HCI_CONNECTIONS];\nstatic btstack_memory_pool_t hci_connection_pool;\nhci_connection_t * btstack_memory_hci_connection_get(void){\n    return (hci_connection_t *) btstack_memory_pool_get(&hci_connection_pool);\n}\nvoid btstack_memory_hci_connection_free(hci_connection_t *hci_connection){\n    btstack_memory_pool_free(&hci_connection_pool, hci_connection);\n}\n#else\n#endif\n#endif\n```\n### btstack_memory_pool_get\n* \u7a7a\u3044\u3066\u3044\u308b\u30e1\u30e2\u30ea\u30d6\u30ed\u30c3\u30af\u3092\u8fd4\u3059\u3002\n\n```c:btstack_memory_pool.c\nvoid * btstack_memory_pool_get(btstack_memory_pool_t *pool){\n    node_t *free_blocks = (node_t*) pool;\n    \n    if (!free_blocks->next) return NULL;\n    \n    // remove first\n    node_t *node      = free_blocks->next;\n    free_blocks->next = node->next;\n    \n    return (void*) node;\n}\n```\n### btstack_memory_pool_free\n* \u4e8c\u91cd\u89e3\u653e\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\n* \u7a7a\u304d\u30e1\u30e2\u30ea\u30d6\u30ed\u30c3\u30af\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\u3059\u308b\n\n```c:btstack_memory_pool.c\nvoid btstack_memory_pool_free(btstack_memory_pool_t *pool, void * block){\n    node_t *free_blocks = (node_t*) pool;\n    node_t *node        = (node_t*) block;\n\n    // raise error and abort if node already in list\n    node_t * it;\n    for (it = free_blocks->next; it ; it = it->next){\n        if (it == node) {\n            log_error(\"btstack_memory_pool_free: block %p freed twice for pool %p\", block, pool);\n            return;\n        }\n    }\n\n    // add block as node to list\n    node->next          = free_blocks->next;\n    free_blocks->next   = node;\n}\n```\n## \u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u3068\u89e3\u653e \u30e1\u30e2\u30ea\u30d7\u30fc\u30eb \u500b\u65700\n* MAX_NR_HCI_CONNECTIONS == 0 \u306e\u5834\u5408\u3002\u3000\u3069\u3046\u4f7f\u3046\u306e\u304b\u4e0d\u660e\u3002\n\n```c:btstack_memory.c \n#ifdef MAX_NR_HCI_CONNECTIONS\n#if MAX_NR_HCI_CONNECTIONS > 0\n#else\nhci_connection_t * btstack_memory_hci_connection_get(void){\n    return NULL;\n}\nvoid btstack_memory_hci_connection_free(hci_connection_t *hci_connection){\n    // silence compiler warning about unused parameter in a portable way\n    (void) hci_connection;\n};\n#endif\n#endif\n```\n\n\n## \u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u3068\u89e3\u653e malloc()/free()\u3092\u5229\u7528\n* \u5358\u7d14\u306b malloc()\u3068free() \u3059\u308b\u3002\n\n```c:btstack_memory.c \n#elif defined(HAVE_MALLOC)\nhci_connection_t * btstack_memory_hci_connection_get(void){\n    return (hci_connection_t*) malloc(sizeof(hci_connection_t));\n}\nvoid btstack_memory_hci_connection_free(hci_connection_t *hci_connection){\n    free(hci_connection);\n}\n#endif\n```\n\n# \u5404port\u306eHCI\u306e\u30e1\u30e2\u30ea\u78ba\u4fdd\u306e\u7a2e\u985e\n##  \u30e1\u30e2\u30ea\u30d7\u30fc\u30eb (MAX_NR_HCI_CONNECTIONS 1)\n* arduino\n* ez430-rf2560\n* msp430f5229lp-cc2564b\n* msp-exp430f5438-cc2564b\n* nrf5x\n* pic32-harmony\n* wiced\n* stm32-f103rb-nucleo\n\n## malloc (HAVE_MALLOC)\n* libusb\n* posix-h4\n* posix-h5\n* ios\n", "tags": ["bluetooth"]}