{"tags": ["paiza", "Go"], "context": " More than 1 year has passed since last update.\u696d\u52d9\u3067Go\u3092\u4f7f\u3044\u59cb\u3081\u305f\u3082\u306e\u306e\u3001\u3082\u3063\u3068Go\u3067\u66f8\u304d\u305f\u3044\u306a\u30fc\u3068\u3044\u3046\u6642\u306b\nhttps://paiza.jp/poh/ando\n\u304c\u59cb\u307e\u3063\u3066\u305f\u306e\u3067\u3001(\u500b\u4eba\u7684\u306b)\u6d41\u884c\u308a\u306eGo\u3067\u6311\u6226\u3057\u3066\u307f\u305f\u6240\u5b58\u3067\u3059\nhttp://paiza.hatenablog.com/entry/2016/01/21/\u3010\u7d50\u679c\u767a\u8868\u3011\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u5f7c\u5973\u304c\u3067\u304d\u305f\u4eba\u7d9a\n\u3092\u898b\u3066\u4eca\u66f4\u3067\u3059\u304c\u81ea\u5206\u306e\u30b3\u30fc\u30c9\u3092\u6652\u3059\u6c17\u306b\u306a\u3063\u305f\u306e\u3067\u66f8\u304d\u307e\u3059  \n\u773c\u5e2f\u3068\u6c34\u7740\u4ee5\u5916\u306f\u89e3\u3051\u3066\u3044\u308b\u306e\u3067\u3001\u6b8b\u308a\u306f\u6c17\u304c\u5411\u3044\u305f\u6642\u306b\u3067\u3082\u30fb\u30fb\u30fb\n\n\u3064\u308a\u76ee\u30bb\u30c3\u30c8\n\ngo\npackage main\nimport \"fmt\"\nfunc main(){\n    var a int\n    fmt.Scan(&a)\n    result := \"\"\n    for{\n        result += \"Ann\"\n        a = a-1\n        if a == 0 {\n            break\n        }\n    }\n    fmt.Println(result)\n}\n\n\n\n\u30ab\u30fc\u30c7\u30a3\u30ac\u30f3\u30bb\u30c3\u30c8\n\ngo\npackage main\nimport \"fmt\"\nfunc main(){\n    // \u81ea\u5206\u306e\u5f97\u610f\u306a\u8a00\u8a9e\u3067\n    // Let's \u30c1\u30e3\u30ec\u30f3\u30b8\uff01\uff01\n    var input int\n    fmt.Scan(&input)\n    fmt.Println(Fact(input))\n}\n\nfunc Fact(num int) int {\n    if num == 1{\n        return 1\n    }\n    return num * Fact(num -1)\n}\n\n\n\n\u30bb\u30fc\u30e9\u30fc\u670d\u30bb\u30c3\u30c8\n\ngo\npackage main\nimport \"fmt\"\nfunc main(){\n    var count int\n    var line string\n    result := \"\"\n    fmt.Scan(&count)\n    for{\n        count--\n        fmt.Scan(&line)\n        result += line\n        if(count == 0){\n            break\n        }\n        result += \"_\"\n    }\n    fmt.Println(result)\n}\n\n\n\n\u30dd\u30cb\u30fc\u30c6\u30fc\u30eb\u30bb\u30c3\u30c8\n\ngo\npackage main\nimport \"fmt\"\nfunc main(){\n    var count int\n    fmt.Scan(&count)\n    result := \"\"\n    for {\n        result += fmt.Sprint(count) +\"\\n\"\n        count--\n        if count == 0 {\n            break\n        }\n    }\n    result  += \"0!!\"\n    fmt.Println(result)\n}\n\n\n\n\u30ed\u30f3\u30b0\u30d8\u30a2\u30bb\u30c3\u30c8\n\ngo\npackage main\nimport \"fmt\"\nfunc main(){   \n    var line string\n    result := 0\n    for i:=0; i<5; i++ {\n        fmt.Scan(&line)\n        if line == \"yes\" {\n            result++\n        }else{\n            result--\n        }\n    }\n    if result > 0 {\n        fmt.Println(\"yes\")\n    }else{\n        fmt.Println(\"no\")\n    }\n}\n\n\n\n\u30b7\u30e7\u30fc\u30c8\u30d8\u30a2\u30bb\u30c3\u30c8\n\ngo\npackage main\nimport \"fmt\"\nfunc main(){\n    input, result := 0, 0\n    fmt.Scan(&input)\n    result += input\n    fmt.Scan(&input)\n    result += input    \n    fmt.Println(fmt.Sprint(result))\n}\n\n\n\n\u30c4\u30a4\u30f3\u30c6\u30fc\u30eb\u30bb\u30c3\u30c8\n\ngo\npackage main\nimport \"fmt\"\nfunc main(){\n    // \u81ea\u5206\u306e\u5f97\u610f\u306a\u8a00\u8a9e\u3067\n    // Let's \u30c1\u30e3\u30ec\u30f3\u30b8\uff01\uff01\n    var cp1, cp2 float32\n    cp1 = getCp()\n    cp2 = getCp()\n    if cp1 > cp2 {\n        fmt.Println(1)\n    }else{\n        fmt.Println(2)\n    }\n}\n\nfunc getCp() float32 {\n    var coffein, price int\n    fmt.Scan(&coffein)\n    fmt.Scan(&price)\n    return (float32)(coffein) /(float32)(price)\n}\n\n\n\n\u3081\u304c\u306d\n\ngo\npackage main\nimport \"fmt\"\n\nfunc main(){\n    var aryNum1, aryNum2 int\n    fmt.Scan(&aryNum1)\n    pict1 := makePict(aryNum1)\n    fmt.Scan(&aryNum2)\n    pict2 := makePict(aryNum2)\n    pos := matchPict(pict1, aryNum1, pict2, aryNum2)\n    fmt.Println(fmt.Sprint(pos[0]), fmt.Sprint(pos[1]))\n}\n\nfunc matchPict(pict1 [][]int, size1 int, pict2 [][]int, size2 int) []int {\n    result := []int {0, 0}\n    checkLen  := size1 -size2\n    isMatch    := false\n    for h1:=0; h1<=checkLen && !isMatch; h1++ {\n        for w1:=0; w1<=checkLen && !isMatch; w1++{\n            if pict2[0][0] != pict1[h1][w1] {\n                continue\n            }\n            isMatch    := true\n            for h2:=0; h2<size2 && isMatch; h2++{\n                for w2:=0; w2<size2 && isMatch; w2++ {\n                    if pict2[h2][w2] != pict1[h1 +h2][w1 +w2] {\n                        isMatch = false\n                        break\n                    }\n                }\n            }\n            if isMatch {\n                result[0] = h1\n                result[1] = w1\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc makePict(len int) [][]int {\n    var dot int\n    var pict = make([][]int, len, len)\n    for i:=0; i<len; i++{\n        pict[i] = make([]int, len)\n        for m:=0; m<len; m++{\n            fmt.Scan(&dot)\n            pict[i][m] = dot\n        }\n    }\n    return pict\n}\n\n\n\n\u30b5\u30f3\u30bf\u670d\n\ngo\npackage main\nimport \"fmt\"\nimport \"sort\"\n\nfunc main(){\n    x, y, z, count := ScanCakeInfo()\n    xPoint := []int{0, x}\n    yPoint := []int{0, y}    \n    ScanCutInfo(&xPoint, &yPoint, count)\n    xw := CalcWidthMin(&xPoint, x)\n    yw := CalcWidthMin(&yPoint, y)\n    fmt.Println(fmt.Sprint(xw *yw *z))\n}\n\nfunc CalcWidthMin(pointTable *[]int, maxWidth int) int {\n    result := maxWidth\n    var width int\n    for i:=0; i<len(*pointTable) -1; i++ {\n        width = (*pointTable)[i +1] -(*pointTable)[i]\n        if width < result {\n            result = width\n        }\n    }\n    return result\n}\n\nfunc ScanCutInfo(xTable, yTable *[]int, count int) {\n    var data []int\n    for i:=0; i<count; i++ {\n        data = GetData()\n        if data[0] == 0 {\n            *xTable = append(*xTable, data[1])\n        }else{\n            *yTable = append(*yTable, data[1])\n        }\n    }\n    if !sort.IntsAreSorted(*xTable) {\n        sort.Ints(*xTable)\n    }\n    if !sort.IntsAreSorted(*yTable) {\n        sort.Ints(*yTable)\n    }\n}\n\nfunc ScanCakeInfo() (int, int, int, int) {\n    var x, y, z, count int\n    fmt.Scan(&x)\n    fmt.Scan(&y)\n    fmt.Scan(&z)\n    fmt.Scan(&count)\n    return x, y, z, count\n}\n\nfunc GetData() []int {\n    var result = make([]int, 2)\n    fmt.Scan(&result[0])\n    fmt.Scan(&result[1])\n    return result\n}\n\n\n\n\u7e1e\u30cb\u30fc\u30bd\u30bb\u30c3\u30c8\n\ngo\npackage main\nimport \"fmt\"\nfunc main(){\n\n    var interval, total int\n    fmt.Scan(&interval)\n    fmt.Scan(&total)\n    result := \"\"\n    for looper:=0; looper<total; looper++ {\n        if (looper/interval) & 0x1 == 0 {\n            result += \"R\"\n        }else{\n            result += \"W\"\n        }\n    }\n\n    fmt.Println(result)\n}\n\n\ngolang\u697d\u3057\u3044\u3067\u3059\u306d\n\u305f\u3060c\u307f\u305f\u3044\u306b\u306a\u3063\u3066\u308b\u6c17\u304c\u3059\u308b\u3057\u3001\u3053\u306e\u66f8\u304d\u65b9\u304c\u826f\u3044\u306e\u304b\u3061\u3087\u3063\u3068\u308f\u304b\u3089\u306a\u3044...\ngo\u7684\u306a\u4f5c\u6cd5\u3068\u304b\u9762\u767d\u3044\u3084\u308a\u65b9\u3068\u304b\u3042\u308b\u3093\u3067\u3059\u304b\u306d\n\u696d\u52d9\u3067Go\u3092\u4f7f\u3044\u59cb\u3081\u305f\u3082\u306e\u306e\u3001\u3082\u3063\u3068Go\u3067\u66f8\u304d\u305f\u3044\u306a\u30fc\u3068\u3044\u3046\u6642\u306b  \nhttps://paiza.jp/poh/ando  \n\u304c\u59cb\u307e\u3063\u3066\u305f\u306e\u3067\u3001(\u500b\u4eba\u7684\u306b)\u6d41\u884c\u308a\u306eGo\u3067\u6311\u6226\u3057\u3066\u307f\u305f\u6240\u5b58\u3067\u3059\n\nhttp://paiza.hatenablog.com/entry/2016/01/21/\u3010\u7d50\u679c\u767a\u8868\u3011\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u5f7c\u5973\u304c\u3067\u304d\u305f\u4eba\u7d9a  \n\u3092\u898b\u3066\u4eca\u66f4\u3067\u3059\u304c\u81ea\u5206\u306e\u30b3\u30fc\u30c9\u3092\u6652\u3059\u6c17\u306b\u306a\u3063\u305f\u306e\u3067\u66f8\u304d\u307e\u3059  \n\n\u773c\u5e2f\u3068\u6c34\u7740\u4ee5\u5916\u306f\u89e3\u3051\u3066\u3044\u308b\u306e\u3067\u3001\u6b8b\u308a\u306f\u6c17\u304c\u5411\u3044\u305f\u6642\u306b\u3067\u3082\u30fb\u30fb\u30fb\n\n#### \u3064\u308a\u76ee\u30bb\u30c3\u30c8  \n```lang:go\npackage main\nimport \"fmt\"\nfunc main(){\n    var a int\n    fmt.Scan(&a)\n    result := \"\"\n    for{\n        result += \"Ann\"\n        a = a-1\n        if a == 0 {\n            break\n        }\n    }\n    fmt.Println(result)\n}\n```\n\n#### \u30ab\u30fc\u30c7\u30a3\u30ac\u30f3\u30bb\u30c3\u30c8  \n```lang:go\npackage main\nimport \"fmt\"\nfunc main(){\n    // \u81ea\u5206\u306e\u5f97\u610f\u306a\u8a00\u8a9e\u3067\n    // Let's \u30c1\u30e3\u30ec\u30f3\u30b8\uff01\uff01\n    var input int\n    fmt.Scan(&input)\n    fmt.Println(Fact(input))\n}\n\nfunc Fact(num int) int {\n    if num == 1{\n        return 1\n    }\n    return num * Fact(num -1)\n}\n```  \n\n#### \u30bb\u30fc\u30e9\u30fc\u670d\u30bb\u30c3\u30c8  \n```lang:go\npackage main\nimport \"fmt\"\nfunc main(){\n    var count int\n    var line string\n    result := \"\"\n    fmt.Scan(&count)\n    for{\n        count--\n        fmt.Scan(&line)\n        result += line\n        if(count == 0){\n            break\n        }\n        result += \"_\"\n    }\n    fmt.Println(result)\n}\n```  \n\n#### \u30dd\u30cb\u30fc\u30c6\u30fc\u30eb\u30bb\u30c3\u30c8  \n```lang:go\npackage main\nimport \"fmt\"\nfunc main(){\n    var count int\n    fmt.Scan(&count)\n    result := \"\"\n    for {\n        result += fmt.Sprint(count) +\"\\n\"\n        count--\n        if count == 0 {\n            break\n        }\n    }\n    result  += \"0!!\"\n    fmt.Println(result)\n}\n```  \n\n#### \u30ed\u30f3\u30b0\u30d8\u30a2\u30bb\u30c3\u30c8  \n```lang:go\npackage main\nimport \"fmt\"\nfunc main(){   \n    var line string\n    result := 0\n    for i:=0; i<5; i++ {\n        fmt.Scan(&line)\n        if line == \"yes\" {\n            result++\n        }else{\n            result--\n        }\n    }\n    if result > 0 {\n        fmt.Println(\"yes\")\n    }else{\n        fmt.Println(\"no\")\n    }\n}\n```  \n\n#### \u30b7\u30e7\u30fc\u30c8\u30d8\u30a2\u30bb\u30c3\u30c8  \n```lang:go\npackage main\nimport \"fmt\"\nfunc main(){\n    input, result := 0, 0\n    fmt.Scan(&input)\n    result += input\n    fmt.Scan(&input)\n    result += input    \n    fmt.Println(fmt.Sprint(result))\n}\n```  \n\n#### \u30c4\u30a4\u30f3\u30c6\u30fc\u30eb\u30bb\u30c3\u30c8   \n```lang:go\npackage main\nimport \"fmt\"\nfunc main(){\n    // \u81ea\u5206\u306e\u5f97\u610f\u306a\u8a00\u8a9e\u3067\n    // Let's \u30c1\u30e3\u30ec\u30f3\u30b8\uff01\uff01\n    var cp1, cp2 float32\n    cp1 = getCp()\n    cp2 = getCp()\n    if cp1 > cp2 {\n        fmt.Println(1)\n    }else{\n        fmt.Println(2)\n    }\n}\n\nfunc getCp() float32 {\n    var coffein, price int\n    fmt.Scan(&coffein)\n    fmt.Scan(&price)\n    return (float32)(coffein) /(float32)(price)\n}\n```  \n\n#### \u3081\u304c\u306d   \n```lang:go\npackage main\nimport \"fmt\"\n\nfunc main(){\n    var aryNum1, aryNum2 int\n    fmt.Scan(&aryNum1)\n    pict1 := makePict(aryNum1)\n    fmt.Scan(&aryNum2)\n    pict2 := makePict(aryNum2)\n    pos := matchPict(pict1, aryNum1, pict2, aryNum2)\n    fmt.Println(fmt.Sprint(pos[0]), fmt.Sprint(pos[1]))\n}\n\nfunc matchPict(pict1 [][]int, size1 int, pict2 [][]int, size2 int) []int {\n    result := []int {0, 0}\n    checkLen  := size1 -size2\n    isMatch    := false\n    for h1:=0; h1<=checkLen && !isMatch; h1++ {\n        for w1:=0; w1<=checkLen && !isMatch; w1++{\n            if pict2[0][0] != pict1[h1][w1] {\n                continue\n            }\n            isMatch    := true\n            for h2:=0; h2<size2 && isMatch; h2++{\n                for w2:=0; w2<size2 && isMatch; w2++ {\n                    if pict2[h2][w2] != pict1[h1 +h2][w1 +w2] {\n                        isMatch = false\n                        break\n                    }\n                }\n            }\n            if isMatch {\n                result[0] = h1\n                result[1] = w1\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc makePict(len int) [][]int {\n    var dot int\n    var pict = make([][]int, len, len)\n    for i:=0; i<len; i++{\n        pict[i] = make([]int, len)\n        for m:=0; m<len; m++{\n            fmt.Scan(&dot)\n            pict[i][m] = dot\n        }\n    }\n    return pict\n}\n```  \n\n#### \u30b5\u30f3\u30bf\u670d   \n```lang:go\npackage main\nimport \"fmt\"\nimport \"sort\"\n\nfunc main(){\n    x, y, z, count := ScanCakeInfo()\n    xPoint := []int{0, x}\n    yPoint := []int{0, y}    \n    ScanCutInfo(&xPoint, &yPoint, count)\n    xw := CalcWidthMin(&xPoint, x)\n    yw := CalcWidthMin(&yPoint, y)\n    fmt.Println(fmt.Sprint(xw *yw *z))\n}\n\nfunc CalcWidthMin(pointTable *[]int, maxWidth int) int {\n    result := maxWidth\n    var width int\n    for i:=0; i<len(*pointTable) -1; i++ {\n        width = (*pointTable)[i +1] -(*pointTable)[i]\n        if width < result {\n            result = width\n        }\n    }\n    return result\n}\n\nfunc ScanCutInfo(xTable, yTable *[]int, count int) {\n    var data []int\n    for i:=0; i<count; i++ {\n        data = GetData()\n        if data[0] == 0 {\n            *xTable = append(*xTable, data[1])\n        }else{\n            *yTable = append(*yTable, data[1])\n        }\n    }\n    if !sort.IntsAreSorted(*xTable) {\n        sort.Ints(*xTable)\n    }\n    if !sort.IntsAreSorted(*yTable) {\n        sort.Ints(*yTable)\n    }\n}\n\nfunc ScanCakeInfo() (int, int, int, int) {\n    var x, y, z, count int\n    fmt.Scan(&x)\n    fmt.Scan(&y)\n    fmt.Scan(&z)\n    fmt.Scan(&count)\n    return x, y, z, count\n}\n\nfunc GetData() []int {\n    var result = make([]int, 2)\n    fmt.Scan(&result[0])\n    fmt.Scan(&result[1])\n    return result\n}\n```  \n\n#### \u7e1e\u30cb\u30fc\u30bd\u30bb\u30c3\u30c8   \n```lang:go\npackage main\nimport \"fmt\"\nfunc main(){\n    \n    var interval, total int\n    fmt.Scan(&interval)\n    fmt.Scan(&total)\n    result := \"\"\n    for looper:=0; looper<total; looper++ {\n        if (looper/interval) & 0x1 == 0 {\n            result += \"R\"\n        }else{\n            result += \"W\"\n        }\n    }\n    \n    fmt.Println(result)\n}\n```  \n  \ngolang\u697d\u3057\u3044\u3067\u3059\u306d  \n\u305f\u3060c\u307f\u305f\u3044\u306b\u306a\u3063\u3066\u308b\u6c17\u304c\u3059\u308b\u3057\u3001\u3053\u306e\u66f8\u304d\u65b9\u304c\u826f\u3044\u306e\u304b\u3061\u3087\u3063\u3068\u308f\u304b\u3089\u306a\u3044...  \ngo\u7684\u306a\u4f5c\u6cd5\u3068\u304b\u9762\u767d\u3044\u3084\u308a\u65b9\u3068\u304b\u3042\u308b\u3093\u3067\u3059\u304b\u306d\n"}