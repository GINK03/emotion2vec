{"context": "\n\n\u306f\u3058\u3081\u306b\n\u4eca\u56de\u306f\u3001Android\u3067\u5927\u304d\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3068\u304d\u306a\u3069\u306b\u4f7f\u7528\u3059\u308bDownloadManager\u3092RxJava\u3067\u51e6\u7406\u3057\u3066\u5c11\u3057\u5e78\u305b\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u305d\u306e\u304a\u8a71\u3092\u3057\u3088\u3046\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\n\u307e\u305a\u306f\u3058\u3081\u306b\u3001DownloadManager\u306fAPI Level9\u304b\u3089\u8ffd\u52a0\u3055\u308c\u305f\u3001\u5927\u304d\u3044\u5bb9\u91cf\u306e\u30d5\u30a1\u30a4\u30eb\u306a\u3069\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u969b\u306b\u4f7f\u7528\u3059\u308bHTTP Download\u306e\u30ed\u30f3\u30b0\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u30af\u30e9\u30b9\u3067\u3059\u3002\u9032\u6357\u306e\u901a\u77e5\u306a\u3069\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3092\u3059\u308b\u306e\u306b\u4fbf\u5229\u306a\u6a5f\u80fd\u304c\u8272\u3005\u3068\u63c3\u3063\u3066\u3044\u307e\u3059\u3002\n\u8eab\u8fd1\u306a\u4f8b\u3060\u3068\u3001Kindle\u306e\u66f8\u7c4d\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306a\u3069\u304c\u3053\u308c\u306b\u8a72\u5f53\u3059\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3055\u3066\u3001\u305d\u3093\u306aDownloadManager\u306a\u306e\u3067\u3059\u304c\u3001\u540c\u671f\u7684\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u7d50\u679c\u3092\u51e6\u7406\u3057\u305f\u308a\u3059\u308b\u5834\u5408\u306b\u5384\u4ecb\u306a\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u308c\u306f\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u72b6\u614b\u306e\u5909\u5316\u3092Receiver\u7d4c\u7531\u3067\u3057\u304b\u53d7\u3051\u53d6\u308c\u306a\u3044\u305f\u3081\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u7d42\u4e86\u5f8c\u306b\u4f55\u304b\u51e6\u7406\u3092\u3059\u308b\u5834\u5408\u3084\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u5931\u6557\u6642\u306e\u51e6\u7406\u306a\u3069\u304c\u9762\u5012\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001\u3053\u3053\u3067\u306f\u3053\u308c\u3089\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u72b6\u614b\u306e\u5909\u5316\u3092RxJava\u3067\u51e6\u7406\u3059\u308b\u3053\u3068\u3067\u540c\u671f\u7684\u306b\u51e6\u7406\u3057\u3084\u3059\u3044\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n\u53c2\u8003\u30ea\u30f3\u30af\u306a\u3069\nReactive\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3063\u3066?\u3001RxJava\u3063\u3066?\u3068\u3044\u3046\u4eba\u306f\u4e0b\u306e\u8cc7\u6599\u3068\u304b\u53c2\u8003\u306b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\nhttps://speakerdeck.com/hkurokawa/chu-xin-zhe-falsetamefalse-rxjava\n\n\u82f1\u8a9e\u304c\u8aad\u3081\u308b\u65b9\u306f\u3001\u3053\u3061\u3089\u3082\u30aa\u30b9\u30b9\u30e1\u3067\u3059\u3002\n\nhttps://speakerdeck.com/jakewharton/demystifying-rxjava-subscribers-oredev-2015\nhttps://speakerdeck.com/jakewharton/exploring-rxjava-2-for-android-gotocph-october-2016\n\nDownloadManager\u306b\u3064\u3044\u3066\u306f\u3001\u3053\u3061\u3089\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\nhttp://techbooster.jpn.org/andriod/application/2199/\nhttp://y-anz-m.blogspot.jp/2010/12/androidandroid23-downloadmanager.html\n\n\n\u30b3\u30fc\u30c9\n\u30b3\u30fc\u30c9\u306f\u5168\u3066Kotlin\u3067\u66f8\u3044\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u3082\u3057Java\u3058\u3083\u306a\u3044\u3068\u30c0\u30e1\u3060\u3068\u3044\u3046\u65b9\u306f\u30b3\u30e1\u30f3\u30c8\u3044\u305f\u3060\u3051\u308c\u3070Java\u30b3\u30fc\u30c9\u3082\u30b3\u30e1\u30f3\u30c8\u306b\u66f8\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u306e\u3067\u8a00\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u4e0b\u6e96\u5099\n\u307e\u305a\u306f\u3001Permission\u306e\u8a31\u53ef\u3092Manifest\u306b\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u307e\u305f\u3001\u5916\u90e8\u30b9\u30c8\u30ec\u30fc\u30b8\u306b\u4fdd\u5b58\u3059\u308b\u5834\u5408\u306f\u3001\u305d\u306e\u8a31\u53ef\u3082\u8ffd\u52a0\u3057\u307e\u3057\u3087\u3046\u3002(targetSDKVersion\u304c23\u79fb\u884c\u3060\u3068\u3001M\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u5bfe\u5fdc\u3082\u5fc5\u8981\u306a\u306e\u3067\u6c17\u3092\u3064\u3051\u3066\u304f\u3060\u3055\u3044)\n\nAndroidManifest.xml\n<uses-permission android:name=\"android.permission.INTERNET\"/>\n<!-- \u5916\u90e8\u30b9\u30c8\u30ec\u30fc\u30b8\u306b\u4fdd\u5b58\u3059\u308b\u5834\u5408 -->\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n\n\n\u307e\u305f\u3001RxJava\u3068RxAndroid\u3092\u4f7f\u7528\u3057\u307e\u3059\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u30ea\u30f3\u30af\u306e\u901a\u308abuild.gradle\u306b\u3066\u8a2d\u5b9a\u3092\u3057\u3066\u304f\u3060\u3055\u3044\u3002RxJava\u306f1\u7cfb\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u3082\u3057\u30012\u7cfb\u3092\u304a\u4f7f\u3044\u306e\u65b9\u306f\u3054\u81ea\u8eab\u3067\u7f6e\u304d\u304b\u3048\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n\nRxJava\nRxAndroid\n\n\napp/build.gradle\ndependencies {\n    compile 'io.reactivex:rxjava:1.2.1'\n    compile 'io.reactivex:rxandroid:1.2.1'\n}\n\n\n\nRxDownloader\u306e\u4f7f\u3044\u65b9\n\nDownloadManager\u7528\u306eRequest\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002Request\u30af\u30e9\u30b9\u306b\u3001\u305d\u308c\u305e\u308c\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u5148\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3084\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u5148\u3001\u30bf\u30a4\u30c8\u30eb\u3084\u8aac\u660e\u306a\u3069\u3092\u304a\u597d\u307f\u3067\u8a2d\u5b9a\u3057\u307e\u3059\u3002DownloadManager\u306e\u4ed5\u69d8\u306b\u6cbf\u3063\u3066\u304f\u3060\u3055\u3044\u3002\nRxDownloader\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\n1.\u3067\u4f5c\u6210\u3057\u305fRequest\u3092queue\u306b\u8caf\u3081\u307e\u3059\u3002\u8907\u6570\u8caf\u3081\u3066\u3082\u5927\u4e08\u592b\u3067\u3059\u3002\nexecute()\u3092\u547c\u3073\u51fa\u3059\u3068Observable\u304c\u8fd4\u3063\u3066\u304f\u308b\u306e\u3067\u3001subscribe\u3057\u3066\u5b9f\u884c\u3057\u307e\u3057\u3087\u3046\u3002\n\n\nRxDownloaderUse.kt\nimport android.app.DownloadManager\nimport android.net.Uri\nimport android.os.Bundle\nimport android.support.v7.app.AppCompatActivity\nimport rx.Observable\nimport rx.Subscriber\nimport rx.android.schedulers.AndroidSchedulers\nimport rx.schedulers.Schedulers\n\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n         /* === Step1 Create request object === */\n        // Uri for download target uri\n        val uri = Uri.parse(\"https://dl.dropboxusercontent.com/u/31455721/bg_jpg/150501.jpg\")\n        val request = DownloadManager.Request(uri).apply {\n            setAllowedNetworkTypes(\n                    DownloadManager.Request.NETWORK_MOBILE or DownloadManager.Request.NETWORK_WIFI\n            )\n            setTitle(\"Sample Download\")\n            setDescription(\"sample of using download manager\")\n            // and so your request settings...\n        }\n        /* === Step2 Create rxdownload === */\n        val rxDownloader = RxDownloader(this)\n        /* === Step3 Enqueue request === */\n        rxDownloader.enqueue(request)\n        /* === Step4 Execute and subscribe === */\n        rxDownloader.execute()\n                .subscribeOn(Schedulers.io())\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribe(object : Subscriber<RxDownloader.DownloadStatus>() {\n                    override fun onNext(status: RxDownloader.DownloadStatus?) {\n                        // Handling status\n                    }\n\n                    override fun onError(e: Throwable?) {\n                        // Error action\n                    }\n\n                    override fun onCompleted() {\n                        // Complete all request\n                    }\n                })\n    }\n}\n\n\n\u3055\u3066\u3001\u3053\u3046\u66f8\u304f\u3068\u975e\u5e38\u306b\u5197\u9577\u3067\u3059\u304c\u3001Kotlin\u306b\u306fextention\u3068\u3044\u3046\u7d20\u6674\u3089\u3057\u3044\u6a5f\u80fd\u304c\u3042\u308b\u306e\u3067\u3001request\u3084request\u306e\u914d\u5217\u306b\u5bfe\u3057\u3066execute\u30e1\u30bd\u30c3\u30c9\u3092\u751f\u3084\u3057\u305fextention\u3092\u7528\u610f\u3057\u307e\u3057\u305f\u3002\u306a\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306bStep2 ~ Step4\u3092\u77ed\u7e2e\u3067\u304d\u307e\u3059\u3002\n\u914d\u5217\u306b\u5bfe\u3057\u3066\u3082\u540c\u3058execute\u3060\u3051\u3067\u547c\u3073\u51fa\u305b\u307e\u3059\u3002\n\nRxDownloaderUse.kt\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n         /* === Step1 Create request object === */\n        // Uri for download target uri\n        val uri = Uri.parse(\"https://dl.dropboxusercontent.com/u/31455721/bg_jpg/150501.jpg\")\n        val request = DownloadManager.Request(uri).apply {\n            setAllowedNetworkTypes(\n                    DownloadManager.Request.NETWORK_MOBILE or DownloadManager.Request.NETWORK_WIFI\n            )\n            setTitle(\"Sample Download\")\n            setDescription(\"sample of using download manager\")\n            // and so your request settings...\n        }\n        /* === Step2~4 Kotlin extention   === */\n        request.execute(this)\n                .subscribeOn(Schedulers.io())\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribe(object : Subscriber<RxDownloader.DownloadStatus>() {\n                    override fun onNext(status: RxDownloader.DownloadStatus?) {\n                        // Handling status\n                    }\n\n                    override fun onError(e: Throwable?) {\n                        // Error action\n                    }\n\n                    override fun onCompleted() {\n                        // Complete all request\n                    }\n                })\n    }\n}\n\n\n\u6319\u52d5\u306b\u3064\u3044\u3066\u3001RxDownloader.DownloadStatus\u306f\u4ee5\u4e0b\u306e5\u7a2e\u985e\u306e\u3082\u306e\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u3053\u308c\u3089\u304c\u3001\u3069\u306e\u30bf\u30a4\u30df\u30f3\u3067\u8fd4\u3055\u308c\u308b\u304b\u306fDownloadManager\u306e\u4ed5\u69d8\u3068\u540c\u7b49\u3067\u3059\u306e\u3067\u305d\u3061\u3089\u3092\u898b\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n// \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u304c\u6210\u529f\u3057\u305f\u72b6\u614b\nSuccessful(id: Long)\n// \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u4e2d\u306e\u72b6\u614b\nRunning(id: Long)\n// \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u304c\u307e\u3060\u51e6\u7406\u3055\u308c\u3066\u3044\u306a\u3044\u72b6\u614b\nPending(id: Long)\n// \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u304c\u6b62\u307e\u3063\u3066\u3044\u308b\u72b6\u614b\nPaused(id: Long, reason: String)\n// \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u304c\u5931\u6557\u3057\u305f\u72b6\u614b\nFailed(id: Long, reason: String)\n\nRxDownloader\u306f\u8907\u6570\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u51e6\u7406\u3092\u524d\u63d0\u3068\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u4e00\u3064\u4e00\u3064\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u7d50\u679c\u306fonNext\u304c\u547c\u3073\u51fa\u3055\u308c\u3001\u5168\u3066\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u51e6\u7406\u3055\u308c\u308b\u3068onComplete\u304c\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\n\u307e\u305f\u3001\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306f\u305d\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067onError\u304c\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002(\u8907\u6570\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3092\u3059\u308b\u5834\u5408\u306f\u3001\u3053\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u4ed6\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u7d50\u679c\u306e\u53d7\u53d6\u3082\u7d42\u308f\u3063\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002)\n\nRxDownloader\u306e\u4e2d\u8eab\n\u4f7f\u3044\u65b9\u3092\u3056\u3063\u304f\u308a\u3068\u3001\u63b4\u3093\u3060\u3068\u3053\u308d\u3067RxDownloader\u306e\u4e2d\u8eab\u306e\u8a71\u306b\u79fb\u3063\u3066\u3044\u304d\u307e\u3059\u3002\nRxDownloader\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067context\u3068Request\u306eList\u3092\u53d7\u3051\u3089\u308c\u307e\u3059\u3002Request\u306e\u30ea\u30b9\u30c8\u3092\u3053\u3053\u3067\u8a2d\u5b9a\u3057\u306a\u304f\u3066\u3082\u3001\u7a7a\u306e\u30ea\u30b9\u30c8\u3067\u521d\u671f\u5316\u3055\u308c\u308b\u3060\u3051\u306a\u306e\u3067\u3001\u304a\u597d\u307f\u3067\u4f7f\u3063\u3066\u5927\u4e08\u592b\u3067\u3059\u3002\n\u4e3b\u306b\u3001\u51e6\u7406\u3092\u3057\u3066\u3044\u308b\u306e\u306fexecute\u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u3067\u3001\u3053\u3053\u3067\u5b9f\u969b\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u3092DownloadManager\u306eenqueue\u306b\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\nDownloadManager\u306e\u5b8c\u4e86\u30a4\u30d9\u30f3\u30c8\u306e\u901a\u77e5\u306f\u3001BroadcastReceiver\u3092\u4ecb\u3057\u3066\u884c\u308f\u308c\u308b\u306e\u3067\u3001\u51e6\u7406\u3092\u958b\u59cb\u3059\u308b\u524d\u306b\u307e\u305aContext.registerReceiver\u3092\u4f7f\u7528\u3057\u3066\u30ec\u30b7\u30fc\u30d0\u30fc\u3092\u767b\u9332\u3057\u307e\u3059\u3002\n\u305d\u306e\u5f8c\u3001DownloadManager\u306brequest\u3092enqueue\u3057\u307e\u3059\u3002\u3053\u306e\u6642\u3001queue1\u3064\u3054\u3068\u306b\u30bf\u30b9\u30af\u306eID\u3092\u5272\u308a\u632f\u3089\u308c\u308b\u306e\u3067\u3053\u308c\u3092\u4fdd\u5b58\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30ad\u30e3\u30f3\u30bb\u30eb\u3084\u3001\u3053\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u5185\u306e\u51e6\u7406\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\u306b\u3001\u3053\u306e\u30bf\u30b9\u30af\u306eID\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u3053\u308c\u3089\u306b\u95a2\u9023\u3057\u3066\u3001Observable\u3092unsubscribe\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067receiber\u306e\u89e3\u9664\u3068\u3001\u30bf\u30b9\u30af\u306e\u30ad\u30e3\u30f3\u30bb\u30eb\u3092\u884c\u3044\u307e\u3059\u3002\n\u305d\u308c\u305e\u308c\u306eStatus\u306e\u901a\u77e5\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306a\u3069\u3092\u898b\u305f\u3044\u65b9\u306f\u3001resolveDownloadStatus\u30e1\u30bd\u30c3\u30c9\u3092\u898b\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\u305d\u308c\u305e\u308c\u306e\u901a\u77e5\u5185\u5bb9\u3054\u3068\u306breason\u3092\u6c7a\u3081\u305f\u308a\u3057\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001\u4eca\u56de\u306f\u975e\u540c\u671f\u306a\u30a4\u30d9\u30f3\u30c8\u901a\u77e5\u3068\u306a\u308b\u305f\u3081\u3001Observable.fromEmitter\u3092\u4f7f\u7528\u3057\u3066\u3001Observable\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\nRxDownloader.kt\n/**\n * DownloadManager\u3092Rx\u3067\u51e6\u7406\u3059\u308b\u305f\u3081\u306e\u30af\u30e9\u30b9\n */\nclass RxDownloader(\n        private val context: Context,\n        // Download\u3059\u308b\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30ea\u30b9\u30c8\n        private val requests: ArrayList<DownloadManager.Request> = ArrayList<DownloadManager.Request>()) {\n\n    companion object {\n        const val TAG = \"RxDownloader\"\n    }\n\n    private val manager: DownloadManager =\n            context.getSystemService(Context.DOWNLOAD_SERVICE) as DownloadManager\n    // Request\u3067\u884c\u3063\u305f\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306e\u4e00\u89a7\u3092\u7ba1\u7406\u3057\u3066\u304a\u304f\u305f\u3081\u306e\u30af\u30e9\u30b9\n    private val queuedRequests: HashMap<Long, DownloadManager.Request> =\n            HashMap<Long, DownloadManager.Request>()\n    // \u6700\u5f8c\u306bUnsubscrive\u3057\u306a\u3044\u3068\u884c\u3051\u306a\u3044\u305f\u3081\u3001\u3053\u3053\u3067\u6240\u6301\u3057\u3066\u304a\u304f\n    private var receiver: BroadcastReceiver? = null\n\n    fun enqueue(request: DownloadManager.Request): RxDownloader = apply {\n        requests.add(request)\n    }\n\n    fun execute(): Observable<DownloadStatus> =\n            if (requests.isEmpty()) Observable.empty()\n            else Observable.fromEmitter({ emitter ->\n                receiver = object : BroadcastReceiver() {\n                    override fun onReceive(context: Context?, intent: Intent?) {\n                        intent ?: return\n                        if (DownloadManager.ACTION_DOWNLOAD_COMPLETE.equals(intent.action)) {\n                            val id = intent.getLongExtra(DownloadManager.EXTRA_DOWNLOAD_ID, -1)\n                            if (!queuedRequests.contains(id)) {\n                                // \u3053\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30bb\u30c3\u30c8\u306e\u4e2d\u306e\u3082\u306e\u3067\u306a\u3051\u308c\u3070\u51e6\u7406\u3092\u3057\u306a\u3044\n                                return\n                            }\n                            // \u30c1\u30a7\u30c3\u30ad\u30f3\u30b0Status\n                            resolveDownloadStatus(id, emitter)\n                            // \u672a\u51e6\u7406\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u4e00\u89a7\u304b\u3089\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u524a\u9664\u3059\u308b\n                            queuedRequests.remove(id)\n                            // \u5168\u3066\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u7d42\u308f\u3063\u3066\u3044\u305f\u3089onComplete\u3092\u6295\u3052\u308b\n                            if (queuedRequests.isEmpty()) {\n                                emitter.onCompleted()\n                            }\n                        }\n                    }\n                }\n                context.registerReceiver(receiver, IntentFilter(DownloadManager.ACTION_DOWNLOAD_COMPLETE))\n                // \u5b9f\u969b\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u884c\u3046\n                requests.forEach {\n                    val downloadId = manager.enqueue(it)\n                    // \u3053\u306eObservable\u306e\u51e6\u7406\u5f85\u3061\u306eRequest\u3068\u3057\u3066\u8ffd\u52a0\u3059\u308b\n                    queuedRequests.put(downloadId, it)\n                    Log.d(TAG, \"ID: ${downloadId}, START\")\n                }\n\n                emitter.setCancellation {\n                    // Unsubscribe\u3055\u308c\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u5168\u3066\u7834\u68c4\u3059\u308b\n                    queuedRequests.forEach {\n                        manager.remove(it.key)\n                    }\n                    // \u3053\u308c\u4ee5\u4e0a\u30a4\u30d9\u30f3\u30c8\u306f\u6765\u306a\u3044\u306e\u3067Receiver\u3092\u89e3\u9664\u3059\u308b\n                    receiver?.let {\n                        context.unregisterReceiver(it)\n                    }\n                }\n            }, AsyncEmitter.BackpressureMode.BUFFER)\n\n    private fun resolveDownloadStatus(id: Long, emitter: AsyncEmitter<in DownloadStatus>) {\n        val query = DownloadManager.Query().apply {\n            setFilterById(id)\n        }\n        val cursor = manager.query(query)\n        if (cursor.moveToFirst()) {\n            val status = cursor.getInt(cursor.getColumnIndex(DownloadManager.COLUMN_STATUS))\n            val reason = cursor.getInt(cursor.getColumnIndex(DownloadManager.COLUMN_REASON))\n            val requestResult: RequestResult = createRequestResult(id, cursor)\n            Log.d(TAG, \"RESULT: ${requestResult.toString()}\")\n            when (status) {\n                DownloadManager.STATUS_FAILED -> {\n                    val failedReason = when (reason) {\n                        /** reason\u306e\u5272\u308a\u5f53\u3066 **/\n                    }\n                    Log.e(TAG, \"ID: ${id}, FAILED: ${failedReason}\")\n                    emitter.onNext(DownloadStatus.Failed(requestResult, failedReason))\n                    emitter.onError(DownloadFailedException(failedReason, queuedRequests[id]))\n                }\n                DownloadManager.STATUS_PAUSED -> {\n                    val pausedReason = when (reason) {\n                        /** reason\u306e\u5272\u308a\u5f53\u3066 **/\n                    }\n                    Log.d(TAG, \"ID: ${id}, PAUSED: ${pausedReason}\")\n                    emitter.onNext(DownloadStatus.Paused(requestResult, pausedReason))\n                }\n                DownloadManager.STATUS_PENDING -> {\n                    Log.d(TAG, \"ID: ${id}, PENDING\")\n                    emitter.onNext(DownloadStatus.Pending(requestResult))\n                }\n                DownloadManager.STATUS_RUNNING -> {\n                    Log.d(TAG, \"ID: ${id}, RUNNING\")\n                    emitter.onNext(DownloadStatus.Running(requestResult))\n                }\n                DownloadManager.STATUS_SUCCESSFUL -> {\n                    Log.d(TAG, \"ID: ${id}, SUCCESSFUL\")\n                    emitter.onNext(DownloadStatus.Successful(requestResult))\n                }\n            }\n        }\n        cursor.close()\n    }\n\n    fun createRequestResult(id: Long, cursor: Cursor): RequestResult =\n            RequestResult(\n                    id = id,\n                    remoteUri = cursor.getString(cursor.getColumnIndex(DownloadManager.COLUMN_URI)),\n                    localUri = cursor.getString(cursor.getColumnIndex(DownloadManager.COLUMN_LOCAL_URI)),\n                    mediaType = cursor.getString(cursor.getColumnIndex(DownloadManager.COLUMN_MEDIA_TYPE)),\n                    totalSize = cursor.getInt(cursor.getColumnIndex(DownloadManager.COLUMN_TOTAL_SIZE_BYTES)),\n                    title = cursor.getString(cursor.getColumnIndex(DownloadManager.COLUMN_TITLE)),\n                    description = cursor.getString(cursor.getColumnIndex(DownloadManager.COLUMN_DESCRIPTION))\n            )\n\n    sealed class DownloadStatus(val result: RequestResult) {\n        class Successful(result: RequestResult) : DownloadStatus(result)\n        class Running(result: RequestResult) : DownloadStatus(result)\n        class Pending(result: RequestResult) : DownloadStatus(result)\n        class Paused(result: RequestResult, val reason: String) : DownloadStatus(result)\n        class Failed(result: RequestResult, val reason: String) : DownloadStatus(result)\n    }\n\n    // \u518d\u30ea\u30af\u30a8\u30b9\u30c8\u3067\u304d\u308b\u3088\u3046\u306bRequest\u3092\u6301\u305f\u305b\u308b\u3088\u3046\u306b\u3059\u308b\n    class DownloadFailedException(message: String, val request: DownloadManager.Request?) : Throwable(message)\n\n\n\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u7d50\u679c\u3092Cursor\u304b\u3089\u53d6\u308a\u51fa\u3059\u306e\u306f\u7d50\u69cb\u3081\u3093\u3069\u3046\u306a\u306e\u3067\u3001\u3053\u3061\u3089\u3067\u3084\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\nRequestResult.kt\ndata class RequestResult(\n        val id: Long,\n        val remoteUri: String,\n        val localUri: String,\n        val mediaType: String,\n        val totalSize: Int,\n        val title: String?,\n        val description: String?\n)\n\n\n\n\u304a\u308f\u308a\u306b\n\u30b3\u30fc\u30c9\u306f\u3053\u3053\u306b\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u9069\u5f53\u306b\u898b\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\nhttps://github.com/Reyurnible/RxDownloader\n\u30b3\u30fc\u30c9\u306e\u8cea\u554f\u3067\u3082\u3001\u306a\u3093\u3067\u3082\u53d7\u3051\u4ed8\u3051\u3066\u304a\u308a\u307e\u3059\u306e\u3067\u3001\u3054\u8cea\u554f\u3084\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u3042\u308c\u3070\u304a\u6c17\u8efd\u306b\u3069\u3046\u305e\u301c\n\n## \u306f\u3058\u3081\u306b\n\u4eca\u56de\u306f\u3001Android\u3067\u5927\u304d\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3068\u304d\u306a\u3069\u306b\u4f7f\u7528\u3059\u308b[DownloadManager](https://developer.android.com/reference/android/app/DownloadManager.html)\u3092[RxJava](https://github.com/ReactiveX/RxJava)\u3067\u51e6\u7406\u3057\u3066\u5c11\u3057\u5e78\u305b\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u305d\u306e\u304a\u8a71\u3092\u3057\u3088\u3046\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u307e\u305a\u306f\u3058\u3081\u306b\u3001DownloadManager\u306fAPI Level9\u304b\u3089\u8ffd\u52a0\u3055\u308c\u305f\u3001\u5927\u304d\u3044\u5bb9\u91cf\u306e\u30d5\u30a1\u30a4\u30eb\u306a\u3069\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u969b\u306b\u4f7f\u7528\u3059\u308bHTTP Download\u306e\u30ed\u30f3\u30b0\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u30af\u30e9\u30b9\u3067\u3059\u3002\u9032\u6357\u306e\u901a\u77e5\u306a\u3069\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3092\u3059\u308b\u306e\u306b\u4fbf\u5229\u306a\u6a5f\u80fd\u304c\u8272\u3005\u3068\u63c3\u3063\u3066\u3044\u307e\u3059\u3002\n\u8eab\u8fd1\u306a\u4f8b\u3060\u3068\u3001Kindle\u306e\u66f8\u7c4d\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306a\u3069\u304c\u3053\u308c\u306b\u8a72\u5f53\u3059\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3055\u3066\u3001\u305d\u3093\u306aDownloadManager\u306a\u306e\u3067\u3059\u304c\u3001\u540c\u671f\u7684\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u7d50\u679c\u3092\u51e6\u7406\u3057\u305f\u308a\u3059\u308b\u5834\u5408\u306b\u5384\u4ecb\u306a\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u308c\u306f\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u72b6\u614b\u306e\u5909\u5316\u3092Receiver\u7d4c\u7531\u3067\u3057\u304b\u53d7\u3051\u53d6\u308c\u306a\u3044\u305f\u3081\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u7d42\u4e86\u5f8c\u306b\u4f55\u304b\u51e6\u7406\u3092\u3059\u308b\u5834\u5408\u3084\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u5931\u6557\u6642\u306e\u51e6\u7406\u306a\u3069\u304c\u9762\u5012\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\n\u305d\u306e\u305f\u3081\u3001\u3053\u3053\u3067\u306f\u3053\u308c\u3089\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u72b6\u614b\u306e\u5909\u5316\u3092RxJava\u3067\u51e6\u7406\u3059\u308b\u3053\u3068\u3067\u540c\u671f\u7684\u306b\u51e6\u7406\u3057\u3084\u3059\u3044\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n## \u53c2\u8003\u30ea\u30f3\u30af\u306a\u3069\n\nReactive\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3063\u3066?\u3001RxJava\u3063\u3066?\u3068\u3044\u3046\u4eba\u306f\u4e0b\u306e\u8cc7\u6599\u3068\u304b\u53c2\u8003\u306b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n- https://speakerdeck.com/hkurokawa/chu-xin-zhe-falsetamefalse-rxjava\n\n\u82f1\u8a9e\u304c\u8aad\u3081\u308b\u65b9\u306f\u3001\u3053\u3061\u3089\u3082\u30aa\u30b9\u30b9\u30e1\u3067\u3059\u3002\n\n- https://speakerdeck.com/jakewharton/demystifying-rxjava-subscribers-oredev-2015\n- https://speakerdeck.com/jakewharton/exploring-rxjava-2-for-android-gotocph-october-2016\n\nDownloadManager\u306b\u3064\u3044\u3066\u306f\u3001\u3053\u3061\u3089\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\n- http://techbooster.jpn.org/andriod/application/2199/\n- http://y-anz-m.blogspot.jp/2010/12/androidandroid23-downloadmanager.html\n\n## \u30b3\u30fc\u30c9\n\u30b3\u30fc\u30c9\u306f\u5168\u3066Kotlin\u3067\u66f8\u3044\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u3082\u3057Java\u3058\u3083\u306a\u3044\u3068\u30c0\u30e1\u3060\u3068\u3044\u3046\u65b9\u306f\u30b3\u30e1\u30f3\u30c8\u3044\u305f\u3060\u3051\u308c\u3070Java\u30b3\u30fc\u30c9\u3082\u30b3\u30e1\u30f3\u30c8\u306b\u66f8\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u306e\u3067\u8a00\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\n### \u4e0b\u6e96\u5099\n\u307e\u305a\u306f\u3001Permission\u306e\u8a31\u53ef\u3092Manifest\u306b\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u307e\u305f\u3001\u5916\u90e8\u30b9\u30c8\u30ec\u30fc\u30b8\u306b\u4fdd\u5b58\u3059\u308b\u5834\u5408\u306f\u3001\u305d\u306e\u8a31\u53ef\u3082\u8ffd\u52a0\u3057\u307e\u3057\u3087\u3046\u3002(targetSDKVersion\u304c23\u79fb\u884c\u3060\u3068\u3001M\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u5bfe\u5fdc\u3082\u5fc5\u8981\u306a\u306e\u3067\u6c17\u3092\u3064\u3051\u3066\u304f\u3060\u3055\u3044)\n\n```AndroidManifest.xml\n<uses-permission android:name=\"android.permission.INTERNET\"/>\n<!-- \u5916\u90e8\u30b9\u30c8\u30ec\u30fc\u30b8\u306b\u4fdd\u5b58\u3059\u308b\u5834\u5408 -->\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```\n\n\u307e\u305f\u3001RxJava\u3068RxAndroid\u3092\u4f7f\u7528\u3057\u307e\u3059\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u30ea\u30f3\u30af\u306e\u901a\u308abuild.gradle\u306b\u3066\u8a2d\u5b9a\u3092\u3057\u3066\u304f\u3060\u3055\u3044\u3002RxJava\u306f1\u7cfb\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u3082\u3057\u30012\u7cfb\u3092\u304a\u4f7f\u3044\u306e\u65b9\u306f\u3054\u81ea\u8eab\u3067\u7f6e\u304d\u304b\u3048\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n\n- [RxJava](https://github.com/ReactiveX/RxJava)\n- [RxAndroid](https://github.com/ReactiveX/RxAndroid)\n\n```app/build.gradle\ndependencies {\n    compile 'io.reactivex:rxjava:1.2.1'\n\tcompile 'io.reactivex:rxandroid:1.2.1'\n}\n```\n\n### RxDownloader\u306e\u4f7f\u3044\u65b9\n1. DownloadManager\u7528\u306eRequest\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002Request\u30af\u30e9\u30b9\u306b\u3001\u305d\u308c\u305e\u308c\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u5148\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3084\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u5148\u3001\u30bf\u30a4\u30c8\u30eb\u3084\u8aac\u660e\u306a\u3069\u3092\u304a\u597d\u307f\u3067\u8a2d\u5b9a\u3057\u307e\u3059\u3002DownloadManager\u306e\u4ed5\u69d8\u306b\u6cbf\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n2. RxDownloader\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\n3. 1.\u3067\u4f5c\u6210\u3057\u305fRequest\u3092queue\u306b\u8caf\u3081\u307e\u3059\u3002\u8907\u6570\u8caf\u3081\u3066\u3082\u5927\u4e08\u592b\u3067\u3059\u3002\n4. execute()\u3092\u547c\u3073\u51fa\u3059\u3068Observable\u304c\u8fd4\u3063\u3066\u304f\u308b\u306e\u3067\u3001subscribe\u3057\u3066\u5b9f\u884c\u3057\u307e\u3057\u3087\u3046\u3002\n\n```RxDownloaderUse.kt\nimport android.app.DownloadManager\nimport android.net.Uri\nimport android.os.Bundle\nimport android.support.v7.app.AppCompatActivity\nimport rx.Observable\nimport rx.Subscriber\nimport rx.android.schedulers.AndroidSchedulers\nimport rx.schedulers.Schedulers\n\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n\t\t /* === Step1 Create request object === */\n        // Uri for download target uri\n        val uri = Uri.parse(\"https://dl.dropboxusercontent.com/u/31455721/bg_jpg/150501.jpg\")\n        val request = DownloadManager.Request(uri).apply {\n            setAllowedNetworkTypes(\n                    DownloadManager.Request.NETWORK_MOBILE or DownloadManager.Request.NETWORK_WIFI\n            )\n            setTitle(\"Sample Download\")\n            setDescription(\"sample of using download manager\")\n            // and so your request settings...\n        }\n        /* === Step2 Create rxdownload === */\n        val rxDownloader = RxDownloader(this)\n        /* === Step3 Enqueue request === */\n        rxDownloader.enqueue(request)\n        /* === Step4 Execute and subscribe === */\n        rxDownloader.execute()\n                .subscribeOn(Schedulers.io())\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribe(object : Subscriber<RxDownloader.DownloadStatus>() {\n                    override fun onNext(status: RxDownloader.DownloadStatus?) {\n                        // Handling status\n                    }\n\n                    override fun onError(e: Throwable?) {\n                        // Error action\n                    }\n\n                    override fun onCompleted() {\n                        // Complete all request\n                    }\n                })\n\t}\n}\n```\n\n\u3055\u3066\u3001\u3053\u3046\u66f8\u304f\u3068\u975e\u5e38\u306b\u5197\u9577\u3067\u3059\u304c\u3001Kotlin\u306b\u306fextention\u3068\u3044\u3046\u7d20\u6674\u3089\u3057\u3044\u6a5f\u80fd\u304c\u3042\u308b\u306e\u3067\u3001request\u3084request\u306e\u914d\u5217\u306b\u5bfe\u3057\u3066execute\u30e1\u30bd\u30c3\u30c9\u3092\u751f\u3084\u3057\u305fextention\u3092\u7528\u610f\u3057\u307e\u3057\u305f\u3002\u306a\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306bStep2 ~ Step4\u3092\u77ed\u7e2e\u3067\u304d\u307e\u3059\u3002\n\u914d\u5217\u306b\u5bfe\u3057\u3066\u3082\u540c\u3058execute\u3060\u3051\u3067\u547c\u3073\u51fa\u305b\u307e\u3059\u3002\n\n```RxDownloaderUse.kt\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n\t\t /* === Step1 Create request object === */\n        // Uri for download target uri\n        val uri = Uri.parse(\"https://dl.dropboxusercontent.com/u/31455721/bg_jpg/150501.jpg\")\n        val request = DownloadManager.Request(uri).apply {\n            setAllowedNetworkTypes(\n                    DownloadManager.Request.NETWORK_MOBILE or DownloadManager.Request.NETWORK_WIFI\n            )\n            setTitle(\"Sample Download\")\n            setDescription(\"sample of using download manager\")\n            // and so your request settings...\n        }\n        /* === Step2~4 Kotlin extention   === */\n        request.execute(this)\n                .subscribeOn(Schedulers.io())\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribe(object : Subscriber<RxDownloader.DownloadStatus>() {\n                    override fun onNext(status: RxDownloader.DownloadStatus?) {\n                        // Handling status\n                    }\n\n                    override fun onError(e: Throwable?) {\n                        // Error action\n                    }\n\n                    override fun onCompleted() {\n                        // Complete all request\n                    }\n                })\n\t}\n}\n```\n\n\u6319\u52d5\u306b\u3064\u3044\u3066\u3001RxDownloader.DownloadStatus\u306f\u4ee5\u4e0b\u306e5\u7a2e\u985e\u306e\u3082\u306e\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u3053\u308c\u3089\u304c\u3001\u3069\u306e\u30bf\u30a4\u30df\u30f3\u3067\u8fd4\u3055\u308c\u308b\u304b\u306fDownloadManager\u306e\u4ed5\u69d8\u3068\u540c\u7b49\u3067\u3059\u306e\u3067\u305d\u3061\u3089\u3092\u898b\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n\n```\n// \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u304c\u6210\u529f\u3057\u305f\u72b6\u614b\nSuccessful(id: Long)\n// \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u4e2d\u306e\u72b6\u614b\nRunning(id: Long)\n// \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u304c\u307e\u3060\u51e6\u7406\u3055\u308c\u3066\u3044\u306a\u3044\u72b6\u614b\nPending(id: Long)\n// \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u304c\u6b62\u307e\u3063\u3066\u3044\u308b\u72b6\u614b\nPaused(id: Long, reason: String)\n// \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u304c\u5931\u6557\u3057\u305f\u72b6\u614b\nFailed(id: Long, reason: String)\n```\n\nRxDownloader\u306f\u8907\u6570\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u51e6\u7406\u3092\u524d\u63d0\u3068\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u4e00\u3064\u4e00\u3064\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u7d50\u679c\u306fonNext\u304c\u547c\u3073\u51fa\u3055\u308c\u3001\u5168\u3066\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u51e6\u7406\u3055\u308c\u308b\u3068onComplete\u304c\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\n\u307e\u305f\u3001\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306f\u305d\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067onError\u304c\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002(\u8907\u6570\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3092\u3059\u308b\u5834\u5408\u306f\u3001\u3053\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u4ed6\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u7d50\u679c\u306e\u53d7\u53d6\u3082\u7d42\u308f\u3063\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002)\n\n### RxDownloader\u306e\u4e2d\u8eab\n\u4f7f\u3044\u65b9\u3092\u3056\u3063\u304f\u308a\u3068\u3001\u63b4\u3093\u3060\u3068\u3053\u308d\u3067RxDownloader\u306e\u4e2d\u8eab\u306e\u8a71\u306b\u79fb\u3063\u3066\u3044\u304d\u307e\u3059\u3002\nRxDownloader\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067context\u3068Request\u306eList\u3092\u53d7\u3051\u3089\u308c\u307e\u3059\u3002Request\u306e\u30ea\u30b9\u30c8\u3092\u3053\u3053\u3067\u8a2d\u5b9a\u3057\u306a\u304f\u3066\u3082\u3001\u7a7a\u306e\u30ea\u30b9\u30c8\u3067\u521d\u671f\u5316\u3055\u308c\u308b\u3060\u3051\u306a\u306e\u3067\u3001\u304a\u597d\u307f\u3067\u4f7f\u3063\u3066\u5927\u4e08\u592b\u3067\u3059\u3002\n\n\u4e3b\u306b\u3001\u51e6\u7406\u3092\u3057\u3066\u3044\u308b\u306e\u306fexecute\u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u3067\u3001\u3053\u3053\u3067\u5b9f\u969b\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u3092DownloadManager\u306eenqueue\u306b\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\nDownloadManager\u306e\u5b8c\u4e86\u30a4\u30d9\u30f3\u30c8\u306e\u901a\u77e5\u306f\u3001BroadcastReceiver\u3092\u4ecb\u3057\u3066\u884c\u308f\u308c\u308b\u306e\u3067\u3001\u51e6\u7406\u3092\u958b\u59cb\u3059\u308b\u524d\u306b\u307e\u305aContext.registerReceiver\u3092\u4f7f\u7528\u3057\u3066\u30ec\u30b7\u30fc\u30d0\u30fc\u3092\u767b\u9332\u3057\u307e\u3059\u3002\n\u305d\u306e\u5f8c\u3001DownloadManager\u306brequest\u3092enqueue\u3057\u307e\u3059\u3002\u3053\u306e\u6642\u3001queue1\u3064\u3054\u3068\u306b\u30bf\u30b9\u30af\u306eID\u3092\u5272\u308a\u632f\u3089\u308c\u308b\u306e\u3067\u3053\u308c\u3092\u4fdd\u5b58\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30ad\u30e3\u30f3\u30bb\u30eb\u3084\u3001\u3053\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u5185\u306e\u51e6\u7406\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\u306b\u3001\u3053\u306e\u30bf\u30b9\u30af\u306eID\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u3053\u308c\u3089\u306b\u95a2\u9023\u3057\u3066\u3001Observable\u3092unsubscribe\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067receiber\u306e\u89e3\u9664\u3068\u3001\u30bf\u30b9\u30af\u306e\u30ad\u30e3\u30f3\u30bb\u30eb\u3092\u884c\u3044\u307e\u3059\u3002\n\n\u305d\u308c\u305e\u308c\u306eStatus\u306e\u901a\u77e5\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306a\u3069\u3092\u898b\u305f\u3044\u65b9\u306f\u3001`resolveDownloadStatus`\u30e1\u30bd\u30c3\u30c9\u3092\u898b\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\u305d\u308c\u305e\u308c\u306e\u901a\u77e5\u5185\u5bb9\u3054\u3068\u306breason\u3092\u6c7a\u3081\u305f\u308a\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u307e\u305f\u3001\u4eca\u56de\u306f\u975e\u540c\u671f\u306a\u30a4\u30d9\u30f3\u30c8\u901a\u77e5\u3068\u306a\u308b\u305f\u3081\u3001`Observable.fromEmitter`\u3092\u4f7f\u7528\u3057\u3066\u3001Observable\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n```RxDownloader.kt\n/**\n * DownloadManager\u3092Rx\u3067\u51e6\u7406\u3059\u308b\u305f\u3081\u306e\u30af\u30e9\u30b9\n */\nclass RxDownloader(\n        private val context: Context,\n        // Download\u3059\u308b\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30ea\u30b9\u30c8\n        private val requests: ArrayList<DownloadManager.Request> = ArrayList<DownloadManager.Request>()) {\n\n    companion object {\n        const val TAG = \"RxDownloader\"\n    }\n\n    private val manager: DownloadManager =\n            context.getSystemService(Context.DOWNLOAD_SERVICE) as DownloadManager\n    // Request\u3067\u884c\u3063\u305f\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306e\u4e00\u89a7\u3092\u7ba1\u7406\u3057\u3066\u304a\u304f\u305f\u3081\u306e\u30af\u30e9\u30b9\n    private val queuedRequests: HashMap<Long, DownloadManager.Request> =\n            HashMap<Long, DownloadManager.Request>()\n    // \u6700\u5f8c\u306bUnsubscrive\u3057\u306a\u3044\u3068\u884c\u3051\u306a\u3044\u305f\u3081\u3001\u3053\u3053\u3067\u6240\u6301\u3057\u3066\u304a\u304f\n    private var receiver: BroadcastReceiver? = null\n\n    fun enqueue(request: DownloadManager.Request): RxDownloader = apply {\n        requests.add(request)\n    }\n\n    fun execute(): Observable<DownloadStatus> =\n            if (requests.isEmpty()) Observable.empty()\n            else Observable.fromEmitter({ emitter ->\n                receiver = object : BroadcastReceiver() {\n                    override fun onReceive(context: Context?, intent: Intent?) {\n                        intent ?: return\n                        if (DownloadManager.ACTION_DOWNLOAD_COMPLETE.equals(intent.action)) {\n                            val id = intent.getLongExtra(DownloadManager.EXTRA_DOWNLOAD_ID, -1)\n                            if (!queuedRequests.contains(id)) {\n                                // \u3053\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30bb\u30c3\u30c8\u306e\u4e2d\u306e\u3082\u306e\u3067\u306a\u3051\u308c\u3070\u51e6\u7406\u3092\u3057\u306a\u3044\n                                return\n                            }\n                            // \u30c1\u30a7\u30c3\u30ad\u30f3\u30b0Status\n                            resolveDownloadStatus(id, emitter)\n                            // \u672a\u51e6\u7406\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u4e00\u89a7\u304b\u3089\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u524a\u9664\u3059\u308b\n                            queuedRequests.remove(id)\n                            // \u5168\u3066\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u7d42\u308f\u3063\u3066\u3044\u305f\u3089onComplete\u3092\u6295\u3052\u308b\n                            if (queuedRequests.isEmpty()) {\n                                emitter.onCompleted()\n                            }\n                        }\n                    }\n                }\n                context.registerReceiver(receiver, IntentFilter(DownloadManager.ACTION_DOWNLOAD_COMPLETE))\n                // \u5b9f\u969b\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u884c\u3046\n                requests.forEach {\n                    val downloadId = manager.enqueue(it)\n                    // \u3053\u306eObservable\u306e\u51e6\u7406\u5f85\u3061\u306eRequest\u3068\u3057\u3066\u8ffd\u52a0\u3059\u308b\n                    queuedRequests.put(downloadId, it)\n                    Log.d(TAG, \"ID: ${downloadId}, START\")\n                }\n\n                emitter.setCancellation {\n                    // Unsubscribe\u3055\u308c\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u5168\u3066\u7834\u68c4\u3059\u308b\n                    queuedRequests.forEach {\n                        manager.remove(it.key)\n                    }\n                    // \u3053\u308c\u4ee5\u4e0a\u30a4\u30d9\u30f3\u30c8\u306f\u6765\u306a\u3044\u306e\u3067Receiver\u3092\u89e3\u9664\u3059\u308b\n                    receiver?.let {\n                        context.unregisterReceiver(it)\n                    }\n                }\n            }, AsyncEmitter.BackpressureMode.BUFFER)\n\n    private fun resolveDownloadStatus(id: Long, emitter: AsyncEmitter<in DownloadStatus>) {\n        val query = DownloadManager.Query().apply {\n            setFilterById(id)\n        }\n        val cursor = manager.query(query)\n        if (cursor.moveToFirst()) {\n            val status = cursor.getInt(cursor.getColumnIndex(DownloadManager.COLUMN_STATUS))\n            val reason = cursor.getInt(cursor.getColumnIndex(DownloadManager.COLUMN_REASON))\n            val requestResult: RequestResult = createRequestResult(id, cursor)\n            Log.d(TAG, \"RESULT: ${requestResult.toString()}\")\n            when (status) {\n                DownloadManager.STATUS_FAILED -> {\n                    val failedReason = when (reason) {\n                        /** reason\u306e\u5272\u308a\u5f53\u3066 **/\n                    }\n                    Log.e(TAG, \"ID: ${id}, FAILED: ${failedReason}\")\n                    emitter.onNext(DownloadStatus.Failed(requestResult, failedReason))\n                    emitter.onError(DownloadFailedException(failedReason, queuedRequests[id]))\n                }\n                DownloadManager.STATUS_PAUSED -> {\n                    val pausedReason = when (reason) {\n                        /** reason\u306e\u5272\u308a\u5f53\u3066 **/\n                    }\n                    Log.d(TAG, \"ID: ${id}, PAUSED: ${pausedReason}\")\n                    emitter.onNext(DownloadStatus.Paused(requestResult, pausedReason))\n                }\n                DownloadManager.STATUS_PENDING -> {\n                    Log.d(TAG, \"ID: ${id}, PENDING\")\n                    emitter.onNext(DownloadStatus.Pending(requestResult))\n                }\n                DownloadManager.STATUS_RUNNING -> {\n                    Log.d(TAG, \"ID: ${id}, RUNNING\")\n                    emitter.onNext(DownloadStatus.Running(requestResult))\n                }\n                DownloadManager.STATUS_SUCCESSFUL -> {\n                    Log.d(TAG, \"ID: ${id}, SUCCESSFUL\")\n                    emitter.onNext(DownloadStatus.Successful(requestResult))\n                }\n            }\n        }\n        cursor.close()\n    }\n\n    fun createRequestResult(id: Long, cursor: Cursor): RequestResult =\n            RequestResult(\n                    id = id,\n                    remoteUri = cursor.getString(cursor.getColumnIndex(DownloadManager.COLUMN_URI)),\n                    localUri = cursor.getString(cursor.getColumnIndex(DownloadManager.COLUMN_LOCAL_URI)),\n                    mediaType = cursor.getString(cursor.getColumnIndex(DownloadManager.COLUMN_MEDIA_TYPE)),\n                    totalSize = cursor.getInt(cursor.getColumnIndex(DownloadManager.COLUMN_TOTAL_SIZE_BYTES)),\n                    title = cursor.getString(cursor.getColumnIndex(DownloadManager.COLUMN_TITLE)),\n                    description = cursor.getString(cursor.getColumnIndex(DownloadManager.COLUMN_DESCRIPTION))\n            )\n\n    sealed class DownloadStatus(val result: RequestResult) {\n        class Successful(result: RequestResult) : DownloadStatus(result)\n        class Running(result: RequestResult) : DownloadStatus(result)\n        class Pending(result: RequestResult) : DownloadStatus(result)\n        class Paused(result: RequestResult, val reason: String) : DownloadStatus(result)\n        class Failed(result: RequestResult, val reason: String) : DownloadStatus(result)\n    }\n\n    // \u518d\u30ea\u30af\u30a8\u30b9\u30c8\u3067\u304d\u308b\u3088\u3046\u306bRequest\u3092\u6301\u305f\u305b\u308b\u3088\u3046\u306b\u3059\u308b\n    class DownloadFailedException(message: String, val request: DownloadManager.Request?) : Throwable(message)\n```\n\n\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u7d50\u679c\u3092Cursor\u304b\u3089\u53d6\u308a\u51fa\u3059\u306e\u306f\u7d50\u69cb\u3081\u3093\u3069\u3046\u306a\u306e\u3067\u3001\u3053\u3061\u3089\u3067\u3084\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n```RequestResult.kt\ndata class RequestResult(\n        val id: Long,\n        val remoteUri: String,\n        val localUri: String,\n        val mediaType: String,\n        val totalSize: Int,\n        val title: String?,\n        val description: String?\n)\n```\n\n## \u304a\u308f\u308a\u306b\n\n\u30b3\u30fc\u30c9\u306f\u3053\u3053\u306b\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u9069\u5f53\u306b\u898b\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n\nhttps://github.com/Reyurnible/RxDownloader\n\n\u30b3\u30fc\u30c9\u306e\u8cea\u554f\u3067\u3082\u3001\u306a\u3093\u3067\u3082\u53d7\u3051\u4ed8\u3051\u3066\u304a\u308a\u307e\u3059\u306e\u3067\u3001\u3054\u8cea\u554f\u3084\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u3042\u308c\u3070\u304a\u6c17\u8efd\u306b\u3069\u3046\u305e\u301c\n", "tags": ["RxJava", "Android", "Kotlin", "Java"]}