{"context": "\n\n\u6982\u8981\n\u30de\u30af\u30ed\u306e\u52c9\u5f37\u304c\u3066\u3089\u3001Rust\u306e\u30b3\u30fc\u30c9\u5185\u3067Lisp\u3063\u307d\u304f\u8a18\u8ff0\u3067\u304d\u308bDSL(?)\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\uff08Lisp\u306b\u9759\u7684\u578b\u304c\u3042\u3063\u305f\u3089\u3069\u3046\u306a\u308b\u306e\u304b\u3001\u3068\u3044\u3046\u306e\u306b\u8208\u5473\u3042\u3063\u305f\u306e\u3082\u3042\u308b\u3002\uff09\n\u4f7f\u3044\u9053\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u308f\u304b\u308a\u307e\u305b\u3093\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u516c\u958b\u3057\u307e\u3057\u305f\u3002\n\u826f\u304f\u3082\u60aa\u304f\u3082\u6240\u8a6e\u306fRust\u306e\u30de\u30af\u30ed\u4e0a\u3067\u69cb\u7bc9\u3055\u308c\u305f\u3082\u306e\u306a\u306e\u3067\u3001\u300c\u9759\u7684\u578b\uff06\u6240\u6709\u6a29\u6709\u308a\u300d\u306e\u8a00\u8a9e\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u4f7f\u3044\u65b9\nCargo.toml\u30d5\u30a1\u30a4\u30eb\u306b\u4ee5\u4e0b\u306e\u8a18\u8ff0\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\nCargo.toml\n[dependencies]\nmacro_lisp=\"0.1.0\"\n\n\n\u5f8c\u306f\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u5185\u306b\u3001\n#[macro_use]\nextern crate macro_lisp;\n\n\u3068\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3067Lisp\u3063\u307d\u3044\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\n\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\u3092\u307f\u308b\u306e\u304c\u624b\u3063\u53d6\u308a\u65e9\u3044\u3068\u601d\u3044\u307e\u3059\u306e\u3067\u3001\u30b5\u30f3\u30d7\u30eb\u3092\u8f09\u305b\u3066\u304a\u304d\u307e\u3059\u3002\nLisp\u3092\u597d\u304d\u3067\u306a\u3044\u65b9\u306f\u6c17\u6301\u3061\u60aa\u304f\u306a\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u6ce8\u610f\u3002\n\u3061\u306a\u307f\u306b\u3001Lisp!()\u30de\u30af\u30ed\u5185\u306bLisp\u3063\u307d\u3044\u8a18\u8ff0\u3092\u66f8\u304f\u4ed5\u69d8\u3067\u3059\u3002\n\nFizzBuzz\n\nfizzbuzz.rs\n#[macro_use]\nextern crate macro_lisp;\n\nlisp!(defun main() ()\n    (dotimes (count 100)\n        (defconstant num (1+ count))\n        (if (== 0 (% num 3))\n            (if (== 0 (% num 5))\n                (println \"FizzBuzz\")\n                (println \"Fizz\"))\n            (if (== 0 (% num 5))\n                (println \"Buzz\")\n                (println \"{}\" num))))\n);\n\n\n\nUnix\u30e9\u30a4\u30af\u306awc\u30b3\u30de\u30f3\u30c9\n\nwc.rs\n#[macro_use]\nextern crate macro_lisp;\n\nlisp!(use std::env);\nlisp!(use std::process::exit);\n\nlisp!(defun is_whitespace ((b u8)) bool  // (b u8)\u306fu8\u578b\u306e\u5f15\u6570b\u3092\u3068\u308b\u3068\u3044\u3046\u3053\u3068\u3002bool\u306f\u623b\u308a\u5024\u306e\u578b\u3002\u3000\n    (match b\n        (0x20 | 0x09 | 0x85 | 0x0a | 0x0b | 0x0c | 0x0d => (true))\n        (_ => (false) )) // \u30de\u30af\u30ed\u306e\u9650\u754c\uff08\uff1f\uff09\u3067\u3001\u30ab\u30c3\u30b3\u7121\u3057\u3067true\u3084false\u3068\u66f8\u3051\u308b\u3088\u3046\u306b\u3067\u304d\u306a\u304b\u3063\u305f\u3002\n);\n\nlisp!(defun main () ()\n    (defconstant (args Vec<String>) env::args().collect()) // \u578b\u3092\u6307\u5b9a\u3057\u305f\u5b9a\u6570\u5ba3\u8a00(Rust\u306elet)\n    (if (< (len args) 2)\n        (progn\n            (println \"usage: wc file\")\n            (exit 0)))\n\n    (defvar char_count 0) // Rust\u306elet mut\n    (defvar word_count 0)\n    (defvar line_count 0)\n    (defvar in_word false)\n\n    (defconstant path &args[1])\n    (with-input-from-file (file path)\n        (doiter (byte file.bytes())    // for-in\n            (incf char_count)\n\n            (defconstant b byte.unwrap())\n            (if (== b 0x0a)\n                (incf line_count))\n\n            (if in_word\n                (if (is_whitespace b)\n                    (setf in_word false))\n                (if (! (is_whitespace b))\n                    (progn\n                        (setf in_word true)\n                        (incf word_count))))))\n\n    (println \"{:>10} {:>10} {:>10} {}\" line_count word_count char_count path)\n);\n\n\n\n\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306f\u6c17\u529b\u304c\u306a\u3044\u306e\u3067\u3001\u5f8c\u3067\u305d\u306e\u6c17\u306b\u306a\u3063\u305f\u3089\u66f8\u304f\n\u7d04\u675f\u306f\u672a\u5b9a\u3002\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u3055\u3089\u3063\u3068\u307f\u308c\u3070\u3001\u3060\u3044\u305f\u3044\u3069\u3093\u306a\u6a5f\u80fd\u304c\u3042\u308b\u304b\u308f\u304b\u308b\u2026\u2026\u306f\u305a\u3002\n\u3068\u308a\u3042\u3048\u305a\u3001\u30b5\u30f3\u30d7\u30eb\u304c\u52d5\u304f\u7a0b\u5ea6\u306e\u6a5f\u80fd\u3057\u304b\u306a\u3044\u3068\u601d\u3063\u3066\u3044\u308c\u3070\u307b\u307c\u6b63\u89e3\u3002\n\n\u4f59\u8ac7\uff08\u500b\u4eba\u7684\u611f\u60f3\uff09\n\u9759\u7684\u578b\u4ed8\u3051\u306eLisp\u3063\u3066\u308f\u308a\u3068\u3044\u3044\u304b\u3082\u3063\u3066\u601d\u3048\u3066\u304d\u305f\u3002\u3002\u3002\n\u4eca\u5ea6\u306fRust\u3067\u9759\u7684\u578b\u4ed8Lisp\u3067\u3082\u4f5c\u3063\u3066\u307f\u3088\u3046\u304b\u306a\u2026\u2026\n## \u6982\u8981\n\n\u30de\u30af\u30ed\u306e\u52c9\u5f37\u304c\u3066\u3089\u3001Rust\u306e\u30b3\u30fc\u30c9\u5185\u3067Lisp\u3063\u307d\u304f\u8a18\u8ff0\u3067\u304d\u308bDSL(?)\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\uff08Lisp\u306b\u9759\u7684\u578b\u304c\u3042\u3063\u305f\u3089\u3069\u3046\u306a\u308b\u306e\u304b\u3001\u3068\u3044\u3046\u306e\u306b\u8208\u5473\u3042\u3063\u305f\u306e\u3082\u3042\u308b\u3002\uff09\n\u4f7f\u3044\u9053\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u308f\u304b\u308a\u307e\u305b\u3093\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u516c\u958b\u3057\u307e\u3057\u305f\u3002\n\n\u826f\u304f\u3082\u60aa\u304f\u3082\u6240\u8a6e\u306fRust\u306e\u30de\u30af\u30ed\u4e0a\u3067\u69cb\u7bc9\u3055\u308c\u305f\u3082\u306e\u306a\u306e\u3067\u3001\u300c\u9759\u7684\u578b\uff06\u6240\u6709\u6a29\u6709\u308a\u300d\u306e\u8a00\u8a9e\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\n## \u4f7f\u3044\u65b9\n\nCargo.toml\u30d5\u30a1\u30a4\u30eb\u306b\u4ee5\u4e0b\u306e\u8a18\u8ff0\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n```Cargo.toml\n[dependencies]\nmacro_lisp=\"0.1.0\"\n```\n\n\u5f8c\u306f\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u5185\u306b\u3001\n\n```rust:\n#[macro_use]\nextern crate macro_lisp;\n```\n\n\u3068\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3067Lisp\u3063\u307d\u3044\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n## \u30b5\u30f3\u30d7\u30eb\n\n\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\u3092\u307f\u308b\u306e\u304c\u624b\u3063\u53d6\u308a\u65e9\u3044\u3068\u601d\u3044\u307e\u3059\u306e\u3067\u3001\u30b5\u30f3\u30d7\u30eb\u3092\u8f09\u305b\u3066\u304a\u304d\u307e\u3059\u3002\nLisp\u3092\u597d\u304d\u3067\u306a\u3044\u65b9\u306f\u6c17\u6301\u3061\u60aa\u304f\u306a\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u6ce8\u610f\u3002\n\n\u3061\u306a\u307f\u306b\u3001Lisp!()\u30de\u30af\u30ed\u5185\u306bLisp\u3063\u307d\u3044\u8a18\u8ff0\u3092\u66f8\u304f\u4ed5\u69d8\u3067\u3059\u3002\n\n### FizzBuzz\n\n```rust:fizzbuzz.rs\n#[macro_use]\nextern crate macro_lisp;\n\nlisp!(defun main() ()\n    (dotimes (count 100)\n        (defconstant num (1+ count))\n        (if (== 0 (% num 3))\n            (if (== 0 (% num 5))\n                (println \"FizzBuzz\")\n                (println \"Fizz\"))\n            (if (== 0 (% num 5))\n                (println \"Buzz\")\n                (println \"{}\" num))))\n);\n```\n\n### Unix\u30e9\u30a4\u30af\u306awc\u30b3\u30de\u30f3\u30c9\n\n```rust:wc.rs\n#[macro_use]\nextern crate macro_lisp;\n\nlisp!(use std::env);\nlisp!(use std::process::exit);\n\nlisp!(defun is_whitespace ((b u8)) bool  // (b u8)\u306fu8\u578b\u306e\u5f15\u6570b\u3092\u3068\u308b\u3068\u3044\u3046\u3053\u3068\u3002bool\u306f\u623b\u308a\u5024\u306e\u578b\u3002\u3000\n    (match b\n        (0x20 | 0x09 | 0x85 | 0x0a | 0x0b | 0x0c | 0x0d => (true))\n        (_ => (false) )) // \u30de\u30af\u30ed\u306e\u9650\u754c\uff08\uff1f\uff09\u3067\u3001\u30ab\u30c3\u30b3\u7121\u3057\u3067true\u3084false\u3068\u66f8\u3051\u308b\u3088\u3046\u306b\u3067\u304d\u306a\u304b\u3063\u305f\u3002\n);\n\nlisp!(defun main () ()\n    (defconstant (args Vec<String>) env::args().collect()) // \u578b\u3092\u6307\u5b9a\u3057\u305f\u5b9a\u6570\u5ba3\u8a00(Rust\u306elet)\n    (if (< (len args) 2)\n        (progn\n            (println \"usage: wc file\")\n            (exit 0)))\n\n    (defvar char_count 0) // Rust\u306elet mut\n    (defvar word_count 0)\n    (defvar line_count 0)\n    (defvar in_word false)\n\n    (defconstant path &args[1])\n    (with-input-from-file (file path)\n        (doiter (byte file.bytes())    // for-in\n            (incf char_count)\n\n            (defconstant b byte.unwrap())\n            (if (== b 0x0a)\n                (incf line_count))\n\n            (if in_word\n                (if (is_whitespace b)\n                    (setf in_word false))\n                (if (! (is_whitespace b))\n                    (progn\n                        (setf in_word true)\n                        (incf word_count))))))\n\n    (println \"{:>10} {:>10} {:>10} {}\" line_count word_count char_count path)\n);\n```\n\n## \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306f\u6c17\u529b\u304c\u306a\u3044\u306e\u3067\u3001\u5f8c\u3067\u305d\u306e\u6c17\u306b\u306a\u3063\u305f\u3089\u66f8\u304f\n\n\u7d04\u675f\u306f\u672a\u5b9a\u3002\n[\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9](https://github.com/JunSuzukiJapan/macro-lisp)\u3092\u3055\u3089\u3063\u3068\u307f\u308c\u3070\u3001\u3060\u3044\u305f\u3044\u3069\u3093\u306a\u6a5f\u80fd\u304c\u3042\u308b\u304b\u308f\u304b\u308b\u2026\u2026\u306f\u305a\u3002\n\n\u3068\u308a\u3042\u3048\u305a\u3001\u30b5\u30f3\u30d7\u30eb\u304c\u52d5\u304f\u7a0b\u5ea6\u306e\u6a5f\u80fd\u3057\u304b\u306a\u3044\u3068\u601d\u3063\u3066\u3044\u308c\u3070\u307b\u307c\u6b63\u89e3\u3002\n\n## \u4f59\u8ac7\uff08\u500b\u4eba\u7684\u611f\u60f3\uff09\n\n\u9759\u7684\u578b\u4ed8\u3051\u306eLisp\u3063\u3066\u308f\u308a\u3068\u3044\u3044\u304b\u3082\u3063\u3066\u601d\u3048\u3066\u304d\u305f\u3002\u3002\u3002\n\u4eca\u5ea6\u306fRust\u3067\u9759\u7684\u578b\u4ed8Lisp\u3067\u3082\u4f5c\u3063\u3066\u307f\u3088\u3046\u304b\u306a\u2026\u2026\n", "tags": ["lisp", "rust"]}