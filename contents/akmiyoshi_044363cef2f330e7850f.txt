{"tags": ["Emacs24.3.1", "emacs-lisp", "Windows", "Linux", "Mac"], "context": " More than 1 year has passed since last update.\n\u7a7a\u524d\u306e\u30b7\u30c0\u63cf\u753b\u30d6\u30fc\u30e0\u5230\u6765\uff01\uff1f(^^;)\n\u3042\u306a\u305f\u3082\u5f97\u610f\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067\u30b7\u30c0\u3092\u63cf\u753b\u3057\u3066\u307f\u3088\u3046\uff01\n\nEmacs Lisp\u7248\u306f\u65e2\u306b\u6295\u7a3f\u6e08\u307f\u3067\u3059\u304c\u3001GNU Emacs \u304c SVG \u8868\u793a\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u5224\u3063\u305f\u306e\u3067\u3001Emacs Lisp + SVG \u7248\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n(\u5c1a\u3001\u30d0\u30b0\u3068\u304b\u3054\u610f\u898b\u3042\u308a\u307e\u3057\u305f\u3089 https://twitter.com/akmiyoshi \u307e\u3067\u304a\u9858\u3044\u3057\u307e\u3059)\n\n\n1. GNU Emacs\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nWindows\u306e\u5834\u5408\u306f\u300cgnupack (cygwn + emacs package)\u300d\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 (SVG \u8868\u793a\u306b\u5bfe\u5fdc\u3057\u305f Emacs \u30d0\u30a4\u30ca\u30ea\u3067\u3059)\n\u3000\u21d2 http://sourceforge.jp/projects/gnupack/\n\u300cemacs-24.3-20130503.exe (\u65e5\u4ed8: 2013-05-03, \u30b5\u30a4\u30ba: 42.5 MB)\u300d\u3068\u3044\u3046\u30ea\u30f3\u30af\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u6700\u65b0\u7248\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\n\u3053\u3061\u3089\u306e\u30ea\u30f3\u30af\u304b\u3089\u76f4\u63a5\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\nemacs-24.3-20130503.exe \u3068\u3044\u3046\u81ea\u5df1\u89e3\u51cd\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3055\u308c\u305f\u3089\u3001\u5b9f\u884c\u3057\u3066\u9069\u5f53\u306a\u5834\u6240\u306b\u89e3\u51cd(\u5c55\u958b)\u3057\u307e\u3059\u3002\n\n\u300cC:\\Users\\root\\Desktop\u300d\u306b\u89e3\u51cd\u3057\u305f\u5834\u5408\u306f\u300cC:\\Users\\root\\Desktop\\emacs-24.3-20130503\\bin\u300d\u306b\u300crunemacs.exe\u300d\u3068\u3044\u3046\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u3053\u308c\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\nrunemacs.exe\u3078\u306e\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u3092\u4f5c\u3063\u3066\u304a\u304f\u3068Emacs\u306e\u8d77\u52d5\u304c\u697d\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002\n\n\n2. \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u6e96\u5099\n\u6587\u672b\u306e\u300csida-svc.el\u300d\u3092\u300c~/sida-svg.el\u300d\u3068\u3057\u3066\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\n3. \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\n\u300cM-x load-file RET ~/sida-svg.el\u300d\u3068\u5165\u529b\u3057\u3066\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\n\n4. \u5b9f\u884c\n\u300cM-x sida RET\u300d\u3068\u5165\u529b\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002\n\u3057\u3070\u3089\u304f\u5f85\u3064\u3068\u3001\u30b7\u30c0\u304c\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\n\u300cC-c C-c\u300d\u3068\u5165\u529b\u3059\u308b\u3068 svg \u306e\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3082\u3046\u4e00\u5ea6\u300cC-c C-c\u300d\u3068\u5165\u529b\u3059\u308b\u3068\u518d\u5ea6\u30a4\u30e1\u30fc\u30b8(\u30b7\u30c0\u306e\u7d75)\u3092\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n5. \u96a0\u3057\u30b3\u30de\u30f3\u30c9\n\u300cC-u M-x sida RET\u300d\u3068\u5165\u529b\u3059\u308b\u3053\u3068\u3067\u3001rect \u3067\u306f\u306a\u304f circle \u3067\u30b7\u30c0\u304c\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\n~/sida.svg \u3092 Internet Explorer \u3084 Google Chrome \u7b49\u3067\u958b\u3044\u3066\u62e1\u5927\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\n\nsida-svc.el\n(require 'cl)\n(require 'eieio)\n\n(defconst *sida-foreground-color* \"green\")\n;(defconst *sida-background-color* \"black\")\n(defconst *sida-background-color* \"rgb(0,0,0)\")\n\n(defun W1x ($x $y) (+ (* 0.836 $x) (* 0.044 $y)))\n(defun W1y ($x $y) (+ (* -0.044 $x) (* 0.836 $y) 0.169))\n(defun W2x ($x $y) (+ (* -0.141 $x) (* 0.302 $y)))\n(defun W2y ($x $y) (+ (* 0.302 $x) (* 0.141 $y) 0.127))\n(defun W3x ($x $y) (- (* 0.141 $x) (* 0.302 $y)))\n(defun W3y ($x $y) (+ (* 0.302 $x) (* 0.141 $y) 0.169))\n(defun W4x ($x $y) 0)\n(defun W4y ($x $y) (* 0.175337 $y))\n\n(defclass <sida> ()\n  ((width  :initarg :width)\n   (height :initarg :height)\n   (bitmap :initarg :bitmap)\n   (circle :initarg :circle :initform nil)\n   (count  :initarg :count  :initform 0)))\n\n(defmethod initialize-instance :after ((this <sida>) &rest $slots)\n  (assert (slot-boundp this 'width))\n  (assert (slot-boundp this 'height))\n  (with-slots (width height bitmap) this\n    (setf bitmap (make-bool-vector (* width height) nil))))\n\n(defmethod !f ((this <sida>) $k $x $y)\n  (with-slots (width height) this\n    (if (> $k 0)\n        (progn\n          (!f this (1- $k) (W1x $x $y) (W1y $x $y))\n          (when (< (random 10) 3) (!f this (1- $k) (W2x $x $y) (W2y $x $y)))\n          (when (< (random 10) 3) (!f this (1- $k) (W3x $x $y) (W3y $x $y)))\n          (when (< (random 10) 3) (!f this (1- $k) (W4x $x $y) (W4y $x $y))))\n      (!plot this\n             (+ (* $x width 0.98) (* width 0.5))\n             (- height (* $y height 0.98))))))\n\n(defmethod !print-start-tag ((this <sida>) $tag $standalone &rest $rest)\n  (when $standalone (princ \"  \" (current-buffer)))\n  (princ \"<\" (current-buffer))\n  (princ $tag (current-buffer))\n  (princ \" \" (current-buffer))\n  (loop\n   with $key with $val\n   for $sep = \"\" then \" \"\n   for $top on $rest\n   by #'cddr\n   do\n   (setf $key (nth 0 $top))\n   (setf $val (nth 1 $top))\n   (when (symbolp $key) (setf $key (symbol-name $key)))\n   (when (string-match-p \"^:\" $key) (setf $key (substring $key 1)))\n   (princ $sep (current-buffer))\n   (princ $key (current-buffer))\n   (princ \"=\\\"\" (current-buffer))\n   (princ $val (current-buffer))\n   (princ \"\\\"\" (current-buffer)))\n  (if $standalone\n      (princ \" />\" (current-buffer))\n    (princ \" >\" (current-buffer)))\n  (princ \"\\n\" (current-buffer)))\n\n(defmethod !print-end-tag ((this <sida>) $tag)\n  (princ \"</\" (current-buffer))\n  (princ $tag (current-buffer))\n  (princ \">\\n\" (current-buffer)))\n\n\n(defmethod !plot ((this <sida>) $x $y)\n  (with-slots (width height bitmap circle count) this\n    (let (($x (truncate $x))\n          ($y (truncate $y)))\n      (cond\n       ((< $x 0) nil)\n       ((>= $x width) nil)\n       ((< $y 0) nil)\n       ((>= $y height) nil)\n       (t (let (($index (+ (* width $y) $x)))\n            (when (and (>= $index 0) (< $index (length bitmap)))\n              (unless (aref bitmap $index)\n                (aset bitmap $index t)\n                (if circle\n                    (!print-start-tag\n                     this \"circle\" t\n                     :cx $x :cy $y :r 0.5\n                     :style (format \"fill:%s\" *sida-foreground-color*))\n                  (!print-start-tag\n                   this \"rect\" t :x $x :y $y :width 1.0 :height 1.0\n                   :style (format \"fill:%s\" *sida-foreground-color*)))\n                (setf count (1+ count))\n                (when (zerop (% count 1000)) (sit-for 0))\n                ))))))))\n\n(defun sida ($arg)\n  (interactive \"P\")\n  (let (($sida (make-instance <sida> :width 500 :height 500)))\n    (with-slots (width height circle) $sida\n      (setf circle $arg)\n      (ignore-errors (kill-buffer \"sida.svg\"))\n      (switch-to-buffer \"sida.svg\")\n      (!print-start-tag $sida \"svg\" nil\n                        :xmlns \"http://www.w3.org/2000/svg\"\n                        :version \"1.1\"\n                        :width width\n                        :height height)\n      (!print-start-tag $sida \"rect\" t\n                        :x 0\n                        :y 0\n                        :width width\n                        :height height\n                        :style (format \"fill:%s\" *sida-background-color*))\n      (sit-for 1.5)\n      (!f $sida 20 0 0)\n      (!print-end-tag $sida \"svg\")\n      (sit-for 1.5)\n      (write-file \"~/sida.svg\")\n      (image-mode))))\n\n\n> \u7a7a\u524d\u306e\u30b7\u30c0\u63cf\u753b\u30d6\u30fc\u30e0\u5230\u6765\uff01\uff1f(^^;)\n> \u3042\u306a\u305f\u3082\u5f97\u610f\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067\u30b7\u30c0\u3092\u63cf\u753b\u3057\u3066\u307f\u3088\u3046\uff01\n\n[Emacs Lisp\u7248](http://qiita.com/akmiyoshi/items/ff4df934a5a89aaafbcb)\u306f\u65e2\u306b\u6295\u7a3f\u6e08\u307f\u3067\u3059\u304c\u3001GNU Emacs \u304c SVG \u8868\u793a\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u5224\u3063\u305f\u306e\u3067\u3001Emacs Lisp + SVG \u7248\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n(\u5c1a\u3001\u30d0\u30b0\u3068\u304b\u3054\u610f\u898b\u3042\u308a\u307e\u3057\u305f\u3089 https://twitter.com/akmiyoshi \u307e\u3067\u304a\u9858\u3044\u3057\u307e\u3059)\n\n![2014-0611-2134.png](https://qiita-image-store.s3.amazonaws.com/0/32879/1b29dbc7-ace2-43ec-8af8-dc77183025b9.png)\n\n#1. GNU Emacs\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nWindows\u306e\u5834\u5408\u306f\u300cgnupack (cygwn + emacs package)\u300d\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 **(SVG \u8868\u793a\u306b\u5bfe\u5fdc\u3057\u305f Emacs \u30d0\u30a4\u30ca\u30ea\u3067\u3059)**\n\u3000\u21d2 http://sourceforge.jp/projects/gnupack/\n\u300cemacs-24.3-20130503.exe (\u65e5\u4ed8: 2013-05-03, \u30b5\u30a4\u30ba: 42.5 MB)\u300d\u3068\u3044\u3046\u30ea\u30f3\u30af\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u6700\u65b0\u7248\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\n[\u3053\u3061\u3089\u306e\u30ea\u30f3\u30af](http://sourceforge.jp/projects/gnupack/downloads/46675/emacs-24.3-20130503.exe/)\u304b\u3089\u76f4\u63a5\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\nemacs-24.3-20130503.exe \u3068\u3044\u3046\u81ea\u5df1\u89e3\u51cd\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3055\u308c\u305f\u3089\u3001\u5b9f\u884c\u3057\u3066\u9069\u5f53\u306a\u5834\u6240\u306b\u89e3\u51cd(\u5c55\u958b)\u3057\u307e\u3059\u3002\n\n* \u300cC:\\Users\\root\\Desktop\u300d\u306b\u89e3\u51cd\u3057\u305f\u5834\u5408\u306f\u300cC:\\Users\\root\\Desktop\\emacs-24.3-20130503\\bin\u300d\u306b\u300crunemacs.exe\u300d\u3068\u3044\u3046\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u3053\u308c\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n* runemacs.exe\u3078\u306e\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u3092\u4f5c\u3063\u3066\u304a\u304f\u3068Emacs\u306e\u8d77\u52d5\u304c\u697d\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002\n\n#2. \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u6e96\u5099\n\u6587\u672b\u306e\u300csida-svc.el\u300d\u3092\u300c~/sida-svg.el\u300d\u3068\u3057\u3066\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\n#3. \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\n\u300cM-x load-file RET ~/sida-svg.el\u300d\u3068\u5165\u529b\u3057\u3066\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\n\n#4. \u5b9f\u884c\n\u300cM-x sida RET\u300d\u3068\u5165\u529b\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002\n\u3057\u3070\u3089\u304f\u5f85\u3064\u3068\u3001\u30b7\u30c0\u304c\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\n\u300cC-c C-c\u300d\u3068\u5165\u529b\u3059\u308b\u3068 svg \u306e\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3082\u3046\u4e00\u5ea6\u300cC-c C-c\u300d\u3068\u5165\u529b\u3059\u308b\u3068\u518d\u5ea6\u30a4\u30e1\u30fc\u30b8(\u30b7\u30c0\u306e\u7d75)\u3092\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n#5. \u96a0\u3057\u30b3\u30de\u30f3\u30c9\n\u300cC-u M-x sida RET\u300d\u3068\u5165\u529b\u3059\u308b\u3053\u3068\u3067\u3001rect \u3067\u306f\u306a\u304f circle \u3067\u30b7\u30c0\u304c\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\n~/sida.svg \u3092 Internet Explorer \u3084 Google Chrome \u7b49\u3067\u958b\u3044\u3066\u62e1\u5927\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n![2014-0611-2139.png](https://qiita-image-store.s3.amazonaws.com/0/32879/7125e15d-e1ab-947a-5cc4-48ed9aa56dca.png)\n\n# \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\n\n```el:sida-svc.el\n(require 'cl)\n(require 'eieio)\n\n(defconst *sida-foreground-color* \"green\")\n;(defconst *sida-background-color* \"black\")\n(defconst *sida-background-color* \"rgb(0,0,0)\")\n\n(defun W1x ($x $y) (+ (* 0.836 $x) (* 0.044 $y)))\n(defun W1y ($x $y) (+ (* -0.044 $x) (* 0.836 $y) 0.169))\n(defun W2x ($x $y) (+ (* -0.141 $x) (* 0.302 $y)))\n(defun W2y ($x $y) (+ (* 0.302 $x) (* 0.141 $y) 0.127))\n(defun W3x ($x $y) (- (* 0.141 $x) (* 0.302 $y)))\n(defun W3y ($x $y) (+ (* 0.302 $x) (* 0.141 $y) 0.169))\n(defun W4x ($x $y) 0)\n(defun W4y ($x $y) (* 0.175337 $y))\n\n(defclass <sida> ()\n  ((width  :initarg :width)\n   (height :initarg :height)\n   (bitmap :initarg :bitmap)\n   (circle :initarg :circle :initform nil)\n   (count  :initarg :count  :initform 0)))\n\n(defmethod initialize-instance :after ((this <sida>) &rest $slots)\n  (assert (slot-boundp this 'width))\n  (assert (slot-boundp this 'height))\n  (with-slots (width height bitmap) this\n    (setf bitmap (make-bool-vector (* width height) nil))))\n\n(defmethod !f ((this <sida>) $k $x $y)\n  (with-slots (width height) this\n    (if (> $k 0)\n        (progn\n          (!f this (1- $k) (W1x $x $y) (W1y $x $y))\n          (when (< (random 10) 3) (!f this (1- $k) (W2x $x $y) (W2y $x $y)))\n          (when (< (random 10) 3) (!f this (1- $k) (W3x $x $y) (W3y $x $y)))\n          (when (< (random 10) 3) (!f this (1- $k) (W4x $x $y) (W4y $x $y))))\n      (!plot this\n             (+ (* $x width 0.98) (* width 0.5))\n             (- height (* $y height 0.98))))))\n\n(defmethod !print-start-tag ((this <sida>) $tag $standalone &rest $rest)\n  (when $standalone (princ \"  \" (current-buffer)))\n  (princ \"<\" (current-buffer))\n  (princ $tag (current-buffer))\n  (princ \" \" (current-buffer))\n  (loop\n   with $key with $val\n   for $sep = \"\" then \" \"\n   for $top on $rest\n   by #'cddr\n   do\n   (setf $key (nth 0 $top))\n   (setf $val (nth 1 $top))\n   (when (symbolp $key) (setf $key (symbol-name $key)))\n   (when (string-match-p \"^:\" $key) (setf $key (substring $key 1)))\n   (princ $sep (current-buffer))\n   (princ $key (current-buffer))\n   (princ \"=\\\"\" (current-buffer))\n   (princ $val (current-buffer))\n   (princ \"\\\"\" (current-buffer)))\n  (if $standalone\n      (princ \" />\" (current-buffer))\n    (princ \" >\" (current-buffer)))\n  (princ \"\\n\" (current-buffer)))\n\n(defmethod !print-end-tag ((this <sida>) $tag)\n  (princ \"</\" (current-buffer))\n  (princ $tag (current-buffer))\n  (princ \">\\n\" (current-buffer)))\n\n\n(defmethod !plot ((this <sida>) $x $y)\n  (with-slots (width height bitmap circle count) this\n    (let (($x (truncate $x))\n          ($y (truncate $y)))\n      (cond\n       ((< $x 0) nil)\n       ((>= $x width) nil)\n       ((< $y 0) nil)\n       ((>= $y height) nil)\n       (t (let (($index (+ (* width $y) $x)))\n            (when (and (>= $index 0) (< $index (length bitmap)))\n              (unless (aref bitmap $index)\n                (aset bitmap $index t)\n                (if circle\n                    (!print-start-tag\n                     this \"circle\" t\n                     :cx $x :cy $y :r 0.5\n                     :style (format \"fill:%s\" *sida-foreground-color*))\n                  (!print-start-tag\n                   this \"rect\" t :x $x :y $y :width 1.0 :height 1.0\n                   :style (format \"fill:%s\" *sida-foreground-color*)))\n                (setf count (1+ count))\n                (when (zerop (% count 1000)) (sit-for 0))\n                ))))))))\n\n(defun sida ($arg)\n  (interactive \"P\")\n  (let (($sida (make-instance <sida> :width 500 :height 500)))\n    (with-slots (width height circle) $sida\n      (setf circle $arg)\n      (ignore-errors (kill-buffer \"sida.svg\"))\n      (switch-to-buffer \"sida.svg\")\n      (!print-start-tag $sida \"svg\" nil\n                        :xmlns \"http://www.w3.org/2000/svg\"\n                        :version \"1.1\"\n                        :width width\n                        :height height)\n      (!print-start-tag $sida \"rect\" t\n                        :x 0\n                        :y 0\n                        :width width\n                        :height height\n                        :style (format \"fill:%s\" *sida-background-color*))\n      (sit-for 1.5)\n      (!f $sida 20 0 0)\n      (!print-end-tag $sida \"svg\")\n      (sit-for 1.5)\n      (write-file \"~/sida.svg\")\n      (image-mode))))\n```\n"}