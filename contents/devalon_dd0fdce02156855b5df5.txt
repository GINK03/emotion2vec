{"context": "\n\nDocker\nDocker \u306e\u30e1\u30ea\u30c3\u30c8\u3001\u30c7\u30e1\u30ea\u30c3\u30c8\u306b\u3064\u3044\u3066\u306f\u3053\u306e\u8a18\u4e8b\u304c\u8a73\u3057\u3044\u3002\n\u500b\u4eba\u7684\u306b\u5927\u4e8b\u304b\u306a\u3068\u601d\u3046Pros\u306f\u4ee5\u4e0b\u306e\u3075\u305f\u3064\u3002\n\n\u8907\u6570\u4eba\u3067\u958b\u767a\u3059\u308b\u969b\u306b\u3001\u74b0\u5883\u306e\u5dee\u304c\u751f\u307e\u308c\u306a\u3044\u3002\n\n\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u4f9d\u5b58\u3057\u305f\u958b\u767a\u3092\u3057\u3066\u308b\u5834\u5408\u306a\u3069\u306b\u3001\u540c\u4e00\u306e\u74b0\u5883\u3067\u3042\u308b\u4fdd\u8a3c\u304c\u3067\u304d\u308b\u3002\n\u300cIt works on my machine!!\u300d\u3068\u304b\u8a00\u3048\u306a\u304f\u306a\u308b\u3002\n\n\u30b3\u30f3\u30c6\u30ca\u3092\u6368\u3066\u308b\u30fb\u518d\u751f\u6210\u3059\u308b\u306e\u304c\u5bb9\u6613\u3002\n\n\u305f\u3068\u3048\u3070\u3001Node.js\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u5909\u3048\u305f\u3044\u5834\u5408\u3001Dockerfile\u306eimage\u3092\u66f8\u304d\u63db\u3048\u308b\u3060\u3051\u3067\u51fa\u6765\u308b\u3002\n\u305f\u3060Docker\u81ea\u4f53\u3001\u8077\u4eba\u6280\u3068\u304b\u30af\u30bb\u304c\u591a\u304b\u3063\u305f\u308a\u3082\u3059\u308b\u306e\u3067Vagrant\u3067\u3044\u3044\u3058\u3083\u3093\u3068\u306a\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u304c\u3002\u3002\u3002\n\n\u3053\u3053\u3067\u3084\u308b\u3053\u3068\n\u3053\u306e\u8a18\u4e8b\u3067\u306fExpress4\u3067node.js\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3066Hello World\u3092\u8868\u793a\u3059\u308bnode.js\u30b3\u30f3\u30c6\u30ca\n\u30dd\u30fc\u30c880\u756a\u3092node.js\u306e3000\u756a\u306b\u30dd\u30fc\u30c8\u30d5\u30a9\u30ef\u30fc\u30c9\u3059\u308bnginx\u30b3\u30f3\u30c6\u30ca\u3001\n\u4f7f\u308f\u306a\u3044\u304b\u3082\u3067\u3059\u304c\u3001node.js\u30b3\u30f3\u30c6\u30ca\u304b\u3089\u63a5\u7d9a\u3059\u308bmysql\u30b3\u30f3\u30c6\u30ca\u3092\u4f5c\u6210\u3057\u3066\u9023\u643a\u3055\u305b\u307e\u3059\u3002\n\n\u74b0\u5883\n\u6700\u8fd1Docker for Mac\u304c\u51fa\u305f\u306e\u3067\u3001\u3064\u3044\u306bVirtualBox\u304c\u5fc5\u8981\u306a\u304f\u306a\u308a\u307e\u3057\u305f  \n\nMacbook\nDocker for Mac\nDocker Compose\nNode.js v6.9 \u203b\nExpress 4\nMySQL 5.6\n\n\u203b\u30ed\u30fc\u30ab\u30eb\u306b\u3082node.js\u304c\u5fc5\u8981\u3067\u3059\u3002\n\nexpress-generator \u3067\u96db\u5f62\u4f5c\u6210\n$ npm install -g express \n$ npm install -g express-generator\n\n$ express hello-world                                                                                                                                                                                  \n\n  warning: the default view engine will not be jade in future releases\n  warning: use `--view=jade' or `--help' for additional options\n\n\n   create : hello-world\n   create : hello-world/package.json\n   create : hello-world/app.js\n   create : hello-world/public\n   create : hello-world/routes\n   create : hello-world/routes/index.js\n   create : hello-world/routes/users.js\n   create : hello-world/public/images\n   create : hello-world/views\n   create : hello-world/views/index.jade\n   create : hello-world/views/layout.jade\n   create : hello-world/views/error.jade\n   create : hello-world/public/javascripts\n   create : hello-world/public/stylesheets\n   create : hello-world/public/stylesheets/style.css\n   create : hello-world/bin\n   create : hello-world/bin/www\n\n   install dependencies:\n     $ cd hello-world && npm install\n\n   run the app:\n     $ DEBUG=hello-world:* npm start\n\n$ cd hello-world/\n\n\ndocker-compose.yml\u306e\u4f5c\u6210\nnode.js\u306e\u30a4\u30e1\u30fc\u30b8\u306f\u516c\u5f0f\u30ea\u30dd\u30b8\u30c8\u30ea\u306e6.9-alpine\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u203b alpine\u306f\u8efd\u91cf\u5316\u3055\u308c\u305fLinux\u30a4\u30e1\u30fc\u30b8\u3067\u3059\u3002\u4f8b\u3048\u3070vim\u3068\u304b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u307e\u305b\u3093\u3002\n\u57fa\u672c\u7684\u306b\u5fc5\u8981\u304c\u306a\u3051\u308c\u3070alpine\u3067\u9032\u3081\u307e\u3059\u3002\ndocker-compose.yml\nversion: '2'\nservices:\n  nginx:\n    image: nginx:alpine\n    container_name: nginx\n    ports:\n      - \"80:80\"\n    volumes:\n      - \"./conf.d:/etc/nginx/conf.d\"\n    links:\n      - node_express\n\n  node_express:\n    image: node:6.9-alpine\n    container_name: node_express\n    hostname: node_express\n    volumes:\n      - \".:/src\"\n    working_dir: /src\n    command: [sh, -c, npm install && npm start]\n    ports:\n      - \"3000:3000\"\n    links:\n      - mysql\n\n  mysql:\n    image: mysql:5.6\n    container_name: mysql56\n    hostname: mysql\n    command: mysqld --character-set-server=utf8 --collation-server=utf8_unicode_ci\n    ports:\n      - \"3306:3306\"\n    environment:\n      - \"MYSQL_ROOT_PASSWORD=root\"\n      - \"MYSQL_DATABASE=sample\"\n\n/conf.d/nodejs.conf\n80\u756a\u304b\u30893000\u756a\u30dd\u30fc\u30c8\u30d5\u30a9\u30ef\u30fc\u30c7\u30a3\u30f3\u30b0\nserver {\n    listen 80;\n    server_name _;\n    client_max_body_size 10M;\n    location / {\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-NginX-Proxy true;\n        proxy_pass http://node_express:3000/;\n    }\n}\n\nproxy_pass http://node_express:3000/;\u306fdocker-compose.yml\u306ehostname\u3092\u6307\u5b9a\u3057\u3066\u307e\u3059\u3002\n\u4e00\u65e6\u3053\u308c\u3067\u52d5\u304f\u3068\u601d\u3046\u306e\u3067\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\n$ docker-compose -p hello_project up -d --build\n\nhttp://localhost:3000\u304bhttp://localhost\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068express\u306e\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u308b\u306f\u305a\u3067\u3059\u3002\n\ndocker-compose\u3092\u6b62\u3081\u307e\u3059\u3002\n$ docker-compose -p hello_project kill\n\n\nMakefile\u306e\u4f5c\u6210\ndocker-compose\u3067\u3088\u304f\u4f7f\u3046\u30b3\u30de\u30f3\u30c9\u306fMakefile\u306b\u307e\u3068\u3081\u3066\u3057\u307e\u3044\u307e\u3057\u3087\u3046\u3002\nMakefile\nPROJECT = hello_project\n\n.PHONY: start\nstart: \n    docker-compose -p $(PROJECT) up -d --build\n\n.PHONY: logs\nlogs:\n    docker-compose -p $(PROJECT) logs\n\n.PHONY: restart\nrestart:\n    docker-compose -p $(PROJECT) kill && \\\n    docker-compose -p $(PROJECT) rm -f && \\\n    docker-compose -p $(PROJECT) up -d --build\n\n.PHONY: kill\nkill: \n    docker-compose -p $(PROJECT) kill\n\n.PHONY: ps\nps: \n    docker-compose -p $(PROJECT) ps\n\n\nmake start,make restart,make logs,make kill,make ps\u3067docker-compose\u3092\u64cd\u4f5c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n$ make start\ndocker-compose -p hello_project up -d --build\nCreating mysql56\nCreating node_express\nCreating nginx\n\n$ make ps\ndocker-compose -p hello_project ps\n    Name                  Command               State              Ports\n-----------------------------------------------------------------------------------\nmysql56        docker-entrypoint.sh mysql ...   Up      0.0.0.0:3306->3306/tcp\nnginx          nginx -g daemon off;             Up      443/tcp, 0.0.0.0:80->80/tcp\nnode_express   sh -c npm install && npm start   Up      0.0.0.0:3000->3000/tcp\n\nHost\u304b\u3089MySQL\u30b3\u30f3\u30c6\u30ca\u306b\u63a5\u7d9a\u3057\u3066\u307f\u308b\u3002\n$ mysql -h 0.0.0.0 -uroot -proot\n\n$ make kill\ndocker-compose -p hello_project kill\nKilling nginx ... done\nKilling node_express ... done\nKilling mysql56 ... done\n\n\u30bd\u30fc\u30b9\nEnjoy your docker life !!\n# Docker\n\nDocker \u306e\u30e1\u30ea\u30c3\u30c8\u3001\u30c7\u30e1\u30ea\u30c3\u30c8\u306b\u3064\u3044\u3066\u306f[\u3053\u306e\u8a18\u4e8b](http://qiita.com/minodisk/items/5ffd20588b995523756f)\u304c\u8a73\u3057\u3044\u3002\n\u500b\u4eba\u7684\u306b\u5927\u4e8b\u304b\u306a\u3068\u601d\u3046Pros\u306f\u4ee5\u4e0b\u306e\u3075\u305f\u3064\u3002\n\n> \u8907\u6570\u4eba\u3067\u958b\u767a\u3059\u308b\u969b\u306b\u3001\u74b0\u5883\u306e\u5dee\u304c\u751f\u307e\u308c\u306a\u3044\u3002\n\n\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u4f9d\u5b58\u3057\u305f\u958b\u767a\u3092\u3057\u3066\u308b\u5834\u5408\u306a\u3069\u306b\u3001\u540c\u4e00\u306e\u74b0\u5883\u3067\u3042\u308b\u4fdd\u8a3c\u304c\u3067\u304d\u308b\u3002\n\u300cIt works on my machine!!\u300d\u3068\u304b\u8a00\u3048\u306a\u304f\u306a\u308b\u3002\n> \u30b3\u30f3\u30c6\u30ca\u3092\u6368\u3066\u308b\u30fb\u518d\u751f\u6210\u3059\u308b\u306e\u304c\u5bb9\u6613\u3002\n\n\u305f\u3068\u3048\u3070\u3001`Node.js`\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u5909\u3048\u305f\u3044\u5834\u5408\u3001`Dockerfile`\u306e`image`\u3092\u66f8\u304d\u63db\u3048\u308b\u3060\u3051\u3067\u51fa\u6765\u308b\u3002\n\u305f\u3060`Docker`\u81ea\u4f53\u3001\u8077\u4eba\u6280\u3068\u304b\u30af\u30bb\u304c\u591a\u304b\u3063\u305f\u308a\u3082\u3059\u308b\u306e\u3067`Vagrant`\u3067\u3044\u3044\u3058\u3083\u3093\u3068\u306a\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u304c\u3002\u3002\u3002\n\n## \u3053\u3053\u3067\u3084\u308b\u3053\u3068\n\u3053\u306e\u8a18\u4e8b\u3067\u306f`Express4`\u3067`node.js`\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3066`Hello World`\u3092\u8868\u793a\u3059\u308b`node.js`\u30b3\u30f3\u30c6\u30ca\n\u30dd\u30fc\u30c880\u756a\u3092`node.js`\u306e3000\u756a\u306b\u30dd\u30fc\u30c8\u30d5\u30a9\u30ef\u30fc\u30c9\u3059\u308b`nginx`\u30b3\u30f3\u30c6\u30ca\u3001\n\u4f7f\u308f\u306a\u3044\u304b\u3082\u3067\u3059\u304c\u3001`node.js`\u30b3\u30f3\u30c6\u30ca\u304b\u3089\u63a5\u7d9a\u3059\u308b`mysql`\u30b3\u30f3\u30c6\u30ca\u3092\u4f5c\u6210\u3057\u3066\u9023\u643a\u3055\u305b\u307e\u3059\u3002\n\n## \u74b0\u5883\n\u6700\u8fd1`Docker for Mac`\u304c\u51fa\u305f\u306e\u3067\u3001\u3064\u3044\u306bVirtualBox\u304c\u5fc5\u8981\u306a\u304f\u306a\u308a\u307e\u3057\u305f :tada: \n\n- Macbook\n- [Docker for Mac](https://docs.docker.com/docker-for-mac/)\n- [Docker Compose](https://docs.docker.com/compose/install/)\n- Node.js v6.9 \u203b\n- Express 4\n- MySQL 5.6\n\n\u203b\u30ed\u30fc\u30ab\u30eb\u306b\u3082node.js\u304c\u5fc5\u8981\u3067\u3059\u3002\n### express-generator \u3067\u96db\u5f62\u4f5c\u6210\n\n```bash\n$ npm install -g express \n$ npm install -g express-generator\n```\n\n```bash\n$ express hello-world                                                                                                                                                                                  \n\n  warning: the default view engine will not be jade in future releases\n  warning: use `--view=jade' or `--help' for additional options\n\n\n   create : hello-world\n   create : hello-world/package.json\n   create : hello-world/app.js\n   create : hello-world/public\n   create : hello-world/routes\n   create : hello-world/routes/index.js\n   create : hello-world/routes/users.js\n   create : hello-world/public/images\n   create : hello-world/views\n   create : hello-world/views/index.jade\n   create : hello-world/views/layout.jade\n   create : hello-world/views/error.jade\n   create : hello-world/public/javascripts\n   create : hello-world/public/stylesheets\n   create : hello-world/public/stylesheets/style.css\n   create : hello-world/bin\n   create : hello-world/bin/www\n\n   install dependencies:\n     $ cd hello-world && npm install\n\n   run the app:\n     $ DEBUG=hello-world:* npm start\n```\n\n```bash\n$ cd hello-world/\n```\n\n### docker-compose.yml\u306e\u4f5c\u6210\n`node.js`\u306e\u30a4\u30e1\u30fc\u30b8\u306f[\u516c\u5f0f\u30ea\u30dd\u30b8\u30c8\u30ea](https://hub.docker.com/_/node/)\u306e`6.9-alpine`\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u203b alpine\u306f\u8efd\u91cf\u5316\u3055\u308c\u305fLinux\u30a4\u30e1\u30fc\u30b8\u3067\u3059\u3002\u4f8b\u3048\u3070`vim`\u3068\u304b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u307e\u305b\u3093\u3002\n\u57fa\u672c\u7684\u306b\u5fc5\u8981\u304c\u306a\u3051\u308c\u3070`alpine`\u3067\u9032\u3081\u307e\u3059\u3002\n\n**docker-compose.yml**\n\n```\nversion: '2'\nservices:\n  nginx:\n    image: nginx:alpine\n    container_name: nginx\n    ports:\n      - \"80:80\"\n    volumes:\n      - \"./conf.d:/etc/nginx/conf.d\"\n    links:\n      - node_express\n\n  node_express:\n    image: node:6.9-alpine\n    container_name: node_express\n    hostname: node_express\n    volumes:\n      - \".:/src\"\n    working_dir: /src\n    command: [sh, -c, npm install && npm start]\n    ports:\n      - \"3000:3000\"\n    links:\n      - mysql\n\n  mysql:\n    image: mysql:5.6\n    container_name: mysql56\n    hostname: mysql\n    command: mysqld --character-set-server=utf8 --collation-server=utf8_unicode_ci\n    ports:\n      - \"3306:3306\"\n    environment:\n      - \"MYSQL_ROOT_PASSWORD=root\"\n      - \"MYSQL_DATABASE=sample\"\n```\n\n**/conf.d/nodejs.conf**\n80\u756a\u304b\u30893000\u756a\u30dd\u30fc\u30c8\u30d5\u30a9\u30ef\u30fc\u30c7\u30a3\u30f3\u30b0\n\n```\nserver {\n    listen 80;\n    server_name _;\n    client_max_body_size 10M;\n    location / {\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-NginX-Proxy true;\n        proxy_pass http://node_express:3000/;\n    }\n}\n```\n\n`proxy_pass http://node_express:3000/;`\u306f`docker-compose.yml`\u306e`hostname`\u3092\u6307\u5b9a\u3057\u3066\u307e\u3059\u3002\n\n\u4e00\u65e6\u3053\u308c\u3067\u52d5\u304f\u3068\u601d\u3046\u306e\u3067\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\n\n```bash\n$ docker-compose -p hello_project up -d --build\n```\n\n[http://localhost:3000](http://localhost:3000)\u304b[http://localhost](http://localhost)\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068express\u306e\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u308b\u306f\u305a\u3067\u3059\u3002\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-12-12 16.03.42.png](https://qiita-image-store.s3.amazonaws.com/0/87900/954502a9-3cfc-91f4-9933-4ea7e1be742f.png \"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-12-12 16.03.42.png\")\n\n`docker-compose`\u3092\u6b62\u3081\u307e\u3059\u3002\n\n```bash\n$ docker-compose -p hello_project kill\n```\n\n### Makefile\u306e\u4f5c\u6210\n`docker-compose`\u3067\u3088\u304f\u4f7f\u3046\u30b3\u30de\u30f3\u30c9\u306f`Makefile`\u306b\u307e\u3068\u3081\u3066\u3057\u307e\u3044\u307e\u3057\u3087\u3046\u3002\n\n**Makefile**\n\n```basemake\nPROJECT = hello_project\n\n.PHONY: start\nstart: \n\tdocker-compose -p $(PROJECT) up -d --build\n\t\n.PHONY: logs\nlogs:\n\tdocker-compose -p $(PROJECT) logs\n\t\n.PHONY: restart\nrestart:\n\tdocker-compose -p $(PROJECT) kill && \\\n\tdocker-compose -p $(PROJECT) rm -f && \\\n\tdocker-compose -p $(PROJECT) up -d --build\n\n.PHONY: kill\nkill: \n\tdocker-compose -p $(PROJECT) kill\n\n.PHONY: ps\nps: \n\tdocker-compose -p $(PROJECT) ps\n\n```\n\n`make start`,`make restart`,`make logs`,`make kill`,`make ps`\u3067`docker-compose`\u3092\u64cd\u4f5c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n```bash\n$ make start\ndocker-compose -p hello_project up -d --build\nCreating mysql56\nCreating node_express\nCreating nginx\n```\n\n```bash\n$ make ps\ndocker-compose -p hello_project ps\n    Name                  Command               State              Ports\n-----------------------------------------------------------------------------------\nmysql56        docker-entrypoint.sh mysql ...   Up      0.0.0.0:3306->3306/tcp\nnginx          nginx -g daemon off;             Up      443/tcp, 0.0.0.0:80->80/tcp\nnode_express   sh -c npm install && npm start   Up      0.0.0.0:3000->3000/tcp\n```\n\nHost\u304b\u3089MySQL\u30b3\u30f3\u30c6\u30ca\u306b\u63a5\u7d9a\u3057\u3066\u307f\u308b\u3002\n\n```bash\n$ mysql -h 0.0.0.0 -uroot -proot\n```\n\n```bash\n$ make kill\ndocker-compose -p hello_project kill\nKilling nginx ... done\nKilling node_express ... done\nKilling mysql56 ... done\n```\n\n[\u30bd\u30fc\u30b9](https://github.com/ichiwa/docker-compose-express-hello)\n\nEnjoy your docker life !!\n", "tags": ["docker-compose", "Express", "Node.js", "docker", "\u958b\u767a\u74b0\u5883"]}