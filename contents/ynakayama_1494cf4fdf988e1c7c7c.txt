{"context": " More than 1 year has passed since last update.\u524d\u56de\u3001\u524d\u3005\u56de\u306b\u5f15\u304d\u7d9a\u304d Hadoop \u306b\u3088\u308b\u5168\u6570\u8d70\u67fb\u306e\u8a71\u3067\u3059\u3002\n\nHadoop Streaming \u30b8\u30e7\u30d6\u306e\u9023\u7d50\u3092\u3059\u308b\nMapReduce \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306f\u524d\u8ff0\u3057\u305f\u3088\u3046\u306b\u5358\u72ec\u3067\u8907\u96d1\u306a\u8a08\u7b97\u3092\u3059\u308b\u306e\u306b\u5411\u3044\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u305f\u3068\u3048\u3070 TF-IDF \u5024\u306e\u7b97\u51fa\u306e\u3088\u3046\u306a\u5c11\u3057\u96e3\u3057\u3044\u6570\u5f0f\u3092\u89e3\u304d\u305f\u3044\u5834\u5408\u3001\u30b8\u30e7\u30d6\u3092 2 \u3064\u3082 3 \u3064\u3082\u9023\u7d50\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u308c\u306f\u524d\u56de\u7d39\u4ecb\u3057\u305f\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u5185\u90e8\u3067\u3082\u305d\u3046\u3057\u3066\u3044\u308b\u901a\u308a\u3001\u51fa\u529b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b _SUCCESS \u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3067\u5224\u65ad\u3092\u3059\u308b\u306e\u304c\u3072\u3068\u3064\u306e\u65b9\u6cd5\u3067\u3059\u3002\nhadoop fs -get $HDFS_OUT/_SUCCESS>>$JOBLOG 2>&1\ntest -f _SUCCESS && \u6210\u529f\u6642\u51e6\u7406\n\n\u30b8\u30e7\u30d6\u306e\u76f4\u5217\u5b9f\u884c\u3068\u3057\u3066\u306f\u5358\u7d14\u306b\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u9023\u7d9a\u7684\u306b\u5b9f\u884c\u3059\u308c\u3070\u826f\u3044\u3067\u3057\u3087\u3046\u3002\n$JOB1/bin/run>>$JOB1/log/job.log 2>&1\n$JOB2/bin/run>>$JOB2/log/job.log 2>&1\n$JOB3/bin/run>>$JOB3/log/job.log 2>&1\n\n\u3053\u306e\u3068\u304d JOB1 \u306e\u51fa\u529b\u3068\u306a\u308b HDFS \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092 JOB2 \u306e\u5165\u529b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u3059\u308b\u3088\u3046\u306b\u3059\u308c\u3070\u30c7\u30fc\u30bf\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nHadoop Streaming \u3067\u5916\u90e8\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\n\u5916\u90e8\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307f\u305f\u3044\u5834\u5408\u306f\u5b9f\u884c\u6642\u306e -file \u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u53ef\u80fd\u3067\u3059\u3002\n-file EXTERNAL_JOB/log/result.log\n\n\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u306f script/run \u3092\u7de8\u96c6\u3059\u308c\u3070 OK \u3067\u3059\u3002\n-file \u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306f\u6b21\u306e\u3088\u3046\u306b\u30b3\u30fc\u30c9\u5185\u3067\u666e\u901a\u306b\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n# -file \u306b\u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u76f4\u63a5\u8a18\u8ff0\u3059\u308b\n@external_file = \"result.log\"\n\ndef read_from_external\n  # open \u3067\u305d\u306e\u307e\u307e\u958b\u304f\u3053\u3068\u304c\u3067\u304d\u308b\n  open(@external_file) do |file|\n    file.each do |line|\n      # \u5168\u884c\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u306b\u683c\u7d0d\u3057\u3001\u3042\u3068\u3067\u4f7f\u3046\n      @external_data << line\n    end\n  end\nend\n\n-file \u306b\u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306f\u305d\u306e\u307e\u307e\u5b9f\u884c\u30ce\u30fc\u30c9\u4e0a\u306e\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u5c55\u958b\u3055\u308c\u307e\u3059\u3002\u5de8\u5927\u306a\u30c7\u30fc\u30bf\u3067\u306f\u306a\u3044\u304c\u4f55\u3089\u304b\u306e\u51e6\u7406\u306e\u305f\u3081\u306b\u53c2\u7167\u3057\u305f\u3044\u30c7\u30fc\u30bf\u304c\u3042\u308b\u5834\u5408\u306b\u3053\u306e\u624b\u306f\u4f7f\u3048\u308b\u3067\u3057\u3087\u3046\u3002\n\nHadoop Streaming \u3067\u306e\u30b3\u30fc\u30c9\u4f8b\n\u5e73\u5747\u5358\u8a9e\u9577\u3092\u7b97\u51fa\u3059\u308b\u30b3\u30fc\u30c9\u3092\u4f8b\u3068\u3057\u3066\u3001\u51e6\u7406\u8a18\u8ff0\u306e\u65b9\u6cd5\u3092\u89e3\u8aac\u3057\u307e\u3059\u3002\n\nMapper\nMapper \u3067\u306f\u3068\u306b\u304b\u304f\u5168\u884c\u3092\u8aad\u307f\u8fbc\u3093\u3067\u5358\u8a9e\u306e\u9577\u3055\u3092\u3072\u305f\u3059\u3089\u51fa\u529b\u3057\u307e\u3059\u3002\u884c\u304c\u5358\u8a9e\u3068\u305d\u306e\u9577\u3055\u306b\u5199\u50cf\u304c\u53d6\u3089\u308c\u308b\u308f\u3051\u3067\u3059\u3002\nclass Mapper\n  def self.map(stdin)\n    # \u5168\u884c\u3092\u9010\u6b21\u8aad\u307f\u8fbc\u3080\n    stdin.each_line {|line|\n      words = line.split(\" \")\n      words.each {|word|\n        len = word.length\n        # \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\n        if /\\A[A-Za-z]/ =~ word\n          # \u5358\u8a9e\u3054\u3068\u306b\u982d\u6587\u5b57\u3068\u305d\u306e\u6587\u5b57\u6570\u3092\u51fa\u529b\u3059\u308b\n          text = \"#{word[0]}\\t#{len}\"\n          puts text unless text.nil?\n        end\n      }\n    }\n  end\nend\n\n\nReducer\nReducer \u3067\u306f Mapper \u306e\u51fa\u529b\u3092\u7d71\u5408\u3057\u3066\u7c21\u7d04\u3057\u307e\u3059\u3002\nclass Reducer\n  def self.reduce(stdin)\n    # \u5909\u6570\u306e\u6e96\u5099\n    key = \"\"\n    wordcount = 0.0\n    lettercount = 0\n\n    # \u30bd\u30fc\u30c8\u3055\u308c\u305f Mapper \u306e\u51fa\u529b\u3092\u9010\u6b21\u8aad\u307f\u8fbc\u3080\n    stdin.each_line {|line|\n      newkey, wordlen = line.strip.split\n      # \u30ad\u30fc\u304c\u5909\u66f4\u3068\u306a\u308b\u3054\u3068\u306b\u96c6\u8a08\u7d50\u679c\u3092\u51fa\u529b\u3059\u308b\n      if newkey.length > 0\n        unless key == newkey\n          # \u6587\u5b57\u6570\u306e\u5408\u8a08\u3092\u983b\u5ea6\u3067\u9664\u7b97\u3057\u3001\u5e73\u5747\u3092\u6c42\u3081\u308b\n          count = lettercount / wordcount\n          puts \"#{key}\\t#{count}\\n\" unless count.nan?\n          key = newkey\n          wordcount = 0.0\n          lettercount = 0\n        end\n        wordcount += 1.0\n        lettercount += wordlen.to_i\n      end\n    }\n    # \u6700\u5f8c\u306e 1 \u884c\u306e\u305f\u3081\u306b\n    unless key.nil?\n      count = lettercount / wordcount\n      puts \"#{key}\\t#{count}\\n\" unless count.nan?\n    end\n  end\nend\n\n\nHadoop Streaming \u51fa\u529b\u7d50\u679c\u306e\u7d71\u8a08\nHadoop \u3067\u5168\u6570\u8abf\u67fb\u3057\u305f\u7d50\u679c\u304b\u3089\u8981\u7d04\u7d71\u8a08\u91cf\u3092\u6c42\u3081\u307e\u3059\u3002\n\u3053\u308c\u306b\u3088\u308a\u6bcd\u96c6\u56e3\u306e\u7d71\u8a08\u91cf (\u6bcd\u5e73\u5747\u3001\u6bcd\u5206\u6563\u306a\u3069) \u304c\u5224\u660e\u3057\u307e\u3059\u304b\u3089\u3001\u69d8\u3005\u306a\u6a19\u672c\u62bd\u51fa\u6cd5\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u307e\u305f\u6bcd\u96c6\u56e3\u306e\u7279\u5fb4\u3082\u660e\u3089\u304b\u306b\u306a\u308a\u3001\u6bcd\u96c6\u56e3\u5206\u5e03\u306b\u8272\u3005\u306a\u30e2\u30c7\u30eb\u3092\u4eee\u5b9a\u3057\u3066\u8003\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u30ef\u30fc\u30c9\u30ab\u30a6\u30f3\u30c8\u306e\u3088\u3046\u306b\u7279\u5fb4\u306e\u983b\u5ea6\u3092\u7b97\u51fa\u3057\u305f\u3068\u304d\u3001\u305d\u306e\u983b\u5ea6\u306e\u5206\u5e03\u304b\u3089\u7d71\u8a08\u91cf\u3092\u6c42\u3081\u3066\u30d7\u30ed\u30c3\u30c6\u30a3\u30f3\u30b0\u3092\u3057\u3066\u307f\u307e\u3059\u3002\u4eca\u307e\u3067\u3082\u8aac\u660e\u3057\u305f\u901a\u308a pandas \u3068 matplotlib \u306f Hadoop \u306e\u51fa\u529b\u3092\u5206\u6790\u3059\u308b\u306b\u3042\u305f\u3063\u3066\u3082\u89aa\u548c\u6027\u304c\u9ad8\u304f\u5f37\u529b\u306a\u52b9\u679c\u3092\u767a\u63ee\u3057\u307e\u3059\u3002\nimport sys, os\nimport json\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nclass Summary:\n    def __init__(self, args):\n        # \u7b2c\u4e00\u5f15\u6570\u3092\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u3057\u3066\u89e3\u91c8\u3059\u308b\n        self.filename = args[1]\n\n    def calc(self):\n        # \u30bf\u30d6\u533a\u5207\u308a\u306e Hadoop \u306e\u51fa\u529b\u3092\u8aad\u307f\u8fbc\u3080\n        df = pd.read_csv(self.filename, sep='\\t').sort_index(by=['0'], ascending=[False]).ix[:, '0']\n        # \u8981\u7d04\u7d71\u8a08\u91cf\u3092\u7b97\u51fa\n        print( df.describe() )\n        # \u5024\u306e\u767b\u5834\u983b\u5ea6\u3092\u30ab\u30a6\u30f3\u30c8\n        print( df.value_counts() )\n        # \u68d2\u30b0\u30e9\u30d5\u3067\u983b\u5ea6\u306e\u983b\u5ea6\u3092\u63cf\u753b\n        self._plot(s)\n\n    def _plot(self, s):\n        fig = plt.figure()\n        ax = fig.add_subplot(1,1,1)\n        ax.hist(s, bins=50, alpha=0.6)\n        plt.xticks([1,2,3,4,5,10,20,30,50,60,70,80])\n        plt.show()\n        plt.savefig(\"image.png\")\n\nif __name__=='__main__':\n    if len(sys.argv) > 1:\n        summary = Summary(sys.argv)\n        summary.calc()\n    else:\n        print(\"Invalid arguments\")\n\ndescribe() \u95a2\u6570\u306f\u4ee3\u8868\u7684\u306a\u8981\u7d04\u7d71\u8a08\u91cf\u3092\u6c42\u3081\u307e\u3059\u3002\u4e0a\u306e\u30b3\u30fc\u30c9\u3067\u305f\u3068\u3048\u3070\u6b21\u306e\u3088\u3046\u306b\u7d71\u8a08\u91cf\u304c\u6c42\u307e\u308a\u307e\u3059\u3002\ncount    99.000000 # \u4ef6\u6570\nmean      7.818182 # \u5e73\u5747\u5024\nstd       9.444104 # \u6a19\u6e96\u504f\u5dee\nmin       2.000000 # \u6700\u5c0f\u5024\n25%       3.000000 # \u7b2c\u4e00\u56db\u5206\u4f4d\n50%       4.000000 # \u7b2c\u30cb\u56db\u5206\u4f4d (\u4e2d\u9593\u5024)\n75%       8.000000 # \u7b2c\u4e09\u56db\u5206\u4f4d\nmax      65.000000 # \u6700\u5927\u5024\n\n\u5206\u6563\u306f\u6a19\u6e96\u504f\u5dee\u306e\u4e8c\u4e57\u3067\u3059\u304b\u3089\u3001\u3053\u308c\u3060\u3051\u306e\u60c5\u5831\u304c\u3042\u308c\u3070\u6bcd\u96c6\u56e3\u306e\u7d71\u8a08\u91cf\u3068\u3057\u3066\u306f\u4e8b\u8db3\u308a\u305d\u3046\u3067\u3059\u306d\u3002\nvalue_counts() \u95a2\u6570\u306f\u5024\u306e\u983b\u5ea6\u3092\u6c42\u3081\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u30ef\u30fc\u30c9\u30ab\u30a6\u30f3\u30c8\u306e\u7d50\u679c\u3067\u3059\u304b\u3089\u3001\u7279\u5fb4\u306e\u767b\u5834\u983b\u5ea6\u306e\u983b\u5ea6\u304c\u308f\u304b\u308b\u308f\u3051\u3067\u3059\u3002\n3     38\n4     16\n6      9\n7      5\n11     4\n5      4\n19     3\n13     2\n16     2\n15     2\n8      2\n9      1\n10     1\n65     1\n12     1\n55     1\n14     1\n17     1\n20     1\n21     1\n28     1\n29     1\n2      1\n\n\u3053\u308c\u3092 pandas + matplotlib \u3067\u30d7\u30ed\u30c3\u30c6\u30a3\u30f3\u30b0\u3059\u308b\u3068\u3053\u3046\u306a\u308a\u307e\u3059\u3002\n\n\n\u307e\u3068\u3081\nHadoop Streaming \u306e\u5b9f\u8df5\u306b\u3042\u305f\u308a\u3001\u30b8\u30e7\u30d6\u9593\u306e\u9023\u7d50\u3084\u5916\u90e8\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\u3001\u30b3\u30fc\u30c9\u306e\u66f8\u304d\u65b9\u3001\u3055\u3089\u306b\u51fa\u529b\u7d50\u679c\u306b\u5bfe\u3059\u308b\u5206\u6790\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3057\u305f\u3002\u6bcd\u96c6\u56e3\u3092\u624b\u8efd\u306b\u5168\u6570\u8abf\u67fb\u3067\u304d\u308b Hadoop \u304c Ruby \u3067\u6271\u3046\u3053\u3068\u306b\u3088\u3063\u3066\u67d4\u8edf\u3067\u5b9f\u7528\u6027\u306e\u9ad8\u3044\u30c4\u30fc\u30eb\u3068\u306a\u308b\u3053\u3068\u304c\u304a\u308f\u304b\u308a\u306b\u306a\u3063\u305f\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n[\u524d\u56de](http://qiita.com/ynakayama/items/136e87668e57acfcd745)\u3001[\u524d\u3005\u56de](http://qiita.com/ynakayama/items/014868218ea69c5614fb)\u306b\u5f15\u304d\u7d9a\u304d Hadoop \u306b\u3088\u308b\u5168\u6570\u8d70\u67fb\u306e\u8a71\u3067\u3059\u3002\n\n## Hadoop Streaming \u30b8\u30e7\u30d6\u306e\u9023\u7d50\u3092\u3059\u308b\n\nMapReduce \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306f\u524d\u8ff0\u3057\u305f\u3088\u3046\u306b\u5358\u72ec\u3067\u8907\u96d1\u306a\u8a08\u7b97\u3092\u3059\u308b\u306e\u306b\u5411\u3044\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u305f\u3068\u3048\u3070 [TF-IDF](http://ja.wikipedia.org/wiki/Tf-idf) \u5024\u306e\u7b97\u51fa\u306e\u3088\u3046\u306a\u5c11\u3057\u96e3\u3057\u3044\u6570\u5f0f\u3092\u89e3\u304d\u305f\u3044\u5834\u5408\u3001\u30b8\u30e7\u30d6\u3092 2 \u3064\u3082 3 \u3064\u3082\u9023\u7d50\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u3053\u308c\u306f[\u524d\u56de](http://qiita.com/ynakayama/items/136e87668e57acfcd745)\u7d39\u4ecb\u3057\u305f[\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af](https://github.com/ynakayama/hadoop-streaming-with-ruby)\u306e\u5185\u90e8\u3067\u3082\u305d\u3046\u3057\u3066\u3044\u308b\u901a\u308a\u3001\u51fa\u529b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b _SUCCESS \u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3067\u5224\u65ad\u3092\u3059\u308b\u306e\u304c\u3072\u3068\u3064\u306e\u65b9\u6cd5\u3067\u3059\u3002\n\n```bash\nhadoop fs -get $HDFS_OUT/_SUCCESS>>$JOBLOG 2>&1\ntest -f _SUCCESS && \u6210\u529f\u6642\u51e6\u7406\n```\n\n\u30b8\u30e7\u30d6\u306e\u76f4\u5217\u5b9f\u884c\u3068\u3057\u3066\u306f\u5358\u7d14\u306b\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u9023\u7d9a\u7684\u306b\u5b9f\u884c\u3059\u308c\u3070\u826f\u3044\u3067\u3057\u3087\u3046\u3002\n\n```bash\n$JOB1/bin/run>>$JOB1/log/job.log 2>&1\n$JOB2/bin/run>>$JOB2/log/job.log 2>&1\n$JOB3/bin/run>>$JOB3/log/job.log 2>&1\n```\n\n\u3053\u306e\u3068\u304d JOB1 \u306e\u51fa\u529b\u3068\u306a\u308b HDFS \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092 JOB2 \u306e\u5165\u529b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u3059\u308b\u3088\u3046\u306b\u3059\u308c\u3070\u30c7\u30fc\u30bf\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n## Hadoop Streaming \u3067\u5916\u90e8\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\n\n\u5916\u90e8\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307f\u305f\u3044\u5834\u5408\u306f\u5b9f\u884c\u6642\u306e -file \u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u53ef\u80fd\u3067\u3059\u3002\n\n```bash\n-file EXTERNAL_JOB/log/result.log\n```\n\n\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u306f script/run \u3092\u7de8\u96c6\u3059\u308c\u3070 OK \u3067\u3059\u3002\n\n-file \u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306f\u6b21\u306e\u3088\u3046\u306b\u30b3\u30fc\u30c9\u5185\u3067\u666e\u901a\u306b\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```rb\n# -file \u306b\u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u76f4\u63a5\u8a18\u8ff0\u3059\u308b\n@external_file = \"result.log\"\n\ndef read_from_external\n  # open \u3067\u305d\u306e\u307e\u307e\u958b\u304f\u3053\u3068\u304c\u3067\u304d\u308b\n  open(@external_file) do |file|\n    file.each do |line|\n      # \u5168\u884c\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u306b\u683c\u7d0d\u3057\u3001\u3042\u3068\u3067\u4f7f\u3046\n      @external_data << line\n    end\n  end\nend\n```\n\n-file \u306b\u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306f\u305d\u306e\u307e\u307e\u5b9f\u884c\u30ce\u30fc\u30c9\u4e0a\u306e\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u5c55\u958b\u3055\u308c\u307e\u3059\u3002\u5de8\u5927\u306a\u30c7\u30fc\u30bf\u3067\u306f\u306a\u3044\u304c\u4f55\u3089\u304b\u306e\u51e6\u7406\u306e\u305f\u3081\u306b\u53c2\u7167\u3057\u305f\u3044\u30c7\u30fc\u30bf\u304c\u3042\u308b\u5834\u5408\u306b\u3053\u306e\u624b\u306f\u4f7f\u3048\u308b\u3067\u3057\u3087\u3046\u3002\n\n## Hadoop Streaming \u3067\u306e\u30b3\u30fc\u30c9\u4f8b\n\n\u5e73\u5747\u5358\u8a9e\u9577\u3092\u7b97\u51fa\u3059\u308b\u30b3\u30fc\u30c9\u3092\u4f8b\u3068\u3057\u3066\u3001\u51e6\u7406\u8a18\u8ff0\u306e\u65b9\u6cd5\u3092\u89e3\u8aac\u3057\u307e\u3059\u3002\n\n### Mapper\n\nMapper \u3067\u306f\u3068\u306b\u304b\u304f\u5168\u884c\u3092\u8aad\u307f\u8fbc\u3093\u3067\u5358\u8a9e\u306e\u9577\u3055\u3092\u3072\u305f\u3059\u3089\u51fa\u529b\u3057\u307e\u3059\u3002\u884c\u304c\u5358\u8a9e\u3068\u305d\u306e\u9577\u3055\u306b\u5199\u50cf\u304c\u53d6\u3089\u308c\u308b\u308f\u3051\u3067\u3059\u3002\n\n```rb\nclass Mapper\n  def self.map(stdin)\n    # \u5168\u884c\u3092\u9010\u6b21\u8aad\u307f\u8fbc\u3080\n    stdin.each_line {|line|\n      words = line.split(\" \")\n      words.each {|word|\n        len = word.length\n        # \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\n        if /\\A[A-Za-z]/ =~ word\n          # \u5358\u8a9e\u3054\u3068\u306b\u982d\u6587\u5b57\u3068\u305d\u306e\u6587\u5b57\u6570\u3092\u51fa\u529b\u3059\u308b\n          text = \"#{word[0]}\\t#{len}\"\n          puts text unless text.nil?\n        end\n      }\n    }\n  end\nend\n```\n\n### Reducer\n\nReducer \u3067\u306f Mapper \u306e\u51fa\u529b\u3092\u7d71\u5408\u3057\u3066\u7c21\u7d04\u3057\u307e\u3059\u3002\n\n```rb\nclass Reducer\n  def self.reduce(stdin)\n    # \u5909\u6570\u306e\u6e96\u5099\n    key = \"\"\n    wordcount = 0.0\n    lettercount = 0\n\n    # \u30bd\u30fc\u30c8\u3055\u308c\u305f Mapper \u306e\u51fa\u529b\u3092\u9010\u6b21\u8aad\u307f\u8fbc\u3080\n    stdin.each_line {|line|\n      newkey, wordlen = line.strip.split\n      # \u30ad\u30fc\u304c\u5909\u66f4\u3068\u306a\u308b\u3054\u3068\u306b\u96c6\u8a08\u7d50\u679c\u3092\u51fa\u529b\u3059\u308b\n      if newkey.length > 0\n        unless key == newkey\n          # \u6587\u5b57\u6570\u306e\u5408\u8a08\u3092\u983b\u5ea6\u3067\u9664\u7b97\u3057\u3001\u5e73\u5747\u3092\u6c42\u3081\u308b\n          count = lettercount / wordcount\n          puts \"#{key}\\t#{count}\\n\" unless count.nan?\n          key = newkey\n          wordcount = 0.0\n          lettercount = 0\n        end\n        wordcount += 1.0\n        lettercount += wordlen.to_i\n      end\n    }\n    # \u6700\u5f8c\u306e 1 \u884c\u306e\u305f\u3081\u306b\n    unless key.nil?\n      count = lettercount / wordcount\n      puts \"#{key}\\t#{count}\\n\" unless count.nan?\n    end\n  end\nend\n```\n\n## Hadoop Streaming \u51fa\u529b\u7d50\u679c\u306e\u7d71\u8a08\n\nHadoop \u3067\u5168\u6570\u8abf\u67fb\u3057\u305f\u7d50\u679c\u304b\u3089\u8981\u7d04\u7d71\u8a08\u91cf\u3092\u6c42\u3081\u307e\u3059\u3002\n\n\u3053\u308c\u306b\u3088\u308a\u6bcd\u96c6\u56e3\u306e\u7d71\u8a08\u91cf (\u6bcd\u5e73\u5747\u3001\u6bcd\u5206\u6563\u306a\u3069) \u304c\u5224\u660e\u3057\u307e\u3059\u304b\u3089\u3001\u69d8\u3005\u306a\u6a19\u672c\u62bd\u51fa\u6cd5\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u307e\u305f\u6bcd\u96c6\u56e3\u306e\u7279\u5fb4\u3082\u660e\u3089\u304b\u306b\u306a\u308a\u3001\u6bcd\u96c6\u56e3\u5206\u5e03\u306b\u8272\u3005\u306a\u30e2\u30c7\u30eb\u3092\u4eee\u5b9a\u3057\u3066\u8003\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u30ef\u30fc\u30c9\u30ab\u30a6\u30f3\u30c8\u306e\u3088\u3046\u306b\u7279\u5fb4\u306e\u983b\u5ea6\u3092\u7b97\u51fa\u3057\u305f\u3068\u304d\u3001\u305d\u306e\u983b\u5ea6\u306e\u5206\u5e03\u304b\u3089\u7d71\u8a08\u91cf\u3092\u6c42\u3081\u3066\u30d7\u30ed\u30c3\u30c6\u30a3\u30f3\u30b0\u3092\u3057\u3066\u307f\u307e\u3059\u3002[\u4eca\u307e\u3067\u3082\u8aac\u660e\u3057\u305f](http://qiita.com/ynakayama/items/2ec380ab1176e4569ebe)\u901a\u308a pandas \u3068 matplotlib \u306f Hadoop \u306e\u51fa\u529b\u3092\u5206\u6790\u3059\u308b\u306b\u3042\u305f\u3063\u3066\u3082\u89aa\u548c\u6027\u304c\u9ad8\u304f\u5f37\u529b\u306a\u52b9\u679c\u3092\u767a\u63ee\u3057\u307e\u3059\u3002\n\n```py3\nimport sys, os\nimport json\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nclass Summary:\n    def __init__(self, args):\n        # \u7b2c\u4e00\u5f15\u6570\u3092\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u3057\u3066\u89e3\u91c8\u3059\u308b\n        self.filename = args[1]\n\n    def calc(self):\n        # \u30bf\u30d6\u533a\u5207\u308a\u306e Hadoop \u306e\u51fa\u529b\u3092\u8aad\u307f\u8fbc\u3080\n        df = pd.read_csv(self.filename, sep='\\t').sort_index(by=['0'], ascending=[False]).ix[:, '0']\n        # \u8981\u7d04\u7d71\u8a08\u91cf\u3092\u7b97\u51fa\n        print( df.describe() )\n        # \u5024\u306e\u767b\u5834\u983b\u5ea6\u3092\u30ab\u30a6\u30f3\u30c8\n        print( df.value_counts() )\n        # \u68d2\u30b0\u30e9\u30d5\u3067\u983b\u5ea6\u306e\u983b\u5ea6\u3092\u63cf\u753b\n        self._plot(s)\n\n    def _plot(self, s):\n        fig = plt.figure()\n        ax = fig.add_subplot(1,1,1)\n        ax.hist(s, bins=50, alpha=0.6)\n        plt.xticks([1,2,3,4,5,10,20,30,50,60,70,80])\n        plt.show()\n        plt.savefig(\"image.png\")\n\nif __name__=='__main__':\n    if len(sys.argv) > 1:\n        summary = Summary(sys.argv)\n        summary.calc()\n    else:\n        print(\"Invalid arguments\")\n```\n\ndescribe() \u95a2\u6570\u306f\u4ee3\u8868\u7684\u306a\u8981\u7d04\u7d71\u8a08\u91cf\u3092\u6c42\u3081\u307e\u3059\u3002\u4e0a\u306e\u30b3\u30fc\u30c9\u3067\u305f\u3068\u3048\u3070\u6b21\u306e\u3088\u3046\u306b\u7d71\u8a08\u91cf\u304c\u6c42\u307e\u308a\u307e\u3059\u3002\n\n```\ncount    99.000000 # \u4ef6\u6570\nmean      7.818182 # \u5e73\u5747\u5024\nstd       9.444104 # \u6a19\u6e96\u504f\u5dee\nmin       2.000000 # \u6700\u5c0f\u5024\n25%       3.000000 # \u7b2c\u4e00\u56db\u5206\u4f4d\n50%       4.000000 # \u7b2c\u30cb\u56db\u5206\u4f4d (\u4e2d\u9593\u5024)\n75%       8.000000 # \u7b2c\u4e09\u56db\u5206\u4f4d\nmax      65.000000 # \u6700\u5927\u5024\n```\n\n\u5206\u6563\u306f\u6a19\u6e96\u504f\u5dee\u306e\u4e8c\u4e57\u3067\u3059\u304b\u3089\u3001\u3053\u308c\u3060\u3051\u306e\u60c5\u5831\u304c\u3042\u308c\u3070\u6bcd\u96c6\u56e3\u306e\u7d71\u8a08\u91cf\u3068\u3057\u3066\u306f\u4e8b\u8db3\u308a\u305d\u3046\u3067\u3059\u306d\u3002\n\nvalue_counts() \u95a2\u6570\u306f\u5024\u306e\u983b\u5ea6\u3092\u6c42\u3081\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u30ef\u30fc\u30c9\u30ab\u30a6\u30f3\u30c8\u306e\u7d50\u679c\u3067\u3059\u304b\u3089\u3001\u7279\u5fb4\u306e\u767b\u5834\u983b\u5ea6\u306e\u983b\u5ea6\u304c\u308f\u304b\u308b\u308f\u3051\u3067\u3059\u3002\n\n```\n3     38\n4     16\n6      9\n7      5\n11     4\n5      4\n19     3\n13     2\n16     2\n15     2\n8      2\n9      1\n10     1\n65     1\n12     1\n55     1\n14     1\n17     1\n20     1\n21     1\n28     1\n29     1\n2      1\n```\n\n\u3053\u308c\u3092 pandas + matplotlib \u3067\u30d7\u30ed\u30c3\u30c6\u30a3\u30f3\u30b0\u3059\u308b\u3068\u3053\u3046\u306a\u308a\u307e\u3059\u3002\n\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/38501/a7299c97-b40b-2cd3-03a7-bd6ee56c26ae.png)\n\n## \u307e\u3068\u3081\n\nHadoop Streaming \u306e\u5b9f\u8df5\u306b\u3042\u305f\u308a\u3001\u30b8\u30e7\u30d6\u9593\u306e\u9023\u7d50\u3084\u5916\u90e8\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\u3001\u30b3\u30fc\u30c9\u306e\u66f8\u304d\u65b9\u3001\u3055\u3089\u306b\u51fa\u529b\u7d50\u679c\u306b\u5bfe\u3059\u308b\u5206\u6790\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3057\u305f\u3002\u6bcd\u96c6\u56e3\u3092\u624b\u8efd\u306b\u5168\u6570\u8abf\u67fb\u3067\u304d\u308b Hadoop \u304c Ruby \u3067\u6271\u3046\u3053\u3068\u306b\u3088\u3063\u3066\u67d4\u8edf\u3067\u5b9f\u7528\u6027\u306e\u9ad8\u3044\u30c4\u30fc\u30eb\u3068\u306a\u308b\u3053\u3068\u304c\u304a\u308f\u304b\u308a\u306b\u306a\u3063\u305f\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["hadoop", "Ruby", "pandas", "matplotlib", "Python"]}