{"context": "\n\n\u306f\u3058\u3081\u306b\n\u8b1b\u7fa9\u3067\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u3084\u308a\u59cb\u3081\u305f\u306e\u3067\u30ce\u30fc\u30c8\u4ee3\u308f\u308a\u306b\u307e\u3068\u3081\u3066\u307f\u307e\u3059\u3002\n\u5f53\u9762\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u3069\u3046\u66f8\u3044\u305f\u3068\u304b\u3092\u30e1\u30e2\u3059\u308b\u3060\u3051\u3067\u3001\u57fa\u672c\u6982\u5ff5\u3068\u304b\u307e\u3067\u7a81\u3063\u8fbc\u3080\u3064\u3082\u308a\u306f\u4eca\u306e\u6240\u3042\u308a\u307e\u305b\u3093\u3002\n\u6295\u7a3f\u306f\u5206\u3051\u305a\u306b\u968f\u6642\u7de8\u96c6\u3057\u3066\u3044\u304f\u4e88\u5b9a\u3067\u3059\u3002\n\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306fpython 2.7(\u7814\u7a76\u3067\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067), c\u8a00\u8a9e(\u8b1b\u7fa9\u6307\u5b9a)\u3067\u66f8\u304d\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u5168\u4f53\u3067\u306f\u306a\u304f\u4e00\u90e8\u306a\u306e\u3067\u53c2\u8003\u306b\u3059\u308b\u5834\u5408\u306f\u3001\u8aad\u307f\u8fbc\u3080\u30e9\u30a4\u30d6\u30e9\u30ea\u3084\u5909\u6570\u5ba3\u8a00\u306f\u5404\u81ea\u3067\u6c72\u307f\u53d6\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u9032\u3081\u65b9\n\u8b1b\u7fa9\u3084\u8ab2\u984c\u306b\u5408\u308f\u305b\u3066\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\n\u73fe\u5728\u306f\u3001\u4e0b\u8a18\u306e\u5185\u5bb9\u3092\u66f8\u3044\u3066\u307e\u3059\u3002\u306a\u304a\u3001\u63a5\u7d9a\u5148\u30b5\u30fc\u30d0\u30fc\u306e\u60c5\u5831\u306b\u95a2\u3057\u3066\u306f\u5148\u751f\u306b\u516c\u958b\u306e\u78ba\u8a8d\u3092\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u30b5\u30fc\u30d0\u30fc\u306bTCP\u63a5\u7d9a\u3092\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\n\n\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\n\n\u3068\u308a\u3042\u3048\u305a\u4e00\u56de\u7e4b\u3050\uff01\uff01\n\n\u6761\u4ef6\n\nhost, port\u3092\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3067\u6e21\u305b\u308b\nIPv4\u3068IPv6\u4e21\u5bfe\u5fdc\naddrinfo\u3058\u3083\u306a\u304f\u3066sockaddr\u7cfb\u3092\u4f7f\u3044\u307e\u3059\u3002(\u8b1b\u7fa9\u306e\u6d41\u308c\u7684\u306b)\n\n\n\u5b9f\u88c5(python:github)\n\nTCP\u901a\u4fe1\u306e\u4ed5\u65b9:IPv4\nsocket\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3046\u3002\u4f7f\u3044\u65b9\u306f\u3053\u3053\u3088\u308a\u5f15\u7528\nsocket.AF_INET\u304cIPv4\u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u6307\u5b9a\u3067\u3001SOCK_STREAM\u304c\u30b9\u30c8\u30ea\u30fc\u30e0\u30bd\u30b1\u30c3\u30c8(TCP)\u306e\u6307\u5b9a\u3068\u306a\u308b\u3002IPv6\u306e\u5834\u5408\u3001AF_INET6\u3068\u306a\u308a\u3001UDP\u306e\u5834\u5408\u306fSOCK_DGRAM\u3068\u306a\u308b\u3002\n\n\nipv4_simple_client.py\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nwith closing(sock):\n  sock.connect((host, port))\n  sock.send(b'Hello world')\n  print(sock.recv(bufsize))\nreturn\n\n\n\nTCP\u901a\u4fe1\u306e\u4ed5\u65b9:IPv6\n\u57fa\u672c\u7684\u306bIPv4\u3068\u540c\u3058\u3002connect\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u304c(host, port, flowinfo, scopeid)\u306e\u9577\u30554\u306e\u30bf\u30d7\u30eb\u306b\u306a\u308b\u3002flowinfo\u3068scopeid\u306b\u4f55\u3092\u5165\u308c\u305f\u3089\u826f\u3044\u306e\u304b\u306f\u73fe\u72b6\u307e\u3060\u7406\u89e3\u3067\u304d\u3066\u3044\u306a\u3044\u3002\u3002\u3002\n\n\n\nAF_INET6 \u30a2\u30c9\u30ec\u30b9\u30d5\u30a1\u30df\u30ea\u306f (host, port, flowinfo, scopeid) \u306e\u9577\u30554\u306e\u30bf\u30d7\u30eb\u3067\u793a\u3057\u3001 flowinfo \u3068 scopeid \u306b\u306f\u305d\u308c\u305e\u308cC\u306e struct sockaddr_in6 \u306b\u304a\u3051\u308b sin6_flowinfo \u3068 sin6_scope_id \u306e\u5024\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u5f8c\u65b9\u4e92\u63db\u6027\u306e\u305f\u3081\u3001 socket \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u306f sin6_flowinfo \u3068 sin6_scope_id \u3092\u7701\u7565\u3059\u308b\u4e8b\u304c\u3067\u304d\u307e\u3059\u304c\u3001 scopeid \u3092\u7701\u7565\u3059\u308b\u3068\u30b9\u30b3\u30fc\u30d7\u3092\u6301\u3063\u305fIPv6\u30a2\u30c9\u30ec\u30b9\u306e\u51e6\u7406\u3067\u554f\u984c\u304c\u767a\u751f\u3059\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n\n\nipv6_simple_client.py\nsock = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)\nwith closing(sock):\n  sock.connect((host, port, flowninfo, scopeid))\n  sock.send(b'Hello world')\n  print(sock.recv(bufsize))\nreturn\n\n\n\n\u5f15\u6570\u306e\u6e21\u3057\u65b9\nargparse\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3046\u3002\u4f7f\u3044\u65b9\u306f\u3053\u3053\u3092\u53c2\u7167\u3002\u30dd\u30fc\u30c8\u6307\u5b9a\u306f-p\u3068--port\u3068\u3057\u3001host\u6307\u5b9a\u306f-b\u3068--binding\u306b\u3057\u305f(-h\u304chelp\u3067\u57cb\u307e\u3063\u3066\u3066\u3001rails\u3067IP\u30b5\u30fc\u30d0\u30fc\u8d77\u52d5\u6642\u306e\u30b3\u30de\u30f3\u30c9\u304crails s -b <IP Address>\u3060\u3063\u305f\u306e\u3067...)\n\n\nargparse_sample.py\np = argparse.ArgumentParser()\n\np.add_argument('-b', '--binding', default='127.0.0.1')\np.add_argument('-p', '--port', default=3000, type=int)\nargs = p.parse_args()\n\nprint(args.binding)\nprint(args.port)\n\n\n\nIPv4\u3068IPv6\u4e21\u5bfe\u5fdc\n\u6ce8)\u6b63\u3057\u3044\u65b9\u6cd5\u304b\u306f\u308f\u304b\u3089\u306a\u3044\u3067\u3059\u3002\nsocket.inet_pton(address_family, ip_string)\u3092\u7528\u3044\u3066\u3001\u4e0d\u6b63\u306aIP\u30a2\u30c9\u30ec\u30b9\u306e\u5834\u5408socket.error\u304c\u767a\u751f\u3059\u308b\u3053\u3068\u3092\u5229\u7528\u3057\u3066\u3001IPv4\u304bIPv6\u3092\u5224\u5b9a\u3057\u305f\u3002\n\n\nconfirm_address_family.py\naddress_family = socket.AF_INET\n\ntry:\n  socket.inet_pton(address_family, host)\nexcept:\n  address_family = socket.AF_INET6\n  try:\n    socket.inet_pton(address_family, host)\n  except:\n    raise Exception , \"invalid host. please confirm the value of -b or --binding\"\nfinally:\n  print('address_family is %s' %address_family)\n\n\n\n\u5b9f\u88c5(c\u8a00\u8a9e:github)\n\nTCP\u901a\u4fe1\u306e\u4ed5\u65b9:IPv4\n\n\n\n\nint socket(int domain, int type, int protocol);\u3067socket\u3092\u4f5c\u6210\u3059\u308b\u3002\nsockaddr_in\u69cb\u9020\u4f53\u306bAddress Family\u3068port\u3092\u6307\u5b9a\u3059\u308b\u3002\n\nint inet_pton(int af, const char *src, void *dst);\u3067\u6587\u5b57\u5217 src \u3092\u3001\u30a2\u30c9\u30ec\u30b9\u30d5\u30a1\u30df\u30ea\u30fc af \u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a2\u30c9\u30ec\u30b9\u69cb\u9020\u4f53\u306b\u5909\u63db\u3057\u3001dst \u306b\u30b3\u30d4\u30fc\u3059\u308b\u3002\n\nint connect(int sockfd, const struct sockaddr *addr,\n        socklen_t addrlen);\u3067\u30b5\u30fc\u30d0\u306b\u7e4b\u3050\u3002\n\n\nipv4_simple_client.c\nint family = AF_INET;\nint sock = socket(family, SOCK_STREAM, 0);\n\nstruct sockaddr_in server;\nserver.sin_family = family;\nserver.sin_port = htons(port);\n\nint pton = inet_pton(family, host, &server.sin_addr);\nif (s != 1){\n  perror(\"invalid host.\");\n  exit(1);\n}\n\nint  con = connect(sock, (struct sockaddr *)&server, sizeof(server));\nif (con < 0){\n  perror(\"connection failure.\");\n  exit(1);\n}\n\nchar buf[244];\nmemset(buf, 0, sizeof(buf));\nread(sock, buf, sizeof(buf));\nprintf(\"%s\\n\", buf);\n\n\n\nTCP\u901a\u4fe1\u306e\u4ed5\u65b9:IPv6\n\u57fa\u672c\u7684\u306bIPv4\u3068\u540c\u3058\u3002IPv6\u5411\u3051\u306e\u69cb\u9020\u4f53\u3068\u304b\u3092\u5229\u7528\u3059\u308b\u3088\u3046\u5909\u66f4 \n\n\nipv6_simple_client.c\nint family = AF_INET6;\nint sock = socket(family, SOCK_STREAM, 0);\n\nstruct sockaddr_in6 server;\nserver.sin6_family = family;\nserver.sin6_port = htons(port);\n\nint pton = inet_pton(family, host, &server.sin6_addr);\nif (s != 1){\n  perror(\"invalid host.\");\n  exit(1);\n}\n\nint  con = connect(sock, (struct sockaddr *)&server, sizeof(server));\nif (con < 0){\n  perror(\"connection failure.\");\n  exit(1);\n}\n\nchar buf[244];\nmemset(buf, 0, sizeof(buf));\nread(sock, buf, sizeof(buf));\nprintf(\"%s\\n\", buf);\n\n\n\n\u5f15\u6570\u306e\u6e21\u3057\u65b9\ngetopt\u3092\u4f7f\u3046\u3002\u4f7f\u3044\u65b9\u306f\u3053\u3053\u3092\u53c2\u7167\u3002\u30dd\u30fc\u30c8\u6307\u5b9a\u306f-p\u3068\u3057\u3001host\u6307\u5b9a\u306f-b\u306b\u3057\u305f\u3002\n\n\ngetopt_sample.c\nint result;\nchar *host;\nint port;\n\nwhile((result=getopt(argc,argv,\"b:p:\"))!=-1){\n  switch(result){\n\n  case 'b':\n    host = optarg;\n    break;\n  case 'p':\n    port = atoi(optarg);\n    break;\n  }\n}\n\n\n\nIPv4\u3068IPv6\u4e21\u5bfe\u5fdc\n\u6ce8)\u6b63\u3057\u3044\u65b9\u6cd5\u304b\u306f\u308f\u304b\u3089\u306a\u3044\u3067\u3059\u3002\ninet_pton\u3092\u7528\u3044\u3066\u3001\u6210\u529f\u306e\u5834\u5408\u306f\u8fd4\u308a\u5024\u304c1\u3068\u306a\u308b\u3053\u3068\u3092\u5229\u7528\u3057\u3066\u3001IPv4\u304bIPv6\u3092\u5224\u5b9a\u3057\u305f\u53c2\u8003\u30da\u30fc\u30b8\u3002python\u3068\u9055\u3063\u3066\u3001inet_pton\u306e\u5f15\u6570\u306bAddress Family\u306b\u9069\u3057\u305f\u69cb\u9020\u4f53\u3092\u6e21\u3055\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u305f\u3081\u3001\u3044\u308d\u3044\u308d\u3084\u3084\u3053\u3057\u304f\u306a\u3063\u305f\u3002\u307e\u305f\u3001connect\u306e\u7b2c\u4e09\u5f15\u6570\u306esize\u306fsockaddr\u69cb\u9020\u4f53\u306esize\u3067\u306a\u304fsockaddr_in\u307e\u305f\u306fsockaddr_in6\u306esize\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u8a73\u3057\u304f\u306fgithub\u306e\u30b3\u30fc\u30c9\u3067\u3002\n\n# \u306f\u3058\u3081\u306b\n\u8b1b\u7fa9\u3067\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u3084\u308a\u59cb\u3081\u305f\u306e\u3067\u30ce\u30fc\u30c8\u4ee3\u308f\u308a\u306b\u307e\u3068\u3081\u3066\u307f\u307e\u3059\u3002\n\u5f53\u9762\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u3069\u3046\u66f8\u3044\u305f\u3068\u304b\u3092\u30e1\u30e2\u3059\u308b\u3060\u3051\u3067\u3001\u57fa\u672c\u6982\u5ff5\u3068\u304b\u307e\u3067\u7a81\u3063\u8fbc\u3080\u3064\u3082\u308a\u306f\u4eca\u306e\u6240\u3042\u308a\u307e\u305b\u3093\u3002\n\u6295\u7a3f\u306f\u5206\u3051\u305a\u306b\u968f\u6642\u7de8\u96c6\u3057\u3066\u3044\u304f\u4e88\u5b9a\u3067\u3059\u3002\n\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306fpython 2.7(\u7814\u7a76\u3067\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067), c\u8a00\u8a9e(\u8b1b\u7fa9\u6307\u5b9a)\u3067\u66f8\u304d\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u5168\u4f53\u3067\u306f\u306a\u304f\u4e00\u90e8\u306a\u306e\u3067\u53c2\u8003\u306b\u3059\u308b\u5834\u5408\u306f\u3001\u8aad\u307f\u8fbc\u3080\u30e9\u30a4\u30d6\u30e9\u30ea\u3084\u5909\u6570\u5ba3\u8a00\u306f\u5404\u81ea\u3067\u6c72\u307f\u53d6\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\n# \u9032\u3081\u65b9\n\u8b1b\u7fa9\u3084\u8ab2\u984c\u306b\u5408\u308f\u305b\u3066\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\n\u73fe\u5728\u306f\u3001\u4e0b\u8a18\u306e\u5185\u5bb9\u3092\u66f8\u3044\u3066\u307e\u3059\u3002\u306a\u304a\u3001\u63a5\u7d9a\u5148\u30b5\u30fc\u30d0\u30fc\u306e\u60c5\u5831\u306b\u95a2\u3057\u3066\u306f\u5148\u751f\u306b\u516c\u958b\u306e\u78ba\u8a8d\u3092\u3057\u3066\u307f\u307e\u3059\u3002\n\n* \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u30b5\u30fc\u30d0\u30fc\u306bTCP\u63a5\u7d9a\u3092\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\n\n# \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\n## \u3068\u308a\u3042\u3048\u305a\u4e00\u56de\u7e4b\u3050\uff01\uff01\n### \u6761\u4ef6\n* host, port\u3092\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3067\u6e21\u305b\u308b\n* IPv4\u3068IPv6\u4e21\u5bfe\u5fdc\n* addrinfo\u3058\u3083\u306a\u304f\u3066sockaddr\u7cfb\u3092\u4f7f\u3044\u307e\u3059\u3002(\u8b1b\u7fa9\u306e\u6d41\u308c\u7684\u306b)\n\n### \u5b9f\u88c5(python:[github](https://github.com/kojisato118/computer_networking_report1/blob/master/tcp_client.py))\n* TCP\u901a\u4fe1\u306e\u4ed5\u65b9:IPv4  \n[socket\u30e2\u30b8\u30e5\u30fc\u30eb](http://docs.python.jp/2/library/socket.html)\u3092\u4f7f\u3046\u3002\u4f7f\u3044\u65b9\u306f[\u3053\u3053](http://memo.saitodev.com/home/python_network_programing/)\u3088\u308a\u5f15\u7528  \nsocket.AF_INET\u304cIPv4\u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u6307\u5b9a\u3067\u3001SOCK_STREAM\u304c\u30b9\u30c8\u30ea\u30fc\u30e0\u30bd\u30b1\u30c3\u30c8(TCP)\u306e\u6307\u5b9a\u3068\u306a\u308b\u3002IPv6\u306e\u5834\u5408\u3001AF_INET6\u3068\u306a\u308a\u3001UDP\u306e\u5834\u5408\u306fSOCK_DGRAM\u3068\u306a\u308b\u3002\n\n```ipv4_simple_client.py\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nwith closing(sock):\n  sock.connect((host, port))\n  sock.send(b'Hello world')\n  print(sock.recv(bufsize))\nreturn\n```\n* TCP\u901a\u4fe1\u306e\u4ed5\u65b9:IPv6  \n\u57fa\u672c\u7684\u306bIPv4\u3068\u540c\u3058\u3002connect\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u304c(host, port, flowinfo, scopeid)\u306e\u9577\u30554\u306e\u30bf\u30d7\u30eb\u306b\u306a\u308b\u3002flowinfo\u3068scopeid\u306b\u4f55\u3092\u5165\u308c\u305f\u3089\u826f\u3044\u306e\u304b\u306f\u73fe\u72b6\u307e\u3060\u7406\u89e3\u3067\u304d\u3066\u3044\u306a\u3044\u3002\u3002\u3002  \n\n> AF_INET6 \u30a2\u30c9\u30ec\u30b9\u30d5\u30a1\u30df\u30ea\u306f (host, port, flowinfo, scopeid) \u306e\u9577\u30554\u306e\u30bf\u30d7\u30eb\u3067\u793a\u3057\u3001 flowinfo \u3068 scopeid \u306b\u306f\u305d\u308c\u305e\u308cC\u306e struct sockaddr_in6 \u306b\u304a\u3051\u308b sin6_flowinfo \u3068 sin6_scope_id \u306e\u5024\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u5f8c\u65b9\u4e92\u63db\u6027\u306e\u305f\u3081\u3001 socket \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u306f sin6_flowinfo \u3068 sin6_scope_id \u3092\u7701\u7565\u3059\u308b\u4e8b\u304c\u3067\u304d\u307e\u3059\u304c\u3001 scopeid \u3092\u7701\u7565\u3059\u308b\u3068\u30b9\u30b3\u30fc\u30d7\u3092\u6301\u3063\u305fIPv6\u30a2\u30c9\u30ec\u30b9\u306e\u51e6\u7406\u3067\u554f\u984c\u304c\u767a\u751f\u3059\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n\n```ipv6_simple_client.py\nsock = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)\nwith closing(sock):\n  sock.connect((host, port, flowninfo, scopeid))\n  sock.send(b'Hello world')\n  print(sock.recv(bufsize))\nreturn\n```\n\n\n* \u5f15\u6570\u306e\u6e21\u3057\u65b9  \n[argparse](http://docs.python.jp/2/library/argparse.html)\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3046\u3002\u4f7f\u3044\u65b9\u306f[\u3053\u3053](http://python.civic-apps.com/argparse/)\u3092\u53c2\u7167\u3002\u30dd\u30fc\u30c8\u6307\u5b9a\u306f```-p```\u3068```--port```\u3068\u3057\u3001host\u6307\u5b9a\u306f```-b```\u3068```--binding```\u306b\u3057\u305f(-h\u304chelp\u3067\u57cb\u307e\u3063\u3066\u3066\u3001rails\u3067IP\u30b5\u30fc\u30d0\u30fc\u8d77\u52d5\u6642\u306e\u30b3\u30de\u30f3\u30c9\u304c```rails s -b <IP Address>```\u3060\u3063\u305f\u306e\u3067...)\n\n```argparse_sample.py\np = argparse.ArgumentParser()\n\np.add_argument('-b', '--binding', default='127.0.0.1')\np.add_argument('-p', '--port', default=3000, type=int)\nargs = p.parse_args()\n\nprint(args.binding)\nprint(args.port)\n```\n\n* IPv4\u3068IPv6\u4e21\u5bfe\u5fdc  \n\u6ce8)\u6b63\u3057\u3044\u65b9\u6cd5\u304b\u306f\u308f\u304b\u3089\u306a\u3044\u3067\u3059\u3002  \n[```socket.inet_pton(address_family, ip_string)```](http://docs.python.jp/2/library/socket.html#socket.inet_pton)\u3092\u7528\u3044\u3066\u3001\u4e0d\u6b63\u306aIP\u30a2\u30c9\u30ec\u30b9\u306e\u5834\u5408socket.error\u304c\u767a\u751f\u3059\u308b\u3053\u3068\u3092\u5229\u7528\u3057\u3066\u3001IPv4\u304bIPv6\u3092\u5224\u5b9a\u3057\u305f\u3002\n\n```confirm_address_family.py\naddress_family = socket.AF_INET\n\ntry:\n  socket.inet_pton(address_family, host)\nexcept:\n  address_family = socket.AF_INET6\n  try:\n    socket.inet_pton(address_family, host)\n  except:\n    raise Exception , \"invalid host. please confirm the value of -b or --binding\"\nfinally:\n  print('address_family is %s' %address_family)\n```\n\n### \u5b9f\u88c5(c\u8a00\u8a9e:[github](https://github.com/kojisato118/computer_networking_report1/blob/master/tcp_client.c))\n* TCP\u901a\u4fe1\u306e\u4ed5\u65b9:IPv4  \n\n1. [int socket(int domain, int type, int protocol);](https://linuxjm.osdn.jp/html/LDP_man-pages/man2/socket.2.html)\u3067socket\u3092\u4f5c\u6210\u3059\u308b\u3002\n2. sockaddr_in\u69cb\u9020\u4f53\u306bAddress Family\u3068port\u3092\u6307\u5b9a\u3059\u308b\u3002\n3. [int inet_pton(int af, const char *src, void *dst);](https://linuxjm.osdn.jp/html/LDP_man-pages/man3/inet_pton.3.html)\u3067\u6587\u5b57\u5217 src \u3092\u3001\u30a2\u30c9\u30ec\u30b9\u30d5\u30a1\u30df\u30ea\u30fc af \u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a2\u30c9\u30ec\u30b9\u69cb\u9020\u4f53\u306b\u5909\u63db\u3057\u3001dst \u306b\u30b3\u30d4\u30fc\u3059\u308b\u3002\n4. [int connect(int sockfd, const struct sockaddr *addr,\n            socklen_t addrlen);](https://linuxjm.osdn.jp/html/LDP_man-pages/man2/connect.2.html)\u3067\u30b5\u30fc\u30d0\u306b\u7e4b\u3050\u3002\n\n```ipv4_simple_client.c\nint family = AF_INET;\nint sock = socket(family, SOCK_STREAM, 0);\n\nstruct sockaddr_in server;\nserver.sin_family = family;\nserver.sin_port = htons(port);\n\nint pton = inet_pton(family, host, &server.sin_addr);\nif (s != 1){\n  perror(\"invalid host.\");\n  exit(1);\n}\n\nint  con = connect(sock, (struct sockaddr *)&server, sizeof(server));\nif (con < 0){\n  perror(\"connection failure.\");\n  exit(1);\n}\n\nchar buf[244];\nmemset(buf, 0, sizeof(buf));\nread(sock, buf, sizeof(buf));\nprintf(\"%s\\n\", buf);\n```\n* TCP\u901a\u4fe1\u306e\u4ed5\u65b9:IPv6  \n\u57fa\u672c\u7684\u306bIPv4\u3068\u540c\u3058\u3002IPv6\u5411\u3051\u306e\u69cb\u9020\u4f53\u3068\u304b\u3092\u5229\u7528\u3059\u308b\u3088\u3046\u5909\u66f4 \n\n```ipv6_simple_client.c\nint family = AF_INET6;\nint sock = socket(family, SOCK_STREAM, 0);\n\nstruct sockaddr_in6 server;\nserver.sin6_family = family;\nserver.sin6_port = htons(port);\n\nint pton = inet_pton(family, host, &server.sin6_addr);\nif (s != 1){\n  perror(\"invalid host.\");\n  exit(1);\n}\n\nint  con = connect(sock, (struct sockaddr *)&server, sizeof(server));\nif (con < 0){\n  perror(\"connection failure.\");\n  exit(1);\n}\n\nchar buf[244];\nmemset(buf, 0, sizeof(buf));\nread(sock, buf, sizeof(buf));\nprintf(\"%s\\n\", buf);\n```\n\n\n* \u5f15\u6570\u306e\u6e21\u3057\u65b9  \n[getopt](https://linuxjm.osdn.jp/html/LDP_man-pages/man3/getopt.3.html)\u3092\u4f7f\u3046\u3002\u4f7f\u3044\u65b9\u306f[\u3053\u3053](http://www.fireproject.jp/feature/c-language/basic-library/getargs.html)\u3092\u53c2\u7167\u3002\u30dd\u30fc\u30c8\u6307\u5b9a\u306f```-p```\u3068\u3057\u3001host\u6307\u5b9a\u306f```-b```\u306b\u3057\u305f\u3002\n\n```getopt_sample.c\nint result;\nchar *host;\nint port;\n\nwhile((result=getopt(argc,argv,\"b:p:\"))!=-1){\n  switch(result){\n\n  case 'b':\n    host = optarg;\n    break;\n  case 'p':\n    port = atoi(optarg);\n    break;\n  }\n}\n```\n\n* IPv4\u3068IPv6\u4e21\u5bfe\u5fdc  \n\u6ce8)\u6b63\u3057\u3044\u65b9\u6cd5\u304b\u306f\u308f\u304b\u3089\u306a\u3044\u3067\u3059\u3002  \ninet_pton\u3092\u7528\u3044\u3066\u3001\u6210\u529f\u306e\u5834\u5408\u306f\u8fd4\u308a\u5024\u304c1\u3068\u306a\u308b\u3053\u3068\u3092\u5229\u7528\u3057\u3066\u3001IPv4\u304bIPv6\u3092\u5224\u5b9a\u3057\u305f[\u53c2\u8003\u30da\u30fc\u30b8](http://d.hatena.ne.jp/harre_orz/20120511/1336664448)\u3002python\u3068\u9055\u3063\u3066\u3001inet_pton\u306e\u5f15\u6570\u306bAddress Family\u306b\u9069\u3057\u305f\u69cb\u9020\u4f53\u3092\u6e21\u3055\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u305f\u3081\u3001\u3044\u308d\u3044\u308d\u3084\u3084\u3053\u3057\u304f\u306a\u3063\u305f\u3002\u307e\u305f\u3001connect\u306e\u7b2c\u4e09\u5f15\u6570\u306esize\u306fsockaddr\u69cb\u9020\u4f53\u306esize\u3067\u306a\u304fsockaddr_in\u307e\u305f\u306fsockaddr_in6\u306esize\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u8a73\u3057\u304f\u306f[github\u306e\u30b3\u30fc\u30c9](https://github.com/kojisato118/computer_networking_report1/blob/master/tcp_client.c)\u3067\u3002\n", "tags": ["TCP", "\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0", "C", "Python"]}