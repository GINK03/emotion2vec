{"context": "Python\u3067\u6700\u9069\u5316\u554f\u984c\u3092\u89e3\u304f\u3002\u826f\u3044\u30b5\u30f3\u30d7\u30eb\u306f\u306a\u3044\u3082\u306e\u304b\u3068\u601d\u3063\u3066\u63a2\u3057\u3066\u3044\u305f\u3089\u3001Nelder Mead\u6cd5\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308bMATLAB\u306e\u95a2\u6570fminsearch\u304c\u826f\u3055\u305d\u3046\u3002\n\nMATLAB\u306e\u4f8b\nMATLAB\u306b\u306f\u3001\u6700\u9069\u5316\u306e\u305f\u3081\u306e\u95a2\u6570\u3092\u63c3\u3048\u305foptimization toolbox\u3068\u3044\u3046\u6709\u6599\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u308b\u304c\u3001MATLAB\u672c\u4f53\u3060\u3051\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3042\u308b\u72b6\u614b\u3067\u3082\u3053\u306efminsearch\u3092\u4f7f\u3046\u3053\u3068\u306f\u3067\u304d\u308b\u3002\na = sqrt(2);\nbanana = @(x)100*(x(2)-x(1)^2)^2+(a-x(1))^2;\n[x,fval] = fminsearch(banana, [-1.2, 1], optimset('TolX',1e-8));\n\n\u3053\u308c\u306f\u3001fminsearch\u306e\u30da\u30fc\u30b8\u306b\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u4f8b\u305d\u306e\u307e\u307e\u3060\u3051\u308c\u3069\u3001\u3053\u306e\u5f0f\u3092\u6700\u5c0f\u5316\u3059\u308bX\u3092Nelder-Mead\u6cd5\u3067\u6c42\u3081\u3066\u3044\u308b\u3002\n\n\nPython\u306b\u79fb\u690d\n\u4e0a\u8a18\u306ebanana\u95a2\u6570\u306e\u4f8b\u3092\u3001Python\u306b\u79fb\u690d\u3059\u308b\u3002Python\u3067\u3053\u306e\u6700\u9069\u5316\u554f\u984c\u3092\u89e3\u304f\u305f\u3081\u306b\u306f\u3001Scipy\u306e\u529b\u3092\u501f\u308a\u308b\u3002\n\nScipy.optimize\nScipy.optimize\u306b\u3066\u3001\u3044\u308d\u3044\u308d\u306a\u6700\u9069\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u898b\u308b\u3068\u5206\u304b\u308b\u3002\n\u5358\u7d14\u306b\u79fb\u690d\u3059\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u308b\u3002\nfrom scipy.optimize import fmin\nimport math\n\nbanana = lambda X, a: 100*(X[1] - X[0]**2)**2 + (a - X[0])**2\na = math.sqrt(2)\narg = (a, )\nfmin(banana, [-1, 1.2], args=arg)\n\n\n(x1, x2) = (-1, 1.2)\u3068\u3044\u3046\u521d\u671f\u5024\u3092\u304a\u3044\u3066\u3001\u4e0a\u8a18\u306e\u5f0f\u306e\u5024\u3092\u6700\u5c0f\u5316\u3059\u308b\u3079\u304f\u6700\u9069\u5316\u3092\u884c\u3063\u305f\u3068\u3053\u308d\u3001(x1, x2) = (1.41420186, 1.99996718) \u3068\u3044\u3046\u7d50\u679c\u304c\u5f97\u3089\u308c\u305f\u3001\u3068\u3044\u3046\u3053\u3068\u3092\u793a\u3057\u3066\u3044\u308b\u3002\n\u3053\u3053\u3067\u307e\u305a\u5927\u4e8b\u306a\u306e\u306f\u3001lambda\u306b\u3088\u308b\u95a2\u6570\u306e\u5b9a\u7fa9\u3060\u3002\u3068\u306f\u3044\u3048\u3001\u3053\u308c\u306fPython\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3092\u3084\u308b\u3068\u5fc5\u305a\u51fa\u3066\u304f\u308b\u5185\u5bb9\u3067\u3082\u3042\u308b\u3057\u3001\u305d\u3093\u306a\u306b\u6c17\u306b\u3059\u308b\u30dd\u30a4\u30f3\u30c8\u3067\u306f\u306a\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002\u3053\u3053\u3067\u306f\u3001\u300cX\u3068\u3044\u3046\u30ea\u30b9\u30c8\u3068\u3001a\u3068\u3044\u3046\u5909\u6570\u3092\u5f15\u6570\u3068\u3057\u3066\u6e21\u3059\u300d\u3068\u3044\u3046\u3053\u3068\u304c\u91cd\u8981\u3067\u3001fmin\u306b\u3088\u3063\u3066\u8abf\u6574\u3055\u308c\u308b\u5909\u6570\u306fX\u3068\u3044\u3046\u30ea\u30b9\u30c8\u3067\u6e21\u3055\u308c\u308b\uff12\u3064\u306e\u5909\u6570\u3067\u3042\u308a\u3001a\u306f\u5b9a\u6570\u3068\u3057\u3066\u6e21\u3055\u308c\u308b\u3068\u3044\u3046\u3053\u3068\u3092\u610f\u5473\u3057\u3066\u3044\u308b\u3002\u3082\u3061\u308d\u3093\u3001\u666e\u901a\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u3066\u3082\u3088\u3044\u3002\ndef banana(X, a):\n    return 100*(X[1] - X[0]**2)**2 + (a - X[0])**2\n\n\u3055\u3066\u3001fmin\u306e\u5f15\u6570\u306f\u3001\u6700\u5c0f\u5316\u3059\u308b\u76ee\u7684\u95a2\u6570\u3068\u3001\u305d\u306e\u95a2\u6570\u5024\u3092\u6700\u5c0f\u5316\u3059\u308b\u305f\u3081\u306b\u6700\u9069\u5316\u3059\u308b\u3053\u3068\u3092\u76ee\u7684\u3068\u3059\u308b\u5909\u6570\u3068\u3001fmin\u306b\u3088\u308b\u6700\u9069\u5316\u3092\u3059\u308b\u5bfe\u8c61\u3067\u306f\u306a\u3044\u3051\u308c\u3069\u95a2\u6570\u306b\u5165\u529b\u3059\u308b\u5f15\u6570\u306e\u30bf\u30d7\u30eb\u3067\u3042\u308b\u3002\n\u4eca\u56de\u3001\u76ee\u7684\u95a2\u6570banana\u306b\u5165\u529b\u3059\u308b\u5f15\u6570\u306e\u3046\u3061\u5b9a\u6570\u3068\u3057\u3066\u5165\u529b\u3059\u308ba\u306f\u3001fmin\u306e\u5f15\u6570args\u306b\u30bf\u30d7\u30eb\u3068\u3057\u3066\u6e21\u3059\u306e\u3067\u3001arg=(a, )\u3068\u3057\u3066\u3044\u308b\u3002\u8981\u7d20\u6570\u304c1\u306e\u30bf\u30d7\u30eb\u3092\u5b9a\u7fa9\u3059\u308b\u5834\u5408\u306f\u3001\u300c,\u300d\u3067\u7d42\u308f\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n\u6700\u9069\u5316\u306e\u305f\u3081\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u8a2d\u5b9a\n\u6700\u9069\u5316\u306e\u305f\u3081\u306b\u3001\u69d8\u3005\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u6700\u9069\u5316\u3068\u3044\u3046\u30e4\u30c4\u306f\u300c\u95a2\u6570\u306e\u5024\u304c\u53ce\u675f\u3059\u308b\u307e\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u3044\u3058\u308b\u300d\u3068\u3044\u3046\u3053\u3068\u3092\u3059\u308b\u306e\u3060\u3051\u308c\u3069\u3001\u300c\u53ce\u675f\u3057\u305f\u300d\u3068\u5224\u65ad\u3059\u308b\u6761\u4ef6\u306f\u69d8\u3005\u3060\u3002\u305d\u306e\u6761\u4ef6\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u8a73\u7d30\u306f\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u3068\u304a\u308a\u3002\n\u3067\u306f\u3001\u6700\u5927\u95a2\u6570\u8a55\u4fa1\u306e\u56de\u6570\u3092400\u56de\u3001\u53cd\u5fa9\u306e\u6700\u5927\u56de\u6570\u3092400\u56de\u3001\u95a2\u6570\u306e\u7d42\u4e86\u5024\u8a31\u5bb9\u8aa4\u5dee\u30921e-4\u3001X\u306e\u8a31\u5bb9\u8aa4\u5dee\u30921e-4\u3068\u3059\u308b(MATLAB\u306efminsearch\u306edefault\u5024)\u3068\u6c7a\u3081\u3066\u3001\u660e\u793a\u7684\u306b\u30bd\u30ec\u3092\u6307\u5b9a\u3059\u308b\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306bfmin\u3092\u547c\u3076\u3002\nfmin(banana, [-1, 1.2], args=arg, xtol=1e-4, ftol=1e-4, maxiter=400, maxfun=400)\n\n\n\u6700\u9069\u5316\u904e\u7a0b\u3092\u53ef\u8996\u5316\u3057\u305f\u3044\n\u3055\u3066\u3001banana\u95a2\u6570\u7a0b\u5ea6\u306e\u6700\u9069\u5316\u3060\u3068\u3001\u4e00\u77ac\u3067\u7d42\u308f\u3063\u3066\u3057\u307e\u3046\u306e\u3060\u3051\u308c\u3069\u3001\u3053\u306e\u6700\u9069\u5316\u8a08\u7b97\u306e\u904e\u7a0b\u3092\u53ef\u8996\u5316\u3057\u305f\u3044\u5834\u5408\u304c\u3042\u308b\u3002\n\u305d\u3046\u3044\u3046\u5834\u5408\u306b\u306f\u3001callback\u95a2\u6570\u3092\u6307\u5b9a\u3057\u3001iteration\u3054\u3068\u306e\u5024\u3092\u53d6\u308a\u51fa\u3059\u3088\u3046\u306b\u3059\u308b\u3002\ncount = 0\ndef cbf(Xi):\n    global count\n    count += 1\n    print('%d, %f, %f, %f' % (count, Xi[0], Xi[1], banana(Xi, math.sqrt(2))))\n\n\u3053\u308c\u304c\u6b63\u3057\u3044\u3084\u308a\u65b9\u306a\u306e\u304b\u3069\u3046\u304b\u3061\u3087\u3063\u3068\u81ea\u4fe1\u304c\u306a\u3044\u306e\u3060\u3051\u308c\u3069\u3001iteration\u306e\u56de\u6570\u3092\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3068\u3057\u3066\u6301\u3063\u3066\u3001\u30ab\u30a6\u30f3\u30c8\u30a2\u30c3\u30d7\u3057\u3066\u8868\u793a\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u305f\u3002\niteration\u3054\u3068\u306b\u8a08\u7b97\u7d50\u679c\u3092\u30c6\u30ad\u30b9\u30c8\u3067\u51fa\u529b\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3066\u3001\u30b0\u30e9\u30d5\u306b\u8868\u73fe\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\nfrom scipy.optimize import fmin\nimport math\nimport matplotlib.pyplot as plt\n\ncount = 0\nplt.axis([0, 100, 0, 6.5])\nplt.ion()\n\ndef cbf(Xi):\n    global count\n    count += 1\n    f = banana(Xi, math.sqrt(2))\n    print('%d, %f, %f, %f' % (count, Xi[0], Xi[1], f))\n    plt.scatter(count, f)\n\nbanana = lambda X, a: 100*(X[1] - X[0]**2)**2 + (a - X[0])**2\na = math.sqrt(2)\narg = (a, )\nfmin(banana, [-1, 1.2], args=arg, callback=cbf)\n\n\u3053\u308c\u3067\u3001matplotlib\u3067\u30b0\u30e9\u30d5\u306b\u70b9\u304c\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306bplot\u3055\u308c\u3066\u3044\u304f\u69d8\u5b50\u3092\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\n\u6700\u9069\u5316\u8a08\u7b97\u7d50\u679c\u306e\u53d6\u308a\u51fa\u3057\nfmin\u306b\u3088\u308b\u8a08\u7b97\u7d50\u679c\u3068\u3057\u3066\u3001\u4e0a\u8ff0\u306e\u3088\u3046\u306b(x1, x2) = (1.41420186, 1.99996718) \u3068\u3044\u3046\u7d50\u679c\u304c\u5f97\u3089\u308c\u305f\u3068\u3057\u3066\u3001\u4eba\u306f\u5f80\u3005\u306b\u3057\u3066\u305d\u306e\u7d50\u679c\u304c\u5f97\u3089\u308c\u305f\u904e\u7a0b\u306b\u3064\u3044\u3066\u3082\u3046\u5c11\u3057\u8a73\u3057\u304f\u8aac\u660e\u3059\u308b\u3088\u3046\u306b\u6c42\u3081\u304c\u3061\u3067\u3042\u308b\u3002\u3044\u3084\u3001\u30a6\u30c1\u306e\u4e0a\u53f8\u3082\u306d(\u4ee5\u4e0b\u7565)\u2026\u3002\n\u305d\u306e\u305f\u3081\u306efmin\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u3057\u3066\u3001retall\u3068full_output\u3044\u3046\u5f15\u6570\u304c\u3042\u308a\u3001\u3053\u308c\u306bTrue\u3092\u8a2d\u5b9a\u3059\u308b\u3068\u3001fmin\u306e\u623b\u308a\u5024\u3092\u5404\u7a2e\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n[xopt, fopt, iter, funcalls, warnflag, allvecs] = fmin(banana, [-1, 1.2], args=arg, retall=True, full_output=True)\n\nxopt\u306f\u6700\u9069\u5316\u3055\u308c\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3067\u3042\u308a\u3001fopt\u304c\u305d\u306e\u6642\u306e\u6700\u5c0f\u5316\u3055\u308c\u305f\u95a2\u6570\u306e\u623b\u308a\u5024\u3067\u3042\u308b\u3002iter\u3068funcallls\u306fiteration\u304c\u4f55\u56de\u884c\u308f\u308c\u305f\u306e\u304b\u3067\u3001warnflag\u306f\u300c\u53ce\u675f\u3057\u305f\u300d\u3068\u5224\u65ad\u3057\u305f\u6761\u4ef6\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3002allvecs \u306b\u306f\u3001\u5404iteration\u3067\u6700\u9069\u5316\u306e\u5bfe\u8c61\u3068\u306a\u3063\u3066\u3044\u308b\u5909\u6570\u306e\u5024(\u4e0a\u8ff0\u306ebanana\u95a2\u6570\u306e\u4f8b\u3067\u3044\u3046\u3068x1\u3068x2\u306e\u5024)\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001iteration\u3054\u3068\u306b\u5909\u6570\u304c\u8abf\u6574\u3055\u308c\u3066\u3044\u3063\u305f\u5c65\u6b74\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f\u3001callback\u95a2\u6570\u5185\u3067\u51e6\u7406\u305b\u305a\u3068\u3082\u3001fmin\u306b\u3088\u308b\u6700\u9069\u5316\u5f8c\u306b\u30b0\u30e9\u30d5\u5316\u3059\u308b\u306a\u3069\u53ef\u8996\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\u672c\u65e5\u306e\u307e\u3068\u3081\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001MATLAB\u306efminsearch\u95a2\u6570\u306e\u4f8b\u3092\u5f15\u304d\u5408\u3044\u306b\u3060\u3057\u3066\u3001Python\u3067\u540c\u69d8\u306e\u3053\u3068\u3092\u5b9f\u65bd\u3057\u3066\u307f\u305f\u3002\nfrom scipy.optimize import fmin\nimport math\nimport matplotlib.pyplot as plt\n\n\ndef cbf(Xi):\n    global count\n    count += 1\n    f = banana(Xi, math.sqrt(2))\n    plt.scatter(count, f)\n    plt.pause(0.05)\n\n\ndef banana(X, a):\n    return 100*(X[1] - X[0]**2)**2 + (a - X[0])**2\n\n\ndef main():\n    a = math.sqrt(2)\n    arg = (a, )\n    [xopt, fopt, iter, funcalls, warnflag, allvecs] = fmin(\n        banana,\n        [-1, 1.2],\n        args=arg,\n        callback=cbf,\n        xtol=1e-4,\n        ftol=1e-4,\n        maxiter=400,\n        maxfun=400,\n        disp=True,\n        retall=True,\n        full_output=True)\n    for item in allvecs:\n        print('%f, %f' % (item[0], item[1]))\n\nif __name__ == '__main__':\n    count = 1\n    plt.axis([0, 100, 0, 6.5])\n    main()\n\n\n\n\u672c\u65e5\u306e\u30b3\u30fc\u30c9\n\nhttps://github.com/fukuit/Python_SelfLearning/blob/master/optimize/py_fmin.py\n\n\nPython\u3067\u6700\u9069\u5316\u554f\u984c\u3092\u89e3\u304f\u3002\u826f\u3044\u30b5\u30f3\u30d7\u30eb\u306f\u306a\u3044\u3082\u306e\u304b\u3068\u601d\u3063\u3066\u63a2\u3057\u3066\u3044\u305f\u3089\u3001[Nelder Mead\u6cd5](https://ja.wikipedia.org/wiki/%E3%83%8D%E3%83%AB%E3%83%80%E3%83%BC%E2%80%93%E3%83%9F%E3%83%BC%E3%83%89%E6%B3%95)\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b[MATLAB\u306e\u95a2\u6570fminsearch](https://jp.mathworks.com/help/matlab/ref/fminsearch.html)\u304c\u826f\u3055\u305d\u3046\u3002\n\n# MATLAB\u306e\u4f8b\nMATLAB\u306b\u306f\u3001\u6700\u9069\u5316\u306e\u305f\u3081\u306e\u95a2\u6570\u3092\u63c3\u3048\u305foptimization toolbox\u3068\u3044\u3046\u6709\u6599\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u308b\u304c\u3001MATLAB\u672c\u4f53\u3060\u3051\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3042\u308b\u72b6\u614b\u3067\u3082\u3053\u306efminsearch\u3092\u4f7f\u3046\u3053\u3068\u306f\u3067\u304d\u308b\u3002\n\n```MATLAB\na = sqrt(2);\nbanana = @(x)100*(x(2)-x(1)^2)^2+(a-x(1))^2;\n[x,fval] = fminsearch(banana, [-1.2, 1], optimset('TolX',1e-8));\n```\n\n\u3053\u308c\u306f\u3001[fminsearch](https://jp.mathworks.com/help/matlab/ref/fminsearch.html)\u306e\u30da\u30fc\u30b8\u306b\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u4f8b\u305d\u306e\u307e\u307e\u3060\u3051\u308c\u3069\u3001\u3053\u306e\u5f0f\u3092\u6700\u5c0f\u5316\u3059\u308bX\u3092Nelder-Mead\u6cd5\u3067\u6c42\u3081\u3066\u3044\u308b\u3002\n![eq.png](https://qiita-image-store.s3.amazonaws.com/0/15553/63bc599c-d5b4-7997-08d2-ee523193ac2e.png \"eq.png\")\n\n# Python\u306b\u79fb\u690d\n\u4e0a\u8a18\u306ebanana\u95a2\u6570\u306e\u4f8b\u3092\u3001Python\u306b\u79fb\u690d\u3059\u308b\u3002Python\u3067\u3053\u306e\u6700\u9069\u5316\u554f\u984c\u3092\u89e3\u304f\u305f\u3081\u306b\u306f\u3001Scipy\u306e\u529b\u3092\u501f\u308a\u308b\u3002\n## Scipy.optimize\nScipy.optimize\u306b\u3066\u3001[\u3044\u308d\u3044\u308d\u306a\u6700\u9069\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b](https://docs.scipy.org/doc/scipy-0.18.1/reference/optimize.html)\u3053\u3068\u304c\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u898b\u308b\u3068\u5206\u304b\u308b\u3002\n\n\u5358\u7d14\u306b\u79fb\u690d\u3059\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n```Python\nfrom scipy.optimize import fmin\nimport math\n\nbanana = lambda X, a: 100*(X[1] - X[0]**2)**2 + (a - X[0])**2\na = math.sqrt(2)\narg = (a, )\nfmin(banana, [-1, 1.2], args=arg)\n```\n\n![20170128_001.png](https://qiita-image-store.s3.amazonaws.com/0/15553/5c1887da-bd80-7c37-1b84-f32839cf73ed.png \"20170128_001.png\")\n\n(x<sub>1</sub>, x<sub>2</sub>) = (-1, 1.2)\u3068\u3044\u3046\u521d\u671f\u5024\u3092\u304a\u3044\u3066\u3001\u4e0a\u8a18\u306e\u5f0f\u306e\u5024\u3092\u6700\u5c0f\u5316\u3059\u308b\u3079\u304f\u6700\u9069\u5316\u3092\u884c\u3063\u305f\u3068\u3053\u308d\u3001(x<sub>1</sub>, x<sub>2</sub>) = (1.41420186, 1.99996718) \u3068\u3044\u3046\u7d50\u679c\u304c\u5f97\u3089\u308c\u305f\u3001\u3068\u3044\u3046\u3053\u3068\u3092\u793a\u3057\u3066\u3044\u308b\u3002\n\n\u3053\u3053\u3067\u307e\u305a\u5927\u4e8b\u306a\u306e\u306f\u3001```lambda```\u306b\u3088\u308b\u95a2\u6570\u306e\u5b9a\u7fa9\u3060\u3002\u3068\u306f\u3044\u3048\u3001\u3053\u308c\u306fPython\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3092\u3084\u308b\u3068\u5fc5\u305a\u51fa\u3066\u304f\u308b\u5185\u5bb9\u3067\u3082\u3042\u308b\u3057\u3001\u305d\u3093\u306a\u306b\u6c17\u306b\u3059\u308b\u30dd\u30a4\u30f3\u30c8\u3067\u306f\u306a\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002\u3053\u3053\u3067\u306f\u3001\u300cX\u3068\u3044\u3046\u30ea\u30b9\u30c8\u3068\u3001a\u3068\u3044\u3046\u5909\u6570\u3092\u5f15\u6570\u3068\u3057\u3066\u6e21\u3059\u300d\u3068\u3044\u3046\u3053\u3068\u304c\u91cd\u8981\u3067\u3001```fmin```\u306b\u3088\u3063\u3066\u8abf\u6574\u3055\u308c\u308b\u5909\u6570\u306fX\u3068\u3044\u3046\u30ea\u30b9\u30c8\u3067\u6e21\u3055\u308c\u308b\uff12\u3064\u306e\u5909\u6570\u3067\u3042\u308a\u3001a\u306f\u5b9a\u6570\u3068\u3057\u3066\u6e21\u3055\u308c\u308b\u3068\u3044\u3046\u3053\u3068\u3092\u610f\u5473\u3057\u3066\u3044\u308b\u3002\u3082\u3061\u308d\u3093\u3001\u666e\u901a\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u3066\u3082\u3088\u3044\u3002\n\n```Python\ndef banana(X, a):\n\treturn 100*(X[1] - X[0]**2)**2 + (a - X[0])**2\n```\n\n\n\u3055\u3066\u3001```fmin```\u306e\u5f15\u6570\u306f\u3001\u6700\u5c0f\u5316\u3059\u308b\u76ee\u7684\u95a2\u6570\u3068\u3001\u305d\u306e\u95a2\u6570\u5024\u3092\u6700\u5c0f\u5316\u3059\u308b\u305f\u3081\u306b\u6700\u9069\u5316\u3059\u308b\u3053\u3068\u3092\u76ee\u7684\u3068\u3059\u308b\u5909\u6570\u3068\u3001```fmin```\u306b\u3088\u308b\u6700\u9069\u5316\u3092\u3059\u308b\u5bfe\u8c61\u3067\u306f\u306a\u3044\u3051\u308c\u3069\u95a2\u6570\u306b\u5165\u529b\u3059\u308b\u5f15\u6570\u306e\u30bf\u30d7\u30eb\u3067\u3042\u308b\u3002\n\u4eca\u56de\u3001\u76ee\u7684\u95a2\u6570```banana```\u306b\u5165\u529b\u3059\u308b\u5f15\u6570\u306e\u3046\u3061\u5b9a\u6570\u3068\u3057\u3066\u5165\u529b\u3059\u308b```a```\u306f\u3001```fmin```\u306e\u5f15\u6570```args```\u306b\u30bf\u30d7\u30eb\u3068\u3057\u3066\u6e21\u3059\u306e\u3067\u3001```arg=(a, )```\u3068\u3057\u3066\u3044\u308b\u3002\u8981\u7d20\u6570\u304c1\u306e\u30bf\u30d7\u30eb\u3092\u5b9a\u7fa9\u3059\u308b\u5834\u5408\u306f\u3001\u300c```,```\u300d\u3067\u7d42\u308f\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n## \u6700\u9069\u5316\u306e\u305f\u3081\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u8a2d\u5b9a\n\u6700\u9069\u5316\u306e\u305f\u3081\u306b\u3001\u69d8\u3005\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u6700\u9069\u5316\u3068\u3044\u3046\u30e4\u30c4\u306f\u300c\u95a2\u6570\u306e\u5024\u304c\u53ce\u675f\u3059\u308b\u307e\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u3044\u3058\u308b\u300d\u3068\u3044\u3046\u3053\u3068\u3092\u3059\u308b\u306e\u3060\u3051\u308c\u3069\u3001\u300c\u53ce\u675f\u3057\u305f\u300d\u3068\u5224\u65ad\u3059\u308b\u6761\u4ef6\u306f\u69d8\u3005\u3060\u3002\u305d\u306e\u6761\u4ef6\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u8a73\u7d30\u306f\u3001[\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](https://docs.scipy.org/doc/scipy-0.18.1/reference/generated/scipy.optimize.fmin.html#scipy.optimize.fmin)\u306e\u3068\u304a\u308a\u3002\n\n\u3067\u306f\u3001\u6700\u5927\u95a2\u6570\u8a55\u4fa1\u306e\u56de\u6570\u3092400\u56de\u3001\u53cd\u5fa9\u306e\u6700\u5927\u56de\u6570\u3092400\u56de\u3001\u95a2\u6570\u306e\u7d42\u4e86\u5024\u8a31\u5bb9\u8aa4\u5dee\u30921e-4\u3001X\u306e\u8a31\u5bb9\u8aa4\u5dee\u30921e-4\u3068\u3059\u308b([MATLAB\u306efminsearch\u306edefault\u5024](https://jp.mathworks.com/help/matlab/ref/fminsearch.html))\u3068\u6c7a\u3081\u3066\u3001\u660e\u793a\u7684\u306b\u30bd\u30ec\u3092\u6307\u5b9a\u3059\u308b\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b```fmin```\u3092\u547c\u3076\u3002\n\n```Python\nfmin(banana, [-1, 1.2], args=arg, xtol=1e-4, ftol=1e-4, maxiter=400, maxfun=400)\n```\n\n## \u6700\u9069\u5316\u904e\u7a0b\u3092\u53ef\u8996\u5316\u3057\u305f\u3044\n\u3055\u3066\u3001banana\u95a2\u6570\u7a0b\u5ea6\u306e\u6700\u9069\u5316\u3060\u3068\u3001\u4e00\u77ac\u3067\u7d42\u308f\u3063\u3066\u3057\u307e\u3046\u306e\u3060\u3051\u308c\u3069\u3001\u3053\u306e\u6700\u9069\u5316\u8a08\u7b97\u306e\u904e\u7a0b\u3092\u53ef\u8996\u5316\u3057\u305f\u3044\u5834\u5408\u304c\u3042\u308b\u3002\n\u305d\u3046\u3044\u3046\u5834\u5408\u306b\u306f\u3001callback\u95a2\u6570\u3092\u6307\u5b9a\u3057\u3001iteration\u3054\u3068\u306e\u5024\u3092\u53d6\u308a\u51fa\u3059\u3088\u3046\u306b\u3059\u308b\u3002\n\n```Python\ncount = 0\ndef cbf(Xi):\n\tglobal count\n    count += 1\n    print('%d, %f, %f, %f' % (count, Xi[0], Xi[1], banana(Xi, math.sqrt(2))))\n```\n\n\u3053\u308c\u304c\u6b63\u3057\u3044\u3084\u308a\u65b9\u306a\u306e\u304b\u3069\u3046\u304b\u3061\u3087\u3063\u3068\u81ea\u4fe1\u304c\u306a\u3044\u306e\u3060\u3051\u308c\u3069\u3001iteration\u306e\u56de\u6570\u3092\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3068\u3057\u3066\u6301\u3063\u3066\u3001\u30ab\u30a6\u30f3\u30c8\u30a2\u30c3\u30d7\u3057\u3066\u8868\u793a\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u305f\u3002\n\niteration\u3054\u3068\u306b\u8a08\u7b97\u7d50\u679c\u3092\u30c6\u30ad\u30b9\u30c8\u3067\u51fa\u529b\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3066\u3001\u30b0\u30e9\u30d5\u306b\u8868\u73fe\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n```Python\nfrom scipy.optimize import fmin\nimport math\nimport matplotlib.pyplot as plt\n\ncount = 0\nplt.axis([0, 100, 0, 6.5])\nplt.ion()\n\ndef cbf(Xi):\n    global count\n    count += 1\n    f = banana(Xi, math.sqrt(2))\n    print('%d, %f, %f, %f' % (count, Xi[0], Xi[1], f))\n    plt.scatter(count, f)\n\nbanana = lambda X, a: 100*(X[1] - X[0]**2)**2 + (a - X[0])**2\na = math.sqrt(2)\narg = (a, )\nfmin(banana, [-1, 1.2], args=arg, callback=cbf)\n```\n\n\u3053\u308c\u3067\u3001```matplotlib```\u3067\u30b0\u30e9\u30d5\u306b\u70b9\u304c\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306bplot\u3055\u308c\u3066\u3044\u304f\u69d8\u5b50\u3092\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n![20170128_002.png](https://qiita-image-store.s3.amazonaws.com/0/15553/db3e6015-4df1-8b08-44cc-51b74d8e7b39.png \"20170128_002.png\")\n\n\n\n## \u6700\u9069\u5316\u8a08\u7b97\u7d50\u679c\u306e\u53d6\u308a\u51fa\u3057\n```fmin```\u306b\u3088\u308b\u8a08\u7b97\u7d50\u679c\u3068\u3057\u3066\u3001\u4e0a\u8ff0\u306e\u3088\u3046\u306b(x<sub>1</sub>, x<sub>2</sub>) = (1.41420186, 1.99996718) \u3068\u3044\u3046\u7d50\u679c\u304c\u5f97\u3089\u308c\u305f\u3068\u3057\u3066\u3001\u4eba\u306f\u5f80\u3005\u306b\u3057\u3066\u305d\u306e\u7d50\u679c\u304c\u5f97\u3089\u308c\u305f\u904e\u7a0b\u306b\u3064\u3044\u3066\u3082\u3046\u5c11\u3057\u8a73\u3057\u304f\u8aac\u660e\u3059\u308b\u3088\u3046\u306b\u6c42\u3081\u304c\u3061\u3067\u3042\u308b\u3002\u3044\u3084\u3001\u30a6\u30c1\u306e\u4e0a\u53f8\u3082\u306d(\u4ee5\u4e0b\u7565)\u2026\u3002\n\n\u305d\u306e\u305f\u3081\u306e```fmin```\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u3057\u3066\u3001```retall```\u3068```full_output```\u3044\u3046\u5f15\u6570\u304c\u3042\u308a\u3001\u3053\u308c\u306b```True```\u3092\u8a2d\u5b9a\u3059\u308b\u3068\u3001```fmin```\u306e\u623b\u308a\u5024\u3092\u5404\u7a2e\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n```Python\n[xopt, fopt, iter, funcalls, warnflag, allvecs] = fmin(banana, [-1, 1.2], args=arg, retall=True, full_output=True)\n```\n\n```xopt```\u306f\u6700\u9069\u5316\u3055\u308c\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3067\u3042\u308a\u3001```fopt```\u304c\u305d\u306e\u6642\u306e\u6700\u5c0f\u5316\u3055\u308c\u305f\u95a2\u6570\u306e\u623b\u308a\u5024\u3067\u3042\u308b\u3002```iter```\u3068```funcallls```\u306fiteration\u304c\u4f55\u56de\u884c\u308f\u308c\u305f\u306e\u304b\u3067\u3001```warnflag```\u306f\u300c\u53ce\u675f\u3057\u305f\u300d\u3068\u5224\u65ad\u3057\u305f\u6761\u4ef6\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3002```allvecs``` \u306b\u306f\u3001\u5404iteration\u3067\u6700\u9069\u5316\u306e\u5bfe\u8c61\u3068\u306a\u3063\u3066\u3044\u308b\u5909\u6570\u306e\u5024(\u4e0a\u8ff0\u306ebanana\u95a2\u6570\u306e\u4f8b\u3067\u3044\u3046\u3068x<sub>1</sub>\u3068x<sub>2</sub>\u306e\u5024)\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001iteration\u3054\u3068\u306b\u5909\u6570\u304c\u8abf\u6574\u3055\u308c\u3066\u3044\u3063\u305f\u5c65\u6b74\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f\u3001callback\u95a2\u6570\u5185\u3067\u51e6\u7406\u305b\u305a\u3068\u3082\u3001```fmin```\u306b\u3088\u308b\u6700\u9069\u5316\u5f8c\u306b\u30b0\u30e9\u30d5\u5316\u3059\u308b\u306a\u3069\u53ef\u8996\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n# \u672c\u65e5\u306e\u307e\u3068\u3081\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001MATLAB\u306efminsearch\u95a2\u6570\u306e\u4f8b\u3092\u5f15\u304d\u5408\u3044\u306b\u3060\u3057\u3066\u3001Python\u3067\u540c\u69d8\u306e\u3053\u3068\u3092\u5b9f\u65bd\u3057\u3066\u307f\u305f\u3002\n\n```Python\nfrom scipy.optimize import fmin\nimport math\nimport matplotlib.pyplot as plt\n\n\ndef cbf(Xi):\n    global count\n    count += 1\n    f = banana(Xi, math.sqrt(2))\n    plt.scatter(count, f)\n    plt.pause(0.05)\n\n\ndef banana(X, a):\n    return 100*(X[1] - X[0]**2)**2 + (a - X[0])**2\n\n\ndef main():\n    a = math.sqrt(2)\n    arg = (a, )\n    [xopt, fopt, iter, funcalls, warnflag, allvecs] = fmin(\n        banana,\n        [-1, 1.2],\n        args=arg,\n        callback=cbf,\n        xtol=1e-4,\n        ftol=1e-4,\n        maxiter=400,\n        maxfun=400,\n        disp=True,\n        retall=True,\n        full_output=True)\n    for item in allvecs:\n        print('%f, %f' % (item[0], item[1]))\n\nif __name__ == '__main__':\n    count = 1\n    plt.axis([0, 100, 0, 6.5])\n    main()\n\n```\n\n## \u672c\u65e5\u306e\u30b3\u30fc\u30c9\n+ https://github.com/fukuit/Python_SelfLearning/blob/master/optimize/py_fmin.py\n", "tags": ["Python", "scipy"]}