{"context": " More than 1 year has passed since last update.\u30ac\u30a6\u30b9\u7a4d\u5206\u306e\u8a08\u7b97\u3092\u5bfe\u6570\u7a4d\u5206\u306b\u5bfe\u5fdc\u3057\u305f\u3002\n\u3064\u3044\u3067\u306bsunil\u3055\u3093\u306eweights\u3068abscissa\u8a08\u7b97\u3082\u53d6\u308a\u8fbc\u3093\u3067\u4efb\u610f\u306e\u70b9\u3067\u8a08\u7b97\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\n(\u30b3\u30fc\u30c9\u63b2\u8f09\u306b\u554f\u984c\u304c\u3042\u308c\u3070\u53d6\u308a\u4e0b\u3052\u307e\u3059\u3002)\n\n\u7a4d\u5206\u5f0f\n\u4ee5\u4e0b\u306e\u5f0f\u3092\u8a08\u7b97\u3059\u308b\n\\int_{10^{-4}}^{10^0}{\\pi dr} = \\int_{ln(10^{-4})}^{ln(10^0)}{\\pi r dlnr}\n\n\u7d50\u679c\u306f\u307b\u307c\u03c0\u306e\u5024\u306b\u306a\u308b\u306f\u305a\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\ninteg_gauss.c\n#include <stdio.h>\n#include <math.h>\n\n/*\n * to use log scale\n * $gcc integ_gauss.c -DUSE_LOG_SCALE -lm\n * \n * to use normal scale\n * $gcc integ_gauss.c -lm \n */\n\n//#define USE_LOG_SCALE\n\n/* define paramter constants */\n#define EPS 3.0e-11\n\nstatic void gauleg(double x1, double x2, double x[], double w[], int n);\n\n#define SIZBUF (100)\nconst int kNumGauss = 11;\nstatic double s_weight[SIZBUF];\nstatic double s_abscissa[SIZBUF];\n\nconst double kRmin =  1.e-4;\nconst double kRmax =  1.e0;\n\ndouble myFunc_dr(double r_v)\n{\n    // d[N(r_v)] / d[r_v]\n    double pi = acos(-1.0);\n    return pi;\n}\n\ndouble myFunc_dlnr(double r_v)\n{\n    // d[N(r_v)] / dln[r_v]\n    return myFunc_dr(r_v) * r_v;\n}\n\ndouble wrapperFunc(double x_)\n{\n#ifdef USE_LOG_SCALE\n    return myFunc_dlnr( exp(x_) );\n#else // USE_LOG_SCALE\n    return myFunc_dr(x_);\n#endif // USE_LOG_SCALE \n}\n\nint main(void)\n{\n    int idx;\n    double d0;\n\n#ifdef USE_LOG_SCALE\n    printf(\"in log scale\\n\");\n    gauleg(log(kRmin), log(kRmax), &s_abscissa[0], &s_weight[0], kNumGauss);\n#else\n    printf(\"in normal scale\\n\");\n    gauleg(kRmin, kRmax, &s_abscissa[0], &s_weight[0], kNumGauss);\n#endif  \n\n    d0 = 0.0;\n    for(idx=1; idx<=kNumGauss; idx++) {\n        printf(\"%f %f dbg\\n\", s_abscissa[idx], s_weight[idx]);\n        d0 += ( s_weight[idx] * wrapperFunc(s_abscissa[idx]) );\n    }\n    printf(\"%f\\n\", d0);\n}\n\n// from sunil -------------------------------------------------\n\n/* the function to genearate the abscissa and weights using \nGauss-Legandere  qudrature rules */\nstatic void gauleg(double x1, double x2, double x[], double w[], int n)\n{\n    int m,j,i;\n    double z1,z,xm,xl,pp,p3,p2,p1;\n\n    m=(n+1)/2;\n    xm=0.5*(x2+x1);\n    xl=0.5*(x2-x1);\n/* find m zeros of the Legandere polynomial in the interval -1 to +1 */\n    for (i=1;i<=m;i++) {\n        z=cos(3.141592654*(i-0.25)/(n+0.5));\n        do {\n            p1=1.0;\n            p2=0.0;\n            for (j=1;j<=n;j++) {\n                p3=p2;\n                p2=p1;\n                p1=((2.0*j-1.0)*z*p2-(j-1.0)*p3)/j;\n            }\n            pp=n*(z*p1-p2)/(z*z-1.0);\n            z1=z;\n            z=z1-p1/pp;\n        } while (fabs(z-z1) > EPS);\n/* rescale the values to the limits required */\n        x[i]=xm-xl*z;\n        x[n+1-i]=xm+xl*z;\n/* calculate the weight */\n        w[i]=2.0*xl/((1.0-z*z)*pp*pp);\n        w[n+1-i]=w[i];\n    }\n}\n#undef EPS\n\n\n\n\u5b9f\u884c\u4f8b\n\u5b9f\u884c\u65b9\u6cd5\u306f\u30bd\u30fc\u30b9\u306e\u30d8\u30c3\u30c0\u306b\u8a18\u8f09\u3057\u3066\u3044\u308b\u901a\u308a\u3002\nnormal\u30b9\u30b1\u30fc\u30eb\u3067\u7a4d\u5206\u3059\u308b\u5834\u5408\n\n$ gcc integ_gauss.c -lm\n$ ./a.out\nin normal scale\n0.010985 0.027832 dbg\n0.056563 0.062784 dbg\n0.135011 0.093136 dbg\n0.240528 0.116585 dbg\n0.365292 0.131389 dbg\n0.500050 0.136449 dbg\n0.634808 0.131389 dbg\n0.759572 0.116585 dbg\n0.865089 0.093136 dbg\n0.943537 0.062784 dbg\n0.989115 0.027832 dbg\n3.141278\n\n\u5bfe\u6570\u30b9\u30b1\u30fc\u30eb\u3067\u7a4d\u5206\u3059\u308b\u5834\u5408\n\n$ gcc integ_gauss.c -DUSE_LOG_SCALE -lm\n$ ./a.out\nin log scale\n-9.110080 0.256363 dbg\n-8.690244 0.578319 dbg\n-7.967644 0.857898 dbg\n-6.995696 1.073897 dbg\n-5.846462 1.210260 dbg\n-4.605170 1.256866 dbg\n-3.363878 1.210260 dbg\n-2.214644 1.073897 dbg\n-1.242696 0.857898 dbg\n-0.520096 0.578319 dbg\n-0.100261 0.256363 dbg\n3.141278\n\n\u4e21\u8005\u3068\u30823.1412...\u3068\u307b\u307c\u540c\u3058\u7d50\u679c\u3068\u306a\u3063\u305f\u3002\nkNumGauss (=11)\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u3067\u5206\u70b9\u306e\u6570\u3092\u5909\u66f4\u3067\u304d\u308b\u3002\n[\u30ac\u30a6\u30b9\u7a4d\u5206](http://qiita.com/7of9/items/4aeb1b04dab9ce2fdf1f)\u306e\u8a08\u7b97\u3092\u5bfe\u6570\u7a4d\u5206\u306b\u5bfe\u5fdc\u3057\u305f\u3002\n\n\u3064\u3044\u3067\u306b[sunil](http://www.physics.iitm.ac.in/~sunil/differentiate-integrate.html)\u3055\u3093\u306eweights\u3068abscissa\u8a08\u7b97\u3082\u53d6\u308a\u8fbc\u3093\u3067\u4efb\u610f\u306e\u70b9\u3067\u8a08\u7b97\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\n(\u30b3\u30fc\u30c9\u63b2\u8f09\u306b\u554f\u984c\u304c\u3042\u308c\u3070\u53d6\u308a\u4e0b\u3052\u307e\u3059\u3002)\n\n#\u7a4d\u5206\u5f0f\n\u4ee5\u4e0b\u306e\u5f0f\u3092\u8a08\u7b97\u3059\u308b\n\n```math\n\\int_{10^{-4}}^{10^0}{\\pi dr} = \\int_{ln(10^{-4})}^{ln(10^0)}{\\pi r dlnr}\n```\n\u7d50\u679c\u306f\u307b\u307c\u03c0\u306e\u5024\u306b\u306a\u308b\u306f\u305a\n\n#\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n```integ_gauss.c\n#include <stdio.h>\n#include <math.h>\n\n/*\n * to use log scale\n * $gcc integ_gauss.c -DUSE_LOG_SCALE -lm\n * \n * to use normal scale\n * $gcc integ_gauss.c -lm \n */\n\n//#define USE_LOG_SCALE\n\n/* define paramter constants */\n#define EPS 3.0e-11\n\nstatic void gauleg(double x1, double x2, double x[], double w[], int n);\n\n#define SIZBUF (100)\nconst int kNumGauss = 11;\nstatic double s_weight[SIZBUF];\nstatic double s_abscissa[SIZBUF];\n\nconst double kRmin =  1.e-4;\nconst double kRmax =  1.e0;\n\ndouble myFunc_dr(double r_v)\n{\n\t// d[N(r_v)] / d[r_v]\n\tdouble pi = acos(-1.0);\n\treturn pi;\n}\n\ndouble myFunc_dlnr(double r_v)\n{\n\t// d[N(r_v)] / dln[r_v]\n\treturn myFunc_dr(r_v) * r_v;\n}\n\ndouble wrapperFunc(double x_)\n{\n#ifdef USE_LOG_SCALE\n\treturn myFunc_dlnr( exp(x_) );\n#else // USE_LOG_SCALE\n\treturn myFunc_dr(x_);\n#endif // USE_LOG_SCALE\t\n}\n\nint main(void)\n{\n\tint idx;\n\tdouble d0;\n\n#ifdef USE_LOG_SCALE\n\tprintf(\"in log scale\\n\");\n\tgauleg(log(kRmin), log(kRmax), &s_abscissa[0], &s_weight[0], kNumGauss);\n#else\n\tprintf(\"in normal scale\\n\");\n\tgauleg(kRmin, kRmax, &s_abscissa[0], &s_weight[0], kNumGauss);\n#endif\t\n\n\td0 = 0.0;\n\tfor(idx=1; idx<=kNumGauss; idx++) {\n\t\tprintf(\"%f %f dbg\\n\", s_abscissa[idx], s_weight[idx]);\n\t\td0 += ( s_weight[idx] * wrapperFunc(s_abscissa[idx]) );\n\t}\n\tprintf(\"%f\\n\", d0);\n}\n\n// from sunil -------------------------------------------------\n\n/* the function to genearate the abscissa and weights using \nGauss-Legandere  qudrature rules */\nstatic void gauleg(double x1, double x2, double x[], double w[], int n)\n{\n\tint m,j,i;\n\tdouble z1,z,xm,xl,pp,p3,p2,p1;\n\n\tm=(n+1)/2;\n\txm=0.5*(x2+x1);\n\txl=0.5*(x2-x1);\n/* find m zeros of the Legandere polynomial in the interval -1 to +1 */\n\tfor (i=1;i<=m;i++) {\n\t\tz=cos(3.141592654*(i-0.25)/(n+0.5));\n\t\tdo {\n\t\t\tp1=1.0;\n\t\t\tp2=0.0;\n\t\t\tfor (j=1;j<=n;j++) {\n\t\t\t\tp3=p2;\n\t\t\t\tp2=p1;\n\t\t\t\tp1=((2.0*j-1.0)*z*p2-(j-1.0)*p3)/j;\n\t\t\t}\n\t\t\tpp=n*(z*p1-p2)/(z*z-1.0);\n\t\t\tz1=z;\n\t\t\tz=z1-p1/pp;\n\t\t} while (fabs(z-z1) > EPS);\n/* rescale the values to the limits required */\n\t\tx[i]=xm-xl*z;\n\t\tx[n+1-i]=xm+xl*z;\n/* calculate the weight */\n\t\tw[i]=2.0*xl/((1.0-z*z)*pp*pp);\n\t\tw[n+1-i]=w[i];\n\t}\n}\n#undef EPS\n```\n\n#\u5b9f\u884c\u4f8b\n\u5b9f\u884c\u65b9\u6cd5\u306f\u30bd\u30fc\u30b9\u306e\u30d8\u30c3\u30c0\u306b\u8a18\u8f09\u3057\u3066\u3044\u308b\u901a\u308a\u3002\n\nnormal\u30b9\u30b1\u30fc\u30eb\u3067\u7a4d\u5206\u3059\u308b\u5834\u5408\n```\n$ gcc integ_gauss.c -lm\n$ ./a.out\nin normal scale\n0.010985 0.027832 dbg\n0.056563 0.062784 dbg\n0.135011 0.093136 dbg\n0.240528 0.116585 dbg\n0.365292 0.131389 dbg\n0.500050 0.136449 dbg\n0.634808 0.131389 dbg\n0.759572 0.116585 dbg\n0.865089 0.093136 dbg\n0.943537 0.062784 dbg\n0.989115 0.027832 dbg\n3.141278\n```\n\n\u5bfe\u6570\u30b9\u30b1\u30fc\u30eb\u3067\u7a4d\u5206\u3059\u308b\u5834\u5408\n```\n$ gcc integ_gauss.c -DUSE_LOG_SCALE -lm\n$ ./a.out\nin log scale\n-9.110080 0.256363 dbg\n-8.690244 0.578319 dbg\n-7.967644 0.857898 dbg\n-6.995696 1.073897 dbg\n-5.846462 1.210260 dbg\n-4.605170 1.256866 dbg\n-3.363878 1.210260 dbg\n-2.214644 1.073897 dbg\n-1.242696 0.857898 dbg\n-0.520096 0.578319 dbg\n-0.100261 0.256363 dbg\n3.141278\n```\n\n\u4e21\u8005\u3068\u30823.1412...\u3068\u307b\u307c\u540c\u3058\u7d50\u679c\u3068\u306a\u3063\u305f\u3002\n\nkNumGauss (=11)\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u3067\u5206\u70b9\u306e\u6570\u3092\u5909\u66f4\u3067\u304d\u308b\u3002\n\n\n", "tags": ["C", "\u6570\u5024\u8a08\u7b97"]}