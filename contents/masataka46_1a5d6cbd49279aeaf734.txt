{"tags": ["Chainer", "Ubuntu14.04", "python2.7", "numpy", "DeepLearning"], "context": "\n\n\u74b0\u5883\nGPU GTX1070\nubuntu 14.04\nchainer 1.14.0\n\u306a\u3069\n\n\u306f\u3058\u3081\u306b\nchainer\u3067\u6700\u65b0\u306e\u30e2\u30c7\u30eb\u3092\u5b9f\u88c5\u3059\u308b\u969b\u306b\u306f\u3001links/connection\u3084functions/connection\u3092\u3044\u3058\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u305d\u3053\u3067\u6700\u3082\u5358\u7d14\u306alinear.py\u3092\u3044\u3058\u3063\u3066\u3001\u65b0\u3057\u3044\u5c64\u3092\u4f5c\u3063\u3066\u307f\u308b\u3002\u524d\u56de\u306flinear.py\u306e\u4e2d\u8eab\u3092\u78ba\u8a8d\u3057\u305f\u3002\nhttp://qiita.com/masataka46/items/d66997ac94ec7aa3bcb4\n\u4eca\u56de\u306fchainer/functions/connection/linear.py\u306eforward\u95a2\u6570\u3092\u3044\u3058\u3063\u3066\u9806\u4f1d\u64ad\u3092\u6539\u826f\u3059\u308b\u3002\n\n\u6539\u826f\u30e2\u30c7\u30eb\u306e\u6982\u8981\n\u5143\u3005\u306e\u5168\u7d50\u5408\uff13\u5c64\u3092\u4ee5\u4e0b\u306e\u56f3\u306e\u3088\u3046\u306b\u6539\u826f\u3059\u308b\u3002\n\n\uff12\u5c64\u76ee\u3060\u3051\u3092\u6539\u826f\u3059\u308b\u3002\u3053\u306e\uff12\u5c64\u76ee\u306f\u5177\u4f53\u7684\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5165\u529b\u5074\u306b\u95a2\u3057\u3066\u91cd\u307f\u3092\u5171\u6709\u3059\u308b\u3002\n\n\u3053\u306e\u6f14\u7b97\u51e6\u7406\u306f\u4ee5\u4e0b\u306e\u56f3\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\nW\u306f\u5165\u529b\u5074n\u500b\u3067\u91cd\u307f\u3092\u5171\u6709\u3059\u308b\u306e\u3067\u3001W(out_size, in_size / n)\u3068\u306a\u308b\u3002\u3053\u306e\u91cd\u307f\u3092\uff11\u5ea6\u306e\u884c\u5217\u7a4d\u3067\u8a08\u7b97\u3067\u304d\u308b\u3088\u3046\u3001in_size / n\u5074\u3092n\u500d\u3057\u3001in_size\u3068\u3059\u308b\u3002\n\u3053\u306e\u91cd\u307f\u3068\u5165\u529b\u5074\u304b\u3089\u306e\u30c7\u30fc\u30bfx\u3068\u306e\u884c\u5217\u7a4d\u3092\u6c42\u3081\u308b\u3068\u3001y(batch_size, out_size)\u304c\u51fa\u529b\u3055\u308c\u308b\u3002\u3053\u308c\u306b\u3088\u308a\u91cd\u307f\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u6570\u304c\u6e1b\u308b\u306e\u3067\u3001\u6f14\u7b97\u306f\u901f\u304f\u306a\u308b\u3060\u308d\u3046\u3002\u305d\u3057\u3066\u3001\u6027\u80fd\u304c\u82e5\u5e72\u4f4e\u4e0b\u3059\u308b\u3060\u308d\u3046\u3002\u307e\u305f\u4eca\u56de\u3001\u8a08\u7b97\u3092\u7c21\u7565\u5316\u3059\u308b\u305f\u3081bias\u306f\u4f7f\u308f\u306a\u3044\u3067\u304a\u304f\u3002\n\ntain_mnist.py\u3092\u4fee\u6b63\u3059\u308b\ntrain_mnist.py\u3082\u82e5\u5e72\u5909\u308f\u3063\u3066\u304f\u308b\u306e\u3067\u4fee\u6b63\u3059\u308b\u3002\ncommon_num = 10\nout_units = 900\n    #chnged model\n    def __init__(self, n_in, n_units, n_out):\n        super(MLP, self).__init__(\n            l1=L.Linear(n_in, n_units),  # first layer\n            l2=linear_link.Linear(n_units / common_num, out_units, nobias=True),  # second layer\n            l3=L.Linear(out_units, n_out),  # output layer\n        )\n\n\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3067\u5b9a\u7fa9\u3057\u305fcommon_num\u304c\u3001\u5171\u6709\u3059\u308b\u6570\u3002\u307e\u305f\u7279\u306b\u610f\u5473\u306f\u7121\u3044\u304c\uff13\u5c64\u76ee\u306eunit\u6570\u3092900\u306b\u5909\u3048\u305f\u3002\n\nfunction\u4e0b\u306elinear.py\u3092\u4fee\u6b63\u3059\u308b\nchainer/functions/connection/linear.py\u306eLinearFunction\u30af\u30e9\u30b9\u5185forward\u95a2\u6570\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4fee\u6b63\u3059\u308b\u3002\nimport cupy\n    #modified forward function\n    def forward(self, inputs):\n        x = _as_mat(inputs[0])\n        W = inputs[1]\n\n        #modify to original model\n        W_tile = cupy.tile(W.T, (common_num, 1)).astype(W.dtype, copy=False)\n        y = x.dot(W_tile).astype(x.dtype, copy=False)\n\n        if len(inputs) == 3:\n            b = inputs[2]\n            y += b\n\n        return y,\n\n\nW\u3092common_num\u500d\u3059\u308b\u969b\u306b\u3001cupy\uff08numpy\uff09\u306etile()\u3092\u4f7f\u3063\u305f\u3002GPU\u4f7f\u3046\u306e\u3092\u60f3\u5b9a\u3057\u3066cupy\u3092import\u3057\u3066\u3044\u308b\u304c\u3001\u4f7f\u308f\u306a\u3044\u306a\u3089numpy\u306b\u5909\u3048\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u307e\u305fcheck_type_forward\u95a2\u6570\u304c\u3042\u308b\u3068\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u306e\u3067\u3001\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3059\u308b\u3002\n    '''\n    def check_type_forward(self, in_types):\n        n_in = in_types.size()\n        type_check.expect(2 <= n_in, n_in <= 3)\n        x_type, w_type = in_types[:2]\n\n        type_check.expect(\n            x_type.dtype.kind == 'f',\n            w_type.dtype.kind == 'f',\n            x_type.ndim >= 2,\n            w_type.ndim == 2,\n            type_check.prod(x_type.shape[1:]) == w_type.shape[1],\n        )\n        if n_in.eval() == 3:\n            b_type = in_types[2]\n            type_check.expect(\n                b_type.dtype == x_type.dtype,\n                b_type.ndim == 1,\n                b_type.shape[0] == w_type.shape[0],\n            )\n    '''\n\n\u3053\u306e\u95a2\u6570\u304c\u304a\u7bc0\u4ecb\u306b\u3082x\u3068W\u306e\u5927\u304d\u3055\u304c\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u304b\u8abf\u3079\u3066\u308b\u307f\u305f\u3044\u3002\u4eca\u56de\u3001\u660e\u3089\u304b\u306bW\u3060\u3051\u5c0f\u3055\u304f\u3057\u3066\u308b\u306e\u3067\u3001\u3053\u308c\u304c\u6a5f\u80fd\u3059\u308b\u3068\u30a8\u30e9\u30fc\u3068\u306a\u308b\u3002\n##\u74b0\u5883\nGPU GTX1070\nubuntu 14.04\nchainer 1.14.0\n\u306a\u3069\n##\u306f\u3058\u3081\u306b\nchainer\u3067\u6700\u65b0\u306e\u30e2\u30c7\u30eb\u3092\u5b9f\u88c5\u3059\u308b\u969b\u306b\u306f\u3001links/connection\u3084functions/connection\u3092\u3044\u3058\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n\u305d\u3053\u3067\u6700\u3082\u5358\u7d14\u306alinear.py\u3092\u3044\u3058\u3063\u3066\u3001\u65b0\u3057\u3044\u5c64\u3092\u4f5c\u3063\u3066\u307f\u308b\u3002\u524d\u56de\u306flinear.py\u306e\u4e2d\u8eab\u3092\u78ba\u8a8d\u3057\u305f\u3002\nhttp://qiita.com/masataka46/items/d66997ac94ec7aa3bcb4\n\n\u4eca\u56de\u306f`chainer/functions/connection/linear.py`\u306eforward\u95a2\u6570\u3092\u3044\u3058\u3063\u3066\u9806\u4f1d\u64ad\u3092\u6539\u826f\u3059\u308b\u3002\n\n##\u6539\u826f\u30e2\u30c7\u30eb\u306e\u6982\u8981\n\u5143\u3005\u306e\u5168\u7d50\u5408\uff13\u5c64\u3092\u4ee5\u4e0b\u306e\u56f3\u306e\u3088\u3046\u306b\u6539\u826f\u3059\u308b\u3002\n![img_161013_4.png](https://qiita-image-store.s3.amazonaws.com/0/116706/9ded39f3-37ed-9362-da1e-5678b237b7be.png)\n\uff12\u5c64\u76ee\u3060\u3051\u3092\u6539\u826f\u3059\u308b\u3002\u3053\u306e\uff12\u5c64\u76ee\u306f\u5177\u4f53\u7684\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5165\u529b\u5074\u306b\u95a2\u3057\u3066\u91cd\u307f\u3092\u5171\u6709\u3059\u308b\u3002\n![forward01.png](https://qiita-image-store.s3.amazonaws.com/0/116706/2eec40d2-5eb3-d82c-748f-4069a23836b1.png)\n\u3053\u306e\u6f14\u7b97\u51e6\u7406\u306f\u4ee5\u4e0b\u306e\u56f3\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n![forward02.png](https://qiita-image-store.s3.amazonaws.com/0/116706/5983e3f9-7e95-8f88-9fbc-049a5d9e902a.png)\nW\u306f\u5165\u529b\u5074n\u500b\u3067\u91cd\u307f\u3092\u5171\u6709\u3059\u308b\u306e\u3067\u3001W(out_size, in_size / n)\u3068\u306a\u308b\u3002\u3053\u306e\u91cd\u307f\u3092\uff11\u5ea6\u306e\u884c\u5217\u7a4d\u3067\u8a08\u7b97\u3067\u304d\u308b\u3088\u3046\u3001in_size / n\u5074\u3092n\u500d\u3057\u3001in_size\u3068\u3059\u308b\u3002\n\n\u3053\u306e\u91cd\u307f\u3068\u5165\u529b\u5074\u304b\u3089\u306e\u30c7\u30fc\u30bfx\u3068\u306e\u884c\u5217\u7a4d\u3092\u6c42\u3081\u308b\u3068\u3001y(batch_size, out_size)\u304c\u51fa\u529b\u3055\u308c\u308b\u3002\u3053\u308c\u306b\u3088\u308a\u91cd\u307f\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u6570\u304c\u6e1b\u308b\u306e\u3067\u3001\u6f14\u7b97\u306f\u901f\u304f\u306a\u308b\u3060\u308d\u3046\u3002\u305d\u3057\u3066\u3001\u6027\u80fd\u304c\u82e5\u5e72\u4f4e\u4e0b\u3059\u308b\u3060\u308d\u3046\u3002\u307e\u305f\u4eca\u56de\u3001\u8a08\u7b97\u3092\u7c21\u7565\u5316\u3059\u308b\u305f\u3081bias\u306f\u4f7f\u308f\u306a\u3044\u3067\u304a\u304f\u3002\n##tain_mnist.py\u3092\u4fee\u6b63\u3059\u308b\ntrain_mnist.py\u3082\u82e5\u5e72\u5909\u308f\u3063\u3066\u304f\u308b\u306e\u3067\u4fee\u6b63\u3059\u308b\u3002\n\n```py\ncommon_num = 10\nout_units = 900\n    #chnged model\n    def __init__(self, n_in, n_units, n_out):\n        super(MLP, self).__init__(\n            l1=L.Linear(n_in, n_units),  # first layer\n            l2=linear_link.Linear(n_units / common_num, out_units, nobias=True),  # second layer\n            l3=L.Linear(out_units, n_out),  # output layer\n        )\n```\n\n\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3067\u5b9a\u7fa9\u3057\u305fcommon_num\u304c\u3001\u5171\u6709\u3059\u308b\u6570\u3002\u307e\u305f\u7279\u306b\u610f\u5473\u306f\u7121\u3044\u304c\uff13\u5c64\u76ee\u306eunit\u6570\u3092900\u306b\u5909\u3048\u305f\u3002\n##function\u4e0b\u306elinear.py\u3092\u4fee\u6b63\u3059\u308b\n`chainer/functions/connection/linear.py`\u306eLinearFunction\u30af\u30e9\u30b9\u5185forward\u95a2\u6570\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4fee\u6b63\u3059\u308b\u3002\n\n```py\nimport cupy\n    #modified forward function\n    def forward(self, inputs):\n        x = _as_mat(inputs[0])\n        W = inputs[1]\n\n        #modify to original model\n        W_tile = cupy.tile(W.T, (common_num, 1)).astype(W.dtype, copy=False)\n        y = x.dot(W_tile).astype(x.dtype, copy=False)\n\n        if len(inputs) == 3:\n            b = inputs[2]\n            y += b\n\n        return y,\n\n```\nW\u3092common_num\u500d\u3059\u308b\u969b\u306b\u3001cupy\uff08numpy\uff09\u306etile()\u3092\u4f7f\u3063\u305f\u3002GPU\u4f7f\u3046\u306e\u3092\u60f3\u5b9a\u3057\u3066cupy\u3092import\u3057\u3066\u3044\u308b\u304c\u3001\u4f7f\u308f\u306a\u3044\u306a\u3089numpy\u306b\u5909\u3048\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n\u307e\u305fcheck_type_forward\u95a2\u6570\u304c\u3042\u308b\u3068\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u306e\u3067\u3001\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3059\u308b\u3002\n\n```py\n    '''\n    def check_type_forward(self, in_types):\n        n_in = in_types.size()\n        type_check.expect(2 <= n_in, n_in <= 3)\n        x_type, w_type = in_types[:2]\n\n        type_check.expect(\n            x_type.dtype.kind == 'f',\n            w_type.dtype.kind == 'f',\n            x_type.ndim >= 2,\n            w_type.ndim == 2,\n            type_check.prod(x_type.shape[1:]) == w_type.shape[1],\n        )\n        if n_in.eval() == 3:\n            b_type = in_types[2]\n            type_check.expect(\n                b_type.dtype == x_type.dtype,\n                b_type.ndim == 1,\n                b_type.shape[0] == w_type.shape[0],\n            )\n    '''\n```\n\n\u3053\u306e\u95a2\u6570\u304c\u304a\u7bc0\u4ecb\u306b\u3082x\u3068W\u306e\u5927\u304d\u3055\u304c\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u304b\u8abf\u3079\u3066\u308b\u307f\u305f\u3044\u3002\u4eca\u56de\u3001\u660e\u3089\u304b\u306bW\u3060\u3051\u5c0f\u3055\u304f\u3057\u3066\u308b\u306e\u3067\u3001\u3053\u308c\u304c\u6a5f\u80fd\u3059\u308b\u3068\u30a8\u30e9\u30fc\u3068\u306a\u308b\u3002\n"}