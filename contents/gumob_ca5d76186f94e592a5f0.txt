{"context": " More than 1 year has passed since last update.\n\n\u958b\u767a\u74b0\u5883\u3092\u69cb\u7bc9\n\nvirtualenv\u3092\u4f5c\u6210\n$ mkdir cronapp && cd cronapp\n$ mkvirtualenv venv\n\n\nHeroku\u306b\u30ed\u30b0\u30a4\u30f3\n(venv)$ heroku login\n\n\nPython\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8ffd\u52a0\n(venv)$ cat >> requirements.txt << EOF\nAPScheduler==3.0.4\nawscli==1.9.11\nboto3==1.2.2\nbotocore==1.3.11\ncolorama==0.3.3\ndocutils==0.12\nfutures==3.0.3\nhttplib2==0.9\njmespath==0.9.0\npyasn1==0.1.9\npython-dateutil==2.4.2\npytz==2015.7\nrequests==2.8.1\nrsa==3.2.3\nsix==1.10.0\ntzlocal==1.2\nwheel==0.26.0\nEOF\n(venv)$ pip install -r requirements.txt\n\n\n\u52d5\u4f5c\u78ba\u8a8d\u7528\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\n(venv)$ vi cron.py\n\nfrom apscheduler.schedulers.blocking import BlockingScheduler\n\nsched = BlockingScheduler()\n\n@sched.scheduled_job('interval', minutes=3)\ndef job_3min():\n    print('[cron.py:job_3min] Start.')\n\nsched.start()\n\n\n\u4f5c\u6210\u3057\u305f\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9a\u671f\u5b9f\u884c\u3059\u308bProcfile\u3092\u8ffd\u52a0\n(venv)$ echo \"bot: python cron.py\" > Procfile\n\n\n.gitignore\u3092\u8ffd\u52a0\n(venv)$ cat >> .gitignore << EOF\nvenv\n*.pyc\n.idea\nEOF\n\n\n\u30ed\u30fc\u30ab\u30eb\u306b\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u4f5c\u6210\n(venv)$ git init && git add . && git commit -m \"initial commit\"\n\n\nHeroku\u3078\u30c7\u30d7\u30ed\u30a4\n\nHeroku\u306b\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u4f5c\u6210\n(venv)$ heroku create\n\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u30c7\u30d7\u30ed\u30a4\n(venv)$ git push heroku master\n\n\ndyno\u30d7\u30ed\u30bb\u30b9\u306e\u5272\u308a\u5f53\u3066\n(venv)$ heroku ps:scale bot=1\n\n\n\u52d5\u4f5c\u78ba\u8a8d\n(venv)$ heroku logs\n2015-12-07T01:36:20.343967+00:00 app[bot.1]: [cron.py:job_3min] Start.\n2015-12-07T01:39:20.346373+00:00 app[bot.1]: [cron.py:job_3min] Start.\n2015-12-07T01:42:20.344067+00:00 app[bot.1]: [cron.py:job_3min] Start.\n\n\nopenexchangerates.org\u3067\u70ba\u66ff\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3001S3\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\n\ncron.py\u3092\u4ee5\u4e0b\u306e\u5185\u5bb9\u306b\u5909\u66f4\n\n\u4e8b\u524d\u306bAWS\u306eIAM\u30e6\u30fc\u30b6\u30fc\u4f5c\u6210\u3001Open Exchange Rates\u306eAPI\u30ad\u30fc\u53d6\u5f97\u3092\u884c\u3063\u3066\u304a\u304f\u3002\nOpen Exchange Rates\u306e\u30c7\u30fc\u30bf\u306f\u6bce\u66421\u301c2\u5206\u9803\u306b\u66f4\u65b0\u3055\u308c\u308b\u304c\u3001\u4f59\u88d5\u3092\u3082\u3063\u3066\u6bce\u664210\u5206\u306b\u5b9a\u671f\u5b9f\u884c\u3059\u308b\u3088\u3046\u6307\u5b9a\u3002\n\nimport requests, json, datetime, pytz, logging\nimport boto3, botocore\nfrom apscheduler.schedulers.blocking import BlockingScheduler\n\nlogging.basicConfig()\nsched = BlockingScheduler()\n\n@sched.scheduled_job('cron', minute='10', hour='*/1')\ndef job_crawl():\n    print('[cron.py:job_crawl] Start.')\n\n    ####################################\n    # API Keys\n    ####################################\n\n    OPEN_EXCHANGE_API_URL = 'https://openexchangerates.org/api/latest.json?app_id='\n    OPEN_EXCHANGE_APP_ID = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n\n    AWS_ACCESS_KEY_ID = 'xxxxxxxxxxxxxxxx'\n    AWS_SECRET_ACCESS_KEY = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n    AWS_REGION_NAME = 'xx-xxxxx-x'\n    AWS_S3_BUCKET_NAME = 'xxxxxxxxxxx'\n\n    ####################################\n    # Retrieve json data from openexchangerates.com\n    ####################################\n\n    res = requests.get(OPEN_EXCHANGE_API_URL + OPEN_EXCHANGE_APP_ID)\n    json_data = json.loads(res.text.decode('utf-8'))\n    del json_data['disclaimer']\n    del json_data['license']\n    json_text = json.dumps(json_data)\n\n    timestamp = json_data['timestamp']\n    exchange_date = datetime.datetime.fromtimestamp(timestamp, tz=pytz.utc)\n\n    ####################################\n    # Upload json data to S3 bucket\n    ####################################\n\n    if json_text:\n\n        #\n        # AWS Session\n        #\n        session = boto3.session.Session(aws_access_key_id=AWS_ACCESS_KEY_ID,\n                                        aws_secret_access_key=AWS_SECRET_ACCESS_KEY,\n                                        region_name=AWS_REGION_NAME)\n        s3 = session.resource('s3')\n        bucket = s3.Bucket(AWS_S3_BUCKET_NAME)\n\n        #\n        # Upload Latest\n        #\n        bucket_latest_key_name = 'exchange/latest.json'\n        obj = bucket.Object(bucket_latest_key_name)\n        response = obj.put(\n            Body=json_text.encode('utf-8'),\n            ContentEncoding='utf-8',\n            ContentType='application/json'\n        )\n\n        #\n        # Upload Daily Data\n        #\n        bucket_prefix_daily = \"{0:%Y-%m-%d}\".format(exchange_date)\n        bucket_daily_key_name = 'exchange/' + bucket_prefix_daily + '/' + bucket_prefix_daily + '.json'\n        obj = bucket.Object(bucket_daily_key_name)\n        response = obj.put(\n            Body=json_text.encode('utf-8'),\n            ContentEncoding='utf-8',\n            ContentType='application/json'\n        )\n\n        #\n        # Upload Hourly Data\n        #\n        bucket_hourly_prefix = \"{0:%Y-%m-%d-%H}\".format(exchange_date)\n        bucket_hourly_key_name = 'exchange/' + bucket_prefix_daily + '/' + bucket_hourly_prefix + '.json'\n        try:\n            # If json file already exists, do nothing\n            s3.Object(AWS_S3_BUCKET_NAME, bucket_hourly_key_name).load()\n        except botocore.exceptions.ClientError as e:\n            # If json file doesn't exists\n            obj = bucket.Object(bucket_hourly_key_name)\n            response = obj.put(\n                Body=json_text.encode('utf-8'),\n                ContentEncoding='utf-8',\n                ContentType='application/json'\n            )\n\n    print('[cron.py:job_crawl] Done.')\n\n\nsched.start()\n\n\n\u66f4\u65b0\u5185\u5bb9\u3092\u53cd\u6620\u3057\u30c7\u30d7\u30ed\u30a4\n(venv)$ git add . && git commit -m \"changed cron job\"\n(venv)$ git push heroku master\n\n\n\u52d5\u4f5c\u78ba\u8a8d\n(venv)$ heroku logs\n2015-12-07T03:10:00.003862+00:00 app[bot.1]: [cron.py:job_crawl] Start.\n2015-12-07T03:10:01.856428+00:00 app[bot.1]: [cron.py:job_crawl] Done.\n\n\n\u304a\u307e\u3051\n\nApp\u540d\u3092\u5909\u66f4\n(venv)$ heroku apps:rename cronapp\n\n\n\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u5909\u66f4\n(venv)$ git remote rm heroku\n(venv)$ heroku git:remote -a cronapp\n\n\n\u53c2\u8003\u30b5\u30a4\u30c8\n\n\u305f\u3063\u305f5\u5206\u3067Django\u30a2\u30d7\u30ea\u3092heroku\u306b\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u65b9\u6cd5\nHeroku\u306bdjango\u30a2\u30d7\u30ea\u3092\u30c7\u30d7\u30ed\u30a4\u3057\u305f\u96d1\u8a18\nheroku\u3067\u30a2\u30c9\u30aa\u30f3\u4f7f\u308f\u305a\u306bcron (Python)\nAPScheduler User guide\nScheduled Jobs with Custom Clock Processes in Python with APScheduler\n\n## \u958b\u767a\u74b0\u5883\u3092\u69cb\u7bc9\n\n#### virtualenv\u3092\u4f5c\u6210\n\n~~~Bash\n$ mkdir cronapp && cd cronapp\n$ mkvirtualenv venv\n~~~\n\n#### Heroku\u306b\u30ed\u30b0\u30a4\u30f3\n\n~~~Bash\n(venv)$ heroku login\n~~~\n\n#### Python\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8ffd\u52a0\n\n~~~Bash\n(venv)$ cat >> requirements.txt << EOF\nAPScheduler==3.0.4\nawscli==1.9.11\nboto3==1.2.2\nbotocore==1.3.11\ncolorama==0.3.3\ndocutils==0.12\nfutures==3.0.3\nhttplib2==0.9\njmespath==0.9.0\npyasn1==0.1.9\npython-dateutil==2.4.2\npytz==2015.7\nrequests==2.8.1\nrsa==3.2.3\nsix==1.10.0\ntzlocal==1.2\nwheel==0.26.0\nEOF\n(venv)$ pip install -r requirements.txt\n~~~\n\n#### \u52d5\u4f5c\u78ba\u8a8d\u7528\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\n\n~~~Bash\n(venv)$ vi cron.py\n~~~\n\n~~~Python\nfrom apscheduler.schedulers.blocking import BlockingScheduler\n\nsched = BlockingScheduler()\n\n@sched.scheduled_job('interval', minutes=3)\ndef job_3min():\n    print('[cron.py:job_3min] Start.')\n\nsched.start()\n~~~\n\n#### \u4f5c\u6210\u3057\u305f\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9a\u671f\u5b9f\u884c\u3059\u308bProcfile\u3092\u8ffd\u52a0\n\n~~~Bash\n(venv)$ echo \"bot: python cron.py\" > Procfile\n~~~\n\n#### .gitignore\u3092\u8ffd\u52a0\n\n~~~Bash\n(venv)$ cat >> .gitignore << EOF\nvenv\n*.pyc\n.idea\nEOF\n~~~\n\n#### \u30ed\u30fc\u30ab\u30eb\u306b\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u4f5c\u6210\n\n~~~Bash\n(venv)$ git init && git add . && git commit -m \"initial commit\"\n~~~\n\n\n\n\n\n\n\n\n## Heroku\u3078\u30c7\u30d7\u30ed\u30a4\n\n#### Heroku\u306b\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u4f5c\u6210\n\n~~~Bash\n(venv)$ heroku create\n~~~\n\n#### \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u30c7\u30d7\u30ed\u30a4\n\n~~~Bash\n(venv)$ git push heroku master\n~~~\n\n#### dyno\u30d7\u30ed\u30bb\u30b9\u306e\u5272\u308a\u5f53\u3066\n\n~~~Bash\n(venv)$ heroku ps:scale bot=1\n~~~\n\n#### \u52d5\u4f5c\u78ba\u8a8d\n\n~~~Bash\n(venv)$ heroku logs\n2015-12-07T01:36:20.343967+00:00 app[bot.1]: [cron.py:job_3min] Start.\n2015-12-07T01:39:20.346373+00:00 app[bot.1]: [cron.py:job_3min] Start.\n2015-12-07T01:42:20.344067+00:00 app[bot.1]: [cron.py:job_3min] Start.\n~~~\n\n\n\n\n\n\n\n## openexchangerates.org\u3067\u70ba\u66ff\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3001S3\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\n\n#### cron.py\u3092\u4ee5\u4e0b\u306e\u5185\u5bb9\u306b\u5909\u66f4\n\n- \u4e8b\u524d\u306bAWS\u306eIAM\u30e6\u30fc\u30b6\u30fc\u4f5c\u6210\u3001[Open Exchange Rates](https://openexchangerates.org)\u306eAPI\u30ad\u30fc\u53d6\u5f97\u3092\u884c\u3063\u3066\u304a\u304f\u3002\n- Open Exchange Rates\u306e\u30c7\u30fc\u30bf\u306f\u6bce\u66421\u301c2\u5206\u9803\u306b\u66f4\u65b0\u3055\u308c\u308b\u304c\u3001\u4f59\u88d5\u3092\u3082\u3063\u3066\u6bce\u664210\u5206\u306b\u5b9a\u671f\u5b9f\u884c\u3059\u308b\u3088\u3046\u6307\u5b9a\u3002\n\n~~~Python\nimport requests, json, datetime, pytz, logging\nimport boto3, botocore\nfrom apscheduler.schedulers.blocking import BlockingScheduler\n\nlogging.basicConfig()\nsched = BlockingScheduler()\n\n@sched.scheduled_job('cron', minute='10', hour='*/1')\ndef job_crawl():\n    print('[cron.py:job_crawl] Start.')\n    \n    ####################################\n    # API Keys\n    ####################################\n\n    OPEN_EXCHANGE_API_URL = 'https://openexchangerates.org/api/latest.json?app_id='\n    OPEN_EXCHANGE_APP_ID = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n\n    AWS_ACCESS_KEY_ID = 'xxxxxxxxxxxxxxxx'\n    AWS_SECRET_ACCESS_KEY = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n    AWS_REGION_NAME = 'xx-xxxxx-x'\n    AWS_S3_BUCKET_NAME = 'xxxxxxxxxxx'\n\n    ####################################\n    # Retrieve json data from openexchangerates.com\n    ####################################\n\n    res = requests.get(OPEN_EXCHANGE_API_URL + OPEN_EXCHANGE_APP_ID)\n    json_data = json.loads(res.text.decode('utf-8'))\n    del json_data['disclaimer']\n    del json_data['license']\n    json_text = json.dumps(json_data)\n\n    timestamp = json_data['timestamp']\n    exchange_date = datetime.datetime.fromtimestamp(timestamp, tz=pytz.utc)\n\n    ####################################\n    # Upload json data to S3 bucket\n    ####################################\n\n    if json_text:\n\n        #\n        # AWS Session\n        #\n        session = boto3.session.Session(aws_access_key_id=AWS_ACCESS_KEY_ID,\n                                        aws_secret_access_key=AWS_SECRET_ACCESS_KEY,\n                                        region_name=AWS_REGION_NAME)\n        s3 = session.resource('s3')\n        bucket = s3.Bucket(AWS_S3_BUCKET_NAME)\n\n        #\n        # Upload Latest\n        #\n        bucket_latest_key_name = 'exchange/latest.json'\n        obj = bucket.Object(bucket_latest_key_name)\n        response = obj.put(\n            Body=json_text.encode('utf-8'),\n            ContentEncoding='utf-8',\n            ContentType='application/json'\n        )\n\n        #\n        # Upload Daily Data\n        #\n        bucket_prefix_daily = \"{0:%Y-%m-%d}\".format(exchange_date)\n        bucket_daily_key_name = 'exchange/' + bucket_prefix_daily + '/' + bucket_prefix_daily + '.json'\n        obj = bucket.Object(bucket_daily_key_name)\n        response = obj.put(\n            Body=json_text.encode('utf-8'),\n            ContentEncoding='utf-8',\n            ContentType='application/json'\n        )\n\n        #\n        # Upload Hourly Data\n        #\n        bucket_hourly_prefix = \"{0:%Y-%m-%d-%H}\".format(exchange_date)\n        bucket_hourly_key_name = 'exchange/' + bucket_prefix_daily + '/' + bucket_hourly_prefix + '.json'\n        try:\n            # If json file already exists, do nothing\n            s3.Object(AWS_S3_BUCKET_NAME, bucket_hourly_key_name).load()\n        except botocore.exceptions.ClientError as e:\n            # If json file doesn't exists\n            obj = bucket.Object(bucket_hourly_key_name)\n            response = obj.put(\n                Body=json_text.encode('utf-8'),\n                ContentEncoding='utf-8',\n                ContentType='application/json'\n            )\n\n    print('[cron.py:job_crawl] Done.')\n\n\nsched.start()\n~~~\n\n#### \u66f4\u65b0\u5185\u5bb9\u3092\u53cd\u6620\u3057\u30c7\u30d7\u30ed\u30a4\n\n~~~Bash\n(venv)$ git add . && git commit -m \"changed cron job\"\n(venv)$ git push heroku master\n~~~\n\n#### \u52d5\u4f5c\u78ba\u8a8d\n\n~~~Bash\n(venv)$ heroku logs\n2015-12-07T03:10:00.003862+00:00 app[bot.1]: [cron.py:job_crawl] Start.\n2015-12-07T03:10:01.856428+00:00 app[bot.1]: [cron.py:job_crawl] Done.\n~~~\n\n\n\n\n\n\n\n## \u304a\u307e\u3051\n\n#### App\u540d\u3092\u5909\u66f4\n\n~~~Bash\n(venv)$ heroku apps:rename cronapp\n~~~\n\n#### \u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u5909\u66f4\n\n~~~Bash\n(venv)$ git remote rm heroku\n(venv)$ heroku git:remote -a cronapp\n~~~\n\n\n\n\n\n## \u53c2\u8003\u30b5\u30a4\u30c8\n\n- [\u305f\u3063\u305f5\u5206\u3067Django\u30a2\u30d7\u30ea\u3092heroku\u306b\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u65b9\u6cd5](http://sainoky.hatenablog.com/entry/2015/05/24/200949)\n- [Heroku\u306bdjango\u30a2\u30d7\u30ea\u3092\u30c7\u30d7\u30ed\u30a4\u3057\u305f\u96d1\u8a18](http://qiita.com/yuizho/items/c335ff8ca081c991fcbb)\n- [heroku\u3067\u30a2\u30c9\u30aa\u30f3\u4f7f\u308f\u305a\u306bcron (Python)](http://sainoky.hatenablog.com/entry/2015/05/24/200949)\n- [APScheduler User guide](https://apscheduler.readthedocs.org/en/latest/userguide.html?highlight=scheduled_job)\n- [Scheduled Jobs with Custom Clock Processes in Python with APScheduler](https://devcenter.heroku.com/articles/clock-processes-python)\n", "tags": ["Python", "boto", "boto3", "AWS", "Heroku"]}