{"context": "\n\n0. \u306f\u3058\u3081\u306b\nEC2\u304c\u306a\u306b\u304b\u3068\u5897\u3048\u3066\u304d\u3066\u3001EBS\u306e\u30b9\u30ca\u30c3\u30d7\u30b7\u30e7\u30c3\u30c8\u306e\u5bb9\u91cf\u3001\u500b\u6570\u304c\u5897\u3048\u3066\u304d\u3066\u3001Human Error\u304c\u51fa\u308b\u524d\u306b\u81ea\u52d5\u5316\u3057\u3068\u304d\u305f\u3044\u306a\u30fc\u3068\u601d\u3063\u3066\u3044\u305f\u6240\u3001\u3053\u3061\u3089\u306e\u8a18\u4e8b(http://qiita.com/MasaoDX/items/39624823fff337d08e6f) \u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\nAWSCLI\u3067\n1.\u30d0\u30c3\u30af\u30a2\u30c3\u30d7\u30bf\u30fc\u30b2\u30c3\u30c8EBS\u306e\u691c\u7d22\n2.Snapshot\u4f5c\u6210\n3.\u4fdd\u6301\u671f\u9593,VolumeID,device name\u7b49\u306e\u60c5\u5831\u3092snapshot\u306b\u4ed8\u52a0\n4.\u6d88\u3057\u3066\u3082OK\u306asnapshot\u3092\u691c\u7d22\u3057\u3066\u524a\u9664\n5.snapshot\u3092\u3068\u3063\u305fvolume\u3092AWSSNS\u3067\u901a\u77e5\n\n0. System Requirement\n\nbash\u304c\u52d5\u304f\u74b0\u5883\nAWSCLI https://aws.amazon.com/jp/cli/\n\njq https://stedolan.github.io/jq/\n\n\u9069\u5207\u306aIAM Role\n\n\n1. IAM Role\u306e\u6e96\u5099\nSnapshot\u3092\u4f5c\u3063\u305f\u308a\u6d88\u3057\u305f\u308a\u3059\u308b\u305f\u3081\u3060\u3051\u306eIAM Role\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u6a29\u9650\u3092\u6700\u4f4e\u9650\u306b\u6291\u3048\u308b\u306e\u304c\u304a\u4f5c\u6cd5\u3060\u3068\u805e\u3044\u3066\u304a\u308a\u307e\u3059\u3002\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"CreateDeleteSnapshot\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2:Describe*\",\n                \"ec2:CreateSnapshot\",\n                \"ec2:DeleteSnapshot\",\n                \"ec2:CreateImage\",\n                \"ec2:CreateTags\",\n                \"ec2:DescribeImages\",\n                \"ec2:DeregisterImage\"\n            ],\n            \"Resource\": [\n                \"*\"\n            ]\n        }\n    ]\n}\n\n\n2. AWS CLI\u5b9f\u884c\u7528\u306eInstance\u6e96\u5099\n\n2.1 Amazon Linux\u306e\u8d77\u52d5 with IAM Role\n\nIAM Role\u306b1\u3067\u4f5c\u6210\u3057\u305fIAM Role\u3092\u3064\u3051\u3066Instance\u3092\u8d77\u52d5\u3057\u307e\u3059\nIAM Role\u306e\u5272\u308a\u5f53\u3066\u306f\u521d\u56de\u8d77\u52d5\u6642\u306b\u3057\u304b\u3067\u304d\u306a\u3044\u306e\u3067\u3054\u6ce8\u610f\u3092\n\n\n2.2 jq install\nsudo yum install jq\n\n\n3. EBS\u5074\u306e\u6e96\u5099\n\n3.1 Tag\u4ed8\u3051\n\n\u30d0\u30c3\u30af\u30a2\u30c3\u30d7\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u306a\u308bEBS\u306btag\u3092\u3064\u3051\u307e\u3059\u3002\u3053\u306e\u30bf\u30b0\u3067\u691c\u7d22\u3057\u3066\u30d0\u30c3\u30af\u30a2\u30c3\u30d7\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\nKey   = backup_target\nValue = true\n\n\n4. \u5b9f\u884c\u3059\u308b\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\n\n4.1 \u5909\u6570\u5b9a\u7fa9\nDATE_CURRENT=`date +%Y-%m-%d`\nTIME_CURRENT=`date +%Y%m%d%H%M%S`\nPURGE_AFTER_DAYS=0\nPURGE_AFTER=`date -d +${PURGE_AFTER_DAYS}days -u +%Y-%m-%d`\nBACKUP_KEY='backup_target'\nAWS_REGION='us-west-2'\nSNS_REGION='us-west-2'\nSNS_TOPIC_NAME='MySNSTopic'\nSNS_TOPIC_ARN=`aws --region ${SNS_REGION} sns list-topics | jq -r .Topics[].TopicArn | grep ${SNS_TOPIC_NAME}`\nERROR_VOL='./error_vol.txt'\nSUCCESS_VOL='./succes_vol.txt'\n\n\n4.2 Snapshot\u306e\u4f5c\u6210\n# 1-1. listing-up backup target volume-id\nVOLUMES=`aws --region ${AWS_REGION} ec2 describe-volumes --filters Name=tag:${BACKUP_KEY},Values=true | jq -r '.Volumes[].Attachments[] | .VolumeId'`\n\nfor VOLUME in ${VOLUMES}; do\n  BACKUP=`aws --region ${AWS_REGION} ec2 describe-tags --filters \"Name=resource-type,Values=volume\" \"Name=resource-id,Values=${VOLUME}\" \"Name=key,Values=${BACKUP_KEY}\" | jq -r .Tags[].Value`\n  INSTANCE_ID=`aws --region ${AWS_REGION} ec2 describe-volumes --filters Name=volume-id,Values=${VOLUME} | jq -r '.Volumes[].Attachments[] | .InstanceId'`\n  Device_Name=`aws --region ${AWS_REGION} ec2 describe-volumes --filters Name=volume-id,Values=${VOLUME} | jq -r '.Volumes[].Attachments[] | .Device'`\n  INSTANCE_NAME=`aws --region ${AWS_REGION} ec2 describe-tags --filters Name=resource-id,Values=${INSTANCE_ID} Name=key,Values=Name | jq -r .Tags[].Value`\n\n  # 1-2.verify backup target volume with tag\n  if [ \"${BACKUP}\" == \"true\" ]; then\n    # 1-3.create snapshot\n    SNAPSHOT_ID=`aws --region ${AWS_REGION} ec2 create-snapshot --volume-id ${VOLUME} --description \"${INSTANCE_NAME} ${INSTANCE_ID} ${Device_Name} ${VOLUME} ${TIME_CURRENT}\" | jq -r '.SnapshotId'`\n      if [ -z \"${SNAPSHOT_ID}\" ]; then\n        echo ${VOLUME} >> \"${ERROR_VOL}\"\n      else\n        echo ${VOLUME} >> \"${SUCCESS_VOL}\"\n      fi\n    # 1-4.adding tag for searching\n    aws --region ${AWS_REGION} ec2 create-tags --resources ${SNAPSHOT_ID} --tags Key=PurgeAllow,Value=true Key=PurgeAfter,Value=${PURGE_AFTER} Key=PurgeTarget,Value=${BACKUP_KEY} Key=Name,Value=\"${INSTANCE_NAME} ${INSTANCE_ID} ${Device_Name} ${VOLUME} ${TIME_CURRENT}\"\n  fi\ndone\n\n\n4.3 Snapshot\u306e\u524a\u9664\n# 2-1.find delete target snapshot volume with tag\nSNAPSHOT_PURGE_ALLOWED=`aws --region ${AWS_REGION} ec2 describe-tags --filters \"Name=resource-type,Values=snapshot\" \"Name=key,Values=PurgeAllow\" | jq -r .Tags[].ResourceId`\n\n# 2-2. verify the delete target volumes with 2 tags\nfor SNAPSHOT_ID in ${SNAPSHOT_PURGE_ALLOWED}; do\n  PURGE_AFTER_DATE=`aws --region ${AWS_REGION} ec2 describe-tags --filters \"Name=resource-type,Values=snapshot\" \"Name=resource-id,Values=${SNAPSHOT_ID}\" \"Name=key,Values=PurgeAfter\" | jq -r .Tags[].Value`\n  PURGE_TARGET_CHECK=`aws --region ${AWS_REGION} ec2 describe-tags --filters \"Name=resource-type,Values=snapshot\" \"Name=resource-id,Values=${SNAPSHOT_ID}\" \"Name=key,Values=PurgeTarget\" | jq -r .Tags[].Value`\n\n  if [ \"${PURGE_TARGET_CHECK}\" == \"${BACKUP_KEY}\" ]; then\n\n    if [ -n ${PURGE_AFTER_DATE} ]; then\n      DATE_CURRENT_EPOCH=`date -d ${DATE_CURRENT} +%s`\n      PURGE_AFTER_DATE_EPOCH=`date -d ${PURGE_AFTER_DATE} +%s`\n\n      if [[ ${PURGE_AFTER_DATE_EPOCH} < ${DATE_CURRENT_EPOCH} ]]; then\n        # 2-2.judge the target and delete the snapshots\n        aws --region ${AWS_REGION} ec2 delete-snapshot --snapshot-id ${SNAPSHOT_ID}\n      fi\n    fi\n  fi\ndone\n\n\n4.3 SNS\u3067\u7d50\u679c\u5831\u544a\n#3-1. send notification mail\nif [ -e \"${ERROR_VOL}\" ]; then\n# create message header\ncat << EOF >> ${ERROR_VOL}\n\nThere are EBS volumes failed to take snapshots on above volumes, please contact to AWS admin\n\nEOF\n  date >> ${ERROR_VOL}\n  aws --region ${SNS_REGION} sns publish --topic-arn ${SNS_TOPIC_ARN} --message file://tokyo_error_vol.txt --subject \"[ERROR] EBS Backup\"\nrm -f ${ERROR_VOL}\n\nelif [ -e \"${SUCCESS_VOL}\" ]; then\n# create message header\ncat << EOF >> ${SUCCESS_VOL}\n\nTaking EBS snapshot was succesfully completed on above volumes. Have a nice day!\n\nEOF\n  date >> ${SUCCESS_VOL}\n  aws --region ${SNS_REGION} sns publish --topic-arn ${SNS_TOPIC_ARN} --message file://tokyo_succes_vol.txt --subject \"[SUCCESS] EBS Backup\"\n  rm -f ${SUCCESS_VOL}\n\nelse\n  aws --region ${SNS_REGION} sns publish --topic-arn ${SNS_TOPIC_ARN} --message \"There are no target EBS Volumes\" --subject \"[WARN] EBS Backup\"\n  rm -f ${SUCCESS_VOL}\nfi\n\n\n5. cron\u3067\u5b9a\u671f\u5b9f\u884c\n\u66f8\u3044\u305f\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u3092cron\u3067\u5b9a\u671f\u5b9f\u884c\u3057\u3066\u3042\u3052\u308b\u3002\u4f8b\u3048\u3070\u3053\u3093\u306a\u611f\u3058\u306b\u3002\n\n00 01 * * 0 ~/backup.sh >> /var/log/cron.log\n\n# 0. \u306f\u3058\u3081\u306b\nEC2\u304c\u306a\u306b\u304b\u3068\u5897\u3048\u3066\u304d\u3066\u3001EBS\u306e\u30b9\u30ca\u30c3\u30d7\u30b7\u30e7\u30c3\u30c8\u306e\u5bb9\u91cf\u3001\u500b\u6570\u304c\u5897\u3048\u3066\u304d\u3066\u3001Human Error\u304c\u51fa\u308b\u524d\u306b\u81ea\u52d5\u5316\u3057\u3068\u304d\u305f\u3044\u306a\u30fc\u3068\u601d\u3063\u3066\u3044\u305f\u6240\u3001\u3053\u3061\u3089\u306e\u8a18\u4e8b(http://qiita.com/MasaoDX/items/39624823fff337d08e6f) \u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\nAWSCLI\u3067\n1.\u30d0\u30c3\u30af\u30a2\u30c3\u30d7\u30bf\u30fc\u30b2\u30c3\u30c8EBS\u306e\u691c\u7d22\n2.Snapshot\u4f5c\u6210\n3.\u4fdd\u6301\u671f\u9593,VolumeID,device name\u7b49\u306e\u60c5\u5831\u3092snapshot\u306b\u4ed8\u52a0\n4.\u6d88\u3057\u3066\u3082OK\u306asnapshot\u3092\u691c\u7d22\u3057\u3066\u524a\u9664\n5.snapshot\u3092\u3068\u3063\u305fvolume\u3092AWSSNS\u3067\u901a\u77e5\n\n# 0. System Requirement\n- bash\u304c\u52d5\u304f\u74b0\u5883\n- AWSCLI https://aws.amazon.com/jp/cli/\n- jq https://stedolan.github.io/jq/\n- \u9069\u5207\u306aIAM Role\n\n# 1. IAM Role\u306e\u6e96\u5099\nSnapshot\u3092\u4f5c\u3063\u305f\u308a\u6d88\u3057\u305f\u308a\u3059\u308b\u305f\u3081\u3060\u3051\u306eIAM Role\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u6a29\u9650\u3092\u6700\u4f4e\u9650\u306b\u6291\u3048\u308b\u306e\u304c\u304a\u4f5c\u6cd5\u3060\u3068\u805e\u3044\u3066\u304a\u308a\u307e\u3059\u3002\n\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"CreateDeleteSnapshot\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2:Describe*\",\n                \"ec2:CreateSnapshot\",\n                \"ec2:DeleteSnapshot\",\n                \"ec2:CreateImage\",\n                \"ec2:CreateTags\",\n                \"ec2:DescribeImages\",\n                \"ec2:DeregisterImage\"\n            ],\n            \"Resource\": [\n                \"*\"\n            ]\n        }\n    ]\n}\n```\n\n# 2. AWS CLI\u5b9f\u884c\u7528\u306eInstance\u6e96\u5099\n## 2.1 Amazon Linux\u306e\u8d77\u52d5 with IAM Role\n- IAM Role\u306b1\u3067\u4f5c\u6210\u3057\u305fIAM Role\u3092\u3064\u3051\u3066Instance\u3092\u8d77\u52d5\u3057\u307e\u3059\n- IAM Role\u306e\u5272\u308a\u5f53\u3066\u306f\u521d\u56de\u8d77\u52d5\u6642\u306b\u3057\u304b\u3067\u304d\u306a\u3044\u306e\u3067\u3054\u6ce8\u610f\u3092\n\n## 2.2 jq install\n```\nsudo yum install jq\n```\n\n# 3. EBS\u5074\u306e\u6e96\u5099\n## 3.1 Tag\u4ed8\u3051\n- \u30d0\u30c3\u30af\u30a2\u30c3\u30d7\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u306a\u308bEBS\u306btag\u3092\u3064\u3051\u307e\u3059\u3002\u3053\u306e\u30bf\u30b0\u3067\u691c\u7d22\u3057\u3066\u30d0\u30c3\u30af\u30a2\u30c3\u30d7\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n```\nKey   = backup_target\nValue = true\n```\n\n# 4. \u5b9f\u884c\u3059\u308b\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\n## 4.1 \u5909\u6570\u5b9a\u7fa9\n```\nDATE_CURRENT=`date +%Y-%m-%d`\nTIME_CURRENT=`date +%Y%m%d%H%M%S`\nPURGE_AFTER_DAYS=0\nPURGE_AFTER=`date -d +${PURGE_AFTER_DAYS}days -u +%Y-%m-%d`\nBACKUP_KEY='backup_target'\nAWS_REGION='us-west-2'\nSNS_REGION='us-west-2'\nSNS_TOPIC_NAME='MySNSTopic'\nSNS_TOPIC_ARN=`aws --region ${SNS_REGION} sns list-topics | jq -r .Topics[].TopicArn | grep ${SNS_TOPIC_NAME}`\nERROR_VOL='./error_vol.txt'\nSUCCESS_VOL='./succes_vol.txt'\n```\n## 4.2 Snapshot\u306e\u4f5c\u6210\n```\n# 1-1. listing-up backup target volume-id\nVOLUMES=`aws --region ${AWS_REGION} ec2 describe-volumes --filters Name=tag:${BACKUP_KEY},Values=true | jq -r '.Volumes[].Attachments[] | .VolumeId'`\n\nfor VOLUME in ${VOLUMES}; do\n  BACKUP=`aws --region ${AWS_REGION} ec2 describe-tags --filters \"Name=resource-type,Values=volume\" \"Name=resource-id,Values=${VOLUME}\" \"Name=key,Values=${BACKUP_KEY}\" | jq -r .Tags[].Value`\n  INSTANCE_ID=`aws --region ${AWS_REGION} ec2 describe-volumes --filters Name=volume-id,Values=${VOLUME} | jq -r '.Volumes[].Attachments[] | .InstanceId'`\n  Device_Name=`aws --region ${AWS_REGION} ec2 describe-volumes --filters Name=volume-id,Values=${VOLUME} | jq -r '.Volumes[].Attachments[] | .Device'`\n  INSTANCE_NAME=`aws --region ${AWS_REGION} ec2 describe-tags --filters Name=resource-id,Values=${INSTANCE_ID} Name=key,Values=Name | jq -r .Tags[].Value`\n\n  # 1-2.verify backup target volume with tag\n  if [ \"${BACKUP}\" == \"true\" ]; then\n    # 1-3.create snapshot\n    SNAPSHOT_ID=`aws --region ${AWS_REGION} ec2 create-snapshot --volume-id ${VOLUME} --description \"${INSTANCE_NAME} ${INSTANCE_ID} ${Device_Name} ${VOLUME} ${TIME_CURRENT}\" | jq -r '.SnapshotId'`\n      if [ -z \"${SNAPSHOT_ID}\" ]; then\n        echo ${VOLUME} >> \"${ERROR_VOL}\"\n      else\n        echo ${VOLUME} >> \"${SUCCESS_VOL}\"\n      fi\n    # 1-4.adding tag for searching\n    aws --region ${AWS_REGION} ec2 create-tags --resources ${SNAPSHOT_ID} --tags Key=PurgeAllow,Value=true Key=PurgeAfter,Value=${PURGE_AFTER} Key=PurgeTarget,Value=${BACKUP_KEY} Key=Name,Value=\"${INSTANCE_NAME} ${INSTANCE_ID} ${Device_Name} ${VOLUME} ${TIME_CURRENT}\"\n  fi\ndone\n```\n## 4.3 Snapshot\u306e\u524a\u9664\n```\n# 2-1.find delete target snapshot volume with tag\nSNAPSHOT_PURGE_ALLOWED=`aws --region ${AWS_REGION} ec2 describe-tags --filters \"Name=resource-type,Values=snapshot\" \"Name=key,Values=PurgeAllow\" | jq -r .Tags[].ResourceId`\n\n# 2-2. verify the delete target volumes with 2 tags\nfor SNAPSHOT_ID in ${SNAPSHOT_PURGE_ALLOWED}; do\n  PURGE_AFTER_DATE=`aws --region ${AWS_REGION} ec2 describe-tags --filters \"Name=resource-type,Values=snapshot\" \"Name=resource-id,Values=${SNAPSHOT_ID}\" \"Name=key,Values=PurgeAfter\" | jq -r .Tags[].Value`\n  PURGE_TARGET_CHECK=`aws --region ${AWS_REGION} ec2 describe-tags --filters \"Name=resource-type,Values=snapshot\" \"Name=resource-id,Values=${SNAPSHOT_ID}\" \"Name=key,Values=PurgeTarget\" | jq -r .Tags[].Value`\n\n  if [ \"${PURGE_TARGET_CHECK}\" == \"${BACKUP_KEY}\" ]; then\n\n    if [ -n ${PURGE_AFTER_DATE} ]; then\n      DATE_CURRENT_EPOCH=`date -d ${DATE_CURRENT} +%s`\n      PURGE_AFTER_DATE_EPOCH=`date -d ${PURGE_AFTER_DATE} +%s`\n\n      if [[ ${PURGE_AFTER_DATE_EPOCH} < ${DATE_CURRENT_EPOCH} ]]; then\n        # 2-2.judge the target and delete the snapshots\n        aws --region ${AWS_REGION} ec2 delete-snapshot --snapshot-id ${SNAPSHOT_ID}\n      fi\n    fi\n  fi\ndone\n```\n\n## 4.3 SNS\u3067\u7d50\u679c\u5831\u544a\n```\n#3-1. send notification mail\nif [ -e \"${ERROR_VOL}\" ]; then\n# create message header\ncat << EOF >> ${ERROR_VOL}\n\nThere are EBS volumes failed to take snapshots on above volumes, please contact to AWS admin\n\nEOF\n  date >> ${ERROR_VOL}\n  aws --region ${SNS_REGION} sns publish --topic-arn ${SNS_TOPIC_ARN} --message file://tokyo_error_vol.txt --subject \"[ERROR] EBS Backup\"\nrm -f ${ERROR_VOL}\n\nelif [ -e \"${SUCCESS_VOL}\" ]; then\n# create message header\ncat << EOF >> ${SUCCESS_VOL}\n\nTaking EBS snapshot was succesfully completed on above volumes. Have a nice day!\n\nEOF\n  date >> ${SUCCESS_VOL}\n  aws --region ${SNS_REGION} sns publish --topic-arn ${SNS_TOPIC_ARN} --message file://tokyo_succes_vol.txt --subject \"[SUCCESS] EBS Backup\"\n  rm -f ${SUCCESS_VOL}\n\nelse\n  aws --region ${SNS_REGION} sns publish --topic-arn ${SNS_TOPIC_ARN} --message \"There are no target EBS Volumes\" --subject \"[WARN] EBS Backup\"\n  rm -f ${SUCCESS_VOL}\nfi\n```\n\n# 5. cron\u3067\u5b9a\u671f\u5b9f\u884c\n\u66f8\u3044\u305f\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u3092cron\u3067\u5b9a\u671f\u5b9f\u884c\u3057\u3066\u3042\u3052\u308b\u3002\u4f8b\u3048\u3070\u3053\u3093\u306a\u611f\u3058\u306b\u3002\n```\n00 01 * * 0 ~/backup.sh >> /var/log/cron.log\n```\n", "tags": ["AWS", "ebs", "Snapshot"]}