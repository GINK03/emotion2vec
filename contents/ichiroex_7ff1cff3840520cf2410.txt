{"tags": ["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406", "\u6df1\u5c64\u5b66\u7fd2", "\u6a5f\u68b0\u5b66\u7fd2", "Python", "Chainer"], "context": "\n\n\u3056\u3063\u304f\u308a\u8a00\u3046\u3068\n\nConvolutional Neural Networks(CNN)\u3092\u4f7f\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u5206\u985e\u3092\u3059\u308b\u3002\n\nConvolutional Neural Networks for Sentence Classification\u3092Chainer\u3067\u5b9f\u88c5\u3057\u305f\u3002 \n\n\u3010Chainer\u3011\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u3088\u308b\u6587\u66f8\u5206\u985e \u3088\u308a\u3082\u9ad8\u3044\u6b63\u89e3\u7387\u3067\u30c6\u30ad\u30b9\u30c8\u5206\u985e\u3067\u304d\u305f\u3002\n\n\n\u306f\u3058\u3081\u306b\n\u4ee5\u524d\u6295\u7a3f\u3057\u305f\u3010Chainer\u3011\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u3088\u308b\u6587\u66f8\u5206\u985e\u306e\u7d9a\u304d\u3068\u3057\u3066\u3001EMNLP2014\u3067\u767a\u8868\u3055\u308c\u305fConvolutional Neural Networks for Sentence Classification\u3092Chainer\u3067\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002 \n\u8457\u8005\u306eGitHub\u3067\u3082Theano\u3092\u4f7f\u3063\u305f\u5b9f\u88c5\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u4eca\u56de\u958b\u767a\u3057\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\uff1achainer-cnnsc\n\n\u4f7f\u7528\u3057\u305f\u30c7\u30fc\u30bf\n\n\n\u3053\u3061\u3089\u306b\u30c7\u30fc\u30bf\u304c\u7f6e\u3044\u3066\u3042\u308a\u307e\u3059\u3002\u300csentence polarity dataset v1.0 \u300d\u3092\u5229\u7528\u3057\u307e\u3057\u305f\u3002\n\u76f4\u63a5\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n\n\n\u4e8b\u524d\u6e96\u5099\n\nChainer, scikit-learn, gensim\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nword2vec\u306e\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb( GoogleNews-vectors-negative300.bin.gz)\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9. \n\n\n\u74b0\u5883\n\nChainer\nPython 2.7\u7cfb\n\n\n\u5b66\u7fd2\u30c7\u30fc\u30bf\n\u82f1\u8a9e\u306e\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u306f\u4e0a\u8a18\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u5148\u304b\u3089\u53d6\u5f97\u3057\u3066\u4e0b\u3055\u3044\u3002\n\u5404\u884c\u304c1\u3064\u306e\u6587\u66f8\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u30021\u5217\u76ee\u304c\u30e9\u30d9\u30eb\u30012\u5217\u76ee\u4ee5\u964d\u304c\u30c6\u30ad\u30b9\u30c8\u3067\u3059\u3002\n\u30e9\u30d9\u30eb\u306e0\u304c\u30cd\u30ac\u30c6\u30a3\u30d6\u6587\u66f8\u30011\u304c\u30dd\u30b8\u30c6\u30a3\u30d6\u6587\u66f8\u3067\u3059\u3002\n[\u30e9\u30d9\u30eb] [\u30c6\u30ad\u30b9\u30c8(\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a)]\n0 it just didn't mean much to me and played too skewed to ever get a hold on ( or be entertained by ) .\n1 culkin , who's in virtually every scene , shines as a young man who uses sarcastic lies like a shield .\n...\n\n\n\u30e2\u30c7\u30eb\n\u4eca\u56de\u306f\u3053\u3061\u3089\u306e\u8ad6\u6587(Convolutional Neural Networks for Sentence Classification)\u3067\u63d0\u6848\u3055\u308c\u3066\u3044\u308b\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\n\u3053\u3061\u3089\u306e\u8a18\u4e8b\u306b\u30e2\u30c7\u30eb\u306e\u89e3\u8aac\u304c\u8f09\u3063\u3066\u3044\u307e\u3059\u3002\n\n\n\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u306b\u304a\u3051\u308b\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u7528\u3044\u305f\u30e2\u30c7\u30eb\n\n\n\n\n\u30d7\u30ed\u30b0\u30e9\u30e0 (\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u90e8\u5206)\n\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u7573\u8fbc\u307f\u6642\u306e\u30d5\u30a3\u30eb\u30bf\u30b5\u30a4\u30ba\u3092\u8907\u6570\u5b9a\u7fa9\u3057\u3001\u5404\u30d5\u30a3\u30eb\u30bf\u3054\u3068\u306b\u7573\u307f\u8fbc\u307f\u3092\u884c\u3044\u307e\u3059\u3002\n\u5b9a\u7fa9\u3057\u305f\u30d5\u30a3\u30eb\u30bf\u30b5\u30a4\u30ba\u306ffilter_height\u306b\u30ea\u30b9\u30c8\u5f62\u5f0f\u3067\u683c\u7d0d\u3057\u3066\u3044\u307e\u3059\u3002\n\u9806\u4f1d\u642c\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30d5\u30a3\u30eb\u30bf\u30b5\u30a4\u30ba\u3054\u3068\u306b\u30eb\u30fc\u30d7\u3092\u56de\u3057\u3066\u7573\u307f\u8fbc\u307f\u3092\u884c\u3044\u307e\u3059\u3002\n # \u30d5\u30a3\u30eb\u30bf\u5f62\u6bce\u306b\u30eb\u30fc\u30d7\u3092\u56de\u3059\n for i, filter_size in enumerate(self.filter_height):\n     # Convolition\u5c64\u3092\u901a\u3059\n     h_conv[i] = F.relu(self[i](x))\n     # Pooling\u5c64\u3092\u901a\u3059\n     h_pool[i] = F.max_pooling_2d(h_conv[i], (self.max_sentence_len+1-filter_size))\n\n\u4ee5\u4e0b\u306b\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u90e8\u5206\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u793a\u3057\u307e\u3059\u3002\n# \u30ea\u30f3\u30af\u6570\u3092\u53ef\u5909\u306b\u3057\u305f\u3044\u306e\u3067ChainList\u3092\u4f7f\u7528\u3059\u308b\nclass CNNSC(ChainList):\n    def __init__(self,\n                 input_channel,\n                 output_channel,\n                 filter_height,\n                 filter_width,\n                 n_label,\n                 max_sentence_len):\n        # \u30d5\u30a3\u30eb\u30bf\u30fc\u6570\u3001\u4f7f\u7528\u3055\u308c\u305f\u30d5\u30a3\u30eb\u30bf\u30fc\u9ad8\u3055\u3001\u6700\u5927\u6587\u9577\u306f\u5f8c\u304b\u3089\u4f7f\u3046\n        self.cnv_num = len(filter_height)\n        self.filter_height = filter_height\n        self.max_sentence_len = max_sentence_len\n\n        # Convolution\u5c64\u7528\u306eLink\u3092\u30d5\u30a3\u30eb\u30bf\u30fc\u6bce\u306b\u8ffd\u52a0\n        # Convolution2D(\u3000\u5165\u529b\u30c1\u30e3\u30f3\u30cd\u30eb\u6570, \u51fa\u529b\u30c1\u30e3\u30f3\u30cd\u30eb\u6570\uff08\u5f62\u6bce\u306e\u30d5\u30a3\u30eb\u30bf\u30fc\u306e\u6570\uff09, \u30d5\u30a3\u30eb\u30bf\u30fc\u306e\u5f62\uff08\u30bf\u30d7\u30eb\u5f62\u5f0f\u3067\uff09, \u30d1\u30c7\u30a3\u30f3\u30b0\u30b5\u30a4\u30ba )\n        link_list = [L.Convolution2D(input_channel, output_channel, (i, filter_width), pad=0) for i in filter_height]\n        # Dropoff\u7528\u306eLink\u3092\u8ffd\u52a0\n        link_list += [L.Linear(output_channel * self.cnv_num, output_channel * self.cnv_num)]\n        # \u51fa\u529b\u5c64\u3078\u306eLink\u3092\u8ffd\u52a0\n        link_list += [L.Linear(output_channel * self.cnv_num, n_label)]\n\n        # \u3053\u3053\u307e\u3067\u5b9a\u7fa9\u3057\u305fLink\u306e\u30ea\u30b9\u30c8\u3092\u7528\u3044\u3066\u30af\u30e9\u30b9\u3092\u521d\u671f\u5316\u3059\u308b\n        super(CNNSC, self).__init__(*link_list)\n\n        # \u3061\u306a\u307f\u306b\n        # self.add_link(link)\n        # \u307f\u305f\u3044\u306b\u30ea\u30f3\u30af\u3092\u5217\u6319\u3057\u3066\u9806\u3005\u306b\u8ffd\u52a0\u3057\u3066\u3044\u3063\u3066\u3082OK\u3067\u3059\n\n    def __call__(self, x, train=True):\n        # \u30d5\u30a3\u30eb\u30bf\u3092\u901a\u3057\u305f\u4e2d\u9593\u5c64\u3092\u6e96\u5099\n        h_conv = [None for _ in self.filter_height]\n        h_pool = [None for _ in self.filter_height]\n\n        # \u30d5\u30a3\u30eb\u30bf\u5f62\u6bce\u306b\u30eb\u30fc\u30d7\u3092\u56de\u3059\n        for i, filter_size in enumerate(self.filter_height):\n            # Convolition\u5c64\u3092\u901a\u3059\n            h_conv[i] = F.relu(self[i](x))\n            # Pooling\u5c64\u3092\u901a\u3059\n            h_pool[i] = F.max_pooling_2d(h_conv[i], (self.max_sentence_len+1-filter_size))\n        # Convolution+Pooling\u3092\u884c\u3063\u305f\u7d50\u679c\u3092\u7d50\u5408\u3059\u308b\n        concat = F.concat(h_pool, axis=2)\n        # \u7d50\u5408\u3057\u305f\u7d50\u679c\u306b\u5bfe\u3057\u3066Dropout\u3092\u304b\u3051\u308b\n        h_l1 = F.dropout(F.tanh(self[self.cnv_num+0](concat)), ratio=0.5, train=train)\n        # Dropout\u306e\u7d50\u679c\u3092\u51fa\u529b\u5c64\u307e\u3067\u5727\u7e2e\u3059\u308b\n        y = self[self.cnv_num+1](h_l1)\n\n        return y\n\n\n\u5b9f\u9a13\u7d50\u679c\n\u5b9f\u9a13\u3067\u306f\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u5b66\u7fd2\u30c7\u30fc\u30bf\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272\u3057\u300150\u30a8\u30dd\u30c3\u30af\u3092\u56de\u3057\u3066\u5b66\u7fd2\u3057\u307e\u3057\u305f\u3002\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u6b63\u89e3\u7387\u306f50\u30a8\u30dd\u30c3\u30af\u76ee\u3067\u3001accuracy=0.799437701702\u3068\u306a\u308a\u307e\u3057\u305f\u3002\n\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3067\u3088\u308a\u30b7\u30f3\u30d7\u30eb\u306aCNN\u3092\u7528\u3044\u305f\u30e2\u30c7\u30eb\u3067\u6587\u66f8\u5206\u985e\u3092\u3057\u305f\u6642\u306f\u3001accuracy=0.775624996424\u3060\u3063\u305f\u306e\u3067\u3001\u308f\u305a\u304b\u306a\u304c\u3089\u6b63\u89e3\u7387\u304c\u5411\u4e0a\u3059\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3057\u305f\u3002\ninput file name: dataset/mr_input.dat\nloading word2vec model...\nheight (max length of sentences): 59\nwidth (size of wordembedding vecteor ): 300\nepoch 1 / 50\ntrain mean loss=0.568159639835, accuracy=0.707838237286\n test mean loss=0.449375987053, accuracy=0.788191199303\nepoch 2 / 50\ntrain mean loss=0.422049582005, accuracy=0.806962668896\n test mean loss=0.4778624475, accuracy=0.777881920338\nepoch 3 / 50\ntrain mean loss=0.329617649317, accuracy=0.859808206558\n test mean loss=0.458206892014, accuracy=0.792877197266\nepoch 4 / 50\ntrain mean loss=0.240891501307, accuracy=0.90389829874\n test mean loss=0.642955899239, accuracy=0.769447028637\n ...\nepoch 47 / 50\ntrain mean loss=0.000715514877811, accuracy=0.999791562557\n test mean loss=0.910120248795, accuracy=0.799437701702\nepoch 48 / 50\ntrain mean loss=0.000716249051038, accuracy=0.999791562557\n test mean loss=0.904825389385, accuracy=0.801312088966\nepoch 49 / 50\ntrain mean loss=0.000753249507397, accuracy=0.999791562557\n test mean loss=0.900236129761, accuracy=0.799437701702\nepoch 50 / 50\ntrain mean loss=0.000729961204343, accuracy=0.999791562557\n test mean loss=0.892229259014, accuracy=0.799437701702\n\n\n\u304a\u308f\u308a\u306b\n\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3067\u3082CNN\u3092\u4f7f\u3063\u305f\u30c6\u30ad\u30b9\u30c8\u5206\u985e\u306e\u5b9f\u88c5\u3092\u7d39\u4ecb\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u7573\u307f\u8fbc\u307f(CNN)\u3068Spatial Pyramid Pooling(SPP-net)\u3092\u4f7f\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u5206\u985e\n\n\n\u53c2\u8003URL\n\nConvolutional Neural Networks for Sentence Classification\nCNN_sentence\n\n# \u3056\u3063\u304f\u308a\u8a00\u3046\u3068\n - Convolutional Neural Networks(CNN)\u3092\u4f7f\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u5206\u985e\u3092\u3059\u308b\u3002\n - [Convolutional Neural Networks for Sentence Classification](http://emnlp2014.org/papers/pdf/EMNLP2014181.pdf)\u3092Chainer\u3067\u5b9f\u88c5\u3057\u305f\u3002 \n - [\u3010Chainer\u3011\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u3088\u308b\u6587\u66f8\u5206\u985e](http://qiita.com/ichiroex/items/f225f6d8eceb6796cc7e) \u3088\u308a\u3082\u9ad8\u3044\u6b63\u89e3\u7387\u3067\u30c6\u30ad\u30b9\u30c8\u5206\u985e\u3067\u304d\u305f\u3002\n\n\n# \u306f\u3058\u3081\u306b\n\u4ee5\u524d\u6295\u7a3f\u3057\u305f[\u3010Chainer\u3011\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u3088\u308b\u6587\u66f8\u5206\u985e](http://qiita.com/ichiroex/items/f225f6d8eceb6796cc7e)\u306e\u7d9a\u304d\u3068\u3057\u3066\u3001EMNLP2014\u3067\u767a\u8868\u3055\u308c\u305f[Convolutional Neural Networks for Sentence Classification](http://emnlp2014.org/papers/pdf/EMNLP2014181.pdf)\u3092Chainer\u3067\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002 \n\n[\u8457\u8005\u306eGitHub](https://github.com/yoonkim/CNN_sentence)\u3067\u3082Theano\u3092\u4f7f\u3063\u305f\u5b9f\u88c5\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u4eca\u56de\u958b\u767a\u3057\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\uff1a[chainer-cnnsc](https://github.com/ichiroex/chainer-cnnsc)\n\n\n# \u4f7f\u7528\u3057\u305f\u30c7\u30fc\u30bf\n  - [\u3053\u3061\u3089](https://www.cs.cornell.edu/people/pabo/movie-review-data/)\u306b\u30c7\u30fc\u30bf\u304c\u7f6e\u3044\u3066\u3042\u308a\u307e\u3059\u3002\u300csentence polarity dataset v1.0 \u300d\u3092\u5229\u7528\u3057\u307e\u3057\u305f\u3002\n  - [\u76f4\u63a5\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9](https://www.cs.cornell.edu/people/pabo/movie-review-data/rt-polaritydata.tar.gz)\n\n\n# \u4e8b\u524d\u6e96\u5099\n - Chainer, scikit-learn, gensim\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n - word2vec\u306e\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb( GoogleNews-vectors-negative300.bin.gz)\u306e[\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9](https://code.google.com/archive/p/word2vec/). \n\n# \u74b0\u5883\n - Chainer\n - Python 2.7\u7cfb\n\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\n\u82f1\u8a9e\u306e\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u306f\u4e0a\u8a18\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u5148\u304b\u3089\u53d6\u5f97\u3057\u3066\u4e0b\u3055\u3044\u3002\n\u5404\u884c\u304c1\u3064\u306e\u6587\u66f8\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u30021\u5217\u76ee\u304c\u30e9\u30d9\u30eb\u30012\u5217\u76ee\u4ee5\u964d\u304c\u30c6\u30ad\u30b9\u30c8\u3067\u3059\u3002\n\u30e9\u30d9\u30eb\u306e0\u304c\u30cd\u30ac\u30c6\u30a3\u30d6\u6587\u66f8\u30011\u304c\u30dd\u30b8\u30c6\u30a3\u30d6\u6587\u66f8\u3067\u3059\u3002\n\n```\n[\u30e9\u30d9\u30eb] [\u30c6\u30ad\u30b9\u30c8(\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a)]\n0 it just didn't mean much to me and played too skewed to ever get a hold on ( or be entertained by ) .\n1 culkin , who's in virtually every scene , shines as a young man who uses sarcastic lies like a shield .\n...\n```\n\n# \u30e2\u30c7\u30eb\n\u4eca\u56de\u306f\u3053\u3061\u3089\u306e\u8ad6\u6587([Convolutional Neural Networks for Sentence Classification](http://emnlp2014.org/papers/pdf/EMNLP2014181.pdf))\u3067\u63d0\u6848\u3055\u308c\u3066\u3044\u308b\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\n\u3053\u3061\u3089\u306e\u8a18\u4e8b\u306b\u30e2\u30c7\u30eb\u306e\u89e3\u8aac\u304c\u8f09\u3063\u3066\u3044\u307e\u3059\u3002\n\n - [\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u306b\u304a\u3051\u308b\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u7528\u3044\u305f\u30e2\u30c7\u30eb](http://qiita.com/Hironsan/items/63d255fd038acbcdf95b)  \n\n\n![CNNMODEL](https://qiita-image-store.s3.amazonaws.com/0/77079/b56a94b5-d54c-207e-98bb-474fe3d22e8b.png)\n\n\n# \u30d7\u30ed\u30b0\u30e9\u30e0 (\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u90e8\u5206)\n\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u7573\u8fbc\u307f\u6642\u306e\u30d5\u30a3\u30eb\u30bf\u30b5\u30a4\u30ba\u3092\u8907\u6570\u5b9a\u7fa9\u3057\u3001\u5404\u30d5\u30a3\u30eb\u30bf\u3054\u3068\u306b\u7573\u307f\u8fbc\u307f\u3092\u884c\u3044\u307e\u3059\u3002\n\u5b9a\u7fa9\u3057\u305f\u30d5\u30a3\u30eb\u30bf\u30b5\u30a4\u30ba\u306f`filter_height`\u306b\u30ea\u30b9\u30c8\u5f62\u5f0f\u3067\u683c\u7d0d\u3057\u3066\u3044\u307e\u3059\u3002\n\u9806\u4f1d\u642c\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30d5\u30a3\u30eb\u30bf\u30b5\u30a4\u30ba\u3054\u3068\u306b\u30eb\u30fc\u30d7\u3092\u56de\u3057\u3066\u7573\u307f\u8fbc\u307f\u3092\u884c\u3044\u307e\u3059\u3002\n\n```py\n # \u30d5\u30a3\u30eb\u30bf\u5f62\u6bce\u306b\u30eb\u30fc\u30d7\u3092\u56de\u3059\n for i, filter_size in enumerate(self.filter_height):\n     # Convolition\u5c64\u3092\u901a\u3059\n     h_conv[i] = F.relu(self[i](x))\n     # Pooling\u5c64\u3092\u901a\u3059\n     h_pool[i] = F.max_pooling_2d(h_conv[i], (self.max_sentence_len+1-filter_size))\n```\n\n\u4ee5\u4e0b\u306b\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u90e8\u5206\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u793a\u3057\u307e\u3059\u3002\n\n```py\n# \u30ea\u30f3\u30af\u6570\u3092\u53ef\u5909\u306b\u3057\u305f\u3044\u306e\u3067ChainList\u3092\u4f7f\u7528\u3059\u308b\nclass CNNSC(ChainList):\n    def __init__(self,\n                 input_channel,\n                 output_channel,\n                 filter_height,\n                 filter_width,\n                 n_label,\n                 max_sentence_len):\n        # \u30d5\u30a3\u30eb\u30bf\u30fc\u6570\u3001\u4f7f\u7528\u3055\u308c\u305f\u30d5\u30a3\u30eb\u30bf\u30fc\u9ad8\u3055\u3001\u6700\u5927\u6587\u9577\u306f\u5f8c\u304b\u3089\u4f7f\u3046\n        self.cnv_num = len(filter_height)\n        self.filter_height = filter_height\n        self.max_sentence_len = max_sentence_len\n        \n        # Convolution\u5c64\u7528\u306eLink\u3092\u30d5\u30a3\u30eb\u30bf\u30fc\u6bce\u306b\u8ffd\u52a0\n        # Convolution2D(\u3000\u5165\u529b\u30c1\u30e3\u30f3\u30cd\u30eb\u6570, \u51fa\u529b\u30c1\u30e3\u30f3\u30cd\u30eb\u6570\uff08\u5f62\u6bce\u306e\u30d5\u30a3\u30eb\u30bf\u30fc\u306e\u6570\uff09, \u30d5\u30a3\u30eb\u30bf\u30fc\u306e\u5f62\uff08\u30bf\u30d7\u30eb\u5f62\u5f0f\u3067\uff09, \u30d1\u30c7\u30a3\u30f3\u30b0\u30b5\u30a4\u30ba )\n        link_list = [L.Convolution2D(input_channel, output_channel, (i, filter_width), pad=0) for i in filter_height]\n        # Dropoff\u7528\u306eLink\u3092\u8ffd\u52a0\n        link_list += [L.Linear(output_channel * self.cnv_num, output_channel * self.cnv_num)]\n        # \u51fa\u529b\u5c64\u3078\u306eLink\u3092\u8ffd\u52a0\n        link_list += [L.Linear(output_channel * self.cnv_num, n_label)]\n\n        # \u3053\u3053\u307e\u3067\u5b9a\u7fa9\u3057\u305fLink\u306e\u30ea\u30b9\u30c8\u3092\u7528\u3044\u3066\u30af\u30e9\u30b9\u3092\u521d\u671f\u5316\u3059\u308b\n        super(CNNSC, self).__init__(*link_list)\n        \n        # \u3061\u306a\u307f\u306b\n        # self.add_link(link)\n        # \u307f\u305f\u3044\u306b\u30ea\u30f3\u30af\u3092\u5217\u6319\u3057\u3066\u9806\u3005\u306b\u8ffd\u52a0\u3057\u3066\u3044\u3063\u3066\u3082OK\u3067\u3059\n\n    def __call__(self, x, train=True):\n        # \u30d5\u30a3\u30eb\u30bf\u3092\u901a\u3057\u305f\u4e2d\u9593\u5c64\u3092\u6e96\u5099\n        h_conv = [None for _ in self.filter_height]\n        h_pool = [None for _ in self.filter_height]\n        \n        # \u30d5\u30a3\u30eb\u30bf\u5f62\u6bce\u306b\u30eb\u30fc\u30d7\u3092\u56de\u3059\n        for i, filter_size in enumerate(self.filter_height):\n            # Convolition\u5c64\u3092\u901a\u3059\n            h_conv[i] = F.relu(self[i](x))\n            # Pooling\u5c64\u3092\u901a\u3059\n            h_pool[i] = F.max_pooling_2d(h_conv[i], (self.max_sentence_len+1-filter_size))\n        # Convolution+Pooling\u3092\u884c\u3063\u305f\u7d50\u679c\u3092\u7d50\u5408\u3059\u308b\n        concat = F.concat(h_pool, axis=2)\n        # \u7d50\u5408\u3057\u305f\u7d50\u679c\u306b\u5bfe\u3057\u3066Dropout\u3092\u304b\u3051\u308b\n        h_l1 = F.dropout(F.tanh(self[self.cnv_num+0](concat)), ratio=0.5, train=train)\n        # Dropout\u306e\u7d50\u679c\u3092\u51fa\u529b\u5c64\u307e\u3067\u5727\u7e2e\u3059\u308b\n        y = self[self.cnv_num+1](h_l1)\n\n        return y\n```\n\n# \u5b9f\u9a13\u7d50\u679c\n\u5b9f\u9a13\u3067\u306f\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u5b66\u7fd2\u30c7\u30fc\u30bf\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272\u3057\u300150\u30a8\u30dd\u30c3\u30af\u3092\u56de\u3057\u3066\u5b66\u7fd2\u3057\u307e\u3057\u305f\u3002\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u6b63\u89e3\u7387\u306f50\u30a8\u30dd\u30c3\u30af\u76ee\u3067\u3001`accuracy=0.799437701702`\u3068\u306a\u308a\u307e\u3057\u305f\u3002\n\n[\u3053\u3061\u3089\u306e\u8a18\u4e8b](http://qiita.com/ichiroex/items/f225f6d8eceb6796cc7e)\u3067\u3088\u308a\u30b7\u30f3\u30d7\u30eb\u306aCNN\u3092\u7528\u3044\u305f\u30e2\u30c7\u30eb\u3067\u6587\u66f8\u5206\u985e\u3092\u3057\u305f\u6642\u306f\u3001`accuracy=0.775624996424`\u3060\u3063\u305f\u306e\u3067\u3001\u308f\u305a\u304b\u306a\u304c\u3089\u6b63\u89e3\u7387\u304c\u5411\u4e0a\u3059\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3057\u305f\u3002\n\n\n```\ninput file name: dataset/mr_input.dat\nloading word2vec model...\nheight (max length of sentences): 59\nwidth (size of wordembedding vecteor ): 300\nepoch 1 / 50\ntrain mean loss=0.568159639835, accuracy=0.707838237286\n test mean loss=0.449375987053, accuracy=0.788191199303\nepoch 2 / 50\ntrain mean loss=0.422049582005, accuracy=0.806962668896\n test mean loss=0.4778624475, accuracy=0.777881920338\nepoch 3 / 50\ntrain mean loss=0.329617649317, accuracy=0.859808206558\n test mean loss=0.458206892014, accuracy=0.792877197266\nepoch 4 / 50\ntrain mean loss=0.240891501307, accuracy=0.90389829874\n test mean loss=0.642955899239, accuracy=0.769447028637\n ...\nepoch 47 / 50\ntrain mean loss=0.000715514877811, accuracy=0.999791562557\n test mean loss=0.910120248795, accuracy=0.799437701702\nepoch 48 / 50\ntrain mean loss=0.000716249051038, accuracy=0.999791562557\n test mean loss=0.904825389385, accuracy=0.801312088966\nepoch 49 / 50\ntrain mean loss=0.000753249507397, accuracy=0.999791562557\n test mean loss=0.900236129761, accuracy=0.799437701702\nepoch 50 / 50\ntrain mean loss=0.000729961204343, accuracy=0.999791562557\n test mean loss=0.892229259014, accuracy=0.799437701702\n```\n\n\n# \u304a\u308f\u308a\u306b\n\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3067\u3082CNN\u3092\u4f7f\u3063\u305f\u30c6\u30ad\u30b9\u30c8\u5206\u985e\u306e\u5b9f\u88c5\u3092\u7d39\u4ecb\u3057\u3066\u3044\u307e\u3059\u3002\n\n- [\u7573\u307f\u8fbc\u307f(CNN)\u3068Spatial Pyramid Pooling(SPP-net)\u3092\u4f7f\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u5206\u985e](http://qiita.com/knok/items/0cf25a761e977cebebd5)\n\n# \u53c2\u8003URL\n- [Convolutional Neural Networks for Sentence Classification](http://emnlp2014.org/papers/pdf/EMNLP2014181.pdf)\n- [CNN_sentence](https://github.com/yoonkim/CNN_sentence)\n"}