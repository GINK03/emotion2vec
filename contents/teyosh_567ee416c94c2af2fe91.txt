{"context": "LINE BOT API\u516c\u958b\u8a18\u5ff5\nAWS Lambda\u3067\u30aa\u30a6\u30e0\u8fd4\u3057BOT\u3092\u4f5c\u6210\n\u30a2\u30ab\u30a6\u30f3\u30c8\u8a2d\u5b9a\u306fhttps://developers.line.me \u304b\u3089\u9069\u5f53\u306b\u3084\u3063\u3066\u304f\u3060\u3055\u3044\u3002\nBOT\u3092\u4f5c\u6210\u3059\u308b\u3068LINE_CHANNEL_ID, LINE_CHANNEL_SECRET, LINE_CHANNEL_MID\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\n\n\u307e\u305a\u306fAWS\u306e\u30de\u30cd\u30b8\u30e1\u30f3\u30c8\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u5165\u308a[Create a Lambda function]\u3092\u30af\u30ea\u30c3\u30af\nNode.js\u306efunction\u3092\u9078\u3076\nCode\u6b04\u3092\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306b\u5909\u66f4\n\nvar https = require('https');\n\nexports.handler = function(event, context) {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n    var msg = event.result[0];\n    var data = JSON.stringify({\n      to: [msg.content.from.toString()],\n      toChannel: 1383378250,\n      eventType: \"138311608800106203\",\n      content: msg.content\n    });\n    var url ='https://trialbot-api.line.me/v1/events';\n    var opts = {\n        host: 'trialbot-api.line.me',\n        path: '/v1/events',\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n            \"X-Line-ChannelID\": \"LINE_CHANNEL_ID\",\n            \"X-Line-ChannelSecret\": \"LINE_CHANNEL_SECRET\",\n            \"X-Line-Trusted-User-With-ACL\": \"LINE_CHANNEL_MID\"\n        },\n        method: 'POST'\n    }\n    var req = https.request(opts, function(res){\n        res.on('data', function(chunk){\n            console.log(chunk.toString())\n        }).on('error', function(e){\n            console.log('ERROR: '+ e.stack);\n        })\n    })\n    req.write(data)\n    req.end();\n};\n\n\nLINE_CHANNEL_ID, LINE_CHANNEL_SECRET, LINE_CHANNEL_MID\u306f\u9069\u5f53\u306b\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\n\u6b21\u306bAPI endpoints\u306b\u79fb\u52d5\u3057\u3001[Add API endpoint]\u3092\u30af\u30ea\u30c3\u30af\nAPI Gateway\u3092\u9078\u629e\u3057\u3001\u3082\u308d\u3082\u308d\u8a2d\u5b9a\u3057\u3001Method\u306f\u300cPOST\u300d\u306b\u8a2d\u5b9a\n\u8ffd\u52a0\u5f8cAPI endpoint URL\u3092\u30b3\u30d4\u30fc\u3057LINE developers\u306eBasic Information\u306eCallback URL\u306b\u30da\u30fc\u30b9\u30c8\n\u4f5c\u6210\u3057\u305fBOT\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308b\u3068Lambda\u306eCloud watch\u306e\u30ed\u30b0\u306b\n\n{\n    \"statusCode\": \"427\",\n    \"statusMessage\": \"Your ip address [xxx.xxx.xxx.xxx] is not allowed to access this API.\"\n}\n\n\n\u3068ip address\u304c\u66f8\u304b\u308c\u308b\u306e\u3067\u3053\u308c\u3092LINE developers\u306eServer IP Whitelist\u306b\u8ffd\u52a0\n\u5c11\u3057\u7d4c\u3064\u3068\u8a2d\u5b9a\u3055\u308c\u30aa\u30a6\u30e0\u8fd4\u3057BOT\u306e\u5b8c\u6210\n\n\u8ffd\u8a18 2016/4/28\nWhitelist\u3092\u7a7a\u306b\u3059\u308b\u3068\u3069\u3053\u304b\u3089\u3067\u3082\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u3068\u306a\u308a\u307e\u3057\u305f\u3002\n\u30b5\u30fc\u30d0\u30fc\u3092\u6307\u5b9a\u3057\u305f\u304f\u306a\u3044\u5834\u5408\u306fWhitelist\u306e\u8a2d\u5b9a\u3092\u6d88\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u3064\u304e\u306fBot Framework\u304b\u306a\u30fb\u30fb\u30fb\nLINE BOT API\u516c\u958b\u8a18\u5ff5\nAWS Lambda\u3067\u30aa\u30a6\u30e0\u8fd4\u3057BOT\u3092\u4f5c\u6210\n\n\u30a2\u30ab\u30a6\u30f3\u30c8\u8a2d\u5b9a\u306fhttps://developers.line.me \u304b\u3089\u9069\u5f53\u306b\u3084\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\nBOT\u3092\u4f5c\u6210\u3059\u308b\u3068LINE_CHANNEL_ID, LINE_CHANNEL_SECRET, LINE_CHANNEL_MID\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\n\n- \u307e\u305a\u306fAWS\u306e\u30de\u30cd\u30b8\u30e1\u30f3\u30c8\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u5165\u308a[Create a Lambda function]\u3092\u30af\u30ea\u30c3\u30af\n- Node.js\u306efunction\u3092\u9078\u3076\n- Code\u6b04\u3092\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306b\u5909\u66f4\n\n```\nvar https = require('https');\n\nexports.handler = function(event, context) {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n    var msg = event.result[0];\n    var data = JSON.stringify({\n      to: [msg.content.from.toString()],\n      toChannel: 1383378250,\n      eventType: \"138311608800106203\",\n      content: msg.content\n    });\n    var url ='https://trialbot-api.line.me/v1/events';\n    var opts = {\n        host: 'trialbot-api.line.me',\n        path: '/v1/events',\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n            \"X-Line-ChannelID\": \"LINE_CHANNEL_ID\",\n            \"X-Line-ChannelSecret\": \"LINE_CHANNEL_SECRET\",\n            \"X-Line-Trusted-User-With-ACL\": \"LINE_CHANNEL_MID\"\n        },\n        method: 'POST'\n    }\n    var req = https.request(opts, function(res){\n        res.on('data', function(chunk){\n            console.log(chunk.toString())\n        }).on('error', function(e){\n            console.log('ERROR: '+ e.stack);\n        })\n    })\n    req.write(data)\n    req.end();\n};\n```\n\n- LINE_CHANNEL_ID, LINE_CHANNEL_SECRET, LINE_CHANNEL_MID\u306f\u9069\u5f53\u306b\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\n- \u6b21\u306bAPI endpoints\u306b\u79fb\u52d5\u3057\u3001[Add API endpoint]\u3092\u30af\u30ea\u30c3\u30af\n- API Gateway\u3092\u9078\u629e\u3057\u3001\u3082\u308d\u3082\u308d\u8a2d\u5b9a\u3057\u3001Method\u306f\u300cPOST\u300d\u306b\u8a2d\u5b9a\n- \u8ffd\u52a0\u5f8cAPI endpoint URL\u3092\u30b3\u30d4\u30fc\u3057LINE developers\u306eBasic Information\u306eCallback URL\u306b\u30da\u30fc\u30b9\u30c8\n- \u4f5c\u6210\u3057\u305fBOT\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308b\u3068Lambda\u306eCloud watch\u306e\u30ed\u30b0\u306b\n\n```\n{\n    \"statusCode\": \"427\",\n    \"statusMessage\": \"Your ip address [xxx.xxx.xxx.xxx] is not allowed to access this API.\"\n}\n```\n- \u3068ip address\u304c\u66f8\u304b\u308c\u308b\u306e\u3067\u3053\u308c\u3092LINE developers\u306eServer IP Whitelist\u306b\u8ffd\u52a0\n- \u5c11\u3057\u7d4c\u3064\u3068\u8a2d\u5b9a\u3055\u308c\u30aa\u30a6\u30e0\u8fd4\u3057BOT\u306e\u5b8c\u6210\n\n\u8ffd\u8a18 2016/4/28\nWhitelist\u3092\u7a7a\u306b\u3059\u308b\u3068\u3069\u3053\u304b\u3089\u3067\u3082\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u3068\u306a\u308a\u307e\u3057\u305f\u3002\n\u30b5\u30fc\u30d0\u30fc\u3092\u6307\u5b9a\u3057\u305f\u304f\u306a\u3044\u5834\u5408\u306fWhitelist\u306e\u8a2d\u5b9a\u3092\u6d88\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n\u3064\u304e\u306fBot Framework\u304b\u306a\u30fb\u30fb\u30fb\n", "tags": ["AWS", "lambda", "Line", "linebot", "bot"]}