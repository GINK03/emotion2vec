{"context": "Realm \u306e\u30af\u30a8\u30ea\u7d50\u679c\u304c\u5909\u5316\u3059\u308b\u305f\u3073\u306b RxSwift \u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u7d50\u679c\u304c\u6d41\u308c\u308b\u51e6\u7406\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\nRealm \u306e\u901a\u77e5\u30c8\u30fc\u30af\u30f3\u304c\u8cfc\u8aad\u4e2d\u306f\u5f37\u53c2\u7167\u306b\u306a\u308b\u306e\u304c\u809d\u3067\u3059\u3002\nrealm.objects(Dog).filter(\"age > 3\").rx_response()\n    .subscribeNext { /* UI \u306e\u66f4\u65b0\u51e6\u7406 */ }\n    .addDisposableTo(disposeBag)\n\n\n\u5b9f\u88c5\nRxCocoa/UIControl+Rx.swift \u3092\u53c2\u8003\nimport RxSwift\nimport RealmSwift\n\nextension Results {\n\n    public func rx_response() -> Observable<Results<Element>> {\n        return Observable.create { observer in\n\n            MainScheduler.ensureExecutingOnScheduler()\n\n            let token = self.addNotificationBlock { results, error in\n\n                if let error = error {\n                    observer.onError(error)\n                } else {\n                    observer.onNext(results!)\n                }\n            }\n\n            return AnonymousDisposable {\n                token.stop()\n            }\n        }\n    }\n}\n\n\n\nRealm \u306e\u30af\u30a8\u30ea\u7d50\u679c\u304c\u5909\u5316\u3059\u308b\u305f\u3073\u306b RxSwift \u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u7d50\u679c\u304c\u6d41\u308c\u308b\u51e6\u7406\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\nRealm \u306e\u901a\u77e5\u30c8\u30fc\u30af\u30f3\u304c\u8cfc\u8aad\u4e2d\u306f\u5f37\u53c2\u7167\u306b\u306a\u308b\u306e\u304c\u809d\u3067\u3059\u3002\n\n```swift\nrealm.objects(Dog).filter(\"age > 3\").rx_response()\n    .subscribeNext { /* UI \u306e\u66f4\u65b0\u51e6\u7406 */ }\n    .addDisposableTo(disposeBag)\n```\n\n## \u5b9f\u88c5\n\nRxCocoa/UIControl+Rx.swift \u3092\u53c2\u8003\n\n```swift\nimport RxSwift\nimport RealmSwift\n\nextension Results {\n    \n    public func rx_response() -> Observable<Results<Element>> {\n        return Observable.create { observer in\n            \n            MainScheduler.ensureExecutingOnScheduler()\n            \n            let token = self.addNotificationBlock { results, error in\n                \n                if let error = error {\n                    observer.onError(error)\n                } else {\n                    observer.onNext(results!)\n                }\n            }\n            \n            return AnonymousDisposable {\n                token.stop()\n            }\n        }\n    }\n}\n\n```\n", "tags": ["Realm", "Swift", "RxSwift"]}