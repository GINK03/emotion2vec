{"context": "\u6c96\u672c\u7adc\u7fa9\u300e\u7d4c\u6e08\u30fb\u30d5\u30a1\u30a4\u30ca\u30f3\u30b9\u30c7\u30fc\u30bf\u306e\u8a08\u91cf\u6642\u7cfb\u5217\u5206\u6790\u300f\n\n\u306e\u7ae0\u672b\u554f\u984c\u3067\u300c\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3092\u7528\u3044\u3066\u300d\u3068\u3042\u308b\u3082\u306e\u3092 Python \u3067\u89e3\u3044\u3066\u3044\u307e\u3059\u3002\n@aokikenichi \u3055\u3093\u304c\u4ee5\u4e0b\u306e\u3088\u3046\u306b R \u3067\u89e3\u3044\u305f\u3082\u306e\u3092\u8a18\u4e8b\u306b\u3055\u308c\u3066\u304a\u308a\uff0c\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u4ee5\u524d Python \u3067\u89e3\u3044\u305f\u3082\u306e\u3092\u516c\u958b\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\n\u300e\u7d4c\u6e08\u30fb\u30d5\u30a1\u30a4\u30ca\u30f3\u30b9\u30c7\u30fc\u30bf\u306e\u8a08\u91cf\u6642\u7cfb\u5217\u5206\u6790\u300f\u7ae0\u672b\u554f\u984c\u3092R\u3067\u89e3\u304f\uff0d\u7b2c1\u7ae0\u6642\u7cfb\u5217\u5206\u6790\u306e\u57fa\u790e\u6982\u5ff5\uff0d\n\u300e\u7d4c\u6e08\u30fb\u30d5\u30a1\u30a4\u30ca\u30f3\u30b9\u30c7\u30fc\u30bf\u306e\u8a08\u91cf\u6642\u7cfb\u5217\u5206\u6790\u300f\u7ae0\u672b\u554f\u984c\u3092R\u3067\u89e3\u304f\uff0d\u7b2c2\u7ae0ARMA\u904e\u7a0b\uff0d\n\u300e\u7d4c\u6e08\u30fb\u30d5\u30a1\u30a4\u30ca\u30f3\u30b9\u30c7\u30fc\u30bf\u306e\u8a08\u91cf\u6642\u7cfb\u5217\u5206\u6790\u300f\u7ae0\u672b\u554f\u984c\u3092R\u3067\u89e3\u304f\uff0d\u7b2c4\u7ae0VAR\u30e2\u30c7\u30eb\uff0d\n\n\u305f\u3060\uff0c\u7d50\u679c\u306e\u56f3\u8868\u3092\u8cbc\u308a\u4ed8\u3051\u308b\u306e\u304c\u9762\u5012\u3060\u3063\u305f\u306e\u3067\uff0c\u3053\u3053\u3067\u306f\u30b3\u30fc\u30c9\u306e\u307f\u3092\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\n\u51fa\u529b\u7d50\u679c\u306b\u95a2\u3057\u3066\u306f\uff0cJupyter Notebook \u3092 Gist \u306b\u30a2\u30c3\u30d7\u3057\u3066\u3044\u308b\u306e\u3067\u305d\u3061\u3089\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n\u4f7f\u7528\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\nimport numpy as np\nimport pandas as pd\nfrom statsmodels.tsa.api import stattools, AR, ARMA, VAR\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom statsmodels.stats.diagnostic import acorr_ljungbox\nimport matplotlib.pyplot as plt\n\n\u7279\u306b\uff0cpandas \u3068 statsmodels.tsa \u3092\u3088\u304f\u4f7f\u3044\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\n10 Minutes to pandas \u2014 pandas documentation\nTime Series analysis tsa \u2014 statsmodels documentation\n\n\n1. \u6642\u7cfb\u5217\u5206\u6790\u306e\u57fa\u790e\u6982\u5ff5\n\n1.3\nmu_sigma = [(0, 1), (2, 1), (-2, 1), (0, 2), (0, 3), (2, 2)]\nwhite_noise = DataFrame()\nfor mu, sigma in mu_sigma:\n    name = '$\\mu={0}, \\sigma={1}$'.format(mu, sigma)\n    white_noise[name] = np.random.normal(mu, sigma, 100)\nwhite_noise.plot(subplots=True, layout=(3,2), figsize=(12, 12))\n\n\n1.5\neconomicdata = pd.read_excel('http://www.geocities.jp/tatsuyoshi_okimoto/books/tsa/economicdata.xls', index_col='date')\n\n\n(1)\neconomicdata.plot(subplots=True, layout=(3,2), figsize=(12, 12))\n\n\n(2)\neconomicdata_pct = np.log(economicdata).diff() * 100\n\n\n(3)\neconomicdata_pct[['topix', 'exrate', 'indprod']].plot(subplots=True, figsize=(12, 12))\n\n\n(4)\nindprod = economicdata_pct.indprod.dropna()\n\nplot_acf(indprod, lags=20)\n\ndef portmanteau_test(endog, lags=10):\n    q_m, pvalues = acorr_ljungbox(endog, lags=lags)\n    df = pd.DataFrame([q_m.round(2), pvalues.round(3)], index=['Q(m)', 'p\u5024'], columns=range(1, lags + 1))\n    return df\n\nprint(portmanteau_test(indprod))\n\n\n(5)\ntopix = economicdata_pct.topix.dropna()\nprint(portmanteau_test(topix))\n\nexrate = economicdata_pct.exrate.dropna()\nprint(portmanteau_test(exrate))\n\n\n2. ARMA\u904e\u7a0b\n\n2.5\n\n(1)\ndef plot_acf_pacf(x, lags=20):\n    fig = plt.figure(figsize=(12,4))\n    ax1 = fig.add_subplot(121)\n    plot_acf(x, ax=ax1, lags=lags)\n    ax2 = fig.add_subplot(122)\n    plot_pacf(x, ax=ax2, lags=lags)\n    return fig\n\nplot_acf_pacf(indprod)\n\nar4 = AR(indprod).fit(maxlag=4)\nplot_acf(ar4.resid, lags=20)\n\narma12 = ARMA(indprod, (1,2)).fit()\nplot_acf(arma12.resid, lags=20)\n\ndef arma_order_select(y, orders):\n    df = pd.DataFrame(index=['AIC', 'SIC'])\n    for order in orders:\n        model = ARMA(y, order).fit()\n        df[str(order)] = [round(model.aic, 1), round(model.bic, 1)]\n    df['min'] = df.idxmin(axis=1)\n    return df\n\norders = [(4,0), (0,3), (1,1), (2,1), (1,2), (2,2)]\nprint(arma_order_select(indprod, orders))\n\n\n(2)\nprint(portmanteau_test(ar4.resid))\nprint(portmanteau_test(arma12.resid))\n\n\n2.6\narma = pd.read_excel('http://www.geocities.jp/tatsuyoshi_okimoto/books/tsa/arma.xls')\n\n\n(1)\ny1 = arma.y1.values\nplot_acf_pacf(y1)\n\n\n(3)\norder_select = stattools.arma_order_select_ic(y1, max_ar=2, max_ma=2,  ic=['aic', 'bic'])\nprint(order_select['aic'])\nprint(order_select['bic'])\nprint('AIC:', order_select['aic_min_order'], ', SIC:', order_select['bic_min_order'])\n\n\n(4)\nar2 = AR(y1).fit(maxlag=2)\nplot_acf(ar2.resid, lags=20)\nprint(portmanteau_test(ar2.resid))\n\narma21 = ARMA(y1, (2,1)).fit()\nplot_acf(arma21.resid, lags=20)\nprint(portmanteau_test(arma21.resid))\n\n\n(5)\ny2 = arma.y2.values\nplot_acf_pacf(y2)\n\norder_select = stattools.arma_order_select_ic(y2, max_ar=2, max_ma=2, ic=['aic', 'bic'])\nprint(order_select['aic'])\nprint(order_select['bic'])\nprint('AIC:', order_select['aic_min_order'], ', SIC:', order_select['bic_min_order'])\n\narma21 = ARMA(y2, (2,1)).fit()\nplot_acf(arma21.resid, lags=20)\nprint(portmanteau_test(arma21.resid))\n\ny3 = arma.y3.values\nplot_acf_pacf(y3)\n\norders = [(4,0), (8,0), (1,1), (1,2), (1,3), (2,1), (2,2), (2,3)]\nprint(arma_order_select(y3, orders))\n\narma23 = ARMA(y3, (2,3)).fit()\nplot_acf(arma23.resid, lags=20)\nprint(portmanteau_test(arma23.resid))\n\narma11 = ARMA(y3, (1,1)).fit()\nplot_acf(arma11.resid, lags=20)\nprint(portmanteau_test(arma11.resid))\n\n\n4. VAR \u30e2\u30c7\u30eb\nmsci_day = pd.read_excel('http://www.geocities.jp/tatsuyoshi_okimoto/books/tsa/msci_day.xls', index_col='Date')\nmsci_pct = np.log(msci_day).diff().dropna() * 100\n\n\n4.5\n\n(1)\njp_uk_us = ['jp', 'uk', 'us']\nvar3 = VAR(msci_pct[jp_uk_us]).fit(3)\n\nimport itertools\n\ndf = pd.DataFrame(index=['\u7d71\u8a08\u691c\u5b9a\u91cf', 'p\u5024'])\nfor pair in itertools.permutations(jp_uk_us, r=2):\n    col = pair[1] + ' \u2192 ' + pair[0]\n    res = var3.test_causality(*pair, verbose=False)\n    df[col] = [res['statistic'].round(3), res['pvalue'].round(3)]\nprint(df)\n\nvar3.irf().plot(orth=True)\n\nvar3.fevd().plot()\n\n\n4.6\n\n(4)\nmodel = VAR(msci_pct[['jp', 'fr', 'ca']])\nmodel.select_order(10)\nresult = model.fit(maxlags=10, ic='aic')\n\n\n(5)\nresult.test_causality('fr', 'jp')\n\nresult.test_causality('fr', 'ca')\n\n\n(6)\nresult.irf().plot(impulse='fr', response='jp')\n\n\n(7)\nresult.fevd().plot()\n\n[\u6c96\u672c\u7adc\u7fa9\u300e\u7d4c\u6e08\u30fb\u30d5\u30a1\u30a4\u30ca\u30f3\u30b9\u30c7\u30fc\u30bf\u306e\u8a08\u91cf\u6642\u7cfb\u5217\u5206\u6790\u300f](https://www.amazon.co.jp/gp/product/4254127928/ref=as_li_ss_tl?ie=UTF8&ref_=nav_ya_signin&&linkCode=ll1&tag=sankichi92-22&linkId=cda8aa8cd64ad2bda6a911e37a8c9ca1)\n<a href=\"https://www.amazon.co.jp/%E7%B5%8C%E6%B8%88%E3%83%BB%E3%83%95%E3%82%A1%E3%82%A4%E3%83%8A%E3%83%B3%E3%82%B9%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E8%A8%88%E9%87%8F%E6%99%82%E7%B3%BB%E5%88%97%E5%88%86%E6%9E%90-%E7%B5%B1%E8%A8%88%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%83%BC-%E6%B2%96%E6%9C%AC-%E7%AB%9C%E7%BE%A9/dp/4254127928//ref=as_li_ss_il?ie=UTF8&linkCode=li2&tag=sankichi92-22&linkId=92efdb6ea1aab2f2731ce2296b92e923\" target=\"_blank\"><img border=\"0\" src=\"//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=4254127928&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=sankichi92-22\" ></a><img src=\"https://ir-jp.amazon-adsystem.com/e/ir?t=sankichi92-22&l=li2&o=9&a=4254127928\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" />\n\u306e\u7ae0\u672b\u554f\u984c\u3067\u300c\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3092\u7528\u3044\u3066\u300d\u3068\u3042\u308b\u3082\u306e\u3092 **Python** \u3067\u89e3\u3044\u3066\u3044\u307e\u3059\u3002\n\n@aokikenichi \u3055\u3093\u304c\u4ee5\u4e0b\u306e\u3088\u3046\u306b **R** \u3067\u89e3\u3044\u305f\u3082\u306e\u3092\u8a18\u4e8b\u306b\u3055\u308c\u3066\u304a\u308a\uff0c\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u4ee5\u524d Python \u3067\u89e3\u3044\u305f\u3082\u306e\u3092\u516c\u958b\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\n- [\u300e\u7d4c\u6e08\u30fb\u30d5\u30a1\u30a4\u30ca\u30f3\u30b9\u30c7\u30fc\u30bf\u306e\u8a08\u91cf\u6642\u7cfb\u5217\u5206\u6790\u300f\u7ae0\u672b\u554f\u984c\u3092R\u3067\u89e3\u304f\uff0d\u7b2c1\u7ae0\u6642\u7cfb\u5217\u5206\u6790\u306e\u57fa\u790e\u6982\u5ff5\uff0d](http://qiita.com/aokikenichi/items/0a5517dbe73978bd6f68)\n- [\u300e\u7d4c\u6e08\u30fb\u30d5\u30a1\u30a4\u30ca\u30f3\u30b9\u30c7\u30fc\u30bf\u306e\u8a08\u91cf\u6642\u7cfb\u5217\u5206\u6790\u300f\u7ae0\u672b\u554f\u984c\u3092R\u3067\u89e3\u304f\uff0d\u7b2c2\u7ae0ARMA\u904e\u7a0b\uff0d](http://qiita.com/aokikenichi/items/2394b088c16fb1067d34)\n- [\u300e\u7d4c\u6e08\u30fb\u30d5\u30a1\u30a4\u30ca\u30f3\u30b9\u30c7\u30fc\u30bf\u306e\u8a08\u91cf\u6642\u7cfb\u5217\u5206\u6790\u300f\u7ae0\u672b\u554f\u984c\u3092R\u3067\u89e3\u304f\uff0d\u7b2c4\u7ae0VAR\u30e2\u30c7\u30eb\uff0d](http://qiita.com/aokikenichi/items/2394b088c16fb1067d34)\n\n\u305f\u3060\uff0c\u7d50\u679c\u306e\u56f3\u8868\u3092\u8cbc\u308a\u4ed8\u3051\u308b\u306e\u304c\u9762\u5012\u3060\u3063\u305f\u306e\u3067\uff0c\u3053\u3053\u3067\u306f\u30b3\u30fc\u30c9\u306e\u307f\u3092\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\n\u51fa\u529b\u7d50\u679c\u306b\u95a2\u3057\u3066\u306f\uff0c**[Jupyter Notebook \u3092 Gist \u306b\u30a2\u30c3\u30d7\u3057\u3066\u3044\u308b](https://gist.github.com/sankichi92/81b63bedb8fcb2e47f8a09710ecc8adf)**\u306e\u3067\u305d\u3061\u3089\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n## \u4f7f\u7528\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\n\n```py\nimport numpy as np\nimport pandas as pd\nfrom statsmodels.tsa.api import stattools, AR, ARMA, VAR\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom statsmodels.stats.diagnostic import acorr_ljungbox\nimport matplotlib.pyplot as plt\n```\n\n\u7279\u306b\uff0cpandas \u3068 statsmodels.tsa \u3092\u3088\u304f\u4f7f\u3044\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\n- [10 Minutes to pandas \u2014 pandas documentation](http://pandas.pydata.org/pandas-docs/stable/10min.html)\n- [Time Series analysis tsa \u2014 statsmodels documentation](http://statsmodels.sourceforge.net/stable/tsa.html)\n\n## 1. \u6642\u7cfb\u5217\u5206\u6790\u306e\u57fa\u790e\u6982\u5ff5\n\n### 1.3\n\n```py\nmu_sigma = [(0, 1), (2, 1), (-2, 1), (0, 2), (0, 3), (2, 2)]\nwhite_noise = DataFrame()\nfor mu, sigma in mu_sigma:\n    name = '$\\mu={0}, \\sigma={1}$'.format(mu, sigma)\n    white_noise[name] = np.random.normal(mu, sigma, 100)\nwhite_noise.plot(subplots=True, layout=(3,2), figsize=(12, 12))\n```\n\n### 1.5\n\n```py\neconomicdata = pd.read_excel('http://www.geocities.jp/tatsuyoshi_okimoto/books/tsa/economicdata.xls', index_col='date')\n```\n\n#### (1)\n\n```py\neconomicdata.plot(subplots=True, layout=(3,2), figsize=(12, 12))\n```\n\n#### (2)\n\n```py\neconomicdata_pct = np.log(economicdata).diff() * 100\n```\n\n#### (3)\n\n```py\neconomicdata_pct[['topix', 'exrate', 'indprod']].plot(subplots=True, figsize=(12, 12))\n```\n\n#### (4)\n\n```py\nindprod = economicdata_pct.indprod.dropna()\n\nplot_acf(indprod, lags=20)\n```\n```py\ndef portmanteau_test(endog, lags=10):\n    q_m, pvalues = acorr_ljungbox(endog, lags=lags)\n    df = pd.DataFrame([q_m.round(2), pvalues.round(3)], index=['Q(m)', 'p\u5024'], columns=range(1, lags + 1))\n    return df\n\nprint(portmanteau_test(indprod))\n```\n\n#### (5)\n\n```py\ntopix = economicdata_pct.topix.dropna()\nprint(portmanteau_test(topix))\n```\n```py\nexrate = economicdata_pct.exrate.dropna()\nprint(portmanteau_test(exrate))\n```\n\n## 2. ARMA\u904e\u7a0b\n\n### 2.5\n\n#### (1)\n\n```py\ndef plot_acf_pacf(x, lags=20):\n    fig = plt.figure(figsize=(12,4))\n    ax1 = fig.add_subplot(121)\n    plot_acf(x, ax=ax1, lags=lags)\n    ax2 = fig.add_subplot(122)\n    plot_pacf(x, ax=ax2, lags=lags)\n    return fig\n\nplot_acf_pacf(indprod)\n```\n```py\nar4 = AR(indprod).fit(maxlag=4)\nplot_acf(ar4.resid, lags=20)\n```\n```py\narma12 = ARMA(indprod, (1,2)).fit()\nplot_acf(arma12.resid, lags=20)\n```\n```py\ndef arma_order_select(y, orders):\n    df = pd.DataFrame(index=['AIC', 'SIC'])\n    for order in orders:\n        model = ARMA(y, order).fit()\n        df[str(order)] = [round(model.aic, 1), round(model.bic, 1)]\n    df['min'] = df.idxmin(axis=1)\n    return df\n\norders = [(4,0), (0,3), (1,1), (2,1), (1,2), (2,2)]\nprint(arma_order_select(indprod, orders))\n```\n\n#### (2)\n\n```py\nprint(portmanteau_test(ar4.resid))\nprint(portmanteau_test(arma12.resid))\n```\n\n### 2.6\n\n```py\narma = pd.read_excel('http://www.geocities.jp/tatsuyoshi_okimoto/books/tsa/arma.xls')\n```\n\n#### (1)\n\n```py\ny1 = arma.y1.values\nplot_acf_pacf(y1)\n```\n\n#### (3)\n\n```py\norder_select = stattools.arma_order_select_ic(y1, max_ar=2, max_ma=2,  ic=['aic', 'bic'])\nprint(order_select['aic'])\nprint(order_select['bic'])\nprint('AIC:', order_select['aic_min_order'], ', SIC:', order_select['bic_min_order'])\n```\n\n#### (4)\n\n```py\nar2 = AR(y1).fit(maxlag=2)\nplot_acf(ar2.resid, lags=20)\nprint(portmanteau_test(ar2.resid))\n```\n```py\narma21 = ARMA(y1, (2,1)).fit()\nplot_acf(arma21.resid, lags=20)\nprint(portmanteau_test(arma21.resid))\n```\n\n#### (5)\n\n```py\ny2 = arma.y2.values\nplot_acf_pacf(y2)\n```\n```py\norder_select = stattools.arma_order_select_ic(y2, max_ar=2, max_ma=2, ic=['aic', 'bic'])\nprint(order_select['aic'])\nprint(order_select['bic'])\nprint('AIC:', order_select['aic_min_order'], ', SIC:', order_select['bic_min_order'])\n```\n```py\narma21 = ARMA(y2, (2,1)).fit()\nplot_acf(arma21.resid, lags=20)\nprint(portmanteau_test(arma21.resid))\n```\n```py\ny3 = arma.y3.values\nplot_acf_pacf(y3)\n```\n```py\norders = [(4,0), (8,0), (1,1), (1,2), (1,3), (2,1), (2,2), (2,3)]\nprint(arma_order_select(y3, orders))\n```\n```py\narma23 = ARMA(y3, (2,3)).fit()\nplot_acf(arma23.resid, lags=20)\nprint(portmanteau_test(arma23.resid))\n```\n```py\narma11 = ARMA(y3, (1,1)).fit()\nplot_acf(arma11.resid, lags=20)\nprint(portmanteau_test(arma11.resid))\n```\n\n## 4. VAR \u30e2\u30c7\u30eb\n\n```py\nmsci_day = pd.read_excel('http://www.geocities.jp/tatsuyoshi_okimoto/books/tsa/msci_day.xls', index_col='Date')\nmsci_pct = np.log(msci_day).diff().dropna() * 100\n```\n\n### 4.5\n\n#### (1)\n\n```py\njp_uk_us = ['jp', 'uk', 'us']\nvar3 = VAR(msci_pct[jp_uk_us]).fit(3)\n\nimport itertools\n\ndf = pd.DataFrame(index=['\u7d71\u8a08\u691c\u5b9a\u91cf', 'p\u5024'])\nfor pair in itertools.permutations(jp_uk_us, r=2):\n    col = pair[1] + ' \u2192 ' + pair[0]\n    res = var3.test_causality(*pair, verbose=False)\n    df[col] = [res['statistic'].round(3), res['pvalue'].round(3)]\nprint(df)\n```\n```py\nvar3.irf().plot(orth=True)\n```\n```py\nvar3.fevd().plot()\n```\n\n### 4.6\n\n#### (4)\n\n```py\nmodel = VAR(msci_pct[['jp', 'fr', 'ca']])\nmodel.select_order(10)\nresult = model.fit(maxlags=10, ic='aic')\n```\n\n#### (5)\n\n```py\nresult.test_causality('fr', 'jp')\n\nresult.test_causality('fr', 'ca')\n```\n\n#### (6)\n\n```py\nresult.irf().plot(impulse='fr', response='jp')\n```\n\n#### (7)\n\n```py\nresult.fevd().plot()\n```\n", "tags": ["Python3.5", "\u6642\u7cfb\u5217\u89e3\u6790"]}