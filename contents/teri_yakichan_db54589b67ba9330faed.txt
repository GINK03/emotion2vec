{"context": "\u3053\u306e\u8a18\u4e8b\u306f ErgoDox Advent Calendar 2016 \u306e4\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\nErgoDox\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u5927\u62b5\u306e\u4eba\u306f\u30ad\u30fc\u30de\u30c3\u30d7\u3092\u5909\u66f4\u3057\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u30de\u30af\u30ed\u306f\u3042\u307e\u308a\u4f7f\u7528\u3055\u308c\u3066\u3044\u306a\u3044(\u6c17\u304c\u3059\u308b)\u306e\u3067\u89e3\u8aac\u3057\u307e\u3059\u3002\n\u3053\u306e\u8a18\u4e8b\u3067\u306fErgoDox EZ + qmk_firmware\u3092\u524d\u63d0\u3068\u3057\u3066\u3044\u307e\u3059(EZ\u3058\u3083\u306a\u304f\u3066\u3082\u826f\u3044\u30cf\u30ba)\u3002\n\u2193\u8a18\u4e8b\u3068\u306f\u95a2\u4fc2\u306a\u3044\u3067\u3059\u304c\u3001\u307c\u304f\u304c\u4f7f\u7528\u3057\u3066\u3044\u308b\u30a4\u30b1\u3066\u308b\u30ad\u30fc\u30de\u30c3\u30d7\u3067\u3059\u3002\nkeymap.c (osx)\nkeymap.c (win&osx)\n\n \u57fa\u790e\u7de8\nkeymap.md\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b\u5185\u5bb9\u3067\u3059\u3002\n\n \u30de\u30af\u30ed\u3067\u4f7f\u7528\u3067\u304d\u308b\u30b3\u30de\u30f3\u30c9\u4e00\u89a7\n\n\n\n\u30b3\u30de\u30f3\u30c9\n\u52d5\u4f5c\n\n\n\n\nI()\n\u30de\u30af\u30ed\u306e\u5b9f\u884c\u9593\u9694\u3092\u5909\u66f4(\u30df\u30ea\u79d2)\n\n\nD()\n\u30ad\u30fc\u3092\u62bc\u4e0b\n\n\nU()\n\u30ad\u30fc\u3092\u96e2\u3059\n\n\nT()\n\u30ad\u30fc\u3092\u30bf\u30c3\u30d7(\u62bc\u3057\u3066\u96e2\u3059)\n\n\nW()\nwait(\u30df\u30ea\u79d2)\n\n\nEND\n\u30de\u30af\u30ed\u7d42\u4e86\n\n\n\n\n \u30de\u30af\u30ed\u306e\u5b9a\u7fa9\n\u30de\u30af\u30ed\u30a2\u30af\u30b7\u30e7\u30f3\u306f\u3001\u6b21\u306e\u69d8\u306b\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u305f\u3044\u9806\u306b\u8a18\u8ff0\u3057\u3066\u4f5c\u6210\u3057\u307e\u3059\u3002\n(\u4f8b) 'hello'\u3068\u5165\u529b\nMACRO( T(H), T(E), T(L), T(L), T(O), END )\n\n\u30ad\u30fc\u62bc\u4e0b\u6642\u306b\u547c\u3073\u51fa\u3059\u306b\u306f\u3001action_get_macro\u5185\u306eswitch\u3067id\u306b\u5272\u308a\u5f53\u3066\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\naction_get_macro\u306fkeydown/keyup\u305d\u308c\u305e\u308c\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u547c\u3070\u308c\u308b\u70ba\u3001record->event.pressed\u306e\u5024\u3092\u4f7f\u7528\u3057\u3001\u3069\u3061\u3089\u3067\u5b9f\u884c\u3059\u308b\u304b\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059(\u3057\u306a\u3044\u30682\u56de\u5b9f\u884c\u3055\u308c\u3061\u3083\u3046)\u3002\n\u4e0b\u8a18\u306e\u4f8b\u3067\u306f\u3001M(0)\u3092\u5272\u308a\u5f53\u3066\u305f\u30ad\u30fc\u3092keydown\u3059\u308b\u3068'Hello'\u3001M(1)\u3092keyup\u3059\u308b\u3068'Bye'\u3068\u5165\u529b\u3057\u307e\u3059\u3002\n\nkeymap.c\nconst macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt) {\n    switch(id) {\n    case 0: // id=0\u306e\u30de\u30af\u30ed\u5b9a\u7fa9\n        if (record->event.pressed) {\n            return MACRO(D(LSFT), T(H), U(LSFT), T(E), T(L), T(L), T(O), END); // keydown\u6642\u306e\u52d5\u4f5c('Hello'\u3068\u5165\u529b)\n        }\n        break;\n    case 1: // id=1\u306e\u30de\u30af\u30ed\u5b9a\u7fa9\n        if (!record->event.pressed) {        \n            return MACRO(D(LSFT), T(B), U(LSFT), T(Y), T(E), END); // keyup\u6642\u306e\u52d5\u4f5c('Bye'\u3068\u5165\u529b)\n        }\n        break;\n    }\n    return MACRO_NONE;\n}\n\n\n\u30de\u30af\u30ed\u5b9f\u884c\u4e2d\u306f\u30ad\u30fc\u5165\u529b\u3092\u53d7\u3051\u4ed8\u3051\u307e\u305b\u3093\u3002\n\u9577\u3059\u304e\u308b\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb\u3092\u8a2d\u5b9a\u3057\u305f\u308a\u3001\u7121\u9650\u30eb\u30fc\u30d7\u3057\u306a\u3044\u3088\u3046\u6c17\u3092\u3064\u3051\u307e\u3057\u3087\u3046\u3002\n \u6ce8\u610f\n\u8ab0\u3082\u3084\u3089\u306a\u3044\u3068\u601d\u3046\u3051\u3069\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u30921\u30ad\u30fc\u3067\u6253\u3066\u308b\u3088\u3046\u306b\u3059\u308b\u306e\u306f\u3084\u3081\u3088\u3046\u3002\nplain text\u3067\u4fdd\u5b58\u3059\u308b\u3088\u308a\u306f\u826f\u3044\u3068\u304a\u3082\u3046\u3051\u3069...\n\n \u30de\u30af\u30ed\u306e\u5272\u308a\u5f53\u3066\n\u30de\u30af\u30ed\u3092\u5b9f\u884c\u3055\u305b\u305f\u3044\u30ad\u30fc\u306b\u3001KC_*\u7b49\u306e\u4ee3\u308f\u308a\u306bM(id)\u3092\u5272\u308a\u5f53\u3066\u307e\u3059\u3002\n\u30de\u30af\u30ed\u3092\u6ca2\u5c71\u4f7f\u7528\u3059\u308b\u306a\u3089define\u3057\u305f\u65b9\u304c\u826f\u3044\u304b\u3082\u3002\n\nkeymap.c\n#define M_BYE M(1)\n\nconst uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {\n    [BASE] = KEYMAP(\n        M(0),  KC_1, KC_2, KC_3, KC_4, KC_5, KC_NO,\n        M_BYE, KC_Q, // \u4ee5\u4e0b\u7565...\n    ),\n}\n\n\n\n \u5fdc\u7528\u7de8\n\u3082\u3046\u5c11\u3057\u5b9f\u7528\u7684\u306a\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\n\n \u30ad\u30fc\u5165\u529b\u30de\u30af\u30ed\u3092\u3082\u3063\u3068\u7c21\u5358\u306b\nSEND_STRING()\u3092\u4f7f\u3046\u3068\u3001\u5358\u7d14\u306a\u30ad\u30fc\u5165\u529b\u30de\u30af\u30ed\u3092\u7c21\u5358\u306b\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002\n\u305f\u3060\u3057\u3001\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb\u306e\u8a2d\u5b9a\u7b49\u306f\u3067\u304d\u306a\u3044\u70ba\u3001\u8907\u96d1\u306a\u51e6\u7406\u3092\u3057\u305f\u3044\u5834\u5408\u306f\u524d\u8ff0\u306ereturn MACRO()\u3067\u8a18\u8ff0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\nkeymap.c\nconst macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt) {\n    switch(id) {\n    case 0: // id=0\u306e\u30de\u30af\u30ed\u5b9a\u7fa9\n        if (record->event.pressed) {\n            SEND_STRING(\"Hello\"); // keydown\u6642\u306e\u52d5\u4f5c('Hello'\u3068\u5165\u529b)\n        }\n        break;\n    }\n    return MACRO_NONE;\n}\n\n\n\u30b3\u30ec\u7cfb\u306e\u30de\u30af\u30ed\u306f\u3001SEND_STRING(\":w\\n\"); \u3068\u304b SEND_STRING(\":qa\\n\"); \u3068\u304b\u4f5c\u3063\u3066\u304a\u304f\u3068\u4fbf\u5229\u305d\u3046\u3002\n(\u3068\u601d\u3063\u305f\u3051\u3069\u3001.vimrc\u66f8\u3051\u3070\u826f\u3044\u304b...)\nquantum.c\u306e\u5b9f\u88c5\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002\nquantum.h\u3067 #define SEND_STRING(str) send_string(PSTR(str)) \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u306a\u304a\u3001register_code()\u306fkeydown\u3001unregister_code()\u306fkeyup\u3067\u3059\u3002\u4e0b\u8a18\u306e\u901a\u308a\u3001send_string\u3067\u306f\u5927\u6587\u5b57\u7b49\u542b\u3080\u5834\u5408\u306fLSFT\u3092\u62bc\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\nquantum.c\nvoid send_string(const char *str) {\n    while (1) {\n        uint8_t keycode;\n        uint8_t ascii_code = pgm_read_byte(str);\n        if (!ascii_code) break;\n        keycode = pgm_read_byte(&ascii_to_qwerty_keycode_lut[ascii_code]);\n        if (pgm_read_byte(&ascii_to_qwerty_shift_lut[ascii_code])) {\n            register_code(KC_LSFT);\n            register_code(keycode);\n            unregister_code(keycode);\n            unregister_code(KC_LSFT);\n        }\n        else {\n            register_code(keycode);\n            unregister_code(keycode);\n        }\n        ++str;\n    }\n}\n\n\n\n \u62bc\u4e0b\u6642\u9593\u3067\u51e6\u7406\u5185\u5bb9\u3092\u5909\u3048\u308b\naction_get_macro\u5b9f\u884c\u6642\u3001keydown\u3068keyup\u306e\u51e6\u7406\u3092\u5206\u3051\u3089\u308c\u308b\u70ba\u3001\u62bc\u4e0b\u3057\u3066\u3044\u308b\u6642\u9593\u3092\u4f7f\u7528\u3057\u305f\u30de\u30af\u30ed\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u6b21\u306e\u4f8b\u3067\u306f\u3001\u9577\u62bc\u3057(150ms\u4ee5\u4e0a\u62bc\u3057\u3066\u305f)\u6642\u306bCmd+C\u3001\u30bf\u30c3\u30d7\u6642\u306bCmd+V\u3057\u307e\u3059\u3002\n\nkeymap.c\nstatic uint16_t start;\nconst macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt) {\n    switch(id) {\n    case 0: // id=0\u306e\u30de\u30af\u30ed\u5b9a\u7fa9\n        if (record->event.pressed) {\n            // \u62bc\u4e0b\u3057\u305f\u3068\u304d\n            start = timer_read();\n        } else {\n            // \u96e2\u3057\u305f\u3068\u304d\n            if (timer_elapsed(start) >= 150)\n                // \u62bc\u4e0b\u3057\u3066\u304b\u3089150ms\u4ee5\u4e0a(\u9577\u62bc\u3057)\u306a\u3089\u30b3\u30d4\u30fc\n                return MACRO(D(LGUI), T(C), U(LGUI), END);\n            else\n                // \u62bc\u4e0b\u3057\u3066\u304b\u3089150ms\u672a\u6e80(\u30bf\u30c3\u30d7)\u306a\u3089\u30da\u30fc\u30b9\u30c8\n                return MACRO(D(LGUI), T(V), U(LGUI), END);\n        }\n        break;\n    }\n    return MACRO_NONE;\n}\n\n\n\n \u30e9\u30f3\u30c0\u30e0\u306a\u6587\u5b57\u5217\u3092\u5165\u529b\u3059\u308b\nquantum.c\u306etap_random_base64()\u3067\u3001Base64\u306e\u6587\u5b57\u3092\u30e9\u30f3\u30c0\u30e0\u3067\u4e00\u3064\u51fa\u529b\u3067\u304d\u307e\u3059\u3002\n\u6b21\u306e\u4f8b\u3067\u306f\u3001\u30de\u30af\u30ed\u5b9f\u884c\u6642\u306b8\u6841\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u6587\u5b57\u5217\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\u4f55\u304b\u306b\u4f7f\u3048\u305d\u3046\u3002\n\nkeymap.c\nconst macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt) {\n    switch(id) {\n    case 0: // id=0\u306e\u30de\u30af\u30ed\u5b9a\u7fa9\n        if (record->event.pressed)\n            for (int i = 0; i < 8; ++i)\n                tap_random_base64();\n        break;\n    }\n    return MACRO_NONE;\n}\n\n\n\u3061\u306a\u307f\u306b\u3053\u3053\u3067\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u4e71\u6570\u306f\u4e0b\u8a18\u306e\u901a\u308a\u3067\u3059\u3002\n\nquantum.c\n  #if defined(__AVR_ATmega32U4__)\n    uint8_t key = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 64;\n  #else\n    uint8_t key = rand() % 64;\n  #endif\n\n\n\n \u30eb\u30fc\u30ec\u30c3\u30c8\u7684\u306a\u3082\u306e\u3092\u4f5c\u308b\n\u4f55\u304b\u826f\u3044\u30cd\u30bf\u306f\u7121\u3044\u304b\u306a\u3042\u3068\u8003\u3048\u3066\u3044\u305f\u3068\u3053\u308d\u3075\u3068\u601d\u3044\u3064\u3044\u305f\u306e\u3067\u3001\u30eb\u30fc\u30ec\u30c3\u30c8(?)\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\nroulette()\u3092\u53e9\u304f\u3068\u30ad\u30fc\u30dc\u30fc\u30c9\u53f3\u4e0a\u306e3\u3064\u306eLED\u304c\u9806\u756a\u306b\u70b9\u706f\u3057\u3001\u30e9\u30f3\u30c0\u30e0\u3067\u3069\u308c\u304b\u4e00\u3064\u306b\u6b62\u307e\u308a\u307e\u3059\u3002\n\u305d\u308c\u3060\u3051\u3067\u3059...\n\nkeymap.c\nvoid single_light_on(int num) {\n    ergodox_board_led_off();\n    ergodox_right_led_1_off();\n    ergodox_right_led_2_off();\n    ergodox_right_led_3_off();\n    switch (num) {\n    case 1:\n        ergodox_right_led_1_on();\n        break;\n    case 2:\n        ergodox_right_led_2_on();\n        break;\n    case 3:\n        ergodox_right_led_3_on();\n        break;\n    }\n}\n\nvoid roulette(void) {\n#if defined(__AVR_ATmega32U4__)\n    uint8_t val = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 3;\n#else\n    uint8_t val = rand() % 3;\n#endif\n    for (int i = 0; i <= 9 + val; ++i) {\n        single_light_on(i % 3 + 1);\n        _delay_ms(100);\n    }\n    for (int i = 0; i < 3; ++i)\n    {\n        single_light_on(0);\n        _delay_ms(100);\n        single_light_on(val + 1);\n        _delay_ms(100);\n    }\n    _delay_ms(900);\n    matrix_scan_user();\n}\n\nconst macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)\n{\n  // MACRODOWN only works in this function\n    switch(id) {\n    case MACRO_TEST:\n    if (record->event.pressed) {\n        roulette();\n    }\n    break;\n    }\n    return MACRO_NONE;\n};\n\n\n\n \u307e\u3068\u3081\n\u3084\u308d\u3046\u3068\u601d\u3048\u3070\u8272\u3005\u3067\u304d\u305d\u3046\u3002grep -r MACRO\u3059\u308b\u3068\u826f\u3044\u30b5\u30f3\u30d7\u30eb\u304c\u6ca2\u5c71\u898b\u3064\u304b\u308b\u306e\u3067\u53c2\u8003\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u6271\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u30b2\u30fc\u30e0\u3067\u306f\u8272\u3005\u6d3b\u7528\u3067\u304d\u305d\u3046\u306a\u6c17\u304c\u3059\u308b(\u30b3\u30f3\u30dc\u3068\u304b)\uff1f\n\u30b9\u30a4\u30c3\u30c1\u306bLED\u304c\u8f09\u3063\u3066\u3044\u308c\u3070\u8272\u3005\u904a\u3079\u305d\u3046\u3060\u3051\u3069EZ\u306b\u306f\u8f09\u305b\u3089\u308c\u306a\u3044... Infinity\u306eDrop\u3092\u5f85\u3068\u3046\u3002\n\u3061\u306a\u307f\u306b\u307c\u304f\u306f\u666e\u6bb5\u30de\u30af\u30ed\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u305b\u3093...\n\u3053\u306e\u8a18\u4e8b\u306f <a href=\"http://qiita.com/advent-calendar/2016/ergodox\" target=\"_blank\">ErgoDox Advent Calendar 2016</a> \u306e4\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\nErgoDox\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u5927\u62b5\u306e\u4eba\u306f\u30ad\u30fc\u30de\u30c3\u30d7\u3092\u5909\u66f4\u3057\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u30de\u30af\u30ed\u306f\u3042\u307e\u308a\u4f7f\u7528\u3055\u308c\u3066\u3044\u306a\u3044(\u6c17\u304c\u3059\u308b)\u306e\u3067\u89e3\u8aac\u3057\u307e\u3059\u3002\n\u3053\u306e\u8a18\u4e8b\u3067\u306fErgoDox EZ + qmk_firmware\u3092\u524d\u63d0\u3068\u3057\u3066\u3044\u307e\u3059(EZ\u3058\u3083\u306a\u304f\u3066\u3082\u826f\u3044\u30cf\u30ba)\u3002\n\n\u2193\u8a18\u4e8b\u3068\u306f\u95a2\u4fc2\u306a\u3044\u3067\u3059\u304c\u3001\u307c\u304f\u304c\u4f7f\u7528\u3057\u3066\u3044\u308b\u30a4\u30b1\u3066\u308b\u30ad\u30fc\u30de\u30c3\u30d7\u3067\u3059\u3002\n<a href=\"https://github.com/teriyakichan/qmk_firmware/blob/master/keyboards/ergodox/keymaps/custom_mac/keymap.c\" target=\"_blank\">keymap.c (osx)</a>\n<a href=\"https://github.com/teriyakichan/qmk_firmware/blob/master/keyboards/ergodox/keymaps/custom_win/keymap.c\" target=\"_blank\">keymap.c (win&osx)</a>\n\n# <i class=\"fa fa-cube\" style=\"font-size:1em;\"></i> \u57fa\u790e\u7de8\nkeymap.md\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b\u5185\u5bb9\u3067\u3059\u3002\n## <i class=\"fa fa-list-alt\" style=\"font-size:1em;\"></i> \u30de\u30af\u30ed\u3067\u4f7f\u7528\u3067\u304d\u308b\u30b3\u30de\u30f3\u30c9\u4e00\u89a7\n| \u30b3\u30de\u30f3\u30c9 | \u52d5\u4f5c |\n|:-:|:--|\n|I()|\u30de\u30af\u30ed\u306e\u5b9f\u884c\u9593\u9694\u3092\u5909\u66f4(\u30df\u30ea\u79d2)|\n|D()|\u30ad\u30fc\u3092\u62bc\u4e0b|\n|U()|\u30ad\u30fc\u3092\u96e2\u3059|\n|T()|\u30ad\u30fc\u3092\u30bf\u30c3\u30d7(\u62bc\u3057\u3066\u96e2\u3059)|\n|W()|wait(\u30df\u30ea\u79d2)|\n|END|\u30de\u30af\u30ed\u7d42\u4e86|\n\n## <i class=\"fa fa-cog\" style=\"font-size:1em;\"></i> \u30de\u30af\u30ed\u306e\u5b9a\u7fa9\n\u30de\u30af\u30ed\u30a2\u30af\u30b7\u30e7\u30f3\u306f\u3001\u6b21\u306e\u69d8\u306b\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u305f\u3044\u9806\u306b\u8a18\u8ff0\u3057\u3066\u4f5c\u6210\u3057\u307e\u3059\u3002\n(\u4f8b) 'hello'\u3068\u5165\u529b\n\n``` c\nMACRO( T(H), T(E), T(L), T(L), T(O), END )\n```\n\n\u30ad\u30fc\u62bc\u4e0b\u6642\u306b\u547c\u3073\u51fa\u3059\u306b\u306f\u3001**action_get_macro**\u5185\u306eswitch\u3067id\u306b\u5272\u308a\u5f53\u3066\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\naction_get_macro\u306fkeydown/keyup\u305d\u308c\u305e\u308c\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u547c\u3070\u308c\u308b\u70ba\u3001**record->event.pressed**\u306e\u5024\u3092\u4f7f\u7528\u3057\u3001\u3069\u3061\u3089\u3067\u5b9f\u884c\u3059\u308b\u304b\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059(\u3057\u306a\u3044\u30682\u56de\u5b9f\u884c\u3055\u308c\u3061\u3083\u3046)\u3002\n\u4e0b\u8a18\u306e\u4f8b\u3067\u306f\u3001M(0)\u3092\u5272\u308a\u5f53\u3066\u305f\u30ad\u30fc\u3092keydown\u3059\u308b\u3068'Hello'\u3001M(1)\u3092keyup\u3059\u308b\u3068'Bye'\u3068\u5165\u529b\u3057\u307e\u3059\u3002\n\n``` c:keymap.c\nconst macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt) {\n    switch(id) {\n    case 0: // id=0\u306e\u30de\u30af\u30ed\u5b9a\u7fa9\n        if (record->event.pressed) {\n            return MACRO(D(LSFT), T(H), U(LSFT), T(E), T(L), T(L), T(O), END); // keydown\u6642\u306e\u52d5\u4f5c('Hello'\u3068\u5165\u529b)\n        }\n        break;\n    case 1: // id=1\u306e\u30de\u30af\u30ed\u5b9a\u7fa9\n        if (!record->event.pressed) {        \n            return MACRO(D(LSFT), T(B), U(LSFT), T(Y), T(E), END); // keyup\u6642\u306e\u52d5\u4f5c('Bye'\u3068\u5165\u529b)\n        }\n        break;\n    }\n    return MACRO_NONE;\n}\n```\n\n\u30de\u30af\u30ed\u5b9f\u884c\u4e2d\u306f\u30ad\u30fc\u5165\u529b\u3092\u53d7\u3051\u4ed8\u3051\u307e\u305b\u3093\u3002\n\u9577\u3059\u304e\u308b\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb\u3092\u8a2d\u5b9a\u3057\u305f\u308a\u3001\u7121\u9650\u30eb\u30fc\u30d7\u3057\u306a\u3044\u3088\u3046\u6c17\u3092\u3064\u3051\u307e\u3057\u3087\u3046\u3002\n\n<i class=\"fa fa-exclamation\" style=\"font-size:1em;\"></i> \u6ce8\u610f\n\u8ab0\u3082\u3084\u3089\u306a\u3044\u3068\u601d\u3046\u3051\u3069\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u30921\u30ad\u30fc\u3067\u6253\u3066\u308b\u3088\u3046\u306b\u3059\u308b\u306e\u306f\u3084\u3081\u3088\u3046\u3002\nplain text\u3067\u4fdd\u5b58\u3059\u308b\u3088\u308a\u306f\u826f\u3044\u3068\u304a\u3082\u3046\u3051\u3069...\n\n## <i class=\"fa fa-keyboard-o\" style=\"font-size:1em;\"></i> \u30de\u30af\u30ed\u306e\u5272\u308a\u5f53\u3066\n\u30de\u30af\u30ed\u3092\u5b9f\u884c\u3055\u305b\u305f\u3044\u30ad\u30fc\u306b\u3001KC_\\*\u7b49\u306e\u4ee3\u308f\u308a\u306b**M(id)**\u3092\u5272\u308a\u5f53\u3066\u307e\u3059\u3002\n\u30de\u30af\u30ed\u3092\u6ca2\u5c71\u4f7f\u7528\u3059\u308b\u306a\u3089define\u3057\u305f\u65b9\u304c\u826f\u3044\u304b\u3082\u3002\n\n``` c:keymap.c\n#define M_BYE M(1)\n\nconst uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {\n    [BASE] = KEYMAP(\n        M(0),  KC_1, KC_2, KC_3, KC_4, KC_5, KC_NO,\n        M_BYE, KC_Q, // \u4ee5\u4e0b\u7565...\n    ),\n}\n```\n\n# <i class=\"fa fa-cubes\" style=\"font-size:1em;\"></i> \u5fdc\u7528\u7de8\n\u3082\u3046\u5c11\u3057\u5b9f\u7528\u7684\u306a\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\n## <i class=\"fa fa-smile-o\" style=\"font-size:1em;\"></i> \u30ad\u30fc\u5165\u529b\u30de\u30af\u30ed\u3092\u3082\u3063\u3068\u7c21\u5358\u306b\n**SEND_STRING()**\u3092\u4f7f\u3046\u3068\u3001\u5358\u7d14\u306a\u30ad\u30fc\u5165\u529b\u30de\u30af\u30ed\u3092\u7c21\u5358\u306b\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002\n\u305f\u3060\u3057\u3001\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb\u306e\u8a2d\u5b9a\u7b49\u306f\u3067\u304d\u306a\u3044\u70ba\u3001\u8907\u96d1\u306a\u51e6\u7406\u3092\u3057\u305f\u3044\u5834\u5408\u306f\u524d\u8ff0\u306ereturn MACRO()\u3067\u8a18\u8ff0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n``` c:keymap.c\nconst macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt) {\n    switch(id) {\n    case 0: // id=0\u306e\u30de\u30af\u30ed\u5b9a\u7fa9\n        if (record->event.pressed) {\n            SEND_STRING(\"Hello\"); // keydown\u6642\u306e\u52d5\u4f5c('Hello'\u3068\u5165\u529b)\n        }\n        break;\n    }\n    return MACRO_NONE;\n}\n```\n\n\u30b3\u30ec\u7cfb\u306e\u30de\u30af\u30ed\u306f\u3001SEND_STRING(\":w\\n\"); \u3068\u304b SEND_STRING(\":qa\\n\"); \u3068\u304b\u4f5c\u3063\u3066\u304a\u304f\u3068\u4fbf\u5229\u305d\u3046\u3002\n(\u3068\u601d\u3063\u305f\u3051\u3069\u3001.vimrc\u66f8\u3051\u3070\u826f\u3044\u304b...)\n\n\nquantum.c\u306e\u5b9f\u88c5\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002\nquantum.h\u3067 #define SEND_STRING(str) send_string(PSTR(str)) \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u306a\u304a\u3001register_code()\u306fkeydown\u3001unregister_code()\u306fkeyup\u3067\u3059\u3002\u4e0b\u8a18\u306e\u901a\u308a\u3001send_string\u3067\u306f\u5927\u6587\u5b57\u7b49\u542b\u3080\u5834\u5408\u306fLSFT\u3092\u62bc\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n``` c:quantum.c\nvoid send_string(const char *str) {\n    while (1) {\n        uint8_t keycode;\n        uint8_t ascii_code = pgm_read_byte(str);\n        if (!ascii_code) break;\n        keycode = pgm_read_byte(&ascii_to_qwerty_keycode_lut[ascii_code]);\n        if (pgm_read_byte(&ascii_to_qwerty_shift_lut[ascii_code])) {\n            register_code(KC_LSFT);\n            register_code(keycode);\n            unregister_code(keycode);\n            unregister_code(KC_LSFT);\n        }\n        else {\n            register_code(keycode);\n            unregister_code(keycode);\n        }\n        ++str;\n    }\n}\n```\n\n## <i class=\"fa fa-clock-o\" style=\"font-size:1em;\"></i> \u62bc\u4e0b\u6642\u9593\u3067\u51e6\u7406\u5185\u5bb9\u3092\u5909\u3048\u308b\naction_get_macro\u5b9f\u884c\u6642\u3001keydown\u3068keyup\u306e\u51e6\u7406\u3092\u5206\u3051\u3089\u308c\u308b\u70ba\u3001\u62bc\u4e0b\u3057\u3066\u3044\u308b\u6642\u9593\u3092\u4f7f\u7528\u3057\u305f\u30de\u30af\u30ed\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u6b21\u306e\u4f8b\u3067\u306f\u3001\u9577\u62bc\u3057(150ms\u4ee5\u4e0a\u62bc\u3057\u3066\u305f)\u6642\u306bCmd+C\u3001\u30bf\u30c3\u30d7\u6642\u306bCmd+V\u3057\u307e\u3059\u3002\n\n``` c:keymap.c\nstatic uint16_t start;\nconst macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt) {\n    switch(id) {\n    case 0: // id=0\u306e\u30de\u30af\u30ed\u5b9a\u7fa9\n        if (record->event.pressed) {\n            // \u62bc\u4e0b\u3057\u305f\u3068\u304d\n            start = timer_read();\n        } else {\n            // \u96e2\u3057\u305f\u3068\u304d\n            if (timer_elapsed(start) >= 150)\n                // \u62bc\u4e0b\u3057\u3066\u304b\u3089150ms\u4ee5\u4e0a(\u9577\u62bc\u3057)\u306a\u3089\u30b3\u30d4\u30fc\n                return MACRO(D(LGUI), T(C), U(LGUI), END);\n            else\n                // \u62bc\u4e0b\u3057\u3066\u304b\u3089150ms\u672a\u6e80(\u30bf\u30c3\u30d7)\u306a\u3089\u30da\u30fc\u30b9\u30c8\n                return MACRO(D(LGUI), T(V), U(LGUI), END);\n        }\n        break;\n    }\n    return MACRO_NONE;\n}\n```\n\n## <i class=\"fa fa-random\" style=\"font-size:1em;\"></i> \u30e9\u30f3\u30c0\u30e0\u306a\u6587\u5b57\u5217\u3092\u5165\u529b\u3059\u308b\nquantum.c\u306e**tap_random_base64()**\u3067\u3001Base64\u306e\u6587\u5b57\u3092\u30e9\u30f3\u30c0\u30e0\u3067\u4e00\u3064\u51fa\u529b\u3067\u304d\u307e\u3059\u3002\n\u6b21\u306e\u4f8b\u3067\u306f\u3001\u30de\u30af\u30ed\u5b9f\u884c\u6642\u306b8\u6841\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u6587\u5b57\u5217\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\u4f55\u304b\u306b\u4f7f\u3048\u305d\u3046\u3002\n\n``` c:keymap.c\nconst macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt) {\n    switch(id) {\n    case 0: // id=0\u306e\u30de\u30af\u30ed\u5b9a\u7fa9\n        if (record->event.pressed)\n            for (int i = 0; i < 8; ++i)\n                tap_random_base64();\n        break;\n    }\n    return MACRO_NONE;\n}\n```\n\n\u3061\u306a\u307f\u306b\u3053\u3053\u3067\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u4e71\u6570\u306f\u4e0b\u8a18\u306e\u901a\u308a\u3067\u3059\u3002\n\n``` c:quantum.c\n  #if defined(__AVR_ATmega32U4__)\n    uint8_t key = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 64;\n  #else\n    uint8_t key = rand() % 64;\n  #endif\n```\n\n## <i class=\"fa fa-spinner\" style=\"font-size:1em;\"></i> \u30eb\u30fc\u30ec\u30c3\u30c8\u7684\u306a\u3082\u306e\u3092\u4f5c\u308b\n\u4f55\u304b\u826f\u3044\u30cd\u30bf\u306f\u7121\u3044\u304b\u306a\u3042\u3068\u8003\u3048\u3066\u3044\u305f\u3068\u3053\u308d\u3075\u3068\u601d\u3044\u3064\u3044\u305f\u306e\u3067\u3001\u30eb\u30fc\u30ec\u30c3\u30c8(?)\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\nroulette()\u3092\u53e9\u304f\u3068\u30ad\u30fc\u30dc\u30fc\u30c9\u53f3\u4e0a\u306e3\u3064\u306eLED\u304c\u9806\u756a\u306b\u70b9\u706f\u3057\u3001\u30e9\u30f3\u30c0\u30e0\u3067\u3069\u308c\u304b\u4e00\u3064\u306b\u6b62\u307e\u308a\u307e\u3059\u3002\n\u305d\u308c\u3060\u3051\u3067\u3059...\n\n``` c:keymap.c\nvoid single_light_on(int num) {\n    ergodox_board_led_off();\n    ergodox_right_led_1_off();\n    ergodox_right_led_2_off();\n    ergodox_right_led_3_off();\n    switch (num) {\n    case 1:\n        ergodox_right_led_1_on();\n        break;\n    case 2:\n        ergodox_right_led_2_on();\n        break;\n    case 3:\n        ergodox_right_led_3_on();\n        break;\n    }\n}\n\nvoid roulette(void) {\n#if defined(__AVR_ATmega32U4__)\n    uint8_t val = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 3;\n#else\n    uint8_t val = rand() % 3;\n#endif\n    for (int i = 0; i <= 9 + val; ++i) {\n        single_light_on(i % 3 + 1);\n        _delay_ms(100);\n    }\n    for (int i = 0; i < 3; ++i)\n    {\n        single_light_on(0);\n        _delay_ms(100);\n        single_light_on(val + 1);\n        _delay_ms(100);\n    }\n    _delay_ms(900);\n    matrix_scan_user();\n}\n\nconst macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)\n{\n  // MACRODOWN only works in this function\n    switch(id) {\n    case MACRO_TEST:\n    if (record->event.pressed) {\n        roulette();\n    }\n    break;\n    }\n    return MACRO_NONE;\n};\n```\n\n# <i class=\"fa fa-book\" style=\"font-size:1em;\"></i> \u307e\u3068\u3081\n\u3084\u308d\u3046\u3068\u601d\u3048\u3070\u8272\u3005\u3067\u304d\u305d\u3046\u3002grep -r MACRO\u3059\u308b\u3068\u826f\u3044\u30b5\u30f3\u30d7\u30eb\u304c\u6ca2\u5c71\u898b\u3064\u304b\u308b\u306e\u3067\u53c2\u8003\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u6271\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u30b2\u30fc\u30e0\u3067\u306f\u8272\u3005\u6d3b\u7528\u3067\u304d\u305d\u3046\u306a\u6c17\u304c\u3059\u308b(\u30b3\u30f3\u30dc\u3068\u304b)\uff1f\n\u30b9\u30a4\u30c3\u30c1\u306bLED\u304c\u8f09\u3063\u3066\u3044\u308c\u3070\u8272\u3005\u904a\u3079\u305d\u3046\u3060\u3051\u3069EZ\u306b\u306f\u8f09\u305b\u3089\u308c\u306a\u3044... Infinity\u306eDrop\u3092\u5f85\u3068\u3046\u3002\n\n\u3061\u306a\u307f\u306b\u307c\u304f\u306f\u666e\u6bb5\u30de\u30af\u30ed\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u305b\u3093...\n", "tags": ["ergodox"]}