{"tags": ["Python", "bigquery"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002\n\nBigQuery\u3092python\u3067\u4f7f\u3046\u3002\nBigQuery\u306fGoogle\u306e\u63d0\u4f9b\u3057\u3066\u3044\u308b\u3068\u3066\u3082\u65e9\u3044\u30c7\u30fc\u30bf\u5206\u6790\u74b0\u5883\u3060\u3002\u306a\u3093\u3067\u3082\u30c7\u30fc\u30bf\u3092\u4f55\u5343\u53f0\u306e\u30de\u30b7\u30f3\u306b\u5206\u6563\u3057\u3066\u51e6\u7406\u3057\u3066\u3044\u308b\u305d\u3046\u3067\u3001\u307e\u3055\u306bGoogle\u306b\u3057\u304b\u3067\u304d\u305d\u3046\u3082\u306a\u3044\u3002\n\u7e01\u304c\u3042\u308aBigQuery\u3092\u8a55\u4fa1\u3059\u308b\u6a5f\u4f1a\u306b\u6075\u307e\u308c\u305f\u3002\u89e6\u3063\u3066\u307f\u305f\u3089\u7d50\u69cb\u65e9\u304b\u3063\u305f\u3002python\u304b\u3089\u89e6\u3063\u3066\u307f\u308b\u65b9\u6cd5\u3092\u8a66\u3057\u305f\u306e\u3067\u5171\u6709\u3057\u305f\u3044\u3002\n\n\u4e8b\u524d\u6e96\u5099\n\nBigQuery\u5358\u4f53\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u3057\u3066\u304a\u304f\u3002\nBilling\u3092\u8a2d\u5b9a\u3057\u306a\u3044\u3068\u4f7f\u3048\u306a\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002\nBigQueryAPI\u306e\u30a2\u30af\u30bb\u30b9\u306f\u6709\u52b9\u306b\u3057\u3066\u304a\u304f\u3002\n\n\n2015-09-14 \u4fee\u6b63\n\u4e0b\u306e\u65b9\u6cd5\u3092\u53d6\u3089\u305a\u3068\u3082\u3001\nhttps://github.com/tylertreat/BigQuery-Python\n\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u51fa\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\u53c2\u8003\u306e\u70ba\u4e0b\u306e\u8a18\u8ff0\u3092\u6b8b\u3057\u307e\u3059\u3002\n\n\u74b0\u5883\u6574\u5099\nubuntu13.10\u3067\u8a66\u3057\u305f\u3002\npython\u3067\u4f7f\u3046\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5165\u308c\u308b\u3002pip\u306f\u4e8b\u524d\u306b\u5165\u308c\u3066\u304a\u304f\u3053\u3068\u3002\nsudo pip install --upgrade google-api-python-client\nsudo pip install --upgrade oauth2client\nsudo pip install httplib\n\nbigquery\u306eOauth\u8a8d\u8a3c\u3092\u751f\u6210\u3057\u3066\u3001p12\u306e\u9375\u3092\u624b\u306b\u5165\u308c\u308b\u3002\nGoogle\u306e\u30c7\u30d9\u30ed\u30c3\u30d1\u30fc\u30b3\u30f3\u30bd\u30fc\u30eb\u306e\u8a8d\u8a3c\u306e\u3068\u3053\u308d\u304b\u3089\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9375\u3092\u4f5c\u308b\u3002p12\u3068\u3044\u3046\u9375\u30d5\u30a1\u30a4\u30eb\u304c\u3067\u304d\u308b\u306e\u3067\u305d\u308c\u3092\u5229\u7528\u3059\u308b\u3002\n\n\npython\u3092\u5229\u7528\u3057\u3066\u306e\u30a2\u30af\u30bb\u30b9\u3002\n\u3053\u3061\u3089\u306estack over flow\u3092\u53c2\u8003\u306b\u3057\u305f\u3002\nhttp://stackoverflow.com/questions/13212991/how-to-query-bigquery-programmatically-from-python-without-end-user-interaction\n\u540c\u671f(sync)\u3068\u975e\u540c\u671f(async)\u4e21\u65b9\u3092\u30e1\u30bd\u30c3\u30c9\u3092\u8a66\u3057\u305f\u3002\u8a66\u3057\u305f\u74b0\u5883\u306f\u81ea\u5206\u306e\u30cb\u30b3\u30cb\u30b3\u52d5\u753b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u74b0\u5883\u3067\u8a66\u3057\u305f\u306e\u3067\u3042\u307e\u308a\u4e00\u822c\u6027\u306f\u7121\u3044\u3002\u898b\u305f\u3068\u3053\u308d\u3001\u65e5\u672c\u8a9e(utf-8)\u3092\u7528\u3044\u3066\u3082\u6b63\u5e38\u306b\u30de\u30c3\u30c1\u3059\u308b\u3088\u3046\u3060\u3002\n#!/usr/bin/python\n# -*- coding:utf-8 -*-\nimport httplib2\nimport logging\nimport time\nfrom apiclient.discovery import build\nfrom oauth2client.client import SignedJwtAssertionCredentials\nimport pprint\n\n# REPLACE WITH YOUR Project ID\nPROJECT_NUMBER = 'XXXXXXXXXXXX'\n# REPLACE WITH THE SERVICE ACCOUNT EMAIL FROM GOOGLE DEV CONSOLE\nSERVICE_ACCOUNT_EMAIL ='xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx@developer.gserviceaccount.com'\nKEYFILE='xxxxxxxxxxxxxxxx.p12'\n\n\nclass BQC(object):\n    def __init__(self):\n        f = file(KEYFILE, 'rb')\n        self.key = f.read()\n        f.close()\n\n    def _credential(self):\n        credentials = SignedJwtAssertionCredentials(\n            SERVICE_ACCOUNT_EMAIL,\n            self.key,\n            scope='https://www.googleapis.com/auth/bigquery')\n\n        http = httplib2.Http()\n        http = credentials.authorize(http)\n\n        service = build('bigquery', 'v2')\n        return http,service\n\n    def datalist(self,service,http):\n        datasets = service.datasets()\n        response = datasets.list(projectId=PROJECT_NUMBER).execute(http)\n        print('Dataset list:\\n')\n        for dataset in response['datasets']:\n            print(\"%s\\n\" % dataset['id'])\n\n    def show_result(self,result):\n        pprint.pprint(result)\n        print 'Query Results:'\n        for row in result['rows']:\n            result_row = []\n            for field in row['f']:\n                if field['v']:\n                    result_row.append(field['v'])\n            print ('\\t').join(result_row)\n\n\n\n    def sync_method(self,service,http):\n        q='SELECT *  FROM [nicodata_test.videoinfo] WHERE title like \"%{}%\" LIMIT 10;'.format(u'\u30dc\u30ab\u30ed'.encode('utf-8'))\n        print q\n        #q='SELECT TOP(title, 30) as title, COUNT(*) as revision_count FROM [publicdata:samples.wikipedia] WHERE wp_namespace = 0;'\n        query_request=service.jobs()\n        query_data={'query':q}\n        query_response = query_request.query(projectId=PROJECT_NUMBER,\n                                             body=query_data).execute(http)\n    def async_method(self,service,http):\n        q='SELECT *  FROM [nicodata_test.videoinfo] WHERE title like \"%{}%\" LIMIT 90;'.format(u'\u30dc\u30ab\u30ed'.encode('utf-8'))\n        q='SELECT *  FROM [nicodata_test.comment_data] WHERE comment like \"%{}%\" LIMIT 90;'.format(u'\u30dc\u30ab\u30ed'.encode('utf-8'))\n\n        print q\n        query_request=service.jobs()\n        query_data={'query':q}\n        query_data = {\n            'configuration': {\n                'query': {\n                    'query': q,\n                    }\n                }\n            }\n\n        ft=time.time()\n        insertResponse = query_request.insert(projectId=PROJECT_NUMBER,\n                                         body=query_data).execute(http)\n        print 'start query diff={}'.format(time.time()-ft)\n        while True:\n            print 'stat_get'\n            ft2=time.time()\n            status = query_request.get(projectId=PROJECT_NUMBER, jobId=insertResponse['jobReference']['jobId']).execute(http)\n            print 'end get diff={}'.format(time.time()-ft2)\n            currentStatus = status['status']['state']\n            if 'DONE' == currentStatus:\n                print 'sql done'\n                break\n            else:\n                print 'Waiting for the query to complete...'\n                print 'Current status: ' + currentStatus\n                print time.ctime()\n                time.sleep(0.1)\n        currentRow = 0\n        queryReply = query_request.getQueryResults(\n            projectId=PROJECT_NUMBER,\n            jobId=insertResponse['jobReference']['jobId'],\n            startIndex=currentRow).execute(http)\n\n        while(('rows' in queryReply) and currentRow < queryReply['totalRows']):\n            #self.show_result(queryReply)\n            currentRow += len(queryReply['rows'])\n            queryReply = query_request.getQueryResults(\n                projectId=PROJECT_NUMBER,\n                jobId=queryReply['jobReference']['jobId'],\n                startIndex=currentRow).execute(http)\n\n        print currentRow\n    def show(self):\n        http,service=self._credential()\n        #self.datalist(service,http)\n        #result=self.sync_method(service,http)\n        result=self.async_method(service,http)\n        #self.show_result(result)\ndef main():\n    bqc=BQC()\n    bqc.show()\n\nif __name__=='__main__':main()\n\n\n\n\n\n\n# BigQuery\u3092python\u3067\u4f7f\u3046\u3002\n\nBigQuery\u306fGoogle\u306e\u63d0\u4f9b\u3057\u3066\u3044\u308b\u3068\u3066\u3082\u65e9\u3044\u30c7\u30fc\u30bf\u5206\u6790\u74b0\u5883\u3060\u3002\u306a\u3093\u3067\u3082\u30c7\u30fc\u30bf\u3092\u4f55\u5343\u53f0\u306e\u30de\u30b7\u30f3\u306b\u5206\u6563\u3057\u3066\u51e6\u7406\u3057\u3066\u3044\u308b\u305d\u3046\u3067\u3001\u307e\u3055\u306bGoogle\u306b\u3057\u304b\u3067\u304d\u305d\u3046\u3082\u306a\u3044\u3002\n\n\u7e01\u304c\u3042\u308aBigQuery\u3092\u8a55\u4fa1\u3059\u308b\u6a5f\u4f1a\u306b\u6075\u307e\u308c\u305f\u3002\u89e6\u3063\u3066\u307f\u305f\u3089\u7d50\u69cb\u65e9\u304b\u3063\u305f\u3002python\u304b\u3089\u89e6\u3063\u3066\u307f\u308b\u65b9\u6cd5\u3092\u8a66\u3057\u305f\u306e\u3067\u5171\u6709\u3057\u305f\u3044\u3002\n\n# \u4e8b\u524d\u6e96\u5099\n\n* BigQuery\u5358\u4f53\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u3057\u3066\u304a\u304f\u3002\n* Billing\u3092\u8a2d\u5b9a\u3057\u306a\u3044\u3068\u4f7f\u3048\u306a\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n* BigQueryAPI\u306e\u30a2\u30af\u30bb\u30b9\u306f\u6709\u52b9\u306b\u3057\u3066\u304a\u304f\u3002\n\n# 2015-09-14 \u4fee\u6b63\n\n\u4e0b\u306e\u65b9\u6cd5\u3092\u53d6\u3089\u305a\u3068\u3082\u3001\n\nhttps://github.com/tylertreat/BigQuery-Python\n\n\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u51fa\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\u53c2\u8003\u306e\u70ba\u4e0b\u306e\u8a18\u8ff0\u3092\u6b8b\u3057\u307e\u3059\u3002\n\n# \u74b0\u5883\u6574\u5099\n\nubuntu13.10\u3067\u8a66\u3057\u305f\u3002\n\npython\u3067\u4f7f\u3046\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5165\u308c\u308b\u3002`pip`\u306f\u4e8b\u524d\u306b\u5165\u308c\u3066\u304a\u304f\u3053\u3068\u3002\n\n```\nsudo pip install --upgrade google-api-python-client\nsudo pip install --upgrade oauth2client\nsudo pip install httplib\n```\n\nbigquery\u306eOauth\u8a8d\u8a3c\u3092\u751f\u6210\u3057\u3066\u3001p12\u306e\u9375\u3092\u624b\u306b\u5165\u308c\u308b\u3002\n\nGoogle\u306e\u30c7\u30d9\u30ed\u30c3\u30d1\u30fc\u30b3\u30f3\u30bd\u30fc\u30eb\u306e\u8a8d\u8a3c\u306e\u3068\u3053\u308d\u304b\u3089\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9375\u3092\u4f5c\u308b\u3002p12\u3068\u3044\u3046\u9375\u30d5\u30a1\u30a4\u30eb\u304c\u3067\u304d\u308b\u306e\u3067\u305d\u308c\u3092\u5229\u7528\u3059\u308b\u3002\n\n![WS000000.JPG](https://qiita-image-store.s3.amazonaws.com/0/26986/330fae24-b5dd-0b5f-d8c6-b030872e31a0.jpeg)\n\n# python\u3092\u5229\u7528\u3057\u3066\u306e\u30a2\u30af\u30bb\u30b9\u3002\n\n\u3053\u3061\u3089\u306estack over flow\u3092\u53c2\u8003\u306b\u3057\u305f\u3002\n\nhttp://stackoverflow.com/questions/13212991/how-to-query-bigquery-programmatically-from-python-without-end-user-interaction\n\n\u540c\u671f(sync)\u3068\u975e\u540c\u671f(async)\u4e21\u65b9\u3092\u30e1\u30bd\u30c3\u30c9\u3092\u8a66\u3057\u305f\u3002\u8a66\u3057\u305f\u74b0\u5883\u306f\u81ea\u5206\u306e\u30cb\u30b3\u30cb\u30b3\u52d5\u753b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u74b0\u5883\u3067\u8a66\u3057\u305f\u306e\u3067\u3042\u307e\u308a\u4e00\u822c\u6027\u306f\u7121\u3044\u3002\u898b\u305f\u3068\u3053\u308d\u3001\u65e5\u672c\u8a9e(utf-8)\u3092\u7528\u3044\u3066\u3082\u6b63\u5e38\u306b\u30de\u30c3\u30c1\u3059\u308b\u3088\u3046\u3060\u3002\n\n```py\n#!/usr/bin/python\n# -*- coding:utf-8 -*-\nimport httplib2\nimport logging\nimport time\nfrom apiclient.discovery import build\nfrom oauth2client.client import SignedJwtAssertionCredentials\nimport pprint\n\n# REPLACE WITH YOUR Project ID\nPROJECT_NUMBER = 'XXXXXXXXXXXX'\n# REPLACE WITH THE SERVICE ACCOUNT EMAIL FROM GOOGLE DEV CONSOLE\nSERVICE_ACCOUNT_EMAIL ='xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx@developer.gserviceaccount.com'\nKEYFILE='xxxxxxxxxxxxxxxx.p12'\n\n\nclass BQC(object):\n    def __init__(self):\n        f = file(KEYFILE, 'rb')\n        self.key = f.read()\n        f.close()\n\n    def _credential(self):\n        credentials = SignedJwtAssertionCredentials(\n            SERVICE_ACCOUNT_EMAIL,\n            self.key,\n            scope='https://www.googleapis.com/auth/bigquery')\n\n        http = httplib2.Http()\n        http = credentials.authorize(http)\n\n        service = build('bigquery', 'v2')\n        return http,service\n\n    def datalist(self,service,http):\n        datasets = service.datasets()\n        response = datasets.list(projectId=PROJECT_NUMBER).execute(http)\n        print('Dataset list:\\n')\n        for dataset in response['datasets']:\n            print(\"%s\\n\" % dataset['id'])\n\n    def show_result(self,result):\n        pprint.pprint(result)\n        print 'Query Results:'\n        for row in result['rows']:\n            result_row = []\n            for field in row['f']:\n                if field['v']:\n                    result_row.append(field['v'])\n            print ('\\t').join(result_row)\n\n\n\n    def sync_method(self,service,http):\n        q='SELECT *  FROM [nicodata_test.videoinfo] WHERE title like \"%{}%\" LIMIT 10;'.format(u'\u30dc\u30ab\u30ed'.encode('utf-8'))\n        print q\n        #q='SELECT TOP(title, 30) as title, COUNT(*) as revision_count FROM [publicdata:samples.wikipedia] WHERE wp_namespace = 0;'\n        query_request=service.jobs()\n        query_data={'query':q}\n        query_response = query_request.query(projectId=PROJECT_NUMBER,\n                                             body=query_data).execute(http)\n    def async_method(self,service,http):\n        q='SELECT *  FROM [nicodata_test.videoinfo] WHERE title like \"%{}%\" LIMIT 90;'.format(u'\u30dc\u30ab\u30ed'.encode('utf-8'))\n        q='SELECT *  FROM [nicodata_test.comment_data] WHERE comment like \"%{}%\" LIMIT 90;'.format(u'\u30dc\u30ab\u30ed'.encode('utf-8'))\n\n        print q\n        query_request=service.jobs()\n        query_data={'query':q}\n        query_data = {\n            'configuration': {\n                'query': {\n                    'query': q,\n                    }\n                }\n            }\n\n        ft=time.time()\n        insertResponse = query_request.insert(projectId=PROJECT_NUMBER,\n                                         body=query_data).execute(http)\n        print 'start query diff={}'.format(time.time()-ft)\n        while True:\n            print 'stat_get'\n            ft2=time.time()\n            status = query_request.get(projectId=PROJECT_NUMBER, jobId=insertResponse['jobReference']['jobId']).execute(http)\n            print 'end get diff={}'.format(time.time()-ft2)\n            currentStatus = status['status']['state']\n            if 'DONE' == currentStatus:\n                print 'sql done'\n                break\n            else:\n                print 'Waiting for the query to complete...'\n                print 'Current status: ' + currentStatus\n                print time.ctime()\n                time.sleep(0.1)\n        currentRow = 0\n        queryReply = query_request.getQueryResults(\n            projectId=PROJECT_NUMBER,\n            jobId=insertResponse['jobReference']['jobId'],\n            startIndex=currentRow).execute(http)\n\n        while(('rows' in queryReply) and currentRow < queryReply['totalRows']):\n            #self.show_result(queryReply)\n            currentRow += len(queryReply['rows'])\n            queryReply = query_request.getQueryResults(\n                projectId=PROJECT_NUMBER,\n                jobId=queryReply['jobReference']['jobId'],\n                startIndex=currentRow).execute(http)\n\n        print currentRow\n    def show(self):\n        http,service=self._credential()\n        #self.datalist(service,http)\n        #result=self.sync_method(service,http)\n        result=self.async_method(service,http)\n        #self.show_result(result)\ndef main():\n    bqc=BQC()\n    bqc.show()\n\nif __name__=='__main__':main()\n\n\n\n\n\n```\n"}