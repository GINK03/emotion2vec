{"context": " More than 1 year has passed since last update.\n\n\u6728\u69cb\u9020\u3067\u518d\u5e30\u3067\u89e3\u304f\u7248\n\u6728\u69cb\u9020\u4f7f\u3046\u7df4\u7fd2\u3002\n#!/bin/env python\n# coding:utf-8\n\nimport csv\nimport sys\n\n\"\"\"\n\u6839\u30ce\u30fc\u30c9\u304b\u3089\u518d\u5e30\u7684\u306b\u6df1\u3055\u512a\u5148\u3067\u6728\u69cb\u9020\u3092\u4f5c\u6210\u3057\u3064\u3064\u63a2\u7d22\u3082\u884c\u3046\u3002\n\u30b3\u30b9\u30c8\u96c6\u8a08\u3082\u4e2d\u9014\u3067\u884c\u3044\u3001\u6700\u4f4e\u30b3\u30b9\u30c8\u3092\u4e0a\u56de\u3063\u305f\u6642\u70b9\u3067\u4ee5\u964d\u306e\u5b50\u5b6b\u30ce\u30fc\u30c9\u306e\u63a2\u7d22\u3092\u4e2d\u6b62\u3059\u308b\u3002\n\u6728\u69cb\u9020\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u306e\u306b\u6163\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u5b9f\u76f4\u306b\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u305f\u3002\n\"\"\"\n\n\nclass Accumulator(object):\n    def __init__(self, sum=sys.maxsize, route=[]):\n        self.sum = sum\n        self.route = route\n\n\nclass Node(object):\n    def __init__(self, id, parent=None, cost_from_root=0, children=[]):\n        self.id = id\n        self.parent = parent\n        self.cost_from_root = cost_from_root\n        self.children = children\n\n    def __repr__(self):\n        return \"%i, cost: %i -> %s\\n\" % (self.id, self.cost_from_root, repr(self.children))\n\n\nclass DeliveryCostCalculator(object):\n\n    def __init__(self, filename):\n        self.filename = filename\n        self.cost_table = self.get_table()\n        self.acc = Accumulator(sys.maxsize, [])\n\n    def get_table(self):\n        cost_table = []\n        with open(self.filename, 'r') as f:\n            reader = csv.reader(f)\n            for row in reader:\n                cost_table.append([int(col) for col in row])\n        return cost_table\n\n    def calc_total_cost(self, current):\n        # \u6b8b\u308a\u304c\u306a\u3051\u308c\u3070\u30b3\u30b9\u30c8\u96c6\u8a08\u3092\u884c\u3046\n        tmp = Node(0, current, current.cost_from_root + self.cost_table[current.id][0], None)\n        current.children.append(tmp)\n        if tmp.cost_from_root < self.acc.sum:\n            # \u30b3\u30b9\u30c8\u304c\u6700\u4f4e\u306a\u3089\u3070\u30eb\u30fc\u30c8\u306e\u30ea\u30b9\u30c8\u3082\u96c6\u8a08\u3057\u3001\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u306b\u6e21\u3059\n            self.acc.sum = tmp.cost_from_root\n\n            def _min_r(n, acc):\n                if n.parent is None:\n                    acc.append(n)\n                    return acc\n                acc.append(n)\n                return _min_r(n.parent, acc)\n            self.acc.route = _min_r(tmp, [])\n            self.acc.route.reverse()\n\n    def main(self):\n        def _f(slot, current):\n            if len(slot) <= 0:\n                self.calc_total_cost(current)\n                return\n            for i in slot:\n                # \u5b50\u306b\u6b21\u306e\u30ce\u30fc\u30c9\u3092\u767b\u9332\u3059\u308b\n                tmp = Node(i, current, current.cost_from_root + self.cost_table[current.id][i])\n                if self.acc.sum < tmp.cost_from_root:\n                    # \u3053\u306e\u6642\u70b9\u3067\u306e\u30b3\u30b9\u30c8\u304c\u6700\u4f4e\u30b3\u30b9\u30c8\u3092\u4e0a\u56de\u3063\u3066\u3044\u308b\u306a\u3089\u4ee5\u964d\u306e\u63a2\u7d22\u3092\u4e2d\u6b62\u3059\u308b\n                    return\n                current.children.append(tmp)\n                # \u8ffd\u52a0\u3057\u305f\u6570\u5b57\u3092\u30ea\u30b9\u30c8\u304b\u3089\u524a\u9664\u3057\u3066\u518d\u5e30\u3059\u308b\n                a = list(slot)\n                a.remove(i)\n                _f(a, tmp)\n        _f(range(1, len(self.cost_table)), Node(0))\n        return self.acc.sum, self.acc.route\n\n\nif __name__ == \"__main__\":\n    c = DeliveryCostCalculator(sys.argv[1])\n    (sum, route) = c.main()\n    print(sum)\n    print(\" -> \".join([str(n.id + 1) for n in route]))\n    # print([(n.id + 1, n.cost_from_root) for n in route])\n\n\n\u4e8b\u524d\u306b\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3059\u308b\u7248\npermutations\u3067\u7e70\u308a\u8fd4\u3057\u3092\u8a31\u3055\u306a\u3044\u9806\u5217\u3092\u4f5c\u6210\u3057\u3066\u3042\u3068\u306f\u666e\u901a\u306bfor\u3067\u30b3\u30b9\u30c8\u96c6\u8a08\u3002\n\u96c6\u8a08\u306e\u3068\u3053\u308d\u3082functools.reduce\u3067\u304b\u3063\u3053\u3088\u304f\u3084\u308a\u305f\u304b\u3063\u305f\u3051\u3069\u3046\u307e\u304f\u3067\u304d\u306a\u304b\u3063\u305f\u3002\n#!/bin/env python\n# coding:utf-8\n\nimport csv\nimport sys\nfrom itertools import permutations\n\ndef get_table(filename):\n    cost_table = []\n    with open(filename, 'r') as f:\n        reader = csv.reader(f)\n        for row in reader:\n            cost_table.append([int(col) for col in row])\n    return cost_table\n\n\ndef main(filename):\n    cost_table = get_table(filename)\n    min_cost = sys.maxsize\n    min_route = ()\n    for p in permutations(range(1, len(cost_table))):\n        # add an initial and a last node\n        p = (0,) + p + (0,)\n        total_cost = 0\n        for i in range(len(p)):\n            if i == len(p) - 1:\n                continue\n            # get a cost between a current and next\n            total_cost += cost_table[p[i]][p[i + 1]]\n            if min_cost < total_cost:\n                break\n        # print(total_cost, p)\n        if total_cost < min_cost:\n            min_cost = total_cost\n            min_route = p\n    return min_cost, min_route\n\n\nif __name__ == \"__main__\":\n    c, r = main(sys.argv[1])\n    print(c)\n    print(\" -> \".join([str(n + 1) for n in r]))\n\n\n### \u6728\u69cb\u9020\u3067\u518d\u5e30\u3067\u89e3\u304f\u7248\n\n\u6728\u69cb\u9020\u4f7f\u3046\u7df4\u7fd2\u3002\n\n```python\n#!/bin/env python\n# coding:utf-8\n\nimport csv\nimport sys\n\n\"\"\"\n\u6839\u30ce\u30fc\u30c9\u304b\u3089\u518d\u5e30\u7684\u306b\u6df1\u3055\u512a\u5148\u3067\u6728\u69cb\u9020\u3092\u4f5c\u6210\u3057\u3064\u3064\u63a2\u7d22\u3082\u884c\u3046\u3002\n\u30b3\u30b9\u30c8\u96c6\u8a08\u3082\u4e2d\u9014\u3067\u884c\u3044\u3001\u6700\u4f4e\u30b3\u30b9\u30c8\u3092\u4e0a\u56de\u3063\u305f\u6642\u70b9\u3067\u4ee5\u964d\u306e\u5b50\u5b6b\u30ce\u30fc\u30c9\u306e\u63a2\u7d22\u3092\u4e2d\u6b62\u3059\u308b\u3002\n\u6728\u69cb\u9020\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u306e\u306b\u6163\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u5b9f\u76f4\u306b\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u305f\u3002\n\"\"\"\n\n\nclass Accumulator(object):\n    def __init__(self, sum=sys.maxsize, route=[]):\n        self.sum = sum\n        self.route = route\n\n\nclass Node(object):\n    def __init__(self, id, parent=None, cost_from_root=0, children=[]):\n        self.id = id\n        self.parent = parent\n        self.cost_from_root = cost_from_root\n        self.children = children\n\n    def __repr__(self):\n        return \"%i, cost: %i -> %s\\n\" % (self.id, self.cost_from_root, repr(self.children))\n\n\nclass DeliveryCostCalculator(object):\n\n    def __init__(self, filename):\n        self.filename = filename\n        self.cost_table = self.get_table()\n        self.acc = Accumulator(sys.maxsize, [])\n\n    def get_table(self):\n        cost_table = []\n        with open(self.filename, 'r') as f:\n            reader = csv.reader(f)\n            for row in reader:\n                cost_table.append([int(col) for col in row])\n        return cost_table\n\n    def calc_total_cost(self, current):\n        # \u6b8b\u308a\u304c\u306a\u3051\u308c\u3070\u30b3\u30b9\u30c8\u96c6\u8a08\u3092\u884c\u3046\n        tmp = Node(0, current, current.cost_from_root + self.cost_table[current.id][0], None)\n        current.children.append(tmp)\n        if tmp.cost_from_root < self.acc.sum:\n            # \u30b3\u30b9\u30c8\u304c\u6700\u4f4e\u306a\u3089\u3070\u30eb\u30fc\u30c8\u306e\u30ea\u30b9\u30c8\u3082\u96c6\u8a08\u3057\u3001\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u306b\u6e21\u3059\n            self.acc.sum = tmp.cost_from_root\n\n            def _min_r(n, acc):\n                if n.parent is None:\n                    acc.append(n)\n                    return acc\n                acc.append(n)\n                return _min_r(n.parent, acc)\n            self.acc.route = _min_r(tmp, [])\n            self.acc.route.reverse()\n\n    def main(self):\n        def _f(slot, current):\n            if len(slot) <= 0:\n                self.calc_total_cost(current)\n                return\n            for i in slot:\n                # \u5b50\u306b\u6b21\u306e\u30ce\u30fc\u30c9\u3092\u767b\u9332\u3059\u308b\n                tmp = Node(i, current, current.cost_from_root + self.cost_table[current.id][i])\n                if self.acc.sum < tmp.cost_from_root:\n                    # \u3053\u306e\u6642\u70b9\u3067\u306e\u30b3\u30b9\u30c8\u304c\u6700\u4f4e\u30b3\u30b9\u30c8\u3092\u4e0a\u56de\u3063\u3066\u3044\u308b\u306a\u3089\u4ee5\u964d\u306e\u63a2\u7d22\u3092\u4e2d\u6b62\u3059\u308b\n                    return\n                current.children.append(tmp)\n                # \u8ffd\u52a0\u3057\u305f\u6570\u5b57\u3092\u30ea\u30b9\u30c8\u304b\u3089\u524a\u9664\u3057\u3066\u518d\u5e30\u3059\u308b\n                a = list(slot)\n                a.remove(i)\n                _f(a, tmp)\n        _f(range(1, len(self.cost_table)), Node(0))\n        return self.acc.sum, self.acc.route\n\n\nif __name__ == \"__main__\":\n    c = DeliveryCostCalculator(sys.argv[1])\n    (sum, route) = c.main()\n    print(sum)\n    print(\" -> \".join([str(n.id + 1) for n in route]))\n    # print([(n.id + 1, n.cost_from_root) for n in route])\n```\n\n### \u4e8b\u524d\u306b\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3059\u308b\u7248\n\n`permutations`\u3067\u7e70\u308a\u8fd4\u3057\u3092\u8a31\u3055\u306a\u3044\u9806\u5217\u3092\u4f5c\u6210\u3057\u3066\u3042\u3068\u306f\u666e\u901a\u306b`for`\u3067\u30b3\u30b9\u30c8\u96c6\u8a08\u3002\n\u96c6\u8a08\u306e\u3068\u3053\u308d\u3082`functools.reduce`\u3067\u304b\u3063\u3053\u3088\u304f\u3084\u308a\u305f\u304b\u3063\u305f\u3051\u3069\u3046\u307e\u304f\u3067\u304d\u306a\u304b\u3063\u305f\u3002\n\n```python\n#!/bin/env python\n# coding:utf-8\n\nimport csv\nimport sys\nfrom itertools import permutations\n\ndef get_table(filename):\n    cost_table = []\n    with open(filename, 'r') as f:\n        reader = csv.reader(f)\n        for row in reader:\n            cost_table.append([int(col) for col in row])\n    return cost_table\n\n\ndef main(filename):\n    cost_table = get_table(filename)\n    min_cost = sys.maxsize\n    min_route = ()\n    for p in permutations(range(1, len(cost_table))):\n        # add an initial and a last node\n        p = (0,) + p + (0,)\n        total_cost = 0\n        for i in range(len(p)):\n            if i == len(p) - 1:\n                continue\n            # get a cost between a current and next\n            total_cost += cost_table[p[i]][p[i + 1]]\n            if min_cost < total_cost:\n                break\n        # print(total_cost, p)\n        if total_cost < min_cost:\n            min_cost = total_cost\n            min_route = p\n    return min_cost, min_route\n\n\nif __name__ == \"__main__\":\n    c, r = main(sys.argv[1])\n    print(c)\n    print(\" -> \".join([str(n + 1) for n in r]))\n```\n", "tags": ["Python", "codeiq"]}