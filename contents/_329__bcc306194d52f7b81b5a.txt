{"context": "2016\u5e747\u670812\u65e5\u306b\uff0cChainer v1.11.0\u304c\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305f\uff0e\nChainer\u3000Meetup 03\u3084\uff0cAmazon Picking Challenge 2016\u306e\u6e96\u5099\u3082\u3042\u3063\u305f\u308d\u3046\u306b\u2026\u306a\u3093\u3066\u901f\u5ea6\u3060\uff01\n\uff08\u7b2c2\u4f4d\uff0c\u304a\u3081\u3067\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3000https://www.preferred-networks.jp/ja/news/amazon-picking-challenge-2016_result \uff09\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\uff0cChainer\u306e\u65b0\u6a5f\u80fd\u3092\u7f8e\u5473\u3057\u3055\u3068\u5171\u306b\u7d39\u4ecb\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3046\uff0e\n\n\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u90e8\u5206\u306e\u30b3\u30fc\u30c9\u304c\u62bd\u8c61\u5316\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\nChainer Meetup 03\u3067\u306f\uff0c\u300cbeam2d\u3055\u3093\u304c\u30b2\u30ed\u5410\u304d\u306a\u304c\u3089Train\u30b3\u30fc\u30c9\u3092\u62bd\u8c61\u5316\u3057\u3066\u304f\u308c\u3066\u3044\u308b\u300d\u3068\u3044\u3046\u8a71\u3060\u3063\u305f\uff0e\n\u3042\u308c\u304b\u3089\u304a\u3088\u305d2\u9031\u9593\uff0cChainer\u306e\u30b3\u30fc\u30c9\u306f\u5909\u5316\u3092\u9042\u3052\u305f\uff0e\u5909\u5316\u3092\u9042\u3052\u308b\u3053\u3068\u3092\u8a31\u3055\u308c\u305f\uff0e\n\u5148\u65e5\u3068\u3042\u308b\u30e9\u30a4\u30d6\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30a4\u30d9\u30f3\u30c8\u306b\u3066\u79c1\u304c\u66f8\u3044\u305f\uff0cMLP\u3067MNIST\u306e\u5206\u985e\u3092\u884c\u3046\u30b3\u30fc\u30c9\u3067\u3042\u308b\uff0e\nfrom sklearn.datasets import fetch_mldata\nfrom sklearn.cross_validation import train_test_split\nimport numpy as np\n\nimport chainer\nimport chainer.functions as F\nimport chainer.links as L\nfrom chainer import optimizers\n\nmnist = fetch_mldata('MNIST original', data_home='.')\nmnist.data = mnist.data.astype(np.float32) * 1.0 / 255.0\nmnist.target = mnist.target.astype(np.int32)\n\ntrain_data, test_data, train_label, test_label = train_test_split(mnist.data, mnist.target, test_size=10000,\n                                                                  random_state=222)\nprint \"data shape \", mnist.data.dtype, mnist.data.shape\nprint \"label shape \", mnist.target.dtype, mnist.target.shape\n\nclass MnistModel(chainer.Chain):\n    def __init__(self):\n        super(MnistModel, self).__init__(\n                l1=L.Linear(784, 100),\n                l2=L.Linear(100, 100),\n                l3=L.Linear(100, 10)\n        )\n\n    def __call__(self, x, t, train):\n\n        x = chainer.Variable(x)\n        t = chainer.Variable(t)\n\n        h = F.relu(self.l1(x))\n        h = F.relu(self.l2(h))\n        h = self.l3(h)\n\n        if train:\n            return F.softmax_cross_entropy(h, t), F.accuracy(h, t)\n        else:\n            return F.accuracy(h, t)\n\n\nmodel = MnistModel()\noptimizer = optimizers.Adam()\noptimizer.setup(model)\n\nfor epoch in range(100):\n    model.zerograds()\n    loss, acc = model(train_data, train_label, train=True)\n    loss.backward()\n    optimizer.update()\n    print \"acc  \", acc.data\n\nacc = model(test_data, test_label, train=False)\nprint \"acc test \", acc.data\n\n\u7dba\u9e97\u304b\u3068\u8a00\u308f\u308c\u308b\u3068\u4e00\u60b6\u7740\u8d77\u304d\u305d\u3046\u306a\u30b3\u30fc\u30c9\u3060\u304c\uff0c\u89e3\u8aac\u3057\u306a\u304c\u30895\u5206\u307b\u3069\u3067\u66f8\u3051\u308b\u884c\u6570\u306b\u53ce\u307e\u3063\u3066\u3044\u308b\uff0e\n50\u884c\u3061\u3087\u3063\u3068\u3067\u3042\u308b\uff0e\n\u305d\u3057\u3066\u3053\u308c\u304cChainer v1.11.0\u306e\u65b0\u6a5f\u80fd\u3092\u7528\u3044\u3066\u66f8\u3044\u305fMNIST\u306e\u5206\u985e\u3092\u884c\u3046\u30b3\u30fc\u30c9\u3060\uff0e\n\nimport chainer\nimport chainer.functions as F\nimport chainer.links as L\nfrom chainer import training\nfrom chainer.training import extensions\n\nclass MnistModel(chainer.Chain):\n    def __init__(self):\n        super(MnistModel,self).__init__(\n                l1 = L.Linear(784,100),\n                l2 = L.Linear(100,100),\n                l3 = L.Linear(100,10))\n\n    def __call__(self,x):    \n         h = F.relu(self.l1(x))\n         h = F.relu(self.l2(h))\n         return self.l3(h)\n\n\nmodel = L.Classifier(MnistModel())\noptimizer = chainer.optimizers.Adam()\noptimizer.setup(model)\n\ntrain, test = chainer.datasets.get_mnist()\ntrain_iter = chainer.iterators.SerialIterator(train, 100)\ntest_iter = chainer.iterators.SerialIterator(test, 100,repeat=False, shuffle=False)\n\nupdater = training.StandardUpdater(train_iter, optimizer, device=-1)\ntrainer = training.Trainer(updater, (100, 'epoch'), out=\"result\")\ntrainer.extend(extensions.Evaluator(test_iter, model, device=-1))\ntrainer.extend(extensions.LogReport())\ntrainer.extend(extensions.PrintReport( ['epoch', 'main/loss', 'validation/main/loss', 'main/accuracy', 'validation/main/accuracy']))\ntrainer.extend(extensions.ProgressBar())\n\ntrainer.run()\n\n\n\u306a\u3093\u306830\u884c\u3061\u3087\u3063\u3068\uff01\n\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u7528\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u7528\u610f\u3057\u3066\u3044\u308b\u308f\u3051\u3058\u3083\u306a\u3044\u305e\uff01\n\uff08\u53c2\u8003\u3000http://www.slideshare.net/chabudaigaeshi/tensorflowchainer-63661517 \uff09\n\u2191repeatedly\u3055\u3093\uff0c\u7de8\u96c6\u30ea\u30af\u30a8\u30b9\u30c8\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01\n\uff08\u4ed6\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u60aa\u53e3\u3092\u8a00\u3044\u305f\u3044\u308f\u3051\u3067\u306f\u306a\u3044\u3067\u3059\uff09\n\u77ed\u3055\u306e\u307f\u306a\u3089\u305a\uff0c\u305d\u306e\u62bd\u8c61\u5ea6\u306e\u9ad8\u3055\u306b\u3082\u76ee\u7389\u304c\u98db\u3073\u51fa\u308b\uff0e\n\u3057\u304b\u3082\uff0c\u3061\u3087\u3063\u3068\u30ea\u30c3\u30c1\u306a\u611f\u3058\u3067\u5b66\u7fd2\u7d4c\u904e\u3092\u6559\u3048\u3066\u304f\u308c\u308b\uff0e\n\u3053\u308c\u3067\u300cChainer\u3063\u3066\u5b66\u7fd2\u7d50\u679c\u306e\u51fa\u529b\u3068\u304b\u81ea\u5206\u3067\u3084\u3089\u306a\u304d\u3083\u30c0\u30e1\u306a\u3093\u3067\u3057\u3087\uff1f\u300d\u3068\u3044\u3046\u610f\u5730\u60aa\u306a\u8cea\u554f\u306b\u30c9\u30e4\u9854\u3067\u8fd4\u305b\u308b\u305e\uff01\nepoch       main/loss   validation/main/loss  main/accuracy  validation/main/accuracy\n1           0.333247    0.163566              0.90525        0.951\n2           0.13979     0.120721              0.95835        0.9645\n3           0.0972047   0.10129               0.970817       0.9682\n4           0.0724406   0.0958347             0.9781         0.9712\n5           0.05642     0.0935157             0.983267       0.9707\n6           0.0443315   0.0999502             0.987183       0.9684\n     total [##############################....................] 60.00%\nthis epoch [..................................................]  0.00%\n      3600 iter, 6 epoch / 10 epochs\n\n\u3053\u308c\u3060\u3051\u62bd\u8c61\u5ea6\u304c\u9ad8\u3044\u3068\u7f8e\u5c11\u5973Chainer\u30e6\u30fc\u30b6\u30fc\u306e\u300c\u30c1\u30e5\u30fc\u3057\u3088\u3046\u5ea6\u300d\u3082\u7570\u5e38\u306a\u9ad8\u307e\u308a\u3092\u898b\u305b\u3061\u3083\u3044\u305d\u3046\u3060\uff0e\n\u3082\u3061\u308d\u3093\uff0c\u5f93\u6765\u306e\u66f8\u304d\u65b9\u3082\u53ef\u80fd\u3067\u3042\u308b\uff0e\n\u306a\u3093\u3060\u304bChainer\u3092\u4f7f\u3048\u3070\uff0c\u4eba\u751f\u3046\u307e\u304f\u3044\u3063\u3061\u3083\u3046\u3088\u3046\u306a\u6c17\u3055\u3048\u3057\u3066\u304d\u305f\uff0e\n\u3042\u308a\u304c\u3068\u3046Chainer\n\nVariable\u3067\u306e\u30e9\u30c3\u30d4\u30f3\u30b0\u304c\u81ea\u52d5\u5316\u3055\u308c\u305f\n\uff08 2016\u5e747\u670816\u65e5\u8ffd\u8a18 \uff09\nChainer\u306e\u95a2\u6570\u305f\u3061\u306f\u3053\u308c\u307e\u3067\uff0cVariable\u3092\u5165\u529b\u3068\u3057\u3066\u53d7\u3051\u4ed8\u3051\u3066\u3044\u305f\uff0e\n\u6700\u65b0\u7248\u3067\u306f\uff0c\u5165\u529b\u304cndarray\u3067\u3042\u3063\u305f\u5834\u5408\u81ea\u52d5\u3067\u30e9\u30c3\u30d4\u30f3\u30b0\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u305f\uff0e\n\u4e0a\u8a18\u306eMNIST\uff08Trainer\u4f7f\u308f\u306a\u3044\u7248\uff09\u306e__call__\u90e8\u3092\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3042\u308b\uff0e\n\u3053\u3053\u3067\uff0c\uff58\u3068t\u306fxp.array\u3092\u60f3\u5b9a\u3057\u3066\u3044\u308b\uff0e\n    def __call__(self, x, t, train):\n\n        #x = chainer.Variable(x)\n        #t = chainer.Variable(t)\n\n        h = F.relu(self.l1(x))\n        h = F.relu(self.l2(h))\n        h = self.l3(h)\n\n        if train:\n            return F.softmax_cross_entropy(h, t), F.accuracy(h, t)\n        else:\n            return F.accuracy(h, t)\n\n\u30b7\u30fc\u30e0\u30ec\u30b9\u306a\u30b3\u30fc\u30c9\u306b\u306a\u3063\u305f\uff0e\n\u3053\u308c\u306f\uff0c\u5909\u6570\u306e\u578b\u306b\u3064\u3044\u3066\u6ce8\u610f\u3092\u6255\u3046\u5fc5\u8981\u304c\u6e1b\u308a\uff0c\u30a8\u30f3\u30b8\u30cb\u30a2\u3084\u30cd\u30b3\u306e\u8133\u306b\u304b\u304b\u308b\u8ca0\u62c5\u304c\u8efd\u6e1b\u3055\u308c\u305f\u3063\u3066\u3053\u3068\u3060\uff0e\n\u3053\u306e\u5909\u66f4\u306e\u771f\u306e\u4fa1\u5024\u306f\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u30b7\u30a7\u30eb\u3067\u306e\u8a18\u8ff0\u91cf\u304c\u6e1b\u308b\u70b9\u306b\u3042\u308b\u3068\u8003\u3048\u3066\u3044\u308b\uff0e\n\u65e7\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306f\u304a\u8a66\u3057\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3059\u308b\u969b\u306b\u3082chainer.Variable( np.zeros( (3,224,224), dtype=float32 ))\u3068\u30ab\u30c3\u30b3\u306e\u5bfe\u5fdc\u306b\u6ce8\u610f\u3057\u306a\u304c\u3089\u5165\u529b\u3059\u308b\u304b\uff0c\n\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u30b7\u30a7\u30eb\u304b\u3089\u304a\u53f1\u308a\u3092\u53d7\u3051\u308b\u304b\u3068\u3044\u3046\u72b6\u614b\u3067\u3042\u3063\u305f\uff0e\n\u3053\u308c\u304b\u3089\u306f\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u30b7\u30a7\u30eb\u304b\u3089\u304a\u53f1\u308a\u3092\u53d7\u3051\u308b\u3053\u3068\u306f\u6e1b\u308b\u3060\u308d\u3046\uff0eChainer\u3068\u5c11\u3057\u3060\u3051\u4ef2\u826f\u304f\u306a\u308c\u305f\u611f\u899a\u304c\u3042\u308b\uff0e\n/* Chainer v1.11.0+ \u306e\u65b0\u6a5f\u80fd\u306b\u3064\u3044\u3066\uff0c\u5206\u304b\u308a\u6b21\u7b2c\u8ffd\u8a18\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059 */\n\nChainer Meetup 03\u3067\u767a\u8868\u3055\u308c\u305f\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u5185\u5bb9\uff08\u672a\u78ba\u8a8d\uff09\n- CaffeFunction\u304cPython3\u3067\u3082\u547c\u3079\u308b\u3088\u3046\u306b\u306a\u3063\u305f\uff0eResNet\u306eCaffe\u30e2\u30c7\u30eb\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u305f\uff0e\n- \u91cd\u307f\u521d\u671f\u5316\u304c\u7c21\u5358\u306b\uff08Initializer\u306e\u8ffd\u52a0\uff09\n- Float64\u304c\u5229\u7528\u53ef\u80fd\u306b\n- Cupy\u306e\u30d7\u30ed\u30d5\u30a1\u30a4\u30ebAPI\u304c\u8ffd\u52a0\n- Variable.__getitem__\u306e\u5b9f\u88c5\uff08\u30b9\u30e9\u30a4\u30b9\u30a4\u30f3\u30c7\u30af\u30b7\u30f3\u30b0\u306a\u3069\u306b\u5bfe\u5fdc\uff09\n- roi_pooling_2d\u3092\u306f\u3058\u3081\u3068\u3059\u308b\uff0c\u69d8\u3005\u306aFunctions/Links\u306e\u8ffd\u52a0\n2016\u5e747\u670812\u65e5\u306b\uff0cChainer v1.11.0\u304c\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305f\uff0e\nChainer\u3000Meetup 03\u3084\uff0cAmazon Picking Challenge 2016\u306e\u6e96\u5099\u3082\u3042\u3063\u305f\u308d\u3046\u306b\u2026\u306a\u3093\u3066\u901f\u5ea6\u3060\uff01\n\uff08\u7b2c2\u4f4d\uff0c\u304a\u3081\u3067\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3000https://www.preferred-networks.jp/ja/news/amazon-picking-challenge-2016_result \uff09\n\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\uff0cChainer\u306e\u65b0\u6a5f\u80fd\u3092\u7f8e\u5473\u3057\u3055\u3068\u5171\u306b\u7d39\u4ecb\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3046\uff0e\n\n# \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u90e8\u5206\u306e\u30b3\u30fc\u30c9\u304c\u62bd\u8c61\u5316\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\nChainer Meetup 03\u3067\u306f\uff0c\u300cbeam2d\u3055\u3093\u304c\u30b2\u30ed\u5410\u304d\u306a\u304c\u3089Train\u30b3\u30fc\u30c9\u3092\u62bd\u8c61\u5316\u3057\u3066\u304f\u308c\u3066\u3044\u308b\u300d\u3068\u3044\u3046\u8a71\u3060\u3063\u305f\uff0e\n\u3042\u308c\u304b\u3089\u304a\u3088\u305d2\u9031\u9593\uff0cChainer\u306e\u30b3\u30fc\u30c9\u306f\u5909\u5316\u3092\u9042\u3052\u305f\uff0e\u5909\u5316\u3092\u9042\u3052\u308b\u3053\u3068\u3092\u8a31\u3055\u308c\u305f\uff0e\n\n\u5148\u65e5\u3068\u3042\u308b\u30e9\u30a4\u30d6\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30a4\u30d9\u30f3\u30c8\u306b\u3066\u79c1\u304c\u66f8\u3044\u305f\uff0cMLP\u3067MNIST\u306e\u5206\u985e\u3092\u884c\u3046\u30b3\u30fc\u30c9\u3067\u3042\u308b\uff0e\n\n```py\nfrom sklearn.datasets import fetch_mldata\nfrom sklearn.cross_validation import train_test_split\nimport numpy as np\n\nimport chainer\nimport chainer.functions as F\nimport chainer.links as L\nfrom chainer import optimizers\n\nmnist = fetch_mldata('MNIST original', data_home='.')\nmnist.data = mnist.data.astype(np.float32) * 1.0 / 255.0\nmnist.target = mnist.target.astype(np.int32)\n\ntrain_data, test_data, train_label, test_label = train_test_split(mnist.data, mnist.target, test_size=10000,\n                                                                  random_state=222)\nprint \"data shape \", mnist.data.dtype, mnist.data.shape\nprint \"label shape \", mnist.target.dtype, mnist.target.shape\n\nclass MnistModel(chainer.Chain):\n    def __init__(self):\n        super(MnistModel, self).__init__(\n                l1=L.Linear(784, 100),\n                l2=L.Linear(100, 100),\n                l3=L.Linear(100, 10)\n        )\n\n    def __call__(self, x, t, train):\n\n        x = chainer.Variable(x)\n        t = chainer.Variable(t)\n\n        h = F.relu(self.l1(x))\n        h = F.relu(self.l2(h))\n        h = self.l3(h)\n\n        if train:\n            return F.softmax_cross_entropy(h, t), F.accuracy(h, t)\n        else:\n            return F.accuracy(h, t)\n\n\nmodel = MnistModel()\noptimizer = optimizers.Adam()\noptimizer.setup(model)\n\nfor epoch in range(100):\n    model.zerograds()\n    loss, acc = model(train_data, train_label, train=True)\n    loss.backward()\n    optimizer.update()\n    print \"acc  \", acc.data\n\nacc = model(test_data, test_label, train=False)\nprint \"acc test \", acc.data\n```\n\n\u7dba\u9e97\u304b\u3068\u8a00\u308f\u308c\u308b\u3068\u4e00\u60b6\u7740\u8d77\u304d\u305d\u3046\u306a\u30b3\u30fc\u30c9\u3060\u304c\uff0c\u89e3\u8aac\u3057\u306a\u304c\u30895\u5206\u307b\u3069\u3067\u66f8\u3051\u308b\u884c\u6570\u306b\u53ce\u307e\u3063\u3066\u3044\u308b\uff0e\n50\u884c\u3061\u3087\u3063\u3068\u3067\u3042\u308b\uff0e\n\n\u305d\u3057\u3066\u3053\u308c\u304cChainer v1.11.0\u306e\u65b0\u6a5f\u80fd\u3092\u7528\u3044\u3066\u66f8\u3044\u305fMNIST\u306e\u5206\u985e\u3092\u884c\u3046\u30b3\u30fc\u30c9\u3060\uff0e\n\n```py\n\nimport chainer\nimport chainer.functions as F\nimport chainer.links as L\nfrom chainer import training\nfrom chainer.training import extensions\n\nclass MnistModel(chainer.Chain):\n    def __init__(self):\n        super(MnistModel,self).__init__(\n                l1 = L.Linear(784,100),\n                l2 = L.Linear(100,100),\n                l3 = L.Linear(100,10))\n\n    def __call__(self,x):    \n         h = F.relu(self.l1(x))\n         h = F.relu(self.l2(h))\n         return self.l3(h)\n\n\nmodel = L.Classifier(MnistModel())\noptimizer = chainer.optimizers.Adam()\noptimizer.setup(model)\n\ntrain, test = chainer.datasets.get_mnist()\ntrain_iter = chainer.iterators.SerialIterator(train, 100)\ntest_iter = chainer.iterators.SerialIterator(test, 100,repeat=False, shuffle=False)\n\nupdater = training.StandardUpdater(train_iter, optimizer, device=-1)\ntrainer = training.Trainer(updater, (100, 'epoch'), out=\"result\")\ntrainer.extend(extensions.Evaluator(test_iter, model, device=-1))\ntrainer.extend(extensions.LogReport())\ntrainer.extend(extensions.PrintReport( ['epoch', 'main/loss', 'validation/main/loss', 'main/accuracy', 'validation/main/accuracy']))\ntrainer.extend(extensions.ProgressBar())\n\ntrainer.run()\n\n```\n\n\u306a\u3093\u306830\u884c\u3061\u3087\u3063\u3068\uff01\n\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u7528\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u7528\u610f\u3057\u3066\u3044\u308b\u308f\u3051\u3058\u3083\u306a\u3044\u305e\uff01\n\uff08\u53c2\u8003\u3000http://www.slideshare.net/chabudaigaeshi/tensorflowchainer-63661517 \uff09\n\u2191repeatedly\u3055\u3093\uff0c\u7de8\u96c6\u30ea\u30af\u30a8\u30b9\u30c8\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01\n\uff08\u4ed6\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u60aa\u53e3\u3092\u8a00\u3044\u305f\u3044\u308f\u3051\u3067\u306f\u306a\u3044\u3067\u3059\uff09\n\u77ed\u3055\u306e\u307f\u306a\u3089\u305a\uff0c\u305d\u306e\u62bd\u8c61\u5ea6\u306e\u9ad8\u3055\u306b\u3082\u76ee\u7389\u304c\u98db\u3073\u51fa\u308b\uff0e\n\n\u3057\u304b\u3082\uff0c\u3061\u3087\u3063\u3068\u30ea\u30c3\u30c1\u306a\u611f\u3058\u3067\u5b66\u7fd2\u7d4c\u904e\u3092\u6559\u3048\u3066\u304f\u308c\u308b\uff0e\n\u3053\u308c\u3067\u300cChainer\u3063\u3066\u5b66\u7fd2\u7d50\u679c\u306e\u51fa\u529b\u3068\u304b\u81ea\u5206\u3067\u3084\u3089\u306a\u304d\u3083\u30c0\u30e1\u306a\u3093\u3067\u3057\u3087\uff1f\u300d\u3068\u3044\u3046\u610f\u5730\u60aa\u306a\u8cea\u554f\u306b\u30c9\u30e4\u9854\u3067\u8fd4\u305b\u308b\u305e\uff01\n\n```\nepoch       main/loss   validation/main/loss  main/accuracy  validation/main/accuracy\n1           0.333247    0.163566              0.90525        0.951\n2           0.13979     0.120721              0.95835        0.9645\n3           0.0972047   0.10129               0.970817       0.9682\n4           0.0724406   0.0958347             0.9781         0.9712\n5           0.05642     0.0935157             0.983267       0.9707\n6           0.0443315   0.0999502             0.987183       0.9684\n     total [##############################....................] 60.00%\nthis epoch [..................................................]  0.00%\n      3600 iter, 6 epoch / 10 epochs\n```\n\n\u3053\u308c\u3060\u3051\u62bd\u8c61\u5ea6\u304c\u9ad8\u3044\u3068\u7f8e\u5c11\u5973Chainer\u30e6\u30fc\u30b6\u30fc\u306e\u300c\u30c1\u30e5\u30fc\u3057\u3088\u3046\u5ea6\u300d\u3082\u7570\u5e38\u306a\u9ad8\u307e\u308a\u3092\u898b\u305b\u3061\u3083\u3044\u305d\u3046\u3060\uff0e\n\u3082\u3061\u308d\u3093\uff0c__\u5f93\u6765\u306e\u66f8\u304d\u65b9\u3082\u53ef\u80fd\u3067\u3042\u308b__\uff0e\n\n\u306a\u3093\u3060\u304bChainer\u3092\u4f7f\u3048\u3070\uff0c\u4eba\u751f\u3046\u307e\u304f\u3044\u3063\u3061\u3083\u3046\u3088\u3046\u306a\u6c17\u3055\u3048\u3057\u3066\u304d\u305f\uff0e\n\u3042\u308a\u304c\u3068\u3046Chainer\n\n\n\n# Variable\u3067\u306e\u30e9\u30c3\u30d4\u30f3\u30b0\u304c\u81ea\u52d5\u5316\u3055\u308c\u305f\n\uff08 2016\u5e747\u670816\u65e5\u8ffd\u8a18 \uff09\n\nChainer\u306e\u95a2\u6570\u305f\u3061\u306f\u3053\u308c\u307e\u3067\uff0cVariable\u3092\u5165\u529b\u3068\u3057\u3066\u53d7\u3051\u4ed8\u3051\u3066\u3044\u305f\uff0e\n\u6700\u65b0\u7248\u3067\u306f\uff0c\u5165\u529b\u304cndarray\u3067\u3042\u3063\u305f\u5834\u5408\u81ea\u52d5\u3067\u30e9\u30c3\u30d4\u30f3\u30b0\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u305f\uff0e\n\u4e0a\u8a18\u306eMNIST\uff08Trainer\u4f7f\u308f\u306a\u3044\u7248\uff09\u306e```__call__```\u90e8\u3092\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3042\u308b\uff0e\n\u3053\u3053\u3067\uff0c\uff58\u3068t\u306fxp.array\u3092\u60f3\u5b9a\u3057\u3066\u3044\u308b\uff0e\n\n```py\n    def __call__(self, x, t, train):\n\n        #x = chainer.Variable(x)\n        #t = chainer.Variable(t)\n\n        h = F.relu(self.l1(x))\n        h = F.relu(self.l2(h))\n        h = self.l3(h)\n\n        if train:\n            return F.softmax_cross_entropy(h, t), F.accuracy(h, t)\n        else:\n            return F.accuracy(h, t)\n```\n\n\u30b7\u30fc\u30e0\u30ec\u30b9\u306a\u30b3\u30fc\u30c9\u306b\u306a\u3063\u305f\uff0e\n\u3053\u308c\u306f\uff0c\u5909\u6570\u306e\u578b\u306b\u3064\u3044\u3066\u6ce8\u610f\u3092\u6255\u3046\u5fc5\u8981\u304c\u6e1b\u308a\uff0c\u30a8\u30f3\u30b8\u30cb\u30a2\u3084\u30cd\u30b3\u306e\u8133\u306b\u304b\u304b\u308b\u8ca0\u62c5\u304c\u8efd\u6e1b\u3055\u308c\u305f\u3063\u3066\u3053\u3068\u3060\uff0e\n\n\u3053\u306e\u5909\u66f4\u306e\u771f\u306e\u4fa1\u5024\u306f\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u30b7\u30a7\u30eb\u3067\u306e\u8a18\u8ff0\u91cf\u304c\u6e1b\u308b\u70b9\u306b\u3042\u308b\u3068\u8003\u3048\u3066\u3044\u308b\uff0e\n\u65e7\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306f\u304a\u8a66\u3057\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3059\u308b\u969b\u306b\u3082```chainer.Variable( np.zeros( (3,224,224), dtype=float32 ))```\u3068\u30ab\u30c3\u30b3\u306e\u5bfe\u5fdc\u306b\u6ce8\u610f\u3057\u306a\u304c\u3089\u5165\u529b\u3059\u308b\u304b\uff0c\n\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u30b7\u30a7\u30eb\u304b\u3089\u304a\u53f1\u308a\u3092\u53d7\u3051\u308b\u304b\u3068\u3044\u3046\u72b6\u614b\u3067\u3042\u3063\u305f\uff0e\n\u3053\u308c\u304b\u3089\u306f\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u30b7\u30a7\u30eb\u304b\u3089\u304a\u53f1\u308a\u3092\u53d7\u3051\u308b\u3053\u3068\u306f\u6e1b\u308b\u3060\u308d\u3046\uff0eChainer\u3068\u5c11\u3057\u3060\u3051\u4ef2\u826f\u304f\u306a\u308c\u305f\u611f\u899a\u304c\u3042\u308b\uff0e\n\n/* Chainer v1.11.0+ \u306e\u65b0\u6a5f\u80fd\u306b\u3064\u3044\u3066\uff0c\u5206\u304b\u308a\u6b21\u7b2c\u8ffd\u8a18\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059 */\n\n---\n\nChainer Meetup 03\u3067\u767a\u8868\u3055\u308c\u305f\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u5185\u5bb9\uff08\u672a\u78ba\u8a8d\uff09\n- CaffeFunction\u304cPython3\u3067\u3082\u547c\u3079\u308b\u3088\u3046\u306b\u306a\u3063\u305f\uff0eResNet\u306eCaffe\u30e2\u30c7\u30eb\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u305f\uff0e\n- \u91cd\u307f\u521d\u671f\u5316\u304c\u7c21\u5358\u306b\uff08Initializer\u306e\u8ffd\u52a0\uff09\n- Float64\u304c\u5229\u7528\u53ef\u80fd\u306b\n- Cupy\u306e\u30d7\u30ed\u30d5\u30a1\u30a4\u30ebAPI\u304c\u8ffd\u52a0\n- ```Variable.__getitem__```\u306e\u5b9f\u88c5\uff08\u30b9\u30e9\u30a4\u30b9\u30a4\u30f3\u30c7\u30af\u30b7\u30f3\u30b0\u306a\u3069\u306b\u5bfe\u5fdc\uff09\n- roi_pooling_2d\u3092\u306f\u3058\u3081\u3068\u3059\u308b\uff0c\u69d8\u3005\u306aFunctions/Links\u306e\u8ffd\u52a0\n\n\n", "tags": ["Chainer", "DeepLearning", "Python", "\u6a5f\u68b0\u5b66\u7fd2"]}