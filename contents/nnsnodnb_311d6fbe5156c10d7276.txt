{"tags": ["Flask", "Python", "Line", "bot", "linebot"], "context": "\n\n\u306f\u3058\u3081\u306b\n\u4ee5\u524d\u306bTrial\u30a2\u30ab\u30a6\u30f3\u30c8\u3067\u5168\u304f\u540c\u3058\u3082\u306e\u3092\u4f5c\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u300c\u30a2\u30ab\u30a6\u30f3\u30c8\u4e00\u6589\u524a\u9664\u3059\u3063\u305e\uff01\uff01\u300d\u3068\u3044\u3046\u3088\u3046\u306a\u8105\u3057\u30e1\u30fc\u30eb\u304c\u6765\u305f\u306e\u3067\u79fb\u884c\u3057\u307e\u3057\u305f\u3002\n\n\u30ea\u30dd\u30b8\u30c8\u30ea\n\n\u79c1\u306e\u4f5c\u3063\u305f\u3082\u306e\nhttps://github.com/nnsnodnb/morphological-linebot\n\nLINE\u30aa\u30d5\u30a3\u30b7\u30e3\u30eb\u306eSDK\nhttps://github.com/line/line-bot-sdk-python\n\nBOT\n\nSDK\u306eWiki\u30da\u30fc\u30b8\u306b\u4e57\u3063\u305f\u3089\u3044\u3044\u306a\u3041\u306a\u3093\u3066...\n\n\u74b0\u5883\n\nPython3.5.2\nVirtualenv\nFlask\n\u591c\u306e\u30c6\u30f3\u30b7\u30e7\u30f3\n\u30ad\u30c1\u30ac\u30a4\u306e\u30c6\u30f3\u30b7\u30e7\u30f3\n\u6669\u5fa1\u98ef\u98df\u3079\u3066\u306a\u3044\u3051\u3069\u958b\u767a\u610f\u6b32\u304c\u534a\u7aef\u306a\u3044\n\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\nbot.py\n# coding: utf-8\n\nfrom __future__ import unicode_literals\n\nfrom flask import Flask, request, abort\n\nfrom linebot import LineBotApi, WebhookHandler\nfrom linebot.exceptions import InvalidSignatureError\nfrom linebot.models import MessageEvent, TextMessage, TextSendMessage\n\nfrom janome.tokenizer import Tokenizer\n\nimport os, re, json\n\ndef load_env():\n    try:\n        with open('.env') as f:\n            content = f.read()\n    except IOError:\n        content = ''\n\n    for line in content.splitlines():\n        m1 = re.match(r'\\A([A-Za-z_0-9]+)=(.*)\\Z', line)\n        if m1:\n            key, val = m1.group(1), m1.group(2)\n            m2 = re.match(r\"\\A'(.*)'\\Z\", val)\n            if m2:\n                val = m2.group(1)\n            m3 = re.match(r'\\A\"(.*)\"\\Z', val)\n            if m3:\n                val = re.sub(r'\\\\(.)', r'\\1', m3.group(1))\n            os.environ.setdefault(key, val)\n\nload_env()\n\napp = Flask(__name__)\n\nline_bot_api = LineBotApi(os.environ.get('CHANNEL_ACCESS_TOKEN'))\nhandler = WebhookHandler(os.environ.get('CHANNEL_SECRET'))\n\n@app.route(\"/callback\", methods=['POST'])\ndef callback():\n    signature = request.headers['X-LINE-Signature']\n\n    body = request.get_data(as_text=True)\n    receive_json = json.loads(body)\n    message = receive_json['events'][0]['message']['text']\n\n    response_arrays = []\n    t = Tokenizer()\n    for token in t.tokenize(message):\n        response_arrays.append(str(token))\n\n    response = ''\n    for item in range(len(response_arrays)):\n        if len(response_arrays) == item + 1:\n            response += str(response_arrays[item])\n        else:\n            response += str(response_arrays[item] + '\\n')\n\n    try:\n        line_bot_api.reply_message(receive_json['events'][0]['replyToken'], TextSendMessage(text = response))\n    except InvalidSignatureError:\n        abort(400)\n\n    return 'OK'\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port = 8003, threaded = True, debug = True)\n\n\n\n.env\nCHANNEL_ACCESS_TOKEN='hogehoge' # \u3081\u3063\u3061\u3083\u9577\u3044\u3084\u3064\nCHANNEL_SECRET=''                   # \u4eca\u307e\u3067\u901a\u308a\u96a0\u308c\u3066\u308b\u3084\u3064\n\n\n\nLINE\u7ba1\u7406\u753b\u9762\u5074\u306e\u8a2d\u5b9a\n\u6848\u306e\u5b9a\u3001HTTPS\u3067\u306a\u3044\u3068\u30c0\u30e1\u306a\u306e\u3067\u9811\u5f35\u308a\u307e\u3057\u3087\u3046\uff01\n\nLINE@\u306e\u7ba1\u7406\u753b\u9762\u306b\u9811\u5f35\u3063\u3066\u305f\u3069\u308a\u7740\u3044\u3066 \u300c\u30a2\u30ab\u30a6\u30f3\u30c8\u8a2d\u5b9a\u300d > \u300cBot\u8a2d\u5b9a\u300d \u3067\u81ea\u5206\u306e\u601d\u3046\u3088\u3046\u306a\u8a2d\u5b9a\u3092\u3057\u307e\u3057\u3087\u3046\uff01\n\n\u5b9f\u969b\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\n\n\u3068\u3066\u3082\u898b\u3065\u3089\u3044\u3067\u3059\u306d...\n\n\u6700\u5f8c\u306b\n\u306a\u306b\u304b\u3042\u308c\u3070PullRequest\u306a\u3069\u30c9\u30f3\u30c9\u30f3\u51fa\u3057\u3066\u307b\u3057\u3044\u3067\u3059\uff01\n\u3042\u3068LINE\u3055\u3093Wiki\u30da\u30fc\u30b8\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\u65e7API\u3068\u4eca\u56de\u306e\u65b0API\u3067\u306f request.headers['X-LINE-Signature'] \u304c\u3042\u308b\u306e\u3068\u306a\u3044\u306e\u3067\u306f\u3058\u3081\u7126\u308a\u307e\u3057\u305f\u3002\u3061\u306a\u307f\u306b\u65e7API\u3067\u306f request.headers['X-Line-Channelsignature'] \u306b\u76f8\u5f53\u3057\u307e\u3059\u3002\n\n## \u306f\u3058\u3081\u306b\n\n\u4ee5\u524d\u306bTrial\u30a2\u30ab\u30a6\u30f3\u30c8\u3067\u5168\u304f\u540c\u3058\u3082\u306e\u3092\u4f5c\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u300c\u30a2\u30ab\u30a6\u30f3\u30c8\u4e00\u6589\u524a\u9664\u3059\u3063\u305e\uff01\uff01\u300d\u3068\u3044\u3046\u3088\u3046\u306a\u8105\u3057\u30e1\u30fc\u30eb\u304c\u6765\u305f\u306e\u3067\u79fb\u884c\u3057\u307e\u3057\u305f\u3002\n\n## \u30ea\u30dd\u30b8\u30c8\u30ea\n\n### \u79c1\u306e\u4f5c\u3063\u305f\u3082\u306e\n\nhttps://github.com/nnsnodnb/morphological-linebot\n\n### LINE\u30aa\u30d5\u30a3\u30b7\u30e3\u30eb\u306eSDK\n\nhttps://github.com/line/line-bot-sdk-python\n\n## BOT\n\n![9FlxYyqoOH.png](https://qiita-image-store.s3.amazonaws.com/0/97280/bcb09b97-91b3-30e6-3ce9-14e9a0848125.png \"9FlxYyqoOH.png\")\n\nSDK\u306e[Wiki\u30da\u30fc\u30b8](https://github.com/line/line-bot-sdk-python/wiki/Projects-Using-SDK)\u306b\u4e57\u3063\u305f\u3089\u3044\u3044\u306a\u3041\u306a\u3093\u3066...\n\n## \u74b0\u5883\n\n- Python3.5.2\n- Virtualenv\n- Flask\n- \u591c\u306e\u30c6\u30f3\u30b7\u30e7\u30f3\n- \u30ad\u30c1\u30ac\u30a4\u306e\u30c6\u30f3\u30b7\u30e7\u30f3\n- \u6669\u5fa1\u98ef\u98df\u3079\u3066\u306a\u3044\u3051\u3069\u958b\u767a\u610f\u6b32\u304c\u534a\u7aef\u306a\u3044\n\n## \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n```python:bot.py\n# coding: utf-8\n\nfrom __future__ import unicode_literals\n\nfrom flask import Flask, request, abort\n\nfrom linebot import LineBotApi, WebhookHandler\nfrom linebot.exceptions import InvalidSignatureError\nfrom linebot.models import MessageEvent, TextMessage, TextSendMessage\n\nfrom janome.tokenizer import Tokenizer\n\nimport os, re, json\n\ndef load_env():\n    try:\n        with open('.env') as f:\n            content = f.read()\n    except IOError:\n        content = ''\n\n    for line in content.splitlines():\n        m1 = re.match(r'\\A([A-Za-z_0-9]+)=(.*)\\Z', line)\n        if m1:\n            key, val = m1.group(1), m1.group(2)\n            m2 = re.match(r\"\\A'(.*)'\\Z\", val)\n            if m2:\n                val = m2.group(1)\n            m3 = re.match(r'\\A\"(.*)\"\\Z', val)\n            if m3:\n                val = re.sub(r'\\\\(.)', r'\\1', m3.group(1))\n            os.environ.setdefault(key, val)\n\nload_env()\n\napp = Flask(__name__)\n\nline_bot_api = LineBotApi(os.environ.get('CHANNEL_ACCESS_TOKEN'))\nhandler = WebhookHandler(os.environ.get('CHANNEL_SECRET'))\n\n@app.route(\"/callback\", methods=['POST'])\ndef callback():\n    signature = request.headers['X-LINE-Signature']\n\n    body = request.get_data(as_text=True)\n    receive_json = json.loads(body)\n    message = receive_json['events'][0]['message']['text']\n\n    response_arrays = []\n    t = Tokenizer()\n    for token in t.tokenize(message):\n        response_arrays.append(str(token))\n\n    response = ''\n    for item in range(len(response_arrays)):\n        if len(response_arrays) == item + 1:\n            response += str(response_arrays[item])\n        else:\n            response += str(response_arrays[item] + '\\n')\n\n    try:\n        line_bot_api.reply_message(receive_json['events'][0]['replyToken'], TextSendMessage(text = response))\n    except InvalidSignatureError:\n        abort(400)\n\n    return 'OK'\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port = 8003, threaded = True, debug = True)\n```\n\n```:.env\nCHANNEL_ACCESS_TOKEN='hogehoge' # \u3081\u3063\u3061\u3083\u9577\u3044\u3084\u3064\nCHANNEL_SECRET=''\t\t\t\t\t# \u4eca\u307e\u3067\u901a\u308a\u96a0\u308c\u3066\u308b\u3084\u3064\n```\n\n## LINE\u7ba1\u7406\u753b\u9762\u5074\u306e\u8a2d\u5b9a\n\n\u6848\u306e\u5b9a\u3001HTTPS\u3067\u306a\u3044\u3068\u30c0\u30e1\u306a\u306e\u3067\u9811\u5f35\u308a\u307e\u3057\u3087\u3046\uff01\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-10-21 \u5348\u524d0.45.56.png](https://qiita-image-store.s3.amazonaws.com/0/97280/f2b2aae4-017d-cb2a-7513-913061952f58.png \"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-10-21 \u5348\u524d0.45.56.png\")\n\nLINE@\u306e\u7ba1\u7406\u753b\u9762\u306b\u9811\u5f35\u3063\u3066\u305f\u3069\u308a\u7740\u3044\u3066 **\u300c\u30a2\u30ab\u30a6\u30f3\u30c8\u8a2d\u5b9a\u300d** > **\u300cBot\u8a2d\u5b9a\u300d** \u3067\u81ea\u5206\u306e\u601d\u3046\u3088\u3046\u306a\u8a2d\u5b9a\u3092\u3057\u307e\u3057\u3087\u3046\uff01\n\n## \u5b9f\u969b\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\n\n![FullSizeRender.jpg](https://qiita-image-store.s3.amazonaws.com/0/97280/06fc9db6-aea2-cb5f-9555-d08c24603b11.jpeg \"FullSizeRender.jpg\")\n\n\u3068\u3066\u3082\u898b\u3065\u3089\u3044\u3067\u3059\u306d...\n\n## \u6700\u5f8c\u306b\n\n\u306a\u306b\u304b\u3042\u308c\u3070PullRequest\u306a\u3069\u30c9\u30f3\u30c9\u30f3\u51fa\u3057\u3066\u307b\u3057\u3044\u3067\u3059\uff01\n\u3042\u3068LINE\u3055\u3093Wiki\u30da\u30fc\u30b8\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\n\u65e7API\u3068\u4eca\u56de\u306e\u65b0API\u3067\u306f `request.headers['X-LINE-Signature']` \u304c\u3042\u308b\u306e\u3068\u306a\u3044\u306e\u3067\u306f\u3058\u3081\u7126\u308a\u307e\u3057\u305f\u3002\u3061\u306a\u307f\u306b\u65e7API\u3067\u306f `request.headers['X-Line-Channelsignature']` \u306b\u76f8\u5f53\u3057\u307e\u3059\u3002\n"}