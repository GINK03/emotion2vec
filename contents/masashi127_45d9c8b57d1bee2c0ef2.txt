{"tags": ["Python", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"], "context": " More than 1 year has passed since last update.\n\n\u30eb\u30fc\u30eb\n\u4ee5\u4e0b\u30cf\u30ce\u30a4\u306e\u5854 - Wikipedia\u3088\u308a\n\n\u4ee5\u4e0b\u306e\u30eb\u30fc\u30eb\u306b\u5f93\u3063\u3066\u3059\u3079\u3066\u306e\u5186\u76e4\u3092\u53f3\u7aef\u306e\u676d\u306b\u79fb\u52d5\u3055\u305b\u3089\u308c\u308c\u3070\u5b8c\u6210\u3002\n1. 3\u672c\u306e\u676d\u3068\u3001\u4e2d\u592e\u306b\u7a74\u306e\u958b\u3044\u305f\u5927\u304d\u3055\u306e\u7570\u306a\u308b\u8907\u6570\u306e\u5186\u76e4\u304b\u3089\u69cb\u6210\u3055\u308c\u308b\u3002\n2. \u6700\u521d\u306f\u3059\u3079\u3066\u306e\u5186\u76e4\u304c\u5de6\u7aef\u306e\u676d\u306b\u5c0f\u3055\u3044\u3082\u306e\u304c\u4e0a\u306b\u306a\u308b\u3088\u3046\u306b\u9806\u306b\u7a4d\u307f\u91cd\u306d\u3089\u308c\u3066\u3044\u308b\u3002\n3. \u5186\u76e4\u3092\u4e00\u56de\u306b\u4e00\u679a\u305a\u3064\u3069\u308c\u304b\u306e\u676d\u306b\u79fb\u52d5\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u304c\u3001\u5c0f\u3055\u306a\u5186\u76e4\u306e\u4e0a\u306b\u5927\u304d\u306a\u5186\u76e4\u3092\u4e57\u305b\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\n\n\n\u8003\u3048\u65b9\n\n\u5404\u5186\u76e4\u306e\u676d\u3092\u56de\u308b\u65b9\u5411\u304c\u4ea4\u4e92\u306b\u306a\u308b\n\u518d\u5e30\u30b3\u30fc\u30c9\u306f\u3001\u3042\u308b\u5c40\u9762\u306b\u304a\u3051\u308b3\u3064\u306e\u5186\u76e4\uff08n, n-1, n-2\uff09\u306e\u52d5\u304d\u3092\u7e70\u308a\u8fd4\u3059\u51e6\u7406\n\u975e\u518d\u5e30\u30b3\u30fc\u30c9\u306f\u3001\u5186\u76e4\u306e\u79fb\u52d5\u65b9\u5411\u304c\u4ea4\u4e92\u306b\u306a\u308b\u7279\u5fb4\u3092\u5229\u7528\u3057\u3066\u3001\u5186\u76e4\u306e\u79fb\u52d5\u53ef\u5426\u3092\u5224\u5b9a\u3057\u306a\u304c\u3089\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059\u51e6\u7406\n\u79fb\u52d5\u56de\u6570\u306f2^n - 1\n\n\n\n\u518d\u5e30\u30b3\u30fc\u30c9\n# coding: utf-8\n\ndef hanoi(disk_number, f, t, w, tower_dict):\n\n    if disk_number > 0:\n        hanoi(disk_number-1, f, w, t, tower_dict)\n        tower_dict[t].insert(0, tower_dict[f].pop(0))\n        print((tower_dict['left'], tower_dict['center'], tower_dict['right']))\n        hanoi(disk_number-1, w, t, f, tower_dict)\n\n\nif __name__ == '__main__':\n    disk_number = int(input())\n    tower_dict = {'left': [i for i in range(1, disk_number+1)], 'center': [], 'right': []}\n    print((tower_dict['left'], tower_dict['center'], tower_dict['right']))\n    hanoi(disk_number, 'left', 'right', 'center', tower_dict)\n\n\n\u975e\u518d\u5e30\u30b3\u30fc\u30c9\ndef hanoi(tower_list, pile_list, disk_number):\n    cnt = 0\n    passed_list = [tower_list[:]]\n\n    while True:\n\n        for disk in range(1, disk_number+1):\n\n            # \u4eca\u306e\u5186\u76e4\u304c\u676d\u306e\u4e00\u756a\u4e0a\u306b\u306a\u3051\u308c\u3070\u6b21\u306e\u5186\u76e4\u306b\u79fb\u52d5\n            if tower_list.index(tower_list[disk-1]) != disk-1:\n                continue\n\n            idx = pile_list.index(tower_list[disk-1])\n\n            # \u53f3\u56de\u308a\uff08left -> center -> right -> left ...\u306e\u9806\u3067\u56de\u308b\uff09\n            if (disk_number % 2 == 0 and disk % 2 == 1) or (disk_number % 2 == 1 and disk % 2 == 0) :\n\n                if idx+1 >= len(pile_list):\n                    idx = -1\n\n                if pile_list[idx+1] not in tower_list or tower_list.index(pile_list[idx+1]) > disk-1:\n                    tower_list[disk-1] = pile_list[idx+1]\n                    passed_list.append(tower_list[:])\n                    cnt += 1\n\n\n            # \u5de6\u56de\u308a\uff08left -> right -> center -> left ...\u306e\u9806\u3067\u56de\u308b\uff09\n            else:\n\n                if 0 >= idx:\n                    idx = len(pile_list)\n\n                if pile_list[idx-1] not in tower_list or tower_list.index(pile_list[idx-1]) > disk-1:\n                    tower_list[disk-1] = pile_list[idx-1]\n                    passed_list.append(tower_list[:])\n                    cnt += 1\n\n            if tower_list == ['r'] * disk_number:\n                return cnt, passed_list\n\nif __name__ == '__main__':\n    disk_number = int(input())\n    pile_list = ['l', 'c', 'r']\n    tower_list = ['l'] * (disk_number)\n\n    cnt, passed_list = hanoi(tower_list, pile_list, disk_number)\n\n    print(passed_list)\n\n\n\u304a\u307e\u3051\uff08\u975e\u518d\u5e30\u306e\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\uff09\n# coding: utf-8\n\nimport unittest\n\n\nclass HanoiTest(unittest.TestCase):\n\n    def setUp(self):\n        self.pile_list = ['l', 'c', 'r']\n\n    def test_first(self):\n        disk_number = 3\n        tower_list = ['l'] * (disk_number)\n        cnt, passed_list = hanoi(tower_list, self.pile_list, disk_number)\n        self.assertEqual(cnt, 2 ** disk_number - 1)\n        self.assertEqual(passed_list, [\n            ['l', 'l', 'l'],\n            ['r', 'l', 'l'],\n            ['r', 'c', 'l'],\n            ['c', 'c', 'l'],\n            ['c', 'c', 'r'],\n            ['l', 'c', 'r'],\n            ['l', 'r', 'r'],\n            ['r', 'r', 'r']\n        ])\n\n    def test_second(self):\n        disk_number = 4\n        tower_list = ['l'] * (disk_number)\n        cnt, passed_list = hanoi(tower_list, self.pile_list, disk_number)\n        self.assertEqual(cnt, 2 ** disk_number - 1)\n        self.assertEqual(passed_list, [\n            ['l', 'l', 'l', 'l'],\n            ['c', 'l', 'l', 'l'],\n            ['c', 'r', 'l', 'l'],\n            ['r', 'r', 'l', 'l'],\n            ['r', 'r', 'c', 'l'],\n            ['l', 'r', 'c', 'l'],\n            ['l', 'c', 'c', 'l'],\n            ['c', 'c', 'c', 'l'],\n            ['c', 'c', 'c', 'r'],\n            ['r', 'c', 'c', 'r'],\n            ['r', 'l', 'c', 'r'],\n            ['l', 'l', 'c', 'r'],\n            ['l', 'l', 'r', 'r'],\n            ['c', 'l', 'r', 'r'],\n            ['c', 'r', 'r', 'r'],\n            ['r', 'r', 'r', 'r']\n        ])\n\n    def test_third(self):\n        disk_number = 5\n        tower_list = ['l'] * (disk_number)\n        cnt, passed_list = hanoi(tower_list, self.pile_list, disk_number)\n        self.assertEqual(cnt, 2 ** disk_number - 1)\n        self.assertEqual(passed_list, [\n            ['l', 'l', 'l', 'l', 'l'],\n            ['r', 'l', 'l', 'l', 'l'],\n            ['r', 'c', 'l', 'l', 'l'],\n            ['c', 'c', 'l', 'l', 'l'],\n            ['c', 'c', 'r', 'l', 'l'],\n            ['l', 'c', 'r', 'l', 'l'],\n            ['l', 'r', 'r', 'l', 'l'],\n            ['r', 'r', 'r', 'l', 'l'],\n            ['r', 'r', 'r', 'c', 'l'],\n            ['c', 'r', 'r', 'c', 'l'],\n            ['c', 'l', 'r', 'c', 'l'],\n            ['l', 'l', 'r', 'c', 'l'],\n            ['l', 'l', 'c', 'c', 'l'],\n            ['r', 'l', 'c', 'c', 'l'],\n            ['r', 'c', 'c', 'c', 'l'],\n            ['c', 'c', 'c', 'c', 'l'],\n            ['c', 'c', 'c', 'c', 'r'],\n            ['l', 'c', 'c', 'c', 'r'],\n            ['l', 'r', 'c', 'c', 'r'],\n            ['r', 'r', 'c', 'c', 'r'],\n            ['r', 'r', 'l', 'c', 'r'],\n            ['c', 'r', 'l', 'c', 'r'],\n            ['c', 'l', 'l', 'c', 'r'],\n            ['l', 'l', 'l', 'c', 'r'],\n            ['l', 'l', 'l', 'r', 'r'],\n            ['r', 'l', 'l', 'r', 'r'],\n            ['r', 'c', 'l', 'r', 'r'],\n            ['c', 'c', 'l', 'r', 'r'],\n            ['c', 'c', 'r', 'r', 'r'],\n            ['l', 'c', 'r', 'r', 'r'],\n            ['l', 'r', 'r', 'r', 'r'],\n            ['r', 'r', 'r', 'r', 'r']\n        ])\n\n\n\u53c2\u8003\n\u30cf\u30ce\u30a4\u306e\u5854 - Wikipedia\n\u30cf\u30ce\u30a4\u306e\u5854\u3092\u653b\u7565\u305b\u3088\n\u30cf\u30ce\u30a4\u306e\u5854\u3092\u518d\u5e30\u3067\u89e3\u304f\n# \u30eb\u30fc\u30eb\n\u4ee5\u4e0b[\u30cf\u30ce\u30a4\u306e\u5854 - Wikipedia](http://ja.wikipedia.org/wiki/%E3%83%8F%E3%83%8E%E3%82%A4%E3%81%AE%E5%A1%94)\u3088\u308a\n\n>\u4ee5\u4e0b\u306e\u30eb\u30fc\u30eb\u306b\u5f93\u3063\u3066\u3059\u3079\u3066\u306e\u5186\u76e4\u3092\u53f3\u7aef\u306e\u676d\u306b\u79fb\u52d5\u3055\u305b\u3089\u308c\u308c\u3070\u5b8c\u6210\u3002\n>1. 3\u672c\u306e\u676d\u3068\u3001\u4e2d\u592e\u306b\u7a74\u306e\u958b\u3044\u305f\u5927\u304d\u3055\u306e\u7570\u306a\u308b\u8907\u6570\u306e\u5186\u76e4\u304b\u3089\u69cb\u6210\u3055\u308c\u308b\u3002\n>2. \u6700\u521d\u306f\u3059\u3079\u3066\u306e\u5186\u76e4\u304c\u5de6\u7aef\u306e\u676d\u306b\u5c0f\u3055\u3044\u3082\u306e\u304c\u4e0a\u306b\u306a\u308b\u3088\u3046\u306b\u9806\u306b\u7a4d\u307f\u91cd\u306d\u3089\u308c\u3066\u3044\u308b\u3002\n>3. \u5186\u76e4\u3092\u4e00\u56de\u306b\u4e00\u679a\u305a\u3064\u3069\u308c\u304b\u306e\u676d\u306b\u79fb\u52d5\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u304c\u3001\u5c0f\u3055\u306a\u5186\u76e4\u306e\u4e0a\u306b\u5927\u304d\u306a\u5186\u76e4\u3092\u4e57\u305b\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\n\n# \u8003\u3048\u65b9\n\n- \u5404\u5186\u76e4\u306e\u676d\u3092\u56de\u308b\u65b9\u5411\u304c\u4ea4\u4e92\u306b\u306a\u308b\n- \u518d\u5e30\u30b3\u30fc\u30c9\u306f\u3001\u3042\u308b\u5c40\u9762\u306b\u304a\u3051\u308b3\u3064\u306e\u5186\u76e4\uff08n, n-1, n-2\uff09\u306e\u52d5\u304d\u3092\u7e70\u308a\u8fd4\u3059\u51e6\u7406\n- \u975e\u518d\u5e30\u30b3\u30fc\u30c9\u306f\u3001\u5186\u76e4\u306e\u79fb\u52d5\u65b9\u5411\u304c\u4ea4\u4e92\u306b\u306a\u308b\u7279\u5fb4\u3092\u5229\u7528\u3057\u3066\u3001\u5186\u76e4\u306e\u79fb\u52d5\u53ef\u5426\u3092\u5224\u5b9a\u3057\u306a\u304c\u3089\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059\u51e6\u7406\n- \u79fb\u52d5\u56de\u6570\u306f`2^n - 1`\n\n# \u518d\u5e30\u30b3\u30fc\u30c9\n\n```py\n# coding: utf-8\n\ndef hanoi(disk_number, f, t, w, tower_dict):\n\n    if disk_number > 0:\n        hanoi(disk_number-1, f, w, t, tower_dict)\n        tower_dict[t].insert(0, tower_dict[f].pop(0))\n        print((tower_dict['left'], tower_dict['center'], tower_dict['right']))\n        hanoi(disk_number-1, w, t, f, tower_dict)\n\n\nif __name__ == '__main__':\n    disk_number = int(input())\n    tower_dict = {'left': [i for i in range(1, disk_number+1)], 'center': [], 'right': []}\n    print((tower_dict['left'], tower_dict['center'], tower_dict['right']))\n    hanoi(disk_number, 'left', 'right', 'center', tower_dict)\n```\n\n# \u975e\u518d\u5e30\u30b3\u30fc\u30c9\n\n```py\ndef hanoi(tower_list, pile_list, disk_number):\n    cnt = 0\n    passed_list = [tower_list[:]]\n\n    while True:\n\n        for disk in range(1, disk_number+1):\n\n            # \u4eca\u306e\u5186\u76e4\u304c\u676d\u306e\u4e00\u756a\u4e0a\u306b\u306a\u3051\u308c\u3070\u6b21\u306e\u5186\u76e4\u306b\u79fb\u52d5\n            if tower_list.index(tower_list[disk-1]) != disk-1:\n                continue\n\n            idx = pile_list.index(tower_list[disk-1])\n\n            # \u53f3\u56de\u308a\uff08left -> center -> right -> left ...\u306e\u9806\u3067\u56de\u308b\uff09\n            if (disk_number % 2 == 0 and disk % 2 == 1) or (disk_number % 2 == 1 and disk % 2 == 0) :\n\n                if idx+1 >= len(pile_list):\n                    idx = -1\n\n                if pile_list[idx+1] not in tower_list or tower_list.index(pile_list[idx+1]) > disk-1:\n                    tower_list[disk-1] = pile_list[idx+1]\n                    passed_list.append(tower_list[:])\n                    cnt += 1\n\n\n            # \u5de6\u56de\u308a\uff08left -> right -> center -> left ...\u306e\u9806\u3067\u56de\u308b\uff09\n            else:\n\n                if 0 >= idx:\n                    idx = len(pile_list)\n\n                if pile_list[idx-1] not in tower_list or tower_list.index(pile_list[idx-1]) > disk-1:\n                    tower_list[disk-1] = pile_list[idx-1]\n                    passed_list.append(tower_list[:])\n                    cnt += 1\n\n            if tower_list == ['r'] * disk_number:\n                return cnt, passed_list\n\nif __name__ == '__main__':\n    disk_number = int(input())\n    pile_list = ['l', 'c', 'r']\n    tower_list = ['l'] * (disk_number)\n\n    cnt, passed_list = hanoi(tower_list, pile_list, disk_number)\n\n    print(passed_list)\n```\n\n# \u304a\u307e\u3051\uff08\u975e\u518d\u5e30\u306e\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\uff09\n\n```py\n# coding: utf-8\n\nimport unittest\n\n\nclass HanoiTest(unittest.TestCase):\n\n    def setUp(self):\n        self.pile_list = ['l', 'c', 'r']\n\n    def test_first(self):\n        disk_number = 3\n        tower_list = ['l'] * (disk_number)\n        cnt, passed_list = hanoi(tower_list, self.pile_list, disk_number)\n        self.assertEqual(cnt, 2 ** disk_number - 1)\n        self.assertEqual(passed_list, [\n            ['l', 'l', 'l'],\n            ['r', 'l', 'l'],\n            ['r', 'c', 'l'],\n            ['c', 'c', 'l'],\n            ['c', 'c', 'r'],\n            ['l', 'c', 'r'],\n            ['l', 'r', 'r'],\n            ['r', 'r', 'r']\n        ])\n\n    def test_second(self):\n        disk_number = 4\n        tower_list = ['l'] * (disk_number)\n        cnt, passed_list = hanoi(tower_list, self.pile_list, disk_number)\n        self.assertEqual(cnt, 2 ** disk_number - 1)\n        self.assertEqual(passed_list, [\n            ['l', 'l', 'l', 'l'],\n            ['c', 'l', 'l', 'l'],\n            ['c', 'r', 'l', 'l'],\n            ['r', 'r', 'l', 'l'],\n            ['r', 'r', 'c', 'l'],\n            ['l', 'r', 'c', 'l'],\n            ['l', 'c', 'c', 'l'],\n            ['c', 'c', 'c', 'l'],\n            ['c', 'c', 'c', 'r'],\n            ['r', 'c', 'c', 'r'],\n            ['r', 'l', 'c', 'r'],\n            ['l', 'l', 'c', 'r'],\n            ['l', 'l', 'r', 'r'],\n            ['c', 'l', 'r', 'r'],\n            ['c', 'r', 'r', 'r'],\n            ['r', 'r', 'r', 'r']\n        ])\n\n    def test_third(self):\n        disk_number = 5\n        tower_list = ['l'] * (disk_number)\n        cnt, passed_list = hanoi(tower_list, self.pile_list, disk_number)\n        self.assertEqual(cnt, 2 ** disk_number - 1)\n        self.assertEqual(passed_list, [\n            ['l', 'l', 'l', 'l', 'l'],\n            ['r', 'l', 'l', 'l', 'l'],\n            ['r', 'c', 'l', 'l', 'l'],\n            ['c', 'c', 'l', 'l', 'l'],\n            ['c', 'c', 'r', 'l', 'l'],\n            ['l', 'c', 'r', 'l', 'l'],\n            ['l', 'r', 'r', 'l', 'l'],\n            ['r', 'r', 'r', 'l', 'l'],\n            ['r', 'r', 'r', 'c', 'l'],\n            ['c', 'r', 'r', 'c', 'l'],\n            ['c', 'l', 'r', 'c', 'l'],\n            ['l', 'l', 'r', 'c', 'l'],\n            ['l', 'l', 'c', 'c', 'l'],\n            ['r', 'l', 'c', 'c', 'l'],\n            ['r', 'c', 'c', 'c', 'l'],\n            ['c', 'c', 'c', 'c', 'l'],\n            ['c', 'c', 'c', 'c', 'r'],\n            ['l', 'c', 'c', 'c', 'r'],\n            ['l', 'r', 'c', 'c', 'r'],\n            ['r', 'r', 'c', 'c', 'r'],\n            ['r', 'r', 'l', 'c', 'r'],\n            ['c', 'r', 'l', 'c', 'r'],\n            ['c', 'l', 'l', 'c', 'r'],\n            ['l', 'l', 'l', 'c', 'r'],\n            ['l', 'l', 'l', 'r', 'r'],\n            ['r', 'l', 'l', 'r', 'r'],\n            ['r', 'c', 'l', 'r', 'r'],\n            ['c', 'c', 'l', 'r', 'r'],\n            ['c', 'c', 'r', 'r', 'r'],\n            ['l', 'c', 'r', 'r', 'r'],\n            ['l', 'r', 'r', 'r', 'r'],\n            ['r', 'r', 'r', 'r', 'r']\n        ])\n```\n\n# \u53c2\u8003\n[\u30cf\u30ce\u30a4\u306e\u5854 - Wikipedia](http://ja.wikipedia.org/wiki/%E3%83%8F%E3%83%8E%E3%82%A4%E3%81%AE%E5%A1%94)\n[\u30cf\u30ce\u30a4\u306e\u5854\u3092\u653b\u7565\u305b\u3088](http://www13.plala.or.jp/kymats/study/C++/Hanoi/Hanoi.html)\n[\u30cf\u30ce\u30a4\u306e\u5854\u3092\u518d\u5e30\u3067\u89e3\u304f](http://gushwell.ifdef.jp/Puzzle/Hanoi.html)\n"}