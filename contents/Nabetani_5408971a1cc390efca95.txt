{"context": "\u554f\u984c http://nabetani.sakura.ne.jp/hena/orde05dokitruck/\n\u5b9f\u88c5\u30ea\u30f3\u30af\u96c6 http://qiita.com/Nabetani/items/c516875b13a4d282affe\n\u3067\u3059\u3002\n\u3067\u3002\n\u5b9f\u88c5\u65b9\u91dd\u306f\u3044\u304f\u3064\u304b\u3042\u3063\u3066\u3002\n\n\u53f3\u304b\u3089\u884c\u304f\u304b\u3001\u5de6\u304b\u3089\u884c\u304f\u304b\u3002\n\u3072\u3068\u3064\u3072\u3068\u3064\u884c\u304f\u304b\u3001\u4e00\u6c17\u306b\u884c\u304f\u304b\u3002\n\u30c7\u30fc\u30bf\u3092\u4f55\u3067\u6301\u3064\u304b\n\n\u8fba\u308a\u3067\u81ea\u7531\u306b\u9078\u3079\u308b\u3064\u3082\u308a\u3002\n\u79c1\u306f\u3001\u5f8c\u308d\u304b\u3089\u3001\u4e00\u6c17\u306b\u8a08\u7b97\u3057\u3066\u3001\u30c7\u30fc\u30bf\u306f\u30d3\u30c3\u30c8\u3002\n\u307e\u305a\u306f\u3001C11\u304bC99 \u3050\u3089\u3044\u306b\u3088\u308b\u5b9f\u88c5\uff1a\n// clang -std=c11 -Wall\n// clang x86_64-apple-darwin15.5.0\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n#include <memory.h>\n\nchar * build_ans( int s )\n{\n  char * r = calloc(4, 1);\n  for( int i=0 ; i<3 ; ++i ){\n    if ( s&(1<<i) ){\n      strcat( r, (char[2]){'a'+i});\n    }\n  }\n  if ( !*r ){\n    r[0]='-';\n  }\n  return r;\n}\n\nchar * solve( char const * src )\n{\n  int s=7;\n  for( char const * it = src + strlen( src ) -1 ; src<=it ; --it ){\n    switch(*it-'0'){\n    case 1: s|=s/2; break;\n    case 2: s|=(s&2)*2+!!(s&4); break;\n    case 3: s|=!!(s&4)+(s&1)*2; break;\n    case 4: s|=s*2; break;\n    case 5: s|=(s&1)*4+(s&4)/2; break;\n    case 6: s|=(s&1)*4+!!(s&2); break;\n    case 7: s&=5; break;\n    case 8: s&=6; break;\n    case 9: s&=3; break;\n    }\n  }\n  return build_ans(s);\n}\n\nvoid test( char const * src, char const * expected )\n{\n  char const * actual = solve( src );\n  bool okay = 0==strcmp( actual, expected );\n  printf( \"%s %s->%s ( e:%s )\\n\", ( okay ? \"ok\" : \"**NG**\" ), src, actual , expected );\n  free( actual );\n}\n\nint main()\n{\n  /*0*/ test( \"1728398\", \"bc\" );    \n  // \u7565\n  /*36*/ test( \"697535114542\", \"ac\" );\n  return 0;\n}\n\n\u3044\u3064\u3082\u901a\u308a\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u306f\u7701\u7565\u3002\n\u72b6\u614b\u306f\u751f\u6b7b\u306e\u4e8c\u7a2e\u985e\u304c3\u500b\u306a\u306e\u3067\u30013bit \u3067\u8868\u73fe\u3059\u308c\u3070\u826f\u3044\u3002\n\u751f\u3092 1 \u306b\u3057\u305f\u306e\u3067\u3001\u300c&=\u300d\u3067\u6b7b\u3092\u3082\u305f\u3089\u3057\u3001\u300c|=\u300d\u304c\u751f\u304d\u308b\u53ef\u80fd\u6027\u3092\u5897\u3084\u3057\u3066\u3044\u308b\u3002\nsolve \u306e\u4e2d\u304c\u3054\u3061\u3083\u3054\u3061\u3083\u3057\u3066\u3044\u308b\u3051\u3069\u3001\u30b3\u30fc\u30b9\u3092\u69cb\u6210\u3059\u308b\u30d6\u30ed\u30c3\u30af\u306e\u3054\u3061\u3083\u3054\u3061\u3083\u5177\u5408\u3092\u8868\u73fe\u3057\u3066\u3044\u308b\u306e\u3067\u4ed5\u65b9\u306a\u3044\u3002\n\u30c7\u30fc\u30bf\u3067\u6301\u3066\u308c\u3070\u304b\u3063\u3053\u3044\u3044\u3051\u3069\u3001\u4eca\u56de\u306f\u30b3\u30fc\u30c9\u3067\u8868\u73fe\u3057\u3066\u3044\u308b\u3002\n\u5ff5\u306e\u70ba\u306b\u66f8\u3044\u3066\u304a\u304f\u3068\u300c!!\u300d\u306f\u3001\u8ad6\u7406\u5426\u5b9a\u4e8c\u56de\u3067\u3001 0 \u4ee5\u5916\u3092 1 \u306b\u3059\u308b\u3068\u3044\u3046\u8da3\u65e8\u306e\u8a08\u7b97\u3092\u610f\u5473\u3057\u3066\u3044\u308b\u3002\n\u5168\u304f\u540c\u3058\u8da3\u65e8\u306e\u8a08\u7b97\u3092 ruby \u3067\u66f8\u3044\u305f\u3082\u306e\u304c\u4ee5\u4e0b\u3002\u3068\u3044\u3046\u304b\u3001\u5148\u306b ruby \u3067\u66f8\u3044\u3066\u3044\u305f\u3002\ndef apply( s, c )\n  case c\n  when \"0\";    s\n  when \"1\";    s | s[1] | s[2]*2\n  when \"2\";    s | s[1]*4 | s[2]\n  when \"3\";    s | s[0]*2 | s[2]\n  when \"4\";    s | s[0]*2 | s[1]*4\n  when \"5\";    s | s[0]*4 | s[2]*2\n  when \"6\";    s | s[0]*4 | s[1]\n  when \"7\";    s & 5\n  when \"8\";    s & 6\n  when \"9\";    s & 3\n  end\nend\n\ndef solve( src )\n  r=src.chars.reverse.inject(7) do |s,c|\n    apply( s, c )\n  end\n  %w( a b c ).each.with_index(0).map{ |c,ix|\n    r[ix]==0 ? \"\" : c\n  }.join.tap{ |x| return x.empty? ? \"-\" : x }\nend\n\n$stdout.sync=true\n\nDATA.map do |line|\n  num, src, expected = line.split(/\\s+/)\n  actual = solve( src )\n  okay = actual==expected\n  puts( \"%s %2d %s->%s ( e:%s )\" % [ ( okay ? \"ok\" : \"**NG**\" ), num, src, actual, expected ] )\n  okay\nend.all?.tap{|x| puts( x ? \"everything is ok\" : \"something wrong\" ) }\n\n__END__\n0 1728398 bc  \n1 789 - \n2 274 ac  \n3 185 abc \n\n36  697535114542  ac  \n\nbit \u6f14\u7b97\u3059\u3089\u3001ruby \u306e\u65b9\u304c\u697d\u306b\u66f8\u3051\u308b\u3002\n\u554f\u984c http://nabetani.sakura.ne.jp/hena/orde05dokitruck/\n\u5b9f\u88c5\u30ea\u30f3\u30af\u96c6 http://qiita.com/Nabetani/items/c516875b13a4d282affe\n\u3067\u3059\u3002\n\n\u3067\u3002\n\n\u5b9f\u88c5\u65b9\u91dd\u306f\u3044\u304f\u3064\u304b\u3042\u3063\u3066\u3002\n\n* \u53f3\u304b\u3089\u884c\u304f\u304b\u3001\u5de6\u304b\u3089\u884c\u304f\u304b\u3002\n* \u3072\u3068\u3064\u3072\u3068\u3064\u884c\u304f\u304b\u3001\u4e00\u6c17\u306b\u884c\u304f\u304b\u3002\n* \u30c7\u30fc\u30bf\u3092\u4f55\u3067\u6301\u3064\u304b\n\n\u8fba\u308a\u3067\u81ea\u7531\u306b\u9078\u3079\u308b\u3064\u3082\u308a\u3002\n\n\u79c1\u306f\u3001\u5f8c\u308d\u304b\u3089\u3001\u4e00\u6c17\u306b\u8a08\u7b97\u3057\u3066\u3001\u30c7\u30fc\u30bf\u306f\u30d3\u30c3\u30c8\u3002\n\n\u307e\u305a\u306f\u3001C11\u304bC99 \u3050\u3089\u3044\u306b\u3088\u308b\u5b9f\u88c5\uff1a\n\n```c\n// clang -std=c11 -Wall\n// clang x86_64-apple-darwin15.5.0\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n#include <memory.h>\n\nchar * build_ans( int s )\n{\n  char * r = calloc(4, 1);\n  for( int i=0 ; i<3 ; ++i ){\n    if ( s&(1<<i) ){\n      strcat( r, (char[2]){'a'+i});\n    }\n  }\n  if ( !*r ){\n    r[0]='-';\n  }\n  return r;\n}\n\nchar * solve( char const * src )\n{\n  int s=7;\n  for( char const * it = src + strlen( src ) -1 ; src<=it ; --it ){\n    switch(*it-'0'){\n    case 1: s|=s/2; break;\n    case 2: s|=(s&2)*2+!!(s&4); break;\n    case 3: s|=!!(s&4)+(s&1)*2; break;\n    case 4: s|=s*2; break;\n    case 5: s|=(s&1)*4+(s&4)/2; break;\n    case 6: s|=(s&1)*4+!!(s&2); break;\n    case 7: s&=5; break;\n    case 8: s&=6; break;\n    case 9: s&=3; break;\n    }\n  }\n  return build_ans(s);\n}\n\nvoid test( char const * src, char const * expected )\n{\n  char const * actual = solve( src );\n  bool okay = 0==strcmp( actual, expected );\n  printf( \"%s %s->%s ( e:%s )\\n\", ( okay ? \"ok\" : \"**NG**\" ), src, actual , expected );\n  free( actual );\n}\n\nint main()\n{\n  /*0*/ test( \"1728398\", \"bc\" );    \n  // \u7565\n  /*36*/ test( \"697535114542\", \"ac\" );\n  return 0;\n}\n```\n\n\u3044\u3064\u3082\u901a\u308a\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u306f\u7701\u7565\u3002\n\n\u72b6\u614b\u306f\u751f\u6b7b\u306e\u4e8c\u7a2e\u985e\u304c3\u500b\u306a\u306e\u3067\u30013bit \u3067\u8868\u73fe\u3059\u308c\u3070\u826f\u3044\u3002\n\u751f\u3092 1 \u306b\u3057\u305f\u306e\u3067\u3001\u300c`&=`\u300d\u3067\u6b7b\u3092\u3082\u305f\u3089\u3057\u3001\u300c`|=`\u300d\u304c\u751f\u304d\u308b\u53ef\u80fd\u6027\u3092\u5897\u3084\u3057\u3066\u3044\u308b\u3002\n\n`solve` \u306e\u4e2d\u304c\u3054\u3061\u3083\u3054\u3061\u3083\u3057\u3066\u3044\u308b\u3051\u3069\u3001\u30b3\u30fc\u30b9\u3092\u69cb\u6210\u3059\u308b\u30d6\u30ed\u30c3\u30af\u306e\u3054\u3061\u3083\u3054\u3061\u3083\u5177\u5408\u3092\u8868\u73fe\u3057\u3066\u3044\u308b\u306e\u3067\u4ed5\u65b9\u306a\u3044\u3002\n\u30c7\u30fc\u30bf\u3067\u6301\u3066\u308c\u3070\u304b\u3063\u3053\u3044\u3044\u3051\u3069\u3001\u4eca\u56de\u306f\u30b3\u30fc\u30c9\u3067\u8868\u73fe\u3057\u3066\u3044\u308b\u3002\n\u5ff5\u306e\u70ba\u306b\u66f8\u3044\u3066\u304a\u304f\u3068\u300c`!!`\u300d\u306f\u3001\u8ad6\u7406\u5426\u5b9a\u4e8c\u56de\u3067\u3001 0 \u4ee5\u5916\u3092 1 \u306b\u3059\u308b\u3068\u3044\u3046\u8da3\u65e8\u306e\u8a08\u7b97\u3092\u610f\u5473\u3057\u3066\u3044\u308b\u3002\n\n\u5168\u304f\u540c\u3058\u8da3\u65e8\u306e\u8a08\u7b97\u3092 ruby \u3067\u66f8\u3044\u305f\u3082\u306e\u304c\u4ee5\u4e0b\u3002\u3068\u3044\u3046\u304b\u3001\u5148\u306b ruby \u3067\u66f8\u3044\u3066\u3044\u305f\u3002\n\n```ruby\ndef apply( s, c )\n  case c\n  when \"0\";    s\n  when \"1\";    s | s[1] | s[2]*2\n  when \"2\";    s | s[1]*4 | s[2]\n  when \"3\";    s | s[0]*2 | s[2]\n  when \"4\";    s | s[0]*2 | s[1]*4\n  when \"5\";    s | s[0]*4 | s[2]*2\n  when \"6\";    s | s[0]*4 | s[1]\n  when \"7\";    s & 5\n  when \"8\";    s & 6\n  when \"9\";    s & 3\n  end\nend\n\ndef solve( src )\n  r=src.chars.reverse.inject(7) do |s,c|\n    apply( s, c )\n  end\n  %w( a b c ).each.with_index(0).map{ |c,ix|\n    r[ix]==0 ? \"\" : c\n  }.join.tap{ |x| return x.empty? ? \"-\" : x }\nend\n\n$stdout.sync=true\n\nDATA.map do |line|\n  num, src, expected = line.split(/\\s+/)\n  actual = solve( src )\n  okay = actual==expected\n  puts( \"%s %2d %s->%s ( e:%s )\" % [ ( okay ? \"ok\" : \"**NG**\" ), num, src, actual, expected ] )\n  okay\nend.all?.tap{|x| puts( x ? \"everything is ok\" : \"something wrong\" ) }\n\n__END__\n0 1728398 bc  \n1 789 - \n2 274 ac  \n3 185 abc \n\n36  697535114542  ac  \n```\nbit \u6f14\u7b97\u3059\u3089\u3001ruby \u306e\u65b9\u304c\u697d\u306b\u66f8\u3051\u308b\u3002\n\n", "tags": ["yhpg", "C", "Ruby", "\u3069\u3046\u66f8\u304f"]}