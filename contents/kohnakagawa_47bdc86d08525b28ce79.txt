{"context": "\n\n\u6982\u8981\nFermi\u4ee5\u964d\u306eGPU\u3067\u4f7f\u3048\u308bwarp vote\u95a2\u6570\u306b\u3064\u3044\u3066\u8aac\u660e\u3059\u308b\u3002\n\n\u52d5\u6a5f\nKepler\u3067\u65b0\u3057\u304f\u5c0e\u5165\u3055\u308c\u305fwarp shuffle\u95a2\u6570\u306e\u8a18\u4e8b\u306f\u591a\u304f\u3042\u308b\u306e\u3060\u304c\u3001warp vote\u95a2\u6570\u306e\u8a18\u4e8b\u306e\u307e\u3068\u3081\u304c\u3042\u307e\u308a\u898b\u5f53\u305f\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3053\u3053\u306b\u307e\u3068\u3081\u308b\u3053\u3068\u306b\u3057\u305f\u3002\u3042\u307e\u308a\u4f7f\u308f\u308c\u306a\u3044\u6a5f\u80fd\u306a\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\u8a73\u7d30\u306fCUDA C Programming guide\u306ewarp vote functions\u306b\u3042\u308b\u304c\u3001\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304d\u306a\u304c\u3089\u3069\u3046\u3044\u3063\u305f\u6319\u52d5\u3092\u793a\u3059\u306e\u304b\u307e\u3068\u3081\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306fgithub\u306b\u3066\u516c\u958b\u3057\u3066\u3044\u308b\u3002\n\nwarp vote\u95a2\u6570\u4e00\u89a7\n\n__any\nint __any(int predicate);\n\n\u95a2\u6570\u306e\u8aac\u660e\uff1apredicate\u2260\\neq0\u3068\u306a\u308b\u30b9\u30ec\u30c3\u30c9\u304cwarp\u5185\u306b\u4e00\u3064\u3067\u3082\u5b58\u5728\u3059\u308b\u5834\u5408\u306b\u306f\u623b\u308a\u5024\u304c1\u306b\u306a\u308a\u3001\u305d\u3046\u3067\u306a\u3044\u5834\u5408\uff10\u306b\u306a\u308b\u3002\n\u4f8b\n__global__ void test_any(int* a,\n                         int* b) {\n  const auto tid = threadIdx.x + blockIdx.x * blockDim.x;\n  a[tid] = __any(threadIdx.x == 16);\n  b[tid] = __any(threadIdx.x == 128);\n}\n\n...\n\ntest_any<<<2, 64>>>(a, b);\n\n\u3053\u306e\u5834\u5408\u3001threadIdx.x == 16\u3068\u306a\u308b\u30b9\u30ec\u30c3\u30c9\u304cwarp\u5185\u306b\u4e00\u3064\u3067\u3082\u5b58\u5728\u3059\u308c\u3070\u3001\u305d\u306ewarp\u5185\u3059\u3079\u3066\u306e\u30b9\u30ec\u30c3\u30c9\u306b\u3064\u3044\u3066\u623b\u308a\u5024\u306f1\u306b\u306a\u308b\u3002\u305d\u308c\u4ee5\u5916\u306f0\u3092\u8fd4\u3059\u3002\n\u3064\u307e\u308a\u3001a\u306e\u914d\u5217\u306e0\u304b\u308931\u300164\u304b\u308995\u756a\u76ee\u306b\u306f1\u304c\u5165\u308a\u305d\u308c\u4ee5\u5916\u306b\u306f\uff10\u304c\u306f\u3044\u308b\u3002(\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3068\u540c\u3058)\nfor (int i = 0; i < 128; i++) {\n  if (i >= 0 && i < 32)\n    a[i] = 1;\n  else if (i >= 64 && i < 96)\n    a[i] = 1;\n  else\n    a[i] = 0;\n}\n\n\u4e00\u65b9\u3067b\u306e\u914d\u5217\u306f\u3059\u3079\u30660\u3067\u57cb\u3081\u3089\u308c\u308b\u3002thread block\u306e\u30b5\u30a4\u30ba\u309264\u306b\u3057\u3066kernel\u3092\u8d77\u52d5\u3057\u3066\u3044\u308b\u306e\u3067threadIdx.x == 128\u3092\u6e80\u305f\u3059warp\u304c\u5b58\u5728\u3057\u306a\u3044\u305f\u3081\u3067\u3042\u308b\u3002\n\n__all\nint __all(int predicate);\n\n\u95a2\u6570\u306e\u8aac\u660e\uff1awarp\u5185\u3059\u3079\u3066\u306e\u30b9\u30ec\u30c3\u30c9\u306b\u3064\u3044\u3066predicate\u2260\\neq0\u3068\u306a\u308b\u5834\u5408\u306b\u623b\u308a\u5024\u304c1\u306b\u306a\u308a\u3001\u305d\u3046\u3067\u306a\u3044\u5834\u54080\u306b\u306a\u308b\u3002\n\u4f8b\n__global__ void test_all(int* a,\n                         int* b) {\n  const auto tid = threadIdx.x + blockIdx.x * blockDim.x;\n  a[tid] = __all(threadIdx.x == 16);\n  b[tid] = __all(b[tid] == -1);\n}\n\n...\n\ntest_all<<<2, 64>>>(a, b);\n\n\n(\u3053\u3053\u3067b\u306e\u914d\u5217\u306b\u306fkernel\u3092\u8d77\u52d5\u3059\u308b\u524d\u306b-1\u304c\u57cb\u3081\u3089\u308c\u3066\u3044\u308b\u3068\u3059\u308b\u3002)\na\u306e\u914d\u5217\u306f\u3059\u3079\u30660\u3067\u57cb\u3081\u3089\u308c\u308b\u3002warp\u5185\u3067threadIdx.x == 16\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u30b9\u30ec\u30c3\u30c9\u304c31\u500b\u5b58\u5728\u3059\u308b\u305f\u3081\u3067\u3042\u308b\u3002\n\u4e00\u65b9\u3067b\u306e\u914d\u5217\u306f-1\u3067\u57cb\u3081\u3089\u308c\u3066\u3044\u308b\u306e\u3067b[tid] == -1\u306fwarp\u5185\u306e\u3059\u3079\u3066\u306e\u30b9\u30ec\u30c3\u30c9\u306b\u3064\u3044\u3066\u6e80\u305f\u3055\u308c\u308b\u3002all\u306e\u623b\u308a\u5024\u306f1\u306b\u306a\u308b\u3002\n\n__ballot\nunsigned int __ballot(int predicate);\n\n\u95a2\u6570\u306e\u8aac\u660e\uff1apredicate\u2260\\neq0\u306e\u30b9\u30ec\u30c3\u30c9\u306e\u4f4d\u7f6e\u306b\u5bfe\u5fdc\u3059\u308bbit\u304c1\u306b\u3001\u305d\u308c\u4ee5\u5916\u306ebit\u304c0\u306b\u306a\u3063\u305funsigned int\u578b\u306e\u623b\u308a\u5024\u3092\u8fd4\u3059\u3002\n\u4f8b\n__global__ void test_ballot(int* a,\n                            int* b) {\n  const auto tid = threadIdx.x + blockIdx.x * blockDim.x;\n  a[tid] = __ballot(threadIdx.x == 16);\n  b[tid] = __ballot(threadIdx.x % 2 == 0);\n}\n\n...\n\ntest_ballot<<<2, 64>>>(a, b);\n\n\u3068\u306a\u3063\u3066\u3044\u308b\u3068a\u3068b\u306e\u914d\u5217\u306e\u30c7\u30fc\u30bf\u306f\u305d\u308c\u305e\u308c\ntid a                                b\n...\n30  00000000000000010000000000000000 01010101010101010101010101010101\n31  00000000000000010000000000000000 01010101010101010101010101010101\n32  00000000000000000000000000000000 01010101010101010101010101010101\n33  00000000000000000000000000000000 01010101010101010101010101010101\n...\n\n\u3068\u306a\u308b\u3002\u623b\u308a\u5024\u306e\u5404bit\u304cwarp\u5185\u306e\u30b9\u30ec\u30c3\u30c9\u306epredicate\u306e\u5024\u30681\u5bfe1\u5bfe\u5fdc\u306b\u306a\u3063\u3066\u304a\u308a\u3001predicate\u2260\\neq0\u3068\u306a\u3063\u305f\u30b9\u30ec\u30c3\u30c9\u306b\u5bfe\u5fdc\u3059\u308bbit\u304c1\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n\u6761\u4ef6\u5206\u5c90\u304c\u3042\u308a\u3001warp divergence\u304c\u8d77\u304d\u308b\u5834\u5408\n\u4e0a\u8a18\u3067\u3042\u3052\u305f\u4f8b\u3067\u306f\u6761\u4ef6\u5206\u5c90\u306f\u306a\u304f\u3001\u3059\u3079\u3066\u306e\u30b9\u30ec\u30c3\u30c9\u304cany/all/ballot\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u30b1\u30fc\u30b9\u306e\u307f\u3092\u8003\u3048\u305f\u3002if\u304c\u3042\u308a\u3001warp divergence\u304c\u8d77\u304d\u308b\u5834\u5408\u306b\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3042\u308b\u3002\n\u4f8b\u3048\u3070 __any\u3067\n__global__ void test_any(int* c) {\n  const auto tid = threadIdx.x + blockIdx.x * blockDim.x;\n  if (threadIdx.x == 10) c[tid] = __any(threadIdx.x == 16);\n}\n\n...\n\ntest_any<<<2, 64>>>(c);\n\n\u3068\u3057\u305f\u3068\u3059\u308b\u3002\n\u3053\u306e\u6642threadIdx.x == 10\u306e\u5c5e\u3059\u308bwarp\u306b\u306fthreadIdx.x == 16\u3068\u306a\u308b\u30b9\u30ec\u30c3\u30c9\u304c\u5b58\u5728\u3059\u308b\u304c\u3001any\u306e\u623b\u308a\u5024\u306f0\u306b\u306a\u308b\u3002\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3092\n__global__ void test_any(int* c) {\n  const auto tid = threadIdx.x + blockIdx.x * blockDim.x;\n  if (threadIdx.x == 10 || threadIdx.x == 16) c[tid] = __any(threadIdx.x == 16);\n}\n\n...\n\ntest_any<<<2, 64>>>(c);\n\n\u306e\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u3066threadIdx.x == 16\u3092\u6e80\u305f\u3059\u30b9\u30ec\u30c3\u30c9\u304cany\u3092\u547c\u3076\u3088\u3046\u306b\u5909\u66f4\u3057\u305f\u3089\u3069\u3046\u306a\u308b\u304b\u3002\n\u3053\u306e\u5834\u5408\u306b\u306fthreadIdx.x == 10\u306eany\u306e\u623b\u308a\u5024\u306f0\u306b\u306a\u308a\u3001threadIdx.x == 16\u306eany\u306e\u623b\u308a\u5024\u306f1\u306b\u306a\u308b\u3002\n\u671f\u5f85\u901a\u308a\u306e\u632f\u308b\u821e\u3044\u306b\u306f\u306a\u3089\u306a\u3044\u3002\nballot\u306e\u5834\u5408\u306b\u306finactive\u306a\u30b9\u30ec\u30c3\u30c9\u306b\u5bfe\u5fdc\u3057\u305fbit\u304c0\u306b\u306a\u3063\u305f\u623b\u308a\u5024\u304c\u5f97\u3089\u308c\u308b\u3002\n\n\u4f59\u8ac7\n\u3061\u306a\u307f\u306b\n__global__ void test_any(int* c) {\n  const auto tid = threadIdx.x + blockIdx.x * blockDim.x;\n  if (threadIdx.x == 15 || threadIdx.x == 16) c[tid] = __any(threadIdx.x == 16);\n}\n\n\u306e\u3088\u3046\u306b\u3059\u308b\u3068threadIdx.x == 15\u3068threadIdx.x == 16\u306b\u5bfe\u5fdc\u3059\u308bany\u306e\u623b\u308a\u5024\u304c\u4e21\u65b9\u3068\u30821\u306b\u306a\u308b\u3002\n\u96a3\u63a5\u3057\u305f\u30b9\u30ec\u30c3\u30c9\u306b\u5bfe\u3057\u3066any\u3092\u547c\u3076\u3088\u3046\u306b\u3059\u308c\u3070warp divergence\u8d77\u304d\u3066\u3044\u308b\u5834\u5408\u3067\u3082\u6b63\u3057\u3044\u632f\u308b\u821e\u3044\u306b\u306a\u308b\u6a21\u69d8\u3002\n\u305f\u3060\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f\u3053\u3093\u306a\u3053\u3068\u66f8\u3044\u3066\u3044\u306a\u3044\u306e\u3067\u3042\u307e\u308a\u4f7f\u3046\u3079\u304d\u3067\u306f\u306a\u3044\u3068\u601d\u3046\u3002\n\n\u307e\u3068\u3081\nwarp vote\u95a2\u6570\u306e\u6a5f\u80fd\u3068\u6ce8\u610f\u70b9\u306b\u3064\u3044\u3066\u307e\u3068\u3081\u305f\u3002any all ballot\u306e\u4e09\u3064\u304c\u4f7f\u7528\u53ef\u80fd\u3067\u3042\u308a\u3001\u305d\u308c\u305e\u308cwarp\u5185\u30b9\u30ec\u30c3\u30c9\u306e\u72b6\u614b\u3092broadcast\u3059\u308b\u306e\u306b\u5f79\u306b\u7acb\u3064\u3002\n#\u6982\u8981\nFermi\u4ee5\u964d\u306eGPU\u3067\u4f7f\u3048\u308bwarp vote\u95a2\u6570\u306b\u3064\u3044\u3066\u8aac\u660e\u3059\u308b\u3002\n\n#\u52d5\u6a5f\nKepler\u3067\u65b0\u3057\u304f\u5c0e\u5165\u3055\u308c\u305fwarp shuffle\u95a2\u6570\u306e\u8a18\u4e8b\u306f\u591a\u304f\u3042\u308b\u306e\u3060\u304c\u3001warp vote\u95a2\u6570\u306e\u8a18\u4e8b\u306e\u307e\u3068\u3081\u304c\u3042\u307e\u308a\u898b\u5f53\u305f\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3053\u3053\u306b\u307e\u3068\u3081\u308b\u3053\u3068\u306b\u3057\u305f\u3002\u3042\u307e\u308a\u4f7f\u308f\u308c\u306a\u3044\u6a5f\u80fd\u306a\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\u8a73\u7d30\u306f[CUDA C Programming guide\u306ewarp vote functions](https://docs.nvidia.com/cuda/cuda-c-programming-guide/#warp-vote-functions)\u306b\u3042\u308b\u304c\u3001\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304d\u306a\u304c\u3089\u3069\u3046\u3044\u3063\u305f\u6319\u52d5\u3092\u793a\u3059\u306e\u304b\u307e\u3068\u3081\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f[github](https://github.com/kohnakagawa/warp_vote)\u306b\u3066\u516c\u958b\u3057\u3066\u3044\u308b\u3002\n\n#warp vote\u95a2\u6570\u4e00\u89a7\n## __any\n\n```cuda\nint __any(int predicate);\n```\n\n\u95a2\u6570\u306e\u8aac\u660e\uff1apredicate$\\neq$0\u3068\u306a\u308b\u30b9\u30ec\u30c3\u30c9\u304cwarp\u5185\u306b\u4e00\u3064\u3067\u3082\u5b58\u5728\u3059\u308b\u5834\u5408\u306b\u306f\u623b\u308a\u5024\u304c1\u306b\u306a\u308a\u3001\u305d\u3046\u3067\u306a\u3044\u5834\u5408\uff10\u306b\u306a\u308b\u3002\n\u4f8b\n\n```cuda\n__global__ void test_any(int* a,\n                         int* b) {\n  const auto tid = threadIdx.x + blockIdx.x * blockDim.x;\n  a[tid] = __any(threadIdx.x == 16);\n  b[tid] = __any(threadIdx.x == 128);\n}\n\n...\n\ntest_any<<<2, 64>>>(a, b);\n```\n\n\u3053\u306e\u5834\u5408\u3001threadIdx.x == 16\u3068\u306a\u308b\u30b9\u30ec\u30c3\u30c9\u304cwarp\u5185\u306b\u4e00\u3064\u3067\u3082\u5b58\u5728\u3059\u308c\u3070\u3001\u305d\u306ewarp\u5185\u3059\u3079\u3066\u306e\u30b9\u30ec\u30c3\u30c9\u306b\u3064\u3044\u3066\u623b\u308a\u5024\u306f1\u306b\u306a\u308b\u3002\u305d\u308c\u4ee5\u5916\u306f0\u3092\u8fd4\u3059\u3002\n\u3064\u307e\u308a\u3001a\u306e\u914d\u5217\u306e0\u304b\u308931\u300164\u304b\u308995\u756a\u76ee\u306b\u306f1\u304c\u5165\u308a\u305d\u308c\u4ee5\u5916\u306b\u306f\uff10\u304c\u306f\u3044\u308b\u3002(\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3068\u540c\u3058)\n\n```c\nfor (int i = 0; i < 128; i++) {\n  if (i >= 0 && i < 32)\n    a[i] = 1;\n  else if (i >= 64 && i < 96)\n    a[i] = 1;\n  else\n    a[i] = 0;\n}\n```\n\n\u4e00\u65b9\u3067b\u306e\u914d\u5217\u306f\u3059\u3079\u30660\u3067\u57cb\u3081\u3089\u308c\u308b\u3002thread block\u306e\u30b5\u30a4\u30ba\u309264\u306b\u3057\u3066kernel\u3092\u8d77\u52d5\u3057\u3066\u3044\u308b\u306e\u3067threadIdx.x == 128\u3092\u6e80\u305f\u3059warp\u304c\u5b58\u5728\u3057\u306a\u3044\u305f\u3081\u3067\u3042\u308b\u3002\n\n## __all\n\n```cuda\nint __all(int predicate);\n```\n\n\u95a2\u6570\u306e\u8aac\u660e\uff1awarp\u5185\u3059\u3079\u3066\u306e\u30b9\u30ec\u30c3\u30c9\u306b\u3064\u3044\u3066predicate$\\neq$0\u3068\u306a\u308b\u5834\u5408\u306b\u623b\u308a\u5024\u304c1\u306b\u306a\u308a\u3001\u305d\u3046\u3067\u306a\u3044\u5834\u54080\u306b\u306a\u308b\u3002\n\u4f8b\n\n```cuda\n__global__ void test_all(int* a,\n                         int* b) {\n  const auto tid = threadIdx.x + blockIdx.x * blockDim.x;\n  a[tid] = __all(threadIdx.x == 16);\n  b[tid] = __all(b[tid] == -1);\n}\n\n...\n\ntest_all<<<2, 64>>>(a, b);\n\n```\n\n(\u3053\u3053\u3067b\u306e\u914d\u5217\u306b\u306fkernel\u3092\u8d77\u52d5\u3059\u308b\u524d\u306b-1\u304c\u57cb\u3081\u3089\u308c\u3066\u3044\u308b\u3068\u3059\u308b\u3002)\na\u306e\u914d\u5217\u306f\u3059\u3079\u30660\u3067\u57cb\u3081\u3089\u308c\u308b\u3002warp\u5185\u3067threadIdx.x == 16\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u30b9\u30ec\u30c3\u30c9\u304c31\u500b\u5b58\u5728\u3059\u308b\u305f\u3081\u3067\u3042\u308b\u3002\n\u4e00\u65b9\u3067b\u306e\u914d\u5217\u306f-1\u3067\u57cb\u3081\u3089\u308c\u3066\u3044\u308b\u306e\u3067b[tid] == -1\u306fwarp\u5185\u306e\u3059\u3079\u3066\u306e\u30b9\u30ec\u30c3\u30c9\u306b\u3064\u3044\u3066\u6e80\u305f\u3055\u308c\u308b\u3002all\u306e\u623b\u308a\u5024\u306f1\u306b\u306a\u308b\u3002\n\n## __ballot\n\n```cuda\nunsigned int __ballot(int predicate);\n```\n\n\u95a2\u6570\u306e\u8aac\u660e\uff1apredicate$\\neq$0\u306e\u30b9\u30ec\u30c3\u30c9\u306e\u4f4d\u7f6e\u306b\u5bfe\u5fdc\u3059\u308bbit\u304c1\u306b\u3001\u305d\u308c\u4ee5\u5916\u306ebit\u304c0\u306b\u306a\u3063\u305funsigned int\u578b\u306e\u623b\u308a\u5024\u3092\u8fd4\u3059\u3002\n\u4f8b\n\n```cuda\n__global__ void test_ballot(int* a,\n                            int* b) {\n  const auto tid = threadIdx.x + blockIdx.x * blockDim.x;\n  a[tid] = __ballot(threadIdx.x == 16);\n  b[tid] = __ballot(threadIdx.x % 2 == 0);\n}\n\n...\n\ntest_ballot<<<2, 64>>>(a, b);\n```\n\n\u3068\u306a\u3063\u3066\u3044\u308b\u3068a\u3068b\u306e\u914d\u5217\u306e\u30c7\u30fc\u30bf\u306f\u305d\u308c\u305e\u308c\n\n```\ntid a                                b\n...\n30  00000000000000010000000000000000 01010101010101010101010101010101\n31  00000000000000010000000000000000 01010101010101010101010101010101\n32  00000000000000000000000000000000 01010101010101010101010101010101\n33  00000000000000000000000000000000 01010101010101010101010101010101\n...\n```\n\n\u3068\u306a\u308b\u3002\u623b\u308a\u5024\u306e\u5404bit\u304cwarp\u5185\u306e\u30b9\u30ec\u30c3\u30c9\u306epredicate\u306e\u5024\u30681\u5bfe1\u5bfe\u5fdc\u306b\u306a\u3063\u3066\u304a\u308a\u3001predicate$\\neq$0\u3068\u306a\u3063\u305f\u30b9\u30ec\u30c3\u30c9\u306b\u5bfe\u5fdc\u3059\u308bbit\u304c1\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n#\u6761\u4ef6\u5206\u5c90\u304c\u3042\u308a\u3001warp divergence\u304c\u8d77\u304d\u308b\u5834\u5408\n\u4e0a\u8a18\u3067\u3042\u3052\u305f\u4f8b\u3067\u306f\u6761\u4ef6\u5206\u5c90\u306f\u306a\u304f\u3001\u3059\u3079\u3066\u306e\u30b9\u30ec\u30c3\u30c9\u304cany/all/ballot\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u30b1\u30fc\u30b9\u306e\u307f\u3092\u8003\u3048\u305f\u3002if\u304c\u3042\u308a\u3001warp divergence\u304c\u8d77\u304d\u308b\u5834\u5408\u306b\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3042\u308b\u3002\n\u4f8b\u3048\u3070 __any\u3067\n\n```cuda\n__global__ void test_any(int* c) {\n  const auto tid = threadIdx.x + blockIdx.x * blockDim.x;\n  if (threadIdx.x == 10) c[tid] = __any(threadIdx.x == 16);\n}\n\n...\n\ntest_any<<<2, 64>>>(c);\n```\n\n\u3068\u3057\u305f\u3068\u3059\u308b\u3002\n\u3053\u306e\u6642threadIdx.x == 10\u306e\u5c5e\u3059\u308bwarp\u306b\u306fthreadIdx.x == 16\u3068\u306a\u308b\u30b9\u30ec\u30c3\u30c9\u304c\u5b58\u5728\u3059\u308b\u304c\u3001__any\u306e\u623b\u308a\u5024\u306f0\u306b\u306a\u308b\u3002__\n\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3092\n\n```cuda\n__global__ void test_any(int* c) {\n  const auto tid = threadIdx.x + blockIdx.x * blockDim.x;\n  if (threadIdx.x == 10 || threadIdx.x == 16) c[tid] = __any(threadIdx.x == 16);\n}\n\n...\n\ntest_any<<<2, 64>>>(c);\n```\n\n\u306e\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u3066threadIdx.x == 16\u3092\u6e80\u305f\u3059\u30b9\u30ec\u30c3\u30c9\u304cany\u3092\u547c\u3076\u3088\u3046\u306b\u5909\u66f4\u3057\u305f\u3089\u3069\u3046\u306a\u308b\u304b\u3002\n\u3053\u306e\u5834\u5408\u306b\u306f__threadIdx.x == 10\u306eany\u306e\u623b\u308a\u5024\u306f0\u306b\u306a\u308a\u3001threadIdx.x == 16\u306eany\u306e\u623b\u308a\u5024\u306f1\u306b\u306a\u308b\u3002__\n\u671f\u5f85\u901a\u308a\u306e\u632f\u308b\u821e\u3044\u306b\u306f\u306a\u3089\u306a\u3044\u3002\n\nballot\u306e\u5834\u5408\u306b\u306finactive\u306a\u30b9\u30ec\u30c3\u30c9\u306b\u5bfe\u5fdc\u3057\u305fbit\u304c0\u306b\u306a\u3063\u305f\u623b\u308a\u5024\u304c\u5f97\u3089\u308c\u308b\u3002\n\n#\u4f59\u8ac7\n\u3061\u306a\u307f\u306b\n\n```cuda\n__global__ void test_any(int* c) {\n  const auto tid = threadIdx.x + blockIdx.x * blockDim.x;\n  if (threadIdx.x == 15 || threadIdx.x == 16) c[tid] = __any(threadIdx.x == 16);\n}\n```\n\n\u306e\u3088\u3046\u306b\u3059\u308b\u3068threadIdx.x == 15\u3068threadIdx.x == 16\u306b\u5bfe\u5fdc\u3059\u308bany\u306e\u623b\u308a\u5024\u304c\u4e21\u65b9\u3068\u30821\u306b\u306a\u308b\u3002\n\u96a3\u63a5\u3057\u305f\u30b9\u30ec\u30c3\u30c9\u306b\u5bfe\u3057\u3066any\u3092\u547c\u3076\u3088\u3046\u306b\u3059\u308c\u3070warp divergence\u8d77\u304d\u3066\u3044\u308b\u5834\u5408\u3067\u3082\u6b63\u3057\u3044\u632f\u308b\u821e\u3044\u306b\u306a\u308b\u6a21\u69d8\u3002\n\u305f\u3060\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f\u3053\u3093\u306a\u3053\u3068\u66f8\u3044\u3066\u3044\u306a\u3044\u306e\u3067\u3042\u307e\u308a\u4f7f\u3046\u3079\u304d\u3067\u306f\u306a\u3044\u3068\u601d\u3046\u3002\n\n#\u307e\u3068\u3081\nwarp vote\u95a2\u6570\u306e\u6a5f\u80fd\u3068\u6ce8\u610f\u70b9\u306b\u3064\u3044\u3066\u307e\u3068\u3081\u305f\u3002any all ballot\u306e\u4e09\u3064\u304c\u4f7f\u7528\u53ef\u80fd\u3067\u3042\u308a\u3001\u305d\u308c\u305e\u308cwarp\u5185\u30b9\u30ec\u30c3\u30c9\u306e\u72b6\u614b\u3092broadcast\u3059\u308b\u306e\u306b\u5f79\u306b\u7acb\u3064\u3002\n", "tags": ["CUDA"]}