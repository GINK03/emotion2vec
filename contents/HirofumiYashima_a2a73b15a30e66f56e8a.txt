{"context": " More than 1 year has passed since last update.\n\n\u524d\u56de\u306e\u8a18\u4e8b\u3067\u306f\u3001\u4ee5\u4e0b\u306e\u8ab2\u984c\u8a2d\u5b9a\u3067\u3001\u30e6\u30fc\u30b6\u304c30\u65e5\u5f8c\u306b\u30c7\u30a4\u30ea\u30fc\u30fb\u30a2\u30af\u30c6\u30a3\u30d6\u30fb\u30e6\u30fc\u30b6\u3067\u3042\u308b\u78ba\u7387\uff08\u5024\u57df\uff1a0\uff5e1\uff09\u3092\u76ee\u7684\u5909\u6570\u306b\u3068\u3063\u305f\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u30e2\u30c7\u30eb\u306e\u4fc2\u6570\u3092\u63a8\u8a08\u3057\u307e\u3057\u305f\u3002\n\n\n\u3010\u6b63\u89e3\u30c7\u30fc\u30bf\u3011L\u56de\u5e30\u306e\u76ee\u7684\u5909\u6570\n 30\u65e5\u5f8c\u306e DAILY_ACTIVE_FLAG \u30ab\u30e9\u30e0\u306e\u5024 (1 or 0)\n\u3010\u8aac\u660e\u5909\u6570\u3011\n\u203b\u5404\u7a2e\u8abf\u67fb\u306e\u7d50\u679c\u3001\u624b\u6301\u3061\u306e\u4eee\u8aac\u306f\u4ee5\u4e0b\u3067\u3042\u308b\u3002\n(1) \u3042\u308b\u65e5\u306e\u30ab\u30fc\u30c9\u30fb\u30ac\u30c1\u30e3\u5f15\u3044\u305f\u5408\u8a08\u56de\u6570\uff08\u6709\u511f\u3001\u7121\u511f\u5408\u8a08\uff09CARD_GACHA_COUNT\n(2) \u3042\u308b\u65e5\u306e\u81ea\u5df1\u30b9\u30c6\u30fc\u30bf\u30b9\uff08\u4f53\u529b\u3001\u30e6\u30fc\u30b6\u4e2d\u306e\u76f8\u5bfe\u9806\u4f4d\u3001\u6240\u5c5e\u540c\u76df\u30fb\u9023\u5408\u30c1\u30fc\u30e0\u5168\u4f53\u306e\u72b6\u6cc1\u3001\u4fdd\u6709\u30ab\u30fc\u30c9\u6570\u306a\u3069\uff09\u95b2\u89a7\u753b\u9762\u30a2\u30af\u30bb\u30b9\u56de\u6570 STATUS_CHECK_COUNT\n(3) \u3042\u308b\u65e5\u306b\u3001\u9023\u5408\u4ef2\u9593\u3001\u540c\u76df\u4ef2\u9593\u3068\u30a2\u30a4\u30c6\u30e0\u4ea4\u63db\u3001\u6fc0\u52b1\u30a2\u30af\u30b7\u30e7\u30f3\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u4ea4\u63db\u306a\u3069\u3092\u884c\u3063\u305f\u56de\u6570FRIEND_ACTION_COUTNT\n\n\n\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3092\u63a8\u8a08\u3057\u305f\u7d50\u679c\u3001\u30e6\u30fc\u30b6\u30fc\u30a2\u30af\u30c6\u30a3\u30d6\u78ba\u7387\u3092\u8aac\u660e\u3059\u308b\u8aac\u660e\u5909\u6570\u306e\u5404\u4fc2\u6570\u306f\u3001\u4ee5\u4e0b\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u3068\u3057\u307e\u3059\u3002\n\n\nlog( pi / (1-pi) ) =  (CARD_GACHA_COUNT * 0.214 + STATUS_CHECK_COUNT * 0.314 +  FRIEND_ACTION_COUTNT* 0.753 + 5.091)\n\n\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001\u4e0a\u8a18\u306e\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u30e2\u30c7\u30eb\u3092\uff08AWS Redshift\u306a\u3069\u306e\u74b0\u5883\u3067\u3001\u65e5\u6b21\u30d0\u30c3\u30c1\u51e6\u7406\u306a\u3069\u3067\uff09\u5b9a\u6642\u5b9f\u884c\u3055\u308c\u308b \u30eb\u30fc\u30c1\u30f3 SQL \u306b \u30d9\u30bf\u6253\u3061\u3057\u3066\u3001\u6bce\u65e5\u3001\u5168\u30e6\u30fc\u30b6\u306e\u300c30\u65e5\u5f8c\u306e\u30c7\u30a4\u30ea\u30fc\u30fb\u30a2\u30af\u30c6\u30a3\u30d6 \u78ba\u7387\u300d\u304c DB\u5185\u306e\u30ab\u30e9\u30e0\u306b\u683c\u7d0d\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\n\n\u3010 SQL \u3011\n\n\nSQL\nCREATE TABLE uu_profile_analysis_tbl AS\nWith temp AS (\n                SELECT CARD_GACHA_COUNT,\n                STATUS_CHECK_COUNT,\n                EXP(-\n                        (CARD_GACHA_COUNT * 0.214 + STATUS_CHECK_COUNT * 0.314 +  FRIEND_ACTION_COUTNT* 0.753 + 5.091)\n                ) AS EXP_VALUE\n                FROM user_log_tbl\n             )\nSELECT SELECT CARD_GACHA_COUNT,\n              STATUS_CHECK_COUNT,\n              (1 / 1 + EXP_VALUE) AS PROBABILITY_DAILY_ACTIVE\nFROM temp\n;\n\n\n\u3010\u7269\u7406\u540d\u3011PROBABILITY_DAILY_ACTIVE \n\u3010\u8ad6\u7406\u540d\u3011\u30c7\u30a4\u30ea\u30fc\u30a2\u30af\u30c6\u30a3\u30d6\u8a72\u5f53\u4e88\u6e2c\u7387\n\u3010\u7b97\u51fa\u5f0f\u3011(1 / 1 + EXPVALUE) AS PROBABILITY_DAILY_ACTIVE\n\n\u3010\u7269\u7406\u540d\u3011EXP_VALUE\n\u3010\u8ad6\u7406\u540d\u3011L\u56de\u5e30\u4e2d\u9593\u30c7\u30fc\u30bf\n\u3010\u7b97\u51fa\u5f0f\u3011\n          EXP(-\n                (CARD_GACHA_COUNT * 0.214 + STATUS_CHECK_COUNT * 0.314 +  FRIEND_ACTION_COUTNT* 0.753 + 5.091)\n             )\n\n\n\u3010 SQL\u8aac\u660e \u3011\n\n\n\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306e\u76ee\u7684\u5909\u6570\uff08\u3007\u3007\u78ba\u7387\uff09\u306f\u3001L\u56de\u5e30\u5f0f\u306e\u5b9a\u7fa9\u5f0f\u3092\u5f0f\u5909\u5f62\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u6570\u5f0f\u3067\u8868\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u3092\u3001SQL\u3067\u30af\u30a8\u30ea\u5f0f\u3068\u3057\u3066\u30d9\u30bf\u6253\u3061\u3057\u305f\u306e\u304c\u4e0a\u8a18\u306e\u30af\u30a8\u30ea\u3067\u3059\u3002\n\n1 / (1 + exp(- (\u03b2_0 + \u03b2_1x_1 + \u03b2_2x_2 + \u30fb\u30fb\u30fb))) \n\n\u203b\u4e0a\u8a18\u306e\u6570\u5f0f\u306f\u9577\u3044\u305f\u3081\u3001\u30af\u30a8\u30ea\u5185\u3067\u306f\u3001exp(-\u8aac\u660e\u5909\u6570\u306e\u6570\u5f0f \uff09\u306e\u90e8\u5206\u3092\uff11\u56de\u3001With\u53e5\u5185\u306e\u30a4\u30f3\u30e9\u30a4\u30f3\u30d3\u30e5\u30fc\u3067\u8a08\u7b97\u3057\u3066\u30ab\u30e9\u30e0\u540d\u3092\u3064\u3051\u3066\u3001\u305d\u306e\u30ab\u30e9\u30e0\u3092\u4e0a\u8a18\u306e\u6570\u5f0f\u306b\u6295\u5165\u3057\u3066\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u3002\n\nHatena Blog Thinking out loud (2013/05/12) \u300cSQL\u3067\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3092\u5b9f\u88c5\u3059\u308bTips\u300d\n\n\nSQL\u3067\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3092\u5b9f\u88c5\u3059\u308bTips\u3092\u767a\u898b\u3002\nDeep Data Mining Blog: Logistic Regression Model Implemented in SQL\nSQL\u3057\u304b\u5909\u66f4\u3067\u304d\u306a\u3044\u672c\u756a\u74b0\u5883\u3068\u3044\u3046\u80cc\u666f\u306e\u305f\u3081\u3001decode()\u3068nvl()\u3092\u7528\u3044\u3066\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3092\u5b9f\u88c5\u3001\u3068\u306e\u3053\u3068\u3002\n\n\u4e0a\u306e\u8a18\u4e8b\u3067\u5f15\u7528\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u3001\u4ee5\u4e0b\u306e\u8a18\u4e8b\n\nDeep Data Mining Blog (2013/04/07) Logistic Regression Model Implemented in SQL\n\n\nLogistic Regression Model Implemented in SQL\nIn a project, we need to deploy a logistic regression model into a production system that only takes SQL scripts as its input. Two functions come in handy, decode() and nvl(). \nDecode() converts categorical value into a weight and nvl() conveniently replaces null with a desired value. The following SQL scripts is similar to what we delivered.\n\nSQL\nselect transaction_id,\n(1/\n(1+\nexp(-(\nnvl(AMT1*.000019199,0)+\nnvl(AMT3*(-.00002155),0)+\ndecode(nvl(substr((TXN_CODE1),1,18),' '),\n'XX',-.070935,\n'57',-.192319,\n'1',-.053794,\n'81',-.010813,\n'NR',-.079628,\n'PD',-.102987,\n'P',-1.388433,\n'Z6',-.106081,\n'01',-1.1528,\n'Z4',-.004237,\n'T1',.697737,\n'AK',-.490381,\n'U2',.063712,\n'NK',.054354,\n'PR',.205336,\n'51',-.286213,\n'N',.075582,\n' ',-.330585,\n0)+\ndecode(nvl(substr( trim(TXN_CODE2),1,18),' '),\n'U',-.11176,\n0)+\ndecode(nvl(substr( trim(TXN_CODE3),1,18),' '),\n'1',-.642605,\n0)+\ndecode(nvl(substr( trim(TXN_CODE4),1,18),' '),\n'00',-.084517,\n'10',.057248,\n0)\n-6.8190776\n)\n)\n)\n) as score from tbl_data;\n\n\n\n\n\n\u3010 \u4e0a\u8a18\u306e\u8a08\u7b97\u5b9a\u7fa9\u5f0f\u306e\u5c0e\u51fa\u904e\u7a0b\uff1a\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30 \u3011\n\n\n\u5965\u6751 \u6674\u5f66\uff08\u4e09\u91cd\u5927\u5b66\u6559\u80b2\u5b66\u90e8) \u300c\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u300d\n\n\n\u901a\u5e38\u306e\u91cd\u56de\u5e30\u5206\u6790\u3067\u306f\uff0c\ny=\u03b20+\u03b21x1+\u03b22x2\ny = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2\n\n\u304c\uff08\u6700\u5c0f2\u4e57\u6cd5\u306e\u610f\u5473\u3067\uff09\u3067\u304d\u308b\u3060\u3051\u6b63\u78ba\u306b\u6210\u308a\u7acb\u3064\u3088\u3046\u306b \u03b20\uff0c\u03b21\uff0c\u03b22 \u3092\u6c42\u3081\u307e\u3059\u3002\u3057\u304b\u3057\uff0c\u5408\u5426\u306f0\u304b1\u3057\u304b\u5024\u304c\u3042\u308a\u307e\u305b\u3093\u3002\u305d\u3053\u3067\uff0c1\u3067\u3042\u308b\u78ba\u7387\u3092 \u03c0 \u3068\u66f8\u3051\u3070\uff0c\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3067\u306f\u6b21\u306e\u5f0f\u304c\uff08\u6700\u5c24\u6cd5\u306e\u610f\u5473\u3067\uff09\u3067\u304d\u308b\u3060\u3051\u6b63\u78ba\u306b\u6210\u308a\u7acb\u3064\u3088\u3046\u306a \u03b20\uff0c\u03b21\uff0c\u03b22 \u3092\u6c42\u3081\u307e\u3059\uff1a\nlog(\u03c01\u2212\u03c0)=\u03b20+\u03b21x1+\u03b22x2\n\\log\\left(\\frac{\\pi}{1-\\pi}\\right) = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2\n\n\u4e0a\u306e\u3088\u3046\u306a\u56de\u5e30\u5f0f\u306e\u5de6\u8fba\u306b\u73fe\u308c\u308b\u95a2\u6570\u3092\u30ea\u30f3\u30af\u95a2\u6570\u3068\u3044\u3044\u307e\u3059\u3002\u3053\u306e\u5834\u5408\u306e\u30ea\u30f3\u30af\u95a2\u6570\u306f\u30ed\u30b8\u30c3\u30c8\u95a2\u6570\u3068\u547c\u3070\u308c\uff0clogit(\u03c0) \u3068\u66f8\u304f\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u3061\u306a\u307f\u306b \u03c0/(1\u2212\u03c0) \u306f\u30aa\u30c3\u30ba\uff08odds\uff09\u3068\u547c\u3070\u308c\u308b\u91cf\u3067\u3059\u306e\u3067\uff0c\u30ed\u30b8\u30c3\u30c8\u95a2\u6570\u306f\u30aa\u30c3\u30ba\u306e\u5bfe\u6570\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u4e0a\u306e\u5f0f\u3092\u78ba\u7387 \u03c0 \u306b\u3064\u3044\u3066\u89e3\u3051\u3070\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a\n\u03c0=exp(\u03b20+\u03b21x1+\u03b22x2)1+exp(\u03b20+\u03b21x1+\u03b22x2)=11+exp[\u2212(\u03b20+\u03b21x1+\u03b22x2)]\n\\pi = \\frac{\\exp(\\beta_0 + \\beta_1 x_1 + \\beta_2 x_2)}{1 + \\exp(\\beta_0 + \\beta_1 x_1 + \\beta_2 x_2)} = \\frac{1}{1 + \\exp[-(\\beta_0 + \\beta_1 x_1 + \\beta_2 x_2)]}\n\n\u3053\u306e\u53f3\u8fba\u306f logit\u22121(\u03b20+\u03b21x1+\u03b22x2) \u3068\u3082\u66f8\u304d\u307e\u3059\u3002\u3053\u306e logit\u22121 \u3068\u3044\u3046\u95a2\u6570\uff08logit\u306e\u9006\u95a2\u6570\uff09\u306f\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u95a2\u6570\u3068\u547c\u3070\u308c\u308b\u3082\u306e\u306e\u4e00\u7a2e\u3067\u3059\u3002\n\n\n\n\u5965\u6751 \u6674\u5f66\uff08\u4e09\u91cd\u5927\u5b66\u6559\u80b2\u5b66\u90e8) \u300c\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u300d\n\n\n\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\n\u4e0a\u3067\u8aac\u660e\u3057\u305f\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3092\u884c\u3063\u3066\u7d50\u679c\u3092 result2 \u3068\u3044\u3046\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u4ee3\u5165\u3059\u308b\u306b\u306f\n\nR\nresult2 = glm(y ~ x1 + x2, data=data1, family=binomial(link=\"logit\"))\n\n\n\u3068\u6253\u3061\u8fbc\u307f\u307e\u3059\u3002\u7d9a\u3044\u3066\n\nR\nsummary(result2)\n\n\n\u3068\u6253\u3061\u8fbc\u3081\u3070\u6b21\u306e\u3088\u3046\u306b\u8868\u793a\u3055\u308c\u307e\u3059\uff1a\n\nR\nCall:\nglm(formula = y ~ x1 + x2, family = binomial(link = \"logit\"), \n   data = data1)\n\nDeviance Residuals: \n   Min       1Q   Median       3Q      Max  \n-1.4754  -0.8584  -0.8007   1.1905   1.5719  \n\nCoefficients:\n           Estimate Std. Error z value Pr(>|z|)\n(Intercept) -9.44589    9.12237  -1.035    0.300\nx1           1.27158    1.49423   0.851    0.395\nx2           0.06424    0.08739   0.735    0.462\n\n(Dispersion parameter for binomial family taken to be 1)\n\n   Null deviance: 13.460  on 9  degrees of freedom\nResidual deviance: 12.345  on 7  degrees of freedom\nAIC: 18.345\n\nNumber of Fisher Scoring iterations: 4\n\n\n\u3064\u307e\u308a logit(\u03c0)=\u22129.44589+1.27158x1+0.06424x2 \u3067\u4e88\u6e2c\u3055\u308c\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff08\u305f\u3060\u3057\u3069\u306e\u4fc2\u6570\u3082\u6709\u610f\u3067\u306f\u3042\u308a\u307e\u305b\u3093\uff09\u3002\n\n\u3053\u3053\u3067\u7b97\u51fa\u3057\u305f ligit(\u03c0)\u306f\u3001\n\\log\\left(\\frac{\\pi}{1-\\pi}\\right)\n\n\u3067\u3042\u308a\u3001\uff08\u5408\u683c\u3059\u308b\u78ba\u7387\uff09\uff0f\uff08\u5408\u683c\u3057\u306a\u3044\u78ba\u7387\uff09 \u3067\u5272\u3063\u305f\u6bd4\u7387\u3067\u3042\u308b\u3002\n\u5408\u683c\u78ba\u7387\u306b\u76f8\u5f53\u3059\u308b\u306e\u306f\u3001\n\\pi\n\n\u3067\u3042\u308a\u3001\n\\pi = \\mathrm{logit}^{-1}(\\beta_0 + \\beta_1 x_1 + \\beta_2 x_2) \n    = \\frac{\\exp(\\beta_0 + \\beta_1 x_1 + \\beta_2 x_2)}{1 + \\exp(\\beta_0 + \\beta_1 x_1 + \\beta_2 x_2)} = \\frac{1}{1 + \\exp[-(\\beta_0 + \\beta_1 x_1 + \\beta_2 x_2)]}\n\n\u3067\u3042\u308b\u3002\n\u5192\u982d\u3067\u306f\u3001\u4e0a\u5f0f \u6700\u53f3\u8fba\u306e\u5b9a\u7fa9\u5f0f\u3092SQL\u30d9\u30bf\u6253\u3061\u3067\u3001\u8a18\u8ff0\u3057\u307e\u3057\u305f\u3002\nR\u8a00\u8a9e\u3067\u3001\u3053\u306e $pi$ \uff08\u5408\u683c\u7387\uff09\u3092\u5f97\u308b\u306b\u306f\u3001\u53c2\u8003\u8a18\u4e8b\u306b\u3042\u308b\u3088\u3046\u306b\u3001\n\n\u307e\u305f\uff0cfitted(result2) \u3068\u6253\u3061\u8fbc\u3080\u3068\uff0c\u30d5\u30a3\u30c3\u30c8\u3055\u308c\u305f\u5024 logit\u22121(\u03b20+\u03b21x1+\u03b22x2) \u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n\u3068\u6253\u3061\u307e\u3059\u3002\n\u203b \u3053\u306e\u30e2\u30c7\u30eb\u306b\u3001\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u5f53\u3066\u306f\u3081\u3066\u3001\u5408\u683c\uff08\u4e88\u6e2c\uff09\u78ba\u7387\u3092\u7b97\u51fa\u3059\u308b\u305f\u3081\u306b\u306f\u3001predict()\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3001\n\nR\npredicted_pass_probalibility <- predict(model, new_dataset, type=\"response\")\n\n\n\u306a\u304a\u3001\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u30e2\u30c7\u30eb\u306e\u4e2d\u306e\u8907\u6570\u306e\u8aac\u660e\u5909\u6570 \u305d\u308c\u305e\u308c\u306b\u3064\u3044\u3066\u3001\u30aa\u30c3\u30ba\u6bd4\u3092\u7b97\u51fa\u3057\u305f\u3044\u5834\u5408\u306f\u3001exp(\u5404\u8aac\u660e\u5909\u6570\u306e\u4fc2\u6570) \u3067\u8a08\u7b97\u3067\u304d\u307e\u3059\u3002\n\n\u53c2\u8003 \u30b9\u30e9\u30a4\u30c9\u756a\u53f7 19 & 21 (SlideShare) horihorio\u3055\u3093 (2013/08/31) \u300c\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306e\u8003\u3048\u65b9\u30fb\u4f7f\u3044\u65b9 - TokyoR #33\u300d\n\n\n\u6295\u7a3f\u8005 Qiita\u8a18\u4e8b (2014/06/13)\u300c\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3067\u7d50\u679c\u3092\u3082\u305f\u3089\u3057\u305f\u8981\u56e0\u91cd\u8981\u5ea6 \u30e9\u30f3\u30af\u4ed8\u3051\u300d\n\n\n\u3053\u306e\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u5c5e\u6027\u9805\u76ee\u306e\u8a72\u5f53\u8005\u306f\u3001\u975e\u8a72\u5f53\u8005\u306b\u6bd4\u3079\u3066\u300e\u4f55\u500d\u300f\u3001\u751f\u5b58\u7387\u304c\u9ad8\u304b\u3063\u305f\u304b\uff1f\n\u3010\u30aa\u30c3\u30ba\u6bd4\u3011\n\u30aa\u30c3\u30ba\u6bd4\uff1a \u30aa\u30a4\u30e9\u30fc\u6570e\u306e\u4fc2\u6570coefficients\u4e57 (e^coefficients) \u304c\u30aa\u30c3\u30ba\u6bd4\n\u4fc2\u6570\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u30aa\u30d6\u30b8\u30a7\u30af\u30c8coefficient\u306b\u683c\u7d0d\n\nR\ncoefficent <- as.numeric(survival.glm$coefficients)\n\n\n1\u5217\u76ee\uff1a\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u5c5e\u6027\u9805\u76ee\u540d / 2\u5217\u76ee\uff1a\u4fc2\u6570\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc / 3\u5217\u76ee:\u30aa\u30c3\u30ba\u6bd4 \u306edataframe\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\n\u3010\u5b9a\u7fa9\u3011 \u30aa\u30a4\u30e9\u30fc\u6570e\u306e\u4fc2\u6570coefficients\u4e57 (e^coefficients) \u304c\u30aa\u30c3\u30ba\u6bd4\u3000\uff08\u30aa\u30c3\u30ba\u6bd4\u3092\u5c0f\u6570\u70b9\u4ee5\u4e0b2\u4f4d\u306b\u4e38\u3081\u308b\uff09\n\nR\nresult.odds.ratio <- data.frame(passenger.profile.element, coefficent, round(exp(as.numeric(result$coefficients[,1])), 2))\ncolnames(result.odds.ratio) <- c(\"passenger.profile.element\", \"coefficient\", \"odds.ratio\")\n\n\n\u30aa\u30c3\u30ba\u6bd4\u3092\u5927\u304d\u3044\u9806\uff08\u964d\u9806\uff09\u306b\u4e26\u3073\u304b\u3048\u308b\n\nR\norder.odds <- rev(order(result.odds.ratio$odds.ratio))\nresult.odds.ratio <- result.odds.ratio[order.odds, ]\nprint(paste(result.odds.ratiopassenger.profile.element,\"\u306e\u8a72\u5f53\u8005\u306e\u751f\u5b58\u7387\u306f\u3001\u975e\u8a72\u5f53\u8005\u306b\u6bd4\u3079\u3066\u3001\",result.odds.ratioodds.ratio, \" \u500d\u9ad8\u304b\u3063\u305f\u3068\u63a8\u5b9a\u3055\u308c\u308b\", sep=\"\"))\n\n\n\n\n\n\u3010 \u95a2\u9023\u8a18\u4e8b \u3011\n\n\n\u6295\u7a3f\u8005 Qiita\u8a18\u4e8b (2014/06/13)\u300c\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3067\u7d50\u679c\u3092\u3082\u305f\u3089\u3057\u305f\u8981\u56e0\u91cd\u8981\u5ea6 \u30e9\u30f3\u30af\u4ed8\u3051\u300d\n\u6295\u7a3f\u8005 Qiita\u8a18\u4e8b (2014/06/23)\u300cR\u3067\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30 \uff08\u3064\u3065\u304d\uff09\u3010\u30e2\u30c7\u30eb\u751f\u6210\u5f8c\u306e\u4e88\u6e2c\u529b\u691c\u8a3c\uff08\u7de8\uff09\u3011stepAIC()\u3001ROC\u66f2\u7dda\u3001NRI / IDI\u6307\u6a19\u300d\n\u6295\u7a3f\u8005 Qiita\u8a18\u4e8b (2014/07/08)\u300cR\u3067MCMC\u3092\u4f7f\u3063\u3066\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3092\u8fd1\u4f3c\u8a08\u7b97 \uff5e\u7d44\u307f\u8fbc\u307f\u30c7\u30fc\u30bf Titanic\u3092\u7528\u3044\u305f\u4f8b\u300d\nTERADATA \u300c\u30de\u30fc\u30b1\u30bf\u30fc\u306e\u305f\u3081\u306e\u30c7\u30fc\u30bf\u30de\u30a4\u30cb\u30f3\u30b0\u30fb\u30d2\u30c3\u30c1\u30cf\u30a4\u30af\u30ac\u30a4\u30c9 \u7b2c10\u56de\uff1a\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u5206\u6790\u300d\nAnimal Breeding & Genetics\u300c\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\uff1a\u300d\ngihyo.jp \u6a5f\u68b0\u5b66\u7fd2 \u306f\u3058\u3081\u3088\u3046 (2013/02/13) \u300c\u7b2c18\u56de\u3000\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u300d\n\n\n\n\uff08\u53c2\u8003\uff09\nAWS Redshift \u306e\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\u578b\u3092\u6570\u5024\u578b\u306b\u5909\u3048\u308b\u3068\u3068\u3082\u306b\u3001\u6841\u6570\u3092\u5b9f\u6570\u6841\u3001\u5c0f\u6570\u70b9\u4ee5\u4e0b\u6841\u6570\u3092\u6307\u5b9a\u3059\u308b\u306a\u3069\u3001\u9069\u5b9c\u30c7\u30fc\u30bf\u578b\u3092\u6307\u5b9a\u3059\u308b\u3002\nEXP(-\n     (CARD_GACHA_COUNT * 0.214 + STATUS_CHECK_COUNT * 0.314 +  FRIEND_ACTION_COUTNT* 0.753 + 5.091)\n   )::NUMERIC(6,3))\n\nAmazon Redshift \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u958b\u767a\u8005\u30ac\u30a4\u30c9 (API Version 2012-12-01)\n\n\nDECIMAL \u578b\u307e\u305f\u306f NUMERIC \u578b\nDECIMAL \u30c7\u30fc\u30bf\u578b\u307e\u305f\u306f NUMERIC \u30c7\u30fc\u30bf\u578b\u3092\u4f7f\u7528\u3057\u3001\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u306e\u7cbe\u5ea6\u3067\u5024\u3092\u683c\u7d0d\u3057\u307e\u3059\u3002\nDECIMAL \u30ad\u30fc\u30ef\u30fc\u30c9\u3068 NUMERIC \u30ad\u30fc\u30ef\u30fc\u30c9\u306f\u3001\u307b\u307c\u540c\u3058\u610f\u5473\u3067\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u3001\u3053\u306e\u30c7\u30fc\u30bf\u578b\u3092\u8868\u3059\u7528\u8a9e\u3068\u3057\u3066 decimal \u3092\u512a\u5148\u7684\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002numeric \u3068\u3044\u3046\u7528\u8a9e\u306f\u4e00\u822c\u7684\u306b\u6574\u6570\u300110 \u9032\u6570\u3001\u304a\u3088\u3073\u6d6e\u52d5\u5c0f\u6570\u70b9\u306e\u30c7\u30fc\u30bf\u578b\u3092\u79f0\u3059\u308b\u5834\u5408\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u30c6\u30fc\u30d6\u30eb\u5185\u306b DECIMAL \u5217\u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u3001precision \u3068 scale \u3092\u6b21\u306e\u3088\u3046\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002\n\nRedshift postgreSQL\ndecimal(precision, scale)\n\n\nprecision\n\u5024\u5168\u4f53\u3067\u306e\u6709\u52b9\u306a\u6841\u306e\u5408\u8a08\u3002\u5c0f\u6570\u70b9\u306e\u4e21\u5074\u306e\u6841\u6570\u3002\u305f\u3068\u3048\u3070\u3001\u6570\u5024 48.2891 \u306e\u5834\u5408\u306f\u7cbe\u5ea6\u304c 6\u3001\u30b9\u30b1\u30fc\u30eb\u304c 4 \u3068\u306a\u308a\u307e\u3059\u3002\n\u6307\u5b9a\u304c\u306a\u3044\u5834\u5408\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u7cbe\u5ea6\u306f 18 \u3067\u3059\u3002\u6700\u5927\u7cbe\u5ea6\u306f 38 \u3067\u3059\u3002\n\u5165\u529b\u5024\u3067\u5c0f\u6570\u70b9\u306e\u5de6\u5074\u306e\u6841\u6570\u304c\u3001\u5217\u306e\u7cbe\u5ea6\u304b\u3089\u5217\u306e\u30b9\u30b1\u30fc\u30eb\u3092\u5f15\u3044\u3066\u5f97\u3089\u308c\u305f\u6841\u6570\u3092\u8d85\u3048\u3066\u3044\u308b\u5834\u5408\u3001\u5165\u529b\u5024\u3092\u5217\u306b\u30b3\u30d4\u30fc\uff08\u307e\u305f\u306f\u633f\u5165\u3082\u66f4\u65b0\u3082\uff09\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u3053\u306e\u30eb\u30fc\u30eb\u306f\u3001\u5217\u306e\u5b9a\u7fa9\u3092\u5916\u308c\u308b\u3059\u3079\u3066\u306e\u5024\u306b\u9069\u7528\u3055\u308c\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u3001numeric(5,2) \u5217\u306e\u5024\u306e\u8a31\u5bb9\u7bc4\u56f2\u306f\u3001-999.99\uff5e999.99 \u3067\u3059\u3002\nscale\n\u5c0f\u6570\u70b9\u306e\u53f3\u5074\u306b\u4f4d\u7f6e\u3059\u308b\u3001\u5024\u306e\u5c0f\u6570\u90e8\u306b\u304a\u3051\u308b\u5c0f\u6570\u306e\u6841\u6570\u3067\u3059\u3002\n\u6574\u6570\u306e\u30b9\u30b1\u30fc\u30eb\u306f\u30bc\u30ed\u3067\u3059\u3002\u5217\u306e\u4ed5\u69d8\u3067\u306f\u3001\u30b9\u30b1\u30fc\u30eb\u5024\u306f\u7cbe\u5ea6\u5024\u4ee5\u4e0b\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u6307\u5b9a\u304c\u306a\u3051\u308c\u3070\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30b9\u30b1\u30fc\u30eb\u306f 0 \u3067\u3059\u3002\u6700\u5927\u30b9\u30b1\u30fc\u30eb\u306f 37 \u3067\u3059\u3002\n\u30c6\u30fc\u30d6\u30eb\u306b\u30ed\u30fc\u30c9\u3055\u308c\u305f\u5165\u529b\u5024\u306e\u30b9\u30b1\u30fc\u30eb\u304c\u5217\u306e\u30b9\u30b1\u30fc\u30eb\u3088\u308a\u5927\u304d\u3044\u5834\u5408\u3001\u5024\u306f\u6307\u5b9a\u3055\u308c\u305f\u30b9\u30b1\u30fc\u30eb\u306b\u4e38\u3081\u3089\u308c\u307e\u3059\u3002\nSALES \u30c6\u30fc\u30d6\u30eb\u306e PRICEPAID \u5217\u304c DECIMAL(8,2) \u5217\u3067\u3042\u308b\u5834\u5408\u3092\u4f8b\u306b\u3068\u308a\u307e\u3059\u3002DECIMAL(8,4) \u306e\u5024\u3092 PRICEPAID \u5217\u306b\u633f\u5165\u3059\u308b\u3068\u3001\u5024\u306e\u30b9\u30b1\u30fc\u30eb\u306f 2 \u306b\u4e38\u3081\u3089\u308c\u307e\u3059\u3002\n\n\n\nSQL\ncreate table user_profile_analysis AS\nWITH prediction_target_future_tbl AS (\nSELECT CREATE_TIME\n       , USER_ID\n       , DAILY_ACTIVE_FLAG AS SEIKAI\nFROM USER_ACTION_LOG  \nWHERE CREATE_TIME <= CURRENT_DATE + INTERVAL '-1 DAY'\nORDER BY RANDOM()\nLIMIT 10000\n), temp AS (\n SELECT estimation_day_tbl.CREATE_TIME,\n        prediction_target_future_tbl.CREATE_TIME AS prediction_target_date,  \n        Last_Value(estimation_day_tbl.CREATE_TIME) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as model_estimation_date, --lag\u95a2\u6570\u3067\u53d6\u5f97\u3059\u308b\u5168\u8aac\u660e\u5909\u6570\uff08\uff11\u65e5\u524d \u8aac\u660e\u5909\u6570\uff5e30\u65e5\u524d \u8aac\u660e\u5909\u6570\uff09\u306e\u5024\u304c\u3059\u3079\u3066\u683c\u7d0d\u3055\u308c\u308b\u30ec\u30b3\u30fc\u30c9\u306e\u65e5\u4ed8\uff08\uff1d\u30e2\u30c7\u30eb\u63a8\u8a08\u306b\u6295\u5165\u3059\u308b\u8aac\u660e\u5909\u6570\u306e\u767a\u751f\u65e5\uff09\n        prediction_target_future_tbl.USER_ID,\n        prediction_target_future_tbl.SEIKAI,\n        estimation_day_tbl.CARD_GACHA_COUNT,\n        estimation_day_tbl.STATUS_CHECK_COUNT\n        case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end as FRIEND_ACTION_COUTNT,\n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 1)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_1_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 2)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_2_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 3)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_3_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 4)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_4_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 5)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_5_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 6)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_6_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 7)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_7_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 1)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_8_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 2)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_9_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 3)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_10_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 4)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_11_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 5)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_12_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 6)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_13_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 7)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_14_AGO,  \n FROM  prediction_target_future_tbl JOIN USER_ACTION_LOG AS estimation_day_tbl\n ON  prediction_target_future_tbl.USER_ID = estimation_day_tbl.USER_ID\n     AND estimation_day_tbl.CREATE_TIME BETWEEN ( prediction_target_future_tbl.CREATE_TIME + interval '-45 day') AND ( prediction_target_future_tbl.CREATE_TIME + interval '-31 day') --lag()\u3067\uff11\u65e5\u524d\u306e\u30ab\u30e9\u30e0\u5024\uff5e14\u65e5\u524d\u306e\u30ab\u30e9\u30e0\u5024\u307e\u3067\u3001\u53d6\u5f97\u3059\u308b\u305f\u3081\u300114\u65e5\u5206\u306e\u30ec\u30b3\u30fc\u30c9\u3092from\u53e5\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u683c\u7d0d\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n ORDER BY  prediction_target_future_tbl.USER_ID, estimation_day_tbl.CREATE_TIME\n), temp_2 AS (SELECT *,\n          (10.5*FRIEND_ACTION_COUTNT_1_AGO + 3.2*FRIEND_ACTION_COUTNT_2_AGO + 2.1*FRIEND_ACTION_COUTNT_3_AGO  + 0.5*FRIEND_ACTION_COUTNT_4_AGO + 0.3*FRIEND_ACTION_COUTNT_5_AGO    --\u2606\u2606\u2606\u2606\u2606\uff01\u3053\u3053\u3092\u8ffd\u52a0\uff01\u2606\u2606\u2606\u2606\u2606\n           + 0.2*FRIEND_ACTION_COUTNT_6_AGO + 12.3*FRIEND_ACTION_COUTNT_7_AGO + 20.4*FRIEND_ACTION_COUTNT_8_AGO + 2.9*FRIEND_ACTION_COUTNT_9_AGO + 1.2*FRIEND_ACTION_COUTNT_10_AGO --\u2606\u2606\u2606\u2606\u2606\uff01\u3053\u3053\u3092\u8ffd\u52a0\uff01\u2606\u2606\u2606\u2606\u2606\n           + 0.01*FRIEND_ACTION_COUTNT_11_AGO + 0.35*FRIEND_ACTION_COUTNT_12_AGO + 0.22*FRIEND_ACTION_COUTNT_13_AGO + 12.3*FRIEND_ACTION_COUTNT_14_AGO) as score                 --\u2606\u2606\u2606\u2606\u2606\uff01\u3053\u3053\u3092\u8ffd\u52a0\uff01\u2606\u2606\u2606\u2606\u2606\n  from temp\n  where CREATE_TIME = model_estimation_date  --\u3053\u3053\u304c\u5927\u4e8b\uff01\n  order by user_id, model_estimation_date --\u4e26\u3073\u66ff\u3048\u5217\u3092\u3001CREATE_TIME \u304b\u3089 model_estimation_date \u306b\u5909\u66f4\n), temp_3 AS (SELECT model_estimation_date, \n                     PREDICTION_TARGET_DATE,\n                     USER_ID,\n                     CARD_GACHA_COUNT,\n                     STATUS_CHECK_COUNT,\n                     FRIEND_ACTION_COUTNT,\n                     SCORE,\n                     EXP(-\n                        (SCORE * 12.579 + CARD_GACHA_COUNT * 0.214 + STATUS_CHECK_COUNT * 0.314 +  FRIEND_ACTION_COUTNT* 0.753 + 5.091)\n                        ) AS EXP_VALUE\n              FROM temp_2\n) SELECT SELECT *,\n                (1 / 1 + EXP_VALUE) AS PROBABILITY_DAILY_ACTIVE\nFROM temp_3\n;\n\n\n\n\u539f\u56e0\u4e0d\u660e\u3060\u304c\u3001\u3068\u3053\u308d\u3069\u3053\u308d\u3001\u91cd\u8907\u30ec\u30b3\u30fc\u30c9\u304c\uff12\u4ef6\u4ee5\u4e0a\u767a\u751f\u3057\u3066\u3057\u307e\u3046\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001 PROBABILITY_DAILY_ACTIVE \u3092\u7b97\u51fa\u3059\u308b\u4e3b\u554f\u3044\u5408\u308f\u305b\u6587\u3092\u3001, temp_4 \u3067with\u53e5\u3067\u30a4\u30f3\u30e9\u30a4\u30f3\u30fb\u30d3\u30e5\u30fc\u306b\u3057\u3066\u3001temp_4\u3069\u3046\u3057\u3092 union \u3055\u305b\u3066\u91cd\u8907\u884c\u30921\u30ec\u30b3\u30fc\u30c9\u306b\u7d5e\u308b\n\n\nSQL\n, temp_3 AS (SELECT model_estimation_date, \n                     PREDICTION_TARGET_DATE,\n                     USER_ID,\n                     CARD_GACHA_COUNT,\n                     STATUS_CHECK_COUNT,\n                     FRIEND_ACTION_COUTNT,\n                     SCORE,\n                     EXP(-\n                        (SCORE * 12.579 + CARD_GACHA_COUNT * 0.214 + STATUS_CHECK_COUNT * 0.314 +  FRIEND_ACTION_COUTNT* 0.753 + 5.091)\n                        ) AS EXP_VALUE\n              FROM temp_2\n), temp_4 AS (SELECT SELECT *,\n                (1 / 1 + EXP_VALUE) AS PROBABILITY_DAILY_ACTIVE\n              FROM temp_3\n) (select *\n   from temp_4)\n   UNION\n  (select *\n   from temp_4)\n;\n\n\n\n\n\u5168\u30e6\u30fc\u30b6\u30fb\u30c7\u30fc\u30bf\u5168\u671f\u9593\u306b\u5bfe\u3057\u3066\u3001\u63a8\u8a08\u3057\u305f\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3092\u904e\u53bb\u9061\u53ca\u7684\u306b\u9069\u7528\u3057\u3066\u3001\uff08\u904e\u53bb\u306b\u3053\u306eL\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u5b9f\u884c\u3057\u3066\u3044\u305f\u3089\u3048\u3089\u308c\u305f\u306f\u305a\u306e\uff09\u4e88\u6e2c\u5024\u3092\u53d6\u5f97\u3057\u305f\u3044\u5834\u5408\n\n\u203b\u300cSQL\u5b9f\u884c\u65e5\u524d\u65e5 \u304b\u3089 30\u65e5\u524d\u300d\u306e\u8aac\u660e\u5909\u6570\u30c7\u30fc\u30bf\u3067\u3001\u300c\u305d\u306e30\u65e5\u5f8c\uff08\uff1dSQL\u5b9f\u884c\u65e5\u524d\u65e5\uff09\u300d\u306e\u30a2\u30af\u30c6\u30a3\u30d6\u7387\u3092\u4e88\u6e2c\u3059\u308b\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3001\u904e\u53bb\u9061\u53ca\u3057\u3066\u9069\u7528\u3059\u308b\u306e\u306f\u53b3\u5bc6\u306b\u306f\u6b63\u3057\u304f\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\n\n\ntemp_2\u30c6\u30fc\u30d6\u30eb\u5185\u306e where c_check_date = model_estimation_date \u3092\u5916\u3059\u3002\n\u30e2\u30c7\u30eb\u63a8\u8a08\u65e5\u30ab\u30e9\u30e0\u306f\u3001estimation_day_tbl \u306e CREATE_TIME \u306b\u5909\u66f4\u3059\u308b\n\n\nSQL\ncreate table user_profile_analysis AS\nWITH prediction_target_future_tbl AS (\nSELECT CREATE_TIME\n       , USER_ID\n       -- , DAILY_ACTIVE_FLAG AS SEIKAI  \u2606\u2606\u2606\u30e2\u30c7\u30eb\u63a8\u8a08\u306f\u3082\u3046\u7d42\u308f\u3063\u305f\u306e\u3067\u3001\u63a8\u8a08\u65e5\u306e30\u65e5\u5f8c\u306e\u6b63\u89e3\u30ab\u30e9\u30e0\u306f\u53d6\u5f97\u3057\u306a\u3044\nFROM USER_ACTION_LOG  \nWHERE CREATE_TIME <= CURRENT_DATE + INTERVAL '-1 DAY'\nORDER BY RANDOM()\nLIMIT 10000\n), temp AS (\n SELECT estimation_day_tbl.CREATE_TIME,\n        prediction_target_future_tbl.CREATE_TIME AS prediction_target_date,  \n       -- Last_Value(estimation_day_tbl.CREATE_TIME) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as model_estimation_date, --\uff08\u524a\u9664\uff09\n        prediction_target_future_tbl.USER_ID, \n       -- prediction_target_future_tbl.SEIKAI, \u2606\u2606\u2606\u30e2\u30c7\u30eb\u63a8\u8a08\u306f\u3082\u3046\u7d42\u308f\u3063\u305f\u306e\u3067\u3001\u63a8\u8a08\u65e5\u306e30\u65e5\u5f8c\u306e\u6b63\u89e3\u30ab\u30e9\u30e0\u306f\u53d6\u5f97\u3057\u306a\u3044\n        estimation_day_tbl.CARD_GACHA_COUNT,\n        estimation_day_tbl.STATUS_CHECK_COUNT\n        case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end as FRIEND_ACTION_COUTNT,\n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 1)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_1_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 2)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_2_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 3)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_3_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 4)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_4_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 5)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_5_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 6)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_6_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 7)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_7_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 1)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_8_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 2)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_9_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 3)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_10_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 4)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_11_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 5)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_12_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 6)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_13_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 7)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_14_AGO,  \n FROM  prediction_target_future_tbl JOIN USER_ACTION_LOG AS estimation_day_tbl\n ON  prediction_target_future_tbl.USER_ID = estimation_day_tbl.USER_ID\n     AND estimation_day_tbl.CREATE_TIME BETWEEN ( prediction_target_future_tbl.CREATE_TIME + interval '-45 day') AND ( prediction_target_future_tbl.CREATE_TIME + interval '-31 day') --lag()\u3067\uff11\u65e5\u524d\u306e\u30ab\u30e9\u30e0\u5024\uff5e14\u65e5\u524d\u306e\u30ab\u30e9\u30e0\u5024\u307e\u3067\u3001\u53d6\u5f97\u3059\u308b\u305f\u3081\u300114\u65e5\u5206\u306e\u30ec\u30b3\u30fc\u30c9\u3092from\u53e5\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u683c\u7d0d\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n ORDER BY  prediction_target_future_tbl.USER_ID, estimation_day_tbl.CREATE_TIME\n), temp_2 AS (SELECT *,\n          (10.5*FRIEND_ACTION_COUTNT_1_AGO + 3.2*FRIEND_ACTION_COUTNT_2_AGO + 2.1*FRIEND_ACTION_COUTNT_3_AGO  + 0.5*FRIEND_ACTION_COUTNT_4_AGO + 0.3*FRIEND_ACTION_COUTNT_5_AGO    \n           + 0.2*FRIEND_ACTION_COUTNT_6_AGO + 12.3*FRIEND_ACTION_COUTNT_7_AGO + 20.4*FRIEND_ACTION_COUTNT_8_AGO + 2.9*FRIEND_ACTION_COUTNT_9_AGO + 1.2*FRIEND_ACTION_COUTNT_10_AGO \n           + 0.01*FRIEND_ACTION_COUTNT_11_AGO + 0.35*FRIEND_ACTION_COUTNT_12_AGO + 0.22*FRIEND_ACTION_COUTNT_13_AGO + 12.3*FRIEND_ACTION_COUTNT_14_AGO) as score                 \n  from temp\n  -- where CREATE_TIME = model_estimation_date  --\u2606\u2606\u2606\u2606\u3053\u3053\u3092\u524a\u9664\uff01\n  order by user_id, create_time --\u4e26\u3073\u66ff\u3048\u5217\u3092\u3001model_estimation_date \u304b\u3089 create_time \u306b\u5909\u66f4\n), temp_3 AS (SELECT CREATE_TIME AS model_estimation_date --\u2606\u2606\u2606\u2606  estimation_day_tbl \u306e CREATE_TIME \u306b  model_estimation_date \u306e\u5217\u5225\u540d\u3064\u3051\u308b\n                  -- model_estimation_date, \u2606\u2606\u524a\u9664\uff08\u3053\u306e\u65e5\u4ed8\u306f\u3001\u3064\u306d\u306bSQL\u5b9f\u884c\u65e5\u306e\u524d\u65e5\u306e\u65e5\u4ed8\uff09\n                     PREDICTION_TARGET_DATE,\n                     USER_ID,\n                     CARD_GACHA_COUNT,\n                     STATUS_CHECK_COUNT,\n                     FRIEND_ACTION_COUTNT,\n                     SCORE,\n                     EXP(-\n                        (SCORE * 12.579 + CARD_GACHA_COUNT * 0.214 + STATUS_CHECK_COUNT * 0.314 +  FRIEND_ACTION_COUTNT* 0.753 + 5.091)\n                        ) AS EXP_VALUE\n              FROM temp_2\n), temp_4 AS (SELECT SELECT *,\n                (1 / 1 + EXP_VALUE) AS PROBABILITY_DAILY_ACTIVE\n              FROM temp_3\n) (select *\n   from temp_4\n   order by model_estimation_date, user_id)\n   UNION\n  (select *\n   from temp_4\n   order by model_estimation_date, user_id)\n;\n\n\n\n### __\u524d\u56de\u306e\u8a18\u4e8b\u3067\u306f\u3001\u4ee5\u4e0b\u306e\u8ab2\u984c\u8a2d\u5b9a\u3067\u3001\u30e6\u30fc\u30b6\u304c30\u65e5\u5f8c\u306b\u30c7\u30a4\u30ea\u30fc\u30fb\u30a2\u30af\u30c6\u30a3\u30d6\u30fb\u30e6\u30fc\u30b6\u3067\u3042\u308b\u78ba\u7387\uff08\u5024\u57df\uff1a0\uff5e1\uff09\u3092\u76ee\u7684\u5909\u6570\u306b\u3068\u3063\u305f\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u30e2\u30c7\u30eb\u306e\u4fc2\u6570\u3092\u63a8\u8a08\u3057\u307e\u3057\u305f\u3002__\n\n___\n\n\u3010\u6b63\u89e3\u30c7\u30fc\u30bf\u3011L\u56de\u5e30\u306e\u76ee\u7684\u5909\u6570\n 30\u65e5\u5f8c\u306e DAILY_ACTIVE_FLAG \u30ab\u30e9\u30e0\u306e\u5024 (1 or 0)\n\n\u3010\u8aac\u660e\u5909\u6570\u3011\n\u203b\u5404\u7a2e\u8abf\u67fb\u306e\u7d50\u679c\u3001\u624b\u6301\u3061\u306e\u4eee\u8aac\u306f\u4ee5\u4e0b\u3067\u3042\u308b\u3002\n\n(1) \u3042\u308b\u65e5\u306e\u30ab\u30fc\u30c9\u30fb\u30ac\u30c1\u30e3\u5f15\u3044\u305f\u5408\u8a08\u56de\u6570\uff08\u6709\u511f\u3001\u7121\u511f\u5408\u8a08\uff09CARD_GACHA_COUNT\n(2) \u3042\u308b\u65e5\u306e\u81ea\u5df1\u30b9\u30c6\u30fc\u30bf\u30b9\uff08\u4f53\u529b\u3001\u30e6\u30fc\u30b6\u4e2d\u306e\u76f8\u5bfe\u9806\u4f4d\u3001\u6240\u5c5e\u540c\u76df\u30fb\u9023\u5408\u30c1\u30fc\u30e0\u5168\u4f53\u306e\u72b6\u6cc1\u3001\u4fdd\u6709\u30ab\u30fc\u30c9\u6570\u306a\u3069\uff09\u95b2\u89a7\u753b\u9762\u30a2\u30af\u30bb\u30b9\u56de\u6570 STATUS_CHECK_COUNT\n(3) \u3042\u308b\u65e5\u306b\u3001\u9023\u5408\u4ef2\u9593\u3001\u540c\u76df\u4ef2\u9593\u3068\u30a2\u30a4\u30c6\u30e0\u4ea4\u63db\u3001\u6fc0\u52b1\u30a2\u30af\u30b7\u30e7\u30f3\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u4ea4\u63db\u306a\u3069\u3092\u884c\u3063\u305f\u56de\u6570FRIEND_ACTION_COUTNT\n\n___\n\n\n### __\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3092\u63a8\u8a08\u3057\u305f\u7d50\u679c\u3001\u30e6\u30fc\u30b6\u30fc\u30a2\u30af\u30c6\u30a3\u30d6\u78ba\u7387\u3092\u8aac\u660e\u3059\u308b\u8aac\u660e\u5909\u6570\u306e\u5404\u4fc2\u6570\u306f\u3001\u4ee5\u4e0b\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u3068\u3057\u307e\u3059\u3002__\n\n___\n\nlog( pi / (1-pi) ) =  (CARD_GACHA_COUNT * 0.214 + STATUS_CHECK_COUNT * 0.314 +  FRIEND_ACTION_COUTNT* 0.753 + 5.091)\n\n___\n\n### __\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001\u4e0a\u8a18\u306e\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u30e2\u30c7\u30eb\u3092\uff08AWS Redshift\u306a\u3069\u306e\u74b0\u5883\u3067\u3001\u65e5\u6b21\u30d0\u30c3\u30c1\u51e6\u7406\u306a\u3069\u3067\uff09\u5b9a\u6642\u5b9f\u884c\u3055\u308c\u308b \u30eb\u30fc\u30c1\u30f3 SQL \u306b \u30d9\u30bf\u6253\u3061\u3057\u3066\u3001\u6bce\u65e5\u3001\u5168\u30e6\u30fc\u30b6\u306e\u300c30\u65e5\u5f8c\u306e\u30c7\u30a4\u30ea\u30fc\u30fb\u30a2\u30af\u30c6\u30a3\u30d6 \u78ba\u7387\u300d\u304c DB\u5185\u306e\u30ab\u30e9\u30e0\u306b\u683c\u7d0d\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u304d\u307e\u3059\u3002__\n\n___\n\n## __\u3010 SQL \u3011__\n\n```{SQL:SQL}\nCREATE TABLE uu_profile_analysis_tbl AS\nWith temp AS (\n\t\t\t\tSELECT CARD_GACHA_COUNT,\n       \t\t\tSTATUS_CHECK_COUNT,\n       \t\t\tEXP(-\n                \t\t(CARD_GACHA_COUNT * 0.214 + STATUS_CHECK_COUNT * 0.314 +  FRIEND_ACTION_COUTNT* 0.753 + 5.091)\n          \t\t) AS EXP_VALUE\n                FROM user_log_tbl\n             )\nSELECT SELECT CARD_GACHA_COUNT,\n       \t\t  STATUS_CHECK_COUNT,\n              (1 / 1 + EXP_VALUE) AS PROBABILITY_DAILY_ACTIVE\nFROM temp\n;\n```\n\n\u3010\u7269\u7406\u540d\u3011PROBABILITY_DAILY_ACTIVE \n\u3010\u8ad6\u7406\u540d\u3011\u30c7\u30a4\u30ea\u30fc\u30a2\u30af\u30c6\u30a3\u30d6\u8a72\u5f53_\u4e88\u6e2c\u7387\n\u3010\u7b97\u51fa\u5f0f\u3011(1 / 1 + EXP_VALUE) AS PROBABILITY_DAILY_ACTIVE\n\n___\n\n\u3010\u7269\u7406\u540d\u3011EXP_VALUE\n\u3010\u8ad6\u7406\u540d\u3011L\u56de\u5e30\u4e2d\u9593\u30c7\u30fc\u30bf\n\u3010\u7b97\u51fa\u5f0f\u3011\n          EXP(-\n                (CARD_GACHA_COUNT * 0.214 + STATUS_CHECK_COUNT * 0.314 +  FRIEND_ACTION_COUTNT* 0.753 + 5.091)\n             )\n\n___\n\n## __\u3010 SQL\u8aac\u660e \u3011__\n\n####__\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306e\u76ee\u7684\u5909\u6570\uff08\u3007\u3007\u78ba\u7387\uff09\u306f\u3001L\u56de\u5e30\u5f0f\u306e\u5b9a\u7fa9\u5f0f\u3092\u5f0f\u5909\u5f62\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u6570\u5f0f\u3067\u8868\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u3092\u3001SQL\u3067\u30af\u30a8\u30ea\u5f0f\u3068\u3057\u3066\u30d9\u30bf\u6253\u3061\u3057\u305f\u306e\u304c\u4e0a\u8a18\u306e\u30af\u30a8\u30ea\u3067\u3059\u3002__\n\n```{math}\n1 / (1 + exp(- (\u03b2_0 + \u03b2_1x_1 + \u03b2_2x_2 + \u30fb\u30fb\u30fb))) \n```\n\n\u203b\u4e0a\u8a18\u306e\u6570\u5f0f\u306f\u9577\u3044\u305f\u3081\u3001\u30af\u30a8\u30ea\u5185\u3067\u306f\u3001exp(-\u8aac\u660e\u5909\u6570\u306e\u6570\u5f0f \uff09\u306e\u90e8\u5206\u3092\uff11\u56de\u3001With\u53e5\u5185\u306e\u30a4\u30f3\u30e9\u30a4\u30f3\u30d3\u30e5\u30fc\u3067\u8a08\u7b97\u3057\u3066\u30ab\u30e9\u30e0\u540d\u3092\u3064\u3051\u3066\u3001\u305d\u306e\u30ab\u30e9\u30e0\u3092\u4e0a\u8a18\u306e\u6570\u5f0f\u306b\u6295\u5165\u3057\u3066\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u3002\n\n#### [Hatena Blog Thinking out loud (2013/05/12) \u300cSQL\u3067\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3092\u5b9f\u88c5\u3059\u308bTips\u300d](http://alcuin.hatenablog.com/entry/2013/05/12/081137)\n\n>__SQL\u3067\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3092\u5b9f\u88c5\u3059\u308bTips\u3092\u767a\u898b\u3002__\n>\n>_Deep Data Mining Blog: Logistic Regression Model Implemented in SQL_\n>\n>SQL\u3057\u304b\u5909\u66f4\u3067\u304d\u306a\u3044\u672c\u756a\u74b0\u5883\u3068\u3044\u3046\u80cc\u666f\u306e\u305f\u3081\u3001decode()\u3068nvl()\u3092\u7528\u3044\u3066\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3092\u5b9f\u88c5\u3001\u3068\u306e\u3053\u3068\u3002\n\n__\u4e0a\u306e\u8a18\u4e8b\u3067\u5f15\u7528\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u3001\u4ee5\u4e0b\u306e\u8a18\u4e8b__\n\n#### [Deep Data Mining Blog (2013/04/07) _Logistic Regression Model Implemented in SQL_](http://www.deep-data-mining.com/2013/04/logistic-regression-model-implemented.html)\n\n> __Logistic Regression Model Implemented in SQL__\n>\n> In a project, we need to deploy a logistic regression model into a production system that only takes SQL scripts as its input. Two functions come in handy, decode() and nvl(). \n>\n> Decode() converts categorical value into a weight and nvl() conveniently replaces null with a desired value. The following SQL scripts is similar to what we delivered.\n>\n>\n>```{SQL:SQL}\n>select transaction_id,\n(1/\n(1+\nexp(-(\nnvl(AMT1*.000019199,0)+\nnvl(AMT3*(-.00002155),0)+\ndecode(nvl(substr((TXN_CODE1),1,18),' '),\n'XX',-.070935,\n'57',-.192319,\n'1',-.053794,\n'81',-.010813,\n'NR',-.079628,\n'PD',-.102987,\n'P',-1.388433,\n'Z6',-.106081,\n'01',-1.1528,\n'Z4',-.004237,\n'T1',.697737,\n'AK',-.490381,\n'U2',.063712,\n'NK',.054354,\n'PR',.205336,\n'51',-.286213,\n'N',.075582,\n' ',-.330585,\n0)+\ndecode(nvl(substr( trim(TXN_CODE2),1,18),' '),\n'U',-.11176,\n0)+\ndecode(nvl(substr( trim(TXN_CODE3),1,18),' '),\n'1',-.642605,\n0)+\ndecode(nvl(substr( trim(TXN_CODE4),1,18),' '),\n'00',-.084517,\n'10',.057248,\n0)\n-6.8190776\n)\n)\n)\n) as score from tbl_data;\n>```\n___\n\n## __\u3010 \u4e0a\u8a18\u306e\u8a08\u7b97\u5b9a\u7fa9\u5f0f\u306e\u5c0e\u51fa\u904e\u7a0b\uff1a\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30 \u3011__\n\n\n#### [\u5965\u6751 \u6674\u5f66\uff08\u4e09\u91cd\u5927\u5b66\u6559\u80b2\u5b66\u90e8) \u300c\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u300d](http://oku.edu.mie-u.ac.jp/~okumura/stat/logistic.html)\n\n>\u901a\u5e38\u306e\u91cd\u56de\u5e30\u5206\u6790\u3067\u306f\uff0c\n>\n>y=\u03b20+\u03b21x1+\u03b22x2\n>\n>```{math}\n>y = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2\n>```\n>\u304c\uff08\u6700\u5c0f2\u4e57\u6cd5\u306e\u610f\u5473\u3067\uff09\u3067\u304d\u308b\u3060\u3051\u6b63\u78ba\u306b\u6210\u308a\u7acb\u3064\u3088\u3046\u306b \u03b20\uff0c\u03b21\uff0c\u03b22 \u3092\u6c42\u3081\u307e\u3059\u3002\u3057\u304b\u3057\uff0c\u5408\u5426\u306f0\u304b1\u3057\u304b\u5024\u304c\u3042\u308a\u307e\u305b\u3093\u3002\u305d\u3053\u3067\uff0c1\u3067\u3042\u308b\u78ba\u7387\u3092 \u03c0 \u3068\u66f8\u3051\u3070\uff0c\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3067\u306f\u6b21\u306e\u5f0f\u304c\uff08\u6700\u5c24\u6cd5\u306e\u610f\u5473\u3067\uff09\u3067\u304d\u308b\u3060\u3051\u6b63\u78ba\u306b\u6210\u308a\u7acb\u3064\u3088\u3046\u306a \u03b20\uff0c\u03b21\uff0c\u03b22 \u3092\u6c42\u3081\u307e\u3059\uff1a\n>\n>log(\u03c01\u2212\u03c0)=\u03b20+\u03b21x1+\u03b22x2\n>\n>```{math}\n>\\log\\left(\\frac{\\pi}{1-\\pi}\\right) = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2\n>```\n>\n> \u4e0a\u306e\u3088\u3046\u306a\u56de\u5e30\u5f0f\u306e\u5de6\u8fba\u306b\u73fe\u308c\u308b\u95a2\u6570\u3092\u30ea\u30f3\u30af\u95a2\u6570\u3068\u3044\u3044\u307e\u3059\u3002\u3053\u306e\u5834\u5408\u306e\u30ea\u30f3\u30af\u95a2\u6570\u306f\u30ed\u30b8\u30c3\u30c8\u95a2\u6570\u3068\u547c\u3070\u308c\uff0clogit(\u03c0) \u3068\u66f8\u304f\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u3061\u306a\u307f\u306b \u03c0/(1\u2212\u03c0) \u306f\u30aa\u30c3\u30ba\uff08odds\uff09\u3068\u547c\u3070\u308c\u308b\u91cf\u3067\u3059\u306e\u3067\uff0c\u30ed\u30b8\u30c3\u30c8\u95a2\u6570\u306f\u30aa\u30c3\u30ba\u306e\u5bfe\u6570\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n>\n> \u4e0a\u306e\u5f0f\u3092\u78ba\u7387 \u03c0 \u306b\u3064\u3044\u3066\u89e3\u3051\u3070\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a\n>\n> \u03c0=exp(\u03b20+\u03b21x1+\u03b22x2)1+exp(\u03b20+\u03b21x1+\u03b22x2)=11+exp[\u2212(\u03b20+\u03b21x1+\u03b22x2)]\n>\n>```{math}\n> \\pi = \\frac{\\exp(\\beta_0 + \\beta_1 x_1 + \\beta_2 x_2)}{1 + \\exp(\\beta_0 + \\beta_1 x_1 + \\beta_2 x_2)} = \\frac{1}{1 + \\exp[-(\\beta_0 + \\beta_1 x_1 + \\beta_2 x_2)]}\n>```\n\n> \u3053\u306e\u53f3\u8fba\u306f logit\u22121(\u03b20+\u03b21x1+\u03b22x2) \u3068\u3082\u66f8\u304d\u307e\u3059\u3002\u3053\u306e logit\u22121 \u3068\u3044\u3046\u95a2\u6570\uff08logit\u306e\u9006\u95a2\u6570\uff09\u306f\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u95a2\u6570\u3068\u547c\u3070\u308c\u308b\u3082\u306e\u306e\u4e00\u7a2e\u3067\u3059\u3002\n\n\n___\n\n#### [\u5965\u6751 \u6674\u5f66\uff08\u4e09\u91cd\u5927\u5b66\u6559\u80b2\u5b66\u90e8) \u300c\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u300d](http://oku.edu.mie-u.ac.jp/~okumura/stat/logistic.html)\n\n> __\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30__\n>\n>\u4e0a\u3067\u8aac\u660e\u3057\u305f\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3092\u884c\u3063\u3066\u7d50\u679c\u3092 result2 \u3068\u3044\u3046\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u4ee3\u5165\u3059\u308b\u306b\u306f\n>\n>```{R:R}\n>result2 = glm(y ~ x1 + x2, data=data1, family=binomial(link=\"logit\"))\n>```\n>\n>\u3068\u6253\u3061\u8fbc\u307f\u307e\u3059\u3002\u7d9a\u3044\u3066\n>\n>```{R:R}\nsummary(result2)\n>```\n>\n>\u3068\u6253\u3061\u8fbc\u3081\u3070\u6b21\u306e\u3088\u3046\u306b\u8868\u793a\u3055\u308c\u307e\u3059\uff1a\n>\n>```{R:R}\n>Call:\n>glm(formula = y ~ x1 + x2, family = binomial(link = \"logit\"), \n>    data = data1)\n>\n>Deviance Residuals: \n>    Min       1Q   Median       3Q      Max  \n>-1.4754  -0.8584  -0.8007   1.1905   1.5719  \n>\n>Coefficients:\n>            Estimate Std. Error z value Pr(>|z|)\n>(Intercept) -9.44589    9.12237  -1.035    0.300\n>x1           1.27158    1.49423   0.851    0.395\n>x2           0.06424    0.08739   0.735    0.462\n>\n>(Dispersion parameter for binomial family taken to be 1)\n>\n>    Null deviance: 13.460  on 9  degrees of freedom\n> Residual deviance: 12.345  on 7  degrees of freedom\n> AIC: 18.345\n>\n> Number of Fisher Scoring iterations: 4\n>```\n>\n>\u3064\u307e\u308a logit(\u03c0)=\u22129.44589+1.27158x1+0.06424x2 \u3067\u4e88\u6e2c\u3055\u308c\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff08\u305f\u3060\u3057\u3069\u306e\u4fc2\u6570\u3082\u6709\u610f\u3067\u306f\u3042\u308a\u307e\u305b\u3093\uff09\u3002\n\n\u3053\u3053\u3067\u7b97\u51fa\u3057\u305f ligit(\u03c0)\u306f\u3001\n\n```{math}\n\\log\\left(\\frac{\\pi}{1-\\pi}\\right)\n```\n\n\u3067\u3042\u308a\u3001\uff08\u5408\u683c\u3059\u308b\u78ba\u7387\uff09\uff0f\uff08\u5408\u683c\u3057\u306a\u3044\u78ba\u7387\uff09 \u3067\u5272\u3063\u305f\u6bd4\u7387\u3067\u3042\u308b\u3002\n\n\u5408\u683c\u78ba\u7387\u306b\u76f8\u5f53\u3059\u308b\u306e\u306f\u3001\n\n```{math}\n\\pi\n```\n\n\u3067\u3042\u308a\u3001\n\n```{math}\n\\pi = \\mathrm{logit}^{-1}(\\beta_0 + \\beta_1 x_1 + \\beta_2 x_2) \n    = \\frac{\\exp(\\beta_0 + \\beta_1 x_1 + \\beta_2 x_2)}{1 + \\exp(\\beta_0 + \\beta_1 x_1 + \\beta_2 x_2)} = \\frac{1}{1 + \\exp[-(\\beta_0 + \\beta_1 x_1 + \\beta_2 x_2)]}\n```\n\n\u3067\u3042\u308b\u3002\n\n\u5192\u982d\u3067\u306f\u3001\u4e0a\u5f0f \u6700\u53f3\u8fba\u306e\u5b9a\u7fa9\u5f0f\u3092SQL\u30d9\u30bf\u6253\u3061\u3067\u3001\u8a18\u8ff0\u3057\u307e\u3057\u305f\u3002\n\nR\u8a00\u8a9e\u3067\u3001\u3053\u306e $pi$ \uff08\u5408\u683c\u7387\uff09\u3092\u5f97\u308b\u306b\u306f\u3001\u53c2\u8003\u8a18\u4e8b\u306b\u3042\u308b\u3088\u3046\u306b\u3001\n\n\n> \u307e\u305f\uff0cfitted(result2) \u3068\u6253\u3061\u8fbc\u3080\u3068\uff0c\u30d5\u30a3\u30c3\u30c8\u3055\u308c\u305f\u5024 logit\u22121(\u03b20+\u03b21x1+\u03b22x2) \u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n\u3068\u6253\u3061\u307e\u3059\u3002\n\n\u203b \u3053\u306e\u30e2\u30c7\u30eb\u306b\u3001\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u5f53\u3066\u306f\u3081\u3066\u3001\u5408\u683c\uff08\u4e88\u6e2c\uff09\u78ba\u7387\u3092\u7b97\u51fa\u3059\u308b\u305f\u3081\u306b\u306f\u3001predict()\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3001\n\n```{R:R}\npredicted_pass_probalibility <- predict(model, new_dataset, type=\"response\")\n```\n\n\n\u306a\u304a\u3001\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u30e2\u30c7\u30eb\u306e\u4e2d\u306e\u8907\u6570\u306e\u8aac\u660e\u5909\u6570 \u305d\u308c\u305e\u308c\u306b\u3064\u3044\u3066\u3001\u30aa\u30c3\u30ba\u6bd4\u3092\u7b97\u51fa\u3057\u305f\u3044\u5834\u5408\u306f\u3001exp(\u5404\u8aac\u660e\u5909\u6570\u306e\u4fc2\u6570) \u3067\u8a08\u7b97\u3067\u304d\u307e\u3059\u3002\n\n#### [\u53c2\u8003 \u30b9\u30e9\u30a4\u30c9\u756a\u53f7 19 & 21 (SlideShare) horihorio\u3055\u3093 (2013/08/31) \u300c\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306e\u8003\u3048\u65b9\u30fb\u4f7f\u3044\u65b9 - TokyoR #33\u300d](http://www.slideshare.net/horihorio/tokyo-r33-logi)\n\n####  [\u6295\u7a3f\u8005 Qiita\u8a18\u4e8b (2014/06/13)\u300c\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3067\u7d50\u679c\u3092\u3082\u305f\u3089\u3057\u305f\u8981\u56e0\u91cd\u8981\u5ea6 \u30e9\u30f3\u30af\u4ed8\u3051\u300d](http://qiita.com/HirofumiYashima/items/69bc79e72cb85e24fd0e)\n\n> \u3053\u306e\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u5c5e\u6027\u9805\u76ee\u306e\u8a72\u5f53\u8005\u306f\u3001\u975e\u8a72\u5f53\u8005\u306b\u6bd4\u3079\u3066\u300e\u4f55\u500d\u300f\u3001\u751f\u5b58\u7387\u304c\u9ad8\u304b\u3063\u305f\u304b\uff1f\n>\n>\u3010\u30aa\u30c3\u30ba\u6bd4\u3011\n>\u30aa\u30c3\u30ba\u6bd4\uff1a \u30aa\u30a4\u30e9\u30fc\u6570e\u306e\u4fc2\u6570coefficients\u4e57 (e^coefficients) \u304c\u30aa\u30c3\u30ba\u6bd4\n>\u4fc2\u6570\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u30aa\u30d6\u30b8\u30a7\u30af\u30c8coefficient\u306b\u683c\u7d0d\n>\n>```{R:R}\n>coefficent <- as.numeric(survival.glm$coefficients)\n>```\n>\n>1\u5217\u76ee\uff1a\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u5c5e\u6027\u9805\u76ee\u540d / 2\u5217\u76ee\uff1a\u4fc2\u6570\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc / 3\u5217\u76ee:\u30aa\u30c3\u30ba\u6bd4 \u306edataframe\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\n>\n>\u3010\u5b9a\u7fa9\u3011 \u30aa\u30a4\u30e9\u30fc\u6570e\u306e\u4fc2\u6570coefficients\u4e57 (e^coefficients) \u304c\u30aa\u30c3\u30ba\u6bd4\u3000\uff08\u30aa\u30c3\u30ba\u6bd4\u3092\u5c0f\u6570\u70b9\u4ee5\u4e0b2\u4f4d\u306b\u4e38\u3081\u308b\uff09\n>\n>```{R:R}\n>result.odds.ratio <- data.frame(passenger.profile.element, coefficent, round(exp(as.numeric(result$coefficients[,1])), 2))\n>colnames(result.odds.ratio) <- c(\"passenger.profile.element\", \"coefficient\", \"odds.ratio\")\n>```\n>\n>\u30aa\u30c3\u30ba\u6bd4\u3092\u5927\u304d\u3044\u9806\uff08\u964d\u9806\uff09\u306b\u4e26\u3073\u304b\u3048\u308b\n>\n>```{R:R}\n>order.odds <- rev(order(result.odds.ratio$odds.ratio))\n>result.odds.ratio <- result.odds.ratio[order.odds, ]\n>print(paste(result.odds.ratiopassenger.profile.element,\"\u306e\u8a72\u5f53\u8005\u306e\u751f\u5b58\u7387\u306f\u3001\u975e\u8a72\u5f53\u8005\u306b\u6bd4\u3079\u3066\u3001\",result.odds.ratioodds.ratio, \" \u500d\u9ad8\u304b\u3063\u305f\u3068\u63a8\u5b9a\u3055\u308c\u308b\", sep=\"\"))\n>```\n\n___\n\n### __\u3010 \u95a2\u9023\u8a18\u4e8b \u3011__\n\n* [\u6295\u7a3f\u8005 Qiita\u8a18\u4e8b (2014/06/13)\u300c\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3067\u7d50\u679c\u3092\u3082\u305f\u3089\u3057\u305f\u8981\u56e0\u91cd\u8981\u5ea6 \u30e9\u30f3\u30af\u4ed8\u3051\u300d](http://qiita.com/HirofumiYashima/items/69bc79e72cb85e24fd0e)\n* [\u6295\u7a3f\u8005 Qiita\u8a18\u4e8b (2014/06/23)\u300cR\u3067\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30 \uff08\u3064\u3065\u304d\uff09\u3010\u30e2\u30c7\u30eb\u751f\u6210\u5f8c\u306e\u4e88\u6e2c\u529b\u691c\u8a3c\uff08\u7de8\uff09\u3011stepAIC()\u3001ROC\u66f2\u7dda\u3001NRI / IDI\u6307\u6a19\u300d](http://qiita.com/HirofumiYashima/items/89a5ad88ec1e2466fa31)\n* [\u6295\u7a3f\u8005 Qiita\u8a18\u4e8b (2014/07/08)\u300cR\u3067MCMC\u3092\u4f7f\u3063\u3066\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3092\u8fd1\u4f3c\u8a08\u7b97 \uff5e\u7d44\u307f\u8fbc\u307f\u30c7\u30fc\u30bf Titanic\u3092\u7528\u3044\u305f\u4f8b\u300d](http://qiita.com/HirofumiYashima/items/dc624600c2f7b019d605)\n\n* [TERADATA \u300c\u30de\u30fc\u30b1\u30bf\u30fc\u306e\u305f\u3081\u306e\u30c7\u30fc\u30bf\u30de\u30a4\u30cb\u30f3\u30b0\u30fb\u30d2\u30c3\u30c1\u30cf\u30a4\u30af\u30ac\u30a4\u30c9 \u7b2c10\u56de\uff1a\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u5206\u6790\u300d](http://jpn.teradata.jp/library/ma/ins_1310a.html)\n* [Animal Breeding & Genetics\u300c\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\uff1a\u300d](http://www.agri.tohoku.ac.jp/iden/toukei5.html)\n* [gihyo.jp \u6a5f\u68b0\u5b66\u7fd2 \u306f\u3058\u3081\u3088\u3046 (2013/02/13) \u300c\u7b2c18\u56de\u3000\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u300d](http://gihyo.jp/dev/serial/01/machine-learning/0018)\n\n___\n\n#### \uff08\u53c2\u8003\uff09\nAWS Redshift \u306e\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\u578b\u3092\u6570\u5024\u578b\u306b\u5909\u3048\u308b\u3068\u3068\u3082\u306b\u3001\u6841\u6570\u3092\u5b9f\u6570\u6841\u3001\u5c0f\u6570\u70b9\u4ee5\u4e0b\u6841\u6570\u3092\u6307\u5b9a\u3059\u308b\u306a\u3069\u3001\u9069\u5b9c\u30c7\u30fc\u30bf\u578b\u3092\u6307\u5b9a\u3059\u308b\u3002\n\nEXP(-\n     (CARD_GACHA_COUNT * 0.214 + STATUS_CHECK_COUNT * 0.314 +  FRIEND_ACTION_COUTNT* 0.753 + 5.091)\n   )::NUMERIC(6,3))\n\n* [Amazon Redshift \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u958b\u767a\u8005\u30ac\u30a4\u30c9 (API Version 2012-12-01)](http://docs.aws.amazon.com/ja_jp/redshift/latest/dg/r_Numeric_types201.html)\n\n> DECIMAL \u578b\u307e\u305f\u306f NUMERIC \u578b\n>\n> DECIMAL \u30c7\u30fc\u30bf\u578b\u307e\u305f\u306f NUMERIC \u30c7\u30fc\u30bf\u578b\u3092\u4f7f\u7528\u3057\u3001\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u306e\u7cbe\u5ea6\u3067\u5024\u3092\u683c\u7d0d\u3057\u307e\u3059\u3002\n> DECIMAL \u30ad\u30fc\u30ef\u30fc\u30c9\u3068 NUMERIC \u30ad\u30fc\u30ef\u30fc\u30c9\u306f\u3001\u307b\u307c\u540c\u3058\u610f\u5473\u3067\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u3001\u3053\u306e\u30c7\u30fc\u30bf\u578b\u3092\u8868\u3059\u7528\u8a9e\u3068\u3057\u3066 decimal \u3092\u512a\u5148\u7684\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002numeric \u3068\u3044\u3046\u7528\u8a9e\u306f\u4e00\u822c\u7684\u306b\u6574\u6570\u300110 \u9032\u6570\u3001\u304a\u3088\u3073\u6d6e\u52d5\u5c0f\u6570\u70b9\u306e\u30c7\u30fc\u30bf\u578b\u3092\u79f0\u3059\u308b\u5834\u5408\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002\n>\n> \u30c6\u30fc\u30d6\u30eb\u5185\u306b DECIMAL \u5217\u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u3001precision \u3068 scale \u3092\u6b21\u306e\u3088\u3046\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002\n>\n> ```{SQL:Redshift postgreSQL}\n>decimal(precision, scale)\n>```\n>\n>_precision_\n>\n> \u5024\u5168\u4f53\u3067\u306e\u6709\u52b9\u306a\u6841\u306e\u5408\u8a08\u3002\u5c0f\u6570\u70b9\u306e\u4e21\u5074\u306e\u6841\u6570\u3002\u305f\u3068\u3048\u3070\u3001\u6570\u5024 48.2891 \u306e\u5834\u5408\u306f\u7cbe\u5ea6\u304c 6\u3001\u30b9\u30b1\u30fc\u30eb\u304c 4 \u3068\u306a\u308a\u307e\u3059\u3002\n> \u6307\u5b9a\u304c\u306a\u3044\u5834\u5408\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u7cbe\u5ea6\u306f 18 \u3067\u3059\u3002\u6700\u5927\u7cbe\u5ea6\u306f 38 \u3067\u3059\u3002\n>\n> \u5165\u529b\u5024\u3067\u5c0f\u6570\u70b9\u306e\u5de6\u5074\u306e\u6841\u6570\u304c\u3001\u5217\u306e\u7cbe\u5ea6\u304b\u3089\u5217\u306e\u30b9\u30b1\u30fc\u30eb\u3092\u5f15\u3044\u3066\u5f97\u3089\u308c\u305f\u6841\u6570\u3092\u8d85\u3048\u3066\u3044\u308b\u5834\u5408\u3001\u5165\u529b\u5024\u3092\u5217\u306b\u30b3\u30d4\u30fc\uff08\u307e\u305f\u306f\u633f\u5165\u3082\u66f4\u65b0\u3082\uff09\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u3053\u306e\u30eb\u30fc\u30eb\u306f\u3001\u5217\u306e\u5b9a\u7fa9\u3092\u5916\u308c\u308b\u3059\u3079\u3066\u306e\u5024\u306b\u9069\u7528\u3055\u308c\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u3001numeric(5,2) \u5217\u306e\u5024\u306e\u8a31\u5bb9\u7bc4\u56f2\u306f\u3001-999.99\uff5e999.99 \u3067\u3059\u3002\n>\n> _scale_\n>\n> \u5c0f\u6570\u70b9\u306e\u53f3\u5074\u306b\u4f4d\u7f6e\u3059\u308b\u3001\u5024\u306e\u5c0f\u6570\u90e8\u306b\u304a\u3051\u308b\u5c0f\u6570\u306e\u6841\u6570\u3067\u3059\u3002\n> \u6574\u6570\u306e\u30b9\u30b1\u30fc\u30eb\u306f\u30bc\u30ed\u3067\u3059\u3002\u5217\u306e\u4ed5\u69d8\u3067\u306f\u3001\u30b9\u30b1\u30fc\u30eb\u5024\u306f\u7cbe\u5ea6\u5024\u4ee5\u4e0b\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n> \u6307\u5b9a\u304c\u306a\u3051\u308c\u3070\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30b9\u30b1\u30fc\u30eb\u306f 0 \u3067\u3059\u3002\u6700\u5927\u30b9\u30b1\u30fc\u30eb\u306f 37 \u3067\u3059\u3002\n>\n> \u30c6\u30fc\u30d6\u30eb\u306b\u30ed\u30fc\u30c9\u3055\u308c\u305f\u5165\u529b\u5024\u306e\u30b9\u30b1\u30fc\u30eb\u304c\u5217\u306e\u30b9\u30b1\u30fc\u30eb\u3088\u308a\u5927\u304d\u3044\u5834\u5408\u3001\u5024\u306f\u6307\u5b9a\u3055\u308c\u305f\u30b9\u30b1\u30fc\u30eb\u306b\u4e38\u3081\u3089\u308c\u307e\u3059\u3002\n> SALES \u30c6\u30fc\u30d6\u30eb\u306e PRICEPAID \u5217\u304c DECIMAL(8,2) \u5217\u3067\u3042\u308b\u5834\u5408\u3092\u4f8b\u306b\u3068\u308a\u307e\u3059\u3002DECIMAL(8,4) \u306e\u5024\u3092 PRICEPAID \u5217\u306b\u633f\u5165\u3059\u308b\u3068\u3001\u5024\u306e\u30b9\u30b1\u30fc\u30eb\u306f 2 \u306b\u4e38\u3081\u3089\u308c\u307e\u3059\u3002\n\n___\n\n\n```{SQL:SQL}\ncreate table user_profile_analysis AS\nWITH prediction_target_future_tbl AS (\nSELECT CREATE_TIME\n       , USER_ID\n       , DAILY_ACTIVE_FLAG AS SEIKAI\nFROM USER_ACTION_LOG  \nWHERE CREATE_TIME <= CURRENT_DATE + INTERVAL '-1 DAY'\nORDER BY RANDOM()\nLIMIT 10000\n), temp AS (\n SELECT estimation_day_tbl.CREATE_TIME,\n        prediction_target_future_tbl.CREATE_TIME AS prediction_target_date,  \n        Last_Value(estimation_day_tbl.CREATE_TIME) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as model_estimation_date, --lag\u95a2\u6570\u3067\u53d6\u5f97\u3059\u308b\u5168\u8aac\u660e\u5909\u6570\uff08\uff11\u65e5\u524d \u8aac\u660e\u5909\u6570\uff5e30\u65e5\u524d \u8aac\u660e\u5909\u6570\uff09\u306e\u5024\u304c\u3059\u3079\u3066\u683c\u7d0d\u3055\u308c\u308b\u30ec\u30b3\u30fc\u30c9\u306e\u65e5\u4ed8\uff08\uff1d\u30e2\u30c7\u30eb\u63a8\u8a08\u306b\u6295\u5165\u3059\u308b\u8aac\u660e\u5909\u6570\u306e\u767a\u751f\u65e5\uff09\n        prediction_target_future_tbl.USER_ID,\n        prediction_target_future_tbl.SEIKAI,\n        estimation_day_tbl.CARD_GACHA_COUNT,\n        estimation_day_tbl.STATUS_CHECK_COUNT\n        case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end as FRIEND_ACTION_COUTNT,\n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 1)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_1_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 2)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_2_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 3)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_3_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 4)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_4_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 5)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_5_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 6)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_6_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 7)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_7_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 1)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_8_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 2)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_9_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 3)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_10_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 4)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_11_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 5)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_12_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 6)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_13_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 7)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_14_AGO,  \n FROM  prediction_target_future_tbl JOIN USER_ACTION_LOG AS estimation_day_tbl\n ON  prediction_target_future_tbl.USER_ID = estimation_day_tbl.USER_ID\n     AND estimation_day_tbl.CREATE_TIME BETWEEN ( prediction_target_future_tbl.CREATE_TIME + interval '-45 day') AND ( prediction_target_future_tbl.CREATE_TIME + interval '-31 day') --lag()\u3067\uff11\u65e5\u524d\u306e\u30ab\u30e9\u30e0\u5024\uff5e14\u65e5\u524d\u306e\u30ab\u30e9\u30e0\u5024\u307e\u3067\u3001\u53d6\u5f97\u3059\u308b\u305f\u3081\u300114\u65e5\u5206\u306e\u30ec\u30b3\u30fc\u30c9\u3092from\u53e5\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u683c\u7d0d\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n ORDER BY  prediction_target_future_tbl.USER_ID, estimation_day_tbl.CREATE_TIME\n), temp_2 AS (SELECT *,\n          (10.5*FRIEND_ACTION_COUTNT_1_AGO + 3.2*FRIEND_ACTION_COUTNT_2_AGO + 2.1*FRIEND_ACTION_COUTNT_3_AGO  + 0.5*FRIEND_ACTION_COUTNT_4_AGO + 0.3*FRIEND_ACTION_COUTNT_5_AGO    --\u2606\u2606\u2606\u2606\u2606\uff01\u3053\u3053\u3092\u8ffd\u52a0\uff01\u2606\u2606\u2606\u2606\u2606\n           + 0.2*FRIEND_ACTION_COUTNT_6_AGO + 12.3*FRIEND_ACTION_COUTNT_7_AGO + 20.4*FRIEND_ACTION_COUTNT_8_AGO + 2.9*FRIEND_ACTION_COUTNT_9_AGO + 1.2*FRIEND_ACTION_COUTNT_10_AGO --\u2606\u2606\u2606\u2606\u2606\uff01\u3053\u3053\u3092\u8ffd\u52a0\uff01\u2606\u2606\u2606\u2606\u2606\n           + 0.01*FRIEND_ACTION_COUTNT_11_AGO + 0.35*FRIEND_ACTION_COUTNT_12_AGO + 0.22*FRIEND_ACTION_COUTNT_13_AGO + 12.3*FRIEND_ACTION_COUTNT_14_AGO) as score                 --\u2606\u2606\u2606\u2606\u2606\uff01\u3053\u3053\u3092\u8ffd\u52a0\uff01\u2606\u2606\u2606\u2606\u2606\n  from temp\n  where CREATE_TIME = model_estimation_date  --\u3053\u3053\u304c\u5927\u4e8b\uff01\n  order by user_id, model_estimation_date --\u4e26\u3073\u66ff\u3048\u5217\u3092\u3001CREATE_TIME \u304b\u3089 model_estimation_date \u306b\u5909\u66f4\n), temp_3 AS (SELECT model_estimation_date, \n                     PREDICTION_TARGET_DATE,\n                     USER_ID,\n                     CARD_GACHA_COUNT,\n                     STATUS_CHECK_COUNT,\n                     FRIEND_ACTION_COUTNT,\n                     SCORE,\n                     EXP(-\n                        (SCORE * 12.579 + CARD_GACHA_COUNT * 0.214 + STATUS_CHECK_COUNT * 0.314 +  FRIEND_ACTION_COUTNT* 0.753 + 5.091)\n                        ) AS EXP_VALUE\n              FROM temp_2\n) SELECT SELECT *,\n                (1 / 1 + EXP_VALUE) AS PROBABILITY_DAILY_ACTIVE\nFROM temp_3\n;\n```\n\n\n###__\u539f\u56e0\u4e0d\u660e\u3060\u304c\u3001\u3068\u3053\u308d\u3069\u3053\u308d\u3001\u91cd\u8907\u30ec\u30b3\u30fc\u30c9\u304c\uff12\u4ef6\u4ee5\u4e0a\u767a\u751f\u3057\u3066\u3057\u307e\u3046\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001 PROBABILITY_DAILY_ACTIVE \u3092\u7b97\u51fa\u3059\u308b\u4e3b\u554f\u3044\u5408\u308f\u305b\u6587\u3092\u3001, temp_4 \u3067with\u53e5\u3067\u30a4\u30f3\u30e9\u30a4\u30f3\u30fb\u30d3\u30e5\u30fc\u306b\u3057\u3066\u3001temp_4\u3069\u3046\u3057\u3092 union \u3055\u305b\u3066\u91cd\u8907\u884c\u30921\u30ec\u30b3\u30fc\u30c9\u306b\u7d5e\u308b__\n\n```{SQL:SQL}\n, temp_3 AS (SELECT model_estimation_date, \n                     PREDICTION_TARGET_DATE,\n                     USER_ID,\n                     CARD_GACHA_COUNT,\n                     STATUS_CHECK_COUNT,\n                     FRIEND_ACTION_COUTNT,\n                     SCORE,\n                     EXP(-\n                        (SCORE * 12.579 + CARD_GACHA_COUNT * 0.214 + STATUS_CHECK_COUNT * 0.314 +  FRIEND_ACTION_COUTNT* 0.753 + 5.091)\n                        ) AS EXP_VALUE\n              FROM temp_2\n), temp_4 AS (SELECT SELECT *,\n                (1 / 1 + EXP_VALUE) AS PROBABILITY_DAILY_ACTIVE\n              FROM temp_3\n) (select *\n   from temp_4)\n   UNION\n  (select *\n   from temp_4)\n;\n```\n\n___\n\n\n### \u5168\u30e6\u30fc\u30b6\u30fb\u30c7\u30fc\u30bf\u5168\u671f\u9593\u306b\u5bfe\u3057\u3066\u3001\u63a8\u8a08\u3057\u305f\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3092\u904e\u53bb\u9061\u53ca\u7684\u306b\u9069\u7528\u3057\u3066\u3001\uff08\u904e\u53bb\u306b\u3053\u306eL\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u5b9f\u884c\u3057\u3066\u3044\u305f\u3089\u3048\u3089\u308c\u305f\u306f\u305a\u306e\uff09\u4e88\u6e2c\u5024\u3092\u53d6\u5f97\u3057\u305f\u3044\u5834\u5408\n\n#### __\u203b\u300cSQL\u5b9f\u884c\u65e5\u524d\u65e5 \u304b\u3089 30\u65e5\u524d\u300d\u306e\u8aac\u660e\u5909\u6570\u30c7\u30fc\u30bf\u3067\u3001\u300c\u305d\u306e30\u65e5\u5f8c\uff08\uff1dSQL\u5b9f\u884c\u65e5\u524d\u65e5\uff09\u300d\u306e\u30a2\u30af\u30c6\u30a3\u30d6\u7387\u3092\u4e88\u6e2c\u3059\u308b\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3001\u904e\u53bb\u9061\u53ca\u3057\u3066\u9069\u7528\u3059\u308b\u306e\u306f\u53b3\u5bc6\u306b\u306f\u6b63\u3057\u304f\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f__\n\n* temp_2\u30c6\u30fc\u30d6\u30eb\u5185\u306e where c_check_date = model_estimation_date \u3092\u5916\u3059\u3002\n* \u30e2\u30c7\u30eb\u63a8\u8a08\u65e5\u30ab\u30e9\u30e0\u306f\u3001estimation_day_tbl \u306e CREATE_TIME \u306b\u5909\u66f4\u3059\u308b\n\n\n```{SQL:SQL}\ncreate table user_profile_analysis AS\nWITH prediction_target_future_tbl AS (\nSELECT CREATE_TIME\n       , USER_ID\n       -- , DAILY_ACTIVE_FLAG AS SEIKAI  \u2606\u2606\u2606\u30e2\u30c7\u30eb\u63a8\u8a08\u306f\u3082\u3046\u7d42\u308f\u3063\u305f\u306e\u3067\u3001\u63a8\u8a08\u65e5\u306e30\u65e5\u5f8c\u306e\u6b63\u89e3\u30ab\u30e9\u30e0\u306f\u53d6\u5f97\u3057\u306a\u3044\nFROM USER_ACTION_LOG  \nWHERE CREATE_TIME <= CURRENT_DATE + INTERVAL '-1 DAY'\nORDER BY RANDOM()\nLIMIT 10000\n), temp AS (\n SELECT estimation_day_tbl.CREATE_TIME,\n        prediction_target_future_tbl.CREATE_TIME AS prediction_target_date,  \n       -- Last_Value(estimation_day_tbl.CREATE_TIME) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as model_estimation_date, --\uff08\u524a\u9664\uff09\n        prediction_target_future_tbl.USER_ID, \n       -- prediction_target_future_tbl.SEIKAI, \u2606\u2606\u2606\u30e2\u30c7\u30eb\u63a8\u8a08\u306f\u3082\u3046\u7d42\u308f\u3063\u305f\u306e\u3067\u3001\u63a8\u8a08\u65e5\u306e30\u65e5\u5f8c\u306e\u6b63\u89e3\u30ab\u30e9\u30e0\u306f\u53d6\u5f97\u3057\u306a\u3044\n        estimation_day_tbl.CARD_GACHA_COUNT,\n        estimation_day_tbl.STATUS_CHECK_COUNT\n        case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end as FRIEND_ACTION_COUTNT,\n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 1)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_1_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 2)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_2_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 3)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_3_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 4)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_4_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 5)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_5_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 6)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_6_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 7)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_7_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 1)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_8_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 2)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_9_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 3)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_10_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 4)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_11_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 5)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_12_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 6)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_13_AGO, \n        lag(case when estimation_day_tbl.FRIEND_ACTION_COUTNT >= 3 then 1 else 0 end, 7)  OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.CREATE_TIME) as FRIEND_ACTION_COUTNT_14_AGO,  \n FROM  prediction_target_future_tbl JOIN USER_ACTION_LOG AS estimation_day_tbl\n ON  prediction_target_future_tbl.USER_ID = estimation_day_tbl.USER_ID\n     AND estimation_day_tbl.CREATE_TIME BETWEEN ( prediction_target_future_tbl.CREATE_TIME + interval '-45 day') AND ( prediction_target_future_tbl.CREATE_TIME + interval '-31 day') --lag()\u3067\uff11\u65e5\u524d\u306e\u30ab\u30e9\u30e0\u5024\uff5e14\u65e5\u524d\u306e\u30ab\u30e9\u30e0\u5024\u307e\u3067\u3001\u53d6\u5f97\u3059\u308b\u305f\u3081\u300114\u65e5\u5206\u306e\u30ec\u30b3\u30fc\u30c9\u3092from\u53e5\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u683c\u7d0d\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n ORDER BY  prediction_target_future_tbl.USER_ID, estimation_day_tbl.CREATE_TIME\n), temp_2 AS (SELECT *,\n          (10.5*FRIEND_ACTION_COUTNT_1_AGO + 3.2*FRIEND_ACTION_COUTNT_2_AGO + 2.1*FRIEND_ACTION_COUTNT_3_AGO  + 0.5*FRIEND_ACTION_COUTNT_4_AGO + 0.3*FRIEND_ACTION_COUTNT_5_AGO    \n           + 0.2*FRIEND_ACTION_COUTNT_6_AGO + 12.3*FRIEND_ACTION_COUTNT_7_AGO + 20.4*FRIEND_ACTION_COUTNT_8_AGO + 2.9*FRIEND_ACTION_COUTNT_9_AGO + 1.2*FRIEND_ACTION_COUTNT_10_AGO \n           + 0.01*FRIEND_ACTION_COUTNT_11_AGO + 0.35*FRIEND_ACTION_COUTNT_12_AGO + 0.22*FRIEND_ACTION_COUTNT_13_AGO + 12.3*FRIEND_ACTION_COUTNT_14_AGO) as score                 \n  from temp\n  -- where CREATE_TIME = model_estimation_date  --\u2606\u2606\u2606\u2606\u3053\u3053\u3092\u524a\u9664\uff01\n  order by user_id, create_time --\u4e26\u3073\u66ff\u3048\u5217\u3092\u3001model_estimation_date \u304b\u3089 create_time \u306b\u5909\u66f4\n), temp_3 AS (SELECT CREATE_TIME AS model_estimation_date --\u2606\u2606\u2606\u2606  estimation_day_tbl \u306e CREATE_TIME \u306b  model_estimation_date \u306e\u5217\u5225\u540d\u3064\u3051\u308b\n                  -- model_estimation_date, \u2606\u2606\u524a\u9664\uff08\u3053\u306e\u65e5\u4ed8\u306f\u3001\u3064\u306d\u306bSQL\u5b9f\u884c\u65e5\u306e\u524d\u65e5\u306e\u65e5\u4ed8\uff09\n                     PREDICTION_TARGET_DATE,\n                     USER_ID,\n                     CARD_GACHA_COUNT,\n                     STATUS_CHECK_COUNT,\n                     FRIEND_ACTION_COUTNT,\n                     SCORE,\n                     EXP(-\n                        (SCORE * 12.579 + CARD_GACHA_COUNT * 0.214 + STATUS_CHECK_COUNT * 0.314 +  FRIEND_ACTION_COUTNT* 0.753 + 5.091)\n                        ) AS EXP_VALUE\n              FROM temp_2\n), temp_4 AS (SELECT SELECT *,\n                (1 / 1 + EXP_VALUE) AS PROBABILITY_DAILY_ACTIVE\n              FROM temp_3\n) (select *\n   from temp_4\n   order by model_estimation_date, user_id)\n   UNION\n  (select *\n   from temp_4\n   order by model_estimation_date, user_id)\n;\n```\n", "tags": ["SQL", "redshift", "R", "\u30ed\u30b8\u30b9\u30c6\u30a3\u30af\u56de\u5e30"]}