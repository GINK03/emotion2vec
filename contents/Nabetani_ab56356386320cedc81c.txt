{"context": " More than 1 year has passed since last update.\u30aa\u30d5\u30e9\u30a4\u30f3\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u300c\u3069\u3046\u66f8\u304f\u300d\u3092\u3084\u308b\u30a4\u30d9\u30f3\u30c8( http://atnd.org/events/46348 )\u306e\u3001ruby \u306b\u3088\u308b\u5b9f\u88c5\u4f8b\u3002\n\u554f\u984c\u306f\u300c\u6298\u3063\u3066\u5207\u308b\u300d\u3068\u3044\u3046\u540d\u524d\u3067\u3001\u8a73\u7d30\u306f\nhttp://nabetani.sakura.ne.jp/hena/ord17foldcut/\n\u3067\u3059\u3002\n\u4ed6\u306e\u65b9\u306e\u89e3\u7b54\u306f\nhttp://qiita.com/Nabetani/items/ebd9d7deb30c57447806\n\u304b\u3089\u8fbf\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3067\u3002\n#!ruby \ndef solve( s )\n  fold,cut = s.split(\"-\")\n  x=[0.0, 1.0]\n  y=x.dup\n  fold.chars.each do |f|\n    case f\n    when 'R'; x[1]=(x[0]+x[1])/2\n    when 'L'; x[0]=(x[0]+x[1])/2\n    when 'T'; y[1]=(y[0]+y[1])/2\n    when 'B'; y[0]=(y[0]+y[1])/2\n    else raise \"#{f} in #{s} : unexpected\"\n    end\n  end\n  [[x,/l/], [y,/b/]].map{ |xy, re|\n    s = 1/(xy[1]-xy[0])\n    if s==1\n      0\n    else\n      c = (xy[re===cut ? 0 : 1 ] * s).round\n      ( c.odd? ? s/2 : [s/2-1,0].max ).to_i\n    end\n  }.inject(&:*).to_s\nend\n\n$stdout.sync=true\n\nDATA.map do |line|\n  num, src, expected = line.split( /\\s+/ )\n  next true unless expected\n  actual = solve( src )\n  ok = actual==expected;\n  puts \"%s %s->%s ( %s )\" % [ ok ? \"ok\" : \"***NG***\", src, actual, expected ]\n  ok\nend.all?.tap{ |ok| p ok }\n\n__END__\n0 RRTRB-bl  6\n1 R-tr  0\n45  LTLRRBT-tr  32\n46  RBBRBLT-br  21\n47  LLRLRLR-tr  0\n\n\u3044\u3064\u3082\u901a\u308a\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u306f\u7701\u7565\u3002\n\u3082\u3046\u5c11\u3057\u30b3\u30f3\u30d1\u30af\u30c8\u306b\u66f8\u3051\u308b\u3088\u3046\u306a\u6c17\u304c\u3057\u3066\u306a\u3089\u306a\u3044\u3093\u3060\u3051\u3069\u3001\u7dba\u9e97\u306b\u3059\u308b\u65b9\u6cd5\u304c\u601d\u3044\u3064\u304b\u306a\u3044\u3002\n\u7d19\u3092\u6298\u3063\u3066\u3044\u304f\u6642\u306b\u673a\u306b\u3064\u3044\u305f\u307e\u307e\u306b\u306a\u308b\u77e9\u5f62\u304c\u3069\u3053\u306b\u5f53\u305f\u308b\u306e\u304b\u3092\u8a08\u7b97\u3059\u308b\u3002\n\u3042\u3068\u306f\u3001\u5f97\u3089\u308c\u305f\u77e9\u5f62\u304c\u3082\u3068\u306e\u6298\u308a\u7d19\u306e\u4e2d\u3067\u4f55\u30de\u30b9\u76ee\u306b\u5f53\u305f\u308b\u306e\u304b\u3092\u8a08\u7b97\u3059\u308b\u3068\u5076\u6570\u5947\u6570\u3068\u304b\u8003\u3048\u308c\u3070\u7a74\u306e\u6570\u304c\u308f\u304b\u308b\u3002\n\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3002\n\u6d6e\u52d5\u5c0f\u6570\u70b9\u3092\u4f7f\u3063\u3066\u3044\u308b\u3051\u3069\u30012\u306e\u6574\u6570\u4e57 \u3067\u5272\u3063\u3066\u3044\u308b\u306e\u3067\u30017\u56de\u3050\u3089\u3044\u6298\u3063\u305f\u3068\u3053\u308d\u3067\u8aa4\u5dee\u306f\u51fa\u306a\u3044\u3002\n20\u56de\u3068\u304b\u6298\u308a\u305f\u3044\u5834\u5408\u306f\u6709\u7406\u6570\u306b\u3059\u308b\u3002\n\n\u30aa\u30d5\u30e9\u30a4\u30f3\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u300c\u3069\u3046\u66f8\u304f\u300d\u3092\u3084\u308b\u30a4\u30d9\u30f3\u30c8( http://atnd.org/events/46348 )\u306e\u3001ruby \u306b\u3088\u308b\u5b9f\u88c5\u4f8b\u3002\n\n\u554f\u984c\u306f\u300c\u6298\u3063\u3066\u5207\u308b\u300d\u3068\u3044\u3046\u540d\u524d\u3067\u3001\u8a73\u7d30\u306f\nhttp://nabetani.sakura.ne.jp/hena/ord17foldcut/\n\u3067\u3059\u3002\n\n\u4ed6\u306e\u65b9\u306e\u89e3\u7b54\u306f\n\nhttp://qiita.com/Nabetani/items/ebd9d7deb30c57447806\n\n\u304b\u3089\u8fbf\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3067\u3002\n\n```ruby\n#!ruby \ndef solve( s )\n  fold,cut = s.split(\"-\")\n  x=[0.0, 1.0]\n  y=x.dup\n  fold.chars.each do |f|\n    case f\n    when 'R'; x[1]=(x[0]+x[1])/2\n    when 'L'; x[0]=(x[0]+x[1])/2\n    when 'T'; y[1]=(y[0]+y[1])/2\n    when 'B'; y[0]=(y[0]+y[1])/2\n    else raise \"#{f} in #{s} : unexpected\"\n    end\n  end\n  [[x,/l/], [y,/b/]].map{ |xy, re|\n    s = 1/(xy[1]-xy[0])\n    if s==1\n      0\n    else\n      c = (xy[re===cut ? 0 : 1 ] * s).round\n      ( c.odd? ? s/2 : [s/2-1,0].max ).to_i\n    end\n  }.inject(&:*).to_s\nend\n\n$stdout.sync=true\n\nDATA.map do |line|\n  num, src, expected = line.split( /\\s+/ )\n  next true unless expected\n  actual = solve( src )\n  ok = actual==expected;\n  puts \"%s %s->%s ( %s )\" % [ ok ? \"ok\" : \"***NG***\", src, actual, expected ]\n  ok\nend.all?.tap{ |ok| p ok }\n\n__END__\n0 RRTRB-bl  6\n1 R-tr  0\n45  LTLRRBT-tr  32\n46  RBBRBLT-br  21\n47  LLRLRLR-tr  0\n```\n\n\u3044\u3064\u3082\u901a\u308a\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u306f\u7701\u7565\u3002\n\n\u3082\u3046\u5c11\u3057\u30b3\u30f3\u30d1\u30af\u30c8\u306b\u66f8\u3051\u308b\u3088\u3046\u306a\u6c17\u304c\u3057\u3066\u306a\u3089\u306a\u3044\u3093\u3060\u3051\u3069\u3001\u7dba\u9e97\u306b\u3059\u308b\u65b9\u6cd5\u304c\u601d\u3044\u3064\u304b\u306a\u3044\u3002\n\n\u7d19\u3092\u6298\u3063\u3066\u3044\u304f\u6642\u306b\u673a\u306b\u3064\u3044\u305f\u307e\u307e\u306b\u306a\u308b\u77e9\u5f62\u304c\u3069\u3053\u306b\u5f53\u305f\u308b\u306e\u304b\u3092\u8a08\u7b97\u3059\u308b\u3002\n\u3042\u3068\u306f\u3001\u5f97\u3089\u308c\u305f\u77e9\u5f62\u304c\u3082\u3068\u306e\u6298\u308a\u7d19\u306e\u4e2d\u3067\u4f55\u30de\u30b9\u76ee\u306b\u5f53\u305f\u308b\u306e\u304b\u3092\u8a08\u7b97\u3059\u308b\u3068\u5076\u6570\u5947\u6570\u3068\u304b\u8003\u3048\u308c\u3070\u7a74\u306e\u6570\u304c\u308f\u304b\u308b\u3002\n\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3002\n\n\u6d6e\u52d5\u5c0f\u6570\u70b9\u3092\u4f7f\u3063\u3066\u3044\u308b\u3051\u3069\u30012\u306e\u6574\u6570\u4e57 \u3067\u5272\u3063\u3066\u3044\u308b\u306e\u3067\u30017\u56de\u3050\u3089\u3044\u6298\u3063\u305f\u3068\u3053\u308d\u3067\u8aa4\u5dee\u306f\u51fa\u306a\u3044\u3002\n\n20\u56de\u3068\u304b\u6298\u308a\u305f\u3044\u5834\u5408\u306f\u6709\u7406\u6570\u306b\u3059\u308b\u3002", "tags": ["Ruby", "yhpg", "\u3069\u3046\u66f8\u304f"]}