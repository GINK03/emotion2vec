{"tags": ["Unity", "VR", "Oculus", "OculusTouch"], "context": "OculusTouch\u5bfe\u5fdc\u306e\u30b2\u30fc\u30e0\u3092\u4f5c\u308b\u624b\u9806\u76ee\u6b21\u306f\u3053\u3061\u3089\n\n\u6982\u8981\nVRFunHouse\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092VR\u7a7a\u9593\u5185\u3067\u63b4\u3080\u6a5f\u80fd\u306e\u5b9f\u88c5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u63b4\u3080\u3068\u3044\u3046\u306e\u306f\u3001\u30ec\u30fc\u30b6\u30fc\u5149\u7dda\u306e\u3088\u3046\u306a\u3082\u306e\u3092\u98db\u3070\u3057\u3066\u885d\u7a81\u3057\u305f\u7269\u3092\u5f15\u304d\u5bc4\u305b\u3066\u63b4\u3080\u3053\u3068\u3092\u8a00\u3063\u3066\u3044\u307e\u3059\u3002\u9060\u304f\u306e\u3082\u306e\u3092\u63b4\u3081\u308b\u306e\u306f\u5ea7\u308a\u306a\u304c\u3089VR\u3092\u904a\u3076\u3068\u304d\u3068\u304b\u3001\u843d\u3068\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u62fe\u3046\u3068\u304d\u306b\u3042\u308b\u3068\u4fbf\u5229\u306a\u6a5f\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\n\u8003\u3048\u65b9\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nOculusTouch\u306e\u4f4d\u7f6e\u304b\u3089Ray\u3092\u98db\u3070\u3057\u3066\u9060\u304f\u306b\u3042\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6355\u6349\nOculusTouch\u306e\u30c8\u30ea\u30ac\u30fc\u306e\u64cd\u4f5c\u3067\u624b\u5143\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5f15\u304d\u5bc4\u305b\u30ad\u30e3\u30c3\u30c1\u3059\u308b\n\u30ad\u30e3\u30c3\u30c1\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30ea\u30ea\u30fc\u30b9\u3059\u308b\u3068\u3001\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u306e\u901f\u5ea6\u3092\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u4e0e\u3048\u3066\u6295\u3052\u308b\n\n\n\u5b8c\u6210\u56f3\n\n\n\u30af\u30e9\u30b9\n\u4eca\u56de\u7d39\u4ecb\u3059\u308b\u30af\u30e9\u30b9\u306e\u5185\u5bb9\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\n\u5168\u4f53\u306e\u30af\u30e9\u30b9\u56f3\n\n\nHandRaycaster\nHandRaycaster\u306fObject\u3092\u6355\u6349\u3092\u691c\u77e5\u3059\u308b\u30af\u30e9\u30b9\u3067\u3059\u3002\n\u5de6\u53f3\u306eOculus Touch\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u306e\u4f4d\u7f6e\u304b\u3089Ray\u3092\u98db\u3070\u3057\u3066\u3001Ray\u304c\u885d\u7a81\u3057\u305fObject(EventBase)\u306b\u5bfe\u3057\u3066ExecuteEvents\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002\nExecuteEvents\u306b\u3064\u3044\u3066\u306f\u3053\u306e\u30ea\u30f3\u30af\u5148\u3092\u53c2\u7167\nExecuteEvents\u3092\u5b9f\u884c\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u306f\u4ee5\u4e0b\u306e3\u3064\u3067\u3059\u3002\n1.\u3000Ray\u304c\u885d\u7a81\u3057\u59cb\u3081\u305f\u6642 (OnStartTouchEvent)\n2.\u3000Ray\u304c\u885d\u7a81\u3057\u3066\u3044\u308b\u6700\u4e2d (OnInTouchEvent)\n3.\u3000Ray\u304c\u885d\u7a81\u3057\u7d42\u308f\u3063\u305f\u6642 (OnEndTouchEvent)\n\nEventBase\n\u3053\u306e\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3059\u308b\u3068HandRaycaster\u304b\u3089Ray\u885d\u7a81\u6642\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u4fe1\u3059\u308b\u4e8b\u304c\u3067\u304d\u307e\u3059\u3002\n\nTouchObject\n\u5f15\u304d\u5bc4\u305b\u308b\u3001\u63b4\u3080\u3001\u904b\u3076\u3001\u6295\u3052\u308b\u5bfe\u8c61\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u30a2\u30bf\u30c3\u30c1\u3057\u3066\u5229\u7528\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u305d\u308c\u3089\u306e\u51e6\u7406\u306f\u5168\u3066\u3053\u306e\u30af\u30e9\u30b9\u5185\u306eOnStartTouchEvent\u3001OnInTouchEvent\u3001OnEndTouchEvent\u5185\u306b\u66f8\u304b\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3066\u306f\u3001TouchObject\u306b\u306fRigitBody\u304c\u30a2\u30bf\u30c3\u30c1\u3055\u308c\u3066\u3044\u308b\u304c\u63b4\u3093\u3060\u76f4\u5f8c\u304b\u3089\u63b4\u3093\u3067\u3044\u308b\u6700\u4e2d\u306f\u7269\u7406\u6f14\u7b97\u3092\u5207\u3063\u3066\u304a\u304f\u3053\u3068\u3002\n m_rigit.isKinematic = true;\n m_rigit.useGravity = false;\n\u307e\u305f\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u63b4\u307f\u3092\u30ea\u30ea\u30fc\u30b9\u3057\u305f\u5f8c\u306f\u7269\u7406\u6f14\u7b97\u3092\u6709\u52b9\u306b\u3059\u308b\u3068\u3068\u3082\u306b\u3001OculusTouch\u306e\u901f\u5ea6\u3068\u89d2\u901f\u5ea6\u3092RigitBody\u306b\u4e0e\u3048\u308b\u3068\u3001\u3044\u3044\u611f\u3058\u306b\u6295\u3052\u308b\u4e8b\u304c\u3067\u304d\u307e\u3059\u3002\nm_rigit.velocity = OVRInput.GetLocalControllerVelocity (hitEvent.isLeftHand ? OVRInput.Controller.LTouch : OVRInput.Controller.RTouch);\n        m_rigit.angularVelocity = (OVRInput.GetLocalControllerAngularVelocity (hitEvent.isLeftHand \n\nHandControllerManager\n\u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u9069\u5f53\u306aGameObject\u306b\u30a2\u30bf\u30c3\u30c1\u3057\u3066\u3001LineRender\u306ePrefab\u3092\u30bb\u30c3\u30c8\u3057\u3066\u5229\u7528\u3057\u307e\u3059\u3002\n\u6a5f\u80fd\u3068\u3057\u3066\u306f\u4e3b\u306bOculusTouch\u306eInput\u3092\u30e9\u30c3\u30d1\u30fc\u3059\u308b\u50cd\u304d\u304c\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u3001LocalAvatar\u5185\u306e\u53f3\u624b\u3001\u5de6\u624b\u306e\u4f4d\u7f6e\u306bHandRaycaster\u3092\u30bb\u30c3\u30c8\u3059\u308b\u6a5f\u80fd\u3082\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u30af\u30e9\u30b9\u306f\u3001Oculus Touch\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u304c\u5b8c\u4e86\u3057\u3066Oculus Utilities\u3068Oculus Avatar\u3092\u5c0e\u5165\u3057\u305f\u5f8c\u306b\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\n\u30b3\u30fc\u30c9\u8a73\u7d30\n\u4e0a\u8a18\u3067\u7d39\u4ecb\u3057\u305f\u30b3\u30fc\u30c9\u306e\u8a73\u7d30\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059\u3002\n\nHandRaycaster.cs\nusing UnityEngine;\nusing System.Collections;\nusing UnityEngine.EventSystems;\nusing System.Linq;\nusing UniRx;\nusing UniRx.Triggers;\nusing System;\n\n/// <summary>\n/// RayCast\u3092\u767a\u5c04\n/// </summary>\npublic class HandRaycaster : MonoBehaviour\n{\n\n    /// <summary>\n    /// \u3069\u3061\u3089\u306e\u624b\u304b\n    /// </summary>\n    public bool isLeftHand {\n        get {\n            return isLeft;\n        }\n\n        set {\n            isLeft = value;\n        }\n    }\n\n    /// <summary>\n    /// \u30ec\u30a4\u30ad\u30e3\u30b9\u30c8\u3092\u30ed\u30c3\u30af\u3059\u308b\n    /// \u30ed\u30c3\u30af\u3059\u308b\u3068\u3001\u624b\u8fd1\u508d\u306eTouchObject\u3092\u63b4\u3080\u30e2\u30fc\u30c9\u306b\u306a\u308b\n    /// </summary>\n    /// <value><c>true</c> if is lock raycast; otherwise, <c>false</c>.</value>\n    public bool isLockRaycast {\n        get;\n        set;\n    }\n\n    /// <summary>\n    /// \u63b4\u3093\u3060\u3082\u306e\u3092\u30ad\u30e3\u30c3\u30c1\u3059\u308b\u5834\u6240\n    /// </summary>\n    /// <value>The catch position.</value>\n    public GameObject catchPosition {\n        get;\n        set;\n    }\n\n\n    public GameObject lineRenderPrefab {\n        set {\n            m_lineRenderPrefab = value;\n        }\n    }\n\n    [SerializeField]\n    bool isLeft = true;\n\n    [SerializeField]\n    GameObject m_lineRenderPrefab;\n\n    GameObject m_lineRenderObj;\n\n    GameObject m_hitObject;\n\n    bool m_isCatchObject = false;\n\n    Action m_task;\n    float m_time;\n\n\n    void Start ()\n    {\n        isLockRaycast = false;\n        m_task = DispLineRenderTask;\n        var racastHitStream = \n            this.UpdateAsObservable ()\n                .Where (p => (HandControllerManager.Instance.IsGetHandTrigger (isLeft)))\n                .Where (p => !m_isCatchObject)\n                .Select (p => this.RaycastEventBase ())\n                .Where (p => p != null);\n\n        racastHitStream.Subscribe (p => ExcuteOnStartEvent (p)).AddTo (gameObject);\n\n    }\n\n\n    void Update ()\n    {\n        if (m_task != null) {\n            m_task ();\n        }\n    }\n\n    /// <summary>\n    /// \u63b4\u3093\u3060\u77ac\u9593\n    /// </summary>\n    /// <param name=\"hitEvent\">Hit event.</param>\n    void ExcuteOnStartEvent (EventBase hitEvent)\n    {\n        m_isCatchObject = true;\n\n        Debug.Log (\"ExcuteOnStartEvent\");\n        m_hitObject = hitEvent.transform.gameObject;\n        catchPosition.transform.position = m_hitObject.transform.position;\n        hitEvent.time = 0f;\n\n        // \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u7d99\u627f\u3057\u3066\u3044\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\n        ExecuteEvents.Execute<IEventReceiver> (\n            target: m_hitObject, // \u547c\u3073\u51fa\u3059\u5bfe\u8c61\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n            eventData: null,  // \u30a4\u30d9\u30f3\u30c8\u30c7\u30fc\u30bf\uff08\u30e2\u30b8\u30e5\u30fc\u30eb\u7b49\u306e\u60c5\u5831\uff09\n            functor: (recieveTarget, y) => recieveTarget.OnStartTouchEvent (this)); // \u64cd\u4f5c\n\n        m_time = 0f;\n        m_task = WaitHandOutTask;\n\n    }\n\n    /// <summary>\n    /// \u63b4\u3093\u3067\u3044\u308b\u6700\u4e2d\n    /// </summary>\n    /// <param name=\"time\">Time.</param>\n    void ExcuteOnInEvent (float time)\n    {\n        var eventBase = m_hitObject.GetComponent<EventBase> ();\n        if (m_lineRenderObj != null) {\n            m_lineRenderObj.GetComponent<LineRenderer> ().SetPositions (new Vector3[2] {\n                transform.position,\n                m_hitObject.transform.position\n            });\n        }\n\n        eventBase.time = time;\n\n        // \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u7d99\u627f\u3057\u3066\u3044\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\n        ExecuteEvents.Execute<IEventReceiver> (\n            target: m_hitObject, // \u547c\u3073\u51fa\u3059\u5bfe\u8c61\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n            eventData: null,  // \u30a4\u30d9\u30f3\u30c8\u30c7\u30fc\u30bf\uff08\u30e2\u30b8\u30e5\u30fc\u30eb\u7b49\u306e\u60c5\u5831\uff09\n            functor: (recieveTarget, y) => recieveTarget.OnInTouchEvent (this)); // \u64cd\u4f5c\n    }\n\n\n    /// <summary>\n    /// \u63b4\u3093\u3060\u3082\u306e\u3092\u96e2\u3057\u305f\u6642\n    /// </summary>\n    /// <param name=\"time\">Time.</param>\n    void ExcuteOnEndEvent (float time)\n    {\n        Debug.Log (\"ExcuteOnEndEvent\");\n        m_isCatchObject = false;\n        var eventBase = m_hitObject.GetComponent<EventBase> ();\n        eventBase.time = time;\n\n        if (m_lineRenderObj != null) {\n            Destroy (m_lineRenderObj);\n            m_lineRenderObj = null;\n        }\n\n        m_task = DispLineRenderTask;\n\n        // \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u7d99\u627f\u3057\u3066\u3044\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\n        ExecuteEvents.Execute<IEventReceiver> (\n            target: m_hitObject, // \u547c\u3073\u51fa\u3059\u5bfe\u8c61\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n            eventData: null,  // \u30a4\u30d9\u30f3\u30c8\u30c7\u30fc\u30bf\uff08\u30e2\u30b8\u30e5\u30fc\u30eb\u7b49\u306e\u60c5\u5831\uff09\n            functor: (recieveTarget, y) => recieveTarget.OnEndTouchEvent (this)); // \u64cd\u4f5c\n    }\n\n\n    /// <summary>\n    /// EventBase\u3092\u7d99\u627f\u3057\u305fObject\u306bRayCast\u304c\u885d\u7a81\u3057\u305f\u304b\u3069\u3046\u304b\n    /// </summary>\n    /// <returns>The event base.</returns>\n    EventBase RaycastEventBase ()\n    {\n\n        if (this.isLockRaycast) {\n            Collider[] hitColliders = Physics.OverlapSphere (transform.position, 0.12f);\n            return hitColliders.Where (p => p.gameObject.GetComponent<EventBase> () != null).Select (p => p.GetComponent<EventBase> ()).FirstOrDefault ();\n        } else {\n            RaycastHit hit;\n\n            if (Physics.Raycast (this.transform.position, this.transform.forward * 10, out hit)) {\n                var eventBase = hit.transform.gameObject.GetComponent<EventBase> ();\n                if (eventBase != null) {\n                    CreateLineRender (hit.transform.position);\n                    return eventBase;\n                } else {\n                    return null;\n                }\n            }\n            //Ray\u3092\u753b\u9762\u306b\u8868\u793a\n            Debug.DrawRay (this.transform.position, this.transform.forward * 10, Color.red, 5, false);\n            return null;\n        }\n\n\n    }\n\n\n    /// <summary>\n    /// \u30e9\u30a4\u30f3\u30ec\u30f3\u30c0\u30fc\u3092\u4f5c\u6210\n    /// </summary>\n    /// <param name=\"targetpos\">Targetpos.</param>\n    void CreateLineRender (Vector3 targetpos)\n    {\n        if (m_lineRenderObj == null) {\n            m_lineRenderObj = GameObject.Instantiate (m_lineRenderPrefab) as GameObject;\n            var positions = new Vector3[2] { transform.position, targetpos };\n            var lineRender = m_lineRenderObj.GetComponent<LineRenderer> ();\n            lineRender.material = new Material (Shader.Find (\"Particles/Multiply\"));\n            lineRender.widthMultiplier = 0.2f;\n            lineRender.numPositions = positions.Length;\n            lineRender.SetWidth (0.01f, 0.01f);\n            lineRender.SetColors (Color.red, Color.blue);\n            lineRender.SetPositions (positions);\n        } else {\n            m_lineRenderObj.GetComponent<LineRenderer> ().SetPositions (new Vector3[2] { transform.position, targetpos });\n        }\n    }\n\n\n    /// <summary>\n    /// \u30e9\u30a4\u30f3\u30ec\u30f3\u30c0\u30fc\u3092\u4f5c\u308b\u30bf\u30b9\u30af\n    /// </summary>\n    void DispLineRenderTask ()\n    {\n        if (isLockRaycast) {\n            return;\n        }\n        if ((HandControllerManager.Instance.IsGetHandTrigger (isLeft))) {\n            CreateLineRender (this.transform.position + transform.forward * 10);\n        }\n        if (HandControllerManager.Instance.IsGetUpHandTrigger (isLeft)) {\n            if (m_lineRenderObj != null) {\n                Destroy (m_lineRenderObj);\n                m_lineRenderObj = null;\n            }\n        }\n\n    }\n\n\n    /// <summary>\n    /// \u63b4\u3093\u3067\u3044\u308b\u6700\u4e2d\u3001\u63b4\u3093\u3060\u3082\u306e\u3092\u96e2\u3059\u30bf\u30a4\u30df\u30f3\u30b0\u306bEvent\u3092\u767a\u884c\n    /// </summary>\n    void WaitHandOutTask ()\n    {\n        if (HandControllerManager.Instance.IsGetUpHandTrigger (isLeft)) {\n            m_task = null;\n            ExcuteOnEndEvent (m_time);\n            m_time = 0f;\n\n        } else if (HandControllerManager.Instance.IsGetHandTrigger (isLeft)) {\n            ExcuteOnInEvent (m_time);\n        }\n        m_time += Time.deltaTime;\n    }\n}\n\n\n\nEventBase.cs\nusing UnityEngine;\nusing System.Collections;\nusing System;\nusing System.Linq;\n\n/// <summary>\n/// RayCast\u306e\u885d\u7a81\u30a4\u30d9\u30f3\u30c8\u3092\u53d7\u3051\u53d6\u308b\u57fa\u5e95\u30af\u30e9\u30b9\n/// </summary>\npublic class EventBase : MonoBehaviour,IEventReceiver\n{\n\n    /// <summary>\n    /// \u885d\u7a81\u3055\u308c\u305f\u6642\u9593\n    /// </summary>\n    public float time;\n\n    void Awake ()\n    {\n\n    }\n\n\n    /// <summary>\n    /// Raises the start event event.\n    /// </summary>\n    public virtual void OnStartTouchEvent (HandRaycaster hitEvent)\n    {\n    }\n\n\n    /// <summary>\n    /// Raises the end gaze event event.\n    /// </summary>\n    /// <param name=\"time\">Time.</param>\n    public virtual void OnEndTouchEvent (HandRaycaster hitEvent)\n    {\n\n    }\n\n    /// <summary>\n    /// Raises the in gaze event event.\n    /// </summary>\n    /// <param name=\"time\">Time.</param>\n    public virtual void OnInTouchEvent (HandRaycaster hitEvent)\n    {\n\n    }\n\n\n\n}\n\n\n\n\nTouchObject.cs\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UniRx;\nusing UniRx.Triggers;\nusing Unity.Linq;\nusing System.Linq;\nusing System;\n\n/// <summary>\n/// \u3064\u304b\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u3082\u306e\n/// </summary>\npublic class TouchObject : EventBase\n{\n\n    /// <summary>\n    /// \u30bf\u30c3\u30c1\u3057\u305f\u6642\n    /// </summary>\n    public ReactiveProperty<bool> IsTouched = new ReactiveProperty<bool> (false);\n\n    /// <summary>\n    /// \u63b4\u3093\u3060\u6642\n    /// </summary>\n    public BoolReactiveProperty IsCatch = new BoolReactiveProperty (false);\n\n    /// <summary>\n    /// \u63b4\u3093\u3060\u3082\u306e\u3092\u30ea\u30ea\u30fc\u30b9\u3057\u305f\u3068\u304d\n    /// </summary>\n    public BoolReactiveProperty IsReleased = new BoolReactiveProperty (false);\n\n    public enum LockHand\n    {\n        None,\n        Left,\n        Right,\n    }\n\n    /// <summary>\n    /// \u64cd\u4f5c\u3092\u30ed\u30c3\u30af\u3059\u308b\u624b\n    /// </summary>\n    /// <value><c>true</c> if this instance is lock hand; otherwise, <c>false</c>.</value>\n    public LockHand IsLockHand {\n        get {\n            return m_isLockHand;\n        }\n    }\n\n    /// <summary>\n    /// \u64cd\u4f5c\u3057\u3066\u3044\u308b\u65b9\u306e\u624b\u304c\u5de6\u624b\u304b\n    /// </summary>\n    /// <value><c>true</c> if this instance is left hand; otherwise, <c>false</c>.</value>\n    public bool IsLeftHand {\n        get {\n            return m_isLockHand == LockHand.Right;\n        }\n    }\n\n    [SerializeField] Transform m_glip;\n\n    OVRHapticsClip m_hapticsClip;\n\n\n    Rigidbody m_rigit;\n\n    float m_moveToHandDistance;\n\n    LockHand m_isLockHand;\n\n    Renderer m_render;\n\n    // Use this for initialization\n    void Start ()\n    {\n        m_render = GetComponent<Renderer> ();\n        if (m_render == null) {\n            m_render = GetComponentInChildren<Renderer> ();\n\n        }\n        m_rigit = this.gameObject.AncestorsAndSelf ().Where (p => p.GetComponent<Rigidbody> () != null).Select (p => p.GetComponent<Rigidbody> ()).First ();\n        m_isLockHand = LockHand.None;\n\n        IsCatch.Value = false;\n\n        IsTouched.Value = false;\n        IsTouched.Subscribe (p => InTouchChanged ());\n    }\n\n\n    public override void OnStartTouchEvent (HandRaycaster hitEvent)\n    {\n        base.OnStartEvent (hitEvent);\n        if (m_isLockHand == LockHand.None) {\n            m_isLockHand = hitEvent.isLeftHand ? LockHand.Right : LockHand.Left;\n        } else {\n            return;\n        }\n        m_moveToHandDistance = 0f;\n\n        IsTouched.Value = true;\n        IsReleased.Value = false;\n    }\n\n    public override void OnInTouchEvent (HandRaycaster hitEvent)\n    {\n        base.OnInCatchEvent (hitEvent);\n        if (hitEvent.isLeftHand && m_isLockHand == LockHand.Left) {\n            return;\n        } else if (!hitEvent.isLeftHand && m_isLockHand == LockHand.Right) {\n            return;\n        }\n        MoveFollowHand (hitEvent);\n\n        if (HandControllerManager.Instance.IsGetDownIndexTrigger (hitEvent.isLeftHand)) {\n        } else if (HandControllerManager.Instance.IsGetIndexTrigger (hitEvent.isLeftHand)) {\n            MoveDeltaToHand (hitEvent);\n        }\n    }\n\n\n    public override void OnEndTouchEvent (HandRaycaster hitEvent)\n    {\n        base.OnEndTouchEvent (hitEvent);\n        if (hitEvent.isLeftHand && m_isLockHand == LockHand.Left) {\n            return;\n        } else if (!hitEvent.isLeftHand && m_isLockHand == LockHand.Right) {\n            return;\n        }\n\n        IsCatch.Value = false;\n        m_isLockHand = LockHand.None;\n        m_moveToHandDistance = 0f;\n        IsTouched.Value = false;\n        Debug.Log (\"notTouched\");\n        m_rigit.isKinematic = false;\n        m_rigit.useGravity = true;\n        //\u6295\u3052\u308b\u3068\u304d\u306b\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u306e\u901f\u5ea6\u3001\u5404\u901f\u5ea6\u3092RigitBody\u306b\u4e0e\u3048\u308b\n        m_rigit.velocity = OVRInput.GetLocalControllerVelocity (hitEvent.isLeftHand ? OVRInput.Controller.LTouch : OVRInput.Controller.RTouch);\n        m_rigit.angularVelocity = (OVRInput.GetLocalControllerAngularVelocity (hitEvent.isLeftHand ? OVRInput.Controller.LTouch : OVRInput.Controller.RTouch).eulerAngles * (Mathf.PI / 180f));\n        IsReleased.Value = true;\n    }\n\n\n    void InTouchChanged ()\n    {\n        if (IsTouched.Value) {\n            Debug.Log (\"touched\");\n            m_rigit.isKinematic = true;\n            m_rigit.useGravity = false;\n        } \n    }\n\n\n    /// <summary>\n    /// \u624b\u306e\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u306e\u4f4d\u7f6e\u306e\u52d5\u304d\u3068\u9023\u52d5\u3059\u308b\n    /// </summary>\n    /// <param name=\"hand\">Hand.</param>\n    void MoveFollowHand (HandRaycaster hand)\n    {\n        var vec = this.transform.position - hand.transform.position;\n        var vece = vec.normalized;\n        if (Vector3.Distance (this.transform.position, hand.transform.position) - m_moveToHandDistance > 0.05f) {\n            this.transform.position = hand.catchPosition.transform.position - vece * m_moveToHandDistance;\n\n        } else {\n            IsCatch.Value = true;\n            this.transform.position = hand.transform.position;\n            if (m_glip != null) {\n                this.transform.position = this.transform.position + this.transform.position - m_glip.transform.position;\n            }\n        }\n        this.transform.localRotation = OVRInput.GetLocalControllerRotation (hand.isLeftHand ? OVRInput.Controller.LTouch : OVRInput.Controller.RTouch);\n    }\n\n\n    /// <summary>\n    /// \u624b\u306e\u4f4d\u7f6e\u306b\u5f15\u304d\u5bc4\u305b\u308b\n    /// </summary>\n    /// <param name=\"hand\">Hand.</param>\n    void MoveDeltaToHand (HandRaycaster hand)\n    {\n        if (Vector3.Distance (this.transform.position, hand.transform.position) - m_moveToHandDistance > 0.05f) {\n            m_moveToHandDistance += Time.deltaTime * 5;\n        }\n\n    }\n\n}\n\n\n\nHandControllerManager.cs\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing System.Linq;\n\n/// <summary>\n/// \u30cf\u30f3\u30c9\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\n/// </summary>\npublic class HandControllerManager : MonoBehaviour\n{\n\n    public static HandControllerManager Instance;\n\n    /// <summary>\n    /// \u5de6\u624b\u306eTransform\n    /// </summary>\n    /// <value>The left hand.</value>\n    public Transform leftHand {\n        get;\n        private set;\n    }\n\n    /// <summary>\n    /// \u53f3\u624b\u306eTransform\n    /// </summary>\n    /// <value>The right hand.</value>\n    public Transform rightHand {\n        get;\n        private set;\n    }\n\n    [SerializeField] GameObject m_lineRenderPrefab;\n\n\n    /// <summary>\n    /// LocalAvator\u306e\u624b\u306bHandLaycaster\u3092\u751f\u6210\n    /// </summary>\n    /// <returns>The hand raycaster.</returns>\n    /// <param name=\"name\">Name.</param>\n    /// <param name=\"targetRoot\">Target root.</param>\n    /// <param name=\"isLeft\">If set to <c>true</c> is left.</param>\n    Transform CreateHandRaycaster (string name, Transform targetRoot, bool isLeft)\n    {\n        var handRoot = new GameObject (name);\n        handRoot.transform.parent = targetRoot;\n        handRoot.transform.localPosition = Vector3.zero;\n        handRoot.transform.localRotation = Quaternion.Euler (new Vector3 (0, 0, 0));\n        handRoot.transform.localScale = Vector3.one;\n        var handr = handRoot.AddComponent<HandRaycaster> ();\n        handr.lineRenderPrefab = m_lineRenderPrefab;\n        var catchPos = new GameObject (\"catchPosition\");\n        catchPos.transform.parent = handRoot.transform;\n        catchPos.transform.localPosition = new Vector3 (0, 0.277f, 0);\n        catchPos.transform.localRotation = Quaternion.identity;\n        catchPos.transform.localScale = Vector3.one;\n        handr.catchPosition = catchPos;\n        handr.isLeftHand = isLeft;\n        return handRoot.transform;\n    }\n\n    private void Awake ()\n    {\n        Instance = this;\n        var localAvator = FindObjectsOfType<OvrAvatar> ().Where (p => p.ShowFirstPerson == true && p.ShowThirdPerson == false).First ();\n        if (localAvator == null) {\n            Debug.Log (\"Not Found LocalAvator\");\n            return; \n        }\n        leftHand = CreateHandRaycaster (\"LeftHandRoot\", localAvator.HandLeft.transform, true);\n        rightHand = CreateHandRaycaster (\"RightHandRoot\", localAvator.HandRight.transform, false);\n    }\n\n    public bool IsGetDownHandTrigger (bool isLeft)\n    {\n        return (OVRInput.GetDown (OVRInput.RawButton.RHandTrigger) && !isLeft) || (OVRInput.GetDown (OVRInput.RawButton.LHandTrigger) && isLeft);\n    }\n\n    public bool IsGetHandTrigger (bool isLeft)\n    {\n        return (OVRInput.Get (OVRInput.RawButton.RHandTrigger) && !isLeft) || (OVRInput.Get (OVRInput.RawButton.LHandTrigger) && isLeft);\n    }\n\n    public bool IsGetUpHandTrigger (bool isLeft)\n    {\n        return (OVRInput.GetUp (OVRInput.RawButton.RHandTrigger) && !isLeft) || (OVRInput.GetUp (OVRInput.RawButton.LHandTrigger) && isLeft);\n    }\n\n    public bool IsGetDownIndexTrigger (bool isLeft)\n    {\n        return (OVRInput.GetDown (OVRInput.RawButton.RIndexTrigger) && !isLeft) || (OVRInput.GetDown (OVRInput.RawButton.LIndexTrigger) && isLeft);\n    }\n\n    public bool IsGetIndexTrigger (bool isLeft)\n    {\n        return (OVRInput.Get (OVRInput.RawButton.RIndexTrigger) && !isLeft) || (OVRInput.Get (OVRInput.RawButton.LIndexTrigger) && isLeft);\n    }\n\n    public bool IsGetUpIndexTrigger (bool isLeft)\n    {\n        return (OVRInput.GetUp (OVRInput.RawButton.RIndexTrigger) && !isLeft) || (OVRInput.GetUp (OVRInput.RawButton.LIndexTrigger) && isLeft);\n    }\n\n    public bool IsGetDownA ()\n    {\n        return OVRInput.GetDown (OVRInput.RawButton.A);\n    }\n\n    public bool IsGetDownButton (bool isLeft)\n    {\n        return (OVRInput.GetDown (OVRInput.RawButton.A) && !isLeft) || (OVRInput.GetDown (OVRInput.RawButton.X) && isLeft);\n    }\n\n    public void SetIsLockRaycaster (bool isLeftLock, bool isRightLock)\n    {\n        this.leftHand.GetComponent<HandRaycaster> ().isLockRaycast = isLeftLock;\n        this.rightHand.GetComponent<HandRaycaster> ().isLockRaycast = isRightLock;\n    }\n\n    public Transform GetHand (bool isLeft)\n    {\n        if (isLeft) {\n            return this.leftHand;\n        }\n        return this.rightHand;\n    }\n}\n\n\n\n[OculusTouch\u5bfe\u5fdc\u306e\u30b2\u30fc\u30e0\u3092\u4f5c\u308b\u624b\u9806\u76ee\u6b21\u306f\u3053\u3061\u3089](http://qiita.com/UnagiHuman/items/42e2059c04f55410bb1b)\n\n#\u6982\u8981\n[VRFunHouse](http://vrinside.jp/news/nvidia-vr-funhouse-oculus-touch/)\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092VR\u7a7a\u9593\u5185\u3067\u63b4\u3080\u6a5f\u80fd\u306e\u5b9f\u88c5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u63b4\u3080\u3068\u3044\u3046\u306e\u306f\u3001\u30ec\u30fc\u30b6\u30fc\u5149\u7dda\u306e\u3088\u3046\u306a\u3082\u306e\u3092\u98db\u3070\u3057\u3066\u885d\u7a81\u3057\u305f\u7269\u3092\u5f15\u304d\u5bc4\u305b\u3066\u63b4\u3080\u3053\u3068\u3092\u8a00\u3063\u3066\u3044\u307e\u3059\u3002\u9060\u304f\u306e\u3082\u306e\u3092\u63b4\u3081\u308b\u306e\u306f\u5ea7\u308a\u306a\u304c\u3089VR\u3092\u904a\u3076\u3068\u304d\u3068\u304b\u3001\u843d\u3068\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u62fe\u3046\u3068\u304d\u306b\u3042\u308b\u3068\u4fbf\u5229\u306a\u6a5f\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\n\u8003\u3048\u65b9\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n1. OculusTouch\u306e\u4f4d\u7f6e\u304b\u3089Ray\u3092\u98db\u3070\u3057\u3066\u9060\u304f\u306b\u3042\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6355\u6349\n2. OculusTouch\u306e\u30c8\u30ea\u30ac\u30fc\u306e\u64cd\u4f5c\u3067\u624b\u5143\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5f15\u304d\u5bc4\u305b\u30ad\u30e3\u30c3\u30c1\u3059\u308b\n3. \u30ad\u30e3\u30c3\u30c1\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30ea\u30ea\u30fc\u30b9\u3059\u308b\u3068\u3001\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u306e\u901f\u5ea6\u3092\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u4e0e\u3048\u3066\u6295\u3052\u308b\n\n#\u5b8c\u6210\u56f3\n![OculusTouch.gif](https://qiita-image-store.s3.amazonaws.com/0/116884/dadf0863-ca0e-d38d-90ff-0b6309ea4968.gif)\n\n\n#\u30af\u30e9\u30b9\n\u4eca\u56de\u7d39\u4ecb\u3059\u308b\u30af\u30e9\u30b9\u306e\u5185\u5bb9\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n##\u5168\u4f53\u306e\u30af\u30e9\u30b9\u56f3\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/116884/9f19238b-a1d6-5584-470f-3c829f1ca569.png)\n\n##HandRaycaster\nHandRaycaster\u306fObject\u3092\u6355\u6349\u3092\u691c\u77e5\u3059\u308b\u30af\u30e9\u30b9\u3067\u3059\u3002\n\u5de6\u53f3\u306eOculus Touch\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u306e\u4f4d\u7f6e\u304b\u3089Ray\u3092\u98db\u3070\u3057\u3066\u3001Ray\u304c\u885d\u7a81\u3057\u305fObject(EventBase)\u306b\u5bfe\u3057\u3066ExecuteEvents\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002\n[ExecuteEvents\u306b\u3064\u3044\u3066\u306f\u3053\u306e\u30ea\u30f3\u30af\u5148\u3092\u53c2\u7167](http://tsubakit1.hateblo.jp/entry/2015/04/13/010645)\nExecuteEvents\u3092\u5b9f\u884c\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u306f\u4ee5\u4e0b\u306e3\u3064\u3067\u3059\u3002\n1.\u3000Ray\u304c\u885d\u7a81\u3057\u59cb\u3081\u305f\u6642 (OnStartTouchEvent)\n2.\u3000Ray\u304c\u885d\u7a81\u3057\u3066\u3044\u308b\u6700\u4e2d (OnInTouchEvent)\n3.\u3000Ray\u304c\u885d\u7a81\u3057\u7d42\u308f\u3063\u305f\u6642 (OnEndTouchEvent)\n\n##EventBase\n\u3053\u306e\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3059\u308b\u3068HandRaycaster\u304b\u3089Ray\u885d\u7a81\u6642\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u4fe1\u3059\u308b\u4e8b\u304c\u3067\u304d\u307e\u3059\u3002\n\n##TouchObject\n\u5f15\u304d\u5bc4\u305b\u308b\u3001\u63b4\u3080\u3001\u904b\u3076\u3001\u6295\u3052\u308b\u5bfe\u8c61\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u30a2\u30bf\u30c3\u30c1\u3057\u3066\u5229\u7528\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u305d\u308c\u3089\u306e\u51e6\u7406\u306f\u5168\u3066\u3053\u306e\u30af\u30e9\u30b9\u5185\u306eOnStartTouchEvent\u3001OnInTouchEvent\u3001OnEndTouchEvent\u5185\u306b\u66f8\u304b\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3066\u306f\u3001TouchObject\u306b\u306fRigitBody\u304c\u30a2\u30bf\u30c3\u30c1\u3055\u308c\u3066\u3044\u308b\u304c\u63b4\u3093\u3060\u76f4\u5f8c\u304b\u3089\u63b4\u3093\u3067\u3044\u308b\u6700\u4e2d\u306f\u7269\u7406\u6f14\u7b97\u3092\u5207\u3063\u3066\u304a\u304f\u3053\u3068\u3002\n m_rigit.isKinematic = true;\n m_rigit.useGravity = false;\n\u307e\u305f\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u63b4\u307f\u3092\u30ea\u30ea\u30fc\u30b9\u3057\u305f\u5f8c\u306f\u7269\u7406\u6f14\u7b97\u3092\u6709\u52b9\u306b\u3059\u308b\u3068\u3068\u3082\u306b\u3001OculusTouch\u306e\u901f\u5ea6\u3068\u89d2\u901f\u5ea6\u3092RigitBody\u306b\u4e0e\u3048\u308b\u3068\u3001\u3044\u3044\u611f\u3058\u306b\u6295\u3052\u308b\u4e8b\u304c\u3067\u304d\u307e\u3059\u3002\nm_rigit.velocity = OVRInput.GetLocalControllerVelocity (hitEvent.isLeftHand ? OVRInput.Controller.LTouch : OVRInput.Controller.RTouch);\n        m_rigit.angularVelocity = (OVRInput.GetLocalControllerAngularVelocity (hitEvent.isLeftHand \n\n##HandControllerManager\n\u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u9069\u5f53\u306aGameObject\u306b\u30a2\u30bf\u30c3\u30c1\u3057\u3066\u3001LineRender\u306ePrefab\u3092\u30bb\u30c3\u30c8\u3057\u3066\u5229\u7528\u3057\u307e\u3059\u3002\n\u6a5f\u80fd\u3068\u3057\u3066\u306f\u4e3b\u306bOculusTouch\u306eInput\u3092\u30e9\u30c3\u30d1\u30fc\u3059\u308b\u50cd\u304d\u304c\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u3001LocalAvatar\u5185\u306e\u53f3\u624b\u3001\u5de6\u624b\u306e\u4f4d\u7f6e\u306bHandRaycaster\u3092\u30bb\u30c3\u30c8\u3059\u308b\u6a5f\u80fd\u3082\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u30af\u30e9\u30b9\u306f\u3001[Oculus Touch\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7](http://qiita.com/UnagiHuman/private/f43444e7119d83081fc8)\u304c\u5b8c\u4e86\u3057\u3066Oculus Utilities\u3068Oculus Avatar\u3092\u5c0e\u5165\u3057\u305f\u5f8c\u306b\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\n#\u30b3\u30fc\u30c9\u8a73\u7d30\n\u4e0a\u8a18\u3067\u7d39\u4ecb\u3057\u305f\u30b3\u30fc\u30c9\u306e\u8a73\u7d30\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059\u3002\n\n##\n```HandRaycaster.cs\nusing UnityEngine;\nusing System.Collections;\nusing UnityEngine.EventSystems;\nusing System.Linq;\nusing UniRx;\nusing UniRx.Triggers;\nusing System;\n\n/// <summary>\n/// RayCast\u3092\u767a\u5c04\n/// </summary>\npublic class HandRaycaster : MonoBehaviour\n{\n\n\t/// <summary>\n\t/// \u3069\u3061\u3089\u306e\u624b\u304b\n\t/// </summary>\n\tpublic bool isLeftHand {\n\t\tget {\n\t\t\treturn isLeft;\n\t\t}\n\n\t\tset {\n\t\t\tisLeft = value;\n\t\t}\n\t}\n\n\t/// <summary>\n\t/// \u30ec\u30a4\u30ad\u30e3\u30b9\u30c8\u3092\u30ed\u30c3\u30af\u3059\u308b\n\t/// \u30ed\u30c3\u30af\u3059\u308b\u3068\u3001\u624b\u8fd1\u508d\u306eTouchObject\u3092\u63b4\u3080\u30e2\u30fc\u30c9\u306b\u306a\u308b\n\t/// </summary>\n\t/// <value><c>true</c> if is lock raycast; otherwise, <c>false</c>.</value>\n\tpublic bool isLockRaycast {\n\t\tget;\n\t\tset;\n\t}\n\n\t/// <summary>\n\t/// \u63b4\u3093\u3060\u3082\u306e\u3092\u30ad\u30e3\u30c3\u30c1\u3059\u308b\u5834\u6240\n\t/// </summary>\n\t/// <value>The catch position.</value>\n\tpublic GameObject catchPosition {\n\t\tget;\n\t\tset;\n\t}\n\n\n\tpublic GameObject lineRenderPrefab {\n\t\tset {\n\t\t\tm_lineRenderPrefab = value;\n\t\t}\n\t}\n\n\t[SerializeField]\n\tbool isLeft = true;\n\n\t[SerializeField]\n\tGameObject m_lineRenderPrefab;\n\n\tGameObject m_lineRenderObj;\n\n\tGameObject m_hitObject;\n\n\tbool m_isCatchObject = false;\n\n\tAction m_task;\n\tfloat m_time;\n\n \n\tvoid Start ()\n\t{\n\t\tisLockRaycast = false;\n\t\tm_task = DispLineRenderTask;\n\t\tvar racastHitStream = \n\t\t\tthis.UpdateAsObservable ()\n\t\t\t\t.Where (p => (HandControllerManager.Instance.IsGetHandTrigger (isLeft)))\n                .Where (p => !m_isCatchObject)\n                .Select (p => this.RaycastEventBase ())\n                .Where (p => p != null);\n\n\t\tracastHitStream.Subscribe (p => ExcuteOnStartEvent (p)).AddTo (gameObject);\n\n\t}\n\n\n\tvoid Update ()\n\t{\n\t\tif (m_task != null) {\n\t\t\tm_task ();\n\t\t}\n\t}\n\n\t/// <summary>\n\t/// \u63b4\u3093\u3060\u77ac\u9593\n\t/// </summary>\n\t/// <param name=\"hitEvent\">Hit event.</param>\n\tvoid ExcuteOnStartEvent (EventBase hitEvent)\n\t{\n\t\tm_isCatchObject = true;\n\n\t\tDebug.Log (\"ExcuteOnStartEvent\");\n\t\tm_hitObject = hitEvent.transform.gameObject;\n\t\tcatchPosition.transform.position = m_hitObject.transform.position;\n\t\thitEvent.time = 0f;\n\n\t\t// \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u7d99\u627f\u3057\u3066\u3044\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\n\t\tExecuteEvents.Execute<IEventReceiver> (\n\t\t\ttarget: m_hitObject, // \u547c\u3073\u51fa\u3059\u5bfe\u8c61\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\t\t\teventData: null,  // \u30a4\u30d9\u30f3\u30c8\u30c7\u30fc\u30bf\uff08\u30e2\u30b8\u30e5\u30fc\u30eb\u7b49\u306e\u60c5\u5831\uff09\n\t\t\tfunctor: (recieveTarget, y) => recieveTarget.OnStartTouchEvent (this)); // \u64cd\u4f5c\n\n\t\tm_time = 0f;\n\t\tm_task = WaitHandOutTask;\n\n\t}\n\n\t/// <summary>\n\t/// \u63b4\u3093\u3067\u3044\u308b\u6700\u4e2d\n\t/// </summary>\n\t/// <param name=\"time\">Time.</param>\n\tvoid ExcuteOnInEvent (float time)\n\t{\n\t\tvar eventBase = m_hitObject.GetComponent<EventBase> ();\n\t\tif (m_lineRenderObj != null) {\n\t\t\tm_lineRenderObj.GetComponent<LineRenderer> ().SetPositions (new Vector3[2] {\n\t\t\t\ttransform.position,\n\t\t\t\tm_hitObject.transform.position\n\t\t\t});\n\t\t}\n\n\t\teventBase.time = time;\n\t\t\n\t\t// \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u7d99\u627f\u3057\u3066\u3044\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\n\t\tExecuteEvents.Execute<IEventReceiver> (\n\t\t\ttarget: m_hitObject, // \u547c\u3073\u51fa\u3059\u5bfe\u8c61\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\t\t\teventData: null,  // \u30a4\u30d9\u30f3\u30c8\u30c7\u30fc\u30bf\uff08\u30e2\u30b8\u30e5\u30fc\u30eb\u7b49\u306e\u60c5\u5831\uff09\n\t\t\tfunctor: (recieveTarget, y) => recieveTarget.OnInTouchEvent (this)); // \u64cd\u4f5c\n\t}\n\n\n\t/// <summary>\n\t/// \u63b4\u3093\u3060\u3082\u306e\u3092\u96e2\u3057\u305f\u6642\n\t/// </summary>\n\t/// <param name=\"time\">Time.</param>\n\tvoid ExcuteOnEndEvent (float time)\n\t{\n\t\tDebug.Log (\"ExcuteOnEndEvent\");\n\t\tm_isCatchObject = false;\n\t\tvar eventBase = m_hitObject.GetComponent<EventBase> ();\n\t\teventBase.time = time;\n\n\t\tif (m_lineRenderObj != null) {\n\t\t\tDestroy (m_lineRenderObj);\n\t\t\tm_lineRenderObj = null;\n\t\t}\n\n\t\tm_task = DispLineRenderTask;\n\n\t\t// \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u7d99\u627f\u3057\u3066\u3044\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\n\t\tExecuteEvents.Execute<IEventReceiver> (\n\t\t\ttarget: m_hitObject, // \u547c\u3073\u51fa\u3059\u5bfe\u8c61\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\t\t\teventData: null,  // \u30a4\u30d9\u30f3\u30c8\u30c7\u30fc\u30bf\uff08\u30e2\u30b8\u30e5\u30fc\u30eb\u7b49\u306e\u60c5\u5831\uff09\n\t\t\tfunctor: (recieveTarget, y) => recieveTarget.OnEndTouchEvent (this)); // \u64cd\u4f5c\n\t}\n\n\n\t/// <summary>\n\t/// EventBase\u3092\u7d99\u627f\u3057\u305fObject\u306bRayCast\u304c\u885d\u7a81\u3057\u305f\u304b\u3069\u3046\u304b\n\t/// </summary>\n\t/// <returns>The event base.</returns>\n\tEventBase RaycastEventBase ()\n\t{\n\n\t\tif (this.isLockRaycast) {\n\t\t\tCollider[] hitColliders = Physics.OverlapSphere (transform.position, 0.12f);\n\t\t\treturn hitColliders.Where (p => p.gameObject.GetComponent<EventBase> () != null).Select (p => p.GetComponent<EventBase> ()).FirstOrDefault ();\n\t\t} else {\n\t\t\tRaycastHit hit;\n\n\t\t\tif (Physics.Raycast (this.transform.position, this.transform.forward * 10, out hit)) {\n\t\t\t\tvar eventBase = hit.transform.gameObject.GetComponent<EventBase> ();\n\t\t\t\tif (eventBase != null) {\n\t\t\t\t\tCreateLineRender (hit.transform.position);\n\t\t\t\t\treturn eventBase;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//Ray\u3092\u753b\u9762\u306b\u8868\u793a\n\t\t\tDebug.DrawRay (this.transform.position, this.transform.forward * 10, Color.red, 5, false);\n\t\t\treturn null;\n\t\t}\n\n\t\n\t}\n\n\n\t/// <summary>\n\t/// \u30e9\u30a4\u30f3\u30ec\u30f3\u30c0\u30fc\u3092\u4f5c\u6210\n\t/// </summary>\n\t/// <param name=\"targetpos\">Targetpos.</param>\n\tvoid CreateLineRender (Vector3 targetpos)\n\t{\n\t\tif (m_lineRenderObj == null) {\n\t\t\tm_lineRenderObj = GameObject.Instantiate (m_lineRenderPrefab) as GameObject;\n\t\t\tvar positions = new Vector3[2] { transform.position, targetpos };\n\t\t\tvar lineRender = m_lineRenderObj.GetComponent<LineRenderer> ();\n\t\t\tlineRender.material = new Material (Shader.Find (\"Particles/Multiply\"));\n\t\t\tlineRender.widthMultiplier = 0.2f;\n\t\t\tlineRender.numPositions = positions.Length;\n\t\t\tlineRender.SetWidth (0.01f, 0.01f);\n\t\t\tlineRender.SetColors (Color.red, Color.blue);\n\t\t\tlineRender.SetPositions (positions);\n\t\t} else {\n\t\t\tm_lineRenderObj.GetComponent<LineRenderer> ().SetPositions (new Vector3[2] { transform.position, targetpos });\n\t\t}\n\t}\n\n\n\t/// <summary>\n\t/// \u30e9\u30a4\u30f3\u30ec\u30f3\u30c0\u30fc\u3092\u4f5c\u308b\u30bf\u30b9\u30af\n\t/// </summary>\n\tvoid DispLineRenderTask ()\n\t{\n\t\tif (isLockRaycast) {\n\t\t\treturn;\n\t\t}\n\t\tif ((HandControllerManager.Instance.IsGetHandTrigger (isLeft))) {\n\t\t\tCreateLineRender (this.transform.position + transform.forward * 10);\n\t\t}\n\t\tif (HandControllerManager.Instance.IsGetUpHandTrigger (isLeft)) {\n\t\t\tif (m_lineRenderObj != null) {\n\t\t\t\tDestroy (m_lineRenderObj);\n\t\t\t\tm_lineRenderObj = null;\n\t\t\t}\n\t\t}\n      \n\t}\n\n\n\t/// <summary>\n\t/// \u63b4\u3093\u3067\u3044\u308b\u6700\u4e2d\u3001\u63b4\u3093\u3060\u3082\u306e\u3092\u96e2\u3059\u30bf\u30a4\u30df\u30f3\u30b0\u306bEvent\u3092\u767a\u884c\n\t/// </summary>\n\tvoid WaitHandOutTask ()\n\t{\n\t\tif (HandControllerManager.Instance.IsGetUpHandTrigger (isLeft)) {\n\t\t\tm_task = null;\n\t\t\tExcuteOnEndEvent (m_time);\n\t\t\tm_time = 0f;\n            \n\t\t} else if (HandControllerManager.Instance.IsGetHandTrigger (isLeft)) {\n\t\t\tExcuteOnInEvent (m_time);\n\t\t}\n\t\tm_time += Time.deltaTime;\n\t}\n}\n```\n```EventBase.cs\nusing UnityEngine;\nusing System.Collections;\nusing System;\nusing System.Linq;\n\n/// <summary>\n/// RayCast\u306e\u885d\u7a81\u30a4\u30d9\u30f3\u30c8\u3092\u53d7\u3051\u53d6\u308b\u57fa\u5e95\u30af\u30e9\u30b9\n/// </summary>\npublic class EventBase : MonoBehaviour,IEventReceiver\n{\n\n\t/// <summary>\n\t/// \u885d\u7a81\u3055\u308c\u305f\u6642\u9593\n\t/// </summary>\n\tpublic float time;\n\n\tvoid Awake ()\n\t{\n\t\n\t}\n\n\n\t/// <summary>\n\t/// Raises the start event event.\n\t/// </summary>\n\tpublic virtual void OnStartTouchEvent (HandRaycaster hitEvent)\n\t{\n\t}\n\n\n\t/// <summary>\n\t/// Raises the end gaze event event.\n\t/// </summary>\n\t/// <param name=\"time\">Time.</param>\n\tpublic virtual void OnEndTouchEvent (HandRaycaster hitEvent)\n\t{\n\t\t\n\t}\n\n\t/// <summary>\n\t/// Raises the in gaze event event.\n\t/// </summary>\n\t/// <param name=\"time\">Time.</param>\n\tpublic virtual void OnInTouchEvent (HandRaycaster hitEvent)\n\t{\n\t\t\n\t}\n\n\t\n\n}\n\n```\n\n```TouchObject.cs\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UniRx;\nusing UniRx.Triggers;\nusing Unity.Linq;\nusing System.Linq;\nusing System;\n\n/// <summary>\n/// \u3064\u304b\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u3082\u306e\n/// </summary>\npublic class TouchObject : EventBase\n{\n\n\t/// <summary>\n\t/// \u30bf\u30c3\u30c1\u3057\u305f\u6642\n\t/// </summary>\n\tpublic ReactiveProperty<bool> IsTouched = new ReactiveProperty<bool> (false);\n\n\t/// <summary>\n\t/// \u63b4\u3093\u3060\u6642\n\t/// </summary>\n\tpublic BoolReactiveProperty IsCatch = new BoolReactiveProperty (false);\n\n\t/// <summary>\n\t/// \u63b4\u3093\u3060\u3082\u306e\u3092\u30ea\u30ea\u30fc\u30b9\u3057\u305f\u3068\u304d\n\t/// </summary>\n\tpublic BoolReactiveProperty IsReleased = new BoolReactiveProperty (false);\n\n\tpublic enum LockHand\n\t{\n\t\tNone,\n\t\tLeft,\n\t\tRight,\n\t}\n\n\t/// <summary>\n\t/// \u64cd\u4f5c\u3092\u30ed\u30c3\u30af\u3059\u308b\u624b\n\t/// </summary>\n\t/// <value><c>true</c> if this instance is lock hand; otherwise, <c>false</c>.</value>\n\tpublic LockHand IsLockHand {\n\t\tget {\n\t\t\treturn m_isLockHand;\n\t\t}\n\t}\n\n\t/// <summary>\n\t/// \u64cd\u4f5c\u3057\u3066\u3044\u308b\u65b9\u306e\u624b\u304c\u5de6\u624b\u304b\n\t/// </summary>\n\t/// <value><c>true</c> if this instance is left hand; otherwise, <c>false</c>.</value>\n\tpublic bool IsLeftHand {\n\t\tget {\n\t\t\treturn m_isLockHand == LockHand.Right;\n\t\t}\n\t}\n\n\t[SerializeField] Transform m_glip;\n\n\tOVRHapticsClip m_hapticsClip;\n\n\n\tRigidbody m_rigit;\n\n\tfloat m_moveToHandDistance;\n\n\tLockHand m_isLockHand;\n\n\tRenderer m_render;\n\n\t// Use this for initialization\n\tvoid Start ()\n\t{\n\t\tm_render = GetComponent<Renderer> ();\n\t\tif (m_render == null) {\n\t\t\tm_render = GetComponentInChildren<Renderer> ();\n\n\t\t}\n\t\tm_rigit = this.gameObject.AncestorsAndSelf ().Where (p => p.GetComponent<Rigidbody> () != null).Select (p => p.GetComponent<Rigidbody> ()).First ();\n\t\tm_isLockHand = LockHand.None;\n\t\n\t\tIsCatch.Value = false;\n\n\t\tIsTouched.Value = false;\n\t\tIsTouched.Subscribe (p => InTouchChanged ());\n\t}\n\n\n\tpublic override void OnStartTouchEvent (HandRaycaster hitEvent)\n\t{\n\t\tbase.OnStartEvent (hitEvent);\n\t\tif (m_isLockHand == LockHand.None) {\n\t\t\tm_isLockHand = hitEvent.isLeftHand ? LockHand.Right : LockHand.Left;\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\t\tm_moveToHandDistance = 0f;\n\n\t\tIsTouched.Value = true;\n\t\tIsReleased.Value = false;\n\t}\n\n\tpublic override void OnInTouchEvent (HandRaycaster hitEvent)\n\t{\n\t\tbase.OnInCatchEvent (hitEvent);\n\t\tif (hitEvent.isLeftHand && m_isLockHand == LockHand.Left) {\n\t\t\treturn;\n\t\t} else if (!hitEvent.isLeftHand && m_isLockHand == LockHand.Right) {\n\t\t\treturn;\n\t\t}\n\t\tMoveFollowHand (hitEvent);\n     \n\t\tif (HandControllerManager.Instance.IsGetDownIndexTrigger (hitEvent.isLeftHand)) {\n\t\t} else if (HandControllerManager.Instance.IsGetIndexTrigger (hitEvent.isLeftHand)) {\n\t\t\tMoveDeltaToHand (hitEvent);\n\t\t}\n\t}\n\n\n\tpublic override void OnEndTouchEvent (HandRaycaster hitEvent)\n\t{\n\t\tbase.OnEndTouchEvent (hitEvent);\n\t\tif (hitEvent.isLeftHand && m_isLockHand == LockHand.Left) {\n\t\t\treturn;\n\t\t} else if (!hitEvent.isLeftHand && m_isLockHand == LockHand.Right) {\n\t\t\treturn;\n\t\t}\n\n\t\tIsCatch.Value = false;\n\t\tm_isLockHand = LockHand.None;\n\t\tm_moveToHandDistance = 0f;\n\t\tIsTouched.Value = false;\n\t\tDebug.Log (\"notTouched\");\n\t\tm_rigit.isKinematic = false;\n\t\tm_rigit.useGravity = true;\n\t\t//\u6295\u3052\u308b\u3068\u304d\u306b\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u306e\u901f\u5ea6\u3001\u5404\u901f\u5ea6\u3092RigitBody\u306b\u4e0e\u3048\u308b\n\t\tm_rigit.velocity = OVRInput.GetLocalControllerVelocity (hitEvent.isLeftHand ? OVRInput.Controller.LTouch : OVRInput.Controller.RTouch);\n\t\tm_rigit.angularVelocity = (OVRInput.GetLocalControllerAngularVelocity (hitEvent.isLeftHand ? OVRInput.Controller.LTouch : OVRInput.Controller.RTouch).eulerAngles * (Mathf.PI / 180f));\n\t\tIsReleased.Value = true;\n\t}\n\n\n\tvoid InTouchChanged ()\n\t{\n\t\tif (IsTouched.Value) {\n\t\t\tDebug.Log (\"touched\");\n\t\t\tm_rigit.isKinematic = true;\n\t\t\tm_rigit.useGravity = false;\n\t\t} \n\t}\n\n\n\t/// <summary>\n\t/// \u624b\u306e\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u306e\u4f4d\u7f6e\u306e\u52d5\u304d\u3068\u9023\u52d5\u3059\u308b\n\t/// </summary>\n\t/// <param name=\"hand\">Hand.</param>\n\tvoid MoveFollowHand (HandRaycaster hand)\n\t{\n\t\tvar vec = this.transform.position - hand.transform.position;\n\t\tvar vece = vec.normalized;\n\t\tif (Vector3.Distance (this.transform.position, hand.transform.position) - m_moveToHandDistance > 0.05f) {\n\t\t\tthis.transform.position = hand.catchPosition.transform.position - vece * m_moveToHandDistance;\n\n\t\t} else {\n\t\t\tIsCatch.Value = true;\n\t\t\tthis.transform.position = hand.transform.position;\n\t\t\tif (m_glip != null) {\n\t\t\t\tthis.transform.position = this.transform.position + this.transform.position - m_glip.transform.position;\n\t\t\t}\n\t\t}\n\t\tthis.transform.localRotation = OVRInput.GetLocalControllerRotation (hand.isLeftHand ? OVRInput.Controller.LTouch : OVRInput.Controller.RTouch);\n\t}\n\n\n\t/// <summary>\n\t/// \u624b\u306e\u4f4d\u7f6e\u306b\u5f15\u304d\u5bc4\u305b\u308b\n\t/// </summary>\n\t/// <param name=\"hand\">Hand.</param>\n\tvoid MoveDeltaToHand (HandRaycaster hand)\n\t{\n\t\tif (Vector3.Distance (this.transform.position, hand.transform.position) - m_moveToHandDistance > 0.05f) {\n\t\t\tm_moveToHandDistance += Time.deltaTime * 5;\n\t\t}\n       \n\t}\n\n}\n```\n\n```HandControllerManager.cs\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing System.Linq;\n\n/// <summary>\n/// \u30cf\u30f3\u30c9\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\n/// </summary>\npublic class HandControllerManager : MonoBehaviour\n{\n\n\tpublic static HandControllerManager Instance;\n\n\t/// <summary>\n\t/// \u5de6\u624b\u306eTransform\n\t/// </summary>\n\t/// <value>The left hand.</value>\n\tpublic Transform leftHand {\n\t\tget;\n\t\tprivate set;\n\t}\n\n\t/// <summary>\n\t/// \u53f3\u624b\u306eTransform\n\t/// </summary>\n\t/// <value>The right hand.</value>\n\tpublic Transform rightHand {\n\t\tget;\n\t\tprivate set;\n\t}\n\n\t[SerializeField] GameObject m_lineRenderPrefab;\n\n\n\t/// <summary>\n\t/// LocalAvator\u306e\u624b\u306bHandLaycaster\u3092\u751f\u6210\n\t/// </summary>\n\t/// <returns>The hand raycaster.</returns>\n\t/// <param name=\"name\">Name.</param>\n\t/// <param name=\"targetRoot\">Target root.</param>\n\t/// <param name=\"isLeft\">If set to <c>true</c> is left.</param>\n\tTransform CreateHandRaycaster (string name, Transform targetRoot, bool isLeft)\n\t{\n\t\tvar handRoot = new GameObject (name);\n\t\thandRoot.transform.parent = targetRoot;\n\t\thandRoot.transform.localPosition = Vector3.zero;\n\t\thandRoot.transform.localRotation = Quaternion.Euler (new Vector3 (0, 0, 0));\n\t\thandRoot.transform.localScale = Vector3.one;\n\t\tvar handr = handRoot.AddComponent<HandRaycaster> ();\n\t\thandr.lineRenderPrefab = m_lineRenderPrefab;\n\t\tvar catchPos = new GameObject (\"catchPosition\");\n\t\tcatchPos.transform.parent = handRoot.transform;\n\t\tcatchPos.transform.localPosition = new Vector3 (0, 0.277f, 0);\n\t\tcatchPos.transform.localRotation = Quaternion.identity;\n\t\tcatchPos.transform.localScale = Vector3.one;\n\t\thandr.catchPosition = catchPos;\n\t\thandr.isLeftHand = isLeft;\n\t\treturn handRoot.transform;\n\t}\n\n\tprivate void Awake ()\n\t{\n\t\tInstance = this;\n\t\tvar localAvator = FindObjectsOfType<OvrAvatar> ().Where (p => p.ShowFirstPerson == true && p.ShowThirdPerson == false).First ();\n\t\tif (localAvator == null) {\n\t\t\tDebug.Log (\"Not Found LocalAvator\");\n\t\t\treturn; \n\t\t}\n\t\tleftHand = CreateHandRaycaster (\"LeftHandRoot\", localAvator.HandLeft.transform, true);\n\t\trightHand = CreateHandRaycaster (\"RightHandRoot\", localAvator.HandRight.transform, false);\n\t}\n\n\tpublic bool IsGetDownHandTrigger (bool isLeft)\n\t{\n\t\treturn (OVRInput.GetDown (OVRInput.RawButton.RHandTrigger) && !isLeft) || (OVRInput.GetDown (OVRInput.RawButton.LHandTrigger) && isLeft);\n\t}\n\n\tpublic bool IsGetHandTrigger (bool isLeft)\n\t{\n\t\treturn (OVRInput.Get (OVRInput.RawButton.RHandTrigger) && !isLeft) || (OVRInput.Get (OVRInput.RawButton.LHandTrigger) && isLeft);\n\t}\n\n\tpublic bool IsGetUpHandTrigger (bool isLeft)\n\t{\n\t\treturn (OVRInput.GetUp (OVRInput.RawButton.RHandTrigger) && !isLeft) || (OVRInput.GetUp (OVRInput.RawButton.LHandTrigger) && isLeft);\n\t}\n\n\tpublic bool IsGetDownIndexTrigger (bool isLeft)\n\t{\n\t\treturn (OVRInput.GetDown (OVRInput.RawButton.RIndexTrigger) && !isLeft) || (OVRInput.GetDown (OVRInput.RawButton.LIndexTrigger) && isLeft);\n\t}\n\n\tpublic bool IsGetIndexTrigger (bool isLeft)\n\t{\n\t\treturn (OVRInput.Get (OVRInput.RawButton.RIndexTrigger) && !isLeft) || (OVRInput.Get (OVRInput.RawButton.LIndexTrigger) && isLeft);\n\t}\n\n\tpublic bool IsGetUpIndexTrigger (bool isLeft)\n\t{\n\t\treturn (OVRInput.GetUp (OVRInput.RawButton.RIndexTrigger) && !isLeft) || (OVRInput.GetUp (OVRInput.RawButton.LIndexTrigger) && isLeft);\n\t}\n\n\tpublic bool IsGetDownA ()\n\t{\n\t\treturn OVRInput.GetDown (OVRInput.RawButton.A);\n\t}\n\n\tpublic bool IsGetDownButton (bool isLeft)\n\t{\n\t\treturn (OVRInput.GetDown (OVRInput.RawButton.A) && !isLeft) || (OVRInput.GetDown (OVRInput.RawButton.X) && isLeft);\n\t}\n\n\tpublic void SetIsLockRaycaster (bool isLeftLock, bool isRightLock)\n\t{\n\t\tthis.leftHand.GetComponent<HandRaycaster> ().isLockRaycast = isLeftLock;\n\t\tthis.rightHand.GetComponent<HandRaycaster> ().isLockRaycast = isRightLock;\n\t}\n\n\tpublic Transform GetHand (bool isLeft)\n\t{\n\t\tif (isLeft) {\n\t\t\treturn this.leftHand;\n\t\t}\n\t\treturn this.rightHand;\n\t}\n}\n\n```\n"}