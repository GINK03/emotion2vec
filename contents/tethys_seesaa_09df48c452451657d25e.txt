{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nVerilog\u66f8\u304b\u305a\u306bPython\u306e\u307f\u3067Verilog\u306e\u30c7\u30b6\u30a4\u30f3\u30fb\u30c6\u30b9\u30c8\u3092\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\u3084\u3063\u3066\u307f\u305f\u7cfb\u3067\u3059\u3002 \n\u30c6\u30b9\u30c8\u306f\u4ee5\u524d\u66f8\u3044\u305fcocotb\u3001\u30c7\u30b6\u30a4\u30f3\u306b\u306fVeriloggen\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\n\u74b0\u5883\u306fCentOS6.6\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u74b0\u5883\u69cb\u7bc9\nVeriloggen\u3092\u4f7f\u7528\u3059\u308b\u306b\u306f\u3001\u4f5c\u8005\u3055\u3093\u306e\u30d6\u30ed\u30b0\u306e\u901a\u308a\u3001Pyverilog, Jinja2\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\u51e6\u7406\u7cfb\u304cPython3.3\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u305f\u3081\u3001cocotb\u3068\u306e\u76f8\u6027\u304cOS\u74b0\u5883\u3082\u542b\u3081\u3066\u4eca\u3072\u3068\u3064\u3088\u304f\u3042\u308a\u307e\u305b\u3093\u3002\n\u3088\u3063\u3066\u3001\u30a6\u30c1\u306e\u74b0\u5883\u3067\u306fvirtualenv\u3092\u4f7f\u308f\u305a\u306b\u76f4\u63a5\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3057\u305f\u3002\ngit clone https://github.com/shtaxxx/Pyverilog\ngit clone https://github.com/shtaxxx/veriloggen\nsudo pip install jinja2\ncd Pyverilog\nsudo python3 setup.py install\ncd ../veriloggen\nsudo python3 setup.py install\ncd ../\n\ncocotb\u306f\u3001\u4ee5\u524d\u3068\u540c\u3058\u3067\u3059\u3002\n\u4eca\u56de\u3082\u524d\u56de\u3068\u540c\u69d8\u3001example\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u65b0\u305f\u306b\u30ef\u30fc\u30af\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u3001\u305d\u3053\u306brtl\u304a\u3088\u3073tests\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u3001\u305d\u308c\u305e\u308cDUT\u3001\u30c6\u30b9\u30c8\u3092\u4fdd\u5b58\u3057\u307e\u3057\u305f\u3002\n\u9055\u3044\u306f\u3001rtl\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306bVerilog\u30d5\u30a1\u30a4\u30eb\u3067\u306f\u306a\u304fPython\u30d5\u30a1\u30a4\u30eb\u306b\u3057\u305f\u3053\u3068\u3067\u3059\u3002\n\u251c\u2500\u2500 model\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 tests.py\n\u251c\u2500\u2500 rtl\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 dff.py\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 Makefile\n    \u2514\u2500\u2500 run.sh\n\n\nDUT\nDUT\u306f\u524d\u56de\u306e8bit\u9806\u5e8f\u56de\u8def\u306b\u306a\u308a\u307e\u3059\u3002\u30ea\u30bb\u30c3\u30c8\u304c\u6b63\u8ad6\u7406\u304b\u3064\u540c\u671f\u306b\u306a\u3063\u305f\u306e\u304c\u524d\u56de\u3068\u306e\u9055\u3044\u3067\u3059\u3002\n\ndff.py\nimport sys, os\nfrom veriloggen import *\n\ndef mkdff():\n    m = Module('dff')\n    width = m.Parameter('WIDTH', 8)\n    clk   = m.Input('CLK')\n    rst   = m.Input('RST')\n    d     = m.Input('D', width)\n    q     = m.OutputReg('Q', width)\n\n    m.Always(Posedge(clk))(\n        If(rst)(\n            q(0)\n        ).Else(\n            q(d)\n        ))\n\n    return m\n\n\nif __name__ == '__main__':\n    dff = mkdff()\n    verilog = dff.to_verilog()\n    print(verilog)\n\n\n\n\u30c6\u30b9\u30c8\n\u30ea\u30bb\u30c3\u30c8\u6975\u6027\u3092\u524d\u56de\u304b\u3089\u5909\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\ntests.py\nimport cocotb\nfrom cocotb.triggers import Timer, RisingEdge\nfrom cocotb.result import TestFailure\nfrom cocotb.clock import Clock\n\nimport random\n\nclass DffTB(object):\n    def __init__(self, dut, dubug=True):\n        self.dut = dut\n\n    @cocotb.coroutine\n    def reset(self, duration=10000):\n        self.dut.log.info(\"Resetting DUT\")\n        self.dut.RST <= 1\n        self.dut.D <= 0\n        yield Timer(duration)\n        yield RisingEdge(self.dut.CLK)\n        self.dut.RST <= 0\n        self.dut.log.info(\"Out of reset\")\n\n    @cocotb.coroutine\n    def gen_and_check(self):\n        D = random.randint(0, 255)\n        self.dut.D = D;\n        yield RisingEdge(self.dut.CLK)\n        yield Timer(1)\n        if int(self.dut.Q) != D :\n            raise TestFailure(\n                \"[NG] Compre error. D==%s Q==%s\" %  (D, int(self.dut.Q)))\n        else :\n            self.dut.log.info(\"[OK]\")\n\n\n@cocotb.coroutine\ndef clock_gen(signal):\n    while True:\n        signal <= 0\n        yield Timer(5000)\n        signal <= 1\n        yield Timer(5000)\n\n@cocotb.test()\ndef basic_test(dut):\n    \"\"\"basic_test\"\"\"\n    tb = DffTB(dut)\n    cocotb.fork(clock_gen(dut.CLK))\n    yield RisingEdge(dut.CLK)\n    yield tb.reset()\n\n    for i in range(30):\n        yield tb.gen_and_check()\n\n\n\n\u5b9f\u884c\u30b9\u30af\u30ea\u30d7\u30c8\n\u3064\u306a\u304e\u5408\u308f\u305b\u308b\u306e\u304c\u9762\u5012\u3060\u3063\u305f\u306e\u3067\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u306b\u3057\u307e\u3057\u305f\u3002\n\nrun.sh\n#!/bin/bash\n\nRTLPATH=../rtl\nif [ -e ${RTLPATH}/dff.v ]; then\n  rm ${RTLPATH}/dff.v\nfi\n\npython3 ${RTLPATH}/dff.py > ${RTLPATH}/dff.v\n\nmake\n\n\n\n\u7d50\u679c\nVeriloggen\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306aVerilog\u30b3\u30fc\u30c9\u304c\u751f\u6210\u3055\u308c\u307e\u3057\u305f\u3002\n\ndff.v\nmodule dff #\n (\n  parameter WIDTH = 8\n\n )\n (\n  input [0:0] CLK, \ninput [0:0] RST, \ninput [(WIDTH - 1):0] D, \noutput reg [(WIDTH - 1):0] Q\n\n );\n  always @(posedge CLK)\n  begin        \n  if(RST) begin        \n  Q <= 0;\nend  \nelse begin        \n  Q <= D;\nend \nend \nendmodule\n\n\ncocotb\u306b\u3088\u308b\u30c6\u30b9\u30c8\u7d50\u679c\u3082\u7121\u4e8b\u306b\u30aa\u30c3\u30b1\u30fc\u3067\u3059\u3002\n        TESTCASE= TOPLEVEL=dff \\\n        vvp -M /tmp/cocotb/build/libs/x86_64 -m gpivpi sim_build/sim.vvp   \n     -.--ns INFO     cocotb.gpi                                GpiCommon.cpp:47   in gpi_print_registered_impl       VPI registered\n     0.00ns INFO     cocotb.gpi                                  gpi_embed.c:229  in embed_sim_init                  Running on Icarus Verilog version 0.9.6 \n     0.00ns INFO     cocotb.gpi                                  gpi_embed.c:230  in embed_sim_init                  Python interpreter initialised and cocotb loaded!\n     0.00ns INFO     cocotb.gpi                                  __init__.py:103  in _initialise_testbench           Running tests with Cocotb v1.0 from /tmp/cocotb\n     0.00ns INFO     cocotb.gpi                                  __init__.py:119  in _initialise_testbench           Seeding Python random module with 1437305945\n     0.00ns INFO     cocotb.regression                         regression.py:153  in initialise                      Found test tests.basic_test\n     0.00ns INFO     cocotb.regression                         regression.py:254  in execute                         Running test 1/1: basic_test\n     0.00ns INFO     ..tb.coroutine.basic_test.0x2353ed0       decorators.py:186  in send                            Starting test: \"basic_test\"\n                                                                                                                               Description: basic_test\n     5.00ns INFO     cocotb.dff                                     tests.py:14   in reset                           Resetting DUT\n    15.00ns INFO     cocotb.dff                                     tests.py:20   in reset                           Out of reset\n    25.00ns INFO     cocotb.dff                                     tests.py:32   in gen_and_check                   [OK]\n    35.00ns INFO     cocotb.dff                                     tests.py:32   in gen_and_check                   [OK]\n\n(\u4e2d\u7565)\n\n   295.00ns INFO     cocotb.dff                                     tests.py:32   in gen_and_check                   [OK]\n   305.00ns INFO     cocotb.dff                                     tests.py:32   in gen_and_check                   [OK]\n   315.00ns INFO     cocotb.dff                                     tests.py:32   in gen_and_check                   [OK]\n   315.00ns INFO     cocotb.regression                         regression.py:201  in handle_result                   Test Passed: basic_test\n   315.00ns INFO     cocotb.regression                         regression.py:162  in tear_down                       Passed 1 tests (0 skipped)\n   315.00ns INFO     cocotb.regression                         regression.py:168  in tear_down                       Shutting down...\n\n\n\u304a\u308f\u308a\u306b\n\u4eca\u5ea6\u306fAvalon\u306a\u3069\u306e\u30d0\u30b9\u3092\u7d61\u3081\u3066\u3084\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u304b\u306d\u3048\u2026\u3002\n##\u306f\u3058\u3081\u306b\nVerilog\u66f8\u304b\u305a\u306bPython\u306e\u307f\u3067Verilog\u306e\u30c7\u30b6\u30a4\u30f3\u30fb\u30c6\u30b9\u30c8\u3092\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002**\u3084\u3063\u3066\u307f\u305f\u7cfb\u3067\u3059\u3002** \n\u30c6\u30b9\u30c8\u306f[\u4ee5\u524d\u66f8\u3044\u305f](http://qiita.com/tethys_seesaa/items/99504dede7657f1619ce)cocotb\u3001\u30c7\u30b6\u30a4\u30f3\u306b\u306f[Veriloggen](http://shtaxxx.hatenablog.com/entry/2015/06/22/010559)\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\n\u74b0\u5883\u306fCentOS6.6\u306b\u306a\u308a\u307e\u3059\u3002\n\n##\u74b0\u5883\u69cb\u7bc9\nVeriloggen\u3092\u4f7f\u7528\u3059\u308b\u306b\u306f\u3001\u4f5c\u8005\u3055\u3093\u306e[\u30d6\u30ed\u30b0](http://shtaxxx.hatenablog.com/entry/2015/06/22/010559)\u306e\u901a\u308a\u3001`Pyverilog`, `Jinja2`\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\u51e6\u7406\u7cfb\u304cPython3.3\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u305f\u3081\u3001cocotb\u3068\u306e\u76f8\u6027\u304cOS\u74b0\u5883\u3082\u542b\u3081\u3066\u4eca\u3072\u3068\u3064\u3088\u304f\u3042\u308a\u307e\u305b\u3093\u3002\n\u3088\u3063\u3066\u3001\u30a6\u30c1\u306e\u74b0\u5883\u3067\u306f`virtualenv`\u3092\u4f7f\u308f\u305a\u306b\u76f4\u63a5\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3057\u305f\u3002\n\n```sh\ngit clone https://github.com/shtaxxx/Pyverilog\ngit clone https://github.com/shtaxxx/veriloggen\nsudo pip install jinja2\ncd Pyverilog\nsudo python3 setup.py install\ncd ../veriloggen\nsudo python3 setup.py install\ncd ../\n```\n\ncocotb\u306f\u3001[\u4ee5\u524d](http://qiita.com/tethys_seesaa/items/99504dede7657f1619ce)\u3068\u540c\u3058\u3067\u3059\u3002\n\n\u4eca\u56de\u3082\u524d\u56de\u3068\u540c\u69d8\u3001`example`\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u65b0\u305f\u306b\u30ef\u30fc\u30af\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u3001\u305d\u3053\u306brtl\u304a\u3088\u3073tests\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u3001\u305d\u308c\u305e\u308cDUT\u3001\u30c6\u30b9\u30c8\u3092\u4fdd\u5b58\u3057\u307e\u3057\u305f\u3002\n\u9055\u3044\u306f\u3001**rtl\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306bVerilog\u30d5\u30a1\u30a4\u30eb\u3067\u306f\u306a\u304fPython\u30d5\u30a1\u30a4\u30eb\u306b\u3057\u305f\u3053\u3068\u3067\u3059\u3002**\n\n```shell-session\n\u251c\u2500\u2500 model\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 tests.py\n\u251c\u2500\u2500 rtl\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 dff.py\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 Makefile\n    \u2514\u2500\u2500 run.sh\n```\n\n##DUT\nDUT\u306f\u524d\u56de\u306e8bit\u9806\u5e8f\u56de\u8def\u306b\u306a\u308a\u307e\u3059\u3002\u30ea\u30bb\u30c3\u30c8\u304c\u6b63\u8ad6\u7406\u304b\u3064\u540c\u671f\u306b\u306a\u3063\u305f\u306e\u304c\u524d\u56de\u3068\u306e\u9055\u3044\u3067\u3059\u3002\n\n```python:dff.py\nimport sys, os\nfrom veriloggen import *\n\ndef mkdff():\n    m = Module('dff')\n    width = m.Parameter('WIDTH', 8)\n    clk   = m.Input('CLK')\n    rst   = m.Input('RST')\n    d     = m.Input('D', width)\n    q     = m.OutputReg('Q', width)\n\n    m.Always(Posedge(clk))(\n        If(rst)(\n            q(0)\n        ).Else(\n            q(d)\n        ))\n\n    return m\n\n\nif __name__ == '__main__':\n    dff = mkdff()\n    verilog = dff.to_verilog()\n    print(verilog)\n```\n\n##\u30c6\u30b9\u30c8\n\u30ea\u30bb\u30c3\u30c8\u6975\u6027\u3092\u524d\u56de\u304b\u3089\u5909\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\n```python:tests.py\nimport cocotb\nfrom cocotb.triggers import Timer, RisingEdge\nfrom cocotb.result import TestFailure\nfrom cocotb.clock import Clock\n\nimport random\n\nclass DffTB(object):\n    def __init__(self, dut, dubug=True):\n        self.dut = dut\n\n    @cocotb.coroutine\n    def reset(self, duration=10000):\n        self.dut.log.info(\"Resetting DUT\")\n        self.dut.RST <= 1\n        self.dut.D <= 0\n        yield Timer(duration)\n        yield RisingEdge(self.dut.CLK)\n        self.dut.RST <= 0\n        self.dut.log.info(\"Out of reset\")\n\n    @cocotb.coroutine\n    def gen_and_check(self):\n        D = random.randint(0, 255)\n        self.dut.D = D;\n        yield RisingEdge(self.dut.CLK)\n        yield Timer(1)\n        if int(self.dut.Q) != D :\n            raise TestFailure(\n                \"[NG] Compre error. D==%s Q==%s\" %  (D, int(self.dut.Q)))\n        else :\n            self.dut.log.info(\"[OK]\")\n\n\n@cocotb.coroutine\ndef clock_gen(signal):\n    while True:\n        signal <= 0\n        yield Timer(5000)\n        signal <= 1\n        yield Timer(5000)\n\n@cocotb.test()\ndef basic_test(dut):\n    \"\"\"basic_test\"\"\"\n    tb = DffTB(dut)\n    cocotb.fork(clock_gen(dut.CLK))\n    yield RisingEdge(dut.CLK)\n    yield tb.reset()\n\n    for i in range(30):\n        yield tb.gen_and_check()\n```\n\n##\u5b9f\u884c\u30b9\u30af\u30ea\u30d7\u30c8\n\u3064\u306a\u304e\u5408\u308f\u305b\u308b\u306e\u304c\u9762\u5012\u3060\u3063\u305f\u306e\u3067\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u306b\u3057\u307e\u3057\u305f\u3002\n\n```sh:run.sh\n#!/bin/bash\n\nRTLPATH=../rtl\nif [ -e ${RTLPATH}/dff.v ]; then\n  rm ${RTLPATH}/dff.v\nfi\n\npython3 ${RTLPATH}/dff.py > ${RTLPATH}/dff.v\n\nmake\n```\n\n##\u7d50\u679c\nVeriloggen\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306aVerilog\u30b3\u30fc\u30c9\u304c\u751f\u6210\u3055\u308c\u307e\u3057\u305f\u3002\n\n```verilog:dff.v\nmodule dff #\n (\n  parameter WIDTH = 8\n\n )\n (\n  input [0:0] CLK, \ninput [0:0] RST, \ninput [(WIDTH - 1):0] D, \noutput reg [(WIDTH - 1):0] Q\n\n );\n  always @(posedge CLK)\n  begin        \n  if(RST) begin        \n  Q <= 0;\nend  \nelse begin        \n  Q <= D;\nend \nend \nendmodule\n```\n\ncocotb\u306b\u3088\u308b\u30c6\u30b9\u30c8\u7d50\u679c\u3082\u7121\u4e8b\u306b\u30aa\u30c3\u30b1\u30fc\u3067\u3059\u3002\n\n```sh\n        TESTCASE= TOPLEVEL=dff \\\n        vvp -M /tmp/cocotb/build/libs/x86_64 -m gpivpi sim_build/sim.vvp   \n     -.--ns INFO     cocotb.gpi                                GpiCommon.cpp:47   in gpi_print_registered_impl       VPI registered\n     0.00ns INFO     cocotb.gpi                                  gpi_embed.c:229  in embed_sim_init                  Running on Icarus Verilog version 0.9.6 \n     0.00ns INFO     cocotb.gpi                                  gpi_embed.c:230  in embed_sim_init                  Python interpreter initialised and cocotb loaded!\n     0.00ns INFO     cocotb.gpi                                  __init__.py:103  in _initialise_testbench           Running tests with Cocotb v1.0 from /tmp/cocotb\n     0.00ns INFO     cocotb.gpi                                  __init__.py:119  in _initialise_testbench           Seeding Python random module with 1437305945\n     0.00ns INFO     cocotb.regression                         regression.py:153  in initialise                      Found test tests.basic_test\n     0.00ns INFO     cocotb.regression                         regression.py:254  in execute                         Running test 1/1: basic_test\n     0.00ns INFO     ..tb.coroutine.basic_test.0x2353ed0       decorators.py:186  in send                            Starting test: \"basic_test\"\n                                                                                                                               Description: basic_test\n     5.00ns INFO     cocotb.dff                                     tests.py:14   in reset                           Resetting DUT\n    15.00ns INFO     cocotb.dff                                     tests.py:20   in reset                           Out of reset\n    25.00ns INFO     cocotb.dff                                     tests.py:32   in gen_and_check                   [OK]\n    35.00ns INFO     cocotb.dff                                     tests.py:32   in gen_and_check                   [OK]\n\n(\u4e2d\u7565)\n\n   295.00ns INFO     cocotb.dff                                     tests.py:32   in gen_and_check                   [OK]\n   305.00ns INFO     cocotb.dff                                     tests.py:32   in gen_and_check                   [OK]\n   315.00ns INFO     cocotb.dff                                     tests.py:32   in gen_and_check                   [OK]\n   315.00ns INFO     cocotb.regression                         regression.py:201  in handle_result                   Test Passed: basic_test\n   315.00ns INFO     cocotb.regression                         regression.py:162  in tear_down                       Passed 1 tests (0 skipped)\n   315.00ns INFO     cocotb.regression                         regression.py:168  in tear_down                       Shutting down...\n```\n\n##\u304a\u308f\u308a\u306b\n\u4eca\u5ea6\u306fAvalon\u306a\u3069\u306e\u30d0\u30b9\u3092\u7d61\u3081\u3066\u3084\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u304b\u306d\u3048\u2026\u3002\n", "tags": ["Python3.3", "Verilog", "FPGA"]}