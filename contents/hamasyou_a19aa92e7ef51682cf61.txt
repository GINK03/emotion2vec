{"context": " More than 1 year has passed since last update.capistrano v3 \u3067 deploy_via :copy \u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u3044\u3088\u3046\u306a\u306e\u3067\u81ea\u5206\u3067\u30b3\u30d4\u30fc\u3059\u308b\u30bf\u30b9\u30af\u3092\u66f8\u3044\u3066\u307f\u305f\u3002\n\u7c97\u3044\u611f\u3058\u306a\u306e\u3067\u305d\u306e\u3046\u3061\u76f4\u3059\u304b\u3082\u3002\u30e1\u30e2\u30ec\u30d9\u30eb\u3067\u3059\u3002\n\ncopy.cap\nnamespace :my do\n\n  set :my_local_tmp_dir, ->() { \"#{fetch(:tmp_dir)}/#{fetch(:application)}\" }\n\n  task :wrapper do\n    run_locally do\n      execute :mkdir, '-p', \"#{fetch(:my_local_tmp_dir)}/\"\n      execute :echo, \"'#!/bin/sh -e\\nexec /usr/bin/ssh -o PasswordAuthentication=no -o StrictHostKeyChecking=no \\\"\\$@\\\"\\n'\", '>', \"#{fetch(:my_local_tmp_dir)}/git-ssh.sh\"\n      execute :chmod, '+x', \"#{fetch(:my_local_tmp_dir)}/git-ssh.sh\"\n    end\n  end\n\n  task clone: :'my:wrapper' do\n    run_locally do\n      if test \" [ -f #{fetch(:my_local_tmp_dir)}/#{fetch(:application)}/HEAD ] \"\n        info t(:mirror_exists, at: repo_path)\n      else\n        within \"#{fetch(:my_local_tmp_dir)}\" do\n          with fetch(:git_environmental_variables) do\n            execute :git, :clone, '--mirror', repo_url, \"#{fetch(:application)}\"\n          end\n        end\n      end\n    end\n  end\n\n  task update: :'my:clone' do\n    run_locally do\n      within \"#{fetch(:my_local_tmp_dir)}/#{fetch(:application)}\" do\n        execute :git, :remote, :update\n      end\n    end\n  end\n\n  task create_release: :'my:update' do\n    run_locally do\n      within \"#{fetch(:my_local_tmp_dir)}/#{fetch(:application)}\" do\n        execute :git, :archive, '--format=tar', fetch(:branch), \"> #{fetch(:application)}.tar\"\n      end\n    end\n  end\n\n  desc 'cap deploy via copy'\n  task deploy: :'my:create_release' do\n    tar_text = nil\n    run_locally do\n      tar_text = File.open(\"#{fetch(:my_local_tmp_dir)}/#{fetch(:application)}/#{fetch(:application)}.tar\").read\n    end\n\n    on roles :all do\n      execute :mkdir, '-p', \"#{fetch(:tmp_dir)}/#{fetch(:application)}/\"\n      upload! StringIO.new(tar_text), \"#{fetch(:my_local_tmp_dir)}/#{fetch(:application)}.tar\"\n\n      execute :mkdir, '-p', release_path\n      execute :tar, '-xvf', \"#{fetch(:my_local_tmp_dir)}/#{fetch(:application)}.tar\", '-C', release_path\n    end\n  end\nend\n\n\ncapistrano v3 \u3067 deploy_via :copy \u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u3044\u3088\u3046\u306a\u306e\u3067\u81ea\u5206\u3067\u30b3\u30d4\u30fc\u3059\u308b\u30bf\u30b9\u30af\u3092\u66f8\u3044\u3066\u307f\u305f\u3002\n\u7c97\u3044\u611f\u3058\u306a\u306e\u3067\u305d\u306e\u3046\u3061\u76f4\u3059\u304b\u3082\u3002\u30e1\u30e2\u30ec\u30d9\u30eb\u3067\u3059\u3002\n\n```rb:copy.cap\nnamespace :my do\n\n  set :my_local_tmp_dir, ->() { \"#{fetch(:tmp_dir)}/#{fetch(:application)}\" }\n\n  task :wrapper do\n    run_locally do\n      execute :mkdir, '-p', \"#{fetch(:my_local_tmp_dir)}/\"\n      execute :echo, \"'#!/bin/sh -e\\nexec /usr/bin/ssh -o PasswordAuthentication=no -o StrictHostKeyChecking=no \\\"\\$@\\\"\\n'\", '>', \"#{fetch(:my_local_tmp_dir)}/git-ssh.sh\"\n      execute :chmod, '+x', \"#{fetch(:my_local_tmp_dir)}/git-ssh.sh\"\n    end\n  end\n\n  task clone: :'my:wrapper' do\n    run_locally do\n      if test \" [ -f #{fetch(:my_local_tmp_dir)}/#{fetch(:application)}/HEAD ] \"\n        info t(:mirror_exists, at: repo_path)\n      else\n        within \"#{fetch(:my_local_tmp_dir)}\" do\n          with fetch(:git_environmental_variables) do\n            execute :git, :clone, '--mirror', repo_url, \"#{fetch(:application)}\"\n          end\n        end\n      end\n    end\n  end\n\n  task update: :'my:clone' do\n    run_locally do\n      within \"#{fetch(:my_local_tmp_dir)}/#{fetch(:application)}\" do\n        execute :git, :remote, :update\n      end\n    end\n  end\n\n  task create_release: :'my:update' do\n    run_locally do\n      within \"#{fetch(:my_local_tmp_dir)}/#{fetch(:application)}\" do\n        execute :git, :archive, '--format=tar', fetch(:branch), \"> #{fetch(:application)}.tar\"\n      end\n    end\n  end\n\n  desc 'cap deploy via copy'\n  task deploy: :'my:create_release' do\n    tar_text = nil\n    run_locally do\n      tar_text = File.open(\"#{fetch(:my_local_tmp_dir)}/#{fetch(:application)}/#{fetch(:application)}.tar\").read\n    end\n\n    on roles :all do\n      execute :mkdir, '-p', \"#{fetch(:tmp_dir)}/#{fetch(:application)}/\"\n      upload! StringIO.new(tar_text), \"#{fetch(:my_local_tmp_dir)}/#{fetch(:application)}.tar\"\n\n      execute :mkdir, '-p', release_path\n      execute :tar, '-xvf', \"#{fetch(:my_local_tmp_dir)}/#{fetch(:application)}.tar\", '-C', release_path\n    end\n  end\nend\n```", "tags": ["rubygems", "Ruby", "capistrano3"]}