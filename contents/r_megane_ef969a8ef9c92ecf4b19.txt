{"context": " More than 1 year has passed since last update.\n\n\u52d5\u6a5f\nhttp://engineering.indeedblog.com/blog/2014/12/why-i-unit-test/\n\u8a18\u4e8b\u3067\u306fUnit\u30c6\u30b9\u30c8\u3068\u30b3\u30fc\u30c9\u306e\u6539\u5584\u306e\u6539\u5584\u306e\u95a2\u9023\u6027\u304c\u8ff0\u3079\u3089\u308c\u3066\u3044\u307e\u3059\u3002\n\u305d\u306e\u4e00\u4f8b\u3068\u3057\u3066\u3001\u30eb\u30fc\u30d7\u51e6\u7406\u306e\u62bd\u8c61\u5316\u306e\u30b5\u30f3\u30d7\u30eb\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u306e\u30b3\u30fc\u30c9\u306b\u7740\u60f3\u3092\u5f97\u3066\u3001\u30c9\u30e1\u30a4\u30f3\u30ed\u30b8\u30c3\u30af\u304c\u5206\u96e2\u306b\u95a2\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u66f8\u3044\u3066\u898b\u3088\u3046\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\uff08\u3042\u3068\u3001\u305d\u308d\u305d\u308dROM\u5c02\u304b\u3089\u8131\u3057\u3088\u3046\u304b\u306a\u3068\u3002\u3002\u3002\uff09\n\n\u6539\u5584\u524d\n\ndouble bestValue = Double.MIN_VALUE;\nJob bestJob = null;\nfor (Job job : jobs) {\n  if (score(job) > bestValue) {\n    bestJob = job;\n  }\n}\nreturn bestJob;\n\n\n\n\u6539\u5584\u5f8c\n\npublic static <J> J argMax(Iterable<J> collection,\n                           Function<J, Double> score) {\n  return Ordering.natural().onResultOf(score).max(collection);\n}\n\n\n\u3053\u306e\u4f8b\u306e\u3088\u3046\u306b\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3092\u91cd\u306d\u308b\u4e8b\u3067\u51e6\u7406\uff08\u3053\u306e\u4f8b\u3067\u306fscore\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30f3\uff09\u3068\u624b\u7d9a\u304d\u304c\u7dba\u9e97\u306b\u5206\u96e2\u3055\u308c\u307e\u3059\u3002\n\u3059\u308b\u3068\u3001\u672c\u6765\u884c\u3044\u305f\u3044\u51e6\u7406\u304c\u898b\u901a\u3057\u304c\u826f\u304f\u306a\u308a\u307e\u3059\u3002\n\uff08\u30c6\u30b9\u30bf\u30d3\u30ea\u30c6\u30a3\u3001\u30e1\u30f3\u30c6\u30ca\u30f3\u30b7\u30d3\u30ea\u30c6\u30a3\u306e\u5411\u4e0a\uff09\n\u305d\u3053\u3067\u3001\u30c9\u30e1\u30a4\u30f3\u3092\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066\u62bd\u51fa\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3059\u308b\u3092\u66f8\u3044\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\n\u4f53\u91cd\u3001\u8eab\u9577\u3001\u751f\u6d3b\u7fd2\u6163\u3067\u69cb\u6210\u3055\u308c\u308bPerson\u304b\u3089\u5065\u5eb7\u306a\u4eba\u306e\u307f\u3092\u62bd\u51fa\u3059\u308b\u3068\u30b1\u30fc\u30b9\u3092\u8003\u3048\u3066\u898b\u307e\u3059\u3002\n\u3053\u3053\u3067\u3001\u5065\u5eb7\u306a\u4eba\u306e\u5224\u5b9a\u3092\u696d\u52d9\u30c9\u30e1\u30a4\u30f3\u3068\u3057\u307e\u3059\u3002\n\u307e\u305a\u306f\u3001Person\u30af\u30e9\u30b9\n\nimport java.util.List;\n\nimport lombok.Builder;\nimport lombok.Getter;\nimport lombok.Singular;\nimport lombok.Value;\n\n@Builder\n@Value\npublic class Person {\n    String name;\n    double height;\n    double weight;\n    @Singular(\"lifestyleHabit\") List<String> lifestyleHabits;\n    // \u672c\u6765\u306f\u91cd\u3044\u8a08\u7b97\u51e6\u7406\u7b49\u3067\u7528\u3044\u308b\u5b9f\u88c5\u3067\u3059\u3002\u3053\u308c\u4f4d\u306a\u3089\u3001\u76f4\u63a5calcBmi\u3092getBmi\u3068\u3057\u3066\u516c\u958b\u3057\u3066\u3044\u3044\u304b\u3068\u3002\n    @Getter(lazy=true) double bmi = calcBmi();\n\n    private double calcBmi(){\n        double bmi = this.weight / Math.pow(this.height / 100, 2);\n        return bmi;\n    }\n}\n\n\n\u7d9a\u3044\u3066\u5065\u5eb7\u306a\u4eba\u306e\u5224\u5b9a\u3001\u62bd\u51fa\u3092\u884c\u3046HealthLogic\u30af\u30e9\u30b9\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.function.Predicate;\nimport java.util.stream.Collectors;\n\npublic class HealthLogic {\n\n        // \u624b\u7d9a\u304d\n    public List<Person> retrieveHealthyPerson(List<Person> persons) {\n        Predicate<Person> isHealthy = buildHealthPrediactor();\n        return persons.stream().filter(isHealthy).collect(Collectors.toList());\n    }\n\n        // \u4ee5\u4e0b\u3001\u30c9\u30e1\u30a4\u30f3\u30ed\u30b8\u30c3\u30af\n    public Predicate<Person> buildHealthPrediactor() {\n        return buildIdealBmiPrediactor().and(buildNoUnhealthyHabitPrediactor());\n    }\n\n    public Predicate<Person> buildIdealBmiPrediactor() {\n        final double MIN_BMI = 18.5;\n        final double MAX_BMI = 25.0;\n\n        return p -> MIN_BMI < p.getBmi() && MAX_BMI > p.getBmi();\n    }\n\n    public Predicate<Person> buildNoUnhealthyHabitPrediactor() {\n        List<String> badHabits = Arrays.asList(\"smoker\");\n        return p -> !p.getLifestyleHabits().stream().anyMatch(badHabits::contains);\n    }\n\n}\n\n\u6700\u5f8c\u306b\u30c6\u30b9\u30c8\nimport static org.testng.Assert.assertEquals;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.testng.annotations.Test;\n\nimport domain.sample.HealthLogic;\nimport domain.sample.Person;\n\npublic class HealthLogicTest {\n\n    @Test\n    public void retrieveHealthyPerson() {\n        Person p1 = Person.builder().name(\"fat\").height(169).weight(73).build();\n        Person p2 = Person.builder().name(\"normal\").height(169).weight(63).build();\n        Person p3 = Person.builder().name(\"smoker\").height(169).weight(63).lifestyleHabit(\"smoker\").build();\n        Person p4 = Person.builder().name(\"thin\").height(169).weight(43).build();\n\n        List<Person> persons = new ArrayList<>();\n        persons.addAll(Arrays.asList(p1, p2, p3, p4));\n\n        HealthLogic testee = new HealthLogic();\n\n        List<Person> result = testee.retrieveHealthyPerson(persons);\n        assertEquals(result.size(), 1);\n        assertEquals(result.get(0), p2);\n\n        // System.out.println(result);\n        // [Person(name=normal, height=169.0, weight=63.0, lifestyleHabits=[],\n        // bmi=22.058051188683873)]\n\n    }\n\n        // \u4ee5\u4e0b\u7565...\n    @Test\n    public void buildHealthPrediactor() {\n        throw new RuntimeException(\"Test not implemented\");\n    }\n\n    @Test\n    public void buildIdealBmiPrediactor() {\n        throw new RuntimeException(\"Test not implemented\");\n    }\n\n    @Test\n    public void buildNoUnhealthyHabitPrediactor() {\n        throw new RuntimeException(\"Test not implemented\");\n    }\n\n}\n\n\n\u30b5\u30f3\u30d7\u30eb\u306f\u624b\u629c\u304d\u3067HealthLogic\u30af\u30e9\u30b9\u5185\u306b\u30c9\u30e1\u30a4\u30f3\u30ed\u30b8\u30c3\u30af\u3068\u624b\u7d9a\u304d\u3092\u307e\u3068\u3081\u3066\u5b9f\u88c5\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3059\u3002\n\u5b9f\u696d\u52d9\u3067\u306f\u30c9\u30e1\u30a4\u30f3\u30ed\u30b8\u30c3\u30af\u306e\u80a5\u5927\u5316\u306b\u5fdc\u3058\u3001\u5225\u30af\u30e9\u30b9\u306b\u51fa\u3059\u7b49\u306e\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3092\u884c\u3063\u3066\u3044\u304d\u3001\u898b\u901a\u3057\u304c\u60aa\u304f\u306a\u3089\u306a\u3044\u3088\u3046\u5fc3\u639b\u3051\u308b\u3068\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n#\u52d5\u6a5f\n\nhttp://engineering.indeedblog.com/blog/2014/12/why-i-unit-test/\n\n\u8a18\u4e8b\u3067\u306fUnit\u30c6\u30b9\u30c8\u3068\u30b3\u30fc\u30c9\u306e\u6539\u5584\u306e\u6539\u5584\u306e\u95a2\u9023\u6027\u304c\u8ff0\u3079\u3089\u308c\u3066\u3044\u307e\u3059\u3002\n\u305d\u306e\u4e00\u4f8b\u3068\u3057\u3066\u3001\u30eb\u30fc\u30d7\u51e6\u7406\u306e\u62bd\u8c61\u5316\u306e\u30b5\u30f3\u30d7\u30eb\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u3053\u306e\u30b3\u30fc\u30c9\u306b\u7740\u60f3\u3092\u5f97\u3066\u3001\u30c9\u30e1\u30a4\u30f3\u30ed\u30b8\u30c3\u30af\u304c\u5206\u96e2\u306b\u95a2\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u66f8\u3044\u3066\u898b\u3088\u3046\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\uff08\u3042\u3068\u3001\u305d\u308d\u305d\u308dROM\u5c02\u304b\u3089\u8131\u3057\u3088\u3046\u304b\u306a\u3068\u3002\u3002\u3002\uff09\n\n\n##\u6539\u5584\u524d\n```java\n\ndouble bestValue = Double.MIN_VALUE;\nJob bestJob = null;\nfor (Job job : jobs) {\n  if (score(job) > bestValue) {\n    bestJob = job;\n  }\n}\nreturn bestJob;\n\n```\n\n\n##\u6539\u5584\u5f8c\n```java\n\npublic static <J> J argMax(Iterable<J> collection,\n                           Function<J, Double> score) {\n  return Ordering.natural().onResultOf(score).max(collection);\n}\n\n```\n\n\u3053\u306e\u4f8b\u306e\u3088\u3046\u306b\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3092\u91cd\u306d\u308b\u4e8b\u3067\u51e6\u7406\uff08\u3053\u306e\u4f8b\u3067\u306f```score```\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30f3\uff09\u3068\u624b\u7d9a\u304d\u304c\u7dba\u9e97\u306b\u5206\u96e2\u3055\u308c\u307e\u3059\u3002\n\u3059\u308b\u3068\u3001\u672c\u6765\u884c\u3044\u305f\u3044\u51e6\u7406\u304c\u898b\u901a\u3057\u304c\u826f\u304f\u306a\u308a\u307e\u3059\u3002\n\uff08\u30c6\u30b9\u30bf\u30d3\u30ea\u30c6\u30a3\u3001\u30e1\u30f3\u30c6\u30ca\u30f3\u30b7\u30d3\u30ea\u30c6\u30a3\u306e\u5411\u4e0a\uff09\n\n\u305d\u3053\u3067\u3001\u30c9\u30e1\u30a4\u30f3\u3092\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066\u62bd\u51fa\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3059\u308b\u3092\u66f8\u3044\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n#\u30b5\u30f3\u30d7\u30eb\n\n\u4f53\u91cd\u3001\u8eab\u9577\u3001\u751f\u6d3b\u7fd2\u6163\u3067\u69cb\u6210\u3055\u308c\u308bPerson\u304b\u3089\u5065\u5eb7\u306a\u4eba\u306e\u307f\u3092\u62bd\u51fa\u3059\u308b\u3068\u30b1\u30fc\u30b9\u3092\u8003\u3048\u3066\u898b\u307e\u3059\u3002\n\u3053\u3053\u3067\u3001**\u5065\u5eb7\u306a\u4eba\u306e\u5224\u5b9a**\u3092\u696d\u52d9\u30c9\u30e1\u30a4\u30f3\u3068\u3057\u307e\u3059\u3002\n\n\u307e\u305a\u306f\u3001```Person```\u30af\u30e9\u30b9\n\n```java\n\nimport java.util.List;\n\nimport lombok.Builder;\nimport lombok.Getter;\nimport lombok.Singular;\nimport lombok.Value;\n\n@Builder\n@Value\npublic class Person {\n\tString name;\n\tdouble height;\n\tdouble weight;\n\t@Singular(\"lifestyleHabit\") List<String> lifestyleHabits;\n\t// \u672c\u6765\u306f\u91cd\u3044\u8a08\u7b97\u51e6\u7406\u7b49\u3067\u7528\u3044\u308b\u5b9f\u88c5\u3067\u3059\u3002\u3053\u308c\u4f4d\u306a\u3089\u3001\u76f4\u63a5calcBmi\u3092getBmi\u3068\u3057\u3066\u516c\u958b\u3057\u3066\u3044\u3044\u304b\u3068\u3002\n\t@Getter(lazy=true) double bmi = calcBmi();\n\t\n\tprivate double calcBmi(){\n\t\tdouble bmi = this.weight / Math.pow(this.height / 100, 2);\n\t\treturn bmi;\n\t}\n}\n\n```\n\n\u7d9a\u3044\u3066\u5065\u5eb7\u306a\u4eba\u306e\u5224\u5b9a\u3001\u62bd\u51fa\u3092\u884c\u3046```HealthLogic```\u30af\u30e9\u30b9\n\n```java\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.function.Predicate;\nimport java.util.stream.Collectors;\n\npublic class HealthLogic {\n\n        // \u624b\u7d9a\u304d\n\tpublic List<Person> retrieveHealthyPerson(List<Person> persons) {\n\t\tPredicate<Person> isHealthy = buildHealthPrediactor();\n\t\treturn persons.stream().filter(isHealthy).collect(Collectors.toList());\n\t}\n\n        // \u4ee5\u4e0b\u3001\u30c9\u30e1\u30a4\u30f3\u30ed\u30b8\u30c3\u30af\n\tpublic Predicate<Person> buildHealthPrediactor() {\n\t\treturn buildIdealBmiPrediactor().and(buildNoUnhealthyHabitPrediactor());\n\t}\n\n\tpublic Predicate<Person> buildIdealBmiPrediactor() {\n\t\tfinal double MIN_BMI = 18.5;\n\t\tfinal double MAX_BMI = 25.0;\n\n\t\treturn p -> MIN_BMI < p.getBmi() && MAX_BMI > p.getBmi();\n\t}\n\n\tpublic Predicate<Person> buildNoUnhealthyHabitPrediactor() {\n\t\tList<String> badHabits = Arrays.asList(\"smoker\");\n\t\treturn p -> !p.getLifestyleHabits().stream().anyMatch(badHabits::contains);\n\t}\n\n}\n```\n\n\u6700\u5f8c\u306b\u30c6\u30b9\u30c8\n\n```java\nimport static org.testng.Assert.assertEquals;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.testng.annotations.Test;\n\nimport domain.sample.HealthLogic;\nimport domain.sample.Person;\n\npublic class HealthLogicTest {\n\n\t@Test\n\tpublic void retrieveHealthyPerson() {\n\t\tPerson p1 = Person.builder().name(\"fat\").height(169).weight(73).build();\n\t\tPerson p2 = Person.builder().name(\"normal\").height(169).weight(63).build();\n\t\tPerson p3 = Person.builder().name(\"smoker\").height(169).weight(63).lifestyleHabit(\"smoker\").build();\n\t\tPerson p4 = Person.builder().name(\"thin\").height(169).weight(43).build();\n\n\t\tList<Person> persons = new ArrayList<>();\n\t\tpersons.addAll(Arrays.asList(p1, p2, p3, p4));\n\n\t\tHealthLogic testee = new HealthLogic();\n\n\t\tList<Person> result = testee.retrieveHealthyPerson(persons);\n\t\tassertEquals(result.size(), 1);\n\t\tassertEquals(result.get(0), p2);\n\n\t\t// System.out.println(result);\n\t\t// [Person(name=normal, height=169.0, weight=63.0, lifestyleHabits=[],\n\t\t// bmi=22.058051188683873)]\n\n\t}\n\n        // \u4ee5\u4e0b\u7565...\n\t@Test\n\tpublic void buildHealthPrediactor() {\n\t\tthrow new RuntimeException(\"Test not implemented\");\n\t}\n\n\t@Test\n\tpublic void buildIdealBmiPrediactor() {\n\t\tthrow new RuntimeException(\"Test not implemented\");\n\t}\n\n\t@Test\n\tpublic void buildNoUnhealthyHabitPrediactor() {\n\t\tthrow new RuntimeException(\"Test not implemented\");\n\t}\n\n}\n\n```\n\n\u30b5\u30f3\u30d7\u30eb\u306f\u624b\u629c\u304d\u3067```HealthLogic```\u30af\u30e9\u30b9\u5185\u306b\u30c9\u30e1\u30a4\u30f3\u30ed\u30b8\u30c3\u30af\u3068\u624b\u7d9a\u304d\u3092\u307e\u3068\u3081\u3066\u5b9f\u88c5\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3059\u3002\n\u5b9f\u696d\u52d9\u3067\u306f\u30c9\u30e1\u30a4\u30f3\u30ed\u30b8\u30c3\u30af\u306e\u80a5\u5927\u5316\u306b\u5fdc\u3058\u3001\u5225\u30af\u30e9\u30b9\u306b\u51fa\u3059\u7b49\u306e\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3092\u884c\u3063\u3066\u3044\u304d\u3001\u898b\u901a\u3057\u304c\u60aa\u304f\u306a\u3089\u306a\u3044\u3088\u3046\u5fc3\u639b\u3051\u308b\u3068\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["java8"]}