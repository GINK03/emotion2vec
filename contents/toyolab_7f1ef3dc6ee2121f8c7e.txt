{"context": "\n\n\u306f\u3058\u3081\u306b\nPython\u30b3\u30fc\u30c9\u3092Numba\u3067\u9ad8\u901f\u5316\u3057\u305f\u3068\u304d\u306e\u30e1\u30e2\n\u3067\u3001Numba\u304cfor\u6587\u3092\u4f7f\u3063\u305f\u30c6\u30af\u30cb\u30ab\u30eb\u6307\u6a19\u95a2\u6570\u306e\u9ad8\u901f\u5316\u306b\u52b9\u679c\u304c\u3042\u308b\u3053\u3068\u306f\u308f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u307b\u304b\u306bif\u6587\u3092\u591a\u7528\u3059\u308b\u6307\u6a19\u3082\u3042\u308a\u307e\u3059\u3002\n\u305d\u306e\u3072\u3068\u3064\u306b\u30d1\u30e9\u30dc\u30ea\u30c3\u30afSAR\u3068\u3044\u3046\u306e\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u7279\u306b\u73cd\u3057\u3044\u6307\u6a19\u3067\u306f\u306a\u304f\u3001\u5272\u3068\u30dd\u30d4\u30e5\u30e9\u30fc\u306a\u3082\u306e\u3067\u3059\u3002\u305f\u3060\u3001\u4e0a\u6607\u30e2\u30fc\u30c9\u3068\u4e0b\u964d\u30e2\u30fc\u30c9\u304c\u5207\u308a\u66ff\u308f\u3063\u305f\u308a\u3001\u30b9\u30c6\u30c3\u30d7\u5e45\u304c\u5909\u5316\u3057\u305f\u308a\u3059\u308b\u306e\u3067\u3001\u3069\u3046\u3057\u3066\u3082for\u6587\u3060\u3051\u3067\u306f\u8a18\u8ff0\u3067\u304d\u307e\u305b\u3093\u3002MetaTrader\u306e\u30c6\u30af\u30cb\u30ab\u30eb\u6307\u6a19\u3092Python\u306b\u79fb\u690d\u3059\u308b\u969b\u306b\u4e00\u756a\u6700\u5f8c\u306b\u306a\u3063\u305f\u3082\u306e\u3067\u3059\u3002\n\u4eca\u56de\u306f\u3053\u308c\u3092\u9ad8\u901f\u5316\u3057\u305f\u3068\u304d\u306e\u30e1\u30e2\u3067\u3059\u3002\n\n\u30d1\u30e9\u30dc\u30ea\u30c3\u30afSAR\u306ePython\u30b3\u30fc\u30c9\nimport numpy as np\nimport pandas as pd\ndataM1 = pd.read_csv('DAT_ASCII_EURUSD_M1_2015.csv', sep=';',\n                     names=('Time','Open','High','Low','Close', ''),\n                     index_col='Time', parse_dates=True)\n\ndef iSAR(df, step, maximum):\n    last_period = 0\n    dir_long = True\n    ACC = step\n    SAR = df['Close'].copy()\n    for i in range(1,len(df)):\n        last_period += 1    \n        if dir_long == True:\n            Ep1 = df['High'][i-last_period:i].max()\n            SAR[i] = SAR[i-1]+ACC*(Ep1-SAR[i-1])\n            Ep0 = max([Ep1, df['High'][i]])\n            if Ep0 > Ep1 and ACC+step <= maximum: ACC+=step\n            if SAR[i] > df['Low'][i]:\n                dir_long = False\n                SAR[i] = Ep0\n                last_period = 0\n                ACC = step\n        else:\n            Ep1 = df['Low'][i-last_period:i].min()\n            SAR[i] = SAR[i-1]+ACC*(Ep1-SAR[i-1])\n            Ep0 = min([Ep1, df['Low'][i]])\n            if Ep0 < Ep1 and ACC+step <= maximum: ACC+=step\n            if SAR[i] < df['High'][i]:\n                dir_long = True\n                SAR[i] = Ep0\n                last_period = 0\n                ACC = step\n    return SAR\n\n%timeit y = iSAR(dataM1, 0.02, 0.2)\n\nfor\u6587\u306f\uff11\u91cd\u3067\u3059\u304c\u3001\u305d\u308c\u306a\u308a\u306b\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002\n1 loop, best of 3: 1min 19s per loop\n\n\nNumba\u3067\u9ad8\u901f\u5316\n\u307e\u305a\u3001Numba\u3067\u9ad8\u901f\u5316\u3057\u3066\u307f\u307e\u3059\u3002pandas\u306e\u914d\u5217\u3092numpy\u306e\u914d\u5217\u306b\u5909\u3048\u3066@jit\u3092\u8ffd\u52a0\u3059\u308b\u3060\u3051\u3067\u3059\u3002\nfrom numba import jit\n@jit\ndef iSARjit(df, step, maximum):\n    last_period = 0\n    dir_long = True\n    ACC = step\n    SAR = df['Close'].values.copy()\n    High = df['High'].values\n    Low = df['Low'].values\n    for i in range(1,len(SAR)):\n        last_period += 1    \n        if dir_long == True:\n            Ep1 = High[i-last_period:i].max()\n            SAR[i] = SAR[i-1]+ACC*(Ep1-SAR[i-1])\n            Ep0 = max([Ep1, High[i]])\n            if Ep0 > Ep1 and ACC+step <= maximum: ACC+=step\n            if SAR[i] > Low[i]:\n                dir_long = False\n                SAR[i] = Ep0\n                last_period = 0\n                ACC = step\n        else:\n            Ep1 = Low[i-last_period:i].min()\n            SAR[i] = SAR[i-1]+ACC*(Ep1-SAR[i-1])\n            Ep0 = min([Ep1, Low[i]])\n            if Ep0 < Ep1 and ACC+step <= maximum: ACC+=step\n            if SAR[i] < High[i]:\n                dir_long = True\n                SAR[i] = Ep0\n                last_period = 0\n                ACC = step\n    return SAR\n\n%timeit y = iSARjit(dataM1, 0.02, 0.2)\n\n1 loop, best of 3: 1.43 s per loop\n\n55\u500d\u307b\u3069\u901f\u304f\u306a\u308a\u307e\u3057\u305f\u3002\u30b3\u30fc\u30c9\u306e\u4fee\u6b63\u306f\u307b\u3068\u3093\u3069\u306a\u3044\u306e\u3067\u3001\u307e\u3042\u307e\u3042\u306e\u7d50\u679c\u3067\u3059\u3002\n\nCython\u3067\u9ad8\u901f\u5316\n\u6b21\u306bCython\u3067\u9ad8\u901f\u5316\u3057\u3066\u307f\u307e\u3059\u3002Cython\u306f\u8a2d\u5b9a\u304c\u9762\u5012\u304b\u3068\u601d\u3063\u3066\u3044\u307e\u3057\u305f\u304c\u3001Jupyter notebook\u3060\u3068\u3001\u7d50\u69cb\u7c21\u5358\u306b\u5c0e\u5165\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\u305f\u3060\u3001\u5916\u90e8\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u5229\u7528\u3059\u308b\u306e\u3067\u3001Visual C++\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002Anaconda\u3092\u30d3\u30eb\u30c9\u3057\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u5408\u308f\u305b\u308b\u5fc5\u8981\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u4eca\u56de\u306f\u4ee5\u4e0b\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3057\u305f\u3002\nVisual Studio Community 2015\n\u6700\u521d\u306f\u30b3\u30fc\u30c9\u306f\u5909\u3048\u305a\u306bCython\u306e\u8a2d\u5b9a\u3060\u3051\u884c\u3063\u305f\u5834\u5408\u3067\u3059\u3002\n%load_ext Cython\n\n%%cython\ncimport numpy\ncimport cython\ndef iSAR_c0(df, step, maximum):\n    last_period = 0\n    dir_long = True\n    ACC = step\n    SAR = df['Close'].values.copy()\n    High = df['High'].values\n    Low = df['Low'].values\n    for i in range(1,len(SAR)):\n        last_period += 1    \n        if dir_long == True:\n            Ep1 = High[i-last_period:i].max()\n            SAR[i] = SAR[i-1]+ACC*(Ep1-SAR[i-1])\n            Ep0 = max([Ep1, High[i]])\n            if Ep0 > Ep1 and ACC+step <= maximum: ACC+=step\n            if SAR[i] > Low[i]:\n                dir_long = False\n                SAR[i] = Ep0\n                last_period = 0\n                ACC = step\n        else:\n            Ep1 = Low[i-last_period:i].min()\n            SAR[i] = SAR[i-1]+ACC*(Ep1-SAR[i-1])\n            Ep0 = min([Ep1, Low[i]])\n            if Ep0 < Ep1 and ACC+step <= maximum: ACC+=step\n            if SAR[i] < High[i]:\n                dir_long = True\n                SAR[i] = Ep0\n                last_period = 0\n                ACC = step\n    return SAR\n\n%timeit y = iSAR_c0(dataM1, 0.02, 0.2)\n\n\u7d50\u679c\n1 loop, best of 3: 1.07 s per loop\n\n\u540c\u3058\u30b3\u30fc\u30c9\u306e\u307e\u307e\u3067\u3082Cython\u306e\u65b9\u304c\u5c11\u3057\u901f\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\u6b21\u306bcdef\u3067\u5909\u6570\u306e\u578b\u5ba3\u8a00\u3092\u8ffd\u52a0\u3057\u305f\u5834\u5408\u3067\u3059\u3002\n%%cython\ncimport numpy\ncimport cython\ndef iSARnew(df, double step, double maximum):\n    cdef int last_period = 0\n    dir_long = True\n    cdef double ACC = step\n    cdef numpy.ndarray[numpy.float64_t, ndim=1] SAR = df['Close'].values.copy()\n    cdef numpy.ndarray[numpy.float64_t, ndim=1] High = df['High'].values\n    cdef numpy.ndarray[numpy.float64_t, ndim=1] Low = df['Low'].values\n    cdef double Ep0, Ep1\n    cdef int i, N=len(SAR)\n    for i in range(1,N):\n        last_period += 1    \n        if dir_long == True:\n            Ep1 = max(High[i-last_period:i])\n            SAR[i] = SAR[i-1]+ACC*(Ep1-SAR[i-1])\n            Ep0 = max([Ep1, High[i]])\n            if Ep0 > Ep1 and ACC+step <= maximum: ACC+=step\n            if SAR[i] > Low[i]:\n                dir_long = False\n                SAR[i] = Ep0\n                last_period = 0\n                ACC = step\n        else:\n            Ep1 = min(Low[i-last_period:i])\n            SAR[i] = SAR[i-1]+ACC*(Ep1-SAR[i-1])\n            Ep0 = min([Ep1, Low[i]])\n            if Ep0 < Ep1 and ACC+step <= maximum: ACC+=step\n            if SAR[i] < High[i]:\n                dir_long = True\n                SAR[i] = Ep0\n                last_period = 0\n                ACC = step\n    return SAR\n\n%timeit y = iSARnew(dataM1, 0.02, 0.2)\n\n\u7d50\u679c\u306f\n1 loop, best of 3: 533 ms per loop\n\n\u3067\u3057\u305f\u3002\u3055\u3089\u306b\uff12\u500d\u304f\u3089\u3044\u901f\u304f\u306a\u308a\u307e\u3057\u305f\u3002\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3059\u308c\u3070\u3082\u3063\u3068\u901f\u304f\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u30b3\u30fc\u30c9\u306e\u53ef\u8aad\u6027\u304c\u60aa\u304f\u306a\u308b\u304a\u305d\u308c\u304c\u3042\u308b\u306e\u3067\u3001\u3053\u3053\u307e\u3067\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u307e\u3068\u3081\nfor\u6587\u3060\u3051\u306e\u5834\u5408\u3001Numba\u3067\u3082\u7d50\u69cb\u9ad8\u901f\u5316\u306e\u52b9\u679c\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3001if\u6587\u3082\u5165\u3063\u3066\u304f\u308b\u3068\u3001\u52b9\u679c\u304c\u4e0b\u304c\u3063\u3066\u304d\u307e\u3059\u3002\u3082\u3046\u5c11\u3057\u901f\u304f\u3057\u305f\u3044\u5834\u5408\u306b\u306f\u3001\u591a\u5c11\u30b3\u30fc\u30c9\u306e\u4fee\u6b63\u3092\u4f34\u3044\u307e\u3059\u304c\u3001Cython\u4f7f\u3046\u306e\u3082\u3042\u308a\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n#\u306f\u3058\u3081\u306b\n[Python\u30b3\u30fc\u30c9\u3092Numba\u3067\u9ad8\u901f\u5316\u3057\u305f\u3068\u304d\u306e\u30e1\u30e2](http://qiita.com/toyolab/items/b5d95bd38b3c7c66b510)\n\u3067\u3001Numba\u304cfor\u6587\u3092\u4f7f\u3063\u305f\u30c6\u30af\u30cb\u30ab\u30eb\u6307\u6a19\u95a2\u6570\u306e\u9ad8\u901f\u5316\u306b\u52b9\u679c\u304c\u3042\u308b\u3053\u3068\u306f\u308f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u307b\u304b\u306bif\u6587\u3092\u591a\u7528\u3059\u308b\u6307\u6a19\u3082\u3042\u308a\u307e\u3059\u3002\n\n\u305d\u306e\u3072\u3068\u3064\u306b[\u30d1\u30e9\u30dc\u30ea\u30c3\u30afSAR](http://www.metatrader5.com/ja/terminal/help/indicators/trend_indicators/psar)\u3068\u3044\u3046\u306e\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u7279\u306b\u73cd\u3057\u3044\u6307\u6a19\u3067\u306f\u306a\u304f\u3001\u5272\u3068\u30dd\u30d4\u30e5\u30e9\u30fc\u306a\u3082\u306e\u3067\u3059\u3002\u305f\u3060\u3001\u4e0a\u6607\u30e2\u30fc\u30c9\u3068\u4e0b\u964d\u30e2\u30fc\u30c9\u304c\u5207\u308a\u66ff\u308f\u3063\u305f\u308a\u3001\u30b9\u30c6\u30c3\u30d7\u5e45\u304c\u5909\u5316\u3057\u305f\u308a\u3059\u308b\u306e\u3067\u3001\u3069\u3046\u3057\u3066\u3082for\u6587\u3060\u3051\u3067\u306f\u8a18\u8ff0\u3067\u304d\u307e\u305b\u3093\u3002MetaTrader\u306e\u30c6\u30af\u30cb\u30ab\u30eb\u6307\u6a19\u3092Python\u306b\u79fb\u690d\u3059\u308b\u969b\u306b\u4e00\u756a\u6700\u5f8c\u306b\u306a\u3063\u305f\u3082\u306e\u3067\u3059\u3002\n\n\u4eca\u56de\u306f\u3053\u308c\u3092\u9ad8\u901f\u5316\u3057\u305f\u3068\u304d\u306e\u30e1\u30e2\u3067\u3059\u3002\n\n#\u30d1\u30e9\u30dc\u30ea\u30c3\u30afSAR\u306ePython\u30b3\u30fc\u30c9\n\n````py\nimport numpy as np\nimport pandas as pd\ndataM1 = pd.read_csv('DAT_ASCII_EURUSD_M1_2015.csv', sep=';',\n                     names=('Time','Open','High','Low','Close', ''),\n                     index_col='Time', parse_dates=True)\n\ndef iSAR(df, step, maximum):\n    last_period = 0\n    dir_long = True\n    ACC = step\n    SAR = df['Close'].copy()\n    for i in range(1,len(df)):\n        last_period += 1    \n        if dir_long == True:\n            Ep1 = df['High'][i-last_period:i].max()\n            SAR[i] = SAR[i-1]+ACC*(Ep1-SAR[i-1])\n            Ep0 = max([Ep1, df['High'][i]])\n            if Ep0 > Ep1 and ACC+step <= maximum: ACC+=step\n            if SAR[i] > df['Low'][i]:\n                dir_long = False\n                SAR[i] = Ep0\n                last_period = 0\n                ACC = step\n        else:\n            Ep1 = df['Low'][i-last_period:i].min()\n            SAR[i] = SAR[i-1]+ACC*(Ep1-SAR[i-1])\n            Ep0 = min([Ep1, df['Low'][i]])\n            if Ep0 < Ep1 and ACC+step <= maximum: ACC+=step\n            if SAR[i] < df['High'][i]:\n                dir_long = True\n                SAR[i] = Ep0\n                last_period = 0\n                ACC = step\n    return SAR\n\n%timeit y = iSAR(dataM1, 0.02, 0.2)\n````\n\nfor\u6587\u306f\uff11\u91cd\u3067\u3059\u304c\u3001\u305d\u308c\u306a\u308a\u306b\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002\n\n    1 loop, best of 3: 1min 19s per loop\n\n#Numba\u3067\u9ad8\u901f\u5316\n\u307e\u305a\u3001Numba\u3067\u9ad8\u901f\u5316\u3057\u3066\u307f\u307e\u3059\u3002pandas\u306e\u914d\u5217\u3092numpy\u306e\u914d\u5217\u306b\u5909\u3048\u3066`@jit`\u3092\u8ffd\u52a0\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\n````py\nfrom numba import jit\n@jit\ndef iSARjit(df, step, maximum):\n    last_period = 0\n    dir_long = True\n    ACC = step\n    SAR = df['Close'].values.copy()\n    High = df['High'].values\n    Low = df['Low'].values\n    for i in range(1,len(SAR)):\n        last_period += 1    \n        if dir_long == True:\n            Ep1 = High[i-last_period:i].max()\n            SAR[i] = SAR[i-1]+ACC*(Ep1-SAR[i-1])\n            Ep0 = max([Ep1, High[i]])\n            if Ep0 > Ep1 and ACC+step <= maximum: ACC+=step\n            if SAR[i] > Low[i]:\n                dir_long = False\n                SAR[i] = Ep0\n                last_period = 0\n                ACC = step\n        else:\n            Ep1 = Low[i-last_period:i].min()\n            SAR[i] = SAR[i-1]+ACC*(Ep1-SAR[i-1])\n            Ep0 = min([Ep1, Low[i]])\n            if Ep0 < Ep1 and ACC+step <= maximum: ACC+=step\n            if SAR[i] < High[i]:\n                dir_long = True\n                SAR[i] = Ep0\n                last_period = 0\n                ACC = step\n    return SAR\n\n%timeit y = iSARjit(dataM1, 0.02, 0.2)\n````\n    1 loop, best of 3: 1.43 s per loop\n\n55\u500d\u307b\u3069\u901f\u304f\u306a\u308a\u307e\u3057\u305f\u3002\u30b3\u30fc\u30c9\u306e\u4fee\u6b63\u306f\u307b\u3068\u3093\u3069\u306a\u3044\u306e\u3067\u3001\u307e\u3042\u307e\u3042\u306e\u7d50\u679c\u3067\u3059\u3002\n\n#Cython\u3067\u9ad8\u901f\u5316\n\u6b21\u306bCython\u3067\u9ad8\u901f\u5316\u3057\u3066\u307f\u307e\u3059\u3002Cython\u306f\u8a2d\u5b9a\u304c\u9762\u5012\u304b\u3068\u601d\u3063\u3066\u3044\u307e\u3057\u305f\u304c\u3001Jupyter notebook\u3060\u3068\u3001\u7d50\u69cb\u7c21\u5358\u306b\u5c0e\u5165\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\u305f\u3060\u3001\u5916\u90e8\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u5229\u7528\u3059\u308b\u306e\u3067\u3001Visual C++\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002Anaconda\u3092\u30d3\u30eb\u30c9\u3057\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u5408\u308f\u305b\u308b\u5fc5\u8981\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u4eca\u56de\u306f\u4ee5\u4e0b\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3057\u305f\u3002\n\n[Visual Studio Community 2015](https://www.visualstudio.com/ja-jp/products/visual-studio-community-vs.aspx)\n\n\u6700\u521d\u306f\u30b3\u30fc\u30c9\u306f\u5909\u3048\u305a\u306bCython\u306e\u8a2d\u5b9a\u3060\u3051\u884c\u3063\u305f\u5834\u5408\u3067\u3059\u3002\n\n````py\n%load_ext Cython\n````\n````py\n%%cython\ncimport numpy\ncimport cython\ndef iSAR_c0(df, step, maximum):\n    last_period = 0\n    dir_long = True\n    ACC = step\n    SAR = df['Close'].values.copy()\n    High = df['High'].values\n    Low = df['Low'].values\n    for i in range(1,len(SAR)):\n        last_period += 1    \n        if dir_long == True:\n            Ep1 = High[i-last_period:i].max()\n            SAR[i] = SAR[i-1]+ACC*(Ep1-SAR[i-1])\n            Ep0 = max([Ep1, High[i]])\n            if Ep0 > Ep1 and ACC+step <= maximum: ACC+=step\n            if SAR[i] > Low[i]:\n                dir_long = False\n                SAR[i] = Ep0\n                last_period = 0\n                ACC = step\n        else:\n            Ep1 = Low[i-last_period:i].min()\n            SAR[i] = SAR[i-1]+ACC*(Ep1-SAR[i-1])\n            Ep0 = min([Ep1, Low[i]])\n            if Ep0 < Ep1 and ACC+step <= maximum: ACC+=step\n            if SAR[i] < High[i]:\n                dir_long = True\n                SAR[i] = Ep0\n                last_period = 0\n                ACC = step\n    return SAR\n````\n````py\n%timeit y = iSAR_c0(dataM1, 0.02, 0.2)\n````\n\u7d50\u679c\n\n    1 loop, best of 3: 1.07 s per loop\n\n\u540c\u3058\u30b3\u30fc\u30c9\u306e\u307e\u307e\u3067\u3082Cython\u306e\u65b9\u304c\u5c11\u3057\u901f\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u6b21\u306b`cdef`\u3067\u5909\u6570\u306e\u578b\u5ba3\u8a00\u3092\u8ffd\u52a0\u3057\u305f\u5834\u5408\u3067\u3059\u3002\n\n````py\n%%cython\ncimport numpy\ncimport cython\ndef iSARnew(df, double step, double maximum):\n    cdef int last_period = 0\n    dir_long = True\n    cdef double ACC = step\n    cdef numpy.ndarray[numpy.float64_t, ndim=1] SAR = df['Close'].values.copy()\n    cdef numpy.ndarray[numpy.float64_t, ndim=1] High = df['High'].values\n    cdef numpy.ndarray[numpy.float64_t, ndim=1] Low = df['Low'].values\n    cdef double Ep0, Ep1\n    cdef int i, N=len(SAR)\n    for i in range(1,N):\n        last_period += 1    \n        if dir_long == True:\n            Ep1 = max(High[i-last_period:i])\n            SAR[i] = SAR[i-1]+ACC*(Ep1-SAR[i-1])\n            Ep0 = max([Ep1, High[i]])\n            if Ep0 > Ep1 and ACC+step <= maximum: ACC+=step\n            if SAR[i] > Low[i]:\n                dir_long = False\n                SAR[i] = Ep0\n                last_period = 0\n                ACC = step\n        else:\n            Ep1 = min(Low[i-last_period:i])\n            SAR[i] = SAR[i-1]+ACC*(Ep1-SAR[i-1])\n            Ep0 = min([Ep1, Low[i]])\n            if Ep0 < Ep1 and ACC+step <= maximum: ACC+=step\n            if SAR[i] < High[i]:\n                dir_long = True\n                SAR[i] = Ep0\n                last_period = 0\n                ACC = step\n    return SAR\n````\n````py\n%timeit y = iSARnew(dataM1, 0.02, 0.2)\n````\n\u7d50\u679c\u306f\n\n    1 loop, best of 3: 533 ms per loop\n\n\u3067\u3057\u305f\u3002\u3055\u3089\u306b\uff12\u500d\u304f\u3089\u3044\u901f\u304f\u306a\u308a\u307e\u3057\u305f\u3002\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3059\u308c\u3070\u3082\u3063\u3068\u901f\u304f\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u30b3\u30fc\u30c9\u306e\u53ef\u8aad\u6027\u304c\u60aa\u304f\u306a\u308b\u304a\u305d\u308c\u304c\u3042\u308b\u306e\u3067\u3001\u3053\u3053\u307e\u3067\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n#\u307e\u3068\u3081\nfor\u6587\u3060\u3051\u306e\u5834\u5408\u3001Numba\u3067\u3082\u7d50\u69cb\u9ad8\u901f\u5316\u306e\u52b9\u679c\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3001if\u6587\u3082\u5165\u3063\u3066\u304f\u308b\u3068\u3001\u52b9\u679c\u304c\u4e0b\u304c\u3063\u3066\u304d\u307e\u3059\u3002\u3082\u3046\u5c11\u3057\u901f\u304f\u3057\u305f\u3044\u5834\u5408\u306b\u306f\u3001\u591a\u5c11\u30b3\u30fc\u30c9\u306e\u4fee\u6b63\u3092\u4f34\u3044\u307e\u3059\u304c\u3001Cython\u4f7f\u3046\u306e\u3082\u3042\u308a\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n", "tags": ["Python", "MT4", "\u30c6\u30af\u30cb\u30ab\u30eb\u6307\u6a19", "Cython"]}