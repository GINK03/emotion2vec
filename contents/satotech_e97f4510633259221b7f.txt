{"tags": ["AWS", "IoT", "serverless", "aws-cli", "RaspberryPi"], "context": "Raspberry Pi \u3067\u4f5c\u308b LED \u8b66\u544a\u706f\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u3001Crystal Signal Pi \u306e\u30d7\u30ea\u30f3\u30c8\u57fa\u677f\u30ad\u30c3\u30c8\u304c\u5c4a\u3044\u305f\u306e\u3067\u65e9\u901f\u7d44\u307f\u7acb\u3066\u3001AWS IoT \u306e Thing Shadow \u3068 AWS Lambda \u306e Schedule Event \u3067\u901a\u77e5\u3059\u308b\u3068\u3053\u308d\u307e\u3067\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\nSchedule Event \u3067 Lambda \u95a2\u6570\u304c\u5b9f\u884c\u3055\u308c\u308b\u6bce\u306b\u70b9\u706f\u306e\u4ed5\u65b9\u3092\u5909\u3048\u3066\u3044\u307e\u3059\u3002\n\nCrystal Signal Pi \u3068\u306f\n\u8a73\u3057\u304f\u306f Crystal Signal Pi \u516c\u5f0f\u30b5\u30a4\u30c8\u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\n\u4e8b\u524d\u6e96\u5099\n\u672c\u8a18\u4e8b\u3067\u306f\u4e3b\u306b AWS CLI \u3092\u4f7f\u3063\u3066\u30ea\u30bd\u30fc\u30b9\u3092\u4f5c\u6210\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\nAWS CLI \u3092\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\n$ sudo pip install --upgrade awscli\n\n\n\u30d0\u30fc\u30b8\u30e7\u30f3\u78ba\u8a8d\n$ aws --version\naws-cli/1.11.32 Python/2.7.12 Darwin/15.6.0 botocore/1.4.89\n\n\nAWS IoT \u5074\u306e\u6e96\u5099\n\nThing \u3092\u4f5c\u6210\n$ aws iot create-thing --thing-name crystalSignalPi\n\n\nShadow \u3092\u767b\u9332\n$ aws iot-data update-thing-shadow --thing-name crystalSignalPi  \\\n  --payload '{\"state\": {\"desired\" : {\"blinkColor\" : \"green\"}}}' \\\n  outfile.json\n\n\nAWS Lambda \u5074\u306e\u6e96\u5099\n\u4eca\u56de\u306e AWS Lambda \u95a2\u6570\u4f5c\u6210\u306b\u5fc5\u8981\u306a\u3082\u306e\u304b\u3089\u4f5c\u6210\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\nassume \u30ed\u30fc\u30eb\u306e\u6c7a\u5b9a\n$ cat << EOF > lambdaExecution.json\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"lambda.amazonaws.com\"\n      },\n      \"Effect\": \"Allow\",\n      \"Sid\": \"\"\n    }\n  ]\n}\nEOF\n\n\nIAM \u30ed\u30fc\u30eb\u306e\u4f5c\u6210\n$ aws iam create-role \\\n        --role-name lambdaExecution \\\n        --assume-role-policy-document file://lambdaExecution.json\n\n\n\u30dd\u30ea\u30b7\u30fc\u306e\u9069\u7528\n$ aws iam attach-role-policy \\\n        --role-name lambdaExecution \\\n        --policy-arn arn:aws:iam::aws:policy/AWSIoTDataAccess\n\n\nLambda \u95a2\u6570\n$ cat << EOF > changeBlinkColor.js\nconsole.log('Loading function');\nvar aws = require('aws-sdk');\n\nvar endpoint  = 'XXXXXXXXXXXXX.iot.ap-northeast-1.amazonaws.com';\nvar thingName = 'crystalSignalPi';\n\nexports.handler = function(event, context) {\n    var iotdata = new aws.IotData( { endpoint: endpoint } );\n    var params = { thingName: thingName };\n    iotdata.getThingShadow(params, function (err, data) {\n        if (!err) {\n            var payload = JSON.parse(data.payload);\n            var currentBlinkColor = payload.state.desired.blinkColor;\n            console.log(\"Current Color : \" + currentBlinkColor);\n\n            var desiredBlinkColor;\n            if(currentBlinkColor == 'red') {\n                desiredBlinkColor = 'green';\n            } else {\n                desiredBlinkColor = 'red';\n            }\n            var desiredState = {\n                state: {\n                    desired: {\n                        blinkColor: desiredBlinkColor\n                    },\n                    reported: {\n                        blinkColor: currentBlinkColor\n                    }\n                }\n            };\n\n            var params = {\n                thingName: thingName,\n                payload: JSON.stringify(desiredState)\n            };\n            iotdata.updateThingShadow(params, function (err, data) {\n                if (!err) {\n                    context.succeed();\n                } else {\n                    context.fail(err);      \n                }\n            });\n        } else {\n            context.fail(err);      \n        }\n    });\n};\nEOF\n\n$ zip changeBlinkColor.zip changeBlinkColor.js\n\n\nLambda \u95a2\u6570\u306e\u4f5c\u6210\n$ aws lambda create-function \\\n        --function-name changeBlinkColor \\\n        --zip-file fileb:///path/to/changeBlinkColor.js.zip \\\n        --runtime nodejs4.3 \\\n        --role arn:aws:iam::XXXXXXXXXXXX:role/lambdaExecution \\\n        --handler changeBlinkColor.handler\n\n\nSchedule \u4f5c\u6210\n$ aws lambda add-permission \\\n        --function-name changeBlinkColor \\\n        --statement-id \"changeBlinkColor00\" \\\n        --action 'lambda:InvokeFunction' \\\n        --principal events.amazonaws.com \\\n        --source-arn arn:aws:events:ap-northeast-1:XXXXXXXXXXXX:rule/changeColorBatch\n\n\nEvent \u306e\u30eb\u30fc\u30eb\u3092\u8a2d\u5b9a\n$ aws events put-rule \\\n        --name \"changeColorBatch\" \\\n        --schedule-expression \"cron(*/5 * * * ? *)\" \\\n        --state ENABLED\n\n$ aws events put-targets \\\n        --rule \"changeColorBatch\" \\\n        --targets Arn=arn:aws:lambda:ap-northeast-1:XXXXXXXXXXXX:function:changeBlinkColor,Id=XXXXX\n\n\nCrystal Signal Pi \u3092\u7d44\u307f\u7acb\u3066\u308b\n\u516c\u5f0f\u30b5\u30a4\u30c8\u306e\u30de\u30cb\u30e5\u30a2\u30eb\u3092\u898b\u306a\u304c\u3089 Crystal Signal Pi \u3092\u7d44\u307f\u7acb\u3066\u3001\u8a2d\u5b9a\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u534a\u7530\u4ed8\u3051\u3001\u7d44\u307f\u7acb\u3066\u30de\u30cb\u30e5\u30a2\u30eb\n\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u4f7f\u7528\u30de\u30cb\u30e5\u30a2\u30eb\n\n\nRaspberry Pi \u3068 AWS IoT \u306e\u9023\u643a\n\npip \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n$ sudo apt-get install python-pip\n\n\nAWS IoT Device SDK for Python\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n$ sudo pip install AWSIoTPythonSDK\n\n\ngit \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n$ sudo apt-get install git\n\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n$ git clone https://github.com/aws/aws-iot-device-sdk-python.git\n$ cd aws-iot-device-sdk-python\n$ sudo python setup.py install\n\n\nIAM \u30e6\u30fc\u30b6\u30fc\u306e\u4f5c\u6210\n\u30c7\u30d0\u30a4\u30b9\u7528\u306b IAM \u30e6\u30fc\u30b6\u30fc\u3092\u4f5c\u6210\u3001Managed policy AWSIoTFullAccess \u3092\u30a2\u30bf\u30c3\u30c1\n\n\u30a2\u30af\u30bb\u30b9\u30ad\u30fc\u306e\u8a2d\u5b9a\n\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u60c5\u5831\u3092\u8a2d\u5b9a\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30fc\n$ mkdir -p crystal-signal-pi\n$ cd crystal-signal-pi\n$ cp ../samples/basicShadow/basicShadowDeltaListener.py ./shadowDeltaListener.py\n\n\n\u8a3c\u660e\u66f8\u306e\u6e96\u5099\u3001\u914d\u7f6e\n\u30b3\u30d4\u30fc\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3068\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u914d\u7f6e\n\n\u30b3\u30fc\u30c9\u3092\u7de8\u96c6\n\nshadowDeltaListener.py\n# coding: utf-8\nfrom AWSIoTPythonSDK.MQTTLib import AWSIoTMQTTShadowClient\nimport sys\nimport logging\nimport time\nimport json\nimport getopt\nimport pycurl\n\n# Shadow JSON schema:\n#\n# Name: Bot\n# {\n#   \"state\": {\n#       \"desired\":{\n#           \"property\":<INT VALUE>\n#       }\n#   }\n#}\n\n# Custom Shadow callback\ndef customShadowCallback_Delta(payload, responseStatus, token):\n    # payload is a JSON string ready to be parsed using json.loads(...)\n    # in both Py2.x and Py3.x\n    print(responseStatus)\n    payloadDict = json.loads(payload)\n    print(\"++++++++DELTA++++++++++\")\n    property = \"blinkColor\"\n    blinkColor = str(payloadDict[\"state\"][property])\n    print(\"property: \" + blinkColor)\n    #print(\"version: \" + str(payloadDict[\"version\"]))\n    print(\"+++++++++++++++++++++++\\n\\n\")\n    if blinkColor == \"red\":\n        url = \"http://localhost/ctrl/?color=100,0,0&mode=1&repeat=0&period=250&json=1\"\n    else:\n        url = \"http://localhost/ctrl/?color=0,80,0&mode=1&repeat=0&period=1000&json=1\"\n\n    curl = pycurl.Curl()\n    curl.setopt(pycurl.URL, url)\n    curl.setopt(pycurl.CUSTOMREQUEST, 'GET')\n    curl.perform()\n\n# Read in command-line parameters\nuseWebsocket = True\nhost = \"XXXXXXXXXXXXX.iot.ap-northeast-1.amazonaws.com\"\nrootCAPath = \"rootCA.pem\"\ncertificatePath = \"XXXXXXXXXX-certificate.pem.crt\"\nprivateKeyPath = \"XXXXXXXXXX-private.pem.key\"\nthingName = \"crystalSignalPi\"\n\n# Configure logging\nlogger = logging.getLogger(\"AWSIoTPythonSDK.core\")\nlogger.setLevel(logging.DEBUG)\nstreamHandler = logging.StreamHandler()\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nstreamHandler.setFormatter(formatter)\nlogger.addHandler(streamHandler)\n\n# Init AWSIoTMQTTShadowClient\nmyAWSIoTMQTTShadowClient = None\nmyAWSIoTMQTTShadowClient = AWSIoTMQTTShadowClient(\"basicShadowDeltaListener\", useWebsocket=True)\nmyAWSIoTMQTTShadowClient.configureEndpoint(host, 443)\nmyAWSIoTMQTTShadowClient.configureCredentials(rootCAPath)\n\n# AWSIoTMQTTShadowClient configuration\nmyAWSIoTMQTTShadowClient.configureAutoReconnectBackoffTime(1, 32, 20)\nmyAWSIoTMQTTShadowClient.configureConnectDisconnectTimeout(10)  # 10 sec\nmyAWSIoTMQTTShadowClient.configureMQTTOperationTimeout(5)  # 5 sec\n\n# Connect to AWS IoT\nmyAWSIoTMQTTShadowClient.connect()\n\n# Create a deviceShadow with persistent subscription\nBot = myAWSIoTMQTTShadowClient.createShadowHandlerWithName(thingName, True)\n\n# Listen on deltas\nBot.shadowRegisterDeltaCallback(customShadowCallback_Delta)\n\n# Loop forever\nwhile True:\n    pass\n\n\n\npython-pycurl \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n$ sudo apt-get install python-pycurl\n\n\n\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\n$ python shadowDeltaListener.py\n\n\n\u304a\u308f\u308a\u306b\n\u4eca\u56de\u306f\u307e\u305a\u3001AWS IoT \u3068\u306e\u9023\u643a\u307e\u3067\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\u6b21\u56de\u306f\u5149\u3067\u306e\u901a\u77e5\u3060\u3051\u3067\u306a\u304f\u3001Polly \u3092\u4f7f\u3063\u3066\u97f3\u58f0\u3068\u9023\u643a\u3057\u305f\u4f7f\u3044\u65b9\u3082\u8a66\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nRaspberry Pi \u3067\u4f5c\u308b LED \u8b66\u544a\u706f\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u3001Crystal Signal Pi \u306e\u30d7\u30ea\u30f3\u30c8\u57fa\u677f\u30ad\u30c3\u30c8\u304c\u5c4a\u3044\u305f\u306e\u3067\u65e9\u901f\u7d44\u307f\u7acb\u3066\u3001AWS IoT \u306e Thing Shadow \u3068 AWS Lambda \u306e Schedule Event \u3067\u901a\u77e5\u3059\u308b\u3068\u3053\u308d\u307e\u3067\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n![crystalsignalpi.gif](https://qiita-image-store.s3.amazonaws.com/0/23579/82e5d0cd-53b3-7dc3-a8af-2af4c6d0b274.gif)\n\nSchedule Event \u3067 Lambda \u95a2\u6570\u304c\u5b9f\u884c\u3055\u308c\u308b\u6bce\u306b\u70b9\u706f\u306e\u4ed5\u65b9\u3092\u5909\u3048\u3066\u3044\u307e\u3059\u3002\n\n# Crystal Signal Pi \u3068\u306f\n\u8a73\u3057\u304f\u306f [Crystal Signal Pi \u516c\u5f0f\u30b5\u30a4\u30c8](http://crystal-signal.com/)\u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\n# \u4e8b\u524d\u6e96\u5099\n\n\u672c\u8a18\u4e8b\u3067\u306f\u4e3b\u306b AWS CLI \u3092\u4f7f\u3063\u3066\u30ea\u30bd\u30fc\u30b9\u3092\u4f5c\u6210\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n##### AWS CLI \u3092\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\n\n```bash\n$ sudo pip install --upgrade awscli\n```\n\n##### \u30d0\u30fc\u30b8\u30e7\u30f3\u78ba\u8a8d\n\n```bash\n$ aws --version\naws-cli/1.11.32 Python/2.7.12 Darwin/15.6.0 botocore/1.4.89\n```\n\n# AWS IoT \u5074\u306e\u6e96\u5099\n\n##### Thing \u3092\u4f5c\u6210\n\n```bash\n$ aws iot create-thing --thing-name crystalSignalPi\n```\n\n##### Shadow \u3092\u767b\u9332\n\n```bash\n$ aws iot-data update-thing-shadow --thing-name crystalSignalPi  \\\n  --payload '{\"state\": {\"desired\" : {\"blinkColor\" : \"green\"}}}' \\\n  outfile.json\n```\n\n# AWS Lambda \u5074\u306e\u6e96\u5099\n\n\u4eca\u56de\u306e AWS Lambda \u95a2\u6570\u4f5c\u6210\u306b\u5fc5\u8981\u306a\u3082\u306e\u304b\u3089\u4f5c\u6210\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n##### assume \u30ed\u30fc\u30eb\u306e\u6c7a\u5b9a\n\n```bash\n$ cat << EOF > lambdaExecution.json\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"lambda.amazonaws.com\"\n      },\n      \"Effect\": \"Allow\",\n      \"Sid\": \"\"\n    }\n  ]\n}\nEOF\n```\n\n##### IAM \u30ed\u30fc\u30eb\u306e\u4f5c\u6210\n\n```bash\n$ aws iam create-role \\\n        --role-name lambdaExecution \\\n        --assume-role-policy-document file://lambdaExecution.json\n```\n\n##### \u30dd\u30ea\u30b7\u30fc\u306e\u9069\u7528\n\n```bash\n$ aws iam attach-role-policy \\\n        --role-name lambdaExecution \\\n        --policy-arn arn:aws:iam::aws:policy/AWSIoTDataAccess\n```\n\n##### Lambda \u95a2\u6570\n\n```bash\n$ cat << EOF > changeBlinkColor.js\nconsole.log('Loading function');\nvar aws = require('aws-sdk');\n\nvar endpoint  = 'XXXXXXXXXXXXX.iot.ap-northeast-1.amazonaws.com';\nvar thingName = 'crystalSignalPi';\n\nexports.handler = function(event, context) {\n    var iotdata = new aws.IotData( { endpoint: endpoint } );\n    var params = { thingName: thingName };\n    iotdata.getThingShadow(params, function (err, data) {\n        if (!err) {\n            var payload = JSON.parse(data.payload);\n            var currentBlinkColor = payload.state.desired.blinkColor;\n            console.log(\"Current Color : \" + currentBlinkColor);\n \n            var desiredBlinkColor;\n            if(currentBlinkColor == 'red') {\n                desiredBlinkColor = 'green';\n            } else {\n                desiredBlinkColor = 'red';\n            }\n            var desiredState = {\n                state: {\n                    desired: {\n                        blinkColor: desiredBlinkColor\n                    },\n                    reported: {\n                        blinkColor: currentBlinkColor\n                    }\n                }\n            };\n             \n            var params = {\n                thingName: thingName,\n                payload: JSON.stringify(desiredState)\n            };\n            iotdata.updateThingShadow(params, function (err, data) {\n                if (!err) {\n                    context.succeed();\n                } else {\n                    context.fail(err);      \n                }\n            });\n        } else {\n            context.fail(err);      \n        }\n    });\n};\nEOF\n```\n\n```bash\n$ zip changeBlinkColor.zip changeBlinkColor.js\n```\n\n##### Lambda \u95a2\u6570\u306e\u4f5c\u6210\n\n```bash\n$ aws lambda create-function \\\n        --function-name changeBlinkColor \\\n        --zip-file fileb:///path/to/changeBlinkColor.js.zip \\\n        --runtime nodejs4.3 \\\n        --role arn:aws:iam::XXXXXXXXXXXX:role/lambdaExecution \\\n        --handler changeBlinkColor.handler\n```\n\n##### Schedule \u4f5c\u6210\n\n```bash\n$ aws lambda add-permission \\\n        --function-name changeBlinkColor \\\n        --statement-id \"changeBlinkColor00\" \\\n        --action 'lambda:InvokeFunction' \\\n        --principal events.amazonaws.com \\\n        --source-arn arn:aws:events:ap-northeast-1:XXXXXXXXXXXX:rule/changeColorBatch\n```\n\n##### Event \u306e\u30eb\u30fc\u30eb\u3092\u8a2d\u5b9a\n\n```bash\n$ aws events put-rule \\\n        --name \"changeColorBatch\" \\\n        --schedule-expression \"cron(*/5 * * * ? *)\" \\\n        --state ENABLED\n```\n\n##### \n\n```bash\n$ aws events put-targets \\\n        --rule \"changeColorBatch\" \\\n        --targets Arn=arn:aws:lambda:ap-northeast-1:XXXXXXXXXXXX:function:changeBlinkColor,Id=XXXXX\n```\n\n# Crystal Signal Pi \u3092\u7d44\u307f\u7acb\u3066\u308b\n\n\u516c\u5f0f\u30b5\u30a4\u30c8\u306e\u30de\u30cb\u30e5\u30a2\u30eb\u3092\u898b\u306a\u304c\u3089 Crystal Signal Pi \u3092\u7d44\u307f\u7acb\u3066\u3001\u8a2d\u5b9a\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n- [\u534a\u7530\u4ed8\u3051\u3001\u7d44\u307f\u7acb\u3066\u30de\u30cb\u30e5\u30a2\u30eb](http://crystal-signal.com/other/Crystal_Signal_Pi_construction.pdf)\n- [\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u4f7f\u7528\u30de\u30cb\u30e5\u30a2\u30eb](http://crystal-signal.com/other/Crystal_Signal_Pi_software.pdf)\n\n# Raspberry Pi \u3068 AWS IoT \u306e\u9023\u643a\n\n##### pip \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n```bash\n$ sudo apt-get install python-pip\n```\n\n##### AWS IoT Device SDK for Python\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n```bash\n$ sudo pip install AWSIoTPythonSDK\n```\n\n##### git \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n```bash\n$ sudo apt-get install git\n```\n\n##### \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n\n```bash\n$ git clone https://github.com/aws/aws-iot-device-sdk-python.git\n$ cd aws-iot-device-sdk-python\n$ sudo python setup.py install\n```\n\n##### IAM \u30e6\u30fc\u30b6\u30fc\u306e\u4f5c\u6210\n\u30c7\u30d0\u30a4\u30b9\u7528\u306b IAM \u30e6\u30fc\u30b6\u30fc\u3092\u4f5c\u6210\u3001Managed policy AWSIoTFullAccess \u3092\u30a2\u30bf\u30c3\u30c1\n\n##### \u30a2\u30af\u30bb\u30b9\u30ad\u30fc\u306e\u8a2d\u5b9a\n\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u60c5\u5831\u3092\u8a2d\u5b9a\n\n##### \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30fc\n\n```bash\n$ mkdir -p crystal-signal-pi\n$ cd crystal-signal-pi\n$ cp ../samples/basicShadow/basicShadowDeltaListener.py ./shadowDeltaListener.py\n```\n\n##### \u8a3c\u660e\u66f8\u306e\u6e96\u5099\u3001\u914d\u7f6e\n\u30b3\u30d4\u30fc\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3068\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u914d\u7f6e\n\n##### \u30b3\u30fc\u30c9\u3092\u7de8\u96c6\n\n```shadowDeltaListener.py\n# coding: utf-8\nfrom AWSIoTPythonSDK.MQTTLib import AWSIoTMQTTShadowClient\nimport sys\nimport logging\nimport time\nimport json\nimport getopt\nimport pycurl\n\n# Shadow JSON schema:\n#\n# Name: Bot\n# {\n#\t\"state\": {\n#\t\t\"desired\":{\n#\t\t\t\"property\":<INT VALUE>\n#\t\t}\n#\t}\n#}\n\n# Custom Shadow callback\ndef customShadowCallback_Delta(payload, responseStatus, token):\n\t# payload is a JSON string ready to be parsed using json.loads(...)\n\t# in both Py2.x and Py3.x\n\tprint(responseStatus)\n\tpayloadDict = json.loads(payload)\n\tprint(\"++++++++DELTA++++++++++\")\n\tproperty = \"blinkColor\"\n\tblinkColor = str(payloadDict[\"state\"][property])\n\tprint(\"property: \" + blinkColor)\n\t#print(\"version: \" + str(payloadDict[\"version\"]))\n\tprint(\"+++++++++++++++++++++++\\n\\n\")\n\tif blinkColor == \"red\":\n\t\turl = \"http://localhost/ctrl/?color=100,0,0&mode=1&repeat=0&period=250&json=1\"\n\telse:\n\t\turl = \"http://localhost/ctrl/?color=0,80,0&mode=1&repeat=0&period=1000&json=1\"\n\n\tcurl = pycurl.Curl()\n\tcurl.setopt(pycurl.URL, url)\n\tcurl.setopt(pycurl.CUSTOMREQUEST, 'GET')\n\tcurl.perform()\n\n# Read in command-line parameters\nuseWebsocket = True\nhost = \"XXXXXXXXXXXXX.iot.ap-northeast-1.amazonaws.com\"\nrootCAPath = \"rootCA.pem\"\ncertificatePath = \"XXXXXXXXXX-certificate.pem.crt\"\nprivateKeyPath = \"XXXXXXXXXX-private.pem.key\"\nthingName = \"crystalSignalPi\"\n\n# Configure logging\nlogger = logging.getLogger(\"AWSIoTPythonSDK.core\")\nlogger.setLevel(logging.DEBUG)\nstreamHandler = logging.StreamHandler()\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nstreamHandler.setFormatter(formatter)\nlogger.addHandler(streamHandler)\n\n# Init AWSIoTMQTTShadowClient\nmyAWSIoTMQTTShadowClient = None\nmyAWSIoTMQTTShadowClient = AWSIoTMQTTShadowClient(\"basicShadowDeltaListener\", useWebsocket=True)\nmyAWSIoTMQTTShadowClient.configureEndpoint(host, 443)\nmyAWSIoTMQTTShadowClient.configureCredentials(rootCAPath)\n\n# AWSIoTMQTTShadowClient configuration\nmyAWSIoTMQTTShadowClient.configureAutoReconnectBackoffTime(1, 32, 20)\nmyAWSIoTMQTTShadowClient.configureConnectDisconnectTimeout(10)  # 10 sec\nmyAWSIoTMQTTShadowClient.configureMQTTOperationTimeout(5)  # 5 sec\n\n# Connect to AWS IoT\nmyAWSIoTMQTTShadowClient.connect()\n\n# Create a deviceShadow with persistent subscription\nBot = myAWSIoTMQTTShadowClient.createShadowHandlerWithName(thingName, True)\n\n# Listen on deltas\nBot.shadowRegisterDeltaCallback(customShadowCallback_Delta)\n\n# Loop forever\nwhile True:\n\tpass\n```\n\n### python-pycurl \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n```bash\n$ sudo apt-get install python-pycurl\n```\n\n### \u30b3\u30fc\u30c9\u3092\u5b9f\u884c\n\n```bash\n$ python shadowDeltaListener.py\n```\n\n# \u304a\u308f\u308a\u306b\n\u4eca\u56de\u306f\u307e\u305a\u3001AWS IoT \u3068\u306e\u9023\u643a\u307e\u3067\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\u6b21\u56de\u306f\u5149\u3067\u306e\u901a\u77e5\u3060\u3051\u3067\u306a\u304f\u3001Polly \u3092\u4f7f\u3063\u3066\u97f3\u58f0\u3068\u9023\u643a\u3057\u305f\u4f7f\u3044\u65b9\u3082\u8a66\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n"}