{"context": " More than 1 year has passed since last update.\u3053\u3093\u306b\u3061\u306f\u3002@Civitaspo \u3067\u3059\u3002\u5148\u65e512/15 \u306e Embulk Meetup Tokyo#2 \u3067\u306f\u3001\u300eEmbulk\u306b\u8db3\u308a\u306a\u30445\u3064\u306e\u30b3\u30c8\u300f\u3068\u3044\u3046\u55a7\u5629\u8170\u306a\u30bf\u30a4\u30c8\u30eb\u3067\u767a\u8868\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\u304a\u304b\u3052\u3067\u8272\u3093\u306a\u65b9\u3068embulk\u306b\u3064\u3044\u3066\u8b70\u8ad6\u3067\u304d\u305f\u826f\u3044Meetup\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u547c\u3093\u3067\u304f\u3060\u3055\u3063\u305f @frsyuki \u3068\u3001\u88cf\u304b\u3089\u652f\u3048\u3066\u4e0b\u3055\u3063\u305f @sonots \u306b\u306f\u3053\u306e\u5834\u3092\u304a\u501f\u308a\u3057\u3066\u611f\u8b1d\u306e\u610f\u3092\u4f1d\u3048\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n\u3055\u3066\u3001\u4eca\u65e5\u306f embulk java-filter plugin \u306e\u30c6\u30b9\u30c8\u306e\u66f8\u304d\u65b9 \u306b\u3064\u3044\u3066\u8a18\u4e8b\u3092\u66f8\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u304a\u3053\u3068\u308f\u308a\n\n\u8a71\u3092\u7c21\u5358\u306b\u3059\u308b\u305f\u3081\u306bjava-filter plugin\u306e\u30c6\u30b9\u30c8\u306e\u66f8\u304d\u65b9\u306bfocus\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u4ed6\u306etype\u306ejava plugin\u3067\u3082\u5fdc\u7528\u3067\u304d\u308b\u5185\u5bb9\u3060\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\nEmbulkEmbed\u3092\u4f7f\u3063\u305f\u30c6\u30b9\u30c8\u3082\u66f8\u3051\u307e\u3059\u304c\u4eca\u56de\u306f\u7d39\u4ecb\u3057\u307e\u305b\u3093\u3002\n\u4f9d\u5b58\u306e\u306a\u3044Class\u3084Method\u30ec\u30d9\u30eb\u306e\u30c6\u30b9\u30c8\u306f\u666e\u901a\u306b\u66f8\u3051\u308b\u3060\u308d\u3046\u3068\u601d\u3046\u306e\u3067\u8a00\u53ca\u306f\u3057\u307e\u305b\u3093\u3002\n\u300c\u3053\u3093\u306a\u66f8\u304d\u65b9\u306e\u65b9\u304c\u826f\u3044\u305c\u3088\u300d\u300c\u3053\u3053\u5206\u304b\u308a\u306b\u304f\u3044\u300d\u306a\u3069\u3001\u3054\u610f\u898b\u3042\u308a\u307e\u3057\u305f\u3089\u30c9\u30b7\u30c9\u30b7\u9023\u7d61\u3044\u305f\u3060\u304d\u305f\u3044\u3067\u3059\uff01\n\n\n(\u66f8\u3044\u305f\u5f8c\u306b\u601d\u3044\u307e\u3057\u305f\u304c\u3042\u307e\u308a\u4e00\u822c\u5316\u3055\u308c\u3066\u3044\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3002\u3002)\n\n\n\n\n\u53c2\u8003\u8cc7\u6599\n\nEmbulk Plugins\nTestRenameFilterPlugin.java\n\nembulk-core\u306etest\u30e9\u30a4\u30d6\u30e9\u30ea\n\nEmbulkTestRuntime\n\n\n\nEmbulk Java\u30d1\u30fc\u30b5\u30fc\u30d7\u30e9\u30b0\u30a4\u30f3\u306e\u5358\u4f53\u30c6\u30b9\u30c8\n\nEmbulkEmbed\u3092\u4f7f\u3063\u305f\u30c6\u30b9\u30c8\u306e\u66f8\u304d\u65b9\u3092\u7d39\u4ecb\u3057\u3066\u3044\u307e\u3059\n\n\nJUnit Rules\nJUnit4.7 \u306e\u65b0\u6a5f\u80fd Rules \u3068\u306f\n\n\u4e26\u5217\u30d0\u30c3\u30c1\u30c7\u30fc\u30bf\u8ee2\u9001OSS\u306eEmbulk\u3092\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u30ea\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u3066\u307f\u308b\uff08\u305d\u306e\uff13\uff1arun\u6982\u8981\uff06\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u6982\u8981\n\n\nEmbulkTestRuntime \u3092\u7406\u89e3\u3059\u308b\u305f\u3081\u306b\u8aad\u3093\u3067\u304a\u304f\u3068\u5409\n\n\nExpectedException \u30eb\u30fc\u30eb\u3092\u4f7f\u3044\u3053\u306a\u3057\u305f\u3044\n\n\n\u306f\u3058\u3081\u306b\nfilter plugin\u306e\u30c6\u30b9\u30c8\u3068\u3057\u3066\u306f\n\nconfig\u3092\u6b63\u3057\u304f\u51e6\u7406\u3067\u304d\u3066\u3044\u308b\u304b\ninput\u306e\u30c7\u30fc\u30bf\u3092\u51e6\u7406\u3057\u305f\u5f8c\u3001output\u306e\u30c7\u30fc\u30bf\u304c\u610f\u56f3\u3057\u305f\u72b6\u614b\u306b\u306a\u3063\u3066\u3044\u308b\u304b\n\n\u304c\u308f\u304b\u308c\u3070\u826f\u3044\u3068\u601d\u3063\u3066\u3044\u308b\u306e\u3067\u4e0a\u8a182\u70b9\u306b\u95a2\u3059\u308b\u30c6\u30b9\u30c8\u306e\u66f8\u304d\u65b9\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\u8aac\u660e\u306e\u90fd\u5408\u4e0a\u3001\u62d9\u4f5c\u306e embulk-filter-expand_json \u306e\u30b3\u30fc\u30c9\u3092\u30b5\u30f3\u30d7\u30eb\u3068\u3057\u3066\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u6e96\u5099\u7de8\n\n\u4f9d\u5b58\u95a2\u4fc2\u306e\u8ffd\u52a0\nbuild.gradle \u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f9d\u5b58\u95a2\u4fc2\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n// ...\n\ndependencies {\n    compile  \"org.embulk:embulk-core:0.7.+\"\n    provided \"org.embulk:embulk-core:0.7.+\"\n    // compile \"YOUR_JAR_DEPENDENCY_GROUP:YOUR_JAR_DEPENDENCY_MODULE:YOUR_JAR_DEPENDENCY_VERSION\"\n    testCompile \"junit:junit:4.+\"\n    testCompile \"org.embulk:embulk-core:0.7.+:test\" // <= \u30b3\u30ec!!\n}\n\n// ...\n\n\n\u3053\u308c\u3067 embulk-core\u306etest\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nEmbulkTestRuntime \u3092 Rule \u306b\u8a2d\u5b9a\u3059\u308b\nJUnit\u306b\u306fRules\u3068\u3044\u3046\u6a5f\u80fd\u304c\u3042\u308a\u307e\u3059\u3002Embulk\u306e\u30c6\u30b9\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u306f\u3053\u306eRule\u306b\u4f7f\u7528\u3067\u304d\u308b EmbulkTestRuntime \u3068\u3044\u3046 Class\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n// ...\nimport org.embulk.EmbulkTestRuntime;\nimport org.junit.Rule;\n// ...\n\npublic class TestExpandJsonFilterPlugin\n{\n    @Rule\n    public EmbulkTestRuntime runtime = new EmbulkTestRuntime();\n\n    // ...\n}\n\n\u3053\u306eClass\u3092Rule\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001Embulk\u306eRuntime\u6642\u3067\u306a\u3044\u3068\u884c\u3048\u306a\u3044\u30c6\u30b9\u30c8\u304c\u884c\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nYAML\u306econfig\u3092\u30ed\u30fc\u30c9\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u3063\u3066\u304a\u304f\n\u5b9f\u969b\u306b\u8a2d\u5b9a\u3057\u305fYAML\u3092Embulk\u306b\u30ed\u30fc\u30c9\u3057\u3066\u30c6\u30b9\u30c8\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306bYAML\u306econfig\u3092\u30ed\u30fc\u30c9\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n// ...\nimport org.embulk.config.ConfigLoader;\nimport org.embulk.config.ConfigSource;\n// ...\n\npublic class TestExpandJsonFilterPlugin\n{\n    // ...\n\n    private ConfigSource getConfigFromYaml(String yaml)\n    {\n        ConfigLoader loader = new ConfigLoader(Exec.getModelManager());\n        return loader.fromYamlString(yaml);\n    }\n\n    // ...\n}\n\n\u3053\u308c\u3067YAML\u306econfig\u3092Plugin\u306b\u30ed\u30fc\u30c9\u3059\u308b\u6e96\u5099\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u5b9f\u969b\u306b\u30c6\u30b9\u30c8\u3092\u66f8\u304f\u7de8\n\nconfig\u3092\u6b63\u3057\u304f\u51e6\u7406\u3067\u304d\u3066\u3044\u308b\u304b\nconfig\u306e\u30c6\u30b9\u30c8\u306f\u4ee5\u4e0b\u306e2\u70b9\u3092\u898b\u3066\u304a\u3051\u3070\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nrequired\u306aparam\u306b\u5024\u304c\u30bb\u30c3\u30c8\u3055\u308c\u306a\u3044\u5834\u5408\u306bexception\u3092\u5410\u304f\u304b\noptional\u306aparam\u306b\u5024\u304c\u30bb\u30c3\u30c8\u3055\u308c\u306a\u3044\u5834\u5408\u306b\u5b9a\u7fa9\u3057\u305fdefault\u306e\u5024\u304c\u5165\u3063\u3066\u3044\u308b\u304b\n\n\nrequired\u306aparam\u306b\u5024\u304c\u30bb\u30c3\u30c8\u3055\u308c\u306a\u3044\u5834\u5408\u306bexception\u3092\u5410\u304f\u304b\u306e\u30c6\u30b9\u30c8\u3092\u66f8\u304f\n\n\u6e96\u5099\nexception\u3092test\u3059\u308b\u305f\u3081\u306b\u3001Rules \u306b ExpectedException \u3092\u8a2d\u5b9a\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n// ...\nimport org.junit.rules.ExpectedException;\n// ...\n\npublic class TestExpandJsonFilterPlugin\n{\n    // ...\n\n    @Rule\n    public ExpectedException exception = ExpectedException.none();\n\n    // ...\n}\n\n\n\u30c6\u30b9\u30c8\u3092\u66f8\u304f\n\n// ...\nimport org.embulk.config.ConfigException;\nimport org.junit.Test;\nimport static org.embulk.filter.expand_json.ExpandJsonFilterPlugin.PluginTask;\n// ...\n\npublic class TestExpandJsonFilterPlugin\n{\n    // ...\n\n    // json_column_name \u3068\u3044\u3046 required param \u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306b\n    // exception \u3092\u5c65\u304f\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u30c6\u30b9\u30c8\n    @Test\n    public void testThrowExceptionAbsentJsonColumnName()\n    {\n        String configYaml = \"\" +\n                \"type: expand_json\\n\" +\n                \"expanded_columns:\\n\" +\n                \"  - {name: _c1, type: string}\";\n        ConfigSource config = getConfigFromYaml(configYaml);\n\n        exception.expect(ConfigException.class);\n        exception.expectMessage(\"Field 'json_column_name' is required but not set\");\n        config.loadConfig(PluginTask.class);\n    }\n\n    // ...\n}\n\nString configYaml \u306bfilter plugin\u306b\u8a2d\u5b9a\u3059\u308bconfig\u3092\u30bb\u30c3\u30c8\u3057\u3001\u5148\u307b\u3069\u6e96\u5099\u3057\u305f getConfigFromYaml \u306b\u98df\u308f\u305b\u3066\u3001 ConfigSource \u3092\u53d6\u5f97\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u3053\u308c\u4ee5\u964d\u3053\u306e\u8a2d\u5b9a\u304c\u3088\u304f\u51fa\u3066\u304d\u307e\u3059\u304c\u9010\u4e00\u3001\u8a00\u53ca\u3057\u306a\u3044\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\u6b21\u306b exception.expect \u3068 exception.expectMessage \u3067\u767a\u751f\u3059\u308b\u4f8b\u5916\u306b\u3064\u3044\u3066\u5b9a\u7fa9\u3057\u307e\u3059\u3002 config\u306e\u4f8b\u5916\u306f org.embulk.config.ConfigException \u306a\u306e\u3067\u3001\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\u6700\u5f8c\u306b config \u3092 plugin \u306b\u8aad\u307f\u8fbc\u307e\u305b\u307e\u3059\u3002 config.loadConfig(PluginTask.class); \u306f transaction \u306e\u4e00\u756a\u521d\u3081\u306b\u547c\u3070\u308c\u308b\u306e\u3067\u304a\u99b4\u67d3\u307f\u3067\u3059\u306d\u3002\u3053\u306e config \u306e\u30ed\u30fc\u30c9\u3067\u4f8b\u5916\u304c\u767a\u751f\u3057\u307e\u3059\u3002\n\noptional\u306aparam\u306b\u5024\u304c\u30bb\u30c3\u30c8\u3055\u308c\u306a\u3044\u5834\u5408\u306b\u5b9a\u7fa9\u3057\u305fdefault\u306e\u5024\u304c\u5165\u3063\u3066\u3044\u308b\u304b\u306e\u30c6\u30b9\u30c8\u3092\u66f8\u304f\n\u6b21\u306f config \u3092\u30ed\u30fc\u30c9\u3057\u305f\u7d50\u679c\u3001getter\u3067\u53d6\u5f97\u3057\u305f\u5024\u3092assert\u3057\u307e\u3057\u3087\u3046\u3002\npublic class TestExpandJsonFilterPlugin\n{\n    // ...\n\n    @Test\n    public void testDefaultValue()\n    {\n        String configYaml = \"\" +\n                \"type: expand_json\\n\" +\n                \"json_column_name: _c0\\n\" +\n                \"expanded_columns:\\n\" +\n                \"  - {name: _j1, type: boolean}\\n\" +\n                \"  - {name: _j2, type: long}\\n\" +\n                \"  - {name: _j3, type: timestamp}\\n\" +\n                \"  - {name: _j4, type: double}\\n\" +\n                \"  - {name: _j5, type: string}\\n\";\n\n        ConfigSource config = getConfigFromYaml(configYaml);\n        PluginTask task = config.loadConfig(PluginTask.class);\n\n        assertEquals(\"$.\", task.getRoot());\n        assertEquals(\"UTC\", task.getTimeZone());\n        assertEquals(\"%Y-%m-%d %H:%M:%S.%N %z\", task.getDefaultTimestampFormat());\n    }\n\n    // ...\n}\n\nPluginTask task = config.loadConfig(PluginTask.class); \u3067 PluginTask \u3092\u53d6\u5f97\u3057\u3001\u5b9a\u7fa9\u3055\u308c\u305fgetter\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\ninput\u306e\u30c7\u30fc\u30bf\u3092\u51e6\u7406\u3057\u305f\u5f8c\u3001output\u306e\u30c7\u30fc\u30bf\u304c\u610f\u56f3\u3057\u305f\u72b6\u614b\u306b\u306a\u3063\u3066\u3044\u308b\u304b\ninput\u306e\u30c7\u30fc\u30bf\u3092\u51e6\u7406\u3057\u305f\u5f8c\u3001output\u306e\u30c7\u30fc\u30bf\u304c\u610f\u56f3\u3057\u305f\u72b6\u614b\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u306e\u30c6\u30b9\u30c8\u306f\u4ee5\u4e0b\u306e2\u70b9\u3092\u898b\u3066\u304a\u3051\u3070\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\ninput schema / output schema \u304c\u6b63\u3057\u304f\u5909\u66f4\u3055\u308c\u3066\u3044\u308b\u304b\ninput data / output data \u304c\u6b63\u3057\u304f\u5909\u66f4\u3055\u308c\u3066\u3044\u308b\u304b\n\n\ninput schema / output schema \u304c\u6b63\u3057\u304f\u5909\u66f4\u3055\u308c\u3066\u3044\u308b\u304b\u306e\u30c6\u30b9\u30c8\u3092\u66f8\u304f\ntransaction \u3092\u547c\u3073\u51fa\u3057\u3066schema\u306e\u5909\u66f4\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\n// ...\nimport org.embulk.spi.Schema;\nimport org.embulk.spi.Column;\nimport static org.embulk.filter.expand_json.ExpandJsonFilterPlugin.Control;\n// ...\n\npublic class TestExpandJsonFilterPlugin\n{\n    // ...\n\n    @Test\n    public void testExpandJsonKeyToSchema()\n    {\n        String configYaml = \"\" +\n                \"type: expand_json\\n\" +\n                \"json_column_name: _c0\\n\" +\n                \"root: $.\\n\" +\n                \"expanded_columns:\\n\" +\n                \"  - {name: _j1, type: boolean}\\n\" +\n                // ...\n                \"  - {name: _c0, type: string}\\n\";\n\n        ConfigSource config = getConfigFromYaml(configYaml);\n\n        final Schema inputSchema = Schema.builder()\n            .add(\"_c0\", STRING)\n            .add(\"_c1\", STRING)\n            .build();\n\n        ExpandJsonFilterPlugin expandJsonFilterPlugin = new ExpandJsonFilterPlugin();\n        expandJsonFilterPlugin.transaction(config, inputSchema, new Control()\n        {\n            @Override\n            public void run(TaskSource taskSource, Schema outputSchema)\n            {\n                assertEquals(7, outputSchema.getColumnCount());\n\n                Column new_j1 = outputSchema.getColumn(0);\n                // ...\n\n                assertEquals(\"_j1\", new_j1.getName());\n                assertEquals(BOOLEAN, new_j1.getType());\n                // ...\n            }\n        });\n    }\n\n    // ...\n}\n\n        final Schema inputSchema = Schema.builder()\n            .add(\"_c0\", STRING)\n            .add(\"_c1\", STRING)\n            .build();\n\n        ExpandJsonFilterPlugin expandJsonFilterPlugin = new ExpandJsonFilterPlugin();\n        expandJsonFilterPlugin.transaction(config, inputSchema, new Control()\n\n\u3053\u3053\u3067 plugin class\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u3001 transaction \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\u7b2c\u4e09\u5f15\u6570\u306b\u306f org.embulk.filter.expand_json.ExpandJsonFilterPlugin.Control \u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u6e21\u3057\u3066\u3001\u305d\u306e\u4e2d\u3067\u51e6\u7406\u7d50\u679c\u306e\u30c6\u30b9\u30c8\u3092\u884c\u3044\u307e\u3059\u3002\n            @Override\n            public void run(TaskSource taskSource, Schema outputSchema)\n\nrun \u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u306b outputSchema \u304c\u6e21\u3063\u3066\u304f\u308b\u306e\u3067\u3001\u3053\u306eschema\u3092assert\u3057\u307e\u3059\u3002\n\ninput data / output data \u304c\u6b63\u3057\u304f\u5909\u66f4\u3055\u308c\u3066\u3044\u308b\u304b\u306e\u30c6\u30b9\u30c8\u3092\u66f8\u304f\n// ...\nimport org.embulk.spi.Exec;\nimport org.embulk.spi.Page;\nimport org.embulk.spi.PageOutput;\nimport org.embulk.spi.PageReader;\nimport org.embulk.spi.PageTestUtils;\nimport org.embulk.spi.Schema;\nimport org.embulk.spi.TestPageBuilderReader.MockPageOutput;\n// ...\n\npublic class TestExpandJsonFilterPlugin\n{\n    // ...\n\n    @Test\n    public void testExpandJsonValues()\n    {\n        String configYaml = \"\" +\n                \"type: expand_json\\n\" +\n                \"json_column_name: _c0\\n\" +\n                \"root: $.\\n\" +\n                \"time_zone: Asia/Tokyo\\n\" +\n                \"expanded_columns:\\n\" +\n                \"  - {name: _j0, type: boolean}\\n\" +\n                // ...\n                \"  - {name: _c0, type: string}\\n\";\n\n        ConfigSource config = getConfigFromYaml(configYaml);\n\n        final Schema inputSchema = Schema.builder()\n            .add(\"_c0\", STRING)\n            .add(\"_c1\", STRING)\n            .build();\n\n        ExpandJsonFilterPlugin expandJsonFilterPlugin = new ExpandJsonFilterPlugin();\n        expandJsonFilterPlugin.transaction(config, inputSchema, new Control()\n        {\n            @Override\n            public void run(TaskSource taskSource, Schema outputSchema)\n            {\n                MockPageOutput mockPageOutput = new MockPageOutput();\n                PageOutput pageOutput = expandJsonFilterPlugin.open(taskSource,\n                                                                    inputSchema,\n                                                                    outputSchema,\n                                                                    mockPageOutput);\n\n                ImmutableMap.Builder<String,Object> builder = ImmutableMap.builder();\n                builder.put(\"_j0\", true);\n                String data = convertToJsonString(builder.build()); // Map\u3092JSON\u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u3066\u3044\u308b\n\n                for (Page page : PageTestUtils.buildPage(runtime.getBufferAllocator(),\n                                                         inputSchema,\n                                                         data, \"_c1_data\")) {\n                    pageOutput.add(page);\n                }\n\n                pageOutput.finish();\n                pageOutput.close();\n\n                PageReader pageReader = new PageReader(outputSchema);\n\n                for (Page page : mockPageOutput.pages) {\n                    pageReader.setPage(page);\n                    assertEquals(true, pageReader.getBoolean(outputSchema.getColumn(0)));\n                    // ...\n                    assertEquals(c1Data,\n                                 pageReader.getString(outputSchema.getColumn(13)));\n                }\n            }\n        });\n    }\n\n\n    // ...\n}\n\n\u5148\u7a0b\u3068\u540c\u69d8\u3001 org.embulk.filter.expand_json.ExpandJsonFilterPlugin.Control \u306e run \u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u3067\u30c6\u30b9\u30c8\u3092\u884c\u3063\u3066\u304d\u307e\u3059\u3002\n\n                MockPageOutput mockPageOutput = new MockPageOutput();\n                // ...\n                for (Page page : mockPageOutput.pages) {\n\nMockPageOutput \u3092\u4f7f\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u540d\u524d\u306e\u901a\u308a Mock\u5316\u3057\u305f PageOutput \u3092\u63d0\u4f9b\u3057\u3066\u304f\u308c\u307e\u3059\u3002\u3053\u306e MockPageOutput \u306e pages \u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u304b\u3089 Page \u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n                PageOutput pageOutput = expandJsonFilterPlugin.open(taskSource,\n                                                                    inputSchema,\n                                                                    outputSchema,\n                                                                    mockPageOutput);\n\n\u305d\u306e MockPageOutput \u3092\u4f7f\u3063\u3066Plugin\u306e open \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3093\u3067 PageOutput \u3092\u751f\u6210\u3057\u307e\u3059\u3002\n                for (Page page : PageTestUtils.buildPage(runtime.getBufferAllocator(),\n                                                         inputSchema,\n                                                         data, \"_c1_data\")) {\n                    pageOutput.add(page);\n                }\n\n\u30c6\u30b9\u30c8\u7528\u306e\u30c7\u30fc\u30bf\u3092\u5148\u307b\u3069\u751f\u6210\u3057\u305f pageOutput \u306b add \u3057\u3066\u3044\u304d\u307e\u3059\u3002 \u30c6\u30b9\u30c8\u7528\u306e\u30c7\u30fc\u30bf\u751f\u6210\u306b\u306f PageTestUtils \u306e buildPage \u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u7b2c\u4e00\u5f15\u6570\u306b\u306f EmbulkTestRuntime \u304b\u3089\u53d6\u5f97\u3057\u305f BufferAllocator \u3092\u3001\u7b2c\u4e8c\u5f15\u6570\u306b\u306f inputSchema \u3092\u3001 \u7b2c\u4e09\u5f15\u6570\u4ee5\u964d\u306f\u5b9f\u969b\u306e\u30c7\u30fc\u30bf\u3092\u6e21\u3057\u307e\u3059\u3002\n                PageReader pageReader = new PageReader(outputSchema);\n\n                for (Page page : mockPageOutput.pages) {\n                    pageReader.setPage(page);\n                    assertEquals(true, pageReader.getBoolean(outputSchema.getColumn(0)));\n                    // ...\n                    assertEquals(c1Data,\n                                 pageReader.getString(outputSchema.getColumn(13)));\n                }\n\n\u5f8c\u306f\u5b9f\u969b\u306b\u53d6\u5f97\u3067\u304d\u308b\u30c7\u30fc\u30bf\u3092assert\u3057\u3066\u3044\u304d\u307e\u3059\u3002PageReader \u3092\u4f7f\u3063\u3066\u53d6\u5f97\u3057\u307e\u3059\u3002\n\n\u3055\u3044\u3054\u306b\n\u306a\u3093\u3060\u304b\u50d5\u304c\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u306e\u30b3\u30fc\u30c9\u30ea\u30fc\u30c7\u30a3\u30f3\u30b0\u307f\u305f\u3044\u306a\u8aac\u660e\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304cfilter plugin\u306e\u30c6\u30b9\u30c8\u306e\u66f8\u304d\u65b9\u306f\u3054\u7406\u89e3\u3044\u305f\u3060\u3051\u305f\u3067\u3057\u3087\u3046\u304b\u3002\nEmbulk Plugins\u306f\u30c6\u30b9\u30c8\u304c\u306a\u3044\u3082\u306e\u304c\u591a\u3044\u306e\u3067\u3053\u306e\u6a5f\u4f1a\u306b\u30c6\u30b9\u30c8\u3092\u66f8\u3044\u3066\u898b\u3088\u3046\u3068\u306a\u308b\u4eba\u304c\u3044\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\n\u3053\u3093\u306b\u3061\u306f\u3002@Civitaspo \u3067\u3059\u3002\u5148\u65e512/15 \u306e [Embulk Meetup Tokyo#2](http://eventdots.jp/event/575046) \u3067\u306f\u3001[\u300eEmbulk\u306b\u8db3\u308a\u306a\u30445\u3064\u306e\u30b3\u30c8\u300f](https://speakerdeck.com/civitaspo/embulknizu-rinai5tufalsekoto)\u3068\u3044\u3046\u55a7\u5629\u8170\u306a\u30bf\u30a4\u30c8\u30eb\u3067\u767a\u8868\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\u304a\u304b\u3052\u3067\u8272\u3093\u306a\u65b9\u3068embulk\u306b\u3064\u3044\u3066\u8b70\u8ad6\u3067\u304d\u305f\u826f\u3044Meetup\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u547c\u3093\u3067\u304f\u3060\u3055\u3063\u305f @frsyuki \u3068\u3001\u88cf\u304b\u3089\u652f\u3048\u3066\u4e0b\u3055\u3063\u305f @sonots \u306b\u306f\u3053\u306e\u5834\u3092\u304a\u501f\u308a\u3057\u3066\u611f\u8b1d\u306e\u610f\u3092\u4f1d\u3048\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n\n\u3055\u3066\u3001\u4eca\u65e5\u306f embulk java-filter plugin \u306e\u30c6\u30b9\u30c8\u306e\u66f8\u304d\u65b9 \u306b\u3064\u3044\u3066\u8a18\u4e8b\u3092\u66f8\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u304a\u3053\u3068\u308f\u308a\n- \u8a71\u3092\u7c21\u5358\u306b\u3059\u308b\u305f\u3081\u306bjava-filter plugin\u306e\u30c6\u30b9\u30c8\u306e\u66f8\u304d\u65b9\u306bfocus\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u4ed6\u306etype\u306ejava plugin\u3067\u3082\u5fdc\u7528\u3067\u304d\u308b\u5185\u5bb9\u3060\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n- EmbulkEmbed\u3092\u4f7f\u3063\u305f\u30c6\u30b9\u30c8\u3082\u66f8\u3051\u307e\u3059\u304c\u4eca\u56de\u306f\u7d39\u4ecb\u3057\u307e\u305b\u3093\u3002\n- \u4f9d\u5b58\u306e\u306a\u3044Class\u3084Method\u30ec\u30d9\u30eb\u306e\u30c6\u30b9\u30c8\u306f\u666e\u901a\u306b\u66f8\u3051\u308b\u3060\u308d\u3046\u3068\u601d\u3046\u306e\u3067\u8a00\u53ca\u306f\u3057\u307e\u305b\u3093\u3002\n- \u300c\u3053\u3093\u306a\u66f8\u304d\u65b9\u306e\u65b9\u304c\u826f\u3044\u305c\u3088\u300d\u300c\u3053\u3053\u5206\u304b\u308a\u306b\u304f\u3044\u300d\u306a\u3069\u3001\u3054\u610f\u898b\u3042\u308a\u307e\u3057\u305f\u3089\u30c9\u30b7\u30c9\u30b7\u9023\u7d61\u3044\u305f\u3060\u304d\u305f\u3044\u3067\u3059\uff01\n    - (\u66f8\u3044\u305f\u5f8c\u306b\u601d\u3044\u307e\u3057\u305f\u304c\u3042\u307e\u308a\u4e00\u822c\u5316\u3055\u308c\u3066\u3044\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3002\u3002)\n\n# \u53c2\u8003\u8cc7\u6599\n- [Embulk Plugins](http://www.embulk.org/plugins/)\n- [TestRenameFilterPlugin.java](https://github.com/embulk/embulk/blob/master/embulk-standards/src/test/java/org/embulk/standards/TestRenameFilterPlugin.java)\n- [embulk-core\u306etest\u30e9\u30a4\u30d6\u30e9\u30ea](https://github.com/embulk/embulk/tree/master/embulk-core/src/test/java/org/embulk)\n    - [EmbulkTestRuntime](https://github.com/embulk/embulk/blob/master/embulk-core/src/test/java/org/embulk/EmbulkTestRuntime.java)\n- [Embulk Java\u30d1\u30fc\u30b5\u30fc\u30d7\u30e9\u30b0\u30a4\u30f3\u306e\u5358\u4f53\u30c6\u30b9\u30c8](http://www.ne.jp/asahi/hishidama/home/tech/embulk/new/java-parser-tester.html)\n    - EmbulkEmbed\u3092\u4f7f\u3063\u305f\u30c6\u30b9\u30c8\u306e\u66f8\u304d\u65b9\u3092\u7d39\u4ecb\u3057\u3066\u3044\u307e\u3059\n- [JUnit Rules](https://github.com/junit-team/junit/wiki/Rules)\n- [JUnit4.7 \u306e\u65b0\u6a5f\u80fd Rules \u3068\u306f](http://etc9.hatenablog.com/entry/20090903/1251997839)\n- [\u4e26\u5217\u30d0\u30c3\u30c1\u30c7\u30fc\u30bf\u8ee2\u9001OSS\u306eEmbulk\u3092\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u30ea\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u3066\u307f\u308b\uff08\u305d\u306e\uff13\uff1arun\u6982\u8981\uff06\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u6982\u8981](http://kimutansk.hatenablog.com/entry/20150218/1424261315)\n    - [EmbulkTestRuntime](https://github.com/embulk/embulk/blob/master/embulk-core/src/test/java/org/embulk/EmbulkTestRuntime.java) \u3092\u7406\u89e3\u3059\u308b\u305f\u3081\u306b\u8aad\u3093\u3067\u304a\u304f\u3068\u5409\n- [ExpectedException \u30eb\u30fc\u30eb\u3092\u4f7f\u3044\u3053\u306a\u3057\u305f\u3044](http://qiita.com/komiya_atsushi/items/082d6a71e475a613338a)\n\n# \u306f\u3058\u3081\u306b\nfilter plugin\u306e\u30c6\u30b9\u30c8\u3068\u3057\u3066\u306f\n\n- config\u3092\u6b63\u3057\u304f\u51e6\u7406\u3067\u304d\u3066\u3044\u308b\u304b\n- input\u306e\u30c7\u30fc\u30bf\u3092\u51e6\u7406\u3057\u305f\u5f8c\u3001output\u306e\u30c7\u30fc\u30bf\u304c\u610f\u56f3\u3057\u305f\u72b6\u614b\u306b\u306a\u3063\u3066\u3044\u308b\u304b\n\n\u304c\u308f\u304b\u308c\u3070\u826f\u3044\u3068\u601d\u3063\u3066\u3044\u308b\u306e\u3067\u4e0a\u8a182\u70b9\u306b\u95a2\u3059\u308b\u30c6\u30b9\u30c8\u306e\u66f8\u304d\u65b9\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\u8aac\u660e\u306e\u90fd\u5408\u4e0a\u3001\u62d9\u4f5c\u306e [embulk-filter-expand_json](https://github.com/civitaspo/embulk-filter-expand_json/blob/master/src/test/java/org/embulk/filter/expand_json/TestExpandJsonFilterPlugin.java) \u306e\u30b3\u30fc\u30c9\u3092\u30b5\u30f3\u30d7\u30eb\u3068\u3057\u3066\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n# \u6e96\u5099\u7de8\n## \u4f9d\u5b58\u95a2\u4fc2\u306e\u8ffd\u52a0\n\nbuild.gradle \u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f9d\u5b58\u95a2\u4fc2\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n```groovy\n// ...\n\ndependencies {\n    compile  \"org.embulk:embulk-core:0.7.+\"\n    provided \"org.embulk:embulk-core:0.7.+\"\n    // compile \"YOUR_JAR_DEPENDENCY_GROUP:YOUR_JAR_DEPENDENCY_MODULE:YOUR_JAR_DEPENDENCY_VERSION\"\n    testCompile \"junit:junit:4.+\"\n    testCompile \"org.embulk:embulk-core:0.7.+:test\" // <= \u30b3\u30ec!!\n}\n\n// ...\n\n```\n\n\u3053\u308c\u3067 [embulk-core\u306etest\u30e9\u30a4\u30d6\u30e9\u30ea](https://github.com/embulk/embulk/tree/master/embulk-core/src/test/java/org/embulk)\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n## EmbulkTestRuntime \u3092 Rule \u306b\u8a2d\u5b9a\u3059\u308b\n\nJUnit\u306b\u306f[Rules](https://github.com/junit-team/junit/wiki/Rules)\u3068\u3044\u3046\u6a5f\u80fd\u304c\u3042\u308a\u307e\u3059\u3002Embulk\u306e\u30c6\u30b9\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u306f\u3053\u306eRule\u306b\u4f7f\u7528\u3067\u304d\u308b [EmbulkTestRuntime](https://github.com/embulk/embulk/blob/master/embulk-core/src/test/java/org/embulk/EmbulkTestRuntime.java) \u3068\u3044\u3046 Class\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```java\n\n// ...\nimport org.embulk.EmbulkTestRuntime;\nimport org.junit.Rule;\n// ...\n\npublic class TestExpandJsonFilterPlugin\n{\n    @Rule\n    public EmbulkTestRuntime runtime = new EmbulkTestRuntime();\n\n    // ...\n}\n```\n\n\u3053\u306eClass\u3092Rule\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001[Embulk\u306eRuntime\u6642\u3067\u306a\u3044\u3068\u884c\u3048\u306a\u3044](http://kimutansk.hatenablog.com/entry/20150218/1424261315)\u30c6\u30b9\u30c8\u304c\u884c\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n## YAML\u306econfig\u3092\u30ed\u30fc\u30c9\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u3063\u3066\u304a\u304f\n\n\u5b9f\u969b\u306b\u8a2d\u5b9a\u3057\u305fYAML\u3092Embulk\u306b\u30ed\u30fc\u30c9\u3057\u3066\u30c6\u30b9\u30c8\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306bYAML\u306econfig\u3092\u30ed\u30fc\u30c9\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```java\n\n// ...\nimport org.embulk.config.ConfigLoader;\nimport org.embulk.config.ConfigSource;\n// ...\n\npublic class TestExpandJsonFilterPlugin\n{\n    // ...\n\n    private ConfigSource getConfigFromYaml(String yaml)\n    {\n        ConfigLoader loader = new ConfigLoader(Exec.getModelManager());\n        return loader.fromYamlString(yaml);\n    }\n\n    // ...\n}\n```\n\n\u3053\u308c\u3067YAML\u306econfig\u3092Plugin\u306b\u30ed\u30fc\u30c9\u3059\u308b\u6e96\u5099\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n# \u5b9f\u969b\u306b\u30c6\u30b9\u30c8\u3092\u66f8\u304f\u7de8\n## config\u3092\u6b63\u3057\u304f\u51e6\u7406\u3067\u304d\u3066\u3044\u308b\u304b\nconfig\u306e\u30c6\u30b9\u30c8\u306f\u4ee5\u4e0b\u306e2\u70b9\u3092\u898b\u3066\u304a\u3051\u3070\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n- required\u306aparam\u306b\u5024\u304c\u30bb\u30c3\u30c8\u3055\u308c\u306a\u3044\u5834\u5408\u306bexception\u3092\u5410\u304f\u304b\n- optional\u306aparam\u306b\u5024\u304c\u30bb\u30c3\u30c8\u3055\u308c\u306a\u3044\u5834\u5408\u306b\u5b9a\u7fa9\u3057\u305fdefault\u306e\u5024\u304c\u5165\u3063\u3066\u3044\u308b\u304b\n\n### required\u306aparam\u306b\u5024\u304c\u30bb\u30c3\u30c8\u3055\u308c\u306a\u3044\u5834\u5408\u306bexception\u3092\u5410\u304f\u304b\u306e\u30c6\u30b9\u30c8\u3092\u66f8\u304f\n\n#### \u6e96\u5099\nexception\u3092test\u3059\u308b\u305f\u3081\u306b\u3001[Rules](https://github.com/junit-team/junit/wiki/Rules) \u306b [ExpectedException](http://qiita.com/komiya_atsushi/items/082d6a71e475a613338a) \u3092\u8a2d\u5b9a\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```java\n// ...\nimport org.junit.rules.ExpectedException;\n// ...\n\npublic class TestExpandJsonFilterPlugin\n{\n    // ...\n\n    @Rule\n    public ExpectedException exception = ExpectedException.none();\n\n    // ...\n}\n```\n\n#### \u30c6\u30b9\u30c8\u3092\u66f8\u304f\n\n```java\n\n// ...\nimport org.embulk.config.ConfigException;\nimport org.junit.Test;\nimport static org.embulk.filter.expand_json.ExpandJsonFilterPlugin.PluginTask;\n// ...\n\npublic class TestExpandJsonFilterPlugin\n{\n    // ...\n\n    // json_column_name \u3068\u3044\u3046 required param \u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306b\n    // exception \u3092\u5c65\u304f\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u30c6\u30b9\u30c8\n    @Test\n    public void testThrowExceptionAbsentJsonColumnName()\n    {\n        String configYaml = \"\" +\n                \"type: expand_json\\n\" +\n                \"expanded_columns:\\n\" +\n                \"  - {name: _c1, type: string}\";\n        ConfigSource config = getConfigFromYaml(configYaml);\n\n        exception.expect(ConfigException.class);\n        exception.expectMessage(\"Field 'json_column_name' is required but not set\");\n        config.loadConfig(PluginTask.class);\n    }\n\n    // ...\n}\n```\n\n`String configYaml` \u306bfilter plugin\u306b\u8a2d\u5b9a\u3059\u308bconfig\u3092\u30bb\u30c3\u30c8\u3057\u3001\u5148\u307b\u3069\u6e96\u5099\u3057\u305f `getConfigFromYaml` \u306b\u98df\u308f\u305b\u3066\u3001 `ConfigSource` \u3092\u53d6\u5f97\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u3053\u308c\u4ee5\u964d\u3053\u306e\u8a2d\u5b9a\u304c\u3088\u304f\u51fa\u3066\u304d\u307e\u3059\u304c\u9010\u4e00\u3001\u8a00\u53ca\u3057\u306a\u3044\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n\u6b21\u306b `exception.expect` \u3068 `exception.expectMessage` \u3067\u767a\u751f\u3059\u308b\u4f8b\u5916\u306b\u3064\u3044\u3066\u5b9a\u7fa9\u3057\u307e\u3059\u3002 config\u306e\u4f8b\u5916\u306f `org.embulk.config.ConfigException` \u306a\u306e\u3067\u3001\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n\u6700\u5f8c\u306b config \u3092 plugin \u306b\u8aad\u307f\u8fbc\u307e\u305b\u307e\u3059\u3002 `config.loadConfig(PluginTask.class);` \u306f `transaction` \u306e\u4e00\u756a\u521d\u3081\u306b\u547c\u3070\u308c\u308b\u306e\u3067\u304a\u99b4\u67d3\u307f\u3067\u3059\u306d\u3002\u3053\u306e config \u306e\u30ed\u30fc\u30c9\u3067\u4f8b\u5916\u304c\u767a\u751f\u3057\u307e\u3059\u3002\n\n### optional\u306aparam\u306b\u5024\u304c\u30bb\u30c3\u30c8\u3055\u308c\u306a\u3044\u5834\u5408\u306b\u5b9a\u7fa9\u3057\u305fdefault\u306e\u5024\u304c\u5165\u3063\u3066\u3044\u308b\u304b\u306e\u30c6\u30b9\u30c8\u3092\u66f8\u304f\n\u6b21\u306f config \u3092\u30ed\u30fc\u30c9\u3057\u305f\u7d50\u679c\u3001getter\u3067\u53d6\u5f97\u3057\u305f\u5024\u3092assert\u3057\u307e\u3057\u3087\u3046\u3002\n\n```java\npublic class TestExpandJsonFilterPlugin\n{\n    // ...\n\n    @Test\n    public void testDefaultValue()\n    {\n        String configYaml = \"\" +\n                \"type: expand_json\\n\" +\n                \"json_column_name: _c0\\n\" +\n                \"expanded_columns:\\n\" +\n                \"  - {name: _j1, type: boolean}\\n\" +\n                \"  - {name: _j2, type: long}\\n\" +\n                \"  - {name: _j3, type: timestamp}\\n\" +\n                \"  - {name: _j4, type: double}\\n\" +\n                \"  - {name: _j5, type: string}\\n\";\n\n        ConfigSource config = getConfigFromYaml(configYaml);\n        PluginTask task = config.loadConfig(PluginTask.class);\n\n        assertEquals(\"$.\", task.getRoot());\n        assertEquals(\"UTC\", task.getTimeZone());\n        assertEquals(\"%Y-%m-%d %H:%M:%S.%N %z\", task.getDefaultTimestampFormat());\n    }\n\n    // ...\n}\n```\n\n`PluginTask task = config.loadConfig(PluginTask.class);` \u3067 `PluginTask` \u3092\u53d6\u5f97\u3057\u3001\u5b9a\u7fa9\u3055\u308c\u305fgetter\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\n## input\u306e\u30c7\u30fc\u30bf\u3092\u51e6\u7406\u3057\u305f\u5f8c\u3001output\u306e\u30c7\u30fc\u30bf\u304c\u610f\u56f3\u3057\u305f\u72b6\u614b\u306b\u306a\u3063\u3066\u3044\u308b\u304b\n\ninput\u306e\u30c7\u30fc\u30bf\u3092\u51e6\u7406\u3057\u305f\u5f8c\u3001output\u306e\u30c7\u30fc\u30bf\u304c\u610f\u56f3\u3057\u305f\u72b6\u614b\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u306e\u30c6\u30b9\u30c8\u306f\u4ee5\u4e0b\u306e2\u70b9\u3092\u898b\u3066\u304a\u3051\u3070\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n- input schema / output schema \u304c\u6b63\u3057\u304f\u5909\u66f4\u3055\u308c\u3066\u3044\u308b\u304b\n- input data / output data \u304c\u6b63\u3057\u304f\u5909\u66f4\u3055\u308c\u3066\u3044\u308b\u304b\n\n### input schema / output schema \u304c\u6b63\u3057\u304f\u5909\u66f4\u3055\u308c\u3066\u3044\u308b\u304b\u306e\u30c6\u30b9\u30c8\u3092\u66f8\u304f\n\ntransaction \u3092\u547c\u3073\u51fa\u3057\u3066schema\u306e\u5909\u66f4\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\n\n```java\n// ...\nimport org.embulk.spi.Schema;\nimport org.embulk.spi.Column;\nimport static org.embulk.filter.expand_json.ExpandJsonFilterPlugin.Control;\n// ...\n\npublic class TestExpandJsonFilterPlugin\n{\n    // ...\n\n    @Test\n    public void testExpandJsonKeyToSchema()\n    {\n        String configYaml = \"\" +\n                \"type: expand_json\\n\" +\n                \"json_column_name: _c0\\n\" +\n                \"root: $.\\n\" +\n                \"expanded_columns:\\n\" +\n                \"  - {name: _j1, type: boolean}\\n\" +\n                // ...\n                \"  - {name: _c0, type: string}\\n\";\n\n        ConfigSource config = getConfigFromYaml(configYaml);\n\n        final Schema inputSchema = Schema.builder()\n            .add(\"_c0\", STRING)\n            .add(\"_c1\", STRING)\n            .build();\n\n        ExpandJsonFilterPlugin expandJsonFilterPlugin = new ExpandJsonFilterPlugin();\n        expandJsonFilterPlugin.transaction(config, inputSchema, new Control()\n        {\n            @Override\n            public void run(TaskSource taskSource, Schema outputSchema)\n            {\n                assertEquals(7, outputSchema.getColumnCount());\n\n                Column new_j1 = outputSchema.getColumn(0);\n                // ...\n\n                assertEquals(\"_j1\", new_j1.getName());\n                assertEquals(BOOLEAN, new_j1.getType());\n                // ...\n            }\n        });\n    }\n\n    // ...\n}\n```\n\n```java\n        final Schema inputSchema = Schema.builder()\n            .add(\"_c0\", STRING)\n            .add(\"_c1\", STRING)\n            .build();\n\n        ExpandJsonFilterPlugin expandJsonFilterPlugin = new ExpandJsonFilterPlugin();\n        expandJsonFilterPlugin.transaction(config, inputSchema, new Control()\n```\n\u3053\u3053\u3067 plugin class\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u3001 `transaction` \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\u7b2c\u4e09\u5f15\u6570\u306b\u306f `org.embulk.filter.expand_json.ExpandJsonFilterPlugin.Control` \u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u6e21\u3057\u3066\u3001\u305d\u306e\u4e2d\u3067\u51e6\u7406\u7d50\u679c\u306e\u30c6\u30b9\u30c8\u3092\u884c\u3044\u307e\u3059\u3002\n\n```java\n            @Override\n            public void run(TaskSource taskSource, Schema outputSchema)\n```\n`run` \u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u306b outputSchema \u304c\u6e21\u3063\u3066\u304f\u308b\u306e\u3067\u3001\u3053\u306eschema\u3092assert\u3057\u307e\u3059\u3002\n\n### input data / output data \u304c\u6b63\u3057\u304f\u5909\u66f4\u3055\u308c\u3066\u3044\u308b\u304b\u306e\u30c6\u30b9\u30c8\u3092\u66f8\u304f\n\n```java\n// ...\nimport org.embulk.spi.Exec;\nimport org.embulk.spi.Page;\nimport org.embulk.spi.PageOutput;\nimport org.embulk.spi.PageReader;\nimport org.embulk.spi.PageTestUtils;\nimport org.embulk.spi.Schema;\nimport org.embulk.spi.TestPageBuilderReader.MockPageOutput;\n// ...\n\npublic class TestExpandJsonFilterPlugin\n{\n    // ...\n\n    @Test\n    public void testExpandJsonValues()\n    {\n        String configYaml = \"\" +\n                \"type: expand_json\\n\" +\n                \"json_column_name: _c0\\n\" +\n                \"root: $.\\n\" +\n                \"time_zone: Asia/Tokyo\\n\" +\n                \"expanded_columns:\\n\" +\n                \"  - {name: _j0, type: boolean}\\n\" +\n                // ...\n                \"  - {name: _c0, type: string}\\n\";\n\n        ConfigSource config = getConfigFromYaml(configYaml);\n\n        final Schema inputSchema = Schema.builder()\n            .add(\"_c0\", STRING)\n            .add(\"_c1\", STRING)\n            .build();\n\n        ExpandJsonFilterPlugin expandJsonFilterPlugin = new ExpandJsonFilterPlugin();\n        expandJsonFilterPlugin.transaction(config, inputSchema, new Control()\n        {\n            @Override\n            public void run(TaskSource taskSource, Schema outputSchema)\n            {\n                MockPageOutput mockPageOutput = new MockPageOutput();\n                PageOutput pageOutput = expandJsonFilterPlugin.open(taskSource,\n                                                                    inputSchema,\n                                                                    outputSchema,\n                                                                    mockPageOutput);\n\n                ImmutableMap.Builder<String,Object> builder = ImmutableMap.builder();\n                builder.put(\"_j0\", true);\n                String data = convertToJsonString(builder.build()); // Map\u3092JSON\u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u3066\u3044\u308b\n\n                for (Page page : PageTestUtils.buildPage(runtime.getBufferAllocator(),\n                                                         inputSchema,\n                                                         data, \"_c1_data\")) {\n                    pageOutput.add(page);\n                }\n\n                pageOutput.finish();\n                pageOutput.close();\n\n                PageReader pageReader = new PageReader(outputSchema);\n\n                for (Page page : mockPageOutput.pages) {\n                    pageReader.setPage(page);\n                    assertEquals(true, pageReader.getBoolean(outputSchema.getColumn(0)));\n                    // ...\n                    assertEquals(c1Data,\n                                 pageReader.getString(outputSchema.getColumn(13)));\n                }\n            }\n        });\n    }\n\n\n    // ...\n}\n```\n\n\u5148\u7a0b\u3068\u540c\u69d8\u3001 `org.embulk.filter.expand_json.ExpandJsonFilterPlugin.Control` \u306e `run` \u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u3067\u30c6\u30b9\u30c8\u3092\u884c\u3063\u3066\u304d\u307e\u3059\u3002\n\n```java\n\n                MockPageOutput mockPageOutput = new MockPageOutput();\n                // ...\n                for (Page page : mockPageOutput.pages) {\n```\n\n`MockPageOutput` \u3092\u4f7f\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u540d\u524d\u306e\u901a\u308a Mock\u5316\u3057\u305f PageOutput \u3092\u63d0\u4f9b\u3057\u3066\u304f\u308c\u307e\u3059\u3002\u3053\u306e `MockPageOutput` \u306e `pages` \u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u304b\u3089 `Page` \u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```java\n                PageOutput pageOutput = expandJsonFilterPlugin.open(taskSource,\n                                                                    inputSchema,\n                                                                    outputSchema,\n                                                                    mockPageOutput);\n```\n\n\u305d\u306e `MockPageOutput` \u3092\u4f7f\u3063\u3066Plugin\u306e `open` \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3093\u3067 `PageOutput` \u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n```java\n                for (Page page : PageTestUtils.buildPage(runtime.getBufferAllocator(),\n                                                         inputSchema,\n                                                         data, \"_c1_data\")) {\n                    pageOutput.add(page);\n                }\n```\n\n\u30c6\u30b9\u30c8\u7528\u306e\u30c7\u30fc\u30bf\u3092\u5148\u307b\u3069\u751f\u6210\u3057\u305f `pageOutput` \u306b `add` \u3057\u3066\u3044\u304d\u307e\u3059\u3002 \u30c6\u30b9\u30c8\u7528\u306e\u30c7\u30fc\u30bf\u751f\u6210\u306b\u306f `PageTestUtils` \u306e `buildPage` \u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u7b2c\u4e00\u5f15\u6570\u306b\u306f `EmbulkTestRuntime` \u304b\u3089\u53d6\u5f97\u3057\u305f `BufferAllocator` \u3092\u3001\u7b2c\u4e8c\u5f15\u6570\u306b\u306f `inputSchema` \u3092\u3001 \u7b2c\u4e09\u5f15\u6570\u4ee5\u964d\u306f\u5b9f\u969b\u306e\u30c7\u30fc\u30bf\u3092\u6e21\u3057\u307e\u3059\u3002\n\n```java\n                PageReader pageReader = new PageReader(outputSchema);\n\n                for (Page page : mockPageOutput.pages) {\n                    pageReader.setPage(page);\n                    assertEquals(true, pageReader.getBoolean(outputSchema.getColumn(0)));\n                    // ...\n                    assertEquals(c1Data,\n                                 pageReader.getString(outputSchema.getColumn(13)));\n                }\n```\n\n\u5f8c\u306f\u5b9f\u969b\u306b\u53d6\u5f97\u3067\u304d\u308b\u30c7\u30fc\u30bf\u3092assert\u3057\u3066\u3044\u304d\u307e\u3059\u3002`PageReader` \u3092\u4f7f\u3063\u3066\u53d6\u5f97\u3057\u307e\u3059\u3002\n\n# \u3055\u3044\u3054\u306b\n\n\u306a\u3093\u3060\u304b\u50d5\u304c\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u306e\u30b3\u30fc\u30c9\u30ea\u30fc\u30c7\u30a3\u30f3\u30b0\u307f\u305f\u3044\u306a\u8aac\u660e\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304cfilter plugin\u306e\u30c6\u30b9\u30c8\u306e\u66f8\u304d\u65b9\u306f\u3054\u7406\u89e3\u3044\u305f\u3060\u3051\u305f\u3067\u3057\u3087\u3046\u304b\u3002\nEmbulk Plugins\u306f\u30c6\u30b9\u30c8\u304c\u306a\u3044\u3082\u306e\u304c\u591a\u3044\u306e\u3067\u3053\u306e\u6a5f\u4f1a\u306b\u30c6\u30b9\u30c8\u3092\u66f8\u3044\u3066\u898b\u3088\u3046\u3068\u306a\u308b\u4eba\u304c\u3044\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\n\n", "tags": ["Embulk", "Java", "JUnit"]}