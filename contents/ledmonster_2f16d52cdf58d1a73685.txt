{"tags": ["DDD", "Python"], "context": " More than 1 year has passed since last update.I searched for Value object implementation in Python, and found keleshev's implementation in github. But it doesn't provide the feature of immutability of Value object. So, I implemented property based immutable Value object class by myself.\n\nexplicit property definition\nvalue based comparison, including hash\n\nAny feedbacks are welcome.\n\nValueObject class\nclass ValueObject(object):\n    \"\"\" base class for Value Objects\n\n    please call _set_properties in constructor.\n    \"\"\"\n\n    def __new__(class_, *args, **kwargs):\n        self = object.__new__(class_, *args, **kwargs)\n        self.__initialized = False\n        self.__params = dict()\n        return self\n\n    def _set_properties(self, mapping):\n        if self.__initialized:\n            raise AttributeError('callable only by constructor')\n\n        self.__initialized = True\n        self.__params = dict(mapping)\n        self.__labels = [k for k, v in mapping]\n\n        def setprop(key):\n            setattr(self.__class__, key, property(lambda x: x.__params[key]))\n\n        for k, v in mapping:\n            if not hasattr(self.__class__, k):\n                setprop(k)\n\n    def get_values(self):\n        return self.__params\n\n    def __repr__(self):\n        return unicode(self).encode('utf-8')\n\n    def __unicode__(self):\n        return u'%s(%s)' % (\n            self.__class__.__name__,\n            u', '.join(unicode(self.__params[k]) for k in self.__labels))\n\n    def __hash__(self):\n        return hash(repr(self))\n\n    def __eq__(self, other):\n        if not isinstance(other, self.__class__):\n            return False\n        return repr(self) == repr(other)\n\n    def __ne__(self, other):\n        if not isinstance(other, self.__class__):\n            return True\n        return repr(self) != repr(other)\n\n\nTest\n# -*- coding: utf-8 -*-\nimport pytest\n\nfrom . import ValueObject\n\n\nclass Date(ValueObject):\n\n    def __init__(self, year, month, day):\n        self._set_properties([\n            ('year', int(year)),\n            ('month', int(month)),\n            ('day', int(day)),\n        ])\n\n\nclass Foo(ValueObject):\n    def __init__(self, text='foo'):\n        self._set_properties([\n            ('text', text),\n        ])\n\n\n@pytest.fixture\ndef date():\n    return Date(2012, 2, 20)\n\n\n@pytest.fixture\ndef foo_unicode():\n    return Foo(u'\u3075\u30fc')\n\n\ndef test_properties(date):\n    assert date.year == 2012\n    assert date.month == 2\n    assert date.day == 20\n\n\ndef test_immutable(date):\n    with pytest.raises(AttributeError):\n        date.year = 2015\n\n\ndef test_set_properties(date):\n    with pytest.raises(AttributeError):\n        date._set_properties([\n            ('year', 2015),\n        ])\n\n\ndef test_repr(date):\n    assert repr(date) == \"Date(2012, 2, 20)\"\n\n\ndef test_get_values(date):\n    date.get_values == {'year': 2012, 'month': 2, 'day': 20}\n\n\ndef test_unicode(foo_unicode):\n    assert foo_unicode.text == u'\u3075\u30fc'\n    assert unicode(foo_unicode) == u\"Foo(\u3075\u30fc)\"\n    assert repr(foo_unicode) == u\"Foo(\u3075\u30fc)\".encode('utf-8')\n\n\n\u30c9\u30e1\u30a4\u30f3\u99c6\u52d5\u958b\u767a\u30b7\u30ea\u30fc\u30ba\n\nDDD\u3067\u8a2d\u8a08\u3059\u308b\u306a\u3089CQRS\u306e\u5229\u7528\u3092\u691c\u8a0e\u3059\u3079\u304d\nValueObject implementation in Python\nHexagonal Architecture \u306e\u5b9f\u8df5\u306b\u306f zope.interface \u304c\u4fbf\u5229\n\n\nI searched for Value object implementation in Python, and found [keleshev's implementation](https://github.com/keleshev/value) in github. But it doesn't provide the feature of immutability of Value object. So, I implemented property based immutable Value object class by myself.\n\n* explicit property definition\n* value based comparison, including hash\n\nAny feedbacks are welcome.\n\n### ValueObject class\n\n\n    class ValueObject(object):\n        \"\"\" base class for Value Objects\n\n        please call _set_properties in constructor.\n        \"\"\"\n\n        def __new__(class_, *args, **kwargs):\n            self = object.__new__(class_, *args, **kwargs)\n            self.__initialized = False\n            self.__params = dict()\n            return self\n\n        def _set_properties(self, mapping):\n            if self.__initialized:\n                raise AttributeError('callable only by constructor')\n\n            self.__initialized = True\n            self.__params = dict(mapping)\n            self.__labels = [k for k, v in mapping]\n\n            def setprop(key):\n                setattr(self.__class__, key, property(lambda x: x.__params[key]))\n\n            for k, v in mapping:\n                if not hasattr(self.__class__, k):\n                    setprop(k)\n\n        def get_values(self):\n            return self.__params\n\n        def __repr__(self):\n            return unicode(self).encode('utf-8')\n\n        def __unicode__(self):\n            return u'%s(%s)' % (\n                self.__class__.__name__,\n                u', '.join(unicode(self.__params[k]) for k in self.__labels))\n\n        def __hash__(self):\n            return hash(repr(self))\n\n        def __eq__(self, other):\n            if not isinstance(other, self.__class__):\n                return False\n            return repr(self) == repr(other)\n\n        def __ne__(self, other):\n            if not isinstance(other, self.__class__):\n                return True\n            return repr(self) != repr(other)\n\n\n### Test\n\n    # -*- coding: utf-8 -*-\n    import pytest\n\n    from . import ValueObject\n\n\n    class Date(ValueObject):\n\n        def __init__(self, year, month, day):\n            self._set_properties([\n                ('year', int(year)),\n                ('month', int(month)),\n                ('day', int(day)),\n            ])\n\n\n    class Foo(ValueObject):\n        def __init__(self, text='foo'):\n            self._set_properties([\n                ('text', text),\n            ])\n\n\n    @pytest.fixture\n    def date():\n        return Date(2012, 2, 20)\n\n\n    @pytest.fixture\n    def foo_unicode():\n        return Foo(u'\u3075\u30fc')\n\n\n    def test_properties(date):\n        assert date.year == 2012\n        assert date.month == 2\n        assert date.day == 20\n\n\n    def test_immutable(date):\n        with pytest.raises(AttributeError):\n            date.year = 2015\n\n\n    def test_set_properties(date):\n        with pytest.raises(AttributeError):\n            date._set_properties([\n                ('year', 2015),\n            ])\n\n\n    def test_repr(date):\n        assert repr(date) == \"Date(2012, 2, 20)\"\n\n\n    def test_get_values(date):\n        date.get_values == {'year': 2012, 'month': 2, 'day': 20}\n\n\n    def test_unicode(foo_unicode):\n        assert foo_unicode.text == u'\u3075\u30fc'\n        assert unicode(foo_unicode) == u\"Foo(\u3075\u30fc)\"\n        assert repr(foo_unicode) == u\"Foo(\u3075\u30fc)\".encode('utf-8')\n\n### \u30c9\u30e1\u30a4\u30f3\u99c6\u52d5\u958b\u767a\u30b7\u30ea\u30fc\u30ba\n\n* [DDD\u3067\u8a2d\u8a08\u3059\u308b\u306a\u3089CQRS\u306e\u5229\u7528\u3092\u691c\u8a0e\u3059\u3079\u304d](http://qiita.com/ledmonster/items/22b00c65208dffeff7e4)\n* [ValueObject implementation in Python](http://qiita.com/ledmonster/items/2f16d52cdf58d1a73685)\n* [Hexagonal Architecture \u306e\u5b9f\u8df5\u306b\u306f zope.interface \u304c\u4fbf\u5229](http://qiita.com/ledmonster/items/9de40b30040326a7dba8)\n"}