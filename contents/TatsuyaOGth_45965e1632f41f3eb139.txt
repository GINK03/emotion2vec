{"context": "\n\n\u306f\u3058\u3081\u306b\n\u7d30\u7dda\u5316\u51e6\u7406\uff08\u9aa8\u683c\u691c\u51fa\uff0cThinning\uff0cSkeletonization\uff09\u306f\u6700\u3082\u57fa\u672c\u7684\u306a\u753b\u50cf\u51e6\u7406\u306e\uff11\u3064\u3067\u3059\u304c\uff0c\u3044\u304f\u3064\u304b\u3042\u308b\u65b9\u6cd5\u306e\uff11\u3064\u3068\u3057\u3066Hilditch\u306e\u65b9\u6cd5\u3092C++\u3067\u5b9f\u88c5\u3057\u305f\u306e\u3067\u30e1\u30e2\n\nHilditch\u306e\u7d30\u7dda\u5316\n\u6ce8\u76ee\u753b\u7d20 P0 \u306e\uff18\u8fd1\u508d\u306e\u753b\u7d20 P1\u301cP8 \u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308b\uff0e\n\n\nP(4)\nP(3)\nP(2)\n\n\nP(5)\nP(0)\nP(1)\n\n\nP(6)\nP(7)\nP(8)\n\n\n\u4ee5\u4e0b\u3092\u5b9a\u7fa9\nN_8 = \\left\\{ P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8 \\right\\}\nN8={P1,P2,P3,P4,P5,P6,P7,P8}{N_8 = \\left\\{ P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8 \\right\\}\n}\nN_{odd} = \\left\\{P_1, P_3, P_5, P_7 \\right\\}\nNodd={P1,P3,P5,P7}{N_{odd} = \\left\\{P_1, P_3, P_5, P_7 \\right\\}\n}\n\u307e\u305f\uff0c\u753b\u7d20 Pi (i=0...8) \u306e\u968e\u8abf\u5024\u3092 B(Pi) (i=0...8) \u3068\u8868\u8a18\u3059\u308b\uff0e\u305f\u3060\u3057\uff0c\u3053\u3053\u3067\u80cc\u666f\u304c\u305d\u306e\u968e\u8abf\u5024\u30920, \u524d\u666f\u753b\u7d20\u306e\u968e\u8abf\u5024\u30921\u3068\u3059\u308b\uff0e\n\u539f\u753b\u50cf\u3092\u30e9\u30b9\u30bf\u8d70\u67fb\u3057\uff0c\u3042\u308b\u6ce8\u76ee\u753b\u7d20 P0 \uff08\u524d\u666f\u753b\u7d20\uff09\u304c\u6b21\u306e\uff16\u3064\u306e\u6761\u4ef6\u3092\u5168\u3066\u6e80\u305f\u3057\u305f\u3068\u304d\uff0c\u753b\u7d20 P0 \u306e\u968e\u8abf\u5024\u3092-1\uff0c\u3059\u306a\u308f\u3061 B(P0)=-1 \u3068\u3059\u308b\uff0e\n\u6761\u4ef6\uff11\uff1a\u524d\u666f\u753b\u7d20\u3067\u3042\u308b\nB(P_0) = 1\nB(P0)=1{B(P_0) = 1\n}\n\u6761\u4ef6\uff12\uff1a\u5883\u754c\u70b9\u3067\u3042\u308b\n\\sum_{k \\ni N_{odd}} \\left\\{ 1-|B(P_k)| \\right\\} \\geq 1\n\u2211k\u220bNodd{1\u2212|B(Pk)|}\u22651{\\sum_{k \\ni N_{odd}} \\left\\{ 1-|B(P_k)| \\right\\} \\geq 1\n}\n\u6761\u4ef6\uff13\uff1a\u7aef\u70b9\u3092\u524a\u9664\u3057\u306a\u3044\n\\sum_{k \\ni N_8} |B(P_k)| \\geq 2\n\u2211k\u220bN8|B(Pk)|\u22652{\\sum_{k \\ni N_8} |B(P_k)| \\geq 2\n}\n\u6761\u4ef6\uff14\uff1a\u5b64\u7acb\u70b9\u3092\u524a\u9664\u3057\u306a\u3044\n\\sum_{k \\ni N_8} C_k \\geq 1, C_k = \\left\\{ \\begin{array}{} 1 & for & B(P_k) = 1 \\\\ 0 & for & B(P_k) \\neq 1 \\end{array} \\right\\}\n\u2211k\u220bN8Ck\u22651,Ck={1forB(Pk)=10forB(Pk)\u22601}{\\sum_{k \\ni N_8} C_k \\geq 1, C_k = \\left\\{ \\begin{array}{} 1 & for & B(P_k) = 1 \\\\ 0 & for & B(P_k) \\neq 1 \\end{array} \\right\\}\n}\n\u6761\u4ef6\uff15\uff1a\u9023\u7d50\u6027\u3092\u4fdd\u5b58\u3059\u308b\nN^{8}_{C} (P_0) = 1, WHERE, N^{8}_C (P_0) = \\sum_{k \\ni N_{odd}} \\left\\{D(P_k)-D(P_k) D(P_{k+1}) D(P_{k+2}) \\right\\}\nN8C(P0)=1,WHERE,N8C(P0)=\u2211k\u220bNodd{D(Pk)\u2212D(Pk)D(Pk+1)D(Pk+2)}{N^{8}_{C} (P_0) = 1, WHERE, N^{8}_C (P_0) = \\sum_{k \\ni N_{odd}} \\left\\{D(P_k)-D(P_k) D(P_{k+1}) D(P_{k+2}) \\right\\}\n}\n\u6761\u4ef6\uff16\uff1a\u7dda\u5e45\uff12\u306e\u7dda\u5206\u306e\u7247\u5074\u3060\u3051\u3092\u524a\u9664\u3059\u308b\n\u5168\u3066\u306e n (n = 0...8) \u306b\u5bfe\u3057\u3066\uff0c\u6b21\u306e\u3044\u305a\u308c\u304b\u304c\u6210\u308a\u7acb\u3064\uff0e\n(i) \\hspace{10pt} B(P_n) \\neq -1 \\\\\n(ii) \\hspace{10pt} B(P_n) = 0, THAN, N^{8}_{C} = 1\n(i)B(Pn)\u2260\u22121(ii)B(Pn)=0,THAN,N8C=1{(i) \\hspace{10pt} B(P_n) \\neq -1 \\\\\n(ii) \\hspace{10pt} B(P_n) = 0, THAN, N^{8}_{C} = 1\n}\n\u3053\u306e\u51e6\u7406\u3092\u539f\u753b\u50cf\u4e2d\u306e\u5168\u3066\u306e\u524d\u666f\u753b\u7d20\u306b\u3064\u3044\u3066\u884c\u3063\u305f\u5f8c\uff0c\u968e\u8abf\u5024\u304c-1\u306e\u5168\u3066\u306e\u753b\u7d20\u306e\u968e\u8abf\u5024\u30920\uff08\u80cc\u666f\u753b\u7d20\uff09\u306b\u3057\u305f\u5f8c\uff0c\u524d\u666f\u304c\u305d\u306e\u6761\u4ef6\u3092\u8abf\u3079\u308b\u6bb5\u968e\u306b\u623b\u3063\u3066\u51e6\u7406\u3092\u7e70\u308a\u8fd4\u3059\uff0e\u968e\u8abf\u5024\u304c-1\u306b\u5909\u66f4\u3055\u308c\u308b\u753b\u7d20\u304c\u306a\u304f\u306a\u3063\u305f\u6642\u70b9\u3067\u51e6\u7406\u3092\u7d42\u4e86\u3059\u308b\uff0e\n\n\u5b9f\u88c5\n\n/**\n *  @brief Thinning (Hilditxh method)\n *\n *  @param src Source image pixels pointer (depth: 8UC)\n *  @param dst Output image pixels pointer (dspth: 8UC)\n *  @param w   Source image width\n *  @param h   Source image height\n */\nvoid hilditchThinning(const unsigned char* src, unsigned char* dst, int w, int h)\n{\n    int offset[9][2] = {{0,0}, {1,0}, {1,-1}, {0,-1}, {-1,-1}, {-1,0}, {-1,1}, {0,1}, {1,1}};\n    int nOdd[4] = {1, 3, 5, 7};\n    int b[9];\n    int px, py;\n    bitset<6> condition;\n\n    memcpy(dst, src, w * h);\n\n    int path = 1;\n    int counter;\n\n    auto funcNc8 = [&nOdd](int *b)\n    {\n        array<int, 10> d;\n        int j;\n        int sum = 0;\n\n        for (int i = 0; i <= 9; ++i)\n        {\n            j = i;\n            if (i == 9) j = 1;\n            if (abs( *(b + j)) == 1)\n                d[i] = 1;\n            else\n                d[i] = 0;\n        }\n\n        for (int i = 0; i < 4; ++i)\n        {\n            j = nOdd[i];\n            sum = sum + d[j] - d[j] * d[j+1] * d[j+2];\n        }\n\n        return sum;\n    };\n\n    cout << \"start thinning \" << endl;\n    clock_t beginTime = clock();\n\n    do {\n        cout << \".\";\n        counter = 0;\n\n        for (int y = 0; y < h; ++y)\n        {\n            for (int x = 0; x < w; ++x)\n            {\n                for (int i = 0; i < 9; ++i)\n                {\n                    b[i] = 0;\n                    px = x + offset[i][0];\n                    py = y + offset[i][1];\n                    if (px >= 0 && px < w && py >= 0 && py < h)\n                    {\n                        int idx = w * py + px;\n                        if (dst[idx] == 255)\n                        {\n                            b[i] = 1;\n                        }\n                        else if (dst[idx] == 127)\n                        {\n                            b[i] = -1;\n                        }\n                    }\n                }\n\n                condition.reset();\n\n                // Condition 1\n                if (b[0] == 1) condition.set(0, true);\n\n                // Condition 2\n                int sum = 0;\n                for (int i = 0; i < 4; ++i)\n                {\n                    sum = sum + 1 - abs(b[nOdd[i]]);\n                }\n                if (sum >= 1) condition.set(1, true);\n\n                // Condition 3\n                sum = 0;\n                for (int i = 1; i <= 8; ++i)\n                {\n                    sum = sum + abs(b[i]);\n                }\n                if (sum >= 2) condition.set(2, true);\n\n                // Condition 4\n                sum = 0;\n                for (int i = 1; i <= 8; ++i)\n                {\n                    if (b[i] == 1) ++sum;\n                }\n                if (sum >= 1) condition.set(3, true);\n\n                // Condition 5\n                if (funcNc8(b) == 1) condition.set(4, true);\n\n                // Condition 6\n                sum = 0;\n                for (int i = 1; i <= 8; ++i)\n                {\n                    if (b[i] != -1)\n                    {\n                        ++sum;\n                    }\n                    else {\n                        int copy = b[i];\n                        b[i] = 0;\n                        if (funcNc8(b) == 1) ++sum;\n                        b[i] = copy;\n                    }\n                }\n                if (sum == 8) condition.set(5, true);\n\n                // Final judgement\n                if (condition.all())\n                {\n                    int idx = y * w + x;\n                    dst[idx] = 127;\n                    ++counter;\n                }\n            }\n        }\n\n        if (counter != 0)\n        {\n            for (int y = 0; y < h; ++y)\n            {\n                for (int x = 0; x < w; ++x)\n                {\n                    int idx = y * w + x;\n                    if (dst[idx] == 127)\n                    {\n                        dst[idx] = 0;\n                    }\n                }\n            }\n        }\n\n        ++path;\n    }\n    while (counter != 0);\n\n    clock_t endTime = clock() - beginTime;\n    cout << \" Done! Time: \" << (double)(endTime) / CLOCKS_PER_SEC << \" sec, Num Path: \" << path << endl;\n}\n\n\n\n\u4f7f\u3044\u65b9\n\u7b2c\u4e00\u5f15\u6570\u306b\u4e88\u3081\u8aad\u307f\u8fbc\u3093\u3060\u753b\u50cf\u306e\u30d4\u30af\u30bb\u30eb\uff08unsigned char, 8bit, single channel\uff09\uff0c\u7b2c\u4e8c\u5f15\u6570\u306f\u540c\u3058\u578b\u306e\u51fa\u529b\u753b\u50cf\u30d4\u30af\u30bb\u30eb\uff0c\u7b2c\u4e09\uff0c\u7b2c\u56db\u5f15\u6570\u306b\u5165\u529b\u753b\u50cf\u306e\u6a2a\u5e45\uff0c\u7e26\u5e45\u3092\u5165\u308c\u307e\u3059\uff0e\n\n\u8a08\u7b97\u7d50\u679c\n\n\u5165\u529b\u753b\u50cf\n\n\n\u51fa\u529b\u753b\u50cf\n\n\u65e2\u77e5\u306e\u554f\u984c\u3068\u3057\u3066\u306f\u771f\u5186\u304cX\u72b6\u306b\u306a\u3063\u305f\u308a\uff0c\u300c\u3072\u3052\u300d\u304c\u6b8b\u3063\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u3042\u308a\uff0c\u76ee\u7684\u306b\u3088\u3063\u3066\u306f\u3053\u308c\u3089\u3092\u3069\u3046\u3059\u308b\u304b\u60a9\u307f\u3069\u3053\u308d\u3060\u3063\u305f\u308a\u306f\u3057\u307e\u3059\uff0e\n\u3042\u3068\uff0c\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3067\u3059\u304c\uff0c\u8a08\u7b97\u305d\u306e\u3082\u306e\u306e\u554f\u984c\u3067\u3082\u3042\u308a\u307e\u3059\u304c\u7d50\u69cb\u6642\u9593\u304b\u304b\u308a\u307e\u3059\uff0e\u4e0a\u306e\u753b\u50cf\u3067\u308210\u79d2\u3050\u3089\u3044\u304b\u304b\u308a\u307e\u3057\u305f\uff0e\u306a\u306e\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306a\u5b9f\u7528\u306f\u96e3\u3057\u3044\u3067\u3059\u306d\uff0e\n\u7d30\u7dda\u5316\u306f\u4ed6\u306b\u3082\u3044\u308d\u3093\u306a\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u304c\uff0c\u6642\u9593\u304c\u3042\u308c\u3070\u66f8\u304d\u307e\u3059\uff0e\n\n\u53c2\u8003\u6587\u732e\n\n\u5b89\u5c45\u9662 \u731b, \u9577\u5c3e \u667a\u6674(\u5171\u8457),: \"C\u8a00\u8a9e\u306b\u3088\u308b\u753b\u50cf\u51e6\u7406\u5165\u9580\", \u30c0\u30a4\u30a4\u30c1\u66f8\u623f(2000)\n\n# \u306f\u3058\u3081\u306b\n\n\u7d30\u7dda\u5316\u51e6\u7406\uff08\u9aa8\u683c\u691c\u51fa\uff0cThinning\uff0cSkeletonization\uff09\u306f\u6700\u3082\u57fa\u672c\u7684\u306a\u753b\u50cf\u51e6\u7406\u306e\uff11\u3064\u3067\u3059\u304c\uff0c\u3044\u304f\u3064\u304b\u3042\u308b\u65b9\u6cd5\u306e\uff11\u3064\u3068\u3057\u3066Hilditch\u306e\u65b9\u6cd5\u3092C++\u3067\u5b9f\u88c5\u3057\u305f\u306e\u3067\u30e1\u30e2\n\n#Hilditch\u306e\u7d30\u7dda\u5316\n\n\u6ce8\u76ee\u753b\u7d20 _P<sub>0</sub>_ \u306e\uff18\u8fd1\u508d\u306e\u753b\u7d20 _P<sub>1</sub>\u301cP<sub>8</sub>_ \u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308b\uff0e\n\n<table>\n<tr><td>P(4)</td><td>P(3)</td><td>P(2)</td></tr>\n<tr><td>P(5)</td><td>P(0)</td><td>P(1)</td></tr>\n<tr><td>P(6)</td><td>P(7)</td><td>P(8)</td></tr>\n</table>\n\n\u4ee5\u4e0b\u3092\u5b9a\u7fa9\n\n```math\nN_8 = \\left\\{ P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8 \\right\\}\n```\n\n```math\nN_{odd} = \\left\\{P_1, P_3, P_5, P_7 \\right\\}\n```\n\n\u307e\u305f\uff0c\u753b\u7d20 _P<sub>i</sub> (i=0...8)_ \u306e\u968e\u8abf\u5024\u3092 _B(P<sub>i</sub>) (i=0...8)_ \u3068\u8868\u8a18\u3059\u308b\uff0e\u305f\u3060\u3057\uff0c\u3053\u3053\u3067\u80cc\u666f\u304c\u305d\u306e\u968e\u8abf\u5024\u30920, \u524d\u666f\u753b\u7d20\u306e\u968e\u8abf\u5024\u30921\u3068\u3059\u308b\uff0e\n\n\u539f\u753b\u50cf\u3092\u30e9\u30b9\u30bf\u8d70\u67fb\u3057\uff0c\u3042\u308b\u6ce8\u76ee\u753b\u7d20 _P<sub>0</sub>_ \uff08\u524d\u666f\u753b\u7d20\uff09\u304c\u6b21\u306e\uff16\u3064\u306e\u6761\u4ef6\u3092\u5168\u3066\u6e80\u305f\u3057\u305f\u3068\u304d\uff0c\u753b\u7d20 _P<sub>0</sub>_ \u306e\u968e\u8abf\u5024\u3092-1\uff0c\u3059\u306a\u308f\u3061 _B(P<sub>0</sub>)=-1_ \u3068\u3059\u308b\uff0e\n\n**\u6761\u4ef6\uff11\uff1a\u524d\u666f\u753b\u7d20\u3067\u3042\u308b**\n\n```math\nB(P_0) = 1\n```\n\n**\u6761\u4ef6\uff12\uff1a\u5883\u754c\u70b9\u3067\u3042\u308b**\n\n```math\n\\sum_{k \\ni N_{odd}} \\left\\{ 1-|B(P_k)| \\right\\} \\geq 1\n```\n\n**\u6761\u4ef6\uff13\uff1a\u7aef\u70b9\u3092\u524a\u9664\u3057\u306a\u3044**\n\n```math\n\\sum_{k \\ni N_8} |B(P_k)| \\geq 2\n```\n\n**\u6761\u4ef6\uff14\uff1a\u5b64\u7acb\u70b9\u3092\u524a\u9664\u3057\u306a\u3044**\n\n```math\n\\sum_{k \\ni N_8} C_k \\geq 1, C_k = \\left\\{ \\begin{array}{} 1 & for & B(P_k) = 1 \\\\ 0 & for & B(P_k) \\neq 1 \\end{array} \\right\\}\n```\n\n**\u6761\u4ef6\uff15\uff1a\u9023\u7d50\u6027\u3092\u4fdd\u5b58\u3059\u308b**\n\n```math\nN^{8}_{C} (P_0) = 1, WHERE, N^{8}_C (P_0) = \\sum_{k \\ni N_{odd}} \\left\\{D(P_k)-D(P_k) D(P_{k+1}) D(P_{k+2}) \\right\\}\n```\n\n**\u6761\u4ef6\uff16\uff1a\u7dda\u5e45\uff12\u306e\u7dda\u5206\u306e\u7247\u5074\u3060\u3051\u3092\u524a\u9664\u3059\u308b**\n\n\u5168\u3066\u306e _n (n = 0...8)_ \u306b\u5bfe\u3057\u3066\uff0c\u6b21\u306e\u3044\u305a\u308c\u304b\u304c\u6210\u308a\u7acb\u3064\uff0e\n\n```math\n(i) \\hspace{10pt} B(P_n) \\neq -1 \\\\\n(ii) \\hspace{10pt} B(P_n) = 0, THAN, N^{8}_{C} = 1\n```\n\n\u3053\u306e\u51e6\u7406\u3092\u539f\u753b\u50cf\u4e2d\u306e\u5168\u3066\u306e\u524d\u666f\u753b\u7d20\u306b\u3064\u3044\u3066\u884c\u3063\u305f\u5f8c\uff0c\u968e\u8abf\u5024\u304c-1\u306e\u5168\u3066\u306e\u753b\u7d20\u306e\u968e\u8abf\u5024\u30920\uff08\u80cc\u666f\u753b\u7d20\uff09\u306b\u3057\u305f\u5f8c\uff0c\u524d\u666f\u304c\u305d\u306e\u6761\u4ef6\u3092\u8abf\u3079\u308b\u6bb5\u968e\u306b\u623b\u3063\u3066\u51e6\u7406\u3092\u7e70\u308a\u8fd4\u3059\uff0e\u968e\u8abf\u5024\u304c-1\u306b\u5909\u66f4\u3055\u308c\u308b\u753b\u7d20\u304c\u306a\u304f\u306a\u3063\u305f\u6642\u70b9\u3067\u51e6\u7406\u3092\u7d42\u4e86\u3059\u308b\uff0e\n\n#\u5b9f\u88c5\n```cpp\n\n/**\n *  @brief Thinning (Hilditxh method)\n *\n *  @param src Source image pixels pointer (depth: 8UC)\n *  @param dst Output image pixels pointer (dspth: 8UC)\n *  @param w   Source image width\n *  @param h   Source image height\n */\nvoid hilditchThinning(const unsigned char* src, unsigned char* dst, int w, int h)\n{\n    int offset[9][2] = {{0,0}, {1,0}, {1,-1}, {0,-1}, {-1,-1}, {-1,0}, {-1,1}, {0,1}, {1,1}};\n    int nOdd[4] = {1, 3, 5, 7};\n    int b[9];\n    int px, py;\n    bitset<6> condition;\n    \n    memcpy(dst, src, w * h);\n    \n    int path = 1;\n    int counter;\n    \n    auto funcNc8 = [&nOdd](int *b)\n    {\n        array<int, 10> d;\n        int j;\n        int sum = 0;\n        \n        for (int i = 0; i <= 9; ++i)\n        {\n            j = i;\n            if (i == 9) j = 1;\n            if (abs( *(b + j)) == 1)\n                d[i] = 1;\n            else\n                d[i] = 0;\n        }\n        \n        for (int i = 0; i < 4; ++i)\n        {\n            j = nOdd[i];\n            sum = sum + d[j] - d[j] * d[j+1] * d[j+2];\n        }\n        \n        return sum;\n    };\n    \n    cout << \"start thinning \" << endl;\n    clock_t beginTime = clock();\n    \n    do {\n        cout << \".\";\n        counter = 0;\n        \n        for (int y = 0; y < h; ++y)\n        {\n            for (int x = 0; x < w; ++x)\n            {\n                for (int i = 0; i < 9; ++i)\n                {\n                    b[i] = 0;\n                    px = x + offset[i][0];\n                    py = y + offset[i][1];\n                    if (px >= 0 && px < w && py >= 0 && py < h)\n                    {\n                        int idx = w * py + px;\n                        if (dst[idx] == 255)\n                        {\n                            b[i] = 1;\n                        }\n                        else if (dst[idx] == 127)\n                        {\n                            b[i] = -1;\n                        }\n                    }\n                }\n                \n                condition.reset();\n                \n                // Condition 1\n                if (b[0] == 1) condition.set(0, true);\n                \n                // Condition 2\n                int sum = 0;\n                for (int i = 0; i < 4; ++i)\n                {\n                    sum = sum + 1 - abs(b[nOdd[i]]);\n                }\n                if (sum >= 1) condition.set(1, true);\n                \n                // Condition 3\n                sum = 0;\n                for (int i = 1; i <= 8; ++i)\n                {\n                    sum = sum + abs(b[i]);\n                }\n                if (sum >= 2) condition.set(2, true);\n                \n                // Condition 4\n                sum = 0;\n                for (int i = 1; i <= 8; ++i)\n                {\n                    if (b[i] == 1) ++sum;\n                }\n                if (sum >= 1) condition.set(3, true);\n                \n                // Condition 5\n                if (funcNc8(b) == 1) condition.set(4, true);\n                \n                // Condition 6\n                sum = 0;\n                for (int i = 1; i <= 8; ++i)\n                {\n                    if (b[i] != -1)\n                    {\n                        ++sum;\n                    }\n                    else {\n                        int copy = b[i];\n                        b[i] = 0;\n                        if (funcNc8(b) == 1) ++sum;\n                        b[i] = copy;\n                    }\n                }\n                if (sum == 8) condition.set(5, true);\n                \n                // Final judgement\n                if (condition.all())\n                {\n                    int idx = y * w + x;\n                    dst[idx] = 127;\n                    ++counter;\n                }\n            }\n        }\n        \n        if (counter != 0)\n        {\n            for (int y = 0; y < h; ++y)\n            {\n                for (int x = 0; x < w; ++x)\n                {\n                    int idx = y * w + x;\n                    if (dst[idx] == 127)\n                    {\n                        dst[idx] = 0;\n                    }\n                }\n            }\n        }\n        \n        ++path;\n    }\n    while (counter != 0);\n    \n    clock_t endTime = clock() - beginTime;\n    cout << \" Done! Time: \" << (double)(endTime) / CLOCKS_PER_SEC << \" sec, Num Path: \" << path << endl;\n}\n\n```\n\n##\u4f7f\u3044\u65b9\n\n\u7b2c\u4e00\u5f15\u6570\u306b\u4e88\u3081\u8aad\u307f\u8fbc\u3093\u3060\u753b\u50cf\u306e\u30d4\u30af\u30bb\u30eb\uff08unsigned char, 8bit, single channel\uff09\uff0c\u7b2c\u4e8c\u5f15\u6570\u306f\u540c\u3058\u578b\u306e\u51fa\u529b\u753b\u50cf\u30d4\u30af\u30bb\u30eb\uff0c\u7b2c\u4e09\uff0c\u7b2c\u56db\u5f15\u6570\u306b\u5165\u529b\u753b\u50cf\u306e\u6a2a\u5e45\uff0c\u7e26\u5e45\u3092\u5165\u308c\u307e\u3059\uff0e\n\n##\u8a08\u7b97\u7d50\u679c\n\n###\u5165\u529b\u753b\u50cf\n![test.png](https://qiita-image-store.s3.amazonaws.com/0/29877/ad5991ac-651a-5b17-974d-5514ba90df55.png)\n\n###\u51fa\u529b\u753b\u50cf\n\n![output.png](https://qiita-image-store.s3.amazonaws.com/0/29877/8b895dc7-8c61-f4f9-be2c-ad7bfa9698ba.png)\n\n\u65e2\u77e5\u306e\u554f\u984c\u3068\u3057\u3066\u306f\u771f\u5186\u304cX\u72b6\u306b\u306a\u3063\u305f\u308a\uff0c\u300c\u3072\u3052\u300d\u304c\u6b8b\u3063\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u3042\u308a\uff0c\u76ee\u7684\u306b\u3088\u3063\u3066\u306f\u3053\u308c\u3089\u3092\u3069\u3046\u3059\u308b\u304b\u60a9\u307f\u3069\u3053\u308d\u3060\u3063\u305f\u308a\u306f\u3057\u307e\u3059\uff0e\n\n\u3042\u3068\uff0c\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3067\u3059\u304c\uff0c\u8a08\u7b97\u305d\u306e\u3082\u306e\u306e\u554f\u984c\u3067\u3082\u3042\u308a\u307e\u3059\u304c\u7d50\u69cb\u6642\u9593\u304b\u304b\u308a\u307e\u3059\uff0e\u4e0a\u306e\u753b\u50cf\u3067\u308210\u79d2\u3050\u3089\u3044\u304b\u304b\u308a\u307e\u3057\u305f\uff0e\u306a\u306e\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306a\u5b9f\u7528\u306f\u96e3\u3057\u3044\u3067\u3059\u306d\uff0e\n\n\u7d30\u7dda\u5316\u306f\u4ed6\u306b\u3082\u3044\u308d\u3093\u306a\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u304c\uff0c\u6642\u9593\u304c\u3042\u308c\u3070\u66f8\u304d\u307e\u3059\uff0e\n\n#\u53c2\u8003\u6587\u732e\n\n- [\u5b89\u5c45\u9662 \u731b, \u9577\u5c3e \u667a\u6674(\u5171\u8457),: \"C\u8a00\u8a9e\u306b\u3088\u308b\u753b\u50cf\u51e6\u7406\u5165\u9580\", \u30c0\u30a4\u30a4\u30c1\u66f8\u623f(2000)](https://www.amazon.co.jp/C%E8%A8%80%E8%AA%9E%E3%81%AB%E3%82%88%E3%82%8B%E7%94%BB%E5%83%8F%E5%87%A6%E7%90%86%E5%85%A5%E9%96%80-%E5%AE%89%E5%B1%85%E9%99%A2-%E7%8C%9B/dp/4785631244)\n", "tags": ["c++,", "\u753b\u50cf\u51e6\u7406", "ImageProcessing"]}