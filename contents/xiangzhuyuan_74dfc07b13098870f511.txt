{"context": "\nindex.html\n\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>Redux Todos Example</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <!--\n      This HTML file is a template.\n      If you open it directly in the browser, you will see an empty page.\n\n      You can add webfonts, meta tags, or analytics to this file.\n      The build step will place the bundled scripts into the <body> tag.\n\n      To begin the development, run `npm start` in this folder.\n      To create a production bundle, use `npm run build`.\n    -->\n  </body>\n</html>\n\n\nthere is no script tag which would use redux&react.\n\nstart by react-script\n\ncheck the source code when running page:\n\n\nactually there is a injection which append the redux&react function into page body.\nso now I check the react-script, which maybe use webpackdevserver to implement the web server part job, but how can I find the logic code that inject the script into page content?\nas I know about this, maybe many things just follow some conventions stuff, like from webpack.config.js file.\n...\n\noutput: {\n\n  fileanem: 'static/js/bundle.js'\n  ...\n}\n\n...\n\n\nlike the above config section.\n\ncheck this one:\nthis HtmlWebpackPlugin could read a template from a html file to generate a final html output stream.\n\n/node_modules/react-scripts/config/webpack.config.dev.js\n\n...\n  plugins: [\n    // Generates an `index.html` file with the <script> injected.\n    new HtmlWebpackPlugin({\n      inject: true,\n      template: paths.appHtml,\n    }),\n\n\n    ...\n\n\n1. index.html\n\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>Redux Todos Example</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <!--\n      This HTML file is a template.\n      If you open it directly in the browser, you will see an empty page.\n\n      You can add webfonts, meta tags, or analytics to this file.\n      The build step will place the bundled scripts into the <body> tag.\n\n      To begin the development, run `npm start` in this folder.\n      To create a production bundle, use `npm run build`.\n    -->\n  </body>\n</html>\n\n```\nthere is no script tag which would use redux&react.\n\n2. start by `react-script`\n3. check the source code when running page:\n\n![Kobito.fsJmfn.png](https://qiita-image-store.s3.amazonaws.com/0/56713/d17f6136-46ce-9580-e6b5-631de7da816f.png \"Kobito.fsJmfn.png\")\n\n\nactually there is a injection which append the redux&react function into page body.\n\nso now I check the `react-script`, which maybe use `webpackdevserver` to implement the web server part job, but how can I find the logic code that **inject** the script into page content?\n\nas I know about this, maybe many things just follow some conventions stuff, like from `webpack.config.js` file.\n\n```\n...\n\noutput: {\n\n  fileanem: 'static/js/bundle.js'\n  ...\n}\n\n...\n\n```\n\nlike the above config section.\n\n\n#check this one:\n\nthis `HtmlWebpackPlugin` could read a **template** from a html file to generate a final html output stream.\n\n> /node_modules/react-scripts/config/webpack.config.dev.js\n\n```\n...\n  plugins: [\n    // Generates an `index.html` file with the <script> injected.\n    new HtmlWebpackPlugin({\n      inject: true,\n      template: paths.appHtml,\n    }),\n    \n    \n    ...\n```\n\n\n", "tags": ["webpack", "redux"]}