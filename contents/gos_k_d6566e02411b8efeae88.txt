{"context": "\u3053\u308c\u306fNextremer Advent Calendar 2016\u306e1\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\u534a\u5e74\u4ee5\u4e0a\u524d\u306e\u8a18\u4e8b\u3067\u3059\u304c\u3001\u3053\u306e\u8a18\u4e8b(\u30b9\u30af\u30ea\u30d7\u30c8\u8a00\u8a9e\u306e\u6d41\u5100\u301cC\u8a00\u8a9e\u3001Python\u3001Ruby\u901f\u5ea6\u6bd4\u8f03)\u304c\u6c17\u306b\u306a\u3063\u305f\u306e\u3067NumPy vs Common Lisp\u3067\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\nPython\u306e\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\u306fhamukazu\u6c0f\u306e\u30b3\u30fc\u30c9(\u3042\u308b\u3044\u306f\u3001\u3055\u3089\u306b\u305d\u306e\u5143\u306e\u53c2\u7167\u3067\u304d\u306a\u304f\u306a\u3063\u3066\u308b\u8a18\u4e8b\u306e\u30b3\u30fc\u30c9?)\u3092\u4f7f\u308f\u305b\u3066\u3082\u3089\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\n\u5b9f\u884c\u306b\u4f7f\u7528\u3057\u305f\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306f\u6b21\u306e\u901a\u308a\u3002\n\nIntel(R) Core(TM) i7-7500U CPU @ 2.70GHz\nUbuntu 16.04.1 LTS\n\n\nPython\n\n\u5b9f\u884c\u74b0\u5883\nMiniconda\u3092\u5229\u7528\u3057\u3066\u74b0\u5883\u3092\u69cb\u7bc9\u3057\u307e\u3057\u305f\u3002 \n\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n$ python --version\nPython 3.5.2 :: Continuum Analytics, Inc.\n\n\nNumPy\u7248\nNumPy\u7248\u306e\u30b3\u30fc\u30c9\u3068\u5b9f\u884c\u6642\u9593\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\nN = 10000\nimport numpy as np\n\ndef sumup(n):\n    return np.arange(1, n + 1).sum()\n\ndef main():\n    print(\"python with numpy start.\")\n    result = {}\n    for count in range(1, N + 1):\n        result[count - 1] = sumup(count)\n    print(\"python with numpy end.\")\n\nmain()\n\n$ time python benchmark-numpy.py \npython with numpy start.\npython with numpy end.\n\nreal    0m0.238s\nuser    0m0.216s\nsys 0m0.020s\n\n\nPython\u7248\nNumPy\u3092\u4f7f\u308f\u306a\u3044Python\u7248\u306e\u30b3\u30fc\u30c9\u3068\u5b9f\u884c\u6642\u9593\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\nN = 10000\n\ndef sumup(n):\n    return sum(range(1, n + 1))\n\ndef main():\n    print(\"python without numpy start.\")\n    result = {}\n    for count in range(1, N + 1):\n        result[count - 1] = sumup(count)\n    print(\"python without numpy end.\")\n\nmain()\n\n$ time python benchmark-python.py \npython without numpy start.\npython without numpy end.\n\nreal    0m0.945s\nuser    0m0.940s\nsys 0m0.004s\n\n\nCommon Lisp\nNumPy\u304cPython\u672c\u4f53\u306b\u542b\u307e\u308c\u3066\u306a\u3044\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3044\u3046\u8a71\u3082\u51fa\u3066\u3044\u305f\u306e\u3067\u3001Common Lisp\u7248\u306f\u6a19\u6e96\u306e\u7bc4\u56f2\u5185\u3067\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n\u5b9f\u884c\u69cb\u7bc9\nroswell\u3092\u7d4c\u7531\u3057\u3066SBCL\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3064\u3044\u3066\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n$ ros --version\nroswell 0.0.6.68\n\n$ ros run -- --version\nSBCL 1.3.11\n\n\u4eca\u56de\u306f\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u307f\u3067quicklisp\u3092\u4f7f\u7528\u3057\u306a\u3044\u306e\u3067roswell\u306e\u5f15\u6570\u306b+Q\u3092\u3064\u3051\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002\n\nloop\u7248\n\u666e\u901a\u306b\u30eb\u30fc\u30d7\u3067\u66f8\u304f\u3002\n(defconstant +n+ 10000)\n\n(defun sumup (n)\n  (let ((sum 0))\n    (loop for i from 1 to n\n          do (incf sum i))\n    sum))\n\n(defun main ()\n  (print \"common lisp start.\")\n  (loop for count from 1 to +n+\n        collect (sumup count))\n  (print \"common lisp end.\"))\n\n$ time ros +Q benchmark-common-lisp.ros \n\n\"common lisp start.\" \n\"common lisp end.\" \nreal    0m0.332s\nuser    0m0.320s\nsys 0m0.008s\n\n\ndotimes\u7248\ndotimes\u3067\u66f8\u304f\u3002\n(defconstant +n+ 10000)\n\n(defun sumup (n)\n  (let ((sum 0))\n    (dotimes (i n)\n      (incf sum (1+ i)))\n    sum))\n\n(defun main ()\n  (print \"common lisp start.\")\n  (loop for count from 1 to +n+\n        collect (sumup count))\n  (print \"common lisp end.\"))\n\n$ time ros +Q benchmark-common-lisp-dotimes.ros \n\n\"common lisp start.\" \n\"common lisp end.\" \nreal    0m0.426s\nuser    0m0.404s\nsys 0m0.016s\n\n\u3061\u3087\u3063\u3068\u9045\u304f\u306a\u3063\u305f\u30021+\u4f7f\u3063\u3066\u308b\u304b\u3089\u304b\u306a?\n\n\u8272\u3005\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\nCommon Lisp\u306e\u58f2\u308a(?)\u306fdisassembla\u6a19\u6e96\u88c5\u5099\u306a\u306e\u3067loop\u7248\u3092disassemble\u3057\u307e\u3059\u3002\n(disassemble 'sumup)\n\n; disassembly for SUMUP\n; Size: 156 bytes. Origin: #x100340308D\n; 08D:       498B4C2460       MOV RCX, [R12+96]               ; thread.binding-stack-pointer\n                                                              ; no-arg-parsing entry point\n; 092:       48894DF8         MOV [RBP-8], RCX\n; 096:       31F6             XOR ESI, ESI\n; 098:       488B4DF0         MOV RCX, [RBP-16]\n; 09C:       8D41F1           LEA EAX, [RCX-15]\n; 09F:       A801             TEST AL, 1\n; 0A1:       750E             JNE L0\n; 0A3:       3C0A             CMP AL, 10\n; 0A5:       740A             JEQ L0\n; 0A7:       A80F             TEST AL, 15\n; 0A9:       7574             JNE L3\n; 0AB:       8079F11D         CMP BYTE PTR [RCX-15], 29\n; 0AF:       776E             JNBE L3\n; 0B1: L0:   BB02000000       MOV EBX, 2\n; 0B6:       EB3E             JMP L2\n; 0B8:       0F1F840000000000 NOP\n; 0C0: L1:   48895DE8         MOV [RBP-24], RBX\n; 0C4:       488BD3           MOV RDX, RBX\n; 0C7:       488BFE           MOV RDI, RSI\n; 0CA:       41BBA0020020     MOV R11D, 536871584             ; GENERIC-+\n; 0D0:       41FFD3           CALL R11\n; 0D3:       488B5DE8         MOV RBX, [RBP-24]\n; 0D7:       488BF2           MOV RSI, RDX\n; 0DA:       488975E0         MOV [RBP-32], RSI\n; 0DE:       BF02000000       MOV EDI, 2\n; 0E3:       488BD3           MOV RDX, RBX\n; 0E6:       41BBA0020020     MOV R11D, 536871584             ; GENERIC-+\n; 0EC:       41FFD3           CALL R11\n; 0EF:       488B75E0         MOV RSI, [RBP-32]\n; 0F3:       488BDA           MOV RBX, RDX\n; 0F6: L2:   48895DE8         MOV [RBP-24], RBX\n; 0FA:       488975E0         MOV [RBP-32], RSI\n; 0FE:       488B7DF0         MOV RDI, [RBP-16]\n; 102:       488BD3           MOV RDX, RBX\n; 105:       B9E0040020       MOV ECX, 536872160              ; GENERIC->\n; 10A:       FFD1             CALL RCX\n; 10C:       488B75E0         MOV RSI, [RBP-32]\n; 110:       488B5DE8         MOV RBX, [RBP-24]\n; 114:       7EAA             JLE L1\n; 116:       488BD6           MOV RDX, RSI\n; 119:       488BE5           MOV RSP, RBP\n; 11C:       F8               CLC\n; 11D:       5D               POP RBP\n; 11E:       C3               RET\n; 11F: L3:   488B45F0         MOV RAX, [RBP-16]\n; 123:       CC0A             BREAK 10                        ; error trap\n; 125:       40               BYTE #X40                       ; OBJECT-NOT-REAL-ERROR\n; 126:       00               BYTE #X00                       ; RAX\n; 127:       CC10             BREAK 16                        ; Invalid argument count trap\n\n\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306a\u95a2\u6570\u304c\u547c\u3070\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u4e00\u76ee\u898b\u3066\u9045\u305d\u3046\u306a\u306e\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\noptimize speed 3\u7248\noptimize\u3092\u6307\u5b9a\u3057\u3066\u307f\u307e\u3059\u3002\n(defconstant +n+ 10000)\n\n(defun sumup (n)\n  (declare (optimize (speed 3) (debug 0) (safety 0))) \n  (let ((sum 0))\n    (loop for i from 1 to n\n          do (incf sum i))\n    sum))\n\n(defun main ()\n  (print \"common lisp start.\")\n  (loop for count from 1 to +n+\n        collect (sumup count))\n  (print \"common lisp end.\"))\n\n$ time ros +Q benchmark-common-lisp-optimize-speed-3.ros \n\n\"common lisp start.\" \n\"common lisp end.\" \nreal    0m0.356s\nuser    0m0.348s\nsys 0m0.004s\n\n(disassemble 'sumup)\n\n; disassembly for SUMUP\n; Size: 115 bytes. Origin: #x100364AFB2\n; AFB2:       31F6             XOR ESI, ESI                   ; no-arg-parsing entry point\n; AFB4:       48897DF8         MOV [RBP-8], RDI\n; AFB8:       BB02000000       MOV EBX, 2\n; AFBD:       EB3D             JMP L1\n; AFBF:       90               NOP\n; AFC0: L0:   48895DE8         MOV [RBP-24], RBX\n; AFC4:       488BD3           MOV RDX, RBX\n; AFC7:       488BFE           MOV RDI, RSI\n; AFCA:       41BBA0020020     MOV R11D, 536871584            ; GENERIC-+\n; AFD0:       41FFD3           CALL R11\n; AFD3:       488BC2           MOV RAX, RDX\n; AFD6:       488B5DE8         MOV RBX, [RBP-24]\n; AFDA:       488BF0           MOV RSI, RAX\n; AFDD:       488975F0         MOV [RBP-16], RSI\n; AFE1:       BF02000000       MOV EDI, 2\n; AFE6:       488BD3           MOV RDX, RBX\n; AFE9:       41BBA0020020     MOV R11D, 536871584            ; GENERIC-+\n; AFEF:       41FFD3           CALL R11\n; AFF2:       488BC2           MOV RAX, RDX\n; AFF5:       488B75F0         MOV RSI, [RBP-16]\n; AFF9:       488BD8           MOV RBX, RAX\n; AFFC: L1:   488975F0         MOV [RBP-16], RSI\n; B000:       48895DE8         MOV [RBP-24], RBX\n; B004:       488B7DF8         MOV RDI, [RBP-8]\n; B008:       488BD3           MOV RDX, RBX\n; B00B:       B9E0040020       MOV ECX, 536872160             ; GENERIC->\n; B010:       FFD1             CALL RCX\n; B012:       488B5DE8         MOV RBX, [RBP-24]\n; B016:       488B75F0         MOV RSI, [RBP-16]\n; B01A:       7EA4             JLE L0\n; B01C:       488BD6           MOV RDX, RSI\n; B01F:       488BE5           MOV RSP, RBP\n; B022:       F8               CLC\n; B023:       5D               POP RBP\n; B024:       C3               RET\n\n\u51fa\u529b\u30a2\u30bb\u30f3\u30d6\u30ea\u306f\u5fae\u5999\u306b\u5909\u5316\u3057\u3066\u308b\u304c\u3001\u901f\u5ea6\u7684\u306b\u306f\u5909\u308f\u3089\u305a\u3002\n\ntype fixnum n\u7248\n\u5f15\u6570n\u306bfixnum\u578b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n(defconstant +n+ 100000)\n\n(defun sumup (n)\n  (declare (type fixnum n))\n  (let ((sum 0))\n    (loop for i from 1 to n\n          do (incf sum i))\n    sum))\n\n(defun main ()\n  (print \"common lisp start.\")\n  (loop for count from 1 to +n+\n        collect (sumup count))\n  (print \"common lisp end.\"))\n\n$ time ros +Q benchmark-common-lisp-type-fixnum-n.ros \n\n\"common lisp start.\" \n\"common lisp end.\" \nreal    0m0.200s\nuser    0m0.180s\nsys 0m0.012s\n\n(disassemble 'sumup)\n\n; disassembly for SUMUP\n; Size: 72 bytes. Origin: #x1003D2B65A\n; 5A:       498B4C2460       MOV RCX, [R12+96]                ; thread.binding-stack-pointer\n                                                              ; no-arg-parsing entry point\n; 5F:       48894DF8         MOV [RBP-8], RCX\n; 63:       31C9             XOR ECX, ECX\n; 65:       BB01000000       MOV EBX, 1\n; 6A:       EB26             JMP L1\n; 6C:       0F1F4000         NOP\n; 70: L0:   488D141B         LEA RDX, [RBX+RBX]\n; 74:       48895DE8         MOV [RBP-24], RBX\n; 78:       488BF9           MOV RDI, RCX\n; 7B:       41BBA0020020     MOV R11D, 536871584              ; GENERIC-+\n; 81:       41FFD3           CALL R11\n; 84:       488BCA           MOV RCX, RDX\n; 87:       488B5DE8         MOV RBX, [RBP-24]\n; 8B:       488B75F0         MOV RSI, [RBP-16]\n; 8F:       48FFC3           INC RBX\n; 92: L1:   4839F3           CMP RBX, RSI\n; 95:       7ED9             JLE L0\n; 97:       488BD1           MOV RDX, RCX\n; 9A:       488BE5           MOV RSP, RBP\n; 9D:       F8               CLC\n; 9E:       5D               POP RBP\n; 9F:       C3               RET\n; A0:       CC10             BREAK 16                         ; Invalid argument count trap\n\n\u5b9f\u884c\u6642\u9593\u3068\u3057\u3066\u306f\u7d040.2\u79d2\u306a\u306e\u3067\u3001NumPy\u7248\u3068\u540c\u3058\u304f\u3089\u3044\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\ntype fixnum sum\u7248\ntype fixnum n\u306e\u30a2\u30bb\u30f3\u30d6\u30ea\u3092\u898b\u308b\u3068\u3001\u307e\u3060\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u95a2\u6570\u304c\u6b8b\u3063\u3066\u3044\u307e\u3059\u3002\n\u5909\u6570sum\u306b\u3082fixnum\u578b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n(defconstant +n+ 100000)\n\n(defun sumup (n)\n  (declare (type fixnum n))\n  (let ((sum 0))\n    (declare (type fixnum sum))\n    (loop for i from 1 to n\n          do (incf sum i))\n    sum))\n\n(defun main ()\n  (print \"common lisp start.\")\n  (loop for count from 1 to +n+\n        collect (sumup count))\n  (print \"common lisp end.\"))\n\n$ time ros +Q benchmark-common-lisp-type-fixnum-sum.ros \n\n\"common lisp start.\" \n\"common lisp end.\" \nreal    0m0.154s\nuser    0m0.140s\nsys 0m0.008s\n\n(disassemble 'sumup)\n\n; disassembly for SUMUP\n; Size: 70 bytes. Origin: #x100436CB56\n; 56:       498B4C2460       MOV RCX, [R12+96]                ; thread.binding-stack-pointer\n                                                              ; no-arg-parsing entry point\n; 5B:       48894DF8         MOV [RBP-8], RCX\n; 5F:       31D2             XOR EDX, EDX\n; 61:       B901000000       MOV ECX, 1\n; 66:       EB23             JMP L1\n; 68:       0F1F840000000000 NOP\n; 70: L0:   488BD9           MOV RBX, RCX\n; 73:       488BC2           MOV RAX, RDX\n; 76:       48D1F8           SAR RAX, 1\n; 79:       488D1403         LEA RDX, [RBX+RAX]\n; 7D:       488BC2           MOV RAX, RDX\n; 80:       48D1E0           SHL RAX, 1\n; 83:       7011             JO L2\n; 85:       48D1E2           SHL RDX, 1\n; 88:       48FFC1           INC RCX\n; 8B: L1:   4839F1           CMP RCX, RSI\n; 8E:       7EE0             JLE L0\n; 90:       488BE5           MOV RSP, RBP\n; 93:       F8               CLC\n; 94:       5D               POP RBP\n; 95:       C3               RET\n; 96: L2:   CC0A             BREAK 10                         ; error trap\n; 98:       35               BYTE #X35                        ; OBJECT-NOT-FIXNUM-ERROR\n; 99:       12               BYTE #X12                        ; RDX\n; 9A:       CC10             BREAK 16                         ; Invalid argument count trap\n\n\u3053\u308c\u3067\u5b9f\u884c\u6642\u9593\u304cNumPy\u7248\u3088\u308a\u3082Common Lisp\u306e\u65b9\u304c\u901f\u304f\u306a\u308a\u306a\u308a\u307e\u3057\u305f\u3002\n\u30d7\u30ea\u30f3\u30c8\u6587\u3092\u4f7f\u3046\u3068Python\u5074\u3068\u7d50\u679c\u304c\u4e00\u81f4\u3057\u3066\u308b\u3088\u3046\u306b\u898b\u3048\u308b\u3051\u3069\u3001\u3053\u308c\u3067\u672c\u5f53\u306b\u8a08\u7b97\u3057\u3066\u308b\u3093\u3060\u308d\u3046\u304b?\n\nbuild\u7248\n\u6a19\u6e96\u306e\u6a5f\u80fd\u304b\u3089\u306f\u5916\u308c\u308b\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001roswell\u306e\u30d3\u30eb\u30c9\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\u307e\u305a\u306f\u30d5\u30a1\u30a4\u30eb\u306e\u5148\u982d\u306b\u8272\u3005\u8ffd\u52a0\u3057\u307e\u3059\u3002\n#!/bin/sh\n#|-*- mode:lisp -*-|#\n#|\nexec ros +Q -- $0 \"$@\"\n|#\n\n(defconstant +n+ 10000)\n\n(defun sumup (n)\n  (declare (type fixnum n))\n  (let ((sum 0))\n    (declare (type fixnum sum))\n    (loop for i from 1 to n\n          do (incf sum i))\n    sum))\n\n(defun main ()\n  (print \"common lisp start.\")\n  (loop for count from 1 to +n+\n        collect (sumup count))\n  (print \"common lisp end.\"))\n\nroswell\u3067\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002\n$ ros +Q build benchmark-common-lisp-ros-build.ros \n[undoing binding stack and other enclosing state... done]\n[saving current Lisp image into benchmark-common-lisp-ros-build:\nwriting 4912 bytes from the read-only space at 0x20000000\nwriting 3216 bytes from the static space at 0x20100000\nwriting 782336 bytes from the immobile space at 0x20300000\nwriting 0 bytes from the immobile space at 0x21b00000\nwriting 44400640 bytes from the dynamic space at 0x1000000000\ndone]\n\nELF\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n$ file benchmark-common-lisp-ros-build\nbenchmark-common-lisp-ros-build: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.18, BuildID[sha1]=aad09922bc365e5911ed48273a824d4aca017382, not stripped\n\n$ time ./benchmark-common-lisp-ros-build \n\n\n\"common lisp start.\" \n\"common lisp end.\" \nreal    0m0.065s\nuser    0m0.060s\nsys 0m0.004s\n\n\u3055\u3089\u306b0.1\u79d2\u304f\u3089\u3044\u901f\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u307e\u3068\u3081\n\n\n\n\u8a00\u8a9e\n\u5b9f\u884c\u6642\u9593 (ms)\n\n\n\n\nPython (NumPy\u7248)\n238\n\n\nPython\u7248\n945\n\n\nCommon Lisp (loop\u7248)\n332\n\n\nCommon Lisp (dotimes\u7248)\n426\n\n\nCommon Lisp (optimize speed 3\u7248)\n356\n\n\nCommon Lisp (type fixnum n\u7248)\n200\n\n\nCommon Lisp (type fixnum sum\u7248)\n154\n\n\nCommon Lisp (build\u7248)\n65\n\n\n\nNumPy\u7248\u3088\u308a\u3082Common Lisp\u7248\u306e\u65b9\u304c\u901f\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\u3053\u308c\u306fNextremer Advent Calendar 2016\u306e1\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n\u534a\u5e74\u4ee5\u4e0a\u524d\u306e\u8a18\u4e8b\u3067\u3059\u304c\u3001\u3053\u306e\u8a18\u4e8b([\u30b9\u30af\u30ea\u30d7\u30c8\u8a00\u8a9e\u306e\u6d41\u5100\u301cC\u8a00\u8a9e\u3001Python\u3001Ruby\u901f\u5ea6\u6bd4\u8f03](http://hamukazu.com/2016/02/09/c-python-ruby-benchmark/))\u304c\u6c17\u306b\u306a\u3063\u305f\u306e\u3067NumPy vs Common Lisp\u3067\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\nPython\u306e\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\u306fhamukazu\u6c0f\u306e\u30b3\u30fc\u30c9(\u3042\u308b\u3044\u306f\u3001\u3055\u3089\u306b\u305d\u306e\u5143\u306e\u53c2\u7167\u3067\u304d\u306a\u304f\u306a\u3063\u3066\u308b\u8a18\u4e8b\u306e\u30b3\u30fc\u30c9?)\u3092\u4f7f\u308f\u305b\u3066\u3082\u3089\u3063\u3066\u3044\u307e\u3059\u3002\n\n## \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\n\n\u5b9f\u884c\u306b\u4f7f\u7528\u3057\u305f\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306f\u6b21\u306e\u901a\u308a\u3002\n\n* Intel(R) Core(TM) i7-7500U CPU @ 2.70GHz\n* Ubuntu 16.04.1 LTS\n\n\n## Python\n\n\n### \u5b9f\u884c\u74b0\u5883\n\n[Miniconda](http://conda.pydata.org/miniconda.html)\u3092\u5229\u7528\u3057\u3066\u74b0\u5883\u3092\u69cb\u7bc9\u3057\u307e\u3057\u305f\u3002 \n\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n\n```sh\n$ python --version\nPython 3.5.2 :: Continuum Analytics, Inc.\n```\n\n\n### NumPy\u7248\n\nNumPy\u7248\u306e\u30b3\u30fc\u30c9\u3068\u5b9f\u884c\u6642\u9593\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n\n```python\nN = 10000\nimport numpy as np\n \ndef sumup(n):\n    return np.arange(1, n + 1).sum()\n \ndef main():\n    print(\"python with numpy start.\")\n    result = {}\n    for count in range(1, N + 1):\n        result[count - 1] = sumup(count)\n    print(\"python with numpy end.\")\n \nmain()\n```\n\n```sh\n$ time python benchmark-numpy.py \npython with numpy start.\npython with numpy end.\n\nreal    0m0.238s\nuser    0m0.216s\nsys 0m0.020s\n```\n\n\n### Python\u7248\n\nNumPy\u3092\u4f7f\u308f\u306a\u3044Python\u7248\u306e\u30b3\u30fc\u30c9\u3068\u5b9f\u884c\u6642\u9593\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n\n```python\nN = 10000\n \ndef sumup(n):\n    return sum(range(1, n + 1))\n \ndef main():\n    print(\"python without numpy start.\")\n    result = {}\n    for count in range(1, N + 1):\n        result[count - 1] = sumup(count)\n    print(\"python without numpy end.\")\n \nmain()\n```\n\n```sh\n$ time python benchmark-python.py \npython without numpy start.\npython without numpy end.\n\nreal    0m0.945s\nuser    0m0.940s\nsys 0m0.004s\n```\n\n\n## Common Lisp\n\nNumPy\u304cPython\u672c\u4f53\u306b\u542b\u307e\u308c\u3066\u306a\u3044\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3044\u3046\u8a71\u3082\u51fa\u3066\u3044\u305f\u306e\u3067\u3001Common Lisp\u7248\u306f\u6a19\u6e96\u306e\u7bc4\u56f2\u5185\u3067\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n\n### \u5b9f\u884c\u69cb\u7bc9\n\n[roswell](https://github.com/roswell/roswell)\u3092\u7d4c\u7531\u3057\u3066[SBCL](http://www.sbcl.org)\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3064\u3044\u3066\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n\n```sh\n$ ros --version\nroswell 0.0.6.68\n```\n\n```sh\n$ ros run -- --version\nSBCL 1.3.11\n```\n\n\u4eca\u56de\u306f\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u307f\u3067quicklisp\u3092\u4f7f\u7528\u3057\u306a\u3044\u306e\u3067roswell\u306e\u5f15\u6570\u306b+Q\u3092\u3064\u3051\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n\n### loop\u7248\n\n\u666e\u901a\u306b\u30eb\u30fc\u30d7\u3067\u66f8\u304f\u3002\n\n```common-lisp\n(defconstant +n+ 10000)\n\n(defun sumup (n)\n  (let ((sum 0))\n    (loop for i from 1 to n\n          do (incf sum i))\n    sum))\n\n(defun main ()\n  (print \"common lisp start.\")\n  (loop for count from 1 to +n+\n        collect (sumup count))\n  (print \"common lisp end.\"))\n```\n\n```sh\n$ time ros +Q benchmark-common-lisp.ros \n\n\"common lisp start.\" \n\"common lisp end.\" \nreal    0m0.332s\nuser    0m0.320s\nsys 0m0.008s\n```\n\n### dotimes\u7248\n\ndotimes\u3067\u66f8\u304f\u3002\n\n```common-lisp\n(defconstant +n+ 10000)\n\n(defun sumup (n)\n  (let ((sum 0))\n    (dotimes (i n)\n      (incf sum (1+ i)))\n    sum))\n\n(defun main ()\n  (print \"common lisp start.\")\n  (loop for count from 1 to +n+\n        collect (sumup count))\n  (print \"common lisp end.\"))\n```\n\n```sh\n$ time ros +Q benchmark-common-lisp-dotimes.ros \n\n\"common lisp start.\" \n\"common lisp end.\" \nreal    0m0.426s\nuser    0m0.404s\nsys 0m0.016s\n```\n\n\u3061\u3087\u3063\u3068\u9045\u304f\u306a\u3063\u305f\u30021+\u4f7f\u3063\u3066\u308b\u304b\u3089\u304b\u306a?\n\n\n### \u8272\u3005\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\n\nCommon Lisp\u306e\u58f2\u308a(?)\u306fdisassembla\u6a19\u6e96\u88c5\u5099\u306a\u306e\u3067loop\u7248\u3092disassemble\u3057\u307e\u3059\u3002\n\n```common-lisp\n(disassemble 'sumup)\n```\n\n```\n; disassembly for SUMUP\n; Size: 156 bytes. Origin: #x100340308D\n; 08D:       498B4C2460       MOV RCX, [R12+96]               ; thread.binding-stack-pointer\n                                                              ; no-arg-parsing entry point\n; 092:       48894DF8         MOV [RBP-8], RCX\n; 096:       31F6             XOR ESI, ESI\n; 098:       488B4DF0         MOV RCX, [RBP-16]\n; 09C:       8D41F1           LEA EAX, [RCX-15]\n; 09F:       A801             TEST AL, 1\n; 0A1:       750E             JNE L0\n; 0A3:       3C0A             CMP AL, 10\n; 0A5:       740A             JEQ L0\n; 0A7:       A80F             TEST AL, 15\n; 0A9:       7574             JNE L3\n; 0AB:       8079F11D         CMP BYTE PTR [RCX-15], 29\n; 0AF:       776E             JNBE L3\n; 0B1: L0:   BB02000000       MOV EBX, 2\n; 0B6:       EB3E             JMP L2\n; 0B8:       0F1F840000000000 NOP\n; 0C0: L1:   48895DE8         MOV [RBP-24], RBX\n; 0C4:       488BD3           MOV RDX, RBX\n; 0C7:       488BFE           MOV RDI, RSI\n; 0CA:       41BBA0020020     MOV R11D, 536871584             ; GENERIC-+\n; 0D0:       41FFD3           CALL R11\n; 0D3:       488B5DE8         MOV RBX, [RBP-24]\n; 0D7:       488BF2           MOV RSI, RDX\n; 0DA:       488975E0         MOV [RBP-32], RSI\n; 0DE:       BF02000000       MOV EDI, 2\n; 0E3:       488BD3           MOV RDX, RBX\n; 0E6:       41BBA0020020     MOV R11D, 536871584             ; GENERIC-+\n; 0EC:       41FFD3           CALL R11\n; 0EF:       488B75E0         MOV RSI, [RBP-32]\n; 0F3:       488BDA           MOV RBX, RDX\n; 0F6: L2:   48895DE8         MOV [RBP-24], RBX\n; 0FA:       488975E0         MOV [RBP-32], RSI\n; 0FE:       488B7DF0         MOV RDI, [RBP-16]\n; 102:       488BD3           MOV RDX, RBX\n; 105:       B9E0040020       MOV ECX, 536872160              ; GENERIC->\n; 10A:       FFD1             CALL RCX\n; 10C:       488B75E0         MOV RSI, [RBP-32]\n; 110:       488B5DE8         MOV RBX, [RBP-24]\n; 114:       7EAA             JLE L1\n; 116:       488BD6           MOV RDX, RSI\n; 119:       488BE5           MOV RSP, RBP\n; 11C:       F8               CLC\n; 11D:       5D               POP RBP\n; 11E:       C3               RET\n; 11F: L3:   488B45F0         MOV RAX, [RBP-16]\n; 123:       CC0A             BREAK 10                        ; error trap\n; 125:       40               BYTE #X40                       ; OBJECT-NOT-REAL-ERROR\n; 126:       00               BYTE #X00                       ; RAX\n; 127:       CC10             BREAK 16                        ; Invalid argument count trap\n```\n\n\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306a\u95a2\u6570\u304c\u547c\u3070\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u4e00\u76ee\u898b\u3066\u9045\u305d\u3046\u306a\u306e\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\n\n### optimize speed 3\u7248\n\noptimize\u3092\u6307\u5b9a\u3057\u3066\u307f\u307e\u3059\u3002\n\n```common-lisp\n(defconstant +n+ 10000)\n\n(defun sumup (n)\n  (declare (optimize (speed 3) (debug 0) (safety 0))) \n  (let ((sum 0))\n    (loop for i from 1 to n\n          do (incf sum i))\n    sum))\n\n(defun main ()\n  (print \"common lisp start.\")\n  (loop for count from 1 to +n+\n        collect (sumup count))\n  (print \"common lisp end.\"))\n```\n\n```sh\n$ time ros +Q benchmark-common-lisp-optimize-speed-3.ros \n\n\"common lisp start.\" \n\"common lisp end.\" \nreal    0m0.356s\nuser    0m0.348s\nsys 0m0.004s\n```\n\n\n```common-lisp\n(disassemble 'sumup)\n```\n\n```\n; disassembly for SUMUP\n; Size: 115 bytes. Origin: #x100364AFB2\n; AFB2:       31F6             XOR ESI, ESI                   ; no-arg-parsing entry point\n; AFB4:       48897DF8         MOV [RBP-8], RDI\n; AFB8:       BB02000000       MOV EBX, 2\n; AFBD:       EB3D             JMP L1\n; AFBF:       90               NOP\n; AFC0: L0:   48895DE8         MOV [RBP-24], RBX\n; AFC4:       488BD3           MOV RDX, RBX\n; AFC7:       488BFE           MOV RDI, RSI\n; AFCA:       41BBA0020020     MOV R11D, 536871584            ; GENERIC-+\n; AFD0:       41FFD3           CALL R11\n; AFD3:       488BC2           MOV RAX, RDX\n; AFD6:       488B5DE8         MOV RBX, [RBP-24]\n; AFDA:       488BF0           MOV RSI, RAX\n; AFDD:       488975F0         MOV [RBP-16], RSI\n; AFE1:       BF02000000       MOV EDI, 2\n; AFE6:       488BD3           MOV RDX, RBX\n; AFE9:       41BBA0020020     MOV R11D, 536871584            ; GENERIC-+\n; AFEF:       41FFD3           CALL R11\n; AFF2:       488BC2           MOV RAX, RDX\n; AFF5:       488B75F0         MOV RSI, [RBP-16]\n; AFF9:       488BD8           MOV RBX, RAX\n; AFFC: L1:   488975F0         MOV [RBP-16], RSI\n; B000:       48895DE8         MOV [RBP-24], RBX\n; B004:       488B7DF8         MOV RDI, [RBP-8]\n; B008:       488BD3           MOV RDX, RBX\n; B00B:       B9E0040020       MOV ECX, 536872160             ; GENERIC->\n; B010:       FFD1             CALL RCX\n; B012:       488B5DE8         MOV RBX, [RBP-24]\n; B016:       488B75F0         MOV RSI, [RBP-16]\n; B01A:       7EA4             JLE L0\n; B01C:       488BD6           MOV RDX, RSI\n; B01F:       488BE5           MOV RSP, RBP\n; B022:       F8               CLC\n; B023:       5D               POP RBP\n; B024:       C3               RET\n```\n\n\u51fa\u529b\u30a2\u30bb\u30f3\u30d6\u30ea\u306f\u5fae\u5999\u306b\u5909\u5316\u3057\u3066\u308b\u304c\u3001\u901f\u5ea6\u7684\u306b\u306f\u5909\u308f\u3089\u305a\u3002\n\n\n### type fixnum n\u7248\n\n\u5f15\u6570n\u306bfixnum\u578b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n```common-lisp\n(defconstant +n+ 100000)\n\n(defun sumup (n)\n  (declare (type fixnum n))\n  (let ((sum 0))\n    (loop for i from 1 to n\n          do (incf sum i))\n    sum))\n\n(defun main ()\n  (print \"common lisp start.\")\n  (loop for count from 1 to +n+\n        collect (sumup count))\n  (print \"common lisp end.\"))\n```\n\n```sh\n$ time ros +Q benchmark-common-lisp-type-fixnum-n.ros \n\n\"common lisp start.\" \n\"common lisp end.\" \nreal    0m0.200s\nuser    0m0.180s\nsys 0m0.012s\n```\n\n```common-lisp\n(disassemble 'sumup)\n```\n\n```\n; disassembly for SUMUP\n; Size: 72 bytes. Origin: #x1003D2B65A\n; 5A:       498B4C2460       MOV RCX, [R12+96]                ; thread.binding-stack-pointer\n                                                              ; no-arg-parsing entry point\n; 5F:       48894DF8         MOV [RBP-8], RCX\n; 63:       31C9             XOR ECX, ECX\n; 65:       BB01000000       MOV EBX, 1\n; 6A:       EB26             JMP L1\n; 6C:       0F1F4000         NOP\n; 70: L0:   488D141B         LEA RDX, [RBX+RBX]\n; 74:       48895DE8         MOV [RBP-24], RBX\n; 78:       488BF9           MOV RDI, RCX\n; 7B:       41BBA0020020     MOV R11D, 536871584              ; GENERIC-+\n; 81:       41FFD3           CALL R11\n; 84:       488BCA           MOV RCX, RDX\n; 87:       488B5DE8         MOV RBX, [RBP-24]\n; 8B:       488B75F0         MOV RSI, [RBP-16]\n; 8F:       48FFC3           INC RBX\n; 92: L1:   4839F3           CMP RBX, RSI\n; 95:       7ED9             JLE L0\n; 97:       488BD1           MOV RDX, RCX\n; 9A:       488BE5           MOV RSP, RBP\n; 9D:       F8               CLC\n; 9E:       5D               POP RBP\n; 9F:       C3               RET\n; A0:       CC10             BREAK 16                         ; Invalid argument count trap\n```\n\n\u5b9f\u884c\u6642\u9593\u3068\u3057\u3066\u306f\u7d040.2\u79d2\u306a\u306e\u3067\u3001NumPy\u7248\u3068\u540c\u3058\u304f\u3089\u3044\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\n### type fixnum sum\u7248\n\ntype fixnum n\u306e\u30a2\u30bb\u30f3\u30d6\u30ea\u3092\u898b\u308b\u3068\u3001\u307e\u3060\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u95a2\u6570\u304c\u6b8b\u3063\u3066\u3044\u307e\u3059\u3002\n\u5909\u6570sum\u306b\u3082fixnum\u578b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n```common-lisp\n(defconstant +n+ 100000)\n\n(defun sumup (n)\n  (declare (type fixnum n))\n  (let ((sum 0))\n    (declare (type fixnum sum))\n    (loop for i from 1 to n\n          do (incf sum i))\n    sum))\n\n(defun main ()\n  (print \"common lisp start.\")\n  (loop for count from 1 to +n+\n        collect (sumup count))\n  (print \"common lisp end.\"))\n```\n\n```sh\n$ time ros +Q benchmark-common-lisp-type-fixnum-sum.ros \n\n\"common lisp start.\" \n\"common lisp end.\" \nreal    0m0.154s\nuser    0m0.140s\nsys 0m0.008s\n```\n\n```common-lisp\n(disassemble 'sumup)\n```\n\n```\n; disassembly for SUMUP\n; Size: 70 bytes. Origin: #x100436CB56\n; 56:       498B4C2460       MOV RCX, [R12+96]                ; thread.binding-stack-pointer\n                                                              ; no-arg-parsing entry point\n; 5B:       48894DF8         MOV [RBP-8], RCX\n; 5F:       31D2             XOR EDX, EDX\n; 61:       B901000000       MOV ECX, 1\n; 66:       EB23             JMP L1\n; 68:       0F1F840000000000 NOP\n; 70: L0:   488BD9           MOV RBX, RCX\n; 73:       488BC2           MOV RAX, RDX\n; 76:       48D1F8           SAR RAX, 1\n; 79:       488D1403         LEA RDX, [RBX+RAX]\n; 7D:       488BC2           MOV RAX, RDX\n; 80:       48D1E0           SHL RAX, 1\n; 83:       7011             JO L2\n; 85:       48D1E2           SHL RDX, 1\n; 88:       48FFC1           INC RCX\n; 8B: L1:   4839F1           CMP RCX, RSI\n; 8E:       7EE0             JLE L0\n; 90:       488BE5           MOV RSP, RBP\n; 93:       F8               CLC\n; 94:       5D               POP RBP\n; 95:       C3               RET\n; 96: L2:   CC0A             BREAK 10                         ; error trap\n; 98:       35               BYTE #X35                        ; OBJECT-NOT-FIXNUM-ERROR\n; 99:       12               BYTE #X12                        ; RDX\n; 9A:       CC10             BREAK 16                         ; Invalid argument count trap\n```\n\n\u3053\u308c\u3067\u5b9f\u884c\u6642\u9593\u304cNumPy\u7248\u3088\u308a\u3082Common Lisp\u306e\u65b9\u304c\u901f\u304f\u306a\u308a\u306a\u308a\u307e\u3057\u305f\u3002\n\u30d7\u30ea\u30f3\u30c8\u6587\u3092\u4f7f\u3046\u3068Python\u5074\u3068\u7d50\u679c\u304c\u4e00\u81f4\u3057\u3066\u308b\u3088\u3046\u306b\u898b\u3048\u308b\u3051\u3069\u3001\u3053\u308c\u3067\u672c\u5f53\u306b\u8a08\u7b97\u3057\u3066\u308b\u3093\u3060\u308d\u3046\u304b?\n\n\n### build\u7248\n\n\u6a19\u6e96\u306e\u6a5f\u80fd\u304b\u3089\u306f\u5916\u308c\u308b\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001roswell\u306e\u30d3\u30eb\u30c9\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\u307e\u305a\u306f\u30d5\u30a1\u30a4\u30eb\u306e\u5148\u982d\u306b\u8272\u3005\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n```common-lisp\n#!/bin/sh\n#|-*- mode:lisp -*-|#\n#|\nexec ros +Q -- $0 \"$@\"\n|#\n\n(defconstant +n+ 10000)\n\n(defun sumup (n)\n  (declare (type fixnum n))\n  (let ((sum 0))\n    (declare (type fixnum sum))\n    (loop for i from 1 to n\n          do (incf sum i))\n    sum))\n\n(defun main ()\n  (print \"common lisp start.\")\n  (loop for count from 1 to +n+\n        collect (sumup count))\n  (print \"common lisp end.\"))\n```\n\nroswell\u3067\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002\n\n```sh\n$ ros +Q build benchmark-common-lisp-ros-build.ros \n[undoing binding stack and other enclosing state... done]\n[saving current Lisp image into benchmark-common-lisp-ros-build:\nwriting 4912 bytes from the read-only space at 0x20000000\nwriting 3216 bytes from the static space at 0x20100000\nwriting 782336 bytes from the immobile space at 0x20300000\nwriting 0 bytes from the immobile space at 0x21b00000\nwriting 44400640 bytes from the dynamic space at 0x1000000000\ndone]\n```\n\nELF\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\n```sh\n$ file benchmark-common-lisp-ros-build\nbenchmark-common-lisp-ros-build: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.18, BuildID[sha1]=aad09922bc365e5911ed48273a824d4aca017382, not stripped\n```\n\n```sh\n$ time ./benchmark-common-lisp-ros-build \n\n\n\"common lisp start.\" \n\"common lisp end.\" \nreal    0m0.065s\nuser    0m0.060s\nsys 0m0.004s\n```\n\n\u3055\u3089\u306b0.1\u79d2\u304f\u3089\u3044\u901f\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\n\n## \u307e\u3068\u3081\n\n| \u8a00\u8a9e | \u5b9f\u884c\u6642\u9593 (ms) |\n|--------|--------|\n| Python (NumPy\u7248) | 238 |\n| Python\u7248 | 945 |\n| Common Lisp (loop\u7248) | 332 |\n| Common Lisp (dotimes\u7248) | 426 |\n| Common Lisp (optimize speed 3\u7248) | 356 |\n| Common Lisp (type fixnum n\u7248) | 200 |\n| Common Lisp (type fixnum sum\u7248) | 154 |\n| Common Lisp (build\u7248) | 65 | \n\nNumPy\u7248\u3088\u308a\u3082Common Lisp\u7248\u306e\u65b9\u304c\u901f\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\n", "tags": ["Python", "numpy", "common-lisp"]}