{"context": " More than 1 year has passed since last update.Google Summer of Code (GSoC) 2015\u3067\u767a\u8868\u3055\u308c\u3001opencv_contrib \u30ec\u30dd\u30b8\u30c8\u30ea\u306b\u5b9f\u88c5\u304c\u516c\u958b\u3055\u308c\u305f cv::dnn \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u7d39\u4ecb\u3092\u3057\u307e\u3059\u3002\n\nIt would be cool if OpenCV could load and run deep networks trained with popular DNN packages like Caffe, Theano or Torch. - Ideas Page for OpenCV Google Summer of Code 2015 (GSoC 2015)\n\n\u3053\u306e cv::dnn \u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u3059\u304c\u30012015/12/21\u306b\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305fOpenCV 3.1\u306b\u3055\u3063\u305d\u304f\u53d6\u308a\u8fbc\u307e\u308c\u305f\u3088\u3046\u3067\u3059\u3002\n\nOpenCV > NEWS > OpenCV 3.1\n\n\u5c0e\u5165\u624b\u9806\u3084Caffe\u306eC++\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3068\u306e\u6bd4\u8f03\u306a\u3069\u6280\u8853\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u30d6\u30ed\u30b0\u306e\u65b9\u306b\u307e\u3068\u3081\u3066\u3042\u308a\u307e\u3059\u306e\u3067\u8208\u5473\u304c\u3042\u308c\u3070\u3002\n\nOpenCV\u306eDeep Learning\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u7d39\u4ecb \n\n\u3053\u3053\u3067\u306f\u7c21\u5358\u306a\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u753b\u50cf\u5206\u985e\u51e6\u7406 \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\ncv::dnn\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3063\u3066\u3001Caffe\u7528\u306e\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u3068\u753b\u50cf\u5206\u985e(\u4e00\u822c\u7269\u4f53\u8a8d\u8b58)\u51e6\u7406\u3092\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\n \u3053\u308c\u5165\u529b\n// opencv_dnn_test.cpp\n#include <iostream>\n#include <fstream>\n#include <opencv2/dnn.hpp>\n#include <opencv2/imgproc.hpp>\n#include <opencv2/highgui.hpp>\n\nusing namespace std;\n\nint main(int argc, char** argv) {\n  // ImageNet Caffe\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u30e2\u30c7\u30eb\n  string protoFile = \"bvlc_reference_caffenet/deploy.prototxt\";\n  string modelFile = \"bvlc_reference_caffenet/bvlc_reference_caffenet.caffemodel\";\n  // \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\n  string imageFile = (argc > 1) ? argv[1] : \"images/cat.jpg\";\n  // Caffe\u30e2\u30c7\u30eb\u306e\u8aad\u307f\u8fbc\u307f\n  cv::Ptr<cv::dnn::Importer> importer;\n  try {\n    importer = cv::dnn::createCaffeImporter(protoFile, modelFile);\n  } catch(const cv::Exception& e) {\n    cerr << e.msg << endl;\n    exit(-1);\n  }\n  cv::dnn::Net net;\n  importer->populateNet(net);\n  importer.release();\n  // \u30c6\u30b9\u30c8\u7528\u306e\u5165\u529b\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\n  cv::Mat img = cv::imread(imageFile);\n  if(img.empty()) {\n    cerr << \"can't read image: \" << imageFile << endl;\n    exit(-1);\n  }\n  try {\n    // \u5165\u529b\u753b\u50cf\u3092\u30ea\u30b5\u30a4\u30ba\n    int cropSize = 224;\n    cv::resize(img, img, cv::Size(cropSize, cropSize));\n    // Caffe\u3067\u6271\u3046Blob\u5f62\u5f0f\u306b\u5909\u63db (\u5b9f\u4f53\u306fcv::Mat\u306e\u30e9\u30c3\u30d1\u30fc\u30af\u30e9\u30b9)\n    const cv::dnn::Blob inputBlob = cv::dnn::Blob(img);\n    // \u5165\u529b\u5c64\u306b\u753b\u50cf\u3092\u5165\u529b\n    net.setBlob(\".data\", inputBlob);\n    // \u30d5\u30a9\u30ef\u30fc\u30c9\u30d1\u30b9(\u9806\u4f1d\u64ad)\u306e\u8a08\u7b97\n    net.forward();\n    // \u51fa\u529b\u5c64(Softmax)\u306e\u51fa\u529b\u3092\u53d6\u5f97, \u3053\u3053\u306b\u4e88\u6e2c\u7d50\u679c\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\n    const cv::dnn::Blob prob = net.getBlob(\"prob\");\n    // Blob\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5185\u90e8\u306eMat\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u53c2\u7167\u3092\u53d6\u5f97\n    // ImageNet 1000\u30af\u30e9\u30b9\u6bce\u306e\u78ba\u7387(32bits\u6d6e\u52d5\u5c0f\u6570\u70b9\u5024)\u304c\u683c\u7d0d\u3055\u308c\u305f1x1000\u306e\u884c\u5217(\u30d9\u30af\u30c8\u30eb)\n    const cv::Mat probMat = prob.matRefConst();\n    // \u78ba\u7387(\u4fe1\u983c\u5ea6)\u306e\u9ad8\u3044\u9806\u306b\u30bd\u30fc\u30c8\u3057\u3066\u3001\u4e0a\u4f4d5\u3064\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97\n    cv::Mat sorted(probMat.rows, probMat.cols, CV_32F);\n    cv::sortIdx(probMat, sorted, CV_SORT_EVERY_ROW|CV_SORT_DESCENDING);\n    cv::Mat topk = sorted(cv::Rect(0, 0, 5, 1));\n    // \u30ab\u30c6\u30b4\u30ea\u540d\u306e\u30ea\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb(synset_words.txt)\u3092\u8aad\u307f\u8fbc\u307f\n    // \u30c7\u30fc\u30bf\u4f8b: categoryList[951] = \"lemon\";\n    vector<string> categoryList;\n    string category;\n    ifstream fs(\"synset_words.txt\");\n    if(!fs.is_open()) {\n      cerr << \"can't read file\" << endl;\n      exit(-1);\n    }\n    while(getline(fs, category)) {\n      if(category.length()) {\n        categoryList.push_back(category.substr(category.find(' ') + 1));\n      }\n    }\n    fs.close();\n    // \u4e88\u6e2c\u3057\u305f\u30ab\u30c6\u30b4\u30ea\u3068\u78ba\u7387(\u4fe1\u983c\u5ea6)\u3092\u51fa\u529b\n    cv::Mat_<int>::const_iterator it = topk.begin<int>();\n    while(it != topk.end<int>()) {\n      cout << categoryList[*it] << \" : \" << probMat.at<float>(*it) * 100 << \" %\" << endl;\n      ++it;\n    }\n  } catch(const cv::Exception& e) {\n    cerr << e.msg << endl;\n  }\n  return 0;\n}\n\n\u5b9f\u884c\u7d50\u679c\n$ g++ opencv_dnn_test.cpp -o opencv_dnn_test `pkg-config --cflags opencv` `pkg-config --libs opencv`\n$ ./opencv_dnn_test\nAttempting to upgrade input file specified using deprecated transformation parameters: bvlc_reference_caffenet/bvlc_reference_caffenet.caffemodel\nSuccessfully upgraded file specified using deprecated data transformation parameters.\nNote that future Caffe releases will only support transform_param messages for transformation fields.\nAttempting to upgrade input file specified using deprecated V1LayerParameter: bvlc_reference_caffenet/bvlc_reference_caffenet.caffemodel\nSuccessfully upgraded file specified using deprecated V1LayerParameter\n\nNet Outputs(1):\nprob\nSiamese cat, Siamese : 93.9703 %\nEgyptian cat : 4.23627 %\ntabby, tabby cat : 0.365742 %\nlynx, catamount : 0.19613 %\nhamster : 0.184294 %\n\n\u3046\u3061\u306e\u732b\u306f\u30b7\u30e3\u30e0\u732b\u3068\u8a8d\u8b58\u3055\u308c\u307e\u3057\u305f\u3002\u96d1\u7a2e\u3067\u3059\u3002\ncv::dnn::Blob \u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f cv::InputArray \u3092\u5165\u529b\u3068\u3057\u3066\u53d7\u3051\u4ed8\u3051\u3066\u3044\u308b\u306e\u3067\u3001std::vector<cv::Mat> \u3092\u4f5c\u3063\u3066\u6e21\u305b\u3070\u8907\u6570\u306e\u753b\u50cf\u3092\u5bfe\u8c61\u306b\u30d0\u30c3\u30c1\u51e6\u7406\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\ncv::dnn::Blob blob = cv::dnn::Blob(image);  // image\u306f cv::InputArray\nstd::cout << \"blob shape: \" << blob.shape() << std::endl;\n\n// \u5b9f\u884c\u7d50\u679c\u4f8b\n// \u30c7\u30fc\u30bf\u6570\u3001\u30c1\u30e3\u30f3\u30cd\u30eb\u6570\u3001\u753b\u50cf\u5e45\u3001\u753b\u50cf\u9ad8\u3055\nblob shape: [1, 3, 224, 224]\n\nstd::vector<cv::Mat> images;  // \u753b\u50cf\u30c7\u30fc\u30bf\u306e\u30ea\u30b9\u30c8\u3092\u6e96\u5099\n// ... std::vector#push_back \u3067 cv::Mat \u30925\u3064\u8ffd\u52a0\n\ncv::dnn::Blob blob = cv::dnn:Blob(images);\nstd::cout << \"blob shape: \" << blob.shape() << std::endl;\n\n// \u5b9f\u884c\u7d50\u679c\u4f8b\nblob shape: [5, 3, 224, 224]\n\n\u8907\u6570\u306e\u753b\u50cf\u3092\u5165\u529b\u3068\u3057\u305f\u5834\u5408\u306eSoftmax(prob)\u5c64\u306eBlob\u306f [\u5165\u529b\u30c7\u30fc\u30bf\u6570\u3001\u30af\u30e9\u30b9\u6570] \u306e\u5927\u304d\u3055\u306e\u4e8c\u6b21\u5143\u30c7\u30fc\u30bf\u306b\u306a\u308a\u3001\u30af\u30e9\u30b9\u6bce\u306e\u78ba\u7387(\u4fe1\u983c\u5ea6)\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u78ba\u7387\u4e0a\u4f4d5\u4f4d\u307e\u3067\u306e\u4e88\u6e2c\u7d50\u679c\u3092\u51fa\u529b\u3059\u308b\u5834\u5408\u3082\u4e0a\u8ff0\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3068\u540c\u69d8\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u73fe\u5728\u306e\u5b9f\u88c5\u3060\u3068Caffe\u306eArgmax\u30ec\u30a4\u30e4\u30fc\u304c\u8aad\u307f\u8fbc\u3081\u306a\u3044\u307f\u305f\u3044\u306a\u306e\u3067\u30bd\u30fc\u30c8\u3059\u308b\u51e6\u7406\u3082\u5225\u9014\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\n\u753b\u50cf\u7279\u5fb4\u91cf\u306e\u62bd\u51fa\nSoftmax(prob)\u5c64\u306e\u51fa\u529b\u304b\u3089\u78ba\u7387\u3092\u5f97\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u4e2d\u9593\u5c64\u306e\u51fa\u529b\u3092\u7279\u5fb4\u91cf\u3068\u3057\u3066\u62bd\u51fa\u3057\u305f\u3044\u5834\u5408\u3082\u7c21\u5358\u3067\u3059\u3002cv::dnn::Net#getBlob \u30e1\u30bd\u30c3\u30c9\u306b\u5bfe\u8c61\u306e\u30ec\u30a4\u30e4\u30fc\u540d\u3092\u6307\u5b9a\u3059\u308b\u3060\u3051\u3067OK\u3002\u30ec\u30a4\u30e4\u30fc\u540d\u306f\u8aad\u307f\u8fbc\u3080prototxt\u30d5\u30a1\u30a4\u30eb\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nnet.forward();  // cv::dnn::Net#forward \u30e1\u30bd\u30c3\u30c9\u3067\u30d5\u30a9\u30ef\u30fc\u30c9\u30d1\u30b9(\u9806\u4f1d\u64ad)\u306e\u8a08\u7b97\ncv::dnn::Blob blob = net.getBlob(\"fc7\");  // \u5168\u7d50\u5408\u5c64 fc7 (InnerProduct)\u306eBlob\u3092\u53d6\u5f97\nstd::cout << \"blob shape: \" << blob.shape() << std::endl;  // blob shape: [1, 4096] (4096\u6b21\u5143\u306e\u7279\u5fb4\u91cf\u3092\u62bd\u51fa)\nconst cv::Mat feature = blob.matRefConst();  // \u62bd\u51fa\u3057\u305f\u7279\u5fb4\u91cf\u3092 cv::Mat \u3068\u3057\u3066\u53d6\u5f97(\u53c2\u7167\u304c\u8fd4\u308b)\n\n\u62bd\u51fa\u3057\u305f\u7279\u5fb4\u91cf\u3092\u4f7f\u3063\u3066\u9069\u5f53\u306a\u5206\u985e\u5668\u3092\u4f5c\u308b\u306e\u3082\u7c21\u5358\u3067\u3059\u3002\u3053\u3053\u3067\u306fSVM(cv::SVM)\u3067\u5b66\u7fd2\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u8f09\u305b\u307e\u3059\u3002\n// feature(cv::Mat): \u7279\u5fb4\u91cf, trainLabel(cv::Mat): \u6b63\u89e3\u30e9\u30d9\u30eb\ncv::Ptr<cv::ml::TrainData> data =\n      cv::ml::TrainData::create(feature, cv::ml::ROW_SAMPLE, trainLabel, false);\ncv::Ptr<cv::ml::SVM> clf = cv::ml::SVM::create();\nclf->setType(cv::ml::SVM::C_SVC);\nclf->setKernel(cv::ml::SVM::LINEAR);\nclf->trainAuto(data, 5);  // \u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1 + \u4ea4\u5dee\u691c\u8a3c(5-fold)\u3067\u5b66\u7fd2\nclf->save(\"cnn_svm_model.yml\");  // \u30e2\u30c7\u30eb\u3092YAML\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u30c7\u30a3\u30b9\u30af\u306b\u4fdd\u5b58\n\ncv::SVM#trainAuto \u30e1\u30bd\u30c3\u30c9\u306f\u3068\u3066\u3082\u4fbf\u5229\u3002\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u306f\u4fdd\u5b58\u3057\u3066\u304a\u304f\u3068\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u305f\u3060\u3057\u3001cv::dnn\u30e2\u30b8\u30e5\u30fc\u30eb\u5358\u4f53\u3067\u306f\u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u306f\u672a\u30b5\u30dd\u30fc\u30c8\u3068\u306e\u3053\u3068\u3067\u3059\u3002\n\nFunctionality of this module is designed only for forward pass computations (i. e. network testing). A network training is in principle not supported.\n\nCaffe\u3084Torch\u672c\u4f53\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u5229\u7528\u3059\u308b\u3060\u3051\u3067\u3042\u308c\u3070\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\u3002\nOpenCV\u306f\u30de\u30eb\u30c1\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u5bfe\u5fdc\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u306e\u3067\u3001cv::dnn\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3063\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3082\u6bd4\u8f03\u7684\u7c21\u5358\u306b\u4f5c\u308c\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u306a\u306b\u3088\u308a\u4ed6\u306e\u753b\u50cf\u51e6\u7406\u95a2\u9023\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u6bd4\u3079\u3066OSS\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u304c\u5927\u304d\u3044\u306e\u3067\u30b5\u30dd\u30fc\u30c8\u3082\u671f\u5f85\u3067\u304d\u308b\u3068\u3044\u3046\u5b89\u5fc3\u611f\u3082\u3042\u308a\u307e\u3059\u3002\n\u3053\u3053\u3067\u7d39\u4ecb\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306b\u52a0\u3048\u3001SVM\u3067\u306f\u306a\u304f\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30(cv::LogisticRegression)\u3092\u4f7f\u3063\u3066\u5b66\u7fd2\u3057\u305f\u308a\u3001cv::datasets\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3063\u3066MNIST\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u3080\u30b5\u30f3\u30d7\u30eb\u306a\u3069\u3082GitHub\u306b\u4e0a\u3052\u3066\u3042\u308a\u307e\u3059\u306e\u3067\u8208\u5473\u304c\u3042\u308c\u3070\u53c2\u8003\u306b\u3057\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n\n\nopencv-samples / dnn / - GitHub (\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u4e00\u5f0f)\n\nGoogle Summer of Code (GSoC) 2015\u3067\u767a\u8868\u3055\u308c\u3001opencv_contrib \u30ec\u30dd\u30b8\u30c8\u30ea\u306b\u5b9f\u88c5\u304c\u516c\u958b\u3055\u308c\u305f **cv::dnn** \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u7d39\u4ecb\u3092\u3057\u307e\u3059\u3002\n\n> It would be cool if OpenCV could load and run deep networks trained with popular DNN packages like Caffe, Theano or Torch. - [Ideas Page for OpenCV Google Summer of Code 2015 (GSoC 2015)](http://code.opencv.org/projects/opencv/wiki/GSoC_2015)\n\n\u3053\u306e cv::dnn \u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u3059\u304c\u30012015/12/21\u306b\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305fOpenCV 3.1\u306b\u3055\u3063\u305d\u304f\u53d6\u308a\u8fbc\u307e\u308c\u305f\u3088\u3046\u3067\u3059\u3002\n\n* [OpenCV > NEWS > OpenCV 3.1](http://opencv.org/opencv-3-1.html)\n\n\u5c0e\u5165\u624b\u9806\u3084Caffe\u306eC++\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3068\u306e\u6bd4\u8f03\u306a\u3069\u6280\u8853\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u30d6\u30ed\u30b0\u306e\u65b9\u306b\u307e\u3068\u3081\u3066\u3042\u308a\u307e\u3059\u306e\u3067\u8208\u5473\u304c\u3042\u308c\u3070\u3002\n\n* [OpenCV\u306eDeep Learning\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u7d39\u4ecb ](http://rest-term.com/archives/3269/)\n\n\u3053\u3053\u3067\u306f\u7c21\u5358\u306a\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u3066\u304a\u304d\u307e\u3059\u3002\n\n## \u753b\u50cf\u5206\u985e\u51e6\u7406 \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\ncv::dnn\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3063\u3066\u3001Caffe\u7528\u306e\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u3068\u753b\u50cf\u5206\u985e(\u4e00\u822c\u7269\u4f53\u8a8d\u8b58)\u51e6\u7406\u3092\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\n\n![DSC01498.jpg](https://qiita-image-store.s3.amazonaws.com/0/3215/7b9086e6-bc4e-ab38-4ab7-b3c7e698ff26.jpeg) \u3053\u308c\u5165\u529b\n\n```cpp\n// opencv_dnn_test.cpp\n#include <iostream>\n#include <fstream>\n#include <opencv2/dnn.hpp>\n#include <opencv2/imgproc.hpp>\n#include <opencv2/highgui.hpp>\n\nusing namespace std;\n\nint main(int argc, char** argv) {\n  // ImageNet Caffe\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u30e2\u30c7\u30eb\n  string protoFile = \"bvlc_reference_caffenet/deploy.prototxt\";\n  string modelFile = \"bvlc_reference_caffenet/bvlc_reference_caffenet.caffemodel\";\n  // \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\n  string imageFile = (argc > 1) ? argv[1] : \"images/cat.jpg\";\n  // Caffe\u30e2\u30c7\u30eb\u306e\u8aad\u307f\u8fbc\u307f\n  cv::Ptr<cv::dnn::Importer> importer;\n  try {\n    importer = cv::dnn::createCaffeImporter(protoFile, modelFile);\n  } catch(const cv::Exception& e) {\n    cerr << e.msg << endl;\n    exit(-1);\n  }\n  cv::dnn::Net net;\n  importer->populateNet(net);\n  importer.release();\n  // \u30c6\u30b9\u30c8\u7528\u306e\u5165\u529b\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\n  cv::Mat img = cv::imread(imageFile);\n  if(img.empty()) {\n    cerr << \"can't read image: \" << imageFile << endl;\n    exit(-1);\n  }\n  try {\n    // \u5165\u529b\u753b\u50cf\u3092\u30ea\u30b5\u30a4\u30ba\n    int cropSize = 224;\n    cv::resize(img, img, cv::Size(cropSize, cropSize));\n    // Caffe\u3067\u6271\u3046Blob\u5f62\u5f0f\u306b\u5909\u63db (\u5b9f\u4f53\u306fcv::Mat\u306e\u30e9\u30c3\u30d1\u30fc\u30af\u30e9\u30b9)\n    const cv::dnn::Blob inputBlob = cv::dnn::Blob(img);\n    // \u5165\u529b\u5c64\u306b\u753b\u50cf\u3092\u5165\u529b\n    net.setBlob(\".data\", inputBlob);\n    // \u30d5\u30a9\u30ef\u30fc\u30c9\u30d1\u30b9(\u9806\u4f1d\u64ad)\u306e\u8a08\u7b97\n    net.forward();\n    // \u51fa\u529b\u5c64(Softmax)\u306e\u51fa\u529b\u3092\u53d6\u5f97, \u3053\u3053\u306b\u4e88\u6e2c\u7d50\u679c\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\n    const cv::dnn::Blob prob = net.getBlob(\"prob\");\n    // Blob\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5185\u90e8\u306eMat\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u53c2\u7167\u3092\u53d6\u5f97\n    // ImageNet 1000\u30af\u30e9\u30b9\u6bce\u306e\u78ba\u7387(32bits\u6d6e\u52d5\u5c0f\u6570\u70b9\u5024)\u304c\u683c\u7d0d\u3055\u308c\u305f1x1000\u306e\u884c\u5217(\u30d9\u30af\u30c8\u30eb)\n    const cv::Mat probMat = prob.matRefConst();\n    // \u78ba\u7387(\u4fe1\u983c\u5ea6)\u306e\u9ad8\u3044\u9806\u306b\u30bd\u30fc\u30c8\u3057\u3066\u3001\u4e0a\u4f4d5\u3064\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97\n    cv::Mat sorted(probMat.rows, probMat.cols, CV_32F);\n    cv::sortIdx(probMat, sorted, CV_SORT_EVERY_ROW|CV_SORT_DESCENDING);\n    cv::Mat topk = sorted(cv::Rect(0, 0, 5, 1));\n    // \u30ab\u30c6\u30b4\u30ea\u540d\u306e\u30ea\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb(synset_words.txt)\u3092\u8aad\u307f\u8fbc\u307f\n    // \u30c7\u30fc\u30bf\u4f8b: categoryList[951] = \"lemon\";\n    vector<string> categoryList;\n    string category;\n    ifstream fs(\"synset_words.txt\");\n    if(!fs.is_open()) {\n      cerr << \"can't read file\" << endl;\n      exit(-1);\n    }\n    while(getline(fs, category)) {\n      if(category.length()) {\n        categoryList.push_back(category.substr(category.find(' ') + 1));\n      }\n    }\n    fs.close();\n    // \u4e88\u6e2c\u3057\u305f\u30ab\u30c6\u30b4\u30ea\u3068\u78ba\u7387(\u4fe1\u983c\u5ea6)\u3092\u51fa\u529b\n    cv::Mat_<int>::const_iterator it = topk.begin<int>();\n    while(it != topk.end<int>()) {\n      cout << categoryList[*it] << \" : \" << probMat.at<float>(*it) * 100 << \" %\" << endl;\n      ++it;\n    }\n  } catch(const cv::Exception& e) {\n    cerr << e.msg << endl;\n  }\n  return 0;\n}\n```\n\n\u5b9f\u884c\u7d50\u679c\n\n```bash\n$ g++ opencv_dnn_test.cpp -o opencv_dnn_test `pkg-config --cflags opencv` `pkg-config --libs opencv`\n$ ./opencv_dnn_test\nAttempting to upgrade input file specified using deprecated transformation parameters: bvlc_reference_caffenet/bvlc_reference_caffenet.caffemodel\nSuccessfully upgraded file specified using deprecated data transformation parameters.\nNote that future Caffe releases will only support transform_param messages for transformation fields.\nAttempting to upgrade input file specified using deprecated V1LayerParameter: bvlc_reference_caffenet/bvlc_reference_caffenet.caffemodel\nSuccessfully upgraded file specified using deprecated V1LayerParameter\n\nNet Outputs(1):\nprob\nSiamese cat, Siamese : 93.9703 %\nEgyptian cat : 4.23627 %\ntabby, tabby cat : 0.365742 %\nlynx, catamount : 0.19613 %\nhamster : 0.184294 %\n```\n\n\u3046\u3061\u306e\u732b\u306f\u30b7\u30e3\u30e0\u732b\u3068\u8a8d\u8b58\u3055\u308c\u307e\u3057\u305f\u3002\u96d1\u7a2e\u3067\u3059\u3002\n\ncv::dnn::Blob \u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f cv::InputArray \u3092\u5165\u529b\u3068\u3057\u3066\u53d7\u3051\u4ed8\u3051\u3066\u3044\u308b\u306e\u3067\u3001std::vector&lt;cv::Mat&gt; \u3092\u4f5c\u3063\u3066\u6e21\u305b\u3070\u8907\u6570\u306e\u753b\u50cf\u3092\u5bfe\u8c61\u306b\u30d0\u30c3\u30c1\u51e6\u7406\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n```cpp\ncv::dnn::Blob blob = cv::dnn::Blob(image);  // image\u306f cv::InputArray\nstd::cout << \"blob shape: \" << blob.shape() << std::endl;\n\n// \u5b9f\u884c\u7d50\u679c\u4f8b\n// \u30c7\u30fc\u30bf\u6570\u3001\u30c1\u30e3\u30f3\u30cd\u30eb\u6570\u3001\u753b\u50cf\u5e45\u3001\u753b\u50cf\u9ad8\u3055\nblob shape: [1, 3, 224, 224]\n\nstd::vector<cv::Mat> images;  // \u753b\u50cf\u30c7\u30fc\u30bf\u306e\u30ea\u30b9\u30c8\u3092\u6e96\u5099\n// ... std::vector#push_back \u3067 cv::Mat \u30925\u3064\u8ffd\u52a0\n\ncv::dnn::Blob blob = cv::dnn:Blob(images);\nstd::cout << \"blob shape: \" << blob.shape() << std::endl;\n\n// \u5b9f\u884c\u7d50\u679c\u4f8b\nblob shape: [5, 3, 224, 224]\n```\n\n\u8907\u6570\u306e\u753b\u50cf\u3092\u5165\u529b\u3068\u3057\u305f\u5834\u5408\u306eSoftmax(prob)\u5c64\u306eBlob\u306f [\u5165\u529b\u30c7\u30fc\u30bf\u6570\u3001\u30af\u30e9\u30b9\u6570] \u306e\u5927\u304d\u3055\u306e\u4e8c\u6b21\u5143\u30c7\u30fc\u30bf\u306b\u306a\u308a\u3001\u30af\u30e9\u30b9\u6bce\u306e\u78ba\u7387(\u4fe1\u983c\u5ea6)\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u78ba\u7387\u4e0a\u4f4d5\u4f4d\u307e\u3067\u306e\u4e88\u6e2c\u7d50\u679c\u3092\u51fa\u529b\u3059\u308b\u5834\u5408\u3082\u4e0a\u8ff0\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3068\u540c\u69d8\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u73fe\u5728\u306e\u5b9f\u88c5\u3060\u3068Caffe\u306eArgmax\u30ec\u30a4\u30e4\u30fc\u304c\u8aad\u307f\u8fbc\u3081\u306a\u3044\u307f\u305f\u3044\u306a\u306e\u3067\u30bd\u30fc\u30c8\u3059\u308b\u51e6\u7406\u3082\u5225\u9014\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\n## \u753b\u50cf\u7279\u5fb4\u91cf\u306e\u62bd\u51fa\nSoftmax(prob)\u5c64\u306e\u51fa\u529b\u304b\u3089\u78ba\u7387\u3092\u5f97\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u4e2d\u9593\u5c64\u306e\u51fa\u529b\u3092\u7279\u5fb4\u91cf\u3068\u3057\u3066\u62bd\u51fa\u3057\u305f\u3044\u5834\u5408\u3082\u7c21\u5358\u3067\u3059\u3002cv::dnn::Net#getBlob \u30e1\u30bd\u30c3\u30c9\u306b\u5bfe\u8c61\u306e\u30ec\u30a4\u30e4\u30fc\u540d\u3092\u6307\u5b9a\u3059\u308b\u3060\u3051\u3067OK\u3002\u30ec\u30a4\u30e4\u30fc\u540d\u306f\u8aad\u307f\u8fbc\u3080prototxt\u30d5\u30a1\u30a4\u30eb\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```cpp\nnet.forward();  // cv::dnn::Net#forward \u30e1\u30bd\u30c3\u30c9\u3067\u30d5\u30a9\u30ef\u30fc\u30c9\u30d1\u30b9(\u9806\u4f1d\u64ad)\u306e\u8a08\u7b97\ncv::dnn::Blob blob = net.getBlob(\"fc7\");  // \u5168\u7d50\u5408\u5c64 fc7 (InnerProduct)\u306eBlob\u3092\u53d6\u5f97\nstd::cout << \"blob shape: \" << blob.shape() << std::endl;  // blob shape: [1, 4096] (4096\u6b21\u5143\u306e\u7279\u5fb4\u91cf\u3092\u62bd\u51fa)\nconst cv::Mat feature = blob.matRefConst();  // \u62bd\u51fa\u3057\u305f\u7279\u5fb4\u91cf\u3092 cv::Mat \u3068\u3057\u3066\u53d6\u5f97(\u53c2\u7167\u304c\u8fd4\u308b)\n```\n\n\u62bd\u51fa\u3057\u305f\u7279\u5fb4\u91cf\u3092\u4f7f\u3063\u3066\u9069\u5f53\u306a\u5206\u985e\u5668\u3092\u4f5c\u308b\u306e\u3082\u7c21\u5358\u3067\u3059\u3002\u3053\u3053\u3067\u306fSVM(cv::ml::SVM)\u3067\u5b66\u7fd2\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u8f09\u305b\u307e\u3059\u3002\n\n```cpp\n// feature(cv::Mat): \u7279\u5fb4\u91cf, trainLabel(cv::Mat): \u6b63\u89e3\u30e9\u30d9\u30eb\ncv::Ptr<cv::ml::TrainData> data =\n      cv::ml::TrainData::create(feature, cv::ml::ROW_SAMPLE, trainLabel, false);\ncv::Ptr<cv::ml::SVM> clf = cv::ml::SVM::create();\nclf->setType(cv::ml::SVM::C_SVC);\nclf->setKernel(cv::ml::SVM::LINEAR);\nclf->trainAuto(data, 5);  // \u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1 + \u4ea4\u5dee\u691c\u8a3c(5-fold)\u3067\u5b66\u7fd2\nclf->save(\"cnn_svm_model.yml\");  // \u30e2\u30c7\u30eb\u3092YAML\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u30c7\u30a3\u30b9\u30af\u306b\u4fdd\u5b58\n```\n\ncv::ml::SVM#trainAuto \u30e1\u30bd\u30c3\u30c9\u306f\u3068\u3066\u3082\u4fbf\u5229\u3002\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u306f\u4fdd\u5b58\u3057\u3066\u304a\u304f\u3068\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u305f\u3060\u3057\u3001cv::dnn\u30e2\u30b8\u30e5\u30fc\u30eb\u5358\u4f53\u3067\u306f\u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u306f\u672a\u30b5\u30dd\u30fc\u30c8\u3068\u306e\u3053\u3068\u3067\u3059\u3002\n> Functionality of this module is designed only for forward pass computations (i. e. network testing). A network training is in principle not supported.\n\n**Caffe\u3084Torch\u672c\u4f53\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u5229\u7528\u3059\u308b\u3060\u3051\u3067\u3042\u308c\u3070\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\u3002**\n\nOpenCV\u306f\u30de\u30eb\u30c1\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u5bfe\u5fdc\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u306e\u3067\u3001cv::dnn\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3063\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3082\u6bd4\u8f03\u7684\u7c21\u5358\u306b\u4f5c\u308c\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u306a\u306b\u3088\u308a\u4ed6\u306e\u753b\u50cf\u51e6\u7406\u95a2\u9023\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u6bd4\u3079\u3066OSS\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u304c\u5927\u304d\u3044\u306e\u3067\u30b5\u30dd\u30fc\u30c8\u3082\u671f\u5f85\u3067\u304d\u308b\u3068\u3044\u3046\u5b89\u5fc3\u611f\u3082\u3042\u308a\u307e\u3059\u3002\n\n\u3053\u3053\u3067\u7d39\u4ecb\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306b\u52a0\u3048\u3001SVM\u3067\u306f\u306a\u304f\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30(cv::ml::LogisticRegression)\u3092\u4f7f\u3063\u3066\u5b66\u7fd2\u3057\u305f\u308a\u3001cv::datasets\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3063\u3066MNIST\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u3080\u30b5\u30f3\u30d7\u30eb\u306a\u3069\u3082GitHub\u306b\u4e0a\u3052\u3066\u3042\u308a\u307e\u3059\u306e\u3067\u8208\u5473\u304c\u3042\u308c\u3070\u53c2\u8003\u306b\u3057\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n\n* [opencv-samples / dnn / - GitHub](https://github.com/wellflat/opencv-samples/tree/master/dnn) (\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u4e00\u5f0f)\n", "tags": ["OpenCV", "C++", "\u753b\u50cf\u51e6\u7406"]}