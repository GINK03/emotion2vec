{"context": " More than 1 year has passed since last update.\n\n\u3010SKSpriteNode\u30dc\u30bf\u30f3\u3011\nSKSpriteNode\u3092\u4f7f\u3063\u3066\u3001iOS\u30fbOSX\u5bfe\u5fdc\u306eCButton\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\u3053\u308c\u306f\u30c7\u30ea\u30b1\u30fc\u30c8\u3068\u3057\u3066\u3082\u30b5\u30d6\u30af\u30e9\u30b9\u3068\u3057\u3066\u3082\u4f7f\u3048\u308b\u3088\u3046\u306b\u3082\u3044\u305f\u3057\u307e\u3057\u305f\u3002\n\nCButton.swift\nimport SpriteKit\n\n#if os(iOS)\n    import UIKit\n#endif\n\nenum eButtonActionStyle: Int {\n    case none = 0\n    case pop\n    case count\n}\n\nenum eButtonStatus: Int {\n    case none   = 0\n    case down\n    case up\n    case cancelled\n\n    func value() -> Int {\n        switch self {\n        case .none:\n            return 0\n        case .down:\n            return 1\n        case .up:\n            return 2\n        case .cancelled:\n            return 3\n        }\n    }\n}\n\nclass CButton: SKSpriteNode {\n\n    var status: eButtonStatus = .none {\n        willSet {\n            // value \u304c\u30bb\u30c3\u30c8\u3059\u308b\u524d\u306b\u547c\u3070\u308c\u308b\n        }\n        didSet {\n            // value \u304c\u30bb\u30c3\u30c8\u3055\u308c\u305f\u76f4\u5f8c\u306b\u547c\u3070\u308c\u308b\n            oldStatus = oldValue\n            newStatus = status\n\n            switch newStatus {\n            case .none:\n                buttonCancelled()\n            case .down:\n                buttonDown()\n            case .up:\n                buttonUpAction()\n            case .cancelled:\n                buttonCancelled()\n            }\n        }\n    }\n\n    convenience init(imageNamed: String!, buttonName: String!) {\n\n        let sprite  = SKSpriteNode(imageNamed: imageNamed)\n        let texture = sprite.texture\n        let size    = sprite.size\n\n        self.init(texture: texture, buttonName: buttonName, withString:nil, size: size)\n    }\n\n    convenience init(imageNamed: String!, buttonName: String!, withString: String!) {\n\n        let sprite  = SKSpriteNode(imageNamed: imageNamed)\n        let texture = sprite.texture\n        let size    = sprite.size\n\n        self.init(texture: texture, buttonName: buttonName, withString:withString, size: size)\n    }\n\n    init(texture: SKTexture!, buttonName: String!, withString: String!, size: CGSize) {\n\n        super.init(texture: texture, color: SKColor.clearColor(), size: size)\n\n        self.name       = buttonName\n        self.size       = size\n        self.status     = eButtonStatus.none\n\n        self.userInteractionEnabled = true\n\n        if withString {\n            // Display Text\n            labelActive = true\n            buttonLabel = SKLabelNode(fontNamed:\"Chalkduster\")\n            buttonLabel.text = withString\n            buttonLabel.fontSize = 12\n            buttonLabel.position = self.position\n            addChild(buttonLabel)\n        }\n\n    }\n\n    var delegate:CButtonDelegate?\n    var oldStatus: eButtonStatus = .none\n    var newStatus: eButtonStatus = .none\n    var actionStyle: eButtonActionStyle = .pop\n    var buttonLabel: SKLabelNode = SKLabelNode()\n    var labelActive: Bool = false\n\n    //\n    //**************************************************************************\n    #if os(iOS) // iOS SKScene Extensions\n    //**************************************************************************\n    //\n    override func touchesBegan(touches: NSSet, withEvent event: UIEvent) {\n        for touch: AnyObject in touches {\n            status = .down\n        }\n    }\n\n    // [ iOS ] : Touches Moved\n    override func touchesMoved(touches: NSSet, withEvent event: UIEvent) {\n        for touch: AnyObject in touches {\n            if containsPoint(touch.locationInNode(self.scene)) {\n                status = .down\n            } else {\n                status = .cancelled\n            }\n        }\n    }\n\n    // [ iOS ] : Touches Ended\n    override func touchesEnded(touches: NSSet, withEvent event: UIEvent) {\n        for touch: AnyObject in touches {\n            if !containsPoint(touch.locationInNode(self.scene)) {\n                status = .cancelled\n            } else {\n                status = .up\n            }\n        }\n    }\n\n    // [ iOS ] : Touches Cancelled\n    override func touchesCancelled(touches: NSSet, withEvent event: UIEvent) {\n        for touch: AnyObject in touches {\n            status = .cancelled\n        }\n    }\n\n    //\n    //**************************************************************************\n    #else   // OSX SKScene Extensions\n    //**************************************************************************\n    //\n    override func mouseDown(theEvent: NSEvent) {\n        status = .down\n    }\n\n    // [ OSX ] : Mouse Moved\n    override func mouseMoved(theEvent: NSEvent) {\n        if containsPoint(theEvent.locationInNode(self.scene)) {\n            status = .down\n        } else {\n            status = .cancelled\n        }\n    }\n\n    // [ OSX ] : Mouse Moved\n    override func mouseDragged(theEvent: NSEvent) {\n        if containsPoint(theEvent.locationInNode(self.scene)) {\n            status = .down\n        } else {\n            status = .cancelled\n        }\n    }\n\n    // [ OSX ] : Mouse Up\n    override func mouseUp(theEvent: NSEvent) {\n        if !containsPoint(theEvent.locationInNode(self.scene)) {\n            status = .cancelled\n        } else {\n            status = .up\n        }\n    }\n\n    #endif\n    //\n    //******************************************************************************\n    // SKScene Extension Results Called\n    //******************************************************************************\n    //\n\n    private func buttonDown() {\n        buttonColor(SKColor.redColor(), blend: 0.50)\n        cbuttonDown(self)\n        delegate?.cbuttonDown(self)\n    }\n\n    private func buttonUp() {\n        buttonColor(SKColor.clearColor(), blend: 0.0)\n        cbuttonUp(self)\n        delegate!.cbuttonUp(self)\n    }\n\n    private func buttonCancelled() {\n        buttonColor(SKColor.clearColor(), blend: 0.0)\n        cbuttonCancelled(self)\n        delegate?.cbuttonCancelled(self)\n    }\n\n    private func buttonColor(color: SKColor!, blend: CGFloat!) {\n        self.color = color\n        self.colorBlendFactor = blend\n        if labelActive {\n            buttonLabel.color = color\n            buttonLabel.colorBlendFactor = blend\n        }\n    }\n\n    private func buttonUpAction() {\n\n        var sequence:SKAction = SKAction.runBlock {self.buttonUp()}\n        if actionStyle == .pop {\n            // Pop Two Times\n            sequence = SKAction.sequence([\n                SKAction.scaleTo(1.2, duration:0.1),\n                SKAction.scaleTo(1.0, duration:0.1),\n                SKAction.scaleTo(1.2, duration:0.1),\n                SKAction.scaleTo(1.0, duration:0.1),\n                SKAction.runBlock {self.buttonUp()} ])\n        }\n        self.runAction(sequence)\n    }\n\n    // [ OSX/iOS ] : Button Down\n    func cbuttonDown(button: CButton) {\n    }\n\n    // [ OSX/iOS ] : Button Up\n    func cbuttonUp(button: CButton) {\n\n    }\n\n    // [ OSX/iOS ] : Button Cancelled\n    func cbuttonCancelled(button: CButton) {\n\n    }\n\n}\n\nprotocol CButtonDelegate {\n    func cbuttonDown(button: CButton)\n    func cbuttonUp(button: CButton)\n    func cbuttonCancelled(button: CButton)\n}\n\n\n\u305d\u3057\u3066\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u767b\u9332\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n\u4f7f\u7528\u4f8b\uff1aCSampleScene.swift\nimport SpriteKit\n\nclass CSampleScene: CScene, CButtonDelegate {\n\n    init(size: CGSize) {\n        super.init(size: size)\n\n    }\n\n    override func didMoveToView(view: SKView) {\n        /* Setup your scene here */\n\n        let centerPoint = CGPointMake(CGRectGetMidX(frame), CGRectGetMidY(frame))\n\n        var theSprite = CButton(imageNamed:\"buttonTest\", buttonName: \"testButton\")\n        theSprite.position = self.centerPoint\n        theSprite.delegate = self\n        addChild(theSprite)\n\n        // \u30d5\u30a9\u30f3\u30c8\u7a2e\u985e\u3084\u30b5\u30a4\u30ba\u5909\u66f4\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u51fa\u6765\u307e\u3059\u3002\n//      theSprite.buttonLabel.fontSize = 24\n//      theSprite.buttonLabel.fontName = \"AppleSDGothicNeo-Regular\"\n\n    }\n\n    // Delegate Calls\n    func cbuttonDown(button: CButton) {\n        println(\"cbuttonDown Hit!!: \\(button.newStatus)\")\n    }\n\n    func cbuttonUp(button: CButton) {\n        if button.name == \"testButton\" {\n            //\u30dc\u30bf\u30f3\u51e6\u7406\u3092\u884c\u3046\n        }\n    }\n\n    func cbuttonCancelled(button: CButton) {\n        println(\"cbuttonCancelled Hit!!: \\(button.newStatus)\")\n    }\n\n}\n\n\n##\u3010SKSpriteNode\u30dc\u30bf\u30f3\u3011\nSKSpriteNode\u3092\u4f7f\u3063\u3066\u3001iOS\u30fbOSX\u5bfe\u5fdc\u306eCButton\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\u3053\u308c\u306f\u30c7\u30ea\u30b1\u30fc\u30c8\u3068\u3057\u3066\u3082\u30b5\u30d6\u30af\u30e9\u30b9\u3068\u3057\u3066\u3082\u4f7f\u3048\u308b\u3088\u3046\u306b\u3082\u3044\u305f\u3057\u307e\u3057\u305f\u3002\n\n```swift:CButton.swift\nimport SpriteKit\n\n#if os(iOS)\n\timport UIKit\n#endif\n\nenum eButtonActionStyle: Int {\n\tcase none = 0\n\tcase pop\n\tcase count\n}\n\nenum eButtonStatus: Int {\n\tcase none\t= 0\n\tcase down\n\tcase up\n\tcase cancelled\n\n\tfunc value() -> Int {\n\t\tswitch self {\n\t\tcase .none:\n\t\t\treturn 0\n\t\tcase .down:\n\t\t\treturn 1\n\t\tcase .up:\n\t\t\treturn 2\n\t\tcase .cancelled:\n\t\t\treturn 3\n\t\t}\n\t}\n}\n\nclass CButton: SKSpriteNode {\n\n\tvar status: eButtonStatus = .none {\n\t\twillSet {\n\t\t\t// value \u304c\u30bb\u30c3\u30c8\u3059\u308b\u524d\u306b\u547c\u3070\u308c\u308b\n\t\t}\n\t\tdidSet {\n\t\t\t// value \u304c\u30bb\u30c3\u30c8\u3055\u308c\u305f\u76f4\u5f8c\u306b\u547c\u3070\u308c\u308b\n\t\t\toldStatus = oldValue\n\t\t\tnewStatus = status\n\t\t\t\n\t\t\tswitch newStatus {\n\t\t\tcase .none:\n\t\t\t\tbuttonCancelled()\n\t\t\tcase .down:\n\t\t\t\tbuttonDown()\n\t\t\tcase .up:\n\t\t\t\tbuttonUpAction()\n\t\t\tcase .cancelled:\n\t\t\t\tbuttonCancelled()\n\t\t\t}\n\t\t}\n\t}\n\n\tconvenience init(imageNamed: String!, buttonName: String!) {\n\t\t\n\t\tlet sprite\t= SKSpriteNode(imageNamed: imageNamed)\n\t\tlet texture = sprite.texture\n\t\tlet size\t= sprite.size\n\t\t\n\t\tself.init(texture: texture, buttonName: buttonName, withString:nil, size: size)\n\t}\n\n\tconvenience init(imageNamed: String!, buttonName: String!, withString: String!) {\n\t\t\n\t\tlet sprite\t= SKSpriteNode(imageNamed: imageNamed)\n\t\tlet texture = sprite.texture\n\t\tlet size\t= sprite.size\n\t\t\n\t\tself.init(texture: texture, buttonName: buttonName, withString:withString, size: size)\n\t}\n\n\tinit(texture: SKTexture!, buttonName: String!, withString: String!, size: CGSize) {\n\t\t\n\t\tsuper.init(texture: texture, color: SKColor.clearColor(), size: size)\n\t\t\n\t\tself.name\t\t= buttonName\n\t\tself.size\t\t= size\n\t\tself.status\t\t= eButtonStatus.none\n\t\t\n\t\tself.userInteractionEnabled = true\n\t\t\n\t\tif withString {\n\t\t\t// Display Text\n\t\t\tlabelActive = true\n\t\t\tbuttonLabel = SKLabelNode(fontNamed:\"Chalkduster\")\n\t\t\tbuttonLabel.text = withString\n\t\t\tbuttonLabel.fontSize = 12\n\t\t\tbuttonLabel.position = self.position\n\t\t\taddChild(buttonLabel)\n\t\t}\n\n\t}\n\t\n\tvar delegate:CButtonDelegate?\n\tvar oldStatus: eButtonStatus = .none\n\tvar newStatus: eButtonStatus = .none\n\tvar actionStyle: eButtonActionStyle = .pop\n\tvar buttonLabel: SKLabelNode = SKLabelNode()\n\tvar labelActive: Bool = false\n\n\t//\n\t//**************************************************************************\n\t#if os(iOS)\t// iOS SKScene Extensions\n\t//**************************************************************************\n\t//\n\toverride func touchesBegan(touches: NSSet, withEvent event: UIEvent) {\n\t\tfor touch: AnyObject in touches {\n\t\t\tstatus = .down\n\t\t}\n\t}\n\n\t// [ iOS ] : Touches Moved\n\toverride func touchesMoved(touches: NSSet, withEvent event: UIEvent) {\n\t\tfor touch: AnyObject in touches {\n\t\t\tif containsPoint(touch.locationInNode(self.scene)) {\n\t\t\t\tstatus = .down\n\t\t\t} else {\n\t\t\t\tstatus = .cancelled\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// [ iOS ] : Touches Ended\n\toverride func touchesEnded(touches: NSSet, withEvent event: UIEvent) {\n\t\tfor touch: AnyObject in touches {\n\t\t\tif !containsPoint(touch.locationInNode(self.scene)) {\n\t\t\t\tstatus = .cancelled\n\t\t\t} else {\n\t\t\t\tstatus = .up\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// [ iOS ] : Touches Cancelled\n\toverride func touchesCancelled(touches: NSSet, withEvent event: UIEvent) {\n\t\tfor touch: AnyObject in touches {\n\t\t\tstatus = .cancelled\n\t\t}\n\t}\n\n\t//\n\t//**************************************************************************\n\t#else\t// OSX SKScene Extensions\n\t//**************************************************************************\n\t//\n\toverride func mouseDown(theEvent: NSEvent) {\n\t\tstatus = .down\n\t}\n\t\n\t// [ OSX ] : Mouse Moved\n\toverride func mouseMoved(theEvent: NSEvent) {\n\t\tif containsPoint(theEvent.locationInNode(self.scene)) {\n\t\t\tstatus = .down\n\t\t} else {\n\t\t\tstatus = .cancelled\n\t\t}\n\t}\n\n\t// [ OSX ] : Mouse Moved\n\toverride func mouseDragged(theEvent: NSEvent) {\n\t\tif containsPoint(theEvent.locationInNode(self.scene)) {\n\t\t\tstatus = .down\n\t\t} else {\n\t\t\tstatus = .cancelled\n\t\t}\n\t}\n\n\t// [ OSX ] : Mouse Up\n\toverride func mouseUp(theEvent: NSEvent) {\n\t\tif !containsPoint(theEvent.locationInNode(self.scene)) {\n\t\t\tstatus = .cancelled\n\t\t} else {\n\t\t\tstatus = .up\n\t\t}\n\t}\n\n\t#endif\n\t//\n\t//******************************************************************************\n\t// SKScene Extension Results Called\n\t//******************************************************************************\n\t//\n\n\tprivate func buttonDown() {\n\t\tbuttonColor(SKColor.redColor(), blend: 0.50)\n\t\tcbuttonDown(self)\n\t\tdelegate?.cbuttonDown(self)\n\t}\n\t\n\tprivate func buttonUp() {\n\t\tbuttonColor(SKColor.clearColor(), blend: 0.0)\n\t\tcbuttonUp(self)\n\t\tdelegate!.cbuttonUp(self)\n\t}\n\n\tprivate func buttonCancelled() {\n\t\tbuttonColor(SKColor.clearColor(), blend: 0.0)\n\t\tcbuttonCancelled(self)\n\t\tdelegate?.cbuttonCancelled(self)\n\t}\n\n\tprivate func buttonColor(color: SKColor!, blend: CGFloat!) {\n\t\tself.color = color\n\t\tself.colorBlendFactor = blend\n\t\tif labelActive {\n\t\t\tbuttonLabel.color = color\n\t\t\tbuttonLabel.colorBlendFactor = blend\n\t\t}\n\t}\n\n\tprivate func buttonUpAction() {\n\t\t\n\t\tvar sequence:SKAction = SKAction.runBlock {self.buttonUp()}\n\t\tif actionStyle == .pop {\n\t\t\t// Pop Two Times\n\t\t\tsequence = SKAction.sequence([\n\t\t\t\tSKAction.scaleTo(1.2, duration:0.1),\n\t\t\t\tSKAction.scaleTo(1.0, duration:0.1),\n\t\t\t\tSKAction.scaleTo(1.2, duration:0.1),\n\t\t\t\tSKAction.scaleTo(1.0, duration:0.1),\n\t\t\t\tSKAction.runBlock {self.buttonUp()} ])\n\t\t}\n\t\tself.runAction(sequence)\n\t}\n\n\t// [ OSX/iOS ] : Button Down\n\tfunc cbuttonDown(button: CButton) {\n\t}\n\t\n\t// [ OSX/iOS ] : Button Up\n\tfunc cbuttonUp(button: CButton) {\n\t\t\n\t}\n\t\n\t// [ OSX/iOS ] : Button Cancelled\n\tfunc cbuttonCancelled(button: CButton) {\n\t\t\n\t}\n\n}\n\nprotocol CButtonDelegate {\n\tfunc cbuttonDown(button: CButton)\n\tfunc cbuttonUp(button: CButton)\n\tfunc cbuttonCancelled(button: CButton)\n}\n```\n\n\u305d\u3057\u3066\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u767b\u9332\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n```swift:\u4f7f\u7528\u4f8b\uff1aCSampleScene.swift\nimport SpriteKit\n\nclass CSampleScene: CScene, CButtonDelegate {\n\n\tinit(size: CGSize) {\n\t\tsuper.init(size: size)\n\n\t}\n\n\toverride func didMoveToView(view: SKView) {\n\t\t/* Setup your scene here */\n\n\t\tlet centerPoint = CGPointMake(CGRectGetMidX(frame), CGRectGetMidY(frame))\n\n\t\tvar theSprite = CButton(imageNamed:\"buttonTest\", buttonName: \"testButton\")\n\t\ttheSprite.position = self.centerPoint\n\t\ttheSprite.delegate = self\n\t\taddChild(theSprite)\n\n\t\t// \u30d5\u30a9\u30f3\u30c8\u7a2e\u985e\u3084\u30b5\u30a4\u30ba\u5909\u66f4\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u51fa\u6765\u307e\u3059\u3002\n//\t\ttheSprite.buttonLabel.fontSize = 24\n//\t\ttheSprite.buttonLabel.fontName = \"AppleSDGothicNeo-Regular\"\n\n\t}\n\n\t// Delegate Calls\n\tfunc cbuttonDown(button: CButton) {\n\t\tprintln(\"cbuttonDown Hit!!: \\(button.newStatus)\")\n\t}\n\n\tfunc cbuttonUp(button: CButton) {\n\t\tif button.name == \"testButton\" {\n\t\t\t//\u30dc\u30bf\u30f3\u51e6\u7406\u3092\u884c\u3046\n\t\t}\n\t}\n\n\tfunc cbuttonCancelled(button: CButton) {\n\t\tprintln(\"cbuttonCancelled Hit!!: \\(button.newStatus)\")\n\t}\n\n}\n```\n", "tags": ["SwiftBeta4", "SpriteKitBeta4"]}