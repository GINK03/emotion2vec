{"context": " More than 1 year has passed since last update.\u30bf\u30a4\u30c8\u30eb\u304c\u3044\u304d\u306a\u308a\u4f55\u304b\u306e\u6697\u53f7\u306b\u307f\u3048\u3066\u3057\u307e\u3063\u305f\u4eba\u304c\u3044\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u3053\u308c\u306f ICU \u306e Transliteration\uff08\u7ffb\u5b57\uff09\u3092\u4f7f\u3063\u3066\u30ab\u30bf\u30ab\u30ca\u3092\u3072\u3089\u304c\u306a\u306b\u7ffb\u5b57\u3057\u3066\u3055\u3089\u306b\u30ed\u30fc\u30de\u5b57\u306b\u7ffb\u5b57\u3057\u305f\u4e0a\u3067\u30c7\u30d5\u30e9\u30b0\u3055\u3093\u3089\u3057\u304f\u4e26\u3079\u66ff\u3048\u305f\u51e6\u7406\u3092\u884c\u3063\u305f\u5f8c\u306e\u3082\u306e\u3067\u3059\u3002\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30da\u30bf\u3063\u3068\u8cbc\u3063\u3064\u3051\u3066\u304a\u304d\u307e\u3059\u3002\u5b9f\u884c\u3059\u308b\u306b\u306f cmake \u3068 ICU \u304c\u5fc5\u8981\u3067\u3059\u3002OSX \u306a\u3089 macports \u3067\u4e21\u65b9\u5171\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u53ef\u80fd\u3067\u3059\u3002\nproject(transliterate)\ncmake_minimum_required(VERSION 2.8)\naux_source_directory(${CMAKE_CURRENT_SOURCE_DIR} SRC_LIST)\nadd_executable(${PROJECT_NAME} ${SRC_LIST})\nfind_library(ICU_DATA_LIBRARY icudata)\nfind_library(ICU_UC_LIBRARY icuuc)\nfind_library(ICU_I18N_LIBRARY icui18n)\nfind_library(ICU_IO_LIBRARY icuio)\nfind_path(ICU_INCLUDE_DIR unicode/unistr.h)\ntarget_link_libraries(${PROJECT_NAME} ${ICU_IO_LIBRARY} ${ICU_I18N_LIBRARY} ${ICU_UC_LIBRARY} ${ICU_DATA_LIBRARY})\ninclude_directories(${ICU_INCLUDE_DIR})\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3061\u3087\u3063\u3068\u9577\u304f\u3001\u66f8\u304d\u6368\u3066\u524d\u63d0\u3067\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002std::map \u304c\u30c4\u30ea\u30fc\u5f62\u5f0f\u3067\u69cb\u7bc9\u3055\u308c\u3066\u81ea\u52d5\u7684\u306b\u30bd\u30fc\u30c8\u3055\u308c\u308b\u4ed5\u69d8\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u30bd\u30fc\u30c8\u51e6\u7406\u306f\u7701\u3044\u3066\u3044\u307e\u3059\u3002\n#include <iostream>\n#include <map>\n#include <unicode/translit.h>\n#include <unicode/ustream.h>\n\nint main(int argc, char *argv[])\n{\n    if (argc > 1) {\n        /* construct UnicodeString from first argument and print it */\n        UnicodeString string(UnicodeString::fromUTF8(argv[1]));\n        std::cerr << string << std::endl;\n        /* transliate Katakana to Hiragana */\n        UErrorCode status = U_ZERO_ERROR;\n        Transliterator *k2h = Transliterator::createInstance(\"Katakana-Hiragana\", UTRANS_FORWARD, status);\n        k2h->transliterate(string);\n        std::cerr << string << std::endl;\n        /* transliate Hiragana to Roman (Latin) */\n        status = U_ZERO_ERROR;\n        Transliterator *h2r = Transliterator::createInstance(\"Hiragana-Latin\", UTRANS_FORWARD, status);\n        h2r->transliterate(string);\n        /* split UnicodeString into array of UChar */\n        typedef std::map<UChar, int> UCharMap;\n        UCharMap chars;\n        for (int i = 0, length = string.length(); i < length; i++) {\n            UChar c = string.charAt(i);\n            UCharMap::iterator it = chars.find(c);\n            if (it != chars.end()) {\n                it->second++;\n            }\n            else {\n                chars.insert(std::make_pair(c, 1));\n            }\n        }\n        /* sort and make char (downcast from UChar) upper */\n        UCharMap::const_iterator it = chars.begin();\n        while (it != chars.end()) {\n            std::cerr << char(toupper(it->first)) << it->second;\n            it++;\n        }\n        std::cerr << std::endl;\n    }\n    return 0;\n}\n\n\u7121\u4e8b\u306b\u30d3\u30eb\u30c9\u306b\u6210\u529f\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u7b2c\u4e00\u5f15\u6570\u306b\u5909\u63db\u3057\u305f\u3044\u30ab\u30bf\u30ab\u30ca\u6587\u5b57\u5217\u3092\u6e21\u3059\u3053\u3068\u3067\u6700\u7d42\u51fa\u529b\u304c\u30bf\u30a4\u30c8\u30eb\u306b\u3042\u308b\u3088\u3046\u306a\u5f62\u5f0f\u3067\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n./transliterate \u30a4\u30f3\u30bf\u30fc\u30ca\u30b7\u30e7\u30ca\u30eb\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c4\u30d5\u30a9\u30fc\u30e6\u30cb\u30b3\u30fc\u30c9\n# \u30a4\u30f3\u30bf\u30fc\u30ca\u30b7\u30e7\u30ca\u30eb\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c4\u30d5\u30a9\u30fc\u30e6\u30cb\u30b3\u30fc\u30c9\n# \u3044\u3093\u305f\u3042\u306a\u3057\u3087\u306a\u308b\u3053\u3093\u307d\u304a\u306d\u3093\u3064\u3075\u3049\u304a\u3086\u306b\u3053\u304a\u3069\n# A4D1E1F1H1I2K2N7O9P1R1S2T2U3Y1\n\n\u4f59\u8ac7\u3067\u3059\u304c\u3053\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u666e\u6bb5\u4f7f\u7528\u3057\u3066\u3044\u308b QtCreator 2.7 \u3092\u4f7f\u3063\u3066\u66f8\u3044\u3066\u3044\u307e\u3059\u3002C++ \u306f\u52ff\u8ad6\u3001\u5272\u3068\u6700\u8fd1 cmake \u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u88dc\u5b8c\u304c\u52b9\u304f\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u3067\u4fbf\u5229\u3067\u3059\u3002\n\u30bf\u30a4\u30c8\u30eb\u304c\u3044\u304d\u306a\u308a\u4f55\u304b\u306e\u6697\u53f7\u306b\u307f\u3048\u3066\u3057\u307e\u3063\u305f\u4eba\u304c\u3044\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u3053\u308c\u306f ICU \u306e Transliteration\uff08\u7ffb\u5b57\uff09\u3092\u4f7f\u3063\u3066\u30ab\u30bf\u30ab\u30ca\u3092\u3072\u3089\u304c\u306a\u306b\u7ffb\u5b57\u3057\u3066\u3055\u3089\u306b\u30ed\u30fc\u30de\u5b57\u306b\u7ffb\u5b57\u3057\u305f\u4e0a\u3067\u30c7\u30d5\u30e9\u30b0\u3055\u3093\u3089\u3057\u304f\u4e26\u3079\u66ff\u3048\u305f\u51e6\u7406\u3092\u884c\u3063\u305f\u5f8c\u306e\u3082\u306e\u3067\u3059\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30da\u30bf\u3063\u3068\u8cbc\u3063\u3064\u3051\u3066\u304a\u304d\u307e\u3059\u3002\u5b9f\u884c\u3059\u308b\u306b\u306f cmake \u3068 ICU \u304c\u5fc5\u8981\u3067\u3059\u3002OSX \u306a\u3089 macports \u3067\u4e21\u65b9\u5171\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u53ef\u80fd\u3067\u3059\u3002\n\n```cmake\nproject(transliterate)\ncmake_minimum_required(VERSION 2.8)\naux_source_directory(${CMAKE_CURRENT_SOURCE_DIR} SRC_LIST)\nadd_executable(${PROJECT_NAME} ${SRC_LIST})\nfind_library(ICU_DATA_LIBRARY icudata)\nfind_library(ICU_UC_LIBRARY icuuc)\nfind_library(ICU_I18N_LIBRARY icui18n)\nfind_library(ICU_IO_LIBRARY icuio)\nfind_path(ICU_INCLUDE_DIR unicode/unistr.h)\ntarget_link_libraries(${PROJECT_NAME} ${ICU_IO_LIBRARY} ${ICU_I18N_LIBRARY} ${ICU_UC_LIBRARY} ${ICU_DATA_LIBRARY})\ninclude_directories(${ICU_INCLUDE_DIR})\n```\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3061\u3087\u3063\u3068\u9577\u304f\u3001\u66f8\u304d\u6368\u3066\u524d\u63d0\u3067\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002std::map \u304c\u30c4\u30ea\u30fc\u5f62\u5f0f\u3067\u69cb\u7bc9\u3055\u308c\u3066\u81ea\u52d5\u7684\u306b\u30bd\u30fc\u30c8\u3055\u308c\u308b\u4ed5\u69d8\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u30bd\u30fc\u30c8\u51e6\u7406\u306f\u7701\u3044\u3066\u3044\u307e\u3059\u3002\n\n```cpp\n#include <iostream>\n#include <map>\n#include <unicode/translit.h>\n#include <unicode/ustream.h>\n\nint main(int argc, char *argv[])\n{\n    if (argc > 1) {\n        /* construct UnicodeString from first argument and print it */\n        UnicodeString string(UnicodeString::fromUTF8(argv[1]));\n        std::cerr << string << std::endl;\n        /* transliate Katakana to Hiragana */\n        UErrorCode status = U_ZERO_ERROR;\n        Transliterator *k2h = Transliterator::createInstance(\"Katakana-Hiragana\", UTRANS_FORWARD, status);\n        k2h->transliterate(string);\n        std::cerr << string << std::endl;\n        /* transliate Hiragana to Roman (Latin) */\n        status = U_ZERO_ERROR;\n        Transliterator *h2r = Transliterator::createInstance(\"Hiragana-Latin\", UTRANS_FORWARD, status);\n        h2r->transliterate(string);\n        /* split UnicodeString into array of UChar */\n        typedef std::map<UChar, int> UCharMap;\n        UCharMap chars;\n        for (int i = 0, length = string.length(); i < length; i++) {\n            UChar c = string.charAt(i);\n            UCharMap::iterator it = chars.find(c);\n            if (it != chars.end()) {\n                it->second++;\n            }\n            else {\n                chars.insert(std::make_pair(c, 1));\n            }\n        }\n        /* sort and make char (downcast from UChar) upper */\n        UCharMap::const_iterator it = chars.begin();\n        while (it != chars.end()) {\n            std::cerr << char(toupper(it->first)) << it->second;\n            it++;\n        }\n        std::cerr << std::endl;\n    }\n    return 0;\n}\n```\n\n\u7121\u4e8b\u306b\u30d3\u30eb\u30c9\u306b\u6210\u529f\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u7b2c\u4e00\u5f15\u6570\u306b\u5909\u63db\u3057\u305f\u3044\u30ab\u30bf\u30ab\u30ca\u6587\u5b57\u5217\u3092\u6e21\u3059\u3053\u3068\u3067\u6700\u7d42\u51fa\u529b\u304c\u30bf\u30a4\u30c8\u30eb\u306b\u3042\u308b\u3088\u3046\u306a\u5f62\u5f0f\u3067\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\n```bash\n./transliterate \u30a4\u30f3\u30bf\u30fc\u30ca\u30b7\u30e7\u30ca\u30eb\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c4\u30d5\u30a9\u30fc\u30e6\u30cb\u30b3\u30fc\u30c9\n# \u30a4\u30f3\u30bf\u30fc\u30ca\u30b7\u30e7\u30ca\u30eb\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c4\u30d5\u30a9\u30fc\u30e6\u30cb\u30b3\u30fc\u30c9\n# \u3044\u3093\u305f\u3042\u306a\u3057\u3087\u306a\u308b\u3053\u3093\u307d\u304a\u306d\u3093\u3064\u3075\u3049\u304a\u3086\u306b\u3053\u304a\u3069\n# A4D1E1F1H1I2K2N7O9P1R1S2T2U3Y1\n```\n\n\u4f59\u8ac7\u3067\u3059\u304c\u3053\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u666e\u6bb5\u4f7f\u7528\u3057\u3066\u3044\u308b QtCreator 2.7 \u3092\u4f7f\u3063\u3066\u66f8\u3044\u3066\u3044\u307e\u3059\u3002C++ \u306f\u52ff\u8ad6\u3001\u5272\u3068\u6700\u8fd1 cmake \u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u88dc\u5b8c\u304c\u52b9\u304f\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u3067\u4fbf\u5229\u3067\u3059\u3002\n", "tags": ["C++", "ICU", "CMake"]}