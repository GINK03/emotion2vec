{"context": " More than 1 year has passed since last update.Reactive Extensions \u3044\u3044\u3088 Reactive Extensions\u3002\nReactive Extensions \u3092 Java \u306b\u79fb\u690d\u3057\u305f\u306e\u304c reactive4java\u3002\n.NET \u3058\u3083\u306a\u3044\u306e\u3067 Linq \u3084\u30e9\u30e0\u30c0\u5f0f\u306f\u4f7f\u3048\u306a\u3044(\u3044\u3084\u30b9\u30af\u30ea\u30d7\u30c8\u3068\u3057\u3066\u306a\u3089\u4f7f\u3048\u308b)\u3051\u3069\u3001\u4e26\u5217\u51e6\u7406\u3092\u76f4\u5217\u306b\u66f8\u3051\u308b\u30e8\u30ed\u30b3\u30d3\u306f\u5473\u308f\u3048\u307e\u3059\u3002\nAndroid \u3067\u3082\u4f7f\u3048\u307e\u3059\u3002\nAndroid \u306e\u7aef\u672b\u306e\u65b9\u4f4d\u3092\u901a\u77e5\u3059\u308b\u51e6\u7406\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f(\u4ed5\u4e8b\u3067\u5fc5\u8981\u3060\u3063\u305f\u306e\u3067)\u3002\n\nSensorFunctions.java\nimport hu.akarnokd.reactive4java.base.Func1;\nimport hu.akarnokd.reactive4java.base.Functions;\nimport hu.akarnokd.reactive4java.reactive.Observable;\nimport hu.akarnokd.reactive4java.reactive.Observer;\nimport hu.akarnokd.reactive4java.reactive.Reactive;\n\npublic final class SensorFunctions {\n\n    /**\n     * \u7aef\u672b\u306e\u78ba\u5ea6\u3092 Observable \u3068\u3057\u3066\u53d6\u5f97\u3059\u308b\n     * \n     * \u203b\u7aef\u672b\u306f\u7e26\u5411\u304d\u524d\u63d0\u3067\u3059\u3002\u6a2a\u5411\u304d\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n     * port from sato-c / sensorcheck https://github.com/sato-c/sensorcheck\n     */\n    static public Observable<Float> getRotationAsObservable(final Context context, final int rate) {\n        return Reactive.createWithCloseable(new Func1<Observer<? super Float>, Closeable>() {\n\n            @Override\n            public Closeable invoke(final Observer<? super Float> observer) {\n                final AtomicBoolean _stop = new AtomicBoolean(false); // \u505c\u6b62\u30d5\u30e9\u30b0\n\n                final SensorManager accelMan = (SensorManager)context.getSystemService(Context.SENSOR_SERVICE);\n                final SensorManager magMan   = (SensorManager)context.getSystemService(Context.SENSOR_SERVICE);\n\n                final SensorEventListener listener = new SensorEventListener() {\n                    final static private int _MATRIX_SIZE = 16;\n                    final static private int _XYZ_AXIS = 3;\n                    private boolean _sensorReady = false;\n                    private float[] _R = new float[_MATRIX_SIZE];\n                    private float[] _I = new float[_MATRIX_SIZE];\n                    private float[] _magnetic = null;\n                    private float[] _accel = null;\n                    private float[] _orient = new float[_XYZ_AXIS];\n\n                    /*\n                     *  http://developer.android.com/reference/android/hardware/SensorEvent.html#values\n                     */\n                    @Override\n                    public void onSensorChanged(SensorEvent event) {\n                        // \u505c\u6b62\u3055\u308c\u3066\u3044\u305f\u3089\u8aad\u307f\u98db\u3070\u3059\n                        if (_stop.get()) {\n                            return;\n                        }\n\n                        switch ( event.sensor.getType() ) {\n                        case    Sensor.TYPE_ACCELEROMETER:\n                            _accel = event.values.clone();\n                            break;\n                        case    Sensor.TYPE_MAGNETIC_FIELD:\n                            _sensorReady = true;\n                            _magnetic = event.values.clone();\n                            break;\n                        }\n\n                        if ( _sensorReady && _magnetic != null && _accel != null ) {\n                            _sensorReady = false;\n\n                            SensorManager.getRotationMatrix(_R, _I, _accel, _magnetic);\n                            SensorManager.getOrientation(_R, _orient);\n\n                            if ( _orient[0] < 0 ) {\n                                _orient[0] = (float) (Math.toDegrees(_orient[0]) + 360.0f);\n                            } else {\n                                _orient[0] = (float) (Math.toDegrees(_orient[0]));\n                            }\n\n                            // \u767a\u706b\n                            observer.next(_orient[0]);\n                        }\n                    }\n\n                    @Override\n                    public void onAccuracyChanged(Sensor sensor, int accuracy) {\n                    }\n                };\n\n                Sensor accelSensor = getSensorOnce(accelMan, Sensor.TYPE_ACCELEROMETER);\n                if (accelSensor == null) {\n                    observer.error(new InvalidParameterException(\"Sensor.TYPE_ACCELEROMETER not found.\"));\n                    return Functions.EMPTY_CLOSEABLE;\n                }\n\n                Sensor magSensor = getSensorOnce(accelMan, Sensor.TYPE_MAGNETIC_FIELD);\n                if (magSensor == null) {\n                    observer.error(new InvalidParameterException(\"Sensor.TYPE_MAGNETIC_FIELD not found.\"));\n                    return Functions.EMPTY_CLOSEABLE;\n                }\n\n                accelMan.registerListener(listener, accelSensor, rate);\n                magMan.registerListener(listener, magSensor, rate);\n\n                return new Closeable() {\n                    @Override\n                    public void close() throws IOException {\n                        // \u53d7\u4fe1\u306f\u3059\u3050\u306b\u6b62\u307e\u3089\u306a\u3044\u306e\u3067\u30d5\u30e9\u30b0\u3067\u8aad\u307f\u98db\u3070\u3059\n                        if (_stop.get()) {\n                            return;\n                        }\n                        _stop.set(true);\n\n                        magMan.unregisterListener(listener);\n                        accelMan.unregisterListener(listener);\n                    }\n                };\n            }\n\n            private Sensor getSensorOnce(SensorManager sensorMan, int sensorType) {\n                List<Sensor> sensors = sensorMan.getSensorList(sensorType);\n                if (sensors.size() == 0) {\n                    return null;\n                }\n\n                return sensors.get(0);\n            }\n        });\n    }\n}\n\n\n\u4f7f\u3046\u307b\u3046\u306f\u3053\u3093\u306a\u611f\u3058\u3002\nCloseable closer = \n    SensorFunctions.getRotationAsObservable(\n        context, SensorManager.SENSOR_DELAY_NORMAL))\n.register(new Observer<Float>() { // Listen \u958b\u59cb\n    @Override\n    public void next(Float value) {\n        // \u89d2\u5ea6\u304c\u5909\u66f4\u3055\u308c\u308b\u3068\u547c\u3070\u308c\u308b\n        Log.d(TAG, \"next() called. - \" + value);\n    }\n\n    @Override\n    public void finish() {\n        // \u7d42\u4e86(Closeable.Close) \u3059\u308b\u3068\u547c\u3070\u308c\u308b\n        Log.d(TAG, \"finish() called.\");\n    }\n\n    @Override\n    public void error(Throwable err) {\n        // \u306a\u3093\u304b\u30a8\u30e9\u30fc\n        Log.e(TAG, \"error() called.\", err);\n    }\n});\n\nThread.sleep(3000); // 3\u79d2\u5f85\u3063\u3066\n\ncloser.Close(); // Listen \u7d42\u4e86    \n\n.register() \u3059\u308b\u3068\u3001\u89d2\u5ea6\u304c\u5909\u308f\u308b\u5ea6\u306b\u3001 next() \u304c\u547c\u3070\u308c\u3001\u89d2\u5ea6\u304c\u901a\u77e5\u3055\u308c\u307e\u3059\u3002\n\uff08\u51e6\u7406\u81ea\u4f53\u306f\u975e\u540c\u671f\u3067\u884c\u308f\u308c\u308b\u306e\u3067\u3001\u4e0a\u306e\u4f8b\u3060\u3068 Sleep \u3092\u631f\u307e\u306a\u3044\u3068\u3059\u3050\u306b Listen \u505c\u6b62\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\uff09\n\u3053\u308c\u5b9f\u969b\u306b\u5b9f\u884c\u3059\u308b\u3068\u3001\u3059\u3054\u3044\u52e2\u3044\u3067 next \u304c\u547c\u3070\u308c\u3066\u5927\u5909\u306a\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u308c\u3058\u3083\u30c7\u30fc\u30bf\u591a\u3059\u304e\u308b\u3088\u3049\u30fb\u30fb\u30fb\u305d\u3093\u306a\u6642\u3082 Reactive Extensions \u306f\u4fbf\u5229\u3002\n\u3053\u3046\u3057\u307e\u3059\u3002\nCloseable closer = \nObservableBuilder.from( // \u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u3067\u304d\u308b\u304a\u307e\u3058\u306a\u3044\n    SensorFunctions.getRotationAsObservable(\n        context, SensorManager.SENSOR_DELAY_NORMAL)))\n.sample(1, TimeUnit.SECONDS) // 1\u79d2\u7f6e\u304d\u306e\u6700\u65b0\u5024\u306b\u30d5\u30a3\u30eb\u30bf\n.register(new Observer<Float>() { // Listen \u958b\u59cb\n    @Override\n    public void next(Float value) {\n        // \u89d2\u5ea6\u304c\u5909\u66f4\u3055\u308c\u308b\u3068\u547c\u3070\u308c\u308b\n        Log.d(TAG, \"next() called. - \" + value);\n    }\n\n    @Override\n    public void finish() {\n        // \u7d42\u4e86(Closeable.Close) \u3059\u308b\u3068\u547c\u3070\u308c\u308b\n        Log.d(TAG, \"finish() called.\");\n    }\n\n    @Override\n    public void error(Throwable err) {\n        // \u306a\u3093\u304b\u30a8\u30e9\u30fc\n        Log.e(TAG, \"error() called.\", err);\n    }\n});\n\nThread.sleep(3000); // 3\u79d2\u5f85\u3063\u3066\n\ncloser.Close(); // Listen \u7d42\u4e86    \n\n\u3059\u3070\u3089\u3057\u3044\uff01 .sample(1, TimeUnit.SECONDS) \u3092\u631f\u3080\u3060\u3051\u3067\u3001\u300c\uff11\u79d2\u9593\u9694\u3067\u306e\u53d6\u5f97\u300d\u306b\u7f6e\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4ed6\u306b\u3082\u3044\u308d\u3044\u308d\u4fbf\u5229\u306a\u6a5f\u80fd\u304c\u3042\u308b reactive4java \u3067\u3059\u304c\u3001\u3068\u308a\u307e\u3053\u3093\u306a\u3082\u3093\u3067\u3002\n\n\u8ffd\u8a18 9.27\n\u5b9f\u306f\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3001Cold \u3067\u3057\u305f\u30fc\u3002\u3068\u3044\u3046\u308f\u3051\u3067\u3001Hot \u306b\u3064\u3044\u3066\u306e\u8a18\u4e8b\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n* Cold \u3092 Hot \u306b\u3067\u304d\u308b\u3002\u305d\u3046\u3001Publish \u306a\u3089\u306d\u3002 - Qiita\n\n\u53c2\u8003\n\n\nReactive Extensions\u3067\u975e\u540c\u671f\u51e6\u7406\u3092\u7c21\u5358\u306b - Rx \u306e\u4e00\u756a\u308f\u304b\u308a\u3084\u3059\u3044\u30b9\u30e9\u30a4\u30c9\u3060\u3068\u601d\u3044\u307e\u3059\uff01\nneue cc - Rx\nReactive Extensions - \u304b\u305a\u304d\u306eBlog@Hatena\nreactive4java\nTYPE_ORIENTATION\u3092\u4f7f\u308f\u305a\u306b\u65b9\u4f4d\u89d2\u3092\u53d6\u5f97 - \u30d7\u30ed\u30b0\u30e9\u30de\u30fc's\u30da\u30a4\u30b8\n\nsato-c / sensorcheck - \u65b9\u4f4d\u3092\u53d6\u5f97\u3059\u308b\u51e6\u7406\u3092\u79fb\u690d\u3055\u305b\u3066\u9802\u304d\u307e\u3057\u305f\n\n\nReactive Extensions \u3044\u3044\u3088 Reactive Extensions\u3002\nReactive Extensions \u3092 Java \u306b\u79fb\u690d\u3057\u305f\u306e\u304c [reactive4java](http://code.google.com/p/reactive4java/)\u3002\n.NET \u3058\u3083\u306a\u3044\u306e\u3067 Linq \u3084\u30e9\u30e0\u30c0\u5f0f\u306f\u4f7f\u3048\u306a\u3044(\u3044\u3084\u30b9\u30af\u30ea\u30d7\u30c8\u3068\u3057\u3066\u306a\u3089\u4f7f\u3048\u308b)\u3051\u3069\u3001\u4e26\u5217\u51e6\u7406\u3092\u76f4\u5217\u306b\u66f8\u3051\u308b\u30e8\u30ed\u30b3\u30d3\u306f\u5473\u308f\u3048\u307e\u3059\u3002\n\nAndroid \u3067\u3082\u4f7f\u3048\u307e\u3059\u3002\nAndroid \u306e\u7aef\u672b\u306e\u65b9\u4f4d\u3092\u901a\u77e5\u3059\u308b\u51e6\u7406\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f(\u4ed5\u4e8b\u3067\u5fc5\u8981\u3060\u3063\u305f\u306e\u3067)\u3002\n\n```java:SensorFunctions.java\nimport hu.akarnokd.reactive4java.base.Func1;\nimport hu.akarnokd.reactive4java.base.Functions;\nimport hu.akarnokd.reactive4java.reactive.Observable;\nimport hu.akarnokd.reactive4java.reactive.Observer;\nimport hu.akarnokd.reactive4java.reactive.Reactive;\n\npublic final class SensorFunctions {\n\n\t/**\n\t * \u7aef\u672b\u306e\u78ba\u5ea6\u3092 Observable \u3068\u3057\u3066\u53d6\u5f97\u3059\u308b\n\t * \n\t * \u203b\u7aef\u672b\u306f\u7e26\u5411\u304d\u524d\u63d0\u3067\u3059\u3002\u6a2a\u5411\u304d\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\t * port from sato-c / sensorcheck https://github.com/sato-c/sensorcheck\n\t */\n\tstatic public Observable<Float> getRotationAsObservable(final Context context, final int rate) {\n\t\treturn Reactive.createWithCloseable(new Func1<Observer<? super Float>, Closeable>() {\n\n\t\t\t@Override\n\t\t\tpublic Closeable invoke(final Observer<? super Float> observer) {\n\t    \t\tfinal AtomicBoolean _stop = new AtomicBoolean(false); // \u505c\u6b62\u30d5\u30e9\u30b0\n\t\t\t\t\n\t\t\t\tfinal SensorManager accelMan = (SensorManager)context.getSystemService(Context.SENSOR_SERVICE);\n\t\t\t\tfinal SensorManager magMan   = (SensorManager)context.getSystemService(Context.SENSOR_SERVICE);\n\n\t\t    \tfinal SensorEventListener listener = new SensorEventListener() {\n\t\t    \t\tfinal static private int _MATRIX_SIZE = 16;\n\t\t    \t\tfinal static private int _XYZ_AXIS = 3;\n\t\t    \t\tprivate boolean _sensorReady = false;\n\t\t    \t\tprivate float[] _R = new float[_MATRIX_SIZE];\n\t\t    \t\tprivate float[] _I = new float[_MATRIX_SIZE];\n\t\t    \t\tprivate float[] _magnetic = null;\n\t\t    \t\tprivate float[] _accel = null;\n\t\t    \t\tprivate float[] _orient = new float[_XYZ_AXIS];\n\t\t    \t\t\n\t\t\t\t\t/*\n\t\t\t\t\t * \thttp://developer.android.com/reference/android/hardware/SensorEvent.html#values\n\t\t\t\t\t */\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onSensorChanged(SensorEvent event) {\n\t\t\t\t\t\t// \u505c\u6b62\u3055\u308c\u3066\u3044\u305f\u3089\u8aad\u307f\u98db\u3070\u3059\n\t\t\t\t\t\tif (_stop.get()) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tswitch ( event.sensor.getType() ) {\n\t\t\t\t\t\tcase\tSensor.TYPE_ACCELEROMETER:\n\t\t\t\t\t\t\t_accel = event.values.clone();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase\tSensor.TYPE_MAGNETIC_FIELD:\n\t\t\t\t\t\t\t_sensorReady = true;\n\t\t\t\t\t\t\t_magnetic = event.values.clone();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif ( _sensorReady && _magnetic != null && _accel != null ) {\n\t\t\t\t\t\t\t_sensorReady = false;\n\t\t\t\t\t\t\t\n\t\t\t\t\t        SensorManager.getRotationMatrix(_R, _I, _accel, _magnetic);\n\t\t\t\t\t        SensorManager.getOrientation(_R, _orient);\n\t\n\t\t\t\t\t        if ( _orient[0] < 0 ) {\n\t\t\t\t\t        \t_orient[0] = (float) (Math.toDegrees(_orient[0]) + 360.0f);\n\t\t\t\t\t        } else {\n\t\t\t\t\t        \t_orient[0] = (float) (Math.toDegrees(_orient[0]));\n\t\t\t\t\t        }\n\t\t\t\t\t        \n\t\t\t\t\t        // \u767a\u706b\n\t\t\t\t\t        observer.next(_orient[0]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onAccuracyChanged(Sensor sensor, int accuracy) {\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t    \t\n\t\t\t\tSensor accelSensor = getSensorOnce(accelMan, Sensor.TYPE_ACCELEROMETER);\n\t\t\t\tif (accelSensor == null) {\n\t\t\t\t\tobserver.error(new InvalidParameterException(\"Sensor.TYPE_ACCELEROMETER not found.\"));\n\t\t\t\t\treturn Functions.EMPTY_CLOSEABLE;\n\t\t\t\t}\n\n\t\t\t\tSensor magSensor = getSensorOnce(accelMan, Sensor.TYPE_MAGNETIC_FIELD);\n\t\t\t\tif (magSensor == null) {\n\t\t\t\t\tobserver.error(new InvalidParameterException(\"Sensor.TYPE_MAGNETIC_FIELD not found.\"));\n\t\t\t\t\treturn Functions.EMPTY_CLOSEABLE;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\taccelMan.registerListener(listener, accelSensor, rate);\n\t\t\t\tmagMan.registerListener(listener, magSensor, rate);\n\t\t\t\t\n\t\t\t\treturn new Closeable() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void close() throws IOException {\n\t\t\t\t\t\t// \u53d7\u4fe1\u306f\u3059\u3050\u306b\u6b62\u307e\u3089\u306a\u3044\u306e\u3067\u30d5\u30e9\u30b0\u3067\u8aad\u307f\u98db\u3070\u3059\n\t\t\t\t\t\tif (_stop.get()) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_stop.set(true);\n\t\t\t\t\t\t\n\t\t\t\t\t\tmagMan.unregisterListener(listener);\n\t\t\t\t\t\taccelMan.unregisterListener(listener);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t\t\n\t\t\tprivate Sensor getSensorOnce(SensorManager sensorMan, int sensorType) {\n\t\t    \tList<Sensor> sensors = sensorMan.getSensorList(sensorType);\n\t\t    \tif (sensors.size() == 0) {\n\t\t    \t\treturn null;\n\t\t    \t}\n\t\t    \t\n\t\t    \treturn sensors.get(0);\n\t\t\t}\n\t\t});\n\t}\n}\n```\n\n\u4f7f\u3046\u307b\u3046\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\n```java:\nCloseable closer = \n\tSensorFunctions.getRotationAsObservable(\n\t\tcontext, SensorManager.SENSOR_DELAY_NORMAL))\n.register(new Observer<Float>() { // Listen \u958b\u59cb\n\t@Override\n\tpublic void next(Float value) {\n\t\t// \u89d2\u5ea6\u304c\u5909\u66f4\u3055\u308c\u308b\u3068\u547c\u3070\u308c\u308b\n\t\tLog.d(TAG, \"next() called. - \" + value);\n\t}\n\n\t@Override\n\tpublic void finish() {\n\t\t// \u7d42\u4e86(Closeable.Close) \u3059\u308b\u3068\u547c\u3070\u308c\u308b\n\t\tLog.d(TAG, \"finish() called.\");\n\t}\n\n\t@Override\n\tpublic void error(Throwable err) {\n\t\t// \u306a\u3093\u304b\u30a8\u30e9\u30fc\n\t\tLog.e(TAG, \"error() called.\", err);\n\t}\n});\n\nThread.sleep(3000); // 3\u79d2\u5f85\u3063\u3066\n\ncloser.Close(); // Listen \u7d42\u4e86\t\n```\n\n```.register()``` \u3059\u308b\u3068\u3001\u89d2\u5ea6\u304c\u5909\u308f\u308b\u5ea6\u306b\u3001 ```next()``` \u304c\u547c\u3070\u308c\u3001\u89d2\u5ea6\u304c\u901a\u77e5\u3055\u308c\u307e\u3059\u3002\n\uff08\u51e6\u7406\u81ea\u4f53\u306f\u975e\u540c\u671f\u3067\u884c\u308f\u308c\u308b\u306e\u3067\u3001\u4e0a\u306e\u4f8b\u3060\u3068 Sleep \u3092\u631f\u307e\u306a\u3044\u3068\u3059\u3050\u306b Listen \u505c\u6b62\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\uff09\n\n\u3053\u308c\u5b9f\u969b\u306b\u5b9f\u884c\u3059\u308b\u3068\u3001\u3059\u3054\u3044\u52e2\u3044\u3067 next \u304c\u547c\u3070\u308c\u3066\u5927\u5909\u306a\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3053\u308c\u3058\u3083\u30c7\u30fc\u30bf\u591a\u3059\u304e\u308b\u3088\u3049\u30fb\u30fb\u30fb\u305d\u3093\u306a\u6642\u3082 Reactive Extensions \u306f\u4fbf\u5229\u3002\n\n\u3053\u3046\u3057\u307e\u3059\u3002\n\n```java:\nCloseable closer = \nObservableBuilder.from( // \u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u3067\u304d\u308b\u304a\u307e\u3058\u306a\u3044\n\tSensorFunctions.getRotationAsObservable(\n\t\tcontext, SensorManager.SENSOR_DELAY_NORMAL)))\n.sample(1, TimeUnit.SECONDS) // 1\u79d2\u7f6e\u304d\u306e\u6700\u65b0\u5024\u306b\u30d5\u30a3\u30eb\u30bf\n.register(new Observer<Float>() { // Listen \u958b\u59cb\n\t@Override\n\tpublic void next(Float value) {\n\t\t// \u89d2\u5ea6\u304c\u5909\u66f4\u3055\u308c\u308b\u3068\u547c\u3070\u308c\u308b\n\t\tLog.d(TAG, \"next() called. - \" + value);\n\t}\n\n\t@Override\n\tpublic void finish() {\n\t\t// \u7d42\u4e86(Closeable.Close) \u3059\u308b\u3068\u547c\u3070\u308c\u308b\n\t\tLog.d(TAG, \"finish() called.\");\n\t}\n\n\t@Override\n\tpublic void error(Throwable err) {\n\t\t// \u306a\u3093\u304b\u30a8\u30e9\u30fc\n\t\tLog.e(TAG, \"error() called.\", err);\n\t}\n});\n\nThread.sleep(3000); // 3\u79d2\u5f85\u3063\u3066\n\ncloser.Close(); // Listen \u7d42\u4e86\t\n```\n\n\u3059\u3070\u3089\u3057\u3044\uff01 ```.sample(1, TimeUnit.SECONDS)``` \u3092\u631f\u3080\u3060\u3051\u3067\u3001\u300c\uff11\u79d2\u9593\u9694\u3067\u306e\u53d6\u5f97\u300d\u306b\u7f6e\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u4ed6\u306b\u3082\u3044\u308d\u3044\u308d\u4fbf\u5229\u306a\u6a5f\u80fd\u304c\u3042\u308b reactive4java \u3067\u3059\u304c\u3001\u3068\u308a\u307e\u3053\u3093\u306a\u3082\u3093\u3067\u3002\n\n##\u8ffd\u8a18 9.27\n\u5b9f\u306f\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3001Cold \u3067\u3057\u305f\u30fc\u3002\u3068\u3044\u3046\u308f\u3051\u3067\u3001Hot \u306b\u3064\u3044\u3066\u306e\u8a18\u4e8b\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n* [Cold \u3092 Hot \u306b\u3067\u304d\u308b\u3002\u305d\u3046\u3001Publish \u306a\u3089\u306d\u3002 - Qiita](http://qiita.com/items/3a7bda9d0fdcb9248800)\n\n##\u53c2\u8003\n* [Reactive Extensions\u3067\u975e\u540c\u671f\u51e6\u7406\u3092\u7c21\u5358\u306b](http://www.slideshare.net/neuecc/reactive-extensions-8049041) - Rx \u306e\u4e00\u756a\u308f\u304b\u308a\u3084\u3059\u3044\u30b9\u30e9\u30a4\u30c9\u3060\u3068\u601d\u3044\u307e\u3059\uff01\n* [neue cc - Rx](http://neue.cc/category/programming/rx)\n* [Reactive Extensions - \u304b\u305a\u304d\u306eBlog@Hatena](http://d.hatena.ne.jp/okazuki/searchdiary?word=%2A%5BReactive%20Extensions%5D)\n* [reactive4java](http://code.google.com/p/reactive4java/)\n* [TYPE_ORIENTATION\u3092\u4f7f\u308f\u305a\u306b\u65b9\u4f4d\u89d2\u3092\u53d6\u5f97 - \u30d7\u30ed\u30b0\u30e9\u30de\u30fc's\u30da\u30a4\u30b8](http://kamoland.com/wiki/wiki.cgi?TYPE_ORIENTATION%A4%F2%BB%C8%A4%EF%A4%BA%A4%CB%CA%FD%B0%CC%B3%D1%A4%F2%BC%E8%C6%C0)\n* [sato-c / sensorcheck](https://github.com/sato-c/sensorcheck) - \u65b9\u4f4d\u3092\u53d6\u5f97\u3059\u308b\u51e6\u7406\u3092\u79fb\u690d\u3055\u305b\u3066\u9802\u304d\u307e\u3057\u305f", "tags": ["Android", "reactive4java0.96.3", "Java", "ReactiveExtensions"]}