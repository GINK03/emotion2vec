{"context": " More than 1 year has passed since last update.\n\n\u4f55\u304c\u3057\u305f\u304b\u3063\u305f\u304b\n\u9069\u5f53\u306a\u30b9\u30c8\u30ea\u30fc\u30e0\u304c\u5410\u304f\u4f8b\u5916\u3092\u96c6\u3081\u305f\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u62fe\u3063\u3066\u307f\u305f\u304f\u306a\u3063\u305f\u3002\n\u4f8b\u3048\u3070\u3001\u5076\u6570\u3092\u305d\u306e\u307e\u307e\u901a\u3057\u3066\u3001\u5947\u6570\u3092\u5165\u308c\u308b\u3068\u30a8\u30e9\u30fc\u3092\u5410\u304fIO<int>\u304c\u3042\u3063\u3066\u3001\npublic class EvenReceiver : IObservable<int>\n{\n    private Subject<int> subject = new Subject<int>();\n    public IDisposable Subscribe(IObserver<int> observer)\n    {\n        var normal = subject\n            .Where(x => x % 2 == 0)\n            .Subscribe(x => observer.OnNext(x));\n        var error = subject\n            .Where(x => x % 2 != 0)\n            .Subscribe(x => observer.OnError(new ArgumentException(\"Argument must be even.\")));\n        return Disposable.Create(() => { normal.Dispose(); error.Dispose(); });\n    }\n\n    public void Receive(int x)\n    {\n        subject.OnNext(x);\n    }\n}\n\n\u3053\u3046\u66f8\u3044\u305f\u3089\nEvenReceiver rcv = new EvenReceiver();\nvar success = rcv.Retry();\nvar failure = rcv.Failure();\n\nsuccess.Subscribe(Console.WriteLine);\nfailure.Subscribe(Console.WriteLine);\n\nrcv.Receive(0);\nrcv.Receive(1);\nrcv.Receive(2);\nrcv.Receive(3);\nrcv.Receive(4);\nrcv.Receive(5);\n\n\u3053\u3046\u306a\u3063\u3066\u307b\u3057\u3044\n0\nSystem.ArgumentException: Argument must be even.\n2\nSystem.ArgumentException: Argument must be even.\n4\nSystem.ArgumentException: Argument must be even.\n\n\u5927\u672c\u306e\u30b9\u30c8\u30ea\u30fc\u30e0(EvenReceiver) \u3092 int \u3067\u306f\u306a\u304f\nEither\u306a\u3069\u3092\u4f5c\u3063\u3066\u305d\u3044\u3064\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u3059\u308c\u3070\u7c21\u5358\u305d\u3046\u3060\u304c\u3001\n\u5927\u672c\u304c\u3044\u3058\u308c\u306a\u3044\u5834\u5408\u3069\u3046\u3059\u308b\u304b\uff1f\n\n\u3084\u3063\u3066\u307f\u305f\n\u3053\u3093\u306a\u611f\u3058\u3060\u308d\u3046\u304b\npublic static class FailureExtension\n{\n    public static IObservable<Exception> Failure<T>(this IObservable<T> source)\n    {\n        var error = new Subject<Exception>();\n        Reconnect(source, error);\n        return error;\n    }\n\n    private static void Reconnect<T>(IObservable<T> source, IObserver<Exception> error)\n    {\n        source.Subscribe(\n            _ => { },\n            ex =>\n            {\n                error.OnNext(ex);\n                Reconnect(source, error);\n            },\n            () => { });\n    }\n}\n\n\u307e\u308f\u308a\u304f\u3069\u3044\u3053\u3068\u3092\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u3088\u3046\u306a\u6c17\u304c\u3057\u3066\u306a\u3089\u306a\u3044\u3002\n#\u4f55\u304c\u3057\u305f\u304b\u3063\u305f\u304b\n\u9069\u5f53\u306a\u30b9\u30c8\u30ea\u30fc\u30e0\u304c\u5410\u304f\u4f8b\u5916\u3092\u96c6\u3081\u305f\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u62fe\u3063\u3066\u307f\u305f\u304f\u306a\u3063\u305f\u3002\n\n\u4f8b\u3048\u3070\u3001\u5076\u6570\u3092\u305d\u306e\u307e\u307e\u901a\u3057\u3066\u3001\u5947\u6570\u3092\u5165\u308c\u308b\u3068\u30a8\u30e9\u30fc\u3092\u5410\u304f`IO<int>`\u304c\u3042\u3063\u3066\u3001\n\n```csharp\npublic class EvenReceiver : IObservable<int>\n{\n    private Subject<int> subject = new Subject<int>();\n    public IDisposable Subscribe(IObserver<int> observer)\n    {\n        var normal = subject\n            .Where(x => x % 2 == 0)\n            .Subscribe(x => observer.OnNext(x));\n        var error = subject\n            .Where(x => x % 2 != 0)\n            .Subscribe(x => observer.OnError(new ArgumentException(\"Argument must be even.\")));\n        return Disposable.Create(() => { normal.Dispose(); error.Dispose(); });\n    }\n\n    public void Receive(int x)\n    {\n        subject.OnNext(x);\n    }\n}\n```\n\u3053\u3046\u66f8\u3044\u305f\u3089\n\n```csharp\nEvenReceiver rcv = new EvenReceiver();\nvar success = rcv.Retry();\nvar failure = rcv.Failure();\n\nsuccess.Subscribe(Console.WriteLine);\nfailure.Subscribe(Console.WriteLine);\n\nrcv.Receive(0);\nrcv.Receive(1);\nrcv.Receive(2);\nrcv.Receive(3);\nrcv.Receive(4);\nrcv.Receive(5);\n```\n\u3053\u3046\u306a\u3063\u3066\u307b\u3057\u3044\n\n```\n0\nSystem.ArgumentException: Argument must be even.\n2\nSystem.ArgumentException: Argument must be even.\n4\nSystem.ArgumentException: Argument must be even.\n```\n\n\u5927\u672c\u306e\u30b9\u30c8\u30ea\u30fc\u30e0(`EvenReceiver`) \u3092 `int` \u3067\u306f\u306a\u304f\n`Either`\u306a\u3069\u3092\u4f5c\u3063\u3066\u305d\u3044\u3064\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u3059\u308c\u3070\u7c21\u5358\u305d\u3046\u3060\u304c\u3001\n\u5927\u672c\u304c\u3044\u3058\u308c\u306a\u3044\u5834\u5408\u3069\u3046\u3059\u308b\u304b\uff1f\n\n#\u3084\u3063\u3066\u307f\u305f\n\u3053\u3093\u306a\u611f\u3058\u3060\u308d\u3046\u304b\n\n```\npublic static class FailureExtension\n{\n    public static IObservable<Exception> Failure<T>(this IObservable<T> source)\n    {\n        var error = new Subject<Exception>();\n        Reconnect(source, error);\n        return error;\n    }\n\n    private static void Reconnect<T>(IObservable<T> source, IObserver<Exception> error)\n    {\n        source.Subscribe(\n            _ => { },\n            ex =>\n            {\n                error.OnNext(ex);\n                Reconnect(source, error);\n            },\n            () => { });\n    }\n}\n```\n\n\u307e\u308f\u308a\u304f\u3069\u3044\u3053\u3068\u3092\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u3088\u3046\u306a\u6c17\u304c\u3057\u3066\u306a\u3089\u306a\u3044\u3002\n", "tags": ["ReactiveExtensions", "Rx", "C#"]}