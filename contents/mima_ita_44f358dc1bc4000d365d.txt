{"context": " More than 1 year has passed since last update.e-Stat\u3067\u306f\u653f\u5e9c\u304c\u63d0\u4f9b\u3059\u308b\u69d8\u3005\u306a\u7d71\u8a08\u30c7\u30fc\u30bf\u3092XML\u3084JSON\u3067\u53d6\u5f97\u3059\u308bAPI\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n\nAPI\u306e\u5229\u7528\u767b\u9332\u3068\u52d5\u4f5c\u30c6\u30b9\u30c8\n\uff11\uff0e\u4e0b\u8a18\u306eURL\u304b\u3089API\u306e\u5229\u7528\u7533\u8acb\u3092\u3057\u307e\u3059\u3002\nhttp://www.e-stat.go.jp/api/regist-login/\n\uff12\uff0eAPI\u3092\u767b\u9332\u7533\u8acb\u304c\u5b8c\u4e86\u3059\u308b\u3068\u300c\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u300d\u3068\u300c\u30d1\u30b9\u30ef\u30fc\u30c9\u300d\u3067\u30ed\u30b0\u30a4\u30f3\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\nhttps://www.e-stat.go.jp/api/apiuser/php/index.php?action=login\n\uff13\uff0e\u30ed\u30b0\u30a4\u30f3\u5f8c\u3001\u518d\u5ea6\u30ed\u30b0\u30a4\u30f3\u753b\u9762\u306b\u884c\u304f\u3068\u300c\u5229\u7528\u8005\u60c5\u5831\u5909\u66f4\uff0f\u524a\u9664\u300d\u3068\u300c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3ID\u306e\u53d6\u5f97\u300d\u304c\u304a\u3053\u306a\u3048\u308b\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\nhttps://www.e-stat.go.jp/api/apiuser/php/index.php?action=login\n\n\u5229\u7528\u8005\u60c5\u5831\u5909\u66f4\u3067\u306f\u3001\u767b\u9332\u6642\u306b\u6307\u5b9a\u3057\u305f\u30c7\u30fc\u30bf\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\uff14\uff0eappID\u306e\u767a\u884c\u3092\u884c\u3046\u3002\n\u300c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3ID\u306e\u53d6\u5f97\u300d\u753b\u9762\u3067\u540d\u79f0\u3068URL\u3092\u5165\u529b\u3057\u3066\u3001\u300c\u767a\u884c\u300d\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068appID\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\nurl\u306f\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u300chttp://localhost/\u300d\u7b49\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nappID\u306f3\u500b\u307e\u3067\u767a\u884c\u3067\u304d\u307e\u3059\u3002\n\uff15\uff0e\u958b\u767a\u652f\u63f4\u753b\u9762\u3088\u308a\u5404API\u306e\u30c6\u30b9\u30c8\u3092\u884c\u3044\u307e\u3059\u3002\n\u300c\u6a5f\u80fd\u6982\u8981\u300d\u3088\u308a\u300c\u958b\u767a\u652f\u63f4\u60c5\u5831\u300d\u3092\u9078\u629e\u3057\u307e\u3059\u3002\n\n\u3053\u308c\u306b\u3088\u308a\u3001\u300cAPI\u6a5f\u80fd\u30c6\u30b9\u30c8\u30d5\u30a9\u30fc\u30e0\u300d\u3084\u300c\u30b5\u30f3\u30d7\u30eb\u300d\u304c\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\n\nAPI\u306e\u6982\u8981\nAPI\u6a5f\u80fd\u30c6\u30b9\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u5404API\u306e\u6a5f\u80fd\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\u307e\u305f\u3001API\u306e\u4ed5\u69d8\u306f\u4e0b\u8a18\u306e\u753b\u9762\u304b\u3089\u5229\u7528\u3067\u304d\u307e\u3059\u3002\nhttp://www.e-stat.go.jp/api/api-info/api-spec/\n\u5229\u7528\u3067\u304d\u308bAPI\u306e\u7a2e\u985e\u306b\u306f\u4e0b\u8a18\u306e\uff14\u3064\u304c\u3042\u308a\u307e\u3059\u3002\n\u30fb\u7d71\u8a08\u8868\u60c5\u5831\u53d6\u5f97\n\u653f\u5e9c\u7d71\u8a08\u306e\u7dcf\u5408\u7a93\u53e3\uff08e-Stat\uff09\u3067\u63d0\u4f9b\u3057\u3066\u3044\u308b\u7d71\u8a08\u8868\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6307\u5b9a\u306b\u3088\u308a\u6761\u4ef6\u3092\u7d5e\u3063\u305f\u60c5\u5831\u306e\u53d6\u5f97\u3082\u53ef\u80fd\u3067\u3059\u3002\n\u30fb\u30e1\u30bf\u60c5\u5831\u53d6\u5f97\n\u6307\u5b9a\u3057\u305f\u7d71\u8a08\u8868ID\u306b\u5bfe\u5fdc\u3059\u308b\u30e1\u30bf\u60c5\u5831\uff08\u8868\u7ae0\u4e8b\u9805\u3001\u5206\u985e\u4e8b\u9805\u3001\u5730\u57df\u4e8b\u9805\u7b49\uff09\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u30fb\u30c7\u30fc\u30bf\u53d6\u5f97\n\u6307\u5b9a\u3057\u305f\u7d71\u8a08\u8868ID\u53c8\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8ID\u306b\u5bfe\u5fdc\u3059\u308b\u7d71\u8a08\u30c7\u30fc\u30bf\uff08\u6570\u5024\u30c7\u30fc\u30bf\uff09\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6307\u5b9a\u306b\u3088\u308a\u6761\u4ef6\u3092\u7d5e\u3063\u305f\u60c5\u5831\u306e\u53d6\u5f97\u3082\u53ef\u80fd\u3067\u3059\u3002\n\u3053\u306e\u30c7\u30fc\u30bf\u306fXML\u3068JSON\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\u30fb\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u767b\u9332\n\u7d71\u8a08\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u969b\u306e\u53d6\u5f97\u6761\u4ef6\u3092\u767b\u9332\u3057\u307e\u3059\u3002\n\u7d71\u8a08\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\u306b\u304a\u3051\u308b\u7d5e\u308a\u8fbc\u307f\u6761\u4ef6\u3092\u300c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u300d\u3068\u3057\u3066\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u53d6\u5f97\u6761\u4ef6\u3092\u7701\u7565\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u30fb\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u53c2\u7167\n\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u7d5e\u308a\u8fbc\u307f\u6761\u4ef6\u7b49\u3092\u53c2\u7167\u3057\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8ID\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u5229\u7528\u8005\u304c\u4f7f\u7528\u3067\u304d\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4e00\u89a7\u304c\u53c2\u7167\u53ef\u80fd\u3067\u3059\u3002\n\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u300c\u7d71\u8a08\u8868\u60c5\u5831\u53d6\u5f97\u300d\u3067\u7d71\u8a08\u8868\u3092\u691c\u7d22\u3057\u3001\u7d71\u8a08\u8868\u306eID\u3092\u53d6\u5f97\u3057\u3001\u300c\u30e1\u30bf\u60c5\u5831\u53d6\u5f97\u300d\u3067\u30e1\u30bf\u60c5\u5831\u3092\u53d6\u5f97\u5f8c\u3001\u300c\u30c7\u30fc\u30bf\u53d6\u5f97\u300d\u3067\u7d71\u8a08\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\n\n\u7d71\u8a08\u8868\u60c5\u5831\u306e\u691c\u7d22\n\u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u306f\u7d71\u8a08\u8868\u60c5\u5831\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\nAPI_KEY\u3068\u691c\u7d22\u30c7\u30fc\u30bf\u7a2e\u5225\u3001\u691c\u7d22\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u6307\u5b9a\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002\n\u691c\u7d22\u30c7\u30fc\u30bf\u7a2e\u5225\u306f\u4e0b\u8a18\u306e\u901a\u308a\u306b\u306a\u308a\u307e\u3059\u3002\n\u30fb1\uff1a\u7d71\u8a08\u60c5\u5831(\u7701\u7565\u5024)\n\u30fb2\uff1a\u5c0f\u5730\u57df\u30fb\u5730\u57df\u30e1\u30c3\u30b7\u30e5\n\u30fb3\uff1a\u793e\u4f1a\u30fb\u4eba\u53e3\u7d71\u8a08\u4f53\u7cfb\uff08\u90fd\u9053\u5e9c\u770c\u30fb\u5e02\u533a\u753a\u6751\u306e\u3059\u304c\u305f\uff09\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\uff1a\n\ngetStatsListSample.py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\nimport urllib\nimport urllib2\nfrom lxml import etree\nimport sys\nimport codecs\n# windows \u306e\u5834\u5408...\nsys.stdout = codecs.getwriter('cp932')(sys.stdout)\n\ndef main(argvs, argc):\n    if argc != 4:\n        print (\"Usage #python %s api_key search_kind key_word\" % argvs[0])\n        return 1\n    api_key = argvs[1]\n    search_kind = argvs[2]\n    # windows \u306e\u5834\u5408...\n    key_word = argvs[3].decode('cp932')\n    key_word = urllib.quote(key_word.encode('utf-8'))\n\n    url = ('http://api.e-stat.go.jp/rest/1.0/app/getStatsList?appId=%s&lang=J&searchKind=%s&searchWord=%s' % (api_key, search_kind, key_word))\n    req = urllib2.Request(url)\n    opener = urllib2.build_opener()\n    conn = opener.open(req)\n    cont = conn.read()\n    parser = etree.XMLParser(recover=True)\n    root = etree.fromstring(cont, parser)\n    result = root.find('RESULT')\n    print ('RESULT==============')\n    print (result.find('STATUS').text)\n    print (result.find('ERROR_MSG').text)\n    print (result.find('DATE').text)\n    data_list = root.find('DATALIST_INF')\n    list_infs = data_list.xpath('.//LIST_INF')\n    for list_inf in list_infs:\n        print '--------------'\n        print (u'\u7d71\u8a08\u8868ID:%s' % (list_inf.get('id')))\n\n        stat_name = list_inf.find('STAT_NAME')\n        if stat_name is not None:\n            print (u'\u653f\u5e9c\u7d71\u8a08\u540d:%s %s' % (stat_name.get('code'), stat_name.text))\n\n        gov_org = list_inf.find('GOV_ORG')\n        if gov_org is not None:\n            print (u'\u4f5c\u6210\u6a5f\u95a2\u540d:%s %s' % (gov_org.get('code'), gov_org.text))\n\n        statistics_name = list_inf.find('STATISTICS_NAME')\n        if statistics_name is not None:\n            print (u'\u63d0\u4f9b\u7d71\u8a08\u540d\u53ca\u3073\u63d0\u4f9b\u5206\u985e\u540d:%s' % (statistics_name.text))\n\n        title = list_inf.find('TITLE')\n        if title is not None:\n            print (u'\u8868\u984c:%s %s' % (title.get('no'), title.text))\n\n        cycle = list_inf.find('CYCLE')\n        if cycle is not None:\n            print (u'\u63d0\u4f9b\u5468\u671f:%s' % (cycle.text))\n\n        survey_date = list_inf.find('SURVEY_DATE')\n        if survey_date is not None:\n            print (u'\u8abf\u67fb\u5e74\u6708:%s' % (survey_date.text))\n\n        open_date = list_inf.find('OPEN_DATE')\n        if open_date is not None:\n            print (u'\u516c\u958b\u65e5:%s' % (open_date.text))\n\n        small_area = list_inf.find('SMALL_AREA')\n        if small_area is not None:\n            print (u'\u5c0f\u5730\u57df\u5c5e\u6027:%s' % (small_area.text))\n\n\nif __name__ == '__main__':\n    argvs = sys.argv\n    argc = len(argvs)\n    sys.exit(main(argvs, argc))\n\n\n\n\u4f7f\u7528\u4f8b\uff1a\npython getStatsListSample.py API_KEY 1 \u96c7\u7528\n\n\u51fa\u529b\u7d50\u679c\uff1a\n\u7d71\u8a08\u8868ID:0003059047\n\u653f\u5e9c\u7d71\u8a08\u540d:00550100 \u7d4c\u6e08\u7523\u696d\u7701\u4f01\u696d\u6d3b\u52d5\u57fa\u672c\u8abf\u67fb\n\u4f5c\u6210\u6a5f\u95a2\u540d:00550 \u7d4c\u6e08\u7523\u696d\u7701\n\u63d0\u4f9b\u7d71\u8a08\u540d\u53ca\u3073\u63d0\u4f9b\u5206\u985e\u540d:\u7d4c\u6e08\u7523\u696d\u7701\u4f01\u696d\u6d3b\u52d5\u57fa\u672c\u8abf\u67fb \u7d71\u8a08\u8868\u4e00\u89a7\uff0d\u78ba\u5831\uff08\u30c7\u30fc\u30bf\uff09\n\u5e73\u621022\u5e74\u4f01\u696d\u6d3b\u52d5\u57fa\u672c\u8abf\u67fb\u78ba\u5831\uff0d\u5e73\u621021\u5e74\u5ea6\u5b9f\u7e3e\uff0d\n\u8868\u984c:1-8 \u7d71\u8a08\u8868\uff08\u7b2c\uff11\u5dfb\uff09\u3014\u4e8b\u696d\u7d44\u7e54\u306b\u95a2\u3059\u308b\u8868\u3015\u3000\u7b2c8\u8868\u3000\u7523\u696d\u5225\u3001\u4f01\u696d\u6570\u3001\u4e8b\u696d\u7d44\u7e54\n\u5225\u5f93\u696d\u8005\u6570\n\u63d0\u4f9b\u5468\u671f:\u5e74\u6b21\n\u8abf\u67fb\u5e74\u6708:201001-201012\n\u516c\u958b\u65e5:2012-03-31\n\u5c0f\u5730\u57df\u5c5e\u6027:0\n\n\u7d71\u8a08\u8868ID\u306e\u300c0003059047\u300d\u304c\u30c7\u30fc\u30bf\u53d6\u5f97\u306b\u4f7f\u7528\u3067\u304d\u308bID\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u30e1\u30bf\u60c5\u5831\u306e\u8868\u793a\n\u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u306f\u6307\u5b9a\u306e\u7d71\u8a08ID\u306e\u30e1\u30bf\u60c5\u5831\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u7d71\u8a08\u8868\u60c5\u5831\u306e\u691c\u7d22\u3067\u3057\u305f\u7d71\u8a08\u8868ID\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u30e1\u30bf\u60c5\u5831\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\uff1a\n\ngetMetaSample.py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\nimport urllib\nimport urllib2\nfrom lxml import etree\nimport sys\nimport codecs\n# windows \u306e\u5834\u5408...\nsys.stdout = codecs.getwriter('cp932')(sys.stdout)\n\n\ndef get_meta_data(api_key, stats_data_id):\n    \"\"\"\n    \u30e1\u30bf\u60c5\u5831\u53d6\u5f97\n    \"\"\"\n    url = ('http://api.e-stat.go.jp/rest/1.0/app/getMetaInfo?appId=%s&lang=J&statsDataId=%s' % (api_key, stats_data_id))\n    req = urllib2.Request(url)\n    opener = urllib2.build_opener()\n    conn = opener.open(req)\n    cont = conn.read()\n    parser = etree.XMLParser(recover=True)\n    root = etree.fromstring(cont, parser)\n    class_object_tags = root.xpath('//METADATA_INF/CLASS_INF/CLASS_OBJ')\n    class_object = {}\n\n    for class_object_tag in class_object_tags:\n        class_object_id = class_object_tag.get('id')\n        class_object_name = class_object_tag.get('name')\n        class_object_item = {\n            'id' : class_object_id,\n            'name' : class_object_name,\n            'objects' : {}\n        }\n        class_tags = class_object_tag.xpath('.//CLASS')\n        for class_tag in class_tags:\n            class_item = {\n                'code' : class_tag.get('code'),\n                'name' : class_tag.get('name'),\n                'level' : class_tag.get('level'),\n                'unit' : class_tag.get('unit')\n            }\n            class_object_item['objects'][class_item['code']] = class_item\n        class_object[class_object_id] = class_object_item\n    return class_object\n\ndef main(argvs, argc):\n    if argc != 3:\n        print (\"Usage #python %s api_key stats_id\" % argvs[0])\n        return 1\n    api_key = argvs[1]\n    stats_id = argvs[2]\n    ret = get_meta_data(api_key, stats_id)\n    for key in ret:\n        print ('======================')\n        print (key)\n        print ('name: %s' % ret[key]['name'])\n        for obj_code, obj in ret[key]['objects'].items():\n            print ('----------------------')\n            print ('code: %s' % obj_code)\n            print ('name: %s' % obj['name'])\n            print ('unit: %s' % obj['unit'])\n            print ('level: %s' % obj['level'])\n\nif __name__ == '__main__':\n    argvs = sys.argv\n    argc = len(argvs)\n    sys.exit(main(argvs, argc))\n\n\n\n\u4f7f\u7528\u4f8b\uff1a\npython getMetaSample.py API_KEY 0003059047\n\n\u51fa\u529b\u4f8b\uff1a\n======================\ncat01\nname: 22_1-8 \u4f01\u696d\u6570\u3001\u4e8b\u696d\u7d44\u7e54\u5225\u5f93\u696d\u8005\u6570\n----------------------\ncode: 0011000\nname: \u5e38\u6642\u5f93\u696d\u8005\u6570\uff08\u51fa\u5411\u8005\u3092\u9664\u304f\uff09\u3000\u672c\u793e\u30fb\u672c\u5e97\u3000\u672c\u793e\u6a5f\u80fd\u90e8\u9580\u3000\u305d\u306e\u4ed6\nunit: None\nlevel: 1\n----------------------\ncode: 0029000\nname: \u5e38\u6642\u5f93\u696d\u8005\u6570\uff08\u51fa\u5411\u8005\u3092\u542b\u3080\uff09\u3000\u4ed6\u4f01\u696d\u7b49\u3078\u306e\u51fa\u5411\u8005\nunit: None\nlevel: 1\n\n\u30e1\u30bf\u60c5\u5831\u306b\u306f\u8a72\u5f53\u306e\u7d71\u8a08\u8868\u304c\u5229\u7528\u3057\u3066\u3044\u308b\u30ab\u30c6\u30b4\u30ea\u30fc\u3068\u305d\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u304c\u53d6\u308a\u3046\u308b\u5024\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n\n\u7d71\u8a08\u8868\u3092CSV\u306b\u3057\u3066\u51fa\u529b\n\u3053\u306e\u4f8b\u3067\u306f\u7d71\u8a08\u8868\u3092CSV\u3068\u3057\u3066\u51fa\u529b\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u793a\u3057\u307e\u3059\u3002\u7d71\u8a08\u8868ID\u3068CSV\u306e\u51fa\u529b\u30d1\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001CSV\u3068\u3057\u3066\u6307\u5b9a\u306e\u7d71\u8a08\u8868\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\uff1a\n\nexport_csv.py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\nimport sys\nimport urllib2\nfrom lxml import etree\nimport csv\n\ndef export_statical_data(writer, api_key, stats_data_id, class_object, start_position):\n    \"\"\"\n    \u7d71\u8a08\u60c5\u5831\u306e\u30a8\u30af\u30b9\u30dd\u30fc\u30c8\n    \"\"\"\n    url = ('http://api.e-stat.go.jp/rest/1.0/app/getStatsData?limit=10000&appId=%s&lang=J&statsDataId=%s&metaGetFlg=N&cntGetFlg=N' % (api_key, stats_data_id))\n    if start_position > 0:\n        url = url + ('&startPosition=%d' % start_position)\n\n    req = urllib2.Request(url)\n    opener = urllib2.build_opener()\n    conn = opener.open(req)\n    cont = conn.read()\n    parser = etree.XMLParser(recover=True)\n    root = etree.fromstring(cont, parser)\n\n    row = []\n    datas = {}\n    value_tags = root.xpath('//STATISTICAL_DATA/DATA_INF/VALUE')\n    for value_tag in value_tags:\n        row = []\n        for key in class_object:\n            val = value_tag.get(key)\n            if val in class_object[key]['objects']:\n                level = '';\n                if 'level' in class_object[key]['objects'][val]:\n                    if class_object[key]['objects'][val]['level'].isdigit():\n                        level = ' ' * (int(class_object[key]['objects'][val]['level']) - 1)\n                text = (\"%s%s\" % (level , class_object[key]['objects'][val]['name']))\n                row.append(text.encode('utf-8'))\n            else:\n                row.append(val.encode('utf-8'))\n        row.append(value_tag.text)\n        writer.writerow(row)\n\n    next_tags = root.xpath('//STATISTICAL_DATA/TABLE_INF/NEXT_KEY')\n    if next_tags:\n        if next_tags[0].text:\n            export_statical_data(writer, api_key, stats_data_id, class_object, int(next_tags[0].text))\n\ndef get_meta_data(api_key, stats_data_id):\n    \"\"\"\n    \u30e1\u30bf\u60c5\u5831\u53d6\u5f97\n    \"\"\"\n    url = ('http://api.e-stat.go.jp/rest/1.0/app/getMetaInfo?appId=%s&lang=J&statsDataId=%s' % (api_key, stats_data_id))\n    req = urllib2.Request(url)\n    opener = urllib2.build_opener()\n    conn = opener.open(req)\n    cont = conn.read()\n    parser = etree.XMLParser(recover=True)\n    root = etree.fromstring(cont, parser)\n    class_object_tags = root.xpath('//METADATA_INF/CLASS_INF/CLASS_OBJ')\n    class_object = {}\n\n    for class_object_tag in class_object_tags:\n        class_object_id = class_object_tag.get('id')\n        class_object_name = class_object_tag.get('name')\n        class_object_item = {\n            'id' : class_object_id,\n            'name' : class_object_name,\n            'objects' : {}\n        }\n        class_tags = class_object_tag.xpath('.//CLASS')\n        for class_tag in class_tags:\n            class_item = {\n                'code' : class_tag.get('code'),\n                'name' : class_tag.get('name'),\n                'level' : class_tag.get('level'),\n                'unit' : class_tag.get('unit')\n            }\n            class_object_item['objects'][class_item['code']] = class_item\n        class_object[class_object_id] = class_object_item\n    return class_object\n\ndef export_csv(api_key, stats_data_id, output_path):\n    \"\"\"\n    \u6307\u5b9a\u306e\u7d71\u8a08\u60c5\u5831\u3092CSV\u306b\u30a8\u30af\u30b9\u30dd\u30fc\u30c8\u3059\u308b.\n    \"\"\"\n    writer = csv.writer(open(output_path, 'wb'),quoting=csv.QUOTE_ALL)\n\n    class_object = get_meta_data(api_key, stats_data_id)\n    row = []\n    for key in class_object:\n        title = class_object[key]['name']\n        row.append(title.encode('utf-8'))\n    row.append('VALUE')\n    writer.writerow(row)\n\n    export_statical_data(writer, api_key, stats_data_id, class_object, 1)\n\ndef main(argvs, argc):\n    if argc != 4:\n        print (\"Usage #python %s api_key stats_data_id output_path\" % argvs[0])\n        return 1\n    api_key = argvs[1]\n    stats_data_id = argvs[2]\n    output_path = argvs[3]\n    export_csv(api_key, stats_data_id, output_path)\n\nif __name__ == '__main__':\n    argvs = sys.argv\n    argc = len(argvs)\n    sys.exit(main(argvs, argc))\n\n\n\n\u4f7f\u7528\u4f8b\uff1a\npython export_csv.py API_KEY 0003059047 output.csv\n\n\u51fa\u529b\u4f8b\uff1a\n\"22_1-8 \u4f01\u696d\u6570\u3001\u4e8b\u696d\u7d44\u7e54\u5225\u5f93\u696d\u8005\u6570\",\"22_1-8 \u7523\u696d\",\"VALUE\"\n\"\u4f01\u696d\u6570\",\"\u5e73\u621017\u5e74\u5ea6\",\"27677\"\n\"\u4f01\u696d\u6570\",\"\u5e73\u621018\u5e74\u5ea6\",\"27917\"\n\"\u4f01\u696d\u6570\",\"\u5e73\u621019\u5e74\u5ea6\",\"29080\"\n\"\u4f01\u696d\u6570\",\"\u5e73\u621020\u5e74\u5ea6\",\"29355\"\n\"\u4f01\u696d\u6570\",\"\u5e73\u621021\u5e74\u5ea6\",\"29096\"\n\"\u4f01\u696d\u6570\",\"\u7dcf\u5408\u8a08\",\"29096\"\n\"\u4f01\u696d\u6570\",\"\u5408\u8a08\",\"27871\"\n\"\u4f01\u696d\u6570\",\"\u9271\u696d\u3001\u63a1\u77f3\u696d\u3001\u7802\u5229\u63a1\u53d6\u696d\",\"36\"\n\"\u4f01\u696d\u6570\",\"\u88fd\u9020\u696d\",\"13105\"\n\"\u4f01\u696d\u6570\",\"090\u3000\u98df\u6599\u54c1\u88fd\u9020\u696d\",\"1498\"\n\"\u4f01\u696d\u6570\",\"091\u3000\u755c\u7523\u98df\u6599\u54c1\u88fd\u9020\u696d\",\"285\"\n\"\u4f01\u696d\u6570\",\"092\u3000\u6c34\u7523\u98df\u6599\u54c1\u88fd\u9020\u696d\",\"222\"\n\"\u4f01\u696d\u6570\",\"093\u3000\u7cbe\u7a40\u30fb\u88fd\u7c89\u696d\",\"37\"\n\n\n\u5e73\u6210\uff12\uff12\u5e74\u56fd\u52e2\u8abf\u67fb\u306e\u4eba\u53e3\u306e\u5730\u57df\u30e1\u30c3\u30b7\u30e5\u7d71\u8a08\n\u5730\u57df\u30e1\u30c3\u30b7\u30e5\u7d71\u8a08\u3068\u306f\uff0c\u7def\u5ea6\u30fb\u7d4c\u5ea6\u306b\u57fa\u3065\u304d\u5730\u57df\u3092\u9699\u9593\u306a\u304f\u7db2\u306e\u76ee\uff08Mesh\uff09\u306e\u533a\u57df\u306b\u5206\u3051\u3066\uff0c\u7d71\u8a08\u30c7\u30fc\u30bf\u3092\u305d\u308c\u305e\u308c\u306e\u533a\u57df\u306b\u7de8\u6210\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u56f3\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9:\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\nimport sys\nimport urllib\nimport urllib2\nfrom lxml import etree\nimport csv\nfrom collections import defaultdict\nimport json\nfrom matplotlib import pyplot\nimport numpy as np\nfrom math import *\n\n\ndef draw_heatmap(data):\n    # \u63cf\u753b\u3059\u308b\n    fig, ax = pyplot.subplots()\n    heatmap = ax.pcolor(data, cmap=pyplot.cm.Blues)\n\n    ax.set_xticks(np.arange(data.shape[0]) + 0.5, minor=False)\n    ax.set_yticks(np.arange(data.shape[1]) + 0.5, minor=False)\n\n    ax.invert_yaxis()\n    ax.xaxis.tick_top()\n\n    pyplot.savefig('image.png')\n    pyplot.show()\n\n    return heatmap\n\n\ndef get_meta_data(api_key, stats_data_id):\n    \"\"\"\n    \u30e1\u30bf\u60c5\u5831\u53d6\u5f97\n    \"\"\"\n    url = ('http://api.e-stat.go.jp/rest/1.0/app/getMetaInfo?appId=%s&lang=J&statsDataId=%s' % (api_key, stats_data_id))\n    req = urllib2.Request(url)\n    opener = urllib2.build_opener()\n    conn = opener.open(req)\n    cont = conn.read()\n    parser = etree.XMLParser(recover=True)\n    root = etree.fromstring(cont, parser)\n    class_object_tags = root.xpath('//METADATA_INF/CLASS_INF/CLASS_OBJ')\n    class_object = {}\n\n    for class_object_tag in class_object_tags:\n        class_object_id = class_object_tag.get('id')\n        class_object_name = class_object_tag.get('name')\n        class_object_item = {\n            'id' : class_object_id,\n            'name' : class_object_name,\n            'objects' : {}\n        }\n        class_tags = class_object_tag.xpath('.//CLASS')\n        for class_tag in class_tags:\n            class_item = {\n                'code' : class_tag.get('code'),\n                'name' : class_tag.get('name'),\n                'level' : class_tag.get('level'),\n                'unit' : class_tag.get('unit')\n            }\n            class_object_item['objects'][class_item['code']] = class_item\n        class_object[class_object_id] = class_object_item\n    return class_object\n\ndef get_stats_list(api_key, search_kind, key_word):\n    key_word = urllib.quote(key_word.encode('utf-8'))\n    url = ('http://api.e-stat.go.jp/rest/1.0/app/getStatsList?appId=%s&lang=J&searchKind=%s&searchWord=%s' % (api_key, search_kind, key_word))\n    req = urllib2.Request(url)\n    opener = urllib2.build_opener()\n    conn = opener.open(req)\n    cont = conn.read()\n    parser = etree.XMLParser(recover=True)\n    root = etree.fromstring(cont, parser)\n    ret = []\n    data_list = root.find('DATALIST_INF')\n    list_infs = data_list.xpath('.//LIST_INF')\n    for list_inf in list_infs:\n        item = {\n             'id': list_inf.get('id')\n        }\n        stat_name = list_inf.find('STAT_NAME')\n        if stat_name is not None:\n            item['stat_name'] = stat_name.text\n            item['stat_name_code'] = stat_name.get('code')\n\n        gov_org = list_inf.find('GOV_ORG')\n        if gov_org is not None:\n            item['gov_org'] = gov_org.text\n            item['gov_org_code'] = gov_org.get('code')\n\n        statistics_name = list_inf.find('STATISTICS_NAME')\n        if statistics_name is not None:\n            item['statistics_name'] = statistics_name.text\n\n        title = list_inf.find('TITLE')\n        if title is not None:\n            item['title'] = title.text\n\n        cycle = list_inf.find('CYCLE')\n        if cycle is not None:\n            item['cycle'] = cycle.text\n\n        survey_date = list_inf.find('SURVEY_DATE')\n        if survey_date is not None:\n            item['survey_date'] = survey_date.text\n\n        open_date = list_inf.find('OPEN_DATE')\n        if open_date is not None:\n            item['open_date'] = open_date.text\n\n        small_area = list_inf.find('SMALL_AREA')\n        if small_area is not None:\n            item['small_area'] = small_area.text\n\n        ret.append(item)\n    return ret\n\n\ndef _get_stats_id_value(api_key, stats_data_id, class_object, start_position, filter_str):\n    \"\"\"\n    \u7d71\u8a08\u60c5\u5831\u306e\u53d6\u5f97\n    \"\"\"\n    url = ('http://api.e-stat.go.jp/rest/1.0/app/getStatsData?limit=10000&appId=%s&lang=J&statsDataId=%s&metaGetFlg=N&cntGetFlg=N%s' % (api_key, stats_data_id, filter_str))\n    if start_position > 0:\n        url = url + ('&startPosition=%d' % start_position)\n    req = urllib2.Request(url)\n    opener = urllib2.build_opener()\n    conn = opener.open(req)\n    cont = conn.read()\n    parser = etree.XMLParser(recover=True)\n    root = etree.fromstring(cont, parser)\n    ret = []\n    row = {}\n    datas = {}\n    value_tags = root.xpath('//STATISTICAL_DATA/DATA_INF/VALUE')\n    for value_tag in value_tags:\n        row = {}\n        for key in class_object:\n            val = value_tag.get(key)\n            if val in class_object[key]['objects']:\n                text = class_object[key]['objects'][val]['name']\n                row[key] = text.encode('utf-8')\n            else:\n                row[key] = val.encode('utf-8')\n        row['value'] = value_tag.text\n        ret.append(row)\n    return ret\n\ndef get_stats_id_value(api_key, stats_data_id, filter_str):\n    class_object = get_meta_data(api_key, stats_data_id)\n    return _get_stats_id_value(api_key, stats_data_id, class_object, 1, filter_str), class_object\n\ndef get_stats_id_list_value(api_key, stats_data_ids, filter):\n    filter_str = ''\n    for key in filter:\n        filter_str += ('&%s=%s' % (key, urllib.quote(filter[key].encode('utf-8'))))\n    ret = []\n    i = 0\n    for stats_data_id in stats_data_ids:\n        list, class_object = get_stats_id_value(api_key, stats_data_id, filter_str)\n        ret.extend(list)\n        i = i + 1\n        if i > 5:\n            break\n    return ret\n\n\ndef get_mesh_id(mesh_id, kind):\n    if kind == 1:\n        return mesh_id[0:4] + '0000'\n    elif kind == 2:\n        return mesh_id[0:6] + '00'\n    else:\n        raise Exception(mesh_id)\n\n\ndef collect_mesh_value(api_key, stats_data_ids, filter, kind):\n    filter_str = ''\n    for key in filter:\n        filter_str += ('&%s=%s' % (key, urllib.quote(filter[key].encode('utf-8'))))\n    ret = defaultdict(float)\n    i = 0\n    for stats_data_id in stats_data_ids:\n        list, class_object = get_stats_id_value(api_key, stats_data_id, filter_str)\n        sum = 0\n        for row in list:\n            key = get_mesh_id(row['area'], kind)\n            v = row['value']\n            if v.isdigit():\n                ret[key] += float(v)\n        i = i + 1\n        #if i > 5:\n        #    break\n    return ret\n\n\ndef parse_mesh_to_num(mesh_id):\n    ret = {}\n    if len(mesh_id) == 4:\n        ret['p'] = float(mesh_id[0:2])\n        ret['u'] = float(mesh_id[2:4])\n        ret['q'] = 0.0\n        ret['v'] = 0.0\n        ret['r'] = 0.0\n        ret['w'] = 0.0\n        return ret\n    elif len(mesh_id) == 8:\n        ret['p'] = float(mesh_id[0:2])\n        ret['u'] = float(mesh_id[2:4])\n        ret['q'] = float(mesh_id[4])\n        ret['v'] = float(mesh_id[5])\n        ret['r'] = float(mesh_id[6])\n        ret['w'] = float(mesh_id[7])\n        return ret\n    else:\n        raise Exception(mesh_id)\n\ndef convert_mesh_to_num(mesh_id):\n    d1 = parse_mesh_to_num(mesh_id)\n    # \u7b2c\uff12\u6b21\u5730\u57df\u306f\uff10\uff5e\uff17\u306a\u306e\u306780\u639b\u3051\u3066\u3044\u308b\n    x1 = (d1['u'] * 80) + (d1['v'] * 10) + d1['w'];\n    y1 = (d1['p'] * 80) + (d1['q'] * 10) + d1['r'];\n    return x1, y1\n\ndef main(argvs, argc):\n    wd = u'\u5e73\u6210\uff12\uff12\u5e74\u56fd\u52e2\u8abf\u67fb\uff0d\u4e16\u754c\u6e2c\u5730\u7cfb(1KM\u30e1\u30c3\u30b7\u30e5)20101001'\n    # API_KEY\n    api_key = 'API_KEY'\n    search_kind = '2'\n    stats_list = get_stats_list(api_key, search_kind, wd)\n    stats_ids = []\n    for stats in stats_list:\n        stats_ids.append(stats['id'])\n    # \u4eba\u53e3\u7dcf\u6570\u3067\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\n    values = collect_mesh_value(api_key, stats_ids, {'cdCat01':'T000608001'}, 2)\n    ret = []\n    max_x = 0\n    min_x = 9999\n    max_y = 0\n    min_y = 9999\n    for key in values.keys():\n        x, y = convert_mesh_to_num(key)\n        x = x\n        y = y\n        if min_x > x:\n            min_x = x\n        if max_x < x:\n            max_x = x\n        if min_y > y:\n            min_y = y\n        if max_y < y:\n            max_y = y\n    size_x = int(max_x - min_x) / 10 + 1\n    size_y = int(max_y - min_y) / 10 + 1\n    buff = [[0.0 for i in range(size_x)] for j in range(size_y)] \n    for key in values.keys():\n        x, y = convert_mesh_to_num(key)\n        x = int(x - min_x) / 10\n        y = (size_y-1) - int(y - min_y) / 10\n        # log\u3092\u53d6\u3089\u306a\u3044\u3068\u6771\u4eac\u3068\u4ed6\u306e\u5730\u65b9\u306e\u5dee\u304c\u9177\u304f\u3066\u65e5\u672c\u5730\u56f3\u306b\u306a\u3089\u306a\u3044\u3002\n        buff[y][x] = log10(float(values[key]))\n        #print ('%s\\t%s %d %d' % (key,values[key],x,y))\n    draw_heatmap(np.array(buff))\n\nif __name__ == '__main__':\n    argvs = sys.argv\n    argc = len(argvs)\n    sys.exit(main(argvs, argc))\n\n\n\u8aac\u660e\uff1a\n\u3053\u306e\u56f3\u3067\u306f\u4eba\u53e3\u3092\u7b2c2\u5730\u57df\u533a\u753b\u3054\u3068\u306b\u96c6\u8a08\u3057\u3066\u3001\u305d\u306e\u5e38\u7528\u5bfe\u6570\u3092\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3068\u3057\u3066\u8868\u793a\u3057\u3066\u3044\u307e\u3059\u3002\n\u5e38\u7528\u5bfe\u6570\u3092\u5229\u7528\u3059\u308b\u306e\u306f\u3001\u95a2\u6771\u5730\u533a\u3068\u4ed6\u306e\u5730\u533a\u306e\u4eba\u53e3\u306e\u5dee\u304c\u591a\u304d\u3059\u304e\u308b\u305f\u3081\u3001\u307e\u3068\u3082\u306a\u5730\u56f3\u306b\u306a\u3089\u306a\u3044\u304b\u3089\u3067\u3059\u3002\n\u7b2c3\u5730\u57df\u533a\u753b\uff08\u6a19\u6e96\u30e1\u30c3\u30b7\u30e5\uff09\u3092\u5168\u56fd\u3067\u8868\u793a\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u30e1\u30e2\u30ea\u304c\u83ab\u5927\u306b\u6d88\u8cbb\u3055\u308c\u307e\u3059\u3002\u7b2c\u4e00\u5730\u57df\u533a\u753b\u3067\u306f\u3001\u5730\u56f3\u304c\u8352\u3059\u304e\u307e\u3059\u3002\n\u3053\u306e\u4f8b\u3067\u306f\u3001\u3059\u3079\u3066\u8868\u793a\u3055\u308c\u308b\u307e\u3067\u83ab\u5927\u306a\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002\n\u6b21\u306e\u8a18\u4e8b\u3067\u306fspatialite\u306b\u4e00\u65e6\u30c7\u30fc\u30bf\u3092\u4fdd\u5b58\u3059\u308b\u3053\u3068\u3067\u51e6\u7406\u306e\u52b9\u7387\u5316\u3092\u56f3\u3063\u3066\u3044\u307e\u3059\u3002\n\u653f\u5e9c\u7d71\u8a08\u7a93\u53e3(eStat)\u306e\u5730\u57df\u30e1\u30c3\u30b7\u30e5\u3092Web\u30d6\u30e9\u30a6\u30b6\u3067\u8868\u793a\u3059\u308b\u65b9\u6cd5 \nhttp://qiita.com/mima_ita/items/38784095a146c87dcd23\n\n\u53c2\u8003\n\u5730\u57df\u30e1\u30c3\u30b7\u30e5\u7d71\u8a08\u306e\u7279\u8cea\u30fb\u6cbf\u9769\uff1a\nhttp://www.stat.go.jp/data/mesh/pdf/gaiyo1.pdf\nPython + matplotlib \u306b\u3088\u308b\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\nhttp://qiita.com/ynakayama/items/7dc01f45caf6d87a981b\ne-Stat\u3067\u306f\u653f\u5e9c\u304c\u63d0\u4f9b\u3059\u308b\u69d8\u3005\u306a\u7d71\u8a08\u30c7\u30fc\u30bf\u3092XML\u3084JSON\u3067\u53d6\u5f97\u3059\u308bAPI\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n\n##API\u306e\u5229\u7528\u767b\u9332\u3068\u52d5\u4f5c\u30c6\u30b9\u30c8\n\uff11\uff0e\u4e0b\u8a18\u306eURL\u304b\u3089API\u306e\u5229\u7528\u7533\u8acb\u3092\u3057\u307e\u3059\u3002\nhttp://www.e-stat.go.jp/api/regist-login/\n\n\uff12\uff0eAPI\u3092\u767b\u9332\u7533\u8acb\u304c\u5b8c\u4e86\u3059\u308b\u3068\u300c\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u300d\u3068\u300c\u30d1\u30b9\u30ef\u30fc\u30c9\u300d\u3067\u30ed\u30b0\u30a4\u30f3\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\n\nhttps://www.e-stat.go.jp/api/apiuser/php/index.php?action=login\n\n\uff13\uff0e\u30ed\u30b0\u30a4\u30f3\u5f8c\u3001\u518d\u5ea6\u30ed\u30b0\u30a4\u30f3\u753b\u9762\u306b\u884c\u304f\u3068\u300c\u5229\u7528\u8005\u60c5\u5831\u5909\u66f4\uff0f\u524a\u9664\u300d\u3068\u300c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3ID\u306e\u53d6\u5f97\u300d\u304c\u304a\u3053\u306a\u3048\u308b\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\nhttps://www.e-stat.go.jp/api/apiuser/php/index.php?action=login\n\n![disp1.png](https://qiita-image-store.s3.amazonaws.com/0/47856/83ec14fa-692d-f7d0-cb6c-da4080481569.png)\n\n\u5229\u7528\u8005\u60c5\u5831\u5909\u66f4\u3067\u306f\u3001\u767b\u9332\u6642\u306b\u6307\u5b9a\u3057\u305f\u30c7\u30fc\u30bf\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\uff14\uff0eappID\u306e\u767a\u884c\u3092\u884c\u3046\u3002\n\u300c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3ID\u306e\u53d6\u5f97\u300d\u753b\u9762\u3067\u540d\u79f0\u3068URL\u3092\u5165\u529b\u3057\u3066\u3001\u300c\u767a\u884c\u300d\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068appID\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\n![disp2.png](https://qiita-image-store.s3.amazonaws.com/0/47856/41dd56a1-841b-8e98-3607-89dfa31cb156.png)\n\nurl\u306f\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u300chttp://localhost/\u300d\u7b49\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nappID\u306f3\u500b\u307e\u3067\u767a\u884c\u3067\u304d\u307e\u3059\u3002\n\n\uff15\uff0e\u958b\u767a\u652f\u63f4\u753b\u9762\u3088\u308a\u5404API\u306e\u30c6\u30b9\u30c8\u3092\u884c\u3044\u307e\u3059\u3002\n\u300c\u6a5f\u80fd\u6982\u8981\u300d\u3088\u308a\u300c\u958b\u767a\u652f\u63f4\u60c5\u5831\u300d\u3092\u9078\u629e\u3057\u307e\u3059\u3002\n\n![disp3.png](https://qiita-image-store.s3.amazonaws.com/0/47856/01d4b9ba-e228-93b6-b393-434756ab4455.png)\n\n\u3053\u308c\u306b\u3088\u308a\u3001\u300cAPI\u6a5f\u80fd\u30c6\u30b9\u30c8\u30d5\u30a9\u30fc\u30e0\u300d\u3084\u300c\u30b5\u30f3\u30d7\u30eb\u300d\u304c\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n![disp4.png](https://qiita-image-store.s3.amazonaws.com/0/47856/107e45cb-97fa-f9fd-c41f-5b3035ee629b.png)\n\n##API\u306e\u6982\u8981\nAPI\u6a5f\u80fd\u30c6\u30b9\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u5404API\u306e\u6a5f\u80fd\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\u307e\u305f\u3001API\u306e\u4ed5\u69d8\u306f\u4e0b\u8a18\u306e\u753b\u9762\u304b\u3089\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\nhttp://www.e-stat.go.jp/api/api-info/api-spec/\n\n\u5229\u7528\u3067\u304d\u308bAPI\u306e\u7a2e\u985e\u306b\u306f\u4e0b\u8a18\u306e\uff14\u3064\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u30fb\u7d71\u8a08\u8868\u60c5\u5831\u53d6\u5f97\n\u653f\u5e9c\u7d71\u8a08\u306e\u7dcf\u5408\u7a93\u53e3\uff08e-Stat\uff09\u3067\u63d0\u4f9b\u3057\u3066\u3044\u308b\u7d71\u8a08\u8868\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6307\u5b9a\u306b\u3088\u308a\u6761\u4ef6\u3092\u7d5e\u3063\u305f\u60c5\u5831\u306e\u53d6\u5f97\u3082\u53ef\u80fd\u3067\u3059\u3002\n\n\u30fb\u30e1\u30bf\u60c5\u5831\u53d6\u5f97\n\u6307\u5b9a\u3057\u305f\u7d71\u8a08\u8868ID\u306b\u5bfe\u5fdc\u3059\u308b\u30e1\u30bf\u60c5\u5831\uff08\u8868\u7ae0\u4e8b\u9805\u3001\u5206\u985e\u4e8b\u9805\u3001\u5730\u57df\u4e8b\u9805\u7b49\uff09\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\n\u30fb\u30c7\u30fc\u30bf\u53d6\u5f97\n\u6307\u5b9a\u3057\u305f\u7d71\u8a08\u8868ID\u53c8\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8ID\u306b\u5bfe\u5fdc\u3059\u308b\u7d71\u8a08\u30c7\u30fc\u30bf\uff08\u6570\u5024\u30c7\u30fc\u30bf\uff09\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6307\u5b9a\u306b\u3088\u308a\u6761\u4ef6\u3092\u7d5e\u3063\u305f\u60c5\u5831\u306e\u53d6\u5f97\u3082\u53ef\u80fd\u3067\u3059\u3002\n\u3053\u306e\u30c7\u30fc\u30bf\u306fXML\u3068JSON\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\n\u30fb\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u767b\u9332\n\u7d71\u8a08\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u969b\u306e\u53d6\u5f97\u6761\u4ef6\u3092\u767b\u9332\u3057\u307e\u3059\u3002\n\u7d71\u8a08\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\u306b\u304a\u3051\u308b\u7d5e\u308a\u8fbc\u307f\u6761\u4ef6\u3092\u300c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u300d\u3068\u3057\u3066\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u53d6\u5f97\u6761\u4ef6\u3092\u7701\u7565\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u30fb\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u53c2\u7167\n\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u7d5e\u308a\u8fbc\u307f\u6761\u4ef6\u7b49\u3092\u53c2\u7167\u3057\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8ID\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u5229\u7528\u8005\u304c\u4f7f\u7528\u3067\u304d\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4e00\u89a7\u304c\u53c2\u7167\u53ef\u80fd\u3067\u3059\u3002\n\n\n\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u300c\u7d71\u8a08\u8868\u60c5\u5831\u53d6\u5f97\u300d\u3067\u7d71\u8a08\u8868\u3092\u691c\u7d22\u3057\u3001\u7d71\u8a08\u8868\u306eID\u3092\u53d6\u5f97\u3057\u3001\u300c\u30e1\u30bf\u60c5\u5831\u53d6\u5f97\u300d\u3067\u30e1\u30bf\u60c5\u5831\u3092\u53d6\u5f97\u5f8c\u3001\u300c\u30c7\u30fc\u30bf\u53d6\u5f97\u300d\u3067\u7d71\u8a08\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\n##\u30b5\u30f3\u30d7\u30eb\n###\u7d71\u8a08\u8868\u60c5\u5831\u306e\u691c\u7d22\n\u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u306f\u7d71\u8a08\u8868\u60c5\u5831\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\nAPI_KEY\u3068\u691c\u7d22\u30c7\u30fc\u30bf\u7a2e\u5225\u3001\u691c\u7d22\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u6307\u5b9a\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002\n\u691c\u7d22\u30c7\u30fc\u30bf\u7a2e\u5225\u306f\u4e0b\u8a18\u306e\u901a\u308a\u306b\u306a\u308a\u307e\u3059\u3002\n\u30fb1\uff1a\u7d71\u8a08\u60c5\u5831(\u7701\u7565\u5024)\n\u30fb2\uff1a\u5c0f\u5730\u57df\u30fb\u5730\u57df\u30e1\u30c3\u30b7\u30e5\n\u30fb3\uff1a\u793e\u4f1a\u30fb\u4eba\u53e3\u7d71\u8a08\u4f53\u7cfb\uff08\u90fd\u9053\u5e9c\u770c\u30fb\u5e02\u533a\u753a\u6751\u306e\u3059\u304c\u305f\uff09\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\uff1a\n\n```py:getStatsListSample.py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\nimport urllib\nimport urllib2\nfrom lxml import etree\nimport sys\nimport codecs\n# windows \u306e\u5834\u5408...\nsys.stdout = codecs.getwriter('cp932')(sys.stdout)\n\ndef main(argvs, argc):\n    if argc != 4:\n        print (\"Usage #python %s api_key search_kind key_word\" % argvs[0])\n        return 1\n    api_key = argvs[1]\n    search_kind = argvs[2]\n    # windows \u306e\u5834\u5408...\n    key_word = argvs[3].decode('cp932')\n    key_word = urllib.quote(key_word.encode('utf-8'))\n\n    url = ('http://api.e-stat.go.jp/rest/1.0/app/getStatsList?appId=%s&lang=J&searchKind=%s&searchWord=%s' % (api_key, search_kind, key_word))\n    req = urllib2.Request(url)\n    opener = urllib2.build_opener()\n    conn = opener.open(req)\n    cont = conn.read()\n    parser = etree.XMLParser(recover=True)\n    root = etree.fromstring(cont, parser)\n    result = root.find('RESULT')\n    print ('RESULT==============')\n    print (result.find('STATUS').text)\n    print (result.find('ERROR_MSG').text)\n    print (result.find('DATE').text)\n    data_list = root.find('DATALIST_INF')\n    list_infs = data_list.xpath('.//LIST_INF')\n    for list_inf in list_infs:\n        print '--------------'\n        print (u'\u7d71\u8a08\u8868ID:%s' % (list_inf.get('id')))\n\n        stat_name = list_inf.find('STAT_NAME')\n        if stat_name is not None:\n            print (u'\u653f\u5e9c\u7d71\u8a08\u540d:%s %s' % (stat_name.get('code'), stat_name.text))\n\n        gov_org = list_inf.find('GOV_ORG')\n        if gov_org is not None:\n            print (u'\u4f5c\u6210\u6a5f\u95a2\u540d:%s %s' % (gov_org.get('code'), gov_org.text))\n\n        statistics_name = list_inf.find('STATISTICS_NAME')\n        if statistics_name is not None:\n            print (u'\u63d0\u4f9b\u7d71\u8a08\u540d\u53ca\u3073\u63d0\u4f9b\u5206\u985e\u540d:%s' % (statistics_name.text))\n\n        title = list_inf.find('TITLE')\n        if title is not None:\n            print (u'\u8868\u984c:%s %s' % (title.get('no'), title.text))\n\n        cycle = list_inf.find('CYCLE')\n        if cycle is not None:\n            print (u'\u63d0\u4f9b\u5468\u671f:%s' % (cycle.text))\n\n        survey_date = list_inf.find('SURVEY_DATE')\n        if survey_date is not None:\n            print (u'\u8abf\u67fb\u5e74\u6708:%s' % (survey_date.text))\n\n        open_date = list_inf.find('OPEN_DATE')\n        if open_date is not None:\n            print (u'\u516c\u958b\u65e5:%s' % (open_date.text))\n\n        small_area = list_inf.find('SMALL_AREA')\n        if small_area is not None:\n            print (u'\u5c0f\u5730\u57df\u5c5e\u6027:%s' % (small_area.text))\n\n\nif __name__ == '__main__':\n    argvs = sys.argv\n    argc = len(argvs)\n    sys.exit(main(argvs, argc))\n\n```\n\n\u4f7f\u7528\u4f8b\uff1a\n\n```\npython getStatsListSample.py API_KEY 1 \u96c7\u7528\n```\n\n\u51fa\u529b\u7d50\u679c\uff1a\n\n```\n\u7d71\u8a08\u8868ID:0003059047\n\u653f\u5e9c\u7d71\u8a08\u540d:00550100 \u7d4c\u6e08\u7523\u696d\u7701\u4f01\u696d\u6d3b\u52d5\u57fa\u672c\u8abf\u67fb\n\u4f5c\u6210\u6a5f\u95a2\u540d:00550 \u7d4c\u6e08\u7523\u696d\u7701\n\u63d0\u4f9b\u7d71\u8a08\u540d\u53ca\u3073\u63d0\u4f9b\u5206\u985e\u540d:\u7d4c\u6e08\u7523\u696d\u7701\u4f01\u696d\u6d3b\u52d5\u57fa\u672c\u8abf\u67fb \u7d71\u8a08\u8868\u4e00\u89a7\uff0d\u78ba\u5831\uff08\u30c7\u30fc\u30bf\uff09\n\u5e73\u621022\u5e74\u4f01\u696d\u6d3b\u52d5\u57fa\u672c\u8abf\u67fb\u78ba\u5831\uff0d\u5e73\u621021\u5e74\u5ea6\u5b9f\u7e3e\uff0d\n\u8868\u984c:1-8 \u7d71\u8a08\u8868\uff08\u7b2c\uff11\u5dfb\uff09\u3014\u4e8b\u696d\u7d44\u7e54\u306b\u95a2\u3059\u308b\u8868\u3015\u3000\u7b2c8\u8868\u3000\u7523\u696d\u5225\u3001\u4f01\u696d\u6570\u3001\u4e8b\u696d\u7d44\u7e54\n\u5225\u5f93\u696d\u8005\u6570\n\u63d0\u4f9b\u5468\u671f:\u5e74\u6b21\n\u8abf\u67fb\u5e74\u6708:201001-201012\n\u516c\u958b\u65e5:2012-03-31\n\u5c0f\u5730\u57df\u5c5e\u6027:0\n```\n\n\u7d71\u8a08\u8868ID\u306e\u300c0003059047\u300d\u304c\u30c7\u30fc\u30bf\u53d6\u5f97\u306b\u4f7f\u7528\u3067\u304d\u308bID\u306b\u306a\u308a\u307e\u3059\u3002\n\n###\u30e1\u30bf\u60c5\u5831\u306e\u8868\u793a\n\u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u306f\u6307\u5b9a\u306e\u7d71\u8a08ID\u306e\u30e1\u30bf\u60c5\u5831\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u7d71\u8a08\u8868\u60c5\u5831\u306e\u691c\u7d22\u3067\u3057\u305f\u7d71\u8a08\u8868ID\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u30e1\u30bf\u60c5\u5831\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\uff1a\n\n```py:getMetaSample.py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\nimport urllib\nimport urllib2\nfrom lxml import etree\nimport sys\nimport codecs\n# windows \u306e\u5834\u5408...\nsys.stdout = codecs.getwriter('cp932')(sys.stdout)\n\n\ndef get_meta_data(api_key, stats_data_id):\n    \"\"\"\n    \u30e1\u30bf\u60c5\u5831\u53d6\u5f97\n    \"\"\"\n    url = ('http://api.e-stat.go.jp/rest/1.0/app/getMetaInfo?appId=%s&lang=J&statsDataId=%s' % (api_key, stats_data_id))\n    req = urllib2.Request(url)\n    opener = urllib2.build_opener()\n    conn = opener.open(req)\n    cont = conn.read()\n    parser = etree.XMLParser(recover=True)\n    root = etree.fromstring(cont, parser)\n    class_object_tags = root.xpath('//METADATA_INF/CLASS_INF/CLASS_OBJ')\n    class_object = {}\n\n    for class_object_tag in class_object_tags:\n        class_object_id = class_object_tag.get('id')\n        class_object_name = class_object_tag.get('name')\n        class_object_item = {\n            'id' : class_object_id,\n            'name' : class_object_name,\n            'objects' : {}\n        }\n        class_tags = class_object_tag.xpath('.//CLASS')\n        for class_tag in class_tags:\n            class_item = {\n                'code' : class_tag.get('code'),\n                'name' : class_tag.get('name'),\n                'level' : class_tag.get('level'),\n                'unit' : class_tag.get('unit')\n            }\n            class_object_item['objects'][class_item['code']] = class_item\n        class_object[class_object_id] = class_object_item\n    return class_object\n\ndef main(argvs, argc):\n    if argc != 3:\n        print (\"Usage #python %s api_key stats_id\" % argvs[0])\n        return 1\n    api_key = argvs[1]\n    stats_id = argvs[2]\n    ret = get_meta_data(api_key, stats_id)\n    for key in ret:\n        print ('======================')\n        print (key)\n        print ('name: %s' % ret[key]['name'])\n        for obj_code, obj in ret[key]['objects'].items():\n            print ('----------------------')\n            print ('code: %s' % obj_code)\n            print ('name: %s' % obj['name'])\n            print ('unit: %s' % obj['unit'])\n            print ('level: %s' % obj['level'])\n\nif __name__ == '__main__':\n    argvs = sys.argv\n    argc = len(argvs)\n    sys.exit(main(argvs, argc))\n\n```\n\n\u4f7f\u7528\u4f8b\uff1a\n\n```\npython getMetaSample.py API_KEY 0003059047\n```\n\n\u51fa\u529b\u4f8b\uff1a\n\n```\n======================\ncat01\nname: 22_1-8 \u4f01\u696d\u6570\u3001\u4e8b\u696d\u7d44\u7e54\u5225\u5f93\u696d\u8005\u6570\n----------------------\ncode: 0011000\nname: \u5e38\u6642\u5f93\u696d\u8005\u6570\uff08\u51fa\u5411\u8005\u3092\u9664\u304f\uff09\u3000\u672c\u793e\u30fb\u672c\u5e97\u3000\u672c\u793e\u6a5f\u80fd\u90e8\u9580\u3000\u305d\u306e\u4ed6\nunit: None\nlevel: 1\n----------------------\ncode: 0029000\nname: \u5e38\u6642\u5f93\u696d\u8005\u6570\uff08\u51fa\u5411\u8005\u3092\u542b\u3080\uff09\u3000\u4ed6\u4f01\u696d\u7b49\u3078\u306e\u51fa\u5411\u8005\nunit: None\nlevel: 1\n```\n\n\u30e1\u30bf\u60c5\u5831\u306b\u306f\u8a72\u5f53\u306e\u7d71\u8a08\u8868\u304c\u5229\u7528\u3057\u3066\u3044\u308b\u30ab\u30c6\u30b4\u30ea\u30fc\u3068\u305d\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u304c\u53d6\u308a\u3046\u308b\u5024\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n\n###\u7d71\u8a08\u8868\u3092CSV\u306b\u3057\u3066\u51fa\u529b\n\u3053\u306e\u4f8b\u3067\u306f\u7d71\u8a08\u8868\u3092CSV\u3068\u3057\u3066\u51fa\u529b\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u793a\u3057\u307e\u3059\u3002\u7d71\u8a08\u8868ID\u3068CSV\u306e\u51fa\u529b\u30d1\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001CSV\u3068\u3057\u3066\u6307\u5b9a\u306e\u7d71\u8a08\u8868\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\uff1a\n\n```py:export_csv.py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\nimport sys\nimport urllib2\nfrom lxml import etree\nimport csv\n\ndef export_statical_data(writer, api_key, stats_data_id, class_object, start_position):\n    \"\"\"\n    \u7d71\u8a08\u60c5\u5831\u306e\u30a8\u30af\u30b9\u30dd\u30fc\u30c8\n    \"\"\"\n    url = ('http://api.e-stat.go.jp/rest/1.0/app/getStatsData?limit=10000&appId=%s&lang=J&statsDataId=%s&metaGetFlg=N&cntGetFlg=N' % (api_key, stats_data_id))\n    if start_position > 0:\n        url = url + ('&startPosition=%d' % start_position)\n\n    req = urllib2.Request(url)\n    opener = urllib2.build_opener()\n    conn = opener.open(req)\n    cont = conn.read()\n    parser = etree.XMLParser(recover=True)\n    root = etree.fromstring(cont, parser)\n\n    row = []\n    datas = {}\n    value_tags = root.xpath('//STATISTICAL_DATA/DATA_INF/VALUE')\n    for value_tag in value_tags:\n        row = []\n        for key in class_object:\n            val = value_tag.get(key)\n            if val in class_object[key]['objects']:\n                level = '';\n                if 'level' in class_object[key]['objects'][val]:\n                    if class_object[key]['objects'][val]['level'].isdigit():\n                        level = ' ' * (int(class_object[key]['objects'][val]['level']) - 1)\n                text = (\"%s%s\" % (level , class_object[key]['objects'][val]['name']))\n                row.append(text.encode('utf-8'))\n            else:\n                row.append(val.encode('utf-8'))\n        row.append(value_tag.text)\n        writer.writerow(row)\n    \n    next_tags = root.xpath('//STATISTICAL_DATA/TABLE_INF/NEXT_KEY')\n    if next_tags:\n        if next_tags[0].text:\n            export_statical_data(writer, api_key, stats_data_id, class_object, int(next_tags[0].text))\n\ndef get_meta_data(api_key, stats_data_id):\n    \"\"\"\n    \u30e1\u30bf\u60c5\u5831\u53d6\u5f97\n    \"\"\"\n    url = ('http://api.e-stat.go.jp/rest/1.0/app/getMetaInfo?appId=%s&lang=J&statsDataId=%s' % (api_key, stats_data_id))\n    req = urllib2.Request(url)\n    opener = urllib2.build_opener()\n    conn = opener.open(req)\n    cont = conn.read()\n    parser = etree.XMLParser(recover=True)\n    root = etree.fromstring(cont, parser)\n    class_object_tags = root.xpath('//METADATA_INF/CLASS_INF/CLASS_OBJ')\n    class_object = {}\n\n    for class_object_tag in class_object_tags:\n        class_object_id = class_object_tag.get('id')\n        class_object_name = class_object_tag.get('name')\n        class_object_item = {\n            'id' : class_object_id,\n            'name' : class_object_name,\n            'objects' : {}\n        }\n        class_tags = class_object_tag.xpath('.//CLASS')\n        for class_tag in class_tags:\n            class_item = {\n                'code' : class_tag.get('code'),\n                'name' : class_tag.get('name'),\n                'level' : class_tag.get('level'),\n                'unit' : class_tag.get('unit')\n            }\n            class_object_item['objects'][class_item['code']] = class_item\n        class_object[class_object_id] = class_object_item\n    return class_object\n\ndef export_csv(api_key, stats_data_id, output_path):\n    \"\"\"\n    \u6307\u5b9a\u306e\u7d71\u8a08\u60c5\u5831\u3092CSV\u306b\u30a8\u30af\u30b9\u30dd\u30fc\u30c8\u3059\u308b.\n    \"\"\"\n    writer = csv.writer(open(output_path, 'wb'),quoting=csv.QUOTE_ALL)\n\n    class_object = get_meta_data(api_key, stats_data_id)\n    row = []\n    for key in class_object:\n        title = class_object[key]['name']\n        row.append(title.encode('utf-8'))\n    row.append('VALUE')\n    writer.writerow(row)\n\n    export_statical_data(writer, api_key, stats_data_id, class_object, 1)\n\ndef main(argvs, argc):\n    if argc != 4:\n        print (\"Usage #python %s api_key stats_data_id output_path\" % argvs[0])\n        return 1\n    api_key = argvs[1]\n    stats_data_id = argvs[2]\n    output_path = argvs[3]\n    export_csv(api_key, stats_data_id, output_path)\n\nif __name__ == '__main__':\n    argvs = sys.argv\n    argc = len(argvs)\n    sys.exit(main(argvs, argc))\n\n```\n\n\u4f7f\u7528\u4f8b\uff1a\n\n```\npython export_csv.py API_KEY 0003059047 output.csv\n```\n\n\u51fa\u529b\u4f8b\uff1a\n\n```\n\"22_1-8 \u4f01\u696d\u6570\u3001\u4e8b\u696d\u7d44\u7e54\u5225\u5f93\u696d\u8005\u6570\",\"22_1-8 \u7523\u696d\",\"VALUE\"\n\"\u4f01\u696d\u6570\",\"\u5e73\u621017\u5e74\u5ea6\",\"27677\"\n\"\u4f01\u696d\u6570\",\"\u5e73\u621018\u5e74\u5ea6\",\"27917\"\n\"\u4f01\u696d\u6570\",\"\u5e73\u621019\u5e74\u5ea6\",\"29080\"\n\"\u4f01\u696d\u6570\",\"\u5e73\u621020\u5e74\u5ea6\",\"29355\"\n\"\u4f01\u696d\u6570\",\"\u5e73\u621021\u5e74\u5ea6\",\"29096\"\n\"\u4f01\u696d\u6570\",\"\u7dcf\u5408\u8a08\",\"29096\"\n\"\u4f01\u696d\u6570\",\"\u5408\u8a08\",\"27871\"\n\"\u4f01\u696d\u6570\",\"\u9271\u696d\u3001\u63a1\u77f3\u696d\u3001\u7802\u5229\u63a1\u53d6\u696d\",\"36\"\n\"\u4f01\u696d\u6570\",\"\u88fd\u9020\u696d\",\"13105\"\n\"\u4f01\u696d\u6570\",\"090\u3000\u98df\u6599\u54c1\u88fd\u9020\u696d\",\"1498\"\n\"\u4f01\u696d\u6570\",\"091\u3000\u755c\u7523\u98df\u6599\u54c1\u88fd\u9020\u696d\",\"285\"\n\"\u4f01\u696d\u6570\",\"092\u3000\u6c34\u7523\u98df\u6599\u54c1\u88fd\u9020\u696d\",\"222\"\n\"\u4f01\u696d\u6570\",\"093\u3000\u7cbe\u7a40\u30fb\u88fd\u7c89\u696d\",\"37\"\n```\n\n###\u5e73\u6210\uff12\uff12\u5e74\u56fd\u52e2\u8abf\u67fb\u306e\u4eba\u53e3\u306e\u5730\u57df\u30e1\u30c3\u30b7\u30e5\u7d71\u8a08\n\u5730\u57df\u30e1\u30c3\u30b7\u30e5\u7d71\u8a08\u3068\u306f\uff0c\u7def\u5ea6\u30fb\u7d4c\u5ea6\u306b\u57fa\u3065\u304d\u5730\u57df\u3092\u9699\u9593\u306a\u304f\u7db2\u306e\u76ee\uff08Mesh\uff09\u306e\u533a\u57df\u306b\u5206\u3051\u3066\uff0c\u7d71\u8a08\u30c7\u30fc\u30bf\u3092\u305d\u308c\u305e\u308c\u306e\u533a\u57df\u306b\u7de8\u6210\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u56f3\u306b\u306a\u308a\u307e\u3059\u3002\n\n![image_log10.png](https://qiita-image-store.s3.amazonaws.com/0/47856/abec1d36-1d82-9cda-8772-71e8d8548a14.png)\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9:\n\n```py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\nimport sys\nimport urllib\nimport urllib2\nfrom lxml import etree\nimport csv\nfrom collections import defaultdict\nimport json\nfrom matplotlib import pyplot\nimport numpy as np\nfrom math import *\n\n\ndef draw_heatmap(data):\n    # \u63cf\u753b\u3059\u308b\n    fig, ax = pyplot.subplots()\n    heatmap = ax.pcolor(data, cmap=pyplot.cm.Blues)\n\n    ax.set_xticks(np.arange(data.shape[0]) + 0.5, minor=False)\n    ax.set_yticks(np.arange(data.shape[1]) + 0.5, minor=False)\n\n    ax.invert_yaxis()\n    ax.xaxis.tick_top()\n\n    pyplot.savefig('image.png')\n    pyplot.show()\n\n    return heatmap\n\n\ndef get_meta_data(api_key, stats_data_id):\n    \"\"\"\n    \u30e1\u30bf\u60c5\u5831\u53d6\u5f97\n    \"\"\"\n    url = ('http://api.e-stat.go.jp/rest/1.0/app/getMetaInfo?appId=%s&lang=J&statsDataId=%s' % (api_key, stats_data_id))\n    req = urllib2.Request(url)\n    opener = urllib2.build_opener()\n    conn = opener.open(req)\n    cont = conn.read()\n    parser = etree.XMLParser(recover=True)\n    root = etree.fromstring(cont, parser)\n    class_object_tags = root.xpath('//METADATA_INF/CLASS_INF/CLASS_OBJ')\n    class_object = {}\n\n    for class_object_tag in class_object_tags:\n        class_object_id = class_object_tag.get('id')\n        class_object_name = class_object_tag.get('name')\n        class_object_item = {\n            'id' : class_object_id,\n            'name' : class_object_name,\n            'objects' : {}\n        }\n        class_tags = class_object_tag.xpath('.//CLASS')\n        for class_tag in class_tags:\n            class_item = {\n                'code' : class_tag.get('code'),\n                'name' : class_tag.get('name'),\n                'level' : class_tag.get('level'),\n                'unit' : class_tag.get('unit')\n            }\n            class_object_item['objects'][class_item['code']] = class_item\n        class_object[class_object_id] = class_object_item\n    return class_object\n\ndef get_stats_list(api_key, search_kind, key_word):\n    key_word = urllib.quote(key_word.encode('utf-8'))\n    url = ('http://api.e-stat.go.jp/rest/1.0/app/getStatsList?appId=%s&lang=J&searchKind=%s&searchWord=%s' % (api_key, search_kind, key_word))\n    req = urllib2.Request(url)\n    opener = urllib2.build_opener()\n    conn = opener.open(req)\n    cont = conn.read()\n    parser = etree.XMLParser(recover=True)\n    root = etree.fromstring(cont, parser)\n    ret = []\n    data_list = root.find('DATALIST_INF')\n    list_infs = data_list.xpath('.//LIST_INF')\n    for list_inf in list_infs:\n        item = {\n             'id': list_inf.get('id')\n        }\n        stat_name = list_inf.find('STAT_NAME')\n        if stat_name is not None:\n            item['stat_name'] = stat_name.text\n            item['stat_name_code'] = stat_name.get('code')\n\n        gov_org = list_inf.find('GOV_ORG')\n        if gov_org is not None:\n            item['gov_org'] = gov_org.text\n            item['gov_org_code'] = gov_org.get('code')\n\n        statistics_name = list_inf.find('STATISTICS_NAME')\n        if statistics_name is not None:\n            item['statistics_name'] = statistics_name.text\n\n        title = list_inf.find('TITLE')\n        if title is not None:\n            item['title'] = title.text\n\n        cycle = list_inf.find('CYCLE')\n        if cycle is not None:\n            item['cycle'] = cycle.text\n\n        survey_date = list_inf.find('SURVEY_DATE')\n        if survey_date is not None:\n            item['survey_date'] = survey_date.text\n\n        open_date = list_inf.find('OPEN_DATE')\n        if open_date is not None:\n            item['open_date'] = open_date.text\n\n        small_area = list_inf.find('SMALL_AREA')\n        if small_area is not None:\n            item['small_area'] = small_area.text\n\n        ret.append(item)\n    return ret\n\n\ndef _get_stats_id_value(api_key, stats_data_id, class_object, start_position, filter_str):\n    \"\"\"\n    \u7d71\u8a08\u60c5\u5831\u306e\u53d6\u5f97\n    \"\"\"\n    url = ('http://api.e-stat.go.jp/rest/1.0/app/getStatsData?limit=10000&appId=%s&lang=J&statsDataId=%s&metaGetFlg=N&cntGetFlg=N%s' % (api_key, stats_data_id, filter_str))\n    if start_position > 0:\n        url = url + ('&startPosition=%d' % start_position)\n    req = urllib2.Request(url)\n    opener = urllib2.build_opener()\n    conn = opener.open(req)\n    cont = conn.read()\n    parser = etree.XMLParser(recover=True)\n    root = etree.fromstring(cont, parser)\n    ret = []\n    row = {}\n    datas = {}\n    value_tags = root.xpath('//STATISTICAL_DATA/DATA_INF/VALUE')\n    for value_tag in value_tags:\n        row = {}\n        for key in class_object:\n            val = value_tag.get(key)\n            if val in class_object[key]['objects']:\n                text = class_object[key]['objects'][val]['name']\n                row[key] = text.encode('utf-8')\n            else:\n                row[key] = val.encode('utf-8')\n        row['value'] = value_tag.text\n        ret.append(row)\n    return ret\n\ndef get_stats_id_value(api_key, stats_data_id, filter_str):\n    class_object = get_meta_data(api_key, stats_data_id)\n    return _get_stats_id_value(api_key, stats_data_id, class_object, 1, filter_str), class_object\n\ndef get_stats_id_list_value(api_key, stats_data_ids, filter):\n    filter_str = ''\n    for key in filter:\n        filter_str += ('&%s=%s' % (key, urllib.quote(filter[key].encode('utf-8'))))\n    ret = []\n    i = 0\n    for stats_data_id in stats_data_ids:\n        list, class_object = get_stats_id_value(api_key, stats_data_id, filter_str)\n        ret.extend(list)\n        i = i + 1\n        if i > 5:\n            break\n    return ret\n\n\ndef get_mesh_id(mesh_id, kind):\n    if kind == 1:\n        return mesh_id[0:4] + '0000'\n    elif kind == 2:\n        return mesh_id[0:6] + '00'\n    else:\n        raise Exception(mesh_id)\n\n\ndef collect_mesh_value(api_key, stats_data_ids, filter, kind):\n    filter_str = ''\n    for key in filter:\n        filter_str += ('&%s=%s' % (key, urllib.quote(filter[key].encode('utf-8'))))\n    ret = defaultdict(float)\n    i = 0\n    for stats_data_id in stats_data_ids:\n        list, class_object = get_stats_id_value(api_key, stats_data_id, filter_str)\n        sum = 0\n        for row in list:\n            key = get_mesh_id(row['area'], kind)\n            v = row['value']\n            if v.isdigit():\n                ret[key] += float(v)\n        i = i + 1\n        #if i > 5:\n        #    break\n    return ret\n\n\ndef parse_mesh_to_num(mesh_id):\n    ret = {}\n    if len(mesh_id) == 4:\n        ret['p'] = float(mesh_id[0:2])\n        ret['u'] = float(mesh_id[2:4])\n        ret['q'] = 0.0\n        ret['v'] = 0.0\n        ret['r'] = 0.0\n        ret['w'] = 0.0\n        return ret\n    elif len(mesh_id) == 8:\n        ret['p'] = float(mesh_id[0:2])\n        ret['u'] = float(mesh_id[2:4])\n        ret['q'] = float(mesh_id[4])\n        ret['v'] = float(mesh_id[5])\n        ret['r'] = float(mesh_id[6])\n        ret['w'] = float(mesh_id[7])\n        return ret\n    else:\n        raise Exception(mesh_id)\n\ndef convert_mesh_to_num(mesh_id):\n    d1 = parse_mesh_to_num(mesh_id)\n    # \u7b2c\uff12\u6b21\u5730\u57df\u306f\uff10\uff5e\uff17\u306a\u306e\u306780\u639b\u3051\u3066\u3044\u308b\n    x1 = (d1['u'] * 80) + (d1['v'] * 10) + d1['w'];\n    y1 = (d1['p'] * 80) + (d1['q'] * 10) + d1['r'];\n    return x1, y1\n\ndef main(argvs, argc):\n    wd = u'\u5e73\u6210\uff12\uff12\u5e74\u56fd\u52e2\u8abf\u67fb\uff0d\u4e16\u754c\u6e2c\u5730\u7cfb(1KM\u30e1\u30c3\u30b7\u30e5)20101001'\n    # API_KEY\n    api_key = 'API_KEY'\n    search_kind = '2'\n    stats_list = get_stats_list(api_key, search_kind, wd)\n    stats_ids = []\n    for stats in stats_list:\n        stats_ids.append(stats['id'])\n    # \u4eba\u53e3\u7dcf\u6570\u3067\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\n    values = collect_mesh_value(api_key, stats_ids, {'cdCat01':'T000608001'}, 2)\n    ret = []\n    max_x = 0\n    min_x = 9999\n    max_y = 0\n    min_y = 9999\n    for key in values.keys():\n        x, y = convert_mesh_to_num(key)\n        x = x\n        y = y\n        if min_x > x:\n            min_x = x\n        if max_x < x:\n            max_x = x\n        if min_y > y:\n            min_y = y\n        if max_y < y:\n            max_y = y\n    size_x = int(max_x - min_x) / 10 + 1\n    size_y = int(max_y - min_y) / 10 + 1\n    buff = [[0.0 for i in range(size_x)] for j in range(size_y)] \n    for key in values.keys():\n        x, y = convert_mesh_to_num(key)\n        x = int(x - min_x) / 10\n        y = (size_y-1) - int(y - min_y) / 10\n        # log\u3092\u53d6\u3089\u306a\u3044\u3068\u6771\u4eac\u3068\u4ed6\u306e\u5730\u65b9\u306e\u5dee\u304c\u9177\u304f\u3066\u65e5\u672c\u5730\u56f3\u306b\u306a\u3089\u306a\u3044\u3002\n        buff[y][x] = log10(float(values[key]))\n        #print ('%s\\t%s %d %d' % (key,values[key],x,y))\n    draw_heatmap(np.array(buff))\n\nif __name__ == '__main__':\n    argvs = sys.argv\n    argc = len(argvs)\n    sys.exit(main(argvs, argc))\n\n```\n\n\n\u8aac\u660e\uff1a\n\u3053\u306e\u56f3\u3067\u306f\u4eba\u53e3\u3092\u7b2c2\u5730\u57df\u533a\u753b\u3054\u3068\u306b\u96c6\u8a08\u3057\u3066\u3001\u305d\u306e\u5e38\u7528\u5bfe\u6570\u3092\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3068\u3057\u3066\u8868\u793a\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5e38\u7528\u5bfe\u6570\u3092\u5229\u7528\u3059\u308b\u306e\u306f\u3001\u95a2\u6771\u5730\u533a\u3068\u4ed6\u306e\u5730\u533a\u306e\u4eba\u53e3\u306e\u5dee\u304c\u591a\u304d\u3059\u304e\u308b\u305f\u3081\u3001\u307e\u3068\u3082\u306a\u5730\u56f3\u306b\u306a\u3089\u306a\u3044\u304b\u3089\u3067\u3059\u3002\n\n\u7b2c3\u5730\u57df\u533a\u753b\uff08\u6a19\u6e96\u30e1\u30c3\u30b7\u30e5\uff09\u3092\u5168\u56fd\u3067\u8868\u793a\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u30e1\u30e2\u30ea\u304c\u83ab\u5927\u306b\u6d88\u8cbb\u3055\u308c\u307e\u3059\u3002\u7b2c\u4e00\u5730\u57df\u533a\u753b\u3067\u306f\u3001\u5730\u56f3\u304c\u8352\u3059\u304e\u307e\u3059\u3002\n\n\u3053\u306e\u4f8b\u3067\u306f\u3001\u3059\u3079\u3066\u8868\u793a\u3055\u308c\u308b\u307e\u3067\u83ab\u5927\u306a\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002\n\u6b21\u306e\u8a18\u4e8b\u3067\u306fspatialite\u306b\u4e00\u65e6\u30c7\u30fc\u30bf\u3092\u4fdd\u5b58\u3059\u308b\u3053\u3068\u3067\u51e6\u7406\u306e\u52b9\u7387\u5316\u3092\u56f3\u3063\u3066\u3044\u307e\u3059\u3002\n\n **\u653f\u5e9c\u7d71\u8a08\u7a93\u53e3(eStat)\u306e\u5730\u57df\u30e1\u30c3\u30b7\u30e5\u3092Web\u30d6\u30e9\u30a6\u30b6\u3067\u8868\u793a\u3059\u308b\u65b9\u6cd5** \nhttp://qiita.com/mima_ita/items/38784095a146c87dcd23\n\n##\u53c2\u8003\n\u5730\u57df\u30e1\u30c3\u30b7\u30e5\u7d71\u8a08\u306e\u7279\u8cea\u30fb\u6cbf\u9769\uff1a\nhttp://www.stat.go.jp/data/mesh/pdf/gaiyo1.pdf\n\nPython + matplotlib \u306b\u3088\u308b\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\nhttp://qiita.com/ynakayama/items/7dc01f45caf6d87a981b\n\n", "tags": ["Python2.7", "\u7d71\u8a08"]}