{"context": "http://qiita.com/yusuga/items/4698478a246245a0f6b4\n\u4e0a\u8a18\u8a18\u4e8b\u306eswift\u7248\u3067\u3059\u3002swift3\u4ee5\u964d\u5909\u308f\u308b\u3068\u306e\u3053\u3068\u3067\u3059\u304c\u5099\u5fd8\u9332\u304c\u3066\u3089\u5199\u7d4c\u3002\n\nFileManager.swift\n// tmp/\nfunc temporaryDirectory() -> NSString {\n    return NSTemporaryDirectory()\n}\n\n// tmp/fileName\nfunc temporaryDirectory(fileName: String) -> String {\n    return temporaryDirectory().stringByAppendingPathComponent(fileName)\n}\n\n// Documents/\nfunc documentDirectory() -> String {\n    return NSSearchPathForDirectoriesInDomains(.DocumentDirectory, .UserDomainMask, true).first!\n}\n\n// Documents/fileName\nfunc documentDirectory(fileName: String) -> String {\n    return (documentDirectory() as NSString).stringByAppendingPathComponent(fileName)\n}\n\n// path\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u3066\u3044\u308b\u304b\nfunc fileExists(path: String) -> Bool {\n    return NSFileManager.defaultManager().fileExistsAtPath(path)\n}\n\n// path\u306e\u30d5\u30a1\u30a4\u30eb\u304celapsedTime\u3092\u8d85\u3048\u3066\u3044\u308b\u304b\nfunc isElapsedFileModificationDate(path: String, elapsedTime: NSTimeInterval) throws -> Bool {\n    if !fileExists(path) {\n        return false\n    }\n\n    let attributes = try NSFileManager.defaultManager().attributesOfItemAtPath(path) as NSDictionary\n    guard let date = attributes.fileModificationDate() else {\n        return false\n    }\n\n    return elapsedTime < NSDate().timeIntervalSinceDate(date)\n}\n\n// directoryPath\u5185\u306eextensionName(\u62e1\u5f35\u5b50)\u3068\u4e00\u81f4\u3059\u308b\u5168\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u540d\nfunc fileNames(directoryPath: String, extensionName: String) throws -> [String] {\n    let allFileName = try NSFileManager.defaultManager().contentsOfDirectoryAtPath(directoryPath)\n\n    var hitFileNames = [String]()\n    for fileName in allFileName {\n        if (fileName as NSString).pathExtension == extensionName {\n            hitFileNames.append(fileName)\n        }\n    }\n    return hitFileNames\n}\n\n// path\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664\nfunc removeFilePath(path: String) throws{\n    try NSFileManager.defaultManager().removeItemAtPath(path)\n}\n\n\nhttp://qiita.com/yusuga/items/4698478a246245a0f6b4\n\u4e0a\u8a18\u8a18\u4e8b\u306eswift\u7248\u3067\u3059\u3002swift3\u4ee5\u964d\u5909\u308f\u308b\u3068\u306e\u3053\u3068\u3067\u3059\u304c\u5099\u5fd8\u9332\u304c\u3066\u3089\u5199\u7d4c\u3002\n\n```FileManager.swift\n// tmp/\nfunc temporaryDirectory() -> NSString {\n    return NSTemporaryDirectory()\n}\n\n// tmp/fileName\nfunc temporaryDirectory(fileName: String) -> String {\n    return temporaryDirectory().stringByAppendingPathComponent(fileName)\n}\n\n// Documents/\nfunc documentDirectory() -> String {\n    return NSSearchPathForDirectoriesInDomains(.DocumentDirectory, .UserDomainMask, true).first!\n}\n\n// Documents/fileName\nfunc documentDirectory(fileName: String) -> String {\n    return (documentDirectory() as NSString).stringByAppendingPathComponent(fileName)\n}\n\n// path\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u3066\u3044\u308b\u304b\nfunc fileExists(path: String) -> Bool {\n    return NSFileManager.defaultManager().fileExistsAtPath(path)\n}\n\n// path\u306e\u30d5\u30a1\u30a4\u30eb\u304celapsedTime\u3092\u8d85\u3048\u3066\u3044\u308b\u304b\nfunc isElapsedFileModificationDate(path: String, elapsedTime: NSTimeInterval) throws -> Bool {\n    if !fileExists(path) {\n        return false\n    }\n    \n    let attributes = try NSFileManager.defaultManager().attributesOfItemAtPath(path) as NSDictionary\n    guard let date = attributes.fileModificationDate() else {\n        return false\n    }\n    \n    return elapsedTime < NSDate().timeIntervalSinceDate(date)\n}\n\n// directoryPath\u5185\u306eextensionName(\u62e1\u5f35\u5b50)\u3068\u4e00\u81f4\u3059\u308b\u5168\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u540d\nfunc fileNames(directoryPath: String, extensionName: String) throws -> [String] {\n    let allFileName = try NSFileManager.defaultManager().contentsOfDirectoryAtPath(directoryPath)\n    \n    var hitFileNames = [String]()\n    for fileName in allFileName {\n        if (fileName as NSString).pathExtension == extensionName {\n            hitFileNames.append(fileName)\n        }\n    }\n    return hitFileNames\n}\n\n// path\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664\nfunc removeFilePath(path: String) throws{\n    try NSFileManager.defaultManager().removeItemAtPath(path)\n}\n```\n", "tags": ["Swift2.2", "iOS"]}