{"context": " More than 1 year has passed since last update.\u3084\u308a\u305f\u3044\u3053\u3068\n\nkey\u306b\u3088\u308a\u5206\u6563\u4e26\u5217\u51e6\u7406\u3092akka\u3092\u4f7f\u3063\u3066\u5b9f\u73fe\n\u540c\u3058key\u306b\u7d10\u3065\u304f\u30c7\u30fc\u30bf\u306f\u540c\u3058node, worker\u3067\u51e6\u7406\u3055\u305b\u308b\n\n\nkey\u306b\u5bfe\u3059\u308bon memory\u96c6\u8a08\u51e6\u7406\u7684\u306a\u3082\u306e\u3092\u3057\u3066\u3044\u308b\u3002\n\n\n\u96c6\u8a08\u7d50\u679c\u306fdb(cassandra\u306b\u5404node, worker\u4e0a\u3067insert\u51e6\u7406\u3092\u3059\u308b\u3002\uff09\n\u73fe\u5728\u306e\u3068\u3053\u308d\u3001driver\u4e0a\u3067file\u8aad\u307f\u8fbc\u307f\u3057\u3066\u30011 thread\u3067\u6574\u5f62\u3057\u3066\u3001\u5404node, worker\u306b\u9001\u3063\u3066\u3044\u308b\u304c\u3001\u3053\u308c\u3092map reduce type\u306e\u51e6\u7406\u306b\u3059\u308b\u3002\n\n\noriginal\u7248\u306egearpump. plagger\u306e\u6d41\u308c\u3092\u304f\u3080\uff1ftiny map reduce system\n\n\n\n\n\napplication.conf\nakka {\n  actor {\n    provider = \"akka.cluster.ClusterActorRefProvider\"\n\n    deployment {\n      /router {\n        router = consistent-hashing-group\n        //router = round-robin-pool\n        routees.paths = [\n          \"akka.tcp://system@1\u53f7:2550/user/workers/w1\",\n          \"akka.tcp://system@1\u53f7:2550/user/workers/w2\",\n          \"akka.tcp://system@2\u53f7:2550/user/workers/w3\",\n          \"akka.tcp://system@2\u53f7:2550/user/workers/w4\",\n          \"akka.tcp://system@3\u53f7:2550/user/workers/w5\",\n          \"akka.tcp://system@3\u53f7:2550/user/workers/w6\",\n        ]\n        nr-of-instances = 1\n      }\n      target.nodes = [\n        \"akka.tcp://system@1\u53f7:2550\",\n        \"akka.tcp://system@2\u53f7:2550\",\n        \"akka.tcp://system@3\u53f7:2550\",\n      ]\n    }\n  }\n\n\n\n\nWorkers.scala\nclass Workers extends Actor {\n  context.actorOf(Props[Worker], \"w1\")\n  context.actorOf(Props[Worker], \"w2\")\n  context.actorOf(Props[Worker], \"w3\")\n  context.actorOf(Props[Worker], \"w4\")\n  context.actorOf(Props[Worker], \"w5\")\n  context.actorOf(Props[Worker], \"w6\")\n\n  def receive = {\n    case message => {\n      println(message)\n    }\n  }\n}\n\n\n\n\nNode.scala\nobject Node {\n\n  def main(args: Array[String]): Unit = {\n    val host = args(0)\n    val port = args(1)\n\n    System.setProperty(\"akka.remote.netty.tcp.hostname\", host)\n    System.setProperty(\"akka.remote.netty.tcp.port\", port)\n\n    // akka system\n    val system = ActorSystem(\"system\")\n    system.actorOf(Props[Workers], name=\"workers\")\n  }\n}\n\n\n\nMaster.scala\n// akka system\n    val system = ActorSystem(\"system\")\n    val master = system.actorOf(Props[Master], name = \"master\")\n\n    Cluster(system).subscribe(master, classOf[ClusterDomainEvent])\n\n    // generate routees\n    system.actorOf(Props[Workers], name=\"workers\")\n\n    val router = system.actorOf(FromConfig.props(Props[Aggregation]), \"router\")\n\n\n.\n.\n.\n.\n\nrouter.tell(ConsistentHashableEnvelope(Request(data), key), master)\n\n\n\n\nmemo\n\npath\u306b\u5bfe\u5fdc\u3059\u308bactor\u3092\u4f5c\u308b\u306b\u306f\u3001\u304f\u3089\u3059\u3092\u30cd\u30b9\u30c8\u3059\u308b\u3057\u304b\u306a\u3044\uff1f\n\n\n/user/mappers/m1\u3092\u4f5c\u308b\u306b\u306f\u3001Mappers actor\u3092\u4f5c\u3063\u3066\u305d\u306e\u4e2d\u3067Mapper actor\u3092name=m1\u3067\u4f5c\u308b\u5fc5\u8981\u304c\u3042\u308b\uff1f\u3053\u3093\u306a\u9762\u5012\u306a\u3053\u3068\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\uff1f for group router\u306e\u5834\u5408\n pool\u306e\u5834\u5408\u306f\u81ea\u52d5\u3067\u4f5c\u3063\u3066\u304f\u308c\u308b\u304c\u3001\u3053\u306e\u968e\u5c64\u69cb\u9020\u3082\u4e0a\u306e\u3088\u3046\u306a\u611f\u3058\n\n\nworker\u3067\u843d\u3061\u3066\u3082\u3001driver\u3092\u518d\u8d77\u52d5\u3055\u305b\u308c\u3070\u518d\u5ea6\u5168worker\u3067\u51e6\u7406\u3092\u5b9f\u65bd\u3067\u304d\u308b\u3002\n\n\nerror handling\u7b49\u306f\u304b\u306a\u308a\u5148 \n\n\n\nhttps://github.com/rikima/akka_mr\n\u3084\u308a\u305f\u3044\u3053\u3068\n\n- key\u306b\u3088\u308a\u5206\u6563\u4e26\u5217\u51e6\u7406\u3092akka\u3092\u4f7f\u3063\u3066\u5b9f\u73fe\n- \u540c\u3058key\u306b\u7d10\u3065\u304f\u30c7\u30fc\u30bf\u306f\u540c\u3058node, worker\u3067\u51e6\u7406\u3055\u305b\u308b\n - key\u306b\u5bfe\u3059\u308bon memory\u96c6\u8a08\u51e6\u7406\u7684\u306a\u3082\u306e\u3092\u3057\u3066\u3044\u308b\u3002\n- \u96c6\u8a08\u7d50\u679c\u306fdb(cassandra\u306b\u5404node, worker\u4e0a\u3067insert\u51e6\u7406\u3092\u3059\u308b\u3002\uff09\n- \u73fe\u5728\u306e\u3068\u3053\u308d\u3001driver\u4e0a\u3067file\u8aad\u307f\u8fbc\u307f\u3057\u3066\u30011 thread\u3067\u6574\u5f62\u3057\u3066\u3001\u5404node, worker\u306b\u9001\u3063\u3066\u3044\u308b\u304c\u3001\u3053\u308c\u3092map reduce type\u306e\u51e6\u7406\u306b\u3059\u308b\u3002\n - original\u7248\u306egearpump. plagger\u306e\u6d41\u308c\u3092\u304f\u3080\uff1ftiny map reduce system  \n\n```application.conf\nakka {\n  actor {\n    provider = \"akka.cluster.ClusterActorRefProvider\"\n\n    deployment {\n      /router {\n        router = consistent-hashing-group\n        //router = round-robin-pool\n        routees.paths = [\n          \"akka.tcp://system@1\u53f7:2550/user/workers/w1\",\n          \"akka.tcp://system@1\u53f7:2550/user/workers/w2\",\n          \"akka.tcp://system@2\u53f7:2550/user/workers/w3\",\n          \"akka.tcp://system@2\u53f7:2550/user/workers/w4\",\n          \"akka.tcp://system@3\u53f7:2550/user/workers/w5\",\n          \"akka.tcp://system@3\u53f7:2550/user/workers/w6\",\n        ]\n        nr-of-instances = 1\n      }\n      target.nodes = [\n        \"akka.tcp://system@1\u53f7:2550\",\n        \"akka.tcp://system@2\u53f7:2550\",\n        \"akka.tcp://system@3\u53f7:2550\",\n      ]\n    }\n  }\n\n```\n\n```Workers.scala\nclass Workers extends Actor {\n  context.actorOf(Props[Worker], \"w1\")\n  context.actorOf(Props[Worker], \"w2\")\n  context.actorOf(Props[Worker], \"w3\")\n  context.actorOf(Props[Worker], \"w4\")\n  context.actorOf(Props[Worker], \"w5\")\n  context.actorOf(Props[Worker], \"w6\")\n\n  def receive = {\n    case message => {\n      println(message)\n    }\n  }\n}\n\n```\n\n```Node.scala\nobject Node {\n\n  def main(args: Array[String]): Unit = {\n    val host = args(0)\n    val port = args(1)\n\n    System.setProperty(\"akka.remote.netty.tcp.hostname\", host)\n    System.setProperty(\"akka.remote.netty.tcp.port\", port)\n\n    // akka system\n    val system = ActorSystem(\"system\")\n    system.actorOf(Props[Workers], name=\"workers\")\n  }\n}\n```\n\n\n```Master.scala\n// akka system\n    val system = ActorSystem(\"system\")\n    val master = system.actorOf(Props[Master], name = \"master\")\n\n    Cluster(system).subscribe(master, classOf[ClusterDomainEvent])\n\n    // generate routees\n    system.actorOf(Props[Workers], name=\"workers\")\n\n    val router = system.actorOf(FromConfig.props(Props[Aggregation]), \"router\")\n\n\n.\n.\n.\n.\n\nrouter.tell(ConsistentHashableEnvelope(Request(data), key), master)\n\n```\n\n\n# memo\n\n- path\u306b\u5bfe\u5fdc\u3059\u308bactor\u3092\u4f5c\u308b\u306b\u306f\u3001\u304f\u3089\u3059\u3092\u30cd\u30b9\u30c8\u3059\u308b\u3057\u304b\u306a\u3044\uff1f\n - /user/mappers/m1\u3092\u4f5c\u308b\u306b\u306f\u3001Mappers actor\u3092\u4f5c\u3063\u3066\u305d\u306e\u4e2d\u3067Mapper actor\u3092name=m1\u3067\u4f5c\u308b\u5fc5\u8981\u304c\u3042\u308b\uff1f\u3053\u3093\u306a\u9762\u5012\u306a\u3053\u3068\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\uff1f for group router\u306e\u5834\u5408\n -  pool\u306e\u5834\u5408\u306f\u81ea\u52d5\u3067\u4f5c\u3063\u3066\u304f\u308c\u308b\u304c\u3001\u3053\u306e\u968e\u5c64\u69cb\u9020\u3082\u4e0a\u306e\u3088\u3046\u306a\u611f\u3058\n- worker\u3067\u843d\u3061\u3066\u3082\u3001driver\u3092\u518d\u8d77\u52d5\u3055\u305b\u308c\u3070\u518d\u5ea6\u5168worker\u3067\u51e6\u7406\u3092\u5b9f\u65bd\u3067\u304d\u308b\u3002\n - error handling\u7b49\u306f\u304b\u306a\u308a\u5148 \n\n\nhttps://github.com/rikima/akka_mr\n", "tags": ["Akka", "Scala"]}