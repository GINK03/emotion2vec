{"context": " More than 1 year has passed since last update.\n\n \u306a\u3093\u3067\u3053\u3093\u306a\u3053\u3068\u3092\u601d\u3063\u305f\u304b\n\u3061\u3087\u3063\u3068Haskell\u3092\u307f\u3066\u3044\u3066\u3001\u95a2\u6570\u5408\u6210\u3068\u3044\u3046\u3053\u3068\u3070\u304c\u51fa\u3066\u304d\u3066\u3001\u305d\u3046\u3044\u3048\u3070Scala\u306b\u3082\u95a2\u6570\u5408\u6210(compose\u3068\u304bandThen)\u3042\u3063\u305f\u3088\u306a\u3041\u3068\u601d\u3044\u51fa\u3057\u305f\u3002\n\u305d\u308c\u3067\u3001\u3044\u3056\u4f7f\u3063\u3066\u307f\u3088\u3046\u3068\u601d\u3063\u305f\u3089\u300c\u95a2\u6570\u3068\u306f\uff1f\u300d\u3068\u3075\u3068\u601d\u3063\u3066\u3057\u307e\u3063\u305f\u3002\n\u4ee5\u4e0b\u3001\u3042\u3093\u307e\u308a\u307e\u3068\u307e\u3063\u3066\u306a\u3044\u306e\u3067\u3001\u305d\u306e\u3046\u3061\u66f8\u304d\u306a\u304a\u3059\u304b\u3082\u3002\n\n \u30cd\u30c3\u30c8\u4e0a\u306e\u610f\u898b\n\n \u305d\u306e1\nWhat is the difference between a method and a function\nObject\u306b\u95a2\u9023\u3059\u308b\u3082\u306e\u304c\u30e1\u30bd\u30c3\u30c9\u3001\u305d\u3046\u3067\u306a\u304f\u72ec\u7acb\u3057\u3066\u3044\u308b\u3082\u306e\u304c\u95a2\u6570\u3067\u3042\u308b\u3002\n\u3075\u3080\uff1f\n\n \u305d\u306e2\nScala def versus val\nval\u304cfunction\u3001def\u304cmethod\u3067\u3042\u308b?\n\u3075\u3080\u3080\uff1f\n\n \u305d\u306e3\n\u95a2\u6570\u306b\u3057\u304b\u898b\u3048\u306a\u3044\u3082\u306e\u304c\u300c\u30e1\u30bd\u30c3\u30c9\u300d\u3068\u65b0\u305f\u306a\u540d\u524d\u3067\u547c\u3070\u308c\u308b\u7406\u7531(1)\noverride\u53ef\u80fd\u306a\u3082\u306e\u304cmethod\u3067\u3001\u4e0d\u53ef\u80fd\u306a\u3082\u306e\u304cfunction\n\u3068\u3044\u3046\u3053\u3068\u306fdef\u304cmethod\u3067\u3001val\u304cfunction\uff1f\n\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u304b\uff1f\n\n \u30e1\u30bd\u30c3\u30c9(def)\noverride \u53ef\u80fd\n/**\n * \u6587\u5b57\u5217\u3092Int\u578b\u306e\u9006\u30ea\u30b9\u30c8\u306b\u5909\u63db\n * */\nprivate def toReverseIntList(s: String): List[Int] = {\n    s.sliding(1).map(_.toInt).toList.reverse\n}\n\n\n\n \u95a2\u6570(val)\noverride \u4e0d\u53ef\u80fd\nprivate val toReverseIntList = (s: String) => {\n    s.sliding(1).map(_.toInt).toList.reverse\n}\n\n\n \u8003\u3048\u308b\n\u305d\u306e1\u304c\u66d6\u6627\u3002\nObject\u306b\u95a2\u9023\u3059\u308b\u3082\u306e\u306fdef\u3067\u3082val\u3067\u3082\u30e1\u30bd\u30c3\u30c9\u306b\u306a\u308b\u3068\u3044\u3046\u306e\u304b\uff1f\n\n \u304a\u305d\u3089\u304f\u7b54\u3048\n\u203b\u82f1\u8a9e\u306f\u8aad\u3080\u306e\u306b\u6839\u6c17\u304c\u3044\u308b\u306e\u3067\u307e\u3060\u8aad\u3081\u3066\u3044\u306a\u3044\nDifference between method and function in Scala\n\n method\u3092\u5b9a\u7fa9\u3059\u3079\u304d\u304b\u3001function\u3092\u5b9a\u7fa9\u3059\u3079\u304d\u304b\n\u306f\u3066\u3055\u3066\u30fb\u30fb\u30fb\ndef\u3067\u3082\u3001val\u3067\u3082\u95a2\u6570\u5408\u6210\u306f\u53ef\u80fd\u306a\u3093\u3060\u306a\u3041\n\n \u95a2\u6570\u5408\u6210\n\n def \u30d0\u30fc\u30b8\u30e7\u30f3\n/**\n * Created by FScoward on 15/01/18.\n */\nobject Luhn {\n\n  /**\n   * Luhn algorithm\n   * */\n  def isValid(s: String): Boolean = {\n    // val list = doubleOddValues(toReverseIntList(s))\n    // sum(list) % 10 == 0\n    // \u2191\u306f\u3044\u3064\u3082\u306e\u4f7f\u3044\u65b9\n    (sum _ compose doubleOddValues _ compose toReverseIntList _)(s) % 10 == 0\n  }\n\n  /**\n   * \u5076\u6570\u6841\u306e\u5024\u3092\u500d\u306b\u3057\u3066\u8fd4\u3059\n   * */\n  private def doubleOddValues(list: List[Int]): List[Int] = {\n    (0 until list.size).map(i => {\n      if (i % 2 == 0) {\n        list(i)\n      } else {\n        list(i) * 2\n      }\n    }).toList\n  }\n\n  /**\n   * \u6587\u5b57\u5217\u3092Int\u578b\u306e\u9006\u30ea\u30b9\u30c8\u306b\u5909\u63db\n   * */\n  private def toReverseIntList(s: String): List[Int] = {\n    s.sliding(1).map(_.toInt).toList.reverse\n  }\n\n  /**\n   * \u30ea\u30b9\u30c8\u306e\u5024\u3092\u5408\u8a08\u3059\u308b\n   * \u4f46\u3057\u30012\u6841\u4ee5\u4e0a\u306e\u6570\u5b57\u306f\u5206\u5272\u3057\u3066\u52a0\u7b97\u3059\u308b\n   * */\n  private def sum(list: List[Int]) = {\n    list.map(i => {\n      i match {\n        case i if i > 9 => {\n          i.toString.sliding(1).map(_.toInt).sum\n        }\n        case i => {\n          i\n        }\n      }\n    }).toList.sum\n  }\n}\n\n\n\n val \u30d0\u30fc\u30b8\u30e7\u30f3\nobject Luhn {\n\n  /**\n   * Luhn algorithm\n   * */\n  def isValid(s: String): Boolean = {\n    (sum compose doubleOddValues compose toReverseIntList)(s) % 10 == 0\n  }\n\n  /**\n   * \u5076\u6570\u6841\u306e\u5024\u3092\u500d\u306b\u3057\u3066\u8fd4\u3059\n   * */\n  private val doubleOddValues = (list: List[Int]) => {\n    (0 until list.size).map(i => {\n      if (i % 2 == 0) {\n        list(i)\n      } else {\n        list(i) * 2\n      }\n    }).toList\n  }\n\n  /**\n   * \u6587\u5b57\u5217\u3092Int\u578b\u306e\u9006\u30ea\u30b9\u30c8\u306b\u5909\u63db\n   * */\n  private val toReverseIntList = (s: String) => {\n    s.sliding(1).map(_.toInt).toList.reverse\n  }\n\n  /**\n   * \u30ea\u30b9\u30c8\u306e\u5024\u3092\u5408\u8a08\u3059\u308b\n   * \u4f46\u3057\u30012\u6841\u4ee5\u4e0a\u306e\u6570\u5b57\u306f\u5206\u5272\u3057\u3066\u52a0\u7b97\u3059\u308b\n   * */\n  private val sum = (list: List[Int]) => {\n    list.map(i => {\n      i match {\n        case i if i > 9 => {\n          i.toString.sliding(1).map(_.toInt).sum\n        }\n        case i => {\n          i\n        }\n      }\n    }).toList.sum\n  }\n}\n\n\u306a\u304a\u3001sum\u3060\u3051val sum = (list: List[Int]) =>\u306e\u5f62\u3067\u66f8\u3051\u3070\u3042\u3068\u306fdef\u3067\u66f8\u3044\u3066\u3082\u95a2\u6570\u5408\u6210\u3067\u304d\u308b\u3002\n\n \u9055\u3044\ndef \u30d0\u30fc\u30b8\u30e7\u30f3 \u3060\u3068_\u3067\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5316\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n \u3064\u307e\u308a\ndef \u306f\u95a2\u6570\u3067\u306f\u306a\u3044\uff1f\n\n \u3088\u304f\u308f\u304b\u3089\u306a\u3044\n\u8a00\u8a9e\u306b\u8a73\u3057\u3044\u8af8\u5144\u65b9\u306e\u3054\u610f\u898b\u304f\u3060\u3055\u3044\u3002\n# <i class=\"fa fa-anchor\" style=\"font-size:1em;\"></i> \u306a\u3093\u3067\u3053\u3093\u306a\u3053\u3068\u3092\u601d\u3063\u305f\u304b\n\u3061\u3087\u3063\u3068Haskell\u3092\u307f\u3066\u3044\u3066\u3001\u95a2\u6570\u5408\u6210\u3068\u3044\u3046\u3053\u3068\u3070\u304c\u51fa\u3066\u304d\u3066\u3001\u305d\u3046\u3044\u3048\u3070Scala\u306b\u3082\u95a2\u6570\u5408\u6210(compose\u3068\u304bandThen)\u3042\u3063\u305f\u3088\u306a\u3041\u3068\u601d\u3044\u51fa\u3057\u305f\u3002\n\u305d\u308c\u3067\u3001\u3044\u3056\u4f7f\u3063\u3066\u307f\u3088\u3046\u3068\u601d\u3063\u305f\u3089\u300c\u95a2\u6570\u3068\u306f\uff1f\u300d\u3068\u3075\u3068\u601d\u3063\u3066\u3057\u307e\u3063\u305f\u3002\n\n\u4ee5\u4e0b\u3001\u3042\u3093\u307e\u308a\u307e\u3068\u307e\u3063\u3066\u306a\u3044\u306e\u3067\u3001\u305d\u306e\u3046\u3061\u66f8\u304d\u306a\u304a\u3059\u304b\u3082\u3002\n\n# <i class=\"fa fa-comment\" style=\"font-size:1em;\"></i> \u30cd\u30c3\u30c8\u4e0a\u306e\u610f\u898b\n\n## <i class=\"fa fa-comments\" style=\"font-size:1em;\"></i> \u305d\u306e1\n[What is the difference between a method and a function](http://stackoverflow.com/questions/155609/what-is-the-difference-between-a-method-and-a-function)\n\nObject\u306b\u95a2\u9023\u3059\u308b\u3082\u306e\u304c\u30e1\u30bd\u30c3\u30c9\u3001\u305d\u3046\u3067\u306a\u304f\u72ec\u7acb\u3057\u3066\u3044\u308b\u3082\u306e\u304c\u95a2\u6570\u3067\u3042\u308b\u3002\n\u3075\u3080\uff1f\n\n## <i class=\"fa fa-comments\" style=\"font-size:1em;\"></i> \u305d\u306e2\n[Scala def versus val](http://stackoverflow.com/questions/3646756/scala-def-versus-val)\nval\u304cfunction\u3001def\u304cmethod\u3067\u3042\u308b?\n\u3075\u3080\u3080\uff1f\n\n## <i class=\"fa fa-comments\" style=\"font-size:1em;\"></i> \u305d\u306e3\n[\u95a2\u6570\u306b\u3057\u304b\u898b\u3048\u306a\u3044\u3082\u306e\u304c\u300c\u30e1\u30bd\u30c3\u30c9\u300d\u3068\u65b0\u305f\u306a\u540d\u524d\u3067\u547c\u3070\u308c\u308b\u7406\u7531(1)](http://d.hatena.ne.jp/amapetas/20111114/1321237707)\n\noverride\u53ef\u80fd\u306a\u3082\u306e\u304cmethod\u3067\u3001\u4e0d\u53ef\u80fd\u306a\u3082\u306e\u304cfunction\n\u3068\u3044\u3046\u3053\u3068\u306fdef\u304cmethod\u3067\u3001val\u304cfunction\uff1f\n\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u304b\uff1f\n\n### <i class=\"fa fa-question\" style=\"font-size:1em;\"></i> \u30e1\u30bd\u30c3\u30c9(def)\noverride \u53ef\u80fd\n\n```scala\n/**\n * \u6587\u5b57\u5217\u3092Int\u578b\u306e\u9006\u30ea\u30b9\u30c8\u306b\u5909\u63db\n * */\nprivate def toReverseIntList(s: String): List[Int] = {\n    s.sliding(1).map(_.toInt).toList.reverse\n}\n\n```\n\n### <i class=\"fa fa-question\" style=\"font-size:1em;\"></i> \u95a2\u6570(val)\noverride \u4e0d\u53ef\u80fd\n\n```scala\nprivate val toReverseIntList = (s: String) => {\n    s.sliding(1).map(_.toInt).toList.reverse\n}\n```\n\n# <i class=\"fa fa-mortar-board\" style=\"font-size:1em;\"></i> \u8003\u3048\u308b\n\u305d\u306e1\u304c\u66d6\u6627\u3002\nObject\u306b\u95a2\u9023\u3059\u308b\u3082\u306e\u306fdef\u3067\u3082val\u3067\u3082\u30e1\u30bd\u30c3\u30c9\u306b\u306a\u308b\u3068\u3044\u3046\u306e\u304b\uff1f\n\n# <i class=\"fa fa-key\" style=\"font-size:1em;\"></i> \u304a\u305d\u3089\u304f\u7b54\u3048\n\u203b\u82f1\u8a9e\u306f\u8aad\u3080\u306e\u306b\u6839\u6c17\u304c\u3044\u308b\u306e\u3067\u307e\u3060\u8aad\u3081\u3066\u3044\u306a\u3044\n[Difference between method and function in Scala](\nhttp://stackoverflow.com/questions/2529184/difference-between-method-and-function-in-scala)\n\n# <i class=\"fa fa-spinner\" style=\"font-size:1em;\"></i> method\u3092\u5b9a\u7fa9\u3059\u3079\u304d\u304b\u3001function\u3092\u5b9a\u7fa9\u3059\u3079\u304d\u304b\n\u306f\u3066\u3055\u3066\u30fb\u30fb\u30fb\n\ndef\u3067\u3082\u3001val\u3067\u3082\u95a2\u6570\u5408\u6210\u306f\u53ef\u80fd\u306a\u3093\u3060\u306a\u3041\n\n# <i class=\"fa fa-puzzle-piece\" style=\"font-size:1em;\"></i> \u95a2\u6570\u5408\u6210\n\n## <i class=\"fa fa-terminal\" style=\"font-size:1em;\"></i> def \u30d0\u30fc\u30b8\u30e7\u30f3\n```scala\n/**\n * Created by FScoward on 15/01/18.\n */\nobject Luhn {\n \n  /**\n   * Luhn algorithm\n   * */\n  def isValid(s: String): Boolean = {\n    // val list = doubleOddValues(toReverseIntList(s))\n    // sum(list) % 10 == 0\n    // \u2191\u306f\u3044\u3064\u3082\u306e\u4f7f\u3044\u65b9\n    (sum _ compose doubleOddValues _ compose toReverseIntList _)(s) % 10 == 0\n  }\n \n  /**\n   * \u5076\u6570\u6841\u306e\u5024\u3092\u500d\u306b\u3057\u3066\u8fd4\u3059\n   * */\n  private def doubleOddValues(list: List[Int]): List[Int] = {\n    (0 until list.size).map(i => {\n      if (i % 2 == 0) {\n        list(i)\n      } else {\n        list(i) * 2\n      }\n    }).toList\n  }\n \n  /**\n   * \u6587\u5b57\u5217\u3092Int\u578b\u306e\u9006\u30ea\u30b9\u30c8\u306b\u5909\u63db\n   * */\n  private def toReverseIntList(s: String): List[Int] = {\n    s.sliding(1).map(_.toInt).toList.reverse\n  }\n \n  /**\n   * \u30ea\u30b9\u30c8\u306e\u5024\u3092\u5408\u8a08\u3059\u308b\n   * \u4f46\u3057\u30012\u6841\u4ee5\u4e0a\u306e\u6570\u5b57\u306f\u5206\u5272\u3057\u3066\u52a0\u7b97\u3059\u308b\n   * */\n  private def sum(list: List[Int]) = {\n    list.map(i => {\n      i match {\n        case i if i > 9 => {\n          i.toString.sliding(1).map(_.toInt).sum\n        }\n        case i => {\n          i\n        }\n      }\n    }).toList.sum\n  }\n}\n \n```\n\n## <i class=\"fa fa-terminal\" style=\"font-size:1em;\"></i> val \u30d0\u30fc\u30b8\u30e7\u30f3\n```scala\nobject Luhn {\n\n  /**\n   * Luhn algorithm\n   * */\n  def isValid(s: String): Boolean = {\n    (sum compose doubleOddValues compose toReverseIntList)(s) % 10 == 0\n  }\n\n  /**\n   * \u5076\u6570\u6841\u306e\u5024\u3092\u500d\u306b\u3057\u3066\u8fd4\u3059\n   * */\n  private val doubleOddValues = (list: List[Int]) => {\n    (0 until list.size).map(i => {\n      if (i % 2 == 0) {\n        list(i)\n      } else {\n        list(i) * 2\n      }\n    }).toList\n  }\n\n  /**\n   * \u6587\u5b57\u5217\u3092Int\u578b\u306e\u9006\u30ea\u30b9\u30c8\u306b\u5909\u63db\n   * */\n  private val toReverseIntList = (s: String) => {\n    s.sliding(1).map(_.toInt).toList.reverse\n  }\n\n  /**\n   * \u30ea\u30b9\u30c8\u306e\u5024\u3092\u5408\u8a08\u3059\u308b\n   * \u4f46\u3057\u30012\u6841\u4ee5\u4e0a\u306e\u6570\u5b57\u306f\u5206\u5272\u3057\u3066\u52a0\u7b97\u3059\u308b\n   * */\n  private val sum = (list: List[Int]) => {\n    list.map(i => {\n      i match {\n        case i if i > 9 => {\n          i.toString.sliding(1).map(_.toInt).sum\n        }\n        case i => {\n          i\n        }\n      }\n    }).toList.sum\n  }\n}\n```\n\n\u306a\u304a\u3001sum\u3060\u3051`val sum = (list: List[Int]) =>`\u306e\u5f62\u3067\u66f8\u3051\u3070\u3042\u3068\u306fdef\u3067\u66f8\u3044\u3066\u3082\u95a2\u6570\u5408\u6210\u3067\u304d\u308b\u3002\n\n# <i class=\"fa fa-exchange\" style=\"font-size:1em;\"></i> \u9055\u3044\ndef \u30d0\u30fc\u30b8\u30e7\u30f3 \u3060\u3068`_`\u3067\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5316\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n# <i class=\"fa fa-child\" style=\"font-size:1em;\"></i> \u3064\u307e\u308a\ndef \u306f\u95a2\u6570\u3067\u306f\u306a\u3044\uff1f\n\n# <i class=\"fa fa-question-circle\" style=\"font-size:1em;\"></i> \u3088\u304f\u308f\u304b\u3089\u306a\u3044\n\u8a00\u8a9e\u306b\u8a73\u3057\u3044\u8af8\u5144\u65b9\u306e\u3054\u610f\u898b\u304f\u3060\u3055\u3044\u3002\n", "tags": ["Scala", "\u95a2\u6570\u578b\u8a00\u8a9e"]}