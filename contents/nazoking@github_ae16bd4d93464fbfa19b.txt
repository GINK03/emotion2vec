{"context": "http://scikit-learn.org/stable/tutorial/basic/tutorial.html \u3092 google\u7ffb\u8a33\u3057\u305f\u3002\nscikit-learn 0.18 \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb \u76ee\u6b21\n\n\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u5185\u5bb9\n\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001scikit-learn \u3067\u4f7f\u7528\u3055\u308c\u308b\u6a5f\u68b0\u5b66\u7fd2\u306e\u7528\u8a9e\u3092\u7d39\u4ecb\u3057\u3001\u7c21\u5358\u306a\u5b66\u7fd2\u306e\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\n\n\u6a5f\u68b0\u5b66\u7fd2\uff1a\u554f\u984c\u306e\u8a2d\u5b9a\n\u4e00\u822c\u306b\u3001\u5b66\u7fd2\u554f\u984c\u306f\u3001n\u500b\u306e\u30c7\u30fc\u30bf\u30b5\u30f3\u30d7\u30eb\u306e\u96c6\u5408\u3092\u8003\u616e\u3057\u3001\u672a\u77e5\u306e\u30c7\u30fc\u30bf\u306e\u7279\u6027\u3092\u4e88\u6e2c\u3057\u3088\u3046\u3068\u3059\u308b\u3002\u5404\u30b5\u30f3\u30d7\u30eb\u304c\u5358\u4e00\u306e\u6570\u5024\u3088\u308a\u3082\u5927\u304d\u3044\u5834\u5408\u3001\u307e\u305f\u306f\u591a\u6b21\u5143\u9805\u76ee\uff08\u591a\u5909\u91cf\u3068\u3082\u547c\u3070\u308c\u307e\u3059\uff09\u306e\u5834\u5408\u306f\u3001\u3044\u304f\u3064\u304b\u306e\u5c5e\u6027\u307e\u305f\u306f\u7279\u5fb4\u91cf\u3092\u6301\u3064\u3068\u8a00\u308f\u308c\u307e\u3059\u3002\n\u5927\u304d\u306a\u30ab\u30c6\u30b4\u30ea\u3067\u5b66\u7fd2\u554f\u984c\u3092\u3044\u304f\u3064\u304b\u306b\u5206\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n\n\u6559\u5e2b\u3042\u308a\u5b66\u7fd2\u3067\u306f\u3001\u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u306f\u4e88\u6e2c\u3057\u305f\u3044\u5c5e\u6027\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3044\u307e\u3059\uff08\u3053\u3053\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066scikit-learn\u6559\u5e2b\u4ed8\u304d\u5b66\u7fd2\u30da\u30fc\u30b8\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u304f\u3060\u3055\u3044\uff09\u3002\u3053\u306e\u554f\u984c\u306f\u6b21\u306e\u3044\u305a\u308c\u304b\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n\n\u5206\u985e\uff1a\u6a19\u672c\u306f2\u3064\u4ee5\u4e0a\u306e\u30af\u30e9\u30b9\u306b\u5c5e\u3057\u3001\u30e9\u30d9\u30eb\u4ed8\u3051\u3055\u308c\u3066\u3044\u306a\u3044\u30c7\u30fc\u30bf\u306e\u30af\u30e9\u30b9\u3092\u4e88\u6e2c\u3059\u308b\u65b9\u6cd5\u3092\u65e2\u306b\u30e9\u30d9\u30eb\u4ed8\u3051\u3055\u308c\u305f\u30c7\u30fc\u30bf\u304b\u3089\u5b66\u7fd2\u3057\u305f\u3044\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002\u5206\u985e\u554f\u984c\u306e\u4f8b\u306f\u3001\u624b\u66f8\u304d\u6570\u5b57\u8a8d\u8b58\u3067\u3042\u308a\u3001\u305d\u306e\u76ee\u7684\u306f\u3001\u5404\u5165\u529b\u30d9\u30af\u30c8\u30eb\u3092\u6709\u9650\u6570\u306e\u96e2\u6563\u30ab\u30c6\u30b4\u30ea\u306e1\u3064\u306b\u5272\u308a\u5f53\u3066\u308b\u3053\u3068\u3067\u3042\u308b\u3002\u5206\u985e\u3092\u8003\u3048\u308b\u3082\u3046\u4e00\u3064\u306e\u65b9\u6cd5\u306f\u3001\u9650\u3089\u308c\u305f\u6570\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u3057\u304b\u6301\u305f\u305a\u3001\u63d0\u4f9b\u3055\u308c\u305fn\u500b\u306e\u30b5\u30f3\u30d7\u30eb\u306e\u305d\u308c\u305e\u308c\u306b\u3064\u3044\u3066\u3001\u6b63\u3057\u3044\u30ab\u30c6\u30b4\u30ea\u30fc\u307e\u305f\u306f\u30af\u30e9\u30b9\u3067\u305d\u308c\u3089\u3092\u30e9\u30d9\u30eb\u4ed8\u3051\u3057\u3088\u3046\u3068\u3059\u308b\u3001\u72ec\u7acb\u578b\uff08\u9023\u7d9a\u7684\u3067\u306f\u306a\u304f\uff09\u9023\u7d9a\u578b\u306e\u6559\u5e2b\u3042\u308a\u5b66\u7fd2\u3067\u3042\u308b\u3002\n\n\u56de\u5e30\uff1a\u6240\u671b\u306e\u51fa\u529b\u304c1\u3064\u4ee5\u4e0a\u306e\u9023\u7d9a\u5909\u6570\u304b\u3089\u306a\u308b\u5834\u5408\u3001\u30bf\u30b9\u30af\u306f\u56de\u5e30\u3068\u547c\u3070\u308c\u307e\u3059\u3002\u56de\u5e30\u554f\u984c\u306e\u4f8b\u306f\u3001\u5e74\u4ee4\u3068\u4f53\u91cd\u306e\u95a2\u6570\u3068\u3057\u3066\u30b5\u30b1\u306e\u9577\u3055\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u3067\u3059\u3002\n\n\n\n\u6559\u5e2b\u306a\u3057\u5b66\u7fd2\u3067\u306f\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u306f\u3001\u5bfe\u5fdc\u3059\u308b\u76ee\u6a19\u5024\u306e\u306a\u3044\u5165\u529b\u30d9\u30af\u30c8\u30ebx\u306e\u96c6\u5408\u3067\u3042\u308b\u3002\u3053\u306e\u3088\u3046\u306a\u554f\u984c\u306e\u76ee\u6a19\u306f\u3001\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3068\u547c\u3070\u308c\u308b\u30c7\u30fc\u30bf\u5185\u306e\u985e\u4f3c\u3057\u305f\u4f8b\u306e\u30b0\u30eb\u30fc\u30d7\u3092\u767a\u898b\u3057\u305f\u308a\u3001\u5bc6\u5ea6\u63a8\u5b9a\u3068\u547c\u3070\u308c\u308b\u5165\u529b\u7a7a\u9593\u5185\u306e\u30c7\u30fc\u30bf\u306e\u5206\u5e03\u3092\u6c7a\u5b9a\u3057\u305f\u308a\u3001\u9ad8\u6b21\u5143\u8996\u899a\u5316\u306e\u76ee\u7684\u306e\u305f\u3081\u306b\u30012\u6b21\u5143\u307e\u305f\u306f3\u6b21\u5143\u306e\u7a7a\u9593\uff08Scikit-Learn unsupervised learning\u30da\u30fc\u30b8\u306b\u884c\u304f\u306b\u306f\u3053\u3053\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u304f\u3060\u3055\u3044\uff09\u3002\n\n\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u3068\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\n\u6a5f\u68b0\u5b66\u7fd2\u306e\u76ee\u7684\u306f\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u3044\u304f\u3064\u304b\u306e\u7279\u6027\u3092\u5b66\u7fd2\u3057\u3001\u305d\u308c\u3089\u3092\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u306b\u9069\u7528\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u6a5f\u68b0\u5b66\u7fd2\u3067\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u8a55\u4fa1\u3059\u308b\u4e00\u822c\u7684\u306a\u65b9\u6cd5\u3067\u306f\u3001\u624b\u5143\u306b\u3042\u308b\u30c7\u30fc\u30bf\u30922\u3064\u306e\u30bb\u30c3\u30c8\u306b\u5206\u3051\u307e\u3059\u30021\u3064\u306f\u30c7\u30fc\u30bf\u7279\u6027\u3092\u5b66\u7fd2\u3059\u308b \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8 \u3068\u547c\u3070\u308c\u3001\u3082\u30461\u3064\u306f\u7279\u6027\u3092\u30c6\u30b9\u30c8\u3059\u308b \u30c6\u30b9\u30c8\u30bb\u30c3\u30c8 \u3068\u547c\u3070\u308c\u307e\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\nscikit-learn\u306b\u306f\u3001\u5206\u985e\u306e\u305f\u3081\u306e iris \u3084 digits \u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3084\u3001\u56de\u5e30\u306e\u305f\u3081\u306e \u30dc\u30b9\u30c8\u30f3\u306e\u4f4f\u5b85\u4fa1\u683c \u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306a\u3069\u3001\u3044\u304f\u3064\u304b\u306e\u6a19\u6e96\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u4ed8\u5c5e\u3057\u3066\u3044\u307e\u3059\u3002\n\u4ee5\u4e0b\u3067\u306f\u3001\u30b7\u30a7\u30eb\u304b\u3089Python\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3092\u8d77\u52d5\u3057\u3001iris \u3068 digits \u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\u79c1\u305f\u3061\u306e\u8868\u8a18\u6cd5\u3067\u306f\u3001 $ \u306f\u30b7\u30a7\u30eb\u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u8868\u3057\u3001 >>> \u306fPython\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u8868\u3057\u307e\u3059\u3002\n$ python\n>>> from sklearn import datasets\n>>> iris = datasets.load_iris()\n>>> digits = datasets.load_digits()\n\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u3001\u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u3068\u305d\u306e\u30c7\u30fc\u30bf\u306b\u95a2\u3059\u308b\u4e00\u90e8\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u4fdd\u6301\u3059\u308b\u8f9e\u66f8\u7684\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002\u3053\u306e\u30c7\u30fc\u30bf\u306f .data \u30e1\u30f3\u30d0\u30fc\u306b\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u306f n_samples, n_features \u306e\u914d\u5217\u3067\u3059\u3002\u6559\u5e2b\u3042\u308a\u306e\u5834\u5408\u30011\u3064\u4ee5\u4e0a\u306e\u5fdc\u7b54\u5909\u6570\u304c .target \u30e1\u30f3\u30d0\u30fc\u306b\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002\u7570\u306a\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001\u5c02\u7528\u30bb\u30af\u30b7\u30e7\u30f3 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u305f\u3068\u3048\u3070\u3001digits \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5834\u5408\u3001 digits.data \u306f\u3001\u6570\u5b57\u30b5\u30f3\u30d7\u30eb\u3092\u5206\u985e\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3067\u304d\u308b\u7279\u5fb4\u91cf\u306b\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002\n>>> print(digits.data)  \n[[  0.   0.   5. ...,   0.   0.   0.]\n [  0.   0.   0. ...,  10.   0.   0.]\n [  0.   0.   0. ...,  16.   9.   0.]\n ...,\n [  0.   0.   1. ...,   6.   0.   0.]\n [  0.   0.   2. ...,  12.   0.   0.]\n [  0.   0.  10. ...,  12.   1.   0.]]\n\ndigits.target \u306f\u3001digits \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u6839\u62e0\u3068\u306a\u308b\u771f\u7406\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u5b66\u7fd2\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u5404\u6570\u5b57\u306e\u753b\u50cf\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u3067\u3059\u3002\n>>> digits.target\narray([0, 1, 2, ..., 8, 9, 8])\n\n\u30c7\u30fc\u30bf\u914d\u5217\u306e\u5f62\u72b6\n\u5143\u306e\u30c7\u30fc\u30bf\u306e\u5f62\u72b6\u306f\u7570\u306a\u3063\u3066\u3044\u3066\u3082\u3001\u30c7\u30fc\u30bf\u306f\u5e38\u306b2\u6b21\u5143\u914d\u5217\u3001\u5f62\u72b6 (n_samples, n_features) \u3067\u3059\u3002\u6570\u5b57\u306e\u5834\u5408\u3001\u5404\u5143\u306e\u30b5\u30f3\u30d7\u30eb\u306f\u5f62\u72b6\u306e\u753b\u50cf (8,8) \u3067\u3042\u308a\u3001\u4ee5\u4e0b\u3092\u4f7f\u7528\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n>>> digits.images[0]\narray([[  0.,   0.,   5.,  13.,   9.,   1.,   0.,   0.],\n       [  0.,   0.,  13.,  15.,  10.,  15.,   5.,   0.],\n       [  0.,   3.,  15.,   2.,   0.,  11.,   8.,   0.],\n       [  0.,   4.,  12.,   0.,   0.,   8.,   8.,   0.],\n       [  0.,   5.,   8.,   0.,   0.,   9.,   8.,   0.],\n       [  0.,   4.,  11.,   0.,   1.,  12.,   7.,   0.],\n       [  0.,   2.,  14.,   5.,  10.,  12.,   0.,   0.],\n       [  0.,   0.,   6.,  13.,  10.,   0.,   0.,   0.]])\n\n\u3053\u306e \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u7c21\u5358\u306a\u4f8b \u306f\u3001\u5143\u306e\u554f\u984c\u304b\u3089\u59cb\u307e\u3063\u3066scikit-learn\u3067\u6d88\u8cbb\u3059\u308b\u30c7\u30fc\u30bf\u3092\u3069\u306e\u3088\u3046\u306b\u5f62\u6210\u3067\u304d\u308b\u304b\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\n\u5916\u90e8\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089\u306e\u30ed\u30fc\u30c9\n\u5916\u90e8\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089\u30ed\u30fc\u30c9\u3059\u308b\u306b\u306f\u3001\u5916\u90e8\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30ed\u30fc\u30c9 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u5b66\u7fd2\u3068\u4e88\u6e2c\ndigits \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5834\u5408\u3001\u30bf\u30b9\u30af\u306f\u3001\u753b\u50cf\u304c\u4e0e\u3048\u3089\u308c\u308b\u3068\u3001\u305d\u308c\u304c\u3069\u306e\u6570\u5b57\u3092\u8868\u3059\u304b\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u3067\u3042\u308b\u3002\u672a\u77e5\u306e\u30b5\u30f3\u30d7\u30eb\u304c\u5c5e\u3059\u308b\u30af\u30e9\u30b9\u3092\u4e88\u6e2c\u3067\u304d\u308b\u3088\u3046\u306b\u3001\u63a8\u5b9a\u5668 \u306b\u306f10\u306e\u53ef\u80fd\u30af\u30e9\u30b9\uff08\u30bc\u30ed\u304b\u30899\u307e\u3067\u306e\u6570\u5b57\uff09\u306e\u30b5\u30f3\u30d7\u30eb\u304c\u305d\u308c\u305e\u308c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\nscikit-learn\u3067\u306f\u3001\u5206\u985e\u306e\u305f\u3081\u306e\u63a8\u5b9a\u5668\u306f fit(X, y) \u3068 predict(T) \u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308bPython\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002\n\u63a8\u5b9a\u5668\u306e\u4f8b\u306f\u3001\u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30bf\u30fc\u5206\u985e\u3092\u5b9f\u88c5\u3059\u308b\u30af\u30e9\u30b9 sklearn.svm.SVC \u3067\u3059\u3002\u63a8\u5b9a\u5668\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u5f15\u6570\u3068\u3057\u3066\u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3068\u308a\u307e\u3059\u304c\u3001\u5f53\u9762\u306f\u63a8\u5b9a\u5668\u3092\u30d6\u30e9\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3068\u898b\u306a\u3057\u307e\u3059\uff1a\n>>> from sklearn import svm\n>>> clf = svm.SVC(gamma=0.001, C=100.)\n\n\n\u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u9078\u629e\n\u3053\u306e\u4f8b\u3067\u306f\u3001 gamma \u306e\u5024\u3092\u624b\u52d5\u3067\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30b0\u30ea\u30c3\u30c9\u691c\u7d22 \u3084 \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3 \u306a\u3069\u306e\u30c4\u30fc\u30eb\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u9069\u5207\u306a\u5024\u3092\u81ea\u52d5\u7684\u306b\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u63a8\u5b9a\u5668\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092 clf \u3068\u3057\u307e\u3057\u305f\u304c\u3001\u3053\u308c\u306f\u5206\u985e\u5668\u3067\u3042\u308b\u305f\u3081\u3067\u3059\u3002\u30e2\u30c7\u30eb\u306b fit \u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u30e2\u30c7\u30eb\u304b\u3089\u5b66\u7fd2\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u3092 fit \u30e1\u30bd\u30c3\u30c9\u306b\u6e21\u3059\u3053\u3068\u306b\u3088\u3063\u3066\u884c\u308f\u308c\u307e\u3059\u3002\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u3068\u3057\u3066\u3001\u6700\u5f8c\u306e\u3092\u9664\u304f\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u3059\u3079\u3066\u306e\u753b\u50cf\u3092\u4f7f\u7528\u3057\u307e\u3057\u3087\u3046\u3002\u3053\u306e\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u306f\u3001 [:-1] Python\u69cb\u6587\u3067\u9078\u629e\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001digits.data \u306e\u6700\u5f8c\u306e\u30a8\u30f3\u30c8\u30ea\u4ee5\u5916\u306e\u3059\u3079\u3066\u3092\u542b\u3080\u65b0\u3057\u3044\u914d\u5217\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n>>> clf.fit(digits.data[:-1], digits.target[:-1])  \nSVC(C=100.0, cache_size=200, class_weight=None, coef0=0.0,\n  decision_function_shape=None, degree=3, gamma=0.001, kernel='rbf',\n  max_iter=-1, probability=False, random_state=None, shrinking=True,\n  tol=0.001, verbose=False)\n\n\u65b0\u3057\u3044\u5024\u3092\u4e88\u6e2c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3067\u306f\u3001\u5206\u985e\u5668\u3092\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3001digits \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u6700\u5f8c\u306e\u753b\u50cf\u306f\u3069\u306e\u6570\u5b57\u3067\u3059\u304b\uff1f\n>>> clf.predict(digits.data[-1:])\narray([8])\n\n\u5bfe\u5fdc\u3059\u308b\u30a4\u30e1\u30fc\u30b8\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n\u3054\u89a7\u306e\u3068\u304a\u308a\u3001\u3053\u308c\u306f\u96e3\u3057\u3044\u8ab2\u984c\u3067\u3059\u3002\u753b\u50cf\u306e\u89e3\u50cf\u5ea6\u304c\u4f4e\u3044\u3067\u3059\u3002\u3042\u306a\u305f\u306f\u5206\u985e\u5668\u306b\u540c\u610f\u3057\u307e\u3059\u304b\uff1f\n\u3053\u306e\u5206\u985e\u554f\u984c\u306e\u5b8c\u5168\u306a\u4f8b\u306f\u3001\u5b9f\u884c\u3057\u3066\u5b66\u7fd2\u3067\u304d\u308b\u4f8b\u3068\u3057\u3066\u5229\u7528\u3067\u304d\u307e\u3059\u3002\u624b\u66f8\u304d\u6570\u5b57\u306e\u8a8d\u8b58\n\n\u30e2\u30c7\u30eb\u306e\u6c38\u7d9a\u6027\nPython\u306e\u7d44\u307f\u8fbc\u307f\u6c38\u7d9a\u5316\u30e2\u30b8\u30e5\u30fc\u30eb\u3001\u3064\u307e\u308apickle\u3092\u4f7f\u3063\u3066\u3001scikit\u306e\u30e2\u30c7\u30eb\u3092\u4fdd\u5b58\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\uff1a\n>>> from sklearn import svm\n>>> from sklearn import datasets\n>>> clf = svm.SVC()\n>>> iris = datasets.load_iris()\n>>> X, y = iris.data, iris.target\n>>> clf.fit(X, y)  \nSVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n  decision_function_shape=None, degree=3, gamma='auto', kernel='rbf',\n  max_iter=-1, probability=False, random_state=None, shrinking=True,\n  tol=0.001, verbose=False)\n\n>>> import pickle\n>>> s = pickle.dumps(clf)\n>>> clf2 = pickle.loads(s)\n>>> clf2.predict(X[0:1])\narray([0])\n>>> y[0]\n0\n\nscikit\u306e\u7279\u5b9a\u306e\u30b1\u30fc\u30b9\u3067\u306f\u3001joblib\u306epickle\uff08 joblib.dump \u304a\u3088\u3073 joblib.load \uff09\u306e\u7f6e\u304d\u63db\u3048\u3092\u4f7f\u7528\u3059\u308b\u65b9\u304c\u3088\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e\u305f\u3060\u3001\u5927\u304d\u306a\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u306f\u3088\u308a\u52b9\u7387\u7684\u3067\u3059\u304c\u3001\u30c7\u30a3\u30b9\u30af\u306b\u3057\u304b\u4fdd\u5b58\u3067\u304d\u307e\u305b\u3093\u3002\n>>> from sklearn.externals import joblib\n>>> joblib.dump(clf, 'filename.pkl') \n\n\u5f8c\u3067pickle\u3055\u308c\u305f\u30e2\u30c7\u30eb\u3092\uff08\u304a\u305d\u3089\u304f\u5225\u306ePython\u30d7\u30ed\u30bb\u30b9\u3067\uff09\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n>>> clf = joblib.load('filename.pkl') \n\n\n\u6ce8\u610f joblib.dump \u95a2\u6570\u3068 joblib.load \u95a2\u6570\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u4ee3\u308f\u308a\u306b file-like \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3082\u53d7\u3051\u5165\u308c\u307e\u3059\u3002 Joblib\u3067\u306e\u30c7\u30fc\u30bf\u6c38\u7d9a\u6027\u306e\u8a73\u7d30\u306f\u3001 \u3053\u3061\u3089 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\npickle\u306b\u306f\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u3068\u4fdd\u5b88\u6027\u306e\u554f\u984c\u304c\u3044\u304f\u3064\u304b\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 scikit-learn\u306b\u3088\u308b\u30e2\u30c7\u30eb\u306e\u6c38\u7d9a\u6027\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001\u300c\u30e2\u30c7\u30eb\u306e\u6c38\u7d9a\u6027\u300d\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u898f\u7d04\nscikit-learn\u63a8\u5b9a\u5668\u306f\u3001\u305d\u306e\u884c\u52d5\u3092\u3088\u308a\u4e88\u6e2c\u7684\u306b\u3059\u308b\u305f\u3081\u306b\u4e00\u5b9a\u306e\u898f\u5247\u306b\u5f93\u3046\u3002\n\n\u30bf\u30a4\u30d7\u30ad\u30e3\u30b9\u30c8\n\u7279\u306b\u6307\u5b9a\u3057\u306a\u3044\u9650\u308a\u3001\u5165\u529b\u306f float64 \u306b\u30ad\u30e3\u30b9\u30c8\u3055\u308c\u307e\u3059\uff1a\n>>> import numpy as np\n>>> from sklearn import random_projection\n\n>>> rng = np.random.RandomState(0)\n>>> X = rng.rand(10, 2000)\n>>> X = np.array(X, dtype='float32')\n>>> X.dtype\ndtype('float32')\n\n>>> transformer = random_projection.GaussianRandomProjection()\n>>> X_new = transformer.fit_transform(X)\n>>> X_new.dtype\ndtype('float64')\n\n\u3053\u306e\u4f8b\u3067\u306f\u3001 X \u306f float32 \u3067\u3042\u308a\u3001 fit_transform(X) \u306b\u3088\u3063\u3066 float64 \u306b\u30ad\u30e3\u30b9\u30c8\u3055\u308c\u307e\u3059\u3002\n\u56de\u5e30\u30bf\u30fc\u30b2\u30c3\u30c8\u306f float64 \u306b\u30ad\u30e3\u30b9\u30c8\u3055\u308c\u3001\u5206\u985e\u30bf\u30fc\u30b2\u30c3\u30c8\u306f\u7dad\u6301\u3055\u308c\u307e\u3059\u3002\n>>> from sklearn import datasets\n>>> from sklearn.svm import SVC\n>>> iris = datasets.load_iris()\n>>> clf = SVC()\n>>> clf.fit(iris.data, iris.target)  \nSVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n  decision_function_shape=None, degree=3, gamma='auto', kernel='rbf',\n  max_iter=-1, probability=False, random_state=None, shrinking=True,\n  tol=0.001, verbose=False)\n\n>>> list(clf.predict(iris.data[:3]))\n[0, 0, 0]\n\n>>> clf.fit(iris.data, iris.target_names[iris.target])  \nSVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n  decision_function_shape=None, degree=3, gamma='auto', kernel='rbf',\n  max_iter=-1, probability=False, random_state=None, shrinking=True,\n  tol=0.001, verbose=False)\n\n>>> list(clf.predict(iris.data[:3]))  \n['setosa', 'setosa', 'setosa']\n\n\n\u3053\u3053\u3067\u3001\u6700\u521d\u306e predict() \u306f iris.target\uff08\u6574\u6570\u914d\u5217\uff09\u304c fit \u3067\u4f7f\u7528\u3055\u308c\u305f\u305f\u3081\u3001\u6574\u6570\u914d\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002 2\u756a\u76ee\u306e predict() \u306f\u6587\u5b57\u5217\u914d\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002\u306a\u305c\u306a\u3089\u3001iris.target_names \u306f\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u306e\u305f\u3081\u3067\u3042\u3063\u305f\u304b\u3089\u3067\u3059\u3002\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u66f4\u65b0\u3068\u66f4\u65b0\n\u63a8\u5b9a\u5668\u306e\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001 sklearn.pipeline.Pipeline.set_params \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u4f5c\u6210\u3057\u305f\u5f8c\u306b\u66f4\u65b0\u3067\u304d\u307e\u3059\u3002 fit() \u3092\u8907\u6570\u56de\u547c\u3073\u51fa\u3059\u3068\u3001\u4ee5\u524d\u306e fit() \u306b\u3088\u3063\u3066\u5b66\u7fd2\u3055\u308c\u305f\u3082\u306e\u304c\u4e0a\u66f8\u304d\u3055\u308c\u307e\u3059\uff1a\n>>> from sklearn.svm import SVC\n\n>>> rng = np.random.RandomState(0)\n>>> X = rng.rand(100, 10)\n>>> y = rng.binomial(1, 0.5, 100)\n>>> X_test = rng.rand(5, 10)\n\n>>> clf = SVC()\n>>> clf.set_params(kernel='linear').fit(X, y)  \nSVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n  decision_function_shape=None, degree=3, gamma='auto', kernel='linear',\n  max_iter=-1, probability=False, random_state=None, shrinking=True,\n  tol=0.001, verbose=False)\n>>> clf.predict(X_test)\narray([1, 0, 1, 1, 0])\n\n>>> clf.set_params(kernel='rbf').fit(X, y)  \nSVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n  decision_function_shape=None, degree=3, gamma='auto', kernel='rbf',\n  max_iter=-1, probability=False, random_state=None, shrinking=True,\n  tol=0.001, verbose=False)\n>>> clf.predict(X_test)\narray([0, 0, 0, 1, 0])\n\n\u3053\u3053\u3067\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u30ab\u30fc\u30cd\u30eb rbf \u306f\u3001 SVC() \u3092\u4ecb\u3057\u3066\u63a8\u5b9a\u5668\u304c\u69cb\u7bc9\u3055\u308c\u305f\u5f8c\u306b\u6700\u521d\u306b\u7dda\u5f62\u306b\u5909\u66f4\u3055\u308c\u3001 rbf \u306b\u623b\u3063\u3066\u63a8\u5b9a\u5668\u3092\u518d\u69cb\u6210\u3057\u3001\u7b2c2\u306e\u4e88\u6e2c\u3092\u884c\u3046\u3002\n\n\u30de\u30eb\u30c1\u30af\u30e9\u30b9\u3068\u30de\u30eb\u30c1\u30e9\u30d9\u30eb\u306e\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\n\u30de\u30eb\u30c1\u30af\u30e9\u30b9\u5206\u985e\u5668 \u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u3001\u5b9f\u884c\u3055\u308c\u308b\u5b66\u7fd2\u304a\u3088\u3073\u4e88\u6e2c\u30bf\u30b9\u30af\u306f\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u30c7\u30fc\u30bf\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u4f9d\u5b58\u3057\u307e\u3059\u3002\n>>> from sklearn.svm import SVC\n>>> from sklearn.multiclass import OneVsRestClassifier\n>>> from sklearn.preprocessing import LabelBinarizer\n\n>>> X = [[1, 2], [2, 4], [4, 5], [3, 2], [3, 1]]\n>>> y = [0, 0, 1, 1, 2]\n\n>>> classif = OneVsRestClassifier(estimator=SVC(random_state=0))\n>>> classif.fit(X, y).predict(X)\narray([0, 0, 1, 1, 2])\n\n\u4e0a\u8a18\u306e\u5834\u5408\u3001\u30af\u30e9\u30b7\u30d5\u30a1\u30a4\u30a2\u306f\u30de\u30eb\u30c1\u30e9\u30d9\u30eb\u306e1\u6b21\u5143\u914d\u5217\u306b\u9069\u5408\u3057\u3001\u3057\u305f\u304c\u3063\u3066 predict() \u30e1\u30bd\u30c3\u30c9\u306f\u5bfe\u5fdc\u3059\u308b\u30de\u30eb\u30c1\u30af\u30e9\u30b9\u4e88\u6e2c\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u30d0\u30a4\u30ca\u30ea\u30e9\u30d9\u30eb\u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u306e2\u6b21\u5143\u914d\u5217\u306b\u9069\u5408\u3055\u305b\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\uff1a\n>>> y = LabelBinarizer().fit_transform(y)\n>>> classif.fit(X, y).predict(X)\narray([[1, 0, 0],\n       [1, 0, 0],\n       [0, 1, 0],\n       [0, 0, 0],\n       [0, 0, 0]])\n\n\u3053\u3053\u3067\u3001\u5206\u985e\u5668\u306f LabelBinarizer \u3092\u4f7f\u7528\u3057\u3066 y \u306e2\u6b21\u5143\u30d0\u30a4\u30ca\u30ea\u30e9\u30d9\u30eb\u8868\u73fe\u306b fit() \u3057\u307e\u3059\u3002\u3053\u306e\u5834\u5408\u3001 predict() \u306f\u5bfe\u5fdc\u3059\u308b\u30de\u30eb\u30c1\u30e9\u30d9\u30eb\u4e88\u6e2c\u3092\u8868\u30592\u6b21\u5143\u914d\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002\n4\u756a\u76ee\u30685\u756a\u76ee\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u3059\u3079\u30660\u3092\u8fd4\u3057\u30013\u3064\u306e\u30e9\u30d9\u30eb\u306e\u3069\u308c\u306b\u3082 fit \u3057\u306a\u3044\u3053\u3068\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\u30de\u30eb\u30c1\u30e9\u30d9\u30eb\u51fa\u529b\u3067\u306f\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u8907\u6570\u306e\u30e9\u30d9\u30eb\u3092\u5272\u308a\u5f53\u3066\u308b\u3053\u3068\u3082\u540c\u69d8\u306b\u53ef\u80fd\u3067\u3059\u3002\n>> from sklearn.preprocessing import MultiLabelBinarizer\n>> y = [[0, 1], [0, 2], [1, 3], [0, 2, 3], [2, 4]]\n>> y = preprocessing.MultiLabelBinarizer().fit_transform(y)\n>> classif.fit(X, y).predict(X)\narray([[1, 1, 0, 0, 0],\n       [1, 0, 1, 0, 0],\n       [0, 1, 0, 1, 0],\n       [1, 0, 1, 1, 0],\n       [0, 0, 1, 0, 1]])\n\n\u3053\u306e\u5834\u5408\u3001\u5206\u985e\u5668\u306f\u3001\u305d\u308c\u305e\u308c\u8907\u6570\u306e\u30e9\u30d9\u30eb\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u9069\u5408\u3059\u308b\u3002 MultiLabelBinarizer \u306f\u3001\u30de\u30eb\u30c1\u30e9\u30d9\u30eb\u306e2\u6b21\u5143\u914d\u5217\u30922\u9032\u5316\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\u305d\u306e\u7d50\u679c\u3001 predict() \u306f\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3054\u3068\u306b\u8907\u6570\u306e\u4e88\u6e2c\u30e9\u30d9\u30eb\u3092\u6301\u30642\u6b21\u5143\u914d\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n\u6b21\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\n\u00a92010 - 2016\u3001scikit-learn developers\uff08BSD\u30e9\u30a4\u30bb\u30f3\u30b9\uff09\u3002\nhttp://scikit-learn.org/stable/tutorial/basic/tutorial.html \u3092 google\u7ffb\u8a33\u3057\u305f\u3002\n[scikit-learn 0.18 \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb \u76ee\u6b21](http://qiita.com/nazoking@github/items/5160c11d1a5b3fe8f34c)\n\n## \u30bb\u30af\u30b7\u30e7\u30f3\u306e\u5185\u5bb9\n\n\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001scikit-learn \u3067\u4f7f\u7528\u3055\u308c\u308b\u6a5f\u68b0\u5b66\u7fd2\u306e\u7528\u8a9e\u3092\u7d39\u4ecb\u3057\u3001\u7c21\u5358\u306a\u5b66\u7fd2\u306e\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\n\n## \u6a5f\u68b0\u5b66\u7fd2\uff1a\u554f\u984c\u306e\u8a2d\u5b9a\n\n\u4e00\u822c\u306b\u3001\u5b66\u7fd2\u554f\u984c\u306f\u3001n\u500b\u306e\u30c7\u30fc\u30bf\u30b5\u30f3\u30d7\u30eb\u306e\u96c6\u5408\u3092\u8003\u616e\u3057\u3001\u672a\u77e5\u306e\u30c7\u30fc\u30bf\u306e\u7279\u6027\u3092\u4e88\u6e2c\u3057\u3088\u3046\u3068\u3059\u308b\u3002\u5404\u30b5\u30f3\u30d7\u30eb\u304c\u5358\u4e00\u306e\u6570\u5024\u3088\u308a\u3082\u5927\u304d\u3044\u5834\u5408\u3001\u307e\u305f\u306f\u591a\u6b21\u5143\u9805\u76ee\uff08\u591a\u5909\u91cf\u3068\u3082\u547c\u3070\u308c\u307e\u3059\uff09\u306e\u5834\u5408\u306f\u3001\u3044\u304f\u3064\u304b\u306e\u5c5e\u6027\u307e\u305f\u306f\u7279\u5fb4\u91cf\u3092\u6301\u3064\u3068\u8a00\u308f\u308c\u307e\u3059\u3002\n\n\u5927\u304d\u306a\u30ab\u30c6\u30b4\u30ea\u3067\u5b66\u7fd2\u554f\u984c\u3092\u3044\u304f\u3064\u304b\u306b\u5206\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n   - [\u6559\u5e2b\u3042\u308a\u5b66\u7fd2](https://en.wikipedia.org/wiki/Supervised_learning)\u3067\u306f\u3001\u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u306f\u4e88\u6e2c\u3057\u305f\u3044\u5c5e\u6027\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3044\u307e\u3059\uff08[\u3053\u3053\u3092\u30af\u30ea\u30c3\u30af](http://qiita.com/nazoking@github/items/267f2371757516f8c168#1-%E6%95%99%E5%B8%AB%E4%BB%98%E3%81%8D%E5%AD%A6%E7%BF%92)\u3057\u3066scikit-learn\u6559\u5e2b\u4ed8\u304d\u5b66\u7fd2\u30da\u30fc\u30b8\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u304f\u3060\u3055\u3044\uff09\u3002\u3053\u306e\u554f\u984c\u306f\u6b21\u306e\u3044\u305a\u308c\u304b\u306b\u306a\u308a\u307e\u3059\u3002\n      - [\u5206\u985e](https://en.wikipedia.org/wiki/Classification_in_machine_learning)\uff1a\u6a19\u672c\u306f2\u3064\u4ee5\u4e0a\u306e\u30af\u30e9\u30b9\u306b\u5c5e\u3057\u3001\u30e9\u30d9\u30eb\u4ed8\u3051\u3055\u308c\u3066\u3044\u306a\u3044\u30c7\u30fc\u30bf\u306e\u30af\u30e9\u30b9\u3092\u4e88\u6e2c\u3059\u308b\u65b9\u6cd5\u3092\u65e2\u306b\u30e9\u30d9\u30eb\u4ed8\u3051\u3055\u308c\u305f\u30c7\u30fc\u30bf\u304b\u3089\u5b66\u7fd2\u3057\u305f\u3044\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002\u5206\u985e\u554f\u984c\u306e\u4f8b\u306f\u3001\u624b\u66f8\u304d\u6570\u5b57\u8a8d\u8b58\u3067\u3042\u308a\u3001\u305d\u306e\u76ee\u7684\u306f\u3001\u5404\u5165\u529b\u30d9\u30af\u30c8\u30eb\u3092\u6709\u9650\u6570\u306e\u96e2\u6563\u30ab\u30c6\u30b4\u30ea\u306e1\u3064\u306b\u5272\u308a\u5f53\u3066\u308b\u3053\u3068\u3067\u3042\u308b\u3002\u5206\u985e\u3092\u8003\u3048\u308b\u3082\u3046\u4e00\u3064\u306e\u65b9\u6cd5\u306f\u3001\u9650\u3089\u308c\u305f\u6570\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u3057\u304b\u6301\u305f\u305a\u3001\u63d0\u4f9b\u3055\u308c\u305fn\u500b\u306e\u30b5\u30f3\u30d7\u30eb\u306e\u305d\u308c\u305e\u308c\u306b\u3064\u3044\u3066\u3001\u6b63\u3057\u3044\u30ab\u30c6\u30b4\u30ea\u30fc\u307e\u305f\u306f\u30af\u30e9\u30b9\u3067\u305d\u308c\u3089\u3092\u30e9\u30d9\u30eb\u4ed8\u3051\u3057\u3088\u3046\u3068\u3059\u308b\u3001\u72ec\u7acb\u578b\uff08\u9023\u7d9a\u7684\u3067\u306f\u306a\u304f\uff09\u9023\u7d9a\u578b\u306e\u6559\u5e2b\u3042\u308a\u5b66\u7fd2\u3067\u3042\u308b\u3002\n      - [\u56de\u5e30](https://en.wikipedia.org/wiki/Regression_analysis)\uff1a\u6240\u671b\u306e\u51fa\u529b\u304c1\u3064\u4ee5\u4e0a\u306e\u9023\u7d9a\u5909\u6570\u304b\u3089\u306a\u308b\u5834\u5408\u3001\u30bf\u30b9\u30af\u306f\u56de\u5e30\u3068\u547c\u3070\u308c\u307e\u3059\u3002\u56de\u5e30\u554f\u984c\u306e\u4f8b\u306f\u3001\u5e74\u4ee4\u3068\u4f53\u91cd\u306e\u95a2\u6570\u3068\u3057\u3066\u30b5\u30b1\u306e\u9577\u3055\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u3067\u3059\u3002\n   - [\u6559\u5e2b\u306a\u3057\u5b66\u7fd2](https://en.wikipedia.org/wiki/Unsupervised_learning)\u3067\u306f\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u306f\u3001\u5bfe\u5fdc\u3059\u308b\u76ee\u6a19\u5024\u306e\u306a\u3044\u5165\u529b\u30d9\u30af\u30c8\u30ebx\u306e\u96c6\u5408\u3067\u3042\u308b\u3002\u3053\u306e\u3088\u3046\u306a\u554f\u984c\u306e\u76ee\u6a19\u306f\u3001[\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0](https://en.wikipedia.org/wiki/Cluster_analysis)\u3068\u547c\u3070\u308c\u308b\u30c7\u30fc\u30bf\u5185\u306e\u985e\u4f3c\u3057\u305f\u4f8b\u306e\u30b0\u30eb\u30fc\u30d7\u3092\u767a\u898b\u3057\u305f\u308a\u3001[\u5bc6\u5ea6\u63a8\u5b9a](https://en.wikipedia.org/wiki/Density_estimation)\u3068\u547c\u3070\u308c\u308b\u5165\u529b\u7a7a\u9593\u5185\u306e\u30c7\u30fc\u30bf\u306e\u5206\u5e03\u3092\u6c7a\u5b9a\u3057\u305f\u308a\u3001\u9ad8\u6b21\u5143\u8996\u899a\u5316\u306e\u76ee\u7684\u306e\u305f\u3081\u306b\u30012\u6b21\u5143\u307e\u305f\u306f3\u6b21\u5143\u306e\u7a7a\u9593\uff08Scikit-Learn unsupervised learning\u30da\u30fc\u30b8\u306b\u884c\u304f\u306b\u306f[\u3053\u3053\u3092\u30af\u30ea\u30c3\u30af](http://qiita.com/nazoking@github/items/267f2371757516f8c168#2-%E6%95%99%E5%B8%AB%E3%81%AA%E3%81%97%E5%AD%A6%E7%BF%92)\u3057\u3066\u304f\u3060\u3055\u3044\uff09\u3002\n\n**\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u3068\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8**\n\u6a5f\u68b0\u5b66\u7fd2\u306e\u76ee\u7684\u306f\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u3044\u304f\u3064\u304b\u306e\u7279\u6027\u3092\u5b66\u7fd2\u3057\u3001\u305d\u308c\u3089\u3092\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u306b\u9069\u7528\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u6a5f\u68b0\u5b66\u7fd2\u3067\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u8a55\u4fa1\u3059\u308b\u4e00\u822c\u7684\u306a\u65b9\u6cd5\u3067\u306f\u3001\u624b\u5143\u306b\u3042\u308b\u30c7\u30fc\u30bf\u30922\u3064\u306e\u30bb\u30c3\u30c8\u306b\u5206\u3051\u307e\u3059\u30021\u3064\u306f\u30c7\u30fc\u30bf\u7279\u6027\u3092\u5b66\u7fd2\u3059\u308b **\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8** \u3068\u547c\u3070\u308c\u3001\u3082\u30461\u3064\u306f\u7279\u6027\u3092\u30c6\u30b9\u30c8\u3059\u308b **\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8** \u3068\u547c\u3070\u308c\u307e\u3059\u3002\n\n\n\n## \u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\n\nscikit-learn\u306b\u306f\u3001\u5206\u985e\u306e\u305f\u3081\u306e [iris](https://en.wikipedia.org/wiki/Iris_flower_data_set) \u3084 [digits](http://archive.ics.uci.edu/ml/datasets/Pen-Based+Recognition+of+Handwritten+Digits) \u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3084\u3001\u56de\u5e30\u306e\u305f\u3081\u306e [\u30dc\u30b9\u30c8\u30f3\u306e\u4f4f\u5b85\u4fa1\u683c](http://archive.ics.uci.edu/ml/datasets/Housing) \u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306a\u3069\u3001\u3044\u304f\u3064\u304b\u306e\u6a19\u6e96\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u4ed8\u5c5e\u3057\u3066\u3044\u307e\u3059\u3002\n\u4ee5\u4e0b\u3067\u306f\u3001\u30b7\u30a7\u30eb\u304b\u3089Python\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3092\u8d77\u52d5\u3057\u3001`iris` \u3068 `digits` \u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\u79c1\u305f\u3061\u306e\u8868\u8a18\u6cd5\u3067\u306f\u3001 `$` \u306f\u30b7\u30a7\u30eb\u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u8868\u3057\u3001 `>>>` \u306fPython\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u8868\u3057\u307e\u3059\u3002\n\n```python\n$ python\n>>> from sklearn import datasets\n>>> iris = datasets.load_iris()\n>>> digits = datasets.load_digits()\n```\n\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u3001\u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u3068\u305d\u306e\u30c7\u30fc\u30bf\u306b\u95a2\u3059\u308b\u4e00\u90e8\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u4fdd\u6301\u3059\u308b\u8f9e\u66f8\u7684\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002\u3053\u306e\u30c7\u30fc\u30bf\u306f `.data` \u30e1\u30f3\u30d0\u30fc\u306b\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u306f `n_samples, n_features` \u306e\u914d\u5217\u3067\u3059\u3002\u6559\u5e2b\u3042\u308a\u306e\u5834\u5408\u30011\u3064\u4ee5\u4e0a\u306e\u5fdc\u7b54\u5909\u6570\u304c `.target` \u30e1\u30f3\u30d0\u30fc\u306b\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002\u7570\u306a\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001[\u5c02\u7528\u30bb\u30af\u30b7\u30e7\u30f3](http://scikit-learn.org/0.18/datasets/index.html#datasets) \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u305f\u3068\u3048\u3070\u3001digits \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5834\u5408\u3001 `digits.data` \u306f\u3001\u6570\u5b57\u30b5\u30f3\u30d7\u30eb\u3092\u5206\u985e\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3067\u304d\u308b\u7279\u5fb4\u91cf\u306b\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002\n\n```python\n>>> print(digits.data)  \n[[  0.   0.   5. ...,   0.   0.   0.]\n [  0.   0.   0. ...,  10.   0.   0.]\n [  0.   0.   0. ...,  16.   9.   0.]\n ...,\n [  0.   0.   1. ...,   6.   0.   0.]\n [  0.   0.   2. ...,  12.   0.   0.]\n [  0.   0.  10. ...,  12.   1.   0.]]\n```\n\n`digits.target` \u306f\u3001digits \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u6839\u62e0\u3068\u306a\u308b\u771f\u7406\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u5b66\u7fd2\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u5404\u6570\u5b57\u306e\u753b\u50cf\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5b57\u3067\u3059\u3002\n\n```python\n>>> digits.target\narray([0, 1, 2, ..., 8, 9, 8])\n```\n\n**\u30c7\u30fc\u30bf\u914d\u5217\u306e\u5f62\u72b6**\n\u5143\u306e\u30c7\u30fc\u30bf\u306e\u5f62\u72b6\u306f\u7570\u306a\u3063\u3066\u3044\u3066\u3082\u3001\u30c7\u30fc\u30bf\u306f\u5e38\u306b2\u6b21\u5143\u914d\u5217\u3001\u5f62\u72b6 `(n_samples, n_features) \u3067\u3059\u3002\u6570\u5b57\u306e\u5834\u5408\u3001\u5404\u5143\u306e\u30b5\u30f3\u30d7\u30eb\u306f\u5f62\u72b6\u306e\u753b\u50cf (8,8)` \u3067\u3042\u308a\u3001\u4ee5\u4e0b\u3092\u4f7f\u7528\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```python\n>>> digits.images[0]\narray([[  0.,   0.,   5.,  13.,   9.,   1.,   0.,   0.],\n       [  0.,   0.,  13.,  15.,  10.,  15.,   5.,   0.],\n       [  0.,   3.,  15.,   2.,   0.,  11.,   8.,   0.],\n       [  0.,   4.,  12.,   0.,   0.,   8.,   8.,   0.],\n       [  0.,   5.,   8.,   0.,   0.,   9.,   8.,   0.],\n       [  0.,   4.,  11.,   0.,   1.,  12.,   7.,   0.],\n       [  0.,   2.,  14.,   5.,  10.,  12.,   0.,   0.],\n       [  0.,   0.,   6.,  13.,  10.,   0.,   0.,   0.]])\n```\n\n\u3053\u306e [\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u7c21\u5358\u306a\u4f8b](http://scikit-learn.org/0.18/auto_examples/classification/plot_digits_classification.html#sphx-glr-auto-examples-classification-plot-digits-classification-py) \u306f\u3001\u5143\u306e\u554f\u984c\u304b\u3089\u59cb\u307e\u3063\u3066scikit-learn\u3067\u6d88\u8cbb\u3059\u308b\u30c7\u30fc\u30bf\u3092\u3069\u306e\u3088\u3046\u306b\u5f62\u6210\u3067\u304d\u308b\u304b\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\n\n**\u5916\u90e8\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089\u306e\u30ed\u30fc\u30c9**\n\n\u5916\u90e8\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089\u30ed\u30fc\u30c9\u3059\u308b\u306b\u306f\u3001[\u5916\u90e8\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30ed\u30fc\u30c9](http://scikit-learn.org/0.18/datasets/index.html#external-datasets) \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n## \u5b66\u7fd2\u3068\u4e88\u6e2c\n\ndigits \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5834\u5408\u3001\u30bf\u30b9\u30af\u306f\u3001\u753b\u50cf\u304c\u4e0e\u3048\u3089\u308c\u308b\u3068\u3001\u305d\u308c\u304c\u3069\u306e\u6570\u5b57\u3092\u8868\u3059\u304b\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u3067\u3042\u308b\u3002\u672a\u77e5\u306e\u30b5\u30f3\u30d7\u30eb\u304c\u5c5e\u3059\u308b\u30af\u30e9\u30b9\u3092\u4e88\u6e2c\u3067\u304d\u308b\u3088\u3046\u306b\u3001[\u63a8\u5b9a\u5668](https://en.wikipedia.org/wiki/Estimator) \u306b\u306f10\u306e\u53ef\u80fd\u30af\u30e9\u30b9\uff08\u30bc\u30ed\u304b\u30899\u307e\u3067\u306e\u6570\u5b57\uff09\u306e\u30b5\u30f3\u30d7\u30eb\u304c\u305d\u308c\u305e\u308c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\nscikit-learn\u3067\u306f\u3001\u5206\u985e\u306e\u305f\u3081\u306e\u63a8\u5b9a\u5668\u306f `fit(X, y)` \u3068 `predict(T)` \u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308bPython\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002\n\u63a8\u5b9a\u5668\u306e\u4f8b\u306f\u3001\u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30bf\u30fc\u5206\u985e\u3092\u5b9f\u88c5\u3059\u308b\u30af\u30e9\u30b9 `sklearn.svm.SVC` \u3067\u3059\u3002\u63a8\u5b9a\u5668\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u5f15\u6570\u3068\u3057\u3066\u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3068\u308a\u307e\u3059\u304c\u3001\u5f53\u9762\u306f\u63a8\u5b9a\u5668\u3092\u30d6\u30e9\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3068\u898b\u306a\u3057\u307e\u3059\uff1a\n\n```python\n>>> from sklearn import svm\n>>> clf = svm.SVC(gamma=0.001, C=100.)\n```\n\n> **\u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u9078\u629e**\n> \u3053\u306e\u4f8b\u3067\u306f\u3001 `gamma` \u306e\u5024\u3092\u624b\u52d5\u3067\u8a2d\u5b9a\u3057\u307e\u3059\u3002[\u30b0\u30ea\u30c3\u30c9\u691c\u7d22](http://scikit-learn.org/0.18/modules/grid_search.html#grid-search) \u3084 [\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3](http://qiita.com/nazoking@github/items/13b167283590f512d99a) \u306a\u3069\u306e\u30c4\u30fc\u30eb\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u9069\u5207\u306a\u5024\u3092\u81ea\u52d5\u7684\u306b\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u63a8\u5b9a\u5668\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092 `clf` \u3068\u3057\u307e\u3057\u305f\u304c\u3001\u3053\u308c\u306f\u5206\u985e\u5668\u3067\u3042\u308b\u305f\u3081\u3067\u3059\u3002\u30e2\u30c7\u30eb\u306b `fit` \u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u30e2\u30c7\u30eb\u304b\u3089\u5b66\u7fd2\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u3092 `fit` \u30e1\u30bd\u30c3\u30c9\u306b\u6e21\u3059\u3053\u3068\u306b\u3088\u3063\u3066\u884c\u308f\u308c\u307e\u3059\u3002\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u3068\u3057\u3066\u3001\u6700\u5f8c\u306e\u3092\u9664\u304f\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u3059\u3079\u3066\u306e\u753b\u50cf\u3092\u4f7f\u7528\u3057\u307e\u3057\u3087\u3046\u3002\u3053\u306e\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u306f\u3001 `[:-1]` Python\u69cb\u6587\u3067\u9078\u629e\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001`digits.data` \u306e\u6700\u5f8c\u306e\u30a8\u30f3\u30c8\u30ea\u4ee5\u5916\u306e\u3059\u3079\u3066\u3092\u542b\u3080\u65b0\u3057\u3044\u914d\u5217\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n```python\n>>> clf.fit(digits.data[:-1], digits.target[:-1])  \nSVC(C=100.0, cache_size=200, class_weight=None, coef0=0.0,\n  decision_function_shape=None, degree=3, gamma=0.001, kernel='rbf',\n  max_iter=-1, probability=False, random_state=None, shrinking=True,\n  tol=0.001, verbose=False)\n```\n\n\u65b0\u3057\u3044\u5024\u3092\u4e88\u6e2c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3067\u306f\u3001\u5206\u985e\u5668\u3092\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3001digits \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u6700\u5f8c\u306e\u753b\u50cf\u306f\u3069\u306e\u6570\u5b57\u3067\u3059\u304b\uff1f\n\n```python\n>>> clf.predict(digits.data[-1:])\narray([8])\n```\n\n\u5bfe\u5fdc\u3059\u308b\u30a4\u30e1\u30fc\u30b8\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n![](http://scikit-learn.org/0.18/_images/sphx_glr_plot_digits_last_image_001.png)\n\n\u3054\u89a7\u306e\u3068\u304a\u308a\u3001\u3053\u308c\u306f\u96e3\u3057\u3044\u8ab2\u984c\u3067\u3059\u3002\u753b\u50cf\u306e\u89e3\u50cf\u5ea6\u304c\u4f4e\u3044\u3067\u3059\u3002\u3042\u306a\u305f\u306f\u5206\u985e\u5668\u306b\u540c\u610f\u3057\u307e\u3059\u304b\uff1f\n\u3053\u306e\u5206\u985e\u554f\u984c\u306e\u5b8c\u5168\u306a\u4f8b\u306f\u3001\u5b9f\u884c\u3057\u3066\u5b66\u7fd2\u3067\u304d\u308b\u4f8b\u3068\u3057\u3066\u5229\u7528\u3067\u304d\u307e\u3059\u3002[\u624b\u66f8\u304d\u6570\u5b57\u306e\u8a8d\u8b58](http://scikit-learn.org/0.18/auto_examples/classification/plot_digits_classification.html#sphx-glr-auto-examples-classification-plot-digits-classification-py)\n\n## \u30e2\u30c7\u30eb\u306e\u6c38\u7d9a\u6027\n\nPython\u306e\u7d44\u307f\u8fbc\u307f\u6c38\u7d9a\u5316\u30e2\u30b8\u30e5\u30fc\u30eb\u3001\u3064\u307e\u308apickle\u3092\u4f7f\u3063\u3066\u3001scikit\u306e\u30e2\u30c7\u30eb\u3092\u4fdd\u5b58\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\uff1a\n\n```python\n>>> from sklearn import svm\n>>> from sklearn import datasets\n>>> clf = svm.SVC()\n>>> iris = datasets.load_iris()\n>>> X, y = iris.data, iris.target\n>>> clf.fit(X, y)  \nSVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n  decision_function_shape=None, degree=3, gamma='auto', kernel='rbf',\n  max_iter=-1, probability=False, random_state=None, shrinking=True,\n  tol=0.001, verbose=False)\n\n>>> import pickle\n>>> s = pickle.dumps(clf)\n>>> clf2 = pickle.loads(s)\n>>> clf2.predict(X[0:1])\narray([0])\n>>> y[0]\n0\n```\n\nscikit\u306e\u7279\u5b9a\u306e\u30b1\u30fc\u30b9\u3067\u306f\u3001joblib\u306epickle\uff08 `joblib.dump` \u304a\u3088\u3073 `joblib.load` \uff09\u306e\u7f6e\u304d\u63db\u3048\u3092\u4f7f\u7528\u3059\u308b\u65b9\u304c\u3088\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e\u305f\u3060\u3001\u5927\u304d\u306a\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u306f\u3088\u308a\u52b9\u7387\u7684\u3067\u3059\u304c\u3001\u30c7\u30a3\u30b9\u30af\u306b\u3057\u304b\u4fdd\u5b58\u3067\u304d\u307e\u305b\u3093\u3002\n\n```python\n>>> from sklearn.externals import joblib\n>>> joblib.dump(clf, 'filename.pkl') \n```\n\n\u5f8c\u3067pickle\u3055\u308c\u305f\u30e2\u30c7\u30eb\u3092\uff08\u304a\u305d\u3089\u304f\u5225\u306ePython\u30d7\u30ed\u30bb\u30b9\u3067\uff09\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n```python\n>>> clf = joblib.load('filename.pkl') \n```\n\n> \u6ce8\u610f `joblib.dump` \u95a2\u6570\u3068 `joblib.load` \u95a2\u6570\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u4ee3\u308f\u308a\u306b file-like \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3082\u53d7\u3051\u5165\u308c\u307e\u3059\u3002 Joblib\u3067\u306e\u30c7\u30fc\u30bf\u6c38\u7d9a\u6027\u306e\u8a73\u7d30\u306f\u3001 [\u3053\u3061\u3089](https://pythonhosted.org/joblib/persistence.html) \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\npickle\u306b\u306f\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u3068\u4fdd\u5b88\u6027\u306e\u554f\u984c\u304c\u3044\u304f\u3064\u304b\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 scikit-learn\u306b\u3088\u308b\u30e2\u30c7\u30eb\u306e\u6c38\u7d9a\u6027\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001\u300c[\u30e2\u30c7\u30eb\u306e\u6c38\u7d9a\u6027](http://scikit-learn.org/0.18/modules/model_persistence.html#model-persistence)\u300d\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n## \u898f\u7d04\n\nscikit-learn\u63a8\u5b9a\u5668\u306f\u3001\u305d\u306e\u884c\u52d5\u3092\u3088\u308a\u4e88\u6e2c\u7684\u306b\u3059\u308b\u305f\u3081\u306b\u4e00\u5b9a\u306e\u898f\u5247\u306b\u5f93\u3046\u3002\n\n### \u30bf\u30a4\u30d7\u30ad\u30e3\u30b9\u30c8\n\n\u7279\u306b\u6307\u5b9a\u3057\u306a\u3044\u9650\u308a\u3001\u5165\u529b\u306f `float64` \u306b\u30ad\u30e3\u30b9\u30c8\u3055\u308c\u307e\u3059\uff1a\n\n```python\n>>> import numpy as np\n>>> from sklearn import random_projection\n\n>>> rng = np.random.RandomState(0)\n>>> X = rng.rand(10, 2000)\n>>> X = np.array(X, dtype='float32')\n>>> X.dtype\ndtype('float32')\n\n>>> transformer = random_projection.GaussianRandomProjection()\n>>> X_new = transformer.fit_transform(X)\n>>> X_new.dtype\ndtype('float64')\n```\n\n\u3053\u306e\u4f8b\u3067\u306f\u3001 `X` \u306f `float32` \u3067\u3042\u308a\u3001 `fit_transform(X)` \u306b\u3088\u3063\u3066 `float64` \u306b\u30ad\u30e3\u30b9\u30c8\u3055\u308c\u307e\u3059\u3002\n\u56de\u5e30\u30bf\u30fc\u30b2\u30c3\u30c8\u306f `float64` \u306b\u30ad\u30e3\u30b9\u30c8\u3055\u308c\u3001\u5206\u985e\u30bf\u30fc\u30b2\u30c3\u30c8\u306f\u7dad\u6301\u3055\u308c\u307e\u3059\u3002\n\n```python\n>>> from sklearn import datasets\n>>> from sklearn.svm import SVC\n>>> iris = datasets.load_iris()\n>>> clf = SVC()\n>>> clf.fit(iris.data, iris.target)  \nSVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n  decision_function_shape=None, degree=3, gamma='auto', kernel='rbf',\n  max_iter=-1, probability=False, random_state=None, shrinking=True,\n  tol=0.001, verbose=False)\n\n>>> list(clf.predict(iris.data[:3]))\n[0, 0, 0]\n\n>>> clf.fit(iris.data, iris.target_names[iris.target])  \nSVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n  decision_function_shape=None, degree=3, gamma='auto', kernel='rbf',\n  max_iter=-1, probability=False, random_state=None, shrinking=True,\n  tol=0.001, verbose=False)\n\n>>> list(clf.predict(iris.data[:3]))  \n['setosa', 'setosa', 'setosa']\n\n```\n\n\u3053\u3053\u3067\u3001\u6700\u521d\u306e `predict()` \u306f `iris.target`\uff08\u6574\u6570\u914d\u5217\uff09\u304c `fit` \u3067\u4f7f\u7528\u3055\u308c\u305f\u305f\u3081\u3001\u6574\u6570\u914d\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002 2\u756a\u76ee\u306e `predict()` \u306f\u6587\u5b57\u5217\u914d\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002\u306a\u305c\u306a\u3089\u3001`iris.target_names` \u306f\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u306e\u305f\u3081\u3067\u3042\u3063\u305f\u304b\u3089\u3067\u3059\u3002\n\n### \u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u66f4\u65b0\u3068\u66f4\u65b0\n\n\u63a8\u5b9a\u5668\u306e\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001 [sklearn.pipeline.Pipeline.set_params](http://scikit-learn.org/0.18/modules/generated/sklearn.pipeline.Pipeline.html#sklearn.pipeline.Pipeline.set_params) \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u4f5c\u6210\u3057\u305f\u5f8c\u306b\u66f4\u65b0\u3067\u304d\u307e\u3059\u3002 `fit()` \u3092\u8907\u6570\u56de\u547c\u3073\u51fa\u3059\u3068\u3001\u4ee5\u524d\u306e `fit()` \u306b\u3088\u3063\u3066\u5b66\u7fd2\u3055\u308c\u305f\u3082\u306e\u304c\u4e0a\u66f8\u304d\u3055\u308c\u307e\u3059\uff1a\n\n```python\n>>> from sklearn.svm import SVC\n\n>>> rng = np.random.RandomState(0)\n>>> X = rng.rand(100, 10)\n>>> y = rng.binomial(1, 0.5, 100)\n>>> X_test = rng.rand(5, 10)\n\n>>> clf = SVC()\n>>> clf.set_params(kernel='linear').fit(X, y)  \nSVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n  decision_function_shape=None, degree=3, gamma='auto', kernel='linear',\n  max_iter=-1, probability=False, random_state=None, shrinking=True,\n  tol=0.001, verbose=False)\n>>> clf.predict(X_test)\narray([1, 0, 1, 1, 0])\n\n>>> clf.set_params(kernel='rbf').fit(X, y)  \nSVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n  decision_function_shape=None, degree=3, gamma='auto', kernel='rbf',\n  max_iter=-1, probability=False, random_state=None, shrinking=True,\n  tol=0.001, verbose=False)\n>>> clf.predict(X_test)\narray([0, 0, 0, 1, 0])\n```\n\n\u3053\u3053\u3067\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u30ab\u30fc\u30cd\u30eb `rbf` \u306f\u3001 `SVC()` \u3092\u4ecb\u3057\u3066\u63a8\u5b9a\u5668\u304c\u69cb\u7bc9\u3055\u308c\u305f\u5f8c\u306b\u6700\u521d\u306b\u7dda\u5f62\u306b\u5909\u66f4\u3055\u308c\u3001 `rbf` \u306b\u623b\u3063\u3066\u63a8\u5b9a\u5668\u3092\u518d\u69cb\u6210\u3057\u3001\u7b2c2\u306e\u4e88\u6e2c\u3092\u884c\u3046\u3002\n\n### \u30de\u30eb\u30c1\u30af\u30e9\u30b9\u3068\u30de\u30eb\u30c1\u30e9\u30d9\u30eb\u306e\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\n\n[\u30de\u30eb\u30c1\u30af\u30e9\u30b9\u5206\u985e\u5668](http://scikit-learn.org/0.18/modules/classes.html#module-sklearn.multiclass) \u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u3001\u5b9f\u884c\u3055\u308c\u308b\u5b66\u7fd2\u304a\u3088\u3073\u4e88\u6e2c\u30bf\u30b9\u30af\u306f\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u30c7\u30fc\u30bf\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u4f9d\u5b58\u3057\u307e\u3059\u3002\n\n```python\n>>> from sklearn.svm import SVC\n>>> from sklearn.multiclass import OneVsRestClassifier\n>>> from sklearn.preprocessing import LabelBinarizer\n\n>>> X = [[1, 2], [2, 4], [4, 5], [3, 2], [3, 1]]\n>>> y = [0, 0, 1, 1, 2]\n\n>>> classif = OneVsRestClassifier(estimator=SVC(random_state=0))\n>>> classif.fit(X, y).predict(X)\narray([0, 0, 1, 1, 2])\n```\n\n\u4e0a\u8a18\u306e\u5834\u5408\u3001\u30af\u30e9\u30b7\u30d5\u30a1\u30a4\u30a2\u306f\u30de\u30eb\u30c1\u30e9\u30d9\u30eb\u306e1\u6b21\u5143\u914d\u5217\u306b\u9069\u5408\u3057\u3001\u3057\u305f\u304c\u3063\u3066 `predict()` \u30e1\u30bd\u30c3\u30c9\u306f\u5bfe\u5fdc\u3059\u308b\u30de\u30eb\u30c1\u30af\u30e9\u30b9\u4e88\u6e2c\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u30d0\u30a4\u30ca\u30ea\u30e9\u30d9\u30eb\u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\u306e2\u6b21\u5143\u914d\u5217\u306b\u9069\u5408\u3055\u305b\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\uff1a\n\n```python\n>>> y = LabelBinarizer().fit_transform(y)\n>>> classif.fit(X, y).predict(X)\narray([[1, 0, 0],\n       [1, 0, 0],\n       [0, 1, 0],\n       [0, 0, 0],\n       [0, 0, 0]])\n```\n\n\u3053\u3053\u3067\u3001\u5206\u985e\u5668\u306f [LabelBinarizer](http://scikit-learn.org/0.18/modules/generated/sklearn.preprocessing.LabelBinarizer.html#sklearn.preprocessing.LabelBinarizer) \u3092\u4f7f\u7528\u3057\u3066 `y` \u306e2\u6b21\u5143\u30d0\u30a4\u30ca\u30ea\u30e9\u30d9\u30eb\u8868\u73fe\u306b `fit()` \u3057\u307e\u3059\u3002\u3053\u306e\u5834\u5408\u3001 `predict()` \u306f\u5bfe\u5fdc\u3059\u308b\u30de\u30eb\u30c1\u30e9\u30d9\u30eb\u4e88\u6e2c\u3092\u8868\u30592\u6b21\u5143\u914d\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002\n4\u756a\u76ee\u30685\u756a\u76ee\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u3059\u3079\u30660\u3092\u8fd4\u3057\u30013\u3064\u306e\u30e9\u30d9\u30eb\u306e\u3069\u308c\u306b\u3082 `fit` \u3057\u306a\u3044\u3053\u3068\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\u30de\u30eb\u30c1\u30e9\u30d9\u30eb\u51fa\u529b\u3067\u306f\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u8907\u6570\u306e\u30e9\u30d9\u30eb\u3092\u5272\u308a\u5f53\u3066\u308b\u3053\u3068\u3082\u540c\u69d8\u306b\u53ef\u80fd\u3067\u3059\u3002\n\n```\n>> from sklearn.preprocessing import MultiLabelBinarizer\n>> y = [[0, 1], [0, 2], [1, 3], [0, 2, 3], [2, 4]]\n>> y = preprocessing.MultiLabelBinarizer().fit_transform(y)\n>> classif.fit(X, y).predict(X)\narray([[1, 1, 0, 0, 0],\n       [1, 0, 1, 0, 0],\n       [0, 1, 0, 1, 0],\n       [1, 0, 1, 1, 0],\n       [0, 0, 1, 0, 1]])\n```\n\n\u3053\u306e\u5834\u5408\u3001\u5206\u985e\u5668\u306f\u3001\u305d\u308c\u305e\u308c\u8907\u6570\u306e\u30e9\u30d9\u30eb\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u9069\u5408\u3059\u308b\u3002 [MultiLabelBinarizer](http://scikit-learn.org/0.18/modules/generated/sklearn.preprocessing.MultiLabelBinarizer.html#sklearn.preprocessing.MultiLabelBinarizer) \u306f\u3001\u30de\u30eb\u30c1\u30e9\u30d9\u30eb\u306e2\u6b21\u5143\u914d\u5217\u30922\u9032\u5316\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\u305d\u306e\u7d50\u679c\u3001 `predict()` \u306f\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3054\u3068\u306b\u8907\u6570\u306e\u4e88\u6e2c\u30e9\u30d9\u30eb\u3092\u6301\u30642\u6b21\u5143\u914d\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n----\n[\u6b21\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb](http://qiita.com/nazoking@github/items/051911b0062a0bf48dc3)\n\n\u00a92010 - 2016\u3001scikit-learn developers\uff08BSD\u30e9\u30a4\u30bb\u30f3\u30b9\uff09\u3002\n\n", "tags": ["scikit-learn", "\u6a5f\u68b0\u5b66\u7fd2", "MachineLearning", "Python"]}