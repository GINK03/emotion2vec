{"tags": ["C#", "Silverlight", "WPF"], "context": " More than 1 year has passed since last update.\u3057\u3087\u3063\u3071\u3044\u5c0f\u6280\u3067\u3059\u3002\nMVVM\u3067\u4f5c\u3063\u3066\u3044\u3066\u3001\u8868\u793a\u3092ON/OFF\u3059\u308b\u30dc\u30bf\u30f3\u304c\u9762\u5012\u306b\u306a\u3063\u305f\u306e\u3067\u4f5c\u308a\u307e\u3057\u305f\u3002\n\u3069\u3046\u305b\u63a2\u305b\u3070\u3042\u308b\u306e\u3067\u3057\u3087\u3046\u3002\u306f\u3044\u306f\u3044\u8eca\u8f2a\u306e\u518d\u767a\u660e\u3002\n\nChangeVisibilityButton.cs\nusing System;\nusing System.Net;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Documents;\nusing System.Windows.Ink;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Animation;\nusing System.Windows.Shapes;\n\nnamespace MySilverlightLibrary.Control\n{\n    public class ChangeVisibilityButton:Button\n    {\n        public FrameworkElement TargetElement\n        {\n            get { return (FrameworkElement)GetValue(TargetElementProperty); }\n            set { SetValue(TargetElementProperty, value); }\n        }\n\n        // Using a DependencyProperty as the backing store for TargetElement.  This enables animation, styling, binding, etc...\n        public static readonly DependencyProperty TargetElementProperty =\n            DependencyProperty.Register(\"TargetElement\", typeof(FrameworkElement), typeof(ChangeVisibilityButton), new PropertyMetadata(null));\n\n        public ChangeVisibilityButton()\n        {\n            this.Click += ChangeVisibilityButton_Click;\n        }\n\n        void ChangeVisibilityButton_Click(object sender, RoutedEventArgs e)\n        {\n            if( TargetElement !=null)\n            {\n                if(TargetElement.Visibility == System.Windows.Visibility.Visible)\n                {\n                    TargetElement.Visibility = System.Windows.Visibility.Collapsed;\n                }\n                else\n                {\n                    TargetElement.Visibility = System.Windows.Visibility.Visible;\n                }\n            }\n        }\n\n    }\n}\n\n\n\n\u4f7f\u3044\u65b9\nTargetElement\u306b\u5bfe\u8c61\u3092Binding\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nxml\n    <Grid x:Name=\"LayoutRoot\">\n        <StackPanel>\n            <my:ChangeVisibilityButton Width=\"100\" Height=\"30\" Content=\"test\" TargetElement=\"{Binding ElementName=test}\"></my:ChangeVisibilityButton>\n            <Button Name=\"test\" Height=\"50\" Background=\"Aqua\" Foreground=\"AliceBlue\"></Button>\n        </StackPanel>\n    </Grid>\n\n\u3057\u3087\u3063\u3071\u3044\u5c0f\u6280\u3067\u3059\u3002\nMVVM\u3067\u4f5c\u3063\u3066\u3044\u3066\u3001\u8868\u793a\u3092ON/OFF\u3059\u308b\u30dc\u30bf\u30f3\u304c\u9762\u5012\u306b\u306a\u3063\u305f\u306e\u3067\u4f5c\u308a\u307e\u3057\u305f\u3002\n\u3069\u3046\u305b\u63a2\u305b\u3070\u3042\u308b\u306e\u3067\u3057\u3087\u3046\u3002\u306f\u3044\u306f\u3044\u8eca\u8f2a\u306e\u518d\u767a\u660e\u3002\n\n```csharp:ChangeVisibilityButton.cs\nusing System;\nusing System.Net;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Documents;\nusing System.Windows.Ink;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Animation;\nusing System.Windows.Shapes;\n\nnamespace MySilverlightLibrary.Control\n{\n    public class ChangeVisibilityButton:Button\n    {\n        public FrameworkElement TargetElement\n        {\n            get { return (FrameworkElement)GetValue(TargetElementProperty); }\n            set { SetValue(TargetElementProperty, value); }\n        }\n\n        // Using a DependencyProperty as the backing store for TargetElement.  This enables animation, styling, binding, etc...\n        public static readonly DependencyProperty TargetElementProperty =\n            DependencyProperty.Register(\"TargetElement\", typeof(FrameworkElement), typeof(ChangeVisibilityButton), new PropertyMetadata(null));\n\n        public ChangeVisibilityButton()\n        {\n            this.Click += ChangeVisibilityButton_Click;\n        }\n\n        void ChangeVisibilityButton_Click(object sender, RoutedEventArgs e)\n        {\n            if( TargetElement !=null)\n            {\n                if(TargetElement.Visibility == System.Windows.Visibility.Visible)\n                {\n                    TargetElement.Visibility = System.Windows.Visibility.Collapsed;\n                }\n                else\n                {\n                    TargetElement.Visibility = System.Windows.Visibility.Visible;\n                }\n            }\n        }\n        \n    }\n}\n\n```\n\n\u4f7f\u3044\u65b9\nTargetElement\u306b\u5bfe\u8c61\u3092Binding\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n```xml\n    <Grid x:Name=\"LayoutRoot\">\n        <StackPanel>\n            <my:ChangeVisibilityButton Width=\"100\" Height=\"30\" Content=\"test\" TargetElement=\"{Binding ElementName=test}\"></my:ChangeVisibilityButton>\n            <Button Name=\"test\" Height=\"50\" Background=\"Aqua\" Foreground=\"AliceBlue\"></Button>\n        </StackPanel>\n    </Grid>\n```\n"}