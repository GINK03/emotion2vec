{"context": " More than 1 year has passed since last update.\u30a4\u30d9\u30f3\u30c8 : http://atnd.org/events/38678\n\u554f\u984c : http://nabetani.sakura.ne.jp/hena/ord10pokarest/\n\u89e3\u7b54\u30ea\u30f3\u30af\u96c6 : http://qiita.com/items/d819d1e5f2378317511e\nPython \u3067\u66f8\u3044\u3066\u307f\u305f\u3002\n2.7.2 \u3068 3.3 \u306e\u4e21\u65b9\u3067\u52d5\u304f\u3053\u3068\u3092\u78ba\u8a8d\u3002\n\nord10pokarest.py\n#coding:utf-8\nimport re\n\ndef  isroyal( hand ) :\n    ranks=sorted( [ r[0] for r in hand ] )\n    return ranks==[1,10,11,12,13]\n\ndef  isstraight( hand ) :\n    ranks=sorted( [ r[0] for r in hand ] )\n    return (\n        ranks==list( range( ranks[0], ranks[-1]+1) ) or \n        ranks==[1]+list( range( ranks[1], 14) ) )\n\ndef  isflash( hand ) :\n    return len(set( [ r[1] for r in hand ] ))==1\n\ndef score( hand ):\n    return (( 1 if isroyal( hand) else 0 ) +\n    ( 2 if isstraight( hand) else 0 ) +\n    ( 4 if isflash( hand) else 0 ) )\n\ndef rank( c ):\n    if re.match( \"\\d\", c ):\n        return int(c)\n    else:\n        return { \"J\":11, \"Q\":12, \"K\":13, \"A\":1 }[c]\n\ndef solve( src ):\n    hand = [ ( rank(c[0]), c[1] ) for c in re.findall( \"([^shdc]+)([shdc])\", src ) ]\n    return (\n        { 0:False, 7:\"RF\", 6:\"SF\", 4:\"FL\", 2:\"ST\", 3:\"ST\" }[\n            score(hand)\n        ] or { 0:False, 6:\"4SF\", 4:\"4F\", 2:\"4S\"}[\n            max( [ score(h) for h in (\n                [ hand[0:i]+hand[i+1:5] for i in range(0,5) ]\n            ) ] )\n        ] or \"-\" )\n\n\ndef test( samples ) :\n    for line in samples.splitlines():\n        a=re.split( \"\\s+\", line ) # num, input, expected\n        if len(a) != 3:\n            continue\n        actual = solve( a[1] )\n        ok=actual==a[2]\n        print( [ \"ok\" if ok else \"***NG***\", a, actual ] )\n\ntest( \"\"\"\n0   Qs9s3dJd10h 4S\n1   KdAdJd10dQd RF\n52  10dKdQdAdJd RF\"\"\"    )\n\n\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u306f\u7701\u7565\u3002\nruby\u7248( http://qiita.com/items/c6ebf2c1a9c750568e97 )\u3092\u305d\u306e\u307e\u307e\u79fb\u690d\u3057\u305f\u3002\nruby \u304b\u3089\u79fb\u690d\u3059\u308b\u3068\u3001return \u3092\u66f8\u304b\u306a\u304f\u3066\u306f\u3044\u3051\u306a\u3044\u306e\u304c\u3059\u3054\u304f\u65b0\u9bae\u3002\nfor \u30eb\u30fc\u30d7\u306e else \u3092\u4f7f\u3044\u305f\u3044\u3068\u601d\u3063\u3066\u305f\u3093\u3060\u3051\u3069\u3001\u4f7f\u3046\u5834\u9762\u304c\u306a\u304b\u3063\u305f\u3002\u6b8b\u5ff5\u3002\npython \u306b\u306f\u5168\u7136\u6163\u308c\u3066\u306a\u3044\u306e\u3067\u3001\u666e\u901a\u306f\u3053\u3046\u66f8\u304b\u306a\u3044\u3088\uff01\u307f\u305f\u3044\u306a\u60c5\u5831\u3092\u6559\u3048\u3066\u4e0b\u3055\u308b\u3068\u3042\u308a\u304c\u305f\u3044\u3067\u3059\uff1epython \u306e\u4eba\n\u30a4\u30d9\u30f3\u30c8 : http://atnd.org/events/38678\n\u554f\u984c : http://nabetani.sakura.ne.jp/hena/ord10pokarest/\n\u89e3\u7b54\u30ea\u30f3\u30af\u96c6 : http://qiita.com/items/d819d1e5f2378317511e\n\nPython \u3067\u66f8\u3044\u3066\u307f\u305f\u3002\n2.7.2 \u3068 3.3 \u306e\u4e21\u65b9\u3067\u52d5\u304f\u3053\u3068\u3092\u78ba\u8a8d\u3002\n\n```python:ord10pokarest.py\n#coding:utf-8\nimport re\n\ndef  isroyal( hand ) :\n    ranks=sorted( [ r[0] for r in hand ] )\n    return ranks==[1,10,11,12,13]\n\ndef  isstraight( hand ) :\n    ranks=sorted( [ r[0] for r in hand ] )\n    return (\n        ranks==list( range( ranks[0], ranks[-1]+1) ) or \n        ranks==[1]+list( range( ranks[1], 14) ) )\n\ndef  isflash( hand ) :\n    return len(set( [ r[1] for r in hand ] ))==1\n\ndef score( hand ):\n    return (( 1 if isroyal( hand) else 0 ) +\n    ( 2 if isstraight( hand) else 0 ) +\n    ( 4 if isflash( hand) else 0 ) )\n\ndef rank( c ):\n    if re.match( \"\\d\", c ):\n        return int(c)\n    else:\n        return { \"J\":11, \"Q\":12, \"K\":13, \"A\":1 }[c]\n\ndef solve( src ):\n    hand = [ ( rank(c[0]), c[1] ) for c in re.findall( \"([^shdc]+)([shdc])\", src ) ]\n    return (\n        { 0:False, 7:\"RF\", 6:\"SF\", 4:\"FL\", 2:\"ST\", 3:\"ST\" }[\n            score(hand)\n        ] or { 0:False, 6:\"4SF\", 4:\"4F\", 2:\"4S\"}[\n            max( [ score(h) for h in (\n                [ hand[0:i]+hand[i+1:5] for i in range(0,5) ]\n            ) ] )\n        ] or \"-\" )\n\n\ndef test( samples ) :\n    for line in samples.splitlines():\n        a=re.split( \"\\s+\", line ) # num, input, expected\n        if len(a) != 3:\n            continue\n        actual = solve( a[1] )\n        ok=actual==a[2]\n        print( [ \"ok\" if ok else \"***NG***\", a, actual ] )\n\ntest( \"\"\"\n0   Qs9s3dJd10h 4S\n1   KdAdJd10dQd RF\n52  10dKdQdAdJd RF\"\"\"    )\n```\n\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u306f\u7701\u7565\u3002\n\nruby\u7248( http://qiita.com/items/c6ebf2c1a9c750568e97 )\u3092\u305d\u306e\u307e\u307e\u79fb\u690d\u3057\u305f\u3002\n\nruby \u304b\u3089\u79fb\u690d\u3059\u308b\u3068\u3001return \u3092\u66f8\u304b\u306a\u304f\u3066\u306f\u3044\u3051\u306a\u3044\u306e\u304c\u3059\u3054\u304f\u65b0\u9bae\u3002\n\nfor \u30eb\u30fc\u30d7\u306e else \u3092\u4f7f\u3044\u305f\u3044\u3068\u601d\u3063\u3066\u305f\u3093\u3060\u3051\u3069\u3001\u4f7f\u3046\u5834\u9762\u304c\u306a\u304b\u3063\u305f\u3002\u6b8b\u5ff5\u3002\n\npython \u306b\u306f\u5168\u7136\u6163\u308c\u3066\u306a\u3044\u306e\u3067\u3001\u666e\u901a\u306f\u3053\u3046\u66f8\u304b\u306a\u3044\u3088\uff01\u307f\u305f\u3044\u306a\u60c5\u5831\u3092\u6559\u3048\u3066\u4e0b\u3055\u308b\u3068\u3042\u308a\u304c\u305f\u3044\u3067\u3059\uff1epython \u306e\u4eba", "tags": ["\u3069\u3046\u66f8\u304f", "Python3.3", "yhpg"]}