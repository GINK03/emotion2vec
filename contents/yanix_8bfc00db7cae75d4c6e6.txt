{"context": "\n\n\u6982\u8981\nESP-WROOM-02\u306bI2C\u3067\u63a5\u7d9a\u3057\u305fINA219\u306e\u96fb\u6d41\u5024\u3092WebSocket\u3092\u4f7f\u3063\u3066android\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u901a\u4fe1\u3092\u884c\u3044\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306fESP-WROOM-02\u3092\u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3001\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u304cESP-WROOM-02\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3088\u3046\u306a\u5f62\u306b\u306a\u308a\u307e\u3059\u3002\u306a\u304a\u3001IP\u30a2\u30c9\u30ec\u30b9\u306f\u4eca\u56de\u306f\u6c7a\u3081\u6253\u3061\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u80cc\u666f\nESP-WROOM-02\u306barduinoIDE\u3092\u3064\u304b\u3063\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304d\u8fbc\u3081\u308b\u3068\u8a00\u3046\u3053\u3068\u3092\u77e5\u308a\u3001\u305b\u3063\u304b\u304f\u306a\u306e\u3067WiFi\u7d4c\u7531\u3067\u4f55\u304b\u30c7\u30fc\u30bf\u3092\u9001\u3063\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u3064\u304d\u307e\u3057\u305f\u3002\n\u30bb\u30f3\u30b5\u30fc\u3067\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3059\u308b\u306e\u306b\u3044\u3044\u65b9\u6cd5\u306f\u306a\u3044\u304b\u3001\u63a2\u3057\u3066\u3044\u308b\u3068WebSocket\u304c\u4f7f\u3048\u305d\u3046\u3060\u3063\u305f\u306e\u3067\u4f7f\u3063\u3066\u898b\u307e\u3057\u305f\u3002\n\n\u53c2\u8003\u306b\u3057\u305f\u30da\u30fc\u30b8\n\n\u3068\u3082\u306e\u6280\u8853\u30e1\u30e2 - ESP8266\u306bWebSocket\u3092\u558b\u3089\u305b\u3066\u307f\u308b\nWebSocket \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea (Java SE 1.5+, Android) \n\n\nESP-WROOM-02\u5074\u306e\u6e96\u5099\n\nESP-WROOM-02\u306b\u306fAdafruit_INA219\u3092I2C\u63a5\u7d9a\u3092\u884c\u3044\u307e\u3059\u3002\nAdafruit_INA219\u306b\u306farduino\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\u3053\u3053\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u308bWebSocket\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\n\nsensor.ino\n#include <Arduino.h>\n\n#include <ESP8266WiFi.h>\n#include <ESP8266WiFiMulti.h>\n#include <WebSocketsServer.h>\n#include <Hash.h>\n#include <Adafruit_INA219.h>\n#include <Wire.h>\n\n//ESP8266WiFiMulti WiFiMulti;\n\nAdafruit_INA219 ina219;\n\nWebSocketsServer webSocket = WebSocketsServer(80);\n\n#define USE_SERIAL Serial\n\n/* Set these to your desired credentials. */\nconst char *ssid = \"ESPap\";\n\nvoid webSocketEvent(uint8_t num, WStype_t type, uint8_t * payload, size_t lenght) {\n\n  switch (type) {\n    case WStype_DISCONNECTED:\n      USE_SERIAL.printf(\"[%u] Disconnected!\\n\", num);\n      break;\n    case WStype_CONNECTED:\n      {\n        IPAddress ip = webSocket.remoteIP(num);\n        USE_SERIAL.printf(\"[%u] Connected from %d.%d.%d.%d url: %s\\n\", num, ip[0], ip[1], ip[2], ip[3], payload);\n\n        // send message to client\n        webSocket.sendTXT(num, \"Connected\");\n      }\n      break;\n    case WStype_TEXT:\n      USE_SERIAL.printf(\"[%u] get Text: %s\\n\", num, payload);\n\n      // send message to client\n      // webSocket.sendTXT(num, \"message here\");\n\n      // send data to all connected clients\n      // webSocket.broadcastTXT(\"message here\");\n      break;\n    case WStype_BIN:\n      USE_SERIAL.printf(\"[%u] get binary lenght: %u\\n\", num, lenght);\n      hexdump(payload, lenght);\n\n      // send message to client\n      // webSocket.sendBIN(num, payload, lenght);\n      break;\n  }\n\n}\n\nvoid Response(){\n  char ma[10];\n\n float shuntvoltage = 0;\n float busvoltage = 0;\n float current_mA = 0;\n float loadvoltage = 0;\n float power = 0;\n shuntvoltage = ina219.getShuntVoltage_mV();\n busvoltage = ina219.getBusVoltage_V();\n current_mA = ina219.getCurrent_mA();\n loadvoltage = busvoltage + (shuntvoltage / 1000);\n power = current_mA * loadvoltage;\n// Serial.print(\"Bus Voltage: \"); Serial.print(busvoltage); Serial.println(\" V\");\n// Serial.print(\"Shunt Voltage: \"); Serial.print(shuntvoltage); Serial.println(\" mV\");\n// Serial.print(\"Load Voltage: \"); Serial.print(loadvoltage); Serial.println(\" V\");\n// Serial.print(\"Current: \"); Serial.print(current_mA); Serial.println(\" mA\");\n// Serial.print(\"Power: \"); Serial.print(power); Serial.println(\" mW\");\n// Serial.println(\"\");\n\n  dtostrf(current_mA,4,1,ma);\n  webSocket.broadcastTXT(ma);\n//  USE_SERIAL.print(\"WebSocket\");USE_SERIAL.print(ma);USE_SERIAL.print(\"; ina:\");USE_SERIAL.println(current_mA);\n\n}\n\n\nvoid setup() {\n  // USE_SERIAL.begin(921600);\n  USE_SERIAL.begin(115200);\n\n  //Serial.setDebugOutput(true);\n  //USE_SERIAL.setDebugOutput(true);\n\n  USE_SERIAL.println();\n  USE_SERIAL.println();\n  USE_SERIAL.println();\n\n  // INA219\u521d\u671f\u8a2d\u5b9a\n  uint32_t currentFrequency;\n  Serial.begin(115200);\n  Serial.println(\"Hello!\");\n  Serial.println(\"Measuring voltage and current with INA219 ...\");\n  ina219.begin();\n\n  // WiFi \u521d\u671f\u8a2d\u5b9a\n  for (uint8_t t = 4; t > 0; t--) {\n    USE_SERIAL.printf(\"[SETUP] BOOT WAIT %d...\\n\", t);\n    USE_SERIAL.flush();\n    delay(1000);\n  }\n  //    WiFiMulti.addAP(\"SSID\", \"passpasspass\");\n  //    while(WiFiMulti.run() != WL_CONNECTED) {\n  //        delay(100);\n  //    }\n\n  WiFi.softAPConfig(IPAddress(192, 168, 10, 2), IPAddress(192, 168, 10, 1), IPAddress(255, 255, 255, 0));\n  WiFi.softAP(ssid);\n  IPAddress myIP = WiFi.softAPIP();\n  Serial.print(\"AP IP address: \");\n  Serial.println(myIP);\n\n  // WebSocket\u521d\u671f\u8a2d\u5b9a\n  webSocket.begin();\n  webSocket.onEvent(webSocketEvent);\n}\n\nvoid loop() {\n  webSocket.loop();\n  Response();\n  delay(100);\n}\n\n\n\nAndroid\u5074\u306e\u6e96\u5099\n\nbuild.gradle\u306b\u4ee5\u4e0b\u306e\u8a2d\u5b9a\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n\nbuild.gradle\ndependencies {\n    compile 'com.neovisionaries:nv-websocket-client:1.26'\n}\n\n\n\nWebSocket\u7528\u306e\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n\nMyWebSocket.java\npublic class MyWebSocket extends Thread {\n\n    // Sensor Server IP\n    private static final String SERVER = \"ws://192.168.10.2\";\n\n    // The timeout value in milliseconds for socket connection.\n    private static final int TIMEOUT = 5000;\n\n    private static getSensorListener sensorListener = null;\n\n    private WebSocket ws;\n\n    public MyWebSocket() {\n    }\n\n    /**\n     * Connect to the server.\n     */\n    public static WebSocket connect() throws Exception\n    {\n        return new WebSocketFactory()\n                .setConnectionTimeout(TIMEOUT)\n                .createSocket(SERVER)\n                .addListener(new WebSocketAdapter() {\n                    // A text message arrived from the server.\n                    public void onTextMessage(WebSocket websocket, String message) {\n                        Log.d(\"WebSocket\",\"message :\" + message);\n                        sensorListener.getSensorData(message);\n                    }\n                })\n                .addExtension(WebSocketExtension.PERMESSAGE_DEFLATE)\n                .connect();\n    }\n\n    public void run(){\n        try {\n            ws = connect();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    /**\n     * \u30ea\u30b9\u30ca\u30fc\u3092\u8ffd\u52a0\u3059\u308b\n     * @param listener\n     */\n    public void setListener(getSensorListener listener){\n        sensorListener = listener;\n        Log.d(\"MyWebSocket\",\"set Listener\");\n    }\n\n    /**\n     * \u30ea\u30b9\u30ca\u30fc\u3092\u524a\u9664\u3059\u308b\n     */\n    public void removeListener(){\n        sensorListener = null;\n        Log.d(\"MyWebSocket\",\"remove Listener\");\n    }\n\n    public void sendText(String message){\n        ws.sendText(message);\n    }\n\n}\n\n\n\n\u4f5c\u6210\u7d50\u679c\n\u4e0a\u8a18\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f7f\u3063\u3066\u4f5c\u6210\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u52d5\u4f5c\u753b\u50cf\u304c\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\u53ef\u5909\u62b5\u6297\u3092\u4f7f\u3063\u3066\u6d41\u308c\u308b\u96fb\u6d41\u3092\u5909\u66f4\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n\n#\u6982\u8981\nESP-WROOM-02\u306bI2C\u3067\u63a5\u7d9a\u3057\u305fINA219\u306e\u96fb\u6d41\u5024\u3092WebSocket\u3092\u4f7f\u3063\u3066android\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u901a\u4fe1\u3092\u884c\u3044\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306fESP-WROOM-02\u3092\u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3001\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u304cESP-WROOM-02\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3088\u3046\u306a\u5f62\u306b\u306a\u308a\u307e\u3059\u3002\u306a\u304a\u3001IP\u30a2\u30c9\u30ec\u30b9\u306f\u4eca\u56de\u306f\u6c7a\u3081\u6253\u3061\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n#\u80cc\u666f\nESP-WROOM-02\u306barduinoIDE\u3092\u3064\u304b\u3063\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304d\u8fbc\u3081\u308b\u3068\u8a00\u3046\u3053\u3068\u3092\u77e5\u308a\u3001\u305b\u3063\u304b\u304f\u306a\u306e\u3067WiFi\u7d4c\u7531\u3067\u4f55\u304b\u30c7\u30fc\u30bf\u3092\u9001\u3063\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u3064\u304d\u307e\u3057\u305f\u3002\n\u30bb\u30f3\u30b5\u30fc\u3067\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3059\u308b\u306e\u306b\u3044\u3044\u65b9\u6cd5\u306f\u306a\u3044\u304b\u3001\u63a2\u3057\u3066\u3044\u308b\u3068WebSocket\u304c\u4f7f\u3048\u305d\u3046\u3060\u3063\u305f\u306e\u3067\u4f7f\u3063\u3066\u898b\u307e\u3057\u305f\u3002\n\n#\u53c2\u8003\u306b\u3057\u305f\u30da\u30fc\u30b8\n* [\u3068\u3082\u306e\u6280\u8853\u30e1\u30e2 - ESP8266\u306bWebSocket\u3092\u558b\u3089\u305b\u3066\u307f\u308b](http://tomono.eleho.net/2015/07/29/5862/ )\n* [WebSocket \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea (Java SE 1.5+, Android) ](http://darutk-oboegaki.blogspot.jp/2015/04/websocket-java-se-15-android.html)\n\n# ESP-WROOM-02\u5074\u306e\u6e96\u5099\n\n* ESP-WROOM-02\u306b\u306fAdafruit_INA219\u3092I2C\u63a5\u7d9a\u3092\u884c\u3044\u307e\u3059\u3002\n\n* Adafruit_INA219\u306b\u306farduino\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\n* [\u3053\u3053](http://tomono.eleho.net/2015/07/29/5862/ )\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u308bWebSocket\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\n```cpp:sensor.ino\n#include <Arduino.h>\n\n#include <ESP8266WiFi.h>\n#include <ESP8266WiFiMulti.h>\n#include <WebSocketsServer.h>\n#include <Hash.h>\n#include <Adafruit_INA219.h>\n#include <Wire.h>\n\n//ESP8266WiFiMulti WiFiMulti;\n\nAdafruit_INA219 ina219;\n\nWebSocketsServer webSocket = WebSocketsServer(80);\n\n#define USE_SERIAL Serial\n\n/* Set these to your desired credentials. */\nconst char *ssid = \"ESPap\";\n\nvoid webSocketEvent(uint8_t num, WStype_t type, uint8_t * payload, size_t lenght) {\n\n  switch (type) {\n    case WStype_DISCONNECTED:\n      USE_SERIAL.printf(\"[%u] Disconnected!\\n\", num);\n      break;\n    case WStype_CONNECTED:\n      {\n        IPAddress ip = webSocket.remoteIP(num);\n        USE_SERIAL.printf(\"[%u] Connected from %d.%d.%d.%d url: %s\\n\", num, ip[0], ip[1], ip[2], ip[3], payload);\n\n        // send message to client\n        webSocket.sendTXT(num, \"Connected\");\n      }\n      break;\n    case WStype_TEXT:\n      USE_SERIAL.printf(\"[%u] get Text: %s\\n\", num, payload);\n\n      // send message to client\n      // webSocket.sendTXT(num, \"message here\");\n\n      // send data to all connected clients\n      // webSocket.broadcastTXT(\"message here\");\n      break;\n    case WStype_BIN:\n      USE_SERIAL.printf(\"[%u] get binary lenght: %u\\n\", num, lenght);\n      hexdump(payload, lenght);\n\n      // send message to client\n      // webSocket.sendBIN(num, payload, lenght);\n      break;\n  }\n\n}\n\nvoid Response(){\n  char ma[10];\n\n float shuntvoltage = 0;\n float busvoltage = 0;\n float current_mA = 0;\n float loadvoltage = 0;\n float power = 0;\n shuntvoltage = ina219.getShuntVoltage_mV();\n busvoltage = ina219.getBusVoltage_V();\n current_mA = ina219.getCurrent_mA();\n loadvoltage = busvoltage + (shuntvoltage / 1000);\n power = current_mA * loadvoltage;\n// Serial.print(\"Bus Voltage: \"); Serial.print(busvoltage); Serial.println(\" V\");\n// Serial.print(\"Shunt Voltage: \"); Serial.print(shuntvoltage); Serial.println(\" mV\");\n// Serial.print(\"Load Voltage: \"); Serial.print(loadvoltage); Serial.println(\" V\");\n// Serial.print(\"Current: \"); Serial.print(current_mA); Serial.println(\" mA\");\n// Serial.print(\"Power: \"); Serial.print(power); Serial.println(\" mW\");\n// Serial.println(\"\");\n\n  dtostrf(current_mA,4,1,ma);\n  webSocket.broadcastTXT(ma);\n//  USE_SERIAL.print(\"WebSocket\");USE_SERIAL.print(ma);USE_SERIAL.print(\"; ina:\");USE_SERIAL.println(current_mA);\n\n}\n\n\nvoid setup() {\n  // USE_SERIAL.begin(921600);\n  USE_SERIAL.begin(115200);\n\n  //Serial.setDebugOutput(true);\n  //USE_SERIAL.setDebugOutput(true);\n\n  USE_SERIAL.println();\n  USE_SERIAL.println();\n  USE_SERIAL.println();\n\n  // INA219\u521d\u671f\u8a2d\u5b9a\n  uint32_t currentFrequency;\n  Serial.begin(115200);\n  Serial.println(\"Hello!\");\n  Serial.println(\"Measuring voltage and current with INA219 ...\");\n  ina219.begin();\n\n  // WiFi \u521d\u671f\u8a2d\u5b9a\n  for (uint8_t t = 4; t > 0; t--) {\n    USE_SERIAL.printf(\"[SETUP] BOOT WAIT %d...\\n\", t);\n    USE_SERIAL.flush();\n    delay(1000);\n  }\n  //    WiFiMulti.addAP(\"SSID\", \"passpasspass\");\n  //    while(WiFiMulti.run() != WL_CONNECTED) {\n  //        delay(100);\n  //    }\n\n  WiFi.softAPConfig(IPAddress(192, 168, 10, 2), IPAddress(192, 168, 10, 1), IPAddress(255, 255, 255, 0));\n  WiFi.softAP(ssid);\n  IPAddress myIP = WiFi.softAPIP();\n  Serial.print(\"AP IP address: \");\n  Serial.println(myIP);\n\n  // WebSocket\u521d\u671f\u8a2d\u5b9a\n  webSocket.begin();\n  webSocket.onEvent(webSocketEvent);\n}\n\nvoid loop() {\n  webSocket.loop();\n  Response();\n  delay(100);\n}\n```\n\n# Android\u5074\u306e\u6e96\u5099\n\n* build.gradle\u306b\u4ee5\u4e0b\u306e\u8a2d\u5b9a\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n```build.gradle\ndependencies {\n    compile 'com.neovisionaries:nv-websocket-client:1.26'\n}\n```\n\n* WebSocket\u7528\u306e\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n```MyWebSocket.java\npublic class MyWebSocket extends Thread {\n\n    // Sensor Server IP\n    private static final String SERVER = \"ws://192.168.10.2\";\n\n    // The timeout value in milliseconds for socket connection.\n    private static final int TIMEOUT = 5000;\n\n    private static getSensorListener sensorListener = null;\n\n    private WebSocket ws;\n\n    public MyWebSocket() {\n    }\n\n    /**\n     * Connect to the server.\n     */\n    public static WebSocket connect() throws Exception\n    {\n        return new WebSocketFactory()\n                .setConnectionTimeout(TIMEOUT)\n                .createSocket(SERVER)\n                .addListener(new WebSocketAdapter() {\n                    // A text message arrived from the server.\n                    public void onTextMessage(WebSocket websocket, String message) {\n                        Log.d(\"WebSocket\",\"message :\" + message);\n                        sensorListener.getSensorData(message);\n                    }\n                })\n                .addExtension(WebSocketExtension.PERMESSAGE_DEFLATE)\n                .connect();\n    }\n\n    public void run(){\n        try {\n            ws = connect();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    /**\n     * \u30ea\u30b9\u30ca\u30fc\u3092\u8ffd\u52a0\u3059\u308b\n     * @param listener\n     */\n    public void setListener(getSensorListener listener){\n        sensorListener = listener;\n        Log.d(\"MyWebSocket\",\"set Listener\");\n    }\n\n    /**\n     * \u30ea\u30b9\u30ca\u30fc\u3092\u524a\u9664\u3059\u308b\n     */\n    public void removeListener(){\n        sensorListener = null;\n        Log.d(\"MyWebSocket\",\"remove Listener\");\n    }\n\n    public void sendText(String message){\n        ws.sendText(message);\n    }\n\n}\n```\n\n# \u4f5c\u6210\u7d50\u679c\n\n\u4e0a\u8a18\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f7f\u3063\u3066\u4f5c\u6210\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u52d5\u4f5c\u753b\u50cf\u304c\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\u53ef\u5909\u62b5\u6297\u3092\u4f7f\u3063\u3066\u6d41\u308c\u308b\u96fb\u6d41\u3092\u5909\u66f4\u3057\u3066\u3044\u307e\u3059\u3002\n\n![kekka.gif](https://qiita-image-store.s3.amazonaws.com/0/122563/aea8a896-8c7a-335b-18c4-95b87c4e3380.gif)\n\n\n", "tags": ["ESP-WROOM-02", "Android", "websocket"]}