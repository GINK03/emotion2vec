{"tags": ["Swift", "iOS", "XCTest"], "context": "\n\n\u306f\u3058\u3081\u306b\nXCTest\u3067\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\nPart1\u3067\u306f\u3001\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3068\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30c6\u30b9\u30c8\u306e\u57fa\u790e\u306b\u3064\u3044\u3066\u8a18\u8f09\u3057\u307e\u3059\u3002\nPart2\u3082\u66f8\u304d\u307e\u3057\u305f\u3002\nXCTest\u5165\u9580Part2 (Swift) ~\u975e\u540c\u671f\u7de8~\nhttp://qiita.com/okuderap/items/e02b73880b8bc499debe\nXCTest\u3067\u30ab\u30d0\u30ec\u30c3\u30b8\u3092\u78ba\u8a8d\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f\u3053\u3061\u3089\u3002\nhttp://qiita.com/okuderap/items/de574685592fe0bee8ea\n\n\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30c6\u30b9\u30c8\u306b\u3064\u3044\u3066\nXCTest\u3067\u306f\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u6e2c\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nself.measureBlock{ }\u5185\u306e\u30b3\u30fc\u30c9\u309210\u56de\u5b9f\u884c\u3057\u3066\u3001\n\u51e6\u7406\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306e\u5e73\u5747\u3068\u6a19\u6e96\u504f\u5dee(\u3070\u3089\u3064\u304d)\u3092\u6e2c\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nBaseline\n\u2192\u57fa\u6e96\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u3053\u308c\u3088\u308a\u6642\u9593\u304c\u304b\u304b\u308b\u3068\u5931\u6557\u3068\u306a\u308a\u307e\u3059\u3002\nMax STDDEV\n\u2192\u6a19\u6e96\u504f\u5dee\u306e\u6700\u5927\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u3053\u308c\u3092\u4e0a\u56de\u308b(\u3070\u3089\u3064\u304d\u304c\u5927\u304d\u904e\u304e\u308b)\u3068\u5931\u6557\u3068\u306a\u308a\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u51e6\u7406\u3084\u3001\u30a8\u30f3\u30b3\u30fc\u30c9\u30fb\u30c7\u30b3\u30fc\u30c9\u51e6\u7406\u306a\u3069\u6642\u9593\u306e\u304b\u304b\u308b\u51e6\u7406\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u6e2c\u5b9a\u3059\u308b\u969b\u306b\u6709\u7528\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30c6\u30b9\u30c8\u3057\u3066\u307f\u308b\n\n\u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30e1\u30bd\u30c3\u30c9\n\u4eca\u56de\u306fMVC\u30e2\u30c7\u30eb\u306e\u3046\u3061Model\u306b\u5f53\u305f\u308b\u90e8\u5206\u306e\u307f\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e2\u3064\u306e\u30b5\u30f3\u30d7\u30eb\u30e1\u30bd\u30c3\u30c9\u3092\u30c6\u30b9\u30c8\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nModel.swift\n    /// \u7a0e\u8fbc\u4fa1\u683c\u3092\u8fd4\u3059\n    func taxIncludedPrice(taxExcludedPrice: UInt) -> UInt {\n        return taxExcludedPrice * 108 / 100\n    }\n\n    /// \u6587\u5b57\u5217\u306e\u672b\u5c3e\u304cp\u3067\u306a\u3051\u308c\u3070p\u3092\u3064\u3051\u308b\n    func addSuffixP(inout name: String) -> Bool {\n        if name.hasSuffix(\"p\") {\n            return false\n        }\n        name = name + \"p\"\n        return true\n    }\n\n\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\n\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u540d\u524d\u306f\u3001<\u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30af\u30e9\u30b9\u540d + Tests>\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\u672c\u30b5\u30f3\u30d7\u30eb\u306fModel.swift\u306e\u30c6\u30b9\u30c8\u3092\u3059\u308b\u306e\u3067\u3001ModelTests.swift\u3068\u3057\u3066\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\n\nsetup( )\n\u2192\u5404\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u524d\u306b\u6bce\u56de\u547c\u3070\u308c\u307e\u3059\u3002\ntearDown( )\n\u2192\u5404\u30c6\u30b9\u30c8\u5b9f\u884c\u5f8c\u306b\u6bce\u56de\u547c\u3070\u308c\u307e\u3059\u3002\ntestExample( )\n\u2192\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002<test + \u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30e1\u30bd\u30c3\u30c9\u540d>\ntestPerformanceExample( )\n\u2192\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30c6\u30b9\u30c8\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002<testPerformance + \u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30e1\u30bd\u30c3\u30c9\u540d>\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\nsetup( )\u2192testExample( )\u2192tearDown( )\n\u2192setup( )\u2192testAaa( )\u2192tearDown( )\n\u2192setup( )\u2192testBbb( )\u2192tearDown( )\n\u3068\u3044\u3046\u6d41\u308c\u3067\u5404\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u308b\n@testable import ${PROJECT_NAME}\u3068\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3067\u3001\npublic, internal\u30b7\u30f3\u30dc\u30eb\u306e\u30c6\u30b9\u30c8\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d\u304cSwiftXCTestSample\u3067\u3042\u308c\u3070\u3001\n@testable import SwiftXCTestSample\u3068\u306a\u308a\u307e\u3059\u3002\n\u672c\u30b5\u30f3\u30d7\u30eb\u306e\u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u5358\u7d14\u306a\u51e6\u7406\u3067\u3059\u304c\u3001\n\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30c6\u30b9\u30c8\u306e\u30b3\u30fc\u30c9\u3082\u4f75\u305b\u3066\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n\nModelTests.swift\n//\n//  ModelTests.swift\n//  SwiftXCTestSample\n//\n\nimport XCTest\n@testable import SwiftXCTestSample\n\nclass ModelTests: XCTestCase {\n\n    let model = Model()\n\n    override func setUp() {\n        super.setUp()\n    }\n\n    override func tearDown() {\n        super.tearDown()\n    }\n\n    func testTaxIncludedPrice() {\n\n        var testPrice: UInt = 0\n        XCTAssertEqual(model.taxIncludedPrice(testPrice), 0)\n\n        testPrice = 100\n        XCTAssertEqual(model.taxIncludedPrice(testPrice), 108)\n    }\n\n    func testPerformanceTaxIncludedPrice() {\n\n        self.measureBlock {\n            let testPrice: UInt = 100\n            XCTAssertEqual(self.model.taxIncludedPrice(testPrice), 108)\n        }\n    }\n\n    func testAddSuffixP() {\n        var name = \"okudera\"\n        XCTAssertTrue(model.addSuffixP(&name))\n\n        name = \"cap\"\n        XCTAssertFalse(model.addSuffixP(&name))\n    }\n\n    func testPerformanceAddSuffixP() {\n\n        self.measureBlock {\n            var name = \"okudera\"\n            XCTAssertTrue(self.model.addSuffixP(&name))\n        }\n    }\n}\n\n\n\n\u672c\u30b5\u30f3\u30d7\u30eb\u3067\u4f7f\u7528\u3057\u305fAssert\nXCTAssertEqual\n\u21922\u5024\u304c\u7b49\u3057\u3044\u3053\u3068\u3092\u30c6\u30b9\u30c8\nXCTAssertTrue\n\u2192true\u3067\u3042\u308b\u3053\u3068\u3092\u30c6\u30b9\u30c8\nXCTAssertFalse\n\u2192false\u3067\u3042\u308b\u3053\u3068\u3092\u30c6\u30b9\u30c8\n\u3053\u306e\u307b\u304b\u306b\u3082\nXCTAssertNotEqual\n\u21922\u5024\u304c\u7b49\u3057\u304f\u7121\u3044\u3053\u3068\u3092\u30c6\u30b9\u30c8\nXCTAssertNil\n\u2192nil\u3067\u3042\u308b\u3053\u3068\u3092\u30c6\u30b9\u30c8\nXCTAssertNotNil\n\u2192nil\u3067\u7121\u3044\u3053\u3068\u3092\u30c6\u30b9\u30c8\n\u306a\u3069\u306eAssert\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u3055\u3044\u3054\u306b\n\u4eca\u56de\u306fXCTest\u306e\u57fa\u672c\u7684\u306a\u3068\u3053\u308d\u306b\u3064\u3044\u3066\u66f8\u304d\u307e\u3057\u305f\u3002\n#\u306f\u3058\u3081\u306b\nXCTest\u3067\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\nPart1\u3067\u306f\u3001\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3068\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30c6\u30b9\u30c8\u306e\u57fa\u790e\u306b\u3064\u3044\u3066\u8a18\u8f09\u3057\u307e\u3059\u3002\n\nPart2\u3082\u66f8\u304d\u307e\u3057\u305f\u3002\nXCTest\u5165\u9580Part2 (Swift) ~\u975e\u540c\u671f\u7de8~\nhttp://qiita.com/okuderap/items/e02b73880b8bc499debe\n\nXCTest\u3067\u30ab\u30d0\u30ec\u30c3\u30b8\u3092\u78ba\u8a8d\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f\u3053\u3061\u3089\u3002\nhttp://qiita.com/okuderap/items/de574685592fe0bee8ea\n\n#\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30c6\u30b9\u30c8\u306b\u3064\u3044\u3066\nXCTest\u3067\u306f\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u6e2c\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nself.measureBlock{ }\u5185\u306e\u30b3\u30fc\u30c9\u309210\u56de\u5b9f\u884c\u3057\u3066\u3001\n\u51e6\u7406\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306e**\u5e73\u5747**\u3068**\u6a19\u6e96\u504f\u5dee(\u3070\u3089\u3064\u304d)**\u3092\u6e2c\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<img width=\"245\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-08-01 2.47.20.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/103695/bcbaa0c2-4e20-f824-c10a-f9f4ab21c7ed.png\">\n\n\nBaseline\n\u2192\u57fa\u6e96\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u3053\u308c\u3088\u308a\u6642\u9593\u304c\u304b\u304b\u308b\u3068\u5931\u6557\u3068\u306a\u308a\u307e\u3059\u3002\nMax STDDEV\n\u2192\u6a19\u6e96\u504f\u5dee\u306e\u6700\u5927\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u3053\u308c\u3092\u4e0a\u56de\u308b(\u3070\u3089\u3064\u304d\u304c\u5927\u304d\u904e\u304e\u308b)\u3068\u5931\u6557\u3068\u306a\u308a\u307e\u3059\u3002\n\n\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u51e6\u7406\u3084\u3001\u30a8\u30f3\u30b3\u30fc\u30c9\u30fb\u30c7\u30b3\u30fc\u30c9\u51e6\u7406\u306a\u3069\u6642\u9593\u306e\u304b\u304b\u308b\u51e6\u7406\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u6e2c\u5b9a\u3059\u308b\u969b\u306b\u6709\u7528\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n#\u30c6\u30b9\u30c8\u3057\u3066\u307f\u308b\n##\u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30e1\u30bd\u30c3\u30c9\n\u4eca\u56de\u306fMVC\u30e2\u30c7\u30eb\u306e\u3046\u3061Model\u306b\u5f53\u305f\u308b\u90e8\u5206\u306e\u307f\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\n\n\u4ee5\u4e0b\u306e2\u3064\u306e\u30b5\u30f3\u30d7\u30eb\u30e1\u30bd\u30c3\u30c9\u3092\u30c6\u30b9\u30c8\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n```swift:Model.swift\n    /// \u7a0e\u8fbc\u4fa1\u683c\u3092\u8fd4\u3059\n    func taxIncludedPrice(taxExcludedPrice: UInt) -> UInt {\n        return taxExcludedPrice * 108 / 100\n    }\n    \n    /// \u6587\u5b57\u5217\u306e\u672b\u5c3e\u304cp\u3067\u306a\u3051\u308c\u3070p\u3092\u3064\u3051\u308b\n    func addSuffixP(inout name: String) -> Bool {\n        if name.hasSuffix(\"p\") {\n            return false\n        }\n        name = name + \"p\"\n        return true\n    }\n```\n\n##\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\n\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u540d\u524d\u306f\u3001<\u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30af\u30e9\u30b9\u540d + Tests>\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\u672c\u30b5\u30f3\u30d7\u30eb\u306fModel.swift\u306e\u30c6\u30b9\u30c8\u3092\u3059\u308b\u306e\u3067\u3001ModelTests.swift\u3068\u3057\u3066\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n<img width=\"705\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-08-01 1.05.53.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/103695/f2cd2b5b-41b0-1c4b-0799-c6a3e7a4c17f.png\">\n\n<img width=\"718\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-08-01 1.06.14.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/103695/e5fc152b-4a67-2fee-ef3f-97d187e359e3.png\">\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\n<img width=\"729\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-08-01 1.07.17.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/103695/630f7da9-f326-370e-ba58-88af38e4a9c3.png\">\n\nsetup( )\n\u2192\u5404\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u524d\u306b\u6bce\u56de\u547c\u3070\u308c\u307e\u3059\u3002\ntearDown( )\n\u2192\u5404\u30c6\u30b9\u30c8\u5b9f\u884c\u5f8c\u306b\u6bce\u56de\u547c\u3070\u308c\u307e\u3059\u3002\ntestExample( )\n\u2192\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\\<test + \u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30e1\u30bd\u30c3\u30c9\u540d>\ntestPerformanceExample( )\n\u2192\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30c6\u30b9\u30c8\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\\<testPerformance + \u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30e1\u30bd\u30c3\u30c9\u540d>\n\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\nsetup( )\u2192testExample( )\u2192tearDown( )\n\u2192setup( )\u2192testAaa( )\u2192tearDown( )\n\u2192setup( )\u2192testBbb( )\u2192tearDown( )\n\u3068\u3044\u3046\u6d41\u308c\u3067\u5404\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n##\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u308b\n`@testable import ${PROJECT_NAME}`\u3068\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3067\u3001\npublic, internal\u30b7\u30f3\u30dc\u30eb\u306e\u30c6\u30b9\u30c8\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d\u304cSwiftXCTestSample\u3067\u3042\u308c\u3070\u3001\n`@testable import SwiftXCTestSample`\u3068\u306a\u308a\u307e\u3059\u3002\n\n\u672c\u30b5\u30f3\u30d7\u30eb\u306e\u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u5358\u7d14\u306a\u51e6\u7406\u3067\u3059\u304c\u3001\n\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30c6\u30b9\u30c8\u306e\u30b3\u30fc\u30c9\u3082\u4f75\u305b\u3066\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n\n```swift:ModelTests.swift\n//\n//  ModelTests.swift\n//  SwiftXCTestSample\n//\n\nimport XCTest\n@testable import SwiftXCTestSample\n\nclass ModelTests: XCTestCase {\n    \n    let model = Model()\n\n    override func setUp() {\n        super.setUp()\n    }\n    \n    override func tearDown() {\n        super.tearDown()\n    }\n\n    func testTaxIncludedPrice() {\n        \n        var testPrice: UInt = 0\n        XCTAssertEqual(model.taxIncludedPrice(testPrice), 0)\n        \n        testPrice = 100\n        XCTAssertEqual(model.taxIncludedPrice(testPrice), 108)\n    }\n\n    func testPerformanceTaxIncludedPrice() {\n        \n        self.measureBlock {\n            let testPrice: UInt = 100\n            XCTAssertEqual(self.model.taxIncludedPrice(testPrice), 108)\n        }\n    }\n    \n    func testAddSuffixP() {\n        var name = \"okudera\"\n        XCTAssertTrue(model.addSuffixP(&name))\n        \n        name = \"cap\"\n        XCTAssertFalse(model.addSuffixP(&name))\n    }\n    \n    func testPerformanceAddSuffixP() {\n        \n        self.measureBlock {\n            var name = \"okudera\"\n            XCTAssertTrue(self.model.addSuffixP(&name))\n        }\n    }\n}\n\n```\n\n\u672c\u30b5\u30f3\u30d7\u30eb\u3067\u4f7f\u7528\u3057\u305fAssert\nXCTAssertEqual\n\u21922\u5024\u304c\u7b49\u3057\u3044\u3053\u3068\u3092\u30c6\u30b9\u30c8\nXCTAssertTrue\n\u2192true\u3067\u3042\u308b\u3053\u3068\u3092\u30c6\u30b9\u30c8\nXCTAssertFalse\n\u2192false\u3067\u3042\u308b\u3053\u3068\u3092\u30c6\u30b9\u30c8\n\n\u3053\u306e\u307b\u304b\u306b\u3082\nXCTAssertNotEqual\n\u21922\u5024\u304c\u7b49\u3057\u304f\u7121\u3044\u3053\u3068\u3092\u30c6\u30b9\u30c8\nXCTAssertNil\n\u2192nil\u3067\u3042\u308b\u3053\u3068\u3092\u30c6\u30b9\u30c8\nXCTAssertNotNil\n\u2192nil\u3067\u7121\u3044\u3053\u3068\u3092\u30c6\u30b9\u30c8\n\u306a\u3069\u306eAssert\u304c\u3042\u308a\u307e\u3059\u3002\n\n#\u3055\u3044\u3054\u306b\n\u4eca\u56de\u306fXCTest\u306e\u57fa\u672c\u7684\u306a\u3068\u3053\u308d\u306b\u3064\u3044\u3066\u66f8\u304d\u307e\u3057\u305f\u3002\n"}