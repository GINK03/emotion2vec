{"context": "\n\nCGRectMake2\nfunc CGRectMake2(point:CGPoint,_ size:CGSize)->CGRect{\n    return CGRectMake(point.x,point.y,size.width,size.height)\n}\n\n\nUIView\u306e\u76f8\u5bfe\u5ea7\u6a19\u7cfb\npublic extension UIView{\n    func relativeWidthGetterBasedOnRatio(ratio:CGFloat)->CGFloat->CGFloat{\n        return { self.bounds.size.width * $0 / ratio }\n    }\n\n    func relativeHeightGetterBasedOnRatio(ratio:CGFloat)->CGFloat->CGFloat{\n        return { self.bounds.size.height * $0 / ratio }\n    }\n\n    func relativePointGetterBasedOnRatio(ratio:CGSize)->(x:CGFloat->CGFloat,y:CGFloat->CGFloat){\n        return (relativeWidthGetterBasedOnRatio(ratio.width),relativeHeightGetterBasedOnRatio(ratio.height))\n    }\n}\n\n\n\u4f8b\n    //\u30b5\u30a4\u30ba1:1.168\u306eUIView\u306e\u30e1\u30f3\u30d0\u30e1\u30bd\u30c3\u30c9\u5185\u3067   \n    backgroundColor = UIColor.greenColor()\n    let relsize = CGSizeMake(1,1.618)\n    let rel = relativePointGetterBasedOnRatio(relsize)\n    let point = CGPointMake(0, rel.y(0.618))\n    let size = CGSizeMake(rel.x(1.0),rel.y(1.0))\n    let frame = CGRectMake2(point,size)\n    let fixedframe = CGRectInset(frame, rel.x(0.1), rel.y(0.1))\n    let view = UIView(frame: fixedframe)\n    view.backgroundColor = UIColor.blueColor()\n    addSubview(view)    \n\n\n\n1~n\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u91cd\u8907\u306a\u3057\u6570\u5217\u751f\u6210\nfunc shuffledIntegers(size:Int)->[Int]{\n    var tmp = [Int](0 ..< size)\n    for i in 0..<size{\n        let c = arc4random_uniform_Int(size-i)\n        if c != n-i-1 {\n            swap(&tmp[c], &tmp[n-i-1])\n        }\n    }\n    return tmp\n}\n\nfunc arc4random_uniform_Int(a:Int)->Int{\n    return Int(arc4random_uniform(UInt32(a)))\n}\n\n# CGRectMake2\n```swift:\nfunc CGRectMake2(point:CGPoint,_ size:CGSize)->CGRect{\n    return CGRectMake(point.x,point.y,size.width,size.height)\n}\n```\n\n# UIView\u306e\u76f8\u5bfe\u5ea7\u6a19\u7cfb\n```swift:\npublic extension UIView{\n    func relativeWidthGetterBasedOnRatio(ratio:CGFloat)->CGFloat->CGFloat{\n        return { self.bounds.size.width * $0 / ratio }\n    }\n    \n    func relativeHeightGetterBasedOnRatio(ratio:CGFloat)->CGFloat->CGFloat{\n        return { self.bounds.size.height * $0 / ratio }\n    }\n    \n    func relativePointGetterBasedOnRatio(ratio:CGSize)->(x:CGFloat->CGFloat,y:CGFloat->CGFloat){\n        return (relativeWidthGetterBasedOnRatio(ratio.width),relativeHeightGetterBasedOnRatio(ratio.height))\n    }\n}\n```\n\n## \u4f8b\n```swift:\n    //\u30b5\u30a4\u30ba1:1.168\u306eUIView\u306e\u30e1\u30f3\u30d0\u30e1\u30bd\u30c3\u30c9\u5185\u3067   \n    backgroundColor = UIColor.greenColor()\n    let relsize = CGSizeMake(1,1.618)\n    let rel = relativePointGetterBasedOnRatio(relsize)\n    let point = CGPointMake(0, rel.y(0.618))\n    let size = CGSizeMake(rel.x(1.0),rel.y(1.0))\n    let frame = CGRectMake2(point,size)\n    let fixedframe = CGRectInset(frame, rel.x(0.1), rel.y(0.1))\n    let view = UIView(frame: fixedframe)\n    view.backgroundColor = UIColor.blueColor()\n    addSubview(view)    \n```\n\n![Simulator Screen Shot 2016.08.31 16.40.30.png](https://qiita-image-store.s3.amazonaws.com/0/19971/22feb453-e380-8385-bbaf-489206635a2c.png)\n\n\n# 1~n\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u91cd\u8907\u306a\u3057\u6570\u5217\u751f\u6210\n```swift:\nfunc shuffledIntegers(size:Int)->[Int]{\n    var tmp = [Int](0 ..< size)\n    for i in 0..<size{\n        let c = arc4random_uniform_Int(size-i)\n        if c != n-i-1 {\n            swap(&tmp[c], &tmp[n-i-1])\n        }\n    }\n    return tmp\n}\n\nfunc arc4random_uniform_Int(a:Int)->Int{\n    return Int(arc4random_uniform(UInt32(a)))\n}\n```\n", "tags": ["Swift", "UIView"]}