{"context": "\n\n\u306f\u3058\u3081\u306b\n\u672c\u8a18\u4e8b\u306fPython2.7, numpy 1.11, scipy 0.17, scikit-learn 0.18, matplotlib 1.5, seaborn 0.7, pandas 0.17\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\uff0e\njupyter notebook\u4e0a\u3067\u52d5\u4f5c\u78ba\u8a8d\u6e08\u307f\u3067\u3059\uff0e(%matplotlib inline\u306f\u9069\u5f53\u306b\u4fee\u6b63\u3057\u3066\u304f\u3060\u3055\u3044)\nSklearn\u306eManifold learning\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059\uff0e\n\u591a\u69d8\u4f53\u5b66\u7fd2\u3068\u8a00\u308f\u308c\u308b\u624b\u6cd5\u306b\u3064\u3044\u3066\uff0csklearn\u306edigits\u30b5\u30f3\u30d7\u30eb\u3092\u7528\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e\n\u7279\u306bt-SNE\u306fKaggle\u306a\u3069\u3067\u3082\u305f\u307e\u306b\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\uff0c\u591a\u6b21\u5143\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u306b\u9069\u3057\u305f\u624b\u6cd5\u3067\u3059\uff0e\n\u307e\u305f\u53ef\u8996\u5316\u3060\u3051\u3067\u306a\u304f\uff0c\u5143\u306e\u30c7\u30fc\u30bf\u3068\u5727\u7e2e\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u7d50\u5408\u3059\u308b\u3053\u3068\u3067\uff0c\u5358\u7d14\u306a\u5206\u985e\u554f\u984c\u306e\u7cbe\u5ea6\u3092\u5411\u4e0a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\n\u76ee\u6b21\n\n\u30c7\u30fc\u30bf\u306e\u751f\u6210\n\u7dda\u5f62\u8981\u7d20\u306b\u6ce8\u76ee\u3057\u305f\u6b21\u5143\u524a\u6e1b\n\n\nRandom Projection\nPCA\nLinear Discriminant Analysis \n\n\n\u975e\u7dda\u5f62\u6210\u5206\u3092\u8003\u616e\u3057\u305f\u6b21\u5143\u524a\u6e1b\n\n\nIsomap\nLocally Linear Embedding\nModified Locally Linear Embedding\nHessian Eigenmapping\nSpectral Embedding\nLocal Tangent Space Alignment\nMulti-dimensional Scaling\nt-SNE\nRandom Forest Embedding\n\n\n\n\n1. \u30c7\u30fc\u30bf\u306e\u751f\u6210\nsklearn\u306e\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3092\u7528\u3044\u307e\u3059\uff0e\n\u4eca\u56de\u306fdigits dataset\u3092\u7528\u3044\u3066\uff0c\u6570\u5b57\u306e\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3092\u884c\u3044\u307e\u3059\uff0e\n\u307e\u305a\u306f\u30c7\u30fc\u30bf\u306e\u30ed\u30fc\u30c9\u3068\u30c1\u30a7\u30c3\u30af\u3067\u3059\uff0e\n\nload_digit.py\nfrom time import time\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import offsetbox\nfrom sklearn import (manifold, datasets, decomposition, ensemble,\n                     discriminant_analysis, random_projection)\n\ndigits = datasets.load_digits(n_class=6)\nX = digits.data\ny = digits.target\nn_samples, n_features = X.shape\nn_neighbors = 30\n\nn_img_per_row = 20\nimg = np.zeros((10 * n_img_per_row, 10 * n_img_per_row))\nfor i in range(n_img_per_row):\n    ix = 10 * i + 1\n    for j in range(n_img_per_row):\n        iy = 10 * j + 1\n        img[ix:ix + 8, iy:iy + 8] = X[i * n_img_per_row + j].reshape((8, 8))\n\nplt.imshow(img, cmap=plt.cm.binary)\nplt.xticks([])\nplt.yticks([])\nplt.title('A selection from the 64-dimensional digits dataset')\n\n\n\n\ndigit\u30c7\u30fc\u30bf\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u7528\u95a2\u6570\u3092\u6e96\u5099\u3057\u307e\u3059\uff0e\n\u3053\u3061\u3089\u306f\u672c\u8a18\u4e8b\u306e\u4e3b\u984c\u3068\u305a\u308c\u308b\u306e\u3067\uff0c\u3088\u304f\u308f\u304b\u3089\u306a\u3051\u308c\u3070\u98db\u3070\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\ndef plot_embedding(X, title=None):\n    x_min, x_max = np.min(X, 0), np.max(X, 0)\n    X = (X - x_min) / (x_max - x_min)\n\n    plt.figure()\n    ax = plt.subplot(111)\n    for i in range(X.shape[0]):\n        plt.text(X[i, 0], X[i, 1], str(digits.target[i]),\n                 color=plt.cm.Set1(y[i] / 10.),\n                 fontdict={'weight': 'bold', 'size': 9})\n\n    if hasattr(offsetbox, 'AnnotationBbox'):\n        # only print thumbnails with matplotlib > 1.0\n        shown_images = np.array([[1., 1.]])  # just something big\n        for i in range(digits.data.shape[0]):\n            dist = np.sum((X[i] - shown_images) ** 2, 1)\n            if np.min(dist) < 4e-3:\n                # don't show points that are too close\n                continue\n            shown_images = np.r_[shown_images, [X[i]]]\n            imagebox = offsetbox.AnnotationBbox(\n                offsetbox.OffsetImage(digits.images[i], cmap=plt.cm.gray_r),\n                X[i])\n            ax.add_artist(imagebox)\n    plt.xticks([]), plt.yticks([])\n    if title is not None:\n        plt.title(title)\n\n\n2. \u7dda\u5f62\u6210\u5206\u306b\u7740\u76ee\u3057\u305f\u6b21\u5143\u524a\u6e1b\n\u3053\u3053\u3067\u7d39\u4ecb\u3059\u308b\u624b\u6cd5\u306f\uff0c\u4f4e\u8a08\u7b97\u30b3\u30b9\u30c8\u304b\u3064\u6c4e\u7528\u6027\u3082\u9ad8\u304f\uff0c\u983b\u7e41\u306b\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\n\u4f8b\u3048\u3070\uff0cPCA\u306f\u30c7\u30fc\u30bf\u306e\u76f8\u95a2\u6027\u3092\u62bd\u51fa\u3067\u304d\u308b\u975e\u5e38\u306b\u4fbf\u5229\u306a\u624b\u6cd5\u3067\u3059\uff0e\n\u3053\u308c\u3089\u306e\u624b\u6cd5\u306f\u591a\u304f\u306e\u30b5\u30a4\u30c8\u3067\u8a73\u3057\u304f\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u305f\u3081\uff0c\u8efd\u304f\u6d41\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\n2.1. Random Projection\n1\u306b\u3066\uff16\uff14\u6b21\u5143\u306e\u6570\u5024\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u307e\u3057\u305f\uff0e\n\u3053\u306e\u3088\u3046\u306a\u9ad8\u6b21\u5143\u30c7\u30fc\u30bf\u3092\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u6700\u3082\u57fa\u672c\u7684\u306a\u624b\u6cd5\u306f\uff0cRandom Projection\u3067\u3059\uff0e\n\u975e\u5e38\u306b\u5358\u7d14\u306a\u624b\u6cd5\u3067\uff0cM\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u3092\uff0c\u30de\u30c3\u30d4\u30f3\u30b0\u53ef\u80fd\u306aN\u6b21\u5143\u3078\u3068\u5199\u50cf\u3059\u308b\u884c\u5217R\u306e\u8981\u7d20\u3092\u4e71\u6570\u3067\u8a2d\u5b9a\u3057\u307e\u3059\uff0e\n\u30e1\u30ea\u30c3\u30c8\u3068\u3057\u3066\u306f\u8a08\u7b97\u30b3\u30b9\u30c8\u306e\u5c0f\u3055\u3055\u304c\u6319\u3052\u3089\u308c\u307e\u3059\uff0e\nprint(\"Computing random projection\")\nrp = random_projection.SparseRandomProjection(n_components=2, random_state=42)\nX_projected = rp.fit_transform(X)\nplot_embedding(X_projected, \"Random Projection of the digits\")\n#plt.scatter(X_projected[:, 0], X_projected[:, 1])\n\n\n\n2.2. PCA\n\u4e00\u822c\u7684\u306a\u6b21\u5143\u5727\u7e2e\u6cd5\u3067\u3042\u308bPCA\u3067\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u307e\u3059\uff0e\n\u5909\u6570\u9593\u306e\u76f8\u95a2\u6210\u5206\u3092\u62bd\u51fa\u3057\u307e\u3059\uff0e\n\u4f7f\u7528\u3057\u3066\u3044\u308b\u95a2\u6570\u306fsklearn\u306eTruncatedSVD\u3067\uff0cPCA\u3068\u306e\u9055\u3044\u306f\u30a4\u30f3\u30d7\u30c3\u30c8\u30c7\u30fc\u30bf\u3092\u6b63\u898f\u5316\u3059\u308b\u304b\u3069\u3046\u304b\u306e\u3088\u3046\u3067\u3059\uff0e\nprint(\"Computing PCA projection\")\nt0 = time()\nX_pca = decomposition.TruncatedSVD(n_components=2).fit_transform(X)\nplot_embedding(X_pca,\n               \"Principal Components projection of the digits (time %.2fs)\" %\n               (time() - t0))\n\n\n\n2.3. Linear Discriminant Analysis\n\u7dda\u5f62\u5224\u5225\u5206\u985e\u3067\u6b21\u5143\u524a\u6e1b\u3092\u884c\u3044\u307e\u3059\uff0e\u5404\u5909\u6570\u304c\u591a\u5909\u91cf\u6b63\u898f\u5206\u5e03\u30fb\u540c\u30b0\u30eb\u30fc\u30d7\u304c\u540c\u3058\u5171\u5206\u6563\u884c\u5217\u3092\u3082\u3064\uff0c\u3068\u3044\u3046\u524d\u63d0\u306e\u3082\u3068\u30de\u30cf\u30e9\u30ce\u30d3\u30b9\u8ddd\u96e2\u3092\u7528\u3044\u307e\u3059\uff0e\nPCA\u3068\u4f3c\u3066\u3044\u307e\u3059\u304c\uff0c\u3053\u3061\u3089\u306f\u6559\u5e2b\u3042\u308a\u5b66\u7fd2\u3067\u3059\uff0e\nprint(\"Computing Linear Discriminant Analysis projection\")\nX2 = X.copy()\nX2.flat[::X.shape[1] + 1] += 0.01  # Make X invertible\nt0 = time()\nX_lda = discriminant_analysis.LinearDiscriminantAnalysis(n_components=2).fit_transform(X2, y)\nplot_embedding(X_lda,\n               \"Linear Discriminant projection of the digits (time %.2fs)\" %\n               (time() - t0))\n\n\n\n3. \u975e\u7dda\u5f62\u6210\u5206\u3092\u8003\u616e\u3057\u305f\u6b21\u5143\u524a\u6e1b\n\u5148\u307b\u3069\u7d39\u4ecb\u3057\u305f3\u3064\u306e\u624b\u6cd5\u306f\uff0c\u968e\u5c64\u69cb\u9020\u3092\u6301\u3064\u30c7\u30fc\u30bf\u3084\u975e\u7dda\u5f62\u6210\u5206\u3092\u542b\u3093\u3060\u30c7\u30fc\u30bf\u306e\u6b21\u5143\u524a\u6e1b\u3068\u3044\u3046\u70b9\u3067\u9069\u3057\u3066\u3044\u307e\u305b\u3093\uff0e\n\u3053\u3053\u3067\u306fswiss roll\u306e\u3088\u3046\u306a\uff0c\u7dda\u5f62\u76f8\u95a2\u3067\u306f\u306a\u3044\u30c7\u30fc\u30bf\u306e\uff12\u6b21\u5143\u30d7\u30ed\u30c3\u30c8\u3092\u7d39\u4ecb\u3057\u307e\u3059\uff0e\n\n\n3.1. Isomap\nIsomap\u306f\u975e\u7dda\u5f62\u6027\u3092\u8003\u616e\u3057\u305f\u6b21\u5143\u524a\u6e1b\u30fb\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u624b\u6cd5\u306e\u4e00\u3064\u3067\u3059\uff0e\n\u591a\u69d8\u4f53\u306e\u5f62\u306b\u6cbf\u3063\u305f\u6e2c\u5730\u8ddd\u96e2\u3068\u3044\u3046\u8ddd\u96e2\u3092\u8a08\u7b97\u3057\uff0c\u305d\u308c\u3092\u5143\u306bMulti-Dimensional Scaling\u3092\u884c\u3044\u307e\u3059\uff0e\nSklearn\u306eIsomap\u95a2\u6570\u3067\u5b9f\u884c\u53ef\u80fd\u3067\u3059\uff0e\u8a08\u6e2c\u8ddd\u96e2\u3092\u8a08\u7b97\u3059\u308b\u6bb5\u968e\u3067\uff0cBallTree\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\uff0e\nprint(\"Computing Isomap embedding\")\nt0 = time()\nX_iso = manifold.Isomap(n_neighbors, n_components=2).fit_transform(X)\nprint(\"Done.\")\nplot_embedding(X_iso,\n               \"Isomap projection of the digits (time %.2fs)\" %\n               (time() - t0))\n\n\n\n3.2. Locally Linear Embedding (LLE)\n\u5168\u4f53\u3067\u898b\u308c\u3070\u975e\u7dda\u5f62\u6027\u3092\u542b\u3093\u3060\u591a\u69d8\u4f53\u3067\u3082\uff0e\u5c40\u6240\u7684\u306b\u898b\u308c\u3070\u7dda\u5f62\u6027\u3068\u3044\u3046\u76f4\u611f\u306b\u57fa\u3065\u3044\u305f\u6b21\u5143\u524a\u6e1b\u624b\u6cd5\uff0e\n0\u30e9\u30d9\u30eb\u304c\u5f37\u8abf\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u304c\uff0c\u4ed6\u306e\u30e9\u30d9\u30eb\u306f\u3054\u3061\u3083\u3054\u3061\u3083\u3057\u3066\u3044\u307e\u3059\uff0e\nprint(\"Computing LLE embedding\")\nclf = manifold.LocallyLinearEmbedding(n_neighbors, n_components=2,\n                                      method='standard')\nt0 = time()\nX_lle = clf.fit_transform(X)\nprint(\"Done. Reconstruction error: %g\" % clf.reconstruction_error_)\nplot_embedding(X_lle,\n               \"Locally Linear Embedding of the digits (time %.2fs)\" %\n               (time() - t0))\n\n\n\n3.3. Modified Locally Linear Embedding\nLLE\u306e\u554f\u984c\u70b9\u3042\u308b\uff0c\u6b63\u5247\u5316\u554f\u984c\u3092\u6539\u826f\u3057\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\uff0e\n0\u30e9\u30d9\u30eb\u304c\u306f\u3063\u304d\u308a\u3068\u5206\u985e\u3055\u308c\u307e\u3057\u305f\uff0e4, 1, 5\u30e9\u30d9\u30eb\u3082\u7dba\u9e97\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\uff0e\nprint(\"Computing modified LLE embedding\")\nclf = manifold.LocallyLinearEmbedding(n_neighbors, n_components=2,\n                                      method='modified')\nt0 = time()\nX_mlle = clf.fit_transform(X)\nprint(\"Done. Reconstruction error: %g\" % clf.reconstruction_error_)\nplot_embedding(X_mlle,\n               \"Modified Locally Linear Embedding of the digits (time %.2fs)\" %\n               (time() - t0))\n\n\n\n3.4. Hessian LLE Embedding\nLLE\u306e\u554f\u984c\u70b9\u3042\u308b\uff0c\u6b63\u5247\u5316\u554f\u984c\u3092\u6539\u826f\u3057\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\uff0e\n\u305d\u306e\uff12\nprint(\"Computing Hessian LLE embedding\")\nclf = manifold.LocallyLinearEmbedding(n_neighbors, n_components=2,\n                                      method='hessian')\nt0 = time()\nX_hlle = clf.fit_transform(X)\nprint(\"Done. Reconstruction error: %g\" % clf.reconstruction_error_)\nplot_embedding(X_hlle,\n               \"Hessian Locally Linear Embedding of the digits (time %.2fs)\" %\n               (time() - t0))\n\n\n\n3.5. Spectral Embedding\nLaplacian Eigenmaps\u3068\u3082\u8a00\u308f\u308c\u308b\u5727\u7e2e\u624b\u6cd5\u3067\u3059\uff0e\n\u5c02\u9580\u7684\u306a\u5185\u5bb9\u306f\u8abf\u3079\u3066\u3044\u307e\u305b\u3093\u304c\uff0c\u30b9\u30da\u30af\u30c8\u30e9\u30eb\u30b0\u30e9\u30d5\u7406\u8ad6\u3068\u3044\u3046\u306e\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\uff0e\n\u30de\u30c3\u30d4\u30f3\u30b0\u306e\u5f62\u306fLLE, MLLE, HLLE\u3068\u7570\u306a\u308a\u307e\u3059\u304c\uff0c\u30e9\u30d9\u30eb\u30b0\u30eb\u30fc\u30d7\u9593\u306e\u8ddd\u96e2\u3084\u5bc6\u96c6\u5177\u5408\u306f\u4f3c\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\uff0e\nprint(\"Computing Spectral embedding\")\nembedder = manifold.SpectralEmbedding(n_components=2, random_state=0,\n                                      eigen_solver=\"arpack\")\nt0 = time()\nX_se = embedder.fit_transform(X)\n\nplot_embedding(X_se,\n               \"Spectral embedding of the digits (time %.2fs)\" %\n               (time() - t0))\n\n\n\n3.6. Local Tangent Space Alignment\nMLLE\uff0cHLLE\u3092\u9006\u8ee2\u3057\u305f\u3088\u3046\u306a\u7d50\u679c\u3068\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\u5206\u985e\u7d50\u679c\u306f\u4f3c\u305f\u611f\u3058\u3067\u3059\uff0e\nprint(\"Computing LTSA embedding\")\nclf = manifold.LocallyLinearEmbedding(n_neighbors, n_components=2,\n                                      method='ltsa')\nt0 = time()\nX_ltsa = clf.fit_transform(X)\nprint(\"Done. Reconstruction error: %g\" % clf.reconstruction_error_)\nplot_embedding(X_ltsa,\n               \"Local Tangent Space Alignment of the digits (time %.2fs)\" %\n               (time() - t0))\n\n\n\n3.7. Multi-dimensional Scaling (MDS)\n\u591a\u6b21\u5143\u5c3a\u5ea6\u69cb\u6210\u6cd5\u3068\u8a00\u308f\u308c\u308b\u5727\u7e2e\u6cd5\u3067\u3059\uff0e\nMDS\u81ea\u4f53\u306f\u3044\u304f\u3064\u304b\u306e\u624b\u6cd5\u3092\u307e\u3068\u3081\u305f\u7dcf\u79f0\u306e\u3088\u3046\u3067\u3059\u304c\uff0c\u8a73\u7d30\u306f\u7279\u306b\u307e\u3068\u3081\u3066\u3044\u307e\u305b\u3093\uff0e\nprint(\"Computing MDS embedding\")\nclf = manifold.MDS(n_components=2, n_init=1, max_iter=100)\nt0 = time()\nX_mds = clf.fit_transform(X)\nprint(\"Done. Stress: %f\" % clf.stress_)\nplot_embedding(X_mds,\n               \"MDS embedding of the digits (time %.2fs)\" %\n               (time() - t0))\n\n\n\n3.8. t-distributed Stochastic Neighbor Embedding (t-SNE)\n\u5404\u70b9\u306e\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u8ddd\u96e2\u3092\u3001\u985e\u4f3c\u5ea6\u306e\u4ee3\u308f\u308a\u306b\u6761\u4ef6\u4ed8\u304d\u78ba\u7387\u306b\u5909\u63db\u3057\u3066\u4f4e\u6b21\u5143\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u624b\u6cd5\u3067\u3059\uff0e\n\u7cbe\u5ea6\u3092\u72a0\u7272\u306b\u3057\u3066\u8a08\u7b97\u30b3\u30b9\u30c8\u3092\u5411\u4e0a\u3055\u305b\u305fBarnes-Hut t-SNE\u3068\u3044\u3046\u65b9\u6cd5\u3082\u3042\u308a\u307e\u3059\uff0eSklearn\u3067\u306f\uff0cmethod\u3092exact(\u7cbe\u5ea6\u91cd\u8996)\u3068Barnes-Hut\u306e2\u3064\u3092\u9078\u629e\u53ef\u80fd\u3067\u3059\uff0e\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306fBarnes-Hut\u304c\u9078\u629e\u3055\u308c\u3066\u304a\u308a\uff0c\u540c\u3058\u304f\u30aa\u30d7\u30b7\u30e7\u30f3\u306eangle\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u304c\u53ef\u80fd\u3067\u3059\uff0e\nKaggle\u3067\u3082\u983b\u7e41\u306b\u53d6\u308a\u4e0a\u3052\u3089\u308c\u3066\u3044\u307e\u3059\uff0e\nprint(\"Computing t-SNE embedding\")\ntsne = manifold.TSNE(n_components=2, init='pca', random_state=0)\nt0 = time()\nX_tsne = tsne.fit_transform(X)\n\nplot_embedding(X_tsne,\n               \"t-SNE embedding of the digits (time %.2fs)\" %\n               (time() - t0))\n\n\n\n3.9. Random Forest Embedding\nprint(\"Computing Totally Random Trees embedding\")\nhasher = ensemble.RandomTreesEmbedding(n_estimators=200, random_state=0,\n                                       max_depth=5)\nt0 = time()\nX_transformed = hasher.fit_transform(X)\npca = decomposition.TruncatedSVD(n_components=2)\nX_reduced = pca.fit_transform(X_transformed)\n\nplot_embedding(X_reduced,\n               \"Random forest embedding of the digits (time %.2fs)\" %\n               (time() - t0))\n\n\n# \u306f\u3058\u3081\u306b\n\u672c\u8a18\u4e8b\u306fPython2.7, numpy 1.11, scipy 0.17, scikit-learn 0.18, matplotlib 1.5, seaborn 0.7, pandas 0.17\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\uff0e\njupyter notebook\u4e0a\u3067\u52d5\u4f5c\u78ba\u8a8d\u6e08\u307f\u3067\u3059\uff0e(%matplotlib inline\u306f\u9069\u5f53\u306b\u4fee\u6b63\u3057\u3066\u304f\u3060\u3055\u3044)\nSklearn\u306e[Manifold learning](http://scikit-learn.org/stable/modules/manifold.html#manifold)\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059\uff0e\n\n\u591a\u69d8\u4f53\u5b66\u7fd2\u3068\u8a00\u308f\u308c\u308b\u624b\u6cd5\u306b\u3064\u3044\u3066\uff0c[sklearn\u306edigits](http://qiita.com/TomHortons/items/683e6fc7e57f76472d68)\u30b5\u30f3\u30d7\u30eb\u3092\u7528\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e\n\u7279\u306bt-SNE\u306fKaggle\u306a\u3069\u3067\u3082\u305f\u307e\u306b\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\uff0c\u591a\u6b21\u5143\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u306b\u9069\u3057\u305f\u624b\u6cd5\u3067\u3059\uff0e\n\u307e\u305f\u53ef\u8996\u5316\u3060\u3051\u3067\u306a\u304f\uff0c\u5143\u306e\u30c7\u30fc\u30bf\u3068\u5727\u7e2e\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u7d50\u5408\u3059\u308b\u3053\u3068\u3067\uff0c\u5358\u7d14\u306a\u5206\u985e\u554f\u984c\u306e\u7cbe\u5ea6\u3092\u5411\u4e0a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\n# \u76ee\u6b21\n1. \u30c7\u30fc\u30bf\u306e\u751f\u6210\n2. \u7dda\u5f62\u8981\u7d20\u306b\u6ce8\u76ee\u3057\u305f\u6b21\u5143\u524a\u6e1b\n    1. Random Projection\n    2. PCA\n    3. Linear Discriminant Analysis \n3. \u975e\u7dda\u5f62\u6210\u5206\u3092\u8003\u616e\u3057\u305f\u6b21\u5143\u524a\u6e1b\n    1. Isomap\n    2. Locally Linear Embedding\n    3. Modified Locally Linear Embedding\n    4. Hessian Eigenmapping\n    5. Spectral Embedding\n    6. Local Tangent Space Alignment\n    7. Multi-dimensional Scaling\n    8. t-SNE\n    9. Random Forest Embedding\n\n# 1. \u30c7\u30fc\u30bf\u306e\u751f\u6210\nsklearn\u306e\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3092\u7528\u3044\u307e\u3059\uff0e\n\u4eca\u56de\u306fdigits dataset\u3092\u7528\u3044\u3066\uff0c\u6570\u5b57\u306e\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3092\u884c\u3044\u307e\u3059\uff0e\n\u307e\u305a\u306f\u30c7\u30fc\u30bf\u306e\u30ed\u30fc\u30c9\u3068\u30c1\u30a7\u30c3\u30af\u3067\u3059\uff0e\n\n```load_digit.py\nfrom time import time\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import offsetbox\nfrom sklearn import (manifold, datasets, decomposition, ensemble,\n                     discriminant_analysis, random_projection)\n\ndigits = datasets.load_digits(n_class=6)\nX = digits.data\ny = digits.target\nn_samples, n_features = X.shape\nn_neighbors = 30\n\nn_img_per_row = 20\nimg = np.zeros((10 * n_img_per_row, 10 * n_img_per_row))\nfor i in range(n_img_per_row):\n    ix = 10 * i + 1\n    for j in range(n_img_per_row):\n        iy = 10 * j + 1\n        img[ix:ix + 8, iy:iy + 8] = X[i * n_img_per_row + j].reshape((8, 8))\n\nplt.imshow(img, cmap=plt.cm.binary)\nplt.xticks([])\nplt.yticks([])\nplt.title('A selection from the 64-dimensional digits dataset')\n\n```\n\n![a](http://scikit-learn.org/stable/_images/sphx_glr_plot_lle_digits_001.png)\n\n\ndigit\u30c7\u30fc\u30bf\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u7528\u95a2\u6570\u3092\u6e96\u5099\u3057\u307e\u3059\uff0e\n\u3053\u3061\u3089\u306f\u672c\u8a18\u4e8b\u306e\u4e3b\u984c\u3068\u305a\u308c\u308b\u306e\u3067\uff0c\u3088\u304f\u308f\u304b\u3089\u306a\u3051\u308c\u3070\u98db\u3070\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n\n```\ndef plot_embedding(X, title=None):\n    x_min, x_max = np.min(X, 0), np.max(X, 0)\n    X = (X - x_min) / (x_max - x_min)\n\n    plt.figure()\n    ax = plt.subplot(111)\n    for i in range(X.shape[0]):\n        plt.text(X[i, 0], X[i, 1], str(digits.target[i]),\n                 color=plt.cm.Set1(y[i] / 10.),\n                 fontdict={'weight': 'bold', 'size': 9})\n\n    if hasattr(offsetbox, 'AnnotationBbox'):\n        # only print thumbnails with matplotlib > 1.0\n        shown_images = np.array([[1., 1.]])  # just something big\n        for i in range(digits.data.shape[0]):\n            dist = np.sum((X[i] - shown_images) ** 2, 1)\n            if np.min(dist) < 4e-3:\n                # don't show points that are too close\n                continue\n            shown_images = np.r_[shown_images, [X[i]]]\n            imagebox = offsetbox.AnnotationBbox(\n                offsetbox.OffsetImage(digits.images[i], cmap=plt.cm.gray_r),\n                X[i])\n            ax.add_artist(imagebox)\n    plt.xticks([]), plt.yticks([])\n    if title is not None:\n        plt.title(title)\n```\n\n# 2. \u7dda\u5f62\u6210\u5206\u306b\u7740\u76ee\u3057\u305f\u6b21\u5143\u524a\u6e1b\n\u3053\u3053\u3067\u7d39\u4ecb\u3059\u308b\u624b\u6cd5\u306f\uff0c\u4f4e\u8a08\u7b97\u30b3\u30b9\u30c8\u304b\u3064\u6c4e\u7528\u6027\u3082\u9ad8\u304f\uff0c\u983b\u7e41\u306b\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\n\u4f8b\u3048\u3070\uff0cPCA\u306f\u30c7\u30fc\u30bf\u306e\u76f8\u95a2\u6027\u3092\u62bd\u51fa\u3067\u304d\u308b\u975e\u5e38\u306b\u4fbf\u5229\u306a\u624b\u6cd5\u3067\u3059\uff0e\n\u3053\u308c\u3089\u306e\u624b\u6cd5\u306f\u591a\u304f\u306e\u30b5\u30a4\u30c8\u3067\u8a73\u3057\u304f\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u305f\u3081\uff0c\u8efd\u304f\u6d41\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\n## 2.1. Random Projection\n1\u306b\u3066\uff16\uff14\u6b21\u5143\u306e\u6570\u5024\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u307e\u3057\u305f\uff0e\n\u3053\u306e\u3088\u3046\u306a\u9ad8\u6b21\u5143\u30c7\u30fc\u30bf\u3092\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u6700\u3082\u57fa\u672c\u7684\u306a\u624b\u6cd5\u306f\uff0cRandom Projection\u3067\u3059\uff0e\n\u975e\u5e38\u306b\u5358\u7d14\u306a\u624b\u6cd5\u3067\uff0cM\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u3092\uff0c\u30de\u30c3\u30d4\u30f3\u30b0\u53ef\u80fd\u306aN\u6b21\u5143\u3078\u3068\u5199\u50cf\u3059\u308b\u884c\u5217R\u306e\u8981\u7d20\u3092\u4e71\u6570\u3067\u8a2d\u5b9a\u3057\u307e\u3059\uff0e\n\u30e1\u30ea\u30c3\u30c8\u3068\u3057\u3066\u306f\u8a08\u7b97\u30b3\u30b9\u30c8\u306e\u5c0f\u3055\u3055\u304c\u6319\u3052\u3089\u308c\u307e\u3059\uff0e\n\n```\nprint(\"Computing random projection\")\nrp = random_projection.SparseRandomProjection(n_components=2, random_state=42)\nX_projected = rp.fit_transform(X)\nplot_embedding(X_projected, \"Random Projection of the digits\")\n#plt.scatter(X_projected[:, 0], X_projected[:, 1])\n```\n\n![b](http://scikit-learn.org/stable/_images/sphx_glr_plot_lle_digits_002.png)\n\n# 2.2. PCA\n\u4e00\u822c\u7684\u306a\u6b21\u5143\u5727\u7e2e\u6cd5\u3067\u3042\u308bPCA\u3067\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u307e\u3059\uff0e\n\u5909\u6570\u9593\u306e\u76f8\u95a2\u6210\u5206\u3092\u62bd\u51fa\u3057\u307e\u3059\uff0e\n\u4f7f\u7528\u3057\u3066\u3044\u308b\u95a2\u6570\u306fsklearn\u306eTruncatedSVD\u3067\uff0cPCA\u3068\u306e\u9055\u3044\u306f\u30a4\u30f3\u30d7\u30c3\u30c8\u30c7\u30fc\u30bf\u3092\u6b63\u898f\u5316\u3059\u308b\u304b\u3069\u3046\u304b\u306e\u3088\u3046\u3067\u3059\uff0e\n\n```\nprint(\"Computing PCA projection\")\nt0 = time()\nX_pca = decomposition.TruncatedSVD(n_components=2).fit_transform(X)\nplot_embedding(X_pca,\n               \"Principal Components projection of the digits (time %.2fs)\" %\n               (time() - t0))\n```\n\n![c](http://scikit-learn.org/stable/_images/sphx_glr_plot_lle_digits_003.png)\n\n# 2.3. Linear Discriminant Analysis\n[\u7dda\u5f62\u5224\u5225\u5206\u985e](https://ja.wikipedia.org/wiki/%E5%88%A4%E5%88%A5%E5%88%86%E6%9E%90)\u3067\u6b21\u5143\u524a\u6e1b\u3092\u884c\u3044\u307e\u3059\uff0e\u5404\u5909\u6570\u304c\u591a\u5909\u91cf\u6b63\u898f\u5206\u5e03\u30fb\u540c\u30b0\u30eb\u30fc\u30d7\u304c\u540c\u3058\u5171\u5206\u6563\u884c\u5217\u3092\u3082\u3064\uff0c\u3068\u3044\u3046\u524d\u63d0\u306e\u3082\u3068\u30de\u30cf\u30e9\u30ce\u30d3\u30b9\u8ddd\u96e2\u3092\u7528\u3044\u307e\u3059\uff0e\nPCA\u3068\u4f3c\u3066\u3044\u307e\u3059\u304c\uff0c\u3053\u3061\u3089\u306f\u6559\u5e2b\u3042\u308a\u5b66\u7fd2\u3067\u3059\uff0e\n\n```\nprint(\"Computing Linear Discriminant Analysis projection\")\nX2 = X.copy()\nX2.flat[::X.shape[1] + 1] += 0.01  # Make X invertible\nt0 = time()\nX_lda = discriminant_analysis.LinearDiscriminantAnalysis(n_components=2).fit_transform(X2, y)\nplot_embedding(X_lda,\n               \"Linear Discriminant projection of the digits (time %.2fs)\" %\n               (time() - t0))\n```\n\n![d](http://scikit-learn.org/stable/_images/sphx_glr_plot_lle_digits_004.png)\n\n# 3. \u975e\u7dda\u5f62\u6210\u5206\u3092\u8003\u616e\u3057\u305f\u6b21\u5143\u524a\u6e1b\n\u5148\u307b\u3069\u7d39\u4ecb\u3057\u305f3\u3064\u306e\u624b\u6cd5\u306f\uff0c\u968e\u5c64\u69cb\u9020\u3092\u6301\u3064\u30c7\u30fc\u30bf\u3084\u975e\u7dda\u5f62\u6210\u5206\u3092\u542b\u3093\u3060\u30c7\u30fc\u30bf\u306e\u6b21\u5143\u524a\u6e1b\u3068\u3044\u3046\u70b9\u3067\u9069\u3057\u3066\u3044\u307e\u305b\u3093\uff0e\n\u3053\u3053\u3067\u306fswiss roll\u306e\u3088\u3046\u306a\uff0c\u7dda\u5f62\u76f8\u95a2\u3067\u306f\u306a\u3044\u30c7\u30fc\u30bf\u306e\uff12\u6b21\u5143\u30d7\u30ed\u30c3\u30c8\u3092\u7d39\u4ecb\u3057\u307e\u3059\uff0e\n\n![download (2).png](https://qiita-image-store.s3.amazonaws.com/0/72093/55d953f6-adc3-cacb-be12-536ab2e822dc.png)\n\n\n## 3.1. Isomap\nIsomap\u306f\u975e\u7dda\u5f62\u6027\u3092\u8003\u616e\u3057\u305f\u6b21\u5143\u524a\u6e1b\u30fb\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u624b\u6cd5\u306e\u4e00\u3064\u3067\u3059\uff0e\n\u591a\u69d8\u4f53\u306e\u5f62\u306b\u6cbf\u3063\u305f\u6e2c\u5730\u8ddd\u96e2\u3068\u3044\u3046\u8ddd\u96e2\u3092\u8a08\u7b97\u3057\uff0c\u305d\u308c\u3092\u5143\u306bMulti-Dimensional Scaling\u3092\u884c\u3044\u307e\u3059\uff0e\nSklearn\u306eIsomap\u95a2\u6570\u3067\u5b9f\u884c\u53ef\u80fd\u3067\u3059\uff0e\u8a08\u6e2c\u8ddd\u96e2\u3092\u8a08\u7b97\u3059\u308b\u6bb5\u968e\u3067\uff0c[BallTree](http://scikit-learn.org/stable/modules/generated/sklearn.neighbors.BallTree.html#sklearn.neighbors.BallTree)\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\uff0e\n\n\n```\nprint(\"Computing Isomap embedding\")\nt0 = time()\nX_iso = manifold.Isomap(n_neighbors, n_components=2).fit_transform(X)\nprint(\"Done.\")\nplot_embedding(X_iso,\n               \"Isomap projection of the digits (time %.2fs)\" %\n               (time() - t0))\n```\n\n![](http://scikit-learn.org/stable/_images/sphx_glr_plot_lle_digits_005.png)\n\n## 3.2. Locally Linear Embedding (LLE)\n\u5168\u4f53\u3067\u898b\u308c\u3070\u975e\u7dda\u5f62\u6027\u3092\u542b\u3093\u3060\u591a\u69d8\u4f53\u3067\u3082\uff0e\u5c40\u6240\u7684\u306b\u898b\u308c\u3070\u7dda\u5f62\u6027\u3068\u3044\u3046\u76f4\u611f\u306b\u57fa\u3065\u3044\u305f\u6b21\u5143\u524a\u6e1b\u624b\u6cd5\uff0e\n0\u30e9\u30d9\u30eb\u304c\u5f37\u8abf\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u304c\uff0c\u4ed6\u306e\u30e9\u30d9\u30eb\u306f\u3054\u3061\u3083\u3054\u3061\u3083\u3057\u3066\u3044\u307e\u3059\uff0e\n\n```\nprint(\"Computing LLE embedding\")\nclf = manifold.LocallyLinearEmbedding(n_neighbors, n_components=2,\n                                      method='standard')\nt0 = time()\nX_lle = clf.fit_transform(X)\nprint(\"Done. Reconstruction error: %g\" % clf.reconstruction_error_)\nplot_embedding(X_lle,\n               \"Locally Linear Embedding of the digits (time %.2fs)\" %\n               (time() - t0))\n```\n\n![](http://scikit-learn.org/stable/_images/sphx_glr_plot_lle_digits_006.png)\n\n## 3.3. Modified Locally Linear Embedding\nLLE\u306e\u554f\u984c\u70b9\u3042\u308b\uff0c\u6b63\u5247\u5316\u554f\u984c\u3092\u6539\u826f\u3057\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\uff0e\n0\u30e9\u30d9\u30eb\u304c\u306f\u3063\u304d\u308a\u3068\u5206\u985e\u3055\u308c\u307e\u3057\u305f\uff0e4, 1, 5\u30e9\u30d9\u30eb\u3082\u7dba\u9e97\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\uff0e\n\n```\nprint(\"Computing modified LLE embedding\")\nclf = manifold.LocallyLinearEmbedding(n_neighbors, n_components=2,\n                                      method='modified')\nt0 = time()\nX_mlle = clf.fit_transform(X)\nprint(\"Done. Reconstruction error: %g\" % clf.reconstruction_error_)\nplot_embedding(X_mlle,\n               \"Modified Locally Linear Embedding of the digits (time %.2fs)\" %\n               (time() - t0))\n```\n\n![](http://scikit-learn.org/stable/_images/sphx_glr_plot_lle_digits_007.png)\n\n## 3.4. Hessian LLE Embedding\nLLE\u306e\u554f\u984c\u70b9\u3042\u308b\uff0c\u6b63\u5247\u5316\u554f\u984c\u3092\u6539\u826f\u3057\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\uff0e\n\u305d\u306e\uff12\n\n```\nprint(\"Computing Hessian LLE embedding\")\nclf = manifold.LocallyLinearEmbedding(n_neighbors, n_components=2,\n                                      method='hessian')\nt0 = time()\nX_hlle = clf.fit_transform(X)\nprint(\"Done. Reconstruction error: %g\" % clf.reconstruction_error_)\nplot_embedding(X_hlle,\n               \"Hessian Locally Linear Embedding of the digits (time %.2fs)\" %\n               (time() - t0))\n```\n\n![](http://scikit-learn.org/stable/_images/sphx_glr_plot_lle_digits_008.png)\n\n## 3.5. Spectral Embedding\nLaplacian Eigenmaps\u3068\u3082\u8a00\u308f\u308c\u308b\u5727\u7e2e\u624b\u6cd5\u3067\u3059\uff0e\n\u5c02\u9580\u7684\u306a\u5185\u5bb9\u306f\u8abf\u3079\u3066\u3044\u307e\u305b\u3093\u304c\uff0c\u30b9\u30da\u30af\u30c8\u30e9\u30eb\u30b0\u30e9\u30d5\u7406\u8ad6\u3068\u3044\u3046\u306e\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\uff0e\n\u30de\u30c3\u30d4\u30f3\u30b0\u306e\u5f62\u306fLLE, MLLE, HLLE\u3068\u7570\u306a\u308a\u307e\u3059\u304c\uff0c\u30e9\u30d9\u30eb\u30b0\u30eb\u30fc\u30d7\u9593\u306e\u8ddd\u96e2\u3084\u5bc6\u96c6\u5177\u5408\u306f\u4f3c\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\uff0e\n\n```\nprint(\"Computing Spectral embedding\")\nembedder = manifold.SpectralEmbedding(n_components=2, random_state=0,\n                                      eigen_solver=\"arpack\")\nt0 = time()\nX_se = embedder.fit_transform(X)\n\nplot_embedding(X_se,\n               \"Spectral embedding of the digits (time %.2fs)\" %\n               (time() - t0))\n```\n\n![](http://scikit-learn.org/stable/_images/sphx_glr_plot_lle_digits_012.png)\n\n## 3.6. Local Tangent Space Alignment\n\nMLLE\uff0cHLLE\u3092\u9006\u8ee2\u3057\u305f\u3088\u3046\u306a\u7d50\u679c\u3068\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\u5206\u985e\u7d50\u679c\u306f\u4f3c\u305f\u611f\u3058\u3067\u3059\uff0e\n\n```\nprint(\"Computing LTSA embedding\")\nclf = manifold.LocallyLinearEmbedding(n_neighbors, n_components=2,\n                                      method='ltsa')\nt0 = time()\nX_ltsa = clf.fit_transform(X)\nprint(\"Done. Reconstruction error: %g\" % clf.reconstruction_error_)\nplot_embedding(X_ltsa,\n               \"Local Tangent Space Alignment of the digits (time %.2fs)\" %\n               (time() - t0))\n```\n\n![](http://scikit-learn.org/stable/_images/sphx_glr_plot_lle_digits_009.png)\n\n## 3.7. Multi-dimensional Scaling (MDS)\n[\u591a\u6b21\u5143\u5c3a\u5ea6\u69cb\u6210\u6cd5](https://ja.wikipedia.org/wiki/%E5%A4%9A%E6%AC%A1%E5%85%83%E5%B0%BA%E5%BA%A6%E6%A7%8B%E6%88%90%E6%B3%95)\u3068\u8a00\u308f\u308c\u308b\u5727\u7e2e\u6cd5\u3067\u3059\uff0e\nMDS\u81ea\u4f53\u306f\u3044\u304f\u3064\u304b\u306e\u624b\u6cd5\u3092\u307e\u3068\u3081\u305f\u7dcf\u79f0\u306e\u3088\u3046\u3067\u3059\u304c\uff0c\u8a73\u7d30\u306f\u7279\u306b\u307e\u3068\u3081\u3066\u3044\u307e\u305b\u3093\uff0e\n\n```\nprint(\"Computing MDS embedding\")\nclf = manifold.MDS(n_components=2, n_init=1, max_iter=100)\nt0 = time()\nX_mds = clf.fit_transform(X)\nprint(\"Done. Stress: %f\" % clf.stress_)\nplot_embedding(X_mds,\n               \"MDS embedding of the digits (time %.2fs)\" %\n               (time() - t0))\n```\n\n![](http://scikit-learn.org/stable/_images/sphx_glr_plot_lle_digits_010.png)\n\n## 3.8. t-distributed Stochastic Neighbor Embedding (t-SNE)\n\u5404\u70b9\u306e\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u8ddd\u96e2\u3092\u3001\u985e\u4f3c\u5ea6\u306e\u4ee3\u308f\u308a\u306b\u6761\u4ef6\u4ed8\u304d\u78ba\u7387\u306b\u5909\u63db\u3057\u3066\u4f4e\u6b21\u5143\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u624b\u6cd5\u3067\u3059\uff0e\n\n\u7cbe\u5ea6\u3092\u72a0\u7272\u306b\u3057\u3066\u8a08\u7b97\u30b3\u30b9\u30c8\u3092\u5411\u4e0a\u3055\u305b\u305fBarnes-Hut t-SNE\u3068\u3044\u3046\u65b9\u6cd5\u3082\u3042\u308a\u307e\u3059\uff0eSklearn\u3067\u306f\uff0cmethod\u3092exact(\u7cbe\u5ea6\u91cd\u8996)\u3068Barnes-Hut\u306e2\u3064\u3092\u9078\u629e\u53ef\u80fd\u3067\u3059\uff0e\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306fBarnes-Hut\u304c\u9078\u629e\u3055\u308c\u3066\u304a\u308a\uff0c\u540c\u3058\u304f\u30aa\u30d7\u30b7\u30e7\u30f3\u306eangle\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u304c\u53ef\u80fd\u3067\u3059\uff0e\nKaggle\u3067\u3082\u983b\u7e41\u306b\u53d6\u308a\u4e0a\u3052\u3089\u308c\u3066\u3044\u307e\u3059\uff0e\n\n```\nprint(\"Computing t-SNE embedding\")\ntsne = manifold.TSNE(n_components=2, init='pca', random_state=0)\nt0 = time()\nX_tsne = tsne.fit_transform(X)\n\nplot_embedding(X_tsne,\n               \"t-SNE embedding of the digits (time %.2fs)\" %\n               (time() - t0))\n```\n\n![](http://scikit-learn.org/stable/_images/sphx_glr_plot_lle_digits_013.png)\n\n## 3.9. Random Forest Embedding\n\n```\nprint(\"Computing Totally Random Trees embedding\")\nhasher = ensemble.RandomTreesEmbedding(n_estimators=200, random_state=0,\n                                       max_depth=5)\nt0 = time()\nX_transformed = hasher.fit_transform(X)\npca = decomposition.TruncatedSVD(n_components=2)\nX_reduced = pca.fit_transform(X_transformed)\n\nplot_embedding(X_reduced,\n               \"Random forest embedding of the digits (time %.2fs)\" %\n               (time() - t0))\n```\n\n![](http://scikit-learn.org/stable/_images/sphx_glr_plot_lle_digits_011.png)\n", "tags": ["clustering", "\u6a5f\u68b0\u5b66\u7fd2", "\u53ef\u8996\u5316", "scikit-learn", "Python"]}