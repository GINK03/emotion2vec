{"tags": ["Ruby", "Rails", "zip", "rubyzip"], "context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nruby\u3067zip\u3092\u4f7f\u304a\u3046\u3068\u3059\u308b\u3068zipruby\u3068rubyzip\u304c\u30b0\u30b0\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u30b5\u30f3\u30d7\u30eb\u3082\u305f\u304f\u3055\u3093\u51fa\u3066\u304d\u307e\u3059\u3002\n\u3057\u304b\u3057\u300c\u3084\u308a\u305f\u3044\u306e\u3053\u308c\u3058\u3083\u306a\u3044\u3093\u3060\u3088\uff01\u300d\u3068\u7686\u3055\u3093\u601d\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u304b\uff1f\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001rubyzip\u306eSource\u8aad\u307f\u3064\u3064\u75d2\u3044\u3068\u3053\u308d\u306b\u624b\u304c\u5c4a\u304f\u4e8b\u3092\u76ee\u6307\u3057\u3066\u82e6\u52b4\u3057\u305f\u90e8\u5206\u3092\u7e8f\u3081\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u76ee\u6b21\n\nrubyzip\u306e\u7406\u7531\n\u8a2d\u5b9a\n\u5727\u7e2e\n\u89e3\u51cd\n\u30d1\u30b9\u30ef\u30fc\u30c9\u4ed8\u304dZIP\u306e\u6271\u3044\uff08\u696d\u52d9\u30a2\u30d7\u30ea\u306a\u3089\u5fc5\u9808\u3060\u3088\u306d\uff01\nzip\u306b\u30d5\u30a1\u30a4\u30eb\u8ffd\u52a0\uff08\u696d\u52d9\u30a2\u30d7\u30ea\u3060\u3068\u3084\u308a\u305f\u3044\u3058\u3083\u3093\uff01\n\u6587\u5b57\u5316\u3051\u5bfe\u7b56\n\n\nzipruby\u3067\u306f\u306a\u304frubyzip\u306e\u7406\u7531\nzipruby\u306e\u66f4\u65b0\u304c\u6b62\u307e\u3063\u3066\u3044\u308b\u304b\u3089\u3002\u3002\u3002\n\n\u8a2d\u5b9a\ngem\u306brubyzip\u3092\u6307\u5b9a\ngem 'rubyzip', '1.1.7'\n\nzip\u3092require \u3059\u308b\nrequire 'zip'\n\n\n\u5727\u7e2e\n\n\u65b9\u5f0f\uff11:Zip::OutputStream\u3092\u4f7f\u3046\n\n    def compress(path, zippath)\n      # Stream\u958b\u304f\n      buffer = Zip::OutputStream.write_buffer(::StringIO.new('')) do |out|\n        out.put_next_entry(File.basename(path))\n        # \u30ef\u30f3\u30e9\u30a4\u30f3\u3067\u66f8\u3051\u305f\u3051\u3069\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u9577\u3044\uff1f\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u3067Stream\u3092\u4e00\u65e6\u5909\u6570\u306b\u53d7\u3051\u308b\u30fb\u30fb\u30fb\u8b0e\n        file_buf = File.open(path) { |e| e.read }\n        out.write file_buf\n      end\n      # Stream\u66f8\u304d\u51fa\u3059\n      File.open(zippath) { |f| f.write(buffer.string) }\n      zippath\n    end\n\n\n\u65b9\u5f0f\uff12\uff1aZip::File.open(${\u30d5\u30a1\u30a4\u30eb\u540d}, Zip::File::CREATE)\u3092\u4f7f\u3046\n\n\u3053\u3063\u3061\u306e\u307b\u3046\u304c\u5b9f\u88c5\u306f\u697d\u3060\u304c\u30d1\u30b9\u30ef\u30fc\u30c9\u3068\u304b\u306f\u4f7f\u3048\u306a\u3044\n  # Zip\u5727\u7e2e\n  def compress(path, zippath)\n    File.unlink zippath if File.file?(zippath)\n    Zip::File.open(zippath, Zip::File::CREATE) do |z_fp|\n      z_fp.add(File.basename(path), path)\n    end\n    outpath\n  end\n\n\n\u89e3\u51cd\n  # Zip\u89e3\u51cd\n  def uncompress(path, outpath)\n    entrys = []\n    Dir.mkdir(outpath) unless Dir.exist?(outpath)\n    # 2\u3064\u76ee\u306e\u5f15\u6570\u306foffset\n    Zip::InputStream.open(path, 0) do |input|\n      # get_next_entry\u3059\u308b\u3068input\u306eoffset\uff08\u30dd\u30a4\u30f3\u30bf\uff09\u304c\u52d5\u304f\n      while (entry = input.get_next_entry)\n        # \u66f8\u304d\u51fa\u3057\u5148\u3092\u4f5c\u308b\n        save_path = File.join(outpath, entry.name)\n        File.open(save_path) do |wf|\n          # get_next_entry\u3067\u30dd\u30a4\u30f3\u30bf\u304c\u52d5\u3044\u3066\u3044\u308b\u306e\u3067\u3001\u6bce\u56deinput.read\u3067OK\n          wf.puts(input.read)\n        end\n        entrys << save_path\n      end\n    end\n    # \u89e3\u51cd\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u305f\u3061\u3092\u8fd4\u5374\u3059\u308b\n    entrys\n  end\n\n\n\u30d1\u30b9\u30ef\u30fc\u30c9\u4ed8\u304dZIP\u306e\u6271\u3044\n\n\u5727\u7e2e\n    def compress(path, zippath, password )\n      # \u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u308b\n      encrypter = password.present? ? Zip::TraditionalEncrypter.new(password) : nil\n\n      # Stream\u958b\u304f\uff06\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u6e21\u3059\n      # Zip::File.open\u306fTraditionalEncrypter\u3092\u53d7\u3051\u308bIF\u304c\uff08\u591a\u5206\uff09\u306a\u3044\u306e\u3067\u3001\u4f7f\u3048\u306a\u3044\n      buffer = Zip::OutputStream.write_buffer(::StringIO.new(''), encrypter) do |out|\n        out.put_next_entry(File.basename(path))\n        # \u30ef\u30f3\u30e9\u30a4\u30f3\u3067\u66f8\u3051\u305f\u3051\u3069\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u9577\u3044\uff1f\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u3067Stream\u3092\u4e00\u65e6\u5909\u6570\u306b\u53d7\u3051\u308b\u30fb\u30fb\u30fb\u8b0e\uff06Windows\u3060\u304b\u3089\uff1f\n        file_buf = File.open(path) { |e| e.read }\n        out.write file_buf\n      end\n      # Stream\u66f8\u304d\u51fa\u3059\n      File.open(zippath) { |f| f.write(buffer.string) }\n      zippath\n    end\n\n\n\u89e3\u51cd\n  # Zip\u89e3\u51cd\n  def uncompress(path, outpath, password )\n    entrys = []\n    Dir.mkdir(outpath) unless Dir.exist?(outpath)\n    # \u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u308b\n    decrypter = password.present? ? Zip::TraditionalDecrypter.new(password) : nil\n\n    Zip::InputStream.open(path, 0, decrypter ) do |input|\n      # get_next_entry\u3059\u308b\u3068input\u306eoffset\uff08\u30dd\u30a4\u30f3\u30bf\uff09\u304c\u52d5\u304f\n      while (entry = input.get_next_entry)\n        # \u66f8\u304d\u51fa\u3057\u5148\u3092\u4f5c\u308b\n        save_path = File.join(outpath, entry.name)\n        File.open(save_path) do |wf|\n          # get_next_entry\u3067\u30dd\u30a4\u30f3\u30bf\u304c\u52d5\u3044\u3066\u3044\u308b\u306e\u3067\u3001\u6bce\u56deinput.read\u3067OK\n          wf.puts(input.read)\n        end\n        entrys << save_path\n      end\n    end\n    # \u89e3\u51cd\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u305f\u3061\u3092\u8fd4\u5374\u3059\u308b\n    entrys\n  end\n\n\nzip\u306b\u30d5\u30a1\u30a4\u30eb\u8ffd\u52a0\n    # Zip\u5727\u7e2e(\u30d5\u30a1\u30a4\u30eb\u8ffd\u52a0)\n    def modify(path, zippath, password)\n      # \u8ffd\u52a0\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u540d\u524d\n      addfile_name = File.basename(path)\n      # \u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u308b\n      decrypter = nil\n      encrypter = nil\n      if password.present?\n        decrypter = Zip::TraditionalDecrypter.new(password)\n        encrypter = Zip::TraditionalEncrypter.new(password)\n      end\n\n      entrys = []\n      # \u51fa\u529b\u3059\u308bZip\u7528\u306eStream\u3092\u958b\u304f\n      buffer = Zip::OutputStream.write_buffer(::StringIO.new(''), encrypter) do |out|\n        # \u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3057\u305f\u3044Zip\u306eStream\u3092\u958b\u304f\n        Zip::InputStream.open(zippath, 0, decrypter) do |input|\n          # input\u306e\u5185\u5bb9\u3092out\u306b\u30b3\u30d4\u30fc\n          while (entry = input.get_next_entry)\n            out.put_next_entry(entry.name)\n            file_buf = input.read\n            out.write file_buf\n            entrys << entry.name\n          end\n        end\n        # input\u306eentry\u306b\u8ffd\u52a0\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u306a\u3051\u308c\u3070\u8ffd\u52a0\n        unless entrys.include?(addfile_name)\n          out.put_next_entry(addfile_name)\n          file_buf = File.open(path, 'rb') { |e| e.read }\n          out.write file_buf\n        end\n      end\n      File.open(zippath, 'wb') { |f| f.write(buffer.string) }\n      zippath\n    end\n\n\n\u6587\u5b57\u5316\u3051\u5bfe\u7b56\n\u57fa\u672c\u7684\u306b\u30d0\u30a4\u30ca\u30ea\u30e2\u30fc\u30c9\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\nFile.open(path, 'rb'\nFile.open(zippath, 'wb')\n\n\u3053\u308c\u3067\u3082\u30c0\u30e1\u306a\u3089\u30a8\u30f3\u30b3\u30fc\u30c9\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\nFile.open(path, 'rb:utf-8'\nFile.open(zippath, 'wb:utf-8')\n\n# \u306f\u3058\u3081\u306b\n\nruby\u3067zip\u3092\u4f7f\u304a\u3046\u3068\u3059\u308b\u3068zipruby\u3068rubyzip\u304c\u30b0\u30b0\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u30b5\u30f3\u30d7\u30eb\u3082\u305f\u304f\u3055\u3093\u51fa\u3066\u304d\u307e\u3059\u3002\n\u3057\u304b\u3057\u300c\u3084\u308a\u305f\u3044\u306e\u3053\u308c\u3058\u3083\u306a\u3044\u3093\u3060\u3088\uff01\u300d\u3068\u7686\u3055\u3093\u601d\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u304b\uff1f\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001rubyzip\u306eSource\u8aad\u307f\u3064\u3064\u75d2\u3044\u3068\u3053\u308d\u306b\u624b\u304c\u5c4a\u304f\u4e8b\u3092\u76ee\u6307\u3057\u3066\u82e6\u52b4\u3057\u305f\u90e8\u5206\u3092\u7e8f\u3081\u3066\u307f\u307e\u3057\u305f\u3002\n\n## \u76ee\u6b21\n\n* rubyzip\u306e\u7406\u7531\n* \u8a2d\u5b9a\n* \u5727\u7e2e\n* \u89e3\u51cd\n* \u30d1\u30b9\u30ef\u30fc\u30c9\u4ed8\u304dZIP\u306e\u6271\u3044\uff08\u696d\u52d9\u30a2\u30d7\u30ea\u306a\u3089\u5fc5\u9808\u3060\u3088\u306d\uff01\n* zip\u306b\u30d5\u30a1\u30a4\u30eb\u8ffd\u52a0\uff08\u696d\u52d9\u30a2\u30d7\u30ea\u3060\u3068\u3084\u308a\u305f\u3044\u3058\u3083\u3093\uff01\n* \u6587\u5b57\u5316\u3051\u5bfe\u7b56\n\n## zipruby\u3067\u306f\u306a\u304frubyzip\u306e\u7406\u7531\n\nzipruby\u306e\u66f4\u65b0\u304c\u6b62\u307e\u3063\u3066\u3044\u308b\u304b\u3089\u3002\u3002\u3002\n\n\n## \u8a2d\u5b9a\n\ngem\u306brubyzip\u3092\u6307\u5b9a\n\n```rb\ngem 'rubyzip', '1.1.7'\n```\n\nzip\u3092require \u3059\u308b\n\n```rb\nrequire 'zip'\n```\n\n## \u5727\u7e2e\n\n* \u65b9\u5f0f\uff11:Zip::OutputStream\u3092\u4f7f\u3046\n\n```rb\n    def compress(path, zippath)\n      # Stream\u958b\u304f\n      buffer = Zip::OutputStream.write_buffer(::StringIO.new('')) do |out|\n        out.put_next_entry(File.basename(path))\n        # \u30ef\u30f3\u30e9\u30a4\u30f3\u3067\u66f8\u3051\u305f\u3051\u3069\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u9577\u3044\uff1f\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u3067Stream\u3092\u4e00\u65e6\u5909\u6570\u306b\u53d7\u3051\u308b\u30fb\u30fb\u30fb\u8b0e\n        file_buf = File.open(path) { |e| e.read }\n        out.write file_buf\n      end\n      # Stream\u66f8\u304d\u51fa\u3059\n      File.open(zippath) { |f| f.write(buffer.string) }\n      zippath\n    end\n```\n\n* \u65b9\u5f0f\uff12\uff1aZip::File.open(${\u30d5\u30a1\u30a4\u30eb\u540d}, Zip::File::CREATE)\u3092\u4f7f\u3046\n\n\u3053\u3063\u3061\u306e\u307b\u3046\u304c\u5b9f\u88c5\u306f\u697d\u3060\u304c\u30d1\u30b9\u30ef\u30fc\u30c9\u3068\u304b\u306f\u4f7f\u3048\u306a\u3044\n\n```rb\n  # Zip\u5727\u7e2e\n  def compress(path, zippath)\n    File.unlink zippath if File.file?(zippath)\n    Zip::File.open(zippath, Zip::File::CREATE) do |z_fp|\n      z_fp.add(File.basename(path), path)\n    end\n    outpath\n  end\n```\n\n## \u89e3\u51cd\n\n```rb\n  # Zip\u89e3\u51cd\n  def uncompress(path, outpath)\n    entrys = []\n    Dir.mkdir(outpath) unless Dir.exist?(outpath)\n    # 2\u3064\u76ee\u306e\u5f15\u6570\u306foffset\n    Zip::InputStream.open(path, 0) do |input|\n      # get_next_entry\u3059\u308b\u3068input\u306eoffset\uff08\u30dd\u30a4\u30f3\u30bf\uff09\u304c\u52d5\u304f\n      while (entry = input.get_next_entry)\n        # \u66f8\u304d\u51fa\u3057\u5148\u3092\u4f5c\u308b\n        save_path = File.join(outpath, entry.name)\n        File.open(save_path) do |wf|\n          # get_next_entry\u3067\u30dd\u30a4\u30f3\u30bf\u304c\u52d5\u3044\u3066\u3044\u308b\u306e\u3067\u3001\u6bce\u56deinput.read\u3067OK\n          wf.puts(input.read)\n        end\n        entrys << save_path\n      end\n    end\n    # \u89e3\u51cd\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u305f\u3061\u3092\u8fd4\u5374\u3059\u308b\n    entrys\n  end\n```\n\n## \u30d1\u30b9\u30ef\u30fc\u30c9\u4ed8\u304dZIP\u306e\u6271\u3044\n\n### \u5727\u7e2e\n\n```rb\n    def compress(path, zippath, password )\n      # \u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u308b\n      encrypter = password.present? ? Zip::TraditionalEncrypter.new(password) : nil\n\n      # Stream\u958b\u304f\uff06\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u6e21\u3059\n      # Zip::File.open\u306fTraditionalEncrypter\u3092\u53d7\u3051\u308bIF\u304c\uff08\u591a\u5206\uff09\u306a\u3044\u306e\u3067\u3001\u4f7f\u3048\u306a\u3044\n      buffer = Zip::OutputStream.write_buffer(::StringIO.new(''), encrypter) do |out|\n        out.put_next_entry(File.basename(path))\n        # \u30ef\u30f3\u30e9\u30a4\u30f3\u3067\u66f8\u3051\u305f\u3051\u3069\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u9577\u3044\uff1f\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u3067Stream\u3092\u4e00\u65e6\u5909\u6570\u306b\u53d7\u3051\u308b\u30fb\u30fb\u30fb\u8b0e\uff06Windows\u3060\u304b\u3089\uff1f\n        file_buf = File.open(path) { |e| e.read }\n        out.write file_buf\n      end\n      # Stream\u66f8\u304d\u51fa\u3059\n      File.open(zippath) { |f| f.write(buffer.string) }\n      zippath\n    end\n```\n\n### \u89e3\u51cd\n\n```rb\n  # Zip\u89e3\u51cd\n  def uncompress(path, outpath, password )\n    entrys = []\n    Dir.mkdir(outpath) unless Dir.exist?(outpath)\n    # \u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u308b\n    decrypter = password.present? ? Zip::TraditionalDecrypter.new(password) : nil\n\n    Zip::InputStream.open(path, 0, decrypter ) do |input|\n      # get_next_entry\u3059\u308b\u3068input\u306eoffset\uff08\u30dd\u30a4\u30f3\u30bf\uff09\u304c\u52d5\u304f\n      while (entry = input.get_next_entry)\n        # \u66f8\u304d\u51fa\u3057\u5148\u3092\u4f5c\u308b\n        save_path = File.join(outpath, entry.name)\n        File.open(save_path) do |wf|\n          # get_next_entry\u3067\u30dd\u30a4\u30f3\u30bf\u304c\u52d5\u3044\u3066\u3044\u308b\u306e\u3067\u3001\u6bce\u56deinput.read\u3067OK\n          wf.puts(input.read)\n        end\n        entrys << save_path\n      end\n    end\n    # \u89e3\u51cd\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u305f\u3061\u3092\u8fd4\u5374\u3059\u308b\n    entrys\n  end\n```\n\n## zip\u306b\u30d5\u30a1\u30a4\u30eb\u8ffd\u52a0\n\n```rb\n    # Zip\u5727\u7e2e(\u30d5\u30a1\u30a4\u30eb\u8ffd\u52a0)\n    def modify(path, zippath, password)\n      # \u8ffd\u52a0\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u540d\u524d\n      addfile_name = File.basename(path)\n      # \u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u308b\n      decrypter = nil\n      encrypter = nil\n      if password.present?\n        decrypter = Zip::TraditionalDecrypter.new(password)\n        encrypter = Zip::TraditionalEncrypter.new(password)\n      end\n\n      entrys = []\n      # \u51fa\u529b\u3059\u308bZip\u7528\u306eStream\u3092\u958b\u304f\n      buffer = Zip::OutputStream.write_buffer(::StringIO.new(''), encrypter) do |out|\n        # \u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3057\u305f\u3044Zip\u306eStream\u3092\u958b\u304f\n        Zip::InputStream.open(zippath, 0, decrypter) do |input|\n          # input\u306e\u5185\u5bb9\u3092out\u306b\u30b3\u30d4\u30fc\n          while (entry = input.get_next_entry)\n            out.put_next_entry(entry.name)\n            file_buf = input.read\n            out.write file_buf\n            entrys << entry.name\n          end\n        end\n        # input\u306eentry\u306b\u8ffd\u52a0\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u306a\u3051\u308c\u3070\u8ffd\u52a0\n        unless entrys.include?(addfile_name)\n          out.put_next_entry(addfile_name)\n          file_buf = File.open(path, 'rb') { |e| e.read }\n          out.write file_buf\n        end\n      end\n      File.open(zippath, 'wb') { |f| f.write(buffer.string) }\n      zippath\n    end\n```\n\n## \u6587\u5b57\u5316\u3051\u5bfe\u7b56\n\n\u57fa\u672c\u7684\u306b\u30d0\u30a4\u30ca\u30ea\u30e2\u30fc\u30c9\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\n\n```rb\nFile.open(path, 'rb'\nFile.open(zippath, 'wb')\n```\n\n\u3053\u308c\u3067\u3082\u30c0\u30e1\u306a\u3089\u30a8\u30f3\u30b3\u30fc\u30c9\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\n\n```rb\nFile.open(path, 'rb:utf-8'\nFile.open(zippath, 'wb:utf-8')\n```\n\n"}