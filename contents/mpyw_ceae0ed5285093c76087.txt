{"context": " More than 1 year has passed since last update.\u51fa\u6765\u308b\u3060\u3051\u3082\u3068\u306e\u95a2\u6570\u306e\u6319\u52d5\u306b\u8fd1\u3065\u3051\u3066\u3044\u307e\u3059\u3002\n\nbasename() \u306b\u3064\u3044\u3066\nPHP4.4.9\u307e\u3067\u306fNULL\u30d0\u30a4\u30c8\u3092\u6b63\u3057\u304f\u51e6\u7406\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001\nPHP5.0.0\u4ee5\u964d\u306f\u30d0\u30a4\u30ca\u30ea\u30bb\u30fc\u30d5\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n(\u5fb3\u4e38\u3055\u3093\u3088\u308a\u3054\u6307\u6458\u3092\u9802\u304d\u307e\u3057\u305f)\n\u4f46\u3057\u3001 setlocale() \u3067\u30ed\u30b1\u30fc\u30eb\u3092\u6b63\u3057\u304f\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u524d\u63d0\u306b\u306a\u308a\u307e\u3059\u3002\n\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u58ca\u308c\u3066\u3044\u3066\u3082\u305d\u306e\u307e\u307e\u51e6\u7406\u3057\u307e\u3059\u3002\n\n\u30de\u30eb\u30c1\u30d0\u30a4\u30c8\u5bfe\u5fdc explode()\n\n\nUTF-8\u9650\u5b9a\u7248\nexplode() \u3092\u4f7f\u3048\u3070\u554f\u984c\u306a\u3044\u3002\n\n\n\n\u5168\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u5bfe\u5fdc\u7248\nfunction mb_explode($delimiter, $string, $limit = -1, $encoding = null) {\n    $tmp = mb_regex_encoding();\n    mb_regex_encoding(func_num_args() > 3 ? $encoding : mb_internal_encoding());\n    $delimiter = mb_ereg_replace('[.\\\\\\\\+*?\\\\[^$(){}|]', '\\\\\\\\0', $delimiter);\n    $ret = mb_split($delimiter, $string, $limit);\n    mb_regex_encoding($tmp);\n    return $ret;\n}\n\n\n\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u58ca\u308c\u3066\u3044\u3066\u3082\u305d\u306e\u307e\u307e\u51e6\u7406\u3057\u307e\u3059\u3002\n\n\u30de\u30eb\u30c1\u30d0\u30a4\u30c8\u5bfe\u5fdc str_split()\n\n\nUTF-8\u9650\u5b9a\u7248\nfunction str_split_utf8($string, $split_length = 1) {\n    switch (true) {\n        case ($split_length = (int)$split_length) < 1:\n            return false;\n        case !preg_match_all(\"/.{{$split_length}}|.++|\\\\A\\\\z/us\", $string, $matches):\n            return null;\n        default:\n            return $matches[0];\n    }\n}\n\n\n\u9577\u3055\u6307\u5b9a\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u3068\u304d\u306f FALSE \u3092\u8fd4\u3057\u307e\u3059\u3002\n\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u58ca\u308c\u3066\u3044\u308b\u3068\u304d\u306f NULL \u3092\u8fd4\u3057\u307e\u3059\u3002\n\n\u5168\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u5bfe\u5fdc\u7248\nfunction mb_str_split($string, $split_length = 1, $encoding = null) {\n    if ($split_length < 1) {\n        return false;\n    }\n    if (func_num_args() < 3) {\n        $encoding = mb_internal_encoding();\n    }\n    $ret = array();\n    $len = mb_strlen($string, $encoding);\n    for ($i = 0; $i < $len; $i += $split_length) {\n        $ret[] = mb_substr($string, $i, $split_length, $encoding);\n    }\n    if (!$ret) {\n        $ret[] = '';\n    }\n    return $ret;\n}\n\n\n\u9577\u3055\u6307\u5b9a\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u3068\u304d\u306f FALSE \u3092\u8fd4\u3057\u307e\u3059\u3002\n\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u58ca\u308c\u3066\u3044\u3066\u3082\u305d\u306e\u307e\u307e\u51e6\u7406\u3057\u307e\u3059\u3002\n\n\u30de\u30eb\u30c1\u30d0\u30a4\u30c8\u5bfe\u5fdc trim()\n\n\nUTF-8\u9650\u5b9a\u7248\nfunction trim_utf8($str, $charlist = \" \\t\\n\\r\\0\\x0B\u3000\") {\n    $charlist = str_replace('..', '-', addcslashes($charlist, \"^-:]\\0\\\\/\"));\n    return preg_replace(\"/\\\\A[{$charlist}]++|[{$charlist}]++\\\\z/u\", '', $str);\n}\n\n\n\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u58ca\u308c\u3066\u3044\u308b\u3068\u304d\u306b\u306f NULL \u3092\u8fd4\u3057\u307e\u3059\u3002\n\n\u5168\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u5bfe\u5fdc\u7248\nfunction mb_trim($str, $charlist = \" \\t\\n\\r\\0\\x0B\u3000\", $encoding = null) {\n    $tmp = mb_regex_encoding();\n    mb_regex_encoding(func_num_args() > 2 ? $encoding : mb_internal_encoding());\n    $charlist = mb_ereg_replace('[\\\\[\\\\]^-]', '\\\\\\\\0', $charlist);\n    $charlist = mb_ereg_replace('\\\\.{2}', '-', $charlist);\n    $ret = mb_ereg_replace(\"\\\\A[{$charlist}]++|[{$charlist}]++\\\\z\", '', $str);\n    mb_regex_encoding($tmp);\n    return $ret;\n}\n\n\n\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u58ca\u308c\u3066\u3044\u3066\u3082\u305d\u306e\u307e\u307e\u51e6\u7406\u3057\u307e\u3059\u3002\nltrim(), rtrim() \u3082\u3053\u3093\u306a\u611f\u3058\u3067\u3069\u3046\u305e\u3002\n\n\u30de\u30eb\u30c1\u30d0\u30a4\u30c8\u5bfe\u5fdc wordwrap()\n\n\u60f3\u50cf\u4ee5\u4e0a\u306b\u51e6\u7406\u304c\u5927\u5909\u3060\u3063\u305f\u306e\u3067\u4eca\u56de\u306f\u30ae\u30d6\u30a2\u30c3\u30d7\uff08\u6c57\uff09\n\u30de\u30cb\u30e5\u30a2\u30eb\u306e\u30b3\u30e1\u30f3\u30c8\u6b04\u306b\u6295\u7a3f\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3082\u3069\u308c\u3082\u518d\u73fe\u6027\u304c\u5fae\u5999\u306a\u3082\u306e\u3070\u304b\u308a\u3067\u3001\u307f\u306a\u3055\u3093\u82e6\u6226\u3055\u308c\u3066\u3044\u308b\u69d8\u5b50\u3002\n\u3044\u308d\u3044\u308d\u8a66\u3057\u3066\u307f\u305f\u7d50\u679c\u3001 Smarty \u306e mb_wordwrap() \u304c\u4e00\u756a\u826f\u3055\u3052\u3060\u3063\u305f\u306e\u3067\u7d39\u4ecb\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nhttps://github.com/Jamesking56/Smarty-PHP/blob/master/plugins/shared.mb_wordwrap.php\n\u3082\u3063\u3068\u7c21\u5358\u306b\u66f8\u3051\u305f\u3089\u3044\u3044\u306e\u306b\u306a\u3041\u30fb\u30fb\u30fb\n\n\u30de\u30eb\u30c1\u30d0\u30a4\u30c8\u5bfe\u5fdc str_replace()\n\n\nUTF-8\u9650\u5b9a\u7248\nstr_replace() \u3092\u4f7f\u3048\u3070\u554f\u984c\u306a\u3044\u3002\n\n\n\n\u5168\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u5bfe\u5fdc\u7248\nfunction mb_str_replace($search, $replace, $subject, $encoding = null) {\n    $tmp = mb_regex_encoding();\n    mb_regex_encoding(func_num_args() > 3 ? $encoding : mb_internal_encoding());\n    foreach ((array)$search as $i => $s) {\n        if (!is_array($replace)) {\n            $r = $replace;\n        } elseif (isset($replace[$i])) {\n            $r = $replace[$i];\n        } else {\n            $r = '';\n        }\n        $s = mb_ereg_replace('[.\\\\\\\\+*?\\\\[^$(){}|]', '\\\\\\\\0', $s);\n        $subject = mb_ereg_replace($s, $r, $subject);\n    }\n    mb_regex_encoding($tmp);\n    return $subject;\n}\n\n\n\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u58ca\u308c\u3066\u3044\u3066\u3082\u305d\u306e\u307e\u307e\u51e6\u7406\u3057\u307e\u3059\u3002\n\n\u30de\u30eb\u30c1\u30d0\u30a4\u30c8\u5bfe\u5fdc strtr()\n\n\nUTF-8\u9650\u5b9a\u7248\u30b7\u30b0\u30cd\u30c1\u30e3\nstring strtr_utf8 ( string $str , string $from , string $to )\nstring strtr_utf8 ( string $str , array $replace_pairs )\n\n\n\nUTF-8\u9650\u5b9a\u7248\u30b3\u30fc\u30c9\nfunction strtr_utf8() {\n    if (func_num_args() < 3) {\n        list($str, $replace_pairs) = func_get_args();\n    } else {\n        list($str, $from, $to) = func_get_args();\n        $from = preg_split('//u', $from, -1, PREG_SPLIT_NO_EMPTY);\n        $to = preg_split('//u', $to, -1, PREG_SPLIT_NO_EMPTY);\n        $replace_pairs = array();\n        foreach ($from as $i => $f) {\n            if (!isset($to[$i])) {\n                break;\n            }\n            $replace_pairs[$f] = $to[$i];\n        }\n    }\n    return strtr($str, $replace_pairs);\n}\n\n\n\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u58ca\u308c\u3066\u3044\u3066\u3082\u305d\u306e\u307e\u307e\u51e6\u7406\u3057\u307e\u3059\u3002\n\n\u5168\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u5bfe\u5fdc\u7248\u30b7\u30b0\u30cd\u30c1\u30e3\nstring mb_strtr ( string $str , string $from , string $to [, string $encoding] )\nstring mb_strtr ( string $str , array $replace_pairs [, string $encoding] )\n\n\n\n\u5168\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u5bfe\u5fdc\u7248\u30b3\u30fc\u30c9\n<?php\nfunction mb_strtr() {\n    $args = func_get_args();\n    if (!is_array($args[1])) {\n        list($str, $from, $to) = $args;\n        $encoding = isset($args[3]) ? $args[3] : mb_internal_encoding(); \n        $replace_pairs = array();\n        $len = mb_strlen($from, $encoding);\n        for ($i =0; $i < $len; $i++) {\n            $k = mb_substr($from, $i, 1, $encoding);\n            $v = mb_substr($to, $i, 1, $encoding);\n            $replace_pairs[$k] = $v;\n        }\n        return $replace_pairs ? mb_strtr($str, $replace_pairs, $encoding) : $str;\n    }\n    list($str, $replace_pairs) = $args;\n    $tmp = mb_regex_encoding();\n    mb_regex_encoding(isset($args[2]) ? $args[2] : mb_internal_encoding());\n    uksort($replace_pairs, function ($a, $b) {\n        return strlen($b) - strlen($a);\n    });\n    $from = $to = array();\n    foreach ($replace_pairs as $f => $t) {\n        if ($f !== '') {\n            $from[] = '(' . mb_ereg_replace('[.\\\\\\\\+*?\\\\[^$(){}|]', '\\\\\\\\0', $f) . ')';\n            $to[] = $t;\n        }\n    }\n    $pattern = implode('|', $from);\n    $ret = mb_ereg_replace_callback($pattern, function ($from) use ($to) {\n        foreach ($to as $i => $t) {\n            if ($from[$i + 1] !== '') {\n                return $t;\n            }\n        }\n    }, $str);\n    mb_regex_encoding($tmp);\n    return $ret;\n}\n\n\n\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u58ca\u308c\u3066\u3044\u3066\u3082\u305d\u306e\u307e\u307e\u51e6\u7406\u3057\u307e\u3059\u3002\nPHP5.4.1 \u4ee5\u964d\u306e\u307f\u5bfe\u5fdc\u3002\n\n\u5099\u8003\n\u306a\u304a\u6587\u5b57\u5217\u7f6e\u63db\u95a2\u6570\u306b\u95a2\u3057\u3066\u3001\u52d5\u4f5c\u306e\u8efd\u3044\u9806\u306b\n\n\nstrtr() (\u5f15\u65703\u3064)\n\nstr_replace() (\u914d\u5217\u3092\u542b\u307e\u306a\u3044)\n\nstr_replace() (\u914d\u5217\u3092\u542b\u3080)\n\nstrtr() (\u5f15\u65702\u3064)\n\n\u2015\u2015\u8d85\u3048\u3089\u308c\u306a\u3044\u58c1\u2015\u2015\n\n\nstrtr_utf8() (\u5f15\u65702\u3064)\n\nstrtr_utf8() (\u5f15\u65703\u3064)\n\n\u2015\u2015\u8d85\u3048\u3089\u308c\u306a\u3044\u58c1\u2015\u2015\n\n\nmb_str_replace() (\u914d\u5217\u3092\u542b\u307e\u306a\u3044)\n\nmb_strtr() (\u5f15\u65702\u3064)\n\nmb_str_replace() (\u914d\u5217\u3092\u542b\u3080)\n\nmb_strtr() (\u5f15\u65703\u3064)\n\n\u3060\u3044\u305f\u3044\u3053\u3093\u306a\u611f\u3058\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u9806\u4f4d\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u6b63\u78ba\u306a\u3053\u3068\u306f\u691c\u8a3c\u3057\u3066\u306a\u3044\u306e\u3067\u5206\u304b\u308a\u307e\u305b\u3093\u304c\u3002\n\u51fa\u6765\u308b\u3060\u3051\u3082\u3068\u306e\u95a2\u6570\u306e\u6319\u52d5\u306b\u8fd1\u3065\u3051\u3066\u3044\u307e\u3059\u3002\n\n`basename()` \u306b\u3064\u3044\u3066\n---------------------------\n\nPHP4.4.9\u307e\u3067\u306fNULL\u30d0\u30a4\u30c8\u3092\u6b63\u3057\u304f\u51e6\u7406\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001\n<ins>PHP5.0.0\u4ee5\u964d\u306f\u30d0\u30a4\u30ca\u30ea\u30bb\u30fc\u30d5</ins>\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n(\u5fb3\u4e38\u3055\u3093\u3088\u308a\u3054\u6307\u6458\u3092\u9802\u304d\u307e\u3057\u305f)\n\n\u4f46\u3057\u3001 `setlocale() ` \u3067<ins>\u30ed\u30b1\u30fc\u30eb\u3092\u6b63\u3057\u304f\u8a2d\u5b9a</ins>\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u524d\u63d0\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u58ca\u308c\u3066\u3044\u3066\u3082\u305d\u306e\u307e\u307e\u51e6\u7406\u3057\u307e\u3059\u3002\n\n\u30de\u30eb\u30c1\u30d0\u30a4\u30c8\u5bfe\u5fdc `explode()`\n----------------------------------\n\n```text:UTF-8\u9650\u5b9a\u7248\nexplode() \u3092\u4f7f\u3048\u3070\u554f\u984c\u306a\u3044\u3002\n```\n\n```php:\u5168\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u5bfe\u5fdc\u7248\nfunction mb_explode($delimiter, $string, $limit = -1, $encoding = null) {\n    $tmp = mb_regex_encoding();\n    mb_regex_encoding(func_num_args() > 3 ? $encoding : mb_internal_encoding());\n    $delimiter = mb_ereg_replace('[.\\\\\\\\+*?\\\\[^$(){}|]', '\\\\\\\\0', $delimiter);\n    $ret = mb_split($delimiter, $string, $limit);\n    mb_regex_encoding($tmp);\n    return $ret;\n}\n```\n\n\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u58ca\u308c\u3066\u3044\u3066\u3082\u305d\u306e\u307e\u307e\u51e6\u7406\u3057\u307e\u3059\u3002\n\n\u30de\u30eb\u30c1\u30d0\u30a4\u30c8\u5bfe\u5fdc `str_split()`\n----------------------------------\n\n```php:UTF-8\u9650\u5b9a\u7248\nfunction str_split_utf8($string, $split_length = 1) {\n    switch (true) {\n        case ($split_length = (int)$split_length) < 1:\n            return false;\n        case !preg_match_all(\"/.{{$split_length}}|.++|\\\\A\\\\z/us\", $string, $matches):\n            return null;\n        default:\n            return $matches[0];\n    }\n}\n```\n\n\u9577\u3055\u6307\u5b9a\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u3068\u304d\u306f **FALSE** \u3092\u8fd4\u3057\u307e\u3059\u3002\n\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u58ca\u308c\u3066\u3044\u308b\u3068\u304d\u306f **NULL** \u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```php:\u5168\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u5bfe\u5fdc\u7248\nfunction mb_str_split($string, $split_length = 1, $encoding = null) {\n    if ($split_length < 1) {\n        return false;\n    }\n    if (func_num_args() < 3) {\n        $encoding = mb_internal_encoding();\n    }\n    $ret = array();\n    $len = mb_strlen($string, $encoding);\n    for ($i = 0; $i < $len; $i += $split_length) {\n        $ret[] = mb_substr($string, $i, $split_length, $encoding);\n    }\n    if (!$ret) {\n        $ret[] = '';\n    }\n    return $ret;\n}\n```\n\n\u9577\u3055\u6307\u5b9a\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u3068\u304d\u306f **FALSE** \u3092\u8fd4\u3057\u307e\u3059\u3002\n\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u58ca\u308c\u3066\u3044\u3066\u3082\u305d\u306e\u307e\u307e\u51e6\u7406\u3057\u307e\u3059\u3002\n\n\n\u30de\u30eb\u30c1\u30d0\u30a4\u30c8\u5bfe\u5fdc `trim()`\n-----------------------------\n\n```php:UTF-8\u9650\u5b9a\u7248\nfunction trim_utf8($str, $charlist = \" \\t\\n\\r\\0\\x0B\u3000\") {\n    $charlist = str_replace('..', '-', addcslashes($charlist, \"^-:]\\0\\\\/\"));\n    return preg_replace(\"/\\\\A[{$charlist}]++|[{$charlist}]++\\\\z/u\", '', $str);\n}\n```\n\n\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u58ca\u308c\u3066\u3044\u308b\u3068\u304d\u306b\u306f **NULL** \u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```php:\u5168\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u5bfe\u5fdc\u7248\nfunction mb_trim($str, $charlist = \" \\t\\n\\r\\0\\x0B\u3000\", $encoding = null) {\n    $tmp = mb_regex_encoding();\n    mb_regex_encoding(func_num_args() > 2 ? $encoding : mb_internal_encoding());\n    $charlist = mb_ereg_replace('[\\\\[\\\\]^-]', '\\\\\\\\0', $charlist);\n    $charlist = mb_ereg_replace('\\\\.{2}', '-', $charlist);\n    $ret = mb_ereg_replace(\"\\\\A[{$charlist}]++|[{$charlist}]++\\\\z\", '', $str);\n    mb_regex_encoding($tmp);\n    return $ret;\n}\n```\n\n\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u58ca\u308c\u3066\u3044\u3066\u3082\u305d\u306e\u307e\u307e\u51e6\u7406\u3057\u307e\u3059\u3002\n\n`ltrim()`, `rtrim()` \u3082\u3053\u3093\u306a\u611f\u3058\u3067\u3069\u3046\u305e\u3002\n\n\n\u30de\u30eb\u30c1\u30d0\u30a4\u30c8\u5bfe\u5fdc `wordwrap()`\n------------------------------------\n\n\u60f3\u50cf\u4ee5\u4e0a\u306b\u51e6\u7406\u304c\u5927\u5909\u3060\u3063\u305f\u306e\u3067\u4eca\u56de\u306f\u30ae\u30d6\u30a2\u30c3\u30d7\uff08\u6c57\uff09\n\u30de\u30cb\u30e5\u30a2\u30eb\u306e\u30b3\u30e1\u30f3\u30c8\u6b04\u306b\u6295\u7a3f\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3082\u3069\u308c\u3082\u518d\u73fe\u6027\u304c\u5fae\u5999\u306a\u3082\u306e\u3070\u304b\u308a\u3067\u3001\u307f\u306a\u3055\u3093\u82e6\u6226\u3055\u308c\u3066\u3044\u308b\u69d8\u5b50\u3002\n\u3044\u308d\u3044\u308d\u8a66\u3057\u3066\u307f\u305f\u7d50\u679c\u3001 **Smarty** \u306e `mb_wordwrap()` \u304c\u4e00\u756a\u826f\u3055\u3052\u3060\u3063\u305f\u306e\u3067\u7d39\u4ecb\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nhttps://github.com/Jamesking56/Smarty-PHP/blob/master/plugins/shared.mb_wordwrap.php\n\n\u3082\u3063\u3068\u7c21\u5358\u306b\u66f8\u3051\u305f\u3089\u3044\u3044\u306e\u306b\u306a\u3041\u30fb\u30fb\u30fb\n\n\u30de\u30eb\u30c1\u30d0\u30a4\u30c8\u5bfe\u5fdc `str_replace()`\n-------------------------------------\n\n```text:UTF-8\u9650\u5b9a\u7248\nstr_replace() \u3092\u4f7f\u3048\u3070\u554f\u984c\u306a\u3044\u3002\n```\n\n```php:\u5168\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u5bfe\u5fdc\u7248\nfunction mb_str_replace($search, $replace, $subject, $encoding = null) {\n    $tmp = mb_regex_encoding();\n    mb_regex_encoding(func_num_args() > 3 ? $encoding : mb_internal_encoding());\n    foreach ((array)$search as $i => $s) {\n        if (!is_array($replace)) {\n            $r = $replace;\n        } elseif (isset($replace[$i])) {\n            $r = $replace[$i];\n        } else {\n            $r = '';\n        }\n        $s = mb_ereg_replace('[.\\\\\\\\+*?\\\\[^$(){}|]', '\\\\\\\\0', $s);\n        $subject = mb_ereg_replace($s, $r, $subject);\n    }\n    mb_regex_encoding($tmp);\n    return $subject;\n}\n```\n\n\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u58ca\u308c\u3066\u3044\u3066\u3082\u305d\u306e\u307e\u307e\u51e6\u7406\u3057\u307e\u3059\u3002\n\n\u30de\u30eb\u30c1\u30d0\u30a4\u30c8\u5bfe\u5fdc `strtr()`\n------------------------------\n\n```text:UTF-8\u9650\u5b9a\u7248\u30b7\u30b0\u30cd\u30c1\u30e3\nstring strtr_utf8 ( string $str , string $from , string $to )\nstring strtr_utf8 ( string $str , array $replace_pairs )\n```\n```php:UTF-8\u9650\u5b9a\u7248\u30b3\u30fc\u30c9\nfunction strtr_utf8() {\n    if (func_num_args() < 3) {\n        list($str, $replace_pairs) = func_get_args();\n    } else {\n        list($str, $from, $to) = func_get_args();\n        $from = preg_split('//u', $from, -1, PREG_SPLIT_NO_EMPTY);\n        $to = preg_split('//u', $to, -1, PREG_SPLIT_NO_EMPTY);\n        $replace_pairs = array();\n        foreach ($from as $i => $f) {\n            if (!isset($to[$i])) {\n                break;\n            }\n            $replace_pairs[$f] = $to[$i];\n        }\n    }\n    return strtr($str, $replace_pairs);\n}\n```\n\n\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u58ca\u308c\u3066\u3044\u3066\u3082\u305d\u306e\u307e\u307e\u51e6\u7406\u3057\u307e\u3059\u3002\n\n```text:\u5168\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u5bfe\u5fdc\u7248\u30b7\u30b0\u30cd\u30c1\u30e3\nstring mb_strtr ( string $str , string $from , string $to [, string $encoding] )\nstring mb_strtr ( string $str , array $replace_pairs [, string $encoding] )\n```\n```php:\u5168\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u5bfe\u5fdc\u7248\u30b3\u30fc\u30c9\n<?php\nfunction mb_strtr() {\n    $args = func_get_args();\n    if (!is_array($args[1])) {\n        list($str, $from, $to) = $args;\n        $encoding = isset($args[3]) ? $args[3] : mb_internal_encoding(); \n        $replace_pairs = array();\n        $len = mb_strlen($from, $encoding);\n        for ($i =0; $i < $len; $i++) {\n            $k = mb_substr($from, $i, 1, $encoding);\n            $v = mb_substr($to, $i, 1, $encoding);\n            $replace_pairs[$k] = $v;\n        }\n        return $replace_pairs ? mb_strtr($str, $replace_pairs, $encoding) : $str;\n    }\n    list($str, $replace_pairs) = $args;\n    $tmp = mb_regex_encoding();\n    mb_regex_encoding(isset($args[2]) ? $args[2] : mb_internal_encoding());\n    uksort($replace_pairs, function ($a, $b) {\n        return strlen($b) - strlen($a);\n    });\n    $from = $to = array();\n    foreach ($replace_pairs as $f => $t) {\n        if ($f !== '') {\n            $from[] = '(' . mb_ereg_replace('[.\\\\\\\\+*?\\\\[^$(){}|]', '\\\\\\\\0', $f) . ')';\n            $to[] = $t;\n        }\n    }\n    $pattern = implode('|', $from);\n    $ret = mb_ereg_replace_callback($pattern, function ($from) use ($to) {\n        foreach ($to as $i => $t) {\n            if ($from[$i + 1] !== '') {\n                return $t;\n            }\n        }\n    }, $str);\n    mb_regex_encoding($tmp);\n    return $ret;\n}\n```\n\n\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u58ca\u308c\u3066\u3044\u3066\u3082\u305d\u306e\u307e\u307e\u51e6\u7406\u3057\u307e\u3059\u3002\n**PHP5.4.1** \u4ee5\u964d\u306e\u307f\u5bfe\u5fdc\u3002\n\n\n\u5099\u8003\n-----\n\n\u306a\u304a\u6587\u5b57\u5217\u7f6e\u63db\u95a2\u6570\u306b\u95a2\u3057\u3066\u3001\u52d5\u4f5c\u306e\u8efd\u3044\u9806\u306b\n\n- `strtr()` (\u5f15\u65703\u3064)\n- `str_replace()` (\u914d\u5217\u3092\u542b\u307e\u306a\u3044)\n- `str_replace()` (\u914d\u5217\u3092\u542b\u3080)\n- `strtr()` (\u5f15\u65702\u3064)\n\n\u2015\u2015\u8d85\u3048\u3089\u308c\u306a\u3044\u58c1\u2015\u2015\n\n- `strtr_utf8()` (\u5f15\u65702\u3064)\n- `strtr_utf8()` (\u5f15\u65703\u3064)\n\n\u2015\u2015\u8d85\u3048\u3089\u308c\u306a\u3044\u58c1\u2015\u2015\n\n- `mb_str_replace()` (\u914d\u5217\u3092\u542b\u307e\u306a\u3044)\n- `mb_strtr()` (\u5f15\u65702\u3064)\n- `mb_str_replace()` (\u914d\u5217\u3092\u542b\u3080)\n- `mb_strtr()` (\u5f15\u65703\u3064)\n\n\u3060\u3044\u305f\u3044\u3053\u3093\u306a\u611f\u3058\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u9806\u4f4d\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u6b63\u78ba\u306a\u3053\u3068\u306f\u691c\u8a3c\u3057\u3066\u306a\u3044\u306e\u3067\u5206\u304b\u308a\u307e\u305b\u3093\u304c\u3002", "tags": ["PHP", "\u6b63\u898f\u8868\u73fe"]}