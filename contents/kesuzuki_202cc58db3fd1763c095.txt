{"tags": ["Go", "golang", "CSV"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002\n\nGo\u8a00\u8a9e\u3067CSV\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u66f8\u304d\n\n\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u8a70\u307e\u3063\u3066\u3044\u308b\u8981\u7d20\n\nCSV\u30d5\u30a1\u30a4\u30eb\u5165\u51fa\u529b(CRLF\u3001\u30c7\u30ea\u30df\u30bf\u6307\u5b9a)\n\u6587\u5b57\u30b3\u30fc\u30c9\u5909\u63db\n\u5f15\u6570\n\u30ed\u30b0\u51fa\u529b\n\u30b9\u30e9\u30a4\u30b9\u51e6\u7406\n\u6570\u5024\u2192\u6587\u5b57\u5217\u5909\u63db\n\n\u30ab\u30e9\u30e0\u304c2\u3064\u4ee5\u4e0a\u3042\u308bsjis\u306acsv\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\ncsv.go\n/*\nGOROOT\u3001GOPATH\u306e\u8a2d\u5b9a\u3092\u5fd8\u308c\u305a\u306b\n\u4f8b) GOROOT=c:\\tools\\go\n    GOPATH=c:\\tools\\go\n    PATH=c:\\tools\\go\\bin\n\n\u6700\u521d\u306b\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3068\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nc:\\>go version\ngo version go1.4.2 windows/amd64\n\ngo get golang.org/x/text/encoding/japanese\ngo get golang.org/x/text/transform\n\ngo run csv.go \"\u5165\u529b\u30d5\u30a1\u30a4\u30eb.csv\" \"\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u540d.csv\"\ngo build csv.go \n*/\npackage main\n\nimport (\n    \"golang.org/x/text/encoding/japanese\"\n    \"golang.org/x/text/transform\"\n    \"encoding/csv\"\n    \"io\"\n    \"flag\"\n    \"log\"\n    \"os\"\n    \"fmt\"\n)\n\nfunc failOnError(err error) {\n    if err != nil {\n        log.Fatal(\"Error:\", err)\n    }\n}\n\nfunc main() {\n    flag.Parse()\n\n    //\u8aad\u307f\u8fbc\u307f\u30d5\u30a1\u30a4\u30eb\u6e96\u5099\n    file1, err := os.Open(flag.Arg(0))\n    failOnError(err)\n    defer file1.Close()\n\n    //\u66f8\u304d\u8fbc\u307f\u30d5\u30a1\u30a4\u30eb\u6e96\u5099\n    file2, err := os.Create(flag.Arg(1))\n    failOnError(err)\n    defer file2.Close()\n\n    reader := csv.NewReader(transform.NewReader(file1, japanese.ShiftJIS.NewDecoder()))\n//  reader := csv.NewReader(transform.NewReader(file1, japanese.EUCJP.NewDecoder()))\n//  reader := csv.NewReader(file1) //utf8\n\n    writer := csv.NewWriter(transform.NewWriter(file2, japanese.ShiftJIS.NewEncoder()))\n//  writer := csv.NewWriter(transform.NewWriter(file2, japanese.EUCJP.NewEncoder()))\n//  writer := csv.NewWriter(file2) //utf8\n    writer.UseCRLF = true //\u30c7\u30d5\u30a9\u30eb\u30c8\u306fLF\u306e\u307f\n//  writer.Comma = '\\t'\n\n    log.Printf(\"Start\")\n    for {\n        record, err := reader.Read() // 1\u884c\u8aad\u307f\u51fa\u3059\n        if err == io.EOF {\n            break\n        } else {\n            failOnError(err)\n        }\n        var new_record []string\n        for i, v := range record {\n            if i > 0 {\n                new_record = append(new_record, fmt.Sprint(i) + \":\" + v)\n            }\n        }\n        writer.Write(new_record) // 1\u884c\u66f8\u304d\u51fa\u3059\n//      log.Printf(\"%#v\", record[0] + \",\" + record[1])\n    }\n    writer.Flush()\n    log.Printf(\"Finish !\")\n}\n\n\n#Go\u8a00\u8a9e\u3067CSV\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u66f8\u304d\n\n## \u3053\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u8a70\u307e\u3063\u3066\u3044\u308b\u8981\u7d20\n* CSV\u30d5\u30a1\u30a4\u30eb\u5165\u51fa\u529b(CRLF\u3001\u30c7\u30ea\u30df\u30bf\u6307\u5b9a)\n* \u6587\u5b57\u30b3\u30fc\u30c9\u5909\u63db\n* \u5f15\u6570\n* \u30ed\u30b0\u51fa\u529b\n* \u30b9\u30e9\u30a4\u30b9\u51e6\u7406\n* \u6570\u5024\u2192\u6587\u5b57\u5217\u5909\u63db\n\n\u30ab\u30e9\u30e0\u304c2\u3064\u4ee5\u4e0a\u3042\u308bsjis\u306acsv\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```go:csv.go\n/*\nGOROOT\u3001GOPATH\u306e\u8a2d\u5b9a\u3092\u5fd8\u308c\u305a\u306b\n\u4f8b) GOROOT=c:\\tools\\go\n    GOPATH=c:\\tools\\go\n    PATH=c:\\tools\\go\\bin\n\n\u6700\u521d\u306b\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3068\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nc:\\>go version\ngo version go1.4.2 windows/amd64\n\ngo get golang.org/x/text/encoding/japanese\ngo get golang.org/x/text/transform\n\ngo run csv.go \"\u5165\u529b\u30d5\u30a1\u30a4\u30eb.csv\" \"\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u540d.csv\"\ngo build csv.go \n*/\npackage main\n\nimport (\n\t\"golang.org/x/text/encoding/japanese\"\n\t\"golang.org/x/text/transform\"\n\t\"encoding/csv\"\n\t\"io\"\n\t\"flag\"\n\t\"log\"\n\t\"os\"\n\t\"fmt\"\n)\n\nfunc failOnError(err error) {\n\tif err != nil {\n\t\tlog.Fatal(\"Error:\", err)\n\t}\n}\n\nfunc main() {\n\tflag.Parse()\n\n\t//\u8aad\u307f\u8fbc\u307f\u30d5\u30a1\u30a4\u30eb\u6e96\u5099\n\tfile1, err := os.Open(flag.Arg(0))\n\tfailOnError(err)\n\tdefer file1.Close()\n\n\t//\u66f8\u304d\u8fbc\u307f\u30d5\u30a1\u30a4\u30eb\u6e96\u5099\n\tfile2, err := os.Create(flag.Arg(1))\n\tfailOnError(err)\n\tdefer file2.Close()\n\n\treader := csv.NewReader(transform.NewReader(file1, japanese.ShiftJIS.NewDecoder()))\n//\treader := csv.NewReader(transform.NewReader(file1, japanese.EUCJP.NewDecoder()))\n//\treader := csv.NewReader(file1) //utf8\n\n\twriter := csv.NewWriter(transform.NewWriter(file2, japanese.ShiftJIS.NewEncoder()))\n//\twriter := csv.NewWriter(transform.NewWriter(file2, japanese.EUCJP.NewEncoder()))\n//\twriter := csv.NewWriter(file2) //utf8\n\twriter.UseCRLF = true //\u30c7\u30d5\u30a9\u30eb\u30c8\u306fLF\u306e\u307f\n//\twriter.Comma = '\\t'\n\n\tlog.Printf(\"Start\")\n\tfor {\n\t\trecord, err := reader.Read() // 1\u884c\u8aad\u307f\u51fa\u3059\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t} else {\n\t\t\tfailOnError(err)\n\t\t}\n\t\tvar new_record []string\n\t\tfor i, v := range record {\n\t\t\tif i > 0 {\n\t\t\t\tnew_record = append(new_record, fmt.Sprint(i) + \":\" + v)\n\t\t\t}\n\t\t}\n\t\twriter.Write(new_record) // 1\u884c\u66f8\u304d\u51fa\u3059\n//\t\tlog.Printf(\"%#v\", record[0] + \",\" + record[1])\n\t}\n\twriter.Flush()\n\tlog.Printf(\"Finish !\")\n}\n```\n"}