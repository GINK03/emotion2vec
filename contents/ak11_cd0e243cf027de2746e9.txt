{"context": "\u30de\u30cb\u30e5\u30a2\u30eb\u304b\u3089\u898b\u3064\u3051\u306b\u304f\u3044\u3082\u306e\u3084\u3001\u81ea\u5206\u3067\u30b3\u30d4\u30da\u3057\u3066\u4f7f\u3046\u7528\u30b3\u30fc\u30c9\u306a\u3069\u3092\u9069\u5f53\u306b\u3002\n\n\u3068\u308a\u3042\u3048\u305a\u30de\u30cb\u30e5\u30a2\u30eb\nhttps://keras.io/ja/\n\u898b\u843d\u3068\u3057\u304c\u3061\u3067\u3059\u304c\u3001\u30e1\u30cb\u30e5\u30fc\u306e\u4e0b\u306e\u65b9\u306b\u3082\u7d50\u69cb\u8272\u3005\u91cd\u8981(?)\u306a\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\n\n\nEarlyStopping\u3001\u5404\u30a8\u30dd\u30c3\u30af\u3067\u306e\u30e2\u30c7\u30eb\u4fdd\u5b58\u3001\u5b66\u7fd2\u7387\u306e\u8abf\u6574\u3001\u3001etc\n\n\nApplications\n\n\n\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u306e\u30e2\u30c7\u30eb\n\n\n\u53ef\u8996\u5316\n\n\n\u30e2\u30c7\u30eb\u3092\u753b\u50cf\u5316\u3057\u3066\u304f\u308c\u308b\u3084\u3064\n\n\n\n\u306a\u3069\u306a\u3069\u3002\n\n\u8aad\u3080\u3068\u697d\u3057\u3044\u30bd\u30fc\u30b9\n\nExamples\nhttps://github.com/fchollet/keras/tree/master/examples\n\u3060\u3044\u3076\u8272\u3005\u5165\u3063\u3066\u307e\u3059\u3002VAE\u3068\u304bHRNN\u3068\u304bBidirectional LSTM\u3068\u304b\u3002\n\n\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u306e\u30e2\u30c7\u30eb(\u306e\u5b9f\u88c5)\nhttps://github.com/fchollet/keras/tree/master/keras/applications\n\u6614\u306fExamples\u306b\u5165\u3063\u3066\u3044\u305f\u6c17\u304c\u3059\u308bVGG\u3068\u304bResNet\u3068\u304b\u3002\n\n\u7d30\u304b\u3044\u30ce\u30a6\u30cf\u30a6(?)\u3084\u30b3\u30d4\u30da\u7528\u30b3\u30fc\u30c9\u7247\u306a\u3069\n\n\u30e2\u30c7\u30eb\u306esave/load\n\u30e2\u30c7\u30eb\u306esave/load\u306f\u3001\u30b0\u30b0\u308b\u3068\u91cd\u307f\u3068\u30e2\u30c7\u30eb(json or yaml)\u3092\u5225\u3005\u306b\u4fdd\u5b58\u3057\u305f\u308a\u3057\u3066\u3044\u308b\u4f8b\u304c\u3088\u304f\u51fa\u3066\u304d\u307e\u3059\u304c(\u8981\u51fa\u5178)\u3001\u65b0\u3057\u3081\u306e\u30d0\u30fc\u30b8\u30e7\u30f3(?)\u3067\u306fmodel.save()\u3068load_model()\u3067\u3044\u3051\u307e\u3059\u3002\nhttps://keras.io/ja/getting-started/faq/#keras-model\nmodel.save(\"model.h5\")\n\nfrom keras.models import load_model\nmodel = load_model(\"model.h5\")\n\n\n\u30ec\u30a4\u30e4\u30fc\u306e\u81ea\u4f5c\n\u81ea\u5206\u3067\u30ec\u30a4\u30e4\u30fc\u3092\u4f5c\u308b\u306e\u3082\u7d50\u69cb\u7c21\u5358\u3067\u3059\u3002\nhttps://keras.io/ja/layers/writing-your-own-keras-layers/\nclass Scaling(Layer):\n    \"\"\"\u56de\u5e30\u3067\u51fa\u529b\u3092\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\u3059\u308b\u305f\u3081\u306b\u4f5c\u3063\u305f\u9069\u5f53\u30ec\u30a4\u30e4\u30fc\"\"\"\n\n    def __init__(self, mean, std, **kwargs):\n        self.mean = float(mean)\n        self.std = float(std)\n        assert 0 < self.std\n        super().__init__(**kwargs)\n\n    def build(self, input_shape):\n        self.W = K.variable(self.std * 3)  # \u9069\u5f53\u306b3\u500d\n        self.trainable_weights = [self.W]\n        super().build(input_shape)\n\n    def call(self, x, mask=None):\n        return x * self.W + self.mean\n\n    def get_config(self):\n        config = {\"mean\": float(self.mean), \"std\": float(self.std)}\n        base_config = super().get_config()\n        return dict(list(base_config.items()) + list(config.items()))\n\n\u81ea\u4f5c\u3057\u305f\u30ec\u30a4\u30e4\u30fc\u3092\u542b\u3080model\u3092save\u3057\u305f\u3042\u3068load\u3059\u308b\u3068\u300c\u30ec\u30a4\u30e4\u30fc\u304c\u898b\u3064\u304b\u3089\u3093\u300d\u3068\u6012\u3089\u308c\u308b\u306e\u3067\u3001load_model\u306e\u3068\u304d\u306bdict\u3067\u6e21\u3057\u3066\u3042\u3052\u308b\u3068\u3044\u3044\u3088\u3046\u3067\u3059\u3002\nmodel = load_model(\"model.h5\", {\"Scaling\": Scaling})\n\n\n\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\n\u7d20\u76f4\u306b\u6bce\u56demodel.compile()\u3057\u3066\u3082\u3044\u3044\u306e\u3067\u3059\u304c\u3001(\u7279\u306bTheano\u3060\u3068)\u91cd\u3044\u306e\u3067\u3001\u5b66\u7fd2\u524d\u306e\u91cd\u307f\u3092\u3068\u3063\u3066\u304a\u3044\u3066\u30bb\u30c3\u30c8\u3057\u76f4\u3057\u3066\u4f7f\u3046\u306e\u304c\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n# \u5b66\u7fd2\u524d\u306e\u91cd\u307f\u3092\u4fdd\u5b58\ninit_weights1 = model.get_weights()\ninit_weights2 = model.optimizer.get_weights()\n\n# cross validation\nkf = sklearn.model_selection.KFold(n_fold, shuffle=True)\nfor train_indices, test_indices in kf.split(X, y):\n    # \u5b66\u7fd2\n    X_train = X[train_indices]\n    y_train = y[train_indices]\n    X_test = X[test_indices]\n    y_test = y[test_indices]\n    hist = model.fit(X_train, y_train, nb_epoch=nb_epoch, validation_data=(X_test, y_test))\n\n    # hist[\"val_acc\"][-1]\u3068\u304b\u306e\u5e73\u5747\u3092\u53d6\u3063\u305f\u308a\u306a\u3093\u3084\u304b\u3093\u3084\u3059\u308b(\u5272\u611b)\n\n    # \u5b66\u7fd2\u524d\u306e\u91cd\u307f\u306b\u623b\u3059\n    model.optimizer.set_weights(init_weights2)\n    model.set_weights(init_weights1)\n\n(\u3084\u3063\u305f\u3053\u3068\u306a\u3044\u3051\u3069Scikit-Learn API\u3092\u4f7f\u3046\u307b\u3046\u304c\u7d20\u76f4\u304b\u3082\uff1f)\n\n\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u8272\u3005\n\u3053\u308c\u3082\u666e\u901a\u306b\u30de\u30cb\u30e5\u30a2\u30eb\u304c\u8a73\u3057\u3044\u3067\u3059\u304c\u3001\u81ea\u5206\u306e\u30b3\u30d4\u30da\u7528\u306b\u3002\nhttps://keras.io/ja/callbacks/\n\n\u57fa\u672c\u306e\u30b3\u30fc\u30c9\n\u8272\u3005\u8ffd\u52a0\u524a\u9664\u3092\u3059\u308b\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5f62\u306b\u3057\u3066\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\ncallbacks = []\ncallbacks.append(\u3044\u308d\u3044\u308d)\ncallbacks.append(\u3044\u308d\u3044\u308d)\ncallbacks.append(\u3044\u308d\u3044\u308d)\nmodel.fit(\u7565, callbacks=callbacks)\n\n\nEarlyStopping\nval_loss\u304c\u4e0b\u304c\u3089\u306a\u304f\u306a\u3063\u305f\u3089\u7d42\u308f\u308a\u306b\u3059\u308b\u3084\u3064\u3002(\u3042\u307e\u308a\u4f7f\u3063\u3066\u3044\u307e\u305b\u3093\u304c\u4e00\u5fdc\u3002)\nfrom keras.callbacks import EarlyStopping\ncallbacks.append(EarlyStopping(\"val_loss\", patience=1))\n\n\n\u5404epoch\u3067\u306e\u30e2\u30c7\u30eb\u306e\u4fdd\u5b58\nfrom keras.callbacks import ModelCheckpoint\n# callbacks.append(ModelCheckpoint(filepath=\"model.best.h5\", save_best_only=True))\ncallbacks.append(ModelCheckpoint(filepath=\"model.ep{epoch:02d}.h5\"))\n\n\n\u5b66\u7fd2\u7387\u3092\u3061\u3087\u3063\u3068\u305a\u3064\u6e1b\u3089\u3059\nnadam\u306a\u3069\u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u4f7f\u3044\u307e\u3059\u3002\nfrom keras.callbacks import LearningRateScheduler\ncallbacks.append(LearningRateScheduler(lambda ep: float(1e-3 / 3 ** (ep * 4 // MAX_EPOCH))))\n\n\u6700\u521d\u306e\u9803\u306f float(1e-3 * 0.9 ** ep) \u306a\u3069\u3068\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u5404\u5b66\u7fd2\u7387\u3067\u3069\u306e\u304f\u3089\u3044\u3061\u3083\u3093\u3068\u53ce\u675f\u3057\u3066\u308b\u306e\u304b\u5206\u304b\u308a\u3084\u3059\u3044\u3088\u3046\u306b\u3001\u6bb5\u968e\u7684\u306b\u6e1b\u3089\u3059\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\nepoch 15\u300130\u300145\u3067\u5207\u308a\u66ff\u308f\u3063\u3066\u3044\u308b\u306e\u304c\u4f55\u3068\u306a\u304f\u5206\u304b\u308a\u307e\u3059\u3002\n\n\u5b66\u7fd2\u7d4c\u904e\u3092CSV\u4fdd\u5b58\nloss\u306a\u3069\u3092CSV\u306b\u4fdd\u5b58\u3057\u3066\u304f\u308c\u308b\u3082\u306e\u3067\u3059\u3002\u7d50\u679c\u3092\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u3057\u3066\u304a\u304f\u3068\u3001\u5909\u66f4\u3057\u3066\u826f\u304f\u306a\u3063\u305f\u304b\u60aa\u304f\u306a\u3063\u305f\u304b\u5206\u304b\u308a\u3084\u3059\u3044\u306e\u3067\u304a\u3059\u3059\u3081\u3002\nfrom keras.callbacks import CSVLogger\ncallbacks.append(CSVLogger(\"history.csv\"))\n\n\nTensorBoard\u7528\u306e\u30ed\u30b0\u51fa\u529b\n\uff11\u56de\u3084\u3063\u305f\u3089\u98fd\u304d\u307e\u3057\u305f\u304c\u4e00\u5fdc\u3002\nfrom keras.callbacks import TensorBoard\ncallbacks.append(TensorBoard())\n\n\nSGD\nResNet\u754c\u9688\u3067\u306fAdam\u3068\u304b\u3088\u308aSGD+Nesterov\u304c\u4f7f\u308f\u308c\u308b\u3068\u3044\u3046\u5642\u306a\u306e\u3067\u3084\u3063\u3066\u307f\u305f\u30b3\u30fc\u30c9\u3002\nfrom keras.optimizers import SGD\noptimizer = SGD(decay=1e-6, momentum=0.9, nesterov=True)\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=optimizer, metrics=[\"accuracy\"])\n\nmomentum\u304c\u3042\u308b\u3068SGD\u306e\u5272\u306b(?)\u305d\u3053\u305d\u3053\u65e9\u304f\u9032\u307f\u307e\u3059\u3002\n(\u3057\u304b\u3057\u7d50\u5c40\u81ea\u5206\u3067\u306f\u4e3b\u306bnadam \uff0b LearningRateScheduler\u3092\u4f7f\u3063\u3066\u305f\u308a\u3002)\n\n\u53ef\u8996\u5316(\u30e2\u30c7\u30eb\u306e\u753b\u50cf\u5316)\nfrom keras.utils.visualize_util import plot\nplot(model, to_file=\"model.png\", show_shapes=True)\n\n\u3088\u304f\u3042\u308b\u3053\u3046\u3044\u3046\u3084\u3064\u3067\u3059\u3002\n\n\nimage_dim_ordering\nKeras\u3067CNN\u3092\u4f7f\u3046\u5834\u5408\u306b\u3001shape\u304c(samples, width, height, channels)\u306a\u306e\u304b\u3001(samples, channels, width, height)\u306a\u306e\u304b\u306f\u5909\u3048\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u306e\u3067\u3059\u304c\u3001\u74b0\u5883\u306b\u3088\u3063\u3066\u30c7\u30d5\u30a9\u30eb\u30c8\u304c\u7570\u306a\u308b\u30b1\u30fc\u30b9\u304c\u3042\u3063\u3066\u3001\u5272\u3068\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u4e0a\u3067\u660e\u793a\u7684\u306b\u6307\u5b9a\u3057\u3066\u3057\u307e\u3046\u306e\u304c\u624b\u3063\u53d6\u308a\u65e9\u3044\u6c17\u304c\u3057\u307e\u3059\u3002\n\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u306f\u3001~/.keras/keras.json\u306eimage_dim_ordering\u306e\u5024\u3067\u3059\u3002tf\u306a\u3089\u524d\u8005\u3001th\u306a\u3089\u5f8c\u8005\u3002\nTensorFlow\u3068Theano\u306e\u540d\u3092\u95a2\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u3068\u306f\u72ec\u7acb\u3057\u3066\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002(\u3069\u306e\u7d44\u307f\u5408\u308f\u305b\u304c\u65e9\u3044\u3068\u304b\u306f\u3088\u304f\u5206\u304b\u308a\u307e\u305b\u3093\u2026)\n\u30d7\u30ed\u30b0\u30e9\u30e0\u4e0a\u304b\u3089\u8a2d\u5b9a\u3057\u305f\u308a\u53d6\u5f97\u3057\u305f\u308a\u306f\u3001keras.backend.image_dim_ordering()\u3068\u304b\u3092\u4f7f\u3044\u307e\u3059\u3002\nhttps://keras.io/ja/backend/#image_dim_ordering\n# \u8a2d\u5b9a\nfrom keras import backend as K\nK.set_image_dim_ordering(\"tf\")\n# \u53d6\u5f97\nassert K.image_dim_ordering() == \"tf\"\n\n\nTensorFlow\u4f7f\u7528\u6642\u306b\u30e1\u30e2\u30ea\u3092\u4f7f\u3044\u5c3d\u304f\u3055\u306a\u3044\u3088\u3046\u306b\u3059\u308b\nfrom keras import backend as K\nimport tensorflow as tf\nconfig = tf.ConfigProto(allow_soft_placement=True)\nconfig.gpu_options.allow_growth = True\nsession = tf.Session(config=config)\nK.set_session(session)\n\n\n\u74b0\u5883\u69cb\u7bc9\u624b\u9806\u5099\u5fd8\u9332\nWindows\u306e\u5834\u5408\u3002\n\nAnaconda3\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nAnaconda3-4.2.0-Windows-x86_64.exe\n(\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u30fc\u306f\u300c\u7ba1\u7406\u8005\u3068\u3057\u3066\u5b9f\u884c\u300d\u3067\u3084\u3089\u306a\u3044\u3068\u4e0a\u624b\u304f\u884c\u304b\u306a\u304b\u3063\u305f\u3002\uff09\nCUDA\u3001cudnn\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\ncuda_8.0.44_win10_network.exe\ncudnn-8.0-windows10-x64-v5.1.zip\n\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3057\u305f\u308a\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u308a\n\nconda update -y conda anaconda --all\npip install graphviz pydot-ng keras tensorflow-gpu\n\n\u30de\u30cb\u30e5\u30a2\u30eb\u304b\u3089\u898b\u3064\u3051\u306b\u304f\u3044\u3082\u306e\u3084\u3001\u81ea\u5206\u3067\u30b3\u30d4\u30da\u3057\u3066\u4f7f\u3046\u7528\u30b3\u30fc\u30c9\u306a\u3069\u3092\u9069\u5f53\u306b\u3002\n\n# \u3068\u308a\u3042\u3048\u305a\u30de\u30cb\u30e5\u30a2\u30eb\n\nhttps://keras.io/ja/\n\n\u898b\u843d\u3068\u3057\u304c\u3061\u3067\u3059\u304c\u3001\u30e1\u30cb\u30e5\u30fc\u306e\u4e0b\u306e\u65b9\u306b\u3082\u7d50\u69cb\u8272\u3005\u91cd\u8981(?)\u306a\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002\n\n* \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\n  * EarlyStopping\u3001\u5404\u30a8\u30dd\u30c3\u30af\u3067\u306e\u30e2\u30c7\u30eb\u4fdd\u5b58\u3001\u5b66\u7fd2\u7387\u306e\u8abf\u6574\u3001\u3001etc\n* Applications\n  * \u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u306e\u30e2\u30c7\u30eb\n* \u53ef\u8996\u5316\n  * \u30e2\u30c7\u30eb\u3092\u753b\u50cf\u5316\u3057\u3066\u304f\u308c\u308b\u3084\u3064\n\n\u306a\u3069\u306a\u3069\u3002\n\n\n# \u8aad\u3080\u3068\u697d\u3057\u3044\u30bd\u30fc\u30b9\n\n## Examples\n\nhttps://github.com/fchollet/keras/tree/master/examples\n\n\u3060\u3044\u3076\u8272\u3005\u5165\u3063\u3066\u307e\u3059\u3002VAE\u3068\u304bHRNN\u3068\u304bBidirectional LSTM\u3068\u304b\u3002\n\n## \u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u306e\u30e2\u30c7\u30eb(\u306e\u5b9f\u88c5)\n\nhttps://github.com/fchollet/keras/tree/master/keras/applications\n\n\u6614\u306fExamples\u306b\u5165\u3063\u3066\u3044\u305f\u6c17\u304c\u3059\u308bVGG\u3068\u304bResNet\u3068\u304b\u3002\n\n# \u7d30\u304b\u3044\u30ce\u30a6\u30cf\u30a6(?)\u3084\u30b3\u30d4\u30da\u7528\u30b3\u30fc\u30c9\u7247\u306a\u3069\n\n## \u30e2\u30c7\u30eb\u306esave/load\n\n\u30e2\u30c7\u30eb\u306esave/load\u306f\u3001\u30b0\u30b0\u308b\u3068\u91cd\u307f\u3068\u30e2\u30c7\u30eb(json or yaml)\u3092\u5225\u3005\u306b\u4fdd\u5b58\u3057\u305f\u308a\u3057\u3066\u3044\u308b\u4f8b\u304c\u3088\u304f\u51fa\u3066\u304d\u307e\u3059\u304c(\u8981\u51fa\u5178)\u3001\u65b0\u3057\u3081\u306e\u30d0\u30fc\u30b8\u30e7\u30f3(?)\u3067\u306f`model.save()`\u3068`load_model()`\u3067\u3044\u3051\u307e\u3059\u3002\n\nhttps://keras.io/ja/getting-started/faq/#keras-model\n\n```py3\nmodel.save(\"model.h5\")\n```\n\n```py3\nfrom keras.models import load_model\nmodel = load_model(\"model.h5\")\n```\n\n## \u30ec\u30a4\u30e4\u30fc\u306e\u81ea\u4f5c\n\n\u81ea\u5206\u3067\u30ec\u30a4\u30e4\u30fc\u3092\u4f5c\u308b\u306e\u3082\u7d50\u69cb\u7c21\u5358\u3067\u3059\u3002\nhttps://keras.io/ja/layers/writing-your-own-keras-layers/\n\n```py3\nclass Scaling(Layer):\n    \"\"\"\u56de\u5e30\u3067\u51fa\u529b\u3092\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\u3059\u308b\u305f\u3081\u306b\u4f5c\u3063\u305f\u9069\u5f53\u30ec\u30a4\u30e4\u30fc\"\"\"\n\n    def __init__(self, mean, std, **kwargs):\n        self.mean = float(mean)\n        self.std = float(std)\n        assert 0 < self.std\n        super().__init__(**kwargs)\n\n    def build(self, input_shape):\n        self.W = K.variable(self.std * 3)  # \u9069\u5f53\u306b3\u500d\n        self.trainable_weights = [self.W]\n        super().build(input_shape)\n\n    def call(self, x, mask=None):\n        return x * self.W + self.mean\n\n    def get_config(self):\n        config = {\"mean\": float(self.mean), \"std\": float(self.std)}\n        base_config = super().get_config()\n        return dict(list(base_config.items()) + list(config.items()))\n```\n\n\u81ea\u4f5c\u3057\u305f\u30ec\u30a4\u30e4\u30fc\u3092\u542b\u3080model\u3092save\u3057\u305f\u3042\u3068load\u3059\u308b\u3068\u300c\u30ec\u30a4\u30e4\u30fc\u304c\u898b\u3064\u304b\u3089\u3093\u300d\u3068\u6012\u3089\u308c\u308b\u306e\u3067\u3001load_model\u306e\u3068\u304d\u306bdict\u3067\u6e21\u3057\u3066\u3042\u3052\u308b\u3068\u3044\u3044\u3088\u3046\u3067\u3059\u3002\n\n```py3\nmodel = load_model(\"model.h5\", {\"Scaling\": Scaling})\n```\n\n## \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\n\n\u7d20\u76f4\u306b\u6bce\u56de`model.compile()`\u3057\u3066\u3082\u3044\u3044\u306e\u3067\u3059\u304c\u3001(\u7279\u306bTheano\u3060\u3068)\u91cd\u3044\u306e\u3067\u3001\u5b66\u7fd2\u524d\u306e\u91cd\u307f\u3092\u3068\u3063\u3066\u304a\u3044\u3066\u30bb\u30c3\u30c8\u3057\u76f4\u3057\u3066\u4f7f\u3046\u306e\u304c\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n\n```py3\n# \u5b66\u7fd2\u524d\u306e\u91cd\u307f\u3092\u4fdd\u5b58\ninit_weights1 = model.get_weights()\ninit_weights2 = model.optimizer.get_weights()\n\n# cross validation\nkf = sklearn.model_selection.KFold(n_fold, shuffle=True)\nfor train_indices, test_indices in kf.split(X, y):\n    # \u5b66\u7fd2\n    X_train = X[train_indices]\n    y_train = y[train_indices]\n    X_test = X[test_indices]\n    y_test = y[test_indices]\n    hist = model.fit(X_train, y_train, nb_epoch=nb_epoch, validation_data=(X_test, y_test))\n\n    # hist[\"val_acc\"][-1]\u3068\u304b\u306e\u5e73\u5747\u3092\u53d6\u3063\u305f\u308a\u306a\u3093\u3084\u304b\u3093\u3084\u3059\u308b(\u5272\u611b)\n\n    # \u5b66\u7fd2\u524d\u306e\u91cd\u307f\u306b\u623b\u3059\n    model.optimizer.set_weights(init_weights2)\n    model.set_weights(init_weights1)\n```\n\n(\u3084\u3063\u305f\u3053\u3068\u306a\u3044\u3051\u3069Scikit-Learn API\u3092\u4f7f\u3046\u307b\u3046\u304c\u7d20\u76f4\u304b\u3082\uff1f)\n\n## \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u8272\u3005\n\n\u3053\u308c\u3082\u666e\u901a\u306b\u30de\u30cb\u30e5\u30a2\u30eb\u304c\u8a73\u3057\u3044\u3067\u3059\u304c\u3001\u81ea\u5206\u306e\u30b3\u30d4\u30da\u7528\u306b\u3002\nhttps://keras.io/ja/callbacks/\n\n### \u57fa\u672c\u306e\u30b3\u30fc\u30c9\n\n\u8272\u3005\u8ffd\u52a0\u524a\u9664\u3092\u3059\u308b\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5f62\u306b\u3057\u3066\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\n```py3\ncallbacks = []\ncallbacks.append(\u3044\u308d\u3044\u308d)\ncallbacks.append(\u3044\u308d\u3044\u308d)\ncallbacks.append(\u3044\u308d\u3044\u308d)\nmodel.fit(\u7565, callbacks=callbacks)\n```\n\n### EarlyStopping\n\nval_loss\u304c\u4e0b\u304c\u3089\u306a\u304f\u306a\u3063\u305f\u3089\u7d42\u308f\u308a\u306b\u3059\u308b\u3084\u3064\u3002(\u3042\u307e\u308a\u4f7f\u3063\u3066\u3044\u307e\u305b\u3093\u304c\u4e00\u5fdc\u3002)\n\n```py3\nfrom keras.callbacks import EarlyStopping\ncallbacks.append(EarlyStopping(\"val_loss\", patience=1))\n```\n\n### \u5404epoch\u3067\u306e\u30e2\u30c7\u30eb\u306e\u4fdd\u5b58\n\n```py3\nfrom keras.callbacks import ModelCheckpoint\n# callbacks.append(ModelCheckpoint(filepath=\"model.best.h5\", save_best_only=True))\ncallbacks.append(ModelCheckpoint(filepath=\"model.ep{epoch:02d}.h5\"))\n```\n\n### \u5b66\u7fd2\u7387\u3092\u3061\u3087\u3063\u3068\u305a\u3064\u6e1b\u3089\u3059\n\nnadam\u306a\u3069\u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u4f7f\u3044\u307e\u3059\u3002\n\n```py3\nfrom keras.callbacks import LearningRateScheduler\ncallbacks.append(LearningRateScheduler(lambda ep: float(1e-3 / 3 ** (ep * 4 // MAX_EPOCH))))\n```\n\n\u6700\u521d\u306e\u9803\u306f `float(1e-3 * 0.9 ** ep)` \u306a\u3069\u3068\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u5404\u5b66\u7fd2\u7387\u3067\u3069\u306e\u304f\u3089\u3044\u3061\u3083\u3093\u3068\u53ce\u675f\u3057\u3066\u308b\u306e\u304b\u5206\u304b\u308a\u3084\u3059\u3044\u3088\u3046\u306b\u3001\u6bb5\u968e\u7684\u306b\u6e1b\u3089\u3059\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n![history.png](https://qiita-image-store.s3.amazonaws.com/0/24930/c5c9007c-14e5-f7db-e101-05a20303c8c7.png)\n\nepoch 15\u300130\u300145\u3067\u5207\u308a\u66ff\u308f\u3063\u3066\u3044\u308b\u306e\u304c\u4f55\u3068\u306a\u304f\u5206\u304b\u308a\u307e\u3059\u3002\n\n### \u5b66\u7fd2\u7d4c\u904e\u3092CSV\u4fdd\u5b58\n\nloss\u306a\u3069\u3092CSV\u306b\u4fdd\u5b58\u3057\u3066\u304f\u308c\u308b\u3082\u306e\u3067\u3059\u3002\u7d50\u679c\u3092\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u3057\u3066\u304a\u304f\u3068\u3001\u5909\u66f4\u3057\u3066\u826f\u304f\u306a\u3063\u305f\u304b\u60aa\u304f\u306a\u3063\u305f\u304b\u5206\u304b\u308a\u3084\u3059\u3044\u306e\u3067\u304a\u3059\u3059\u3081\u3002\n\n```py3\nfrom keras.callbacks import CSVLogger\ncallbacks.append(CSVLogger(\"history.csv\"))\n```\n\n### TensorBoard\u7528\u306e\u30ed\u30b0\u51fa\u529b\n\n~~\uff11\u56de\u3084\u3063\u305f\u3089\u98fd\u304d\u307e\u3057\u305f\u304c\u4e00\u5fdc\u3002~~\n\n```py3\nfrom keras.callbacks import TensorBoard\ncallbacks.append(TensorBoard())\n```\n\n## SGD\n\nResNet\u754c\u9688\u3067\u306fAdam\u3068\u304b\u3088\u308aSGD+Nesterov\u304c\u4f7f\u308f\u308c\u308b\u3068\u3044\u3046\u5642\u306a\u306e\u3067\u3084\u3063\u3066\u307f\u305f\u30b3\u30fc\u30c9\u3002\n\n```py3\nfrom keras.optimizers import SGD\noptimizer = SGD(decay=1e-6, momentum=0.9, nesterov=True)\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=optimizer, metrics=[\"accuracy\"])\n```\n\nmomentum\u304c\u3042\u308b\u3068SGD\u306e\u5272\u306b(?)\u305d\u3053\u305d\u3053\u65e9\u304f\u9032\u307f\u307e\u3059\u3002\n\n(\u3057\u304b\u3057\u7d50\u5c40\u81ea\u5206\u3067\u306f\u4e3b\u306bnadam \uff0b LearningRateScheduler\u3092\u4f7f\u3063\u3066\u305f\u308a\u3002)\n\n## \u53ef\u8996\u5316(\u30e2\u30c7\u30eb\u306e\u753b\u50cf\u5316)\n\n```py3\nfrom keras.utils.visualize_util import plot\nplot(model, to_file=\"model.png\", show_shapes=True)\n```\n\n\u3088\u304f\u3042\u308b\u3053\u3046\u3044\u3046\u3084\u3064\u3067\u3059\u3002\n\n![model.png](https://qiita-image-store.s3.amazonaws.com/0/24930/d6c1461f-0bed-ec3a-be09-c6ec3ba0bc6a.png)\n\n## image_dim_ordering\n\nKeras\u3067CNN\u3092\u4f7f\u3046\u5834\u5408\u306b\u3001shape\u304c`(samples, width, height, channels)`\u306a\u306e\u304b\u3001`(samples, channels, width, height)`\u306a\u306e\u304b\u306f\u5909\u3048\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u306e\u3067\u3059\u304c\u3001\u74b0\u5883\u306b\u3088\u3063\u3066\u30c7\u30d5\u30a9\u30eb\u30c8\u304c\u7570\u306a\u308b\u30b1\u30fc\u30b9\u304c\u3042\u3063\u3066\u3001\u5272\u3068\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u4e0a\u3067\u660e\u793a\u7684\u306b\u6307\u5b9a\u3057\u3066\u3057\u307e\u3046\u306e\u304c\u624b\u3063\u53d6\u308a\u65e9\u3044\u6c17\u304c\u3057\u307e\u3059\u3002\n\n\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u306f\u3001`~/.keras/keras.json`\u306e`image_dim_ordering`\u306e\u5024\u3067\u3059\u3002tf\u306a\u3089\u524d\u8005\u3001th\u306a\u3089\u5f8c\u8005\u3002\n\nTensorFlow\u3068Theano\u306e\u540d\u3092\u95a2\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u3068\u306f\u72ec\u7acb\u3057\u3066\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002(\u3069\u306e\u7d44\u307f\u5408\u308f\u305b\u304c\u65e9\u3044\u3068\u304b\u306f\u3088\u304f\u5206\u304b\u308a\u307e\u305b\u3093\u2026)\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u4e0a\u304b\u3089\u8a2d\u5b9a\u3057\u305f\u308a\u53d6\u5f97\u3057\u305f\u308a\u306f\u3001`keras.backend.image_dim_ordering()`\u3068\u304b\u3092\u4f7f\u3044\u307e\u3059\u3002\nhttps://keras.io/ja/backend/#image_dim_ordering\n\n```py3\n# \u8a2d\u5b9a\nfrom keras import backend as K\nK.set_image_dim_ordering(\"tf\")\n# \u53d6\u5f97\nassert K.image_dim_ordering() == \"tf\"\n```\n\n## TensorFlow\u4f7f\u7528\u6642\u306b\u30e1\u30e2\u30ea\u3092\u4f7f\u3044\u5c3d\u304f\u3055\u306a\u3044\u3088\u3046\u306b\u3059\u308b\n\n```py3\nfrom keras import backend as K\nimport tensorflow as tf\nconfig = tf.ConfigProto(allow_soft_placement=True)\nconfig.gpu_options.allow_growth = True\nsession = tf.Session(config=config)\nK.set_session(session)\n```\n\n# \u74b0\u5883\u69cb\u7bc9\u624b\u9806\u5099\u5fd8\u9332\n\nWindows\u306e\u5834\u5408\u3002\n\n- Anaconda3\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n   Anaconda3-4.2.0-Windows-x86_64.exe\n   (\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u30fc\u306f\u300c\u7ba1\u7406\u8005\u3068\u3057\u3066\u5b9f\u884c\u300d\u3067\u3084\u3089\u306a\u3044\u3068\u4e0a\u624b\u304f\u884c\u304b\u306a\u304b\u3063\u305f\u3002\uff09\n\n- CUDA\u3001cudnn\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n   cuda_8.0.44_win10_network.exe\n   cudnn-8.0-windows10-x64-v5.1.zip\n\n- \u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3057\u305f\u308a\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u308a\n\n```\nconda update -y conda anaconda --all\npip install graphviz pydot-ng keras tensorflow-gpu\n```\n\n\n", "tags": ["DeepLearning", "Keras"]}