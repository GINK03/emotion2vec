{"context": "GW\u306b\u4e00\u4eba\u3055\u307f\u3057\u304fDocker\u3068Serf\u3068\u622f\u308c\u3066\u307f\u305f(\u0e51\u00b4\u06a1`\u0e51) \u306e\u7d9a\u304d\u3067\u3059\u3002\n\n/usr/local/src/python/handler.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom serf_master import SerfHandler, SerfHandlerProxy\nfrom jinja2 import Environment, FileSystemLoader\nimport logging\nimport sys \nimport bsddb\nimport json\nimport subprocess\nimport os\n\n\nclass AppHandler(SerfHandler):\n    def member_join(self):\n        # nginx.conf\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u53d6\u5f97\n        env = Environment(loader=FileSystemLoader('/usr/local/src/python/', encoding='utf8'))\n        tpl = env.get_template('nginx.tpl.conf')\n\n        # ip\u7ba1\u7406\u7528\u914d\u5217\n        ips = []\n        db=bsddb.hashopen('hashtest.db','c')\n\n        try:\n          dbips = json.loads(db[\"ips\"])\n          for ip in  dbips:\n              ips.append(ip)\n        except:\n          print \"no cache\"\n\n\u3000      # \u8ffd\u52a0\u3055\u308c\u305fagent\u60c5\u5831\u306f\u6a19\u6e96\u5165\u529b\u3067\u6765\u308b\u306e\u3067\uff08\u6539\u884c\u30b3\u30fc\u30c9\u533a\u5207\u308a\uff09\n        for line in iter(sys.stdin.readline, \"\"):\n            print line\n            agent = line.split(\"\\t\")\n            node = agent[0] #node\n            ip = agent[1] #node\n            role = agent[2] #node\n\u3000\u3000\u3000\u3000\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000# \u3053\u306e\u6642app role\u306b\u8ffd\u52a0\u3055\u308c\u305f\u5834\u5408\u3001\u8ffd\u52a0\n            if role == \"app\":\n                ips.append(ip)\n\n        db[\"ips\"] = json.dumps(ips)\n        db.sync()\n\n\u3000\u3000\u3000\u3000\u3000# \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304b\u3089\u66f8\u304d\u51fa\u3059\u30c7\u30fc\u30bf\u3092\u751f\u6210\n        html = tpl.render({'backends':ips})\n\n        # nginx\u306b\u8aad\u307f\u8fbc\u307e\u305b\u308bconf\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\n        f = open(\"/etc/nginx/conf.d/proxy.conf\", \"w\")\n        f.write(html)\n        f.close()\n\n        # Nginx\u3092\u518d\u8d77\u52d5\n        cmd = 'supervisorctl restart nginx'\n        ret  =  subprocess.check_output( cmd.split(\" \") )\n        print ret\n\nif __name__ == '__main__':\n    handler = SerfHandlerProxy()\n\n    # \u5b58\u5728\u3059\u308bapp\u3068default\u306e\u307f\u8a31\u53ef\u3055\u308c\u308b\uff08Role\u3054\u3068\u306e\u30cf\u30f3\u30c9\u30e9\u3092\u767b\u9332\uff09\n    handler.register('default', AppHandler())\n    handler.run()\n\n\n\u5b9f\u969b\u306b\u66f8\u3044\u305fhandler.py\n\u305d\u3057\u3066\u3001\u3053\u306e\u6642\u306enginx.tpl.conf\u306f\u3053\u3061\u3089\n\nnginx.tpl.conf\nupstream backend {\n  {% for backend in backends %}\n    server {{ backend }}:9000;\n  {% endfor %}\n}\nserver {\n    listen   80;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_pass  http://backend/cgi-bin/index.py;\n        proxy_redirect   default;\n        break;\n    }\n\n    proxy_set_header Host $host;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Host $host;\n    proxy_set_header X-Forwarded-Server $host;\n    proxy_set_header X-Real-IP $remote_addr;\n}\n\n\nhtml = tpl.render({'backends':ips}) \u3067\u3001upsteam \u306e\u7b87\u6240\u304c\u8272\u3005\u66f8\u304d\u63db\u308f\u308b\u30a4\u30e1\u30fc\u30b8\n\u3053\u308c\u3067\u3001app role\u306b\u8ffd\u52a0\u304c\u3042\u3063\u305f\u5834\u5408\u3001nginx\u306f\u304b\u3063\u3066\u306bupstream\u3092\u66f8\u304d\u63db\u3048\u3066\u518d\u8d77\u52d5\u307e\u3067\u3084\u3063\u3061\u3083\u3044\u307e\u3059\u3002\n\u5192\u982d\u3067\u5897\u6e1b\u3068\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u4f53\u529b\u306e\u95a2\u4fc2\u3067\u524a\u9664\u306f\u98db\u3070\u3057\u307e\u3057\u305f\u3002\n\n\u7d42\u308f\u308a\n\u5168\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\nhttps://github.com/shinofara/serf/tree/dbb46c60a24dede36b5546f6ff611131d9b4636a\nDocker\u3068\u304b\u3082\u5168\u90e8\u30b3\u30df\u30b3\u30df\u7248\u8aac\u660e\u306f\nhttp://shinofara.hateblo.jp/entry/2016/05/05/124019\n\u306b\u304a\u3044\u3066\u307e\u3059\u3002\n[GW\u306b\u4e00\u4eba\u3055\u307f\u3057\u304fDocker\u3068Serf\u3068\u622f\u308c\u3066\u307f\u305f(\u0e51\u00b4\u06a1`\u0e51)](http://qiita.com/shinofara/items/ebc81d40b04241d5a824) \u306e\u7d9a\u304d\u3067\u3059\u3002\n\n```/usr/local/src/python/handler.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom serf_master import SerfHandler, SerfHandlerProxy\nfrom jinja2 import Environment, FileSystemLoader\nimport logging\nimport sys \nimport bsddb\nimport json\nimport subprocess\nimport os\n\n\nclass AppHandler(SerfHandler):\n    def member_join(self):\n        # nginx.conf\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u53d6\u5f97\n        env = Environment(loader=FileSystemLoader('/usr/local/src/python/', encoding='utf8'))\n        tpl = env.get_template('nginx.tpl.conf')\n        \n        # ip\u7ba1\u7406\u7528\u914d\u5217\n        ips = []\n        db=bsddb.hashopen('hashtest.db','c')\n\n        try:\n          dbips = json.loads(db[\"ips\"])\n          for ip in  dbips:\n              ips.append(ip)\n        except:\n          print \"no cache\"\n\n\u3000      # \u8ffd\u52a0\u3055\u308c\u305fagent\u60c5\u5831\u306f\u6a19\u6e96\u5165\u529b\u3067\u6765\u308b\u306e\u3067\uff08\u6539\u884c\u30b3\u30fc\u30c9\u533a\u5207\u308a\uff09\n        for line in iter(sys.stdin.readline, \"\"):\n            print line\n            agent = line.split(\"\\t\")\n            node = agent[0] #node\n            ip = agent[1] #node\n            role = agent[2] #node\n\u3000\u3000\u3000\u3000\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000# \u3053\u306e\u6642app role\u306b\u8ffd\u52a0\u3055\u308c\u305f\u5834\u5408\u3001\u8ffd\u52a0\n            if role == \"app\":\n                ips.append(ip)\n\n        db[\"ips\"] = json.dumps(ips)\n        db.sync()\n\n\u3000\u3000\u3000\u3000\u3000# \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304b\u3089\u66f8\u304d\u51fa\u3059\u30c7\u30fc\u30bf\u3092\u751f\u6210\n        html = tpl.render({'backends':ips})\n\n        # nginx\u306b\u8aad\u307f\u8fbc\u307e\u305b\u308bconf\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\n        f = open(\"/etc/nginx/conf.d/proxy.conf\", \"w\")\n        f.write(html)\n        f.close()\n        \n        # Nginx\u3092\u518d\u8d77\u52d5\n        cmd = 'supervisorctl restart nginx'\n        ret  =  subprocess.check_output( cmd.split(\" \") )\n        print ret\n\nif __name__ == '__main__':\n    handler = SerfHandlerProxy()\n\n    # \u5b58\u5728\u3059\u308bapp\u3068default\u306e\u307f\u8a31\u53ef\u3055\u308c\u308b\uff08Role\u3054\u3068\u306e\u30cf\u30f3\u30c9\u30e9\u3092\u767b\u9332\uff09\n    handler.register('default', AppHandler())\n    handler.run()\n```\n\n\u5b9f\u969b\u306b\u66f8\u3044\u305f[handler.py](https://github.com/shinofara/serf/blob/dbb46c60a24dede36b5546f6ff611131d9b4636a/docker/nginx/python/handler.py)\n\n\u305d\u3057\u3066\u3001\u3053\u306e\u6642\u306e`nginx.tpl.conf`\u306f\u3053\u3061\u3089\n\n```nginx.tpl.conf\nupstream backend {\n  {% for backend in backends %}\n    server {{ backend }}:9000;\n  {% endfor %}\n}\nserver {\n    listen   80;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_pass  http://backend/cgi-bin/index.py;\n        proxy_redirect   default;\n        break;\n    }\n\n    proxy_set_header Host $host;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Host $host;\n    proxy_set_header X-Forwarded-Server $host;\n    proxy_set_header X-Real-IP $remote_addr;\n}\n```\n\n`html = tpl.render({'backends':ips})` \u3067\u3001`upsteam` \u306e\u7b87\u6240\u304c\u8272\u3005\u66f8\u304d\u63db\u308f\u308b\u30a4\u30e1\u30fc\u30b8\n\n\u3053\u308c\u3067\u3001app role\u306b\u8ffd\u52a0\u304c\u3042\u3063\u305f\u5834\u5408\u3001nginx\u306f\u304b\u3063\u3066\u306b`upstream`\u3092\u66f8\u304d\u63db\u3048\u3066\u518d\u8d77\u52d5\u307e\u3067\u3084\u3063\u3061\u3083\u3044\u307e\u3059\u3002\n\u5192\u982d\u3067\u5897\u6e1b\u3068\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u4f53\u529b\u306e\u95a2\u4fc2\u3067\u524a\u9664\u306f\u98db\u3070\u3057\u307e\u3057\u305f\u3002\n\n### \u7d42\u308f\u308a\n\n\u5168\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\nhttps://github.com/shinofara/serf/tree/dbb46c60a24dede36b5546f6ff611131d9b4636a\n\nDocker\u3068\u304b\u3082\u5168\u90e8\u30b3\u30df\u30b3\u30df\u7248\u8aac\u660e\u306f\nhttp://shinofara.hateblo.jp/entry/2016/05/05/124019\n\u306b\u304a\u3044\u3066\u307e\u3059\u3002\n", "tags": ["serf", "docker"]}