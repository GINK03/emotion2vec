{"context": "\n\n\u306f\u3058\u3081\u306b\nruby\u306e\u914d\u5217\u306f\u6c4e\u7528\u7684\u306a\u4f5c\u308a\u3092\u3057\u3066\u3044\u308b\u306e\u3067,\n\u3042\u3048\u3066\u305d\u308c\u3092\u5c02\u9580\u7684\u306a\u3082\u306e\u3059\u308c\u3070\u52d5\u4f5c\u304c\u65e9\u304f\u306a\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u601d\u3044\u8abf\u67fb\u3057\u305f\u6b21\u7b2c\u3067\u3059\n\n\u6bd4\u8f03\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\n\u4eca\u56de\u6bd4\u8f03\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u300cpriority queue\u300d\u3067\u3059\n\u6bd4\u8f03\u5bfe\u8c61\u306f\u4ee5\u4e0b\u306e\u3082\u306e\u3092\u4f7f\u7528\u3057\u307e\u3059\n1. \u914d\u5217\u304b\u3089\u6700\u5c0f\u5024\u3092\u63a2\u3057\u3066\u53d6\u3063\u3066\u3066\u3044\u304f\u30d7\u30ed\u30b0\u30e9\u30e0(\u3042\u307e\u308a\u3044\u3044\u65b9\u6cd5\u304c\u601d\u3044\u3064\u304d\u307e\u305b\u3093\u3067\u3057\u305f)\n2. \u914d\u5217\u3092\u4e00\u5ea6\u30bd\u30fc\u30c8\u3057\u3066\u982d\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u3063\u3066\u3044\u304f\n3. HeapArray\u3092\u4f7f\u3063\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0(\u5f8c\u8ff0)\n\nHeapArray\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\n\u914d\u5217\u3092\u982d\u304b\u30891,2,4,8,...\u3068\u53d6\u3063\u3066\u3044\u304d\u4e8c\u5206\u6728\u306e\u6728\u69cb\u9020\u3068\u307f\u306a\u3057\u307e\u3059\n\u3059\u308b\u3068i\u306b\u5bfe\u3059\u308b\u5b50\u306f(2*i+1)\u3068(2*i+2)\u306b\u306a\u308a\u307e\u3059\n\u3053\u306e\u6728\u69cb\u9020\u3067\u6700\u5c0f\u306e\u5024\u304c\u5e38\u306b\u6839\u306b\u306a\u308b\u3088\u3046\u306a\u914d\u5217\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\n\n\u5024\u306e\u633f\u5165\n\u5024\u3092\u6700\u4e0b\u90e8\u306b\u5165\u308c\u8fbc\u307f\u89aa\u3088\u308a\u5c0f\u3055\u3051\u308c\u3070\u3069\u3093\u3069\u3093\u4e0a\u306b\u4e0a\u3052\u3066,\n\u89aa\u3088\u308a\u5927\u304d\u304f\u306a\u308b\u5730\u70b9\u3067\u30b9\u30c8\u30c3\u30d7\u3057\u307e\u3059\n\n\u5024\u306e\u629c\u304d\u51fa\u3057\n\u5024\u3092\u6700\u4e0a\u90e8\u3092\u53d6\u308a\u51fa\u3057\u5b50\u306e\u5c0f\u3055\u3044\u307b\u3046\u3092\u4e0a\u306b\u305a\u3089\u3057\u307e\u3059\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\n\nheap.rb\nclass HeapArray\n  def initialize\n    @heapArr = []\n  end\n\n  def push(n)\n    i = @heapArr.size\n\n    while i>0\n      p = (i-1)/2\n      break if @heapArr[p] <= n\n      @heapArr[i] = @heapArr[p]\n      i=p\n    end\n\n    @heapArr[i] = n\n  end\n\n  def pop\n    min = @heapArr[0]\n    n   = @heapArr.pop\n    unless @heapArr.empty?\n      i   = 0\n      while (i*2+1) < @heapArr.size\n        if @heapArr[i*2+2].nil?\n          buf=i*2+1\n        else\n          buf=(@heapArr[i*2+1]<@heapArr[i*2+2])?i*2+1:i*2+2\n        end\n        break if @heapArr[buf] >= n\n        @heapArr[i] = @heapArr[buf]\n        i=buf\n      end\n      @heapArr[i]=n\n    end\n    return min\n  end\n\n  def show\n    level=0\n    p=0\n    while p<@heapArr.size\n      (2**level).times do\n        if @heapArr[p].nil?\n          print \"x \"\n        else\n          print \"#{@heapArr[p]} \"\n        end\n        p+=1\n      end\n      puts \"\"\n      level+=1\n    end\n    puts \"\"\n  end\nend\n\n\n=begin\nha = HeapArray.new\n\nha.push 19\nha.push 15\nha.push 13\nha.push 12\nha.push 17\nha.push 14\nha.push 20\nha.push 8\nha.show\n8.times do\n  puts \"pop:#{ha.pop}\"\n  ha.show\nend\n=end\n\n\n\n\u691c\u8a3c\u65b9\u6cd5\u306b\u3064\u3044\u3066\n\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3057\u3066,benchmark-ips\u306egem\u3092\u4f7f\u3044\u691c\u8a3c\u3057\u307e\u3057\u305f\nRuby\u3067\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3092\u53d6\u308b\n-10000\u304b\u308910000\u306e\u4e71\u6574\u6570\u309210000\u500b\u914d\u5217\u306b\u7528\u610f\u3057\u3066\n\u305d\u308c\u30921\u3064\u305a\u3064\u8aad\u307f\u8fbc\u3093\u3067\u6700\u5c0f\u306e\u5024\u304b\u30891\u3064\u305a\u3064\u5410\u304b\u305b\u3066\u3044\u304d\u307e\u3059\n\u6b21\u306e2\u3064\u306e\u30b1\u30fc\u30b9\u306b\u3064\u3044\u3066\u8003\u3048\u307e\u3059\n1. \u5168\u3066\u306e\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u305f\u5f8c\u306b\u5168\u3066\u51fa\u3059\n2. \u30e9\u30f3\u30c0\u30e0\u306b\u5165\u308c\u308b\u304b\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\u304b\u304c\u4e0e\u3048\u3089\u308c\u308b\n\u691c\u8a3c\u7528\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\n\n\u5168\u3066\u306e\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u305f\u5f8c\u306b\u5168\u3066\u51fa\u3059\n\n\nheaptest.rb\nrequire 'benchmark/ips'\nrequire './heap.rb'\n\nBenchmark.ips do |x|\n  testData = 10000.times.map{rand(-10000..10000)}\n  x.report(\"Array with Min Loop\") {\n    data = []\n    testData.size.times do |i|\n      data << testData[i]\n    end\n    data.size.times do\n      min=data.min\n      data.delete_at(data.index(min))\n    end\n  }\n  x.report(\"Array with Sort Loop\") {\n    data = []\n    testData.size.times do |i|\n      data << testData[i]\n    end\n\n    data.sort!\n\n    data.size.times do\n      data.shift\n    end\n  }\n  x.report(\"Heap Array\"){\n    ha=HeapArray.new\n    testData.size.times do |i|\n      ha.push testData[i]\n    end\n    testData.size.times do\n      ha.pop \n    end\n  }\n\n  x.compare!\nend\n\n\n\n\u30e9\u30f3\u30c0\u30e0\u306b\u5165\u308c\u308b\u304b\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\u304b\u304c\u4e0e\u3048\u3089\u308c\u308b\n\n\nheaptest.rb\nrequire 'benchmark/ips'\nrequire './heap.rb'\n\nTesttime = 10000\n\nBenchmark.ips do |x|\n  testData = Testtime.times.map{rand(-10000..10000)}\n  store=0\n  pushcnt=0\n  pushflg = (Testtime*2).times.map{\n    flg=rand(0..1)\n    if (store==0||flg==1)&&pushcnt<Testtime\n      store+=1\n      pushcnt+=1\n      1\n    else\n      store-=1\n      0\n    end\n\n  }\n\n  x.report(\"Array with Min Loop\") {\n    data = []\n    p=0\n    pushflg.each do |flg|\n      if flg==1\n        data << testData[p]\n        p+=1\n      else\n        min=data.min\n        data.delete_at(data.index(min))\n      end\n    end\n  }\n  x.report(\"Array with Sort Loop\") {\n    data = []\n    p=0\n    pushflg.each do |flg|\n      if flg==1\n        data << testData[p]\n        p+=1\n      else\n        data.sort!\n        data.shift\n      end\n    end\n\n  }\n  x.report(\"Heap Array\"){\n    ha=HeapArray.new\n    p=0\n    pushflg.each do |flg|\n      if flg==1\n        ha.push testData[p]\n        p+=1\n      else\n        ha.pop\n      end \n    end\n  }\n\n  x.compare!\nend\n\n\n\n\u691c\u8a3c\u7d50\u679c\n\nresult.txt\nWarming up --------------------------------------\n Array with Min Loop     1.000  i/100ms\nArray with Sort Loop     6.000  i/100ms\n          Heap Array     1.000  i/100ms\nCalculating -------------------------------------\n Array with Min Loop      0.045  (\u00b1 0.0%) i/s -      1.000  in  21.990645s\nArray with Sort Loop     67.698  (\u00b1 5.9%) i/s -    342.000  in   5.077838s\n          Heap Array      4.412  (\u00b122.7%) i/s -     22.000  in   5.116938s\n\nComparison:\nArray with Sort Loop:       67.7 i/s\n          Heap Array:        4.4 i/s - 15.34x  slower\n Array with Min Loop:        0.0 i/s - 1488.73x  slower\n\n\n\n\u6700\u7d42\u7684\u306a\u7dcf\u5408\u7d50\u679c\u306fComparison\u306b\u51fa\u308b\u305d\u3046\u3067\u3059\n\u6700\u5c0f\u5024\u3092\u629c\u304d\u51fa\u3059\u65b9\u6cd5\u306f\u8ad6\u5916(\u6700\u5c0f\u5024\u3092\u691c\u7d22\u7528\u3068\u524a\u9664\u7528\u30672\u56de\u3082\u63a2\u3057\u3066\u3044\u308b\u306e\u3067)\u3068\u3057\u3066\nHeap\u65b9\u5f0f\u306b\u6bd4\u3079Sort\u65b9\u5f0f\u306f\u5727\u5012\u7684\u306a\u8a08\u7b97\u30b9\u30d4\u30fc\u30c9\u3067\u3059(\u7d0415\u500d\u3082\u65e9\u3044)\nSort\u65b9\u5f0f\u306fSort1\u56de\u3060\u3051\u306a\u306e\u3067\u5f53\u305f\u308a\u524d\u3063\u3061\u3083\u5f53\u305f\u308a\u524d\u3067\u3059\u304c\u306a\u304b\u306a\u304b\u306e\u901f\u3055\u3067\u3059\n\nresult2.txt\nWarming up --------------------------------------\n Array with Min Loop     1.000  i/100ms\nArray with Sort Loop     1.000  i/100ms\n          Heap Array     1.000  i/100ms\nCalculating -------------------------------------\n Array with Min Loop      0.573  (\u00b1 0.0%) i/s -      3.000  in   5.520816s\nArray with Sort Loop      0.943  (\u00b1 0.0%) i/s -      5.000  in   5.444410s\n          Heap Array      3.248  (\u00b130.8%) i/s -     15.000  in   5.084138s\n\nComparison:\n          Heap Array:        3.2 i/s\nArray with Sort Loop:        0.9 i/s - 3.44x  slower\n Array with Min Loop:        0.6 i/s - 5.67x  slower\n\n\n\u30e9\u30f3\u30c0\u30e0\u306a\u5165\u51fa\u529b\u306b\u306a\u3063\u305f\u3068\u305f\u3093\u306bSort\u65b9\u5f0f\u306f\u4e00\u6c17\u306b\u9045\u304f\u306a\u308a\u307e\u3057\u305f\n\u4e00\u65b9\u3067Heap\u65b9\u5f0f\u306f\u5e38\u306b\u30bd\u30fc\u30c8\u304c\u304b\u304b\u3063\u3066\u3044\u308b\u306e\u3067\u901f\u3055\u306f\u3042\u307e\u308a\u5909\u308f\u308a\u307e\u305b\u3093\n\u666e\u901a\u306e\u914d\u5217\u3088\u308a\u7d043.4\u500d\u65e9\u304f\u306a\u308a\u307e\u3057\u305f\n\u4ee5\u4e0a\u3088\u308a\u30c7\u30fc\u30bf\u304c\u5168\u3066\u65e2\u77e5\u306a\u5834\u5408\u3067\u3042\u308c\u3070sort\u3057\u3066,\u672a\u77e5\u306e\u5834\u5408\u306fHeapArray\u3092\u4f7f\u3063\u305f\u65b9\u304c\u3044\u3044\u307f\u305f\u3044\u3067\u3059\n\u901f\u3055\u3092\u6c42\u3081\u308b\u5834\u5408\u4f55\u304b\u3057\u3089\u306e\u5236\u7d04\u304c\u3042\u308b\u5834\u5408\u306f\u3061\u3083\u3093\u3068\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u3063\u3066\u66f8\u304d\u63db\u3048\u305f\u65b9\u304c\u3044\u3044\u307f\u305f\u3044\u3067\u3059\n\u7279\u306bC++\u306eSTL\u306e\u3088\u3046\u306a\u69cb\u9020\u3092\u3068\u308b\u3082\u306e\u306f\u66f8\u304d\u63db\u3048\u308b\u3068\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\n#\u306f\u3058\u3081\u306b\nruby\u306e\u914d\u5217\u306f\u6c4e\u7528\u7684\u306a\u4f5c\u308a\u3092\u3057\u3066\u3044\u308b\u306e\u3067,\n\u3042\u3048\u3066\u305d\u308c\u3092\u5c02\u9580\u7684\u306a\u3082\u306e\u3059\u308c\u3070\u52d5\u4f5c\u304c\u65e9\u304f\u306a\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u601d\u3044\u8abf\u67fb\u3057\u305f\u6b21\u7b2c\u3067\u3059\n\n#\u6bd4\u8f03\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\n\u4eca\u56de\u6bd4\u8f03\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u300cpriority queue\u300d\u3067\u3059\n\u6bd4\u8f03\u5bfe\u8c61\u306f\u4ee5\u4e0b\u306e\u3082\u306e\u3092\u4f7f\u7528\u3057\u307e\u3059\n1. \u914d\u5217\u304b\u3089\u6700\u5c0f\u5024\u3092\u63a2\u3057\u3066\u53d6\u3063\u3066\u3066\u3044\u304f\u30d7\u30ed\u30b0\u30e9\u30e0(\u3042\u307e\u308a\u3044\u3044\u65b9\u6cd5\u304c\u601d\u3044\u3064\u304d\u307e\u305b\u3093\u3067\u3057\u305f)\n2. \u914d\u5217\u3092\u4e00\u5ea6\u30bd\u30fc\u30c8\u3057\u3066\u982d\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u3063\u3066\u3044\u304f\n3. HeapArray\u3092\u4f7f\u3063\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0(\u5f8c\u8ff0)\n\n#HeapArray\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\n\u914d\u5217\u3092\u982d\u304b\u30891,2,4,8,...\u3068\u53d6\u3063\u3066\u3044\u304d\u4e8c\u5206\u6728\u306e\u6728\u69cb\u9020\u3068\u307f\u306a\u3057\u307e\u3059\n\u3059\u308b\u3068i\u306b\u5bfe\u3059\u308b\u5b50\u306f(2*i+1)\u3068(2*i+2)\u306b\u306a\u308a\u307e\u3059\n\u3053\u306e\u6728\u69cb\u9020\u3067\u6700\u5c0f\u306e\u5024\u304c\u5e38\u306b\u6839\u306b\u306a\u308b\u3088\u3046\u306a\u914d\u5217\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\n##\u5024\u306e\u633f\u5165\n\u5024\u3092\u6700\u4e0b\u90e8\u306b\u5165\u308c\u8fbc\u307f\u89aa\u3088\u308a\u5c0f\u3055\u3051\u308c\u3070\u3069\u3093\u3069\u3093\u4e0a\u306b\u4e0a\u3052\u3066,\n\u89aa\u3088\u308a\u5927\u304d\u304f\u306a\u308b\u5730\u70b9\u3067\u30b9\u30c8\u30c3\u30d7\u3057\u307e\u3059\n##\u5024\u306e\u629c\u304d\u51fa\u3057\n\u5024\u3092\u6700\u4e0a\u90e8\u3092\u53d6\u308a\u51fa\u3057\u5b50\u306e\u5c0f\u3055\u3044\u307b\u3046\u3092\u4e0a\u306b\u305a\u3089\u3057\u307e\u3059\n\n##\u30d7\u30ed\u30b0\u30e9\u30e0\n```ruby:heap.rb\nclass HeapArray\n  def initialize\n    @heapArr = []\n  end\n\n  def push(n)\n    i = @heapArr.size\n\n    while i>0\n      p = (i-1)/2\n      break if @heapArr[p] <= n\n      @heapArr[i] = @heapArr[p]\n      i=p\n    end\n\n    @heapArr[i] = n\n  end\n\n  def pop\n    min = @heapArr[0]\n    n   = @heapArr.pop\n    unless @heapArr.empty?\n      i   = 0\n      while (i*2+1) < @heapArr.size\n        if @heapArr[i*2+2].nil?\n          buf=i*2+1\n        else\n          buf=(@heapArr[i*2+1]<@heapArr[i*2+2])?i*2+1:i*2+2\n        end\n        break if @heapArr[buf] >= n\n        @heapArr[i] = @heapArr[buf]\n        i=buf\n      end\n      @heapArr[i]=n\n    end\n    return min\n  end\n\n  def show\n    level=0\n    p=0\n    while p<@heapArr.size\n      (2**level).times do\n        if @heapArr[p].nil?\n          print \"x \"\n        else\n          print \"#{@heapArr[p]} \"\n        end\n        p+=1\n      end\n      puts \"\"\n      level+=1\n    end\n    puts \"\"\n  end\nend\n\n\n=begin\nha = HeapArray.new\n\nha.push 19\nha.push 15\nha.push 13\nha.push 12\nha.push 17\nha.push 14\nha.push 20\nha.push 8\nha.show\n8.times do\n  puts \"pop:#{ha.pop}\"\n  ha.show\nend\n=end\n```\n\n#\u691c\u8a3c\u65b9\u6cd5\u306b\u3064\u3044\u3066\n\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3057\u3066,benchmark-ips\u306egem\u3092\u4f7f\u3044\u691c\u8a3c\u3057\u307e\u3057\u305f\n[Ruby\u3067\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3092\u53d6\u308b](http://qiita.com/itkrt2y/items/d34a593078f5b99d5fbe)\n\n-10000\u304b\u308910000\u306e\u4e71\u6574\u6570\u309210000\u500b\u914d\u5217\u306b\u7528\u610f\u3057\u3066\n\u305d\u308c\u30921\u3064\u305a\u3064\u8aad\u307f\u8fbc\u3093\u3067\u6700\u5c0f\u306e\u5024\u304b\u30891\u3064\u305a\u3064\u5410\u304b\u305b\u3066\u3044\u304d\u307e\u3059\n\u6b21\u306e2\u3064\u306e\u30b1\u30fc\u30b9\u306b\u3064\u3044\u3066\u8003\u3048\u307e\u3059\n1. \u5168\u3066\u306e\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u305f\u5f8c\u306b\u5168\u3066\u51fa\u3059\n2. \u30e9\u30f3\u30c0\u30e0\u306b\u5165\u308c\u308b\u304b\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\u304b\u304c\u4e0e\u3048\u3089\u308c\u308b\n\n\u691c\u8a3c\u7528\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\n\n1. \u5168\u3066\u306e\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u305f\u5f8c\u306b\u5168\u3066\u51fa\u3059\n\n```ruby:heaptest.rb\nrequire 'benchmark/ips'\nrequire './heap.rb'\n\nBenchmark.ips do |x|\n  testData = 10000.times.map{rand(-10000..10000)}\n  x.report(\"Array with Min Loop\") {\n    data = []\n    testData.size.times do |i|\n      data << testData[i]\n    end\n    data.size.times do\n      min=data.min\n      data.delete_at(data.index(min))\n    end\n  }\n  x.report(\"Array with Sort Loop\") {\n    data = []\n    testData.size.times do |i|\n      data << testData[i]\n    end\n\n    data.sort!\n\n    data.size.times do\n      data.shift\n    end\n  }\n  x.report(\"Heap Array\"){\n    ha=HeapArray.new\n    testData.size.times do |i|\n      ha.push testData[i]\n    end\n    testData.size.times do\n      ha.pop \n    end\n  }\n\n  x.compare!\nend\n```\n\n2. \u30e9\u30f3\u30c0\u30e0\u306b\u5165\u308c\u308b\u304b\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\u304b\u304c\u4e0e\u3048\u3089\u308c\u308b\n\n```ruby:heaptest.rb\nrequire 'benchmark/ips'\nrequire './heap.rb'\n\nTesttime = 10000\n\nBenchmark.ips do |x|\n  testData = Testtime.times.map{rand(-10000..10000)}\n  store=0\n  pushcnt=0\n  pushflg = (Testtime*2).times.map{\n    flg=rand(0..1)\n    if (store==0||flg==1)&&pushcnt<Testtime\n      store+=1\n      pushcnt+=1\n      1\n    else\n      store-=1\n      0\n    end\n    \n  }\n\n  x.report(\"Array with Min Loop\") {\n    data = []\n    p=0\n    pushflg.each do |flg|\n      if flg==1\n        data << testData[p]\n        p+=1\n      else\n        min=data.min\n        data.delete_at(data.index(min))\n      end\n    end\n  }\n  x.report(\"Array with Sort Loop\") {\n    data = []\n    p=0\n    pushflg.each do |flg|\n      if flg==1\n        data << testData[p]\n        p+=1\n      else\n        data.sort!\n        data.shift\n      end\n    end\n\n  }\n  x.report(\"Heap Array\"){\n    ha=HeapArray.new\n    p=0\n    pushflg.each do |flg|\n      if flg==1\n        ha.push testData[p]\n        p+=1\n      else\n        ha.pop\n      end \n    end\n  }\n\n  x.compare!\nend\n```\n\n#\u691c\u8a3c\u7d50\u679c\n```text:result.txt\nWarming up --------------------------------------\n Array with Min Loop     1.000  i/100ms\nArray with Sort Loop     6.000  i/100ms\n          Heap Array     1.000  i/100ms\nCalculating -------------------------------------\n Array with Min Loop      0.045  (\u00b1 0.0%) i/s -      1.000  in  21.990645s\nArray with Sort Loop     67.698  (\u00b1 5.9%) i/s -    342.000  in   5.077838s\n          Heap Array      4.412  (\u00b122.7%) i/s -     22.000  in   5.116938s\n\nComparison:\nArray with Sort Loop:       67.7 i/s\n          Heap Array:        4.4 i/s - 15.34x  slower\n Array with Min Loop:        0.0 i/s - 1488.73x  slower\n\n```\n\n\u6700\u7d42\u7684\u306a\u7dcf\u5408\u7d50\u679c\u306fComparison\u306b\u51fa\u308b\u305d\u3046\u3067\u3059\n\u6700\u5c0f\u5024\u3092\u629c\u304d\u51fa\u3059\u65b9\u6cd5\u306f\u8ad6\u5916(\u6700\u5c0f\u5024\u3092\u691c\u7d22\u7528\u3068\u524a\u9664\u7528\u30672\u56de\u3082\u63a2\u3057\u3066\u3044\u308b\u306e\u3067)\u3068\u3057\u3066\nHeap\u65b9\u5f0f\u306b\u6bd4\u3079Sort\u65b9\u5f0f\u306f\u5727\u5012\u7684\u306a\u8a08\u7b97\u30b9\u30d4\u30fc\u30c9\u3067\u3059(\u7d0415\u500d\u3082\u65e9\u3044)\nSort\u65b9\u5f0f\u306fSort1\u56de\u3060\u3051\u306a\u306e\u3067\u5f53\u305f\u308a\u524d\u3063\u3061\u3083\u5f53\u305f\u308a\u524d\u3067\u3059\u304c\u306a\u304b\u306a\u304b\u306e\u901f\u3055\u3067\u3059\n\n\n```text:result2.txt\nWarming up --------------------------------------\n Array with Min Loop     1.000  i/100ms\nArray with Sort Loop     1.000  i/100ms\n          Heap Array     1.000  i/100ms\nCalculating -------------------------------------\n Array with Min Loop      0.573  (\u00b1 0.0%) i/s -      3.000  in   5.520816s\nArray with Sort Loop      0.943  (\u00b1 0.0%) i/s -      5.000  in   5.444410s\n          Heap Array      3.248  (\u00b130.8%) i/s -     15.000  in   5.084138s\n\nComparison:\n          Heap Array:        3.2 i/s\nArray with Sort Loop:        0.9 i/s - 3.44x  slower\n Array with Min Loop:        0.6 i/s - 5.67x  slower\n```\n\u30e9\u30f3\u30c0\u30e0\u306a\u5165\u51fa\u529b\u306b\u306a\u3063\u305f\u3068\u305f\u3093\u306bSort\u65b9\u5f0f\u306f\u4e00\u6c17\u306b\u9045\u304f\u306a\u308a\u307e\u3057\u305f\n\u4e00\u65b9\u3067Heap\u65b9\u5f0f\u306f\u5e38\u306b\u30bd\u30fc\u30c8\u304c\u304b\u304b\u3063\u3066\u3044\u308b\u306e\u3067\u901f\u3055\u306f\u3042\u307e\u308a\u5909\u308f\u308a\u307e\u305b\u3093\n\u666e\u901a\u306e\u914d\u5217\u3088\u308a\u7d043.4\u500d\u65e9\u304f\u306a\u308a\u307e\u3057\u305f\n\n\u4ee5\u4e0a\u3088\u308a\u30c7\u30fc\u30bf\u304c\u5168\u3066\u65e2\u77e5\u306a\u5834\u5408\u3067\u3042\u308c\u3070sort\u3057\u3066,\u672a\u77e5\u306e\u5834\u5408\u306fHeapArray\u3092\u4f7f\u3063\u305f\u65b9\u304c\u3044\u3044\u307f\u305f\u3044\u3067\u3059\n\n\u901f\u3055\u3092\u6c42\u3081\u308b\u5834\u5408**\u4f55\u304b\u3057\u3089\u306e\u5236\u7d04\u304c\u3042\u308b\u5834\u5408\u306f\u3061\u3083\u3093\u3068\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u3063\u3066\u66f8\u304d\u63db\u3048\u305f\u65b9\u304c\u3044\u3044**\u307f\u305f\u3044\u3067\u3059\n\u7279\u306b**C++\u306eSTL\u306e\u3088\u3046\u306a\u69cb\u9020\u3092\u3068\u308b\u3082\u306e**\u306f\u66f8\u304d\u63db\u3048\u308b\u3068\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\n", "tags": ["Ruby", "\u30d9\u30f3\u30c1\u30de\u30fc\u30af", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"]}