{"context": "Chainer Advent Calendar 2016 \u306e15\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\uff08\u3059\u307f\u307e\u305b\u3093\u9045\u523b\u3057\u307e\u3057\u305f\u2026\uff09\u3002\n\u672c\u8a18\u4e8b\u306f\u3001\u300cChainer \u306e\u30b5\u30f3\u30d7\u30eb\u3092\u52d5\u304b\u3057\u3066\u5b66\u7fd2\u306f\u3067\u304d\u308b\u3051\u3069\u3001\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u5b66\u7fd2\u3055\u305b\u3066\u3001\u3055\u3089\u306b\u305d\u306e\u30e2\u30c7\u30eb\u3092 Web API \u30b5\u30fc\u30d0\u306e\u3088\u3046\u306a\u5b9f\u7528\u7684\u306a\u5f62\u306b\u3059\u308b\u306b\u306f\u3069\u3046\u3059\u308c\u3070\u826f\u3044\u306e\u304b\uff1f\u300d\u3068\u601d\u3063\u3066\u3044\u308b\u3088\u3046\u306a\u65b9\u5411\u3051\u306e\u8a18\u4e8b\u306b\u306a\u308a\u307e\u3059\uff08\u6bd4\u8f03\u7684\u521d\u5fc3\u8005\u304c\u5bfe\u8c61\u306b\u306a\u308b\u304b\u3068\u601d\u3044\u307e\u3059\uff09\u3002\n\u3053\u3053\u3067\u306f\u3001Chainer \u516c\u5f0f\u306e GitHub \u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u3042\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9 imagenet \u3092\u30d9\u30fc\u30b9\u306b\u3001\u753b\u50cf\u5206\u985e\u3092\u884c\u3046 API \u30b5\u30fc\u30d0\u306e\u4f5c\u6210\u3092\u6700\u7d42\u76ee\u6a19\u3068\u3057\u307e\u3059\u3002\n\n\u524d\u63d0\n\u672c\u8a18\u4e8b\u3067\u306f\u3001\u6b21\u306e\u74b0\u5883\u3067\u958b\u767a\u3092\u884c\u3044\u307e\u3057\u305f\u3002\n\nPython 3.5\nChainer 1.19.0\nFlask 0.11.1\nOpenCV 3.1.0\n\n\n\u753b\u50cf\u3092\u53ce\u96c6\u3059\u308b\n\u30c7\u30fc\u30bf\u53ce\u96c6\u304c\u3057\u3093\u3069\u304b\u3063\u305f\u306e\u3067\u3001 \u7c21\u5358\u5316\u306e\u305f\u3081\u306b\u300c\u72ac\u3001\u732b\u3001\u3046\u3055\u304e\u300d\u306e3\u7a2e\u985e\u306e\u52d5\u7269\u3092\u5206\u985e\u3059\u308b\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u3092\u69cb\u7bc9\u3057\u3066\u307f\u307e\u3059\u3002\n\u307e\u305a\u306f\u753b\u50cf\u3092\u96c6\u3081\u308b\u3053\u3068\u304b\u3089\u59cb\u307e\u308a\u307e\u3059\u3002\u4eca\u56de\u306f\u4e0b\u8a18\u30b5\u30a4\u30c8\u304b\u3089\u52d5\u7269\u306e\u753b\u50cf\u3092\u96c6\u3081\u307e\u3057\u305f\u3002\nPixabay\n\u53ce\u96c6\u3057\u305f\u753b\u50cf\u306f original \u30d5\u30a9\u30eb\u30c0\u306e\u4e2d\u306b\u3001\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u306e\u901a\u308a\u306e\u69cb\u6210\u3067\u683c\u7d0d\u3057\u307e\u3059\uff08\u5b9f\u969b\u306b\u306f\u3082\u3063\u3068\u5927\u91cf\u306e\u753b\u50cf\u3092\u96c6\u3081\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff09\u3002\n\n\u307e\u305f\u3001\u4e0b\u8a18\u30d5\u30a1\u30a4\u30eb\u3067\u52d5\u7269\u3068\u30e9\u30d9\u30eb\u306e\u5bfe\u5fdc\u3092\u7ba1\u7406\u3057\u307e\u3059\u3002\u5404\u30af\u30e9\u30b9\u306b\u5bfe\u3057\u3066\u3001ID\uff08\u753b\u50cf\u3092\u683c\u7d0d\u3059\u308b\u30d5\u30a9\u30eb\u30c0\u540d\uff09\u3001\u30af\u30e9\u30b9\u306e\u8868\u793a\u540d\u3001\u30e9\u30d9\u30eb\uff08\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u306e\u51fa\u529b\u30d9\u30af\u30c8\u30eb\u306b\u304a\u3051\u308b index\uff09\u3092\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u3067\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\nlabel_master.txt\n000_dog \u72ac 0\n001_cat \u732b 1\n002_rabit \u3046\u3055\u304e 2\n\n\n\n\u753b\u50cf\u306e\u524d\u51e6\u7406\u3092\u884c\u3046\nChainer \u306e imagenet \u3067\u306f\u3001256\u00d7256 \u306e\u753b\u50cf\u3092\u6271\u3046\u3053\u3068\u304c\u524d\u63d0\u3068\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u306a\u306e\u3067\u3001\u53ce\u96c6\u3057\u305f\u753b\u50cf\u3092\u30ea\u30b5\u30a4\u30ba\u3057\u307e\u3059\u3002\u307e\u305f\u3001imagenet \u3067\u5b66\u7fd2\u3092\u884c\u3046\u969b\u306b\u3001\u753b\u50cf\u306e\u30d1\u30b9\u3068\u305d\u306e\u753b\u50cf\u306e\u30e9\u30d9\u30eb\u3092\u8a18\u8ff0\u3057\u305f\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304c\u5fc5\u8981\u306b\u306a\u308b\u306e\u3067\u3001\u3053\u3053\u3067\u4f5c\u6210\u3057\u307e\u3059\u3002\n\npreprocess.py\n# coding: utf-8\n\nimport os\nimport shutil\nimport re\nimport random\n\nimport cv2\nimport numpy as np\n\n\nWIDTH = 256                             # \u30ea\u30b5\u30a4\u30ba\u5f8c\u306e\u5e45\nHEIGHT = 256                            # \u30ea\u30b5\u30a4\u30ba\u5f8c\u306e\u9ad8\u3055\n\nSRC_BASE_PATH = './original'            # \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u753b\u50cf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u30d9\u30fc\u30b9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\nDST_BASE_PATH = './resized'             # \u30ea\u30b5\u30a4\u30ba\u5f8c\u306e\u753b\u50cf\u3092\u683c\u7d0d\u3059\u308b\u30d9\u30fc\u30b9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n\nLABEL_MASTER_PATH = 'label_master.txt'  # \u30af\u30e9\u30b9\u3068\u30e9\u30d9\u30eb\u306e\u5bfe\u5fdc\u3092\u307e\u3068\u3081\u305f\u30d5\u30a1\u30a4\u30eb\nTRAIN_LABEL_PATH = 'train_label.txt'    # \u5b66\u7fd2\u7528\u306e\u30e9\u30d9\u30eb\u30d5\u30a1\u30a4\u30eb\nVAL_LABEL_PATH = 'val_label.txt'        # \u691c\u8a3c\u7528\u306e\u30e9\u30d9\u30eb\u30d5\u30a1\u30a4\u30eb\n\nVAL_RATE = 0.2                          # \u691c\u8a3c\u30c7\u30fc\u30bf\u306e\u5272\u5408\n\n\nif __name__ == '__main__':\n    with open(LABEL_MASTER_PATH, 'r') as f:\n        classes = [line.strip().split(' ') for line in f.readlines()]\n\n    # \u30ea\u30b5\u30a4\u30ba\u5f8c\u306e\u753b\u50cf\u306e\u683c\u7d0d\u5148\u3092\u521d\u671f\u5316\n    if os.path.exists(DST_BASE_PATH):\n        shutil.rmtree(DST_BASE_PATH)\n\n    os.mkdir(DST_BASE_PATH)\n\n    train_dataset = []\n    val_dataset = []\n\n    for c in classes:\n        os.mkdir(os.path.join(DST_BASE_PATH, c[0]))\n\n        class_dir_path = os.path.join(SRC_BASE_PATH, c[0])\n\n        # JPEG \u304b PNG \u753b\u50cf\u306e\u307f\u53d6\u5f97\n        files = [\n            file for file in os.listdir(class_dir_path)\n            if re.search(r'\\.(jpe?g|png)$', file, re.IGNORECASE)\n        ]\n\n        # \u30ea\u30b5\u30a4\u30ba\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u51fa\u529b\n        for file in files:\n            src_path = os.path.join(class_dir_path, file)\n            image = cv2.imread(src_path)\n            resized_image = cv2.resize(image, (WIDTH, HEIGHT))\n            cv2.imwrite(os.path.join(DST_BASE_PATH, c[0], file), resized_image)\n\n        # \u5b66\u7fd2\u30fb\u691c\u8a3c\u306e\u30e9\u30d9\u30eb\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\n        bound = int(len(files) * (1 - VAL_RATE))\n        random.shuffle(files)\n        train_files = files[:bound]\n        val_files = files[bound:]\n\n        train_dataset.extend([(os.path.join(c[0], file), c[2]) for file in train_files])\n        val_dataset.extend([(os.path.join(c[0], file), c[2]) for file in val_files])\n\n    # \u5b66\u7fd2\u7528\u30e9\u30d9\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\n    with open(TRAIN_LABEL_PATH, 'w') as f:\n        for d in train_dataset:\n            f.write(' '.join(d) + '\\n')\n\n    # \u691c\u8a3c\u7528\u30e9\u30d9\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\n    with open(VAL_LABEL_PATH, 'w') as f:\n        for d in val_dataset:\n            f.write(' '.join(d) + '\\n')\n\n\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n$ python preprocess.py\n\n\u3046\u307e\u304f\u3044\u3051\u3070\u3001 resized \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4ee5\u4e0b\u306b 256\u00d7256 \u306b\u30ea\u30b5\u30a4\u30ba\u3055\u308c\u305f\u753b\u50cf\u3068\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30eb\u30fc\u30c8\u306b train_label.txt, val_label.txt \u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\n\u306a\u304a\u3001preprocess.py \u306e VAL_RATE \u306e\u5024\u3092\u3044\u3058\u308c\u3070\u3001\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u691c\u8a3c\u30c7\u30fc\u30bf\u306e\u6bd4\u7387\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\u4e0a\u8a18\u30b3\u30fc\u30c9\u3067\u306f\u3001\u5b66\u7fd2 : \u691c\u8a3c = 8 : 2 \u306e\u6bd4\u7387\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u753b\u50cf\u306e\u30ea\u30b5\u30a4\u30ba\u304c\u3067\u304d\u305f\u3089\u3001\u6b21\u306b\u5b66\u7fd2\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5e73\u5747\u753b\u50cf\u3092\u4f5c\u6210\u3057\u307e\u3059\uff08\u5165\u529b\u753b\u50cf\u304b\u3089\u5e73\u5747\u753b\u50cf\u3092\u5f15\u304f\u306e\u306f\u4e00\u7a2e\u306e\u6b63\u898f\u5316\u51e6\u7406\u3067\u3059\u3002\u305d\u306e\u305f\u3081\u306e\u5e73\u5747\u753b\u50cf\u3092\u3053\u3053\u3067\u4f5c\u6210\u3057\u307e\u3059\uff09\u3002\nChainer \u306e GitHub \u30ea\u30dd\u30b8\u30c8\u30ea\u306e imagenet \u306b\u3042\u308b compute_mean.py \u3092\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u5185\u306b\u7f6e\u304d\u3001\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n$ python compute_mean.py train_label.txt -R ./resized/\n\n\u5b9f\u884c\u5f8c\u3001mean.npy \u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\n\n\u5b66\u7fd2\u3059\u308b\n\u30ea\u30b5\u30a4\u30ba\u5f8c\u306e\u753b\u50cf\u3092\u4f7f\u3063\u3066\u5b66\u7fd2\u3092\u884c\u3044\u307e\u3059\u3002\nimagenet \u3067\u306f\u3001\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u304c\u3044\u304f\u3064\u304b\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u4eca\u56de\u306f GoogleNetBN \u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\uff08\u6b21\u7bc0\u3067\u4e00\u90e8\u30b3\u30fc\u30c9\u306e\u6539\u826f\u3092\u884c\u3044\u307e\u3059\uff09\u3002imagenet \u304b\u3089 train_imagenet.py \u3068 googlenetbn.py \u3092\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u5185\u306b\u7f6e\u304d\u307e\u3059\u3002\n\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u5b66\u7fd2\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002 \u30a8\u30dd\u30c3\u30af\u6570 (-E) \u306b\u306f\u3001\u30c7\u30fc\u30bf\u91cf\u3084\u30bf\u30b9\u30af\u306b\u5fdc\u3058\u3066\u9069\u5207\u306a\u5024\u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u307e\u305f\u3001GPU ID (-g) \u3082\u74b0\u5883\u306b\u5408\u308f\u305b\u3066\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\uff08CPU \u3067\u5b66\u7fd2\u3059\u308b\u5834\u5408\u3001-g \u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\uff09\u3002\n$ python train_imagenet.py -a googlenetbn -E 100 -g 0 -R ./resized/ ./train_label.txt ./val_label.txt --test\n\n\u203b alex.py, googlenet.py, nin.py \u304c\u30ed\u30fc\u30ab\u30eb\u306b\u306a\u3044\u5834\u5408\u3001train_imagenet.py \u3092\u305d\u306e\u307e\u307e\u5b9f\u884c\u3059\u308b\u3068\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002\u306a\u306e\u3067\u3001\u3053\u308c\u3089\u306e\u30d5\u30a1\u30a4\u30eb\u3082\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u5185\u306b\u7f6e\u304f\u304b\u3001train_imagenet.py \u306e\u554f\u984c\u306e\u7b87\u6240\u3092\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u5f8c\u8005\u306e\u65b9\u6cd5\u306b\u95a2\u3057\u3066\u306f \u3053\u3061\u3089 \u306e\u30b3\u30fc\u30c9\u3092\u53c2\u7167\u3002\n\u5b66\u7fd2\u6e08\u307f\u306e\u30e2\u30c7\u30eb\u3084\u30ed\u30b0\u306f\u3001result \u30d5\u30a9\u30eb\u30c0\u306b\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002\n\nimagenet \u306e\u30b3\u30fc\u30c9\u3092\u6539\u826f\u3059\u308b\n\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3092\u7528\u3044\u3066\u3001\u4efb\u610f\u306e\u753b\u50cf\u306e\u30af\u30e9\u30b9\u5206\u985e\uff08\u63a8\u5b9a\uff09\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002imagenet \u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u3001\u5b66\u7fd2\u30c7\u30fc\u30bf\u304a\u3088\u3073\u691c\u8a3c\u30c7\u30fc\u30bf\u7528\u306e\u30b3\u30fc\u30c9\u306e\u307f\u8a18\u8ff0\u3055\u308c\u3066\u304a\u308a\u3001\u63a8\u5b9a\u3092\u884c\u3046\u30b3\u30fc\u30c9\u3092\u8ffd\u52a0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3068\u3044\u3063\u3066\u3082\u3001\u57fa\u672c\u7684\u306b\u306f __call__() \u306e\u51e6\u7406\u3092\u30d9\u30fc\u30b9\u306b\u3001loss \u5024\u3092\u8fd4\u3057\u3066\u3044\u308b\u7b87\u6240\u3092\u78ba\u7387\u5024\u306b\u5909\u3048\u308c\u3070\u826f\u3044\u3067\u3059\u3002\u65b0\u305f\u306b predict() \u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u6210\u3057\u3066\u3001\u3053\u306e\u51e6\u7406\u3092\u8a18\u8ff0\u3057\u3066\u307f\u307e\u3059\u3002\n\ngooglenetbn.py(\u4e00\u90e8\u629c\u7c8b)\nclass GoogLeNetBN(chainer.Chain):\n\n\n    # --- (\u7701\u7565) ---\n\n\n    def predict(self, x):\n        test = True\n\n        h = F.max_pooling_2d(\n            F.relu(self.norm1(self.conv1(x), test=test)), 3, stride=2, pad=1)\n        h = F.max_pooling_2d(\n            F.relu(self.norm2(self.conv2(h), test=test)), 3, stride=2, pad=1)\n\n        h = self.inc3a(h)\n        h = self.inc3b(h)\n        h = self.inc3c(h)\n        h = self.inc4a(h)\n\n        # a = F.average_pooling_2d(h, 5, stride=3)\n        # a = F.relu(self.norma(self.conva(a), test=test))\n        # a = F.relu(self.norma2(self.lina(a), test=test))\n        # a = self.outa(a)\n        # a = F.softmax(a)\n\n        h = self.inc4b(h)\n        h = self.inc4c(h)\n        h = self.inc4d(h)\n\n        # b = F.average_pooling_2d(h, 5, stride=3)\n        # b = F.relu(self.normb(self.convb(b), test=test))\n        # b = F.relu(self.normb2(self.linb(b), test=test))\n        # b = self.outb(b)\n        # b = F.softmax(b)\n\n        h = self.inc4e(h)\n        h = self.inc5a(h)\n        h = F.average_pooling_2d(self.inc5b(h), 7)\n        h = self.out(h)\n\n        return F.softmax(h)\n\n\n\u6539\u826f\u7248 googlenetbn.py \u306e\u5b8c\u5168\u306a\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3092\u898b\u308b\u3068\u3001__call__() \u306e\u51e6\u7406\u3068\u307b\u3068\u3093\u3069\u540c\u3058\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305f\u3060\u3057\u3001GoogleNet \u306b\u306f\u51fa\u529b\u304c3\u3064\uff08\u30e1\u30a4\u30f3\uff0b\u88dc\u52a92\u3064\uff09\u3042\u308a\u307e\u3059\u304c\u3001\u63a8\u5b9a\u6642\u306b\u306f\u88dc\u52a9\u306e2\u3064\u306e\u51fa\u529b\u306f\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\uff08\u3053\u306e\u88dc\u52a9\u5206\u985e\u5668\u306f\u3001\u5b66\u7fd2\u6642\u306e\u52fe\u914d\u6d88\u5931\u306e\u5bfe\u7b56\u3068\u3057\u3066\u5c0e\u5165\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3067\u3059\uff091\u3002\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u306e\u90e8\u5206\u304c\u305d\u306e\u7b87\u6240\u306b\u8a72\u5f53\u3057\u307e\u3059\u3002\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3001\u6700\u5f8c\u306b softmax \u95a2\u6570\u3092\u9069\u7528\u3057\u307e\u3059\u304c\u3001softmax \u3092\u7701\u7565\u3057\u3066 return h \u3068\u3057\u3066\u3082\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002\u30b9\u30b3\u30a2\u3092 0\u301c1 \u306e\u7bc4\u56f2\u306b\u6b63\u898f\u5316\u3059\u308b\u5fc5\u8981\u304c\u306a\u304f\u3001\u8a08\u7b97\u91cf\u3092\u3067\u304d\u308b\u3060\u3051\u6291\u3048\u305f\u3044\u5834\u5408\u306f\u3001\u7701\u7565\u3057\u305f\u65b9\u304c\u826f\u3044\u3067\u3059\u3002\n\u3053\u3053\u3067\u306f GoogleNetBN \u3092\u4f7f\u3044\u307e\u3057\u305f\u304c\u3001\u3082\u3061\u308d\u3093\u3001AlexNet \u306a\u3069 imagenet \u306e\u30b5\u30f3\u30d7\u30eb\u306b\u3042\u308b\u4ed6\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3082\u540c\u3058\u3088\u3046\u306b\u30b3\u30fc\u30c9\u3092\u6539\u826f\u3059\u308c\u3070 OK \u3067\u3059\u3002\u307e\u305f\u3001ResNet \u306a\u3069\u3092\u69cb\u7bc9\u3059\u308b\u306e\u3082\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nWeb API \u30b5\u30fc\u30d0\u3092\u4f5c\u308b\n\u6b21\u306b\u3001Web API \u30b5\u30fc\u30d0\u3092\u4f5c\u308a\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001Python \u306e Web \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af Flask \u3092\u4f7f\u3063\u3066\u3001\u30b5\u30fc\u30d0\u3092\u69cb\u7bc9\u3057\u307e\u3059\u3002\n\u30a4\u30e1\u30fc\u30b8\u3068\u3057\u3066\u306f\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089 HTTP POST \u3067\u30b5\u30fc\u30d0\u306b\u753b\u50cf\u3092\u9001\u308b\u3068\u3001\u30b5\u30fc\u30d0\u5074\u3067\u753b\u50cf\u5206\u985e\u3092\u884c\u3044\u3001\u7d50\u679c\u3092 JSON \u3067\u8fd4\u3059\u3068\u3044\u3063\u305f\u51e6\u7406\u3092\u884c\u3046\u30b3\u30fc\u30c9\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\nserver.py\n# coding: utf-8\n\nfrom __future__ import print_function\nfrom flask import Flask, request, jsonify\nimport argparse\n\nimport cv2\nimport numpy as np\nimport chainer\n\nimport googlenetbn                  # \u4ed6\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u4f7f\u3044\u305f\u3044\u5834\u5408\u306f\u3053\u3053\u3092\u66f8\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044\n\n\nWIDTH = 256                         # \u30ea\u30b5\u30a4\u30ba\u5f8c\u306e\u5e45\nHEIGHT = 256                        # \u30ea\u30b5\u30a4\u30ba\u5f8c\u306e\u9ad8\u3055\nLIMIT = 3                           # \u30af\u30e9\u30b9\u6570\n\nmodel = googlenetbn.GoogLeNetBN()   # \u4ed6\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u4f7f\u3044\u305f\u3044\u5834\u5408\u306f\u3053\u3053\u3092\u66f8\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044\n\napp = Flask(__name__)\n\n# JSON \u4e2d\u306e\u65e5\u672c\u8a9e\u3092 ASCII \u30b3\u30fc\u30c9\u306b\u5909\u63db\u3057\u306a\u3044\u3088\u3046\u306b\u3059\u308b (curl \u30b3\u30de\u30f3\u30c9\u3067\u898b\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u3002ASCII \u306b\u5909\u63db\u3057\u3066\u3082\u7279\u306b\u554f\u984c\u306a\u3044)\napp.config['JSON_AS_ASCII'] = False\n\n\n# train_imagenet.py PreprocessedDataset \u306e get_example() \u3092\u53c2\u8003\ndef preproduce(image, crop_size, mean):\n    # \u30ea\u30b5\u30a4\u30ba\n    image = cv2.resize(image, (WIDTH, HEIGHT))\n\n    # (height, width, channel) -> (channel, height, width) \u306b\u5909\u63db\n    image = image.transpose(2, 0, 1)\n\n    _, h, w = image.shape\n\n    top = (h - crop_size) // 2\n    left = (w - crop_size) // 2\n    bottom = top + crop_size\n    right = left + crop_size\n\n    image = image[:, top:bottom, left:right]\n    image -= mean[:, top:bottom, left:right]\n    image /= 255\n\n    return image\n\n\n@app.route('/')\ndef hello():\n    return 'Hello!'\n\n\n# \u753b\u50cf\u5206\u985e API\n# http://localhost:8090/predict \u306b\u753b\u50cf\u3092\u6295\u3052\u308b\u3068 JSON \u3067\u7d50\u679c\u304c\u8fd4\u308b\n@app.route('/predict', methods=['POST'])\ndef predict():\n    # \u753b\u50cf\u8aad\u307f\u8fbc\u307f\n    file = request.files['image']\n    image = cv2.imdecode(np.fromstring(file.stream.read(), np.uint8), cv2.IMREAD_COLOR)\n\n    # \u524d\u51e6\u7406\n    image = preproduce(image.astype(np.float32), model.insize, mean)\n\n    # \u63a8\u5b9a\n    p = model.predict(np.array([image]))[0].data\n    indexes = np.argsort(p)[::-1][:LIMIT]\n\n    # \u7d50\u679c\u3092 JSON \u306b\u3057\u3066\u8fd4\u3059\n    return jsonify({\n        'result': [[classes[index][1], float(p[index])] for index in indexes]\n    })\n\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--initmodel', type=str, default='',\n                        help='Initialize the model from given file')\n    parser.add_argument('--mean', '-m', default='mean.npy',\n                        help='Mean file (computed by compute_mean.py)')\n    parser.add_argument('--labelmaster', '-l', type=str, default='label_master.txt',\n                        help='Label master file')\n    parser.add_argument('--gpu', '-g', type=int, default=-1,\n                        help='GPU ID (negative value indicates CPU')\n    args = parser.parse_args()\n\n    mean = np.load(args.mean)\n    chainer.serializers.load_npz(args.initmodel, model)\n\n    with open(args.labelmaster, 'r') as f:\n        classes = [line.strip().split(' ') for line in f.readlines()]\n\n    if args.gpu >= 0:\n        chainer.cuda.get_device(args.gpu).use()\n        model.to_gpu()\n\n    app.run(host='0.0.0.0', port=8090)\n\n\n\u5206\u985e\u7d50\u679c\u306e JSON \u306f\u6b21\u306e\u69cb\u9020\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u5185\u5074\u306e\u914d\u5217\u306f\u3001\u6700\u521d\u306e\u8981\u7d20\u304c\u30af\u30e9\u30b9\u540d\u3001\u6b21\u306e\u8981\u7d20\u304c\u30b9\u30b3\u30a2\u3067\u3059\u3002\u5404\u30af\u30e9\u30b9\u306f\u30b9\u30b3\u30a2\u304c\u9ad8\u3044\u9806\u306b\u30bd\u30fc\u30c8\u3055\u308c\u307e\u3059\u3002\n{\n  \"result\": [\n    [\n      \"\u72ac\",\n      0.4107133746147156\n    ], \n    [\n      \"\u3046\u3055\u304e\",\n      0.3368038833141327\n    ], \n    [\n      \"\u732b\",\n      0.2524118423461914\n    ]\n  ]\n}\n\n\u307e\u305f\u3001\u5b9a\u6570 LIMIT \u3067\u3001\u4e0a\u4f4d\u4f55\u500b\u5206\u306e\u30af\u30e9\u30b9\u3092\u53d6\u5f97\u3059\u308b\u304b\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u4eca\u56de\u306f\u52d5\u7269\u304c3\u7a2e\u985e\u3057\u304b\u306a\u3044\u306e\u3067\u3001LIMIT = 3 \u3068\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u4f8b\u3048\u3070\u3001\u30af\u30e9\u30b9\u304c\u5168\u4f53\u3067100\u7a2e\u985e\u3042\u308a\u3001\u305d\u306e\u3046\u3061\u4e0a\u4f4d10\u500b\u5206\u304c\u6b32\u3057\u3044\u5834\u5408\u306f LIMIT = 10\u30011\u4f4d\u3060\u3051\u3067\u826f\u3044\u5834\u5408\u306f LIMIT = 1 \u3068\u3044\u3063\u305f\u3088\u3046\u306a\u6307\u5b9a\u304c\u53ef\u80fd\u3067\u3059\u3002\n\u30b3\u30fc\u30c9\u304c\u5b8c\u6210\u3057\u305f\u306e\u3067\u3001\u5b9f\u969b\u306b\u30b5\u30fc\u30d0\u3092\u7acb\u3061\u4e0a\u3052\u3066\u307f\u307e\u3059\u3002\n$ python server.py --initmodel ./result/model_iter_120\n * Running on http://0.0.0.0:8090/ (Press CTRL+C to quit)\n\n\u3053\u306e\u72b6\u614b\u3067\u3082\u30461\u3064\u5225\u306e\u30b7\u30a7\u30eb\u3092\u7528\u610f\u3057\u3001curl \u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3063\u3066\u30b5\u30fc\u30d0\u306b\u753b\u50cf\u3092\u9001\u3063\u3066\u307f\u307e\u3059\uff08\u30c6\u30b9\u30c8\u753b\u50cf\u306f\u9069\u5f53\u306b\u7528\u610f\u3057\u307e\u3059\uff09\u3002\u7d50\u679c\u304c\u8fd4\u3063\u3066\u304d\u305f\u3089\u6210\u529f\u3067\u3059\u3002\n$ curl -X POST -F image=@test.jpg http://localhost:8090/predict\n{\n  \"result\": [\n    [\n      \"\u3046\u3055\u304e\", \n      0.4001327157020569\n    ], \n    [\n      \"\u732b\", \n      0.36795011162757874\n    ], \n    [\n      \"\u72ac\", \n      0.23191720247268677\n    ]\n  ]\n}\n\n\u3053\u308c\u3067 API \u30b5\u30fc\u30d0\u306f\u5b8c\u6210\u3067\u3059\uff01\u3042\u3068\u306f\u3001\u81ea\u7531\u306b\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u3092\u4f5c\u6210\u3057\u3001API \u30b5\u30fc\u30d0\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u4ed5\u7d44\u307f\u3092\u5b9f\u88c5\u3059\u308c\u3070\u3001Web \u30b5\u30fc\u30d3\u30b9\u3068\u3057\u3066\u3082\u516c\u958b\u3067\u304d\u307e\u3059\u3002\n\n\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u3092\u4f5c\u308b\u306b\u306f\nTODO: \u5f8c\u65e5\u3001\u5225\u9014\u8a18\u4e8b\u3092\u4f5c\u6210\u3059\u308b\u4e88\u5b9a\u3067\u3059\u3002\n\n\u304a\u308f\u308a\u306b\n\u672c\u8a18\u4e8b\u3067\u306f\u3001Chainer \u3092\u4f7f\u3063\u305f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u306e\u5b66\u7fd2\u65b9\u6cd5\u304b\u3089 Web API \u30b5\u30fc\u30d0\u306e\u4f5c\u6210\u306b\u3064\u3044\u3066\u3001\u4e00\u901a\u308a\u624b\u9806\u3092\u8ffd\u3063\u3066\u307f\u307e\u3057\u305f\uff08\u521d\u5fc3\u8005\u5bfe\u8c61\u3068\u8a00\u3044\u3064\u3064\u3001\u8aac\u660e\u304c\u9069\u5f53\u306a\u3068\u3053\u308d\u3082\u3042\u308a\u307e\u3057\u305f\u304c\u3001\u3053\u3053\u307e\u3067\u8aad\u3093\u3067\u3044\u305f\u3060\u304d\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\uff09\u3002\n\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3084\u7d30\u304b\u3044\u8abf\u6574\u306a\u3069\u3092\u8003\u616e\u3059\u308b\u3068\u3001\u3082\u3046\u5c11\u3057\u3057\u3063\u304b\u308a\u3068\u4f5c\u308a\u8fbc\u307e\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u304c\u3001\u3056\u3063\u304f\u308a\u3068\u306f\u3053\u3093\u306a\u611f\u3058\u3060\u3068\u601d\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u753b\u50cf\u306e\u51e6\u7406\u3082\u7d50\u69cb\u9069\u5f53\u306a\u65b9\u3060\u3068\u601d\u3046\u306e\u3067\u3001\u7cbe\u5ea6\u306e\u9762\u3067\u3082\u304b\u306a\u308a\u6539\u5584\u306e\u4f59\u5730\u306f\u3042\u308a\u307e\u3059\u3002\n\u307f\u306a\u3055\u3093\u3082 Chainer \u3092\u3069\u3093\u3069\u3093\u4f7f\u3063\u3066\u3001\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u306e\u30d7\u30ed\u30c0\u30af\u30c8\u3092\u4f5c\u3063\u3066\u3044\u304d\u307e\u3057\u3087\u3046\uff01\n\u672c\u8a18\u4e8b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n\n\n\nChristian Szegedy, et al. \"Going Deeper with Convolutions\", 2015\u00a0\u21a9\n\n\n\n[Chainer Advent Calendar 2016](http://qiita.com/advent-calendar/2016/chainer) \u306e15\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\uff08\u3059\u307f\u307e\u305b\u3093\u9045\u523b\u3057\u307e\u3057\u305f\u2026\uff09\u3002\n\n\u672c\u8a18\u4e8b\u306f\u3001\u300cChainer \u306e\u30b5\u30f3\u30d7\u30eb\u3092\u52d5\u304b\u3057\u3066\u5b66\u7fd2\u306f\u3067\u304d\u308b\u3051\u3069\u3001\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u5b66\u7fd2\u3055\u305b\u3066\u3001\u3055\u3089\u306b\u305d\u306e\u30e2\u30c7\u30eb\u3092 Web API \u30b5\u30fc\u30d0\u306e\u3088\u3046\u306a\u5b9f\u7528\u7684\u306a\u5f62\u306b\u3059\u308b\u306b\u306f\u3069\u3046\u3059\u308c\u3070\u826f\u3044\u306e\u304b\uff1f\u300d\u3068\u601d\u3063\u3066\u3044\u308b\u3088\u3046\u306a\u65b9\u5411\u3051\u306e\u8a18\u4e8b\u306b\u306a\u308a\u307e\u3059\uff08\u6bd4\u8f03\u7684\u521d\u5fc3\u8005\u304c\u5bfe\u8c61\u306b\u306a\u308b\u304b\u3068\u601d\u3044\u307e\u3059\uff09\u3002\n\n\u3053\u3053\u3067\u306f\u3001Chainer \u516c\u5f0f\u306e GitHub \u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u3042\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9 [imagenet](https://github.com/pfnet/chainer/tree/v1.19.0/examples/imagenet) \u3092\u30d9\u30fc\u30b9\u306b\u3001\u753b\u50cf\u5206\u985e\u3092\u884c\u3046 API \u30b5\u30fc\u30d0\u306e\u4f5c\u6210\u3092\u6700\u7d42\u76ee\u6a19\u3068\u3057\u307e\u3059\u3002\n\n\n# \u524d\u63d0\n\n\u672c\u8a18\u4e8b\u3067\u306f\u3001\u6b21\u306e\u74b0\u5883\u3067\u958b\u767a\u3092\u884c\u3044\u307e\u3057\u305f\u3002\n\n- Python 3.5\n- Chainer 1.19.0\n- Flask 0.11.1\n- OpenCV 3.1.0\n\n\n# \u753b\u50cf\u3092\u53ce\u96c6\u3059\u308b\n\n~~\u30c7\u30fc\u30bf\u53ce\u96c6\u304c\u3057\u3093\u3069\u304b\u3063\u305f\u306e\u3067\u3001~~ \u7c21\u5358\u5316\u306e\u305f\u3081\u306b\u300c\u72ac\u3001\u732b\u3001\u3046\u3055\u304e\u300d\u306e3\u7a2e\u985e\u306e\u52d5\u7269\u3092\u5206\u985e\u3059\u308b\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u3092\u69cb\u7bc9\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u307e\u305a\u306f\u753b\u50cf\u3092\u96c6\u3081\u308b\u3053\u3068\u304b\u3089\u59cb\u307e\u308a\u307e\u3059\u3002\u4eca\u56de\u306f\u4e0b\u8a18\u30b5\u30a4\u30c8\u304b\u3089\u52d5\u7269\u306e\u753b\u50cf\u3092\u96c6\u3081\u307e\u3057\u305f\u3002\n\n[Pixabay](https://pixabay.com/)\n\n\u53ce\u96c6\u3057\u305f\u753b\u50cf\u306f original \u30d5\u30a9\u30eb\u30c0\u306e\u4e2d\u306b\u3001\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u306e\u901a\u308a\u306e\u69cb\u6210\u3067\u683c\u7d0d\u3057\u307e\u3059\uff08\u5b9f\u969b\u306b\u306f\u3082\u3063\u3068\u5927\u91cf\u306e\u753b\u50cf\u3092\u96c6\u3081\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff09\u3002\n\n![imagenet-webapi-sample-1](https://qiita-image-store.s3.amazonaws.com/0/19511/2e8c98a7-b0d4-bdf9-22a2-b468e8b31989.png)\n\n\u307e\u305f\u3001\u4e0b\u8a18\u30d5\u30a1\u30a4\u30eb\u3067\u52d5\u7269\u3068\u30e9\u30d9\u30eb\u306e\u5bfe\u5fdc\u3092\u7ba1\u7406\u3057\u307e\u3059\u3002\u5404\u30af\u30e9\u30b9\u306b\u5bfe\u3057\u3066\u3001ID\uff08\u753b\u50cf\u3092\u683c\u7d0d\u3059\u308b\u30d5\u30a9\u30eb\u30c0\u540d\uff09\u3001\u30af\u30e9\u30b9\u306e\u8868\u793a\u540d\u3001\u30e9\u30d9\u30eb\uff08\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u306e\u51fa\u529b\u30d9\u30af\u30c8\u30eb\u306b\u304a\u3051\u308b index\uff09\u3092\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u3067\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\n```label_master.txt\n000_dog \u72ac 0\n001_cat \u732b 1\n002_rabit \u3046\u3055\u304e 2\n```\n\n\n# \u753b\u50cf\u306e\u524d\u51e6\u7406\u3092\u884c\u3046\n\nChainer \u306e imagenet \u3067\u306f\u3001256\u00d7256 \u306e\u753b\u50cf\u3092\u6271\u3046\u3053\u3068\u304c\u524d\u63d0\u3068\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u306a\u306e\u3067\u3001\u53ce\u96c6\u3057\u305f\u753b\u50cf\u3092\u30ea\u30b5\u30a4\u30ba\u3057\u307e\u3059\u3002\u307e\u305f\u3001imagenet \u3067\u5b66\u7fd2\u3092\u884c\u3046\u969b\u306b\u3001\u753b\u50cf\u306e\u30d1\u30b9\u3068\u305d\u306e\u753b\u50cf\u306e\u30e9\u30d9\u30eb\u3092\u8a18\u8ff0\u3057\u305f\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304c\u5fc5\u8981\u306b\u306a\u308b\u306e\u3067\u3001\u3053\u3053\u3067\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n```python:preprocess.py\n# coding: utf-8\n\nimport os\nimport shutil\nimport re\nimport random\n\nimport cv2\nimport numpy as np\n\n\nWIDTH = 256                             # \u30ea\u30b5\u30a4\u30ba\u5f8c\u306e\u5e45\nHEIGHT = 256                            # \u30ea\u30b5\u30a4\u30ba\u5f8c\u306e\u9ad8\u3055\n\nSRC_BASE_PATH = './original'            # \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u753b\u50cf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u30d9\u30fc\u30b9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\nDST_BASE_PATH = './resized'             # \u30ea\u30b5\u30a4\u30ba\u5f8c\u306e\u753b\u50cf\u3092\u683c\u7d0d\u3059\u308b\u30d9\u30fc\u30b9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n\nLABEL_MASTER_PATH = 'label_master.txt'  # \u30af\u30e9\u30b9\u3068\u30e9\u30d9\u30eb\u306e\u5bfe\u5fdc\u3092\u307e\u3068\u3081\u305f\u30d5\u30a1\u30a4\u30eb\nTRAIN_LABEL_PATH = 'train_label.txt'    # \u5b66\u7fd2\u7528\u306e\u30e9\u30d9\u30eb\u30d5\u30a1\u30a4\u30eb\nVAL_LABEL_PATH = 'val_label.txt'        # \u691c\u8a3c\u7528\u306e\u30e9\u30d9\u30eb\u30d5\u30a1\u30a4\u30eb\n\nVAL_RATE = 0.2                          # \u691c\u8a3c\u30c7\u30fc\u30bf\u306e\u5272\u5408\n\n\nif __name__ == '__main__':\n    with open(LABEL_MASTER_PATH, 'r') as f:\n        classes = [line.strip().split(' ') for line in f.readlines()]\n\n    # \u30ea\u30b5\u30a4\u30ba\u5f8c\u306e\u753b\u50cf\u306e\u683c\u7d0d\u5148\u3092\u521d\u671f\u5316\n    if os.path.exists(DST_BASE_PATH):\n        shutil.rmtree(DST_BASE_PATH)\n\n    os.mkdir(DST_BASE_PATH)\n\n    train_dataset = []\n    val_dataset = []\n\n    for c in classes:\n        os.mkdir(os.path.join(DST_BASE_PATH, c[0]))\n\n        class_dir_path = os.path.join(SRC_BASE_PATH, c[0])\n\n        # JPEG \u304b PNG \u753b\u50cf\u306e\u307f\u53d6\u5f97\n        files = [\n            file for file in os.listdir(class_dir_path)\n            if re.search(r'\\.(jpe?g|png)$', file, re.IGNORECASE)\n        ]\n\n        # \u30ea\u30b5\u30a4\u30ba\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u51fa\u529b\n        for file in files:\n            src_path = os.path.join(class_dir_path, file)\n            image = cv2.imread(src_path)\n            resized_image = cv2.resize(image, (WIDTH, HEIGHT))\n            cv2.imwrite(os.path.join(DST_BASE_PATH, c[0], file), resized_image)\n\n        # \u5b66\u7fd2\u30fb\u691c\u8a3c\u306e\u30e9\u30d9\u30eb\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\n        bound = int(len(files) * (1 - VAL_RATE))\n        random.shuffle(files)\n        train_files = files[:bound]\n        val_files = files[bound:]\n\n        train_dataset.extend([(os.path.join(c[0], file), c[2]) for file in train_files])\n        val_dataset.extend([(os.path.join(c[0], file), c[2]) for file in val_files])\n\n    # \u5b66\u7fd2\u7528\u30e9\u30d9\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\n    with open(TRAIN_LABEL_PATH, 'w') as f:\n        for d in train_dataset:\n            f.write(' '.join(d) + '\\n')\n\n    # \u691c\u8a3c\u7528\u30e9\u30d9\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\n    with open(VAL_LABEL_PATH, 'w') as f:\n        for d in val_dataset:\n            f.write(' '.join(d) + '\\n')\n```\n\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n```\n$ python preprocess.py\n```\n\n\u3046\u307e\u304f\u3044\u3051\u3070\u3001 resized \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4ee5\u4e0b\u306b 256\u00d7256 \u306b\u30ea\u30b5\u30a4\u30ba\u3055\u308c\u305f\u753b\u50cf\u3068\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30eb\u30fc\u30c8\u306b `train_label.txt`, `val_label.txt` \u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\n\n\u306a\u304a\u3001preprocess.py \u306e `VAL_RATE` \u306e\u5024\u3092\u3044\u3058\u308c\u3070\u3001\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u691c\u8a3c\u30c7\u30fc\u30bf\u306e\u6bd4\u7387\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\u4e0a\u8a18\u30b3\u30fc\u30c9\u3067\u306f\u3001`\u5b66\u7fd2 : \u691c\u8a3c = 8 : 2` \u306e\u6bd4\u7387\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\n\u753b\u50cf\u306e\u30ea\u30b5\u30a4\u30ba\u304c\u3067\u304d\u305f\u3089\u3001\u6b21\u306b\u5b66\u7fd2\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5e73\u5747\u753b\u50cf\u3092\u4f5c\u6210\u3057\u307e\u3059\uff08\u5165\u529b\u753b\u50cf\u304b\u3089\u5e73\u5747\u753b\u50cf\u3092\u5f15\u304f\u306e\u306f\u4e00\u7a2e\u306e\u6b63\u898f\u5316\u51e6\u7406\u3067\u3059\u3002\u305d\u306e\u305f\u3081\u306e\u5e73\u5747\u753b\u50cf\u3092\u3053\u3053\u3067\u4f5c\u6210\u3057\u307e\u3059\uff09\u3002\nChainer \u306e GitHub \u30ea\u30dd\u30b8\u30c8\u30ea\u306e imagenet \u306b\u3042\u308b compute_mean.py \u3092\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u5185\u306b\u7f6e\u304d\u3001\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n```\n$ python compute_mean.py train_label.txt -R ./resized/\n```\n\n\u5b9f\u884c\u5f8c\u3001mean.npy \u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\n![imagenet-webapi-sample-2](https://qiita-image-store.s3.amazonaws.com/0/19511/5f261869-46c0-ea48-0f45-403b3c45768e.png)\n\n\n# \u5b66\u7fd2\u3059\u308b\n\n\u30ea\u30b5\u30a4\u30ba\u5f8c\u306e\u753b\u50cf\u3092\u4f7f\u3063\u3066\u5b66\u7fd2\u3092\u884c\u3044\u307e\u3059\u3002\n\nimagenet \u3067\u306f\u3001\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u304c\u3044\u304f\u3064\u304b\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u4eca\u56de\u306f `GoogleNetBN` \u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\uff08\u6b21\u7bc0\u3067\u4e00\u90e8\u30b3\u30fc\u30c9\u306e\u6539\u826f\u3092\u884c\u3044\u307e\u3059\uff09\u3002imagenet \u304b\u3089 train_imagenet.py \u3068 googlenetbn.py \u3092\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u5185\u306b\u7f6e\u304d\u307e\u3059\u3002\n\n\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u5b66\u7fd2\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002 \u30a8\u30dd\u30c3\u30af\u6570 (`-E`) \u306b\u306f\u3001\u30c7\u30fc\u30bf\u91cf\u3084\u30bf\u30b9\u30af\u306b\u5fdc\u3058\u3066\u9069\u5207\u306a\u5024\u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u307e\u305f\u3001GPU ID (`-g`) \u3082\u74b0\u5883\u306b\u5408\u308f\u305b\u3066\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\uff08CPU \u3067\u5b66\u7fd2\u3059\u308b\u5834\u5408\u3001`-g` \u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\uff09\u3002\n\n```\n$ python train_imagenet.py -a googlenetbn -E 100 -g 0 -R ./resized/ ./train_label.txt ./val_label.txt --test\n```\n\n\u203b alex.py, googlenet.py, nin.py \u304c\u30ed\u30fc\u30ab\u30eb\u306b\u306a\u3044\u5834\u5408\u3001train_imagenet.py \u3092\u305d\u306e\u307e\u307e\u5b9f\u884c\u3059\u308b\u3068\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002\u306a\u306e\u3067\u3001\u3053\u308c\u3089\u306e\u30d5\u30a1\u30a4\u30eb\u3082\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u5185\u306b\u7f6e\u304f\u304b\u3001train_imagenet.py \u306e\u554f\u984c\u306e\u7b87\u6240\u3092\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u5f8c\u8005\u306e\u65b9\u6cd5\u306b\u95a2\u3057\u3066\u306f [\u3053\u3061\u3089](https://github.com/tanikawa04/imagenet-webapi-sample/blob/master/train_imagenet.py) \u306e\u30b3\u30fc\u30c9\u3092\u53c2\u7167\u3002\n\n\u5b66\u7fd2\u6e08\u307f\u306e\u30e2\u30c7\u30eb\u3084\u30ed\u30b0\u306f\u3001result \u30d5\u30a9\u30eb\u30c0\u306b\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002\n\n\n# imagenet \u306e\u30b3\u30fc\u30c9\u3092\u6539\u826f\u3059\u308b\n\n\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3092\u7528\u3044\u3066\u3001\u4efb\u610f\u306e\u753b\u50cf\u306e\u30af\u30e9\u30b9\u5206\u985e\uff08\u63a8\u5b9a\uff09\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002imagenet \u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u3001\u5b66\u7fd2\u30c7\u30fc\u30bf\u304a\u3088\u3073\u691c\u8a3c\u30c7\u30fc\u30bf\u7528\u306e\u30b3\u30fc\u30c9\u306e\u307f\u8a18\u8ff0\u3055\u308c\u3066\u304a\u308a\u3001\u63a8\u5b9a\u3092\u884c\u3046\u30b3\u30fc\u30c9\u3092\u8ffd\u52a0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u3068\u3044\u3063\u3066\u3082\u3001\u57fa\u672c\u7684\u306b\u306f `__call__()` \u306e\u51e6\u7406\u3092\u30d9\u30fc\u30b9\u306b\u3001loss \u5024\u3092\u8fd4\u3057\u3066\u3044\u308b\u7b87\u6240\u3092\u78ba\u7387\u5024\u306b\u5909\u3048\u308c\u3070\u826f\u3044\u3067\u3059\u3002\u65b0\u305f\u306b `predict()` \u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u6210\u3057\u3066\u3001\u3053\u306e\u51e6\u7406\u3092\u8a18\u8ff0\u3057\u3066\u307f\u307e\u3059\u3002\n\n\n```py3:googlenetbn.py(\u4e00\u90e8\u629c\u7c8b)\nclass GoogLeNetBN(chainer.Chain):\n\n\n    # --- (\u7701\u7565) ---\n\n\n    def predict(self, x):\n        test = True\n\n        h = F.max_pooling_2d(\n            F.relu(self.norm1(self.conv1(x), test=test)), 3, stride=2, pad=1)\n        h = F.max_pooling_2d(\n            F.relu(self.norm2(self.conv2(h), test=test)), 3, stride=2, pad=1)\n\n        h = self.inc3a(h)\n        h = self.inc3b(h)\n        h = self.inc3c(h)\n        h = self.inc4a(h)\n\n        # a = F.average_pooling_2d(h, 5, stride=3)\n        # a = F.relu(self.norma(self.conva(a), test=test))\n        # a = F.relu(self.norma2(self.lina(a), test=test))\n        # a = self.outa(a)\n        # a = F.softmax(a)\n\n        h = self.inc4b(h)\n        h = self.inc4c(h)\n        h = self.inc4d(h)\n\n        # b = F.average_pooling_2d(h, 5, stride=3)\n        # b = F.relu(self.normb(self.convb(b), test=test))\n        # b = F.relu(self.normb2(self.linb(b), test=test))\n        # b = self.outb(b)\n        # b = F.softmax(b)\n\n        h = self.inc4e(h)\n        h = self.inc5a(h)\n        h = F.average_pooling_2d(self.inc5b(h), 7)\n        h = self.out(h)\n\n        return F.softmax(h)\n```\n\n\u6539\u826f\u7248 googlenetbn.py \u306e\u5b8c\u5168\u306a\u30b3\u30fc\u30c9\u306f[\u3053\u3061\u3089](https://github.com/tanikawa04/imagenet-webapi-sample/blob/master/googlenetbn.py)\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3092\u898b\u308b\u3068\u3001`__call__()` \u306e\u51e6\u7406\u3068\u307b\u3068\u3093\u3069\u540c\u3058\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305f\u3060\u3057\u3001GoogleNet \u306b\u306f\u51fa\u529b\u304c3\u3064\uff08\u30e1\u30a4\u30f3\uff0b\u88dc\u52a92\u3064\uff09\u3042\u308a\u307e\u3059\u304c\u3001\u63a8\u5b9a\u6642\u306b\u306f\u88dc\u52a9\u306e2\u3064\u306e\u51fa\u529b\u306f\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\uff08\u3053\u306e\u88dc\u52a9\u5206\u985e\u5668\u306f\u3001\u5b66\u7fd2\u6642\u306e\u52fe\u914d\u6d88\u5931\u306e\u5bfe\u7b56\u3068\u3057\u3066\u5c0e\u5165\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3067\u3059\uff09[^1]\u3002\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u306e\u90e8\u5206\u304c\u305d\u306e\u7b87\u6240\u306b\u8a72\u5f53\u3057\u307e\u3059\u3002\n\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3001\u6700\u5f8c\u306b softmax \u95a2\u6570\u3092\u9069\u7528\u3057\u307e\u3059\u304c\u3001softmax \u3092\u7701\u7565\u3057\u3066 `return h` \u3068\u3057\u3066\u3082\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002\u30b9\u30b3\u30a2\u3092 0\u301c1 \u306e\u7bc4\u56f2\u306b\u6b63\u898f\u5316\u3059\u308b\u5fc5\u8981\u304c\u306a\u304f\u3001\u8a08\u7b97\u91cf\u3092\u3067\u304d\u308b\u3060\u3051\u6291\u3048\u305f\u3044\u5834\u5408\u306f\u3001\u7701\u7565\u3057\u305f\u65b9\u304c\u826f\u3044\u3067\u3059\u3002\n\n\u3053\u3053\u3067\u306f GoogleNetBN \u3092\u4f7f\u3044\u307e\u3057\u305f\u304c\u3001\u3082\u3061\u308d\u3093\u3001AlexNet \u306a\u3069 imagenet \u306e\u30b5\u30f3\u30d7\u30eb\u306b\u3042\u308b\u4ed6\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3082\u540c\u3058\u3088\u3046\u306b\u30b3\u30fc\u30c9\u3092\u6539\u826f\u3059\u308c\u3070 OK \u3067\u3059\u3002\u307e\u305f\u3001ResNet \u306a\u3069\u3092\u69cb\u7bc9\u3059\u308b\u306e\u3082\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n# Web API \u30b5\u30fc\u30d0\u3092\u4f5c\u308b\n\n\u6b21\u306b\u3001Web API \u30b5\u30fc\u30d0\u3092\u4f5c\u308a\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001Python \u306e Web \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af [Flask](http://flask.pocoo.org/) \u3092\u4f7f\u3063\u3066\u3001\u30b5\u30fc\u30d0\u3092\u69cb\u7bc9\u3057\u307e\u3059\u3002\n\n\u30a4\u30e1\u30fc\u30b8\u3068\u3057\u3066\u306f\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089 HTTP POST \u3067\u30b5\u30fc\u30d0\u306b\u753b\u50cf\u3092\u9001\u308b\u3068\u3001\u30b5\u30fc\u30d0\u5074\u3067\u753b\u50cf\u5206\u985e\u3092\u884c\u3044\u3001\u7d50\u679c\u3092 JSON \u3067\u8fd4\u3059\u3068\u3044\u3063\u305f\u51e6\u7406\u3092\u884c\u3046\u30b3\u30fc\u30c9\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\n```py3:server.py\n# coding: utf-8\n\nfrom __future__ import print_function\nfrom flask import Flask, request, jsonify\nimport argparse\n\nimport cv2\nimport numpy as np\nimport chainer\n\nimport googlenetbn                  # \u4ed6\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u4f7f\u3044\u305f\u3044\u5834\u5408\u306f\u3053\u3053\u3092\u66f8\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044\n\n\nWIDTH = 256                         # \u30ea\u30b5\u30a4\u30ba\u5f8c\u306e\u5e45\nHEIGHT = 256                        # \u30ea\u30b5\u30a4\u30ba\u5f8c\u306e\u9ad8\u3055\nLIMIT = 3                           # \u30af\u30e9\u30b9\u6570\n\nmodel = googlenetbn.GoogLeNetBN()   # \u4ed6\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u4f7f\u3044\u305f\u3044\u5834\u5408\u306f\u3053\u3053\u3092\u66f8\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044\n\napp = Flask(__name__)\n\n# JSON \u4e2d\u306e\u65e5\u672c\u8a9e\u3092 ASCII \u30b3\u30fc\u30c9\u306b\u5909\u63db\u3057\u306a\u3044\u3088\u3046\u306b\u3059\u308b (curl \u30b3\u30de\u30f3\u30c9\u3067\u898b\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u3002ASCII \u306b\u5909\u63db\u3057\u3066\u3082\u7279\u306b\u554f\u984c\u306a\u3044)\napp.config['JSON_AS_ASCII'] = False\n\n\n# train_imagenet.py PreprocessedDataset \u306e get_example() \u3092\u53c2\u8003\ndef preproduce(image, crop_size, mean):\n    # \u30ea\u30b5\u30a4\u30ba\n    image = cv2.resize(image, (WIDTH, HEIGHT))\n\n    # (height, width, channel) -> (channel, height, width) \u306b\u5909\u63db\n    image = image.transpose(2, 0, 1)\n\n    _, h, w = image.shape\n\n    top = (h - crop_size) // 2\n    left = (w - crop_size) // 2\n    bottom = top + crop_size\n    right = left + crop_size\n\n    image = image[:, top:bottom, left:right]\n    image -= mean[:, top:bottom, left:right]\n    image /= 255\n\n    return image\n\n\n@app.route('/')\ndef hello():\n    return 'Hello!'\n\n\n# \u753b\u50cf\u5206\u985e API\n# http://localhost:8090/predict \u306b\u753b\u50cf\u3092\u6295\u3052\u308b\u3068 JSON \u3067\u7d50\u679c\u304c\u8fd4\u308b\n@app.route('/predict', methods=['POST'])\ndef predict():\n    # \u753b\u50cf\u8aad\u307f\u8fbc\u307f\n    file = request.files['image']\n    image = cv2.imdecode(np.fromstring(file.stream.read(), np.uint8), cv2.IMREAD_COLOR)\n\n    # \u524d\u51e6\u7406\n    image = preproduce(image.astype(np.float32), model.insize, mean)\n\n    # \u63a8\u5b9a\n    p = model.predict(np.array([image]))[0].data\n    indexes = np.argsort(p)[::-1][:LIMIT]\n\n    # \u7d50\u679c\u3092 JSON \u306b\u3057\u3066\u8fd4\u3059\n    return jsonify({\n        'result': [[classes[index][1], float(p[index])] for index in indexes]\n    })\n\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--initmodel', type=str, default='',\n                        help='Initialize the model from given file')\n    parser.add_argument('--mean', '-m', default='mean.npy',\n                        help='Mean file (computed by compute_mean.py)')\n    parser.add_argument('--labelmaster', '-l', type=str, default='label_master.txt',\n                        help='Label master file')\n    parser.add_argument('--gpu', '-g', type=int, default=-1,\n                        help='GPU ID (negative value indicates CPU')\n    args = parser.parse_args()\n\n    mean = np.load(args.mean)\n    chainer.serializers.load_npz(args.initmodel, model)\n\n    with open(args.labelmaster, 'r') as f:\n        classes = [line.strip().split(' ') for line in f.readlines()]\n\n    if args.gpu >= 0:\n        chainer.cuda.get_device(args.gpu).use()\n        model.to_gpu()\n\n    app.run(host='0.0.0.0', port=8090)\n```\n\n\u5206\u985e\u7d50\u679c\u306e JSON \u306f\u6b21\u306e\u69cb\u9020\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u5185\u5074\u306e\u914d\u5217\u306f\u3001\u6700\u521d\u306e\u8981\u7d20\u304c\u30af\u30e9\u30b9\u540d\u3001\u6b21\u306e\u8981\u7d20\u304c\u30b9\u30b3\u30a2\u3067\u3059\u3002\u5404\u30af\u30e9\u30b9\u306f\u30b9\u30b3\u30a2\u304c\u9ad8\u3044\u9806\u306b\u30bd\u30fc\u30c8\u3055\u308c\u307e\u3059\u3002\n\n```json\n{\n  \"result\": [\n    [\n      \"\u72ac\",\n      0.4107133746147156\n    ], \n    [\n      \"\u3046\u3055\u304e\",\n      0.3368038833141327\n    ], \n    [\n      \"\u732b\",\n      0.2524118423461914\n    ]\n  ]\n}\n```\n\n\u307e\u305f\u3001\u5b9a\u6570 `LIMIT` \u3067\u3001\u4e0a\u4f4d\u4f55\u500b\u5206\u306e\u30af\u30e9\u30b9\u3092\u53d6\u5f97\u3059\u308b\u304b\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u4eca\u56de\u306f\u52d5\u7269\u304c3\u7a2e\u985e\u3057\u304b\u306a\u3044\u306e\u3067\u3001`LIMIT = 3` \u3068\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u4f8b\u3048\u3070\u3001\u30af\u30e9\u30b9\u304c\u5168\u4f53\u3067100\u7a2e\u985e\u3042\u308a\u3001\u305d\u306e\u3046\u3061\u4e0a\u4f4d10\u500b\u5206\u304c\u6b32\u3057\u3044\u5834\u5408\u306f `LIMIT = 10`\u30011\u4f4d\u3060\u3051\u3067\u826f\u3044\u5834\u5408\u306f `LIMIT = 1` \u3068\u3044\u3063\u305f\u3088\u3046\u306a\u6307\u5b9a\u304c\u53ef\u80fd\u3067\u3059\u3002\n\n\n\u30b3\u30fc\u30c9\u304c\u5b8c\u6210\u3057\u305f\u306e\u3067\u3001\u5b9f\u969b\u306b\u30b5\u30fc\u30d0\u3092\u7acb\u3061\u4e0a\u3052\u3066\u307f\u307e\u3059\u3002\n\n```\n$ python server.py --initmodel ./result/model_iter_120\n * Running on http://0.0.0.0:8090/ (Press CTRL+C to quit)\n```\n\n\u3053\u306e\u72b6\u614b\u3067\u3082\u30461\u3064\u5225\u306e\u30b7\u30a7\u30eb\u3092\u7528\u610f\u3057\u3001curl \u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3063\u3066\u30b5\u30fc\u30d0\u306b\u753b\u50cf\u3092\u9001\u3063\u3066\u307f\u307e\u3059\uff08\u30c6\u30b9\u30c8\u753b\u50cf\u306f\u9069\u5f53\u306b\u7528\u610f\u3057\u307e\u3059\uff09\u3002\u7d50\u679c\u304c\u8fd4\u3063\u3066\u304d\u305f\u3089\u6210\u529f\u3067\u3059\u3002\n\n```\n$ curl -X POST -F image=@test.jpg http://localhost:8090/predict\n{\n  \"result\": [\n    [\n      \"\u3046\u3055\u304e\", \n      0.4001327157020569\n    ], \n    [\n      \"\u732b\", \n      0.36795011162757874\n    ], \n    [\n      \"\u72ac\", \n      0.23191720247268677\n    ]\n  ]\n}\n```\n\n\u3053\u308c\u3067 API \u30b5\u30fc\u30d0\u306f\u5b8c\u6210\u3067\u3059\uff01\u3042\u3068\u306f\u3001\u81ea\u7531\u306b\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u3092\u4f5c\u6210\u3057\u3001API \u30b5\u30fc\u30d0\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u4ed5\u7d44\u307f\u3092\u5b9f\u88c5\u3059\u308c\u3070\u3001Web \u30b5\u30fc\u30d3\u30b9\u3068\u3057\u3066\u3082\u516c\u958b\u3067\u304d\u307e\u3059\u3002\n\n\n# \u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u3092\u4f5c\u308b\u306b\u306f\n\nTODO: \u5f8c\u65e5\u3001\u5225\u9014\u8a18\u4e8b\u3092\u4f5c\u6210\u3059\u308b\u4e88\u5b9a\u3067\u3059\u3002\n\n\n# \u304a\u308f\u308a\u306b\n\n\u672c\u8a18\u4e8b\u3067\u306f\u3001Chainer \u3092\u4f7f\u3063\u305f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u306e\u5b66\u7fd2\u65b9\u6cd5\u304b\u3089 Web API \u30b5\u30fc\u30d0\u306e\u4f5c\u6210\u306b\u3064\u3044\u3066\u3001\u4e00\u901a\u308a\u624b\u9806\u3092\u8ffd\u3063\u3066\u307f\u307e\u3057\u305f\uff08\u521d\u5fc3\u8005\u5bfe\u8c61\u3068\u8a00\u3044\u3064\u3064\u3001\u8aac\u660e\u304c\u9069\u5f53\u306a\u3068\u3053\u308d\u3082\u3042\u308a\u307e\u3057\u305f\u304c\u3001\u3053\u3053\u307e\u3067\u8aad\u3093\u3067\u3044\u305f\u3060\u304d\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\uff09\u3002\n\n\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3084\u7d30\u304b\u3044\u8abf\u6574\u306a\u3069\u3092\u8003\u616e\u3059\u308b\u3068\u3001\u3082\u3046\u5c11\u3057\u3057\u3063\u304b\u308a\u3068\u4f5c\u308a\u8fbc\u307e\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u304c\u3001\u3056\u3063\u304f\u308a\u3068\u306f\u3053\u3093\u306a\u611f\u3058\u3060\u3068\u601d\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u753b\u50cf\u306e\u51e6\u7406\u3082\u7d50\u69cb\u9069\u5f53\u306a\u65b9\u3060\u3068\u601d\u3046\u306e\u3067\u3001\u7cbe\u5ea6\u306e\u9762\u3067\u3082\u304b\u306a\u308a\u6539\u5584\u306e\u4f59\u5730\u306f\u3042\u308a\u307e\u3059\u3002\n\n\u307f\u306a\u3055\u3093\u3082 Chainer \u3092\u3069\u3093\u3069\u3093\u4f7f\u3063\u3066\u3001\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u306e\u30d7\u30ed\u30c0\u30af\u30c8\u3092\u4f5c\u3063\u3066\u3044\u304d\u307e\u3057\u3087\u3046\uff01\n\n\n[\u672c\u8a18\u4e8b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9](https://github.com/tanikawa04/imagenet-webapi-sample)\n\n\n[^1]: [Christian Szegedy, et al. \"Going Deeper with Convolutions\", 2015](https://www.cs.unc.edu/~wliu/papers/GoogLeNet.pdf)\n", "tags": ["Chainer", "Flask", "Python", "DeepLearning"]}