{"context": " More than 1 year has passed since last update.\u554f\u984c : http://d.hatena.ne.jp/torazuka/20140509/yhpg\n\u4ed6\u306e\u5b9f\u88c5\u3078\u306e\u30ea\u30f3\u30af : http://qiita.com/torazuka/items/cbdb6b581a57e4754dd4\n\u30a4\u30d9\u30f3\u30c8 : http://yhpg.doorkeeper.jp/events/10503\n\u5f53\u65e5\u6642\u9593\u304c\u3042\u308c\u3070\u66f8\u304d\u305f\u304b\u3063\u305f groovy\u3002\n// tested with Groovy Version: 2.3.0 JVM: 1.7.0_07 Vendor: Oracle Corporation OS: Mac OS X\n\ndef solve_impl( src )\n{\n  fixed=new HashSet()\n  (0..<5).inject( [:] ){ acc,pri->\n    src.each{\n      (num,w)=it\n      key=w[pri]\n      att=( acc[key]=acc[key] ?: [] )\n      if ( ! fixed.contains(num) && att.size<4 ){\n        att.push( num )\n        fixed.add(num)\n      }\n    }\n    acc\n  }\n}\n\ndef format( r )\n{\n  r.keySet().findAll{ r[it] && ! r[it].isEmpty() }.sort().collect{\n    [it, r[it].sort().join(\":\")].join(\"_\")\n  }.join(\"|\")\n}\n\ndef parse( src ){\n  src.split(/\\|/).collect{\n    (a,b)=it.split(\"_\")\n    [a as Integer, b ]\n  }\n}\n\ndef solve(src){\n  format( solve_impl( parse( src ) ) )\n}\n\ndef test( src, expected )\n{\n  actual = solve( src )\n  if ( actual == expected ){\n    println \"ok\"\n  } else {\n    printf( \"%s->%s / %s\\n\", src, actual, expected )\n  }\n}\n\n/*0*/ test( \"1_12345\", \"1_1\" );\n/*1*/ test( \"30_32451\", \"3_30\" );\n\n\u3044\u3064\u3082\u901a\u308a\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u306f\u7701\u7565\u3002\nruby\u7248( http://qiita.com/Nabetani/items/7d7c46438339b730cc4b )\u3092\u305d\u306e\u307e\u307e\u79fb\u690d\u3057\u305f\u3002\n\u521d\u671f\u5024\u4ed8\u304d HashMap \u304c\u306a\u3044\uff08\u3068\u601d\u3046\u3093\u3060\u3051\u3069\u3001\u3069\u3046\u3060\u308d\u3046\uff09\u304b\u3089 ||= \u3092\u4f7f\u304a\u3046\u3068\u601d\u3063\u305f\u3089\u305d\u308c\u3082\u306a\u304f\u3001\u4ed5\u65b9\u306a\u3044\u306e\u3067 if \u6587\u3092\u66f8\u3044\u3066\u3057\u307e\u3063\u305f\u3002\n\u306a\u3093\u304b\u6b8b\u5ff5\u3002\u3060\u3063\u305f\u3093\u3060\u3051\u3069\u3001\u30a8\u30eb\u30d3\u30b9\u6f14\u7b97\u5b50( ?: )\u3092\u4f7f\u3046\u6a5f\u4f1a\u304c\u5f97\u3089\u308c\u305f\u306e\u3067\u3088\u3057\u3068\u3057\u3088\u3046\u304b\u3002\n\n\u554f\u984c : http://d.hatena.ne.jp/torazuka/20140509/yhpg\n\u4ed6\u306e\u5b9f\u88c5\u3078\u306e\u30ea\u30f3\u30af : http://qiita.com/torazuka/items/cbdb6b581a57e4754dd4\n\u30a4\u30d9\u30f3\u30c8 : http://yhpg.doorkeeper.jp/events/10503\n\n\u5f53\u65e5\u6642\u9593\u304c\u3042\u308c\u3070\u66f8\u304d\u305f\u304b\u3063\u305f groovy\u3002\n\n```groovy\n// tested with Groovy Version: 2.3.0 JVM: 1.7.0_07 Vendor: Oracle Corporation OS: Mac OS X\n\ndef solve_impl( src )\n{\n  fixed=new HashSet()\n  (0..<5).inject( [:] ){ acc,pri->\n    src.each{\n      (num,w)=it\n      key=w[pri]\n      att=( acc[key]=acc[key] ?: [] )\n      if ( ! fixed.contains(num) && att.size<4 ){\n        att.push( num )\n        fixed.add(num)\n      }\n    }\n    acc\n  }\n}\n\ndef format( r )\n{\n  r.keySet().findAll{ r[it] && ! r[it].isEmpty() }.sort().collect{\n    [it, r[it].sort().join(\":\")].join(\"_\")\n  }.join(\"|\")\n}\n\ndef parse( src ){\n  src.split(/\\|/).collect{\n    (a,b)=it.split(\"_\")\n    [a as Integer, b ]\n  }\n}\n\ndef solve(src){\n  format( solve_impl( parse( src ) ) )\n}\n\ndef test( src, expected )\n{\n  actual = solve( src )\n  if ( actual == expected ){\n    println \"ok\"\n  } else {\n    printf( \"%s->%s / %s\\n\", src, actual, expected )\n  }\n}\n\n/*0*/ test( \"1_12345\", \"1_1\" );\n/*1*/ test( \"30_32451\", \"3_30\" );\n```\n\n\u3044\u3064\u3082\u901a\u308a\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u306f\u7701\u7565\u3002\n\nruby\u7248( http://qiita.com/Nabetani/items/7d7c46438339b730cc4b )\u3092\u305d\u306e\u307e\u307e\u79fb\u690d\u3057\u305f\u3002\n\n\u521d\u671f\u5024\u4ed8\u304d HashMap \u304c\u306a\u3044\uff08\u3068\u601d\u3046\u3093\u3060\u3051\u3069\u3001\u3069\u3046\u3060\u308d\u3046\uff09\u304b\u3089 `||=` \u3092\u4f7f\u304a\u3046\u3068\u601d\u3063\u305f\u3089\u305d\u308c\u3082\u306a\u304f\u3001\u4ed5\u65b9\u306a\u3044\u306e\u3067 if \u6587\u3092\u66f8\u3044\u3066\u3057\u307e\u3063\u305f\u3002\n\u306a\u3093\u304b\u6b8b\u5ff5\u3002\u3060\u3063\u305f\u3093\u3060\u3051\u3069\u3001\u30a8\u30eb\u30d3\u30b9\u6f14\u7b97\u5b50( `?:` )\u3092\u4f7f\u3046\u6a5f\u4f1a\u304c\u5f97\u3089\u308c\u305f\u306e\u3067\u3088\u3057\u3068\u3057\u3088\u3046\u304b\u3002\n", "tags": ["yhpg", "\u3069\u3046\u66f8\u304f", "Groovy"]}