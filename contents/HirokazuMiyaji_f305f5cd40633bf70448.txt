{"context": " More than 1 year has passed since last update.\u30e6\u30fc\u30b6\u306e\u6700\u7d42\u30a2\u30af\u30bb\u30b9\u6642\u523b\u3092DB\u3067\u8a18\u9332\u3057\u3066\u3044\u305f\u3051\u3069\u3001\u983b\u7e41\u306b\u66f4\u65b0\u3057\u305f\u3044\u3051\u3069DB\u3060\u3068\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u306b\u306a\u308b\u306e\u3067\u3001redis\u3067\u7f6e\u304d\u63db\u3048\u305f\u30b3\u30fc\u30c9\u3002\n\n\u5229\u70b9\n\nzscore\u3067\u8a18\u9332\u3059\u308b\u3053\u3068\u3067\u3001\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u8ab0\u304c\u30a2\u30af\u30bb\u30b9\u3057\u305f\u304b\u304c\u5206\u304b\u308b(fluent\u3068\u304b\u3067\u30ed\u30b0\u306f\u3044\u3066\u3082\u78ba\u8a8d\u3067\u304d\u308b\u3051\u3069)\u3002\nzrangebyscore\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u6700\u7d42\u30b5\u30af\u30bb\u30b9\u65e5\u304c\u73fe\u5728\u3088\u308a24\u6642\u9593\u4ee5\u5185\u306e\u30e6\u30fc\u30b6\u4e00\u89a7\u304c\u51fa\u305b\u308b\u3002\n\n\nlastaccess.py\nfrom datetime import datetime\n\nimport pytz\nimport redis\n\n\nclass UserLastAccess(object):\n\n    def __init__(self, user_id):\n        self._user_id = user_id\n        self._client = redis.StrictRedis()\n        self._key = self.__class__.__name__\n\n    @property\n    def accessed_at(self):\n        timestamp = self._client.zscore(self._key, self._user_id)\n        if timestamp:\n            d = datetime.fromtimestamp(int(timestamp))\n            return pytz.timezone('Asia/Tokyo').normalize(pytz.utc.localize(d))\n\n        return None\n\n    def touch(self):\n        now = pytz.utc.localize(datetime.utcnow())\n        timestamp = now.strftime('%s')\n\n        self._client.zadd(self._key, timestamp, self._user_id)\n\n        return pytz.timezone('Asia/Tokyo').normalize(now)\n\n\nclass LastAccessedAtMixin(object):\n\n    @property\n    def user_last_access(self):\n        return UserLastAccess(self.id)\n\n    @property\n    def last_accessed_at(self):\n        return self.user_last_access.accessed_at\n\n    def touch(self):\n        return self.user_last_access.touch()\n\n\nclass User(LastAccessedAtMixin):\n\n    def __init__(self, user_id):\n        self.id = user_id\n\n\n\u4f7f\u7528\u4f8b\n\nex\nuser = User('1000')\nuser.touch()  # => datetime.datetime(2014, 10, 6, 21, 55, 27, 654918, tzinfo=<DstTzInfo 'Asia/Tokyo' JST+9:00:00 STD>)\nuser.last_accessed_at  # => datetime.datetime(2014, 10, 6, 21, 55, 27, tzinfo=<DstTzInfo 'Asia/Tokyo' JST+9:00:00 STD>)\n\n\n\n\u30e6\u30fc\u30b6\u306e\u6700\u7d42\u30a2\u30af\u30bb\u30b9\u6642\u523b\u3092DB\u3067\u8a18\u9332\u3057\u3066\u3044\u305f\u3051\u3069\u3001\u983b\u7e41\u306b\u66f4\u65b0\u3057\u305f\u3044\u3051\u3069DB\u3060\u3068\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u306b\u306a\u308b\u306e\u3067\u3001redis\u3067\u7f6e\u304d\u63db\u3048\u305f\u30b3\u30fc\u30c9\u3002\n\n## \u5229\u70b9\n * zscore\u3067\u8a18\u9332\u3059\u308b\u3053\u3068\u3067\u3001\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u8ab0\u304c\u30a2\u30af\u30bb\u30b9\u3057\u305f\u304b\u304c\u5206\u304b\u308b(fluent\u3068\u304b\u3067\u30ed\u30b0\u306f\u3044\u3066\u3082\u78ba\u8a8d\u3067\u304d\u308b\u3051\u3069)\u3002\n * zrangebyscore\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u6700\u7d42\u30b5\u30af\u30bb\u30b9\u65e5\u304c\u73fe\u5728\u3088\u308a24\u6642\u9593\u4ee5\u5185\u306e\u30e6\u30fc\u30b6\u4e00\u89a7\u304c\u51fa\u305b\u308b\u3002\n\n\n```python:lastaccess.py\nfrom datetime import datetime\n\nimport pytz\nimport redis\n\n\nclass UserLastAccess(object):\n\n    def __init__(self, user_id):\n        self._user_id = user_id\n        self._client = redis.StrictRedis()\n        self._key = self.__class__.__name__\n\n    @property\n    def accessed_at(self):\n        timestamp = self._client.zscore(self._key, self._user_id)\n        if timestamp:\n            d = datetime.fromtimestamp(int(timestamp))\n            return pytz.timezone('Asia/Tokyo').normalize(pytz.utc.localize(d))\n\n        return None\n\n    def touch(self):\n        now = pytz.utc.localize(datetime.utcnow())\n        timestamp = now.strftime('%s')\n\n        self._client.zadd(self._key, timestamp, self._user_id)\n\n        return pytz.timezone('Asia/Tokyo').normalize(now)\n\n\nclass LastAccessedAtMixin(object):\n\n    @property\n    def user_last_access(self):\n        return UserLastAccess(self.id)\n\n    @property\n    def last_accessed_at(self):\n        return self.user_last_access.accessed_at\n\n    def touch(self):\n        return self.user_last_access.touch()\n\n\nclass User(LastAccessedAtMixin):\n\n    def __init__(self, user_id):\n        self.id = user_id\n```\n\n\u4f7f\u7528\u4f8b\n\n```python:ex\nuser = User('1000')\nuser.touch()  # => datetime.datetime(2014, 10, 6, 21, 55, 27, 654918, tzinfo=<DstTzInfo 'Asia/Tokyo' JST+9:00:00 STD>)\nuser.last_accessed_at  # => datetime.datetime(2014, 10, 6, 21, 55, 27, tzinfo=<DstTzInfo 'Asia/Tokyo' JST+9:00:00 STD>)\n```\n", "tags": ["Redis", "Python"]}