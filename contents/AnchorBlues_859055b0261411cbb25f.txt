{"context": "\n\n1. Introduction\n\u30a2\u30e1\u30ea\u30ab\u5408\u8846\u56fd\u306e\u30b9\u30dd\u30fc\u30c4\u30e9\u30a4\u30bf\u30fc\u3067\u3042\u308a\u3001\u91ce\u7403\u306e\u30bb\u30a4\u30d0\u30fc\u30e1\u30c8\u30ea\u30af\u30b9\u306e\u5148\u99c6\u8005\u3067\u3042\u308b\u30d3\u30eb\u30fb\u30b8\u30a7\u30fc\u30e0\u30ba\u306f\u3001\u30c1\u30fc\u30e0\u306e\u5f97\u70b9\u6570\u3092\u4e88\u6e2c\u3059\u308b\u6570\u5f0f\u3092\u4f5c\u308a\u51fa\u3057\u305f\u3002\n\u5f97\u70b9\u6570=(\u5b89\u6253\u6570+\u56db\u7403\u6570)\u00d7\u5841\u6253\u6570\u00f7(\u6253\u6570+\u56db\u7403\u6570)\u5f97\u70b9\u6570=(\u5b89\u6253\u6570+\u56db\u7403\u6570)\u00d7\u5841\u6253\u6570\u00f7(\u6253\u6570+\u56db\u7403\u6570){\u5f97\u70b9\u6570 =  (\u5b89\u6253\u6570+\u56db\u7403\u6570) \u00d7 \u5841\u6253\u6570 \u00f7 (\u6253\u6570+\u56db\u7403\u6570)\n}\n\u3053\u306e\u6570\u5f0f\u306b\u3088\u3063\u3066\u898b\u7a4d\u3082\u3089\u308c\u308b\u5f97\u70b9\u6570\u306f\u3001RC(Runs Created)\u3068\u540d\u3065\u3051\u3089\u308c\u305f\u3002\n\u30b8\u30a7\u30fc\u30e0\u30ba\u306f\u3053\u306e\u5f0f\u306e\u53f3\u8fba\u306b\u8272\u3005\u306aMLB\u30c1\u30fc\u30e0\u306e\u904e\u53bb\u306e\u30b7\u30fc\u30ba\u30f3\u8a18\u9332\u3092\u4ee3\u5165\u3057\u3066\u3001\u5b9f\u969b\u306e\u5f97\u70b9\u6570\u3068\u5408\u3046\u306e\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3057\u305f\u3002\u305d\u306e\u7d50\u679c\u3001\u3053\u306e\u6570\u5f0f\u306f\u3069\u306e\u30c1\u30fc\u30e0\u306b\u5f53\u3066\u306f\u3081\u3066\u3082\u6709\u52b9\u3067\u3042\u308a\u3001\u6975\u3081\u3066\u7cbe\u5ea6\u826f\u304f\u5f97\u70b9\u6570\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u305f\u3002\n\u3057\u304b\u3057\u4e00\u3064\u306e\u7591\u554f\u304c\u3042\u308b\u3002\n\n\u30b8\u30a7\u30fc\u30e0\u30ba\u304c\u3053\u306e\u516c\u5f0f\u306e\u7cbe\u5ea6\u3092\u691c\u8a3c\u3059\u308b\u969b\u306b\u7528\u3044\u305f\u306e\u306fMLB\u306e\u30c7\u30fc\u30bf\u3060\u3063\u305f\u3002NPB\u306e\u30c1\u30fc\u30e0\u306b\u95a2\u3057\u3066\u3082\u3001\u3053\u306e\u6570\u5f0f\u3092\u7528\u3044\u3066\u5f97\u70b9\u6570\u3092\u7cbe\u5ea6\u826f\u304f\u4e88\u6e2c\u3059\u308b\u3053\u3068\u306f\u51fa\u6765\u308b\u306e\u3060\u308d\u3046\u304b\uff1f\n\n\u305d\u3053\u3067\u4eca\u56de\u306f\u3001\u5b9f\u969b\u306eNPB\u306e\u30c1\u30fc\u30e0\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u3001\u3053\u306e\u5f97\u70b9\u516c\u5f0fRC\u306e\u7cbe\u5ea6\u306e\u691c\u8a3c\u3092\u884c\u3063\u305f\u3002\n\n2. Data and Program\n\n2.1. Data\n\u7528\u3044\u305f\u30c7\u30fc\u30bf\u306f\u30012005\u5e74\u301c2016\u5e74\u306e\u3001\u65e5\u672c\u30d7\u30ed\u91ce\u7403(NPB)\u306e12\u7403\u56e3\u306e\u30b7\u30fc\u30ba\u30f3\u6210\u7e3e\u3067\u3042\u308b\u3002\n\u30c7\u30fc\u30bf\u306f\u65e5\u672c\u91ce\u7403\u6a5f\u69cb\u306e\u30db\u30fc\u30e0\u30da\u30fc\u30b8\nhttp://npb.jp/\n\u304b\u3089\u5f97\u305f\u3002\n\u4f8b\u3048\u30702016\u5e74\u30bb\u30fb\u30ea\u30fc\u30b0\u306e\u30b7\u30fc\u30ba\u30f3\u6210\u7e3e\u306f\u3001\nhttp://npb.jp/bis/2016/stats/tmb_c.html\n\u304b\u3089\u53d6\u5f97\u3057\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u52a0\u5de5\u3057\u3066\u4fdd\u5b58\u3057\u305f\u3002\n\n2016C_bat.csv\nCarp, .272, 143, 5582, 4914, 684, 1338, 203, 35, 153, 2070, 649, 118, 52, 91, 29, 500, 13, 47, 1063, 85, .421, .343\nYakult, .256, 143, 5509, 4828, 594, 1234, 210, 20, 113, 1823, 565, 82, 24, 85, 33, 524, 10, 39, 907, 117, .378, .331\nGiants, .251, 143, 5356, 4797, 519, 1203, 217, 19, 128, 1842, 497, 62, 26, 112, 23, 389, 11, 35, 961, 100, .384, .310\nDeNA, .249, 143, 5364, 4838, 572, 1205, 194, 21, 140, 1861, 548, 67, 34, 81, 18, 373, 7, 54, 1049, 92, .385, .309\nDragons, .245, 143, 5405, 4813, 500, 1180, 209, 21, 89, 1698, 473, 60, 28, 108, 28, 410, 7, 46, 1001, 103, .353, .309\nTigers, .245, 143, 5401, 4789, 506, 1171, 204, 17, 90, 1679, 475, 59, 25, 88, 38, 435, 17, 51, 1149, 99, .351, .312\n\n\n(\u306a\u304a\u3001\u30c7\u30fc\u30bf\u306f\nhttps://github.com/AnchorBlues/python/tree/master/baseballdata\n\u306b\u52a0\u5de5\u3057\u305f\u72b6\u614b\u306e\u3082\u306e\u3092\u7f6e\u3044\u3066\u3044\u308b)\n\n2.2. Program\n\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u3001\u89e3\u6790\u3001\u53ca\u3073\u53ef\u8996\u5316\u306b\u306f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306ePython\u3092\u7528\u3044\u305f\u3002\n\nNPB.py\n#coding:utf - 8\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\nfy = 2005\nly = 2016\nYn = ly - fy + 1\n\nBat_Column = ['Average', 'Game', 'PA', 'AB', 'Score', 'Hit', \\\n              'TwoBase', 'ThreeBase', 'HR', 'TB', 'RBI', 'Steel', \\\n              'MissSteal', 'Bunt', 'SF', 'BB', 'IntentionalWalk', \\\n              'DeadBall', 'StrikeOut', 'DoublePlay', 'SLG', 'OBP']\n\n# PA : Plate Appearance \u6253\u5e2d\u6570\n# AB : At Bat \u6253\u6570\n# TB : Total Bases \u5841\u6253\u6570\n# RBI : \u6253\u70b9\n# SF : Sacrifice Fly \u72a0\u7272\u30d5\u30e9\u30a4\n# IntentionalWalk : \u6545\u610f\u56db\u7403\n\nN = len(Bat_Column)\n\nclass Bat_Data():\n    def __init__(self, Data, Year, Team):\n        self.Year = Year\n        self.Team = Team\n        for i in range(0, N):\n            setattr(self, Bat_Column[i], Data[:, i])\n\n        self.OPS = self.SLG + self.OBP\n        self.NOI = (self.SLG / 3.0 + self.OBP) * 1000\n        self.BABIP = (self.Hit - self.HR) / (self.AB + self.SF - self.HR - self.StrikeOut)\n        self.RC = (self.Hit + self.BB) * self.TB / (self.AB + self.BB)\n        self.IsoP = self.SLG - self.Average\n        self.IsoD = self.OBP - self.Average\n\n\n\nclass TEAM:\n    def __init__(self, ID, Name, maker):\n        self.ID = ID\n        self.Name = Name\n        self.maker = maker\n\n\nteam = [0] * 12\nteam[0] = TEAM(0, 'Carp', '>')\nteam[1] = TEAM(1, 'Tigers', '<')\nteam[2]= TEAM(2, 'Giants', '^')\nteam[3] = TEAM(3, 'Dragons', 'v')\nteam[4] = TEAM(4, 'DeNA', 'd')\nteam[5] = TEAM(5, 'Yakult', 'D')\nteam[6] = TEAM(6, 'Fighters', '8')\nteam[7] = TEAM(7, 'Lotte', 'H')\nteam[8] = TEAM(8, 'Lions', 'h')\nteam[9] = TEAM(9, 'Eagles', '*')\nteam[10] = TEAM(10, 'Orix', 'p')\nteam[11] = TEAM(11, 'Hawks', 's')\n\n\n# 2\u3064\u306eBat_Data\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30921\u3064\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u7d71\u5408\u3059\u308b\ndef Docking(Data1, Data2):\n\n    data = np.zeros((Data1.Average.shape[0] + Data2.Average.shape[0], N))\n    for i in range(0, N):\n        data[:, i] = np.r_[getattr(Data1, Bat_Column[i]), getattr(Data2, Bat_Column[i])]\n\n    year = np.r_[Data1.Year, Data2.Year]\n    team = np.r_[Data1.Team, Data2.Team]\n    Data_new = Bat_Data(data, year, team)\n    return Data_new\n\n\ndef get_data(League, year):\n    fname = './baseballdata/' + str(year) + League + '_bat.csv'\n    Data = np.loadtxt(fname, delimiter = ',', usecols = range(1, N + 1))\n    Year = np.ones(6) * year\n    Team = np.loadtxt(fname, delimiter = ',', usecols = range(0, 1), dtype = str)\n    Data = Bat_Data(Data, Year, Team)\n    return Data\n\n\ndef get_all_data(League):\n    for i in range(Yn):\n        year = i + fy\n        tmp = get_data(League, year)\n        if i == 0:\n            Data = tmp\n        else:\n            Data = Docking(Data, tmp)\n\n    return Data\n\n# Data.Column_name\u306e\u4e2d\u304b\u3089\u3001\u30c1\u30fc\u30e0\u540d\u304cTeam_name\u306e\u3082\u306e\u3060\u3051\u3092\u53d6\u308a\u51fa\u3059\u3002\ndef PickUp_Data_of_a_team(Data, Column_name, Team_name):\n    return getattr(Data, Column_name)[np.where(getattr(Data, 'Team') == Team_name)]\n\n\ndef draw_scatter(plt, Data, X_name, Y_name, regression_flg = 0, Y_eq_X_line_flg = 0, \\\n                 title = 'Scatter plot', fsizex = 10, fsizey = 8):\n\n    fig, ax = plt.subplots(figsize = (fsizex, fsizey))\n    plt.rcParams['font.size'] = 16\n\n    for i in range(0, len(team)):\n        x = PickUp_Data_of_a_team(Data, X_name, team[i].Name)\n        y = PickUp_Data_of_a_team(Data, Y_name, team[i].Name)\n        year = PickUp_Data_of_a_team(Data, 'Year', team[i].Name)\n        if x != np.array([]):\n            CF = ax.scatter(x, y, c = year, s = 50, marker = team[i].maker, \\\n                            label = team[i].Name, vmin = fy, vmax = ly)\n\n        if i == 0:\n            X = x\n            Y = y\n        else:\n            X = np.r_[X, x]\n            Y = np.r_[Y, y]\n\n    plt.colorbar(CF, ticks = list(np.arange(fy, ly + 1)), label = 'year')\n    plt.legend(bbox_to_anchor = (1.35, 1), loc = 2, borderaxespad = 0., scatterpoints = 1)\n    ax.set_title(title)\n    ax.set_xlabel(X_name)\n    ax.set_ylabel(Y_name)\n\n    # \u56de\u5e30\u76f4\u7dda\u3092\u5f15\u304f\n    if regression_flg == 1:\n        slope, intercept, r_value, _, _ = stats.linregress(X, Y)\n        xx = np.arange(450, 750, 1)\n        yy = slope * xx + intercept\n        ax.plot(xx, yy, linewidth = 2)\n\n    # y=x\u306e\u76f4\u7dda\u3092\u5f15\u304f\n    if Y_eq_X_line_flg == 1:\n        xx = np.arange(450, 750, 1)\n        yy_d = xx\n        ax.plot(xx, yy_d, color = 'k')\n\n    print 'Correlation=', np.corrcoef(X, Y)[0, 1]\n    return plt\n\n\n\u4f8b\u3048\u3070\u30012016\u5e74\u30bb\u30fb\u30ea\u30fc\u30b0\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3057\u305f\u3044\u3068\u304d\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3059\u308b\u3002\nIn [1]:import NPB\nIn [2]:Data_2016C=NPB.get_data('C',2016)   #\u30d1\u30fb\u30ea\u30fc\u30b0\u306b\u3057\u305f\u3044\u3068\u304d\u306b\u306f'C'\u3092'P'\u306b\u3002\nIn [3]:Data_2016C.Average  #2016\u5e74\u30bb\u30fb\u30ea\u30fc\u30b0\u306e\u30016\u30c1\u30fc\u30e0\u305d\u308c\u305e\u308c\u306e\u30c1\u30fc\u30e0\u6253\u7387\u3092\u51fa\u529b\n\nOut[3]: array([ 0.272,  0.256,  0.251,  0.249,  0.245,  0.245])\n\n\n3. Result\n\n3.1. Average vs Score\n\u307e\u305a\u306f\u3001\u6700\u3082\u4e00\u822c\u7684\u306a\u6253\u6483\u6307\u6a19\u3067\u3042\u308b\u300c\u6253\u7387\u300d\u3068\u3001\u5f97\u70b9\u6570\u3068\u306e\u76f8\u95a2\u3092\u898b\u3066\u307f\u308b\u3002\n2005\u301c2016\u5e74\u306e12\u7403\u56e3\u5168\u3066\u306e\u30c1\u30fc\u30e0\u30c7\u30fc\u30bf(\u5168\u90e8\u3067144\u30b5\u30f3\u30d7\u30eb)\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3057\u3066\u3001\u6a2a\u8ef8\u306b\u300c\u6253\u7387(Average)\u300d\u3001\u7e26\u8ef8\u306b\u300c\u5f97\u70b9\u6570(Score)\u300d\u3092\u53d6\u3063\u3066\u6563\u5e03\u56f3\u3092\u63cf\u3044\u3066\u307f\u308b\u3002\nIn [1]:import matplotlib.pyplot as plt\nIn [2]:Data_C=NPB.get_all_data('C')   #\u30bb\u30fb\u30ea\u30fc\u30b0\u306e\u5168\u3066\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\nIn [3]:Data_P=NPB.get_all_data('P')   #\u30d1\u30fb\u30ea\u30fc\u30b0\u306e\u5168\u3066\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\nIn [4]:Data=NPB.Docking(Data_C,Data_P) #\u4e21\u30ea\u30fc\u30b0\u306e\u30c7\u30fc\u30bf\u3092\u7d71\u5408\nIn [5]:plt=NPB.draw_scatter(plt,Data,'Average','Score') #\u6253\u7387\u3068\u5f97\u70b9\u306e\u6563\u5e03\u56f3\u3092\u63cf\u304f\nIn [6]:plt.show()\n\n\u51fa\u529b\u3055\u308c\u305f\u56f3\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\n\u307e\u305f\u3001\u76f8\u95a2\u4fc2\u6570\u306f\u3001\nCorrelation= 0.825987845723\n\u3068\u3044\u3046\u7d50\u679c\u306b\u306a\u3063\u305f\u3002\n\n3.2. RC vs Score\n3.1. \u3068\u540c\u3058\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u3001\u4eca\u5ea6\u306f\u6a2a\u8ef8\u306b\u300cRC\u300d\u3001\u7e26\u8ef8\u306b\u300c\u5f97\u70b9\u6570(Score)\u300d\u3092\u53d6\u3063\u3066\u6563\u5e03\u56f3\u3092\u63cf\u3044\u3066\u307f\u308b\u3002\nIn [7]:plt=NPB.draw_scatter(plt,Data,'RC','Score',regression_flg=1,Y_eq_X_line_flg=1) #RC\u3068\u5f97\u70b9\u306e\u6563\u5e03\u56f3\u3092\u63cf\u304f\u3002\u3055\u3089\u306b\u305d\u306e\u56de\u5e30\u76f4\u7dda\u3068\u3001y=x\u306e\u76f4\u7dda\u3092\u5f15\u304f\u3002\nIn [8]:plt.show()\n\n\u51fa\u529b\u3055\u308c\u305f\u56f3\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\n\u307e\u305f\u3001\u76f8\u95a2\u4fc2\u6570\u306f\u3001\nCorrelation= 0.953524104544\n\u3068\u3044\u3046\u7d50\u679c\u306b\u306a\u3063\u305f\u3002\n\u76f8\u95a2\u4fc2\u6570\u306e\u5024\u304b\u3089\u3082\u3001RC\u3068\u5f97\u70b9\u6570\u306e\u9593\u306b\u306f\u6975\u3081\u3066\u5f37\u3044\u76f8\u95a2\u304c\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u304c\u5206\u304b\u308b\u3002\n\u66f4\u306b\u3001\u305d\u306e\u56de\u5e30\u76f4\u7dda(\u4e0a\u56f3\u306e\u9752\u7dda)\u306f\u3001\u300cy=x\u300d\u306e\u76f4\u7dda(\u4e0a\u56f3\u306e\u9ed2\u7dda)\u3068\u975e\u5e38\u306b\u8fd1\u3044\u3082\u306e\u3068\u306a\u3063\u305f\u3002\n(\u306a\u304a\u3001\u56de\u5e30\u76f4\u7dda\u306fy=0.95*x-6.3\u3067\u3042\u3063\u305f)\n\n4. Conclusion\nNPB\u306e\u904e\u53bb\u306e\u30c1\u30fc\u30e0\u30c7\u30fc\u30bf\u3067\u691c\u8a3c\u3057\u3066\u307f\u305f\u7d50\u679c\u3001\u5f97\u70b9\u516c\u5f0fRC\u306fNPB\u306e\u30c1\u30fc\u30e0\u306e\u5f97\u70b9\u6570\u3082\u6975\u3081\u3066\u7cbe\u5ea6\u826f\u304f\u4e88\u6e2c\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u3068\u3044\u3046\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u3002\n\u30d3\u30eb\u30fb\u30b8\u30a7\u30fc\u30e0\u30ba\u304c\u8003\u6848\u3057\u305fRC\u306e\u5f0f\u306f\u3001\u4eca\u3067\u306f\u4fc2\u6570\u306e\u5024\u306a\u3069\u306e\u6539\u826f\u304c\u884c\u308f\u308c\u3001\u76d7\u5841\u6570\u306a\u3069\u3082\u8aac\u660e\u5909\u6570\u306b\u4f7f\u308f\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b(Wikipedia\u306e\u30da\u30fc\u30b8[\u5f8c\u8a18]\u53c2\u7167)\u3002\n\u3057\u304b\u3057\u30d3\u30eb\u30fb\u30b8\u30a7\u30fc\u30e0\u30ba\u306e\u8003\u6848\u3057\u305f\u5f97\u70b9\u516c\u5f0f\u306e\u7d20\u6674\u3089\u3057\u3044\u70b9\u306f\u3001\u51fa\u5841\u80fd\u529b(=\u5b89\u6253\u6570+\u56db\u7403\u6570)\u00d7\u9032\u5841\u80fd\u529b(=\u5841\u6253\u6570)\u3060\u3051\u3067\u5f97\u70b9\u6570\u3092\u7cbe\u5ea6\u826f\u304f\u898b\u7a4d\u3082\u308c\u308b\u3068\u3057\u305f\u70b9\u3060\u3068\u601d\u3046\u3002\u5404\u8aac\u660e\u5909\u6570\u306b\u4fc2\u6570\u304c\u4e00\u5207\u304b\u304b\u3063\u3066\u304a\u3089\u305a\u3001\u305d\u306e\u5f0f\u306e\u5f62\u306f\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u3067\u3042\u308b\u3002\n\u3053\u306e\u69d8\u306a\u30b7\u30f3\u30d7\u30eb\u306a\u5f0f\u3067\u5f97\u70b9\u6570\u3092\u898b\u7a4d\u3082\u308c\u308b\u3068\u3044\u3046\u3068\u3044\u3046\u3053\u3068\u3092\u767a\u898b\u3057\u305f\u3068\u3044\u3046\u4e8b\u5b9f\u306f\u3001\u3084\u306f\u308a\u7279\u7b46\u306b\u5024\u3059\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3002\n\nReferences\n\n\u30de\u30cd\u30fc\u30fb\u30dc\u30fc\u30eb\u3014\u5b8c\u5168\u7248\u3015(\u30de\u30a4\u30b1\u30eb\u30fb\u30eb\u30a4\u30b9\u8457)\n\u65e5\u672c\u91ce\u7403\u6a5f\u69cb\nhttps://ja.wikipedia.org/wiki/RC_(%E9%87%8E%E7%90%83)\n\n# 1. Introduction\n\n\u30a2\u30e1\u30ea\u30ab\u5408\u8846\u56fd\u306e\u30b9\u30dd\u30fc\u30c4\u30e9\u30a4\u30bf\u30fc\u3067\u3042\u308a\u3001\u91ce\u7403\u306e\u30bb\u30a4\u30d0\u30fc\u30e1\u30c8\u30ea\u30af\u30b9\u306e\u5148\u99c6\u8005\u3067\u3042\u308b[\u30d3\u30eb\u30fb\u30b8\u30a7\u30fc\u30e0\u30ba](https://ja.wikipedia.org/wiki/%E3%83%93%E3%83%AB%E3%83%BB%E3%82%B8%E3%82%A7%E3%83%BC%E3%83%A0%E3%82%BA)\u306f\u3001\u30c1\u30fc\u30e0\u306e\u5f97\u70b9\u6570\u3092\u4e88\u6e2c\u3059\u308b\u6570\u5f0f\u3092\u4f5c\u308a\u51fa\u3057\u305f\u3002\n\n```math\n\u5f97\u70b9\u6570 =  (\u5b89\u6253\u6570+\u56db\u7403\u6570) \u00d7 \u5841\u6253\u6570 \u00f7 (\u6253\u6570+\u56db\u7403\u6570)\n```\n\n\u3053\u306e\u6570\u5f0f\u306b\u3088\u3063\u3066\u898b\u7a4d\u3082\u3089\u308c\u308b\u5f97\u70b9\u6570\u306f\u3001**RC(Runs Created)**\u3068\u540d\u3065\u3051\u3089\u308c\u305f\u3002\n\u30b8\u30a7\u30fc\u30e0\u30ba\u306f\u3053\u306e\u5f0f\u306e\u53f3\u8fba\u306b\u8272\u3005\u306aMLB\u30c1\u30fc\u30e0\u306e\u904e\u53bb\u306e\u30b7\u30fc\u30ba\u30f3\u8a18\u9332\u3092\u4ee3\u5165\u3057\u3066\u3001\u5b9f\u969b\u306e\u5f97\u70b9\u6570\u3068\u5408\u3046\u306e\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3057\u305f\u3002\u305d\u306e\u7d50\u679c\u3001\u3053\u306e\u6570\u5f0f\u306f\u3069\u306e\u30c1\u30fc\u30e0\u306b\u5f53\u3066\u306f\u3081\u3066\u3082\u6709\u52b9\u3067\u3042\u308a\u3001\u6975\u3081\u3066\u7cbe\u5ea6\u826f\u304f\u5f97\u70b9\u6570\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u305f\u3002\n\u3057\u304b\u3057\u4e00\u3064\u306e\u7591\u554f\u304c\u3042\u308b\u3002\n\n - \u30b8\u30a7\u30fc\u30e0\u30ba\u304c\u3053\u306e\u516c\u5f0f\u306e\u7cbe\u5ea6\u3092\u691c\u8a3c\u3059\u308b\u969b\u306b\u7528\u3044\u305f\u306e\u306fMLB\u306e\u30c7\u30fc\u30bf\u3060\u3063\u305f\u3002NPB\u306e\u30c1\u30fc\u30e0\u306b\u95a2\u3057\u3066\u3082\u3001\u3053\u306e\u6570\u5f0f\u3092\u7528\u3044\u3066\u5f97\u70b9\u6570\u3092\u7cbe\u5ea6\u826f\u304f\u4e88\u6e2c\u3059\u308b\u3053\u3068\u306f\u51fa\u6765\u308b\u306e\u3060\u308d\u3046\u304b\uff1f\n\n\n\u305d\u3053\u3067\u4eca\u56de\u306f\u3001\u5b9f\u969b\u306eNPB\u306e\u30c1\u30fc\u30e0\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u3001\u3053\u306e\u5f97\u70b9\u516c\u5f0fRC\u306e\u7cbe\u5ea6\u306e\u691c\u8a3c\u3092\u884c\u3063\u305f\u3002\n\n\n# 2. Data and Program\n## 2.1. Data\n\u7528\u3044\u305f\u30c7\u30fc\u30bf\u306f\u30012005\u5e74\u301c2016\u5e74\u306e\u3001\u65e5\u672c\u30d7\u30ed\u91ce\u7403(NPB)\u306e12\u7403\u56e3\u306e\u30b7\u30fc\u30ba\u30f3\u6210\u7e3e\u3067\u3042\u308b\u3002\n\u30c7\u30fc\u30bf\u306f\u65e5\u672c\u91ce\u7403\u6a5f\u69cb\u306e\u30db\u30fc\u30e0\u30da\u30fc\u30b8\nhttp://npb.jp/\n\u304b\u3089\u5f97\u305f\u3002\n\u4f8b\u3048\u30702016\u5e74\u30bb\u30fb\u30ea\u30fc\u30b0\u306e\u30b7\u30fc\u30ba\u30f3\u6210\u7e3e\u306f\u3001\nhttp://npb.jp/bis/2016/stats/tmb_c.html\n\u304b\u3089\u53d6\u5f97\u3057\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u52a0\u5de5\u3057\u3066\u4fdd\u5b58\u3057\u305f\u3002\n\n```2016C_bat.csv\nCarp, .272, 143, 5582, 4914, 684, 1338, 203, 35, 153, 2070, 649, 118, 52, 91, 29, 500, 13, 47, 1063, 85, .421, .343\nYakult, .256, 143, 5509, 4828, 594, 1234, 210, 20, 113, 1823, 565, 82, 24, 85, 33, 524, 10, 39, 907, 117, .378, .331\nGiants, .251, 143, 5356, 4797, 519, 1203, 217, 19, 128, 1842, 497, 62, 26, 112, 23, 389, 11, 35, 961, 100, .384, .310\nDeNA, .249, 143, 5364, 4838, 572, 1205, 194, 21, 140, 1861, 548, 67, 34, 81, 18, 373, 7, 54, 1049, 92, .385, .309\nDragons, .245, 143, 5405, 4813, 500, 1180, 209, 21, 89, 1698, 473, 60, 28, 108, 28, 410, 7, 46, 1001, 103, .353, .309\nTigers, .245, 143, 5401, 4789, 506, 1171, 204, 17, 90, 1679, 475, 59, 25, 88, 38, 435, 17, 51, 1149, 99, .351, .312\n```\n\n(\u306a\u304a\u3001\u30c7\u30fc\u30bf\u306f\nhttps://github.com/AnchorBlues/python/tree/master/baseballdata\n\u306b\u52a0\u5de5\u3057\u305f\u72b6\u614b\u306e\u3082\u306e\u3092\u7f6e\u3044\u3066\u3044\u308b)\n\n## 2.2. Program\n\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u3001\u89e3\u6790\u3001\u53ca\u3073\u53ef\u8996\u5316\u306b\u306f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306ePython\u3092\u7528\u3044\u305f\u3002\n\n```NPB.py\n#coding:utf - 8\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\nfy = 2005\nly = 2016\nYn = ly - fy + 1\n\nBat_Column = ['Average', 'Game', 'PA', 'AB', 'Score', 'Hit', \\\n\t\t\t  'TwoBase', 'ThreeBase', 'HR', 'TB', 'RBI', 'Steel', \\\n\t\t\t  'MissSteal', 'Bunt', 'SF', 'BB', 'IntentionalWalk', \\\n\t\t\t  'DeadBall', 'StrikeOut', 'DoublePlay', 'SLG', 'OBP']\n\n# PA : Plate Appearance \u6253\u5e2d\u6570\n# AB : At Bat \u6253\u6570\n# TB : Total Bases \u5841\u6253\u6570\n# RBI : \u6253\u70b9\n# SF : Sacrifice Fly \u72a0\u7272\u30d5\u30e9\u30a4\n# IntentionalWalk : \u6545\u610f\u56db\u7403\n\nN = len(Bat_Column)\n\nclass Bat_Data():\n\tdef __init__(self, Data, Year, Team):\n\t\tself.Year = Year\n\t\tself.Team = Team\n\t\tfor i in range(0, N):\n\t\t\tsetattr(self, Bat_Column[i], Data[:, i])\n\n\t\tself.OPS = self.SLG + self.OBP\n\t\tself.NOI = (self.SLG / 3.0 + self.OBP) * 1000\n\t\tself.BABIP = (self.Hit - self.HR) / (self.AB + self.SF - self.HR - self.StrikeOut)\n\t\tself.RC = (self.Hit + self.BB) * self.TB / (self.AB + self.BB)\n\t\tself.IsoP = self.SLG - self.Average\n\t\tself.IsoD = self.OBP - self.Average\n\n\n\nclass TEAM:\n\tdef __init__(self, ID, Name, maker):\n\t\tself.ID = ID\n\t\tself.Name = Name\n\t\tself.maker = maker\n\n\nteam = [0] * 12\nteam[0] = TEAM(0, 'Carp', '>')\nteam[1] = TEAM(1, 'Tigers', '<')\nteam[2]= TEAM(2, 'Giants', '^')\nteam[3] = TEAM(3, 'Dragons', 'v')\nteam[4] = TEAM(4, 'DeNA', 'd')\nteam[5] = TEAM(5, 'Yakult', 'D')\nteam[6] = TEAM(6, 'Fighters', '8')\nteam[7] = TEAM(7, 'Lotte', 'H')\nteam[8] = TEAM(8, 'Lions', 'h')\nteam[9] = TEAM(9, 'Eagles', '*')\nteam[10] = TEAM(10, 'Orix', 'p')\nteam[11] = TEAM(11, 'Hawks', 's')\n\n\n# 2\u3064\u306eBat_Data\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30921\u3064\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u7d71\u5408\u3059\u308b\ndef Docking(Data1, Data2):\n\n\tdata = np.zeros((Data1.Average.shape[0] + Data2.Average.shape[0], N))\n\tfor i in range(0, N):\n\t\tdata[:, i] = np.r_[getattr(Data1, Bat_Column[i]), getattr(Data2, Bat_Column[i])]\n\n\tyear = np.r_[Data1.Year, Data2.Year]\n\tteam = np.r_[Data1.Team, Data2.Team]\n\tData_new = Bat_Data(data, year, team)\n\treturn Data_new\n\n\ndef get_data(League, year):\n\tfname = './baseballdata/' + str(year) + League + '_bat.csv'\n\tData = np.loadtxt(fname, delimiter = ',', usecols = range(1, N + 1))\n\tYear = np.ones(6) * year\n\tTeam = np.loadtxt(fname, delimiter = ',', usecols = range(0, 1), dtype = str)\n\tData = Bat_Data(Data, Year, Team)\n\treturn Data\n\n\ndef get_all_data(League):\n\tfor i in range(Yn):\n\t\tyear = i + fy\n\t\ttmp = get_data(League, year)\n\t\tif i == 0:\n\t\t\tData = tmp\n\t\telse:\n\t\t\tData = Docking(Data, tmp)\n\n\treturn Data\n\n# Data.Column_name\u306e\u4e2d\u304b\u3089\u3001\u30c1\u30fc\u30e0\u540d\u304cTeam_name\u306e\u3082\u306e\u3060\u3051\u3092\u53d6\u308a\u51fa\u3059\u3002\ndef PickUp_Data_of_a_team(Data, Column_name, Team_name):\n\treturn getattr(Data, Column_name)[np.where(getattr(Data, 'Team') == Team_name)]\n\n\ndef draw_scatter(plt, Data, X_name, Y_name, regression_flg = 0, Y_eq_X_line_flg = 0, \\\n\t\t\t\t title = 'Scatter plot', fsizex = 10, fsizey = 8):\n\n\tfig, ax = plt.subplots(figsize = (fsizex, fsizey))\n\tplt.rcParams['font.size'] = 16\n\n\tfor i in range(0, len(team)):\n\t\tx = PickUp_Data_of_a_team(Data, X_name, team[i].Name)\n\t\ty = PickUp_Data_of_a_team(Data, Y_name, team[i].Name)\n\t\tyear = PickUp_Data_of_a_team(Data, 'Year', team[i].Name)\n\t\tif x != np.array([]):\n\t\t\tCF = ax.scatter(x, y, c = year, s = 50, marker = team[i].maker, \\\n\t\t\t\t\t\t\tlabel = team[i].Name, vmin = fy, vmax = ly)\n\n\t\tif i == 0:\n\t\t\tX = x\n\t\t\tY = y\n\t\telse:\n\t\t\tX = np.r_[X, x]\n\t\t\tY = np.r_[Y, y]\n\n\tplt.colorbar(CF, ticks = list(np.arange(fy, ly + 1)), label = 'year')\n\tplt.legend(bbox_to_anchor = (1.35, 1), loc = 2, borderaxespad = 0., scatterpoints = 1)\n\tax.set_title(title)\n\tax.set_xlabel(X_name)\n\tax.set_ylabel(Y_name)\n\n\t# \u56de\u5e30\u76f4\u7dda\u3092\u5f15\u304f\n\tif regression_flg == 1:\n\t\tslope, intercept, r_value, _, _ = stats.linregress(X, Y)\n\t\txx = np.arange(450, 750, 1)\n\t\tyy = slope * xx + intercept\n\t\tax.plot(xx, yy, linewidth = 2)\n\n\t# y=x\u306e\u76f4\u7dda\u3092\u5f15\u304f\n\tif Y_eq_X_line_flg == 1:\n\t\txx = np.arange(450, 750, 1)\n\t\tyy_d = xx\n\t\tax.plot(xx, yy_d, color = 'k')\n\n\tprint 'Correlation=', np.corrcoef(X, Y)[0, 1]\n\treturn plt\n```\n\n\u4f8b\u3048\u3070\u30012016\u5e74\u30bb\u30fb\u30ea\u30fc\u30b0\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3057\u305f\u3044\u3068\u304d\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3059\u308b\u3002\n\n```py\nIn [1]:import NPB\nIn [2]:Data_2016C=NPB.get_data('C',2016)   #\u30d1\u30fb\u30ea\u30fc\u30b0\u306b\u3057\u305f\u3044\u3068\u304d\u306b\u306f'C'\u3092'P'\u306b\u3002\nIn [3]:Data_2016C.Average  #2016\u5e74\u30bb\u30fb\u30ea\u30fc\u30b0\u306e\u30016\u30c1\u30fc\u30e0\u305d\u308c\u305e\u308c\u306e\u30c1\u30fc\u30e0\u6253\u7387\u3092\u51fa\u529b\n\nOut[3]: array([ 0.272,  0.256,  0.251,  0.249,  0.245,  0.245])\n```\n\n# 3. Result\n## 3.1. Average vs Score\n\u307e\u305a\u306f\u3001\u6700\u3082\u4e00\u822c\u7684\u306a\u6253\u6483\u6307\u6a19\u3067\u3042\u308b\u300c\u6253\u7387\u300d\u3068\u3001\u5f97\u70b9\u6570\u3068\u306e\u76f8\u95a2\u3092\u898b\u3066\u307f\u308b\u3002\n2005\u301c2016\u5e74\u306e12\u7403\u56e3\u5168\u3066\u306e\u30c1\u30fc\u30e0\u30c7\u30fc\u30bf(\u5168\u90e8\u3067144\u30b5\u30f3\u30d7\u30eb)\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3057\u3066\u3001\u6a2a\u8ef8\u306b\u300c\u6253\u7387(Average)\u300d\u3001\u7e26\u8ef8\u306b\u300c\u5f97\u70b9\u6570(Score)\u300d\u3092\u53d6\u3063\u3066\u6563\u5e03\u56f3\u3092\u63cf\u3044\u3066\u307f\u308b\u3002\n\n```py\nIn [1]:import matplotlib.pyplot as plt\nIn [2]:Data_C=NPB.get_all_data('C')   #\u30bb\u30fb\u30ea\u30fc\u30b0\u306e\u5168\u3066\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\nIn [3]:Data_P=NPB.get_all_data('P')   #\u30d1\u30fb\u30ea\u30fc\u30b0\u306e\u5168\u3066\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\nIn [4]:Data=NPB.Docking(Data_C,Data_P) #\u4e21\u30ea\u30fc\u30b0\u306e\u30c7\u30fc\u30bf\u3092\u7d71\u5408\nIn [5]:plt=NPB.draw_scatter(plt,Data,'Average','Score') #\u6253\u7387\u3068\u5f97\u70b9\u306e\u6563\u5e03\u56f3\u3092\u63cf\u304f\nIn [6]:plt.show()\n```\n\n\u51fa\u529b\u3055\u308c\u305f\u56f3\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n![image](https://qiita-image-store.s3.amazonaws.com/0/88804/2e5ece91-81b1-f7d2-b886-b9b46ef57a9e.png)\n\n\u307e\u305f\u3001\u76f8\u95a2\u4fc2\u6570\u306f\u3001\n`Correlation= 0.825987845723`\n\u3068\u3044\u3046\u7d50\u679c\u306b\u306a\u3063\u305f\u3002\n\n\n## 3.2. RC vs Score\n3.1. \u3068\u540c\u3058\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u3001\u4eca\u5ea6\u306f\u6a2a\u8ef8\u306b\u300cRC\u300d\u3001\u7e26\u8ef8\u306b\u300c\u5f97\u70b9\u6570(Score)\u300d\u3092\u53d6\u3063\u3066\u6563\u5e03\u56f3\u3092\u63cf\u3044\u3066\u307f\u308b\u3002\n\n```py\nIn [7]:plt=NPB.draw_scatter(plt,Data,'RC','Score',regression_flg=1,Y_eq_X_line_flg=1) #RC\u3068\u5f97\u70b9\u306e\u6563\u5e03\u56f3\u3092\u63cf\u304f\u3002\u3055\u3089\u306b\u305d\u306e\u56de\u5e30\u76f4\u7dda\u3068\u3001y=x\u306e\u76f4\u7dda\u3092\u5f15\u304f\u3002\nIn [8]:plt.show()\n```\n\n\u51fa\u529b\u3055\u308c\u305f\u56f3\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n![image](https://qiita-image-store.s3.amazonaws.com/0/88804/bbda4990-c68e-cd82-b23c-0a8e36194570.png)\n\n\u307e\u305f\u3001\u76f8\u95a2\u4fc2\u6570\u306f\u3001\n`Correlation= 0.953524104544`\n\u3068\u3044\u3046\u7d50\u679c\u306b\u306a\u3063\u305f\u3002\n\u76f8\u95a2\u4fc2\u6570\u306e\u5024\u304b\u3089\u3082\u3001RC\u3068\u5f97\u70b9\u6570\u306e\u9593\u306b\u306f\u6975\u3081\u3066\u5f37\u3044\u76f8\u95a2\u304c\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u304c\u5206\u304b\u308b\u3002\n\u66f4\u306b\u3001\u305d\u306e\u56de\u5e30\u76f4\u7dda(\u4e0a\u56f3\u306e\u9752\u7dda)\u306f\u3001\u300cy=x\u300d\u306e\u76f4\u7dda(\u4e0a\u56f3\u306e\u9ed2\u7dda)\u3068\u975e\u5e38\u306b\u8fd1\u3044\u3082\u306e\u3068\u306a\u3063\u305f\u3002\n(\u306a\u304a\u3001\u56de\u5e30\u76f4\u7dda\u306f`y=0.95*x-6.3`\u3067\u3042\u3063\u305f)\n\n# 4. Conclusion\nNPB\u306e\u904e\u53bb\u306e\u30c1\u30fc\u30e0\u30c7\u30fc\u30bf\u3067\u691c\u8a3c\u3057\u3066\u307f\u305f\u7d50\u679c\u3001\u5f97\u70b9\u516c\u5f0fRC\u306fNPB\u306e\u30c1\u30fc\u30e0\u306e\u5f97\u70b9\u6570\u3082\u6975\u3081\u3066\u7cbe\u5ea6\u826f\u304f\u4e88\u6e2c\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u3068\u3044\u3046\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u3002\n\u30d3\u30eb\u30fb\u30b8\u30a7\u30fc\u30e0\u30ba\u304c\u8003\u6848\u3057\u305fRC\u306e\u5f0f\u306f\u3001\u4eca\u3067\u306f\u4fc2\u6570\u306e\u5024\u306a\u3069\u306e\u6539\u826f\u304c\u884c\u308f\u308c\u3001\u76d7\u5841\u6570\u306a\u3069\u3082\u8aac\u660e\u5909\u6570\u306b\u4f7f\u308f\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b(Wikipedia\u306e\u30da\u30fc\u30b8[\u5f8c\u8a18]\u53c2\u7167)\u3002\n\u3057\u304b\u3057\u30d3\u30eb\u30fb\u30b8\u30a7\u30fc\u30e0\u30ba\u306e\u8003\u6848\u3057\u305f\u5f97\u70b9\u516c\u5f0f\u306e\u7d20\u6674\u3089\u3057\u3044\u70b9\u306f\u3001**\u51fa\u5841\u80fd\u529b(=\u5b89\u6253\u6570+\u56db\u7403\u6570)\u00d7\u9032\u5841\u80fd\u529b(=\u5841\u6253\u6570)**\u3060\u3051\u3067\u5f97\u70b9\u6570\u3092\u7cbe\u5ea6\u826f\u304f\u898b\u7a4d\u3082\u308c\u308b\u3068\u3057\u305f\u70b9\u3060\u3068\u601d\u3046\u3002\u5404\u8aac\u660e\u5909\u6570\u306b\u4fc2\u6570\u304c\u4e00\u5207\u304b\u304b\u3063\u3066\u304a\u3089\u305a\u3001\u305d\u306e\u5f0f\u306e\u5f62\u306f\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u3067\u3042\u308b\u3002\n\u3053\u306e\u69d8\u306a\u30b7\u30f3\u30d7\u30eb\u306a\u5f0f\u3067\u5f97\u70b9\u6570\u3092\u898b\u7a4d\u3082\u308c\u308b\u3068\u3044\u3046\u3068\u3044\u3046\u3053\u3068\u3092\u767a\u898b\u3057\u305f\u3068\u3044\u3046\u4e8b\u5b9f\u306f\u3001\u3084\u306f\u308a\u7279\u7b46\u306b\u5024\u3059\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3002\n\n\n# References\n\n - [\u30de\u30cd\u30fc\u30fb\u30dc\u30fc\u30eb\u3014\u5b8c\u5168\u7248\u3015(\u30de\u30a4\u30b1\u30eb\u30fb\u30eb\u30a4\u30b9\u8457)](https://www.amazon.co.jp/s/ref=nb_sb_noss?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&url=search-alias%3Daps&field-keywords=%E3%83%9E%E3%83%8D%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%AB)\n - [\u65e5\u672c\u91ce\u7403\u6a5f\u69cb](http://npb.jp/)\n - https://ja.wikipedia.org/wiki/RC_(%E9%87%8E%E7%90%83)\n\n", "tags": ["Python", "matplotlib", "\u30c7\u30fc\u30bf\u5206\u6790", "\u91ce\u7403"]}