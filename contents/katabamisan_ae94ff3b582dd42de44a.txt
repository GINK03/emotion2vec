{"context": " More than 1 year has passed since last update.32\u30d3\u30c3\u30c8\u5f62\u5f0f\u306ePE\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u30c7\u30fc\u30bf\u3068\u3057\u3066\u89e3\u6790\u3057\u3066IMAGE_COR20_HEADER\u69cb\u9020\u4f53\u3092\u53d6\u5f97\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\u5b9f\u969b\u306b\u306fIMAGE_COR20_HEADER\u69cb\u9020\u4f53\u306e\u30e1\u30a4\u30f3\u3067\u3042\u308d\u3046\u30e1\u30bf\u30c7\u30fc\u30bf\u306f\u4eca\u5f8c\u306e\u62e1\u5f35\u306b\u5099\u3048\u3066\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u975e\u516c\u958b\u306a\u306e\u3067\u3001CLSID_CorMetaDataDispenser\u3067\u516c\u958b\u3055\u308c\u308b\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u3079\u304d\u3060\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u3072\u3068\u307e\u305aPE\u5f62\u5f0f\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u529b\u6280\u3067\u89e3\u6790\u3059\u308b\u30b3\u30fc\u30c9\u306e\u30e1\u30e2\u3068\u3057\u3066\u3002\n\u3044\u3064\u3082\u901a\u308a\u3001\u4f8b\u5916\u51e6\u7406\u7b49\u306f\u624b\u629c\u304d\u3067\u3059\u3002\n#define STRICT\n#include <Windows.h>\n#include <CorHdr.h>\n\n// PE\u30d5\u30a1\u30a4\u30eb\u306eRVA\u3092\u542b\u3080\u30bb\u30af\u30b7\u30e7\u30f3\u306eIMAGE_SECTION_HEADER\u3092\u8fd4\u3057\u307e\u3059\u3002\nconst PIMAGE_SECTION_HEADER ImageSectionHeaderContainingRVA(LPCVOID Base, const IMAGE_NT_HEADERS32* NTHeaders, DWORD RVA)\n{\n    // IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR\u3092\u542b\u3080\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u63a2\u7d22\n    const PIMAGE_SECTION_HEADER SectionHeaders = IMAGE_FIRST_SECTION(NTHeaders);\n    for (UINT i = 0; i < NTHeaders->FileHeader.NumberOfSections; i++)\n    {\n        if (SectionHeaders[i].VirtualAddress <= RVA &&\n            RVA <= (SectionHeaders[i].VirtualAddress + SectionHeaders[i].SizeOfRawData))\n        {\n            return SectionHeaders + i;\n        }\n    }\n    return nullptr;\n}\n\n// PE\u30d5\u30a1\u30a4\u30eb\u306eRVA\u3092VA\u306b\u5909\u63db\u3057\u307e\u3059\u3002\nLPCVOID ImageRVAToVA32(LPCVOID Base, const IMAGE_NT_HEADERS32* NTHeaders, DWORD RVA)\n{\n    const PIMAGE_SECTION_HEADER SectionHeader = ImageSectionHeaderContainingRVA(\n        Base, NTHeaders, RVA);\n    if (SectionHeader == nullptr)\n        return nullptr;\n    return ((LPCBYTE)Base) + SectionHeader->PointerToRawData\n        + (RVA - SectionHeader->VirtualAddress);\n}\n\n// \u30d5\u30a1\u30a4\u30eb\u304c32\u30d3\u30c3\u30c8PE\u5f62\u5f0f\u3067\u3042\u308c\u3070IMAGE_NT_HEADERS32\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u8fd4\u3057\u307e\u3059\u3002\nconst PIMAGE_NT_HEADERS32 ImageCheckPE32(LPCVOID Base)\n{\n    const PIMAGE_DOS_HEADER DOSHeader = (const PIMAGE_DOS_HEADER)Base;\n    if (DOSHeader->e_magic != IMAGE_DOS_SIGNATURE)\n    {\n        return nullptr;\n    }\n\n    const PDWORD Signature = (const PDWORD)((LPCBYTE)Base + DOSHeader->e_lfanew);\n    if (*Signature != IMAGE_NT_SIGNATURE)\n    {\n        return nullptr;\n    }\n    const PIMAGE_FILE_HEADER FileHeader = (const PIMAGE_FILE_HEADER)(Signature + 1);\n    if (FileHeader->SizeOfOptionalHeader != sizeof IMAGE_OPTIONAL_HEADER32)\n    {\n        return nullptr;\n    }\n    const PIMAGE_OPTIONAL_HEADER OptionalHeader = (const PIMAGE_OPTIONAL_HEADER32)(FileHeader + 1);\n    if (OptionalHeader->Magic != IMAGE_NT_OPTIONAL_HDR32_MAGIC)\n    {\n        return nullptr;\n    }\n\n    return (const PIMAGE_NT_HEADERS32)Signature;\n}\n\n#include <iostream>\n#include <iomanip>\n\n// 32\u30d3\u30c3\u30c8PE\u30d5\u30a1\u30a4\u30eb\u306eCLI\u30d8\u30c3\u30c0\u30fc\u60c5\u5831\u3092\u8868\u793a\u3057\u307e\u3059\u3002\nvoid main()\n{\n    std::wcout.imbue(std::locale(\"ja\"));\n\n    // CLI\u30d8\u30c3\u30c0\u30fc\u3092\u78ba\u8a8d\u3059\u308b\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306e\u5834\u6240\n    LPCWSTR path = <\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u6307\u5b9a\u3057\u3066\u4e0b\u3055\u3044>;\n\n    HANDLE FileHandle = CreateFileW(path, GENERIC_READ,\n        FILE_SHARE_READ, nullptr, OPEN_EXISTING, 0, nullptr);\n    if (FileHandle == INVALID_HANDLE_VALUE)\n    {\n        std::wcout << L\"\u30d5\u30a1\u30a4\u30eb\u30cf\u30f3\u30c9\u30eb\u304c\u958b\u3051\u307e\u305b\u3093\u3067\u3057\u305f\u3002\" << std::endl;\n        return;\n    }\n    HANDLE FileMapHandle = CreateFileMappingW(FileHandle, nullptr, PAGE_READONLY, 0, 0, nullptr);\n    if (FileMapHandle == nullptr)\n    {\n        std::wcout << L\"\u30d5\u30a1\u30a4\u30eb\u30de\u30c3\u30d4\u30f3\u30b0\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u4f5c\u6210\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\" << std::endl;\n        return;\n    }\n    LPCBYTE Base = (LPCBYTE)MapViewOfFile(FileMapHandle, FILE_MAP_READ, 0, 0, 0);\n    if (Base == nullptr)\n    {\n        std::wcout << L\"\u30d5\u30a1\u30a4\u30eb\u30de\u30c3\u30d4\u30f3\u30b0\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d3\u30e5\u30fc\u304c\u4f5c\u6210\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\" << std::endl;\n        return;\n    }\n\n    const PIMAGE_NT_HEADERS32 NTHeaders = ImageCheckPE32(Base);\n    if (ImageCheckPE32 == nullptr)\n    {\n        std::wcout << L\"\u30d5\u30a1\u30a4\u30eb\u306f32\u30d3\u30c3\u30c8PE\u5f62\u5f0f\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\" << std::endl;\n        return;\n    }\n\n    // IMAGE_COR2_HEADER\u306fIMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR\u306b\u914d\u7f6e\u3055\u308c\u307e\u3059\n    const PIMAGE_DATA_DIRECTORY ComDescDir = &NTHeaders->OptionalHeader.DataDirectory[\n        IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR];\n    const PIMAGE_COR20_HEADER CorHeader = (const PIMAGE_COR20_HEADER)(\n        ImageRVAToVA32(Base, NTHeaders, ComDescDir->VirtualAddress));\n    if (CorHeader == nullptr)\n    {\n        std::wcout << L\"\u30d5\u30a1\u30a4\u30eb\u306fCLI\u30d8\u30c3\u30c0\u30fc\u3092\u542b\u307f\u307e\u305b\u3093\u3002\" << std::endl;\n        return;\n    }\n\n    // CLI\u30d8\u30c3\u30c0\u30fc\u60c5\u5831\u306e\u51fa\u529b\n    std::wcout << L\"IMAGE_COR20_HEADER\" << std::endl;\n    std::wcout << L\"\u30e9\u30f3\u30bf\u30a4\u30e0\u306e\u30d0\u30fc\u30b8\u30e7\u30f3: \"\n        << CorHeader->MajorRuntimeVersion\n        << L\".\"\n        << CorHeader->MinorRuntimeVersion\n        << std::endl;\n    std::wcout << L\"\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba: \"\n        << CorHeader->MetaData.Size\n        << std::endl;\n    std::wcout << L\"\u30d5\u30e9\u30b0: 0x\"\n        << std::hex << std::setfill(L'0') << std::setw(8) << CorHeader->Flags\n        << std::endl;\n    std::wcout << L\"\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8: 0x\"\n        << std::hex << std::setfill(L'0') << std::setw(8) << CorHeader->EntryPointRVA\n        << L\" (\"\n        << (CorHeader->Flags & COMIMAGE_FLAGS_NATIVE_ENTRYPOINT ? L\"Native\" : L\"Managed\")\n        << L\")\"\n        << std::endl;\n\n    UnmapViewOfFile(Base);\n    CloseHandle(FileMapHandle);\n    CloseHandle(FileHandle);\n}\n\n\n\u51fa\u529b\u4f8b\nIMAGE_COR20_HEADER\n\u30e9\u30f3\u30bf\u30a4\u30e0\u306e\u30d0\u30fc\u30b8\u30e7\u30f3: 2.5\n\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba: 4,772\n\u30d5\u30e9\u30b0: 0x00000001\n\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8: 0x00000000 (Managed)\n\n\n32\u30d3\u30c3\u30c8\u5f62\u5f0f\u306ePE\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u30c7\u30fc\u30bf\u3068\u3057\u3066\u89e3\u6790\u3057\u3066IMAGE_COR20_HEADER\u69cb\u9020\u4f53\u3092\u53d6\u5f97\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\n\u5b9f\u969b\u306b\u306fIMAGE_COR20_HEADER\u69cb\u9020\u4f53\u306e\u30e1\u30a4\u30f3\u3067\u3042\u308d\u3046\u30e1\u30bf\u30c7\u30fc\u30bf\u306f\u4eca\u5f8c\u306e\u62e1\u5f35\u306b\u5099\u3048\u3066\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u975e\u516c\u958b\u306a\u306e\u3067\u3001CLSID_CorMetaDataDispenser\u3067\u516c\u958b\u3055\u308c\u308b\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u3079\u304d\u3060\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u3072\u3068\u307e\u305aPE\u5f62\u5f0f\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u529b\u6280\u3067\u89e3\u6790\u3059\u308b\u30b3\u30fc\u30c9\u306e\u30e1\u30e2\u3068\u3057\u3066\u3002\n\n\u3044\u3064\u3082\u901a\u308a\u3001\u4f8b\u5916\u51e6\u7406\u7b49\u306f\u624b\u629c\u304d\u3067\u3059\u3002\n\n```cpp\n#define STRICT\n#include <Windows.h>\n#include <CorHdr.h>\n\n// PE\u30d5\u30a1\u30a4\u30eb\u306eRVA\u3092\u542b\u3080\u30bb\u30af\u30b7\u30e7\u30f3\u306eIMAGE_SECTION_HEADER\u3092\u8fd4\u3057\u307e\u3059\u3002\nconst PIMAGE_SECTION_HEADER ImageSectionHeaderContainingRVA(LPCVOID Base, const IMAGE_NT_HEADERS32* NTHeaders, DWORD RVA)\n{\n\t// IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR\u3092\u542b\u3080\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u63a2\u7d22\n\tconst PIMAGE_SECTION_HEADER SectionHeaders = IMAGE_FIRST_SECTION(NTHeaders);\n\tfor (UINT i = 0; i < NTHeaders->FileHeader.NumberOfSections; i++)\n\t{\n\t\tif (SectionHeaders[i].VirtualAddress <= RVA &&\n\t\t\tRVA <= (SectionHeaders[i].VirtualAddress + SectionHeaders[i].SizeOfRawData))\n\t\t{\n\t\t\treturn SectionHeaders + i;\n\t\t}\n\t}\n\treturn nullptr;\n}\n\n// PE\u30d5\u30a1\u30a4\u30eb\u306eRVA\u3092VA\u306b\u5909\u63db\u3057\u307e\u3059\u3002\nLPCVOID ImageRVAToVA32(LPCVOID Base, const IMAGE_NT_HEADERS32* NTHeaders, DWORD RVA)\n{\n\tconst PIMAGE_SECTION_HEADER SectionHeader = ImageSectionHeaderContainingRVA(\n\t\tBase, NTHeaders, RVA);\n\tif (SectionHeader == nullptr)\n\t\treturn nullptr;\n\treturn ((LPCBYTE)Base) + SectionHeader->PointerToRawData\n\t\t+ (RVA - SectionHeader->VirtualAddress);\n}\n\n// \u30d5\u30a1\u30a4\u30eb\u304c32\u30d3\u30c3\u30c8PE\u5f62\u5f0f\u3067\u3042\u308c\u3070IMAGE_NT_HEADERS32\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u8fd4\u3057\u307e\u3059\u3002\nconst PIMAGE_NT_HEADERS32 ImageCheckPE32(LPCVOID Base)\n{\n\tconst PIMAGE_DOS_HEADER DOSHeader = (const PIMAGE_DOS_HEADER)Base;\n\tif (DOSHeader->e_magic != IMAGE_DOS_SIGNATURE)\n\t{\n\t\treturn nullptr;\n\t}\n\n\tconst PDWORD Signature = (const PDWORD)((LPCBYTE)Base + DOSHeader->e_lfanew);\n\tif (*Signature != IMAGE_NT_SIGNATURE)\n\t{\n\t\treturn nullptr;\n\t}\n\tconst PIMAGE_FILE_HEADER FileHeader = (const PIMAGE_FILE_HEADER)(Signature + 1);\n\tif (FileHeader->SizeOfOptionalHeader != sizeof IMAGE_OPTIONAL_HEADER32)\n\t{\n\t\treturn nullptr;\n\t}\n\tconst PIMAGE_OPTIONAL_HEADER OptionalHeader = (const PIMAGE_OPTIONAL_HEADER32)(FileHeader + 1);\n\tif (OptionalHeader->Magic != IMAGE_NT_OPTIONAL_HDR32_MAGIC)\n\t{\n\t\treturn nullptr;\n\t}\n\n\treturn (const PIMAGE_NT_HEADERS32)Signature;\n}\n\n#include <iostream>\n#include <iomanip>\n\n// 32\u30d3\u30c3\u30c8PE\u30d5\u30a1\u30a4\u30eb\u306eCLI\u30d8\u30c3\u30c0\u30fc\u60c5\u5831\u3092\u8868\u793a\u3057\u307e\u3059\u3002\nvoid main()\n{\n\tstd::wcout.imbue(std::locale(\"ja\"));\n\n\t// CLI\u30d8\u30c3\u30c0\u30fc\u3092\u78ba\u8a8d\u3059\u308b\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306e\u5834\u6240\n\tLPCWSTR path = <\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u6307\u5b9a\u3057\u3066\u4e0b\u3055\u3044>;\n\n\tHANDLE FileHandle = CreateFileW(path, GENERIC_READ,\n\t\tFILE_SHARE_READ, nullptr, OPEN_EXISTING, 0, nullptr);\n\tif (FileHandle == INVALID_HANDLE_VALUE)\n\t{\n\t\tstd::wcout << L\"\u30d5\u30a1\u30a4\u30eb\u30cf\u30f3\u30c9\u30eb\u304c\u958b\u3051\u307e\u305b\u3093\u3067\u3057\u305f\u3002\" << std::endl;\n\t\treturn;\n\t}\n\tHANDLE FileMapHandle = CreateFileMappingW(FileHandle, nullptr, PAGE_READONLY, 0, 0, nullptr);\n\tif (FileMapHandle == nullptr)\n\t{\n\t\tstd::wcout << L\"\u30d5\u30a1\u30a4\u30eb\u30de\u30c3\u30d4\u30f3\u30b0\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u4f5c\u6210\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\" << std::endl;\n\t\treturn;\n\t}\n\tLPCBYTE Base = (LPCBYTE)MapViewOfFile(FileMapHandle, FILE_MAP_READ, 0, 0, 0);\n\tif (Base == nullptr)\n\t{\n\t\tstd::wcout << L\"\u30d5\u30a1\u30a4\u30eb\u30de\u30c3\u30d4\u30f3\u30b0\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d3\u30e5\u30fc\u304c\u4f5c\u6210\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\" << std::endl;\n\t\treturn;\n\t}\n\n\tconst PIMAGE_NT_HEADERS32 NTHeaders = ImageCheckPE32(Base);\n\tif (ImageCheckPE32 == nullptr)\n\t{\n\t\tstd::wcout << L\"\u30d5\u30a1\u30a4\u30eb\u306f32\u30d3\u30c3\u30c8PE\u5f62\u5f0f\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\" << std::endl;\n\t\treturn;\n\t}\n\n\t// IMAGE_COR2_HEADER\u306fIMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR\u306b\u914d\u7f6e\u3055\u308c\u307e\u3059\n\tconst PIMAGE_DATA_DIRECTORY ComDescDir = &NTHeaders->OptionalHeader.DataDirectory[\n\t\tIMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR];\n\tconst PIMAGE_COR20_HEADER CorHeader = (const PIMAGE_COR20_HEADER)(\n\t\tImageRVAToVA32(Base, NTHeaders, ComDescDir->VirtualAddress));\n\tif (CorHeader == nullptr)\n\t{\n\t\tstd::wcout << L\"\u30d5\u30a1\u30a4\u30eb\u306fCLI\u30d8\u30c3\u30c0\u30fc\u3092\u542b\u307f\u307e\u305b\u3093\u3002\" << std::endl;\n\t\treturn;\n\t}\n\n\t// CLI\u30d8\u30c3\u30c0\u30fc\u60c5\u5831\u306e\u51fa\u529b\n\tstd::wcout << L\"IMAGE_COR20_HEADER\" << std::endl;\n\tstd::wcout << L\"\u30e9\u30f3\u30bf\u30a4\u30e0\u306e\u30d0\u30fc\u30b8\u30e7\u30f3: \"\n\t\t<< CorHeader->MajorRuntimeVersion\n\t\t<< L\".\"\n\t\t<< CorHeader->MinorRuntimeVersion\n\t\t<< std::endl;\n\tstd::wcout << L\"\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba: \"\n\t\t<< CorHeader->MetaData.Size\n\t\t<< std::endl;\n\tstd::wcout << L\"\u30d5\u30e9\u30b0: 0x\"\n\t\t<< std::hex << std::setfill(L'0') << std::setw(8) << CorHeader->Flags\n\t\t<< std::endl;\n\tstd::wcout << L\"\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8: 0x\"\n\t\t<< std::hex << std::setfill(L'0') << std::setw(8) << CorHeader->EntryPointRVA\n\t\t<< L\" (\"\n\t\t<< (CorHeader->Flags & COMIMAGE_FLAGS_NATIVE_ENTRYPOINT ? L\"Native\" : L\"Managed\")\n\t\t<< L\")\"\n\t\t<< std::endl;\n\n\tUnmapViewOfFile(Base);\n\tCloseHandle(FileMapHandle);\n\tCloseHandle(FileHandle);\n}\n```\n\n```plain:\u51fa\u529b\u4f8b\nIMAGE_COR20_HEADER\n\u30e9\u30f3\u30bf\u30a4\u30e0\u306e\u30d0\u30fc\u30b8\u30e7\u30f3: 2.5\n\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba: 4,772\n\u30d5\u30e9\u30b0: 0x00000001\n\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8: 0x00000000 (Managed)\n```\n", "tags": ["Windows", "C++", "C++11"]}