{"context": "\u4eca\u5e74\u306e\u59cb\u3081\u3001\u79c1\u304c Rust \u3092\u7fd2\u3044\u306f\u3058\u3081\u306e\u3053\u308d\u3001\u624b\u672c\u3068\u306a\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3042\u307e\u308a\u898b\u3064\u304b\u3089\u306a\u3044\u3053\u3068\u304c\u4e0d\u6e80\u3067\u3057\u305f\u3002GitHub \u3067\u63a2\u305b\u3070\u3001Rust \u3067\u66f8\u304b\u308c\u305f\u5b9f\u7528\u7684\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u304c\u6570\u591a\u304f\u898b\u3064\u304b\u308a\u307e\u3059\u304c\u3001\u305d\u308c\u3089\u3092\u8aad\u3080\u306e\u306f\u5165\u9580\u8005\u306b\u3068\u3063\u3066\u306f\u6577\u5c45\u304c\u9ad8\u904e\u304e\u307e\u3059\u3002\u79c1\u304c\u6b32\u3057\u304b\u3063\u305f\u306e\u306f\u3001\u5b66\u7fd2\u7528\u306b\u66f8\u304b\u308c\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3001\u5165\u9580\u8005\u304c\u624b\u8efd\u306b\u8a66\u305b\u3066\u3001\u3044\u308d\u3044\u308d\u3068\u3044\u3058\u308c\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u4f8b\u3067\u3057\u305f\u3002\n\u305d\u3093\u306a\u308f\u3051\u3067\u3001\u305d\u3046\u3044\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u4f8b\u3092\u66f8\u3044\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\uff12\u56de\u306b\u5206\u3051\u3066\u3001Rust \u3067\u7c21\u5358\u306a\u30c4\u30fc\u30eb\u3092\u4f5c\u308a\u307e\u3059\u3002\n\u4eca\u56de\u306f\u4e71\u629e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u4e00\u7a2e\u3067\u3042\u308b\u3001probability cardinarity estimatior\uff08\u78ba\u7387\u7684\u30ab\u30fc\u30c7\u30a3\u30ca\u30ea\u30c6\u30a3\u63a8\u5b9a\u6a5f\uff09\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002HyperLogLog \u3068\u3044\u3046\u540d\u524d\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3059\u3002\n\u6b21\u56de\u306f HyperLogLog \u3092\u4f7f\u3063\u3066\u3001\u30a6\u30a3\u30ad\u30da\u30c7\u30a3\u30a2\u65e5\u672c\u8a9e\u7248\u306e\u5168\u8a18\u4e8b\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u30e6\u30cb\u30fc\u30af\u5358\u8a9e\u6570\u3092\u3001\u30d7\u30e9\u30b9\u30de\u30a4\u30ca\u30b9\u7d04 2% \u306e\u8aa4\u5dee\u3067\u63a8\u5b9a\u3057\u307e\u3059\u3002\u3061\u306a\u307f\u306b\u3001\u30a6\u30a3\u30ad\u30da\u30c7\u30a3\u30a2\u65e5\u672c\u8a9e\u7248\u306b\u306f\u7d04100\u4e07\u500b\u306e\u8a18\u4e8b\u304c\u3042\u308a\u3001\u305d\u306e\u30a2\u30fc\u30ab\u30a4\u30d6\u30d5\u30a1\u30a4\u30eb\u306e\u30b5\u30a4\u30ba\u306f\u3001bzip2 \u5f62\u5f0f\u3067\u5727\u7e2e\u3055\u308c\u305f\u72b6\u614b\u3067 2.2GB \u304f\u3089\u3044\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u6b21\u56de\u3001\u30de\u30eb\u30c1\u30b3\u30a2\u306b\u3088\u308b\u4e26\u5217\u51e6\u7406\u3067\u3001DB \u306a\u3069\u306f\u4f7f\u308f\u305a\u306b\u30e1\u30e2\u30ea\u30fc\u4e0a\u3067\u30ab\u30a6\u30f3\u30c8\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u65e5\u672c\u8a9e\u306e\u5358\u8a9e\u306e\u5207\u308a\u51fa\u3057\u3068\u54c1\u8a5e\u306e\u5224\u5b9a\u306b\u306f\u3001MeCab \u306e C API \u3092\u4f7f\u3044\u307e\u3059\u3002\n\uff08\u672c\u6587\u306e\u5f8c\u534a\u304c\u307e\u3060\u66f8\u304d\u304b\u3051\u3067\u3059\u304c\u3001Rust Advent Calendar \uff11\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u306e\u3067\u3001\u3053\u3053\u3067\u516c\u958b\u3057\u3066\u3001\u5f90\u3005\u306b\u66f8\u304d\u9032\u3081\u3066\u3044\u304f\u3053\u3068\u306b\u3057\u307e\u3059\u3002\u6700\u8fd1\u3001\u3053\u3093\u306a\u306e\u3070\u3063\u304b\u308a\u3067\u3001\u3057\u304b\u3082\u3001\u3044\u3064\u3082\u672a\u5b8c\u3067\u3059\u307f\u307e\u305b\u3093\uff09\n\nHyperLogLog \u3068\u306f\uff1f\nHyperLogLog \u306f\u78ba\u7387\u7684\u30ab\u30fc\u30c7\u30a3\u30ca\u30ea\u30c6\u30a3\u63a8\u5b9a\u6a5f\u306e\u4e00\u7a2e\u3067\u3059\u3002\u305d\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u3001\u3053\u3061\u3089\u306e\u8ad6\u6587\u3067\u89e3\u8aac\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\nFlajolet, P.; Fusy, E.; Gandouet, O.; Meunier, F. (2007) -- HyperLogLog: the analysis of a near-optimal cardinality estimation algorithm\uff08PDF\u5f62\u5f0f\uff09\n\n\u3067\u306f\u300c\u30ab\u30fc\u30c7\u30a3\u30ca\u30ea\u30c6\u30a3\u300d\u3068\u306f\u306a\u3093\u3067\u3057\u3087\u3046\u304b\uff1f IT\u3001\u7279\u306b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u4e16\u754c\u3067\u306f\u3001\u3053\u306e\u7528\u8a9e\u306b\u3064\u3044\u3066\u5fae\u5999\u306b\u7570\u306a\u308b\u89e3\u91c8\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u304c\u3001cardinarity estimatior \u306e\u4e16\u754c\u306b\u9650\u3063\u3066\u8a00\u3046\u3068\u3001\u300c\u96c6\u5408\u306b\u542b\u307e\u308c\u308b\u5024\u306e\u3001\u7570\u306a\u308a\u6570\u300d\u3068\u8003\u3048\u3066\u3088\u3055\u305d\u3046\u3067\u3059\u3002\u5e73\u305f\u304f\u8a00\u3046\u3068\u300cdistinct \u306a\u5024\u306e\u6570\u300d\u3067\u3059\u3002\nHyperLogLog \u306f\u3001\u78ba\u7387\u7684\u306a\u624b\u6cd5\u306b\u57fa\u3065\u3044\u3066\u3001\u4e0e\u3048\u3089\u308c\u305f\u5024\u306e\u96c6\u5408\u306e\u30ab\u30fc\u30c7\u30a3\u30ca\u30ea\u30c6\u30a3\u3092\u63a8\u6e2c\u3059\u308b\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3059\u3002\u4f8b\u3048\u3070\u3001HyperLogLog \u306b\u3001\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u306e\u30a2\u30af\u30bb\u30b9\u30ed\u30b0\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8 IP \u30a2\u30c9\u30ec\u30b9\u3092\u4e0e\u3048\u308b\u3068\u3001\u30e6\u30cb\u30fc\u30af\u30d3\u30b8\u30bf\u30fc\u6570\u304c\u3042\u308b\u7a0b\u5ea6\u306e\u8aa4\u5dee\u306e\u7bc4\u56f2\u3067\u63a8\u5b9a\u3067\u304d\u307e\u3059\u3002\n\u3068\u3053\u308d\u3067\u3001\u3082\u3057 HyperLogLog \u306e\u3088\u3046\u306a\u3082\u306e\u304c\u306a\u304b\u3063\u305f\u3068\u3057\u305f\u3089\u3001\u3069\u3046\u3084\u3063\u3066\u7570\u306a\u308a\u6570\u3092\u6c42\u3081\u308b\u3067\u3057\u3087\u3046\u304b\u3002\u7d20\u6734\u306a\u65b9\u6cd5\u3068\u3057\u3066\u3001HashSet \u3092\u4f7f\u3046\u3053\u3068\u304c\u8003\u3048\u3089\u308c\u307e\u3059\u3002HashSet \u306b IP \u30a2\u30c9\u30ec\u30b9\u306e\u3088\u3046\u306a\u5024\u3092\u3069\u3093\u3069\u3093\u8a70\u3081\u3066\u3044\u304f\u3068\u91cd\u8907\u304c\u53d6\u308a\u9664\u304b\u308c\u305f\u5024\u304c\u6b8b\u308a\u307e\u3059\u306e\u3067\u3001\u305d\u306e\u8981\u7d20\u6570\u3092\u8abf\u3079\u308c\u3070\u3044\u3044\u308f\u3051\u3067\u3059\u3002\u3053\u306e\u65b9\u6cd5\u306f\u30b7\u30f3\u30d7\u30eb\u3067\u3059\u304c\u3001\u7570\u306a\u308a\u6570\u306e\u5206\u3060\u3051\u30e1\u30e2\u30ea\u30fc\u3092\u6d88\u8cbb\u3059\u308b\u3068\u3044\u3046\u6b20\u70b9\u304c\u3042\u308a\u307e\u3059\u3002\u30c7\u30fc\u30bf\u91cf\u304c\u81a8\u5927\u306a\u5834\u5408\u3001\u30e1\u30e2\u30ea\u30fc\u3092\u4f7f\u3044\u679c\u305f\u3057\u3066\u3057\u307e\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u4e00\u65b9\u3001HyperLogLog \u306f\u3001\u308f\u305a\u304b\u7d04 1.5KB \u306e\u30e1\u30e2\u30ea\u30fc\u4f7f\u7528\u91cf\u3067\u3001\u5341\u5104\u3092\u4e0a\u56de\u308b\u6570\u306e\u7570\u306a\u308a\u6570\u3092\u3001\u30d7\u30e9\u30b9\u30de\u30a4\u30ca\u30b9\uff12\uff05\u7a0b\u5ea6\u306e\u8aa4\u5dee\u3067\u63a8\u5b9a\u3067\u304d\u307e\u3059\u3002\n\u307e\u305f\u3001HyperLogLog \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u306f\u3001\uff12\u3064\u306e HyperLogLog \u30c7\u30fc\u30bf\u69cb\u9020\uff08\u4ee5\u964d\u300c\u63a8\u5b9a\u6a5f\u300d\u3068\u547c\u3073\u307e\u3059\uff09\u3092\uff11\u3064\u306b\u30de\u30fc\u30b8\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u5148\u307b\u3069\u306e\u30e6\u30cb\u30fc\u30af\u30d3\u30b8\u30bf\u30fc\u306e\u4f8b\u3067\u3001\u4eee\u306b\u30a2\u30af\u30bb\u30b9\u30ed\u30b0\u304c\u5927\u91cf\u306b\u3042\u3063\u3066\uff11\u53f0\u306e\u30de\u30b7\u30f3\u3067\u51e6\u7406\u3057\u304d\u308c\u306a\u304b\u3063\u305f\u3068\u3057\u307e\u3057\u3087\u3046\u3002\u3053\u3093\u306a\u6642\u306f\u3001\u8907\u6570\u53f0\u306e\u30de\u30b7\u30f3\u306b\u30a2\u30af\u30bb\u30b9\u30ed\u30b0\u3092\u5206\u914d\u3057\u3001\u305d\u308c\u305e\u308c\u306b\u500b\u5225\u306e\u63a8\u5b9a\u6a5f\u3092\u6301\u305f\u305b\u3066\u51e6\u7406\u3057\u307e\u3059\u3002\u51e6\u7406\u304c\u7d42\u308f\u3063\u305f\u3089\u3001\u5168\u30de\u30b7\u30f3\u304b\u3089\u63a8\u5b9a\u6a5f\u3092\u96c6\u3081\u3066\u30de\u30fc\u30b8\u3059\u308b\u3053\u3068\u3067\u3001\u5168\u4f53\u306e\u30e6\u30cb\u30fc\u30af\u30d3\u30b8\u30bf\u30fc\u6570\u304c\u6c42\u3081\u3089\u308c\u307e\u3059\u3002\n\u4ed6\u306b\u3082\u3001\u65e5\u6bce\u306b\u63a8\u5b9a\u6a5f\u3092\u4f5c\u6210\u3057\u3066\u304a\u3051\u3070\u3001\u5f8c\u3067\u3001\u6708\u9593\u3084\u5e74\u9593\u306e\u30e6\u30cb\u30fc\u30af\u30d3\u30b8\u30bf\u30fc\u6570\u304c\u77e5\u308a\u305f\u304f\u306a\u3063\u305f\u3068\u304d\u3067\u3082\u3001\u30de\u30fc\u30b8\u306b\u3088\u308a\u77ac\u6642\u306b\u63a8\u5b9a\u3067\u304d\u307e\u3059\u3002\n\n\u4eca\u56de\u4f5c\u308b\u3082\u306e\n\u3067\u306f\u3001\u4eca\u56de\u3069\u3093\u306a\u3082\u306e\u304c\u3067\u304d\u308b\u304b\u3001\u305d\u306e\u5b9f\u884c\u7d50\u679c\u3092\u304a\u898b\u305b\u3057\u307e\u3057\u3087\u3046\u3002\u3053\u3053\u3067\u306f\u3001HyperLogLog \u306b50\u4e07\u4ef6\u306e\u30e6\u30cb\u30fc\u30af\u5024\u3092\u30a4\u30f3\u30b5\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n% cargo test --release -- --nocapture --test-threads 1\n...\n\nrunning 2 tests\ntest tests::intermediate_range_with_merge_operation ...\n\n=== Loading 500000 items to hll1 and hll2.  <= \uff12\u3064\u306e\u63a8\u5b9a\u6a5f\u305d\u308c\u305e\u308c\u306b\u3001\u30e6\u30cb\u30fc\u30af\u5024\u3092\n                                                50\u4e07\u4ef6\u305a\u3064\u30a4\u30f3\u30b5\u30fc\u30c8\u3002\n\n\uff08\uff11\u3064\u76ee\u306e\u63a8\u5b9a\u6a5f\u306e\u60c5\u5831\uff09\n\n======================================================\nerror rate:\n  typical: 1.6250%   <== \u5178\u578b\u7684\u306a\u8aa4\u5dee\n  actual:  0.2573%   <== \u5b9f\u969b\u306e\u8aa4\u5dee\uff08\u5b9f\u884c\u3059\u308b\u6bce\u306b\u5909\u308f\u308b\uff09\n\nHyperLogLog\n  estimated cardinality: 498713.696162264  <== \u63a8\u5b9a\u5024\n  estimation method:     HyperLogLog       <== \u63a8\u5b9a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n  -----------------------------------------------------\n  b:      12 bits (typical error rate: 1.625%)\n  m:      4096 registers\n  alpha:  0.7211100396160289\n  hasher: (1527868593550391469, 4150425632492557278)\n\n  0: 0\n  1: 0\n  2: 0\n  3: 0\n  4: 0\n  5: **** 86\n  6: *********************** 538\n  7: **************************************** 963\n  8: **************************************** 971\n  9: **************************** 667\n 10: ***************** 401\n 11: ********** 238\n 12: ***** 121\n 13: *** 49\n 14: ** 32\n 15: * 18\n 16: * 5\n 17: * 5\n 18: 0\n 19: * 2\n\n...\n\n\u6700\u5f8c\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\uff08\u6a2a\u68d2\u30b0\u30e9\u30d5\uff09\u306f\u3001\u30ec\u30b8\u30b9\u30bf\u30fc\u3068\u547c\u3070\u308c\u308b\u300c\u30ab\u30a6\u30f3\u30bf\u30fc\u306e\u96c6\u5408\u4f53\u300d\u306b\u683c\u7d0d\u3055\u308c\u305f\u30ab\u30a6\u30f3\u30c8\u5024\u306e\u5206\u5e03\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002\u4e0a\u306e\u4f8b\u3067\u3059\u3068\u3001\u30ab\u30a6\u30f3\u30c8\u5024\u3068\u3057\u3066 0 \u304c\u5165\u3063\u3066\u3044\u308b\u30ec\u30b8\u30b9\u30bf\u306f 0 \u500b\u30021 \u304c\u5165\u3063\u3066\u3044\u308b\u30ec\u30b8\u30b9\u30bf\u3082 0 \u500b\u3067\u30015 \u304c\u5165\u3063\u3066\u3044\u308b\u30ec\u30b8\u30b9\u30bf\u306f 86 \u500b\u30016 \u304c\u5165\u3063\u3066\u3044\u308b\u30ec\u30b8\u30b9\u30bf\u306f 538 \u500b\u3067\u3057\u305f\u3002\u3053\u3053\u3067\u306f\u30ec\u30b8\u30b9\u30bf\u304c\u5408\u8a08\u3067 4096 \u500b\u3042\u308a\u3001\u305d\u308c\u3089\u306b\u5165\u3063\u3066\u3044\u305f\u5024\u306e\u6700\u5927\u5024\u306f 19 \u3067\u3057\u305f\u3002\n\u3053\u306e\u30ab\u30a6\u30f3\u30c8\u5024\u306e\u610f\u5473\u306b\u3064\u3044\u3066\u306f\u3001\u6b21\u306e\u7ae0\u3067\u8aac\u660e\u3057\u307e\u3059\u3002\n\nHyperLogLog \u306e\u3057\u304f\u307f\nHyperLogLog \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u6838\u306f\u4ee5\u4e0b\u306e\uff12\u3064\u3067\u3059\u3002\n\n\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u306b\u3088\u3063\u3066\u751f\u6210\u3055\u308c\u308b\u30e9\u30f3\u30c0\u30e0\u6027\u3092\u6301\u3064\u5024\n\u78ba\u7387\u306b\u57fa\u3065\u304f\u63a8\u5b9a\n\n\n\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u306b\u3088\u3063\u3066\u751f\u6210\u3055\u308c\u308b\u30e9\u30f3\u30c0\u30e0\u6027\u3092\u6301\u3064\u5024\n\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u304c\u3069\u3046\u3044\u3046\u3082\u306e\u304b\u306f\u3001\u77e5\u3063\u3066\u3044\u308b\u4eba\u304c\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u3042\u308b\u30c7\u30fc\u30bf\uff08\u6570\u5024\u3067\u3082\u6587\u5b57\u5217\u3067\u3082\uff09\u3092\u4e0e\u3048\u308b\u3068\u3001\u305d\u308c\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5024\uff08\u30cf\u30c3\u30b7\u30e5\u5024\uff09\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\n\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u306b\u306f\u3055\u307e\u3056\u307e\u306a\u304c\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001Rust \u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u306f SipHash \u3067\u3059\u3002\u3053\u308c\u306f\u4efb\u610f\u306e\u30d0\u30a4\u30c8\u6570\u306e\u30c7\u30fc\u30bf\u3068\u3001128\u30d3\u30c3\u30c8\u306e\u79d8\u5bc6\u9375\u3092\u5165\u529b\u306b\u3057\u3066\u3001\u30cf\u30c3\u30b7\u30e5\u5024\u3068\u3057\u306664\u30d3\u30c3\u30c8\u306e\u7b26\u53f7\u306a\u3057\u6574\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u306b\u306f\u3001\u305d\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u8a55\u4fa1\u3059\u308b\u305f\u3081\u306e\u6307\u91dd\u304c\u3044\u304f\u3064\u304b\u3042\u308a\u3001\u4ee3\u8868\u7684\u306a\u3082\u306e\u3068\u3057\u3066\u4ee5\u4e0b\u306e\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002\uff08\u30a6\u30a3\u30ad\u30da\u30c7\u30a3\u30a2\u306e\u300c\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u300d\u3088\u308a\u5f15\u7528\uff09\n\n\u4e00\u69d8\u6027\uff1a\u826f\u3044\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u306f\u3001\u8003\u3048\u3089\u308c\u308b\u5165\u529b\u7bc4\u56f2\u304c\u51fa\u529b\u7bc4\u56f2\u5168\u4f53\u306b\u306a\u308b\u3079\u304f\u4e00\u69d8\u306b\u5206\u5e03\u3059\u308b\u3088\u3046\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u884c\u3046\u3002\u3064\u307e\u308a\u3001\u51fa\u529b\u7bc4\u56f2\u306e\u305d\u308c\u305e\u308c\u306e\u30cf\u30c3\u30b7\u30e5\u5024\u306f\u307b\u307c\u540c\u3058\u78ba\u7387\u3067\u751f\u6210\u3055\u308c\u308b\u3079\u304d\u3067\u3042\u308b\u3002\u3053\u306e\u3088\u3046\u306a\u6761\u4ef6\u304c\u3042\u308b\u306e\u306f\u3001\u7570\u306a\u308b\u5165\u529b\u304c\u540c\u3058\u30cf\u30c3\u30b7\u30e5\u5024\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u3066\u3057\u307e\u3046\u300c\u885d\u7a81\u300d\u304c\u767a\u751f\u3059\u308b\u3068\u3001\u30cf\u30c3\u30b7\u30e5\u306b\u57fa\u3065\u304f\u5404\u7a2e\u6280\u6cd5\u306e\u30b3\u30b9\u30c8\u306f\u885d\u7a81\u767a\u751f\u56de\u6570\u3068\u5171\u306b\u5897\u5927\u3059\u308b\u305f\u3081\u3067\u3042\u308b\u3002\n\u9023\u7d9a\u6027\uff1a\uff08\u7b49\u3057\u3044\u30c7\u30fc\u30bf\u3067\u306f\u306a\u304f\uff09\u985e\u4f3c\u3059\u308b\u30c7\u30fc\u30bf\u3092\u63a2\u7d22\u3059\u308b\u7528\u9014\u3067\u306f\u3001\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u306f\u53ef\u80fd\u306a\u9650\u308a\u9023\u7d9a\u3068\u306a\u3063\u3066\u3044\u308b\u3079\u304d\u3067\u3042\u308b\u3002\u5c11\u3057\u3060\u3051\u7570\u306a\u308b\u5165\u529b\u306b\u5bfe\u3057\u3066\u306f\u3001\u540c\u3058\u30cf\u30c3\u30b7\u30e5\u5024\u304b\u3054\u304f\u8fd1\u3044\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u751f\u6210\u3059\u3079\u304d\u3067\u3042\u308b\u3002\u306a\u304a\u3001\u9023\u7d9a\u6027\u306f\u30c1\u30a7\u30c3\u30af\u30b5\u30e0\u3084\u6697\u53f7\u5b66\u7684\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u306a\u3069\u306b\u3068\u3063\u3066\u306f\u4e0d\u9069\u5207\u306a\u7279\u6027\u3067\u3042\u308b\u3002\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u306b\u9023\u7d9a\u6027\u304c\u5fc5\u8981\u3068\u306a\u308b\u7528\u9014\u306f\u3001\u7dda\u578b\u63a2\u7d22\u3092\u4f7f\u3046\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306a\u3069\u306e\u7528\u9014\u3067\u3042\u308b\u3002\n\nHyperLogLog \u3067\u306f\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u3092\u7528\u3044\u307e\u3059\u304c\u3001\u305d\u3053\u3067\u306f\u3001\u4e00\u69d8\u6027\u304c\u3042\u3063\u3066\u3001\u9023\u7d9a\u6027\u304c \u306a\u3044 \u3082\u306e\u304c\u6c42\u3081\u3089\u308c\u307e\u3059\u3002SipHash \u306f\u305d\u306e\u8981\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u306f\u3001\u3042\u308b\u610f\u5473\u3001\u4e71\u6570\u751f\u6210\u6a5f\u306b\u8fd1\u3044\u3082\u306e\u3068\u306a\u308a\u307e\u3059\u3002\u985e\u4f3c\u3059\u308b\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u305f\u6642\u306b\u3001\u975e\u9023\u7d9a\u3067\u300164\u30d3\u30c3\u30c8\u7b26\u53f7\u306a\u3057\u6574\u6570\u304c\u3068\u308a\u3046\u308b\u5024\u306e\u7bc4\u56f2\u306b\u4e00\u69d8\u306b\u5206\u5e03\u3057\u305f\u30cf\u30c3\u30b7\u30e5\u5024\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u751f\u6210\u3055\u308c\u305f\u30cf\u30c3\u30b7\u30e5\u5024\u304c\u3001\u307e\u308b\u3067\u4e71\u6570\u306e\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002\n\n\u78ba\u7387\u306b\u57fa\u3065\u304f\u63a8\u5b9a\n\u5148\u307b\u3069\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u898b\u305b\u307e\u3057\u305f\u3002\u3053\u308c\u306f\u3001\u30ec\u30b8\u30b9\u30bf\u30fc\u3068\u547c\u3070\u308c\u308b\u300c\u30ab\u30a6\u30f3\u30bf\u30fc\u306e\u96c6\u5408\u4f53\u300d\u306b\u683c\u7d0d\u3055\u308c\u305f\u30ab\u30a6\u30f3\u30c8\u5024\u306e\u5206\u5e03\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002\n  0: 0\n  1: 0\n  2: 0\n  3: 0\n  4: 0\n  5: **** 86\n  6: *********************** 538\n  7: **************************************** 963\n  8: **************************************** 971\n  9: **************************** 667\n 10: ***************** 401\n 11: ********** 238\n 12: ***** 121\n 13: *** 49\n 14: ** 32\n 15: * 18\n 16: * 5\n 17: * 5\n 18: 0\n 19: * 2\n\n\u3053\u306e\u30ab\u30a6\u30f3\u30c8\u5024\u306f\u3001\u4f55\u3092\u610f\u5473\u3057\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f \u4f8b\u3048\u308b\u306a\u3089\u3001\u30b3\u30a4\u30f3\u3092\u9023\u7d9a\u3057\u3066\u6295\u3052\u3066\u3001\u8868\u304c\u51fa\u308b\u307e\u3067\u306b\u6295\u3052\u305f\u56de\u6570\u3067\u3059\u3002\u4f8b\u3048\u3070\u30015 \u304c\u5165\u3063\u3066\u3044\u308b\u30ec\u30b8\u30b9\u30bf\u3067\u306f\u3001\u30b3\u30a4\u30f3\u3092\u6295\u3052\u305f\u3068\u3053\u308d\u3001\uff14\u56de\u9023\u7d9a\u3057\u3066\u88cf\u304c\u51fa\u3066\u3001\uff15\u56de\u76ee\u306b\u3084\u3063\u3068\u8868\u304c\u51fa\u305f\u3053\u3068\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002\nSipHash \u306f\u3001\u30cf\u30c3\u30b7\u30e5\u5024\u3068\u3057\u306664\u30d3\u30c3\u30c8\u306e\u7b26\u53f7\u306a\u3057\u6574\u6570\u3092\u8fd4\u3057\u3001\u305d\u306e\u5024\u306f\u3001\u307e\u308b\u3067\u4e71\u6570\u306e\u3088\u3046\u306b\u3001\u30cf\u30c3\u30b7\u30e5\u5024\u304c\u3068\u308a\u3046\u308b\u5024\u306e\u7bc4\u56f2\u306b\u4e00\u69d8\u306b\u5206\u5e03\u3057\u3066\u3044\u308b\u3068\u8a00\u3044\u307e\u3057\u305f\u3002\u3053\u306e\u30cf\u30c3\u30b7\u30e5\u5024\u3092\uff12\u9032\u6570\u3067\u8868\u3057\u3066\u307f\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\"test01\" \u3068\u3044\u3046\u6587\u5b57\u5217\u3068\u3001\"test02\" \u3068\u3044\u3046\u6587\u5b57\u5217\u306b\u3064\u3044\u3066\u3001\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u6c42\u3081\u305f\u3068\u3053\u308d\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\uff12\u9032\u6570\u304c\u5f97\u3089\u308c\u305f\u3068\u3057\u307e\u3059\u3002\n\u30cf\u30c3\u30b7\u30e5\u5024\u306e\u4f8b\n\n\n\"test01\" \u2192 0100 1001 1101 0010 ... 1011\n\n\"test02\" \u2192 1001 1011 1110 0110 ... 0011\n\n\u3053\u306e\u6570\u5217\u3092\u5de6\u304b\u3089\u898b\u3066\u30010 \u306f\u30b3\u30a4\u30f3\u306e\u88cf\u30011 \u306f\u30b3\u30a4\u30f3\u306e\u8868\u3060\u3068\u3057\u307e\u3059\u3002\n\u30b3\u30a4\u30f3\u6295\u3052\u306e\u7d50\u679c\n\n\n\"test01\" \u2192 01 \u2192 \uff12\u56de\u76ee\u3067\u8868\u304c\u51fa\u305f\n\n\"test02\" \u2192 1  \u2192 \uff11\u56de\u76ee\u3067\u8868\u304c\u51fa\u305f\n\nHyperLogLog \u3067\u306f\u3001\u5024\u3092\u30a4\u30f3\u30b5\u30fc\u30c8\u3059\u308b\u5ea6\u306b\u3001\u305d\u306e\u5024\u306b\u5bfe\u3059\u308b\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u6c42\u3081\u3001\u30b3\u30a4\u30f3\u6295\u3052\u306e\u3088\u3046\u306b\u3001\u5de6\u304b\u3089\u4f55\u30d3\u30c3\u30c8\u76ee\u3067 1 \u304c\u51fa\u73fe\u3057\u305f\u304b\u3092\u8abf\u3079\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u30ec\u30b8\u30b9\u30bf\u6bce\u306b\u3001\u305d\u306e\u6700\u5927\u5024\u3092\u8a18\u9332\u3057\u307e\u3059\u3002\n\u305d\u3057\u3066\u3053\u3053\u304c\u91cd\u8981\u306a\u306e\u3067\u3059\u304c\u3001\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u306f\u540c\u3058\u5165\u529b\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u3001\u540c\u3058\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u51fa\u529b\u3057\u307e\u3059\u306e\u3067\u3001\u540c\u3058\u5165\u529b\u30c7\u30fc\u30bf\u304c\u4f55\u5ea6\u73fe\u308c\u3066\u3082\u3001\u305d\u306e\u6700\u5927\u5024\u306e\u8a18\u9332\u306b\u306f\u5f71\u97ff\u3057\u306a\u3044\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u30c7\u30fc\u30bf\u306e\u91cd\u8907\u304c\u306a\u304b\u3063\u305f\u3082\u306e\u3068\u3057\u3066\u53d6\u308a\u9664\u304b\u308c\u3001\u7d50\u679c\u7684\u306b\u3001\u7570\u306a\u308a\u5024\u306e\u6570\u306e\u5206\u3060\u3051\u3001\u30b3\u30a4\u30f3\u6295\u3052\u3092\u3057\u305f\u3053\u3068\u3068\u540c\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\u4e0a\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3067\u306f 19\u56de\u3068\u8a18\u9332\u3055\u308c\u3066\u3044\u305f\u30ec\u30b8\u30b9\u30bf\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u308c\u306f\u3064\u307e\u308a\u3001\u88cf\u304c18\u56de\u3082\u7d9a\u3044\u3066\u51fa\u305f\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u305d\u306e\u78ba\u7387\u304c\u76f8\u5f53\u4f4e\u3044\u3053\u3068\u306f\u611f\u899a\u3067\u5206\u304b\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\uff1f \u4e00\u4f53\u4f55\u56de\u30b3\u30a4\u30f3\u6295\u3052\u3092\u3057\u305f\u306e\u3067\u3057\u3087\u3046\u304b\u3002\u88cf\u304c18\u56de\u7d9a\u3051\u3066\u51fa\u308b\u78ba\u7387\u306f\u30012\u306e18\u4e57\u5206\u306e1\u3001\u3064\u307e\u308a\u300126\u4e072\u5343144\u5206\u306e1\u3067\u3059\u3002\u3068\u3044\u3046\u3053\u3068\u306f\u3001\u78ba\u7387\u7684\u306b\u8003\u3048\u308b\u3068\u3001\u5e73\u5747\u7684\u306b\u3001\u7570\u306a\u308a\u5024\u309226\u4e072\u5343144\u7a2e\u985e\u51e6\u7406\u3059\u308b\u3068\u3001\u3053\u306e\u8a18\u9332\u304c\u51fa\u308b\u3068\u4e88\u60f3\u3067\u304d\u307e\u3059\u3002\u8a00\u3044\u63db\u3048\u308b\u3068\u3001\u7570\u306a\u308a\u5024\u304c26\u4e072\u5343144\u7a2e\u985e\u304f\u3089\u3044\u3042\u3063\u305f\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u63a8\u5b9a\u3067\u304d\u307e\u3059\u3002\n\u3053\u308c\u304c\u3001HyperLogLog \u306e\u57fa\u672c\u7684\u306a\u3057\u304f\u307f\u3067\u3059\u3002\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u306b\u3088\u308a\u30c7\u30fc\u30bf\u306e\u91cd\u8907\u3092\u53d6\u308a\u9664\u304d\u3064\u3064\u4e71\u6570\u3092\u5f97\u3066\u3001\u30d3\u30c3\u30c8\u5217\u306b1\u304c\u51fa\u73fe\u3059\u308b\u4f4d\u7f6e\u306e\u6700\u5927\u5024\u3092\u8a18\u9332\u3059\u308b\u3053\u3068\u3067\u3001\u78ba\u7387\u7684\u306a\u63a8\u5b9a\u3092\u884c\u3044\u307e\u3059\u3002\n\u3053\u3053\u3067\uff11\u3064\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002\u88cf\u304c18\u56de\u7d9a\u3051\u3066\u51fa\u308b\u78ba\u7387\u306f26\u4e072\u5343144\u5206\u306e1\u3060\u3068\u3044\u3063\u3066\u3082\u3001\u5b9f\u969b\u306b\u4f55\u56de\u76ee\u306e\u30cf\u30c3\u30b7\u30e5\u5024\u3067\u3053\u308c\u304c\u51fa\u308b\u304b\u306f\u3001\u3084\u3063\u3066\u307f\u306a\u3044\u3068\u308f\u304b\u308a\u307e\u305b\u3093\u3002\u904b\u304c\u826f\u3051\u308c\u3070\uff08\u904b\u304c\u60aa\u3051\u308c\u3070\uff1f\uff09\u3001\u30cf\u30c3\u30b7\u30e5\u5024\u309210\u56de\u6c42\u3081\u305f\u3060\u3051\u3067\u3082\u3001\u51fa\u3066\u3057\u307e\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u7570\u306a\u308a\u5024\u304c10\u500b\u3057\u304b\u306a\u3044\u306e\u306b\u3001\u305d\u308c\u309226\u4e072\u5343144\u500b\u3060\u3068\u4e88\u60f3\u3059\u308b\u306e\u306f\u5927\u554f\u984c\u3067\u3059\u3002\n\u3053\u308c\u3092\u89e3\u6c7a\u3059\u308b\u305f\u3081\u306b\u3001\u30ec\u30b8\u30b9\u30bf\u30fc\u3068\u3044\u3046\u30ab\u30a6\u30f3\u30bf\u306e\u96c6\u5408\u4f53\u304c\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002\u30cf\u30c3\u30b7\u30e5\u5024\u306e\u53f3\u5074\u306e\u3044\u304f\u3064\u304b\u306e\u30d3\u30c3\u30c8\u3092\u5143\u306b\u3001\u30cf\u30c3\u30b7\u30e5\u5024\u3082\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3057\u307e\u3059\u3002\u4eee\u306b4\u30d3\u30c3\u30c8\u3067\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3059\u308b\u3068\u3057\u305f\u3089\u3001\n\u30cf\u30c3\u30b7\u30e5\u5024\u306e\u30b0\u30eb\u30fc\u30d7\u5206\u3051\n\n\n\"test01\" \u2192 0100 1001 1101 0010 ... 1011 \u2192 \u30b0\u30eb\u30fc\u30d7 1011\uff0810\u9032\u6570\u306a\u3089 11\uff09\n\n\"test02\" \u2192 1001 1011 1110 0110 ... 0011 \u2192 \u30b0\u30eb\u30fc\u30d7 0011\uff0810\u9032\u6570\u306a\u3089 3\uff09\n\n4\u30d3\u30c3\u30c8\u3067\u3059\u306816\u306e\u30b0\u30eb\u30fc\u30d7\u306b\u5206\u304b\u308c\u307e\u3059\u304c\u3001\u3053\u306e\u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306b 1 \u304c\u51fa\u73fe\u3057\u305f\u4f4d\u7f6e\u306e\u6700\u5927\u5024\u3092\u8a18\u9332\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u78ba\u7387\u3092\u6c42\u3081\u3001\u305d\u308c\u3089\u306e\u5e73\u5747\u3092\u53d6\u308b\u3088\u3046\u306b\u3059\u308c\u3070\u3001\u4eee\u306b\u3069\u3053\u304b\u306e\u30b0\u30eb\u30fc\u30d7\u3067\u3059\u3054\u304f\u904b\u306e\u3044\u3044\u3053\u3068\u304c\u8d77\u3053\u3063\u3066\u3082\u3001\u63a8\u5b9a\u304c\u5927\u304d\u304f\u5916\u308c\u308b\u3053\u3068\u3092\u907f\u3051\u3089\u308c\u307e\u3059\u3002\u30b0\u30eb\u30fc\u30d7\u306e\u6570\u304c\u5897\u3048\u308c\u3070\u5897\u3048\u308b\u307b\u3069\u3001\u4e88\u6e2c\u3055\u308c\u308b\u7cbe\u5ea6\u306f\u4e0a\u304c\u308a\u307e\u3059\u3002\n\u306a\u304a\u3001\u3053\u306e\u5e73\u5747\u306b\u306f\u3001\u4e00\u822c\u7684\u306b\u7528\u3044\u3089\u308c\u3066\u3044\u308b\u300c\u7b97\u8853\u5e73\u5747\u300d\u3067\u306f\u306a\u304f\u3001\u300c\u8abf\u548c\u5e73\u5747\u300d\u304c\u7528\u3044\u3089\u308c\u307e\u3059\u3002\u8abf\u548c\u5e73\u5747\u306f\u3001\u78ba\u7387\u306e\u5e73\u5747\u3092\u6c42\u3081\u308b\u306e\u306b\u9069\u3057\u3066\u3044\u307e\u3059\u3002\nHyperLogLog \u3067\u306f\u3001\u3053\u306e\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u306b\u4f7f\u3046\u30d3\u30c3\u30c8\u6570\u3092 b \u3068\u3044\u3046\u540d\u524d\u3067\u8868\u3057\u3001\u305d\u306e\u5024\u306f4\u304b\u308916\u307e\u3067\u306e\u7bc4\u56f2\u3067\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u5148\u307b\u3069\u306e\u5b9f\u884c\u4f8b\u3067\u306f\u3001\nHyperLogLog\n  estimated cardinality: 498713.696162264  <== \u63a8\u5b9a\u5024\n  estimation method:     HyperLogLog       <== \u63a8\u5b9a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n  -----------------------------------------------------\n  b:      12 bits (typical error rate: 1.625%)\n  m:      4096 registers\n  alpha:  0.7211100396160289\n  hasher: (1527868593550391469, 4150425632492557278)\n\nb \u3068\u3057\u306612\u30d3\u30c3\u30c8\u3092\u6307\u5b9a\u3057\u3001\u305d\u306e\u5178\u578b\u7684\u306a\u8aa4\u5dee\u306f 1.625% \u3068\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\nHyperLogLog \u306e\u57fa\u672c\u6a5f\u80fd\u306e\u5b9f\u88c5\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\n\u305d\u308c\u3067\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\u307e\u305a\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n$ cd \u9069\u5f53\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n$ cargo new hyperloglog\n$ cd hyperloglog\n\n\nHyperLogLog \u69cb\u9020\u4f53\u3068 new() \u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\nsrc/lib.rs \u3092\u30a8\u30c7\u30a3\u30bf\u30fc\u3067\u958b\u3044\u3066\u3001HyperLogLog \u69cb\u9020\u4f53\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u30d5\u30a3\u30fc\u30eb\u30c9\u3068\u3057\u3066\u3001\u8ad6\u6587\u306e Fig. 3 \u306b\u767b\u5834\u3059\u308b b\u3001m\u3001alpha\u3001regesters \u306b\u52a0\u3048\u3066\u3001SipHaher \u306e\u521d\u671f\u5316\u306b\u4f7f\u3046\u30ad\u30fc\u306a\u3069\u3082\u7528\u610f\u3057\u307e\u3059\u3002\n\nsrc/lib.rs\n/// `HyperLogLog` \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\npub struct HyperLogLog {\n    // \u30ec\u30b8\u30b9\u30bf\u306e\u30a2\u30c9\u30ec\u30c3\u30b7\u30f3\u30b0\u306b\u4f7f\u3046\uff12\u9032\u6570\u306e\u30d3\u30c3\u30c8\u6570\u3002\n    // \u7bc4\u56f2\u306f 4\u4ee5\u4e0a\u300116\u4ee5\u4e0b\u3067\u3001\u5927\u304d\u3044\u307b\u3069\u898b\u7a4d\u3082\u308a\u8aa4\u5dee\u304c\u5c0f\u3055\u304f\u306a\u308b\u304c\u3001\u305d\u306e\u5206\u30e1\u30e2\u30ea\u3092\u4f7f\u7528\u3059\u308b\u3002\n    b: u8,\n    // usize \u578b\u306e\u30cf\u30c3\u30b7\u30e5\u5024\u306e\u53f3\u304b\u3089b\u30d3\u30c3\u30c8\u3092\u53d6\u308a\u51fa\u3059\u305f\u3081\u306e\u30de\u30b9\u30af\n    b_mask: usize,\n    // \u30ec\u30b8\u30b9\u30bf\u306e\u6570\uff08\uff12\u306eb\u4e57\uff09\u3002\u4f8b\uff1ab = 4 \u2192 16\u3001b = 16 \u2192 65536\n    m: usize,\n    alpha: f64,\n    // \u30ec\u30b8\u30b9\u30bf\u3002\u30b5\u30a4\u30ba\u304c m \u30d0\u30a4\u30c8\u306e\u30d0\u30a4\u30c8\u914d\u5217\n    registers: Vec<u8>,\n    // SipHasher \u306e\u521d\u671f\u5316\u306b\u4f7f\u3046\u30ad\u30fc\n    hasher_key0: u64,\n    hasher_key1: u64,\n}\n\n\nHash \u95a2\u6570\u3068\u3057\u3066 SipHasher \u3092\u4f7f\u7528\u3057\u307e\u3059\u304c\u3001\u3053\u308c\u3092\u521d\u671f\u5316\u3059\u308b\u305f\u3081\u306b\u4e71\u6570\u751f\u6210\u6a5f\u304c\u5fc5\u8981\u3067\u3059\u3002rand \u30af\u30ec\u30fc\u30c8\u3092\u4f7f\u7528\u3057\u307e\u3057\u3087\u3046\u3002Cargo.toml \u306e [dependencies] \u30bb\u30af\u30b7\u30e7\u30f3\u306b rand \u30af\u30ec\u30fc\u30c8\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\nCargo.toml\n[dependencies]\nrand = \"0.3.14\"\n\n\nsrc/lib.rs \u3067 use \u3057\u307e\u3057\u3087\u3046\u3002\n\nsrc/lib.rs\nextern crate rand;\n\nuse rand::Rng;\n\n\n\u6b21\u306b\u3001\u3053\u306e\u69cb\u9020\u4f53\u3092\u521d\u671f\u5316\u3059\u308b\u305f\u3081\u306e new() \u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\u8ad6\u6587\u306e Fig. 3 \u306b\u3088\u308b\u3068\u3001HyperLogLog \u306b\u306f\u3001\u521d\u671f\u5316\u30d1\u30e9\u30fc\u30e1\u30fc\u30bf\u30fc b \u304c\u3042\u308a\u3001\u3053\u308c\u306f\u3001\u30ec\u30b8\u30b9\u30bf\u306e\u30a2\u30c9\u30ec\u30c3\u30b7\u30f3\u30b0\u306b\u4f7f\u7528\u3059\u308b\u30d3\u30c3\u30c8\u6570\u3092\u5b9a\u3081\u307e\u3059\u3002\u307e\u305f\u3001\u305d\u306e\u7bc4\u56f2\u306f 4 \u304b\u3089 16 \u307e\u3067\u3067\u3059\u3002\u307e\u305a\u3001\u305d\u3053\u307e\u3067\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\nsrc/lib.rs\nuse std::error::Error;\n\nimpl HyperLogLog {\n\n    /// `HyperLogLog` \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3002b \u3067\u6307\u5b9a\u3057\u305f\u30d3\u30c3\u30c8\u6570\u3092\u30ec\u30b8\u30b9\u30bf\u306e\n    /// \u30a2\u30c9\u30ec\u30c3\u30b7\u30f3\u30b0\u306b\u4f7f\u7528\u3059\u308b\u3002b \u306e\u7bc4\u56f2\u306f 4\u4ee5\u4e0a\u300116\u4ee5\u4e0b\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n    /// \u7bc4\u56f2\u5916\u306a\u3089 `Err` \u3092\u8fd4\u3059\u3002\n    pub fn new(b: u8) -> Result<Self, Box<Error>> {\n        if b < 4 || b > 16 {\n            return Err(From::from(format!(\"b must be between 4 and 16. b = {}\", b)));\n        }\n\n\n\u3053\u306e\u3088\u3046\u306b\u3001b \u306e\u5024\u304c\u7bc4\u56f2\u5916\u306e\u6642\u306f\u3001Result::Err<Box<Error>> \u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\u6b21\u306b\u3001Fig. 3 \u306b\u3088\u308b\u3068\u3001\u69cb\u9020\u4f53\u306e\u30d5\u30a3\u30fc\u30eb\u30c9 m \u306f 2\u306eb\u4e57\u3002\u30b7\u30d5\u30c8\u6f14\u7b97\u3067\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\nsrc/lib.rs\n    pub fn new(b: u8) -> Result<Self, Box<Error>> {\n        if b < 4 || b > 16 {\n            return Err(From::from(format!(\"b must be between 4 and 16. b = {}\", b)));\n        }\n\n        let m = 1 << b;\n\n\n\u6b21\u306b\u3001\u69cb\u9020\u4f53\u306e\u30d5\u30a3\u30fc\u30eb\u30c9 alpha \u306f Fig.3 \u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u5b9a\u6570\u3068\u5f0f\u4f7f\u3044\u307e\u3059\u3002get_alpha() \u3068\u3044\u3046\u5225\u306e\u95a2\u6570\u306b\u3057\u307e\u3057\u305f\u3002\n\nsrc/lib.rs\n/// \u30d3\u30c3\u30c8\u6570 b \u306b\u5bfe\u5fdc\u3059\u308b \u03b1 \u5024\u3092\u8fd4\u3059\u3002\nfn get_alpha(b: u8) -> Result<f64, Box<Error>> {\n    if b < 4 || b > 16 {\n        Err(From::from(format!(\"b must be between 4 and 16. b = {}\", b)))\n    } else {\n        Ok(match b {\n            4 => 0.673, // \u03b116\n            5 => 0.697, // \u03b132\n            6 => 0.709, // \u03b164\n            _ => 0.7213 / (1.0 + 1.079 / (1 << b) as f64),\n        })\n    }\n}\n\n\n\u547c\u3073\u51fa\u3057\u5074\u306f get_alpha(b)? \u3068\u3044\u3046\u3088\u3046\u306b\u3001? \u4ed8\u304d\u3067\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\u3053\u308c\u306f Rust 1.13 \u304b\u3089\u5c0e\u5165\u3055\u308c\u305f\u65b0\u3057\u3044\u6f14\u7b97\u5b50\u3067\u3001Rust 1.0 \u304b\u3089\u5099\u308f\u3063\u3066\u3044\u308b try! \u30de\u30af\u30ed\u3068\u540c\u3058\u3088\u3046\u306a\u52d5\u4f5c\u3092\u3057\u307e\u3059\u3002get_alpha() \u304b\u3089\u8fd4\u3055\u308c\u305f\u5024\u304c Ok<f64> \u578b\u306a\u3089\u3001\u305d\u308c\u3092 unwrap \u3057\u3066 f64 \u5024\u3092\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u3082\u3057 get_alpha() \u304b\u3089\u8fd4\u3055\u308c\u305f\u5024\u304c Err<Box<Error>> \u578b\u306a\u3089\u3001new() \u95a2\u6570\u304b\u3089\u65e9\u671f\u30ea\u30bf\u30fc\u30f3\u3057\u3066\u3001\u547c\u3073\u51fa\u3057\u5143\u306b\u30a8\u30e9\u30fc\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\n\nsrc/lib.rs\nimpl HyperLogLog {\n\n    pub fn new(b: u8) -> Result<Self, Box<Error>> {\n        if b < 4 || b > 16 {\n            return Err(From::from(format!(\"b must be between 4 and 16. b = {}\", b)));\n        }\n\n        let m = 1 << b;\n        let alpha = get_alpha(b)?;\n\n\n\u6700\u5f8c\u306b Hasher \u521d\u671f\u5316\u7528\u306e\u4e71\u6570\u3092\u751f\u6210\u3057\u3066\u3001HyperLogLog \u69cb\u9020\u4f53\u3092\u8fd4\u3057\u307e\u3059\u3002\n\nsrc/lib.rs\nuse std::error::Error;\n\nimpl HyperLogLog {\n\n    /// `HyperLogLog` \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3002b \u3067\u6307\u5b9a\u3057\u305f\u30d3\u30c3\u30c8\u6570\u3092\u30ec\u30b8\u30b9\u30bf\u306e\n    /// \u30a2\u30c9\u30ec\u30c3\u30b7\u30f3\u30b0\u306b\u4f7f\u7528\u3059\u308b\u3002b \u306e\u7bc4\u56f2\u306f 4\u4ee5\u4e0a\u300116\u4ee5\u4e0b\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n    /// \u7bc4\u56f2\u5916\u306a\u3089 `Err` \u3092\u8fd4\u3059\u3002\n    pub fn new(b: u8) -> Result<Self, Box<Error>> {\n        if b < 4 || b > 16 {\n            return Err(From::from(format!(\"b must be between 4 and 16. b = {}\", b)));\n        }\n\n        let m = 1 << b;\n        let alpha = get_alpha(b)?;\n        // hasher_key0, key1 \u3092\u521d\u671f\u5316\u3059\u308b\u305f\u3081\u306e\u4e71\u6570\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3002\n        let mut rng = rand::OsRng::new().map_err(|e| format!(\"Failed to create an OS RNG: {}\", e))?;\n\n        Ok(HyperLogLog {\n            alpha: alpha,\n            b: b,\n            b_mask: m - 1,\n            m: m,\n            registers: vec![0; m],\n            hasher_key0: rng.gen(),\n            hasher_key1: rng.gen(),\n        })\n    }\n}\n\n\n\u7c21\u5358\u306a\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u66f8\u3044\u3066\u3001\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nsrc/lib.rs\n// \u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\n#[cfg(test)]\nmod tests {\n\n    use super::*;\n\n    #[test]\n    fn create_hll() {\n        assert!(HyperLogLog::new(3).is_err());\n        assert!(HyperLogLog::new(17).is_err());\n\n        let hll = HyperLogLog::new(4);\n        assert!(hll.is_ok());\n\n        let hll = hll.unwrap();\n        assert_eq!(hll.b, 4);\n        assert_eq!(hll.m, 2.powi(4));\n        assert_eq!(hll.alpha, 0.673);\n        assert_eq!(hll.registers.len(), 2.powi(4));\n\n        assert!(HyperLogLog::new(16).is_ok());\n    }\n}\n\n\n$ cargo test\n... \uff08\u5f8c\u307b\u3069\u8a18\u5165\u3057\u307e\u3059\uff09\n\n\n\ninsert() \u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\n\u6b21\u306f HyperLogLog \u306b\u65b0\u3057\u3044\u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b insert() \u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u307e\u3057\u3087\u3046\u3002\u307e\u305a SipHasher \u3092 use \u3057\u307e\u3059\u3002\n\nsrc/lib.rs\nuse std::hash::{Hash, Hasher};\n\n// SipHasher \u306f Rust 1.13.0 \u3067\u975e\u63a8\u5968\u3068\u306a\u3063\u305f\u3002\u3057\u304b\u3057\u3001\u305d\u308c\u3092\u7f6e\u304d\u63db\u3048\u308b SipHasher24 \u306f\n// \u73fe\u72b6\u3067\u306f\u975e\u5b89\u5b9a(unstable) \u306a\u305f\u3081\u3001\u5b89\u5b9a\u7248\u306e Rust \u30ea\u30ea\u30fc\u30b9\u3067\u306f\u4f7f\u7528\u3067\u304d\u306a\u3044\u3002\n#[allow(deprecated)]\nuse std::hash::SipHasher;\n\n\n\u8ad6\u6587\u306e Fig. 3 \u306b\u6cbf\u3063\u3066\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u5024 value \u306e hash \u5024\u3092\u5909\u6570 x \u306b\u675f\u7e1b\u3002b_mask \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u5024\u3092\u4f7f\u3063\u3066\u3001x \u306e\u5024\u306e\u53f3\u304b\u3089 b \u30d3\u30c3\u30c8\u3092\u5207\u308a\u51fa\u3057\u3001\u3053\u308c\u3092\u30ec\u30b8\u30b9\u30bf Vec \u306e\u8981\u7d20\u756a\u53f7\u3068\u3057\u3066\u4f7f\u308f\u308c\u308b\u5909\u6570 j \u306b\u675f\u7e1b\u3057\u307e\u3059\u3002\u307e\u305f\u3001x \u306e\u6b8b\u308a\u306e\u30d3\u30c3\u30c8\uff0864\u30d3\u30c3\u30c8 - b \u30d3\u30c3\u30c8\uff09\u3092\u5909\u6570 w \u306b\u675f\u7e1b\u3057\u307e\u3059\u3002\n\nsrc/lib.rs\nimpl HyperLogLog {\n\n    // ...\n\n    /// \u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b\u3002\u8981\u7d20\u306f `std::hash::Hash` \u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n    pub fn insert<H: Hash>(&mut self, value: &H) {\n        let x = self.hash(value);\n        let j = x as usize & self.b_mask;\n        let w = x >> self.b;\n\n\n    }\n\n    /// \u4e0e\u3048\u3089\u308c\u305f value \u306b\u5bfe\u3059\u308b 64 \u30d3\u30c3\u30c8\u306e\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u6c42\u3081\u308b\u3002\n    #[allow(deprecated)]  // SipHasher \u304c Rust 1.13 \u3067\u975e\u63a8\u5968(deprecated) \u306e\u305f\u3081\u3002\n    fn hash<H: Hash>(&self, value: &H) -> u64 {\n        let mut hasher = SipHasher::new_with_keys(self.hasher_key0, self.hasher_key1);\n        value.hash(&mut hasher);\n        hasher.finish()\n    }\n\n}\n\n\n\u6b21\u306b\u3001w \u306e\u5024\u306b\u3064\u3044\u3066\u3001\u5de6\u5074\u304b\u3089\u4f55\u6841\u76ee\u306b 1 \u304c\u7acb\u3063\u3066\u3044\u308b\u30d3\u30c3\u30c8\u304c\u73fe\u308c\u305f\u306e\u304b\u3092\u6c42\u3081\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u5225\u95a2\u6570\u306b\u5207\u308a\u51fa\u3057\u307e\u3057\u3087\u3046\u3002\n\nsrc/lib.rs\nimpl HyperLogLog {\n\n    // ...\n\n    /// \u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b\u3002\u8981\u7d20\u306f `std::hash::Hash` \u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n    pub fn insert<H: Hash>(&mut self, value: &H) {\n        let x = self.hash(value);\n        let j = x as usize & self.b_mask;\n        let w = x >> self.b;\n\n        let p1 = position_of_leftmost_one_bit(w, 64 - self.b);\n\n\n    }\n\n}\n\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\nsrc/lib.rs\n/// \u30cf\u30c3\u30b7\u30e5\u5024\uff0864\u30d3\u30c3\u30c8\u7b26\u53f7\u306a\u3057\uff12\u9032\u6570\uff09\u306e\u5de6\u7aef\u304b\u3089\u898b\u3066\u6700\u521d\u306b\u51fa\u73fe\u3057\u305f 1 \u306e\u4f4d\u7f6e\u3092\u8fd4\u3059\u3002\n/// \u4f8b\uff1a10000... \u2192 1\u300100010... \u2192 4\nfn position_of_leftmost_one_bit(s: u64, max_width: u8) -> u8 {\n    count_leading_zeros(s, max_width) + 1\n}\n\n/// \u30cf\u30c3\u30b7\u30e5\u5024\uff0864\u30d3\u30c3\u30c8\u7b26\u53f7\u306a\u3057\uff12\u9032\u6570\uff09\u5de6\u7aef\u306b\u9023\u7d9a\u3057\u3066\u4e26\u3093\u3067\u3044\u308b 0 \u306e\u500b\u6570\u3092\u8fd4\u3059\u3002\n/// \u4f8b\uff1a10000... \u2192 0\u300100010... \u2192 3\nfn count_leading_zeros(mut s: u64, max_width: u8) -> u8 {\n    let mut lz = max_width;\n    while s != 0 {\n        lz -= 1;\n        s >>= 1;\n    }\n    lz\n}\n\n\n\u6700\u5f8c\u306b\u3001position_of_leftmost_one_bit() \u304c\u8fd4\u3057\u305f\u5024\u3068\u3001registers[j] \u306e\u5024\u3092\u6bd4\u8f03\u3057\u3066\u3001\u5927\u304d\u3044\u65b9\u306e\u5024\u3092 registers[j] \u306b\u683c\u7d0d\u3057\u307e\u3059\u3002\n\nsrc/lib.rs\nimpl HyperLogLog {\n\n    // ...\n\n    /// \u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b\u3002\u8981\u7d20\u306f `std::hash::Hash` \u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n    pub fn insert<H: Hash>(&mut self, value: &H) {\n        let x = self.hash(value);\n        let j = x as usize & self.b_mask;\n        let w = x >> self.b;\n\n        let p1 = position_of_leftmost_one_bit(w, 64 - self.b);\n        let p2 = &mut self.registers[j];\n        if *p2 < p1 {\n            *p2 = p1;\n        }\n    }\n\n}\n\n\n\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u3087\u3046\u3002\n\nsrc/lib.rs\nmod tests {\n\n    use super::*;\n\n    #[test]\n    fn small_range() {\n        let mut hll = HyperLogLog::new(12).unwrap();\n        let items = [\"test1\", \"test2\", \"test3\", \"test2\", \"test2\", \"test2\"];\n\n        println!(\"\\n=== Loading {} items.\\n\", items.len());\n        for item in &items {\n            hll.insert(item);\n        }\n    }\n}\n\n\n\ncardinality() \u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\n\u30ab\u30fc\u30c7\u30a3\u30ca\u30ea\u30c6\u30a3\u3092\u63a8\u5b9a\u3059\u308b cardinality() \u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u307e\u3057\u3087\u3046\u3002Fig. 3 \u306b\u6cbf\u3063\u3066\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\nsrc/lib.rs\n/// \u63a8\u5b9a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3002\u30c7\u30d0\u30c3\u30b0\u51fa\u529b\u7528\n#[derive(Debug)]\npub enum Estimator {\n    HyperLogLog,\n    LinearCounting, // \u30b9\u30e2\u30fc\u30eb\u30ec\u30f3\u30b8\u306e\u898b\u7a4d\u3082\u308a\u306b\u4f7f\u7528\u3059\u308b\u3002\n}\n\nimpl HyperLogLog {\n\n    // ..\n\n    /// \u30ab\u30fc\u30c7\u30a3\u30ca\u30ea\u30c6\u30a3\u306e\u898b\u7a4d\u3082\u308a\u5024\u3092\u8fd4\u3059\u3002\n    pub fn cardinality(&self) -> f64 {\n        estimate_cardinality(self).0\n    }\n\n}\n\n// ...\n\n/// \u30ab\u30fc\u30c7\u30a3\u30ca\u30ea\u30c6\u30a3\u3092\u63a8\u5b9a\u3057\u3001\u305d\u306e\u5024\u3068\u3001\u898b\u7a4d\u3082\u308a\u306b\u4f7f\u7528\u3057\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u8fd4\u3059\u3002\n/// \u30b9\u30e2\u30fc\u30eb\u30ec\u30f3\u30b8\u3067\u306f `Linear Counting` \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u7528\u3057\u3001\u305d\u308c\u3092\u8d85\u3048\u308b\u30ec\u30f3\u30b8\u3067\u306f\n/// `HyperLogLog` \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u7528\u3059\u308b\u3002\u3053\u3053\u307e\u3067\u306f\u8ad6\u6587\u306e\u901a\u308a\u3002\n/// \u3057\u304b\u3057\u3001\u8ad6\u6587\u306b\u3042\u308b\u30e9\u30fc\u30b8\u30ec\u30f3\u30b8\u88dc\u6b63\u306f\u884c\u306a\u308f\u306a\u3044\u3002\u306a\u305c\u306a\u3089\u3001\u672c\u5b9f\u88c5\u3067\u306f\u300132 \u30d3\u30c3\u30c8\u306e\n/// \u30cf\u30c3\u30b7\u30e5\u5024\u306e\u4ee3\u308f\u308a\u306b 64 \u30d3\u30c3\u30c8\u306e\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u4f7f\u7528\u3057\u3066\u304a\u308a\u3001\u30cf\u30c3\u30b7\u30e5\u5024\u304c\u885d\u7a81\u3059\u308b\u983b\u5ea6\u304c\n/// \u6975\u3081\u3066\u4f4e\u3044\u3068\u4e88\u60f3\u3055\u308c\u308b\u305f\u3081\u3002\nfn estimate_cardinality(hll: &HyperLogLog) -> (f64, Estimator) {\n    let m_f64 = hll.m as f64;\n    // \u307e\u305a `HyperLogLog` \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3088\u308b\u898b\u7a4d\u3082\u308a\u5024\u3092\u7b97\u51fa\u3059\u308b\u3002\n    let est = raw_hyperloglog_estimate(hll.alpha, m_f64, &hll.registers);\n\n    if est < (5.0 / 2.0 * m_f64) {\n        // \u30b9\u30e2\u30fc\u30eb\u30ec\u30f3\u30b8\u306e\u898b\u7a4d\u3082\u308a\u3092\u884c\u3046\u3002\u3082\u3057\u5024\u304c 0 \u306e\u30ec\u30b8\u30b9\u30bf\u304c\uff11\u3064\u3067\u3082\u3042\u308b\u306a\u3089\u3001\n        // `Linear Counting` \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u898b\u7a4d\u3082\u308a\u76f4\u3059\u3002\n        match count_zero_registers(&hll.registers) {\n            0 => (est, Estimator::HyperLogLog),\n            v => (linear_counting_estimate(m_f64, v as f64), Estimator::LinearCounting),\n        }\n    } else {\n        (est, Estimator::HyperLogLog)\n    }\n}\n\n/// \u5024\u304c 0 \u306e\u30ec\u30b8\u30b9\u30bf\u306e\u500b\u6570\u3092\u8fd4\u3059\u3002\nfn count_zero_registers(registers: &[u8]) -> usize {\n    registers.iter().filter(|&x| *x == 0).count()\n}\n\n\n\n\u500b\u3005\u306e\u63a8\u5b9a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\nsrc/lib.rs\n/// `HyperLogLog` \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3088\u308b\u672a\u88dc\u6b63\u306e\u898b\u7a4d\u3082\u308a\u5024\u3092\u7b97\u51fa\u3059\u308b\u3002\nfn raw_hyperloglog_estimate(alpha: f64, m: f64, registers: &[u8]) -> f64 {\n    let sum = registers.iter().map(|&x| 2.0f64.powi(-(x as i32))).sum::<f64>();\n    alpha * m * m / sum\n}\n\n/// `Linear Counting` \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3088\u308b\u898b\u7a4d\u3082\u308a\u5024\u3092\u7b97\u51fa\u3059\u308b\u3002\nfn linear_counting_estimate(m: f64, number_of_zero_registers: f64) -> f64 {\n    m * (m / number_of_zero_registers).ln()\n}\n\n\n\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3059\uff08\u5f8c\u307b\u3069\u8ffd\u52a0\u3057\u307e\u3059\uff09\n\n\u30c7\u30d0\u30c3\u30af\u51fa\u529b\u3084\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u8ffd\u52a0\u3059\u308b\n\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b\u3092\u8ffd\u52a0\u3059\u308b\n\nsrc/lib.rs\n    /// b \u304b\u3089\u4e88\u60f3\u3055\u308c\u308b\u5178\u578b\u7684\u306a\u30a8\u30e9\u30fc\u7387\u3092\u8fd4\u3059\u3002\n    pub fn typical_error_rate(&self) -> f64 {\n        1.04 / (self.m as f64).sqrt()\n    }\n\n\n\nsrc/lib.rs\nuse std::fmt;\n\n\n\nsrc/lib.rs\n/// `HyperLogLog` \u306e\u30c7\u30d0\u30c3\u30b0\u51fa\u529b\u7528\u6587\u5b57\u5217\u3092\u8fd4\u3059\u3002\nimpl fmt::Debug for HyperLogLog {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        let (est, est_method) = estimate_cardinality(self);\n        write!(f,\n               r#\"HyperLogLog\n  estimated cardinality: {}\n  estimation method:     {:?}\n  -----------------------------------------------------\n  b:      {} bits (typical error rate: {}%)\n  m:      {} registers\n  alpha:  {}\n  hasher: ({}, {})\"#,\n               est,\n               est_method,\n               self.b,\n               self.typical_error_rate() * 100.0,\n               self.m,\n               self.alpha,\n               self.hasher_key0,\n               self.hasher_key1)\n    }\n}\n\n\n\n\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u63cf\u3051\u308b\u3088\u3046\u306b\u3059\u308b\n\nsrc/lib.rs\nuse std::collections::BTreeMap;\n\n\n\nsrc/lib.rs\nimpl HyperLogLog {\n\n    // ...\n\n    /// \u30ec\u30b8\u30b9\u30bf\u306b\u683c\u7d0d\u3055\u308c\u305f\u5024\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u5206\u5e03\u3092\u793a\u3059\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u8fd4\u3059\u3002\n    pub fn histgram_of_register_value_distribution(&self) -> String {\n        let mut histgram = Vec::new();\n\n        let mut map = BTreeMap::new();\n        for x in &self.registers {\n            let count = map.entry(*x).or_insert(0);\n            *count += 1;\n        }\n\n        if let (Some(last_reg_value), Some(max_count)) = (map.keys().last(), map.values().max()) {\n            // \u30b0\u30e9\u30d5\u306e\u6700\u5927\u5e45 = 40 \u6587\u5b57\n            let width = 40.0;\n            let rate = width / (*max_count as f64);\n\n            for i in 0..(last_reg_value + 1) {\n                let mut line = format!(\"{:3}: \", i);\n\n                if let Some(count) = map.get(&i) {\n                    // \u30a2\u30b9\u30bf\u30ea\u30b9\u30af(*) \u3067\u6a2a\u68d2\u3092\u63cf\u304f\n                    let h_bar = std::iter::repeat(\"*\")\n                        .take((*count as f64 * rate).ceil() as usize)\n                        .collect::<String>();\n                    line.push_str(&h_bar);\n                    line.push_str(&format!(\" {}\", count));\n                } else {\n                    line.push_str(\"0\");\n                };\n\n                histgram.push(line);\n            }\n        }\n        histgram.join(\"\\n\")\n    }\n}\n\n\n\nmerge() \u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\n\nsrc/lib.rs\nimpl HyperLogLog {\n\n    // ...\n\n    /// `template` \u3067\u4e0e\u3048\u3089\u308c\u305f\u65e2\u5b58\u306e `HyperLogLog` \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u540c\u3058\u8a2d\u5b9a\u3092\u6301\u3064\n    /// `HyperLogLog` \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3002\n    pub fn from_template(template: &HyperLogLog) -> Self {\n        let m = template.m;\n        HyperLogLog {\n            alpha: template.alpha,\n            b: template.b,\n            b_mask: m - 1,\n            m: m,\n            registers: vec![0; m],\n            hasher_key0: template.hasher_key0,\n            hasher_key1: template.hasher_key1,\n        }\n    }\n\n    /// `self` \u3067\u793a\u3055\u308c\u308b `HyperLogLog` \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u3001`other` \u3067\u793a\u3055\u308c\u308b\u5225\u306e\n    /// `HyperLogLog` \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30de\u30fc\u30b8\u3059\u308b\u3002\u4e21\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u8a2d\u5b9a\u304c\u7570\u306a\u308b\u5834\u5408\u306f\n    /// `Err` \u3092\u8fd4\u3059\u3002\n    pub fn merge(&mut self, other: &HyperLogLog) -> Result<(), Box<Error>> {\n        if self.b == other.b && self.m == other.m && self.hasher_key0 == other.hasher_key0 &&\n           self.hasher_key1 == other.hasher_key1 {\n            for (p1, p2) in self.registers.iter_mut().zip(other.registers.iter()) {\n                if *p1 < *p2 {\n                    *p1 = *p2\n                }\n            }\n            Ok(())\n        } else {\n            Err(From::from(format!(\"Specs does not match. \\\n                                    b: {}|{}, m: {}|{}, hasher: ({},{})|({},{})\",\n                                   self.b,\n                                   other.b,\n                                   self.m,\n                                   other.m,\n                                   self.hasher_key0,\n                                   self.hasher_key1,\n                                   other.hasher_key0,\n                                   other.hasher_key1)))\n        }\n    }\n\n}\n\n\n\n\u307e\u3068\u3081\n\nHyperLogLog \u306e\u57fa\u672c\u7684\u306a\u4ed5\u7d44\u307f\u3092\u8aac\u660e\u3057\u3001Rust \u3067\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u5358\u306b\u30ab\u30fc\u30c7\u30a3\u30ca\u30ea\u30c6\u30a3\u3092\u63a8\u6e2c\u3067\u304d\u308b\u3060\u3051\u3067\u306a\u304f\u3001\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306a\u3069\u30c7\u30d0\u30c3\u30b0\u7528\u306e\u51fa\u529b\u3092\u5145\u5b9f\u3055\u305b\u3001\u5185\u90e8\u306e\u52d5\u4f5c\u304c\u5b66\u7fd2\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\u6b21\u56de\u306f HyperLogLog \u3092\u4f7f\u3063\u3066\u3001\u30a6\u30a3\u30ad\u30da\u30c7\u30a3\u30a2\u65e5\u672c\u8a9e\u7248\u306e\u5168\u8a18\u4e8b\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u30e6\u30cb\u30fc\u30af\u5358\u8a9e\u6570\u3092\u3001\u30d7\u30e9\u30b9\u30de\u30a4\u30ca\u30b9\u7d04 2% \u306e\u8aa4\u5dee\u3067\u63a8\u5b9a\u3057\u307e\u3059\u3002\n\n\u4eca\u5e74\u306e\u59cb\u3081\u3001\u79c1\u304c Rust \u3092\u7fd2\u3044\u306f\u3058\u3081\u306e\u3053\u308d\u3001\u624b\u672c\u3068\u306a\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3042\u307e\u308a\u898b\u3064\u304b\u3089\u306a\u3044\u3053\u3068\u304c\u4e0d\u6e80\u3067\u3057\u305f\u3002GitHub \u3067\u63a2\u305b\u3070\u3001Rust \u3067\u66f8\u304b\u308c\u305f\u5b9f\u7528\u7684\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u304c\u6570\u591a\u304f\u898b\u3064\u304b\u308a\u307e\u3059\u304c\u3001\u305d\u308c\u3089\u3092\u8aad\u3080\u306e\u306f\u5165\u9580\u8005\u306b\u3068\u3063\u3066\u306f\u6577\u5c45\u304c\u9ad8\u904e\u304e\u307e\u3059\u3002\u79c1\u304c\u6b32\u3057\u304b\u3063\u305f\u306e\u306f\u3001\u5b66\u7fd2\u7528\u306b\u66f8\u304b\u308c\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3001\u5165\u9580\u8005\u304c\u624b\u8efd\u306b\u8a66\u305b\u3066\u3001\u3044\u308d\u3044\u308d\u3068\u3044\u3058\u308c\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u4f8b\u3067\u3057\u305f\u3002\n\n\u305d\u3093\u306a\u308f\u3051\u3067\u3001\u305d\u3046\u3044\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u4f8b\u3092\u66f8\u3044\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\uff12\u56de\u306b\u5206\u3051\u3066\u3001Rust \u3067\u7c21\u5358\u306a\u30c4\u30fc\u30eb\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n\u4eca\u56de\u306f\u4e71\u629e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u4e00\u7a2e\u3067\u3042\u308b\u3001probability cardinarity estimatior\uff08\u78ba\u7387\u7684\u30ab\u30fc\u30c7\u30a3\u30ca\u30ea\u30c6\u30a3\u63a8\u5b9a\u6a5f\uff09\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002HyperLogLog \u3068\u3044\u3046\u540d\u524d\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3059\u3002\n\n\u6b21\u56de\u306f HyperLogLog \u3092\u4f7f\u3063\u3066\u3001\u30a6\u30a3\u30ad\u30da\u30c7\u30a3\u30a2\u65e5\u672c\u8a9e\u7248\u306e\u5168\u8a18\u4e8b\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u30e6\u30cb\u30fc\u30af\u5358\u8a9e\u6570\u3092\u3001\u30d7\u30e9\u30b9\u30de\u30a4\u30ca\u30b9\u7d04 2% \u306e\u8aa4\u5dee\u3067\u63a8\u5b9a\u3057\u307e\u3059\u3002\u3061\u306a\u307f\u306b\u3001\u30a6\u30a3\u30ad\u30da\u30c7\u30a3\u30a2\u65e5\u672c\u8a9e\u7248\u306b\u306f\u7d04100\u4e07\u500b\u306e\u8a18\u4e8b\u304c\u3042\u308a\u3001\u305d\u306e\u30a2\u30fc\u30ab\u30a4\u30d6\u30d5\u30a1\u30a4\u30eb\u306e\u30b5\u30a4\u30ba\u306f\u3001bzip2 \u5f62\u5f0f\u3067\u5727\u7e2e\u3055\u308c\u305f\u72b6\u614b\u3067 2.2GB \u304f\u3089\u3044\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u6b21\u56de\u3001\u30de\u30eb\u30c1\u30b3\u30a2\u306b\u3088\u308b\u4e26\u5217\u51e6\u7406\u3067\u3001DB \u306a\u3069\u306f\u4f7f\u308f\u305a\u306b\u30e1\u30e2\u30ea\u30fc\u4e0a\u3067\u30ab\u30a6\u30f3\u30c8\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u65e5\u672c\u8a9e\u306e\u5358\u8a9e\u306e\u5207\u308a\u51fa\u3057\u3068\u54c1\u8a5e\u306e\u5224\u5b9a\u306b\u306f\u3001MeCab \u306e C API \u3092\u4f7f\u3044\u307e\u3059\u3002\n\n\uff08\u672c\u6587\u306e\u5f8c\u534a\u304c\u307e\u3060\u66f8\u304d\u304b\u3051\u3067\u3059\u304c\u3001Rust Advent Calendar \uff11\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u306e\u3067\u3001\u3053\u3053\u3067\u516c\u958b\u3057\u3066\u3001\u5f90\u3005\u306b\u66f8\u304d\u9032\u3081\u3066\u3044\u304f\u3053\u3068\u306b\u3057\u307e\u3059\u3002\u6700\u8fd1\u3001\u3053\u3093\u306a\u306e\u3070\u3063\u304b\u308a\u3067\u3001\u3057\u304b\u3082\u3001\u3044\u3064\u3082\u672a\u5b8c\u3067\u3059\u307f\u307e\u305b\u3093\uff09\n\n\n# HyperLogLog \u3068\u306f\uff1f\n\nHyperLogLog \u306f\u78ba\u7387\u7684\u30ab\u30fc\u30c7\u30a3\u30ca\u30ea\u30c6\u30a3\u63a8\u5b9a\u6a5f\u306e\u4e00\u7a2e\u3067\u3059\u3002\u305d\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u3001\u3053\u3061\u3089\u306e\u8ad6\u6587\u3067\u89e3\u8aac\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n- [Flajolet, P.; Fusy, E.; Gandouet, O.; Meunier, F. (2007) -- HyperLogLog: the analysis of a near-optimal cardinality estimation algorithm](http://algo.inria.fr/flajolet/Publications/FlFuGaMe07.pdf)\uff08PDF\u5f62\u5f0f\uff09\n\n\u3067\u306f\u300c\u30ab\u30fc\u30c7\u30a3\u30ca\u30ea\u30c6\u30a3\u300d\u3068\u306f\u306a\u3093\u3067\u3057\u3087\u3046\u304b\uff1f IT\u3001\u7279\u306b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u4e16\u754c\u3067\u306f\u3001\u3053\u306e\u7528\u8a9e\u306b\u3064\u3044\u3066\u5fae\u5999\u306b\u7570\u306a\u308b\u89e3\u91c8\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u304c\u3001cardinarity estimatior \u306e\u4e16\u754c\u306b\u9650\u3063\u3066\u8a00\u3046\u3068\u3001\u300c\u96c6\u5408\u306b\u542b\u307e\u308c\u308b\u5024\u306e\u3001\u7570\u306a\u308a\u6570\u300d\u3068\u8003\u3048\u3066\u3088\u3055\u305d\u3046\u3067\u3059\u3002\u5e73\u305f\u304f\u8a00\u3046\u3068\u300cdistinct \u306a\u5024\u306e\u6570\u300d\u3067\u3059\u3002\n\nHyperLogLog \u306f\u3001\u78ba\u7387\u7684\u306a\u624b\u6cd5\u306b\u57fa\u3065\u3044\u3066\u3001\u4e0e\u3048\u3089\u308c\u305f\u5024\u306e\u96c6\u5408\u306e\u30ab\u30fc\u30c7\u30a3\u30ca\u30ea\u30c6\u30a3\u3092\u63a8\u6e2c\u3059\u308b\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3059\u3002\u4f8b\u3048\u3070\u3001HyperLogLog \u306b\u3001\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u306e\u30a2\u30af\u30bb\u30b9\u30ed\u30b0\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8 IP \u30a2\u30c9\u30ec\u30b9\u3092\u4e0e\u3048\u308b\u3068\u3001\u30e6\u30cb\u30fc\u30af\u30d3\u30b8\u30bf\u30fc\u6570\u304c\u3042\u308b\u7a0b\u5ea6\u306e\u8aa4\u5dee\u306e\u7bc4\u56f2\u3067\u63a8\u5b9a\u3067\u304d\u307e\u3059\u3002\n\n\u3068\u3053\u308d\u3067\u3001\u3082\u3057 HyperLogLog \u306e\u3088\u3046\u306a\u3082\u306e\u304c\u306a\u304b\u3063\u305f\u3068\u3057\u305f\u3089\u3001\u3069\u3046\u3084\u3063\u3066\u7570\u306a\u308a\u6570\u3092\u6c42\u3081\u308b\u3067\u3057\u3087\u3046\u304b\u3002\u7d20\u6734\u306a\u65b9\u6cd5\u3068\u3057\u3066\u3001HashSet \u3092\u4f7f\u3046\u3053\u3068\u304c\u8003\u3048\u3089\u308c\u307e\u3059\u3002HashSet \u306b IP \u30a2\u30c9\u30ec\u30b9\u306e\u3088\u3046\u306a\u5024\u3092\u3069\u3093\u3069\u3093\u8a70\u3081\u3066\u3044\u304f\u3068\u91cd\u8907\u304c\u53d6\u308a\u9664\u304b\u308c\u305f\u5024\u304c\u6b8b\u308a\u307e\u3059\u306e\u3067\u3001\u305d\u306e\u8981\u7d20\u6570\u3092\u8abf\u3079\u308c\u3070\u3044\u3044\u308f\u3051\u3067\u3059\u3002\u3053\u306e\u65b9\u6cd5\u306f\u30b7\u30f3\u30d7\u30eb\u3067\u3059\u304c\u3001\u7570\u306a\u308a\u6570\u306e\u5206\u3060\u3051\u30e1\u30e2\u30ea\u30fc\u3092\u6d88\u8cbb\u3059\u308b\u3068\u3044\u3046\u6b20\u70b9\u304c\u3042\u308a\u307e\u3059\u3002\u30c7\u30fc\u30bf\u91cf\u304c\u81a8\u5927\u306a\u5834\u5408\u3001\u30e1\u30e2\u30ea\u30fc\u3092\u4f7f\u3044\u679c\u305f\u3057\u3066\u3057\u307e\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u4e00\u65b9\u3001HyperLogLog \u306f\u3001\u308f\u305a\u304b\u7d04 1.5KB \u306e\u30e1\u30e2\u30ea\u30fc\u4f7f\u7528\u91cf\u3067\u3001\u5341\u5104\u3092\u4e0a\u56de\u308b\u6570\u306e\u7570\u306a\u308a\u6570\u3092\u3001\u30d7\u30e9\u30b9\u30de\u30a4\u30ca\u30b9\uff12\uff05\u7a0b\u5ea6\u306e\u8aa4\u5dee\u3067\u63a8\u5b9a\u3067\u304d\u307e\u3059\u3002\n\n\u307e\u305f\u3001HyperLogLog \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u306f\u3001\uff12\u3064\u306e HyperLogLog \u30c7\u30fc\u30bf\u69cb\u9020\uff08\u4ee5\u964d\u300c\u63a8\u5b9a\u6a5f\u300d\u3068\u547c\u3073\u307e\u3059\uff09\u3092\uff11\u3064\u306b\u30de\u30fc\u30b8\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u5148\u307b\u3069\u306e\u30e6\u30cb\u30fc\u30af\u30d3\u30b8\u30bf\u30fc\u306e\u4f8b\u3067\u3001\u4eee\u306b\u30a2\u30af\u30bb\u30b9\u30ed\u30b0\u304c\u5927\u91cf\u306b\u3042\u3063\u3066\uff11\u53f0\u306e\u30de\u30b7\u30f3\u3067\u51e6\u7406\u3057\u304d\u308c\u306a\u304b\u3063\u305f\u3068\u3057\u307e\u3057\u3087\u3046\u3002\u3053\u3093\u306a\u6642\u306f\u3001\u8907\u6570\u53f0\u306e\u30de\u30b7\u30f3\u306b\u30a2\u30af\u30bb\u30b9\u30ed\u30b0\u3092\u5206\u914d\u3057\u3001\u305d\u308c\u305e\u308c\u306b\u500b\u5225\u306e\u63a8\u5b9a\u6a5f\u3092\u6301\u305f\u305b\u3066\u51e6\u7406\u3057\u307e\u3059\u3002\u51e6\u7406\u304c\u7d42\u308f\u3063\u305f\u3089\u3001\u5168\u30de\u30b7\u30f3\u304b\u3089\u63a8\u5b9a\u6a5f\u3092\u96c6\u3081\u3066\u30de\u30fc\u30b8\u3059\u308b\u3053\u3068\u3067\u3001\u5168\u4f53\u306e\u30e6\u30cb\u30fc\u30af\u30d3\u30b8\u30bf\u30fc\u6570\u304c\u6c42\u3081\u3089\u308c\u307e\u3059\u3002\n\n\u4ed6\u306b\u3082\u3001\u65e5\u6bce\u306b\u63a8\u5b9a\u6a5f\u3092\u4f5c\u6210\u3057\u3066\u304a\u3051\u3070\u3001\u5f8c\u3067\u3001\u6708\u9593\u3084\u5e74\u9593\u306e\u30e6\u30cb\u30fc\u30af\u30d3\u30b8\u30bf\u30fc\u6570\u304c\u77e5\u308a\u305f\u304f\u306a\u3063\u305f\u3068\u304d\u3067\u3082\u3001\u30de\u30fc\u30b8\u306b\u3088\u308a\u77ac\u6642\u306b\u63a8\u5b9a\u3067\u304d\u307e\u3059\u3002\n\n# \u4eca\u56de\u4f5c\u308b\u3082\u306e\n\n\u3067\u306f\u3001\u4eca\u56de\u3069\u3093\u306a\u3082\u306e\u304c\u3067\u304d\u308b\u304b\u3001\u305d\u306e\u5b9f\u884c\u7d50\u679c\u3092\u304a\u898b\u305b\u3057\u307e\u3057\u3087\u3046\u3002\u3053\u3053\u3067\u306f\u3001HyperLogLog \u306b50\u4e07\u4ef6\u306e\u30e6\u30cb\u30fc\u30af\u5024\u3092\u30a4\u30f3\u30b5\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\n```\n% cargo test --release -- --nocapture --test-threads 1\n...\n\nrunning 2 tests\ntest tests::intermediate_range_with_merge_operation ...\n\n=== Loading 500000 items to hll1 and hll2.  <= \uff12\u3064\u306e\u63a8\u5b9a\u6a5f\u305d\u308c\u305e\u308c\u306b\u3001\u30e6\u30cb\u30fc\u30af\u5024\u3092\n                                                50\u4e07\u4ef6\u305a\u3064\u30a4\u30f3\u30b5\u30fc\u30c8\u3002\n\n\uff08\uff11\u3064\u76ee\u306e\u63a8\u5b9a\u6a5f\u306e\u60c5\u5831\uff09\n\n======================================================\nerror rate:\n  typical: 1.6250%   <== \u5178\u578b\u7684\u306a\u8aa4\u5dee\n  actual:  0.2573%   <== \u5b9f\u969b\u306e\u8aa4\u5dee\uff08\u5b9f\u884c\u3059\u308b\u6bce\u306b\u5909\u308f\u308b\uff09\n\nHyperLogLog\n  estimated cardinality: 498713.696162264  <== \u63a8\u5b9a\u5024\n  estimation method:     HyperLogLog       <== \u63a8\u5b9a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n  -----------------------------------------------------\n  b:      12 bits (typical error rate: 1.625%)\n  m:      4096 registers\n  alpha:  0.7211100396160289\n  hasher: (1527868593550391469, 4150425632492557278)\n\n  0: 0\n  1: 0\n  2: 0\n  3: 0\n  4: 0\n  5: **** 86\n  6: *********************** 538\n  7: **************************************** 963\n  8: **************************************** 971\n  9: **************************** 667\n 10: ***************** 401\n 11: ********** 238\n 12: ***** 121\n 13: *** 49\n 14: ** 32\n 15: * 18\n 16: * 5\n 17: * 5\n 18: 0\n 19: * 2\n\n...\n```\n\n\u6700\u5f8c\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\uff08\u6a2a\u68d2\u30b0\u30e9\u30d5\uff09\u306f\u3001\u30ec\u30b8\u30b9\u30bf\u30fc\u3068\u547c\u3070\u308c\u308b\u300c\u30ab\u30a6\u30f3\u30bf\u30fc\u306e\u96c6\u5408\u4f53\u300d\u306b\u683c\u7d0d\u3055\u308c\u305f\u30ab\u30a6\u30f3\u30c8\u5024\u306e\u5206\u5e03\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002\u4e0a\u306e\u4f8b\u3067\u3059\u3068\u3001\u30ab\u30a6\u30f3\u30c8\u5024\u3068\u3057\u3066 0 \u304c\u5165\u3063\u3066\u3044\u308b\u30ec\u30b8\u30b9\u30bf\u306f 0 \u500b\u30021 \u304c\u5165\u3063\u3066\u3044\u308b\u30ec\u30b8\u30b9\u30bf\u3082 0 \u500b\u3067\u30015 \u304c\u5165\u3063\u3066\u3044\u308b\u30ec\u30b8\u30b9\u30bf\u306f 86 \u500b\u30016 \u304c\u5165\u3063\u3066\u3044\u308b\u30ec\u30b8\u30b9\u30bf\u306f 538 \u500b\u3067\u3057\u305f\u3002\u3053\u3053\u3067\u306f\u30ec\u30b8\u30b9\u30bf\u304c\u5408\u8a08\u3067 4096 \u500b\u3042\u308a\u3001\u305d\u308c\u3089\u306b\u5165\u3063\u3066\u3044\u305f\u5024\u306e\u6700\u5927\u5024\u306f 19 \u3067\u3057\u305f\u3002\n\n\u3053\u306e\u30ab\u30a6\u30f3\u30c8\u5024\u306e\u610f\u5473\u306b\u3064\u3044\u3066\u306f\u3001\u6b21\u306e\u7ae0\u3067\u8aac\u660e\u3057\u307e\u3059\u3002\n\n\n# HyperLogLog \u306e\u3057\u304f\u307f\n\nHyperLogLog \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u6838\u306f\u4ee5\u4e0b\u306e\uff12\u3064\u3067\u3059\u3002\n\n- \u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u306b\u3088\u3063\u3066\u751f\u6210\u3055\u308c\u308b\u30e9\u30f3\u30c0\u30e0\u6027\u3092\u6301\u3064\u5024\n- \u78ba\u7387\u306b\u57fa\u3065\u304f\u63a8\u5b9a\n\n\n## \u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u306b\u3088\u3063\u3066\u751f\u6210\u3055\u308c\u308b\u30e9\u30f3\u30c0\u30e0\u6027\u3092\u6301\u3064\u5024\n\n\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u304c\u3069\u3046\u3044\u3046\u3082\u306e\u304b\u306f\u3001\u77e5\u3063\u3066\u3044\u308b\u4eba\u304c\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u3042\u308b\u30c7\u30fc\u30bf\uff08\u6570\u5024\u3067\u3082\u6587\u5b57\u5217\u3067\u3082\uff09\u3092\u4e0e\u3048\u308b\u3068\u3001\u305d\u308c\u306b\u5bfe\u5fdc\u3059\u308b\u6570\u5024\uff08\u30cf\u30c3\u30b7\u30e5\u5024\uff09\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\n\n\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u306b\u306f\u3055\u307e\u3056\u307e\u306a\u304c\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001Rust \u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u306f [SipHash](https://en.wikipedia.org/wiki/SipHash) \u3067\u3059\u3002\u3053\u308c\u306f\u4efb\u610f\u306e\u30d0\u30a4\u30c8\u6570\u306e\u30c7\u30fc\u30bf\u3068\u3001128\u30d3\u30c3\u30c8\u306e\u79d8\u5bc6\u9375\u3092\u5165\u529b\u306b\u3057\u3066\u3001\u30cf\u30c3\u30b7\u30e5\u5024\u3068\u3057\u306664\u30d3\u30c3\u30c8\u306e\u7b26\u53f7\u306a\u3057\u6574\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u306b\u306f\u3001\u305d\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u8a55\u4fa1\u3059\u308b\u305f\u3081\u306e\u6307\u91dd\u304c\u3044\u304f\u3064\u304b\u3042\u308a\u3001\u4ee3\u8868\u7684\u306a\u3082\u306e\u3068\u3057\u3066\u4ee5\u4e0b\u306e\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002\uff08\u30a6\u30a3\u30ad\u30da\u30c7\u30a3\u30a2\u306e\u300c[\u30cf\u30c3\u30b7\u30e5\u95a2\u6570](https://ja.wikipedia.org/wiki/%E3%83%8F%E3%83%83%E3%82%B7%E3%83%A5%E9%96%A2%E6%95%B0#.E7.89.B9.E6.80.A7)\u300d\u3088\u308a\u5f15\u7528\uff09\n\n- **\u4e00\u69d8\u6027**\uff1a\u826f\u3044\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u306f\u3001\u8003\u3048\u3089\u308c\u308b\u5165\u529b\u7bc4\u56f2\u304c\u51fa\u529b\u7bc4\u56f2\u5168\u4f53\u306b\u306a\u308b\u3079\u304f\u4e00\u69d8\u306b\u5206\u5e03\u3059\u308b\u3088\u3046\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u884c\u3046\u3002\u3064\u307e\u308a\u3001\u51fa\u529b\u7bc4\u56f2\u306e\u305d\u308c\u305e\u308c\u306e\u30cf\u30c3\u30b7\u30e5\u5024\u306f\u307b\u307c\u540c\u3058\u78ba\u7387\u3067\u751f\u6210\u3055\u308c\u308b\u3079\u304d\u3067\u3042\u308b\u3002\u3053\u306e\u3088\u3046\u306a\u6761\u4ef6\u304c\u3042\u308b\u306e\u306f\u3001\u7570\u306a\u308b\u5165\u529b\u304c\u540c\u3058\u30cf\u30c3\u30b7\u30e5\u5024\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u3066\u3057\u307e\u3046\u300c\u885d\u7a81\u300d\u304c\u767a\u751f\u3059\u308b\u3068\u3001\u30cf\u30c3\u30b7\u30e5\u306b\u57fa\u3065\u304f\u5404\u7a2e\u6280\u6cd5\u306e\u30b3\u30b9\u30c8\u306f\u885d\u7a81\u767a\u751f\u56de\u6570\u3068\u5171\u306b\u5897\u5927\u3059\u308b\u305f\u3081\u3067\u3042\u308b\u3002\n\n- **\u9023\u7d9a\u6027**\uff1a\uff08\u7b49\u3057\u3044\u30c7\u30fc\u30bf\u3067\u306f\u306a\u304f\uff09\u985e\u4f3c\u3059\u308b\u30c7\u30fc\u30bf\u3092\u63a2\u7d22\u3059\u308b\u7528\u9014\u3067\u306f\u3001\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u306f\u53ef\u80fd\u306a\u9650\u308a\u9023\u7d9a\u3068\u306a\u3063\u3066\u3044\u308b\u3079\u304d\u3067\u3042\u308b\u3002\u5c11\u3057\u3060\u3051\u7570\u306a\u308b\u5165\u529b\u306b\u5bfe\u3057\u3066\u306f\u3001\u540c\u3058\u30cf\u30c3\u30b7\u30e5\u5024\u304b\u3054\u304f\u8fd1\u3044\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u751f\u6210\u3059\u3079\u304d\u3067\u3042\u308b\u3002\u306a\u304a\u3001\u9023\u7d9a\u6027\u306f\u30c1\u30a7\u30c3\u30af\u30b5\u30e0\u3084\u6697\u53f7\u5b66\u7684\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u306a\u3069\u306b\u3068\u3063\u3066\u306f\u4e0d\u9069\u5207\u306a\u7279\u6027\u3067\u3042\u308b\u3002\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u306b\u9023\u7d9a\u6027\u304c\u5fc5\u8981\u3068\u306a\u308b\u7528\u9014\u306f\u3001\u7dda\u578b\u63a2\u7d22\u3092\u4f7f\u3046\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306a\u3069\u306e\u7528\u9014\u3067\u3042\u308b\u3002\n\nHyperLogLog \u3067\u306f\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u3092\u7528\u3044\u307e\u3059\u304c\u3001\u305d\u3053\u3067\u306f\u3001\u4e00\u69d8\u6027\u304c\u3042\u3063\u3066\u3001\u9023\u7d9a\u6027\u304c **\u306a\u3044** \u3082\u306e\u304c\u6c42\u3081\u3089\u308c\u307e\u3059\u3002SipHash \u306f\u305d\u306e\u8981\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u306f\u3001\u3042\u308b\u610f\u5473\u3001\u4e71\u6570\u751f\u6210\u6a5f\u306b\u8fd1\u3044\u3082\u306e\u3068\u306a\u308a\u307e\u3059\u3002\u985e\u4f3c\u3059\u308b\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u305f\u6642\u306b\u3001\u975e\u9023\u7d9a\u3067\u300164\u30d3\u30c3\u30c8\u7b26\u53f7\u306a\u3057\u6574\u6570\u304c\u3068\u308a\u3046\u308b\u5024\u306e\u7bc4\u56f2\u306b\u4e00\u69d8\u306b\u5206\u5e03\u3057\u305f\u30cf\u30c3\u30b7\u30e5\u5024\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u751f\u6210\u3055\u308c\u305f\u30cf\u30c3\u30b7\u30e5\u5024\u304c\u3001\u307e\u308b\u3067\u4e71\u6570\u306e\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002\n\n\n## \u78ba\u7387\u306b\u57fa\u3065\u304f\u63a8\u5b9a\n\n\u5148\u307b\u3069\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u898b\u305b\u307e\u3057\u305f\u3002\u3053\u308c\u306f\u3001\u30ec\u30b8\u30b9\u30bf\u30fc\u3068\u547c\u3070\u308c\u308b\u300c\u30ab\u30a6\u30f3\u30bf\u30fc\u306e\u96c6\u5408\u4f53\u300d\u306b\u683c\u7d0d\u3055\u308c\u305f\u30ab\u30a6\u30f3\u30c8\u5024\u306e\u5206\u5e03\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002\n\n```\n  0: 0\n  1: 0\n  2: 0\n  3: 0\n  4: 0\n  5: **** 86\n  6: *********************** 538\n  7: **************************************** 963\n  8: **************************************** 971\n  9: **************************** 667\n 10: ***************** 401\n 11: ********** 238\n 12: ***** 121\n 13: *** 49\n 14: ** 32\n 15: * 18\n 16: * 5\n 17: * 5\n 18: 0\n 19: * 2\n```\n\n\u3053\u306e\u30ab\u30a6\u30f3\u30c8\u5024\u306f\u3001\u4f55\u3092\u610f\u5473\u3057\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f \u4f8b\u3048\u308b\u306a\u3089\u3001\u30b3\u30a4\u30f3\u3092\u9023\u7d9a\u3057\u3066\u6295\u3052\u3066\u3001\u8868\u304c\u51fa\u308b\u307e\u3067\u306b\u6295\u3052\u305f\u56de\u6570\u3067\u3059\u3002\u4f8b\u3048\u3070\u30015 \u304c\u5165\u3063\u3066\u3044\u308b\u30ec\u30b8\u30b9\u30bf\u3067\u306f\u3001\u30b3\u30a4\u30f3\u3092\u6295\u3052\u305f\u3068\u3053\u308d\u3001\uff14\u56de\u9023\u7d9a\u3057\u3066\u88cf\u304c\u51fa\u3066\u3001\uff15\u56de\u76ee\u306b\u3084\u3063\u3068\u8868\u304c\u51fa\u305f\u3053\u3068\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002\n\nSipHash \u306f\u3001\u30cf\u30c3\u30b7\u30e5\u5024\u3068\u3057\u306664\u30d3\u30c3\u30c8\u306e\u7b26\u53f7\u306a\u3057\u6574\u6570\u3092\u8fd4\u3057\u3001\u305d\u306e\u5024\u306f\u3001\u307e\u308b\u3067\u4e71\u6570\u306e\u3088\u3046\u306b\u3001\u30cf\u30c3\u30b7\u30e5\u5024\u304c\u3068\u308a\u3046\u308b\u5024\u306e\u7bc4\u56f2\u306b\u4e00\u69d8\u306b\u5206\u5e03\u3057\u3066\u3044\u308b\u3068\u8a00\u3044\u307e\u3057\u305f\u3002\u3053\u306e\u30cf\u30c3\u30b7\u30e5\u5024\u3092\uff12\u9032\u6570\u3067\u8868\u3057\u3066\u307f\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001`\"test01\"` \u3068\u3044\u3046\u6587\u5b57\u5217\u3068\u3001`\"test02\"` \u3068\u3044\u3046\u6587\u5b57\u5217\u306b\u3064\u3044\u3066\u3001\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u6c42\u3081\u305f\u3068\u3053\u308d\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\uff12\u9032\u6570\u304c\u5f97\u3089\u308c\u305f\u3068\u3057\u307e\u3059\u3002\n\n**\u30cf\u30c3\u30b7\u30e5\u5024\u306e\u4f8b**\n\n- `\"test01\"` \u2192 0100 1001 1101 0010 ... 1011\n- `\"test02\"` \u2192 1001 1011 1110 0110 ... 0011\n\n\u3053\u306e\u6570\u5217\u3092\u5de6\u304b\u3089\u898b\u3066\u30010 \u306f\u30b3\u30a4\u30f3\u306e\u88cf\u30011 \u306f\u30b3\u30a4\u30f3\u306e\u8868\u3060\u3068\u3057\u307e\u3059\u3002\n\n**\u30b3\u30a4\u30f3\u6295\u3052\u306e\u7d50\u679c**\n\n- `\"test01\"` \u2192 01 \u2192 \uff12\u56de\u76ee\u3067\u8868\u304c\u51fa\u305f\n- `\"test02\"` \u2192 1  \u2192 \uff11\u56de\u76ee\u3067\u8868\u304c\u51fa\u305f\n\nHyperLogLog \u3067\u306f\u3001\u5024\u3092\u30a4\u30f3\u30b5\u30fc\u30c8\u3059\u308b\u5ea6\u306b\u3001\u305d\u306e\u5024\u306b\u5bfe\u3059\u308b\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u6c42\u3081\u3001\u30b3\u30a4\u30f3\u6295\u3052\u306e\u3088\u3046\u306b\u3001\u5de6\u304b\u3089\u4f55\u30d3\u30c3\u30c8\u76ee\u3067 1 \u304c\u51fa\u73fe\u3057\u305f\u304b\u3092\u8abf\u3079\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u30ec\u30b8\u30b9\u30bf\u6bce\u306b\u3001\u305d\u306e\u6700\u5927\u5024\u3092\u8a18\u9332\u3057\u307e\u3059\u3002\n\n\u305d\u3057\u3066\u3053\u3053\u304c\u91cd\u8981\u306a\u306e\u3067\u3059\u304c\u3001\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u306f\u540c\u3058\u5165\u529b\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u3001\u540c\u3058\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u51fa\u529b\u3057\u307e\u3059\u306e\u3067\u3001\u540c\u3058\u5165\u529b\u30c7\u30fc\u30bf\u304c\u4f55\u5ea6\u73fe\u308c\u3066\u3082\u3001\u305d\u306e\u6700\u5927\u5024\u306e\u8a18\u9332\u306b\u306f\u5f71\u97ff\u3057\u306a\u3044\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u30c7\u30fc\u30bf\u306e\u91cd\u8907\u304c\u306a\u304b\u3063\u305f\u3082\u306e\u3068\u3057\u3066\u53d6\u308a\u9664\u304b\u308c\u3001**\u7d50\u679c\u7684\u306b\u3001\u7570\u306a\u308a\u5024\u306e\u6570\u306e\u5206\u3060\u3051\u3001\u30b3\u30a4\u30f3\u6295\u3052\u3092\u3057\u305f\u3053\u3068\u3068\u540c\u3058\u306b\u306a\u308a\u307e\u3059**\u3002\n\n\u4e0a\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3067\u306f 19\u56de\u3068\u8a18\u9332\u3055\u308c\u3066\u3044\u305f\u30ec\u30b8\u30b9\u30bf\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u308c\u306f\u3064\u307e\u308a\u3001\u88cf\u304c18\u56de\u3082\u7d9a\u3044\u3066\u51fa\u305f\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u305d\u306e\u78ba\u7387\u304c\u76f8\u5f53\u4f4e\u3044\u3053\u3068\u306f\u611f\u899a\u3067\u5206\u304b\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\uff1f \u4e00\u4f53\u4f55\u56de\u30b3\u30a4\u30f3\u6295\u3052\u3092\u3057\u305f\u306e\u3067\u3057\u3087\u3046\u304b\u3002\u88cf\u304c18\u56de\u7d9a\u3051\u3066\u51fa\u308b\u78ba\u7387\u306f\u30012\u306e18\u4e57\u5206\u306e1\u3001\u3064\u307e\u308a\u300126\u4e072\u5343144\u5206\u306e1\u3067\u3059\u3002\u3068\u3044\u3046\u3053\u3068\u306f\u3001\u78ba\u7387\u7684\u306b\u8003\u3048\u308b\u3068\u3001\u5e73\u5747\u7684\u306b\u3001\u7570\u306a\u308a\u5024\u309226\u4e072\u5343144\u7a2e\u985e\u51e6\u7406\u3059\u308b\u3068\u3001\u3053\u306e\u8a18\u9332\u304c\u51fa\u308b\u3068\u4e88\u60f3\u3067\u304d\u307e\u3059\u3002\u8a00\u3044\u63db\u3048\u308b\u3068\u3001\u7570\u306a\u308a\u5024\u304c26\u4e072\u5343144\u7a2e\u985e\u304f\u3089\u3044\u3042\u3063\u305f\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u63a8\u5b9a\u3067\u304d\u307e\u3059\u3002\n\n\u3053\u308c\u304c\u3001HyperLogLog \u306e\u57fa\u672c\u7684\u306a\u3057\u304f\u307f\u3067\u3059\u3002\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u306b\u3088\u308a\u30c7\u30fc\u30bf\u306e\u91cd\u8907\u3092\u53d6\u308a\u9664\u304d\u3064\u3064\u4e71\u6570\u3092\u5f97\u3066\u3001\u30d3\u30c3\u30c8\u5217\u306b1\u304c\u51fa\u73fe\u3059\u308b\u4f4d\u7f6e\u306e\u6700\u5927\u5024\u3092\u8a18\u9332\u3059\u308b\u3053\u3068\u3067\u3001\u78ba\u7387\u7684\u306a\u63a8\u5b9a\u3092\u884c\u3044\u307e\u3059\u3002\n\n\u3053\u3053\u3067\uff11\u3064\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002\u88cf\u304c18\u56de\u7d9a\u3051\u3066\u51fa\u308b\u78ba\u7387\u306f26\u4e072\u5343144\u5206\u306e1\u3060\u3068\u3044\u3063\u3066\u3082\u3001\u5b9f\u969b\u306b\u4f55\u56de\u76ee\u306e\u30cf\u30c3\u30b7\u30e5\u5024\u3067\u3053\u308c\u304c\u51fa\u308b\u304b\u306f\u3001\u3084\u3063\u3066\u307f\u306a\u3044\u3068\u308f\u304b\u308a\u307e\u305b\u3093\u3002\u904b\u304c\u826f\u3051\u308c\u3070\uff08\u904b\u304c\u60aa\u3051\u308c\u3070\uff1f\uff09\u3001\u30cf\u30c3\u30b7\u30e5\u5024\u309210\u56de\u6c42\u3081\u305f\u3060\u3051\u3067\u3082\u3001\u51fa\u3066\u3057\u307e\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u7570\u306a\u308a\u5024\u304c10\u500b\u3057\u304b\u306a\u3044\u306e\u306b\u3001\u305d\u308c\u309226\u4e072\u5343144\u500b\u3060\u3068\u4e88\u60f3\u3059\u308b\u306e\u306f\u5927\u554f\u984c\u3067\u3059\u3002\n\n\u3053\u308c\u3092\u89e3\u6c7a\u3059\u308b\u305f\u3081\u306b\u3001\u30ec\u30b8\u30b9\u30bf\u30fc\u3068\u3044\u3046\u30ab\u30a6\u30f3\u30bf\u306e\u96c6\u5408\u4f53\u304c\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002\u30cf\u30c3\u30b7\u30e5\u5024\u306e\u53f3\u5074\u306e\u3044\u304f\u3064\u304b\u306e\u30d3\u30c3\u30c8\u3092\u5143\u306b\u3001\u30cf\u30c3\u30b7\u30e5\u5024\u3082\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3057\u307e\u3059\u3002\u4eee\u306b4\u30d3\u30c3\u30c8\u3067\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3059\u308b\u3068\u3057\u305f\u3089\u3001\n\n**\u30cf\u30c3\u30b7\u30e5\u5024\u306e\u30b0\u30eb\u30fc\u30d7\u5206\u3051**\n\n- `\"test01\"` \u2192 0100 1001 1101 0010 ... 1011 \u2192 \u30b0\u30eb\u30fc\u30d7 1011\uff0810\u9032\u6570\u306a\u3089 11\uff09\n- `\"test02\"` \u2192 1001 1011 1110 0110 ... 0011 \u2192 \u30b0\u30eb\u30fc\u30d7 0011\uff0810\u9032\u6570\u306a\u3089 3\uff09\n\n4\u30d3\u30c3\u30c8\u3067\u3059\u306816\u306e\u30b0\u30eb\u30fc\u30d7\u306b\u5206\u304b\u308c\u307e\u3059\u304c\u3001\u3053\u306e\u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306b 1 \u304c\u51fa\u73fe\u3057\u305f\u4f4d\u7f6e\u306e\u6700\u5927\u5024\u3092\u8a18\u9332\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u78ba\u7387\u3092\u6c42\u3081\u3001\u305d\u308c\u3089\u306e\u5e73\u5747\u3092\u53d6\u308b\u3088\u3046\u306b\u3059\u308c\u3070\u3001\u4eee\u306b\u3069\u3053\u304b\u306e\u30b0\u30eb\u30fc\u30d7\u3067\u3059\u3054\u304f\u904b\u306e\u3044\u3044\u3053\u3068\u304c\u8d77\u3053\u3063\u3066\u3082\u3001\u63a8\u5b9a\u304c\u5927\u304d\u304f\u5916\u308c\u308b\u3053\u3068\u3092\u907f\u3051\u3089\u308c\u307e\u3059\u3002\u30b0\u30eb\u30fc\u30d7\u306e\u6570\u304c\u5897\u3048\u308c\u3070\u5897\u3048\u308b\u307b\u3069\u3001\u4e88\u6e2c\u3055\u308c\u308b\u7cbe\u5ea6\u306f\u4e0a\u304c\u308a\u307e\u3059\u3002\n\n\u306a\u304a\u3001\u3053\u306e\u5e73\u5747\u306b\u306f\u3001\u4e00\u822c\u7684\u306b\u7528\u3044\u3089\u308c\u3066\u3044\u308b\u300c\u7b97\u8853\u5e73\u5747\u300d\u3067\u306f\u306a\u304f\u3001\u300c\u8abf\u548c\u5e73\u5747\u300d\u304c\u7528\u3044\u3089\u308c\u307e\u3059\u3002\u8abf\u548c\u5e73\u5747\u306f\u3001\u78ba\u7387\u306e\u5e73\u5747\u3092\u6c42\u3081\u308b\u306e\u306b\u9069\u3057\u3066\u3044\u307e\u3059\u3002\n\nHyperLogLog \u3067\u306f\u3001\u3053\u306e\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u306b\u4f7f\u3046\u30d3\u30c3\u30c8\u6570\u3092 b \u3068\u3044\u3046\u540d\u524d\u3067\u8868\u3057\u3001\u305d\u306e\u5024\u306f4\u304b\u308916\u307e\u3067\u306e\u7bc4\u56f2\u3067\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u5148\u307b\u3069\u306e\u5b9f\u884c\u4f8b\u3067\u306f\u3001\n\n```\nHyperLogLog\n  estimated cardinality: 498713.696162264  <== \u63a8\u5b9a\u5024\n  estimation method:     HyperLogLog       <== \u63a8\u5b9a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n  -----------------------------------------------------\n  b:      12 bits (typical error rate: 1.625%)\n  m:      4096 registers\n  alpha:  0.7211100396160289\n  hasher: (1527868593550391469, 4150425632492557278)\n```\n\nb \u3068\u3057\u306612\u30d3\u30c3\u30c8\u3092\u6307\u5b9a\u3057\u3001\u305d\u306e\u5178\u578b\u7684\u306a\u8aa4\u5dee\u306f 1.625% \u3068\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\n\n# HyperLogLog \u306e\u57fa\u672c\u6a5f\u80fd\u306e\u5b9f\u88c5\n\n## \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\n\n\u305d\u308c\u3067\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\u307e\u305a\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n```\n$ cd \u9069\u5f53\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n$ cargo new hyperloglog\n$ cd hyperloglog\n```\n\n## `HyperLogLog` \u69cb\u9020\u4f53\u3068 `new()` \u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\n\n`src/lib.rs` \u3092\u30a8\u30c7\u30a3\u30bf\u30fc\u3067\u958b\u3044\u3066\u3001`HyperLogLog` \u69cb\u9020\u4f53\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u30d5\u30a3\u30fc\u30eb\u30c9\u3068\u3057\u3066\u3001\u8ad6\u6587\u306e Fig. 3 \u306b\u767b\u5834\u3059\u308b `b`\u3001`m`\u3001`alpha`\u3001`regesters` \u306b\u52a0\u3048\u3066\u3001SipHaher \u306e\u521d\u671f\u5316\u306b\u4f7f\u3046\u30ad\u30fc\u306a\u3069\u3082\u7528\u610f\u3057\u307e\u3059\u3002\n\n```rust:src/lib.rs\n/// `HyperLogLog` \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\npub struct HyperLogLog {\n    // \u30ec\u30b8\u30b9\u30bf\u306e\u30a2\u30c9\u30ec\u30c3\u30b7\u30f3\u30b0\u306b\u4f7f\u3046\uff12\u9032\u6570\u306e\u30d3\u30c3\u30c8\u6570\u3002\n    // \u7bc4\u56f2\u306f 4\u4ee5\u4e0a\u300116\u4ee5\u4e0b\u3067\u3001\u5927\u304d\u3044\u307b\u3069\u898b\u7a4d\u3082\u308a\u8aa4\u5dee\u304c\u5c0f\u3055\u304f\u306a\u308b\u304c\u3001\u305d\u306e\u5206\u30e1\u30e2\u30ea\u3092\u4f7f\u7528\u3059\u308b\u3002\n    b: u8,\n    // usize \u578b\u306e\u30cf\u30c3\u30b7\u30e5\u5024\u306e\u53f3\u304b\u3089b\u30d3\u30c3\u30c8\u3092\u53d6\u308a\u51fa\u3059\u305f\u3081\u306e\u30de\u30b9\u30af\n    b_mask: usize,\n    // \u30ec\u30b8\u30b9\u30bf\u306e\u6570\uff08\uff12\u306eb\u4e57\uff09\u3002\u4f8b\uff1ab = 4 \u2192 16\u3001b = 16 \u2192 65536\n    m: usize,\n    alpha: f64,\n    // \u30ec\u30b8\u30b9\u30bf\u3002\u30b5\u30a4\u30ba\u304c m \u30d0\u30a4\u30c8\u306e\u30d0\u30a4\u30c8\u914d\u5217\n    registers: Vec<u8>,\n    // SipHasher \u306e\u521d\u671f\u5316\u306b\u4f7f\u3046\u30ad\u30fc\n    hasher_key0: u64,\n    hasher_key1: u64,\n}\n```\n\nHash \u95a2\u6570\u3068\u3057\u3066 `SipHasher` \u3092\u4f7f\u7528\u3057\u307e\u3059\u304c\u3001\u3053\u308c\u3092\u521d\u671f\u5316\u3059\u308b\u305f\u3081\u306b\u4e71\u6570\u751f\u6210\u6a5f\u304c\u5fc5\u8981\u3067\u3059\u3002rand \u30af\u30ec\u30fc\u30c8\u3092\u4f7f\u7528\u3057\u307e\u3057\u3087\u3046\u3002Cargo.toml \u306e `[dependencies]` \u30bb\u30af\u30b7\u30e7\u30f3\u306b rand \u30af\u30ec\u30fc\u30c8\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n```toml:Cargo.toml\n[dependencies]\nrand = \"0.3.14\"\n```\n\nsrc/lib.rs \u3067 use \u3057\u307e\u3057\u3087\u3046\u3002\n\n```rust:src/lib.rs\nextern crate rand;\n\nuse rand::Rng;\n```\n\n\u6b21\u306b\u3001\u3053\u306e\u69cb\u9020\u4f53\u3092\u521d\u671f\u5316\u3059\u308b\u305f\u3081\u306e `new()` \u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n\u8ad6\u6587\u306e Fig. 3 \u306b\u3088\u308b\u3068\u3001HyperLogLog \u306b\u306f\u3001\u521d\u671f\u5316\u30d1\u30e9\u30fc\u30e1\u30fc\u30bf\u30fc `b` \u304c\u3042\u308a\u3001\u3053\u308c\u306f\u3001\u30ec\u30b8\u30b9\u30bf\u306e\u30a2\u30c9\u30ec\u30c3\u30b7\u30f3\u30b0\u306b\u4f7f\u7528\u3059\u308b\u30d3\u30c3\u30c8\u6570\u3092\u5b9a\u3081\u307e\u3059\u3002\u307e\u305f\u3001\u305d\u306e\u7bc4\u56f2\u306f 4 \u304b\u3089 16 \u307e\u3067\u3067\u3059\u3002\u307e\u305a\u3001\u305d\u3053\u307e\u3067\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n```rust:src/lib.rs\nuse std::error::Error;\n\nimpl HyperLogLog {\n\n    /// `HyperLogLog` \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3002b \u3067\u6307\u5b9a\u3057\u305f\u30d3\u30c3\u30c8\u6570\u3092\u30ec\u30b8\u30b9\u30bf\u306e\n    /// \u30a2\u30c9\u30ec\u30c3\u30b7\u30f3\u30b0\u306b\u4f7f\u7528\u3059\u308b\u3002b \u306e\u7bc4\u56f2\u306f 4\u4ee5\u4e0a\u300116\u4ee5\u4e0b\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n    /// \u7bc4\u56f2\u5916\u306a\u3089 `Err` \u3092\u8fd4\u3059\u3002\n    pub fn new(b: u8) -> Result<Self, Box<Error>> {\n        if b < 4 || b > 16 {\n            return Err(From::from(format!(\"b must be between 4 and 16. b = {}\", b)));\n        }\n```\n\n\u3053\u306e\u3088\u3046\u306b\u3001b \u306e\u5024\u304c\u7bc4\u56f2\u5916\u306e\u6642\u306f\u3001`Result::Err<Box<Error>>` \u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\n\u6b21\u306b\u3001Fig. 3 \u306b\u3088\u308b\u3068\u3001\u69cb\u9020\u4f53\u306e\u30d5\u30a3\u30fc\u30eb\u30c9 `m` \u306f 2\u306eb\u4e57\u3002\u30b7\u30d5\u30c8\u6f14\u7b97\u3067\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\n```rust:src/lib.rs\n    pub fn new(b: u8) -> Result<Self, Box<Error>> {\n        if b < 4 || b > 16 {\n            return Err(From::from(format!(\"b must be between 4 and 16. b = {}\", b)));\n        }\n\n        let m = 1 << b;\n```\n\n\u6b21\u306b\u3001\u69cb\u9020\u4f53\u306e\u30d5\u30a3\u30fc\u30eb\u30c9 `alpha` \u306f Fig.3 \u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u5b9a\u6570\u3068\u5f0f\u4f7f\u3044\u307e\u3059\u3002`get_alpha()` \u3068\u3044\u3046\u5225\u306e\u95a2\u6570\u306b\u3057\u307e\u3057\u305f\u3002\n\n```rust:src/lib.rs\n/// \u30d3\u30c3\u30c8\u6570 b \u306b\u5bfe\u5fdc\u3059\u308b \u03b1 \u5024\u3092\u8fd4\u3059\u3002\nfn get_alpha(b: u8) -> Result<f64, Box<Error>> {\n    if b < 4 || b > 16 {\n        Err(From::from(format!(\"b must be between 4 and 16. b = {}\", b)))\n    } else {\n        Ok(match b {\n            4 => 0.673, // \u03b116\n            5 => 0.697, // \u03b132\n            6 => 0.709, // \u03b164\n            _ => 0.7213 / (1.0 + 1.079 / (1 << b) as f64),\n        })\n    }\n}\n```\n\n\u547c\u3073\u51fa\u3057\u5074\u306f `get_alpha(b)?` \u3068\u3044\u3046\u3088\u3046\u306b\u3001`?` \u4ed8\u304d\u3067\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\u3053\u308c\u306f Rust 1.13 \u304b\u3089\u5c0e\u5165\u3055\u308c\u305f\u65b0\u3057\u3044\u6f14\u7b97\u5b50\u3067\u3001Rust 1.0 \u304b\u3089\u5099\u308f\u3063\u3066\u3044\u308b `try!` \u30de\u30af\u30ed\u3068\u540c\u3058\u3088\u3046\u306a\u52d5\u4f5c\u3092\u3057\u307e\u3059\u3002`get_alpha()` \u304b\u3089\u8fd4\u3055\u308c\u305f\u5024\u304c `Ok<f64>` \u578b\u306a\u3089\u3001\u305d\u308c\u3092 unwrap \u3057\u3066 f64 \u5024\u3092\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u3082\u3057 `get_alpha()` \u304b\u3089\u8fd4\u3055\u308c\u305f\u5024\u304c `Err<Box<Error>>` \u578b\u306a\u3089\u3001`new()` \u95a2\u6570\u304b\u3089\u65e9\u671f\u30ea\u30bf\u30fc\u30f3\u3057\u3066\u3001\u547c\u3073\u51fa\u3057\u5143\u306b\u30a8\u30e9\u30fc\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```rust:src/lib.rs\nimpl HyperLogLog {\n\n    pub fn new(b: u8) -> Result<Self, Box<Error>> {\n        if b < 4 || b > 16 {\n            return Err(From::from(format!(\"b must be between 4 and 16. b = {}\", b)));\n        }\n\n        let m = 1 << b;\n        let alpha = get_alpha(b)?;\n```\n\n\u6700\u5f8c\u306b Hasher \u521d\u671f\u5316\u7528\u306e\u4e71\u6570\u3092\u751f\u6210\u3057\u3066\u3001`HyperLogLog` \u69cb\u9020\u4f53\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```rust:src/lib.rs\nuse std::error::Error;\n\nimpl HyperLogLog {\n\n    /// `HyperLogLog` \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3002b \u3067\u6307\u5b9a\u3057\u305f\u30d3\u30c3\u30c8\u6570\u3092\u30ec\u30b8\u30b9\u30bf\u306e\n    /// \u30a2\u30c9\u30ec\u30c3\u30b7\u30f3\u30b0\u306b\u4f7f\u7528\u3059\u308b\u3002b \u306e\u7bc4\u56f2\u306f 4\u4ee5\u4e0a\u300116\u4ee5\u4e0b\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n    /// \u7bc4\u56f2\u5916\u306a\u3089 `Err` \u3092\u8fd4\u3059\u3002\n    pub fn new(b: u8) -> Result<Self, Box<Error>> {\n        if b < 4 || b > 16 {\n            return Err(From::from(format!(\"b must be between 4 and 16. b = {}\", b)));\n        }\n\n        let m = 1 << b;\n        let alpha = get_alpha(b)?;\n        // hasher_key0, key1 \u3092\u521d\u671f\u5316\u3059\u308b\u305f\u3081\u306e\u4e71\u6570\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3002\n        let mut rng = rand::OsRng::new().map_err(|e| format!(\"Failed to create an OS RNG: {}\", e))?;\n\n        Ok(HyperLogLog {\n            alpha: alpha,\n            b: b,\n            b_mask: m - 1,\n            m: m,\n            registers: vec![0; m],\n            hasher_key0: rng.gen(),\n            hasher_key1: rng.gen(),\n        })\n    }\n}\n```\n\n\u7c21\u5358\u306a\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u66f8\u3044\u3066\u3001\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```rust:src/lib.rs\n// \u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\n#[cfg(test)]\nmod tests {\n\n    use super::*;\n\n    #[test]\n    fn create_hll() {\n        assert!(HyperLogLog::new(3).is_err());\n        assert!(HyperLogLog::new(17).is_err());\n\n        let hll = HyperLogLog::new(4);\n        assert!(hll.is_ok());\n\n        let hll = hll.unwrap();\n        assert_eq!(hll.b, 4);\n        assert_eq!(hll.m, 2.powi(4));\n        assert_eq!(hll.alpha, 0.673);\n        assert_eq!(hll.registers.len(), 2.powi(4));\n\n        assert!(HyperLogLog::new(16).is_ok());\n    }\n}\n```\n\n```\n$ cargo test\n... \uff08\u5f8c\u307b\u3069\u8a18\u5165\u3057\u307e\u3059\uff09\n\n```\n\n\n## `insert()` \u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\n\n\u6b21\u306f HyperLogLog \u306b\u65b0\u3057\u3044\u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b `insert()` \u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u307e\u3057\u3087\u3046\u3002\u307e\u305a `SipHasher` \u3092 use \u3057\u307e\u3059\u3002\n\n```rust:src/lib.rs\nuse std::hash::{Hash, Hasher};\n\n// SipHasher \u306f Rust 1.13.0 \u3067\u975e\u63a8\u5968\u3068\u306a\u3063\u305f\u3002\u3057\u304b\u3057\u3001\u305d\u308c\u3092\u7f6e\u304d\u63db\u3048\u308b SipHasher24 \u306f\n// \u73fe\u72b6\u3067\u306f\u975e\u5b89\u5b9a(unstable) \u306a\u305f\u3081\u3001\u5b89\u5b9a\u7248\u306e Rust \u30ea\u30ea\u30fc\u30b9\u3067\u306f\u4f7f\u7528\u3067\u304d\u306a\u3044\u3002\n#[allow(deprecated)]\nuse std::hash::SipHasher;\n```\n\n\u8ad6\u6587\u306e Fig. 3 \u306b\u6cbf\u3063\u3066\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u5024 `value` \u306e hash \u5024\u3092\u5909\u6570 `x` \u306b\u675f\u7e1b\u3002`b_mask` \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u5024\u3092\u4f7f\u3063\u3066\u3001`x` \u306e\u5024\u306e\u53f3\u304b\u3089 b \u30d3\u30c3\u30c8\u3092\u5207\u308a\u51fa\u3057\u3001\u3053\u308c\u3092\u30ec\u30b8\u30b9\u30bf Vec \u306e\u8981\u7d20\u756a\u53f7\u3068\u3057\u3066\u4f7f\u308f\u308c\u308b\u5909\u6570 `j` \u306b\u675f\u7e1b\u3057\u307e\u3059\u3002\u307e\u305f\u3001`x` \u306e\u6b8b\u308a\u306e\u30d3\u30c3\u30c8\uff0864\u30d3\u30c3\u30c8 - b \u30d3\u30c3\u30c8\uff09\u3092\u5909\u6570 `w` \u306b\u675f\u7e1b\u3057\u307e\u3059\u3002\n\n```rust:src/lib.rs\nimpl HyperLogLog {\n\n    // ...\n\n    /// \u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b\u3002\u8981\u7d20\u306f `std::hash::Hash` \u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n    pub fn insert<H: Hash>(&mut self, value: &H) {\n        let x = self.hash(value);\n        let j = x as usize & self.b_mask;\n        let w = x >> self.b;\n\n\n    }\n\n    /// \u4e0e\u3048\u3089\u308c\u305f value \u306b\u5bfe\u3059\u308b 64 \u30d3\u30c3\u30c8\u306e\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u6c42\u3081\u308b\u3002\n    #[allow(deprecated)]  // SipHasher \u304c Rust 1.13 \u3067\u975e\u63a8\u5968(deprecated) \u306e\u305f\u3081\u3002\n    fn hash<H: Hash>(&self, value: &H) -> u64 {\n        let mut hasher = SipHasher::new_with_keys(self.hasher_key0, self.hasher_key1);\n        value.hash(&mut hasher);\n        hasher.finish()\n    }\n\n}\n```\n\n\u6b21\u306b\u3001`w` \u306e\u5024\u306b\u3064\u3044\u3066\u3001\u5de6\u5074\u304b\u3089\u4f55\u6841\u76ee\u306b `1` \u304c\u7acb\u3063\u3066\u3044\u308b\u30d3\u30c3\u30c8\u304c\u73fe\u308c\u305f\u306e\u304b\u3092\u6c42\u3081\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u5225\u95a2\u6570\u306b\u5207\u308a\u51fa\u3057\u307e\u3057\u3087\u3046\u3002\n\n```rust:src/lib.rs\nimpl HyperLogLog {\n\n    // ...\n\n    /// \u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b\u3002\u8981\u7d20\u306f `std::hash::Hash` \u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n    pub fn insert<H: Hash>(&mut self, value: &H) {\n        let x = self.hash(value);\n        let j = x as usize & self.b_mask;\n        let w = x >> self.b;\n\n        let p1 = position_of_leftmost_one_bit(w, 64 - self.b);\n\n\n    }\n\n}\n```\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\n```rust:src/lib.rs\n/// \u30cf\u30c3\u30b7\u30e5\u5024\uff0864\u30d3\u30c3\u30c8\u7b26\u53f7\u306a\u3057\uff12\u9032\u6570\uff09\u306e\u5de6\u7aef\u304b\u3089\u898b\u3066\u6700\u521d\u306b\u51fa\u73fe\u3057\u305f 1 \u306e\u4f4d\u7f6e\u3092\u8fd4\u3059\u3002\n/// \u4f8b\uff1a10000... \u2192 1\u300100010... \u2192 4\nfn position_of_leftmost_one_bit(s: u64, max_width: u8) -> u8 {\n    count_leading_zeros(s, max_width) + 1\n}\n\n/// \u30cf\u30c3\u30b7\u30e5\u5024\uff0864\u30d3\u30c3\u30c8\u7b26\u53f7\u306a\u3057\uff12\u9032\u6570\uff09\u5de6\u7aef\u306b\u9023\u7d9a\u3057\u3066\u4e26\u3093\u3067\u3044\u308b 0 \u306e\u500b\u6570\u3092\u8fd4\u3059\u3002\n/// \u4f8b\uff1a10000... \u2192 0\u300100010... \u2192 3\nfn count_leading_zeros(mut s: u64, max_width: u8) -> u8 {\n    let mut lz = max_width;\n    while s != 0 {\n        lz -= 1;\n        s >>= 1;\n    }\n    lz\n}\n```\n\n\u6700\u5f8c\u306b\u3001`position_of_leftmost_one_bit()` \u304c\u8fd4\u3057\u305f\u5024\u3068\u3001`registers[j]` \u306e\u5024\u3092\u6bd4\u8f03\u3057\u3066\u3001\u5927\u304d\u3044\u65b9\u306e\u5024\u3092 `registers[j]` \u306b\u683c\u7d0d\u3057\u307e\u3059\u3002\n\n```rust:src/lib.rs\nimpl HyperLogLog {\n\n    // ...\n\n    /// \u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b\u3002\u8981\u7d20\u306f `std::hash::Hash` \u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n    pub fn insert<H: Hash>(&mut self, value: &H) {\n        let x = self.hash(value);\n        let j = x as usize & self.b_mask;\n        let w = x >> self.b;\n\n        let p1 = position_of_leftmost_one_bit(w, 64 - self.b);\n        let p2 = &mut self.registers[j];\n        if *p2 < p1 {\n            *p2 = p1;\n        }\n    }\n\n}\n```\n\n\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u3087\u3046\u3002\n\n```rust:src/lib.rs\nmod tests {\n\n    use super::*;\n\n    #[test]\n    fn small_range() {\n        let mut hll = HyperLogLog::new(12).unwrap();\n        let items = [\"test1\", \"test2\", \"test3\", \"test2\", \"test2\", \"test2\"];\n\n        println!(\"\\n=== Loading {} items.\\n\", items.len());\n        for item in &items {\n            hll.insert(item);\n        }\n    }\n}\n```\n\n## `cardinality()` \u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\n\n\u30ab\u30fc\u30c7\u30a3\u30ca\u30ea\u30c6\u30a3\u3092\u63a8\u5b9a\u3059\u308b `cardinality()` \u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u307e\u3057\u3087\u3046\u3002Fig. 3 \u306b\u6cbf\u3063\u3066\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n```rust:src/lib.rs\n/// \u63a8\u5b9a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3002\u30c7\u30d0\u30c3\u30b0\u51fa\u529b\u7528\n#[derive(Debug)]\npub enum Estimator {\n    HyperLogLog,\n    LinearCounting, // \u30b9\u30e2\u30fc\u30eb\u30ec\u30f3\u30b8\u306e\u898b\u7a4d\u3082\u308a\u306b\u4f7f\u7528\u3059\u308b\u3002\n}\n\nimpl HyperLogLog {\n\n    // ..\n\n    /// \u30ab\u30fc\u30c7\u30a3\u30ca\u30ea\u30c6\u30a3\u306e\u898b\u7a4d\u3082\u308a\u5024\u3092\u8fd4\u3059\u3002\n    pub fn cardinality(&self) -> f64 {\n        estimate_cardinality(self).0\n    }\n\n}\n\n// ...\n\n/// \u30ab\u30fc\u30c7\u30a3\u30ca\u30ea\u30c6\u30a3\u3092\u63a8\u5b9a\u3057\u3001\u305d\u306e\u5024\u3068\u3001\u898b\u7a4d\u3082\u308a\u306b\u4f7f\u7528\u3057\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u8fd4\u3059\u3002\n/// \u30b9\u30e2\u30fc\u30eb\u30ec\u30f3\u30b8\u3067\u306f `Linear Counting` \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u7528\u3057\u3001\u305d\u308c\u3092\u8d85\u3048\u308b\u30ec\u30f3\u30b8\u3067\u306f\n/// `HyperLogLog` \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u7528\u3059\u308b\u3002\u3053\u3053\u307e\u3067\u306f\u8ad6\u6587\u306e\u901a\u308a\u3002\n/// \u3057\u304b\u3057\u3001\u8ad6\u6587\u306b\u3042\u308b\u30e9\u30fc\u30b8\u30ec\u30f3\u30b8\u88dc\u6b63\u306f\u884c\u306a\u308f\u306a\u3044\u3002\u306a\u305c\u306a\u3089\u3001\u672c\u5b9f\u88c5\u3067\u306f\u300132 \u30d3\u30c3\u30c8\u306e\n/// \u30cf\u30c3\u30b7\u30e5\u5024\u306e\u4ee3\u308f\u308a\u306b 64 \u30d3\u30c3\u30c8\u306e\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u4f7f\u7528\u3057\u3066\u304a\u308a\u3001\u30cf\u30c3\u30b7\u30e5\u5024\u304c\u885d\u7a81\u3059\u308b\u983b\u5ea6\u304c\n/// \u6975\u3081\u3066\u4f4e\u3044\u3068\u4e88\u60f3\u3055\u308c\u308b\u305f\u3081\u3002\nfn estimate_cardinality(hll: &HyperLogLog) -> (f64, Estimator) {\n    let m_f64 = hll.m as f64;\n    // \u307e\u305a `HyperLogLog` \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3088\u308b\u898b\u7a4d\u3082\u308a\u5024\u3092\u7b97\u51fa\u3059\u308b\u3002\n    let est = raw_hyperloglog_estimate(hll.alpha, m_f64, &hll.registers);\n\n    if est < (5.0 / 2.0 * m_f64) {\n        // \u30b9\u30e2\u30fc\u30eb\u30ec\u30f3\u30b8\u306e\u898b\u7a4d\u3082\u308a\u3092\u884c\u3046\u3002\u3082\u3057\u5024\u304c 0 \u306e\u30ec\u30b8\u30b9\u30bf\u304c\uff11\u3064\u3067\u3082\u3042\u308b\u306a\u3089\u3001\n        // `Linear Counting` \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u898b\u7a4d\u3082\u308a\u76f4\u3059\u3002\n        match count_zero_registers(&hll.registers) {\n            0 => (est, Estimator::HyperLogLog),\n            v => (linear_counting_estimate(m_f64, v as f64), Estimator::LinearCounting),\n        }\n    } else {\n        (est, Estimator::HyperLogLog)\n    }\n}\n\n/// \u5024\u304c 0 \u306e\u30ec\u30b8\u30b9\u30bf\u306e\u500b\u6570\u3092\u8fd4\u3059\u3002\nfn count_zero_registers(registers: &[u8]) -> usize {\n    registers.iter().filter(|&x| *x == 0).count()\n}\n\n```\n\n\u500b\u3005\u306e\u63a8\u5b9a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\n```rust:src/lib.rs\n/// `HyperLogLog` \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3088\u308b\u672a\u88dc\u6b63\u306e\u898b\u7a4d\u3082\u308a\u5024\u3092\u7b97\u51fa\u3059\u308b\u3002\nfn raw_hyperloglog_estimate(alpha: f64, m: f64, registers: &[u8]) -> f64 {\n    let sum = registers.iter().map(|&x| 2.0f64.powi(-(x as i32))).sum::<f64>();\n    alpha * m * m / sum\n}\n\n/// `Linear Counting` \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3088\u308b\u898b\u7a4d\u3082\u308a\u5024\u3092\u7b97\u51fa\u3059\u308b\u3002\nfn linear_counting_estimate(m: f64, number_of_zero_registers: f64) -> f64 {\n    m * (m / number_of_zero_registers).ln()\n}\n```\n\n\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3059\uff08\u5f8c\u307b\u3069\u8ffd\u52a0\u3057\u307e\u3059\uff09\n\n\n# \u30c7\u30d0\u30c3\u30af\u51fa\u529b\u3084\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u8ffd\u52a0\u3059\u308b\n\n## \u30c7\u30d0\u30c3\u30b0\u51fa\u529b\u3092\u8ffd\u52a0\u3059\u308b\n\n```rust:src/lib.rs\n    /// b \u304b\u3089\u4e88\u60f3\u3055\u308c\u308b\u5178\u578b\u7684\u306a\u30a8\u30e9\u30fc\u7387\u3092\u8fd4\u3059\u3002\n    pub fn typical_error_rate(&self) -> f64 {\n        1.04 / (self.m as f64).sqrt()\n    }\n```\n\n```rust:src/lib.rs\nuse std::fmt;\n```\n\n```rust:src/lib.rs\n/// `HyperLogLog` \u306e\u30c7\u30d0\u30c3\u30b0\u51fa\u529b\u7528\u6587\u5b57\u5217\u3092\u8fd4\u3059\u3002\nimpl fmt::Debug for HyperLogLog {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        let (est, est_method) = estimate_cardinality(self);\n        write!(f,\n               r#\"HyperLogLog\n  estimated cardinality: {}\n  estimation method:     {:?}\n  -----------------------------------------------------\n  b:      {} bits (typical error rate: {}%)\n  m:      {} registers\n  alpha:  {}\n  hasher: ({}, {})\"#,\n               est,\n               est_method,\n               self.b,\n               self.typical_error_rate() * 100.0,\n               self.m,\n               self.alpha,\n               self.hasher_key0,\n               self.hasher_key1)\n    }\n}\n```\n\n\n## \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u63cf\u3051\u308b\u3088\u3046\u306b\u3059\u308b\n\n```rust:src/lib.rs\nuse std::collections::BTreeMap;\n```\n\n```rust:src/lib.rs\nimpl HyperLogLog {\n\n    // ...\n\n    /// \u30ec\u30b8\u30b9\u30bf\u306b\u683c\u7d0d\u3055\u308c\u305f\u5024\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u5206\u5e03\u3092\u793a\u3059\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u8fd4\u3059\u3002\n    pub fn histgram_of_register_value_distribution(&self) -> String {\n        let mut histgram = Vec::new();\n\n        let mut map = BTreeMap::new();\n        for x in &self.registers {\n            let count = map.entry(*x).or_insert(0);\n            *count += 1;\n        }\n\n        if let (Some(last_reg_value), Some(max_count)) = (map.keys().last(), map.values().max()) {\n            // \u30b0\u30e9\u30d5\u306e\u6700\u5927\u5e45 = 40 \u6587\u5b57\n            let width = 40.0;\n            let rate = width / (*max_count as f64);\n\n            for i in 0..(last_reg_value + 1) {\n                let mut line = format!(\"{:3}: \", i);\n\n                if let Some(count) = map.get(&i) {\n                    // \u30a2\u30b9\u30bf\u30ea\u30b9\u30af(*) \u3067\u6a2a\u68d2\u3092\u63cf\u304f\n                    let h_bar = std::iter::repeat(\"*\")\n                        .take((*count as f64 * rate).ceil() as usize)\n                        .collect::<String>();\n                    line.push_str(&h_bar);\n                    line.push_str(&format!(\" {}\", count));\n                } else {\n                    line.push_str(\"0\");\n                };\n\n                histgram.push(line);\n            }\n        }\n        histgram.join(\"\\n\")\n    }\n}\n```\n\n# `merge()` \u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\n\n```rust:src/lib.rs\nimpl HyperLogLog {\n\n    // ...\n\n    /// `template` \u3067\u4e0e\u3048\u3089\u308c\u305f\u65e2\u5b58\u306e `HyperLogLog` \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u540c\u3058\u8a2d\u5b9a\u3092\u6301\u3064\n    /// `HyperLogLog` \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3002\n    pub fn from_template(template: &HyperLogLog) -> Self {\n        let m = template.m;\n        HyperLogLog {\n            alpha: template.alpha,\n            b: template.b,\n            b_mask: m - 1,\n            m: m,\n            registers: vec![0; m],\n            hasher_key0: template.hasher_key0,\n            hasher_key1: template.hasher_key1,\n        }\n    }\n\n    /// `self` \u3067\u793a\u3055\u308c\u308b `HyperLogLog` \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u3001`other` \u3067\u793a\u3055\u308c\u308b\u5225\u306e\n    /// `HyperLogLog` \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30de\u30fc\u30b8\u3059\u308b\u3002\u4e21\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u8a2d\u5b9a\u304c\u7570\u306a\u308b\u5834\u5408\u306f\n    /// `Err` \u3092\u8fd4\u3059\u3002\n    pub fn merge(&mut self, other: &HyperLogLog) -> Result<(), Box<Error>> {\n        if self.b == other.b && self.m == other.m && self.hasher_key0 == other.hasher_key0 &&\n           self.hasher_key1 == other.hasher_key1 {\n            for (p1, p2) in self.registers.iter_mut().zip(other.registers.iter()) {\n                if *p1 < *p2 {\n                    *p1 = *p2\n                }\n            }\n            Ok(())\n        } else {\n            Err(From::from(format!(\"Specs does not match. \\\n                                    b: {}|{}, m: {}|{}, hasher: ({},{})|({},{})\",\n                                   self.b,\n                                   other.b,\n                                   self.m,\n                                   other.m,\n                                   self.hasher_key0,\n                                   self.hasher_key1,\n                                   other.hasher_key0,\n                                   other.hasher_key1)))\n        }\n    }\n\n}\n```\n\n# \u307e\u3068\u3081\n\n- HyperLogLog \u306e\u57fa\u672c\u7684\u306a\u4ed5\u7d44\u307f\u3092\u8aac\u660e\u3057\u3001Rust \u3067\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n- \u5358\u306b\u30ab\u30fc\u30c7\u30a3\u30ca\u30ea\u30c6\u30a3\u3092\u63a8\u6e2c\u3067\u304d\u308b\u3060\u3051\u3067\u306a\u304f\u3001\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306a\u3069\u30c7\u30d0\u30c3\u30b0\u7528\u306e\u51fa\u529b\u3092\u5145\u5b9f\u3055\u305b\u3001\u5185\u90e8\u306e\u52d5\u4f5c\u304c\u5b66\u7fd2\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n- \u6b21\u56de\u306f HyperLogLog \u3092\u4f7f\u3063\u3066\u3001\u30a6\u30a3\u30ad\u30da\u30c7\u30a3\u30a2\u65e5\u672c\u8a9e\u7248\u306e\u5168\u8a18\u4e8b\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u30e6\u30cb\u30fc\u30af\u5358\u8a9e\u6570\u3092\u3001\u30d7\u30e9\u30b9\u30de\u30a4\u30ca\u30b9\u7d04 2% \u306e\u8aa4\u5dee\u3067\u63a8\u5b9a\u3057\u307e\u3059\u3002\n", "tags": ["rust", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"]}