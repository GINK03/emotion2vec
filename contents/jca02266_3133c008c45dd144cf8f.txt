{"context": " More than 1 year has passed since last update.D3.js\u3092\u4f7f\u3063\u3066\u30d0\u30fc\u30f3\u30c0\u30a6\u30f3\u30c1\u30e3\u30fc\u30c8\u3092\u66f8\u3044\u3066\u307f\u305f\n\nburndownchart.js\nfunction burndownchart(idealData, actualData) {\n  var margin = {\n    top: 10,\n    bottom: 50,\n    left: 50,\n    right: 30\n  };\n\n  var screen = {\n    width: 500,\n    height: 500\n  };\n\n  var xScale = d3.time.scale()\n                 .domain(d3.extent(idealData, function(d) { return d.date }))\n                 .range([margin.left, screen.width - margin.right])\n                 ;\n  var yScale = d3.scale.linear()\n                 .domain([0, d3.max(idealData, function(d) { return d.value })])\n                 .range([screen.height - margin.bottom, margin.top])\n                 ;\n\n  var xAxis = d3.svg.axis()\n    .scale(xScale)\n    .orient(\"bottom\")\n    .tickFormat(d3.time.format(\"%Y-%m-%d\"))\n    ;\n\n  var yAxis = d3.svg.axis()\n    .scale(yScale)\n    .orient(\"left\")\n    .ticks(5)\n    ;\n\n  var svg = d3.select(\"body\")\n              .append(\"svg\")\n              .attr(\"width\", screen.width)\n              .attr(\"height\", screen.height)\n              ;\n\n  svg.append(\"g\")\n     .attr(\"class\", \"axis\")\n     .attr(\"transform\", \"translate(0, \" + (screen.height - margin.bottom) + \")\")\n     .call(xAxis)\n     .selectAll(\"text\")\n     .style(\"text-anchor\", \"end\")\n     .attr(\"transform\", \"rotate(-30)\")\n     ;\n\n  svg.append(\"g\")\n     .attr(\"class\", \"axis\")\n     .attr(\"transform\", \"translate(\" + margin.left + \", 0)\")\n     .call(yAxis)\n     ;\n\n  var idealLine = d3.svg.line()\n                    .x(function(d) { return xScale(d.date) })\n                    .y(function(d) { return yScale(d.value) })\n                    ;\n\n  var actualLine = d3.svg.line()\n                    .x(function(d) { return xScale(d.date) })\n                    .y(function(d) { return yScale(d.value) })\n                    ;\n\n  svg.selectAll(\"circle.point.actual\")\n     .data(actualData)\n     .enter()\n     .append(\"circle\")\n     .attr(\"cx\", function(d) { return xScale(d.date)})\n     .attr(\"cy\", function(d) { return yScale(d.value) })\n     .attr(\"r\", 2)\n     .attr(\"class\", \"point actual\")\n     ;\n\n  svg.selectAll(\"circle.point.ideal\")\n     .data(idealData)\n     .enter()\n     .append(\"circle\")\n     .attr(\"cx\", function(d) { return xScale(d.date)})\n     .attr(\"cy\", function(d) { return yScale(d.value) })\n     .attr(\"r\", 2)\n     .attr(\"class\", \"point ideal\")\n     ;\n\n  svg.append(\"path\")\n     .datum(idealData)\n     .attr(\"class\", \"line ideal\")\n     .attr(\"d\", idealLine)\n     ;\n\n  svg.append(\"path\")\n     .datum(actualData)\n     .attr(\"class\", \"line actual\")\n     .attr(\"d\", actualLine)\n     ;\n}\n\n\n\nburndownchart.css\n.axis path,\n.axis line {\n  fill: none;\n  stroke: black;\n  shape-rendering: crispEdges;\n  stroke-width: 1.5px;\n}\n.axis text {\n  font-family: sans-serif;\n  font-size: 11px\n}\n\n.point {\n  stroke-width: 1.5px;\n}\n\n.point.ideal {\n  fill: blue;\n  stroke: blue;\n}\n.point.actual {\n  fill: orange;\n  stroke: orange;\n}\n\n.line {\n  fill: none;\n  stroke-width: 1.5px;\n}\n\n.line.ideal {\n  stroke: blue;\n}\n.line.actual {\n  stroke: orange;\n}\n\n\n\nsample.html\n<!DOCTYPE html>\n   <html lang=\"en\">\n      <head>\n         <meta charset=\"utf-8\">\n         <title>Burndown Chart Sample</title>\n         <script type=\"text/javascript\" src=\"http://d3js.org/d3.v3.min.js\"></script>\n         <script type=\"text/javascript\" src=\"burndownchart.js\"></script>\n         <link rel=\"stylesheet\" type=\"text/css\" href=\"burndownchart.css\">\n      </head>\n\n      <body>\n         <script type=\"text/javascript\">\n           var parseDate = d3.time.format(\"%Y/%m/%d\").parse;\n\n           var idealdata = [\n              {date: parseDate(\"2014/1/1\"), value: 50},\n              {date: parseDate(\"2014/1/2\"), value: 45},\n              {date: parseDate(\"2014/1/3\"), value: 40},\n              {date: parseDate(\"2014/1/4\"), value: 35},\n              {date: parseDate(\"2014/1/5\"), value: 30},\n              {date: parseDate(\"2014/1/6\"), value: 25},\n              {date: parseDate(\"2014/1/7\"), value: 20},\n              {date: parseDate(\"2014/1/8\"), value: 15},\n              {date: parseDate(\"2014/1/9\"), value: 10},\n              {date: parseDate(\"2014/1/10\"),value:  5},\n              {date: parseDate(\"2014/1/11\"),value:  0}\n           ];\n\n           var actualdata = [\n              {date: parseDate(\"2014/1/1\"), value: 45},\n              {date: parseDate(\"2014/1/2\"), value: 39},\n              {date: parseDate(\"2014/1/4\"), value: 32},\n              {date: parseDate(\"2014/1/5\"), value: 28},\n              {date: parseDate(\"2014/1/7\"), value: 26}\n           ];\n\n           burndownchart(idealdata, actualdata);\n         </script>\n      </body>\n</html>\n\n\n\nD3.js\u3092\u4f7f\u3063\u3066\u30d0\u30fc\u30f3\u30c0\u30a6\u30f3\u30c1\u30e3\u30fc\u30c8\u3092\u66f8\u3044\u3066\u307f\u305f\n\n```js:burndownchart.js\nfunction burndownchart(idealData, actualData) {\n  var margin = {\n    top: 10,\n    bottom: 50,\n    left: 50,\n    right: 30\n  };\n\n  var screen = {\n    width: 500,\n    height: 500\n  };\n\n  var xScale = d3.time.scale()\n                 .domain(d3.extent(idealData, function(d) { return d.date }))\n                 .range([margin.left, screen.width - margin.right])\n                 ;\n  var yScale = d3.scale.linear()\n                 .domain([0, d3.max(idealData, function(d) { return d.value })])\n                 .range([screen.height - margin.bottom, margin.top])\n                 ;\n\n  var xAxis = d3.svg.axis()\n    .scale(xScale)\n    .orient(\"bottom\")\n    .tickFormat(d3.time.format(\"%Y-%m-%d\"))\n    ;\n\n  var yAxis = d3.svg.axis()\n    .scale(yScale)\n    .orient(\"left\")\n    .ticks(5)\n    ;\n\n  var svg = d3.select(\"body\")\n              .append(\"svg\")\n              .attr(\"width\", screen.width)\n              .attr(\"height\", screen.height)\n              ;\n\n  svg.append(\"g\")\n     .attr(\"class\", \"axis\")\n     .attr(\"transform\", \"translate(0, \" + (screen.height - margin.bottom) + \")\")\n     .call(xAxis)\n     .selectAll(\"text\")\n     .style(\"text-anchor\", \"end\")\n     .attr(\"transform\", \"rotate(-30)\")\n     ;\n\n  svg.append(\"g\")\n     .attr(\"class\", \"axis\")\n     .attr(\"transform\", \"translate(\" + margin.left + \", 0)\")\n     .call(yAxis)\n     ;\n\n  var idealLine = d3.svg.line()\n                    .x(function(d) { return xScale(d.date) })\n                    .y(function(d) { return yScale(d.value) })\n                    ;\n\n  var actualLine = d3.svg.line()\n                    .x(function(d) { return xScale(d.date) })\n                    .y(function(d) { return yScale(d.value) })\n                    ;\n\n  svg.selectAll(\"circle.point.actual\")\n     .data(actualData)\n     .enter()\n     .append(\"circle\")\n     .attr(\"cx\", function(d) { return xScale(d.date)})\n     .attr(\"cy\", function(d) { return yScale(d.value) })\n     .attr(\"r\", 2)\n     .attr(\"class\", \"point actual\")\n     ;\n\n  svg.selectAll(\"circle.point.ideal\")\n     .data(idealData)\n     .enter()\n     .append(\"circle\")\n     .attr(\"cx\", function(d) { return xScale(d.date)})\n     .attr(\"cy\", function(d) { return yScale(d.value) })\n     .attr(\"r\", 2)\n     .attr(\"class\", \"point ideal\")\n     ;\n\n  svg.append(\"path\")\n     .datum(idealData)\n     .attr(\"class\", \"line ideal\")\n     .attr(\"d\", idealLine)\n     ;\n\n  svg.append(\"path\")\n     .datum(actualData)\n     .attr(\"class\", \"line actual\")\n     .attr(\"d\", actualLine)\n     ;\n}\n```\n\n```css:burndownchart.css\n.axis path,\n.axis line {\n  fill: none;\n  stroke: black;\n  shape-rendering: crispEdges;\n  stroke-width: 1.5px;\n}\n.axis text {\n  font-family: sans-serif;\n  font-size: 11px\n}\n\n.point {\n  stroke-width: 1.5px;\n}\n\n.point.ideal {\n  fill: blue;\n  stroke: blue;\n}\n.point.actual {\n  fill: orange;\n  stroke: orange;\n}\n\n.line {\n  fill: none;\n  stroke-width: 1.5px;\n}\n\n.line.ideal {\n  stroke: blue;\n}\n.line.actual {\n  stroke: orange;\n}\n```\n\n```html:sample.html\n<!DOCTYPE html>\n   <html lang=\"en\">\n      <head>\n         <meta charset=\"utf-8\">\n         <title>Burndown Chart Sample</title>\n         <script type=\"text/javascript\" src=\"http://d3js.org/d3.v3.min.js\"></script>\n         <script type=\"text/javascript\" src=\"burndownchart.js\"></script>\n         <link rel=\"stylesheet\" type=\"text/css\" href=\"burndownchart.css\">\n      </head>\n\n      <body>\n         <script type=\"text/javascript\">\n           var parseDate = d3.time.format(\"%Y/%m/%d\").parse;\n\n           var idealdata = [\n              {date: parseDate(\"2014/1/1\"), value: 50},\n              {date: parseDate(\"2014/1/2\"), value: 45},\n              {date: parseDate(\"2014/1/3\"), value: 40},\n              {date: parseDate(\"2014/1/4\"), value: 35},\n              {date: parseDate(\"2014/1/5\"), value: 30},\n              {date: parseDate(\"2014/1/6\"), value: 25},\n              {date: parseDate(\"2014/1/7\"), value: 20},\n              {date: parseDate(\"2014/1/8\"), value: 15},\n              {date: parseDate(\"2014/1/9\"), value: 10},\n              {date: parseDate(\"2014/1/10\"),value:  5},\n              {date: parseDate(\"2014/1/11\"),value:  0}\n           ];\n\n           var actualdata = [\n              {date: parseDate(\"2014/1/1\"), value: 45},\n              {date: parseDate(\"2014/1/2\"), value: 39},\n              {date: parseDate(\"2014/1/4\"), value: 32},\n              {date: parseDate(\"2014/1/5\"), value: 28},\n              {date: parseDate(\"2014/1/7\"), value: 26}\n           ];\n\n           burndownchart(idealdata, actualdata);\n         </script>\n      </body>\n</html>\n```\n![sample.png](https://qiita-image-store.s3.amazonaws.com/0/44797/4f9eb50b-643b-2e3f-3cdc-149ecafc13e7.png)\n", "tags": ["d3.js"]}