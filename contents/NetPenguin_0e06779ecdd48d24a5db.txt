{"context": "\u6700\u65b0(1.4.x)\u306e Spring Boot \u3067\u306f\u3053\u306e\u65b9\u6cd5\u3092\u4f7f\u3046\u5fc5\u8981\u306f\u7121\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002 @WebMvcTest \u3068 @MockBean \u3092\u4f7f\u7528\u3059\u308b\u306e\u304c\u826f\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u6700\u8fd1\u3001Spring-Boot \u3092\u89e6\u3063\u3066\u3044\u307e\u3059\u3002\nSpring-Boot \u81ea\u4f53\u306e\u4f7f\u3044\u65b9\u306f\u3001Google \u5148\u751f\u306b\u805e\u3051\u3070\u3060\u3044\u305f\u3044\u6559\u3048\u3066\u304f\u308c\u308b\u306e\u3067\u3001@RestController \u306a\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u5358\u4f53\u30c6\u30b9\u30c8\u306b\u3064\u3044\u3066\u66f8\u3044\u3066\u304a\u304d\u307e\u3059\u3002\n\u4f7f\u7528\u3057\u305f Spring-Boot \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f 1.2.1.RELEASE \u306b\u306a\u308a\u307e\u3059\u3002\n\u300c\u5358\u4f53\u30c6\u30b9\u30c8\u300d\u3068\u3044\u3048\u3070\u5bfe\u8c61\u30af\u30e9\u30b9\u306e\u52d5\u4f5c\u306b\u5bfe\u3059\u308b\u30c6\u30b9\u30c8\u306e\u4e8b\u304b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u5834\u5408\u306f\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u8a2d\u5b9a\u3068\u52d5\u4f5c\u3082\u3042\u308b\u7a0b\u5ea6\u52a0\u5473\u3057\u306a\u3044\u3068\u30c6\u30b9\u30c8\u304b\u3089\u6f0f\u308c\u3066\u3057\u307e\u3046\u7b87\u6240\u304c\u591a\u304f\u306a\u308b or \u7d50\u5408\u30c6\u30b9\u30c8(\u624b\u52d5/\u81ea\u52d5\u554f\u308f\u305a)\u3067\u7d30\u304b\u306a\u90e8\u5206\u307e\u3067\u30c6\u30b9\u30c8\u3059\u308b\u3053\u3068\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u304b\u3068\u601d\u3044\u307e\u3059\u3002\nSpring-Boot \u306b\u306f spring-boot-starter-test \u3068\u3044\u3046\u30c6\u30b9\u30c8\u7528\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u3042\u308a\u3001\u3053\u308c\u306e\u4e2d\u306b\u3042\u308b\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306b\u5bfe\u3059\u308b\u30c6\u30b9\u30c8\u7528\u306e\u30d8\u30eb\u30d1\u30af\u30e9\u30b9\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u4e0a\u8ff0\u3057\u305f\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u8a2d\u5b9a\u3068\u52d5\u4f5c\u3082\u542b\u3081\u305f\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u30c6\u30b9\u30c8\u3092\u5bb9\u6613\u306b\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002\n\npom.xml\npom.xml \u306e\u4f9d\u5b58\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u3001spring-boot-starter-test \u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3\u3092 JSON \u3068\u3057\u3066\u691c\u8a3c\u3059\u308b\u5834\u5408\u306f org.skyscreamer:jsonassert \u3082\u5fc5\u8981\u306a\u3088\u3046\u3067\u3059\u3002\n\npom.xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-test</artifactId>\n    <scope>test</scope>\n</dependency>\n<dependency>\n    <groupId>org.skyscreamer</groupId>\n    <artifactId>jsonassert</artifactId>\n    <version>1.2.3</version>\n    <scope>test</scope>\n</dependency>\n\n\nscope \u3092 test \u306b\u3057\u3066\u3001\u30ea\u30ea\u30fc\u30b9\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u542b\u307e\u308c\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n\u5358\u9806\u306a RestController \u306e\u30c6\u30b9\u30c8\u306e\u5834\u5408\nhttps://spring.io/guides/gs/spring-boot/ \u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u5185\u5bb9\u3068\u307b\u307c\u5909\u308f\u3089\u306a\u3044\u3067\u3059\u3002\n\nFooControllerTest.java\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\n\npublic class FooControllerTest {\n\n    private MockMvc mvc;\n\n    @Before\n    public void before() throws Exception {\n        mvc = MockMvcBuilders.standaloneSetup(new FooController()).build();\n    }\n\n    @Test\n    public void testGet__Ok() throws Exception {\n        int id = 123;\n        mvc.perform(get(\"/fooes/{id}\", id))\n            .andExpect(status().isOk())\n            .andExpect(content().string(\"foo-\" + id));\n    }\n}\n\n\nMockMvcBuilders.standaloneSetup(...) \u3092\u4f7f\u3046\u3053\u3068\u3067\u3001Spring MVC \u306e\u30e2\u30c3\u30af\u3092\u4f7f\u7528\u3057\u305f\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u30c6\u30b9\u30c8\u3092\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4e0a\u8a18\u306e\u4f8b\u3067\u306f\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u306f\u6587\u5b57\u5217\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u5b9f\u969b\u306b\u306f JSON \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5834\u5408\u304c\u591a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u30ec\u30b9\u30dd\u30f3\u30b9\u304c JSON \u306e\u5834\u5408\u306f content().json(String jsonContent) \u3092\u4f7f\u3046\u3053\u3068\u3067\u691c\u8a3c\u304c\u3067\u304d\u307e\u3059\u3002\u305f\u3060\u3001\u3053\u306e\u691c\u8a3c\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u304c\u671f\u5f85\u5024\u306b JSON \u6587\u5b57\u5217\u3092\u8981\u6c42\u3059\u308b\u306e\u3067\u3001\u5b9f\u969b\u306e\u5834\u5408\u306f\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3067\u8fd4\u3057\u305f\u306f\u305a\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u304b\u3089 JSON \u6587\u5b57\u5217\u3078\u306e\u5909\u63db\u304c\u5fc5\u8981\u3067\u3059\u3002\nSpring Boot \u3067\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 Jackson \u3092\u4f7f\u7528\u3057\u305f JSON \u6587\u5b57\u5217\u3078\u306e\u5909\u63db\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3067\u3082 Spring Boot \u3067\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b Jackson \u3092\u4f7f\u7528\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nFooControllerTest.java\nimport org.junit.runner.RunWith;\nimport org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n// \u7701\u7565\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = JacksonAutoConfiguration.class)\npublic class FooControllerTest {\n\n    @Autowired\n    private ObjectMapper mapper;\n\n    // \u7701\u7565\n\n    @Test\n    public void testGet__Ok() throws Exception {\n        int id = 123;\n        mvc.perform(get(\"/fooes/{id}\", id))\n            .andExpect(status().isOk())\n            .andExpect(content().json(mapper.writeValueAsString(new Foo(id, \"foo-\" + id)));\n    }\n}\n\n\n\u901a\u5e38\u306f @EnableAutoConfiguration \u306e\u6307\u5b9a\u306b\u3088\u3063\u3066\u81ea\u52d5\u30ed\u30fc\u30c9\u3059\u308b Jackson \u306e\u8a2d\u5b9a\u30af\u30e9\u30b9\u3067\u3059\u304c\u3001@Configuration \u306a\u30af\u30e9\u30b9\u3067\u3042\u308b\u3053\u3068\u306b\u5909\u308f\u308a\u306f\u306a\u3044\u306e\u3067\u3001@SpringApplicationConfiguration \u3092\u4f7f\u7528\u3057\u3066\u660e\u793a\u7684\u306b\u30ed\u30fc\u30c9\u3057\u3066\u3044\u307e\u3059\u3002\nTestRunner \u3068\u3057\u3066 SpringJUnit4ClassRunner \u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001@SpringApplicationConfiguration \u306b\u3088\u308b\u30c6\u30b9\u30c8\u7528 Context \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nService \u3092\u30e2\u30c3\u30af\u3059\u308b\n\u5b9f\u969b\u306e\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u5b9f\u88c5\u3067\u306f\u3001Service \u3084\u305d\u306e\u4ed6\u3044\u308d\u3044\u308d\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u305d\u308c\u3089\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u30e2\u30c3\u30af\u306b\u5165\u308c\u66ff\u3048\u3066\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\n\nFooControllerTest.java\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport org.junit.Rule;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.MockitoJUnitRule;\n// \u7701\u7565\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = JacksonAutoConfiguration.class)\npublic class FooControllerTest {\n\n    // \u7701\u7565\n\n    @Rule\n    public MockitoJUnitRule mockitoJUnitRule = new MockitoJUnitRule(this);\n    @InjectMocks\n    private FooController target;\n    @Mock\n    private BarService barService;\n\n    @Before\n    public void before() throws Exception {\n        mvc = MockMvcBuilders.standaloneSetup(target).build();\n    }\n\n    @Test\n    public void testGet__Ok() throws Exception {\n        int id = 123;\n        Bar bar = new Bar(id, \"bar-\" + id);\n        when(barService.getBar(id)).thenReturn(bar);\n\n        mvc.perform(get(\"/fooes/{id}\", id))\n            .andExpect(status().isOk())\n            .andExpect(content().json(mapper.writeValueAsString(bar)));\n\n        verify(barService).getBar(id);\n    }\n}\n\n\nspring-boot-starter-test \u3067\u306f\u30e2\u30c3\u30af\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066 Mockito \u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3067\u306e\u3001\u305d\u308c\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n@RunWith \u306b\u306f\u3059\u3067\u306b SpringJUnit4ClassRunner.class \u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\u3001MockitoJUnitRunner.class \u306f\u6307\u5b9a\u3067\u304d\u307e\u305b\u3093\u3002\u304b\u308f\u308a\u306b @Rule \u3092\u4f7f\u7528\u3057\u3066 MockitoJUnitRule 1 \u3092\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n@ControllerAdvice \u306b\u3088\u308b\u4f8b\u5916\u30cf\u30f3\u30c9\u30e9\u3092\u6709\u52b9\u306b\u3059\u308b\n\u6700\u8fd1\u306e Spring MVC \u3067\u306f\u3001\u8907\u6570\u306e\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3067\u5171\u901a\u306b\u306a\u308b @ExceptionHandler \u3084 @InitBinder \u306e\u30e1\u30bd\u30c3\u30c9\u3092\u3001@ControllerAdvice \u3092\u3064\u3051\u305f\u30af\u30e9\u30b9\u3067\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\n\u306a\u306e\u3067\u3059\u304c\u3001MockMvcBuilders.standaloneSetup \u3067\u5bfe\u5fdc\u3055\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u305d\u306e\u307e\u307e\u3067\u306f\u5358\u4f53\u30c6\u30b9\u30c8\u6642\u306b @ControllerAdvice \u306b\u3088\u308b\u8a2d\u5b9a\u304c\u6709\u52b9\u306b\u306a\u308a\u307e\u305b\u3093\u3002\nExceptionHandlerExceptionResolver \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092 MockMvcBuilder \u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001@ControllerAdvice \u306b\u3088\u308b\u4f8b\u5916\u30cf\u30f3\u30c9\u30e9\u304c\u30c6\u30b9\u30c8\u6642\u3082\u6709\u52b9\u306b\u306a\u308a\u307e\u3059\u3002\nWebMvcConfigurationSupport \u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067 HandlerExceptionResolver \u3092\u542b\u3080\u3044\u304f\u3064\u304b\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u5229\u7528\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n@ControllerAdvice \u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3068\u3001WebMvcConfigurationSupport \u3092\u6709\u52b9\u306b\u3059\u308b\u305f\u3081\u306b\u3001\u30c6\u30b9\u30c8\u7528\u306e @Configuration \u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\nTestContext.java\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\n\n@Configuration\n@ComponentScan(\n        basePackageClasses = FooController.class,\n        useDefaultFilters = false,\n        includeFilters = @ComponentScan.Filter(ControllerAdvice.class))\npublic class TestContext extends WebMvcConfigurationSupport {\n}\n\n\n@ControllerAdvice \u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3060\u3051\u304c\u6709\u52b9\u306b\u306a\u308b\u3088\u3046\u3001useDefaultFilters \u3068 includeFilters \u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\u4e0a\u8a18\u306e TestContext.class \u3092\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u306b\u8a2d\u5b9a\u3057\u3001\u307e\u305f WebMvcConfigurationSupport \u306f ServletContext \u3092\u5fc5\u8981\u3068\u3059\u308b\u305f\u3081\u3001@WebAppConfiguration \u3082\u6307\u5b9a\u3057\u307e\u3059\u3002\n\nFooControllerTest.java\nimport org.springframework.test.context.web.WebAppConfiguration;\nimport org.springframework.web.servlet.HandlerExceptionResolver;\n// \u7701\u7565\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = {JacksonAutoConfiguration.class, TestContext.class})\n@WebAppConfiguration\npublic class FooControllerTest {\n\n    @Autowired\n    private HandlerExceptionResolver handlerExceptionResolver;\n\n    // \u7701\u7565\n\n    @Before\n    public void before() throws Exception {\n        mvc = MockMvcBuilders.standaloneSetup(target)\n            .setHandlerExceptionResolvers(handlerExceptionResolver)\n            .build();\n    }\n\n    // \u7701\u7565\n\n    @Test\n    public void testGet__NotFound() throws Exception {\n        String message = \"__message__\";\n        when(barService.getBar(anyInt())).thenThrow(new EntityNotFoundException(message));\n\n        int id = 123;\n        mvc.perform(get(\"/fooes/{id}\", id))\n            .andExpect(status().isNotFound())\n            .andExpect(content().json(mapper.writeValueAsString(new ErrorResponse(\"EntityNotFoundException\", message))));\n\n        verify(barService).getBar(id);\n    }\n}\n\n\n\n@ControllerAdvice \u306b\u3088\u308b WebDataBinder \u8a2d\u5b9a\u3092\u6709\u52b9\u306b\u3059\u308b\n@ExceptionHandler \u306e\u5834\u5408\u306f StandaloneMockMvcBuilder \u306b\u305d\u306e\u305f\u3081\u306e\u8a2d\u5b9a\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u3063\u305f\u306e\u3067\u3059\u304c\u3001@InitBinder \u306e\u305f\u3081\u306e\u8a2d\u5b9a\u30e1\u30bd\u30c3\u30c9\u306f\u6b8b\u5ff5\u306a\u304c\u3089\u7121\u3044\u3088\u3046\u3067\u3059\u3002\n\u305d\u306e\u305f\u3081 StandaloneMockMvcBuilder \u3092\u7d99\u627f\u3057\u3066\u3001\u3084\u3084\u7121\u7406\u3084\u308a\u306a\u65b9\u6cd5\u3067\u3059\u304c RequestMappingHandlerAdapter \u306b @ControllerAdvice \u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u304c\u8a2d\u5b9a\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\nFooControllerTest.java\nimport org.springframework.beans.factory.BeanFactoryUtils;\nimport org.springframework.beans.factory.support.StaticListableBeanFactory;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.context.WebApplicationContext;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;\n// \u7701\u7565\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = {JacksonAutoConfiguration.class, TestContext.class})\n@WebAppConfiguration\npublic class FooControllerTest {\n\n    @Autowired\n    private ApplicationContext applicationContext;\n\n    // \u7701\u7565\n\n    @Before\n    public void before() throws Exception {\n        StandaloneMockMvcBuilder builder = new StandaloneMockMvcBuilder(target) {\n            @Override\n            protected WebApplicationContext initWebAppContext() {\n                WebApplicationContext context = super.initWebAppContext();\n                StaticListableBeanFactory beanFactory = (StaticListableBeanFactory)context.getAutowireCapableBeanFactory();\n\n                Arrays.stream(BeanFactoryUtils.beanNamesForTypeIncludingAncestors(applicationContext, Object.class))\n                    .filter(name -> applicationContext.findAnnotationOnBean(name, ControllerAdvice.class) != null)\n                    .forEach(name -> beanFactory.addBean(name, applicationContext.getBean(name)));\n\n                context.getBean(RequestMappingHandlerAdapter.class).afterPropertiesSet();\n                return context;\n            }\n        };\n\n        mvc = builder.setHandlerExceptionResolvers().build();\n    }\n\n    // \u7701\u7565\n\n    @Test\n    public void testList__Ok() throws Exception {\n        String name = \"bar-123\";\n        Bar bar = new Bar(123, name);\n        when(barService.findBarByName(anyString())).thenReturn(Arrays.asList(bar));\n\n        mvc.perform(get(\"/fooes/\").param(\"name\", \" \" + name + \" \"))\n            .andExpect(status().isOk())\n            .andExpect(content().json(mapper.writeValueAsString(new Bar[]{bar})));\n\n        verify(barService).findBarByName(name);\n    }\n}   \n\n\n@ControllerAdvice \u306a\u30af\u30e9\u30b9\u306e @InitBinder \u30e1\u30bd\u30c3\u30c9\u3067\u3001StringTrimmerEditor \u3092\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u524d\u5f8c\u306e\u7a7a\u767d\u306f\u9664\u53bb\u3055\u308c\u3066\u304b\u3089\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u6e21\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u518d\u5229\u7528\u3057\u3084\u3059\u3044\u5f62\u306b\u3059\u308b\n\u4e0a\u8ff0\u3057\u305f\u8a2d\u5b9a\u3084\u4fee\u6b63\u3092\u3001\u8907\u6570\u306e\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u7528\u30c6\u30b9\u30c8\u3067\u4f7f\u3048\u308b\u3088\u3046\u3001\u30d8\u30eb\u30d1\u30af\u30e9\u30b9\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u3044\u304f\u3064\u304b\u306e\u8a2d\u5b9a\u306b\u3064\u3044\u3066\u306f\u3001\u30c6\u30b9\u30c8\u7528\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30af\u30e9\u30b9\u306b\u79fb\u52d5\u3057\u307e\u3059\u3002\n\nTestHelper.java\nimport java.util.Arrays;\n\nimport org.springframework.beans.factory.BeanFactoryUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.support.StaticListableBeanFactory;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.context.WebApplicationContext;\nimport org.springframework.web.servlet.HandlerExceptionResolver;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class TestHelper {\n    @Autowired\n    private ApplicationContext applicationContext;\n    @Autowired\n    private HandlerExceptionResolver handlerExceptionResolver;\n    @Autowired\n    private ObjectMapper objectMapper;\n\n    public MockMvc mvc(Object controller) {\n        StandaloneMockMvcBuilder builder = new StandaloneMockMvcBuilder(controller) {\n            @Override\n            protected WebApplicationContext initWebAppContext() {\n                WebApplicationContext context = super.initWebAppContext();\n                StaticListableBeanFactory beanFactory = (StaticListableBeanFactory)context.getAutowireCapableBeanFactory();\n\n                Arrays.stream(BeanFactoryUtils.beanNamesForTypeIncludingAncestors(applicationContext, Object.class))\n                    .filter(name -> applicationContext.findAnnotationOnBean(name, ControllerAdvice.class) != null)\n                    .forEach(name -> beanFactory.addBean(name, applicationContext.getBean(name)));\n\n                context.getBean(RequestMappingHandlerAdapter.class).afterPropertiesSet();\n                return context;\n            }\n        };\n        return builder.setHandlerExceptionResolvers(handlerExceptionResolver).build();\n    }\n\n    public String toJson(Object value) throws JsonProcessingException {\n        return objectMapper.writeValueAsString(value);\n    }\n}\n\n\n\nTestContext.java\nimport org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\n\n@Configuration\n@ComponentScan(\n        basePackageClasses = FooController.class,\n        useDefaultFilters = false,\n        includeFilters = @ComponentScan.Filter(ControllerAdvice.class))\n@Import(JacksonAutoConfiguration.class)\npublic class TestContext extends WebMvcConfigurationSupport {\n    @Bean\n    public TestHelper testHelper() {\n        return new TestHelper();\n    }\n}\n\n\n\u4e0a\u8a18\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u30c6\u30b9\u30c8\u5bfe\u8c61\u306b\u76f4\u63a5\u95a2\u4fc2\u3057\u306a\u3044\u51e6\u7406\u3092\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u304b\u3089\u8ffd\u3044\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nFooControllerTest.java\nimport static org.mockito.Matchers.anyInt;\nimport static org.mockito.Matchers.anyString;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\nimport java.util.Arrays;\n\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.MockitoJUnitRule;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.web.WebAppConfiguration;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = TestContext.class)\n@WebAppConfiguration\npublic class FooControllerTest {\n\n    @Rule\n    public MockitoJUnitRule mockitoJUnitRule = new MockitoJUnitRule(this);\n    @InjectMocks\n    private FooController target;\n    @Mock\n    private BarService barService;\n\n    @Autowired\n    private TestHelper helper;\n\n    @Test\n    public void testGet__Ok() throws Exception {\n        int id = 123;\n        Bar bar = new Bar(id, \"bar-\" + id);\n        when(barService.getBar(anyInt())).thenReturn(bar);\n\n        helper.mvc(target)\n            .perform(get(\"/fooes/{id}\", id))\n            .andExpect(status().isOk())\n            .andExpect(content().json(helper.toJson(bar)));\n\n        verify(barService).getBar(id);\n    }\n\n    @Test\n    public void testGet__NotFound() throws Exception {\n        String message = \"__message__\";\n        when(barService.getBar(anyInt())).thenThrow(new EntityNotFoundException(message));\n\n        int id = 123;\n        helper.mvc(target)\n            .perform(get(\"/fooes/{id}\", id))\n            .andExpect(status().isNotFound())\n            .andExpect(content().json(helper.toJson(new ErrorResponse(\"EntityNotFoundException\", message))));\n\n        verify(barService).getBar(id);\n    }\n\n    @Test\n    public void testList__Ok() throws Exception {\n        String name = \"bar-123\";\n        Bar bar = new Bar(123, name);\n        when(barService.findBarByName(anyString())).thenReturn(Arrays.asList(bar));\n\n        helper.mvc(target)\n            .perform(get(\"/fooes/\").param(\"name\", \" \" + name + \" \"))\n            .andExpect(status().isOk())\n            .andExpect(content().json(helper.toJson(new Bar[]{bar})));\n\n        verify(barService).findBarByName(name);\n    }\n}\n\n\n\n\u4f7f\u7528\u3057\u305f\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\nhttps://github.com/NetPenguin/spring-boot-controller-test-example \u306b\u304a\u3044\u3066\u3042\u308a\u307e\u3059\u3002\ngit clone https://github.com/NetPenguin/spring-boot-controller-test-example \u3057\u305f\u5f8c\u306b mvn test \u3067\u5b9f\u969b\u306b\u30c6\u30b9\u30c8\u3067\u304d\u307e\u3059\u3002\n\n\n\n\n\u6700\u8fd1\u306e Mockito \u3067\u306f\u3001MockitoJUnitRule \u306f Deprecated \u306b\u306a\u3063\u3066\u304a\u308a\u3001\u4ee3\u308f\u308a\u306b MockitoJUnit.rule() \u3092\u4f7f\u7528\u3059\u308b\u3088\u3046\u3067\u3059\u3002\u8a73\u3057\u304f\u306f MockitoRule \u306e Javadoc \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u00a0\u21a9\n\n\n\n*\u6700\u65b0(1.4.x)\u306e Spring Boot \u3067\u306f\u3053\u306e\u65b9\u6cd5\u3092\u4f7f\u3046\u5fc5\u8981\u306f\u7121\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002 `@WebMvcTest` \u3068 `@MockBean` \u3092\u4f7f\u7528\u3059\u308b\u306e\u304c\u826f\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002*\n\n\u6700\u8fd1\u3001Spring-Boot \u3092\u89e6\u3063\u3066\u3044\u307e\u3059\u3002\nSpring-Boot \u81ea\u4f53\u306e\u4f7f\u3044\u65b9\u306f\u3001Google \u5148\u751f\u306b\u805e\u3051\u3070\u3060\u3044\u305f\u3044\u6559\u3048\u3066\u304f\u308c\u308b\u306e\u3067\u3001@RestController \u306a\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u5358\u4f53\u30c6\u30b9\u30c8\u306b\u3064\u3044\u3066\u66f8\u3044\u3066\u304a\u304d\u307e\u3059\u3002\n\u4f7f\u7528\u3057\u305f Spring-Boot \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f `1.2.1.RELEASE` \u306b\u306a\u308a\u307e\u3059\u3002\n\n\u300c\u5358\u4f53\u30c6\u30b9\u30c8\u300d\u3068\u3044\u3048\u3070\u5bfe\u8c61\u30af\u30e9\u30b9\u306e\u52d5\u4f5c\u306b\u5bfe\u3059\u308b\u30c6\u30b9\u30c8\u306e\u4e8b\u304b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u5834\u5408\u306f\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u8a2d\u5b9a\u3068\u52d5\u4f5c\u3082\u3042\u308b\u7a0b\u5ea6\u52a0\u5473\u3057\u306a\u3044\u3068\u30c6\u30b9\u30c8\u304b\u3089\u6f0f\u308c\u3066\u3057\u307e\u3046\u7b87\u6240\u304c\u591a\u304f\u306a\u308b or \u7d50\u5408\u30c6\u30b9\u30c8(\u624b\u52d5/\u81ea\u52d5\u554f\u308f\u305a)\u3067\u7d30\u304b\u306a\u90e8\u5206\u307e\u3067\u30c6\u30b9\u30c8\u3059\u308b\u3053\u3068\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\nSpring-Boot \u306b\u306f `spring-boot-starter-test` \u3068\u3044\u3046\u30c6\u30b9\u30c8\u7528\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u3042\u308a\u3001\u3053\u308c\u306e\u4e2d\u306b\u3042\u308b\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306b\u5bfe\u3059\u308b\u30c6\u30b9\u30c8\u7528\u306e\u30d8\u30eb\u30d1\u30af\u30e9\u30b9\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u4e0a\u8ff0\u3057\u305f\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u8a2d\u5b9a\u3068\u52d5\u4f5c\u3082\u542b\u3081\u305f\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u30c6\u30b9\u30c8\u3092\u5bb9\u6613\u306b\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002\n\n## pom.xml\n\npom.xml \u306e\u4f9d\u5b58\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u3001`spring-boot-starter-test` \u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3\u3092 JSON \u3068\u3057\u3066\u691c\u8a3c\u3059\u308b\u5834\u5408\u306f `org.skyscreamer:jsonassert` \u3082\u5fc5\u8981\u306a\u3088\u3046\u3067\u3059\u3002\n\n```xml:pom.xml\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-test</artifactId>\n\t<scope>test</scope>\n</dependency>\n<dependency>\n\t<groupId>org.skyscreamer</groupId>\n\t<artifactId>jsonassert</artifactId>\n\t<version>1.2.3</version>\n\t<scope>test</scope>\n</dependency>\n```\n\n`scope` \u3092 `test` \u306b\u3057\u3066\u3001\u30ea\u30ea\u30fc\u30b9\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u542b\u307e\u308c\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n## \u5358\u9806\u306a RestController \u306e\u30c6\u30b9\u30c8\u306e\u5834\u5408\n\nhttps://spring.io/guides/gs/spring-boot/ \u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u5185\u5bb9\u3068\u307b\u307c\u5909\u308f\u3089\u306a\u3044\u3067\u3059\u3002\n\n```java:FooControllerTest.java\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\n\npublic class FooControllerTest {\n\n\tprivate MockMvc mvc;\n\n\t@Before\n\tpublic void before() throws Exception {\n\t\tmvc = MockMvcBuilders.standaloneSetup(new FooController()).build();\n\t}\n\n\t@Test\n\tpublic void testGet__Ok() throws Exception {\n\t\tint id = 123;\n\t\tmvc.perform(get(\"/fooes/{id}\", id))\n\t\t\t.andExpect(status().isOk())\n\t\t\t.andExpect(content().string(\"foo-\" + id));\n\t}\n}\n```\n\n`MockMvcBuilders.standaloneSetup(...)` \u3092\u4f7f\u3046\u3053\u3068\u3067\u3001Spring MVC \u306e\u30e2\u30c3\u30af\u3092\u4f7f\u7528\u3057\u305f\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u30c6\u30b9\u30c8\u3092\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u4e0a\u8a18\u306e\u4f8b\u3067\u306f\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u306f\u6587\u5b57\u5217\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u5b9f\u969b\u306b\u306f JSON \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5834\u5408\u304c\u591a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u30ec\u30b9\u30dd\u30f3\u30b9\u304c JSON \u306e\u5834\u5408\u306f `content().json(String jsonContent)` \u3092\u4f7f\u3046\u3053\u3068\u3067\u691c\u8a3c\u304c\u3067\u304d\u307e\u3059\u3002\u305f\u3060\u3001\u3053\u306e\u691c\u8a3c\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u304c\u671f\u5f85\u5024\u306b JSON \u6587\u5b57\u5217\u3092\u8981\u6c42\u3059\u308b\u306e\u3067\u3001\u5b9f\u969b\u306e\u5834\u5408\u306f\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3067\u8fd4\u3057\u305f\u306f\u305a\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u304b\u3089 JSON \u6587\u5b57\u5217\u3078\u306e\u5909\u63db\u304c\u5fc5\u8981\u3067\u3059\u3002\nSpring Boot \u3067\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 Jackson \u3092\u4f7f\u7528\u3057\u305f JSON \u6587\u5b57\u5217\u3078\u306e\u5909\u63db\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3067\u3082 Spring Boot \u3067\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b Jackson \u3092\u4f7f\u7528\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n```java:FooControllerTest.java\nimport org.junit.runner.RunWith;\nimport org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n// \u7701\u7565\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = JacksonAutoConfiguration.class)\npublic class FooControllerTest {\n\n    @Autowired\n    private ObjectMapper mapper;\n    \n    // \u7701\u7565\n\n\t@Test\n\tpublic void testGet__Ok() throws Exception {\n\t\tint id = 123;\n\t\tmvc.perform(get(\"/fooes/{id}\", id))\n\t\t\t.andExpect(status().isOk())\n\t\t\t.andExpect(content().json(mapper.writeValueAsString(new Foo(id, \"foo-\" + id)));\n\t}\n}\n```\n\n\u901a\u5e38\u306f `@EnableAutoConfiguration` \u306e\u6307\u5b9a\u306b\u3088\u3063\u3066\u81ea\u52d5\u30ed\u30fc\u30c9\u3059\u308b Jackson \u306e\u8a2d\u5b9a\u30af\u30e9\u30b9\u3067\u3059\u304c\u3001`@Configuration` \u306a\u30af\u30e9\u30b9\u3067\u3042\u308b\u3053\u3068\u306b\u5909\u308f\u308a\u306f\u306a\u3044\u306e\u3067\u3001`@SpringApplicationConfiguration` \u3092\u4f7f\u7528\u3057\u3066\u660e\u793a\u7684\u306b\u30ed\u30fc\u30c9\u3057\u3066\u3044\u307e\u3059\u3002\nTestRunner \u3068\u3057\u3066 `SpringJUnit4ClassRunner` \u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001`@SpringApplicationConfiguration` \u306b\u3088\u308b\u30c6\u30b9\u30c8\u7528 Context \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\n## Service \u3092\u30e2\u30c3\u30af\u3059\u308b\n\n\u5b9f\u969b\u306e\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u5b9f\u88c5\u3067\u306f\u3001Service \u3084\u305d\u306e\u4ed6\u3044\u308d\u3044\u308d\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u305d\u308c\u3089\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u30e2\u30c3\u30af\u306b\u5165\u308c\u66ff\u3048\u3066\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\n\n```java:FooControllerTest.java\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport org.junit.Rule;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.MockitoJUnitRule;\n// \u7701\u7565\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = JacksonAutoConfiguration.class)\npublic class FooControllerTest {\n\n\t// \u7701\u7565\n\n\t@Rule\n\tpublic MockitoJUnitRule mockitoJUnitRule = new MockitoJUnitRule(this);\n\t@InjectMocks\n\tprivate FooController target;\n\t@Mock\n\tprivate BarService barService;\n\n\t@Before\n\tpublic void before() throws Exception {\n\t\tmvc = MockMvcBuilders.standaloneSetup(target).build();\n\t}\n\n\t@Test\n\tpublic void testGet__Ok() throws Exception {\n\t\tint id = 123;\n\t\tBar bar = new Bar(id, \"bar-\" + id);\n\t\twhen(barService.getBar(id)).thenReturn(bar);\n\n\t\tmvc.perform(get(\"/fooes/{id}\", id))\n\t\t\t.andExpect(status().isOk())\n\t\t\t.andExpect(content().json(mapper.writeValueAsString(bar)));\n\n\t\tverify(barService).getBar(id);\n\t}\n}\n```\n\n`spring-boot-starter-test` \u3067\u306f\u30e2\u30c3\u30af\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066 Mockito \u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3067\u306e\u3001\u305d\u308c\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n`@RunWith` \u306b\u306f\u3059\u3067\u306b `SpringJUnit4ClassRunner.class` \u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\u3001`MockitoJUnitRunner.class` \u306f\u6307\u5b9a\u3067\u304d\u307e\u305b\u3093\u3002\u304b\u308f\u308a\u306b `@Rule` \u3092\u4f7f\u7528\u3057\u3066 `MockitoJUnitRule` [^1] \u3092\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n[^1]: \u6700\u8fd1\u306e Mockito \u3067\u306f\u3001`MockitoJUnitRule` \u306f Deprecated \u306b\u306a\u3063\u3066\u304a\u308a\u3001\u4ee3\u308f\u308a\u306b `MockitoJUnit.rule()` \u3092\u4f7f\u7528\u3059\u308b\u3088\u3046\u3067\u3059\u3002\u8a73\u3057\u304f\u306f [MockitoRule \u306e Javadoc](http://site.mockito.org/mockito/docs/current/org/mockito/junit/MockitoRule.html) \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n## `@ControllerAdvice` \u306b\u3088\u308b\u4f8b\u5916\u30cf\u30f3\u30c9\u30e9\u3092\u6709\u52b9\u306b\u3059\u308b\n\n\u6700\u8fd1\u306e Spring MVC \u3067\u306f\u3001\u8907\u6570\u306e\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3067\u5171\u901a\u306b\u306a\u308b `@ExceptionHandler` \u3084 `@InitBinder` \u306e\u30e1\u30bd\u30c3\u30c9\u3092\u3001`@ControllerAdvice` \u3092\u3064\u3051\u305f\u30af\u30e9\u30b9\u3067\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\n\u306a\u306e\u3067\u3059\u304c\u3001`MockMvcBuilders.standaloneSetup` \u3067\u5bfe\u5fdc\u3055\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u305d\u306e\u307e\u307e\u3067\u306f\u5358\u4f53\u30c6\u30b9\u30c8\u6642\u306b `@ControllerAdvice` \u306b\u3088\u308b\u8a2d\u5b9a\u304c\u6709\u52b9\u306b\u306a\u308a\u307e\u305b\u3093\u3002\n\n`ExceptionHandlerExceptionResolver` \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092 `MockMvcBuilder` \u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001`@ControllerAdvice` \u306b\u3088\u308b\u4f8b\u5916\u30cf\u30f3\u30c9\u30e9\u304c\u30c6\u30b9\u30c8\u6642\u3082\u6709\u52b9\u306b\u306a\u308a\u307e\u3059\u3002\n`WebMvcConfigurationSupport` \u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067 `HandlerExceptionResolver` \u3092\u542b\u3080\u3044\u304f\u3064\u304b\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u5229\u7528\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n`@ControllerAdvice` \u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3068\u3001`WebMvcConfigurationSupport` \u3092\u6709\u52b9\u306b\u3059\u308b\u305f\u3081\u306b\u3001\u30c6\u30b9\u30c8\u7528\u306e `@Configuration` \u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n```java:TestContext.java\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\n\n@Configuration\n@ComponentScan(\n\t\tbasePackageClasses = FooController.class,\n\t\tuseDefaultFilters = false,\n\t\tincludeFilters = @ComponentScan.Filter(ControllerAdvice.class))\npublic class TestContext extends WebMvcConfigurationSupport {\n}\n```\n`@ControllerAdvice` \u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3060\u3051\u304c\u6709\u52b9\u306b\u306a\u308b\u3088\u3046\u3001`useDefaultFilters` \u3068 `includeFilters` \u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n\u4e0a\u8a18\u306e `TestContext.class` \u3092\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u306b\u8a2d\u5b9a\u3057\u3001\u307e\u305f `WebMvcConfigurationSupport` \u306f `ServletContext` \u3092\u5fc5\u8981\u3068\u3059\u308b\u305f\u3081\u3001`@WebAppConfiguration` \u3082\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n```java:FooControllerTest.java\nimport org.springframework.test.context.web.WebAppConfiguration;\nimport org.springframework.web.servlet.HandlerExceptionResolver;\n// \u7701\u7565\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = {JacksonAutoConfiguration.class, TestContext.class})\n@WebAppConfiguration\npublic class FooControllerTest {\n\n\t@Autowired\n\tprivate HandlerExceptionResolver handlerExceptionResolver;\n\n\t// \u7701\u7565\n\n\t@Before\n\tpublic void before() throws Exception {\n\t\tmvc = MockMvcBuilders.standaloneSetup(target)\n\t\t\t.setHandlerExceptionResolvers(handlerExceptionResolver)\n\t\t\t.build();\n\t}\n\n\t// \u7701\u7565\n\n\t@Test\n\tpublic void testGet__NotFound() throws Exception {\n\t\tString message = \"__message__\";\n\t\twhen(barService.getBar(anyInt())).thenThrow(new EntityNotFoundException(message));\n\n\t\tint id = 123;\n\t\tmvc.perform(get(\"/fooes/{id}\", id))\n\t\t\t.andExpect(status().isNotFound())\n\t\t\t.andExpect(content().json(mapper.writeValueAsString(new ErrorResponse(\"EntityNotFoundException\", message))));\n\n\t\tverify(barService).getBar(id);\n\t}\n}\n```\n\n## `@ControllerAdvice` \u306b\u3088\u308b WebDataBinder \u8a2d\u5b9a\u3092\u6709\u52b9\u306b\u3059\u308b\n\n`@ExceptionHandler` \u306e\u5834\u5408\u306f `StandaloneMockMvcBuilder` \u306b\u305d\u306e\u305f\u3081\u306e\u8a2d\u5b9a\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u3063\u305f\u306e\u3067\u3059\u304c\u3001`@InitBinder` \u306e\u305f\u3081\u306e\u8a2d\u5b9a\u30e1\u30bd\u30c3\u30c9\u306f\u6b8b\u5ff5\u306a\u304c\u3089\u7121\u3044\u3088\u3046\u3067\u3059\u3002\n\u305d\u306e\u305f\u3081 `StandaloneMockMvcBuilder` \u3092\u7d99\u627f\u3057\u3066\u3001\u3084\u3084\u7121\u7406\u3084\u308a\u306a\u65b9\u6cd5\u3067\u3059\u304c `RequestMappingHandlerAdapter` \u306b `@ControllerAdvice` \u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u304c\u8a2d\u5b9a\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n```java:FooControllerTest.java\nimport org.springframework.beans.factory.BeanFactoryUtils;\nimport org.springframework.beans.factory.support.StaticListableBeanFactory;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.context.WebApplicationContext;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;\n// \u7701\u7565\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = {JacksonAutoConfiguration.class, TestContext.class})\n@WebAppConfiguration\npublic class FooControllerTest {\n\n\t@Autowired\n\tprivate ApplicationContext applicationContext;\n\n\t// \u7701\u7565\n\t\n\t@Before\n\tpublic void before() throws Exception {\n\t\tStandaloneMockMvcBuilder builder = new StandaloneMockMvcBuilder(target) {\n\t\t\t@Override\n\t\t\tprotected WebApplicationContext initWebAppContext() {\n\t\t\t\tWebApplicationContext context = super.initWebAppContext();\n\t\t\t\tStaticListableBeanFactory beanFactory = (StaticListableBeanFactory)context.getAutowireCapableBeanFactory();\n\n\t\t\t\tArrays.stream(BeanFactoryUtils.beanNamesForTypeIncludingAncestors(applicationContext, Object.class))\n\t\t\t\t\t.filter(name -> applicationContext.findAnnotationOnBean(name, ControllerAdvice.class) != null)\n\t\t\t\t\t.forEach(name -> beanFactory.addBean(name, applicationContext.getBean(name)));\n\n\t\t\t\tcontext.getBean(RequestMappingHandlerAdapter.class).afterPropertiesSet();\n\t\t\t\treturn context;\n\t\t\t}\n\t\t};\n\n\t\tmvc = builder.setHandlerExceptionResolvers().build();\n\t}\n\n\t// \u7701\u7565\n\t\n\t@Test\n\tpublic void testList__Ok() throws Exception {\n\t\tString name = \"bar-123\";\n\t\tBar bar = new Bar(123, name);\n\t\twhen(barService.findBarByName(anyString())).thenReturn(Arrays.asList(bar));\n\n\t\tmvc.perform(get(\"/fooes/\").param(\"name\", \" \" + name + \" \"))\n\t\t\t.andExpect(status().isOk())\n\t\t\t.andExpect(content().json(mapper.writeValueAsString(new Bar[]{bar})));\n\n\t\tverify(barService).findBarByName(name);\n\t}\n}\t\n```\n\n`@ControllerAdvice` \u306a\u30af\u30e9\u30b9\u306e `@InitBinder` \u30e1\u30bd\u30c3\u30c9\u3067\u3001`StringTrimmerEditor` \u3092\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u524d\u5f8c\u306e\u7a7a\u767d\u306f\u9664\u53bb\u3055\u308c\u3066\u304b\u3089\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u6e21\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n## \u518d\u5229\u7528\u3057\u3084\u3059\u3044\u5f62\u306b\u3059\u308b\n\n\u4e0a\u8ff0\u3057\u305f\u8a2d\u5b9a\u3084\u4fee\u6b63\u3092\u3001\u8907\u6570\u306e\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u7528\u30c6\u30b9\u30c8\u3067\u4f7f\u3048\u308b\u3088\u3046\u3001\u30d8\u30eb\u30d1\u30af\u30e9\u30b9\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u3044\u304f\u3064\u304b\u306e\u8a2d\u5b9a\u306b\u3064\u3044\u3066\u306f\u3001\u30c6\u30b9\u30c8\u7528\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30af\u30e9\u30b9\u306b\u79fb\u52d5\u3057\u307e\u3059\u3002\n\n```java:TestHelper.java\nimport java.util.Arrays;\n\nimport org.springframework.beans.factory.BeanFactoryUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.support.StaticListableBeanFactory;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.context.WebApplicationContext;\nimport org.springframework.web.servlet.HandlerExceptionResolver;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class TestHelper {\n\t@Autowired\n\tprivate ApplicationContext applicationContext;\n\t@Autowired\n\tprivate HandlerExceptionResolver handlerExceptionResolver;\n\t@Autowired\n\tprivate ObjectMapper objectMapper;\n\n\tpublic MockMvc mvc(Object controller) {\n\t\tStandaloneMockMvcBuilder builder = new StandaloneMockMvcBuilder(controller) {\n\t\t\t@Override\n\t\t\tprotected WebApplicationContext initWebAppContext() {\n\t\t\t\tWebApplicationContext context = super.initWebAppContext();\n\t\t\t\tStaticListableBeanFactory beanFactory = (StaticListableBeanFactory)context.getAutowireCapableBeanFactory();\n\n\t\t\t\tArrays.stream(BeanFactoryUtils.beanNamesForTypeIncludingAncestors(applicationContext, Object.class))\n\t\t\t\t\t.filter(name -> applicationContext.findAnnotationOnBean(name, ControllerAdvice.class) != null)\n\t\t\t\t\t.forEach(name -> beanFactory.addBean(name, applicationContext.getBean(name)));\n\n\t\t\t\tcontext.getBean(RequestMappingHandlerAdapter.class).afterPropertiesSet();\n\t\t\t\treturn context;\n\t\t\t}\n\t\t};\n\t\treturn builder.setHandlerExceptionResolvers(handlerExceptionResolver).build();\n\t}\n\n\tpublic String toJson(Object value) throws JsonProcessingException {\n\t\treturn objectMapper.writeValueAsString(value);\n\t}\n}\n```\n\n```java:TestContext.java\nimport org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\n\n@Configuration\n@ComponentScan(\n\t\tbasePackageClasses = FooController.class,\n\t\tuseDefaultFilters = false,\n\t\tincludeFilters = @ComponentScan.Filter(ControllerAdvice.class))\n@Import(JacksonAutoConfiguration.class)\npublic class TestContext extends WebMvcConfigurationSupport {\n\t@Bean\n\tpublic TestHelper testHelper() {\n\t\treturn new TestHelper();\n\t}\n}\n```\n\n\u4e0a\u8a18\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u30c6\u30b9\u30c8\u5bfe\u8c61\u306b\u76f4\u63a5\u95a2\u4fc2\u3057\u306a\u3044\u51e6\u7406\u3092\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u304b\u3089\u8ffd\u3044\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```java:FooControllerTest.java\nimport static org.mockito.Matchers.anyInt;\nimport static org.mockito.Matchers.anyString;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\nimport java.util.Arrays;\n\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.MockitoJUnitRule;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.web.WebAppConfiguration;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = TestContext.class)\n@WebAppConfiguration\npublic class FooControllerTest {\n\n\t@Rule\n\tpublic MockitoJUnitRule mockitoJUnitRule = new MockitoJUnitRule(this);\n\t@InjectMocks\n\tprivate FooController target;\n\t@Mock\n\tprivate BarService barService;\n\n\t@Autowired\n\tprivate TestHelper helper;\n\n\t@Test\n\tpublic void testGet__Ok() throws Exception {\n\t\tint id = 123;\n\t\tBar bar = new Bar(id, \"bar-\" + id);\n\t\twhen(barService.getBar(anyInt())).thenReturn(bar);\n\n\t\thelper.mvc(target)\n\t\t\t.perform(get(\"/fooes/{id}\", id))\n\t\t\t.andExpect(status().isOk())\n\t\t\t.andExpect(content().json(helper.toJson(bar)));\n\n\t\tverify(barService).getBar(id);\n\t}\n\n\t@Test\n\tpublic void testGet__NotFound() throws Exception {\n\t\tString message = \"__message__\";\n\t\twhen(barService.getBar(anyInt())).thenThrow(new EntityNotFoundException(message));\n\n\t\tint id = 123;\n\t\thelper.mvc(target)\n\t\t\t.perform(get(\"/fooes/{id}\", id))\n\t\t\t.andExpect(status().isNotFound())\n\t\t\t.andExpect(content().json(helper.toJson(new ErrorResponse(\"EntityNotFoundException\", message))));\n\n\t\tverify(barService).getBar(id);\n\t}\n\n\t@Test\n\tpublic void testList__Ok() throws Exception {\n\t\tString name = \"bar-123\";\n\t\tBar bar = new Bar(123, name);\n\t\twhen(barService.findBarByName(anyString())).thenReturn(Arrays.asList(bar));\n\n\t\thelper.mvc(target)\n\t\t\t.perform(get(\"/fooes/\").param(\"name\", \" \" + name + \" \"))\n\t\t\t.andExpect(status().isOk())\n\t\t\t.andExpect(content().json(helper.toJson(new Bar[]{bar})));\n\n\t\tverify(barService).findBarByName(name);\n\t}\n}\n```\n\n# \u4f7f\u7528\u3057\u305f\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n\nhttps://github.com/NetPenguin/spring-boot-controller-test-example \u306b\u304a\u3044\u3066\u3042\u308a\u307e\u3059\u3002\n`git clone https://github.com/NetPenguin/spring-boot-controller-test-example` \u3057\u305f\u5f8c\u306b `mvn test` \u3067\u5b9f\u969b\u306b\u30c6\u30b9\u30c8\u3067\u304d\u307e\u3059\u3002\n", "tags": ["spring-boot", "spring"]}