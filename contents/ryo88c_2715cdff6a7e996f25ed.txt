{"context": " More than 1 year has passed since last update.\n\nInstall SDK by Composer\ncd App\ncurl -s http://getcomposer.org/installer | php\nvim composer.json\n\n\ncomposer.json\n{\n    \"config\": {\n        \"vendor-dir\": \"Vendor\"\n    },\n    \"require\": {\n        \"aws/aws-sdk-php\": \"*\"\n    }\n}\n\n\nphp composer.phar install\n\n\nImplement interface of Glacier.\nvim App/app.yml\n\n\nApp/app.yml\n+ App_Ro_AWS:\n+   key: KEY\n+   secret: SECRET\n+   region: REGION\n+ App_Ro_Backup:\n+   vault_name: VAULT_NAME\n\n\nvim App/Ro/AWS.php\n\n\nApp/Ro/AWS.php\n<?php\nrequire_once 'App/Vendor/autoload.php';\nclass App_Ro_AWS extends App_Ro\n{\n    public function onInject()\n    {\n        parent::onInject();\n        $app = BEAR::get('app');\n        if (!array_key_exists(__CLASS__, $app)) {\n            throw new BEAR_Exception(sprintf('Setting not found. [%s]', __CLASS__));\n        }\n        $this->_config = array_merge($this->_config, $app[__CLASS__]);\n    }\n}\n\n\nvim App/Ro/AWS/Glacier.php\n\n\nApp/Ro/AWS/Glacier.php\n<?php\nuse Aws\\Glacier\\GlacierClient;\nclass App_Ro_AWS_Glacier extends App_Ro_AWS\n{\n    /**\n     * Generate Glacier client.\n     */\n    public function onRead($values)\n    {\n        return GlacierClient::factory(\n            array(\n                'key' => $this->_config['key'],\n                'secret' => $this->_config['secret'],\n                'region' => $this->_config['region']\n            )\n        );\n    }\n}\n\n\nvim App/Ro/Backup.php\n\n\nApp/Ro/Backup.php\n<?php\nclass App_Ro_Backup extends App_Ro\n{\n    protected $_client;\n\n    public function onInject()\n    {\n        parent::onInject();\n        $this->_client = $this->_resource->read(array('uri' => 'AWS/Glacier'))->getBody();\n    }\n\n    /**\n     * @required path\n     */\n    public function onUpdate($values)\n    {\n        if (!is_readable($values['path'])) {\n            throw new BEAR_Exception(sprintf('File not found or not readable: [%s]', $values['path']));\n        }\n        return $this->_client->uploadArchive(\n            array(\n                'vaultName' => $this->_config['vault_name'],\n                'body' => fopen($values['path'], 'r')\n            )\n        )->get('archiveId');\n    }\n}\n\n\n\nExample\nbear update \u201cBackup?path=/path/to/query.sql.tgz\u201d\n\n\n## Install SDK by Composer\n\n```Console\ncd App\ncurl -s http://getcomposer.org/installer | php\nvim composer.json\n```\n\n```Json:composer.json\n{\n    \"config\": {\n        \"vendor-dir\": \"Vendor\"\n    },\n    \"require\": {\n        \"aws/aws-sdk-php\": \"*\"\n    }\n}\n```\n\n```Console\nphp composer.phar install\n```\n\n## Implement interface of Glacier.\n\n```\nvim App/app.yml\n```\n\n```Yaml:App/app.yml\n+ App_Ro_AWS:\n+   key: KEY\n+   secret: SECRET\n+   region: REGION\n+ App_Ro_Backup:\n+   vault_name: VAULT_NAME\n```\n\n```\nvim App/Ro/AWS.php\n```\n\n```php:App/Ro/AWS.php\n<?php\nrequire_once 'App/Vendor/autoload.php';\nclass App_Ro_AWS extends App_Ro\n{\n    public function onInject()\n    {\n        parent::onInject();\n        $app = BEAR::get('app');\n        if (!array_key_exists(__CLASS__, $app)) {\n            throw new BEAR_Exception(sprintf('Setting not found. [%s]', __CLASS__));\n        }\n        $this->_config = array_merge($this->_config, $app[__CLASS__]);\n    }\n}\n```\n\n```\nvim App/Ro/AWS/Glacier.php\n```\n\n```php:App/Ro/AWS/Glacier.php\n<?php\nuse Aws\\Glacier\\GlacierClient;\nclass App_Ro_AWS_Glacier extends App_Ro_AWS\n{\n    /**\n     * Generate Glacier client.\n     */\n    public function onRead($values)\n    {\n        return GlacierClient::factory(\n            array(\n                'key' => $this->_config['key'],\n                'secret' => $this->_config['secret'],\n                'region' => $this->_config['region']\n            )\n        );\n    }\n}\n```\n\n```\nvim App/Ro/Backup.php\n```\n\n```php:App/Ro/Backup.php\n<?php\nclass App_Ro_Backup extends App_Ro\n{\n    protected $_client;\n\n    public function onInject()\n    {\n        parent::onInject();\n        $this->_client = $this->_resource->read(array('uri' => 'AWS/Glacier'))->getBody();\n    }\n\n    /**\n     * @required path\n     */\n    public function onUpdate($values)\n    {\n        if (!is_readable($values['path'])) {\n            throw new BEAR_Exception(sprintf('File not found or not readable: [%s]', $values['path']));\n        }\n        return $this->_client->uploadArchive(\n            array(\n                'vaultName' => $this->_config['vault_name'],\n                'body' => fopen($values['path'], 'r')\n            )\n        )->get('archiveId');\n    }\n}\n```\n\n## Example\n\n```Console\nbear update \u201cBackup?path=/path/to/query.sql.tgz\u201d\n```", "tags": ["Amazon", "glacier", "BEAR.Saturday", "PHP"]}