{"context": "\n\nAWS Polly\u3092\u4f7f\u3063\u3066\u307f\u305f\n\n\nhttps://github.com/ShotaKameyama/slack-lambda-polly\n\u97f3\u58f0\u8aad\u307f\u4e0a\u3052\u308b\u4eba\u5de5\u77e5\u80fdPolly\u304c\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305f\u3002\u666e\u6bb5\u5927\u91cf\u306e\u6587\u7ae0\u3092\u8aad\u307e\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u3067\u3001\u79fb\u52d5\u4e2d\u306b\u8aad\u3081\u308c\u3070\u3068\u8003\u3048\u3066\u3044\u305f\u304c\u3001\u3053\u306ePolly\u306eAPI\u3092\u4f7f\u3063\u3066\u666e\u6bb5\u4f7f\u3044\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u3068\u601d\u3044\u3001\u4f5c\u3063\u305f\u3002\n\n\u4ed5\u69d8\n\nSlack\u306b\u6587\u7ae0\u3092\u6295\u7a3f\nSlack Bot\u304b\u3089Amazon API Gateway\u306b\u6587\u7ae0\u3092\u6295\u3052\u308b\nAmazon API Gateway\u3092\u901a\u3058\u3066\u3001Lambda(nodejs)\u7d4c\u7531\u3067Polly\u3067\u97f3\u58f0\u51e6\u7406\nPolly\u304b\u3089\u8fd4\u3063\u3066\u6765\u305fBuffer\u306e\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u3092S3\u306b\u4fdd\u5b58\nS3\u306eURL\u3092Slack\u306b\u6295\u7a3f\n\n\n\u4e0b\u6e96\u5099\n\n1. Slack\u306eSlash Commands\u3092\u4f7f\u3046\n\u307e\u305a\u306f\u3001Slack\u306eSlash Commands\u3092Activate\u3055\u305b\u3066\u3001Token\u3092\u53d6\u5f97\u3002\u306a\u3093\u306e\u30b3\u30de\u30f3\u30c9\u3067\u547c\u3073\u51fa\u305b\u308b\u3088\u3046\u306b\u3059\u308b\u304b\u6c7a\u3081\u3066\u304a\u304f\u3002\u4f8b\uff1a /emma\n\n\n2. AWS\u4e0a\u306bS3\u306e\u30d0\u30b1\u30c3\u30c8\u3068IAM\u30ed\u30fc\u30eb\u306e\u4f5c\u6210\u3002\n2.1. S3\u306b\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u5148\u306e\u30d0\u30b1\u30c3\u30c8\u4f5c\u6210\u3002\uff08Polly\u304c\u4e00\u90e8\u3067\u3057\u304b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u50d5\u306fus-east-1\u306b\u4f5c\u308a\u307e\u3057\u305f\uff09\n2.2. API Gateway, S3, Lambda, Polly, CloudWatch\u3092\u9069\u5207\u306a\u6a29\u9650\u3067\u4f5c\u6210\u3002\uff08\u3054\u81ea\u5206\u306e\u8981\u671b\u306b\u5fdc\u3058\u3066\uff09\n\n3. npm\u3092\u30ed\u30fc\u30ab\u30eb\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304f\n3.1. npm\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nbrew install npm\n3.2. \u6700\u65b0\u306eAWS-SDK\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3002\u4f55\u6545\u306a\u3089Lambda\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308baws-sdk\u304cPolly\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u304b\u3089\u30022.7.10\u304c\u6700\u65b0\uff082016\u5e7412\u67082\u65e5\u73fe\u5728\uff09\nnpm install aws-sdk@2.7.10\n\n4. \u81ea\u5206\u306e\u597d\u307f\u306e\u58f0\u3092\u63a2\u3057\u3066\u304a\u304f\u7b11\nAWS\u30b3\u30f3\u30bd\u30fc\u30eb\u306ePolly\u3067\u97f3\u58f0\u51fa\u529b\u3055\u305b\u308b\u969b\u306e\u58f0\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u304a\u304f\u3002\u307e\u305f\u3001\u3069\u306e\u8a00\u8a9e\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u306e\u304b\u3082\u540c\u6642\u306b\u30c1\u30a7\u30c3\u30af\u3057\u3066\u304a\u3044\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u30b3\u30fc\u30c9\u3092\u66f8\u304f\n\u4eca\u56de\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u3002\u56e0\u307f\u306b\u3053\u306e\u30b3\u30fc\u30c9\u306f\u82f1\u56fd\u82f1\u8a9e\u5bfe\u5fdc\u306e\u97f3\u58f0\u306a\u306e\u3067\u3001\u65e5\u672c\u8a9e\u3092\u8a66\u3057\u305f\u3044\u65b9\u306fMizuki\u3055\u3093\u3092\u9078\u3073\u307e\u3057\u3087\u3046\u3002\n\nindex.js\n\n'use strict';\n/* \u30d5\u30a1\u30a4\u30eb\u540d\u306b\u73fe\u5728\u6642\u523b\u3092\u3064\u3051\u308b\u7528\u306elibrary\n   npm install date-utils\n*/\nrequire('date-utils');\n\n/* \u6ce8\u610f\uff1a\u6700\u65b0\u306eAWS SDK\u306b\u3057\u306a\u3044\u3068Polly\u306f\u6a5f\u80fd\u3057\u306a\u3044\u306e\u3067\u3001AWS SDK\u306f\u5225\u9014\u30a2\u30c3\u30d7\u3059\u308b\u3002\n   npm install aws-sdk@2.7.10\n   2016\u5e7412\u67082\u65e5\u73fe\u5728\n*/\nconst AWS = require('aws-sdk');\nconst qs = require('querystring');\nconst kmsEncryptedToken = process.env.kmsEncryptedToken;\nlet token;\n\nvar polly = new AWS.Polly({apiVersion: '2016-06-10'});\nvar s3 = new AWS.S3({apiVersion: '2006-03-01'});\n\n\n\nfunction processEvent(event, callback) {\n    const params = qs.parse(event.body);\n    const requestToken = params.token;\n    if (requestToken !== token) {\n        console.error(`Request token (${requestToken}) does not match expected`);\n        return callback('Invalid request token');\n    }\n\n    // Slack\u304b\u3089\u53d6\u5f97\u3057\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u9054\u3002\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n    const user = params.user_name;\n    const command = params.command;\n    const channel = params.channel_name;\n    const commandText = params.text;\n\n    // Polly\u306e\u521d\u671f\u8a2d\u5b9a\u3068Slack\u304b\u3089\u53d6\u5f97\u3057\u305f\u30c6\u30ad\u30b9\u30c8\n    const pollyParams = {\n      OutputFormat: 'mp3', // \u97f3\u58f0\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n      Text: commandText, // \u30b9\u30e9\u30c3\u30af\u304b\u3089\u547c\u3073\u51fa\u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\n      VoiceId: 'Emma', // \u8aad\u307e\u305b\u305f\u3044\u97f3\u58f0\u3002\u3053\u308c\u306f\u82f1\u56fd\u82f1\u8a9e\n      TextType: 'text'\n    };\n\n    // Polly\u3067\u30c6\u30ad\u30b9\u30c8\u304b\u3089\u97f3\u58f0\u306b\u5909\u63db\n    polly.synthesizeSpeech(pollyParams, function(err, data) {\n      if (err) console.log(err, err.stack); // an error occurred\n      else\n          console.log(data);           // successful response\n          // \u73fe\u5728\u306e\u65e5\u4ed8\u6642\u523b\u53d6\u5f97\n          var dt = new Date();\n          var timenow = dt.toFormat(\"YYYYMMDDHH24MISS\");\n\n          // s3\u306bPut\u3059\u308b\u7528\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\n          var s3Params = {\n            ACL: 'public-read', //S3\u6a29\u9650\n            Bucket: 'YOUR-BACKET', //\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u30d0\u30b1\u30c3\u30c8\u5148\n            Key: `YOUR-FILE${timenow}.mp3`, //S3\u306e\u30d5\u30a1\u30a4\u30eb\u540d\n            Body: new Buffer(data.AudioStream) // AudioStream\u306e\u53d6\u5f97\n          };\n\n          // s3\u306bput\u3059\u308b\n          s3.putObject(s3Params, function(err, data) {\n            if (err) console.log(err, err.stack); // an error occurred\n            else     console.log(data);           // successful response\n            // Slack\u306b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\n            callback(null, `Hi, ${user}. I read your text and recorded my voice at https://s3.amazonaws.com/${s3Params.Buket}/${s3Params.Key} The original text is \"${commandText}\"`);\n\n          });\n    });\n\n}\n\n// Lambda\u3067Slack\u7528\u306eBluePrint\u3092\u9078\u3076\u3068\u4ed8\u3044\u3066\u304f\u308b\u3002\u3053\u308c\u306f\u305d\u306e\u307e\u307e\u4f7f\u3046\u3002\nexports.handler = (event, context, callback) => {\n    const done = (err, res) => callback(null, {\n        statusCode: err ? '400' : '200',\n        body: err ? (err.message || err) : JSON.stringify(res),\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    });\n\n    if (token) {\n        // Container reuse, simply process the event with the key in memory\n        processEvent(event, done);\n    } else if (kmsEncryptedToken && kmsEncryptedToken !== '<kmsEncryptedToken>') {\n        const cipherText = { CiphertextBlob: new Buffer(kmsEncryptedToken, 'base64') };\n        const kms = new AWS.KMS();\n        kms.decrypt(cipherText, (err, data) => {\n            if (err) {\n                console.log('Decrypt error:', err);\n                return done(err);\n            }\n            token = data.Plaintext.toString('ascii');\n            processEvent(event, done);\n        });\n    } else {\n        done('Token has not been set.');\n    }\n};\n\n\n\n\nZip\u5316\u3059\u308b\n\u4f5c\u3063\u305f\u30d5\u30a1\u30a4\u30eb\u3068\u30e9\u30a4\u30d6\u30e9\u30ea\u3092zip\u5316\nzip -r myfunc.zip index.js node_modules;\n\nLamda\u306eSlack\u306eBluePrint\u3092\u4f7f\u3063\u3066Amazon API Gateway\u3068Lambda\u3092\u8a2d\u5b9a\u3059\u308b\n\nAWS\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u30ed\u30b0\u30a4\u30f3\u3057\u305f\u5f8c\u3001Polly\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u30ea\u30fc\u30b8\u30e7\u30f3\uff08us-east-1\uff09\u306eLambda\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3002\uff08AWS\u30b3\u30f3\u30bd\u30fc\u30eb\u3067\u3001Polly\u306b\u89e6\u308b\u5fc5\u8981\u306f\u306a\u3057\uff09\nLamda\u306bSlack\u306eBluePrint\u3092\u9078\u629e\u3002\nSlack\u3067\u4f7f\u3063\u305fToken\u3092Environment Variables\uff08kmsEncryptedToken\uff09\u306b\u5165\u308c\u3066\u3001\u6697\u53f7\u5316\u3057\u3066\u304a\u304f\u3002\nRole\u306a\u3069\u9069\u5207\u306b\u8a2d\u5b9a\u3057\u305f\u4e0a\u3067\u3001Lambda\u306b\u5148\u307b\u3069\u4f5c\u6210\u3057\u305fZip\u30d5\u30a1\u30a4\u30eb\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\nAPI Gateway\u3067\u4f5c\u3063\u305fURL\u3092Slack\u306eIntegration Setting\u306eURL\u306b\u8cbc\u308b\u3002\n\n\u3053\u308c\u3067\u3001slack\u306b/emma MESSAGE\u3068\u66f8\u304f\u3068\u3001\u30c8\u30c3\u30d7\u753b\u50cf\u306e\u3088\u3046\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8fd4\u3063\u3066\u304f\u308b\u3002(\u9078\u3093\u3060\u97f3\u58f0\u304c\u305f\u307e\u305f\u307eEmma\u3060\u3063\u305f\u306e\u3067\u3001\u30a8\u30de\u30ef\u30c8\u30bd\u30f3\u306e\u753b\u50cf\u3092\u8cbc\u3063\u305f\u7b11\uff09\n\n\u3064\u307e\u305a\u3044\u305f\u70b9\n\u3060\u3044\u3076\u521d\u6b69\u7684\u306a\u3068\u3053\u308d\u3067\u3064\u307e\u3065\u3044\u305f\u611f\u304c\u30fb\u30fb\u30fb\n\nIAM\u306e\u30ed\u30fc\u30eb\u3092\u4ed8\u3051\u5fd8\u308c\u3066\u3044\u305f\u306e\u3067\u3001\u7121\u99c4\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3063\u305f\u3002\nLambda(nodejs)\u3067\u306f\u3001\u307e\u3060\u30c7\u30d5\u30a9\u30eb\u30c8\u3067Polly\u306eSDK\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u306a\u3044\u3053\u3068\u306b\u3057\u3070\u3089\u304f\u6c17\u3065\u3044\u3066\u3044\u306a\u304b\u3063\u305f\u3002\uff08\u65b0\u6a5f\u80fd\u306f\u4f7f\u3046\u969b\u306b\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u306f\u30c1\u30a7\u30c3\u30af\u3059\u3079\u304d\uff09\n\n\u3053\u308c\u3067\u3001\u81ea\u5206\u304c\u8aad\u307f\u305f\u3044\u6587\u7ae0\u3092\u3069\u3093\u3069\u3093\u97f3\u58f0\u306b\u5909\u63db\u3067\u304d\u308b\u306e\u3067\u671f\u5f85\u3057\u3066\u3044\u308b\u304c\u3001\u6700\u5927\uff15\u5206\u9593\u3057\u304b\u51fa\u529b\u3067\u304d\u306a\u3044\u3089\u3057\u3044\u3002\u3002\u3002\n## AWS Polly\u3092\u4f7f\u3063\u3066\u307f\u305f\n<img width=\"993\" alt=\"SlackEmmaResponse.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/64427/322cdd42-5a59-8e9c-9c0a-c1f9477f439b.png\">\n\n<img width=\"973\" alt=\"SlackMessage.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/64427/6d1e81c9-9bed-2c43-6e57-5e21ce396ba8.png\">\n\nhttps://github.com/ShotaKameyama/slack-lambda-polly\n\n\u97f3\u58f0\u8aad\u307f\u4e0a\u3052\u308b\u4eba\u5de5\u77e5\u80fdPolly\u304c\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305f\u3002\u666e\u6bb5\u5927\u91cf\u306e\u6587\u7ae0\u3092\u8aad\u307e\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u3067\u3001\u79fb\u52d5\u4e2d\u306b\u8aad\u3081\u308c\u3070\u3068\u8003\u3048\u3066\u3044\u305f\u304c\u3001\u3053\u306ePolly\u306eAPI\u3092\u4f7f\u3063\u3066\u666e\u6bb5\u4f7f\u3044\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u3068\u601d\u3044\u3001\u4f5c\u3063\u305f\u3002\n\n\n## \u4ed5\u69d8\n\n1. Slack\u306b\u6587\u7ae0\u3092\u6295\u7a3f\n2. Slack Bot\u304b\u3089Amazon API Gateway\u306b\u6587\u7ae0\u3092\u6295\u3052\u308b\n3. Amazon API Gateway\u3092\u901a\u3058\u3066\u3001Lambda(nodejs)\u7d4c\u7531\u3067Polly\u3067\u97f3\u58f0\u51e6\u7406\n4. Polly\u304b\u3089\u8fd4\u3063\u3066\u6765\u305fBuffer\u306e\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u3092S3\u306b\u4fdd\u5b58\n5. S3\u306eURL\u3092Slack\u306b\u6295\u7a3f\n\n\n## \u4e0b\u6e96\u5099\n### 1. Slack\u306eSlash Commands\u3092\u4f7f\u3046\n\u307e\u305a\u306f\u3001Slack\u306eSlash Commands\u3092Activate\u3055\u305b\u3066\u3001Token\u3092\u53d6\u5f97\u3002\u306a\u3093\u306e\u30b3\u30de\u30f3\u30c9\u3067\u547c\u3073\u51fa\u305b\u308b\u3088\u3046\u306b\u3059\u308b\u304b\u6c7a\u3081\u3066\u304a\u304f\u3002`\u4f8b\uff1a /emma`\n<img width=\"1000\" alt=\"Slack Integration Setting.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/64427/6aab3dfb-222a-2cd4-d921-f9ecafe2cf36.png\">\n\n\n### 2. AWS\u4e0a\u306bS3\u306e\u30d0\u30b1\u30c3\u30c8\u3068IAM\u30ed\u30fc\u30eb\u306e\u4f5c\u6210\u3002\n2.1. S3\u306b\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u5148\u306e\u30d0\u30b1\u30c3\u30c8\u4f5c\u6210\u3002\uff08Polly\u304c\u4e00\u90e8\u3067\u3057\u304b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u50d5\u306fus-east-1\u306b\u4f5c\u308a\u307e\u3057\u305f\uff09\n2.2. API Gateway, S3, Lambda, Polly, CloudWatch\u3092\u9069\u5207\u306a\u6a29\u9650\u3067\u4f5c\u6210\u3002\uff08\u3054\u81ea\u5206\u306e\u8981\u671b\u306b\u5fdc\u3058\u3066\uff09\n\n\n### 3. npm\u3092\u30ed\u30fc\u30ab\u30eb\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304f\n3.1. npm\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n`brew install npm`\n\n3.2. **\u6700\u65b0\u306e**AWS-SDK\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3002**\u4f55\u6545\u306a\u3089Lambda\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308baws-sdk\u304cPolly\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u304b\u3089\u3002**2.7.10\u304c\u6700\u65b0\uff082016\u5e7412\u67082\u65e5\u73fe\u5728\uff09\n`npm install aws-sdk@2.7.10`\n\n\n### 4. \u81ea\u5206\u306e\u597d\u307f\u306e\u58f0\u3092\u63a2\u3057\u3066\u304a\u304f\u7b11\nAWS\u30b3\u30f3\u30bd\u30fc\u30eb\u306ePolly\u3067\u97f3\u58f0\u51fa\u529b\u3055\u305b\u308b\u969b\u306e\u58f0\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u304a\u304f\u3002\u307e\u305f\u3001\u3069\u306e\u8a00\u8a9e\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u306e\u304b\u3082\u540c\u6642\u306b\u30c1\u30a7\u30c3\u30af\u3057\u3066\u304a\u3044\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n## \u30b3\u30fc\u30c9\u3092\u66f8\u304f\n\u4eca\u56de\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u3002\u56e0\u307f\u306b\u3053\u306e\u30b3\u30fc\u30c9\u306f\u82f1\u56fd\u82f1\u8a9e\u5bfe\u5fdc\u306e\u97f3\u58f0\u306a\u306e\u3067\u3001\u65e5\u672c\u8a9e\u3092\u8a66\u3057\u305f\u3044\u65b9\u306fMizuki\u3055\u3093\u3092\u9078\u3073\u307e\u3057\u3087\u3046\u3002\n\n```index.js\n\n'use strict';\n/* \u30d5\u30a1\u30a4\u30eb\u540d\u306b\u73fe\u5728\u6642\u523b\u3092\u3064\u3051\u308b\u7528\u306elibrary\n   npm install date-utils\n*/\nrequire('date-utils');\n\n/* \u6ce8\u610f\uff1a\u6700\u65b0\u306eAWS SDK\u306b\u3057\u306a\u3044\u3068Polly\u306f\u6a5f\u80fd\u3057\u306a\u3044\u306e\u3067\u3001AWS SDK\u306f\u5225\u9014\u30a2\u30c3\u30d7\u3059\u308b\u3002\n   npm install aws-sdk@2.7.10\n   2016\u5e7412\u67082\u65e5\u73fe\u5728\n*/\nconst AWS = require('aws-sdk');\nconst qs = require('querystring');\nconst kmsEncryptedToken = process.env.kmsEncryptedToken;\nlet token;\n\nvar polly = new AWS.Polly({apiVersion: '2016-06-10'});\nvar s3 = new AWS.S3({apiVersion: '2006-03-01'});\n\n\n\nfunction processEvent(event, callback) {\n    const params = qs.parse(event.body);\n    const requestToken = params.token;\n    if (requestToken !== token) {\n        console.error(`Request token (${requestToken}) does not match expected`);\n        return callback('Invalid request token');\n    }\n\n    // Slack\u304b\u3089\u53d6\u5f97\u3057\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u9054\u3002\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n    const user = params.user_name;\n    const command = params.command;\n    const channel = params.channel_name;\n    const commandText = params.text;\n\n    // Polly\u306e\u521d\u671f\u8a2d\u5b9a\u3068Slack\u304b\u3089\u53d6\u5f97\u3057\u305f\u30c6\u30ad\u30b9\u30c8\n    const pollyParams = {\n      OutputFormat: 'mp3', // \u97f3\u58f0\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n      Text: commandText, // \u30b9\u30e9\u30c3\u30af\u304b\u3089\u547c\u3073\u51fa\u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\n      VoiceId: 'Emma', // \u8aad\u307e\u305b\u305f\u3044\u97f3\u58f0\u3002\u3053\u308c\u306f\u82f1\u56fd\u82f1\u8a9e\n      TextType: 'text'\n    };\n\n    // Polly\u3067\u30c6\u30ad\u30b9\u30c8\u304b\u3089\u97f3\u58f0\u306b\u5909\u63db\n    polly.synthesizeSpeech(pollyParams, function(err, data) {\n      if (err) console.log(err, err.stack); // an error occurred\n      else\n          console.log(data);           // successful response\n          // \u73fe\u5728\u306e\u65e5\u4ed8\u6642\u523b\u53d6\u5f97\n          var dt = new Date();\n          var timenow = dt.toFormat(\"YYYYMMDDHH24MISS\");\n\n          // s3\u306bPut\u3059\u308b\u7528\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\n          var s3Params = {\n            ACL: 'public-read', //S3\u6a29\u9650\n            Bucket: 'YOUR-BACKET', //\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u30d0\u30b1\u30c3\u30c8\u5148\n            Key: `YOUR-FILE${timenow}.mp3`, //S3\u306e\u30d5\u30a1\u30a4\u30eb\u540d\n            Body: new Buffer(data.AudioStream) // AudioStream\u306e\u53d6\u5f97\n          };\n\n          // s3\u306bput\u3059\u308b\n          s3.putObject(s3Params, function(err, data) {\n            if (err) console.log(err, err.stack); // an error occurred\n            else     console.log(data);           // successful response\n            // Slack\u306b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\n            callback(null, `Hi, ${user}. I read your text and recorded my voice at https://s3.amazonaws.com/${s3Params.Buket}/${s3Params.Key} The original text is \"${commandText}\"`);\n\n          });\n    });\n\n}\n\n// Lambda\u3067Slack\u7528\u306eBluePrint\u3092\u9078\u3076\u3068\u4ed8\u3044\u3066\u304f\u308b\u3002\u3053\u308c\u306f\u305d\u306e\u307e\u307e\u4f7f\u3046\u3002\nexports.handler = (event, context, callback) => {\n    const done = (err, res) => callback(null, {\n        statusCode: err ? '400' : '200',\n        body: err ? (err.message || err) : JSON.stringify(res),\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    });\n\n    if (token) {\n        // Container reuse, simply process the event with the key in memory\n        processEvent(event, done);\n    } else if (kmsEncryptedToken && kmsEncryptedToken !== '<kmsEncryptedToken>') {\n        const cipherText = { CiphertextBlob: new Buffer(kmsEncryptedToken, 'base64') };\n        const kms = new AWS.KMS();\n        kms.decrypt(cipherText, (err, data) => {\n            if (err) {\n                console.log('Decrypt error:', err);\n                return done(err);\n            }\n            token = data.Plaintext.toString('ascii');\n            processEvent(event, done);\n        });\n    } else {\n        done('Token has not been set.');\n    }\n};\n\n```\n\n## Zip\u5316\u3059\u308b\n\u4f5c\u3063\u305f\u30d5\u30a1\u30a4\u30eb\u3068\u30e9\u30a4\u30d6\u30e9\u30ea\u3092zip\u5316\n` zip -r myfunc.zip index.js node_modules;`\n\n\n## Lamda\u306eSlack\u306eBluePrint\u3092\u4f7f\u3063\u3066Amazon API Gateway\u3068Lambda\u3092\u8a2d\u5b9a\u3059\u308b\n\n1. AWS\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u30ed\u30b0\u30a4\u30f3\u3057\u305f\u5f8c\u3001Polly\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u30ea\u30fc\u30b8\u30e7\u30f3\uff08us-east-1\uff09\u306eLambda\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3002\uff08AWS\u30b3\u30f3\u30bd\u30fc\u30eb\u3067\u3001Polly\u306b\u89e6\u308b\u5fc5\u8981\u306f\u306a\u3057\uff09\n2. Lamda\u306bSlack\u306eBluePrint\u3092\u9078\u629e\u3002\n3. Slack\u3067\u4f7f\u3063\u305fToken\u3092Environment Variables\uff08kmsEncryptedToken\uff09\u306b\u5165\u308c\u3066\u3001\u6697\u53f7\u5316\u3057\u3066\u304a\u304f\u3002\n4. Role\u306a\u3069\u9069\u5207\u306b\u8a2d\u5b9a\u3057\u305f\u4e0a\u3067\u3001Lambda\u306b\u5148\u307b\u3069\u4f5c\u6210\u3057\u305fZip\u30d5\u30a1\u30a4\u30eb\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\n5. API Gateway\u3067\u4f5c\u3063\u305fURL\u3092Slack\u306eIntegration Setting\u306eURL\u306b\u8cbc\u308b\u3002\n\n\u3053\u308c\u3067\u3001slack\u306b`/emma MESSAGE`\u3068\u66f8\u304f\u3068\u3001\u30c8\u30c3\u30d7\u753b\u50cf\u306e\u3088\u3046\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8fd4\u3063\u3066\u304f\u308b\u3002(\u9078\u3093\u3060\u97f3\u58f0\u304c\u305f\u307e\u305f\u307eEmma\u3060\u3063\u305f\u306e\u3067\u3001\u30a8\u30de\u30ef\u30c8\u30bd\u30f3\u306e\u753b\u50cf\u3092\u8cbc\u3063\u305f\u7b11\uff09\n\n\n## \u3064\u307e\u305a\u3044\u305f\u70b9\n\u3060\u3044\u3076\u521d\u6b69\u7684\u306a\u3068\u3053\u308d\u3067\u3064\u307e\u3065\u3044\u305f\u611f\u304c\u30fb\u30fb\u30fb\n\n- IAM\u306e\u30ed\u30fc\u30eb\u3092\u4ed8\u3051\u5fd8\u308c\u3066\u3044\u305f\u306e\u3067\u3001\u7121\u99c4\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3063\u305f\u3002\n- Lambda(nodejs)\u3067\u306f\u3001\u307e\u3060\u30c7\u30d5\u30a9\u30eb\u30c8\u3067Polly\u306eSDK\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u306a\u3044\u3053\u3068\u306b\u3057\u3070\u3089\u304f\u6c17\u3065\u3044\u3066\u3044\u306a\u304b\u3063\u305f\u3002\uff08\u65b0\u6a5f\u80fd\u306f\u4f7f\u3046\u969b\u306b\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u306f\u30c1\u30a7\u30c3\u30af\u3059\u3079\u304d\uff09\n\n\u3053\u308c\u3067\u3001\u81ea\u5206\u304c\u8aad\u307f\u305f\u3044\u6587\u7ae0\u3092\u3069\u3093\u3069\u3093\u97f3\u58f0\u306b\u5909\u63db\u3067\u304d\u308b\u306e\u3067\u671f\u5f85\u3057\u3066\u3044\u308b\u304c\u3001\u6700\u5927\uff15\u5206\u9593\u3057\u304b\u51fa\u529b\u3067\u304d\u306a\u3044\u3089\u3057\u3044\u3002\u3002\u3002\n", "tags": ["Polly", "Slack", "APIGateway", "S3", "lambda"]}