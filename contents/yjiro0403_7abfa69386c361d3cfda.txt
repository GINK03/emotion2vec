{"context": " More than 1 year has passed since last update.D\u8a00\u8a9e\u306estring\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u3064\u3044\u3066\u516c\u5f0f\u30b5\u30a4\u30c8\u3092\u307f\u3066\u3042\u3093\u307e\u3057\u3063\u304f\u308a\u3053\u306a\u304b\u3063\u305f\u90e8\u5206\u3092\u9010\u4e00\u307e\u3068\u3081\u307e\u3059.\n\n\u6587\u5b57\u5217\u691c\u7d22\nimport std.stdio, std.string;\n\nvoid main()\n{\n    string c = \"abcdefghijklabcdefghijkl\";\n    //indexOf : \u6700\u521d\u306e\u51fa\u73fe\u4f4d\u7f6e\u3092\u8fd4\u3059\n    assert(c.indexOf(\"cd\") == 2);\n    assert(c.indexOf(\"Cd\") == -1);\n    //n\u6587\u5b57\u4ee5\u964d\u306e\u6587\u5b57\u5217\u3092\u63a2\u7d22\n    assert(c.indexOf(\"abc\",5) == 12);\n    //\u5927\u6587\u5b57\u5c0f\u6587\u5b57\u3092\u533a\u5225\u3059\u308b\u3068\u304d\u306fCaseSensitive\u3092\u4f7f\u3044\u307e\u3059\n    assert(c.indexOf(\"Cd\",CaseSensitive.yes) == -1);\n    assert(c.indexOf(\"Cd\",CaseSensitive.no) == 2);\n\n    //lastIndexOf : \u6700\u5f8c\u306e\u51fa\u73fe\u4f4d\u7f6e\u3092\u8fd4\u3059\n    assert(c.lastIndexOf(\"cd\") == 14);\n\n    //\"edc\"\u306e\u3046\u3061\u3069\u308c\u304b\u304c\u3042\u3063\u305f\u6700\u521d\u4f4d\u7f6e\u3092\u8fd4\u3059\n    assert(c.indexOfAny(\"edc\") == 2);\n    assert(c.indexOfAny(\"edc\",10) == 14);\n    //\"edc\"\u306e\u3046\u3061\u4e00\u756a\u6700\u5f8c\u306b\u3042\u3063\u305f\u6587\u5b57\u306e\u4f4d\u7f6e\u3092\u8fd4\u3059assert(c.lastIndexOfAny(\"edc\") == 16); \n\n    //\u63a2\u3057\u3066\u3044\u308b\u6587\u5b57\u5217\u4ee5\u964d\u306e\u6587\u5b57\u5217\u3092\u8fd4\u3059\n    //algorithm.searching\u304c\u5fc5\u8981\n    import std.algorithm.searching;\n    assert(c.find(\"def\") == \"defghijklabcdefghijkl\");\n\n    //\u898b\u3064\u304b\u3063\u305f\u3089true\u3092\u8fd4\u3059\n    assert(c.canFind(\"def\") == true);\n\n\n    //\u6587\u5b57\u30ab\u30a6\u30f3\u30c8\n    //'a', 'b'\u307e\u305f\u306f'c'\u304c\u3042\u308b\u6570\u3092\u6570\u3048\u308b\n    assert(c.countchars(\"abc\") == 6);\n    //\"abc\"\u304c\u3042\u308b\u6570\u3092\u6570\u3048\u308b\n    assert(c.count(\"abc\") == 2);\n\n}\n\n\n\u6587\u5b57\u306e\u66f8\u304d\u63db\u3048\nimport std.stdio, std.string;\nimport std.array : appender;\n\n//\u30cd\u30c3\u30c8\u3067\u62fe\u3063\u305f\n//\u540c\u3058\u6587\u5b57\u5217\u3092\u524a\u9664\u3059\u308b\n// Must keep the original order of the items.\n// Slow implementation that shows the semantics.\nT[] noDupes(T)(in T[] s) {\n      import std.algorithm: canFind;\n      T[] result;\n      foreach (T c; s)\n          if (!result.canFind(c))\n              result ~= c;\n      return result;\n}\n\nvoid main()\n{\n    string c = \"abcdefghijklabcdefghijkl\";\n\n    //'a','d'\u307e\u305f\u306f'c'\u3092\u524a\u9664\n    assert(c.removechars(\"adc\") == \"befghijklbefghijkl\");\n\n\n    //\u6587\u5b57\u5217\u306e\u5165\u308c\u66ff\u3048\n    string buf;\n    auto transTable1 = makeTransTable(\"eo5\", \"57q\");\n    buf = translate(\"hello world\", transTable1);\n    assert(buf == \"h5ll7 w7rld\");\n\n    buf = translate(\"hello world\", transTable1, \"low\");\n    assert(buf == \"h5 rd\");\n\n    assert(\"AAAA\".noDupes == \"A\");\n    assert(\"AAAA\".squeeze == \"A\");\n    assert(\"ABAC\".noDupes == \"ABC\");\n    assert(\"ABAC\".squeeze == \"ABAC\");\n\n   //\u4ed6\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u5fc5\u8981\u306a\u51e6\u7406\n   import std.algorithm.searchiing;\n   //\u6587\u5b57\u3092\u533a\u5207\u308b\n   auto a = \"Carl Sagan Memorial     Station\";\n   auto r = findSplit(a, \"Velikovsky\");\n   assert(r[0] == a);\n   assert(r[1].empty);\n   assert(r[2].empty);\n   r = findSplit(a, \" \");\n   assert(r[0] == \"Carl\");\n   assert(r[1] == \" \");\n   assert(r[2] == \"Sagan Memorial Station\");\n   auto r1 = findSplitBefore(a, \"Sagan\");\n   assert(r1[0] == \"Carl \", r1[0]);\n   assert(r1[1] == \"Sagan Memorial Station\");\n   auto r2 = findSplitAfter(a, \"Sagan\");\n   assert(r2[0] == \"Carl Sagan\");\n   assert(r2[1] == \" Memorial Station\");\n}\n\n\u53c2\u8003:\nnoDupes\u306e\u30d5\u30a9\u30fc\u30e9\u30e0\n\n\u4ed6\u306e\u6a5f\u80fd\n\u82f1\u8a9e\u306e\u516c\u5f0f\u30b5\u30a4\u30c8\u304c\u30ea\u30cb\u30e5\u30fc\u30a2\u30eb\u3057\u305f\u307f\u305f\u3044\u3067\u308f\u304b\u308a\u3084\u3059\u304f\u306a\u3063\u3066\u3044\u307e\u3059. \u3053\u3061\u3089\u3092\u53c2\u8003\u306b\u3059\u308b\u3068\u826f\u3044\u3067\u3057\u3087\u3046\nD\u8a00\u8a9e\u306estring\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u3064\u3044\u3066[\u516c\u5f0f\u30b5\u30a4\u30c8](http://dlang.org/phobos/std_string.html)\u3092\u307f\u3066\u3042\u3093\u307e\u3057\u3063\u304f\u308a\u3053\u306a\u304b\u3063\u305f\u90e8\u5206\u3092\u9010\u4e00\u307e\u3068\u3081\u307e\u3059.\n\n#\u6587\u5b57\u5217\u691c\u7d22\n\n```d\nimport std.stdio, std.string;\n\nvoid main()\n{\n    string c = \"abcdefghijklabcdefghijkl\";\n    //indexOf : \u6700\u521d\u306e\u51fa\u73fe\u4f4d\u7f6e\u3092\u8fd4\u3059\n    assert(c.indexOf(\"cd\") == 2);\n    assert(c.indexOf(\"Cd\") == -1);\n    //n\u6587\u5b57\u4ee5\u964d\u306e\u6587\u5b57\u5217\u3092\u63a2\u7d22\n    assert(c.indexOf(\"abc\",5) == 12);\n    //\u5927\u6587\u5b57\u5c0f\u6587\u5b57\u3092\u533a\u5225\u3059\u308b\u3068\u304d\u306fCaseSensitive\u3092\u4f7f\u3044\u307e\u3059\n    assert(c.indexOf(\"Cd\",CaseSensitive.yes) == -1);\n    assert(c.indexOf(\"Cd\",CaseSensitive.no) == 2);\n\n    //lastIndexOf : \u6700\u5f8c\u306e\u51fa\u73fe\u4f4d\u7f6e\u3092\u8fd4\u3059\n    assert(c.lastIndexOf(\"cd\") == 14);\n\n    //\"edc\"\u306e\u3046\u3061\u3069\u308c\u304b\u304c\u3042\u3063\u305f\u6700\u521d\u4f4d\u7f6e\u3092\u8fd4\u3059\n    assert(c.indexOfAny(\"edc\") == 2);\n    assert(c.indexOfAny(\"edc\",10) == 14);\n    //\"edc\"\u306e\u3046\u3061\u4e00\u756a\u6700\u5f8c\u306b\u3042\u3063\u305f\u6587\u5b57\u306e\u4f4d\u7f6e\u3092\u8fd4\u3059assert(c.lastIndexOfAny(\"edc\") == 16); \n\n    //\u63a2\u3057\u3066\u3044\u308b\u6587\u5b57\u5217\u4ee5\u964d\u306e\u6587\u5b57\u5217\u3092\u8fd4\u3059\n    //algorithm.searching\u304c\u5fc5\u8981\n    import std.algorithm.searching;\n    assert(c.find(\"def\") == \"defghijklabcdefghijkl\");\n\n    //\u898b\u3064\u304b\u3063\u305f\u3089true\u3092\u8fd4\u3059\n    assert(c.canFind(\"def\") == true);\n\n\n    //\u6587\u5b57\u30ab\u30a6\u30f3\u30c8\n    //'a', 'b'\u307e\u305f\u306f'c'\u304c\u3042\u308b\u6570\u3092\u6570\u3048\u308b\n    assert(c.countchars(\"abc\") == 6);\n    //\"abc\"\u304c\u3042\u308b\u6570\u3092\u6570\u3048\u308b\n    assert(c.count(\"abc\") == 2);\n\n}\n```\n\n#\u6587\u5b57\u306e\u66f8\u304d\u63db\u3048\n```d\nimport std.stdio, std.string;\nimport std.array : appender;\n\n//\u30cd\u30c3\u30c8\u3067\u62fe\u3063\u305f\n//\u540c\u3058\u6587\u5b57\u5217\u3092\u524a\u9664\u3059\u308b\n// Must keep the original order of the items.\n// Slow implementation that shows the semantics.\nT[] noDupes(T)(in T[] s) {\n      import std.algorithm: canFind;\n      T[] result;\n      foreach (T c; s)\n          if (!result.canFind(c))\n              result ~= c;\n      return result;\n}\n\nvoid main()\n{\n    string c = \"abcdefghijklabcdefghijkl\";\n\n    //'a','d'\u307e\u305f\u306f'c'\u3092\u524a\u9664\n    assert(c.removechars(\"adc\") == \"befghijklbefghijkl\");\n\n\n    //\u6587\u5b57\u5217\u306e\u5165\u308c\u66ff\u3048\n    string buf;\n    auto transTable1 = makeTransTable(\"eo5\", \"57q\");\n    buf = translate(\"hello world\", transTable1);\n    assert(buf == \"h5ll7 w7rld\");\n\n    buf = translate(\"hello world\", transTable1, \"low\");\n    assert(buf == \"h5 rd\");\n\n    assert(\"AAAA\".noDupes == \"A\");\n    assert(\"AAAA\".squeeze == \"A\");\n    assert(\"ABAC\".noDupes == \"ABC\");\n    assert(\"ABAC\".squeeze == \"ABAC\");\n\n   //\u4ed6\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u5fc5\u8981\u306a\u51e6\u7406\n   import std.algorithm.searchiing;\n   //\u6587\u5b57\u3092\u533a\u5207\u308b\n   auto a = \"Carl Sagan Memorial     Station\";\n   auto r = findSplit(a, \"Velikovsky\");\n   assert(r[0] == a);\n   assert(r[1].empty);\n   assert(r[2].empty);\n   r = findSplit(a, \" \");\n   assert(r[0] == \"Carl\");\n   assert(r[1] == \" \");\n   assert(r[2] == \"Sagan Memorial Station\");\n   auto r1 = findSplitBefore(a, \"Sagan\");\n   assert(r1[0] == \"Carl \", r1[0]);\n   assert(r1[1] == \"Sagan Memorial Station\");\n   auto r2 = findSplitAfter(a, \"Sagan\");\n   assert(r2[0] == \"Carl Sagan\");\n   assert(r2[1] == \" Memorial Station\");\n}\n```\n\n\u53c2\u8003:\n[noDupes\u306e\u30d5\u30a9\u30fc\u30e9\u30e0](http://forum.dlang.org/post/wisybtkdxfitbwsbkttk@forum.dlang.org)\n#\u4ed6\u306e\u6a5f\u80fd\n\u82f1\u8a9e\u306e[\u516c\u5f0f\u30b5\u30a4\u30c8](http://dlang.org/phobos/std_string.html)\u304c\u30ea\u30cb\u30e5\u30fc\u30a2\u30eb\u3057\u305f\u307f\u305f\u3044\u3067\u308f\u304b\u308a\u3084\u3059\u304f\u306a\u3063\u3066\u3044\u307e\u3059. \u3053\u3061\u3089\u3092\u53c2\u8003\u306b\u3059\u308b\u3068\u826f\u3044\u3067\u3057\u3087\u3046\n", "tags": ["dlang", "D\u8a00\u8a9e"]}