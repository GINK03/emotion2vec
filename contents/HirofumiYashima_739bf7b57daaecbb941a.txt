{"tags": ["DeepLearning", "\u6df1\u5c64\u5b66\u7fd2", "LSTM", "RNN", "\u6642\u7cfb\u5217\u89e3\u6790"], "context": "\n\n\uff08 \u30b3\u30fc\u30c9\u53c2\u8003\u30a6\u30a7\u30d6\u30da\u30fc\u30b8 \uff09\n\n\nyukiB\u3055\u3093 Qiita\u8a18\u4e8b \u300c\u6df1\u5c64\u5b66\u7fd2\u30e9\u30a4\u30d6\u30e9\u30eaKeras\u3067RNN\u3092\u4f7f\u3063\u3066sin\u6ce2\u4e88\u6e2c\u300d\n\n\n\u4e0a\u8a18 \u306e \u8a18\u4e8b \u3092 \u53c2\u8003\u306b\u3001\n\n\uff12\u5909\u91cf \u5165\u529b\n\n\nsin\u66f2\u7dda \u306e 100\u6642\u70b9 \u306e \u5024\ncos\u66f2\u7dda \u306e 100\u6642\u70b9 \u306e \u5024\n\n\u3092 \u5165\u529b\u5024 \u3068\u3057\u3066 \u53d7\u3051\u53d6\u308a\u3001\n\n\uff11\u671f\u5148 \u306e \uff11\u5909\u91cf \u51fa\u529b\n\n\n(101\u6642\u70b9\u76ee\u306esin + 101\u6642\u70b9\u76ee\u306ecos) \u306e \u5024\n\n\u3092 \u51fa\u529b \u3059\u308b \n\n\uff12\u5909\u91cfLSTM \u56de\u5e30\u4e88\u6e2c\u30e2\u30c7\u30eb\uff08\uff11\u6642\u70b9\u5148\u3092\u4e88\u6e2c\uff09\n\n\u3092 \u5b66\u7fd2\u3055\u305b\u3066 \u307f\u307e\u3057\u305f\u3002\n\n( \u30b3\u30fc\u30c9 \uff09\n\n\n\uff08 \u5b9f\u884c\u74b0\u5883 \uff09\n\n\nOS: MacBook (CPU)\nJupyter notebook \nPython 3\nkeras ver. 1.2.2\n\n\npython 3 (keras 1.2.2)\nimport keras\nkeras.__version__\n\n'1.2.2'\n\n\n\n\npython 3 (keras 1.2.2)\n%matplotlib inline\n\n\n\npython 3 (keras 1.2.2)\nimport pandas as pd\nimport numpy as np\nimport math\nimport random\n\n\n\npython 3 (keras 1.2.2)\nrandom.seed(123)\n# \u4e71\u6570\u306e\u4fc2\u6570\nrandom_factor = 0.05\n# \u30b5\u30a4\u30af\u30eb\u3042\u305f\u308a\u306e\u30b9\u30c6\u30c3\u30d7\u6570\nsteps_per_cycle = 80\n# \u751f\u6210\u3059\u308b\u30b5\u30a4\u30af\u30eb\u6570\nnumber_of_cycles = 50\n\n\n\npython 3 (keras 1.2.2)\ndf = pd.DataFrame(np.arange(steps_per_cycle * number_of_cycles + 1), columns=[\"t\"])\ndf[\"sin_t\"] = df.t.apply(lambda x: math.sin(x * (2 * math.pi / steps_per_cycle)+ random.uniform(-1.0, +1.0) * random_factor))\ndf[[\"sin_t\"]].head(steps_per_cycle * 2).plot()\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0x112641128>\n\n\n\npython 3 (keras 1.2.2)\nfrom numpy.random import *\ndf[\"cos_t\"] = df.t.apply(lambda x: math.cos(x * (2 * math.pi / steps_per_cycle)+ uniform(-1.0, +1.0) * random_factor))\ndf[[\"cos_t\"]].head(steps_per_cycle * 2).plot()\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0x112612cc0>\n\n\n\npython 3 (keras 1.2.2)\ndf[\"sin+cos\"] = df[\"sin_t\"] + df[\"cos_t\"]\ndf[[\"sin+cos\"]].head(steps_per_cycle * 2).plot()\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0x11280b390>\n\n\n\npython 3 (keras 1.2.2)\ndef _load_data(data, n_prev = 100):  \n    \"\"\"\n    data should be pd.DataFrame()\n    \"\"\"\n\n    docX, docY = [], []\n    for i in range(len(data)-n_prev):\n        docX.append(data.iloc[i:i+n_prev].as_matrix())\n        docY.append(data.iloc[i+n_prev].as_matrix())\n    alsX = np.array(docX)\n    alsY = np.array(docY)\n\n    return alsX, alsY\n\ndef train_test_split(df, test_size=0.1, n_prev = 100):  \n    \"\"\"\n    This just splits data to training and testing parts\n    \"\"\"\n    ntrn = round(len(df) * (1 - test_size))\n    ntrn = int(ntrn)\n    X_train, y_train = _load_data(df.iloc[0:ntrn], n_prev)\n    X_test, y_test = _load_data(df.iloc[ntrn:], n_prev)\n\n    return (X_train, y_train), (X_test, y_test)\n\n\n\npython 3 (keras 1.2.2)\n(X_sin_train, _), (X_sin_test, _) = train_test_split(df[[\"sin_t\"]], n_prev =100)  \n(X_cos_train, _), (X_cos_test, _) = train_test_split(df[[\"cos_t\"]], n_prev =100) \n(_, y_sincos_train), (_, y_sincos_test) = train_test_split(df[[\"sin+cos\"]], n_prev =100) \n\n\n\npython 3 (keras 1.2.2)\nX_sin_train.shape\n\n\n(3501, 100, 1)\n\n\npython 3 (keras 1.2.2)\nX_sin_train[0][0]\n\n\narray([-0.04474869])\n\n\npython 3 (keras 1.2.2)\nX_sin_train[0][1]\n\n\narray([ 0.03724986])\n\n\npython 3 (keras 1.2.2)\ntest_size=0.1\nsteps_per_cycle * number_of_cycles * test_size\n\n\n400.0\n\n\npython 3 (keras 1.2.2)\nsteps_per_cycle * number_of_cycles * (1 - test_size)\n\n\n3600.0\n\n\npython 3 (keras 1.2.2)\nX_sin_test.shape\n\n\n(300, 100, 1)\n\n\n\n\u5165\u529b\u5c64 \u306b input \u3059\u308b \u30c7\u30fc\u30bf \u306e shape\n\ndata \u306e shape \u306f\u3001\n\n(3501, 100, 2) \n\n\u306b \u3059\u308c\u3070 \u826f\u3044\u3002\n\npython 3 (keras 1.2.2)\n# data \u306e shape \u3092 (3501, 100, 2) \u306b \u3059\u308c\u3070\u826f\u3044\u3002\n# (3501, 100, 2) = (sample_size, data_length, data_dimension) \n# \u30c7\u30fc\u30bf\u4ef6\u6570: 3501\n#\n# \u3042\u308b\uff11\u4ef6\u306e\u30c7\u30fc\u30bf\u306eshape: (100, 2) \u21e6 (sin, cos) \u304c 100\u6642\u70b9\u5206 # data \u306e shape \u3092 (3501, 100, 2) \u306b \u3059\u308c\u3070\u826f\u3044\u3002\n# \u30c7\u30fc\u30bf\u4ef6\u6570: 3501data = []\n\n\n\npython 3 (keras 1.2.2)\nX_sin_train[0].shape\n\n\n(100, 1)\n\n\npython 3 (keras 1.2.2)\ndata = []\n\nfor i in range(X_sin_train.shape[0]):\n    data.append([[x_sin_elem, x_cos_elem] for x_sin_elem, x_cos_elem\n                                 in zip(X_sin_train[i], X_cos_train[i])])\n\n\n\npython 3 (keras 1.2.2)\ndata = np.array(data)\ndata.shape\n\n\n(3501, 100, 2, 1)\n\n\npython 3 (keras 1.2.2)\ndata = data.reshape(3501, 100, 2)\ndata.shape\n\n\n(3501, 100, 2)\n\n\n\n\u5404\u6642\u70b9 \u306e (sin, cos\uff09\u30da\u30a2 \u304c \u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3053\u3068 \u3092 \u78ba\u8a8d\n\n\npython 3 (keras 1.2.2)\nprint(data[0][0])\n\n\n[-0.04474869  0.99978703]\n\n\npython 3 (keras 1.2.2)\nX_sin_train[0][0]\n\n\narray([-0.04474869])\n\n\npython 3 (keras 1.2.2)\nX_cos_train[0][0]\n\n\narray([ 0.99978703])\n\n\npython 3 (keras 1.2.2)\nprint(data[0][1])\n\n\n[ 0.03724986  0.99515409]\n\n\npython 3 (keras 1.2.2)\nX_sin_train[0][1]\n\n\narray([ 0.03724986])\n\n\npython 3 (keras 1.2.2)\nX_cos_train[0][1]\n\n\narray([ 0.99515409])\n\n\npython 3 (keras 1.2.2)\nprint(data[0][0])\nprint(X_sin_train[0][0], X_cos_train[0][0])\n\n\n[-0.04474869  0.99978703]\n[-0.04474869] [ 0.99978703]\n\n\npython 3 (keras 1.2.2)\nprint(data[0][1])\nprint(X_sin_train[0][1], X_cos_train[0][1])\n\n\n[ 0.03724986  0.99515409]\n[ 0.03724986] [ 0.99515409]\n\n\npython 3 (keras 1.2.2)\nprint(data[0][99])\nprint(X_sin_train[0][99], X_cos_train[0][99])\n\n\n[ 0.99669789  0.06532641]\n[ 0.99669789] [ 0.06532641]\n\n\npython 3 (keras 1.2.2)\nprint(data[3500][99])\nprint(X_sin_train[3500][99], X_cos_train[3500][99])\n\n\n[-0.08190245  0.99713795]\n[-0.08190245] [ 0.99713795]\n\n\n\u5404\u6642\u70b9 \u306e (sin, cos) \u306e \u7d44 \u304c \u51fa\u6765\u3066\u3044\u308b\n\n\n\n\u691c\u8a3c\uff08\u30c6\u30b9\u30c8\uff09\u7528 \u306e \u5165\u529b\u5c64Input\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8 \u3092 \u540c\u69d8 \u306b \u4f5c\u6210\n\n\npython 3 (keras 1.2.2)\ntest_data = []\nfor i in range(X_sin_test.shape[0]):\n    test_data.append([[x_sin_elem, x_cos_elem] for x_sin_elem, x_cos_elem\n                                 in zip(X_sin_test[i], X_cos_test[i])])\n\n\n\npython 3 (keras 1.2.2)\nlen(X_sin_test)\n\n\n300\n\n\npython 3 (keras 1.2.2)\ntest_data_array = np.array(test_data)\ntest_data_array.shape\n\n\n(300, 100, 2, 1)\n\n\npython 3 (keras 1.2.2)\ntest_data_array = test_data_array.reshape(300, 100, 2)\ntest_data_array.shape\n\n\n(300, 100, 2)\n\n\npython 3 (keras 1.2.2)\ny_sincos_train.shape\n\n\n(3501, 1)\n\n\n\u691c\u8a3c\uff08\u30c6\u30b9\u30c8\uff09\u7528\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8 \u306e \u6b63\u89e3\u5024\n\n\u691c\u8a3c\u7528\u30c7\u30fc\u30bf \u3092 \u7528\u3044\u305f \u4e88\u6e2c\u5024 \u3068 \u5b9f\u6e2c\u5024\uff08\u6b63\u89e3\u5024\uff09 \u3092 \u30b0\u30e9\u30d5 \u306b \u91cd\u306d\u3066\u8aa4 \u5dee\u4e56\u96e2 \u3092 \u898b\u308b\u969b \u306b \u7528\u3044\u307e\u3059\u3002\n\npython 3 (keras 1.2.2)\ny_sincos_train.reshape(3501)\ny_sincos_train.shape\n\n\n(3501, 1)\n\n\npython 3 (keras 1.2.2)\ny_sincos_train[0:10]\n\n\narray([[ 0.99397704],\n       [ 0.9353305 ],\n       [ 0.81836871],\n       [ 0.71484031],\n       [ 0.59447437],\n       [ 0.49463794],\n       [ 0.47903811],\n       [ 0.32167679],\n       [ 0.23870436],\n       [ 0.09244835]])\n\n\n\nLSTM\u56de\u5e30\u4e88\u6e2c\u30e2\u30c7\u30eb \u306e \u5b66\u7fd2\u5b9f\u884c\n\n\npython 3 (keras 1.2.2)\nfrom keras.models import Sequential  \nfrom keras.layers.core import Dense, Activation  \nfrom keras.layers.recurrent import LSTM\n\nmodel = Sequential()  \nmodel.add(LSTM(300, batch_input_shape=(None, 100, 2), return_sequences=False))  \nmodel.add(Dense(1))  \nmodel.add(Activation(\"linear\"))  \nmodel.compile(loss=\"mean_squared_error\", optimizer=\"rmsprop\")\nmodel.fit(data, y_sincos_train, batch_size=600, nb_epoch=10, validation_split=0.05) \n\n\nTrain on 3325 samples, validate on 176 samples\nEpoch 1/10\n3325/3325 [==============================] - 55s - loss: 0.3661 - val_loss: 0.1438\nEpoch 2/10\n3325/3325 [==============================] - 54s - loss: 0.0308 - val_loss: 0.0028\nEpoch 3/10\n3325/3325 [==============================] - 56s - loss: 0.0062 - val_loss: 0.0275\nEpoch 4/10\n3325/3325 [==============================] - 62s - loss: 0.0240 - val_loss: 0.0158\nEpoch 5/10\n3325/3325 [==============================] - 61s - loss: 0.0115 - val_loss: 0.0154\nEpoch 6/10\n3325/3325 [==============================] - 61s - loss: 0.0142 - val_loss: 0.0422\nEpoch 7/10\n3325/3325 [==============================] - 59s - loss: 0.0323 - val_loss: 0.0028\nEpoch 8/10\n3325/3325 [==============================] - 58s - loss: 0.0040 - val_loss: 0.0265\nEpoch 9/10\n3325/3325 [==============================] - 62s - loss: 0.0274 - val_loss: 0.0194\nEpoch 10/10\n3325/3325 [==============================] - 58s - loss: 0.0169 - val_loss: 0.0041\n\n\n\n\n\n<keras.callbacks.History at 0x117170f98>\n\n\n\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb \u306e \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u6210\n\n\npython 3 (keras 1.2.2)\nmodel.summary()\n\n\n____________________________________________________________________________________________________\nLayer (type)                     Output Shape          Param #     Connected to                     \n====================================================================================================\nlstm_2 (LSTM)                    (None, 300)           363600      lstm_input_2[0][0]               \n____________________________________________________________________________________________________\ndense_2 (Dense)                  (None, 1)             301         lstm_2[0][0]                     \n____________________________________________________________________________________________________\nactivation_2 (Activation)        (None, 1)             0           dense_2[0][0]                    \n====================================================================================================\nTotal params: 363,901\nTrainable params: 363,901\nNon-trainable params: 0\n____________________________________________________________________________________________________\n\n\npython 3 (keras 1.2.2)\nimport types\ntype(model)\n\n\nkeras.models.Sequential\n\n\n\u691c\u8a3c\uff08\u30c6\u30b9\u30c8\uff09\u7528\u30c7\u30fc\u30bf \u3092 \u5165\u529b\u5c64 \u306b \u4e0e\u3048\u3066\u3001\u4e88\u6e2c\u5024 \u3092 \u51fa\u529b\n\n\npython 3 (keras 1.2.2)\npredicted = model.predict(test_data_array)  \n\n\n\npython 3 (keras 1.2.2)\nlen(predicted)\n\n\n300\n\n\npython 3 (keras 1.2.2)\ntype(predicted)\n\n\nnumpy.ndarray\n\n\npython 3 (keras 1.2.2)\npredicted.shape\n\n\n(300, 1)\n\n\n\u63a8\u6e2c\u7d50\u679c \u3092 \u30b0\u30e9\u30d5\u63cf\u753b\n\n\n100\u671f\u306e\u30c7\u30fc\u30bf \u3092 \u5143 \u306b\u3001101\u671f\u76ee \u3092 \u4e88\u6e2c\n101\u671f\u76ee\uff08\u63a8\u5b9a\u4e88\u6e2c\u5024\uff09\u3092\u5143\u306b\u3001102\u671f\u76ee\uff08\u63a8\u5b9a\u4e88\u6e2c\u5024\uff09 \u3092 \u63a8\u5b9a\n102\u671f\u76ee\uff08\u63a8\u5b9a\u4e88\u6e2c\u5024\uff09\u3092\u5143\u306b\u3001103\u671f\u76ee\uff08\u63a8\u5b9a\u4e88\u6e2c\u5024\uff09 \u3092 \u63a8\u5b9a\n...\n\n\u3068\u3001\u63a8\u5b9a\u5024 \u3092 \u5143 \u306b\u3001\u3055\u3089 \u306b \u6b21\u306e\u63a8\u5b9a\u5024 \u3092 \u4e88\u6e2c\uff08\u63a8\u5b9a\uff09\u3057\u3066\u3044\u304f\u3002\n\u3053\u306e\u305f\u3081\u3001\u5165\u529b\u30c7\u30fc\u30bf\uff08\u5b9f\u7e3e\u5024\uff09\u671f\u9593 \u304b\u3089 \u96e2\u308c\u308c\u3070\u96e2\u308c\u308b\u307b\u3069\u3001\u4e88\u6e2c\u8aa4\u5dee \u304c \u7d2f\u7a4d\u3057\u3066\u3044\u304f\u3002\nKalman filter \u306e \u3088\u3046 \u306b\u3001\n\u9010\u6b21\u3001\u76f4\u524d\u671f\u306e\u300c\u4e88\u6e2c\u63a8\u5b9a\u5024 \u3068 \u5b9f\u6e2c\u5024 \u3068\u306e \u4e56\u96e2\u8aa4\u5dee\u300d \u3092 \u60c5\u5831\u53d6\u5f97\u3057\u3066\u3001\n\u6b21\u306e\u4e88\u6e2c \u306b\u969b\u3057\u3066\u3001\u8aa4\u5dee\u4fee\u6b63\u3059\u308b\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u306e\u4ed5\u7d44\u307f \u304c \u306a\u3044\u3002\n\npython 3 (keras 1.2.2)\nfrom matplotlib import pyplot as plt\nplt.plot(predicted)\n\n\n[<matplotlib.lines.Line2D at 0x117c88390>]\n\n\n\n\u6b63\u89e3\u30c7\u30fc\u30bf\uff08\u5b9f\u7e3e\u5024\uff09 \u306e \u8ecc\u8de1\n\n\npython 3 (keras 1.2.2)\nlen(y_sincos_test)\n\n\n300\n\n\npython 3 (keras 1.2.2)\nplt.plot(y_sincos_test)\n\n\n[<matplotlib.lines.Line2D at 0x117f6db38>]\n\n\n\n\u4e88\u6e2c\u5024 \u3068 \u5b9f\u6e2c\u5024 \u3092 \u8272\u5206\u3051\u63cf\u753b\u3000\u3057\u3066\u3001\u4e56\u96e2 \u3092 \u78ba\u8a8d\n\n\npython 3 (keras 1.2.2)\ndataf =  pd.DataFrame(predicted)\ndataf.columns = [\"predict\"]\ndataf[\"input\"] = y_sincos_test\ndataf.plot()\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0x117cb0eb8>\n\n\n###__\uff08 \u30b3\u30fc\u30c9\u53c2\u8003\u30a6\u30a7\u30d6\u30da\u30fc\u30b8 \uff09__\n\n* [yukiB\u3055\u3093 Qiita\u8a18\u4e8b \u300c\u6df1\u5c64\u5b66\u7fd2\u30e9\u30a4\u30d6\u30e9\u30eaKeras\u3067RNN\u3092\u4f7f\u3063\u3066sin\b\u6ce2\u4e88\u6e2c\u300d](http://qiita.com/yukiB/items/5d5b202af86e3c587843)\n\n___\n\n__\u4e0a\u8a18 \u306e \u8a18\u4e8b \u3092 \u53c2\u8003\u306b\u3001__\n\n####__\uff12\u5909\u91cf \u5165\u529b__\n\n* sin\u66f2\u7dda \u306e 100\u6642\u70b9 \u306e \u5024\n* cos\u66f2\u7dda \u306e 100\u6642\u70b9 \u306e \u5024\n\n\u3092 __\u5165\u529b\u5024__ \u3068\u3057\u3066 \u53d7\u3051\u53d6\u308a\u3001\n\n####__\uff11\u671f\u5148 \u306e \uff11\u5909\u91cf \u51fa\u529b__\n\n* (101\u6642\u70b9\u76ee\u306esin + 101\u6642\u70b9\u76ee\u306ecos) \u306e \u5024\n\n\u3092 __\u51fa\u529b__ \u3059\u308b \n\n* __\uff12\u5909\u91cfLSTM \u56de\u5e30\u4e88\u6e2c\u30e2\u30c7\u30eb\uff08\uff11\u6642\u70b9\u5148\u3092\u4e88\u6e2c\uff09__\n\n\u3092 \u5b66\u7fd2\u3055\u305b\u3066 \u307f\u307e\u3057\u305f\u3002\n\n\n##__( \u30b3\u30fc\u30c9 \uff09__\n\n####__\uff08 \u5b9f\u884c\u74b0\u5883 \uff09__\n\n* OS: MacBook (CPU)\n* Jupyter notebook \n* Python 3\n* keras ver. 1.2.2\n\n\n```{python:python 3 (keras 1.2.2)}\nimport keras\nkeras.__version__\n\n'1.2.2'\n```\n\n___\n\n```{python:python 3 (keras 1.2.2)}\n%matplotlib inline\n```\n\n\n```{python:python 3 (keras 1.2.2)}\nimport pandas as pd\nimport numpy as np\nimport math\nimport random\n```\n\n\n```{python:python 3 (keras 1.2.2)}\nrandom.seed(123)\n# \u4e71\u6570\u306e\u4fc2\u6570\nrandom_factor = 0.05\n# \u30b5\u30a4\u30af\u30eb\u3042\u305f\u308a\u306e\u30b9\u30c6\u30c3\u30d7\u6570\nsteps_per_cycle = 80\n# \u751f\u6210\u3059\u308b\u30b5\u30a4\u30af\u30eb\u6570\nnumber_of_cycles = 50\n```\n\n\n```{python:python 3 (keras 1.2.2)}\ndf = pd.DataFrame(np.arange(steps_per_cycle * number_of_cycles + 1), columns=[\"t\"])\ndf[\"sin_t\"] = df.t.apply(lambda x: math.sin(x * (2 * math.pi / steps_per_cycle)+ random.uniform(-1.0, +1.0) * random_factor))\ndf[[\"sin_t\"]].head(steps_per_cycle * 2).plot()\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x112641128>\n\n\n\n\n![output_3_1.png](https://qiita-image-store.s3.amazonaws.com/0/43487/7c3b81f7-f9b5-4e20-4f61-a8cfa91e0a77.png)\n\n\n\n\n```{python:python 3 (keras 1.2.2)}\nfrom numpy.random import *\ndf[\"cos_t\"] = df.t.apply(lambda x: math.cos(x * (2 * math.pi / steps_per_cycle)+ uniform(-1.0, +1.0) * random_factor))\ndf[[\"cos_t\"]].head(steps_per_cycle * 2).plot()\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x112612cc0>\n\n\n\n\n![output_4_1.png](https://qiita-image-store.s3.amazonaws.com/0/43487/3b3497e4-18d5-2d36-cd54-a13161207556.png)\n\n\n\n\n```{python:python 3 (keras 1.2.2)}\ndf[\"sin+cos\"] = df[\"sin_t\"] + df[\"cos_t\"]\ndf[[\"sin+cos\"]].head(steps_per_cycle * 2).plot()\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x11280b390>\n\n\n\n\n![output_5_1.png](https://qiita-image-store.s3.amazonaws.com/0/43487/d8115ea3-f0fd-7432-9050-43af953afd38.png)\n\n\n\n\n```{python:python 3 (keras 1.2.2)}\ndef _load_data(data, n_prev = 100):  \n    \"\"\"\n    data should be pd.DataFrame()\n    \"\"\"\n\n    docX, docY = [], []\n    for i in range(len(data)-n_prev):\n        docX.append(data.iloc[i:i+n_prev].as_matrix())\n        docY.append(data.iloc[i+n_prev].as_matrix())\n    alsX = np.array(docX)\n    alsY = np.array(docY)\n\n    return alsX, alsY\n\ndef train_test_split(df, test_size=0.1, n_prev = 100):  \n    \"\"\"\n    This just splits data to training and testing parts\n    \"\"\"\n    ntrn = round(len(df) * (1 - test_size))\n    ntrn = int(ntrn)\n    X_train, y_train = _load_data(df.iloc[0:ntrn], n_prev)\n    X_test, y_test = _load_data(df.iloc[ntrn:], n_prev)\n\n    return (X_train, y_train), (X_test, y_test)\n```\n\n\n```{python:python 3 (keras 1.2.2)}\n(X_sin_train, _), (X_sin_test, _) = train_test_split(df[[\"sin_t\"]], n_prev =100)  \n(X_cos_train, _), (X_cos_test, _) = train_test_split(df[[\"cos_t\"]], n_prev =100) \n(_, y_sincos_train), (_, y_sincos_test) = train_test_split(df[[\"sin+cos\"]], n_prev =100) \n```\n\n\n```{python:python 3 (keras 1.2.2)}\nX_sin_train.shape\n```\n\n\n\n\n    (3501, 100, 1)\n\n\n\n\n```{python:python 3 (keras 1.2.2)}\nX_sin_train[0][0]\n```\n\n\n\n\n    array([-0.04474869])\n\n\n\n\n```{python:python 3 (keras 1.2.2)}\nX_sin_train[0][1]\n```\n\n\n\n\n    array([ 0.03724986])\n\n\n\n\n```{python:python 3 (keras 1.2.2)}\ntest_size=0.1\nsteps_per_cycle * number_of_cycles * test_size\n```\n\n\n\n\n    400.0\n\n\n\n\n```{python:python 3 (keras 1.2.2)}\nsteps_per_cycle * number_of_cycles * (1 - test_size)\n```\n\n\n\n\n    3600.0\n\n\n\n\n```{python:python 3 (keras 1.2.2)}\nX_sin_test.shape\n```\n\n\n\n\n    (300, 100, 1)\n\n___\n\n##__\u5165\u529b\u5c64 \u306b input \u3059\u308b \u30c7\u30fc\u30bf \u306e shape__\n\n__data \u306e shape__ \u306f\u3001\n\n* (3501, 100, 2) \n\n__\u306b \u3059\u308c\u3070 \u826f\u3044\u3002__\n\n\n```{python:python 3 (keras 1.2.2)}\n# data \u306e shape \u3092 (3501, 100, 2) \u306b \u3059\u308c\u3070\u826f\u3044\u3002\n# (3501, 100, 2) = (sample_size, data_length, data_dimension) \n# \u30c7\u30fc\u30bf\u4ef6\u6570: 3501\n#\n# \u3042\u308b\uff11\u4ef6\u306e\u30c7\u30fc\u30bf\u306eshape: (100, 2) \u21e6 (sin, cos) \u304c 100\u6642\u70b9\u5206 # data \u306e shape \u3092 (3501, 100, 2) \u306b \u3059\u308c\u3070\u826f\u3044\u3002\n# \u30c7\u30fc\u30bf\u4ef6\u6570: 3501data = []\n```\n\n\n```{python:python 3 (keras 1.2.2)}\nX_sin_train[0].shape\n```\n\n\n\n\n    (100, 1)\n\n\n\n\n```{python:python 3 (keras 1.2.2)}\ndata = []\n\nfor i in range(X_sin_train.shape[0]):\n    data.append([[x_sin_elem, x_cos_elem] for x_sin_elem, x_cos_elem\n                                 in zip(X_sin_train[i], X_cos_train[i])])\n```\n\n\n```{python:python 3 (keras 1.2.2)}\ndata = np.array(data)\ndata.shape\n```\n\n\n\n\n    (3501, 100, 2, 1)\n\n\n\n\n```{python:python 3 (keras 1.2.2)}\ndata = data.reshape(3501, 100, 2)\ndata.shape\n```\n\n\n\n\n    (3501, 100, 2)\n\n___\n\n####__\u5404\u6642\u70b9 \u306e (sin, cos\uff09\u30da\u30a2 \u304c \u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3053\u3068 \u3092 \u78ba\u8a8d__\n\n\n```{python:python 3 (keras 1.2.2)}\nprint(data[0][0])\n```\n\n    [-0.04474869  0.99978703]\n\n\n\n```{python:python 3 (keras 1.2.2)}\nX_sin_train[0][0]\n```\n\n\n\n\n    array([-0.04474869])\n\n\n\n\n```{python:python 3 (keras 1.2.2)}\nX_cos_train[0][0]\n```\n\n\n\n\n    array([ 0.99978703])\n\n\n\n\n```{python:python 3 (keras 1.2.2)}\nprint(data[0][1])\n```\n\n    [ 0.03724986  0.99515409]\n\n\n\n```{python:python 3 (keras 1.2.2)}\nX_sin_train[0][1]\n```\n\n\n\n\n    array([ 0.03724986])\n\n\n\n\n```{python:python 3 (keras 1.2.2)}\nX_cos_train[0][1]\n```\n\n\n\n\n    array([ 0.99515409])\n\n\n\n\n```{python:python 3 (keras 1.2.2)}\nprint(data[0][0])\nprint(X_sin_train[0][0], X_cos_train[0][0])\n```\n\n    [-0.04474869  0.99978703]\n    [-0.04474869] [ 0.99978703]\n\n\n\n```{python:python 3 (keras 1.2.2)}\nprint(data[0][1])\nprint(X_sin_train[0][1], X_cos_train[0][1])\n```\n\n    [ 0.03724986  0.99515409]\n    [ 0.03724986] [ 0.99515409]\n\n\n\n```{python:python 3 (keras 1.2.2)}\nprint(data[0][99])\nprint(X_sin_train[0][99], X_cos_train[0][99])\n```\n\n    [ 0.99669789  0.06532641]\n    [ 0.99669789] [ 0.06532641]\n\n\n\n```{python:python 3 (keras 1.2.2)}\nprint(data[3500][99])\nprint(X_sin_train[3500][99], X_cos_train[3500][99])\n```\n\n    [-0.08190245  0.99713795]\n    [-0.08190245] [ 0.99713795]\n\n\n####__\u5404\u6642\u70b9 \u306e (sin, cos) \u306e \u7d44 \u304c \u51fa\u6765\u3066\u3044\u308b__\n\n\n___\n\n###__\u691c\u8a3c\uff08\u30c6\u30b9\u30c8\uff09\u7528 \u306e \u5165\u529b\u5c64Input\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8 \u3092 \u540c\u69d8 \u306b \u4f5c\u6210__\n\n```{python:python 3 (keras 1.2.2)}\ntest_data = []\nfor i in range(X_sin_test.shape[0]):\n    test_data.append([[x_sin_elem, x_cos_elem] for x_sin_elem, x_cos_elem\n                                 in zip(X_sin_test[i], X_cos_test[i])])\n```\n\n\n```{python:python 3 (keras 1.2.2)}\nlen(X_sin_test)\n```\n\n\n\n\n    300\n\n\n\n\n```{python:python 3 (keras 1.2.2)}\ntest_data_array = np.array(test_data)\ntest_data_array.shape\n```\n\n\n\n\n    (300, 100, 2, 1)\n\n\n\n\n```{python:python 3 (keras 1.2.2)}\ntest_data_array = test_data_array.reshape(300, 100, 2)\ntest_data_array.shape\n```\n\n\n\n\n    (300, 100, 2)\n\n\n\n\n```{python:python 3 (keras 1.2.2)}\ny_sincos_train.shape\n```\n\n\n\n\n    (3501, 1)\n\n\n###__\u691c\u8a3c\uff08\u30c6\u30b9\u30c8\uff09\u7528\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8 \u306e \u6b63\u89e3\u5024__\n\n__\u691c\u8a3c\u7528\u30c7\u30fc\u30bf \u3092 \u7528\u3044\u305f \u4e88\u6e2c\u5024 \u3068 \u5b9f\u6e2c\u5024\uff08\u6b63\u89e3\u5024\uff09 \u3092 \u30b0\u30e9\u30d5 \u306b \u91cd\u306d\u3066\u8aa4 \u5dee\u4e56\u96e2 \u3092 \u898b\u308b\u969b \u306b \u7528\u3044\u307e\u3059\u3002__\n\n```{python:python 3 (keras 1.2.2)}\ny_sincos_train.reshape(3501)\ny_sincos_train.shape\n```\n\n\n\n\n    (3501, 1)\n\n\n\n\n```{python:python 3 (keras 1.2.2)}\ny_sincos_train[0:10]\n```\n\n\n\n\n    array([[ 0.99397704],\n           [ 0.9353305 ],\n           [ 0.81836871],\n           [ 0.71484031],\n           [ 0.59447437],\n           [ 0.49463794],\n           [ 0.47903811],\n           [ 0.32167679],\n           [ 0.23870436],\n           [ 0.09244835]])\n\n___\n\n##__LSTM\u56de\u5e30\u4e88\u6e2c\u30e2\u30c7\u30eb \u306e \u5b66\u7fd2\u5b9f\u884c__\n\n\n```{python:python 3 (keras 1.2.2)}\nfrom keras.models import Sequential  \nfrom keras.layers.core import Dense, Activation  \nfrom keras.layers.recurrent import LSTM\n\nmodel = Sequential()  \nmodel.add(LSTM(300, batch_input_shape=(None, 100, 2), return_sequences=False))  \nmodel.add(Dense(1))  \nmodel.add(Activation(\"linear\"))  \nmodel.compile(loss=\"mean_squared_error\", optimizer=\"rmsprop\")\nmodel.fit(data, y_sincos_train, batch_size=600, nb_epoch=10, validation_split=0.05) \n```\n\n    Train on 3325 samples, validate on 176 samples\n    Epoch 1/10\n    3325/3325 [==============================] - 55s - loss: 0.3661 - val_loss: 0.1438\n    Epoch 2/10\n    3325/3325 [==============================] - 54s - loss: 0.0308 - val_loss: 0.0028\n    Epoch 3/10\n    3325/3325 [==============================] - 56s - loss: 0.0062 - val_loss: 0.0275\n    Epoch 4/10\n    3325/3325 [==============================] - 62s - loss: 0.0240 - val_loss: 0.0158\n    Epoch 5/10\n    3325/3325 [==============================] - 61s - loss: 0.0115 - val_loss: 0.0154\n    Epoch 6/10\n    3325/3325 [==============================] - 61s - loss: 0.0142 - val_loss: 0.0422\n    Epoch 7/10\n    3325/3325 [==============================] - 59s - loss: 0.0323 - val_loss: 0.0028\n    Epoch 8/10\n    3325/3325 [==============================] - 58s - loss: 0.0040 - val_loss: 0.0265\n    Epoch 9/10\n    3325/3325 [==============================] - 62s - loss: 0.0274 - val_loss: 0.0194\n    Epoch 10/10\n    3325/3325 [==============================] - 58s - loss: 0.0169 - val_loss: 0.0041\n\n\n\n\n\n    <keras.callbacks.History at 0x117170f98>\n\n\n###__\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb \u306e \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u6210__\n\n```{python:python 3 (keras 1.2.2)}\nmodel.summary()\n```\n\n    ____________________________________________________________________________________________________\n    Layer (type)                     Output Shape          Param #     Connected to                     \n    ====================================================================================================\n    lstm_2 (LSTM)                    (None, 300)           363600      lstm_input_2[0][0]               \n    ____________________________________________________________________________________________________\n    dense_2 (Dense)                  (None, 1)             301         lstm_2[0][0]                     \n    ____________________________________________________________________________________________________\n    activation_2 (Activation)        (None, 1)             0           dense_2[0][0]                    \n    ====================================================================================================\n    Total params: 363,901\n    Trainable params: 363,901\n    Non-trainable params: 0\n    ____________________________________________________________________________________________________\n\n\n\n```{python:python 3 (keras 1.2.2)}\nimport types\ntype(model)\n```\n\n\n\n\n    keras.models.Sequential\n\n\n##__\u691c\u8a3c\uff08\u30c6\u30b9\u30c8\uff09\u7528\u30c7\u30fc\u30bf \u3092 \u5165\u529b\u5c64 \u306b \u4e0e\u3048\u3066\u3001\u4e88\u6e2c\u5024 \u3092 \u51fa\u529b__\n\n```{python:python 3 (keras 1.2.2)}\npredicted = model.predict(test_data_array)  \n```\n\n\n```{python:python 3 (keras 1.2.2)}\nlen(predicted)\n```\n\n\n\n\n    300\n\n\n\n\n```{python:python 3 (keras 1.2.2)}\ntype(predicted)\n```\n\n\n\n\n    numpy.ndarray\n\n\n\n\n```{python:python 3 (keras 1.2.2)}\npredicted.shape\n```\n\n\n\n    (300, 1)\n\n\n##__\u63a8\u6e2c\u7d50\u679c \u3092 \u30b0\u30e9\u30d5\u63cf\u753b__\n\n* 100\u671f\u306e\u30c7\u30fc\u30bf \u3092 \u5143 \u306b\u3001101\u671f\u76ee \u3092 \u4e88\u6e2c\n* 101\u671f\u76ee\uff08\u63a8\u5b9a\u4e88\u6e2c\u5024\uff09\u3092\u5143\u306b\u3001102\u671f\u76ee\uff08\u63a8\u5b9a\u4e88\u6e2c\u5024\uff09 \u3092 \u63a8\u5b9a\n* 102\u671f\u76ee\uff08\u63a8\u5b9a\u4e88\u6e2c\u5024\uff09\u3092\u5143\u306b\u3001103\u671f\u76ee\uff08\u63a8\u5b9a\u4e88\u6e2c\u5024\uff09 \u3092 \u63a8\u5b9a\n...\n\n\u3068\u3001\u63a8\u5b9a\u5024 \u3092 \u5143 \u306b\u3001\u3055\u3089 \u306b \u6b21\u306e\u63a8\u5b9a\u5024 \u3092 \u4e88\u6e2c\uff08\u63a8\u5b9a\uff09\u3057\u3066\u3044\u304f\u3002\n\n\u3053\u306e\u305f\u3081\u3001\u5165\u529b\u30c7\u30fc\u30bf\uff08\u5b9f\u7e3e\u5024\uff09\u671f\u9593 \u304b\u3089 \u96e2\u308c\u308c\u3070\u96e2\u308c\u308b\u307b\u3069\u3001\u4e88\u6e2c\u8aa4\u5dee \u304c \u7d2f\u7a4d\u3057\u3066\u3044\u304f\u3002\n\n__Kalman filter \u306e \u3088\u3046 \u306b\u3001__\n__\u9010\u6b21\u3001\u76f4\u524d\u671f\u306e\u300c\u4e88\u6e2c\u63a8\u5b9a\u5024 \u3068 \u5b9f\u6e2c\u5024 \u3068\u306e \u4e56\u96e2\u8aa4\u5dee\u300d \u3092 \u60c5\u5831\u53d6\u5f97\u3057\u3066\u3001__\n__\u6b21\u306e\u4e88\u6e2c \u306b\u969b\u3057\u3066\u3001\u8aa4\u5dee\u4fee\u6b63\u3059\u308b\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u306e\u4ed5\u7d44\u307f \u304c \u306a\u3044\u3002__\n\n```{python:python 3 (keras 1.2.2)}\nfrom matplotlib import pyplot as plt\nplt.plot(predicted)\n```\n\n\n\n\n    [<matplotlib.lines.Line2D at 0x117c88390>]\n\n\n\n\n![output_44_1.png](https://qiita-image-store.s3.amazonaws.com/0/43487/ea706a29-88e8-f81e-6774-11edfdce7854.png)\n\n\n###__\u6b63\u89e3\u30c7\u30fc\u30bf\uff08\u5b9f\u7e3e\u5024\uff09 \u306e \u8ecc\u8de1__\n\n```{python:python 3 (keras 1.2.2)}\nlen(y_sincos_test)\n```\n\n\n\n\n    300\n\n\n\n\n```{python:python 3 (keras 1.2.2)}\nplt.plot(y_sincos_test)\n```\n\n\n\n\n    [<matplotlib.lines.Line2D at 0x117f6db38>]\n\n\n\n\n![output_46_1.png](https://qiita-image-store.s3.amazonaws.com/0/43487/73615f0d-36e2-8f65-12c0-82b3e80e179d.png)\n\n\n###__\u4e88\u6e2c\u5024 \u3068 \u5b9f\u6e2c\u5024 \u3092 \u8272\u5206\u3051\u63cf\u753b\u3000\u3057\u3066\u3001\u4e56\u96e2 \u3092 \u78ba\u8a8d__\n\n```{python:python 3 (keras 1.2.2)}\ndataf =  pd.DataFrame(predicted)\ndataf.columns = [\"predict\"]\ndataf[\"input\"] = y_sincos_test\ndataf.plot()\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x117cb0eb8>\n\n\n\n\n![output_47_1.png](https://qiita-image-store.s3.amazonaws.com/0/43487/ba1c94dc-031e-09c2-5dc2-a626fa083125.png)\n"}