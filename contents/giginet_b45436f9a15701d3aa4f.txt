{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\ncocos2d::Map\u306e\u30ad\u30fc\u306e\u5024\u306f\u3001\u4e3b\u306bstd::string\u306a\u3069\u3092\u4f7f\u3046\u3053\u3068\u304c\u60f3\u5b9a\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u304c\u3001\u72ec\u81ea\u306b\u5b9a\u7fa9\u3057\u305f\u308a\u3001\u65e2\u5b58\u306e\u69cb\u9020\u4f53\u3092\u4f7f\u7528\u3057\u305f\u3044\u5834\u5408\u304c\u3042\u3063\u305f\u308a\u3057\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u3001cocos2d::Vec2\u3092\u30ad\u30fc\u3068\u3057\u3066\u3001\u6307\u5b9a\u3057\u305f\u5834\u6240\u306b\u3042\u308bcocos2d::Sprite\u3092\u53d6\u308a\u51fa\u3057\u305f\u3044\u3002\u306a\u3069\u3068\u3044\u3046Map\u3092\u4f5c\u308a\u305f\u3044\u3068\u3044\u3046\u5834\u5408\u3002\n\nerror.cpp\n// Vec2\u3092\u30ad\u30fc\u3001Sprite\u3092\u5024\u3068\u3059\u308bMap\u3092\u5b9a\u7fa9\u3059\u308b\ntypedef cocos2d::Map<cocos2d::Vec2, cocos2d::Sprite *> DefinedMap;\n// \u30e1\u30f3\u30d0\u5909\u6570\u306b\u3059\u308b\nCC_SYNTHESIZE_READONLY(DefinedMap, _map, Map);    \n\n\n\u3053\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u3082\u4e0a\u624b\u304f\u3044\u304d\u307e\u305b\u3093\u3002\u3053\u308c\u306f\u3001cocos2d::Vec2\u3092\u540c\u4e00\u306e\u7269\u3068\u6bd4\u8f03\u3059\u308b\u95a2\u6570\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u3002\n\u3042\u308b\u578b\u3092\u30ad\u30fc\u3068\u3057\u3066\u4f7f\u3046\u305f\u3081\u306b\u306f\u3001\u5024\u304b\u3089\u56fa\u6709\u306e\u30cf\u30c3\u30b7\u30e5\u3092\u751f\u6210\u3059\u308b\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u3068\u30012\u3064\u306e\u5024\u304c\u540c\u4e00\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u6bd4\u8f03\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u3042\u3052\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\nstd::unordered_map\u306e\u5834\u5408\n\u524d\u63d0\u3068\u3057\u3066cocos2d::Map\u306fC++11\u304b\u3089\u8ffd\u52a0\u3055\u308c\u305fstd::unordered_map\u306e\u30e9\u30c3\u30d1\u30fc\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nstd::unordered_map\u3067\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067Hash, Pred\u3068\u3044\u3046\u5024\u304c\u53d6\u308c\u3001\u3053\u308c\u3089\u3092\u6e21\u3059\u3053\u3068\u3067\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u3068\u6bd4\u8f03\u95a2\u6570\u306e\u6319\u52d5\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nunordered_map (C++11) - cpprefjp - C++ Library Reference\n\u305d\u306e\u305f\u3081\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306bVec2Hash, Vec2Pred\u3068\u3044\u3046\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3057\u3066\u3001unordered_map\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u3057\u3066\u6e21\u305b\u3070OK\nclass Vec2Hash\n{\npublic:\n    size_t operator () (const cocos2d::Vec2& key) const\n    {\n        // Vec2\u304b\u3089\u56fa\u6709\u306e\u6587\u5b57\u5217\u3092\u4f5c\u6210\u3059\u308b\n        auto str = cocos2d::StringUtils::format(\"%f,%f\", key.x, key.y);\n        // \u3053\u306e\u6587\u5b57\u5217\u3092\u30cf\u30c3\u30b7\u30e5\u5316\u3059\u308b\n        return std::hash<std::string>()(str);\n    }\n};\n\nclass Vec2Pred\n{\npublic:\n    bool operator () (const cocos2d::Vec2& lh, const cocos2d::Vec2& rh) const\n    {\n        // 2\u3064\u306eVec2\u304c\u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u3092\u8fd4\u3059\n        return lh == rh;\n    }\n};\n\ntypedef std::unordered_map<cocos2d::Vec2, cocos2d::Sprite *, Vec2Hash, Vec2Pred> DefinedMap;\n\n\u3057\u304b\u3057\u3001cocos2d::Map\u3067\u306f\u3001\u3053\u308c\u3089\u306e\u5024\u3092\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u305a\u3001\u3053\u306e\u65b9\u6cd5\u306f\u5229\u7528\u3067\u304d\u307e\u305b\u3093\u3002\n\ncocos2d::Map\u306e\u5834\u5408\n\u524d\u8ff0\u306eHash\u3068Pred\u306f\u3001\u4f55\u3082\u6e21\u3055\u306a\u3044\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u6319\u52d5\u306e\u5834\u5408\u3001\u305d\u308c\u305e\u308cstd::hash<K>(K key), std::to_equal<K>(K lh, K rh)\u306e\u5b9f\u884c\u7d50\u679c\u304c\u5229\u7528\u3055\u308c\u308b\u305f\u3081\u3001\u3053\u308c\u3089\u3092\u5b9a\u7fa9\u3057\u3066\u3042\u3052\u308c\u3070cocos2d::Map\u3067\u3082\u72ec\u81ea\u306e\u578b\u3092\u30ad\u30fc\u306b\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nhash (C++11) - cpprefjp - C++ Library Reference\n\u6bd4\u8f03\u6f14\u7b97\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 - cpprefjp - C++ Library Reference\nnamespace std\n{\n    template <>\n    struct hash<cocos2d::Vec2>\n    {\n        std::size_t operator () (const cocos2d::Vec2& key) const\n        {\n            // Vec2\u304b\u3089\u56fa\u6709\u306e\u6587\u5b57\u5217\u3092\u4f5c\u6210\u3059\u308b\n            auto str = cocos2d::StringUtils::format(\"%f,%f\", key.x, key.y);\n            // \u3053\u306e\u6587\u5b57\u5217\u3092\u30cf\u30c3\u30b7\u30e5\u5316\u3059\u308b\n            return std::hash<std::string>()(str);\n        }\n    };\n\n    template<>\n    struct equal_to<cocos2d::Vec2>\n    {\n        bool operator () (const cocos2d::Vec2& lh, const cocos2d::Vec2& rh) const\n        {\n            // 2\u3064\u306eVec2\u304c\u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u3092\u8fd4\u3059\n            return lh == rh;\n        }\n    };\n}\n\ntypedef cocos2d::Map<cocos2d::Vec2, cocos2d::Sprite *> DefinedMap;\n\n\u3053\u306e\u3088\u3046\u306b\u3001std::hash<cocos2d::Vec2>\u3068std::equal_to<cocos2d::Vec2>\u3092\u5b9a\u7fa9\u3057\u3066\u3042\u3052\u308b\u3002\nstd\u540d\u524d\u7a7a\u9593\u3092\u5909\u66f4\u3059\u308b\u306e\u306f\u6c5a\u3044\u611f\u3058\u304c\u3059\u308b\u306e\u3067\u3001\u3082\u3063\u3068\u826f\u3044\u65b9\u6cd5\u304c\u3042\u308c\u3070\u662f\u975e\u3068\u3082\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n# \u6982\u8981\n\ncocos2d::Map\u306e\u30ad\u30fc\u306e\u5024\u306f\u3001\u4e3b\u306b`std::string`\u306a\u3069\u3092\u4f7f\u3046\u3053\u3068\u304c\u60f3\u5b9a\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u304c\u3001\u72ec\u81ea\u306b\u5b9a\u7fa9\u3057\u305f\u308a\u3001\u65e2\u5b58\u306e\u69cb\u9020\u4f53\u3092\u4f7f\u7528\u3057\u305f\u3044\u5834\u5408\u304c\u3042\u3063\u305f\u308a\u3057\u307e\u3059\u3002\n\n\u4f8b\u3048\u3070\u3001`cocos2d::Vec2`\u3092\u30ad\u30fc\u3068\u3057\u3066\u3001\u6307\u5b9a\u3057\u305f\u5834\u6240\u306b\u3042\u308b`cocos2d::Sprite`\u3092\u53d6\u308a\u51fa\u3057\u305f\u3044\u3002\u306a\u3069\u3068\u3044\u3046Map\u3092\u4f5c\u308a\u305f\u3044\u3068\u3044\u3046\u5834\u5408\u3002\n\n```cpp:error.cpp\n// Vec2\u3092\u30ad\u30fc\u3001Sprite\u3092\u5024\u3068\u3059\u308bMap\u3092\u5b9a\u7fa9\u3059\u308b\ntypedef cocos2d::Map<cocos2d::Vec2, cocos2d::Sprite *> DefinedMap;\n// \u30e1\u30f3\u30d0\u5909\u6570\u306b\u3059\u308b\nCC_SYNTHESIZE_READONLY(DefinedMap, _map, Map);    \n```\n\n\u3053\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u3082\u4e0a\u624b\u304f\u3044\u304d\u307e\u305b\u3093\u3002\u3053\u308c\u306f\u3001`cocos2d::Vec2`\u3092\u540c\u4e00\u306e\u7269\u3068\u6bd4\u8f03\u3059\u308b\u95a2\u6570\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u3002\n\n\u3042\u308b\u578b\u3092\u30ad\u30fc\u3068\u3057\u3066\u4f7f\u3046\u305f\u3081\u306b\u306f\u3001\u5024\u304b\u3089\u56fa\u6709\u306e\u30cf\u30c3\u30b7\u30e5\u3092\u751f\u6210\u3059\u308b\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u3068\u30012\u3064\u306e\u5024\u304c\u540c\u4e00\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u6bd4\u8f03\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u3042\u3052\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n# std::unordered_map\u306e\u5834\u5408\n\n\u524d\u63d0\u3068\u3057\u3066`cocos2d::Map`\u306fC++11\u304b\u3089\u8ffd\u52a0\u3055\u308c\u305f`std::unordered_map`\u306e\u30e9\u30c3\u30d1\u30fc\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n`std::unordered_map`\u3067\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067`Hash`, `Pred`\u3068\u3044\u3046\u5024\u304c\u53d6\u308c\u3001\u3053\u308c\u3089\u3092\u6e21\u3059\u3053\u3068\u3067\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u3068\u6bd4\u8f03\u95a2\u6570\u306e\u6319\u52d5\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n[unordered_map (C++11) - cpprefjp - C++ Library Reference](https://sites.google.com/site/cpprefjp/reference/unordered_map/unordered_map)\n\n\u305d\u306e\u305f\u3081\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b`Vec2Hash`, `Vec2Pred`\u3068\u3044\u3046\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3057\u3066\u3001`unordered_map`\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u3057\u3066\u6e21\u305b\u3070OK\n\n```cpp\nclass Vec2Hash\n{\npublic:\n    size_t operator () (const cocos2d::Vec2& key) const\n    {\n        // Vec2\u304b\u3089\u56fa\u6709\u306e\u6587\u5b57\u5217\u3092\u4f5c\u6210\u3059\u308b\n        auto str = cocos2d::StringUtils::format(\"%f,%f\", key.x, key.y);\n        // \u3053\u306e\u6587\u5b57\u5217\u3092\u30cf\u30c3\u30b7\u30e5\u5316\u3059\u308b\n        return std::hash<std::string>()(str);\n    }\n};\n\nclass Vec2Pred\n{\npublic:\n    bool operator () (const cocos2d::Vec2& lh, const cocos2d::Vec2& rh) const\n    {\n\t\t// 2\u3064\u306eVec2\u304c\u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u3092\u8fd4\u3059\n        return lh == rh;\n    }\n};\n\ntypedef std::unordered_map<cocos2d::Vec2, cocos2d::Sprite *, Vec2Hash, Vec2Pred> DefinedMap;\n```\n\n\u3057\u304b\u3057\u3001`cocos2d::Map`\u3067\u306f\u3001\u3053\u308c\u3089\u306e\u5024\u3092\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u305a\u3001\u3053\u306e\u65b9\u6cd5\u306f\u5229\u7528\u3067\u304d\u307e\u305b\u3093\u3002\n\n# cocos2d::Map\u306e\u5834\u5408\n\n\u524d\u8ff0\u306e`Hash`\u3068`Pred`\u306f\u3001\u4f55\u3082\u6e21\u3055\u306a\u3044\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u6319\u52d5\u306e\u5834\u5408\u3001\u305d\u308c\u305e\u308c`std::hash<K>(K key)`, `std::to_equal<K>(K lh, K rh)`\u306e\u5b9f\u884c\u7d50\u679c\u304c\u5229\u7528\u3055\u308c\u308b\u305f\u3081\u3001\u3053\u308c\u3089\u3092\u5b9a\u7fa9\u3057\u3066\u3042\u3052\u308c\u3070`cocos2d::Map`\u3067\u3082\u72ec\u81ea\u306e\u578b\u3092\u30ad\u30fc\u306b\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n[hash (C++11) - cpprefjp - C++ Library Reference](https://sites.google.com/site/cpprefjp/reference/functional/hash)\n\n[\u6bd4\u8f03\u6f14\u7b97\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 - cpprefjp - C++ Library Reference](https://sites.google.com/site/cpprefjp/reference/functional/comparisons)\n\n```cpp\nnamespace std\n{\n\ttemplate <>\n\tstruct hash<cocos2d::Vec2>\n    {\n        std::size_t operator () (const cocos2d::Vec2& key) const\n        {\n            // Vec2\u304b\u3089\u56fa\u6709\u306e\u6587\u5b57\u5217\u3092\u4f5c\u6210\u3059\u308b\n            auto str = cocos2d::StringUtils::format(\"%f,%f\", key.x, key.y);\n            // \u3053\u306e\u6587\u5b57\u5217\u3092\u30cf\u30c3\u30b7\u30e5\u5316\u3059\u308b\n            return std::hash<std::string>()(str);\n        }\n    };\n    \n    template<>\n    struct equal_to<cocos2d::Vec2>\n    {\n        bool operator () (const cocos2d::Vec2& lh, const cocos2d::Vec2& rh) const\n        {\n            // 2\u3064\u306eVec2\u304c\u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u3092\u8fd4\u3059\n            return lh == rh;\n        }\n    };\n}\n\ntypedef cocos2d::Map<cocos2d::Vec2, cocos2d::Sprite *> DefinedMap;\n```\n\n\u3053\u306e\u3088\u3046\u306b\u3001`std::hash<cocos2d::Vec2>`\u3068`std::equal_to<cocos2d::Vec2>`\u3092\u5b9a\u7fa9\u3057\u3066\u3042\u3052\u308b\u3002\n\n`std`\u540d\u524d\u7a7a\u9593\u3092\u5909\u66f4\u3059\u308b\u306e\u306f\u6c5a\u3044\u611f\u3058\u304c\u3059\u308b\u306e\u3067\u3001\u3082\u3063\u3068\u826f\u3044\u65b9\u6cd5\u304c\u3042\u308c\u3070\u662f\u975e\u3068\u3082\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n", "tags": ["C++", "cocos2d-x"]}