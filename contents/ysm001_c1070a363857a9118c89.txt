{"context": " More than 1 year has passed since last update.Mocha\u3092\u4f7f\u3063\u3066Bluebird\u3092\u5229\u7528\u3057\u305f\u30b3\u30fc\u30c9\u306e\u30c6\u30b9\u30c8\u3092\u884c\u304a\u3046\u3068\u3057\u305f\u969b\u3001\u6b63\u3057\u304f\u30c6\u30b9\u30c8\u7d50\u679c\u304c\u5f97\u3089\u308c\u306a\u3044\u5834\u5408\u304c\u3042\u3063\u305f\u306e\u3067\u539f\u56e0\u3068\u5bfe\u7b56\u3092\u30e1\u30e2\u3002\n\u307e\u305a\u3001\u30d0\u30b0\u3092\u542b\u3093\u3060\u95a2\u6570\u3092\u7528\u610f\u3059\u308b\u3002\n\npromise-add.js\nvar Promise = require('bluebird')\n\nmodule.exports = function promiseAdd(a, b) { // \uff12\u3064\u306e\u5024\u3092\u8db3\u3057\u7b97\u3059\u308b\u95a2\u6570\n  return new Promise(function(resolve, reject) {\n    resolve(a + b + 1) // \u6b63\u3057\u3044\u7d50\u679c\u306b+1\u3055\u308c\u3066\u3057\u307e\u3046\u30d0\u30b0\uff01\n  })\n}\n\n\n\u6b21\u306b\u3001\u4e0a\u8a18\u306e\u95a2\u6570\u306e\u30c6\u30b9\u30c8\u3092\u7528\u610f\u3059\u308b\u3002\n\npromise-add-test.js\nvar assert = require('assert')\nvar promiseAdd = require('./promise-add.js')\n\ndescribe('promise-add', function() {\n  it('promiseAdd(1, 1) == 2', function(done) { // promiseAdd(1, 1)\u306e\u7d50\u679c\u304c2\u3067\u3042\u308b\u3053\u3068\u3092\u30c6\u30b9\u30c8\u3059\u308b\n    promiseAdd(1, 1).then(function(result) {\n      assert.equal(result, 2) // result == 3\u306a\u306e\u3067\u3001\u30c6\u30b9\u30c8\u5931\u6557\uff01\n      done()\n    })\n  })\n})\n\n\n\u7d50\u679c\u306f\u3001timeout\u3068\u306a\u308a\u671f\u5f85\u3057\u3066\u3044\u305f\u7d50\u679c(AssertionError)\u304c\u5f97\u3089\u308c\u306a\u3044\u3002\nError: timeout of 2000ms exceeded. Ensure the done() callback is being called in this test.\n\n\u3055\u3089\u306b\u3001\u4f8b\u5916\u3068\u3057\u3066\u300cUmhandled rejection\u300d\u304c\u6295\u3052\u3089\u308c\u3066\u3057\u307e\u3046\u3002\nUnhandled rejection AssertionError: 3 == 2\n    at promise-add-test.js:7:14\n    at tryCatcher (node_modules/bluebird/js/main/util.js:26:23)\n    at Promise._settlePromiseFromHandler (node_modules/bluebird/js/main/promise.js:503:31)\n    at Promise._settlePromiseAt (node_modules/bluebird/js/main/promise.js:577:18)\n    at Promise._settlePromiseAtPostResolution (node_modules/bluebird/js/main/promise.js:244:10)\n    at Async._drainQueue (node_modules/bluebird/js/main/async.js:128:12)\n    at Async._drainQueues (node_modules/bluebird/js/main/async.js:133:10)\n    at Immediate.Async.drainQueues [as _onImmediate] (node_modules/bluebird/js/main/async.js:15:14)\n    at processImmediate [as _immediateCallback] (timers.js:358:17)\n    1) 1 + 1 = 2\n\n\n\u539f\u56e0\nbluebird\u306ePromise\u306f\u3001\u4f8b\u5916\u304c\u6295\u3052\u3089\u308c\u305f\u308areject\u95a2\u6570\u304c\u547c\u3070\u308c\u305f\u308a\u3059\u308b\u3068catch handler\u306b\u98db\u3076\u4ed5\u7d44\u307f\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u305d\u306e\u305f\u3081\u3001assert\u3092\u547c\u3073\u51fa\u3057\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u305f\u6642\u70b9\u3067catch handler\u306b\u98db\u307c\u3046\u3068\u3059\u308b\u305f\u3081\u3001\u5f8c\u7d9a\u306edone\u304c\u5b9f\u884c\u3055\u308c\u305a\u306btimeout\u3068\u306a\u308b\u3002\n\u3055\u3089\u306b\u3001catch handler\u3092\u8a18\u8ff0\u3057\u3066\u3044\u306a\u3044\u305f\u3081\u300cUnhandled rejection\u300d\u304c\u8868\u793a\u3055\u308c\u3066\u3057\u307e\u3046\u3002\n\npromise-add-test.js\nvar assert = require('assert')\nvar promiseAdd = require('./promise-add.js')\n\ndescribe('promise-add', function() {\n  it('promiseAdd(1, 1) == 2', function(done) { // promiseAdd(1, 1)\u306e\u7d50\u679c\u304c2\u3067\u3042\u308b\u3053\u3068\u3092\u30c6\u30b9\u30c8\u3059\u308b\n    promiseAdd(1, 1).then(function(result) {\n      assert.equal(result, 2) // result == 3\u306a\u306e\u3067\u3001\u30c6\u30b9\u30c8\u5931\u6557\uff01 -> catch handler\u3078\u98db\u3076\n      done() // !!!\u547c\u3070\u308c\u306a\u3044!!!\n    })\n  })\n})\n\n\n\n\u5bfe\u7b56\nassert\u306b\u3088\u3063\u3066\u6295\u3052\u3089\u308c\u305f\u30a8\u30e9\u30fc\u306f\u5f8c\u7d9a\u306ecatch handler\u3067\u53d7\u3051\u53d6\u308c\u308b\u306e\u3067\u3001catch handler\u306e\u4e2d\u3067done\u3092\u547c\u3073\u51fa\u3059\u3088\u3046\u306b\u5909\u66f4\u3059\u308b\u3002\n\npromise-add-test.js\nvar assert = require('assert')\nvar promiseAdd = require('./promise-add.js')\n\ndescribe('promise-add', function() {\n  it('promiseAdd(1, 1) == 2', function(done) { // promiseAdd(1, 1)\u306e\u7d50\u679c\u304c2\u3067\u3042\u308b\u3053\u3068\u3092\u30c6\u30b9\u30c8\u3059\u308b\n    promiseAdd(1, 1).then(function(result) {\n      assert.equal(result, 2) // result == 3\u306a\u306e\u3067\u3001\u30c6\u30b9\u30c8\u5931\u6557\uff01 -> catch handler\u3078\u98db\u3076\n      done() // !!!\u547c\u3070\u308c\u306a\u3044!!!\n    }).catch(function (e) { // catch handler\u3092\u8ffd\u52a0\n      done(e) // \u547c\u3070\u308c\u308b\n    })\n  })\n})\n\n\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001timeout\u306b\u306a\u3089\u305a\u304d\u3061\u3093\u3068AssertionError\u304c\u8868\u793a\u3055\u308c\u308b\u3002\nAssertionError: 3 == 2\n+ expected - actual\n\n-3\n+2\n\n\nMocha\u3092\u4f7f\u3063\u3066Bluebird\u3092\u5229\u7528\u3057\u305f\u30b3\u30fc\u30c9\u306e\u30c6\u30b9\u30c8\u3092\u884c\u304a\u3046\u3068\u3057\u305f\u969b\u3001\u6b63\u3057\u304f\u30c6\u30b9\u30c8\u7d50\u679c\u304c\u5f97\u3089\u308c\u306a\u3044\u5834\u5408\u304c\u3042\u3063\u305f\u306e\u3067\u539f\u56e0\u3068\u5bfe\u7b56\u3092\u30e1\u30e2\u3002\n\n\u307e\u305a\u3001\u30d0\u30b0\u3092\u542b\u3093\u3060\u95a2\u6570\u3092\u7528\u610f\u3059\u308b\u3002\n\n```promise-add.js\nvar Promise = require('bluebird')\n\nmodule.exports = function promiseAdd(a, b) { // \uff12\u3064\u306e\u5024\u3092\u8db3\u3057\u7b97\u3059\u308b\u95a2\u6570\n  return new Promise(function(resolve, reject) {\n    resolve(a + b + 1) // \u6b63\u3057\u3044\u7d50\u679c\u306b+1\u3055\u308c\u3066\u3057\u307e\u3046\u30d0\u30b0\uff01\n  })\n}\n```\n\n\u6b21\u306b\u3001\u4e0a\u8a18\u306e\u95a2\u6570\u306e\u30c6\u30b9\u30c8\u3092\u7528\u610f\u3059\u308b\u3002\n\n```promise-add-test.js\nvar assert = require('assert')\nvar promiseAdd = require('./promise-add.js')\n\ndescribe('promise-add', function() {\n  it('promiseAdd(1, 1) == 2', function(done) { // promiseAdd(1, 1)\u306e\u7d50\u679c\u304c2\u3067\u3042\u308b\u3053\u3068\u3092\u30c6\u30b9\u30c8\u3059\u308b\n    promiseAdd(1, 1).then(function(result) {\n      assert.equal(result, 2) // result == 3\u306a\u306e\u3067\u3001\u30c6\u30b9\u30c8\u5931\u6557\uff01\n      done()\n    })\n  })\n})\n```\n\n\u7d50\u679c\u306f\u3001timeout\u3068\u306a\u308a\u671f\u5f85\u3057\u3066\u3044\u305f\u7d50\u679c(AssertionError)\u304c\u5f97\u3089\u308c\u306a\u3044\u3002\n\n```\nError: timeout of 2000ms exceeded. Ensure the done() callback is being called in this test.\n```\n\n\u3055\u3089\u306b\u3001\u4f8b\u5916\u3068\u3057\u3066\u300cUmhandled rejection\u300d\u304c\u6295\u3052\u3089\u308c\u3066\u3057\u307e\u3046\u3002\n\n```\nUnhandled rejection AssertionError: 3 == 2\n    at promise-add-test.js:7:14\n    at tryCatcher (node_modules/bluebird/js/main/util.js:26:23)\n    at Promise._settlePromiseFromHandler (node_modules/bluebird/js/main/promise.js:503:31)\n    at Promise._settlePromiseAt (node_modules/bluebird/js/main/promise.js:577:18)\n    at Promise._settlePromiseAtPostResolution (node_modules/bluebird/js/main/promise.js:244:10)\n    at Async._drainQueue (node_modules/bluebird/js/main/async.js:128:12)\n    at Async._drainQueues (node_modules/bluebird/js/main/async.js:133:10)\n    at Immediate.Async.drainQueues [as _onImmediate] (node_modules/bluebird/js/main/async.js:15:14)\n    at processImmediate [as _immediateCallback] (timers.js:358:17)\n    1) 1 + 1 = 2\n```\n\n## \u539f\u56e0\nbluebird\u306ePromise\u306f\u3001\u4f8b\u5916\u304c\u6295\u3052\u3089\u308c\u305f\u308areject\u95a2\u6570\u304c\u547c\u3070\u308c\u305f\u308a\u3059\u308b\u3068catch handler\u306b\u98db\u3076\u4ed5\u7d44\u307f\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u305d\u306e\u305f\u3081\u3001assert\u3092\u547c\u3073\u51fa\u3057\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u305f\u6642\u70b9\u3067catch handler\u306b\u98db\u307c\u3046\u3068\u3059\u308b\u305f\u3081\u3001\u5f8c\u7d9a\u306edone\u304c\u5b9f\u884c\u3055\u308c\u305a\u306btimeout\u3068\u306a\u308b\u3002\n\u3055\u3089\u306b\u3001catch handler\u3092\u8a18\u8ff0\u3057\u3066\u3044\u306a\u3044\u305f\u3081\u300cUnhandled rejection\u300d\u304c\u8868\u793a\u3055\u308c\u3066\u3057\u307e\u3046\u3002\n\n```promise-add-test.js\nvar assert = require('assert')\nvar promiseAdd = require('./promise-add.js')\n\ndescribe('promise-add', function() {\n  it('promiseAdd(1, 1) == 2', function(done) { // promiseAdd(1, 1)\u306e\u7d50\u679c\u304c2\u3067\u3042\u308b\u3053\u3068\u3092\u30c6\u30b9\u30c8\u3059\u308b\n    promiseAdd(1, 1).then(function(result) {\n      assert.equal(result, 2) // result == 3\u306a\u306e\u3067\u3001\u30c6\u30b9\u30c8\u5931\u6557\uff01 -> catch handler\u3078\u98db\u3076\n      done() // !!!\u547c\u3070\u308c\u306a\u3044!!!\n    })\n  })\n})\n```\n\n## \u5bfe\u7b56\nassert\u306b\u3088\u3063\u3066\u6295\u3052\u3089\u308c\u305f\u30a8\u30e9\u30fc\u306f\u5f8c\u7d9a\u306ecatch handler\u3067\u53d7\u3051\u53d6\u308c\u308b\u306e\u3067\u3001catch handler\u306e\u4e2d\u3067done\u3092\u547c\u3073\u51fa\u3059\u3088\u3046\u306b\u5909\u66f4\u3059\u308b\u3002\n\n```promise-add-test.js\nvar assert = require('assert')\nvar promiseAdd = require('./promise-add.js')\n\ndescribe('promise-add', function() {\n  it('promiseAdd(1, 1) == 2', function(done) { // promiseAdd(1, 1)\u306e\u7d50\u679c\u304c2\u3067\u3042\u308b\u3053\u3068\u3092\u30c6\u30b9\u30c8\u3059\u308b\n    promiseAdd(1, 1).then(function(result) {\n      assert.equal(result, 2) // result == 3\u306a\u306e\u3067\u3001\u30c6\u30b9\u30c8\u5931\u6557\uff01 -> catch handler\u3078\u98db\u3076\n      done() // !!!\u547c\u3070\u308c\u306a\u3044!!!\n    }).catch(function (e) { // catch handler\u3092\u8ffd\u52a0\n      done(e) // \u547c\u3070\u308c\u308b\n    })\n  })\n})\n```\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001timeout\u306b\u306a\u3089\u305a\u304d\u3061\u3093\u3068AssertionError\u304c\u8868\u793a\u3055\u308c\u308b\u3002\n\n```\nAssertionError: 3 == 2\n+ expected - actual\n\n-3\n+2\n```\n", "tags": ["mocha", "bluebird", "Node.js"]}