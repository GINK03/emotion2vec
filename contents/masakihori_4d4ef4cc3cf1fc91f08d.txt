{"tags": ["Swift", "Swift3.0"], "context": "\u6c4e\u7528\u7684\u306a\u30d0\u30a4\u30ca\u30ea\u30b5\u30fc\u30c1\u3092\u5b9f\u88c5\u3057\u3066\u898b\u305f\u3002\n\n\u57fa\u672c\u5b9f\u88c5\n\u307e\u305a\u672c\u4f53\nextension MutableCollection where IndexDistance == Int {\n    private func bsearch(min: Int, max: Int, comparator: (Iterator.Element) -> ComparisonResult) -> Iterator.Element? {\n        if max < min { return nil }\n        let current = min + (max - min) / 2\n        let v = self[self.index(self.startIndex, offsetBy: current)]\n        let compRes = comparator(v)\n\n        if compRes == .orderedSame { return v }\n\n        let newMin = (compRes == .orderedAscending) ? current + 1 : min\n        let newMax = (compRes == .orderedDescending) ? current - 1 : max\n        return bsearch(min: newMin, max: newMax, comparator: comparator)\n    }\n\n    func binarySearch(comparator: (Iterator.Element) -> ComparisonResult) -> Iterator.Element? {\n        return bsearch(min: 0, max: self.count - 1, comparator: comparator)\n    }\n}\n\nArray\u3067\u3044\u3044\u3068\u601d\u3046\u3093\u3060\u3051\u3069\u3001\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u306e\u3067sorted()\u3092\u6301\u3063\u3066\u308bMutableCollection\u3092\u62e1\u5f35\u3057\u307e\u3057\u305f\u3002 \n\u9593\u9055\u3048\u3066\u308b\u5834\u5408\u306f\u6307\u6458\u3057\u3066\u304f\u3060\u3055\u308b\u3068\u3042\u308a\u304c\u305f\u3044\u3067\u3059\u3002\n\uff08\u3044\u3064\u304b\u5b9f\u88c5\u3055\u308c\u308b\u306f\u305a\u306e\u672b\u5c3e\u518d\u5e30\u306e\u6700\u9069\u5316\u306e\u305f\u3081\u306b\u672b\u5c3e\u518d\u5e30\u306b\u3057\u3066\u3044\u307e\u3059\uff09\n\u4f7f\u7528\u6cd5\u306f\nlet original = [8, 5, 9, 10, 66, 4, 3, 6, 12, 13, 16, 27, 58, 3]\nlet sortedArray = original.sorted()\nlet target = 5\nsortedArray.binarySearch {\n    if $0 == target { return .orderedSame }\n    if $0 < target { return .orderedAscending }\n    return .orderedDescending\n} // 5\n\n\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u88dc\u52a9\u7684\u5b9f\u88c5\n\u30af\u30ed\u30fc\u30b8\u30e3\u306e\u4e2d\u304c\u30b4\u30c1\u30e3\u30b4\u30c1\u30e3\u3057\u3066\u3044\u3066\u3059\u3054\u304f\u308f\u304b\u308a\u306b\u304f\u3044\u3067\u3059\u3002\n\u306a\u306e\u3067ComparisonResult\u3092\u8fd4\u3059\u6f14\u7b97\u5b50\u3092\u4f5c\u3063\u3061\u3083\u3044\u307e\u3059\u3002\ninfix operator ==? : ComparisonPrecedence\nfunc ==? <T: Comparable> (lhs: T, rhs: T) -> ComparisonResult {\n    if lhs == rhs { return .orderedSame }\n    if lhs < rhs { return .orderedAscending }\n    return .orderedDescending\n}\n\n\u3053\u3053\u3067\u306f==?\u3092\u4f7f\u3044\u307e\u3057\u305f\u304c\u304a\u597d\u307f\u3067\u3002\n\u6bd4\u8f03\u5bfe\u8c61\u304cComparable\u306b\u6e96\u62e0\u3057\u3066\u3044\u308c\u3070\u4f7f\u3048\u307e\u3059\u3002\n\u3053\u308c\u3092\u4f7f\u3046\u3068\u5148\u306e\u30d0\u30a4\u30ca\u30ea\u30b5\u30fc\u30c1\u306f\u3053\u3046\u306a\u308a\u307e\u3059\u3002\nsortedArray.binarySearch { $0 ==? target }  // 5\n\n\u4e00\u6c17\u306b\u898b\u3084\u3059\u304f\u308f\u304b\u308a\u3084\u3059\u304f\u306a\u308a\u307e\u3057\u305f\u3002\u6f14\u7b97\u5b50\u5049\u5927\u3067\u3059\u3002\n\n\u88dc\u8db3\n\u6bd4\u8f03\u90e8\u5206\u304c\u5916\u90e8\u306b\u51fa\u3066\u3044\u308b\u306e\u3067\u8981\u7d20\u81ea\u4f53\u304cComparable\u306b\u6e96\u62e0\u3057\u3066\u3044\u306a\u304f\u3066\u3082\u4f7f\u3048\u307e\u3059\u3002\nstruct Member {\n    let id: Int\n    let name: String\n}\n\nlet members = sortedArray.map { Member(id: $0, name: \"\") }\n\nmembers.binarySearch { $0.id ==? target }   // Member(id: 5, name: \"\")\n\n\u6bd4\u8f03\u5bfe\u8c61\u304cInt\u306e\u305f\u3081\u3001\u69cb\u9020\u4f53Member\u81ea\u4f53\u3092Comparable\u306b\u6e96\u62e0\u3055\u305b\u308b\u3053\u3068\u306a\u304f\u30d0\u30a4\u30ca\u30ea\u30b5\u30fc\u30c1\u304c\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\u6c4e\u7528\u7684\u306a\u30d0\u30a4\u30ca\u30ea\u30b5\u30fc\u30c1\u3092\u5b9f\u88c5\u3057\u3066\u898b\u305f\u3002\n\n## \u57fa\u672c\u5b9f\u88c5\n\u307e\u305a\u672c\u4f53\n\n```swift\nextension MutableCollection where IndexDistance == Int {\n    private func bsearch(min: Int, max: Int, comparator: (Iterator.Element) -> ComparisonResult) -> Iterator.Element? {\n        if max < min { return nil }\n        let current = min + (max - min) / 2\n        let v = self[self.index(self.startIndex, offsetBy: current)]\n        let compRes = comparator(v)\n        \n        if compRes == .orderedSame { return v }\n        \n        let newMin = (compRes == .orderedAscending) ? current + 1 : min\n        let newMax = (compRes == .orderedDescending) ? current - 1 : max\n        return bsearch(min: newMin, max: newMax, comparator: comparator)\n    }\n    \n    func binarySearch(comparator: (Iterator.Element) -> ComparisonResult) -> Iterator.Element? {\n        return bsearch(min: 0, max: self.count - 1, comparator: comparator)\n    }\n}\n```\n\n`Array`\u3067\u3044\u3044\u3068\u601d\u3046\u3093\u3060\u3051\u3069\u3001\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u306e\u3067`sorted()`\u3092\u6301\u3063\u3066\u308b`MutableCollection`\u3092\u62e1\u5f35\u3057\u307e\u3057\u305f\u3002 \n\u9593\u9055\u3048\u3066\u308b\u5834\u5408\u306f\u6307\u6458\u3057\u3066\u304f\u3060\u3055\u308b\u3068\u3042\u308a\u304c\u305f\u3044\u3067\u3059\u3002\n*\uff08\u3044\u3064\u304b\u5b9f\u88c5\u3055\u308c\u308b\u306f\u305a\u306e\u672b\u5c3e\u518d\u5e30\u306e\u6700\u9069\u5316\u306e\u305f\u3081\u306b\u672b\u5c3e\u518d\u5e30\u306b\u3057\u3066\u3044\u307e\u3059\uff09*\n\n\u4f7f\u7528\u6cd5\u306f\n\n```swift\nlet original = [8, 5, 9, 10, 66, 4, 3, 6, 12, 13, 16, 27, 58, 3]\nlet sortedArray = original.sorted()\nlet target = 5\nsortedArray.binarySearch {\n    if $0 == target { return .orderedSame }\n    if $0 < target { return .orderedAscending }\n    return .orderedDescending\n} // 5\n```\n\n\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n## \u88dc\u52a9\u7684\u5b9f\u88c5\n\n\u30af\u30ed\u30fc\u30b8\u30e3\u306e\u4e2d\u304c\u30b4\u30c1\u30e3\u30b4\u30c1\u30e3\u3057\u3066\u3044\u3066\u3059\u3054\u304f\u308f\u304b\u308a\u306b\u304f\u3044\u3067\u3059\u3002\n\u306a\u306e\u3067`ComparisonResult`\u3092\u8fd4\u3059\u6f14\u7b97\u5b50\u3092\u4f5c\u3063\u3061\u3083\u3044\u307e\u3059\u3002\n\n```swift\ninfix operator ==? : ComparisonPrecedence\nfunc ==? <T: Comparable> (lhs: T, rhs: T) -> ComparisonResult {\n    if lhs == rhs { return .orderedSame }\n    if lhs < rhs { return .orderedAscending }\n    return .orderedDescending\n}\n```\n\n\u3053\u3053\u3067\u306f`==?`\u3092\u4f7f\u3044\u307e\u3057\u305f\u304c\u304a\u597d\u307f\u3067\u3002\n\u6bd4\u8f03\u5bfe\u8c61\u304c`Comparable`\u306b\u6e96\u62e0\u3057\u3066\u3044\u308c\u3070\u4f7f\u3048\u307e\u3059\u3002\n\n\u3053\u308c\u3092\u4f7f\u3046\u3068\u5148\u306e\u30d0\u30a4\u30ca\u30ea\u30b5\u30fc\u30c1\u306f\u3053\u3046\u306a\u308a\u307e\u3059\u3002\n\n```swift\nsortedArray.binarySearch { $0 ==? target }  // 5\n```\n\n\u4e00\u6c17\u306b\u898b\u3084\u3059\u304f\u308f\u304b\u308a\u3084\u3059\u304f\u306a\u308a\u307e\u3057\u305f\u3002\u6f14\u7b97\u5b50\u5049\u5927\u3067\u3059\u3002\n\n## \u88dc\u8db3\n\n\u6bd4\u8f03\u90e8\u5206\u304c\u5916\u90e8\u306b\u51fa\u3066\u3044\u308b\u306e\u3067\u8981\u7d20\u81ea\u4f53\u304c`Comparable`\u306b\u6e96\u62e0\u3057\u3066\u3044\u306a\u304f\u3066\u3082\u4f7f\u3048\u307e\u3059\u3002\n\n```swift\nstruct Member {\n    let id: Int\n    let name: String\n}\n\nlet members = sortedArray.map { Member(id: $0, name: \"\") }\n\nmembers.binarySearch { $0.id ==? target }   // Member(id: 5, name: \"\")\n```\n\n\u6bd4\u8f03\u5bfe\u8c61\u304c`Int`\u306e\u305f\u3081\u3001\u69cb\u9020\u4f53`Member`\u81ea\u4f53\u3092`Comparable`\u306b\u6e96\u62e0\u3055\u305b\u308b\u3053\u3068\u306a\u304f\u30d0\u30a4\u30ca\u30ea\u30b5\u30fc\u30c1\u304c\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\n"}