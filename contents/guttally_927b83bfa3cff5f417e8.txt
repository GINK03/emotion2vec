{"context": " More than 1 year has passed since last update.\n\n\u3044\u304d\u306a\u308a\u7d50\u8ad6\n\u3000AVR \u5411\u3051\u306e\u30b3\u30f3\u30d1\u30a4\u30e9 avr-gcc \u306b\u304a\u3044\u3066\uff0cbool \u578b\u306f uint8_t \u578b (unsigned char \u578b) \u3068\u3057\u3066\u6271\u308f\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u77e5\u308a\u305f\u304b\u3063\u305f\u3053\u3068\n\u3000AVR \u306e\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u3063\u3066\u3044\u308b\u4e2d\u3067\uff0cuint8_t \u578b\u5909\u6570\u306e\u4efb\u610f\u306e\u30d3\u30c3\u30c8\u3092\u7f6e\u63db\u3059\u308b\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u95a2\u6570\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\u3000\u7f6e\u63db\u5bfe\u8c61\u306e\u5909\u6570 src \u306e offset \u3067\u6307\u5b9a\u3055\u308c\u305f\u30d3\u30c3\u30c8\u304c bit \u3067\u6307\u5b9a\u3057\u305f\u72b6\u614b\u306b\u7f6e\u63db\u3055\u308c\u3066 return \u3055\u308c\u307e\u3059\u3002\nuint8_t ReplaceSingleBit(uint8_t src, int8_t offset, bool bit) {\n  assert((0 <= offset) && (offset <= 7));\n  return (src & ~(1 << offset)) | (bit << offset);\n}\n\n\u3000\u3055\u3066\u3053\u306e\u95a2\u6570\uff0c\u3068\u308a\u308f\u3051 bool \u578b\u306e\u5909\u6570 bit \u306f\u3069\u306e\u3088\u3046\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u308b\u3067\u3057\u3087\u3046\u304b\uff1f \u3082\u3057\u304b\u3057\u3066\uff0cint8_t \u3068\u304b uint8_t \u306a\u3069\u306e\u6574\u6570\u578b\u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u52b9\u7387\u3088\u3044\u30b3\u30fc\u30c9\u304c\u5410\u304d\u51fa\u3055\u308c\u305f\u308a\u3059\u308b\uff0c\u306a\u30fc\u3093\u3066\u3053\u3068\u306f\u3042\u308b\u3067\u3057\u3087\u3046\u304b\uff1f\n\u3000\u305d\u3093\u306a\u7591\u554f\u304c\u6e67\u3044\u3066\u3057\u307e\u3063\u305f\u306e\u3067\uff0c\u5b9f\u969b\u3069\u3046\u306a\u308b\u306e\u304b\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u5b9f\u9a13\n\n\u5b9f\u9a13\u306b\u4f7f\u3063\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u3000\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u7528\u610f\u3057\u307e\u3057\u305f\u3002\n\ntest.c\n#include <stdint.h>\n#include <stdbool.h>\n#include <assert.h>\n\nuint8_t TestA(uint8_t src, int8_t offset, bool bit) {\n  return (src & ~(1 << offset)) | (bit << offset);\n}\n\nuint8_t TestB(uint8_t src, int8_t offset, uint8_t bit) {\n  return (src & ~(1 << offset)) | (bit << offset);\n}\n\nuint8_t TestC(uint8_t src, int8_t offset, int8_t bit) {\n  return (src & ~(1 << offset)) | (bit << offset);\n}\n\nuint8_t TestD(uint8_t src, int8_t offset, uint16_t bit) {\n  return (src & ~(1 << offset)) | (bit << offset);\n}\n\nuint8_t TestE(uint8_t src, int8_t offset, int16_t bit) {\n  return (src & ~(1 << offset)) | (bit << offset);\n}\n\n\n\u3000TestA \u306f\uff0c\u30aa\u30ea\u30b8\u30ca\u30eb\u306e ReplaceSingleBit \u95a2\u6570\u3068\u540c\u69d8\u306e\u69cb\u6210\u3067\u3059\u3002 \u305d\u306e\u4ed6\u306e\u95a2\u6570\u306f\u5f15\u6570 bit \u306e\u578b\u3092\u305d\u308c\u305e\u308c uint8_t\uff0cint8_t\uff0cuint16_t\uff0cint16_t \u306b\u5909\u3048\u305f\u3082\u306e\u3067\u3059\u3002 \u3044\u305a\u308c\u3082 assert \u306f\u7701\u7565\u3057\u307e\u3057\u305f\u3002\n\u3000\u3067\uff0c\u3053\u306e\u30b3\u30fc\u30c9\u3092\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6700\u9069\u5316\u4ed8\u304d\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u307e\u3057\u305f\u3002\navr-gcc -S -O2 test.c\n\n\n\u5f97\u3089\u308c\u305f\u30a2\u30bb\u30f3\u30d6\u30ea\u30b3\u30fc\u30c9\n\u3000\u7d50\u679c\u51fa\u529b\u3055\u308c\u305f\u306e\u304c\uff0c\u4ee5\u4e0b\u306e\u30a2\u30bb\u30f3\u30d6\u30ea\u30b3\u30fc\u30c9\u3067\u3059\u3002\n    .file   \"test.c\"\n__SP_H__ = 0x3e\n__SP_L__ = 0x3d\n__SREG__ = 0x3f\n__tmp_reg__ = 0\n__zero_reg__ = 1\n    .text\n.global TestA\n    .type   TestA, @function\nTestA:\n/* prologue: function */\n/* frame size = 0 */\n/* stack size = 0 */\n.L__stack_usage = 0\n    ldi r18,lo8(1)\n    ldi r19,0\n    mov r0,r22\n    rjmp 2f\n    1:\n    lsl r18\n    2:\n    dec r0\n    brpl 1b\n    com r18\n    and r18,r24\n    mov r24,r20\n    mov r0,r22\n    rjmp 2f\n    1:\n    lsl r24\n    2:\n    dec r0\n    brpl 1b\n    or r24,r18\n    ret\n    .size   TestA, .-TestA\n.global TestB\n    .type   TestB, @function\nTestB:\n/* prologue: function */\n/* frame size = 0 */\n/* stack size = 0 */\n.L__stack_usage = 0\n    ldi r18,lo8(1)\n    ldi r19,0\n    mov r0,r22\n    rjmp 2f\n    1:\n    lsl r18\n    2:\n    dec r0\n    brpl 1b\n    com r18\n    and r18,r24\n    mov r24,r20\n    mov r0,r22\n    rjmp 2f\n    1:\n    lsl r24\n    2:\n    dec r0\n    brpl 1b\n    or r24,r18\n    ret\n    .size   TestB, .-TestB\n.global TestC\n    .type   TestC, @function\nTestC:\n/* prologue: function */\n/* frame size = 0 */\n/* stack size = 0 */\n.L__stack_usage = 0\n    ldi r18,lo8(1)\n    ldi r19,0\n    mov r0,r22\n    rjmp 2f\n    1:\n    lsl r18\n    2:\n    dec r0\n    brpl 1b\n    com r18\n    and r18,r24\n    mov r24,r20\n    clr r25\n    sbrc r24,7\n    com r25\n    mov r0,r22\n    rjmp 2f\n    1:\n    lsl r24\n    2:\n    dec r0\n    brpl 1b\n    or r24,r18\n    ret\n    .size   TestC, .-TestC\n.global TestD\n    .type   TestD, @function\nTestD:\n/* prologue: function */\n/* frame size = 0 */\n/* stack size = 0 */\n.L__stack_usage = 0\n    ldi r18,lo8(1)\n    ldi r19,0\n    mov r0,r22\n    rjmp 2f\n    1:\n    lsl r18\n    2:\n    dec r0\n    brpl 1b\n    com r18\n    and r18,r24\n    mov r0,r22\n    rjmp 2f\n    1:\n    lsl r20\n    2:\n    dec r0\n    brpl 1b\n    mov r24,r18\n    or r24,r20\n    ret\n    .size   TestD, .-TestD\n.global TestE\n    .type   TestE, @function\nTestE:\n/* prologue: function */\n/* frame size = 0 */\n/* stack size = 0 */\n.L__stack_usage = 0\n    ldi r18,lo8(1)\n    ldi r19,0\n    mov r0,r22\n    rjmp 2f\n    1:\n    lsl r18\n    2:\n    dec r0\n    brpl 1b\n    com r18\n    and r18,r24\n    mov r0,r22\n    rjmp 2f\n    1:\n    lsl r20\n    2:\n    dec r0\n    brpl 1b\n    mov r24,r18\n    or r24,r20\n    ret\n    .size   TestE, .-TestE\n    .ident  \"GCC: (AVR_8_bit_GNU_Toolchain_3.4.5_1522) 4.8.1\"\n\n\n\n\u30a2\u30bb\u30f3\u30d6\u30ea\u30b3\u30fc\u30c9\u306e\u6bd4\u8f03\n\u3000\u305d\u308c\u305e\u308c\u306e\u30a2\u30bb\u30f3\u30d6\u30ea\u30b3\u30fc\u30c9\u3092\u6bd4\u3079\u3066\u307f\u307e\u3059\u3002\n\n\n\nbool\nuint8_t\nint8_t\nuint16_t\nint16_t\n\n\n\n\nTestA:\nTestB:\nTestC:\nTestD:\nTestE:\n\n\n.L__stack_usage = 0\n.L__stack_usage = 0\n.L__stack_usage = 0\n.L__stack_usage = 0\n.L__stack_usage = 0\n\n\nldi r18,lo8(1)\nldi r18,lo8(1)\nldi r18,lo8(1)\nldi r18,lo8(1)\nldi r18,lo8(1)\n\n\nldi r19,0\nldi r19,0\nldi r19,0\nldi r19,0\nldi r19,0\n\n\nmov r0,r22\nmov r0,r22\nmov r0,r22\nmov r0,r22\nmov r0,r22\n\n\nrjmp 2f\nrjmp 2f\nrjmp 2f\nrjmp 2f\nrjmp 2f\n\n\n1:\n1:\n1:\n1:\n1:\n\n\nlsl r18\nlsl r18\nlsl r18\nlsl r18\nlsl r18\n\n\n2:\n2:\n2:\n2:\n2:\n\n\ndec r0\ndec r0\ndec r0\ndec r0\ndec r0\n\n\nbrpl 1b\nbrpl 1b\nbrpl 1b\nbrpl 1b\nbrpl 1b\n\n\ncom r18\ncom r18\ncom r18\ncom r18\ncom r18\n\n\nand r18,r24\nand r18,r24\nand r18,r24\nand r18,r24\nand r18,r24\n\n\nmov r24,r20\nmov r24,r20\nmov r24,r20\n\n\n\n\n\n\nclr r25\n\n\n\n\n\n\nsbrc r24,7\n\n\n\n\n\n\ncom r25\n\n\n\n\nmov r0,r22\nmov r0,r22\nmov r0,r22\nmov r0,r22\nmov r0,r22\n\n\nrjmp 2f\nrjmp 2f\nrjmp 2f\nrjmp 2f\nrjmp 2f\n\n\n1:\n1:\n1:\n1:\n1:\n\n\nlsl r24\nlsl r24\nlsl r24\nlsl r20\nlsl r20\n\n\n2:\n2:\n2:\n2:\n2:\n\n\ndec r0\ndec r0\ndec r0\ndec r0\ndec r0\n\n\nbrpl 1b\nbrpl 1b\nbrpl 1b\nbrpl 1b\nbrpl 1b\n\n\nor r24,r18\nor r24,r18\nor r24,r18\nor r24,r18\nor r24,r18\n\n\nret\nret\nret\nret\nret\n\n\n.size TestA, .-TestA\n.size TestB, .-TestB\n.size TestC, .-TestC\n.size TestD, .-TestD\n.size TestE, .-TestE\n\n\n\n\u3000\u7d50\u679c\u304b\u3089\u3059\u308b\u3068\uff0c\u5f15\u6570\u306e\u578b\u3092 bool \u3068\u3057\u305f\u3068\u304d\u306b\u51fa\u529b\u3055\u308c\u308b\u30b3\u30fc\u30c9\u306f\uff0c\u5f15\u6570\u306e\u578b\u3092 uint8_t \u3068\u307e\u3063\u305f\u304f\u540c\u3058\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u3068\u3044\u3046\u308f\u3051\u3067\uff0c\u5192\u982d\u306e\u7d50\u8ad6\u306b\u81f3\u3063\u305f\u308f\u3051\u3067\u3059\u3002\n\u3000\u3061\u3087\u3063\u3068\u610f\u5916\u3060\u3063\u305f\u306e\u304c\uff0cint8_t \u578b\u306e\u6642\u306e\u6319\u52d5\u3002 \u5f15\u6570\u306e\u578b\u3092 int8_t \u306b\u3057\u305f\u6642\u3060\u3051\uff0cr20 (\u5f15\u6570 bit \u306e\u5024) \u3092 r24 \u306b\u30b3\u30d4\u30fc\u3057\u305f\u5f8c\u3067\u3054\u4e01\u5be7\u306b r25 \u306e\u7b26\u53f7\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002 \u5f8c\u306e\u51e6\u7406\u3067\u306f\u4f7f\u308f\u308c\u306a\u3044\u306e\u306b\u2026\u2026\uff1f\n\u3000\u307e\u305f\uff0c16 bit \u6574\u6570\u578b\u3092\u4f7f\u3046\u3068\uff0cbool \u578b\u3084 8 bit \u6574\u6570\u578b\u3092\u4f7f\u3063\u305f\u5834\u5408\u3068\u9055\u3063\u3066\uff0cr20 (\u5f15\u6570 bit \u306e\u5024) \u3092 r24 \u3078\u30b3\u30d4\u30fc\u3059\u308b\u51e6\u7406\u304c\u3042\u308a\u307e\u305b\u3093\u3002 \u7d50\u679c\uff0c\u95a2\u6570\u5185\u306e\u547d\u4ee4\u6570\u304c\u4e00\u756a\u5c11\u306a\u3044\u306e\u306f 16 bit \u6574\u6570\u578b\u3092\u4f7f\u3063\u305f\u5834\u5408\u3068\u306a\u308a\u307e\u3057\u305f\u3002 \u3057\u304b\u3057\u306a\u304c\u3089\uff0c\u3053\u306e\u95a2\u6570\u306f bit \u306e\u5024\u304c 0 \u304b 1 \u3067\u306a\u3044\u3068\u671f\u5f85\u3057\u305f\u52d5\u4f5c\u3092\u3057\u3066\u304f\u308c\u307e\u305b\u3093\u3002 \u306e\u3067\uff0c\u5f15\u6570 bit \u306e\u578b\u3092 bool \u4ee5\u5916\u306b\u3057\u305f\u5834\u5408\uff0c\u5024\u304c 0 \u307e\u305f\u306f 1 \u3067\u3042\u308b\u3053\u3068\u306e\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002 \u3053\u3046\u3044\u3046\u70b9\u307e\u3067\u8003\u3048\u308b\u3068\uff0c\u5f15\u6570 bit \u306e\u578b\u306b\u306f bool \u3092\u9078\u629e\u3059\u308b\u306e\u304c\u3088\u3055\u305d\u3046\u3067\u3059\u3002\n\u3000\u3068\u308a\u3042\u3048\u305a\u306e\u8208\u5473\u306f\u6e80\u305f\u3055\u308c\u305f\u306e\u3067\uff0c\u4eca\u306e\u3068\u3053\u308d\u306f\u3053\u308c\u4ee5\u4e0a\u6df1\u8ffd\u3044\u306f\u3057\u306a\u3044\u4e88\u5b9a\u3067\u3059\u3002\n#\u3044\u304d\u306a\u308a\u7d50\u8ad6\n\n\u3000AVR \u5411\u3051\u306e\u30b3\u30f3\u30d1\u30a4\u30e9 avr-gcc \u306b\u304a\u3044\u3066\uff0cbool \u578b\u306f uint8_t \u578b (unsigned char \u578b) \u3068\u3057\u3066\u6271\u308f\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n# \u77e5\u308a\u305f\u304b\u3063\u305f\u3053\u3068\n\n\u3000AVR \u306e\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u3063\u3066\u3044\u308b\u4e2d\u3067\uff0cuint8_t \u578b\u5909\u6570\u306e\u4efb\u610f\u306e\u30d3\u30c3\u30c8\u3092\u7f6e\u63db\u3059\u308b\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u95a2\u6570\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\u3000\u7f6e\u63db\u5bfe\u8c61\u306e\u5909\u6570 src \u306e offset \u3067\u6307\u5b9a\u3055\u308c\u305f\u30d3\u30c3\u30c8\u304c bit \u3067\u6307\u5b9a\u3057\u305f\u72b6\u614b\u306b\u7f6e\u63db\u3055\u308c\u3066 return \u3055\u308c\u307e\u3059\u3002\n\n```c\nuint8_t ReplaceSingleBit(uint8_t src, int8_t offset, bool bit) {\n  assert((0 <= offset) && (offset <= 7));\n  return (src & ~(1 << offset)) | (bit << offset);\n}\n```\n\n\u3000\u3055\u3066\u3053\u306e\u95a2\u6570\uff0c\u3068\u308a\u308f\u3051 bool \u578b\u306e\u5909\u6570 bit \u306f\u3069\u306e\u3088\u3046\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u308b\u3067\u3057\u3087\u3046\u304b\uff1f \u3082\u3057\u304b\u3057\u3066\uff0cint8_t \u3068\u304b uint8_t \u306a\u3069\u306e\u6574\u6570\u578b\u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u52b9\u7387\u3088\u3044\u30b3\u30fc\u30c9\u304c\u5410\u304d\u51fa\u3055\u308c\u305f\u308a\u3059\u308b\uff0c\u306a\u30fc\u3093\u3066\u3053\u3068\u306f\u3042\u308b\u3067\u3057\u3087\u3046\u304b\uff1f\n\n\u3000\u305d\u3093\u306a\u7591\u554f\u304c\u6e67\u3044\u3066\u3057\u307e\u3063\u305f\u306e\u3067\uff0c\u5b9f\u969b\u3069\u3046\u306a\u308b\u306e\u304b\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\n# \u5b9f\u9a13\n## \u5b9f\u9a13\u306b\u4f7f\u3063\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n\u3000\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u7528\u610f\u3057\u307e\u3057\u305f\u3002\n\n```c:test.c\n#include <stdint.h>\n#include <stdbool.h>\n#include <assert.h>\n\nuint8_t TestA(uint8_t src, int8_t offset, bool bit) {\n  return (src & ~(1 << offset)) | (bit << offset);\n}\n\nuint8_t TestB(uint8_t src, int8_t offset, uint8_t bit) {\n  return (src & ~(1 << offset)) | (bit << offset);\n}\n\nuint8_t TestC(uint8_t src, int8_t offset, int8_t bit) {\n  return (src & ~(1 << offset)) | (bit << offset);\n}\n\nuint8_t TestD(uint8_t src, int8_t offset, uint16_t bit) {\n  return (src & ~(1 << offset)) | (bit << offset);\n}\n\nuint8_t TestE(uint8_t src, int8_t offset, int16_t bit) {\n  return (src & ~(1 << offset)) | (bit << offset);\n}\n```\n\n\u3000TestA \u306f\uff0c\u30aa\u30ea\u30b8\u30ca\u30eb\u306e ReplaceSingleBit \u95a2\u6570\u3068\u540c\u69d8\u306e\u69cb\u6210\u3067\u3059\u3002 \u305d\u306e\u4ed6\u306e\u95a2\u6570\u306f\u5f15\u6570 bit \u306e\u578b\u3092\u305d\u308c\u305e\u308c uint8_t\uff0cint8_t\uff0cuint16_t\uff0cint16_t \u306b\u5909\u3048\u305f\u3082\u306e\u3067\u3059\u3002 \u3044\u305a\u308c\u3082 assert \u306f\u7701\u7565\u3057\u307e\u3057\u305f\u3002\n\n\u3000\u3067\uff0c\u3053\u306e\u30b3\u30fc\u30c9\u3092\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6700\u9069\u5316\u4ed8\u304d\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u307e\u3057\u305f\u3002\n\n```shell-session\navr-gcc -S -O2 test.c\n```\n\n## \u5f97\u3089\u308c\u305f\u30a2\u30bb\u30f3\u30d6\u30ea\u30b3\u30fc\u30c9\n\n\u3000\u7d50\u679c\u51fa\u529b\u3055\u308c\u305f\u306e\u304c\uff0c\u4ee5\u4e0b\u306e\u30a2\u30bb\u30f3\u30d6\u30ea\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\n```c\n\t.file\t\"test.c\"\n__SP_H__ = 0x3e\n__SP_L__ = 0x3d\n__SREG__ = 0x3f\n__tmp_reg__ = 0\n__zero_reg__ = 1\n\t.text\n.global\tTestA\n\t.type\tTestA, @function\nTestA:\n/* prologue: function */\n/* frame size = 0 */\n/* stack size = 0 */\n.L__stack_usage = 0\n\tldi r18,lo8(1)\n\tldi r19,0\n\tmov r0,r22\n\trjmp 2f\n\t1:\n\tlsl r18\n\t2:\n\tdec r0\n\tbrpl 1b\n\tcom r18\n\tand r18,r24\n\tmov r24,r20\n\tmov r0,r22\n\trjmp 2f\n\t1:\n\tlsl r24\n\t2:\n\tdec r0\n\tbrpl 1b\n\tor r24,r18\n\tret\n\t.size\tTestA, .-TestA\n.global\tTestB\n\t.type\tTestB, @function\nTestB:\n/* prologue: function */\n/* frame size = 0 */\n/* stack size = 0 */\n.L__stack_usage = 0\n\tldi r18,lo8(1)\n\tldi r19,0\n\tmov r0,r22\n\trjmp 2f\n\t1:\n\tlsl r18\n\t2:\n\tdec r0\n\tbrpl 1b\n\tcom r18\n\tand r18,r24\n\tmov r24,r20\n\tmov r0,r22\n\trjmp 2f\n\t1:\n\tlsl r24\n\t2:\n\tdec r0\n\tbrpl 1b\n\tor r24,r18\n\tret\n\t.size\tTestB, .-TestB\n.global\tTestC\n\t.type\tTestC, @function\nTestC:\n/* prologue: function */\n/* frame size = 0 */\n/* stack size = 0 */\n.L__stack_usage = 0\n\tldi r18,lo8(1)\n\tldi r19,0\n\tmov r0,r22\n\trjmp 2f\n\t1:\n\tlsl r18\n\t2:\n\tdec r0\n\tbrpl 1b\n\tcom r18\n\tand r18,r24\n\tmov r24,r20\n\tclr r25\n\tsbrc r24,7\n\tcom r25\n\tmov r0,r22\n\trjmp 2f\n\t1:\n\tlsl r24\n\t2:\n\tdec r0\n\tbrpl 1b\n\tor r24,r18\n\tret\n\t.size\tTestC, .-TestC\n.global\tTestD\n\t.type\tTestD, @function\nTestD:\n/* prologue: function */\n/* frame size = 0 */\n/* stack size = 0 */\n.L__stack_usage = 0\n\tldi r18,lo8(1)\n\tldi r19,0\n\tmov r0,r22\n\trjmp 2f\n\t1:\n\tlsl r18\n\t2:\n\tdec r0\n\tbrpl 1b\n\tcom r18\n\tand r18,r24\n\tmov r0,r22\n\trjmp 2f\n\t1:\n\tlsl r20\n\t2:\n\tdec r0\n\tbrpl 1b\n\tmov r24,r18\n\tor r24,r20\n\tret\n\t.size\tTestD, .-TestD\n.global\tTestE\n\t.type\tTestE, @function\nTestE:\n/* prologue: function */\n/* frame size = 0 */\n/* stack size = 0 */\n.L__stack_usage = 0\n\tldi r18,lo8(1)\n\tldi r19,0\n\tmov r0,r22\n\trjmp 2f\n\t1:\n\tlsl r18\n\t2:\n\tdec r0\n\tbrpl 1b\n\tcom r18\n\tand r18,r24\n\tmov r0,r22\n\trjmp 2f\n\t1:\n\tlsl r20\n\t2:\n\tdec r0\n\tbrpl 1b\n\tmov r24,r18\n\tor r24,r20\n\tret\n\t.size\tTestE, .-TestE\n\t.ident\t\"GCC: (AVR_8_bit_GNU_Toolchain_3.4.5_1522) 4.8.1\"\n\n```\n\n# \u30a2\u30bb\u30f3\u30d6\u30ea\u30b3\u30fc\u30c9\u306e\u6bd4\u8f03\n\n\u3000\u305d\u308c\u305e\u308c\u306e\u30a2\u30bb\u30f3\u30d6\u30ea\u30b3\u30fc\u30c9\u3092\u6bd4\u3079\u3066\u307f\u307e\u3059\u3002\n\n|bool  |uint8_t|int8_t|uint16_t|int16_t|\n|------|------|------|------|------|\n|TestA:|TestB:|TestC:|TestD:|TestE:|\n|.L__stack_usage = 0 |.L__stack_usage = 0 |.L__stack_usage = 0 |.L__stack_usage = 0 |.L__stack_usage = 0 |\n|ldi r18,lo8(1)      |ldi r18,lo8(1)      |ldi r18,lo8(1)      |ldi r18,lo8(1)      |ldi r18,lo8(1)      |\n|ldi r19,0           |ldi r19,0           |ldi r19,0           |ldi r19,0           |ldi r19,0           |\n|mov r0,r22          |mov r0,r22          |mov r0,r22          |mov r0,r22          |mov r0,r22          |\n|rjmp 2f             |rjmp 2f             |rjmp 2f             |rjmp 2f             |rjmp 2f             |\n|1:                  |1:                  |1:                  |1:                  |1:                  |\n|lsl r18             |lsl r18             |lsl r18             |lsl r18             |lsl r18             |\n|2:                  |2:                  |2:                  |2:                  |2:                  |\n|dec r0              |dec r0              |dec r0              |dec r0              |dec r0              |\n|brpl 1b             |brpl 1b             |brpl 1b             |brpl 1b             |brpl 1b             |\n|com r18             |com r18             |com r18             |com r18             |com r18             |\n|and r18,r24         |and r18,r24         |and r18,r24         |and r18,r24         |and r18,r24         |\n|mov r24,r20         |mov r24,r20         |mov r24,r20         |                    |                    |\n|                    |                    |clr r25             |                    |                    |\n|                    |                    |sbrc r24,7          |                    |                    |\n|                    |                    |com r25             |                    |                    |\n|mov r0,r22          |mov r0,r22          |mov r0,r22          |mov r0,r22          |mov r0,r22          |\n|rjmp 2f             |rjmp 2f             |rjmp 2f             |rjmp 2f             |rjmp 2f             |\n|1:                  |1:                  |1:                  |1:                  |1:                  |\n|lsl r24             |lsl r24             |lsl r24             |lsl r20             |lsl r20             |\n|2:                  |2:                  |2:                  |2:                  |2:                  |\n|dec r0              |dec r0              |dec r0              |dec r0              |dec r0              |\n|brpl 1b             |brpl 1b             |brpl 1b             |brpl 1b             |brpl 1b             |\n|or r24,r18          |or r24,r18          |or r24,r18          |or r24,r18          |or r24,r18          |\n|ret                 |ret                 |ret                 |ret                 |ret                 |\n|.size TestA, .-TestA|.size TestB, .-TestB|.size TestC, .-TestC|.size TestD, .-TestD|.size TestE, .-TestE|\n\n\u3000\u7d50\u679c\u304b\u3089\u3059\u308b\u3068\uff0c\u5f15\u6570\u306e\u578b\u3092 bool \u3068\u3057\u305f\u3068\u304d\u306b\u51fa\u529b\u3055\u308c\u308b\u30b3\u30fc\u30c9\u306f\uff0c\u5f15\u6570\u306e\u578b\u3092 uint8_t \u3068\u307e\u3063\u305f\u304f\u540c\u3058\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u3068\u3044\u3046\u308f\u3051\u3067\uff0c\u5192\u982d\u306e\u7d50\u8ad6\u306b\u81f3\u3063\u305f\u308f\u3051\u3067\u3059\u3002\n\n\u3000\u3061\u3087\u3063\u3068\u610f\u5916\u3060\u3063\u305f\u306e\u304c\uff0cint8_t \u578b\u306e\u6642\u306e\u6319\u52d5\u3002 \u5f15\u6570\u306e\u578b\u3092 int8_t \u306b\u3057\u305f\u6642\u3060\u3051\uff0cr20 (\u5f15\u6570 bit \u306e\u5024) \u3092 r24 \u306b\u30b3\u30d4\u30fc\u3057\u305f\u5f8c\u3067\u3054\u4e01\u5be7\u306b r25 \u306e\u7b26\u53f7\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002 \u5f8c\u306e\u51e6\u7406\u3067\u306f\u4f7f\u308f\u308c\u306a\u3044\u306e\u306b\u2026\u2026\uff1f\n\n\u3000\u307e\u305f\uff0c16 bit \u6574\u6570\u578b\u3092\u4f7f\u3046\u3068\uff0cbool \u578b\u3084 8 bit \u6574\u6570\u578b\u3092\u4f7f\u3063\u305f\u5834\u5408\u3068\u9055\u3063\u3066\uff0cr20 (\u5f15\u6570 bit \u306e\u5024) \u3092 r24 \u3078\u30b3\u30d4\u30fc\u3059\u308b\u51e6\u7406\u304c\u3042\u308a\u307e\u305b\u3093\u3002 \u7d50\u679c\uff0c\u95a2\u6570\u5185\u306e\u547d\u4ee4\u6570\u304c\u4e00\u756a\u5c11\u306a\u3044\u306e\u306f 16 bit \u6574\u6570\u578b\u3092\u4f7f\u3063\u305f\u5834\u5408\u3068\u306a\u308a\u307e\u3057\u305f\u3002 \u3057\u304b\u3057\u306a\u304c\u3089\uff0c\u3053\u306e\u95a2\u6570\u306f bit \u306e\u5024\u304c 0 \u304b 1 \u3067\u306a\u3044\u3068\u671f\u5f85\u3057\u305f\u52d5\u4f5c\u3092\u3057\u3066\u304f\u308c\u307e\u305b\u3093\u3002 \u306e\u3067\uff0c\u5f15\u6570 bit \u306e\u578b\u3092 bool \u4ee5\u5916\u306b\u3057\u305f\u5834\u5408\uff0c\u5024\u304c 0 \u307e\u305f\u306f 1 \u3067\u3042\u308b\u3053\u3068\u306e\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002 \u3053\u3046\u3044\u3046\u70b9\u307e\u3067\u8003\u3048\u308b\u3068\uff0c\u5f15\u6570 bit \u306e\u578b\u306b\u306f bool \u3092\u9078\u629e\u3059\u308b\u306e\u304c\u3088\u3055\u305d\u3046\u3067\u3059\u3002\n\n\u3000\u3068\u308a\u3042\u3048\u305a\u306e\u8208\u5473\u306f\u6e80\u305f\u3055\u308c\u305f\u306e\u3067\uff0c\u4eca\u306e\u3068\u3053\u308d\u306f\u3053\u308c\u4ee5\u4e0a\u6df1\u8ffd\u3044\u306f\u3057\u306a\u3044\u4e88\u5b9a\u3067\u3059\u3002\n", "tags": ["avr-gcc", "AVR", "C\u8a00\u8a9e"]}