{"context": "Python\u3067\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u5206\u6790\u3092\u884c\u3046\u5834\u5408\uff0c\u7d71\u8a08\u30e2\u30c7\u30ea\u30f3\u30b0\u306eStatsModels\u304c\u5099\u3048\u308bTimes series analysis (tsa) \u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3046\u306e\u304c\u7b2c1\u306e\u9078\u629e\u80a2\u306b\u306a\u308b\u3068\u8003\u3048\u3089\u308c\u308b\uff0e\u307e\u305f\uff0c\u6a5f\u68b0\u5b66\u7fd2\u30e9\u30a4\u30d6\u30e9\u30ea  Scikit-learn \u306b\u306f\u5225\u306e\u30b3\u30f3\u30bb\u30d7\u30c8\u3067\u56de\u5e30\u3092\u884c\u3046\uff0c\u6c7a\u5b9a\u6728\u56de\u5e30(Decision Tree Regression)\u3084Random Forest Regression\u304c\u3042\u308b\u306e\u3067\uff0c\u3053\u308c\u3082\u8a66\u3057\u3066\u307f\u305f\u3044\u3068\u8003\u3048\uff0c\u6bd4\u8f03\u691c\u8a0e\u3057\u305f\uff0e\n\uff08\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u74b0\u5883\uff1aPython 2.7.11, Pandas 0.18.0, StatsModels 0.6.1, Scikit-learn 0.17.1 \u306b\u306a\u308a\u307e\u3059\uff0e\uff09\n\n\u4f1d\u7d71\u7684\u306a\u81ea\u5df1\u56de\u5e30\u30e2\u30c7\u30eb\u306e\u30b0\u30eb\u30fc\u30d7\n\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u5206\u6790\u306e\u6587\u732e\u3092\u958b\u304f\u3068\u591a\u304f\u306e\u5834\u5408\uff0c\u6b21\u306e\u9806\u756a\u3067\u8aac\u660e\u304c\u51fa\u3066\u304f\u308b\uff0e\n\n\n\n\u7565\u79f0\n\u8aac\u660e\n\n\n\n\nAR\n\u81ea\u5df1\u56de\u5e30(Auto Regression)\u30e2\u30c7\u30eb\n\n\nMA\n\u79fb\u52d5\u5e73\u5747(Moving Average)\u30e2\u30c7\u30eb\n\n\nARMA\n\u81ea\u5df1\u56de\u5e30\u79fb\u52d5\u5e73\u5747\u30e2\u30c7\u30eb\n\n\nARIMA\n\u81ea\u5df1\u56de\u5e30\u548c\u5206\u79fb\u52d5\u5e73\u5747\u30e2\u30c7\u30eb\n\n\n\n\u5404\u30e2\u30c7\u30eb\u306e\u8a73\u7d30\u306fWikipedia\u7b49\u3092\u53c2\u7167\u3057\u3066\u3044\u305f\u3060\u304f\u3068\u3057\u3066\uff0c\u57fa\u672c\u7684\u306bARMA\u306f\uff0cAR , MA\u3092\u542b\u6709\u3059\u308b\u30e2\u30c7\u30eb\u3067\u3042\u308a\uff0c ARIMA \u306f\uff0cARMA \u3092\u542b\u3080\u30e2\u30c7\u30eb\u306a\u306e\u3067\uff0c\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u306f ARIMA \u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308c\u3070\uff0c\u4e0a\u8a18\uff14\u3064\u306e\u30e2\u30c7\u30eb\u306f\u3059\u3079\u3066\u5bfe\u5fdc\u53ef\u80fd\u3068\u306a\u308b\uff0e\u4f46\u3057\uff0cStatsModels\u3067\u306fAPI\u3068\u3057\u3066AR, ARMA, ARIMA \u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\uff0e\nhttp://statsmodels.sourceforge.net/stable/tsa.html\n\u4eca\u56de\uff0c\u5206\u6790\u3092\u884c\u3046\u30c7\u30fc\u30bf\u3068\u3057\u3066\uff0c\"Nile\" \u3092\u53d6\u308a\u4e0a\u3052\u305f\uff0e\n\nNile River flows at Ashwan 1871-1970\nThis dataset contains measurements on the annual flow of the Nile as measured at Ashwan for 100 years from 1871-1970. There is an apparent changepoint near 1898.\n\n\u30a2\u30d5\u30ea\u30ab\uff0c\u30ca\u30a4\u30eb\u5ddd\u6d41\u91cf\u306e\u5404\u5e74\u3054\u3068\u306e\u30c7\u30fc\u30bf\u3067\uff0cStatsModel\u30e9\u30a4\u30d6\u30e9\u30ea\u5185\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3067\u3042\u308b\uff0e\n\n\u81ea\u5df1\u56de\u5e30\u30e2\u30c7\u30eb\u3067\u306f\u591a\u304f\u306e\u5834\u5408\u300c\u5b9a\u5e38\u6027\u300d\u304c\u30e2\u30c7\u30eb\u9069\u7528\u306e\u524d\u63d0\u6761\u4ef6\u306b\u306a\u3063\u3066\u3044\u308b\u304c\uff0c\u4e0a\u306e\u30d7\u30ed\u30c3\u30c8\u3067\u306f\u5358\u8abf\u5897\u52a0\uff0c\u5358\u8abf\u6e1b\u5c11\u306e\u69d8\u5b50\u304c\u898b\u3089\u308c\u306a\u3044\u306e\u3067\uff0cARMA\u30e2\u30c7\u30eb\u3092\u5f53\u3066\u306f\u3081\u308b\u3053\u3068\u306b\u3059\u308b\uff0e\n\nARMA\u30e2\u30c7\u30eb\u306e\u6b21\u6570\u9078\u629e\n\u304a\u3088\u305d100\u5e74\u9593\u306e\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3067\uff0c\u30d5\u30a3\u30c3\u30c8\u7528\uff08\u8a13\u7df4\u7528\uff09\u306e\u30c7\u30fc\u30bf\u3068\u3057\u3066\u524d\u534a70\u5e74\u5206\uff0c\u30e2\u30c7\u30eb\u30c6\u30b9\u30c8\u7528\u306e\u30c7\u30fc\u30bf\u3068\u3057\u3066\u5f8c\u534a30\u5e74\u5206\u3092\u5272\u308a\u5f53\u3066\u308b\u3053\u3068\u3068\u3059\u308b\uff0eARMA\u30e2\u30c7\u30eb\u306e\u6b21\u6570(p, q)\u3092\u9078\u3076\u5fc5\u8981\u304c\u3042\u308b\u304c\uff0c\u307e\u305a\u30b3\u30ec\u30ed\u30b0\u30e9\u30e0\u3068\u3082\u547c\u3070\u308c\u308bACF\u30d7\u30ed\u30c3\u30c8(Autocorrelation function plot), PACF\u30d7\u30ed\u30c3\u30c8(Partial autocorrelation plot)\u3092\u4f5c\u56f3\u3057\u3066\u307f\u308b\uff0e\ndef load_data():\n    df_read = sm.datasets.nile.load_pandas().data\n    s_date = pd.Series(\n        [pd.to_datetime(str(int(y_str))) for y_str in df_read['year']]\n    )\n    df = df_read.set_index(s_date)\n    df = df.drop('year', axis=1)\n\n    return df\n\ndf_nile = load_data()\n\n# Plot Time Series Data\nax = df_nile['volume'].plot(figsize=(8,4), grid=True)\nax.set_xlabel('year')\nax.set_ylabel('volume x 10^8 m^3')\nplt.show()\n\n# Data Split (70: 30)\n# ACF, PACF\nfig = plt.figure(figsize=(12,8))\nax1 = fig.add_subplot(211)\nfig = sm.graphics.tsa.plot_acf(df_train.values, lags=40, ax=ax1)\nax2 = fig.add_subplot(212)\nfig = sm.graphics.tsa.plot_pacf(df_train.values, lags=40, ax=ax2)\n\nFig. ACF and PACF plot of \"Nile\" data\n\nARMA(p, q) \u3067\uff0cACF\u30d7\u30ed\u30c3\u30c8\uff08\u4e0a\uff09\u3088\u308a q=[0, 1, 2, 3] \u304c\u9078\u629e\u80a2\u306b\u5165\u308a\uff0cPACF\u30d7\u30ed\u30c3\u30c8\uff08\u4e0b\uff09\u3088\u308a p = [0, 1] \u304c\u9078\u629e\u80a2\u306b\u5165\u308b\u3053\u3068\u304c\uff08\u306a\u3093\u3068\u306a\u304f\uff09\u5206\u304b\u308b\uff0e\u4e00\u5fdc\uff0cARMA(p=1, q=3) \u3092\u8996\u91ce\u306b\u5165\u308c\u3064\u3064\u6b21\u6570\u9078\u629e\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u3067\u60c5\u5831\u3092\u51fa\u529b\u3055\u305b\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u305f\uff0e\ninfo_criteria = sm.tsa.stattools.arma_order_select_ic(\n                    df_train.values, ic=['aic', 'bic']\n                )\nprint(info_criteria.aic_min_order)\nprint(info_criteria.bic_min_order)\n\nConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n  \"Check mle_retvals\", ConvergenceWarning)\n>>> (1, 1)\n>>> (1, 0)\n\n\u53ce\u675f\u6027\u306b\u95a2\u3059\u308bWarning\u304c\u51fa\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\uff0eWarning\u3092\u3075\u307e\u3048\u305f\u4e0a\u3067\uff0cAIC\uff08\u30e2\u30c7\u30eb\u9078\u629e\u57fa\u6e96\u5024\uff09\u304b\u3089\u306fARMA(1,  1), BIC\uff08\u30e2\u30c7\u30eb\u9078\u629e\u57fa\u6e96\u5024\uff09\u304b\u3089\u306fAMMA(1, 0) \u304c\u826f\u3055\u305d\u3046\u3068\u306e\u60c5\u5831\u3092\u5f97\u305f\uff0e\u3088\u3063\u3066\u3053\u306e\uff12\u3064\u306e\u30e2\u30c7\u30eb\u3092\u30c7\u30fc\u30bf\u306b\u30d5\u30a3\u30c3\u30c8\u3055\u305b\u3066\u307f\u308b\uff0e\narma_10 = sm.tsa.ARMA(df_train, (1, 0)).fit()\narma_11 = sm.tsa.ARMA(df_train, (1, 1)).fit()\n\n\u3053\u308c\u306f\uff0c\u7279\u306bError, Warning\u3082\u306a\u304f\u51e6\u7406\u3055\u308c\u305f\uff0e\u623b\u308a\u5024 arma_10, arma_11 \u306f\u30d5\u30a3\u30c3\u30c8\u5f8c\u306e\u30e2\u30c7\u30eb\u30fb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8(ARMAResults\u30af\u30e9\u30b9\uff09\u3067\u3042\u308b\uff0e\u4e00\u5fdc\uff0c\u3088\u308a\u9ad8\u6b21\u306e\u30e2\u30c7\u30ebARMA(1, 2), ARMA(1, 3) \u3082\u8a66\u3057\u3066\u307f\u305f\uff0e\narma_12 = sm.tsa.ARMA(df_train, (1, 2)).fit()\narma_13 = sm.tsa.ARMA(df_train, (1, 3)).fit()\n\n\uff08\u4e2d\u7565\uff0cTraceback \u60c5\u5831\u306a\u3069\uff0e\uff09\n\nValueError: The computed initial AR coefficients are not stationary\nYou should induce stationarity, choose a different model order, or you can\npass your own start_params.\n\n\n\u4e0a\u306e\u3088\u3046\u306aValueError\u304c\u767a\u751f\u3057\u305f\uff0e\uff08\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\uff0c\u5b9a\u5e38\u6027(stationary)\u306b\u3064\u3044\u3066\u8a00\u53ca\u3057\u3066\u3044\u307e\u3059\u304c...\uff09\u30d1\u30e9\u30e1\u30fc\u30bf\u7b97\u5b9a\u6642\u306b\u304a\u3051\u308b\u53ce\u675f\u6027\u306b\u554f\u984c\u304c\u3042\u308aARMA(1, 2)\uff0cARMA(1, 3)\u3078\u306e\u5f53\u3066\u306f\u3081\u306f\u96e3\u3057\u3044\u72b6\u6cc1\u3067\u3042\u308b\uff0e\u3053\u306e\u5148\uff0c\u3053\u306e\u539f\u56e0\u3092\u6df1\u304f\u8ffd\u53ca\u3057\u3066\u3082\u3044\u3044\u304c\uff0c\u4eca\u56de\u306f\uff0cARMA vs. Random Forest Regressor \u304c\u30c6\u30fc\u30de\u3067\u3042\u308b\u306e\u3067\uff0c\u30d5\u30a3\u30c3\u30c8\u304c\u3067\u304d\u305fARMA(1, 0)\u3068ARMA(1, 1) \u3092\u7528\u3044\u3066\u691c\u8a0e\u3092\u9032\u3081\u308b\uff0e\n\nARMA\u30e2\u30c7\u30eb\u306e\u691c\u8a3c\n\u307e\u305a\uff0cAIC\u306e\u5024\u3092\u78ba\u8a8d\u3059\u308b\uff0e\nprint('ARMA(1,0): AIC = %.2f' % arma_10.aic)\nprint('ARMA(1,1): AIC = %.2f' % arma_11.aic)\n>>> ARMA(1,0): AIC = 910.94\n>>> ARMA(1,1): AIC = 908.92\n\nAIC\u5024\u306f\uff0cARMA(1, 1)\u30e2\u30c7\u30eb\u306e\u65b9\u304c\u5c0f\u3055\u3044\uff0e\n\u6b21\u306b\u8a13\u7df4\u30c7\u30fc\u30bf\u533a\u9593\uff0870\u5e74\u5206\uff09\u306e\u30e2\u30c7\u30eb\u63a8\u5b9a\u5024\u3068\u305d\u306e\u5f8c\u306e\u30c6\u30b9\u30c8\u533a\u9593\uff0830\u5e74\uff09\u306e\u30e2\u30c7\u30eb\u63a8\u5b9a\u5024\u3092\u7b97\u51fa\u3059\u308b\uff0e\n# in-sample predict\narma_10_inpred = arma_10.predict(start='1871-01-01', end='1940-01-01')\narma_11_inpred = arma_11.predict(start='1871-01-01', end='1940-01-01')\n\n# out-of-sample predict\narma_10_outpred = arma_10.predict(start='1941-01-01', end='1970-01-01')\narma_11_outpred = arma_11.predict(start='1941-01-01', end='1970-01-01')\n\nAIC\u306e\u7b97\u5b9a\uff0c\u63a8\u5b9a\u5024\u306e\u7b97\u51fa\u3068\u3082\u306bARMA\u30e2\u30c7\u30eb\u7d50\u679c\u30af\u30e9\u30b9(ARMAResults\u30af\u30e9\u30b9)\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306a\u5b9f\u88c5\u3068\u306a\u3063\u3066\u3044\u308b\uff0e\u5143\u30c7\u30fc\u30bf\u306e\u5024\uff0c\u63a8\u5b9a\u5024\u3092\u307e\u3068\u3081\u3066\u30d7\u30ed\u30c3\u30c8\u3059\u308b\uff0e\n# plot data and predicted values\ndef plot_ARMA_results(origdata, pred10in, pred10out, pred11in, pred11out):\n    px = origdata.index\n    py1 = origdata.values\n    plt.plot(px, py1, 'b:', label='orig data')\n\n    px_in = pred10in.index\n    plt.plot(px_in, pred10in.values, 'g')\n    plt.plot(px_in, pred11in.values, 'c')\n\n    px_out = pred10out.index\n    plt.plot(px_out, pred10out.values, 'g', label='ARMA(1,0)')\n    plt.plot(px_out, pred11out.values, 'c', label='ARMA(1,1)')\n\n    plt.legend()\n    plt.grid(True)\n    plt.show()\n\nplot_ARMA_results(df_nile, arma_10_inpred, arma_10_outpred, \n    arma_11_inpred, arma_11_outpred)\n\n\nFig. Nile data - original data and ARMA estimated data\n\n1870\u5e74\u304b\u30891940\u5e74\u307e\u3067\u304c\u8a13\u7df4\u533a\u9593 (in-sample)\uff0c\u305d\u308c\u4ee5\u964d\u304c\u30c6\u30b9\u30c8\u533a\u9593(out-of-sample)\u3067\u3042\u308b\uff0e\u5c11\u3057\u5206\u304b\u308a\u306b\u304f\u3044\u304c\uff0c\u306a\u3093\u3068\u306a\u304fARMA(1,1)\u306e\u65b9\u304c\uff0c\u5b9f\u30c7\u30fc\u30bf\u306b\u8fd1\u3044\u3088\u3046\u306b\u898b\u3048\u308b\uff0e\u5f8c\u3067\u30e2\u30c7\u30eb\u6bd4\u8f03\u306e\u305f\u3081\uff0c\u6b8b\u5dee\u304b\u3089MSE(Mean Squared Error)\u3092\u6c42\u3081\u3066\u304a\u304f\uff0e\n# Residue (mse for train) \narma_10_mse_tr = np.array([r ** 2 for r in arma_10.resid]).mean()\narma_11_mse_tr = np.array([r ** 2 for r in arma_11.resid]).mean()\n\n# Residue (mse for test)\narma_10_mse_te = np.array([(df_test.values[i] - arma_10_outpred[i]) **2 \n                            for i in range(30)]).mean()\narma_11_mse_te = np.array([(df_test.values[i] - arma_11_outpred[i]) **2 \n                            for i in range(30)]).mean()\n\n\n\nRandom Forest \u56de\u5e30\nRandom Forest\u56de\u5e30\u306e\u30d9\u30fc\u30b9\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u306f\uff0c\u6c7a\u5b9a\u6728\u56de\u5e30(Decision Tree Regression)\u3067\u3042\u308b\uff0e\u6c7a\u5b9a\u6728\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u81ea\u4f53\uff0c\u5927\u96d1\u628a\u3067\u3082\u7406\u89e3\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308b\u3068\u601d\u308f\u308c\u308b\u304c\uff0c\u672c\u8a18\u4e8b\u3067\u306f\u8aac\u660e\u3092\u7701\u7565\u3057\uff0cScikit-learn\u306e\u6a5f\u80fd\u3092\u30d6\u30e9\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3068\u3057\u3066\u6271\u3046\u3053\u3068\u306b\u3059\u308b\uff0eScikit-learn\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306fExample\u304c\u3042\u308b\u304c\uff0c\u305d\u308c\u3092\u8a66\u3057\u305f\u7d50\u679c\u304c\u4e0b\u56f3\u3067\u3042\u308b\uff0e\nFig. Decision Tree Regression Example\n\n\u968e\u6bb5\u72b6\u306e\u76f4\u7dda\u3067\u30d5\u30a3\u30c3\u30c8\u3059\u308b\u3053\u3068\u304c\u7279\u5fb4\u3068\u306a\u3063\u3066\u3044\u308b\uff0e\u4eca\u56de\u306f\u5358\u5909\u91cf\u306e\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3067\u3042\u308b\u304c\uff0c\u3044\u304f\u3064\u304b\u306e\u904e\u53bb\u306e\u30c7\u30fc\u30bf\u4f7f\u3063\u3066\u73fe\u5728\u306e\u5024\u3092\u63a8\u5b9a\u3059\u308b\u30e2\u30c7\u30eb\u3068\u3057\u3066\u307f\u305f\uff0e\u5177\u4f53\u7684\u306b\u306f\uff0c\nVolume_current ~ Volume_Lag1 + Volume_Lag2 + Volume_Lag3\n\u3068\u3044\u3046\u30e2\u30c7\u30eb\u3067\u3042\u308b\uff0e\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u524d\u56de\u3068\u540c\u3058(70, 30)\u306b\u3057\u305f\u304b\u3063\u305f\u304c\uff0cLag\u5024\u3092\u8a08\u7b97\u3059\u308b\u904e\u7a0b\u3067NaN\u304c\u3067\u308b\u306e\u3067\uff0c\u521d\u3081\u306e\u90e8\u5206\u3092dropna()\u3057\u3066\uff0c(67, 30) \u306e\u30c7\u30fc\u30bf\u9577\u3068\u3057\u305f\uff0e\n\u307e\u305a\uff0c\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\u3092\u884c\u3046\uff0e\ndf_nile['lag1'] = df_nile['volume'].shift(1) \ndf_nile['lag2'] = df_nile['volume'].shift(2)\ndf_nile['lag3'] = df_nile['volume'].shift(3)\n\ndf_nile = df_nile.dropna()\n\nX_train = df_nile[['lag1', 'lag2', 'lag3']][:67].values\nX_test = df_nile[['lag1', 'lag2', 'lag3']][67:].values\n\ny_train = df_nile['volume'][:67].values\ny_test = df_nile['volume'][67:].values\n\nScikit-learn\u306eRandomForestRegressor\u3092\u4f7f\u7528\uff0e\nfrom sklearn.ensemble import RandomForestRegressor\nr_forest = RandomForestRegressor(\n            n_estimators=100,\n            criterion='mse',\n            random_state=1,\n            n_jobs=-1\n)\nr_forest.fit(X_train, y_train)\ny_train_pred = r_forest.predict(X_train)\ny_test_pred = r_forest.predict(X_test)\n\n\u63a8\u5b9a\u5024\u306f\uff0c\u4e0b\u56f3\u306e\u3088\u3046\u306b\u306a\u3063\u305f\uff0e\nFig. Nile data - original data and Random Forest Regression results\n\n\u6700\u5f8c\u306bMSE\u3092\u7b97\u5b9a\u3059\u308b\uff0e\n# check residue (mse)\ntrain_resid = y_train - y_train_pred\nRFR_mse_train = np.array([r ** 2 for r in train_resid]).mean()\ntest_resid = y_test - y_test_pred\nRFR_mse_test = np.array([r ** 2 for r in test_resid]).mean()\n\n\n\u30e2\u30c7\u30eb\u7cbe\u5ea6\u6bd4\u8f03\n\u5404\u30e2\u30c7\u30eb\u306eMSE(Mean Squared Error)\u3092\u6bd4\u8f03\u3059\u308b\uff0e\n\n\n\nModel\nMSE of in-samle (train)\nMSE of out-of-sample (test)\n\n\n\n\nARMA(1,0)\n24111.0\n18684.4\n\n\nARMA(1,1)\n22757.3\n16625.8\n\n\nRandom F. Regressor\n3470.1\n15400.3\n\n\n\n(MSE : smaller ... better)\n\u6b21\u6570\u306e\u7570\u306a\u308bARMA\u30e2\u30c7\u30eb\u540c\u58eb\u306e\u6bd4\u8f03\u3067\u306f\uff0cARMA(1,1) \u306e\u65b9\u304c\u8a13\u7df4\u533a\u9593\uff0c\u30c6\u30b9\u30c8\u533a\u9593\u3068\u3082MSE\u304c\u5c0f\u3055\u304f\u7cbe\u5ea6\u304c\u826f\u3044\u3053\u3068\u304c\u5206\u304b\u308b\u304c\uff0c\u3053\u308c\u306f\u524d\u306b\u6c42\u3081\u305fAIC\u306e\u5024\u306e\u6bd4\u8f03\u3068\u6574\u5408\u6027\u304c\u3042\u308b\uff0e\nARMA\u30e2\u30c7\u30eb\u3068Random Forest\u56de\u5e30\u30e2\u30c7\u30eb\u306e\u6bd4\u8f03\u3067\u306f\uff0c\u8a13\u7df4\u533a\u9593\u3067\u306f\u5927\u304d\u306a\u5dee\u3092\u3064\u3051\u3066Random Forest\u56de\u5e30\u306eMSE\u304c\u5c0f\u3055\u3044\u5024\u3068\u306a\u3063\u3066\u3044\u308b\uff0e\u307e\u305f\u30c6\u30b9\u30c8\u533a\u9593\u3067\u3082Random Forest\u56de\u5e30\u304c\u5c0f\u3055\u3044\u304c\uff0c\u5dee\u306f\u7d04\uff17\uff05\u3067\u3042\u308b\uff0e\u7cbe\u5ea6\u7684\u306b\u306fRandom Forest\u56de\u5e30\u304c\u6709\u5229\u3067\u3042\u308b\u304c\uff0c\u7d71\u8a08\u30e2\u30c7\u30eb\u3092\u5f53\u3066\u306f\u3081\u305fARMA\u30e2\u30c7\u30eb\u3067\u306f\uff0c\u4e88\u6e2c\u4e2d\u592e\u5024\u306e\u4ed6\uff0c\u4fe1\u983c\u533a\u9593\uff08\u4f8b\u3048\u307095%\u4fe1\u983c\u533a\u9593\uff09\u306e\u60c5\u5831\u3082\u5f97\u3089\u308c\u308b\u3068\u3044\u3046\u70b9\u3092\u8003\u616e\u3059\u3079\u304d\u3068\u601d\u308f\u308c\u308b\uff0e\u7528\u9014\u306b\u5fdc\u3058\u3066\u4f7f\u3044\u5206\u3051\u305f\u3044\uff0e\n\uff08ARMA\u3068Random Forest\u56de\u5e30\u306e\u30d7\u30ed\u30c3\u30c8\u56f3\u3092\u898b\u6bd4\u3079\u3066\u307f\u308b\u3068\uff0c\u30e9\u30a4\u30f3\u306e\u69d8\u5b50\u304c\u5927\u304d\u304f\u7570\u306a\u308b\u3053\u3068\u306b\u6539\u3081\u3066\u9a5a\u304b\u3055\u308c\u307e\u3057\u305f\uff0e\u307e\u305f\uff0c\u3069\u306e\u30e2\u30c7\u30eb\u3082\u5341\u5206\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u8abf\u6574\u304c\u3067\u304d\u3066\u3044\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308b\u70b9\u306b\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\uff0e\uff09\n\n\u53c2\u8003\u6587\u732e (web site)\n\nStatsModels Documentation\nhttp://statsmodels.sourceforge.net/stable/index.html\n\nScikit-learn Documentation\nhttp://scikit-learn.org/stable/\n\n\u73fe\u5834\u3067\u3059\u3050\u4f7f\u3048\u308b\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u5206\u6790\uff08\u6a2a\u5185\u5927\u4ecb (\u8457), \u9752\u6728\u7fa9\u5145 (\u8457)\uff09\nhttp://www.amazon.co.jp/ebook/dp/B00KNRL068/\n\nPython Machine Learning - O'reilly media (By Sebastian Raschka)\nhttp://shop.oreilly.com/product/9781783555130.do\n\n\n\nPython\u3067\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u5206\u6790\u3092\u884c\u3046\u5834\u5408\uff0c\u7d71\u8a08\u30e2\u30c7\u30ea\u30f3\u30b0\u306eStatsModels\u304c\u5099\u3048\u308bTimes series analysis (tsa) \u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3046\u306e\u304c\u7b2c1\u306e\u9078\u629e\u80a2\u306b\u306a\u308b\u3068\u8003\u3048\u3089\u308c\u308b\uff0e\u307e\u305f\uff0c\u6a5f\u68b0\u5b66\u7fd2\u30e9\u30a4\u30d6\u30e9\u30ea  Scikit-learn \u306b\u306f\u5225\u306e\u30b3\u30f3\u30bb\u30d7\u30c8\u3067\u56de\u5e30\u3092\u884c\u3046\uff0c\u6c7a\u5b9a\u6728\u56de\u5e30(Decision Tree Regression)\u3084Random Forest Regression\u304c\u3042\u308b\u306e\u3067\uff0c\u3053\u308c\u3082\u8a66\u3057\u3066\u307f\u305f\u3044\u3068\u8003\u3048\uff0c\u6bd4\u8f03\u691c\u8a0e\u3057\u305f\uff0e\n\n\uff08\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u74b0\u5883\uff1aPython 2.7.11, Pandas 0.18.0, StatsModels 0.6.1, Scikit-learn 0.17.1 \u306b\u306a\u308a\u307e\u3059\uff0e\uff09\n\n## \u4f1d\u7d71\u7684\u306a\u81ea\u5df1\u56de\u5e30\u30e2\u30c7\u30eb\u306e\u30b0\u30eb\u30fc\u30d7\n\n\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u5206\u6790\u306e\u6587\u732e\u3092\u958b\u304f\u3068\u591a\u304f\u306e\u5834\u5408\uff0c\u6b21\u306e\u9806\u756a\u3067\u8aac\u660e\u304c\u51fa\u3066\u304f\u308b\uff0e\n\n| \u7565\u79f0 | \u8aac\u660e  |\n|:-----:|:-----|\n| **AR** | \u81ea\u5df1\u56de\u5e30(Auto Regression)\u30e2\u30c7\u30eb |\n| **MA** | \u79fb\u52d5\u5e73\u5747(Moving Average)\u30e2\u30c7\u30eb |\n| **ARMA** | \u81ea\u5df1\u56de\u5e30\u79fb\u52d5\u5e73\u5747\u30e2\u30c7\u30eb  |\n| **ARIMA** | \u81ea\u5df1\u56de\u5e30\u548c\u5206\u79fb\u52d5\u5e73\u5747\u30e2\u30c7\u30eb |\n\n\u5404\u30e2\u30c7\u30eb\u306e\u8a73\u7d30\u306fWikipedia\u7b49\u3092\u53c2\u7167\u3057\u3066\u3044\u305f\u3060\u304f\u3068\u3057\u3066\uff0c\u57fa\u672c\u7684\u306b**ARMA**\u306f\uff0c**AR** , **MA**\u3092\u542b\u6709\u3059\u308b\u30e2\u30c7\u30eb\u3067\u3042\u308a\uff0c **ARIMA** \u306f\uff0c**ARMA** \u3092\u542b\u3080\u30e2\u30c7\u30eb\u306a\u306e\u3067\uff0c\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u306f **ARIMA** \u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308c\u3070\uff0c\u4e0a\u8a18\uff14\u3064\u306e\u30e2\u30c7\u30eb\u306f\u3059\u3079\u3066\u5bfe\u5fdc\u53ef\u80fd\u3068\u306a\u308b\uff0e\u4f46\u3057\uff0cStatsModels\u3067\u306fAPI\u3068\u3057\u3066**AR**, **ARMA**, **ARIMA** \u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\uff0e\n\nhttp://statsmodels.sourceforge.net/stable/tsa.html\n\n\u4eca\u56de\uff0c\u5206\u6790\u3092\u884c\u3046\u30c7\u30fc\u30bf\u3068\u3057\u3066\uff0c\"Nile\" \u3092\u53d6\u308a\u4e0a\u3052\u305f\uff0e\n\n> Nile River flows at Ashwan 1871-1970\n> This dataset contains measurements on the annual flow of the Nile as measured at Ashwan for 100 years from 1871-1970. There is an apparent changepoint near 1898.\n\n\u30a2\u30d5\u30ea\u30ab\uff0c\u30ca\u30a4\u30eb\u5ddd\u6d41\u91cf\u306e\u5404\u5e74\u3054\u3068\u306e\u30c7\u30fc\u30bf\u3067\uff0cStatsModel\u30e9\u30a4\u30d6\u30e9\u30ea\u5185\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3067\u3042\u308b\uff0e\n\n![Nile_1.png](https://qiita-image-store.s3.amazonaws.com/0/74152/a012f36f-bf1f-470c-6f29-526bacf8f9d9.png)\n\n\u81ea\u5df1\u56de\u5e30\u30e2\u30c7\u30eb\u3067\u306f\u591a\u304f\u306e\u5834\u5408\u300c\u5b9a\u5e38\u6027\u300d\u304c\u30e2\u30c7\u30eb\u9069\u7528\u306e\u524d\u63d0\u6761\u4ef6\u306b\u306a\u3063\u3066\u3044\u308b\u304c\uff0c\u4e0a\u306e\u30d7\u30ed\u30c3\u30c8\u3067\u306f\u5358\u8abf\u5897\u52a0\uff0c\u5358\u8abf\u6e1b\u5c11\u306e\u69d8\u5b50\u304c\u898b\u3089\u308c\u306a\u3044\u306e\u3067\uff0c**ARMA**\u30e2\u30c7\u30eb\u3092\u5f53\u3066\u306f\u3081\u308b\u3053\u3068\u306b\u3059\u308b\uff0e\n\n\n### ARMA\u30e2\u30c7\u30eb\u306e\u6b21\u6570\u9078\u629e\n\n\u304a\u3088\u305d100\u5e74\u9593\u306e\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3067\uff0c\u30d5\u30a3\u30c3\u30c8\u7528\uff08\u8a13\u7df4\u7528\uff09\u306e\u30c7\u30fc\u30bf\u3068\u3057\u3066\u524d\u534a70\u5e74\u5206\uff0c\u30e2\u30c7\u30eb\u30c6\u30b9\u30c8\u7528\u306e\u30c7\u30fc\u30bf\u3068\u3057\u3066\u5f8c\u534a30\u5e74\u5206\u3092\u5272\u308a\u5f53\u3066\u308b\u3053\u3068\u3068\u3059\u308b\uff0eARMA\u30e2\u30c7\u30eb\u306e\u6b21\u6570(p, q)\u3092\u9078\u3076\u5fc5\u8981\u304c\u3042\u308b\u304c\uff0c\u307e\u305a\u30b3\u30ec\u30ed\u30b0\u30e9\u30e0\u3068\u3082\u547c\u3070\u308c\u308bACF\u30d7\u30ed\u30c3\u30c8(Autocorrelation function plot), PACF\u30d7\u30ed\u30c3\u30c8(Partial autocorrelation plot)\u3092\u4f5c\u56f3\u3057\u3066\u307f\u308b\uff0e\n\n```py\ndef load_data():\n    df_read = sm.datasets.nile.load_pandas().data\n    s_date = pd.Series(\n        [pd.to_datetime(str(int(y_str))) for y_str in df_read['year']]\n    )\n    df = df_read.set_index(s_date)\n    df = df.drop('year', axis=1)\n    \n    return df\n\ndf_nile = load_data()\n\n# Plot Time Series Data\nax = df_nile['volume'].plot(figsize=(8,4), grid=True)\nax.set_xlabel('year')\nax.set_ylabel('volume x 10^8 m^3')\nplt.show()\n\n# Data Split (70: 30)\n# ACF, PACF\nfig = plt.figure(figsize=(12,8))\nax1 = fig.add_subplot(211)\nfig = sm.graphics.tsa.plot_acf(df_train.values, lags=40, ax=ax1)\nax2 = fig.add_subplot(212)\nfig = sm.graphics.tsa.plot_pacf(df_train.values, lags=40, ax=ax2)\n```\n\n**Fig. ACF and PACF plot of \"Nile\" data**\n![Nile_2.png](https://qiita-image-store.s3.amazonaws.com/0/74152/98f04c1b-ec1d-f685-d810-53b4c4b7e709.png)\n\nARMA(p, q) \u3067\uff0cACF\u30d7\u30ed\u30c3\u30c8\uff08\u4e0a\uff09\u3088\u308a q=[0, 1, 2, 3] \u304c\u9078\u629e\u80a2\u306b\u5165\u308a\uff0cPACF\u30d7\u30ed\u30c3\u30c8\uff08\u4e0b\uff09\u3088\u308a p = [0, 1] \u304c\u9078\u629e\u80a2\u306b\u5165\u308b\u3053\u3068\u304c\uff08\u306a\u3093\u3068\u306a\u304f\uff09\u5206\u304b\u308b\uff0e\u4e00\u5fdc\uff0cARMA(p=1, q=3) \u3092\u8996\u91ce\u306b\u5165\u308c\u3064\u3064\u6b21\u6570\u9078\u629e\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u3067\u60c5\u5831\u3092\u51fa\u529b\u3055\u305b\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u305f\uff0e\n\n```py\ninfo_criteria = sm.tsa.stattools.arma_order_select_ic(\n                    df_train.values, ic=['aic', 'bic']\n                )\nprint(info_criteria.aic_min_order)\nprint(info_criteria.bic_min_order)\n\nConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n  \"Check mle_retvals\", ConvergenceWarning)\n>>> (1, 1)\n>>> (1, 0)\n```\n\n\u53ce\u675f\u6027\u306b\u95a2\u3059\u308bWarning\u304c\u51fa\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\uff0eWarning\u3092\u3075\u307e\u3048\u305f\u4e0a\u3067\uff0cAIC\uff08\u30e2\u30c7\u30eb\u9078\u629e\u57fa\u6e96\u5024\uff09\u304b\u3089\u306fARMA(1,  1), BIC\uff08\u30e2\u30c7\u30eb\u9078\u629e\u57fa\u6e96\u5024\uff09\u304b\u3089\u306fAMMA(1, 0) \u304c\u826f\u3055\u305d\u3046\u3068\u306e\u60c5\u5831\u3092\u5f97\u305f\uff0e\u3088\u3063\u3066\u3053\u306e\uff12\u3064\u306e\u30e2\u30c7\u30eb\u3092\u30c7\u30fc\u30bf\u306b\u30d5\u30a3\u30c3\u30c8\u3055\u305b\u3066\u307f\u308b\uff0e\n\n```py\narma_10 = sm.tsa.ARMA(df_train, (1, 0)).fit()\narma_11 = sm.tsa.ARMA(df_train, (1, 1)).fit()\n```\n\n\u3053\u308c\u306f\uff0c\u7279\u306bError, Warning\u3082\u306a\u304f\u51e6\u7406\u3055\u308c\u305f\uff0e\u623b\u308a\u5024 arma_10, arma_11 \u306f\u30d5\u30a3\u30c3\u30c8\u5f8c\u306e\u30e2\u30c7\u30eb\u30fb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8(ARMAResults\u30af\u30e9\u30b9\uff09\u3067\u3042\u308b\uff0e\u4e00\u5fdc\uff0c\u3088\u308a\u9ad8\u6b21\u306e\u30e2\u30c7\u30ebARMA(1, 2), ARMA(1, 3) \u3082\u8a66\u3057\u3066\u307f\u305f\uff0e\n\n```py\narma_12 = sm.tsa.ARMA(df_train, (1, 2)).fit()\narma_13 = sm.tsa.ARMA(df_train, (1, 3)).fit()\n\n\uff08\u4e2d\u7565\uff0cTraceback \u60c5\u5831\u306a\u3069\uff0e\uff09\n\nValueError: The computed initial AR coefficients are not stationary\nYou should induce stationarity, choose a different model order, or you can\npass your own start_params.\n\n```\n\n\u4e0a\u306e\u3088\u3046\u306aValueError\u304c\u767a\u751f\u3057\u305f\uff0e\uff08\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\uff0c\u5b9a\u5e38\u6027(stationary)\u306b\u3064\u3044\u3066\u8a00\u53ca\u3057\u3066\u3044\u307e\u3059\u304c...\uff09\u30d1\u30e9\u30e1\u30fc\u30bf\u7b97\u5b9a\u6642\u306b\u304a\u3051\u308b\u53ce\u675f\u6027\u306b\u554f\u984c\u304c\u3042\u308aARMA(1, 2)\uff0cARMA(1, 3)\u3078\u306e\u5f53\u3066\u306f\u3081\u306f\u96e3\u3057\u3044\u72b6\u6cc1\u3067\u3042\u308b\uff0e\u3053\u306e\u5148\uff0c\u3053\u306e\u539f\u56e0\u3092\u6df1\u304f\u8ffd\u53ca\u3057\u3066\u3082\u3044\u3044\u304c\uff0c\u4eca\u56de\u306f\uff0cARMA vs. Random Forest Regressor \u304c\u30c6\u30fc\u30de\u3067\u3042\u308b\u306e\u3067\uff0c\u30d5\u30a3\u30c3\u30c8\u304c\u3067\u304d\u305fARMA(1, 0)\u3068ARMA(1, 1) \u3092\u7528\u3044\u3066\u691c\u8a0e\u3092\u9032\u3081\u308b\uff0e\n\n## ARMA\u30e2\u30c7\u30eb\u306e\u691c\u8a3c\n\u307e\u305a\uff0cAIC\u306e\u5024\u3092\u78ba\u8a8d\u3059\u308b\uff0e\n\n```py\nprint('ARMA(1,0): AIC = %.2f' % arma_10.aic)\nprint('ARMA(1,1): AIC = %.2f' % arma_11.aic)\n>>> ARMA(1,0): AIC = 910.94\n>>> ARMA(1,1): AIC = 908.92\n```\n\nAIC\u5024\u306f\uff0cARMA(1, 1)\u30e2\u30c7\u30eb\u306e\u65b9\u304c\u5c0f\u3055\u3044\uff0e\n\n\u6b21\u306b\u8a13\u7df4\u30c7\u30fc\u30bf\u533a\u9593\uff0870\u5e74\u5206\uff09\u306e\u30e2\u30c7\u30eb\u63a8\u5b9a\u5024\u3068\u305d\u306e\u5f8c\u306e\u30c6\u30b9\u30c8\u533a\u9593\uff0830\u5e74\uff09\u306e\u30e2\u30c7\u30eb\u63a8\u5b9a\u5024\u3092\u7b97\u51fa\u3059\u308b\uff0e\n\n```py\n# in-sample predict\narma_10_inpred = arma_10.predict(start='1871-01-01', end='1940-01-01')\narma_11_inpred = arma_11.predict(start='1871-01-01', end='1940-01-01')\n\n# out-of-sample predict\narma_10_outpred = arma_10.predict(start='1941-01-01', end='1970-01-01')\narma_11_outpred = arma_11.predict(start='1941-01-01', end='1970-01-01')\n```\n\nAIC\u306e\u7b97\u5b9a\uff0c\u63a8\u5b9a\u5024\u306e\u7b97\u51fa\u3068\u3082\u306bARMA\u30e2\u30c7\u30eb\u7d50\u679c\u30af\u30e9\u30b9(ARMAResults\u30af\u30e9\u30b9)\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306a\u5b9f\u88c5\u3068\u306a\u3063\u3066\u3044\u308b\uff0e\u5143\u30c7\u30fc\u30bf\u306e\u5024\uff0c\u63a8\u5b9a\u5024\u3092\u307e\u3068\u3081\u3066\u30d7\u30ed\u30c3\u30c8\u3059\u308b\uff0e\n\n```py\n# plot data and predicted values\ndef plot_ARMA_results(origdata, pred10in, pred10out, pred11in, pred11out):\n    px = origdata.index\n    py1 = origdata.values\n    plt.plot(px, py1, 'b:', label='orig data')\n    \n    px_in = pred10in.index\n    plt.plot(px_in, pred10in.values, 'g')\n    plt.plot(px_in, pred11in.values, 'c')\n    \n    px_out = pred10out.index\n    plt.plot(px_out, pred10out.values, 'g', label='ARMA(1,0)')\n    plt.plot(px_out, pred11out.values, 'c', label='ARMA(1,1)')\n    \n    plt.legend()\n    plt.grid(True)\n    plt.show()\n\nplot_ARMA_results(df_nile, arma_10_inpred, arma_10_outpred, \n    arma_11_inpred, arma_11_outpred)\n\n```\n**Fig. Nile data - original data and ARMA estimated data**\n![Nile_3.png](https://qiita-image-store.s3.amazonaws.com/0/74152/8388894d-4633-8f50-9ebe-e91d73ae427d.png)\n\n1870\u5e74\u304b\u30891940\u5e74\u307e\u3067\u304c\u8a13\u7df4\u533a\u9593 (in-sample)\uff0c\u305d\u308c\u4ee5\u964d\u304c\u30c6\u30b9\u30c8\u533a\u9593(out-of-sample)\u3067\u3042\u308b\uff0e\u5c11\u3057\u5206\u304b\u308a\u306b\u304f\u3044\u304c\uff0c\u306a\u3093\u3068\u306a\u304fARMA(1,1)\u306e\u65b9\u304c\uff0c\u5b9f\u30c7\u30fc\u30bf\u306b\u8fd1\u3044\u3088\u3046\u306b\u898b\u3048\u308b\uff0e\u5f8c\u3067\u30e2\u30c7\u30eb\u6bd4\u8f03\u306e\u305f\u3081\uff0c\u6b8b\u5dee\u304b\u3089MSE(Mean Squared Error)\u3092\u6c42\u3081\u3066\u304a\u304f\uff0e\n\n```py\n# Residue (mse for train) \narma_10_mse_tr = np.array([r ** 2 for r in arma_10.resid]).mean()\narma_11_mse_tr = np.array([r ** 2 for r in arma_11.resid]).mean()\n\n# Residue (mse for test)\narma_10_mse_te = np.array([(df_test.values[i] - arma_10_outpred[i]) **2 \n                            for i in range(30)]).mean()\narma_11_mse_te = np.array([(df_test.values[i] - arma_11_outpred[i]) **2 \n                            for i in range(30)]).mean()\n\n```\n\n## Random Forest \u56de\u5e30\n\nRandom Forest\u56de\u5e30\u306e\u30d9\u30fc\u30b9\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u306f\uff0c\u6c7a\u5b9a\u6728\u56de\u5e30(Decision Tree Regression)\u3067\u3042\u308b\uff0e\u6c7a\u5b9a\u6728\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u81ea\u4f53\uff0c\u5927\u96d1\u628a\u3067\u3082\u7406\u89e3\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308b\u3068\u601d\u308f\u308c\u308b\u304c\uff0c\u672c\u8a18\u4e8b\u3067\u306f\u8aac\u660e\u3092\u7701\u7565\u3057\uff0cScikit-learn\u306e\u6a5f\u80fd\u3092\u30d6\u30e9\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3068\u3057\u3066\u6271\u3046\u3053\u3068\u306b\u3059\u308b\uff0eScikit-learn\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306fExample\u304c\u3042\u308b\u304c\uff0c\u305d\u308c\u3092\u8a66\u3057\u305f\u7d50\u679c\u304c\u4e0b\u56f3\u3067\u3042\u308b\uff0e\n\n**Fig. Decision Tree Regression Example**\n![tree_regression_s.png](https://qiita-image-store.s3.amazonaws.com/0/74152/e9f130ef-06e3-a002-b92e-0833e46b0ded.png)\n\n\u968e\u6bb5\u72b6\u306e\u76f4\u7dda\u3067\u30d5\u30a3\u30c3\u30c8\u3059\u308b\u3053\u3068\u304c\u7279\u5fb4\u3068\u306a\u3063\u3066\u3044\u308b\uff0e\u4eca\u56de\u306f\u5358\u5909\u91cf\u306e\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3067\u3042\u308b\u304c\uff0c\u3044\u304f\u3064\u304b\u306e\u904e\u53bb\u306e\u30c7\u30fc\u30bf\u4f7f\u3063\u3066\u73fe\u5728\u306e\u5024\u3092\u63a8\u5b9a\u3059\u308b\u30e2\u30c7\u30eb\u3068\u3057\u3066\u307f\u305f\uff0e\u5177\u4f53\u7684\u306b\u306f\uff0c\n` Volume_current ~ Volume_Lag1 + Volume_Lag2 + Volume_Lag3`\n\u3068\u3044\u3046\u30e2\u30c7\u30eb\u3067\u3042\u308b\uff0e\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u524d\u56de\u3068\u540c\u3058(70, 30)\u306b\u3057\u305f\u304b\u3063\u305f\u304c\uff0cLag\u5024\u3092\u8a08\u7b97\u3059\u308b\u904e\u7a0b\u3067NaN\u304c\u3067\u308b\u306e\u3067\uff0c\u521d\u3081\u306e\u90e8\u5206\u3092dropna()\u3057\u3066\uff0c(67, 30) \u306e\u30c7\u30fc\u30bf\u9577\u3068\u3057\u305f\uff0e\n\n\u307e\u305a\uff0c\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\u3092\u884c\u3046\uff0e\n\n```py\ndf_nile['lag1'] = df_nile['volume'].shift(1) \ndf_nile['lag2'] = df_nile['volume'].shift(2)\ndf_nile['lag3'] = df_nile['volume'].shift(3)\n\ndf_nile = df_nile.dropna()\n\nX_train = df_nile[['lag1', 'lag2', 'lag3']][:67].values\nX_test = df_nile[['lag1', 'lag2', 'lag3']][67:].values\n\ny_train = df_nile['volume'][:67].values\ny_test = df_nile['volume'][67:].values\n```\n\nScikit-learn\u306eRandomForestRegressor\u3092\u4f7f\u7528\uff0e\n\n```py\nfrom sklearn.ensemble import RandomForestRegressor\nr_forest = RandomForestRegressor(\n            n_estimators=100,\n            criterion='mse',\n            random_state=1,\n            n_jobs=-1\n)\nr_forest.fit(X_train, y_train)\ny_train_pred = r_forest.predict(X_train)\ny_test_pred = r_forest.predict(X_test)\n```\n\n\u63a8\u5b9a\u5024\u306f\uff0c\u4e0b\u56f3\u306e\u3088\u3046\u306b\u306a\u3063\u305f\uff0e\n\n**Fig. Nile data - original data and Random Forest Regression results**\n![Nile_4.png](https://qiita-image-store.s3.amazonaws.com/0/74152/c0f1e48a-a2c0-99fc-0a03-e3dd1eec4479.png)\n\n\u6700\u5f8c\u306bMSE\u3092\u7b97\u5b9a\u3059\u308b\uff0e\n\n```py\n# check residue (mse)\ntrain_resid = y_train - y_train_pred\nRFR_mse_train = np.array([r ** 2 for r in train_resid]).mean()\ntest_resid = y_test - y_test_pred\nRFR_mse_test = np.array([r ** 2 for r in test_resid]).mean()\n```\n\n## \u30e2\u30c7\u30eb\u7cbe\u5ea6\u6bd4\u8f03\n\u5404\u30e2\u30c7\u30eb\u306eMSE(Mean Squared Error)\u3092\u6bd4\u8f03\u3059\u308b\uff0e\n\n|    Model   |  MSE of in-samle (train)  | MSE of out-of-sample (test) |\n|:----------:|:-----:|:-----:|\n| ARMA(1,0) | 24111.0 | 18684.4 |\n| ARMA(1,1) | 22757.3  | 16625.8 | \n| Random F. Regressor | 3470.1 | 15400.3 |\n\n(MSE : smaller ... better)\n\n\u6b21\u6570\u306e\u7570\u306a\u308bARMA\u30e2\u30c7\u30eb\u540c\u58eb\u306e\u6bd4\u8f03\u3067\u306f\uff0cARMA(1,1) \u306e\u65b9\u304c\u8a13\u7df4\u533a\u9593\uff0c\u30c6\u30b9\u30c8\u533a\u9593\u3068\u3082MSE\u304c\u5c0f\u3055\u304f\u7cbe\u5ea6\u304c\u826f\u3044\u3053\u3068\u304c\u5206\u304b\u308b\u304c\uff0c\u3053\u308c\u306f\u524d\u306b\u6c42\u3081\u305fAIC\u306e\u5024\u306e\u6bd4\u8f03\u3068\u6574\u5408\u6027\u304c\u3042\u308b\uff0e\n\nARMA\u30e2\u30c7\u30eb\u3068Random Forest\u56de\u5e30\u30e2\u30c7\u30eb\u306e\u6bd4\u8f03\u3067\u306f\uff0c\u8a13\u7df4\u533a\u9593\u3067\u306f\u5927\u304d\u306a\u5dee\u3092\u3064\u3051\u3066Random Forest\u56de\u5e30\u306eMSE\u304c\u5c0f\u3055\u3044\u5024\u3068\u306a\u3063\u3066\u3044\u308b\uff0e\u307e\u305f\u30c6\u30b9\u30c8\u533a\u9593\u3067\u3082Random Forest\u56de\u5e30\u304c\u5c0f\u3055\u3044\u304c\uff0c\u5dee\u306f\u7d04\uff17\uff05\u3067\u3042\u308b\uff0e\u7cbe\u5ea6\u7684\u306b\u306fRandom Forest\u56de\u5e30\u304c\u6709\u5229\u3067\u3042\u308b\u304c\uff0c\u7d71\u8a08\u30e2\u30c7\u30eb\u3092\u5f53\u3066\u306f\u3081\u305fARMA\u30e2\u30c7\u30eb\u3067\u306f\uff0c\u4e88\u6e2c\u4e2d\u592e\u5024\u306e\u4ed6\uff0c\u4fe1\u983c\u533a\u9593\uff08\u4f8b\u3048\u307095%\u4fe1\u983c\u533a\u9593\uff09\u306e\u60c5\u5831\u3082\u5f97\u3089\u308c\u308b\u3068\u3044\u3046\u70b9\u3092\u8003\u616e\u3059\u3079\u304d\u3068\u601d\u308f\u308c\u308b\uff0e\u7528\u9014\u306b\u5fdc\u3058\u3066\u4f7f\u3044\u5206\u3051\u305f\u3044\uff0e\n\n\uff08ARMA\u3068Random Forest\u56de\u5e30\u306e\u30d7\u30ed\u30c3\u30c8\u56f3\u3092\u898b\u6bd4\u3079\u3066\u307f\u308b\u3068\uff0c\u30e9\u30a4\u30f3\u306e\u69d8\u5b50\u304c\u5927\u304d\u304f\u7570\u306a\u308b\u3053\u3068\u306b\u6539\u3081\u3066\u9a5a\u304b\u3055\u308c\u307e\u3057\u305f\uff0e\u307e\u305f\uff0c\u3069\u306e\u30e2\u30c7\u30eb\u3082\u5341\u5206\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u8abf\u6574\u304c\u3067\u304d\u3066\u3044\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308b\u70b9\u306b\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\uff0e\uff09\n\n\n## \u53c2\u8003\u6587\u732e (web site)\n- StatsModels Documentation\nhttp://statsmodels.sourceforge.net/stable/index.html\n- Scikit-learn Documentation\nhttp://scikit-learn.org/stable/\n- \u73fe\u5834\u3067\u3059\u3050\u4f7f\u3048\u308b\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u5206\u6790\uff08\u6a2a\u5185\u5927\u4ecb (\u8457), \u9752\u6728\u7fa9\u5145 (\u8457)\uff09\nhttp://www.amazon.co.jp/ebook/dp/B00KNRL068/\n- Python Machine Learning - O'reilly media (By Sebastian Raschka)\nhttp://shop.oreilly.com/product/9781783555130.do\n\n\n\n\n", "tags": ["Python", "statsmodels", "scikit-learn"]}