{"tags": ["Agda", "polymorphic"], "context": "\n\nAgda\u3067\u30a2\u30c9\u30db\u30c3\u30af\u591a\u76f8\u306eAgda-2.5.1\u5bfe\u5fdc\u7248\nAgda\u3067\u30a2\u30c9\u30db\u30c3\u30af\u591a\u76f8\u306fimplicit argument\u306esemantics\u304c\u5909\u66f4\u306b\u306a\u3063\u305f\u3053\u3068\u30672.4\u4ee5\u964d\u306f\u4f7f\u3048\u306a\u304f\u306a\u3063\u305f.\n\u3058\u3083\u3042\u3069\u3046\u3084\u3063\u3066\u66f8\u304f\u306e\u304b?\ninstance\u3068\u3044\u3046\u30ad\u30fc\u30ef\u30fc\u30c9\u304c\u8ffd\u52a0\u306b\u306a\u3063\u3066\u3066\u3053\u3044\u3064\u3092\u4f7f\u3046\u3089\u3057\u3044.\n\u3042\u3068\u306f\u3082\u3046\u66f8\u304f\u3060\u3051.\u6839\u6027\u3067\u4e57\u308a\u5207\u308c.\n\nclass.agda\nmodule class where\n\nopen import Data.Bool\nopen import Data.Nat hiding (_<_; _>_)\n\nrecord Eq (t : Set) : Set where\n  field _==_ : t \u2192 t \u2192 Bool\n  _/=_ : t \u2192 t \u2192 Bool\n  x /= y = not (x == y)\n\nopen Eq \u2983 ... \u2984\n\ninstance\n  eqN : Eq \u2115\n  eqN = record { _==_ = eq' }\n    where\n      eq' : \u2115 \u2192 \u2115 \u2192 Bool\n      eq' zero zero = true\n      eq' zero (suc m) = false\n      eq' (suc n) zero = false\n      eq' (suc n) (suc m) = eq' n m\n  eqB : Eq Bool\n  eqB = record { _==_ = eq' }\n    where\n      eq' : Bool \u2192 Bool \u2192 Bool\n      eq' false false = true\n      eq' false true = false\n      eq' true false = false\n      eq' true true = true\n\ntest\u2080 : Bool\ntest\u2080 = true == false \u2228 4 /= 5\n\nrecord Ord (t : Set) : Set where\n  field\n    eqT : Eq t\n    _<_ : t \u2192 t \u2192 Bool\n  _<=_ : t \u2192 t \u2192 Bool\n  x <= y = x < y \u2228 x === y where open Eq eqT renaming (_==_ to _===_)\n  _>_ : t \u2192 t \u2192 Bool\n  x > y = not (x <= y)\n  _>=_ : t \u2192 t \u2192 Bool\n  x >= y = y <= x\n\nopen Ord \u2983 ... \u2984\n\ninstance\n  ordN : Ord \u2115\n  ordN = record { eqT = eqN; _<_ = lt' }\n    where\n      lt' : \u2115 \u2192 \u2115 \u2192 Bool\n      lt' zero zero = false\n      lt' zero (suc y) = true\n      lt' (suc x) zero = false\n      lt' (suc x) (suc y) = lt' x y\n\n  ordB : Ord Bool\n  ordB = record { eqT = eqB; _<_ = lt' }\n    where\n      lt' : Bool \u2192 Bool \u2192 Bool\n      lt' false false = false\n      lt' false true = false\n      lt' true false = true\n      lt' true true = false\n\ntest\u2081 : Bool\ntest\u2081 = 5 < 3 \u2227 false < true\ntest\u2082 : Bool\ntest\u2082 = 5 <= 3 \u2228 false <= true\ntest\u2083 : Bool\ntest\u2083 = 5 > 3 \u2227 false > true\ntest\u2084 : Bool\ntest\u2084 = 5 >= 3 \u2228 false >= true\n\nopen import Data.List\n\ninstance\n  listEq : {t : Set} \u2192 \u2983 eqT : Eq t \u2984 \u2192 Eq (List t)\n  listEq {t} \u2983 eqT \u2984 = record { _==_ = eq' }\n    where\n      eq' : List t \u2192 List t \u2192 Bool\n      eq' [] [] = true\n      eq' [] (x \u2237 y) = false\n      eq' (x \u2237 x\u2081) [] = false\n      eq' (x \u2237 xs) (y \u2237 ys) = x == y \u2227 eq' xs ys\n\ntest\u2085 : Bool\ntest\u2085 = (1 \u2237 []) == (2 \u2237 3 \u2237 []) \u2227 (true \u2237 []) /= (false \u2237 true \u2237 [])\n\ninstance\n  listOrd : {t : Set} \u2192 \u2983 ordT : Ord t \u2984 \u2192 Ord (List t)\n  listOrd {t} \u2983 ordT \u2984 = record { eqT = listEq {t} \u2983 eqT \u2984 ; _<_ = lt' }\n    where\n      lt' : List t \u2192 List t \u2192 Bool\n      lt' [] [] = false\n      lt' [] (x \u2237 y) = true\n      lt' (x \u2237 xs) [] = false\n      lt' (x \u2237 xs) (y \u2237 ys) = x < y \u2227 lt' xs ys\n\ntest\u2086 : Bool\ntest\u2086 = (1 \u2237 []) < (2 \u2237 3 \u2237 []) \u2227 (true \u2237 []) < (false \u2237 true \u2237 [])\n\ntest\u2087 : Bool\ntest\u2087 = (1 \u2237 []) <= (2 \u2237 3 \u2237 []) \u2227 (true \u2237 []) <= (false \u2237 true \u2237 [])\n\ntest\u2088 : Bool\ntest\u2088 = (1 \u2237 []) > (2 \u2237 3 \u2237 []) \u2227 (true \u2237 []) > (false \u2237 true \u2237 [])\n\ntest\u2089 : Bool\ntest\u2089 = (1 \u2237 []) >= (2 \u2237 3 \u2237 []) \u2227 (true \u2237 []) >= (false \u2237 true \u2237 [])\n\n\n# Agda\u3067\u30a2\u30c9\u30db\u30c3\u30af\u591a\u76f8\u306eAgda-2.5.1\u5bfe\u5fdc\u7248\n\n[Agda\u3067\u30a2\u30c9\u30db\u30c3\u30af\u591a\u76f8](http://qiita.com/cutsea110/items/4f6a6fea43ba740a00e1)\u306fimplicit argument\u306esemantics\u304c\u5909\u66f4\u306b\u306a\u3063\u305f\u3053\u3068\u30672.4\u4ee5\u964d\u306f\u4f7f\u3048\u306a\u304f\u306a\u3063\u305f.\n\n\u3058\u3083\u3042\u3069\u3046\u3084\u3063\u3066\u66f8\u304f\u306e\u304b?\ninstance\u3068\u3044\u3046\u30ad\u30fc\u30ef\u30fc\u30c9\u304c\u8ffd\u52a0\u306b\u306a\u3063\u3066\u3066\u3053\u3044\u3064\u3092\u4f7f\u3046\u3089\u3057\u3044.\n\u3042\u3068\u306f\u3082\u3046\u66f8\u304f\u3060\u3051.\u6839\u6027\u3067\u4e57\u308a\u5207\u308c.\n\n```class.agda\nmodule class where\n\nopen import Data.Bool\nopen import Data.Nat hiding (_<_; _>_)\n\nrecord Eq (t : Set) : Set where\n  field _==_ : t \u2192 t \u2192 Bool\n  _/=_ : t \u2192 t \u2192 Bool\n  x /= y = not (x == y)\n\nopen Eq \u2983 ... \u2984\n\ninstance\n  eqN : Eq \u2115\n  eqN = record { _==_ = eq' }\n    where\n      eq' : \u2115 \u2192 \u2115 \u2192 Bool\n      eq' zero zero = true\n      eq' zero (suc m) = false\n      eq' (suc n) zero = false\n      eq' (suc n) (suc m) = eq' n m\n  eqB : Eq Bool\n  eqB = record { _==_ = eq' }\n    where\n      eq' : Bool \u2192 Bool \u2192 Bool\n      eq' false false = true\n      eq' false true = false\n      eq' true false = false\n      eq' true true = true\n\ntest\u2080 : Bool\ntest\u2080 = true == false \u2228 4 /= 5\n\nrecord Ord (t : Set) : Set where\n  field\n    eqT : Eq t\n    _<_ : t \u2192 t \u2192 Bool\n  _<=_ : t \u2192 t \u2192 Bool\n  x <= y = x < y \u2228 x === y where open Eq eqT renaming (_==_ to _===_)\n  _>_ : t \u2192 t \u2192 Bool\n  x > y = not (x <= y)\n  _>=_ : t \u2192 t \u2192 Bool\n  x >= y = y <= x\n\nopen Ord \u2983 ... \u2984\n\ninstance\n  ordN : Ord \u2115\n  ordN = record { eqT = eqN; _<_ = lt' }\n    where\n      lt' : \u2115 \u2192 \u2115 \u2192 Bool\n      lt' zero zero = false\n      lt' zero (suc y) = true\n      lt' (suc x) zero = false\n      lt' (suc x) (suc y) = lt' x y\n\n  ordB : Ord Bool\n  ordB = record { eqT = eqB; _<_ = lt' }\n    where\n      lt' : Bool \u2192 Bool \u2192 Bool\n      lt' false false = false\n      lt' false true = false\n      lt' true false = true\n      lt' true true = false\n\ntest\u2081 : Bool\ntest\u2081 = 5 < 3 \u2227 false < true\ntest\u2082 : Bool\ntest\u2082 = 5 <= 3 \u2228 false <= true\ntest\u2083 : Bool\ntest\u2083 = 5 > 3 \u2227 false > true\ntest\u2084 : Bool\ntest\u2084 = 5 >= 3 \u2228 false >= true\n\nopen import Data.List\n\ninstance\n  listEq : {t : Set} \u2192 \u2983 eqT : Eq t \u2984 \u2192 Eq (List t)\n  listEq {t} \u2983 eqT \u2984 = record { _==_ = eq' }\n    where\n      eq' : List t \u2192 List t \u2192 Bool\n      eq' [] [] = true\n      eq' [] (x \u2237 y) = false\n      eq' (x \u2237 x\u2081) [] = false\n      eq' (x \u2237 xs) (y \u2237 ys) = x == y \u2227 eq' xs ys\n\ntest\u2085 : Bool\ntest\u2085 = (1 \u2237 []) == (2 \u2237 3 \u2237 []) \u2227 (true \u2237 []) /= (false \u2237 true \u2237 [])\n\ninstance\n  listOrd : {t : Set} \u2192 \u2983 ordT : Ord t \u2984 \u2192 Ord (List t)\n  listOrd {t} \u2983 ordT \u2984 = record { eqT = listEq {t} \u2983 eqT \u2984 ; _<_ = lt' }\n    where\n      lt' : List t \u2192 List t \u2192 Bool\n      lt' [] [] = false\n      lt' [] (x \u2237 y) = true\n      lt' (x \u2237 xs) [] = false\n      lt' (x \u2237 xs) (y \u2237 ys) = x < y \u2227 lt' xs ys\n\ntest\u2086 : Bool\ntest\u2086 = (1 \u2237 []) < (2 \u2237 3 \u2237 []) \u2227 (true \u2237 []) < (false \u2237 true \u2237 [])\n\ntest\u2087 : Bool\ntest\u2087 = (1 \u2237 []) <= (2 \u2237 3 \u2237 []) \u2227 (true \u2237 []) <= (false \u2237 true \u2237 [])\n\ntest\u2088 : Bool\ntest\u2088 = (1 \u2237 []) > (2 \u2237 3 \u2237 []) \u2227 (true \u2237 []) > (false \u2237 true \u2237 [])\n\ntest\u2089 : Bool\ntest\u2089 = (1 \u2237 []) >= (2 \u2237 3 \u2237 []) \u2227 (true \u2237 []) >= (false \u2237 true \u2237 [])\n```\n"}