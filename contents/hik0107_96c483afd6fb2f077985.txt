{"tags": ["Python", "\u6a5f\u68b0\u5b66\u7fd2", "\u30ec\u30b3\u30e1\u30f3\u30c9", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"], "context": "\n\n\u3053\u306e\u8a18\u4e8b\u306b\u3064\u3044\u3066\nPython\u3067 \u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0 \u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7c21\u5358\u306b\u66f8\u3044\u3066\u307f\u308b\n\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306f\u3044\u308f\u3086\u308b\u300c\u3053\u308c\u3092\u898b\u3066\u3044\u308b\u4eba\u306f\u3053\u308c\u3082\u898b\u3066\u3044\u307e\u3059\u300d\u306e\u4ed5\u7d44\u307f\u306e\u30a2\u30ec\u3067\u3042\u308b\u3002\n\u3053\u3053\u3067\u6271\u3063\u3066\u3044\u308b\u306e\u306f\u975e\u5e38\u306b\u7c21\u5358\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306a\u306e\u3067\u3001\u5b9f\u969b\u306b\u4f55\u304b\u306e\u7528\u9014\u306b\u305d\u306e\u307e\u307e\u4f7f\u3048\u308b\u3088\u3046\u306a\u3082\u306e\u3067\u306f\u306a\u3044\u304c\u3001\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306eHow to Work\u3092\u7c21\u5358\u306b\u7406\u89e3\u3059\u308b\u306b\u306f\u5f79\u7acb\u3064\u3060\u308d\u3046\u3002\n\u3053\u306e\u8a18\u4e8b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u969b\u306b\u66f8\u3044\u3066\u307f\u308c\u3070\u3001\u300c\u3053\u308c\u3092\u898b\u3066\u3044\u308b\u4eba\u306f\u3053\u308c\u3082\u898b\u3066\u3044\u307e\u3059\u300d\u306e\u30ed\u30b8\u30c3\u30af\u306f\u30b3\u30f3\u30bb\u30d7\u30c8\u81ea\u4f53\u306f\u305d\u308c\u307b\u3069\u96e3\u89e3\u3067\u306f\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u304c\u7406\u89e3\u3044\u305f\u3060\u3051\u308b\u3068\u601d\u3046\u3002\n\n\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3092\u52c9\u5f37\u3059\u308b\u306e\u306b\u6709\u7528\u306a\u30b5\u30a4\u30c8\n\u306a\u304a\u3001\u3053\u306e\u8a18\u4e8b\u3067\u6271\u3063\u3066\u3044\u308b\u30b3\u30fc\u30c9\u306f\u3053\u306e\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u308b\u3002\n\u82f1\u8a9e\u3092\u8aad\u3080\u306e\u306b\u62b5\u6297\u304c\u306a\u3044\u8af8\u6c0f\u306f\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u30b5\u30a4\u30c8\u3092\u8aad\u3093\u3067\u3082\u826f\u3044\u3060\u308d\u3046\u3002\n\u305d\u306e\u4ed6\u3001\u30ec\u30b3\u30e1\u30f3\u30c9\u30b7\u30b9\u30c6\u30e0\u306e\u30b3\u30f3\u30bb\u30d7\u30c8\u3092\u52c9\u5f37\u3059\u308b\u306e\u306b\u6709\u7528\u306a\u30b5\u30a4\u30c8\u3092\u5e7e\u3064\u304b\u5217\u6319\u3059\u308b\n\u7279\u306bCoursera\u306e\u8b1b\u7fa9\u306f\u30aa\u30b9\u30b9\u30e1\u3067\u3042\u308b\n\nCoursera \"intro to recommender systems\"\nkamishima.net \u63a8\u85a6\u30b7\u30b9\u30c6\u30e0\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\ngihyo.co.jp \u60c5\u5831\u63a8\u85a6\u30b7\u30b9\u30c6\u30e0\u306e\u57fa\u672c\nslide share \u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3092\u5229\u7528\u3057\u305f\u63a8\u85a6\u30b7\u30b9\u30c6\u30e0\u69cb\u7bc9\n\n\n\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306e\u57fa\u672c\u7684\u306a\u30b3\u30f3\u30bb\u30d7\u30c8\n\u3042\u308b\u30e6\u30fc\u30b6A\u306b\u5bfe\u3057\u3066\u3001\u30aa\u30b9\u30b9\u30e1\u306e\u6620\u753b\u3092\u30ec\u30b3\u30e1\u30f3\u30c9\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u8003\u3048\u3088\u3046\u3002\n\u3053\u306e\u6642\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u884c\u308f\u308c\u308b\u3053\u3068\u306f\u5358\u7d14\u5316\u3059\u308b\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308b\nstep\u2460 \u305d\u306e\u30e6\u30fc\u30b6\u3068\u4ed6\u306e\u30e6\u30fc\u30b6\u306e **\u985e\u4f3c\u5ea6** \u3092\u8a08\u7b97\u3059\u308b\n\u2193\nstep\u2461 \u4ed6\u306e\u30e6\u30fc\u30b6\u304c\u898b\u305f\u6620\u753b\u306e\u3046\u3061\u3001\u30e6\u30fc\u30b6A\u304c\u307e\u3060\u898b\u3066\u306a\u3044\u6620\u753b\u306e\u96c6\u5408\u3092\u62bd\u51fa\u3059\u308b\n\u2193\nstep\u2462 \u305d\u308c\u3089\u306e\u6620\u753b\u7fa4\u306e\u3046\u3061\u3001\u304a\u3059\u3059\u3081\u5ea6\u304c\u9ad8\u3044\u6620\u753b\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u3002\n       \u3053\u306e\u9078\u5b9a\u306e\u969b\u306b\u3001\u985e\u4f3c\u5ea6\u304c\u9ad8\u3044\u30e6\u30fc\u30b6\u304c\u898b\u305f\u6620\u753b\u307b\u3069\u91cd\u307f\u304c\u9ad8\u304f\u306a\u308b\u3088\u3046\u306b\u3059\u308b\n\n\n\u6e96\u5099\n\n\u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\npackage.py\nfrom math import sort\n\n\n\n\u30c7\u30fc\u30bf\u306e\u7528\u610f\n\u3053\u3053\u3067\u4f7f\u3046\u30c7\u30fc\u30bf\u306b\u306f\u3001\u4f55\u4eba\u304b\u306e\u6620\u753b\u597d\u304d\u304c\u898b\u305f\u6620\u753b\u3068\u305d\u306e\u30ec\u30d3\u30e5\u30fc\uff08\u5f97\u70b9\uff09\u306e\u7d50\u679c\u304c\u8f9e\u66f8\u5f62\u5f0f\u3067\u5165\u3063\u3066\u3044\u308b\u3002\n\ndataset.py\ndataset={\n 'Lisa Rose': {\n 'Lady in the Water': 2.5, 'Snakes on a Plane': 3.5, 'Just My Luck': 3.0, 'Superman Returns': 3.5,'You, Me and Dupree': 2.5, 'The Night Listener': 3.0\n  },\n 'Gene Seymour': {\n 'Lady in the Water': 3.0, 'Snakes on a Plane': 3.5, 'Just My Luck': 1.5, 'Superman Returns': 5.0, 'The Night Listener': 3.0, 'You, Me and Dupree': 3.5\n  },\n 'Michael Phillips': {\n 'Lady in the Water': 2.5, 'Snakes on a Plane': 3.0, 'Superman Returns': 3.5, 'The Night Listener': 4.0\n  },\n 'Claudia Puig': {\n 'Snakes on a Plane': 3.5, 'Just My Luck': 3.0, 'The Night Listener': 4.5, 'Superman Returns': 4.0, 'You, Me and Dupree': 2.5\n  },\n 'Mick LaSalle': {\n 'Lady in the Water': 3.0, 'Snakes on a Plane': 4.0, 'Just My Luck': 2.0, 'Superman Returns': 3.0, 'The Night Listener': 3.0, 'You, Me and Dupree': 2.0\n  },\n 'Jack Matthews': {\n 'Lady in the Water': 3.0, 'Snakes on a Plane': 4.0, 'The Night Listener': 3.0, 'Superman Returns': 5.0, 'You, Me and Dupree': 3.5\n  },\n 'Toby': {\n 'Snakes on a Plane':4.5, 'You, Me and Dupree':1.0, 'Superman Returns':4.0\n  }\n}\n\n\n\n\u30e6\u30fc\u30b6\u540c\u58eb\u306e\u300c\u985e\u4f3c\u5ea6\u306e\u8a08\u7b97\u300d\n\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3067\u306f\u3001\u307e\u305a\u300c\u30e6\u30fc\u30b6\u9593\u306e\u985e\u4f3c\u5ea6\u300d\u3092\u8a08\u7b97\u3059\u308b\u3002\n\u3053\u3053\u3067\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u8a2d\u8a08\u4e0a\u30dd\u30a4\u30f3\u30c8\u3068\u306a\u308b\u306e\u306f\u3001\u3069\u306e\u3088\u3046\u306b\u3057\u3066\u300c\u3042\u308b\u30e6\u30fc\u30b6\u540c\u58eb\u304c\u4f3c\u3066\u3044\u308b\u3001\u3082\u3057\u304f\u306f\u4f3c\u3066\u3044\u306a\u3044\u300d\u3068\u5b9a\u7fa9\u3059\u308b\u304b\u3060\u3002\n\u3053\u308c\u306b\u306f\u8a2d\u8a08\u8005\u306e\u601d\u60d1\u306b\u3088\u3063\u3066\u7121\u6570\u306b\u5b9a\u7fa9\u304c\u8003\u3048\u3089\u308c\u308b\u304c\u3001\n\u3053\u3053\u3067\u306f\u3001\u300c\u30e6\u30fc\u30b6\u540c\u58eb\u304c\u540c\u3058\u6620\u753b\u306b\u5bfe\u3057\u3066\u8fd1\u3044\u70b9\u6570\u306e\u8a55\u4fa1\u3092\u4e0e\u3048\u3066\u3044\u308b\u307b\u3069\u300d\u300c\u985e\u4f3c\u5ea6\u304c\u9ad8\u3044\u300d\u3068\u5b9a\u7fa9\u3057\u3066\u8a71\u3092\u3059\u3059\u3081\u308b\n\u3053\u306e\u5834\u5408\u3001\u30e6\u30fc\u30b6(person1, person2)\u9593\u306e\u985e\u4f3c\u5ea6\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3092\u4e0b\u8a18\u306b\u3088\u3046\u306b\u5b9f\u88c5\u3067\u304d\u308b\n\nsimilarity.py\ndef get_similairty(person1, person2):\n\n  ## \u4e21\u8005\u3068\u3082\u898b\u305f\u6620\u753b\u306e\u96c6\u5408\u3092\u53d6\u308b\n  set_person1 = set(dataset[person1].keys())\n  set_person2 = set(dataset[person2].keys())\n  set_both = set_person1.intersection(set_person2)\n\n  if len(set_both)==0: #\u5171\u901a\u3067\u307f\u305f\u6620\u753b\u304c\u306a\u3044\u5834\u5408\u306f\u985e\u4f3c\u5ea6\u30920\u3068\u3059\u308b\n    return 0\n\n  list_destance = []\n\n  for item in set_both:\n    # \u540c\u3058\u6620\u753b\u306e\u30ec\u30d3\u30e5\u30fc\u70b9\u306e\u5dee\u306e2\u4e57\u3092\u8a08\u7b97\n    # \u3053\u306e\u6570\u5024\u304c\u5927\u304d\u3044\u307b\u3069\u300c\u6c17\u304c\u5408\u308f\u306a\u3044\u300d=\u300c\u4f3c\u3066\u3044\u306a\u3044\u300d\u3068\u5b9a\u7fa9\u3067\u304d\u308b \n    distance = pow(dataset[person1][item]-dataset[person2][item], 2) \n    list_destance.append(distance)\n\n  return 1/(1+sqrt(sum(list_destance))) #\u5404\u6620\u753b\u306e\u6c17\u306e\u5408\u308f\u306a\u3055\u306e\u5408\u8a08\u306e\u9006\u6bd4\u7684\u306a\u6307\u6a19\u3092\u8fd4\u3059\n\n\n\u3053\u3053\u3067\u306f\u3001\u4e0b\u8a18\u306e\u6570\u5b57\u3092\u985e\u4f3c\u5ea6\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u3044\u308b\n\u985e\u4f3c\u5ea6 = 1/(1+sqrt(sum(list_destance)))...(1)\nsum(list_destance)\u306f\u30ec\u30d3\u30e5\u30fc\u70b9\u6570\u7a7a\u9593\u3067\u306e\u30e6\u30fc\u30b6\u540c\u58eb\u306e\u8ddd\u96e2\u306e2\u4e57\u3067\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3002\n\u3053\u306e\u8ddd\u96e2\u304c\u5927\u304d\u3044\u307b\u3069 \u4f3c\u3066\u3044\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3092\u8868\u3059\u306e\u3067\u3001(1)\u306f\u4f3c\u3066\u3044\u308b\u5ea6\u5408\u3044\u3092\u8868\u3059\u3053\u3068\u306b\u306a\u308b\u3002\u8ddd\u96e2\u304c0\u306e\u5834\u5408\u985e\u4f3c\u5ea6\u306f1\u306b\u306a\u308a\u3001\u8ddd\u96e2\u304c\u6975\u7aef\u306b\u5927\u304d\u3044\u5834\u5408\u985e\u4f3c\u5ea6\u306f0\u306b\u8fd1\u3065\u304f\u3002\nget_similairty('Lisa Rose','Jack Matthews')\n0.3405424265831667\n\n\n\u30ec\u30b3\u30e1\u30f3\u30c9\u95a2\u6570\u3092\u5b9f\u88c5\u3059\u308b\n\u30ec\u30b3\u30e1\u30f3\u30c9\u8a2d\u8a08\u53ca\u3073\u5b9f\u88c5\u4e0a\u306e\u601d\u60f3\u306f\u30b3\u30e1\u30f3\u30c8\u3067\u66f8\u3044\u3066\u3044\u308b\n\nrecomend.py\ndef get_recommend(person, top_N):\n\n  totals = {} ; simSums = {} #\u63a8\u85a6\u5ea6\u30b9\u30b3\u30a2\u3092\u5165\u308c\u308b\u305f\u3081\u306e\u7bb1\u3092\u4f5c\u3063\u3066\u304a\u304f\n\n  # \u81ea\u5206\u4ee5\u5916\u306e\u30e6\u30fc\u30b6\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3057\u3066For\u6587\u3092\u56de\u3059\n  # -> \u5404\u4eba\u3068\u306e\u985e\u4f3c\u5ea6\u3001\u53ca\u3073\u5404\u4eba\u304b\u3089\u306e\uff08\u307e\u3060\u672c\u4eba\u304c\u898b\u3066\u306a\u3044\uff09\u6620\u753b\u306e\u63a8\u85a6\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\n  list_others = dataset.keys() ; list_others.remove(person)\n\n  for other in list_others:\n    # \u672c\u4eba\u304c\u307e\u3060\u898b\u305f\u3053\u3068\u304c\u7121\u3044\u6620\u753b\u306e\u96c6\u5408\u3092\u53d6\u5f97\n    set_other = set(dataset[other]); set_person = set(dataset[person])\n    set_new_movie = set_other.difference(set_person)\n\n    # \u3042\u308b\u30e6\u30fc\u30b6\u3068\u672c\u4eba\u306e\u985e\u4f3c\u5ea6\u3092\u8a08\u7b97(sim\u306f0~1\u306e\u6570\u5b57)\n    sim = get_similairty(person, other)\n\n    # (\u672c\u4eba\u304c\u307e\u3060\u898b\u305f\u3053\u3068\u304c\u306a\u3044)\u6620\u753b\u306e\u30ea\u30b9\u30c8\u3067For\u5206\u3092\u56de\u3059\n    for item in set_new_movie:\n\n      # \"\u985e\u4f3c\u5ea6 x \u30ec\u30d3\u30e5\u30fc\u70b9\u6570\" \u3092\u63a8\u85a6\u5ea6\u306e\u30b9\u30b3\u30a2\u3068\u3057\u3066\u3001\u5168\u30e6\u30fc\u30b6\u3067\u7a4d\u7b97\u3059\u308b\n      totals.setdefault(item,0)\n      totals[item] += dataset[other][item]*sim \n\n      # \u307e\u305f\u30e6\u30fc\u30b6\u306e\u985e\u4f3c\u5ea6\u306e\u7a4d\u7b97\u5024\u3092\u3068\u3063\u3066\u304a\u304d\u3001\u3053\u308c\u3067\u4e0a\u8a18\u306e\u30b9\u30b3\u30a2\u3092\u9664\u3059\u308b\n      simSums.setdefault(item,0)\n      simSums[item] += sim\n\n  rankings = [(total/simSums[item],item) for item,total in totals.items()]\n  rankings.sort()\n  rankings.reverse()\n\n  return [i[1] for i in rankings][:top_N]\n\n\n\n\u7d50\u679c\nget_recommend('Toby',2)\n\n['The Night Listener', 'Lady in the Water']\n\n\n\n##\u3053\u306e\u8a18\u4e8b\u306b\u3064\u3044\u3066\n\nPython\u3067 `\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0` \u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7c21\u5358\u306b\u66f8\u3044\u3066\u307f\u308b\n\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306f\u3044\u308f\u3086\u308b\u300c\u3053\u308c\u3092\u898b\u3066\u3044\u308b\u4eba\u306f\u3053\u308c\u3082\u898b\u3066\u3044\u307e\u3059\u300d\u306e\u4ed5\u7d44\u307f\u306e\u30a2\u30ec\u3067\u3042\u308b\u3002\n\n\u3053\u3053\u3067\u6271\u3063\u3066\u3044\u308b\u306e\u306f\u975e\u5e38\u306b\u7c21\u5358\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306a\u306e\u3067\u3001\u5b9f\u969b\u306b\u4f55\u304b\u306e\u7528\u9014\u306b\u305d\u306e\u307e\u307e\u4f7f\u3048\u308b\u3088\u3046\u306a\u3082\u306e\u3067\u306f\u306a\u3044\u304c\u3001\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306eHow to Work\u3092\u7c21\u5358\u306b\u7406\u89e3\u3059\u308b\u306b\u306f\u5f79\u7acb\u3064\u3060\u308d\u3046\u3002\n\n\u3053\u306e\u8a18\u4e8b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u969b\u306b\u66f8\u3044\u3066\u307f\u308c\u3070\u3001**\u300c\u3053\u308c\u3092\u898b\u3066\u3044\u308b\u4eba\u306f\u3053\u308c\u3082\u898b\u3066\u3044\u307e\u3059\u300d**\u306e\u30ed\u30b8\u30c3\u30af\u306f\u30b3\u30f3\u30bb\u30d7\u30c8\u81ea\u4f53\u306f\u305d\u308c\u307b\u3069\u96e3\u89e3\u3067\u306f\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u304c\u7406\u89e3\u3044\u305f\u3060\u3051\u308b\u3068\u601d\u3046\u3002\n\n\n## \u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3092\u52c9\u5f37\u3059\u308b\u306e\u306b\u6709\u7528\u306a\u30b5\u30a4\u30c8\n\n\u306a\u304a\u3001\u3053\u306e\u8a18\u4e8b\u3067\u6271\u3063\u3066\u3044\u308b\u30b3\u30fc\u30c9\u306f[\u3053\u306e\u30b5\u30a4\u30c8](http://dataaspirant.com/2015/05/25/collaborative-filtering-recommendation-engine-implementation-in-python/)\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u308b\u3002\n\u82f1\u8a9e\u3092\u8aad\u3080\u306e\u306b\u62b5\u6297\u304c\u306a\u3044\u8af8\u6c0f\u306f\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u30b5\u30a4\u30c8\u3092\u8aad\u3093\u3067\u3082\u826f\u3044\u3060\u308d\u3046\u3002\n\n\u305d\u306e\u4ed6\u3001\u30ec\u30b3\u30e1\u30f3\u30c9\u30b7\u30b9\u30c6\u30e0\u306e\u30b3\u30f3\u30bb\u30d7\u30c8\u3092\u52c9\u5f37\u3059\u308b\u306e\u306b\u6709\u7528\u306a\u30b5\u30a4\u30c8\u3092\u5e7e\u3064\u304b\u5217\u6319\u3059\u308b\n\u7279\u306bCoursera\u306e\u8b1b\u7fa9\u306f\u30aa\u30b9\u30b9\u30e1\u3067\u3042\u308b\n\n- [Coursera \"intro to recommender systems\"](https://www.coursera.org/learn/recommender-systems/lecture/bWRen/introduction-to-recommender-systems)\n- [kamishima.net \u63a8\u85a6\u30b7\u30b9\u30c6\u30e0\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0](http://www.kamishima.net/archive/recsysdoc.pdf)\n- [gihyo.co.jp \u60c5\u5831\u63a8\u85a6\u30b7\u30b9\u30c6\u30e0\u306e\u57fa\u672c](http://gihyo.jp/dev/serial/01/information-recommendation-system)\n- [slide share \u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3092\u5229\u7528\u3057\u305f\u63a8\u85a6\u30b7\u30b9\u30c6\u30e0\u69cb\u7bc9](http://www.slideshare.net/masayuki1986/recommendation-ml)\n\n\n##\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306e\u57fa\u672c\u7684\u306a\u30b3\u30f3\u30bb\u30d7\u30c8\n\u3042\u308b\u30e6\u30fc\u30b6A\u306b\u5bfe\u3057\u3066\u3001\u30aa\u30b9\u30b9\u30e1\u306e\u6620\u753b\u3092\u30ec\u30b3\u30e1\u30f3\u30c9\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u8003\u3048\u3088\u3046\u3002\n\u3053\u306e\u6642\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u884c\u308f\u308c\u308b\u3053\u3068\u306f\u5358\u7d14\u5316\u3059\u308b\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308b\n\n```\nstep\u2460 \u305d\u306e\u30e6\u30fc\u30b6\u3068\u4ed6\u306e\u30e6\u30fc\u30b6\u306e **\u985e\u4f3c\u5ea6** \u3092\u8a08\u7b97\u3059\u308b\n\u2193\nstep\u2461 \u4ed6\u306e\u30e6\u30fc\u30b6\u304c\u898b\u305f\u6620\u753b\u306e\u3046\u3061\u3001\u30e6\u30fc\u30b6A\u304c\u307e\u3060\u898b\u3066\u306a\u3044\u6620\u753b\u306e\u96c6\u5408\u3092\u62bd\u51fa\u3059\u308b\n\u2193\nstep\u2462 \u305d\u308c\u3089\u306e\u6620\u753b\u7fa4\u306e\u3046\u3061\u3001\u304a\u3059\u3059\u3081\u5ea6\u304c\u9ad8\u3044\u6620\u753b\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u3002\n       \u3053\u306e\u9078\u5b9a\u306e\u969b\u306b\u3001\u985e\u4f3c\u5ea6\u304c\u9ad8\u3044\u30e6\u30fc\u30b6\u304c\u898b\u305f\u6620\u753b\u307b\u3069\u91cd\u307f\u304c\u9ad8\u304f\u306a\u308b\u3088\u3046\u306b\u3059\u308b\n```\n\n\n## \u6e96\u5099\n\n#### \u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n```py:package.py\nfrom math import sort\n```\n\n#### \u30c7\u30fc\u30bf\u306e\u7528\u610f\n\u3053\u3053\u3067\u4f7f\u3046\u30c7\u30fc\u30bf\u306b\u306f\u3001\u4f55\u4eba\u304b\u306e\u6620\u753b\u597d\u304d\u304c\u898b\u305f\u6620\u753b\u3068\u305d\u306e\u30ec\u30d3\u30e5\u30fc\uff08\u5f97\u70b9\uff09\u306e\u7d50\u679c\u304c\u8f9e\u66f8\u5f62\u5f0f\u3067\u5165\u3063\u3066\u3044\u308b\u3002\n\n```py:dataset.py\ndataset={\n 'Lisa Rose': {\n 'Lady in the Water': 2.5, 'Snakes on a Plane': 3.5, 'Just My Luck': 3.0, 'Superman Returns': 3.5,'You, Me and Dupree': 2.5, 'The Night Listener': 3.0\n  },\n 'Gene Seymour': {\n 'Lady in the Water': 3.0, 'Snakes on a Plane': 3.5, 'Just My Luck': 1.5, 'Superman Returns': 5.0, 'The Night Listener': 3.0, 'You, Me and Dupree': 3.5\n  },\n 'Michael Phillips': {\n 'Lady in the Water': 2.5, 'Snakes on a Plane': 3.0, 'Superman Returns': 3.5, 'The Night Listener': 4.0\n  },\n 'Claudia Puig': {\n 'Snakes on a Plane': 3.5, 'Just My Luck': 3.0, 'The Night Listener': 4.5, 'Superman Returns': 4.0, 'You, Me and Dupree': 2.5\n  },\n 'Mick LaSalle': {\n 'Lady in the Water': 3.0, 'Snakes on a Plane': 4.0, 'Just My Luck': 2.0, 'Superman Returns': 3.0, 'The Night Listener': 3.0, 'You, Me and Dupree': 2.0\n  },\n 'Jack Matthews': {\n 'Lady in the Water': 3.0, 'Snakes on a Plane': 4.0, 'The Night Listener': 3.0, 'Superman Returns': 5.0, 'You, Me and Dupree': 3.5\n  },\n 'Toby': {\n 'Snakes on a Plane':4.5, 'You, Me and Dupree':1.0, 'Superman Returns':4.0\n  }\n}\n```\n\n## \u30e6\u30fc\u30b6\u540c\u58eb\u306e\u300c\u985e\u4f3c\u5ea6\u306e\u8a08\u7b97\u300d\n\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3067\u306f\u3001\u307e\u305a\u300c\u30e6\u30fc\u30b6\u9593\u306e\u985e\u4f3c\u5ea6\u300d\u3092\u8a08\u7b97\u3059\u308b\u3002\n\u3053\u3053\u3067\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u8a2d\u8a08\u4e0a\u30dd\u30a4\u30f3\u30c8\u3068\u306a\u308b\u306e\u306f\u3001**\u3069\u306e\u3088\u3046\u306b\u3057\u3066\u300c\u3042\u308b\u30e6\u30fc\u30b6\u540c\u58eb\u304c\u4f3c\u3066\u3044\u308b\u3001\u3082\u3057\u304f\u306f\u4f3c\u3066\u3044\u306a\u3044\u300d**\u3068\u5b9a\u7fa9\u3059\u308b\u304b\u3060\u3002\n\n\u3053\u308c\u306b\u306f\u8a2d\u8a08\u8005\u306e\u601d\u60d1\u306b\u3088\u3063\u3066\u7121\u6570\u306b\u5b9a\u7fa9\u304c\u8003\u3048\u3089\u308c\u308b\u304c\u3001\n\u3053\u3053\u3067\u306f\u3001\u300c\u30e6\u30fc\u30b6\u540c\u58eb\u304c\u540c\u3058\u6620\u753b\u306b\u5bfe\u3057\u3066\u8fd1\u3044\u70b9\u6570\u306e\u8a55\u4fa1\u3092\u4e0e\u3048\u3066\u3044\u308b\u307b\u3069\u300d\u300c\u985e\u4f3c\u5ea6\u304c\u9ad8\u3044\u300d\u3068\u5b9a\u7fa9\u3057\u3066\u8a71\u3092\u3059\u3059\u3081\u308b\n\n\u3053\u306e\u5834\u5408\u3001`\u30e6\u30fc\u30b6(person1, person2)`\u9593\u306e\u985e\u4f3c\u5ea6\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3092\u4e0b\u8a18\u306b\u3088\u3046\u306b\u5b9f\u88c5\u3067\u304d\u308b\n\n```py:similarity.py\ndef get_similairty(person1, person2):\n  \n  ## \u4e21\u8005\u3068\u3082\u898b\u305f\u6620\u753b\u306e\u96c6\u5408\u3092\u53d6\u308b\n  set_person1 = set(dataset[person1].keys())\n  set_person2 = set(dataset[person2].keys())\n  set_both = set_person1.intersection(set_person2)\n  \n  if len(set_both)==0: #\u5171\u901a\u3067\u307f\u305f\u6620\u753b\u304c\u306a\u3044\u5834\u5408\u306f\u985e\u4f3c\u5ea6\u30920\u3068\u3059\u308b\n    return 0\n  \n  list_destance = []\n  \n  for item in set_both:\n    # \u540c\u3058\u6620\u753b\u306e\u30ec\u30d3\u30e5\u30fc\u70b9\u306e\u5dee\u306e2\u4e57\u3092\u8a08\u7b97\n    # \u3053\u306e\u6570\u5024\u304c\u5927\u304d\u3044\u307b\u3069\u300c\u6c17\u304c\u5408\u308f\u306a\u3044\u300d=\u300c\u4f3c\u3066\u3044\u306a\u3044\u300d\u3068\u5b9a\u7fa9\u3067\u304d\u308b \n    distance = pow(dataset[person1][item]-dataset[person2][item], 2) \n    list_destance.append(distance)\n  \n  return 1/(1+sqrt(sum(list_destance))) #\u5404\u6620\u753b\u306e\u6c17\u306e\u5408\u308f\u306a\u3055\u306e\u5408\u8a08\u306e\u9006\u6bd4\u7684\u306a\u6307\u6a19\u3092\u8fd4\u3059\n```\n\n\u3053\u3053\u3067\u306f\u3001\u4e0b\u8a18\u306e\u6570\u5b57\u3092\u985e\u4f3c\u5ea6\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u3044\u308b\n\u985e\u4f3c\u5ea6 = ```1/(1+sqrt(sum(list_destance)))```...(1)\n\n`sum(list_destance)`\u306f\u30ec\u30d3\u30e5\u30fc\u70b9\u6570\u7a7a\u9593\u3067\u306e\u30e6\u30fc\u30b6\u540c\u58eb\u306e\u8ddd\u96e2\u306e2\u4e57\u3067\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3002\n\u3053\u306e\u8ddd\u96e2\u304c\u5927\u304d\u3044\u307b\u3069 `\u4f3c\u3066\u3044\u306a\u3044`\u3068\u3044\u3046\u3053\u3068\u3092\u8868\u3059\u306e\u3067\u3001(1)\u306f`\u4f3c\u3066\u3044\u308b`\u5ea6\u5408\u3044\u3092\u8868\u3059\u3053\u3068\u306b\u306a\u308b\u3002\u8ddd\u96e2\u304c`0\u306e\u5834\u5408`\u985e\u4f3c\u5ea6\u306f1\u306b\u306a\u308a\u3001\u8ddd\u96e2\u304c\u6975\u7aef\u306b\u5927\u304d\u3044\u5834\u5408\u985e\u4f3c\u5ea6\u306f0\u306b\u8fd1\u3065\u304f\u3002\n\n\n```\nget_similairty('Lisa Rose','Jack Matthews')\n0.3405424265831667\n```\n\n\n## \u30ec\u30b3\u30e1\u30f3\u30c9\u95a2\u6570\u3092\u5b9f\u88c5\u3059\u308b\n\n\u30ec\u30b3\u30e1\u30f3\u30c9\u8a2d\u8a08\u53ca\u3073\u5b9f\u88c5\u4e0a\u306e\u601d\u60f3\u306f\u30b3\u30e1\u30f3\u30c8\u3067\u66f8\u3044\u3066\u3044\u308b\n\n```py:recomend.py\ndef get_recommend(person, top_N):\n  \n  totals = {} ; simSums = {} #\u63a8\u85a6\u5ea6\u30b9\u30b3\u30a2\u3092\u5165\u308c\u308b\u305f\u3081\u306e\u7bb1\u3092\u4f5c\u3063\u3066\u304a\u304f\n  \n  # \u81ea\u5206\u4ee5\u5916\u306e\u30e6\u30fc\u30b6\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3057\u3066For\u6587\u3092\u56de\u3059\n  # -> \u5404\u4eba\u3068\u306e\u985e\u4f3c\u5ea6\u3001\u53ca\u3073\u5404\u4eba\u304b\u3089\u306e\uff08\u307e\u3060\u672c\u4eba\u304c\u898b\u3066\u306a\u3044\uff09\u6620\u753b\u306e\u63a8\u85a6\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\n  list_others = dataset.keys() ; list_others.remove(person)\n\n  for other in list_others:\n    # \u672c\u4eba\u304c\u307e\u3060\u898b\u305f\u3053\u3068\u304c\u7121\u3044\u6620\u753b\u306e\u96c6\u5408\u3092\u53d6\u5f97\n    set_other = set(dataset[other]); set_person = set(dataset[person])\n    set_new_movie = set_other.difference(set_person)\n\n    # \u3042\u308b\u30e6\u30fc\u30b6\u3068\u672c\u4eba\u306e\u985e\u4f3c\u5ea6\u3092\u8a08\u7b97(sim\u306f0~1\u306e\u6570\u5b57)\n    sim = get_similairty(person, other)\n    \n    # (\u672c\u4eba\u304c\u307e\u3060\u898b\u305f\u3053\u3068\u304c\u306a\u3044)\u6620\u753b\u306e\u30ea\u30b9\u30c8\u3067For\u5206\u3092\u56de\u3059\n    for item in set_new_movie:\n\n      # \"\u985e\u4f3c\u5ea6 x \u30ec\u30d3\u30e5\u30fc\u70b9\u6570\" \u3092\u63a8\u85a6\u5ea6\u306e\u30b9\u30b3\u30a2\u3068\u3057\u3066\u3001\u5168\u30e6\u30fc\u30b6\u3067\u7a4d\u7b97\u3059\u308b\n      totals.setdefault(item,0)\n      totals[item] += dataset[other][item]*sim \n\n      # \u307e\u305f\u30e6\u30fc\u30b6\u306e\u985e\u4f3c\u5ea6\u306e\u7a4d\u7b97\u5024\u3092\u3068\u3063\u3066\u304a\u304d\u3001\u3053\u308c\u3067\u4e0a\u8a18\u306e\u30b9\u30b3\u30a2\u3092\u9664\u3059\u308b\n      simSums.setdefault(item,0)\n      simSums[item] += sim\n\n  rankings = [(total/simSums[item],item) for item,total in totals.items()]\n  rankings.sort()\n  rankings.reverse()\n\n  return [i[1] for i in rankings][:top_N]\n```\n\n## \u7d50\u679c\n\n```\nget_recommend('Toby',2)\n\n['The Night Listener', 'Lady in the Water']\n```\n"}