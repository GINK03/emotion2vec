{"context": " More than 1 year has passed since last update.\n\n\u554f\u984c\n\u4e0e\u3048\u3089\u308c\u305f\u5358\u65b9\u5411\u30ea\u30b9\u30c8\u306e\u6700\u5f8c\u304b\u3089N\u756a\u76ee\u306e\u8981\u7d20\u3092\u6c42\u3081\u3088.\n\u8a72\u5f53\u306e\u8981\u7d20\u304c\u7121\u3044\u5834\u5408\u306fNULL\u3092\u8fd4\u5374\u3059\u308b\u3053\u3068.\n\n\nSolution\n\u7c21\u5358\u306b\u601d\u3044\u3064\u304f\u65b9\u6cd5\u3068\u3057\u3066\u306f,\n\n\u4e0e\u3048\u3089\u308c\u305f\u30ea\u30b9\u30c8\u3092\u6700\u521d\u304b\u3089\u6700\u5f8c\u307e\u3067\u8d70\u67fb\u3057\u3066, \u30ea\u30b9\u30c8\u306e\u9577\u3055\u3092\u5272\u308a\u51fa\u3059\n\u5f8c\u308d\u304b\u3089N\u756a\u76ee\u306e\u8981\u7d20\u306f, \u30ea\u30b9\u30c8\u306e\u9577\u3055\u3092M\u3068\u3059\u308b\u3068\u5148\u982d\u304b\u3089(N - M + 1) \u756a\u76ee\u306a\u306e\u3067, \u518d\u5ea6\u524d\u304b\u3089\u30ea\u30b9\u30c8\u3092\u8d70\u67fb\u3059\u308b\n\n\u304c\u3042\u308a\u307e\u3059.\n\nalgorithm_linkedlist_find_nth_from_tail_1.py\n# Class of linked list Node.\nclass Node():\n    def __init__(self, val):\n        self.next = None\n        self.value = val\n\n    def next(self):\n        return self.next\n\n    def setNext(self, nextNode):\n        self.next = nextNode\n\n\ndef findElement(head, N):\n    if head == None:\n        return None\n\n    curNode = head\n    num = 1 # number of elements in list\n    while curNode.next:\n        num += 1\n        curNode = curNode.next\n\n    if num < N or N <= 0: # list is too short\n        return None\n\n    # get num - N + 1 node\n    curNode = head\n    curNum  = 1\n    while curNum < num - N + 1:\n        curNum += 1\n        curNode = curNode.next\n    return curNode.value\n\n\n\u8a08\u7b97\u91cf: O(M), \u7a7a\u9593\u91cf: O(1)\n\nalgorithm_linkedlist_find_nth_from_tail_1.java\n// Class of linked list node\nclass Node {\n    public int  value;\n    public Node next;\n\n    public Node(int value) {\n        this.value = value;\n        this.next = null;\n    }\n\n    public void setNext(Node nextNode) {\n        this.next = nextNode;\n    }\n}\n\nclass Solution\n{\n    public static Node findNthNodeFromTail(Node head, int N) {\n        if (head == null) return null;\n\n        int length   = 1;\n        Node curNode = head;\n        while (curNode.next != null) {\n            length++;\n            curNode = curNode.next;\n        } // now length = length of the given list\n\n        if (length <= 0 || length < N) return null;\n\n        int curLength = 1;\n        curNode       = head;\n        while (curLength < length - N + 1) {\n            curNode = curNode.next;\n            curLength++;\n        }\n        return curNode;\n    }\n}\n\n\n\u3053\u308c\u3082\u6709\u5411\u306a\u65b9\u6cd5\u3067\u3059\u304c, \u30ea\u30b9\u30c8\u3092\u4e8c\u56de\u8d70\u67fb\u3057\u3066\u3044\u307e\u3059.\n\u3053\u308c\u3092\u4e00\u56de\u306b\u6e1b\u3089\u305d\u3046\u3068\u601d\u3046\u3068, \u30ea\u30b9\u30c8\u306e\u30ce\u30fc\u30c9\u3092\u6307\u3059\u30dd\u30a4\u30f3\u30bf\u30922\u3064\u7528\u610f\u3057\u3066\n\n\u307e\u305a1\u3064\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u5148\u982d\u304b\u3089N\u756a\u76ee\u306e\u8981\u7d20\u307e\u3067\u9032\u3081\u308b\n\u3082\u30461\u3064\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u5148\u982d\u306b\u5f53\u3066\u308b\n\u6700\u521d\u306e\u30dd\u30a4\u30f3\u30bf\u304ctail\u306b\u5230\u9054\u3059\u308b\u307e\u3067, \u4e21\u65b9\u306e\u30dd\u30a4\u30f3\u30bf\u30921\u3064\u305a\u3064\u9032\u3081\u3066\u3044\u304f\n\n\u3053\u3046\u3059\u308b\u3068, \u6700\u5f8c\u306e\u72b6\u614b\u3068\u3057\u30662\u3064\u76ee\u306e\u30dd\u30a4\u30f3\u30bf\u304c\u5f8c\u308d\u304b\u3089N\u756a\u76ee\u306e\u8981\u7d20\u3067\u6b62\u307e\u3063\u3066\u3044\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059.\n\nalgorithm_linkedlist_find_nth_from_tail_2.py\n# Class of linked list Node.\ndef findElement(head, N):\n    if head == None:\n        return None\n\n    p1 = head\n    num = 1\n    while num < N:\n        num += 1\n        p1 = p1.next\n        if p1 is None:\n            return None\n\n    # get num - N + 1 node\n    p2 = head\n    while not p1.next is None:\n        p1 = p1.next\n        p2 = p2.next\n    return p2\n\n\n\u8a08\u7b97\u91cf: O(M), \u7a7a\u9593\u91cf: O(1)\n\nalgorithm_linkedlist_find_nth_from_tail_2.java\nclass Solution\n{\n    public static Node findNthNodeFromTail(Node head, int N) {\n        if (head == null) return null;\n\n        int length   = 1;\n        Node p1 = head;\n        while (length < N) {\n            length++;\n            p1 = p1.next;\n\n            if (p1 == null) return null;\n        } // now p1 is on the Nth node from the head\n\n        Node p2 = head;\n        while (p1.next != null) {\n            p1 = p1.next;\n            p2 = p2.next;\n        }\n        return p2;\n    }\n}\n\n\nfor\u5206\u306e\u7e70\u308a\u8fd4\u3057\u306e\u6570\u3092\u8003\u3048\u308b\u3068, \u30ea\u30b9\u30c8\uff11\u5de1\u308a\u5206\u3057\u304b\u8d70\u67fb\u3057\u3066\u3044\u306a\u3044\u3053\u3068\u306b\u6ce8\u76ee\u3067\u3059\u3002\u305f\u3060\u3057, \u8a08\u7b97\u91cf\u306e\u30aa\u30fc\u30c0\u30fc\u3067\u8003\u3048\u308b\u30682M\u3082M\u3082O(M)\u306a\u306e\u3067, \uff12\u3064\u306e\u65b9\u6cd5\u306b\u5dee\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u3053\u306e\u3088\u3046\u306b, Linked list\u306e\u554f\u984c\u3067\u306f, \u8907\u6570\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u7528\u610f\u3057\u3066\u7570\u306a\u308b\u30da\u30fc\u30b9, \u3042\u308b\u3044\u306f\u7570\u306a\u308b\u51fa\u767a\u70b9\u3067\u5404\u3005\u3092\u8d70\u67fb\u3055\u305b\u308b\u3053\u3068\u3067, \u554f\u984c\u3092\u52b9\u7387\u7684\u306b\u89e3\u304f\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059.\n#### \u554f\u984c\n\n```\n\u4e0e\u3048\u3089\u308c\u305f\u5358\u65b9\u5411\u30ea\u30b9\u30c8\u306e\u6700\u5f8c\u304b\u3089N\u756a\u76ee\u306e\u8981\u7d20\u3092\u6c42\u3081\u3088.\n\u8a72\u5f53\u306e\u8981\u7d20\u304c\u7121\u3044\u5834\u5408\u306fNULL\u3092\u8fd4\u5374\u3059\u308b\u3053\u3068.\n```\n\n#### Solution\n\n\u7c21\u5358\u306b\u601d\u3044\u3064\u304f\u65b9\u6cd5\u3068\u3057\u3066\u306f,\n\n1. \u4e0e\u3048\u3089\u308c\u305f\u30ea\u30b9\u30c8\u3092\u6700\u521d\u304b\u3089\u6700\u5f8c\u307e\u3067\u8d70\u67fb\u3057\u3066, \u30ea\u30b9\u30c8\u306e\u9577\u3055\u3092\u5272\u308a\u51fa\u3059\n2. \u5f8c\u308d\u304b\u3089N\u756a\u76ee\u306e\u8981\u7d20\u306f, \u30ea\u30b9\u30c8\u306e\u9577\u3055\u3092M\u3068\u3059\u308b\u3068\u5148\u982d\u304b\u3089`(N - M + 1)` \u756a\u76ee\u306a\u306e\u3067, \u518d\u5ea6\u524d\u304b\u3089\u30ea\u30b9\u30c8\u3092\u8d70\u67fb\u3059\u308b\n\n\u304c\u3042\u308a\u307e\u3059.\n\n```python:algorithm_linkedlist_find_nth_from_tail_1.py\n# Class of linked list Node.\nclass Node():\n    def __init__(self, val):\n        self.next = None\n        self.value = val\n    \n    def next(self):\n        return self.next\n    \n    def setNext(self, nextNode):\n        self.next = nextNode\n        \n\ndef findElement(head, N):\n    if head == None:\n        return None\n    \n    curNode = head\n    num = 1 # number of elements in list\n    while curNode.next:\n        num += 1\n        curNode = curNode.next\n    \n    if num < N or N <= 0: # list is too short\n        return None\n    \n    # get num - N + 1 node\n    curNode = head\n    curNum  = 1\n    while curNum < num - N + 1:\n        curNum += 1\n        curNode = curNode.next\n    return curNode.value\n```\n\n\u8a08\u7b97\u91cf: `O(M)`, \u7a7a\u9593\u91cf: `O(1)`\n\n```java:algorithm_linkedlist_find_nth_from_tail_1.java\n// Class of linked list node\nclass Node {\n    public int  value;\n    public Node next;\n    \n    public Node(int value) {\n        this.value = value;\n        this.next = null;\n    }\n    \n    public void setNext(Node nextNode) {\n        this.next = nextNode;\n    }\n}\n\nclass Solution\n{\n\tpublic static Node findNthNodeFromTail(Node head, int N) {\n\t    if (head == null) return null;\n\t    \n        int length   = 1;\n        Node curNode = head;\n        while (curNode.next != null) {\n            length++;\n            curNode = curNode.next;\n        } // now length = length of the given list\n        \n        if (length <= 0 || length < N) return null;\n        \n        int curLength = 1;\n        curNode       = head;\n        while (curLength < length - N + 1) {\n            curNode = curNode.next;\n            curLength++;\n        }\n        return curNode;\n\t}\n}\n```\n\n\u3053\u308c\u3082\u6709\u5411\u306a\u65b9\u6cd5\u3067\u3059\u304c, \u30ea\u30b9\u30c8\u3092\u4e8c\u56de\u8d70\u67fb\u3057\u3066\u3044\u307e\u3059.\n\u3053\u308c\u3092\u4e00\u56de\u306b\u6e1b\u3089\u305d\u3046\u3068\u601d\u3046\u3068, \u30ea\u30b9\u30c8\u306e\u30ce\u30fc\u30c9\u3092\u6307\u3059\u30dd\u30a4\u30f3\u30bf\u30922\u3064\u7528\u610f\u3057\u3066\n\n1. \u307e\u305a1\u3064\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u5148\u982d\u304b\u3089N\u756a\u76ee\u306e\u8981\u7d20\u307e\u3067\u9032\u3081\u308b\n2. \u3082\u30461\u3064\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u5148\u982d\u306b\u5f53\u3066\u308b\n3. \u6700\u521d\u306e\u30dd\u30a4\u30f3\u30bf\u304ctail\u306b\u5230\u9054\u3059\u308b\u307e\u3067, \u4e21\u65b9\u306e\u30dd\u30a4\u30f3\u30bf\u30921\u3064\u305a\u3064\u9032\u3081\u3066\u3044\u304f\n\n\u3053\u3046\u3059\u308b\u3068, \u6700\u5f8c\u306e\u72b6\u614b\u3068\u3057\u30662\u3064\u76ee\u306e\u30dd\u30a4\u30f3\u30bf\u304c\u5f8c\u308d\u304b\u3089N\u756a\u76ee\u306e\u8981\u7d20\u3067\u6b62\u307e\u3063\u3066\u3044\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059.\n\n```python:algorithm_linkedlist_find_nth_from_tail_2.py\n# Class of linked list Node.\ndef findElement(head, N):\n    if head == None:\n        return None\n    \n    p1 = head\n    num = 1\n    while num < N:\n        num += 1\n        p1 = p1.next\n        if p1 is None:\n            return None\n    \n    # get num - N + 1 node\n    p2 = head\n    while not p1.next is None:\n        p1 = p1.next\n        p2 = p2.next\n    return p2\n```\n\n\u8a08\u7b97\u91cf: `O(M)`, \u7a7a\u9593\u91cf: `O(1)`\n\n```java:algorithm_linkedlist_find_nth_from_tail_2.java\nclass Solution\n{\n\tpublic static Node findNthNodeFromTail(Node head, int N) {\n\t    if (head == null) return null;\n\t    \n        int length   = 1;\n        Node p1 = head;\n        while (length < N) {\n            length++;\n            p1 = p1.next;\n            \n            if (p1 == null) return null;\n        } // now p1 is on the Nth node from the head\n        \n        Node p2 = head;\n        while (p1.next != null) {\n            p1 = p1.next;\n            p2 = p2.next;\n        }\n        return p2;\n\t}\n}\n```\n\nfor\u5206\u306e\u7e70\u308a\u8fd4\u3057\u306e\u6570\u3092\u8003\u3048\u308b\u3068, \u30ea\u30b9\u30c8\uff11\u5de1\u308a\u5206\u3057\u304b\u8d70\u67fb\u3057\u3066\u3044\u306a\u3044\u3053\u3068\u306b\u6ce8\u76ee\u3067\u3059\u3002\u305f\u3060\u3057, \u8a08\u7b97\u91cf\u306e\u30aa\u30fc\u30c0\u30fc\u3067\u8003\u3048\u308b\u30682M\u3082M\u3082O(M)\u306a\u306e\u3067, \uff12\u3064\u306e\u65b9\u6cd5\u306b\u5dee\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u3053\u306e\u3088\u3046\u306b, Linked list\u306e\u554f\u984c\u3067\u306f, \u8907\u6570\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u7528\u610f\u3057\u3066\u7570\u306a\u308b\u30da\u30fc\u30b9, \u3042\u308b\u3044\u306f\u7570\u306a\u308b\u51fa\u767a\u70b9\u3067\u5404\u3005\u3092\u8d70\u67fb\u3055\u305b\u308b\u3053\u3068\u3067, \u554f\u984c\u3092\u52b9\u7387\u7684\u306b\u89e3\u304f\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059.\n", "tags": ["\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0", "\u30c7\u30fc\u30bf\u69cb\u9020", "interview", "LinkedList"]}