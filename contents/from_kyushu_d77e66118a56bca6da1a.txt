{"context": "\u6a2a\u6d5c\u3078\u306a\u3061\u3087\u3053\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u52c9\u5f37\u4f1a\u306b\u3066\u904e\u53bb\u306b\u51fa\u984c\u3055\u308c\u305f\u5206\u5c90\u3068\u884c\u304d\u6b62\u307e\u308a\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n\u56de\u7b54\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306f15\u5206\u7a0b\u5ea6\u3002\n\u6642\u9593\u914d\u5206\u3068\u3057\u3066\u306f\u5168\u30eb\u30fc\u30c8\u3092\u66f8\u304d\u51fa\u3059\u306e\u306b10\u5206\u3001\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u306e\u306b5\u5206\u3002\n\u30b9\u30bf\u30fc\u30c8\u304b\u3089\u30b4\u30fc\u30eb\u307e\u3067\u306b\u901a\u308b\u90e8\u5206\u3055\u3048\u5206\u304b\u3063\u3066\u3057\u307e\u3048\u3070\u3001\u901a\u884c\u7981\u6b62\u306e\u7dda\u8def\u304c\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u30eb\u30fc\u30c8\u3092\u62bd\u51fa\u3059\u308b\u3060\u3051\u306e\u529b\u696d\u3067\u3042\u308b\u3002\n\u4eca\u56de\u306f\u30eb\u30fc\u30c8\u6570\u304c\u5c11\u306a\u3044\u306e\u3067\u7279\u306b\u5de5\u592b\u3082\u3057\u3066\u3044\u306a\u3044\u304c\u3001\u3053\u308c\u304c\u30eb\u30fc\u30c8\u6570\u304c\u81a8\u5927\u306a\u6570\u306b\u306a\u308b\u306a\u3089\u3070\u3082\u3063\u3068\u5de5\u592b\u3057\u306a\u3051\u308c\u306a\u3089\u306a\u3044\u3060\u308d\u3046\u3002\nclass Rail\n  def initialize\n    @routes = {\n      1 => [\n        {route: [?a, ?b, ?c],     goal: 4},\n        {route: [?g, ?c],         goal: 4},\n        {route: [?g, ?h],         goal: 4},\n        {route: [?a, ?b],         goal: 5},\n        {route: [?g, ?e],         goal: 5},\n        {route: [?a, ?b, ?c],     goal: 6},\n        {route: [?g, ?c],         goal: 6},\n        {route: [?g, ?h, ?i],     goal: 6}\n      ],\n      2 => [\n        {route: [?d, ?c],         goal: 4},\n        {route: [?h],             goal: 4},\n        {route: [?d, ?e],         goal: 5},\n        {route: [?d, ?c],         goal: 6},\n        {route: [?h, ?i],         goal: 6}\n      ],\n      3 => [\n        {route: [?b, ?c],         goal: 4},\n        {route: [?f, ?g, ?c],     goal: 4},\n        {route: [?f, ?g, ?h],     goal: 4},\n        {route: [?b],             goal: 5},\n        {route: [?f, ?g, ?e],     goal: 5},\n        {route: [?b, ?c],         goal: 6},\n        {route: [?f, ?g, ?c],     goal: 6},\n        {route: [?f, ?g, ?h, ?i], goal: 6}\n      ]\n    }\n  end\n\n  def go input\n    chars = input.chars\n    can = @routes.each_with_object([]){|(start, routes), r|\n      routes.each{|route|\n        r << \"#{start}#{route[:goal]}\" unless chars.any?{|c| route[:route].include?(c)}\n      }\n    }.uniq.sort\n    can.empty? ? \"-\" : can.join(\",\")\n  end\nend\ntest = <<_TEST\n/*0*/ test( \"befi\", \"14,16,24,26\" );    \n/*1*/ test( \"abc\", \"14,15,16,24,25,26,34,35,36\" );    \n/*2*/ test( \"de\", \"14,15,16,24,26,34,35,36\" );    \n/*3*/ test( \"fghi\", \"14,15,16,24,25,26,34,35,36\" );    \n/*4*/ test( \"abcdefghi\", \"-\" );    \n/*5*/ test( \"ag\", \"24,25,26,34,35,36\" );    \n/*6*/ test( \"dh\", \"14,15,16,34,35,36\" );    \n/*7*/ test( \"bf\", \"14,15,16,24,25,26\" );    \n/*8*/ test( \"ch\", \"15,25,35\" );    \n/*9*/ test( \"be\", \"14,16,24,26,34,36\" );    \n/*10*/ test( \"ci\", \"14,15,24,25,34,35\" );    \n/*11*/ test( \"cgi\", \"15,24,25,35\" );    \n/*12*/ test( \"acgi\", \"24,25,35\" );    \n/*13*/ test( \"cdefghi\", \"15,35\" );    \n/*14*/ test( \"acdefghi\", \"35\" );    \n/*15*/ test( \"cdegi\", \"15,24,35\" );    \n/*16*/ test( \"bcdegi\", \"24\" );    \n/*17*/ test( \"afh\", \"14,15,16,24,25,26,34,35,36\" );    \n/*18*/ test( \"abfh\", \"14,15,16,24,25,26\" );    \n/*19*/ test( \"dfh\", \"14,15,16,34,35,36\" );    \n/*20*/ test( \"cdfh\", \"15,35\" );    \n/*21*/ test( \"deh\", \"14,15,16,34,35,36\" );    \n/*22*/ test( \"cdeh\", \"15,35\" );    \n/*23*/ test( \"abefgh\", \"24,26\" );    \n/*24*/ test( \"abdefgh\", \"-\" );    \n/*25*/ test( \"acfghi\", \"25,35\" );    \n/*26*/ test( \"acdfghi\", \"35\" );    \n/*27*/ test( \"cegi\", \"15,24,35\" );    \n/*28*/ test( \"abcfhi\", \"15,25\" );    \n/*29*/ test( \"abcefhi\", \"-\" );    \n/*30*/ test( \"abdi\", \"14,15,16,24,34,35,36\" );    \n/*31*/ test( \"abdfi\", \"14,15,16,24\" );    \n/*32*/ test( \"bdi\", \"14,15,16,24,34,35,36\" );    \n/*33*/ test( \"bdfi\", \"14,15,16,24\" );    \n/*34*/ test( \"adfh\", \"14,15,16,34,35,36\" );    \n/*35*/ test( \"adfgh\", \"34,35,36\" );    \n/*36*/ test( \"acdfhi\", \"15,35\" );    \n/*37*/ test( \"bcdfgi\", \"24\" );    \n/*38*/ test( \"bcdfghi\", \"-\" );    \n/*39*/ test( \"defi\", \"14,15,16,24,34,35,36\" );    \n/*40*/ test( \"defhi\", \"14,15,16,34,35,36\" );    \n/*41*/ test( \"cdefg\", \"15,24,26,35\" );    \n/*42*/ test( \"cdefgi\", \"15,24,35\" );    \n/*43*/ test( \"bdefg\", \"24,26\" );    \n/*44*/ test( \"bdefgi\", \"24\" );\n_TEST\n\nrequire 'minitest/autorun'\n\ndescribe 'Rail' do\n  rail = Rail.new\n  test.split(\"\\n\").each do |line|\n    t, n, input, expect = line.match(/^\\/\\*(\\d+)\\*\\/\\s*test\\(\\s*\"([^\"]+)\",\\s*\"([^\"]+)\"\\s*\\);*\\s*$/).to_a\n    it input do\n      assert_equal expect, rail.go(input)\n    end\n  end\nend\n\n\n[\u6a2a\u6d5c\u3078\u306a\u3061\u3087\u3053\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u52c9\u5f37\u4f1a](https://yhpg.doorkeeper.jp/)\u306b\u3066\u904e\u53bb\u306b\u51fa\u984c\u3055\u308c\u305f[\u5206\u5c90\u3068\u884c\u304d\u6b62\u307e\u308a](http://nabetani.sakura.ne.jp/hena/ord27raswi/)\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n\u56de\u7b54\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306f15\u5206\u7a0b\u5ea6\u3002\n\u6642\u9593\u914d\u5206\u3068\u3057\u3066\u306f\u5168\u30eb\u30fc\u30c8\u3092\u66f8\u304d\u51fa\u3059\u306e\u306b10\u5206\u3001\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u306e\u306b5\u5206\u3002\n\n\u30b9\u30bf\u30fc\u30c8\u304b\u3089\u30b4\u30fc\u30eb\u307e\u3067\u306b\u901a\u308b\u90e8\u5206\u3055\u3048\u5206\u304b\u3063\u3066\u3057\u307e\u3048\u3070\u3001\u901a\u884c\u7981\u6b62\u306e\u7dda\u8def\u304c\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u30eb\u30fc\u30c8\u3092\u62bd\u51fa\u3059\u308b\u3060\u3051\u306e\u529b\u696d\u3067\u3042\u308b\u3002\n\u4eca\u56de\u306f\u30eb\u30fc\u30c8\u6570\u304c\u5c11\u306a\u3044\u306e\u3067\u7279\u306b\u5de5\u592b\u3082\u3057\u3066\u3044\u306a\u3044\u304c\u3001\u3053\u308c\u304c\u30eb\u30fc\u30c8\u6570\u304c\u81a8\u5927\u306a\u6570\u306b\u306a\u308b\u306a\u3089\u3070\u3082\u3063\u3068\u5de5\u592b\u3057\u306a\u3051\u308c\u306a\u3089\u306a\u3044\u3060\u308d\u3046\u3002\n\n```ruby\nclass Rail\n  def initialize\n    @routes = {\n      1 => [\n        {route: [?a, ?b, ?c],     goal: 4},\n        {route: [?g, ?c],         goal: 4},\n        {route: [?g, ?h],         goal: 4},\n        {route: [?a, ?b],         goal: 5},\n        {route: [?g, ?e],         goal: 5},\n        {route: [?a, ?b, ?c],     goal: 6},\n        {route: [?g, ?c],         goal: 6},\n        {route: [?g, ?h, ?i],     goal: 6}\n      ],\n      2 => [\n        {route: [?d, ?c],         goal: 4},\n        {route: [?h],             goal: 4},\n        {route: [?d, ?e],         goal: 5},\n        {route: [?d, ?c],         goal: 6},\n        {route: [?h, ?i],         goal: 6}\n      ],\n      3 => [\n        {route: [?b, ?c],         goal: 4},\n        {route: [?f, ?g, ?c],     goal: 4},\n        {route: [?f, ?g, ?h],     goal: 4},\n        {route: [?b],             goal: 5},\n        {route: [?f, ?g, ?e],     goal: 5},\n        {route: [?b, ?c],         goal: 6},\n        {route: [?f, ?g, ?c],     goal: 6},\n        {route: [?f, ?g, ?h, ?i], goal: 6}\n      ]\n    }\n  end\n\n  def go input\n    chars = input.chars\n    can = @routes.each_with_object([]){|(start, routes), r|\n      routes.each{|route|\n        r << \"#{start}#{route[:goal]}\" unless chars.any?{|c| route[:route].include?(c)}\n      }\n    }.uniq.sort\n    can.empty? ? \"-\" : can.join(\",\")\n  end\nend\ntest = <<_TEST\n/*0*/ test( \"befi\", \"14,16,24,26\" );    \n/*1*/ test( \"abc\", \"14,15,16,24,25,26,34,35,36\" );    \n/*2*/ test( \"de\", \"14,15,16,24,26,34,35,36\" );    \n/*3*/ test( \"fghi\", \"14,15,16,24,25,26,34,35,36\" );    \n/*4*/ test( \"abcdefghi\", \"-\" );    \n/*5*/ test( \"ag\", \"24,25,26,34,35,36\" );    \n/*6*/ test( \"dh\", \"14,15,16,34,35,36\" );    \n/*7*/ test( \"bf\", \"14,15,16,24,25,26\" );    \n/*8*/ test( \"ch\", \"15,25,35\" );    \n/*9*/ test( \"be\", \"14,16,24,26,34,36\" );    \n/*10*/ test( \"ci\", \"14,15,24,25,34,35\" );    \n/*11*/ test( \"cgi\", \"15,24,25,35\" );    \n/*12*/ test( \"acgi\", \"24,25,35\" );    \n/*13*/ test( \"cdefghi\", \"15,35\" );    \n/*14*/ test( \"acdefghi\", \"35\" );    \n/*15*/ test( \"cdegi\", \"15,24,35\" );    \n/*16*/ test( \"bcdegi\", \"24\" );    \n/*17*/ test( \"afh\", \"14,15,16,24,25,26,34,35,36\" );    \n/*18*/ test( \"abfh\", \"14,15,16,24,25,26\" );    \n/*19*/ test( \"dfh\", \"14,15,16,34,35,36\" );    \n/*20*/ test( \"cdfh\", \"15,35\" );    \n/*21*/ test( \"deh\", \"14,15,16,34,35,36\" );    \n/*22*/ test( \"cdeh\", \"15,35\" );    \n/*23*/ test( \"abefgh\", \"24,26\" );    \n/*24*/ test( \"abdefgh\", \"-\" );    \n/*25*/ test( \"acfghi\", \"25,35\" );    \n/*26*/ test( \"acdfghi\", \"35\" );    \n/*27*/ test( \"cegi\", \"15,24,35\" );    \n/*28*/ test( \"abcfhi\", \"15,25\" );    \n/*29*/ test( \"abcefhi\", \"-\" );    \n/*30*/ test( \"abdi\", \"14,15,16,24,34,35,36\" );    \n/*31*/ test( \"abdfi\", \"14,15,16,24\" );    \n/*32*/ test( \"bdi\", \"14,15,16,24,34,35,36\" );    \n/*33*/ test( \"bdfi\", \"14,15,16,24\" );    \n/*34*/ test( \"adfh\", \"14,15,16,34,35,36\" );    \n/*35*/ test( \"adfgh\", \"34,35,36\" );    \n/*36*/ test( \"acdfhi\", \"15,35\" );    \n/*37*/ test( \"bcdfgi\", \"24\" );    \n/*38*/ test( \"bcdfghi\", \"-\" );    \n/*39*/ test( \"defi\", \"14,15,16,24,34,35,36\" );    \n/*40*/ test( \"defhi\", \"14,15,16,34,35,36\" );    \n/*41*/ test( \"cdefg\", \"15,24,26,35\" );    \n/*42*/ test( \"cdefgi\", \"15,24,35\" );    \n/*43*/ test( \"bdefg\", \"24,26\" );    \n/*44*/ test( \"bdefgi\", \"24\" );\n_TEST\n\nrequire 'minitest/autorun'\n\ndescribe 'Rail' do\n  rail = Rail.new\n  test.split(\"\\n\").each do |line|\n    t, n, input, expect = line.match(/^\\/\\*(\\d+)\\*\\/\\s*test\\(\\s*\"([^\"]+)\",\\s*\"([^\"]+)\"\\s*\\);*\\s*$/).to_a\n    it input do\n      assert_equal expect, rail.go(input)\n    end\n  end\nend\n```\n", "tags": ["Ruby", "\u3069\u3046\u66f8\u304f", "yhpg"]}