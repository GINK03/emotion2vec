{"context": " More than 1 year has passed since last update.\n\n\u6a5f\u68b0\u8a9e\n\u30e1\u30e2\n\n\u30ec\u30b8\u30b9\u30bf\nB80000\nmov ax, 0\nB80000 \u2190 mov ax, 0\n\u30a2\u30bb\u30f3\u30d6\u30e9\nB80000 \u2192 mov ax, 0\n\u9006\u30a2\u30bb\u30f3\u30d6\u30e9\n\u30ea\u30c8\u30eb\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\n\u2192\u4e3b\u6d41\n34 12\n12 34\n\u30d3\u30c3\u30b0\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\n12 34\n12 34\n\u30d0\u30a4\u30c8\u3054\u3068\u306b\u308f\u3051\u305f\u72b6\u614b\u304cLE\u304bBE\n\u304f\u3063\u3064\u3044\u3066\u3044\u308b\u72b6\u614b\u306f\u306a\u306b\u3067\u3082\u306a\u3044\nx86\n\u5909\u6570\u306e\u6570\n16bit - 8\n32bit - 8\n64bit - 16\n\u30b9\u30de\u30db ARM\n32bit - 16\n\n\u30ec\u30b8\u30b9\u30bf \u5909\u6570\n0 AX  B8\n1 CX  B9\n2 DX  BA\n3 BX  BB\n4 SP  BC\n5 BP  BD\n6 SI  BE\n7 DI  BF\nBB EF BE mov bx, beef\nBF FE CA mov di, cafe\n16 8\n0 AX AH, AL\n1 CX CH, CL\n2 DX DH, DL\n3 BX BH, BL\n4 SP\n5 BP\n6 SI\n7 DI\n\u4e0a \u4e0b\n12 34\nAH AL\nhigh low\nmov ax, 1234\nmov ah, 56\nmov al, 34\nmov ah, 12\nax = 1234\nAL\nCL\nDL\nBL\nAH\nCH\nDH\nBH\n16 8\n0 AX AL\n1 CX CL\n2 DX DL\n3 BX BL\n4 SP AH\n5 BP CH\n6 SI DH\n7 DI BH\nB0 12 mov al, 12\nB6 56 mov dh, 56\nB0 xx mov al, xx\nB1 xx mov cl, xx\nB2 xx mov dl, xx\nB3\nB4\nB5\nB6\nB7 xx mov bh, xx\nmov = Move\nImmediate to R\nw = 1 word\u547d\u4ee4 16bit\nw = 0 byte\u547d\u4ee4 8bit\n1011 w reg | data | data if w = 1\n8421\n1011 w reg\n\u2193\nB    0 - F\nw = 0 10110reg = B0 + r8\nw = 1 10111reg = B8 + r16\nPUSH\npush si -> 0101 0110\n           5    6\n16bit\n0000 - FFFF\n65536 64KB\npush ss\n17\nXCHG = Exchange\nR/M with R\nR with A 10010reg\nxchg r16, ax\nxchg si, ax\nxchg ax, si   1001 0110\n              9    6\nMOV\u3068\u304b\u3092\u30cb\u30fc\u30e2\u30cb\u30c3\u30af\nxchg          r16\n\u30cb\u30fc\u30e2\u30cb\u30c3\u30af  \u30aa\u30da\u30e9\u30f3\u30c9\nmov\nimmediate to register\nADD\nimmediate to Accmulater\nadd ax, 1234\nmov ax,  1234\n         \u5373\u5024\n0000010w\n       8\n       16\nw\u306f8bit\u306e\u3068\u304d\u306816bit\u306e\u3068\u304d\u304c\u3042\u308b\nal\nax \u30ec\u30b8\u30b9\u30bf\u756a\u53f70\u756a\n\n8\u306e\u3068\u304d\nadd al, 56\n16\u306e\u3068\u304d\nadd ax,  1\n\nadd ax,  0001\nadd al,  001\nw\u306e\u6307\u5b9a\u304c\u306a\u3044\u3068\u304d\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u30671\nINC\nRegister 01000reg\n         (w=1) \u6697\u9ed9\u306716bit\ninc bp\n01000 101\n0100 0101\n4    5\n\nmod r/m\u306e\u8a71\nPUSH      FF          2   3   3\nR/M       11111111    mod 110 r/m\n                  mode   \u30ec\u30b8\u30b9\u30bf\u307e\u305f\u306f\u30e1\u30e2\u30ea\n                  \u30e2\u30fc\u30c9 \u30a2\u30fc\u30eb\u30a8\u30e0\n                      \u547d\u4ee4\u306b\u3088\u3063\u3066\u9055\u3046\n\nmod r/m \uff11\u3064\u306e\u30aa\u30da\u30e9\u30f3\u30c9\npush mod r/m\ncall\n11111111 mod011r/m\n011\u306f\u3069\u306e\u547d\u4ee4\u304b\u8868\u3059\u90e8\u5206\n\n\u30e1\u30e2\u30ea\u306e\u8a71\n\u30ec\u30b8\u30b9\u30bf    \u30e1\u30e2\u30ea    1MB\nAx          0\nCx          1\n            2\n            3\nC7 06 34 12 78 56\nmov word [1234], 5678\n                 16bit\nmov byte [1234]\nmov word [1234], 0056 16bit\nC6 06 34 12 56\nC7 11000111\nimmediate to Register\n06  w\n00   000 110\nmod      r/m\nC7 06 34 12 78 56\nmov word [1234] 5678\n                 \u2193 \u5272\u308a\u8fbc\u307e\u308c\u308b\n\n1100011w  mod000r/m      data  data if w = 1\nmov word[1234], 5678\nmov bx,  1234\nmov word [bx], 5678 \u2192 C7 07 78 56\nmov word [bx+2], 5678 \u2192 C7 47 02 78 56\n        \u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u30b9\u30e1\u30f3\u30c8 -> DISP\n\n07\n00 000 111\nmod    r/m\n47\n01  000 111\nmod     r/m\n\n\u7b26\u53f7\u62e1\u5f35\n00 - FF\n0 - 255\n\u7b26\u53f7\u306a\u3057\n00 - 7F 0 - 127\n80 - FF -128 - -1\n27 + 100 - 1\n126\n00            FF 00            FF\n                100\n2\u306e\u88dc\u6570\n\u7b26\u53f7\u306e\u3064\u3044\u3066\u308b\u6570\u5b57\u306e\u3053\u3068\nFF -> 00FF  \u30bc\u30ed\u62e1\u5f35\n-1    255\nFF -> FFFF  \u7b26\u53f7\u62e1\u5f35\n-1    -1\n\nmod\nmov word [bx], 5678 -> C7 07 78 56\nmov word [bx+2], 5678 -> C7 47 02 78\nr/m = 111 EA = (BX) + DISP\nmod  r/m\n00   000 -> (BX) + (SI) + DISP -> [BX+SI+DISP]\n00   001 -> [BX+DI+]\n00   010 -> [BP+SI]\n00   011 -> [BP+DI]\n00   100 -> [SI]\n00   101 -> [DI]\n00   110 -> \u4f8b\u5916 x [BP] -> [\u30a2\u30c9\u30ec\u30b9]\n00   111 -> [BX]\nmov word [bp], 1234\nmov word [bp+0], 1234\n             \u2191\n             mod = 01\n\n\u7df4\u7fd2\u554f\u984c\n\u30cf\u30f3\u30c9\u30a2\u30bb\u30f3\u30d6\u30eb\n\n1 mov byte [bp+si], 56\n          mod000r/m\n 1100 0110 0000 0010 0101 0110\n C6 02 56\n\n\n2 mov word [di],  1234\n11000111 00 000 101 0011 0100 0001 0010\nC7 05 34 12\n\n3 mov ds,  ax\nregister/memory to segment register\n10001110 1101 1000\n8E 0 8\n1101 1000\n0    8\nmod 0 reg r/m\n1101 1000\n11 \u3068 000 \u304cax\nmod 0 reg r/m\n\n4 mov [bx+si], es\nes \u304c SR to R/M\n10001100 0000 0000\n8C 00\nmod r/m\u304c\u30bb\u30c3\u30c8\nmod 0 reg r/m\n00  000   00\n\nregister/memory to/from register\nmov [bx], ax 8907 from 10001001\nmov ax, [bx] 8B07 to   10001011\nax\u304cword\u306a\u306e\u306f\u81ea\u660e\nd=1 to reg\nd=0 from reg\nd=0 mod r/m, reg\nd=1 reg, mod r/m\n\nsw\u3092\u3069\u3046\u898b\u5206\u3051\u308b\u304b\nnasm   \u30a2\u30bb\u30f3\u30d6\u30e9\nndisasm \u9006\u30a2\u30bb\u30f3\u30d6\u30e9\n01\n10\n11\nmov ax, es\n8C CO\n10001100\n11000000\n8D 00 8D 38 8D 06 34 12 8D C0 8C C0 8D FF\n$ ndisasm test\n00000000  8D00              lea ax,[bx+si]\n00000002  8D38              lea di,[bx+si]\n00000004  8D063412          lea ax,[0x1234]\n00000008  8D                db 0x8D\n00000009  C0                db 0xC0\n0000000A  8CC0              mov ax,es\n8C\nsbyte bin.[\u301c]\nlet c = (nint 16 a)|||(nint 16 b) <<< 8) |> int16\nabs\u7d76\u5bfe\u5024\u304c\u3068\u308c\u308b\nabs(int(sbyte))\n8C 08 8D 00 8D 38\n+1 -> +0\n-1 -> -0x1\n8D 00 8D 38 8D 80 FF FF 8C C0 8C C7\n8D 00 8D 38 8D 06 34 12 8D 40 01 8D 40 FF 8D 80\n01 00 8D 80 FF FF 8C C0 8C C7 8C E7 8C 00 8C 04\n8D 80 FF FF\n# \u6a5f\u68b0\u8a9e\n\n\u30e1\u30e2\n\n## \u30ec\u30b8\u30b9\u30bf\n\nB80000\n\nmov ax, 0\n\nB80000 \u2190 mov ax, 0\n\u30a2\u30bb\u30f3\u30d6\u30e9\n\nB80000 \u2192 mov ax, 0\n\u9006\u30a2\u30bb\u30f3\u30d6\u30e9\n\n\u30ea\u30c8\u30eb\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\n\u2192\u4e3b\u6d41\n\n34 12\n12 34\n\n\u30d3\u30c3\u30b0\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\n12 34\n12 34\n\n\u30d0\u30a4\u30c8\u3054\u3068\u306b\u308f\u3051\u305f\u72b6\u614b\u304cLE\u304bBE\n\u304f\u3063\u3064\u3044\u3066\u3044\u308b\u72b6\u614b\u306f\u306a\u306b\u3067\u3082\u306a\u3044\n\nx86\n\u5909\u6570\u306e\u6570\n16bit - 8\n32bit - 8\n64bit - 16\n\n\u30b9\u30de\u30db ARM\n32bit - 16\n\n## \u30ec\u30b8\u30b9\u30bf \u5909\u6570\n0 AX  B8\n1 CX  B9\n2 DX  BA\n3 BX  BB\n4 SP  BC\n5 BP  BD\n6 SI  BE\n7 DI  BF\n\nBB EF BE mov bx, beef\nBF FE CA mov di, cafe\n\n  16 8\n0 AX AH, AL\n1 CX CH, CL\n2 DX DH, DL\n3 BX BH, BL\n4 SP\n5 BP\n6 SI\n7 DI\n\n\u4e0a \u4e0b\n12 34\nAH AL\n\nhigh low\n\nmov ax, 1234\nmov ah, 56\n\nmov al, 34\nmov ah, 12\nax = 1234\n\nAL\nCL\nDL\nBL\nAH\nCH\nDH\nBH\n\n  16 8\n0 AX AL\n1 CX CL\n2 DX DL\n3 BX BL\n4 SP AH\n5 BP CH\n6 SI DH\n7 DI BH\n\nB0 12 mov al, 12\nB6 56 mov dh, 56\n\nB0 xx mov al, xx\nB1 xx mov cl, xx\nB2 xx mov dl, xx\nB3\nB4\nB5\nB6\nB7 xx mov bh, xx\n\nmov = Move\n\nImmediate to R\n\nw = 1 word\u547d\u4ee4 16bit\nw = 0 byte\u547d\u4ee4 8bit\n\n1011 w reg | data | data if w = 1\n8421\n\n1011 w reg\n\u2193\nB    0 - F\n\nw = 0 10110reg = B0 + r8\n\nw = 1 10111reg = B8 + r16\n\nPUSH\n\npush si -> 0101 0110\n           5    6\n\n16bit\n0000 - FFFF\n65536 64KB\n\npush ss\n17\n\nXCHG = Exchange\nR/M with R\nR with A 10010reg\n\nxchg r16, ax\n\nxchg si, ax\nxchg ax, si   1001 0110\n              9    6\n\nMOV\u3068\u304b\u3092\u30cb\u30fc\u30e2\u30cb\u30c3\u30af\n\nxchg          r16\n\u30cb\u30fc\u30e2\u30cb\u30c3\u30af  \u30aa\u30da\u30e9\u30f3\u30c9\n\nmov\nimmediate to register\n\nADD\nimmediate to Accmulater\n\nadd ax, 1234\nmov ax,  1234\n         \u5373\u5024\n\n0000010w\n       8\n       16\nw\u306f8bit\u306e\u3068\u304d\u306816bit\u306e\u3068\u304d\u304c\u3042\u308b\n\nal\nax \u30ec\u30b8\u30b9\u30bf\u756a\u53f70\u756a\n\n* 8\u306e\u3068\u304d\nadd al, 56\n\n* 16\u306e\u3068\u304d\nadd ax,  1\n\nadd ax,  0001\nadd al,  001\n\nw\u306e\u6307\u5b9a\u304c\u306a\u3044\u3068\u304d\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u30671\n\nINC\nRegister 01000reg\n         (w=1) \u6697\u9ed9\u306716bit\n\ninc bp\n01000 101\n\n0100 0101\n4    5\n\n### mod r/m\u306e\u8a71\n\nPUSH      FF          2   3   3\nR/M       11111111    mod 110 r/m\n\n                      mode   \u30ec\u30b8\u30b9\u30bf\u307e\u305f\u306f\u30e1\u30e2\u30ea\n                      \u30e2\u30fc\u30c9 \u30a2\u30fc\u30eb\u30a8\u30e0\n                          \u547d\u4ee4\u306b\u3088\u3063\u3066\u9055\u3046\n\nmod r/m \uff11\u3064\u306e\u30aa\u30da\u30e9\u30f3\u30c9\n\npush mod r/m\n\n\ncall\n11111111 mod011r/m\n\n011\u306f\u3069\u306e\u547d\u4ee4\u304b\u8868\u3059\u90e8\u5206\n\n\n### \u30e1\u30e2\u30ea\u306e\u8a71\n\n\u30ec\u30b8\u30b9\u30bf    \u30e1\u30e2\u30ea    1MB\nAx          0\nCx          1\n            2\n            3\n\nC7 06 34 12 78 56\n\nmov word [1234], 5678\n                 16bit\n\n\nmov byte [1234]\nmov word [1234], 0056 16bit\n\nC6 06 34 12 56\n\nC7 11000111\nimmediate to Register\n\n06  w\n\n00   000 110\nmod      r/m\n\n\nC7 06 34 12 78 56\nmov word [1234] 5678\n\n                     \u2193 \u5272\u308a\u8fbc\u307e\u308c\u308b\n1100011w  mod000r/m      data  data if w = 1\n\nmov word[1234], 5678\n\nmov bx,  1234\nmov word [bx], 5678 \u2192 C7 07 78 56\n\nmov word [bx+2], 5678 \u2192 C7 47 02 78 56\n\n            \u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u30b9\u30e1\u30f3\u30c8 -> DISP\n\n07\n00 000 111\nmod    r/m\n\n47\n01  000 111\nmod     r/m\n\n## \u7b26\u53f7\u62e1\u5f35\n\n00 - FF\n0 - 255\n\u7b26\u53f7\u306a\u3057\n\n00 - 7F 0 - 127\n80 - FF -128 - -1\n\n27 + 100 - 1\n126\n\n00            FF 00            FF\n                100\n\n2\u306e\u88dc\u6570\n\u7b26\u53f7\u306e\u3064\u3044\u3066\u308b\u6570\u5b57\u306e\u3053\u3068\n\nFF -> 00FF  \u30bc\u30ed\u62e1\u5f35\n-1    255\n\nFF -> FFFF  \u7b26\u53f7\u62e1\u5f35\n-1    -1\n\n## mod\n\nmov word [bx], 5678 -> C7 07 78 56\nmov word [bx+2], 5678 -> C7 47 02 78\n\nr/m = 111 EA = (BX) + DISP\n\nmod  r/m\n00   000 -> (BX) + (SI) + DISP -> [BX+SI+DISP]\n00   001 -> [BX+DI+]\n00   010 -> [BP+SI]\n00   011 -> [BP+DI]\n00   100 -> [SI]\n00   101 -> [DI]\n00   110 -> \u4f8b\u5916 x [BP] -> [\u30a2\u30c9\u30ec\u30b9]\n00   111 -> [BX]\n\nmov word [bp], 1234\nmov word [bp+0], 1234\n             \u2191\n             mod = 01\n\n## \u7df4\u7fd2\u554f\u984c\n\u30cf\u30f3\u30c9\u30a2\u30bb\u30f3\u30d6\u30eb\n\n### 1 mov byte [bp+si], 56\n              mod000r/m\n     1100 0110 0000 0010 0101 0110\n     C6 02 56\n\n### 2 mov word [di],  1234\n\n11000111 00 000 101 0011 0100 0001 0010\n\nC7 05 34 12\n\n### 3 mov ds,  ax\n\nregister/memory to segment register\n\n10001110 1101 1000\n8E 0 8\n\n1101 1000\n0    8\nmod 0 reg r/m\n\n1101 1000\n11 \u3068 000 \u304cax\nmod 0 reg r/m\n\n### 4 mov [bx+si], es\n\nes \u304c SR to R/M\n\n10001100 0000 0000\n8C 00\n\nmod r/m\u304c\u30bb\u30c3\u30c8\n\nmod 0 reg r/m\n00  000   00\n\n### register/memory to/from register\n\nmov [bx], ax 8907 from 10001001\nmov ax, [bx] 8B07 to   10001011\n\nax\u304cword\u306a\u306e\u306f\u81ea\u660e\n\nd=1 to reg\nd=0 from reg\n\nd=0 mod r/m, reg\nd=1 reg, mod r/m\n\n### sw\u3092\u3069\u3046\u898b\u5206\u3051\u308b\u304b\n\nnasm   \u30a2\u30bb\u30f3\u30d6\u30e9\nndisasm \u9006\u30a2\u30bb\u30f3\u30d6\u30e9\n\n01\n10\n11\n\nmov ax, es\n8C CO\n\n10001100\n11000000\n\n8D 00 8D 38 8D 06 34 12 8D C0 8C C0 8D FF\n\n$ ndisasm test\n00000000  8D00              lea ax,[bx+si]\n00000002  8D38              lea di,[bx+si]\n00000004  8D063412          lea ax,[0x1234]\n00000008  8D                db 0x8D\n00000009  C0                db 0xC0\n0000000A  8CC0              mov ax,es\n\n8C\n\nsbyte bin.[\u301c]\nlet c = (nint 16 a)|||(nint 16 b) <<< 8) |> int16\n\nabs\u7d76\u5bfe\u5024\u304c\u3068\u308c\u308b\n\nabs(int(sbyte))\n\n8C 08 8D 00 8D 38\n\n\n+1 -> +0\n-1 -> -0x1\n\n\n8D 00 8D 38 8D 80 FF FF 8C C0 8C C7\n\n8D 00 8D 38 8D 06 34 12 8D 40 01 8D 40 FF 8D 80\n01 00 8D 80 FF FF 8C C0 8C C7 8C E7 8C 00 8C 04\n\n8D 80 FF FF\n", "tags": ["assembly", "Intel8086"]}