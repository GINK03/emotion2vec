{"tags": ["Node.js", "JavaScript", "LINEmessagingAPI", "linebot", "Line"], "context": "Hapi\u3067LINE Bot\u3092\u30b5\u30af\u30c3\u3068\u8a66\u3059\u3067\u3084\u3063\u305f\u30aa\u30a6\u30e0\u8fd4\u3057\u3092\u4f9d\u5b58\u30e2\u30b8\u30e5\u30fc\u30eb\u7121\u3057\u3067\u3084\u3063\u3066\u307f\u307e\u3059\u3002\n\n\n\u5148\u306b\u5b8c\u6210\u30b3\u30fc\u30c9\n\nChannel Secret\nChannel Access Token\n\n\u3092\u6307\u5b9a\u3057\u307e\u3057\u3087\u3046\u3002\n\u5916\u90e8\u4f9d\u5b58\u306f\u7121\u3044\u306e\u3067npm i\u306f\u3044\u308a\u307e\u305b\u3093\u3002\u3061\u306a\u307f\u306bNode.js\u306fv7.0.0\u3067\u3059\u3002\napp.js\u3001\u30b3\u30d4\u30da\u3067\u4f7f\u3048\u307e\u3059\u3002\n\napp.js\n'use strict';\n\nconst http = require('http');\nconst https = require('https');\nconst crypto = require('crypto');\n\nconst HOST = 'api.line.me'; \nconst REPLY_PATH = '/v2/bot/message/reply';//\u30ea\u30d7\u30e9\u30a4\u7528\nconst CH_SECRET = 'xxxxxxxx'; //Channel Secret\u3092\u6307\u5b9a\nconst CH_ACCESS_TOKEN = 'xxxxxx'; //Channel Access Token\u3092\u6307\u5b9a\nconst SIGNATURE = crypto.createHmac('sha256', CH_SECRET);\nconst PORT = 3000;\n\n/**\n * http\u30ea\u30af\u30a8\u30b9\u30c8\u90e8\u5206\n */\nconst client = (replyToken, SendMessageObject) => {    \n    let postDataStr = JSON.stringify({ replyToken: replyToken, messages: SendMessageObject });\n    let options = {\n        host: HOST,\n        port: 443,\n        path: REPLY_PATH,\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json; charset=UTF-8',\n            'X-Line-Signature': SIGNATURE,\n            'Authorization': `Bearer ${CH_ACCESS_TOKEN}`,\n            'Content-Length': Buffer.byteLength(postDataStr)\n        }\n    };\n\n    return new Promise((resolve, reject) => {\n        let req = https.request(options, (res) => {\n                    let body = '';\n                    res.setEncoding('utf8');\n                    res.on('data', (chunk) => {\n                        body += chunk;\n                    });\n                    res.on('end', () => {\n                        resolve(body);\n                    });\n        });\n\n        req.on('error', (e) => {\n            reject(e);\n        });\n        req.write(postDataStr);\n        req.end();\n    });\n};\n\nhttp.createServer((req, res) => {    \n    if(req.url !== '/' || req.method !== 'POST'){\n        res.writeHead(200, {'Content-Type': 'text/plain'});\n        res.end('');\n    }\n\n    let body = '';\n    req.on('data', (chunk) => {\n        body += chunk;\n    });        \n    req.on('end', () => {\n        if(body === ''){\n          console.log('body\u304c\u7a7a\u3067\u3059\u3002');\n          return;\n        }\n\n        let WebhookEventObject = JSON.parse(body).events[0];        \n        //\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u9001\u3089\u308c\u3066\u6765\u305f\u5834\u5408\n        if(WebhookEventObject.type === 'message'){\n            let SendMessageObject;\n            if(WebhookEventObject.message.type === 'text'){\n                SendMessageObject = [{\n                    type: 'text',\n                    text: WebhookEventObject.message.text\n                }];\n            }\n            client(WebhookEventObject.replyToken, SendMessageObject)\n            .then((body)=>{\n                console.log(body);\n            },(e)=>{console.log(e)});\n        }\n\n        res.writeHead(200, {'Content-Type': 'text/plain'});\n        res.end('su');\n    });\n\n}).listen(PORT);\n\nconsole.log(`Server running at ${PORT}`);\n\n\n\n\u89e3\u8aac\u3063\u307d\u3044\u3082\u306e\n\u304a\u3046\u3080\u8fd4\u3057\u307e\u3067\u306e\u6d41\u308c\u306f\u3053\u3093\u306a\u611f\u3058\u306e\u30a4\u30e1\u30fc\u30b8\u3067\u3059\u3002\n\n\nBOT\u306eWebhookURL\u3092LINE Messaging API\u5074\u306b\u767b\u9332\n\u30e6\u30fc\u30b6\u30fc\u304c\u767a\u8a00`\nLINE Messaging API\u304b\u3089Webhook Event Object\u304cBOT\u306b\u9001\u4fe1\u3055\u308c\u308b\nBOT\u5074\u304b\u3089Reply Message API\u3092\u53e9\u304d\u307e\u3059\u3002\u3053\u306e\u6642\u306b\u8a8d\u8a3c\u60c5\u5831\u304c\u5fc5\u8981\u3067\u3059\u3002\nBOT\u304c\u8fd4\u4fe1\n\n\nWebhook Event Object\nhttps://devdocs.line.me/ja/#webhook-event-object\nLINE\u306e\u30b5\u30fc\u30d0\u30fc\u5074\u304b\u3089\u9001\u3089\u308c\u3066\u304f\u308bBOT\u306b\u5bfe\u3059\u308b\u30a4\u30d9\u30f3\u30c8(\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u4fe1\u3001\u53cb\u9054\u8ffd\u52a0\u306a\u3069)\u306e\u60c5\u5831\u3067\u3059\u3002\n\nReply Messsage API\nhttps://devdocs.line.me/ja/#reply-message\n\u6307\u5b9a\u3057\u305f\u5b9b\u5148\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8fd4\u4fe1\u3059\u308bAPI\u3067\u3059\u3002\nWebhook Event Object\u3067\u9001\u3089\u308c\u3066\u304f\u308b\u60c5\u5831\u306e\u4e2d\u304b\u3089replyToken\u3092\u53d6\u5f97\u3057\u3066\u8fd4\u4fe1\u5b9b\u5148\u3068\u3057\u307e\u3059\u3002\n\u3053\u306e\u6642\u4ee5\u4e0b\u306e\u8a8d\u8a3c\u304c\u767a\u751f\u3057\u307e\u3059\u3002\n\n\u8a8d\u8a3c\u90e8\u5206\u306b\u3064\u3044\u3066\nhttps://devdocs.line.me/ja/#webhook \nSignature Valdation\n\n\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u9001\u4fe1\u5143\u304cLINE\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u7f72\u540d\u691c\u8a3c\u3092\u884c\u308f\u306a\u304f\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u3002\n\u5404\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u306f X-Line-Signature \u30d8\u30c3\u30c0\u304c\u4ed8\u4e0e\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nX-Line-Signature \u30d8\u30c3\u30c0\u306e\u5024\u3068\u3001Request Body \u3068 Channel Secret \u304b\u3089\u8a08\u7b97\u3057\u305f Signature \u304c\u540c\u3058\u3082\u306e\u3067\u3042\u308b\u3053\u3068\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u3054\u3068\u306b \u5fc5\u305a\u691c\u8a3c\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u691c\u8a3c\u306f\u4ee5\u4e0b\u306e\u624b\u9806\u3067\u884c\u3044\u307e\u3059\u3002\n\nChannel Secret\u3092\u79d8\u5bc6\u9375\u3068\u3057\u3066\u3001HMAC-SHA256\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3088\u308aRequest Body\u306e\u30c0\u30a4\u30b8\u30a7\u30b9\u30c8\u5024\u3092\u5f97\u308b\u3002\n\u30c0\u30a4\u30b8\u30a7\u30b9\u30c8\u5024\u3092BASE64\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u305f\u6587\u5b57\u5217\u304c\u3001Request Header\u306b\u4ed8\u4e0e\u3055\u308c\u305fSignature\u3068\u4e00\u81f4\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u3002\n\n\u3068\u3042\u308b\u306e\u3067crypto\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3063\u3066SIGNATURE\u3092\u751f\u6210\u3057\u3001X-Line=Signature\u30d8\u30c3\u30c0\u30fc\u306e\u5024\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u30fb\n\u30fb\n(\u4e2d\u7565)\n\u30fb\n\u30fb\n\nconst SIGNATURE = crypto.createHmac('sha256', CH_SECRET);\n\n\u30fb\n\u30fb\n(\u4e2d\u7565)\n\u30fb\n\u30fb\n\n        headers: {\n            'Content-Type': 'application/json; charset=UTF-8',\n            'X-Line-Signature': SIGNATURE,\n            'Authorization': `Bearer ${CH_ACCESS_TOKEN}`\n        }\n\n\u30fb\n\u30fb\n(\u4e2d\u7565)\n\u30fb\n\u30fb\n\n\n\u304a\u308f\u308a\u306b\nNode.js\u3067\u306f\u516c\u5f0fLINE SDK\u304c\u51fa\u3066\u7121\u3044\u3067\u3059\u304c\u3001\u4ed5\u7d44\u307f\u3092\u628a\u63e1\u3067\u304d\u308b\u3068\u3001Node.js\u3067\u3082\u3051\u3063\u3053\u3046\u3084\u308a\u305f\u3044\u3053\u3068\u304c\u3084\u308c\u308b\u6c17\u304c\u3057\u307e\u3059\u306d\u3002\n\u65e9\u304fNode.js\u3080\u3051\u306eSDK\u304c\u3067\u308b\u3068\u3044\u3044\u306a\u3041\u3002\n\n\u8ffd\u8a18: 2017/01/25\n\u30ea\u30af\u30a8\u30b9\u30c8\u30d8\u30c3\u30c0\u30fc\u306b\u4ee5\u4e0b\u306e\u884c\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\n'Content-Length': Buffer.byteLength(postDataStr)\n\n\u8ffd\u52a0\u3057\u3066\u306a\u3044\u3068\u30b5\u30fc\u30d0\u30fc\u306b\u3088\u3063\u3066\u306f(Azure WebApps\u306a\u3093\u3067\u3059\u3051\u3069)\u3046\u307e\u304f\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u3061\u3083\u3093\u3068Content-Length\u6307\u5b9a\u3057\u307e\u3057\u3087\u3046...\u6c57\n\nhttps://nodejs.org/api/http.html#http_http_request_options_callback\n\n\n[Hapi\u3067LINE Bot\u3092\u30b5\u30af\u30c3\u3068\u8a66\u3059](http://qiita.com/n0bisuke/items/507661f34da09c71115f)\u3067\u3084\u3063\u305f`\u30aa\u30a6\u30e0\u8fd4\u3057`\u3092\u4f9d\u5b58\u30e2\u30b8\u30e5\u30fc\u30eb\u7121\u3057\u3067\u3084\u3063\u3066\u307f\u307e\u3059\u3002\n\n![](https://i.gyazo.com/abaf8f06efea5d9b3840c4aa1c8b1932.png)\n\n## \u5148\u306b\u5b8c\u6210\u30b3\u30fc\u30c9\n\n* Channel Secret\n* Channel Access Token\n\n\u3092\u6307\u5b9a\u3057\u307e\u3057\u3087\u3046\u3002\n\n\u5916\u90e8\u4f9d\u5b58\u306f\u7121\u3044\u306e\u3067`npm i`\u306f\u3044\u308a\u307e\u305b\u3093\u3002\u3061\u306a\u307f\u306bNode.js\u306fv7.0.0\u3067\u3059\u3002\n\napp.js\u3001\u30b3\u30d4\u30da\u3067\u4f7f\u3048\u307e\u3059\u3002\n\n```app.js\n'use strict';\n\nconst http = require('http');\nconst https = require('https');\nconst crypto = require('crypto');\n\nconst HOST = 'api.line.me'; \nconst REPLY_PATH = '/v2/bot/message/reply';//\u30ea\u30d7\u30e9\u30a4\u7528\nconst CH_SECRET = 'xxxxxxxx'; //Channel Secret\u3092\u6307\u5b9a\nconst CH_ACCESS_TOKEN = 'xxxxxx'; //Channel Access Token\u3092\u6307\u5b9a\nconst SIGNATURE = crypto.createHmac('sha256', CH_SECRET);\nconst PORT = 3000;\n\n/**\n * http\u30ea\u30af\u30a8\u30b9\u30c8\u90e8\u5206\n */\nconst client = (replyToken, SendMessageObject) => {    \n    let postDataStr = JSON.stringify({ replyToken: replyToken, messages: SendMessageObject });\n    let options = {\n        host: HOST,\n        port: 443,\n        path: REPLY_PATH,\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json; charset=UTF-8',\n            'X-Line-Signature': SIGNATURE,\n            'Authorization': `Bearer ${CH_ACCESS_TOKEN}`,\n            'Content-Length': Buffer.byteLength(postDataStr)\n        }\n    };\n    \n    return new Promise((resolve, reject) => {\n        let req = https.request(options, (res) => {\n                    let body = '';\n                    res.setEncoding('utf8');\n                    res.on('data', (chunk) => {\n                        body += chunk;\n                    });\n                    res.on('end', () => {\n                        resolve(body);\n                    });\n        });\n        \n        req.on('error', (e) => {\n            reject(e);\n        });\n        req.write(postDataStr);\n        req.end();\n    });\n};\n\nhttp.createServer((req, res) => {    \n    if(req.url !== '/' || req.method !== 'POST'){\n        res.writeHead(200, {'Content-Type': 'text/plain'});\n        res.end('');\n    }\n\n    let body = '';\n    req.on('data', (chunk) => {\n        body += chunk;\n    });        \n    req.on('end', () => {\n    \tif(body === ''){\n          console.log('body\u304c\u7a7a\u3067\u3059\u3002');\n          return;\n        }\n        \n        let WebhookEventObject = JSON.parse(body).events[0];        \n        //\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u9001\u3089\u308c\u3066\u6765\u305f\u5834\u5408\n        if(WebhookEventObject.type === 'message'){\n            let SendMessageObject;\n            if(WebhookEventObject.message.type === 'text'){\n                SendMessageObject = [{\n                    type: 'text',\n                    text: WebhookEventObject.message.text\n                }];\n            }\n            client(WebhookEventObject.replyToken, SendMessageObject)\n            .then((body)=>{\n                console.log(body);\n            },(e)=>{console.log(e)});\n        }\n\n        res.writeHead(200, {'Content-Type': 'text/plain'});\n        res.end('su');\n    });\n\n}).listen(PORT);\n\nconsole.log(`Server running at ${PORT}`);\n```\n\n## \u89e3\u8aac\u3063\u307d\u3044\u3082\u306e\n\n\u304a\u3046\u3080\u8fd4\u3057\u307e\u3067\u306e\u6d41\u308c\u306f\u3053\u3093\u306a\u611f\u3058\u306e\u30a4\u30e1\u30fc\u30b8\u3067\u3059\u3002\n\n![](https://i.gyazo.com/1000444fe3ee1c7a88355a24293c523b.png)\n\n1. `BOT\u306eWebhookURL\u3092LINE Messaging API\u5074\u306b\u767b\u9332`\n2. \u30e6\u30fc\u30b6\u30fc\u304c\u767a\u8a00`\n3. `LINE Messaging API\u304b\u3089Webhook Event Object\u304cBOT\u306b\u9001\u4fe1\u3055\u308c\u308b`\n4. `BOT\u5074\u304b\u3089Reply Message API\u3092\u53e9\u304d\u307e\u3059\u3002\u3053\u306e\u6642\u306b\u8a8d\u8a3c\u60c5\u5831\u304c\u5fc5\u8981\u3067\u3059\u3002`\n5. BOT\u304c\u8fd4\u4fe1\n\n### Webhook Event Object\n\nhttps://devdocs.line.me/ja/#webhook-event-object\n\nLINE\u306e\u30b5\u30fc\u30d0\u30fc\u5074\u304b\u3089\u9001\u3089\u308c\u3066\u304f\u308bBOT\u306b\u5bfe\u3059\u308b\u30a4\u30d9\u30f3\u30c8(\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u4fe1\u3001\u53cb\u9054\u8ffd\u52a0\u306a\u3069)\u306e\u60c5\u5831\u3067\u3059\u3002\n\n### Reply Messsage API\n\nhttps://devdocs.line.me/ja/#reply-message\n\n\u6307\u5b9a\u3057\u305f\u5b9b\u5148\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8fd4\u4fe1\u3059\u308bAPI\u3067\u3059\u3002\n\n`Webhook Event Object`\u3067\u9001\u3089\u308c\u3066\u304f\u308b\u60c5\u5831\u306e\u4e2d\u304b\u3089`replyToken`\u3092\u53d6\u5f97\u3057\u3066\u8fd4\u4fe1\u5b9b\u5148\u3068\u3057\u307e\u3059\u3002\n\u3053\u306e\u6642\u4ee5\u4e0b\u306e\u8a8d\u8a3c\u304c\u767a\u751f\u3057\u307e\u3059\u3002\n\n#### \u8a8d\u8a3c\u90e8\u5206\u306b\u3064\u3044\u3066\n\nhttps://devdocs.line.me/ja/#webhook \n\n```\nSignature Valdation\n\n\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u9001\u4fe1\u5143\u304cLINE\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u7f72\u540d\u691c\u8a3c\u3092\u884c\u308f\u306a\u304f\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u3002\n\u5404\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u306f X-Line-Signature \u30d8\u30c3\u30c0\u304c\u4ed8\u4e0e\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nX-Line-Signature \u30d8\u30c3\u30c0\u306e\u5024\u3068\u3001Request Body \u3068 Channel Secret \u304b\u3089\u8a08\u7b97\u3057\u305f Signature \u304c\u540c\u3058\u3082\u306e\u3067\u3042\u308b\u3053\u3068\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u3054\u3068\u306b \u5fc5\u305a\u691c\u8a3c\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u691c\u8a3c\u306f\u4ee5\u4e0b\u306e\u624b\u9806\u3067\u884c\u3044\u307e\u3059\u3002\n\nChannel Secret\u3092\u79d8\u5bc6\u9375\u3068\u3057\u3066\u3001HMAC-SHA256\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3088\u308aRequest Body\u306e\u30c0\u30a4\u30b8\u30a7\u30b9\u30c8\u5024\u3092\u5f97\u308b\u3002\n\u30c0\u30a4\u30b8\u30a7\u30b9\u30c8\u5024\u3092BASE64\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u305f\u6587\u5b57\u5217\u304c\u3001Request Header\u306b\u4ed8\u4e0e\u3055\u308c\u305fSignature\u3068\u4e00\u81f4\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u3002\n```\n\n\u3068\u3042\u308b\u306e\u3067crypto\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3063\u3066SIGNATURE\u3092\u751f\u6210\u3057\u3001X-Line=Signature\u30d8\u30c3\u30c0\u30fc\u306e\u5024\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n```\n\u30fb\n\u30fb\n(\u4e2d\u7565)\n\u30fb\n\u30fb\n\nconst SIGNATURE = crypto.createHmac('sha256', CH_SECRET);\n\n\u30fb\n\u30fb\n(\u4e2d\u7565)\n\u30fb\n\u30fb\n\n        headers: {\n            'Content-Type': 'application/json; charset=UTF-8',\n            'X-Line-Signature': SIGNATURE,\n            'Authorization': `Bearer ${CH_ACCESS_TOKEN}`\n        }\n        \n\u30fb\n\u30fb\n(\u4e2d\u7565)\n\u30fb\n\u30fb\n```\n\n## \u304a\u308f\u308a\u306b\n\nNode.js\u3067\u306f\u516c\u5f0fLINE SDK\u304c\u51fa\u3066\u7121\u3044\u3067\u3059\u304c\u3001\u4ed5\u7d44\u307f\u3092\u628a\u63e1\u3067\u304d\u308b\u3068\u3001Node.js\u3067\u3082\u3051\u3063\u3053\u3046\u3084\u308a\u305f\u3044\u3053\u3068\u304c\u3084\u308c\u308b\u6c17\u304c\u3057\u307e\u3059\u306d\u3002\n\n\u65e9\u304fNode.js\u3080\u3051\u306eSDK\u304c\u3067\u308b\u3068\u3044\u3044\u306a\u3041\u3002\n\n## \u8ffd\u8a18: 2017/01/25\n\n\u30ea\u30af\u30a8\u30b9\u30c8\u30d8\u30c3\u30c0\u30fc\u306b\u4ee5\u4e0b\u306e\u884c\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\n\n```\n'Content-Length': Buffer.byteLength(postDataStr)\n```\n\n\u8ffd\u52a0\u3057\u3066\u306a\u3044\u3068\u30b5\u30fc\u30d0\u30fc\u306b\u3088\u3063\u3066\u306f(Azure WebApps\u306a\u3093\u3067\u3059\u3051\u3069)\u3046\u307e\u304f\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u3061\u3083\u3093\u3068`Content-Length`\u6307\u5b9a\u3057\u307e\u3057\u3087\u3046...\u6c57\n\n> https://nodejs.org/api/http.html#http_http_request_options_callback\n"}