{"context": "keras \u3067\u306f\u3001\u91cd\u307f\u884c\u5217\u306e\u300c\u91cd\u307f\u300d\u521d\u671f\u5024 \u3092 \u81ea\u4f5c\u95a2\u6570 \u3067 \u521d\u671f\u5316\u3059\u308b\u3053\u3068 \u304c \u3067\u304d\u308b\u3002\n\nhttps://keras.io/ja/initializations/\n\n\n\u521d\u671f\u5316\u306f\uff0c\u6587\u5b57\u5217\uff08\u4e0a\u8a18\u306e\u5229\u7528\u53ef\u80fd\u306a\u521d\u671f\u5316\u65b9\u6cd5\u306e\u3044\u305a\u308c\u304b\u3068\u30de\u30c3\u30c1\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\uff09\u304bcallable\u3068\u3057\u3066\u6e21\u3055\u308c\u308b\uff0e\ncallable\u306a\u3089\uff0cshape (\u521d\u671f\u5316\u3059\u308bvariable\u306eshape) \u3068 name (variable\u540d) \u306e2\u3064\u306e\u5f15\u6570\u3092\u53d6\u308a\uff0cvariable (\u3064\u307e\u308aK.variable() \u306e\u51fa\u529b) \u3092\u8fd4\u3055\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044:\n\nkeras\nfrom keras import backend as K\nimport numpy as np\n\ndef my_init(shape, name=None):\n   value = np.random.random(shape)\n   return K.variable(value, name=name)\n\nmodel.add(Dense(64, init=my_init))\n\n\n\u6b21\u306e\u3088\u3046\u306bkeras.initializations\u306e\u95a2\u6570\u3092\u4f7f\u3046\u3053\u3068\u3082\u3067\u304d\u308b:\n\nkeras\nfrom keras import initializations\n\ndef my_init(shape, name=None):\n   return initializations.normal(shape, scale=0.01, name=name)\n\nmodel.add(Dense(64, init=my_init))\n\n\n\n\n\uff08 \u30e2\u30c7\u30eb\u5b66\u7fd2 \u306e \u7d50\u679c \u306b \u518d\u73fe\u6027 \u3092 \u3082\u305f\u305b\u308b\u5fc5\u8981 \u304c \u3042\u308b\u5834\u5408 \uff09\n\n\u4f8b\u3048\u3070\u3001\u30b3\u30f3\u30c6\u30b9\u30c8 \u3067\u306f\u3001\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u7cbe\u5ea6 \u306e \u691c\u8a3c \u3092\u884c\u3046\u305f\u3081 \u306b\u3001\u518d\u73fe\u6027 \u304c \u6c42\u3081\u3089\u308c\u3066\u3044\u308b\u3002\n\nDeepAnalytics \u4eba\u5de5\u77e5\u80fd\u6280\u8853\u6226\u7565\u4f1a\u8b70\u7b49\u4e3b\u50ac \u7b2c1\u56deAI\u30c1\u30e3\u30ec\u30f3\u30b8\u30b3\u30f3\u30c6\u30b9\u30c8\n\n\n\uff13\uff0e\u9806\u4f4d\u78ba\u5b9a\u306e\u969b\u306b\u4e0b\u8a18\u306e\u60c5\u5831\u3092\u63d0\u51fa\u3057\u3066\u3044\u305f\u3060\u304d\u307e\u3059\u3002\n\u3000\u3000(\u30a2)    \u4e88\u6e2c\u30e2\u30c7\u30eb\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u53ca\u3073\u518d\u73fe\u306e\u70ba\u306e\u624b\u9806\u66f8\n\u3000\u3000(\u30a4)    \u5404\u8aac\u660e\u5909\u6570\u306e\u4e88\u6e2c\u30e2\u30c7\u30eb\u3078\u306e\u5bc4\u4e0e\u5ea6\n\u3000\u3000\u3000\u3000\uff08\u5bc4\u4e0e\u5ea6\u306e\u7b97\u51fa\u304c\u53ef\u80fd\u306a\u624b\u6cd5\u3092\u7528\u3044\u305f\u5834\u5408\uff09\n\u3000\u3000(\u30a6)    \u5b9f\u884c\u74b0\u5883\uff08OS\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3001\u4f7f\u7528\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u53ca\u3073\u89e3\u6790\u624b\u6cd5\uff09\n\u3000\u3000(\u30a8)    \u4e71\u6570\u3092\u5229\u7528\u3057\u305f\u30e2\u30c7\u30ea\u30f3\u30b0\u306e\u5834\u5408\u306e\u4e71\u6570\u30b7\u30fc\u30c9\n\u3000\u3000\u3000\u3000\uff08\u518d\u73fe\u6027\u78ba\u4fdd\u306e\u305f\u3081\u3001\u56fa\u5b9a\u30b7\u30fc\u30c9\u3067\u306e\u30e2\u30c7\u30eb\u63a8\u5b9a\u306b\u3054\u5354\u529b\u4e0b\u3055\u3044\uff09\n\ncallable\u95a2\u6570 \u306e\u4e2d \u3067\u3001\u4e71\u6570\u306e\u7a2e( seed \uff09\u3068\u3057\u3066 \u6bce\u56de \u540c\u3058\u5024 \u3092 \u6e21\u305b \u3070 \u3088\u3044\u3002\n\nPython \u3067\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9 \u300cNumpy \u3067\u4e71\u6570\u3092\u751f\u6210\u3059\u308b\u300d\n\n\n\u4e71\u6570\u306e\u30b7\u30fc\u30c9\u3092\u8a2d\u5b9a\u3059\u308b\nnumpy.random.seed(seed=\u30b7\u30fc\u30c9\u306b\u7528\u3044\u308b\u5024) \u3092\u30b7\u30fc\u30c9 (\u7a2e) \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u767a\u751f\u3059\u308b\u4e71\u6570\u3092\u3042\u3089\u304b\u3058\u3081\u56fa\u5b9a\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\n\u4e71\u6570\u3092\u7528\u3044\u308b\u5206\u6790\u3084\u51e6\u7406\u3067\u3001\u518d\u73fe\u6027\u304c\u5fc5\u8981\u306a\u5834\u5408\u306a\u3069\u306b\u7528\u3044\u3089\u308c\u307e\u3059\u3002\n\n> # \u30b7\u30fc\u30c9\u3092 32 \u306b\u8a2d\u5b9a\u3057\u3066\u4e71\u6570\u3092\u51fa\u529b\n> np.random.seed(seed=32)\n> np.random.rand()\n0.8588892672930397\n> \n> # \u30b7\u30fc\u30c9\u3092 32 \u306b\u8a2d\u5b9a\u3057\u3066\u4e71\u6570\u3092\u51fa\u529b (\u540c\u3058\u4e71\u6570\u304c\u51fa\u529b\u3055\u308c\u307e\u3059)\n> np.random.seed(seed=32)\n> np.random.rand()\n0.8588892672930397\n\n\n\n\nyuyakato\u3055\u3093 Qiita\u8a18\u4e8b \u300cTensorFlow\u3067\u4e71\u6570\u30b7\u30fc\u30c9\u3092\u56fa\u5b9a\u3059\u308b\u300d\n\n\u4f46\u3057\u3001\u4e0a\u306e\u8a18\u4e8b\u3067\u306f\u3001GPU\u3092\u5229\u7528\u3059\u308b\u5834\u5408 \u306f\u3001\u540c\u3058\u4e71\u6570\u306e\u7a2e \u3092 \u6e21\u3057\u3066\u3082\u3001\u51fa\u529b\u5024\u306e\u518d\u73fe\u6027 \u304c \u62c5\u4fdd\u3055\u308c\u306a\u3044\u53ef\u80fd\u6027 \u304c\u3042\u308b\u3053\u3068 \u304c\u3001\uff08\u672a\u78ba\u8a8d\u3068\u3057\u306a\u304c\u3089\u3082\uff09\u793a\u5506\u3055\u308c\u3066\u3044\u308b\u3002\n\n\u305d\u306e\u4ed6\n\u672a\u78ba\u8a8d\u60c5\u5831\u3067\u3059\u304c\u3001GPU\u4e0a\u3067\u52d5\u304b\u3059\u5834\u5408\u306f\u4e71\u6570\u30b7\u30fc\u30c9\u3092\u8a2d\u5b9a\u3057\u3066\u3082\u540c\u3058\u5024\u306b\u306f\u306a\u3089\u306a\u3044\u3089\u3057\u3044\u3067\u3059\u3002\n\u53c2\u8003: Mention that GPU reductions are nondeterministic in docs \u00b7 Issue #2732 \u00b7 tensorflow/tensorflow\n\n\nstackoverflow How to get reproducible results in keras\n\n\nI get different results (test accuracy) every time I run the imdb_lstm.py example from Keras framework (https://github.com/fchollet/keras/blob/master/examples/imdb_lstm.py) \nThe code contains np.random.seed(1337) in the top, before any keras imports. \nIt should prevent it from generating different numbers for every run. What am I missing?\n\n\n\u4ee5\u4e0b \u3092 \u5b9f\u884c\u3059\u308c\u3070 \u4e71\u6570\u51fa\u529b\u5024 \u3092 \u518d\u73fe\u3067\u304d\u305f\u3001\u3068\u5831\u544a\u3055\u308c\u3066\u3044\u308b\u3002\n\n\nI finally got reproducible results with my code. \nIt's a combination of answers I saw around the web. The first thing is doing what @alex says:\n\n1. Set numpy.random.seed;\n2. Use PYTHONHASHSEED=0 for Python 3.\n\nThen you have to solve the issue noted by @user2805751 regarding cuDNN by calling your Keras code with the following additional THEANO_FLAGS:\n\n3. dnn.conv.algo_bwd_filter=deterministic,dnn.conv.algo_bwd_data=deterministic\n\nAnd finally, you have to patch your Theano installation as per this comment, which basically consists in:\n\n4. replacing all calls to *_dev20 operator by its regular version in theano/sandbox/cuda/opt.py.\n\nThis should get you the same results for the same seed.\nNote that there might be a slowdown. I saw a running time increase of about 10%.\n\n\n\n\nKeras\u5229\u7528\u306e\u5834\u5408\u3001\u30d0\u30c3\u30af\u30a8\u30f3\u30c9 \u3067 Chainer \u3092\u4f7f\u3046\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u304c\u3001Chainer \u3092 \u5229\u7528\u3059\u308b\u5834\u5408 \u306e \u5bfe\u5fdc\u7b56\n\nChainer \u3092\u5229\u7528\u3059\u308b\u5834\u5408\u3001\u74b0\u5883\u5909\u6570 CHAINER_CUDNN \u3067 \u5bfe\u5fdc \u304c \u53ef\u80fd \u3068\u306e\u3053\u3068\u3002\n\nTokyoMickey\u3055\u3093 Qiita\u8a18\u4e8b \u300cChainer\u3084TensorFlow\u3067GPU\u3092\u4f7f\u3046\u3068\u6bce\u56de\u7d50\u679c\u304c\u5909\u308f\u308b\u7406\u7531\u3068\u5bfe\u7b56 (\u307e\u3068\u3081)\u300d\n\n\nChainer\u3067\u306f\u74b0\u5883\u5909\u6570(CHAINER_CUDNN)\u306e\u6307\u5b9a\u307e\u305f\u306fConvolution2D\u306a\u3069\u3078\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u8ffd\u52a0\u3067\u672c\u4e8b\u8c61\u3092\u56de\u907f\u53ef\u80fd\u3002\nTensorFlow\u306b\u3064\u3044\u3066\u306fGoogle\u793e\u66f0\u304f\u300cEigen\u30e9\u30a4\u30d6\u30e9\u30ea\u307e\u305f\u306fcuDNN\u306e\u4ed5\u69d8\u306b\u3088\u308b\u3068\u306e\u3053\u3068\u300d\u3067\u3042\u308a\u73fe\u72b6\u3067\u306f\u5bfe\u5fdc\u7b56\u7121\u3057\u3002(\u8a73\u7d30\u306f\u6b21\u306e\u8a18\u4e8b\u306b\u8a18\u8f09\u306eIssues\u3092\u53c2\u7167\u306e\u3053\u3068)\n\u5c1a\u3001Caffe\u3067\u3082\u540c\u69d8\u306e\u4e8b\u8c61\u304c\u767a\u751f\u3057\u3066\u3044\u305f\u304c\u3001\u73fe\u72b6\u3067\u306ffix\u3055\u308c\u3066\u3044\u308b\u3089\u3057\u3044\u3002(\u8a73\u7d30\u672a\u78ba\u8a8d)\n\n\u4ee5\u4e0b\u306f\u3001\u4e0a\u8a18\u5bfe\u5fdc\u524d \u306e PFN\u793e \u5f97\u5c45\u6c0f \u304b\u3089 \u306e \u56de\u7b54 \u304b\n\nChainer Japanese User Group \u203a \u91cd\u307f\u5b66\u7fd2\u306e\u7d50\u679c\u304c\u7570\u306a\u3063\u3066\u3057\u307e\u3046\n\n\nSeiya Tokui\n2016/04/27\n\u3053\u3093\u306b\u3061\u306f\u3001Chainer\u958b\u767a\u30c1\u30fc\u30e0\u306e\u5f97\u5c45\u3067\u3059\u3002\n\u518d\u73fe\u6027\u306b\u95a2\u3057\u3066\u3067\u3059\u304c\u3001\u4eca\u56de\u306e\u5834\u5408\u3001\u304a\u305d\u3089\u304f\u30a2\u30c8\u30df\u30c3\u30af\u6f14\u7b97\u304c\u539f\u56e0\u3067\u306f\u306a\u3044\u304b\u3068\u8003\u3048\u307e\u3059\u3002\nEmbedID\u306ebackward\u3067\u5b9f\u884c\u3055\u308c\u308b\u30ab\u30fc\u30cd\u30eb\u306f\u3001\u30a2\u30c8\u30df\u30c3\u30af\u6f14\u7b97\u3092\u4f7f\u3063\u3066\u30d0\u30e9\u30d0\u30e9\u306a\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5024\u306e\u7dcf\u548c\u3092\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u3002\n\u4e26\u5217\u306a\u30b9\u30ec\u30c3\u30c9\u304c\u30a2\u30c8\u30df\u30c3\u30af\u6f14\u7b97\u306b\u3088\u3063\u3066\u5909\u6570\u306b\u5024\u3092\u8db3\u3057\u8fbc\u3080\u5834\u5408\u3001\u5024\u304c\u8db3\u3057\u8fbc\u307e\u308c\u308b\u9806\u5e8f\u306b\u3088\u3063\u3066\u6570\u5024\u8aa4\u5dee\u304c\u5909\u308f\u308a\u307e\u3059\u3002\nCUDA\u30b9\u30ec\u30c3\u30c9\u306b\u304a\u3044\u3066\u4e00\u822c\u306b\u3053\u306e\u9806\u5e8f\u306f\u4e0d\u5b9a\u3067\u3059\u306e\u3067\u3001\u6570\u5024\u8aa4\u5dee\u306e\u7bc4\u56f2\u3067\u7d50\u679c\u3082\u4e0d\u5b9a\u306b\u306a\u308a\u307e\u3059\u3002\n\u3069\u308c\u304f\u3089\u3044\u305a\u308c\u308b\u304b\u306f\u3001\u5024\u306e\u30b9\u30b1\u30fc\u30eb\u306e\u504f\u308a\u3084\u8981\u7d20\u306e\u500b\u6570\u306b\u3088\u3063\u3066\u5909\u308f\u308a\u307e\u3059\u3002\n\u3053\u306e\u6570\u5024\u8aa4\u5dee\u304c\u6bce\u66f4\u65b0\u3054\u3068\u306b\u5165\u3063\u305f\u3068\u304d\u306b\u3001\u305f\u307e\u305f\u307e\u6253\u3061\u6d88\u3057\u5408\u3048\u3070\u7d50\u679c\u306f\u4e00\u7dd2\u306b\u306a\u308b\u3057\u3001\u6253\u3061\u6d88\u3057\u3042\u308f\u305a\u306b\u6e9c\u3081\u8fbc\u307e\u308c\u308b\u3068\u5b66\u7fd2\u7d50\u679c\u304c\u5909\u5316\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u4ee5\u4e0a\u306f\u304a\u6559\u3048\u3044\u305f\u3060\u3044\u305f\u72b6\u6cc1\u3092\u3082\u3068\u306b\u3057\u305f\u8003\u5bdf\u3067\u3059\u3002\u3057\u3063\u304b\u308a\u691c\u8a3c\u3057\u305f\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u4ed6\u306e\u8981\u56e0\u304c\u7d61\u3093\u3067\u3044\u308b\u53ef\u80fd\u6027\u3082\u6b8b\u3055\u308c\u3066\u306f\u3044\u307e\u3059\u3002\n\u56de\u907f\u65b9\u6cd5\u306b\u3064\u304d\u307e\u3057\u3066\u306f\u3001\u304a\u305d\u3089\u304f\u30a2\u30c8\u30df\u30c3\u30af\u6f14\u7b97\u3092\u7528\u3044\u305a\u306bEmbedID\u3092\u5b9f\u88c5\u3059\u308c\u3070\u826f\u3044\u306e\u3060\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u7533\u3057\u8a33\u3042\u308a\u307e\u305b\u3093\u304c\u30d1\u30c3\u3068\u7c21\u5358\u306a\u65b9\u6cd5\u306f\u601d\u3044\u3064\u304b\u306a\u3044\u3067\u3059\u3002\n2016\u5e744\u670814\u65e5\u6728\u66dc\u65e5 17\u664219\u520648\u79d2 UTC+9 hidem:\n\n\n\n\uff08 \u53c2\u8003 \uff09\n\n\n\u4e71\u6570\u306e\u7a2e \u3068 \u4e71\u6570\u51fa\u529b\u5024 \u306e \u518d\u73fe\u6027 \u306b \u3064\u3044\u3066\n\n\u4ee5\u4e0b \u306f\u3001Matlab \u306e \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 \u3060\u304c\u3001\u53c2\u8003 \u306b \u306a\u308b\u3002\n* Mathworks \u30c9\u30ad\u30e5\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3 \u300c\u518d\u73fe\u53ef\u80fd\u306a\u4e71\u6570\u306e\u751f\u6210\u300d\n\n\u30b7\u30fc\u30c9\u306e\u6307\u5b9a\n\u3053\u306e\u4f8b\u3067\u306f\u3001\u306f\u3058\u3081\u306b\u30b7\u30fc\u30c9\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u4e71\u6570\u306e\u914d\u5217\u3092\u7e70\u308a\u8fd4\u3057\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u3092\u793a\u3057\u307e\u3059\u3002\u6bce\u56de\u540c\u3058\u30b7\u30fc\u30c9\u3092\u4f7f\u7528\u3057\u3066\u4e71\u6570\u767a\u751f\u5668\u3092\u521d\u671f\u5316\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u5e38\u306b\u540c\u3058\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n\u307e\u305a\u3001\u4e71\u6570\u767a\u751f\u5668\u3092\u521d\u671f\u5316\u3057\u3066\u3053\u306e\u4f8b\u306e\u7d50\u679c\u3092\u518d\u73fe\u53ef\u80fd\u306b\u3057\u307e\u3059\u3002\n\nkeras \u3067\u306f\u3001\u91cd\u307f\u884c\u5217\u306e\u300c\u91cd\u307f\u300d\u521d\u671f\u5024 \u3092 \u81ea\u4f5c\u95a2\u6570 \u3067 \u521d\u671f\u5316\u3059\u308b\u3053\u3068 \u304c \u3067\u304d\u308b\u3002\n\n* https://keras.io/ja/initializations/\n\n>\u521d\u671f\u5316\u306f\uff0c\u6587\u5b57\u5217\uff08\u4e0a\u8a18\u306e\u5229\u7528\u53ef\u80fd\u306a\u521d\u671f\u5316\u65b9\u6cd5\u306e\u3044\u305a\u308c\u304b\u3068\u30de\u30c3\u30c1\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\uff09\u304bcallable\u3068\u3057\u3066\u6e21\u3055\u308c\u308b\uff0e\n>callable\u306a\u3089\uff0cshape (\u521d\u671f\u5316\u3059\u308bvariable\u306eshape) \u3068 name (variable\u540d) \u306e2\u3064\u306e\u5f15\u6570\u3092\u53d6\u308a\uff0cvariable (\u3064\u307e\u308aK.variable() \u306e\u51fa\u529b) \u3092\u8fd4\u3055\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044:\n>\n>```{python:keras}\n>from keras import backend as K\n>import numpy as np\n>\n>def my_init(shape, name=None):\n>    value = np.random.random(shape)\n>    return K.variable(value, name=name)\n>\n>model.add(Dense(64, init=my_init))\n>```\n>\n>\u6b21\u306e\u3088\u3046\u306bkeras.initializations\u306e\u95a2\u6570\u3092\u4f7f\u3046\u3053\u3068\u3082\u3067\u304d\u308b:\n>\n>\n>```{python:keras}\n>from keras import initializations\n>\n>def my_init(shape, name=None):\n>    return initializations.normal(shape, scale=0.01, name=name)\n>\n>model.add(Dense(64, init=my_init))\n>```\n\n####__\uff08 \u30e2\u30c7\u30eb\u5b66\u7fd2 \u306e \u7d50\u679c \u306b \u518d\u73fe\u6027 \u3092 \u3082\u305f\u305b\u308b\u5fc5\u8981 \u304c \u3042\u308b\u5834\u5408 \uff09__\n\n\u4f8b\u3048\u3070\u3001\u30b3\u30f3\u30c6\u30b9\u30c8 \u3067\u306f\u3001\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u7cbe\u5ea6 \u306e \u691c\u8a3c \u3092\u884c\u3046\u305f\u3081 \u306b\u3001\u518d\u73fe\u6027 \u304c \u6c42\u3081\u3089\u308c\u3066\u3044\u308b\u3002\n\n* [DeepAnalytics \u4eba\u5de5\u77e5\u80fd\u6280\u8853\u6226\u7565\u4f1a\u8b70\u7b49\u4e3b\u50ac \u7b2c1\u56deAI\u30c1\u30e3\u30ec\u30f3\u30b8\u30b3\u30f3\u30c6\u30b9\u30c8](https://deepanalytics.jp/compe/31/)\n\n>\uff13\uff0e\u9806\u4f4d\u78ba\u5b9a\u306e\u969b\u306b\u4e0b\u8a18\u306e\u60c5\u5831\u3092\u63d0\u51fa\u3057\u3066\u3044\u305f\u3060\u304d\u307e\u3059\u3002\n>\u3000\u3000(\u30a2)\t\u4e88\u6e2c\u30e2\u30c7\u30eb\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u53ca\u3073\u518d\u73fe\u306e\u70ba\u306e\u624b\u9806\u66f8\n>\u3000\u3000(\u30a4)\t\u5404\u8aac\u660e\u5909\u6570\u306e\u4e88\u6e2c\u30e2\u30c7\u30eb\u3078\u306e\u5bc4\u4e0e\u5ea6\n>\u3000\u3000\u3000\u3000\uff08\u5bc4\u4e0e\u5ea6\u306e\u7b97\u51fa\u304c\u53ef\u80fd\u306a\u624b\u6cd5\u3092\u7528\u3044\u305f\u5834\u5408\uff09\n>\u3000\u3000(\u30a6)\t\u5b9f\u884c\u74b0\u5883\uff08OS\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3001\u4f7f\u7528\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u53ca\u3073\u89e3\u6790\u624b\u6cd5\uff09\n>\u3000\u3000(\u30a8)\t\u4e71\u6570\u3092\u5229\u7528\u3057\u305f\u30e2\u30c7\u30ea\u30f3\u30b0\u306e\u5834\u5408\u306e\u4e71\u6570\u30b7\u30fc\u30c9\n>\u3000\u3000\u3000\u3000\uff08\u518d\u73fe\u6027\u78ba\u4fdd\u306e\u305f\u3081\u3001\u56fa\u5b9a\u30b7\u30fc\u30c9\u3067\u306e\u30e2\u30c7\u30eb\u63a8\u5b9a\u306b\u3054\u5354\u529b\u4e0b\u3055\u3044\uff09\n\n__callable\u95a2\u6570 \u306e\u4e2d \u3067\u3001\u4e71\u6570\u306e\u7a2e( *seed* \uff09\u3068\u3057\u3066 \u6bce\u56de \u540c\u3058\u5024 \u3092 \u6e21\u305b \u3070 \u3088\u3044\u3002__\n\n* [Python \u3067\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9 \u300cNumpy \u3067\u4e71\u6570\u3092\u751f\u6210\u3059\u308b\u300d](http://pythondatascience.plavox.info/numpy/\u4e71\u6570\u3092\u751f\u6210/)\n\n> __\u4e71\u6570\u306e\u30b7\u30fc\u30c9\u3092\u8a2d\u5b9a\u3059\u308b__\n>\n> numpy.random.seed(seed=\u30b7\u30fc\u30c9\u306b\u7528\u3044\u308b\u5024) \u3092\u30b7\u30fc\u30c9 (\u7a2e) \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u767a\u751f\u3059\u308b\u4e71\u6570\u3092\u3042\u3089\u304b\u3058\u3081\u56fa\u5b9a\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\n>\n> \u4e71\u6570\u3092\u7528\u3044\u308b\u5206\u6790\u3084\u51e6\u7406\u3067\u3001\u518d\u73fe\u6027\u304c\u5fc5\u8981\u306a\u5834\u5408\u306a\u3069\u306b\u7528\u3044\u3089\u308c\u307e\u3059\u3002\n>\n>>```{python:}\n>>> # \u30b7\u30fc\u30c9\u3092 32 \u306b\u8a2d\u5b9a\u3057\u3066\u4e71\u6570\u3092\u51fa\u529b\n>>> np.random.seed(seed=32)\n>>> np.random.rand()\n0.8588892672930397\n>>> \n>>> # \u30b7\u30fc\u30c9\u3092 32 \u306b\u8a2d\u5b9a\u3057\u3066\u4e71\u6570\u3092\u51fa\u529b (\u540c\u3058\u4e71\u6570\u304c\u51fa\u529b\u3055\u308c\u307e\u3059)\n>>> np.random.seed(seed=32)\n>>> np.random.rand()\n0.8588892672930397\n>>```\n\n* [yuyakato\u3055\u3093 Qiita\u8a18\u4e8b \u300cTensorFlow\u3067\u4e71\u6570\u30b7\u30fc\u30c9\u3092\u56fa\u5b9a\u3059\u308b\u300d](http://qiita.com/yuyakato/items/9a5d80e6c7c41e9a9d22)\n\n__\u4f46\u3057\u3001\u4e0a\u306e\u8a18\u4e8b\u3067\u306f\u3001GPU\u3092\u5229\u7528\u3059\u308b\u5834\u5408 \u306f\u3001\u540c\u3058\u4e71\u6570\u306e\u7a2e \u3092 \u6e21\u3057\u3066\u3082\u3001\u51fa\u529b\u5024\u306e\u518d\u73fe\u6027 \u304c \u62c5\u4fdd\u3055\u308c\u306a\u3044\u53ef\u80fd\u6027 \u304c\u3042\u308b\u3053\u3068 \u304c\u3001\uff08\u672a\u78ba\u8a8d\u3068\u3057\u306a\u304c\u3089\u3082\uff09\u793a\u5506\u3055\u308c\u3066\u3044\u308b\u3002__\n\n> __\u305d\u306e\u4ed6__\n>\n> \u672a\u78ba\u8a8d\u60c5\u5831\u3067\u3059\u304c\u3001GPU\u4e0a\u3067\u52d5\u304b\u3059\u5834\u5408\u306f\u4e71\u6570\u30b7\u30fc\u30c9\u3092\u8a2d\u5b9a\u3057\u3066\u3082\u540c\u3058\u5024\u306b\u306f\u306a\u3089\u306a\u3044\u3089\u3057\u3044\u3067\u3059\u3002\n>\n> \u53c2\u8003: Mention that GPU reductions are nondeterministic in docs \u00b7 Issue #2732 \u00b7 tensorflow/tensorflow\n\n* [stackoverflow _How to get reproducible results in keras_](http://stackoverflow.com/questions/32419510/how-to-get-reproducible-results-in-keras)\n\n> I get different results (test accuracy) every time I run the imdb_lstm.py example from Keras framework (https://github.com/fchollet/keras/blob/master/examples/imdb_lstm.py) \n>\n> The code contains np.random.seed(1337) in the top, before any keras imports. \n> It should prevent it from generating different numbers for every run. What am I missing?\n\n###__\u4ee5\u4e0b \u3092 \u5b9f\u884c\u3059\u308c\u3070 \u4e71\u6570\u51fa\u529b\u5024 \u3092 \u518d\u73fe\u3067\u304d\u305f\u3001\u3068\u5831\u544a\u3055\u308c\u3066\u3044\u308b\u3002__\n\n> I finally got reproducible results with my code. \n> It's a combination of answers I saw around the web. The first thing is doing what @alex says:\n>\n> * 1. Set numpy.random.seed;\n> * 2. Use PYTHONHASHSEED=0 for Python 3.\n>\n> Then you have to solve the issue noted by @user2805751 regarding cuDNN by calling your Keras code with the following additional THEANO_FLAGS:\n>\n> * 3. dnn.conv.algo_bwd_filter=deterministic,dnn.conv.algo_bwd_data=deterministic\n>\n> And finally, you have to patch your Theano installation as per this comment, which basically consists in:\n>\n> * 4. replacing all calls to *_dev20 operator by its regular version in theano/sandbox/cuda/opt.py.\n>\n> This should get you the same results for the same seed.\n>\n> Note that there might be a slowdown. I saw a running time increase of about 10%.\n\n<img width=\"1274\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-03-03 6.42.37.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/eb32179c-1fa6-7067-bea2-f267c7875085.png\">\n\n<img width=\"1275\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-03-03 6.42.56.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/85aaea4c-72a1-d62f-7f04-36cd641a6971.png\">\n\n\n###__Keras\u5229\u7528\u306e\u5834\u5408\u3001\u30d0\u30c3\u30af\u30a8\u30f3\u30c9 \u3067 Chainer \u3092\u4f7f\u3046\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u304c\u3001Chainer \u3092 \u5229\u7528\u3059\u308b\u5834\u5408 \u306e \u5bfe\u5fdc\u7b56__\n\n__Chainer \u3092\u5229\u7528\u3059\u308b\u5834\u5408\u3001\u74b0\u5883\u5909\u6570 *CHAINER_CUDNN* \u3067 \u5bfe\u5fdc \u304c \u53ef\u80fd \u3068\u306e\u3053\u3068\u3002__\n\n* [TokyoMickey\u3055\u3093 Qiita\u8a18\u4e8b \u300cChainer\u3084TensorFlow\u3067GPU\u3092\u4f7f\u3046\u3068\u6bce\u56de\u7d50\u679c\u304c\u5909\u308f\u308b\u7406\u7531\u3068\u5bfe\u7b56 (\u307e\u3068\u3081)\u300d](http://qiita.com/TokyoMickey/items/63c4053740ab1f3f28a2)\n\n> Chainer\u3067\u306f\u74b0\u5883\u5909\u6570(CHAINER_CUDNN)\u306e\u6307\u5b9a\u307e\u305f\u306fConvolution2D\u306a\u3069\u3078\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u8ffd\u52a0\u3067\u672c\u4e8b\u8c61\u3092\u56de\u907f\u53ef\u80fd\u3002\n> TensorFlow\u306b\u3064\u3044\u3066\u306fGoogle\u793e\u66f0\u304f\u300cEigen\u30e9\u30a4\u30d6\u30e9\u30ea\u307e\u305f\u306fcuDNN\u306e\u4ed5\u69d8\u306b\u3088\u308b\u3068\u306e\u3053\u3068\u300d\u3067\u3042\u308a\u73fe\u72b6\u3067\u306f\u5bfe\u5fdc\u7b56\u7121\u3057\u3002(\u8a73\u7d30\u306f\u6b21\u306e\u8a18\u4e8b\u306b\u8a18\u8f09\u306eIssues\u3092\u53c2\u7167\u306e\u3053\u3068)\n> \u5c1a\u3001Caffe\u3067\u3082\u540c\u69d8\u306e\u4e8b\u8c61\u304c\u767a\u751f\u3057\u3066\u3044\u305f\u304c\u3001\u73fe\u72b6\u3067\u306ffix\u3055\u308c\u3066\u3044\u308b\u3089\u3057\u3044\u3002(\u8a73\u7d30\u672a\u78ba\u8a8d)\n\n\u4ee5\u4e0b\u306f\u3001\u4e0a\u8a18\u5bfe\u5fdc\u524d \u306e PFN\u793e \u5f97\u5c45\u6c0f \u304b\u3089 \u306e \u56de\u7b54 \u304b\n\n* [Chainer Japanese User Group \u203a \u91cd\u307f\u5b66\u7fd2\u306e\u7d50\u679c\u304c\u7570\u306a\u3063\u3066\u3057\u307e\u3046](https://groups.google.com/forum/#!topic/chainer-jp/JN9H9aF4TA8)\n\n> Seiya Tokui \t\n> 2016/04/27\n>\n>\u3053\u3093\u306b\u3061\u306f\u3001Chainer\u958b\u767a\u30c1\u30fc\u30e0\u306e\u5f97\u5c45\u3067\u3059\u3002\n>\n>\u518d\u73fe\u6027\u306b\u95a2\u3057\u3066\u3067\u3059\u304c\u3001\u4eca\u56de\u306e\u5834\u5408\u3001\u304a\u305d\u3089\u304f\u30a2\u30c8\u30df\u30c3\u30af\u6f14\u7b97\u304c\u539f\u56e0\u3067\u306f\u306a\u3044\u304b\u3068\u8003\u3048\u307e\u3059\u3002\n>\n>EmbedID\u306ebackward\u3067\u5b9f\u884c\u3055\u308c\u308b\u30ab\u30fc\u30cd\u30eb\u306f\u3001\u30a2\u30c8\u30df\u30c3\u30af\u6f14\u7b97\u3092\u4f7f\u3063\u3066\u30d0\u30e9\u30d0\u30e9\u306a\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5024\u306e\u7dcf\u548c\u3092\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u3002\n>\n>\u4e26\u5217\u306a\u30b9\u30ec\u30c3\u30c9\u304c\u30a2\u30c8\u30df\u30c3\u30af\u6f14\u7b97\u306b\u3088\u3063\u3066\u5909\u6570\u306b\u5024\u3092\u8db3\u3057\u8fbc\u3080\u5834\u5408\u3001\u5024\u304c\u8db3\u3057\u8fbc\u307e\u308c\u308b\u9806\u5e8f\u306b\u3088\u3063\u3066\u6570\u5024\u8aa4\u5dee\u304c\u5909\u308f\u308a\u307e\u3059\u3002\n>\n>CUDA\u30b9\u30ec\u30c3\u30c9\u306b\u304a\u3044\u3066\u4e00\u822c\u306b\u3053\u306e\u9806\u5e8f\u306f\u4e0d\u5b9a\u3067\u3059\u306e\u3067\u3001\u6570\u5024\u8aa4\u5dee\u306e\u7bc4\u56f2\u3067\u7d50\u679c\u3082\u4e0d\u5b9a\u306b\u306a\u308a\u307e\u3059\u3002\n>\u3069\u308c\u304f\u3089\u3044\u305a\u308c\u308b\u304b\u306f\u3001\u5024\u306e\u30b9\u30b1\u30fc\u30eb\u306e\u504f\u308a\u3084\u8981\u7d20\u306e\u500b\u6570\u306b\u3088\u3063\u3066\u5909\u308f\u308a\u307e\u3059\u3002\n>\n>\u3053\u306e\u6570\u5024\u8aa4\u5dee\u304c\u6bce\u66f4\u65b0\u3054\u3068\u306b\u5165\u3063\u305f\u3068\u304d\u306b\u3001\u305f\u307e\u305f\u307e\u6253\u3061\u6d88\u3057\u5408\u3048\u3070\u7d50\u679c\u306f\u4e00\u7dd2\u306b\u306a\u308b\u3057\u3001\u6253\u3061\u6d88\u3057\u3042\u308f\u305a\u306b\u6e9c\u3081\u8fbc\u307e\u308c\u308b\u3068\u5b66\u7fd2\u7d50\u679c\u304c\u5909\u5316\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n>\n>\u4ee5\u4e0a\u306f\u304a\u6559\u3048\u3044\u305f\u3060\u3044\u305f\u72b6\u6cc1\u3092\u3082\u3068\u306b\u3057\u305f\u8003\u5bdf\u3067\u3059\u3002\u3057\u3063\u304b\u308a\u691c\u8a3c\u3057\u305f\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u4ed6\u306e\u8981\u56e0\u304c\u7d61\u3093\u3067\u3044\u308b\u53ef\u80fd\u6027\u3082\u6b8b\u3055\u308c\u3066\u306f\u3044\u307e\u3059\u3002\n>\n>\u56de\u907f\u65b9\u6cd5\u306b\u3064\u304d\u307e\u3057\u3066\u306f\u3001\u304a\u305d\u3089\u304f\u30a2\u30c8\u30df\u30c3\u30af\u6f14\u7b97\u3092\u7528\u3044\u305a\u306bEmbedID\u3092\u5b9f\u88c5\u3059\u308c\u3070\u826f\u3044\u306e\u3060\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u7533\u3057\u8a33\u3042\u308a\u307e\u305b\u3093\u304c\u30d1\u30c3\u3068\u7c21\u5358\u306a\u65b9\u6cd5\u306f\u601d\u3044\u3064\u304b\u306a\u3044\u3067\u3059\u3002\n>\n>2016\u5e744\u670814\u65e5\u6728\u66dc\u65e5 17\u664219\u520648\u79d2 UTC+9 hidem:\n\n___\n\n###__\uff08 \u53c2\u8003 \uff09__\n\n* __\u4e71\u6570\u306e\u7a2e \u3068 \u4e71\u6570\u51fa\u529b\u5024 \u306e \u518d\u73fe\u6027 \u306b \u3064\u3044\u3066__\n\n\u4ee5\u4e0b \u306f\u3001Matlab \u306e \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 \u3060\u304c\u3001\u53c2\u8003 \u306b \u306a\u308b\u3002\n* [Mathworks \u30c9\u30ad\u30e5\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3 \u300c\u518d\u73fe\u53ef\u80fd\u306a\u4e71\u6570\u306e\u751f\u6210\u300d](https://jp.mathworks.com/help/matlab/math/generate-random-numbers-that-are-repeatable.html?requestedDomain=jp.mathworks.com)\n\n> __\u30b7\u30fc\u30c9\u306e\u6307\u5b9a__\n>\n>\u3053\u306e\u4f8b\u3067\u306f\u3001\u306f\u3058\u3081\u306b\u30b7\u30fc\u30c9\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u4e71\u6570\u306e\u914d\u5217\u3092\u7e70\u308a\u8fd4\u3057\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u3092\u793a\u3057\u307e\u3059\u3002\u6bce\u56de\u540c\u3058\u30b7\u30fc\u30c9\u3092\u4f7f\u7528\u3057\u3066\u4e71\u6570\u767a\u751f\u5668\u3092\u521d\u671f\u5316\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u5e38\u306b\u540c\u3058\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n>\n>\u307e\u305a\u3001\u4e71\u6570\u767a\u751f\u5668\u3092\u521d\u671f\u5316\u3057\u3066\u3053\u306e\u4f8b\u306e\u7d50\u679c\u3092\u518d\u73fe\u53ef\u80fd\u306b\u3057\u307e\u3059\u3002\n", "tags": ["DeepLearning", "\u6df1\u5c64\u5b66\u7fd2", "Keras", "Chainer", "TensorFlow"]}