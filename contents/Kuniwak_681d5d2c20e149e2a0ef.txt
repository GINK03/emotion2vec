{"context": "\u307e\u3068\u3081: \u578b\u30b7\u30b9\u30c6\u30e0\u304c\u5fae\u5999\n\n\n[Equatable] \u304c Equatable \u3058\u3083\u306a\u3044\n\n\n\nextension \u3067 Protocol \u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u3001\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u7279\u6b8a\u5316\u3067\u304d\u306a\u3044\u306e\u3067\u3053\u3046\u306a\u308b\n\n\nProtocol \u304c\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3082\u3066\u306a\u3044\n\n\n\nassociatedtype \u3092\u6301\u3066\u308b\u3051\u3069\u3001\u3053\u308c\u306f\u30e1\u30f3\u30d0\u30fc\u3084\u5909\u6570\u306e\u578b\u306b\u6307\u5b9a\u3067\u304d\u306a\u3044\u306e\u3067\u30ef\u30fc\u30af\u30a2\u30e9\u30a6\u30f3\u30c9\u304c\u5fc5\u8981\u306b\u306a\u308b\n\n\n\n\n[Equatable] \u304c Equatable \u3058\u3083\u306a\u3044\nSwift \u3067\u306f == \u3067\u6bd4\u8f03\u53ef\u80fd\u306a\u578b\u306b\u306f Equatable \u3068\u3044\u3046 Protocol \u304c\u3064\u3044\u3066\u3044\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001Int \u3084 String\u3001Bool \u306f Equatable \u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u306e\u3067\u3001== \u306b\u3088\u3063\u3066\u6bd4\u8f03\u53ef\u80fd\u3067\u3059:\n\n\u308f\u304b\u308b\nprint(10 == 10)       // true\nprint(\"str\" == \"str\") // true\nprint(true == true)   // true\n\n\n\u3053\u306e Equatable \u306f == \u306e\u5b9f\u88c5\u3092\u8981\u6c42\u3059\u308b\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306b\u7c21\u5358\u306b\u5b9f\u88c5\u3067\u304d\u307e\u3059:\n\n==\u3092\u5b9f\u88c5\u3059\u308c\u3070\u3001\u306a\u3093\u3067\u3082Equatable\nstruct MyEquatable: Equatable {\n  let value: Int\n}\n\nfunc ==(lhs: MyEquatable, rhs: MyEquatable) -> Bool {\n  return lhs.value == rhs.value\n}\n\nprint(MyEquatable(value: 10) == MyEquatable(value: 10)) // true\n\n\n\u3055\u3066\u3001Equatable \u306e\u914d\u5217\u3067\u3042\u308b [Equatable] \u3082 == \u306b\u3088\u3063\u3066\u6bd4\u8f03\u53ef\u80fd\u3067\u3059:\n\n[Equatable]\u306fEquatable\u306a\u306e\u304b\u7d20\u6674\u3089\u3057\u3044\u3058\u3083\u306a\u3044\u304b\nprint([10] == [10]) // true\n\n\n\u305d\u306e\u305f\u3081\u3001[Equatable] \u3082 Equatable \u3067\u3042\u308b\u3068\u601d\u3044\u8fbc\u307f\u304c\u3061\u3067\u3059\u304c\u3001\u5b9f\u969b\u306f\u305d\u3046\u3067\u306f\u3042\u308a\u307e\u305b\u3093:\n\n\u6700\u5f8c\u306e\u306f\u306a\u3093\u306a\u3093\u3060\n// == \u3092\u95a2\u6570\u306b\u5305\u3093\u3067\u307f\u307e\u3057\u305f\nfunc eq<E: Equatable>(_ lhs: E, _ rhs: E) -> Bool {\n    return lhs == rhs\n}\n\nprint(eq(10, 10))       // OK, Int is an Equatable\nprint(eq(\"str\", \"str\")) // OK, String is an Equatable\nprint(eq(true, true))   // OK, Bool is an Equatable\nprint(eq([10], [10]))   // NG, argument type '[Int]' does not conform to expected type 'Equatable'\n\n\n\n\u306a\u305c\u304b\n[Equatable] \u3067 == \u304c\u4f7f\u3048\u308b\u306e\u306f\u3001== \u306b\u5c02\u7528\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u304b\u3089\u3067\u3059\uff08\u8a72\u5f53\u90e8\u5206\uff09:\n\nstdlib/public/core/Arrays.swift.gyb\npublic func == <Element : Equatable>(\n  lhs: Array<Element>, rhs: Array<Element>\n) -> Bool {\n  let lhsCount = lhs.count\n  if lhsCount != rhs.count {\n    return false\n  }\n\n  // ...\n\n\n\u305d\u308c\u306a\u306e\u306b\u3001[Equatable] \u306f Equatable \u3092\u5b9f\u88c5\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3059\u3002\n\u3053\u308c\u306f Swift 3.0 \u306e\u6a5f\u80fd\u3067\u306f\u3067\u304d\u306a\u3044\u305f\u3081\u306b\u3053\u3046\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u73fe\u72b6\u306e Swift \u3067\u306f\u7279\u6b8a\u5316\u3055\u308c\u305f\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3082\u3064\u7dcf\u79f0\u578b\u306b Protocol \u3092\u5b9f\u88c5\u3055\u305b\u3089\u308c\u306a\u3044\u306e\u3067\u3059:\n\n\u672c\u5f53\u306f\u3053\u3046\u3057\u305f\u3044\uff08\u304c\u3001\u3067\u304d\u306a\u3044\uff09\nextension Array<Element>: Equatable where Element = Equatable {\n  func ==<Element: Equatable>(lhs: Array<Element>, rhs: Array<Element>) -> Boo\n    // ...\n  }\n}\n\n\n\u3053\u306e\u3088\u3046\u306a\u3001\u7279\u6b8a\u5316\u3055\u308c\u305f\u7dcf\u79f0\u578b\u306e\u307f Protocol \u3092\u5b9f\u88c5\u3057\u305f\u3068\u307f\u306a\u3059\u30d1\u30bf\u30fc\u30f3\u306f\u983b\u7e41\u306b\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u4f8b\u3048\u3070 Haskell \u3067\u3042\u308c\u3070\u3001\u6bd4\u8f03\u53ef\u80fd\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3059 Eq \u306f\u3001Eq \u306e\u914d\u5217\u3082 Eq \u3067\u3042\u308b\u3068\u3057\u3066\u3044\u307e\u3059:\n\n\u3053\u3046\u3042\u308b\u3079\u304d\n(Eq a) => Eq [a]\n\n\n\nProtocol \u304c\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3082\u3066\u306a\u3044\nSwift \u3067\u306f\u3001Protocol \u304c\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3082\u3066\u307e\u305b\u3093:\n\n\u53b3\u3057\u3044\nprotocol Foo<T> {} // error: protocols do not allow generic parameters; use associated types instead\n\n\n\u305d\u306e\u4ee3\u308f\u308a\u306b\u3001associatedtype \u3092\u4f7f\u3046\u3068\u3001\u5b9f\u8cea\u7684\u306b\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u305f\u305b\u3089\u308c\u307e\u3059:\n\n\u4ee3\u308f\u308a\u304c\u3042\u308b\u306b\u306f\u3042\u308b\nprotocol Foo {\n  associatedtype Value\n}\n\nclass MyFoo<V>: Foo {\n  typealias Value = V\n\n  init(_ value: V) {}\n}\n\n\nlet foo: MyFoo<Int> = MyFoo(10) // ok\n\n\n\u305f\u3060\u3057\u3001\u3053\u306e\u65b9\u6cd5\u3067 Protocol \u3092\u7dcf\u79f0\u578b\u306b\u3059\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306b Protocol \u3092\u5909\u6570\u306e\u578b\u306b\u5229\u7528\u3067\u304d\u306a\u304f\u306a\u308a\u307e\u3059:\n\n\uff8c\uff67\uff70\uff70wwww\nlet ng: Foo = MyFoo(10) // error: protocol 'Foo' can only be used as a generic constraint because it has Self or associated type requirements\n\n\n\u5bfe\u51e6\u6cd5\u3068\u3057\u3066\u300cAnyPokemon\u300d\u3068\u3044\u3046\u30ef\u30fc\u30af\u30a2\u30e9\u30a6\u30f3\u30c9\u304c\u3088\u304f\u77e5\u3089\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30ef\u30fc\u30af\u30a2\u30e9\u30a6\u30f3\u30c9\u306e\u8a73\u7d30\u306f\u5272\u611b\u3057\u307e\u3059\u304c\u3001\u304b\u306a\u308a\u5f37\u5f15\u306a\u624b\u6cd5\u3067\u3001\u8907\u96d1\u3067\u4f59\u8a08\u306a\u30b3\u30fc\u30c9\u3092\u591a\u304f\u5fc5\u8981\u3068\u3059\u308b\u554f\u984c\u304c\u4f9d\u7136\u3068\u3057\u3066\u6b8b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u7d42\u308f\u308a\u306b\nSwift \u304c Obj-C \u306b\u6bd4\u3079\u308c\u3070\u512a\u308c\u305f\u8a00\u8a9e\u3067\u3042\u308b\u3068\u3044\u3046\u306e\u306f\u308f\u304b\u308a\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u5c11\u306a\u304f\u3068\u3082\u73fe\u72b6\u306e Swift \u3092\u5acc\u3046\u6c17\u6301\u3061\u306f\u5909\u308f\u308a\u307e\u305b\u3093\u3002\n\u306a\u304a\u3001Swift \u306f\u307e\u3060\u9032\u5316\u3092\u7d9a\u3051\u3066\u3044\u308b\u8a00\u8a9e\u3067\u3059\u304b\u3089\u3001\u3053\u3053\u3067\u6319\u3052\u3066\u3044\u308b\u554f\u984c\u306f\u5c06\u6765\u7684\u306b\u89e3\u6c7a\u3055\u308c\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n**\u307e\u3068\u3081: \u578b\u30b7\u30b9\u30c6\u30e0\u304c\u5fae\u5999**\n\n\n- `[Equatable]` \u304c `Equatable` \u3058\u3083\u306a\u3044\n    - `extension` \u3067 Protocol \u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u3001\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u7279\u6b8a\u5316\u3067\u304d\u306a\u3044\u306e\u3067\u3053\u3046\u306a\u308b\n- Protocol \u304c\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3082\u3066\u306a\u3044\n    - `associatedtype` \u3092\u6301\u3066\u308b\u3051\u3069\u3001\u3053\u308c\u306f\u30e1\u30f3\u30d0\u30fc\u3084\u5909\u6570\u306e\u578b\u306b\u6307\u5b9a\u3067\u304d\u306a\u3044\u306e\u3067\u30ef\u30fc\u30af\u30a2\u30e9\u30a6\u30f3\u30c9\u304c\u5fc5\u8981\u306b\u306a\u308b\n\n\n# `[Equatable]` \u304c `Equatable` \u3058\u3083\u306a\u3044\n\nSwift \u3067\u306f `==` \u3067\u6bd4\u8f03\u53ef\u80fd\u306a\u578b\u306b\u306f [`Equatable`](http://swiftdoc.org/v3.0/protocol/Equatable/) \u3068\u3044\u3046 Protocol \u304c\u3064\u3044\u3066\u3044\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001`Int` \u3084 `String`\u3001`Bool` \u306f `Equatable` \u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u306e\u3067\u3001`==` \u306b\u3088\u3063\u3066\u6bd4\u8f03\u53ef\u80fd\u3067\u3059:\n\n```swift:\u308f\u304b\u308b\nprint(10 == 10)       // true\nprint(\"str\" == \"str\") // true\nprint(true == true)   // true\n```\n\n\u3053\u306e `Equatable` \u306f `==` \u306e\u5b9f\u88c5\u3092\u8981\u6c42\u3059\u308b\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306b\u7c21\u5358\u306b\u5b9f\u88c5\u3067\u304d\u307e\u3059:\n\n```swift:==\u3092\u5b9f\u88c5\u3059\u308c\u3070\u3001\u306a\u3093\u3067\u3082Equatable\nstruct MyEquatable: Equatable {\n  let value: Int\n}\n\nfunc ==(lhs: MyEquatable, rhs: MyEquatable) -> Bool {\n  return lhs.value == rhs.value\n}\n\nprint(MyEquatable(value: 10) == MyEquatable(value: 10)) // true\n```\n\n\u3055\u3066\u3001`Equatable` \u306e\u914d\u5217\u3067\u3042\u308b `[Equatable]` \u3082 `==` \u306b\u3088\u3063\u3066\u6bd4\u8f03\u53ef\u80fd\u3067\u3059:\n\n```swift:[Equatable]\u306fEquatable\u306a\u306e\u304b\u7d20\u6674\u3089\u3057\u3044\u3058\u3083\u306a\u3044\u304b\nprint([10] == [10]) // true\n```\n\n\u305d\u306e\u305f\u3081\u3001`[Equatable]` \u3082 `Equatable` \u3067\u3042\u308b\u3068\u601d\u3044\u8fbc\u307f\u304c\u3061\u3067\u3059\u304c\u3001**\u5b9f\u969b\u306f\u305d\u3046\u3067\u306f\u3042\u308a\u307e\u305b\u3093**:\n\n```swift:\u6700\u5f8c\u306e\u306f\u306a\u3093\u306a\u3093\u3060\n// == \u3092\u95a2\u6570\u306b\u5305\u3093\u3067\u307f\u307e\u3057\u305f\nfunc eq<E: Equatable>(_ lhs: E, _ rhs: E) -> Bool {\n    return lhs == rhs\n}\n\nprint(eq(10, 10))       // OK, Int is an Equatable\nprint(eq(\"str\", \"str\")) // OK, String is an Equatable\nprint(eq(true, true))   // OK, Bool is an Equatable\nprint(eq([10], [10]))   // NG, argument type '[Int]' does not conform to expected type 'Equatable'\n```\n\n\n## \u306a\u305c\u304b\n\n`[Equatable]` \u3067 `==` \u304c\u4f7f\u3048\u308b\u306e\u306f\u3001`==` \u306b\u5c02\u7528\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u304b\u3089\u3067\u3059\uff08[\u8a72\u5f53\u90e8\u5206](https://github.com/apple/swift/blob/1eb5648c4636e6ef45149a5ec0425b3496f0e15a/stdlib/public/core/Arrays.swift.gyb#L2061-L2077)\uff09:\n\n```swift:stdlib/public/core/Arrays.swift.gyb\npublic func == <Element : Equatable>(\n  lhs: Array<Element>, rhs: Array<Element>\n) -> Bool {\n  let lhsCount = lhs.count\n  if lhsCount != rhs.count {\n    return false\n  }\n\n  // ...\n```\n\n\u305d\u308c\u306a\u306e\u306b\u3001`[Equatable]` \u306f `Equatable` \u3092\u5b9f\u88c5\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3059\u3002\n\n\u3053\u308c\u306f Swift 3.0 \u306e\u6a5f\u80fd\u3067\u306f\u3067\u304d\u306a\u3044\u305f\u3081\u306b\u3053\u3046\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u73fe\u72b6\u306e Swift \u3067\u306f\u7279\u6b8a\u5316\u3055\u308c\u305f\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3082\u3064\u7dcf\u79f0\u578b\u306b Protocol \u3092\u5b9f\u88c5\u3055\u305b\u3089\u308c\u306a\u3044\u306e\u3067\u3059:\n\n```swift:\u672c\u5f53\u306f\u3053\u3046\u3057\u305f\u3044\uff08\u304c\u3001\u3067\u304d\u306a\u3044\uff09\nextension Array<Element>: Equatable where Element = Equatable {\n  func ==<Element: Equatable>(lhs: Array<Element>, rhs: Array<Element>) -> Boo\n    // ...\n  }\n}\n```\n\n\u3053\u306e\u3088\u3046\u306a\u3001\u7279\u6b8a\u5316\u3055\u308c\u305f\u7dcf\u79f0\u578b\u306e\u307f Protocol \u3092\u5b9f\u88c5\u3057\u305f\u3068\u307f\u306a\u3059\u30d1\u30bf\u30fc\u30f3\u306f\u983b\u7e41\u306b\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001[\u4f8b\u3048\u3070 Haskell \u3067\u3042\u308c\u3070](https://hackage.haskell.org/package/base-4.9.0.0/docs/Prelude.html#t:Eq)\u3001\u6bd4\u8f03\u53ef\u80fd\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3059 `Eq` \u306f\u3001`Eq` \u306e\u914d\u5217\u3082 `Eq` \u3067\u3042\u308b\u3068\u3057\u3066\u3044\u307e\u3059:\n\n```haskell:\u3053\u3046\u3042\u308b\u3079\u304d\n(Eq a) => Eq [a]\n```\n\n\n# Protocol \u304c\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3082\u3066\u306a\u3044\n\nSwift \u3067\u306f\u3001Protocol \u304c\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3082\u3066\u307e\u305b\u3093:\n\n```swift:\u53b3\u3057\u3044\nprotocol Foo<T> {} // error: protocols do not allow generic parameters; use associated types instead\n```\n\n\u305d\u306e\u4ee3\u308f\u308a\u306b\u3001`associatedtype` \u3092\u4f7f\u3046\u3068\u3001\u5b9f\u8cea\u7684\u306b\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u305f\u305b\u3089\u308c\u307e\u3059:\n\n```swift:\u4ee3\u308f\u308a\u304c\u3042\u308b\u306b\u306f\u3042\u308b\nprotocol Foo {\n  associatedtype Value\n}\n\nclass MyFoo<V>: Foo {\n  typealias Value = V\n\n  init(_ value: V) {}\n}\n\n\nlet foo: MyFoo<Int> = MyFoo(10) // ok\n```\n\n\u305f\u3060\u3057\u3001\u3053\u306e\u65b9\u6cd5\u3067 Protocol \u3092\u7dcf\u79f0\u578b\u306b\u3059\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306b Protocol \u3092\u5909\u6570\u306e\u578b\u306b\u5229\u7528\u3067\u304d\u306a\u304f\u306a\u308a\u307e\u3059:\n\n```swift:\uff8c\uff67\uff70\uff70wwww\nlet ng: Foo = MyFoo(10) // error: protocol 'Foo' can only be used as a generic constraint because it has Self or associated type requirements\n```\n\n\u5bfe\u51e6\u6cd5\u3068\u3057\u3066\u300c[`AnyPokemon`](http://qiita.com/S_Shimotori/items/458a50d8f8e54e39de59)\u300d\u3068\u3044\u3046\u30ef\u30fc\u30af\u30a2\u30e9\u30a6\u30f3\u30c9\u304c\u3088\u304f\u77e5\u3089\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30ef\u30fc\u30af\u30a2\u30e9\u30a6\u30f3\u30c9\u306e\u8a73\u7d30\u306f\u5272\u611b\u3057\u307e\u3059\u304c\u3001\u304b\u306a\u308a\u5f37\u5f15\u306a\u624b\u6cd5\u3067\u3001\u8907\u96d1\u3067\u4f59\u8a08\u306a\u30b3\u30fc\u30c9\u3092\u591a\u304f\u5fc5\u8981\u3068\u3059\u308b\u554f\u984c\u304c\u4f9d\u7136\u3068\u3057\u3066\u6b8b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\n# \u7d42\u308f\u308a\u306b\n\nSwift \u304c Obj-C \u306b\u6bd4\u3079\u308c\u3070\u512a\u308c\u305f\u8a00\u8a9e\u3067\u3042\u308b\u3068\u3044\u3046\u306e\u306f\u308f\u304b\u308a\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u5c11\u306a\u304f\u3068\u3082\u73fe\u72b6\u306e Swift \u3092\u5acc\u3046\u6c17\u6301\u3061\u306f\u5909\u308f\u308a\u307e\u305b\u3093\u3002\n\n\u306a\u304a\u3001Swift \u306f\u307e\u3060\u9032\u5316\u3092\u7d9a\u3051\u3066\u3044\u308b\u8a00\u8a9e\u3067\u3059\u304b\u3089\u3001\u3053\u3053\u3067\u6319\u3052\u3066\u3044\u308b\u554f\u984c\u306f\u5c06\u6765\u7684\u306b\u89e3\u6c7a\u3055\u308c\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n", "tags": ["Swift", "swift3"]}