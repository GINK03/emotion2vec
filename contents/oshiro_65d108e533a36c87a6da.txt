{"context": "\n\n\u306f\u3058\u3081\u306b\n\u3053\u306e\u8a18\u4e8b\u306fGo Advent Calendar 2016 \u306e14\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\u6700\u8fd1Ergodox\u3092\u8cfc\u5165\u3057\u305fGopher\u3067\u3059\u3002\n\u4eca\u5e74\u306e3\u6708\u304b\u3089Go\u3092\u4f7f\u7528\u3057\u3066\u30b5\u30fc\u30d3\u30b9\u306e\u958b\u767a\u3092\u3057\u3066\u3044\u307e\u3059\u3002\nGo\u3092\u4f7f\u7528\u3057\u305f\u306e\u306f\u521d\u3081\u3066\u3067\u3001\u8272\u3005\u3068\u8abf\u3079\u306a\u304c\u3089\u958b\u767a\u74b0\u5883\u306e\u4f5c\u308a\u65b9\u3001\u958b\u767a\u304b\u3089\u30c7\u30d7\u30ed\u30a4\u307e\u3067\u4e00\u901a\u308a\u3084\u3063\u3066\u304d\u305f\u306e\u3067\u3001\u307e\u3068\u3081\u3066\u66f8\u304d\u51fa\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u4f5c\u3063\u305f\u3082\u306e\nREST API\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u306friot.js\u3092\u4f7f\u7528\u3057\u305fSPA\u3067\u3001\u305d\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u30b5\u30fc\u30d0\u30fc\u69cb\u6210\n\u74b0\u5883\u306fAWS\u3067\u3059\u3002\u524d\u6bb5\u306bELB\u3092\u7f6e\u304d\u3001Go\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306fEC2\u4e0a\u3067\u52d5\u4f5c\u3057\u307e\u3059\u3002EC2\u306fAuto Scaling\u30b0\u30eb\u30fc\u30d7\u306b\u5c5e\u3057\u3001CodeDeploy\u306b\u3088\u308a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u30c7\u30d7\u30ed\u30a4\u3055\u308c\u307e\u3059\u3002Auto Scaling\u3068CodeDeploy\u306e\u9023\u643a\u304c\u7d76\u5999\u3067\u3001\u30b9\u30b1\u30fc\u30eb\u30a2\u30a6\u30c8\u6642\u306b\u306fCodeDeploy\u304c\u6700\u65b0\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u30c7\u30d7\u30ed\u30a4\u3057\u3066\u304f\u308c\u307e\u3059\u3002\nCI\u306b\u306fWerker\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u3086\u308b\u3044git flow\u3067\u3084\u3063\u3066\u3044\u3066\u3001develop\u3068master\u30d6\u30e9\u30f3\u30c1\u3078\u306epush\u306b\u30d5\u30c3\u30af\u3057\u3066\u305d\u308c\u305e\u308cdev\u74b0\u5883\u3001prod\u74b0\u5883\u3078\u30c7\u30d7\u30ed\u30a4\u3055\u308c\u307e\u3059\u3002\n\n\u958b\u767a\u74b0\u5883\n\n\u30a8\u30c7\u30a3\u30bf\u306fIntelliJ\nVisual Studio Code\u304c\u6700\u8fd1\u826f\u3055\u3052\u3067\u3059\u304c\u3001IntelliJ\u3092\u4f7f\u7528\u3057\u3066\u958b\u767a\u3057\u3066\u3044\u307e\u3059\u3002(PHP\u3001Scala\u306a\u3069\u5225\u306e\u8a00\u8a9e\u66f8\u304f\u3068\u304d\u3082JetBrain\u88fd\u54c1\u3092\u4f7f\u3063\u3066\u304d\u305f\u306e\u3067)\n\u88dc\u5b8c\u3084\u30b3\u30fc\u30c9\u30b8\u30e3\u30f3\u30d7\u3001\u30ea\u30d5\u30a1\u30af\u30bf\u6a5f\u80fd\u306a\u3069\u304c\u554f\u984c\u306a\u304f\u4f7f\u3048\u3066\u4eca\u306e\u3068\u3053\u308d\u4e0d\u6e80\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\nGOPATH\u306f2\u3064\u8a2d\u5b9a\nGo\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u30ef\u30fc\u30af\u30b9\u30da\u30fc\u30b9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3067\u3042\u308bGOPATH\u4ee5\u4e0b\u306b\u914d\u7f6e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\ngofmt\u306a\u3069\u30c4\u30fc\u30eb\u3068\u3057\u3066\u4f7f\u3046\u3082\u306e\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u4f7f\u3046\u3082\u306e\u3068\u3001\u958b\u767a\u4e2d\u306e\u3082\u306e\u3092\u5225\u3005\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3067\u6271\u3044\u3001\u74b0\u5883\u5909\u6570\u306eGOPATH\u306f\uff12\u3064\u3092\u53c2\u7167\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u8a2d\u5b9a\u4f8b\nexport GOPATH_LIB=$HOME/.go\nexport GOPATH_DEV=$HOME/go\nexport GOPATH=$GOPATH_DEV:$GOPATH_LIB\nexport PATH=$PATH:$GOPATH_LIB/bin\n\n\u306f\u3058\u3081\u306fgb\u3092\u4f7f\u7528\u3057\u3066GOPATH\u3068\u306f\u95a2\u4fc2\u306a\u3044\u3068\u3053\u308d\u306b\u30b3\u30fc\u30c9\u3092\u7f6e\u3044\u3066\u958b\u767a\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001IntelliJ\u3092\u4f7f\u7528\u3057\u305f\u3068\u304dvendor\u914d\u4e0b\u306b\u914d\u7f6e\u3057\u305f\u5916\u90e8\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u88dc\u5b8c\u3067\u5229\u7528\u3067\u304d\u306a\u304b\u3063\u305f\u308a\u306a\u3069\u8272\u3005\u4e0d\u90fd\u5408\u304c\u3042\u3063\u305f\u306e\u3067\u3053\u306e\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\uff08\u305d\u306e\u6642\u306fvendor\u914d\u4e0b\u3068GOPATH\u306e\u4e21\u65b9\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066IntelliJ\u3067\u53c2\u7167\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u3002\uff09\n\ngvt\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u4f7f\u7528\u3057\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u306b\u306f\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u305b\u305a\u3001vendor\u914d\u4e0b\u306b\u914d\u7f6e\u3057\u3066\u305d\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u56fa\u6709\u3067\u4f7f\u7528\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u4f9d\u5b58\u6027\u89e3\u6c7a\u306b\u306fgvt\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u30b7\u30f3\u30d7\u30eb\u3067\u4f7f\u3044\u3084\u3059\u3044\u3068\u3044\u3046\u306e\u304c\u63a1\u7528\u306e\u7406\u7531\u3067\u3059\u3002\u5916\u90e8\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u30b3\u30df\u30c3\u30c8\u306b\u306f\u542b\u3081\u305a\u3001vendor/manifest\u3060\u3051\u3092\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u3057\u3066\u3044\u307e\u3059\u3002\n\u5916\u90e8\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u306b\u542b\u3081\u308bvendoring\u3092\u884c\u3046\u304b\u884c\u308f\u306a\u3044\u304b\u8ad6\u4e89\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u3053\u306e\u8fba\u306fRuby\u3084Scala\u3001Java\u306a\u3069\u591a\u8a00\u8a9e\u3067\u3082\u305d\u3046\u3060\u3068\u601d\u3046\u306e\u3067\u7279\u306b\u9055\u548c\u611f\u3092\u611f\u3058\u3066\u3044\u307e\u305b\u3093\u3002\n\u4ee5\u4e0b\u4f7f\u7528\u4f8b\u3067\u3059\u3002\n# \u30e9\u30a4\u30d6\u30e9\u30ea\u53d6\u5f97\ngvt fetch github.com/aws/aws-sdk-go/aws\n\n# \u30e9\u30a4\u30d6\u30e9\u30ea\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\ngvt update github.com/aws/aws-sdk-go/aws\n\n# vendor/manifest\u304b\u3089\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u53d6\u5f97\ngvt restore\n\n# \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u3059\u3079\u3066\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\ngvt update -all\n\n\nmakefile\nmakefile\u306f\u6539\u5584\u306e\u4f59\u5730\u304c\u3042\u308b\u611f\u3058\u304c\u3059\u308b\u306e\u3067\u3059\u304c\u3001\u73fe\u72b6\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\nPATH_API_MAIN                 = application/api/server/api/main.go\nPATH_RESEARCH_API_MAIN        = application/research_api/main.go\nPATH_PARTNER_ITEM_IMPORT_MAIN = application/partner_item_import/main.go\n\nbuild:\n    go build -o bin/api                 $(PATH_API_MAIN)\n    go build -o bin/research_api        $(PATH_RESEARCH_API_MAIN)\n    go build -o bin/partner_item_import $(PATH_PARTNER_ITEM_IMPORT_MAIN)\n\nbuild_linux:\n    GOOS=linux GOARCH=amd64 go build -o bin/api                 $(PATH_API_MAIN)\n    GOOS=linux GOARCH=amd64 go build -o bin/research_api        $(PATH_RESEARCH_API_MAIN)\n    GOOS=linux GOARCH=amd64 go build -o bin/partner_item_import $(PATH_PARTNER_ITEM_IMPORT_MAIN)\n\nrestore:\n    go get -u github.com/FiloSottile/gvt\n    gvt restore\n\ntest:\n    go test -v ./application/...\n    go test -v ./domain/...\n    go test -v ./infrastructure/...\n    go test -v ./util/...\n\n\u958b\u767a\u4e2d\u306e\u30d3\u30eb\u30c9\u306f\u30ad\u30e3\u30c3\u30b7\u30e5\u304c\u52b9\u304f\u305f\u3081go install\u306e\u65b9\u304c\u901f\u5ea6\u306e\u9762\u3067\u3044\u3044\u9078\u629e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u30b3\u30fc\u30c9\u30c7\u30b6\u30a4\u30f3\nDDD\u306e\u30ec\u30a4\u30e4\u30fc\u30c9\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n.\n\u251c\u2500\u2500 application\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 api\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 partner_item_import\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 research_api\n\u251c\u2500\u2500 bin\n\u251c\u2500\u2500 conf\n\u251c\u2500\u2500 deploy_script\n\u251c\u2500\u2500 documents\n\u251c\u2500\u2500 domain\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 lifecycle\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 models\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 service\n\u251c\u2500\u2500 infrastructure\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 api\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 lifecycle\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 factory\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 mysql\n\u251c\u2500\u2500 resources\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 assets\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 keys\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 templates\n\u251c\u2500\u2500 util\n\u2514\u2500\u2500 vendor\n\n\nApplication\u5c64\nWeb\u304b\u3089\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u4ed8\u3051\u305f\u308a\u30d0\u30c3\u30c1\u3092\u8d77\u52d5\u3057\u305f\u308a\u3068\u3044\u3046\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u3001Domain\u5c64\u306e\u30b3\u30fc\u30c9\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002Web\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306b\u306fgin\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001HTTP\u30b5\u30fc\u30d0\u30fc\u3092\u7acb\u3061\u4e0a\u3052\u305f\u308aRouter\u3092\u66f8\u304dURI\u3092\u304d\u3063\u305f\u308aController\u51e6\u7406\u3092\u66f8\u3044\u305f\u308a\u3068\u3044\u3046\u306e\u306f\u3053\u306e\u5c64\u306e\u8cac\u52d9\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\u30b3\u30fc\u30c9\u4f8b(\u4e00\u90e8\u3060\u3051\u629c\u7c8b\u3057\u3066\u3044\u307e\u3059)\n// application/api\n\npackage api\n\nimport (\n    \"net/http\"\n    \"strconv\"\n\n    \"github.com/brandfolder/gin-gorelic\"\n    \"github.com/gin-gonic/gin\"\n)\n\nfunc Main() {\n    router := gin.New()\n\n    // Middleware\u306e\u767b\u9332\n    router.Use(AccessLogger())\n    if util.Env.IsLocal() {\n        router.Use(gin.Logger(), Recovery())\n    } else {\n        router.Use(Errbit())\n    }\n    router.Use(gorelic.Handler)\n    router.Use(CORSMiddleware())\n\n    // Router\n    router.GET(\"/items\", getItems)\n    router.GET(\"/items/:item_id\", getItem)\n    router.GET(\"/brands\", getBrands)\n\n    port := strconv.Itoa(util.Conf.Server.Port)\n    router.Run(\":\" + port)\n}\n\nfunc getItem(c *gin.Context) {\n    itemID := models.ItemID{c.Param(\"item_id\")}\n    item, err := itemRepository.Resolve(itemID)\n    if err != nil {\n        panic(err)\n    } \n\n    if item == nil {\n        c.JSON(http.StatusNotFound, gin.H{\"error\": \"not found\"})\n        return\n    }\n\n    c.JSON(http.StatusOK, item)\n}\n\nfunc getBrand(c *gin.Context) {\n    var err error\n    brandID, err := strconv.Atoi(c.Param(\"id\"))\n    if err != nil {\n        c.JSON(http.StatusBadRequest, gin.H{\"message\": \"item_brand_id allow only integer\"})\n        return\n    }\n\n    brand, err := brandRepository.Resolve(models.BrandID(brandID))\n    if err != nil {\n        panic(err)\n    }\n\n    if brand == nil {\n        c.JSON(http.StatusNotFound, gin.H{\"error\": \"not found\"})\n        return\n    }\n\n    c.JSON(http.StatusOK, brand)\n}\n\n\nDomain\u5c64\n\u30c9\u30e1\u30a4\u30f3\u30e2\u30c7\u30eb\u3068\u305d\u306e\u30c9\u30e1\u30a4\u30f3\u30e2\u30c7\u30eb\u3092\u53d6\u5f97\u3059\u308b\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\u30b3\u30fc\u30c9\u306e\u30a4\u30e1\u30fc\u30b8\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\nRepository\u306fInterface\u3060\u3051\u3092\u5b9a\u7fa9\u3057\u3001\u5b9f\u88c5\u306fInfrastructure\u306b\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\uff08\u4f9d\u5b58\u95a2\u4fc2\u9006\u8ee2\uff09\n// domain/lifecycle/interface.go\n\npackage lifecycle\n\ntype ItemRepository interface {\n    Resolve(id models.ItemID) (*models.Item, error)\n}\n\ntype UserRepository interface {\n    Resolve(id models.UserID) (*models.User, error)\n    ResolveByFacebookID(facebookID string) (*models.User, error)\n    ResolveByTwitterID(twitterID string) (*models.User, error)\n    ResolveByGoogleID(googleID string) (*models.User, error)\n    ResolveByUUID(uuid string) (*models.User, error)\n    Store(user models.User) (*models.User, error)\n}\n\ntype BrandRepository interface {\n    ResolveAll() ([]*models.Brand, error)\n    ResolveByTrend(subCategoryID int) ([]*models.Brand, error)\n    ResolveByGender(gender models.Gender) ([]*models.Brand, error)\n    ResolveBySubCategoryID(subCategoryID int) ([]*models.Brand, error)\n    SearchAll(name string, subCategoryID int, genderID int) ([]*models.Brand, error)\n}\n\n// domain/models/user.go\n\npackage models\n\ntype UserID struct {\n    UserID int64\n}\n\ntype User struct {\n    UserID         int64     `json:\"user_id\"`\n    UUID           string    `json:\"uuid\"`\n    Sp             int64     `json:\"sp\"`\n    FacebookID     string    `json:\"facebook_id\"`\n    TwitterID      string    `json:\"twitter_id\"`\n    GoogleID       string    `json:\"google_id\"`\n    RegisterDate   time.Time `json:\"register_date\"`\n    UpdateDate     time.Time `json:\"update_date\"`\n    registerType   int       `json:\"-\"`\n}\n\nfunc (u *User) GetUserID() *UserID {\n    if u == nil {\n        return nil\n    }\n    return &UserID{u.UserID}\n}\n\nfunc (u *User) AssignUUID() {\n    u.UUID = generateUUID()\n}\n\nfunc generateUUID() string {\n    u4, err := uuid.NewV4()\n    if err != nil {\n        log.Println(\"[error] UUID generate.\", err)\n        panic(err)\n    }\n    now := strconv.FormatInt(time.Now().UnixNano(), 10)\n    encoder := sha1.New()\n    encoder.Write([]byte(u4.String() + now))\n    return fmt.Sprintf(\"%x\", encoder.Sum(nil))\n}\n\n\nInfrastructure\u5c64\nRepository\u306e\u5b9f\u88c5\u3001MySQL\u3078\u30a2\u30af\u30bb\u30b9\u3059\u308bDAO\u3001\u5916\u90e8API\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306a\u3069\u306e\u5b9f\u88c5\u3092\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\n\u30b3\u30fc\u30c9\u306f\u3053\u3093\u306a\u611f\u3058\u3002\nRepository\u306eMySQL\u5b9f\u88c5\n// infrastructure/lifecycle/user_repository_mysql.go\npackage lifecycle\n\nimport (\n    \"database/sql\"\n    \"github.com/gocraft/dbr\"\n    \"github.com/pkg/errors\"\n)\n\ntype UserRepositoryMySQL struct{}\n\nfunc NewUserRepositoryMySQL() UserRepositoryMySQL {\n    return UserRepositoryMySQL{}\n}\n\nfunc (repo UserRepositoryMySQL) Resolve(id models.UserID) (*models.User, error) {\n    var user *models.User\n    record, err := mysql.NewTUserDao().FindByID(id.UserID)\n    if record != nil {\n        user = repo.recordToEntity(record)\n    }\n    return user, err\n}\n\nfunc (repo UserRepositoryMySQL) recordToEntity(tuser *mysql.TUser) *models.User {\n    user := models.User{\n        UserID:     tuser.UserID,\n        UUID:       tuser.UUID.String,\n        Sp:         tuser.Sp.Int64,\n        FacebookID: tuser.FacebookID.String,\n        TwitterID:  tuser.TwitterID.String,\n        GoogleID:   tuser.GoogleID.String,\n        RegistDate: tuser.RegistDate.Time,\n        UpdateDate: tuser.UpdateDate.Time,\n    }\n    return &user\n}\n\nMySQL\u3068\u3084\u308a\u53d6\u308a\u3092\u884c\u3046DAO\n// infrastructure/mysql/t_user.go\n\npackage mysql\n\nimport (\n    \"database/sql\"\n\n    \"github.com/gocraft/dbr\"\n)\n\ntype TUser struct {\n    UserID     int64          `db:\"user_id\"`\n    UUID       dbr.NullString `db:\"uuid\"`\n    Sp         dbr.NullInt64  `db:\"sp\"`\n    FacebookID dbr.NullString `db:\"facebook_id\"`\n    TwitterID  dbr.NullString `db:\"twitter_id\"`\n    GoogleID   dbr.NullString `db:\"google_id\"`\n    RegistDate dbr.NullTime   `db:\"regist_date\"`\n    UpdateDate dbr.NullTime   `db:\"update_date\"`\n}\n\ntype TUserDao struct {\n    conn  *dbr.Connection\n    table string\n}\n\nfunc NewTUserDao() TUserDao {\n    return TUserDao{\n        conn:  ConnMaster,\n        table: \"t_user\",\n    }\n}\n\nfunc (t TUserDao) FindByID(userID int64) (*TUser, error) {\n    sess := t.conn.NewSession(nil)\n    var record *TUser\n    _, err := sess.Select(\"*\").From(t.table).Where(\"user_id = ?\", userID).Load(&record)\n    return record, err\n}\n\n\n\u4f7f\u3063\u3066\u3044\u308b\u4e3b\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\n\n\n\n\u5f79\u5272\n\u30ea\u30dd\u30b8\u30c8\u30ea\n\n\n\n\nPackage Management\nhttps://github.com/FiloSottile/gvt\n\n\nWeb Framework\nhttps://github.com/gin-gonic/gin\n\n\nDataBase/ORM\nhttps://github.com/gocraft/dbr\n\n\nConfig\nhttps://github.com/BurntSushi/toml\n\n\nLogger\nhttps://github.com/sirupsen/logrus\n\n\nLogger\nhttps://github.com/doloopwhile/logrusltsv\n\n\nJWT\nhttps://github.com/dgrijalva/jwt-go\n\n\nOAuth2\nhttps://golang.org/x/oauth2\n\n\n\n\n\u6700\u8fd1\u56f0\u3063\u3066\u3044\u308b\u3053\u3068\n\nRepository\u3092\u307e\u305f\u3044\u3060\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7ba1\u7406\u3002Application\u5c64\u3067\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7ba1\u7406\u3057\u305f\u3044\u3002\nClean Architecture\u3067\u66f8\u304d\u305f\u3044\uff08DDD\u306e\u7406\u89e3\u3092\u6df1\u3081\u305f\u3044\uff09\n\n\nDomain\u306fInfrastructure\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u306e\u3067\u610f\u5916\u3068\u3055\u3063\u304f\u308a\u3044\u3051\u308b(?!)\n\n\n\n\n\u6700\u5f8c\u306b\n\u3053\u3093\u306a\u611f\u3058\u3067\u3084\u3063\u3066\u307e\u3059\uff01\n\u30a2\u30d1\u30ec\u30eb EC \u5411\u3051\u30b5\u30a4\u30ba\u30ec\u30b3\u30e1\u30f3\u30c9\u30a8\u30f3\u30b8\u30f3\u300cunisize\u300d\u3092\u904b\u55b6\u3059\u308b\u30e1\u30a4\u30ad\u30c3\u30d7\u3067\u306f\u30a8\u30f3\u30b8\u30cb\u30a2\u3092\u52df\u96c6\u3057\u3066\u3044\u307e\u3059\uff01\uff01\uff01\n## \u306f\u3058\u3081\u306b\n\n\u3053\u306e\u8a18\u4e8b\u306f[Go Advent Calendar 2016](http://qiita.com/advent-calendar/2016/go3) \u306e14\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n\u6700\u8fd1Ergodox\u3092\u8cfc\u5165\u3057\u305fGopher\u3067\u3059\u3002\n\n\u4eca\u5e74\u306e3\u6708\u304b\u3089Go\u3092\u4f7f\u7528\u3057\u3066\u30b5\u30fc\u30d3\u30b9\u306e\u958b\u767a\u3092\u3057\u3066\u3044\u307e\u3059\u3002\nGo\u3092\u4f7f\u7528\u3057\u305f\u306e\u306f\u521d\u3081\u3066\u3067\u3001\u8272\u3005\u3068\u8abf\u3079\u306a\u304c\u3089\u958b\u767a\u74b0\u5883\u306e\u4f5c\u308a\u65b9\u3001\u958b\u767a\u304b\u3089\u30c7\u30d7\u30ed\u30a4\u307e\u3067\u4e00\u901a\u308a\u3084\u3063\u3066\u304d\u305f\u306e\u3067\u3001\u307e\u3068\u3081\u3066\u66f8\u304d\u51fa\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n## \u4f5c\u3063\u305f\u3082\u306e\nREST API\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u306friot.js\u3092\u4f7f\u7528\u3057\u305fSPA\u3067\u3001\u305d\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n## \u30b5\u30fc\u30d0\u30fc\u69cb\u6210\n\u74b0\u5883\u306fAWS\u3067\u3059\u3002\u524d\u6bb5\u306bELB\u3092\u7f6e\u304d\u3001Go\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306fEC2\u4e0a\u3067\u52d5\u4f5c\u3057\u307e\u3059\u3002EC2\u306fAuto Scaling\u30b0\u30eb\u30fc\u30d7\u306b\u5c5e\u3057\u3001CodeDeploy\u306b\u3088\u308a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u30c7\u30d7\u30ed\u30a4\u3055\u308c\u307e\u3059\u3002Auto Scaling\u3068CodeDeploy\u306e\u9023\u643a\u304c\u7d76\u5999\u3067\u3001\u30b9\u30b1\u30fc\u30eb\u30a2\u30a6\u30c8\u6642\u306b\u306fCodeDeploy\u304c\u6700\u65b0\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u30c7\u30d7\u30ed\u30a4\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\nCI\u306b\u306fWerker\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u3086\u308b\u3044git flow\u3067\u3084\u3063\u3066\u3044\u3066\u3001develop\u3068master\u30d6\u30e9\u30f3\u30c1\u3078\u306epush\u306b\u30d5\u30c3\u30af\u3057\u3066\u305d\u308c\u305e\u308cdev\u74b0\u5883\u3001prod\u74b0\u5883\u3078\u30c7\u30d7\u30ed\u30a4\u3055\u308c\u307e\u3059\u3002\n\n## \u958b\u767a\u74b0\u5883\n\n### \u30a8\u30c7\u30a3\u30bf\u306fIntelliJ\nVisual Studio Code\u304c\u6700\u8fd1\u826f\u3055\u3052\u3067\u3059\u304c\u3001IntelliJ\u3092\u4f7f\u7528\u3057\u3066\u958b\u767a\u3057\u3066\u3044\u307e\u3059\u3002(PHP\u3001Scala\u306a\u3069\u5225\u306e\u8a00\u8a9e\u66f8\u304f\u3068\u304d\u3082JetBrain\u88fd\u54c1\u3092\u4f7f\u3063\u3066\u304d\u305f\u306e\u3067)\n\u88dc\u5b8c\u3084\u30b3\u30fc\u30c9\u30b8\u30e3\u30f3\u30d7\u3001\u30ea\u30d5\u30a1\u30af\u30bf\u6a5f\u80fd\u306a\u3069\u304c\u554f\u984c\u306a\u304f\u4f7f\u3048\u3066\u4eca\u306e\u3068\u3053\u308d\u4e0d\u6e80\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n### GOPATH\u306f2\u3064\u8a2d\u5b9a\nGo\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u30ef\u30fc\u30af\u30b9\u30da\u30fc\u30b9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3067\u3042\u308bGOPATH\u4ee5\u4e0b\u306b\u914d\u7f6e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\ngofmt\u306a\u3069\u30c4\u30fc\u30eb\u3068\u3057\u3066\u4f7f\u3046\u3082\u306e\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u4f7f\u3046\u3082\u306e\u3068\u3001\u958b\u767a\u4e2d\u306e\u3082\u306e\u3092\u5225\u3005\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3067\u6271\u3044\u3001\u74b0\u5883\u5909\u6570\u306eGOPATH\u306f\uff12\u3064\u3092\u53c2\u7167\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u8a2d\u5b9a\u4f8b\n\n```bash\nexport GOPATH_LIB=$HOME/.go\nexport GOPATH_DEV=$HOME/go\nexport GOPATH=$GOPATH_DEV:$GOPATH_LIB\nexport PATH=$PATH:$GOPATH_LIB/bin\n```\n\n\u306f\u3058\u3081\u306fgb\u3092\u4f7f\u7528\u3057\u3066GOPATH\u3068\u306f\u95a2\u4fc2\u306a\u3044\u3068\u3053\u308d\u306b\u30b3\u30fc\u30c9\u3092\u7f6e\u3044\u3066\u958b\u767a\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001IntelliJ\u3092\u4f7f\u7528\u3057\u305f\u3068\u304dvendor\u914d\u4e0b\u306b\u914d\u7f6e\u3057\u305f\u5916\u90e8\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u88dc\u5b8c\u3067\u5229\u7528\u3067\u304d\u306a\u304b\u3063\u305f\u308a\u306a\u3069\u8272\u3005\u4e0d\u90fd\u5408\u304c\u3042\u3063\u305f\u306e\u3067\u3053\u306e\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\uff08\u305d\u306e\u6642\u306fvendor\u914d\u4e0b\u3068GOPATH\u306e\u4e21\u65b9\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066IntelliJ\u3067\u53c2\u7167\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u3002\uff09\n\n### gvt\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u4f7f\u7528\u3057\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u306b\u306f\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u305b\u305a\u3001vendor\u914d\u4e0b\u306b\u914d\u7f6e\u3057\u3066\u305d\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u56fa\u6709\u3067\u4f7f\u7528\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u4f9d\u5b58\u6027\u89e3\u6c7a\u306b\u306fgvt\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u30b7\u30f3\u30d7\u30eb\u3067\u4f7f\u3044\u3084\u3059\u3044\u3068\u3044\u3046\u306e\u304c\u63a1\u7528\u306e\u7406\u7531\u3067\u3059\u3002\u5916\u90e8\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u30b3\u30df\u30c3\u30c8\u306b\u306f\u542b\u3081\u305a\u3001`vendor/manifest`\u3060\u3051\u3092\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u3057\u3066\u3044\u307e\u3059\u3002\n\u5916\u90e8\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u306b\u542b\u3081\u308b`vendoring`\u3092\u884c\u3046\u304b\u884c\u308f\u306a\u3044\u304b\u8ad6\u4e89\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u3053\u306e\u8fba\u306fRuby\u3084Scala\u3001Java\u306a\u3069\u591a\u8a00\u8a9e\u3067\u3082\u305d\u3046\u3060\u3068\u601d\u3046\u306e\u3067\u7279\u306b\u9055\u548c\u611f\u3092\u611f\u3058\u3066\u3044\u307e\u305b\u3093\u3002\n\n\u4ee5\u4e0b\u4f7f\u7528\u4f8b\u3067\u3059\u3002\n\n```bash\n# \u30e9\u30a4\u30d6\u30e9\u30ea\u53d6\u5f97\ngvt fetch github.com/aws/aws-sdk-go/aws\n\n# \u30e9\u30a4\u30d6\u30e9\u30ea\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\ngvt update github.com/aws/aws-sdk-go/aws\n\n# vendor/manifest\u304b\u3089\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u53d6\u5f97\ngvt restore\n\n# \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u3059\u3079\u3066\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\ngvt update -all\n```\n\n### makefile\nmakefile\u306f\u6539\u5584\u306e\u4f59\u5730\u304c\u3042\u308b\u611f\u3058\u304c\u3059\u308b\u306e\u3067\u3059\u304c\u3001\u73fe\u72b6\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n```bash\nPATH_API_MAIN                 = application/api/server/api/main.go\nPATH_RESEARCH_API_MAIN        = application/research_api/main.go\nPATH_PARTNER_ITEM_IMPORT_MAIN = application/partner_item_import/main.go\n\nbuild:\n\tgo build -o bin/api                 $(PATH_API_MAIN)\n\tgo build -o bin/research_api        $(PATH_RESEARCH_API_MAIN)\n\tgo build -o bin/partner_item_import $(PATH_PARTNER_ITEM_IMPORT_MAIN)\n\nbuild_linux:\n\tGOOS=linux GOARCH=amd64 go build -o bin/api                 $(PATH_API_MAIN)\n\tGOOS=linux GOARCH=amd64 go build -o bin/research_api        $(PATH_RESEARCH_API_MAIN)\n\tGOOS=linux GOARCH=amd64 go build -o bin/partner_item_import $(PATH_PARTNER_ITEM_IMPORT_MAIN)\n\nrestore:\n\tgo get -u github.com/FiloSottile/gvt\n\tgvt restore\n\ntest:\n\tgo test -v ./application/...\n\tgo test -v ./domain/...\n\tgo test -v ./infrastructure/...\n\tgo test -v ./util/...\n```\n\n\u958b\u767a\u4e2d\u306e\u30d3\u30eb\u30c9\u306f\u30ad\u30e3\u30c3\u30b7\u30e5\u304c\u52b9\u304f\u305f\u3081`go install`\u306e\u65b9\u304c\u901f\u5ea6\u306e\u9762\u3067\u3044\u3044\u9078\u629e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n## \u30b3\u30fc\u30c9\u30c7\u30b6\u30a4\u30f3\nDDD\u306e\u30ec\u30a4\u30e4\u30fc\u30c9\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n```\n.\n\u251c\u2500\u2500 application\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 api\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 partner_item_import\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 research_api\n\u251c\u2500\u2500 bin\n\u251c\u2500\u2500 conf\n\u251c\u2500\u2500 deploy_script\n\u251c\u2500\u2500 documents\n\u251c\u2500\u2500 domain\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 lifecycle\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 models\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 service\n\u251c\u2500\u2500 infrastructure\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 api\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 lifecycle\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 factory\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 mysql\n\u251c\u2500\u2500 resources\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 assets\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 keys\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 templates\n\u251c\u2500\u2500 util\n\u2514\u2500\u2500 vendor\n```\n\n### Application\u5c64\nWeb\u304b\u3089\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u4ed8\u3051\u305f\u308a\u30d0\u30c3\u30c1\u3092\u8d77\u52d5\u3057\u305f\u308a\u3068\u3044\u3046\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u3001Domain\u5c64\u306e\u30b3\u30fc\u30c9\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002Web\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306b\u306fgin\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001HTTP\u30b5\u30fc\u30d0\u30fc\u3092\u7acb\u3061\u4e0a\u3052\u305f\u308aRouter\u3092\u66f8\u304dURI\u3092\u304d\u3063\u305f\u308aController\u51e6\u7406\u3092\u66f8\u3044\u305f\u308a\u3068\u3044\u3046\u306e\u306f\u3053\u306e\u5c64\u306e\u8cac\u52d9\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30b3\u30fc\u30c9\u4f8b(\u4e00\u90e8\u3060\u3051\u629c\u7c8b\u3057\u3066\u3044\u307e\u3059)\n\n```go\n// application/api\n\npackage api\n\nimport (\n\t\"net/http\"\n\t\"strconv\"\n\n\t\"github.com/brandfolder/gin-gorelic\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc Main() {\n\trouter := gin.New()\n\n\t// Middleware\u306e\u767b\u9332\n\trouter.Use(AccessLogger())\n\tif util.Env.IsLocal() {\n\t\trouter.Use(gin.Logger(), Recovery())\n\t} else {\n\t\trouter.Use(Errbit())\n\t}\n\trouter.Use(gorelic.Handler)\n\trouter.Use(CORSMiddleware())\n\n\t// Router\n\trouter.GET(\"/items\", getItems)\n\trouter.GET(\"/items/:item_id\", getItem)\n\trouter.GET(\"/brands\", getBrands)\n\n\tport := strconv.Itoa(util.Conf.Server.Port)\n\trouter.Run(\":\" + port)\n}\n\nfunc getItem(c *gin.Context) {\n\titemID := models.ItemID{c.Param(\"item_id\")}\n\titem, err := itemRepository.Resolve(itemID)\n\tif err != nil {\n\t\tpanic(err)\n\t} \n\n\tif item == nil {\n\t\tc.JSON(http.StatusNotFound, gin.H{\"error\": \"not found\"})\n\t\treturn\n\t}\n\n\tc.JSON(http.StatusOK, item)\n}\n\nfunc getBrand(c *gin.Context) {\n\tvar err error\n\tbrandID, err := strconv.Atoi(c.Param(\"id\"))\n\tif err != nil {\n\t\tc.JSON(http.StatusBadRequest, gin.H{\"message\": \"item_brand_id allow only integer\"})\n\t\treturn\n\t}\n\n\tbrand, err := brandRepository.Resolve(models.BrandID(brandID))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif brand == nil {\n\t\tc.JSON(http.StatusNotFound, gin.H{\"error\": \"not found\"})\n\t\treturn\n\t}\n\n\tc.JSON(http.StatusOK, brand)\n}\n```\n\n### Domain\u5c64\n\n\u30c9\u30e1\u30a4\u30f3\u30e2\u30c7\u30eb\u3068\u305d\u306e\u30c9\u30e1\u30a4\u30f3\u30e2\u30c7\u30eb\u3092\u53d6\u5f97\u3059\u308b\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n\u30b3\u30fc\u30c9\u306e\u30a4\u30e1\u30fc\u30b8\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\nRepository\u306fInterface\u3060\u3051\u3092\u5b9a\u7fa9\u3057\u3001\u5b9f\u88c5\u306fInfrastructure\u306b\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\uff08\u4f9d\u5b58\u95a2\u4fc2\u9006\u8ee2\uff09\n\n```go\n// domain/lifecycle/interface.go\n\npackage lifecycle\n\ntype ItemRepository interface {\n\tResolve(id models.ItemID) (*models.Item, error)\n}\n\ntype UserRepository interface {\n\tResolve(id models.UserID) (*models.User, error)\n\tResolveByFacebookID(facebookID string) (*models.User, error)\n\tResolveByTwitterID(twitterID string) (*models.User, error)\n\tResolveByGoogleID(googleID string) (*models.User, error)\n\tResolveByUUID(uuid string) (*models.User, error)\n\tStore(user models.User) (*models.User, error)\n}\n\ntype BrandRepository interface {\n\tResolveAll() ([]*models.Brand, error)\n\tResolveByTrend(subCategoryID int) ([]*models.Brand, error)\n\tResolveByGender(gender models.Gender) ([]*models.Brand, error)\n\tResolveBySubCategoryID(subCategoryID int) ([]*models.Brand, error)\n\tSearchAll(name string, subCategoryID int, genderID int) ([]*models.Brand, error)\n}\n```\n\n```go\n// domain/models/user.go\n\npackage models\n\ntype UserID struct {\n\tUserID int64\n}\n\ntype User struct {\n\tUserID         int64     `json:\"user_id\"`\n\tUUID           string    `json:\"uuid\"`\n\tSp             int64     `json:\"sp\"`\n\tFacebookID     string    `json:\"facebook_id\"`\n\tTwitterID      string    `json:\"twitter_id\"`\n\tGoogleID       string    `json:\"google_id\"`\n\tRegisterDate   time.Time `json:\"register_date\"`\n\tUpdateDate     time.Time `json:\"update_date\"`\n\tregisterType   int       `json:\"-\"`\n}\n\nfunc (u *User) GetUserID() *UserID {\n\tif u == nil {\n\t\treturn nil\n\t}\n\treturn &UserID{u.UserID}\n}\n\nfunc (u *User) AssignUUID() {\n\tu.UUID = generateUUID()\n}\n\nfunc generateUUID() string {\n\tu4, err := uuid.NewV4()\n\tif err != nil {\n\t\tlog.Println(\"[error] UUID generate.\", err)\n\t\tpanic(err)\n\t}\n\tnow := strconv.FormatInt(time.Now().UnixNano(), 10)\n\tencoder := sha1.New()\n\tencoder.Write([]byte(u4.String() + now))\n\treturn fmt.Sprintf(\"%x\", encoder.Sum(nil))\n}\n```\n\n### Infrastructure\u5c64\n\nRepository\u306e\u5b9f\u88c5\u3001MySQL\u3078\u30a2\u30af\u30bb\u30b9\u3059\u308bDAO\u3001\u5916\u90e8API\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306a\u3069\u306e\u5b9f\u88c5\u3092\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\n\n\u30b3\u30fc\u30c9\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\nRepository\u306eMySQL\u5b9f\u88c5\n\n```go\n// infrastructure/lifecycle/user_repository_mysql.go\npackage lifecycle\n\nimport (\n\t\"database/sql\"\n\t\"github.com/gocraft/dbr\"\n\t\"github.com/pkg/errors\"\n)\n\ntype UserRepositoryMySQL struct{}\n\nfunc NewUserRepositoryMySQL() UserRepositoryMySQL {\n\treturn UserRepositoryMySQL{}\n}\n\nfunc (repo UserRepositoryMySQL) Resolve(id models.UserID) (*models.User, error) {\n\tvar user *models.User\n\trecord, err := mysql.NewTUserDao().FindByID(id.UserID)\n\tif record != nil {\n\t\tuser = repo.recordToEntity(record)\n\t}\n\treturn user, err\n}\n\nfunc (repo UserRepositoryMySQL) recordToEntity(tuser *mysql.TUser) *models.User {\n\tuser := models.User{\n\t\tUserID:     tuser.UserID,\n\t\tUUID:       tuser.UUID.String,\n\t\tSp:         tuser.Sp.Int64,\n\t\tFacebookID: tuser.FacebookID.String,\n\t\tTwitterID:  tuser.TwitterID.String,\n\t\tGoogleID:   tuser.GoogleID.String,\n\t\tRegistDate: tuser.RegistDate.Time,\n\t\tUpdateDate: tuser.UpdateDate.Time,\n\t}\n\treturn &user\n}\n```\n\nMySQL\u3068\u3084\u308a\u53d6\u308a\u3092\u884c\u3046DAO\n\n```go\n// infrastructure/mysql/t_user.go\n\npackage mysql\n\nimport (\n\t\"database/sql\"\n\n\t\"github.com/gocraft/dbr\"\n)\n\ntype TUser struct {\n\tUserID     int64          `db:\"user_id\"`\n\tUUID       dbr.NullString `db:\"uuid\"`\n\tSp         dbr.NullInt64  `db:\"sp\"`\n\tFacebookID dbr.NullString `db:\"facebook_id\"`\n\tTwitterID  dbr.NullString `db:\"twitter_id\"`\n\tGoogleID   dbr.NullString `db:\"google_id\"`\n\tRegistDate dbr.NullTime   `db:\"regist_date\"`\n\tUpdateDate dbr.NullTime   `db:\"update_date\"`\n}\n\ntype TUserDao struct {\n\tconn  *dbr.Connection\n\ttable string\n}\n\nfunc NewTUserDao() TUserDao {\n\treturn TUserDao{\n\t\tconn:  ConnMaster,\n\t\ttable: \"t_user\",\n\t}\n}\n\nfunc (t TUserDao) FindByID(userID int64) (*TUser, error) {\n\tsess := t.conn.NewSession(nil)\n\tvar record *TUser\n\t_, err := sess.Select(\"*\").From(t.table).Where(\"user_id = ?\", userID).Load(&record)\n\treturn record, err\n}\n```\n\n## \u4f7f\u3063\u3066\u3044\u308b\u4e3b\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\n\n| \u5f79\u5272               | \u30ea\u30dd\u30b8\u30c8\u30ea                                |\n|--------------------|-------------------------------------------|\n| Package Management | https://github.com/FiloSottile/gvt        |\n| Web Framework      | https://github.com/gin-gonic/gin          |\n| DataBase/ORM       | https://github.com/gocraft/dbr            |\n| Config             | https://github.com/BurntSushi/toml        |\n| Logger             | https://github.com/sirupsen/logrus        |\n| Logger             | https://github.com/doloopwhile/logrusltsv |\n| JWT                | https://github.com/dgrijalva/jwt-go       |\n| OAuth2             | https://golang.org/x/oauth2               |\n\n### \u6700\u8fd1\u56f0\u3063\u3066\u3044\u308b\u3053\u3068\n\n- Repository\u3092\u307e\u305f\u3044\u3060\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7ba1\u7406\u3002Application\u5c64\u3067\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7ba1\u7406\u3057\u305f\u3044\u3002\n- Clean Architecture\u3067\u66f8\u304d\u305f\u3044\uff08DDD\u306e\u7406\u89e3\u3092\u6df1\u3081\u305f\u3044\uff09\n    - Domain\u306fInfrastructure\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u306e\u3067\u610f\u5916\u3068\u3055\u3063\u304f\u308a\u3044\u3051\u308b(?!)\n\n### \u6700\u5f8c\u306b\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3084\u3063\u3066\u307e\u3059\uff01\n\u30a2\u30d1\u30ec\u30eb EC \u5411\u3051\u30b5\u30a4\u30ba\u30ec\u30b3\u30e1\u30f3\u30c9\u30a8\u30f3\u30b8\u30f3\u300cunisize\u300d\u3092\u904b\u55b6\u3059\u308b\u30e1\u30a4\u30ad\u30c3\u30d7\u3067\u306f\u30a8\u30f3\u30b8\u30cb\u30a2\u3092\u52df\u96c6\u3057\u3066\u3044\u307e\u3059\uff01\uff01\uff01\n", "tags": ["Go", "golang", "gin"]}