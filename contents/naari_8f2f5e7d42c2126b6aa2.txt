{"context": "\n\n\u306f\u3058\u3081\u306b\n\u3053\u3053\u306b\u8272\u3005\u306a\u30e1\u30e2\u3092\u6b8b\u3059\n\u672c\u5f53\u306b\u81ea\u5206\u7528\u306a\u306e\u3067\u4e71\u96d1\n\u6700\u8fd1\u59cb\u3081\u305f\u3070\u3063\u304b\u3060\u304b\u3089\u308f\u304b\u3093\u306a\u3044\u3053\u3068\u3057\u304b\u306a\u3044\n\n\u5199\u771f\u306e\u30b3\u30e1\u30f3\u30c8\u3092\u898b\u308b\n$ identify -verbose decrypted.png \n\nImage: decrypted.png\n  Format: PNG (Portable Network Graphics)\n  Mime type: image/png\n  Class: DirectClass\n\n\u301c\u301c\u301c\u301c\u301c\u301c\u7565\u301c\u301c\u301c\u301c\u301c\u301c\n\n  Properties:\n    Comment: This is \u30b3\u30e1\u30f3\u30c8\n\n\u301c\u301c\u301c\u301c\u301c\u301c\u7565\u301c\u301c\u301c\u301c\u301c\u301c\n\n\n\nTypeError: Unicode-objects must be encoded before hashing\nPython3\u7cfb\u3067\u3053\u3046\u306a\u308b\nhash=hashlib.sha256(\"AAAAAAABBBBBBB\").hexdigest()\n\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: Unicode-objects must be encoded before hashing\n\nPython3\u7cfb\u3067\u306f\u5909\u6570\u306b\u6587\u5b57\u5217\u3092\u4ee3\u5165\u3059\u308b\u969b\u306bUnicode\u578b\u306e\u3082\u306e\u304c\u5165\u308b\u304c\u3001hashlib\u3067\u306f\u3053\u308c\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u30a8\u30e9\u30fc\u306e\u8a00\u3046\u3068\u304a\u308aencode\u3057\u3066\u3084\u308b\nhash=hashlib.sha256(\"AAAAAAABBBBBBB\".encode('utf-8')).hexdigest()\nprint(hash)\n\neec1fa5f1af83a56fe49b550ff052373581076fb4f1972f16f18760e23c11fbe\n\n\nAES\u306e\u30c7\u30b3\u30fc\u30c9 With Python\n\ndecode_aes.py\nsecret_key = \"0123456789abcdef\"\niv = \"0123456789abcdef\"\naes = AES.new(secret_key, AES.MODE_CBC, iv)\n\ndecrypt_data = aes.decrypt(encrypt_data)\n\n\nkey\u306f16, 24, 32\u306e\u3044\u305a\u308c\u304b\u306e\u30d0\u30a4\u30c8\u9577\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\nValueError: AES key must be either 16, 24, or 32 bytes long\n\n\nuuencode\u3046\u307e\u304f\u3044\u304b\u306a\u304b\u3063\u305f\n\u30c7\u30b3\u30fc\u30c9\u304c\u3046\u307e\u304f\u3044\u304b\u306a\u304b\u3063\u305f\u304b\u3089\u3069\u3046\u3084\u308b\u304b\u308f\u304b\u3089\u306a\u304b\u3063\u305f\n$ cat uue.txt | uuencode \nusage: uuencode [-m] [-o outfile] [infile] remotefile\n\n$ uuencode < uue.txt \nusage: uuencode [-m] [-o outfile] [infile] remotefile\n\n\u7d50\u5c40\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067Python\u306euu\u3092\u3064\u304b\u3063\u305f\nimport uu\nuu.decode(\"uue.txt\", \"dec.txt\")\n\n\n\u8ffd\u8a18(2016/11/11)\nPython2\u7cfb\u3060\u3068\u3053\u3046\u3067\u304d\u308b\n3\u306f\u7121\u7406\n>>> print \"test\".encode(\"uu\")\nbegin 666 <data>\n$=&5S=   \n\nend\n\n>>> print \"test\".encode(\"uu\").decode(\"uu\")\ntest\n\n\n\n\u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u7d50\u5408\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u60c5\u5831\u3092\u898b\u308b\nfile\u306f3\u7a2e\u985e\u306e\u30c6\u30b9\u30c8\u3092\u3084\u3063\u3066\u304f\u308c\u308b\u3051\u3069\u3001\u6700\u521d\u306b\u30c6\u30b9\u30c8\u304c\u6210\u529f\u3057\u305f\u6642\u70b9\u3067\u5b9f\u884c\u7d50\u679c\u3092\u51fa\u529b\u3057\u3066\u3057\u307e\u3046\u3002\n\u305d\u306e\u305f\u3081\u3001CTF\u3067\u3057\u3070\u3057\u3070\u898b\u3089\u308c\u308b\u3001\u8907\u6570\u306e\u5f62\u5f0f\u306e\u30d5\u30a1\u30a4\u30eb\u304c1\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u7d50\u5408\u3055\u308c\u3066\u308b\u3084\u3064\u306e\u60c5\u5831\u304c\u3046\u307e\u304f\u3064\u304b\u3081\u306a\u304b\u3063\u305f\u308a\u3059\u308b\u3002\n\u3088\u304f\u3057\u3089\u3093\u3051\u3069binwalk\u306f\u30d5\u30a1\u30a4\u30eb\u306e\u3069\u3053\u304b\u3089\u3069\u3046\u3044\u3046\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u304b\u3092\u51fa\u3057\u3066\u304f\u308c\u308b\u3002\n$ binwalk test.png\n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n0             0x0             PNG image, 1024 x 32, 8-bit/color RGB, non-interlaced\n41            0x29            Zlib compressed data, default compression\n\n\u3053\u3093\u306a\u611f\u3058\u306e\u62e1\u5f35\u5b50\u3092\u5909\u3048\u308b\u3068\u5225\u306e\u5f62\u5f0f\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u306a\u308b\u3068\u304b\u305d\u3046\u3044\u3046\u306e\u306f\u3053\u308c\u4f7f\u3063\u305f\u3089\u5224\u65ad\u3067\u304d\u308b\u3093\u3058\u3083\u306a\u3044\u304b\u306a\n$ binwalk gazou.png\n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n0             0x0             PNG image, 640 x 480, 8-bit/color RGBA, non-interlaced\n41            0x29            Zlib compressed data, default compression\n95256         0x17418         Zip archive data, at least v2.0 to extract, compressed size: 93428, uncompressed size: 94601, name: share1.png\n188724        0x2E134         Zip archive data, at least v2.0 to extract, compressed size: 93663, uncompressed size: 94902, name: share2.png\n282539        0x44FAB         End of Zip archive\n\n\npkcrack\n$ pkcrack -C test.zip -c plaintext.txt -p plaintext.txt -P plaintext.zip -d target.zip\n\n\n\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u306e\u610f\u5473\u306f\n-C \u6697\u53f7\u5316ZIP\u30d5\u30a1\u30a4\u30eb\u540d\n-c \u6697\u53f7\u5316ZIP\u30d5\u30a1\u30a4\u30eb\u5185\u306b\u3042\u308b\u5e73\u6587\u304c\u5206\u304b\u3063\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u540d\n-P \u5e73\u6587\u304c\u5206\u304b\u3063\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u306eZIP\u5727\u7e2e\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u540d\uff08\u6697\u53f7\u5316\u3055\u308c\u3066\u3044\u306a\u3044ZIP\uff09\n-p \u5e73\u6587\u306e\u30d5\u30a1\u30a4\u30eb\n-d \u51fa\u529b\u3059\u308bZIP\u30d5\u30a1\u30a4\u30eb\u540d\n\n-P\u306f\u5358\u7d14\u306b\u5e73\u6587\u306e\u30d5\u30a1\u30a4\u30eb\u3092$ zip -0 [\u5e73\u6587]\u3059\u308c\u3070\u3044\u3044 (?)\n\u3053\u3053\u3088\u304f\u308f\u304b\u3089\u3093\u306e\u3067\u3061\u3083\u3093\u3068\u8abf\u3079\u308b\u3053\u3068\n\u30b3\u30de\u30f3\u30c9\u306e\u30d8\u30eb\u30d7\u66f0\u304f\u3001-c\u3001-p\u3068\u4ed6\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\uff11\u3064\u4ee5\u4e0a\u5fc5\u8981\u3068\u3044\u3046\u3053\u3068\u3089\u3057\u3044\nUsage: pkcrack -c <crypted_file> -p <plaintext_file> [other_options],\nwhere [other_options] may be one or more of\n -o <offset>    for an offset of the plaintext into the ciphertext,\n            (may be negative)\n -C <c-ZIP> where c-ZIP is a ZIP-archive containing <crypted_file>\n -P <p-ZIP> where p-ZIP is a ZIP-archive containing <plaintext_file>\n -d <d-file>    where d-file is the name of the decrypted archive which\n        will be created by this program if the correct keys are found\n        (can only be used in conjunction with the -C option)\n -i switch off case-insensitive filename matching in ZIP-archives\n -a abort keys searching after first success\n -n no progress indicator\n\n\u6700\u521d\u306e\u3082\u3053\u308c\u3067\u3044\u3044\n$ pkcrack -C test.zip -c plaintext.txt -p plaintext.txt -d target.zip\n\n\nStandard-lock-key.jpg\n\n\napk\u304b\u3089\u8aad\u3081\u308bjava\u30d5\u30a1\u30a4\u30eb\u304c\u3067\u304d\u308b\u307e\u3067\n\u53c2\u8003: apk\u30d5\u30a1\u30a4\u30eb\u304b\u3089java\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u898b\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u308b\u307e\u3067\n\n\u5fc5\u8981\u7269\n\napktool (https://ibotpeaches.github.io/Apktool)\ndex2jar (http://sourceforge.net/projects/dex2jar)\nJD-GUI (http://jd.benow.ca/)\n\n\n\u624b\u9806\n\napk -> \u30ea\u30bd\u30fc\u30b9\napk -> dex\ndex -> jar\njar -> class\nclass -> java\n\n\napk -> \u30ea\u30bd\u30fc\u30b9\n$ apktool d target.apk\n\n\u30ea\u30bd\u30fc\u30b9\u304c\u3044\u3089\u306a\u3044\u306a\u3089\u3053\u306e\u30b9\u30c6\u30c3\u30d7\u306f\u3044\u3089\u306a\u3044\n\napk -> dex\n$ unzip target.apk\n\n\u3067\u3066\u304f\u308bclasses.dex\u304c\u305d\u308c\n\ndex -> jar\n$ sh dex2jar-2.0/d2j-dex2jar.sh target.apk\n\n\njar -> class\n$ unzip \u3055\u3063\u304d\u3067\u304d\u305f.jar\n\n\nclass -> java\nJD-GUI\u3060\u3068\u304bJD-Eclipse\u3060\u3068\u304b\u597d\u304d\u306a\u65b9\u6cd5\u3067\u898b\u308c\u3070\u3044\u3044\n\napk2dex\napk2jar.rb\n\n\u5fc5\u8981\u7269\u3092\u305d\u308d\u3048\u305f\u3089\u3044\u3044\u611f\u3058\u306b\u81ea\u52d5\u3067\u3084\u3063\u3066\u304f\u308c\u308b\u3084\u3064?\n\nRSA\u306b\u5411\u3051\u305f\u653b\u6483\u65b9\u6cd5\n\u5168\u3066\n\nCommon Moduls Attack\nCommon Modulus Attack\n\u30b3\u30fc\u30c9 GOTO Laboratory\u69d8\u306e\u30b3\u30fc\u30c9\u3092Python3\u5411\u3051\u306b\u4fee\u6b63\ndef gcd(a,b):\n    while b != 0:\n        a,b = b, a % b\n    return a\n\n# Extended Greatest Common Divisor\ndef egcd(a, b):\n    if (a == 0):\n        return [b, 0, 1]\n    else:\n        g, y, x = egcd(b % a, a)\n        return [g, x - (b // a) * y, y]\n\n# Modular multiplicative inverse\ndef modInv(a, m):\n    g, x, y = egcd(a, m)\n    if (g != 1):\n        raise Exception(\"[-]No modular multiplicative inverse of %d under modulus %d\" % (a, m))\n    else:\n        return x % m\n\ndef common_modulus_attack(c, e, n):\n    # c = [c1,c2,c3, ... ,cn]\n    # e = [e1,e2,e3, ... ,en]\n    assert len(c) > 1\n    assert len(e) > 1\n    assert len(c) == len(e)\n\n    for i,e_a in enumerate(e):\n        for j,e_b in enumerate(e[i:]):\n            if gcd(e_a,e_b) == 1:\n                break\n        else:\n            continue\n        break\n\n    a = egcd(e_a,e_b)\n    c1 = c[i]\n    c2 = c[j]\n\n    if a[1] < 0:\n        m = (pow(modInv(c1,n),a[1]*-1,n) * pow(c2,a[2],n)) % n\n    elif a[2] < 0:\n        m = (pow(c1,a[1],n) * pow(modInv(c2,n),a[2]*-1,n)) % n\n\n    return m\n\nprint(common_modulus_attack([c,C], [e,E], n))\n\n\n\u69d8\u3005\u306a\u30c4\u30fc\u30eb\u306e\u7d39\u4ecb\u3001\u4f7f\u3044\u65b9\u3092\u6559\u3048\u3066\u304f\u308c\u305f\u30da\u30fc\u30b8\nCTF\u306b\u7528\u610f\u3059\u308b\u30c4\u30fc\u30eb\n## \u306f\u3058\u3081\u306b\n\n\u3053\u3053\u306b\u8272\u3005\u306a\u30e1\u30e2\u3092\u6b8b\u3059\n\u672c\u5f53\u306b\u81ea\u5206\u7528\u306a\u306e\u3067\u4e71\u96d1\n\u6700\u8fd1\u59cb\u3081\u305f\u3070\u3063\u304b\u3060\u304b\u3089\u308f\u304b\u3093\u306a\u3044\u3053\u3068\u3057\u304b\u306a\u3044\n\n## \u5199\u771f\u306e\u30b3\u30e1\u30f3\u30c8\u3092\u898b\u308b\n\n```\n$ identify -verbose decrypted.png \n```\n```\nImage: decrypted.png\n  Format: PNG (Portable Network Graphics)\n  Mime type: image/png\n  Class: DirectClass\n\n\u301c\u301c\u301c\u301c\u301c\u301c\u7565\u301c\u301c\u301c\u301c\u301c\u301c\n\n  Properties:\n    Comment: This is \u30b3\u30e1\u30f3\u30c8\n\n\u301c\u301c\u301c\u301c\u301c\u301c\u7565\u301c\u301c\u301c\u301c\u301c\u301c\n\n```\n\n## TypeError: Unicode-objects must be encoded before hashing\n\nPython3\u7cfb\u3067\u3053\u3046\u306a\u308b\n\n```py3\nhash=hashlib.sha256(\"AAAAAAABBBBBBB\").hexdigest()\n```\n```py3tb\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: Unicode-objects must be encoded before hashing\n```\n\nPython3\u7cfb\u3067\u306f\u5909\u6570\u306b\u6587\u5b57\u5217\u3092\u4ee3\u5165\u3059\u308b\u969b\u306bUnicode\u578b\u306e\u3082\u306e\u304c\u5165\u308b\u304c\u3001hashlib\u3067\u306f\u3053\u308c\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u30a8\u30e9\u30fc\u306e\u8a00\u3046\u3068\u304a\u308aencode\u3057\u3066\u3084\u308b\n\n```py3\nhash=hashlib.sha256(\"AAAAAAABBBBBBB\".encode('utf-8')).hexdigest()\nprint(hash)\n```\n```\neec1fa5f1af83a56fe49b550ff052373581076fb4f1972f16f18760e23c11fbe\n```\n\n## AES\u306e\u30c7\u30b3\u30fc\u30c9 With Python\n\n```py3:decode_aes.py\nsecret_key = \"0123456789abcdef\"\niv = \"0123456789abcdef\"\naes = AES.new(secret_key, AES.MODE_CBC, iv)\n\ndecrypt_data = aes.decrypt(encrypt_data)\n```\n\nkey\u306f16, 24, 32\u306e\u3044\u305a\u308c\u304b\u306e\u30d0\u30a4\u30c8\u9577\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\n\n```py3tb\nValueError: AES key must be either 16, 24, or 32 bytes long\n```\n\n## uuencode\u3046\u307e\u304f\u3044\u304b\u306a\u304b\u3063\u305f\n\n\u30c7\u30b3\u30fc\u30c9\u304c\u3046\u307e\u304f\u3044\u304b\u306a\u304b\u3063\u305f\u304b\u3089\u3069\u3046\u3084\u308b\u304b\u308f\u304b\u3089\u306a\u304b\u3063\u305f\n\n```bash\n$ cat uue.txt | uuencode \nusage: uuencode [-m] [-o outfile] [infile] remotefile\n\n$ uuencode < uue.txt \nusage: uuencode [-m] [-o outfile] [infile] remotefile\n```\n\n\u7d50\u5c40\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067Python\u306euu\u3092\u3064\u304b\u3063\u305f\n\n```py3\nimport uu\nuu.decode(\"uue.txt\", \"dec.txt\")\n```\n\n### \u8ffd\u8a18(2016/11/11)\n\nPython2\u7cfb\u3060\u3068\u3053\u3046\u3067\u304d\u308b\n\n3\u306f\u7121\u7406\n\n```py\n>>> print \"test\".encode(\"uu\")\nbegin 666 <data>\n$=&5S=   \n \nend\n\n>>> print \"test\".encode(\"uu\").decode(\"uu\")\ntest\n\n```\n\n## \u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u7d50\u5408\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u60c5\u5831\u3092\u898b\u308b\n\nfile\u306f3\u7a2e\u985e\u306e\u30c6\u30b9\u30c8\u3092\u3084\u3063\u3066\u304f\u308c\u308b\u3051\u3069\u3001\u6700\u521d\u306b\u30c6\u30b9\u30c8\u304c\u6210\u529f\u3057\u305f\u6642\u70b9\u3067\u5b9f\u884c\u7d50\u679c\u3092\u51fa\u529b\u3057\u3066\u3057\u307e\u3046\u3002\n\n\u305d\u306e\u305f\u3081\u3001CTF\u3067\u3057\u3070\u3057\u3070\u898b\u3089\u308c\u308b\u3001\u8907\u6570\u306e\u5f62\u5f0f\u306e\u30d5\u30a1\u30a4\u30eb\u304c1\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u7d50\u5408\u3055\u308c\u3066\u308b\u3084\u3064\u306e\u60c5\u5831\u304c\u3046\u307e\u304f\u3064\u304b\u3081\u306a\u304b\u3063\u305f\u308a\u3059\u308b\u3002\n\n\u3088\u304f\u3057\u3089\u3093\u3051\u3069binwalk\u306f\u30d5\u30a1\u30a4\u30eb\u306e\u3069\u3053\u304b\u3089\u3069\u3046\u3044\u3046\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u304b\u3092\u51fa\u3057\u3066\u304f\u308c\u308b\u3002\n\n```bash\n$ binwalk test.png\n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n0             0x0             PNG image, 1024 x 32, 8-bit/color RGB, non-interlaced\n41            0x29            Zlib compressed data, default compression\n```\n\n\u3053\u3093\u306a\u611f\u3058\u306e\u62e1\u5f35\u5b50\u3092\u5909\u3048\u308b\u3068\u5225\u306e\u5f62\u5f0f\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u306a\u308b\u3068\u304b\u305d\u3046\u3044\u3046\u306e\u306f\u3053\u308c\u4f7f\u3063\u305f\u3089\u5224\u65ad\u3067\u304d\u308b\u3093\u3058\u3083\u306a\u3044\u304b\u306a\n\n```bash\n$ binwalk gazou.png\n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n0             0x0             PNG image, 640 x 480, 8-bit/color RGBA, non-interlaced\n41            0x29            Zlib compressed data, default compression\n95256         0x17418         Zip archive data, at least v2.0 to extract, compressed size: 93428, uncompressed size: 94601, name: share1.png\n188724        0x2E134         Zip archive data, at least v2.0 to extract, compressed size: 93663, uncompressed size: 94902, name: share2.png\n282539        0x44FAB         End of Zip archive\n```\n\n## pkcrack\n\n```bash\n$ pkcrack -C test.zip -c plaintext.txt -p plaintext.txt -P plaintext.zip -d target.zip\n```\n\n> \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u306e\u610f\u5473\u306f\n> -C \u6697\u53f7\u5316ZIP\u30d5\u30a1\u30a4\u30eb\u540d\n> -c \u6697\u53f7\u5316ZIP\u30d5\u30a1\u30a4\u30eb\u5185\u306b\u3042\u308b\u5e73\u6587\u304c\u5206\u304b\u3063\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u540d\n> -P \u5e73\u6587\u304c\u5206\u304b\u3063\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u306eZIP\u5727\u7e2e\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u540d\uff08\u6697\u53f7\u5316\u3055\u308c\u3066\u3044\u306a\u3044ZIP\uff09\n> -p \u5e73\u6587\u306e\u30d5\u30a1\u30a4\u30eb\n> -d \u51fa\u529b\u3059\u308bZIP\u30d5\u30a1\u30a4\u30eb\u540d\n\n-P\u306f\u5358\u7d14\u306b\u5e73\u6587\u306e\u30d5\u30a1\u30a4\u30eb\u3092`$ zip -0 [\u5e73\u6587]`\u3059\u308c\u3070\u3044\u3044 (?)\n~~\u3053\u3053\u3088\u304f\u308f\u304b\u3089\u3093\u306e\u3067\u3061\u3083\u3093\u3068\u8abf\u3079\u308b\u3053\u3068~~\n\u30b3\u30de\u30f3\u30c9\u306e\u30d8\u30eb\u30d7\u66f0\u304f\u3001-c\u3001-p\u3068\u4ed6\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\uff11\u3064\u4ee5\u4e0a\u5fc5\u8981\u3068\u3044\u3046\u3053\u3068\u3089\u3057\u3044\n\n```\nUsage: pkcrack -c <crypted_file> -p <plaintext_file> [other_options],\nwhere [other_options] may be one or more of\n -o <offset>\tfor an offset of the plaintext into the ciphertext,\n\t\t\t(may be negative)\n -C <c-ZIP>\twhere c-ZIP is a ZIP-archive containing <crypted_file>\n -P <p-ZIP>\twhere p-ZIP is a ZIP-archive containing <plaintext_file>\n -d <d-file>\twhere d-file is the name of the decrypted archive which\n\t\twill be created by this program if the correct keys are found\n\t\t(can only be used in conjunction with the -C option)\n -i\tswitch off case-insensitive filename matching in ZIP-archives\n -a\tabort keys searching after first success\n -n\tno progress indicator\n```\n\n\u6700\u521d\u306e\u3082\u3053\u308c\u3067\u3044\u3044\n\n```bash\n$ pkcrack -C test.zip -c plaintext.txt -p plaintext.txt -d target.zip\n```\n\n### Standard-lock-key.jpg\n\n![\u3053\u308c\u307e\u3058\u306a\u306e\uff1f](https://upload.wikimedia.org/wikipedia/commons/a/a2/Standard-lock-key.jpg)\n\n## apk\u304b\u3089\u8aad\u3081\u308bjava\u30d5\u30a1\u30a4\u30eb\u304c\u3067\u304d\u308b\u307e\u3067\n\n\u53c2\u8003: [apk\u30d5\u30a1\u30a4\u30eb\u304b\u3089java\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u898b\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u308b\u307e\u3067](http://qiita.com/le_skamba/items/04c0a0cfe420be862122)\n\n### \u5fc5\u8981\u7269\n\n- apktool (https://ibotpeaches.github.io/Apktool)\n- dex2jar (http://sourceforge.net/projects/dex2jar)\n- JD-GUI (http://jd.benow.ca/)\n\n### \u624b\u9806\n\n1. apk -> \u30ea\u30bd\u30fc\u30b9\n2. apk -> dex\n3. dex -> jar\n4. jar -> class\n5. class -> java\n\n#### apk -> \u30ea\u30bd\u30fc\u30b9\n\n```bash\n$ apktool d target.apk\n```\n\n\u30ea\u30bd\u30fc\u30b9\u304c\u3044\u3089\u306a\u3044\u306a\u3089\u3053\u306e\u30b9\u30c6\u30c3\u30d7\u306f\u3044\u3089\u306a\u3044\n\n#### apk -> dex\n\n```bash\n$ unzip target.apk\n```\n\u3067\u3066\u304f\u308bclasses.dex\u304c\u305d\u308c\n\n#### dex -> jar\n\n```bash\n$ sh dex2jar-2.0/d2j-dex2jar.sh target.apk\n```\n\n#### jar -> class\n\n```bash\n$ unzip \u3055\u3063\u304d\u3067\u304d\u305f.jar\n```\n\n#### class -> java\n\nJD-GUI\u3060\u3068\u304bJD-Eclipse\u3060\u3068\u304b\u597d\u304d\u306a\u65b9\u6cd5\u3067\u898b\u308c\u3070\u3044\u3044\n\n### apk2dex\n\n[apk2jar.rb\n](https://gist.github.com/oa414/5466586)\n\n\u5fc5\u8981\u7269\u3092\u305d\u308d\u3048\u305f\u3089\u3044\u3044\u611f\u3058\u306b\u81ea\u52d5\u3067\u3084\u3063\u3066\u304f\u308c\u308b\u3084\u3064?\n\n## RSA\u306b\u5411\u3051\u305f\u653b\u6483\u65b9\u6cd5\n\n[\u5168\u3066](http://elliptic-shiho.hatenablog.com/entry/2015/11/12/182219)\n\n### Common Moduls Attack\n\n[Common Modulus Attack](http://elliptic-shiho.hatenablog.com/entry/2015/12/14/043745)\n\n\u30b3\u30fc\u30c9 [GOTO Laboratory](https://www.goto.info.waseda.ac.jp/~kiire/common.php)\u69d8\u306e\u30b3\u30fc\u30c9\u3092Python3\u5411\u3051\u306b\u4fee\u6b63\n\n```py3\ndef gcd(a,b):\n    while b != 0:\n        a,b = b, a % b\n    return a\n\n# Extended Greatest Common Divisor\ndef egcd(a, b):\n    if (a == 0):\n        return [b, 0, 1]\n    else:\n        g, y, x = egcd(b % a, a)\n        return [g, x - (b // a) * y, y]\n\n# Modular multiplicative inverse\ndef modInv(a, m):\n    g, x, y = egcd(a, m)\n    if (g != 1):\n        raise Exception(\"[-]No modular multiplicative inverse of %d under modulus %d\" % (a, m))\n    else:\n        return x % m\n\ndef common_modulus_attack(c, e, n):\n    # c = [c1,c2,c3, ... ,cn]\n    # e = [e1,e2,e3, ... ,en]\n    assert len(c) > 1\n    assert len(e) > 1\n    assert len(c) == len(e)\n\n    for i,e_a in enumerate(e):\n        for j,e_b in enumerate(e[i:]):\n            if gcd(e_a,e_b) == 1:\n                break\n        else:\n            continue\n        break\n\n    a = egcd(e_a,e_b)\n    c1 = c[i]\n    c2 = c[j]\n\n    if a[1] < 0:\n        m = (pow(modInv(c1,n),a[1]*-1,n) * pow(c2,a[2],n)) % n\n    elif a[2] < 0:\n        m = (pow(c1,a[1],n) * pow(modInv(c2,n),a[2]*-1,n)) % n\n\n    return m\n\nprint(common_modulus_attack([c,C], [e,E], n))\n```\n\n## \u69d8\u3005\u306a\u30c4\u30fc\u30eb\u306e\u7d39\u4ecb\u3001\u4f7f\u3044\u65b9\u3092\u6559\u3048\u3066\u304f\u308c\u305f\u30da\u30fc\u30b8\n\n[CTF\u306b\u7528\u610f\u3059\u308b\u30c4\u30fc\u30eb](https://wiki.mma.club.uec.ac.jp/CTF/Toolkit/)\n", "tags": ["Python", "python3", "CTF"]}