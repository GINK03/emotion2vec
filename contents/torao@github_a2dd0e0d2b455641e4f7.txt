{"context": "exponential backoff \u306f\u30b7\u30b9\u30c6\u30e0\u304c\u8a31\u5bb9\u53ef\u80fd\u306a\u901f\u5ea6\u3092\u898b\u3064\u3051\u308b\u305f\u3081\u306b\u5404\u51e6\u7406\u306e\u5b9f\u884c\u901f\u5ea6\u3092\u9045\u5ef6\u3055\u305b\u308b\u305f\u3081\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u3002\u7c21\u5358\u306b\u8a00\u3048\u3070\u6700\u9069\u306a\u30ea\u30c8\u30e9\u30a4 \u2500 \u4f8b\u3048\u3070\u901a\u4fe1\u304c\u5207\u65ad\u3055\u308c\u305f\u6642\u306b\u81ea\u52d5\u3067\u518d\u63a5\u7d9a\u3059\u308b\u307e\u3067\u306e\u9045\u5ef6\u6642\u9593\u3092\u8a08\u7b97\u3059\u308b\u65b9\u6cd5\u306e\u3053\u3068\u3002exponential backoff \u306f\u9023\u7d9a\u5931\u6557\u56de\u6570\u3092 $n$ \u3068\u3057\u305f\u6642\u306b $0$ \u304b\u3089 $x^{n-1}$ \u307e\u3067\u306e\u9593\u306e\u4e71\u6570\u3092\u4f7f\u7528\u3059\u308b\u3002\n\u3088\u304f\u4f7f\u308f\u308c\u3066\u3044\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f $2$ \u306e\u3079\u304d\u4e57\u3067\u8a08\u7b97\u3059\u308b binary exponential backoff \u3068\u3044\u3046\u3082\u306e\u3002\n$t = a \\times 2^{n-1}$\n$t$, $a$ \u3092\u79d2\u3068\u3057\u305f\u5834\u5408\u30011\u56de\u76ee\u306e\u30ea\u30c8\u30e9\u30a4\u306f $0\uff5ea$[sec]\u30012\u56de\u76ee\u306e\u30ea\u30c8\u30e9\u30a4\u306f $0\uff5e2a$[sec]\u30013\u56de\u76ee\u306e\u30ea\u30c8\u30e9\u30a4\u306f $0\uff5e4a$[sec]\u3001... \u306e\u9593\u306e\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u3093\u3060\u6642\u9593\u3092\u304a\u304f\u3002\n\u305f\u3060\u3053\u306e\u5f0f\u3060\u3051\u3067\u306f $t$ \u304c\u3059\u3050\u306b\u81a8\u5927\u306a\u5024\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3053\u3068\u304c\u5bb9\u6613\u306b\u60f3\u50cf\u304c\u3064\u304f\u3060\u308d\u3046\u3002\u5024\u304c\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3057\u305f\u308a\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304c\u5fa9\u65e7\u3057\u305f\u306b\u3082\u95a2\u308f\u3089\u305a\u30ea\u30c8\u30e9\u30a4\u304c\u6570\u30f6\u6708\u5f8c\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u3066\u306f\u81ea\u52d5\u5fa9\u65e7\u3092\u5b9f\u88c5\u3059\u308b\u610f\u5473\u304c\u306a\u3044\u306e\u3067 $n$ \u306b\u4e0a\u9650\u3092\u4e0e\u3048\u3066\u9045\u5ef6\u6642\u9593\u304c\u3042\u308b\u4e00\u5b9a\u5024\u4ee5\u4e0a\u3068\u306a\u3089\u306a\u3044\u6761\u4ef6\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u3000\n$n' = \\min(n, N)$\n$t = a \\times 2^{n'-1}$\n$T = a \\times 2^{N-1}$\n\u3053\u308c\u3092 truncated binary exponential backoff \u3068\u547c\u3073\u3001\u307e\u3041\u3053\u3053\u3089\u3078\u3093\u304c\u5b9f\u7528\u7684\u306a\u5b9f\u88c5\u65b9\u91dd\u3067\u3059\u3002\u4e0a\u9650 $N$ \u3068\u6700\u5927\u9045\u5ef6\u6642\u9593 $T$ \u304c\u6c7a\u307e\u308c\u3070 $a$ \u3092\u6c42\u3081\u308b\u306e\u306f\u7c21\u5358\u3002\n$a = \\frac{T}{2^{N-1}}$\n\u4f8b\u3048\u3070\u300c10\u56de\u9023\u7d9a\u3067\u5931\u6557\u3057\u305f\u3089\u4e00\u6642\u7684\u30fb\u77ac\u9593\u7684\u306a\u554f\u984c\u3067\u306f\u306a\u3044\u305f\u3081\u305d\u308c\u4ee5\u4e0a\u306f\u9045\u5ef6\u3092\u5897\u52a0\u3055\u305b\u306a\u3044\u300d\u300c\u5fa9\u65e7\u5f8c\u306f10\u79d2\u4ee5\u5185\u306b\u518d\u63a5\u7d9a\u3092\u5b9f\u884c\u3059\u308b\u300d\u3068\u8981\u4ef6\u8a2d\u5b9a\u3059\u308b\u306e\u3067\u3042\u308c\u3070 $N=10$, $T=10$ \u304b\u3089 $a = 0.0195$[sec] \u3067\u5b9f\u88c5\u3059\u308c\u3070\u826f\u3044\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\nScala \u3067\u3059\u3002\u51e6\u7406\u3092\u30d6\u30ed\u30c3\u30af\u3057\u3066\u3082\u5168\u4f53\u306b\u5f71\u97ff\u304c\u51fa\u306a\u3044 Single Thread \u30a2\u30d7\u30ea\u3067\u3042\u308c\u3070\u5358\u7d14\u306b\u30eb\u30fc\u30d7\u3084\u518d\u5e30\u3068  sleep() \u3092\u4f7f\u7528\u3057\u3066\u518d\u8a66\u884c\u3092\u5b9f\u88c5\u3059\u308c\u3070\u3088\u3044\u3002\u3053\u3053\u3067\u30b7\u30d5\u30c8\u6f14\u7b97\u5b50\u304c\u884c\u3063\u3066\u3044\u308b 1 << (n-1) \u306f $2^{n-1}$ \u3068\u7b49\u4fa1\u3060\u304c Int \u5e45\u306e\u5236\u7d04\u306e\u305f\u3081 n=32 \u3092\u8d85\u3048\u308b\u5834\u5408\u306f Long \u306b\u3059\u308b\u304b math.pow(2, n-1) \u306b\u5909\u66f4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\ndef retry[T](n:Int = 10, t:Long = 10000)(doSomething: =>T):T = {\n  val a = t.toDouble / (1 << (n-1))\n  @scala.annotation.tailrec\n  def _retry(error:Int):T = try {\n    doSomething\n  } catch {\n    case ex:Throwable => \n      val e = math.min(error+1, n)\n      val interval = (a * (1 << (e-1)) * math.random).toInt\n      println(f\"$e%d: $interval%,d / ${(a * (1 << (e-1))).toInt}%,d\")\n      Thread.sleep(interval)\n      _retry(e)\n  }\n  _retry(0)\n}\n\n// 13\u56de\u76ee\u306b\u6210\u529f\u3059\u308b\u51e6\u7406\u3092\u30ea\u30c8\u30e9\u30a4\u3059\u308b\u307e\u3067\u5b9f\u884c\u3059\u308b\nvar x:Int = 0\nretry(){\n  x += 1\n  if(x==13) \"hello\" else throw new Exception()\n}\n\n\u30b5\u30fc\u30d0\u30b5\u30a4\u30c9\u306a\u3069\u591a\u304f\u306e\u51e6\u7406\u304c\u8a08\u7b97\u30ea\u30bd\u30fc\u30b9\u3092\u5171\u6709\u3057\u3066\u3044\u308b\u74b0\u5883\u3067\u306f\u975e\u540c\u671f\u3067\u5b9f\u88c5\u3057\u305f\u65b9\u304c\u826f\u3044\u3067\u3059\u306d\u3001\u3068\u3044\u3046\u3053\u3068\u3067 Timer \u3068 Future \u3092\u4f7f\u3063\u305f\u30b5\u30f3\u30d7\u30eb\u3002timer \u30b9\u30ec\u30c3\u30c9\u3092\u4e00\u3064\u306e\u51e6\u7406\u3067\u5360\u6709\u3059\u308b\u3068\u4ed6\u306e\u51e6\u7406\u3092\u5dfb\u304d\u6dfb\u3048\u306b\u3059\u308b\u306e\u3067\u5b9f\u884c\u30b9\u30ec\u30c3\u30c9\u3092\u8d77\u52d5\u3059\u308b\u306e\u307f\u306b\u7559\u3081\u3066\u304a\u308a\u307e\u3059\u3002\nimport java.util.{Timer,TimerTask}\nimport scala.concurrent.{ExecutionContext,Future,Promise}\nimport scala.util.Try\n\nval timer = new Timer(true)\n\ndef retry[T](n:Int = 10, t:Long = 10000)(doSomething: =>T)(implicit _ctx:ExecutionContext):Future[T] = {\n  val a = t.toDouble / (1 << (n-1))\n  val promise = Promise[T]()\n  def _retry(error:Int):Unit = Future{\n    try {\n      promise.success(doSomething)\n    }catch {\n      case ex:Throwable => \n        val e = math.min(error+1, n)\n        val interval = (a * (1 << (e-1)) * math.random).toInt\n        println(f\"$e%d: $interval%,d / ${(a * (1 << (e-1))).toInt}%,d\")\n        timer.schedule(new TimerTask(){\n          def run() = _retry(e)\n        }, interval)\n    }\n  }\n  _retry(0)\n  promise.future\n}\n\n// 13\u56de\u76ee\u306b\u6210\u529f\u3059\u308b\u51e6\u7406\u3092\u30ea\u30c8\u30e9\u30a4\u3059\u308b\u307e\u3067\u5b9f\u884c\u3059\u308b\nimport scala.concurrent.ExecutionContext.Implicits.global\nvar x:Int = 0\nretry(){\n  x += 1\n  if(x==13) \"hello\" else throw new Exception()\n}.onSuccess{ case msg => println(msg) }\n\n\u5b9f\u884c\u3059\u308b\u3068\u60f3\u5b9a\u901a\u308a\u306b\u3053\u3093\u306a\u3082\u306e\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n1: 13 / 19\n2: 19 / 39\n3: 25 / 78\n4: 35 / 156\n5: 50 / 312\n6: 216 / 625\n7: 564 / 1,250\n8: 635 / 2,500\n9: 4,056 / 5,000\n10: 7,238 / 10,000\n10: 9,815 / 10,000\n10: 6,159 / 10,000\nhello\n\n**exponential backoff** \u306f\u30b7\u30b9\u30c6\u30e0\u304c\u8a31\u5bb9\u53ef\u80fd\u306a\u901f\u5ea6\u3092\u898b\u3064\u3051\u308b\u305f\u3081\u306b\u5404\u51e6\u7406\u306e\u5b9f\u884c\u901f\u5ea6\u3092\u9045\u5ef6\u3055\u305b\u308b\u305f\u3081\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u3002\u7c21\u5358\u306b\u8a00\u3048\u3070\u6700\u9069\u306a\u30ea\u30c8\u30e9\u30a4 \u2500 \u4f8b\u3048\u3070\u901a\u4fe1\u304c\u5207\u65ad\u3055\u308c\u305f\u6642\u306b\u81ea\u52d5\u3067\u518d\u63a5\u7d9a\u3059\u308b\u307e\u3067\u306e\u9045\u5ef6\u6642\u9593\u3092\u8a08\u7b97\u3059\u308b\u65b9\u6cd5\u306e\u3053\u3068\u3002exponential backoff \u306f\u9023\u7d9a\u5931\u6557\u56de\u6570\u3092 $n$ \u3068\u3057\u305f\u6642\u306b $0$ \u304b\u3089 $x^{n-1}$ \u307e\u3067\u306e\u9593\u306e\u4e71\u6570\u3092\u4f7f\u7528\u3059\u308b\u3002\n\n\u3088\u304f\u4f7f\u308f\u308c\u3066\u3044\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f $2$ \u306e\u3079\u304d\u4e57\u3067\u8a08\u7b97\u3059\u308b *binary exponential backoff* \u3068\u3044\u3046\u3082\u306e\u3002\n\n$t = a \\times 2^{n-1}$\n\n$t$, $a$ \u3092\u79d2\u3068\u3057\u305f\u5834\u5408\u30011\u56de\u76ee\u306e\u30ea\u30c8\u30e9\u30a4\u306f $0\uff5ea$[sec]\u30012\u56de\u76ee\u306e\u30ea\u30c8\u30e9\u30a4\u306f $0\uff5e2a$[sec]\u30013\u56de\u76ee\u306e\u30ea\u30c8\u30e9\u30a4\u306f $0\uff5e4a$[sec]\u3001... \u306e\u9593\u306e\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u3093\u3060\u6642\u9593\u3092\u304a\u304f\u3002\n\n\u305f\u3060\u3053\u306e\u5f0f\u3060\u3051\u3067\u306f $t$ \u304c\u3059\u3050\u306b\u81a8\u5927\u306a\u5024\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3053\u3068\u304c\u5bb9\u6613\u306b\u60f3\u50cf\u304c\u3064\u304f\u3060\u308d\u3046\u3002\u5024\u304c\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3057\u305f\u308a\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304c\u5fa9\u65e7\u3057\u305f\u306b\u3082\u95a2\u308f\u3089\u305a\u30ea\u30c8\u30e9\u30a4\u304c\u6570\u30f6\u6708\u5f8c\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u3066\u306f\u81ea\u52d5\u5fa9\u65e7\u3092\u5b9f\u88c5\u3059\u308b\u610f\u5473\u304c\u306a\u3044\u306e\u3067 $n$ \u306b\u4e0a\u9650\u3092\u4e0e\u3048\u3066\u9045\u5ef6\u6642\u9593\u304c\u3042\u308b\u4e00\u5b9a\u5024\u4ee5\u4e0a\u3068\u306a\u3089\u306a\u3044\u6761\u4ef6\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u3000\n\n$n' = \\min(n, N)$\n$t = a \\times 2^{n'-1}$\n$T = a \\times 2^{N-1}$\n\n\u3053\u308c\u3092 *truncated binary exponential backoff* \u3068\u547c\u3073\u3001\u307e\u3041\u3053\u3053\u3089\u3078\u3093\u304c\u5b9f\u7528\u7684\u306a\u5b9f\u88c5\u65b9\u91dd\u3067\u3059\u3002\u4e0a\u9650 $N$ \u3068\u6700\u5927\u9045\u5ef6\u6642\u9593 $T$ \u304c\u6c7a\u307e\u308c\u3070 $a$ \u3092\u6c42\u3081\u308b\u306e\u306f\u7c21\u5358\u3002\n\n$a = \\frac{T}{2^{N-1}}$\n\n\u4f8b\u3048\u3070\u300c10\u56de\u9023\u7d9a\u3067\u5931\u6557\u3057\u305f\u3089\u4e00\u6642\u7684\u30fb\u77ac\u9593\u7684\u306a\u554f\u984c\u3067\u306f\u306a\u3044\u305f\u3081\u305d\u308c\u4ee5\u4e0a\u306f\u9045\u5ef6\u3092\u5897\u52a0\u3055\u305b\u306a\u3044\u300d\u300c\u5fa9\u65e7\u5f8c\u306f10\u79d2\u4ee5\u5185\u306b\u518d\u63a5\u7d9a\u3092\u5b9f\u884c\u3059\u308b\u300d\u3068\u8981\u4ef6\u8a2d\u5b9a\u3059\u308b\u306e\u3067\u3042\u308c\u3070 $N=10$, $T=10$ \u304b\u3089 $a = 0.0195$[sec] \u3067\u5b9f\u88c5\u3059\u308c\u3070\u826f\u3044\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\n## \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\nScala \u3067\u3059\u3002\u51e6\u7406\u3092\u30d6\u30ed\u30c3\u30af\u3057\u3066\u3082\u5168\u4f53\u306b\u5f71\u97ff\u304c\u51fa\u306a\u3044 Single Thread \u30a2\u30d7\u30ea\u3067\u3042\u308c\u3070\u5358\u7d14\u306b\u30eb\u30fc\u30d7\u3084\u518d\u5e30\u3068  `sleep()` \u3092\u4f7f\u7528\u3057\u3066\u518d\u8a66\u884c\u3092\u5b9f\u88c5\u3059\u308c\u3070\u3088\u3044\u3002\u3053\u3053\u3067\u30b7\u30d5\u30c8\u6f14\u7b97\u5b50\u304c\u884c\u3063\u3066\u3044\u308b `1 << (n-1)` \u306f $2^{n-1}$ \u3068\u7b49\u4fa1\u3060\u304c `Int` \u5e45\u306e\u5236\u7d04\u306e\u305f\u3081 `n=32` \u3092\u8d85\u3048\u308b\u5834\u5408\u306f `Long` \u306b\u3059\u308b\u304b `math.pow(2, n-1)` \u306b\u5909\u66f4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n```scala\ndef retry[T](n:Int = 10, t:Long = 10000)(doSomething: =>T):T = {\n  val a = t.toDouble / (1 << (n-1))\n  @scala.annotation.tailrec\n  def _retry(error:Int):T = try {\n    doSomething\n  } catch {\n    case ex:Throwable => \n      val e = math.min(error+1, n)\n      val interval = (a * (1 << (e-1)) * math.random).toInt\n      println(f\"$e%d: $interval%,d / ${(a * (1 << (e-1))).toInt}%,d\")\n      Thread.sleep(interval)\n      _retry(e)\n  }\n  _retry(0)\n}\n\n// 13\u56de\u76ee\u306b\u6210\u529f\u3059\u308b\u51e6\u7406\u3092\u30ea\u30c8\u30e9\u30a4\u3059\u308b\u307e\u3067\u5b9f\u884c\u3059\u308b\nvar x:Int = 0\nretry(){\n  x += 1\n  if(x==13) \"hello\" else throw new Exception()\n}\n```\n\n\u30b5\u30fc\u30d0\u30b5\u30a4\u30c9\u306a\u3069\u591a\u304f\u306e\u51e6\u7406\u304c\u8a08\u7b97\u30ea\u30bd\u30fc\u30b9\u3092\u5171\u6709\u3057\u3066\u3044\u308b\u74b0\u5883\u3067\u306f\u975e\u540c\u671f\u3067\u5b9f\u88c5\u3057\u305f\u65b9\u304c\u826f\u3044\u3067\u3059\u306d\u3001\u3068\u3044\u3046\u3053\u3068\u3067 `Timer` \u3068 `Future` \u3092\u4f7f\u3063\u305f\u30b5\u30f3\u30d7\u30eb\u3002`timer` \u30b9\u30ec\u30c3\u30c9\u3092\u4e00\u3064\u306e\u51e6\u7406\u3067\u5360\u6709\u3059\u308b\u3068\u4ed6\u306e\u51e6\u7406\u3092\u5dfb\u304d\u6dfb\u3048\u306b\u3059\u308b\u306e\u3067\u5b9f\u884c\u30b9\u30ec\u30c3\u30c9\u3092\u8d77\u52d5\u3059\u308b\u306e\u307f\u306b\u7559\u3081\u3066\u304a\u308a\u307e\u3059\u3002\n\n```scala\nimport java.util.{Timer,TimerTask}\nimport scala.concurrent.{ExecutionContext,Future,Promise}\nimport scala.util.Try\n\nval timer = new Timer(true)\n\ndef retry[T](n:Int = 10, t:Long = 10000)(doSomething: =>T)(implicit _ctx:ExecutionContext):Future[T] = {\n  val a = t.toDouble / (1 << (n-1))\n  val promise = Promise[T]()\n  def _retry(error:Int):Unit = Future{\n    try {\n      promise.success(doSomething)\n    }catch {\n      case ex:Throwable => \n        val e = math.min(error+1, n)\n        val interval = (a * (1 << (e-1)) * math.random).toInt\n        println(f\"$e%d: $interval%,d / ${(a * (1 << (e-1))).toInt}%,d\")\n        timer.schedule(new TimerTask(){\n          def run() = _retry(e)\n        }, interval)\n    }\n  }\n  _retry(0)\n  promise.future\n}\n\n// 13\u56de\u76ee\u306b\u6210\u529f\u3059\u308b\u51e6\u7406\u3092\u30ea\u30c8\u30e9\u30a4\u3059\u308b\u307e\u3067\u5b9f\u884c\u3059\u308b\nimport scala.concurrent.ExecutionContext.Implicits.global\nvar x:Int = 0\nretry(){\n  x += 1\n  if(x==13) \"hello\" else throw new Exception()\n}.onSuccess{ case msg => println(msg) }\n```\n\n\u5b9f\u884c\u3059\u308b\u3068\u60f3\u5b9a\u901a\u308a\u306b\u3053\u3093\u306a\u3082\u306e\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n```\n1: 13 / 19\n2: 19 / 39\n3: 25 / 78\n4: 35 / 156\n5: 50 / 312\n6: 216 / 625\n7: 564 / 1,250\n8: 635 / 2,500\n9: 4,056 / 5,000\n10: 7,238 / 10,000\n10: 9,815 / 10,000\n10: 6,159 / 10,000\nhello\n```\n", "tags": ["\u8a2d\u8a08", "Scala", "DistributedSystems", "Network"]}