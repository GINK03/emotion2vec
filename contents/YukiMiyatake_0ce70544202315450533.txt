{"context": "\n\n\u306f\u3058\u3081\u306b\nboost.Asio\u3067\u306f\u3001\u975e\u540c\u671f\u51e6\u7406\u306e\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u51e6\u7406\u3092\u5f53\u7136\u884c\u3046\u3053\u3068\u304c\u51fa\u6765\u308b\u304c\n\u4e00\u822c\u7684\u306a\u30bd\u30b1\u30c3\u30c8\u306e\u3088\u3046\u306a\u3001\u95a2\u6570\u306b\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u6642\u9593\u3092\u8a2d\u5b9a\u3059\u308b\u3088\u3046\u306a\u7c21\u6613\u306a\u65b9\u6cd5\u3067\u306f\u306a\u3044\n\u975e\u540c\u671f\u51e6\u7406\u3068\u306f\u5225\u306b\u3001\u30bf\u30a4\u30de\u30fcWait\u3092\u975e\u540c\u671f\u3067\u66f8\u304d\u3001\u975e\u540c\u671f\u51e6\u7406\u304c\u7d42\u4e86\u3059\u308c\u3070\u30bf\u30a4\u30de\u30fc\u3092\u30ad\u30e3\u30f3\u30bb\u30eb\u3057\n\u30bf\u30a4\u30de\u30fc\u304c\u5148\u306b\u6765\u308c\u3070 \u975e\u540c\u671f\u51e6\u7406\u3092\u30ad\u30e3\u30f3\u30bb\u30eb\u3057\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u51e6\u7406\u3092\u884c\u3046\n\u3068\u3044\u3046\u3000\u5197\u9577\u306a\u51e6\u7406\u304c\u5fc5\u8981\u3067\u3042\u308b\n\u305d\u308c\u3092\u3001\u3069\u306e\u3088\u3046\u306b\u30e9\u30c3\u30d7\u3059\u308c\u3070\u304d\u308c\u3044\u306b\u66f8\u3051\u308b\u306e\u304b\uff1f\u3068\u3044\u3046\u8a71\n\n\u307e\u305a\u306f\u30d9\u30bf\u306b\u66f8\u3044\u3066\u307f\u308b\n\nbeta\n// \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u8a2d\u5b9a\ndeadline_timer.expires_from_now( boost::posix_time::milliseconds(timeout_ms));\ndeadline_timer.async_wait(\n  [=](const boost::system::error_code &ec) {    // \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u30cf\u30f3\u30c9\u30e9\n    if (ec == boost::asio::error::operation_aborted) {\n      // \u30bf\u30a4\u30de\u30fc\u30ad\u30e3\u30f3\u30bb\u30eb\u6642 = Read\u6210\u529f\u6642\u306f\u3053\u3053\u3067\u306f\u4f55\u3082\u884c\u308f\u306a\u3044\n    }else{\n      // \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u767a\u751f\n      socket.cancel();\n      handle_timeout(ec); // \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u51e6\u7406\u3059\u308b\n    }\n});\n\nboost::asio::async_read(socket, response,\n  boost::asio::transfer_at_least(1),\n  [this, self](const boost::system::error_code& ec, std::size_t bytes_transferred) {  // async_read\u306e\u30cf\u30f3\u30c9\u30e9\n    // \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u524d\u306bRead\u51fa\u6765\u305f\u306e\u3067\u30bf\u30a4\u30de\u30fc\u3092\u30ad\u30e3\u30f3\u30bb\u30eb\u3059\u308b\n    deadline_timer.cancel();\n    // Read\u6210\u529f\u6642\u306e\u30cf\u30f3\u30c9\u30e9\n    handle_read(ec);\n});\n\n\n\n\u304a\u4e92\u3044\u306b\u30ad\u30e3\u30f3\u30bb\u30eb\u3092\u3057\u5408\u3046\u3002\u30ad\u30e3\u30f3\u30bb\u30eb\u3092\u5fd8\u308c\u308b\u3068\u305f\u3061\u307e\u3061\u30d0\u30b0\u308b\u306e\u3067\u3001\u4f55\u304b\u30e9\u30c3\u30d7\u3057\u305f\u3044\n\u5197\u9577\u3060\u3057\n\n\u30bf\u30a4\u30de\u30fc\u51e6\u7406\u3092\u30e9\u30c3\u30d7\u8a66\u307f\u308b\n\u30bf\u30a4\u30de\u30fcWait\u51e6\u7406\u3092Wrap\u3059\u308b\u3002\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u6642\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u767b\u9332\u3057\u3001\u305d\u3053\u306bSocket\u306e\u30ad\u30e3\u30f3\u30bb\u30eb\u3084\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u6642\u306e\u51e6\u7406\n\u975e\u540c\u671f\u547d\u4ee4\u306f\u305d\u306e\u307e\u307e\n\ndeadline1\n// \u30e9\u30a4\u30d6\u30e9\u30ea\n// \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u6642\u9593\u3001\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u6642\u306e\u30cf\u30f3\u30c9\u30e9\u3092\u767b\u9332\u3059\u308b\nvoid deadlineOperation(boost::asio::deadline_timer &timer,\n  const unsigned int timeout_ms,\n  std::function<void(const boost::system::error_code &)> handler_timeout) {\n\ntimer.expires_from_now(boost::posix_time::milliseconds(timeout_ms));\n// \u30bf\u30a4\u30de\u30fc\u8a2d\u5b9a\ntimer.async_wait(\n  [=](const boost::system::error_code &ec) {\n    if (ec != boost::asio::error::operation_aborted) {\n      handler_timeout(ec);\n    }\n  });\n}\n\n// \u5b9f\u969b\u306b\u4f7f\u3046\ndeadlineOperation(deadline_timer_, timeout_ms_\n  // \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u6642\u306e\u30cf\u30f3\u30c9\u30e9\u767b\u9332\n  , [this, self](const boost::system::error_code &ec) {\n    socket.cancel();\n    handler_timeout();\n  });\n\nboost::asio::async_read(socket, response,\n  boost::asio::transfer_at_least(1),\n  [this, self](const boost::system::error_code& ec, std::size_t bytes_transferred) {  // async_read\u306e\u30cf\u30f3\u30c9\u30e9\n    // \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u524d\u306bRead\u51fa\u6765\u305f\u306e\u3067\u30bf\u30a4\u30de\u30fc\u3092\u30ad\u30e3\u30f3\u30bb\u30eb\u3059\u308b\n    deadline_timer.cancel();\n    // Read\u6210\u529f\u6642\u306e\u30cf\u30f3\u30c9\u30e9\n    handle_read(ec);\n});\n\n\n\n\n\u975e\u540c\u671f\u95a2\u6570\u3082\u5f15\u6570\u306b\n\u975e\u540c\u671f\u95a2\u6570\u3082\u5f15\u6570\u306b\u3068\u308b\u304c\u3001\u9762\u5012\u306b\u306a\u308b\u3060\u3051\u3067\u30e1\u30ea\u30c3\u30c8\u5c11\u306a\u3044\n\ndeadline2\n  // \u30e9\u30a4\u30d6\u30e9\u30ea\n  // \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u6642\u9593\u3001\u975e\u540c\u671f\u95a2\u6570\u3001\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u6642\u306e\u30cf\u30f3\u30c9\u30e9\u3092\u767b\u9332\u3059\u308b\n  void deadlineOperation2(boost::asio::deadline_timer &timer,\n    const unsigned int timeout_ms,\n    std::function<void()> handler,\n    std::function<void(const boost::system::error_code &)> handler_timeout) {\n\n  timer.expires_from_now( boost::posix_time::milliseconds(timeout_ms));\n  timer.async_wait(\n    [=](const boost::system::error_code &ec) {\n      if (ec != boost::asio::error::operation_aborted) {\n        handler_timeout(ec);\u3000\u3000\u3000// \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3057\u305f\u3068\u304d\u306e\u30cf\u30f3\u30c9\u30e9\n      }\n    });\n\n  handler();\n}\n\n\ndeadlineOperation2(deadline_timer_, timeout_ms_\n  // \u975e\u540c\u671f\u95a2\u6570\u767b\u9332\n  , [this,self](){\n    boost::asio::async_read(socket_, response_,\n      boost::asio::transfer_at_least(1),\n      [this, self](const boost::system::error_code& ec, std::size_t bytes_transferred) {\n        deadline_timer_.cancel();\n    handle_read());\n      }\n    );\n  }\n  // \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u6642\u306e\u30cf\u30f3\u30c9\u30e9\u767b\u9332\n  , [this, self](const boost::system::error_code &ec) {\n    socket.cancel();\n    handler_timeout(ec);\n  });\n\n\n\n\n\u30bf\u30a4\u30de\u30fc\u3001\u30bd\u30b1\u30c3\u30c8\u306e\u30ad\u30e3\u30f3\u30bb\u30eb\u95a2\u6570\u3001\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u30cf\u30f3\u30c9\u30e9\u95a2\u6570\u3092\u30af\u30e9\u30b9\u5185\u306b\u6301\u3064\n\u5b9f\u969b\u306b\u4f7f\u3046\u3068\u304d\u306f\u3001\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u5024\u3084\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u51e6\u7406\u306f\u5171\u901a\u306b\u3059\u308b\u4e8b\u591a\u3044\u306e\u3067\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306e\u30e1\u30f3\u30d0\u306b\u6301\u305f\u305b\u3066\u307f\u308b\n\ndeadline3\n  // \u30e9\u30a4\u30d6\u30e9\u30ea\ntemplate<class T>\nvoid deadlineOperation3(T &t,\n  const unsigned int timeout_ms) {\n\n  t.deadline_timer_.expires_from_now( boost::posix_time::milliseconds(timeout_ms));\n  t.deadline_timer_.async_wait(\n    [=](const boost::system::error_code &ec) {\n      if (ec != boost::asio::error::operation_aborted) {\n        t.handle_timeout(ec);    // \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3057\u305f\u3068\u304d\u306e\u30cf\u30f3\u30c9\u30e9\n      }\n    });\n}\n\n\ndeadlineOperation3<ThisClass>(this, timeout_ms_);\n\nboost::asio::async_read(socket_, response_,\n    boost::asio::transfer_at_least(1),\n    [this, self](const boost::system::error_code& ec, std::size_t bytes_transferred) {\n      deadline_timer_.cancel();\n      handle_read_(ec);\n    });\n);\n\n\n\n\u3093\u30fc\u3000\u3069\u3046\u306a\u3093\u3060\u308d\u3046\uff1f\n\n\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u30af\u30e9\u30b9\u3092shared_ptr\u306b\u3057 destructor\u3067\u30bf\u30a4\u30de\u30fc\u30ad\u30e3\u30f3\u30bb\u30eb\u3059\u308b\n\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u30af\u30e9\u30b9\u3092shared_ptr\u3067\u4f5c\u6210\n\u975e\u540c\u671f\u95a2\u6570\u3067shared_ptr\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\n\u975e\u540c\u671f\u95a2\u6570\u629c\u3051\u305f\u6642\u306b\u30ad\u30e3\u30d7\u30c1\u30e3\u304c\u5916\u308c \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u30af\u30e9\u30b9\u306edestructor\u767a\u52d5\n\u81ea\u52d5\u7684\u306b\u30bf\u30a4\u30de\u30fc\u30ad\u30e3\u30f3\u30bb\u30eb\u3055\u308c\u308b\n\ndeadline3\n// \u30e9\u30a4\u30d6\u30e9\u30ea\nclass deadlineOperation3 /*: public std::enable_shared_from_this<deadlineOperation3>*/{\nprivate:\n  boost::asio::deadline_timer deadline_timer_;\npublic:\n  deadlineOperation3(boost::asio::io_service &io_service, unsigned int timeout_ms\n    , std::function<void(const boost::system::error_code &)> handle_timeout)\n    : deadline_timer_(io_service) {\n\n  deadline_timer_.expires_from_now( boost::posix_time::milliseconds(timeout_ms));\n\n  deadline_timer_.async_wait(\n    [=](const boost::system::error_code &ec) {\n      if (ec != boost::asio::error::operation_aborted) {\n    handle_timeout(ec);\n      }\n    });\n  };\n\n  virtual ~deadlineOperation3() {\n    // \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30bf\u30a4\u30de\u30fc\u30ad\u30e3\u30f3\u30bb\u30eb\u3059\u308b\n    deadline_timer_.cancel();\n  };\n};\n\n\n// \u4f7f\u3046\u5074\n  // shared_ptr\u3092\u4f7f\u3044 \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u30af\u30e9\u30b9\u751f\u6210\u3002\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u6642\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u767b\u9332\n  auto timer = std::make_shared<asioUtil::deadlineOperation3>(io_service_, 1000,\n    [this,self](const boost::system::error_code &ec) {\n      socket_.cancel();\n      handle_timeout();\n    });\n\n  boost::asio::async_read(socket_, response_,\n    boost::asio::transfer_at_least(1),\n    // timer\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u3002\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u629c\u3051\u308b\u3068destructer\u306b\u3088\u308a \u30bf\u30a4\u30de\u30fc\u304c\u30ad\u30e3\u30f3\u30bb\u30eb\u3055\u308c\u308b\u4ed5\u7d44\u307f\n    [this, self, timer](const boost::system::error_code& ec, std::size_t bytes_transferred) {\n      handle_read(ec);\n  });\n\n\n\n\u30bf\u30a4\u30de\u30fc\u306e\u30ad\u30e3\u30f3\u30bb\u30eb\u51e6\u7406\u3092\u96a0\u3059\u3053\u3068\u304c\u51fa\u6765\u305f\u304c\u3000\u5c11\u3057\u3084\u308a\u3059\u304e\u304b\uff1f\n\n\u6700\u5f8c\u306b\n\u3082\u3063\u3068\u3044\u3044\u65b9\u6cd5\u306a\u3044\u304b\u306a\uff1f\n\u975e\u540c\u671f\u95a2\u6570\u3092Wrap\u3057\u3066 \u30bf\u30a4\u30de\u30fc\u306e\u30ad\u30e3\u30f3\u30bb\u30eb\u3084\u3089\u3082\u884c\u3044\u305f\u304b\u3063\u305f\u3051\u3069\u6697\u9ed2\u30b3\u30fc\u30c9\u306b\u306a\u308a\u305d\u3046\u3060\u3057\n\u81ea\u5206\u306b\u305d\u3093\u306a\u529b\u306a\u3044\u306e\u3067\u65ad\u5ff5\n#\u306f\u3058\u3081\u306b\nboost.Asio\u3067\u306f\u3001\u975e\u540c\u671f\u51e6\u7406\u306e\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u51e6\u7406\u3092\u5f53\u7136\u884c\u3046\u3053\u3068\u304c\u51fa\u6765\u308b\u304c\n\u4e00\u822c\u7684\u306a\u30bd\u30b1\u30c3\u30c8\u306e\u3088\u3046\u306a\u3001\u95a2\u6570\u306b\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u6642\u9593\u3092\u8a2d\u5b9a\u3059\u308b\u3088\u3046\u306a\u7c21\u6613\u306a\u65b9\u6cd5\u3067\u306f\u306a\u3044\n\n\u975e\u540c\u671f\u51e6\u7406\u3068\u306f\u5225\u306b\u3001\u30bf\u30a4\u30de\u30fcWait\u3092\u975e\u540c\u671f\u3067\u66f8\u304d\u3001\u975e\u540c\u671f\u51e6\u7406\u304c\u7d42\u4e86\u3059\u308c\u3070\u30bf\u30a4\u30de\u30fc\u3092\u30ad\u30e3\u30f3\u30bb\u30eb\u3057\n\u30bf\u30a4\u30de\u30fc\u304c\u5148\u306b\u6765\u308c\u3070 \u975e\u540c\u671f\u51e6\u7406\u3092\u30ad\u30e3\u30f3\u30bb\u30eb\u3057\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u51e6\u7406\u3092\u884c\u3046\n\u3068\u3044\u3046\u3000\u5197\u9577\u306a\u51e6\u7406\u304c\u5fc5\u8981\u3067\u3042\u308b\n\n\u305d\u308c\u3092\u3001\u3069\u306e\u3088\u3046\u306b\u30e9\u30c3\u30d7\u3059\u308c\u3070\u304d\u308c\u3044\u306b\u66f8\u3051\u308b\u306e\u304b\uff1f\u3068\u3044\u3046\u8a71\n\n\n#\u307e\u305a\u306f\u30d9\u30bf\u306b\u66f8\u3044\u3066\u307f\u308b\n\n```cpp:beta\n// \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u8a2d\u5b9a\ndeadline_timer.expires_from_now( boost::posix_time::milliseconds(timeout_ms));\ndeadline_timer.async_wait(\n  [=](const boost::system::error_code &ec) {    // \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u30cf\u30f3\u30c9\u30e9\n    if (ec == boost::asio::error::operation_aborted) {\n      // \u30bf\u30a4\u30de\u30fc\u30ad\u30e3\u30f3\u30bb\u30eb\u6642 = Read\u6210\u529f\u6642\u306f\u3053\u3053\u3067\u306f\u4f55\u3082\u884c\u308f\u306a\u3044\n    }else{\n      // \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u767a\u751f\n      socket.cancel();\n      handle_timeout(ec); // \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u51e6\u7406\u3059\u308b\n    }\n});\n\nboost::asio::async_read(socket, response,\n  boost::asio::transfer_at_least(1),\n  [this, self](const boost::system::error_code& ec, std::size_t bytes_transferred) {  // async_read\u306e\u30cf\u30f3\u30c9\u30e9\n    // \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u524d\u306bRead\u51fa\u6765\u305f\u306e\u3067\u30bf\u30a4\u30de\u30fc\u3092\u30ad\u30e3\u30f3\u30bb\u30eb\u3059\u308b\n    deadline_timer.cancel();\n    // Read\u6210\u529f\u6642\u306e\u30cf\u30f3\u30c9\u30e9\n    handle_read(ec);\n});\n\n```\n\n\u304a\u4e92\u3044\u306b\u30ad\u30e3\u30f3\u30bb\u30eb\u3092\u3057\u5408\u3046\u3002\u30ad\u30e3\u30f3\u30bb\u30eb\u3092\u5fd8\u308c\u308b\u3068\u305f\u3061\u307e\u3061\u30d0\u30b0\u308b\u306e\u3067\u3001\u4f55\u304b\u30e9\u30c3\u30d7\u3057\u305f\u3044\n\u5197\u9577\u3060\u3057\n\n#\u30bf\u30a4\u30de\u30fc\u51e6\u7406\u3092\u30e9\u30c3\u30d7\u8a66\u307f\u308b\n\n\u30bf\u30a4\u30de\u30fcWait\u51e6\u7406\u3092Wrap\u3059\u308b\u3002\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u6642\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u767b\u9332\u3057\u3001\u305d\u3053\u306bSocket\u306e\u30ad\u30e3\u30f3\u30bb\u30eb\u3084\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u6642\u306e\u51e6\u7406\n\u975e\u540c\u671f\u547d\u4ee4\u306f\u305d\u306e\u307e\u307e\n\n```cpp:deadline1\n// \u30e9\u30a4\u30d6\u30e9\u30ea\n// \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u6642\u9593\u3001\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u6642\u306e\u30cf\u30f3\u30c9\u30e9\u3092\u767b\u9332\u3059\u308b\nvoid deadlineOperation(boost::asio::deadline_timer &timer,\n  const unsigned int timeout_ms,\n  std::function<void(const boost::system::error_code &)> handler_timeout) {\n\ntimer.expires_from_now(boost::posix_time::milliseconds(timeout_ms));\n// \u30bf\u30a4\u30de\u30fc\u8a2d\u5b9a\ntimer.async_wait(\n  [=](const boost::system::error_code &ec) {\n    if (ec != boost::asio::error::operation_aborted) {\n      handler_timeout(ec);\n    }\n  });\n}\n\n// \u5b9f\u969b\u306b\u4f7f\u3046\ndeadlineOperation(deadline_timer_, timeout_ms_\n  // \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u6642\u306e\u30cf\u30f3\u30c9\u30e9\u767b\u9332\n  , [this, self](const boost::system::error_code &ec) {\n    socket.cancel();\n    handler_timeout();\n  });\n\nboost::asio::async_read(socket, response,\n  boost::asio::transfer_at_least(1),\n  [this, self](const boost::system::error_code& ec, std::size_t bytes_transferred) {  // async_read\u306e\u30cf\u30f3\u30c9\u30e9\n    // \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u524d\u306bRead\u51fa\u6765\u305f\u306e\u3067\u30bf\u30a4\u30de\u30fc\u3092\u30ad\u30e3\u30f3\u30bb\u30eb\u3059\u308b\n    deadline_timer.cancel();\n    // Read\u6210\u529f\u6642\u306e\u30cf\u30f3\u30c9\u30e9\n    handle_read(ec);\n});\n\n```\n\n#\u975e\u540c\u671f\u95a2\u6570\u3082\u5f15\u6570\u306b\n\n\u975e\u540c\u671f\u95a2\u6570\u3082\u5f15\u6570\u306b\u3068\u308b\u304c\u3001\u9762\u5012\u306b\u306a\u308b\u3060\u3051\u3067\u30e1\u30ea\u30c3\u30c8\u5c11\u306a\u3044\n\n```cpp:deadline2\n  // \u30e9\u30a4\u30d6\u30e9\u30ea\n  // \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u6642\u9593\u3001\u975e\u540c\u671f\u95a2\u6570\u3001\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u6642\u306e\u30cf\u30f3\u30c9\u30e9\u3092\u767b\u9332\u3059\u308b\n  void deadlineOperation2(boost::asio::deadline_timer &timer,\n    const unsigned int timeout_ms,\n    std::function<void()> handler,\n    std::function<void(const boost::system::error_code &)> handler_timeout) {\n\n  timer.expires_from_now( boost::posix_time::milliseconds(timeout_ms));\n  timer.async_wait(\n    [=](const boost::system::error_code &ec) {\n      if (ec != boost::asio::error::operation_aborted) {\n        handler_timeout(ec);\u3000\u3000\u3000// \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3057\u305f\u3068\u304d\u306e\u30cf\u30f3\u30c9\u30e9\n      }\n    });\n\n  handler();\n}\n\n\ndeadlineOperation2(deadline_timer_, timeout_ms_\n  // \u975e\u540c\u671f\u95a2\u6570\u767b\u9332\n  , [this,self](){\n    boost::asio::async_read(socket_, response_,\n      boost::asio::transfer_at_least(1),\n      [this, self](const boost::system::error_code& ec, std::size_t bytes_transferred) {\n        deadline_timer_.cancel();\n\thandle_read());\n      }\n    );\n  }\n  // \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u6642\u306e\u30cf\u30f3\u30c9\u30e9\u767b\u9332\n  , [this, self](const boost::system::error_code &ec) {\n    socket.cancel();\n    handler_timeout(ec);\n  });\n\n```\n\n\n# \u30bf\u30a4\u30de\u30fc\u3001\u30bd\u30b1\u30c3\u30c8\u306e\u30ad\u30e3\u30f3\u30bb\u30eb\u95a2\u6570\u3001\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u30cf\u30f3\u30c9\u30e9\u95a2\u6570\u3092\u30af\u30e9\u30b9\u5185\u306b\u6301\u3064\n\n\u5b9f\u969b\u306b\u4f7f\u3046\u3068\u304d\u306f\u3001\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u5024\u3084\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u51e6\u7406\u306f\u5171\u901a\u306b\u3059\u308b\u4e8b\u591a\u3044\u306e\u3067\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306e\u30e1\u30f3\u30d0\u306b\u6301\u305f\u305b\u3066\u307f\u308b\n\n```cpp:deadline3\n  // \u30e9\u30a4\u30d6\u30e9\u30ea\ntemplate<class T>\nvoid deadlineOperation3(T &t,\n  const unsigned int timeout_ms) {\n\n  t.deadline_timer_.expires_from_now( boost::posix_time::milliseconds(timeout_ms));\n  t.deadline_timer_.async_wait(\n    [=](const boost::system::error_code &ec) {\n      if (ec != boost::asio::error::operation_aborted) {\n        t.handle_timeout(ec);    // \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3057\u305f\u3068\u304d\u306e\u30cf\u30f3\u30c9\u30e9\n      }\n    });\n}\n\n\ndeadlineOperation3<ThisClass>(this, timeout_ms_);\n\nboost::asio::async_read(socket_, response_,\n    boost::asio::transfer_at_least(1),\n    [this, self](const boost::system::error_code& ec, std::size_t bytes_transferred) {\n      deadline_timer_.cancel();\n      handle_read_(ec);\n    });\n);\n\n```\n\n\u3093\u30fc\u3000\u3069\u3046\u306a\u3093\u3060\u308d\u3046\uff1f\n\n\n#\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u30af\u30e9\u30b9\u3092shared_ptr\u306b\u3057 destructor\u3067\u30bf\u30a4\u30de\u30fc\u30ad\u30e3\u30f3\u30bb\u30eb\u3059\u308b\n\n\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u30af\u30e9\u30b9\u3092shared_ptr\u3067\u4f5c\u6210\n\u975e\u540c\u671f\u95a2\u6570\u3067shared_ptr\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\n\u975e\u540c\u671f\u95a2\u6570\u629c\u3051\u305f\u6642\u306b\u30ad\u30e3\u30d7\u30c1\u30e3\u304c\u5916\u308c \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u30af\u30e9\u30b9\u306edestructor\u767a\u52d5\n\u81ea\u52d5\u7684\u306b\u30bf\u30a4\u30de\u30fc\u30ad\u30e3\u30f3\u30bb\u30eb\u3055\u308c\u308b\n\n```cpp:deadline3\n// \u30e9\u30a4\u30d6\u30e9\u30ea\nclass deadlineOperation3 /*: public std::enable_shared_from_this<deadlineOperation3>*/{\nprivate:\n  boost::asio::deadline_timer deadline_timer_;\npublic:\n  deadlineOperation3(boost::asio::io_service &io_service, unsigned int timeout_ms\n    , std::function<void(const boost::system::error_code &)> handle_timeout)\n    : deadline_timer_(io_service) {\n\n  deadline_timer_.expires_from_now( boost::posix_time::milliseconds(timeout_ms));\n\n  deadline_timer_.async_wait(\n    [=](const boost::system::error_code &ec) {\n      if (ec != boost::asio::error::operation_aborted) {\n  \thandle_timeout(ec);\n      }\n    });\n  };\n\n  virtual ~deadlineOperation3() {\n    // \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30bf\u30a4\u30de\u30fc\u30ad\u30e3\u30f3\u30bb\u30eb\u3059\u308b\n    deadline_timer_.cancel();\n  };\n};\n\n\n// \u4f7f\u3046\u5074\n  // shared_ptr\u3092\u4f7f\u3044 \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u30af\u30e9\u30b9\u751f\u6210\u3002\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u6642\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u767b\u9332\n  auto timer = std::make_shared<asioUtil::deadlineOperation3>(io_service_, 1000,\n    [this,self](const boost::system::error_code &ec) {\n      socket_.cancel();\n      handle_timeout();\n    });\n\n  boost::asio::async_read(socket_, response_,\n    boost::asio::transfer_at_least(1),\n    // timer\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u3002\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u629c\u3051\u308b\u3068destructer\u306b\u3088\u308a \u30bf\u30a4\u30de\u30fc\u304c\u30ad\u30e3\u30f3\u30bb\u30eb\u3055\u308c\u308b\u4ed5\u7d44\u307f\n    [this, self, timer](const boost::system::error_code& ec, std::size_t bytes_transferred) {\n      handle_read(ec);\n  });\n\n```\n\n\u30bf\u30a4\u30de\u30fc\u306e\u30ad\u30e3\u30f3\u30bb\u30eb\u51e6\u7406\u3092\u96a0\u3059\u3053\u3068\u304c\u51fa\u6765\u305f\u304c\u3000\u5c11\u3057\u3084\u308a\u3059\u304e\u304b\uff1f\n\n\n#\u6700\u5f8c\u306b\n\u3082\u3063\u3068\u3044\u3044\u65b9\u6cd5\u306a\u3044\u304b\u306a\uff1f\n\u975e\u540c\u671f\u95a2\u6570\u3092Wrap\u3057\u3066 \u30bf\u30a4\u30de\u30fc\u306e\u30ad\u30e3\u30f3\u30bb\u30eb\u3084\u3089\u3082\u884c\u3044\u305f\u304b\u3063\u305f\u3051\u3069\u6697\u9ed2\u30b3\u30fc\u30c9\u306b\u306a\u308a\u305d\u3046\u3060\u3057\n\u81ea\u5206\u306b\u305d\u3093\u306a\u529b\u306a\u3044\u306e\u3067\u65ad\u5ff5\n", "tags": ["C++14", "boost.Asio"]}