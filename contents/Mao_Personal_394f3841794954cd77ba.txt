{"context": "\n\n\u306f\u3058\u3081\u306b\n\u3053\u3093\u306b\u3061\u306f\u3002\n\u3053\u306e\u8a18\u4e8b\u3067\u4f5c\u6210\u3057\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u3067\u3059\u3002\nhttps://github.com/maosec/collet/tree/9eeb418b7dd08be4f3d4f30fe0d137b7bdc494b5\n\u307e\u305f\u3001\u3053\u306e\u9023\u8f09\u3067\u4f5c\u6210\u3059\u308b Collet \u306f\u4ee5\u4e0b\u3067\u7ba1\u7406\u3057\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/maosec/collet\n\u3053\u306e\u8a18\u4e8b\u306f\n\n\u30bc\u30ed\u304b\u3089\u30a6\u30a7\u30d6\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u3057\u3066\u307f\u305f\u3044\n\u30a6\u30a7\u30d6\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\uff08\u4ee5\u4e0b\u3001\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\uff09\u306e\u5185\u90e8\u7684\u306a\u4ed5\u7d44\u307f\u306b\u8208\u5473\u304c\u3042\u308b\n\u65b0\u3057\u3044\u8a00\u8a9e\u3067\u3042\u308bKotlin\u3092\u4f7f\u3044\u305f\u3044\n\n\u3068\u8a00\u3046\u4eba\u3092\u5bfe\u8c61\u306b\u3001\u7c21\u6613\u30aa\u30ec\u30aa\u30ec\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u300cCollet\u300d\u3092\u5b9f\u88c5\u3057\u3066\u3044\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u4eca\u56de\u306f\u7b2c\u4e8c\u56de\u76ee\u3067\u3059\u3002\n\u524d\u56de\u4f5c\u6210\u3057\u305fHTTP\u30b5\u30fc\u30d0\u30fc\u3082\u3069\u304d\u306b\u3082\u3046\u5c11\u3057\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u3087\u3046\u3002\n\n\u304a\u3053\u3068\u308f\u308a\n\u3053\u306e\u8a18\u4e8b\u3067\u7d39\u4ecb\u3059\u308b\u5b9f\u88c5\u306f\u6700\u4f4e\u9650\u306e\u52d5\u4f5c\u3092\u3059\u308b\u7a0b\u5ea6\u306e\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\n\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30fc\u306a\u3069\u306f\u8003\u616e\u3057\u306a\u3044\u305f\u3081\u3001\u5b9f\u904b\u7528\u306a\u3069\u3067\u4f7f\u7528\u3059\u308b\u969b\u306f\u5341\u5206\u6ce8\u610f\u3057\u3066\u6539\u826f\u3057\u3066\u6539\u5584\u3057\u3066\u4f7f\u7528\u3059\u308b\u3088\u3046\u306b\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\uff08\u4f7f\u7528\u3059\u308b\u3068\u306f\u601d\u3048\u307e\u305b\u3093\u304c\uff09\n\n\u4f7f\u7528\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3068\u958b\u767a\u74b0\u5883\n\u4eca\u56de\u3082\u524d\u56de\u3068\u540c\u3058 Intelli J IDEA Community \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306f Kotlin \u3067\u3059\u3002\nWindows 10 \u306a\u3069\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u4eca\u56de\u306eHTTP\u30b5\u30fc\u30d0\u30fc\u3078\u306e\u6a5f\u80fd\u8ffd\u52a0\n\u4eca\u56de\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5909\u66f4\u3092\u52a0\u3048\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u5bfe\u5fdc\nGET / POST \u30ea\u30af\u30a8\u30b9\u30c8\u6642\u306b\u53d7\u3051\u53d6\u3063\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6587\u5b57\u5217\u3067\u8fd4\u305b\u308b\u3088\u3046\u306b\u3059\u308b\n\n\u3059\u307f\u307e\u305b\u3093\u304c\u3001\u307e\u3060\u4eca\u56de\u306e\u5b9f\u88c5\u3067\u3082\u307e\u3068\u3082\u306a\uff08\uff1f\uff09HTTP\u30b5\u30fc\u30d0\u30fc\u306f\u5b9f\u88c5\u3057\u306a\u3044\u3067\u3059\u3002\n\n\u5168\u4f53\u306e\u30af\u30e9\u30b9\u69cb\u6210\n\u524d\u56de\u3068\u4e00\u7dd2\u3067\u3059\u3002\n\n\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\n\nHttpServer.kt\n\u57fa\u672c\u7684\u306b\u306f\u524d\u56de\u3068\u5909\u308f\u308a\u307e\u305b\u3093\u304c\u3001\u3061\u3087\u3063\u3068\u3060\u3051\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8fd4\u5374\u3059\u308b\u90e8\u5206\u306b\u5909\u66f4\u304c\u3042\u308a\u307e\u3059\u3002\n\nHttpServer.kt\nimport java.io.IOException\nimport java.net.ServerSocket\nimport java.net.Socket\nimport java.net.SocketTimeoutException\nimport java.util.concurrent.Executors\n\n// \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\nfun main(args: Array<String>) {\n    HttpServer.start(9000) // \u30dd\u30fc\u30c89000\u3067\u30b5\u30fc\u30d0\u30fc\u3092\u52d5\u4f5c\u3055\u305b\u308b\n}\n\nobject HttpServer {\n\n    private val service = Executors.newCachedThreadPool()\n    private var alive = true\n\n    fun start(port: Int) {\n\n        // \u30b5\u30fc\u30d0\u30fc\u30bd\u30b1\u30c3\u30c8\uff08\u63a5\u7d9a\u3092\u5f85\u3064\uff09\n        val server = ServerSocket(port)\n        server.soTimeout = 5 * 1000 // \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u30925\u79d2\u306b\u8a2d\u5b9a\n\n        // \u7121\u9650\u30eb\u30fc\u30d7\u3057\u3066\u63a5\u7d9a\u3092\u5f85\u3064\n        while (alive) {\n\n            // \u63a5\u7d9a\u3055\u308c\u308b\n            val socket: Socket\n            try {\n                socket = server.accept()\n            } catch (e: SocketTimeoutException) {\n                continue // \u63a5\u7d9a\u3055\u308c\u306a\u3051\u308c\u3070\u3084\u308a\u76f4\u3059\n            }\n\n            // \u63a5\u7d9a\u3055\u308c\u305f\u3089\u305d\u308c\u4ee5\u964d\u306e\u51e6\u7406\u306f\u5225\u30b9\u30ec\u30c3\u30c9\u3067\u884c\u3046\n            this.service.execute {\n                try {\n                    // \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u30b5\u30fc\u30d0\u30fc\u3078\u9001\u4fe1\u3055\u308c\u305f\u5185\u5bb9\u3068\u3001\u30b5\u30fc\u30d0\u30fc\u304b\u3089\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3078\u306e\u9001\u4fe1\u5148\u3092\u53d6\u5f97\n                    val inputStream = socket.inputStream\n                    val outputStream = socket.outputStream\n\n                    // \u30b5\u30fc\u30d0\u30fc\u306b\u9001\u4fe1\u3055\u308c\u3066\u304d\u305f\u5185\u5bb9\u304b\u3089HTTP\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u751f\u6210\n                    val request = Request(inputStream)\n\n                    // \u8fd4\u5374\u3059\u308b\u30b3\u30f3\u30c6\u30f3\u30c4\u672c\u4f53\u3092\u9069\u5f53\u306b\u4f5c\u6210\u3059\u308b\n                    var string = \"\"\n                    request.params.forEach {\n                        val key = it.key\n                        it.value.forEach {\n                            string += \"$key=$it\\n\"\n                        }\n                    }\n\n                    // \u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u751f\u6210\u3057\u3066\u30b3\u30f3\u30c6\u30f3\u30c4\u30bf\u30a4\u30d7\u3092\u6307\u5b9a\u3057\u3066\u8fd4\u5374\u3059\u308b\n                    val response = Response(Status.OK, string.toByteArray())\n                    response.addHeader(\"Content-Type\", \"text/html\")\n                    response.send(outputStream)\n\n                } catch (e: IOException) {\n                    e.printStackTrace()\n                } finally {\n                    try {\n                        socket.close() // \u63a5\u7d9a\u30bd\u30b1\u30c3\u30c8\u3092\u30af\u30ed\u30fc\u30ba\u3059\u308b\n                    } catch (e: IOException) {\n                        e.printStackTrace()\n                    }\n                }\n            }\n        }\n    }\n\n    fun stop() {\n        alive = false\n    }\n}\n\n\n\nMethod.kt\n\u30e1\u30bd\u30c3\u30c9\u306e\u7a2e\u985e\u306b POST \u3092\u8ffd\u52a0\u3057\u305f\u3060\u3051\u3067\u3059\u3002\n\u51fa\u6765\u308b\u4eba\u306fHTTP/1.1\u306e\u5168\u3066\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u3068\u826f\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u306d\u3002\n\nMethod.kt\nenum class Method(val text: String) {\n    GET(\"GET\"),\n    POST(\"POST\"),\n}\n\n\n\nRequest.kt\n\u524d\u56de\u3068\u6bd4\u3079\u3066\u3051\u3063\u3053\u3046\u5909\u66f4\u304c\u3042\u308a\u307e\u3059\u3002\n\u307e\u305a\u306f\u5168\u4f53\u306e\u30bd\u30fc\u30b9\u3092\u8f09\u305b\u307e\u3059\u3002\n\u5f8c\u304b\u3089\u7d30\u304b\u3044\u90e8\u5206\u306e\u8aac\u660e\u3092\u3057\u307e\u3059\u3002\n\nRequest.kt\nimport java.io.InputStream\nimport java.net.URLDecoder\n\nclass Request(inputStream: InputStream) {\n\n    val method: Method\n    val path: String\n    val params: Map<String, Array<String>>\n    val messages: Map<String, String>\n    val body: ByteArray\n\n    init {\n        // HTTP\u30ea\u30af\u30a8\u30b9\u30c8\u884c\u3092\u89e3\u6790\n        // \u30e1\u30bd\u30c3\u30c9\u3092\u89e3\u6790\n        val line = Util.readLine(inputStream).split(\" \")\n        method = Method.valueOf(line.first().toUpperCase())\n\n        // URL\u3092\u53d6\u5f97\n        val url = URLDecoder.decode(line[1], \"UTF-8\").split(\"?\")\n        path = url.first()\n\n        // GET\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u89e3\u6790\n        val paramTemp = mutableMapOf<String, MutableList<String>>()\n        if (url.size > 1) {\n            url[1].split(\"&\").forEach {\n                val key = it.split(\"=\").first()\n                val value = it.split(\"=\").last()\n                val values = paramTemp[key]\n                if (values == null) {\n                    paramTemp.put(key, mutableListOf(value))\n                }\n                else {\n                    values.add(value)\n                    paramTemp.put(key, values)\n                }\n            }\n        }\n\n        // \u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u89e3\u6790\n        messages = readMessages(inputStream)\n\n        body = readBody(inputStream)\n        if (method == Method.POST) {\n            val s = String(body)\n            s.split(\"&\").forEach {\n                val key = it.split(\"=\").first()\n                val value = it.split(\"=\").last()\n                val values = paramTemp[key]\n                if (values == null) {\n                    paramTemp.put(key, mutableListOf(value))\n                }\n                else {\n                    values.add(value)\n                    paramTemp.put(key, values)\n                }\n            }\n        }\n\n        val p = mutableMapOf<String, Array<String>>()\n        paramTemp.forEach {\n            p.put(it.key, it.value.toTypedArray())\n        }\n        params = p\n    }\n\n    private fun readMessages(inputStream: InputStream): Map<String, String> {\n\n        val messages = mutableMapOf<String, String>()\n        var messageLine = Util.readLine(inputStream)\n        while (messageLine != null && !messageLine.isEmpty()) {\n            val tmp = messageLine.split(\":\".toRegex()).dropLastWhile(String::isEmpty).toTypedArray()\n            val key = tmp[0].trim { it <= ' ' }\n            val value = tmp[1].trim { it <= ' ' }\n            messages.put(key, value)\n            messageLine = Util.readLine(inputStream)\n        }\n\n        return messages\n    }\n\n    private fun readBody(inputStream: InputStream): ByteArray {\n\n        val contentLength = messages.getOrElse(\"Content-Length\") { \"0\" }.toInt()\n        if (contentLength <= 0) {\n            return \"\".toByteArray()\n        }\n\n        val buffer = ByteArray(contentLength)\n        inputStream.read(buffer)\n\n        return buffer\n    }\n}\n\n\n\u3061\u3087\u3063\u3068\u51e6\u7406\u304c\u5927\u304d\u3044\u306e\u3067\u9806\u306b\u8aac\u660e\u3057\u307e\u3059\u3002\n\n\u30ea\u30af\u30a8\u30b9\u30c8\u884c\u3092\u89e3\u6790\n\u307e\u305a\u306f\u30e1\u30bd\u30c3\u30c9\u306e\u7a2e\u985e\u3092\u5224\u5225\u3057\u307e\u3059\u3002\n// HTTP\u30ea\u30af\u30a8\u30b9\u30c8\u884c\u3092\u89e3\u6790\n// \u30e1\u30bd\u30c3\u30c9\u3092\u89e3\u6790\nval line = Util.readLine(inputStream).split(\" \")\nmethod = Method.valueOf(line.first().toUpperCase())\n\n\u6700\u521d\u306e\u884c\u306e\u5185\u5bb9\u304c\u30c6\u30ad\u30b9\u30c8\u3067\n\nGET /index.html HTTP/1.1\n\n\u306a\u3069\u306e\u5185\u5bb9\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u524d\u63d0\u306b\u306a\u3063\u3066\u3044\u308b\u30bd\u30fc\u30b9\u3067\u3059\u306d\u3002\nUtil.readLine \u30671\u884c\u8aad\u307f\u8fbc\u3093\u3067 \"GET\" \u90e8\u5206\u3060\u3051\u3092\u5207\u308a\u3060\u3057\u3066\u3044\u307e\u3059\u3002\n\u666e\u901a\u306b\u30d6\u30e9\u30a6\u30b6\u304b\u3089\u306e\u30a2\u30af\u30bb\u30b9\u306a\u3089 line \u306e\u4e2d\u306f\n\nline[0] = \"GET\"\nline[1] = \"/index.html\"\nline[2] = \"HTTP/1.1\"\n\n\u306b\u306a\u3063\u3066\u3044\u308b\u306f\u305a\u3067\u3059\u3002\n\nURL\u306e\u89e3\u6790\n// \u30d1\u30b9\u3092\u53d6\u5f97\nval url = URLDecoder.decode(line[1], \"UTF-8\").split(\"?\")\npath = url.first()\n\nline[1] \u306e\u4e2d\u306b\u306f /index.html \u306a\u3069\u3001\u30a2\u30af\u30bb\u30b9\u3057\u305f\u3044URL\u304c\u5165\u3063\u3066\u3044\u307e\u3059\u3002\nGET\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u5834\u5408\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306f http://www.\uff5e.com/?param=data \u306a\u3069\u306e\u3088\u3046\u306b\u6e21\u3055\u308c\u307e\u3059\u3002\n\u307e\u305a\u306fURL\u3092 \"?\" \u3067\u3075\u305f\u3064\u306b\u5206\u3051\u305f\u914d\u5217\u3092\u53d6\u5f97\u3057\u3066\u3001\u30d1\u30b9\u306b\u76f8\u5f53\u3059\u308b\u6700\u521d\u306e\u90e8\u5206\u3060\u3051\u3092\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002\n\nGET\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u89e3\u6790\n\u3061\u3087\u3063\u3068\u8907\u96d1\u3067\u3059\u306d\u3002\n// GET\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u89e3\u6790\nval paramTemp = mutableMapOf<String, MutableList<String>>()\nif (url.size > 1) {\n    url[1].split(\"&\").forEach {\n        val key = it.split(\"=\").first()\n        val value = it.split(\"=\").last()\n        val values = paramTemp[key]\n        if (values == null) {\n            paramTemp.put(key, mutableListOf(value))\n        }\n        else {\n            values.add(value)\n            paramTemp.put(key, values)\n        }\n    }\n}\n\n... \n\nval p = mutableMapOf<String, Array<String>>()\nparamTemp.forEach {\n    p.put(it.key, it.value.toTypedArray())\n}\nparams = p\n\n\u307e\u305a\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306f key=value \u306e\u5f62\u5f0f\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u30d7\u30ed\u30b0\u30e9\u30e0\u7684\u306b\u8868\u73fe\u3059\u308b\u306a\u3089 Map<Key, Value> \u3067\u3059\u3002\n\u307e\u305f\u3001\u540c\u3058 key \u306b\u5bfe\u3059\u308b value \u306f\u90e8\u5206\u306f\u8907\u6570\u6765\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n\u914d\u5217\u7684\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u6e21\u3063\u3066\u304f\u308b\u5834\u5408\u3067\u3059\u306d\u3002\n\nhttp://.../?id=1&id=2\n\n\u306e\u3088\u3046\u306b\u6e21\u3063\u3066\u304d\u305f\u5834\u5408\u3001\u540c\u3058\u30ad\u30fc\u306b\u5bfe\u3059\u308b\u5024\u3092\u8907\u6570\u7ba1\u7406\u3067\u304d\u306a\u304f\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002\n\u3088\u3063\u3066\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u7ba1\u7406\u3059\u308b\u30c7\u30fc\u30bf\u69cb\u9020\u306f Map<Key, Array<Value>> \u306e\u3088\u3046\u306a\u611f\u3058\u306a\u308a\u307e\u3059\u3002\n\u307e\u305a\u306f\u5909\u66f4\u53ef\u80fd\u306a\u30de\u30c3\u30d7\u3068\u30ea\u30b9\u30c8\u3067\u4eee\u306e\u30c7\u30fc\u30bf\u3092\u4f5c\u3063\u3066\u304b\u3089\u3001\u6700\u5f8c\u306b\u914d\u5217\u3068\u30ea\u30b9\u30c8\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u4f5c\u308a\u76f4\u3057\u3066\u3044\u307e\u3059\u3002\n\nHTTP\u30d8\u30c3\u30c0\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u89e3\u6790\nHTTP\u30d8\u30c3\u30c0\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u89e3\u6790\u3002\nprivate fun readMessages(inputStream: InputStream): Map<String, String> {\n\n    val messages = mutableMapOf<String, String>()\n    var messageLine = Util.readLine(inputStream)\n    while (messageLine != null && !messageLine.isEmpty()) {\n        val tmp = messageLine.split(\":\".toRegex()).dropLastWhile(String::isEmpty).toTypedArray()\n        val key = tmp[0].trim { it <= ' ' }\n        val value = tmp[1].trim { it <= ' ' }\n        messages.put(key, value)\n        messageLine = Util.readLine(inputStream)\n    }\n\n    return messages\n}\n\nHTTP\u30d8\u30c3\u30c0\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\n\nHost: qiita.com\n\n\u306e\u3088\u3046\u306a\u5f62\u5f0f\u3067\u6e21\u3063\u3066\u304d\u307e\u3059\u3002\n\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u9055\u3063\u3066\u91cd\u8907\u306f\u8003\u616e\u3057\u306a\u304f\u3066\u826f\u3044\u3068\u601d\u3046\u306e\u3067\u3001\u30c7\u30fc\u30bf\u69cb\u9020\u7684\u306b\u306f Map<Key, Value>\u3067\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002\n1\u884c\u305a\u3064\u8aad\u307f\u8fbc\u3093\u3067\u3044\u3063\u3066\":\"\u3067\u5206\u5272\u3001\u7a7a\u767d\u6587\u5b57\u3092\u9664\u53bb\u3057\u3066Map\u306b\u683c\u7d0d\u3057\u3066\u3044\u307e\u3059\u3002\n\u5148\u306e\u4f8b\u3067\u8a00\u3048\u3070 Map<\"Host\", \"qiita.com\"> \u3067\u3059\u306d\u3002\n\n\u30dc\u30c7\u30a3\u306e\u89e3\u6790\n\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u5f8c\u306bBody\u304c\u6765\u308b\u306e\u3067\u3001\u305d\u306e\u5185\u5bb9\u3092\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3068\u3057\u3066\u53d6\u5f97\u3057\u307e\u3059\u3002\nprivate fun readBody(inputStream: InputStream): ByteArray {\n\n    val contentLength = messages.getOrElse(\"Content-Length\") { \"0\" }.toInt()\n    if (contentLength <= 0) {\n        return \"\".toByteArray()\n    }\n\n    val buffer = ByteArray(contentLength)\n    inputStream.read(buffer)\n\n    return buffer\n}\n\n\u901a\u5e38\u3001POST\u3055\u308c\u305f\u5834\u5408\u306fHTTP\u30d8\u30c3\u30c0\u30d5\u30a3\u30fc\u30eb\u30c9\u306e Content-Length \u306b\u30dc\u30c7\u30a3\u306e\u30b5\u30a4\u30ba\u304c\u5165\u308c\u3089\u308c\u3066\u9001\u4fe1\u3055\u308c\u307e\u3059\u3002\nGET\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u5834\u5408\u306f\u30dc\u30c7\u30a3\u304c\u306a\u3044\u306e\u3067\u7121\u8996\u3057\u3066\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u4eca\u56de\u306f \"Content-Length\" \u304c\u306a\u3044\u5834\u5408\u3068\u304b\u5024\u304c\u4e0d\u6b63\u306a\u5834\u5408\u306f\u8003\u3048\u3066\u3044\u307e\u305b\u3093\u3002\nPOST\u3055\u308c\u308b\u30c7\u30fc\u30bf\u30b5\u30fc\u30ba\u304c\u5927\u304d\u3044\u5834\u5408\u3082\u8003\u616e\u3057\u3066\u3044\u306a\u3044\u3067\u3059\u306d\u3002\n\u30d6\u30e9\u30a6\u30b6\u304b\u3089POST\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u9001\u3089\u308c\u3066\u304f\u308b\u5834\u5408\u3001GET\u306e\u6642\u306e ? \u306e\u53f3\u5074\u3068\u540c\u3058\u3082\u306e\u304c\u30dc\u30c7\u30a3\u306b\u683c\u7d0d\u3055\u308c\u3066\u9001\u4fe1\u3055\u308c\u3066\u304d\u307e\u3059\u3002\n\u30dc\u30c7\u30a3\u306f\u30d0\u30a4\u30ca\u30ea\u3068\u3057\u3066\u8aad\u307f\u8fbc\u307f\u3001\u5f8c\u3067 String \u306b\u76f4\u3057\u3066URL\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u540c\u3058\u51e6\u7406\u3092\u901a\u3057\u3066\u3084\u308c\u3070\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u89e3\u6790\u306f\u5b8c\u4e86\u3067\u3059\u3002\n\nResponse.kt\nHTTP\u30d8\u30c3\u30c0\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u66f8\u304d\u8fbc\u3080\u51e6\u7406\u3092\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\n\nResponse.kt\nimport java.io.OutputStream\n\nclass Response(val status: Status, val body: ByteArray = \"\".toByteArray()) {\n\n    val headers = mutableMapOf<String, String>()\n\n    fun addHeader(string: String, value: Any): Response {\n        headers.put(string, value.toString())\n        return this\n    }\n\n    fun send(outputStream: OutputStream) {\n        // \u307e\u305a\u306fHTTP\u30ec\u30b9\u30dd\u30f3\u30b9\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u66f8\u304d\u8fbc\u3080\n        Util.println(outputStream, \"HTTP/1.1 ${this.status.text}\")\n\n        // HTTP\u30d8\u30c3\u30c0\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u66f8\u304d\u8fbc\u3080\n        headers.forEach { Util.println(outputStream, \"${it.key}: ${it.value}\") }\n        Util.println(outputStream, \"\") // \u7a7a\u884c\u306fHTTP\u30d8\u30c3\u30c0\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u7d42\u308f\u308a\u3092\u610f\u5473\u3059\u308b\n\n        // \u30b3\u30f3\u30c6\u30f3\u30c4\u672c\u4f53\u3092\u66f8\u304d\u8fbc\u3080\n        outputStream.write(body)\n    }\n}\n\n\n\n\u52d5\u4f5c\u78ba\u8a8d\n\nGET\u30ea\u30af\u30a8\u30b9\u30c8\nGET\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u5834\u5408\u306f\u3001\u666e\u901a\u306b\u30d6\u30e9\u30a6\u30b6\u3067\n\nhttp://localhost:9000/?key=vakue\n\n\u306e\u3088\u3046\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\n\nkey=vakue\n\n\u304c\u8868\u793a\u3055\u308c\u305f\u3089\u6210\u529f\u3067\u3059\u3002\nKey \u3068 value \u306e\u5024\u3092\u8272\u3005\u3068\u5909\u66f4\u3057\u3066\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nPOST\u30ea\u30af\u30a8\u30b9\u30c8\nHTML\u3067\n<!DOCTYPE html>\n<html lang=\"jp\">\n\n<head>\n<meta charset=\"UTF-8\">\n<title>POST\u30ea\u30af\u30a8\u30b9\u30c8\u30c6\u30b9\u30c8</title>\n</head>\n\n<body>\n<form name=\"form\" accept-charset=\"utf-8\" action=\"http://localhost:9000/\" method=\"post\">\n    <input type=\"hidden\" name=\"key\" value=\"value\">\n    <input type=\"submit\" value=\"\u9001\u4fe1\">\n</form>\n</body>\n\n</html>\n\n\u306e\u3088\u3046\u306a\u3082\u306e\u3092\u66f8\u3044\u3066\u30d6\u30e9\u30a6\u30b6\u3067\u958b\u3044\u3066\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3082\u3088\u3044\u306e\u3067\u3059\u304c\u3001\u3082\u3046\u5c11\u3057\u624b\u8efd\u306b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u306a\u3089 Windows Power Shell \u304c\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n\nInvoke-RestMethod -Uri \"http://localhost:9000\" -Method POST -Body \"key=value\"\n\n\n\u6b21\u56de\u306e\u4e88\u5b9a\uff01\nHTTP\u30b5\u30fc\u30d0\u30fc\u306f\u4f55\u3068\u306a\u304f\u52d5\u3044\u305f\u3068\u601d\u3046\u306e\u3067\u3001\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u69cb\u9020\u306b\u3064\u3044\u3066\u8003\u3048\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n# \u306f\u3058\u3081\u306b\n\n\u3053\u3093\u306b\u3061\u306f\u3002\n\n\u3053\u306e\u8a18\u4e8b\u3067\u4f5c\u6210\u3057\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u3067\u3059\u3002\nhttps://github.com/maosec/collet/tree/9eeb418b7dd08be4f3d4f30fe0d137b7bdc494b5\n\n\u307e\u305f\u3001\u3053\u306e\u9023\u8f09\u3067\u4f5c\u6210\u3059\u308b Collet \u306f\u4ee5\u4e0b\u3067\u7ba1\u7406\u3057\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/maosec/collet\n\n\n\u3053\u306e\u8a18\u4e8b\u306f\n\n* \u30bc\u30ed\u304b\u3089\u30a6\u30a7\u30d6\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u3057\u3066\u307f\u305f\u3044\n* \u30a6\u30a7\u30d6\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\uff08\u4ee5\u4e0b\u3001\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\uff09\u306e\u5185\u90e8\u7684\u306a\u4ed5\u7d44\u307f\u306b\u8208\u5473\u304c\u3042\u308b\n* \u65b0\u3057\u3044\u8a00\u8a9e\u3067\u3042\u308bKotlin\u3092\u4f7f\u3044\u305f\u3044\n\n\u3068\u8a00\u3046\u4eba\u3092\u5bfe\u8c61\u306b\u3001\u7c21\u6613\u30aa\u30ec\u30aa\u30ec\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u300c**Collet**\u300d\u3092\u5b9f\u88c5\u3057\u3066\u3044\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u4eca\u56de\u306f\u7b2c\u4e8c\u56de\u76ee\u3067\u3059\u3002\n[\u524d\u56de](http://qiita.com/Mao_Personal/items/ed509e61af8d6610eee3)\u4f5c\u6210\u3057\u305fHTTP\u30b5\u30fc\u30d0\u30fc\u3082\u3069\u304d\u306b\u3082\u3046\u5c11\u3057\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3057\u3087\u3046\u3002\n\n# \u304a\u3053\u3068\u308f\u308a\n\n\u3053\u306e\u8a18\u4e8b\u3067\u7d39\u4ecb\u3059\u308b\u5b9f\u88c5\u306f\u6700\u4f4e\u9650\u306e\u52d5\u4f5c\u3092\u3059\u308b\u7a0b\u5ea6\u306e\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\n\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30fc\u306a\u3069\u306f\u8003\u616e\u3057\u306a\u3044\u305f\u3081\u3001\u5b9f\u904b\u7528\u306a\u3069\u3067\u4f7f\u7528\u3059\u308b\u969b\u306f\u5341\u5206\u6ce8\u610f\u3057\u3066\u6539\u826f\u3057\u3066\u6539\u5584\u3057\u3066\u4f7f\u7528\u3059\u308b\u3088\u3046\u306b\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\uff08\u4f7f\u7528\u3059\u308b\u3068\u306f\u601d\u3048\u307e\u305b\u3093\u304c\uff09\n\n# \u4f7f\u7528\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3068\u958b\u767a\u74b0\u5883\n\n\u4eca\u56de\u3082\u524d\u56de\u3068\u540c\u3058 Intelli J IDEA Community \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306f Kotlin \u3067\u3059\u3002\nWindows 10 \u306a\u3069\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n# \u4eca\u56de\u306eHTTP\u30b5\u30fc\u30d0\u30fc\u3078\u306e\u6a5f\u80fd\u8ffd\u52a0\n\n\u4eca\u56de\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5909\u66f4\u3092\u52a0\u3048\u3066\u3044\u304d\u307e\u3059\u3002\n\n* \u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u5bfe\u5fdc\n* GET / POST \u30ea\u30af\u30a8\u30b9\u30c8\u6642\u306b\u53d7\u3051\u53d6\u3063\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6587\u5b57\u5217\u3067\u8fd4\u305b\u308b\u3088\u3046\u306b\u3059\u308b\n\n\u3059\u307f\u307e\u305b\u3093\u304c\u3001\u307e\u3060\u4eca\u56de\u306e\u5b9f\u88c5\u3067\u3082\u307e\u3068\u3082\u306a\uff08\uff1f\uff09HTTP\u30b5\u30fc\u30d0\u30fc\u306f\u5b9f\u88c5\u3057\u306a\u3044\u3067\u3059\u3002\n\n# \u5168\u4f53\u306e\u30af\u30e9\u30b9\u69cb\u6210\n\n[\u524d\u56de](http://qiita.com/Mao_Personal/items/ed509e61af8d6610eee3)\u3068\u4e00\u7dd2\u3067\u3059\u3002\n\n# \u5b9f\u969b\u306e\u30b3\u30fc\u30c9\n## HttpServer.kt\n\n\u57fa\u672c\u7684\u306b\u306f\u524d\u56de\u3068\u5909\u308f\u308a\u307e\u305b\u3093\u304c\u3001\u3061\u3087\u3063\u3068\u3060\u3051\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8fd4\u5374\u3059\u308b\u90e8\u5206\u306b\u5909\u66f4\u304c\u3042\u308a\u307e\u3059\u3002\n\n```kotlin:HttpServer.kt\nimport java.io.IOException\nimport java.net.ServerSocket\nimport java.net.Socket\nimport java.net.SocketTimeoutException\nimport java.util.concurrent.Executors\n\n// \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\nfun main(args: Array<String>) {\n    HttpServer.start(9000) // \u30dd\u30fc\u30c89000\u3067\u30b5\u30fc\u30d0\u30fc\u3092\u52d5\u4f5c\u3055\u305b\u308b\n}\n\nobject HttpServer {\n\n    private val service = Executors.newCachedThreadPool()\n    private var alive = true\n\n    fun start(port: Int) {\n\n        // \u30b5\u30fc\u30d0\u30fc\u30bd\u30b1\u30c3\u30c8\uff08\u63a5\u7d9a\u3092\u5f85\u3064\uff09\n        val server = ServerSocket(port)\n        server.soTimeout = 5 * 1000 // \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u30925\u79d2\u306b\u8a2d\u5b9a\n\n        // \u7121\u9650\u30eb\u30fc\u30d7\u3057\u3066\u63a5\u7d9a\u3092\u5f85\u3064\n        while (alive) {\n\n            // \u63a5\u7d9a\u3055\u308c\u308b\n            val socket: Socket\n            try {\n                socket = server.accept()\n            } catch (e: SocketTimeoutException) {\n                continue // \u63a5\u7d9a\u3055\u308c\u306a\u3051\u308c\u3070\u3084\u308a\u76f4\u3059\n            }\n\n            // \u63a5\u7d9a\u3055\u308c\u305f\u3089\u305d\u308c\u4ee5\u964d\u306e\u51e6\u7406\u306f\u5225\u30b9\u30ec\u30c3\u30c9\u3067\u884c\u3046\n            this.service.execute {\n                try {\n                    // \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u30b5\u30fc\u30d0\u30fc\u3078\u9001\u4fe1\u3055\u308c\u305f\u5185\u5bb9\u3068\u3001\u30b5\u30fc\u30d0\u30fc\u304b\u3089\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3078\u306e\u9001\u4fe1\u5148\u3092\u53d6\u5f97\n                    val inputStream = socket.inputStream\n                    val outputStream = socket.outputStream\n\n                    // \u30b5\u30fc\u30d0\u30fc\u306b\u9001\u4fe1\u3055\u308c\u3066\u304d\u305f\u5185\u5bb9\u304b\u3089HTTP\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u751f\u6210\n                    val request = Request(inputStream)\n\n                    // \u8fd4\u5374\u3059\u308b\u30b3\u30f3\u30c6\u30f3\u30c4\u672c\u4f53\u3092\u9069\u5f53\u306b\u4f5c\u6210\u3059\u308b\n                    var string = \"\"\n                    request.params.forEach {\n                        val key = it.key\n                        it.value.forEach {\n                            string += \"$key=$it\\n\"\n                        }\n                    }\n\n                    // \u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u751f\u6210\u3057\u3066\u30b3\u30f3\u30c6\u30f3\u30c4\u30bf\u30a4\u30d7\u3092\u6307\u5b9a\u3057\u3066\u8fd4\u5374\u3059\u308b\n                    val response = Response(Status.OK, string.toByteArray())\n                    response.addHeader(\"Content-Type\", \"text/html\")\n                    response.send(outputStream)\n\n                } catch (e: IOException) {\n                    e.printStackTrace()\n                } finally {\n                    try {\n                        socket.close() // \u63a5\u7d9a\u30bd\u30b1\u30c3\u30c8\u3092\u30af\u30ed\u30fc\u30ba\u3059\u308b\n                    } catch (e: IOException) {\n                        e.printStackTrace()\n                    }\n                }\n            }\n        }\n    }\n\n    fun stop() {\n        alive = false\n    }\n}\n```\n\n## Method.kt\n\n\u30e1\u30bd\u30c3\u30c9\u306e\u7a2e\u985e\u306b POST \u3092\u8ffd\u52a0\u3057\u305f\u3060\u3051\u3067\u3059\u3002\n\u51fa\u6765\u308b\u4eba\u306fHTTP/1.1\u306e\u5168\u3066\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u3068\u826f\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u306d\u3002\n\n```kotlin:Method.kt\nenum class Method(val text: String) {\n    GET(\"GET\"),\n    POST(\"POST\"),\n}\n```\n\n## Request.kt\n\n\u524d\u56de\u3068\u6bd4\u3079\u3066\u3051\u3063\u3053\u3046\u5909\u66f4\u304c\u3042\u308a\u307e\u3059\u3002\n\u307e\u305a\u306f\u5168\u4f53\u306e\u30bd\u30fc\u30b9\u3092\u8f09\u305b\u307e\u3059\u3002\n\n\u5f8c\u304b\u3089\u7d30\u304b\u3044\u90e8\u5206\u306e\u8aac\u660e\u3092\u3057\u307e\u3059\u3002\n\n```kotlin:Request.kt\nimport java.io.InputStream\nimport java.net.URLDecoder\n\nclass Request(inputStream: InputStream) {\n\n    val method: Method\n    val path: String\n    val params: Map<String, Array<String>>\n    val messages: Map<String, String>\n    val body: ByteArray\n\n    init {\n        // HTTP\u30ea\u30af\u30a8\u30b9\u30c8\u884c\u3092\u89e3\u6790\n        // \u30e1\u30bd\u30c3\u30c9\u3092\u89e3\u6790\n        val line = Util.readLine(inputStream).split(\" \")\n        method = Method.valueOf(line.first().toUpperCase())\n\n        // URL\u3092\u53d6\u5f97\n        val url = URLDecoder.decode(line[1], \"UTF-8\").split(\"?\")\n        path = url.first()\n\n        // GET\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u89e3\u6790\n        val paramTemp = mutableMapOf<String, MutableList<String>>()\n        if (url.size > 1) {\n            url[1].split(\"&\").forEach {\n                val key = it.split(\"=\").first()\n                val value = it.split(\"=\").last()\n                val values = paramTemp[key]\n                if (values == null) {\n                    paramTemp.put(key, mutableListOf(value))\n                }\n                else {\n                    values.add(value)\n                    paramTemp.put(key, values)\n                }\n            }\n        }\n\n        // \u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u89e3\u6790\n        messages = readMessages(inputStream)\n\n        body = readBody(inputStream)\n        if (method == Method.POST) {\n            val s = String(body)\n            s.split(\"&\").forEach {\n                val key = it.split(\"=\").first()\n                val value = it.split(\"=\").last()\n                val values = paramTemp[key]\n                if (values == null) {\n                    paramTemp.put(key, mutableListOf(value))\n                }\n                else {\n                    values.add(value)\n                    paramTemp.put(key, values)\n                }\n            }\n        }\n\n        val p = mutableMapOf<String, Array<String>>()\n        paramTemp.forEach {\n            p.put(it.key, it.value.toTypedArray())\n        }\n        params = p\n    }\n\n    private fun readMessages(inputStream: InputStream): Map<String, String> {\n\n        val messages = mutableMapOf<String, String>()\n        var messageLine = Util.readLine(inputStream)\n        while (messageLine != null && !messageLine.isEmpty()) {\n            val tmp = messageLine.split(\":\".toRegex()).dropLastWhile(String::isEmpty).toTypedArray()\n            val key = tmp[0].trim { it <= ' ' }\n            val value = tmp[1].trim { it <= ' ' }\n            messages.put(key, value)\n            messageLine = Util.readLine(inputStream)\n        }\n\n        return messages\n    }\n\n    private fun readBody(inputStream: InputStream): ByteArray {\n\n        val contentLength = messages.getOrElse(\"Content-Length\") { \"0\" }.toInt()\n        if (contentLength <= 0) {\n            return \"\".toByteArray()\n        }\n\n        val buffer = ByteArray(contentLength)\n        inputStream.read(buffer)\n\n        return buffer\n    }\n}\n```\n\n\u3061\u3087\u3063\u3068\u51e6\u7406\u304c\u5927\u304d\u3044\u306e\u3067\u9806\u306b\u8aac\u660e\u3057\u307e\u3059\u3002\n\n### \u30ea\u30af\u30a8\u30b9\u30c8\u884c\u3092\u89e3\u6790\n\n\u307e\u305a\u306f\u30e1\u30bd\u30c3\u30c9\u306e\u7a2e\u985e\u3092\u5224\u5225\u3057\u307e\u3059\u3002\n\n```kotlin\n// HTTP\u30ea\u30af\u30a8\u30b9\u30c8\u884c\u3092\u89e3\u6790\n// \u30e1\u30bd\u30c3\u30c9\u3092\u89e3\u6790\nval line = Util.readLine(inputStream).split(\" \")\nmethod = Method.valueOf(line.first().toUpperCase())\n```\n\n\u6700\u521d\u306e\u884c\u306e\u5185\u5bb9\u304c\u30c6\u30ad\u30b9\u30c8\u3067\n\n> GET /index.html HTTP/1.1\n\n\u306a\u3069\u306e\u5185\u5bb9\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u524d\u63d0\u306b\u306a\u3063\u3066\u3044\u308b\u30bd\u30fc\u30b9\u3067\u3059\u306d\u3002\nUtil.readLine \u30671\u884c\u8aad\u307f\u8fbc\u3093\u3067 \"GET\" \u90e8\u5206\u3060\u3051\u3092\u5207\u308a\u3060\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u666e\u901a\u306b\u30d6\u30e9\u30a6\u30b6\u304b\u3089\u306e\u30a2\u30af\u30bb\u30b9\u306a\u3089 line \u306e\u4e2d\u306f\n\n> \nline[0] = \"GET\"\nline[1] = \"/index.html\"\nline[2] = \"HTTP/1.1\"\n\n\u306b\u306a\u3063\u3066\u3044\u308b\u306f\u305a\u3067\u3059\u3002\n\n### URL\u306e\u89e3\u6790\n\n```kotlin\n// \u30d1\u30b9\u3092\u53d6\u5f97\nval url = URLDecoder.decode(line[1], \"UTF-8\").split(\"?\")\npath = url.first()\n```\n\nline[1] \u306e\u4e2d\u306b\u306f /index.html \u306a\u3069\u3001\u30a2\u30af\u30bb\u30b9\u3057\u305f\u3044URL\u304c\u5165\u3063\u3066\u3044\u307e\u3059\u3002\nGET\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u5834\u5408\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306f `http://www.\uff5e.com/?param=data` \u306a\u3069\u306e\u3088\u3046\u306b\u6e21\u3055\u308c\u307e\u3059\u3002\n\u307e\u305a\u306fURL\u3092 `\"?\"` \u3067\u3075\u305f\u3064\u306b\u5206\u3051\u305f\u914d\u5217\u3092\u53d6\u5f97\u3057\u3066\u3001\u30d1\u30b9\u306b\u76f8\u5f53\u3059\u308b\u6700\u521d\u306e\u90e8\u5206\u3060\u3051\u3092\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002\n\n### GET\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u89e3\u6790\n\n\u3061\u3087\u3063\u3068\u8907\u96d1\u3067\u3059\u306d\u3002\n\n```kotlin\n// GET\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u89e3\u6790\nval paramTemp = mutableMapOf<String, MutableList<String>>()\nif (url.size > 1) {\n    url[1].split(\"&\").forEach {\n        val key = it.split(\"=\").first()\n        val value = it.split(\"=\").last()\n        val values = paramTemp[key]\n        if (values == null) {\n            paramTemp.put(key, mutableListOf(value))\n        }\n        else {\n            values.add(value)\n            paramTemp.put(key, values)\n        }\n    }\n}\n\n... \n\nval p = mutableMapOf<String, Array<String>>()\nparamTemp.forEach {\n    p.put(it.key, it.value.toTypedArray())\n}\nparams = p\n```\n\n\u307e\u305a\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306f `key=value` \u306e\u5f62\u5f0f\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u30d7\u30ed\u30b0\u30e9\u30e0\u7684\u306b\u8868\u73fe\u3059\u308b\u306a\u3089 `Map<Key, Value>` \u3067\u3059\u3002\n\n\u307e\u305f\u3001\u540c\u3058 key \u306b\u5bfe\u3059\u308b value \u306f\u90e8\u5206\u306f\u8907\u6570\u6765\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n\u914d\u5217\u7684\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u6e21\u3063\u3066\u304f\u308b\u5834\u5408\u3067\u3059\u306d\u3002\n\n> http://.../?id=1&id=2\n\n\u306e\u3088\u3046\u306b\u6e21\u3063\u3066\u304d\u305f\u5834\u5408\u3001\u540c\u3058\u30ad\u30fc\u306b\u5bfe\u3059\u308b\u5024\u3092\u8907\u6570\u7ba1\u7406\u3067\u304d\u306a\u304f\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002\n\n\u3088\u3063\u3066\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u7ba1\u7406\u3059\u308b\u30c7\u30fc\u30bf\u69cb\u9020\u306f `Map<Key, Array<Value>>` \u306e\u3088\u3046\u306a\u611f\u3058\u306a\u308a\u307e\u3059\u3002\n\u307e\u305a\u306f\u5909\u66f4\u53ef\u80fd\u306a\u30de\u30c3\u30d7\u3068\u30ea\u30b9\u30c8\u3067\u4eee\u306e\u30c7\u30fc\u30bf\u3092\u4f5c\u3063\u3066\u304b\u3089\u3001\u6700\u5f8c\u306b\u914d\u5217\u3068\u30ea\u30b9\u30c8\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u4f5c\u308a\u76f4\u3057\u3066\u3044\u307e\u3059\u3002\n\n### HTTP\u30d8\u30c3\u30c0\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u89e3\u6790\n\nHTTP\u30d8\u30c3\u30c0\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u89e3\u6790\u3002\n\n```kotlin\nprivate fun readMessages(inputStream: InputStream): Map<String, String> {\n\n    val messages = mutableMapOf<String, String>()\n    var messageLine = Util.readLine(inputStream)\n    while (messageLine != null && !messageLine.isEmpty()) {\n        val tmp = messageLine.split(\":\".toRegex()).dropLastWhile(String::isEmpty).toTypedArray()\n        val key = tmp[0].trim { it <= ' ' }\n        val value = tmp[1].trim { it <= ' ' }\n        messages.put(key, value)\n        messageLine = Util.readLine(inputStream)\n    }\n\n    return messages\n}\n```\n\nHTTP\u30d8\u30c3\u30c0\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\n\n> Host: qiita.com\n\n\u306e\u3088\u3046\u306a\u5f62\u5f0f\u3067\u6e21\u3063\u3066\u304d\u307e\u3059\u3002\n\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u9055\u3063\u3066\u91cd\u8907\u306f\u8003\u616e\u3057\u306a\u304f\u3066\u826f\u3044\u3068\u601d\u3046\u306e\u3067\u3001\u30c7\u30fc\u30bf\u69cb\u9020\u7684\u306b\u306f `Map<Key, Value>`\u3067\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002\n\n1\u884c\u305a\u3064\u8aad\u307f\u8fbc\u3093\u3067\u3044\u3063\u3066\":\"\u3067\u5206\u5272\u3001\u7a7a\u767d\u6587\u5b57\u3092\u9664\u53bb\u3057\u3066Map\u306b\u683c\u7d0d\u3057\u3066\u3044\u307e\u3059\u3002\n\u5148\u306e\u4f8b\u3067\u8a00\u3048\u3070 `Map<\"Host\", \"qiita.com\">` \u3067\u3059\u306d\u3002\n\n### \u30dc\u30c7\u30a3\u306e\u89e3\u6790\n\n\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u5f8c\u306bBody\u304c\u6765\u308b\u306e\u3067\u3001\u305d\u306e\u5185\u5bb9\u3092\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3068\u3057\u3066\u53d6\u5f97\u3057\u307e\u3059\u3002\n\n```kotlin\nprivate fun readBody(inputStream: InputStream): ByteArray {\n\n    val contentLength = messages.getOrElse(\"Content-Length\") { \"0\" }.toInt()\n    if (contentLength <= 0) {\n        return \"\".toByteArray()\n    }\n\n    val buffer = ByteArray(contentLength)\n    inputStream.read(buffer)\n\n    return buffer\n}\n```\n\n\u901a\u5e38\u3001POST\u3055\u308c\u305f\u5834\u5408\u306fHTTP\u30d8\u30c3\u30c0\u30d5\u30a3\u30fc\u30eb\u30c9\u306e `Content-Length` \u306b\u30dc\u30c7\u30a3\u306e\u30b5\u30a4\u30ba\u304c\u5165\u308c\u3089\u308c\u3066\u9001\u4fe1\u3055\u308c\u307e\u3059\u3002\nGET\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u5834\u5408\u306f\u30dc\u30c7\u30a3\u304c\u306a\u3044\u306e\u3067\u7121\u8996\u3057\u3066\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u4eca\u56de\u306f `\"Content-Length\"` \u304c\u306a\u3044\u5834\u5408\u3068\u304b\u5024\u304c\u4e0d\u6b63\u306a\u5834\u5408\u306f\u8003\u3048\u3066\u3044\u307e\u305b\u3093\u3002\nPOST\u3055\u308c\u308b\u30c7\u30fc\u30bf\u30b5\u30fc\u30ba\u304c\u5927\u304d\u3044\u5834\u5408\u3082\u8003\u616e\u3057\u3066\u3044\u306a\u3044\u3067\u3059\u306d\u3002\n\n\u30d6\u30e9\u30a6\u30b6\u304b\u3089POST\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u9001\u3089\u308c\u3066\u304f\u308b\u5834\u5408\u3001GET\u306e\u6642\u306e `?` \u306e\u53f3\u5074\u3068\u540c\u3058\u3082\u306e\u304c\u30dc\u30c7\u30a3\u306b\u683c\u7d0d\u3055\u308c\u3066\u9001\u4fe1\u3055\u308c\u3066\u304d\u307e\u3059\u3002\n\u30dc\u30c7\u30a3\u306f\u30d0\u30a4\u30ca\u30ea\u3068\u3057\u3066\u8aad\u307f\u8fbc\u307f\u3001\u5f8c\u3067 String \u306b\u76f4\u3057\u3066URL\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u540c\u3058\u51e6\u7406\u3092\u901a\u3057\u3066\u3084\u308c\u3070\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u89e3\u6790\u306f\u5b8c\u4e86\u3067\u3059\u3002\n\n## Response.kt\n\nHTTP\u30d8\u30c3\u30c0\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u66f8\u304d\u8fbc\u3080\u51e6\u7406\u3092\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\n\n```kotlin:Response.kt\nimport java.io.OutputStream\n\nclass Response(val status: Status, val body: ByteArray = \"\".toByteArray()) {\n\n    val headers = mutableMapOf<String, String>()\n\n    fun addHeader(string: String, value: Any): Response {\n        headers.put(string, value.toString())\n        return this\n    }\n\n    fun send(outputStream: OutputStream) {\n        // \u307e\u305a\u306fHTTP\u30ec\u30b9\u30dd\u30f3\u30b9\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u66f8\u304d\u8fbc\u3080\n        Util.println(outputStream, \"HTTP/1.1 ${this.status.text}\")\n\n        // HTTP\u30d8\u30c3\u30c0\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u66f8\u304d\u8fbc\u3080\n        headers.forEach { Util.println(outputStream, \"${it.key}: ${it.value}\") }\n        Util.println(outputStream, \"\") // \u7a7a\u884c\u306fHTTP\u30d8\u30c3\u30c0\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u7d42\u308f\u308a\u3092\u610f\u5473\u3059\u308b\n\n        // \u30b3\u30f3\u30c6\u30f3\u30c4\u672c\u4f53\u3092\u66f8\u304d\u8fbc\u3080\n        outputStream.write(body)\n    }\n}\n```\n\n# \u52d5\u4f5c\u78ba\u8a8d\n## GET\u30ea\u30af\u30a8\u30b9\u30c8\n\nGET\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u5834\u5408\u306f\u3001\u666e\u901a\u306b\u30d6\u30e9\u30a6\u30b6\u3067\n\n> http://localhost:9000/?key=vakue\n\n\u306e\u3088\u3046\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\n\n> key=vakue\n\n\u304c\u8868\u793a\u3055\u308c\u305f\u3089\u6210\u529f\u3067\u3059\u3002\nKey \u3068 value \u306e\u5024\u3092\u8272\u3005\u3068\u5909\u66f4\u3057\u3066\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n## POST\u30ea\u30af\u30a8\u30b9\u30c8\n\nHTML\u3067\n\n```html\n<!DOCTYPE html>\n<html lang=\"jp\">\n\n<head>\n<meta charset=\"UTF-8\">\n<title>POST\u30ea\u30af\u30a8\u30b9\u30c8\u30c6\u30b9\u30c8</title>\n</head>\n\n<body>\n<form name=\"form\" accept-charset=\"utf-8\" action=\"http://localhost:9000/\" method=\"post\">\n    <input type=\"hidden\" name=\"key\" value=\"value\">\n    <input type=\"submit\" value=\"\u9001\u4fe1\">\n</form>\n</body>\n\n</html>\n```\n\n\u306e\u3088\u3046\u306a\u3082\u306e\u3092\u66f8\u3044\u3066\u30d6\u30e9\u30a6\u30b6\u3067\u958b\u3044\u3066\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3082\u3088\u3044\u306e\u3067\u3059\u304c\u3001\u3082\u3046\u5c11\u3057\u624b\u8efd\u306b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u306a\u3089 Windows Power Shell \u304c\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n\n> Invoke-RestMethod -Uri \"http://localhost:9000\" -Method POST -Body \"key=value\"\n\n# \u6b21\u56de\u306e\u4e88\u5b9a\uff01\n\nHTTP\u30b5\u30fc\u30d0\u30fc\u306f\u4f55\u3068\u306a\u304f\u52d5\u3044\u305f\u3068\u601d\u3046\u306e\u3067\u3001\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u69cb\u9020\u306b\u3064\u3044\u3066\u8003\u3048\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["Kotlin", "\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af", "HTTP", "\u30b5\u30fc\u30d0\u30fc", "Java"]}