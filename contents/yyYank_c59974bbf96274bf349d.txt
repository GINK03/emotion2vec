{"context": "\n\n\u306f\u3058\u3081\u306b\n\u6700\u8fd1\u59cb\u3081\u305f\u30ec\u30a4\u30a2\u30a6\u30c8\u8abf\u6574\u3092\u5c11\u3057\u3060\u3051\u52b9\u7387\u826f\u304f\u3059\u308b\u81ea\u5206\u306a\u308a\u306eTips\u3092\u66f8\u3044\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u65b0\u898f\u6027\u306f\u7121\u3044\u306e\u3067\u5b9c\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\u4f55\u304b\u30c4\u30c3\u30b3\u30df or \u3088\u308a\u826f\u3044\u65b9\u6cd5\u304c\u3042\u308c\u3070\u672c\u8a18\u4e8b\u306e\u30b3\u30e1\u30f3\u30c8\u306a\u308a\u3001\u306f\u3066\u30d6\u30b3\u30e1\u30f3\u30c8\u306a\u308a\u3067\u53cd\u5fdc\u3057\u3066\u3082\u3089\u3048\u308b\u3068\u3046\u308c\u3057\u3044\u3067\u3059\u3002\n\n\u524d\u63d0\n\u4ee5\u4e0b\u306e\u3082\u306e\u3092\u4f7f\u3063\u3066\u3044\u308b\u958b\u767a\n\nJava\nlibGDX\nGradle\n\n\n\u554f\u984c\nScene2d\u3092\u4f7f\u3046\u5834\u5408\u3001\u5ea7\u6a19\u4f4d\u7f6e\u3068\u3044\u3046\u306e\u306f\u5927\u4f53Group\u306b\u9589\u3058\u8fbc\u3081\u3089\u308c\u305f\u30ed\u30fc\u30ab\u30eb\u5ea7\u6a19\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\n\u753b\u9762\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u4e0a\u3001\u4f4d\u7f6e\u306e\u8abf\u6574\u306f\u305d\u3053\u307e\u3067\u5927\u5916\u308c\u306f\u3057\u306a\u3044\u3082\u306e\u3067\u3059\u3002\n\u305f\u3060\u3057\u3001\u7d30\u304b\u304f\u4f4d\u7f6e\u8abf\u6574\u3092\u3059\u308b\u6bb5\u968e\uff08\u4f8b\u3048\u3070\u753b\u9762\u30e2\u30c3\u30af\u3092\u4f5c\u308b\u6bb5\u968e\uff09\u3067\u3042\u308b\u3068\u3001\u753b\u9762UI\u306e\u5ea7\u6a19\u4f4d\u7f6e\u3084\u5927\u304d\u3055\u306a\u3069\u3092\u4f55\u56de\u3082\u5909\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u5358\u7d14\u306b\u3084\u308b\u306e\u3067\u3042\u308c\u3070\u305d\u306e\u5ea6\u306bJava\u306e\u30af\u30e9\u30b9\u3092\u518d\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u6700\u8fd1\u3067\u306fJava\u30b3\u30f3\u30d1\u30a4\u30eb\u901f\u5ea6\u306b\u82e6\u3057\u307e\u3055\u308c\u308b\u3053\u3068\u306f\u306a\u304f\u306a\u3063\u3066\u304d\u3066\u3044\u308b\u3068\u306f\u8a00\u3048\uff08\u8981\u51fa\u5178\uff09\u3001\u5358\u7d14\u306a\u4f4d\u7f6e\u8abf\u6574\u306e\u305f\u3081\u306b\u6bce\u56de\u6bce\u56de\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066relaunch\u3059\u308b\u306e\u306f\u99ac\u9e7f\u3089\u3057\u3044\u3067\u3059\u3057\u3001\u6642\u9593\u306e\u304b\u304b\u308b\u4f5c\u696d\u3067\u3059\u3002\n\n\u89e3\u6c7a\u7b56\nPropertiesUtils\u3092\u4f7f\u3063\u3066\u30ec\u30a4\u30a2\u30a6\u30c8\u95a2\u9023\u306e\u5024\u3092properties\u30d5\u30a1\u30a4\u30eb\u3067\u6301\u3061\u307e\u3059\u3002\n\u3053\u306eUtil\u306b\u3064\u3044\u3066\u306f\u4ee5\u524d\u306b\u307e\u3068\u3081\u3066\u3044\u307e\u3059\u3002\nlibGDX\u306eUtils\u30af\u30e9\u30b9\u306e\u30e1\u30e2\n\n\u5b9f\u969b\u306b\u306f\u3069\u3046\u3059\u308b\u304b\n\n\u524d\u6e96\u5099\n\n\nHoge.java\n\nimport com.badlogic.gdx.scenes.scene2d.Actor;\nimport com.badlogic.gdx.scenes.scene2d.Group;\nimport com.badlogic.gdx.utils.ObjectMap;\nimport com.badlogic.gdx.utils.PropertiesUtils;\nimport com.badlogic.gdx.utils.StreamUtils;\n\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n/**\n * Created by yy_yank on 2017/02/01.\n */\npublic class Hoge extends Group {\n\n\n    ObjectMap<String, String> debugCache = new ObjectMap<>();\n\n    public Hoge() {\n        // \u51e6\u7406\u8272\u3005\n        try{\n            InputStreamReader reader = new InputStreamReader(getClass().getClassLoader().getResourceAsStream(\"debugCache.properties\"));\n            PropertiesUtils.load(debugCache, reader);\n            StreamUtils.closeQuietly(reader);\n        } catch (IOException e) {\n            // \u5168\u529b\u3067\u63e1\u308a\u3064\u3076\u3057\u3066\u308b\u3051\u3069\u826f\u3044\u5b50\u306f\u771f\u4f3c\u3057\u306a\u3044\u3067\u306d\n        }\n\n        init();\n    }\n\n    private void init() {\n\n        Actor a = new Actor();\n        a.setScale(Float.parseFloat(debugCache.get(\"a.scale\")));\n        addActor(a);\n        a.setPosition(Float.parseFloat(debugCache.get(\"a.x\")), Float.parseFloat(debugCache.get(\"a.y\")));\n        Actor b = new Actor();\n        b.setPosition(Float.parseFloat(debugCache.get(\"b.x\")), Float.parseFloat(debugCache.get(\"b.y\")));\n        addActor(b);\n        Actor c = new Actor();\n        c.setPosition(Float.parseFloat(debugCache.get(\"c.x\")), Float.parseFloat(debugCache.get(\"c.y\")));\n        addActor(c);\n        Actor d = new Actor();\n        d.setPosition(Float.parseFloat(debugCache.get(\"d.x\")), Float.parseFloat(debugCache.get(\"d.y\")));\n        addActor(d);\n    }\n}\n\n\n\n\u305d\u3057\u3066\u3001android/assets\u7684\u306a\u3068\u3053\u308d\u306b\u30d7\u30ed\u30d1\u30c6\u30a3\u30d5\u30a1\u30a4\u30eb\u3092\u7f6e\u3044\u3066\u304a\u304d\u307e\u3059\u3002\n\ndebugCache.properties\na.x=100\na.y=200\na.scale=1\nb.x=100\nb.y=300\nc.x=100\nc.y=400\nd.x=100\nd.y=500\n\n\n\u306a\u3093\u3068\u3082\u6ce5\u81ed\u3044\u3067\u3059\u304c\u3001\u3053\u3046\u3059\u308b\u3053\u3068\u3067\u30d7\u30ed\u30d1\u30c6\u30a3\u30d5\u30a1\u30a4\u30eb\u306e\u5024\u3092\u7528\u3044\u3066\u30ec\u30a4\u30a2\u30a6\u30c8\u306e\u8abf\u6574\u3092\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\n\u30b2\u30fc\u30e0\u30a2\u30d7\u30ea\u8d77\u52d5\n\n\u305d\u3057\u3066\u3001\u30b2\u30fc\u30e0\u30a2\u30d7\u30ea\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u7248\u8d77\u52d5\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u6c17\u306b\u306a\u308b\u3068\u3053\u308d\u306e\u4fee\u6b63\n\n\u3055\u3063\u304d\u66f8\u3044\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306ea,\uff42,c,d\u3068\u8a00\u3063\u305fActor\u306e\u4f4d\u7f6e\u8abf\u6574\u3092\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u5177\u4f53\u7684\u306b\u306fdesktop/build/resources/main\u914d\u4e0b\u3068\u304b\u306bdebugCache.properties\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u306f\u305a\u306a\u306e\u3067\u305d\u3061\u3089\u3092\u3044\u3058\u3063\u3066\u3044\u304d\u307e\u3059\u3002\u305d\u3046\u3059\u308b\u3053\u3068\u3067\u3001Hoge\u30af\u30e9\u30b9\u306eActor\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u304c\u3055\u308c\u308b\u3054\u3068\u306b\u4f4d\u7f6e\u3092\u8abf\u6574\u51fa\u6765\u308b\u308f\u3051\u3067\u3059\u3002\u306a\u3093\u3068\u3082\u30c0\u30b5\u3044\u3002\u3067\u3082\u3001\u6bce\u56de\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3088\u308a\u304b\u306f\u65e9\u3044\u3067\u3059\u3002\n\n\u4f4d\u7f6e\u8abf\u6574\u304c\u7d42\u308f\u3063\u305f\u3042\u3068\u306f\u3069\u3046\u3059\u308b\u304b\n\u3053\u306eObjectMap<String, String>\u578b\u3092\u6bce\u56deparse\u3057\u3066\u6570\u5024\u578b\u306b\u5909\u63db\u3059\u308b\u51e6\u7406\u3060\u3051\u3067\u306f\u82b8\u304c\u7121\u3044\u306e\u3067\u3001\n\u4e00\u5fdc\u5ea7\u6a19\u3084scale\u3001\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba\u304c\u6c7a\u307e\u3063\u305f\u3042\u3068\u3092\u60f3\u5b9a\u3057\u3066\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u30d7\u30ed\u30d1\u30c6\u30a3\u30d5\u30a1\u30a4\u30eb\u306e\u5024\u3092\u9069\u7528\u3059\u308b\u3088\u3046\u66f8\u304d\u63db\u3048\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n\u3061\u3087\u3063\u3068\u30b5\u30dc\u3063\u3066Java SE 7\u76f8\u5f53\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u306f\u76ee\u3092\u3064\u3076\u3063\u3066\u304f\u3060\u3055\u3044\u3002\nimport com.badlogic.gdx.utils.ObjectMap;\nimport com.badlogic.gdx.utils.PropertiesUtils;\nimport com.badlogic.gdx.utils.StreamUtils;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.nio.charset.Charset;\nimport java.nio.file.*;\nimport java.nio.file.attribute.BasicFileAttributes;\nimport java.util.Arrays;\nimport java.util.List;\n\n\npublic class DebugPropertiesConverter implements InternalConverter{\n\n\n    private ObjectMap<String, String> debugCache;\n\n    CacheConfigurationFactory factory = new CacheConfigurationFactory() {\n        @Override\n        public String createCacheVariableName() {\n            return \"debugCache\";\n        }\n\n        @Override\n        public String createCacheFileName() {\n            return \"debugCache.properties\";\n        }\n\n        @Override\n        public List<Pair<String, String>> cretateTargetStringPair(String between, String value) {\n            return Arrays.asList(\n                    new Pair<>(\"Integer.parseInt(\"+createCacheVariableName()+\".get(\\\"\"+ between +\"\\\"))\", value),\n                    new Pair<>(\"Double.parseDouble(\"+createCacheVariableName()+\".get(\\\"\"+ between +\"\\\"))\", value),\n                    new Pair<>(\"Float.parseFloat(\"+createCacheVariableName()+\".get(\\\"\"+ between +\"\\\"))\", value + \"f\")\n            );\n        }\n    };\n\n\n    public static void main(String[] args) throws Exception {\n        new DebugPropertiesConverter().run();\n    }\n\n    public void run() throws Exception {\n        FileVisitor<Path> visitor = new InternalFileVisitor(this);\n        Files.walkFileTree(Paths.get(\"/Users/yy_yank/work/projects/hogehoge/core/src/com/github/yyYank\"\n                ,\"your\"\n                ,\"package\"\n                ,\"dir\"\n        ), visitor);\n    }\n\n\n    @Override\n    public ObjectMap<String, String> readBetweenString() throws IOException {\n        if(debugCache != null) {\n            return debugCache;\n        }\n        InputStreamReader reader = new InputStreamReader(getClass().getClassLoader().getResourceAsStream(factory.createCacheFileName()));\n        this.debugCache = new ObjectMap<>();\n        PropertiesUtils.load(debugCache, reader);\n        System.out.println(debugCache);\n        StreamUtils.closeQuietly(reader);\n        return debugCache;\n    }\n\n    @Override\n    public void executeOnFile(Path file, BasicFileAttributes attrs) throws IOException {\n        ObjectMap<String, String> betweens = readBetweenString();\n        List<String> lines = Files.readAllLines(file, Charset.forName(\"UTF-8\"));\n\n        boolean isRewrite = false;\n        for (ObjectMap.Entry<String, String> between : betweens) {\n            List<Pair<String, String>> targets = factory.cretateTargetStringPair(between.key, between.value);\n            for (Pair<String, String> target : targets) {\n                for (int i = 0; i < lines.size(); i++) {\n                    String line = lines.get(i);\n                    isRewrite = isRewrite ? isRewrite : line.contains(target.key);\n                    lines.set(i, line.replace(target.key, target.value));\n                }\n            }\n        }\n        // rewrite\n        if(isRewrite) {\n            System.out.println(\"rewrite file.... -> \" + file.getFileName());\n            Files.write(file, lines, Charset.forName(\"UTF-8\"));\n        } else {\n            System.out.println(\"[SKIP]\" + file.getFileName());\n        }\n    }\n\n    @Override\n    public void executeOnDir(Path dir, BasicFileAttributes attrs) {\n        // do nothing\n    }\n\n    @Override\n    public boolean filterExtension(Path file) {\n        return file.getFileName().toString().endsWith(\"java\");\n    }\n}\n\ninterface CacheConfigurationFactory {\n    String createCacheVariableName();\n    String createCacheFileName();\n    List<Pair<String, String>> cretateTargetStringPair(String between, String value);\n}\n\ninterface InternalConverter {\n    ObjectMap<String, String> readBetweenString() throws IOException;\n    void executeOnFile(Path file, BasicFileAttributes attrs) throws IOException;\n    void executeOnDir(Path dir, BasicFileAttributes attrs);\n    boolean filterExtension(Path file);\n\n}\n\n\nclass InternalFileVisitor implements FileVisitor<Path> {\n\n\n    private final DebugPropertiesConverter converter;\n\n    public InternalFileVisitor(DebugPropertiesConverter converter) {\n        this.converter = converter;\n    }\n\n    @Override\n    public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n        print(\"preVisitDirectory : \" + dir.getFileName());\n        return FileVisitResult.CONTINUE;\n    }\n\n    @Override\n    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        if(converter.filterExtension(file)) {\n            print(\"visitFile : \" + file.getFileName());\n            converter.executeOnFile(file, attrs);\n        } else {\n            print(\"[SKIP]visitFile : \" + file.getFileName());\n        }\n        return FileVisitResult.CONTINUE;\n    }\n\n    @Override\n    public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {\n        return FileVisitResult.CONTINUE;\n    }\n\n    @Override\n    public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {\n        String error = String.format(\" [exception=%s, message=%s]\", exc.getClass(), exc.getMessage());\n        print(\"visitFileFailed : \" + file.getFileName() + error);\n        return FileVisitResult.CONTINUE;\n    }\n\n    protected void print(String message) {\n        System.out.println(message);\n    }\n}\n\nclass Pair<K, V>{\n    public final K key;\n    public final V value;\n    Pair(K k, V v) {\n        this.key = k;\n        this.value = v;\n    }\n}\n\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304c\u30d7\u30ed\u30d1\u30c6\u30a3\u30d5\u30a1\u30a4\u30eb\u3067\u8a2d\u5b9a\u3057\u305f\u5024\u306b\u66f8\u304d\u63db\u308f\u308a\u307e\u3059\u3002\n\n\u307e\u3068\u3081\n\u9759\u7684\u578b\u4ed8\u3051\u306f\u3042\u308a\u304c\u305f\u3044\u3051\u3069\u3001\u52d5\u7684\u306b\u3057\u305f\u3044\u90e8\u5206\u3082\u3042\u308b\uff01\n\u672c\u5f53\u306f\u3082\u3063\u3068\u30b9\u30de\u30fc\u30c8\u306a\u611f\u3058\u306b\u3084\u308a\u305f\u3044\u3002\n## \u306f\u3058\u3081\u306b\n\n\u6700\u8fd1\u59cb\u3081\u305f\u30ec\u30a4\u30a2\u30a6\u30c8\u8abf\u6574\u3092\u5c11\u3057\u3060\u3051\u52b9\u7387\u826f\u304f\u3059\u308b\u81ea\u5206\u306a\u308a\u306eTips\u3092\u66f8\u3044\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u65b0\u898f\u6027\u306f\u7121\u3044\u306e\u3067\u5b9c\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\u4f55\u304b\u30c4\u30c3\u30b3\u30df or \u3088\u308a\u826f\u3044\u65b9\u6cd5\u304c\u3042\u308c\u3070\u672c\u8a18\u4e8b\u306e\u30b3\u30e1\u30f3\u30c8\u306a\u308a\u3001\u306f\u3066\u30d6\u30b3\u30e1\u30f3\u30c8\u306a\u308a\u3067\u53cd\u5fdc\u3057\u3066\u3082\u3089\u3048\u308b\u3068\u3046\u308c\u3057\u3044\u3067\u3059\u3002\n\n\n## \u524d\u63d0\n\n\u4ee5\u4e0b\u306e\u3082\u306e\u3092\u4f7f\u3063\u3066\u3044\u308b\u958b\u767a\n\n* Java\n* libGDX\n* Gradle\n\n## \u554f\u984c\n\nScene2d\u3092\u4f7f\u3046\u5834\u5408\u3001\u5ea7\u6a19\u4f4d\u7f6e\u3068\u3044\u3046\u306e\u306f\u5927\u4f53Group\u306b\u9589\u3058\u8fbc\u3081\u3089\u308c\u305f\u30ed\u30fc\u30ab\u30eb\u5ea7\u6a19\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\n\u753b\u9762\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u4e0a\u3001\u4f4d\u7f6e\u306e\u8abf\u6574\u306f\u305d\u3053\u307e\u3067\u5927\u5916\u308c\u306f\u3057\u306a\u3044\u3082\u306e\u3067\u3059\u3002\n\n\u305f\u3060\u3057\u3001\u7d30\u304b\u304f\u4f4d\u7f6e\u8abf\u6574\u3092\u3059\u308b\u6bb5\u968e\uff08\u4f8b\u3048\u3070\u753b\u9762\u30e2\u30c3\u30af\u3092\u4f5c\u308b\u6bb5\u968e\uff09\u3067\u3042\u308b\u3068\u3001\u753b\u9762UI\u306e\u5ea7\u6a19\u4f4d\u7f6e\u3084\u5927\u304d\u3055\u306a\u3069\u3092\u4f55\u56de\u3082\u5909\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u5358\u7d14\u306b\u3084\u308b\u306e\u3067\u3042\u308c\u3070\u305d\u306e\u5ea6\u306bJava\u306e\u30af\u30e9\u30b9\u3092\u518d\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u6700\u8fd1\u3067\u306fJava\u30b3\u30f3\u30d1\u30a4\u30eb\u901f\u5ea6\u306b\u82e6\u3057\u307e\u3055\u308c\u308b\u3053\u3068\u306f\u306a\u304f\u306a\u3063\u3066\u304d\u3066\u3044\u308b\u3068\u306f\u8a00\u3048\uff08\u8981\u51fa\u5178\uff09\u3001\u5358\u7d14\u306a\u4f4d\u7f6e\u8abf\u6574\u306e\u305f\u3081\u306b\u6bce\u56de\u6bce\u56de\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066relaunch\u3059\u308b\u306e\u306f\u99ac\u9e7f\u3089\u3057\u3044\u3067\u3059\u3057\u3001\u6642\u9593\u306e\u304b\u304b\u308b\u4f5c\u696d\u3067\u3059\u3002\n\n\n## \u89e3\u6c7a\u7b56\n\nPropertiesUtils\u3092\u4f7f\u3063\u3066\u30ec\u30a4\u30a2\u30a6\u30c8\u95a2\u9023\u306e\u5024\u3092properties\u30d5\u30a1\u30a4\u30eb\u3067\u6301\u3061\u307e\u3059\u3002\n\u3053\u306eUtil\u306b\u3064\u3044\u3066\u306f\u4ee5\u524d\u306b\u307e\u3068\u3081\u3066\u3044\u307e\u3059\u3002\n[libGDX\u306eUtils\u30af\u30e9\u30b9\u306e\u30e1\u30e2](http://qiita.com/yyYank/items/4593a02620c5608e59b9)\n\n## \u5b9f\u969b\u306b\u306f\u3069\u3046\u3059\u308b\u304b\n\n\n* \u524d\u6e96\u5099\n\n```java:Hoge.java\n\nimport com.badlogic.gdx.scenes.scene2d.Actor;\nimport com.badlogic.gdx.scenes.scene2d.Group;\nimport com.badlogic.gdx.utils.ObjectMap;\nimport com.badlogic.gdx.utils.PropertiesUtils;\nimport com.badlogic.gdx.utils.StreamUtils;\n\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n/**\n * Created by yy_yank on 2017/02/01.\n */\npublic class Hoge extends Group {\n\n\n    ObjectMap<String, String> debugCache = new ObjectMap<>();\n\n    public Hoge() {\n        // \u51e6\u7406\u8272\u3005\n        try{\n            InputStreamReader reader = new InputStreamReader(getClass().getClassLoader().getResourceAsStream(\"debugCache.properties\"));\n            PropertiesUtils.load(debugCache, reader);\n            StreamUtils.closeQuietly(reader);\n        } catch (IOException e) {\n            // \u5168\u529b\u3067\u63e1\u308a\u3064\u3076\u3057\u3066\u308b\u3051\u3069\u826f\u3044\u5b50\u306f\u771f\u4f3c\u3057\u306a\u3044\u3067\u306d\n        }\n\n        init();\n    }\n    \n    private void init() {\n\n        Actor a = new Actor();\n        a.setScale(Float.parseFloat(debugCache.get(\"a.scale\")));\n        addActor(a);\n        a.setPosition(Float.parseFloat(debugCache.get(\"a.x\")), Float.parseFloat(debugCache.get(\"a.y\")));\n        Actor b = new Actor();\n        b.setPosition(Float.parseFloat(debugCache.get(\"b.x\")), Float.parseFloat(debugCache.get(\"b.y\")));\n        addActor(b);\n        Actor c = new Actor();\n        c.setPosition(Float.parseFloat(debugCache.get(\"c.x\")), Float.parseFloat(debugCache.get(\"c.y\")));\n        addActor(c);\n        Actor d = new Actor();\n        d.setPosition(Float.parseFloat(debugCache.get(\"d.x\")), Float.parseFloat(debugCache.get(\"d.y\")));\n        addActor(d);\n    }\n}\n\n```\n\n\u305d\u3057\u3066\u3001android/assets\u7684\u306a\u3068\u3053\u308d\u306b\u30d7\u30ed\u30d1\u30c6\u30a3\u30d5\u30a1\u30a4\u30eb\u3092\u7f6e\u3044\u3066\u304a\u304d\u307e\u3059\u3002\n\n``` bash:debugCache.properties\na.x=100\na.y=200\na.scale=1\nb.x=100\nb.y=300\nc.x=100\nc.y=400\nd.x=100\nd.y=500\n```\n\u306a\u3093\u3068\u3082\u6ce5\u81ed\u3044\u3067\u3059\u304c\u3001\u3053\u3046\u3059\u308b\u3053\u3068\u3067\u30d7\u30ed\u30d1\u30c6\u30a3\u30d5\u30a1\u30a4\u30eb\u306e\u5024\u3092\u7528\u3044\u3066\u30ec\u30a4\u30a2\u30a6\u30c8\u306e\u8abf\u6574\u3092\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\n\n* \u30b2\u30fc\u30e0\u30a2\u30d7\u30ea\u8d77\u52d5\n\n\u305d\u3057\u3066\u3001\u30b2\u30fc\u30e0\u30a2\u30d7\u30ea\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u7248\u8d77\u52d5\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n* \u6c17\u306b\u306a\u308b\u3068\u3053\u308d\u306e\u4fee\u6b63\n\n\n\u3055\u3063\u304d\u66f8\u3044\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306ea,\uff42,c,d\u3068\u8a00\u3063\u305fActor\u306e\u4f4d\u7f6e\u8abf\u6574\u3092\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u5177\u4f53\u7684\u306b\u306fdesktop/build/resources/main\u914d\u4e0b\u3068\u304b\u306bdebugCache.properties\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u306f\u305a\u306a\u306e\u3067\u305d\u3061\u3089\u3092\u3044\u3058\u3063\u3066\u3044\u304d\u307e\u3059\u3002\u305d\u3046\u3059\u308b\u3053\u3068\u3067\u3001Hoge\u30af\u30e9\u30b9\u306eActor\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u304c\u3055\u308c\u308b\u3054\u3068\u306b\u4f4d\u7f6e\u3092\u8abf\u6574\u51fa\u6765\u308b\u308f\u3051\u3067\u3059\u3002\u306a\u3093\u3068\u3082\u30c0\u30b5\u3044\u3002\u3067\u3082\u3001\u6bce\u56de\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3088\u308a\u304b\u306f\u65e9\u3044\u3067\u3059\u3002\n\n\n## \u4f4d\u7f6e\u8abf\u6574\u304c\u7d42\u308f\u3063\u305f\u3042\u3068\u306f\u3069\u3046\u3059\u308b\u304b\n\n\u3053\u306e```ObjectMap<String, String>```\u578b\u3092\u6bce\u56deparse\u3057\u3066\u6570\u5024\u578b\u306b\u5909\u63db\u3059\u308b\u51e6\u7406\u3060\u3051\u3067\u306f\u82b8\u304c\u7121\u3044\u306e\u3067\u3001\n\u4e00\u5fdc\u5ea7\u6a19\u3084scale\u3001\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba\u304c\u6c7a\u307e\u3063\u305f\u3042\u3068\u3092\u60f3\u5b9a\u3057\u3066\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u30d7\u30ed\u30d1\u30c6\u30a3\u30d5\u30a1\u30a4\u30eb\u306e\u5024\u3092\u9069\u7528\u3059\u308b\u3088\u3046\u66f8\u304d\u63db\u3048\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n\u3061\u3087\u3063\u3068\u30b5\u30dc\u3063\u3066Java SE 7\u76f8\u5f53\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u306f\u76ee\u3092\u3064\u3076\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n```java\nimport com.badlogic.gdx.utils.ObjectMap;\nimport com.badlogic.gdx.utils.PropertiesUtils;\nimport com.badlogic.gdx.utils.StreamUtils;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.nio.charset.Charset;\nimport java.nio.file.*;\nimport java.nio.file.attribute.BasicFileAttributes;\nimport java.util.Arrays;\nimport java.util.List;\n\n\npublic class DebugPropertiesConverter implements InternalConverter{\n\n\n    private ObjectMap<String, String> debugCache;\n    \n    CacheConfigurationFactory factory = new CacheConfigurationFactory() {\n        @Override\n        public String createCacheVariableName() {\n            return \"debugCache\";\n        }\n\n        @Override\n        public String createCacheFileName() {\n            return \"debugCache.properties\";\n        }\n\n        @Override\n        public List<Pair<String, String>> cretateTargetStringPair(String between, String value) {\n            return Arrays.asList(\n                    new Pair<>(\"Integer.parseInt(\"+createCacheVariableName()+\".get(\\\"\"+ between +\"\\\"))\", value),\n                    new Pair<>(\"Double.parseDouble(\"+createCacheVariableName()+\".get(\\\"\"+ between +\"\\\"))\", value),\n                    new Pair<>(\"Float.parseFloat(\"+createCacheVariableName()+\".get(\\\"\"+ between +\"\\\"))\", value + \"f\")\n            );\n        }\n    };\n\n    \n    public static void main(String[] args) throws Exception {\n        new DebugPropertiesConverter().run();\n    }\n\n    public void run() throws Exception {\n        FileVisitor<Path> visitor = new InternalFileVisitor(this);\n        Files.walkFileTree(Paths.get(\"/Users/yy_yank/work/projects/hogehoge/core/src/com/github/yyYank\"\n                ,\"your\"\n                ,\"package\"\n                ,\"dir\"\n        ), visitor);\n    }\n\n\n    @Override\n    public ObjectMap<String, String> readBetweenString() throws IOException {\n        if(debugCache != null) {\n            return debugCache;\n        }\n        InputStreamReader reader = new InputStreamReader(getClass().getClassLoader().getResourceAsStream(factory.createCacheFileName()));\n        this.debugCache = new ObjectMap<>();\n        PropertiesUtils.load(debugCache, reader);\n        System.out.println(debugCache);\n        StreamUtils.closeQuietly(reader);\n        return debugCache;\n    }\n\n    @Override\n    public void executeOnFile(Path file, BasicFileAttributes attrs) throws IOException {\n        ObjectMap<String, String> betweens = readBetweenString();\n        List<String> lines = Files.readAllLines(file, Charset.forName(\"UTF-8\"));\n\n        boolean isRewrite = false;\n        for (ObjectMap.Entry<String, String> between : betweens) {\n            List<Pair<String, String>> targets = factory.cretateTargetStringPair(between.key, between.value);\n            for (Pair<String, String> target : targets) {\n                for (int i = 0; i < lines.size(); i++) {\n                    String line = lines.get(i);\n                    isRewrite = isRewrite ? isRewrite : line.contains(target.key);\n                    lines.set(i, line.replace(target.key, target.value));\n                }\n            }\n        }\n        // rewrite\n        if(isRewrite) {\n            System.out.println(\"rewrite file.... -> \" + file.getFileName());\n            Files.write(file, lines, Charset.forName(\"UTF-8\"));\n        } else {\n            System.out.println(\"[SKIP]\" + file.getFileName());\n        }\n    }\n\n    @Override\n    public void executeOnDir(Path dir, BasicFileAttributes attrs) {\n        // do nothing\n    }\n\n    @Override\n    public boolean filterExtension(Path file) {\n        return file.getFileName().toString().endsWith(\"java\");\n    }\n}\n\ninterface CacheConfigurationFactory {\n    String createCacheVariableName();\n    String createCacheFileName();\n    List<Pair<String, String>> cretateTargetStringPair(String between, String value);\n}\n\ninterface InternalConverter {\n    ObjectMap<String, String> readBetweenString() throws IOException;\n    void executeOnFile(Path file, BasicFileAttributes attrs) throws IOException;\n    void executeOnDir(Path dir, BasicFileAttributes attrs);\n    boolean filterExtension(Path file);\n\n}\n\n\nclass InternalFileVisitor implements FileVisitor<Path> {\n\n\n    private final DebugPropertiesConverter converter;\n\n    public InternalFileVisitor(DebugPropertiesConverter converter) {\n        this.converter = converter;\n    }\n\n    @Override\n    public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n        print(\"preVisitDirectory : \" + dir.getFileName());\n        return FileVisitResult.CONTINUE;\n    }\n\n    @Override\n    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        if(converter.filterExtension(file)) {\n            print(\"visitFile : \" + file.getFileName());\n            converter.executeOnFile(file, attrs);\n        } else {\n            print(\"[SKIP]visitFile : \" + file.getFileName());\n        }\n        return FileVisitResult.CONTINUE;\n    }\n\n    @Override\n    public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {\n        return FileVisitResult.CONTINUE;\n    }\n\n    @Override\n    public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {\n        String error = String.format(\" [exception=%s, message=%s]\", exc.getClass(), exc.getMessage());\n        print(\"visitFileFailed : \" + file.getFileName() + error);\n        return FileVisitResult.CONTINUE;\n    }\n\n    protected void print(String message) {\n        System.out.println(message);\n    }\n}\n\nclass Pair<K, V>{\n    public final K key;\n    public final V value;\n    Pair(K k, V v) {\n        this.key = k;\n        this.value = v;\n    }\n}\n```\n\n\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304c\u30d7\u30ed\u30d1\u30c6\u30a3\u30d5\u30a1\u30a4\u30eb\u3067\u8a2d\u5b9a\u3057\u305f\u5024\u306b\u66f8\u304d\u63db\u308f\u308a\u307e\u3059\u3002\n\n\n\n## \u307e\u3068\u3081\n\n\u9759\u7684\u578b\u4ed8\u3051\u306f\u3042\u308a\u304c\u305f\u3044\u3051\u3069\u3001\u52d5\u7684\u306b\u3057\u305f\u3044\u90e8\u5206\u3082\u3042\u308b\uff01\n\u672c\u5f53\u306f\u3082\u3063\u3068\u30b9\u30de\u30fc\u30c8\u306a\u611f\u3058\u306b\u3084\u308a\u305f\u3044\u3002\n", "tags": ["Java", "libGDX"]}