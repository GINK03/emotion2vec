{"tags": ["ESP8266", "ESP-WROOM-02", "AQM0802", "borgSensorSystem1", "characterDisplay"], "context": " More than 1 year has passed since last update.\n\u52d5\u4f5c\u78ba\u8a8d\nESP-WROOM-02\nArduino IDE on Windows 7 pro 32bit\n\n\n\n\u56de\u8def\nhttp://qiita.com/exabugs/items/9d1b66aa1d22805afbc8\n\u306e\u56de\u8def\u901a\u308a\u306b\u5b9f\u88c5\n\u95a2\u9023\u56de\u8def\u56f3 https://upverter.com/7of9/ed476abaa01fdfbd/AQM0802-with-capacitor/\n\u4f7f\u7528\u30bb\u30c3\u30c8 http://qiita.com/7of9/items/bf5a653d1925cbb38569\n\n\u624b\u9806\n\nArduino IDE \u306b\u3066 esp8266_160217_AQM0802.ino \u3092\u4f5c\u6210\n\u65b0\u898f\u30bf\u30d6\u306b\u3066 AQM0802lib.ino \u3092\u8ffd\u52a0 ( \u95a2\u9023 )\n\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u8cbc\u308b\n\ncode (v0.2)\n\nesp8266_160217_AQM0802.ino\n#include <Wire.h>\n\nvoid setup() {\n  Serial.begin(115200);\n  Serial.println(\"\");  \n\n  Wire.begin(); // (SDA,SCL) Default 4 and 5\n\n  AQM0802_Initialize(/* cursorOn=*/true, /* cursorPosOn=*/true, /* contrast=*/7);\n//  Test_AQM0802_cursorOn_posOff_contrastLow();\n//  Test_AQM0802_cursorOn_posOn_contrastLow();\n//  Test_AQM0802_cursorOn_posOn_contrastHigh();\n\n  displayDateTime();\n}\n\nvoid displayDateTime()\n{\n  uint8_t pos;\n  pos = 0x80 | (0 * 0x40); // DDRAM address\n  String currentDate = \"20160217\";\n  AQM0802_WriteSingleInstruction(pos);\n  AQM0802_WriteData( (uint8_t *)currentDate.c_str(), currentDate.length() );\n\n  pos = 0x80 | (1 * 0x40); // DDRAM address\n  String currentTime = \"22:44\";\n  AQM0802_WriteSingleInstruction(pos);\n  AQM0802_WriteData( (uint8_t *)currentTime.c_str(), currentTime.length() ); \n}\n\nvoid loop() \n{\n\n}\n\n\n\nAQM0802lib.ino\n#include <Wire.h>\n\n/*\n * v0.2 2016 Feb. 17\n *  - add test functions()\n *    + add Test_AQM0802_cursorOn_posOn_contrastHigh()\n *    + add Test_AQM0802_cursorOn_posOn_contrastLow()\n *    + add Test_AQM0802_cursorOn_posOff_contrastLow()\n * v0.1 2016 Feb. 17\n *  - add AQM0802_Initialize()\n *  - add AQM0802_Clear()\n *  - add AQM0802_WriteData()\n *  - add AQM0802_WriteInstruction()\n *  - add writeToDevice()\n *\n * -------\n * Special thanks to exabugs for ( http://qiita.com/exabugs/items/9d1b66aa1d22805afbc8 )\n */\n\nstatic const uint8_t kDeviceAddr = 0x3e;\n\nstatic uint8_t ControlByteList[] = {\n  0x00, // Instruction write operation. ( Co=0, Rs=0 )\n  0x40, // Data write operation. ( Co=0, Rs=1 )\n};\n\nenum {\n  TYPE_INSTRUCITON = 0,\n  TYPE_DATA,\n};\n\n//---------------------------------------------------------------------------------\n\n// private functions ---------------------------\nvoid writeToDevice(int type, uint8_t *dataByte, size_t len) \n{\n  for (int idx = 0; idx < len; idx++) {\n    Wire.beginTransmission(kDeviceAddr);\n    Wire.write(ControlByteList[type]);\n    Wire.write(dataByte[idx]);\n    Wire.endTransmission();\n    delayMicroseconds(27); // 26.3us\n  }\n}\n\n//---------------------------------------------------------------------------------\n\n// public functions ---------------------------\nvoid AQM0802_WriteSingleInstruction(uint8_t data) \n{ \n  size_t len = 1;\n  uint8_t list[] = {data};\n  writeToDevice(TYPE_INSTRUCITON, list, len); \n}\n\nvoid AQM0802_WriteInstructions(uint8_t *data, int len) \n{ \n  writeToDevice(TYPE_INSTRUCITON, data, len); \n}\n\nvoid AQM0802_WriteData(uint8_t *data, size_t len) \n{ \n  writeToDevice(TYPE_DATA, data, len); \n}\n\nvoid AQM0802_Clear()\n{\n    AQM0802_WriteSingleInstruction(0x01);\n}\n\nvoid AQM0802_Initialize(bool cursorOn, bool cursorPosOn, uint8_t contrast)\n{ \n  // \n  delay(40); // Wait time > 40ms after VDD stable\n\n  // Function set\n  AQM0802_WriteSingleInstruction(0x38);\n\n  // Function set\n  AQM0802_WriteSingleInstruction(0x39);\n\n  // Internal OSC frequency\n  AQM0802_WriteSingleInstruction(0x14);\n\n  // { Contrast set -----------------------------\n  uint8_t ctrst = contrast;\n  if (ctrst > 0b1111) {\n    ctrst = 0b1111;\n  }\n  AQM0802_WriteSingleInstruction(0x70 | ctrst);\n  // } Contrast set -----------------------------\n\n  // Power/ICON/Contrast control\n  AQM0802_WriteSingleInstruction(0x56);\n\n  // Follower control\n  AQM0802_WriteSingleInstruction(0x6C);\n\n  // Wait time > 200mS (for power stable)\n  delay(200);\n\n  // Function set\n  AQM0802_WriteSingleInstruction(0x38);\n\n  // { Display ON/OFF control -----------------------\n  uint8_t extra = 0x0;\n  if (cursorOn) {\n    extra = extra | 0b10;\n  }\n  if (cursorPosOn) {\n    extra = extra | 0b11;    \n  }\n  AQM0802_WriteSingleInstruction(0x0C | extra);\n  // } Display ON/OFF control -----------------------\n\n  // Clear Display\n  AQM0802_WriteSingleInstruction(0x01);\n\n  // Wait time > 1.08ms\n  delay(2);\n}\n\n\n//---------------------------------------------------------------------------------\n\n// test functions ---------------------------\n\nvoid Test_AQM0802_cursorOn_posOff_contrastLow()\n{\n  AQM0802_Initialize(/* cursorOn=*/true, /* cursorPosOn=*/false, /* contrast=*/1);\n}\n\nvoid Test_AQM0802_cursorOn_posOn_contrastLow()\n{\n  AQM0802_Initialize(/* cursorOn=*/true, /* cursorPosOn=*/true, /* contrast=*/1);\n}\n\nvoid Test_AQM0802_cursorOn_posOn_contrastHigh()\n{\n  AQM0802_Initialize(/* cursorOn=*/true, /* cursorPosOn=*/true, /* contrast=*/15);\n}\n\n\n\n\u4f7f\u3044\u65b9\nesp8266_160217_AQM0802.ino \u30d5\u30a1\u30a4\u30eb\u306e\u4ee5\u4e0b\u306b\u3066\u3001\u73fe\u5728\u65e5\u6642\u3092\u5165\u529b\u3057\u3066\u30d3\u30eb\u30c9\u3059\u308b\u3002\n  String currentDate = \"20160217\";\n\n  String currentTime = \"22:44\";\n\n\u30bf\u30a4\u30df\u30f3\u30b0\u3088\u304f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u6d41\u3057\u8fbc\u3093\u3067\u5b9f\u884c\u3059\u308b\u3002\n\u904b\u304c\u826f\u3051\u308c\u3070\u3001\u8868\u793a\u6642\u523b\u3068\u73fe\u5728\u6642\u523b(JST)\u304c\u5408\u3046\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n\n\u88dc\u8db3\n\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5185\u5bb9\u306f\u3082\u3046\u5c11\u3057\u7df4\u3089\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002\n\n\u521d\u671f\u5316\u6642\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u500b\u5225\u306b\u6e21\u3059\u304b\u3001\u69cb\u9020\u4f53\u6e21\u3057\u306b\u3059\u308b\u304b\n\u30e9\u30c3\u30d1\u30fc\u95a2\u6570\u3092\u7528\u610f\u3057\u3066\u3001\u7d30\u304b\u3044\u8a2d\u5b9a\u306f\u3057\u306a\u304f\u3066\u3044\u3044\u3088\u3046\u306b\u3059\u308b\u304b\n\u9014\u4e2d\u3067\u30b3\u30f3\u30c8\u30e9\u30b9\u30c8\u3092\u5909\u66f4\u3059\u308b\u306a\u3069\u306e\u95a2\u6570\u306f\u3069\u3046\u304b\n\u8868\u793a\u4f4d\u7f6e\u3068\u6587\u5b57\u5217\u3092\u6307\u5b9a\u3059\u308b\u95a2\u6570\u304c\u3042\u308b\u3068\u4fbf\u5229\u305d\u3046\u3060\nArduino\u306edatetime\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u52c9\u5f37\u304c\u5fc5\u8981\n\u672c\u5f53\u306fGrenning\u306b\u3088\u308bDual Target\u306b\u3082\u3068\u3065\u3044\u3066\u5b9f\u88c5\u3057\u305f\u3044\u3002\u305d\u3046\u3059\u308c\u3070\u3001\u4ed6\u306e\u30de\u30a4\u30b3\u30f3\u306b\u5fdc\u7528\u304c\u805e\u304f\n\n```txt:\u52d5\u4f5c\u78ba\u8a8d\nESP-WROOM-02\nArduino IDE on Windows 7 pro 32bit\n```\n\n## \u56de\u8def\n\nhttp://qiita.com/exabugs/items/9d1b66aa1d22805afbc8\n\u306e\u56de\u8def\u901a\u308a\u306b\u5b9f\u88c5\n\n\n\u95a2\u9023\u56de\u8def\u56f3 https://upverter.com/7of9/ed476abaa01fdfbd/AQM0802-with-capacitor/\n\n\u4f7f\u7528\u30bb\u30c3\u30c8 http://qiita.com/7of9/items/bf5a653d1925cbb38569\n\n\n## \u624b\u9806\n\n- Arduino IDE \u306b\u3066 esp8266_160217_AQM0802.ino \u3092\u4f5c\u6210\n- \u65b0\u898f\u30bf\u30d6\u306b\u3066 AQM0802lib.ino \u3092\u8ffd\u52a0 ( [\u95a2\u9023](http://qiita.com/7of9/items/04e701a948ea4d1876ed) )\n\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u8cbc\u308b\n\n## code (v0.2)\n\n```esp8266_160217_AQM0802.ino\n#include <Wire.h>\n\nvoid setup() {\n  Serial.begin(115200);\n  Serial.println(\"\");  \n\n  Wire.begin(); // (SDA,SCL) Default 4 and 5\n\n  AQM0802_Initialize(/* cursorOn=*/true, /* cursorPosOn=*/true, /* contrast=*/7);\n//  Test_AQM0802_cursorOn_posOff_contrastLow();\n//  Test_AQM0802_cursorOn_posOn_contrastLow();\n//  Test_AQM0802_cursorOn_posOn_contrastHigh();\n\n  displayDateTime();\n}\n\nvoid displayDateTime()\n{\n  uint8_t pos;\n  pos = 0x80 | (0 * 0x40); // DDRAM address\n  String currentDate = \"20160217\";\n  AQM0802_WriteSingleInstruction(pos);\n  AQM0802_WriteData( (uint8_t *)currentDate.c_str(), currentDate.length() );\n\n  pos = 0x80 | (1 * 0x40); // DDRAM address\n  String currentTime = \"22:44\";\n  AQM0802_WriteSingleInstruction(pos);\n  AQM0802_WriteData( (uint8_t *)currentTime.c_str(), currentTime.length() ); \n}\n\nvoid loop() \n{\n\n}\n```\n\n```AQM0802lib.ino\n#include <Wire.h>\n\n/*\n * v0.2 2016 Feb. 17\n *  - add test functions()\n *    + add Test_AQM0802_cursorOn_posOn_contrastHigh()\n *    + add Test_AQM0802_cursorOn_posOn_contrastLow()\n *    + add Test_AQM0802_cursorOn_posOff_contrastLow()\n * v0.1 2016 Feb. 17\n *  - add AQM0802_Initialize()\n *  - add AQM0802_Clear()\n *  - add AQM0802_WriteData()\n *  - add AQM0802_WriteInstruction()\n *  - add writeToDevice()\n *\n * -------\n * Special thanks to exabugs for ( http://qiita.com/exabugs/items/9d1b66aa1d22805afbc8 )\n */\n\nstatic const uint8_t kDeviceAddr = 0x3e;\n\nstatic uint8_t ControlByteList[] = {\n  0x00, // Instruction write operation. ( Co=0, Rs=0 )\n  0x40, // Data write operation. ( Co=0, Rs=1 )\n};\n\nenum {\n  TYPE_INSTRUCITON = 0,\n  TYPE_DATA,\n};\n\n//---------------------------------------------------------------------------------\n\n// private functions ---------------------------\nvoid writeToDevice(int type, uint8_t *dataByte, size_t len) \n{\n  for (int idx = 0; idx < len; idx++) {\n    Wire.beginTransmission(kDeviceAddr);\n    Wire.write(ControlByteList[type]);\n    Wire.write(dataByte[idx]);\n    Wire.endTransmission();\n    delayMicroseconds(27); // 26.3us\n  }\n}\n\n//---------------------------------------------------------------------------------\n\n// public functions ---------------------------\nvoid AQM0802_WriteSingleInstruction(uint8_t data) \n{ \n  size_t len = 1;\n  uint8_t list[] = {data};\n  writeToDevice(TYPE_INSTRUCITON, list, len); \n}\n\nvoid AQM0802_WriteInstructions(uint8_t *data, int len) \n{ \n  writeToDevice(TYPE_INSTRUCITON, data, len); \n}\n\nvoid AQM0802_WriteData(uint8_t *data, size_t len) \n{ \n  writeToDevice(TYPE_DATA, data, len); \n}\n\nvoid AQM0802_Clear()\n{\n    AQM0802_WriteSingleInstruction(0x01);\n}\n\nvoid AQM0802_Initialize(bool cursorOn, bool cursorPosOn, uint8_t contrast)\n{ \n  // \n  delay(40); // Wait time > 40ms after VDD stable\n\n  // Function set\n  AQM0802_WriteSingleInstruction(0x38);\n\n  // Function set\n  AQM0802_WriteSingleInstruction(0x39);\n\n  // Internal OSC frequency\n  AQM0802_WriteSingleInstruction(0x14);\n\n  // { Contrast set -----------------------------\n  uint8_t ctrst = contrast;\n  if (ctrst > 0b1111) {\n    ctrst = 0b1111;\n  }\n  AQM0802_WriteSingleInstruction(0x70 | ctrst);\n  // } Contrast set -----------------------------\n\n  // Power/ICON/Contrast control\n  AQM0802_WriteSingleInstruction(0x56);\n\n  // Follower control\n  AQM0802_WriteSingleInstruction(0x6C);\n\n  // Wait time > 200mS (for power stable)\n  delay(200);\n\n  // Function set\n  AQM0802_WriteSingleInstruction(0x38);\n\n  // { Display ON/OFF control -----------------------\n  uint8_t extra = 0x0;\n  if (cursorOn) {\n    extra = extra | 0b10;\n  }\n  if (cursorPosOn) {\n    extra = extra | 0b11;    \n  }\n  AQM0802_WriteSingleInstruction(0x0C | extra);\n  // } Display ON/OFF control -----------------------\n\n  // Clear Display\n  AQM0802_WriteSingleInstruction(0x01);\n\n  // Wait time > 1.08ms\n  delay(2);\n}\n\n\n//---------------------------------------------------------------------------------\n\n// test functions ---------------------------\n\nvoid Test_AQM0802_cursorOn_posOff_contrastLow()\n{\n  AQM0802_Initialize(/* cursorOn=*/true, /* cursorPosOn=*/false, /* contrast=*/1);\n}\n\nvoid Test_AQM0802_cursorOn_posOn_contrastLow()\n{\n  AQM0802_Initialize(/* cursorOn=*/true, /* cursorPosOn=*/true, /* contrast=*/1);\n}\n\nvoid Test_AQM0802_cursorOn_posOn_contrastHigh()\n{\n  AQM0802_Initialize(/* cursorOn=*/true, /* cursorPosOn=*/true, /* contrast=*/15);\n}\n```\n\n## \u4f7f\u3044\u65b9\n\nesp8266_160217_AQM0802.ino \u30d5\u30a1\u30a4\u30eb\u306e\u4ee5\u4e0b\u306b\u3066\u3001\u73fe\u5728\u65e5\u6642\u3092\u5165\u529b\u3057\u3066\u30d3\u30eb\u30c9\u3059\u308b\u3002\n\n```\n  String currentDate = \"20160217\";\n```\n```\n  String currentTime = \"22:44\";\n```\n\n\u30bf\u30a4\u30df\u30f3\u30b0\u3088\u304f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u6d41\u3057\u8fbc\u3093\u3067\u5b9f\u884c\u3059\u308b\u3002\n\u904b\u304c\u826f\u3051\u308c\u3070\u3001\u8868\u793a\u6642\u523b\u3068\u73fe\u5728\u6642\u523b(JST)\u304c\u5408\u3046\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n\n![DSC_0098.JPG](https://qiita-image-store.s3.amazonaws.com/0/32870/9bad4b29-2fac-e70c-c5b0-a0c9281023f9.jpeg)\n\n\n## \u88dc\u8db3\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5185\u5bb9\u306f\u3082\u3046\u5c11\u3057\u7df4\u3089\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002\n\n- \u521d\u671f\u5316\u6642\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u500b\u5225\u306b\u6e21\u3059\u304b\u3001\u69cb\u9020\u4f53\u6e21\u3057\u306b\u3059\u308b\u304b\n- \u30e9\u30c3\u30d1\u30fc\u95a2\u6570\u3092\u7528\u610f\u3057\u3066\u3001\u7d30\u304b\u3044\u8a2d\u5b9a\u306f\u3057\u306a\u304f\u3066\u3044\u3044\u3088\u3046\u306b\u3059\u308b\u304b\n- \u9014\u4e2d\u3067\u30b3\u30f3\u30c8\u30e9\u30b9\u30c8\u3092\u5909\u66f4\u3059\u308b\u306a\u3069\u306e\u95a2\u6570\u306f\u3069\u3046\u304b\n- \u8868\u793a\u4f4d\u7f6e\u3068\u6587\u5b57\u5217\u3092\u6307\u5b9a\u3059\u308b\u95a2\u6570\u304c\u3042\u308b\u3068\u4fbf\u5229\u305d\u3046\u3060\n\n- Arduino\u306edatetime\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u52c9\u5f37\u304c\u5fc5\u8981\n\n- \u672c\u5f53\u306fGrenning\u306b\u3088\u308bDual Target\u306b\u3082\u3068\u3065\u3044\u3066\u5b9f\u88c5\u3057\u305f\u3044\u3002\u305d\u3046\u3059\u308c\u3070\u3001\u4ed6\u306e\u30de\u30a4\u30b3\u30f3\u306b\u5fdc\u7528\u304c\u805e\u304f\n \n"}