{"tags": ["QEMU"], "context": " More than 1 year has passed since last update.I/O \u30dd\u30fc\u30c8\u3092\u5229\u7528\u3057\u3066\u901a\u5e38\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u69d8\u306aread/write/lseek\u306e\u30a2\u30af\u30bb\u30b9\u3092\u8a66\u3057\u307e\u3057\u305f\u3002\n\u306a\u304a\u3001I/O\u30dd\u30fc\u30c8\u306f 1 byte/ 1 port \u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001\u4f8b\u3048\u3070 4byte \u6bce\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5834\u5408\u306f\u30dd\u30fc\u30c8\u756a\u53f7\u30824\u3064\u305a\u3064\u5897\u3048\u3066\u3044\u304d\u307e\u3059\u3002\n\nQEMU\u4eee\u60f3\u30c7\u30d0\u30a4\u30b9\nI/O \u30dd\u30fc\u30c8\u306eread/write\u306b\u5bfe\u5fdc\u3059\u308bMemoryRegionOps\u306e\u95a2\u6570\u3092\u7528\u610f\u3059\u308c\u3070\u826f\u3044\u3067\u3059\u3002\n\u3053\u3053\u3067\u306fI/O \u30dd\u30fc\u30c8\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u306e 0 \u301c TEST_PIO_DATASIZE \u3092\u901a\u5e38\u306e\n\u30d5\u30a1\u30a4\u30eb\u306e\u7528\u306b(1 \u30d0\u30a4\u30c8\u305a\u3064)\u4f7f\u7528\u3059\u308b\u5b9a\u7fa9\u306b\u3057\u307e\u3057\u305f\u3002\n\u307e\u305f\u3001\u30e1\u30e2\u30ea\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u9818\u57df\u306f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u521d\u671f\u5316\u95a2\u6570\u3067\u521d\u671f\u5316\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nstatic uint64_t\ntest_pci_pio_read(void *opaque, hwaddr addr, unsigned size)\n{\n    TestPCIState *s = opaque;\n    tprintf(\"addr %ld, size %d\\n\", addr, size);\n\n    if(addr >= TEST_PIO && addr < TEST_PIO_DATASIZE) {\n        return s->piodata[addr];\n    } else {\n         /* .... */\n    }\n}\n\nstatic void\ntest_pci_pio_write(void *opaque, hwaddr addr, uint64_t val,\n                       unsigned size)\n{\n    TestPCIState *s = opaque;\n    PCIDevice *pdev = PCI_DEVICE(s);\n\n    tprintf(\"addr %ld, size %d\\n\", addr, size);\n\n    if(addr >= TEST_PIO && addr < TEST_PIO_DATASIZE) {\n        s->piodata[addr] = (char)val;\n    } else {\n        /* ... */\n    }\n}\n\n// test_pci_init \u4e2d\n    // init local parameter\n    for(i=0; i<TEST_PIO_DATASIZE; i++){\n        s->piodata[i] = i;\n    }\n\n\u95a2\u6570\u306e\u7b2c\u4e00\u5f15\u6570 opaque \u306f\u3053\u306e\u30c7\u30d0\u30a4\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\nTestPCIState \u3078\u30ad\u30e3\u30b9\u30c8\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001addr \u306f\u78ba\u4fdd\u3055\u308c\u305fI/O\u30dd\u30fc\u30c8\u756a\u53f7\u304b\u3089\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3068\u306a\u308a\u307e\u3059\u3002\n\u306a\u304a\u3001I/O \u30dd\u30fc\u30c8\u306e\u305d\u306e\u4ed6\u306e\u9818\u57df\u306f\u5f8c\u8ff0\u306eioctl\u3067\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n\u30c7\u30d0\u30a4\u30b9\u30c9\u30e9\u30a4\u30d0\nfile_operations \u69cb\u9020\u4f53\u3067\u5404\u7a2e\u95a2\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\nssize_t test_pci_write(struct file *filp, const char __user *buf, size_t count, loff_t *f_ops)\n{\n    int retval;\n    char val;\n    unsigned int write_num = 0;\n\n    tprintk(\"count %d pos %lld\\n\", count, *f_ops);\n\n    while(write_num < count) {\n        tprintk(\"port io number:%lx\\n\", dev_data->pio_base+*f_ops);\n\n        retval = get_user(val, &buf[write_num++]);\n        if(retval) break; // 0 on success\n\n        outb(val, dev_data->pio_base+*f_ops);\n        (*f_ops)++;\n    }\n\n    return write_num;\n}\n\n// read from port io per 1 byte\nssize_t test_pci_read(struct file *filp, char __user *buf, size_t count, loff_t *f_ops)\n{\n    int retval;\n    char val = 0;\n    unsigned int read_num = 0;\n\n    tprintk(\"count %d pos %lld\\n\", count, *f_ops);\n\n    // read from ioport\n    while (read_num < count) {\n        tprintk(\"port io number:%lx\\n\", dev_data->pio_base+*f_ops);\n\n        val = inb(dev_data->pio_base + *f_ops); // read 1 byte\n        // printk(\"val %d\\n\", val);\n        retval = put_user(val, &buf[read_num++]);\n        if(retval) break; // 0 on success\n\n        (*f_ops)++;\n    }\n\n    return read_num;\n}\n\nloff_t test_pci_llseek(struct file *filp, loff_t off, int whence)\n{\n    loff_t newpos =-1;\n\n    tprintk(\"lseek whence:%d\\n\", whence);\n    switch(whence) {\n    case SEEK_SET:\n      newpos = off;\n      break;\n\n        case SEEK_CUR:\n      newpos = filp->f_pos + off;\n      break;\n\n        case SEEK_END:\n      newpos = dev_data->pio_memsize + off;\n      break;\n\n    default: /* can't happen */\n            return -EINVAL;\n    }\n\n    if (newpos < 0) return -EINVAL;\n\n  filp->f_pos = newpos;\n  return newpos;\n}\n\nI/O\u30dd\u30fc\u30c8\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306b\u306f inb/inw/inl \u53ca\u3073outb/outw/outl \u95a2\u6570\u3092\u7528\u3044\u307e\u3059\n(\u305d\u308c\u305e\u308c1,2,4\u30d0\u30a4\u30c8)\u3002\u306a\u304a64\u30d3\u30c3\u30c8\u74b0\u5883\u3067\u3042\u3063\u3066\u30821\u5ea6\u306b8\u30d0\u30a4\u30c8\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\n\u306f\u51fa\u6765\u307e\u305b\u3093\u3002\u3053\u308c\u3089\u306e\u95a2\u6570\u306f\u8aad\u307f\u8fbc\u3093\u3060/\u66f8\u304d\u8fbc\u3093\u3060\u30d0\u30a4\u30c8\u6570\u3092\u8fd4\u308a\u5024\u3068\u3057\u307e\u3059\u3002\n\u30e6\u30fc\u30b6\u30fc\u7a7a\u9593\u3068\u306e\u30c7\u30fc\u30bf\u306e\u3084\u308a\u53d6\u308a\u306b\u306fget_user/put_user \u30de\u30af\u30ed\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001*f_pos\u306f\u521d\u671f\u50240\u3067(\u3053\u306e\u3088\u3046\u306b\u901a\u5e38\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u7528\u306b\u30c7\u30d0\u30a4\u30b9\u3092\u64cd\u4f5c\u3059\u308b\u306a\u3089\u3070)\n\u30c9\u30e9\u30a4\u30d0\u304c\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\n\u4eca\u56de\u306fread/write \u3068\u3082\u306b1\u30d0\u30a4\u30c8\u305a\u3064\u8aad\u307f\u66f8\u304d\u3092\u884c\u3044\u3001\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u66f4\u65b0\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30e6\u30fc\u30b6\u30d7\u30ed\u30b0\u30e9\u30e0\n\u901a\u5e38\u306e\u30d5\u30a1\u30a4\u30eb\u3068\u540c\u3058\u3088\u3046\u306bread/write/lseek\u95a2\u6570\u3092\u547c\u3079\u307e\u3059\u3002\n\u4e00\u5ea6read/write \u3092\u3059\u308b\u3068\u30aa\u30d5\u30bb\u30c3\u30c8\u304c\u305a\u308c\u308b\u306e\u3067\u3001lseek\u3067\u306f\u3058\u3081\u304b\u3089\u306b\u623b\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001I/O \u30dd\u30fc\u30c8\u304b\u3089TEST_PIO_DATASIZE\u5206 read,\n\u305d\u308c\u3089\u306e\u5024\u3092+10\u3057\u3066write,\u518d\u5ea6read \u3068\u3044\u3063\u305f\u30c6\u30b9\u30c8\u3092\u3057\u3066\u3044\u307e\u3059\u3002\nvoid read_device(int fd)\n{\n    char buf[TEST_PIO_DATASIZE], *p;\n    int ret; // ssize_t\n\n    ret = read(fd, &buf, sizeof(buf)); \n    if(ret > 0) {\n        p = buf;\n        printf(\"read device : %d bytes read\\n\", ret);\n        while(ret--) printf(\"%2d \", *p++);\n    } else {\n        printf(\"read error\");\n    }\n\n    printf(\"\\n\");\n}\n\nvoid write_device(int fd, void *buf, unsigned int size)\n{\n    int ret;\n\n    ret = write(fd, buf, size);\n    if(ret < 0) {\n        printf(\"write error\");\n    }\n    printf(\"write device : %d bytes write\\n\", ret);\n}\n\nvoid portio_test(int fd)\n{\n    char buf[TEST_PIO_DATASIZE];\n    int i;\n\n    printf(\"\\n---- start portio test ----\\n\");\n    read_device(fd);\n  lseek(fd, 0, SEEK_SET);\n\n    for (i = 0; i < TEST_PIO_DATASIZE; i++) {\n        buf[i] = i+10;\n    }\n    write_device(fd, buf, TEST_PIO_DATASIZE);\n  lseek(fd, 0, SEEK_SET);\n\n    read_device(fd);\n\n    printf(\"\\n---- end portio test ----\\n\");\n}\n\n\n\u5b9f\u884c\u7d50\u679c\nportio_test \u306e\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n---- start portio test ----\n** (100) test_pci_read       : count 6 pos 0\n** (104) test_pci_read       : port io number:c000\n## (118) test_pci_pio_read   : addr 0, size 1\n** (104) test_pci_read       : port io number:c001\n## (118) test_pci_pio_read   : addr 1, size 1\n** (104) test_pci_read       : port io number:c002\n## (118) test_pci_pio_read   : addr 2, size 1\n** (104) test_pci_read       : port io number:c003\n## (118) test_pci_pio_read   : addr 3, size 1\n** (104) test_pci_read       : port io number:c004\n## (118) test_pci_pio_read   : addr 4, size 1\n** (104) test_pci_read       : port io number:c005\n## (118) test_pci_pio_read   : addr 5, size 1\nread device : 6 bytes read\n0 1 2 3 4 5\n** (121) test_pci_llseek     : lseek whence:0\n** ( 78) test_pci_write      : count 6 pos 0\n** ( 81) test_pci_write      : port io number:c000\n## (155) test_pci_pio_write  : addr 0, size 1\n** ( 81) test_pci_write      : port io number:c001\n## (155) test_pci_pio_write  : addr 1, size 1\n** ( 81) test_pci_write      : port io number:c002\n## (155) test_pci_pio_write  : addr 2, size 1\n** ( 81) test_pci_write      : port io number:c003\n## (155) test_pci_pio_write  : addr 3, size 1\n** ( 81) test_pci_write      : port io number:c004\n## (155) test_pci_pio_write  : addr 4, size 1\n** ( 81) test_pci_write      : port io number:c005\n## (155) test_pci_pio_write  : addr 5, size 1\nwrite device : 6 bytes write\n** (121) test_pci_llseek     : lseek whence:0\n** (100) test_pci_read       : count 6 pos 0\n** (104) test_pci_read       : port io number:c000\n## (118) test_pci_pio_read   : addr 0, size 1\n** (104) test_pci_read       : port io number:c001\n## (118) test_pci_pio_read   : addr 1, size 1\n** (104) test_pci_read       : port io number:c002\n## (118) test_pci_pio_read   : addr 2, size 1\n** (104) test_pci_read       : port io number:c003\n## (118) test_pci_pio_read   : addr 3, size 1\n** (104) test_pci_read       : port io number:c004\n## (118) test_pci_pio_read   : addr 4, size 1\n** (104) test_pci_read       : port io number:c005\n## (118) test_pci_pio_read   : addr 5, size 1\nread device : 6 bytes read\n10 11 12 13 14 15\n\n---- end portio test ----\n\n\n\u306f\u3058\u3081: (1) \u4f5c\u3063\u305f\u3082\u306e\n\u524d: (4) \u4eee\u60f3\u30c7\u30d0\u30a4\u30b9/\u30c9\u30e9\u30a4\u30d0\u306e\u767b\u9332\n\u6b21: (6) \u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u30c9I/O / ioctl \u306e\u4f7f\u7528\nI/O \u30dd\u30fc\u30c8\u3092\u5229\u7528\u3057\u3066\u901a\u5e38\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u69d8\u306aread/write/lseek\u306e\u30a2\u30af\u30bb\u30b9\u3092\u8a66\u3057\u307e\u3057\u305f\u3002\n\n\u306a\u304a\u3001I/O\u30dd\u30fc\u30c8\u306f 1 byte/ 1 port \u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001\u4f8b\u3048\u3070 4byte \u6bce\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5834\u5408\u306f\u30dd\u30fc\u30c8\u756a\u53f7\u30824\u3064\u305a\u3064\u5897\u3048\u3066\u3044\u304d\u307e\u3059\u3002\n\n# QEMU\u4eee\u60f3\u30c7\u30d0\u30a4\u30b9\nI/O \u30dd\u30fc\u30c8\u306eread/write\u306b\u5bfe\u5fdc\u3059\u308bMemoryRegionOps\u306e\u95a2\u6570\u3092\u7528\u610f\u3059\u308c\u3070\u826f\u3044\u3067\u3059\u3002\n\u3053\u3053\u3067\u306fI/O \u30dd\u30fc\u30c8\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u306e 0 \u301c TEST_PIO_DATASIZE \u3092\u901a\u5e38\u306e\n\u30d5\u30a1\u30a4\u30eb\u306e\u7528\u306b(1 \u30d0\u30a4\u30c8\u305a\u3064)\u4f7f\u7528\u3059\u308b\u5b9a\u7fa9\u306b\u3057\u307e\u3057\u305f\u3002\n\n\u307e\u305f\u3001\u30e1\u30e2\u30ea\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u9818\u57df\u306f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u521d\u671f\u5316\u95a2\u6570\u3067\u521d\u671f\u5316\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```c\nstatic uint64_t\ntest_pci_pio_read(void *opaque, hwaddr addr, unsigned size)\n{\n\tTestPCIState *s = opaque;\n\ttprintf(\"addr %ld, size %d\\n\", addr, size);\n\n\tif(addr >= TEST_PIO && addr < TEST_PIO_DATASIZE) {\n\t\treturn s->piodata[addr];\n\t} else {\n\t\t /* .... */\n\t}\n}\n\nstatic void\ntest_pci_pio_write(void *opaque, hwaddr addr, uint64_t val,\n                       unsigned size)\n{\n\tTestPCIState *s = opaque;\n\tPCIDevice *pdev = PCI_DEVICE(s);\n\t\n\ttprintf(\"addr %ld, size %d\\n\", addr, size);\n\n\tif(addr >= TEST_PIO && addr < TEST_PIO_DATASIZE) {\n\t\ts->piodata[addr] = (char)val;\n\t} else {\n\t\t/* ... */\n\t}\n}\n\n// test_pci_init \u4e2d\n\t// init local parameter\n\tfor(i=0; i<TEST_PIO_DATASIZE; i++){\n\t\ts->piodata[i] = i;\n\t}\n```\n\n\u95a2\u6570\u306e\u7b2c\u4e00\u5f15\u6570 opaque \u306f\u3053\u306e\u30c7\u30d0\u30a4\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\nTestPCIState \u3078\u30ad\u30e3\u30b9\u30c8\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001addr \u306f\u78ba\u4fdd\u3055\u308c\u305fI/O\u30dd\u30fc\u30c8\u756a\u53f7\u304b\u3089\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3068\u306a\u308a\u307e\u3059\u3002\n\u306a\u304a\u3001I/O \u30dd\u30fc\u30c8\u306e\u305d\u306e\u4ed6\u306e\u9818\u57df\u306f\u5f8c\u8ff0\u306eioctl\u3067\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n\n# \u30c7\u30d0\u30a4\u30b9\u30c9\u30e9\u30a4\u30d0\nfile_operations \u69cb\u9020\u4f53\u3067\u5404\u7a2e\u95a2\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n```c\nssize_t test_pci_write(struct file *filp, const char __user *buf, size_t count, loff_t *f_ops)\n{\n\tint retval;\n\tchar val;\n\tunsigned int write_num = 0;\n\n\ttprintk(\"count %d pos %lld\\n\", count, *f_ops);\n\n\twhile(write_num < count) {\n\t\ttprintk(\"port io number:%lx\\n\", dev_data->pio_base+*f_ops);\n\n\t\tretval = get_user(val, &buf[write_num++]);\n\t\tif(retval) break; // 0 on success\n\n\t\toutb(val, dev_data->pio_base+*f_ops);\n\t\t(*f_ops)++;\n\t}\n\n\treturn write_num;\n}\n\n// read from port io per 1 byte\nssize_t test_pci_read(struct file *filp, char __user *buf, size_t count, loff_t *f_ops)\n{\n\tint retval;\n\tchar val = 0;\n\tunsigned int read_num = 0;\n\n\ttprintk(\"count %d pos %lld\\n\", count, *f_ops);\n\n\t// read from ioport\n\twhile (read_num < count) {\n\t\ttprintk(\"port io number:%lx\\n\", dev_data->pio_base+*f_ops);\n\n\t\tval = inb(dev_data->pio_base + *f_ops); // read 1 byte\n\t\t// printk(\"val %d\\n\", val);\n\t\tretval = put_user(val, &buf[read_num++]);\n\t\tif(retval) break; // 0 on success\n\n\t\t(*f_ops)++;\n\t}\n\n\treturn read_num;\n}\n\nloff_t test_pci_llseek(struct file *filp, loff_t off, int whence)\n{\n\tloff_t newpos =-1;\n\n\ttprintk(\"lseek whence:%d\\n\", whence);\n\tswitch(whence) {\n    case SEEK_SET:\n      newpos = off;\n      break;\n\n\t\tcase SEEK_CUR:\n      newpos = filp->f_pos + off;\n      break;\n\n\t\tcase SEEK_END:\n      newpos = dev_data->pio_memsize + off;\n      break;\n\n    default: /* can't happen */\n\t\t\treturn -EINVAL;\n\t}\n\n\tif (newpos < 0) return -EINVAL;\n\n  filp->f_pos = newpos;\n  return newpos;\n}\n```\n\nI/O\u30dd\u30fc\u30c8\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306b\u306f inb/inw/inl \u53ca\u3073outb/outw/outl \u95a2\u6570\u3092\u7528\u3044\u307e\u3059\n(\u305d\u308c\u305e\u308c1,2,4\u30d0\u30a4\u30c8)\u3002\u306a\u304a64\u30d3\u30c3\u30c8\u74b0\u5883\u3067\u3042\u3063\u3066\u30821\u5ea6\u306b8\u30d0\u30a4\u30c8\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\n\u306f\u51fa\u6765\u307e\u305b\u3093\u3002\u3053\u308c\u3089\u306e\u95a2\u6570\u306f\u8aad\u307f\u8fbc\u3093\u3060/\u66f8\u304d\u8fbc\u3093\u3060\u30d0\u30a4\u30c8\u6570\u3092\u8fd4\u308a\u5024\u3068\u3057\u307e\u3059\u3002\n\n\u30e6\u30fc\u30b6\u30fc\u7a7a\u9593\u3068\u306e\u30c7\u30fc\u30bf\u306e\u3084\u308a\u53d6\u308a\u306b\u306fget_user/put_user \u30de\u30af\u30ed\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u307e\u305f\u3001*f_pos\u306f\u521d\u671f\u50240\u3067(\u3053\u306e\u3088\u3046\u306b\u901a\u5e38\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u7528\u306b\u30c7\u30d0\u30a4\u30b9\u3092\u64cd\u4f5c\u3059\u308b\u306a\u3089\u3070)\n\u30c9\u30e9\u30a4\u30d0\u304c\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\n\u4eca\u56de\u306fread/write \u3068\u3082\u306b1\u30d0\u30a4\u30c8\u305a\u3064\u8aad\u307f\u66f8\u304d\u3092\u884c\u3044\u3001\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u66f4\u65b0\u3057\u3066\u3044\u307e\u3059\u3002\n\n# \u30e6\u30fc\u30b6\u30d7\u30ed\u30b0\u30e9\u30e0\n\u901a\u5e38\u306e\u30d5\u30a1\u30a4\u30eb\u3068\u540c\u3058\u3088\u3046\u306bread/write/lseek\u95a2\u6570\u3092\u547c\u3079\u307e\u3059\u3002\n\u4e00\u5ea6read/write \u3092\u3059\u308b\u3068\u30aa\u30d5\u30bb\u30c3\u30c8\u304c\u305a\u308c\u308b\u306e\u3067\u3001lseek\u3067\u306f\u3058\u3081\u304b\u3089\u306b\u623b\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001I/O \u30dd\u30fc\u30c8\u304b\u3089TEST_PIO_DATASIZE\u5206 read,\n\u305d\u308c\u3089\u306e\u5024\u3092+10\u3057\u3066write,\u518d\u5ea6read \u3068\u3044\u3063\u305f\u30c6\u30b9\u30c8\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\n```c\nvoid read_device(int fd)\n{\n\tchar buf[TEST_PIO_DATASIZE], *p;\n\tint ret; // ssize_t\n\n\tret = read(fd, &buf, sizeof(buf)); \n\tif(ret > 0) {\n\t\tp = buf;\n\t\tprintf(\"read device : %d bytes read\\n\", ret);\n\t\twhile(ret--) printf(\"%2d \", *p++);\n\t} else {\n\t\tprintf(\"read error\");\n\t}\n\n\tprintf(\"\\n\");\n}\n\nvoid write_device(int fd, void *buf, unsigned int size)\n{\n\tint ret;\n\n\tret = write(fd, buf, size);\n\tif(ret < 0) {\n\t\tprintf(\"write error\");\n\t}\n\tprintf(\"write device : %d bytes write\\n\", ret);\n}\n\nvoid portio_test(int fd)\n{\n\tchar buf[TEST_PIO_DATASIZE];\n\tint i;\n\n\tprintf(\"\\n---- start portio test ----\\n\");\n\tread_device(fd);\n  lseek(fd,\t0, SEEK_SET);\n\n\tfor (i = 0; i < TEST_PIO_DATASIZE; i++) {\n\t\tbuf[i] = i+10;\n\t}\n\twrite_device(fd, buf, TEST_PIO_DATASIZE);\n  lseek(fd,\t0, SEEK_SET);\n\n\tread_device(fd);\n\n\tprintf(\"\\n---- end portio test ----\\n\");\n}\n```\n# \u5b9f\u884c\u7d50\u679c\nportio_test \u306e\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```\n---- start portio test ----\n** (100) test_pci_read       : count 6 pos 0\n** (104) test_pci_read       : port io number:c000\n## (118) test_pci_pio_read   : addr 0, size 1\n** (104) test_pci_read       : port io number:c001\n## (118) test_pci_pio_read   : addr 1, size 1\n** (104) test_pci_read       : port io number:c002\n## (118) test_pci_pio_read   : addr 2, size 1\n** (104) test_pci_read       : port io number:c003\n## (118) test_pci_pio_read   : addr 3, size 1\n** (104) test_pci_read       : port io number:c004\n## (118) test_pci_pio_read   : addr 4, size 1\n** (104) test_pci_read       : port io number:c005\n## (118) test_pci_pio_read   : addr 5, size 1\nread device : 6 bytes read\n0 1 2 3 4 5\n** (121) test_pci_llseek     : lseek whence:0\n** ( 78) test_pci_write      : count 6 pos 0\n** ( 81) test_pci_write      : port io number:c000\n## (155) test_pci_pio_write  : addr 0, size 1\n** ( 81) test_pci_write      : port io number:c001\n## (155) test_pci_pio_write  : addr 1, size 1\n** ( 81) test_pci_write      : port io number:c002\n## (155) test_pci_pio_write  : addr 2, size 1\n** ( 81) test_pci_write      : port io number:c003\n## (155) test_pci_pio_write  : addr 3, size 1\n** ( 81) test_pci_write      : port io number:c004\n## (155) test_pci_pio_write  : addr 4, size 1\n** ( 81) test_pci_write      : port io number:c005\n## (155) test_pci_pio_write  : addr 5, size 1\nwrite device : 6 bytes write\n** (121) test_pci_llseek     : lseek whence:0\n** (100) test_pci_read       : count 6 pos 0\n** (104) test_pci_read       : port io number:c000\n## (118) test_pci_pio_read   : addr 0, size 1\n** (104) test_pci_read       : port io number:c001\n## (118) test_pci_pio_read   : addr 1, size 1\n** (104) test_pci_read       : port io number:c002\n## (118) test_pci_pio_read   : addr 2, size 1\n** (104) test_pci_read       : port io number:c003\n## (118) test_pci_pio_read   : addr 3, size 1\n** (104) test_pci_read       : port io number:c004\n## (118) test_pci_pio_read   : addr 4, size 1\n** (104) test_pci_read       : port io number:c005\n## (118) test_pci_pio_read   : addr 5, size 1\nread device : 6 bytes read\n10 11 12 13 14 15\n\n---- end portio test ----\n```\n\n---\n\u306f\u3058\u3081: [(1) \u4f5c\u3063\u305f\u3082\u306e]\n(http://qiita.com/rafilia/items/f7646d12212da2a85bd8)\n\n\u524d: [(4) \u4eee\u60f3\u30c7\u30d0\u30a4\u30b9/\u30c9\u30e9\u30a4\u30d0\u306e\u767b\u9332]\n(http://qiita.com/rafilia/items/ba73703babb92276b55a)\n\u6b21: [(6) \u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u30c9I/O / ioctl \u306e\u4f7f\u7528]\n(http://qiita.com/rafilia/items/8f2ec3c612d4002c12c0)\n"}