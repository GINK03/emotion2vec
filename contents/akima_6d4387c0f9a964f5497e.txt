{"tags": ["Akka", "Scala"], "context": "\u539f\u6587: Shutdown Patterns in Akka 2\n\u610f\u8a33\u304c\u591a\u304f\u6df7\u3058\u308a\u307e\u3059. \u8aa4\u8a33\u3082\u591a\u304f\u6df7\u3058\u3063\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093.\n\u539f\u6587\u306b\u3042\u308b\u56f3\u306f\u3053\u306e\u8a18\u4e8b\u306b\u306f\u307e\u3060\u3042\u308a\u307e\u305b\u3093. \u4eca\u5e74\u4e2d\u306b\u4f5c\u3063\u3066\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u305f\u3044...\n\nShutdown Patterns in Akka 2\n\nI\u2019ve seen a question pop up a number of times on the Akka Mailing List that looks something like: \u201cHow do you tell Akka to shut down the ActorSystem when everything\u2019s finished?\u201d It turns out that there\u2019s no magical flag for this, no configuration setting, no special callback you can register for, and neither will the illustrious shutdown fairy grace your application with her glorious presence at that perfect moment. She\u2019s just plain mean.\n\n\u300c\u3059\u3079\u3066\u306e\u4ed5\u4e8b\u304c\u7d42\u308f\u3063\u305f\u5f8c\u306bActorSystem\u3092\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u3059\u308b\u306b\u306f\u3069\u3046\u3059\u308c\u3070\u3088\u3044\u3067\u3059\u304b\uff1f\u300d\u3053\u306e\u624b\u306e\u8cea\u554f\u306fAkka\u306e\u30e1\u30fc\u30ea\u30f3\u30b0\u30ea\u30b9\u30c8\u3067\u5e7e\u5ea6\u3068\u306a\u304f\u76ee\u306b\u3057\u3066\u304d\u307e\u3057\u305f. \u7d50\u8ad6\u304b\u3089\u8a00\u3046\u3068, \u3053\u308c\u3092\u9054\u6210\u3059\u308b\u305f\u3081\u306e\u30d5\u30e9\u30b0\u3084\u8a2d\u5b9a\u9805\u76ee, \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306a\u3069\u306f\u5b58\u5728\u3057\u307e\u305b\u3093. \u5b8c\u74a7\u306a\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u6b62\u3081\u3066\u304f\u308c\u308b\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u306e\u5996\u7cbe\u306f\u5b58\u5728\u3057\u306a\u3044\u306e\u3067\u3059.\n\nIn this post, we\u2019ll discuss why this is the case and provide you with a simple option for shutting down \u201cat the right time\u201d, as well as a not-so-simple-option for doing the exact same thing.\n\n\u672c\u8a18\u4e8b\u3067\u306f\u306a\u305c\u3053\u308c\u3089\u304c\u5b58\u5728\u3057\u306a\u3044\u304b\u306b\u3064\u3044\u3066\u3068, \u6b63\u3057\u304f\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u3059\u308b\u305f\u3081\u306e\u7c21\u5358\u306a\u65b9\u6cd5, \u304a\u3088\u3073\u5c11\u3057\u8907\u96d1\u306a\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8ff0\u3079\u307e\u3059.\n\nWhat the Heck Does \u201cFinished\u201d Mean?\n\nBefore we talk about how to shut down when the app is finished, we have to first describe what it means to say the app is \u201cfinished\u201d at all. The most natural answer to this question appears to be, \u201cWhen all the Mailboxes are empty.\u201d Natural, yes; correct, no. :)\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d42\u4e86\u6642\u306b\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u3059\u308b\u65b9\u6cd5\u3092\u8b70\u8ad6\u3059\u308b\u524d\u306b, \u305d\u3082\u305d\u3082\u300c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d42\u4e86\u300d\u3068\u306f\u4f55\u306a\u306e\u3067\u3057\u3087\u3046\u304b. \u3053\u306e\u7591\u554f\u306b\u5bfe\u3059\u308b\u3042\u308a\u304c\u3061\u306a\u7b54\u3048\u306f\u300cMailbox\u304c\u7a7a\u306b\u306a\u3063\u305f\u3068\u304d\u300d\u3067\u3059. \u3053\u308c\u306f\u4e00\u898b\u6b63\u3057\u305d\u3046\u306b\u898b\u3048\u307e\u3059\u304c, \u5b9f\u306f\u9593\u9055\u3063\u3066\u3044\u307e\u3059.\n\nThe obvious reason for this lack of correctness is due to the possibility that there could be a person out there who hasn\u2019t sent their message yet. The app isn\u2019t finished because it hasn\u2019t seen all of it\u2019s work.\n\n\u3053\u308c\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u660e\u767d\u306a\u7406\u7531\u306f, Mailbox\u304c\u7a7a\u3067\u3042\u3063\u3066\u3082, \u8ab0\u304b\u304c\u307e\u3060\u305d\u3053\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308d\u3046\u3068\u3057\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3053\u3068\u3067\u3059. \u305d\u306e\u8ab0\u304b\u306e\u4ed5\u4e8b\u304c\u7d42\u308f\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3059\u304b\u3089, \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d42\u4e86\u3068\u306f\u8a00\u3048\u307e\u305b\u3093.\n\nBut there\u2019s something more subtle here. Actor Mailboxes can be empty while they are still chugging away doing \u201cstuff\u201d. Have a look\u2026\n\n\u3082\u3046\u5c11\u3057\u5fae\u5999\u306a\u4f8b\u3092\u6319\u3052\u307e\u3057\u3087\u3046. Actor\u304c\u4f55\u304b\u4ed5\u4e8b\u3092\u3057\u3066\u3044\u308b\u9014\u4e2d\u306b\u3082Mailbox\u306f\u7a7a\u306b\u306a\u308a\u5f97\u308b\u306e\u3067\u3059. \u4e0b\u56f3\u3092\u898b\u3066\u304f\u3060\u3055\u3044:\n<\u56f3\u306f\u307e\u3060\u306a\u3044>\n\nThe probability of this occuring while you have hundreds of Actors chugging away is pretty low, but that probability increases as the app winds down. Even if the odds were 0.004%, it wouldn\u2019t matter - 0.004% is still a pretty questionable platform on which to design an algorithm.\n\n\u3042\u306a\u305f\u304c\u6570\u767e\u3082\u306eActor\u3092\u6271\u3063\u305f\u3068\u3057\u3066\u3082\u3053\u306e\u3088\u3046\u306a\u3053\u3068\u304c\u8d77\u3053\u308b\u30b1\u30fc\u30b9\u306f\u6975\u3081\u3066\u4f4e\u3044\u3068\u8a00\u3048\u308b\u3067\u3057\u3087\u3046. \u3057\u304b\u3057, \u3053\u308c\u304c\u8d77\u304d\u308b\u53ef\u80fd\u6027\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7a3c\u50cd\u6642\u9593\u306b\u4f34\u3044\u5897\u52a0\u3057\u3066\u3044\u304d\u307e\u3059. \u3082\u3057\u3053\u308c\u304c\u8d77\u304d\u308b\u78ba\u7387\u304c0.004%\u3060\u3063\u305f\u3068\u3057\u3066\u3082, \u679c\u305f\u3057\u3066\u305d\u306e\u3088\u3046\u306a\u74b0\u5883\u4e0b\u3067\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u904b\u7528\u3059\u308b\u3053\u3068\u304c\u9069\u5207\u3067\u3042\u308b\u304b\u306f\u6975\u3081\u3066\u7591\u308f\u3057\u3044\u3067\u3057\u3087\u3046.\n\n\u201cAh, but Akka can know if the Actor is working, so don\u2019t shut down while there are non-empty Mailboxes and Actors are working!\u201d you may say. Sure, but what if the Actor spawns work off to a Future? Or it has a request out to another machine waiting on a response? You wouldn\u2019t want to shut down in these cases. On the flip-side, if there is a simple busy-wait ticker somewhere that keeps the app \u201cbusy\u201d even though it\u2019s not, would you want to stay running forever? Probably not.\n\n\u300c\u3067\u3082, Akka\u306fActor\u304c\u4ed5\u4e8b\u3092\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u77e5\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3060\u304b\u3089, Mailbox\u304c\u7a7a\u3067\u306a\u3044\u304b\u3068Actor\u304c\u4ed5\u4e8b\u3092\u3057\u3066\u3044\u308b\u304b\u3067\u7d42\u4e86\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u5224\u65ad\u3067\u304d\u308b\u306e\u3067\u306f\uff1f\u300d\u3068\u601d\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093. \u3067\u306f, Future\u306b\u5bfe\u3057\u3066\u4ed5\u4e8b\u3092\u3059\u308bActor\u306a\u3089\u3070\u3069\u3046\u3067\u3057\u3087\u3046\uff1f\u3000\u3042\u308b\u3044\u306fActor\u304c\u5916\u90e8\u306e\u30de\u30b7\u30f3\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u6295\u3052\u3066\u5fdc\u7b54\u3092\u5f85\u3063\u3066\u3044\u305f\u3068\u3057\u305f\u3089\uff1f\u3000\u3069\u3061\u3089\u306e\u30b1\u30fc\u30b9\u3082\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u3059\u3079\u304d\u3067\u306f\u3042\u308a\u307e\u305b\u3093.  \u307e\u305f\u9006\u306b, \u5358\u7d14\u306a\u30d3\u30b8\u30fc\u30a6\u30a7\u30a4\u30c8\u306e\u3088\u3046\u306b\u5b9a\u671f\u7684\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u767a\u751f\u3059\u308b\u30b1\u30fc\u30b9\u3067, \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u5e38\u306b\u4ed5\u4e8b\u4e2d\u3068\u8a8d\u8b58\u3055\u308c\u3066\u6c38\u9060\u306b\u6b62\u307e\u3089\u306a\u304f\u306a\u308b\u306e\u306f\u826f\u3044\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\u3000\u3053\u308c\u306f\u304a\u305d\u3089\u304f\u8cb4\u65b9\u306e\u671b\u3080\u3053\u3068\u3068\u306f\u7570\u306a\u308b\u3067\u3057\u3087\u3046.\n\nThe bottom line is that an app is \u201cfinished\u201d when the app says it\u2019s finished, not when Akka guesses that it\u2019s finished. What we\u2019re going to cover are mechanisms by which you can tell Akka that you\u2019re done, but it\u2019s going to depend on what it is that your app is doing.\n\n\u7d50\u8ad6\u3068\u3057\u3066, \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d42\u4e86\u3068\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u81ea\u8eab\u306b\u3088\u3063\u3066\u5b9a\u7fa9\u3055\u308c\u308b\u3082\u306e\u3067\u3042\u308a, Akka\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d42\u4e86\u3092\u63a8\u6e2c\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093. \u3053\u308c\u304b\u3089\u7d39\u4ecb\u3059\u308b\u306e\u306f, \u3042\u306a\u305f\u304cAkka\u306b\u7d42\u4e86\u3092\u544a\u3052\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u3067\u3059\u304c, \u3053\u308c\u3089\u306f\u3042\u306a\u305f\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u4f55\u3092\u3057\u305f\u3044\u304b\u306b\u4f9d\u5b58\u3057\u307e\u3059.\n\nThe DABOWoTeD Pattern\n\nA common idiom is the Do A Bunch Of Work Then Die pattern. It\u2019s pronounced just like you\u2019d think\u2026 It\u2019s this type of program that people seem most concerned with, when it comes to shutting down after completion. After all, apps that are supposed to run 24/7 generally aren\u2019t concerned with this, since they have to handle hardware failures more often than shutdowns.\n\n\u3088\u304f\u77e5\u3089\u308c\u3066\u3044\u308b\u306e\u306fDo A Bunch Of Work Then Die pattern (\u307e\u3068\u307e\u3063\u305f\u4ed5\u4e8b\u3092\u3057\u3066\u304b\u3089\u6b7b\u306c\u30d1\u30bf\u30fc\u30f3) \u3067\u3059. \u3042\u306a\u305f\u306e\u601d\u3063\u305f\u901a\u308a\u306e\u767a\u97f3\u3067\u6b63\u3057\u3044\u3067\u3057\u3087\u3046 (\u8a33\u6ce8: \"devote/\u8eab\u3092\u6367\u3052\u308b\"\u306b\u639b\u3051\u305f\u3082\u306e\uff1f\u3000\u539f\u6587\u306b\u95a2\u9023\u3059\u308bweb\u30da\u30fc\u30b8\u4ee5\u5916\u3067 \"DABOWoTeD\" \u3068\u3044\u3046\u5358\u8a9e\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u6587\u66f8\u306f\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f). \u3053\u308c\u306f\u591a\u304f\u306e\u4eba\u304c\u6700\u3082\u95a2\u5fc3\u3092\u6301\u3063\u3066\u3044\u308b\u3067\u3042\u308d\u3046, \u4ed5\u4e8b\u304c\u7d42\u308f\u3063\u305f\u5f8c\u306b\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u3059\u308b\u30bf\u30a4\u30d7\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059. \u3053\u308c\u306f24\u6642\u9593365\u65e5\u5b9f\u884c\u3055\u308c\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u306f\u3042\u307e\u308a\u95a2\u4fc2\u304c\u306a\u3044\u3053\u3068\u304b\u3082\u3057\u308c\u307e\u305b\u3093. \u305d\u3046\u3044\u3063\u305f\u30b1\u30fc\u30b9\u3067\u306f\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u306e\u65b9\u6cd5\u306f\u554f\u984c\u3068\u306a\u3089\u305a, \u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u969c\u5bb3\u3078\u306e\u5bfe\u51e6\u304c\u4e3b\u305f\u308b\u8ab2\u984c\u3068\u306a\u308b\u305f\u3081\u3067\u3059.\n\nThe idea with DABOWoTeD is that you\u2019ve created a bunch of Actors to do some work, and when they\u2019re \u201cdone\u201d that work, it\u2019s time to shut the system down. This is also possible with Futures, and we\u2019ll cover those first.\n\nDABOWoTeD\u306e\u8003\u3048\u65b9\u306f, \u4e00\u5ea6\u306b\u591a\u304f\u306eActor\u3092\u751f\u6210\u3057, \u305d\u308c\u3089\u304c\u5b8c\u4e86\u3057\u305f\u3068\u304d\u30b7\u30b9\u30c6\u30e0\u3092\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u3059\u308b\u3068\u3044\u3046\u3082\u306e\u3067\u3059. \u306f\u3058\u3081\u306b, Future\u306b\u3088\u3063\u3066\u9054\u6210\u53ef\u80fd\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059.\n\nFutures\n\nFutures are easy because there\u2019s a really simple way to know when everything\u2019s done - use a sequence. Essentially, you\u2019re just doing a big fork-join, and when everything joins up, shut the system down. It looks something like this:\n\nFuture\u3092\u4f7f\u3046\u65b9\u6cd5\u306f\u7c21\u5358\u3067\u3059. \u3059\u3079\u3066\u306e\u4ed5\u4e8b\u304c\u7d42\u308f\u3063\u305f\u3053\u3068\u3092\u77e5\u308b\u305f\u3081\u306e\u5b9f\u306b\u30b7\u30f3\u30d7\u30eb\u306a\u65b9\u6cd5, \u305d\u308c\u306fsequence\u3092\u4f7f\u3046\u3053\u3068\u3067\u3059. \u672c\u8cea\u7684\u306b\u306f\u5927\u304d\u306afork/join\u3092\u884c\u3044, \u3059\u3079\u3066\u306e\u4ed5\u4e8b\u304cjoin\u3055\u308c\u305f\u3089\u30b7\u30b9\u30c6\u30e0\u3092\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u3059\u308b\u3060\u3051\u3067\u3059. \u3053\u308c\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059:\n\nFutureShutdown.scala\n// Spawn your futures\nval fs = (1 to 100).map { i =>\n  Future { Thread.sleep(i); i }\n}\n\n// Wrap all of the work up into a single\n// Future\nval f = Future.sequence(fs)\n\n// Wait on it forever - i.e. until it's done\nAwait.result(f, Duration.Inf)\n\n// Shut down\nsystem.shutdown() \n\n\n\nIt just doesn\u2019t get much simpler than that, so if you\u2019ve got a fork-join execution, just be awesome, use that pattern and collect your profit.\n\n\u3053\u308c\u4ee5\u4e0a\u30b7\u30f3\u30d7\u30eb\u306a\u65b9\u6cd5\u306f\u3042\u308a\u307e\u305b\u3093. \u3053\u308c\u3067\u7528\u9014\u3092\u6e80\u305f\u3059\u306a\u3089\u3070, \u3053\u308c\u304c\u6700\u5584\u3067\u3057\u3087\u3046.\n\nActors\n\nActors are more interesting here because they are generally employed when the application is more complex. It\u2019s not so clear what \u201cfinished\u201d means when algorithms with Actors are involved because of that higher level of complexity.\n\nActor\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u3088\u308a\u8907\u96d1\u306a\u5834\u5408\u306b\u4f7f\u7528\u3055\u308c\u308b\u305f\u3081, \u9762\u767d\u304f\u306a\u308a\u307e\u3059. Actor\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d42\u4e86\u306b\u7d61\u3093\u3067\u304f\u308b\u3068\u8907\u96d1\u6027\u304c\u5897\u3057, \u7d42\u4e86\u304c\u4f55\u3092\u610f\u5473\u3059\u308b\u304b\u304c\u5206\u304b\u308a\u3065\u3089\u304f\u306a\u3063\u3066\u304d\u307e\u3059.\n\nWe\u2019re going to make a very reasonable assumption here: at least one Actor knows when things are \u201cfinished\u201d. With this simple assumption, we have enough information to create our shutdown hook, which is going to be related to the Terminator that I described a short while ago.\n\n\u3053\u3053\u3067\u306f1\u3064\u4eee\u5b9a\u3092\u7f6e\u304d\u307e\u3059. \u5c11\u306a\u304f\u3068\u30821\u3064\u306eActor\u304c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d42\u4e86\u3092\u5224\u65ad\u3067\u304d\u308b\u3053\u3068\u3067\u3059. \u3053\u306e\u4eee\u5b9a\u306b\u3088\u308a, \u6211\u3005\u306f\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u30d5\u30c3\u30af\u3092\u4f5c\u308b\u305f\u3081\u306e\u60c5\u5831\u3092\u5f97\u305f\u3053\u3068\u306b\u306a\u308a\u307e\u3059. \u3053\u308c\u306f\u524d\u306b\u8ff0\u3079\u305fTerminator (\u8a33\u6ce8: \u5225\u8a18\u4e8b) \u306b\u95a2\u4fc2\u3057\u307e\u3059.\n\nThe Reaper\n\nThe Reaper is an Actor that is in charge of collecting dead souls. He has been told to watch over a number of Actors, waiting for them die. When he sees the last one give up its ghost he performs some action, and that action will be, in this case, to shut down the ActorSystem. Never fear the reaper.\n\nReaper\u306f\u6b7b\u8005\u306e\u30bd\u30a6\u30eb\u3092\u56de\u53ce\u3059\u308b\u5f79\u5272\u3092\u62c5\u3046\u6b7b\u795e\u3067\u3059. \u5f7c\u306f\u6570\u591a\u304f\u306eActor\u3092\u76e3\u8996\u3057, \u305d\u306e\u6b7b\u3092\u5f85\u3061\u307e\u3059. \u5f7c\u306f\u6700\u5f8c\u306eActor\u304c\u6b7b\u306c\u306e\u3092\u898b\u5c4a\u3051\u308b\u3068\u4f55\u3089\u304b\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3057\u307e\u3059. \u4eca\u56de\u306e\u30b1\u30fc\u30b9\u3067\u306f, ActorSystem\u5168\u4f53\u306e\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u304c\u9069\u5207\u306a\u4efb\u52d9\u3068\u8a00\u3048\u308b\u3067\u3057\u3087\u3046. \u6b7b\u795e\u3092\u6050\u308c\u306a\u3044\u3067\u304f\u3060\u3055\u3044.\n<\u56f3\u306f\u307e\u3060\u306a\u3044>\n\nIn the above diagram, we see that the Reaper is just another Actor, and he has been told to watch the green nodes, B, C, D and H. No single one of these key Actors denotes the completion of the application, but when all of them are finished, then we know that the application is done. They signal their completion by dying, and when the Reaper collects all those souls, he\u2019s going to shut down the system.\n\n\u4e0a\u56f3\u3067\u306f, Reaper\u3082\u307e\u305f\u3072\u3068\u3064\u306eActor\u3067\u3042\u308a, B\u30fbC\u30fbD\u30fbH\u306e\u7dd1\u306e\u30ce\u30fc\u30c9\u3092\u76e3\u8996\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059. \u3053\u308c\u3089\u306eKey Actor\u3059\u3079\u3066\u304c\u7d42\u4e86\u3057\u305f\u3068\u304d, \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d42\u4e86\u3092\u610f\u5473\u3057\u307e\u3059. \u3053\u308c\u3089\u306eActor\u306f\u7d42\u4e86\u3092\u81ea\u8eab\u306e\u6b7b\u306b\u3088\u3063\u3066\u8868\u73fe\u3057, Reaper\u306f\u5f7c\u3089\u306e\u30bd\u30a6\u30eb\u3092\u3059\u3079\u3066\u56de\u53ce\u3057\u305f\u5f8c\u3067\u30b7\u30b9\u30c6\u30e0\u5168\u4f53\u3092\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u3057\u307e\u3059.\n\nReaper Code\n\nThe Reaper itself is wonderfully simple. All it has to do is accept a message that tells it to watch an ActorRef, and then make a call to a method when everything it\u2019s watching has kicked the bucket.\n\nReaper\u81ea\u4f53\u306f\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u3067\u3059. \u3084\u308b\u3079\u304d\u3053\u3068\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u3063\u3066\u306fActorRef\u306e\u76e3\u8996\u3092\u958b\u59cb\u3057, \u76e3\u8996\u3057\u3066\u3044\u308b\u3059\u3079\u3066\u306eActor\u304c\u5c45\u306a\u304f\u306a\u3063\u305f\u3068\u304d\u306b\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3076\u3060\u3051\u3067\u3059.\n\nReaper.scala\nimport akka.actor.{Actor, ActorRef, Terminated}\nimport scala.collection.mutable.ArrayBuffer\n\nobject Reaper {\n  // Used by others to register an Actor for watching\n  case class WatchMe(ref: ActorRef)\n}\n\nabstract class Reaper extends Actor {\n  import Reaper._\n\n  // Keep track of what we're watching\n  val watched = ArrayBuffer.empty[ActorRef]\n\n  // Derivations need to implement this method.  It's the\n  // hook that's called when everything's dead\n  def allSoulsReaped(): Unit\n\n  // Watch and check for termination\n  final def receive = {\n    case WatchMe(ref) =>\n      context.watch(ref)\n      watched += ref\n    case Terminated(ref) =>\n      watched -= ref\n      if (watched.isEmpty) allSoulsReaped()\n  }\n}\n\n\n\nA \u201cProduction\u201d Reaper\n\nGiven the simplicity of the Reaper, we can now create an even simpler Production Reaper, that shuts down the ActorSystem when everything\u2019s 6 feet in the ground.\n\nReaper\u3092\u4f7f\u3046\u3068Production Reaper\u3082\u7c21\u5358\u306b\u66f8\u3051\u307e\u3059. \u3059\u3079\u3066\u306e\u76e3\u8996\u5bfe\u8c61\u304c\u6b7b\u3093\u3060\u5f8c\u306bActorSystem\u3092\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u3057\u307e\u3059.\n\nProductionReaper.scala\nclass ProductionReaper extends Reaper {\n  // Shutdown\n  def allSoulsReaped(): Unit = context.system.shutdown()\n}\n\n\n\nTesting the Reaper\n\nIt\u2019s always nice to have tests. Here we use Akka\u2019s TestKit along with its TestProbe and ImplicitSender to hook up everything we need to test our Reaper.\n\n\u3044\u3064\u3044\u304b\u306a\u308b\u3068\u304d\u3082\u30c6\u30b9\u30c8\u3092\u66f8\u304f\u306e\u306f\u826f\u3044\u3053\u3068\u3067\u3059. \u3053\u3053\u3067\u306fAkka\u306eTestKit\u3068TestProbe, ImplicitSender\u3092\u4f7f\u3063\u3066Reaper\u306e\u30c6\u30b9\u30c8\u306b\u5fc5\u8981\u306a\u3082\u306e\u3092\u30d5\u30c3\u30af\u3057\u3066\u307f\u307e\u3059.\n\nTestReaper.scala\nimport akka.actor.{ActorSystem, Props, ActorRef}\nimport akka.testkit.{TestKit, ImplicitSender, TestProbe}\nimport org.scalatest.{WordSpec, BeforeAndAfterAll}\nimport org.scalatest.matchers.MustMatchers\n\n// Our test reaper.  Sends the snooper a message when all\n// the souls have been reaped\nclass TestReaper(snooper: ActorRef) extends Reaper {\n  def allSoulsReaped(): Unit = snooper ! \"Dead\"\n}\n\nclass ReaperSpec extends TestKit(ActorSystem(\"ReaperSpec\"))\n       with ImplicitSender\n       with WordSpec\n       with BeforeAndAfterAll\n       with MustMatchers {\n  import Reaper._\n\n  override def afterAll() {\n    system.shutdown()\n  }\n\n  \"Reaper\" should {\n    \"work\" in {\n      // Set up some dummy Actors\n      val a = TestProbe()\n      val b = TestProbe()\n      val c = TestProbe()\n      val d = TestProbe()\n\n      // Build our reaper\n      val reaper = system.actorOf(Props(new TestReaper(testActor)))\n\n      // Watch a couple \n      reaper ! WatchMe(a.ref)\n      reaper ! WatchMe(d.ref)\n\n      // Stop them\n      system.stop(a.ref)\n      system.stop(d.ref)\n\n      // Make sure we've been called\n      expectMsg(\"Dead\")\n    }\n  }\n}\n\n\n\nApplication with PoisonPill\n\nThe Reaper is very good at being flexible when the goal is to drain a set of (one or more) Mailboxes. Let\u2019s say you have a message processing system whereby you send a bunch of messages (or work) to some Actors, which may send more messages (or work) to other Actors. What you want to do is shut down when a key set of Mailboxes have been drained. For this, we use Akka\u2019s PoisonPill message. The PoisonPill goes into the Actor\u2019s Mailbox and will get processed in due course, which will kill the Actor. The key point is that all of the messages that exist ahead of the PoisonPill will be processed. This is different than just shutting down an Actor using system.stop.\n\n1\u3064\u4ee5\u4e0a\u306eMailbox\u3092\u7a7a\u306b\u3059\u308b\u3053\u3068\u304c\u76ee\u7684\u3067\u3042\u308b\u3068\u304d, Reaper\u306f\u67d4\u8edf\u6027\u306e\u70b9\u3067\u975e\u5e38\u306b\u512a\u308c\u3066\u3044\u307e\u3059. \u30e1\u30c3\u30bb\u30fc\u30b8\u30f3\u30b0\u6a5f\u69cb\u3092\u5229\u7528\u3057, \u5225\u306eActor\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308b\u53ef\u80fd\u6027\u304c\u3042\u308bActor\u306b\u5bfe\u3057\u3066\u307e\u3068\u307e\u3063\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308b\u3053\u3068\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046. \u3042\u306a\u305f\u306e\u76ee\u7684\u306fKey Mailbox\u304c\u7a7a\u306b\u306a\u3063\u305f\u3068\u304d\u306b\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u3059\u308b\u3053\u3068\u3067\u3059. \u3053\u306e\u30b1\u30fc\u30b9\u3067\u306fAkka\u306ePoisonPill(\u6bd2\u85ac)\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u9069\u3057\u3066\u3044\u307e\u3059. PoisonPill\u304cMailbox\u306b\u5165\u3063\u3066\u51e6\u7406\u3055\u308c\u308b\u3068Actor\u306f\u6b7b\u306b\u307e\u3059. \u30dd\u30a4\u30f3\u30c8\u306f, PoisonPill\u4ee5\u524d\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u3059\u3079\u3066\u51e6\u7406\u3055\u308c\u308b\u3053\u3068\u3067\u3059. \u3053\u308c\u304cActor\u304csystem.stop\u3092\u4f7f\u3046\u3053\u3068\u3068\u306e\u76f8\u9055\u70b9\u3067\u3059.\n\nWe can see how PoisonPill messages can be propagated through an Actor application in the following:\n\n\u4e0b\u56f3\u306bPoisonPill\u304c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306eActor\u306b\u3069\u306e\u3088\u3046\u306b\u4f1d\u64ad\u3059\u308b\u304b\u3092\u793a\u3057\u307e\u3059:\n<\u56f3\u306f\u307e\u3060\u306a\u3044>\n\nOnce the last PoisonPill message has been processed, the Reaper will kick in and do whatever it is you want done, such as shut down the ActorSystem.\n\n\u6700\u5f8c\u306ePoisonPill\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51e6\u7406\u3055\u308c\u305f\u3068\u304dReaper\u304c\u4f5c\u52d5\u3057, ActorSystem\u306e\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u306a\u3069\u306e, \u3042\u306a\u305f\u306e\u671b\u3080\u6319\u52d5\u3092\u884c\u3044\u307e\u3059.\n\nConclusion\n\nAkka doesn\u2019t know when your'e done doing what it is you\u2019re doing since only you know what it is that you\u2019re doing. Here we\u2019ve covered a couple of mechanisms you can employ for knowing when to shut down your system. There are, of course, many others that you can probably think of, including something as simple as an external message that tells a specific Actor to ShutDown.\n\n\u3042\u306a\u305f\u304c\u3057\u305f\u3044\u3053\u3068\u306f\u3042\u306a\u305f\u3060\u3051\u304c\u77e5\u3063\u3066\u304a\u308a, Akka\u306b\u306f\u3042\u306a\u305f\u304c\u4f55\u3092\u3057\u305f\u3044\u306e\u304b\u5206\u304b\u308a\u307e\u305b\u3093. \u672c\u8a18\u4e8b\u306f\u30b7\u30b9\u30c6\u30e0\u3092\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u3059\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u30922\u3064\u7d39\u4ecb\u3057\u307e\u3057\u305f. \u3053\u308c\u4ee5\u5916\u306b\u3082, \u7279\u5b9a\u306eActor\u3060\u3051\u3092\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u3059\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308b\u306a\u3069, \u8003\u3048\u5f97\u308b\u4ed5\u7d44\u307f\u306f\u7121\u6570\u306b\u3042\u308a\u307e\u3059.\n\nWith the Reaper pattern we\u2019ve made use of the Actor paradigm to put a level of abstraction into the system, which uses the basic functionality of Actors (namely that of DeathWatch) to add \u201csystem level\u201d behaviour to our applications. The Untyped Actor, along with the basic tool of DeathWatch, provide the kind of flexibility that you can turn to in order to add some cool functionality to your apps.\n\nReaper\u30d1\u30bf\u30fc\u30f3\u3067\u306fActor\u306e\u57fa\u672c\u6a5f\u80fd(DeathWatch)\u3092\u7528\u3044\u3066, \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u5bfe\u3057\u3066\u30b7\u30b9\u30c6\u30e0\u30ec\u30d9\u30eb\u306e\u52d5\u4f5c\u3092\u8ffd\u52a0\u3059\u308b, \u62bd\u8c61\u7684\u306a\u30ec\u30d9\u30eb\u306e\u4ed5\u7d44\u307f\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f. UntypedActor\u306fDeathWatch\u306e\u57fa\u672c\u6a5f\u80fd\u3068\u3068\u3082\u306b\u3042\u306a\u305f\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u7d20\u6674\u3089\u3057\u3044\u6a5f\u80fd\u3092\u3082\u3089\u305f\u3059\u67d4\u8edf\u6027\u3092\u63d0\u4f9b\u3057\u307e\u3059.\n\u539f\u6587: [Shutdown Patterns in Akka 2](http://letitcrash.com/post/30165507578/shutdown-patterns-in-akka-2)\n\u610f\u8a33\u304c\u591a\u304f\u6df7\u3058\u308a\u307e\u3059. \u8aa4\u8a33\u3082\u591a\u304f\u6df7\u3058\u3063\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093.\n\n\u539f\u6587\u306b\u3042\u308b\u56f3\u306f\u3053\u306e\u8a18\u4e8b\u306b\u306f\u307e\u3060\u3042\u308a\u307e\u305b\u3093. \u4eca\u5e74\u4e2d\u306b\u4f5c\u3063\u3066\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u305f\u3044...\n\n# Shutdown Patterns in Akka 2\n> I\u2019ve seen a question pop up a number of times on the Akka Mailing List that looks something like: \u201cHow do you tell Akka to shut down the ActorSystem when everything\u2019s finished?\u201d It turns out that there\u2019s no magical flag for this, no configuration setting, no special callback you can register for, and neither will the illustrious shutdown fairy grace your application with her glorious presence at that perfect moment. She\u2019s just plain mean.\n\n\u300c\u3059\u3079\u3066\u306e\u4ed5\u4e8b\u304c\u7d42\u308f\u3063\u305f\u5f8c\u306bActorSystem\u3092\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u3059\u308b\u306b\u306f\u3069\u3046\u3059\u308c\u3070\u3088\u3044\u3067\u3059\u304b\uff1f\u300d\u3053\u306e\u624b\u306e\u8cea\u554f\u306fAkka\u306e\u30e1\u30fc\u30ea\u30f3\u30b0\u30ea\u30b9\u30c8\u3067\u5e7e\u5ea6\u3068\u306a\u304f\u76ee\u306b\u3057\u3066\u304d\u307e\u3057\u305f. \u7d50\u8ad6\u304b\u3089\u8a00\u3046\u3068, \u3053\u308c\u3092\u9054\u6210\u3059\u308b\u305f\u3081\u306e\u30d5\u30e9\u30b0\u3084\u8a2d\u5b9a\u9805\u76ee, \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306a\u3069\u306f\u5b58\u5728\u3057\u307e\u305b\u3093. \u5b8c\u74a7\u306a\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u6b62\u3081\u3066\u304f\u308c\u308b\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u306e\u5996\u7cbe\u306f\u5b58\u5728\u3057\u306a\u3044\u306e\u3067\u3059.\n\n> In this post, we\u2019ll discuss why this is the case and provide you with a simple option for shutting down \u201cat the right time\u201d, as well as a not-so-simple-option for doing the exact same thing.\n\n\u672c\u8a18\u4e8b\u3067\u306f\u306a\u305c\u3053\u308c\u3089\u304c\u5b58\u5728\u3057\u306a\u3044\u304b\u306b\u3064\u3044\u3066\u3068, \u6b63\u3057\u304f\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u3059\u308b\u305f\u3081\u306e\u7c21\u5358\u306a\u65b9\u6cd5, \u304a\u3088\u3073\u5c11\u3057\u8907\u96d1\u306a\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8ff0\u3079\u307e\u3059.\n\n## What the Heck Does \u201cFinished\u201d Mean?\n> Before we talk about how to shut down when the app is finished, we have to first describe what it means to say the app is \u201cfinished\u201d at all. The most natural answer to this question appears to be, \u201cWhen all the Mailboxes are empty.\u201d Natural, yes; correct, no. :)\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d42\u4e86\u6642\u306b\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u3059\u308b\u65b9\u6cd5\u3092\u8b70\u8ad6\u3059\u308b\u524d\u306b, \u305d\u3082\u305d\u3082\u300c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d42\u4e86\u300d\u3068\u306f\u4f55\u306a\u306e\u3067\u3057\u3087\u3046\u304b. \u3053\u306e\u7591\u554f\u306b\u5bfe\u3059\u308b\u3042\u308a\u304c\u3061\u306a\u7b54\u3048\u306f\u300cMailbox\u304c\u7a7a\u306b\u306a\u3063\u305f\u3068\u304d\u300d\u3067\u3059. \u3053\u308c\u306f\u4e00\u898b\u6b63\u3057\u305d\u3046\u306b\u898b\u3048\u307e\u3059\u304c, \u5b9f\u306f\u9593\u9055\u3063\u3066\u3044\u307e\u3059.\n\n> The obvious reason for this lack of correctness is due to the possibility that there could be a person out there who hasn\u2019t sent their message yet. The app isn\u2019t finished because it hasn\u2019t seen all of it\u2019s work.\n\n\u3053\u308c\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u660e\u767d\u306a\u7406\u7531\u306f, Mailbox\u304c\u7a7a\u3067\u3042\u3063\u3066\u3082, \u8ab0\u304b\u304c\u307e\u3060\u305d\u3053\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308d\u3046\u3068\u3057\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3053\u3068\u3067\u3059. \u305d\u306e\u8ab0\u304b\u306e\u4ed5\u4e8b\u304c\u7d42\u308f\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3059\u304b\u3089, \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d42\u4e86\u3068\u306f\u8a00\u3048\u307e\u305b\u3093.\n\n> But there\u2019s something more subtle here. Actor Mailboxes can be empty while they are still chugging away doing \u201cstuff\u201d. Have a look\u2026\n\n\u3082\u3046\u5c11\u3057\u5fae\u5999\u306a\u4f8b\u3092\u6319\u3052\u307e\u3057\u3087\u3046. Actor\u304c\u4f55\u304b\u4ed5\u4e8b\u3092\u3057\u3066\u3044\u308b\u9014\u4e2d\u306b\u3082Mailbox\u306f\u7a7a\u306b\u306a\u308a\u5f97\u308b\u306e\u3067\u3059. \u4e0b\u56f3\u3092\u898b\u3066\u304f\u3060\u3055\u3044:\n\n<\u56f3\u306f\u307e\u3060\u306a\u3044>\n\n> The probability of this occuring while you have hundreds of Actors chugging away is pretty low, but that probability increases as the app winds down. Even if the odds were 0.004%, it wouldn\u2019t matter - 0.004% is still a pretty questionable platform on which to design an algorithm.\n\n\u3042\u306a\u305f\u304c\u6570\u767e\u3082\u306eActor\u3092\u6271\u3063\u305f\u3068\u3057\u3066\u3082\u3053\u306e\u3088\u3046\u306a\u3053\u3068\u304c\u8d77\u3053\u308b\u30b1\u30fc\u30b9\u306f\u6975\u3081\u3066\u4f4e\u3044\u3068\u8a00\u3048\u308b\u3067\u3057\u3087\u3046. \u3057\u304b\u3057, \u3053\u308c\u304c\u8d77\u304d\u308b\u53ef\u80fd\u6027\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7a3c\u50cd\u6642\u9593\u306b\u4f34\u3044\u5897\u52a0\u3057\u3066\u3044\u304d\u307e\u3059. \u3082\u3057\u3053\u308c\u304c\u8d77\u304d\u308b\u78ba\u7387\u304c0.004%\u3060\u3063\u305f\u3068\u3057\u3066\u3082, \u679c\u305f\u3057\u3066\u305d\u306e\u3088\u3046\u306a\u74b0\u5883\u4e0b\u3067\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u904b\u7528\u3059\u308b\u3053\u3068\u304c\u9069\u5207\u3067\u3042\u308b\u304b\u306f\u6975\u3081\u3066\u7591\u308f\u3057\u3044\u3067\u3057\u3087\u3046.\n\n> \u201cAh, but Akka can know if the Actor is working, so don\u2019t shut down while there are non-empty Mailboxes and Actors are working!\u201d you may say. Sure, but what if the Actor spawns work off to a Future? Or it has a request out to another machine waiting on a response? You wouldn\u2019t want to shut down in these cases. On the flip-side, if there is a simple busy-wait ticker somewhere that keeps the app \u201cbusy\u201d even though it\u2019s not, would you want to stay running forever? Probably not.\n\n\u300c\u3067\u3082, Akka\u306fActor\u304c\u4ed5\u4e8b\u3092\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u77e5\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3060\u304b\u3089, Mailbox\u304c\u7a7a\u3067\u306a\u3044\u304b\u3068Actor\u304c\u4ed5\u4e8b\u3092\u3057\u3066\u3044\u308b\u304b\u3067\u7d42\u4e86\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u5224\u65ad\u3067\u304d\u308b\u306e\u3067\u306f\uff1f\u300d\u3068\u601d\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093. \u3067\u306f, `Future`\u306b\u5bfe\u3057\u3066\u4ed5\u4e8b\u3092\u3059\u308bActor\u306a\u3089\u3070\u3069\u3046\u3067\u3057\u3087\u3046\uff1f\u3000\u3042\u308b\u3044\u306fActor\u304c\u5916\u90e8\u306e\u30de\u30b7\u30f3\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u6295\u3052\u3066\u5fdc\u7b54\u3092\u5f85\u3063\u3066\u3044\u305f\u3068\u3057\u305f\u3089\uff1f\u3000\u3069\u3061\u3089\u306e\u30b1\u30fc\u30b9\u3082\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u3059\u3079\u304d\u3067\u306f\u3042\u308a\u307e\u305b\u3093.  \u307e\u305f\u9006\u306b, \u5358\u7d14\u306a\u30d3\u30b8\u30fc\u30a6\u30a7\u30a4\u30c8\u306e\u3088\u3046\u306b\u5b9a\u671f\u7684\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u767a\u751f\u3059\u308b\u30b1\u30fc\u30b9\u3067, \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u5e38\u306b\u4ed5\u4e8b\u4e2d\u3068\u8a8d\u8b58\u3055\u308c\u3066\u6c38\u9060\u306b\u6b62\u307e\u3089\u306a\u304f\u306a\u308b\u306e\u306f\u826f\u3044\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\u3000\u3053\u308c\u306f\u304a\u305d\u3089\u304f\u8cb4\u65b9\u306e\u671b\u3080\u3053\u3068\u3068\u306f\u7570\u306a\u308b\u3067\u3057\u3087\u3046.\n\n> The bottom line is that an app is \u201cfinished\u201d when the app says it\u2019s finished, not when Akka guesses that it\u2019s finished. What we\u2019re going to cover are mechanisms by which you can tell Akka that you\u2019re done, but it\u2019s going to depend on what it is that your app is doing.\n\n\u7d50\u8ad6\u3068\u3057\u3066, \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d42\u4e86\u3068\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u81ea\u8eab\u306b\u3088\u3063\u3066\u5b9a\u7fa9\u3055\u308c\u308b\u3082\u306e\u3067\u3042\u308a, Akka\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d42\u4e86\u3092\u63a8\u6e2c\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093. \u3053\u308c\u304b\u3089\u7d39\u4ecb\u3059\u308b\u306e\u306f, \u3042\u306a\u305f\u304cAkka\u306b\u7d42\u4e86\u3092\u544a\u3052\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u3067\u3059\u304c, \u3053\u308c\u3089\u306f\u3042\u306a\u305f\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u4f55\u3092\u3057\u305f\u3044\u304b\u306b\u4f9d\u5b58\u3057\u307e\u3059.\n\n## The DABOWoTeD Pattern\n> A common idiom is the Do A Bunch Of Work Then Die pattern. It\u2019s pronounced just like you\u2019d think\u2026 It\u2019s this type of program that people seem most concerned with, when it comes to shutting down after completion. After all, apps that are supposed to run 24/7 generally aren\u2019t concerned with this, since they have to handle hardware failures more often than shutdowns.\n\n\u3088\u304f\u77e5\u3089\u308c\u3066\u3044\u308b\u306e\u306fDo A Bunch Of Work Then Die pattern (\u307e\u3068\u307e\u3063\u305f\u4ed5\u4e8b\u3092\u3057\u3066\u304b\u3089\u6b7b\u306c\u30d1\u30bf\u30fc\u30f3) \u3067\u3059. \u3042\u306a\u305f\u306e\u601d\u3063\u305f\u901a\u308a\u306e\u767a\u97f3\u3067\u6b63\u3057\u3044\u3067\u3057\u3087\u3046 (\u8a33\u6ce8: \"devote/\u8eab\u3092\u6367\u3052\u308b\"\u306b\u639b\u3051\u305f\u3082\u306e\uff1f\u3000\u539f\u6587\u306b\u95a2\u9023\u3059\u308bweb\u30da\u30fc\u30b8\u4ee5\u5916\u3067 \"DABOWoTeD\" \u3068\u3044\u3046\u5358\u8a9e\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u6587\u66f8\u306f\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f). \u3053\u308c\u306f\u591a\u304f\u306e\u4eba\u304c\u6700\u3082\u95a2\u5fc3\u3092\u6301\u3063\u3066\u3044\u308b\u3067\u3042\u308d\u3046, \u4ed5\u4e8b\u304c\u7d42\u308f\u3063\u305f\u5f8c\u306b\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u3059\u308b\u30bf\u30a4\u30d7\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059. \u3053\u308c\u306f24\u6642\u9593365\u65e5\u5b9f\u884c\u3055\u308c\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u306f\u3042\u307e\u308a\u95a2\u4fc2\u304c\u306a\u3044\u3053\u3068\u304b\u3082\u3057\u308c\u307e\u305b\u3093. \u305d\u3046\u3044\u3063\u305f\u30b1\u30fc\u30b9\u3067\u306f\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u306e\u65b9\u6cd5\u306f\u554f\u984c\u3068\u306a\u3089\u305a, \u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u969c\u5bb3\u3078\u306e\u5bfe\u51e6\u304c\u4e3b\u305f\u308b\u8ab2\u984c\u3068\u306a\u308b\u305f\u3081\u3067\u3059.\n\n> The idea with DABOWoTeD is that you\u2019ve created a bunch of Actors to do some work, and when they\u2019re \u201cdone\u201d that work, it\u2019s time to shut the system down. This is also possible with Futures, and we\u2019ll cover those first.\n\nDABOWoTeD\u306e\u8003\u3048\u65b9\u306f, \u4e00\u5ea6\u306b\u591a\u304f\u306eActor\u3092\u751f\u6210\u3057, \u305d\u308c\u3089\u304c\u5b8c\u4e86\u3057\u305f\u3068\u304d\u30b7\u30b9\u30c6\u30e0\u3092\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u3059\u308b\u3068\u3044\u3046\u3082\u306e\u3067\u3059. \u306f\u3058\u3081\u306b, `Future`\u306b\u3088\u3063\u3066\u9054\u6210\u53ef\u80fd\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059.\n\n## Futures\n> Futures are easy because there\u2019s a really simple way to know when everything\u2019s done - use a sequence. Essentially, you\u2019re just doing a big fork-join, and when everything joins up, shut the system down. It looks something like this:\n\n`Future`\u3092\u4f7f\u3046\u65b9\u6cd5\u306f\u7c21\u5358\u3067\u3059. \u3059\u3079\u3066\u306e\u4ed5\u4e8b\u304c\u7d42\u308f\u3063\u305f\u3053\u3068\u3092\u77e5\u308b\u305f\u3081\u306e\u5b9f\u306b\u30b7\u30f3\u30d7\u30eb\u306a\u65b9\u6cd5, \u305d\u308c\u306f`sequence`\u3092\u4f7f\u3046\u3053\u3068\u3067\u3059. \u672c\u8cea\u7684\u306b\u306f\u5927\u304d\u306afork/join\u3092\u884c\u3044, \u3059\u3079\u3066\u306e\u4ed5\u4e8b\u304cjoin\u3055\u308c\u305f\u3089\u30b7\u30b9\u30c6\u30e0\u3092\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u3059\u308b\u3060\u3051\u3067\u3059. \u3053\u308c\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059:\n\n```FutureShutdown.scala\n// Spawn your futures\nval fs = (1 to 100).map { i =>\n  Future { Thread.sleep(i); i }\n}\n\n// Wrap all of the work up into a single\n// Future\nval f = Future.sequence(fs)\n\n// Wait on it forever - i.e. until it's done\nAwait.result(f, Duration.Inf)\n\n// Shut down\nsystem.shutdown() \n```\n\n> It just doesn\u2019t get much simpler than that, so if you\u2019ve got a fork-join execution, just be awesome, use that pattern and collect your profit.\n\n\u3053\u308c\u4ee5\u4e0a\u30b7\u30f3\u30d7\u30eb\u306a\u65b9\u6cd5\u306f\u3042\u308a\u307e\u305b\u3093. \u3053\u308c\u3067\u7528\u9014\u3092\u6e80\u305f\u3059\u306a\u3089\u3070, \u3053\u308c\u304c\u6700\u5584\u3067\u3057\u3087\u3046.\n\n\n## Actors\n> Actors are more interesting here because they are generally employed when the application is more complex. It\u2019s not so clear what \u201cfinished\u201d means when algorithms with Actors are involved because of that higher level of complexity.\n\nActor\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u3088\u308a\u8907\u96d1\u306a\u5834\u5408\u306b\u4f7f\u7528\u3055\u308c\u308b\u305f\u3081, \u9762\u767d\u304f\u306a\u308a\u307e\u3059. Actor\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d42\u4e86\u306b\u7d61\u3093\u3067\u304f\u308b\u3068\u8907\u96d1\u6027\u304c\u5897\u3057, \u7d42\u4e86\u304c\u4f55\u3092\u610f\u5473\u3059\u308b\u304b\u304c\u5206\u304b\u308a\u3065\u3089\u304f\u306a\u3063\u3066\u304d\u307e\u3059.\n\n> We\u2019re going to make a very reasonable assumption here: at least one Actor knows when things are \u201cfinished\u201d. With this simple assumption, we have enough information to create our shutdown hook, which is going to be related to the Terminator that I described a short while ago.\n\n\u3053\u3053\u3067\u306f1\u3064\u4eee\u5b9a\u3092\u7f6e\u304d\u307e\u3059. \u5c11\u306a\u304f\u3068\u30821\u3064\u306eActor\u304c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d42\u4e86\u3092\u5224\u65ad\u3067\u304d\u308b\u3053\u3068\u3067\u3059. \u3053\u306e\u4eee\u5b9a\u306b\u3088\u308a, \u6211\u3005\u306f\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u30d5\u30c3\u30af\u3092\u4f5c\u308b\u305f\u3081\u306e\u60c5\u5831\u3092\u5f97\u305f\u3053\u3068\u306b\u306a\u308a\u307e\u3059. \u3053\u308c\u306f\u524d\u306b\u8ff0\u3079\u305fTerminator (\u8a33\u6ce8: [\u5225\u8a18\u4e8b](http://letitcrash.com/post/29773618510/an-akka-2-terminator)) \u306b\u95a2\u4fc2\u3057\u307e\u3059.\n\n### The Reaper\n> The Reaper is an Actor that is in charge of collecting dead souls. He has been told to watch over a number of Actors, waiting for them die. When he sees the last one give up its ghost he performs some action, and that action will be, in this case, to shut down the ActorSystem. Never fear the reaper.\n\nReaper\u306f\u6b7b\u8005\u306e\u30bd\u30a6\u30eb\u3092\u56de\u53ce\u3059\u308b\u5f79\u5272\u3092\u62c5\u3046\u6b7b\u795e\u3067\u3059. \u5f7c\u306f\u6570\u591a\u304f\u306eActor\u3092\u76e3\u8996\u3057, \u305d\u306e\u6b7b\u3092\u5f85\u3061\u307e\u3059. \u5f7c\u306f\u6700\u5f8c\u306eActor\u304c\u6b7b\u306c\u306e\u3092\u898b\u5c4a\u3051\u308b\u3068\u4f55\u3089\u304b\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3057\u307e\u3059. \u4eca\u56de\u306e\u30b1\u30fc\u30b9\u3067\u306f, ActorSystem\u5168\u4f53\u306e\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u304c\u9069\u5207\u306a\u4efb\u52d9\u3068\u8a00\u3048\u308b\u3067\u3057\u3087\u3046. \u6b7b\u795e\u3092\u6050\u308c\u306a\u3044\u3067\u304f\u3060\u3055\u3044.\n\n<\u56f3\u306f\u307e\u3060\u306a\u3044>\n\n> In the above diagram, we see that the Reaper is just another Actor, and he has been told to watch the green nodes, B, C, D and H. No single one of these key Actors denotes the completion of the application, but when all of them are finished, then we know that the application is done. They signal their completion by dying, and when the Reaper collects all those souls, he\u2019s going to shut down the system.\n\n\u4e0a\u56f3\u3067\u306f, Reaper\u3082\u307e\u305f\u3072\u3068\u3064\u306eActor\u3067\u3042\u308a, B\u30fbC\u30fbD\u30fbH\u306e\u7dd1\u306e\u30ce\u30fc\u30c9\u3092\u76e3\u8996\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059. \u3053\u308c\u3089\u306eKey Actor\u3059\u3079\u3066\u304c\u7d42\u4e86\u3057\u305f\u3068\u304d, \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d42\u4e86\u3092\u610f\u5473\u3057\u307e\u3059. \u3053\u308c\u3089\u306eActor\u306f\u7d42\u4e86\u3092\u81ea\u8eab\u306e\u6b7b\u306b\u3088\u3063\u3066\u8868\u73fe\u3057, Reaper\u306f\u5f7c\u3089\u306e\u30bd\u30a6\u30eb\u3092\u3059\u3079\u3066\u56de\u53ce\u3057\u305f\u5f8c\u3067\u30b7\u30b9\u30c6\u30e0\u5168\u4f53\u3092\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u3057\u307e\u3059.\n\n### Reaper Code\n> The Reaper itself is wonderfully simple. All it has to do is accept a message that tells it to watch an ActorRef, and then make a call to a method when everything it\u2019s watching has kicked the bucket.\n\nReaper\u81ea\u4f53\u306f\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u3067\u3059. \u3084\u308b\u3079\u304d\u3053\u3068\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u3063\u3066\u306fActorRef\u306e\u76e3\u8996\u3092\u958b\u59cb\u3057, \u76e3\u8996\u3057\u3066\u3044\u308b\u3059\u3079\u3066\u306eActor\u304c\u5c45\u306a\u304f\u306a\u3063\u305f\u3068\u304d\u306b\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3076\u3060\u3051\u3067\u3059.\n\n```Reaper.scala\nimport akka.actor.{Actor, ActorRef, Terminated}\nimport scala.collection.mutable.ArrayBuffer\n\nobject Reaper {\n  // Used by others to register an Actor for watching\n  case class WatchMe(ref: ActorRef)\n}\n\nabstract class Reaper extends Actor {\n  import Reaper._\n\n  // Keep track of what we're watching\n  val watched = ArrayBuffer.empty[ActorRef]\n\n  // Derivations need to implement this method.  It's the\n  // hook that's called when everything's dead\n  def allSoulsReaped(): Unit\n\n  // Watch and check for termination\n  final def receive = {\n    case WatchMe(ref) =>\n      context.watch(ref)\n      watched += ref\n    case Terminated(ref) =>\n      watched -= ref\n      if (watched.isEmpty) allSoulsReaped()\n  }\n}\n```\n\n### A \u201cProduction\u201d Reaper\n> Given the simplicity of the Reaper, we can now create an even simpler Production Reaper, that shuts down the ActorSystem when everything\u2019s 6 feet in the ground.\n\nReaper\u3092\u4f7f\u3046\u3068Production Reaper\u3082\u7c21\u5358\u306b\u66f8\u3051\u307e\u3059. \u3059\u3079\u3066\u306e\u76e3\u8996\u5bfe\u8c61\u304c\u6b7b\u3093\u3060\u5f8c\u306bActorSystem\u3092\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u3057\u307e\u3059.\n\n```ProductionReaper.scala\nclass ProductionReaper extends Reaper {\n  // Shutdown\n  def allSoulsReaped(): Unit = context.system.shutdown()\n}\n```\n\n### Testing the Reaper\n> It\u2019s always nice to have tests. Here we use Akka\u2019s TestKit along with its TestProbe and ImplicitSender to hook up everything we need to test our Reaper.\n\n\u3044\u3064\u3044\u304b\u306a\u308b\u3068\u304d\u3082\u30c6\u30b9\u30c8\u3092\u66f8\u304f\u306e\u306f\u826f\u3044\u3053\u3068\u3067\u3059. \u3053\u3053\u3067\u306fAkka\u306e`TestKit`\u3068`TestProbe`, `ImplicitSender`\u3092\u4f7f\u3063\u3066Reaper\u306e\u30c6\u30b9\u30c8\u306b\u5fc5\u8981\u306a\u3082\u306e\u3092\u30d5\u30c3\u30af\u3057\u3066\u307f\u307e\u3059.\n\n```TestReaper.scala\nimport akka.actor.{ActorSystem, Props, ActorRef}\nimport akka.testkit.{TestKit, ImplicitSender, TestProbe}\nimport org.scalatest.{WordSpec, BeforeAndAfterAll}\nimport org.scalatest.matchers.MustMatchers\n\n// Our test reaper.  Sends the snooper a message when all\n// the souls have been reaped\nclass TestReaper(snooper: ActorRef) extends Reaper {\n  def allSoulsReaped(): Unit = snooper ! \"Dead\"\n}\n\nclass ReaperSpec extends TestKit(ActorSystem(\"ReaperSpec\"))\n       with ImplicitSender\n       with WordSpec\n       with BeforeAndAfterAll\n       with MustMatchers {\n  import Reaper._\n\n  override def afterAll() {\n    system.shutdown()\n  }\n\n  \"Reaper\" should {\n    \"work\" in {\n      // Set up some dummy Actors\n      val a = TestProbe()\n      val b = TestProbe()\n      val c = TestProbe()\n      val d = TestProbe()\n\n      // Build our reaper\n      val reaper = system.actorOf(Props(new TestReaper(testActor)))\n      \n      // Watch a couple \n      reaper ! WatchMe(a.ref)\n      reaper ! WatchMe(d.ref)\n\n      // Stop them\n      system.stop(a.ref)\n      system.stop(d.ref)\n\n      // Make sure we've been called\n      expectMsg(\"Dead\")\n    }\n  }\n}\n```\n\n### Application with PoisonPill\n> The Reaper is very good at being flexible when the goal is to drain a set of (one or more) Mailboxes. Let\u2019s say you have a message processing system whereby you send a bunch of messages (or work) to some Actors, which may send more messages (or work) to other Actors. What you want to do is shut down when a key set of Mailboxes have been drained. For this, we use Akka\u2019s PoisonPill message. The PoisonPill goes into the Actor\u2019s Mailbox and will get processed in due course, which will kill the Actor. The key point is that all of the messages that exist ahead of the PoisonPill will be processed. This is different than just shutting down an Actor using system.stop.\n\n1\u3064\u4ee5\u4e0a\u306eMailbox\u3092\u7a7a\u306b\u3059\u308b\u3053\u3068\u304c\u76ee\u7684\u3067\u3042\u308b\u3068\u304d, Reaper\u306f\u67d4\u8edf\u6027\u306e\u70b9\u3067\u975e\u5e38\u306b\u512a\u308c\u3066\u3044\u307e\u3059. \u30e1\u30c3\u30bb\u30fc\u30b8\u30f3\u30b0\u6a5f\u69cb\u3092\u5229\u7528\u3057, \u5225\u306eActor\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308b\u53ef\u80fd\u6027\u304c\u3042\u308bActor\u306b\u5bfe\u3057\u3066\u307e\u3068\u307e\u3063\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308b\u3053\u3068\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046. \u3042\u306a\u305f\u306e\u76ee\u7684\u306fKey Mailbox\u304c\u7a7a\u306b\u306a\u3063\u305f\u3068\u304d\u306b\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u3059\u308b\u3053\u3068\u3067\u3059. \u3053\u306e\u30b1\u30fc\u30b9\u3067\u306fAkka\u306e`PoisonPill(\u6bd2\u85ac)`\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u9069\u3057\u3066\u3044\u307e\u3059. `PoisonPill`\u304cMailbox\u306b\u5165\u3063\u3066\u51e6\u7406\u3055\u308c\u308b\u3068Actor\u306f\u6b7b\u306b\u307e\u3059. \u30dd\u30a4\u30f3\u30c8\u306f, `PoisonPill`\u4ee5\u524d\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u3059\u3079\u3066\u51e6\u7406\u3055\u308c\u308b\u3053\u3068\u3067\u3059. \u3053\u308c\u304cActor\u304c`system.stop`\u3092\u4f7f\u3046\u3053\u3068\u3068\u306e\u76f8\u9055\u70b9\u3067\u3059.\n\n> We can see how PoisonPill messages can be propagated through an Actor application in the following:\n\n\u4e0b\u56f3\u306b`PoisonPill`\u304c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306eActor\u306b\u3069\u306e\u3088\u3046\u306b\u4f1d\u64ad\u3059\u308b\u304b\u3092\u793a\u3057\u307e\u3059:\n\n<\u56f3\u306f\u307e\u3060\u306a\u3044>\n\n> Once the last PoisonPill message has been processed, the Reaper will kick in and do whatever it is you want done, such as shut down the ActorSystem.\n\n\u6700\u5f8c\u306e`PoisonPill`\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51e6\u7406\u3055\u308c\u305f\u3068\u304dReaper\u304c\u4f5c\u52d5\u3057, ActorSystem\u306e\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u306a\u3069\u306e, \u3042\u306a\u305f\u306e\u671b\u3080\u6319\u52d5\u3092\u884c\u3044\u307e\u3059.\n\n## Conclusion\n> Akka doesn\u2019t know when your'e done doing what it is you\u2019re doing since only you know what it is that you\u2019re doing. Here we\u2019ve covered a couple of mechanisms you can employ for knowing when to shut down your system. There are, of course, many others that you can probably think of, including something as simple as an external message that tells a specific Actor to ShutDown.\n\n\u3042\u306a\u305f\u304c\u3057\u305f\u3044\u3053\u3068\u306f\u3042\u306a\u305f\u3060\u3051\u304c\u77e5\u3063\u3066\u304a\u308a, Akka\u306b\u306f\u3042\u306a\u305f\u304c\u4f55\u3092\u3057\u305f\u3044\u306e\u304b\u5206\u304b\u308a\u307e\u305b\u3093. \u672c\u8a18\u4e8b\u306f\u30b7\u30b9\u30c6\u30e0\u3092\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u3059\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u30922\u3064\u7d39\u4ecb\u3057\u307e\u3057\u305f. \u3053\u308c\u4ee5\u5916\u306b\u3082, \u7279\u5b9a\u306eActor\u3060\u3051\u3092\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u3059\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308b\u306a\u3069, \u8003\u3048\u5f97\u308b\u4ed5\u7d44\u307f\u306f\u7121\u6570\u306b\u3042\u308a\u307e\u3059.\n\n> With the Reaper pattern we\u2019ve made use of the Actor paradigm to put a level of abstraction into the system, which uses the basic functionality of Actors (namely that of DeathWatch) to add \u201csystem level\u201d behaviour to our applications. The Untyped Actor, along with the basic tool of DeathWatch, provide the kind of flexibility that you can turn to in order to add some cool functionality to your apps.\n\nReaper\u30d1\u30bf\u30fc\u30f3\u3067\u306fActor\u306e\u57fa\u672c\u6a5f\u80fd(`DeathWatch`)\u3092\u7528\u3044\u3066, \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u5bfe\u3057\u3066\u30b7\u30b9\u30c6\u30e0\u30ec\u30d9\u30eb\u306e\u52d5\u4f5c\u3092\u8ffd\u52a0\u3059\u308b, \u62bd\u8c61\u7684\u306a\u30ec\u30d9\u30eb\u306e\u4ed5\u7d44\u307f\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f. `UntypedActor`\u306f`DeathWatch`\u306e\u57fa\u672c\u6a5f\u80fd\u3068\u3068\u3082\u306b\u3042\u306a\u305f\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u7d20\u6674\u3089\u3057\u3044\u6a5f\u80fd\u3092\u3082\u3089\u305f\u3059\u67d4\u8edf\u6027\u3092\u63d0\u4f9b\u3057\u307e\u3059.\n"}