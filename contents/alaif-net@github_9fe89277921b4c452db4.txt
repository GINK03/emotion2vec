{"context": " More than 1 year has passed since last update.C++\u306eHTTP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea\u306ecURLpp(cURL\u306eC++\u30e9\u30c3\u30d1)\u3092\u4f7f\u3063\u3066\u307f\u305f\u306e\u3067\u3001\ncurlpp \u3092\u4f7f\u3063\u3066\u307f\u308b - GET \u7de8 - \u79c1\u306e\u65e5\u5e38\u3092\u53c2\u8003(\u305d\u306e\u307e\u307e)\u306b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u4f5c\u3063\u3066\u307f\u305f\u3002\n\ncurlpp_exam.cpp\n#include <curlpp/cURLpp.hpp>\n#include <curlpp/Easy.hpp>\n#include <curlpp/Options.hpp>\n#include <iostream>\n\nusing namespace std;\nusing namespace cURLpp::Options;\n\nclass CurlExam {\npublic:\n        string m_content;\n\n        bool get(const string &url)\n        {\n                try {\n                        cURLpp::Cleanup cleaner;\n                        cURLpp::Easy    req;\n                        req.setOpt(new Url(url));\n                        req.setOpt(new WriteFunction(\n                                cURLpp::Types::WriteFunctionFunctor(this, &CurlExam::writeMemoryCallback))\n                        );\n\n                        req.perform();\n                } catch (cURLpp::LogicError & e) {\n                        return false;\n                } catch (cURLpp::RuntimeError & e) {\n                        return false;\n                }\n                return true;\n        }\n\nprivate:\n        size_t writeMemoryCallback(char *pstr, size_t size, size_t nmemb)\n        {\n                size_t allsize = size * nmemb;\n\n                m_content.append(static_cast<const char *>(pstr), allsize);\n\n                return allsize;\n        }\n};\n\nint main(void)\n{\n        CurlExam cx;\n        bool ret;\n\n        ret = cx.get(\"http://blog.alaif.net/\");\n        if (ret) {\n                cout << cx.m_content;\n        }\n\n        return ret;\n}\n\n\n\u30d3\u30eb\u30c9\u306f\u3001\n\nclang++ -I/usr/local/include -L/usr/local/lib -lcurl -lcurlpp curlpp_sample.cpp -o curlpp_sample\n\n\u3067\u3002\n\u3046\u3093\u3001\u7c21\u5358\u306b\u3067\u304d\u308b\u3082\u3093\u3060\u3002\n\u6b21\u306f\u3001C++11\u306e\u6a5f\u80fd\u3082\u4f7f\u3063\u3066\u66f8\u3044\u3066\u307f\u3088\u3046\u3002\nC++\u306eHTTP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea\u306ecURLpp(cURL\u306eC++\u30e9\u30c3\u30d1)\u3092\u4f7f\u3063\u3066\u307f\u305f\u306e\u3067\u3001\n[curlpp \u3092\u4f7f\u3063\u3066\u307f\u308b - GET \u7de8 - \u79c1\u306e\u65e5\u5e38](http://tsuyuguchi.com/masaaki/mt/archives/2007/10/21-1416.php)\u3092\u53c2\u8003(\u305d\u306e\u307e\u307e)\u306b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u4f5c\u3063\u3066\u307f\u305f\u3002\n\n```C++:curlpp_exam.cpp\n#include <curlpp/cURLpp.hpp>\n#include <curlpp/Easy.hpp>\n#include <curlpp/Options.hpp>\n#include <iostream>\n\nusing namespace std;\nusing namespace cURLpp::Options;\n\nclass CurlExam {\npublic:\n        string m_content;\n\n        bool get(const string &url)\n        {\n                try {\n                        cURLpp::Cleanup cleaner;\n                        cURLpp::Easy    req;\n                        req.setOpt(new Url(url));\n                        req.setOpt(new WriteFunction(\n                                cURLpp::Types::WriteFunctionFunctor(this, &CurlExam::writeMemoryCallback))\n                        );\n\n                        req.perform();\n                } catch (cURLpp::LogicError & e) {\n                        return false;\n                } catch (cURLpp::RuntimeError & e) {\n                        return false;\n                }\n                return true;\n        }\n\nprivate:\n        size_t writeMemoryCallback(char *pstr, size_t size, size_t nmemb)\n        {\n                size_t allsize = size * nmemb;\n\n                m_content.append(static_cast<const char *>(pstr), allsize);\n\n                return allsize;\n        }\n};\n\nint main(void)\n{\n        CurlExam cx;\n        bool ret;\n\n        ret = cx.get(\"http://blog.alaif.net/\");\n        if (ret) {\n                cout << cx.m_content;\n        }\n\n        return ret;\n}\n```\n\n\u30d3\u30eb\u30c9\u306f\u3001\n\n``\nclang++ -I/usr/local/include -L/usr/local/lib -lcurl -lcurlpp curlpp_sample.cpp -o curlpp_sample\n``\n\n\u3067\u3002\n\n\u3046\u3093\u3001\u7c21\u5358\u306b\u3067\u304d\u308b\u3082\u3093\u3060\u3002\n\n\u6b21\u306f\u3001C++11\u306e\u6a5f\u80fd\u3082\u4f7f\u3063\u3066\u66f8\u3044\u3066\u307f\u3088\u3046\u3002", "tags": ["C++clang++ 3.3", "FreeBSD10.0-RELEASE"]}