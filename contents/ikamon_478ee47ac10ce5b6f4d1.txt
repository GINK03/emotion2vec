{"tags": ["RxJava", "Android"], "context": "\u3053\u3093\u306b\u3061\u306f\u3002Origami Advent Calender 22\u65e5\u76ee\u306e\u8a18\u4e8b\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3053\u3068\u306e\u306f\u3058\u307e\u308a\n\u6700\u8fd1 RxJava \u4f7f\u3044\u59cb\u3081\u305f\u3093\u3067\u3059\u304c\u3001\n\u6bce\u5ea6\u304a\u306a\u3058\u307f\u975e\u540c\u671f\u3067\u6295\u3052\u305f\u30a4\u30d9\u30f3\u30c8\u306e\u767b\u9332\u5143\u304c\u7834\u68c4\u3055\u308c\u3066\u3044\u305f\u3068\u304d\u306b\u3001\n\u591a\u3044\u306b\u56f0\u308b\u7cfb\u306e\u8a71\u306b\u60a9\u3093\u3067\u3044\u307e\u3057\u305f\u3002\n\u5df7\u3067\u306f RxLifecycle \u3068\u3044\u3046\u306e\u304c\u5272\u3068\u4f7f\u308f\u308c\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3059\u3002\n\nWeakSubscriber \u3068 ReusableCompositeSubscription\n\u305f\u3060\u3001hogehogeActivity\u3092\u7d99\u627f\u3059\u308b\u7cfb\u306f\u907f\u3051\u305f\u304b\u3063\u305f\u306e\u3067\u8abf\u3079\u305f\u3068\u3053\u308d\u3001\nSubscriber\u306e\u30e9\u30c3\u30d1\u30fc\u3068CompositeSubscription\u306e\u30e9\u30c3\u30d1\u30fc\u3092\u3064\u304f\u3063\u3066\n\u9811\u5f35\u3063\u3066\u3044\u308b\u4eba\u304c\u3044\u305f\u306e\u3067\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\nSubscriber\u306e\u30e9\u30c3\u30d1\u30fc\u3067\u306fWeakSubscrber\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308a\u3001\n\u3084\u308a\u65b9\u306f\u3053\u3061\u3089\u306e\u307b\u3046\u304c\u5168\u4f53\u7684\u306b\u3059\u3063\u304d\u308a\u3057\u305d\u3046\u3067\u3057\u305f\u304c\u3001\n\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306b\u5f71\u97ff\u3057\u3066\u3057\u307e\u3046\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u3061\u3087\u3063\u3068\u65ad\u5ff5\u3002\n\u305d\u3053\u3067\u5dee\u3057\u8fbc\u3080\u3088\u3046\u306b\u4f7f\u3048\u308b\n\u3082\u3046\u4e00\u65b9\u306eCompositeSubscription\u306e\u30e9\u30c3\u30d1\u30fc\nReusableCompositeSubscription\u306b\u3057\u307e\u3057\u305f\u3002\n-> \u53c2\u8003\u30b3\u30fc\u30c9\nCompositeSubscription\u3068\u3044\u3046\u306e\u306f\u3001RxJava\u306b\u5165\u3063\u3066\u3044\u308bSubscription\u3092\n\u307e\u3068\u3081\u3066unsubscribe\u3067\u304d\u308b\u3082\u306e\u3067\u3059\u3002\n\u305f\u3060\u3001\u4e00\u5ea6unsubscribe\u3059\u308b\u3068\u518d\u5229\u7528\u3067\u304d\u306a\u3044\u306e\u3067\u3001\nReusableCompositeSubscription\u3067\u306f\n\u4e00\u5ea6\u753b\u9762\u9077\u79fb\u306a\u3069\u3057\u3066\u307e\u305f\u623b\u3063\u305f\u3068\u304d\u306b\u4f5c\u308a\u76f4\u3059\u3068\u3044\u3046\u4f5c\u696d\u3092\n\u4f7f\u3046\u5074\u304c\u6c17\u306b\u305b\u305a\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3082\u306e\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u3002\n\n\u65e9\u3059\u304e\u308b\u30a4\u30d9\u30f3\u30c8\u767b\u9332\u306b\u5bfe\u51e6\n\u3053\u306eCompositeSubscription\u81ea\u4f53\u306f\u3001\nonStart\u3067Subscription\u3092add\nonStop\u3067unsubscribe\u3059\u308b\u306e\u3092\u63a8\u5968\u3057\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001View\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u306e\u65e9\u3044\u6bb5\u968e\u3067Subscription\u3092add\u3059\u308b\u3068\n\u843d\u3061\u3066\u3057\u307e\u3046\u30b1\u30fc\u30b9\u304c\u3042\u3063\u305f\u306e\u3067\u3001\nonStart\u306e\u524d\u307e\u3067\u306badd\u3057\u305fSubscription\u3092\u30d7\u30fc\u30eb\u3059\u308b\u4f5c\u308a\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\nReusableCompositeSubscription.java\n\npublic class ReusableCompositeSubscription {\n\n    private CompositeSubscription mCompositeSubscription;\n\n    private boolean subscrisable = false;\n    private boolean firstSubscribe = true;\n    private List<Subscription> mUnregisteredSubscriptions = new ArrayList<Subscription>();\n    private List<Subscription> mPoolSubscriptions = new ArrayList<Subscription>();\n\n    /**\n     * Add subscription to CompositeSubscription if prepared.\n     * @param subscription\n     */\n    public void add(@NonNull Subscription subscription) {\n        if (mCompositeSubscription == null) {\n            mCompositeSubscription = new CompositeSubscription();\n        }\n\n        if (subscription == null) {\n            return;\n        }\n\n        mPoolSubscriptions.add(subscription);\n        if (subscrisable) {\n            mCompositeSubscription.add(subscription);\n        } else {\n            mUnregisteredSubscriptions.add(subscription);\n        }\n    }\n\n    /**\n     * Should be called 'onStart','onDraw'...\n     * Enable to become prepared CompositeSubscription frag and Add pools to CompositeSubscription\n     */\n    public void subscribe() {\n        subscrisable = true;\n        if (mCompositeSubscription == null) {\n            mCompositeSubscription = new CompositeSubscription();\n        }\n\n        if (firstSubscribe) {\n            firstSubscribe = false;\n            for (Subscription s : mUnregisteredSubscriptions) {\n                if (s != null) {\n                    mCompositeSubscription.add(s);\n                }\n            }\n            mUnregisteredSubscriptions = new ArrayList<Subscription>();\n        } else {\n            // seconde or later subscribe\n            for (Subscription s : mPoolSubscriptions) {\n                if (s != null) {\n                    mCompositeSubscription.add(s);\n                }\n            }\n        }\n    }\n\n    /**\n     * Should be called 'onStop'...\n     */\n    public void unsubscribe() {\n        subscrisable = false;\n        if (mCompositeSubscription != null) {\n            mCompositeSubscription.unsubscribe();\n            mCompositeSubscription = null;\n        }\n    }\n}\n\n\n\n\n\u4f7f\u3044\u65b9\n\nTestActivity.java\n\npublic class TestActivity extends SingleFragmentActivity {\n\n    private ReusableCompositeSubscription mCompositeSubscription = \n                                   new ReusableCompositeSubscription();\n\n    @Override\n    protected Fragment buildFragment() {\n        return null;\n    }\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        // Scheduler \u306f Schedulers.io() \u306b\u6295\u3052\u3066\u3001\n        // Android \u306e main thread \u3067\u53d7\u3051\u53d6\u308b\u3088\u3046\u306bhogehoge\n        Subscription s = APIClient.get(new Subscriber<Result>() {\n            @Override\n            public void onCompleted() {\n                // Completed\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                // Error\n            }\n\n            @Override\n            public void onNext(Result result) {\n                // Success\n            }\n        });\n        // \u3053\u306e\u6642\u70b9\u3067 original \u306e CompositeSubscription \u306f\u751f\u6210\u3055\u308c\u3066\u304a\u3089\u305a\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000// add \u3057\u305f Subscription\u3000\u306f\u30d7\u30fc\u30eb\u3055\u308c\u3066\u3044\u307e\u3059\n        mCompositeSubscription.add(s);\n    }\n\n    @Override\n    protected void onStart() {\n        super.onStart();\n        // \u3053\u3053\u3067original\u306e CompositeSubscription \u3092\u751f\u6210\u3001\n        // \u30d7\u30fc\u30eb\u3057\u305f\u3000Subscription\u3000\u3092\u5b9f\u969b\u306b\u306fadd\u3055\u308c\u3066\u3044\u308b\n        mCompositeSubscription.subscribe();\n    }\n\n    @Override\n    protected void onStop() {\n        super.onStop();\n        mCompositeSubscription.unsubscribe();\n    }\n}\n\n\n\u3053\u3093\u306b\u3061\u306f\u3002Origami Advent Calender 22\u65e5\u76ee\u306e\u8a18\u4e8b\u306b\u306a\u308a\u307e\u3059\u3002\n\n# \u3053\u3068\u306e\u306f\u3058\u307e\u308a\n\n\u6700\u8fd1 RxJava \u4f7f\u3044\u59cb\u3081\u305f\u3093\u3067\u3059\u304c\u3001\n\u6bce\u5ea6\u304a\u306a\u3058\u307f\u975e\u540c\u671f\u3067\u6295\u3052\u305f\u30a4\u30d9\u30f3\u30c8\u306e\u767b\u9332\u5143\u304c\u7834\u68c4\u3055\u308c\u3066\u3044\u305f\u3068\u304d\u306b\u3001\n\u591a\u3044\u306b\u56f0\u308b\u7cfb\u306e\u8a71\u306b\u60a9\u3093\u3067\u3044\u307e\u3057\u305f\u3002\n\u5df7\u3067\u306f RxLifecycle \u3068\u3044\u3046\u306e\u304c\u5272\u3068\u4f7f\u308f\u308c\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3059\u3002\n\n# WeakSubscriber \u3068 ReusableCompositeSubscription\n\u305f\u3060\u3001hogehogeActivity\u3092\u7d99\u627f\u3059\u308b\u7cfb\u306f\u907f\u3051\u305f\u304b\u3063\u305f\u306e\u3067\u8abf\u3079\u305f\u3068\u3053\u308d\u3001\nSubscriber\u306e\u30e9\u30c3\u30d1\u30fc\u3068CompositeSubscription\u306e\u30e9\u30c3\u30d1\u30fc\u3092\u3064\u304f\u3063\u3066\n\u9811\u5f35\u3063\u3066\u3044\u308b\u4eba\u304c\u3044\u305f\u306e\u3067\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\nSubscriber\u306e\u30e9\u30c3\u30d1\u30fc\u3067\u306fWeakSubscrber\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308a\u3001\n\u3084\u308a\u65b9\u306f\u3053\u3061\u3089\u306e\u307b\u3046\u304c\u5168\u4f53\u7684\u306b\u3059\u3063\u304d\u308a\u3057\u305d\u3046\u3067\u3057\u305f\u304c\u3001\n\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306b\u5f71\u97ff\u3057\u3066\u3057\u307e\u3046\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u3061\u3087\u3063\u3068\u65ad\u5ff5\u3002\n\n\u305d\u3053\u3067\u5dee\u3057\u8fbc\u3080\u3088\u3046\u306b\u4f7f\u3048\u308b\n\u3082\u3046\u4e00\u65b9\u306eCompositeSubscription\u306e\u30e9\u30c3\u30d1\u30fc\nReusableCompositeSubscription\u306b\u3057\u307e\u3057\u305f\u3002\n-> [\u53c2\u8003\u30b3\u30fc\u30c9](https://github.com/dbacinski/meteopl-unofficial/blob/master/app/src/main/java/pl/dariuszbacinski/meteo/component/rx/ReusableCompositeSubscription.java)\n\nCompositeSubscription\u3068\u3044\u3046\u306e\u306f\u3001RxJava\u306b\u5165\u3063\u3066\u3044\u308bSubscription\u3092\n\u307e\u3068\u3081\u3066unsubscribe\u3067\u304d\u308b\u3082\u306e\u3067\u3059\u3002\n\n\u305f\u3060\u3001\u4e00\u5ea6unsubscribe\u3059\u308b\u3068\u518d\u5229\u7528\u3067\u304d\u306a\u3044\u306e\u3067\u3001\nReusableCompositeSubscription\u3067\u306f\n\u4e00\u5ea6\u753b\u9762\u9077\u79fb\u306a\u3069\u3057\u3066\u307e\u305f\u623b\u3063\u305f\u3068\u304d\u306b\u4f5c\u308a\u76f4\u3059\u3068\u3044\u3046\u4f5c\u696d\u3092\n\u4f7f\u3046\u5074\u304c\u6c17\u306b\u305b\u305a\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3082\u306e\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u3002\n\n\n# \u65e9\u3059\u304e\u308b\u30a4\u30d9\u30f3\u30c8\u767b\u9332\u306b\u5bfe\u51e6\n\n\u3053\u306eCompositeSubscription\u81ea\u4f53\u306f\u3001\nonStart\u3067Subscription\u3092add\nonStop\u3067unsubscribe\u3059\u308b\u306e\u3092\u63a8\u5968\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u307e\u305f\u3001View\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u306e\u65e9\u3044\u6bb5\u968e\u3067Subscription\u3092add\u3059\u308b\u3068\n\u843d\u3061\u3066\u3057\u307e\u3046\u30b1\u30fc\u30b9\u304c\u3042\u3063\u305f\u306e\u3067\u3001\nonStart\u306e\u524d\u307e\u3067\u306badd\u3057\u305fSubscription\u3092\u30d7\u30fc\u30eb\u3059\u308b\u4f5c\u308a\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n```java:ReusableCompositeSubscription.java\n\npublic class ReusableCompositeSubscription {\n\n    private CompositeSubscription mCompositeSubscription;\n\n    private boolean subscrisable = false;\n    private boolean firstSubscribe = true;\n    private List<Subscription> mUnregisteredSubscriptions = new ArrayList<Subscription>();\n    private List<Subscription> mPoolSubscriptions = new ArrayList<Subscription>();\n\n    /**\n     * Add subscription to CompositeSubscription if prepared.\n     * @param subscription\n     */\n    public void add(@NonNull Subscription subscription) {\n        if (mCompositeSubscription == null) {\n            mCompositeSubscription = new CompositeSubscription();\n        }\n\n        if (subscription == null) {\n            return;\n        }\n\n        mPoolSubscriptions.add(subscription);\n        if (subscrisable) {\n            mCompositeSubscription.add(subscription);\n        } else {\n            mUnregisteredSubscriptions.add(subscription);\n        }\n    }\n\n    /**\n     * Should be called 'onStart','onDraw'...\n     * Enable to become prepared CompositeSubscription frag and Add pools to CompositeSubscription\n     */\n    public void subscribe() {\n        subscrisable = true;\n        if (mCompositeSubscription == null) {\n            mCompositeSubscription = new CompositeSubscription();\n        }\n\n        if (firstSubscribe) {\n            firstSubscribe = false;\n            for (Subscription s : mUnregisteredSubscriptions) {\n                if (s != null) {\n                    mCompositeSubscription.add(s);\n                }\n            }\n            mUnregisteredSubscriptions = new ArrayList<Subscription>();\n        } else {\n            // seconde or later subscribe\n            for (Subscription s : mPoolSubscriptions) {\n                if (s != null) {\n                    mCompositeSubscription.add(s);\n                }\n            }\n        }\n    }\n\n    /**\n     * Should be called 'onStop'...\n     */\n    public void unsubscribe() {\n        subscrisable = false;\n        if (mCompositeSubscription != null) {\n            mCompositeSubscription.unsubscribe();\n            mCompositeSubscription = null;\n        }\n    }\n}\n\n```\n\n# \u4f7f\u3044\u65b9\n\n```java:TestActivity.java\n\npublic class TestActivity extends SingleFragmentActivity {\n\n    private ReusableCompositeSubscription mCompositeSubscription = \n                                   new ReusableCompositeSubscription();\n\n    @Override\n    protected Fragment buildFragment() {\n        return null;\n    }\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        // Scheduler \u306f Schedulers.io() \u306b\u6295\u3052\u3066\u3001\n        // Android \u306e main thread \u3067\u53d7\u3051\u53d6\u308b\u3088\u3046\u306bhogehoge\n        Subscription s = APIClient.get(new Subscriber<Result>() {\n            @Override\n            public void onCompleted() {\n                // Completed\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                // Error\n            }\n\n            @Override\n            public void onNext(Result result) {\n                // Success\n            }\n        });\n        // \u3053\u306e\u6642\u70b9\u3067 original \u306e CompositeSubscription \u306f\u751f\u6210\u3055\u308c\u3066\u304a\u3089\u305a\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000// add \u3057\u305f Subscription\u3000\u306f\u30d7\u30fc\u30eb\u3055\u308c\u3066\u3044\u307e\u3059\n        mCompositeSubscription.add(s);\n    }\n\n    @Override\n    protected void onStart() {\n        super.onStart();\n        // \u3053\u3053\u3067original\u306e CompositeSubscription \u3092\u751f\u6210\u3001\n        // \u30d7\u30fc\u30eb\u3057\u305f\u3000Subscription\u3000\u3092\u5b9f\u969b\u306b\u306fadd\u3055\u308c\u3066\u3044\u308b\n        mCompositeSubscription.subscribe();\n    }\n\n    @Override\n    protected void onStop() {\n        super.onStop();\n        mCompositeSubscription.unsubscribe();\n    }\n}\n```\n"}