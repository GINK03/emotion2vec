{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u3068 Python \u306e\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u306e\u305f\u3081\uff0c\u6771\u5317\u5927\u5b66\u306e\u4e7e\u30fb\u5ca1\u5d0e\u7814\u7a76\u5ba4 Web \u30da\u30fc\u30b8\u306b\u3066\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af\u306b\u6311\u6226\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\u305d\u306e\u4e2d\u3067\u5b9f\u88c5\u3057\u305f\u30b3\u30fc\u30c9\u3084\uff0c\u6291\u3048\u3066\u304a\u304f\u3079\u304d\u30c6\u30af\u30cb\u30c3\u30af\u7b49\u3005\u3092\u30e1\u30e2\u3057\u3066\u3044\u304f\u4e88\u5b9a\u3067\u3059\uff0e\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\u306fGitHub\u3067\u3082\u516c\u958b\u3057\u3066\u3044\u307e\u3059\uff0e\n\u6559\u79d1\u66f8\u306f\u300ePython\u5165\u9580 2&3\u5bfe\u5fdc\uff08\u7d30\u7530\u8b19\u4e8c\u3089\u8457\uff0c\u79c0\u548c\u30b7\u30b9\u30c6\u30e0\uff09\u300f\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\uff0e\n\u30b9\u30bf\u30fc\u30c8\u30a2\u30c3\u30d7\u306b\u969b\u3057\u3066\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u3044\u305f\u8a18\u4e8b\u3092\u3054\u7d39\u4ecb\u3044\u305f\u3057\u307e\u3059\uff0e\u53c2\u8003\u306b\u3057\u3059\u304e\u3066\u308b\u611f\u3082\u5426\u3081\u306a\u3044\u306e\u3067\uff0c\u4e0d\u5feb\u306b\u611f\u3058\u3089\u308c\u305f\u3089\u3054\u9023\u7d61\u304f\u3060\u3055\u3044\uff0e\n\nhttp://qiita.com/tanaka0325/items/08831b96b684d7ecb2f7\n\n\u30ba\u30d6\u306e\u7d20\u4eba\u306a\u306e\u3067\u8a18\u6cd5\u304c\u7d71\u4e00\u3055\u308c\u3066\u306a\u304b\u3063\u305f\u308a\uff0cPython 2/3 \u95a2\u4fc2\u304c\u6df7\u5728\u3057\u3066\u3044\u305f\u308a\u3068\u5927\u5909\u304a\u898b\u82e6\u3057\u3044\u306e\u3067\u3059\u304c\uff0c\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u308c\u3070\u5e78\u3044\u3067\u3059\uff0e\u5b9f\u884c\u74b0\u5883\u81ea\u4f53\u306f Python 2 \u3067\u3059\uff0e\n\n\u7b2c1\u7ae0: \u6e96\u5099\u904b\u52d5\n\n00. \u6587\u5b57\u5217\u306e\u9006\u9806\n\n\u6587\u5b57\u5217\"stressed\"\u306e\u6587\u5b57\u3092\u9006\u306b\uff08\u672b\u5c3e\u304b\u3089\u5148\u982d\u306b\u5411\u304b\u3063\u3066\uff09\u4e26\u3079\u305f\u6587\u5b57\u5217\u3092\u5f97\u3088\uff0e\n\n\n\u56de\u7b54\n\n00.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 00.py\n\nstr = \"stressed\"\nprint(str[-1::-1])\n\n\n\n\u30b3\u30e1\u30f3\u30c8\n\u6587\u5b57\u5217\u306b\u5bfe\u3059\u308b\u300c\u30b9\u30e9\u30a4\u30b9\u300d\u3068\u3044\u3046\u30c6\u30af\u30cb\u30c3\u30af\u306e\u7df4\u7fd2\u554f\u984c\u7684\u306a\u8ab2\u984c\uff0e\u524d\u8ff0\u306e\u8a18\u4e8b\u3067\u3082\u89e6\u308c\u3089\u308c\u3066\u3044\u307e\u3059\u304c\uff0c\u6539\u3081\u3066\u30b9\u30e9\u30a4\u30b9\u306e\u304a\u52c9\u5f37\uff0e\n\u30b9\u30e9\u30a4\u30b9\u306f\u6587\u5b57\u5217\u30a4\u30f3\u30c7\u30c3\u30af\u30b9[\u958b\u59cb\u30a4\u30f3\u30c7\u30c3\u30af\u30b9:\u7d42\u4e86\u30a4\u30f3\u30c7\u30c3\u30af\u30b9:\u30b9\u30c6\u30c3\u30d7\u6570]\u3068\u3044\u3046\u5f62\u3067\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3067\uff0c\u6587\u5b57\u5217\u306e\u4e00\u90e8\u3092\u5207\u308a\u53d6\u3063\u3066\u53d6\u5f97\u3059\u308b\u64cd\u4f5c\u65b9\u6cd5\uff0e\u6587\u5b57\u5217\u4ee5\u5916\u306b\u30ea\u30b9\u30c8\u306a\u3069\u3067\u3082\u53ef\uff0e\nstr = \"abcdefgh\"\n\n# \u7279\u5b9a\u306e\u6587\u5b57\u3092\u53d6\u5f97\nstr[0]        # 'a'\uff0c\u5148\u982d\u304b\u3089 zero-based\nstr[-1]       # 'h'\uff0c\u8ca0\u306e\u6570\u3067\u3082\u6307\u5b9a\u53ef\u80fd\uff08\u6587\u672b\u304b\u3089\u9061\u3063\u3066\u3044\u304f\uff09\u3000\u4eca\u56de\u306fstr[7]\u3068\u540c\u7fa9\n\n# \u30b9\u30e9\u30a4\u30b9\nstr[1:3]      # 'bc'\uff0c\u7d42\u4e86\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6587\u5b57\u306f\u542b\u307e\u306a\u3044\u306e\u3067\u6ce8\u610f\uff0e\u6587\u5b57\u6570\u3068\u304b\u3067\u3082\u306a\u3044\nstr[0:-3]     # 'abcde'\uff0c\u8ca0\u306e\u6570\u3067\u3082OK\uff0e\u4eca\u56de\u3067\u306fstr[0:5]\u3068\u540c\u7fa9\nstr[:4]       # 'abcd'\uff0c\u958b\u59cb\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u7701\u7565\u3057\u305f\u5834\u5408\u306f\u6700\u521d\u304b\u3089\nstr[4:]       # 'efgh'\uff0c\u7d42\u4e86\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u7701\u7565\u3057\u305f\u5834\u5408\u306f\u6700\u5f8c\u307e\u3067\n\n# \u30b9\u30c6\u30c3\u30d7\u6570\u6307\u5b9a\nstr[0:6:2]    # 'ace'\uff0c\u30b9\u30c6\u30c3\u30d7\u6570\u3067\u6307\u5b9a\u3057\u305f\u5206\uff0c\u98db\u3073\u98db\u3073\u306e\u6587\u5b57\u3092\u53d6\u5f97\uff080,2,4\u756a\u76ee\uff09\nstr[::3]      # 'adg'\uff0c\u7701\u7565\u3082\u53ef\u80fd\nstr[-3::2]    # 'fh'\uff0c\u8ca0\u306e\u6570\u3082\u53ef\u80fd\nstr[::-3]     # 'hed'\uff0c\u30b9\u30c6\u30c3\u30d7\u6570\u3092\u8ca0\u306e\u6570\u306b\u3059\u308b\u3068\u9006\u9806\u306b\u9061\u3063\u3066\u3044\u304f\n\n\u306a\u306e\u3067\u4eca\u56de\u306e\u56de\u7b54\u306f str[::-1] \u3067\u826f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\uff0c\u30b9\u30e9\u30a4\u30b9\u521d\u4f53\u9a13\u3060\u3063\u305f\u306e\u3067\u5927\u76ee\u306b\u898b\u3066\u304f\u3060\u3055\u3044...\n\n01. \u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\n\n\u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\u3068\u3044\u3046\u6587\u5b57\u5217\u306e1,3,5,7\u6587\u5b57\u76ee\u3092\u53d6\u308a\u51fa\u3057\u3066\u9023\u7d50\u3057\u305f\u6587\u5b57\u5217\u3092\u5f97\u3088\uff0e\n\n\n\u56de\u7b54\n\n01.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 01.py\n\nstr = u'\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc'\nprint(str[0::2])\n\n\n\n\u30b3\u30e1\u30f3\u30c8\n00 \u3068\u540c\u69d8\u306b\u30b9\u30e9\u30a4\u30b9\u306e\u7df4\u7fd2\u554f\u984c\uff0e\u3053\u308c\u307e\u305f\u540c\u69d8\u306b\u958b\u59cb\u4f4d\u7f6e\u3092\u7701\u7565\u3057\u3066\u3088\u304f str[::2] \u3067 OK\uff0e\n\u307e\u305f\u65e5\u672c\u8a9e\uff08Unicode\uff09\u306e\u6587\u5b57\u5217\u306f u'\u307b\u3052\u307b\u3052' \u3068\u3044\u3063\u305f\u3088\u3046\u306b u \u3092\u5148\u982d\u306b\u3064\u3051\u308c\u3070\u3088\u3044\uff08UTF-8\u74b0\u5883\uff09\uff0e\n\n02. \u300c\u30d1\u30c8\u30ab\u30fc\u300d\uff0b\u300c\u30bf\u30af\u30b7\u30fc\u300d\uff1d\u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\n\n\u300c\u30d1\u30c8\u30ab\u30fc\u300d\uff0b\u300c\u30bf\u30af\u30b7\u30fc\u300d\u306e\u6587\u5b57\u3092\u5148\u982d\u304b\u3089\u4ea4\u4e92\u306b\u9023\u7d50\u3057\u3066\u6587\u5b57\u5217\u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\u3092\u5f97\u3088\uff0e\n\n\n\u56de\u7b54\n\n02.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 02.py\n\nstr1 = u'\u30d1\u30c8\u30ab\u30fc'\nstr2 = u'\u30bf\u30af\u30b7\u30fc'\nstr3 = u''\n\nfor a,b in zip(str1, str2):\n    str3 = str3 + a + b\n\nprint str3\n\n\n\n\u30b3\u30e1\u30f3\u30c8\nzip()\u306f\u5404\u5f15\u6570\u304b\u3089\u8981\u7d20\u30921\u3064\u305a\u3064\u53d6\u308a\u51fa\u3057\u3066\u30bf\u30d7\u30eb\u3092\u751f\u6210\u3057\u3066\u304f\u308c\u308b\u95a2\u6570\uff0efor loop \u306e\u6761\u4ef6\u6307\u5b9a\u306e\u969b\u306b\u4f7f\u3048\u308b\u30c6\u30af\u30cb\u30c3\u30af\uff0e\nprint \u304c\u7a81\u7136\u95a2\u6570\u3058\u3083\u306a\u304f\u306a\u3063\u3066\u307e\u3059\u304c\uff0c\u3053\u3061\u3089\u306f Python 2 \u8a18\u6cd5\uff0e\u6df7\u5728\u3057\u3066\u3066\u3054\u3081\u3093\u306a\u3055\u3044\uff0e\n\u305d\u3057\u3066\u3053\u308c\u307e\u305f\u524d\u8ff0\u8a18\u4e8b\u3067\u3082\u89e6\u308c\u3089\u308c\u3066\u3044\u307e\u3059\u304c\uff0c\u3069\u3046\u3082\u30eb\u30fc\u30d7\u6642\u306b\u6bce\u56de\u6bce\u56de\u672b\u5c3e\u306b\u8ffd\u52a0\u3057\u3066\u3044\u304f\u65b9\u5f0f\u306f\u5b9f\u884c\u901f\u5ea6\u7684\u306b\u554f\u984c\u30a2\u30ea\u3068\u306e\u3053\u3068\uff0e\nprint(''.join([a + b for a, b in zip(str1, str2)])) \u3068\u3057\u3066\uff0c\u3042\u3068\u3067\u6587\u5b57\u5217\u3092\u307e\u3068\u3081\u3066\u7d50\u5408\u3055\u305b\u3066\u3057\u307e\u3046\u306e\u304c\u30d9\u30b9\u30c8\u3089\u3057\u3044\uff0e\n''.join() \u306f\u5f15\u6570\u5185\u306e\u8981\u7d20\u3092 '' \u5185\u306e\u533a\u5207\u308a\u6587\u5b57\u3067\u533a\u5207\u3063\u305f\u4e0a\u3067\u7d50\u5408\u3059\u308b\u3068\u3044\u3046\u3082\u306e\uff0e\u66f8\u304d\u65b9\u304c\u5909\u308f\u3063\u3066\u3044\u308b\u306e\u3067\u8981\u6ce8\u610f\uff0e\n\n03. \u5186\u5468\u7387\n\n\"Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.\"\u3068\u3044\u3046\u6587\u3092\u5358\u8a9e\u306b\u5206\u89e3\u3057\uff0c\u5404\u5358\u8a9e\u306e\uff08\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\uff09\u6587\u5b57\u6570\u3092\u5148\u982d\u304b\u3089\u51fa\u73fe\u9806\u306b\u4e26\u3079\u305f\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u305b\u3088\uff0e\n\n\n\u56de\u7b54\n\n03.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 03.py\n\nstr = \"Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.\"\nstr = str.replace('.', \"\")\nstr = str.replace(',', \"\")\nstr = str.split()\n\nlist = []\n\nfor word in str:\n    list.append(len(word))\n\nprint list\n\n\n\n\u30b3\u30e1\u30f3\u30c8\nreplace() \u3067\u30d4\u30ea\u30aa\u30c9\u3084\u30ab\u30f3\u30de\u3092\u9664\u53bb\u3057\u305f\u3042\u3068\uff0csplit() \u3067\u5358\u8a9e\u3054\u3068\u306b\u533a\u5207\u308a\uff0clen() \u3067\u305d\u306e\u9577\u3055\u3092\u53d6\u5f97\u3057\u3066list\u306b\u7a81\u3063\u8fbc\u3080\uff0c\u3068\u3044\u3046\u6d41\u308c\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\u30d4\u30ea\u30aa\u30c9\u3084\u30ab\u30f3\u30de\u3092\u3082\u3063\u3068\u4e0a\u624b\u304f\u9664\u53bb\u3067\u304d\u308b\u65b9\u6cd5\u306f\u7121\u3044\u306e\u304b\u306a\u3042\u2026\u3068\u601d\u3044\u3064\u3064\u3082\u65ad\u5ff5\uff0esplit() \u306f\u5f15\u6570\u3067\u533a\u5207\u308a\u6587\u5b57\u3092\u6307\u5b9a\u3067\u304d\u308b\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u306f\u30b9\u30da\u30fc\u30b9\uff09\u306e\u3067\u5168\u90e8\u307e\u3068\u3081\u3066\u6307\u5b9a\u3057\u3088\u3046\u304b\u3068\u601d\u3063\u305f\u3051\u3069\u3067\u304d\u305a\uff0e\n\n04. \u5143\u7d20\u8a18\u53f7\n\n\"Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.\"\u3068\u3044\u3046\u6587\u3092\u5358\u8a9e\u306b\u5206\u89e3\u3057\uff0c1, 5, 6, 7, 8, 9, 15, 16, 19\u756a\u76ee\u306e\u5358\u8a9e\u306f\u5148\u982d\u306e1\u6587\u5b57\uff0c\u305d\u308c\u4ee5\u5916\u306e\u5358\u8a9e\u306f\u5148\u982d\u306b2\u6587\u5b57\u3092\u53d6\u308a\u51fa\u3057\uff0c\u53d6\u308a\u51fa\u3057\u305f\u6587\u5b57\u5217\u304b\u3089\u5358\u8a9e\u306e\u4f4d\u7f6e\uff08\u5148\u982d\u304b\u3089\u4f55\u756a\u76ee\u306e\u5358\u8a9e\u304b\uff09\u3078\u306e\u9023\u60f3\u914d\u5217\uff08\u8f9e\u66f8\u578b\u3082\u3057\u304f\u306f\u30de\u30c3\u30d7\u578b\uff09\u3092\u4f5c\u6210\u305b\u3088\uff0e\n\n\n\u56de\u7b54\n\n04.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 04.py\n\nstr = \"Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.\"\nstr = str.split()\n\ndict = {}\nsingle = [1, 5, 6, 7, 8, 9, 15, 16, 19]\n\nfor element in str:\n    if str.index(element) + 1 in single:\n        dict[element[:1]] = str.index(element) + 1\n    else:\n        dict[element[:2]] = str.index(element) + 1\n\n# \u539f\u5b50\u756a\u53f7\u9806\u306b\u30bd\u30fc\u30c8\u3057\u3066 print\uff08\u86c7\u8db3\uff09\nfor k, v in sorted(dict.items(), key=lambda x:x[1]):\n    print k, v\n\n\n\n\u30b3\u30e1\u30f3\u30c8\n03\u3068\u540c\u69d8\uff0c\u5358\u8a9e\u3054\u3068\u306b\u533a\u5207\u3063\u3066 for loop \u3067\u500b\u5225\u306b\u51e6\u7406\u3057\u3066\u3044\u307e\u3059\uff0e\u3069\u3046\u305b\u5148\u982d\u3057\u304b\u898b\u306a\u3044\u306e\u3067\u30d4\u30ea\u30aa\u30c9\u306e\u51e6\u7406\u306f\u7701\u7565\u3057\u3066\u3044\u307e\u3059\uff0e\n\u3053\u306e\u307e\u307e\u3060\u3068\u30de\u30b0\u30cd\u30b7\u30a6\u30e0\u304c Mi \u3068\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u306f\u8151\u306b\u843d\u3061\u306a\u3044\u3067\u3059\u304c\u2026\u3084\u3080\u306a\u3057\uff1f\u500b\u5225\u306b\u6307\u5b9a\u3057\u3066\u30b9\u30e9\u30a4\u30b9\uff08element[:3:2]\uff09\u3059\u308c\u3070\u826f\u3044\u3093\u3060\u3051\u308c\u3069\u3082\uff0e\n\u308f\u3056\u308f\u3056 single \u3068\u7f6e\u304f\u5fc5\u8981\u3082\u7121\u3044\u4e00\u65b9\uff0cstr.index(element) + 1 \u306f3\u56de\u767b\u5834\u3059\u308b\u306e\u3067\uff0c\u3053\u306e\u8fba\u306f\u4e0a\u624b\u304f\u6574\u7406\u3057\u305f\u3044\u3068\u3053\u308d\uff0e\u9069\u5f53\u306a\u5909\u6570\u306b\u4ee3\u5165\u3057\u3061\u3083\u3048\u3070\u89e3\u6c7a\u304b\uff0e\n\u307e\u305f\uff0c\u8f9e\u66f8\u306f\u305d\u3082\u305d\u3082\u9806\u5e8f\u3092\u4fdd\u8a3c\u3057\u306a\u3044\u306e\u3067\u3059\u304c\uff0c\u898b\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306b\u30bd\u30fc\u30c8\uff0e\n\n\u4fee\u6b63\n\n\u4fee\u6b63\u7248\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 04.py\n\nstr = \"Hi He Lied Because Boron Could Not Oxidize Fluorine.\\\n New Nations Might Also Sign Peace Security Clause. Arthur King Can.\"\nwords_list = str.split()\n\ndict = {}\nsingle = [0, 4, 5, 6, 7, 8, 14, 15, 18]\n\nfor i in range(len(words_list)):\n    clen = 1 if i in single else 2\n    dict[words_list[i][:clen]] = i + 1\n\n# \u539f\u5b50\u756a\u53f7\u9806\u306b\u30bd\u30fc\u30c8\u3057\u3066 print\uff08\u86c7\u8db3\uff09\n# for k, v in sorted(dict.items(), key=lambda x: x[1]):\n#     print(k, v)\n\n\n\n\u4e3b\u306a\u6539\u5584\u70b9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n\n\\ \u3092\u7528\u3044\u305f\u9577\u3059\u304e\u308b\u884c\u306e\u9014\u4e2d\u6539\u884c\n\nstr \u306e\u4f7f\u3044\u56de\u3057\u56de\u907f\n\nsingle \u3092 zero-based \u306b\u5909\u66f4\n\u5197\u9577\u306a\u30b3\u30fc\u30c9\u306e\u6574\u7406\n\nfor \u306e\u6761\u4ef6\u3092\u8981\u7d20\u304b\u3089\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u5909\u66f4\n\n\u7279\u306b\u4eca\u56de\u306e\u4e2d\u3067\u5927\u304d\u3044\u306e\u306f\uff0cfor \u3092 \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3067\u56de\u3057\u305f\u3068\u3053\u308d\u3060\u3068\u601d\u3044\u307e\u3059\uff0e\n\u4ee5\u524d\u306e\u30b3\u30fc\u30c9\u3067\u306f\u521d\u3081\u3066\u77e5\u3063\u305f for \u306e\u66f8\u304d\u65b9\u3092\u8a66\u3057\u305f\u304f\u3066\uff0c\u305d\u306e\u7d50\u679c index() \u3067\u6539\u3081\u3066\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97\u3057\u3066\u307e\u3059\u3057\u306d\u2026\n\n05. n-gram\n\n\u4e0e\u3048\u3089\u308c\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\uff08\u6587\u5b57\u5217\u3084\u30ea\u30b9\u30c8\u306a\u3069\uff09\u304b\u3089n-gram\u3092\u4f5c\u308b\u95a2\u6570\u3092\u4f5c\u6210\u305b\u3088\uff0e\u3053\u306e\u95a2\u6570\u3092\u7528\u3044\uff0c\"I am an NLPer\"\u3068\u3044\u3046\u6587\u304b\u3089\u5358\u8a9ebi-gram\uff0c\u6587\u5b57bi-gram\u3092\u5f97\u3088\uff0e\n\n\n\u56de\u7b54\n\n05.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 05.py\n\noriginal = \"I am an NLPer\"\n\ndef ngram(input, n):\n    # \u6587\u5b57 n-gram (\u5f15\u6570 str)\n    l = len(input)\n    if type(input) == str:\n        input = \"$\" * (n - 1) + input + \"$\" * (n - 1)\n        for i in xrange(l + 1):\n            print input[i:i+n]\n    # \u5358\u8a9e n-gram (\u5f15\u6570 list)\n    elif type(input) == list:\n        input = [\"$\"] * (n - 1) + input + [\"$\"] * (n - 1)\n        for i in xrange(l + 1):\n            print input[i:i+n]\n\nngram(original, 2)              # \u6587\u5b57 n-gram\noriginal = original.split()\nngram(original, 2)              # \u5358\u8a9e n-gram\n\n\n\n\u30b3\u30e1\u30f3\u30c8\n\u4e88\u60f3\u4ee5\u4e0a\u306b\u624b\u3053\u305a\u3063\u305f\uff0e\u6587\u5b57\u6570\u306e\u9577\u3055\u306e\u95a2\u4fc2\u3067\uff0c\u00b11\u306a\u3069\u306e\u5fae\u8abf\u6574\u591a\u6570...\n\u6587\u5b57\u5217\u306e\u5148\u982d\u4ee5\u524d\u30fb\u7d42\u7aef\u4ee5\u964d\u306b $ \u3092\u633f\u5165\u3057\u305f\uff0e\nJava \u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306e\u3088\u3046\u306a\u6a5f\u80fd\u3092\u5b9f\u88c5\u3057\u305f\u304b\u3063\u305f\u306e\u3060\u304c\uff0cPython \u3067\u306f\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u3044\u305d\u3046\u306a\u306e\u3067 type() \u3067\u6ce5\u81ed\u304f\u5b9f\u88c5\uff0e\n\n\u3044\u305f\u3060\u3044\u305f\u30b3\u30e1\u30f3\u30c8\u30fb\u5b9f\u88c5\nknok\u3055\u3093 \u304b\u3089\u3044\u305f\u3060\u3044\u305f\u30b3\u30e1\u30f3\u30c8\u304a\u3088\u3073\u5b9f\u88c5\u3067\u3059\uff0e\n\nknok\u3055\u3093\u306b\u3088\u308bngram\u95a2\u6570\u306e\u5b9f\u88c5\ndef ngram(input, n):\n    last = len(input) - n + 1\n    ret = []\n    for i in range(0, last):\n        ret.append(input[i:i+n])\n    return ret\n\n\n\u5148\u982d\u30fb\u672b\u5c3e\u306b $ \u3092\u633f\u5165\u3057\u306a\u3044\u3053\u3068\u3067\uff0c\u4e00\u6c17\u306b\u30b9\u30de\u30fc\u30c8\u306a\u5b9f\u88c5\u306b\uff0e\n\u6587\u5b57\u5217\u3068\u30ea\u30b9\u30c8\u3067\u306f\uff0c\u3069\u3061\u3089\u3082\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3067\u8981\u7d20\u3092\u6307\u5b9a\u3057\u305f\u308a\u30b9\u30e9\u30a4\u30b9\u3092\u884c\u3063\u305f\u308a\u51fa\u6765\u308b\u305f\u3081\uff0c\u7279\u306b\u578b\u3092\u610f\u8b58\u3059\u308b\u3053\u3068\u306f\u306a\u3044\u3068\u306e\u3053\u3068\uff0e\n\u3046\u30fc\u3080\u7f8e\u3057\u3044\uff0e\u6539\u3081\u3066\u81ea\u5206\u306e\u30b3\u30fc\u30c9\u898b\u308b\u3068\u3081\u307e\u3044\u304c\u3057\u307e\u3059\u306d\uff0e\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\uff0e\n\n06. \u96c6\u5408\n\n\"paraparaparadise\"\u3068\"paragraph\"\u306b\u542b\u307e\u308c\u308b\u6587\u5b57bi-gram\u306e\u96c6\u5408\u3092\uff0c\u305d\u308c\u305e\u308c, X\u3068Y\u3068\u3057\u3066\u6c42\u3081\uff0cX\u3068Y\u306e\u548c\u96c6\u5408\uff0c\u7a4d\u96c6\u5408\uff0c\u5dee\u96c6\u5408\u3092\u6c42\u3081\u3088\uff0e\u3055\u3089\u306b\uff0c'se'\u3068\u3044\u3046bi-gram\u304cX\u304a\u3088\u3073Y\u306b\u542b\u307e\u308c\u308b\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u3088\uff0e\n\n\n\u56de\u7b54\n\n06.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 06.py\n\nstr1 = \"paraparaparadise\"\nstr2 = \"paragraph\"\n\ndef ngram(input, n):\n    l = len(input)\n    list = []\n    input = \"$\" * (n - 1) + input + \"$\" * (n - 1)\n    for i in xrange(l + 1):\n        list.append(input[i:i+n])\n    return list\n\n# ngram \u306e list \u3092 set \u306b; \u91cd\u8907\u3092\u6392\u9664\u3067\u304d\u308b\u4e0a\u306b\u96c6\u5408\u6f14\u7b97\u304c\u51fa\u6765\u308b\nX = set(ngram(str1, 2))\nY = set(ngram(str2, 2))\n\nprint X.union(Y)            # \u548c\u96c6\u5408\nprint X.intersection(Y)     # \u7a4d\u96c6\u5408\nprint X.difference(Y)       # \u5dee\u96c6\u5408\n\nprint \"se\" in X     # in: X \u306b \"se\" \u304c\u542b\u307e\u308c\u3066\u3044\u308c\u3070 True, \u3044\u306a\u3051\u308c\u3070 False\nprint \"se\" in Y     # \u307b\u3068\u3093\u3069\u540c\u4e0a\uff08X -> Y\uff09\n\n\n\n\n\u30b3\u30e1\u30f3\u30c8\n\u5177\u4f53\u7684\u306a\u4f7f\u3044\u65b9\u306b\u95a2\u3057\u3066\u306f\u30b3\u30fc\u30c9\u3092\u53c2\u7167\uff0e\u3053\u3046\u3044\u3046\u64cd\u4f5c\u304c\u76f4\u611f\u7684\u306b\u66f8\u3051\u308b\u306e\u306f\u5b09\u3057\u3044\uff0e\n\n\u4fee\u6b63\n\n\u4fee\u6b63\u7248\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 06.py\n\nfrom mymodule import ngram\n\nstr1 = \"paraparaparadise\"\nstr2 = \"paragraph\"\n\nX = set(ngram(str1, 2))\nY = set(ngram(str2, 2))\n\n# \u5f8c\u7565\n\n\n\n\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\uff0c05\u3067\u4f5c\u6210\u3057\u305f\u81ea\u4f5c\u95a2\u6570\u3092\u518d\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u8a2d\u5b9a\u3057\u307e\u3057\u305f\uff0e\n\n07. \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u3088\u308b\u6587\u751f\u6210\n\n\u5f15\u6570x, y, z\u3092\u53d7\u3051\u53d6\u308a\u300cx\u6642\u306ey\u306fz\u300d\u3068\u3044\u3046\u6587\u5b57\u5217\u3092\u8fd4\u3059\u95a2\u6570\u3092\u5b9f\u88c5\u305b\u3088\uff0e\u3055\u3089\u306b\uff0cx=12, y=\"\u6c17\u6e29\", z=22.4\u3068\u3057\u3066\uff0c\u5b9f\u884c\u7d50\u679c\u3092\u78ba\u8a8d\u305b\u3088\uff0e\n\n\n\u56de\u7b54\n\n07.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 07.py\n\nx = 12\ny = u'\u6c17\u6e29'\nz = 22.4\n\ndef function(x, y, z):\n    return unicode(x) + u'\u6642\u306e' + unicode(y) + u'\u306f' + unicode(z)\n\nprint function(x, y, z)\n\n\n\n\n\u30b3\u30e1\u30f3\u30c8\nx, y \u306f\u305d\u308c\u305e\u308c int, float \u306a\u306e\u3067\uff0cUnicode \u3068\u9023\u7d50\u3059\u308b\u969b\u306b\u306f\u5909\u63db\u3057\u3066\u3042\u3052\u306a\u3044\u3068\u3044\u3051\u306a\u3044\uff0e\n\u6587\u5b57\u30b3\u30fc\u30c9\u306e\u5909\u63db\u306f\u6df1\u304f\u6398\u308a\u4e0b\u3052\u308b\u3068\u304b\u306a\u308a\u5965\u304c\u6df1\u305d\u3046\u3060\u3051\u3069\uff0c\u4eca\u56de\u306f\u3053\u308c\u3067\u52d5\u4f5c\u3057\u305f\u306e\u3067\u4f55\u3088\u308a\uff0e\nzip() \u3092\u5229\u7528\u3059\u308b\u624b\u3082\u3042\u308a\u304b\uff1f \u306a\u3055\u305d\u3046\uff0e\n\n08. \u6697\u53f7\u6587\n\n\u4e0e\u3048\u3089\u308c\u305f\u6587\u5b57\u5217\u306e\u5404\u6587\u5b57\u3092\uff0c\u4ee5\u4e0b\u306e\u4ed5\u69d8\u3067\u5909\u63db\u3059\u308b\u95a2\u6570cipher\u3092\u5b9f\u88c5\u305b\u3088\uff0e\n\n\u82f1\u5c0f\u6587\u5b57\u306a\u3089\u3070(219 - \u6587\u5b57\u30b3\u30fc\u30c9)\u306e\u6587\u5b57\u306b\u7f6e\u63db\n\u305d\u306e\u4ed6\u306e\u6587\u5b57\u306f\u305d\u306e\u307e\u307e\u51fa\u529b\n\n\u3053\u306e\u95a2\u6570\u3092\u7528\u3044\uff0c\u82f1\u8a9e\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6697\u53f7\u5316\u30fb\u5fa9\u53f7\u5316\u305b\u3088\uff0e\n\n\n\u56de\u7b54\n\n08.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 08.py\n\n# \u51fa\u5178: Wikipedia \u82f1\u8a9e\u7248 \"Atbash\" \u3088\u308a\nstr = \"Atbash is a simple substitution cipher for the Hebrew alphabet.\"\n\ndef cipher(input):\n    ret = \"\"\n    for char in input:\n        ret += chr(219-ord(char)) if char.islower() else char\n    return ret\n\nstr = cipher(str)\nprint str\nstr = cipher(str)\nprint str\n\n\n\n\u30b3\u30e1\u30f3\u30c8\n\u3044\u308f\u3086\u308b\u300c\u30a2\u30c8\u30d0\u30b7\u30e5\u6697\u53f7\u300d\u306a\u306e\u3067\uff0c\u540c\u4e00\u95a2\u6570\u3067\u6697\u53f7\u5316\u3068\u5fa9\u53f7\u304c\u53ef\u80fd\uff0e\nchr() \u306fASCII\u30b3\u30fc\u30c9\u304b\u3089\u5177\u4f53\u7684\u306a\u6587\u5b57\u306b\u5909\u63db\u3057\u3066\u304f\u308c\u308b\u95a2\u6570\uff08chr(97) -> 'a'\uff09\uff0e\nord() \u306f\u305d\u306e\u9006\u3060\u3051\u3069\uff0cUnicode \u3067\u3042\u308c\u3070 Unicode \u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u8fd4\u3057\u3066\u304f\u308c\u308b\uff0e\nchr() \u306e Unicode \u7248\u304c unichr()\uff0e\n\n\n\n\u5909\u63db\u524d\n\u5909\u63db\u5f8c\n\u4f7f\u7528\u3059\u308b\u95a2\u6570\n\n\n\n\nASCII \u30b3\u30fc\u30c9\nASCII \u6587\u5b57\nchr()\n\n\nUnicode \u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\nUnicode \u6587\u5b57\nunichr()\n\n\nASCII \u6587\u5b57\nASCII \u30b3\u30fc\u30c9\nord()\n\n\nUnicode \u6587\u5b57\nUnicode \u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\nord()\n\n\n\n\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3082\u53c2\u7167\uff0e\n\u4e09\u9805\u6f14\u7b97\u5b50\u3092\u5229\u7528\u3057\u3066 if \u5206\u5c90\u3092\u307e\u3068\u3081\u307e\u3057\u305f\uff0e\n\n\u4e09\u9805\u6f14\u7b97\u5b50\n# \u6761\u4ef6\u5f0f\u304c\u771f\u306e\u3068\u304d\u50241\uff0c\u507d\u306e\u3068\u304d\u50242\n\u50241 if \u6761\u4ef6\u5f0f else \u50242\n\n\n\n09. Typoglycemia\n\n\u30b9\u30da\u30fc\u30b9\u3067\u533a\u5207\u3089\u308c\u305f\u5358\u8a9e\u5217\u306b\u5bfe\u3057\u3066\uff0c\u5404\u5358\u8a9e\u306e\u5148\u982d\u3068\u672b\u5c3e\u306e\u6587\u5b57\u306f\u6b8b\u3057\uff0c\u305d\u308c\u4ee5\u5916\u306e\u6587\u5b57\u306e\u9806\u5e8f\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u4e26\u3073\u66ff\u3048\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u305b\u3088\uff0e\u305f\u3060\u3057\uff0c\u9577\u3055\u304c\uff14\u4ee5\u4e0b\u306e\u5358\u8a9e\u306f\u4e26\u3073\u66ff\u3048\u306a\u3044\u3053\u3068\u3068\u3059\u308b\uff0e\u9069\u5f53\u306a\u82f1\u8a9e\u306e\u6587\uff08\u4f8b\u3048\u3070\"I couldn't believe that I could actually understand what I was reading : the phenomenal power of the human mind .\"\uff09\u3092\u4e0e\u3048\uff0c\u305d\u306e\u5b9f\u884c\u7d50\u679c\u3092\u78ba\u8a8d\u305b\u3088\uff0e\n\n\n\u56de\u7b54\n\n09.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 09.py\nimport random\n\nstr = \"I couldn't believe that I could actually understand what I was reading : the phenomenal power of the human mind .\"\nwords = str.split()\nshuffled_list = []\n\nfor word in words:\n    if len(word) < 4:\n        pass\n    else:\n        char_list = list(word)\n        mid_list = char_list[1:-1]\n        random.shuffle(mid_list)\n        word = word[0] + \"\".join(mid_list) + word[-1]\n    shuffled_list.append(word)\n\nshuffled_str = \" \".join(shuffled_list)\nprint shuffled_str\n\n\n\n\n\u30b3\u30e1\u30f3\u30c8\nrandom.shuffle() \u3067\u6587\u5b57\u5217\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u5165\u308c\u66ff\u3048\u3066\u304f\u308c\u308b\uff01\u3059\u3054\u304f\u4fbf\u5229\uff0e\nC \u3067\u5b9f\u88c5\u3057\u3088\u3046\u3068\u3057\u305f\u3089\u304b\u306a\u308a\u9762\u5012\u81ed\u305d\u3046\u3060\u3051\u3069\u2026 Python \u306f\u3053\u3046\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u5145\u5b9f\u3057\u3066\u3044\u308b\u306e\u3067\u6709\u308a\u96e3\u3044\uff0e\n\u5b8c\u5168\u306b\u30e9\u30f3\u30c0\u30e0\u306a\u306e\u3067\u5143\u306e\u6587\u5b57\u5217\u3068\u540c\u3058\u6587\u5b57\u5217\u304c\u8fd4\u3063\u3066\u304f\u308b\u3053\u3068\u3082\uff0e\u6587\u5b57\u5217\u6bd4\u8f03\u3057\u3066\u540c\u3058\u306a\u3089\u3084\u308a\u76f4\u3057\uff0c\u3068\u304b\u5b9f\u88c5\u3057\u3066\u3082\u826f\u3044\u304b\u3082\uff0e\n\n\u88dc\u8db3\n\uff08\u6587\u5b57\u5217\uff09\u6bd4\u8f03\u306b\u306f == \u3068 is \u304c\u5b58\u5728\u3059\u308b\uff0e\n== \u304c\u7d14\u7c8b\u306b\u5185\u5bb9\u3060\u3051\u3092\u6bd4\u8f03\u3059\u308b\u306e\u306b\u5bfe\u3057\uff0cis \u306f\u540c\u3058\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3069\u3046\u304b\u3092\u6bd4\u8f03\u3059\u308b\uff0e\n\u4eca\u56de\u3082\u3057\u6587\u5b57\u5217\u6bd4\u8f03\u3092\u5b9f\u88c5\u3059\u308b\u969b\u306b\u306f == \u3092\u4f7f\u3046\u65b9\u304c\u6b63\u3057\u3044\uff0e\n\uff08\u30af\u30a9\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\uff09\nPython \u3067\u306f\u6587\u5b57\u5217\u3092\u56f2\u3080\u969b\uff0c \" \u3068 ' \u306e\u3069\u3061\u3089\u3067\u3082 OK \u3067\u3059\uff0e\n\u3057\u304b\u3057\u82f1\u8a9e\u306e\u6240\u6709\u683c\u3084\u77ed\u7e2e\u5f62\u306e\u3068\u304d\u306b ' \u3092\u5229\u7528\u3059\u308b\u5834\u5408\uff0c\u6587\u5b57\u5217\u5168\u4f53\u3092 ' \u3067\u56f2\u3046\u3068\u30af\u30a9\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u304c\u5bfe\u5fdc\u305b\u305a\u306b\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\uff0e\n\u5bfe\u51e6\u6cd5\u3068\u3057\u3066\u306f \" \u3067\u56f2\u3046\u304b\uff0c\u30d0\u30c3\u30af\u30b9\u30e9\u30c3\u30b7\u30e5\u3067 \\' \u3068\u3044\u3063\u305f\u3088\u3046\u306b\u30a8\u30b9\u30b1\u30fc\u30d7\u3057\u3066\u3042\u3052\u308c\u3070\u5927\u4e08\u592b\u3067\u3059\uff0e\n\n\u4fee\u6b63\n\n\u4fee\u6b63\u7248\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 09.py\n\nimport random\n\n\ndef word_typoglycemia(word):\n    if len(word) <= 4:\n        return word\n\n    mid_list = list(word[1:-1])\n    while mid_list == list(word[1:-1]):\n        random.shuffle(mid_list)\n    return word[0] + \"\".join(mid_list) + word[-1]\n\n\ndef str_typoglycemia(str):\n    shuffled_list = []\n    for word in str.split():\n        shuffled_list.append(word_typoglycemia(word))\n    return \" \".join(shuffled_list)\n\n\nstr = \"I couldn't believe that I could actually understand \\\n what I was reading : the phenomenal power of the human mind .\"\n\nprint(str_typoglycemia(str))\n\n\n\n\u4e3b\u306a\u6539\u5584\u70b9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n\u95a2\u6570\u5316\n\u5197\u9577\u306a\u30b3\u30fc\u30c9\u306e\u6574\u7406\n\n\\ \u3092\u7528\u3044\u305f\u9577\u3059\u304e\u308b\u884c\u306e\u9014\u4e2d\u6539\u884c\n\u53b3\u5bc6\u306b\u554f\u984c\u6587\u3078\u306e\u6e96\u62e0\uff084\u6587\u5b57\u672a\u6e80\u306f\u9664\u5916\u21924\u6587\u5b57\u4ee5\u4e0b\u306f\u9664\u5916\uff09\n\u51e6\u7406\u524d\u5f8c\u3067\u5076\u7136\u4e00\u81f4\u3057\u3066\u540c\u3058\u6587\u5b57\u5217\u306b\u306a\u308b\u3053\u3068\u3092\u6392\u9664\uff08\u30e9\u30f3\u30c0\u30e0\uff0c\u3068\u3044\u3046\u89b3\u70b9\u3067\u306f\u3069\u3046\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u304c\uff09\n\n\u5927\u304d\u306a\u5909\u66f4\u70b9\u306f\u5076\u7136\u4e00\u81f4\u306e\u6392\u9664\u306b\u306a\u308a\u307e\u3059\u304c\uff0cwhile \u304c\u78ba\u5b9f\u306b\u7d42\u4e86\u3059\u308b\u4fdd\u8a3c\u304c\u7121\u3044\u306e\u304c\u3061\u3087\u3063\u3068\u5fc3\u6b8b\u308a\uff0e\n\u53ef\u80fd\u6027\u306f\u6975\u3081\u3066\u4f4e\u3044\u3067\u3059\u304c\u2026\uff08\u6700\u3082\u5371\u967a\u306a5\u6587\u5b57\u3067\u3082\uff0cn\u56de loop \u3092\u56de\u305b\u3070\u78ba\u7387\u306f 16n16n \\frac{1}{6^{n}}  \uff09\n\n\u304a\u308f\u308a\u306b\n\u7b2c2\u7ae0\u30fb\u524d\u7de8\u306b\u7d9a\u304d\u307e\u3059\uff0e\n# \u306f\u3058\u3081\u306b\n\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u3068 Python \u306e\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u306e\u305f\u3081\uff0c\u6771\u5317\u5927\u5b66\u306e\u4e7e\u30fb\u5ca1\u5d0e\u7814\u7a76\u5ba4 Web \u30da\u30fc\u30b8\u306b\u3066\u516c\u958b\u3055\u308c\u3066\u3044\u308b[\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af](http://www.cl.ecei.tohoku.ac.jp/nlp100/)\u306b\u6311\u6226\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\u305d\u306e\u4e2d\u3067\u5b9f\u88c5\u3057\u305f\u30b3\u30fc\u30c9\u3084\uff0c\u6291\u3048\u3066\u304a\u304f\u3079\u304d\u30c6\u30af\u30cb\u30c3\u30af\u7b49\u3005\u3092\u30e1\u30e2\u3057\u3066\u3044\u304f\u4e88\u5b9a\u3067\u3059\uff0e\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\u306f[GitHub](https://github.com/gamma1129/nlp100)\u3067\u3082\u516c\u958b\u3057\u3066\u3044\u307e\u3059\uff0e\n\n\u6559\u79d1\u66f8\u306f\u300ePython\u5165\u9580 2&3\u5bfe\u5fdc\uff08\u7d30\u7530\u8b19\u4e8c\u3089\u8457\uff0c\u79c0\u548c\u30b7\u30b9\u30c6\u30e0\uff09\u300f\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\uff0e\n\n\u30b9\u30bf\u30fc\u30c8\u30a2\u30c3\u30d7\u306b\u969b\u3057\u3066\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u3044\u305f\u8a18\u4e8b\u3092\u3054\u7d39\u4ecb\u3044\u305f\u3057\u307e\u3059\uff0e\u53c2\u8003\u306b\u3057\u3059\u304e\u3066\u308b\u611f\u3082\u5426\u3081\u306a\u3044\u306e\u3067\uff0c\u4e0d\u5feb\u306b\u611f\u3058\u3089\u308c\u305f\u3089\u3054\u9023\u7d61\u304f\u3060\u3055\u3044\uff0e\n\n * http://qiita.com/tanaka0325/items/08831b96b684d7ecb2f7\n\n\u30ba\u30d6\u306e\u7d20\u4eba\u306a\u306e\u3067\u8a18\u6cd5\u304c\u7d71\u4e00\u3055\u308c\u3066\u306a\u304b\u3063\u305f\u308a\uff0cPython 2/3 \u95a2\u4fc2\u304c\u6df7\u5728\u3057\u3066\u3044\u305f\u308a\u3068\u5927\u5909\u304a\u898b\u82e6\u3057\u3044\u306e\u3067\u3059\u304c\uff0c\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u308c\u3070\u5e78\u3044\u3067\u3059\uff0e\u5b9f\u884c\u74b0\u5883\u81ea\u4f53\u306f Python 2 \u3067\u3059\uff0e\n\n# \u7b2c1\u7ae0: \u6e96\u5099\u904b\u52d5\n\n## 00. \u6587\u5b57\u5217\u306e\u9006\u9806\n> \u6587\u5b57\u5217\"stressed\"\u306e\u6587\u5b57\u3092\u9006\u306b\uff08\u672b\u5c3e\u304b\u3089\u5148\u982d\u306b\u5411\u304b\u3063\u3066\uff09\u4e26\u3079\u305f\u6587\u5b57\u5217\u3092\u5f97\u3088\uff0e\n\n### \u56de\u7b54\n```python:00.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 00.py\n\nstr = \"stressed\"\nprint(str[-1::-1])\n```\n\n#### \u30b3\u30e1\u30f3\u30c8\n\u6587\u5b57\u5217\u306b\u5bfe\u3059\u308b\u300c\u30b9\u30e9\u30a4\u30b9\u300d\u3068\u3044\u3046\u30c6\u30af\u30cb\u30c3\u30af\u306e\u7df4\u7fd2\u554f\u984c\u7684\u306a\u8ab2\u984c\uff0e[\u524d\u8ff0\u306e\u8a18\u4e8b](http://qiita.com/tanaka0325/items/08831b96b684d7ecb2f7)\u3067\u3082\u89e6\u308c\u3089\u308c\u3066\u3044\u307e\u3059\u304c\uff0c\u6539\u3081\u3066\u30b9\u30e9\u30a4\u30b9\u306e\u304a\u52c9\u5f37\uff0e\n\n\u30b9\u30e9\u30a4\u30b9\u306f`\u6587\u5b57\u5217\u30a4\u30f3\u30c7\u30c3\u30af\u30b9[\u958b\u59cb\u30a4\u30f3\u30c7\u30c3\u30af\u30b9:\u7d42\u4e86\u30a4\u30f3\u30c7\u30c3\u30af\u30b9:\u30b9\u30c6\u30c3\u30d7\u6570]`\u3068\u3044\u3046\u5f62\u3067\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3067\uff0c\u6587\u5b57\u5217\u306e\u4e00\u90e8\u3092\u5207\u308a\u53d6\u3063\u3066\u53d6\u5f97\u3059\u308b\u64cd\u4f5c\u65b9\u6cd5\uff0e\u6587\u5b57\u5217\u4ee5\u5916\u306b\u30ea\u30b9\u30c8\u306a\u3069\u3067\u3082\u53ef\uff0e\n\n```python\nstr = \"abcdefgh\"\n\n# \u7279\u5b9a\u306e\u6587\u5b57\u3092\u53d6\u5f97\nstr[0]        # 'a'\uff0c\u5148\u982d\u304b\u3089 zero-based\nstr[-1]       # 'h'\uff0c\u8ca0\u306e\u6570\u3067\u3082\u6307\u5b9a\u53ef\u80fd\uff08\u6587\u672b\u304b\u3089\u9061\u3063\u3066\u3044\u304f\uff09\u3000\u4eca\u56de\u306fstr[7]\u3068\u540c\u7fa9\n\n# \u30b9\u30e9\u30a4\u30b9\nstr[1:3]      # 'bc'\uff0c\u7d42\u4e86\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6587\u5b57\u306f\u542b\u307e\u306a\u3044\u306e\u3067\u6ce8\u610f\uff0e\u6587\u5b57\u6570\u3068\u304b\u3067\u3082\u306a\u3044\nstr[0:-3]     # 'abcde'\uff0c\u8ca0\u306e\u6570\u3067\u3082OK\uff0e\u4eca\u56de\u3067\u306fstr[0:5]\u3068\u540c\u7fa9\nstr[:4]       # 'abcd'\uff0c\u958b\u59cb\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u7701\u7565\u3057\u305f\u5834\u5408\u306f\u6700\u521d\u304b\u3089\nstr[4:]       # 'efgh'\uff0c\u7d42\u4e86\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u7701\u7565\u3057\u305f\u5834\u5408\u306f\u6700\u5f8c\u307e\u3067\n\n# \u30b9\u30c6\u30c3\u30d7\u6570\u6307\u5b9a\nstr[0:6:2]    # 'ace'\uff0c\u30b9\u30c6\u30c3\u30d7\u6570\u3067\u6307\u5b9a\u3057\u305f\u5206\uff0c\u98db\u3073\u98db\u3073\u306e\u6587\u5b57\u3092\u53d6\u5f97\uff080,2,4\u756a\u76ee\uff09\nstr[::3]      # 'adg'\uff0c\u7701\u7565\u3082\u53ef\u80fd\nstr[-3::2]    # 'fh'\uff0c\u8ca0\u306e\u6570\u3082\u53ef\u80fd\nstr[::-3]     # 'hed'\uff0c\u30b9\u30c6\u30c3\u30d7\u6570\u3092\u8ca0\u306e\u6570\u306b\u3059\u308b\u3068\u9006\u9806\u306b\u9061\u3063\u3066\u3044\u304f\n```\n\n\u306a\u306e\u3067\u4eca\u56de\u306e\u56de\u7b54\u306f `str[::-1]` \u3067\u826f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\uff0c\u30b9\u30e9\u30a4\u30b9\u521d\u4f53\u9a13\u3060\u3063\u305f\u306e\u3067\u5927\u76ee\u306b\u898b\u3066\u304f\u3060\u3055\u3044...\n\n## 01. \u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\n> \u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\u3068\u3044\u3046\u6587\u5b57\u5217\u306e1,3,5,7\u6587\u5b57\u76ee\u3092\u53d6\u308a\u51fa\u3057\u3066\u9023\u7d50\u3057\u305f\u6587\u5b57\u5217\u3092\u5f97\u3088\uff0e\n\n### \u56de\u7b54\n```python:01.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 01.py\n\nstr = u'\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc'\nprint(str[0::2])\n```\n#### \u30b3\u30e1\u30f3\u30c8\n00 \u3068\u540c\u69d8\u306b\u30b9\u30e9\u30a4\u30b9\u306e\u7df4\u7fd2\u554f\u984c\uff0e\u3053\u308c\u307e\u305f\u540c\u69d8\u306b\u958b\u59cb\u4f4d\u7f6e\u3092\u7701\u7565\u3057\u3066\u3088\u304f `str[::2]` \u3067 OK\uff0e\n\u307e\u305f\u65e5\u672c\u8a9e\uff08Unicode\uff09\u306e\u6587\u5b57\u5217\u306f `u'\u307b\u3052\u307b\u3052'` \u3068\u3044\u3063\u305f\u3088\u3046\u306b u \u3092\u5148\u982d\u306b\u3064\u3051\u308c\u3070\u3088\u3044\uff08UTF-8\u74b0\u5883\uff09\uff0e\n\n## 02. \u300c\u30d1\u30c8\u30ab\u30fc\u300d\uff0b\u300c\u30bf\u30af\u30b7\u30fc\u300d\uff1d\u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\n> \u300c\u30d1\u30c8\u30ab\u30fc\u300d\uff0b\u300c\u30bf\u30af\u30b7\u30fc\u300d\u306e\u6587\u5b57\u3092\u5148\u982d\u304b\u3089\u4ea4\u4e92\u306b\u9023\u7d50\u3057\u3066\u6587\u5b57\u5217\u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\u3092\u5f97\u3088\uff0e\n\n### \u56de\u7b54\n```python:02.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 02.py\n\nstr1 = u'\u30d1\u30c8\u30ab\u30fc'\nstr2 = u'\u30bf\u30af\u30b7\u30fc'\nstr3 = u''\n\nfor a,b in zip(str1, str2):\n    str3 = str3 + a + b\n\nprint str3\n```\n\n#### \u30b3\u30e1\u30f3\u30c8\n`zip()`\u306f\u5404\u5f15\u6570\u304b\u3089\u8981\u7d20\u30921\u3064\u305a\u3064\u53d6\u308a\u51fa\u3057\u3066\u30bf\u30d7\u30eb\u3092\u751f\u6210\u3057\u3066\u304f\u308c\u308b\u95a2\u6570\uff0e`for loop` \u306e\u6761\u4ef6\u6307\u5b9a\u306e\u969b\u306b\u4f7f\u3048\u308b\u30c6\u30af\u30cb\u30c3\u30af\uff0e\n `print` \u304c\u7a81\u7136\u95a2\u6570\u3058\u3083\u306a\u304f\u306a\u3063\u3066\u307e\u3059\u304c\uff0c\u3053\u3061\u3089\u306f Python 2 \u8a18\u6cd5\uff0e\u6df7\u5728\u3057\u3066\u3066\u3054\u3081\u3093\u306a\u3055\u3044\uff0e\n\n\u305d\u3057\u3066\u3053\u308c\u307e\u305f[\u524d\u8ff0\u8a18\u4e8b](http://qiita.com/tanaka0325/items/08831b96b684d7ecb2f7)\u3067\u3082\u89e6\u308c\u3089\u308c\u3066\u3044\u307e\u3059\u304c\uff0c\u3069\u3046\u3082\u30eb\u30fc\u30d7\u6642\u306b\u6bce\u56de\u6bce\u56de\u672b\u5c3e\u306b\u8ffd\u52a0\u3057\u3066\u3044\u304f\u65b9\u5f0f\u306f\u5b9f\u884c\u901f\u5ea6\u7684\u306b\u554f\u984c\u30a2\u30ea\u3068\u306e\u3053\u3068\uff0e\n`print(''.join([a + b for a, b in zip(str1, str2)]))` \u3068\u3057\u3066\uff0c\u3042\u3068\u3067\u6587\u5b57\u5217\u3092\u307e\u3068\u3081\u3066\u7d50\u5408\u3055\u305b\u3066\u3057\u307e\u3046\u306e\u304c\u30d9\u30b9\u30c8\u3089\u3057\u3044\uff0e\n`''.join()` \u306f\u5f15\u6570\u5185\u306e\u8981\u7d20\u3092 `''` \u5185\u306e\u533a\u5207\u308a\u6587\u5b57\u3067\u533a\u5207\u3063\u305f\u4e0a\u3067\u7d50\u5408\u3059\u308b\u3068\u3044\u3046\u3082\u306e\uff0e\u66f8\u304d\u65b9\u304c\u5909\u308f\u3063\u3066\u3044\u308b\u306e\u3067\u8981\u6ce8\u610f\uff0e\n\n## 03. \u5186\u5468\u7387\n> \"Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.\"\u3068\u3044\u3046\u6587\u3092\u5358\u8a9e\u306b\u5206\u89e3\u3057\uff0c\u5404\u5358\u8a9e\u306e\uff08\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\uff09\u6587\u5b57\u6570\u3092\u5148\u982d\u304b\u3089\u51fa\u73fe\u9806\u306b\u4e26\u3079\u305f\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u305b\u3088\uff0e\n\n### \u56de\u7b54\n```python:03.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 03.py\n\nstr = \"Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.\"\nstr = str.replace('.', \"\")\nstr = str.replace(',', \"\")\nstr = str.split()\n\nlist = []\n\nfor word in str:\n    list.append(len(word))\n\nprint list\n```\n#### \u30b3\u30e1\u30f3\u30c8\n`replace()` \u3067\u30d4\u30ea\u30aa\u30c9\u3084\u30ab\u30f3\u30de\u3092\u9664\u53bb\u3057\u305f\u3042\u3068\uff0c`split()` \u3067\u5358\u8a9e\u3054\u3068\u306b\u533a\u5207\u308a\uff0c`len()` \u3067\u305d\u306e\u9577\u3055\u3092\u53d6\u5f97\u3057\u3066`list`\u306b\u7a81\u3063\u8fbc\u3080\uff0c\u3068\u3044\u3046\u6d41\u308c\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\u30d4\u30ea\u30aa\u30c9\u3084\u30ab\u30f3\u30de\u3092\u3082\u3063\u3068\u4e0a\u624b\u304f\u9664\u53bb\u3067\u304d\u308b\u65b9\u6cd5\u306f\u7121\u3044\u306e\u304b\u306a\u3042\u2026\u3068\u601d\u3044\u3064\u3064\u3082\u65ad\u5ff5\uff0e`split()` \u306f\u5f15\u6570\u3067\u533a\u5207\u308a\u6587\u5b57\u3092\u6307\u5b9a\u3067\u304d\u308b\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u306f\u30b9\u30da\u30fc\u30b9\uff09\u306e\u3067\u5168\u90e8\u307e\u3068\u3081\u3066\u6307\u5b9a\u3057\u3088\u3046\u304b\u3068\u601d\u3063\u305f\u3051\u3069\u3067\u304d\u305a\uff0e\n\n## 04. \u5143\u7d20\u8a18\u53f7\n> \"Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.\"\u3068\u3044\u3046\u6587\u3092\u5358\u8a9e\u306b\u5206\u89e3\u3057\uff0c1, 5, 6, 7, 8, 9, 15, 16, 19\u756a\u76ee\u306e\u5358\u8a9e\u306f\u5148\u982d\u306e1\u6587\u5b57\uff0c\u305d\u308c\u4ee5\u5916\u306e\u5358\u8a9e\u306f\u5148\u982d\u306b2\u6587\u5b57\u3092\u53d6\u308a\u51fa\u3057\uff0c\u53d6\u308a\u51fa\u3057\u305f\u6587\u5b57\u5217\u304b\u3089\u5358\u8a9e\u306e\u4f4d\u7f6e\uff08\u5148\u982d\u304b\u3089\u4f55\u756a\u76ee\u306e\u5358\u8a9e\u304b\uff09\u3078\u306e\u9023\u60f3\u914d\u5217\uff08\u8f9e\u66f8\u578b\u3082\u3057\u304f\u306f\u30de\u30c3\u30d7\u578b\uff09\u3092\u4f5c\u6210\u305b\u3088\uff0e\n\n### \u56de\u7b54\n```python:04.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 04.py\n\nstr = \"Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.\"\nstr = str.split()\n\ndict = {}\nsingle = [1, 5, 6, 7, 8, 9, 15, 16, 19]\n\nfor element in str:\n    if str.index(element) + 1 in single:\n        dict[element[:1]] = str.index(element) + 1\n    else:\n        dict[element[:2]] = str.index(element) + 1\n\n# \u539f\u5b50\u756a\u53f7\u9806\u306b\u30bd\u30fc\u30c8\u3057\u3066 print\uff08\u86c7\u8db3\uff09\nfor k, v in sorted(dict.items(), key=lambda x:x[1]):\n    print k, v\n```\n\n#### \u30b3\u30e1\u30f3\u30c8\n03\u3068\u540c\u69d8\uff0c\u5358\u8a9e\u3054\u3068\u306b\u533a\u5207\u3063\u3066 `for loop` \u3067\u500b\u5225\u306b\u51e6\u7406\u3057\u3066\u3044\u307e\u3059\uff0e\u3069\u3046\u305b\u5148\u982d\u3057\u304b\u898b\u306a\u3044\u306e\u3067\u30d4\u30ea\u30aa\u30c9\u306e\u51e6\u7406\u306f\u7701\u7565\u3057\u3066\u3044\u307e\u3059\uff0e\n\u3053\u306e\u307e\u307e\u3060\u3068\u30de\u30b0\u30cd\u30b7\u30a6\u30e0\u304c Mi \u3068\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u306f\u8151\u306b\u843d\u3061\u306a\u3044\u3067\u3059\u304c\u2026\u3084\u3080\u306a\u3057\uff1f\u500b\u5225\u306b\u6307\u5b9a\u3057\u3066\u30b9\u30e9\u30a4\u30b9\uff08`element[:3:2]`\uff09\u3059\u308c\u3070\u826f\u3044\u3093\u3060\u3051\u308c\u3069\u3082\uff0e\n\u308f\u3056\u308f\u3056 `single` \u3068\u7f6e\u304f\u5fc5\u8981\u3082\u7121\u3044\u4e00\u65b9\uff0c`str.index(element) + 1` \u306f3\u56de\u767b\u5834\u3059\u308b\u306e\u3067\uff0c\u3053\u306e\u8fba\u306f\u4e0a\u624b\u304f\u6574\u7406\u3057\u305f\u3044\u3068\u3053\u308d\uff0e\u9069\u5f53\u306a\u5909\u6570\u306b\u4ee3\u5165\u3057\u3061\u3083\u3048\u3070\u89e3\u6c7a\u304b\uff0e\n\u307e\u305f\uff0c\u8f9e\u66f8\u306f\u305d\u3082\u305d\u3082\u9806\u5e8f\u3092\u4fdd\u8a3c\u3057\u306a\u3044\u306e\u3067\u3059\u304c\uff0c\u898b\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306b\u30bd\u30fc\u30c8\uff0e\n\n##### \u4fee\u6b63\n\n```python:\u4fee\u6b63\u7248\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 04.py\n\nstr = \"Hi He Lied Because Boron Could Not Oxidize Fluorine.\\\n New Nations Might Also Sign Peace Security Clause. Arthur King Can.\"\nwords_list = str.split()\n\ndict = {}\nsingle = [0, 4, 5, 6, 7, 8, 14, 15, 18]\n\nfor i in range(len(words_list)):\n    clen = 1 if i in single else 2\n    dict[words_list[i][:clen]] = i + 1\n\n# \u539f\u5b50\u756a\u53f7\u9806\u306b\u30bd\u30fc\u30c8\u3057\u3066 print\uff08\u86c7\u8db3\uff09\n# for k, v in sorted(dict.items(), key=lambda x: x[1]):\n#     print(k, v)\n\n```\n\n\u4e3b\u306a\u6539\u5584\u70b9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n* `\\` \u3092\u7528\u3044\u305f\u9577\u3059\u304e\u308b\u884c\u306e\u9014\u4e2d\u6539\u884c\n* `str` \u306e\u4f7f\u3044\u56de\u3057\u56de\u907f\n* `single` \u3092 zero-based \u306b\u5909\u66f4\n* \u5197\u9577\u306a\u30b3\u30fc\u30c9\u306e\u6574\u7406\n* `for` \u306e\u6761\u4ef6\u3092\u8981\u7d20\u304b\u3089\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u5909\u66f4\n\n\u7279\u306b\u4eca\u56de\u306e\u4e2d\u3067\u5927\u304d\u3044\u306e\u306f\uff0c`for` \u3092 \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3067\u56de\u3057\u305f\u3068\u3053\u308d\u3060\u3068\u601d\u3044\u307e\u3059\uff0e\n\u4ee5\u524d\u306e\u30b3\u30fc\u30c9\u3067\u306f\u521d\u3081\u3066\u77e5\u3063\u305f `for` \u306e\u66f8\u304d\u65b9\u3092\u8a66\u3057\u305f\u304f\u3066\uff0c\u305d\u306e\u7d50\u679c `index()` \u3067\u6539\u3081\u3066\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97\u3057\u3066\u307e\u3059\u3057\u306d\u2026\n\n\n\n## 05. n-gram\n> \u4e0e\u3048\u3089\u308c\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\uff08\u6587\u5b57\u5217\u3084\u30ea\u30b9\u30c8\u306a\u3069\uff09\u304b\u3089n-gram\u3092\u4f5c\u308b\u95a2\u6570\u3092\u4f5c\u6210\u305b\u3088\uff0e\u3053\u306e\u95a2\u6570\u3092\u7528\u3044\uff0c\"I am an NLPer\"\u3068\u3044\u3046\u6587\u304b\u3089\u5358\u8a9ebi-gram\uff0c\u6587\u5b57bi-gram\u3092\u5f97\u3088\uff0e\n\n### \u56de\u7b54\n```python:05.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 05.py\n\noriginal = \"I am an NLPer\"\n\ndef ngram(input, n):\n    # \u6587\u5b57 n-gram (\u5f15\u6570 str)\n    l = len(input)\n    if type(input) == str:\n        input = \"$\" * (n - 1) + input + \"$\" * (n - 1)\n        for i in xrange(l + 1):\n            print input[i:i+n]\n    # \u5358\u8a9e n-gram (\u5f15\u6570 list)\n    elif type(input) == list:\n        input = [\"$\"] * (n - 1) + input + [\"$\"] * (n - 1)\n        for i in xrange(l + 1):\n            print input[i:i+n]\n\nngram(original, 2)              # \u6587\u5b57 n-gram\noriginal = original.split()\nngram(original, 2)              # \u5358\u8a9e n-gram\n```\n\n#### \u30b3\u30e1\u30f3\u30c8\n\u4e88\u60f3\u4ee5\u4e0a\u306b\u624b\u3053\u305a\u3063\u305f\uff0e\u6587\u5b57\u6570\u306e\u9577\u3055\u306e\u95a2\u4fc2\u3067\uff0c\u00b11\u306a\u3069\u306e\u5fae\u8abf\u6574\u591a\u6570...\n\u6587\u5b57\u5217\u306e\u5148\u982d\u4ee5\u524d\u30fb\u7d42\u7aef\u4ee5\u964d\u306b `$` \u3092\u633f\u5165\u3057\u305f\uff0e\nJava \u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306e\u3088\u3046\u306a\u6a5f\u80fd\u3092\u5b9f\u88c5\u3057\u305f\u304b\u3063\u305f\u306e\u3060\u304c\uff0cPython \u3067\u306f\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u3044\u305d\u3046\u306a\u306e\u3067 `type()` \u3067\u6ce5\u81ed\u304f\u5b9f\u88c5\uff0e\n\n### \u3044\u305f\u3060\u3044\u305f\u30b3\u30e1\u30f3\u30c8\u30fb\u5b9f\u88c5\n[knok\u3055\u3093](http://qiita.com/knok) \u304b\u3089\u3044\u305f\u3060\u3044\u305f\u30b3\u30e1\u30f3\u30c8\u304a\u3088\u3073\u5b9f\u88c5\u3067\u3059\uff0e\n\n```python:knok\u3055\u3093\u306b\u3088\u308bngram\u95a2\u6570\u306e\u5b9f\u88c5\ndef ngram(input, n):\n    last = len(input) - n + 1\n    ret = []\n    for i in range(0, last):\n        ret.append(input[i:i+n])\n    return ret\n```\n\n\u5148\u982d\u30fb\u672b\u5c3e\u306b `$` \u3092\u633f\u5165\u3057\u306a\u3044\u3053\u3068\u3067\uff0c\u4e00\u6c17\u306b\u30b9\u30de\u30fc\u30c8\u306a\u5b9f\u88c5\u306b\uff0e\n\u6587\u5b57\u5217\u3068\u30ea\u30b9\u30c8\u3067\u306f\uff0c\u3069\u3061\u3089\u3082\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3067\u8981\u7d20\u3092\u6307\u5b9a\u3057\u305f\u308a\u30b9\u30e9\u30a4\u30b9\u3092\u884c\u3063\u305f\u308a\u51fa\u6765\u308b\u305f\u3081\uff0c\u7279\u306b\u578b\u3092\u610f\u8b58\u3059\u308b\u3053\u3068\u306f\u306a\u3044\u3068\u306e\u3053\u3068\uff0e\n\n\u3046\u30fc\u3080\u7f8e\u3057\u3044\uff0e\u6539\u3081\u3066\u81ea\u5206\u306e\u30b3\u30fc\u30c9\u898b\u308b\u3068\u3081\u307e\u3044\u304c\u3057\u307e\u3059\u306d\uff0e\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\uff0e\n\n## 06. \u96c6\u5408\n> \"paraparaparadise\"\u3068\"paragraph\"\u306b\u542b\u307e\u308c\u308b\u6587\u5b57bi-gram\u306e\u96c6\u5408\u3092\uff0c\u305d\u308c\u305e\u308c, X\u3068Y\u3068\u3057\u3066\u6c42\u3081\uff0cX\u3068Y\u306e\u548c\u96c6\u5408\uff0c\u7a4d\u96c6\u5408\uff0c\u5dee\u96c6\u5408\u3092\u6c42\u3081\u3088\uff0e\u3055\u3089\u306b\uff0c'se'\u3068\u3044\u3046bi-gram\u304cX\u304a\u3088\u3073Y\u306b\u542b\u307e\u308c\u308b\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u3088\uff0e\n\n### \u56de\u7b54\n\n```python:06.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 06.py\n\nstr1 = \"paraparaparadise\"\nstr2 = \"paragraph\"\n\ndef ngram(input, n):\n    l = len(input)\n    list = []\n    input = \"$\" * (n - 1) + input + \"$\" * (n - 1)\n    for i in xrange(l + 1):\n        list.append(input[i:i+n])\n    return list\n\n# ngram \u306e list \u3092 set \u306b; \u91cd\u8907\u3092\u6392\u9664\u3067\u304d\u308b\u4e0a\u306b\u96c6\u5408\u6f14\u7b97\u304c\u51fa\u6765\u308b\nX = set(ngram(str1, 2))\nY = set(ngram(str2, 2))\n\nprint X.union(Y)            # \u548c\u96c6\u5408\nprint X.intersection(Y)     # \u7a4d\u96c6\u5408\nprint X.difference(Y)       # \u5dee\u96c6\u5408\n\nprint \"se\" in X\t\t# in: X \u306b \"se\" \u304c\u542b\u307e\u308c\u3066\u3044\u308c\u3070 True, \u3044\u306a\u3051\u308c\u3070 False\nprint \"se\" in Y\t\t# \u307b\u3068\u3093\u3069\u540c\u4e0a\uff08X -> Y\uff09\n\n```\n\n#### \u30b3\u30e1\u30f3\u30c8\n\u5177\u4f53\u7684\u306a\u4f7f\u3044\u65b9\u306b\u95a2\u3057\u3066\u306f\u30b3\u30fc\u30c9\u3092\u53c2\u7167\uff0e\u3053\u3046\u3044\u3046\u64cd\u4f5c\u304c\u76f4\u611f\u7684\u306b\u66f8\u3051\u308b\u306e\u306f\u5b09\u3057\u3044\uff0e\n\n##### \u4fee\u6b63\n\n```python:\u4fee\u6b63\u7248\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 06.py\n\nfrom mymodule import ngram\n\nstr1 = \"paraparaparadise\"\nstr2 = \"paragraph\"\n\nX = set(ngram(str1, 2))\nY = set(ngram(str2, 2))\n\n# \u5f8c\u7565\n\n```\n\n[\u3053\u3061\u3089\u306e\u8a18\u4e8b](http://qiita.com/okadate/items/4153d626a262eabb5a26)\u3092\u53c2\u8003\u306b\uff0c05\u3067\u4f5c\u6210\u3057\u305f\u81ea\u4f5c\u95a2\u6570\u3092\u518d\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u8a2d\u5b9a\u3057\u307e\u3057\u305f\uff0e\n\n\n## 07. \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u3088\u308b\u6587\u751f\u6210\n\n> \u5f15\u6570x, y, z\u3092\u53d7\u3051\u53d6\u308a\u300cx\u6642\u306ey\u306fz\u300d\u3068\u3044\u3046\u6587\u5b57\u5217\u3092\u8fd4\u3059\u95a2\u6570\u3092\u5b9f\u88c5\u305b\u3088\uff0e\u3055\u3089\u306b\uff0cx=12, y=\"\u6c17\u6e29\", z=22.4\u3068\u3057\u3066\uff0c\u5b9f\u884c\u7d50\u679c\u3092\u78ba\u8a8d\u305b\u3088\uff0e\n\n### \u56de\u7b54\n\n```python:07.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 07.py\n\nx = 12\ny = u'\u6c17\u6e29'\nz = 22.4\n\ndef function(x, y, z):\n    return unicode(x) + u'\u6642\u306e' + unicode(y) + u'\u306f' + unicode(z)\n\nprint function(x, y, z)\n\n```\n\n#### \u30b3\u30e1\u30f3\u30c8\n`x, y` \u306f\u305d\u308c\u305e\u308c `int, float` \u306a\u306e\u3067\uff0c`Unicode` \u3068\u9023\u7d50\u3059\u308b\u969b\u306b\u306f\u5909\u63db\u3057\u3066\u3042\u3052\u306a\u3044\u3068\u3044\u3051\u306a\u3044\uff0e\n\u6587\u5b57\u30b3\u30fc\u30c9\u306e\u5909\u63db\u306f\u6df1\u304f\u6398\u308a\u4e0b\u3052\u308b\u3068\u304b\u306a\u308a\u5965\u304c\u6df1\u305d\u3046\u3060\u3051\u3069\uff0c\u4eca\u56de\u306f\u3053\u308c\u3067\u52d5\u4f5c\u3057\u305f\u306e\u3067\u4f55\u3088\u308a\uff0e\n~~`zip()` \u3092\u5229\u7528\u3059\u308b\u624b\u3082\u3042\u308a\u304b\uff1f~~ \u306a\u3055\u305d\u3046\uff0e\n\n## 08. \u6697\u53f7\u6587\n\n> \u4e0e\u3048\u3089\u308c\u305f\u6587\u5b57\u5217\u306e\u5404\u6587\u5b57\u3092\uff0c\u4ee5\u4e0b\u306e\u4ed5\u69d8\u3067\u5909\u63db\u3059\u308b\u95a2\u6570cipher\u3092\u5b9f\u88c5\u305b\u3088\uff0e\n>\n> * \u82f1\u5c0f\u6587\u5b57\u306a\u3089\u3070(219 - \u6587\u5b57\u30b3\u30fc\u30c9)\u306e\u6587\u5b57\u306b\u7f6e\u63db\n>\n> * \u305d\u306e\u4ed6\u306e\u6587\u5b57\u306f\u305d\u306e\u307e\u307e\u51fa\u529b\n>\n> \u3053\u306e\u95a2\u6570\u3092\u7528\u3044\uff0c\u82f1\u8a9e\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6697\u53f7\u5316\u30fb\u5fa9\u53f7\u5316\u305b\u3088\uff0e\n\n### \u56de\u7b54\n```python:08.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 08.py\n\n# \u51fa\u5178: Wikipedia \u82f1\u8a9e\u7248 \"Atbash\" \u3088\u308a\nstr = \"Atbash is a simple substitution cipher for the Hebrew alphabet.\"\n\ndef cipher(input):\n    ret = \"\"\n    for char in input:\n        ret += chr(219-ord(char)) if char.islower() else char\n    return ret\n\nstr = cipher(str)\nprint str\nstr = cipher(str)\nprint str\n```\n\n#### \u30b3\u30e1\u30f3\u30c8\n\u3044\u308f\u3086\u308b\u300c[\u30a2\u30c8\u30d0\u30b7\u30e5\u6697\u53f7](https://en.wikipedia.org/wiki/Atbash)\u300d\u306a\u306e\u3067\uff0c\u540c\u4e00\u95a2\u6570\u3067\u6697\u53f7\u5316\u3068\u5fa9\u53f7\u304c\u53ef\u80fd\uff0e\n`chr()` \u306fASCII\u30b3\u30fc\u30c9\u304b\u3089\u5177\u4f53\u7684\u306a\u6587\u5b57\u306b\u5909\u63db\u3057\u3066\u304f\u308c\u308b\u95a2\u6570\uff08`chr(97) -> 'a'`\uff09\uff0e\n`ord()` \u306f\u305d\u306e\u9006\u3060\u3051\u3069\uff0cUnicode \u3067\u3042\u308c\u3070 Unicode \u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u8fd4\u3057\u3066\u304f\u308c\u308b\uff0e\n`chr()` \u306e Unicode \u7248\u304c `unichr()`\uff0e\n\n|        \u5909\u63db\u524d        |        \u5909\u63db\u5f8c        | \u4f7f\u7528\u3059\u308b\u95a2\u6570 |\n|----------------------|--------------------|------------|\n|     ASCII \u30b3\u30fc\u30c9     |      ASCII \u6587\u5b57      |   chr()   |\n| Unicode \u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8 |     Unicode \u6587\u5b57     | unichr() |\n|      ASCII \u6587\u5b57      |     ASCII \u30b3\u30fc\u30c9     |   ord()   |\n|     Unicode \u6587\u5b57     | Unicode \u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8 |   ord()   |\n\n[\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://docs.python.jp/2/library/functions.html)\u3082\u53c2\u7167\uff0e\n\n\u4e09\u9805\u6f14\u7b97\u5b50\u3092\u5229\u7528\u3057\u3066 `if` \u5206\u5c90\u3092\u307e\u3068\u3081\u307e\u3057\u305f\uff0e\n\n```python:\u4e09\u9805\u6f14\u7b97\u5b50\n# \u6761\u4ef6\u5f0f\u304c\u771f\u306e\u3068\u304d\u50241\uff0c\u507d\u306e\u3068\u304d\u50242\n\u50241 if \u6761\u4ef6\u5f0f else \u50242\n```\n\n\n## 09. Typoglycemia\n> \u30b9\u30da\u30fc\u30b9\u3067\u533a\u5207\u3089\u308c\u305f\u5358\u8a9e\u5217\u306b\u5bfe\u3057\u3066\uff0c\u5404\u5358\u8a9e\u306e\u5148\u982d\u3068\u672b\u5c3e\u306e\u6587\u5b57\u306f\u6b8b\u3057\uff0c\u305d\u308c\u4ee5\u5916\u306e\u6587\u5b57\u306e\u9806\u5e8f\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u4e26\u3073\u66ff\u3048\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u305b\u3088\uff0e\u305f\u3060\u3057\uff0c\u9577\u3055\u304c\uff14\u4ee5\u4e0b\u306e\u5358\u8a9e\u306f\u4e26\u3073\u66ff\u3048\u306a\u3044\u3053\u3068\u3068\u3059\u308b\uff0e\u9069\u5f53\u306a\u82f1\u8a9e\u306e\u6587\uff08\u4f8b\u3048\u3070\"I couldn't believe that I could actually understand what I was reading : the phenomenal power of the human mind .\"\uff09\u3092\u4e0e\u3048\uff0c\u305d\u306e\u5b9f\u884c\u7d50\u679c\u3092\u78ba\u8a8d\u305b\u3088\uff0e\n\n### \u56de\u7b54\n\n```python:09.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 09.py\nimport random\n\nstr = \"I couldn't believe that I could actually understand what I was reading : the phenomenal power of the human mind .\"\nwords = str.split()\nshuffled_list = []\n\nfor word in words:\n    if len(word) < 4:\n        pass\n    else:\n        char_list = list(word)\n        mid_list = char_list[1:-1]\n        random.shuffle(mid_list)\n        word = word[0] + \"\".join(mid_list) + word[-1]\n    shuffled_list.append(word)\n\nshuffled_str = \" \".join(shuffled_list)\nprint shuffled_str\n\n```\n\n#### \u30b3\u30e1\u30f3\u30c8\n`random.shuffle()` \u3067\u6587\u5b57\u5217\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u5165\u308c\u66ff\u3048\u3066\u304f\u308c\u308b\uff01\u3059\u3054\u304f\u4fbf\u5229\uff0e\nC \u3067\u5b9f\u88c5\u3057\u3088\u3046\u3068\u3057\u305f\u3089\u304b\u306a\u308a\u9762\u5012\u81ed\u305d\u3046\u3060\u3051\u3069\u2026 Python \u306f\u3053\u3046\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u5145\u5b9f\u3057\u3066\u3044\u308b\u306e\u3067\u6709\u308a\u96e3\u3044\uff0e\n\u5b8c\u5168\u306b\u30e9\u30f3\u30c0\u30e0\u306a\u306e\u3067\u5143\u306e\u6587\u5b57\u5217\u3068\u540c\u3058\u6587\u5b57\u5217\u304c\u8fd4\u3063\u3066\u304f\u308b\u3053\u3068\u3082\uff0e\u6587\u5b57\u5217\u6bd4\u8f03\u3057\u3066\u540c\u3058\u306a\u3089\u3084\u308a\u76f4\u3057\uff0c\u3068\u304b\u5b9f\u88c5\u3057\u3066\u3082\u826f\u3044\u304b\u3082\uff0e\n\n##### \u88dc\u8db3\n\uff08\u6587\u5b57\u5217\uff09\u6bd4\u8f03\u306b\u306f `==` \u3068 `is` \u304c\u5b58\u5728\u3059\u308b\uff0e\n`==` \u304c\u7d14\u7c8b\u306b\u5185\u5bb9\u3060\u3051\u3092\u6bd4\u8f03\u3059\u308b\u306e\u306b\u5bfe\u3057\uff0c`is` \u306f\u540c\u3058\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3069\u3046\u304b\u3092\u6bd4\u8f03\u3059\u308b\uff0e\n\u4eca\u56de\u3082\u3057\u6587\u5b57\u5217\u6bd4\u8f03\u3092\u5b9f\u88c5\u3059\u308b\u969b\u306b\u306f `==` \u3092\u4f7f\u3046\u65b9\u304c\u6b63\u3057\u3044\uff0e\n\n\uff08\u30af\u30a9\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\uff09\nPython \u3067\u306f\u6587\u5b57\u5217\u3092\u56f2\u3080\u969b\uff0c `\"` \u3068 `'` \u306e\u3069\u3061\u3089\u3067\u3082 OK \u3067\u3059\uff0e\n\u3057\u304b\u3057\u82f1\u8a9e\u306e\u6240\u6709\u683c\u3084\u77ed\u7e2e\u5f62\u306e\u3068\u304d\u306b `'` \u3092\u5229\u7528\u3059\u308b\u5834\u5408\uff0c\u6587\u5b57\u5217\u5168\u4f53\u3092 `'` \u3067\u56f2\u3046\u3068\u30af\u30a9\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u304c\u5bfe\u5fdc\u305b\u305a\u306b\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\uff0e\n\u5bfe\u51e6\u6cd5\u3068\u3057\u3066\u306f `\"` \u3067\u56f2\u3046\u304b\uff0c\u30d0\u30c3\u30af\u30b9\u30e9\u30c3\u30b7\u30e5\u3067 `\\'` \u3068\u3044\u3063\u305f\u3088\u3046\u306b\u30a8\u30b9\u30b1\u30fc\u30d7\u3057\u3066\u3042\u3052\u308c\u3070\u5927\u4e08\u592b\u3067\u3059\uff0e\n\n##### \u4fee\u6b63\n\n```python:\u4fee\u6b63\u7248\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 09.py\n\nimport random\n\n\ndef word_typoglycemia(word):\n    if len(word) <= 4:\n        return word\n\n    mid_list = list(word[1:-1])\n    while mid_list == list(word[1:-1]):\n        random.shuffle(mid_list)\n    return word[0] + \"\".join(mid_list) + word[-1]\n\n\ndef str_typoglycemia(str):\n    shuffled_list = []\n    for word in str.split():\n        shuffled_list.append(word_typoglycemia(word))\n    return \" \".join(shuffled_list)\n\n\nstr = \"I couldn't believe that I could actually understand \\\n what I was reading : the phenomenal power of the human mind .\"\n\nprint(str_typoglycemia(str))\n\n```\n\n\u4e3b\u306a\u6539\u5584\u70b9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n* \u95a2\u6570\u5316\n* \u5197\u9577\u306a\u30b3\u30fc\u30c9\u306e\u6574\u7406\n* `\\` \u3092\u7528\u3044\u305f\u9577\u3059\u304e\u308b\u884c\u306e\u9014\u4e2d\u6539\u884c\n* \u53b3\u5bc6\u306b\u554f\u984c\u6587\u3078\u306e\u6e96\u62e0\uff084\u6587\u5b57\u672a\u6e80\u306f\u9664\u5916\u21924\u6587\u5b57\u4ee5\u4e0b\u306f\u9664\u5916\uff09\n* \u51e6\u7406\u524d\u5f8c\u3067\u5076\u7136\u4e00\u81f4\u3057\u3066\u540c\u3058\u6587\u5b57\u5217\u306b\u306a\u308b\u3053\u3068\u3092\u6392\u9664\uff08\u30e9\u30f3\u30c0\u30e0\uff0c\u3068\u3044\u3046\u89b3\u70b9\u3067\u306f\u3069\u3046\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u304c\uff09\n\n\u5927\u304d\u306a\u5909\u66f4\u70b9\u306f\u5076\u7136\u4e00\u81f4\u306e\u6392\u9664\u306b\u306a\u308a\u307e\u3059\u304c\uff0c`while` \u304c\u78ba\u5b9f\u306b\u7d42\u4e86\u3059\u308b\u4fdd\u8a3c\u304c\u7121\u3044\u306e\u304c\u3061\u3087\u3063\u3068\u5fc3\u6b8b\u308a\uff0e\n\u53ef\u80fd\u6027\u306f\u6975\u3081\u3066\u4f4e\u3044\u3067\u3059\u304c\u2026\uff08\u6700\u3082\u5371\u967a\u306a5\u6587\u5b57\u3067\u3082\uff0cn\u56de loop \u3092\u56de\u305b\u3070\u78ba\u7387\u306f $ \\frac{1}{6^{n}} $ \uff09\n\n# \u304a\u308f\u308a\u306b\n[\u7b2c2\u7ae0\u30fb\u524d\u7de8](http://qiita.com/gamma1129/items/92b23219a5b9d8333dad)\u306b\u7d9a\u304d\u307e\u3059\uff0e\n", "tags": ["Python", "NLP", "\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]}