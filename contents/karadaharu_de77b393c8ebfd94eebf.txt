{"context": "scipy\u3067\u306foptimize.least_squares\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u975e\u7dda\u5f62\u95a2\u6570\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u30c7\u30fc\u30bf\u306b\u30d5\u30a3\u30c3\u30c8\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u975e\u7dda\u5f62\u95a2\u6570\u306e\u5f62\u306b\u3088\u3063\u3066\u306f\u3001\u6700\u9069\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u306a\u305c\u306a\u3089\u3001optimize.least_squares\u3067\u306f\u5c40\u6240\u7684\u306a\u6700\u9069\u89e3\u3057\u304b\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u304b\u3089\u3067\u3059\u3002\n\u4eca\u56de\u306f\u3001optimize.least_squares\u304c\u5c40\u6240\u6700\u9069\u89e3\u306b\u9665\u3063\u3066\u3057\u307e\u3046\u4f8b\u3092\u6319\u3052\u3001optimize.basinhopping\u3092\u4f7f\u3063\u3066\u5927\u57df\u7684\u6700\u9069\u89e3\u3092\u6c42\u3081\u3066\u307f\u307e\u3059\u3002\n\u30d0\u30fc\u30b8\u30e7\u30f3\uff1a\n\nPython 3.5.1\nnumpy (1.11.1)\nscipy (0.18.0)\n\n\n\u3046\u307e\u304f\u6700\u9069\u5316\u3067\u304d\u306a\u3044\u4f8b\n$a$\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3068\u3057\u3066\u3082\u3064\u6b21\u306e\u3088\u3046\u306a\u95a2\u6570\u3092\u8003\u3048\u307e\u3059\u3002\n$y(x)=\\frac{1}{100}(x-3a)(2x-a)(3x+a)(x+2a)$\n$a=2$\u306e\u3068\u304d\u306b\u30ce\u30a4\u30ba\u304c\u306e\u3063\u305f\u30c7\u30fc\u30bf\u304c\u5f97\u3089\u308c\u305f\u3068\u3057\u307e\u3059\u3002\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n\nseed = 0\nnp.random.seed(seed)\n\ndef y(x, a):\n    return (x-3.*a) * (2.*x-a) * (3.*x+a) * (x+2.*a) / 100.\n\na_orig = 2.\nxs = np.linspace(-5, 7, 1000)\nys = y(xs,a_orig)\n\nnum_data = 30\ndata_x = np.random.uniform(-5, 5, num_data)\ndata_y = y(data_x, a_orig) + np.random.normal(0, 0.5, num_data)\n\nplt.plot(xs, ys, label='true a = %.2f'%(a_orig))\nplt.plot(data_x, data_y, 'o', label='data')\nplt.legend()\n\n\n\u3053\u308c\u306b\u5bfe\u3057\u3066\u3001optimize.least_squares\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u6c42\u3081\u3066\u307f\u307e\u3059\u3002\nfrom scipy.optimize import least_squares\n\ndef calc_residuals(params, data_x, data_y):\n    model_y = y(data_x, params[0])\n    return model_y - data_y\n\na_init = -3\nres = least_squares(calc_residuals, np.array([a_init]), args=(data_x, data_y))\n\na_fit = res.x[0]\nys_fit = y(xs,a_fit)\n\nplt.plot(xs, ys, label='true a = %.2f'%(a_orig))\nplt.plot(xs, ys_fit, label='fit a = %.2f'%(a_fit))\nplt.plot(data_x, data_y, 'o')\nplt.legend()\n\n\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u521d\u671f\u5024\u3092$a_0 = -3$\u306b\u3057\u305f\u3068\u3053\u308d\u3001\u3046\u307e\u304f\u30c7\u30fc\u30bf\u306b\u30d5\u30a3\u30c3\u30c8\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n\u3046\u307e\u304f\u6700\u9069\u5316\u3067\u304d\u306a\u3044\u7406\u7531\n\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u521d\u671f\u5024\u306b\u3088\u3063\u3066\u3069\u306e\u3088\u3046\u306b\u7d50\u679c\u304c\u5909\u308f\u308b\u304b\u3092\u8abf\u3079\u3066\u307f\u308b\u3068\u3001\na_inits = np.linspace(-4, 4, 1000)\na_fits = np.zeros(1000)\nfor i, a_init in enumerate(a_inits):\n    res = least_squares(calc_residuals, np.array([a_init]), args=(data_x, data_y))\n    a_fits[i] = res.x[0]\n\nplt.plot(a_inits, a_fits)\nplt.xlabel(\"initial value\")\nplt.ylabel(\"optimized value\")\n\n\n\n\u521d\u671f\u5024\u304c\u8ca0\u3060\u3068\u3001\u5c40\u6240\u7684\u306b\u6700\u9069\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306b\u9665\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u7406\u7531\u306f\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u5024\u3068\u6b8b\u5dee\u306e\u95a2\u4fc2\u3092\u898b\u3066\u307f\u308b\u3068\u5206\u304b\u308a\u307e\u3059\u3002\u4e0b\u56f3\u306e\u3088\u3046\u306b\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306b\u5bfe\u3057\u3066\u6975\u5c0f\u5024\u304c\u3075\u305f\u3064\u3042\u308b\u305b\u3044\u3067\u3001\u521d\u671f\u5024\u306b\u4f9d\u5b58\u3057\u3066\u7d50\u679c\u304c\u5909\u308f\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3059\u3002\ndef calc_cost(params, data_x, data_y):\n    residuals = calc_residuals(params, data_x, data_y)\n    return (residuals * residuals).sum()\n\ncosts = np.zeros(1000)\nfor i, a in enumerate(a_inits):\n    costs[i] = calc_cost(np.array([a]), data_x, data_y)\nplt.plot(a_inits, costs)\nplt.xlabel(\"parameter\")\nplt.ylabel(\"sum of squares\")\n\n\n\n\u3046\u307e\u304f\u6700\u9069\u5316\u3059\u308b\u65b9\u6cd5\n\u5927\u57df\u7684\u306b\u6700\u9069\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u6c42\u3081\u308b\u306b\u306f\u3001\u8272\u3005\u306a\u521d\u671f\u5024\u304b\u3089\u8a08\u7b97\u3057\u3066\u307f\u308c\u3070\u3088\u3044\u3001\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u3044\u3044\u611f\u3058\u306b\u3084\u308b\u65b9\u6cd5\u3068\u3057\u3066scipy\u306b\u306f\u3001optimize.basinhopping\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u308c\u3067\u306f\u3084\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nfrom scipy.optimize import basinhopping\na_init = -3.0\nminimizer_kwargs = {\"args\":(data_x, data_y)}\nres = basinhopping(calc_cost, np.array([a_init]),stepsize=2.,minimizer_kwargs=minimizer_kwargs)\nprint(res.x)\n\na_fit = res.x[0]\nys_fit = y(xs,a_fit)\n\nplt.plot(xs, ys, label='true a = %.2f'%(a_orig))\nplt.plot(xs, ys_fit, label='fit by basin-hopping a = %.2f'%(a_fit))\nplt.plot(data_x, data_y, 'o')\nplt.legend()\n\n\n\u3046\u307e\u304f\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u304c\u6c42\u307e\u308a\u307e\u3057\u305f\u3002\u30b3\u30c4\u306f\u5f15\u6570\u306estepsize\u3067\u3059\u3002\u3053\u306e\u5f15\u6570\u304c\u3069\u308c\u304f\u3089\u3044\u521d\u671f\u5024\u3092\u5927\u304d\u304f\u5909\u3048\u308b\u304b\u3092\u6c7a\u3081\u307e\u3059\u3002\nscipy\u3067\u306f`optimize.least_squares`\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u975e\u7dda\u5f62\u95a2\u6570\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u30c7\u30fc\u30bf\u306b\u30d5\u30a3\u30c3\u30c8\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u975e\u7dda\u5f62\u95a2\u6570\u306e\u5f62\u306b\u3088\u3063\u3066\u306f\u3001\u6700\u9069\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u306a\u305c\u306a\u3089\u3001`optimize.least_squares`\u3067\u306f\u5c40\u6240\u7684\u306a\u6700\u9069\u89e3\u3057\u304b\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u304b\u3089\u3067\u3059\u3002\n\n\u4eca\u56de\u306f\u3001`optimize.least_squares`\u304c\u5c40\u6240\u6700\u9069\u89e3\u306b\u9665\u3063\u3066\u3057\u307e\u3046\u4f8b\u3092\u6319\u3052\u3001`optimize.basinhopping`\u3092\u4f7f\u3063\u3066\u5927\u57df\u7684\u6700\u9069\u89e3\u3092\u6c42\u3081\u3066\u307f\u307e\u3059\u3002\n\n\u30d0\u30fc\u30b8\u30e7\u30f3\uff1a\n\n* Python 3.5.1\n* numpy (1.11.1)\n* scipy (0.18.0)\n\n## \u3046\u307e\u304f\u6700\u9069\u5316\u3067\u304d\u306a\u3044\u4f8b\n\n$a$\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3068\u3057\u3066\u3082\u3064\u6b21\u306e\u3088\u3046\u306a\u95a2\u6570\u3092\u8003\u3048\u307e\u3059\u3002\n\n$y(x)=\\frac{1}{100}(x-3a)(2x-a)(3x+a)(x+2a)$\n\n$a=2$\u306e\u3068\u304d\u306b\u30ce\u30a4\u30ba\u304c\u306e\u3063\u305f\u30c7\u30fc\u30bf\u304c\u5f97\u3089\u308c\u305f\u3068\u3057\u307e\u3059\u3002\n\n```py3\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n\nseed = 0\nnp.random.seed(seed)\n\ndef y(x, a):\n    return (x-3.*a) * (2.*x-a) * (3.*x+a) * (x+2.*a) / 100.\n\na_orig = 2.\nxs = np.linspace(-5, 7, 1000)\nys = y(xs,a_orig)\n\nnum_data = 30\ndata_x = np.random.uniform(-5, 5, num_data)\ndata_y = y(data_x, a_orig) + np.random.normal(0, 0.5, num_data)\n\nplt.plot(xs, ys, label='true a = %.2f'%(a_orig))\nplt.plot(data_x, data_y, 'o', label='data')\nplt.legend()\n```\n\n![qiita_1.png](https://qiita-image-store.s3.amazonaws.com/0/35175/a91c4d84-7c74-8863-3e9b-fa13e7647c51.png)\n\n\n\u3053\u308c\u306b\u5bfe\u3057\u3066\u3001`optimize.least_squares`\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u6c42\u3081\u3066\u307f\u307e\u3059\u3002\n\n```py3\nfrom scipy.optimize import least_squares\n\ndef calc_residuals(params, data_x, data_y):\n    model_y = y(data_x, params[0])\n    return model_y - data_y\n\na_init = -3\nres = least_squares(calc_residuals, np.array([a_init]), args=(data_x, data_y))\n\na_fit = res.x[0]\nys_fit = y(xs,a_fit)\n\nplt.plot(xs, ys, label='true a = %.2f'%(a_orig))\nplt.plot(xs, ys_fit, label='fit a = %.2f'%(a_fit))\nplt.plot(data_x, data_y, 'o')\nplt.legend()\n\n```\n\n![qiita_2.png](https://qiita-image-store.s3.amazonaws.com/0/35175/f91e1e56-9b5f-8cbf-05f9-e87b539e156d.png)\n\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u521d\u671f\u5024\u3092$a_0 = -3$\u306b\u3057\u305f\u3068\u3053\u308d\u3001\u3046\u307e\u304f\u30c7\u30fc\u30bf\u306b\u30d5\u30a3\u30c3\u30c8\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n## \u3046\u307e\u304f\u6700\u9069\u5316\u3067\u304d\u306a\u3044\u7406\u7531\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u521d\u671f\u5024\u306b\u3088\u3063\u3066\u3069\u306e\u3088\u3046\u306b\u7d50\u679c\u304c\u5909\u308f\u308b\u304b\u3092\u8abf\u3079\u3066\u307f\u308b\u3068\u3001\n\n```py3\na_inits = np.linspace(-4, 4, 1000)\na_fits = np.zeros(1000)\nfor i, a_init in enumerate(a_inits):\n    res = least_squares(calc_residuals, np.array([a_init]), args=(data_x, data_y))\n    a_fits[i] = res.x[0]\n\nplt.plot(a_inits, a_fits)\nplt.xlabel(\"initial value\")\nplt.ylabel(\"optimized value\")\n\n```\n\n![qiita_3.png](https://qiita-image-store.s3.amazonaws.com/0/35175/bfa9a4c4-f4c4-2aad-6eda-021c2993034d.png)\n\n\n\u521d\u671f\u5024\u304c\u8ca0\u3060\u3068\u3001\u5c40\u6240\u7684\u306b\u6700\u9069\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306b\u9665\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u7406\u7531\u306f\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u5024\u3068\u6b8b\u5dee\u306e\u95a2\u4fc2\u3092\u898b\u3066\u307f\u308b\u3068\u5206\u304b\u308a\u307e\u3059\u3002\u4e0b\u56f3\u306e\u3088\u3046\u306b\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306b\u5bfe\u3057\u3066\u6975\u5c0f\u5024\u304c\u3075\u305f\u3064\u3042\u308b\u305b\u3044\u3067\u3001\u521d\u671f\u5024\u306b\u4f9d\u5b58\u3057\u3066\u7d50\u679c\u304c\u5909\u308f\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3059\u3002\n\n```py3\ndef calc_cost(params, data_x, data_y):\n    residuals = calc_residuals(params, data_x, data_y)\n    return (residuals * residuals).sum()\n\ncosts = np.zeros(1000)\nfor i, a in enumerate(a_inits):\n    costs[i] = calc_cost(np.array([a]), data_x, data_y)\nplt.plot(a_inits, costs)\nplt.xlabel(\"parameter\")\nplt.ylabel(\"sum of squares\")\n```\n\n![qiita_4.png](https://qiita-image-store.s3.amazonaws.com/0/35175/787da9d9-b301-9e84-a1fb-7df6c06ebc59.png)\n\n\n## \u3046\u307e\u304f\u6700\u9069\u5316\u3059\u308b\u65b9\u6cd5\n\u5927\u57df\u7684\u306b\u6700\u9069\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u6c42\u3081\u308b\u306b\u306f\u3001\u8272\u3005\u306a\u521d\u671f\u5024\u304b\u3089\u8a08\u7b97\u3057\u3066\u307f\u308c\u3070\u3088\u3044\u3001\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u3044\u3044\u611f\u3058\u306b\u3084\u308b\u65b9\u6cd5\u3068\u3057\u3066scipy\u306b\u306f\u3001`optimize.basinhopping`\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u308c\u3067\u306f\u3084\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```py3\nfrom scipy.optimize import basinhopping\na_init = -3.0\nminimizer_kwargs = {\"args\":(data_x, data_y)}\nres = basinhopping(calc_cost, np.array([a_init]),stepsize=2.,minimizer_kwargs=minimizer_kwargs)\nprint(res.x)\n\na_fit = res.x[0]\nys_fit = y(xs,a_fit)\n\nplt.plot(xs, ys, label='true a = %.2f'%(a_orig))\nplt.plot(xs, ys_fit, label='fit by basin-hopping a = %.2f'%(a_fit))\nplt.plot(data_x, data_y, 'o')\nplt.legend()\n```\n![qiita_5.png](https://qiita-image-store.s3.amazonaws.com/0/35175/73637d2e-20a5-3a2c-1098-838c975117aa.png)\n\n\n\u3046\u307e\u304f\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u304c\u6c42\u307e\u308a\u307e\u3057\u305f\u3002\u30b3\u30c4\u306f\u5f15\u6570\u306e`stepsize`\u3067\u3059\u3002\u3053\u306e\u5f15\u6570\u304c\u3069\u308c\u304f\u3089\u3044\u521d\u671f\u5024\u3092\u5927\u304d\u304f\u5909\u3048\u308b\u304b\u3092\u6c7a\u3081\u307e\u3059\u3002\n\n\n\n\n\n\n\n", "tags": ["Python", "scipy"]}