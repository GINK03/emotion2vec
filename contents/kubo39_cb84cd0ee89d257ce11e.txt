{"context": "Rust\u3092\u4f7f\u3063\u3066\u3044\u308b\u3068\u305d\u308c\u307b\u3069\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u3092\u6c17\u306b\u3059\u308b\u3053\u3068\u306f\u306a\u3044\u3067\u3059\u304c\u3001\u305d\u308c\u3067\u3082\u5fc5\u8981\u306b\u306a\u308b\u3068\u304d\u304c\u3061\u3087\u3053\u3061\u3087\u3053\u3042\u308a\u307e\u3059\u3002C\u3068\u9023\u643a\u3057\u305f\u308a\u3068\u304bunsafe\u306a\u30b3\u30fc\u30c9\u3092\u30ac\u30f3\u30ac\u30f3\u4f7f\u3063\u305f\u308a\u3068\u304b\u3002\n\u305d\u3093\u306a\u3068\u304d\u306f\u3082\u3061\u308d\u3093(\uff1f)valgrind\u3092\u4f7f\u3063\u3066\u3044\u304f\u308f\u3051\u3067\u3059\u304c\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u5185\u3067valgrind\u306b\u30a2\u30af\u30bb\u30b9\u3057\u305f\u3044\u306a\u3093\u3066\u3068\u304d\u3082\u3042\u308b\u308f\u3051\u3067\u3059\u3002(\u307b\u3093\u3068\u304b\uff1f)\n\u305d\u3053\u3067valgrind\u306fClient Request\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3067valgrind\u5185\u90e8\u3067\u3082\u3063\u3066\u308b\u7d71\u8a08\u60c5\u5831\u3068\u304b\u306bvalgrind\u4e0a\u3067\u5b9f\u884c\u3057\u3066\u3044\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306eAPI\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u306eAPI\u306fC\u304b\u3089\u4f7f\u3046\u524d\u63d0\u3067API\u304c\u66f8\u304b\u308c\u3066\u304a\u308a\u3001\u30de\u30af\u30ed\u3092\u4f7f\u3044\u30de\u30af\u30ed\uff01w\u3068\u3044\u3046\u30b3\u30fc\u30c9\u306a\u306e\u3067\u4e00\u898b\u305d\u308c\u4ee5\u5916\u306e\u8a00\u8a9e\u304b\u3089\u89e6\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3088\u3046\u306b\u898b\u3048\u308b\u306e\u3067\u3059\u304c\u3001\u30b3\u30a2\u306fvalgrind\u306b\u5bfe\u3059\u308b\u7279\u6b8a\u306ahypercall\u547c\u3073\u51fa\u3057\u3092\u5b9f\u884c\u3057\u3066\u308b\u3060\u3051\u306a\u306e\u3067\u30a4\u30f3\u30e9\u30a4\u30f3\u30a2\u30bb\u30f3\u30d6\u30e9\u3092\u66f8\u3051\u3070\u3069\u306e\u8a00\u8a9e\u304b\u3089\u3082\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nRust\u306b\u306f2\u3064\u306e\u5b9f\u88c5\u304c\u3042\u308a\u307e\u3059\u3002\n\nkmcallister/vgrs\nnathan7/libvalgrind_request\n\n\u5b9f\u88c5\u3057\u3066\u308bAPI\u304c\u591a\u3044\u306e\u306fvgrs\u3001\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u304c\u591a\u3044\u306e\u306flibvalgrind_request\u3068\u3044\u3063\u305f\u304b\u3093\u3058\u3067\u3059\u3002\n\u3061\u3087\u3063\u3068vgrs\u306e\u307b\u3046\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u3061\u306a\u307f\u306bvgrs\u306f\u672c\u5bb6\u306e\u30ec\u30dd\u30b8\u30c8\u30ea\u304c\u66f4\u65b0\u3055\u308c\u3066\u304a\u3089\u305afork\u5148\u306e\u30d6\u30e9\u30f3\u30c1\u3067\u306a\u3051\u308c\u3070\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u306a\u3044\u306e\u3067\u305d\u3061\u3089\u3092\u4f7f\u3044\u307e\u3059\u3002\nCargo.toml\u3092\u3053\u306e\u3088\u3046\u306b\u3057\u3066\u3001\n[package]\nname = \"vgrs\"\nversion = \"0.1.0\"\nauthors = [\"Hiroki Noda <kubo39[at]gmail.com>\"]\n\n[dependencies]\nvgrs = { git = \"https://github.com/lummax/vgrs.git\", rev = \"5252a84bcdc266132181df908f06\" }\n\n\u4f8b\u306b\u3042\u308b\u30b3\u30fc\u30c9\u3092\u5c11\u3057\u4fee\u6b63\u3057\u3066\u5b9f\u884c\u3055\u305b\u3066\u307f\u307e\u3059\u3002\n#![feature(core_intrinsics)]\n\nextern crate vgrs;\n\nuse vgrs::valgrind;\n\nfn main() {\n    unsafe {\n        assert!(valgrind::count_errors() == 0);\n        let x: u8 = std::intrinsics::uninit();\n        println!(\"{:?}\", x);\n        assert!(valgrind::count_errors() > 0);\n    }\n}\n\n\u307e\u305avalgrind\u3092\u4f7f\u308f\u306a\u3044\u3067\u5b9f\u884c\u3055\u305b\u3066\u307f\u307e\u3059\u3002\n$ ./target/debug/vgrs\n0\nthread 'main' panicked at 'assertion failed: valgrind::count_errors() > 0', src/main.rs:12\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n\n2\u56de\u76ee\u306eassert!\u3067\u5931\u6557\u3057\u3066panic\u3057\u307e\u3057\u305f\u3002\n\u6b21\u306bvalgrind\u4e0a\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3055\u305b\u3066\u307f\u307e\u3059\u3002\n$ valgrind --leak-check=full ./target/debug/vgrs\n$ valgrind --leak-check=full ./target/debug/vgrs            [kubo39:vgrs][git:master]\n==5400== Memcheck, a memory error detector\n==5400== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==5400== Using Valgrind-3.12.0.SVN and LibVEX; rerun with -h for copyright info\n==5400== Command: ./target/debug/vgrs\n==5400== \n==5400== Conditional jump or move depends on uninitialised value(s)\n==5400==    at 0x13ED82: fmt (num.rs:234)\n...\n==5400==  Address 0x6220000 is in a rw- anonymous segment\n==5400== \n0\n==5400== \n==5400== HEAP SUMMARY:\n==5400==     in use at exit: 0 bytes in 0 blocks\n==5400==   total heap usage: 7 allocs, 7 frees, 2,032 bytes allocated\n==5400== \n==5400== All heap blocks were freed -- no leaks are possible\n==5400== \n==5400== For counts of detected and suppressed errors, rerun with: -v\n==5400== Use --track-origins=yes to see where uninitialised values come from\n==5400== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)\n\n\u30e1\u30e2\u30ea\u306e\u672a\u521d\u671f\u5316\u307e\u308f\u308a\u3067\u30a8\u30e9\u30fc\u304c4\u3064\u3067\u305f\u306e\u3067\u30012\u3064\u3081\u306eassert\u306e\u6761\u4ef6\u3092\u901a\u308b\u3088\u3046\u306b\u306a\u308apanic\u3057\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002\nRust\u3092\u4f7f\u3063\u3066\u3044\u308b\u3068\u305d\u308c\u307b\u3069\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u3092\u6c17\u306b\u3059\u308b\u3053\u3068\u306f\u306a\u3044\u3067\u3059\u304c\u3001\u305d\u308c\u3067\u3082\u5fc5\u8981\u306b\u306a\u308b\u3068\u304d\u304c\u3061\u3087\u3053\u3061\u3087\u3053\u3042\u308a\u307e\u3059\u3002C\u3068\u9023\u643a\u3057\u305f\u308a\u3068\u304bunsafe\u306a\u30b3\u30fc\u30c9\u3092\u30ac\u30f3\u30ac\u30f3\u4f7f\u3063\u305f\u308a\u3068\u304b\u3002\n\n\u305d\u3093\u306a\u3068\u304d\u306f\u3082\u3061\u308d\u3093(\uff1f)valgrind\u3092\u4f7f\u3063\u3066\u3044\u304f\u308f\u3051\u3067\u3059\u304c\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u5185\u3067valgrind\u306b\u30a2\u30af\u30bb\u30b9\u3057\u305f\u3044\u306a\u3093\u3066\u3068\u304d\u3082\u3042\u308b\u308f\u3051\u3067\u3059\u3002(\u307b\u3093\u3068\u304b\uff1f)\n\n\u305d\u3053\u3067valgrind\u306f[Client Request](http://valgrind.org/docs/manual/manual-core-adv.html)\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3067valgrind\u5185\u90e8\u3067\u3082\u3063\u3066\u308b\u7d71\u8a08\u60c5\u5831\u3068\u304b\u306bvalgrind\u4e0a\u3067\u5b9f\u884c\u3057\u3066\u3044\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306eAPI\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u306eAPI\u306fC\u304b\u3089\u4f7f\u3046\u524d\u63d0\u3067API\u304c\u66f8\u304b\u308c\u3066\u304a\u308a\u3001\u30de\u30af\u30ed\u3092\u4f7f\u3044\u30de\u30af\u30ed\uff01w\u3068\u3044\u3046\u30b3\u30fc\u30c9\u306a\u306e\u3067\u4e00\u898b\u305d\u308c\u4ee5\u5916\u306e\u8a00\u8a9e\u304b\u3089\u89e6\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3088\u3046\u306b\u898b\u3048\u308b\u306e\u3067\u3059\u304c\u3001\u30b3\u30a2\u306fvalgrind\u306b\u5bfe\u3059\u308b\u7279\u6b8a\u306ahypercall\u547c\u3073\u51fa\u3057\u3092\u5b9f\u884c\u3057\u3066\u308b\u3060\u3051\u306a\u306e\u3067\u30a4\u30f3\u30e9\u30a4\u30f3\u30a2\u30bb\u30f3\u30d6\u30e9\u3092\u66f8\u3051\u3070\u3069\u306e\u8a00\u8a9e\u304b\u3089\u3082\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nRust\u306b\u306f2\u3064\u306e\u5b9f\u88c5\u304c\u3042\u308a\u307e\u3059\u3002\n\n- [kmcallister/vgrs](https://github.com/kmcallister/vgrs)\n- [nathan7/libvalgrind_request](https://github.com/nathan7/libvalgrind_request)\n\n\u5b9f\u88c5\u3057\u3066\u308bAPI\u304c\u591a\u3044\u306e\u306fvgrs\u3001\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u304c\u591a\u3044\u306e\u306flibvalgrind_request\u3068\u3044\u3063\u305f\u304b\u3093\u3058\u3067\u3059\u3002\n\n\u3061\u3087\u3063\u3068vgrs\u306e\u307b\u3046\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u3061\u306a\u307f\u306bvgrs\u306f\u672c\u5bb6\u306e\u30ec\u30dd\u30b8\u30c8\u30ea\u304c\u66f4\u65b0\u3055\u308c\u3066\u304a\u3089\u305a[fork\u5148\u306e\u30d6\u30e9\u30f3\u30c1](https://github.com/lummax/vgrs/commit/5252a84bcdc266132181df908f069b1256f7d815)\u3067\u306a\u3051\u308c\u3070\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u306a\u3044\u306e\u3067\u305d\u3061\u3089\u3092\u4f7f\u3044\u307e\u3059\u3002\n\nCargo.toml\u3092\u3053\u306e\u3088\u3046\u306b\u3057\u3066\u3001\n\n```toml\n[package]\nname = \"vgrs\"\nversion = \"0.1.0\"\nauthors = [\"Hiroki Noda <kubo39[at]gmail.com>\"]\n\n[dependencies]\nvgrs = { git = \"https://github.com/lummax/vgrs.git\", rev = \"5252a84bcdc266132181df908f06\" }\n```\n\n\u4f8b\u306b\u3042\u308b\u30b3\u30fc\u30c9\u3092\u5c11\u3057\u4fee\u6b63\u3057\u3066\u5b9f\u884c\u3055\u305b\u3066\u307f\u307e\u3059\u3002\n\n```rust\n#![feature(core_intrinsics)]\n\nextern crate vgrs;\n\nuse vgrs::valgrind;\n\nfn main() {\n    unsafe {\n        assert!(valgrind::count_errors() == 0);\n        let x: u8 = std::intrinsics::uninit();\n        println!(\"{:?}\", x);\n        assert!(valgrind::count_errors() > 0);\n    }\n}\n```\n\n\u307e\u305avalgrind\u3092\u4f7f\u308f\u306a\u3044\u3067\u5b9f\u884c\u3055\u305b\u3066\u307f\u307e\u3059\u3002\n\n```console\n$ ./target/debug/vgrs\n0\nthread 'main' panicked at 'assertion failed: valgrind::count_errors() > 0', src/main.rs:12\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n```\n\n2\u56de\u76ee\u306eassert!\u3067\u5931\u6557\u3057\u3066panic\u3057\u307e\u3057\u305f\u3002\n\n\u6b21\u306bvalgrind\u4e0a\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3055\u305b\u3066\u307f\u307e\u3059\u3002\n\n```console\n$ valgrind --leak-check=full ./target/debug/vgrs\n$ valgrind --leak-check=full ./target/debug/vgrs            [kubo39:vgrs][git:master]\n==5400== Memcheck, a memory error detector\n==5400== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==5400== Using Valgrind-3.12.0.SVN and LibVEX; rerun with -h for copyright info\n==5400== Command: ./target/debug/vgrs\n==5400== \n==5400== Conditional jump or move depends on uninitialised value(s)\n==5400==    at 0x13ED82: fmt (num.rs:234)\n...\n==5400==  Address 0x6220000 is in a rw- anonymous segment\n==5400== \n0\n==5400== \n==5400== HEAP SUMMARY:\n==5400==     in use at exit: 0 bytes in 0 blocks\n==5400==   total heap usage: 7 allocs, 7 frees, 2,032 bytes allocated\n==5400== \n==5400== All heap blocks were freed -- no leaks are possible\n==5400== \n==5400== For counts of detected and suppressed errors, rerun with: -v\n==5400== Use --track-origins=yes to see where uninitialised values come from\n==5400== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)\n```\n\n\u30e1\u30e2\u30ea\u306e\u672a\u521d\u671f\u5316\u307e\u308f\u308a\u3067\u30a8\u30e9\u30fc\u304c4\u3064\u3067\u305f\u306e\u3067\u30012\u3064\u3081\u306eassert\u306e\u6761\u4ef6\u3092\u901a\u308b\u3088\u3046\u306b\u306a\u308apanic\u3057\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n", "tags": ["rust", "valgrind"]}