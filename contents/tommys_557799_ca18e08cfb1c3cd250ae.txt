{"context": " More than 1 year has passed since last update.DeepLearning\u306e\u52c9\u5f37\u3092\u958b\u59cb\u3002\n\u81ea\u74b0\u5883\u304cWindows\u306a\u306e\u3067\u3068\u308a\u3042\u3048\u305aCaffe\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3002\nMNIST\u30b5\u30f3\u30d7\u30eb\u3082\u7121\u4e8b\u52d5\u4f5c\u3057\u305f\u306e\u3067\u74b0\u5883\u306fOK\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001sin\u95a2\u6570\u8fd1\u4f3c\u3092\u3084\u3089\u305b\u3066\u307f\u305f\u3002\n\n\u975e\u7dda\u5f62\u95a2\u6570\u8fd1\u4f3c\nChainer\u3067\u306f\u3061\u3089\u307b\u3089\u3084\u3063\u3066\u3044\u308b\u4eba\u304c\u5c45\u308bsin\u95a2\u6570\u3092\u8fd1\u4f3c\u3057\u3066\u307f\u308b\u3002\n\nsinApproximation.cpp\n#include <iostream>\n#include <array>\n#include <memory> \n#include <cassert>\n#include <random> \n#include <caffe/caffe.hpp> \n#include <stdio.h>\n#include <stdlib.h>\n\nusing namespace std;\nusing namespace caffe;\n\n#define SOLVER_PATH \"solver.prototxt\"\n#define DEMENSION 1\n#define BATCH_SIZE 256\n#define COUNT 10\n#define PI 3.141592\n\nint main(int argc, char** argv) { \n    int DataSize = BATCH_SIZE * COUNT; \n    std::array<float, BATCH_SIZE * COUNT * DEMENSION> input_data; \n    std::array<float,BATCH_SIZE * COUNT* DEMENSION> target_data; \n\n    float x = 0;\n\n    for (auto i = 0; i < DataSize; ++i) {\n        float target = sin(x);\n        input_data[i] = x;\n\n        target_data[i] = target;\n        x += 0.5;\n    } \n\n    // \u56de\u5e30\u3067\u30e9\u30d9\u30eb\u306f\u4f7f\u7528\u3057\u306a\u3044\u305f\u3081\u3001\u30c0\u30df\u30fc\u30c7\u30fc\u30bf\u7528\u610f\n    std::array<float, BATCH_SIZE * COUNT> dummy_data; \n    std::fill(dummy_data.begin(), dummy_data.end(), 0.0); \n\n    // GPU\u30e2\u30fc\u30c9\u3067\u5b9f\u884c\n    Caffe::set_mode(Caffe::GPU);\n\n    // Solver \u8a2d\u5b9a \n    caffe::SolverParameter solver_param; \n    caffe::ReadProtoFromTextFileOrDie(SOLVER_PATH, &solver_param); \n    SGDSolver<float> solver(solver_param);\n    const auto net = solver.net(); \n\n    // \u5165\u529b : \"input\" \n    const auto input_layer = \n        boost::dynamic_pointer_cast<caffe::MemoryDataLayer<float>>(net->layer_by_name(\"input\")); \n    input_layer->Reset(input_data.data(), dummy_data.data(), kDataSize);\n\n    // \u76ee\u6a19 : \"target\" \n    const auto target_layer = \n        boost::dynamic_pointer_cast<caffe::MemoryDataLayer<float>>(net->layer_by_name(\"target\")); \n    target_layer->Reset(target_data.data(), dummy_data.data(), kDataSize); \n\n    // \u5b66\u7fd2\u5b9f\u884c \n    solver.Solve(); \n\n    // \u5b66\u7fd2\u3055\u308c\u305f\uff08\u30cf\u30ba\u306e\uff09\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u3066\u63a8\u6e2c\n    input_layer->Reset(input_data.data(), dummy_data.data(), kDataSize); \n    net->ForwardPrefilled(nullptr);\n\n    FILE *outputfile; \n    outputfile = fopen(\"output.txt\", \"w\"); \n\n    for (auto i = 0; i < BATCH_SIZE; ++i) { \n        // \u5404\u5c64\u306e\u30c7\u30fc\u30bf\u3092\u30d5\u30a1\u30a4\u30eb\u51fa\u529b\n        fprintf(outputfile, \"%f\\t %f\\t %f\\t %f\\t %f\\t %f\\t %f\\t %f\\t %f\\t %f\\t %f\\t %f\\t %f \\n\",\n            net->blob_by_name(\"ip1\")->cpu_data()[i],\n            net->blob_by_name(\"ip1\")->data_at(i,1,1,1),\n            net->blob_by_name(\"relu1\")->cpu_data()[i],\n            net->blob_by_name(\"ip2\")->cpu_data()[i],\n            net->blob_by_name(\"ip2\")->data_at(i,1,1,1),\n            net->blob_by_name(\"relu2\")->cpu_data()[i],\n            net->blob_by_name(\"ip3\")->cpu_data()[i],\n            net->blob_by_name(\"ip3\")->data_at(i,1,1,1),\n            net->blob_by_name(\"loss\")->cpu_data()[i],\n            net->blob_by_name(\"loss\")->data_at(i,1,1,1),\n            net->blob_by_name(\"target\")->cpu_data()[i],\n            input_data[i],\n            target_data[i]);\n    } \n    fclose(outputfile); \n}\n\n\n\u8a2d\u5b9a\u7cfb\u306f\u3053\u3093\u306a\u5177\u5408\u3067\u3002\n\nsolver.prototxt\ntrain_net:\"layers.prototxt\"\nbase_lr:0.0001\nmomentum:0.9\nlr_policy:\"inv\ngamma:0.01\nstepsize:1\nmax_iter:256\ndisplay:10\nsolver_mode: GPU\n\n\n\nlayers.prototxt\nname:\"STUDY\"\nlayers{\n    name:\"input\"\n    type:MEMORY_DATA\n    top:\"ip1\"\n    top:\"dummy_label1\"\n    memory_data_param{\n        batch_size:256\n        channels:1\n        height:1\n        width:1\n    }\n}\nlayers{\n    name:\"ip1\"\n    type:INNER_PRODUCT\n    bottom:\"ip1\"\n    top:\"relu1\"\n    inner_product_param{\n        num_output:256\n        weight_filler{\n          type: \"xavier\"\n        }\n        bias_filler{\n          type: \"constant\"\n          value:0\n        }\n    }\n}\nlayers{\n    name:\"relu1\"\n    type:RELU\n    bottom:\"relu1\"\n    top:\"ip2\"\n}\nlayers{\n    name:\"ip2\"\n    type:INNER_PRODUCT\n    bottom:\"ip2\"\n    top:\"relu2\"\n    inner_product_param{\n        num_output:256\n        weight_filler{\n          type: \"xavier\"\n        }\n        bias_filler{\n          type: \"constant\"\n          value:0\n        }\n    }\n}\nlayers{\n    name:\"relu2\"\n    type:RELU\n    bottom:\"relu2\"\n    top:\"ip3\"\n}\nlayers{\n    name:\"ip3\"\n    type:INNER_PRODUCT\n    bottom:\"ip3\"\n    top:\"loss\"\n    inner_product_param{\n        num_output:1\n        weight_filler{\n          type: \"xavier\"\n        }\n        bias_filler{\n          type: \"constant\"\n          value:0\n        }\n    }\n}\nlayers{\n    name:\"target\"\n    type:MEMORY_DATA\n    top:\"target\"\n    top:\"dummy_label2\"\n    memory_data_param{\n        batch_size:256\n        channels:1\n        height:1\n        width:1\n    }\n}\nlayers{\n    name:\"loss\"\n    type:EUCLIDEAN_LOSS\n    bottom:\"target\"\n    bottom:\"loss\"\n}\n\n\n\n\u6d3b\u6027\u5316\u306b\u306fSIGMOID\u304bReLU\u3067\u8ff7\u3063\u305f\u3051\u3069\u3068\u308a\u3042\u3048\u305aReLU\u3092\u63a1\u7528\u3057\u3066\u307f\u308b\u3053\u3068\u306b\u3002\n\u5185\u7a4d\u2192ReLU\u2192\u5185\u7a4d\u2192ReLU\u2192\u5185\u7a4d\u2190\u3053\u3053\u306e\u5024\u304c\u6b32\u3057\u3044\nReLU\u4f7f\u3046\u3068\u304d\u306f\u5185\u7a4d\u5c64\u306e\u30e6\u30cb\u30c3\u30c8\u6570\u591a\u3081\u306b\u3059\u308c\u3070\u306a\u3093\u3067\u3082\u8fd1\u4f3c\u3067\u304d\u308b\u3088\n\u3063\u3066\u3069\u3053\u304b\u3067\u304d\u3044\u305f\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a256\u500b\u3002\n\u3044\u3056\u5b9f\u884c\u3002\n\u30fb\u30fb\u30fb\u30fb\u30fb\n\u30ab\u30b9\u30ea\u3082\u3057\u306a\u3044\u3002\n\u3068\u3044\u3046\u304b\u7d50\u679c\u306e\u53d6\u308a\u65b9\u3053\u308c\u3067\u5408\u3063\u3066\u308b\u30fb\u30fb\u30fb\u306e\u304b\uff1f\nCaffe\u306f\u753b\u50cf\u5206\u985e\u7cfb\u3070\u304b\u308a\u3067\u56de\u5e30\u65b9\u9762\u306e\u60c5\u5831\u304cWeb\u4e0a\u306b\u5c11\u306a\u3044\u6c17\u304c\u3059\u308b\u3002\u3002\n\u77e5\u898b\u306e\u3042\u308b\u65b9\u3001\u306a\u306b\u3068\u305e\u30a2\u30c9\u30d0\u30a4\u30b9\u3092\u304a\u9858\u3044\u3057\u307e\u3059\u30fb\u30fb\u30fb\nDeepLearning\u306e\u52c9\u5f37\u3092\u958b\u59cb\u3002\n\u81ea\u74b0\u5883\u304cWindows\u306a\u306e\u3067\u3068\u308a\u3042\u3048\u305aCaffe\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3002\nMNIST\u30b5\u30f3\u30d7\u30eb\u3082\u7121\u4e8b\u52d5\u4f5c\u3057\u305f\u306e\u3067\u74b0\u5883\u306fOK\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001sin\u95a2\u6570\u8fd1\u4f3c\u3092\u3084\u3089\u305b\u3066\u307f\u305f\u3002\n\n# \u975e\u7dda\u5f62\u95a2\u6570\u8fd1\u4f3c\nChainer\u3067\u306f\u3061\u3089\u307b\u3089\u3084\u3063\u3066\u3044\u308b\u4eba\u304c\u5c45\u308bsin\u95a2\u6570\u3092\u8fd1\u4f3c\u3057\u3066\u307f\u308b\u3002\n\n```cpp:sinApproximation.cpp\n#include <iostream>\n#include <array>\n#include <memory> \n#include <cassert>\n#include <random> \n#include <caffe/caffe.hpp> \n#include <stdio.h>\n#include <stdlib.h>\n\nusing namespace std;\nusing namespace caffe;\n\n#define SOLVER_PATH \"solver.prototxt\"\n#define DEMENSION 1\n#define BATCH_SIZE 256\n#define COUNT 10\n#define PI 3.141592\n\nint main(int argc, char** argv) { \n\tint DataSize = BATCH_SIZE * COUNT; \n\tstd::array<float, BATCH_SIZE * COUNT * DEMENSION> input_data; \n\tstd::array<float,BATCH_SIZE * COUNT* DEMENSION> target_data; \n\n\tfloat x = 0;\n\t\n\tfor (auto i = 0; i < DataSize; ++i) {\n\t\tfloat target = sin(x);\n\t\tinput_data[i] = x;\n\t\t\t\t\n\t\ttarget_data[i] = target;\n\t\tx += 0.5;\n\t} \n\n\t// \u56de\u5e30\u3067\u30e9\u30d9\u30eb\u306f\u4f7f\u7528\u3057\u306a\u3044\u305f\u3081\u3001\u30c0\u30df\u30fc\u30c7\u30fc\u30bf\u7528\u610f\n\tstd::array<float, BATCH_SIZE * COUNT> dummy_data; \n\tstd::fill(dummy_data.begin(), dummy_data.end(), 0.0); \n\n\t// GPU\u30e2\u30fc\u30c9\u3067\u5b9f\u884c\n\tCaffe::set_mode(Caffe::GPU);\n\n\t// Solver \u8a2d\u5b9a \n\tcaffe::SolverParameter solver_param; \n\tcaffe::ReadProtoFromTextFileOrDie(SOLVER_PATH, &solver_param); \n\tSGDSolver<float> solver(solver_param);\n\tconst auto net = solver.net(); \n\n\t// \u5165\u529b : \"input\" \n\tconst auto input_layer = \n\t\tboost::dynamic_pointer_cast<caffe::MemoryDataLayer<float>>(net->layer_by_name(\"input\")); \n\tinput_layer->Reset(input_data.data(), dummy_data.data(), kDataSize);\n\n\t// \u76ee\u6a19 : \"target\" \n\tconst auto target_layer = \n\t\tboost::dynamic_pointer_cast<caffe::MemoryDataLayer<float>>(net->layer_by_name(\"target\")); \n\ttarget_layer->Reset(target_data.data(), dummy_data.data(), kDataSize); \n\n\t// \u5b66\u7fd2\u5b9f\u884c \n\tsolver.Solve(); \n\n\t// \u5b66\u7fd2\u3055\u308c\u305f\uff08\u30cf\u30ba\u306e\uff09\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u3066\u63a8\u6e2c\n\tinput_layer->Reset(input_data.data(), dummy_data.data(), kDataSize); \n\tnet->ForwardPrefilled(nullptr);\n\t\n\tFILE *outputfile; \n\toutputfile = fopen(\"output.txt\", \"w\"); \n\n\tfor (auto i = 0; i < BATCH_SIZE; ++i) { \n\t\t// \u5404\u5c64\u306e\u30c7\u30fc\u30bf\u3092\u30d5\u30a1\u30a4\u30eb\u51fa\u529b\n\t\tfprintf(outputfile, \"%f\\t %f\\t %f\\t %f\\t %f\\t %f\\t %f\\t %f\\t %f\\t %f\\t %f\\t %f\\t %f \\n\",\n\t\t\tnet->blob_by_name(\"ip1\")->cpu_data()[i],\n\t\t\tnet->blob_by_name(\"ip1\")->data_at(i,1,1,1),\n\t\t\tnet->blob_by_name(\"relu1\")->cpu_data()[i],\n\t\t\tnet->blob_by_name(\"ip2\")->cpu_data()[i],\n\t\t\tnet->blob_by_name(\"ip2\")->data_at(i,1,1,1),\n\t\t\tnet->blob_by_name(\"relu2\")->cpu_data()[i],\n\t\t\tnet->blob_by_name(\"ip3\")->cpu_data()[i],\n\t\t\tnet->blob_by_name(\"ip3\")->data_at(i,1,1,1),\n\t\t\tnet->blob_by_name(\"loss\")->cpu_data()[i],\n\t\t\tnet->blob_by_name(\"loss\")->data_at(i,1,1,1),\n\t\t\tnet->blob_by_name(\"target\")->cpu_data()[i],\n\t\t\tinput_data[i],\n\t\t\ttarget_data[i]);\n\t} \n\tfclose(outputfile); \n}\n```\n\u8a2d\u5b9a\u7cfb\u306f\u3053\u3093\u306a\u5177\u5408\u3067\u3002\n\n```protobuf:solver.prototxt\ntrain_net:\"layers.prototxt\"\nbase_lr:0.0001\nmomentum:0.9\nlr_policy:\"inv\ngamma:0.01\nstepsize:1\nmax_iter:256\ndisplay:10\nsolver_mode: GPU\n```\n\n```protobuf:layers.prototxt\nname:\"STUDY\"\nlayers{\n\tname:\"input\"\n\ttype:MEMORY_DATA\n\ttop:\"ip1\"\n\ttop:\"dummy_label1\"\n\tmemory_data_param{\n\t\tbatch_size:256\n\t\tchannels:1\n\t\theight:1\n\t\twidth:1\n\t}\n}\nlayers{\n\tname:\"ip1\"\n\ttype:INNER_PRODUCT\n\tbottom:\"ip1\"\n\ttop:\"relu1\"\n\tinner_product_param{\n\t\tnum_output:256\n\t\tweight_filler{\n    \t  type: \"xavier\"\n\t\t}\n\t\tbias_filler{\n    \t  type: \"constant\"\n    \t  value:0\n\t\t}\n\t}\n}\nlayers{\n\tname:\"relu1\"\n\ttype:RELU\n\tbottom:\"relu1\"\n\ttop:\"ip2\"\n}\nlayers{\n\tname:\"ip2\"\n\ttype:INNER_PRODUCT\n\tbottom:\"ip2\"\n\ttop:\"relu2\"\n\tinner_product_param{\n\t\tnum_output:256\n\t\tweight_filler{\n    \t  type: \"xavier\"\n\t\t}\n\t\tbias_filler{\n    \t  type: \"constant\"\n    \t  value:0\n\t\t}\n\t}\n}\nlayers{\n\tname:\"relu2\"\n\ttype:RELU\n\tbottom:\"relu2\"\n\ttop:\"ip3\"\n}\nlayers{\n\tname:\"ip3\"\n\ttype:INNER_PRODUCT\n\tbottom:\"ip3\"\n\ttop:\"loss\"\n\tinner_product_param{\n\t\tnum_output:1\n\t\tweight_filler{\n    \t  type: \"xavier\"\n\t\t}\n\t\tbias_filler{\n    \t  type: \"constant\"\n    \t  value:0\n\t\t}\n\t}\n}\nlayers{\n\tname:\"target\"\n\ttype:MEMORY_DATA\n\ttop:\"target\"\n\ttop:\"dummy_label2\"\n\tmemory_data_param{\n\t\tbatch_size:256\n\t\tchannels:1\n\t\theight:1\n\t\twidth:1\n\t}\n}\nlayers{\n\tname:\"loss\"\n\ttype:EUCLIDEAN_LOSS\n\tbottom:\"target\"\n\tbottom:\"loss\"\n}\n\n```\n\u6d3b\u6027\u5316\u306b\u306fSIGMOID\u304bReLU\u3067\u8ff7\u3063\u305f\u3051\u3069\u3068\u308a\u3042\u3048\u305aReLU\u3092\u63a1\u7528\u3057\u3066\u307f\u308b\u3053\u3068\u306b\u3002\n\n\u5185\u7a4d\u2192ReLU\u2192\u5185\u7a4d\u2192ReLU\u2192\u5185\u7a4d\u2190\u3053\u3053\u306e\u5024\u304c\u6b32\u3057\u3044\n\nReLU\u4f7f\u3046\u3068\u304d\u306f\u5185\u7a4d\u5c64\u306e\u30e6\u30cb\u30c3\u30c8\u6570\u591a\u3081\u306b\u3059\u308c\u3070\u306a\u3093\u3067\u3082\u8fd1\u4f3c\u3067\u304d\u308b\u3088\n\u3063\u3066\u3069\u3053\u304b\u3067\u304d\u3044\u305f\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a256\u500b\u3002\n\n\u3044\u3056\u5b9f\u884c\u3002\n\u30fb\u30fb\u30fb\u30fb\u30fb\n\n\n\n\u30ab\u30b9\u30ea\u3082\u3057\u306a\u3044\u3002\n\u3068\u3044\u3046\u304b\u7d50\u679c\u306e\u53d6\u308a\u65b9\u3053\u308c\u3067\u5408\u3063\u3066\u308b\u30fb\u30fb\u30fb\u306e\u304b\uff1f\n\nCaffe\u306f\u753b\u50cf\u5206\u985e\u7cfb\u3070\u304b\u308a\u3067\u56de\u5e30\u65b9\u9762\u306e\u60c5\u5831\u304cWeb\u4e0a\u306b\u5c11\u306a\u3044\u6c17\u304c\u3059\u308b\u3002\u3002\n\n\u77e5\u898b\u306e\u3042\u308b\u65b9\u3001\u306a\u306b\u3068\u305e\u30a2\u30c9\u30d0\u30a4\u30b9\u3092\u304a\u9858\u3044\u3057\u307e\u3059\u30fb\u30fb\u30fb\n", "tags": ["DeepLearning", "Caffe", "C++"]}