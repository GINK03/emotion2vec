{"context": "\u52c9\u5f37\u3057\u305f\u3053\u3068\u30e1\u30e2\n\nStored Property\n\nStoredProperty\nstruct BaseballPlayer {\n    let fullName: String\n    let position: String\n}\n\nvar player = BaseballPlayer(fullName: \"Yamada Taro\", position: \"Catcher\")\nplayer.fullName // \"Yamada Taro\"\nplayer.jobtitle // \"Baseball Player\"\n\n\n\nComputed Property\n\u8a08\u7b97\u3057\u3066\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u5024\u3092\u5165\u308c\u308b\u3002\nhomeRunds\u306e\u5024\u304c\u5909\u308f\u308b\u3068salary\u3082\u5909\u308f\u308b\u306e\u3067var\u3067\u5ba3\u8a00\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n\nComputedProperty\nstruct BaseballPlayer {\n    let fullName: String\n    let position: String\n    var homeRuns: Int\n    //\u7d66\u4e0e = \u30db\u30fc\u30e0\u30e9\u30f3\u6570 * 1,000,000\n    var salary: Int {\n        return homeRuns * 1_000_000\n    }   \n}\n\nvar player = BaseballPlayer(fullName: \"Yamada Taro\", position: \"Catcher\", homeRuns: 50)\nplayer.salary // 50,000,000\nplayer.homeRuns = 20\nplayer.salary // 20,000,000\n\n\n\n\n\nType Property\n\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u3044\u3002\n\u578b\u305d\u306e\u3082\u306e\u304b\u3089\u306f\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u3002\n\u3069\u3053\u304b\u3089\u3067\u3082\u540c\u3058\u5024\u304c\u547c\u3073\u51fa\u305b\u308b\u3002\n\nTypeProperty\nstruct ExampleStructure {\n    static var typeProperty = 1\n    var value = 2\n    var anotherValue = 3\n}\n\nlet exampleStructure = ExampleStructure()\nexampleStructure.value // Static member 'typeProperty' cannot be used on instance of type 'ExampleStructure'\nexampleStructure.anotherValue // 2\nexampleStructure.typeProperty // 3\n\nExampleStructure.typeProperty // 1\n\n\n\n\ndidSet/willSet\n\u5024\u304c\u30bb\u30c3\u30c8\u3055\u308c\u305f\u6642/\u3055\u308c\u308b\u524d\u306b\u51e6\u7406\u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u3002\n\u521d\u671f\u5316\u51e6\u7406\u3067\u306f\u547c\u3073\u51fa\u3055\u308c\u306a\u3044\u3002\ndidSet\u306fnewValue\u3092\u6301\u305f\u306a\u3044\u3002(didSet/willSet\u5404\u51e6\u7406\u304b\u3089\u305d\u306e\u5024\u3092\u547c\u3073\u51fa\u305b\u308b)didSet\u306f\u30bb\u30c3\u30c8\u3055\u308c\u305f\u5024\u304cnewValue\u3002\nwillSet\u306f\u305d\u306e\u9006\u3067oldValue\u3092\u6301\u305f\u306a\u3044\u3002\n*\u5024=currentNumber\ngetter/setter: computed property\ndidSet/willSet: stored property\n\ndidSet/willSet\nstruct Battery {\n\n    var lowBattery: Bool {\n        willSet {\n            if newValue == true {\n                print(\"Please charge !!\")\n            }\n        }\n    }\n\n    var capableOfBattery = 100 {\n        didSet {\n            switch capableOfBattery {\n            case 0...20:\n                lowBattery = true\n            case 30...100:\n                lowBattery = false\n            default:\n                lowBattery = false\n            }\n        }\n    }\n}\n\nvar battery = Battery(lowBattery: false, capableOfBattery: 100)\nbattery.capableOfBattery = 10 // Please charge !!\n\n\n\n\nLazy property\n\u5024\uff08lazy property\uff09\u304c\u30a2\u30af\u30bb\u30b9\u3055\u308c\u305f\u6642\u3060\u3051\u547c\u3073\u51fa\u3055\u308c\u308b\u3002\n\u521d\u671f\u5316\u51e6\u7406\u3067\u306f\u547c\u3070\u308c\u306a\u3044\u3002\n\u51e6\u7406\u6642\u9593\u304c\u304b\u304b\u308b\u3082\u306e\u306flazy\u306b\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3059\u308b\u6642\u3060\u3051\u547c\u3073\u51fa\u3059\u3088\u3046\u306b\u3059\u308b\u3068\u3044\u3044\u307f\u305f\u3044\u3002\n\nLazyProperty\nstruct LazyAction {\n    lazy var comment = {\n        return \"Too lazy\"\n    }()\n}\n\nvar lazyAction = LazyAction() // \u307e\u3060comment\u306b\u5024\u306f\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u306a\u3044\nprint(lazyAction.comment) // Too lazy \u3053\u3053\u3067\u521d\u3081\u3066\u547c\u3070\u308c\u308b\n\n\n\n\u52c9\u5f37\u3057\u305f\u3053\u3068\u30e1\u30e2\n\n##Stored Property\n\n```swift:StoredProperty\nstruct BaseballPlayer {\n    let fullName: String\n    let position: String\n}\n\nvar player = BaseballPlayer(fullName: \"Yamada Taro\", position: \"Catcher\")\nplayer.fullName // \"Yamada Taro\"\nplayer.jobtitle // \"Baseball Player\"\n```\n\n##Computed Property\n\u8a08\u7b97\u3057\u3066\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u5024\u3092\u5165\u308c\u308b\u3002\nhomeRunds\u306e\u5024\u304c\u5909\u308f\u308b\u3068salary\u3082\u5909\u308f\u308b\u306e\u3067var\u3067\u5ba3\u8a00\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n\n```swift:ComputedProperty\nstruct BaseballPlayer {\n    let fullName: String\n    let position: String\n    var homeRuns: Int\n    //\u7d66\u4e0e = \u30db\u30fc\u30e0\u30e9\u30f3\u6570 * 1,000,000\n    var salary: Int {\n        return homeRuns * 1_000_000\n    }   \n}\n\nvar player = BaseballPlayer(fullName: \"Yamada Taro\", position: \"Catcher\", homeRuns: 50)\nplayer.salary // 50,000,000\nplayer.homeRuns = 20\nplayer.salary // 20,000,000\n\n\n```\n\n##Type Property\n\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u3044\u3002\n\u578b\u305d\u306e\u3082\u306e\u304b\u3089\u306f\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u3002\n\u3069\u3053\u304b\u3089\u3067\u3082\u540c\u3058\u5024\u304c\u547c\u3073\u51fa\u305b\u308b\u3002\n\n```swift:TypeProperty\nstruct ExampleStructure {\n    static var typeProperty = 1\n    var value = 2\n    var anotherValue = 3\n}\n\nlet exampleStructure = ExampleStructure()\nexampleStructure.value // Static member 'typeProperty' cannot be used on instance of type 'ExampleStructure'\nexampleStructure.anotherValue // 2\nexampleStructure.typeProperty // 3\n\nExampleStructure.typeProperty // 1\n\n```\n\n##didSet/willSet\n\u5024\u304c\u30bb\u30c3\u30c8\u3055\u308c\u305f\u6642/\u3055\u308c\u308b\u524d\u306b\u51e6\u7406\u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u3002\n\u521d\u671f\u5316\u51e6\u7406\u3067\u306f\u547c\u3073\u51fa\u3055\u308c\u306a\u3044\u3002\ndidSet\u306fnewValue\u3092\u6301\u305f\u306a\u3044\u3002(didSet/willSet\u5404\u51e6\u7406\u304b\u3089\u305d\u306e\u5024\u3092\u547c\u3073\u51fa\u305b\u308b)didSet\u306f\u30bb\u30c3\u30c8\u3055\u308c\u305f\u5024\u304cnewValue\u3002\nwillSet\u306f\u305d\u306e\u9006\u3067oldValue\u3092\u6301\u305f\u306a\u3044\u3002\n*\u5024=currentNumber\n\ngetter/setter: computed property\ndidSet/willSet: stored property\n\n```swift:didSet/willSet\nstruct Battery {\n    \n    var lowBattery: Bool {\n        willSet {\n            if newValue == true {\n                print(\"Please charge !!\")\n            }\n        }\n    }\n    \n    var capableOfBattery = 100 {\n        didSet {\n            switch capableOfBattery {\n            case 0...20:\n                lowBattery = true\n            case 30...100:\n                lowBattery = false\n            default:\n                lowBattery = false\n            }\n        }\n    }\n}\n\nvar battery = Battery(lowBattery: false, capableOfBattery: 100)\nbattery.capableOfBattery = 10 // Please charge !!\n\n```\n\n##Lazy property\n\u5024\uff08lazy property\uff09\u304c\u30a2\u30af\u30bb\u30b9\u3055\u308c\u305f\u6642\u3060\u3051\u547c\u3073\u51fa\u3055\u308c\u308b\u3002\n\u521d\u671f\u5316\u51e6\u7406\u3067\u306f\u547c\u3070\u308c\u306a\u3044\u3002\n\u51e6\u7406\u6642\u9593\u304c\u304b\u304b\u308b\u3082\u306e\u306flazy\u306b\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3059\u308b\u6642\u3060\u3051\u547c\u3073\u51fa\u3059\u3088\u3046\u306b\u3059\u308b\u3068\u3044\u3044\u307f\u305f\u3044\u3002\n\n```swift:LazyProperty\nstruct LazyAction {\n    lazy var comment = {\n        return \"Too lazy\"\n    }()\n}\n\nvar lazyAction = LazyAction() // \u307e\u3060comment\u306b\u5024\u306f\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u306a\u3044\nprint(lazyAction.comment) // Too lazy \u3053\u3053\u3067\u521d\u3081\u3066\u547c\u3070\u308c\u308b\n\n```\n \n\n", "tags": ["Swift", "swift3"]}