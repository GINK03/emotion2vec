{"tags": ["Python", "Alembic", "sqlalchemy"], "context": "Alembic\u306fpython\u306eorm\n\u3067\u3042\u308bsqlalchemy\u306e\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u30c4\u30fc\u30eb\u3067\u3059\u3002\n\u65e5\u672c\u8a9e\u8a18\u4e8b\u304c\u5c11\u306a\u304f\u3001\u306a\u3093\u3068\u306a\u304f\u4f7f\u3063\u3066\u3044\u308b\u3068\u6c17\u3065\u304b\u306a\u3044\u3053\u3068\u304c\u591a\u304b\u3063\u305f\u306e\u3067\u3001\u306f\u307e\u3063\u3068\u3053\u308d\u3092\u30e1\u30e2\u306b\u6b8b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nAlembic\uff1ahttp://alembic.zzzcomputing.com/en/latest/\n\n\u8907\u6570\u306e\u30e2\u30c7\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u6271\u3044\u305f\u3044\n\u8907\u6570\u306emodel\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u969b\u3001Base\u30af\u30e9\u30b9\u306emetadata\u3092\u7d50\u5408\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nhttp://liuhongjiang.github.io/hexotech/2015/10/14/alembic-support-multiple-model-files/\n\u3053\u306e\u30d6\u30ed\u30b0\u306b\u3042\u308b\u65b9\u6cd5\u3067\u3046\u307e\u304f\u3044\u304d\u307e\u3059\u3002\n\u50d5\u306e\u5834\u5408\u3001\u52d5\u7684\u30a4\u30f3\u30dd\u30fc\u30c8\u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\nenv.py\ntarget_models =[\n    'path.to.models',\n    'another.models'\n]\n\ndef import_model_bases():\n    \"\"\"import all target models base metadatas.\"\"\"\n    lst = list(map(\n        lambda x: importlib.import_module(x).Base.metadata,\n        target_models\n    ))\n    return lst\n\n\ndef combine_metadata(lst):\n    m = MetaData()\n    for metadata in lst:\n        for t in metadata.tables.values():\n            t.tometadata(m)\n    return m\n\ntarget_metadata = combine_metadata(import_model_bases())\n\n\n\n\u578b\u306e\u5909\u66f4\u3092\u691c\u77e5\u3057\u306a\u3044\n\u540c\u3058\u30ab\u30e9\u30e0\u540d\u306e\u307e\u307e\u3060\u3068\u3001\u578b\u306e\u5909\u5316\u3092\u611f\u77e5\u3057\u3066\u304f\u308c\u307e\u305b\u3093\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3060\u3068\u305d\u3046\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\nhttp://stackoverflow.com/questions/17174636/can-alembic-autogenerate-column-alterations\n\u3053\u3061\u3089\u3082\u3053\u3053\u306e\u8a18\u4e8b\u306e\u3088\u3046\u306b\u4fee\u6b63\u3057\u307e\u3059\u3002\n\nenv.py\ndef run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section),\n        prefix='sqlalchemy.',\n        poolclass=pool.NullPool)\n\n    with connectable.connect() as connection:\n        context.configure(\n            connection=connection,\n            target_metadata=target_metadata,\n            compare_type=True # \u8ffd\u52a0\n        )\n\n        with context.begin_transaction():\n            context.run_migrations()\n\n\n\nBoolean\u3068Tinyint\u3092\u7570\u306a\u308b\u578b\u3068\u5224\u65ad\u3059\u308b\n\u5148\u307b\u3069\u306e\u578b\u306e\u5909\u66f4\u3092\u611f\u77e5\u3059\u308b\u3088\u3046\u306b\u306a\u308b\u3068\u4eca\u5ea6\u306fBoolean\u578b\u3092\u6271\u3046\u969b\u306b\u554f\u984c\u306b\u306a\u308a\u307e\u3059\u3002\nBoolean\u306fmysql\u3067\u306ftinyint\u3068\u8a2d\u5b9a\u3055\u308c\u308b\u306e\u3067\u3059\u304c\u3001\u6bd4\u8f03\u3059\u308b\u969b\u306b\u578b\u304c\u7570\u306a\u308b\u3068\u5224\u65ad\u3055\u308c\u6bce\u56de\u30ab\u30e9\u30e0\u524a\u9664\u3068\u4f5c\u6210\u3092\u884c\u304a\u3046\u3068\u3057\u3066\u304d\u307e\u3059\u3002\n\u307e\u305ftinyint\u304b\u3089integer\u306b\u578b\u3092\u5909\u3048\u3066\u3082\u306e\u3046\u307e\u304f\u691c\u77e5\u3067\u304d\u307e\u305b\u3093\u3002\nhttps://bitbucket.org/zzzeek/alembic/issues/46/mysqltinyint-display_width-1-vs-saboolean\nhttp://alembic.zzzcomputing.com/en/latest/autogenerate.html#comparing-types\n\u3053\u3053\u3092\u53c2\u8003\u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u611f\u3058\u3067\u76f4\u305b\u3070\u3046\u307e\u304f\u3044\u304d\u307e\u3059\u3002\n\u50d5\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\nenv.py\n# \u8ffd\u52a0\ndef my_compare_type(context, inspected_column,\n                    metadata_column, inspected_type, metadata_type):\n    \"\"\"my compser type for mysql.\"\"\"\n    if isinstance(inspected_type, mysql.TINYINT) and\\\n       isinstance(metadata_type, Boolean):\n        return False\n    if isinstance(inspected_type, mysql.TINYINT) and\\\n       isinstance(metadata_type, Integer):\n        return True\n    return None\n\ndef run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section),\n        prefix='sqlalchemy.',\n        poolclass=pool.NullPool)\n\n    with connectable.connect() as connection:\n        context.configure(\n            connection=connection,\n            target_metadata=target_metadata,\n            compare_type=my_compare_type # \u5909\u66f4\n        )\n\n        with context.begin_transaction():\n            context.run_migrations()\n\n\nalembic\u306f\u6a5f\u80fd\u304c\u591a\u304f\u3001\u672a\u3060\u4f7f\u3063\u305f\u3053\u3068\u306a\u3044\u6a5f\u80fd\u304c\u591a\u3044\u306e\u3067\u5f8c\u3067\u30cf\u30de\u3063\u305f\u3053\u3068\u306f\u9806\u6b21\u8ffd\u8a18\u3057\u3066\u3044\u304d\u307e\u3059\u3002\nAlembic\u306fpython\u306eorm\n\u3067\u3042\u308bsqlalchemy\u306e\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u30c4\u30fc\u30eb\u3067\u3059\u3002\n\u65e5\u672c\u8a9e\u8a18\u4e8b\u304c\u5c11\u306a\u304f\u3001\u306a\u3093\u3068\u306a\u304f\u4f7f\u3063\u3066\u3044\u308b\u3068\u6c17\u3065\u304b\u306a\u3044\u3053\u3068\u304c\u591a\u304b\u3063\u305f\u306e\u3067\u3001\u306f\u307e\u3063\u3068\u3053\u308d\u3092\u30e1\u30e2\u306b\u6b8b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\nAlembic\uff1ahttp://alembic.zzzcomputing.com/en/latest/\n\n#\u8907\u6570\u306e\u30e2\u30c7\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u6271\u3044\u305f\u3044\n\n\u8907\u6570\u306emodel\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u969b\u3001Base\u30af\u30e9\u30b9\u306emetadata\u3092\u7d50\u5408\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nhttp://liuhongjiang.github.io/hexotech/2015/10/14/alembic-support-multiple-model-files/\n\u3053\u306e\u30d6\u30ed\u30b0\u306b\u3042\u308b\u65b9\u6cd5\u3067\u3046\u307e\u304f\u3044\u304d\u307e\u3059\u3002\n\u50d5\u306e\u5834\u5408\u3001\u52d5\u7684\u30a4\u30f3\u30dd\u30fc\u30c8\u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n```python:env.py\ntarget_models =[\n    'path.to.models',\n    'another.models'\n]\n\ndef import_model_bases():\n    \"\"\"import all target models base metadatas.\"\"\"\n    lst = list(map(\n        lambda x: importlib.import_module(x).Base.metadata,\n        target_models\n    ))\n    return lst\n\n\ndef combine_metadata(lst):\n    m = MetaData()\n    for metadata in lst:\n        for t in metadata.tables.values():\n            t.tometadata(m)\n    return m\n\ntarget_metadata = combine_metadata(import_model_bases())\n```\n\n#\u578b\u306e\u5909\u66f4\u3092\u691c\u77e5\u3057\u306a\u3044\n\n\u540c\u3058\u30ab\u30e9\u30e0\u540d\u306e\u307e\u307e\u3060\u3068\u3001\u578b\u306e\u5909\u5316\u3092\u611f\u77e5\u3057\u3066\u304f\u308c\u307e\u305b\u3093\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3060\u3068\u305d\u3046\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\nhttp://stackoverflow.com/questions/17174636/can-alembic-autogenerate-column-alterations\n\u3053\u3061\u3089\u3082\u3053\u3053\u306e\u8a18\u4e8b\u306e\u3088\u3046\u306b\u4fee\u6b63\u3057\u307e\u3059\u3002\n\n```python:env.py\ndef run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section),\n        prefix='sqlalchemy.',\n        poolclass=pool.NullPool)\n\n    with connectable.connect() as connection:\n        context.configure(\n            connection=connection,\n            target_metadata=target_metadata,\n            compare_type=True # \u8ffd\u52a0\n        )\n\n        with context.begin_transaction():\n            context.run_migrations()\n```\n\n#Boolean\u3068Tinyint\u3092\u7570\u306a\u308b\u578b\u3068\u5224\u65ad\u3059\u308b\n\n\u5148\u307b\u3069\u306e\u578b\u306e\u5909\u66f4\u3092\u611f\u77e5\u3059\u308b\u3088\u3046\u306b\u306a\u308b\u3068\u4eca\u5ea6\u306fBoolean\u578b\u3092\u6271\u3046\u969b\u306b\u554f\u984c\u306b\u306a\u308a\u307e\u3059\u3002\nBoolean\u306fmysql\u3067\u306ftinyint\u3068\u8a2d\u5b9a\u3055\u308c\u308b\u306e\u3067\u3059\u304c\u3001\u6bd4\u8f03\u3059\u308b\u969b\u306b\u578b\u304c\u7570\u306a\u308b\u3068\u5224\u65ad\u3055\u308c\u6bce\u56de\u30ab\u30e9\u30e0\u524a\u9664\u3068\u4f5c\u6210\u3092\u884c\u304a\u3046\u3068\u3057\u3066\u304d\u307e\u3059\u3002\n\u307e\u305ftinyint\u304b\u3089integer\u306b\u578b\u3092\u5909\u3048\u3066\u3082\u306e\u3046\u307e\u304f\u691c\u77e5\u3067\u304d\u307e\u305b\u3093\u3002\nhttps://bitbucket.org/zzzeek/alembic/issues/46/mysqltinyint-display_width-1-vs-saboolean\nhttp://alembic.zzzcomputing.com/en/latest/autogenerate.html#comparing-types\n\u3053\u3053\u3092\u53c2\u8003\u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u611f\u3058\u3067\u76f4\u305b\u3070\u3046\u307e\u304f\u3044\u304d\u307e\u3059\u3002\n\u50d5\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n```python:env.py\n# \u8ffd\u52a0\ndef my_compare_type(context, inspected_column,\n                    metadata_column, inspected_type, metadata_type):\n    \"\"\"my compser type for mysql.\"\"\"\n    if isinstance(inspected_type, mysql.TINYINT) and\\\n       isinstance(metadata_type, Boolean):\n        return False\n    if isinstance(inspected_type, mysql.TINYINT) and\\\n       isinstance(metadata_type, Integer):\n        return True\n    return None\n\ndef run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section),\n        prefix='sqlalchemy.',\n        poolclass=pool.NullPool)\n\n    with connectable.connect() as connection:\n        context.configure(\n            connection=connection,\n            target_metadata=target_metadata,\n            compare_type=my_compare_type # \u5909\u66f4\n        )\n\n        with context.begin_transaction():\n            context.run_migrations()\n```\n\nalembic\u306f\u6a5f\u80fd\u304c\u591a\u304f\u3001\u672a\u3060\u4f7f\u3063\u305f\u3053\u3068\u306a\u3044\u6a5f\u80fd\u304c\u591a\u3044\u306e\u3067\u5f8c\u3067\u30cf\u30de\u3063\u305f\u3053\u3068\u306f\u9806\u6b21\u8ffd\u8a18\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n"}