{"tags": ["C++11"], "context": "\u6307\u6458\u306b\u3088\u308a\u3001\u4f8b\u5916\u306b\u3064\u3044\u3066\u8ffd\u8a18\u3057\u307e\u3057\u305f\n\n\u306f\u3058\u307e\u308a\nJSON\u306764\u30d3\u30c3\u30c8\u6574\u6570\u3092\u3084\u308a\u53d6\u308a\u3057\u3088\u3046\u3068\u601d\u3063\u305f\u3089\nJSON\u4ed5\u69d8\u3067\u306f\uff16\uff14\u30d3\u30c3\u30c8\u6574\u6570\u304c\u5b58\u5728\u3057\u306a\u3044\uff01\uff01\nNumber\u578b\u306b\u3059\u308c\u307052\u30d3\u30c3\u30c8\u307e\u3067\u306f\u53d6\u308c\u308b\u3051\u3069\n\u305d\u308c\u4ee5\u4e0a\u306f\u53d6\u308c\u306a\u3044\nJSON\u3067\u306f\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3082\u8ee2\u9001\u3067\u304d\u306a\u3044\n\u3088\u3063\u3066\u3001\u305d\u308c\u3089\u306e\u30b1\u30fc\u30b9\u306f\u4e00\u822c\u7684\u306b\n\u6570\u5b57\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u3001\u901a\u4fe1\u3092\u3059\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\n\u3082\u3061\u308d\u3093\u3001\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092 base64\u306b\u3057\u3066\u9001\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u306f\u3042\u308a\u307e\u3059\u304c\n\u305d\u306e\u5834\u5408\u306b\u306f \u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u3084\u3001\u5185\u90e8\u8868\u73fe\u5f62\u5f0f\u3068\u3044\u3063\u305f\u554f\u984c\u3082\u767a\u751f\u3059\u308b\u306e\u3067\n\u3042\u307e\u308a \u74b0\u5883\u4f9d\u5b58\u3059\u308b\u3082\u306e\u306f\u3088\u304f\u3042\u308a\u307e\u305b\u3093\u306d\n\nint64_t\u3001uint64_t\u304b\u3089 std::string\u3000\u3078\u306e\u5909\u63db\nstream\u3092\u4f7f\u3046\u306e\u3082\u7c21\u5358\u306b\u3067\u304d\u307e\u3059\u304c\u3001\u3053\u3053\u306f\u304a\u624b\u8efd\u306b\nstd::to_string \u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\n\nto_string\n#include <limits>\n#include <iostream>\n#include <string>\n#include <cstdint>\ntemplate<typename T> using lim = std::numeric_limits<T>;\nint main(){    \n    using namespace std;\n    cout\n        << \"std::numeric_limits<int64_t>::max()\" << endl\n        << lim<int64_t>::min() << endl\n        << to_string(lim<int64_t>::min()) << endl;\n    cout\n        << \"std::numeric_limits<int64_t>::max()\" << endl\n        << lim<int64_t>::max() << endl\n        << to_string(lim<int64_t>::max()) << endl;\n    cout\n        << \"std::numeric_limits<uint64_t>::max()\" << endl\n        << lim<uint64_t>::min() << endl\n        << to_string(lim<uint64_t>::min()) << endl;\n    cout\n        << \"std::numeric_limits<uint64_t>::max()\" << endl\n        << lim<uint64_t>::max() << endl\n        << to_string(lim<uint64_t>::max()) << endl;\n\n    return 0;\n}\n\n\n\n\u7d50\u679c\nstd::numeric_limits<int64_t>::max()\n-9223372036854775808\n-9223372036854775808\nstd::numeric_limits<int64_t>::max()\n9223372036854775807\n9223372036854775807\nstd::numeric_limits<uint64_t>::max()\n0\n0\nstd::numeric_limits<uint64_t>::max()\n18446744073709551615\n18446744073709551615\n\n\n\u5927\u4e08\u592b\u3067\u3059\u306d\uff01\n\nstd::string\u304b\u3089\u3000int64_t\u3001uint64_t\u3078\u5909\u63db\n\u307e\u305a\n#include <type_traits>\n#include <cstdint>\nstatic_assert(std::is_same<long long, std::int64_t>::value, \"err\");\nstatic_assert(std::is_same<unsigned long long, std::uint64_t>::value, \"err\");\n\n\u304c\u30a8\u30e9\u30fc\u306b\u306a\u3089\u306a\u3044\u3068\u4eee\u5b9a\u3057\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002\u6ce8\u610f\u3057\u307e\u3057\u3087\u3046\u3002\n\u30a8\u30e9\u30fc\u51e6\u7406\u3092\u4f8b\u5916\u3067\u884c\u3046\u30b1\u30fc\u30b9\u306f\nsigned\u306e\u5834\u5408\u306fstd::stoll\u3001unsigned\u306fstd::stoull\n\u30a8\u30e9\u30fc\u51e6\u7406\u3092errno\u3067\u884c\u3046\u30b1\u30fc\u30b9\u306f\nsigned\u306e\u5834\u5408\u306fstd::strtoll\u3001unsigned\u306fstd::strtoull\n\u3092\u4f7f\u3044\u307e\u3059\n\nstoi\u7cfb\u95a2\u6570\u3092\u4f7f\u3046\nnamespace std {\n    long long stoll(const string& str, size_t* idx = 0, int base = 10);\n    unsigned long long stoull(const string& str, size_t* idx = 0, int base = 10);\n    long long stoll(const wstring& str, size_t* idx = 0, int base = 10);\n    unsigned long long stoull(const wstring& str, size_t* idx = 0, int base = 10);\n}\n\n\n\n\n\u5f15\u6570\n\u8aac\u660e\n\n\n\n\nstr\n\u5909\u63db\u3057\u305f\u3044\u6587\u5b57\u5217\n\n\nidx\n\u5909\u63db\u3067\u304d\u306a\u304b\u3063\u305f\u6700\u521d\u306e\u6587\u5b57\u306e\u8981\u7d20\u756a\u53f7\u3092\u66f8\u304d\u8fbc\u3080\u5909\u6570\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u30fc\u3002nullptr\u3092\u6307\u5b9a\u3059\u308c\u3070\u7121\u8996\u3055\u308c\u308b\u3002\n\n\nbase\n\u4f55\u9032\u6570\u306b\u3059\u308b\u304b\n\n\n\n\nstoi\u7cfb\u95a2\u6570\u3092\u4f7f\u3046\n#include <limits>\n#include <iostream>\n#include <string>\ntemplate<typename T> using lim = std::numeric_limits<T>;\nint main(){    \n    using namespace std;\n    using ll = long long;\n    using ull = unsigned long long;\n\n    cout\n        << \"std::numeric_limits<long long>::max()\" << endl\n        << lim<ll>::min() << endl\n        << stoll(to_string(lim<ll>::min())) << endl;\n    cout\n        << \"std::numeric_limits<long long>::max()\" << endl\n        << lim<ll>::max() << endl\n        << stoll(to_string(lim<ll>::max())) << endl;\n    cout\n        << \"std::numeric_limits<unsigned long long>::max()\" << endl\n        << lim<ull>::min() << endl\n        << stoull(to_string(lim<ull>::min())) << endl;\n    cout\n        << \"std::numeric_limits<unsigned long long>::max()\" << endl\n        << lim<ull>::max() << endl\n        << stoull(to_string(lim<ull>::max())) << endl;\n\n    return 0;\n}\n\n\n\nstrtol\u7cfb\u95a2\u6570\u3092\u4f7f\u3046\n\nC99/11\nlong long int strtoll(const char * restrict nptr, char ** restrict endptr, int base);\nunsigned long long int strtoull(const char * restrict nptr, char ** restrict endptr, int base);\n\n\n\n\n\n\u5f15\u6570\n\u8aac\u660e\n\n\n\n\nnptr\n\u5909\u63db\u3057\u305f\u3044\u6587\u5b57\u5217\n\n\nendptr\n\u5909\u63db\u3067\u304d\u306a\u304b\u3063\u305f\u6700\u521d\u306e\u6587\u5b57\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u30fc\u3092\u66f8\u304d\u8fbc\u3080\u5909\u6570\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u30fc\u3002nullptr\u3092\u6307\u5b9a\u3059\u308c\u3070\u7121\u8996\u3055\u308c\u308b\u3002\n\n\nbase\n\u4f55\u9032\u6570\u3068\u3057\u3066\u89e3\u91c8\u3059\u308b\u304b\n\n\n\n\nstrtol\u7cfb\u95a2\u6570\u3092\u4f7f\u3046\u5834\u5408\n#include <cstdlib>\n#include <limits>\n#include <iostream>\n#include <string>\n#include <cerrno>\ntemplate<typename T> using lim = std::numeric_limits<T>;\nint main(){    \n    using namespace std;\n    using ll = long long;\n    using ull = unsigned long long;\n\n    cout << \"std::numeric_limits<long long>::max()\" << endl;\n    cout << lim<ll>::min() << endl;\n    {\n        const auto s = to_string(lim<ll>::min());\n        errno = 0;\n        char* endptr;\n        const auto re = strtoll(s.c_str(), &endptr, 10);\n        if(0 != errno || (0 == re && endptr == s.c_str())) return -1;//error\n        cout << re << endl;\n    }\n\n    cout << \"std::numeric_limits<long long>::max()\" << endl;\n    cout << lim<ll>::max() << endl;\n    {\n        const auto s = to_string(lim<ll>::max());\n        errno = 0;\n        char* endptr;\n        const auto re = strtoll(s.c_str(), &endptr, 10);\n        if(0 != errno || (0 == re && endptr == s.c_str())) return -1;//error\n        cout << re << endl;\n    }\n\n    cout << \"std::numeric_limits<unsigned long long>::max()\" << endl;\n    cout << lim<ull>::min() << endl;\n    {\n        const auto s = to_string(lim<ull>::min());\n        errno = 0;\n        char* endptr;\n        const auto re = strtoull(s.c_str(), &endptr, 10);\n        if(0 != errno || (0 == re && endptr == s.c_str())) return -1;//error\n        cout << re << endl;\n    }\n\n    cout << \"std::numeric_limits<unsigned long long>::max()\" << endl;\n    cout << lim<ull>::max() << endl;\n    {\n        const auto s = to_string(lim<ull>::max());\n        errno = 0;\n        char* endptr;\n        const auto re = strtoull(s.c_str(), &endptr, 10);\n        if(0 != errno || (0 == re && endptr == s.c_str())) return -1;//error\n        cout << re << endl;\n    }\n\n    return 0;\n}\n\n\n\n\u7d50\u679c\n\n\u7d50\u679c\nstd::numeric_limits<long long>::max()\n-9223372036854775808\n-9223372036854775808\nstd::numeric_limits<long long>::max()\n9223372036854775807\n9223372036854775807\nstd::numeric_limits<unsigned long long>::max()\n0\n0\nstd::numeric_limits<unsigned long long>::max()\n18446744073709551615\n18446744073709551615\n\n\n\u5927\u4e08\u592b\u3067\u3059\u306d\uff01\n\u6307\u6458\u306b\u3088\u308a\u3001\u4f8b\u5916\u306b\u3064\u3044\u3066\u8ffd\u8a18\u3057\u307e\u3057\u305f\n\n\n# \u306f\u3058\u307e\u308a\nJSON\u306764\u30d3\u30c3\u30c8\u6574\u6570\u3092\u3084\u308a\u53d6\u308a\u3057\u3088\u3046\u3068\u601d\u3063\u305f\u3089\nJSON\u4ed5\u69d8\u3067\u306f\uff16\uff14\u30d3\u30c3\u30c8\u6574\u6570\u304c\u5b58\u5728\u3057\u306a\u3044\uff01\uff01\nNumber\u578b\u306b\u3059\u308c\u307052\u30d3\u30c3\u30c8\u307e\u3067\u306f\u53d6\u308c\u308b\u3051\u3069\n\u305d\u308c\u4ee5\u4e0a\u306f\u53d6\u308c\u306a\u3044\nJSON\u3067\u306f\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3082\u8ee2\u9001\u3067\u304d\u306a\u3044\n\n\u3088\u3063\u3066\u3001\u305d\u308c\u3089\u306e\u30b1\u30fc\u30b9\u306f\u4e00\u822c\u7684\u306b\n\u6570\u5b57\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u3001\u901a\u4fe1\u3092\u3059\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\n\n\u3082\u3061\u308d\u3093\u3001\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092 base64\u306b\u3057\u3066\u9001\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u306f\u3042\u308a\u307e\u3059\u304c\n\u305d\u306e\u5834\u5408\u306b\u306f \u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u3084\u3001\u5185\u90e8\u8868\u73fe\u5f62\u5f0f\u3068\u3044\u3063\u305f\u554f\u984c\u3082\u767a\u751f\u3059\u308b\u306e\u3067\n\u3042\u307e\u308a \u74b0\u5883\u4f9d\u5b58\u3059\u308b\u3082\u306e\u306f\u3088\u304f\u3042\u308a\u307e\u305b\u3093\u306d\n\n# int64_t\u3001uint64_t\u304b\u3089 std::string\u3000\u3078\u306e\u5909\u63db\nstream\u3092\u4f7f\u3046\u306e\u3082\u7c21\u5358\u306b\u3067\u304d\u307e\u3059\u304c\u3001\u3053\u3053\u306f\u304a\u624b\u8efd\u306b\nstd::to_string \u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\n\n```cpp:to_string\n#include <limits>\n#include <iostream>\n#include <string>\n#include <cstdint>\ntemplate<typename T> using lim = std::numeric_limits<T>;\nint main(){    \n    using namespace std;\n    cout\n        << \"std::numeric_limits<int64_t>::max()\" << endl\n        << lim<int64_t>::min() << endl\n        << to_string(lim<int64_t>::min()) << endl;\n    cout\n        << \"std::numeric_limits<int64_t>::max()\" << endl\n        << lim<int64_t>::max() << endl\n        << to_string(lim<int64_t>::max()) << endl;\n    cout\n        << \"std::numeric_limits<uint64_t>::max()\" << endl\n        << lim<uint64_t>::min() << endl\n        << to_string(lim<uint64_t>::min()) << endl;\n    cout\n        << \"std::numeric_limits<uint64_t>::max()\" << endl\n        << lim<uint64_t>::max() << endl\n        << to_string(lim<uint64_t>::max()) << endl;\n    \n    return 0;\n}\n```\n\n\n```plain:\u7d50\u679c\nstd::numeric_limits<int64_t>::max()\n-9223372036854775808\n-9223372036854775808\nstd::numeric_limits<int64_t>::max()\n9223372036854775807\n9223372036854775807\nstd::numeric_limits<uint64_t>::max()\n0\n0\nstd::numeric_limits<uint64_t>::max()\n18446744073709551615\n18446744073709551615\n```\n\n\n\u5927\u4e08\u592b\u3067\u3059\u306d\uff01\n\n\n# std::string\u304b\u3089\u3000int64_t\u3001uint64_t\u3078\u5909\u63db\n\n\u307e\u305a\n\n```cpp\n#include <type_traits>\n#include <cstdint>\nstatic_assert(std::is_same<long long, std::int64_t>::value, \"err\");\nstatic_assert(std::is_same<unsigned long long, std::uint64_t>::value, \"err\");\n```\n\n\u304c\u30a8\u30e9\u30fc\u306b\u306a\u3089\u306a\u3044\u3068\u4eee\u5b9a\u3057\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002\u6ce8\u610f\u3057\u307e\u3057\u3087\u3046\u3002\n\n\u30a8\u30e9\u30fc\u51e6\u7406\u3092\u4f8b\u5916\u3067\u884c\u3046\u30b1\u30fc\u30b9\u306f\nsigned\u306e\u5834\u5408\u306f``std::stoll``\u3001unsigned\u306f``std::stoull``\n\n\u30a8\u30e9\u30fc\u51e6\u7406\u3092``errno``\u3067\u884c\u3046\u30b1\u30fc\u30b9\u306f\nsigned\u306e\u5834\u5408\u306f``std::strtoll``\u3001unsigned\u306f``std::strtoull``\n\n\u3092\u4f7f\u3044\u307e\u3059\n\n## stoi\u7cfb\u95a2\u6570\u3092\u4f7f\u3046\n\n```cpp\nnamespace std {\n    long long stoll(const string& str, size_t* idx = 0, int base = 10);\n    unsigned long long stoull(const string& str, size_t* idx = 0, int base = 10);\n    long long stoll(const wstring& str, size_t* idx = 0, int base = 10);\n    unsigned long long stoull(const wstring& str, size_t* idx = 0, int base = 10);\n}\n```\n\n| \u5f15\u6570 | \u8aac\u660e                                                                                              |\n|------|---------------------------------------------------------------------------------------------------|\n| str  | \u5909\u63db\u3057\u305f\u3044\u6587\u5b57\u5217                                                                                  |\n| idx  | \u5909\u63db\u3067\u304d\u306a\u304b\u3063\u305f\u6700\u521d\u306e\u6587\u5b57\u306e\u8981\u7d20\u756a\u53f7\u3092\u66f8\u304d\u8fbc\u3080\u5909\u6570\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u30fc\u3002nullptr\u3092\u6307\u5b9a\u3059\u308c\u3070\u7121\u8996\u3055\u308c\u308b\u3002 |\n| base | \u4f55\u9032\u6570\u306b\u3059\u308b\u304b                                                                                    |\n\n```cpp:stoi\u7cfb\u95a2\u6570\u3092\u4f7f\u3046\n#include <limits>\n#include <iostream>\n#include <string>\ntemplate<typename T> using lim = std::numeric_limits<T>;\nint main(){    \n    using namespace std;\n    using ll = long long;\n    using ull = unsigned long long;\n \n    cout\n        << \"std::numeric_limits<long long>::max()\" << endl\n        << lim<ll>::min() << endl\n        << stoll(to_string(lim<ll>::min())) << endl;\n    cout\n        << \"std::numeric_limits<long long>::max()\" << endl\n        << lim<ll>::max() << endl\n        << stoll(to_string(lim<ll>::max())) << endl;\n    cout\n        << \"std::numeric_limits<unsigned long long>::max()\" << endl\n        << lim<ull>::min() << endl\n        << stoull(to_string(lim<ull>::min())) << endl;\n    cout\n        << \"std::numeric_limits<unsigned long long>::max()\" << endl\n        << lim<ull>::max() << endl\n        << stoull(to_string(lim<ull>::max())) << endl;\n    \n    return 0;\n}\n```\n\n## strtol\u7cfb\u95a2\u6570\u3092\u4f7f\u3046\n\n```c:C99/11\nlong long int strtoll(const char * restrict nptr, char ** restrict endptr, int base);\nunsigned long long int strtoull(const char * restrict nptr, char ** restrict endptr, int base);\n```\n\n| \u5f15\u6570   | \u8aac\u660e                                                                                                  |\n|--------|-------------------------------------------------------------------------------------------------------|\n| nptr | \u5909\u63db\u3057\u305f\u3044\u6587\u5b57\u5217                                                                                      |\n| endptr | \u5909\u63db\u3067\u304d\u306a\u304b\u3063\u305f\u6700\u521d\u306e\u6587\u5b57\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u30fc\u3092\u66f8\u304d\u8fbc\u3080\u5909\u6570\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u30fc\u3002nullptr\u3092\u6307\u5b9a\u3059\u308c\u3070\u7121\u8996\u3055\u308c\u308b\u3002 |\n| base   | \u4f55\u9032\u6570\u3068\u3057\u3066\u89e3\u91c8\u3059\u308b\u304b                                                                                        |\n\n\n```cpp:strtol\u7cfb\u95a2\u6570\u3092\u4f7f\u3046\u5834\u5408\n#include <cstdlib>\n#include <limits>\n#include <iostream>\n#include <string>\n#include <cerrno>\ntemplate<typename T> using lim = std::numeric_limits<T>;\nint main(){    \n    using namespace std;\n    using ll = long long;\n    using ull = unsigned long long;\n \n    cout << \"std::numeric_limits<long long>::max()\" << endl;\n    cout << lim<ll>::min() << endl;\n    {\n        const auto s = to_string(lim<ll>::min());\n        errno = 0;\n        char* endptr;\n        const auto re = strtoll(s.c_str(), &endptr, 10);\n        if(0 != errno || (0 == re && endptr == s.c_str())) return -1;//error\n        cout << re << endl;\n    }\n\n    cout << \"std::numeric_limits<long long>::max()\" << endl;\n    cout << lim<ll>::max() << endl;\n    {\n        const auto s = to_string(lim<ll>::max());\n        errno = 0;\n        char* endptr;\n        const auto re = strtoll(s.c_str(), &endptr, 10);\n        if(0 != errno || (0 == re && endptr == s.c_str())) return -1;//error\n        cout << re << endl;\n    }\n\n    cout << \"std::numeric_limits<unsigned long long>::max()\" << endl;\n    cout << lim<ull>::min() << endl;\n    {\n        const auto s = to_string(lim<ull>::min());\n        errno = 0;\n        char* endptr;\n        const auto re = strtoull(s.c_str(), &endptr, 10);\n        if(0 != errno || (0 == re && endptr == s.c_str())) return -1;//error\n        cout << re << endl;\n    }\n\n    cout << \"std::numeric_limits<unsigned long long>::max()\" << endl;\n    cout << lim<ull>::max() << endl;\n    {\n        const auto s = to_string(lim<ull>::max());\n        errno = 0;\n        char* endptr;\n        const auto re = strtoull(s.c_str(), &endptr, 10);\n        if(0 != errno || (0 == re && endptr == s.c_str())) return -1;//error\n        cout << re << endl;\n    }\n    \n    return 0;\n}\n```\n\n## \u7d50\u679c\n```plain:\u7d50\u679c\nstd::numeric_limits<long long>::max()\n-9223372036854775808\n-9223372036854775808\nstd::numeric_limits<long long>::max()\n9223372036854775807\n9223372036854775807\nstd::numeric_limits<unsigned long long>::max()\n0\n0\nstd::numeric_limits<unsigned long long>::max()\n18446744073709551615\n18446744073709551615\n```\n\n\u5927\u4e08\u592b\u3067\u3059\u306d\uff01\n"}