{"context": "\n\n\n\u591a\u6bb5\u968e\u9078\u629c\n\u30b7\u30ea\u30fc\u30ba:yield\u306e\u7df4\u7fd2/\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u5165\u308c\u5b50\u306b\n\n\n\n\n\u554f\u984c\n\nhttp://nabetani.sakura.ne.jp/hena/ord24eliseq/http://qiita.com/Nabetani/items/1c83005a854d2c6cbb69\n\n\n\nRuby\nhttp://qiita.com/cielavenir/items/9f15e29b73ecf98968a5\n\n\nC#/Python\nhttp://qiita.com/cielavenir/items/a1156e6a4f71ddbe5dcb\n\n\n\n\u3053\u3053\u304b\u3089\u4e0a\u306fdrop_prev_square/drop_prev_cubic\u3092\u307e\u3068\u3081\u308b\u524d\u306e\u7b54\u6848\n\n\nGo/C#/Ruby/Python\nhttp://qiita.com/cielavenir/items/2a685d3080862f2c2c47\n\n\nPHP/JavaScript\nhttp://qiita.com/cielavenir/items/28d613ac3823afbf8407\n\n\nVB\nhttp://qiita.com/cielavenir/items/cb7266abd30eadd71c04\n\n\nD\nhttp://qiita.com/cielavenir/items/47c9e50ee60bef2847ec\n\n\nPerl/C++17(TS)\nhttp://qiita.com/cielavenir/items/e1129ca185008f49cbab\n\n\nLua\nhttp://qiita.com/cielavenir/items/c60fe7e8da73487ba062\n\n\n\n\nPerl\nGenerator::Object\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u7528\u3002\n\ntyama_hena24_enum.pl\n#!/usr/bin/env perl\n#http://qiita.com/Nabetani/items/1c83005a854d2c6cbb69\n#http://nabetani.sakura.ne.jp/hena/ord24eliseq/\n\nuse strict vars;\nuse feature qw(say);\nuse IO::Handle;\nuse Generator::Object;\nuse List::Util qw(reduce);\n\nsub cbrt{\n    my($n)=@_;\n    return $n**(1-2.0/3);\n}\n\nsub generate{\n    generator{\n        my $i=1;\n        for(;;){\n            $_->yield($i);\n            $i++;\n        }\n    }\n}\n\nsub drop_prev{\n    my($check,$prev)=@_;\n    generator{\n        my $a=$prev->next;\n        my $b=$prev->next;\n        for(;;){\n            $_->yield($a) if !$check->($b);\n            $a=$b;\n            $b=$prev->next;\n        }\n    }\n}\nsub drop_next{\n    my($check,$prev)=@_;\n    generator{\n        my $a=$prev->next;\n        my $b=$prev->next;\n        $_->yield($a);\n        for(;;){\n            $_->yield($b) if !$check->($a);\n            $a=$b;\n            $b=$prev->next;\n        }\n    }\n}\nsub drop_n{\n    my($check,$n,$prev)=@_;\n    generator{\n        my $i=0;\n        for(;;){\n            $i+=1;\n            $a=$prev->next;\n            $_->yield($a) if !$check->($i,$n);\n        }\n    }\n}\nsub is_sq{\n    my($n)=@_;\n    my $x=int(sqrt($n));\n    return $x*$x==$n;\n}\nsub is_cb{\n    my($n)=@_;\n    my $x=int(cbrt($n));\n    return $x*$x*$x==$n;\n}\nsub is_multiple{\n    my($i,$n)=@_;\n    return $i%$n==0;\n}\nsub is_le{\n    my($i,$n)=@_;\n    return $i<=$n;\n}\n\nmy %f=(\n    'S'=>sub{my($enum)=@_;return drop_next('is_sq',$enum);},\n    's'=>sub{my($enum)=@_;return drop_prev('is_sq',$enum);},\n    'C'=>sub{my($enum)=@_;return drop_next('is_cb',$enum);},\n    'c'=>sub{my($enum)=@_;return drop_prev('is_cb',$enum);},\n    'h'=>sub{my($enum)=@_;return drop_n('is_le',100,$enum);},\n);\nfor(my $i=2;$i<=9;$i++){$f{\"$i\"}=sub{my($i)=@_;sub{my($enum)=@_;return drop_n('is_multiple',$i,$enum);}}->($i);}\n\nSTDOUT->autoflush;\nfor(;my $line=<>;){\n    chomp($line);\n    #cS => $f['S']->($f['c']->(generate()))\n    my $z=reduce {$f{$b}->($a)} generate(),split('',$line);\n    my $cnt=10;\n    my @a;\n    for(my $i=0;$i<$cnt;$i++){\n        push(@a,$z->next);\n    }\n    say join(',',@a);\n}\n\n\n\nC++\n\n\u771f\u6253\u767b\u5834\u3002\n\u305f\u3060\u3057Visual C++ 2017\u3067\u3057\u304b\u52d5\u304d\u307e\u305b\u3093\u3002\n(\u73fe\u72b6\u3001OSX\u3067\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3092\u6700\u5c0f\u5316\u3057\u3066\u306f\u3044\u307e\u3059\u304c\u3001\u672a\u30c6\u30b9\u30c8\u3067\u3059)\n\n\ntyama_hena24_enum.cpp\n// http://qiita.com/Nabetani/items/1c83005a854d2c6cbb69\n// http://nabetani.sakura.ne.jp/hena/ord24eliseq/\n\n#include <iostream>\n#include <string>\n#include <map>\n#include <functional>\n#include <experimental/generator>\n#include <cstdio>\n#include <cmath>\nusing namespace std;\nusing namespace std::experimental;\n\ngenerator<int> generate(){\n    int i=1;\n    for(;;){\n        co_yield i;\n        i+=1;\n    }\n}\ngenerator<int> drop_prev(const function<bool(int)> &check,const generator<int> &_prev){\n    auto prev=_prev.begin();\n    int a=*prev;\n    ++prev;\n    int b=*prev;\n    for(;;){\n        if(!check(b))co_yield a;\n        a=b;\n        ++prev;\n        b=*prev;\n    }\n}\ngenerator<int> drop_next(const function<bool(int)> &check,const generator<int> &_prev){\n    auto prev=_prev.begin();\n    int a=*prev;\n    ++prev;\n    int b=*prev;\n    co_yield a;\n    for(;;){\n        if(!check(a))co_yield b;\n        a=b;\n        ++prev;\n        b=*prev;\n    }\n}\ngenerator<int> drop_n(const function<bool(int,int)> &check,int n,const generator<int> &_prev){\n    auto prev=_prev.begin();\n    int i=0;\n    for(;;){\n        i++;\n        int a=*prev;\n        if(!check(i,n))co_yield a;\n        ++prev;\n    }\n}\nbool is_sq(int n){\n    int x=(int)sqrt(n);\n    return x*x==n;\n}\nbool is_cb(int n){\n    int x=(int)cbrt(n);\n    return x*x*x==n;\n}\nbool is_multiple(int i,int n){return i%n==0;}\nbool is_le(int i,int n){return i<=n;}\n\nint main(){\n    map<char,function<generator<int>(const generator<int>&)>> f={\n        {'S',[&](auto &e){return drop_next(&is_sq,e);}},\n        {'s',[&](auto &e){return drop_prev(&is_sq,e);}},\n        {'C',[&](auto &e){return drop_next(&is_cb,e);}},\n        {'c',[&](auto &e){return drop_prev(&is_cb,e);}},\n        {'h',[&](auto &e){return drop_n(&is_le,100,e);}},\n    };\n    for(int i=2;i<10;i++){\n        f[(char)('0'+i)] = [&](auto &e){return drop_n(&is_multiple,i,e);};\n    }\n    string line;\n    for(;getline(cin,line);){\n        bool first=true;\n        //cS => f['S'](f['c'](generate()))\n        //auto z=reduce!((s,e)=>f[e](s))(generate(),line);\n\n        auto z=generate();\n        for(char e:line)z=f[e](z);\n        auto it=z.begin();\n        for(int i=0;i<10;i++){\n            int n=*it;\n            ++it;\n            if(!first)putchar(',');\n            first=false;\n            printf(\"%d\",n);\n        }\n        puts(\"\");\n        fflush(stdout);\n    }\n}\n\n\n\n|\u591a\u6bb5\u968e\u9078\u629c|\u30b7\u30ea\u30fc\u30ba:yield\u306e\u7df4\u7fd2/\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u5165\u308c\u5b50\u306b|\n|:--|:--|\n|\u554f\u984c|http://nabetani.sakura.ne.jp/hena/ord24eliseq/<br>http://qiita.com/Nabetani/items/1c83005a854d2c6cbb69|\n|Ruby|http://qiita.com/cielavenir/items/9f15e29b73ecf98968a5|\n|C#/Python|http://qiita.com/cielavenir/items/a1156e6a4f71ddbe5dcb|\n||\u3053\u3053\u304b\u3089\u4e0a\u306fdrop_prev_square/drop_prev_cubic\u3092\u307e\u3068\u3081\u308b\u524d\u306e\u7b54\u6848|\n|Go/C#/Ruby/Python|http://qiita.com/cielavenir/items/2a685d3080862f2c2c47|\n|PHP/JavaScript|http://qiita.com/cielavenir/items/28d613ac3823afbf8407|\n|VB|http://qiita.com/cielavenir/items/cb7266abd30eadd71c04|\n|D|http://qiita.com/cielavenir/items/47c9e50ee60bef2847ec|\n|Perl/C++17(TS)|http://qiita.com/cielavenir/items/e1129ca185008f49cbab|\n|Lua|http://qiita.com/cielavenir/items/c60fe7e8da73487ba062|\n\n## Perl\n\nGenerator::Object\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u7528\u3002\n\n```pl:tyama_hena24_enum.pl\n#!/usr/bin/env perl\n#http://qiita.com/Nabetani/items/1c83005a854d2c6cbb69\n#http://nabetani.sakura.ne.jp/hena/ord24eliseq/\n\nuse strict vars;\nuse feature qw(say);\nuse IO::Handle;\nuse Generator::Object;\nuse List::Util qw(reduce);\n\nsub cbrt{\n\tmy($n)=@_;\n\treturn $n**(1-2.0/3);\n}\n\nsub generate{\n\tgenerator{\n\t\tmy $i=1;\n\t\tfor(;;){\n\t\t\t$_->yield($i);\n\t\t\t$i++;\n\t\t}\n\t}\n}\n\nsub drop_prev{\n\tmy($check,$prev)=@_;\n\tgenerator{\n\t\tmy $a=$prev->next;\n\t\tmy $b=$prev->next;\n\t\tfor(;;){\n\t\t\t$_->yield($a) if !$check->($b);\n\t\t\t$a=$b;\n\t\t\t$b=$prev->next;\n\t\t}\n\t}\n}\nsub drop_next{\n\tmy($check,$prev)=@_;\n\tgenerator{\n\t\tmy $a=$prev->next;\n\t\tmy $b=$prev->next;\n\t\t$_->yield($a);\n\t\tfor(;;){\n\t\t\t$_->yield($b) if !$check->($a);\n\t\t\t$a=$b;\n\t\t\t$b=$prev->next;\n\t\t}\n\t}\n}\nsub drop_n{\n\tmy($check,$n,$prev)=@_;\n\tgenerator{\n\t\tmy $i=0;\n\t\tfor(;;){\n\t\t\t$i+=1;\n\t\t\t$a=$prev->next;\n\t\t\t$_->yield($a) if !$check->($i,$n);\n\t\t}\n\t}\n}\nsub is_sq{\n\tmy($n)=@_;\n\tmy $x=int(sqrt($n));\n\treturn $x*$x==$n;\n}\nsub is_cb{\n\tmy($n)=@_;\n\tmy $x=int(cbrt($n));\n\treturn $x*$x*$x==$n;\n}\nsub is_multiple{\n\tmy($i,$n)=@_;\n\treturn $i%$n==0;\n}\nsub is_le{\n\tmy($i,$n)=@_;\n\treturn $i<=$n;\n}\n\nmy %f=(\n\t'S'=>sub{my($enum)=@_;return drop_next('is_sq',$enum);},\n\t's'=>sub{my($enum)=@_;return drop_prev('is_sq',$enum);},\n\t'C'=>sub{my($enum)=@_;return drop_next('is_cb',$enum);},\n\t'c'=>sub{my($enum)=@_;return drop_prev('is_cb',$enum);},\n\t'h'=>sub{my($enum)=@_;return drop_n('is_le',100,$enum);},\n);\nfor(my $i=2;$i<=9;$i++){$f{\"$i\"}=sub{my($i)=@_;sub{my($enum)=@_;return drop_n('is_multiple',$i,$enum);}}->($i);}\n\nSTDOUT->autoflush;\nfor(;my $line=<>;){\n\tchomp($line);\n\t#cS => $f['S']->($f['c']->(generate()))\n\tmy $z=reduce {$f{$b}->($a)} generate(),split('',$line);\n\tmy $cnt=10;\n\tmy @a;\n\tfor(my $i=0;$i<$cnt;$i++){\n\t\tpush(@a,$z->next);\n\t}\n\tsay join(',',@a);\n}\n```\n\n## C++\n\n- \u771f\u6253\u767b\u5834\u3002\n- \u305f\u3060\u3057Visual C++ 2017\u3067\u3057\u304b\u52d5\u304d\u307e\u305b\u3093\u3002\n- (\u73fe\u72b6\u3001OSX\u3067\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3092\u6700\u5c0f\u5316\u3057\u3066\u306f\u3044\u307e\u3059\u304c\u3001\u672a\u30c6\u30b9\u30c8\u3067\u3059)\n\n```cpp:tyama_hena24_enum.cpp\n// http://qiita.com/Nabetani/items/1c83005a854d2c6cbb69\n// http://nabetani.sakura.ne.jp/hena/ord24eliseq/\n\n#include <iostream>\n#include <string>\n#include <map>\n#include <functional>\n#include <experimental/generator>\n#include <cstdio>\n#include <cmath>\nusing namespace std;\nusing namespace std::experimental;\n\ngenerator<int> generate(){\n\tint i=1;\n\tfor(;;){\n\t\tco_yield i;\n\t\ti+=1;\n\t}\n}\ngenerator<int> drop_prev(const function<bool(int)> &check,const generator<int> &_prev){\n\tauto prev=_prev.begin();\n\tint a=*prev;\n\t++prev;\n\tint b=*prev;\n\tfor(;;){\n\t\tif(!check(b))co_yield a;\n\t\ta=b;\n\t\t++prev;\n\t\tb=*prev;\n\t}\n}\ngenerator<int> drop_next(const function<bool(int)> &check,const generator<int> &_prev){\n\tauto prev=_prev.begin();\n\tint a=*prev;\n\t++prev;\n\tint b=*prev;\n\tco_yield a;\n\tfor(;;){\n\t\tif(!check(a))co_yield b;\n\t\ta=b;\n\t\t++prev;\n\t\tb=*prev;\n\t}\n}\ngenerator<int> drop_n(const function<bool(int,int)> &check,int n,const generator<int> &_prev){\n\tauto prev=_prev.begin();\n\tint i=0;\n\tfor(;;){\n\t\ti++;\n\t\tint a=*prev;\n\t\tif(!check(i,n))co_yield a;\n\t\t++prev;\n\t}\n}\nbool is_sq(int n){\n\tint x=(int)sqrt(n);\n\treturn x*x==n;\n}\nbool is_cb(int n){\n\tint x=(int)cbrt(n);\n\treturn x*x*x==n;\n}\nbool is_multiple(int i,int n){return i%n==0;}\nbool is_le(int i,int n){return i<=n;}\n\nint main(){\n\tmap<char,function<generator<int>(const generator<int>&)>> f={\n\t\t{'S',[&](auto &e){return drop_next(&is_sq,e);}},\n\t\t{'s',[&](auto &e){return drop_prev(&is_sq,e);}},\n\t\t{'C',[&](auto &e){return drop_next(&is_cb,e);}},\n\t\t{'c',[&](auto &e){return drop_prev(&is_cb,e);}},\n\t\t{'h',[&](auto &e){return drop_n(&is_le,100,e);}},\n\t};\n\tfor(int i=2;i<10;i++){\n\t\tf[(char)('0'+i)] = [&](auto &e){return drop_n(&is_multiple,i,e);};\n\t}\n\tstring line;\n\tfor(;getline(cin,line);){\n\t\tbool first=true;\n\t\t//cS => f['S'](f['c'](generate()))\n\t\t//auto z=reduce!((s,e)=>f[e](s))(generate(),line);\n\n\t\tauto z=generate();\n\t\tfor(char e:line)z=f[e](z);\n\t\tauto it=z.begin();\n\t\tfor(int i=0;i<10;i++){\n\t\t\tint n=*it;\n\t\t\t++it;\n\t\t\tif(!first)putchar(',');\n\t\t\tfirst=false;\n\t\t\tprintf(\"%d\",n);\n\t\t}\n\t\tputs(\"\");\n\t\tfflush(stdout);\n\t}\n}\n```\n", "tags": ["Perl", "yhpg", "C++", "\u3069\u3046\u66f8\u304f"]}