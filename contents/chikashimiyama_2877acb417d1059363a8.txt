{"context": " More than 1 year has passed since last update.C++11\u306eshared pointer\u306e\u632f\u308b\u821e\u3044\u3092\u8abf\u3079\u308b\u30b3\u30fc\u30c9\u3002\n\uff12\u3064\u306e\u30d9\u30af\u30bf\u30fc\u306b\u4ee3\u5165\u3057\u3066\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u30ab\u30a6\u30f3\u30c8\u3092\u51fa\u529b\u3059\u308b\u3001\n#include <iostream>\n#include <memory>\n#include <vector>\n\nusing namespace std;\n\nclass X{\n    int x;\npublic:\n    X(int x):x(x){\n        cout << \"constructed\" << endl;\n    };\n    ~X(){\n        cout << x << \" destructed\" << endl;\n    }\n};\n\nvector< shared_ptr<X>> globalVect;\n\n\nvoid add(shared_ptr<X> &x){\n    cout << \"passed to func\" << endl;\n    cout << \"count \" << x.use_count() << endl; // 1\n\n    vector< shared_ptr<X>> localVect1;\n\n    localVect1.push_back(x);\n    cout << \"copy to local vector\" << endl;\n    cout << \"count \" << x.use_count() << endl; //2\n\n    globalVect.push_back(x);\n    cout << \"copy to global vector\" << endl;\n    cout << \"count \" << x.use_count() << endl; // 3\n\n}\n\nint main(int argc, const char * argv[]) {\n    auto x = shared_ptr<X>(new X(10));\n    cout << \"shared point created\" << endl;\n    cout << \"count \" << x.use_count() << endl; // 1\n    add(x);\n\n    cout << \"return to main\" << endl;\n    cout << \"count \" << x.use_count() << endl; // 2\n\n    globalVect.erase(globalVect.begin(), globalVect.end());\n    cout << \"deleted from glibal vector\" << endl;\n    cout << \"count \" << x.use_count() << endl; // 1\n\n    x.reset();\n    cout << \"manually realeased\" << endl;\n    cout << \"count \" << x.use_count() << endl; // 1\n\n    return 0;\n}\n\nC++11\u306eshared pointer\u306e\u632f\u308b\u821e\u3044\u3092\u8abf\u3079\u308b\u30b3\u30fc\u30c9\u3002\n\uff12\u3064\u306e\u30d9\u30af\u30bf\u30fc\u306b\u4ee3\u5165\u3057\u3066\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u30ab\u30a6\u30f3\u30c8\u3092\u51fa\u529b\u3059\u308b\u3001\n\n```\n#include <iostream>\n#include <memory>\n#include <vector>\n\nusing namespace std;\n\nclass X{\n    int x;\npublic:\n    X(int x):x(x){\n        cout << \"constructed\" << endl;\n    };\n    ~X(){\n        cout << x << \" destructed\" << endl;\n    }\n};\n\nvector< shared_ptr<X>> globalVect;\n\n\nvoid add(shared_ptr<X> &x){\n    cout << \"passed to func\" << endl;\n    cout << \"count \" << x.use_count() << endl; // 1\n    \n    vector< shared_ptr<X>> localVect1;\n\n    localVect1.push_back(x);\n    cout << \"copy to local vector\" << endl;\n    cout << \"count \" << x.use_count() << endl; //2\n    \n    globalVect.push_back(x);\n    cout << \"copy to global vector\" << endl;\n    cout << \"count \" << x.use_count() << endl; // 3\n\n}\n\nint main(int argc, const char * argv[]) {\n    auto x = shared_ptr<X>(new X(10));\n    cout << \"shared point created\" << endl;\n    cout << \"count \" << x.use_count() << endl; // 1\n    add(x);\n    \n    cout << \"return to main\" << endl;\n    cout << \"count \" << x.use_count() << endl; // 2\n    \n    globalVect.erase(globalVect.begin(), globalVect.end());\n    cout << \"deleted from glibal vector\" << endl;\n    cout << \"count \" << x.use_count() << endl; // 1\n    \n    x.reset();\n    cout << \"manually realeased\" << endl;\n    cout << \"count \" << x.use_count() << endl; // 1\n\n    return 0;\n}\n```\n", "tags": ["C++11", "template", "SFINAE"]}