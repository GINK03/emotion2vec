{"context": "\n\n\u6982\u8981\npicojson \u306e value, array ([ value1, value2, .. ]), object ({ \"key1\": value1, .. }) \u306e\u751f\u6210\u304c\u983b\u51fa\u3059\u308b\u5834\u5408\u3001\u751f\u6210\u5143\u306e\u578b\u306b\u3088\u3063\u3066\u306f value, array, object \u3092\u751f\u6210\u3059\u308b\u524d\u306b\u4e00\u624b\u9593\u5fc5\u8981\u3068\u306a\u308a\u9762\u5012\u306a\u4e8b\u304c\u307e\u307e\u3042\u308b\u3002\n\u305d\u3053\u3067\u3001\u4eca\u56de\u306f picojson \u306e value, array, object \u306e\u751f\u6210\u306b\u3064\u3044\u3066\u7528\u610f\u3057\u3066\u304a\u304f\u3068\u4e00\u822c\u306b\u4fbf\u5229\u306a\u30d8\u30eb\u30d1\u30fc\u306e\u5b9f\u88c5\u4f8b\u3092\u7d39\u4ecb\u3057\u305f\u3044\u3002\n\n\u5b9f\u88c5\u4f8b\n\n\u524d\u7f6e\u304d\n\n\u4eca\u56de\u7d39\u4ecb\u3059\u308b\u5b9f\u88c5\u4f8b\u306f github - usagi/usagi - include/usagi/json/picojson \u306b\u5b9f\u88c5\u4f8b\u5168\u4f53\u304c\u4f7f\u7528\u53ef\u80fd\u306a\u72b6\u614b\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u57fa\u672c\u7684\u306a\u578b\u306b\u3064\u3044\u3066\u4ee5\u4e0b\u306e\u30a8\u30a4\u30ea\u30a2\u30b9\u304c \"type.hxx\" \u306b\u3088\u308a\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059:\n#pragma once\n\n#include <picojson.h>\n#include <string>\n\nnamespace usagi::json::picojson\n{\n  using object_type = ::picojson::object;\n  using array_type  = ::picojson::array;\n  using value_type  = ::picojson::value;\n  using null_type   = ::picojson::null;\n  using number_type = double;\n  using string_type = std::string;\n}\n\n\nmake_value\nmake_value( x ) \u306b\u3088\u308a\u304a\u304a\u3088\u305dJSON\u306e\u5024\u3068\u3057\u3066\u4e00\u822c\u306b\u653e\u308a\u8fbc\u3080 number, string, array, object, null \u3078\u53ef\u63db\u306a\u578b\u3092\u60f3\u5b9a\u3057\u305f picojson::value \u3092\u751f\u6210\u3059\u308b\u30d8\u30eb\u30d1\u30fc\u306e\u5b9f\u88c5\u4f8b\u3067\u3059\u3002\n\nhttps://github.com/usagi/usagi/blob/master/include/usagi/json/picojson/make_value.hxx\n\n/// @file\n/// @brief \u4efb\u610f\u306e\u4f55\u304b\u304b\u3089 value_type \u3092\"\u751f\u6210\"\u3059\u308b make_value \u3055\u3093\u7fa4\n\n#pragma once\n\n#include \"type.hxx\"\n\nnamespace usagi::json::picojson\n{\n  static inline auto make_value(                       ) -> value_type { return value_type(); }\n  static inline auto make_value( const null_type       ) -> value_type { return make_value(); }\n  static inline auto make_value( const value_type&  in ) -> value_type { return value_type( in ); }\n  static inline auto make_value( value_type&&       in ) -> value_type { return std::move( in ); }\n  static inline auto make_value( const array_type&  in ) -> value_type { return value_type( in ); }\n  static inline auto make_value( array_type&        in ) -> value_type { return value_type( std::move( in ) ); }\n  static inline auto make_value( const object_type& in ) -> value_type { return value_type( in ); }\n  static inline auto make_value( object_type&&      in ) -> value_type { return value_type( std::move( in ) ); }\n  static inline auto make_value( const char*        in ) -> value_type { return value_type( in ); }\n  static inline auto make_value( const std::string& in ) -> value_type { return value_type( in ); }\n  static inline auto make_value( std::string&&      in ) -> value_type { return value_type( std::move( in ) ); }\n  static inline auto make_value( const bool         in ) -> value_type { return value_type( in ); }\n\n  template < typename T >\n  static inline auto make_value\n  ( const T v\n  ) -> value_type\n  { return value_type( static_cast< double >( v ) ); }\n}\n\nNote: null, string, value, array, object \u4ee5\u5916\u306e\u578b\u3092\u653e\u308a\u6295\u3052\u308b\u3068 number \uff08\u2243 double\uff09\u3068\u3057\u3066\u6271\u3044\u307e\u3059\u3002\u3042\u3089\u3086\u308b\u578b\u306b\u3064\u3044\u3066\u53b3\u5bc6\u306b\u5b9a\u7fa9\u3092\u66f8\u304f\u5fc5\u8981\u306e\u7121\u3044\u4e00\u822c\u7684\u306a\u7528\u9014\u5411\u3051\u306b\u4fbf\u5229\u826f\u304f\u6271\u3044\u304c\u7c21\u5358\u3067\u3059\u3002\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u4e38\u3081\u8aa4\u5dee\u3084\u5206\u89e3\u80fd\u304c\u554f\u984c\u306b\u306a\u308b\u6570\u5024\u3092\u653e\u308a\u8fbc\u307f\u305f\u3044\u5834\u5408\u306f long double x; make_value( std::to_string( x ) ) \u3042\u308b\u3044\u306f Boost.Multiprecision \u3092\u4f7f\u3044\u6587\u5b57\u5217\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba \u3059\u308c\u3070\u6271\u3044\u304c\u7c21\u5358\u3067\u3059\u3002\n\nmake_array, make_array_value\n\u6b21\u306e\u3088\u3046\u306a\u4f7f\u7528\u6cd5:\nauto a = make_array( 1.23f, 1.23, 123, \"hoge\", \"fuga\"s, some_value, some_array, some_object, ... );\nauto v = make_array_value( ... );\n\n\u306b\u3088\u308a\u3001 array \u3084 array \u5165\u308a\u306e value \u3092\u624b\u8efd\u306b\u751f\u6210\u3059\u308b\u30d8\u30eb\u30d1\u30fc\u306e\u5b9f\u88c5\u4f8b\u3067\u3059\u3002\n\nhttps://github.com/usagi/usagi/blob/master/include/usagi/json/picojson/make_array.hxx\n\n#pragma once\n\n#include \"make_value.hxx\"\n\nnamespace usagi::json::picojson\n{\n  namespace detail\n  {\n    template < typename T >\n    static inline decltype( auto ) emplace_back\n    ( array_type& a, const T& v )\n    {\n      a.emplace_back( make_value( v ) );\n      return a;\n    }\n\n    static inline decltype( auto ) make_array_internal( array_type& a )\n    {\n      return a;\n    }\n\n    template < typename HEAD, typename ... TAIL >\n    static inline decltype( auto ) make_array_internal\n    ( array_type& a, const HEAD& v, const TAIL& ... vs )\n    {\n      return make_array_internal( emplace_back( a, v ), vs ... );\n    }\n  }\n\n  template < typename ... TS >\n  static inline auto make_array\n  ( const TS& ... vs )\n  {\n    array_type a;\n    return detail::make_array_internal( a, vs ... );\n  }\n\n  template < typename ... TS >\n  static inline auto make_array_value\n  ( const TS& ... vs )\n  {\n    return value_type( make_array( vs ... ) );\n  }\n}\n\n\nmake_object, make_object_value\n\u6b21\u306e\u3088\u3046\u306a\u4f7f\u7528\u6cd5:\nauto o =\n  make_object\n  ( \"f\", 1.23f\n  , \"d\", 1.23\n  , \"i\", 123\n  , \"c\", \"hoge\"\n  , \"s\", \"fuga\"s\n  , \"v\", some_value\n  , \"a\", some_array\n  , \"o\", some_object\n  , \"some_key\", something\n  , ...\n  );\nauto v = make_object_value( ... );\n\n\u306b\u3088\u308a\u3001 array \u3084 array \u5165\u308a\u306e value \u3092\u624b\u8efd\u306b\u751f\u6210\u3059\u308b\u30d8\u30eb\u30d1\u30fc\u306e\u5b9f\u88c5\u4f8b\u3067\u3059\u3002\n\nhttps://github.com/usagi/usagi/blob/master/include/usagi/json/picojson/make_object.hxx\n\n#pragma once\n\n#include \"make_value.hxx\"\n\nnamespace usagi::json::picojson\n{\n  namespace detail\n  {\n    template < typename T >\n    static inline decltype( auto ) emplace\n    ( object_type& o, const std::string& k, const T& v )\n    {\n      o.emplace( k, make_value( v ) );\n      return o;\n    }\n\n    static inline decltype( auto ) make_object_internal( object_type& o )\n    {\n      return o;\n    }\n\n    template < typename HEAD, typename ... TAIL >\n    static inline decltype( auto ) make_object_internal\n    ( object_type& o, const std::string& k, const HEAD& v, const TAIL& ... vs )\n    {\n      return make_object_internal( emplace( o, k, v ), vs ... );\n    }\n  }\n\n  template < typename ... TS >\n  static inline auto make_object( const TS& ... vs )\n  {\n    object_type o;\n    return detail::make_object_internal( o, vs ... );\n  }\n\n  template < typename ... TS >\n  static inline auto make_object_value\n  ( const TS& ... vs )\n  {\n    return value_type( make_object( vs ... ) );\n  }\n}\n\n\n\u4f7f\u7528\u4f8b\n#include <usagi/json/picojson/make_array.hxx>\n#include <usagi/json/picojson/make_object.hxx>\n\n#include <iostream>\n\nauto main() -> int\n{\n  using namespace std;\n  using namespace usagi::json::picojson;\n\n  std::cout\n    << \"f: \" << make_value( 1.23f ) << '\\n'\n    << \"d: \" << make_value( 1.23 ) << '\\n'\n    << \"i: \" << make_value( 123 ) << '\\n'\n    << \"n: \" << make_value( ) << '\\n'\n    << \"b: \" << make_value( true ) << '\\n'\n    << \"s: \" << make_value( string( \"hoge\" ) ) << '\\n'\n    << \"c: \" << make_value( \"hoge\" ) << '\\n'\n    << \"v: \" << make_value( make_value( \"hoge\" ) ) << '\\n'\n    << \"a: \" << make_array_value( \"hoge\", string( \"fuga\" ), 1.23f, 1.23, 123, null_type(), make_array( 1,2,3 ) ) << '\\n'\n    << \"o: \" << make_object_value( \"f\", 1.23f, \"d\", 1.23, \"i\", 123, \"n\", null_type(), \"a\", make_array( 1,2,3 ), \"o\", make_object( \"a\", 1 ) ) << '\\n'\n    ;\n}\n\n\n\u5b9f\u884c\u7d50\u679c\nf: 1.2300000190734863\nd: 1.23\ni: 123\nn: null\nb: true\ns: \"hoge\"\nc: \"hoge\"\nv: \"hoge\"\na: [\"hoge\",\"fuga\",1.2300000190734863,1.23,123,null,[1,2,3]]\no: {\"a\":[1,2,3],\"d\":1.23,\"f\":1.2300000190734863,\"i\":123,\"n\":null,\"o\":{\"a\":1}}\n\n# \u6982\u8981\n\n[picojson](https://github.com/kazuho/picojson/) \u306e value, array (`[ value1, value2, .. ]`), object (`{ \"key1\": value1, .. }`) \u306e\u751f\u6210\u304c\u983b\u51fa\u3059\u308b\u5834\u5408\u3001\u751f\u6210\u5143\u306e\u578b\u306b\u3088\u3063\u3066\u306f value, array, object \u3092\u751f\u6210\u3059\u308b\u524d\u306b\u4e00\u624b\u9593\u5fc5\u8981\u3068\u306a\u308a\u9762\u5012\u306a\u4e8b\u304c\u307e\u307e\u3042\u308b\u3002\n\n\u305d\u3053\u3067\u3001\u4eca\u56de\u306f picojson \u306e value, array, object \u306e\u751f\u6210\u306b\u3064\u3044\u3066\u7528\u610f\u3057\u3066\u304a\u304f\u3068\u4e00\u822c\u306b\u4fbf\u5229\u306a\u30d8\u30eb\u30d1\u30fc\u306e\u5b9f\u88c5\u4f8b\u3092\u7d39\u4ecb\u3057\u305f\u3044\u3002\n\n# \u5b9f\u88c5\u4f8b\n\n## \u524d\u7f6e\u304d\n\n- \u4eca\u56de\u7d39\u4ecb\u3059\u308b\u5b9f\u88c5\u4f8b\u306f [github - usagi/usagi - include/usagi/json/picojson](https://github.com/usagi/usagi/tree/master/include/usagi/json/picojson) \u306b\u5b9f\u88c5\u4f8b\u5168\u4f53\u304c\u4f7f\u7528\u53ef\u80fd\u306a\u72b6\u614b\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u57fa\u672c\u7684\u306a\u578b\u306b\u3064\u3044\u3066\u4ee5\u4e0b\u306e\u30a8\u30a4\u30ea\u30a2\u30b9\u304c \"type.hxx\" \u306b\u3088\u308a\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059:\n\n```c++\n#pragma once\n\n#include <picojson.h>\n#include <string>\n\nnamespace usagi::json::picojson\n{\n  using object_type = ::picojson::object;\n  using array_type  = ::picojson::array;\n  using value_type  = ::picojson::value;\n  using null_type   = ::picojson::null;\n  using number_type = double;\n  using string_type = std::string;\n}\n```\n\n## make_value\n\n`make_value( x )` \u306b\u3088\u308a\u304a\u304a\u3088\u305dJSON\u306e\u5024\u3068\u3057\u3066\u4e00\u822c\u306b\u653e\u308a\u8fbc\u3080 number, string, array, object, null \u3078\u53ef\u63db\u306a\u578b\u3092\u60f3\u5b9a\u3057\u305f `picojson::value` \u3092\u751f\u6210\u3059\u308b\u30d8\u30eb\u30d1\u30fc\u306e\u5b9f\u88c5\u4f8b\u3067\u3059\u3002\n\n- https://github.com/usagi/usagi/blob/master/include/usagi/json/picojson/make_value.hxx\n\n```c++\n/// @file\n/// @brief \u4efb\u610f\u306e\u4f55\u304b\u304b\u3089 value_type \u3092\"\u751f\u6210\"\u3059\u308b make_value \u3055\u3093\u7fa4\n\n#pragma once\n\n#include \"type.hxx\"\n\nnamespace usagi::json::picojson\n{\n  static inline auto make_value(                       ) -> value_type { return value_type(); }\n  static inline auto make_value( const null_type       ) -> value_type { return make_value(); }\n  static inline auto make_value( const value_type&  in ) -> value_type { return value_type( in ); }\n  static inline auto make_value( value_type&&       in ) -> value_type { return std::move( in ); }\n  static inline auto make_value( const array_type&  in ) -> value_type { return value_type( in ); }\n  static inline auto make_value( array_type&        in ) -> value_type { return value_type( std::move( in ) ); }\n  static inline auto make_value( const object_type& in ) -> value_type { return value_type( in ); }\n  static inline auto make_value( object_type&&      in ) -> value_type { return value_type( std::move( in ) ); }\n  static inline auto make_value( const char*        in ) -> value_type { return value_type( in ); }\n  static inline auto make_value( const std::string& in ) -> value_type { return value_type( in ); }\n  static inline auto make_value( std::string&&      in ) -> value_type { return value_type( std::move( in ) ); }\n  static inline auto make_value( const bool         in ) -> value_type { return value_type( in ); }\n  \n  template < typename T >\n  static inline auto make_value\n  ( const T v\n  ) -> value_type\n  { return value_type( static_cast< double >( v ) ); }\n}\n```\n\nNote: null, string, value, array, object \u4ee5\u5916\u306e\u578b\u3092\u653e\u308a\u6295\u3052\u308b\u3068 number \uff08\u2243 double\uff09\u3068\u3057\u3066\u6271\u3044\u307e\u3059\u3002\u3042\u3089\u3086\u308b\u578b\u306b\u3064\u3044\u3066\u53b3\u5bc6\u306b\u5b9a\u7fa9\u3092\u66f8\u304f\u5fc5\u8981\u306e\u7121\u3044\u4e00\u822c\u7684\u306a\u7528\u9014\u5411\u3051\u306b\u4fbf\u5229\u826f\u304f\u6271\u3044\u304c\u7c21\u5358\u3067\u3059\u3002\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u4e38\u3081\u8aa4\u5dee\u3084\u5206\u89e3\u80fd\u304c\u554f\u984c\u306b\u306a\u308b\u6570\u5024\u3092\u653e\u308a\u8fbc\u307f\u305f\u3044\u5834\u5408\u306f `long double x; make_value( std::to_string( x ) )` \u3042\u308b\u3044\u306f [Boost.Multiprecision \u3092\u4f7f\u3044\u6587\u5b57\u5217\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba](https://boostjp.github.io/tips/multiprec-float.html) \u3059\u308c\u3070\u6271\u3044\u304c\u7c21\u5358\u3067\u3059\u3002\n\n## make_array, make_array_value\n\n\u6b21\u306e\u3088\u3046\u306a\u4f7f\u7528\u6cd5:\n\n```c++\nauto a = make_array( 1.23f, 1.23, 123, \"hoge\", \"fuga\"s, some_value, some_array, some_object, ... );\nauto v = make_array_value( ... );\n```\n\n\u306b\u3088\u308a\u3001 array \u3084 array \u5165\u308a\u306e value \u3092\u624b\u8efd\u306b\u751f\u6210\u3059\u308b\u30d8\u30eb\u30d1\u30fc\u306e\u5b9f\u88c5\u4f8b\u3067\u3059\u3002\n\n- https://github.com/usagi/usagi/blob/master/include/usagi/json/picojson/make_array.hxx\n\n```c++\n#pragma once\n\n#include \"make_value.hxx\"\n\nnamespace usagi::json::picojson\n{\n  namespace detail\n  {\n    template < typename T >\n    static inline decltype( auto ) emplace_back\n    ( array_type& a, const T& v )\n    {\n      a.emplace_back( make_value( v ) );\n      return a;\n    }\n    \n    static inline decltype( auto ) make_array_internal( array_type& a )\n    {\n      return a;\n    }\n    \n    template < typename HEAD, typename ... TAIL >\n    static inline decltype( auto ) make_array_internal\n    ( array_type& a, const HEAD& v, const TAIL& ... vs )\n    {\n      return make_array_internal( emplace_back( a, v ), vs ... );\n    }\n  }\n  \n  template < typename ... TS >\n  static inline auto make_array\n  ( const TS& ... vs )\n  {\n    array_type a;\n    return detail::make_array_internal( a, vs ... );\n  }\n  \n  template < typename ... TS >\n  static inline auto make_array_value\n  ( const TS& ... vs )\n  {\n    return value_type( make_array( vs ... ) );\n  }\n}\n```\n\n## make_object, make_object_value\n\n\u6b21\u306e\u3088\u3046\u306a\u4f7f\u7528\u6cd5:\n\n```c++\nauto o =\n  make_object\n  ( \"f\", 1.23f\n  , \"d\", 1.23\n  , \"i\", 123\n  , \"c\", \"hoge\"\n  , \"s\", \"fuga\"s\n  , \"v\", some_value\n  , \"a\", some_array\n  , \"o\", some_object\n  , \"some_key\", something\n  , ...\n  );\nauto v = make_object_value( ... );\n```\n\n\u306b\u3088\u308a\u3001 array \u3084 array \u5165\u308a\u306e value \u3092\u624b\u8efd\u306b\u751f\u6210\u3059\u308b\u30d8\u30eb\u30d1\u30fc\u306e\u5b9f\u88c5\u4f8b\u3067\u3059\u3002\n\n- https://github.com/usagi/usagi/blob/master/include/usagi/json/picojson/make_object.hxx\n\n```c++\n#pragma once\n\n#include \"make_value.hxx\"\n\nnamespace usagi::json::picojson\n{\n  namespace detail\n  {\n    template < typename T >\n    static inline decltype( auto ) emplace\n    ( object_type& o, const std::string& k, const T& v )\n    {\n      o.emplace( k, make_value( v ) );\n      return o;\n    }\n    \n    static inline decltype( auto ) make_object_internal( object_type& o )\n    {\n      return o;\n    }\n    \n    template < typename HEAD, typename ... TAIL >\n    static inline decltype( auto ) make_object_internal\n    ( object_type& o, const std::string& k, const HEAD& v, const TAIL& ... vs )\n    {\n      return make_object_internal( emplace( o, k, v ), vs ... );\n    }\n  }\n  \n  template < typename ... TS >\n  static inline auto make_object( const TS& ... vs )\n  {\n    object_type o;\n    return detail::make_object_internal( o, vs ... );\n  }\n  \n  template < typename ... TS >\n  static inline auto make_object_value\n  ( const TS& ... vs )\n  {\n    return value_type( make_object( vs ... ) );\n  }\n}\n```\n\n# \u4f7f\u7528\u4f8b\n\n```c++\n#include <usagi/json/picojson/make_array.hxx>\n#include <usagi/json/picojson/make_object.hxx>\n\n#include <iostream>\n\nauto main() -> int\n{\n  using namespace std;\n  using namespace usagi::json::picojson;\n  \n  std::cout\n    << \"f: \" << make_value( 1.23f ) << '\\n'\n    << \"d: \" << make_value( 1.23 ) << '\\n'\n    << \"i: \" << make_value( 123 ) << '\\n'\n    << \"n: \" << make_value( ) << '\\n'\n    << \"b: \" << make_value( true ) << '\\n'\n    << \"s: \" << make_value( string( \"hoge\" ) ) << '\\n'\n    << \"c: \" << make_value( \"hoge\" ) << '\\n'\n    << \"v: \" << make_value( make_value( \"hoge\" ) ) << '\\n'\n    << \"a: \" << make_array_value( \"hoge\", string( \"fuga\" ), 1.23f, 1.23, 123, null_type(), make_array( 1,2,3 ) ) << '\\n'\n    << \"o: \" << make_object_value( \"f\", 1.23f, \"d\", 1.23, \"i\", 123, \"n\", null_type(), \"a\", make_array( 1,2,3 ), \"o\", make_object( \"a\", 1 ) ) << '\\n'\n    ;\n}\n```\n\n## \u5b9f\u884c\u7d50\u679c\n\n```json\nf: 1.2300000190734863\nd: 1.23\ni: 123\nn: null\nb: true\ns: \"hoge\"\nc: \"hoge\"\nv: \"hoge\"\na: [\"hoge\",\"fuga\",1.2300000190734863,1.23,123,null,[1,2,3]]\no: {\"a\":[1,2,3],\"d\":1.23,\"f\":1.2300000190734863,\"i\":123,\"n\":null,\"o\":{\"a\":1}}\n```\n\n", "tags": ["C++", "picojson", "helper", "syntax-sugar", "library"]}