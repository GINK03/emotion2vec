{"context": "\n\n\u30b5\u30f3\u30d7\u30eb\n\u3053\u3046\u3044\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\n  NSArray *a = @[@(1),@(2),@(3), @(4)];\n\n  CGPoint point = a.CGPoint; // = (CGPoint){1,2}\n  CGVector vector = a.CGVector // = (CGVector){1,2}\n  CGSize size = a.CGSize; // = (CGSize){1,2}\n  CGRect rect = a.CGRect; // = (CGRect){1,2,3,4}\n  CGAffineTransform Transform = a.CGAffineTransform // = (CGAffineTransform){1, 2, 3, 4, 0, 0}; <- \u914d\u5217\u6570\u304c\u8db3\u308a\u306a\u3044\u90e8\u5206\u306f0\u306b\u306a\u308b\n\n  UIEdgeInsets edge =  a.UIEdgeInsets // = (UIEdgeInsets){1,2,3,4};\n  UIOffset offset = a.UIOffset // = (UIOffset){1, 2};\n\n\u8272\u3005\u5ea7\u6a19\u3092\u8a08\u7b97\u3057\u7d42\u308f\u3063\u305f\u3042\u3068\u306bCGPointMake\u3068\u304b(CGPoint)\u3068\u304b\u3057\u306a\u304f\u3066\u3044\u3044\u306e\u3067\u3061\u3087\u3063\u3068\u3060\u3051\u697d\u3067\u3059\n\n\u30bd\u30fc\u30b9\n\n\u30d8\u30c3\u30c0\n\nNSArray+Geometry.h\n#import <Foundation/Foundation.h>\n\n@interface NSArray (Geometry)\n-(CGPoint)CGPoint;\n-(CGVector)CGVector;\n-(CGSize)CGSize;\n-(CGRect)CGRect;\n-(CGAffineTransform)CGAffineTransform;\n-(UIEdgeInsets)UIEdgeInsets;\n-(UIOffset)UIOffset;\n@end\n\n\n\n\u5b9f\u88c5\n\nNSArray+Geometry.m\n#import \"NSArray+Geometry.h\"\n\n@implementation NSArray (Geometry)\n\n-(CGPoint)CGPoint{\n  CGFloat x = self[0] ? ((NSNumber*)self[0]).floatValue : 0;\n  CGFloat y = self[1] ? ((NSNumber*)self[1]).floatValue : 0;\n  return (CGPoint){x,y};\n}\n\n-(CGVector)CGVector{\n  CGFloat x = self[0] ? ((NSNumber*)self[0]).floatValue : 0;\n  CGFloat y = self[1] ? ((NSNumber*)self[1]).floatValue : 0;\n  return (CGVector){x,y};\n}\n\n\n-(CGSize)CGSize{\n  CGFloat w = self[0] ? ((NSNumber*)self[0]).floatValue : 0;\n  CGFloat h = self[1] ? ((NSNumber*)self[1]).floatValue : 0;\n  return (CGSize){w,h};\n}\n\n-(CGRect)CGRect{\n  CGFloat x = self[0] ? ((NSNumber*)self[0]).floatValue : 0;\n  CGFloat y = self[1] ? ((NSNumber*)self[1]).floatValue : 0;\n  CGFloat w = self[2] ? ((NSNumber*)self[2]).floatValue : 0;\n  CGFloat h = self[3] ? ((NSNumber*)self[3]).floatValue : 0;\n  return (CGRect){x, y , w, h};\n}\n\n-(CGAffineTransform)CGAffineTransform{\n  CGFloat a = self[0] ? ((NSNumber*)self[0]).floatValue : 0;\n  CGFloat b = self[1] ? ((NSNumber*)self[1]).floatValue : 0;\n  CGFloat c = self[2] ? ((NSNumber*)self[2]).floatValue : 0;\n  CGFloat d = self[3] ? ((NSNumber*)self[3]).floatValue : 0;\n  CGFloat dx = self[4] ? ((NSNumber*)self[4]).floatValue : 0;\n  CGFloat dy = self[5] ? ((NSNumber*)self[5]).floatValue : 0;\n  return (CGAffineTransform){a, b, c, d, dx, dy};\n\n}\n\n-(UIEdgeInsets)UIEdgeInsets{\n  CGFloat top = self[0] ? ((NSNumber*)self[0]).floatValue : 0;\n  CGFloat left = self[1] ? ((NSNumber*)self[1]).floatValue : 0;\n  CGFloat bottom = self[2] ? ((NSNumber*)self[2]).floatValue : 0;\n  CGFloat right = self[3] ? ((NSNumber*)self[3]).floatValue : 0;\n  return (UIEdgeInsets){top, left, bottom, right};\n}\n\n-(UIOffset)UIOffset{\n  CGFloat horizontal = self[0] ? ((NSNumber*)self[0]).floatValue : 0;\n  CGFloat vertical = self[1] ? ((NSNumber*)self[1]).floatValue : 0;\n  return (UIOffset){horizontal, vertical};\n}\n@end\n\n\n\n\u304a\u308f\u308a\n\u3059\u3063\u3054\u3044\u304f\u3060\u3089\u306a\u3044\u6c17\u3082\u3059\u308b\u304c\u3061\u3087\u304f\u3061\u3087\u304f\u4f7f\u3046\u304b\u3089\u7f6e\u3044\u3068\u304d\u307e\u3057\u305f\n#\u30b5\u30f3\u30d7\u30eb\n\n\u3053\u3046\u3044\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\n\n```objc\n  NSArray *a = @[@(1),@(2),@(3), @(4)];\n\n  CGPoint point = a.CGPoint; // = (CGPoint){1,2}\n  CGVector vector = a.CGVector // = (CGVector){1,2}\n  CGSize size = a.CGSize; // = (CGSize){1,2}\n  CGRect rect = a.CGRect; // = (CGRect){1,2,3,4}\n  CGAffineTransform Transform = a.CGAffineTransform // = (CGAffineTransform){1, 2, 3, 4, 0, 0}; <- \u914d\u5217\u6570\u304c\u8db3\u308a\u306a\u3044\u90e8\u5206\u306f0\u306b\u306a\u308b\n\n  UIEdgeInsets edge =  a.UIEdgeInsets // = (UIEdgeInsets){1,2,3,4};\n  UIOffset offset = a.UIOffset // = (UIOffset){1, 2};\n```\n\n\u8272\u3005\u5ea7\u6a19\u3092\u8a08\u7b97\u3057\u7d42\u308f\u3063\u305f\u3042\u3068\u306bCGPointMake\u3068\u304b(CGPoint)\u3068\u304b\u3057\u306a\u304f\u3066\u3044\u3044\u306e\u3067\u3061\u3087\u3063\u3068\u3060\u3051\u697d\u3067\u3059\n\n#\u30bd\u30fc\u30b9\n\n##\u30d8\u30c3\u30c0\n\n```objc:NSArray+Geometry.h\n#import <Foundation/Foundation.h>\n\n@interface NSArray (Geometry)\n-(CGPoint)CGPoint;\n-(CGVector)CGVector;\n-(CGSize)CGSize;\n-(CGRect)CGRect;\n-(CGAffineTransform)CGAffineTransform;\n-(UIEdgeInsets)UIEdgeInsets;\n-(UIOffset)UIOffset;\n@end\n```\n\n##\u5b9f\u88c5\n\n```objc:NSArray+Geometry.m\n#import \"NSArray+Geometry.h\"\n\n@implementation NSArray (Geometry)\n\n-(CGPoint)CGPoint{\n  CGFloat x = self[0] ? ((NSNumber*)self[0]).floatValue : 0;\n  CGFloat y = self[1] ? ((NSNumber*)self[1]).floatValue : 0;\n  return (CGPoint){x,y};\n}\n\n-(CGVector)CGVector{\n  CGFloat x = self[0] ? ((NSNumber*)self[0]).floatValue : 0;\n  CGFloat y = self[1] ? ((NSNumber*)self[1]).floatValue : 0;\n  return (CGVector){x,y};\n}\n\n\n-(CGSize)CGSize{\n  CGFloat w = self[0] ? ((NSNumber*)self[0]).floatValue : 0;\n  CGFloat h = self[1] ? ((NSNumber*)self[1]).floatValue : 0;\n  return (CGSize){w,h};\n}\n\n-(CGRect)CGRect{\n  CGFloat x = self[0] ? ((NSNumber*)self[0]).floatValue : 0;\n  CGFloat y = self[1] ? ((NSNumber*)self[1]).floatValue : 0;\n  CGFloat w = self[2] ? ((NSNumber*)self[2]).floatValue : 0;\n  CGFloat h = self[3] ? ((NSNumber*)self[3]).floatValue : 0;\n  return (CGRect){x, y , w, h};\n}\n\n-(CGAffineTransform)CGAffineTransform{\n  CGFloat a = self[0] ? ((NSNumber*)self[0]).floatValue : 0;\n  CGFloat b = self[1] ? ((NSNumber*)self[1]).floatValue : 0;\n  CGFloat c = self[2] ? ((NSNumber*)self[2]).floatValue : 0;\n  CGFloat d = self[3] ? ((NSNumber*)self[3]).floatValue : 0;\n  CGFloat dx = self[4] ? ((NSNumber*)self[4]).floatValue : 0;\n  CGFloat dy = self[5] ? ((NSNumber*)self[5]).floatValue : 0;\n  return (CGAffineTransform){a, b, c, d, dx, dy};\n\n}\n\n-(UIEdgeInsets)UIEdgeInsets{\n  CGFloat top = self[0] ? ((NSNumber*)self[0]).floatValue : 0;\n  CGFloat left = self[1] ? ((NSNumber*)self[1]).floatValue : 0;\n  CGFloat bottom = self[2] ? ((NSNumber*)self[2]).floatValue : 0;\n  CGFloat right = self[3] ? ((NSNumber*)self[3]).floatValue : 0;\n  return (UIEdgeInsets){top, left, bottom, right};\n}\n\n-(UIOffset)UIOffset{\n  CGFloat horizontal = self[0] ? ((NSNumber*)self[0]).floatValue : 0;\n  CGFloat vertical = self[1] ? ((NSNumber*)self[1]).floatValue : 0;\n  return (UIOffset){horizontal, vertical};\n}\n@end\n```\n\n#\u304a\u308f\u308a\n\u3059\u3063\u3054\u3044\u304f\u3060\u3089\u306a\u3044\u6c17\u3082\u3059\u308b\u304c\u3061\u3087\u304f\u3061\u3087\u304f\u4f7f\u3046\u304b\u3089\u7f6e\u3044\u3068\u304d\u307e\u3057\u305f\n", "tags": ["Objective-C", "CoreGraphics", "iOS"]}