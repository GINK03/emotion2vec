{"context": "\n\n\u6982\u8981\nLinux\u3067\u4f7f\u308f\u308c\u308b\u30d0\u30a4\u30ca\u30ea\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306eELF\u306b\u3064\u3044\u3066\u3001\u7279\u306bexec\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u304b\u3089\u547c\u3070\u308c\u308b\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306e\u30ed\u30fc\u30c9\u306e\u51e6\u7406\u3092\u8abf\u3079\u305f\u3002\n\nELF\u306e\u69cb\u9020\n\u30d8\u30c3\u30c0\u304c\uff13\u3064\u3068\u3001\u305d\u308c\u3089\u3067\u30dd\u30a4\u30f3\u30c8\u3055\u308c\u308b\u30c7\u30fc\u30bf\u306b\u3088\u3063\u3066\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u3002\n\u30d5\u30e9\u30b0\u306e\u610f\u5473\u3068\u69cb\u9020\u4f53\u306e\u8868\u306fWikipedia\u306b\u307e\u3068\u307e\u3063\u3066\u3044\u308b\u3002\n\nFile header\nProgram header\nSection header\n\n\nFile header\n\u30d5\u30a1\u30a4\u30eb\u306e\u6700\u521d\u306b\u3042\u308a\u3001\u30d0\u30a4\u30ca\u30ea\u305d\u306e\u3082\u306e\u306e\u5c5e\u6027\u3068\u3001\u4ed6\u306e\u30d8\u30c3\u30c0\u60c5\u5831\u306e\u30c6\u30fc\u30d6\u30eb\u958b\u59cb\u4f4d\u7f6e\u306e\u30d5\u30a1\u30a4\u30eb\u30aa\u30d5\u30bb\u30c3\u30c8e_*hoff\u3001\u3068\u500b\u6570e_*hnum\u3092\u683c\u7d0d\u3057\u3066\u3044\u308b\u3002\njuntaki@dev ~> readelf -e (which ls)\nELF \u30d8\u30c3\u30c0:\n  \u30de\u30b8\u30c3\u30af:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00\n  \u30af\u30e9\u30b9:                            ELF64\n  \u30c7\u30fc\u30bf:                            2 \u306e\u88dc\u6570\u3001\u30ea\u30c8\u30eb\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\n  \u30d0\u30fc\u30b8\u30e7\u30f3:                        1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI \u30d0\u30fc\u30b8\u30e7\u30f3:                    0\n  \u578b:                                EXEC (\u5b9f\u884c\u53ef\u80fd\u30d5\u30a1\u30a4\u30eb)\n  \u30de\u30b7\u30f3:                            Advanced Micro Devices X86-64\n  \u30d0\u30fc\u30b8\u30e7\u30f3:                        0x1\n  \u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u30a2\u30c9\u30ec\u30b9:               0x4049a0\n  \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u958b\u59cb\u30d8\u30c3\u30c0:          64 (\u30d0\u30a4\u30c8)\n  \u30bb\u30af\u30b7\u30e7\u30f3\u30d8\u30c3\u30c0\u59cb\u70b9:          124728 (\u30d0\u30a4\u30c8)\n  \u30d5\u30e9\u30b0:                            0x0\n  \u3053\u306e\u30d8\u30c3\u30c0\u306e\u30b5\u30a4\u30ba:                64 (\u30d0\u30a4\u30c8)\n  \u30d7\u30ed\u30b0\u30e9\u30e0\u30d8\u30c3\u30c0\u30b5\u30a4\u30ba:            56 (\u30d0\u30a4\u30c8)\n  \u30d7\u30ed\u30b0\u30e9\u30e0\u30d8\u30c3\u30c0\u6570:                9\n  \u30bb\u30af\u30b7\u30e7\u30f3\u30d8\u30c3\u30c0:                  64 (\u30d0\u30a4\u30c8)\n  \u30bb\u30af\u30b7\u30e7\u30f3\u30d8\u30c3\u30c0\u30b5\u30a4\u30ba:            29\n  \u30bb\u30af\u30b7\u30e7\u30f3\u30d8\u30c3\u30c0\u6587\u5b57\u5217\u8868\u7d22\u5f15:      28\n\n\u69cb\u9020\u4f53\u306f\u3053\u3093\u306a\u611f\u3058\u3002\ntypedef struct elf64_hdr {\n  unsigned char e_ident[EI_NIDENT]; /* ELF \"magic number\" */\n  Elf64_Half e_type;\n  Elf64_Half e_machine;\n  Elf64_Word e_version;\n  Elf64_Addr e_entry;   /* Entry point virtual address */\n  Elf64_Off e_phoff;    /* Program header table file offset */\n  Elf64_Off e_shoff;    /* Section header table file offset */\n  Elf64_Word e_flags;\n  Elf64_Half e_ehsize;\n  Elf64_Half e_phentsize;\n  Elf64_Half e_phnum;\n  Elf64_Half e_shentsize;\n  Elf64_Half e_shnum;\n  Elf64_Half e_shstrndx;\n} Elf64_Ehdr;\n\n\nProgram header\nload_elf_phdrs()\u3067\u30dd\u30a4\u30f3\u30bf\u914d\u5217\u3068\u3057\u3066\u8aad\u307f\u8fbc\u307e\u308c\u308b\u3002\n\nload_elf_phdrs()\n  size = sizeof(struct elf_phdr) * elf_ex->e_phnum;\n  if (size > ELF_MIN_ALIGN)\n    goto out;\n\n  elf_phdata = kmalloc(size, GFP_KERNEL);\n  if (!elf_phdata)\n    goto out;\n\n  /* Read in the program headers */\n  retval = kernel_read(elf_file, elf_ex->e_phoff,\n           (char *)elf_phdata, size);\n\n\nProgram header\u306e\u69cb\u9020\u4f53\u3067\u3001\u30d5\u30a1\u30a4\u30eb\u5185\u3067\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u306fp_offset\u3001\u30d5\u30a1\u30a4\u30eb\u4e0a\u3067\u306e\u30b5\u30a4\u30ba\u306fp_filesz\u3067\u6307\u5b9a\u3057\u3066\u5404\u30d8\u30c3\u30c0\u304c\u6307\u3059\u5185\u5bb9\u3092\u8aad\u307f\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u30d5\u30a1\u30a4\u30eb\u4e0a\u3067\u306e\u30b5\u30a4\u30ba\u306f\u30e1\u30e2\u30ea\u4e0a\u3067\u306e\u30b5\u30a4\u30bap_memsz\u3088\u308a\u5c0f\u3055\u304f\u306a\u308a\u3046\u308b\uff08\u5dee\u5206\u306f\u30bc\u30ed\u57cb\u3081\u3055\u308c\u308b\uff09\n\u7279\u306b\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306e\u5834\u5408\u3001p_flags\u304cPT_LOAD\u306e\u3082\u306e\u304c\u30e1\u30e2\u30ea\u4e0a\u306b\u30ed\u30fc\u30c9\u3055\u308c\u308b\u3002\ntypedef struct elf64_phdr {\n  Elf64_Word p_type;\n  Elf64_Word p_flags;\n  Elf64_Off p_offset;   /* Segment file offset */\n  Elf64_Addr p_vaddr;   /* Segment virtual address */\n  Elf64_Addr p_paddr;   /* Segment physical address */\n  Elf64_Xword p_filesz;   /* Segment size in file */\n  Elf64_Xword p_memsz;    /* Segment size in memory */\n  Elf64_Xword p_align;    /* Segment alignment, file & memory */\n} Elf64_Phdr;\n\n\u30e1\u30e2\u30ea\u3078\u306ePT_LOAD\u30bf\u30a4\u30d7\u306e\u30ed\u30fc\u30c9\u306e\u95a2\u6570\u3067\u306f\u3001p_vaddr\u304b\u3089\u3001p_memsz\u5206\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u304c\u30de\u30c3\u30d7\u3055\u308c\u308b\u3002\n\nload_elf_binary()\n  /* Now we do a little grungy work by mmapping the ELF image into\n     the correct location in memory. */\n// elf_phdata\u306fProgram header\u306e\u914d\u5217\n  for(i = 0, elf_ppnt = elf_phdata;\n      i < loc->elf_ex.e_phnum; i++, elf_ppnt++) {\n\n// PT_LOAD\u306e\u307f\u5bfe\u8c61\n    if (elf_ppnt->p_type != PT_LOAD)\n      continue;\n...\n\n    if (unlikely (elf_brk > elf_bss)) {\n      unsigned long nbyte;\n\n      /* There was a PT_LOAD segment with p_memsz > p_filesz\n         before this one. Map anonymous pages, if needed,\n         and clear the area.  */\n\n// \u30d5\u30a1\u30a4\u30eb\u4e0a\u306e\u30b5\u30a4\u30ba\u3088\u308a\u3001\u5927\u304d\u3044\u30e1\u30e2\u30ea\u30b5\u30a4\u30ba(p_memsz)\u306e\u6307\u5b9a\u304c\u3042\u3063\u305f\u5834\u5408\u3001\n// \u30d5\u30a1\u30a4\u30eb\u3092\u30de\u30c3\u30d7\u3059\u308b\u3060\u3051\u3067\u306f\u30c0\u30e1\u306a\u306e\u3067\u3001setbrk\u3067memsz\u5206\u306e\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u3068\n// \u521d\u671f\u5316\u3092\u3059\u308b\u3002\n...\n\n    }\n\n// \u30e1\u30e2\u30ea\u306b\u5bfe\u3059\u308b\u6a29\u9650(elf_prot)\u3001Read/Write/Execute\u306e\u8a2d\u5b9a\u3001\n// \u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30ed\u30fc\u30c9\u306e\u305f\u3081\u3001mmap\u306e\u958b\u59cb\u4f4d\u7f6e(load_bias)\u3092\u5909\u66f4\u3059\u308b\n...\n\n// elf_map()\u3067mmap\u3059\u308b\n    error = elf_map(bprm->file, load_bias + vaddr, elf_ppnt,\n        elf_prot, elf_flags, total_size);\n\n\n\u3068\u308a\u3042\u3048\u305a\u3001\u4e00\u65e6\u3053\u3053\u307e\u3067\uff01\n## \u6982\u8981\n\nLinux\u3067\u4f7f\u308f\u308c\u308b\u30d0\u30a4\u30ca\u30ea\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306eELF\u306b\u3064\u3044\u3066\u3001\u7279\u306bexec\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u304b\u3089\u547c\u3070\u308c\u308b\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306e\u30ed\u30fc\u30c9\u306e\u51e6\u7406\u3092\u8abf\u3079\u305f\u3002\n\n## ELF\u306e\u69cb\u9020\n\n\u30d8\u30c3\u30c0\u304c\uff13\u3064\u3068\u3001\u305d\u308c\u3089\u3067\u30dd\u30a4\u30f3\u30c8\u3055\u308c\u308b\u30c7\u30fc\u30bf\u306b\u3088\u3063\u3066\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u3002\n\u30d5\u30e9\u30b0\u306e\u610f\u5473\u3068\u69cb\u9020\u4f53\u306e\u8868\u306f[Wikipedia](https://en.wikipedia.org/wiki/Executable_and_Linkable_Format)\u306b\u307e\u3068\u307e\u3063\u3066\u3044\u308b\u3002\n\n* File header\n* Program header\n* Section header\n\n### File header\n\n\u30d5\u30a1\u30a4\u30eb\u306e\u6700\u521d\u306b\u3042\u308a\u3001\u30d0\u30a4\u30ca\u30ea\u305d\u306e\u3082\u306e\u306e\u5c5e\u6027\u3068\u3001\u4ed6\u306e\u30d8\u30c3\u30c0\u60c5\u5831\u306e\u30c6\u30fc\u30d6\u30eb\u958b\u59cb\u4f4d\u7f6e\u306e\u30d5\u30a1\u30a4\u30eb\u30aa\u30d5\u30bb\u30c3\u30c8`e_*hoff`\u3001\u3068\u500b\u6570`e_*hnum`\u3092\u683c\u7d0d\u3057\u3066\u3044\u308b\u3002\n\n~~~\njuntaki@dev ~> readelf -e (which ls)\nELF \u30d8\u30c3\u30c0:\n  \u30de\u30b8\u30c3\u30af:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00\n  \u30af\u30e9\u30b9:                            ELF64\n  \u30c7\u30fc\u30bf:                            2 \u306e\u88dc\u6570\u3001\u30ea\u30c8\u30eb\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\n  \u30d0\u30fc\u30b8\u30e7\u30f3:                        1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI \u30d0\u30fc\u30b8\u30e7\u30f3:                    0\n  \u578b:                                EXEC (\u5b9f\u884c\u53ef\u80fd\u30d5\u30a1\u30a4\u30eb)\n  \u30de\u30b7\u30f3:                            Advanced Micro Devices X86-64\n  \u30d0\u30fc\u30b8\u30e7\u30f3:                        0x1\n  \u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u30a2\u30c9\u30ec\u30b9:               0x4049a0\n  \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u958b\u59cb\u30d8\u30c3\u30c0:          64 (\u30d0\u30a4\u30c8)\n  \u30bb\u30af\u30b7\u30e7\u30f3\u30d8\u30c3\u30c0\u59cb\u70b9:          124728 (\u30d0\u30a4\u30c8)\n  \u30d5\u30e9\u30b0:                            0x0\n  \u3053\u306e\u30d8\u30c3\u30c0\u306e\u30b5\u30a4\u30ba:                64 (\u30d0\u30a4\u30c8)\n  \u30d7\u30ed\u30b0\u30e9\u30e0\u30d8\u30c3\u30c0\u30b5\u30a4\u30ba:            56 (\u30d0\u30a4\u30c8)\n  \u30d7\u30ed\u30b0\u30e9\u30e0\u30d8\u30c3\u30c0\u6570:                9\n  \u30bb\u30af\u30b7\u30e7\u30f3\u30d8\u30c3\u30c0:                  64 (\u30d0\u30a4\u30c8)\n  \u30bb\u30af\u30b7\u30e7\u30f3\u30d8\u30c3\u30c0\u30b5\u30a4\u30ba:            29\n  \u30bb\u30af\u30b7\u30e7\u30f3\u30d8\u30c3\u30c0\u6587\u5b57\u5217\u8868\u7d22\u5f15:      28\n~~~\n\n\u69cb\u9020\u4f53\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\n~~~\ntypedef struct elf64_hdr {\n  unsigned char e_ident[EI_NIDENT]; /* ELF \"magic number\" */\n  Elf64_Half e_type;\n  Elf64_Half e_machine;\n  Elf64_Word e_version;\n  Elf64_Addr e_entry;   /* Entry point virtual address */\n  Elf64_Off e_phoff;    /* Program header table file offset */\n  Elf64_Off e_shoff;    /* Section header table file offset */\n  Elf64_Word e_flags;\n  Elf64_Half e_ehsize;\n  Elf64_Half e_phentsize;\n  Elf64_Half e_phnum;\n  Elf64_Half e_shentsize;\n  Elf64_Half e_shnum;\n  Elf64_Half e_shstrndx;\n} Elf64_Ehdr;\n~~~\n\n### Program header\n\nload_elf_phdrs()\u3067\u30dd\u30a4\u30f3\u30bf\u914d\u5217\u3068\u3057\u3066\u8aad\u307f\u8fbc\u307e\u308c\u308b\u3002\n\n~~~c:load_elf_phdrs()\n  size = sizeof(struct elf_phdr) * elf_ex->e_phnum;\n  if (size > ELF_MIN_ALIGN)\n    goto out;\n\n  elf_phdata = kmalloc(size, GFP_KERNEL);\n  if (!elf_phdata)\n    goto out;\n\n  /* Read in the program headers */\n  retval = kernel_read(elf_file, elf_ex->e_phoff,\n           (char *)elf_phdata, size);\n~~~\n\nProgram header\u306e\u69cb\u9020\u4f53\u3067\u3001\u30d5\u30a1\u30a4\u30eb\u5185\u3067\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u306f`p_offset`\u3001\u30d5\u30a1\u30a4\u30eb\u4e0a\u3067\u306e\u30b5\u30a4\u30ba\u306f`p_filesz`\u3067\u6307\u5b9a\u3057\u3066\u5404\u30d8\u30c3\u30c0\u304c\u6307\u3059\u5185\u5bb9\u3092\u8aad\u307f\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u30d5\u30a1\u30a4\u30eb\u4e0a\u3067\u306e\u30b5\u30a4\u30ba\u306f\u30e1\u30e2\u30ea\u4e0a\u3067\u306e\u30b5\u30a4\u30ba`p_memsz`\u3088\u308a\u5c0f\u3055\u304f\u306a\u308a\u3046\u308b\uff08\u5dee\u5206\u306f\u30bc\u30ed\u57cb\u3081\u3055\u308c\u308b\uff09\n\u7279\u306b\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306e\u5834\u5408\u3001`p_flags`\u304c`PT_LOAD`\u306e\u3082\u306e\u304c\u30e1\u30e2\u30ea\u4e0a\u306b\u30ed\u30fc\u30c9\u3055\u308c\u308b\u3002\n\n~~~c\ntypedef struct elf64_phdr {\n  Elf64_Word p_type;\n  Elf64_Word p_flags;\n  Elf64_Off p_offset;   /* Segment file offset */\n  Elf64_Addr p_vaddr;   /* Segment virtual address */\n  Elf64_Addr p_paddr;   /* Segment physical address */\n  Elf64_Xword p_filesz;   /* Segment size in file */\n  Elf64_Xword p_memsz;    /* Segment size in memory */\n  Elf64_Xword p_align;    /* Segment alignment, file & memory */\n} Elf64_Phdr;\n~~~\n\n\u30e1\u30e2\u30ea\u3078\u306ePT_LOAD\u30bf\u30a4\u30d7\u306e\u30ed\u30fc\u30c9\u306e\u95a2\u6570\u3067\u306f\u3001`p_vaddr`\u304b\u3089\u3001`p_memsz`\u5206\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u304c\u30de\u30c3\u30d7\u3055\u308c\u308b\u3002\n\n~~~c:load_elf_binary()\n  /* Now we do a little grungy work by mmapping the ELF image into\n     the correct location in memory. */\n// elf_phdata\u306fProgram header\u306e\u914d\u5217\n  for(i = 0, elf_ppnt = elf_phdata;\n      i < loc->elf_ex.e_phnum; i++, elf_ppnt++) {\n\n// PT_LOAD\u306e\u307f\u5bfe\u8c61\n    if (elf_ppnt->p_type != PT_LOAD)\n      continue;\n...\n\n    if (unlikely (elf_brk > elf_bss)) {\n      unsigned long nbyte;\n\n      /* There was a PT_LOAD segment with p_memsz > p_filesz\n         before this one. Map anonymous pages, if needed,\n         and clear the area.  */\n  \n// \u30d5\u30a1\u30a4\u30eb\u4e0a\u306e\u30b5\u30a4\u30ba\u3088\u308a\u3001\u5927\u304d\u3044\u30e1\u30e2\u30ea\u30b5\u30a4\u30ba(p_memsz)\u306e\u6307\u5b9a\u304c\u3042\u3063\u305f\u5834\u5408\u3001\n// \u30d5\u30a1\u30a4\u30eb\u3092\u30de\u30c3\u30d7\u3059\u308b\u3060\u3051\u3067\u306f\u30c0\u30e1\u306a\u306e\u3067\u3001setbrk\u3067memsz\u5206\u306e\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u3068\n// \u521d\u671f\u5316\u3092\u3059\u308b\u3002\n...\n\n    }\n\n// \u30e1\u30e2\u30ea\u306b\u5bfe\u3059\u308b\u6a29\u9650(elf_prot)\u3001Read/Write/Execute\u306e\u8a2d\u5b9a\u3001\n// \u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30ed\u30fc\u30c9\u306e\u305f\u3081\u3001mmap\u306e\u958b\u59cb\u4f4d\u7f6e(load_bias)\u3092\u5909\u66f4\u3059\u308b\n...\n\n// elf_map()\u3067mmap\u3059\u308b\n    error = elf_map(bprm->file, load_bias + vaddr, elf_ppnt,\n        elf_prot, elf_flags, total_size);\n~~~\n\n\u3068\u308a\u3042\u3048\u305a\u3001\u4e00\u65e6\u3053\u3053\u307e\u3067\uff01\n", "tags": ["Linux", "kernel"]}