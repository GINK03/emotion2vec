{"context": "\u3053\u306e\u8a18\u4e8b\u306fJavaFX Advent Calendar 2016\u306e8\u65e5\u76ee\u3067\u3059\u3002\u6628\u65e5\u306f@Ziphil\u3055\u3093\u306e\u300cFXML \u3067\u76f8\u5bfe\u30b5\u30a4\u30ba\u6307\u5b9a\u300d\u3067\u3059\u3002\u660e\u65e5\u306f@arachan@github\u3055\u3093\u3067\u3059\u3002\n\u30d7\u30ed\u751f\u3061\u3083\u3093 Advent Calendar 2016\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u6982\u8981\nJavaFX\u306e\u900f\u660eStage\u3068\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u3063\u3066\u7121\u99c4\u306b\u52d5\u304f\u30d7\u30ed\u751f\u3061\u3083\u3093\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u30de\u30b9\u30b3\u30c3\u30c8\u3092\u4f5c\u308b\u3001\u305f\u3060\u305d\u308c\u3060\u3051\u3067\u3059\u3002\n\n\u30d7\u30ed\u751f\u3061\u3083\u3093\u3068\u306f\u4f55\u304b\n\u77e5\u3089\u306a\u3044\u4eba\u3082\u305d\u3046\u3044\u306a\u3044\u3068\u306f\u601d\u3044\u307e\u3059\u304c\u3001\u77e5\u3089\u306a\u3044\u4eba\u306f\u516c\u5f0f\u30b5\u30a4\u30c8\u3092\u898b\u307e\u3057\u3087\u3046\u3002\n\n\u4f5c\u3063\u305f\u3082\u306e\nGitHub\u306b\u3042\u308a\u307e\u3059\u3002\n\n\u307e\u3070\u305f\u304d\u3059\u308b\n\u30c9\u30e9\u30c3\u30b0\u3057\u305f\u6642\u306b\u8868\u60c5\u304c\u5909\u308f\u308b\n\u30c0\u30d6\u30eb\u30af\u30ea\u30c3\u30af\u3067\u307e\u3070\u305f\u304d\u3001\u53e3\u30d1\u30af\u304c\u5207\u308a\u66ff\u308f\u308b\n\n\u3068\u3044\u3046\u6a5f\u80fd\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n\u30d7\u30ed\u751f\u3061\u3083\u3093\u306eSD\u753b\u50cf\u7d20\u6750\u3092\u4e00\u90e8\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\nJavaFX\u3067\u975e\u77e9\u5f62\u30a6\u30a4\u30f3\u30c9\u30a6\u3092\u8868\u793a\u3059\u308b\u3002\n\u307e\u305a\u306f\u3053\u3093\u306a\u611f\u3058\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n\u203b\u753b\u50cf\u306f\u305d\u306e\u307e\u307e\u3060\u3068\u5927\u304d\u3059\u304e\u308b\u306e\u3067206*500\u306b\u7e2e\u5c0f\u3057\u3066\u3044\u307e\u3059\u3002\n\n\nmascot.fxml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<?import javafx.scene.image.Image?>\n<?import javafx.scene.image.ImageView?>\n<?import javafx.scene.layout.Pane?>\n\n<Pane xmlns=\"http://javafx.com/javafx/8.0.65\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"com.skht777.pronama.MascotController\">\n    <children>\n        <ImageView fx:id=\"view\">\n         <image>\n            <Image url=\"/sd_eye0.png\" />\n         </image>\n        </ImageView>\n    </children>\n</Pane>\n\n\n\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3082\u9069\u5f53\u306b\u4f5c\u308a\u307e\u3059\u3002\n\nMascotController.java\npackage com.skht777.pronama;\n\nimport javafx.fxml.FXML;\nimport javafx.fxml.Initializable;\nimport javafx.scene.image.ImageView;\n\nimport java.net.URL;\nimport java.util.ResourceBundle;\n\npublic class MascotController implements Initializable {\n\n    @FXML\n    private ImageView view;\n\n    @Override\n    public void initialize(URL location, ResourceBundle resources) {\n\n    }\n}\n\n\n\u3042\u3068\u306fApplication::start\u3067Stage\u306e\u30b9\u30bf\u30a4\u30eb\u3092TRANSPARENT\u306b\u3057\u3066Scene\u306e\u80cc\u666f\u3092null\u306b\u3059\u308c\u3070\u3001\u900f\u904e\u3055\u308c\u305f\u753b\u50cf\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001\u3061\u3083\u3093\u3068\u898b\u3048\u3066\u3044\u308b\u90e8\u5206\u3060\u3051\u30de\u30a6\u30b9\u30a4\u30d9\u30f3\u30c8\u3092\u62fe\u3063\u3066\u304f\u308c\u307e\u3059\u3002\n\nMain.java\npackage com.skht777.pronama;\n\nimport javafx.application.Application;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Scene;\nimport javafx.stage.Stage;\nimport javafx.stage.StageStyle;\n\nimport java.io.IOException;\n\npublic class Main extends Application {\n\n    @Override\n    public void start(Stage primaryStage) throws IOException {\n        primaryStage.initStyle(StageStyle.TRANSPARENT);\n        Scene scene = new Scene(FXMLLoader.load(getClass().getResource(\"mascot.fxml\")));\n        scene.setFill(null);\n        primaryStage.setScene(scene);\n        primaryStage.show();\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n\n\n\n\n\u753b\u50cf\u3092\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3059\u308b\u3001\u5207\u308a\u66ff\u3048\u308b\nTimeline\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066ImageView\u306eImage\u3092\u4e00\u5b9a\u6642\u9593\u3054\u3068\u306b\u5207\u308a\u66ff\u3048\u308b\u3053\u3068\u3067\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u3067\u304d\u307e\u3059\u3002\nTimeline\u306e\u4f7f\u3044\u65b9\u306f\u685c\u5ead\u3055\u3093\u304c\u8a73\u7d30\u306a\u89e3\u8aac\u3092\u66f8\u3044\u3066\u304f\u308c\u3066\u3044\u308b\u306e\u3067\u305d\u3061\u3089\u3092\u5fa1\u89a7\u304f\u3060\u3055\u3044\u3002\n\u5207\u308a\u66ff\u3048\u308b\u306e\u304c\u9762\u5012\u306a\u306e\u3067\u3001\u7c21\u5358\u306b\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u3092\u5897\u3084\u305b\u308b\u3088\u3046\u306b\u3053\u3093\u306a\u306e\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n\nState.java\npackage com.skht777.pronama.state;\n\nimport javafx.animation.KeyFrame;\nimport javafx.animation.Timeline;\nimport javafx.scene.image.ImageView;\nimport javafx.stage.Window;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\npublic class State {\n\n    private static ImageView target;\n    private static StateType current;\n    private Timeline time;\n    private double width, height;\n\n    public static void setTarget(ImageView target) {\n        State.target = target;\n    }\n\n    public static void setState(StateType type) {\n        if (type == current) return;\n        Optional.ofNullable(current).map(StateType::getState).ifPresent(s -> s.time.stop());\n        current = type;\n        current.getState().setTarget();\n    }\n\n    // \u547c\u3073\u51fa\u3059\u5ea6\u306b\u72b6\u614b\u3092\u5909\u3048\u305f\u3044\u6642\u7528\n    public static void setState(StateType type, StateType... alt) { \n        if (type == current) setState(alt[0]);\n        else setState(IntStream.range(0, alt.length - 1).filter(i -> alt[i] == current)\n                .mapToObj(i -> alt[i + 1]).findFirst().orElse(type));\n    }\n\n    State(int rate, Frame... frames) {\n        width = frames[0].getImage().getWidth();\n        height = frames[0].getImage().getHeight();\n        List<KeyFrame> keys = Arrays.stream(frames)\n                .map(frame -> new KeyFrame(frame.getDuration(), e -> nextFrame(frame)))\n                .collect(Collectors.toList());\n        time = new Timeline(rate);\n        time.setCycleCount(Timeline.INDEFINITE); // \u30eb\u30fc\u30d7\u3055\u305b\u308b\n        time.getKeyFrames().addAll(keys);\n    }\n\n    private void setTarget() {\n        time.play();\n        // \u4e00\u5fdc\u66f8\u3044\u3066\u308b\u3051\u3069\u3042\u307e\u308a\u6c17\u306b\u3057\u306a\u304f\u3066\u3082\u3044\u3044\u304b\u3082\u3057\u308c\u306a\u3044\n        Window window = target.getScene().getWindow();\n        window.setWidth(width);\n        window.setHeight(height);\n    }\n\n    private void nextFrame(Frame frame) {\n        if (target.getImage() != frame.getImage()) target.setImage(frame.getImage());\n    }\n\n}\n\n\n\nFrame.java\npackage com.skht777.pronama.state;\n\nimport javafx.scene.image.Image;\nimport javafx.util.Duration;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nclass Frame {\n\n    private static Map<String, Image> image;\n    private int time;\n    private String imageName;\n\n    static {\n        image = new HashMap<>();\n    }\n\n    Frame(int time, String imageName) {\n        this.time = time;\n        this.imageName = imageName;\n        image.putIfAbsent(imageName, new Image(imageName));\n    }\n\n    Duration getDuration() {\n        return Duration.millis(time);\n    }\n\n    Image getImage() {\n        return image.get(imageName);\n    }\n\n}\n\n\n\nStateType.java\npackage com.skht777.pronama.state;\n\npublic enum StateType {\n\n    // \u5217\u6319\u5b9a\u6570\u3092\u5897\u3084\u3059\u3068\u6271\u3048\u308b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u5897\u3048\u308b\n    NORMAL(3000,\n            new Frame(0, \"/sd_eye1.png\"),\n            new Frame(100, \"/sd_eye2.png\"),\n            new Frame(200, \"/sd_eye1.png\"),\n            new Frame(300, \"/sd_eye0.png\"),\n            new Frame(3000, \"/sd_eye0.png\")),\n    DRAG(Integer.MAX_VALUE,\n            new Frame(1, \"/sd04.png\")),\n    SPEECH(3000,\n            new Frame(0, \"/sd_mouth1.png\"),\n            new Frame(200, \"/sd_mouth2.png\"),\n            new Frame(400, \"/sd_mouth1.png\"),\n            new Frame(600, \"/sd_mouth0.png\"));\n\n    private State state;\n\n    StateType(int rate, Frame... frames) {\n        state = new State(rate, frames);\n    }\n\n    public State getState() {\n        return state;\n    }\n\n}\n\n\n\u3042\u3068\u306f\u30c8\u30ea\u30ac\u30fc\u3068\u306a\u308b\u30de\u30a6\u30b9\u30a4\u30d9\u30f3\u30c8\u306a\u3093\u304b\u3067State::setState\u3092StateType\u3092\u6307\u5b9a\u3057\u3066\u547c\u3073\u51fa\u305b\u3070\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5207\u308a\u66ff\u3048\u3089\u308c\u307e\u3059\u3002\n\n\u304a\u307e\u3051\n\u5439\u304d\u51fa\u3057\u3068\u304b\u4ed8\u3051\u308b\u3068\u826f\u3055\u305d\u3046\u3060\u3063\u305f\u3093\u3067\u3059\u304c\u3001\u30d7\u30ed\u304c\u60dc\u3057\u307f\u306a\u3044\u6280\u8853\u3092\u5c3d\u304f\u3057\u3066\u5439\u304d\u51fa\u3057\u3092\u4f5c\u3063\u3066\u3044\u308b\u306e\u3092\u898b\u3066\u8ae6\u3081\u307e\u3057\u305f\u3002\n\n\u53c2\u8003\n\u30d7\u30ed\u751f\u3061\u3083\u3093\u516c\u5f0f\u30b5\u30a4\u30c8\nJavaFX 2\u3067\u306f\u3058\u3081\u308b\u3001GUI\u958b\u767a\u3000\u7b2c13\u56de \u30bf\u30a4\u30e0\u30e9\u30a4\u30f3\u3092\u4f7f\u3063\u305f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\nJavaFX in the Box\nJavaFX\u306e\u7df4\u7fd25:Drag&Drop\u3067Node\u3092\u79fb\u52d5\u3059\u308b\n\u3053\u306e\u8a18\u4e8b\u306f[JavaFX Advent Calendar 2016](http://qiita.com/advent-calendar/2016/javafx)\u306e8\u65e5\u76ee\u3067\u3059\u3002\u6628\u65e5\u306f@Ziphil\u3055\u3093\u306e\u300c[FXML \u3067\u76f8\u5bfe\u30b5\u30a4\u30ba\u6307\u5b9a](http://qiita.com/Ziphil/items/37c78b9b3571fffe990a)\u300d\u3067\u3059\u3002\u660e\u65e5\u306f@arachan@github\u3055\u3093\u3067\u3059\u3002\n[\u30d7\u30ed\u751f\u3061\u3083\u3093 Advent Calendar 2016](http://qiita.com/advent-calendar/2016/pronama-chan)\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n# \u6982\u8981\nJavaFX\u306e\u900f\u660eStage\u3068\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u3063\u3066\u7121\u99c4\u306b\u52d5\u304f\u30d7\u30ed\u751f\u3061\u3083\u3093\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u30de\u30b9\u30b3\u30c3\u30c8\u3092\u4f5c\u308b\u3001\u305f\u3060\u305d\u308c\u3060\u3051\u3067\u3059\u3002\n\n#\u30d7\u30ed\u751f\u3061\u3083\u3093\u3068\u306f\u4f55\u304b\n\u77e5\u3089\u306a\u3044\u4eba\u3082\u305d\u3046\u3044\u306a\u3044\u3068\u306f\u601d\u3044\u307e\u3059\u304c\u3001\u77e5\u3089\u306a\u3044\u4eba\u306f[\u516c\u5f0f\u30b5\u30a4\u30c8](http://pronama.azurewebsites.net/pronama)\u3092\u898b\u307e\u3057\u3087\u3046\u3002\n\n# \u4f5c\u3063\u305f\u3082\u306e\n[GitHub](https://github.com/skht777/javafx-pronamachan)\u306b\u3042\u308a\u307e\u3059\u3002\n\n* \u307e\u3070\u305f\u304d\u3059\u308b\n* \u30c9\u30e9\u30c3\u30b0\u3057\u305f\u6642\u306b\u8868\u60c5\u304c\u5909\u308f\u308b\n* \u30c0\u30d6\u30eb\u30af\u30ea\u30c3\u30af\u3067\u307e\u3070\u305f\u304d\u3001\u53e3\u30d1\u30af\u304c\u5207\u308a\u66ff\u308f\u308b\n\n\u3068\u3044\u3046\u6a5f\u80fd\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n\u30d7\u30ed\u751f\u3061\u3083\u3093\u306eSD\u753b\u50cf\u7d20\u6750\u3092\u4e00\u90e8\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n# JavaFX\u3067\u975e\u77e9\u5f62\u30a6\u30a4\u30f3\u30c9\u30a6\u3092\u8868\u793a\u3059\u308b\u3002\n\u307e\u305a\u306f\u3053\u3093\u306a\u611f\u3058\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n\u203b\u753b\u50cf\u306f\u305d\u306e\u307e\u307e\u3060\u3068\u5927\u304d\u3059\u304e\u308b\u306e\u3067206*500\u306b\u7e2e\u5c0f\u3057\u3066\u3044\u307e\u3059\u3002\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-12-08 15.53.42.png](https://qiita-image-store.s3.amazonaws.com/0/45262/c37d1cdd-14a9-93d0-e277-f613dc82c597.png)\n\n```mascot.fxml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<?import javafx.scene.image.Image?>\n<?import javafx.scene.image.ImageView?>\n<?import javafx.scene.layout.Pane?>\n\n<Pane xmlns=\"http://javafx.com/javafx/8.0.65\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"com.skht777.pronama.MascotController\">\n    <children>\n        <ImageView fx:id=\"view\">\n         <image>\n            <Image url=\"/sd_eye0.png\" />\n         </image>\n        </ImageView>\n    </children>\n</Pane>\n```\n\n\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3082\u9069\u5f53\u306b\u4f5c\u308a\u307e\u3059\u3002\n\n```MascotController.java\npackage com.skht777.pronama;\n\nimport javafx.fxml.FXML;\nimport javafx.fxml.Initializable;\nimport javafx.scene.image.ImageView;\n\nimport java.net.URL;\nimport java.util.ResourceBundle;\n\npublic class MascotController implements Initializable {\n\n    @FXML\n    private ImageView view;\n\n    @Override\n    public void initialize(URL location, ResourceBundle resources) {\n\n    }\n}\n```\n\n\u3042\u3068\u306fApplication::start\u3067Stage\u306e\u30b9\u30bf\u30a4\u30eb\u3092TRANSPARENT\u306b\u3057\u3066Scene\u306e\u80cc\u666f\u3092null\u306b\u3059\u308c\u3070\u3001\u900f\u904e\u3055\u308c\u305f\u753b\u50cf\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001\u3061\u3083\u3093\u3068\u898b\u3048\u3066\u3044\u308b\u90e8\u5206\u3060\u3051\u30de\u30a6\u30b9\u30a4\u30d9\u30f3\u30c8\u3092\u62fe\u3063\u3066\u304f\u308c\u307e\u3059\u3002\n\n```Main.java\npackage com.skht777.pronama;\n\nimport javafx.application.Application;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Scene;\nimport javafx.stage.Stage;\nimport javafx.stage.StageStyle;\n\nimport java.io.IOException;\n\npublic class Main extends Application {\n\n    @Override\n    public void start(Stage primaryStage) throws IOException {\n        primaryStage.initStyle(StageStyle.TRANSPARENT);\n        Scene scene = new Scene(FXMLLoader.load(getClass().getResource(\"mascot.fxml\")));\n        scene.setFill(null);\n        primaryStage.setScene(scene);\n        primaryStage.show();\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n```\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-12-08 16.58.04.png](https://qiita-image-store.s3.amazonaws.com/0/45262/7452802e-00f9-ffc2-c7b5-e492e16a6ecb.png)\n\n# \u753b\u50cf\u3092\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3059\u308b\u3001\u5207\u308a\u66ff\u3048\u308b\nTimeline\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066ImageView\u306eImage\u3092\u4e00\u5b9a\u6642\u9593\u3054\u3068\u306b\u5207\u308a\u66ff\u3048\u308b\u3053\u3068\u3067\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u3067\u304d\u307e\u3059\u3002\nTimeline\u306e\u4f7f\u3044\u65b9\u306f\u685c\u5ead\u3055\u3093\u304c[\u8a73\u7d30\u306a\u89e3\u8aac](http://itpro.nikkeibp.co.jp/article/COLUMN/20130719/492504/?rt=nocnt)\u3092\u66f8\u3044\u3066\u304f\u308c\u3066\u3044\u308b\u306e\u3067\u305d\u3061\u3089\u3092\u5fa1\u89a7\u304f\u3060\u3055\u3044\u3002\n\n\u5207\u308a\u66ff\u3048\u308b\u306e\u304c\u9762\u5012\u306a\u306e\u3067\u3001\u7c21\u5358\u306b\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u3092\u5897\u3084\u305b\u308b\u3088\u3046\u306b\u3053\u3093\u306a\u306e\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n```State.java\npackage com.skht777.pronama.state;\n\nimport javafx.animation.KeyFrame;\nimport javafx.animation.Timeline;\nimport javafx.scene.image.ImageView;\nimport javafx.stage.Window;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\npublic class State {\n\n    private static ImageView target;\n    private static StateType current;\n    private Timeline time;\n    private double width, height;\n\n    public static void setTarget(ImageView target) {\n        State.target = target;\n    }\n\n    public static void setState(StateType type) {\n        if (type == current) return;\n        Optional.ofNullable(current).map(StateType::getState).ifPresent(s -> s.time.stop());\n        current = type;\n        current.getState().setTarget();\n    }\n\n    // \u547c\u3073\u51fa\u3059\u5ea6\u306b\u72b6\u614b\u3092\u5909\u3048\u305f\u3044\u6642\u7528\n    public static void setState(StateType type, StateType... alt) { \n        if (type == current) setState(alt[0]);\n        else setState(IntStream.range(0, alt.length - 1).filter(i -> alt[i] == current)\n                .mapToObj(i -> alt[i + 1]).findFirst().orElse(type));\n    }\n\n    State(int rate, Frame... frames) {\n        width = frames[0].getImage().getWidth();\n        height = frames[0].getImage().getHeight();\n        List<KeyFrame> keys = Arrays.stream(frames)\n                .map(frame -> new KeyFrame(frame.getDuration(), e -> nextFrame(frame)))\n                .collect(Collectors.toList());\n        time = new Timeline(rate);\n        time.setCycleCount(Timeline.INDEFINITE); // \u30eb\u30fc\u30d7\u3055\u305b\u308b\n        time.getKeyFrames().addAll(keys);\n    }\n\n    private void setTarget() {\n        time.play();\n        // \u4e00\u5fdc\u66f8\u3044\u3066\u308b\u3051\u3069\u3042\u307e\u308a\u6c17\u306b\u3057\u306a\u304f\u3066\u3082\u3044\u3044\u304b\u3082\u3057\u308c\u306a\u3044\n        Window window = target.getScene().getWindow();\n        window.setWidth(width);\n        window.setHeight(height);\n    }\n\n    private void nextFrame(Frame frame) {\n        if (target.getImage() != frame.getImage()) target.setImage(frame.getImage());\n    }\n\n}\n```\n\n```Frame.java\npackage com.skht777.pronama.state;\n\nimport javafx.scene.image.Image;\nimport javafx.util.Duration;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nclass Frame {\n\n    private static Map<String, Image> image;\n    private int time;\n    private String imageName;\n\n    static {\n        image = new HashMap<>();\n    }\n\n    Frame(int time, String imageName) {\n        this.time = time;\n        this.imageName = imageName;\n        image.putIfAbsent(imageName, new Image(imageName));\n    }\n\n    Duration getDuration() {\n        return Duration.millis(time);\n    }\n\n    Image getImage() {\n        return image.get(imageName);\n    }\n\n}\n```\n\n```StateType.java\npackage com.skht777.pronama.state;\n\npublic enum StateType {\n\n    // \u5217\u6319\u5b9a\u6570\u3092\u5897\u3084\u3059\u3068\u6271\u3048\u308b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u304c\u5897\u3048\u308b\n    NORMAL(3000,\n            new Frame(0, \"/sd_eye1.png\"),\n            new Frame(100, \"/sd_eye2.png\"),\n            new Frame(200, \"/sd_eye1.png\"),\n            new Frame(300, \"/sd_eye0.png\"),\n            new Frame(3000, \"/sd_eye0.png\")),\n    DRAG(Integer.MAX_VALUE,\n            new Frame(1, \"/sd04.png\")),\n    SPEECH(3000,\n            new Frame(0, \"/sd_mouth1.png\"),\n            new Frame(200, \"/sd_mouth2.png\"),\n            new Frame(400, \"/sd_mouth1.png\"),\n            new Frame(600, \"/sd_mouth0.png\"));\n\n    private State state;\n\n    StateType(int rate, Frame... frames) {\n        state = new State(rate, frames);\n    }\n\n    public State getState() {\n        return state;\n    }\n\n}\n```\n\n\u3042\u3068\u306f\u30c8\u30ea\u30ac\u30fc\u3068\u306a\u308b\u30de\u30a6\u30b9\u30a4\u30d9\u30f3\u30c8\u306a\u3093\u304b\u3067State::setState\u3092StateType\u3092\u6307\u5b9a\u3057\u3066\u547c\u3073\u51fa\u305b\u3070\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5207\u308a\u66ff\u3048\u3089\u308c\u307e\u3059\u3002\n\n# \u304a\u307e\u3051\n\u5439\u304d\u51fa\u3057\u3068\u304b\u4ed8\u3051\u308b\u3068\u826f\u3055\u305d\u3046\u3060\u3063\u305f\u3093\u3067\u3059\u304c\u3001[\u30d7\u30ed\u304c\u60dc\u3057\u307f\u306a\u3044\u6280\u8853\u3092\u5c3d\u304f\u3057\u3066\u5439\u304d\u51fa\u3057\u3092\u4f5c\u3063\u3066\u3044\u308b](http://skrb.hatenablog.com/entry/2014/12/24/223823)\u306e\u3092\u898b\u3066\u8ae6\u3081\u307e\u3057\u305f\u3002\n\n# \u53c2\u8003\n[\u30d7\u30ed\u751f\u3061\u3083\u3093\u516c\u5f0f\u30b5\u30a4\u30c8](http://pronama.azurewebsites.net/pronama)\n[JavaFX 2\u3067\u306f\u3058\u3081\u308b\u3001GUI\u958b\u767a\u3000\u7b2c13\u56de \u30bf\u30a4\u30e0\u30e9\u30a4\u30f3\u3092\u4f7f\u3063\u305f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3](http://itpro.nikkeibp.co.jp/article/COLUMN/20130719/492504/)\n[JavaFX in the Box](http://skrb.hatenablog.com)\n[JavaFX\u306e\u7df4\u7fd25:Drag&Drop\u3067Node\u3092\u79fb\u52d5\u3059\u308b](http://nodamushi.hatenablog.com/entry/20130219/1361268082)\n", "tags": ["Java", "JavaFX", "java8"]}