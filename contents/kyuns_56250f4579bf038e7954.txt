{"tags": ["GoogleCalendar", "api", "google", "Ruby"], "context": "\n\nGoogle Calendar\u3067\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u767b\u9332\u3059\u308b\u3068\u304d\u306e\u554f\u984c\nGoogleCalendarAPI\u3067\u306f\u3001\u30a4\u30d9\u30f3\u30c8\u3092\u767b\u9332\u3059\u308b\u3068\u5404\u30a4\u30d9\u30f3\u30c8\u3054\u3068\u306b\u30e6\u30cb\u30fc\u30af\u306aid\u304c\u81ea\u52d5\u751f\u6210\u3055\u308c\u307e\u3059\u3002(\u4ee5\u4e0b\u30a4\u30d9\u30f3\u30c8id\u3068\u547c\u3073\u307e\u3059)\u305f\u3060\u3057\u3001\u3053\u308c\u3060\u3068\u767b\u9332\u3057\u305f\u3042\u3068\u306b\u4e00\u5ea6\u53d6\u5f97\u3057\u306a\u3044\u3068\u767b\u9332\u3057\u305f\u30a4\u30d9\u30f3\u30c8id\u304c\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u308a\u3001\u8907\u6570\u4eba\u3067\u540c\u3058\u30a4\u30d9\u30f3\u30c8\u3092\u5171\u6709\u3059\u308b\u5834\u5408\u306b\u3001\u305d\u308c\u305e\u308c\u3067\u30a4\u30d9\u30f3\u30c8id\u304c\u9055\u3046\u306e\u3067\u3001\u30a4\u30d9\u30f3\u30c8\u60c5\u5831\u304c\u66f4\u65b0\u3055\u308c\u305f\u5834\u5408\u306a\u3069\u3001\u4e00\u62ec\u3067\u66f4\u65b0\u3059\u308b\u306e\u304c\u975e\u5e38\u306b\u3081\u3093\u3069\u3046\u3067\u3059\u3002\n\u3053\u308c\u3089\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u305f\u3081\u306b\u3001\u30a4\u30d9\u30f3\u30c8\u767b\u9332\u6642\u306b\u72ec\u81ea\u306b\u751f\u6210\u3057\u305fid\u3092\u4f7f\u3046\u624b\u6cd5\u3092\u53d6\u308a\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nruby\u3067\u306e\u30b3\u30fc\u30c9\u304c\u307b\u307c\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u4ee5\u4e0b\u306b\u7d39\u4ecb\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\nGoogle Calendar\u306e\u30a4\u30d9\u30f3\u30c8id\u306e\u30eb\u30fc\u30eb\nGoogle Calendar\u306eAPI\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3088\u308b\u3068\u3001\u30a4\u30d9\u30f3\u30c8id\u306f\u4ee5\u4e0b\u306e\u30eb\u30fc\u30eb\u306b\u5f93\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nOpaque identifier of the event. When creating new single or recurring events, you can specify their IDs. Provided IDs must follow these rules:\ncharacters allowed in the ID are those used in base32hex encoding, i.e. lowercase letters a-v and digits 0-9, see section 3.1.2 in RFC2938\nthe length of the ID must be between 5 and 1024 characters\nthe ID must be unique per calendar\nDue to the globally distributed nature of the system, we cannot guarantee that ID collisions will be detected at event creation time. To minimize the risk of collisions we recommend using an established UUID algorithm such as one described in RFC4122.\nIf you do not specify an ID, it will be automatically generated by the server.\n\nNote that the icalUID and the id are not identical and only one of them should be supplied at event creation time. One difference in their semantics is that in recurring events, all occurrences of one event have different ids while they all share the same icalUIDs.\n\n\u30a4\u30d9\u30f3\u30c8id\u306fRFC2938\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u5f93\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u3053\u3060\u3068Base32encode\u3067\u7528\u3044\u3089\u308c\u308ba-v\u304a\u3088\u30730-9\u3067\u69cb\u6210\u3055\u308c\u305f5\u6587\u5b57\u4ee5\u4e0a1024\u6587\u5b57\u4ee5\u4e0b\u306e\u6587\u5b57\u5217\u3067\u3059\u3002\n\nRuby\u3067id\u3092\u751f\u6210\u3059\u308b\nRuby\u306b\u306fBase32encode\u3067\u304d\u308b\u95a2\u6570\u304c\u3042\u308b\u306e\u3067\u305d\u3061\u3089\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\n\u751f\u6210\u3059\u308b\u3079\u304d\u6587\u5b57\u5217\u306f\u4ed6\u306e\u30a4\u30d9\u30f3\u30c8id\u3068\u885d\u7a81\u3059\u308b\u53ef\u80fd\u6027\u3092\u907f\u3051\u308b\u305f\u3081\u306b\u51fa\u6765\u308b\u9650\u308a\u30e6\u30cb\u30fc\u30af\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002(\u81ea\u5206\u305f\u3061\u304c\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3067\u304d\u308b\u30ab\u30ec\u30f3\u30c0\u30fc\u306a\u3089\u554f\u984c\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u672c\u4eba\u306eprimary\u306e\u30ab\u30ec\u30f3\u30c0\u30fc\u306a\u3069\u3060\u3068\u3044\u308d\u3093\u306a\u3068\u3053\u308d\u304b\u3089\u30a4\u30d9\u30f3\u30c8\u304c\u767b\u9332\u3055\u308c\u308b\u305f\u3081\uff09\nref: http://dnsruby.rubyforge.org/classes/Base32.html\n\nlib/base32.rb\nmodule Base32\n  module_function\n\n  HEX = '[0-9a-v]'\n\n  def encode32hex(str)\n    str.gsub(/\\G(.{5})|(.{1,4}\\z)/mn) do\n      full = $1; flag = $2\n      n, c = (full || flag.ljust(5, \"\\0\")).unpack(\"NC\")\n      full = ((n << 8) | c).to_s(32).rjust(8, \"0\")\n      if flag\n        full[0, (flag.length*8+4).div(5)].ljust(8, \"=\")\n      else\n        full\n      end\n    end\n  end\n\n  def decode32hex(str)\n    str.gsub(/\\G\\s*(#{HEX}{8}|#{HEX}{7}=|#{HEX}{5}={3}|#{HEX}{4}={4}|#{HEX}{2}={6}|(\\S))/imno) do\n      raise \"invalid base32\" if $2\n      s = $1\n      s.tr(\"=\", \"0\").to_i(32).divmod(256).pack(\"NC\")[0,(s.count(\"^=\")*5).div(8)]\n    end\n  end\nend\n\n\nrequire 'google/apis/calendar_v3'\n  # .....\u7701\u7565... \n\n  def get_event_uid(event_id)\n    unique_id = \"event#{event_id}\" #seed\u306b\u306a\u308b\u3079\u304d\u6587\u5b57\u5217\n    #\u672b\u5c3e\u306e=\u306f\u4e0d\u8981\u306a\u306e\u3067\u53d6\u308a\u9664\u304f\n    Base32.encode32hex(unique_id).gsub(\"=\",\"\")\n  end\n\n  def add(event)\n    value = {}\n\n    #....\u30ab\u30ec\u30f3\u30c0\u30fc\u306e\u60c5\u5831\u306a\u3069\u3092\u8a2d\u5b9a...\n\n    value[:id]        = get_event_uid(event[\"id\"])\n    value[:i_cal_uid] = \"#{id}@google.com\"\n    Google::Apis::CalendarV3::Event.new(value)\n  end\n\n\n\u307e\u3068\u3081\nGoogle\u30ab\u30ec\u30f3\u30c0\u30fc\u306e\u30a4\u30d9\u30f3\u30c8id\u3092\u72ec\u81ea\u3067\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u3001\u308f\u3056\u308f\u3056\u30a4\u30d9\u30f3\u30c8id\u3092\u4fdd\u6301\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u306a\u304f\u3001\u30a4\u30d9\u30f3\u30c8\u60c5\u5831\u306e\u66f4\u65b0\u7b49\u304c\u3042\u308b\u5834\u5408\u306b\u4e00\u62ec\u3067\u66f4\u65b0\u304c\u51fa\u6765\u308b\u305f\u3081\u975e\u5e38\u306b\u6271\u3044\u304c\u697d\u306b\u306a\u308a\u307e\u3059\u3002\n# Google Calendar\u3067\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u767b\u9332\u3059\u308b\u3068\u304d\u306e\u554f\u984c\n\nGoogleCalendarAPI\u3067\u306f\u3001\u30a4\u30d9\u30f3\u30c8\u3092\u767b\u9332\u3059\u308b\u3068\u5404\u30a4\u30d9\u30f3\u30c8\u3054\u3068\u306b\u30e6\u30cb\u30fc\u30af\u306aid\u304c\u81ea\u52d5\u751f\u6210\u3055\u308c\u307e\u3059\u3002(\u4ee5\u4e0b\u30a4\u30d9\u30f3\u30c8id\u3068\u547c\u3073\u307e\u3059)\u305f\u3060\u3057\u3001\u3053\u308c\u3060\u3068\u767b\u9332\u3057\u305f\u3042\u3068\u306b\u4e00\u5ea6\u53d6\u5f97\u3057\u306a\u3044\u3068\u767b\u9332\u3057\u305f\u30a4\u30d9\u30f3\u30c8id\u304c\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u308a\u3001\u8907\u6570\u4eba\u3067\u540c\u3058\u30a4\u30d9\u30f3\u30c8\u3092\u5171\u6709\u3059\u308b\u5834\u5408\u306b\u3001\u305d\u308c\u305e\u308c\u3067\u30a4\u30d9\u30f3\u30c8id\u304c\u9055\u3046\u306e\u3067\u3001\u30a4\u30d9\u30f3\u30c8\u60c5\u5831\u304c\u66f4\u65b0\u3055\u308c\u305f\u5834\u5408\u306a\u3069\u3001\u4e00\u62ec\u3067\u66f4\u65b0\u3059\u308b\u306e\u304c\u975e\u5e38\u306b\u3081\u3093\u3069\u3046\u3067\u3059\u3002\n\n\n\u3053\u308c\u3089\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u305f\u3081\u306b\u3001\u30a4\u30d9\u30f3\u30c8\u767b\u9332\u6642\u306b\u72ec\u81ea\u306b\u751f\u6210\u3057\u305fid\u3092\u4f7f\u3046\u624b\u6cd5\u3092\u53d6\u308a\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nruby\u3067\u306e\u30b3\u30fc\u30c9\u304c\u307b\u307c\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u4ee5\u4e0b\u306b\u7d39\u4ecb\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n# Google Calendar\u306e\u30a4\u30d9\u30f3\u30c8id\u306e\u30eb\u30fc\u30eb\n\n[Google Calendar\u306eAPI\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](https://developers.google.com/google-apps/calendar/v3/reference/events/insert)\u306b\u3088\u308b\u3068\u3001\u30a4\u30d9\u30f3\u30c8id\u306f\u4ee5\u4e0b\u306e\u30eb\u30fc\u30eb\u306b\u5f93\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n```\nOpaque identifier of the event. When creating new single or recurring events, you can specify their IDs. Provided IDs must follow these rules:\ncharacters allowed in the ID are those used in base32hex encoding, i.e. lowercase letters a-v and digits 0-9, see section 3.1.2 in RFC2938\nthe length of the ID must be between 5 and 1024 characters\nthe ID must be unique per calendar\nDue to the globally distributed nature of the system, we cannot guarantee that ID collisions will be detected at event creation time. To minimize the risk of collisions we recommend using an established UUID algorithm such as one described in RFC4122.\nIf you do not specify an ID, it will be automatically generated by the server.\n\nNote that the icalUID and the id are not identical and only one of them should be supplied at event creation time. One difference in their semantics is that in recurring events, all occurrences of one event have different ids while they all share the same icalUIDs.\n```\n\n\u30a4\u30d9\u30f3\u30c8id\u306f[RFC2938](https://tools.ietf.org/html/rfc2938#section-3.1.2)\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u5f93\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u3053\u3060\u3068`Base32encode\u3067\u7528\u3044\u3089\u308c\u308ba-v\u304a\u3088\u30730-9\u3067\u69cb\u6210\u3055\u308c\u305f5\u6587\u5b57\u4ee5\u4e0a1024\u6587\u5b57\u4ee5\u4e0b\u306e\u6587\u5b57\u5217`\u3067\u3059\u3002\n\n\n# Ruby\u3067id\u3092\u751f\u6210\u3059\u308b\nRuby\u306b\u306f`Base32encode`\u3067\u304d\u308b\u95a2\u6570\u304c\u3042\u308b\u306e\u3067\u305d\u3061\u3089\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\n\u751f\u6210\u3059\u308b\u3079\u304d\u6587\u5b57\u5217\u306f\u4ed6\u306e\u30a4\u30d9\u30f3\u30c8id\u3068\u885d\u7a81\u3059\u308b\u53ef\u80fd\u6027\u3092\u907f\u3051\u308b\u305f\u3081\u306b\u51fa\u6765\u308b\u9650\u308a\u30e6\u30cb\u30fc\u30af\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002(\u81ea\u5206\u305f\u3061\u304c\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3067\u304d\u308b\u30ab\u30ec\u30f3\u30c0\u30fc\u306a\u3089\u554f\u984c\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u672c\u4eba\u306eprimary\u306e\u30ab\u30ec\u30f3\u30c0\u30fc\u306a\u3069\u3060\u3068\u3044\u308d\u3093\u306a\u3068\u3053\u308d\u304b\u3089\u30a4\u30d9\u30f3\u30c8\u304c\u767b\u9332\u3055\u308c\u308b\u305f\u3081\uff09\n\n\nref: http://dnsruby.rubyforge.org/classes/Base32.html\n\n```lib/base32.rb\nmodule Base32\n  module_function\n\n  HEX = '[0-9a-v]'\n\n  def encode32hex(str)\n    str.gsub(/\\G(.{5})|(.{1,4}\\z)/mn) do\n      full = $1; flag = $2\n      n, c = (full || flag.ljust(5, \"\\0\")).unpack(\"NC\")\n      full = ((n << 8) | c).to_s(32).rjust(8, \"0\")\n      if flag\n        full[0, (flag.length*8+4).div(5)].ljust(8, \"=\")\n      else\n        full\n      end\n    end\n  end\n\n  def decode32hex(str)\n    str.gsub(/\\G\\s*(#{HEX}{8}|#{HEX}{7}=|#{HEX}{5}={3}|#{HEX}{4}={4}|#{HEX}{2}={6}|(\\S))/imno) do\n      raise \"invalid base32\" if $2\n      s = $1\n      s.tr(\"=\", \"0\").to_i(32).divmod(256).pack(\"NC\")[0,(s.count(\"^=\")*5).div(8)]\n    end\n  end\nend\n```\n\n```ruby\nrequire 'google/apis/calendar_v3'\n  # .....\u7701\u7565... \n\n  def get_event_uid(event_id)\n    unique_id = \"event#{event_id}\" #seed\u306b\u306a\u308b\u3079\u304d\u6587\u5b57\u5217\n    #\u672b\u5c3e\u306e=\u306f\u4e0d\u8981\u306a\u306e\u3067\u53d6\u308a\u9664\u304f\n    Base32.encode32hex(unique_id).gsub(\"=\",\"\")\n  end\n  \n  def add(event)\n    value = {}\n    \n    #....\u30ab\u30ec\u30f3\u30c0\u30fc\u306e\u60c5\u5831\u306a\u3069\u3092\u8a2d\u5b9a...\n    \n    value[:id]        = get_event_uid(event[\"id\"])\n    value[:i_cal_uid] = \"#{id}@google.com\"\n    Google::Apis::CalendarV3::Event.new(value)\n  end\n```\n\n\n#\u307e\u3068\u3081\nGoogle\u30ab\u30ec\u30f3\u30c0\u30fc\u306e\u30a4\u30d9\u30f3\u30c8id\u3092\u72ec\u81ea\u3067\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u3001\u308f\u3056\u308f\u3056\u30a4\u30d9\u30f3\u30c8id\u3092\u4fdd\u6301\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u306a\u304f\u3001\u30a4\u30d9\u30f3\u30c8\u60c5\u5831\u306e\u66f4\u65b0\u7b49\u304c\u3042\u308b\u5834\u5408\u306b\u4e00\u62ec\u3067\u66f4\u65b0\u304c\u51fa\u6765\u308b\u305f\u3081\u975e\u5e38\u306b\u6271\u3044\u304c\u697d\u306b\u306a\u308a\u307e\u3059\u3002\n\n"}