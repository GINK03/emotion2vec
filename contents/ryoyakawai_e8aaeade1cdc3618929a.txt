{"context": "\n\nArduino101\u3063\u3066\u4f55\uff1f\nArudino\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306bIntel\u793e\u88fd\u306e\u30c1\u30c3\u30d7Curie\u3092\u8f09\u305b\u308b\u3053\u3068\u306b\u3088\u308aBluetooth\u3060\u3063\u305f\u308a\u3001\u5404\u7a2e\u30bb\u30f3\u30b5\u304c\u624b\u8efd\u306b\u4f7f\u3048\u3061\u3083\u3046Arudino\u3067\u3059\u3002\n\n\n\u5100\u5f0f\uff1aL\u30c1\u30ab\n\u30d2\u30e7\u30f3\u306a\u30ad\u30c3\u30ab\u30b1\u3067Arduino101\u3092\u30b2\u30c3\u30c8\u3057\u305f\u306e\u3067\u3059\u304c\u3001\u5c01\u3082\u7a7a\u3051\u305a\u306b\u4f55\u3068\u306a\u304f\u653e\u7f6e\u3057\u3066\u5927\u4e8b\u306b\u4fdd\u7ba1\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u3068\u306f\u3044\u3048\u3001\u3053\u308c\u307e\u305f\u30d2\u30e7\u30f3\u306a\u30ad\u30c3\u30ab\u30b1\u3067\u89e6\u308a\u305f\u304f\u306a\u308a\u307e\u3059\u3002\n\u3067\u3001\u3084\u308b\u306a\u3089\u300cL\u30c1\u30ab\u300d\u3068\u306a\u308b\u308f\u3051\u3067\u3059\u304c\u5c11\u3057\u8272\u3092\u3064\u3051\u3066BLE MIDI L\u30c1\u30ab\u3092\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u30b5\u30f3\u30d7\u30eb\nArudino\u306e\u826f\u3044\u6240\u306f\u30b5\u30f3\u30d7\u30eb\u304cIDE\u306b\u7d44\u307f\u8fbc\u307e\u308c\u3066\u3044\u3066\u3001\u30d1\u30d1\u3063\u3068\u30d1\u30af\u308b\u53c2\u8003\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u3053\u308d\u3002\u4eca\u56de\u306fBLE MIDI\u306a\u306e\u3067\u3059\u304c\u3001\u5b9f\u306f\u307e\u3060\u30b5\u30f3\u30d7\u30eb\u306b\u306f\u7d44\u307f\u8fbc\u307e\u308c\u3066\u304a\u3089\u305a\u3001\u3053\u308c\u3082\u307e\u305f\u30d2\u30e7\u30f3\u306a\u30ad\u30c3\u30ab\u30b1\u304b\u3089Github\u304b\u3089\u30b5\u30f3\u30d7\u30eb\u3092\u6398\u308a\u5f53\u3066\u307e\u3057\u305f\u3002\n\u30b5\u30f3\u30d7\u30eb\u30d5\u30a1\u30a4\u30eb\u306f\u3053\u3053\u306b\u3042\u308a\u307e\u3059\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u30b5\u30f3\u30d7\u30eb\u3092\u66f8\u304d\u63db\u3048\u3066\u3044\u304d\u307e\u3059\u3002\n\nBLE MIDI L\u30c1\u30ab\u30b3\u30fc\u30c9\n\u307b\u307c\u30b5\u30f3\u30d7\u30eb\u306e\u6d41\u7528\u3067\u3001midiCharacteristicWritten()\u306eMethod\u3060\u3051\u3092\u5909\u66f4\u3057\u307e\u3057\u305f\u3002\u6319\u52d5\u306f\u305b\u3063\u304b\u304fMIDI\u306a\u306e\u3067MIDI\u611f\u3092\u5473\u308f\u3048\u308b\u3088\u3046\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u66f4\u3057\u3066\u3044\u307e\u3059\u3002\n - 0x90\uff1a\u70b9\u706f\n - \u305d\u308c\u4ee5\u5916\uff1a\u6d88\u706f\n\u305d\u308c\u304b\u3089L\u30c1\u30ab\u306a\u306e\u3067PIN\u306e\u756a\u53f7\u3068\u304b\u306e\u6307\u5b9a\u3082\u3057\u3066\u3044\u307e\u3059\u3002\nint LED_PIN=13;\npinMode(LED_PIN, OUTPUT);\n\u305d\u3057\u3066\u3001L\u30c1\u30ab\u3092\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3059\u308b\u30a2\u30d7\u30ea\u306f\u3082\u3061\u308d\u3093Web MIDI API\u3092\u4f7f\u3063\u305f\u3082\u306e\u3092\u7528\u610f\u3057\u307e\u3057\u305f\u3002\nMIDI\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u51fa\u3059\u70ba\u306eWeb\u30a2\u30d7\u30ea\n\uff08\u3069\u3061\u3089\u306e\u30bd\u30fc\u30b9\u306f\u3053\u3061\u3089\u306b\u3042\u308a\u307e\u3059\uff09\n#include <CurieBLE.h>\n\n#define TXRX_BUF_LEN              20 //max number of bytes\n#define RX_BUF_LEN                20 //max number of bytes\nuint8_t rx_buf[RX_BUF_LEN];\nint rx_buf_num, rx_state = 0;\nuint8_t rx_temp_buf[20];\nuint8_t outBufMidi[128];\n\n//Buffer to hold 5 bytes of MIDI data. Note the timestamp is forced\nuint8_t midiData[] = {0x80, 0x80, 0x00, 0x00, 0x00};\n\nBLEPeripheral midiDevice; // create peripheral instance\n\nBLEService midiSvc(\"03B80E5A-EDE8-4B33-A751-6CE34EC4C700\"); // create service\n\n// create switch characteristic and allow remote device to read and write\nBLECharacteristic midiChar(\"7772E5DB-3868-4112-A1A9-F2669D106BF3\", BLEWrite | BLEWriteWithoutResponse | BLENotify | BLERead, 5);\n\nint LED_PIN=13;\n\nvoid setup() {\n  Serial.begin(9600);\n\n  BLESetup();\n  Serial.println((\"Bluetooth device active, waiting for connections...\"));\n}\n\nvoid BLESetup()\n{\n  // set the local name peripheral advertises\n  midiDevice.setLocalName(\"Auxren\");\n  midiDevice.setDeviceName(\"Auxren\");\n\n  // set the UUID for the service this peripheral advertises\n  midiDevice.setAdvertisedServiceUuid(midiSvc.uuid());\n\n  // add service and characteristic\n  midiDevice.addAttribute(midiSvc);\n  midiDevice.addAttribute(midiChar);\n\n  // assign event handlers for connected, disconnected to peripheral\n  midiDevice.setEventHandler(BLEConnected, midiDeviceConnectHandler);\n  midiDevice.setEventHandler(BLEDisconnected, midiDeviceDisconnectHandler);\n\n  // assign event handlers for characteristic\n  midiChar.setEventHandler(BLEWritten, midiCharacteristicWritten);\n  // set an initial value for the characteristic\n  midiChar.setValue(midiData, 5);\n\n  // advertise the service\n  midiDevice.begin();\n\n  pinMode(LED_PIN, OUTPUT);\n}\n\nvoid loop() {\n}\n\nvoid midiDeviceConnectHandler(BLECentral& central) {\n  // central connected event handler\n  Serial.print(\"Connected event, central: \");\n  Serial.println(central.address());\n}\n\nvoid midiDeviceDisconnectHandler(BLECentral& central) {\n  // central disconnected event handler\n  Serial.print(\"Disconnected event, central: \");\n  Serial.println(central.address());\n}\n\nvoid midiCharacteristicWritten(BLECentral& central, BLECharacteristic& characteristic) { \n  if((midiChar.value())[2]==0x90) {\n    digitalWrite(LED_PIN, HIGH);\n  } else {\n    digitalWrite(LED_PIN, LOW);\n  }\n}\n\n\n\u52d5\u4f5c\u4e2d\u306e\u6620\u50cf\n\u30d6\u30ec\u3066\u3066\u30b9\u30df\u30de\u30bb\u30f3\uff1e\uff1c\nMac\u3068BLE MIDI\u3067\u63a5\u7d9a\u3059\u308b\u306e\u304c\u5c11\u3057\u9762\u5012\u306a\u306e\u3067\u3001\u6620\u50cf\u3092\u3054\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\uff08\u753b\u50cf\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u52d5\u753b\u304c\u898b\u3089\u308c\u307e\u3059\uff09\n\n\n\u304a\u307e\u3051\nWeb\u30a2\u30d7\u30ea\u3069\u3046\u306a\u3063\u3066\u308b\u306e\uff1f\u3068\u3001\u6c17\u306b\u306a\u3063\u3066\u308b\u65b9\u306f\u3053\u3061\u3089\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n - MIDI\u30c7\u30d0\u30a4\u30b9\u306e\u6e96\u5099\u4e0d\u8981\u3001Web MIDI API\u306e\u57fa\u790e(HTML5 Experts.jp)\n - Web MIDI API\u306e\u4f7f\u3044\u65b9\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\n#Arduino101\u3063\u3066\u4f55\uff1f\nArudino\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306bIntel\u793e\u88fd\u306e\u30c1\u30c3\u30d7Curie\u3092\u8f09\u305b\u308b\u3053\u3068\u306b\u3088\u308aBluetooth\u3060\u3063\u305f\u308a\u3001\u5404\u7a2e\u30bb\u30f3\u30b5\u304c\u624b\u8efd\u306b\u4f7f\u3048\u3061\u3083\u3046Arudino\u3067\u3059\u3002\n![IMG_20160708_030725.jpg](https://qiita-image-store.s3.amazonaws.com/0/61221/0d2a961a-f6e6-99ba-6e5f-bd2112c2b36f.jpeg)\n\n#\u5100\u5f0f\uff1aL\u30c1\u30ab\n\u30d2\u30e7\u30f3\u306a\u30ad\u30c3\u30ab\u30b1\u3067Arduino101\u3092\u30b2\u30c3\u30c8\u3057\u305f\u306e\u3067\u3059\u304c\u3001\u5c01\u3082\u7a7a\u3051\u305a\u306b\u4f55\u3068\u306a\u304f~~\u653e\u7f6e\u3057\u3066~~\u5927\u4e8b\u306b\u4fdd\u7ba1\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u3068\u306f\u3044\u3048\u3001\u3053\u308c\u307e\u305f\u30d2\u30e7\u30f3\u306a\u30ad\u30c3\u30ab\u30b1\u3067\u89e6\u308a\u305f\u304f\u306a\u308a\u307e\u3059\u3002\n\u3067\u3001\u3084\u308b\u306a\u3089\u300cL\u30c1\u30ab\u300d\u3068\u306a\u308b\u308f\u3051\u3067\u3059\u304c\u5c11\u3057\u8272\u3092\u3064\u3051\u3066BLE MIDI L\u30c1\u30ab\u3092\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n#\u30b5\u30f3\u30d7\u30eb\nArudino\u306e\u826f\u3044\u6240\u306f\u30b5\u30f3\u30d7\u30eb\u304cIDE\u306b\u7d44\u307f\u8fbc\u307e\u308c\u3066\u3044\u3066\u3001\u30d1\u30d1\u3063\u3068~~\u30d1\u30af\u308b~~\u53c2\u8003\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u3053\u308d\u3002\u4eca\u56de\u306fBLE MIDI\u306a\u306e\u3067\u3059\u304c\u3001\u5b9f\u306f\u307e\u3060\u30b5\u30f3\u30d7\u30eb\u306b\u306f\u7d44\u307f\u8fbc\u307e\u308c\u3066\u304a\u3089\u305a\u3001\u3053\u308c\u3082\u307e\u305f\u30d2\u30e7\u30f3\u306a\u30ad\u30c3\u30ab\u30b1\u304b\u3089Github\u304b\u3089\u30b5\u30f3\u30d7\u30eb\u3092\u6398\u308a\u5f53\u3066\u307e\u3057\u305f\u3002\n[\u30b5\u30f3\u30d7\u30eb\u30d5\u30a1\u30a4\u30eb\u306f\u3053\u3053\u306b\u3042\u308a\u307e\u3059\u3002](https://github.com/01org/corelibs-arduino101/blob/master/libraries/CurieBLE/examples/MIDIBLE/MIDIBLE.ino)\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u30b5\u30f3\u30d7\u30eb\u3092\u66f8\u304d\u63db\u3048\u3066\u3044\u304d\u307e\u3059\u3002\n\n#BLE MIDI L\u30c1\u30ab\u30b3\u30fc\u30c9\n\u307b\u307c[\u30b5\u30f3\u30d7\u30eb](https://github.com/01org/corelibs-arduino101/blob/master/libraries/CurieBLE/examples/MIDIBLE/MIDIBLE.ino)\u306e\u6d41\u7528\u3067\u3001`midiCharacteristicWritten()`\u306eMethod\u3060\u3051\u3092\u5909\u66f4\u3057\u307e\u3057\u305f\u3002\u6319\u52d5\u306f\u305b\u3063\u304b\u304f**MIDI**\u306a\u306e\u3067**MIDI**\u611f\u3092\u5473\u308f\u3048\u308b\u3088\u3046\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u66f4\u3057\u3066\u3044\u307e\u3059\u3002\n - 0x90\uff1a\u70b9\u706f\n - \u305d\u308c\u4ee5\u5916\uff1a\u6d88\u706f\n\n\u305d\u308c\u304b\u3089L\u30c1\u30ab\u306a\u306e\u3067PIN\u306e\u756a\u53f7\u3068\u304b\u306e\u6307\u5b9a\u3082\u3057\u3066\u3044\u307e\u3059\u3002\n`int LED_PIN=13;`\n`pinMode(LED_PIN, OUTPUT);`\n\n\u305d\u3057\u3066\u3001L\u30c1\u30ab\u3092\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3059\u308b\u30a2\u30d7\u30ea\u306f\u3082\u3061\u308d\u3093**Web MIDI API**\u3092\u4f7f\u3063\u305f\u3082\u306e\u3092\u7528\u610f\u3057\u307e\u3057\u305f\u3002\n[MIDI\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u51fa\u3059\u70ba\u306eWeb\u30a2\u30d7\u30ea](https://ryoyakawai.github.io/arduino101/blemidi/l-chika/index.html)\n\n\uff08[\u3069\u3061\u3089\u306e\u30bd\u30fc\u30b9\u306f\u3053\u3061\u3089\u306b\u3042\u308a\u307e\u3059](https://github.com/ryoyakawai/arduino101/tree/master/blemidi/l-chika)\uff09\n\n```cpp\n#include <CurieBLE.h>\n\n#define TXRX_BUF_LEN              20 //max number of bytes\n#define RX_BUF_LEN                20 //max number of bytes\nuint8_t rx_buf[RX_BUF_LEN];\nint rx_buf_num, rx_state = 0;\nuint8_t rx_temp_buf[20];\nuint8_t outBufMidi[128];\n\n//Buffer to hold 5 bytes of MIDI data. Note the timestamp is forced\nuint8_t midiData[] = {0x80, 0x80, 0x00, 0x00, 0x00};\n\nBLEPeripheral midiDevice; // create peripheral instance\n\nBLEService midiSvc(\"03B80E5A-EDE8-4B33-A751-6CE34EC4C700\"); // create service\n\n// create switch characteristic and allow remote device to read and write\nBLECharacteristic midiChar(\"7772E5DB-3868-4112-A1A9-F2669D106BF3\", BLEWrite | BLEWriteWithoutResponse | BLENotify | BLERead, 5);\n\nint LED_PIN=13;\n\nvoid setup() {\n  Serial.begin(9600);\n\n  BLESetup();\n  Serial.println((\"Bluetooth device active, waiting for connections...\"));\n}\n\nvoid BLESetup()\n{\n  // set the local name peripheral advertises\n  midiDevice.setLocalName(\"Auxren\");\n  midiDevice.setDeviceName(\"Auxren\");\n\n  // set the UUID for the service this peripheral advertises\n  midiDevice.setAdvertisedServiceUuid(midiSvc.uuid());\n\n  // add service and characteristic\n  midiDevice.addAttribute(midiSvc);\n  midiDevice.addAttribute(midiChar);\n\n  // assign event handlers for connected, disconnected to peripheral\n  midiDevice.setEventHandler(BLEConnected, midiDeviceConnectHandler);\n  midiDevice.setEventHandler(BLEDisconnected, midiDeviceDisconnectHandler);\n\n  // assign event handlers for characteristic\n  midiChar.setEventHandler(BLEWritten, midiCharacteristicWritten);\n  // set an initial value for the characteristic\n  midiChar.setValue(midiData, 5);\n\n  // advertise the service\n  midiDevice.begin();\n\n  pinMode(LED_PIN, OUTPUT);\n}\n\nvoid loop() {\n}\n\nvoid midiDeviceConnectHandler(BLECentral& central) {\n  // central connected event handler\n  Serial.print(\"Connected event, central: \");\n  Serial.println(central.address());\n}\n\nvoid midiDeviceDisconnectHandler(BLECentral& central) {\n  // central disconnected event handler\n  Serial.print(\"Disconnected event, central: \");\n  Serial.println(central.address());\n}\n\nvoid midiCharacteristicWritten(BLECentral& central, BLECharacteristic& characteristic) { \n  if((midiChar.value())[2]==0x90) {\n    digitalWrite(LED_PIN, HIGH);\n  } else {\n    digitalWrite(LED_PIN, LOW);\n  }\n}\n```\n\n#\u52d5\u4f5c\u4e2d\u306e\u6620\u50cf\n\u30d6\u30ec\u3066\u3066\u30b9\u30df\u30de\u30bb\u30f3\uff1e\uff1c\nMac\u3068BLE MIDI\u3067\u63a5\u7d9a\u3059\u308b\u306e\u304c\u5c11\u3057\u9762\u5012\u306a\u306e\u3067\u3001\u6620\u50cf\u3092\u3054\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\uff08\u753b\u50cf\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u52d5\u753b\u304c\u898b\u3089\u308c\u307e\u3059\uff09\n[<img width=\"200\" alt=\"Screen Shot 2016-07-08 at 5.00.29 AM.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/61221/ba8a6335-4f5a-8331-6120-8c7ba4304056.png\">](https://goo.gl/photos/GEMo4d2rSQ646ah3A)\n\n#\u304a\u307e\u3051\nWeb\u30a2\u30d7\u30ea\u3069\u3046\u306a\u3063\u3066\u308b\u306e\uff1f\u3068\u3001\u6c17\u306b\u306a\u3063\u3066\u308b\u65b9\u306f\u3053\u3061\u3089\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n - [MIDI\u30c7\u30d0\u30a4\u30b9\u306e\u6e96\u5099\u4e0d\u8981\u3001Web MIDI API\u306e\u57fa\u790e(HTML5 Experts.jp)](https://html5experts.jp/ryoyakawai/16787/)\n - [Web MIDI API\u306e\u4f7f\u3044\u65b9\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb](https://webmusicdevelopers.appspot.com/codelabs/x-webmidi/index.html)\n", "tags": ["Arudiono", "BLE", "MIDI"]}