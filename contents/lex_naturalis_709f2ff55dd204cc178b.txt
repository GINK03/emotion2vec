{"context": " More than 1 year has passed since last update.\n\n\u5faa\u74b0\u7684\u30bb\u30eb\u30fb\u30aa\u30fc\u30c8\u30de\u30c8\u30f3\ntwitter\u3067\u898b\u304b\u3051\u3066\u8208\u5473\u3092\u6301\u3063\u305f\u306e\u3067\u66f8\u3044\u3066\u307f\u305f\u7cde\u30b3\u30fc\u30c9\u3002\n\nCCA\u306f\u30bb\u30eb\u30fb\u30aa\u30fc\u30c8\u30de\u30c8\u30f3\u306e\u4e00\u7a2e\u3067\u3001\u6982\u306d\u6b21\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3042\u308b\uff1a\n\n\u30bb\u30eb\u306fn\u6bb5\u968e\u306e\u72b6\u614b\u3092\u6301\u3064\uff08n\u6bb5\u968e\u76ee\u306e\u6b21\u306e\u72b6\u614b\u306f\u7b2c1\u6bb5\u968e\u306b\u5faa\u74b0\u3059\u308b\uff09\n\u5468\u56f2\u306b\u95be\u5024\u4ee5\u4e0a\u306e\u6b21\u6bb5\u968e\u30bb\u30eb\u304c\u3044\u308b\u3068\u304d\u3001\u81ea\u5206\u3082\u6b21\u30b9\u30c6\u30c3\u30d7\u3067\u6b21\u6bb5\u968e\u306b\u306a\u308b\n\n\u3057\u305f\u304c\u3063\u3066\uff1a\n\n\u8fd1\u508d\u306e\u7a2e\u985e\uff08\u30e0\u30fc\u30a2\u8fd1\u508d\u304b\u30d5\u30a9\u30f3\u30fb\u30ce\u30a4\u30de\u30f3\u8fd1\u508d\u304b\uff09\n\u8fd1\u508d\u306e\u7bc4\u56f2\n\u95be\u5024\n\u30bb\u30eb\u306e\u53d6\u308a\u3046\u308b\u72b6\u614b\u6570\n\n\u304c\u6307\u5b9a\u3055\u308c\u308c\u3070\u3001\u3053\u306e\u3088\u3046\u306a\u30bb\u30eb\u30fb\u30aa\u30fc\u30c8\u30de\u30c8\u30f3\u304c\u6c7a\u5b9a\u3055\u308c\u308b\u3002\n\u3053\u308c\u306b\u57fa\u3065\u3044\u3066\u30b3\u30fc\u30c9\u5316\u3055\u308c\u305fCCA\u306e\u30ab\u30bf\u30ed\u30b0\u304c\u4ee5\u4e0b\u306b\u3042\u308b\nhttp://www.mirekw.com/ca/rullex_cycl.html\n\u3053\u308c\u306b\u3057\u305f\u304c\u3063\u3066\u3001\u3053\u3053\u3067\u306f \"M 1 3 3\" \u3067\u300c\u30e0\u30fc\u30a2\u8fd1\u508d\u3001\u5468\u56f21\u8fd1\u508d\u3001\u95be\u50243\u3001\u72b6\u614b\u65703\u300d\u306eCCA\u3092\u8868\u3057\u3001\"N 1 1 14\"\u3067\u3001\u300c\u30d5\u30a9\u30f3\u30fb\u30ce\u30a4\u30de\u30f3\u8fd1\u508d\u3001\u5468\u56f21\u8fd1\u508d\u3001\u95be\u50241\u3001\u72b6\u614b\u657014\u300d\u306eCCA\u3092\u8868\u3059\u3053\u3068\u306b\u3059\u308b\u3002\n\n\u9069\u5f53\u306b\u66f8\u304f\nRepa\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u4f7f\u3063\u3066\u307e\u3059\u304c\uff08repa, repa-algorithms, gloss, gloss-raster\uff09\u3001\u3082\u306e\u51c4\u3044\u9069\u5f53\u306a\u306e\u3067\nghc -O3 -with-rtsopts=\"-N4 -H256m -K128m\" -threaded CCA.hs\n\n\u3068\u304b\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u306a\u3044\u3068\u30de\u30c8\u30e2\u306a\u901f\u5ea6\u306b\u306a\u308a\u307e\u305b\u3093\u3002\n\u30bb\u30eb\u306fHSV\u8272\u76f8\u74b0\u3092\u72b6\u614b\u6570\u3067\u5747\u7b49\u5206\u3057\u3066\u8272\u3092\u6c7a\u3081RGB\u306b\u5909\u63db\u3057\u3066\u7740\u8272\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u6052\u4f8b\u306e\u30a6\u30f3\u30b3\u30fc\u30c9\n\nCCA.hs\n{-# LANGUAGE ScopedTypeVariables #-}\nimport Control.Monad.ST (runST)\nimport System.Random (getStdRandom,random)\nimport System.Environment (getArgs)\nimport Data.Array.Repa as Repa\nimport Data.Array.Repa.Algorithms.Randomish (randomishIntArray)\nimport Graphics.Gloss.Interface.Pure.Game\nimport Graphics.Gloss.Data.Color\nimport Graphics.Gloss.Data.Picture\nimport Graphics.Gloss.Raster.Array\n\ndata Neighbour = Moore | Neumann deriving (Show, Eq)\n\ndata Rule = Rule { neighbour:: Neighbour\n                 , range::Int\n                 , threshold::Int\n                 , types::Int } deriving (Show, Eq)\n\nparse :: String -> Rule\nparse str = parse' (words str)\nparse' [w,x,y,z] = case w of\n  \"N\" -> Rule {neighbour=Neumann, range=read x, threshold=read y, types=read z}\n  \"M\" -> Rule {neighbour=Moore, range=read x, threshold=read y, types=read z}\n\ntype Field = Array U DIM2 Int\n\ninitialize :: (Int,Int) -> Rule -> IO Field\ninitialize (x,y) rule = do\n  seed <- getStdRandom random\n  return $ randomishIntArray (Z:.x:.y) 0 (types rule -1) seed\n\ncount :: Field -> DIM2 -> Rule -> Int\ncount f (Z :.x :.y) rule = case neighbour rule of\n  Moore -> sum $ Prelude.map check\n           [torus (i,j)|i<-[x-n..x+n],j<-[y-n..y+n]]\n  Neumann -> sum $ Prelude.map check\n           [torus (i,j)|i<-[x-n..x+n],j<-[y-n..y+n],(abs (x-i)+abs (y-j))<=n]\n  where\n      n = range rule\n      (Z :.xmax :.ymax) = extent f\n      torus (x,y) = ((mod x xmax),(mod y ymax))\n      check (i,j) = if f!(Z:.i:.j) == mod (f!(Z:.x:.y)+1) (types rule) then 1 else 0\n\naggregate :: Field -> Rule -> Field\naggregate f r = runST $ do\n  computeP $ Repa.traverse f id (\\_ sh -> count f sh r)   \n\nstep :: Rule -> Field -> Field\nstep rule f = runST $ do\n  computeP $ Repa.zipWith evolve f (aggregate f rule)\n    where evolve x y = if y >= (threshold rule) then mod (x+1) (types rule) else x\n\ntoRGB :: Float -> Color\ntoRGB n = case (hIdx::Int) of\n  0 -> makeColor v t p a\n  1 -> makeColor q v p a\n  2 -> makeColor p v t a\n  3 -> makeColor p q v a\n  4 -> makeColor t p v a\n  5 -> makeColor v p q a\n  _ -> error \"hsvToRGB: hue outside of range [0..360]\"\n  where\n  h = 360.0 * n\n  s = 0.7\n  v = 0.8\n  a = 0.9\n  hIdx = mod (floor (h / 60)) 6\n  f    = h/60 - fromIntegral (hIdx::Int)\n  p    = v*(1-s)\n  q    = v*(1-s*f)\n  t    = v*(1-s*(1-f))\n\nrender :: Rule -> Int -> Color\nrender r n = toRGB $ fromIntegral n /(fromIntegral $ types r)\n\nmain = do\n  str <- getArgs\n  let rule = parse $ str !! 0\n  ini <- initialize (size,size) rule\n  playArray dispmode (csize,csize) frq ini (Repa.map (render rule)) event (\\_ -> step rule)\n    where \n      dispmode =  (InWindow \"Cyclic Cellular Automaton\" fsize (40, 40))\n      frq = 50\n      size = 300\n      csize = 1\n      fsize = (csize*size,csize*size)\n      event (EventKey (MouseButton LeftButton) Down  _ _ ) _ = undefined\n      event  _ w = w\n\n\n\n\n\u4f7f\u3044\u65b9\n\u6b62\u3081\u305f\u3044\u3068\u304d\u306f\u753b\u9762\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068undefined\u3067\u4f8b\u5916\u3092\u5410\u3044\u3066\u6b7b\u306b\u307e\u3059\uff08\u304a\u624b\u8efd\uff09\u3002Esc\u30ad\u30fc\u3067\u3082\u53ef\uff08\u3053\u308c\u306fGloss\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4ed5\u69d8\uff09\u3002\n./CCA \"M 1 3 3\"\n./CCA \"N 1 1 14\"\n\n\n\u5b9f\u884c\u7d50\u679c\n\"M 1 3 3\"\n\n\"N 1 1 14\"\n\n\n\u611f\u60f3\n\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\uff1f\u3000\u4f55\u305d\u308c\u3001\u304a\u3044\u3057\u3044\u306e\uff1f\u3000\u306a\u7cde\u30b3\u30fc\u30c9\u3067\u3059\u304c\u610f\u5916\u306b\u904a\u3079\u307e\u3057\u305f\u3002\n# \u5faa\u74b0\u7684\u30bb\u30eb\u30fb\u30aa\u30fc\u30c8\u30de\u30c8\u30f3\ntwitter\u3067\u898b\u304b\u3051\u3066\u8208\u5473\u3092\u6301\u3063\u305f\u306e\u3067\u66f8\u3044\u3066\u307f\u305f\u7cde\u30b3\u30fc\u30c9\u3002\n\n<blockquote class=\"twitter-tweet\" lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">\u30bb\u30eb\u30fb\u30aa\u30fc\u30c8\u30de\u30c8\u30f3\u306b\u3064\u3044\u3066\u8abf\u3079\u3066\u3044\u305f\u3089\u3001\u300cCyclic Cellular Automata\u300d\u3068\u3044\u3046\u306e\u306b\u51fa\u304f\u308f\u3057\u305f\u3093\u3060\u3051\u3069\u3001\u52d5\u753b\u3092\u898b\u308b\u9650\u308a\u3001\u5b8c\u5168\u306b\u982d\u304a\u304b\u3057\u3044\u6319\u52d5\u3092\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u662f\u975e\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3044\u2026\u2026&#10;&#10;<a href=\"https://t.co/WUTJDWS9gF\">https://t.co/WUTJDWS9gF</a></p>&mdash; \u3048\u305b\u306f\u3089(\u4f3c\u975e\u539f\u91cd\u96c4) (@esehara) <a href=\"https://twitter.com/esehara/status/634946538016387074\">2015, 8\u6708 22</a></blockquote>\n\nCCA\u306f\u30bb\u30eb\u30fb\u30aa\u30fc\u30c8\u30de\u30c8\u30f3\u306e\u4e00\u7a2e\u3067\u3001\u6982\u306d\u6b21\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3042\u308b\uff1a\n\n1. \u30bb\u30eb\u306fn\u6bb5\u968e\u306e\u72b6\u614b\u3092\u6301\u3064\uff08n\u6bb5\u968e\u76ee\u306e\u6b21\u306e\u72b6\u614b\u306f\u7b2c1\u6bb5\u968e\u306b\u5faa\u74b0\u3059\u308b\uff09\n2. \u5468\u56f2\u306b\u95be\u5024\u4ee5\u4e0a\u306e\u6b21\u6bb5\u968e\u30bb\u30eb\u304c\u3044\u308b\u3068\u304d\u3001\u81ea\u5206\u3082\u6b21\u30b9\u30c6\u30c3\u30d7\u3067\u6b21\u6bb5\u968e\u306b\u306a\u308b\n\n\u3057\u305f\u304c\u3063\u3066\uff1a\n\n1. \u8fd1\u508d\u306e\u7a2e\u985e\uff08\u30e0\u30fc\u30a2\u8fd1\u508d\u304b\u30d5\u30a9\u30f3\u30fb\u30ce\u30a4\u30de\u30f3\u8fd1\u508d\u304b\uff09\n2. \u8fd1\u508d\u306e\u7bc4\u56f2\n3. \u95be\u5024\n4. \u30bb\u30eb\u306e\u53d6\u308a\u3046\u308b\u72b6\u614b\u6570\n\n\u304c\u6307\u5b9a\u3055\u308c\u308c\u3070\u3001\u3053\u306e\u3088\u3046\u306a\u30bb\u30eb\u30fb\u30aa\u30fc\u30c8\u30de\u30c8\u30f3\u304c\u6c7a\u5b9a\u3055\u308c\u308b\u3002\n\u3053\u308c\u306b\u57fa\u3065\u3044\u3066\u30b3\u30fc\u30c9\u5316\u3055\u308c\u305fCCA\u306e\u30ab\u30bf\u30ed\u30b0\u304c\u4ee5\u4e0b\u306b\u3042\u308b\n\nhttp://www.mirekw.com/ca/rullex_cycl.html\n\n\u3053\u308c\u306b\u3057\u305f\u304c\u3063\u3066\u3001\u3053\u3053\u3067\u306f \"M 1 3 3\" \u3067\u300c\u30e0\u30fc\u30a2\u8fd1\u508d\u3001\u5468\u56f21\u8fd1\u508d\u3001\u95be\u50243\u3001\u72b6\u614b\u65703\u300d\u306eCCA\u3092\u8868\u3057\u3001\"N 1 1 14\"\u3067\u3001\u300c\u30d5\u30a9\u30f3\u30fb\u30ce\u30a4\u30de\u30f3\u8fd1\u508d\u3001\u5468\u56f21\u8fd1\u508d\u3001\u95be\u50241\u3001\u72b6\u614b\u657014\u300d\u306eCCA\u3092\u8868\u3059\u3053\u3068\u306b\u3059\u308b\u3002\n\n# \u9069\u5f53\u306b\u66f8\u304f\n\nRepa\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u4f7f\u3063\u3066\u307e\u3059\u304c\uff08repa, repa-algorithms, gloss, gloss-raster\uff09\u3001\u3082\u306e\u51c4\u3044\u9069\u5f53\u306a\u306e\u3067\n\n```shell-session\nghc -O3 -with-rtsopts=\"-N4 -H256m -K128m\" -threaded CCA.hs\n```\n\n\u3068\u304b\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u306a\u3044\u3068\u30de\u30c8\u30e2\u306a\u901f\u5ea6\u306b\u306a\u308a\u307e\u305b\u3093\u3002\n\u30bb\u30eb\u306fHSV\u8272\u76f8\u74b0\u3092\u72b6\u614b\u6570\u3067\u5747\u7b49\u5206\u3057\u3066\u8272\u3092\u6c7a\u3081RGB\u306b\u5909\u63db\u3057\u3066\u7740\u8272\u3057\u3066\u3044\u307e\u3059\u3002\n\n## \u6052\u4f8b\u306e\u30a6\u30f3\u30b3\u30fc\u30c9\n```hs:CCA.hs\n{-# LANGUAGE ScopedTypeVariables #-}\nimport Control.Monad.ST (runST)\nimport System.Random (getStdRandom,random)\nimport System.Environment (getArgs)\nimport Data.Array.Repa as Repa\nimport Data.Array.Repa.Algorithms.Randomish (randomishIntArray)\nimport Graphics.Gloss.Interface.Pure.Game\nimport Graphics.Gloss.Data.Color\nimport Graphics.Gloss.Data.Picture\nimport Graphics.Gloss.Raster.Array\n\ndata Neighbour = Moore | Neumann deriving (Show, Eq)\n\ndata Rule = Rule { neighbour:: Neighbour\n                 , range::Int\n                 , threshold::Int\n                 , types::Int } deriving (Show, Eq)\n\nparse :: String -> Rule\nparse str = parse' (words str)\nparse' [w,x,y,z] = case w of\n  \"N\" -> Rule {neighbour=Neumann, range=read x, threshold=read y, types=read z}\n  \"M\" -> Rule {neighbour=Moore, range=read x, threshold=read y, types=read z}\n\ntype Field = Array U DIM2 Int\n\ninitialize :: (Int,Int) -> Rule -> IO Field\ninitialize (x,y) rule = do\n  seed <- getStdRandom random\n  return $ randomishIntArray (Z:.x:.y) 0 (types rule -1) seed\n\ncount :: Field -> DIM2 -> Rule -> Int\ncount f (Z :.x :.y) rule = case neighbour rule of\n  Moore -> sum $ Prelude.map check\n           [torus (i,j)|i<-[x-n..x+n],j<-[y-n..y+n]]\n  Neumann -> sum $ Prelude.map check\n           [torus (i,j)|i<-[x-n..x+n],j<-[y-n..y+n],(abs (x-i)+abs (y-j))<=n]\n  where\n      n = range rule\n      (Z :.xmax :.ymax) = extent f\n      torus (x,y) = ((mod x xmax),(mod y ymax))\n      check (i,j) = if f!(Z:.i:.j) == mod (f!(Z:.x:.y)+1) (types rule) then 1 else 0\n\naggregate :: Field -> Rule -> Field\naggregate f r = runST $ do\n  computeP $ Repa.traverse f id (\\_ sh -> count f sh r)   \n\nstep :: Rule -> Field -> Field\nstep rule f = runST $ do\n  computeP $ Repa.zipWith evolve f (aggregate f rule)\n    where evolve x y = if y >= (threshold rule) then mod (x+1) (types rule) else x\n\ntoRGB :: Float -> Color\ntoRGB n = case (hIdx::Int) of\n  0 -> makeColor v t p a\n  1 -> makeColor q v p a\n  2 -> makeColor p v t a\n  3 -> makeColor p q v a\n  4 -> makeColor t p v a\n  5 -> makeColor v p q a\n  _ -> error \"hsvToRGB: hue outside of range [0..360]\"\n  where\n  h = 360.0 * n\n  s = 0.7\n  v = 0.8\n  a = 0.9\n  hIdx = mod (floor (h / 60)) 6\n  f    = h/60 - fromIntegral (hIdx::Int)\n  p    = v*(1-s)\n  q    = v*(1-s*f)\n  t    = v*(1-s*(1-f))\n\nrender :: Rule -> Int -> Color\nrender r n = toRGB $ fromIntegral n /(fromIntegral $ types r)\n\nmain = do\n  str <- getArgs\n  let rule = parse $ str !! 0\n  ini <- initialize (size,size) rule\n  playArray dispmode (csize,csize) frq ini (Repa.map (render rule)) event (\\_ -> step rule)\n    where \n      dispmode =  (InWindow \"Cyclic Cellular Automaton\" fsize (40, 40))\n      frq = 50\n      size = 300\n      csize = 1\n      fsize = (csize*size,csize*size)\n      event (EventKey (MouseButton LeftButton) Down  _ _ ) _ = undefined\n      event  _ w = w\n\n```\n\n## \u4f7f\u3044\u65b9\n\u6b62\u3081\u305f\u3044\u3068\u304d\u306f\u753b\u9762\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068`undefined`\u3067\u4f8b\u5916\u3092\u5410\u3044\u3066\u6b7b\u306b\u307e\u3059\uff08\u304a\u624b\u8efd\uff09\u3002Esc\u30ad\u30fc\u3067\u3082\u53ef\uff08\u3053\u308c\u306fGloss\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4ed5\u69d8\uff09\u3002\n\n```shell-session\n./CCA \"M 1 3 3\"\n./CCA \"N 1 1 14\"\n```\n\n## \u5b9f\u884c\u7d50\u679c\n\n\"M 1 3 3\"\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-08-27 14.01.57.png](https://qiita-image-store.s3.amazonaws.com/0/33744/3ba6ca39-24cb-2bcb-c566-51271da4c2b1.png)\n\n\"N 1 1 14\"\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-08-27 14.02.11.png](https://qiita-image-store.s3.amazonaws.com/0/33744/3b73ee23-f8b1-9a12-5de6-1732451255d8.png)\n\n# \u611f\u60f3\n\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\uff1f\u3000\u4f55\u305d\u308c\u3001\u304a\u3044\u3057\u3044\u306e\uff1f\u3000\u306a\u7cde\u30b3\u30fc\u30c9\u3067\u3059\u304c\u610f\u5916\u306b\u904a\u3079\u307e\u3057\u305f\u3002\n", "tags": ["\u30ac\u30e9\u30af\u30bf", "\u60c5\u5f31"]}