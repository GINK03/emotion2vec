{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nRedshift \u306b\u304a\u3051\u308b Sort Key \u306e\uff11\u3064\u3067\u3042\u308b Interleaved Srot Key \u306b\u3064\u3044\u3066\u89e3\u8aac\u3092\u3057\u307e\u3059\u3002\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f\u3055\u3089\u3063\u3068\u3057\u304b\u8a18\u8ff0\u304c\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u79c1\u304c\u78ba\u8a8d\u3057\u305f\u516c\u958b\u3055\u308c\u305f\u60c5\u5831\u306e\u306a\u304b\u3067\u306f AWS Blog \u304c\u4e00\u756a\u8a73\u3057\u304f\u89e3\u8aac\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002\u672c\u7a3f\u306f\u3053\u3061\u3089\u306e Blog \u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u3092\u76ee\u7684\u3068\u3057\u307e\u3059\u3002\n\nSort Style\n\u5927\u304d\u304f\u5206\u3051\u3066 3 \u3064\u3042\u308a\u307e\u3059\u3002\n\nSingle-column Sort Key\ncolumn \u5358\u4f4d\u3067\u8a2d\u5b9a\u3055\u308c\u305f Key\u3002\nCompound Sort Key\ntable \u5358\u4f4d\u3067\u8a2d\u5b9a\u3055\u308c\u305f\u3082\u306e\u3067\u30012\u3064\u4ee5\u4e0a\u306e column \u306b\u5bfe\u3057\u3066\u30bb\u30c3\u30c8\u3055\u308c\u305f Key\u3002\u3044\u308f\u3086\u308b\u8907\u5408 Key \u3067\u3000Primary, Secondary \u3068 Key \u9593\u306b\u512a\u5148\u9806\u4f4d\u304c\u3042\u308a\u307e\u3059\u3002\nInterleaved Sort Key\ntable \u5358\u4f4d\u3067\u8a2d\u5b9a\u3055\u308c\u305f\u3082\u306e\u3067\u30011\u3064\u4ee5\u4e0a\u306e column \u306b\u5bfe\u3057\u3066\u30bb\u30c3\u30c8\u3055\u308c\u305f Key\u3002\n\n\u672c\u7a3f\u3067\u306f\u3001Interleaved Sort Key \u306b\u3064\u3044\u3066 Deep Dive \u3057\u3066\u307f\u307e\u3059\u3002\n\nInterleaved Sort Key\n\n\u5b9a\u5f0f\u5316\n\u7e70\u308a\u8fd4\u3057\u306b\u306a\u308a\u307e\u3059\u304c Interleaved Sort Key \u306b\u3064\u3044\u3066\u306f\u3053\u3061\u3089\u306e AWS Blog \u304c\u79c1\u304c\u77e5\u308b\u9650\u308a\u3001\u4e00\u756a\u8a73\u3057\u304f\u89e3\u8aac\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e Blog \u3092\u8aad\u3093\u3067\u7591\u554f\u70b9\u304c\u306a\u3044\u306e\u3067\u3042\u308c\u3070\u3001\u672c\u7a3f\u306b\u9593\u9055\u3044\u304c\u306a\u3044\u304b\u3054\u5354\u529b\u304f\u3060\u3055\u3044\uff57\n\u305d\u308c\u3067\u306f\u3001\u7279\u306b\u91cd\u8981\u3060\u3068\u601d\u3046\u4e00\u6587\u3092\u307e\u305a\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\nA table with interleaved keys arranges your data so each sort key column has equal importance.\n\nInterleaved Sort Key \u3092\u6307\u5b9a\u3057\u305f\u969b\u306b Redshift \u304c\u3069\u306e\u3088\u3046\u306b Table \u306e\u30c7\u30fc\u30bf\u3092\u5404 Block \u306b\u683c\u7d0d\u3059\u308b\u304b\u3092\u6700\u3082\u3088\u304f\u8868\u73fe\u3057\u3066\u3044\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u5404 Key \u306b\u306f Primary, Secondary \u3068\u3044\u3063\u305f\u9806\u5e8f\u4ed8\u3051\u306f\u306a\u304f\u3001\u3059\u3079\u3066\u304c\u5747\u7b49\u306b\u91cd\u8981\u306a\u306e\u3067\u3059\u3002\u5747\u7b49\u306b\u91cd\u8981\u3068\u306f\u3001\u5404 Key \u3092\u8ef8\u3068\u3057\u305f\u591a\u6b21\u5143\u7a7a\u9593\u306b\u540c\u3058\u91cd\u307f\u3067 Block \u3092\u914d\u7f6e\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u307e\u3059\u307e\u3059\u308f\u304b\u308a\u307e\u305b\u3093\u306d\u3002\u7c21\u5358\u306b\u3044\u3046\u3068\u3001Key \u304c 2 \u3064\u306a\u3089 2\u6b21\u5143\u5e73\u9762\u306b\u6b63\u65b9\u5f62\u3068\u306a\u308b\u3088\u3046\u306b\u3001Key \u304c 3 \u3064\u306a\u3089 3\u6b21\u5143\u7a7a\u9593\u306b\u7acb\u65b9\u4f53\u3068\u306a\u308b\u3088\u3046\u306b Block \u3092\u914d\u7f6e\u3059\u308b\u30a4\u30e1\u30fc\u30b8\u3067\u3059\u3002\nInterleaved Sort Key \u3092\u6301\u3064 Table \u306b\u304a\u3044\u3066\u3001scan \u3059\u308b\u5fc5\u8981\u306e\u3042\u308b Block \u6570\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u5f0f\u5316\u3067\u304d\u307e\u3059\u3002\nscan \u3059\u308b\u5fc5\u8981\u306e\u3042\u308b Block \u6570 = (Block \u7dcf\u6570)^{((n-k)/n)}\n\nn : Interleaved Sort Key \u3068\u3057\u3066\u6307\u5b9a\u3057\u305f Column \u6570\nk : Interleaved Sort Key \u306e\u3046\u3061 where \u53e5\u3067\u6307\u5b9a\u3057\u305f Column \u6570\n\n\u3053\u3053\u3067\u3001n, k \u306e\u5024\u57df\u306f\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002(Interleaved Sort Key \u306f\u6700\u5927 8 \u3064\u307e\u3067\u6307\u5b9a\u53ef\u80fd\u3067\u3059\u3002)\n1 \\leq n \\leq 8, 0 \\leq k \\leq 8\n\n\n\u5177\u4f53\u4f8b\n\u62bd\u8c61\u7684\u306a\u8a71\u306f\u3053\u308c\u304f\u3089\u3044\u306b\u7559\u3081\u3066\u3001\u5177\u4f53\u4f8b\u3092\u3042\u3052\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u30011,000,000 Block \u306e\u30c7\u30fc\u30bf\u3092\u6301\u3064 Table \u306b\u5bfe\u3057\u3066\u3001Interleaved Sort Key \u3068\u3057\u3066 2 Column \u3092\u6307\u5b9a\u3057\u305f\u3068\u3057\u307e\u3059\u3002\u3053\u306e\u3068\u304d\u3001n, k \u3068 scan \u3059\u308b\u5fc5\u8981\u306e\u3042\u308b Block \u6570\u3092\u307e\u3068\u3081\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n\nn\nk\nblocks to be scanned\n\n\n\n\n2\n0\n1,000,000^((2-0)/2)=1,000,000\n\n\n2\n1\n1,000,000^((2-1)/2)=1000\n\n\n2\n2\n1,000,000^((2-2)/2)=1\n\n\n\nInterleaved Sort Key \u3092\u4f7f\u3046\u3068\u30011,000,000 Block \u3042\u308b Table \u3067\u3082 2 \u3064\u306e Key \u3092\u6307\u5b9a\u3059\u308c\u3070 1 Block \u3092\u8d70\u67fb\u3059\u308b\u3060\u3051\u3067\u6e08\u3080\u306e\u3067\u3059\uff01 1,000,000 [Block] x 1 [MB/Block] = 1 [TB] \u3068\u3059\u308b\u3068\u9a5a\u7570\u7684\u306a I/O \u306e\u5c11\u306a\u3055\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\u3053\u308c\u3092\u56f3\u3092\u4f7f\u3063\u3066\u8aac\u660e\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002Interleaved Sort Key \u3068\u3057\u3066\u6307\u5b9a\u3057\u305f Column \u3092\u305d\u308c\u305e\u308c x, y \u3068\u3057\u305f\u3068\u304d\u30011,000,000\u500b\u306e Block \u306f 1,000 x 1,000 \u306e Grid \u72b6\u306b2\u6b21\u5143\u5e73\u9762\u306b\u5206\u5e03\u3057\u307e\u3059\u3002\u3088\u3063\u3066\u3001where \u53e5\u3067 x, y \u3092\u3069\u3061\u3089\u3082\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u306f\u30011,000 x 1,000 \u306e Grid \u3092\u3059\u3079\u3066\u8d70\u67fb\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001x, y \u306e\u3046\u3061\u3069\u3061\u3089\u304b\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u3001\u3042\u3068\u306f x (\u3082\u3057\u304f\u306f y) \u65b9\u5411\u306b\u8d70\u67fb\u3059\u308b\u3060\u3051\u3067\u6e08\u3080\u305f\u3081\u30011,000 Block\u304c\u8d70\u67fb\u5bfe\u8c61\u3068\u306a\u308a\u307e\u3059\u3002x, y \u306e2\u3064\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u30012 \u6b21\u5143\u5e73\u9762\u4e0a\u306e 1 \u70b9\u304c\u5b9a\u307e\u308b\u305f\u3081 1 Block \u3092\u8d70\u67fb\u3059\u308b\u3060\u3051\u3067\u6e08\u3080\u306e\u3067\u3059\u3002\n\n\nAWS Blog \u306e\u4f8b\u306b\u3064\u3044\u3066\n\u3044\u304b\u304b\u3067\u3057\u3087\u3046\u304b\u3002\u4ee5\u4e0a\u304c\u7406\u89e3\u3067\u304d\u308c\u3070, AWS Blog \u306e\u5185\u5bb9\u3082\u7406\u89e3\u3067\u304d\u308b\u306f\u305a\u3067\u3059\u3002\n\nFor fast filter queries without the need for indices or projections, Amazon Redshift now supports Interleaved Sort Keys, which will be deployed in every region over the next seven days. A table with interleaved keys arranges your data so each sort key column has equal importance. Interleaved sorts are most effective with highly selective queries that filter on multiple columns. Let\u2019s say you have a table with 100,000 1 MB blocks per column, and you often filter on one or more of four columns (date, customer, product, geography). You can create a compound sort key, sorting first by date, then customer, product, and finally geography. This will work well if your query filters on date, but can require a table scan of all 100,000 blocks if you only filter by geographic region. Interleaved sorting provides fast filtering, no matter which sort key columns you specify in your WHERE clause. If you filter by any one of the four sort key columns, you scan 5,600 blocks, or 100,000(3/4). If you filter by two columns, you reduce the scan to 316 blocks or 100,000(2/4). Finally, if you filter on all four sort keys, you scan a single block.\n\n\u3053\u306e\u90e8\u5206\u3067\u3059\u304c\u3001\u7406\u89e3\u3067\u304d\u307e\u3057\u305f\u3067\u3057\u3087\u3046\u304b\u3002100,000 blocks \u3092\u6301\u3064\u30c6\u30fc\u30d6\u30eb\u304c\u3042\u3063\u3066\u30011-4 column(date, customer, product, geography)\u3067 filter \u3059\u308b\u30b1\u30fc\u30b9\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002date, customer, product, geography \u306e\u9806\u3067 compound key \u3092\u8a2d\u5b9a\u3057\u305f\u5834\u5408\u3001date \u3067 filter \u3057\u305f\u5834\u5408\u306f\u52b9\u679c\u7684\u3067\u3059\u304c\u3001 geography \u3060\u3051\u3067 filter \u3057\u305f\u5834\u5408\u306f 100,000 blocks \u3059\u3079\u3066 scan \u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002filter \u3068\u3044\u3046\u306e\u306f\u3044\u308f\u3086\u308b\u30af\u30a8\u30ea\u306e where \u53e5\u3067\u6307\u5b9a\u3059\u308b\u3053\u3068\u3060\u3068\u601d\u3063\u3066\u3082\u3089\u3063\u3066\u7d50\u69cb\u3067\u3059\u3002\n\u4e00\u65b9\u3067\u3001Interleaved Sort Key \u3092\u540c\u3058\u304f 4 columns \u306b\u5bfe\u3057\u3066\u8a2d\u5b9a\u3057\u305f\u5834\u5408\u3001\u3069\u306e column \u3067 filter \u3057\u3066\u3082\u9ad8\u901f\u306b\u306a\u308a\u307e\u3059(\u3064\u307e\u308a\u3001100,000 blocks \u30d5\u30eb\u30b9\u30ad\u30e3\u30f3\u306f\u4e0d\u8981\u3002)\u3002\u305f\u3068\u3048\u3070\u30014\u3064\u306e\u3046\u30611\u3064\u3067 filter \u3057\u305f\u5834\u5408\u306f\u6700\u5927\u30675,600 blocks (100,000(3/4))\u30012\u3064\u3067 filter \u3057\u305f\u5834\u5408\u306f\u6700\u5927\u3067 316 blocks (100,000(2/4))\u30014\u3064\u3059\u3079\u3066\u3067 filter \u3057\u305f\u5834\u5408\u306f\u306a\u3093\u3068 1 block \u3092\u30b9\u30ad\u30e3\u30f3\u3059\u308b\u3060\u3051\u3067\u3044\u3044\u306e\u3067\u3059\u3002\n\u3053\u306e\u90e8\u5206\u306b\u3064\u3044\u3066\u306f\u3001\u5148\u306b\u5b9a\u5f0f\u5316\u6e08\u307f\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u307e\u3068\u3081\u3089\u308c\u307e\u3059\u3002\n\n\n\nn\nk\nblocks to be scanned\n\n\n\n\n4\n0\n100,000^((4-0)/4)=100,000\n\n\n4\n1\n100,000^((4-1)/4)=5,623\n\n\n4\n2\n100,000^((4-2)/4)=316\n\n\n4\n3\n100,000^((4-3)/4)=32\n\n\n4\n4\n100,000^((4-4)/4)=1\n\n\n\n4\u6b21\u5143\u7a7a\u9593\u306b block \u304c\u5747\u7b49\u306b\u914d\u7f6e\u3055\u308c\u3066\u3044\u3066\u3001\u6307\u5b9a\u3059\u308b Key \u304c\u5897\u3048\u308b\u306b\u3064\u308c\u3066\u8d70\u67fb\u5bfe\u8c61\u304c\u30c9\u30f3\u30c9\u30f3\u7d5e\u308a\u3053\u307e\u308c\u3066\u3044\u304f\u69d8\u5b50\u3092\u60f3\u50cf\u3057\u3066\u304f\u3060\u3055\u3044\u3002\"Sound like magic? No, it\u2019s just math.\" \u3068\u3044\u3063\u3066\u304a\u304d\u306a\u304c\u3089\u3001\u6570\u5b66\u7684\u306a\u8a71\u304c\u306a\u3044\u305f\u3081\u3001\u672c\u7a3f\u3067\u306f\u5b9a\u5f0f\u5316\u3092\u8a66\u307f\u307e\u3057\u305f\u3002\n\n\u305d\u308c\u305e\u308c\u306e\u7279\u5fb4\n\u305d\u308c\u3067\u306f compopund \u3068 interleaved \u306f\u3069\u306e\u3088\u3046\u306b\u4f7f\u308f\u3051\u305f\u3089\u3088\u3044\u306e\u3067\u3057\u3087\u3046\u304b\u3002Blog \u3067\u306f\u305d\u308c\u305e\u308c\u306e\u7279\u5fb4\u306b\u3064\u3044\u3066\u3082\u89e6\u308c\u3066\u3044\u307e\u3059\u3002\n\nThere are tradeoffs between using compound and interleaved sort keys. If the columns you query are always the same, you may be better off using compound sort keys. In the example above, a query filtering on the leading sort column, pageURL, runs 0.4 seconds faster using compound sort keys vs. interleaved sorting. This is not surprising, since compound keys favor leading columns. Depending on the nature of the dataset, vacuum time overheads can increase by 10-50% for interleaved sort keys vs. compound keys. If you have data that increases monotonically, such as dates, your interleaved sort order will skew over time, requiring you to run a vacuum operation to re-analyze the distribution and re-sort the data.\n\n\u3056\u3063\u3068\u307e\u3068\u3081\u308b\u3068\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\n- \u5e38\u306b\u540c\u3058\u30ab\u30e9\u30e0\u3067\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3059\u308b\u306a\u3089\u3070\u3001compound \u306e\u307b\u3046\u304c\u3044\u3044\n- Primary Key \u3067 filter \u3059\u308b\u5834\u5408\u306f\u3001compound \u306e\u307b\u3046\u304c interleaved \u3088\u308a 0.4\u79d2\u901f\u304b\u3063\u305f\n- \u30c7\u30fc\u30bf\u306e\u683c\u7d0d\u65b9\u5f0f\u306e\u90fd\u5408\u4e0a\u3001interleaved \u306e\u307b\u3046\u304c compound \u3088\u308a\u3082 vacuum \u306b\u304b\u304b\u308b\u6642\u9593\u304c 10 - 50 %\u5897\n- \u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u3088\u3046\u306b\u5358\u8abf\u5897\u52a0\u3059\u308b\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u306f\u3001interleaved \u306e\u5834\u5408\u30c7\u30fc\u30bf\u306e\u9806\u5e8f\u304c\u5f90\u3005\u306b\u52a3\u5316\u3057\u3066\u3044\u304f\u306e\u3067\u3001vacuum \u3057\u3066\u518d\u30bd\u30fc\u30c8\u304c\u5fc5\u8981\n\u4e0a\u3092\u307f\u308b\u3068 compound \u306e\u307b\u3046\u304c\u3044\u3044\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u79c1\u306e\u65b9\u3067\u4ed8\u3051\u52a0\u3048\u308b\u3068 compound \u304c\u512a\u308c\u3066\u3044\u308b\u306e\u306f Primary Key \u306e\u307f\u3067 filter \u3059\u308b\u30b1\u30fc\u30b9\u306b\u9650\u3089\u308c\u3066\u3044\u3066\u3001\u5b9a\u671f\u7684\u306b vacuum \u3059\u308b\u524d\u63d0\u3067\u3044\u308c\u3070\u3001interleaved \u3067\u30c6\u30fc\u30d6\u30eb\u5b9a\u7fa9\u3057\u3066\u304a\u3044\u305f\u307b\u3046\u304c\u30af\u30a8\u30ea\u306e\u878d\u901a\u304c\u304d\u304f\u306e\u3067\u7121\u96e3\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u304a\u308f\u308a\u306b\nInterleaved Sort Key \u306e\u51c4\u3055\u304c\u7406\u89e3\u3044\u305f\u3060\u3051\u307e\u3057\u305f\u3067\u3057\u3087\u3046\u304b\u3002\u5b9f\u611f\u3059\u308b\u305f\u3081\u306b AWS \u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3042\u308b Comparing Sort Styles \u306b\u5f93\u3063\u3066\u3001\u624b\u3092\u52d5\u304b\u3057\u3066\u307f\u308b\u3053\u3068\u3092\u30aa\u30b9\u30b9\u30e1\u3057\u307e\u3059\u3002\n# \u306f\u3058\u3081\u306b\nRedshift \u306b\u304a\u3051\u308b Sort Key \u306e\uff11\u3064\u3067\u3042\u308b Interleaved Srot Key \u306b\u3064\u3044\u3066\u89e3\u8aac\u3092\u3057\u307e\u3059\u3002[\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://docs.aws.amazon.com/redshift/latest/dg/t_Sorting_data.html)\u306b\u306f\u3055\u3089\u3063\u3068\u3057\u304b\u8a18\u8ff0\u304c\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u79c1\u304c\u78ba\u8a8d\u3057\u305f\u516c\u958b\u3055\u308c\u305f\u60c5\u5831\u306e\u306a\u304b\u3067\u306f [AWS Blog](https://aws.amazon.com/blogs/aws/quickly-filter-data-in-amazon-redshift-using-interleaved-sorting/) \u304c\u4e00\u756a\u8a73\u3057\u304f\u89e3\u8aac\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002\u672c\u7a3f\u306f\u3053\u3061\u3089\u306e Blog \u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u3092\u76ee\u7684\u3068\u3057\u307e\u3059\u3002\n\n# Sort Style\n\u5927\u304d\u304f\u5206\u3051\u3066 3 \u3064\u3042\u308a\u307e\u3059\u3002\n\n- Single-column Sort Key\n    column \u5358\u4f4d\u3067\u8a2d\u5b9a\u3055\u308c\u305f Key\u3002\n\n- Compound Sort Key\n    table \u5358\u4f4d\u3067\u8a2d\u5b9a\u3055\u308c\u305f\u3082\u306e\u3067\u30012\u3064\u4ee5\u4e0a\u306e column \u306b\u5bfe\u3057\u3066\u30bb\u30c3\u30c8\u3055\u308c\u305f Key\u3002\u3044\u308f\u3086\u308b\u8907\u5408 Key \u3067\u3000Primary, Secondary \u3068 Key \u9593\u306b\u512a\u5148\u9806\u4f4d\u304c\u3042\u308a\u307e\u3059\u3002\n\n- Interleaved Sort Key\n    table \u5358\u4f4d\u3067\u8a2d\u5b9a\u3055\u308c\u305f\u3082\u306e\u3067\u30011\u3064\u4ee5\u4e0a\u306e column \u306b\u5bfe\u3057\u3066\u30bb\u30c3\u30c8\u3055\u308c\u305f Key\u3002\n\n\u672c\u7a3f\u3067\u306f\u3001Interleaved Sort Key \u306b\u3064\u3044\u3066 Deep Dive \u3057\u3066\u307f\u307e\u3059\u3002\n\n# Interleaved Sort Key\n## \u5b9a\u5f0f\u5316\n\u7e70\u308a\u8fd4\u3057\u306b\u306a\u308a\u307e\u3059\u304c Interleaved Sort Key \u306b\u3064\u3044\u3066\u306f\u3053\u3061\u3089\u306e [AWS Blog](https://aws.amazon.com/blogs/aws/quickly-filter-data-in-amazon-redshift-using-interleaved-sorting/) \u304c\u79c1\u304c\u77e5\u308b\u9650\u308a\u3001\u4e00\u756a\u8a73\u3057\u304f\u89e3\u8aac\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e Blog \u3092\u8aad\u3093\u3067\u7591\u554f\u70b9\u304c\u306a\u3044\u306e\u3067\u3042\u308c\u3070\u3001\u672c\u7a3f\u306b\u9593\u9055\u3044\u304c\u306a\u3044\u304b\u3054\u5354\u529b\u304f\u3060\u3055\u3044\uff57\n\u305d\u308c\u3067\u306f\u3001\u7279\u306b\u91cd\u8981\u3060\u3068\u601d\u3046\u4e00\u6587\u3092\u307e\u305a\u7d39\u4ecb\u3057\u307e\u3059\u3002\n> A table with interleaved keys arranges your data so each sort key column has equal importance.\n\nInterleaved Sort Key \u3092\u6307\u5b9a\u3057\u305f\u969b\u306b Redshift \u304c\u3069\u306e\u3088\u3046\u306b Table \u306e\u30c7\u30fc\u30bf\u3092\u5404 Block \u306b\u683c\u7d0d\u3059\u308b\u304b\u3092\u6700\u3082\u3088\u304f\u8868\u73fe\u3057\u3066\u3044\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u5404 Key \u306b\u306f Primary, Secondary \u3068\u3044\u3063\u305f\u9806\u5e8f\u4ed8\u3051\u306f\u306a\u304f\u3001\u3059\u3079\u3066\u304c\u5747\u7b49\u306b\u91cd\u8981\u306a\u306e\u3067\u3059\u3002\u5747\u7b49\u306b\u91cd\u8981\u3068\u306f\u3001\u5404 Key \u3092\u8ef8\u3068\u3057\u305f\u591a\u6b21\u5143\u7a7a\u9593\u306b\u540c\u3058\u91cd\u307f\u3067 Block \u3092\u914d\u7f6e\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u307e\u3059\u307e\u3059\u308f\u304b\u308a\u307e\u305b\u3093\u306d\u3002\u7c21\u5358\u306b\u3044\u3046\u3068\u3001Key \u304c 2 \u3064\u306a\u3089 2\u6b21\u5143\u5e73\u9762\u306b\u6b63\u65b9\u5f62\u3068\u306a\u308b\u3088\u3046\u306b\u3001Key \u304c 3 \u3064\u306a\u3089 3\u6b21\u5143\u7a7a\u9593\u306b\u7acb\u65b9\u4f53\u3068\u306a\u308b\u3088\u3046\u306b Block \u3092\u914d\u7f6e\u3059\u308b\u30a4\u30e1\u30fc\u30b8\u3067\u3059\u3002\nInterleaved Sort Key \u3092\u6301\u3064 Table \u306b\u304a\u3044\u3066\u3001scan \u3059\u308b\u5fc5\u8981\u306e\u3042\u308b Block \u6570\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u5f0f\u5316\u3067\u304d\u307e\u3059\u3002\n\n```math\nscan \u3059\u308b\u5fc5\u8981\u306e\u3042\u308b Block \u6570 = (Block \u7dcf\u6570)^{((n-k)/n)}\n```\n\n```\nn : Interleaved Sort Key \u3068\u3057\u3066\u6307\u5b9a\u3057\u305f Column \u6570\nk : Interleaved Sort Key \u306e\u3046\u3061 where \u53e5\u3067\u6307\u5b9a\u3057\u305f Column \u6570\n```\n\u3053\u3053\u3067\u3001n, k \u306e\u5024\u57df\u306f\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002(Interleaved Sort Key \u306f\u6700\u5927 8 \u3064\u307e\u3067\u6307\u5b9a\u53ef\u80fd\u3067\u3059\u3002)\n\n```math\n1 \\leq n \\leq 8, 0 \\leq k \\leq 8\n```\n\n## \u5177\u4f53\u4f8b\n\u62bd\u8c61\u7684\u306a\u8a71\u306f\u3053\u308c\u304f\u3089\u3044\u306b\u7559\u3081\u3066\u3001\u5177\u4f53\u4f8b\u3092\u3042\u3052\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u30011,000,000 Block \u306e\u30c7\u30fc\u30bf\u3092\u6301\u3064 Table \u306b\u5bfe\u3057\u3066\u3001Interleaved Sort Key \u3068\u3057\u3066 2 Column \u3092\u6307\u5b9a\u3057\u305f\u3068\u3057\u307e\u3059\u3002\u3053\u306e\u3068\u304d\u3001n, k \u3068 scan \u3059\u308b\u5fc5\u8981\u306e\u3042\u308b Block \u6570\u3092\u307e\u3068\u3081\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n| n | k  | blocks to be scanned  |\n|---|---|---|\n| 2 | 0 | 1,000,000^((2-0)/2)=1,000,000 |\n| 2 | 1 | 1,000,000^((2-1)/2)=1000 |\n| 2 | 2 | 1,000,000^((2-2)/2)=1 |\n\nInterleaved Sort Key \u3092\u4f7f\u3046\u3068\u30011,000,000 Block \u3042\u308b Table \u3067\u3082 2 \u3064\u306e Key \u3092\u6307\u5b9a\u3059\u308c\u3070 1 Block \u3092\u8d70\u67fb\u3059\u308b\u3060\u3051\u3067\u6e08\u3080\u306e\u3067\u3059\uff01 1,000,000 [Block] x 1 [MB/Block] = 1 [TB] \u3068\u3059\u308b\u3068\u9a5a\u7570\u7684\u306a I/O \u306e\u5c11\u306a\u3055\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\u3053\u308c\u3092\u56f3\u3092\u4f7f\u3063\u3066\u8aac\u660e\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002Interleaved Sort Key \u3068\u3057\u3066\u6307\u5b9a\u3057\u305f Column \u3092\u305d\u308c\u305e\u308c x, y \u3068\u3057\u305f\u3068\u304d\u30011,000,000\u500b\u306e Block \u306f 1,000 x 1,000 \u306e Grid \u72b6\u306b2\u6b21\u5143\u5e73\u9762\u306b\u5206\u5e03\u3057\u307e\u3059\u3002\u3088\u3063\u3066\u3001where \u53e5\u3067 x, y \u3092\u3069\u3061\u3089\u3082\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u306f\u30011,000 x 1,000 \u306e Grid \u3092\u3059\u3079\u3066\u8d70\u67fb\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001x, y \u306e\u3046\u3061\u3069\u3061\u3089\u304b\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u3001\u3042\u3068\u306f x (\u3082\u3057\u304f\u306f y) \u65b9\u5411\u306b\u8d70\u67fb\u3059\u308b\u3060\u3051\u3067\u6e08\u3080\u305f\u3081\u30011,000 Block\u304c\u8d70\u67fb\u5bfe\u8c61\u3068\u306a\u308a\u307e\u3059\u3002x, y \u306e2\u3064\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u30012 \u6b21\u5143\u5e73\u9762\u4e0a\u306e 1 \u70b9\u304c\u5b9a\u307e\u308b\u305f\u3081 1 Block \u3092\u8d70\u67fb\u3059\u308b\u3060\u3051\u3067\u6e08\u3080\u306e\u3067\u3059\u3002\n\n![Interleaved.png](https://qiita-image-store.s3.amazonaws.com/0/19376/ca33fa8f-a025-3086-a7a2-e976de56f250.png)\n\n## AWS Blog \u306e\u4f8b\u306b\u3064\u3044\u3066\n\u3044\u304b\u304b\u3067\u3057\u3087\u3046\u304b\u3002\u4ee5\u4e0a\u304c\u7406\u89e3\u3067\u304d\u308c\u3070, AWS Blog \u306e\u5185\u5bb9\u3082\u7406\u89e3\u3067\u304d\u308b\u306f\u305a\u3067\u3059\u3002\n\n> For fast filter queries without the need for indices or projections, Amazon Redshift now supports Interleaved Sort Keys, which will be deployed in every region over the next seven days. A table with interleaved keys arranges your data so each sort key column has equal importance. Interleaved sorts are most effective with highly selective queries that filter on multiple columns. Let\u2019s say you have a table with 100,000 1 MB blocks per column, and you often filter on one or more of four columns (date, customer, product, geography). You can create a compound sort key, sorting first by date, then customer, product, and finally geography. This will work well if your query filters on date, but can require a table scan of all 100,000 blocks if you only filter by geographic region. Interleaved sorting provides fast filtering, no matter which sort key columns you specify in your WHERE clause. If you filter by any one of the four sort key columns, you scan 5,600 blocks, or 100,000(3/4). If you filter by two columns, you reduce the scan to 316 blocks or 100,000(2/4). Finally, if you filter on all four sort keys, you scan a single block.\n\n\u3053\u306e\u90e8\u5206\u3067\u3059\u304c\u3001\u7406\u89e3\u3067\u304d\u307e\u3057\u305f\u3067\u3057\u3087\u3046\u304b\u3002100,000 blocks \u3092\u6301\u3064\u30c6\u30fc\u30d6\u30eb\u304c\u3042\u3063\u3066\u30011-4 column(date, customer, product, geography)\u3067 filter \u3059\u308b\u30b1\u30fc\u30b9\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002date, customer, product, geography \u306e\u9806\u3067 compound key \u3092\u8a2d\u5b9a\u3057\u305f\u5834\u5408\u3001date \u3067 filter \u3057\u305f\u5834\u5408\u306f\u52b9\u679c\u7684\u3067\u3059\u304c\u3001 geography \u3060\u3051\u3067 filter \u3057\u305f\u5834\u5408\u306f 100,000 blocks \u3059\u3079\u3066 scan \u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002filter \u3068\u3044\u3046\u306e\u306f\u3044\u308f\u3086\u308b\u30af\u30a8\u30ea\u306e where \u53e5\u3067\u6307\u5b9a\u3059\u308b\u3053\u3068\u3060\u3068\u601d\u3063\u3066\u3082\u3089\u3063\u3066\u7d50\u69cb\u3067\u3059\u3002\n\u4e00\u65b9\u3067\u3001Interleaved Sort Key \u3092\u540c\u3058\u304f 4 columns \u306b\u5bfe\u3057\u3066\u8a2d\u5b9a\u3057\u305f\u5834\u5408\u3001\u3069\u306e column \u3067 filter \u3057\u3066\u3082\u9ad8\u901f\u306b\u306a\u308a\u307e\u3059(\u3064\u307e\u308a\u3001100,000 blocks \u30d5\u30eb\u30b9\u30ad\u30e3\u30f3\u306f\u4e0d\u8981\u3002)\u3002\u305f\u3068\u3048\u3070\u30014\u3064\u306e\u3046\u30611\u3064\u3067 filter \u3057\u305f\u5834\u5408\u306f\u6700\u5927\u30675,600 blocks (100,000(3/4))\u30012\u3064\u3067 filter \u3057\u305f\u5834\u5408\u306f\u6700\u5927\u3067 316 blocks (100,000(2/4))\u30014\u3064\u3059\u3079\u3066\u3067 filter \u3057\u305f\u5834\u5408\u306f\u306a\u3093\u3068 1 block \u3092\u30b9\u30ad\u30e3\u30f3\u3059\u308b\u3060\u3051\u3067\u3044\u3044\u306e\u3067\u3059\u3002\n\u3053\u306e\u90e8\u5206\u306b\u3064\u3044\u3066\u306f\u3001\u5148\u306b\u5b9a\u5f0f\u5316\u6e08\u307f\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u307e\u3068\u3081\u3089\u308c\u307e\u3059\u3002\n\n| n | k  | blocks to be scanned  |\n|---|---|---|\n| 4 | 0 | 100,000^((4-0)/4)=100,000 |\n| 4 | 1 | 100,000^((4-1)/4)=5,623 |\n| 4 | 2 | 100,000^((4-2)/4)=316 |\n| 4 | 3 | 100,000^((4-3)/4)=32 |\n| 4 | 4 | 100,000^((4-4)/4)=1 |\n\n4\u6b21\u5143\u7a7a\u9593\u306b block \u304c\u5747\u7b49\u306b\u914d\u7f6e\u3055\u308c\u3066\u3044\u3066\u3001\u6307\u5b9a\u3059\u308b Key \u304c\u5897\u3048\u308b\u306b\u3064\u308c\u3066\u8d70\u67fb\u5bfe\u8c61\u304c\u30c9\u30f3\u30c9\u30f3\u7d5e\u308a\u3053\u307e\u308c\u3066\u3044\u304f\u69d8\u5b50\u3092\u60f3\u50cf\u3057\u3066\u304f\u3060\u3055\u3044\u3002\"Sound like magic? No, it\u2019s just math.\" \u3068\u3044\u3063\u3066\u304a\u304d\u306a\u304c\u3089\u3001\u6570\u5b66\u7684\u306a\u8a71\u304c\u306a\u3044\u305f\u3081\u3001\u672c\u7a3f\u3067\u306f\u5b9a\u5f0f\u5316\u3092\u8a66\u307f\u307e\u3057\u305f\u3002\n\n# \u305d\u308c\u305e\u308c\u306e\u7279\u5fb4\n\u305d\u308c\u3067\u306f compopund \u3068 interleaved \u306f\u3069\u306e\u3088\u3046\u306b\u4f7f\u308f\u3051\u305f\u3089\u3088\u3044\u306e\u3067\u3057\u3087\u3046\u304b\u3002Blog \u3067\u306f\u305d\u308c\u305e\u308c\u306e\u7279\u5fb4\u306b\u3064\u3044\u3066\u3082\u89e6\u308c\u3066\u3044\u307e\u3059\u3002\n> There are tradeoffs between using compound and interleaved sort keys. If the columns you query are always the same, you may be better off using compound sort keys. In the example above, a query filtering on the leading sort column, pageURL, runs 0.4 seconds faster using compound sort keys vs. interleaved sorting. This is not surprising, since compound keys favor leading columns. Depending on the nature of the dataset, vacuum time overheads can increase by 10-50% for interleaved sort keys vs. compound keys. If you have data that increases monotonically, such as dates, your interleaved sort order will skew over time, requiring you to run a vacuum operation to re-analyze the distribution and re-sort the data.\n\n\u3056\u3063\u3068\u307e\u3068\u3081\u308b\u3068\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\n- \u5e38\u306b\u540c\u3058\u30ab\u30e9\u30e0\u3067\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3059\u308b\u306a\u3089\u3070\u3001compound \u306e\u307b\u3046\u304c\u3044\u3044\n- Primary Key \u3067 filter \u3059\u308b\u5834\u5408\u306f\u3001compound \u306e\u307b\u3046\u304c interleaved \u3088\u308a 0.4\u79d2\u901f\u304b\u3063\u305f\n- \u30c7\u30fc\u30bf\u306e\u683c\u7d0d\u65b9\u5f0f\u306e\u90fd\u5408\u4e0a\u3001interleaved \u306e\u307b\u3046\u304c compound \u3088\u308a\u3082 vacuum \u306b\u304b\u304b\u308b\u6642\u9593\u304c 10 - 50 %\u5897\n- \u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u3088\u3046\u306b\u5358\u8abf\u5897\u52a0\u3059\u308b\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u306f\u3001interleaved \u306e\u5834\u5408\u30c7\u30fc\u30bf\u306e\u9806\u5e8f\u304c\u5f90\u3005\u306b\u52a3\u5316\u3057\u3066\u3044\u304f\u306e\u3067\u3001vacuum \u3057\u3066\u518d\u30bd\u30fc\u30c8\u304c\u5fc5\u8981\n\n\u4e0a\u3092\u307f\u308b\u3068 compound \u306e\u307b\u3046\u304c\u3044\u3044\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u79c1\u306e\u65b9\u3067\u4ed8\u3051\u52a0\u3048\u308b\u3068 compound \u304c\u512a\u308c\u3066\u3044\u308b\u306e\u306f Primary Key \u306e\u307f\u3067 filter \u3059\u308b\u30b1\u30fc\u30b9\u306b\u9650\u3089\u308c\u3066\u3044\u3066\u3001\u5b9a\u671f\u7684\u306b vacuum \u3059\u308b\u524d\u63d0\u3067\u3044\u308c\u3070\u3001interleaved \u3067\u30c6\u30fc\u30d6\u30eb\u5b9a\u7fa9\u3057\u3066\u304a\u3044\u305f\u307b\u3046\u304c\u30af\u30a8\u30ea\u306e\u878d\u901a\u304c\u304d\u304f\u306e\u3067\u7121\u96e3\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u304a\u308f\u308a\u306b\nInterleaved Sort Key \u306e\u51c4\u3055\u304c\u7406\u89e3\u3044\u305f\u3060\u3051\u307e\u3057\u305f\u3067\u3057\u3087\u3046\u304b\u3002\u5b9f\u611f\u3059\u308b\u305f\u3081\u306b AWS \u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3042\u308b [Comparing Sort Styles](http://docs.aws.amazon.com/redshift/latest/dg/t_Sorting_data-compare-sort-styles.html) \u306b\u5f93\u3063\u3066\u3001\u624b\u3092\u52d5\u304b\u3057\u3066\u307f\u308b\u3053\u3068\u3092\u30aa\u30b9\u30b9\u30e1\u3057\u307e\u3059\u3002\n", "tags": ["redshift", "AWS"]}