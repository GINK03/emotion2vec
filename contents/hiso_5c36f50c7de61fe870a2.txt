{"tags": ["C\u8a00\u8a9e", "\u30bd\u30fc\u30c8", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"], "context": "2016/07/18\u8ffd\u8a18\nCountingSort\u306b\u3064\u3044\u3066\u8aa4\u308a\u304c\u3042\u3063\u305f\u305f\u3081\u8a02\u6b63\u3057\u307e\u3057\u305f\n\n\u30bd\u30fc\u30c8\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u5168\u822c\u8003\u5bdf\n\n\u5178\u578b\u7684\u306a\u30bd\u30fc\u30c8\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u306f\u3001\u6700\u5584\u3067 O(nlogn)O(nlogn)O(n log n) \u3001\u6700\u60aa\u3067 O(n2)O(n2)O(n^2) \u3067\u3042\u308b\u3002\u7406\u60f3\u306f O(n)O(n)O(n) \u3067\u3042\u308b\u3002\n\u6bd4\u8f03\u30bd\u30fc\u30c8\u3067\u306f\u3001\u5fc5\u305a O(nlogn)O(nlogn)O(n log n) \u306e\u6bd4\u8f03\u304c\u5fc5\u8981\u3068\u306a\u308b\u3002\n\u6c4e\u7528\u624b\u6cd5\u306b\u3088\u308b\u5206\u985e\u3002\u633f\u5165\u3001\u4ea4\u63db\u3001\u9078\u629e\u3001\u30de\u30fc\u30b8\u306a\u3069\u304c\u3042\u308b\u3002\nWikipedia https://ja.wikipedia.org/wiki/\u30bd\u30fc\u30c8\n\n\u6388\u696d\u3067\u7fd2\u3063\u305f\u57fa\u672c\u7684\u306a\u30bd\u30fc\u30c8\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u307e\u3068\u3081\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u5b9f\u969b\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u5185\u90e8\u3092\u77e5\u3063\u3066\u3044\u3066\u640d\u306f\u306a\u3044\u306e\u3067\u899a\u66f8\u3067\u3059\u3002\n\n\u307e\u3068\u3081\u308b\u30bd\u30fc\u30c8\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n\n\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\n\u9078\u629e\u30bd\u30fc\u30c8\nCounting Sort\n\u30de\u30fc\u30b8\u30bd\u30fc\u30c8\n\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\n\u5947\u5076\u8ee2\u7f6e\u30bd\u30fc\u30c8\n\n\n\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\n\n\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8 (bubble sort) \u306f\u3001\u30bd\u30fc\u30c8\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u4e00\u3064\u3002\u96a3\u308a\u5408\u3046\u8981\u7d20\u306e\u5927\u5c0f\u3092\u6bd4\u8f03\u3057\u306a\u304c\u3089\u6574\u5217\u3055\u305b\u308b\u3053\u3068\u3002\u6700\u60aa\u8a08\u7b97\u6642\u9593\u304cO(n2)O(n2)O(n^2)\u3068\u9045\u3044\u304c\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u5358\u7d14\u3067\u5b9f\u88c5\u304c\u5bb9\u6613\u306a\u305f\u3081\u3001\u307e\u305f\u4e26\u5217\u51e6\u7406\u3068\u306e\u89aa\u548c\u6027\u304c\u9ad8\u3044\u3053\u3068\u304b\u3089\u3001\u3057\u3070\u3057\u3070\u7528\u3044\u3089\u308c\u308b\u3002\u5b89\u5b9a\u306a\u5185\u90e8\u30bd\u30fc\u30c8\u3002\u57fa\u672c\u4ea4\u63db\u6cd5\u3001\u96a3\u63a5\u4ea4\u63db\u6cd5\u3068\u3082\u3044\u3046\u3002\uff08\u5358\u306b\u4ea4\u63db\u6cd5\u3068\u8a00\u3046\u5834\u5408\u3082\u3042\u308b\uff09\nWikipedia https://ja.wikipedia.org/wiki/\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\n\n\u8981\u3059\u308b\u306b\u6a2a\u540c\u58eb\u306e\u5927\u5c0f\u3092\u6bd4\u8f03\u4ea4\u63db\u3092\u3072\u3068\u901a\u308a\u3057\u3066\u3001\u3055\u3089\u306b\u305d\u308c\u3092\u914d\u5217\u306e\u8981\u7d20\u6570\u56de\u884c\u3044\u307e\u3059\u3088\u3063\u3066\u3053\u3068\u3067\u3059\u306d\u3002\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u3067\u308f\u304b\u308a\u3084\u3059\u304f\u3001\u8ab0\u3082\u304c\u6700\u521d\u306b\u601d\u3044\u3064\u304f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304b\u306a\u30fc\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u7591\u4f3c\u30b3\u30fc\u30c9\nbubblesort(N)\n  for i = 0 to N.length-1\n    for j = N.length-1 downto i+1\n      if N[j] < N[j-1]\n        swap N[j] and N[j-1]\n\n\nC\u3067\u306e\u5b9f\u88c5\u4f8b\nint* bubbleSort(int* N, int len){\n  int i,j;\n\n  for(i=0; i<len; i++){\n    for(j=len-1; j>i; j--){\n      if(N[j] < N[j-1]){\n        temp = N[j];\n        N[j] = N[j-1];\n        N[j-1] = temp;\n      }\n    }\n  }\n\n  return N;\n}\n\n\n\u9078\u629e\u30bd\u30fc\u30c8\n\n\u9078\u629e\u30bd\u30fc\u30c8\uff08\u82f1: selection sort\uff09\u306f\u3001\u30bd\u30fc\u30c8\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u4e00\u3064\u3002\u914d\u5217\u3055\u308c\u305f\u8981\u7d20\u304b\u3089\u3001\u6700\u5927\u5024\u3084\u307e\u305f\u306f\u6700\u5c0f\u5024\u3092\u63a2\u7d22\u3057\u914d\u5217\u6700\u5f8c\u306e\u8981\u7d20\u3068\u5165\u308c\u66ff\u3048\u3092\u304a\u3053\u306a\u3046\u3053\u3068\u3002\u6700\u60aa\u8a08\u7b97\u6642\u9593\u304cO(n2)O(n2)O(n^2)\u3068\u9045\u3044\u304c\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u5358\u7d14\u3067\u5b9f\u88c5\u304c\u5bb9\u6613\u306a\u305f\u3081\u3001\u3057\u3070\u3057\u3070\u7528\u3044\u3089\u308c\u308b\u3002\u5185\u90e8\u30bd\u30fc\u30c8\u3002\u5b89\u5b9a\u30bd\u30fc\u30c8\u3067\u306f\u306a\u3044\u3002\nWikipedia https://ja.wikipedia.org/wiki/\u9078\u629e\u30bd\u30fc\u30c8\n\n\u914d\u5217\u4e2d\u306e\u6700\u5c0f\u3092\u9078\u629e\u3057\u3066\u3001\u305d\u308c\u3092\u5de6\u7aef\uff08\u6b63\u78ba\u306b\u306f\u30ad\u30fc\u306e\u5834\u6240\uff09\u306b\u79fb\u52d5\u3055\u305b\u307e\u3059\u3002\u3063\u3066\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u306d\u3002\u308f\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002\n\n\u7591\u4f3c\u30b3\u30fc\u30c9\nSelectionSort(A)\nfor i = 0 to A.length-1\n  mini = i\n  for j = i to A.length-1\n    if A[j] < A[mini]\n        mini = j\n  swap A[i] and A[mini]\n\n\nC\u3067\u306e\u5b9f\u88c5\u4f8b\nint selectionSort(int len, int *a){\n  int i, j, mini, tmp, count=0;\n\n  for(i=0; i<len; i++){\n    mini = i;\n\n    for(j=i+1; j<len; j++){\n      if(a[j] < a[mini]){\n        mini = j;\n      }\n    }\n\n    if(mini != i){\n      tmp = a[i];\n      a[i] = a[mini];\n      a[mini] = tmp;\n      count++;\n    }\n\n  }\n  return count;\n}\n\n\nCounting sort\n\nIn computer science, counting sort is an algorithm for sorting a collection of objects according to keys that are small integers; that is, it is an integer sorting algorithm. It operates by counting the number of objects that have each distinct key value, and using arithmetic on those counts to determine the positions of each key value in the output sequence. Its running time is linear in the number of items and the difference between the maximum and minimum key values, so it is only suitable for direct use in situations where the variation in keys is not significantly greater than the number of items. However, it is often used as a subroutine in another sorting algorithm, radix sort, that can handle larger keys more efficiently.\nWikipedia https://en.wikipedia.org/?title=Counting_sort\n\nworst case:  O(n)O(n)O(n)\n\u82f1\u8a9e\u306eWiki\u3057\u304b\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\nhttp://www.codereading.com/algo_and_ds/algo/counting_sort.html\n\u3053\u306e\u30da\u30fc\u30b8\u304c\u898b\u3084\u3059\u304f\u3001\u7406\u89e3\u3057\u3084\u3059\u3044\u3067\u3059\u306d\n\u30c7\u30fc\u30bf\u306e\u51fa\u73fe\u56de\u6570\u3092\u6570\u3048\u3066\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u4e26\u3079\u307e\u3057\u305f\u3063\u3066\u30bd\u30fc\u30c8\u3067\u3059\u3002\u308f\u308a\u3068\u308f\u304b\u308a\u3084\u3059\u3044\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\u30b3\u30fc\u30c9\u306f\u5c11\u3057\u8aad\u307f\u3065\u3089\u3044\u3067\u3059\u3002\n\n\u7591\u4f3c\u30b3\u30fc\u30c9\nCounting-Sort(A, B, k)\n  for i = 0 to k\n    do C[i] = 0\n  for j = 1 to length[A]\n    do C[A[j]] = C[A[j]]+1\n  /* C[i] now contains the number of elements equal to i */\n  for i = 1 to k\n  do C[i] = C[i] + C[i-1]\n  /* C[i] now contains the number of elements less than or equal to i */\n  for j = length[A] downto 1\n   do B[C[A[j]]] = A[j]\n   C[A[j]] = C[A[j]]-1\n\n\nC\u3067\u306e\u5b9f\u88c5\u4f8b\n#include <stdio.h>\n\n#define N 2000001\n\nint B[N], C[N];\n\nvoid countingSort(int A[], int B[], int k, int n){\n  int i, j;\n\n  for(i = 0; i <= k; i++){\n    C[i] = 0;\n  }\n  for(j = 1; j <= n; j++){\n    C[A[j]]++;\n  }   \n  for(i = 1; i <= k; i++){\n    C[i] = C[i] + C[i - 1];\n  } \n  for(j = n; j >= 1; j--){\n    B[C[A[j]]] = A[j];\n    C[A[j]]--;\n  }\n\n  for(i = 1; i <= n; i++){\n    printf(\"%d\", B[i]);\n    if(i != n) printf(\" \");\n  }\n  printf(\"\\n\");\n\n}\n\nint main(){\n  int A[N];\n  int i, j, n, k = 0;\n\n  //input\n  scanf(\"%d\", &n); \n  for(i = 1; i <= n; i++){\n    scanf(\"%d\", &A[i]);\n    if(k < A[i]) k = A[i];\n  }\n\n  //sort and out\n  countingSort(A, B, k, n);\n\n  return 0;\n}\n\n\n\u30de\u30fc\u30b8\u30bd\u30fc\u30c8\n\n\u30de\u30fc\u30b8\u30bd\u30fc\u30c8\u306f\u3001\u30bd\u30fc\u30c8\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3001\u65e2\u306b\u6574\u5217\u3057\u3066\u3042\u308b\u8907\u6570\u500b\u306e\u5217\u30921\u500b\u306e\u5217\u306b\u30de\u30fc\u30b8\u3059\u308b\u969b\u306b\u3001\u5c0f\u3055\u3044\u3082\u306e\u304b\u3089\u5148\u306b\u65b0\u3057\u3044\u5217\u306b\u4e26\u3079\u308c\u3070\u3001\u65b0\u3057\u3044\u5217\u3082\u6574\u5217\u3055\u308c\u3066\u3044\u308b\u3001\u3068\u3044\u3046\u30dc\u30c8\u30e0\u30a2\u30c3\u30d7\u306e\u5206\u5272\u7d71\u6cbb\u6cd5\u306b\u3088\u308b\u3002\u5927\u304d\u3044\u5217\u3092\u591a\u6570\u306e\u5217\u306b\u5206\u5272\u3057\u3001\u305d\u306e\u305d\u308c\u305e\u308c\u3092\u30de\u30fc\u30b8\u3059\u308b\u4f5c\u696d\u306f\u4e26\u5217\u5316\u3067\u304d\u308b\u3002\nnnn\u500b\u306e\u30c7\u30fc\u30bf\u3092\u542b\u3080\u914d\u5217\u3092\u30bd\u30fc\u30c8\u3059\u308b\u5834\u5408\u3001\u6700\u60aa\u8a08\u7b97\u91cfO(nlogn)O(nlogn)O(n log n)\u3067\u3042\u308b\u3002\u5206\u5272\u3068\u7d71\u5408\u306e\u5b9f\u88c5\u306b\u3082\u3088\u308b\u304c\u3001\u4e00\u822c\u306b\u5b89\u5b9a\u306a\u30bd\u30fc\u30c8\u3092\u5b9f\u88c5\u3067\u304d\u308b\u3002\u30a4\u30f3\u30d7\u30ec\u30fc\u30b9\u306a\u30bd\u30fc\u30c8\u3082\u63d0\u6848\u3055\u308c\u3066\u3044\u308b\u304c\u3001\u901a\u5e38O(n)O(n)O(n)\u306e\u5916\u90e8\u8a18\u61b6\u3092\u5fc5\u8981\u3068\u3059\u308b\nWikipedia https://ja.wikipedia.org/wiki/\u30de\u30fc\u30b8\u30bd\u30fc\u30c8\n\n\u30de\u30fc\u30b8\u30bd\u30fc\u30c8\u3092\u5b9f\u88c5\u3059\u308b\u5834\u5408\u3001\u307e\u305a\u6700\u521d\u306b\u5206\u5272\u3001\u305d\u306e\u5f8c\u307e\u305f\u7d50\u5408\u3068\u3044\u3046\u4f5c\u696d\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\u7d50\u5408\u3059\u308b\u904e\u7a0b\u3067\u914d\u5217\u304c\u30bd\u30fc\u30c8\u3055\u308c\u3066\u3086\u304d\u307e\u3059\u3002\n\u4ee5\u4e0b\u30b3\u30fc\u30c9\u3067\u306f\u518d\u5e30\u3092\u7528\u3044\u3066\u9577\u3044\u914d\u5217\u3092\u5206\u5272\u3057\u3001\u540c\u3058\u3088\u3046\u306b\u518d\u5e30\u3067\u30de\u30fc\u30b8\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u7591\u4f3c\u30b3\u30fc\u30c9\nMerge(A, left, mid, right)\n  n1 = mid - left;\n  n2 = right - mid;\n  create array L[0...n1], R[0...n2]\n  for i = 0 to n1-1\n    do L[i] = A[left + i]\n  for i = 0 to n2-1\n    do R[i] = A[mid + i]\n  L[n1] = SENTINEL\n  R[n2] = SENTINEL\n  i = 0;\n  j = 0;\n  for k = left to right-1\n    if L[i] <= R[j]\n      then A[k] = L[i]\n           i = i + 1\n      else A[k] = R[j]\n           j = j + 1\n\nMergeSort(A, left, right){\n  if left+1 < right\n    then mid = (left + right)/2;\n         call Merge-Sort(A, left, mid)\n         call Merge-Sort(A, mid, right)\n         call Merge(A, left, mid, right)\n\n\nC\u3067\u306e\u5b9f\u88c5\u4f8b\n#include<stdio.h>\n#include<stdlib.h>\n\n#define SENTINEL 1000000000\n\nint count=0;\n\nvoid mergeSort(int A[],int left,int right){\n  int i,mid;\n  if(left+1<right){\n    mid=(left+right)/2;\n    mergeSort(A,left,mid);\n    mergeSort(A,mid,right);\n    merge(A,left,mid,right);\n  }\n}\n\n\n\nvoid merge(int A[],int left,int mid,int right){\n  int n1,n2,i,j,k;\n  int *L,*R;\n  n1=mid-left;\n  n2=right-mid;\n  L=(int *)malloc(sizeof(int)*(n1+1));\n  R=(int *)malloc(sizeof(int)*(n2+1));\n  for(i=0;i<=n1-1;i++){\n    L[i]=A[left+i];\n  }\n  for(j=0;j<=n2-1;j++){\n    R[j]=A[mid+j];\n  }\n  L[n1]=SENTINEL;\n  R[n2]=SENTINEL;\n  i=0;\n  j=0;\n  for(k=left;k<=right-1;k++){\n   if(L[i]<=R[j]){\n      A[k]=L[i];\n      i++;\n      count++;\n    }\n    else{\n      A[k]=R[j];\n      j++;\n      count++;\n    }\n  }\n  free(L);\n  free(R);\n}\n\n\nmain(){\n  int A[500000];\n  int n,i;\n\n  scanf(\"%d\",&n);\n  for(i=0;i<n;i++){\n    scanf(\"%d\",&A[i]);\n  }\n  mergeSort(A,0,n);\n  for(i=0;i<n;i++){\n    printf(\"%d\",A[i]);\n    if(i<n-1)printf(\" \");\n  }\n  printf(\"\\n\");\n  printf(\"%d\\n\",count);\n  return 0;\n}\n\n\n\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\n\n\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8 (quicksort) \u306f\u30011960\u5e74\u306b\u30a2\u30f3\u30c8\u30cb\u30fc\u30fb\u30db\u30fc\u30a2\u304c\u958b\u767a\u3057\u305f\u30bd\u30fc\u30c8\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3002\u5206\u5272\u7d71\u6cbb\u6cd5\u306e\u4e00\u7a2e\u3002\n\u6700\u826f\u8a08\u7b97\u91cf\u304a\u3088\u3073\u5e73\u5747\u8a08\u7b97\u91cf\u306fO(nlogn)O(nlogn)O( n log n )\u3067\u3042\u308b\u3002\u4ed6\u306e\u30bd\u30fc\u30c8\u6cd5\u3068\u6bd4\u3079\u3066\u3001\u4e00\u822c\u7684\u306b\u6700\u3082\u9ad8\u901f\u3060\u3068\u3044\u308f\u308c\u3066\u3044\u308b\u304c\u5bfe\u8c61\u306e\u30c7\u30fc\u30bf\u306e\u4e26\u3073\u3084\u30c7\u30fc\u30bf\u306e\u6570\u306b\u3088\u3063\u3066\u306f\u5fc5\u305a\u3057\u3082\u901f\u3044\u308f\u3051\u3067\u306f\u306a\u304f\u3001\u6700\u60aa\u306e\u8a08\u7b97\u91cf\u306fO(n2)O(n2)O( n^2 )\u3067\u3042\u308b\u3002\u307e\u305f\u6570\u3005\u306e\u5909\u7a2e\u304c\u3042\u308b\u3002 \u5b89\u5b9a\u30bd\u30fc\u30c8\u3067\u306f\u306a\u3044\u3002\nWikipedia https://ja.wikipedia.org/wiki/\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\n\n\u914d\u5217\u306e1\u756a\u76ee\u306e\u8981\u7d20\u4ee5\u4e0a\u306e\u3082\u306e\u3092\u5de6\u304b\u3089\u63a2\u3057\u307e\u3059\u3001\u672a\u6e80\u306e\u3082\u306e\u3092\u53f3\u304b\u3089\u63a2\u3057\u307e\u3059\n\u5de6\u53f3\u3067\uff11\u3064\u3065\u3064\u898b\u3064\u304b\u3063\u305f\u3089\u3001\u4ea4\u63db\u3057\u307e\u3059\u3002\u3055\u3089\u306b\u63a2\u7d22\u306f\u7d9a\u304d\u307e\u3059\u3002\n\u5de6\u53f3\u306e\u30ad\u30fc\u304c\u3076\u3064\u304b\u3063\u305f\u3089\u305d\u306e\u4f4d\u7f6e\u3067\u5de6\u53f3\u306b\u51e6\u7406\u3092\u5206\u3051\u3001\u5185\u90e8\u3067\u5b8c\u5168\u306b\u30bd\u30fc\u30c8\u3055\u308c\u308b\u307e\u3067\u540c\u3058\u51e6\u7406\u3092\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3002\n\u3053\u306eURL\u304c\u53c2\u8003\u306b\u306a\u308b\u3067\u3057\u3087\u3046\nhttp://www.ics.kagoshima-u.ac.jp/~fuchida/edu/algorithm/sort-algorithm/quick-sort.html\n\u4ee5\u4e0b\u30b3\u30fc\u30c9\u3067\u306f\u518d\u5e30\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\n\n\u7591\u4f3c\u30b3\u30fc\u30c9\nPartition(A, p, r)\n  x = A[r]\n  i = p-1\n  for j = p to r-1\n    do if A[j] <= x\n      then i = i+1\n        exchange A[i] and A[j] \n  exchange A[i+1] and A[r]\n  return i+1\n\n\nQuicksort(A, p, r)\n  if p < r\n    then q = Partition(A, p, r)\n      run Quicksort(A, p, q-1)\n      run Quicksort(A, q+1, r)\n\n\nC\u3067\u306e\u5b9f\u88c5\u4f8b(Wikipedia\u3088\u308a)\ntypedef int value_type; /* \u30bd\u30fc\u30c8\u3059\u308b\u30ad\u30fc\u306e\u578b */\n\nvalue_type med3(value_type x, value_type y, value_type z)\n/* x, y, z \u306e\u4e2d\u9593\u5024\u3092\u8fd4\u3059 */\n{\n    if (x < y)\n        if (y < z) return y; else if (z < x) return x; else return z; else\n        if (z < y) return y; else if (x < z) return x; else return z;\n}\n\nvoid quicksort(value_type a[], int left, int right)\n/* \u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\n * a     : \u30bd\u30fc\u30c8\u3059\u308b\u914d\u5217\n * left  : \u30bd\u30fc\u30c8\u3059\u308b\u30c7\u30fc\u30bf\u306e\u958b\u59cb\u4f4d\u7f6e\n * right : \u30bd\u30fc\u30c8\u3059\u308b\u30c7\u30fc\u30bf\u306e\u7d42\u4e86\u4f4d\u7f6e\n */\n{\n    if (left < right) {\n        int i = left, j = right;\n        value_type tmp, pivot = med3(a[i], a[i + (j - i) / 2], a[j]); /* (i+j)/2\u3067\u306f\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3057\u3066\u3057\u307e\u3046 */\n        while (1) { /* a[] \u3092 pivot \u4ee5\u4e0a\u3068\u4ee5\u4e0b\u306e\u96c6\u307e\u308a\u306b\u5206\u5272\u3059\u308b */\n            while (a[i] < pivot) i++; /* a[i] >= pivot \u3068\u306a\u308b\u4f4d\u7f6e\u3092\u691c\u7d22 */\n            while (pivot < a[j]) j--; /* a[j] <= pivot \u3068\u306a\u308b\u4f4d\u7f6e\u3092\u691c\u7d22 */\n            if (i >= j) break;\n            tmp = a[i]; a[i] = a[j]; a[j] = tmp; /* a[i],a[j] \u3092\u4ea4\u63db */\n            i++; j--;\n        }\n        quicksort(a, left, i - 1);  /* \u5206\u5272\u3057\u305f\u5de6\u3092\u518d\u5e30\u7684\u306b\u30bd\u30fc\u30c8 */\n        quicksort(a, j + 1, right); /* \u5206\u5272\u3057\u305f\u53f3\u3092\u518d\u5e30\u7684\u306b\u30bd\u30fc\u30c8 */\n    }\n}\n\n\n\u5947\u5076\u8ee2\u7f6e\u30bd\u30fc\u30c8\n\n\u5947\u5076\u8ee2\u7f6e\u30bd\u30fc\u30c8\uff08\u304d\u3050\u3046\u3066\u3093\u3061\u30bd\u30fc\u30c8\u3001Odd-even Sort\uff09\u306f\u3001\u30bd\u30fc\u30c8\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u4e00\u3064\u3067\u3001\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\u3092\u3001\u6539\u826f\u3057\u305f\u3082\u306e\u3002\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\u3067\u306f\u30b9\u30ad\u30e3\u30f3\u3092\u4e00\u65b9\u5411\u306b\u9806\u6b21\u884c\u3046\u306e\u306b\u5bfe\u3057\u3001\u5947\u5076\u8ee2\u7f6e\u30bd\u30fc\u30c8\u3067\u306f\u30da\u30a2\u3054\u3068\u306b\u884c\u3046\u3002\n\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\u3068\u540c\u3058\u304f\u5b89\u5b9a\u306a\u5185\u90e8\u30bd\u30fc\u30c8\u3067\u3001\u6700\u60aa\u306e\u5834\u5408\u306e\u6642\u9593\u8a08\u7b97\u91cf\u306fO(n2)O(n2)O(n^2)\u3067\u3042\u308b\u3002\n\u30da\u30a2\u306e\u6bd4\u8f03\u306f\u4e92\u3044\u306b\u72ec\u7acb\u3067\u3042\u308b\u305f\u3081\u3001\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\u3068\u306f\u7570\u306a\u308a\u3001\u4e26\u5217\u52d5\u4f5c\u304c\u53ef\u80fd\u3067\u3042\u308b\u3002\nWikipedia https://ja.wikipedia.org/wiki/\u5947\u5076\u8ee2\u7f6e\u30bd\u30fc\u30c8\n\n\u306a\u3093\u3060\u304b\u540d\u524d\u304c\u3084\u305f\u3089\u3068\u304b\u3063\u3053\u3044\u3044\u306e\u3067\u5165\u308c\u3066\u307f\u307e\u3057\u305f\u3002\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u3053\u3046\u306a\u3063\u3066\u3044\u308b\u6a21\u69d8\u3002\n\n\u5947\u5076\u7f6e\u63db\u30bd\u30fc\u30c8\u306f\u3001\u5947\u6570\u756a\u76ee\u3068\u305d\u306e\u6b21\u306e\u5076\u6570\u756a\u76ee\u3092\u30da\u30a2 (Pair1) \u306b\u3057\u3066\u6bd4\u8f03\uff0f\u4ea4\u63db\u3057\u305f\u5f8c\u3001\u5076\u6570\u756a\u76ee\u3068\u305d\u306e\u6b21\u306e\u5947\u6570\u756a\u76ee\u3092\u30da\u30a2 (Pair2) \u306b\u3057\u3066\u6bd4\u8f03\uff0f\u4ea4\u63db\u3059\u308b\u3053\u3068\u3092\u7e70\u308a\u8fd4\u3059\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3042\u308b\u3002\nPair1:\uff081\u756a\u76ee\u30682\u756a\u76ee\u3092\u6bd4\u8f03\u30013\u756a\u76ee\u30684\u756a\u76ee\u3092\u6bd4\u8f03\u30015\u756a\u76ee\u30686\u756a\u76ee\u3092\u6bd4\u8f03\u3001\u2026\uff09\u306e\u5f8c\u306b\nPair2:\uff082\u756a\u76ee\u30683\u756a\u76ee\u3092\u6bd4\u8f03\u30014\u756a\u76ee\u30685\u756a\u76ee\u3092\u6bd4\u8f03\u30016\u756a\u76ee\u30687\u756a\u76ee\u3092\u6bd4\u8f03\u3001\u2026\uff09\u3092\u884c\u3046\u3002\u3053\u308c\u3092\u7e70\u308a\u8fd4\u3059\u3002\nWikipedia https://ja.wikipedia.org/wiki/\u5947\u5076\u8ee2\u7f6e\u30bd\u30fc\u30c8\n\n\n\u7591\u4f3c\u30b3\u30fc\u30c9\n\n\n\nC\u3067\u306e\u5b9f\u88c5\u4f8b\uff08Wikipedia\u3088\u308a\uff09\nint data[N] = { /* ... */ };\n  int flag = 1;\n  int i;\n\n  while(flag) {\n    flag = 0;\n    for (i = 0; i < N-1; i += 2) { /* Pair1 */\n      if (data[i] > data[i+1]) {\n        swap(&data[i], &data[i+1]);\n        flag = 1;\n      }\n    }\n    for (i = 1;i < N-1;i += 2) { /* Pair2 */\n      if (data[i] > data[i+1]) {\n        swap(&data[i], &data[i+1]);\n        flag = 1;\n      }\n    }\n  }\n\n\n\u307e\u3068\u3081\u3001\u8003\u5bdf\n\u5404\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u826f\u3044\u6240\u3001\u60aa\u3044\u3068\u3053\u308d\u304c\u3088\u304f\u308f\u304b\u308a\u307e\u3059\u306d\u3002\n\n\u8aad\u307f\u3084\u3059\u3055\n\u3000\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8 > \u9078\u629e\u30bd\u30fc\u30c8 > \u5947\u5076\u8ee2\u7f6e\u30bd\u30fc\u30c8 > \u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8 > \u30de\u30fc\u30b8\u30bd\u30fc\u30c8 > Counting Sort\n\u3000\u3053\u308c\u306f\u5b8c\u5168\u4e3b\u89b3\u3067\u3059\u306d\n\n\u8a08\u7b97\u91cf\n\nWorstCase\u3067\u306e\u6bd4\u8f03\n\n\n\u3000Counting Sort > \u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8 >= \u30de\u30fc\u30b8\u30bd\u30fc\u30c8 > \u9078\u629e\u30bd\u30fc\u30c8 >= \u5947\u5076\u8ee2\u7f6e\u30bd\u30fc\u30c8 >= \u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\n\u3000\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\uff1aO(n2)O(n2)O(n^2)\n\u3000\u5947\u5076\u8ee2\u7f6e\u30bd\u30fc\u30c8\uff1aO(n2)O(n2)O(n^2)\n\u3000\u9078\u629e\u30bd\u30fc\u30c8\uff1aO(n2)O(n2)O(n^2)\n\u3000CountingSort\uff1aO(n)O(n)O(n)\n\u3000\u30de\u30fc\u30b8\u30bd\u30fc\u30c8\uff1aO(nlogn)O(nlogn)O(n log n)\n\u3000\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\uff1aO(n2)O(n2)O(n^2)\n\u3000\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u306e\u6bd4\u8f03\u306b\u4e2d\u592e\u5024\u3092\u4f7f\u3063\u305f\u5834\u5408WorstCase\u306fO(nlogn)O(nlogn)O(n log n)\u3068\u306a\u308a\u307e\u3059\u3002\n\n\u30c7\u30fc\u30bf\u306e\u4e26\u3073\u306b\u5bfe\u3059\u308b\u8a08\u7b97\u91cf\u5206\u5e03\u3092\u8003\u616e\n\n\n\u3000Counting Sort > \u30de\u30fc\u30b8\u30bd\u30fc\u30c8 >= \u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8 > \u9078\u629e\u30bd\u30fc\u30c8 >= \u5947\u5076\u8ee2\u7f6e\u30bd\u30fc\u30c8 >= \u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\n\u3000\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\uff1a\u6700\u60aa\u3001\u6700\u826f\u5171\u306bO(n2)O(n2)O(n^2)\n\u3000\u5947\u5076\u8ee2\u7f6e\u30bd\u30fc\u30c8\uff1a\u6700\u60aa\u3001\u6700\u826f\u5171\u306bO(n2)O(n2)O(n^2)\n\u3000\u9078\u629e\u30bd\u30fc\u30c8\uff1a\u6700\u60aa\u3001\u6700\u826f\u5171\u306bO(n2)O(n2)O(n^2)\n\u3000CountingSort\uff1a\u6700\u60aa\u3001\u6700\u826f\u5171\u306bO(n)O(n)O(n)\u306e\u70ba\u6700\u901f\n\u3000\u30de\u30fc\u30b8\u30bd\u30fc\u30c8\uff1a\u6700\u60aa\u3001\u6700\u826f\u5171\u306bO(nlogn)O(nlogn)O(n log n)\u306e\u70ba\u6975\u3081\u3066\u9ad8\u901f\n\u3000\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\uff1a\u5e73\u5747\u8a08\u7b97\u6642\u9593\u304cO(nlogn)O(nlogn)O(n log n)\u306e\u70ba\u6975\u3081\u3066\u9ad8\u901f\n\n\u5fc5\u8981\u306a\u30e1\u30e2\u30ea\u91cf\n\u3000Counting Sort > \u30de\u30fc\u30b8\u30bd\u30fc\u30c8 > \u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8 > \u9078\u629e\u30bd\u30fc\u30c8 = \u5947\u5076\u8ee2\u7f6e\u30bd\u30fc\u30c8 = \u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\n\u3000\n\u3000\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\uff1aO(1)O(1)O(1)\n\u3000\u5947\u5076\u8ee2\u7f6e\u30bd\u30fc\u30c8\uff1bO(1)O(1)O(1)\n\u3000\u9078\u629e\u30bd\u30fc\u30c8\uff1aO(1)O(1)O(1)\n\u3000CountingSort\uff1aO(k)O(k)O(k) kkk\u306f\u30c7\u30fc\u30bf\u306e\u7bc4\u56f2\n\u3000\u30de\u30fc\u30b8\u30bd\u30fc\u30c8\uff1aO(n)O(n)O(n)\n\u3000\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\uff1aO(logn)O(logn)O(logn)\n\u3000CountingSort\u306f\u30c7\u30fc\u30bf\u306e\u7bc4\u56f2\u304c\u521d\u3081\u304b\u3089\u308f\u304b\u3063\u3066\u3044\u308b\u4e14\u3064\u3001\n\u3000\u305d\u306e\u7bc4\u56f2\u3092\u7db2\u7f85\u3059\u308b\u30e1\u30e2\u30ea\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n\u901f\u3055\n\u3000\u30de\u30b7\u30f3\u30b9\u30da\u30c3\u30af\u306b\u4f9d\u5b58\u3059\u308b\u90e8\u5206\u3082\u591a\u3044\u3067\u3059\u3002\n\u3000\u4f8b\u3048\u3070CountingSort\u306f\u5727\u5012\u7684\u306b\u6700\u901f\u3067\u3059\u304c\u3001\n\u3000\u5024\u306e\u7bc4\u56f2\u6b21\u7b2c\u3067\u5c0b\u5e38\u3058\u3083\u306a\u3044\u30e1\u30e2\u30ea\u91cf\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u3000\u307e\u305f\u3001\u30de\u30fc\u30b8\u30bd\u30fc\u30c8\u3068\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u3067\u306f\n\u3000\u5c0f\u3055\u306a\u30c7\u30fc\u30bf\u3067\u306f\u30de\u30fc\u30b8\u30bd\u30fc\u30c8\u304c\u901f\u304f\u3001\n\u3000\u8457\u3057\u304f\u5927\u304d\u306a\u30c7\u30fc\u30bf\u3067\u306f\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u304c\u901f\u3044\u3068\u8a00\u308f\u308c\u3066\u3044\u307e\u3059\u3002\n\u3000\u5b9f\u969b\u4ed6\u306e\u65b9\u304c\u30c6\u30b9\u30c8\u3057\u3001\u8868\u306b\u3057\u305f\u3082\u306e\u3067\u3082\u305d\u3046\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\n\u7d50\u5c40\u4f55\u304c\u6700\u5f37\u306a\u3093\u3060\u308d\n\u5df7\u3067\u306f\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u304c\u6700\u901f\u3068\u8a00\u308f\u308c\u3066\u307e\u3059\n\u5e73\u4eee\u540d\u306a\u3069\u5358\u7d14\u3067\u5024\u306e\u7bc4\u56f2\u304c\u6c7a\u307e\u3063\u3066\u3044\u308b\u5834\u5408\u6700\u901f\uff1aCountingSort\n\u8457\u3057\u304f\u30c7\u30fc\u30bf\u91cf\uff08\u5bb9\u91cf\uff09\u304c\u5927\u304d\u3044\u7269\uff1aQuickSort\n\u8457\u3057\u304f\u30c7\u30fc\u30bf\u91cf\uff08\u5bb9\u91cf\uff09\u304c\u5927\u304d\u304f\u306a\u3044\u3082\u306e\uff1aMargeSort\n\n\u3042\u3068\u304c\u304d\uff082016/07/18\u8ffd\u8a18\uff09\n\u65e5\u672c\u8a9eWikipedia\u306b\u60c5\u5831\u304c\u306a\u3044\u306e\u3067\u30e1\u30b8\u30e3\u30fc\u3084\u57fa\u672c\u7684\u3068\u306f\u8a00\u3044\u8f9b\u3044\u3067\u3059\u304c\nCountingSort\u3063\u3066\u3059\u3054\u3044\u5f37\u3044\u3093\u3058\u3083\u306a\u3044\u304b\u306a\u3063\u3066\u601d\u3044\u307e\u3057\u305f\u3002\n\u591a\u304f\u306e\u5834\u5408\u30c7\u30fc\u30bf\u7bc4\u56f2\u306f\u65ad\u5b9a\u3067\u304d\u307e\u3059\u3057\u3001\u30c7\u30fc\u30bf\u91cf\u306f\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u306b\u307b\u307c\u95a2\u308f\u308a\u307e\u305b\u3093\u3002\n\u305d\u306e\u4e0a\u5727\u5012\u7684\u306b\u6700\u901f\u3067\u3059\u3002\n\u305f\u3060\u3057\u3001\u30c7\u30fc\u30bf\u7bc4\u56f2\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u3068\u6b63\u3057\u3044\u7d50\u679c\u3068\u306a\u3089\u306a\u3044\u70ba\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u307e\u305f\u3001\u7bc4\u56f2\u304c\u5e83\u3044\u5834\u5408\u5c0f\u3055\u306a\u30c7\u30fc\u30bf\u3067\u3082\u5927\u91cf\u306e\u30e1\u30e2\u30ea\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u3042\u3068\u306f\u3001\u5b9f\u88c5\u3059\u308b\u969b\u7bc4\u56f2\u3092\u7db2\u7f85\u3057\u305f\u30ab\u30a6\u30f3\u30bf\u304c\u5fc5\u8981\u306a\u305f\u3081\u3001\u96e2\u6563\u7684\u306a\u3082\u306e\u306b\u306f\u3044\u3044\u3067\u3059\u304c\u3001\u9023\u7d9a\u7684\u306a\u3082\u306e\u306b\u306f\u4f7f\u3044\u3065\u3089\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u6700\u5f8c\u306b\u9593\u9055\u3063\u3066\u3044\u308b\u90e8\u5206\u304c\u3042\u308c\u3070\u3059\u3044\u307e\u305b\u3093\u3002\n\n\u53c2\u8003Web\nAizuOnlineJudge http://judge.u-aizu.ac.jp/onlinejudge/index.jsp\nWikipedia https://ja.wikipedia.org/wiki/\u30e1\u30a4\u30f3\u30da\u30fc\u30b8\n2016/07/18\u8ffd\u8a18\nCountingSort\u306b\u3064\u3044\u3066\u8aa4\u308a\u304c\u3042\u3063\u305f\u305f\u3081\u8a02\u6b63\u3057\u307e\u3057\u305f\n\n#\u30bd\u30fc\u30c8\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u5168\u822c\u8003\u5bdf\n>\u5178\u578b\u7684\u306a\u30bd\u30fc\u30c8\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u306f\u3001\u6700\u5584\u3067 $O(n log n)$ \u3001\u6700\u60aa\u3067 $O(n^2)$ \u3067\u3042\u308b\u3002\u7406\u60f3\u306f $O(n)$ \u3067\u3042\u308b\u3002\n\u6bd4\u8f03\u30bd\u30fc\u30c8\u3067\u306f\u3001\u5fc5\u305a $O(n log n)$ \u306e\u6bd4\u8f03\u304c\u5fc5\u8981\u3068\u306a\u308b\u3002\n>\u6c4e\u7528\u624b\u6cd5\u306b\u3088\u308b\u5206\u985e\u3002\u633f\u5165\u3001\u4ea4\u63db\u3001\u9078\u629e\u3001\u30de\u30fc\u30b8\u306a\u3069\u304c\u3042\u308b\u3002\nWikipedia https://ja.wikipedia.org/wiki/\u30bd\u30fc\u30c8\n\n\u6388\u696d\u3067\u7fd2\u3063\u305f\u57fa\u672c\u7684\u306a\u30bd\u30fc\u30c8\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u307e\u3068\u3081\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u5b9f\u969b\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u5185\u90e8\u3092\u77e5\u3063\u3066\u3044\u3066\u640d\u306f\u306a\u3044\u306e\u3067\u899a\u66f8\u3067\u3059\u3002\n\n#\u307e\u3068\u3081\u308b\u30bd\u30fc\u30c8\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n* \u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\n* \u9078\u629e\u30bd\u30fc\u30c8\n* Counting Sort\n* \u30de\u30fc\u30b8\u30bd\u30fc\u30c8\n* \u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\n* \u5947\u5076\u8ee2\u7f6e\u30bd\u30fc\u30c8\n\n##\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\n>\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8 (bubble sort) \u306f\u3001\u30bd\u30fc\u30c8\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u4e00\u3064\u3002\u96a3\u308a\u5408\u3046\u8981\u7d20\u306e\u5927\u5c0f\u3092\u6bd4\u8f03\u3057\u306a\u304c\u3089\u6574\u5217\u3055\u305b\u308b\u3053\u3068\u3002\u6700\u60aa\u8a08\u7b97\u6642\u9593\u304c$O(n^2)$\u3068\u9045\u3044\u304c\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u5358\u7d14\u3067\u5b9f\u88c5\u304c\u5bb9\u6613\u306a\u305f\u3081\u3001\u307e\u305f\u4e26\u5217\u51e6\u7406\u3068\u306e\u89aa\u548c\u6027\u304c\u9ad8\u3044\u3053\u3068\u304b\u3089\u3001\u3057\u3070\u3057\u3070\u7528\u3044\u3089\u308c\u308b\u3002\u5b89\u5b9a\u306a\u5185\u90e8\u30bd\u30fc\u30c8\u3002\u57fa\u672c\u4ea4\u63db\u6cd5\u3001\u96a3\u63a5\u4ea4\u63db\u6cd5\u3068\u3082\u3044\u3046\u3002\uff08\u5358\u306b\u4ea4\u63db\u6cd5\u3068\u8a00\u3046\u5834\u5408\u3082\u3042\u308b\uff09\nWikipedia https://ja.wikipedia.org/wiki/\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\n\n\u8981\u3059\u308b\u306b\u6a2a\u540c\u58eb\u306e\u5927\u5c0f\u3092\u6bd4\u8f03\u4ea4\u63db\u3092\u3072\u3068\u901a\u308a\u3057\u3066\u3001\u3055\u3089\u306b\u305d\u308c\u3092\u914d\u5217\u306e\u8981\u7d20\u6570\u56de\u884c\u3044\u307e\u3059\u3088\u3063\u3066\u3053\u3068\u3067\u3059\u306d\u3002\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u3067\u308f\u304b\u308a\u3084\u3059\u304f\u3001\u8ab0\u3082\u304c\u6700\u521d\u306b\u601d\u3044\u3064\u304f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304b\u306a\u30fc\u3068\u601d\u3044\u307e\u3059\u3002\n\n###\u7591\u4f3c\u30b3\u30fc\u30c9\n```c\nbubblesort(N)\n  for i = 0 to N.length-1\n    for j = N.length-1 downto i+1\n      if N[j] < N[j-1]\n        swap N[j] and N[j-1]\n```\n\n###C\u3067\u306e\u5b9f\u88c5\u4f8b\n```c\nint* bubbleSort(int* N, int len){\n  int i,j;\n\n  for(i=0; i<len; i++){\n    for(j=len-1; j>i; j--){\n      if(N[j] < N[j-1]){\n        temp = N[j];\n        N[j] = N[j-1];\n        N[j-1] = temp;\n      }\n    }\n  }\n  \n  return N;\n}\n```\n\n##\u9078\u629e\u30bd\u30fc\u30c8\n>\u9078\u629e\u30bd\u30fc\u30c8\uff08\u82f1: selection sort\uff09\u306f\u3001\u30bd\u30fc\u30c8\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u4e00\u3064\u3002\u914d\u5217\u3055\u308c\u305f\u8981\u7d20\u304b\u3089\u3001\u6700\u5927\u5024\u3084\u307e\u305f\u306f\u6700\u5c0f\u5024\u3092\u63a2\u7d22\u3057\u914d\u5217\u6700\u5f8c\u306e\u8981\u7d20\u3068\u5165\u308c\u66ff\u3048\u3092\u304a\u3053\u306a\u3046\u3053\u3068\u3002\u6700\u60aa\u8a08\u7b97\u6642\u9593\u304c$O(n^2)$\u3068\u9045\u3044\u304c\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u5358\u7d14\u3067\u5b9f\u88c5\u304c\u5bb9\u6613\u306a\u305f\u3081\u3001\u3057\u3070\u3057\u3070\u7528\u3044\u3089\u308c\u308b\u3002\u5185\u90e8\u30bd\u30fc\u30c8\u3002\u5b89\u5b9a\u30bd\u30fc\u30c8\u3067\u306f\u306a\u3044\u3002\nWikipedia https://ja.wikipedia.org/wiki/\u9078\u629e\u30bd\u30fc\u30c8\n\n\u914d\u5217\u4e2d\u306e\u6700\u5c0f\u3092\u9078\u629e\u3057\u3066\u3001\u305d\u308c\u3092\u5de6\u7aef\uff08\u6b63\u78ba\u306b\u306f\u30ad\u30fc\u306e\u5834\u6240\uff09\u306b\u79fb\u52d5\u3055\u305b\u307e\u3059\u3002\u3063\u3066\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u306d\u3002\u308f\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002\n\n###\u7591\u4f3c\u30b3\u30fc\u30c9\n```c\nSelectionSort(A)\nfor i = 0 to A.length-1\n  mini = i\n  for j = i to A.length-1\n    if A[j] < A[mini]\n        mini = j\n  swap A[i] and A[mini]\n```\n\n###C\u3067\u306e\u5b9f\u88c5\u4f8b\n```c\nint selectionSort(int len, int *a){\n  int i, j, mini, tmp, count=0;\n    \n  for(i=0; i<len; i++){\n    mini = i;\n \n    for(j=i+1; j<len; j++){\n      if(a[j] < a[mini]){\n        mini = j;\n      }\n    }\n \n    if(mini != i){\n      tmp = a[i];\n      a[i] = a[mini];\n      a[mini] = tmp;\n      count++;\n    }\n \n  }\n  return count;\n}\n```\n\n##Counting sort\n>In computer science, counting sort is an algorithm for sorting a collection of objects according to keys that are small integers; that is, it is an integer sorting algorithm. It operates by counting the number of objects that have each distinct key value, and using arithmetic on those counts to determine the positions of each key value in the output sequence. Its running time is linear in the number of items and the difference between the maximum and minimum key values, so it is only suitable for direct use in situations where the variation in keys is not significantly greater than the number of items. However, it is often used as a subroutine in another sorting algorithm, radix sort, that can handle larger keys more efficiently.\nWikipedia https://en.wikipedia.org/?title=Counting_sort\n\nworst case:  $O(n)$\n\n\u82f1\u8a9e\u306eWiki\u3057\u304b\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\nhttp://www.codereading.com/algo_and_ds/algo/counting_sort.html\n\u3053\u306e\u30da\u30fc\u30b8\u304c\u898b\u3084\u3059\u304f\u3001\u7406\u89e3\u3057\u3084\u3059\u3044\u3067\u3059\u306d\n\n\u30c7\u30fc\u30bf\u306e\u51fa\u73fe\u56de\u6570\u3092\u6570\u3048\u3066\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u4e26\u3079\u307e\u3057\u305f\u3063\u3066\u30bd\u30fc\u30c8\u3067\u3059\u3002\u308f\u308a\u3068\u308f\u304b\u308a\u3084\u3059\u3044\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\u30b3\u30fc\u30c9\u306f\u5c11\u3057\u8aad\u307f\u3065\u3089\u3044\u3067\u3059\u3002\n\n###\u7591\u4f3c\u30b3\u30fc\u30c9\n```c\nCounting-Sort(A, B, k)\n  for i = 0 to k\n    do C[i] = 0\n  for j = 1 to length[A]\n    do C[A[j]] = C[A[j]]+1\n  /* C[i] now contains the number of elements equal to i */\n  for i = 1 to k\n  do C[i] = C[i] + C[i-1]\n  /* C[i] now contains the number of elements less than or equal to i */\n  for j = length[A] downto 1\n   do B[C[A[j]]] = A[j]\n   C[A[j]] = C[A[j]]-1\n```\n\n###C\u3067\u306e\u5b9f\u88c5\u4f8b\n```c\n#include <stdio.h>\n  \n#define N 2000001\n  \nint B[N], C[N];\n\nvoid countingSort(int A[], int B[], int k, int n){\n  int i, j;\n    \n  for(i = 0; i <= k; i++){\n    C[i] = 0;\n  }\n  for(j = 1; j <= n; j++){\n    C[A[j]]++;\n  }   \n  for(i = 1; i <= k; i++){\n    C[i] = C[i] + C[i - 1];\n  } \n  for(j = n; j >= 1; j--){\n    B[C[A[j]]] = A[j];\n    C[A[j]]--;\n  }\n    \n  for(i = 1; i <= n; i++){\n    printf(\"%d\", B[i]);\n    if(i != n) printf(\" \");\n  }\n  printf(\"\\n\");\n \n}\n\nint main(){\n  int A[N];\n  int i, j, n, k = 0;\n    \n  //input\n  scanf(\"%d\", &n); \n  for(i = 1; i <= n; i++){\n    scanf(\"%d\", &A[i]);\n    if(k < A[i]) k = A[i];\n  }\n    \n  //sort and out\n  countingSort(A, B, k, n);\n    \n  return 0;\n}\n```\n\n##\u30de\u30fc\u30b8\u30bd\u30fc\u30c8\n>\u30de\u30fc\u30b8\u30bd\u30fc\u30c8\u306f\u3001\u30bd\u30fc\u30c8\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3001\u65e2\u306b\u6574\u5217\u3057\u3066\u3042\u308b\u8907\u6570\u500b\u306e\u5217\u30921\u500b\u306e\u5217\u306b\u30de\u30fc\u30b8\u3059\u308b\u969b\u306b\u3001\u5c0f\u3055\u3044\u3082\u306e\u304b\u3089\u5148\u306b\u65b0\u3057\u3044\u5217\u306b\u4e26\u3079\u308c\u3070\u3001\u65b0\u3057\u3044\u5217\u3082\u6574\u5217\u3055\u308c\u3066\u3044\u308b\u3001\u3068\u3044\u3046\u30dc\u30c8\u30e0\u30a2\u30c3\u30d7\u306e\u5206\u5272\u7d71\u6cbb\u6cd5\u306b\u3088\u308b\u3002\u5927\u304d\u3044\u5217\u3092\u591a\u6570\u306e\u5217\u306b\u5206\u5272\u3057\u3001\u305d\u306e\u305d\u308c\u305e\u308c\u3092\u30de\u30fc\u30b8\u3059\u308b\u4f5c\u696d\u306f\u4e26\u5217\u5316\u3067\u304d\u308b\u3002\n$n$\u500b\u306e\u30c7\u30fc\u30bf\u3092\u542b\u3080\u914d\u5217\u3092\u30bd\u30fc\u30c8\u3059\u308b\u5834\u5408\u3001\u6700\u60aa\u8a08\u7b97\u91cf$O(n log n)$\u3067\u3042\u308b\u3002\u5206\u5272\u3068\u7d71\u5408\u306e\u5b9f\u88c5\u306b\u3082\u3088\u308b\u304c\u3001\u4e00\u822c\u306b\u5b89\u5b9a\u306a\u30bd\u30fc\u30c8\u3092\u5b9f\u88c5\u3067\u304d\u308b\u3002\u30a4\u30f3\u30d7\u30ec\u30fc\u30b9\u306a\u30bd\u30fc\u30c8\u3082\u63d0\u6848\u3055\u308c\u3066\u3044\u308b\u304c\u3001\u901a\u5e38$O(n)$\u306e\u5916\u90e8\u8a18\u61b6\u3092\u5fc5\u8981\u3068\u3059\u308b\nWikipedia https://ja.wikipedia.org/wiki/\u30de\u30fc\u30b8\u30bd\u30fc\u30c8\n\n\u30de\u30fc\u30b8\u30bd\u30fc\u30c8\u3092\u5b9f\u88c5\u3059\u308b\u5834\u5408\u3001\u307e\u305a\u6700\u521d\u306b\u5206\u5272\u3001\u305d\u306e\u5f8c\u307e\u305f\u7d50\u5408\u3068\u3044\u3046\u4f5c\u696d\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\u7d50\u5408\u3059\u308b\u904e\u7a0b\u3067\u914d\u5217\u304c\u30bd\u30fc\u30c8\u3055\u308c\u3066\u3086\u304d\u307e\u3059\u3002\n\u4ee5\u4e0b\u30b3\u30fc\u30c9\u3067\u306f\u518d\u5e30\u3092\u7528\u3044\u3066\u9577\u3044\u914d\u5217\u3092\u5206\u5272\u3057\u3001\u540c\u3058\u3088\u3046\u306b\u518d\u5e30\u3067\u30de\u30fc\u30b8\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\n###\u7591\u4f3c\u30b3\u30fc\u30c9\n```c\nMerge(A, left, mid, right)\n  n1 = mid - left;\n  n2 = right - mid;\n  create array L[0...n1], R[0...n2]\n  for i = 0 to n1-1\n    do L[i] = A[left + i]\n  for i = 0 to n2-1\n    do R[i] = A[mid + i]\n  L[n1] = SENTINEL\n  R[n2] = SENTINEL\n  i = 0;\n  j = 0;\n  for k = left to right-1\n    if L[i] <= R[j]\n      then A[k] = L[i]\n           i = i + 1\n      else A[k] = R[j]\n           j = j + 1\n\nMergeSort(A, left, right){\n  if left+1 < right\n    then mid = (left + right)/2;\n         call Merge-Sort(A, left, mid)\n         call Merge-Sort(A, mid, right)\n         call Merge(A, left, mid, right)\n```\n\n###C\u3067\u306e\u5b9f\u88c5\u4f8b\n```c\n#include<stdio.h>\n#include<stdlib.h>\n \n#define SENTINEL 1000000000\n \nint count=0;\n \nvoid mergeSort(int A[],int left,int right){\n  int i,mid;\n  if(left+1<right){\n    mid=(left+right)/2;\n    mergeSort(A,left,mid);\n    mergeSort(A,mid,right);\n    merge(A,left,mid,right);\n  }\n}\n \n \n \nvoid merge(int A[],int left,int mid,int right){\n  int n1,n2,i,j,k;\n  int *L,*R;\n  n1=mid-left;\n  n2=right-mid;\n  L=(int *)malloc(sizeof(int)*(n1+1));\n  R=(int *)malloc(sizeof(int)*(n2+1));\n  for(i=0;i<=n1-1;i++){\n    L[i]=A[left+i];\n  }\n  for(j=0;j<=n2-1;j++){\n    R[j]=A[mid+j];\n  }\n  L[n1]=SENTINEL;\n  R[n2]=SENTINEL;\n  i=0;\n  j=0;\n  for(k=left;k<=right-1;k++){\n   if(L[i]<=R[j]){\n      A[k]=L[i];\n      i++;\n      count++;\n    }\n    else{\n      A[k]=R[j];\n      j++;\n      count++;\n    }\n  }\n  free(L);\n  free(R);\n}\n \n \nmain(){\n  int A[500000];\n  int n,i;\n \n  scanf(\"%d\",&n);\n  for(i=0;i<n;i++){\n    scanf(\"%d\",&A[i]);\n  }\n  mergeSort(A,0,n);\n  for(i=0;i<n;i++){\n    printf(\"%d\",A[i]);\n    if(i<n-1)printf(\" \");\n  }\n  printf(\"\\n\");\n  printf(\"%d\\n\",count);\n  return 0;\n}\n```\n\n##\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\n>\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8 (quicksort) \u306f\u30011960\u5e74\u306b\u30a2\u30f3\u30c8\u30cb\u30fc\u30fb\u30db\u30fc\u30a2\u304c\u958b\u767a\u3057\u305f\u30bd\u30fc\u30c8\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3002\u5206\u5272\u7d71\u6cbb\u6cd5\u306e\u4e00\u7a2e\u3002\n\u6700\u826f\u8a08\u7b97\u91cf\u304a\u3088\u3073\u5e73\u5747\u8a08\u7b97\u91cf\u306f$O( n log n )$\u3067\u3042\u308b\u3002\u4ed6\u306e\u30bd\u30fc\u30c8\u6cd5\u3068\u6bd4\u3079\u3066\u3001\u4e00\u822c\u7684\u306b\u6700\u3082\u9ad8\u901f\u3060\u3068\u3044\u308f\u308c\u3066\u3044\u308b\u304c\u5bfe\u8c61\u306e\u30c7\u30fc\u30bf\u306e\u4e26\u3073\u3084\u30c7\u30fc\u30bf\u306e\u6570\u306b\u3088\u3063\u3066\u306f\u5fc5\u305a\u3057\u3082\u901f\u3044\u308f\u3051\u3067\u306f\u306a\u304f\u3001\u6700\u60aa\u306e\u8a08\u7b97\u91cf\u306f$O( n^2 )$\u3067\u3042\u308b\u3002\u307e\u305f\u6570\u3005\u306e\u5909\u7a2e\u304c\u3042\u308b\u3002 \u5b89\u5b9a\u30bd\u30fc\u30c8\u3067\u306f\u306a\u3044\u3002\nWikipedia https://ja.wikipedia.org/wiki/\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\n\n\u914d\u5217\u306e1\u756a\u76ee\u306e\u8981\u7d20\u4ee5\u4e0a\u306e\u3082\u306e\u3092\u5de6\u304b\u3089\u63a2\u3057\u307e\u3059\u3001\u672a\u6e80\u306e\u3082\u306e\u3092\u53f3\u304b\u3089\u63a2\u3057\u307e\u3059\n\u5de6\u53f3\u3067\uff11\u3064\u3065\u3064\u898b\u3064\u304b\u3063\u305f\u3089\u3001\u4ea4\u63db\u3057\u307e\u3059\u3002\u3055\u3089\u306b\u63a2\u7d22\u306f\u7d9a\u304d\u307e\u3059\u3002\n\u5de6\u53f3\u306e\u30ad\u30fc\u304c\u3076\u3064\u304b\u3063\u305f\u3089\u305d\u306e\u4f4d\u7f6e\u3067\u5de6\u53f3\u306b\u51e6\u7406\u3092\u5206\u3051\u3001\u5185\u90e8\u3067\u5b8c\u5168\u306b\u30bd\u30fc\u30c8\u3055\u308c\u308b\u307e\u3067\u540c\u3058\u51e6\u7406\u3092\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3002\n\n\u3053\u306eURL\u304c\u53c2\u8003\u306b\u306a\u308b\u3067\u3057\u3087\u3046\nhttp://www.ics.kagoshima-u.ac.jp/~fuchida/edu/algorithm/sort-algorithm/quick-sort.html\n\n\u4ee5\u4e0b\u30b3\u30fc\u30c9\u3067\u306f\u518d\u5e30\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\n\n###\u7591\u4f3c\u30b3\u30fc\u30c9\n```c\nPartition(A, p, r)\n  x = A[r]\n  i = p-1\n  for j = p to r-1\n    do if A[j] <= x\n      then i = i+1\n        exchange A[i] and A[j] \n  exchange A[i+1] and A[r]\n  return i+1\n\n\nQuicksort(A, p, r)\n  if p < r\n    then q = Partition(A, p, r)\n      run Quicksort(A, p, q-1)\n      run Quicksort(A, q+1, r)\n```\n\n###C\u3067\u306e\u5b9f\u88c5\u4f8b(Wikipedia\u3088\u308a)\n```c\ntypedef int value_type; /* \u30bd\u30fc\u30c8\u3059\u308b\u30ad\u30fc\u306e\u578b */\n \nvalue_type med3(value_type x, value_type y, value_type z)\n/* x, y, z \u306e\u4e2d\u9593\u5024\u3092\u8fd4\u3059 */\n{\n    if (x < y)\n        if (y < z) return y; else if (z < x) return x; else return z; else\n        if (z < y) return y; else if (x < z) return x; else return z;\n}\n \nvoid quicksort(value_type a[], int left, int right)\n/* \u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\n * a     : \u30bd\u30fc\u30c8\u3059\u308b\u914d\u5217\n * left  : \u30bd\u30fc\u30c8\u3059\u308b\u30c7\u30fc\u30bf\u306e\u958b\u59cb\u4f4d\u7f6e\n * right : \u30bd\u30fc\u30c8\u3059\u308b\u30c7\u30fc\u30bf\u306e\u7d42\u4e86\u4f4d\u7f6e\n */\n{\n    if (left < right) {\n        int i = left, j = right;\n        value_type tmp, pivot = med3(a[i], a[i + (j - i) / 2], a[j]); /* (i+j)/2\u3067\u306f\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3057\u3066\u3057\u307e\u3046 */\n        while (1) { /* a[] \u3092 pivot \u4ee5\u4e0a\u3068\u4ee5\u4e0b\u306e\u96c6\u307e\u308a\u306b\u5206\u5272\u3059\u308b */\n            while (a[i] < pivot) i++; /* a[i] >= pivot \u3068\u306a\u308b\u4f4d\u7f6e\u3092\u691c\u7d22 */\n            while (pivot < a[j]) j--; /* a[j] <= pivot \u3068\u306a\u308b\u4f4d\u7f6e\u3092\u691c\u7d22 */\n            if (i >= j) break;\n            tmp = a[i]; a[i] = a[j]; a[j] = tmp; /* a[i],a[j] \u3092\u4ea4\u63db */\n            i++; j--;\n        }\n        quicksort(a, left, i - 1);  /* \u5206\u5272\u3057\u305f\u5de6\u3092\u518d\u5e30\u7684\u306b\u30bd\u30fc\u30c8 */\n        quicksort(a, j + 1, right); /* \u5206\u5272\u3057\u305f\u53f3\u3092\u518d\u5e30\u7684\u306b\u30bd\u30fc\u30c8 */\n    }\n}\n```\n\n##\u5947\u5076\u8ee2\u7f6e\u30bd\u30fc\u30c8\n>\u5947\u5076\u8ee2\u7f6e\u30bd\u30fc\u30c8\uff08\u304d\u3050\u3046\u3066\u3093\u3061\u30bd\u30fc\u30c8\u3001Odd-even Sort\uff09\u306f\u3001\u30bd\u30fc\u30c8\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u4e00\u3064\u3067\u3001\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\u3092\u3001\u6539\u826f\u3057\u305f\u3082\u306e\u3002\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\u3067\u306f\u30b9\u30ad\u30e3\u30f3\u3092\u4e00\u65b9\u5411\u306b\u9806\u6b21\u884c\u3046\u306e\u306b\u5bfe\u3057\u3001\u5947\u5076\u8ee2\u7f6e\u30bd\u30fc\u30c8\u3067\u306f\u30da\u30a2\u3054\u3068\u306b\u884c\u3046\u3002\n\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\u3068\u540c\u3058\u304f\u5b89\u5b9a\u306a\u5185\u90e8\u30bd\u30fc\u30c8\u3067\u3001\u6700\u60aa\u306e\u5834\u5408\u306e\u6642\u9593\u8a08\u7b97\u91cf\u306f$O(n^2)$\u3067\u3042\u308b\u3002\n\u30da\u30a2\u306e\u6bd4\u8f03\u306f\u4e92\u3044\u306b\u72ec\u7acb\u3067\u3042\u308b\u305f\u3081\u3001\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\u3068\u306f\u7570\u306a\u308a\u3001\u4e26\u5217\u52d5\u4f5c\u304c\u53ef\u80fd\u3067\u3042\u308b\u3002\nWikipedia https://ja.wikipedia.org/wiki/\u5947\u5076\u8ee2\u7f6e\u30bd\u30fc\u30c8\n\n\u306a\u3093\u3060\u304b\u540d\u524d\u304c\u3084\u305f\u3089\u3068\u304b\u3063\u3053\u3044\u3044\u306e\u3067\u5165\u308c\u3066\u307f\u307e\u3057\u305f\u3002\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u3053\u3046\u306a\u3063\u3066\u3044\u308b\u6a21\u69d8\u3002\n\n>\u5947\u5076\u7f6e\u63db\u30bd\u30fc\u30c8\u306f\u3001\u5947\u6570\u756a\u76ee\u3068\u305d\u306e\u6b21\u306e\u5076\u6570\u756a\u76ee\u3092\u30da\u30a2 (Pair1) \u306b\u3057\u3066\u6bd4\u8f03\uff0f\u4ea4\u63db\u3057\u305f\u5f8c\u3001\u5076\u6570\u756a\u76ee\u3068\u305d\u306e\u6b21\u306e\u5947\u6570\u756a\u76ee\u3092\u30da\u30a2 (Pair2) \u306b\u3057\u3066\u6bd4\u8f03\uff0f\u4ea4\u63db\u3059\u308b\u3053\u3068\u3092\u7e70\u308a\u8fd4\u3059\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3042\u308b\u3002\nPair1:\uff081\u756a\u76ee\u30682\u756a\u76ee\u3092\u6bd4\u8f03\u30013\u756a\u76ee\u30684\u756a\u76ee\u3092\u6bd4\u8f03\u30015\u756a\u76ee\u30686\u756a\u76ee\u3092\u6bd4\u8f03\u3001\u2026\uff09\u306e\u5f8c\u306b\nPair2:\uff082\u756a\u76ee\u30683\u756a\u76ee\u3092\u6bd4\u8f03\u30014\u756a\u76ee\u30685\u756a\u76ee\u3092\u6bd4\u8f03\u30016\u756a\u76ee\u30687\u756a\u76ee\u3092\u6bd4\u8f03\u3001\u2026\uff09\u3092\u884c\u3046\u3002\u3053\u308c\u3092\u7e70\u308a\u8fd4\u3059\u3002\nWikipedia https://ja.wikipedia.org/wiki/\u5947\u5076\u8ee2\u7f6e\u30bd\u30fc\u30c8\n\n###\u7591\u4f3c\u30b3\u30fc\u30c9\n```c\n\n```\n\n###C\u3067\u306e\u5b9f\u88c5\u4f8b\uff08Wikipedia\u3088\u308a\uff09\n```c\nint data[N] = { /* ... */ };\n  int flag = 1;\n  int i;\n \n  while(flag) {\n    flag = 0;\n    for (i = 0; i < N-1; i += 2) { /* Pair1 */\n      if (data[i] > data[i+1]) {\n        swap(&data[i], &data[i+1]);\n        flag = 1;\n      }\n    }\n    for (i = 1;i < N-1;i += 2) { /* Pair2 */\n      if (data[i] > data[i+1]) {\n        swap(&data[i], &data[i+1]);\n        flag = 1;\n      }\n    }\n  }\n```\n\n#\u307e\u3068\u3081\u3001\u8003\u5bdf\n\u5404\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u826f\u3044\u6240\u3001\u60aa\u3044\u3068\u3053\u308d\u304c\u3088\u304f\u308f\u304b\u308a\u307e\u3059\u306d\u3002\n\n###\u8aad\u307f\u3084\u3059\u3055\n\u3000**\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8 > \u9078\u629e\u30bd\u30fc\u30c8 > \u5947\u5076\u8ee2\u7f6e\u30bd\u30fc\u30c8 > \u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8 > \u30de\u30fc\u30b8\u30bd\u30fc\u30c8 > Counting Sort**\n\u3000\u3053\u308c\u306f\u5b8c\u5168\u4e3b\u89b3\u3067\u3059\u306d\n\n###\u8a08\u7b97\u91cf\n* WorstCase\u3067\u306e\u6bd4\u8f03  \n\n\u3000**Counting Sort > \u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8 >= \u30de\u30fc\u30b8\u30bd\u30fc\u30c8 > \u9078\u629e\u30bd\u30fc\u30c8 >= \u5947\u5076\u8ee2\u7f6e\u30bd\u30fc\u30c8 >= \u30d0\u30d6\u30eb\u30bd\u30fc\u30c8**\n\n\u3000\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\uff1a$O(n^2)$\n\u3000\u5947\u5076\u8ee2\u7f6e\u30bd\u30fc\u30c8\uff1a$O(n^2)$\n\u3000\u9078\u629e\u30bd\u30fc\u30c8\uff1a$O(n^2)$\n\u3000CountingSort\uff1a$O(n)$\n\u3000\u30de\u30fc\u30b8\u30bd\u30fc\u30c8\uff1a$O(n log n)$\n\u3000\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\uff1a$O(n^2)$\n\u3000\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u306e\u6bd4\u8f03\u306b\u4e2d\u592e\u5024\u3092\u4f7f\u3063\u305f\u5834\u5408WorstCase\u306f$O(n log n)$\u3068\u306a\u308a\u307e\u3059\u3002\n\n* \u30c7\u30fc\u30bf\u306e\u4e26\u3073\u306b\u5bfe\u3059\u308b\u8a08\u7b97\u91cf\u5206\u5e03\u3092\u8003\u616e  \n\n\u3000**Counting Sort > \u30de\u30fc\u30b8\u30bd\u30fc\u30c8 >= \u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8 > \u9078\u629e\u30bd\u30fc\u30c8 >= \u5947\u5076\u8ee2\u7f6e\u30bd\u30fc\u30c8 >= \u30d0\u30d6\u30eb\u30bd\u30fc\u30c8**\n\n\u3000\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\uff1a\u6700\u60aa\u3001\u6700\u826f\u5171\u306b$O(n^2)$\n\u3000\u5947\u5076\u8ee2\u7f6e\u30bd\u30fc\u30c8\uff1a\u6700\u60aa\u3001\u6700\u826f\u5171\u306b$O(n^2)$\n\u3000\u9078\u629e\u30bd\u30fc\u30c8\uff1a\u6700\u60aa\u3001\u6700\u826f\u5171\u306b$O(n^2)$\n\u3000CountingSort\uff1a\u6700\u60aa\u3001\u6700\u826f\u5171\u306b$O(n)$\u306e\u70ba\u6700\u901f\n\u3000\u30de\u30fc\u30b8\u30bd\u30fc\u30c8\uff1a\u6700\u60aa\u3001\u6700\u826f\u5171\u306b$O(n log n)$\u306e\u70ba\u6975\u3081\u3066\u9ad8\u901f\n\u3000\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\uff1a\u5e73\u5747\u8a08\u7b97\u6642\u9593\u304c$O(n log n)$\u306e\u70ba\u6975\u3081\u3066\u9ad8\u901f\n\n\n###\u5fc5\u8981\u306a\u30e1\u30e2\u30ea\u91cf\n\u3000**Counting Sort > \u30de\u30fc\u30b8\u30bd\u30fc\u30c8 > \u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8 > \u9078\u629e\u30bd\u30fc\u30c8 = \u5947\u5076\u8ee2\u7f6e\u30bd\u30fc\u30c8 = \u30d0\u30d6\u30eb\u30bd\u30fc\u30c8**\n\u3000\n\u3000\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\uff1a$O(1)$\n\u3000\u5947\u5076\u8ee2\u7f6e\u30bd\u30fc\u30c8\uff1b$O(1)$\n\u3000\u9078\u629e\u30bd\u30fc\u30c8\uff1a$O(1)$\n\u3000CountingSort\uff1a$O(k)$ $k$\u306f\u30c7\u30fc\u30bf\u306e\u7bc4\u56f2\n\u3000\u30de\u30fc\u30b8\u30bd\u30fc\u30c8\uff1a$O(n)$\n\u3000\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\uff1a$O(logn)$\n\n\u3000CountingSort\u306f\u30c7\u30fc\u30bf\u306e\u7bc4\u56f2\u304c\u521d\u3081\u304b\u3089\u308f\u304b\u3063\u3066\u3044\u308b\u4e14\u3064\u3001\n\u3000\u305d\u306e\u7bc4\u56f2\u3092\u7db2\u7f85\u3059\u308b\u30e1\u30e2\u30ea\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n###\u901f\u3055\n\u3000\u30de\u30b7\u30f3\u30b9\u30da\u30c3\u30af\u306b\u4f9d\u5b58\u3059\u308b\u90e8\u5206\u3082\u591a\u3044\u3067\u3059\u3002\n\u3000\u4f8b\u3048\u3070CountingSort\u306f\u5727\u5012\u7684\u306b\u6700\u901f\u3067\u3059\u304c\u3001\n\u3000\u5024\u306e\u7bc4\u56f2\u6b21\u7b2c\u3067\u5c0b\u5e38\u3058\u3083\u306a\u3044\u30e1\u30e2\u30ea\u91cf\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n\u3000\u307e\u305f\u3001\u30de\u30fc\u30b8\u30bd\u30fc\u30c8\u3068\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u3067\u306f\n\u3000\u5c0f\u3055\u306a\u30c7\u30fc\u30bf\u3067\u306f\u30de\u30fc\u30b8\u30bd\u30fc\u30c8\u304c\u901f\u304f\u3001\n\u3000\u8457\u3057\u304f\u5927\u304d\u306a\u30c7\u30fc\u30bf\u3067\u306f\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u304c\u901f\u3044\u3068\u8a00\u308f\u308c\u3066\u3044\u307e\u3059\u3002\n\u3000\u5b9f\u969b\u4ed6\u306e\u65b9\u304c\u30c6\u30b9\u30c8\u3057\u3001\u8868\u306b\u3057\u305f\u3082\u306e\u3067\u3082\u305d\u3046\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\n##\u7d50\u5c40\u4f55\u304c\u6700\u5f37\u306a\u3093\u3060\u308d\n\u5df7\u3067\u306f\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u304c\u6700\u901f\u3068\u8a00\u308f\u308c\u3066\u307e\u3059\n\n**\u5e73\u4eee\u540d\u306a\u3069\u5358\u7d14\u3067\u5024\u306e\u7bc4\u56f2\u304c\u6c7a\u307e\u3063\u3066\u3044\u308b\u5834\u5408\u6700\u901f\uff1aCountingSort\n\u8457\u3057\u304f\u30c7\u30fc\u30bf\u91cf\uff08\u5bb9\u91cf\uff09\u304c\u5927\u304d\u3044\u7269\uff1aQuickSort\n\u8457\u3057\u304f\u30c7\u30fc\u30bf\u91cf\uff08\u5bb9\u91cf\uff09\u304c\u5927\u304d\u304f\u306a\u3044\u3082\u306e\uff1aMargeSort**\n\n#\u3042\u3068\u304c\u304d\uff082016/07/18\u8ffd\u8a18\uff09\n\u65e5\u672c\u8a9eWikipedia\u306b\u60c5\u5831\u304c\u306a\u3044\u306e\u3067\u30e1\u30b8\u30e3\u30fc\u3084\u57fa\u672c\u7684\u3068\u306f\u8a00\u3044\u8f9b\u3044\u3067\u3059\u304c\n**CountingSort\u3063\u3066\u3059\u3054\u3044\u5f37\u3044**\u3093\u3058\u3083\u306a\u3044\u304b\u306a\u3063\u3066\u601d\u3044\u307e\u3057\u305f\u3002\n\u591a\u304f\u306e\u5834\u5408\u30c7\u30fc\u30bf\u7bc4\u56f2\u306f\u65ad\u5b9a\u3067\u304d\u307e\u3059\u3057\u3001\u30c7\u30fc\u30bf\u91cf\u306f\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u306b\u307b\u307c\u95a2\u308f\u308a\u307e\u305b\u3093\u3002\n\u305d\u306e\u4e0a\u5727\u5012\u7684\u306b\u6700\u901f\u3067\u3059\u3002\n\u305f\u3060\u3057\u3001\u30c7\u30fc\u30bf\u7bc4\u56f2\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u3068\u6b63\u3057\u3044\u7d50\u679c\u3068\u306a\u3089\u306a\u3044\u70ba\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u307e\u305f\u3001\u7bc4\u56f2\u304c\u5e83\u3044\u5834\u5408\u5c0f\u3055\u306a\u30c7\u30fc\u30bf\u3067\u3082\u5927\u91cf\u306e\u30e1\u30e2\u30ea\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u3042\u3068\u306f\u3001\u5b9f\u88c5\u3059\u308b\u969b\u7bc4\u56f2\u3092\u7db2\u7f85\u3057\u305f\u30ab\u30a6\u30f3\u30bf\u304c\u5fc5\u8981\u306a\u305f\u3081\u3001\u96e2\u6563\u7684\u306a\u3082\u306e\u306b\u306f\u3044\u3044\u3067\u3059\u304c\u3001\u9023\u7d9a\u7684\u306a\u3082\u306e\u306b\u306f\u4f7f\u3044\u3065\u3089\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u6700\u5f8c\u306b\u9593\u9055\u3063\u3066\u3044\u308b\u90e8\u5206\u304c\u3042\u308c\u3070\u3059\u3044\u307e\u305b\u3093\u3002\n\n#\u53c2\u8003Web\nAizuOnlineJudge http://judge.u-aizu.ac.jp/onlinejudge/index.jsp\nWikipedia https://ja.wikipedia.org/wiki/\u30e1\u30a4\u30f3\u30da\u30fc\u30b8\n"}