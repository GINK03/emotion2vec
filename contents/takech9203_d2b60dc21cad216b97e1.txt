{"context": " More than 1 year has passed since last update.SoftLayer\u3067\u306fCitrix NetScaler\u3068\u3044\u3046\u9ad8\u6a5f\u80fd\u306a\u8ca0\u8377\u5206\u6563\u88c5\u7f6e\u304c\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\u305f\u3060\u3057\u73fe\u6642\u70b9\u3067\u306f\u3001\u3053\u306eNetScaler\u306f\u3001SoftLayer\u306eAuto Scale\u3068\u9023\u643a\u3057\u305f\u8ca0\u8377\u5206\u6563\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u304a\u3089\u305a\u3001Auto Scale\u3067\u8ffd\u52a0\u3055\u308c\u305f\u4eee\u60f3\u30b5\u30fc\u30d0\u30fc\u3092\u3001\u81ea\u52d5\u7684\u306bNetScaler\u306e\u8ca0\u8377\u5206\u6563\u5bfe\u8c61\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n\u305d\u3053\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6a5f\u80fd\u3092\u5b9f\u73fe\u3059\u308bPython\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f7f\u3046\u3068\u3001SoftLayer\u306eAuto Scale\u3068NetScaler\u3092\u9023\u643a\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nSoftLayer\u306eAuto Scale\u3067\u8ffd\u52a0\u3055\u308c\u305f\u30b5\u30fc\u30d0\u30fc\u3092\u3001\u81ea\u52d5\u7684\u306bNetScaler\u306e\u8ca0\u8377\u5206\u6563\u30af\u30e9\u30b9\u30bf\u306b\u8ffd\u52a0\u3059\u308b\nSoftLayer\u306eAuto Scale\u3067\u524a\u9664\u3055\u308c\u305f\u30b5\u30fc\u30d0\u30fc\u3092\u3001\u81ea\u52d5\u7684\u306bNetScaler\u306e\u8ca0\u8377\u5206\u6563\u30af\u30e9\u30b9\u30bf\u304b\u3089\u524a\u9664\u3059\u308b\n\n\u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u306f\u3001SoftLayer\u306e\u7279\u5b9a\u306eAuto Scale Group(nsAutoScaleGroup)\u306e\u30b5\u30fc\u30d0\u30fc\u304c\u3001SoftLayer\u4e0a\u306e\u4eee\u60f3\u30b5\u30fc\u30d0\u30fc\u3068\u3057\u3066\u5b58\u5728\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3067\u3001\u8ca0\u8377\u5206\u6563\u5bfe\u8c61\u3068\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3057\u3066\u3044\u307e\u3059\u3002\u5b9f\u30b5\u30fc\u30d0\u30fc\u304cHTTP\u7b49\u306e\u30b5\u30fc\u30d3\u30b9\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u306f\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u8ca0\u8377\u5206\u6563\u5bfe\u8c61\u30b5\u30fc\u30d0\u30fc\u3068\u3057\u3066\u8ffd\u52a0\u3055\u308c\u3066\u3082\u3001NetScaler\u304b\u3089\u306e\u30d8\u30eb\u30b9\u30c1\u30a7\u30c3\u30af\u3067\u78ba\u8a8d\u3055\u308c\u306a\u3044\u9650\u308a\u30d1\u30b1\u30c3\u30c8\u8ee2\u9001\u5bfe\u8c61\u3068\u306f\u306a\u3089\u306a\u3044\u306e\u3067\u3001HTTP\u7b49\u306e\u30b5\u30fc\u30d3\u30b9\u304c\u8d77\u52d5\u3057\u3066\u3044\u306a\u3044\u72b6\u614b\u3067\u3042\u3063\u3066\u3082\u3001\u30e6\u30fc\u30b6\u30fc\u304c\u5229\u7528\u3059\u308b\u30b5\u30fc\u30d3\u30b9\u81ea\u4f53\u306b\u306f\u554f\u984c\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u3042\u3068\u4e00\u5fdc\u52d5\u304d\u307e\u3059\u304c\u304b\u306a\u308a\u3084\u3063\u3064\u3051\u306a\u306e\u3067\u3001\u3082\u3063\u3068\u826f\u3044\u65b9\u6cd5\u304c\u3042\u308b\u306f\u305a\u3002\u30a8\u30e9\u30fc\u51e6\u7406\u306a\u3069\u3082\u307b\u3068\u3093\u3069\u3057\u3066\u307e\u305b\u3093\u3002\u305d\u306e\u3042\u305f\u308a\u306f\u6c17\u304c\u5411\u3044\u305f\u3089\u305d\u306e\u3046\u3061\u5bfe\u5fdc\u3059\u308b\u304b\u3082\u3002\u3002\n\n\u5909\u66f4\n\n2015/02/11\n\n\n\u5b58\u5728\u3057\u306a\u3044Auto Scale Group\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306e\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u8ffd\u52a0\nnitro\u306e\u4f8b\u5916\u51e6\u7406\u3092\u8ffd\u52a0\n\n\n\n\n\u524d\u63d0\n\n\u524d\u63d0\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\n\nPython 2.7\nSoftLayer API Python Client 3.3.0\nnsnitro 1.0.31\n\n\nPython 2.7\nPython 3.3\u3060\u3068nsnitro\u304c\u30a8\u30e9\u30fc\u306b\u306a\u308b\u6a21\u69d8\n$ python3.3 ns_test01.py\nTraceback (most recent call last):\n  File \"ns_test01.py\", line 12, in <module>\n    from nsnitro import *\n  File \"/Library/Python/2.7/site-packages/nsnitro/nsnitro.py\", line 67\n    except urllib2.URLError, ue:\n\n\nSoftLayer API\nGitHub\u7248\u3092\u4f7f\u7528\n$ sudo pip install git+git://github.com/softlayer/softlayer-python.git\n\n\nNITRO API\n\u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u306fNetScaler NITRO API\u3068\u3044\u3046API\u3092\u4f7f\u7528\u3057\u3066\u3001NetScaler\u3092\u64cd\u4f5c\u3057\u3066\u3044\u307e\u3059\u3002\nNITRO\u306f\u3001REST\u30d9\u30fc\u30b9\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308bAPI\u3067\u3001\u30ea\u30e2\u30fc\u30c8\u304b\u3089NetScaler\u3092\u69d8\u3005\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u8a00\u8a9e\u3067\u64cd\u4f5c\u3057\u305f\u308a\u76e3\u8996\u3057\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4eca\u56de\u306fPython\u3067\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3059\u308b\u306e\u3067\u3001nsnitro\u3068\u3044\u3046Python\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n$ sudo pip install nsnitro\n\n\nNITRO API - Citrix eDocs\nnsnitro 1.0.31\nGitHub: Citrix Netscaler 9.2+ Python Library (NITRO API)\nAPI\n\n\n\u30b9\u30af\u30ea\u30d7\u30c8\n\n\u5909\u6570\u306e\u8a2d\u5b9a\n\n\n\n\u5909\u6570\n\u8aac\u660e\n\n\n\n\nnsAutoScaleGroup\nNetScaler\u306e\u8ca0\u8377\u5206\u6563\u5bfe\u8c61\u3068\u3059\u308bSoftLayer\u306eAuto Scale Group\u540d\n\n\nnsHost\nNetScaler's IP address\n\n\nnsApiUser\nNetScaler login user\n\n\nnsApiPass\nNetScaler login password\n\n\nnsLBVServer\nNetScaler Load Balancing Virtual Server\n\n\nnsIpType\nSoftLayer\u306e\u4eee\u60f3\u30b5\u30fc\u30d0\u30fc\u306ePublic\u3068Private\u306e\u3069\u3061\u3089\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u8ca0\u8377\u5206\u6563\u5bfe\u8c61\u3068\u3059\u308b\u304b\u3092\u6307\u5b9a\u3002\"public\"\u306e\u5834\u5408\u306fPublic Primary IP\u304c\u3001\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306fPrivate Primary IP\u304c\u4f7f\u308f\u308c\u308b\u3002\n\n\n\n\n\u30b9\u30af\u30ea\u30d7\u30c8\n\nsl_lbNetScaler.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nimport traceback\nfrom prettytable import PrettyTable\nimport SoftLayer\nimport sluser\n\n# import the necessary libraries for netscaler nitro\nimport json\nimport urllib\nimport httplib2\nimport time\nfrom nsnitro import *\n\nSL_USERNAME = sluser.SL_USERNAME\nSL_API_KEY = sluser.SL_API_KEY\n\n# NetScaler constant\nnsAutoScaleGroup = \"TK-as-group\"    # SoftLayer auto scale group name\nnsHost = \"192.168.1.141\"            # NetScaler's IP address\nnsApiUser = \"nsroot\"                # NetScaler login user\nnsApiPass = \"nsroot\"                # NetScaler login password\nnsLBVServer = \"vserver01_http\"      # NetScaler Load Balancing Virtual Server\nnsIpType = \"public\"                 # IP type used for NetScaler server ip. \"public\" or \"private\"\n\ndef getASMembers(autoScaleGroups, nsAutoScaleGroup):\n    \"\"\"\n    Get an array of dictionaries of all members of nsAutoScaleGroup from SoftLayer API\n\n    :param autoScaleGroups: SoftLayer auto scale groups objects retrieved by getScaleGroups()\n    :param nsAutoScaleGroup: SoftLayer auto scale group name which the script looks at to add/delete servers\n    :return: Array of dictionaries of all auto scale members\n    \"\"\"\n    for asg in autoScaleGroups:\n        asMembers = []\n        if asg['name'] == nsAutoScaleGroup:\n            for a in asg['virtualGuestMembers'][0:]:\n                memberId = a['virtualGuest']['id']\n                asMember = {\n                    \"id\": a['virtualGuest']['id'],\n                    \"name\": a['virtualGuest']['hostname'],\n                    \"publicPrimaryIP\" : client['Virtual_Guest'].getPrimaryIpAddress(id=memberId),\n                    \"privatePrimaryIP\" : client['Virtual_Guest'].getPrimaryBackendIpAddress(id=memberId),\n                }\n                asMembers.append(asMember)\n            break\n\n    if len(asMembers) == 0:\n        sys.exit(\"No such auto scale group exists in SoftLayer auto scale configurations.\")\n\n    return(asMembers)\n\ndef addNSServer(nsServerName, nsServerIp, nsServiceName, nsLBVServer):\n    \"\"\"\n    Add SoftLayer VSIs to NetScaler servers,\n    create new services and bind the services to LB virtual server.\n    Must be logged in to NetScaler with API beforehand.\n\n    :param nsServerName: The name of NetScaler server to be created.\n    :param nsServerIp: The IP address of NetScaler server to be created.\n    :param nsServiceName: The name of NetScaler service to be created.\n    :param nsLBVServer: The name of NetScaler LB virtual server to be binded with the service.\n    :return:\n    \"\"\"\n\n    # add server test\n    addserver = NSServer()\n    addserver.set_name(nsServerName)\n    addserver.set_ipaddress(nsServerIp)\n    NSServer.add(nitro, addserver)\n\n    # get state\n    server = NSServer()\n    server.set_name(nsServerName)\n    server = server.get(nitro, server)\n    # print(server.get_name() + \": \" + server.get_state())\n\n    # add service\n    addservice = NSService()\n    addservice.set_name(nsServiceName)\n    addservice.set_servername(nsServerName)\n    addservice.set_servicetype(\"HTTP\")\n    addservice.set_port(80)\n    NSService.add(nitro, addservice)\n\n    # bind service to lbvserver\n    lbbinding = NSLBVServerServiceBinding()\n    lbbinding.set_name(nsLBVServer)\n    lbbinding.set_servicename(nsServiceName)\n    lbbinding.set_weight(40)\n    NSLBVServerServiceBinding.add(nitro, lbbinding)\n\n    # get binding info\n    lbbinding = NSLBVServerServiceBinding()\n    lbbinding.set_name(nsLBVServer)\n    lbbindings = NSLBVServerServiceBinding.get(nitro, lbbinding)\n#    for lbb in lbbindings:\n#        print(\"sgn: \" + lbb.get_servicegroupname())\n    return\n\ndef delNSServer(nsServerName):\n    \"\"\"\n    Delete NetScaler server.\n    Must be logged in to NetScaler with API beforehand.\n\n    :param nsServerName: The name of NetScaler server to be deleted.\n    :return:\n    \"\"\"\n\n    # delete server\n    delserver = NSServer()\n    delserver.set_name(nsServerName)\n    NSServer.delete(nitro, delserver)\n    # print(\"Server deleted.\")\n\n    return\n\ndef getNsServersList(nitro):\n    \"\"\"\n    Get the list of NetScaler servers\n\n    :param nitro: nitro connection\n    :return: Array of NetScaler servers\n    \"\"\"\n    nsServers = []\n    server = NSServer()\n    for n in NSServer.get_all(nitro):\n        nsServers.append(n.get_name())\n    return nsServers\n\n\ndef getAutoScaleHostnamePrefix(autoScaleGroups, nsAutoScaleGroup):\n    \"\"\"\n    Get auto scale hostname prefix\n\n    :param autoScaleGroups:\n    :param nsAutoScaleGroup:\n    :return:\n    \"\"\"\n    for asg in autoScaleGroups:\n        if asg['name'] == nsAutoScaleGroup:\n            nsAutoScalePrefix = asg['virtualGuestMemberTemplate']['hostname']\n    return nsAutoScalePrefix\n\n\n\ntry:\n\n    # Connect to SoftLayer API\n    client = SoftLayer.Client(username=SL_USERNAME, api_key=SL_API_KEY)\n    autoScaleGroups = client['Account'].getScaleGroups()\n    asMembers = getASMembers(autoScaleGroups, nsAutoScaleGroup)\n\n    # get auto scale hostname prefix\n    nsAutoScalePrefix = getAutoScaleHostnamePrefix(autoScaleGroups, nsAutoScaleGroup)\n\n    # Login to NetScaler with API\n    nitro = NSNitro(nsHost, nsApiUser, nsApiPass)\n    nitro.login()\n\n    # Get the list of NetScaler servers\n    nsServers = getNsServersList(nitro)\n\n    # If an auto scale member is not in NetScaler severs,\n    # add the member to NetScaler server\n    asMemberNames = []\n    addedServers = []\n    for asm in asMembers:\n        # NetScaler parameters\n        nsServerName = asm['name']\n        nsPublicPrimaryIp = asm['publicPrimaryIP']\n        nsPrivatePrimaryIp = asm['privatePrimaryIP']\n        if nsIpType == \"public\":\n            nsServerIp = nsPublicPrimaryIp\n        else:\n            nsServerIp = nsPrivatePrimaryIp\n        nsServiceName = \"service_http_\" + nsServerIp.split(\".\")[-1]   # NetScaler Service Name for the server. \"service_http_<IP's 4th octet>\"\n\n        if not asm['name'] in nsServers:\n            addNSServer(nsServerName, nsServerIp, nsServiceName, nsLBVServer)\n            addedServers.append(asm['name'])\n            # print(\"Server \\\"%s\\\" created.\" % asm['name'])\n\n        # make array of asm['name']\n        asMemberNames.append(asm['name'])\n\n\n    # If a NetScaler server with nsAutoPrefix prefix exists while not in auto scale member,\n    # delete the server from NetScaler servers\n    deletedServers = []\n    for nss in nsServers:\n        if nss[:-5] == nsAutoScalePrefix:\n            if not nss in asMemberNames:\n                delNSServer(nss)\n                deletedServers.append(nss)\n                # print(\"Server \\\"%s\\\" deleted.\" % nss)\n\n    # Logout from NetScaler\n    nitro.logout()\n\n    # Print results\n    print(\"No servers created.\") if len(addedServers) == 0 else \"Created: %s\" % addedServers\n    print(\"No servers deleted.\") if len(deletedServers) == 0 else \"Deleted: %s\" % deletedServers\n\n\nexcept NSNitroError, e:\n    print e.message\n\nexcept SystemExit as e:\n    sys.exit(e)\n\n\n\n\u30c6\u30b9\u30c8\n\n\u8ca0\u8377\u5206\u6563\u5bfe\u8c61\u30b5\u30fc\u30d0\u30fc\u3068\u3057\u3066\u767b\u9332\u3055\u308c\u3044\u306a\u3044 & \u5b58\u5728\u3057\u306a\u3044\u30b5\u30fc\u30d0\u30fc\u304c\u8ca0\u8377\u5206\u6563\u5bfe\u8c61\u306b\u306a\u3063\u3066\u3044\u308b\u5834\u5408\n\n\u5b9f\u884c\u524d\n\nSoftLayer\u4e0a\u306e\u30b5\u30fc\u30d0\u30fc\n\nAuto Scale Group \"TK-as-group\"\u306e\u4eee\u60f3\u30b5\u30fc\u30d0\u30fc\u3068\u3057\u3066\u3001\"TK-as-member-e727\"\u306e\u307f\u5b58\u5728 \n\n$ python sl_getAutoScaleGroup.py\n+-------+------------------+-------+-----------+-----+-----+-----+---------------+---------+\n|   id  |     asg name     |   dc  |   status  | min | max | now | member prefix | members |\n+-------+------------------+-------+-----------+-----+-----+-----+---------------+---------+\n| 54654 | autoscale_grp01  | hkg02 | SUSPENDED |  1  |  5  |  0  |    asserver   |         |\n| 34158 |   TK-as-group    | sng01 |   ACTIVE  |  1  |  5  |  1  |  TK-as-member |  e727   |\n| 34758 | autosacle_yasuda | sng01 | SUSPENDED |  1  |  1  |  0  |    sh1nobu    |         |\n|  8254 |   dai39-group    | sng01 |   ACTIVE  |  1  |  1  |  1  |  dai39-scale  |  cca8   |\n+-------+------------------+-------+-----------+-----+-----+-----+---------------+---------+\n\n\nNetScaler\u4e0a\u306e\u8ca0\u8377\u5206\u6563\u8a2d\u5b9a\n\n\"TK-as-member-e727\"\u306f\u8ca0\u8377\u5206\u6563\u5bfe\u8c61\u306b\u306a\u3063\u3066\u3044\u306a\u3044 (server\u306b\u5b58\u5728\u3057\u306a\u3044)\n\"TK-as-member-1111\", \"TK-as-member-2222\"\u304c\u8ca0\u8377\u5206\u6563\u5bfe\u8c61\u306b\u306a\u3063\u3066\u3044\u308b (server\u306b\u5b58\u5728\u3057\u3001service\u304c\u4f5c\u6210\u3055\u308c\u3001lb vserver\u306bbind\u3055\u308c\u3066\u3044\u308b)\n\n> show server -summary\n-------------------------------------------\n      Name                 State\n-------------------------------------------\n1     192.168.1.254        ENABLED\n2     192.168.1.253        ENABLED\n3     192.168.1.134        ENABLED\n4     192.168.1.136        ENABLED\n5     192.168.1.144        ENABLED\n6     192.168.1.18         ENABLED\n7     192.168.1.143        ENABLED\n8     192.168.1.133        ENABLED\n9     TK-as-member-1111    ENABLED\n10    TK-as-member-2222    ENABLED\n Done\n> \n> show service -summary\n---------------------------------------------------------------------------------------------\n      Name        State           IP Addr           Port  Protocol   MaxClients  MaxReqs\n---------------------------------------------------------------------------------------------\n1     serv...adns UP              192.168.1.144     53    ADNS       0           0\n2     serv..._254 DOWN            192.168.1.254     80    HTTP       0           0\n3     serv...p_18 DOWN            192.168.1.134     80    HTTP       0           0\n4     serv...tp_1 DOWN            TK-as-member-1111 80    HTTP       0           0\n5     serv...tp_2 DOWN            TK-as-member-2222 80    HTTP       0           0\n Done\n> \n> show lb vserver vserver01_http\n    vserver01_http (192.168.1.143:80) - HTTP    Type: ADDRESS\n    State: DOWN\n    Last state change was at Fri Jan 30 15:35:40 2015\n    Time since last state change: 1 days, 18:18:09.320\n    Effective State: DOWN\n    Client Idle Timeout: 180 sec\n    Down state flush: ENABLED\n    Disable Primary Vserver On Down : DISABLED\n    Appflow logging: ENABLED\n    Port Rewrite : DISABLED\n    No. of Bound Services :  3 (Total)   0 (Active)\n    Configured Method: LEASTCONNECTION\n    Mode: IP\n    Persistence: NONE\n    Vserver IP and Port insertion: OFF\n    Push: DISABLED  Push VServer:\n    Push Multi Clients: NO\n    Push Label Rule: none\n    L2Conn: OFF\n    Skip Persistency: None\n    IcmpResponse: PASSIVE\n    RHIstate: PASSIVE\n    New Service Startup Request Rate: 0 PER_SECOND, Increment Interval: 0\n    Mac mode Retain Vlan: DISABLED\n    DBS_LB: DISABLED\n    Process Local: DISABLED\n    Traffic Domain: 0\n\n1) service_http_18 (192.168.1.134: 80) - HTTP State: DOWN   Weight: 1\n2) service_http_1 (1.1.1.1: 80) - HTTP State: DOWN  Weight: 1\n3) service_http_2 (2.2.2.2: 80) - HTTP State: DOWN  Weight: 1\n Done\n\n\n\u5b9f\u884c\n$ python sl_lbNetScaler.py\nCreated: ['TK-as-member-e727']\nDeleted: [u'TK-as-member-1111', u'TK-as-member-2222']\n\n\n\u5b9f\u884c\u7d50\u679c\n\nAuto Scale Group\u306b\u5b58\u5728\u3057\u306a\u3044\"TK-as-member-1111\", \"TK-as-member-2222\"\u306f\u3001NetScaler\u306e\u8ca0\u8377\u5206\u6563\u5bfe\u8c61\u304b\u3089\u524a\u9664 (server\u306b\u5b58\u5728\u3057\u306a\u3044)\nAuto Scale Group\u306b\u5b58\u5728\u3059\u308b\"TK-as-member-e727\"\u304c\u3001\u8ca0\u8377\u5206\u6563\u5bfe\u8c61\u306b\u8ffd\u52a0 (server\u306b\u8ffd\u52a0\u3055\u308c\u3001service\u304c\u4f5c\u6210\u3055\u308c\u3001lb vserver\u306bbind\u3055\u308c\u3066\u3044\u308b)\n\n> show server -summary\n-------------------------------------------\n      Name                 State\n-------------------------------------------\n1     192.168.1.254        ENABLED\n2     192.168.1.253        ENABLED\n3     192.168.1.134        ENABLED\n4     192.168.1.136        ENABLED\n5     192.168.1.144        ENABLED\n6     192.168.1.18         ENABLED\n7     192.168.1.143        ENABLED\n8     192.168.1.133        ENABLED\n9     TK-as-member-e727    ENABLED\n Done\n>\n> show service -summary\n---------------------------------------------------------------------------------------------\n      Name        State           IP Addr           Port  Protocol   MaxClients  MaxReqs\n---------------------------------------------------------------------------------------------\n1     serv...adns UP              192.168.1.144     53    ADNS       0           0\n2     serv..._254 DOWN            192.168.1.254     80    HTTP       0           0\n3     serv...p_18 DOWN            192.168.1.134     80    HTTP       0           0\n4     serv..._198 DOWN            TK-as-member-e727 80    HTTP       0           0\n Done\n>\n> show lb vserver vserver01_http\n    vserver01_http (192.168.1.143:80) - HTTP    Type: ADDRESS\n    State: DOWN\n    Last state change was at Fri Jan 30 15:35:42 2015\n    Time since last state change: 1 days, 18:23:39.540\n    Effective State: DOWN\n    Client Idle Timeout: 180 sec\n    Down state flush: ENABLED\n    Disable Primary Vserver On Down : DISABLED\n    Appflow logging: ENABLED\n    Port Rewrite : DISABLED\n    No. of Bound Services :  2 (Total)   0 (Active)\n    Configured Method: LEASTCONNECTION\n    Mode: IP\n    Persistence: NONE\n    Vserver IP and Port insertion: OFF\n    Push: DISABLED  Push VServer:\n    Push Multi Clients: NO\n    Push Label Rule: none\n    L2Conn: OFF\n    Skip Persistency: None\n    IcmpResponse: PASSIVE\n    RHIstate: PASSIVE\n    New Service Startup Request Rate: 0 PER_SECOND, Increment Interval: 0\n    Mac mode Retain Vlan: DISABLED\n    DBS_LB: DISABLED\n    Process Local: DISABLED\n    Traffic Domain: 0\n\n1) service_http_18 (192.168.1.134: 80) - HTTP State: DOWN   Weight: 1\n2) service_http_198 (119.81.110.198: 80) - HTTP State: DOWN Weight: 40\n Done\n\n\n\u65e2\u306b\u8ca0\u8377\u5206\u6563\u5bfe\u8c61\u30b5\u30fc\u30d0\u30fc\u3068\u3057\u3066\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u5834\u5408\n\n\u5b9f\u884c\u524d\n\nNetScaler\u4e0a\u306e\u8ca0\u8377\u5206\u6563\u8a2d\u5b9a\n\nAuto Scale Group\u306b\u5b58\u5728\u3059\u308b\"TK-as-member-e727\"\u306e\u307f\u304c\u8ca0\u8377\u5206\u6563\u5bfe\u8c61\u3068\u306a\u3063\u3066\u3044\u308b\n\n> show server -summary\n-------------------------------------------\n      Name                 State\n-------------------------------------------\n1     192.168.1.254        ENABLED\n2     192.168.1.253        ENABLED\n3     192.168.1.134        ENABLED\n4     192.168.1.136        ENABLED\n5     192.168.1.144        ENABLED\n6     192.168.1.18         ENABLED\n7     192.168.1.143        ENABLED\n8     192.168.1.133        ENABLED\n9     TK-as-member-e727    ENABLED\n Done\n\n\n\u5b9f\u884c\n\n\u5b9f\u884c\u3057\u3066\u3082\u8ca0\u8377\u5206\u6563\u5bfe\u8c61\u30b5\u30fc\u30d0\u30fc\u306e\u8ffd\u52a0\u30fb\u524a\u9664\u306f\u3055\u308c\u306a\u3044\n\n$ python sl_lbNetScaler.py\nNo servers created.\nNo servers deleted.\n\nSoftLayer\u3067\u306fCitrix NetScaler\u3068\u3044\u3046\u9ad8\u6a5f\u80fd\u306a\u8ca0\u8377\u5206\u6563\u88c5\u7f6e\u304c\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\u305f\u3060\u3057\u73fe\u6642\u70b9\u3067\u306f\u3001\u3053\u306eNetScaler\u306f\u3001SoftLayer\u306eAuto Scale\u3068\u9023\u643a\u3057\u305f\u8ca0\u8377\u5206\u6563\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u304a\u3089\u305a\u3001Auto Scale\u3067\u8ffd\u52a0\u3055\u308c\u305f\u4eee\u60f3\u30b5\u30fc\u30d0\u30fc\u3092\u3001\u81ea\u52d5\u7684\u306bNetScaler\u306e\u8ca0\u8377\u5206\u6563\u5bfe\u8c61\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n\n\u305d\u3053\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6a5f\u80fd\u3092\u5b9f\u73fe\u3059\u308bPython\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f7f\u3046\u3068\u3001SoftLayer\u306eAuto Scale\u3068NetScaler\u3092\u9023\u643a\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n- SoftLayer\u306eAuto Scale\u3067\u8ffd\u52a0\u3055\u308c\u305f\u30b5\u30fc\u30d0\u30fc\u3092\u3001\u81ea\u52d5\u7684\u306bNetScaler\u306e\u8ca0\u8377\u5206\u6563\u30af\u30e9\u30b9\u30bf\u306b\u8ffd\u52a0\u3059\u308b\n- SoftLayer\u306eAuto Scale\u3067\u524a\u9664\u3055\u308c\u305f\u30b5\u30fc\u30d0\u30fc\u3092\u3001\u81ea\u52d5\u7684\u306bNetScaler\u306e\u8ca0\u8377\u5206\u6563\u30af\u30e9\u30b9\u30bf\u304b\u3089\u524a\u9664\u3059\u308b\n\n\u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u306f\u3001SoftLayer\u306e\u7279\u5b9a\u306eAuto Scale Group(nsAutoScaleGroup)\u306e\u30b5\u30fc\u30d0\u30fc\u304c\u3001SoftLayer\u4e0a\u306e\u4eee\u60f3\u30b5\u30fc\u30d0\u30fc\u3068\u3057\u3066\u5b58\u5728\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3067\u3001\u8ca0\u8377\u5206\u6563\u5bfe\u8c61\u3068\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3057\u3066\u3044\u307e\u3059\u3002\u5b9f\u30b5\u30fc\u30d0\u30fc\u304cHTTP\u7b49\u306e\u30b5\u30fc\u30d3\u30b9\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u306f\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u8ca0\u8377\u5206\u6563\u5bfe\u8c61\u30b5\u30fc\u30d0\u30fc\u3068\u3057\u3066\u8ffd\u52a0\u3055\u308c\u3066\u3082\u3001NetScaler\u304b\u3089\u306e\u30d8\u30eb\u30b9\u30c1\u30a7\u30c3\u30af\u3067\u78ba\u8a8d\u3055\u308c\u306a\u3044\u9650\u308a\u30d1\u30b1\u30c3\u30c8\u8ee2\u9001\u5bfe\u8c61\u3068\u306f\u306a\u3089\u306a\u3044\u306e\u3067\u3001HTTP\u7b49\u306e\u30b5\u30fc\u30d3\u30b9\u304c\u8d77\u52d5\u3057\u3066\u3044\u306a\u3044\u72b6\u614b\u3067\u3042\u3063\u3066\u3082\u3001\u30e6\u30fc\u30b6\u30fc\u304c\u5229\u7528\u3059\u308b\u30b5\u30fc\u30d3\u30b9\u81ea\u4f53\u306b\u306f\u554f\u984c\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u3042\u3068\u4e00\u5fdc\u52d5\u304d\u307e\u3059\u304c\u304b\u306a\u308a\u3084\u3063\u3064\u3051\u306a\u306e\u3067\u3001\u3082\u3063\u3068\u826f\u3044\u65b9\u6cd5\u304c\u3042\u308b\u306f\u305a\u3002\u30a8\u30e9\u30fc\u51e6\u7406\u306a\u3069\u3082\u307b\u3068\u3093\u3069\u3057\u3066\u307e\u305b\u3093\u3002\u305d\u306e\u3042\u305f\u308a\u306f\u6c17\u304c\u5411\u3044\u305f\u3089\u305d\u306e\u3046\u3061\u5bfe\u5fdc\u3059\u308b\u304b\u3082\u3002\u3002\n\n## \u5909\u66f4\n\n- 2015/02/11\n - \u5b58\u5728\u3057\u306a\u3044Auto Scale Group\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306e\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u8ffd\u52a0\n - nitro\u306e\u4f8b\u5916\u51e6\u7406\u3092\u8ffd\u52a0\n\n## \u524d\u63d0\n\n### \u524d\u63d0\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\n\n- Python 2.7\n- SoftLayer API Python Client 3.3.0\n- nsnitro 1.0.31\n\n#### Python 2.7\n\nPython 3.3\u3060\u3068nsnitro\u304c\u30a8\u30e9\u30fc\u306b\u306a\u308b\u6a21\u69d8\n\n```bash\n$ python3.3 ns_test01.py\nTraceback (most recent call last):\n  File \"ns_test01.py\", line 12, in <module>\n    from nsnitro import *\n  File \"/Library/Python/2.7/site-packages/nsnitro/nsnitro.py\", line 67\n    except urllib2.URLError, ue:\n```\n\n#### SoftLayer API\n\nGitHub\u7248\u3092\u4f7f\u7528\n\n```\n$ sudo pip install git+git://github.com/softlayer/softlayer-python.git\n```\n\n#### NITRO API\n\n\u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u306fNetScaler NITRO API\u3068\u3044\u3046API\u3092\u4f7f\u7528\u3057\u3066\u3001NetScaler\u3092\u64cd\u4f5c\u3057\u3066\u3044\u307e\u3059\u3002\nNITRO\u306f\u3001REST\u30d9\u30fc\u30b9\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308bAPI\u3067\u3001\u30ea\u30e2\u30fc\u30c8\u304b\u3089NetScaler\u3092\u69d8\u3005\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u8a00\u8a9e\u3067\u64cd\u4f5c\u3057\u305f\u308a\u76e3\u8996\u3057\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4eca\u56de\u306fPython\u3067\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3059\u308b\u306e\u3067\u3001nsnitro\u3068\u3044\u3046Python\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```bash\n$ sudo pip install nsnitro\n```\n\n- [NITRO API - Citrix eDocs](http://support.citrix.com/proddocs/topic/netscaler-main-api-10-map/ns-nitro-wrapper-con.html)\n- [nsnitro 1.0.31](https://pypi.python.org/pypi/nsnitro)\n- [GitHub: Citrix Netscaler 9.2+ Python Library (NITRO API)](https://github.com/favoretti/nsnitro)\n- [API](http://blogs.citrix.com/2014/09/19/scripting-automating-netscaler-configurations-using-nitro-rest-api-and-powershell-part-1/)\n\n\n## \u30b9\u30af\u30ea\u30d7\u30c8\n\n### \u5909\u6570\u306e\u8a2d\u5b9a\n\n|   \u5909\u6570   |     \u8aac\u660e     |\n|-------------|--------------|\n| nsAutoScaleGroup | NetScaler\u306e\u8ca0\u8377\u5206\u6563\u5bfe\u8c61\u3068\u3059\u308bSoftLayer\u306eAuto Scale Group\u540d |\n| nsHost | NetScaler's IP address |\n| nsApiUser | NetScaler login user |\n| nsApiPass | NetScaler login password |\n| nsLBVServer | NetScaler Load Balancing Virtual Server |\n| nsIpType | SoftLayer\u306e\u4eee\u60f3\u30b5\u30fc\u30d0\u30fc\u306ePublic\u3068Private\u306e\u3069\u3061\u3089\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u8ca0\u8377\u5206\u6563\u5bfe\u8c61\u3068\u3059\u308b\u304b\u3092\u6307\u5b9a\u3002\"public\"\u306e\u5834\u5408\u306fPublic Primary IP\u304c\u3001\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306fPrivate Primary IP\u304c\u4f7f\u308f\u308c\u308b\u3002|\n\n\n### \u30b9\u30af\u30ea\u30d7\u30c8\n\n```py:sl_lbNetScaler.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nimport traceback\nfrom prettytable import PrettyTable\nimport SoftLayer\nimport sluser\n\n# import the necessary libraries for netscaler nitro\nimport json\nimport urllib\nimport httplib2\nimport time\nfrom nsnitro import *\n\nSL_USERNAME = sluser.SL_USERNAME\nSL_API_KEY = sluser.SL_API_KEY\n\n# NetScaler constant\nnsAutoScaleGroup = \"TK-as-group\"    # SoftLayer auto scale group name\nnsHost = \"192.168.1.141\"            # NetScaler's IP address\nnsApiUser = \"nsroot\"                # NetScaler login user\nnsApiPass = \"nsroot\"                # NetScaler login password\nnsLBVServer = \"vserver01_http\"      # NetScaler Load Balancing Virtual Server\nnsIpType = \"public\"                 # IP type used for NetScaler server ip. \"public\" or \"private\"\n\ndef getASMembers(autoScaleGroups, nsAutoScaleGroup):\n    \"\"\"\n    Get an array of dictionaries of all members of nsAutoScaleGroup from SoftLayer API\n\n    :param autoScaleGroups: SoftLayer auto scale groups objects retrieved by getScaleGroups()\n    :param nsAutoScaleGroup: SoftLayer auto scale group name which the script looks at to add/delete servers\n    :return: Array of dictionaries of all auto scale members\n    \"\"\"\n    for asg in autoScaleGroups:\n        asMembers = []\n        if asg['name'] == nsAutoScaleGroup:\n            for a in asg['virtualGuestMembers'][0:]:\n                memberId = a['virtualGuest']['id']\n                asMember = {\n                    \"id\": a['virtualGuest']['id'],\n                    \"name\": a['virtualGuest']['hostname'],\n                    \"publicPrimaryIP\" : client['Virtual_Guest'].getPrimaryIpAddress(id=memberId),\n                    \"privatePrimaryIP\" : client['Virtual_Guest'].getPrimaryBackendIpAddress(id=memberId),\n                }\n                asMembers.append(asMember)\n            break\n\n    if len(asMembers) == 0:\n        sys.exit(\"No such auto scale group exists in SoftLayer auto scale configurations.\")\n\n    return(asMembers)\n\ndef addNSServer(nsServerName, nsServerIp, nsServiceName, nsLBVServer):\n    \"\"\"\n    Add SoftLayer VSIs to NetScaler servers,\n    create new services and bind the services to LB virtual server.\n    Must be logged in to NetScaler with API beforehand.\n\n    :param nsServerName: The name of NetScaler server to be created.\n    :param nsServerIp: The IP address of NetScaler server to be created.\n    :param nsServiceName: The name of NetScaler service to be created.\n    :param nsLBVServer: The name of NetScaler LB virtual server to be binded with the service.\n    :return:\n    \"\"\"\n\n    # add server test\n    addserver = NSServer()\n    addserver.set_name(nsServerName)\n    addserver.set_ipaddress(nsServerIp)\n    NSServer.add(nitro, addserver)\n\n    # get state\n    server = NSServer()\n    server.set_name(nsServerName)\n    server = server.get(nitro, server)\n    # print(server.get_name() + \": \" + server.get_state())\n\n    # add service\n    addservice = NSService()\n    addservice.set_name(nsServiceName)\n    addservice.set_servername(nsServerName)\n    addservice.set_servicetype(\"HTTP\")\n    addservice.set_port(80)\n    NSService.add(nitro, addservice)\n\n    # bind service to lbvserver\n    lbbinding = NSLBVServerServiceBinding()\n    lbbinding.set_name(nsLBVServer)\n    lbbinding.set_servicename(nsServiceName)\n    lbbinding.set_weight(40)\n    NSLBVServerServiceBinding.add(nitro, lbbinding)\n\n    # get binding info\n    lbbinding = NSLBVServerServiceBinding()\n    lbbinding.set_name(nsLBVServer)\n    lbbindings = NSLBVServerServiceBinding.get(nitro, lbbinding)\n#    for lbb in lbbindings:\n#        print(\"sgn: \" + lbb.get_servicegroupname())\n    return\n\ndef delNSServer(nsServerName):\n    \"\"\"\n    Delete NetScaler server.\n    Must be logged in to NetScaler with API beforehand.\n\n    :param nsServerName: The name of NetScaler server to be deleted.\n    :return:\n    \"\"\"\n\n    # delete server\n    delserver = NSServer()\n    delserver.set_name(nsServerName)\n    NSServer.delete(nitro, delserver)\n    # print(\"Server deleted.\")\n\n    return\n\ndef getNsServersList(nitro):\n    \"\"\"\n    Get the list of NetScaler servers\n\n    :param nitro: nitro connection\n    :return: Array of NetScaler servers\n    \"\"\"\n    nsServers = []\n    server = NSServer()\n    for n in NSServer.get_all(nitro):\n        nsServers.append(n.get_name())\n    return nsServers\n\n\ndef getAutoScaleHostnamePrefix(autoScaleGroups, nsAutoScaleGroup):\n    \"\"\"\n    Get auto scale hostname prefix\n\n    :param autoScaleGroups:\n    :param nsAutoScaleGroup:\n    :return:\n    \"\"\"\n    for asg in autoScaleGroups:\n        if asg['name'] == nsAutoScaleGroup:\n            nsAutoScalePrefix = asg['virtualGuestMemberTemplate']['hostname']\n    return nsAutoScalePrefix\n\n\n\ntry:\n\n    # Connect to SoftLayer API\n    client = SoftLayer.Client(username=SL_USERNAME, api_key=SL_API_KEY)\n    autoScaleGroups = client['Account'].getScaleGroups()\n    asMembers = getASMembers(autoScaleGroups, nsAutoScaleGroup)\n\n    # get auto scale hostname prefix\n    nsAutoScalePrefix = getAutoScaleHostnamePrefix(autoScaleGroups, nsAutoScaleGroup)\n\n    # Login to NetScaler with API\n    nitro = NSNitro(nsHost, nsApiUser, nsApiPass)\n    nitro.login()\n\n    # Get the list of NetScaler servers\n    nsServers = getNsServersList(nitro)\n\n    # If an auto scale member is not in NetScaler severs,\n    # add the member to NetScaler server\n    asMemberNames = []\n    addedServers = []\n    for asm in asMembers:\n        # NetScaler parameters\n        nsServerName = asm['name']\n        nsPublicPrimaryIp = asm['publicPrimaryIP']\n        nsPrivatePrimaryIp = asm['privatePrimaryIP']\n        if nsIpType == \"public\":\n            nsServerIp = nsPublicPrimaryIp\n        else:\n            nsServerIp = nsPrivatePrimaryIp\n        nsServiceName = \"service_http_\" + nsServerIp.split(\".\")[-1]   # NetScaler Service Name for the server. \"service_http_<IP's 4th octet>\"\n\n        if not asm['name'] in nsServers:\n            addNSServer(nsServerName, nsServerIp, nsServiceName, nsLBVServer)\n            addedServers.append(asm['name'])\n            # print(\"Server \\\"%s\\\" created.\" % asm['name'])\n\n        # make array of asm['name']\n        asMemberNames.append(asm['name'])\n\n\n    # If a NetScaler server with nsAutoPrefix prefix exists while not in auto scale member,\n    # delete the server from NetScaler servers\n    deletedServers = []\n    for nss in nsServers:\n        if nss[:-5] == nsAutoScalePrefix:\n            if not nss in asMemberNames:\n                delNSServer(nss)\n                deletedServers.append(nss)\n                # print(\"Server \\\"%s\\\" deleted.\" % nss)\n\n    # Logout from NetScaler\n    nitro.logout()\n\n    # Print results\n    print(\"No servers created.\") if len(addedServers) == 0 else \"Created: %s\" % addedServers\n    print(\"No servers deleted.\") if len(deletedServers) == 0 else \"Deleted: %s\" % deletedServers\n\n\nexcept NSNitroError, e:\n    print e.message\n\nexcept SystemExit as e:\n    sys.exit(e)\n```\n\n\n\n## \u30c6\u30b9\u30c8\n\n### \u8ca0\u8377\u5206\u6563\u5bfe\u8c61\u30b5\u30fc\u30d0\u30fc\u3068\u3057\u3066\u767b\u9332\u3055\u308c\u3044\u306a\u3044 & \u5b58\u5728\u3057\u306a\u3044\u30b5\u30fc\u30d0\u30fc\u304c\u8ca0\u8377\u5206\u6563\u5bfe\u8c61\u306b\u306a\u3063\u3066\u3044\u308b\u5834\u5408\n\n#### \u5b9f\u884c\u524d\n##### SoftLayer\u4e0a\u306e\u30b5\u30fc\u30d0\u30fc\n\n- Auto Scale Group \"TK-as-group\"\u306e\u4eee\u60f3\u30b5\u30fc\u30d0\u30fc\u3068\u3057\u3066\u3001\"TK-as-member-e727\"\u306e\u307f\u5b58\u5728 \n\n```bash\n$ python sl_getAutoScaleGroup.py\n+-------+------------------+-------+-----------+-----+-----+-----+---------------+---------+\n|   id  |     asg name     |   dc  |   status  | min | max | now | member prefix | members |\n+-------+------------------+-------+-----------+-----+-----+-----+---------------+---------+\n| 54654 | autoscale_grp01  | hkg02 | SUSPENDED |  1  |  5  |  0  |    asserver   |         |\n| 34158 |   TK-as-group    | sng01 |   ACTIVE  |  1  |  5  |  1  |  TK-as-member |  e727   |\n| 34758 | autosacle_yasuda | sng01 | SUSPENDED |  1  |  1  |  0  |    sh1nobu    |         |\n|  8254 |   dai39-group    | sng01 |   ACTIVE  |  1  |  1  |  1  |  dai39-scale  |  cca8   |\n+-------+------------------+-------+-----------+-----+-----+-----+---------------+---------+\n```\n\n##### NetScaler\u4e0a\u306e\u8ca0\u8377\u5206\u6563\u8a2d\u5b9a\n\n- \"TK-as-member-e727\"\u306f\u8ca0\u8377\u5206\u6563\u5bfe\u8c61\u306b\u306a\u3063\u3066\u3044\u306a\u3044 (server\u306b\u5b58\u5728\u3057\u306a\u3044)\n- \"TK-as-member-1111\", \"TK-as-member-2222\"\u304c\u8ca0\u8377\u5206\u6563\u5bfe\u8c61\u306b\u306a\u3063\u3066\u3044\u308b (server\u306b\u5b58\u5728\u3057\u3001service\u304c\u4f5c\u6210\u3055\u308c\u3001lb vserver\u306bbind\u3055\u308c\u3066\u3044\u308b)\n\n```bash\n> show server -summary\n-------------------------------------------\n      Name                 State\n-------------------------------------------\n1     192.168.1.254        ENABLED\n2     192.168.1.253        ENABLED\n3     192.168.1.134        ENABLED\n4     192.168.1.136        ENABLED\n5     192.168.1.144        ENABLED\n6     192.168.1.18         ENABLED\n7     192.168.1.143        ENABLED\n8     192.168.1.133        ENABLED\n9     TK-as-member-1111    ENABLED\n10    TK-as-member-2222    ENABLED\n Done\n> \n> show service -summary\n---------------------------------------------------------------------------------------------\n      Name        State           IP Addr           Port  Protocol   MaxClients  MaxReqs\n---------------------------------------------------------------------------------------------\n1     serv...adns UP              192.168.1.144     53    ADNS       0           0\n2     serv..._254 DOWN            192.168.1.254     80    HTTP       0           0\n3     serv...p_18 DOWN            192.168.1.134     80    HTTP       0           0\n4     serv...tp_1 DOWN            TK-as-member-1111 80    HTTP       0           0\n5     serv...tp_2 DOWN            TK-as-member-2222 80    HTTP       0           0\n Done\n> \n> show lb vserver vserver01_http\n\tvserver01_http (192.168.1.143:80) - HTTP\tType: ADDRESS\n\tState: DOWN\n\tLast state change was at Fri Jan 30 15:35:40 2015\n\tTime since last state change: 1 days, 18:18:09.320\n\tEffective State: DOWN\n\tClient Idle Timeout: 180 sec\n\tDown state flush: ENABLED\n\tDisable Primary Vserver On Down : DISABLED\n\tAppflow logging: ENABLED\n\tPort Rewrite : DISABLED\n\tNo. of Bound Services :  3 (Total) \t 0 (Active)\n\tConfigured Method: LEASTCONNECTION\n\tMode: IP\n\tPersistence: NONE\n\tVserver IP and Port insertion: OFF\n\tPush: DISABLED\tPush VServer:\n\tPush Multi Clients: NO\n\tPush Label Rule: none\n\tL2Conn: OFF\n\tSkip Persistency: None\n\tIcmpResponse: PASSIVE\n\tRHIstate: PASSIVE\n\tNew Service Startup Request Rate: 0 PER_SECOND, Increment Interval: 0\n\tMac mode Retain Vlan: DISABLED\n\tDBS_LB: DISABLED\n\tProcess Local: DISABLED\n\tTraffic Domain: 0\n\n1) service_http_18 (192.168.1.134: 80) - HTTP State: DOWN\tWeight: 1\n2) service_http_1 (1.1.1.1: 80) - HTTP State: DOWN\tWeight: 1\n3) service_http_2 (2.2.2.2: 80) - HTTP State: DOWN\tWeight: 1\n Done\n```\n\n#### \u5b9f\u884c\n\n```\n$ python sl_lbNetScaler.py\nCreated: ['TK-as-member-e727']\nDeleted: [u'TK-as-member-1111', u'TK-as-member-2222']\n```\n\n#### \u5b9f\u884c\u7d50\u679c\n\n- Auto Scale Group\u306b\u5b58\u5728\u3057\u306a\u3044\"TK-as-member-1111\", \"TK-as-member-2222\"\u306f\u3001NetScaler\u306e\u8ca0\u8377\u5206\u6563\u5bfe\u8c61\u304b\u3089\u524a\u9664 (server\u306b\u5b58\u5728\u3057\u306a\u3044)\n- Auto Scale Group\u306b\u5b58\u5728\u3059\u308b\"TK-as-member-e727\"\u304c\u3001\u8ca0\u8377\u5206\u6563\u5bfe\u8c61\u306b\u8ffd\u52a0 (server\u306b\u8ffd\u52a0\u3055\u308c\u3001service\u304c\u4f5c\u6210\u3055\u308c\u3001lb vserver\u306bbind\u3055\u308c\u3066\u3044\u308b)\n\n\n```bash\n> show server -summary\n-------------------------------------------\n      Name                 State\n-------------------------------------------\n1     192.168.1.254        ENABLED\n2     192.168.1.253        ENABLED\n3     192.168.1.134        ENABLED\n4     192.168.1.136        ENABLED\n5     192.168.1.144        ENABLED\n6     192.168.1.18         ENABLED\n7     192.168.1.143        ENABLED\n8     192.168.1.133        ENABLED\n9     TK-as-member-e727    ENABLED\n Done\n>\n> show service -summary\n---------------------------------------------------------------------------------------------\n      Name        State           IP Addr           Port  Protocol   MaxClients  MaxReqs\n---------------------------------------------------------------------------------------------\n1     serv...adns UP              192.168.1.144     53    ADNS       0           0\n2     serv..._254 DOWN            192.168.1.254     80    HTTP       0           0\n3     serv...p_18 DOWN            192.168.1.134     80    HTTP       0           0\n4     serv..._198 DOWN            TK-as-member-e727 80    HTTP       0           0\n Done\n>\n> show lb vserver vserver01_http\n\tvserver01_http (192.168.1.143:80) - HTTP\tType: ADDRESS\n\tState: DOWN\n\tLast state change was at Fri Jan 30 15:35:42 2015\n\tTime since last state change: 1 days, 18:23:39.540\n\tEffective State: DOWN\n\tClient Idle Timeout: 180 sec\n\tDown state flush: ENABLED\n\tDisable Primary Vserver On Down : DISABLED\n\tAppflow logging: ENABLED\n\tPort Rewrite : DISABLED\n\tNo. of Bound Services :  2 (Total) \t 0 (Active)\n\tConfigured Method: LEASTCONNECTION\n\tMode: IP\n\tPersistence: NONE\n\tVserver IP and Port insertion: OFF\n\tPush: DISABLED\tPush VServer:\n\tPush Multi Clients: NO\n\tPush Label Rule: none\n\tL2Conn: OFF\n\tSkip Persistency: None\n\tIcmpResponse: PASSIVE\n\tRHIstate: PASSIVE\n\tNew Service Startup Request Rate: 0 PER_SECOND, Increment Interval: 0\n\tMac mode Retain Vlan: DISABLED\n\tDBS_LB: DISABLED\n\tProcess Local: DISABLED\n\tTraffic Domain: 0\n\n1) service_http_18 (192.168.1.134: 80) - HTTP State: DOWN\tWeight: 1\n2) service_http_198 (119.81.110.198: 80) - HTTP State: DOWN\tWeight: 40\n Done\n```\n\n### \u65e2\u306b\u8ca0\u8377\u5206\u6563\u5bfe\u8c61\u30b5\u30fc\u30d0\u30fc\u3068\u3057\u3066\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u5834\u5408\n\n#### \u5b9f\u884c\u524d\n\n##### NetScaler\u4e0a\u306e\u8ca0\u8377\u5206\u6563\u8a2d\u5b9a\n\n- Auto Scale Group\u306b\u5b58\u5728\u3059\u308b\"TK-as-member-e727\"\u306e\u307f\u304c\u8ca0\u8377\u5206\u6563\u5bfe\u8c61\u3068\u306a\u3063\u3066\u3044\u308b\n\n```\n> show server -summary\n-------------------------------------------\n      Name                 State\n-------------------------------------------\n1     192.168.1.254        ENABLED\n2     192.168.1.253        ENABLED\n3     192.168.1.134        ENABLED\n4     192.168.1.136        ENABLED\n5     192.168.1.144        ENABLED\n6     192.168.1.18         ENABLED\n7     192.168.1.143        ENABLED\n8     192.168.1.133        ENABLED\n9     TK-as-member-e727    ENABLED\n Done\n```\n\n#### \u5b9f\u884c\n\n- \u5b9f\u884c\u3057\u3066\u3082\u8ca0\u8377\u5206\u6563\u5bfe\u8c61\u30b5\u30fc\u30d0\u30fc\u306e\u8ffd\u52a0\u30fb\u524a\u9664\u306f\u3055\u308c\u306a\u3044\n\n```\n$ python sl_lbNetScaler.py\nNo servers created.\nNo servers deleted.\n```\n\n", "tags": ["SoftLayer"]}