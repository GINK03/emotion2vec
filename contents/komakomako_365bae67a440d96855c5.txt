{"tags": ["\u6a5f\u68b0\u5b66\u7fd2", "Python", "Chainer"], "context": "\n\nConvolutional Neural Network (CNN) \u3068\u306f\n\u753b\u50cf\u306b\u7279\u5316\u3057\u305f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u3002\u901a\u5e38\u306e\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u304c\u5165\u529b\u5c64\u3001\u4e2d\u9593\u5c64\u3001\u51fa\u529b\u5c64\u304b\u3089\u6210\u308b\u306e\u306b\u5bfe\u3057\u3066\u3001CNN\u306f\u305d\u308c\u306b\u52a0\u3048\u3066\u7573\u307f\u8fbc\u307f\u5c64\u3001\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\u3001\u5c40\u6240\u6b63\u898f\u5316\u5c64(LRN\u5c64)\u3092\u3082\u3064\u3002\nChainer Example\u306b\u3042\u3063\u305fAlexNet (ILSVRC2012\u306e\u30c8\u30c3\u30d7) \u3092\u898b\u3066\u307f\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\nImageNet Classification with Deep Convolutional\nNeural Networks(\u539f\u6587)\nChainer Example AlexNet\n\n\nAlexBM.py\u306e\u629c\u7c8b\n# \u2026(\u7565)\nclass AlexBN(chainer.Chain):\n\n    \"\"\"Single-GPU AlexNet with LRN layers replaced by BatchNormalization.\"\"\"\n\n    insize = 227\n\n    def __init__(self):\n        super(AlexBN, self).__init__(\n            conv1=L.Convolution2D(3,  96, 11, stride=4),\n            bn1=L.BatchNormalization(96),\n            conv2=L.Convolution2D(96, 256,  5, pad=2),\n            bn2=L.BatchNormalization(256),\n            conv3=L.Convolution2D(256, 384,  3, pad=1),\n            conv4=L.Convolution2D(384, 384,  3, pad=1),\n            conv5=L.Convolution2D(384, 256,  3, pad=1),\n            fc6=L.Linear(9216, 4096),\n            fc7=L.Linear(4096, 4096),\n            fc8=L.Linear(4096, 1000),\n        )\n        self.train = True\n\n# \u2026(\u7565)\n\n\n5\u3064\u306e\u7573\u307f\u8fbc\u307f\u5c64\u30683\u3064\u306e\u5168\u7d50\u5408\u5c64\u304b\u3089\u6210\u3063\u3066\u3044\u308b\u3002\u307e\u305f\u3001\u8ad6\u6587\u3067\u306f\u6d3b\u6027\u5316\u95a2\u6570ReLu\u3001\u30de\u30eb\u30c1GPU\u3001LRN\u3001\u30d7\u30fc\u30ea\u30f3\u30b0\u304c\u5927\u4e8b\u3060\u3068\u8a00\u3063\u3066\u3044\u308b\u3002\u4e0a\u306eChainer Example\u3067\u306fLRN\u306e\u4ee3\u308f\u308a\u306b\u30d0\u30c3\u30c1\u6b63\u898f\u5316\u3092\u4f7f\u3063\u3066\u3044\u308b\u3002\u30d0\u30c3\u30c1\u6b63\u898f\u5316\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u304c\u8a73\u3057\u3044\u3002\n\nBatchNormalization\u306e\u4ed5\u7d44\u307f\u3068\u305d\u306e\u76f4\u611f\u7684\u306a\u7406\u89e3\n\n\n\u7573\u307f\u8fbc\u307f\u5c64\nL.Convolution2D(3,  96, 11, stride=4)\n\n\u7573\u307f\u8fbc\u307f\u306e\u8a08\u7b97\u5f0f\u306f\u3044\u308d\u3093\u306a\u53c2\u8003\u66f8\u306b\u66f8\u3044\u3066\u3042\u308b\u306e\u3067\u5272\u611b\u3002\u3053\u3053\u3067\u306f\u3001\u3053\u306e\u95a2\u6570\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u3053\u3068\u3092\u76ee\u6307\u3059\u3002\n\u3000\u307e\u305a\u3001\u7573\u8fbc\u307f\u3068\u306f\u753b\u50cf\u306b\u30d5\u30a3\u30eb\u30bf\u3092\u304b\u3051\u5909\u63db\u3059\u308b\u3053\u3068\u3002\u30d5\u30a3\u30eb\u30bf\u3082\u753b\u50cf\u3068\u540c\u3058\u3088\u3046\u306b\u753b\u7d20\u6570\u3068\u30c1\u30e3\u30cd\u30eb\u3068\u3044\u3046\u5909\u6570\u3092\u3082\u3064\u3002\u753b\u50cf\u306e\u753b\u7d20\u6570\u3092 $N\\times N$ \u3001\u30c1\u30e3\u30cd\u30eb\u6570\u3092 $K$ \u3068\u3057\u305f\u3068\u304d\u3001\u753b\u50cf\u306e\u30b5\u30a4\u30ba\u3092 $N\\times N\\times K$\u3068\u66f8\u304f\u3088\u3046\u306b\u3001\u30d5\u30a3\u30eb\u30bf\u306e\u30b5\u30a4\u30ba\u3082 $H\\times H\\times K$\u306e\u3088\u3046\u306b\u66f8\u304f\u3002\u753b\u50cf\u3068\u30d5\u30a3\u30eb\u30bf\u306e\u30c1\u30e3\u30cd\u30eb\u6570\u306f\u540c\u3058\u306b\u306a\u308b\u3002\n\u3000\u753b\u50cf\u306b\u304b\u3051\u308b\u30d5\u30a3\u30eb\u30bf\u306f\u8907\u6570\u7a2e\u985e\u3042\u3063\u3066\u3082\u826f\u3044\u3002$M$ \u7a2e\u985e\u306e\u30d5\u30a3\u30eb\u30bf\u3092\u304b\u3051\u308b\u3068\u3001\u51fa\u529b\u753b\u50cf\u306e\u30c1\u30e3\u30cd\u30eb\u6570\u306f $M$ \u5909\u63db\u3055\u308c\u308b\u3002 \u307e\u305f\u3001\u30d5\u30a3\u30eb\u30bf\u3092\u304b\u3051\u308b\u969b\u306f\u30d5\u30a3\u30eb\u30bf\u3092\u52d5\u304b\u3057\u306a\u304c\u3089\u753b\u50cf\u306b\u5bfe\u3057\u3066\u90e8\u5206\u7684\u306b\u304b\u3051\u3066\u3044\u304f\u306e\u3060\u304c\u3001\u305d\u306e\u52d5\u304b\u3057\u3066\u3044\u304f\u5e45\u3092\u30b9\u30c8\u30e9\u30a4\u30c9\u5e45\u3068\u3044\u3046\u3002\u30b9\u30c8\u30e9\u30a4\u30c9\u5e45\u3092\u5927\u304d\u304f\u3059\u308b\u3068\u753b\u50cf\u7279\u5fb4\u3092\u53d6\u308a\u3053\u307c\u3057\u3084\u3059\u304f\u306a\u308b\u306e\u3067\u3001\u5c0f\u3055\u3044\u307b\u3046\u304c\u671b\u307e\u3057\u3044\u3002\u307e\u305f\u3001\u753b\u50cf\u306e\u7e01\u306e\u5916\u5074\u306b\u4eee\u60f3\u7684\u306a\u753b\u7d20\u3092\u8a2d\u3051\u308b\u3053\u3068\u3092\u30d1\u30c7\u30a3\u30f3\u30b0\u3068\u547c\u3076\u3002\u30d1\u30c7\u30a3\u30f3\u30b0\u3092\u4e0e\u3048\u308b\u3053\u3068\u3067\u3001\u7573\u307f\u8fbc\u3093\u3060\u6642\u306e\u753b\u50cf\u306e\u7e2e\u5c0f\u3092\u6291\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u5165\u529b\u3068\u540c\u3058\u30b5\u30a4\u30ba\u306b\u3057\u305f\u3044\u5834\u5408\u306f\u30d1\u30c7\u30a3\u30f3\u30b0\u30b5\u30a4\u30ba\u3092 $H/2$ \u306e\u5c11\u6570\u5207\u308a\u6368\u3066\u306b\u3059\u308b\u3002\n \u4eca\u307e\u3067\u3092\u307e\u3068\u3081\u308b\u3068pythonL.Convolution2D()\u306e\u5f15\u6570\u306f\n\n\u7b2c1\u5f15\u6570 = \u5165\u529b\u30c1\u30e3\u30cd\u30eb\u6570\u3002 $K$\u306e\u3053\u3068\u3002\n\u7b2c2\u5f15\u6570 = \u51fa\u529b\u30c1\u30e3\u30cd\u30eb\u6570\u3002 $M$\u306e\u3053\u3068\u3002\n\u7b2c3\u5f15\u6570 = \u30d5\u30a3\u30eb\u30bf\u30b5\u30a4\u30ba\u3002 $H$\u306e\u3053\u3068\n\u5f15\u6570\u540dstride = \u30b9\u30c8\u30e9\u30a4\u30c9\u5e45\u3002\uff08\u5c0f\u3055\u3044\u307b\u3046\u304c\u826f\u3044\u3002\u5165\u529b\u753b\u50cf\u30b5\u30a4\u30ba\u3068\u306e\u517c\u306d\u5408\u3044\u304b\uff1f\uff09\n\u5f15\u6570\u540dpad = \u30d1\u30c7\u30a3\u30f3\u30b0\u5e45\u3002\uff08 $H/2$ \u306e\u5c11\u6570\u5207\u308a\u6368\u3066\u306b\u3059\u308b\u3053\u3068\u304c\u591a\u3044\uff09\n\n\u3068\u306a\u308b\u3002\u5165\u51fa\u529b\u753b\u50cf\u306e\u753b\u7d20\u6570\u306b\u95a2\u3059\u308b\u6307\u5b9a\u306f\u7121\u3044\u3002\n\n\u30d0\u30c3\u30c1\u6b63\u898f\u5316\nL.BatchNormalization(96)\n\n\u5f15\u6570\u306b\u306f\u6b63\u898f\u5316\u306e\u5bfe\u8c61\u3068\u306a\u308b\u753b\u50cf\u306e\u30c1\u30e3\u30cd\u30eb\u6570\u3092\u4e0e\u3048\u308b\u3002\u76f4\u524d\u306e\u7573\u8fbc\u307f\u306e\u51fa\u529b\u30c1\u30e3\u30cd\u30eb\u6570( $M$\u306e\u3053\u3068)\u3068\u540c\u3058\u306b\u306a\u308b\u3002\n\n\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\n\nAlexNet.py\u304b\u3089\u629c\u7c8b\n  h = self.bn1(self.conv1(x), test=not self.train)\n  h = F.max_pooling_2d(F.relu(h), 3, stride=2)\n\n\n\u7573\u307f\u8fbc\u307f\u5c64\u306e\u7d50\u679c\u3092ReLu\u306b\u5165\u529b\u3057\u305f\u5f8c\u306b\u30d7\u30fc\u30ea\u30f3\u30b0\u3092\u884c\u3046\u3002\u30d7\u30fc\u30ea\u30f3\u30b0\u306f\u3001\u30d5\u30a3\u30eb\u30bf\u306e\u3088\u3046\u306b\u4e00\u5b9a\u306e\u9818\u57df\u306b\u6ce8\u76ee\u3057\u3001\u3042\u308b\u30eb\u30fc\u30eb\u306b\u5f93\u3063\u3066\u305d\u306e\u9818\u57df\u306e\u4ee3\u8868\u5024\u30921\u3064\u51fa\u529b\u3059\u308b\u3002\u3053\u308c\u306b\u3088\u3063\u3066\u4f4d\u7f6e\u4e0d\u5909\u6027\u3092\u7372\u5f97\u3067\u304d\u308b\u3002\u30d7\u30fc\u30ea\u30f3\u30b0\u306b\u306f\u8272\u3005\u306a\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u304c\u3042\u308b\u3002\n\n\u5e73\u5747\u5024\u30d7\u30fc\u30ea\u30f3\u30b0\uff1a \u9818\u57df\u5185\u306e\u5024\u306e\u5e73\u5747\u3092\u3068\u308b\n\u6700\u5927\u5024\u30d7\u30fc\u30ea\u30f3\u30b0\uff1a \u9818\u57df\u5185\u306e\u6700\u5927\u3092\u3068\u308b\n\nAlexNet\u3067\u306f\u6700\u5927\u5024\u30d7\u30fc\u30ea\u30f3\u30b0\u3092\u63a1\u7528\u3057\u3066\u3044\u308b\u3002\nF.max_pooling_2d()\u306e\u5f15\u6570\u3092\u307e\u3068\u3081\u308b\u3068\u3001\n\n\u7b2c1\u5f15\u6570\uff1a \u5165\u529b\u753b\u50cf\n\u7b2c2\u5f15\u6570\uff1a \u30d7\u30fc\u30ea\u30f3\u30b0\u9818\u57df\u30b5\u30a4\u30ba\u3002\u9818\u57df\u3092\u5927\u304d\u304f\u3057\u904e\u304e\u308b\u3068\u7cbe\u5ea6\u304c\u3055\u304c\u308b\u3002\n\u7b2c3\u5f15\u6570\uff1a \u30b9\u30c8\u30e9\u30a4\u30c9\u5e45\u3002\u901a\u5e382\u4ee5\u4e0a\u306b\u3059\u308b\u3002\n\n\u3053\u3061\u3089\u3082\u3001\u5165\u51fa\u529b\u306e\u753b\u7d20\u6570\u306b\u3064\u3044\u3066\u306f\u6307\u5b9a\u3057\u306a\u3044\u3002\n\nAlexNet\u3092\u4f7f\u3063\u3066\u307f\u305f\n\u6b21\u306e\u8a18\u4e8b(\u57f7\u7b46\u4e2d)\u3067AlexNet\u3092\u4f7f\u3063\u3066\u307f\u305f\u7d50\u679c\u3092\u66f8\u304f\u3002\n# Convolutional Neural Network (CNN) \u3068\u306f\n\u753b\u50cf\u306b\u7279\u5316\u3057\u305f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u3002\u901a\u5e38\u306e\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u304c\u5165\u529b\u5c64\u3001\u4e2d\u9593\u5c64\u3001\u51fa\u529b\u5c64\u304b\u3089\u6210\u308b\u306e\u306b\u5bfe\u3057\u3066\u3001CNN\u306f\u305d\u308c\u306b\u52a0\u3048\u3066\u7573\u307f\u8fbc\u307f\u5c64\u3001\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\u3001\u5c40\u6240\u6b63\u898f\u5316\u5c64(LRN\u5c64)\u3092\u3082\u3064\u3002\n\nChainer Example\u306b\u3042\u3063\u305fAlexNet (ILSVRC2012\u306e\u30c8\u30c3\u30d7) \u3092\u898b\u3066\u307f\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n - [ImageNet Classification with Deep Convolutional\nNeural Networks(\u539f\u6587)](https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf)\n - [Chainer Example AlexNet](https://github.com/pfnet/chainer/blob/master/examples/imagenet/alexbn.py)\n \n~~~python:AlexBM.py\u306e\u629c\u7c8b\n# \u2026(\u7565)\nclass AlexBN(chainer.Chain):\n\n    \"\"\"Single-GPU AlexNet with LRN layers replaced by BatchNormalization.\"\"\"\n\n    insize = 227\n\n    def __init__(self):\n        super(AlexBN, self).__init__(\n            conv1=L.Convolution2D(3,  96, 11, stride=4),\n            bn1=L.BatchNormalization(96),\n            conv2=L.Convolution2D(96, 256,  5, pad=2),\n            bn2=L.BatchNormalization(256),\n            conv3=L.Convolution2D(256, 384,  3, pad=1),\n            conv4=L.Convolution2D(384, 384,  3, pad=1),\n            conv5=L.Convolution2D(384, 256,  3, pad=1),\n            fc6=L.Linear(9216, 4096),\n            fc7=L.Linear(4096, 4096),\n            fc8=L.Linear(4096, 1000),\n        )\n        self.train = True\n\n# \u2026(\u7565)\n~~~\n\n5\u3064\u306e\u7573\u307f\u8fbc\u307f\u5c64\u30683\u3064\u306e\u5168\u7d50\u5408\u5c64\u304b\u3089\u6210\u3063\u3066\u3044\u308b\u3002\u307e\u305f\u3001\u8ad6\u6587\u3067\u306f\u6d3b\u6027\u5316\u95a2\u6570ReLu\u3001\u30de\u30eb\u30c1GPU\u3001LRN\u3001\u30d7\u30fc\u30ea\u30f3\u30b0\u304c\u5927\u4e8b\u3060\u3068\u8a00\u3063\u3066\u3044\u308b\u3002\u4e0a\u306eChainer Example\u3067\u306fLRN\u306e\u4ee3\u308f\u308a\u306b\u30d0\u30c3\u30c1\u6b63\u898f\u5316\u3092\u4f7f\u3063\u3066\u3044\u308b\u3002\u30d0\u30c3\u30c1\u6b63\u898f\u5316\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u304c\u8a73\u3057\u3044\u3002\n\n- [BatchNormalization\u306e\u4ed5\u7d44\u307f\u3068\u305d\u306e\u76f4\u611f\u7684\u306a\u7406\u89e3](http://qiita.com/conjugate_box/items/a5efcbe7d9be977367b8)\n\n# \u7573\u307f\u8fbc\u307f\u5c64\n~~~python\nL.Convolution2D(3,  96, 11, stride=4)\n~~~\n\n\u7573\u307f\u8fbc\u307f\u306e\u8a08\u7b97\u5f0f\u306f\u3044\u308d\u3093\u306a\u53c2\u8003\u66f8\u306b\u66f8\u3044\u3066\u3042\u308b\u306e\u3067\u5272\u611b\u3002\u3053\u3053\u3067\u306f\u3001\u3053\u306e\u95a2\u6570\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u3053\u3068\u3092\u76ee\u6307\u3059\u3002\n\u3000\u307e\u305a\u3001\u7573\u8fbc\u307f\u3068\u306f\u753b\u50cf\u306b\u30d5\u30a3\u30eb\u30bf\u3092\u304b\u3051\u5909\u63db\u3059\u308b\u3053\u3068\u3002\u30d5\u30a3\u30eb\u30bf\u3082\u753b\u50cf\u3068\u540c\u3058\u3088\u3046\u306b\u753b\u7d20\u6570\u3068\u30c1\u30e3\u30cd\u30eb\u3068\u3044\u3046\u5909\u6570\u3092\u3082\u3064\u3002\u753b\u50cf\u306e\u753b\u7d20\u6570\u3092 $N\\times N$ \u3001\u30c1\u30e3\u30cd\u30eb\u6570\u3092 $K$ \u3068\u3057\u305f\u3068\u304d\u3001\u753b\u50cf\u306e\u30b5\u30a4\u30ba\u3092 $N\\times N\\times K$\u3068\u66f8\u304f\u3088\u3046\u306b\u3001\u30d5\u30a3\u30eb\u30bf\u306e\u30b5\u30a4\u30ba\u3082 $H\\times H\\times K$\u306e\u3088\u3046\u306b\u66f8\u304f\u3002\u753b\u50cf\u3068\u30d5\u30a3\u30eb\u30bf\u306e\u30c1\u30e3\u30cd\u30eb\u6570\u306f\u540c\u3058\u306b\u306a\u308b\u3002\n\u3000\u753b\u50cf\u306b\u304b\u3051\u308b\u30d5\u30a3\u30eb\u30bf\u306f\u8907\u6570\u7a2e\u985e\u3042\u3063\u3066\u3082\u826f\u3044\u3002$M$ \u7a2e\u985e\u306e\u30d5\u30a3\u30eb\u30bf\u3092\u304b\u3051\u308b\u3068\u3001\u51fa\u529b\u753b\u50cf\u306e\u30c1\u30e3\u30cd\u30eb\u6570\u306f $M$ \u5909\u63db\u3055\u308c\u308b\u3002 \u307e\u305f\u3001\u30d5\u30a3\u30eb\u30bf\u3092\u304b\u3051\u308b\u969b\u306f\u30d5\u30a3\u30eb\u30bf\u3092\u52d5\u304b\u3057\u306a\u304c\u3089\u753b\u50cf\u306b\u5bfe\u3057\u3066\u90e8\u5206\u7684\u306b\u304b\u3051\u3066\u3044\u304f\u306e\u3060\u304c\u3001\u305d\u306e\u52d5\u304b\u3057\u3066\u3044\u304f\u5e45\u3092\u30b9\u30c8\u30e9\u30a4\u30c9\u5e45\u3068\u3044\u3046\u3002\u30b9\u30c8\u30e9\u30a4\u30c9\u5e45\u3092\u5927\u304d\u304f\u3059\u308b\u3068\u753b\u50cf\u7279\u5fb4\u3092\u53d6\u308a\u3053\u307c\u3057\u3084\u3059\u304f\u306a\u308b\u306e\u3067\u3001\u5c0f\u3055\u3044\u307b\u3046\u304c\u671b\u307e\u3057\u3044\u3002\u307e\u305f\u3001\u753b\u50cf\u306e\u7e01\u306e\u5916\u5074\u306b\u4eee\u60f3\u7684\u306a\u753b\u7d20\u3092\u8a2d\u3051\u308b\u3053\u3068\u3092\u30d1\u30c7\u30a3\u30f3\u30b0\u3068\u547c\u3076\u3002\u30d1\u30c7\u30a3\u30f3\u30b0\u3092\u4e0e\u3048\u308b\u3053\u3068\u3067\u3001\u7573\u307f\u8fbc\u3093\u3060\u6642\u306e\u753b\u50cf\u306e\u7e2e\u5c0f\u3092\u6291\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u5165\u529b\u3068\u540c\u3058\u30b5\u30a4\u30ba\u306b\u3057\u305f\u3044\u5834\u5408\u306f\u30d1\u30c7\u30a3\u30f3\u30b0\u30b5\u30a4\u30ba\u3092 $H/2$ \u306e\u5c11\u6570\u5207\u308a\u6368\u3066\u306b\u3059\u308b\u3002\n \u4eca\u307e\u3067\u3092\u307e\u3068\u3081\u308b\u3068`pythonL.Convolution2D()`\u306e\u5f15\u6570\u306f\n\n  - \u7b2c1\u5f15\u6570 = \u5165\u529b\u30c1\u30e3\u30cd\u30eb\u6570\u3002 $K$\u306e\u3053\u3068\u3002\n  - \u7b2c2\u5f15\u6570 = \u51fa\u529b\u30c1\u30e3\u30cd\u30eb\u6570\u3002 $M$\u306e\u3053\u3068\u3002\n  - \u7b2c3\u5f15\u6570 = \u30d5\u30a3\u30eb\u30bf\u30b5\u30a4\u30ba\u3002 $H$\u306e\u3053\u3068\n  - \u5f15\u6570\u540dstride = \u30b9\u30c8\u30e9\u30a4\u30c9\u5e45\u3002\uff08\u5c0f\u3055\u3044\u307b\u3046\u304c\u826f\u3044\u3002\u5165\u529b\u753b\u50cf\u30b5\u30a4\u30ba\u3068\u306e\u517c\u306d\u5408\u3044\u304b\uff1f\uff09\n  - \u5f15\u6570\u540dpad = \u30d1\u30c7\u30a3\u30f3\u30b0\u5e45\u3002\uff08 $H/2$ \u306e\u5c11\u6570\u5207\u308a\u6368\u3066\u306b\u3059\u308b\u3053\u3068\u304c\u591a\u3044\uff09\n\n\u3068\u306a\u308b\u3002\u5165\u51fa\u529b\u753b\u50cf\u306e\u753b\u7d20\u6570\u306b\u95a2\u3059\u308b\u6307\u5b9a\u306f\u7121\u3044\u3002\n\n# \u30d0\u30c3\u30c1\u6b63\u898f\u5316\n~~~python\nL.BatchNormalization(96)\n~~~\n\u5f15\u6570\u306b\u306f\u6b63\u898f\u5316\u306e\u5bfe\u8c61\u3068\u306a\u308b\u753b\u50cf\u306e\u30c1\u30e3\u30cd\u30eb\u6570\u3092\u4e0e\u3048\u308b\u3002\u76f4\u524d\u306e\u7573\u8fbc\u307f\u306e\u51fa\u529b\u30c1\u30e3\u30cd\u30eb\u6570( $M$\u306e\u3053\u3068)\u3068\u540c\u3058\u306b\u306a\u308b\u3002\n\n# \u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\n~~~python:AlexNet.py\u304b\u3089\u629c\u7c8b\n  h = self.bn1(self.conv1(x), test=not self.train)\n  h = F.max_pooling_2d(F.relu(h), 3, stride=2)\n~~~\n\n\u7573\u307f\u8fbc\u307f\u5c64\u306e\u7d50\u679c\u3092ReLu\u306b\u5165\u529b\u3057\u305f\u5f8c\u306b\u30d7\u30fc\u30ea\u30f3\u30b0\u3092\u884c\u3046\u3002\u30d7\u30fc\u30ea\u30f3\u30b0\u306f\u3001\u30d5\u30a3\u30eb\u30bf\u306e\u3088\u3046\u306b\u4e00\u5b9a\u306e\u9818\u57df\u306b\u6ce8\u76ee\u3057\u3001\u3042\u308b\u30eb\u30fc\u30eb\u306b\u5f93\u3063\u3066\u305d\u306e\u9818\u57df\u306e\u4ee3\u8868\u5024\u30921\u3064\u51fa\u529b\u3059\u308b\u3002\u3053\u308c\u306b\u3088\u3063\u3066\u4f4d\u7f6e\u4e0d\u5909\u6027\u3092\u7372\u5f97\u3067\u304d\u308b\u3002\u30d7\u30fc\u30ea\u30f3\u30b0\u306b\u306f\u8272\u3005\u306a\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u304c\u3042\u308b\u3002\n\n  - \u5e73\u5747\u5024\u30d7\u30fc\u30ea\u30f3\u30b0\uff1a \u9818\u57df\u5185\u306e\u5024\u306e\u5e73\u5747\u3092\u3068\u308b\n  - \u6700\u5927\u5024\u30d7\u30fc\u30ea\u30f3\u30b0\uff1a \u9818\u57df\u5185\u306e\u6700\u5927\u3092\u3068\u308b\n \nAlexNet\u3067\u306f\u6700\u5927\u5024\u30d7\u30fc\u30ea\u30f3\u30b0\u3092\u63a1\u7528\u3057\u3066\u3044\u308b\u3002\n\n`F.max_pooling_2d()`\u306e\u5f15\u6570\u3092\u307e\u3068\u3081\u308b\u3068\u3001\n\n  - \u7b2c1\u5f15\u6570\uff1a \u5165\u529b\u753b\u50cf\n  - \u7b2c2\u5f15\u6570\uff1a \u30d7\u30fc\u30ea\u30f3\u30b0\u9818\u57df\u30b5\u30a4\u30ba\u3002\u9818\u57df\u3092\u5927\u304d\u304f\u3057\u904e\u304e\u308b\u3068\u7cbe\u5ea6\u304c\u3055\u304c\u308b\u3002\n  - \u7b2c3\u5f15\u6570\uff1a \u30b9\u30c8\u30e9\u30a4\u30c9\u5e45\u3002\u901a\u5e382\u4ee5\u4e0a\u306b\u3059\u308b\u3002\n\n\u3053\u3061\u3089\u3082\u3001\u5165\u51fa\u529b\u306e\u753b\u7d20\u6570\u306b\u3064\u3044\u3066\u306f\u6307\u5b9a\u3057\u306a\u3044\u3002\n\n# AlexNet\u3092\u4f7f\u3063\u3066\u307f\u305f\n\u6b21\u306e\u8a18\u4e8b(\u57f7\u7b46\u4e2d)\u3067AlexNet\u3092\u4f7f\u3063\u3066\u307f\u305f\u7d50\u679c\u3092\u66f8\u304f\u3002\n"}