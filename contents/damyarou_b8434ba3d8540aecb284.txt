{"context": "\n\n\u306f\u3058\u3081\u306b\n\u6d2a\u6c34\u6642\u306e\u8caf\u6c34\u6c60\u6c34\u4f4d\u8ffd\u8de1\uff08\u82f1\u8a9e\u3067\u306f flood routing\uff09\u306f\uff0c\u6d2a\u6c34\u304c\u8caf\u6c34\u6c60\u306b\u6d41\u5165\u3057\u305f\u6642\uff0c\u30c0\u30e0\u304b\u3089\u306e\u653e\u6d41\u91cf\u3092\u8003\u616e\u3057\u306a\u304c\u3089\uff0c\u6c34\u4f4d\u304c\u3069\u306e\u3088\u3046\u306b\u5909\u5316\u3059\u308b\u304b\u3092\u8ffd\u8de1\u3059\u308b\u89e3\u6790\u3067\u3059\uff0e\u7279\u306b\u6e5b\u6c34\u9762\u7a4d\u30fb\u5bb9\u91cf\u306e\u5927\u304d\u306a\u8caf\u6c34\u6c60\u3067\u306f\uff0c\u6d2a\u6c34\u6d41\u5165\u6642\u306e\u8caf\u6c34\u6c60\u306e\u8caf\u7559\u52b9\u679c\u304c\u5927\u304d\u3044\u305f\u3081\uff0c\u3042\u308b\u7a0b\u5ea6\u306e\u8caf\u6c34\u6c60\u306e\u6c34\u4f4d\u4e0a\u6607\u306f\u4f34\u3044\u307e\u3059\u304c\uff0c\u6d41\u5165\u6d2a\u6c34\u6ce2\u5f62\u306e\u30d4\u30fc\u30af\u3092\u30ab\u30c3\u30c8\u3067\u304d\u308b\u3068\u3068\u3082\u306b\uff0c\u5408\u7406\u7684\u306a\u6d2a\u6c34\u5410\u8a2d\u8a08\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u305f\u3081\uff0c\u91cd\u8981\u306a\u89e3\u6790\u3068\u306a\u3063\u3066\u304d\u307e\u3059\uff0e\u307e\u305f\u7e70\u308a\u8fd4\u3057\u8a08\u7b97\u3092\u4f34\u3046\u89e3\u6790\u3067\u3042\u308b\u305f\u3081\uff0c\u30d7\u30ed\u30b0\u30e9\u30e0\u8a00\u8a9e\u306b\u3088\u308b\u51e6\u7406\u304c\u9069\u3057\u3066\u3044\u308b\u3068\u8003\u3048\u3066\u3044\u307e\u3059\uff0e\n\u7b46\u8005\u3082\uff0c\u8272\u3005\u306a\u30b1\u30fc\u30b9\u3067\u3053\u306e\u89e3\u6790\u3092\u884c\u3063\u3066\u304d\u307e\u3057\u305f\u304c\uff0c\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u7c21\u5358\u306a\u89e3\u8aac\u3092\u884c\u3044\u306a\u304c\u3089\uff0c\u3053\u3053\u306b\u30a2\u30c3\u30d7\u3057\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\uff0e\n\n\u7406\u8ad6\n\u8caf\u6c34\u6c60\u3078\u306e\u8caf\u7559\u91cf\u306f\uff0c\u6d41\u5165\u91cf\u3068\u6d41\u51fa\u91cf\u306e\u5dee\u306b\u652f\u914d\u3055\u308c\uff0c\u3042\u308b\u6642\u9593\u9593\u9694\u0394t\u0394t\\Delta t\u306b\u5bfe\u3057\uff0c\u3053\u306e\u95a2\u4fc2\u306f\uff0c\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u8868\u73fe\u3067\u304d\u308b\uff0e\n\u0394S=Qi\u22c5\u0394t\u2212Qo\u22c5\u0394t\u0394S=Qi\u22c5\u0394t\u2212Qo\u22c5\u0394t \n\\Delta S=Q_{i}\\cdot \\Delta t - Q_{o}\\cdot \\Delta t \n\n\n\u0394t\u0394t\\Delta t : \u6642\u9593\u9593\u9694\n\u0394S\u0394S\\Delta S : \u0394t\u0394t\\Delta t\u6642\u9593\u3067\u306e\u8caf\u6c34\u6c60\u3078\u306e\u8caf\u7559\u91cf\nQiQiQ_i : \u0394t\u0394t\\Delta t\u6642\u9593\u5185\u306e\u5e73\u5747\u6d41\u5165\u91cf\nQoQoQ_o : \u0394t\u0394t\\Delta t\u6642\u9593\u5185\u306e\u5e73\u5747\u6d41\u51fa\u91cf\n\n\u4e0a\u5f0f\u3092\u89e3\u304f\u4e0a\u3067\uff0c\u4ee5\u4e0b\u306e\uff13\u3064\u306e\u7279\u6027\u5024\u304c\u5fc5\u8981\u3068\u306a\u308b\uff0e\n\n\u8caf\u6c34\u6c60\u306e\u6c34\u4f4d\u30fc\u5bb9\u91cf\u66f2\u7dda\n\u8caf\u6c34\u6c60\u3078\u306e\u6d41\u5165\u91cf\u6642\u523b\u6b74\uff1a\u901a\u5e38\u306f\u6d2a\u6c34\u306e\u30cf\u30a4\u30c9\u30ed\u30b0\u30e9\u30d5\n\u8caf\u6c34\u6c60\u304b\u3089\u306e\u6d41\u51fa\u7279\u6027\uff1a\u901a\u5e38\u306f\u6d2a\u6c34\u5410\u306e\u6c34\u4f4d\u30fc\u6d41\u51fa\u91cf\u95a2\u4fc2\n\n\u89e3\u6790\u624b\u9806\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\uff0e\n(Step-0) \u521d\u671f\u5024\u3068\u3057\u3066\uff0c\u521d\u671f\u8caf\u6c34\u6c60\u6c34\u4f4d\u6a19\u9ad8\uff0c\u521d\u671f\u6d41\u5165\u91cf\u3092\u4e0e\u3048\u308b\uff0e\u521d\u671f\u6c34\u4f4d\u6a19\u9ad8\u306b\u3088\u308a\uff0c\u8caf\u6c34\u6c60\u6c34\u4f4d\u30fc\u5bb9\u91cf\u66f2\u7dda\u304b\u3089\u521d\u671f\u8caf\u6c34\u6c60\u8caf\u7559\u91cf\u304c\u7b97\u5b9a\u3067\u304d\u308b\uff0e\n(Step-1) \u0394t\u0394t\\Delta t\u6642\u9593\u5f8c\u306e\u6d41\u5165\u91cf\u3092\u5165\u529b\u3059\u308b\u3068\u3068\u3082\u306b\uff0c\u6c34\u4f4d\u4e0a\u6607\u91cf\uff08\u8caf\u6c34\u6c60\u6c34\u4f4d\uff09\u3092\u4eee\u5b9a\u3057\u6d41\u51fa\u91cf\u306e\u8a08\u7b97\u3092\u884c\u3046\uff0e\n(Step-2) \u0394t\u0394t\\Delta t\u6642\u9593\u524d\u306e\u6d41\u5165\u91cf\u3068\u6d41\u51fa\u91cf\u3092\u7528\u3044\uff0c\u0394t\u0394t\\Delta t\u6642\u9593\u5185\u306e\u6d41\u5165\u4f53\u7a4d\u3068\u6d41\u51fa\u4f53\u7a4d\u3092\u6c42\u3081\u308b\uff0e\u3053\u306e\u6d41\u5165\u4f53\u7a4d\u3068\u6d41\u51fa\u4f53\u7a4d\u306e\u5dee\u5206\u304c\uff0c\u0394t\u0394t\\Delta t\u6642\u9593\u5185\u306e\u8caf\u6c34\u6c60\u3078\u306e\u8caf\u7559\u91cf\u5897\u5206\u3068\u306a\u308b\uff0e\n(Step-3) \u8caf\u7559\u91cf\u5897\u5206\u306b\u524d\u56de\u8caf\u6c34\u6c60\u8caf\u7559\u91cf\u3092\u52a0\u3048\u308b\u3053\u3068\u306b\u3088\u308a\uff0c\u6700\u65b0\u306e\u8caf\u6c34\u6c60\u8caf\u7559\u91cf\u304c\u8a08\u7b97\u3055\u308c\uff0c\u307e\u305f\u8caf\u6c34\u6c60\u6c34\u4f4d\u30fc\u5bb9\u91cf\u66f2\u7dda\u3088\u308a\u8caf\u6c34\u6c60\u6c34\u4f4d\u3082\u8a08\u7b97\u3067\u304d\u308b\uff0e\n(Step-4) (Step-1)\u306b\u304a\u3044\u3066\u6c34\u4f4d\u4e0a\u6607\u91cf\u3092\u4eee\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\uff0c(Step-3)\u3067\u6c42\u3081\u305f\u8caf\u6c34\u6c60\u6c34\u4f4d\u3068(Step-1)\u3067\u4eee\u5b9a\u3057\u305f\u8caf\u6c34\u6c60\u6c34\u4f4d\u3092\u6bd4\u8f03\u3057\uff0c\u3053\u308c\u3089\u306e\u5dee\u5206\u304c\u8a31\u5bb9\u8aa4\u5dee\u4ee5\u5185\u306b\u306a\u308b\u307e\u3067\uff0c(Step-1)\u304b\u3089(Step-4)\u306e\u904e\u7a0b\u3092\u7e70\u308a\u8fd4\u3059\uff0e\n\u306a\u304a\uff0c\u901a\u5e38\u306e\u5834\u5408\uff0c\u6d2a\u6c34\u521d\u671f\u306f\u8caf\u6c34\u6c60\u6c34\u4f4d\u304a\u3088\u3073\u6d41\u51fa\u91cf\u306f\u4e0a\u6607\u3057\u3066\u3044\u304d\uff0c\u6d41\u5165\u91cf\u306e\u30d4\u30fc\u30af\u3092\u904e\u304e\u3066\u3082\u8caf\u6c34\u6c60\u6c34\u4f4d\u304a\u3088\u3073\u6d41\u51fa\u91cf\u306f\u4e0a\u6607\u3057\u7d9a\u3051\u308b\u304c\uff0c\u3042\u308b\u6642\u70b9\u304b\u3089\u6c34\u4f4d\u304a\u3088\u3073\u6d41\u51fa\u91cf\u306f\u6e1b\u5c11\u3057\u59cb\u3081\u308b\uff0e\u8a2d\u8a08\u4e0a\u306f\uff0c\u3053\u306e\u6c34\u4f4d\u304a\u3088\u3073\u6d41\u51fa\u91cf\u306e\u30d4\u30fc\u30af\u3092\u6349\u3048\u308c\u3070\u826f\u3044\u308f\u3051\u3067\u3042\u308b\u304c\uff0c\u89e3\u6790\u3068\u3057\u3066\u30b0\u30e9\u30d5\u306e\u4f53\u88c1\u3092\u8003\u3048\u308b\u3068\u6c34\u4f4d\u6e1b\u5c11\u6642\u306e\u6319\u52d5\u3082\u8ffd\u8de1\u3057\u3066\u3042\u308b\u307b\u3046\u304c\u304b\u3063\u3053\u3044\u3044\u306e\u3067\uff0c\u6c34\u4f4d\u964d\u4e0b\u6642\u3092\u8ffd\u8de1\u3067\u304d\u308b\u30eb\u30fc\u30c1\u30f3\u3082\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u7d44\u307f\u8fbc\u3093\u3067\u304a\u304f\uff0e\n\n\u89e3\u6790\u4e8b\u4f8b\n\n\u8caf\u6c34\u6c60\u306f\u767a\u96fb\u7528\u3067\u3042\u308a\uff0c\u30b2\u30fc\u30c8\u3092\u6709\u3057\u3066\u3044\u308b\uff0e\n\u521d\u671f\u6c34\u4f4d\u306fEL.130m\u3067\u3042\u308a\uff0c\u30b2\u30fc\u30c8\u90e8\u8d8a\u6d41\u9802\u6a19\u9ad8\u306fEL.114m\u3068\u3057\u3066\u3044\u308b\uff0e\n\u4e8b\u4f8b\u3067\u306f\uff0c\u30d4\u30fc\u30af\u6d41\u91cf12500m3/s\u306e\u6d2a\u6c34\u6ce2\u5f62\u304c\u6d41\u5165\u3057\u305f\u6642\u306e\u6700\u9ad8\u6c34\u4f4d\u304a\u3088\u3073\u6d41\u51fa\u91cf\u3092\u8ffd\u8de1\u3057\u3066\u3044\u308b\uff0e\n\u30b2\u30fc\u30c8\u3092\u5168\u958b\u306b\u3057\u305f\u6642\uff0c\u6c34\u4f4d\u6a19\u9ad8EL.130m\u3060\u3068\u3059\u308c\u3070\u8d8a\u6d41\u91cf\u306f\u7d044300m3/s\u3067\u3042\u308b\u305f\u3081\uff0c\u6d41\u5165\u91cf\u304c4300m3/s\u4ee5\u4e0b\u306e\u5834\u5408\u306f\u30b2\u30fc\u30c8\u64cd\u4f5c\u306b\u3088\u308a\u8caf\u6c34\u4f4d\u3092EL.130m\u306b\u4fdd\u3061\uff0c\u305d\u308c\u4ee5\u4e0a\u3068\u306a\u3063\u305f\u3089\u30b2\u30fc\u30c8\u5168\u958b\u306e\u6761\u4ef6\u3067\u81ea\u7531\u8d8a\u6d41\u3055\u305b\u308b\u3053\u3068\u306b\u3057\u3066\u3044\u308b\uff0e\n\u307e\u305f\u767a\u96fb\u7528\u8caf\u6c34\u6c60\u306a\u306e\u3067\uff0c\u6d2a\u6c34\u30d4\u30fc\u30af\u304c\u53bb\u308a\u8caf\u6c34\u4f4d\u4f4e\u4e0b\u304c\u59cb\u307e\u3063\u3066\u304b\u3089\u306f\uff0c\u6c34\u4f4d\u6a19\u9ad8\u304cEL.130m\u306b\u9054\u3059\u308b\u76f4\u524d\u304b\u3089\u30b2\u30fc\u30c8\u64cd\u4f5c\u3092\u958b\u59cb\u3057\uff0c\u8caf\u6c34\u4f4d\u3092EL.130m\u306b\u4fdd\u3064\u904b\u7528\u3092\u3059\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u308b\uff0e\u3059\u306a\u308f\u3061\u8caf\u6c34\u4f4dEL.130m\u3068\u306a\u3063\u3066\u304b\u3089\u306f\u6d41\u5165\u91cf\uff1d\u653e\u6d41\u91cf\u3068\u306a\u308b\u3053\u3068\u3068\u3057\u3066\u3044\u308b\uff0e\n\n\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\uff0c\u89e3\u6790\u7528\u3068\u4f5c\u56f3\u7528\u306b\u5206\u3051\u3066\u3044\u308b\uff0e\n\u4ee5\u4e0b\u306f\u5b9f\u884c\u7528\u30b9\u30af\u30ea\u30d7\u30c8\npython3 py_eng_floodrm.py hv1m.txt hydro1m.txt out_flood.txt\npython3 py_eng_fig_floodrm.py\n\n\n\u89e3\u6790\u30d7\u30ed\u30b0\u30e9\u30e0\n\n\u5165\u529b\u30c7\u30fc\u30bf\uff1a\u8caf\u6c34\u6c60H-V\u30c7\u30fc\u30bf\n\n\uff11\u884c\u76ee\u306f\u8caf\u6c34\u6c60\u5bb9\u91cf\u306b\u4e57\u3058\u308b\u4fc2\u6570\uff08\u3053\u3053\u3067\u306f\u767e\u4e07m3\uff09\uff0e\n\uff12\u884c\u76ee\u4ee5\u964d\u306f\uff0c\uff11\u5217\u76ee\u304c\u6a19\u9ad8\uff0c\uff12\u5217\u3081\u304c\u7d2f\u8a08\u5bb9\u91cf\u3092\u793a\u3059\uff0e\n\n\nhv1m.txt\n1e6\n 60.0         0.000\n 61.0         0.045\n 62.0         0.187\n 63.0         0.437\n..........\n\n\n\n\u5165\u529b\u30c7\u30fc\u30bf\uff1a\u6d2a\u6c34\u6ce2\u5f62\uff08\u30cf\u30a4\u30c9\u30ed\u30b0\u30e9\u30d5\uff09\n\n\uff11\u884c\u76ee\uff11\u5217\u76ee\u306f\u521d\u671f\u8caf\u6c34\u6c60\u6c34\u4f4d\u6a19\u9ad8\uff08\u3053\u3053\u3067\u306f130m\uff09\uff0e\n\uff11\u884c\u76ee\uff12\u5217\u76ee\u306f\u5e38\u6642\u653e\u6d41\u91cf\uff08\u3053\u3053\u3067\u306f\uff10\uff09\uff0e\n\uff12\u884c\u76ee\u4ee5\u964d\u306f\uff0c\uff11\u5217\u76ee\u304c\u6642\u523b\uff0c\uff12\u5217\u76ee\u304c\u6d41\u5165\u91cf\uff08m3/s\uff09\n\n\nhydro1m.txt\n130.0 0\n  0.0           118\n  1.0           205\n  2.0           289\n  3.0           371\n  4.0           454\n  5.0           537\n..........\n\n\n\n\u89e3\u6790\u30d7\u30ed\u30b0\u30e9\u30e0\n\u95a2\u6570 def SP(elv,hmax): \u304a\u3088\u3073 def SPQ(elv,qqin,hmax,qref,ELini): \u306f\u6d2a\u6c34\u5410\u304d\u306e\u7279\u6027\u3092\u793a\u3059\u3082\u306e\u3067\u3042\u308a\uff0c\u57fa\u672c\u7684\u306b\u306f\u8272\u3005\u306a\u8caf\u6c34\u6c60\u306e\u30bf\u30a4\u30d7\u306b\u5408\u308f\u305b\u3066\uff0c\u3053\u306e\uff12\u3064\u3092\u66f8\u304d\u63db\u3048\u306a\u304c\u3089\u4f7f\u3044\u307e\u308f\u3057\u3066\u3044\u308b\uff0e\uff08\u6d2a\u6c34\u5410\u306e\u7279\u6027\u306b\u3088\u3063\u3066\u306f\u672c\u30eb\u30fc\u30c1\u30f3\u3082\u66f8\u304d\u63db\u3048\u308b\u5fc5\u8981\u3042\u308a\uff09\n\npy_eng_floodrm.py\n# -*- coding: utf-8 -*-\nimport sys\nfrom math import *\n\ndef SP(elv,hmax):\n    # Head-Discharge relationship of Spillway\n    ELcr=116.0\n    b=11.5\n    n=4\n    x=0.1387\n    Cd=1.971+0.498*x+6.63*x*x\n    a=(1.6-Cd)/(Cd-3.2)\n    h=elv-ELcr\n    q=0.0\n    if 0.0<h:\n        Hd=139.0-ELcr\n        c=1.6*(1.0+2.0*a*h/Hd)/(1.0+a*h/Hd)\n        kp=0.112703962703963*(h/Hd)**2-0.237885780885781*(h/Hd)+0.126496503496503\n        ka=-0.0813160731673404*(h/Hd)**2+0.255143813465017*(h/Hd)\n#        kp=0.02\n#        ka=10.0*kp\n        bx=b*float(n)-2.0*(float(n-1)*kp+ka)*h\n        q=c*bx*h**1.5\n    return q\n\n\ndef SPQ(elv,qqin,hmax,qref,ELini):\n    # To obtain the discharge of overflow crest from the water level\n    q=qqin\n    qs=SP(elv,hmax)\n    if qref<qqin: q=qs\n    if qref+0.1<qs: q=qs\n    return q\n\ndef RET_V(nn,rh,rv,elv):\n    # To obtain the cumulative volume from the water level\n    for i in range(0,nn-1):\n        if rh[i]<=elv and elv<=rh[i+1]: break\n    if rh[nn-1]<elv: i=nn-2\n    x1=rv[i]\n    y1=rh[i]\n    x2=rv[i+1]\n    y2=rh[i+1]\n    a=(y2-y1)/(x2-x1)\n    b=(x2*y1-x1*y2)/(x2-x1)\n    v=(elv-b)/a\n    return v\n\ndef RET_H(nn,rh,rv,v):\n    # To obtain the water level from cumulative volume\n    for i in range(0,nn-1):\n        if rv[i]<=v and v<=rv[i+1]: break\n    if rv[nn-1]<v: i=nn-2\n    x1=rv[i]\n    y1=rh[i]\n    x2=rv[i+1]\n    y2=rh[i+1]\n    a=(y2-y1)/(x2-x1)\n    b=(x2*y1-x1*y2)/(x2-x1)\n    elv=a*v+b\n    return elv\n\n\n#Main routine\nparam=sys.argv\nfnameR1=param[1] # H-V data of reservoir\nfnameR2=param[2] # Hydrograph of design flood\nfnameW =param[3] # Output file name\n\n# Input H-V data\nrh=[]\nrv=[]\nfin=open(fnameR1,'r')\ntext=fin.readline()\ntext=text.strip()\ntext=text.split()\nvcoef=float(text[0])\nwhile 1:\n    text=fin.readline()\n    if not text: break\n    text=text.strip()\n    text=text.split()\n    rh=rh+[float(text[0])]\n    rv=rv+[float(text[1])*vcoef]\nfin.close()\nnn=len(rh)\n\n# Input time sequence of inflow\nti=[]\nq_in=[]\nfin=open(fnameR2,'r')\ntext=fin.readline()\ntext=text.strip()\ntext=text.split()\nELini=float(text[0])\noutlet=float(text[1])\nwhile 1:\n    text=fin.readline()\n    if not text: break\n    text=text.strip()\n    text=text.split()\n    ti=ti+[float(text[0])]\n    q_in=q_in+[float(text[1])]\nfin.close()\nnd=len(ti)\n\nhmax=-99.9\nfor iii in range(0,10):\n    qref=SP(ELini,hmax)\n    pEL=[]\n    pQo=[]\n    fout=open(fnameW,'w')\n    # Initial outflow\n    elv=ELini\n    EL=elv\n    VOL=RET_V(nn,rh,rv,elv)\n    q_out=SPQ(elv,q_in[0],hmax,qref,ELini)+outlet\n    i=0\n    iUD=0\n    print('{0:>5s} {1:>5s} {2:>10s} {3:>10s} {4:>15s} {5:>15s} {6:>15s} {7:>15s}'.format('i','iUD','time','EL','EL-elv','VOL','q_in','q_out'),file=fout)\n    print('{0:5d} {1:5d} {2:10.3f} {3:10.3f} {4:15e} {5:15e} {6:15e} {7:15e}'.format(i,iUD,ti[i],EL,EL-elv,VOL,q_in[i],q_out),file=fout)\n    # Iterative calculation\n    iUD=1\n    dh=0.0001\n    eps=0.0001\n    itmax=int(1.0/dh)*10\n    for i in range(0,nd-1):\n        qqin=0.5*(q_in[i]+q_in[i+1])\n        tim=0.5*(ti[i+1]-ti[i])\n        Qin=0.5*(q_in[i]+q_in[i+1])*(ti[i+1]-ti[i])*3600.0\n        hh=0.0\n        j=0\n        while 1:\n            j=j+1;\n            hh=hh+float(iUD)*dh\n            elv=EL;    q1=SPQ(elv,qqin,hmax,qref,ELini)+outlet\n            elv=EL+hh; q2=SPQ(elv,qqin,hmax,qref,ELini)+outlet\n            Qout=0.5*(q1+q2)*(ti[i+1]-ti[i])*3600.0\n            R=VOL+Qin-Qout\n            elv=RET_H(nn,rh,rv,R)\n            if abs(q1-qqin)<eps and tim<36.0:\n                R=VOL\n                hh=0.0\n                break\n            if iUD==1 and j==10:\n                if EL+hh>elv:\n                    iUD=-1\n                    hh=0.0\n                    j=0\n            if iUD==-1 and j==10:\n                if EL+hh<elv:\n                    iUD=1\n                    hh=0.0\n                    j=0\n            if abs(EL+hh-elv)<eps: break\n        VOL=R    # Cumulative volume\n        EL=EL+hh # Elevation\n        q_out=q2 # Outflow\n        print('{0:5d} {1:5d} {2:10.3f} {3:10.3f} {4:15e} {5:15e} {6:15e} {7:15e}'.format(i+1,iUD,ti[i+1],EL,EL-elv,VOL,q_in[i+1],q_out),file=fout)\n        pEL=pEL+[EL]\n        pQo=pQo+[q_out]\n        sys.stdout.write('\\r%d / %d' % (i+1,nd-1))\n        sys.stdout.flush()\n    fout.close()\n    if abs(ELini+hmax-max(pEL))<0.001: break\n    hmax=max(pEL)-ELini\n    sys.stdout.write('\\n')\n    sys.stdout.write('Time: %10.3f\\n'% max(ti))\n    sys.stdout.write('h   : %10.3f\\n'% hmax)\n    sys.stdout.write('Qin : %10.3f %10.3f\\n'% (min(q_in),max(q_in)))\n    sys.stdout.write('Qout: %10.3f %10.3f\\n'% (min(pQo),max(pQo)))\n    sys.stdout.write('EL  : %10.3f %10.3f\\n'% (min(pEL),max(pEL)))\n    sys.stdout.write('qref: %10.3f\\n'% (qref))\n    del pEL,pQo\nsys.stdout.write('\\n')\nsys.stdout.write('Time: %10.3f\\n'% max(ti))\nsys.stdout.write('h   : %10.3f\\n'% hmax)\nsys.stdout.write('Qin : %10.3f %10.3f\\n'% (min(q_in),max(q_in)))\nsys.stdout.write('Qout: %10.3f %10.3f\\n'% (min(pQo),max(pQo)))\nsys.stdout.write('EL  : %10.3f %10.3f\\n'% (min(pEL),max(pEL)))\nsys.stdout.write('qref: %10.3f\\n'% (qref))\n\n\n\n\u4f5c\u56f3\u30d7\u30ed\u30b0\u30e9\u30e0\n\n\u89e3\u6790\u7d50\u679c\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\n\ni\uff1a\u30c7\u30fc\u30bf\u756a\u53f7\niUD\uff1a\u6c34\u4f4d\u4e0a\u6607\u30fb\u964d\u4e0b\u3092\u793a\u3059\u8a18\u53f7\uff080\uff1a\u521d\u671f\u5024\uff0c1\uff1a\u6c34\u4f4d\u4e0a\u6607\uff0c2\uff1a\u6c34\u4f4d\u964d\u4e0b\u304b\u3089\u4e00\u5b9a\uff09\ntime\uff1a\u6642\u523b\nEL-elv\uff1a\u4eee\u5b9a\u3057\u305f\u6c34\u4f4d(EL)\u3068\u8caf\u6c34\u6c60\u6c34\u4f4d\u30fc\u5bb9\u91cf\u66f2\u7dda\u3088\u308a\u6c42\u3081\u305f\u6c34\u4f4d\u306e\u5dee\u5206\nVOL\uff1a\u8caf\u6c34\u6c60\u306e\u8caf\u7559\u91cf\nq_in\uff1a\u8caf\u6c34\u6c60\u3078\u306e\u6d41\u5165\u91cf\uff08m3/s\uff09\nq_out\uff1a\u8caf\u6c34\u6c60\u304b\u3089\u306e\u6d41\u51fa\u91cf\uff08m3/s\uff09\n\n\nout_flood.txt\n    i   iUD       time         EL          EL-elv             VOL            q_in           q_out\n    0     0      0.000    130.000    0.000000e+00    1.053350e+09    1.180000e+02    1.180000e+02\n    1     1      1.000    130.000    0.000000e+00    1.053350e+09    2.050000e+02    1.615000e+02\n    2     1      2.000    130.000    0.000000e+00    1.053350e+09    2.890000e+02    2.470000e+02\n    3     1      3.000    130.000    0.000000e+00    1.053350e+09    3.710000e+02    3.300000e+02\n    4     1      4.000    130.000    0.000000e+00    1.053350e+09    4.540000e+02    4.125000e+02\n    5     1      5.000    130.000    0.000000e+00    1.053350e+09    5.370000e+02    4.955000e+02\n..........\n\n\n\n\u4f5c\u56f3\u30d7\u30ed\u30b0\u30e9\u30e0\n\u4f5c\u56f3\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\uff0cnumpy\u914d\u5217\u3067\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\uff0c\u8a08\u7b97\u6642\u9593\u5185\u3067\uff0c\u6d41\u5165\u91cf\u3068\u6d41\u51fa\u91cf\u306b\u5927\u304d\u306a\u5dee\u304c\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\uff0cSimpson\u6cd5\u306b\u3088\u308b\u6570\u5024\u7a4d\u5206\u3092\u884c\u3063\u3066\u3044\u308b\uff0e\nimport numpy as np\nfrom scipy import integrate\n\ndata=np.loadtxt(fnameR,skiprows=1,usecols=(2,3,6,7))\nti=data[:,0]\nEL=data[:,1]\nQi=data[:,2]\nQo=data[:,3]\nint_Qi=integrate.simps(Qi*3600,ti)\nint_Qo=integrate.simps(Qo*3600,ti)\nprint('V_in={0:10.3f} million m3'.format(int_Qi/1e6))\nprint('Vout={0:10.3f} million m3'.format(int_Qo/1e6))\n\nnumpy\u914d\u5217\u3067\u306f\uff0c\u6700\u5927\u5024\u3068\u306a\u308b\u8981\u7d20\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6c42\u3081\u308b\uff0e\nn1=np.argmax(Qi)\nn2=np.argmax(Qo)\nn3=np.argmax(EL)\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\uff0ctwinx() \u3092\u7528\u3044\u3066\uff0c\u5de6\u7e26\u8ef8\u306b\u6d41\u91cf\uff0c\u53f3\u7e26\u8ef8\u306b\u8caf\u6c34\u6c60\u6c34\u4f4d\u3092\u3068\u3063\u3066\u30b0\u30e9\u30d5\u5316\u3057\u3066\u3044\u308b\uff0e\u307e\u305f\u51e1\u4f8b\u3092\uff11\u3064\u306e\u30dc\u30c3\u30af\u30b9\u306b\u53ce\u3081\u308b\u305f\u3081\uff0c\u53f3\u7e26\u8ef8\u7528\u306e\u30c0\u30df\u30fc\u30d7\u30ed\u30c3\u30c8\u3092\u884c\u3063\u3066\u3044\u308b\uff0e\u307e\u305f\u70b9\u7dda\u304a\u3088\u3073\u4e00\u70b9\u9396\u7dda\u306f\uff0c\u30c7\u30d5\u30a9\u30eb\u30c8\u306f\u3042\u307e\u308a\u304b\u3063\u3053\u3088\u304f\u306a\u3044\u305f\u3081\u4f7f\u308f\u305a\uff0c\u5225\u9014\u5b9a\u7fa9\u3057\u3066\u3044\u308b\uff0e\nline1=plt.plot(ti,Qi,color='black',lw=2.0,label='Q (inflow)')\nline2=plt.plot(ti,Qo,color='black',lw=2.0,label='Q (outflow)')\nplt.plot([0],[0],color='black',lw=2.0,label='Water Level') #Dummy for legend\nline1[0].set_dashes([5,2])\nline2[0].set_dashes([8,4,2,4])\n\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u5168\u6587\n\npy_eng_fig_floodrm.py\n# -*- coding: utf-8 -*-\nimport numpy as np\nfrom scipy import integrate\nimport matplotlib.pyplot as plt\n\ndef DRAWFIG(fnameR,fnameF,ELcr):\n    # Parameter setting\n    xmin=0.0;xmax=140.0\n    qmin=0.0;qmax=20000.0\n    hmin=124.0;hmax=144.0\n    # Input data\n    data=np.loadtxt(fnameR,skiprows=1,usecols=(2,3,6,7))\n    ti=data[:,0]\n    EL=data[:,1]\n    Qi=data[:,2]\n    Qo=data[:,3]\n    int_Qi=integrate.simps(Qi*3600,ti)\n    int_Qo=integrate.simps(Qo*3600,ti)\n    print('V_in={0:10.3f} million m3'.format(int_Qi/1e6))\n    print('Vout={0:10.3f} million m3'.format(int_Qo/1e6))\n\n    fig=plt.figure()\n    line1=plt.plot(ti,Qi,color='black',lw=2.0,label='Q (inflow)')\n    line2=plt.plot(ti,Qo,color='black',lw=2.0,label='Q (outflow)')\n    plt.plot([0],[0],color='black',lw=2.0,label='Water Level') #Dummy for legend\n    line1[0].set_dashes([5,2])\n    line2[0].set_dashes([8,4,2,4])\n    n1=np.argmax(Qi)\n    n2=np.argmax(Qo)\n    n3=np.argmax(EL)\n    plt.text(ti[n1],Qi[n1],'max:%.0f'%max(Qi),fontsize=10,color='black',ha='left',va='bottom')\n    plt.text(ti[n2],Qo[n2],'max:%.0f'%max(Qo),fontsize=10,color='black',ha='left',va='bottom')\n    plt.xlabel('Time (hour)')\n    plt.ylabel('Discharge (m$^3$/s)')\n    plt.xticks(np.arange(xmin,xmax+12,12))\n    plt.yticks(np.arange(qmin,qmax+2000,2000))\n    plt.grid()\n    plt.legend(shadow=True,loc='upper right',handlelength=3)\n    plt.twinx()\n    plt.plot(ti,EL,color='black',lw=2.0,label='Water Level')\n    plt.hlines([ELcr],xmin,xmax,color='black',lw=1.0,linestyles='dashed',label='O.F.crest')\n    plt.text(ti[n3],EL[n3],'ELmax:%.3f'%max(EL),fontsize=10,color='black',ha='left',va='bottom')\n    plt.text(xmin+1,ELcr,'FSL:EL.%.1f'%ELcr,fontsize=10,color='black',ha='right',va='bottom')\n    plt.ylim(hmin,hmax)\n    plt.yticks(np.arange(hmin,hmax+2,2))\n    plt.ylabel('Water Level (EL.m)')\n    plt.savefig(fnameF,dpi=200)\n    plt.show()\n    plt.close()\n\n\n# Main routine\nfnameR='out_flood.txt'\nfnameF='fig_flood.png'\nELcr=130.0\nDRAWFIG(fnameR,fnameF,ELcr)\n\n\n\u4ee5\u4e0a\n##\u306f\u3058\u3081\u306b\n\u6d2a\u6c34\u6642\u306e\u8caf\u6c34\u6c60\u6c34\u4f4d\u8ffd\u8de1\uff08\u82f1\u8a9e\u3067\u306f flood routing\uff09\u306f\uff0c\u6d2a\u6c34\u304c\u8caf\u6c34\u6c60\u306b\u6d41\u5165\u3057\u305f\u6642\uff0c\u30c0\u30e0\u304b\u3089\u306e\u653e\u6d41\u91cf\u3092\u8003\u616e\u3057\u306a\u304c\u3089\uff0c\u6c34\u4f4d\u304c\u3069\u306e\u3088\u3046\u306b\u5909\u5316\u3059\u308b\u304b\u3092\u8ffd\u8de1\u3059\u308b\u89e3\u6790\u3067\u3059\uff0e\u7279\u306b\u6e5b\u6c34\u9762\u7a4d\u30fb\u5bb9\u91cf\u306e\u5927\u304d\u306a\u8caf\u6c34\u6c60\u3067\u306f\uff0c\u6d2a\u6c34\u6d41\u5165\u6642\u306e\u8caf\u6c34\u6c60\u306e\u8caf\u7559\u52b9\u679c\u304c\u5927\u304d\u3044\u305f\u3081\uff0c\u3042\u308b\u7a0b\u5ea6\u306e\u8caf\u6c34\u6c60\u306e\u6c34\u4f4d\u4e0a\u6607\u306f\u4f34\u3044\u307e\u3059\u304c\uff0c\u6d41\u5165\u6d2a\u6c34\u6ce2\u5f62\u306e\u30d4\u30fc\u30af\u3092\u30ab\u30c3\u30c8\u3067\u304d\u308b\u3068\u3068\u3082\u306b\uff0c\u5408\u7406\u7684\u306a\u6d2a\u6c34\u5410\u8a2d\u8a08\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u305f\u3081\uff0c\u91cd\u8981\u306a\u89e3\u6790\u3068\u306a\u3063\u3066\u304d\u307e\u3059\uff0e\u307e\u305f\u7e70\u308a\u8fd4\u3057\u8a08\u7b97\u3092\u4f34\u3046\u89e3\u6790\u3067\u3042\u308b\u305f\u3081\uff0c\u30d7\u30ed\u30b0\u30e9\u30e0\u8a00\u8a9e\u306b\u3088\u308b\u51e6\u7406\u304c\u9069\u3057\u3066\u3044\u308b\u3068\u8003\u3048\u3066\u3044\u307e\u3059\uff0e\n\n\u7b46\u8005\u3082\uff0c\u8272\u3005\u306a\u30b1\u30fc\u30b9\u3067\u3053\u306e\u89e3\u6790\u3092\u884c\u3063\u3066\u304d\u307e\u3057\u305f\u304c\uff0c\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u7c21\u5358\u306a\u89e3\u8aac\u3092\u884c\u3044\u306a\u304c\u3089\uff0c\u3053\u3053\u306b\u30a2\u30c3\u30d7\u3057\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\uff0e\n\n##\u7406\u8ad6\n\u8caf\u6c34\u6c60\u3078\u306e\u8caf\u7559\u91cf\u306f\uff0c\u6d41\u5165\u91cf\u3068\u6d41\u51fa\u91cf\u306e\u5dee\u306b\u652f\u914d\u3055\u308c\uff0c\u3042\u308b\u6642\u9593\u9593\u9694$\\Delta t$\u306b\u5bfe\u3057\uff0c\u3053\u306e\u95a2\u4fc2\u306f\uff0c\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u8868\u73fe\u3067\u304d\u308b\uff0e\n\n$$\n\\Delta S=Q_{i}\\cdot \\Delta t - Q_{o}\\cdot \\Delta t\n$$\n\n+ $\\Delta t$ : \u6642\u9593\u9593\u9694\n+ $\\Delta S$ : $\\Delta t$\u6642\u9593\u3067\u306e\u8caf\u6c34\u6c60\u3078\u306e\u8caf\u7559\u91cf\n+ $Q_i$ : $\\Delta t$\u6642\u9593\u5185\u306e\u5e73\u5747\u6d41\u5165\u91cf\n+ $Q_o$ : $\\Delta t$\u6642\u9593\u5185\u306e\u5e73\u5747\u6d41\u51fa\u91cf\n\n\u4e0a\u5f0f\u3092\u89e3\u304f\u4e0a\u3067\uff0c\u4ee5\u4e0b\u306e\uff13\u3064\u306e\u7279\u6027\u5024\u304c\u5fc5\u8981\u3068\u306a\u308b\uff0e\n\n+ \u8caf\u6c34\u6c60\u306e\u6c34\u4f4d\u30fc\u5bb9\u91cf\u66f2\u7dda\n+ \u8caf\u6c34\u6c60\u3078\u306e\u6d41\u5165\u91cf\u6642\u523b\u6b74\uff1a\u901a\u5e38\u306f\u6d2a\u6c34\u306e\u30cf\u30a4\u30c9\u30ed\u30b0\u30e9\u30d5\n+ \u8caf\u6c34\u6c60\u304b\u3089\u306e\u6d41\u51fa\u7279\u6027\uff1a\u901a\u5e38\u306f\u6d2a\u6c34\u5410\u306e\u6c34\u4f4d\u30fc\u6d41\u51fa\u91cf\u95a2\u4fc2\n\n\u89e3\u6790\u624b\u9806\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\uff0e\n\n(Step-0) \u521d\u671f\u5024\u3068\u3057\u3066\uff0c\u521d\u671f\u8caf\u6c34\u6c60\u6c34\u4f4d\u6a19\u9ad8\uff0c\u521d\u671f\u6d41\u5165\u91cf\u3092\u4e0e\u3048\u308b\uff0e\u521d\u671f\u6c34\u4f4d\u6a19\u9ad8\u306b\u3088\u308a\uff0c\u8caf\u6c34\u6c60\u6c34\u4f4d\u30fc\u5bb9\u91cf\u66f2\u7dda\u304b\u3089\u521d\u671f\u8caf\u6c34\u6c60\u8caf\u7559\u91cf\u304c\u7b97\u5b9a\u3067\u304d\u308b\uff0e\n\n(Step-1) $\\Delta t$\u6642\u9593\u5f8c\u306e\u6d41\u5165\u91cf\u3092\u5165\u529b\u3059\u308b\u3068\u3068\u3082\u306b\uff0c\u6c34\u4f4d\u4e0a\u6607\u91cf\uff08\u8caf\u6c34\u6c60\u6c34\u4f4d\uff09\u3092\u4eee\u5b9a\u3057\u6d41\u51fa\u91cf\u306e\u8a08\u7b97\u3092\u884c\u3046\uff0e\n\n(Step-2) $\\Delta t$\u6642\u9593\u524d\u306e\u6d41\u5165\u91cf\u3068\u6d41\u51fa\u91cf\u3092\u7528\u3044\uff0c$\\Delta t$\u6642\u9593\u5185\u306e\u6d41\u5165\u4f53\u7a4d\u3068\u6d41\u51fa\u4f53\u7a4d\u3092\u6c42\u3081\u308b\uff0e\u3053\u306e\u6d41\u5165\u4f53\u7a4d\u3068\u6d41\u51fa\u4f53\u7a4d\u306e\u5dee\u5206\u304c\uff0c$\\Delta t$\u6642\u9593\u5185\u306e\u8caf\u6c34\u6c60\u3078\u306e\u8caf\u7559\u91cf\u5897\u5206\u3068\u306a\u308b\uff0e\n\n(Step-3) \u8caf\u7559\u91cf\u5897\u5206\u306b\u524d\u56de\u8caf\u6c34\u6c60\u8caf\u7559\u91cf\u3092\u52a0\u3048\u308b\u3053\u3068\u306b\u3088\u308a\uff0c\u6700\u65b0\u306e\u8caf\u6c34\u6c60\u8caf\u7559\u91cf\u304c\u8a08\u7b97\u3055\u308c\uff0c\u307e\u305f\u8caf\u6c34\u6c60\u6c34\u4f4d\u30fc\u5bb9\u91cf\u66f2\u7dda\u3088\u308a\u8caf\u6c34\u6c60\u6c34\u4f4d\u3082\u8a08\u7b97\u3067\u304d\u308b\uff0e\n\n(Step-4) (Step-1)\u306b\u304a\u3044\u3066\u6c34\u4f4d\u4e0a\u6607\u91cf\u3092\u4eee\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\uff0c(Step-3)\u3067\u6c42\u3081\u305f\u8caf\u6c34\u6c60\u6c34\u4f4d\u3068(Step-1)\u3067\u4eee\u5b9a\u3057\u305f\u8caf\u6c34\u6c60\u6c34\u4f4d\u3092\u6bd4\u8f03\u3057\uff0c\u3053\u308c\u3089\u306e\u5dee\u5206\u304c\u8a31\u5bb9\u8aa4\u5dee\u4ee5\u5185\u306b\u306a\u308b\u307e\u3067\uff0c(Step-1)\u304b\u3089(Step-4)\u306e\u904e\u7a0b\u3092\u7e70\u308a\u8fd4\u3059\uff0e\n\n\u306a\u304a\uff0c\u901a\u5e38\u306e\u5834\u5408\uff0c\u6d2a\u6c34\u521d\u671f\u306f\u8caf\u6c34\u6c60\u6c34\u4f4d\u304a\u3088\u3073\u6d41\u51fa\u91cf\u306f\u4e0a\u6607\u3057\u3066\u3044\u304d\uff0c\u6d41\u5165\u91cf\u306e\u30d4\u30fc\u30af\u3092\u904e\u304e\u3066\u3082\u8caf\u6c34\u6c60\u6c34\u4f4d\u304a\u3088\u3073\u6d41\u51fa\u91cf\u306f\u4e0a\u6607\u3057\u7d9a\u3051\u308b\u304c\uff0c\u3042\u308b\u6642\u70b9\u304b\u3089\u6c34\u4f4d\u304a\u3088\u3073\u6d41\u51fa\u91cf\u306f\u6e1b\u5c11\u3057\u59cb\u3081\u308b\uff0e\u8a2d\u8a08\u4e0a\u306f\uff0c\u3053\u306e\u6c34\u4f4d\u304a\u3088\u3073\u6d41\u51fa\u91cf\u306e\u30d4\u30fc\u30af\u3092\u6349\u3048\u308c\u3070\u826f\u3044\u308f\u3051\u3067\u3042\u308b\u304c\uff0c\u89e3\u6790\u3068\u3057\u3066\u30b0\u30e9\u30d5\u306e\u4f53\u88c1\u3092\u8003\u3048\u308b\u3068\u6c34\u4f4d\u6e1b\u5c11\u6642\u306e\u6319\u52d5\u3082\u8ffd\u8de1\u3057\u3066\u3042\u308b\u307b\u3046\u304c\u304b\u3063\u3053\u3044\u3044\u306e\u3067\uff0c\u6c34\u4f4d\u964d\u4e0b\u6642\u3092\u8ffd\u8de1\u3067\u304d\u308b\u30eb\u30fc\u30c1\u30f3\u3082\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u7d44\u307f\u8fbc\u3093\u3067\u304a\u304f\uff0e\n\n##\u89e3\u6790\u4e8b\u4f8b\n\n+ \u8caf\u6c34\u6c60\u306f\u767a\u96fb\u7528\u3067\u3042\u308a\uff0c\u30b2\u30fc\u30c8\u3092\u6709\u3057\u3066\u3044\u308b\uff0e\n+ \u521d\u671f\u6c34\u4f4d\u306fEL.130m\u3067\u3042\u308a\uff0c\u30b2\u30fc\u30c8\u90e8\u8d8a\u6d41\u9802\u6a19\u9ad8\u306fEL.114m\u3068\u3057\u3066\u3044\u308b\uff0e\n+ \u4e8b\u4f8b\u3067\u306f\uff0c\u30d4\u30fc\u30af\u6d41\u91cf12500m3/s\u306e\u6d2a\u6c34\u6ce2\u5f62\u304c\u6d41\u5165\u3057\u305f\u6642\u306e\u6700\u9ad8\u6c34\u4f4d\u304a\u3088\u3073\u6d41\u51fa\u91cf\u3092\u8ffd\u8de1\u3057\u3066\u3044\u308b\uff0e\n+ \u30b2\u30fc\u30c8\u3092\u5168\u958b\u306b\u3057\u305f\u6642\uff0c\u6c34\u4f4d\u6a19\u9ad8EL.130m\u3060\u3068\u3059\u308c\u3070\u8d8a\u6d41\u91cf\u306f\u7d044300m3/s\u3067\u3042\u308b\u305f\u3081\uff0c\u6d41\u5165\u91cf\u304c4300m3/s\u4ee5\u4e0b\u306e\u5834\u5408\u306f\u30b2\u30fc\u30c8\u64cd\u4f5c\u306b\u3088\u308a\u8caf\u6c34\u4f4d\u3092EL.130m\u306b\u4fdd\u3061\uff0c\u305d\u308c\u4ee5\u4e0a\u3068\u306a\u3063\u305f\u3089\u30b2\u30fc\u30c8\u5168\u958b\u306e\u6761\u4ef6\u3067\u81ea\u7531\u8d8a\u6d41\u3055\u305b\u308b\u3053\u3068\u306b\u3057\u3066\u3044\u308b\uff0e\n+ \u307e\u305f\u767a\u96fb\u7528\u8caf\u6c34\u6c60\u306a\u306e\u3067\uff0c\u6d2a\u6c34\u30d4\u30fc\u30af\u304c\u53bb\u308a\u8caf\u6c34\u4f4d\u4f4e\u4e0b\u304c\u59cb\u307e\u3063\u3066\u304b\u3089\u306f\uff0c\u6c34\u4f4d\u6a19\u9ad8\u304cEL.130m\u306b\u9054\u3059\u308b\u76f4\u524d\u304b\u3089\u30b2\u30fc\u30c8\u64cd\u4f5c\u3092\u958b\u59cb\u3057\uff0c\u8caf\u6c34\u4f4d\u3092EL.130m\u306b\u4fdd\u3064\u904b\u7528\u3092\u3059\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u308b\uff0e\u3059\u306a\u308f\u3061\u8caf\u6c34\u4f4dEL.130m\u3068\u306a\u3063\u3066\u304b\u3089\u306f\u6d41\u5165\u91cf\uff1d\u653e\u6d41\u91cf\u3068\u306a\u308b\u3053\u3068\u3068\u3057\u3066\u3044\u308b\uff0e\n\n![fig_flood.png](https://qiita-image-store.s3.amazonaws.com/0/129300/d93fc2c9-fa82-086b-27a7-e3a666b88d45.png)\n\n\n##\u30d7\u30ed\u30b0\u30e9\u30e0\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\uff0c\u89e3\u6790\u7528\u3068\u4f5c\u56f3\u7528\u306b\u5206\u3051\u3066\u3044\u308b\uff0e\n\n\u4ee5\u4e0b\u306f\u5b9f\u884c\u7528\u30b9\u30af\u30ea\u30d7\u30c8\n\n```\npython3 py_eng_floodrm.py hv1m.txt hydro1m.txt out_flood.txt\npython3 py_eng_fig_floodrm.py\n```\n\n\n###\u89e3\u6790\u30d7\u30ed\u30b0\u30e9\u30e0\n\n####\u5165\u529b\u30c7\u30fc\u30bf\uff1a\u8caf\u6c34\u6c60H-V\u30c7\u30fc\u30bf\n\n+ \uff11\u884c\u76ee\u306f\u8caf\u6c34\u6c60\u5bb9\u91cf\u306b\u4e57\u3058\u308b\u4fc2\u6570\uff08\u3053\u3053\u3067\u306f\u767e\u4e07m3\uff09\uff0e\n+ \uff12\u884c\u76ee\u4ee5\u964d\u306f\uff0c\uff11\u5217\u76ee\u304c\u6a19\u9ad8\uff0c\uff12\u5217\u3081\u304c\u7d2f\u8a08\u5bb9\u91cf\u3092\u793a\u3059\uff0e\n\n```txt:hv1m.txt\n1e6\n 60.0         0.000\n 61.0         0.045\n 62.0         0.187\n 63.0         0.437\n..........\n```\n\n####\u5165\u529b\u30c7\u30fc\u30bf\uff1a\u6d2a\u6c34\u6ce2\u5f62\uff08\u30cf\u30a4\u30c9\u30ed\u30b0\u30e9\u30d5\uff09\n\n+ \uff11\u884c\u76ee\uff11\u5217\u76ee\u306f\u521d\u671f\u8caf\u6c34\u6c60\u6c34\u4f4d\u6a19\u9ad8\uff08\u3053\u3053\u3067\u306f130m\uff09\uff0e\n+ \uff11\u884c\u76ee\uff12\u5217\u76ee\u306f\u5e38\u6642\u653e\u6d41\u91cf\uff08\u3053\u3053\u3067\u306f\uff10\uff09\uff0e\n+ \uff12\u884c\u76ee\u4ee5\u964d\u306f\uff0c\uff11\u5217\u76ee\u304c\u6642\u523b\uff0c\uff12\u5217\u76ee\u304c\u6d41\u5165\u91cf\uff08m3/s\uff09\n\n```txt:hydro1m.txt\n130.0 0\n  0.0           118\n  1.0           205\n  2.0           289\n  3.0           371\n  4.0           454\n  5.0           537\n..........\n```\n\n####\u89e3\u6790\u30d7\u30ed\u30b0\u30e9\u30e0\n\u95a2\u6570 def SP(elv,hmax): \u304a\u3088\u3073 def SPQ(elv,qqin,hmax,qref,ELini): \u306f\u6d2a\u6c34\u5410\u304d\u306e\u7279\u6027\u3092\u793a\u3059\u3082\u306e\u3067\u3042\u308a\uff0c\u57fa\u672c\u7684\u306b\u306f\u8272\u3005\u306a\u8caf\u6c34\u6c60\u306e\u30bf\u30a4\u30d7\u306b\u5408\u308f\u305b\u3066\uff0c\u3053\u306e\uff12\u3064\u3092\u66f8\u304d\u63db\u3048\u306a\u304c\u3089\u4f7f\u3044\u307e\u308f\u3057\u3066\u3044\u308b\uff0e\uff08\u6d2a\u6c34\u5410\u306e\u7279\u6027\u306b\u3088\u3063\u3066\u306f\u672c\u30eb\u30fc\u30c1\u30f3\u3082\u66f8\u304d\u63db\u3048\u308b\u5fc5\u8981\u3042\u308a\uff09\n\n```python:py_eng_floodrm.py\n# -*- coding: utf-8 -*-\nimport sys\nfrom math import *\n\ndef SP(elv,hmax):\n    # Head-Discharge relationship of Spillway\n    ELcr=116.0\n    b=11.5\n    n=4\n    x=0.1387\n    Cd=1.971+0.498*x+6.63*x*x\n    a=(1.6-Cd)/(Cd-3.2)\n    h=elv-ELcr\n    q=0.0\n    if 0.0<h:\n        Hd=139.0-ELcr\n        c=1.6*(1.0+2.0*a*h/Hd)/(1.0+a*h/Hd)\n        kp=0.112703962703963*(h/Hd)**2-0.237885780885781*(h/Hd)+0.126496503496503\n        ka=-0.0813160731673404*(h/Hd)**2+0.255143813465017*(h/Hd)\n#        kp=0.02\n#        ka=10.0*kp\n        bx=b*float(n)-2.0*(float(n-1)*kp+ka)*h\n        q=c*bx*h**1.5\n    return q\n\n\ndef SPQ(elv,qqin,hmax,qref,ELini):\n    # To obtain the discharge of overflow crest from the water level\n    q=qqin\n    qs=SP(elv,hmax)\n    if qref<qqin: q=qs\n    if qref+0.1<qs: q=qs\n    return q\n\ndef RET_V(nn,rh,rv,elv):\n    # To obtain the cumulative volume from the water level\n    for i in range(0,nn-1):\n        if rh[i]<=elv and elv<=rh[i+1]: break\n    if rh[nn-1]<elv: i=nn-2\n    x1=rv[i]\n    y1=rh[i]\n    x2=rv[i+1]\n    y2=rh[i+1]\n    a=(y2-y1)/(x2-x1)\n    b=(x2*y1-x1*y2)/(x2-x1)\n    v=(elv-b)/a\n    return v\n\ndef RET_H(nn,rh,rv,v):\n    # To obtain the water level from cumulative volume\n    for i in range(0,nn-1):\n        if rv[i]<=v and v<=rv[i+1]: break\n    if rv[nn-1]<v: i=nn-2\n    x1=rv[i]\n    y1=rh[i]\n    x2=rv[i+1]\n    y2=rh[i+1]\n    a=(y2-y1)/(x2-x1)\n    b=(x2*y1-x1*y2)/(x2-x1)\n    elv=a*v+b\n    return elv\n\n\n#Main routine\nparam=sys.argv\nfnameR1=param[1] # H-V data of reservoir\nfnameR2=param[2] # Hydrograph of design flood\nfnameW =param[3] # Output file name\n\n# Input H-V data\nrh=[]\nrv=[]\nfin=open(fnameR1,'r')\ntext=fin.readline()\ntext=text.strip()\ntext=text.split()\nvcoef=float(text[0])\nwhile 1:\n    text=fin.readline()\n    if not text: break\n    text=text.strip()\n    text=text.split()\n    rh=rh+[float(text[0])]\n    rv=rv+[float(text[1])*vcoef]\nfin.close()\nnn=len(rh)\n\n# Input time sequence of inflow\nti=[]\nq_in=[]\nfin=open(fnameR2,'r')\ntext=fin.readline()\ntext=text.strip()\ntext=text.split()\nELini=float(text[0])\noutlet=float(text[1])\nwhile 1:\n    text=fin.readline()\n    if not text: break\n    text=text.strip()\n    text=text.split()\n    ti=ti+[float(text[0])]\n    q_in=q_in+[float(text[1])]\nfin.close()\nnd=len(ti)\n\nhmax=-99.9\nfor iii in range(0,10):\n    qref=SP(ELini,hmax)\n    pEL=[]\n    pQo=[]\n    fout=open(fnameW,'w')\n    # Initial outflow\n    elv=ELini\n    EL=elv\n    VOL=RET_V(nn,rh,rv,elv)\n    q_out=SPQ(elv,q_in[0],hmax,qref,ELini)+outlet\n    i=0\n    iUD=0\n    print('{0:>5s} {1:>5s} {2:>10s} {3:>10s} {4:>15s} {5:>15s} {6:>15s} {7:>15s}'.format('i','iUD','time','EL','EL-elv','VOL','q_in','q_out'),file=fout)\n    print('{0:5d} {1:5d} {2:10.3f} {3:10.3f} {4:15e} {5:15e} {6:15e} {7:15e}'.format(i,iUD,ti[i],EL,EL-elv,VOL,q_in[i],q_out),file=fout)\n    # Iterative calculation\n    iUD=1\n    dh=0.0001\n    eps=0.0001\n    itmax=int(1.0/dh)*10\n    for i in range(0,nd-1):\n        qqin=0.5*(q_in[i]+q_in[i+1])\n        tim=0.5*(ti[i+1]-ti[i])\n        Qin=0.5*(q_in[i]+q_in[i+1])*(ti[i+1]-ti[i])*3600.0\n        hh=0.0\n        j=0\n        while 1:\n            j=j+1;\n            hh=hh+float(iUD)*dh\n            elv=EL;    q1=SPQ(elv,qqin,hmax,qref,ELini)+outlet\n            elv=EL+hh; q2=SPQ(elv,qqin,hmax,qref,ELini)+outlet\n            Qout=0.5*(q1+q2)*(ti[i+1]-ti[i])*3600.0\n            R=VOL+Qin-Qout\n            elv=RET_H(nn,rh,rv,R)\n            if abs(q1-qqin)<eps and tim<36.0:\n                R=VOL\n                hh=0.0\n                break\n            if iUD==1 and j==10:\n                if EL+hh>elv:\n                    iUD=-1\n                    hh=0.0\n                    j=0\n            if iUD==-1 and j==10:\n                if EL+hh<elv:\n                    iUD=1\n                    hh=0.0\n                    j=0\n            if abs(EL+hh-elv)<eps: break\n        VOL=R    # Cumulative volume\n        EL=EL+hh # Elevation\n        q_out=q2 # Outflow\n        print('{0:5d} {1:5d} {2:10.3f} {3:10.3f} {4:15e} {5:15e} {6:15e} {7:15e}'.format(i+1,iUD,ti[i+1],EL,EL-elv,VOL,q_in[i+1],q_out),file=fout)\n        pEL=pEL+[EL]\n        pQo=pQo+[q_out]\n        sys.stdout.write('\\r%d / %d' % (i+1,nd-1))\n        sys.stdout.flush()\n    fout.close()\n    if abs(ELini+hmax-max(pEL))<0.001: break\n    hmax=max(pEL)-ELini\n    sys.stdout.write('\\n')\n    sys.stdout.write('Time: %10.3f\\n'% max(ti))\n    sys.stdout.write('h   : %10.3f\\n'% hmax)\n    sys.stdout.write('Qin : %10.3f %10.3f\\n'% (min(q_in),max(q_in)))\n    sys.stdout.write('Qout: %10.3f %10.3f\\n'% (min(pQo),max(pQo)))\n    sys.stdout.write('EL  : %10.3f %10.3f\\n'% (min(pEL),max(pEL)))\n    sys.stdout.write('qref: %10.3f\\n'% (qref))\n    del pEL,pQo\nsys.stdout.write('\\n')\nsys.stdout.write('Time: %10.3f\\n'% max(ti))\nsys.stdout.write('h   : %10.3f\\n'% hmax)\nsys.stdout.write('Qin : %10.3f %10.3f\\n'% (min(q_in),max(q_in)))\nsys.stdout.write('Qout: %10.3f %10.3f\\n'% (min(pQo),max(pQo)))\nsys.stdout.write('EL  : %10.3f %10.3f\\n'% (min(pEL),max(pEL)))\nsys.stdout.write('qref: %10.3f\\n'% (qref))\n```\n\n\n###\u4f5c\u56f3\u30d7\u30ed\u30b0\u30e9\u30e0\n\n####\u89e3\u6790\u7d50\u679c\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\n\n+ i\uff1a\u30c7\u30fc\u30bf\u756a\u53f7\n+ iUD\uff1a\u6c34\u4f4d\u4e0a\u6607\u30fb\u964d\u4e0b\u3092\u793a\u3059\u8a18\u53f7\uff080\uff1a\u521d\u671f\u5024\uff0c1\uff1a\u6c34\u4f4d\u4e0a\u6607\uff0c2\uff1a\u6c34\u4f4d\u964d\u4e0b\u304b\u3089\u4e00\u5b9a\uff09\n+ time\uff1a\u6642\u523b\n+ EL-elv\uff1a\u4eee\u5b9a\u3057\u305f\u6c34\u4f4d(EL)\u3068\u8caf\u6c34\u6c60\u6c34\u4f4d\u30fc\u5bb9\u91cf\u66f2\u7dda\u3088\u308a\u6c42\u3081\u305f\u6c34\u4f4d\u306e\u5dee\u5206\n+ VOL\uff1a\u8caf\u6c34\u6c60\u306e\u8caf\u7559\u91cf\n+ q_in\uff1a\u8caf\u6c34\u6c60\u3078\u306e\u6d41\u5165\u91cf\uff08m3/s\uff09\n+ q_out\uff1a\u8caf\u6c34\u6c60\u304b\u3089\u306e\u6d41\u51fa\u91cf\uff08m3/s\uff09\n\n```txt:out_flood.txt\n    i   iUD       time         EL          EL-elv             VOL            q_in           q_out\n    0     0      0.000    130.000    0.000000e+00    1.053350e+09    1.180000e+02    1.180000e+02\n    1     1      1.000    130.000    0.000000e+00    1.053350e+09    2.050000e+02    1.615000e+02\n    2     1      2.000    130.000    0.000000e+00    1.053350e+09    2.890000e+02    2.470000e+02\n    3     1      3.000    130.000    0.000000e+00    1.053350e+09    3.710000e+02    3.300000e+02\n    4     1      4.000    130.000    0.000000e+00    1.053350e+09    4.540000e+02    4.125000e+02\n    5     1      5.000    130.000    0.000000e+00    1.053350e+09    5.370000e+02    4.955000e+02\n..........\n```\n\n####\u4f5c\u56f3\u30d7\u30ed\u30b0\u30e9\u30e0\n\u4f5c\u56f3\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\uff0cnumpy\u914d\u5217\u3067\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\uff0c\u8a08\u7b97\u6642\u9593\u5185\u3067\uff0c\u6d41\u5165\u91cf\u3068\u6d41\u51fa\u91cf\u306b\u5927\u304d\u306a\u5dee\u304c\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\uff0cSimpson\u6cd5\u306b\u3088\u308b\u6570\u5024\u7a4d\u5206\u3092\u884c\u3063\u3066\u3044\u308b\uff0e\n\n```\nimport numpy as np\nfrom scipy import integrate\n\ndata=np.loadtxt(fnameR,skiprows=1,usecols=(2,3,6,7))\nti=data[:,0]\nEL=data[:,1]\nQi=data[:,2]\nQo=data[:,3]\nint_Qi=integrate.simps(Qi*3600,ti)\nint_Qo=integrate.simps(Qo*3600,ti)\nprint('V_in={0:10.3f} million m3'.format(int_Qi/1e6))\nprint('Vout={0:10.3f} million m3'.format(int_Qo/1e6))\n```\n\nnumpy\u914d\u5217\u3067\u306f\uff0c\u6700\u5927\u5024\u3068\u306a\u308b\u8981\u7d20\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6c42\u3081\u308b\uff0e\n\n```\nn1=np.argmax(Qi)\nn2=np.argmax(Qo)\nn3=np.argmax(EL)\n```\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\uff0ctwinx() \u3092\u7528\u3044\u3066\uff0c\u5de6\u7e26\u8ef8\u306b\u6d41\u91cf\uff0c\u53f3\u7e26\u8ef8\u306b\u8caf\u6c34\u6c60\u6c34\u4f4d\u3092\u3068\u3063\u3066\u30b0\u30e9\u30d5\u5316\u3057\u3066\u3044\u308b\uff0e\u307e\u305f\u51e1\u4f8b\u3092\uff11\u3064\u306e\u30dc\u30c3\u30af\u30b9\u306b\u53ce\u3081\u308b\u305f\u3081\uff0c\u53f3\u7e26\u8ef8\u7528\u306e\u30c0\u30df\u30fc\u30d7\u30ed\u30c3\u30c8\u3092\u884c\u3063\u3066\u3044\u308b\uff0e\u307e\u305f\u70b9\u7dda\u304a\u3088\u3073\u4e00\u70b9\u9396\u7dda\u306f\uff0c\u30c7\u30d5\u30a9\u30eb\u30c8\u306f\u3042\u307e\u308a\u304b\u3063\u3053\u3088\u304f\u306a\u3044\u305f\u3081\u4f7f\u308f\u305a\uff0c\u5225\u9014\u5b9a\u7fa9\u3057\u3066\u3044\u308b\uff0e\n\n```\nline1=plt.plot(ti,Qi,color='black',lw=2.0,label='Q (inflow)')\nline2=plt.plot(ti,Qo,color='black',lw=2.0,label='Q (outflow)')\nplt.plot([0],[0],color='black',lw=2.0,label='Water Level') #Dummy for legend\nline1[0].set_dashes([5,2])\nline2[0].set_dashes([8,4,2,4])\n```\n\n#####\u30d7\u30ed\u30b0\u30e9\u30e0\u5168\u6587\n\n```python:py_eng_fig_floodrm.py\n# -*- coding: utf-8 -*-\nimport numpy as np\nfrom scipy import integrate\nimport matplotlib.pyplot as plt\n\ndef DRAWFIG(fnameR,fnameF,ELcr):\n    # Parameter setting\n    xmin=0.0;xmax=140.0\n    qmin=0.0;qmax=20000.0\n    hmin=124.0;hmax=144.0\n    # Input data\n    data=np.loadtxt(fnameR,skiprows=1,usecols=(2,3,6,7))\n    ti=data[:,0]\n    EL=data[:,1]\n    Qi=data[:,2]\n    Qo=data[:,3]\n    int_Qi=integrate.simps(Qi*3600,ti)\n    int_Qo=integrate.simps(Qo*3600,ti)\n    print('V_in={0:10.3f} million m3'.format(int_Qi/1e6))\n    print('Vout={0:10.3f} million m3'.format(int_Qo/1e6))\n\n    fig=plt.figure()\n    line1=plt.plot(ti,Qi,color='black',lw=2.0,label='Q (inflow)')\n    line2=plt.plot(ti,Qo,color='black',lw=2.0,label='Q (outflow)')\n    plt.plot([0],[0],color='black',lw=2.0,label='Water Level') #Dummy for legend\n    line1[0].set_dashes([5,2])\n    line2[0].set_dashes([8,4,2,4])\n    n1=np.argmax(Qi)\n    n2=np.argmax(Qo)\n    n3=np.argmax(EL)\n    plt.text(ti[n1],Qi[n1],'max:%.0f'%max(Qi),fontsize=10,color='black',ha='left',va='bottom')\n    plt.text(ti[n2],Qo[n2],'max:%.0f'%max(Qo),fontsize=10,color='black',ha='left',va='bottom')\n    plt.xlabel('Time (hour)')\n    plt.ylabel('Discharge (m$^3$/s)')\n    plt.xticks(np.arange(xmin,xmax+12,12))\n    plt.yticks(np.arange(qmin,qmax+2000,2000))\n    plt.grid()\n    plt.legend(shadow=True,loc='upper right',handlelength=3)\n    plt.twinx()\n    plt.plot(ti,EL,color='black',lw=2.0,label='Water Level')\n    plt.hlines([ELcr],xmin,xmax,color='black',lw=1.0,linestyles='dashed',label='O.F.crest')\n    plt.text(ti[n3],EL[n3],'ELmax:%.3f'%max(EL),fontsize=10,color='black',ha='left',va='bottom')\n    plt.text(xmin+1,ELcr,'FSL:EL.%.1f'%ELcr,fontsize=10,color='black',ha='right',va='bottom')\n    plt.ylim(hmin,hmax)\n    plt.yticks(np.arange(hmin,hmax+2,2))\n    plt.ylabel('Water Level (EL.m)')\n    plt.savefig(fnameF,dpi=200)\n    plt.show()\n    plt.close()\n\n\n# Main routine\nfnameR='out_flood.txt'\nfnameF='fig_flood.png'\nELcr=130.0\nDRAWFIG(fnameR,fnameF,ELcr)\n```\n\n\u4ee5\u4e0a\n", "tags": ["Python", "matplotlib", "flood-routine"]}