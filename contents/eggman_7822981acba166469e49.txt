{"tags": ["ARM"], "context": "Rockchip RKNanoD \u306e\u57fa\u672c\u7684\u306a\u60c5\u5831\u306b\u3064\u3044\u3066\u307e\u3068\u3081\u307e\u3057\u305f\u3002\nRKNanoD\u306f\u643a\u5e2f\u578b\u30e1\u30c7\u30a3\u30a2\u30d7\u30ec\u30a4\u30e4\u30fc\u7528\u306eSoC\u3067\u3059\u3002\n\u81ea\u5206\u7684\u306b\u306f\u3001Cortex-M3\u304c\u30c7\u30e5\u30a2\u30eb\u306a\u306e\u3068\u3001SRAM\u304c\u5408\u8a081MB\u642d\u8f09\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u30dd\u30a4\u30f3\u30c8\u9ad8\u3044\u3067\u3059\u3002\nTRM\u3082\u3042\u308b\u306e\u3067\u3001\u304c\u3093\u3070\u308c\u3070\u3044\u308d\u3044\u308d\u3067\u304d\u307e\u3059\u3002\n\nSpec\n\n\n\n\n\n\n\n\n\nCPU\nARM Cortex M3 Dual core (SYS_CORE:250MHz , CAL_CORE:500MHz)\n\n\nRAM\nTotal 1MB SRAM\n\n\nUSB\nOTG with phy\n\n\nAudio\n192kHz/24bit stereo dac\n\n\nSD/MMC\n1xmemory , 1xSDIO for Wi-Fi\n\n\nPeripheral\nI2C I2S PWM SPI UART LCD\n\n\n\n\nFireduino \u306e\u30da\u30fc\u30b8\u306b\u306f\u6700\u5927\u52d5\u4f5c\u5468\u6ce2\u6570\u304c 250MHz, 500MHz\u3068\u3042\u308b\u304c\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u307f\u308b\u3068200MHz, 400MHz\u304c\u6700\u5927\u307f\u305f\u3044\u3067\u3059\u3002\n\n\nBoard\n\n\nFireFly Fireduino 35USD\nRKNanoD \u642d\u8f09\u306e\u30e1\u30c7\u30a3\u30a2\u30d7\u30ec\u30a4\u30e4\u30fc\u304c\u3042\u308a\u307e\u3059\u3002\n\n\nSDK\n\nRockchip\u304b\u3089\u30aa\u30fc\u30d7\u30f3\u306aSDK\u306f\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u304c\u3001github\u306b\u306fSDK\u304c\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u3002\n\n\nhttps://github.com/averyling82/wifi-bt-audio\nhttps://github.com/wjw890912/RK_NanoD_WIFI_demo\nMDK-ARM \u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u308b\u3002\nFreeRTOS\nlwIP\n\n\nArduino\u30d9\u30fc\u30b9\u306eSDK\u3092FireFly\u304c\u63d0\u4f9b\u3057\u3066\u3044\u308b\n\n\nhttps://github.com/FireflyTeam/Fireduino-SDK\ngcc\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068Windows\u3068Linux\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30c4\u30fc\u30eb\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u3002\n\n\n\n\nDocument\n\nRockchip RKNanoD Technical Reference Manual 1.0\nRockchip RKNanoD Datasheet 1.2\n\u8a55\u4fa1\u30dc\u30fc\u30c9\u306e\u56de\u8def\u56f3\n\n\n\nhttps://github.com/averyling82/wifi-bt-audio/blob/master/bt-nano/App/all/rknanod_sdk_main_v22_20150908_n.pdf \n\n\nFireduino\u306e\u56de\u8def\u56f3\n\n\n\nhttps://drive.google.com/drive/folders/0B7HO8lbGgAqAWGVQWnQwSF9Wc28 \n\n\n\n\nMemoryMap\n\nSYS_CORE\u304b\u3089\u898b\u305f\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u3067\u3059\u3002\n\n\n\n\nstart\nend\nname\ndescription\n\n\n\n\n0x00000000\n0x00000FFF\nPMU DRAM\n4KB SRAM for DATA\n\n\n0x00001000\n0x00001EFF\nPMU IRAM\n3KB SRAM for CODE\n\n\n0x01000000\n0x0101FFFF\nCAL_CORE IRAM\n128KB SRAM for CODE\n\n\n0x01020000\n0x0105FFFF\nCAL_CORE DRAM\n256KB SRAM for DATA\n\n\n0x30000000\n0x3004FFFF\nSYS_CORE DRAM\n320KB SRAM for DATA\n\n\n0x30050000\n0x3007FFFF\nSYS_CORE IRAM\n256KB SRAM for CODE\n\n\n0x40000000\n0x5FFFFFFF\nPeripherals\non chip peripharals\n\n\n\n\n\u30b9\u30ad\u30e3\u30c3\u30bf\u30ed\u30fc\u30c9\u8a18\u8ff0\u30d5\u30a1\u30a4\u30eb BuildAll_SPI.sct \u3068\u304b\u3001\u30ea\u30f3\u30ab\u30b9\u30af\u30ea\u30d7\u30c8 flash.ld\n\u306b\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u306e\u60c5\u5831\u304c\u3042\u308b\u3002\n\n\nGPIO\n\nGPIO\u306e\u4ed5\u69d8\n*\u3000GPIO\u306fGPIO0, GPIO1, GPIO2 \u306e\uff13\u3064\u306e\u30b0\u30eb\u30fc\u30d7\u304c\u3042\u308b\u3002\u5404\u30b0\u30eb\u30fc\u30d732\u500b\u306e\u30d4\u30f3\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u308b\u3002 \n*\u3000\u30d7\u30eb\u30a2\u30c3\u30d7\u3068\u30d7\u30eb\u30c0\u30a6\u30f3\u304b\u306f\u30d4\u30f3\u6bce\u306b\u6c7a\u307e\u3063\u3066\u3044\u308b\u3002\n*\u3000\u8d77\u52d5\u6642\u3001GPIO\u306f\u5165\u529b\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u3002\nCH1 PortB Pin1 \u306b High\u3092\u51fa\u529b\u3059\u308b\u3002 \n\n\nGrf \u306f General Register File\u3000\u306e\u3053\u3068\u3002\nGrf_GpioMuxSet()\u3067\u30d4\u30f3\u306e\u30de\u30eb\u30c1\u30d7\u30ec\u30af\u30b5\u3092\u8a2d\u5b9a\u3057\u3001Gpio_SetPinDirection()\u3067GPIO\u306e\u5411\u304d\u3092\u8a2d\u5b9a\u3057\u3001Grf_GPIO_SetPinPull()\u3067PullUP/PullDown\u306e\u8a2d\u5b9a\u3092\u3059\u308b\u3002\nGpio_SetPinLevel\uff08\uff09\u3067\u51fa\u529b\u306e\u96fb\u5727\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n\n\n\n    Grf_GpioMuxSet(GPIO_CH1,GPIOPortB_Pin1,IOMUX_GPIO1B1_IO);\n    Gpio_SetPinDirection(GPIO_CH1,GPIOPortB_Pin1, GPIO_OUT);\n    Grf_GPIO_SetPinPull(GPIO_CH1, GPIOPortB_Pin1, ENABLE);\n\n    Gpio_SetPinLevel(GPIO_CH1,GPIOPortB_Pin1, GPIO_HIGH);\n\n\nCH1 PortB Pin1 \u306e\u5165\u529b\u3092\u53d6\u5f97\u3059\u308b\n\n    Grf_GpioMuxSet(GPIO_CH1,GPIOPortB_Pin1,IOMUX_GPIO1B1_IO);\n    Gpio_SetPinDirection(GPIO_CH1,GPIOPortB_Pin1, GPIO_IN);\n\n    level = Gpio_GetPinLevel(GPIO_CH0, GPIOPortB_Pin1);\n\n\nGPIO\u306e\u30d9\u30fc\u30b9\u30a2\u30c9\u30ec\u30b9 (hw_memap.h)\n\n#define GPIO0_BASE          ((UINT32)0x40160000)\n#define GPIO1_BASE          ((UINT32)0x40170000)\n#define GPIO2_BASE          ((UINT32)0x50030000)\n\n\nFrequency\n\n\u5468\u6ce2\u6570\u306fCRU (Clock and Reset Unit) \u3068\u3044\u3046\u540d\u524d\u306e\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u304c\u7ba1\u7406\u3059\u308b\u3002\n\u30d1\u30ef\u30fc\u30de\u30cd\u30fc\u30b8\u30e3\u3068\u3044\u3046\u96fb\u6e90\u7ba1\u7406\u5236\u5fa1\u6a5f\u80fd\u7d4c\u7531\u3067\u8a2d\u5b9a\u3059\u308b\u5834\u5408\n\n\n\u5468\u6ce2\u6570\u306f syssever/PowerManager.c \u306e g_CruAPPTabel \u306b\u8a2d\u5b9a\u3059\u308b\u3002\nsyssever/PowerManager.c \u306e FREQ_EnterModule()\u3092\u547c\u3076\u3002\n\n\n\nCRU\u3092\u76f4\u63a5\u8a2d\u5b9a\u3059\u308b\u5834\u5408\n\nCpu/NanoD/lib/cru.c \u306e SetPllFreq\uff08\uff09 \u3092\u547c\u3076\u3002\n\u3067\u3082\u30ec\u30b8\u30b9\u30bf\u306e\u8cc7\u6599\u304c\u7121\u3044\u306e\u3067\u3001\u3069\u3046\u8a2d\u5b9a\u3057\u3066\u826f\u3044\u306e\u304b\u5206\u304b\u3089\u306a\u3044\u3002\n\n\nCRU\u306e\u30d9\u30fc\u30b9\u30a2\u30c9\u30ec\u30b9\n\n#define CRU_BASE            ((UINT32)0x40180000)\n\n\nTIMER\n\n\u30bf\u30a4\u30de\u306e\u4ed5\u69d8\n\n\n64\u30d3\u30c3\u30c8\u30bf\u30a4\u30de\u304c\uff12\u500b\u3042\u308b \n\u30bf\u30a4\u30de\u306f\u30c0\u30a6\u30f3\u30ab\u30a6\u30f3\u30c8\u3059\u308b\n\u30ed\u30fc\u30c9\u30ab\u30a6\u30f3\u30c8\u306b\u5024\u3092\u8a2d\u5b9a\u3057\u3066\u3001\u30bf\u30a4\u30de\u3092\u30b9\u30bf\u30fc\u30c8\u3059\u308b\u3068\u30c0\u30a6\u30f3\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u30020\u306b\u306a\u308b\u3068\u5272\u308a\u8fbc\u307f\u3092\u767a\u751f\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u30bf\u30a4\u30de\u306e\u5165\u529b\u30af\u30ed\u30c3\u30af\u306f24MHz\u3068PCLK\u3092\u9078\u629e\u3067\u304d\u308b\u3002PCLK\u306e\u6700\u5927\u5468\u6ce2\u6570\u306fSYS_CORE\u306eCLK\u306e1/2\u3067\u3059\u3002\n\n\n\u30bf\u30a4\u30de\u3092\u8a2d\u5b9a\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n\nRKDev_Create()\u7d4c\u7531\u3067TimerDev_Create()\u3092\u547c\u3076\u3002\n\u30bf\u30a4\u30de\u3078\u30af\u30ed\u30c3\u30af\u3092\u4f9b\u7d66\u3059\u308b\n\u30bf\u30a4\u30de\u3092\u30ea\u30bb\u30c3\u30c8\u3059\u308b\u3002\nCRU\u306b\u30bf\u30a4\u30de\u3078\u306e\u5165\u529b\u3059\u308b\u30af\u30ed\u30c3\u30af\u306e\u8a2d\u5b9a\u3092\u3059\u308b\u3002\n\u30bf\u30a4\u30de\u306e\u30ab\u30a6\u30f3\u30c8\u3092\u6b62\u3081\u308b\u3002\n\u30bf\u30a4\u30de\u3092\u30d5\u30ea\u30fc\u30e9\u30f3\u30e2\u30fc\u30c9\u3067\u521d\u671f\u5316\u3059\u308b\u3002\n\u30bf\u30a4\u30de\u306b\u30ed\u30fc\u30c9\u30ab\u30a6\u30f3\u30c8\u3092\u8a2d\u5b9a\n\u30bf\u30a4\u30de\u306e\u30ab\u30a6\u30f3\u30c8\u3092\u958b\u59cb\u3059\u308b\u3002\n\u30bf\u30a4\u30de\u306e\u5024\u3092\u8aad\u3080\u3002\n\n\n\nRKDev_Create(DEV_CLASS_TIMER,TIMER0,NULL);\nScuClockGateCtr( CLK_TIMER0_GATE, 1);\nScuClockGateCtr( PCLK_TIMER_GATE, 1);\nScuSoftResetCtr(TIMER0_SRST, 0);\nSetTimerFreq(TIMER0 ,XIN24M,24*1000*1000);\nTimerStop(TIMER0);\nTimerInit(TIMER0 ,TIMER_FREE_RUNNING);\nTimerCount(TIMER0 ,0xFFFFFFFFFFFFFFFF);\nTimerStart(TIMER0);\n\nval = TimerGetCount(TIMER0);\n\n\n\u30bf\u30a4\u30de\u306e\u30af\u30ed\u30c3\u30af\u30bd\u30fc\u30b9\u3092PCLK_LOGIC\u306b\u3057\u305f\u5834\u5408\n\n\nPCLK_LOGIC\u306f \u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u306e\u30d0\u30b9\u30af\u30ed\u30c3\u30af\nPCLK_LOGIC\u306e\u8a2d\u5b9a\u306f SetPclkLogicPreFreq()\u3067\u884c\u3046\nPCLK_LOGIC\u306fhclk_sys_core\u3092\u5206\u5468\u3057\u3066\u751f\u6210\u3059\u308b\u3002\n\n\n\n\nI2S\n\nI2S\u306e\u8a2d\u5b9a\n\nI2S\u306e\u521d\u671f\u5316\u30b3\u30fc\u30c9\n\nI2S0 \u3092 \u5185\u8535 ACODEC\u306b\u63a5\u7d9a\u3059\u308b\u3002\nI2S0 \u3092\u521d\u671f\u5316\u3059\u308b\u3002\u30de\u30b9\u30bf\u30fc\u30e2\u30fc\u30c9 48KHz 24bit\nc\nGrf_I2S0_Sel(I2S_SEL_ACODEC);\nI2SInit\uff08I2S_DEV0,\nI2S_MASTER_MODE, \nI2S_EXT,\nI2S_FS_48KHz,\nI2S_FORMAT,\nI2S_DATA_WIDTH24,\nI2S_NORMAL_MODE,\nI2S_FORMAT,\nI2S_DATA_WIDTH24,\nI2S_NORMAL_MODE);\n\n\n\n\nI2S\u306f\u8d77\u52d5\u5f8c\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u6709\u52b9\u307f\u305f\u3044\u306a\u306e\u3067\u3001\u4f7f\u308f\u306a\u3044\u5834\u5408\u306f\u6b62\u3081\u3066\u304a\u304f\u3002\n\nI2SDeInit(I2S_DEV0);\nI2SDeInit(I2S_DEV1);\n\n\nWDT\n\n\u30a6\u30a9\u30c3\u30c1\u30c9\u30c3\u30b0\u30bf\u30a4\u30de\u306e\u4ed5\u69d8\n\n\n\uff13\uff12\u30d3\u30c3\u30c8\u30c0\u30a6\u30f3\u30ab\u30a6\u30f3\u30bf \n\u30bf\u30a4\u30de\u306e\u5468\u6ce2\u6570\u306f\u8a2d\u5b9a\u3067\u304d\u306a\u3044\u3088\u3046\u3067\u3059\u3002PCLK\u3067\u30ab\u30a6\u30f3\u30c8\u30c0\u30a6\u30f3\u3059\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\n\u30a8\u30af\u30b9\u30d1\u30a4\u30a2\u6642\u306e\u30ea\u30bb\u30c3\u30c8\u52d5\u4f5c\u306f\u3001\u3059\u3050\u30b7\u30b9\u30c6\u30e0\u30ea\u30bb\u30c3\u30c8\u3059\u308b\u3001\u307e\u305f\u306f\u3001\u5272\u308a\u8fbc\u307f\u3092\u767a\u751f\u3057\u3066\uff11\u79d2\u4ee5\u5185\u306b\u30af\u30ea\u30a2\u3055\u308c\u306a\u3044\u5834\u5408\u306f\u30b7\u30b9\u30c6\u30e0\u30ea\u30bb\u30c3\u30c8 \u306e\u4e8c\u3064\u304b\u3089\u9078\u3079\u308b\u3002\n\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u671f\u9593\u306f16\u7a2e\u985e\u3042\u308b\u3002 0xFFFF \u304b\u3089 0x7FFFFFFF \u307e\u3067\u3002\n\n\n\u30a6\u30a9\u30c3\u30c1\u30c9\u30c3\u30b0\u30bf\u30a4\u30de\u306e\u8a2d\u5b9a\n\n\n\u521d\u671f\u5316\u3059\u308b\u3002\u3000\u30a8\u30af\u30b9\u30d1\u30a4\u30a2\u6642\u306e\u30ea\u30bb\u30c3\u30c8\u52d5\u4f5c\u3001\u30ea\u30bb\u30c3\u30c8\u767a\u751f\u6642\u306e\u30d1\u30eb\u30b9\u9577\u3001\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u671f\u9593\n\u30bf\u30a4\u30de\u3092\u8d77\u52d5\u3059\u308b\u3002\n\n\n\nWatchDogInit(RESP_MODE_INT_RESET, PCLK_CYCLES_128, PERIOD_RANGE_0X7FFFFFFF);\nWatchDogStart();\n\n\n\u5b9a\u671f\u7684\u306b\u30bf\u30a4\u30de\u3092\u30ea\u30ed\u30fc\u30c9\u3059\u308b\u3002\n\nWatchDogReload();\n\n\nUART\n\nUART\u306e\u4ed5\u69d8\n*\u3000\uff16\u500b\u306eUART\u304c\u3042\u308b\u3002\n*\u3000DMA\u3068\u5272\u308a\u8fbc\u307f\u3092\u30b5\u30dd\u30fc\u30c8\n*\u3000UART\u306e\u901f\u5ea6\u306f110bps \u304b\u3089 \uff19\uff12\uff11\uff16\uff10\uff10bps\n*\u3000UART\u306e\u8a2d\u5b9a\n\n\n\u521d\u671f\u5316\u3059\u308b UART2\u3092 115200bps 8N1\u306b\u8a2d\u5b9a\u3002\n\n\n\nScuSoftResetCtr(UART2_SRST, 1);\nDelayMs(1);\nScuSoftResetCtr(UART2_SRST, 0);\n\nScuClockGateCtr(CLK_UART2_GATE, 1);\nScuClockGateCtr(PCLK_UART2_GATE, 1);\nSetUartFreq(UART_CH2,XIN24M,24*1000*1000);\n\nIntRegister(INT_ID_UART2 ,UartDevShellBspIsrHandle2);\nIntPendingClear(INT_ID_UART2);\nIntEnable(INT_ID_UART2);\n\nUARTInit(UART_DEV2, UART_BR_115200, UART_DATA_8B, UART_ONE_STOPBIT, UART_PARITY_DISABLE);\nUARTEnableFlowControl(UART_DEV2);\n\nRockchip RKNanoD \u306e\u57fa\u672c\u7684\u306a\u60c5\u5831\u306b\u3064\u3044\u3066\u307e\u3068\u3081\u307e\u3057\u305f\u3002\n\nRKNanoD\u306f\u643a\u5e2f\u578b\u30e1\u30c7\u30a3\u30a2\u30d7\u30ec\u30a4\u30e4\u30fc\u7528\u306eSoC\u3067\u3059\u3002\n\u81ea\u5206\u7684\u306b\u306f\u3001Cortex-M3\u304c\u30c7\u30e5\u30a2\u30eb\u306a\u306e\u3068\u3001SRAM\u304c\u5408\u8a081MB\u642d\u8f09\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u30dd\u30a4\u30f3\u30c8\u9ad8\u3044\u3067\u3059\u3002\nTRM\u3082\u3042\u308b\u306e\u3067\u3001\u304c\u3093\u3070\u308c\u3070\u3044\u308d\u3044\u308d\u3067\u304d\u307e\u3059\u3002\n\n# Spec\n\n|  |  |\n|:-:|:-:|\n| CPU  | ARM Cortex M3 Dual core (SYS_CORE:250MHz , CAL_CORE:500MHz)  |\n| RAM  | Total 1MB SRAM  |\n| USB  | OTG with phy|\n| Audio | 192kHz/24bit stereo dac|\n| SD/MMC | 1xmemory , 1xSDIO for Wi-Fi|\n| Peripheral | I2C I2S PWM SPI UART LCD|\n\n\n* Fireduino \u306e\u30da\u30fc\u30b8\u306b\u306f\u6700\u5927\u52d5\u4f5c\u5468\u6ce2\u6570\u304c 250MHz, 500MHz\u3068\u3042\u308b\u304c\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u307f\u308b\u3068200MHz, 400MHz\u304c\u6700\u5927\u307f\u305f\u3044\u3067\u3059\u3002\n\n# Board\n* [FireFly Fireduino](http://en.t-firefly.com/en/firesmart/fireduino/) 35USD\n* RKNanoD \u642d\u8f09\u306e\u30e1\u30c7\u30a3\u30a2\u30d7\u30ec\u30a4\u30e4\u30fc\u304c\u3042\u308a\u307e\u3059\u3002\n\n# SDK\n* Rockchip\u304b\u3089\u30aa\u30fc\u30d7\u30f3\u306aSDK\u306f\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u304c\u3001github\u306b\u306fSDK\u304c\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u3002\n * https://github.com/averyling82/wifi-bt-audio\n * https://github.com/wjw890912/RK_NanoD_WIFI_demo\n * MDK-ARM \u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u308b\u3002\n * FreeRTOS\n * lwIP\n* Arduino\u30d9\u30fc\u30b9\u306eSDK\u3092FireFly\u304c\u63d0\u4f9b\u3057\u3066\u3044\u308b\n * https://github.com/FireflyTeam/Fireduino-SDK\n * gcc\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068Windows\u3068Linux\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30c4\u30fc\u30eb\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u3002\n\n# Document\n* [Rockchip RKNanoD Technical Reference Manual 1.0](http://wiki.t-firefly.com/images/0/0b/Fireduino_MCU_TRM.pdf)\n* [Rockchip RKNanoD Datasheet 1.2](http://wiki.t-firefly.com/images/a/a6/Fireduino_MCU_datesheet.pdf)\n* \u8a55\u4fa1\u30dc\u30fc\u30c9\u306e\u56de\u8def\u56f3\n * https://github.com/averyling82/wifi-bt-audio/blob/master/bt-nano/App/all/rknanod_sdk_main_v22_20150908_n.pdf \n* Fireduino\u306e\u56de\u8def\u56f3\n * https://drive.google.com/drive/folders/0B7HO8lbGgAqAWGVQWnQwSF9Wc28 \n\n# MemoryMap\n* SYS_CORE\u304b\u3089\u898b\u305f\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u3067\u3059\u3002\n\n| start | end | name | description |\n|:-:|:-:|:-:|:-:|\n| 0x00000000 | 0x00000FFF | PMU DRAM | 4KB SRAM for DATA |\n| 0x00001000 | 0x00001EFF | PMU IRAM | 3KB SRAM for CODE  |\n| 0x01000000 | 0x0101FFFF | CAL_CORE IRAM | 128KB SRAM for CODE  |\n| 0x01020000 | 0x0105FFFF | CAL_CORE DRAM | 256KB SRAM for DATA  |\n| 0x30000000 | 0x3004FFFF | SYS_CORE DRAM | 320KB SRAM for DATA  |\n| 0x30050000 | 0x3007FFFF | SYS_CORE IRAM | 256KB SRAM for CODE  |\n| 0x40000000 | 0x5FFFFFFF | Peripherals   | on chip peripharals  |\n\n* \u30b9\u30ad\u30e3\u30c3\u30bf\u30ed\u30fc\u30c9\u8a18\u8ff0\u30d5\u30a1\u30a4\u30eb [BuildAll_SPI.sct](https://github.com/averyling82/wifi-bt-audio/blob/master/bt-nano/App/all/Scatter/BuildAll_SPI.sct) \u3068\u304b\u3001\u30ea\u30f3\u30ab\u30b9\u30af\u30ea\u30d7\u30c8 [flash.ld](https://github.com/FireflyTeam/Fireduino-SDK/blob/master/variants/fireduino/linker_scripts/gcc/flash.ld)\n\u306b\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u306e\u60c5\u5831\u304c\u3042\u308b\u3002\n\n# GPIO\n* GPIO\u306e\u4ed5\u69d8\n *\u3000GPIO\u306fGPIO0, GPIO1, GPIO2 \u306e\uff13\u3064\u306e\u30b0\u30eb\u30fc\u30d7\u304c\u3042\u308b\u3002\u5404\u30b0\u30eb\u30fc\u30d732\u500b\u306e\u30d4\u30f3\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u308b\u3002 \n *\u3000\u30d7\u30eb\u30a2\u30c3\u30d7\u3068\u30d7\u30eb\u30c0\u30a6\u30f3\u304b\u306f\u30d4\u30f3\u6bce\u306b\u6c7a\u307e\u3063\u3066\u3044\u308b\u3002\n *\u3000\u8d77\u52d5\u6642\u3001GPIO\u306f\u5165\u529b\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u3002\n* CH1 PortB Pin1 \u306b High\u3092\u51fa\u529b\u3059\u308b\u3002 \n * Grf \u306f General Register File\u3000\u306e\u3053\u3068\u3002\n * Grf_GpioMuxSet()\u3067\u30d4\u30f3\u306e\u30de\u30eb\u30c1\u30d7\u30ec\u30af\u30b5\u3092\u8a2d\u5b9a\u3057\u3001Gpio_SetPinDirection()\u3067GPIO\u306e\u5411\u304d\u3092\u8a2d\u5b9a\u3057\u3001Grf_GPIO_SetPinPull()\u3067PullUP/PullDown\u306e\u8a2d\u5b9a\u3092\u3059\u308b\u3002\n * Gpio_SetPinLevel\uff08\uff09\u3067\u51fa\u529b\u306e\u96fb\u5727\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n\n```c\n    Grf_GpioMuxSet(GPIO_CH1,GPIOPortB_Pin1,IOMUX_GPIO1B1_IO);\n    Gpio_SetPinDirection(GPIO_CH1,GPIOPortB_Pin1, GPIO_OUT);\n    Grf_GPIO_SetPinPull(GPIO_CH1, GPIOPortB_Pin1, ENABLE);\n\n    Gpio_SetPinLevel(GPIO_CH1,GPIOPortB_Pin1, GPIO_HIGH);\n```\n\n* CH1 PortB Pin1 \u306e\u5165\u529b\u3092\u53d6\u5f97\u3059\u308b\n\n```c\n    Grf_GpioMuxSet(GPIO_CH1,GPIOPortB_Pin1,IOMUX_GPIO1B1_IO);\n    Gpio_SetPinDirection(GPIO_CH1,GPIOPortB_Pin1, GPIO_IN);\n\n    level = Gpio_GetPinLevel(GPIO_CH0, GPIOPortB_Pin1);\n``` \n\n* GPIO\u306e\u30d9\u30fc\u30b9\u30a2\u30c9\u30ec\u30b9 (hw_memap.h)\n\n```\n#define GPIO0_BASE          ((UINT32)0x40160000)\n#define GPIO1_BASE          ((UINT32)0x40170000)\n#define GPIO2_BASE          ((UINT32)0x50030000)\n```\n\n# Frequency\n* \u5468\u6ce2\u6570\u306fCRU (Clock and Reset Unit) \u3068\u3044\u3046\u540d\u524d\u306e\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u304c\u7ba1\u7406\u3059\u308b\u3002\n* \u30d1\u30ef\u30fc\u30de\u30cd\u30fc\u30b8\u30e3\u3068\u3044\u3046\u96fb\u6e90\u7ba1\u7406\u5236\u5fa1\u6a5f\u80fd\u7d4c\u7531\u3067\u8a2d\u5b9a\u3059\u308b\u5834\u5408\n * \u5468\u6ce2\u6570\u306f syssever/PowerManager.c \u306e g_CruAPPTabel \u306b\u8a2d\u5b9a\u3059\u308b\u3002\n * syssever/PowerManager.c \u306e FREQ_EnterModule()\u3092\u547c\u3076\u3002\n* CRU\u3092\u76f4\u63a5\u8a2d\u5b9a\u3059\u308b\u5834\u5408\n * Cpu/NanoD/lib/cru.c \u306e SetPllFreq\uff08\uff09 \u3092\u547c\u3076\u3002\n * \u3067\u3082\u30ec\u30b8\u30b9\u30bf\u306e\u8cc7\u6599\u304c\u7121\u3044\u306e\u3067\u3001\u3069\u3046\u8a2d\u5b9a\u3057\u3066\u826f\u3044\u306e\u304b\u5206\u304b\u3089\u306a\u3044\u3002\n \n* CRU\u306e\u30d9\u30fc\u30b9\u30a2\u30c9\u30ec\u30b9\n\n```\n#define CRU_BASE            ((UINT32)0x40180000)\n```\n\n# TIMER\n* \u30bf\u30a4\u30de\u306e\u4ed5\u69d8\n * 64\u30d3\u30c3\u30c8\u30bf\u30a4\u30de\u304c\uff12\u500b\u3042\u308b \n * \u30bf\u30a4\u30de\u306f\u30c0\u30a6\u30f3\u30ab\u30a6\u30f3\u30c8\u3059\u308b\n * \u30ed\u30fc\u30c9\u30ab\u30a6\u30f3\u30c8\u306b\u5024\u3092\u8a2d\u5b9a\u3057\u3066\u3001\u30bf\u30a4\u30de\u3092\u30b9\u30bf\u30fc\u30c8\u3059\u308b\u3068\u30c0\u30a6\u30f3\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u30020\u306b\u306a\u308b\u3068\u5272\u308a\u8fbc\u307f\u3092\u767a\u751f\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n * \u30bf\u30a4\u30de\u306e\u5165\u529b\u30af\u30ed\u30c3\u30af\u306f24MHz\u3068PCLK\u3092\u9078\u629e\u3067\u304d\u308b\u3002PCLK\u306e\u6700\u5927\u5468\u6ce2\u6570\u306fSYS_CORE\u306eCLK\u306e1/2\u3067\u3059\u3002\n* \u30bf\u30a4\u30de\u3092\u8a2d\u5b9a\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n * RKDev_Create()\u7d4c\u7531\u3067TimerDev_Create()\u3092\u547c\u3076\u3002\n * \u30bf\u30a4\u30de\u3078\u30af\u30ed\u30c3\u30af\u3092\u4f9b\u7d66\u3059\u308b\n * \u30bf\u30a4\u30de\u3092\u30ea\u30bb\u30c3\u30c8\u3059\u308b\u3002\n * CRU\u306b\u30bf\u30a4\u30de\u3078\u306e\u5165\u529b\u3059\u308b\u30af\u30ed\u30c3\u30af\u306e\u8a2d\u5b9a\u3092\u3059\u308b\u3002\n * \u30bf\u30a4\u30de\u306e\u30ab\u30a6\u30f3\u30c8\u3092\u6b62\u3081\u308b\u3002\n * \u30bf\u30a4\u30de\u3092\u30d5\u30ea\u30fc\u30e9\u30f3\u30e2\u30fc\u30c9\u3067\u521d\u671f\u5316\u3059\u308b\u3002\n * \u30bf\u30a4\u30de\u306b\u30ed\u30fc\u30c9\u30ab\u30a6\u30f3\u30c8\u3092\u8a2d\u5b9a\n * \u30bf\u30a4\u30de\u306e\u30ab\u30a6\u30f3\u30c8\u3092\u958b\u59cb\u3059\u308b\u3002\n * \u30bf\u30a4\u30de\u306e\u5024\u3092\u8aad\u3080\u3002\n\n```c\nRKDev_Create(DEV_CLASS_TIMER,TIMER0,NULL);\nScuClockGateCtr( CLK_TIMER0_GATE, 1);\nScuClockGateCtr( PCLK_TIMER_GATE, 1);\nScuSoftResetCtr(TIMER0_SRST, 0);\nSetTimerFreq(TIMER0 ,XIN24M,24*1000*1000);\nTimerStop(TIMER0);\nTimerInit(TIMER0 ,TIMER_FREE_RUNNING);\nTimerCount(TIMER0 ,0xFFFFFFFFFFFFFFFF);\nTimerStart(TIMER0);\n\nval = TimerGetCount(TIMER0);\n```\n\n* \u30bf\u30a4\u30de\u306e\u30af\u30ed\u30c3\u30af\u30bd\u30fc\u30b9\u3092PCLK_LOGIC\u306b\u3057\u305f\u5834\u5408\n * PCLK_LOGIC\u306f \u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u306e\u30d0\u30b9\u30af\u30ed\u30c3\u30af\n * PCLK_LOGIC\u306e\u8a2d\u5b9a\u306f SetPclkLogicPreFreq()\u3067\u884c\u3046\n * PCLK_LOGIC\u306fhclk_sys_core\u3092\u5206\u5468\u3057\u3066\u751f\u6210\u3059\u308b\u3002\n\n\n# I2S\n* I2S\u306e\u8a2d\u5b9a\n* I2S\u306e\u521d\u671f\u5316\u30b3\u30fc\u30c9\n * I2S0 \u3092 \u5185\u8535 ACODEC\u306b\u63a5\u7d9a\u3059\u308b\u3002\n * I2S0 \u3092\u521d\u671f\u5316\u3059\u308b\u3002\u30de\u30b9\u30bf\u30fc\u30e2\u30fc\u30c9 48KHz 24bit\n```c\nGrf_I2S0_Sel(I2S_SEL_ACODEC);\nI2SInit\uff08I2S_DEV0,\n        I2S_MASTER_MODE, \n        I2S_EXT,\n        I2S_FS_48KHz,\n        I2S_FORMAT,\n        I2S_DATA_WIDTH24,\n        I2S_NORMAL_MODE,\n        I2S_FORMAT,\n        I2S_DATA_WIDTH24,\n        I2S_NORMAL_MODE);\n```\n\n* I2S\u306f\u8d77\u52d5\u5f8c\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u6709\u52b9\u307f\u305f\u3044\u306a\u306e\u3067\u3001\u4f7f\u308f\u306a\u3044\u5834\u5408\u306f\u6b62\u3081\u3066\u304a\u304f\u3002\n\n```c\nI2SDeInit(I2S_DEV0);\nI2SDeInit(I2S_DEV1);\n```\n\n# WDT\n* \u30a6\u30a9\u30c3\u30c1\u30c9\u30c3\u30b0\u30bf\u30a4\u30de\u306e\u4ed5\u69d8\n * \uff13\uff12\u30d3\u30c3\u30c8\u30c0\u30a6\u30f3\u30ab\u30a6\u30f3\u30bf \n * \u30bf\u30a4\u30de\u306e\u5468\u6ce2\u6570\u306f\u8a2d\u5b9a\u3067\u304d\u306a\u3044\u3088\u3046\u3067\u3059\u3002PCLK\u3067\u30ab\u30a6\u30f3\u30c8\u30c0\u30a6\u30f3\u3059\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\n * \u30a8\u30af\u30b9\u30d1\u30a4\u30a2\u6642\u306e\u30ea\u30bb\u30c3\u30c8\u52d5\u4f5c\u306f\u3001\u3059\u3050\u30b7\u30b9\u30c6\u30e0\u30ea\u30bb\u30c3\u30c8\u3059\u308b\u3001\u307e\u305f\u306f\u3001\u5272\u308a\u8fbc\u307f\u3092\u767a\u751f\u3057\u3066\uff11\u79d2\u4ee5\u5185\u306b\u30af\u30ea\u30a2\u3055\u308c\u306a\u3044\u5834\u5408\u306f\u30b7\u30b9\u30c6\u30e0\u30ea\u30bb\u30c3\u30c8 \u306e\u4e8c\u3064\u304b\u3089\u9078\u3079\u308b\u3002\n * \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u671f\u9593\u306f16\u7a2e\u985e\u3042\u308b\u3002 0xFFFF \u304b\u3089 0x7FFFFFFF \u307e\u3067\u3002\n* \u30a6\u30a9\u30c3\u30c1\u30c9\u30c3\u30b0\u30bf\u30a4\u30de\u306e\u8a2d\u5b9a\n * \u521d\u671f\u5316\u3059\u308b\u3002\u3000\u30a8\u30af\u30b9\u30d1\u30a4\u30a2\u6642\u306e\u30ea\u30bb\u30c3\u30c8\u52d5\u4f5c\u3001\u30ea\u30bb\u30c3\u30c8\u767a\u751f\u6642\u306e\u30d1\u30eb\u30b9\u9577\u3001\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u671f\u9593\n * \u30bf\u30a4\u30de\u3092\u8d77\u52d5\u3059\u308b\u3002\n\n```c\nWatchDogInit(RESP_MODE_INT_RESET, PCLK_CYCLES_128, PERIOD_RANGE_0X7FFFFFFF);\nWatchDogStart();\n```\n\n* \u5b9a\u671f\u7684\u306b\u30bf\u30a4\u30de\u3092\u30ea\u30ed\u30fc\u30c9\u3059\u308b\u3002\n\n```c\nWatchDogReload();\n```\n\n# UART\n* UART\u306e\u4ed5\u69d8\n *\u3000\uff16\u500b\u306eUART\u304c\u3042\u308b\u3002\n *\u3000DMA\u3068\u5272\u308a\u8fbc\u307f\u3092\u30b5\u30dd\u30fc\u30c8\n *\u3000UART\u306e\u901f\u5ea6\u306f110bps \u304b\u3089 \uff19\uff12\uff11\uff16\uff10\uff10bps\n*\u3000UART\u306e\u8a2d\u5b9a\n * \u521d\u671f\u5316\u3059\u308b UART2\u3092 115200bps 8N1\u306b\u8a2d\u5b9a\u3002\n\n```c\nScuSoftResetCtr(UART2_SRST, 1);\nDelayMs(1);\nScuSoftResetCtr(UART2_SRST, 0);\n\nScuClockGateCtr(CLK_UART2_GATE, 1);\nScuClockGateCtr(PCLK_UART2_GATE, 1);\nSetUartFreq(UART_CH2,XIN24M,24*1000*1000);\n\nIntRegister(INT_ID_UART2 ,UartDevShellBspIsrHandle2);\nIntPendingClear(INT_ID_UART2);\nIntEnable(INT_ID_UART2);\n\nUARTInit(UART_DEV2, UART_BR_115200, UART_DATA_8B, UART_ONE_STOPBIT, UART_PARITY_DISABLE);\nUARTEnableFlowControl(UART_DEV2);\n```\n\n\n"}