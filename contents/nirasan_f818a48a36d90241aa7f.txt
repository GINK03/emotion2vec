{"context": "\n\n\u306f\u3058\u3081\u306b\n\n\u30e2\u30d0\u30a4\u30eb\u30a2\u30d7\u30ea\u306e\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u30b5\u30fc\u30d0\u30fc\u3068\u3057\u3066 GAE/Go \u3092\u5229\u7528\u3059\u308b\u5834\u5408\u306e\u8a8d\u8a3c\u3068\u30e6\u30fc\u30b6\u30fc\u306e\u7ba1\u7406\u306b\u3064\u3044\u3066\u8003\u3048\u3066\u307f\u305f\u3002\n\u76ee\u6a19\u306f\u666e\u901a\u306e\u3088\u304f\u3042\u308b\u30e2\u30d0\u30a4\u30eb\u30a2\u30d7\u30ea\u306e\u6319\u52d5\u3092\u304b\u306a\u3048\u3089\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3002\n\n\n\u8981\u4ef6\n\n\u30e6\u30fc\u30b6\u30fc\u540d\u3084\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5165\u529b\u305b\u305a\u306b\u63a5\u7d9a\u3067\u304d\u308b\u3002\n\u7aef\u672b\u3054\u3068\u306b\u8b58\u5225\u304c\u3067\u304d\u308b\u3002\n\u4e00\u5b9a\u671f\u9593\u3054\u3068\u306b\u30e6\u30fc\u30b6\u30fc\u306b\u518d\u30ed\u30b0\u30a4\u30f3\u3092\u6c42\u3081\u3066\u3082\u3088\u3044\u3002\nApp Engine \u3068 Datastore \u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3067\u304d\u308b\uff08\u7121\u6599\u67a0\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\uff09\u3002\n\n\n\u30ea\u30dd\u30b8\u30c8\u30ea\ngae-mobile-backend\n\n\u5b9f\u88c5\u6982\u8981\n\n\u521d\u56de\u30a2\u30af\u30bb\u30b9\u6642\u306b Datastore \u306b\u30e6\u30fc\u30b6\u30fc\u3092\u767b\u9332\u3059\u308b\u3002\n\n\n\u30e6\u30fc\u30b6\u30fcID\u306f\u81ea\u52d5\u63a1\u756a\u3055\u308c\u308b IntID \u3092\u7528\u3044\u308b\u3002\n\u30e6\u30fc\u30b6\u30fc\u3054\u3068\u306b\u30e6\u30cb\u30fc\u30af\u306a\u8a8d\u8a3c\u30c8\u30fc\u30af\u30f3\u3092\u767a\u884c\u3057\u7aef\u672b\u306b\u4fdd\u5b58\u3055\u305b\u308b\u3002\n\n\n\u30a2\u30d7\u30ea\u958b\u59cb\u6642\u306b\u8a8d\u8a3c\u3092\u3057\u3066\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3092\u767a\u884c\u3059\u308b\u3002\n\n\n\u767b\u9332\u6642\u306b\u767a\u884c\u3057\u305f\u30e6\u30fc\u30b6\u30fcID\u3068\u8a8d\u8a3c\u30c8\u30fc\u30af\u30f3\u3067\u8a8d\u8a3c\u3092\u884c\u3046\u3002\n\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u306f JWT \u3092\u7528\u3044\u3001\u30c8\u30fc\u30af\u30f3\u4e2d\u306b\u30e6\u30fc\u30b6\u30fcID\uff08IntID\uff09\u3092\u57cb\u3081\u8fbc\u3093\u3067\u30e6\u30fc\u30b6\u30fc\u306e\u8b58\u5225\u3092\u884c\u3046\n\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u306e\u6709\u52b9\u671f\u9650\u30921\u6642\u9593\u306a\u3069\u306b\u8a2d\u5b9a\u3057\u671f\u9650\u304c\u5207\u308c\u305f\u3089\u518d\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u3082\u3089\u3046\u3002\n\n\n\u30a2\u30d7\u30ea\u958b\u59cb\u5f8c\u306e\u8a8d\u53ef\u306b\u306f\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3092\u7528\u3044\u308b\u3002\n\n\n\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u304c\u6709\u52b9\u3067\u3042\u308c\u3070\u30a2\u30af\u30bb\u30b9\u3092\u8a31\u53ef\u3059\u308b\u3002\n\u30a2\u30af\u30bb\u30b9\u8a8d\u53ef\u51e6\u7406\u3092\u5404\u30a2\u30af\u30bb\u30b9\u306e\u6700\u521d\u306b\u631f\u307f\u8fbc\u3080\u3002\n\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u4e2d\u306e\u30e6\u30fc\u30b6\u30fcID\u3092\u4f7f\u3063\u3066 Datastore \u304b\u3089\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u3092\u53d6\u5f97\u3057\u3066\u304a\u304d\u305d\u306e\u5f8c\u306e\u51e6\u7406\u3067\u53c2\u7167\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\n\n\n\n\u5b9f\u88c5\u8a73\u7d30\n\n\u521d\u56de\u30a2\u30af\u30bb\u30b9\u6642\u306b Datastore \u306b\u30e6\u30fc\u30b6\u30fc\u3092\u767b\u9332\u3059\u308b\u3002\n\n\u30e6\u30fc\u30b6\u30fc\u30c7\u30fc\u30bf\u306f UserData{ IntID int64, UserToken string } \u3068\u3057\u3066\u3001\u3053\u308c\u3092 Datastore \u306b\u767b\u9332\u3059\u308b\n\n\nIntID \u306b\u306f Datastore \u3067\u81ea\u52d5\u63a1\u756a\u3055\u308c\u305f IntID \u3092\u4fdd\u5b58\u3059\u308b\nUserToken \u306b\u306f UUID \u3092\u4fdd\u5b58\u3059\u308b\n\n\n\n\nhandler.go\nfunc RegistrationHandler(w http.ResponseWriter, r *http.Request) {\n\n    var req RegistrationHandlerRequest\n    DecodeJson(r, &req)\n\n    ctx := appengine.NewContext(r)\n\n    var userData UserData\n\n    UserToken := uuid.NewV4().String()\n\n    key := datastore.NewIncompleteKey(ctx, userDataStoreName, nil)\n    userData = UserData{UserToken: UserToken}\n\n    var err error\n    if key, err = datastore.Put(ctx, key, &userData); err != nil {\n        log.Errorf(ctx, \"Failed to registration: %v\", req)\n        EncodeJson(w, RegistrationHandlerResponse{Success: false})\n        return\n    }\n\n    // denormalization metadata\n    userData.IntID = key.IntID()\n    if _, err := datastore.Put(ctx, key, &userData); err != nil {\n        log.Errorf(ctx, \"Faild to registration: %v (%v)\", req, err)\n        EncodeJson(w, RegistrationHandlerResponse{Success: false})\n        return\n    }\n\n    EncodeJson(w, RegistrationHandlerResponse{\n        Success: true,\n        UserID: userData.IntID,\n        UserToken: userData.UserToken,\n    })\n}\n\n\n\n\u30a2\u30d7\u30ea\u958b\u59cb\u6642\u306b\u8a8d\u8a3c\u3092\u3057\u3066\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3092\u767a\u884c\u3059\u308b\u3002\n\n\u30e6\u30fc\u30b6\u30fc\u304b\u3089\u767b\u9332\u6642\u306b\u767a\u884c\u3057\u305f UserToken \u3092\u53d7\u3051\u3068\u3063\u3066\u8a8d\u8a3c\u3092\u884c\u3046\u3002\nGAE/Go \u74b0\u5883\u3067\u306e JWT \u8a8d\u8a3c\u30b5\u30fc\u30d0\u30fc\u306e\u5b9f\u88c5\u306f\u4ee5\u524d \u3053\u3061\u3089 \u306b\u8a18\u8f09\u3057\u305f\u3002\n\n\nhandler.go\nfunc AuthenticationHandler(w http.ResponseWriter, r *http.Request) {\n    var req AuthenticationHandlerRequest\n    DecodeJson(r, &req)\n\n    ctx := appengine.NewContext(r)\n\n    // UserToken \u3067\u30e6\u30fc\u30b6\u30fc\u306e\u8a8d\u8a3c\n    query := datastore.NewQuery(userDataStoreName).KeysOnly().Filter(\"IntID =\", req.UserID).Filter(\"UserToken =\", req.UserToken)\n    keys, err := query.GetAll(ctx, nil)\n    if err != nil || len(keys) != 1 {\n        log.Errorf(ctx, \"User not found: %v (%v)\", req, err)\n        EncodeJson(w, AuthenticationHandlerResponse{Success: false})\n        return\n    }\n\n    // \u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u306e\u767a\u884c\n    method := jwt.GetSigningMethod(\"ES256\")\n    UserToken := jwt.NewWithClaims(method, jwt.MapClaims{\n        \"sub\": keys[0].IntID(),\n        \"exp\": time.Now().Add(time.Hour * 1).Unix(),\n    })\n    pem, e := bindata.Asset(\"ec256-key-pri.pem\")\n    if e != nil {\n        panic(e.Error())\n    }\n    privateKey, e := jwt.ParseECPrivateKeyFromPEM(pem)\n    if e != nil {\n        panic(e.Error())\n    }\n    signedUserToken, e := UserToken.SignedString(privateKey)\n    if e != nil {\n        panic(e.Error())\n    }\n    EncodeJson(w, AuthenticationHandlerResponse{Success: true, AccessToken: signedUserToken})\n}\n\n\n\n\u30a2\u30d7\u30ea\u958b\u59cb\u5f8c\u306e\u8a8d\u53ef\u306b\u306f\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3092\u7528\u3044\u308b\u3002\n\n\u8a8d\u8a3c\u6642\u306b\u767a\u884c\u3055\u308c\u305f\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3092\u30d8\u30c3\u30c0\u30fc\u3067\u6e21\u3059\u3053\u3068\u3067\u8a8d\u53ef\u304c\u5fc5\u8981\u306a\u30da\u30fc\u30b8\u306b\u30a2\u30af\u30bb\u30b9\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u8a8d\u53ef\u51e6\u7406\u306f\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u3068\u3057\u3066\u5b9f\u88c5\u3057\u3001\u7279\u5b9a\u306e\u30d1\u30b9\u4ee5\u4e0b\u3067\u672c\u51e6\u7406\u306e\u524d\u306b\u5b9f\u884c\u3055\u308c\u308b\u3088\u3046\u306b\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u306e\u8a2d\u5b9a\u3092\u3059\u308b\u3002\n\n\n\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u306b\u306f github.com/gorilla/mux \u3092\u5229\u7528\n\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u7ba1\u7406\u306b\u306f github.com/urfave/negroni \u3092\u5229\u7528\n\n\n\u8a8d\u53ef\u3055\u308c\u305f\u30e6\u30fc\u30b6\u30fc\u306f\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u4f7f\u3063\u3066\u672c\u51e6\u7406\u3078\u3068\u6e21\u3055\u308c\u308b\u3002\n\n\nGAE \u306e Go \u306f 1.6 \u306a\u306e\u3067 *http.Request \u304b\u3089 context.Context \u306f\u53d6\u5f97\u3067\u304d\u306a\u3044\nGAE \u3067\u306f appengine.NewContext(*http.Request) \u3067 context.Context \u3092\u53d6\u5f97\u3067\u304d\u308b\u304c\u30bb\u30c3\u30c8\u3059\u308b\u95a2\u6570\u304c\u7121\u3044\u306e\u3067\u3001\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u304b\u3089\u30cf\u30f3\u30c9\u30e9\u30fc\u3078\u5024\u3092\u6e21\u3057\u305f\u308a\u3059\u308b\u306e\u306b\u306f\u4f7f\u3048\u306a\u3044\n\u3068\u3044\u3046\u3053\u3068\u3067\u4f55\u304b\u8ca0\u3051\u305f\u6c17\u304c\u3057\u3064\u3064 github.com/gorilla/context \u3092\u4f7f\u3063\u3066\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u3092\u5f15\u304d\u6e21\u3059\n\n\n\n\n\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3092\u4f7f\u3063\u3066\u8a8d\u53ef\u3092\u884c\u3046\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\nfunc AuthorizationMiddleware(w http.ResponseWriter, r *http.Request, next http.HandlerFunc) {\n\n    ctx := appengine.NewContext(r)\n\n    // \u30d8\u30c3\u30c0\u30fc\u304b\u3089\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3092\u53d6\u5f97\n    // `Authorization: Bearer <ACCESS_TOKEN>` \u3068\u3044\u3046\u5f62\u5f0f\u3092\u60f3\u5b9a\n    header := r.Header.Get(\"Authorization\")\n    if header == \"\" {\n        log.Errorf(ctx, \"Invalid authorization hader\")\n        w.WriteHeader(http.StatusUnauthorized)\n        return\n    }\n    parts := strings.SplitN(header, \" \", 2)\n    if !(len(parts) == 2 && parts[0] == \"Bearer\") {\n        log.Errorf(ctx, \"Invalid authorization hader\")\n        w.WriteHeader(http.StatusUnauthorized)\n        return\n    }\n\n    // \u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u306e\u691c\u8a3c\n    token, e := jwt.Parse(parts[1], func(t *jwt.Token) (interface{}, error) {\n        method := jwt.GetSigningMethod(\"ES256\")\n        if method != t.Method {\n            return nil, errors.New(\"Invalid signing method\")\n        }\n        pem, e := bindata.Asset(\"ec256-key-pub.pem\")\n        if e != nil {\n            return nil, e\n        }\n        key, e := jwt.ParseECPublicKeyFromPEM(pem)\n        if e != nil {\n            return nil, e\n        }\n        return key, nil\n    })\n    if e != nil {\n        log.Errorf(ctx, e.Error())\n        w.WriteHeader(http.StatusUnauthorized)\n        return\n    }\n\n    // \u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u304b\u3089\u30e6\u30fc\u30b6\u30fcID\u3092\u53d6\u5f97\n    claims, ok := token.Claims.(jwt.MapClaims)\n    if !ok || !token.Valid {\n        log.Errorf(ctx, \"invalid token: %v, %v\", ok, token)\n        w.WriteHeader(http.StatusUnauthorized)\n        return\n    }\n    // Datastore \u304b\u3089\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u3092\u53d6\u5f97\n    key := datastore.NewKey(ctx, userDataStoreName, \"\", int64(claims[\"sub\"].(float64)), nil)\n    var userData UserData\n    if e := datastore.Get(ctx, key, &userData); e != nil {\n        log.Errorf(ctx, \"user not found: %v\", e)\n        w.WriteHeader(http.StatusUnauthorized)\n        return\n    }\n\n    // github.com/gorilla/context (gcontext \u3068\u3057\u3066 import \u3057\u3066\u3044\u308b) \u306b\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u3092\u30bb\u30c3\u30c8\n    gcontext.Set(r, userDataContextKey, userData)\n\n    next(w, r)\n}\n\n\n\n\u8a8d\u53ef\u3055\u308c\u305f\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u3092\u6271\u3046\u4efb\u610f\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u5b9f\u88c5\u4f8b\nfunc HelloWorldHandler(w http.ResponseWriter, r *http.Request) {\n\n    // Get UserData from gorilla context.\n    userData, ok := gcontext.GetOk(r, userDataContextKey)\n    if !ok {\n        EncodeJson(w, HelloWorldHandlerResponse{Success: false})\n        return\n    }\n\n    EncodeJson(w, HelloWorldHandlerResponse{Success: true, Message: fmt.Sprintf(\"Hello %d\", userData.(UserData).IntID)})\n}\n\n\n\n\u4efb\u610f\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u51e6\u7406\u524d\u306b\u8a8d\u53ef\u3092\u884c\u3046\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u8a2d\u5b9a\nfunc NewHandler() http.Handler {\n\n    // \u30b0\u30ed\u30fc\u30d0\u30eb\u306a\u30eb\u30fc\u30c8\n    r := mux.NewRouter()\n\n    // \u8a8d\u53ef\u306a\u3057\u3067\u516c\u958b\u3059\u308b\u30eb\u30fc\u30c8\n    public := mux.NewRouter().PathPrefix(\"/user\").Subrouter()\n    public.HandleFunc(\"/registration\", RegistrationHandler)\n    public.HandleFunc(\"/authentication\", AuthenticationHandler)\n\n    // \u516c\u958b\u30eb\u30fc\u30c8\u306e\u767b\u9332\n    r.PathPrefix(\"/user\").Handler(public)\n\n    // \u8a8d\u8a3c\u304c\u5fc5\u8981\u306a\u30eb\u30fc\u30c8\n    auth := mux.NewRouter().PathPrefix(\"/\").Subrouter()\n    auth.HandleFunc(\"/hello\", HelloWorldHandler)\n\n    // \u8a8d\u53ef\u304c\u5fc5\u8981\u306a\u30eb\u30fc\u30c8\u3092\u8a8d\u53ef\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u3092\u9069\u7528\u3057\u3064\u3064\u767b\u9332\n    r.PathPrefix(\"/\").Handler(negroni.New(\n        negroni.HandlerFunc(AuthorizationMiddleware),\n        negroni.Wrap(auth),\n    ))\n\n    return r\n}\n\n\n\n\u304a\u308f\u308a\u306b\n\n\u305d\u3053\u306b\u9650\u3089\u305a\u30a2\u30c9\u30d0\u30a4\u30b9\u3082\u3089\u3048\u308b\u3068\u5b09\u3057\u3044\u3067\u3059\u3002\n\n# \u306f\u3058\u3081\u306b\n\n* \u30e2\u30d0\u30a4\u30eb\u30a2\u30d7\u30ea\u306e\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u30b5\u30fc\u30d0\u30fc\u3068\u3057\u3066 GAE/Go \u3092\u5229\u7528\u3059\u308b\u5834\u5408\u306e\u8a8d\u8a3c\u3068\u30e6\u30fc\u30b6\u30fc\u306e\u7ba1\u7406\u306b\u3064\u3044\u3066\u8003\u3048\u3066\u307f\u305f\u3002\n* \u76ee\u6a19\u306f\u666e\u901a\u306e\u3088\u304f\u3042\u308b\u30e2\u30d0\u30a4\u30eb\u30a2\u30d7\u30ea\u306e\u6319\u52d5\u3092\u304b\u306a\u3048\u3089\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3002\n\n# \u8981\u4ef6\n\n* \u30e6\u30fc\u30b6\u30fc\u540d\u3084\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5165\u529b\u305b\u305a\u306b\u63a5\u7d9a\u3067\u304d\u308b\u3002\n* \u7aef\u672b\u3054\u3068\u306b\u8b58\u5225\u304c\u3067\u304d\u308b\u3002\n* \u4e00\u5b9a\u671f\u9593\u3054\u3068\u306b\u30e6\u30fc\u30b6\u30fc\u306b\u518d\u30ed\u30b0\u30a4\u30f3\u3092\u6c42\u3081\u3066\u3082\u3088\u3044\u3002\n* App Engine \u3068 Datastore \u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3067\u304d\u308b\uff08\u7121\u6599\u67a0\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\uff09\u3002\n\n# \u30ea\u30dd\u30b8\u30c8\u30ea\n\n[gae-mobile-backend](https://github.com/nirasan/gae-mobile-backend)\n\n# \u5b9f\u88c5\u6982\u8981\n\n* \u521d\u56de\u30a2\u30af\u30bb\u30b9\u6642\u306b Datastore \u306b\u30e6\u30fc\u30b6\u30fc\u3092\u767b\u9332\u3059\u308b\u3002\n  * \u30e6\u30fc\u30b6\u30fcID\u306f\u81ea\u52d5\u63a1\u756a\u3055\u308c\u308b IntID \u3092\u7528\u3044\u308b\u3002\n  * \u30e6\u30fc\u30b6\u30fc\u3054\u3068\u306b\u30e6\u30cb\u30fc\u30af\u306a\u8a8d\u8a3c\u30c8\u30fc\u30af\u30f3\u3092\u767a\u884c\u3057\u7aef\u672b\u306b\u4fdd\u5b58\u3055\u305b\u308b\u3002\n* \u30a2\u30d7\u30ea\u958b\u59cb\u6642\u306b\u8a8d\u8a3c\u3092\u3057\u3066\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3092\u767a\u884c\u3059\u308b\u3002\n  * \u767b\u9332\u6642\u306b\u767a\u884c\u3057\u305f\u30e6\u30fc\u30b6\u30fcID\u3068\u8a8d\u8a3c\u30c8\u30fc\u30af\u30f3\u3067\u8a8d\u8a3c\u3092\u884c\u3046\u3002\n  * \u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u306f JWT \u3092\u7528\u3044\u3001\u30c8\u30fc\u30af\u30f3\u4e2d\u306b\u30e6\u30fc\u30b6\u30fcID\uff08IntID\uff09\u3092\u57cb\u3081\u8fbc\u3093\u3067\u30e6\u30fc\u30b6\u30fc\u306e\u8b58\u5225\u3092\u884c\u3046\n  * \u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u306e\u6709\u52b9\u671f\u9650\u30921\u6642\u9593\u306a\u3069\u306b\u8a2d\u5b9a\u3057\u671f\u9650\u304c\u5207\u308c\u305f\u3089\u518d\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u3082\u3089\u3046\u3002\n* \u30a2\u30d7\u30ea\u958b\u59cb\u5f8c\u306e\u8a8d\u53ef\u306b\u306f\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3092\u7528\u3044\u308b\u3002\n  * \u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u304c\u6709\u52b9\u3067\u3042\u308c\u3070\u30a2\u30af\u30bb\u30b9\u3092\u8a31\u53ef\u3059\u308b\u3002\n  * \u30a2\u30af\u30bb\u30b9\u8a8d\u53ef\u51e6\u7406\u3092\u5404\u30a2\u30af\u30bb\u30b9\u306e\u6700\u521d\u306b\u631f\u307f\u8fbc\u3080\u3002\n  * \u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u4e2d\u306e\u30e6\u30fc\u30b6\u30fcID\u3092\u4f7f\u3063\u3066 Datastore \u304b\u3089\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u3092\u53d6\u5f97\u3057\u3066\u304a\u304d\u305d\u306e\u5f8c\u306e\u51e6\u7406\u3067\u53c2\u7167\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\n# \u5b9f\u88c5\u8a73\u7d30\n\n## \u521d\u56de\u30a2\u30af\u30bb\u30b9\u6642\u306b Datastore \u306b\u30e6\u30fc\u30b6\u30fc\u3092\u767b\u9332\u3059\u308b\u3002\n\n* \u30e6\u30fc\u30b6\u30fc\u30c7\u30fc\u30bf\u306f `UserData{ IntID int64, UserToken string }` \u3068\u3057\u3066\u3001\u3053\u308c\u3092 Datastore \u306b\u767b\u9332\u3059\u308b\n  * IntID \u306b\u306f Datastore \u3067\u81ea\u52d5\u63a1\u756a\u3055\u308c\u305f IntID \u3092\u4fdd\u5b58\u3059\u308b\n  * UserToken \u306b\u306f UUID \u3092\u4fdd\u5b58\u3059\u308b\n\n```go:handler.go\nfunc RegistrationHandler(w http.ResponseWriter, r *http.Request) {\n\n\tvar req RegistrationHandlerRequest\n\tDecodeJson(r, &req)\n\n\tctx := appengine.NewContext(r)\n\n\tvar userData UserData\n\n\tUserToken := uuid.NewV4().String()\n\n\tkey := datastore.NewIncompleteKey(ctx, userDataStoreName, nil)\n\tuserData = UserData{UserToken: UserToken}\n\n\tvar err error\n\tif key, err = datastore.Put(ctx, key, &userData); err != nil {\n\t\tlog.Errorf(ctx, \"Failed to registration: %v\", req)\n\t\tEncodeJson(w, RegistrationHandlerResponse{Success: false})\n\t\treturn\n\t}\n\n\t// denormalization metadata\n\tuserData.IntID = key.IntID()\n\tif _, err := datastore.Put(ctx, key, &userData); err != nil {\n\t\tlog.Errorf(ctx, \"Faild to registration: %v (%v)\", req, err)\n\t\tEncodeJson(w, RegistrationHandlerResponse{Success: false})\n\t\treturn\n\t}\n\n\tEncodeJson(w, RegistrationHandlerResponse{\n\t\tSuccess: true,\n\t\tUserID: userData.IntID,\n\t\tUserToken: userData.UserToken,\n\t})\n}\n```\n\n## \u30a2\u30d7\u30ea\u958b\u59cb\u6642\u306b\u8a8d\u8a3c\u3092\u3057\u3066\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3092\u767a\u884c\u3059\u308b\u3002\n\n* \u30e6\u30fc\u30b6\u30fc\u304b\u3089\u767b\u9332\u6642\u306b\u767a\u884c\u3057\u305f UserToken \u3092\u53d7\u3051\u3068\u3063\u3066\u8a8d\u8a3c\u3092\u884c\u3046\u3002\n* GAE/Go \u74b0\u5883\u3067\u306e JWT \u8a8d\u8a3c\u30b5\u30fc\u30d0\u30fc\u306e\u5b9f\u88c5\u306f\u4ee5\u524d [\u3053\u3061\u3089](http://qiita.com/nirasan/items/daa654f4f0e2321aedaa) \u306b\u8a18\u8f09\u3057\u305f\u3002\n\n```go:handler.go\nfunc AuthenticationHandler(w http.ResponseWriter, r *http.Request) {\n\tvar req AuthenticationHandlerRequest\n\tDecodeJson(r, &req)\n\n\tctx := appengine.NewContext(r)\n\n\t// UserToken \u3067\u30e6\u30fc\u30b6\u30fc\u306e\u8a8d\u8a3c\n\tquery := datastore.NewQuery(userDataStoreName).KeysOnly().Filter(\"IntID =\", req.UserID).Filter(\"UserToken =\", req.UserToken)\n\tkeys, err := query.GetAll(ctx, nil)\n\tif err != nil || len(keys) != 1 {\n\t\tlog.Errorf(ctx, \"User not found: %v (%v)\", req, err)\n\t\tEncodeJson(w, AuthenticationHandlerResponse{Success: false})\n\t\treturn\n\t}\n\n\t// \u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u306e\u767a\u884c\n\tmethod := jwt.GetSigningMethod(\"ES256\")\n\tUserToken := jwt.NewWithClaims(method, jwt.MapClaims{\n\t\t\"sub\": keys[0].IntID(),\n\t\t\"exp\": time.Now().Add(time.Hour * 1).Unix(),\n\t})\n\tpem, e := bindata.Asset(\"ec256-key-pri.pem\")\n\tif e != nil {\n\t\tpanic(e.Error())\n\t}\n\tprivateKey, e := jwt.ParseECPrivateKeyFromPEM(pem)\n\tif e != nil {\n\t\tpanic(e.Error())\n\t}\n\tsignedUserToken, e := UserToken.SignedString(privateKey)\n\tif e != nil {\n\t\tpanic(e.Error())\n\t}\n\tEncodeJson(w, AuthenticationHandlerResponse{Success: true, AccessToken: signedUserToken})\n}\n```\n\n## \u30a2\u30d7\u30ea\u958b\u59cb\u5f8c\u306e\u8a8d\u53ef\u306b\u306f\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3092\u7528\u3044\u308b\u3002\n\n* \u8a8d\u8a3c\u6642\u306b\u767a\u884c\u3055\u308c\u305f\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3092\u30d8\u30c3\u30c0\u30fc\u3067\u6e21\u3059\u3053\u3068\u3067\u8a8d\u53ef\u304c\u5fc5\u8981\u306a\u30da\u30fc\u30b8\u306b\u30a2\u30af\u30bb\u30b9\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n* \u8a8d\u53ef\u51e6\u7406\u306f\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u3068\u3057\u3066\u5b9f\u88c5\u3057\u3001\u7279\u5b9a\u306e\u30d1\u30b9\u4ee5\u4e0b\u3067\u672c\u51e6\u7406\u306e\u524d\u306b\u5b9f\u884c\u3055\u308c\u308b\u3088\u3046\u306b\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u306e\u8a2d\u5b9a\u3092\u3059\u308b\u3002\n  * \u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u306b\u306f `github.com/gorilla/mux` \u3092\u5229\u7528\n  * \u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u7ba1\u7406\u306b\u306f `github.com/urfave/negroni` \u3092\u5229\u7528\n* \u8a8d\u53ef\u3055\u308c\u305f\u30e6\u30fc\u30b6\u30fc\u306f\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u4f7f\u3063\u3066\u672c\u51e6\u7406\u3078\u3068\u6e21\u3055\u308c\u308b\u3002\n  * GAE \u306e Go \u306f 1.6 \u306a\u306e\u3067 `*http.Request` \u304b\u3089 `context.Context` \u306f\u53d6\u5f97\u3067\u304d\u306a\u3044\n  * GAE \u3067\u306f `appengine.NewContext(*http.Request)` \u3067 `context.Context` \u3092\u53d6\u5f97\u3067\u304d\u308b\u304c\u30bb\u30c3\u30c8\u3059\u308b\u95a2\u6570\u304c\u7121\u3044\u306e\u3067\u3001\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u304b\u3089\u30cf\u30f3\u30c9\u30e9\u30fc\u3078\u5024\u3092\u6e21\u3057\u305f\u308a\u3059\u308b\u306e\u306b\u306f\u4f7f\u3048\u306a\u3044\n  * \u3068\u3044\u3046\u3053\u3068\u3067\u4f55\u304b\u8ca0\u3051\u305f\u6c17\u304c\u3057\u3064\u3064 `github.com/gorilla/context` \u3092\u4f7f\u3063\u3066\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u3092\u5f15\u304d\u6e21\u3059\n\n```go:\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3092\u4f7f\u3063\u3066\u8a8d\u53ef\u3092\u884c\u3046\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\nfunc AuthorizationMiddleware(w http.ResponseWriter, r *http.Request, next http.HandlerFunc) {\n\n\tctx := appengine.NewContext(r)\n\n\t// \u30d8\u30c3\u30c0\u30fc\u304b\u3089\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3092\u53d6\u5f97\n\t// `Authorization: Bearer <ACCESS_TOKEN>` \u3068\u3044\u3046\u5f62\u5f0f\u3092\u60f3\u5b9a\n\theader := r.Header.Get(\"Authorization\")\n\tif header == \"\" {\n\t\tlog.Errorf(ctx, \"Invalid authorization hader\")\n\t\tw.WriteHeader(http.StatusUnauthorized)\n\t\treturn\n\t}\n\tparts := strings.SplitN(header, \" \", 2)\n\tif !(len(parts) == 2 && parts[0] == \"Bearer\") {\n\t\tlog.Errorf(ctx, \"Invalid authorization hader\")\n\t\tw.WriteHeader(http.StatusUnauthorized)\n\t\treturn\n\t}\n\n\t// \u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u306e\u691c\u8a3c\n\ttoken, e := jwt.Parse(parts[1], func(t *jwt.Token) (interface{}, error) {\n\t\tmethod := jwt.GetSigningMethod(\"ES256\")\n\t\tif method != t.Method {\n\t\t\treturn nil, errors.New(\"Invalid signing method\")\n\t\t}\n\t\tpem, e := bindata.Asset(\"ec256-key-pub.pem\")\n\t\tif e != nil {\n\t\t\treturn nil, e\n\t\t}\n\t\tkey, e := jwt.ParseECPublicKeyFromPEM(pem)\n\t\tif e != nil {\n\t\t\treturn nil, e\n\t\t}\n\t\treturn key, nil\n\t})\n\tif e != nil {\n\t\tlog.Errorf(ctx, e.Error())\n\t\tw.WriteHeader(http.StatusUnauthorized)\n\t\treturn\n\t}\n\n\t// \u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u304b\u3089\u30e6\u30fc\u30b6\u30fcID\u3092\u53d6\u5f97\n\tclaims, ok := token.Claims.(jwt.MapClaims)\n\tif !ok || !token.Valid {\n\t\tlog.Errorf(ctx, \"invalid token: %v, %v\", ok, token)\n\t\tw.WriteHeader(http.StatusUnauthorized)\n\t\treturn\n\t}\n\t// Datastore \u304b\u3089\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u3092\u53d6\u5f97\n\tkey := datastore.NewKey(ctx, userDataStoreName, \"\", int64(claims[\"sub\"].(float64)), nil)\n\tvar userData UserData\n\tif e := datastore.Get(ctx, key, &userData); e != nil {\n\t\tlog.Errorf(ctx, \"user not found: %v\", e)\n\t\tw.WriteHeader(http.StatusUnauthorized)\n\t\treturn\n\t}\n\n\t// github.com/gorilla/context (gcontext \u3068\u3057\u3066 import \u3057\u3066\u3044\u308b) \u306b\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u3092\u30bb\u30c3\u30c8\n\tgcontext.Set(r, userDataContextKey, userData)\n\n\tnext(w, r)\n}\n```\n\n```go:\u8a8d\u53ef\u3055\u308c\u305f\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u3092\u6271\u3046\u4efb\u610f\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u5b9f\u88c5\u4f8b\nfunc HelloWorldHandler(w http.ResponseWriter, r *http.Request) {\n\n\t// Get UserData from gorilla context.\n\tuserData, ok := gcontext.GetOk(r, userDataContextKey)\n\tif !ok {\n\t\tEncodeJson(w, HelloWorldHandlerResponse{Success: false})\n\t\treturn\n\t}\n\n\tEncodeJson(w, HelloWorldHandlerResponse{Success: true, Message: fmt.Sprintf(\"Hello %d\", userData.(UserData).IntID)})\n}\n```\n\n```go:\u4efb\u610f\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u51e6\u7406\u524d\u306b\u8a8d\u53ef\u3092\u884c\u3046\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u8a2d\u5b9a\nfunc NewHandler() http.Handler {\n\n\t// \u30b0\u30ed\u30fc\u30d0\u30eb\u306a\u30eb\u30fc\u30c8\n\tr := mux.NewRouter()\n\n\t// \u8a8d\u53ef\u306a\u3057\u3067\u516c\u958b\u3059\u308b\u30eb\u30fc\u30c8\n\tpublic := mux.NewRouter().PathPrefix(\"/user\").Subrouter()\n\tpublic.HandleFunc(\"/registration\", RegistrationHandler)\n\tpublic.HandleFunc(\"/authentication\", AuthenticationHandler)\n\n\t// \u516c\u958b\u30eb\u30fc\u30c8\u306e\u767b\u9332\n\tr.PathPrefix(\"/user\").Handler(public)\n\n\t// \u8a8d\u8a3c\u304c\u5fc5\u8981\u306a\u30eb\u30fc\u30c8\n\tauth := mux.NewRouter().PathPrefix(\"/\").Subrouter()\n\tauth.HandleFunc(\"/hello\", HelloWorldHandler)\n\n\t// \u8a8d\u53ef\u304c\u5fc5\u8981\u306a\u30eb\u30fc\u30c8\u3092\u8a8d\u53ef\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u3092\u9069\u7528\u3057\u3064\u3064\u767b\u9332\n\tr.PathPrefix(\"/\").Handler(negroni.New(\n\t\tnegroni.HandlerFunc(AuthorizationMiddleware),\n\t\tnegroni.Wrap(auth),\n\t))\n\n\treturn r\n}\n```\n\n# \u304a\u308f\u308a\u306b\n\n* \u305d\u3053\u306b\u9650\u3089\u305a\u30a2\u30c9\u30d0\u30a4\u30b9\u3082\u3089\u3048\u308b\u3068\u5b09\u3057\u3044\u3067\u3059\u3002\n", "tags": ["Go", "GAE", "golang"]}