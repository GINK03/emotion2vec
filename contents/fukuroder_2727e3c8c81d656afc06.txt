{"context": "DFT\u306e\u56de\u8ee2\u56e0\u5b50\u3092\u307e\u3068\u3081\u305f\u3060\u3051\u306eFFT\u306e\u64ec\u4f3c\u30b3\u30fc\u30c9\u3067\u3059\u3002\u64ec\u4f3c\u30b3\u30fc\u30c9\u3068\u3044\u3046\u304bPython\u306a\u306e\u3067\u4e00\u5fdc\u5b9f\u884c\u306f\u51fa\u6765\u307e\u3059\u304c\u3001\u304d\u3061\u3093\u3068\u3057\u305fFFT\u306e\u8a2d\u8a08\u306f\u5927\u6d66\u3055\u3093\u306e\u30da\u30fc\u30b8\u306b\u8a73\u3057\u304f\u8f09\u3063\u3066\u3044\u307e\u3059\uff08\u6587\u5b57\u5316\u3051\u6ce8\u610f\uff09\u3002\n\n\nFFT (\u9ad8\u901f\u30d5\u30fc\u30ea\u30a8\u30fb\u30b3\u30b5\u30a4\u30f3\u30fb\u30b5\u30a4\u30f3\u5909\u63db) \u306e\u6982\u7565\u3068\u8a2d\u8a08\u6cd5 \n\n\nRadix-2 FFT\n\\begin{eqnarray}\nA_{2k} &=& \\sum_{j=0}^{N/2-1} (a_j + a_{N/2+j}) W_{N/2}^{jk} \\\\\nA_{2k+1} &=& \\sum_{j=0}^{N/2-1} ( a_j - a_{N/2+j}) W_N^j W_{N/2}^{jk} \n\\end{eqnarray}\n\n\nradix_2_fft.py\nfrom cmath import exp, pi\nfrom itertools import chain\n\ndef flatten(l):\n    return list(chain.from_iterable(l))\n\ndef fft(x):\n    n = len(x)\n    if(n == 1):\n        return x\n    else:\n        # Radix-2\n        t1 = (exp(-2j*pi*k/n) for k in xrange(n/2))\n        x0 = fft( [(a+b)   for a, b    in zip(x, x[n/2:])] )\n        x1 = fft( [(a-b)*w for a, b, w in zip(x, x[n/2:], t1)] )\n        return flatten(zip(x0, x1))\n\n\n\nMixed-Radix FFT (Radix-4 & Radix-2)\n\\begin{eqnarray}\nA_{4k} &=& \\sum_{j=0}^{N/4-1} (a_j + a_{N/4+j} + a_{2N/4+j} + a_{3N/4+j}) W_{N/4}^{jk} \\\\\nA_{4k+1} &=& \\sum_{j=0}^{N/4-1} (a_j - a_{2N/4+j} - i(a_{N/4+j} - a_{3N/4+j}) ) W_N^j W_{N/4}^{jk} \\\\\nA_{4k+2} &=& \\sum_{j=0}^{N/4-1} (a_j - a_{N/4+j} + a_{2N/4+j} - a_{3N/4+j}) W_N^{2j} W_{N/4}^{jk} \\\\\nA_{4k+3} &=& \\sum_{j=0}^{N/4-1} (a_j - a_{2N/4+j} + i(a_{N/4+j} - a_{3N/4+j}) ) W_N^{3j} W_{N/4}^{jk}\n\\end{eqnarray}\n\n\nmixed_radix_fft.py\nfrom cmath import exp, pi\nfrom itertools import chain\n\ndef flatten(l):\n    return list(chain.from_iterable(l))\n\ndef fft(x):\n    n = len(x)\n    if(n == 1):\n        return x\n    elif(n == 2):\n        # Radix-2\n        return [x[0]+x[1], x[0]-x[1]]\n    else:\n        # Radix-4\n        t1 = (exp(-2j*pi*k/n)   for k in xrange(n/4))\n        t2 = (exp(-2j*pi*2*k/n) for k in xrange(n/4))\n        t3 = (exp(-2j*pi*3*k/n) for k in xrange(n/4))\n        x0 = fft( [(a+b+c+d)        for a, b, c, d    in zip(x, x[n/4:], x[n*2/4:], x[n*3/4:])] )\n        x1 = fft( [(a-c-1j*(b-d))*w for a, b, c, d, w in zip(x, x[n/4:], x[n*2/4:], x[n*3/4:], t1)] )\n        x2 = fft( [(a-b+c-d)*w      for a, b, c, d, w in zip(x, x[n/4:], x[n*2/4:], x[n*3/4:], t2)] )\n        x3 = fft( [(a-c+1j*(b-d))*w for a, b, c, d, w in zip(x, x[n/4:], x[n*2/4:], x[n*3/4:], t3)] )\n        return flatten(zip(x0, x1, x2, x3))\n\n\n\nSplit-Radix FFT\n\\begin{eqnarray}\nA_{2k} &=& \\sum_{j=0}^{N/2-1} (a_j + a_{N/2+j}) W_{N/2}^{jk} \\\\\nA_{4k+1} &=& \\sum_{j=0}^{N/4-1} (a_j - a_{2N/4+j} - i(a_{N/4+j} - a_{3N/4+j}) ) W_N^j W_{N/4}^{jk} \\\\\nA_{4k+3} &=& \\sum_{j=0}^{N/4-1} (a_j - a_{2N/4+j} + i(a_{N/4+j} - a_{3N/4+j}) ) W_N^{3j} W_{N/4}^{jk}\n\\end{eqnarray}\n\n\nsplit_radix_fft.py\nfrom cmath import exp, pi\nfrom itertools import chain\n\ndef flatten(l):\n    return list(chain.from_iterable(l))\n\ndef fft(x):\n    n = len(x)\n    if(n == 1):\n        return x\n    elif(n == 2):\n        # Radix-2\n        return [x[0]+x[1], x[0]-x[1]]\n    else:\n        # Split-Radix\n        t1 = (exp(-2j*pi*k/n) for k in xrange(n/4))\n        t2 = (exp(-2j*pi*3*k/n) for k in xrange(n/4))\n        x0 = fft( [(a+b)            for a, b in zip(x, x[n/2:])] )\n        x1 = fft( [(a-c-1j*(b-d))*w for a, b, c, d, w in zip(x, x[n/4:], x[n*2/4:], x[n*3/4:], t1)] )\n        x2 = fft( [(a-c+1j*(b-d))*w for a, b, c, d, w in zip(x, x[n/4:], x[n*2/4:], x[n*3/4:], t2)] )\n        return flatten(zip(x0[0::2], x1, x0[1::2], x2))\n\n\nDFT\u306e\u56de\u8ee2\u56e0\u5b50\u3092\u307e\u3068\u3081\u305f\u3060\u3051\u306eFFT\u306e\u64ec\u4f3c\u30b3\u30fc\u30c9\u3067\u3059\u3002\u64ec\u4f3c\u30b3\u30fc\u30c9\u3068\u3044\u3046\u304bPython\u306a\u306e\u3067\u4e00\u5fdc\u5b9f\u884c\u306f\u51fa\u6765\u307e\u3059\u304c\u3001\u304d\u3061\u3093\u3068\u3057\u305fFFT\u306e\u8a2d\u8a08\u306f\u5927\u6d66\u3055\u3093\u306e\u30da\u30fc\u30b8\u306b\u8a73\u3057\u304f\u8f09\u3063\u3066\u3044\u307e\u3059\uff08\u6587\u5b57\u5316\u3051\u6ce8\u610f\uff09\u3002\n\n- [FFT (\u9ad8\u901f\u30d5\u30fc\u30ea\u30a8\u30fb\u30b3\u30b5\u30a4\u30f3\u30fb\u30b5\u30a4\u30f3\u5909\u63db) \u306e\u6982\u7565\u3068\u8a2d\u8a08\u6cd5](http://www.kurims.kyoto-u.ac.jp/~ooura/fftman/index.html) \n\n# Radix-2 FFT\n\n```math\n\\begin{eqnarray}\nA_{2k} &=& \\sum_{j=0}^{N/2-1} (a_j + a_{N/2+j}) W_{N/2}^{jk} \\\\\nA_{2k+1} &=& \\sum_{j=0}^{N/2-1} ( a_j - a_{N/2+j}) W_N^j W_{N/2}^{jk} \n\\end{eqnarray}\n```\n\n```py:radix_2_fft.py\nfrom cmath import exp, pi\nfrom itertools import chain\n\ndef flatten(l):\n    return list(chain.from_iterable(l))\n\ndef fft(x):\n    n = len(x)\n    if(n == 1):\n        return x\n    else:\n        # Radix-2\n        t1 = (exp(-2j*pi*k/n) for k in xrange(n/2))\n        x0 = fft( [(a+b)   for a, b    in zip(x, x[n/2:])] )\n        x1 = fft( [(a-b)*w for a, b, w in zip(x, x[n/2:], t1)] )\n        return flatten(zip(x0, x1))\n```\n\n# Mixed-Radix FFT (Radix-4 & Radix-2)\n\n```math\n\\begin{eqnarray}\nA_{4k} &=& \\sum_{j=0}^{N/4-1} (a_j + a_{N/4+j} + a_{2N/4+j} + a_{3N/4+j}) W_{N/4}^{jk} \\\\\nA_{4k+1} &=& \\sum_{j=0}^{N/4-1} (a_j - a_{2N/4+j} - i(a_{N/4+j} - a_{3N/4+j}) ) W_N^j W_{N/4}^{jk} \\\\\nA_{4k+2} &=& \\sum_{j=0}^{N/4-1} (a_j - a_{N/4+j} + a_{2N/4+j} - a_{3N/4+j}) W_N^{2j} W_{N/4}^{jk} \\\\\nA_{4k+3} &=& \\sum_{j=0}^{N/4-1} (a_j - a_{2N/4+j} + i(a_{N/4+j} - a_{3N/4+j}) ) W_N^{3j} W_{N/4}^{jk}\n\\end{eqnarray}\n```\n\n```py:mixed_radix_fft.py\nfrom cmath import exp, pi\nfrom itertools import chain\n\ndef flatten(l):\n    return list(chain.from_iterable(l))\n\ndef fft(x):\n    n = len(x)\n    if(n == 1):\n        return x\n    elif(n == 2):\n        # Radix-2\n        return [x[0]+x[1], x[0]-x[1]]\n    else:\n        # Radix-4\n        t1 = (exp(-2j*pi*k/n)   for k in xrange(n/4))\n        t2 = (exp(-2j*pi*2*k/n) for k in xrange(n/4))\n        t3 = (exp(-2j*pi*3*k/n) for k in xrange(n/4))\n        x0 = fft( [(a+b+c+d)        for a, b, c, d    in zip(x, x[n/4:], x[n*2/4:], x[n*3/4:])] )\n        x1 = fft( [(a-c-1j*(b-d))*w for a, b, c, d, w in zip(x, x[n/4:], x[n*2/4:], x[n*3/4:], t1)] )\n        x2 = fft( [(a-b+c-d)*w      for a, b, c, d, w in zip(x, x[n/4:], x[n*2/4:], x[n*3/4:], t2)] )\n        x3 = fft( [(a-c+1j*(b-d))*w for a, b, c, d, w in zip(x, x[n/4:], x[n*2/4:], x[n*3/4:], t3)] )\n        return flatten(zip(x0, x1, x2, x3))\n```\n\n# Split-Radix FFT\n\n```math\n\\begin{eqnarray}\nA_{2k} &=& \\sum_{j=0}^{N/2-1} (a_j + a_{N/2+j}) W_{N/2}^{jk} \\\\\nA_{4k+1} &=& \\sum_{j=0}^{N/4-1} (a_j - a_{2N/4+j} - i(a_{N/4+j} - a_{3N/4+j}) ) W_N^j W_{N/4}^{jk} \\\\\nA_{4k+3} &=& \\sum_{j=0}^{N/4-1} (a_j - a_{2N/4+j} + i(a_{N/4+j} - a_{3N/4+j}) ) W_N^{3j} W_{N/4}^{jk}\n\\end{eqnarray}\n```\n\n```py:split_radix_fft.py\nfrom cmath import exp, pi\nfrom itertools import chain\n\ndef flatten(l):\n    return list(chain.from_iterable(l))\n\ndef fft(x):\n    n = len(x)\n    if(n == 1):\n        return x\n    elif(n == 2):\n        # Radix-2\n        return [x[0]+x[1], x[0]-x[1]]\n    else:\n        # Split-Radix\n        t1 = (exp(-2j*pi*k/n) for k in xrange(n/4))\n        t2 = (exp(-2j*pi*3*k/n) for k in xrange(n/4))\n        x0 = fft( [(a+b)            for a, b in zip(x, x[n/2:])] )\n        x1 = fft( [(a-c-1j*(b-d))*w for a, b, c, d, w in zip(x, x[n/4:], x[n*2/4:], x[n*3/4:], t1)] )\n        x2 = fft( [(a-c+1j*(b-d))*w for a, b, c, d, w in zip(x, x[n/4:], x[n*2/4:], x[n*3/4:], t2)] )\n        return flatten(zip(x0[0::2], x1, x0[1::2], x2))\n```\n", "tags": ["\u6570\u5024\u8a08\u7b97", "\u4fe1\u53f7\u51e6\u7406", "Python"]}