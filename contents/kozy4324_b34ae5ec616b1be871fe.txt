{"tags": ["mapbox", "GIS"], "context": "Mapbox Blog \u306e\u3053\u306e\u8a18\u4e8b\u306b\u30a4\u30f3\u30b9\u30d1\u30a4\u30a2\u30fc\u30c9\u3055\u308c\u3066\u3001\u8a66\u3057\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u3092\u4f5c\u3063\u3066\u307f\u305f\u3068\u3044\u3046\u8a71\u3002\n\n\n\u30c7\u30e2\u30da\u30fc\u30b8\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n\n\u6c17\u3065\u304d\nMapbox GL JS v0.27.0 \u3042\u305f\u308a\u304b\u3089 3D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3059\u308b\u6a5f\u80fd\u304c\u8ffd\u52a0\u3055\u308c\u3066\u30d3\u30eb\u30c7\u30a3\u30f3\u30b0\u3092\u7acb\u4f53\u7684\u306b\u8868\u73fe\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u3063\u305f\u308f\u3051\u3067\u3059\u304c\u3001\u3053\u308c\u306f\u30d3\u30eb\u30c7\u30a3\u30f3\u30b0\u306b\u9650\u3089\u305a\u4efb\u610f\u306e\u30dd\u30ea\u30b4\u30f3\u3092 3D \u3067\u8868\u73fe\u3067\u304d\u307e\u3059\u3002\u3064\u307e\u308a\u4efb\u610f\u306e\u7d71\u8a08\u60c5\u5831\u3092\u9ad8\u3055\u4ed8\u304d\u30dd\u30ea\u30b4\u30f3\u3067\u8868\u73fe\u3059\u308b\u3053\u3068\u3067\u3001\u30c7\u30fc\u30bf\u306e\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30bc\u30fc\u30b7\u30e7\u30f3\u304c\u51fa\u6765\u308b\u3067\u306f\u306a\u3044\u304b\uff01\u3068\u3044\u3046\u767a\u60f3\u306b\u81f3\u308a\u307e\u3057\u305f\u3002\n\n\u30c7\u30fc\u30bf\u306e\u6e96\u5099\n\n\u90fd\u9053\u5e9c\u770c\u306eshape\u30c7\u30fc\u30bf\nNatural Earth \u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3001\u4ee5\u4e0b\u624b\u9806\u3067 GeoJSON \u5f62\u5f0f\u306b\u5909\u63db\u3057\u3066\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n$ curl -LO 'http://www.naturalearthdata.com/http//www.naturalearthdata.com/download/10m/cultural/ne_10m_admin_1_states_provinces.zip'\n$ unzip ne_10m_admin_1_states_provinces.zip\n$ ogr2ogr -f GeoJSON -where 'geonunit = \"Japan\"' japan.geojson ne_10m_admin_1_states_provinces.shp\n\nogr2ogr \u30b3\u30de\u30f3\u30c9\u306f $ brew install gdal \u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u90fd\u9053\u5e9c\u770c\u5225\u4eba\u53e3\u30c7\u30fc\u30bf\ne-Stat \u304b\u3089\u53d6\u5f97\u3057\u305f\u90fd\u9053\u5e9c\u770c\u5225\u4eba\u53e3\u30c7\u30fc\u30bf\u3092\u624b\u7de8\u96c6\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u7c21\u5358\u306b\u6271\u3048\u308b\u3088\u3046\u306b\u7de8\u96c6\u3057\u307e\u3057\u305f\u3002\n\u4ee5\u4e0b\u30b3\u30de\u30f3\u30c9\u3067\u53d6\u5f97\u3057\u3066\u3001\n$ curl -O 'http://www.stat.go.jp/data/nihon/zuhyou/n160200200.xls'\n\n\u4ee5\u4e0b\u306e\u5f62\u306b\u7de8\u96c6\u3002\u5168\u30c7\u30fc\u30bf\u306f GitHub \u3092\u3054\u53c2\u8003\u3002\n\u5317\u6d77\u9053,5400\n\u9752\u68ee,1321\n\u5ca9\u624b,1284\n\u5bae\u57ce,2328\n\u79cb\u7530,1037\n:\n\n\n\u90fd\u9053\u5e9c\u770c\u30dd\u30ea\u30b4\u30f3\u3068\u4eba\u53e3\u3092\u30de\u30fc\u30b8\u3057\u305f GeoJSON \u30c7\u30fc\u30bf\n\u90fd\u9053\u5e9c\u770c\u306eshape\u30c7\u30fc\u30bf\u3068\u90fd\u9053\u5e9c\u770c\u5225\u4eba\u53e3\u30c7\u30fc\u30bf\u3092\u3001\u4ee5\u4e0b\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u30de\u30fc\u30b8\u3057\u3066 Mapbox GL JS \u3067\u8aad\u307f\u8fbc\u3080 GeoJSON \u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\nmerge.rb\nrequire \"csv\"\nrequire \"json\"\n\n# \u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u7684\u306a\u30ab\u30e9\u30fc\u30b3\u30fc\u30c9\u5024\u3092\u751f\u6210\ndef gen_color(val, max)\n  i = ((val.to_f / max.to_f ) * 255).to_i\n  r = case i\n    when 0..127 then 0\n    when 128..190 then (i - 127) * 4\n    else 255\n  end\n  g = case i\n    when 0..63 then i * 4\n    when 64..191 then 255\n    else 256 - (i - 191) * 4\n  end\n  b = case i\n    when 0..64 then 255\n    when 65..126 then 255 - (i - 64) * 4\n    else 0\n  end\n  sprintf(\"#%02x%02x%02x\", r, g, b)\nend\n\n# \u90fd\u9053\u5e9c\u770c\u5225\u4eba\u53e3\u3092\u30ed\u30fc\u30c9\npopulations = CSV.read(\"./populations.csv\").to_h\nmax_population = populations.to_a.map{|i| i[1].to_i}.max\n\n# \u90fd\u9053\u5e9c\u770c\u30dd\u30ea\u30b4\u30f3\u3092\u30ed\u30fc\u30c9\njapan = JSON.load(File.open(\"./japan.geojson\"))\n\n# \u4eba\u53e3\u3068\u30dd\u30ea\u30b4\u30f3\u3092\u30de\u30fc\u30b8\njapan[\"features\"].delete_if {|feature| feature[\"properties\"][\"name\"].nil? }\njapan[\"features\"].each {|feature|\n  if feature[\"properties\"][\"name\"] == \"Shizuoka\" # \u9759\u5ca1\u3060\u3051name_local\u304c\u7a7a...\n    name = \"\u9759\u5ca1\"\n  else\n    name = feature[\"properties\"][\"name_local\"].sub(/[\u770c\u90fd\u5e9c]$/, '')\n  end\n  population = populations[name].to_i\n  feature[\"properties\"] = {\n    name: name,\n    color: gen_color(population, max_population),\n    population: population,\n    population_height: ((population.to_f / max_population.to_f) * 65535).to_i\n  }\n}\nputs japan.to_json\n\n\n\u4ee5\u4e0b\u306e\u8981\u9818\u3067\u5b9f\u884c\u3057\u307e\u3059\u3002\n$ ruby merge.rb > japan_with_populations.geojson\n\n\nHTML\u5b9f\u88c5\nMapbox GL JS \u3067\u6e96\u5099\u3057\u305f GeoJSON \u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u3001API\u3067\u30b9\u30bf\u30a4\u30eb\u3082\u8a2d\u5b9a\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n<!DOCTYPE html>\n<html>\n<head>\n<script src='https://api.mapbox.com/mapbox-gl-js/v0.28.0/mapbox-gl.js'></script>\n<link href='https://api.mapbox.com/mapbox-gl-js/v0.28.0/mapbox-gl.css' rel='stylesheet' />\n</head>\n<body style='margin: 0;'>\n<div id='map' style='width: 100%; position: absolute; top: 0; bottom: 0;'></div>\n<script>\nmapboxgl.accessToken = 'pk.eyJ1Ijoiay1uYWthbXVyYSIsImEiOiJjaXVqZWd6OTMwMGhjMnlxaXZrcGhzczJtIn0.LQwDcl6aZFQRx8dPfneFHQ';\nvar map = new mapboxgl.Map({\n    container: 'map',\n    center: [135, 35],\n    zoom: 6,\n    pitch: 60,\n    style: 'mapbox://styles/mapbox/streets-v9'\n});\nmap.on('load', function() {\n    map.addSource(\"populations\", {\n        'type': 'geojson',\n        'data': './japan_with_populations.geojson?_=' + Date.now()\n    });\n    map.addLayer({\n        'id': 'population-extrusion',\n        'type': 'fill-extrusion',\n        'source': 'populations',\n        'paint': {\n            'fill-extrusion-color': {\n                'property': 'color', \n                'type': 'identity'\n            },\n            'fill-extrusion-height': {\n                'property': 'population_height',\n                'type': 'identity'\n            },\n            'fill-extrusion-opacity': 0.8\n        }\n    });\n});\nmap.on('data', function(event) {\n    if (event.dataType == 'source' && event.source.id == 'populations') {\n        var attrib = document.querySelector(\".mapboxgl-ctrl-attrib\");\n        attrib.innerHTML = attrib.innerHTML +\n            ' | <a href=\"http://www.e-stat.go.jp/\" target=\"_blank\">\u653f\u5e9c\u7d71\u8a08\u306e\u7dcf\u5408\u7a93\u53e3(e-Stat)</a>' +\n            ' | <a href=\"http://www.naturalearthdata.com/\" target=\"_blank\">Made with Natural Earth.</a>';\n    }\n});\n</script>\n</body>\n</html>\n\n\n\u30cf\u30de\u308a\u30dd\u30a4\u30f3\u30c8\n\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3055\u308c\u308b\u9ad8\u3055\u306e\u5024\u306f\u8aad\u307f\u8fbc\u3080 GeoJSON \u5074\u306b\u4fdd\u6301\u3057\u3066\u304a\u308a\u3001\u4ee5\u4e0b\u306e population_height \u304c\u8a72\u5f53\u3057\u307e\u3059\u3002\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"name\": \"\u5e83\u5cf6\",\n        \"color\": \"#00d4ff\",\n        \"population\": 2833,\n        \"population_height\": 13865\n      },\n      \"geometry\": {\n\nMapbox GL JS \u306b\u6307\u5b9a\u3059\u308b\u9ad8\u3055\u306e\u5358\u4f4d\u306f\u30e1\u30fc\u30c8\u30eb\u3001\u4eba\u53e3\u306e\u5024\u306e\u5358\u4f4d\u306f\u5343\u4eba\u3067\u3059\u3002\u305d\u308c\u3092\u305d\u306e\u307e\u307e\u30e1\u30fc\u30c8\u30eb\u3068\u3057\u3066\u9069\u7528\u3059\u308b\u3068\u8feb\u529b\u304c\u51fa\u306a\u3044\u3068\u601d\u3044\u3001\u6700\u5927\u5024\u306e\u6bd4\u7387\u3092\u5909\u3048\u3066\u9069\u7528\u3057\u3066\u305f\u3068\u3053\u308d\u300110\u4e07\u306a\u3069\u3092\u6307\u5b9a\u3059\u308b\u3068\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3055\u308c\u305a...\u3002\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3055\u308c\u308b/\u3055\u308c\u306a\u3044\u306e\u95be\u5024\u3092\u78ba\u8a8d\u3057\u305f\u3068\u3053\u308d 65536 \u4ee5\u4e0a\u306b\u306a\u308b\u3068\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3055\u308c\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3001 unsigned short int \u7684\u306a\u5e45\u304c\u3042\u308b\u307f\u305f\u3044\u3067\u3059\u3002\nRuby \u306e\u30b3\u30fc\u30c9\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8a08\u7b97\u3092\u884c\u3044\u3001\u9ad8\u3055\u306e\u6700\u5927\u5024\uff08\u6771\u4eac\u90fd\uff09\u304c 65535 \u3068\u306a\u308b\u3088\u3046\u306b\u8abf\u6574\u3057\u3066\u3044\u307e\u3059\u3002\npopulation_height: ((population.to_f / max_population.to_f) * 65535).to_i\n\n\n\u307e\u3068\u3081\n\nMapbox GL JS \u306e 3D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3059\u308b\u6a5f\u80fd\u3092\u5229\u7528\u3057\u305f\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30bc\u30fc\u30b7\u30e7\u30f3\u9762\u767d\u3044\u304b\u3082 \n\n\u305f\u3060\u3057\u65b0\u3057\u3081\u306e\u30d6\u30e9\u30a6\u30b6\u7248\u3060\u3051\u306a\u306e\u3067\u6ce8\u610f\uff01\n\n\nMapbox GL JS \n\n\n0.27.0 \u4ee5\u4e0a\n\n\niOS SDK\n\n\nNot yet supported\n\n\nAndroid SDK\n\n\nNot yet supported\n\n\n\n\n\n\u30de\u30d4\u30aa\u30f3\u30d9\u30af\u30bf\u30fc\u3082 Mapbox \u3092\u5229\u7528\u3057\u3066\u3044\u308b\u306e\u3067\u3053\u3046\u3044\u3063\u305f\u30c7\u30fc\u30bf\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30bc\u30fc\u30b7\u30e7\u30f3\u306b\u30c1\u30e3\u30ec\u30f3\u30b8\u3057\u305f\u3044\uff01\n\nMapbox Blog \u306e[\u3053\u306e\u8a18\u4e8b](https://www.mapbox.com/blog/population-inspector/)\u306b\u30a4\u30f3\u30b9\u30d1\u30a4\u30a2\u30fc\u30c9\u3055\u308c\u3066\u3001\u8a66\u3057\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u3092\u4f5c\u3063\u3066\u307f\u305f\u3068\u3044\u3046\u8a71\u3002\n\n![Untitled.gif](https://qiita-image-store.s3.amazonaws.com/0/38598/5d666442-f9c4-c407-4ba7-f7b0ea459b20.gif)\n\n- [\u30c7\u30e2\u30da\u30fc\u30b8](https://kozy4324.github.io/population_3d_demo/demo.html)\n- [\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9](https://github.com/kozy4324/population_3d_demo)\n\n## \u6c17\u3065\u304d\n\nMapbox GL JS v0.27.0 \u3042\u305f\u308a\u304b\u3089 [3D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3059\u308b\u6a5f\u80fd](https://www.mapbox.com/blog/3d-features-in-mapbox-gl-js/)\u304c\u8ffd\u52a0\u3055\u308c\u3066\u30d3\u30eb\u30c7\u30a3\u30f3\u30b0\u3092\u7acb\u4f53\u7684\u306b\u8868\u73fe\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u3063\u305f\u308f\u3051\u3067\u3059\u304c\u3001\u3053\u308c\u306f\u30d3\u30eb\u30c7\u30a3\u30f3\u30b0\u306b\u9650\u3089\u305a\u4efb\u610f\u306e\u30dd\u30ea\u30b4\u30f3\u3092 3D \u3067\u8868\u73fe\u3067\u304d\u307e\u3059\u3002\u3064\u307e\u308a\u4efb\u610f\u306e\u7d71\u8a08\u60c5\u5831\u3092\u9ad8\u3055\u4ed8\u304d\u30dd\u30ea\u30b4\u30f3\u3067\u8868\u73fe\u3059\u308b\u3053\u3068\u3067\u3001\u30c7\u30fc\u30bf\u306e\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30bc\u30fc\u30b7\u30e7\u30f3\u304c\u51fa\u6765\u308b\u3067\u306f\u306a\u3044\u304b\uff01\u3068\u3044\u3046\u767a\u60f3\u306b\u81f3\u308a\u307e\u3057\u305f\u3002\n\n## \u30c7\u30fc\u30bf\u306e\u6e96\u5099\n\n### \u90fd\u9053\u5e9c\u770c\u306eshape\u30c7\u30fc\u30bf\n\nNatural Earth \u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3001\u4ee5\u4e0b\u624b\u9806\u3067 GeoJSON \u5f62\u5f0f\u306b\u5909\u63db\u3057\u3066\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\n```bash\n$ curl -LO 'http://www.naturalearthdata.com/http//www.naturalearthdata.com/download/10m/cultural/ne_10m_admin_1_states_provinces.zip'\n$ unzip ne_10m_admin_1_states_provinces.zip\n$ ogr2ogr -f GeoJSON -where 'geonunit = \"Japan\"' japan.geojson ne_10m_admin_1_states_provinces.shp\n```\n\n`ogr2ogr` \u30b3\u30de\u30f3\u30c9\u306f `$ brew install gdal` \u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3044\u307e\u3059\u3002\n\n### \u90fd\u9053\u5e9c\u770c\u5225\u4eba\u53e3\u30c7\u30fc\u30bf\n\n[e-Stat](https://www.e-stat.go.jp/SG1/estat/eStatTopPortal.do) \u304b\u3089\u53d6\u5f97\u3057\u305f\u90fd\u9053\u5e9c\u770c\u5225\u4eba\u53e3\u30c7\u30fc\u30bf\u3092\u624b\u7de8\u96c6\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u7c21\u5358\u306b\u6271\u3048\u308b\u3088\u3046\u306b\u7de8\u96c6\u3057\u307e\u3057\u305f\u3002\n\n\u4ee5\u4e0b\u30b3\u30de\u30f3\u30c9\u3067\u53d6\u5f97\u3057\u3066\u3001\n\n```bash\n$ curl -O 'http://www.stat.go.jp/data/nihon/zuhyou/n160200200.xls'\n```\n\n\u4ee5\u4e0b\u306e\u5f62\u306b\u7de8\u96c6\u3002\u5168\u30c7\u30fc\u30bf\u306f [GitHub](https://raw.githubusercontent.com/kozy4324/population_3d_demo/gh-pages/populations.csv) \u3092\u3054\u53c2\u8003\u3002\n\n```\n\u5317\u6d77\u9053,5400\n\u9752\u68ee,1321\n\u5ca9\u624b,1284\n\u5bae\u57ce,2328\n\u79cb\u7530,1037\n:\n```\n\n### \u90fd\u9053\u5e9c\u770c\u30dd\u30ea\u30b4\u30f3\u3068\u4eba\u53e3\u3092\u30de\u30fc\u30b8\u3057\u305f GeoJSON \u30c7\u30fc\u30bf\n\n\u90fd\u9053\u5e9c\u770c\u306eshape\u30c7\u30fc\u30bf\u3068\u90fd\u9053\u5e9c\u770c\u5225\u4eba\u53e3\u30c7\u30fc\u30bf\u3092\u3001\u4ee5\u4e0b\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u30de\u30fc\u30b8\u3057\u3066 Mapbox GL JS \u3067\u8aad\u307f\u8fbc\u3080 GeoJSON \u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n```rb:merge.rb\nrequire \"csv\"\nrequire \"json\"\n\n# \u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u7684\u306a\u30ab\u30e9\u30fc\u30b3\u30fc\u30c9\u5024\u3092\u751f\u6210\ndef gen_color(val, max)\n  i = ((val.to_f / max.to_f ) * 255).to_i\n  r = case i\n    when 0..127 then 0\n    when 128..190 then (i - 127) * 4\n    else 255\n  end\n  g = case i\n    when 0..63 then i * 4\n    when 64..191 then 255\n    else 256 - (i - 191) * 4\n  end\n  b = case i\n    when 0..64 then 255\n    when 65..126 then 255 - (i - 64) * 4\n    else 0\n  end\n  sprintf(\"#%02x%02x%02x\", r, g, b)\nend\n\n# \u90fd\u9053\u5e9c\u770c\u5225\u4eba\u53e3\u3092\u30ed\u30fc\u30c9\npopulations = CSV.read(\"./populations.csv\").to_h\nmax_population = populations.to_a.map{|i| i[1].to_i}.max\n\n# \u90fd\u9053\u5e9c\u770c\u30dd\u30ea\u30b4\u30f3\u3092\u30ed\u30fc\u30c9\njapan = JSON.load(File.open(\"./japan.geojson\"))\n\n# \u4eba\u53e3\u3068\u30dd\u30ea\u30b4\u30f3\u3092\u30de\u30fc\u30b8\njapan[\"features\"].delete_if {|feature| feature[\"properties\"][\"name\"].nil? }\njapan[\"features\"].each {|feature|\n  if feature[\"properties\"][\"name\"] == \"Shizuoka\" # \u9759\u5ca1\u3060\u3051name_local\u304c\u7a7a...\n    name = \"\u9759\u5ca1\"\n  else\n    name = feature[\"properties\"][\"name_local\"].sub(/[\u770c\u90fd\u5e9c]$/, '')\n  end\n  population = populations[name].to_i\n  feature[\"properties\"] = {\n    name: name,\n    color: gen_color(population, max_population),\n    population: population,\n    population_height: ((population.to_f / max_population.to_f) * 65535).to_i\n  }\n}\nputs japan.to_json\n```\n\n\u4ee5\u4e0b\u306e\u8981\u9818\u3067\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n```bash\n$ ruby merge.rb > japan_with_populations.geojson\n```\n\n## HTML\u5b9f\u88c5\n\nMapbox GL JS \u3067\u6e96\u5099\u3057\u305f GeoJSON \u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u3001API\u3067\u30b9\u30bf\u30a4\u30eb\u3082\u8a2d\u5b9a\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<script src='https://api.mapbox.com/mapbox-gl-js/v0.28.0/mapbox-gl.js'></script>\n<link href='https://api.mapbox.com/mapbox-gl-js/v0.28.0/mapbox-gl.css' rel='stylesheet' />\n</head>\n<body style='margin: 0;'>\n<div id='map' style='width: 100%; position: absolute; top: 0; bottom: 0;'></div>\n<script>\nmapboxgl.accessToken = 'pk.eyJ1Ijoiay1uYWthbXVyYSIsImEiOiJjaXVqZWd6OTMwMGhjMnlxaXZrcGhzczJtIn0.LQwDcl6aZFQRx8dPfneFHQ';\nvar map = new mapboxgl.Map({\n    container: 'map',\n    center: [135, 35],\n    zoom: 6,\n    pitch: 60,\n    style: 'mapbox://styles/mapbox/streets-v9'\n});\nmap.on('load', function() {\n    map.addSource(\"populations\", {\n        'type': 'geojson',\n        'data': './japan_with_populations.geojson?_=' + Date.now()\n    });\n    map.addLayer({\n        'id': 'population-extrusion',\n        'type': 'fill-extrusion',\n        'source': 'populations',\n        'paint': {\n            'fill-extrusion-color': {\n                'property': 'color', \n                'type': 'identity'\n            },\n            'fill-extrusion-height': {\n                'property': 'population_height',\n                'type': 'identity'\n            },\n            'fill-extrusion-opacity': 0.8\n        }\n    });\n});\nmap.on('data', function(event) {\n    if (event.dataType == 'source' && event.source.id == 'populations') {\n        var attrib = document.querySelector(\".mapboxgl-ctrl-attrib\");\n        attrib.innerHTML = attrib.innerHTML +\n            ' | <a href=\"http://www.e-stat.go.jp/\" target=\"_blank\">\u653f\u5e9c\u7d71\u8a08\u306e\u7dcf\u5408\u7a93\u53e3(e-Stat)</a>' +\n            ' | <a href=\"http://www.naturalearthdata.com/\" target=\"_blank\">Made with Natural Earth.</a>';\n    }\n});\n</script>\n</body>\n</html>\n```\n\n## \u30cf\u30de\u308a\u30dd\u30a4\u30f3\u30c8\n\n\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3055\u308c\u308b\u9ad8\u3055\u306e\u5024\u306f\u8aad\u307f\u8fbc\u3080 GeoJSON \u5074\u306b\u4fdd\u6301\u3057\u3066\u304a\u308a\u3001\u4ee5\u4e0b\u306e `population_height` \u304c\u8a72\u5f53\u3057\u307e\u3059\u3002\n\n```\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"name\": \"\u5e83\u5cf6\",\n        \"color\": \"#00d4ff\",\n        \"population\": 2833,\n        \"population_height\": 13865\n      },\n      \"geometry\": {\n```\n\nMapbox GL JS \u306b\u6307\u5b9a\u3059\u308b\u9ad8\u3055\u306e\u5358\u4f4d\u306f\u30e1\u30fc\u30c8\u30eb\u3001\u4eba\u53e3\u306e\u5024\u306e\u5358\u4f4d\u306f\u5343\u4eba\u3067\u3059\u3002\u305d\u308c\u3092\u305d\u306e\u307e\u307e\u30e1\u30fc\u30c8\u30eb\u3068\u3057\u3066\u9069\u7528\u3059\u308b\u3068\u8feb\u529b\u304c\u51fa\u306a\u3044\u3068\u601d\u3044\u3001\u6700\u5927\u5024\u306e\u6bd4\u7387\u3092\u5909\u3048\u3066\u9069\u7528\u3057\u3066\u305f\u3068\u3053\u308d\u300110\u4e07\u306a\u3069\u3092\u6307\u5b9a\u3059\u308b\u3068\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3055\u308c\u305a...\u3002\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3055\u308c\u308b/\u3055\u308c\u306a\u3044\u306e\u95be\u5024\u3092\u78ba\u8a8d\u3057\u305f\u3068\u3053\u308d 65536 \u4ee5\u4e0a\u306b\u306a\u308b\u3068\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3055\u308c\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3001 `unsigned short int` \u7684\u306a\u5e45\u304c\u3042\u308b\u307f\u305f\u3044\u3067\u3059\u3002\n\nRuby \u306e\u30b3\u30fc\u30c9\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8a08\u7b97\u3092\u884c\u3044\u3001\u9ad8\u3055\u306e\u6700\u5927\u5024\uff08\u6771\u4eac\u90fd\uff09\u304c `65535` \u3068\u306a\u308b\u3088\u3046\u306b\u8abf\u6574\u3057\u3066\u3044\u307e\u3059\u3002\n\n```rb\npopulation_height: ((population.to_f / max_population.to_f) * 65535).to_i\n```\n\n## \u307e\u3068\u3081\n\n- Mapbox GL JS \u306e 3D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3059\u308b\u6a5f\u80fd\u3092\u5229\u7528\u3057\u305f\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30bc\u30fc\u30b7\u30e7\u30f3\u9762\u767d\u3044\u304b\u3082 :+1:\n- \u305f\u3060\u3057\u65b0\u3057\u3081\u306e\u30d6\u30e9\u30a6\u30b6\u7248\u3060\u3051\u306a\u306e\u3067\u6ce8\u610f\uff01\n    - Mapbox GL JS \n        - 0.27.0 \u4ee5\u4e0a\n    - iOS SDK\n        - Not yet supported\n    - Android SDK\n        - Not yet supported\n- [\u30de\u30d4\u30aa\u30f3\u30d9\u30af\u30bf\u30fc](https://mapion.github.io/mapion-vector/)\u3082 Mapbox \u3092\u5229\u7528\u3057\u3066\u3044\u308b\u306e\u3067\u3053\u3046\u3044\u3063\u305f\u30c7\u30fc\u30bf\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30bc\u30fc\u30b7\u30e7\u30f3\u306b\u30c1\u30e3\u30ec\u30f3\u30b8\u3057\u305f\u3044\uff01\n"}