{"context": "Jubatus Advent Calendar 22\u65e5\u76ee\u3067\u3059\uff0e\nPython\u3067\u6a5f\u68b0\u5b66\u7fd2\u3092\u3055\u308c\u3066\u3044\u308b\u65b9\u306b\u306f\u304a\u306a\u3058\u307f\u306escikit-learn\u3068Jubatus\u306e\u6027\u80fd\u6bd4\u8f03\u3092\u3084\u3063\u3066\u307f\u307e\u3059\uff0e\n\n\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\n\u4eca\u56de\u306fscikit-learn API \u3068\u3057\u3066\u516c\u958b\u3055\u308c\u3066\u3044\u308b5\u7a2e\u985e\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u5229\u7528\u3057\u307e\u3059\uff0e\n\niris dataset: \u307f\u306a\u3055\u3093\u3054\u5b58\u77e5\u30a2\u30e4\u30e1\u306e\u7a2e\u985e\u3092\u5224\u5b9a\u3059\u308b\u6570\u5024\u5206\u985e\u30bf\u30b9\u30af\u3067\u3059\uff0e\nbreast cancer dataset\uff1a\u4e73\u304c\u3093\u304c\u767a\u75c7\u3059\u308b\u304b\u5224\u5b9a\u3059\u308b\u6570\u5024\u5206\u985e\u30bf\u30b9\u30af\u3067\u3059\uff0e\ndigits dataset: 8x8\u30d4\u30af\u30bb\u30eb\u306e\u624b\u66f8\u304d\u6570\u5b57\u304c0-9\u306e\u3069\u308c\u306b\u8a72\u5f53\u3059\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\u6570\u5024\u5206\u985e\u30bf\u30b9\u30af\u3067\u3059\uff0e\nMNIST dataset: 28x28\u30d4\u30af\u30bb\u30eb\u306e\u624b\u66f8\u304d\u6570\u5b57\u304c0-9\u306e\u3069\u308c\u306b\u8a72\u5f53\u3059\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\u6570\u5024\u5206\u985e\u30bf\u30b9\u30af\u3067\u3059\uff0e\n20newsgroups dataset: \u7d0420000\u4ef6\u306e\u6587\u66f8\u304c20\u30ab\u30c6\u30b4\u30ea\u306e\u3069\u308c\u306b\u5c5e\u3059\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\u30c6\u30ad\u30b9\u30c8\u5206\u985e\u30bf\u30b9\u30af\u3067\u3059\uff0e\n\n\n\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\u3068\u5b66\u7fd2\u30fb\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3078\u306e\u5206\u5272\nscikit-learn API \u306b\u3066\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u305f\u5f8c\uff0c\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u30922:1\u306e\u5272\u5408\u3067\u5206\u5272\u3057\u307e\u3059\uff0e\ndef load_dataset():\n    from sklearn.datasets import fetch_mldata\n    dataset = fetch_mldata('MNIST original')\n    X = csr_matrix(dataset.data, dtype=np.float64) \n    y = dataset.target\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n    return X_train, X_test, y_train, y_test\n\n\nJubatus\u3092\u7528\u3044\u305f\u6027\u80fd\u8a55\u4fa1\u30b9\u30af\u30ea\u30d7\u30c8\u4f5c\u6210\n\u4eca\u56de\u306e\u8a55\u4fa1\u3067\u306fembedded-jubatus-python\u3092\u4f7f\u3044\u307e\u3059\uff0e\nembedded-jubatus-python\u306f\uff0cJubatus\u306e\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u30b5\u30fc\u30d0\u3092\u4ecb\u3055\u305a\u76f4\u3067\u53e9\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\u305d\u306e\u305f\u3081\uff0c\u624b\u5143\u306e\u30de\u30b7\u30f3\u3067\u30b5\u30af\u30c3\u3068\u6027\u80fd\u3092\u78ba\u304b\u3081\u305f\u3044\u3068\u3044\u3063\u305f\u30e9\u30a4\u30c8\u306a\u4f7f\u3044\u65b9\u306b\u975e\u5e38\u306b\u5411\u3044\u3066\u3044\u307e\u3059\uff0e\n\n\u5206\u985e\u5668\u306e\u4f5c\u6210\n\u307e\u305a\u306fJubatus\u306e\u7dda\u5f62\u5206\u985e\u5668\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\n\u4eca\u56de\u306f\u30c6\u30ad\u30b9\u30c8\u3092\u91cd\u307f\u4ed8\u3051\u3059\u308b\u30b3\u30f3\u30d5\u30a3\u30b0\u3068\u3057\u3066\uff0c\u30b5\u30f3\u30d7\u30eb\u91cd\u307f\u306b\u306flog_tf\u3092\uff0c\u5927\u57df\u91cd\u307f\u306b\u306fbm25\u3092\u5229\u7528\u3057\u307e\u3059\uff0ebm25\u306b\u3064\u3044\u3066\u306f\u3053\u3061\u3089\u306e\u30d6\u30ed\u30b0\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\uff0e\nlinear_classifier(...)\u306fJubatus\u306e\u7dda\u5f62\u5206\u985e\u5668\u3092\u8d77\u52d5\u3059\u308b\u95a2\u6570\u3067\u3059\uff0eperceptron, PA\u3068\u305d\u306e\u4ed6\u306e\u7dda\u5f62\u5206\u985e\u5668\u306f\u30b3\u30f3\u30d5\u30a3\u30b0\u304c\u7570\u306a\u308a\u307e\u3059\u306e\u3067\u5834\u5408\u5206\u3051\u3092\u3057\u3066\u3044\u307e\u3059\uff0e\nimport copy\nfrom embedded_jubatus import Classifier\n\n# Default Config\nCONFIG = {\n    'method': 'perceptron',\n    'converter': {\n        'num_filter_types': {},\n        'num_filter_values': [],\n        'string_filter_types': {},\n        'string_filter_values': [],\n        'num_types': {},\n        'num_rules': [\n            {'key': '*', 'type': 'num'}\n        ],\n        'string_types': {},\n        'string_rules': [\n            {'key': '*', 'type': 'space', 'sample_weight': 'log_tf', 'global_weight': 'bm25'}\n        ]\n    },\n    'parameter': {}\n}\n\ndef linear_classifier(method='AROW', regularization_weight=1.0):\n    \"\"\" \u7dda\u5f62\u5206\u985e\u5668\u3092\u8d77\u52d5\u3059\u308b \"\"\"\n    cfg = copy.deepcopy(CONFIG)\n    cfg['method'] = method\n    if method not in ('perceptron', 'PA'):  # perceptron, PA \u4ee5\u5916\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u5fc5\u8981\n        cfg['parameter']['regularization_weight'] = regularization_weight\n    return Classifier(cfg)\n\n\n\u7121\u4e8b\uff0c\u5206\u985e\u5668\u3092\u4f5c\u6210\u3059\u308b\u95a2\u6570\u304c\u66f8\u3051\u307e\u3057\u305f\uff0e\n\n\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u3057\u3066\u8a55\u4fa1\u3059\u308b\n\u7d9a\u3044\u3066\uff0c\u5206\u985e\u5668\u306b\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u3055\u305b\u3066\u8a55\u4fa1\u3059\u308b\u95a2\u6570\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\uff0eJubatus\u306f\u30c7\u30fc\u30bf\u306e\u6295\u5165\u9806\u5e8f\u3067\u7d50\u679c\u304c\u304b\u308f\u308b\u306e\u3067\uff0c4\u8a66\u884c\u5e73\u5747\u3092\u53d6\u308b\u3053\u3068\u306b\u3057\u307e\u3059\uff0e\u6570\u5024\u5206\u985e\u3068\u30c6\u30ad\u30b9\u30c8\u5206\u985e\u3067\u66f8\u304d\u65b9\u304c\u5909\u308f\u308a\u307e\u3059\u306e\u3067\uff0c\u5206\u3051\u3066\u7d39\u4ecb\u3057\u307e\u3059\uff0e\n\n\u6570\u5024\u5206\u985e\n\u5b9f\u306fembedded-jubatus-python\u306ffit(X, y)\u95a2\u6570\u3068predict(X)\u95a2\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u305f\u3081\uff0cscikit-learn\u30e9\u30a4\u30af\u306b\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\u3053\u308c\u306a\u3089\u7c21\u5358\u306b\u4f7f\u3048\u307e\u3059\u306d ;)\ndef score(clf, X_train, X_test, y_train, y_test): \n    clf.fit(X_train, y_train)                                  # \u5b66\u7fd2\u3059\u308b\n    test_score = accuracy_score(y_test, clf.predict(X_test))   # \u4e88\u6e2c\u3057\u3066\u6b63\u89e3\u7387\u3092\u6c42\u3081\u308b\n    return test_score\n\ndef evaluate(X_train, X_test, y_train, y_test, n_trials=4):\n    jubatus_methods = ['perceptron', 'PA', 'PA1', 'PA2', 'CW', 'AROW', 'NHERD']\n    results = dict.fromkeys(jubatus_methods, 0)\n    for i in range(n_trials): \n        X_train, y_train = shuffle(X_train, y_train, random_state=42)  # \u30c7\u30fc\u30bf\u3092\u30b7\u30e3\u30c3\u30d5\u30eb\n        for method in jubatus_methods:\n            clf = linear_classifier(method=method)                     # \u7dda\u5f62\u5206\u985e\u5668\u306e\u8d77\u52d5\n            test_score = score(clf, X_train, X_test, y_train, y_test)  # \u5b66\u7fd2\u30fb\u30c6\u30b9\u30c8\u3057\u3066\u6b63\u89e3\u7387\u3092\u6c42\u3081\u308b\n            print('{0:.3f}\\t{1}'.format(test_score, method))\n            results[method] += test_score\n    results = {k: v / n_trials for k, v in results.items()}            # \u5404\u5206\u985e\u5668\u306e4\u8a66\u884c\u5e73\u5747\u306e\u6b63\u89e3\u7387\u3092\u6c42\u3081\u308b\n\n\n\u30c6\u30ad\u30b9\u30c8\u5206\u985e\nembedded-jubatus-python\u306efit(X, y)\u95a2\u6570\uff0cpredict(X)\u95a2\u6570\u306fnumpy.float64\u30bf\u30a4\u30d7\u306e\u6570\u5024\u30c7\u30fc\u30bf\u3057\u304b\u53d7\u3051\u4ed8\u3051\u307e\u305b\u3093\uff0e\u305d\u306e\u305f\u3081\uff0c\u30c6\u30ad\u30b9\u30c8\u5206\u985e\u3067\u306fjubatus\u56fa\u6709\u306e\u30c7\u30fc\u30bf\u578bDatum\u3092\u7528\u3044\u3066\u5b66\u7fd2\u3068\u30c6\u30b9\u30c8\u3092\u884c\u3044\u307e\u3059\uff0e\n\u3068\u3044\u3063\u3066\u3082\u9762\u5012\u306a\u3053\u3068\u306f\u306a\u304fscore(...)\u95a2\u6570\u3092\u66f8\u304d\u63db\u3048\u3066\u3042\u3052\u308c\u3070\uff0c\u5148\u7a0b\u306e\u6570\u5024\u5206\u985e\u3068\u540c\u3058\u30b3\u30fc\u30c9\u3092\u4f7f\u3044\u307e\u308f\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\ndef score(clf, X_train, X_test, y_train, y_test): \n    train_data = [(yi, Datum({'message': xi})) for (xi, yi) in zip(X_train, y_train)] # \u6559\u5e2b\u30c7\u30fc\u30bf\u3092\u300c\n    test_data = [Datum({'message': xi}) for xi in X_test]\n    clf.train(train_data)\n    predictions = clf.classify(test_data)\n    y_pred = [max(pred, key=lambda x:x.score).label for pred in predictions]\n    return accuracy_score(y_test, y_pred)\n\n\nscikit-learn\u3092\u7528\u3044\u305f\u6027\u80fd\u8a55\u4fa1\u30b9\u30af\u30ea\u30d7\u30c8\u4f5c\u6210\nscikit-learn\u3067\u3082\u57fa\u672c\u7684\u306bjubatus\u3068\u540c\u3058\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f7f\u3044\u307e\u308f\u3057\u307e\u3059\uff0e\n\n\u5206\u985e\u5668\u306e\u4f5c\u6210\nscikit-learn\u3067\u3082\u540c\u69d8\u306b\u30aa\u30f3\u30e9\u30a4\u30f3\u7dda\u5f62\u5206\u985e\u5668\u3092\u4f7f\u3044\u307e\u3059\uff0e\nPerceptron, PA1, PA2\u306fJubatus\u306b\u3082\u5165\u3063\u3066\u3044\u307e\u3059\u306d\uff0e\u30aa\u30f3\u30e9\u30a4\u30f3\u7dda\u5f62SVM(LSVM)\uff0c\u30aa\u30f3\u30e9\u30a4\u30f3\u30ed\u30b8\u30b9\u30c6\u30a3\u30af\u30b9\u56de\u5e30(LR)\u306f\uff0c\u78ba\u7387\u7684\u52fe\u914d\u964d\u4e0b\u6cd5\u3092\u7528\u3044\u3066\u305d\u308c\u305e\u308c\u306e\u640d\u5931\u95a2\u6570\u3092\u6700\u5c0f\u5316\u3059\u308b\u3053\u3068\u3067\u5206\u985e\u554f\u984c\u3092\u30aa\u30f3\u30e9\u30a4\u30f3\u3067\u89e3\u304d\u307e\u3059\uff0e\ndef sklearn_linear_classifier(method='Perceptron(sk)'):\n    sgd_params = {'penalty': 'l2', 'n_iter':1, 'shuffle': False, 'random_state': 42}\n    pa_params = {'C': 1.0, 'n_iter': 1, 'shuffle': False, 'random_state': 42}\n    if method == 'Perceptron(sk)':\n        return Perceptron(n_iter=1, shuffle=False, random_state=42)\n    elif method == 'LSVM(sk)':\n        return SGDClassifier(loss='hinge', **sgd_params)\n    elif method == 'LR(sk)':\n        return SGDClassifier(loss='log', **sgd_params)\n    elif method == 'PA1(sk)':\n        return PassiveAggressiveClassifier(loss='hinge', **pa_params)\n    elif method == 'PA2(sk)':\n        return PassiveAggressiveClassifier(loss='squared_hinge', **pa_params)\n    else:\n        raise NotImprementedError()\n\n\n\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u3057\u3066\u8a55\u4fa1\u3059\u308b\n\n\u6570\u5024\u5206\u985e\n\u6570\u5024\u5206\u985e\u306f\u307b\u307cjubatus\u3068\u540c\u3058\u3067\u3059\uff0e\ndef score(clf, X_train, X_test, y_train, y_test): \n    clf.fit(X_train, y_train)                                  # \u5b66\u7fd2\u3059\u308b\n    test_score = accuracy_score(y_test, clf.predict(X_test))   # \u4e88\u6e2c\u3057\u3066\u6b63\u89e3\u7387\u3092\u6c42\u3081\u308b\n    return test_score\n\ndef evaluate(X_train, X_test, y_train, y_test, n_trials=4):\n    sklearn_methods = ['Perceptron(sk)', 'PA1(sk)', 'PA2(sk)', 'LSVM(sk)', 'LR(sk)']\n    results = dict.fromkeys(sklearn_methods, 0)\n    for i in range(n_trials): \n        X_train, y_train = shuffle(X_train, y_train, random_state=42)  # \u30c7\u30fc\u30bf\u3092\u30b7\u30e3\u30c3\u30d5\u30eb\n        for method in jubatus_methods:\n            clf = sklearn_linear_classifier(method=method)                     # \u7dda\u5f62\u5206\u985e\u5668\u306e\u8d77\u52d5\n            test_score = score(clf, X_train, X_test, y_train, y_test)  # \u5b66\u7fd2\u30fb\u30c6\u30b9\u30c8\u3057\u3066\u6b63\u89e3\u7387\u3092\u6c42\u3081\u308b\n            print('{0:.3f}\\t{1}'.format(test_score, method))\n            results[method] += test_score\n    results = {k: v / n_trials for k, v in results.items()}            # \u5404\u5206\u985e\u5668\u306e4\u8a66\u884c\u5e73\u5747\u306e\u6b63\u89e3\u7387\u3092\u6c42\u3081\u308b\n\n\n\u30c6\u30ad\u30b9\u30c8\u5206\u985e\nscikit-learn \u306f\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u305d\u306e\u307e\u307e\u98df\u308f\u305b\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u306e\u3067\uff0cTfidfVectorizer\u3092\u4f7f\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u3092\u6570\u5024\u306b\u5909\u63db\u3057\u3066\u304b\u3089\u5b66\u7fd2\u3092\u884c\u3044\u307e\u3059\uff08TfidfVectorizer\u306f\u30d0\u30c3\u30c1\u51e6\u7406\u306a\u305f\u3081\uff0cscikit-learn\u306e\u65b9\u304c\u6709\u5229\u306a\u6761\u4ef6\u3068\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u304c\u2026\uff09\ndef score(clf, X_train, X_test, y_train, y_test): \n    vectorizer = TfidfVectorizer()\n    X_train = vectorizer.fit_transform(X_train)\n    X_test = vectorizer.transform(X_test)\n    clf.fit(X_train, y_train)                                  # \u5b66\u7fd2\u3059\u308b\n    test_score = accuracy_score(y_test, clf.predict(X_test))   # \u4e88\u6e2c\u3057\u3066\u6b63\u89e3\u7387\u3092\u6c42\u3081\u308b\n    return test_score\n\n\u4ee5\u4e0a\u3067\u6027\u80fd\u8a55\u4fa1\u30b9\u30af\u30ea\u30d7\u30c8\u304c\u66f8\u304d\u7d42\u308f\u308a\u307e\u3057\u305f\uff0e\n\n\u5b9f\u9a13\u7d50\u679c\n\u5404\u30c7\u30fc\u30bf\u3067\u8a55\u4fa1\u3057\u305f\u7d50\u679c\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059\uff0e\u592a\u5b57\u304c\u5404\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u306e\u30d9\u30b9\u30c8\u6027\u80fd\u3067\u3059\uff0e\nnews20\u30c7\u30fc\u30bf\u3067\u306f\u5c11\u3057\u8ca0\u3051\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\uff0c\u6570\u5024\u30c7\u30fc\u30bf\u3060\u3068\u5e38\u306bJubatus\u304c\u52dd\u3063\u3066\u3044\u307e\u3059\uff01\n\n\n\nlibrary\nclassifier\niris\ncancer\ndigits\nmnist\nnews20\n\n\n\n\njubatus\nAROW\n0.880\n0.910\n0.941\n0.891\n0.840\n\n\njubatus\nCW\n0.885\n0.904\n0.870\n0.100\n0.835\n\n\njubatus\nNHERD\n0.675\n0.356\n0.475\n0.125\n0.512\n\n\njubatus\nPA\n0.690\n0.681\n0.931\n0.870\n0.824\n\n\njubatus\nPA1\n0.690\n0.681\n0.931\n0.870\n0.824\n\n\njubatus\nPA2\n0.690\n0.681\n0.931\n0.870\n0.826\n\n\njubatus\nperceptron\n0.650\n0.751\n0.830\n0.872\n0.713\n\n\nsklearn\nLR\n0.505\n0.751\n0.886\n0.861\n0.821\n\n\nsklearn\nLSVM\n0.595\n0.694\n0.879\n0.854\n0.833\n\n\nsklearn\nPA1\n0.690\n0.682\n0.923\n0.865\n0.845\n\n\nsklearn\nPA2\n0.690\n0.682\n0.923\n0.865\n0.846\n\n\nsklearn\nPerceptron\n0.595\n0.694\n0.878\n0.854\n0.764\n\n\n\n\u6570\u5024\u30c7\u30fc\u30bf\u5206\u985e\u3060\u3068scikit-learn\u3068\u307b\u307c\u540c\u3058\u3088\u3046\u306b\u66f8\u3051\u307e\u3059\u306e\u3067\uff0c\u305c\u3072Jubatus\u3092\u4f7f\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u306d\uff01\n\u4eca\u56de\u4f7f\u3063\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u306b\u304a\u3044\u3066\u3042\u308b\u306e\u3067\uff0c\u3054\u81ea\u7531\u306b\u304a\u4f7f\u3044\u304f\u3060\u3055\u3044\uff0e\n[Jubatus Advent Calendar](http://qiita.com/advent-calendar/2016/jubatus) 22\u65e5\u76ee\u3067\u3059\uff0e\n\nPython\u3067\u6a5f\u68b0\u5b66\u7fd2\u3092\u3055\u308c\u3066\u3044\u308b\u65b9\u306b\u306f\u304a\u306a\u3058\u307f\u306e[scikit-learn](http://scikit-learn.org)\u3068Jubatus\u306e\u6027\u80fd\u6bd4\u8f03\u3092\u3084\u3063\u3066\u307f\u307e\u3059\uff0e\n\n# \u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\n\n\u4eca\u56de\u306fscikit-learn API \u3068\u3057\u3066\u516c\u958b\u3055\u308c\u3066\u3044\u308b5\u7a2e\u985e\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u5229\u7528\u3057\u307e\u3059\uff0e\n\n- iris dataset: \u307f\u306a\u3055\u3093\u3054\u5b58\u77e5\u30a2\u30e4\u30e1\u306e\u7a2e\u985e\u3092\u5224\u5b9a\u3059\u308b\u6570\u5024\u5206\u985e\u30bf\u30b9\u30af\u3067\u3059\uff0e\n- breast cancer dataset\uff1a\u4e73\u304c\u3093\u304c\u767a\u75c7\u3059\u308b\u304b\u5224\u5b9a\u3059\u308b\u6570\u5024\u5206\u985e\u30bf\u30b9\u30af\u3067\u3059\uff0e\n- digits dataset: 8x8\u30d4\u30af\u30bb\u30eb\u306e\u624b\u66f8\u304d\u6570\u5b57\u304c0-9\u306e\u3069\u308c\u306b\u8a72\u5f53\u3059\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\u6570\u5024\u5206\u985e\u30bf\u30b9\u30af\u3067\u3059\uff0e\n- MNIST dataset: 28x28\u30d4\u30af\u30bb\u30eb\u306e\u624b\u66f8\u304d\u6570\u5b57\u304c0-9\u306e\u3069\u308c\u306b\u8a72\u5f53\u3059\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\u6570\u5024\u5206\u985e\u30bf\u30b9\u30af\u3067\u3059\uff0e\n- 20newsgroups dataset: \u7d0420000\u4ef6\u306e\u6587\u66f8\u304c20\u30ab\u30c6\u30b4\u30ea\u306e\u3069\u308c\u306b\u5c5e\u3059\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\u30c6\u30ad\u30b9\u30c8\u5206\u985e\u30bf\u30b9\u30af\u3067\u3059\uff0e\n\n## \u30c7\u30fc\u30bf\u306e\u53d6\u5f97\u3068\u5b66\u7fd2\u30fb\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3078\u306e\u5206\u5272\n\nscikit-learn API \u306b\u3066\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u305f\u5f8c\uff0c\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u30922:1\u306e\u5272\u5408\u3067\u5206\u5272\u3057\u307e\u3059\uff0e\n\n```python\ndef load_dataset():\n    from sklearn.datasets import fetch_mldata\n    dataset = fetch_mldata('MNIST original')\n    X = csr_matrix(dataset.data, dtype=np.float64) \n    y = dataset.target\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n    return X_train, X_test, y_train, y_test\n```\n\n\n# Jubatus\u3092\u7528\u3044\u305f\u6027\u80fd\u8a55\u4fa1\u30b9\u30af\u30ea\u30d7\u30c8\u4f5c\u6210\n\u4eca\u56de\u306e\u8a55\u4fa1\u3067\u306f[embedded-jubatus-python](https://github.com/jubatus/embedded-jubatus-python)\u3092\u4f7f\u3044\u307e\u3059\uff0e\nembedded-jubatus-python\u306f\uff0cJubatus\u306e\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u30b5\u30fc\u30d0\u3092\u4ecb\u3055\u305a\u76f4\u3067\u53e9\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\u305d\u306e\u305f\u3081\uff0c\u624b\u5143\u306e\u30de\u30b7\u30f3\u3067\u30b5\u30af\u30c3\u3068\u6027\u80fd\u3092\u78ba\u304b\u3081\u305f\u3044\u3068\u3044\u3063\u305f\u30e9\u30a4\u30c8\u306a\u4f7f\u3044\u65b9\u306b\u975e\u5e38\u306b\u5411\u3044\u3066\u3044\u307e\u3059\uff0e\n\n## \u5206\u985e\u5668\u306e\u4f5c\u6210\n\u307e\u305a\u306fJubatus\u306e\u7dda\u5f62\u5206\u985e\u5668\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\n\u4eca\u56de\u306f\u30c6\u30ad\u30b9\u30c8\u3092\u91cd\u307f\u4ed8\u3051\u3059\u308b\u30b3\u30f3\u30d5\u30a3\u30b0\u3068\u3057\u3066\uff0c\u30b5\u30f3\u30d7\u30eb\u91cd\u307f\u306b\u306f`log_tf`\u3092\uff0c\u5927\u57df\u91cd\u307f\u306b\u306f`bm25`\u3092\u5229\u7528\u3057\u307e\u3059\uff0e`bm25`\u306b\u3064\u3044\u3066\u306f[\u3053\u3061\u3089](http://blog.jubat.us/2016/06/jubatus-092-released.html)\u306e\u30d6\u30ed\u30b0\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\uff0e\n`linear_classifier(...)`\u306fJubatus\u306e\u7dda\u5f62\u5206\u985e\u5668\u3092\u8d77\u52d5\u3059\u308b\u95a2\u6570\u3067\u3059\uff0e`perceptron`, `PA`\u3068\u305d\u306e\u4ed6\u306e\u7dda\u5f62\u5206\u985e\u5668\u306f\u30b3\u30f3\u30d5\u30a3\u30b0\u304c\u7570\u306a\u308a\u307e\u3059\u306e\u3067\u5834\u5408\u5206\u3051\u3092\u3057\u3066\u3044\u307e\u3059\uff0e\n\n```python\nimport copy\nfrom embedded_jubatus import Classifier\n\n# Default Config\nCONFIG = {\n    'method': 'perceptron',\n    'converter': {\n        'num_filter_types': {},\n        'num_filter_values': [],\n        'string_filter_types': {},\n        'string_filter_values': [],\n        'num_types': {},\n        'num_rules': [\n            {'key': '*', 'type': 'num'}\n        ],\n        'string_types': {},\n        'string_rules': [\n            {'key': '*', 'type': 'space', 'sample_weight': 'log_tf', 'global_weight': 'bm25'}\n        ]\n    },\n    'parameter': {}\n}\n\ndef linear_classifier(method='AROW', regularization_weight=1.0):\n    \"\"\" \u7dda\u5f62\u5206\u985e\u5668\u3092\u8d77\u52d5\u3059\u308b \"\"\"\n    cfg = copy.deepcopy(CONFIG)\n    cfg['method'] = method\n    if method not in ('perceptron', 'PA'):  # perceptron, PA \u4ee5\u5916\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u5fc5\u8981\n        cfg['parameter']['regularization_weight'] = regularization_weight\n    return Classifier(cfg)\n\n```\n\n\u7121\u4e8b\uff0c\u5206\u985e\u5668\u3092\u4f5c\u6210\u3059\u308b\u95a2\u6570\u304c\u66f8\u3051\u307e\u3057\u305f\uff0e\n\n## \u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u3057\u3066\u8a55\u4fa1\u3059\u308b\n\u7d9a\u3044\u3066\uff0c\u5206\u985e\u5668\u306b\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u3055\u305b\u3066\u8a55\u4fa1\u3059\u308b\u95a2\u6570\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\uff0eJubatus\u306f\u30c7\u30fc\u30bf\u306e\u6295\u5165\u9806\u5e8f\u3067\u7d50\u679c\u304c\u304b\u308f\u308b\u306e\u3067\uff0c4\u8a66\u884c\u5e73\u5747\u3092\u53d6\u308b\u3053\u3068\u306b\u3057\u307e\u3059\uff0e\u6570\u5024\u5206\u985e\u3068\u30c6\u30ad\u30b9\u30c8\u5206\u985e\u3067\u66f8\u304d\u65b9\u304c\u5909\u308f\u308a\u307e\u3059\u306e\u3067\uff0c\u5206\u3051\u3066\u7d39\u4ecb\u3057\u307e\u3059\uff0e\n\n### \u6570\u5024\u5206\u985e\n\n\u5b9f\u306fembedded-jubatus-python\u306f`fit(X, y)`\u95a2\u6570\u3068`predict(X)`\u95a2\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u305f\u3081\uff0cscikit-learn\u30e9\u30a4\u30af\u306b\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\u3053\u308c\u306a\u3089\u7c21\u5358\u306b\u4f7f\u3048\u307e\u3059\u306d ;)\n\n```python\ndef score(clf, X_train, X_test, y_train, y_test): \n    clf.fit(X_train, y_train)                                  # \u5b66\u7fd2\u3059\u308b\n    test_score = accuracy_score(y_test, clf.predict(X_test))   # \u4e88\u6e2c\u3057\u3066\u6b63\u89e3\u7387\u3092\u6c42\u3081\u308b\n    return test_score\n\ndef evaluate(X_train, X_test, y_train, y_test, n_trials=4):\n    jubatus_methods = ['perceptron', 'PA', 'PA1', 'PA2', 'CW', 'AROW', 'NHERD']\n    results = dict.fromkeys(jubatus_methods, 0)\n    for i in range(n_trials): \n        X_train, y_train = shuffle(X_train, y_train, random_state=42)  # \u30c7\u30fc\u30bf\u3092\u30b7\u30e3\u30c3\u30d5\u30eb\n        for method in jubatus_methods:\n            clf = linear_classifier(method=method)                     # \u7dda\u5f62\u5206\u985e\u5668\u306e\u8d77\u52d5\n            test_score = score(clf, X_train, X_test, y_train, y_test)  # \u5b66\u7fd2\u30fb\u30c6\u30b9\u30c8\u3057\u3066\u6b63\u89e3\u7387\u3092\u6c42\u3081\u308b\n            print('{0:.3f}\\t{1}'.format(test_score, method))\n            results[method] += test_score\n    results = {k: v / n_trials for k, v in results.items()}            # \u5404\u5206\u985e\u5668\u306e4\u8a66\u884c\u5e73\u5747\u306e\u6b63\u89e3\u7387\u3092\u6c42\u3081\u308b\n```\n\n\n### \u30c6\u30ad\u30b9\u30c8\u5206\u985e\n\nembedded-jubatus-python\u306e`fit(X, y)`\u95a2\u6570\uff0c`predict(X)`\u95a2\u6570\u306f`numpy.float64`\u30bf\u30a4\u30d7\u306e\u6570\u5024\u30c7\u30fc\u30bf\u3057\u304b\u53d7\u3051\u4ed8\u3051\u307e\u305b\u3093\uff0e\u305d\u306e\u305f\u3081\uff0c\u30c6\u30ad\u30b9\u30c8\u5206\u985e\u3067\u306fjubatus\u56fa\u6709\u306e\u30c7\u30fc\u30bf\u578b`Datum`\u3092\u7528\u3044\u3066\u5b66\u7fd2\u3068\u30c6\u30b9\u30c8\u3092\u884c\u3044\u307e\u3059\uff0e\n\u3068\u3044\u3063\u3066\u3082\u9762\u5012\u306a\u3053\u3068\u306f\u306a\u304f`score(...)`\u95a2\u6570\u3092\u66f8\u304d\u63db\u3048\u3066\u3042\u3052\u308c\u3070\uff0c\u5148\u7a0b\u306e\u6570\u5024\u5206\u985e\u3068\u540c\u3058\u30b3\u30fc\u30c9\u3092\u4f7f\u3044\u307e\u308f\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\n```python\ndef score(clf, X_train, X_test, y_train, y_test): \n    train_data = [(yi, Datum({'message': xi})) for (xi, yi) in zip(X_train, y_train)] # \u6559\u5e2b\u30c7\u30fc\u30bf\u3092\u300c\n    test_data = [Datum({'message': xi}) for xi in X_test]\n    clf.train(train_data)\n    predictions = clf.classify(test_data)\n    y_pred = [max(pred, key=lambda x:x.score).label for pred in predictions]\n    return accuracy_score(y_test, y_pred)\n```\n\n\n# scikit-learn\u3092\u7528\u3044\u305f\u6027\u80fd\u8a55\u4fa1\u30b9\u30af\u30ea\u30d7\u30c8\u4f5c\u6210\nscikit-learn\u3067\u3082\u57fa\u672c\u7684\u306bjubatus\u3068\u540c\u3058\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f7f\u3044\u307e\u308f\u3057\u307e\u3059\uff0e\n\n## \u5206\u985e\u5668\u306e\u4f5c\u6210\nscikit-learn\u3067\u3082\u540c\u69d8\u306b\u30aa\u30f3\u30e9\u30a4\u30f3\u7dda\u5f62\u5206\u985e\u5668\u3092\u4f7f\u3044\u307e\u3059\uff0e\nPerceptron, PA1, PA2\u306fJubatus\u306b\u3082\u5165\u3063\u3066\u3044\u307e\u3059\u306d\uff0e\u30aa\u30f3\u30e9\u30a4\u30f3\u7dda\u5f62SVM(LSVM)\uff0c\u30aa\u30f3\u30e9\u30a4\u30f3\u30ed\u30b8\u30b9\u30c6\u30a3\u30af\u30b9\u56de\u5e30(LR)\u306f\uff0c\u78ba\u7387\u7684\u52fe\u914d\u964d\u4e0b\u6cd5\u3092\u7528\u3044\u3066\u305d\u308c\u305e\u308c\u306e\u640d\u5931\u95a2\u6570\u3092\u6700\u5c0f\u5316\u3059\u308b\u3053\u3068\u3067\u5206\u985e\u554f\u984c\u3092\u30aa\u30f3\u30e9\u30a4\u30f3\u3067\u89e3\u304d\u307e\u3059\uff0e\n\n```python\ndef sklearn_linear_classifier(method='Perceptron(sk)'):\n    sgd_params = {'penalty': 'l2', 'n_iter':1, 'shuffle': False, 'random_state': 42}\n    pa_params = {'C': 1.0, 'n_iter': 1, 'shuffle': False, 'random_state': 42}\n    if method == 'Perceptron(sk)':\n        return Perceptron(n_iter=1, shuffle=False, random_state=42)\n    elif method == 'LSVM(sk)':\n        return SGDClassifier(loss='hinge', **sgd_params)\n    elif method == 'LR(sk)':\n        return SGDClassifier(loss='log', **sgd_params)\n    elif method == 'PA1(sk)':\n        return PassiveAggressiveClassifier(loss='hinge', **pa_params)\n    elif method == 'PA2(sk)':\n        return PassiveAggressiveClassifier(loss='squared_hinge', **pa_params)\n    else:\n        raise NotImprementedError()\n```\n\n## \u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u3057\u3066\u8a55\u4fa1\u3059\u308b\n\n### \u6570\u5024\u5206\u985e\n\u6570\u5024\u5206\u985e\u306f\u307b\u307cjubatus\u3068\u540c\u3058\u3067\u3059\uff0e\n\n```python\ndef score(clf, X_train, X_test, y_train, y_test): \n    clf.fit(X_train, y_train)                                  # \u5b66\u7fd2\u3059\u308b\n    test_score = accuracy_score(y_test, clf.predict(X_test))   # \u4e88\u6e2c\u3057\u3066\u6b63\u89e3\u7387\u3092\u6c42\u3081\u308b\n    return test_score\n\ndef evaluate(X_train, X_test, y_train, y_test, n_trials=4):\n    sklearn_methods = ['Perceptron(sk)', 'PA1(sk)', 'PA2(sk)', 'LSVM(sk)', 'LR(sk)']\n    results = dict.fromkeys(sklearn_methods, 0)\n    for i in range(n_trials): \n        X_train, y_train = shuffle(X_train, y_train, random_state=42)  # \u30c7\u30fc\u30bf\u3092\u30b7\u30e3\u30c3\u30d5\u30eb\n        for method in jubatus_methods:\n            clf = sklearn_linear_classifier(method=method)                     # \u7dda\u5f62\u5206\u985e\u5668\u306e\u8d77\u52d5\n            test_score = score(clf, X_train, X_test, y_train, y_test)  # \u5b66\u7fd2\u30fb\u30c6\u30b9\u30c8\u3057\u3066\u6b63\u89e3\u7387\u3092\u6c42\u3081\u308b\n            print('{0:.3f}\\t{1}'.format(test_score, method))\n            results[method] += test_score\n    results = {k: v / n_trials for k, v in results.items()}            # \u5404\u5206\u985e\u5668\u306e4\u8a66\u884c\u5e73\u5747\u306e\u6b63\u89e3\u7387\u3092\u6c42\u3081\u308b\n```\n\n\n### \u30c6\u30ad\u30b9\u30c8\u5206\u985e\nscikit-learn \u306f\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u305d\u306e\u307e\u307e\u98df\u308f\u305b\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u306e\u3067\uff0c`TfidfVectorizer`\u3092\u4f7f\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u3092\u6570\u5024\u306b\u5909\u63db\u3057\u3066\u304b\u3089\u5b66\u7fd2\u3092\u884c\u3044\u307e\u3059\uff08`TfidfVectorizer`\u306f\u30d0\u30c3\u30c1\u51e6\u7406\u306a\u305f\u3081\uff0cscikit-learn\u306e\u65b9\u304c\u6709\u5229\u306a\u6761\u4ef6\u3068\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u304c\u2026\uff09\n\n```python\ndef score(clf, X_train, X_test, y_train, y_test): \n    vectorizer = TfidfVectorizer()\n    X_train = vectorizer.fit_transform(X_train)\n    X_test = vectorizer.transform(X_test)\n    clf.fit(X_train, y_train)                                  # \u5b66\u7fd2\u3059\u308b\n    test_score = accuracy_score(y_test, clf.predict(X_test))   # \u4e88\u6e2c\u3057\u3066\u6b63\u89e3\u7387\u3092\u6c42\u3081\u308b\n    return test_score\n```\n\n\u4ee5\u4e0a\u3067\u6027\u80fd\u8a55\u4fa1\u30b9\u30af\u30ea\u30d7\u30c8\u304c\u66f8\u304d\u7d42\u308f\u308a\u307e\u3057\u305f\uff0e\n\n# \u5b9f\u9a13\u7d50\u679c\n\n\u5404\u30c7\u30fc\u30bf\u3067\u8a55\u4fa1\u3057\u305f\u7d50\u679c\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059\uff0e\u592a\u5b57\u304c\u5404\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u306e\u30d9\u30b9\u30c8\u6027\u80fd\u3067\u3059\uff0e\nnews20\u30c7\u30fc\u30bf\u3067\u306f\u5c11\u3057\u8ca0\u3051\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\uff0c\u6570\u5024\u30c7\u30fc\u30bf\u3060\u3068\u5e38\u306bJubatus\u304c\u52dd\u3063\u3066\u3044\u307e\u3059\uff01\n\n| library  | classifier | iris | cancer | digits | mnist | news20 |\n|:--------:|:------------:|:------------:|:------------:|:------------:|:------------:|:------------:|\n| jubatus  | AROW | 0.880  | **0.910**  | **0.941**  | **0.891**  | 0.840 |\n| jubatus  | CW | **0.885**  | 0.904  | 0.870  | 0.100  | 0.835 |\n| jubatus  | NHERD | 0.675  | 0.356  | 0.475  | 0.125  | 0.512 |\n| jubatus  | PA | 0.690  | 0.681  | 0.931  | 0.870  | 0.824 |\n| jubatus  | PA1 | 0.690  | 0.681  | 0.931  | 0.870  | 0.824 |\n| jubatus  | PA2 | 0.690  | 0.681  | 0.931  | 0.870  | 0.826 |\n| jubatus  | perceptron | 0.650  | 0.751  | 0.830  | 0.872  | 0.713 |\n| sklearn  | LR  | 0.505  | 0.751  | 0.886  | 0.861  | 0.821 |\n| sklearn  | LSVM  | 0.595  | 0.694  | 0.879  | 0.854  | 0.833 |\n| sklearn  | PA1  | 0.690  | 0.682  | 0.923  | 0.865  | 0.845 |\n| sklearn  | PA2  | 0.690  | 0.682  | 0.923  | 0.865  | **0.846** |\n| sklearn  | Perceptron | 0.595  | 0.694  | 0.878  | 0.854  | 0.764 |\n\n\u6570\u5024\u30c7\u30fc\u30bf\u5206\u985e\u3060\u3068scikit-learn\u3068\u307b\u307c\u540c\u3058\u3088\u3046\u306b\u66f8\u3051\u307e\u3059\u306e\u3067\uff0c\u305c\u3072Jubatus\u3092\u4f7f\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u306d\uff01\n\n\u4eca\u56de\u4f7f\u3063\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f[\u3053\u3061\u3089](https://github.com/shiodat/jubatus-advent-calendar/tree/master/performance)\u306b\u304a\u3044\u3066\u3042\u308b\u306e\u3067\uff0c\u3054\u81ea\u7531\u306b\u304a\u4f7f\u3044\u304f\u3060\u3055\u3044\uff0e\n\n\n", "tags": ["jubatus", "\u6a5f\u68b0\u5b66\u7fd2", "MachineLearning"]}