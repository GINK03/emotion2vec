{"context": " More than 1 year has passed since last update.=================================================\n\u53c2\u7167: apache \u306e\u30e6\u30fc\u30b6\u8a8d\u8a3c\u3092 Google Apps \u30a2\u30ab\u30a6\u30f3\u30c8\u3067\u884c\u3046 Apache::Authn::GoogleApps - nazonoDiary\n\nRequirements\n\nperl\nApache\nGoogle\u30a2\u30ab\u30a6\u30f3\u30c8\n\n\nInstallation\n\n\u4f9d\u5b58\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n  yum install mod_perl perl-libwww-perl perl-IO-Socket-SSL\n\n\nperl\u30e2\u30b8\u30e5\u30fc\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3059\u308b\n\n  mkdir -p /usr/lib64/perl5/Apache/Authn/\n  vim /usr/lib64/perl5/Apache/Authn/GoogleApps.pm\n\n  package Apache::Authn::GoogleApps;\n  =head1 NAME\n\n  Apache::Authn::GoogleApps - Apache Auth module by Google Apps Account\n\n  =head1 SYNOPIS\n\n  \u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30d4\u30fc\n   /usr/lib/perl5/Apache/Authn/GoogleApps.pm\n\n  httpd.conf \u306b\n\n    PerlLoadModule Apache::Authn::GoogleApps\n    <Location /svn>\n       AuthType Basic\n       AuthName GoogleAccount\n       Require valid-user\n\n       # \u30e6\u30fc\u30b6\u540d\u306b\u81ea\u52d5\u3067\u88dc\u5b8c\u3059\u308b\u30c9\u30e1\u30a4\u30f3\u3002\n       GoogleAppsDomain example.com\n       # \u81ea\u52d5\u3067\u88dc\u5b8c\u3059\u308b\u30c9\u30e1\u30a4\u30f3\u3092\u304f\u3063\u3064\u3051\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3002Always \u5e38\u306b None \u4ed8\u3051\u306a\u3044\n       # Auto \u30e6\u30fc\u30b6\u540d\u306b @ \u304c\u5165\u3063\u3066\u3044\u306a\u3051\u308c\u3070\u304f\u3063\u3064\u3051\u308b\uff08hoge \u3068\u5165\u308c\u305f\u3089 hoge@example.com \u306b\u3057\u3066\u8a8d\u8a3c\uff09\n       GoogleAppsDomainAppend Always\n       # \u8a8d\u8a3c\u306b\u6210\u529f\u3057\u305f\u3089\u305d\u306e\u7d50\u679c\u3092\u30b5\u30fc\u30d0\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u3066\u3044\u308b\u6642\u9593\uff08\u79d2\u6570\uff09\n       # \u30ad\u30e3\u30c3\u30b7\u30e5\u3059\u308b\u3051\u3069\u30b9\u30ec\u30c3\u30c9\u3054\u3068\u306b\u5225\u3063\u307d\u3044\uff08ARP::Pool\uff09\n       GoogleAppsCacheCredsMax 3600\n\n       # \u30cf\u30f3\u30c9\u30e9\u3092\u4f7f\u3046\u5ba3\u8a00\n       PerlAuthenHandler Apache::Authn::GoogleApps::handler\n    </Location>\n\n    and reload your apache\n\n  =head1 Git URL\n    https://github.com/nazoking/perl-apache-authn-googleapps\n\n  =head1 AUTHOR\n\n    nazoking \"< nazoking@gmail.com >\"\n\n  =cut\n\n  use strict;\n  use warnings FATAL => 'all', NONFATAL => 'redefine';\n\n  use LWP::UserAgent;\n  use Apache2::Module;\n  use Apache2::Access;\n  use Apache2::ServerRec qw();\n  use Apache2::RequestRec qw();\n  use Apache2::RequestUtil qw();\n  use Apache2::Const qw(:common :override :cmd_how);\n  use APR::Pool ();\n  use APR::Table ();\n\n  my @directives = (\n    {\n      name => 'GoogleAppsDomain',\n      req_override => OR_AUTHCFG, # allow overrides true\n      args_how => TAKE1,  # One argument only (full description)\n      errmsg => 'set your google apps domain ex \"example.com\"',\n    },\n    {\n      name => 'GoogleAppsDomainAppend',\n      req_override => OR_AUTHCFG, # allow overrides true\n      args_how => TAKE1,  # One argument only (full description)\n      errmsg => 'value select None|Always|Auto',\n    },\n    {\n      name => 'GoogleAppsCacheCredsMax',\n      req_override => OR_AUTHCFG, # allow overrides true\n      args_how => TAKE1,  # One argument only (full description)\n      errmsg => 'cache time seconds. ex 3600',\n    }\n  );\n  Apache2::Module::add(__PACKAGE__, \\@directives);\n\n  sub GoogleAppsDomain{ set_val(\"GoogleAppsDomain\", @_); }\n  sub GoogleAppsDomainAppend{ set_val(\"GoogleAppsDomainAppend\", @_); }\n  sub GoogleAppsCacheCredsMax {\n    my ($self, $parms, $arg) = @_;\n    if ($arg) {\n      $self->{GoogleAppsCachePool} = APR::Pool->new;\n      $self->{GoogleAppsCacheCreds} = APR::Table::make($self->{GoogleAppsCachePool}, $arg);\n      $self->{GoogleAppsCacheCredsMax} = $arg;\n    }\n  }\n\n  sub set_val {\n    my ($key, $self, $parms, $arg) = @_;\n    $self->{$key} = $arg;\n  }\n\n  sub gapp_login{\n    my $usr = shift;\n    my $pass = shift;\n    my $r = shift;\n    my $lwp_object = LWP::UserAgent->new;\n    my $url = 'https://www.google.com/accounts/ClientLogin';\n\n    my $response = $lwp_object->post( $url, [\n      'accountType' => 'HOSTED',\n      'Email' => $usr, 'Passwd' => $pass,\n      'service' => 'apps'\n    ] );\n    return $response->is_success;\n  }\n\n  sub cache_login_check{\n    my ( $usr , $pass, $cfg, $r ) = @_;\n    return 0 unless $cfg->{GoogleAppsCacheCreds};\n    my $c = $cfg->{GoogleAppsCacheCreds}->get($usr);\n    return 0 unless $c;\n    my ($ctime,$cpass) = split(':',$c,2);\n    cache_reflesh( $cfg, $r ) if $ctime < time();\n    return $cpass eq $pass;\n  }\n\n  sub cache_reflesh{\n    my $cfg = shift;\n    my $r = shift;\n    foreach my $key ( keys %{$cfg->{GoogleAppsCacheCreds}} ){\n      my ( $ct, $cp ) = split(':',$cfg->{GoogleAppsCacheCreds}->get($key),2);\n      if( $ct < time() ){\n        $cfg->{GoogleAppsCacheCreds}->unset( $key );\n      }\n    }\n  }\n\n  sub cache_login_push{\n    my ( $usr , $pass, $cfg, $r ) = @_;\n    return 0 unless $cfg->{GoogleAppsCacheCreds};\n    cache_reflesh( $cfg, $r );\n    $cfg->{GoogleAppsCacheCreds}->set( $usr, ''.(time()+$cfg->{GoogleAppsCacheCredsMax}).':'.$pass );\n    return 1;\n  }\n\n  sub handler {\n    my $r = shift;\n    my ( $st,$pw ) = $r->get_basic_auth_pw();\n    my $cfg = Apache2::Module::get_config(__PACKAGE__, $r->server, $r->per_dir_config);\n    my $usr = $r->user;\n\n    # Google Apps\u3092\u7d4c\u7531\u3057\u306a\u3044\u8a8d\u8a3c\n    if( defined $usr && defined $pw ){\n      if ($usr eq 'test' and $pw eq 'test') {\n        cache_login_push( $usr, $pw, $cfg, $r );\n        return Apache2::Const::OK;\n      }\n    }\n\n    return $st unless $st == Apache2::Const::OK;\n    $usr .= '@'.$cfg->{GoogleAppsDomain} if ( $cfg->{GoogleAppsDomainAppend} eq 'Auto' && $usr !~ /@/ ) || $cfg->{GoogleAppsDomainAppend} eq 'Always';\n\n    if( defined $usr && defined $pw ){\n      if( cache_login_check( $usr, $pw, $cfg, $r ) ){\n        return Apache2::Const::OK;\n      }elsif( gapp_login( $usr, $pw, $r ) ){\n        cache_login_push( $usr, $pw, $cfg, $r );\n        return Apache2::Const::OK;\n      }\n    }\n    $r->note_auth_failure();\n    return AUTH_REQUIRED;\n  }\n\n  1;\n\n\nApache\u306e\u8a2d\u5b9a\n\n  ProxyPass         /         http://example.com:8080/\n  ProxyPass         /jenkins  http://example.com:8080/\n  ProxyPassReverse  /         http://example.com:8080/\n  ProxyPassReverse  /jenkins  http://example.com:8080/\n  ProxyRequests     Off\n\n  PerlLoadModule Apache::Authn::GoogleApps\n    <Proxy *>\n       AuthType Basic\n       AuthName GoogleAccount\n       Require valid-user\n\n       # \u30e6\u30fc\u30b6\u540d\u306b\u81ea\u52d5\u3067\u88dc\u5b8c\u3059\u308b\u30c9\u30e1\u30a4\u30f3\u3002\n       GoogleAppsDomain example.com\n       # \u81ea\u52d5\u3067\u88dc\u5b8c\u3059\u308b\u30c9\u30e1\u30a4\u30f3\u3092\u304f\u3063\u3064\u3051\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3002Always \u5e38\u306b None \u4ed8\u3051\u306a\u3044\n       # Auto \u30e6\u30fc\u30b6\u540d\u306b @ \u304c\u5165\u3063\u3066\u3044\u306a\u3051\u308c\u3070\u304f\u3063\u3064\u3051\u308b\uff08hoge \u3068\u5165\u308c\u305f\u3089 hoge@example.com \u306b\u3057\u3066\u8a8d\u8a3c\uff09\n       GoogleAppsDomainAppend Auto\n       # \u8a8d\u8a3c\u306b\u6210\u529f\u3057\u305f\u3089\u305d\u306e\u7d50\u679c\u3092\u30b5\u30fc\u30d0\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u3066\u3044\u308b\u6642\u9593\uff08\u79d2\u6570\uff09\n       # \u30ad\u30e3\u30c3\u30b7\u30e5\u3059\u308b\u3051\u3069\u30b9\u30ec\u30c3\u30c9\u3054\u3068\u306b\u5225\u3063\u307d\u3044\uff08ARP::Pool\uff09\n       GoogleAppsCacheCredsMax 3600\n\n       # \u30cf\u30f3\u30c9\u30e9\u3092\u4f7f\u3046\u5ba3\u8a00\n       PerlAuthenHandler Apache::Authn::GoogleApps::handler\n    </Proxy>\n\n\n\u4f7f\u3048\u306a\u304f\u306a\u308b\u304b\u3082...\n\u65e2\u306bDeprecated\u306aClientLogin API\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u30022014/10\u73fe\u5728API\u524a\u9664\u306f\u307e\u3060\u306a\u3055\u305d\u3046\u3060\u3051\u3069\u30011\u5e74\u5f8c\u3069\u3046\u306a\u3063\u3066\u3044\u308b\u304b\u5206\u304b\u3089\u306a\u3044\u306e\u3067\u3061\u3083\u3093\u3068OAuth 2.0\u306b\u79fb\u884c\u3057\u307e\u3057\u3087\u3046\u3002\n\nAnsible\nplaybook\u306b\u3057\u3066\u304a\u304d\u307e\u3057\u305f\nhttps://github.com/shufo/ansible-apache-googleapps-auth\n=================================================\n\n\u53c2\u7167: [apache \u306e\u30e6\u30fc\u30b6\u8a8d\u8a3c\u3092 Google Apps \u30a2\u30ab\u30a6\u30f3\u30c8\u3067\u884c\u3046 Apache::Authn::GoogleApps - nazonoDiary](http://d.hatena.ne.jp/nazoking/20101126/1290697990)\n\n## Requirements\n\n- perl\n- Apache\n- Google\u30a2\u30ab\u30a6\u30f3\u30c8\n\n## Installation\n\n- \u4f9d\u5b58\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n  ```bash\n  yum install mod_perl perl-libwww-perl perl-IO-Socket-SSL\n  ```\n\n- perl\u30e2\u30b8\u30e5\u30fc\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3059\u308b\n\n  ```bash\n  mkdir -p /usr/lib64/perl5/Apache/Authn/\n  vim /usr/lib64/perl5/Apache/Authn/GoogleApps.pm\n  ```\n\n  ```perl\n  package Apache::Authn::GoogleApps;\n  =head1 NAME\n  \n  Apache::Authn::GoogleApps - Apache Auth module by Google Apps Account\n  \n  =head1 SYNOPIS\n  \n  \u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30d4\u30fc\n   /usr/lib/perl5/Apache/Authn/GoogleApps.pm\n  \n  httpd.conf \u306b\n  \n    PerlLoadModule Apache::Authn::GoogleApps\n    <Location /svn>\n       AuthType Basic\n       AuthName GoogleAccount\n       Require valid-user\n  \n       # \u30e6\u30fc\u30b6\u540d\u306b\u81ea\u52d5\u3067\u88dc\u5b8c\u3059\u308b\u30c9\u30e1\u30a4\u30f3\u3002\n       GoogleAppsDomain example.com\n       # \u81ea\u52d5\u3067\u88dc\u5b8c\u3059\u308b\u30c9\u30e1\u30a4\u30f3\u3092\u304f\u3063\u3064\u3051\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3002Always \u5e38\u306b None \u4ed8\u3051\u306a\u3044\n       # Auto \u30e6\u30fc\u30b6\u540d\u306b @ \u304c\u5165\u3063\u3066\u3044\u306a\u3051\u308c\u3070\u304f\u3063\u3064\u3051\u308b\uff08hoge \u3068\u5165\u308c\u305f\u3089 hoge@example.com \u306b\u3057\u3066\u8a8d\u8a3c\uff09\n       GoogleAppsDomainAppend Always\n       # \u8a8d\u8a3c\u306b\u6210\u529f\u3057\u305f\u3089\u305d\u306e\u7d50\u679c\u3092\u30b5\u30fc\u30d0\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u3066\u3044\u308b\u6642\u9593\uff08\u79d2\u6570\uff09\n       # \u30ad\u30e3\u30c3\u30b7\u30e5\u3059\u308b\u3051\u3069\u30b9\u30ec\u30c3\u30c9\u3054\u3068\u306b\u5225\u3063\u307d\u3044\uff08ARP::Pool\uff09\n       GoogleAppsCacheCredsMax 3600\n  \n       # \u30cf\u30f3\u30c9\u30e9\u3092\u4f7f\u3046\u5ba3\u8a00\n       PerlAuthenHandler Apache::Authn::GoogleApps::handler\n    </Location>\n  \n    and reload your apache\n  \n  =head1 Git URL\n    https://github.com/nazoking/perl-apache-authn-googleapps\n  \n  =head1 AUTHOR\n  \n    nazoking \"< nazoking@gmail.com >\"\n  \n  =cut\n  \n  use strict;\n  use warnings FATAL => 'all', NONFATAL => 'redefine';\n  \n  use LWP::UserAgent;\n  use Apache2::Module;\n  use Apache2::Access;\n  use Apache2::ServerRec qw();\n  use Apache2::RequestRec qw();\n  use Apache2::RequestUtil qw();\n  use Apache2::Const qw(:common :override :cmd_how);\n  use APR::Pool ();\n  use APR::Table ();\n  \n  my @directives = (\n    {\n      name => 'GoogleAppsDomain',\n      req_override => OR_AUTHCFG, # allow overrides true\n      args_how => TAKE1,  # One argument only (full description)\n      errmsg => 'set your google apps domain ex \"example.com\"',\n    },\n    {\n      name => 'GoogleAppsDomainAppend',\n      req_override => OR_AUTHCFG, # allow overrides true\n      args_how => TAKE1,  # One argument only (full description)\n      errmsg => 'value select None|Always|Auto',\n    },\n    {\n      name => 'GoogleAppsCacheCredsMax',\n      req_override => OR_AUTHCFG, # allow overrides true\n      args_how => TAKE1,  # One argument only (full description)\n      errmsg => 'cache time seconds. ex 3600',\n    }\n  );\n  Apache2::Module::add(__PACKAGE__, \\@directives);\n  \n  sub GoogleAppsDomain{ set_val(\"GoogleAppsDomain\", @_); }\n  sub GoogleAppsDomainAppend{ set_val(\"GoogleAppsDomainAppend\", @_); }\n  sub GoogleAppsCacheCredsMax {\n    my ($self, $parms, $arg) = @_;\n    if ($arg) {\n      $self->{GoogleAppsCachePool} = APR::Pool->new;\n      $self->{GoogleAppsCacheCreds} = APR::Table::make($self->{GoogleAppsCachePool}, $arg);\n      $self->{GoogleAppsCacheCredsMax} = $arg;\n    }\n  }\n  \n  sub set_val {\n    my ($key, $self, $parms, $arg) = @_;\n    $self->{$key} = $arg;\n  }\n  \n  sub gapp_login{\n    my $usr = shift;\n    my $pass = shift;\n    my $r = shift;\n    my $lwp_object = LWP::UserAgent->new;\n    my $url = 'https://www.google.com/accounts/ClientLogin';\n  \n    my $response = $lwp_object->post( $url, [\n      'accountType' => 'HOSTED',\n      'Email' => $usr, 'Passwd' => $pass,\n      'service' => 'apps'\n    ] );\n    return $response->is_success;\n  }\n  \n  sub cache_login_check{\n    my ( $usr , $pass, $cfg, $r ) = @_;\n    return 0 unless $cfg->{GoogleAppsCacheCreds};\n    my $c = $cfg->{GoogleAppsCacheCreds}->get($usr);\n    return 0 unless $c;\n    my ($ctime,$cpass) = split(':',$c,2);\n    cache_reflesh( $cfg, $r ) if $ctime < time();\n    return $cpass eq $pass;\n  }\n  \n  sub cache_reflesh{\n    my $cfg = shift;\n    my $r = shift;\n    foreach my $key ( keys %{$cfg->{GoogleAppsCacheCreds}} ){\n      my ( $ct, $cp ) = split(':',$cfg->{GoogleAppsCacheCreds}->get($key),2);\n      if( $ct < time() ){\n        $cfg->{GoogleAppsCacheCreds}->unset( $key );\n      }\n    }\n  }\n  \n  sub cache_login_push{\n    my ( $usr , $pass, $cfg, $r ) = @_;\n    return 0 unless $cfg->{GoogleAppsCacheCreds};\n    cache_reflesh( $cfg, $r );\n    $cfg->{GoogleAppsCacheCreds}->set( $usr, ''.(time()+$cfg->{GoogleAppsCacheCredsMax}).':'.$pass );\n    return 1;\n  }\n  \n  sub handler {\n    my $r = shift;\n    my ( $st,$pw ) = $r->get_basic_auth_pw();\n    my $cfg = Apache2::Module::get_config(__PACKAGE__, $r->server, $r->per_dir_config);\n    my $usr = $r->user;\n    \n    # Google Apps\u3092\u7d4c\u7531\u3057\u306a\u3044\u8a8d\u8a3c\n    if( defined $usr && defined $pw ){\n      if ($usr eq 'test' and $pw eq 'test') {\n        cache_login_push( $usr, $pw, $cfg, $r );\n        return Apache2::Const::OK;\n      }\n    }\n  \n    return $st unless $st == Apache2::Const::OK;\n    $usr .= '@'.$cfg->{GoogleAppsDomain} if ( $cfg->{GoogleAppsDomainAppend} eq 'Auto' && $usr !~ /@/ ) || $cfg->{GoogleAppsDomainAppend} eq 'Always';\n  \n    if( defined $usr && defined $pw ){\n      if( cache_login_check( $usr, $pw, $cfg, $r ) ){\n        return Apache2::Const::OK;\n      }elsif( gapp_login( $usr, $pw, $r ) ){\n        cache_login_push( $usr, $pw, $cfg, $r );\n        return Apache2::Const::OK;\n      }\n    }\n    $r->note_auth_failure();\n    return AUTH_REQUIRED;\n  }\n  \n  1;\n```\n\n- Apache\u306e\u8a2d\u5b9a\n\n  ```conf\n  ProxyPass         /         http://example.com:8080/\n  ProxyPass         /jenkins  http://example.com:8080/\n  ProxyPassReverse  /         http://example.com:8080/\n  ProxyPassReverse  /jenkins  http://example.com:8080/\n  ProxyRequests     Off\n\n  PerlLoadModule Apache::Authn::GoogleApps\n    <Proxy *>\n       AuthType Basic\n       AuthName GoogleAccount\n       Require valid-user\n  \n       # \u30e6\u30fc\u30b6\u540d\u306b\u81ea\u52d5\u3067\u88dc\u5b8c\u3059\u308b\u30c9\u30e1\u30a4\u30f3\u3002\n       GoogleAppsDomain example.com\n       # \u81ea\u52d5\u3067\u88dc\u5b8c\u3059\u308b\u30c9\u30e1\u30a4\u30f3\u3092\u304f\u3063\u3064\u3051\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3002Always \u5e38\u306b None \u4ed8\u3051\u306a\u3044\n       # Auto \u30e6\u30fc\u30b6\u540d\u306b @ \u304c\u5165\u3063\u3066\u3044\u306a\u3051\u308c\u3070\u304f\u3063\u3064\u3051\u308b\uff08hoge \u3068\u5165\u308c\u305f\u3089 hoge@example.com \u306b\u3057\u3066\u8a8d\u8a3c\uff09\n       GoogleAppsDomainAppend Auto\n       # \u8a8d\u8a3c\u306b\u6210\u529f\u3057\u305f\u3089\u305d\u306e\u7d50\u679c\u3092\u30b5\u30fc\u30d0\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u3066\u3044\u308b\u6642\u9593\uff08\u79d2\u6570\uff09\n       # \u30ad\u30e3\u30c3\u30b7\u30e5\u3059\u308b\u3051\u3069\u30b9\u30ec\u30c3\u30c9\u3054\u3068\u306b\u5225\u3063\u307d\u3044\uff08ARP::Pool\uff09\n       GoogleAppsCacheCredsMax 3600\n  \n       # \u30cf\u30f3\u30c9\u30e9\u3092\u4f7f\u3046\u5ba3\u8a00\n       PerlAuthenHandler Apache::Authn::GoogleApps::handler\n    </Proxy>\n```\n\n### \u4f7f\u3048\u306a\u304f\u306a\u308b\u304b\u3082...\n\n\u65e2\u306bDeprecated\u306a[ClientLogin API](https://developers.google.com/accounts/docs/AuthForInstalledApps?hl=ja)\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u30022014/10\u73fe\u5728API\u524a\u9664\u306f\u307e\u3060\u306a\u3055\u305d\u3046\u3060\u3051\u3069\u30011\u5e74\u5f8c\u3069\u3046\u306a\u3063\u3066\u3044\u308b\u304b\u5206\u304b\u3089\u306a\u3044\u306e\u3067\u3061\u3083\u3093\u3068OAuth 2.0\u306b\u79fb\u884c\u3057\u307e\u3057\u3087\u3046\u3002\n\n## Ansible\n\nplaybook\u306b\u3057\u3066\u304a\u304d\u307e\u3057\u305f\nhttps://github.com/shufo/ansible-apache-googleapps-auth\n", "tags": ["Apache", "authentication", "GoogleApps"]}