{"tags": ["Unity3D", "VR", "LeapMotion", "GestureRecognizer"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002\npatternTest\nusing UnityEngine;\nusing System.Collections.Generic;\nusing Leap;\n\npublic class patternTest_2 : MonoBehaviour {\n\n    #region [Leap motion parameters]\n    HandModel   handModel;\n    Hand        leapHand;\n    FingerModel indexFingerModel;\n    #endregion\n\n    #region [Public Parameters]\n    public int      positionCacheNum = 180;    // \u683c\u7d0d\u3059\u308b\u6700\u5c0f\u70b9\u6570\uff0860 fps \u306a\u3089 180 \u3067 3 sec \u5206\u4fdd\u5b58\uff09\n    public Vector3  indexTip;\n    public Vector3  thumbTip;\n    #endregion\n\n    #region [Velocity Parameters]\n    public float velocity;  //velocity of the finger\n    Vector3 currPosition;   //finger's current frame position\n    Vector3 prePosition;    //finger's previous frame position\n    #endregion\n\n    #region [Private Parameters]\n    private List<Vector3>   positions_              = new List<Vector3>();  //recording parameter\n    private const float     THUMB_TRIGGER_DISTANCE  = 0.04f;                //Minimum distance to trigger the test\n    private const float     MIN_CONFIDENCE          = 0.2f;                 //Minimum value of handmodel confidence\n    #endregion\n\n    // Update is called once per frame\n    void Update () {\n        //define LeapHands & Fingers\n        handModel = GetComponent<HandModel> ();\n        leapHand = handModel.GetLeapHand ();\n        //get indexfinger\n        indexFingerModel = handModel.fingers [1];\n        //get indexfingerTip position\n        indexTip = indexFingerModel.GetTipPosition ();  \n        //get thumbTip position\n        thumbTip = leapHand.Fingers [0].TipPosition.ToUnityScaled ();\n\n        //calculating velocity of finger\n        currPosition = thumbTip;\n        velocity = (currPosition - prePosition).magnitude / Time.deltaTime;\n        prePosition = thumbTip;\n\n        //Trigger test (true: thumbTip got close to rest of fingers)\n        bool patternTrigger = false;\n        for (int i = 1; i<5 && !patternTrigger; ++i) {\n            for(int j = 0; j<4 && !patternTrigger; ++j){\n                Finger.FingerJoint joint = (Finger.FingerJoint)(j);\n                Vector3 difference = leapHand.Fingers[i].JointPosition(joint).ToUnityScaled() - thumbTip;\n                if(difference.magnitude < THUMB_TRIGGER_DISTANCE \n                   && leapHand.Confidence > MIN_CONFIDENCE){\n                    //Trigger is ON\n                    patternTrigger = true;\n                }\n            }\n        }\n        //Particle system On/Off\n        switch (patternTrigger) {\n        case(true): \n            //Start recording finger position\n            AddPositionCache (indexTip);\n            transform.FindChild(\"particle\").gameObject.SetActive(true);\n            break;\n        case(false):\n            transform.FindChild(\"particle\").gameObject.SetActive(false);\n            break;\n        }\n\n        if (DetectFingerGesture ()) {\n\n            //Detected!\n        }\n\n    }\n\n    //Add finger position\n    void AddPositionCache(Vector3 position)\n    {\n        positions_.Insert(0, position);\n        if (positions_.Count > positionCacheNum) {\n            positions_.RemoveAt(positions_.Count - 1);\n        }\n    }\n\n    //Detecting finger Gesture (Up||Down)\n    bool DetectFingerGesture ()\n    {\n        var positionSum = Vector3.zero;\n\n        for (int i = 0; i<positions_.Count; i++) {\n            positionSum += positions_ [i];\n            //Distance between First and Last Point\n            float disBtwFirstLast = Vector3.Distance (positions_ [i], positions_ [0]);\n            //X-coordinate distance change of the finger\n            float xPositionCheck = Mathf.Abs (positions_ [i].x - positions_ [0].x);\n            //Y-coordinate distance change of the finger\n            float yPositionCheck = (positions_ [i].y - positions_ [0].y);\n\n            //Gesture trigger checking point\n            if (disBtwFirstLast > 3.0f && xPositionCheck < 0.05f && velocity>0.8f) {\n\n                if (yPositionCheck > 0) {\n                    //Downward Motion\n                    Debug.Log (\"Down Motion PASS\");\n                    Reset ();\n                }else if (yPositionCheck < 0) {\n                    //Upward Motion\n                    Debug.Log (\"Up Motion PASS\");\n                    Reset ();\n                }\n                return true;\n\n            }\n        }\n        return false;\n    }\n\n    //Reseting position records\n    void Reset ()\n    {\n        positions_.Clear();\n    }\n}\n\n\n\n\n\n\npointerFollow\nusing UnityEngine;\nusing System.Collections;\nusing Leap;\n\n\npublic class mouseFollow : MonoBehaviour {\n\n    void Start(){\n        gameObject.SetActive (false);\n    }\n\n    // Update is called once per frame\n    void Update () {\n            transform.position = GetComponentInParent<patternTest> ().indexTip;\n            transform.position = GetComponentInParent<patternTest_2> ().indexTip;\n\n    }\n}\n\n\n\n\nYoutube video: https://youtu.be/9jlVvRYOMvo\n```csharp:patternTest\nusing UnityEngine;\nusing System.Collections.Generic;\nusing Leap;\n\npublic class patternTest_2 : MonoBehaviour {\n\n\t#region [Leap motion parameters]\n\tHandModel \thandModel;\n\tHand \t\tleapHand;\n\tFingerModel indexFingerModel;\n\t#endregion\n\t\n\t#region [Public Parameters]\n\tpublic int   \tpositionCacheNum = 180;    // \u683c\u7d0d\u3059\u308b\u6700\u5c0f\u70b9\u6570\uff0860 fps \u306a\u3089 180 \u3067 3 sec \u5206\u4fdd\u5b58\uff09\n\tpublic Vector3 \tindexTip;\n\tpublic Vector3 \tthumbTip;\n\t#endregion\n\n\t#region [Velocity Parameters]\n\tpublic float velocity;\t//velocity of the finger\n\tVector3 currPosition;\t//finger's current frame position\n\tVector3 prePosition;\t//finger's previous frame position\n\t#endregion\n\t\n\t#region [Private Parameters]\n\tprivate List<Vector3> \tpositions_    \t\t\t= new List<Vector3>();\t//recording parameter\n\tprivate const float \tTHUMB_TRIGGER_DISTANCE \t= 0.04f;\t\t\t\t//Minimum distance to trigger the test\n\tprivate const float \tMIN_CONFIDENCE \t\t\t= 0.2f;\t\t\t\t\t//Minimum value of handmodel confidence\n\t#endregion\n\t\n\t// Update is called once per frame\n\tvoid Update () {\n\t\t//define LeapHands & Fingers\n\t\thandModel = GetComponent<HandModel> ();\n\t\tleapHand = handModel.GetLeapHand ();\n\t\t//get indexfinger\n\t\tindexFingerModel = handModel.fingers [1];\n\t\t//get indexfingerTip position\n\t\tindexTip = indexFingerModel.GetTipPosition ();\t\n\t\t//get thumbTip position\n\t\tthumbTip = leapHand.Fingers [0].TipPosition.ToUnityScaled ();\n\n\t\t//calculating velocity of finger\n\t\tcurrPosition = thumbTip;\n\t\tvelocity = (currPosition - prePosition).magnitude / Time.deltaTime;\n\t\tprePosition = thumbTip;\n\t\n\t\t//Trigger test (true: thumbTip got close to rest of fingers)\n\t\tbool patternTrigger = false;\n\t\tfor (int i = 1; i<5 && !patternTrigger; ++i) {\n\t\t\tfor(int j = 0; j<4 && !patternTrigger; ++j){\n\t\t\t\tFinger.FingerJoint joint = (Finger.FingerJoint)(j);\n\t\t\t\tVector3 difference = leapHand.Fingers[i].JointPosition(joint).ToUnityScaled() - thumbTip;\n\t\t\t\tif(difference.magnitude < THUMB_TRIGGER_DISTANCE \n\t\t\t\t   && leapHand.Confidence > MIN_CONFIDENCE){\n\t\t\t\t\t//Trigger is ON\n\t\t\t\t\tpatternTrigger = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//Particle system On/Off\n\t\tswitch (patternTrigger) {\n\t\tcase(true):\t\n\t\t\t//Start recording finger position\n\t\t\tAddPositionCache (indexTip);\n\t\t\ttransform.FindChild(\"particle\").gameObject.SetActive(true);\n\t\t\tbreak;\n\t\tcase(false):\n\t\t\ttransform.FindChild(\"particle\").gameObject.SetActive(false);\n\t\t\tbreak;\n\t\t}\n\n\t\tif (DetectFingerGesture ()) {\n\n\t\t\t//Detected!\n\t\t}\n\n\t}\n\n\t//Add finger position\n\tvoid AddPositionCache(Vector3 position)\n\t{\n\t\tpositions_.Insert(0, position);\n\t\tif (positions_.Count > positionCacheNum) {\n\t\t\tpositions_.RemoveAt(positions_.Count - 1);\n\t\t}\n\t}\n\n\t//Detecting finger Gesture (Up||Down)\n\tbool DetectFingerGesture ()\n\t{\n\t\tvar positionSum = Vector3.zero;\n\n\t\tfor (int i = 0; i<positions_.Count; i++) {\n\t\t\tpositionSum += positions_ [i];\n\t\t\t//Distance between First and Last Point\n\t\t\tfloat disBtwFirstLast = Vector3.Distance (positions_ [i], positions_ [0]);\n\t\t\t//X-coordinate distance change of the finger\n\t\t\tfloat xPositionCheck = Mathf.Abs (positions_ [i].x - positions_ [0].x);\n\t\t\t//Y-coordinate distance change of the finger\n\t\t\tfloat yPositionCheck = (positions_ [i].y - positions_ [0].y);\n\n\t\t\t//Gesture trigger checking point\n\t\t\tif (disBtwFirstLast > 3.0f && xPositionCheck < 0.05f && velocity>0.8f) {\n\n\t\t\t\tif (yPositionCheck > 0) {\n\t\t\t\t\t//Downward Motion\n\t\t\t\t\tDebug.Log (\"Down Motion PASS\");\n\t\t\t\t\tReset ();\n\t\t\t\t}else if (yPositionCheck < 0) {\n\t\t\t\t\t//Upward Motion\n\t\t\t\t\tDebug.Log (\"Up Motion PASS\");\n\t\t\t\t\tReset ();\n\t\t\t\t}\n\t\t\t\treturn true;\n\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t//Reseting position records\n\tvoid Reset ()\n\t{\n\t\tpositions_.Clear();\n\t}\n}\n\n```\n<br/>\n<hr/>\n\n```csharp:pointerFollow\nusing UnityEngine;\nusing System.Collections;\nusing Leap;\n\n\npublic class mouseFollow : MonoBehaviour {\n\n\tvoid Start(){\n\t\tgameObject.SetActive (false);\n\t}\n\n\t// Update is called once per frame\n\tvoid Update () {\n\t\t\ttransform.position = GetComponentInParent<patternTest> ().indexTip;\n\t\t\ttransform.position = GetComponentInParent<patternTest_2> ().indexTip;\n\n\t}\n}\n\n```\n\n<hr/>\nYoutube video: https://youtu.be/9jlVvRYOMvo\n"}