{"context": "\n\nOS\nUbuntu\n\n\u5185\u5bb9\nIFTTT\u306e\u4e0b\u308a\u3092Proxy\u8d8a\u3048\u3092\u3059\u308b\u306e\u306bBeebotte\u3092\u7d4c\u7531\u3057\u3066MQTT\u3067\u884c\u304a\u3046\u3068\u601d\u3063\u3066\u8a66\u3057\u307e\u3057\u305f\u304c\u3001MQTT\u306eProxy\u8d8a\u3048\u306f\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002Proxy\u306a\u3057\u3067\u306f\u52d5\u3044\u305f\u306e\u3067\u30e1\u30e2\u3092\u6b8b\u3057\u307e\u3059\u3002\nC\u3067\u306f\u306a\u3044\u3067\u3059\u304cProxy\u8d8a\u3048\u304c\u51fa\u6765\u308b\u30d1\u30bf\u30fc\u30f3\uff08Web\u3092\u5229\u7528\uff09\nhttp://qiita.com/NextWorld/items/d3b3d382fc658b244273\n\u4ee5\u964d\u30e1\u30e2\nhttp://qiita.com/mayfair/items/e761c788a9d8787bc610\n\u3092\u5143\u306bBeebotte\u3092\u8a2d\u5b9a\u3002\nIFTTT\u304b\u3089Beebotte\u3078\u306e\u30c7\u30fc\u30bf\u306e\u6ce8\u610f\nhttp://qiita.com/yacchin1205/items/29d31707a535eeb85a96\nPaho\u306eC\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u4ee5\u964d\u306f\nhttp://www.eclipse.org/paho/files/mqttdoc/Cclient/subasync.html\n\u3092\u66f8\u304d\u76f4\u3057\u3066\u898b\u307e\u3057\u305f\u3002\n#include \"stdio.h\"\n#include \"stdlib.h\"\n#include \"string.h\"\n#include \"MQTTClient.h\"\n\n#define ADDRESS     \"tcp://mqtt.beebotte.com:1883\"\n#define CLIENTID    \"test\"\n#define TOPIC       \"ifttt/action\"\n#define PAYLOAD     \"{\\\"params\\\":{\\\"content\\\":\\\"from C\\\"}}\"\n#define TOKEN       \"token:*****\" \\\\*****\u306btoken\u3092\u66f8\u304f\n#define QOS         1\n#define TIMEOUT     10000L\n\nvolatile MQTTClient_deliveryToken deliveredtoken;\n\nvoid delivered(void *context, MQTTClient_deliveryToken dt)\n{\n    printf(\"Message with token value %d delivery confirmed\\n\", dt);\n    deliveredtoken = dt;\n}\n\nint msgarrvd(void *context, char *topicName, int topicLen, MQTTClient_message *message)\n{\n    int i;\n    char* payloadptr;\n\n    printf(\"Message arrived\\n\");\n    printf(\"     topic: %s\\n\", topicName);\n    printf(\"   message: \");\n\n    payloadptr = message->payload;\n    for(i=0; i<message->payloadlen; i++)\n    {\n        putchar(*payloadptr++);\n    }\n    putchar('\\n');\n    MQTTClient_freeMessage(&message);\n    MQTTClient_free(topicName);\n    return 1;\n}\n\nvoid connlost(void *context, char *cause)\n{\n    printf(\"\\nConnection lost\\n\");\n    printf(\"     cause: %s\\n\", cause);\n}\n\nint main(int argc, char* argv[])\n{\n    MQTTClient client;\n    MQTTClient_connectOptions conn_opts = MQTTClient_connectOptions_initializer;\n    int rc;\n    int ch;\n\n    MQTTClient_create(&client, ADDRESS, CLIENTID,\n        MQTTCLIENT_PERSISTENCE_NONE, NULL);\n    conn_opts.keepAliveInterval = 20;\n    conn_opts.cleansession = 1;\n    conn_opts.username = TOKEN; //ADD\n\n    MQTTClient_setCallbacks(client, NULL, connlost, msgarrvd, delivered);\n\n    if ((rc = MQTTClient_connect(client, &conn_opts)) != MQTTCLIENT_SUCCESS)\n    {\n        printf(\"Failed to connect, return code %d\\n\", rc);\n        exit(-1);       \n    }\n    printf(\"Subscribing to topic %s\\nfor client %s using QoS%d\\n\\n\"\n           \"Press Q<Enter> to quit\\n\\n\", TOPIC, CLIENTID, QOS);\n    MQTTClient_subscribe(client, TOPIC, QOS);\n\n    do \n    {\n        ch = getchar();\n    } while(ch!='Q' && ch != 'q');\n\n    MQTTClient_disconnect(client, 10000);\n    MQTTClient_destroy(&client);\n    return rc;\n}\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u306f gcc \u30bd\u30fc\u30b9 -lpaho-mqtt3c\u3067\u884c\u3046\u3002\n##OS\nUbuntu\n\n##\u5185\u5bb9\nIFTTT\u306e\u4e0b\u308a\u3092Proxy\u8d8a\u3048\u3092\u3059\u308b\u306e\u306bBeebotte\u3092\u7d4c\u7531\u3057\u3066MQTT\u3067\u884c\u304a\u3046\u3068\u601d\u3063\u3066\u8a66\u3057\u307e\u3057\u305f\u304c\u3001MQTT\u306eProxy\u8d8a\u3048\u306f\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002Proxy\u306a\u3057\u3067\u306f\u52d5\u3044\u305f\u306e\u3067\u30e1\u30e2\u3092\u6b8b\u3057\u307e\u3059\u3002\n\nC\u3067\u306f\u306a\u3044\u3067\u3059\u304cProxy\u8d8a\u3048\u304c\u51fa\u6765\u308b\u30d1\u30bf\u30fc\u30f3\uff08Web\u3092\u5229\u7528\uff09\nhttp://qiita.com/NextWorld/items/d3b3d382fc658b244273\n\n**\u4ee5\u964d\u30e1\u30e2**\nhttp://qiita.com/mayfair/items/e761c788a9d8787bc610\n\u3092\u5143\u306bBeebotte\u3092\u8a2d\u5b9a\u3002\nIFTTT\u304b\u3089Beebotte\u3078\u306e\u30c7\u30fc\u30bf\u306e\u6ce8\u610f\nhttp://qiita.com/yacchin1205/items/29d31707a535eeb85a96\n\nPaho\u306eC\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n\u4ee5\u964d\u306f\nhttp://www.eclipse.org/paho/files/mqttdoc/Cclient/subasync.html\n\u3092\u66f8\u304d\u76f4\u3057\u3066\u898b\u307e\u3057\u305f\u3002\n\n```\n#include \"stdio.h\"\n#include \"stdlib.h\"\n#include \"string.h\"\n#include \"MQTTClient.h\"\n\n#define ADDRESS     \"tcp://mqtt.beebotte.com:1883\"\n#define CLIENTID    \"test\"\n#define TOPIC       \"ifttt/action\"\n#define PAYLOAD     \"{\\\"params\\\":{\\\"content\\\":\\\"from C\\\"}}\"\n#define TOKEN\t    \"token:*****\" \\\\*****\u306btoken\u3092\u66f8\u304f\n#define QOS         1\n#define TIMEOUT     10000L\n\nvolatile MQTTClient_deliveryToken deliveredtoken;\n\nvoid delivered(void *context, MQTTClient_deliveryToken dt)\n{\n    printf(\"Message with token value %d delivery confirmed\\n\", dt);\n    deliveredtoken = dt;\n}\n\nint msgarrvd(void *context, char *topicName, int topicLen, MQTTClient_message *message)\n{\n    int i;\n    char* payloadptr;\n\n    printf(\"Message arrived\\n\");\n    printf(\"     topic: %s\\n\", topicName);\n    printf(\"   message: \");\n\n    payloadptr = message->payload;\n    for(i=0; i<message->payloadlen; i++)\n    {\n        putchar(*payloadptr++);\n    }\n    putchar('\\n');\n    MQTTClient_freeMessage(&message);\n    MQTTClient_free(topicName);\n    return 1;\n}\n\nvoid connlost(void *context, char *cause)\n{\n    printf(\"\\nConnection lost\\n\");\n    printf(\"     cause: %s\\n\", cause);\n}\n\nint main(int argc, char* argv[])\n{\n    MQTTClient client;\n    MQTTClient_connectOptions conn_opts = MQTTClient_connectOptions_initializer;\n    int rc;\n    int ch;\n\n    MQTTClient_create(&client, ADDRESS, CLIENTID,\n        MQTTCLIENT_PERSISTENCE_NONE, NULL);\n    conn_opts.keepAliveInterval = 20;\n    conn_opts.cleansession = 1;\n    conn_opts.username = TOKEN; //ADD\n\n    MQTTClient_setCallbacks(client, NULL, connlost, msgarrvd, delivered);\n\n    if ((rc = MQTTClient_connect(client, &conn_opts)) != MQTTCLIENT_SUCCESS)\n    {\n        printf(\"Failed to connect, return code %d\\n\", rc);\n        exit(-1);       \n    }\n    printf(\"Subscribing to topic %s\\nfor client %s using QoS%d\\n\\n\"\n           \"Press Q<Enter> to quit\\n\\n\", TOPIC, CLIENTID, QOS);\n    MQTTClient_subscribe(client, TOPIC, QOS);\n\n    do \n    {\n        ch = getchar();\n    } while(ch!='Q' && ch != 'q');\n\n    MQTTClient_disconnect(client, 10000);\n    MQTTClient_destroy(&client);\n    return rc;\n}\n```\n\u30b3\u30f3\u30d1\u30a4\u30eb\u306f ```gcc \u30bd\u30fc\u30b9 -lpaho-mqtt3c```\u3067\u884c\u3046\u3002\n", "tags": ["ifttt", "mqtt", "beebotte", "C"]}