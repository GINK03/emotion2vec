{"context": "REVISION: '78'\n\u30c7\u30e2\uff1ahttp://codepen.io/mo4_9/pen/GqLjba\n\u30c6\u30b9\u30c8\u304c\u7d42\u308f\u308a\u6b21\u7b2cmousemove\u30a4\u30d9\u30f3\u30c8\u306f\u524a\u9664\n\nclick\u51e6\u7406\u306e\u629c\u7c8b(ES6)\n\nclass MyRaycaster {\n    constructor(opts = {}) {\n        this.tube = null;\n        this.controls = this.getControls();\n        this.init();\n    }\n\n    init () {\n\n        ---\uff08\u7565\uff09---\n\n        document.addEventListener('mousedown', e => {\n            this.onDocumentMouseDown(e);\n        }, false);\n        // \u30c6\u30b9\u30c8\u304c\u7d42\u308f\u3063\u305f\u3089\u524a\u9664\n        document.addEventListener('mousemove', e => {\n            this.onDocumentMouseMove(e);\n        }, false);\n\n        ---\uff08\u7565\uff09---\n\n        this.getControls();\n        this.setDatGUI();\n        this.render();\n    }\n\n    getControls () {\n        const controls = new function () {\n            this.showRay = true;\n        };\n        return controls;\n    }\n\n    setDatGUI () {\n        const gui = new dat.GUI();\n        console.log(this.controls.showRay);\n        gui.add(this.controls, 'showRay').onChange( (e) => {\n            if (this.tube) this.scene.remove(this.tube)\n        });\n    }\n\n    render () {\n        this.renderer.render(this.scene, this.camera);\n        requestAnimationFrame( () => {\n            this.render();\n        });\n    }\n\n    // \u30af\u30ea\u30c3\u30af\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\n    onDocumentMouseDown(e) {\n\n        const intersects = this.getIntersectObjects(e);\n\n        if (intersects.length > 0) {\n\n            console.log('intersects[0] : ', intersects[0]); // \u6700\u3082\u8fd1\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n            console.log('distance : ', intersects[0].distance);\n            console.log('vector3 : ', intersects[0].point.x + \", \" + intersects[0].point.y + \", \" + intersects[0].point.z); // \u5149\u7dda\u3068\u306e\u4ea4\u5dee\u5ea7\u6a19\n\n            intersects[0].object.material.transparent = true;\n            intersects[0].object.material.opacity = 0.1;\n        }\n    }\n\n    // raycast\u306e\u88dc\u52a9\u7dda\n    onDocumentMouseMove(e) {\n        if (!this.controls.showRay) return;\n\n        const intersects = this.getIntersectObjects(e);\n\n        if (intersects.length > 0) {\n\n            let points = [];\n\n            points.push(new THREE.Vector3(this.startPointX, this.startPointY - 0.2, this.startPointZ));\n            points.push(intersects[0].point);\n\n            const mat = new THREE.MeshBasicMaterial({color: 0xff0000, transparent: true, opacity: 0.6});\n            const tubeGeometry = new THREE.TubeGeometry(new THREE.CatmullRomCurve3(points), 60, 0.001);\n\n            if (this.tube) this.scene.remove(this.tube);\n\n            if (this.controls.showRay) {\n                this.tube = new THREE.Mesh(tubeGeometry, mat);\n                this.scene.add(this.tube);\n            }\n            console.log(points[1].x, points[1].y, points[1].z);\n        }\n    }\n\n    // \u5149\u7dda\u3068\u4ea4\u308f\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53ce\u96c6\n    getIntersectObjects(e) {\n        // \u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u4f4d\u7f6e\u3092\u5143\u306bVector3\u3092\u751f\u6210\n        let vector = new THREE.Vector3(\n          ( e.clientX / window.innerWidth ) * 2 - 1,\n          -( e.clientY / window.innerHeight ) * 2 + 1, 0.5);\n        // Three.js\u5185\u306e\u5ea7\u6a19\u306b\u5909\u63db\n        // \u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19\u7cfb\u304b\u3089\u30ef\u30fc\u30eb\u30c9\u5ea7\u6a19\u7cfb\u306b\u9006\u5c04\u5f71\n        vector.unproject(this.camera);\n\n        // \u30ab\u30e1\u30e9\u304b\u3089\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u4f4d\u7f6e\u307e\u3067\u5149\u7dda\u3092\u98db\u3070\u3059\n        const raycaster = new THREE.Raycaster( this.camera.position, vector.sub(this.camera.position).normalize() );\n\n        // \u5149\u7dda\u3068\u4ea4\u308f\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u767b\u9332\n        const intersects = raycaster.intersectObjects([this.sphere, this.cylinder, this.cube]);\n\n        return intersects;\n    }\n\n}\n\nconst myRaycaster = new MyRaycaster();\n\n\n\n\u53c2\u8003\n\u521d\u3081\u3066\u306eThree.js \u7b2c2\u7248\u2015\u2015WebGL\u306e\u305f\u3081\u306eJavaScript 3D\u30e9\u30a4\u30d6\u30e9\u30ea\nhttp://qiita.com/mo49/items/c8ca223fb90a8053f902\n\n\nREVISION: '78'\n\n\u30c7\u30e2\uff1ahttp://codepen.io/mo4_9/pen/GqLjba\n\n\u30c6\u30b9\u30c8\u304c\u7d42\u308f\u308a\u6b21\u7b2c`mousemove\u30a4\u30d9\u30f3\u30c8`\u306f\u524a\u9664\n\n```javascript:click\u51e6\u7406\u306e\u629c\u7c8b(ES6)\n\nclass MyRaycaster {\n    constructor(opts = {}) {\n        this.tube = null;\n        this.controls = this.getControls();\n        this.init();\n    }\n\n    init () {\n    \n    \t---\uff08\u7565\uff09---\n\n        document.addEventListener('mousedown', e => {\n            this.onDocumentMouseDown(e);\n        }, false);\n        // \u30c6\u30b9\u30c8\u304c\u7d42\u308f\u3063\u305f\u3089\u524a\u9664\n        document.addEventListener('mousemove', e => {\n            this.onDocumentMouseMove(e);\n        }, false);\n        \n        ---\uff08\u7565\uff09---\n\n        this.getControls();\n        this.setDatGUI();\n        this.render();\n    }\n\n    getControls () {\n        const controls = new function () {\n            this.showRay = true;\n        };\n        return controls;\n    }\n\n    setDatGUI () {\n        const gui = new dat.GUI();\n        console.log(this.controls.showRay);\n        gui.add(this.controls, 'showRay').onChange( (e) => {\n            if (this.tube) this.scene.remove(this.tube)\n        });\n    }\n\n    render () {\n        this.renderer.render(this.scene, this.camera);\n        requestAnimationFrame( () => {\n            this.render();\n        });\n    }\n\n    // \u30af\u30ea\u30c3\u30af\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\n    onDocumentMouseDown(e) {\n\n        const intersects = this.getIntersectObjects(e);\n\n        if (intersects.length > 0) {\n\n            console.log('intersects[0] : ', intersects[0]); // \u6700\u3082\u8fd1\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n            console.log('distance : ', intersects[0].distance);\n            console.log('vector3 : ', intersects[0].point.x + \", \" + intersects[0].point.y + \", \" + intersects[0].point.z); // \u5149\u7dda\u3068\u306e\u4ea4\u5dee\u5ea7\u6a19\n\n            intersects[0].object.material.transparent = true;\n            intersects[0].object.material.opacity = 0.1;\n        }\n    }\n\n    // raycast\u306e\u88dc\u52a9\u7dda\n    onDocumentMouseMove(e) {\n        if (!this.controls.showRay) return;\n\n        const intersects = this.getIntersectObjects(e);\n\n        if (intersects.length > 0) {\n\n            let points = [];\n\n            points.push(new THREE.Vector3(this.startPointX, this.startPointY - 0.2, this.startPointZ));\n            points.push(intersects[0].point);\n\n            const mat = new THREE.MeshBasicMaterial({color: 0xff0000, transparent: true, opacity: 0.6});\n            const tubeGeometry = new THREE.TubeGeometry(new THREE.CatmullRomCurve3(points), 60, 0.001);\n\n            if (this.tube) this.scene.remove(this.tube);\n\n            if (this.controls.showRay) {\n                this.tube = new THREE.Mesh(tubeGeometry, mat);\n                this.scene.add(this.tube);\n            }\n            console.log(points[1].x, points[1].y, points[1].z);\n        }\n    }\n\n    // \u5149\u7dda\u3068\u4ea4\u308f\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53ce\u96c6\n    getIntersectObjects(e) {\n        // \u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u4f4d\u7f6e\u3092\u5143\u306bVector3\u3092\u751f\u6210\n        let vector = new THREE.Vector3(\n          ( e.clientX / window.innerWidth ) * 2 - 1,\n          -( e.clientY / window.innerHeight ) * 2 + 1, 0.5);\n        // Three.js\u5185\u306e\u5ea7\u6a19\u306b\u5909\u63db\n        // \u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19\u7cfb\u304b\u3089\u30ef\u30fc\u30eb\u30c9\u5ea7\u6a19\u7cfb\u306b\u9006\u5c04\u5f71\n        vector.unproject(this.camera);\n\n        // \u30ab\u30e1\u30e9\u304b\u3089\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u4f4d\u7f6e\u307e\u3067\u5149\u7dda\u3092\u98db\u3070\u3059\n        const raycaster = new THREE.Raycaster( this.camera.position, vector.sub(this.camera.position).normalize() );\n\n        // \u5149\u7dda\u3068\u4ea4\u308f\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u767b\u9332\n        const intersects = raycaster.intersectObjects([this.sphere, this.cylinder, this.cube]);\n\n        return intersects;\n    }\n\n}\n\nconst myRaycaster = new MyRaycaster();\n```\n\n\n> \u53c2\u8003\n[\u521d\u3081\u3066\u306eThree.js \u7b2c2\u7248\u2015\u2015WebGL\u306e\u305f\u3081\u306eJavaScript 3D\u30e9\u30a4\u30d6\u30e9\u30ea](https://www.oreilly.co.jp/books/9784873117706/)\nhttp://qiita.com/mo49/items/c8ca223fb90a8053f902\n", "tags": ["JavaScript", "three.js", "es6"]}