{"context": "\n\n\u30bd\u30fc\u30b9\n\nMahalanobisDistance.py\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sympy import *\n\nCENTER1 = np.array([2.0, 3.0])\nCENTER2 = np.array([-4.0, -1.0])\n\ndef calc_sum_of_square(data_list1, data_list2):\n    return (len(data_list1) * sum([data1 * data2 for data1, data2 in zip(data_list1, data_list2)]) - sum(data_list1) * sum(data_list2))/(len(data_list1)*(len(data_list1)-1))\n\n# \u5206\u6563\u5171\u5206\u6563\u884c\u5217\u8a08\u7b97\ndef calc_variance_covariance_matrix(data_list):\n    return [[calc_sum_of_square(data_list1, data_list2)/(len(data_list1)-1) for data_list1 in data_list]\n            for data_list2 in data_list]\n\ndef calc_average(data):\n    return sum(data) / len(data)\n\nif __name__ == \"__main__\":\n    # CENTER1\u3092\u4e2d\u5fc3\u3068\u3057\u305f\u30e9\u30f3\u30c0\u30e0\u306a\u70b9\u309250\u500b\u751f\u6210\n    data_set1 = CENTER1 + 3.0 * np.random.rand(50, 2)\n    # CENTER2\u3092\u4e2d\u5fc3\u3068\u3057\u305f\u30e9\u30f3\u30c0\u30e0\u306a\u70b9\u309250\u500b\u751f\u6210\n    data_set2 = CENTER2 + 4.7 * np.random.rand(50, 2)\n\n    X1 = []\n    Y1 = []\n    X2 = []\n    Y2 = []\n    for data1, data2 in zip(data_set1, data_set2):\n        X1.append(data1[0])\n        Y1.append(data1[1])\n        X2.append(data2[0])\n        Y2.append(data2[1])\n\n    # data_set1\u306ex\u3068y\u306e\u5206\u6563\u5171\u5206\u6563\u3092\u8a08\u7b97\n    vc1 = np.array(calc_variance_covariance_matrix([X1, Y1]))\n    # data_set2\u306ex\u3068y\u306e\u5206\u6563\u5171\u5206\u6563\u3092\u8a08\u7b97\n    vc2 = np.array(calc_variance_covariance_matrix([X2, Y2]))\n    det1 = vc1[0][0]*vc1[1][1] - vc1[0][1]**2\n    det2 = vc2[0][0]*vc2[1][1] - vc2[0][1]**2\n    x1_ave = calc_average(X1)\n    y1_ave = calc_average(Y1)\n    x2_ave = calc_average(X2)\n    y2_ave = calc_average(Y2)\n\n    # data_set1\u306e\u30de\u30cf\u30e9\u30ce\u30d3\u30b9\u8ddd\u96e2\uff1aD1^2 = a11*x^2 + a22*y^2 + a12 * x * y + a1 * x + a2 * y + a0\n    a11 = vc1[1][1]/det1\n    a22 = vc1[0][0]/det1\n    a12 = -2*vc1[0][1]/det1\n    a1 = 2*(vc1[0][1]*y1_ave - vc1[1][1]*x1_ave)/det1\n    a2 = 2*(vc1[0][1]*x1_ave - vc1[0][0]*y1_ave)/det1\n    a0 = (vc1[1][1]*x1_ave**2 + vc1[0][0]*y1_ave**2 - 2*vc1[0][0]*x1_ave*y1_ave)/det1\n\n    # data_set2\u306e\u30de\u30cf\u30e9\u30ce\u30d3\u30b9\u8ddd\u96e2\uff1aD1^2 = b11*x^2 + b22*y^2 + b12 * x * y + b1 * x + b2 * y + b0\n    b11 = vc2[1][1]/det2\n    b22 = vc2[0][0]/det2\n    b12 = -2*vc2[0][1]/det2\n    b1 = 2*(vc2[0][1]*y2_ave - vc2[1][1]*x2_ave)/det2\n    b2 = 2*(vc2[0][1]*x2_ave - vc2[0][0]*y2_ave)/det2\n    b0 = (vc2[1][1]*x2_ave**2 + vc2[0][0]*y2_ave**2 - 2*vc2[0][0]*x2_ave*y2_ave)/det2\n\n    # data_set1\u3068data_set2\u306e\u8ddd\u96e2\u304c\u7b49\u3057\u3044\u4f4d\u7f6e\u306e\u66f2\u7dda\u3092\u63cf\u304f\n    x, y = symbols(\"x y\")\n    f = (a11 - b11) * x**2 + (a22 - b22) * y**2 + (a12 - b12) * x * y + (a1 - b1) * x + (a2 - b2) * y + a0 - b0\n    plot_implicit(f, (x, -6, 6), (y, -7, 7))   \n\n    # data_set1\u3068data_set2\u306e\u6563\u5e03\u56f3\u3092\u63cf\u304f\n    fig = plt.figure()\n    ax = fig.add_subplot(1,1,1)\n    ax.scatter(X1, Y1, c='red')\n    ax.scatter(X2, Y2, c='blue')\n\n    plt.show()\n\n\n\n\u7d50\u679c\n\n\n## \u30bd\u30fc\u30b9\n\n```py:MahalanobisDistance.py\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sympy import *\n\nCENTER1 = np.array([2.0, 3.0])\nCENTER2 = np.array([-4.0, -1.0])\n\ndef calc_sum_of_square(data_list1, data_list2):\n    return (len(data_list1) * sum([data1 * data2 for data1, data2 in zip(data_list1, data_list2)]) - sum(data_list1) * sum(data_list2))/(len(data_list1)*(len(data_list1)-1))\n\n# \u5206\u6563\u5171\u5206\u6563\u884c\u5217\u8a08\u7b97\ndef calc_variance_covariance_matrix(data_list):\n    return [[calc_sum_of_square(data_list1, data_list2)/(len(data_list1)-1) for data_list1 in data_list]\n            for data_list2 in data_list]\n\ndef calc_average(data):\n    return sum(data) / len(data)\n            \nif __name__ == \"__main__\":\n    # CENTER1\u3092\u4e2d\u5fc3\u3068\u3057\u305f\u30e9\u30f3\u30c0\u30e0\u306a\u70b9\u309250\u500b\u751f\u6210\n    data_set1 = CENTER1 + 3.0 * np.random.rand(50, 2)\n    # CENTER2\u3092\u4e2d\u5fc3\u3068\u3057\u305f\u30e9\u30f3\u30c0\u30e0\u306a\u70b9\u309250\u500b\u751f\u6210\n    data_set2 = CENTER2 + 4.7 * np.random.rand(50, 2)\n    \n    X1 = []\n    Y1 = []\n    X2 = []\n    Y2 = []\n    for data1, data2 in zip(data_set1, data_set2):\n        X1.append(data1[0])\n        Y1.append(data1[1])\n        X2.append(data2[0])\n        Y2.append(data2[1])\n    \n    # data_set1\u306ex\u3068y\u306e\u5206\u6563\u5171\u5206\u6563\u3092\u8a08\u7b97\n    vc1 = np.array(calc_variance_covariance_matrix([X1, Y1]))\n    # data_set2\u306ex\u3068y\u306e\u5206\u6563\u5171\u5206\u6563\u3092\u8a08\u7b97\n    vc2 = np.array(calc_variance_covariance_matrix([X2, Y2]))\n    det1 = vc1[0][0]*vc1[1][1] - vc1[0][1]**2\n    det2 = vc2[0][0]*vc2[1][1] - vc2[0][1]**2\n    x1_ave = calc_average(X1)\n    y1_ave = calc_average(Y1)\n    x2_ave = calc_average(X2)\n    y2_ave = calc_average(Y2)\n    \n    # data_set1\u306e\u30de\u30cf\u30e9\u30ce\u30d3\u30b9\u8ddd\u96e2\uff1aD1^2 = a11*x^2 + a22*y^2 + a12 * x * y + a1 * x + a2 * y + a0\n    a11 = vc1[1][1]/det1\n    a22 = vc1[0][0]/det1\n    a12 = -2*vc1[0][1]/det1\n    a1 = 2*(vc1[0][1]*y1_ave - vc1[1][1]*x1_ave)/det1\n    a2 = 2*(vc1[0][1]*x1_ave - vc1[0][0]*y1_ave)/det1\n    a0 = (vc1[1][1]*x1_ave**2 + vc1[0][0]*y1_ave**2 - 2*vc1[0][0]*x1_ave*y1_ave)/det1\n    \n    # data_set2\u306e\u30de\u30cf\u30e9\u30ce\u30d3\u30b9\u8ddd\u96e2\uff1aD1^2 = b11*x^2 + b22*y^2 + b12 * x * y + b1 * x + b2 * y + b0\n    b11 = vc2[1][1]/det2\n    b22 = vc2[0][0]/det2\n    b12 = -2*vc2[0][1]/det2\n    b1 = 2*(vc2[0][1]*y2_ave - vc2[1][1]*x2_ave)/det2\n    b2 = 2*(vc2[0][1]*x2_ave - vc2[0][0]*y2_ave)/det2\n    b0 = (vc2[1][1]*x2_ave**2 + vc2[0][0]*y2_ave**2 - 2*vc2[0][0]*x2_ave*y2_ave)/det2\n    \n    # data_set1\u3068data_set2\u306e\u8ddd\u96e2\u304c\u7b49\u3057\u3044\u4f4d\u7f6e\u306e\u66f2\u7dda\u3092\u63cf\u304f\n    x, y = symbols(\"x y\")\n    f = (a11 - b11) * x**2 + (a22 - b22) * y**2 + (a12 - b12) * x * y + (a1 - b1) * x + (a2 - b2) * y + a0 - b0\n    plot_implicit(f, (x, -6, 6), (y, -7, 7))   \n    \n    # data_set1\u3068data_set2\u306e\u6563\u5e03\u56f3\u3092\u63cf\u304f\n    fig = plt.figure()\n    ax = fig.add_subplot(1,1,1)\n    ax.scatter(X1, Y1, c='red')\n    ax.scatter(X2, Y2, c='blue')\n    \n    plt.show()\n```\n\n## \u7d50\u679c\n![Mahalanobis-2.png](https://qiita-image-store.s3.amazonaws.com/0/38382/50b876dc-4482-b29e-02d6-6d1850cbe4f6.png)\n\n![Mahalanobis-1.png](https://qiita-image-store.s3.amazonaws.com/0/38382/8a1abd29-0e58-d2c5-7bc0-54bec3e203d4.png)\n", "tags": ["Python", "\u591a\u5909\u91cf\u89e3\u6790", "\u30de\u30cf\u30e9\u30ce\u30d3\u30b9\u8ddd\u96e2", "\u7d71\u8a08\u5b66"]}