{"tags": ["Swift", "Swift2.0", "Swift3.0"], "context": "\n\nAbout\nSwift\u3067\u306f\u3001\u914d\u5217\u5185\u306e\u30dd\u30b8\u30b7\u30e7\u30f3\u3092\u77e5\u308b\u3053\u3068\u304c\u3067\u304d\u308benumarated()\u3068\u3088\u3070\u308c\u308b\u95a2\u6570\u304c\u3042\u308a\u307e\u3059\u3002\n\u4eca\u56de\u306f\u3053\u308c\u306b\u3064\u3044\u3066\u307e\u3068\u3081\u3066\u307e\u3057\u305f\u3002\n\nWhat it means\nenumerate\u306f \"\u4e00\u89a7\u306b\u306a\u3063\u305f\u3082\u306e\u306b\uff11\u3064\u305a\u3064\u540d\u524d\u3092\u4ed8\u3051\u308b\"\u3068\u3044\u3046\u610f\u5473\u304c\u3042\u308a\u307e\u3059\u3002\n\nAvailable\niOS7.0\u304b\u3089\u5229\u7528\u3067\u304d\u307e\u3059\u3002\nSwift3.0\u4ee5\u524d\u306fSequenceType\u306benumerate()\u3067\u3057\u305f\u304c,\nSwift3\u304b\u3089enumerated()\u3078\u3068\u5909\u66f4\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\nSources\n\nExample.1\n\u6b21\u306e\u3088\u3046\u306a\u4f8b\u3067\u306f\u914d\u5217\u306e\u8981\u7d20\u3068\u4e00\u7dd2\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\nBefore\nlet fruits = [\"Apples\",\"Lemons\",\"Oranges\"]\n\nvar index = 0\nfor fruit in fruits {\n    print(\"Index: \\(index), fruit: \\(fruit)\")\n    index += 1\n}\n\n\n// Index: 0, fruit: Apples\n// Index: 1, fruit: Lemons\n// Index: 2, fruit: Oranges\n\n\n\u30eb\u30fc\u30d7\u3092\u7e70\u308a\u8fd4\u3059\u305f\u3073\u306b+1\u3092\u52a0\u3048\u306a\u304c\u3089\u3001fruit\u306b\u5bfe\u5fdc\u3059\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3082\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u3053\u308c\u3060\u3068\u76f4\u63a5Int\u3092\u6271\u3046\u306e\u3067\u82e5\u5e72\u9055\u548c\u611f\u304c\u3042\u308a\u307e\u3059\u306d\u3002\n\u305d\u3053\u3067\u65e9\u901fenumerated()\u306e\u51fa\u756a\u3067\u3059\u3002\n\nAfter\nlet fruits = [\"Apples\",\"Lemons\",\"Oranges\"]\n\nfor (index, fruit) in fruits.enumerated() {\n    print(\"Index: \\(index), fruit: \\(fruit)\")\n}\n\n// Index: 0, fruit: Apples\n// Index: 1, fruit: Lemons\n// Index: 2, fruit: Oranges\n\n\n\nExample.2\n(index, fruit)\u306e\u3088\u3046\u306b,\u578b\u306e\u7570\u306a\u308b\u8907\u6570\u306e\u5024\u306f, \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30bf\u30d7\u30eb(Tpule)\u3067\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\nlet fruits = [\"Apples\",\"Lemons\",\"Oranges\"]\n\nfor item in fruits.enumerated() {\n    print(item.offset ,item.element)\n}\n\n// 0 Apples\n// 1 Lemons\n// 2 Oranges\n\n\u305d\u308c\u305e\u308c\u30c9\u30c3\u30c8\u3092\u4f7f\u3063\u3066,\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306f.offset, \u914d\u5217\u306e\u8981\u7d20\u306f.element\u3067\u53c2\u7167\u3067\u304d\u307e\u3059\u3002\n\nExample.3\nfor-in\u306e\u3088\u3046\u306a\u9ad8\u901f\u5217\u6319\u3092\u4f7f\u308f\u305amap\u3067\u8868\u73fe\u3059\u308b\u65b9\u6cd5\u3082\u3042\u308a\u307e\u3059\u3002\n\n\u305d\u306e1\nlet fruitList = fruits.enumerated().map { \"\\($0.0):\\($0.1)\" }\nprint(fruitList)\n\n// [\"0:Apples\", \"1:Lemons\", \"2:Oranges\"]\n\n\n\u3042\u308b\u3044\u306f\n\n\u305d\u306e2\nlet fruitList = fruits.enumerated().map { \"\\($0.offset):\\($0.element)\" }\nprint(fruitList)\n\n// [\"0:Apples\", \"1:Lemons\", \"2:Oranges\"]\n\n\n\u305d\u306e\u305f\u3081\u3001map\u95a2\u6570\u5185\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308c\u3070\u4fbf\u5229\u3067\u3059\u306d\nlet fruitList = fruits.enumerated().map { item in\n    print(item.offset, item.element)\n}\n\n// 0 Apples\n// 1 Lemons\n// 2 Oranges\n\n\nReference\nApple\u306eAPI\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nSwift3.0\n    /// Returns a sequence of pairs (*n*, *x*), where *n* represents a\n    /// consecutive integer starting at zero, and *x* represents an element of\n    /// the sequence.\n    ///\n    /// This example enumerates the characters of the string \"Swift\" and prints\n    /// each character along with its place in the string.\n    ///\n    ///     for (n, c) in \"Swift\".characters.enumerated() {\n    ///         print(\"\\(n): '\\(c)'\")\n    ///     }\n    ///     // Prints \"0: 'S'\"\n    ///     // Prints \"1: 'w'\"\n    ///     // Prints \"2: 'i'\"\n    ///     // Prints \"3: 'f'\"\n    ///     // Prints \"4: 't'\"\n    ///\n    /// When enumerating a collection, the integer part of each pair is a counter\n    /// for the enumeration, not necessarily the index of the paired value.\n    /// These counters can only be used as indices in instances of zero-based,\n    /// integer-indexed collections, such as `Array` and `ContiguousArray`. For\n    /// other collections the counters may be out of range or of the wrong type\n    /// to use as an index. To iterate over the elements of a collection with its\n    /// indices, use the `zip(_:_:)` function.\n    ///\n    /// This example iterates over the indices and elements of a set, building a\n    /// list of indices of names with five or fewer letters.\n    ///\n    ///     let names: Set = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicol\u00e1s\"]\n    ///     var shorterIndices: [SetIndex<String>] = []\n    ///     for (i, name) in zip(names.indices, names) {\n    ///         if name.characters.count <= 5 {\n    ///             shorterIndices.append(i)\n    ///         }\n    ///     }\n    ///\n    /// Now that the `shorterIndices` array holds the indices of the shorter\n    /// names in the `names` set, you can use those indices to access elements in\n    /// the set.\n    ///\n    ///     for i in shorterIndices {\n    ///         print(names[i])\n    ///     }\n    ///     // Prints \"Sofia\"\n    ///     // Prints \"Mateo\"\n    ///\n    /// - Returns: A sequence of pairs enumerating the sequence.\n    public func enumerated() -> EnumeratedSequence<Array<Element>>\n\n\n\nSwift2.3\nextension SequenceType {\n    /// Returns a lazy `SequenceType` containing pairs (*n*, *x*), where\n    /// *n*s are consecutive `Int`s starting at zero, and *x*s are\n    /// the elements of `base`:\n    ///\n    ///     > for (n, c) in \"Swift\".characters.enumerate() {\n    ///         print(\"\\(n): '\\(c)'\")\n    ///       }\n    ///     0: 'S'\n    ///     1: 'w'\n    ///     2: 'i'\n    ///     3: 'f'\n    ///     4: 't'\n    @warn_unused_result\n    public func enumerate() -> EnumerateSequence<Self>\n}\n\n\n\nFinally\n\u66f8\u304d\u65b9\u306b\u3064\u3044\u3066\u306f,\u4ed6\u306b\u3082\u3044\u308d\u3093\u306a\u30d1\u30bf\u30fc\u30f3\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u4ed6\u306b\u3082\u300c\u3053\u3093\u306a\u65b9\u6cd5\u304c\u3042\u308b\u3088\uff01\u300d\u3068\u3044\u3046\u30a2\u30c9\u30d0\u30a4\u30b9\u304c\u3054\u3056\u3044\u307e\u3057\u305f\u3089\u3001\n\u662f\u975e\u3054\u6559\u793a\u9802\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\u3002\n# About \nSwift\u3067\u306f\u3001\u914d\u5217\u5185\u306e\u30dd\u30b8\u30b7\u30e7\u30f3\u3092\u77e5\u308b\u3053\u3068\u304c\u3067\u304d\u308b**enumarated()**\u3068\u3088\u3070\u308c\u308b\u95a2\u6570\u304c\u3042\u308a\u307e\u3059\u3002\n\u4eca\u56de\u306f\u3053\u308c\u306b\u3064\u3044\u3066\u307e\u3068\u3081\u3066\u307e\u3057\u305f\u3002\n\n## What it means\nenumerate\u306f *\"\u4e00\u89a7\u306b\u306a\u3063\u305f\u3082\u306e\u306b\uff11\u3064\u305a\u3064\u540d\u524d\u3092\u4ed8\u3051\u308b\"*\u3068\u3044\u3046\u610f\u5473\u304c\u3042\u308a\u307e\u3059\u3002\n\n## Available \niOS7.0\u304b\u3089\u5229\u7528\u3067\u304d\u307e\u3059\u3002\nSwift3.0\u4ee5\u524d\u306fSequenceType\u306b**enumerate()**\u3067\u3057\u305f\u304c,\nSwift3\u304b\u3089**enumerated()**\u3078\u3068\u5909\u66f4\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n# Sources \n### Example.1\n\u6b21\u306e\u3088\u3046\u306a\u4f8b\u3067\u306f**\u914d\u5217\u306e\u8981\u7d20**\u3068\u4e00\u7dd2\u306b**\u30a4\u30f3\u30c7\u30c3\u30af\u30b9**\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\n```swift:Before\nlet fruits = [\"Apples\",\"Lemons\",\"Oranges\"]\n\nvar index = 0\nfor fruit in fruits {\n    print(\"Index: \\(index), fruit: \\(fruit)\")\n    index += 1\n}\n\n\n// Index: 0, fruit: Apples\n// Index: 1, fruit: Lemons\n// Index: 2, fruit: Oranges\n```\n\u30eb\u30fc\u30d7\u3092\u7e70\u308a\u8fd4\u3059\u305f\u3073\u306b+1\u3092\u52a0\u3048\u306a\u304c\u3089\u3001fruit\u306b\u5bfe\u5fdc\u3059\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3082\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u3053\u308c\u3060\u3068\u76f4\u63a5`Int`\u3092\u6271\u3046\u306e\u3067\u82e5\u5e72\u9055\u548c\u611f\u304c\u3042\u308a\u307e\u3059\u306d\u3002\n\u305d\u3053\u3067\u65e9\u901f`enumerated()`\u306e\u51fa\u756a\u3067\u3059\u3002\n\n```swift:After\nlet fruits = [\"Apples\",\"Lemons\",\"Oranges\"]\n\nfor (index, fruit) in fruits.enumerated() {\n    print(\"Index: \\(index), fruit: \\(fruit)\")\n}\n\n// Index: 0, fruit: Apples\n// Index: 1, fruit: Lemons\n// Index: 2, fruit: Oranges\n```\n\n### Example.2\n`(index, fruit)`\u306e\u3088\u3046\u306b,\u578b\u306e\u7570\u306a\u308b\u8907\u6570\u306e\u5024\u306f, \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30bf\u30d7\u30eb(Tpule)\u3067\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\n\n```swift:\nlet fruits = [\"Apples\",\"Lemons\",\"Oranges\"]\n\nfor item in fruits.enumerated() {\n    print(item.offset ,item.element)\n}\n\n// 0 Apples\n// 1 Lemons\n// 2 Oranges\n```\n\u305d\u308c\u305e\u308c\u30c9\u30c3\u30c8\u3092\u4f7f\u3063\u3066,**\u30a4\u30f3\u30c7\u30c3\u30af\u30b9**\u306f`.offset`, **\u914d\u5217\u306e\u8981\u7d20**\u306f`.element`\u3067\u53c2\u7167\u3067\u304d\u307e\u3059\u3002\n\n### Example.3\nfor-in\u306e\u3088\u3046\u306a\u9ad8\u901f\u5217\u6319\u3092\u4f7f\u308f\u305a`map`\u3067\u8868\u73fe\u3059\u308b\u65b9\u6cd5\u3082\u3042\u308a\u307e\u3059\u3002\n\n```swift:\u305d\u306e1\nlet fruitList = fruits.enumerated().map { \"\\($0.0):\\($0.1)\" }\nprint(fruitList)\n\n// [\"0:Apples\", \"1:Lemons\", \"2:Oranges\"]\n```\n\u3042\u308b\u3044\u306f\n\n```swift:\u305d\u306e2\nlet fruitList = fruits.enumerated().map { \"\\($0.offset):\\($0.element)\" }\nprint(fruitList)\n\n// [\"0:Apples\", \"1:Lemons\", \"2:Oranges\"]\n```\n\u305d\u306e\u305f\u3081\u3001map\u95a2\u6570\u5185\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308c\u3070\u4fbf\u5229\u3067\u3059\u306d\n\n```swift:\nlet fruitList = fruits.enumerated().map { item in\n    print(item.offset, item.element)\n}\n\n// 0 Apples\n// 1 Lemons\n// 2 Oranges\n```\n\n# Reference\nApple\u306eAPI\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```swift:Swift3.0\n    /// Returns a sequence of pairs (*n*, *x*), where *n* represents a\n    /// consecutive integer starting at zero, and *x* represents an element of\n    /// the sequence.\n    ///\n    /// This example enumerates the characters of the string \"Swift\" and prints\n    /// each character along with its place in the string.\n    ///\n    ///     for (n, c) in \"Swift\".characters.enumerated() {\n    ///         print(\"\\(n): '\\(c)'\")\n    ///     }\n    ///     // Prints \"0: 'S'\"\n    ///     // Prints \"1: 'w'\"\n    ///     // Prints \"2: 'i'\"\n    ///     // Prints \"3: 'f'\"\n    ///     // Prints \"4: 't'\"\n    ///\n    /// When enumerating a collection, the integer part of each pair is a counter\n    /// for the enumeration, not necessarily the index of the paired value.\n    /// These counters can only be used as indices in instances of zero-based,\n    /// integer-indexed collections, such as `Array` and `ContiguousArray`. For\n    /// other collections the counters may be out of range or of the wrong type\n    /// to use as an index. To iterate over the elements of a collection with its\n    /// indices, use the `zip(_:_:)` function.\n    ///\n    /// This example iterates over the indices and elements of a set, building a\n    /// list of indices of names with five or fewer letters.\n    ///\n    ///     let names: Set = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicol\u00e1s\"]\n    ///     var shorterIndices: [SetIndex<String>] = []\n    ///     for (i, name) in zip(names.indices, names) {\n    ///         if name.characters.count <= 5 {\n    ///             shorterIndices.append(i)\n    ///         }\n    ///     }\n    ///\n    /// Now that the `shorterIndices` array holds the indices of the shorter\n    /// names in the `names` set, you can use those indices to access elements in\n    /// the set.\n    ///\n    ///     for i in shorterIndices {\n    ///         print(names[i])\n    ///     }\n    ///     // Prints \"Sofia\"\n    ///     // Prints \"Mateo\"\n    ///\n    /// - Returns: A sequence of pairs enumerating the sequence.\n    public func enumerated() -> EnumeratedSequence<Array<Element>>\n```\n\n```swift:Swift2.3\nextension SequenceType {\n    /// Returns a lazy `SequenceType` containing pairs (*n*, *x*), where\n    /// *n*s are consecutive `Int`s starting at zero, and *x*s are\n    /// the elements of `base`:\n    ///\n    ///     > for (n, c) in \"Swift\".characters.enumerate() {\n    ///         print(\"\\(n): '\\(c)'\")\n    ///       }\n    ///     0: 'S'\n    ///     1: 'w'\n    ///     2: 'i'\n    ///     3: 'f'\n    ///     4: 't'\n    @warn_unused_result\n    public func enumerate() -> EnumerateSequence<Self>\n}\n```\n\n# Finally\n\u66f8\u304d\u65b9\u306b\u3064\u3044\u3066\u306f,\u4ed6\u306b\u3082\u3044\u308d\u3093\u306a\u30d1\u30bf\u30fc\u30f3\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u4ed6\u306b\u3082\u300c\u3053\u3093\u306a\u65b9\u6cd5\u304c\u3042\u308b\u3088\uff01\u300d\u3068\u3044\u3046\u30a2\u30c9\u30d0\u30a4\u30b9\u304c\u3054\u3056\u3044\u307e\u3057\u305f\u3089\u3001\n\u662f\u975e\u3054\u6559\u793a\u9802\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\u3002\n"}