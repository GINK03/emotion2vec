{"context": " More than 1 year has passed since last update.\n\n\u3053\u3046\u3044\u3046\u30c0\u30a4\u30a8\u30c3\u30c8\u30a2\u30d7\u30ea\u304c\u307b\u3057\u3044\n\u8ab0\u304biPhone\u30a2\u30d7\u30ea\u306b\u3057\u3066\n\n\u52d5\u6a5f\n\u4eca\u307e\u3067\u306e\u30ab\u30ed\u30ea\u30fc\u7ba1\u7406\u7cfb\u30c0\u30a4\u30a8\u30c3\u30c8\u30a2\u30d7\u30ea\n\u4e00\u65e5\u306e\u4e0a\u9650\u30ab\u30ed\u30ea\u30fc\u3068\u98df\u3079\u305f\u3082\u306e\u306e\u5408\u8a08\u30ab\u30ed\u30ea\u30fc\u306e\u5dee\u3092\u8868\u793a\n\u21d2\u591c\u98df\u306e\u8a98\u60d1\n\u4eca\u4f55\u3092\u98df\u3079\u3066\u826f\u3044\u306e\u304b\u308f\u304b\u3089\u306a\u3044\n\n\u89e3\u6c7a\u7b56\n\u4e00\u65e5\u306e\u53ef\u80fd\u306a\u53d6\u5f97\u30ab\u30ed\u30ea\u30fc\u3092\u79d2\u5358\u4f4d\u306b\u5206\u5272\u3001\u7a4d\u307f\u4e0a\u3052\u3066\u3044\u304f\n\u4eca\u98df\u3079\u3089\u308c\u308b\uff1d\u4f7f\u7528\u53ef\u80fd\u306a\u53d6\u5f97\u30ab\u30ed\u30ea\u30fc\n\u6b21\u306b\u98df\u3079\u305f\u3044\u3082\u306e\u307e\u3067\u3069\u308c\u3060\u3051\u6211\u6162\u3059\u308c\u3070\u3044\u3044\u304b\u3082\u6642\u9593\u8868\u793a\n# include <Siv3D.hpp>\n\nint foodToTime(String food);\nString nameEatableFood(double kcal);\nString nameNextFood(double kcal);\n\nString food_name[] = { L\"\u677e\u5c4b\u306e\u30d7\u30ec\u30df\u30a2\u30e0\u725b\u3081\u3057\", L\"\u30de\u30af\u30c9\u30ca\u30eb\u30c9\u306e\u30cf\u30f3\u30d0\u30fc\u30ac\u30fc\", L\"\u30de\u30af\u30c9\u30ca\u30eb\u30c9\u306e\u30c1\u30ad\u30f3\u30af\u30ea\u30b9\u30d7\", L\"\u6c34\", L\"\u65e5\u9ad8\u5c4b\u306e\u4e2d\u83ef\u305d\u3070\", L\"\u30af\u30e9\u30c3\u30b7\u30e5\u30bf\u30a4\u30d7\u306e\u849f\u84bb\u7551\u30e9\u30a4\u30c8 \u3076\u3069\u3046\u5473\" };\ndouble food_kcal[] = { 962.0, 275.0, 366.0, -0.01, 669.0, 39.0};\nint kakin = 0;\ndouble allowed_kcal = 0.1;\ndouble kcal_per_sec = 0.0307;\n\n\n\nvoid Main()\n{\n    const Font font(14);\n\n    while (System::Update())\n    {\n        String food_name = nameEatableFood(allowed_kcal);\n        kcal_per_sec = 0.0307 + 0.1*kakin*kakin;\n        allowed_kcal += kcal_per_sec/60;\n        font(L\"\u4eca\u306a\u3089\", food_name, L\"\u304c\u98df\u3079\u3089\u308c\u307e\u3059\u3002\").draw(0, 0);\n        food_name = nameNextFood(allowed_kcal);\n        int next_time = foodToTime(food_name);\n        font(food_name, L\"\\n\u304c\u98df\u3079\u3089\u308c\u308b\u306e\u306f\", next_time, L\"\u79d2\u5f8c\u3067\u3059\u3002\").draw(0, 100);\n        font(DecimalPlace(3), allowed_kcal , L\"kcal\").draw(80,200);\n        Circle(400, 300, 40).draw(Palette::Orange);\n\n        if (((Mouse::Pos().x - 400)^2 + (Mouse::Pos().y - 300)^2) < 100 && Input::MouseL.clicked){\n            kakin++;\n        }\n        font(kakin, L\"\u8ab2\u91d1\").drawCenter({ 400, 280 });\n        font(kcal_per_sec, L\"kcal/sec\").drawCenter({ 400, 320 });\n\n    }\n}\n\nint foodToTime(String food){\n    for (int i = 0; i < sizeof(food_name) / sizeof(food_name[0]); i++){\n        if (food_name[i] == food){\n            return (food_kcal[i] - allowed_kcal) / kcal_per_sec;\n        }\n    }\n    return 0;\n}\n\nString nameEatableFood(double kcal){\n\n    double return_kcal = -1.0;\n    String return_name;\n    for (int i = 0; i < sizeof(food_name) / sizeof(food_name[0]); i++){\n        if (food_kcal[i]>return_kcal && food_kcal[i] < kcal){\n            return_kcal = food_kcal[i];\n            return_name = food_name[i];\n        }\n    }\n    return return_name;\n}\n\nString nameNextFood(double kcal){\n\n    double return_kcal = 99999;\n    String return_name;\n    for (int i = 0; i < sizeof(food_name) / sizeof(food_name[0]); i++){\n        if (food_kcal[i]<return_kcal && food_kcal[i] > kcal){\n            return_kcal = food_kcal[i];\n            return_name = food_name[i];\n        }\n    }\n    return return_name;\n}\n\n\n# \u3053\u3046\u3044\u3046\u30c0\u30a4\u30a8\u30c3\u30c8\u30a2\u30d7\u30ea\u304c\u307b\u3057\u3044\n\u8ab0\u304biPhone\u30a2\u30d7\u30ea\u306b\u3057\u3066\n##\u52d5\u6a5f\n\u4eca\u307e\u3067\u306e\u30ab\u30ed\u30ea\u30fc\u7ba1\u7406\u7cfb\u30c0\u30a4\u30a8\u30c3\u30c8\u30a2\u30d7\u30ea\n\u4e00\u65e5\u306e\u4e0a\u9650\u30ab\u30ed\u30ea\u30fc\u3068\u98df\u3079\u305f\u3082\u306e\u306e\u5408\u8a08\u30ab\u30ed\u30ea\u30fc\u306e\u5dee\u3092\u8868\u793a\n\u21d2\u591c\u98df\u306e\u8a98\u60d1\n\u4eca\u4f55\u3092\u98df\u3079\u3066\u826f\u3044\u306e\u304b\u308f\u304b\u3089\u306a\u3044\n\n##\u89e3\u6c7a\u7b56\n\u4e00\u65e5\u306e\u53ef\u80fd\u306a\u53d6\u5f97\u30ab\u30ed\u30ea\u30fc\u3092\u79d2\u5358\u4f4d\u306b\u5206\u5272\u3001\u7a4d\u307f\u4e0a\u3052\u3066\u3044\u304f\n\u4eca\u98df\u3079\u3089\u308c\u308b\uff1d\u4f7f\u7528\u53ef\u80fd\u306a\u53d6\u5f97\u30ab\u30ed\u30ea\u30fc\n\u6b21\u306b\u98df\u3079\u305f\u3044\u3082\u306e\u307e\u3067\u3069\u308c\u3060\u3051\u6211\u6162\u3059\u308c\u3070\u3044\u3044\u304b\u3082\u6642\u9593\u8868\u793a\n\n````c++\n# include <Siv3D.hpp>\n\nint foodToTime(String food);\nString nameEatableFood(double kcal);\nString nameNextFood(double kcal);\n\nString food_name[] = { L\"\u677e\u5c4b\u306e\u30d7\u30ec\u30df\u30a2\u30e0\u725b\u3081\u3057\", L\"\u30de\u30af\u30c9\u30ca\u30eb\u30c9\u306e\u30cf\u30f3\u30d0\u30fc\u30ac\u30fc\", L\"\u30de\u30af\u30c9\u30ca\u30eb\u30c9\u306e\u30c1\u30ad\u30f3\u30af\u30ea\u30b9\u30d7\", L\"\u6c34\", L\"\u65e5\u9ad8\u5c4b\u306e\u4e2d\u83ef\u305d\u3070\", L\"\u30af\u30e9\u30c3\u30b7\u30e5\u30bf\u30a4\u30d7\u306e\u849f\u84bb\u7551\u30e9\u30a4\u30c8 \u3076\u3069\u3046\u5473\" };\ndouble food_kcal[] = { 962.0, 275.0, 366.0, -0.01, 669.0, 39.0};\nint kakin = 0;\ndouble allowed_kcal = 0.1;\ndouble kcal_per_sec = 0.0307;\n\n\n\nvoid Main()\n{\n\tconst Font font(14);\n\n\twhile (System::Update())\n\t{\n\t\tString food_name = nameEatableFood(allowed_kcal);\n\t\tkcal_per_sec = 0.0307 + 0.1*kakin*kakin;\n\t\tallowed_kcal += kcal_per_sec/60;\n\t\tfont(L\"\u4eca\u306a\u3089\", food_name, L\"\u304c\u98df\u3079\u3089\u308c\u307e\u3059\u3002\").draw(0, 0);\n\t\tfood_name = nameNextFood(allowed_kcal);\n\t\tint next_time = foodToTime(food_name);\n\t\tfont(food_name, L\"\\n\u304c\u98df\u3079\u3089\u308c\u308b\u306e\u306f\", next_time, L\"\u79d2\u5f8c\u3067\u3059\u3002\").draw(0, 100);\n\t\tfont(DecimalPlace(3), allowed_kcal , L\"kcal\").draw(80,200);\n\t\tCircle(400, 300, 40).draw(Palette::Orange);\n\n\t\tif (((Mouse::Pos().x - 400)^2 + (Mouse::Pos().y - 300)^2) < 100 && Input::MouseL.clicked){\n\t\t\tkakin++;\n\t\t}\n\t\tfont(kakin, L\"\u8ab2\u91d1\").drawCenter({ 400, 280 });\n\t\tfont(kcal_per_sec, L\"kcal/sec\").drawCenter({ 400, 320 });\n\n\t}\n}\n\nint foodToTime(String food){\n\tfor (int i = 0; i < sizeof(food_name) / sizeof(food_name[0]); i++){\n\t\tif (food_name[i] == food){\n\t\t\treturn (food_kcal[i] - allowed_kcal) / kcal_per_sec;\n\t\t}\n\t}\n\treturn 0;\n}\n\nString nameEatableFood(double kcal){\n\n\tdouble return_kcal = -1.0;\n\tString return_name;\n\tfor (int i = 0; i < sizeof(food_name) / sizeof(food_name[0]); i++){\n\t\tif (food_kcal[i]>return_kcal && food_kcal[i] < kcal){\n\t\t\treturn_kcal = food_kcal[i];\n\t\t\treturn_name = food_name[i];\n\t\t}\n\t}\n\treturn return_name;\n}\n\nString nameNextFood(double kcal){\n\n\tdouble return_kcal = 99999;\n\tString return_name;\n\tfor (int i = 0; i < sizeof(food_name) / sizeof(food_name[0]); i++){\n\t\tif (food_kcal[i]<return_kcal && food_kcal[i] > kcal){\n\t\t\treturn_kcal = food_kcal[i];\n\t\t\treturn_name = food_name[i];\n\t\t}\n\t}\n\treturn return_name;\n}\n\n````\n", "tags": ["Siv3D"]}