{"tags": ["C++", "boost"], "context": " More than 1 year has passed since last update.\u5909\u306a\u52d5\u7684\u5206\u5c90\u3092\u3057\u307e\u3059\nvisitor\u3067template\u3092\u4f7f\u3046\u3053\u3068\u304c\u30dd\u30a4\u30f3\u30c8\u3067\u3059\n#include <iostream>\n#include <string>\n#include <boost/variant.hpp>\n\nclass TypeA {\npublic:\n  std::string toString() const {\n    return \"TypeA\";\n  }\n};\n\nclass TypeB {\npublic:\n  std::string toString() const {\n    return \"TypeB\";\n  }\n};\n\nclass VariantType {\npublic:\n  template <class T>\n  VariantType &operator=(const T &value) {\n    _value = value;\n    return *this;\n  }\n\n  struct ToStringVisitor : public boost::static_visitor<std::string> {\n    template <class T>\n    std::string operator()(const T &arg) const {\n      return arg.toString();\n    }\n  };\n  std::string toString() const {\n    return boost::apply_visitor(ToStringVisitor(), _value);\n  }\n\nprivate:\n  boost::variant<TypeA, TypeB> _value;\n};\n\nint main(int argc, const char *argv[]) {\n  VariantType v1;\n  VariantType v2;\n\n  v1 = TypeA();\n  v2 = TypeB();\n\n  std::cout << v1.toString() << std::endl;\n  std::cout << v2.toString() << std::endl;\n\n  return 0;\n}\n\n\u51fa\u529b\uff1a\nTypeA\nTypeB\n\u5909\u306a\u52d5\u7684\u5206\u5c90\u3092\u3057\u307e\u3059\nvisitor\u3067template\u3092\u4f7f\u3046\u3053\u3068\u304c\u30dd\u30a4\u30f3\u30c8\u3067\u3059\n\n```\n#include <iostream>\n#include <string>\n#include <boost/variant.hpp>\n\nclass TypeA {\npublic:\n  std::string toString() const {\n    return \"TypeA\";\n  }\n};\n\nclass TypeB {\npublic:\n  std::string toString() const {\n    return \"TypeB\";\n  }\n};\n\nclass VariantType {\npublic:\n  template <class T>\n  VariantType &operator=(const T &value) {\n    _value = value;\n    return *this;\n  }\n\n  struct ToStringVisitor : public boost::static_visitor<std::string> {\n    template <class T>\n    std::string operator()(const T &arg) const {\n      return arg.toString();\n    }\n  };\n  std::string toString() const {\n    return boost::apply_visitor(ToStringVisitor(), _value);\n  }\n\nprivate:\n  boost::variant<TypeA, TypeB> _value;\n};\n\nint main(int argc, const char *argv[]) {\n  VariantType v1;\n  VariantType v2;\n\n  v1 = TypeA();\n  v2 = TypeB();\n\n  std::cout << v1.toString() << std::endl;\n  std::cout << v2.toString() << std::endl;\n\n  return 0;\n}\n```\n\n\u51fa\u529b\uff1a\nTypeA\nTypeB\n"}