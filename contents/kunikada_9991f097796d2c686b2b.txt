{"context": "\n\n\u306f\u3058\u307e\u308a\n\u3080\u304b\u3057\u3080\u304b\u3057\u3001IoT\u3068\u3044\u3046\u30d0\u30ba\u30ef\u30fc\u30c9\u3068\u5171\u306b\u3001\u30c8\u30a4\u30ec\u904b\u7528\u30a2\u30d7\u30ea\u304c\u6d41\u884c\u3063\u305f\u6642\u671f\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\u3082\u3046\u4f55\u756a\u714e\u3058\u304b\u3082\u308f\u304b\u3089\u306a\u3044\u3051\u3069\u3001\u8ca0\u3051\u3058\u3068\u4f5c\u3063\u3066\u307f\u305f\u3082\u306e\u3092\u3053\u3053\u306b\u516c\u958b\u3057\u307e\u3059\u3002\n\n\u4ed5\u7d44\u307f\n\u79c1\u304c\u8db3\u7e41\u304f\u901a\u3063\u3066\u3044\u308b\u4f1a\u793e\u3067\u306f\u3001\u6771\u65e5\u672c\u5927\u9707\u707d\u306e\u6559\u8a13\u3092\u5fd8\u308c\u305a\u306b\u7bc0\u96fb\u306e\u610f\u8b58\u3092\u4fdd\u3063\u3066\u3044\u308b\u3053\u3068\u304b\u3089\u3001\u57fa\u672c\u7684\u306b\u30c8\u30a4\u30ec\u306e\u7167\u660e\u306f\u305d\u306e\u90fd\u5ea6\u6d88\u3057\u3066\u3044\u308b\u3068\u3044\u3046\u904b\u7528\u3067\u3059\u3002\n\u3068\u3001\u3044\u3046\u3053\u3068\u3067\u3001\u7a7a\u304d\u72b6\u6cc1\u306e\u30c1\u30a7\u30c3\u30af\u306f\u5149\u30bb\u30f3\u30b5\u30fc\u3072\u3068\u3064\u3067OK\u3067\u3057\u305f\u3002\n\n\n\u30c8\u30a4\u30ec\nESP-WROOM-02\u306f\u3001\u30b9\u30a4\u30c3\u30c1\u30b5\u30a4\u30a8\u30f3\u30b9\u3067\u958b\u767a\u30dc\u30fc\u30c9\u3092\u8cfc\u5165\u3057\u307e\u3057\u305f\u3002\n\u9078\u5b9a\u7406\u7531\u306f\u3001\u5168\u90e8\u8f09\u305b\u3067\u697d\u3060\u306a\u3068\u601d\u3063\u305f\u306e\u3067\u3002\n\n\u4e3b\u306a\u90e8\u54c1\n\n\n\n\u5546\u54c1\u540d\n\u4fa1\u683c\n\n\n\n\nESP-WROOM-02\u958b\u767a\u30dc\u30fc\u30c9\n2,160\u5186\n\n\nTSL2561\u30c7\u30b8\u30bf\u30eb\u5149\u30bb\u30f3\u30b5\u30dc\u30fc\u30c9\n702\u5186\n\n\n\n\nAWS\n\u5f53\u521d\u306f\u3001AWS IoT\u3092\u4f7f\u3063\u3066\u307f\u305f\u304b\u3063\u305f\u3002\n\u3069\u3046\u3084\u3089\u3001ESP-WROOM-02\u3067\u306fTLS1.2\u306b\u5bfe\u5fdc\u3059\u308b\u306e\u304c\u96e3\u3057\u3044\u3089\u3057\u3044\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u65ad\u5ff5\u3057\u307e\u3057\u305f\u3002\n\u3067\u3001EC2\u306bMosquitto\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3057\u305f\u3002 Hubot\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3053\u3068\u304b\u3089\u3001\u3069\u3061\u3089\u306b\u3057\u308d\u5225\u9014\u30b5\u30fc\u30d0\u306f\u5fc5\u8981\u3060\u3063\u305f\u304b\u306a\u3002\n\u7279\u306bEC2\u3067\u3042\u308b\u5fc5\u7136\u6027\u306f\u306a\u304f\u3001\u30b9\u30da\u30c3\u30af\u3082\u6700\u4f4e\u9650\u306e\u3082\u306e\u3067OK\u3067\u3059\u3002\n\nHubot #1\nhttps://github.com/kunikada/hubot-toilet\nHubot\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3002\u3053\u3093\u306a\u3053\u3068\u3084\u308a\u307e\u3059\u3002\n\nMosquitto\u306b\u30c8\u30a4\u30ec\u4f7f\u7528\u72b6\u6cc1\u306e\u554f\u3044\u5408\u308f\u305b\n\u30c1\u30e3\u30c3\u30c8\u306e\u8fd4\u4e8b\u3001\u9023\u7d61\u306a\u3069\n\u30bb\u30f3\u30b5\u30fc\u30c7\u30d0\u30a4\u30b9\u306e\u7d30\u304b\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\n\n\nHubot #2\nhttps://github.com/kunikada/hubot-chatwork\nChatWork\u30a2\u30c0\u30d7\u30bf\n\u304a\u305d\u3089\u304f\u3001\u307f\u3093\u306a\u304c\u4f7f\u3063\u3066\u3044\u308b\u3067\u3042\u308d\u3046\u3001\u30b0\u30b0\u3063\u305f\u3089\u51fa\u3066\u304f\u308bChatWork\u30a2\u30c0\u30d7\u30bf\u306b\u82e5\u5e72\u624b\u3092\u5165\u308c\u307e\u3057\u305f\u3002\n\u30eb\u30fc\u30e0\u306e\u6307\u5b9a\u3092\u3057\u306a\u304f\u3066\u3082\u3044\u3044\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30c1\u30e3\u30c3\u30c8\n\u3046\u3061\u306e\u4f1a\u793e\u3067\u306f\u3001ChatWork\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u6b63\u76f4API\u306f\u4f7f\u3044\u306b\u304f\u3044\u3067\u3059\u3002\n\u5c02\u7528\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u7528\u610f\u3057\u3066\u3001API\u306e\u4f7f\u7528\u7533\u8acb\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e\u3042\u305f\u308a\u306f\u3001Slack\u3092\u4f7f\u7528\u3059\u308b\u306e\u3067\u3042\u308c\u3070\u3001Hubot\u306e\u30a2\u30c0\u30d7\u30bf\u3092Slack\u306b\u5909\u3048\u308c\u3070\u3044\u3044\u306e\u3067\u7f6e\u304d\u63db\u3048\u53ef\u80fd\u3067\u3059\u3002\n\n\u4f7f\u7528\u30a4\u30e1\u30fc\u30b8\n\n\n\n\u611f\u60f3\n\u5f53\u521d\u3001\u8a2d\u7f6e\u306e\u81ea\u7531\u5ea6\u306e\u305f\u3081\u306b\u3001\u4e7e\u96fb\u6c60\u3084\u30d0\u30c3\u30c6\u30ea\u30fc\u99c6\u52d5\u3092\u76ee\u6307\u3057\u3066\u307f\u307e\u3057\u305f\u304c\u3001\u601d\u3063\u305f\u3088\u308a\u96fb\u529b\u3092\u6d88\u8cbb\u3057\u3066\u3044\u307e\u3059\u3002\n\u30b3\u30f3\u30bb\u30f3\u30c8\u304c\u8fd1\u304f\u306b\u3042\u308b\u306a\u3089\u3001\u7d20\u76f4\u306b\u305d\u3053\u304b\u3089\u96fb\u6e90\u3092\u3068\u3063\u305f\u307b\u3046\u304c\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n\u96fb\u6c60\u3067\u3084\u308b\u3068\u3057\u305f\u3089\u3001\u30d1\u30fc\u30c4\u69cb\u6210\u3068\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u898b\u76f4\u3057\u304c\u5fc5\u8981\u305d\u3046\u3067\u3059\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\nsketch.ino\n#include <Wire.h>\n#include <Ethernet.h>\n#include <ESP8266WiFi.h>\n#include <NTPClient.h>\n#include <PubSubClient.h>\n#include <TSL2561.h>\n\n#define WIFI_SSID \"YOUR_WIFI_SSID\"\n#define WIFI_PASS \"YOUR_WIFI_PASSWORD\"\n\nIPAddress mqttHost(123, 45, 67, 89);\n#define MQTT_PORT 1883\n#define MQTT_USER \"YOUR_MQTT_USER\"\n#define MQTT_PASS \"YOUR_MQTT_PASSWORD\"\n\n#define TSL2561_VDD 2\n#define TSL2561_GND 15\n#define TSL2561_SDA 13\n#define TSL2561_SCL 12\n#define TSL2561_ADDR 0x39\n\nvoid callback(char*, byte*, unsigned int);\nvoid onCheck();\nvoid onChange(int, int);\n\nWiFiClient wifiClient;\nNTPClient timeClient(\"ntp.jst.mfeed.ad.jp\");\nPubSubClient mqttClient(mqttHost, MQTT_PORT, callback, wifiClient);\nString clientName;\nint cntPub = 0;\nint cntChange = 0;\n\nTSL2561 tsl(TSL2561_ADDR);\nint progress, lastResult;\nint luxThreshold = 50;\nint sleepMinOnCheck = 10;\nint sleepMinOnChange = 0;\nbool sleepHour[24] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\nbool sleepDow[7] = {0,0,0,0,0,0,0};\n\nvoid setup() {\n  Serial.begin(115200);\n\n  WiFi.begin(WIFI_SSID, WIFI_PASS);\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(1000);\n    Serial.print(\".\");\n  }\n  Serial.println(\"connected\");\n\n  while (timeClient.getRawTime() < 60) { // 1 minute timeout\n    timeClient.update();\n    delay(2000);\n  }\n\n  // \u8b58\u5225\u5b50\u3068\u3057\u3066MAC\u30a2\u30c9\u30ec\u30b9\u3092\u4f7f\u7528\n  uint8_t mac[6];\n  WiFi.macAddress(mac);\n  for (int i = 0; i < 6; i++) {\n    clientName += String(mac[i], HEX);\n  }\n\n  // MQTT\u30b5\u30fc\u30d0\u304b\u3089\u8a2d\u5b9a\u3092\u53d6\u5f97\n  mqttClient.connect(clientName.c_str(), MQTT_USER, MQTT_PASS);\n  String topic = \"reset/\" + clientName;\n  String payload = String(timeClient.getRawTime());\n  mqttClient.publish(topic.c_str(), payload.c_str(), true);\n  topic = clientName + \"/settings/lux_threshold\";\n  mqttClient.subscribe(topic.c_str(), 1);\n  topic = clientName + \"/settings/sleepmin_oncheck\";\n  mqttClient.subscribe(topic.c_str(), 1);\n  topic = clientName + \"/settings/sleepmin_onchange\";\n  mqttClient.subscribe(topic.c_str(), 1);\n  topic = clientName + \"/settings/sleep_hour\";\n  mqttClient.subscribe(topic.c_str(), 1);\n  topic = clientName + \"/settings/sleep_dow\";\n  mqttClient.subscribe(topic.c_str(), 1);\n  for (int i = 0; i < 15; i++) {\n    if (cntPub == 5) {\n      Serial.println(\"settings loaded\");\n      break;\n    }\n    mqttClient.loop();\n    delay(1000);\n    Serial.print(\".\");\n  }\n  mqttClient.disconnect();\n\n  // \u30d4\u30f3\u8a2d\u5b9a\n  pinMode(TSL2561_VDD, OUTPUT);\n  pinMode(TSL2561_GND, OUTPUT);\n  digitalWrite(TSL2561_VDD, HIGH);\n  digitalWrite(TSL2561_GND, LOW);\n  Wire.begin(TSL2561_SDA, TSL2561_SCL);\n\n  // \u5468\u56f2\u306e\u660e\u6697\u72b6\u6cc1\u306b\u5408\u308f\u305b\u3066\u9069\u5207\u306b\u30b2\u30a4\u30f3\u3092\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\n  //tsl.setGain(TSL2561_GAIN_0X);         // \u30b2\u30a4\u30f3\u306a\u3057:\u5468\u56f2\u304c\u660e\u308b\u3044\u5834\u5408\n  tsl.setGain(TSL2561_GAIN_16X);      // \u30b2\u30a4\u30f3x16:\u5468\u56f2\u304c\u6697\u3044\u5834\u5408\n\n  // \u7a4d\u7b97\u6642\u9593\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u3067\u3001\u5149\u306e\u6e2c\u5b9a\u6642\u9593\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\n  // \u9577\u6642\u9593\u6e2c\u5b9a\u3059\u308b\u3068\u3001\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\u306f\u9045\u304f\u306a\u308a\u307e\u3059\u304c\u3001\u4f4e\u5149\u5ea6\u74b0\u5883\u3067\u306e\u6e2c\u5b9a\u6027\u80fd\u304c\u5411\u4e0a\u3057\u307e\u3059\n  tsl.setTiming(TSL2561_INTEGRATIONTIME_13MS);  // \u77ed\u6642\u9593\u6e2c\u5b9a:\u660e\u308b\u3044\u74b0\u5883\n  //tsl.setTiming(TSL2561_INTEGRATIONTIME_101MS);  // \u4e2d\u6642\u9593\u6e2c\u5b9a:\u4e2d\u7a0b\u5ea6\u306e\u660e\u308b\u3055\n  //tsl.setTiming(TSL2561_INTEGRATIONTIME_402MS);  // \u6700\u9577\u6642\u9593\u6e2c\u5b9a:\u6697\u3044\u74b0\u5883\n}\n\nvoid loop() {\n  onCheck();\n\n  // \u660e\u308b\u3055\u3092\u53d6\u5f97\n  uint32_t lum = tsl.getFullLuminosity();\n  uint16_t ir = lum >> 16;\n  uint16_t full = lum & 0xFFFF;\n  uint32_t lux = tsl.calculateLux(full, ir);\n\n  // \u540c\u3058\u72b6\u614b\u304c5\u56de\u9023\u7d9a\u3057\u305f\u5834\u5408\u306b\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u5909\u66f4  \n  int result = 0;\n  progress = progress << 1;\n  if (lux > luxThreshold) {\n    progress++;\n  }\n  progress &= 0x1f;\n  if (progress == 0x1f) {\n    result = 1;\n  } else if (progress == 0) {\n    result = 2; \n  }\n\n  if (result > 0 && result != lastResult) {\n    onChange(result, lux);\n  }\n\n  delay(1000);\n}\n\nvoid callback (char* topic, byte* payload, unsigned int length) {\n  String strTopic = String(topic);\n  String s = String((char*) payload).substring(0, length);\n  strTopic.replace(clientName, \"\");\n  if (strTopic == \"/settings/lux_threshold\") {\n    luxThreshold = atoi(s.c_str());\n  } else if (strTopic == \"/settings/sleepmin_oncheck\") {\n    sleepMinOnCheck = atoi(s.c_str());\n  } else if (strTopic == \"/settings/sleepmin_onchange\") {\n    sleepMinOnChange = atoi(s.c_str());\n  } else if (strTopic == \"/settings/sleep_hour\") {\n    char h[2];\n    for (int i = 0; i < 24; i++) {\n      sprintf(h, \"%02d\", i);\n      if (s.indexOf(h) != -1) {\n        sleepHour[i] = 1;\n      }\n    }\n  } else if (strTopic == \"/settings/sleep_dow\") {\n    s.toLowerCase();\n    if (s.indexOf(\"sun\") != -1) { \n      sleepDow[0] = 1;\n    }  \n    if (s.indexOf(\"mon\") != -1) { \n      sleepDow[1] = 1;\n    }  \n    if (s.indexOf(\"tue\") != -1) { \n      sleepDow[2] = 1;\n    }  \n    if (s.indexOf(\"wed\") != -1) { \n      sleepDow[3] = 1;\n    }  \n    if (s.indexOf(\"thu\") != -1) { \n      sleepDow[4] = 1;\n    }  \n    if (s.indexOf(\"fri\") != -1) { \n      sleepDow[5] = 1;\n    }  \n    if (s.indexOf(\"sat\") != -1) { \n      sleepDow[6] = 1;\n    }  \n  }\n  Serial.println(topic);\n  Serial.write(payload, length);\n  Serial.println(\"\");\n  cntPub++;\n}\n\nvoid onCheck() {\n  int dow = ((timeClient.getRawTime() + 32400) / 86400L + 4) % 7; \n  int hour = (timeClient.getRawTime() % 86400L / 3600 + 9) % 24;\n  if (sleepDow[dow] || sleepHour[hour]) {\n    ESP.deepSleep(sleepMinOnCheck * 60 * 1000 * 1000);\n    delay(1000);\n  }\n}\n\nvoid onChange(int result, int lux) {\n  mqttClient.connect(clientName.c_str(), MQTT_USER, MQTT_PASS);\n  String topic = clientName + \"/result\";\n  String payload = String(timeClient.getRawTime()) + \" \" + String(result) + \" \" + String(lux);\n  while (!mqttClient.publish(topic.c_str(), payload.c_str(), true)) {\n    delay(1000);\n  }\n  mqttClient.disconnect();\n\n  switch (result) {\n    case 1:\n      Serial.println(\"well-lighted\");\n      break;\n    case 2:\n      Serial.println(\"get dark\");\n      break;         \n  }\n  lastResult = result;\n  cntChange++;\n\n  if (sleepMinOnChange > 0 && cntChange > 1) {\n    ESP.deepSleep(sleepMinOnChange * 60 * 1000* 1000);\n  }\n}\n\n\n\n\u305d\u306e\u5f8c\n\u898b\u305f\u76ee\u304c\u3042\u3084\u3057\u3059\u304e\u308b\u3001\u3068\u304a\u53f1\u308a\u306e\u58f0\u3092\u591a\u6570\u3044\u305f\u3060\u304d\u307e\u3057\u3066\u3001100\u5186\u30b7\u30e7\u30c3\u30d7\u3067\u9069\u5f53\u306a\u30b1\u30fc\u30b9\u3092\u63a2\u3057\u3066\u304d\u307e\u3057\u305f\u3002\n\u30bb\u30f3\u30b5\u30fc\u3092\u8986\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u660e\u308b\u3055\u306e\u9055\u3044\u306f\u306a\u3093\u3068\u304b\u691c\u51fa\u3067\u304d\u3066\u3044\u307e\u3059\u3002\n\n\n\u304a\u307e\u3051\n\u3068\u3042\u308b\u4eba\u306bHTTP\u3067\u72b6\u614b\u53d6\u5f97\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u307b\u3057\u3044\u3068\u8a00\u308f\u308c\u3001Node.js\u3067HTTP\u30b5\u30fc\u30d0\u3092\u7acb\u3066\u307e\u3057\u305f\u3002\n\nhttpd.js\nvar resultStatus = '0';\n\nconst http = require('http');\nconst server = http.createServer((req, res) => {\n  function respond(code, body) {\n    switch (code) {\n      case 404:\n        body = '404 Not Found';\n        break;\n      case 405:\n        body = '405 Method Not Allowd';\n        break;\n      case 500:\n        body = '500 Internal Server Error';\n        break;\n    }\n    res.writeHead(code, {'Content-Type': 'text/plain'});\n    res.end(body);\n  }\n\n  if (req.method != 'GET') {\n    respond(405);\n    return;\n  }\n\n  var params = req.url.split('/');\n  if (params[1] != 'light') {\n    respond(404);\n    return;\n  }\n  switch (params[2]) {\n    case 'DEVICE_ID':\n      break;\n    default:\n      respond(404);\n      return;\n  }\n\n  switch (resultStatus) {\n    case '1':\n      respond(200, 'true');\n      break;\n    case '2':\n      respond(200, 'false');\n      break;\n    default:\n      respond(500);\n  }\n});\nserver.on('clientError', (err, socket) => {\n  socket.end('HTTP/1.1 400 Bad Request\\r\\n\\r\\n');\n});\nserver.listen(80);\n\nconst mqtt = require('mqtt');\nconst client = mqtt.connect('mqtt://localhost:1883', {'username': 'USERNAME', 'password': 'PASSWORD'});\nclient.on('connect', () => {\n  client.subscribe('DEVICE_ID/result');\n});\nclient.on('message', (topic, message) => {\n  var params = message.toString().split(' ');\n  resultStatus = params[1];\n});\n\n\n# \u306f\u3058\u307e\u308a\n\n\u3080\u304b\u3057\u3080\u304b\u3057\u3001IoT\u3068\u3044\u3046\u30d0\u30ba\u30ef\u30fc\u30c9\u3068\u5171\u306b\u3001\u30c8\u30a4\u30ec\u904b\u7528\u30a2\u30d7\u30ea\u304c\u6d41\u884c\u3063\u305f\u6642\u671f\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\u3082\u3046\u4f55\u756a\u714e\u3058\u304b\u3082\u308f\u304b\u3089\u306a\u3044\u3051\u3069\u3001\u8ca0\u3051\u3058\u3068\u4f5c\u3063\u3066\u307f\u305f\u3082\u306e\u3092\u3053\u3053\u306b\u516c\u958b\u3057\u307e\u3059\u3002\n\n# \u4ed5\u7d44\u307f\n\n\u79c1\u304c\u8db3\u7e41\u304f\u901a\u3063\u3066\u3044\u308b\u4f1a\u793e\u3067\u306f\u3001\u6771\u65e5\u672c\u5927\u9707\u707d\u306e\u6559\u8a13\u3092\u5fd8\u308c\u305a\u306b\u7bc0\u96fb\u306e\u610f\u8b58\u3092\u4fdd\u3063\u3066\u3044\u308b\u3053\u3068\u304b\u3089\u3001\u57fa\u672c\u7684\u306b\u30c8\u30a4\u30ec\u306e\u7167\u660e\u306f\u305d\u306e\u90fd\u5ea6\u6d88\u3057\u3066\u3044\u308b\u3068\u3044\u3046\u904b\u7528\u3067\u3059\u3002\n\u3068\u3001\u3044\u3046\u3053\u3068\u3067\u3001\u7a7a\u304d\u72b6\u6cc1\u306e\u30c1\u30a7\u30c3\u30af\u306f\u5149\u30bb\u30f3\u30b5\u30fc\u3072\u3068\u3064\u3067OK\u3067\u3057\u305f\u3002\n\n![20160402235311.png](https://qiita-image-store.s3.amazonaws.com/0/131050/e6e15291-c9e2-3493-a7c6-792cc80f37b9.png)\n\n# \u30c8\u30a4\u30ec\n\nESP-WROOM-02\u306f\u3001\u30b9\u30a4\u30c3\u30c1\u30b5\u30a4\u30a8\u30f3\u30b9\u3067\u958b\u767a\u30dc\u30fc\u30c9\u3092\u8cfc\u5165\u3057\u307e\u3057\u305f\u3002\n\u9078\u5b9a\u7406\u7531\u306f\u3001\u5168\u90e8\u8f09\u305b\u3067\u697d\u3060\u306a\u3068\u601d\u3063\u305f\u306e\u3067\u3002\n\n## \u4e3b\u306a\u90e8\u54c1\n\n| \u5546\u54c1\u540d | \u4fa1\u683c |\n|:--|--:|\n| ESP-WROOM-02\u958b\u767a\u30dc\u30fc\u30c9 | 2,160\u5186 |\n| TSL2561\u30c7\u30b8\u30bf\u30eb\u5149\u30bb\u30f3\u30b5\u30dc\u30fc\u30c9 | 702\u5186 |\n\n# AWS\n\n\u5f53\u521d\u306f\u3001AWS IoT\u3092\u4f7f\u3063\u3066\u307f\u305f\u304b\u3063\u305f\u3002\n\u3069\u3046\u3084\u3089\u3001ESP-WROOM-02\u3067\u306fTLS1.2\u306b\u5bfe\u5fdc\u3059\u308b\u306e\u304c\u96e3\u3057\u3044\u3089\u3057\u3044\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u65ad\u5ff5\u3057\u307e\u3057\u305f\u3002\n\u3067\u3001EC2\u306bMosquitto\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3057\u305f\u3002 Hubot\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3053\u3068\u304b\u3089\u3001\u3069\u3061\u3089\u306b\u3057\u308d\u5225\u9014\u30b5\u30fc\u30d0\u306f\u5fc5\u8981\u3060\u3063\u305f\u304b\u306a\u3002\n\u7279\u306bEC2\u3067\u3042\u308b\u5fc5\u7136\u6027\u306f\u306a\u304f\u3001\u30b9\u30da\u30c3\u30af\u3082\u6700\u4f4e\u9650\u306e\u3082\u306e\u3067OK\u3067\u3059\u3002\n\n# Hubot #1\n\nhttps://github.com/kunikada/hubot-toilet\nHubot\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3002\u3053\u3093\u306a\u3053\u3068\u3084\u308a\u307e\u3059\u3002\n\n* Mosquitto\u306b\u30c8\u30a4\u30ec\u4f7f\u7528\u72b6\u6cc1\u306e\u554f\u3044\u5408\u308f\u305b\n* \u30c1\u30e3\u30c3\u30c8\u306e\u8fd4\u4e8b\u3001\u9023\u7d61\u306a\u3069\n* \u30bb\u30f3\u30b5\u30fc\u30c7\u30d0\u30a4\u30b9\u306e\u7d30\u304b\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\n\n# Hubot #2\n\nhttps://github.com/kunikada/hubot-chatwork\nChatWork\u30a2\u30c0\u30d7\u30bf\n\n\u304a\u305d\u3089\u304f\u3001\u307f\u3093\u306a\u304c\u4f7f\u3063\u3066\u3044\u308b\u3067\u3042\u308d\u3046\u3001\u30b0\u30b0\u3063\u305f\u3089\u51fa\u3066\u304f\u308bChatWork\u30a2\u30c0\u30d7\u30bf\u306b\u82e5\u5e72\u624b\u3092\u5165\u308c\u307e\u3057\u305f\u3002\n\u30eb\u30fc\u30e0\u306e\u6307\u5b9a\u3092\u3057\u306a\u304f\u3066\u3082\u3044\u3044\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n# \u30c1\u30e3\u30c3\u30c8\n\n\u3046\u3061\u306e\u4f1a\u793e\u3067\u306f\u3001ChatWork\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u6b63\u76f4API\u306f\u4f7f\u3044\u306b\u304f\u3044\u3067\u3059\u3002\n\u5c02\u7528\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u7528\u610f\u3057\u3066\u3001API\u306e\u4f7f\u7528\u7533\u8acb\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e\u3042\u305f\u308a\u306f\u3001Slack\u3092\u4f7f\u7528\u3059\u308b\u306e\u3067\u3042\u308c\u3070\u3001Hubot\u306e\u30a2\u30c0\u30d7\u30bf\u3092Slack\u306b\u5909\u3048\u308c\u3070\u3044\u3044\u306e\u3067\u7f6e\u304d\u63db\u3048\u53ef\u80fd\u3067\u3059\u3002\n\n# \u4f7f\u7528\u30a4\u30e1\u30fc\u30b8\n\n![20160403005246.jpg](https://qiita-image-store.s3.amazonaws.com/0/131050/3e4681e1-a193-e8cf-d0ae-233dcf2791ff.jpeg)\n\n![20160403012942.png](https://qiita-image-store.s3.amazonaws.com/0/131050/55544c61-39f0-d920-5eb8-fb42119c81a7.png)\n\n\n# \u611f\u60f3\n\n\u5f53\u521d\u3001\u8a2d\u7f6e\u306e\u81ea\u7531\u5ea6\u306e\u305f\u3081\u306b\u3001\u4e7e\u96fb\u6c60\u3084\u30d0\u30c3\u30c6\u30ea\u30fc\u99c6\u52d5\u3092\u76ee\u6307\u3057\u3066\u307f\u307e\u3057\u305f\u304c\u3001\u601d\u3063\u305f\u3088\u308a\u96fb\u529b\u3092\u6d88\u8cbb\u3057\u3066\u3044\u307e\u3059\u3002\n\u30b3\u30f3\u30bb\u30f3\u30c8\u304c\u8fd1\u304f\u306b\u3042\u308b\u306a\u3089\u3001\u7d20\u76f4\u306b\u305d\u3053\u304b\u3089\u96fb\u6e90\u3092\u3068\u3063\u305f\u307b\u3046\u304c\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n\u96fb\u6c60\u3067\u3084\u308b\u3068\u3057\u305f\u3089\u3001\u30d1\u30fc\u30c4\u69cb\u6210\u3068\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u898b\u76f4\u3057\u304c\u5fc5\u8981\u305d\u3046\u3067\u3059\u3002\n\n# \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n```c:sketch.ino\n#include <Wire.h>\n#include <Ethernet.h>\n#include <ESP8266WiFi.h>\n#include <NTPClient.h>\n#include <PubSubClient.h>\n#include <TSL2561.h>\n\n#define WIFI_SSID \"YOUR_WIFI_SSID\"\n#define WIFI_PASS \"YOUR_WIFI_PASSWORD\"\n\nIPAddress mqttHost(123, 45, 67, 89);\n#define MQTT_PORT 1883\n#define MQTT_USER \"YOUR_MQTT_USER\"\n#define MQTT_PASS \"YOUR_MQTT_PASSWORD\"\n\n#define TSL2561_VDD 2\n#define TSL2561_GND 15\n#define TSL2561_SDA 13\n#define TSL2561_SCL 12\n#define TSL2561_ADDR 0x39\n\nvoid callback(char*, byte*, unsigned int);\nvoid onCheck();\nvoid onChange(int, int);\n\nWiFiClient wifiClient;\nNTPClient timeClient(\"ntp.jst.mfeed.ad.jp\");\nPubSubClient mqttClient(mqttHost, MQTT_PORT, callback, wifiClient);\nString clientName;\nint cntPub = 0;\nint cntChange = 0;\n\nTSL2561 tsl(TSL2561_ADDR);\nint progress, lastResult;\nint luxThreshold = 50;\nint sleepMinOnCheck = 10;\nint sleepMinOnChange = 0;\nbool sleepHour[24] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\nbool sleepDow[7] = {0,0,0,0,0,0,0};\n\nvoid setup() {\n  Serial.begin(115200);\n  \n  WiFi.begin(WIFI_SSID, WIFI_PASS);\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(1000);\n    Serial.print(\".\");\n  }\n  Serial.println(\"connected\");\n\n  while (timeClient.getRawTime() < 60) { // 1 minute timeout\n    timeClient.update();\n    delay(2000);\n  }\n\n  // \u8b58\u5225\u5b50\u3068\u3057\u3066MAC\u30a2\u30c9\u30ec\u30b9\u3092\u4f7f\u7528\n  uint8_t mac[6];\n  WiFi.macAddress(mac);\n  for (int i = 0; i < 6; i++) {\n    clientName += String(mac[i], HEX);\n  }\n\n  // MQTT\u30b5\u30fc\u30d0\u304b\u3089\u8a2d\u5b9a\u3092\u53d6\u5f97\n  mqttClient.connect(clientName.c_str(), MQTT_USER, MQTT_PASS);\n  String topic = \"reset/\" + clientName;\n  String payload = String(timeClient.getRawTime());\n  mqttClient.publish(topic.c_str(), payload.c_str(), true);\n  topic = clientName + \"/settings/lux_threshold\";\n  mqttClient.subscribe(topic.c_str(), 1);\n  topic = clientName + \"/settings/sleepmin_oncheck\";\n  mqttClient.subscribe(topic.c_str(), 1);\n  topic = clientName + \"/settings/sleepmin_onchange\";\n  mqttClient.subscribe(topic.c_str(), 1);\n  topic = clientName + \"/settings/sleep_hour\";\n  mqttClient.subscribe(topic.c_str(), 1);\n  topic = clientName + \"/settings/sleep_dow\";\n  mqttClient.subscribe(topic.c_str(), 1);\n  for (int i = 0; i < 15; i++) {\n    if (cntPub == 5) {\n      Serial.println(\"settings loaded\");\n      break;\n    }\n    mqttClient.loop();\n    delay(1000);\n    Serial.print(\".\");\n  }\n  mqttClient.disconnect();\n\n  // \u30d4\u30f3\u8a2d\u5b9a\n  pinMode(TSL2561_VDD, OUTPUT);\n  pinMode(TSL2561_GND, OUTPUT);\n  digitalWrite(TSL2561_VDD, HIGH);\n  digitalWrite(TSL2561_GND, LOW);\n  Wire.begin(TSL2561_SDA, TSL2561_SCL);\n \n  // \u5468\u56f2\u306e\u660e\u6697\u72b6\u6cc1\u306b\u5408\u308f\u305b\u3066\u9069\u5207\u306b\u30b2\u30a4\u30f3\u3092\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\n  //tsl.setGain(TSL2561_GAIN_0X);         // \u30b2\u30a4\u30f3\u306a\u3057:\u5468\u56f2\u304c\u660e\u308b\u3044\u5834\u5408\n  tsl.setGain(TSL2561_GAIN_16X);      // \u30b2\u30a4\u30f3x16:\u5468\u56f2\u304c\u6697\u3044\u5834\u5408\n\n  // \u7a4d\u7b97\u6642\u9593\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u3067\u3001\u5149\u306e\u6e2c\u5b9a\u6642\u9593\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\n  // \u9577\u6642\u9593\u6e2c\u5b9a\u3059\u308b\u3068\u3001\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\u306f\u9045\u304f\u306a\u308a\u307e\u3059\u304c\u3001\u4f4e\u5149\u5ea6\u74b0\u5883\u3067\u306e\u6e2c\u5b9a\u6027\u80fd\u304c\u5411\u4e0a\u3057\u307e\u3059\n  tsl.setTiming(TSL2561_INTEGRATIONTIME_13MS);  // \u77ed\u6642\u9593\u6e2c\u5b9a:\u660e\u308b\u3044\u74b0\u5883\n  //tsl.setTiming(TSL2561_INTEGRATIONTIME_101MS);  // \u4e2d\u6642\u9593\u6e2c\u5b9a:\u4e2d\u7a0b\u5ea6\u306e\u660e\u308b\u3055\n  //tsl.setTiming(TSL2561_INTEGRATIONTIME_402MS);  // \u6700\u9577\u6642\u9593\u6e2c\u5b9a:\u6697\u3044\u74b0\u5883\n}\n\nvoid loop() {\n  onCheck();\n\n  // \u660e\u308b\u3055\u3092\u53d6\u5f97\n  uint32_t lum = tsl.getFullLuminosity();\n  uint16_t ir = lum >> 16;\n  uint16_t full = lum & 0xFFFF;\n  uint32_t lux = tsl.calculateLux(full, ir);\n\n  // \u540c\u3058\u72b6\u614b\u304c5\u56de\u9023\u7d9a\u3057\u305f\u5834\u5408\u306b\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u5909\u66f4  \n  int result = 0;\n  progress = progress << 1;\n  if (lux > luxThreshold) {\n    progress++;\n  }\n  progress &= 0x1f;\n  if (progress == 0x1f) {\n    result = 1;\n  } else if (progress == 0) {\n    result = 2; \n  }\n\n  if (result > 0 && result != lastResult) {\n    onChange(result, lux);\n  }\n  \n  delay(1000);\n}\n\nvoid callback (char* topic, byte* payload, unsigned int length) {\n  String strTopic = String(topic);\n  String s = String((char*) payload).substring(0, length);\n  strTopic.replace(clientName, \"\");\n  if (strTopic == \"/settings/lux_threshold\") {\n    luxThreshold = atoi(s.c_str());\n  } else if (strTopic == \"/settings/sleepmin_oncheck\") {\n    sleepMinOnCheck = atoi(s.c_str());\n  } else if (strTopic == \"/settings/sleepmin_onchange\") {\n    sleepMinOnChange = atoi(s.c_str());\n  } else if (strTopic == \"/settings/sleep_hour\") {\n    char h[2];\n    for (int i = 0; i < 24; i++) {\n      sprintf(h, \"%02d\", i);\n      if (s.indexOf(h) != -1) {\n        sleepHour[i] = 1;\n      }\n    }\n  } else if (strTopic == \"/settings/sleep_dow\") {\n    s.toLowerCase();\n    if (s.indexOf(\"sun\") != -1) { \n      sleepDow[0] = 1;\n    }  \n    if (s.indexOf(\"mon\") != -1) { \n      sleepDow[1] = 1;\n    }  \n    if (s.indexOf(\"tue\") != -1) { \n      sleepDow[2] = 1;\n    }  \n    if (s.indexOf(\"wed\") != -1) { \n      sleepDow[3] = 1;\n    }  \n    if (s.indexOf(\"thu\") != -1) { \n      sleepDow[4] = 1;\n    }  \n    if (s.indexOf(\"fri\") != -1) { \n      sleepDow[5] = 1;\n    }  \n    if (s.indexOf(\"sat\") != -1) { \n      sleepDow[6] = 1;\n    }  \n  }\n  Serial.println(topic);\n  Serial.write(payload, length);\n  Serial.println(\"\");\n  cntPub++;\n}\n  \nvoid onCheck() {\n  int dow = ((timeClient.getRawTime() + 32400) / 86400L + 4) % 7; \n  int hour = (timeClient.getRawTime() % 86400L / 3600 + 9) % 24;\n  if (sleepDow[dow] || sleepHour[hour]) {\n    ESP.deepSleep(sleepMinOnCheck * 60 * 1000 * 1000);\n    delay(1000);\n  }\n}\n\nvoid onChange(int result, int lux) {\n  mqttClient.connect(clientName.c_str(), MQTT_USER, MQTT_PASS);\n  String topic = clientName + \"/result\";\n  String payload = String(timeClient.getRawTime()) + \" \" + String(result) + \" \" + String(lux);\n  while (!mqttClient.publish(topic.c_str(), payload.c_str(), true)) {\n    delay(1000);\n  }\n  mqttClient.disconnect();\n      \n  switch (result) {\n    case 1:\n      Serial.println(\"well-lighted\");\n      break;\n    case 2:\n      Serial.println(\"get dark\");\n      break;         \n  }\n  lastResult = result;\n  cntChange++;\n    \n  if (sleepMinOnChange > 0 && cntChange > 1) {\n    ESP.deepSleep(sleepMinOnChange * 60 * 1000* 1000);\n  }\n}\n```\n\n# \u305d\u306e\u5f8c\n\n\u898b\u305f\u76ee\u304c\u3042\u3084\u3057\u3059\u304e\u308b\u3001\u3068\u304a\u53f1\u308a\u306e\u58f0\u3092\u591a\u6570\u3044\u305f\u3060\u304d\u307e\u3057\u3066\u3001100\u5186\u30b7\u30e7\u30c3\u30d7\u3067\u9069\u5f53\u306a\u30b1\u30fc\u30b9\u3092\u63a2\u3057\u3066\u304d\u307e\u3057\u305f\u3002\n\u30bb\u30f3\u30b5\u30fc\u3092\u8986\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u660e\u308b\u3055\u306e\u9055\u3044\u306f\u306a\u3093\u3068\u304b\u691c\u51fa\u3067\u304d\u3066\u3044\u307e\u3059\u3002\n\n![DSC_0024.JPG](https://qiita-image-store.s3.amazonaws.com/0/131050/ba5cba5e-2327-31a6-8fb8-2f7ae47bf29a.jpeg)\n\n# \u304a\u307e\u3051\n\n\u3068\u3042\u308b\u4eba\u306bHTTP\u3067\u72b6\u614b\u53d6\u5f97\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u307b\u3057\u3044\u3068\u8a00\u308f\u308c\u3001Node.js\u3067HTTP\u30b5\u30fc\u30d0\u3092\u7acb\u3066\u307e\u3057\u305f\u3002\n\n```js:httpd.js\nvar resultStatus = '0';\n\nconst http = require('http');\nconst server = http.createServer((req, res) => {\n  function respond(code, body) {\n    switch (code) {\n      case 404:\n        body = '404 Not Found';\n        break;\n      case 405:\n        body = '405 Method Not Allowd';\n        break;\n      case 500:\n        body = '500 Internal Server Error';\n        break;\n    }\n    res.writeHead(code, {'Content-Type': 'text/plain'});\n    res.end(body);\n  }\n\n  if (req.method != 'GET') {\n    respond(405);\n    return;\n  }\n\n  var params = req.url.split('/');\n  if (params[1] != 'light') {\n    respond(404);\n    return;\n  }\n  switch (params[2]) {\n    case 'DEVICE_ID':\n      break;\n    default:\n      respond(404);\n      return;\n  }\n\n  switch (resultStatus) {\n    case '1':\n      respond(200, 'true');\n      break;\n    case '2':\n      respond(200, 'false');\n      break;\n    default:\n      respond(500);\n  }\n});\nserver.on('clientError', (err, socket) => {\n  socket.end('HTTP/1.1 400 Bad Request\\r\\n\\r\\n');\n});\nserver.listen(80);\n\nconst mqtt = require('mqtt');\nconst client = mqtt.connect('mqtt://localhost:1883', {'username': 'USERNAME', 'password': 'PASSWORD'});\nclient.on('connect', () => {\n  client.subscribe('DEVICE_ID/result');\n});\nclient.on('message', (topic, message) => {\n  var params = message.toString().split(' ');\n  resultStatus = params[1];\n});\n```\n", "tags": ["ESP-WROOM-02", "Hubot", "Arduino", "chatwork", "IoT"]}