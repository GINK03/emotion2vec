{"context": " More than 1 year has passed since last update.\u4eca\u56de\u306f\u30e9\u30e0\u30c0\u5f0f\u306b\u3064\u3044\u3066\u3067\u3059\u3002\n\uff08\u3082\u3046\u30e9\u30e0\u30c0\u30fb\u30e1\u30bd\u30c3\u30c9\u53c2\u7167\u306b\u95a2\u308f\u3089\u306a\u3044\u30cd\u30bf\u304c\u601d\u3044\u4ed8\u304b\u306a\u3044\u3067\u3059\u3002\uff09\n\u30e9\u30e0\u30c0\u5f0f\u306e\u66f8\u304d\u65b9\u306b\u3064\u3044\u3066\u306f\u4ed6\u3067\u7d39\u4ecb\u3057\u3066\u308b\u30da\u30fc\u30b8\u3092\u53c2\u8003\u306b\u3057\u3066\u3082\u3089\u3046\u3068\u3057\u3066\u3001\n\u3053\u3053\u3067\u306f\u30e9\u30e0\u30c0\u5f0f1\u3092\u66f8\u3044\u305f\u5834\u5408\u3069\u3046\u3044\u3046\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u751f\u6210\u3055\u308c\u308b\u304b\u78ba\u8a8d\u3057\u3066\u304a\u304d\u305f\u3044\u3067\u3059\u3002\n\u53c2\u8003\uff1ahttp://www.oracle.com/technetwork/jp/articles/java/architect-lambdas-part2-2081439-ja.html\n\u307e\u305f\u30bd\u30fc\u30c8\u3092\u4f8b\u306b\u3057\u307e\u3059\u3002\n\n\u30bd\u30fc\u30c8\u3092\u30e9\u30e0\u30c0\u5f0f1\u306b\u7f6e\u304d\u63db\u3048\u308b\n\n\u30e9\u30e0\u30c0\u4f7f\u308f\u306a\u3044\n    /**\n     * \u5927\u6587\u5b57\u5c0f\u6587\u5b57\u7121\u8996\u3057\u305f\u30bd\u30fc\u30c8\n     */\n    public static void sort() {\n        List<String> list = new ArrayList<>(Arrays.asList(\"C\", \"b\", \"A\"));\n        Collections.sort(list, new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return o1.compareToIgnoreCase(o2);\n            }\n        });\n        System.out.println(list);//[A, b, C]\n    }\n\n\n\u304c\u30e9\u30e0\u30c0\u5f0f1\u3060\u3068\u3001\n\n\u30e9\u30e0\u30c0\u5f0f\uff08\u30e1\u30bd\u30c3\u30c9\u53c2\u7167\uff09\n    public static void sort() {\n        List<String> list = new ArrayList<>(Arrays.asList(\"C\", \"b\", \"A\"));\n        list.sort(String::compareToIgnoreCase);\n        System.out.println(list);//[A, b, C]\n    }\n\n\n\u308f\u30fc\u77ed\u304f\u66f8\u3051\u308b\u306d\u3002\u3063\u3066\u8a71\u3067\u306f\u306a\u304f\u3066\u3067\u3059\u306d\u3001\n\u3053\u306e2\u3064\u304c\u3069\u3046\u3044\u3046\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u3055\u308c\u308b\u304b\u78ba\u8a8d\u3057\u305f\u3044\u3068\u3044\u3046\u8a71\u3067\u3059\u3002\n\nComparator\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u6570\u3092\u78ba\u8a8d\u3057\u3066\u307f\u308b\n\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081Comparator\u3092\u5909\u6570\u306b\u4e00\u65e6\u683c\u7d0d\u3059\u308b\u306e\u3068\u3001\n\u3053\u308c\u3089\u306e\u30ed\u30b8\u30c3\u30af\u309210\u56de\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u30e9\u30e0\u30c0\u4f7f\u308f\u306a\u3044\n    /**\n     * Comparator\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u6570\u78ba\u8a8d\n     */\n    public static void sortAndCheck() {\n        Set<Comparator<String>> set = new HashSet<>();\n        for (int i = 0; i < 10; i++) {\n            List<String> list = new ArrayList<>(Arrays.asList(\"C\", \"b\", \"A\"));\n            Comparator<String> comparator = new Comparator<String>() {\n                @Override\n                public int compare(String o1, String o2) {\n                    return o1.compareToIgnoreCase(o2);\n                }\n            };\n            set.add(comparator);\n            Collections.sort(list, comparator);\n            System.out.println(i + 1 + \" \" + list);\n        }\n        System.out.println(\"count:\" + set.size());//set.size()\u306f10\n    }\n\n\n\n\u30e9\u30e0\u30c0\u5f0f\uff08\u30e1\u30bd\u30c3\u30c9\u53c2\u7167\uff09\n    public static void sortAndCheck() {\n        Set<Comparator<String>> set = new HashSet<>();\n        for (int i = 0; i < 10; i++) {\n            List<String> list = new ArrayList<>(Arrays.asList(\"C\", \"b\", \"A\"));\n            Comparator<String> comparator = String::compareToIgnoreCase;\n            set.add(comparator);\n            Collections.sort(list, comparator);\n            System.out.println(i + 1 + \" \" + list);\n        }\n        System.out.println(\"count:\" + set.size());//set.size()\u306f1\n    }\n\n\n\u3067\u5b9f\u884c\u3059\u308b\u3068\u30e9\u30e0\u30c0\u4f7f\u308f\u306a\u3044\u307b\u3046\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c10\u500b\u751f\u6210\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u305d\u308c\u306b\u6bd4\u3079\u3066\u30e9\u30e0\u30c0\u5f0f1\u306e\u65b9\u306f1\u500b\u3060\u3051\u3067\u3059\u3002\n\u3064\u307e\u308a\u30e9\u30e0\u30c0\u4f7f\u308f\u305a\u306b\u30e9\u30e0\u30c0\u5f0f1\u306e\u65b9\u3092\u518d\u73fe\u3059\u308b\u3068\u6b63\u3057\u304f\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u30e9\u30e0\u30c0\u5f0f1\u3092\u30e9\u30e0\u30c0\u5f0f\u3058\u3083\u306a\u3044\u8a18\u8ff0\u306b\u7f6e\u304d\u63db\u3048\u308b\n\n\u30e9\u30e0\u30c0\u4f7f\u308f\u306a\u3044\n    private static final Comparator<String> comparatorIgnoreCase = new Comparator<String>() {\n        @Override\n        public int compare(String o1, String o2) {\n            return o1.compareToIgnoreCase(o2);\n        }\n    };\n\n    /**\n     * \u5927\u6587\u5b57\u5c0f\u6587\u5b57\u7121\u8996\u3057\u305f\u30bd\u30fc\u30c8\n     */\n    public static void sort() {\n        List<String> list = new ArrayList<>(Arrays.asList(\"C\", \"b\", \"A\"));\n        Collections.sort(list, comparatorIgnoreCase);\n        System.out.println(list);//[A, b, C]\n    }\n\n    /**\n     * Comparator\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u6570\u78ba\u8a8d\n     */\n    public static void sortAndCheck() {\n        Set<Comparator<String>> set = new HashSet<>();\n        for (int i = 0; i < 10; i++) {\n            List<String> list = new ArrayList<>(Arrays.asList(\"C\", \"b\", \"A\"));\n            Comparator<String> comparator = comparatorIgnoreCase;\n            set.add(comparator);\n            Collections.sort(list, comparator);\n            System.out.println(i + 1 + \" \" + list);\n        }\n        System.out.println(\"count:\" + set.size());//set.size()\u306f1\n    }\n\n\n\u3053\u3053\u307e\u3067\u66f8\u304f\u3050\u3089\u3044\u306a\u3089\u30e9\u30e0\u30c0\u5f0f\u66f8\u3044\u305f\u65b9\u304c\u660e\u3089\u304b\u306b\u30b9\u30de\u30fc\u30c8\u3067\u3059\u306d\u3002\n\n\u307e\u3068\u3081\n\u30e9\u30e0\u30c0\u5f0f\u306f\u5358\u7d14\u7f6e\u304d\u63db\u3048\u5143\u3088\u308a\u306f\u660e\u3089\u304b\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u7bc0\u7d04\u3067\u304d\u308b\u3068\u3044\u3046\u8a71\u3067\u3057\u305f\u3002\n\u203b\u4eca\u56de\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u7bc0\u7d04\u3067\u304d\u308b\u4f8b\u3067\u66f8\u3044\u305f\u3060\u3051\u3067\u5fc5\u305a\u305d\u3046\u306a\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u3000\u6761\u4ef6\u307e\u3068\u3081\u308b\u306e\u3081\u3093\u3069\u304f\u3055\u3044\u306e\u3067\u66f8\u304d\u307e\u305b\u3093\u304c\u3001\u57fa\u672c\u7684\u306b\u306f\u3084\u3063\u3071\u308a\u7bc0\u7d04\u3067\u304d\u308b\u306f\u305a\u3067\u3059\u3002\n\n\u305d\u306e5\u306b\u3064\u3065\u304f\u3002\uff08\u30cd\u30bf\u8003\u3048\u307e\u3059\uff09\n\u305d\u306e1\uff1aJava8\u304c\u597d\u304d\u306b\u306a\u308b\u8a71\uff08StreamAPI\u306e\u8a71\u306f\u3057\u306a\u3044\uff09 \u305d\u306e1 Map#computeIfAbsent\u3068List#sort\n\u305d\u306e2\uff1aJava8\u304c\u597d\u304d\u306b\u306a\u308b\u8a71\uff08StreamAPI\u306e\u8a71\u306f\u3057\u306a\u3044\uff09 \u305d\u306e2 Optional#map\n\u305d\u306e3\uff1aJava8\u304c\u597d\u304d\u306b\u306a\u308b\u8a71\uff08StreamAPI\u306e\u8a71\u306f\u3057\u306a\u3044\uff09 \u305d\u306e3 \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u88c5\n\n\n\n\n\u3068\u3044\u3046\u304b\u30e1\u30bd\u30c3\u30c9\u53c2\u7167\u00a0\u21a9\n\n\n\n\u4eca\u56de\u306f\u30e9\u30e0\u30c0\u5f0f\u306b\u3064\u3044\u3066\u3067\u3059\u3002\n\uff08\u3082\u3046\u30e9\u30e0\u30c0\u30fb\u30e1\u30bd\u30c3\u30c9\u53c2\u7167\u306b\u95a2\u308f\u3089\u306a\u3044\u30cd\u30bf\u304c\u601d\u3044\u4ed8\u304b\u306a\u3044\u3067\u3059\u3002\uff09\n\u30e9\u30e0\u30c0\u5f0f\u306e\u66f8\u304d\u65b9\u306b\u3064\u3044\u3066\u306f\u4ed6\u3067\u7d39\u4ecb\u3057\u3066\u308b\u30da\u30fc\u30b8\u3092\u53c2\u8003\u306b\u3057\u3066\u3082\u3089\u3046\u3068\u3057\u3066\u3001\n\u3053\u3053\u3067\u306f\u30e9\u30e0\u30c0\u5f0f[^1]\u3092\u66f8\u3044\u305f\u5834\u5408\u3069\u3046\u3044\u3046\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u751f\u6210\u3055\u308c\u308b\u304b\u78ba\u8a8d\u3057\u3066\u304a\u304d\u305f\u3044\u3067\u3059\u3002\n\u53c2\u8003\uff1ahttp://www.oracle.com/technetwork/jp/articles/java/architect-lambdas-part2-2081439-ja.html\n\n\u307e\u305f\u30bd\u30fc\u30c8\u3092\u4f8b\u306b\u3057\u307e\u3059\u3002\n#\u30bd\u30fc\u30c8\u3092\u30e9\u30e0\u30c0\u5f0f[^1]\u306b\u7f6e\u304d\u63db\u3048\u308b\n```java:\u30e9\u30e0\u30c0\u4f7f\u308f\u306a\u3044\n\t/**\n\t * \u5927\u6587\u5b57\u5c0f\u6587\u5b57\u7121\u8996\u3057\u305f\u30bd\u30fc\u30c8\n\t */\n\tpublic static void sort() {\n\t\tList<String> list = new ArrayList<>(Arrays.asList(\"C\", \"b\", \"A\"));\n\t\tCollections.sort(list, new Comparator<String>() {\n\t\t\t@Override\n\t\t\tpublic int compare(String o1, String o2) {\n\t\t\t\treturn o1.compareToIgnoreCase(o2);\n\t\t\t}\n\t\t});\n\t\tSystem.out.println(list);//[A, b, C]\n\t}\n```\n\u304c\u30e9\u30e0\u30c0\u5f0f[^1]\u3060\u3068\u3001\n\n```java:\u30e9\u30e0\u30c0\u5f0f\uff08\u30e1\u30bd\u30c3\u30c9\u53c2\u7167\uff09\n\tpublic static void sort() {\n\t\tList<String> list = new ArrayList<>(Arrays.asList(\"C\", \"b\", \"A\"));\n\t\tlist.sort(String::compareToIgnoreCase);\n\t\tSystem.out.println(list);//[A, b, C]\n\t}\n```\n\u308f\u30fc\u77ed\u304f\u66f8\u3051\u308b\u306d\u3002\u3063\u3066\u8a71\u3067\u306f\u306a\u304f\u3066\u3067\u3059\u306d\u3001\n\u3053\u306e2\u3064\u304c\u3069\u3046\u3044\u3046\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u3055\u308c\u308b\u304b\u78ba\u8a8d\u3057\u305f\u3044\u3068\u3044\u3046\u8a71\u3067\u3059\u3002\n\n#Comparator\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u6570\u3092\u78ba\u8a8d\u3057\u3066\u307f\u308b\n\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081Comparator\u3092\u5909\u6570\u306b\u4e00\u65e6\u683c\u7d0d\u3059\u308b\u306e\u3068\u3001\n\u3053\u308c\u3089\u306e\u30ed\u30b8\u30c3\u30af\u309210\u56de\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n\n```java:\u30e9\u30e0\u30c0\u4f7f\u308f\u306a\u3044\n\t/**\n\t * Comparator\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u6570\u78ba\u8a8d\n\t */\n\tpublic static void sortAndCheck() {\n\t\tSet<Comparator<String>> set = new HashSet<>();\n\t\tfor (int i = 0; i < 10; i++) {\n\t\t\tList<String> list = new ArrayList<>(Arrays.asList(\"C\", \"b\", \"A\"));\n\t\t\tComparator<String> comparator = new Comparator<String>() {\n\t\t\t\t@Override\n\t\t\t\tpublic int compare(String o1, String o2) {\n\t\t\t\t\treturn o1.compareToIgnoreCase(o2);\n\t\t\t\t}\n\t\t\t};\n\t\t\tset.add(comparator);\n\t\t\tCollections.sort(list, comparator);\n\t\t\tSystem.out.println(i + 1 + \" \" + list);\n\t\t}\n\t\tSystem.out.println(\"count:\" + set.size());//set.size()\u306f10\n\t}\n```\n```java:\u30e9\u30e0\u30c0\u5f0f\uff08\u30e1\u30bd\u30c3\u30c9\u53c2\u7167\uff09\n\tpublic static void sortAndCheck() {\n\t\tSet<Comparator<String>> set = new HashSet<>();\n\t\tfor (int i = 0; i < 10; i++) {\n\t\t\tList<String> list = new ArrayList<>(Arrays.asList(\"C\", \"b\", \"A\"));\n\t\t\tComparator<String> comparator = String::compareToIgnoreCase;\n\t\t\tset.add(comparator);\n\t\t\tCollections.sort(list, comparator);\n\t\t\tSystem.out.println(i + 1 + \" \" + list);\n\t\t}\n\t\tSystem.out.println(\"count:\" + set.size());//set.size()\u306f1\n\t}\n```\n\n\u3067\u5b9f\u884c\u3059\u308b\u3068\u30e9\u30e0\u30c0\u4f7f\u308f\u306a\u3044\u307b\u3046\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c10\u500b\u751f\u6210\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u305d\u308c\u306b\u6bd4\u3079\u3066\u30e9\u30e0\u30c0\u5f0f[^1]\u306e\u65b9\u306f1\u500b\u3060\u3051\u3067\u3059\u3002\n\n\u3064\u307e\u308a\u30e9\u30e0\u30c0\u4f7f\u308f\u305a\u306b\u30e9\u30e0\u30c0\u5f0f[^1]\u306e\u65b9\u3092\u518d\u73fe\u3059\u308b\u3068\u6b63\u3057\u304f\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n#\u30e9\u30e0\u30c0\u5f0f[^1]\u3092\u30e9\u30e0\u30c0\u5f0f\u3058\u3083\u306a\u3044\u8a18\u8ff0\u306b\u7f6e\u304d\u63db\u3048\u308b\n```java:\u30e9\u30e0\u30c0\u4f7f\u308f\u306a\u3044\n\tprivate static final Comparator<String> comparatorIgnoreCase = new Comparator<String>() {\n\t\t@Override\n\t\tpublic int compare(String o1, String o2) {\n\t\t\treturn o1.compareToIgnoreCase(o2);\n\t\t}\n\t};\n\n\t/**\n\t * \u5927\u6587\u5b57\u5c0f\u6587\u5b57\u7121\u8996\u3057\u305f\u30bd\u30fc\u30c8\n\t */\n\tpublic static void sort() {\n\t\tList<String> list = new ArrayList<>(Arrays.asList(\"C\", \"b\", \"A\"));\n\t\tCollections.sort(list, comparatorIgnoreCase);\n\t\tSystem.out.println(list);//[A, b, C]\n\t}\n\n\t/**\n\t * Comparator\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u6570\u78ba\u8a8d\n\t */\n\tpublic static void sortAndCheck() {\n\t\tSet<Comparator<String>> set = new HashSet<>();\n\t\tfor (int i = 0; i < 10; i++) {\n\t\t\tList<String> list = new ArrayList<>(Arrays.asList(\"C\", \"b\", \"A\"));\n\t\t\tComparator<String> comparator = comparatorIgnoreCase;\n\t\t\tset.add(comparator);\n\t\t\tCollections.sort(list, comparator);\n\t\t\tSystem.out.println(i + 1 + \" \" + list);\n\t\t}\n\t\tSystem.out.println(\"count:\" + set.size());//set.size()\u306f1\n\t}\n```\n\n\u3053\u3053\u307e\u3067\u66f8\u304f\u3050\u3089\u3044\u306a\u3089\u30e9\u30e0\u30c0\u5f0f\u66f8\u3044\u305f\u65b9\u304c\u660e\u3089\u304b\u306b\u30b9\u30de\u30fc\u30c8\u3067\u3059\u306d\u3002\n\n\n#\u307e\u3068\u3081\n\u30e9\u30e0\u30c0\u5f0f\u306f\u5358\u7d14\u7f6e\u304d\u63db\u3048\u5143\u3088\u308a\u306f\u660e\u3089\u304b\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u7bc0\u7d04\u3067\u304d\u308b\u3068\u3044\u3046\u8a71\u3067\u3057\u305f\u3002\n\n\u203b\u4eca\u56de\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u7bc0\u7d04\u3067\u304d\u308b\u4f8b\u3067\u66f8\u3044\u305f\u3060\u3051\u3067\u5fc5\u305a\u305d\u3046\u306a\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u3000\u6761\u4ef6\u307e\u3068\u3081\u308b\u306e\u3081\u3093\u3069\u304f\u3055\u3044\u306e\u3067\u66f8\u304d\u307e\u305b\u3093\u304c\u3001\u57fa\u672c\u7684\u306b\u306f\u3084\u3063\u3071\u308a\u7bc0\u7d04\u3067\u304d\u308b\u306f\u305a\u3067\u3059\u3002\n\n---\n\n\u305d\u306e5\u306b\u3064\u3065\u304f\u3002\uff08\u30cd\u30bf\u8003\u3048\u307e\u3059\uff09\n\n\u305d\u306e1\uff1a[Java8\u304c\u597d\u304d\u306b\u306a\u308b\u8a71\uff08StreamAPI\u306e\u8a71\u306f\u3057\u306a\u3044\uff09 \u305d\u306e1 Map#computeIfAbsent\u3068List#sort](http://qiita.com/ota-meshi/items/31f36d38d4da8fce3c57)\n\u305d\u306e2\uff1a[Java8\u304c\u597d\u304d\u306b\u306a\u308b\u8a71\uff08StreamAPI\u306e\u8a71\u306f\u3057\u306a\u3044\uff09 \u305d\u306e2 Optional#map](http://qiita.com/ota-meshi/items/dbdd592b613e38b7a4bb)\n\u305d\u306e3\uff1a[Java8\u304c\u597d\u304d\u306b\u306a\u308b\u8a71\uff08StreamAPI\u306e\u8a71\u306f\u3057\u306a\u3044\uff09 \u305d\u306e3 \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u88c5](http://qiita.com/ota-meshi/items/43811647af9daed4d21e)\n[^1]: \u3068\u3044\u3046\u304b\u30e1\u30bd\u30c3\u30c9\u53c2\u7167\n", "tags": ["Java", "java8"]}