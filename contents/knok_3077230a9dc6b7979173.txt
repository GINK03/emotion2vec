{"context": "\u3059\u3067\u306bLSTM\u3092\u4f7f\u3063\u3066\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u65b9\u304c\u3044\u307e\u3059\u304c\u3001\u3053\u306e\u7a0b\u5ea6\u3067\u3042\u308c\u3070\u5358\u7d14\u306aRNN\u3060\u3051\u3067\u3082\u5b66\u7fd2\u3067\u304d\u308b\u306f\u305a\u3060\u3068\u601d\u3044\u3001RNN\u306e\u7406\u89e3\u3092\u517c\u306d\u3066Chainer\u3067\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u66f8\u7c4d\u300c\u6df1\u5c64\u5b66\u7fd2 (\u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb\u30b7\u30ea\u30fc\u30ba)\u300d(ISBN-13: 978-4061529021)\u306e7.5\u306b\u3088\u308c\u3070\u3001RNN\u304c\u8a18\u61b6\u3067\u304d\u308b\u306e\u306f\u904e\u53bb10\u6642\u523b\u5206\u7a0b\u5ea6\u3068\u3042\u308a\u307e\u3059\u3002\u300c\u30ba\u30f3\u300d\u304c4\u56de\u3001\u300c\u30c9\u30b3\u300d\u304c1\u56de\u51fa\u73fe\u3059\u308b\u30d1\u30bf\u30fc\u30f3\u3092\u899a\u3048\u308c\u3070\u826f\u3044\u306e\u3067\u3001\u3053\u306e\u7bc4\u56f2\u306b\u53ce\u307e\u308b\u306f\u305a\u3067\u3059\u3002\n\n\u8003\u3048\u65b9\n\u3067\u304d\u308b\u3060\u3051\u30b7\u30f3\u30d7\u30eb\u306a\u69cb\u9020\u3092\u8003\u3048\u307e\u3057\u305f\u3002\u5165\u529b\u306f2\u3064($x_1, x_2$)\u3068\u3057\u307e\u3059\u3002\u4e2d\u9593\u5c64\u3092\u4e00\u3064\u6301\u3061\u3001\u30e6\u30cb\u30c3\u30c8\u6570\u309210\u3068\u3057\u307e\u3059\u3002\u51fa\u529b\u30822\u3064($y_1, y_2$)\u3068\u3057\u307e\u3059\u3002\n\u5165\u529b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\u30ba\u30f3 \u2192 x_0 = 0, x_1 = 1 \\\\\n\u30c9\u30b3 \u2192 x_0 = 1, x_1 = 0\n\n\u51fa\u529b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u5358\u7d14\u306a\u5206\u985e\u554f\u984c\u3068\u3057\u307e\u3059\u3002\n\u30ad\u30e8\u30b7\u4e0d\u6210\u7acb \u2192 y_0 = 1, y_1 = 0 \\\\\n\u30ad\u30e8\u30b7\u6210\u7acb \u2192 y_0 = 0, y_1 = 1\n\n\n\u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9\n\u30b3\u30fc\u30c9\u306b\u3088\u308b\u5b9a\u7fa9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u306a\u308a\u307e\u3059\u3002\nimport numpy as np\nimport chainer\nfrom chainer import cuda, Function, gradient_check, Variable, optimizers, serializers, utils\nfrom chainer import Link, Chain, ChainList\nimport chainer.functions as F\nimport chainer.links as L\n\nclass RNN(chainer.Chain):\n    def __init__(self):\n        super(RNN, self).__init__(\n            w1 = L.Linear(2, 10),\n            h1 = L.Linear(10, 10),\n            o = L.Linear(10, 2)\n            )\n    def reset_state(self):\n        self.last_z = chainer.Variable(np.zeros((1,10), dtype=np.float32))\n    def __call__(self, x):\n        z = F.relu(self.w1(x) + self.h1(self.last_z))\n        self.last_z = z\n        y = F.relu(self.o(z))\n        return y\n\nrnn = RNN()\nrnn.reset_state()\nmodel = L.Classifier(rnn)\noptimizer = optimizers.Adam() # Adam\u3092\u4f7f\u3046\noptimizer.setup(model)\noptimizer.add_hook(chainer.optimizer.GradientClipping(10.0)) #\u52fe\u914d\u306e\u4e0a\u9650\u3092\u8a2d\u5b9a\n\n\n\u30b5\u30a4\u30ba\u30921\u56fa\u5b9a\u306e\u30df\u30cb\u30d0\u30c3\u30c1\u524d\u63d0\u3068\u3057\u3001\u521d\u671f\u5024(last_z)\u3092\u30bc\u30ed\u3068\u3057\u307e\u3059\u3002\u4e00\u5ea6\u8a08\u7b97\u3057\u305f\u96a0\u308c\u5c64\u306e\u5024\u3092self.last_z\u306b\u4fdd\u6301\u3057\u3064\u3064\u3001\u305d\u306e\u7d50\u679c\u3092\u51fa\u529b\u5c64\u306b\u4e0e\u3048\u3066\u3044\u307e\u3059\u3002\n\n\u5b66\u7fd2\n\u9069\u5ea6\u306b\u30e9\u30f3\u30c0\u30e0\u306a\u7cfb\u5217\u30c7\u30fc\u30bf\u3092\u751f\u6210\u3057\u3001\u305d\u308c\u3092\u5b66\u7fd2\u3055\u305b\u307e\u3059\u3002\nans_zundoko = [0, 0, 0, 0, 1] # \u6b63\u89e3\u5217\nsrc_x_ary = [0, 0, 0, 1] # \u4e71\u6570\u751f\u6210\u7528\u914d\u5217 0 \u306e\u51fa\u73fe\u7387\u30921\u3088\u308a\u9ad8\u304f\u3059\u308b\n\ndef zd_gen(): # \u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n    x_ary = [0, 0, 0, 0, 1]\n    y_ary = [0, 0, 0, 0, 1]\n    while True:\n        x = x_ary.pop(0)\n        y = y_ary.pop(0)\n        x = [0, 1] if x == 0 else [1, 0]\n        yield x, y\n        new_x = src_x_ary[np.random.randint(0, 4)] # 0\u301c2\u3067\u3042\u308c\u30700, 3\u3067\u3042\u308c\u30701\u3068\u3059\u308b\n        x_ary.append(new_x)\n        y_ary.append(1 if x_ary == ans_zundoko else 0) # x_ary\u304c[0, 0, 0, 0, 1]\u306e\u6642\u3060\u30511\n\nbprop_len = 40 # BPPT\u306e\u6253\u3061\u5207\u308a\u6642\u523b\niter = 300 * 100 * 2 # \u5b66\u7fd2\u56de\u6570\nloss = 0\ni = 0\nfor xx, yy in zd_gen():\n    x = chainer.Variable(np.asarray([xx], dtype=np.float32))\n    t = chainer.Variable(np.asarray([yy], dtype=np.int32))\n    loss += model(x, t)\n    i += 1\n    if i % bprop_len == 0:\n        model.zerograds()\n        loss.backward()\n        loss.unchain_backward()\n        optimizer.update()\n        print(\"iter %d, loss %f, x %d, y %d\" % (i, loss.data, xx[0], yy))\n        loss = 0\n    if i > iter:\n        break\n\n\n\u5b66\u7fd2\u306f\u6642\u9593\u304c\u304b\u304b\u308b\u4e0a\u306b\u3001\u521d\u671f\u5024\u306b\u3088\u3063\u3066\u3046\u307e\u304f\u3044\u3063\u305f\u308a\u3044\u304b\u306a\u304b\u3063\u305f\u308a\u3057\u307e\u3059\u3002\u6700\u7d42\u7684\u306b\u640d\u5931\u304c0.1\u3092\u5207\u308b\u3050\u3089\u3044\u306e\u5024\u306b\u306a\u3089\u306a\u3044\u3068\u3061\u3083\u3093\u3068\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3002\n\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u3092SGD\u306b\u5909\u3048\u305f\u308a\u3001bprop_len\u3092\u5909\u3048\u305f\u308a\u3057\u3066\u307f\u3066\u3082\u7d50\u679c\u304c\u5909\u308f\u3063\u3066\u304d\u307e\u3059\u3002\u3053\u3053\u3067\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u5024\u306f\u624b\u5143\u3067\u306a\u3093\u3068\u306a\u304f\u3046\u307e\u304f\u884c\u3063\u305f\u30b1\u30fc\u30b9\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u8a55\u4fa1\n\u5b66\u7fd2\u5b8c\u4e86\u3057\u305f\u30e2\u30c7\u30eb\u3092\u8a55\u4fa1\u3057\u307e\u3059\u3002\u5165\u529b\u5217\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u751f\u6210\u3057\u3066\u3082\u826f\u3044\u3067\u3059\u304c\u3001\u7c21\u5358\u306b\u3059\u308b\u305f\u3081\u9759\u7684\u306a\u8a55\u4fa1\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n# \u30ba\u30f3 \u30ba\u30f3 \u30ba\u30f3 \u30ba\u30f3 \u30c9\u30b3 \u30c9\u30b3 \u30c9\u30b3 \u30ba\u30f3\nx_data = [[0,1], [0,1], [0,1], [0,1], [1,0], [1,0], [1,0], [0,1]]\n\nrnn.reset_state()\nfor xx in x_data:\n    print('\u30ba\u30f3' if xx[1] == 1 else '\u30c9\u30b3')\n    x = chainer.Variable(np.asarray([xx], dtype=np.float32))\n    y = model.predictor(x)\n    z = F.softmax(y, use_cudnn=False)\n    if z.data[0].argmax() == 1: # \u5024\u306e\u5927\u304d\u3044\u65b9\u306e\u914d\u5217\u6dfb\u5b57\u304c1\u306e\u5834\u5408\u30ad\u30e8\u30b7\u6210\u7acb\n        print('\u30ad\u30e8\u30b7')\n\n\n\u53c2\u8003\u51fa\u529b\n\u3046\u307e\u304f\u884c\u3063\u305f\u5834\u5408\u306e\u51fa\u529b\u3092\u53c2\u8003\u307e\u3067\u306b\u793a\u3057\u3066\u304a\u304d\u307e\u3059\u3002\niter 59520, loss 0.037670, x 1, y 0\niter 59560, loss 0.051628, x 0, y 0\niter 59600, loss 0.037519, x 0, y 0\niter 59640, loss 0.041894, x 0, y 0\niter 59680, loss 0.059143, x 0, y 0\niter 59720, loss 0.062305, x 0, y 0\niter 59760, loss 0.055293, x 0, y 0\niter 59800, loss 0.060964, x 1, y 1\niter 59840, loss 0.057446, x 1, y 0\niter 59880, loss 0.034730, x 1, y 0\niter 59920, loss 0.054435, x 0, y 0\niter 59960, loss 0.039648, x 0, y 0\niter 60000, loss 0.036578, x 0, y 0\n\u30ba\u30f3\n\u30ba\u30f3\n\u30ba\u30f3\n\u30ba\u30f3\n\u30c9\u30b3\n\u30ad\u30e8\u30b7\n\u30c9\u30b3\n\u30c9\u30b3\n\u30ba\u30f3\n\n\n\u611f\u60f3\n\u81ea\u5206\u306e\u4e2d\u3067\u6d88\u5316\u3057\u304d\u308c\u3066\u3044\u306a\u304b\u3063\u305fRNN\u304c\u3053\u308c\u3067\u3088\u3046\u3084\u304f\u7406\u89e3\u3067\u304d\u305f\u6c17\u304c\u3057\u307e\u3059\u3002\u6700\u521d\u3001\u4e2d\u9593\u5c64\u306e\u30e6\u30cb\u30c3\u30c8\u6570\u304c\u5c11\u306a\u304b\u3063\u305f\u308aBPTT\u306e\u6253\u3061\u5207\u308a\u6642\u523b\u3092\u77ed\u304f\u3057\u3059\u304e\u305f\u308a\u3057\u3066\u307e\u3063\u305f\u304f\u601d\u3046\u3088\u3046\u306b\u52d5\u304b\u306a\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u3044\u308d\u3044\u308d\u3068\u8abf\u6574\u3057\u3066\u3088\u3046\u3084\u304f\u52d5\u4f5c\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u4e16\u9593\u306b\u306fLSTM\u3068\u5358\u8a9e\u57cb\u3081\u8fbc\u307f\u8868\u73fe\u3092\u4f7f\u3063\u305f\u5b9f\u4f8b\u306f\u591a\u304f\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u3082\u3063\u3068\u6700\u5c0f\u5316\u3057\u305f\u554f\u984c\u3067\u3084\u3063\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u3001\u3088\u3046\u3084\u304f\u5b9f\u73fe\u3067\u304d\u3066\u6e80\u8db3\u3067\u3059\u3002\n\u3057\u304b\u3057\u3001\u307e\u3060\u904b\u306b\u983c\u308b\u90e8\u5206\u304c\u3042\u308b\u306e\u304c\u56f0\u308a\u3082\u306e\u3067\u3059\u3002\n\u3059\u3067\u306b[LSTM\u3092\u4f7f\u3063\u3066\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u65b9](http://qiita.com/dsanno/items/3b8e75c91cee799877a4)\u304c\u3044\u307e\u3059\u304c\u3001\u3053\u306e\u7a0b\u5ea6\u3067\u3042\u308c\u3070\u5358\u7d14\u306aRNN\u3060\u3051\u3067\u3082\u5b66\u7fd2\u3067\u304d\u308b\u306f\u305a\u3060\u3068\u601d\u3044\u3001RNN\u306e\u7406\u89e3\u3092\u517c\u306d\u3066Chainer\u3067\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u66f8\u7c4d\u300c[\u6df1\u5c64\u5b66\u7fd2](http://bookclub.kodansha.co.jp/product?isbn=9784061529021) (\u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb\u30b7\u30ea\u30fc\u30ba)\u300d(ISBN-13: 978-4061529021)\u306e7.5\u306b\u3088\u308c\u3070\u3001RNN\u304c\u8a18\u61b6\u3067\u304d\u308b\u306e\u306f\u904e\u53bb10\u6642\u523b\u5206\u7a0b\u5ea6\u3068\u3042\u308a\u307e\u3059\u3002\u300c\u30ba\u30f3\u300d\u304c4\u56de\u3001\u300c\u30c9\u30b3\u300d\u304c1\u56de\u51fa\u73fe\u3059\u308b\u30d1\u30bf\u30fc\u30f3\u3092\u899a\u3048\u308c\u3070\u826f\u3044\u306e\u3067\u3001\u3053\u306e\u7bc4\u56f2\u306b\u53ce\u307e\u308b\u306f\u305a\u3067\u3059\u3002\n\n# \u8003\u3048\u65b9\n\n\u3067\u304d\u308b\u3060\u3051\u30b7\u30f3\u30d7\u30eb\u306a\u69cb\u9020\u3092\u8003\u3048\u307e\u3057\u305f\u3002\u5165\u529b\u306f2\u3064($x_1, x_2$)\u3068\u3057\u307e\u3059\u3002\u4e2d\u9593\u5c64\u3092\u4e00\u3064\u6301\u3061\u3001\u30e6\u30cb\u30c3\u30c8\u6570\u309210\u3068\u3057\u307e\u3059\u3002\u51fa\u529b\u30822\u3064($y_1, y_2$)\u3068\u3057\u307e\u3059\u3002\n\u5165\u529b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```math\n\u30ba\u30f3 \u2192 x_0 = 0, x_1 = 1 \\\\\n\u30c9\u30b3 \u2192 x_0 = 1, x_1 = 0\n```\n\u51fa\u529b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u5358\u7d14\u306a\u5206\u985e\u554f\u984c\u3068\u3057\u307e\u3059\u3002\n\n```math\n\u30ad\u30e8\u30b7\u4e0d\u6210\u7acb \u2192 y_0 = 1, y_1 = 0 \\\\\n\u30ad\u30e8\u30b7\u6210\u7acb \u2192 y_0 = 0, y_1 = 1\n```\n\n# \u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9\n\u30b3\u30fc\u30c9\u306b\u3088\u308b\u5b9a\u7fa9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u306a\u308a\u307e\u3059\u3002\n\n```py\nimport numpy as np\nimport chainer\nfrom chainer import cuda, Function, gradient_check, Variable, optimizers, serializers, utils\nfrom chainer import Link, Chain, ChainList\nimport chainer.functions as F\nimport chainer.links as L\n\nclass RNN(chainer.Chain):\n    def __init__(self):\n        super(RNN, self).__init__(\n            w1 = L.Linear(2, 10),\n            h1 = L.Linear(10, 10),\n            o = L.Linear(10, 2)\n            )\n    def reset_state(self):\n        self.last_z = chainer.Variable(np.zeros((1,10), dtype=np.float32))\n    def __call__(self, x):\n        z = F.relu(self.w1(x) + self.h1(self.last_z))\n        self.last_z = z\n        y = F.relu(self.o(z))\n        return y\n\nrnn = RNN()\nrnn.reset_state()\nmodel = L.Classifier(rnn)\noptimizer = optimizers.Adam() # Adam\u3092\u4f7f\u3046\noptimizer.setup(model)\noptimizer.add_hook(chainer.optimizer.GradientClipping(10.0)) #\u52fe\u914d\u306e\u4e0a\u9650\u3092\u8a2d\u5b9a\n\n```\n\n\u30b5\u30a4\u30ba\u30921\u56fa\u5b9a\u306e\u30df\u30cb\u30d0\u30c3\u30c1\u524d\u63d0\u3068\u3057\u3001\u521d\u671f\u5024(last_z)\u3092\u30bc\u30ed\u3068\u3057\u307e\u3059\u3002\u4e00\u5ea6\u8a08\u7b97\u3057\u305f\u96a0\u308c\u5c64\u306e\u5024\u3092self.last_z\u306b\u4fdd\u6301\u3057\u3064\u3064\u3001\u305d\u306e\u7d50\u679c\u3092\u51fa\u529b\u5c64\u306b\u4e0e\u3048\u3066\u3044\u307e\u3059\u3002\n\n# \u5b66\u7fd2\n\n\u9069\u5ea6\u306b\u30e9\u30f3\u30c0\u30e0\u306a\u7cfb\u5217\u30c7\u30fc\u30bf\u3092\u751f\u6210\u3057\u3001\u305d\u308c\u3092\u5b66\u7fd2\u3055\u305b\u307e\u3059\u3002\n\n```py\nans_zundoko = [0, 0, 0, 0, 1] # \u6b63\u89e3\u5217\nsrc_x_ary = [0, 0, 0, 1] # \u4e71\u6570\u751f\u6210\u7528\u914d\u5217 0 \u306e\u51fa\u73fe\u7387\u30921\u3088\u308a\u9ad8\u304f\u3059\u308b\n\ndef zd_gen(): # \u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n    x_ary = [0, 0, 0, 0, 1]\n    y_ary = [0, 0, 0, 0, 1]\n    while True:\n        x = x_ary.pop(0)\n        y = y_ary.pop(0)\n        x = [0, 1] if x == 0 else [1, 0]\n        yield x, y\n        new_x = src_x_ary[np.random.randint(0, 4)] # 0\u301c2\u3067\u3042\u308c\u30700, 3\u3067\u3042\u308c\u30701\u3068\u3059\u308b\n        x_ary.append(new_x)\n        y_ary.append(1 if x_ary == ans_zundoko else 0) # x_ary\u304c[0, 0, 0, 0, 1]\u306e\u6642\u3060\u30511\n\nbprop_len = 40 # BPPT\u306e\u6253\u3061\u5207\u308a\u6642\u523b\niter = 300 * 100 * 2 # \u5b66\u7fd2\u56de\u6570\nloss = 0\ni = 0\nfor xx, yy in zd_gen():\n    x = chainer.Variable(np.asarray([xx], dtype=np.float32))\n    t = chainer.Variable(np.asarray([yy], dtype=np.int32))\n    loss += model(x, t)\n    i += 1\n    if i % bprop_len == 0:\n        model.zerograds()\n        loss.backward()\n        loss.unchain_backward()\n        optimizer.update()\n        print(\"iter %d, loss %f, x %d, y %d\" % (i, loss.data, xx[0], yy))\n        loss = 0\n    if i > iter:\n        break\n\n```\n\n\u5b66\u7fd2\u306f\u6642\u9593\u304c\u304b\u304b\u308b\u4e0a\u306b\u3001\u521d\u671f\u5024\u306b\u3088\u3063\u3066\u3046\u307e\u304f\u3044\u3063\u305f\u308a\u3044\u304b\u306a\u304b\u3063\u305f\u308a\u3057\u307e\u3059\u3002\u6700\u7d42\u7684\u306b\u640d\u5931\u304c0.1\u3092\u5207\u308b\u3050\u3089\u3044\u306e\u5024\u306b\u306a\u3089\u306a\u3044\u3068\u3061\u3083\u3093\u3068\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3002\n\n\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u3092SGD\u306b\u5909\u3048\u305f\u308a\u3001bprop_len\u3092\u5909\u3048\u305f\u308a\u3057\u3066\u307f\u3066\u3082\u7d50\u679c\u304c\u5909\u308f\u3063\u3066\u304d\u307e\u3059\u3002\u3053\u3053\u3067\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u5024\u306f\u624b\u5143\u3067\u306a\u3093\u3068\u306a\u304f\u3046\u307e\u304f\u884c\u3063\u305f\u30b1\u30fc\u30b9\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\n# \u8a55\u4fa1\n\n\u5b66\u7fd2\u5b8c\u4e86\u3057\u305f\u30e2\u30c7\u30eb\u3092\u8a55\u4fa1\u3057\u307e\u3059\u3002\u5165\u529b\u5217\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u751f\u6210\u3057\u3066\u3082\u826f\u3044\u3067\u3059\u304c\u3001\u7c21\u5358\u306b\u3059\u308b\u305f\u3081\u9759\u7684\u306a\u8a55\u4fa1\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n```py\n# \u30ba\u30f3 \u30ba\u30f3 \u30ba\u30f3 \u30ba\u30f3 \u30c9\u30b3 \u30c9\u30b3 \u30c9\u30b3 \u30ba\u30f3\nx_data = [[0,1], [0,1], [0,1], [0,1], [1,0], [1,0], [1,0], [0,1]]\n\nrnn.reset_state()\nfor xx in x_data:\n    print('\u30ba\u30f3' if xx[1] == 1 else '\u30c9\u30b3')\n    x = chainer.Variable(np.asarray([xx], dtype=np.float32))\n    y = model.predictor(x)\n    z = F.softmax(y, use_cudnn=False)\n    if z.data[0].argmax() == 1: # \u5024\u306e\u5927\u304d\u3044\u65b9\u306e\u914d\u5217\u6dfb\u5b57\u304c1\u306e\u5834\u5408\u30ad\u30e8\u30b7\u6210\u7acb\n        print('\u30ad\u30e8\u30b7')\n```\n\n# \u53c2\u8003\u51fa\u529b\n\n\u3046\u307e\u304f\u884c\u3063\u305f\u5834\u5408\u306e\u51fa\u529b\u3092\u53c2\u8003\u307e\u3067\u306b\u793a\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```shell-session\niter 59520, loss 0.037670, x 1, y 0\niter 59560, loss 0.051628, x 0, y 0\niter 59600, loss 0.037519, x 0, y 0\niter 59640, loss 0.041894, x 0, y 0\niter 59680, loss 0.059143, x 0, y 0\niter 59720, loss 0.062305, x 0, y 0\niter 59760, loss 0.055293, x 0, y 0\niter 59800, loss 0.060964, x 1, y 1\niter 59840, loss 0.057446, x 1, y 0\niter 59880, loss 0.034730, x 1, y 0\niter 59920, loss 0.054435, x 0, y 0\niter 59960, loss 0.039648, x 0, y 0\niter 60000, loss 0.036578, x 0, y 0\n\u30ba\u30f3\n\u30ba\u30f3\n\u30ba\u30f3\n\u30ba\u30f3\n\u30c9\u30b3\n\u30ad\u30e8\u30b7\n\u30c9\u30b3\n\u30c9\u30b3\n\u30ba\u30f3\n```\n\n# \u611f\u60f3\n\n\u81ea\u5206\u306e\u4e2d\u3067\u6d88\u5316\u3057\u304d\u308c\u3066\u3044\u306a\u304b\u3063\u305fRNN\u304c\u3053\u308c\u3067\u3088\u3046\u3084\u304f\u7406\u89e3\u3067\u304d\u305f\u6c17\u304c\u3057\u307e\u3059\u3002\u6700\u521d\u3001\u4e2d\u9593\u5c64\u306e\u30e6\u30cb\u30c3\u30c8\u6570\u304c\u5c11\u306a\u304b\u3063\u305f\u308aBPTT\u306e\u6253\u3061\u5207\u308a\u6642\u523b\u3092\u77ed\u304f\u3057\u3059\u304e\u305f\u308a\u3057\u3066\u307e\u3063\u305f\u304f\u601d\u3046\u3088\u3046\u306b\u52d5\u304b\u306a\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u3044\u308d\u3044\u308d\u3068\u8abf\u6574\u3057\u3066\u3088\u3046\u3084\u304f\u52d5\u4f5c\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u4e16\u9593\u306b\u306fLSTM\u3068\u5358\u8a9e\u57cb\u3081\u8fbc\u307f\u8868\u73fe\u3092\u4f7f\u3063\u305f\u5b9f\u4f8b\u306f\u591a\u304f\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u3082\u3063\u3068\u6700\u5c0f\u5316\u3057\u305f\u554f\u984c\u3067\u3084\u3063\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u3001\u3088\u3046\u3084\u304f\u5b9f\u73fe\u3067\u304d\u3066\u6e80\u8db3\u3067\u3059\u3002\n\n\u3057\u304b\u3057\u3001\u307e\u3060\u904b\u306b\u983c\u308b\u90e8\u5206\u304c\u3042\u308b\u306e\u304c\u56f0\u308a\u3082\u306e\u3067\u3059\u3002\n", "tags": ["Chainer", "\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7", "RNN", "Python"]}