{"context": " More than 1 year has passed since last update.mbind \u306fstd::bind\u3068\u540c\u3058\u3088\u3046\u306a\u3053\u3068\u3092\u30e1\u30bf\u95a2\u6570\u306a\u3069\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u540d\u306b\u5bfe\u3057\u3066\u884c\u3046\u3082\u306e\u3067\u3001\u578b\u3092\u5f15\u6570\u306b\u53d6\u308a\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u8a55\u4fa1\u3055\u308c\u308b\u5f0f\u3067\u3042\u308b\u3002\u4f5c\u3063\u30661\u5e74\u4ee5\u4e0a\u653e\u7f6e\u3057\u3066\u3044\u305f\u304c\u3001\u6700\u8fd1\u5c11\u3057\u76f4\u3057\u305f\u306e\u3067\u8a18\u4e8b\u306b\u3057\u305f\u3002\uff08Hatena Blog\u304b\u3089\u306e\u518d\u63b2\u3067\u3059\u3002\uff09\n\nclass template\uff1a mymd::mbind\nnamespace mymd {\n    // mbind\u306e\u4e3b\u8981\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\uff08\u4ed6\u306e\u30e1\u30f3\u30d0\u30fc\u306f\u7701\u7565\uff09\n    template <template <typename...> class M, typename... binder>\n    class mbind {\n    public:\n        template <typename... V>\n            using apply = \u5404\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u306bV...\u3092\u4ee3\u5165\u3057\u3066\u3067\u304d\u308b\u578b;\n    };\n}\n\n\n\u6982\u8981\n\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 M \u306b\u5bfe\u3057\u3001\u578b\u5f15\u6570\u3092\u90e8\u5206\u7684\u306b\u675f\u7e1b(bind)\u3059\u308b\u3002\nmbind<F, binder...> \u306e binder... \u306e\u4e2d\u306b\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0(_x_, _xrr_, _xrcv_ \u7b49)\u304c\u542b\u307e\u308c\u3066\u3044\u308c\u3070\u3001\u305d\u306e\u4f4d\u7f6e\u306b apply<V...> \u3092\u4f7f\u3063\u3066\u4efb\u610f\u306e\u578b\u3092\u4ee3\u5165\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\nM -- \u8907\u6570\u306e\u578b\u3092\u5f15\u6570\u306b\u53d6\u308b\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\nbinder... -- \u675f\u7e1b\u5bfe\u8c61\u306e\u578b\u3082\u3057\u304f\u306f\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0(_x_, _xrr_, _xrcv_ \u7b49)\u306e\u5217\n\n\u30e1\u30f3\u30d0\u30fc\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\napply -- apply<V...> \u304c\u578b\u3092\u5b9a\u7fa9\u3059\u308b\u3002V... \u306b\u5165\u308c\u3089\u308c\u308b\u578b\u306e\u6570\u306f\u3001mbind \u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570 binder... \u306b\u542b\u307e\u308c\u308b\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u306e\u6570\u306b\u7b49\u3057\u3044\u3002V... \u306b\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u304c\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f M<T...> \u306b\u306a\u308b\uff08M<T...>::type \u3067\u306f\u306a\u3044\uff09\u3002\u3053\u3053\u3067 T... \u306f binder... \u306e\u4e2d\u306e\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u3092\u9806\u306b V... \u306e\u5143\u306b\u7f6e\u304d\u63db\u3048\u305f\u3082\u306e\u3067\u3042\u308b\u3002\u3072\u3068\u3064\u4ee5\u4e0a\u306e\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u304c V... \u306b\u542b\u307e\u308c\u3066\u3044\u308b\u5834\u5408\u306f mbind \u578b\u3068\u306a\u308a\u3001\u7d9a\u3051\u3066 apply \u304c\u53ef\u80fd\u3068\u306a\u308b\u3002\n\n\u4f8b\n\u30e1\u30bf\u95a2\u6570\u306e\u4f8b\u3068\u3057\u3066<type_traits> \u306e std::is_convertible \u3092\u3068\u308b\u3002\n#include <type_traits>\nusing mymd::_x_;\nusing b = mymd::mbind<std::is_convertible, int, _x_>;           // \u7b2c1\u5f15\u6570\u3092int\u306b\u675f\u7e1b\u3059\u308b\nstatic_assert(b::apply<double>::value, \"not convertible!!\");    // int\u304b\u3089double\u3078\u306e\u5909\u63db\u306f\u53ef\u80fd\nstatic_assert(!b::apply<int*>::value, \"not convertible!!\");     // int\u304b\u3089int*\u3078\u306e\u5909\u63db\u306f\u4e0d\u53ef\u80fd\n\n\u6b21\u306ftuple \u306e\u4f8b\u3002\n#include <tuple>\n// \u5b8c\u6210\u578b\u306f5\u8981\u7d20\u306etuple\nusing tuple5 = std::tuple<char, std::string, int, char, int>;\nusing mymd::_x_;\n// 3\u3064\u306e\u578b\u3092\u675f\u7e1b\uff082\u3064\u306f\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\uff09\nusing bind_3_5 = mymd::mbind<std::tuple, char, _x_, int, _x_, int>;\n// \u6b8b\u308a\uff12\u3064\u306e\u578b\u3092\u6307\u5b9a\u3059\u308b\nusing bind_5_5 = bind_3_5::apply<std::string, char>;\nstatic_assert(std::is_same<bind_5_5, tuple5>::value, \"!=\");\n\n\n\u5b9a\u7fa9\u6e08\u307f\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\napply \u3067\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u306b\u5bfe\u3057\u3066\u4efb\u610f\u306e\u578b\u3092\u4ee3\u5165\u3057\u305f\u3068\u304d\u3001\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u306e\u7a2e\u985e\u306b\u3088\u3063\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u63db\u3055\u308c\u308b\u3002\nmymd::_x_ -- \u57fa\u672c\u306e\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u3002\u578b\u5909\u63db\u305b\u305a\u305d\u306e\u307e\u307e\u4ee3\u5165\u3055\u308c\u308b\u3002\nmymd::_xrr_ -- std::remove_reference<\u578b>::type \u304c\u4ee3\u5165\u3055\u308c\u308b\u3002\nmymd::_xrcv_ -- std::remove_cv<\u578b>::type \u304c\u4ee3\u5165\u3055\u308c\u308b\u3002\nmymd::_xrcvr_ -- std::remove_cv<std::remove_reference<\u578b>::type>::type \u304c\u4ee3\u5165\u3055\u308c\u308b\u3002\nmymd::_xdecay_ -- std::decay<\u578b>::type \u304c\u4ee3\u5165\u3055\u308c\u308b\u3002\n\u3053\u308c\u3089\u306f\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u751f\u6210\u578b\u3067\u3042\u308b mymd::_pX_ \u304b\u3089\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002_pX_ \u306b\u30e1\u30bf\u95a2\u6570\u306e\u5217 convert... \u3092\u4e0e\u3048\u3066 _pX_<convert...> \u3092\u4f5c\u308c\u3070\u3001\u578b T \u306b\u5bfe\u3057\u3066convert0<convert1<convert2<... <T>>...> \u304c\u8a55\u4fa1\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u305f\u3068\u3048\u3070 _xrcvr_ \u306f _pX_<std::remove_cv, std::remove_reference> \u3068\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\nconvert<T> \u304b convert<T>::type \u304b\u306f\u52dd\u624b\u306b\u5224\u65ad\u3057\u3066\u3044\u308b\u3002\uff08\u518d\u8003\u306e\u4f59\u5730\u3042\u308a\uff1f\uff09\n\n\u8ad6\u7406 or\u3001\u8ad6\u7406 and\u3001\u8ad6\u7406 not\nmbind \u305d\u306e\u3082\u306e\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u308b\u610f\u5473\u306f\u3042\u307e\u308a\u306a\u3044\u304c\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u5bfe\u3059\u308b operator ||, operator &&, operator ! \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u8ad6\u7406 or\u3001\u8ad6\u7406 and\u3001\u8ad6\u7406 not\u3092\u4f5c\u308b\u3068\u304d\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b\u3068\u3084\u308a\u3084\u3059\u3044\u3002\u3053\u308c\u3092\u578b\u306b\u5bfe\u3059\u308b\u5f0f\u3067\u8868\u305d\u3046\u3068\u3059\u308b\u3068\u76f8\u5f53\u3084\u3084\u3053\u3057\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u3002\n\n\u30e2\u30b8\u30e5\u30fc\u30eb\nhpp\u30d5\u30a1\u30a4\u30eb\uff1a\u3000https://github.com/mYmd/miscellaneous/blob/master/mbind.hpp\n\u30b5\u30f3\u30d7\u30eb\uff1a\u3000https://github.com/mYmd/miscellaneous/blob/master/test_mbind.cpp\n[Wandbox]\u4e09\u3078( \u3078\u055e\u0a0a \u055e)\u3078 \uff8a\uff6f\uff8a\uff6f \uff1a\u3000http://melpon.org/wandbox/permlink/6GFinX4byC5j6bCZ\nmbind \u306fstd::bind\u3068\u540c\u3058\u3088\u3046\u306a\u3053\u3068\u3092\u30e1\u30bf\u95a2\u6570\u306a\u3069\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u540d\u306b\u5bfe\u3057\u3066\u884c\u3046\u3082\u306e\u3067\u3001\u578b\u3092\u5f15\u6570\u306b\u53d6\u308a\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u8a55\u4fa1\u3055\u308c\u308b\u5f0f\u3067\u3042\u308b\u3002\u4f5c\u3063\u30661\u5e74\u4ee5\u4e0a\u653e\u7f6e\u3057\u3066\u3044\u305f\u304c\u3001\u6700\u8fd1\u5c11\u3057\u76f4\u3057\u305f\u306e\u3067\u8a18\u4e8b\u306b\u3057\u305f\u3002\uff08Hatena Blog\u304b\u3089\u306e\u518d\u63b2\u3067\u3059\u3002\uff09\n\n### class template\uff1a mymd::mbind\n```cpp\nnamespace mymd {\n    // mbind\u306e\u4e3b\u8981\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\uff08\u4ed6\u306e\u30e1\u30f3\u30d0\u30fc\u306f\u7701\u7565\uff09\n    template <template <typename...> class M, typename... binder>\n    class mbind {\n    public:\n        template <typename... V>\n            using apply = \u5404\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u306bV...\u3092\u4ee3\u5165\u3057\u3066\u3067\u304d\u308b\u578b;\n    };\n}\n```\n\n### \u6982\u8981\n\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 M \u306b\u5bfe\u3057\u3001\u578b\u5f15\u6570\u3092\u90e8\u5206\u7684\u306b\u675f\u7e1b(bind)\u3059\u308b\u3002\nmbind\\<F, binder...> \u306e binder... \u306e\u4e2d\u306b\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0(\\_x_, \\_xrr_, \\_xrcv_ \u7b49)\u304c\u542b\u307e\u308c\u3066\u3044\u308c\u3070\u3001\u305d\u306e\u4f4d\u7f6e\u306b apply\\<V...> \u3092\u4f7f\u3063\u3066\u4efb\u610f\u306e\u578b\u3092\u4ee3\u5165\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n### \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\nM -- \u8907\u6570\u306e\u578b\u3092\u5f15\u6570\u306b\u53d6\u308b\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\nbinder... -- \u675f\u7e1b\u5bfe\u8c61\u306e\u578b\u3082\u3057\u304f\u306f\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0(\\_x_, \\_xrr_, \\_xrcv_ \u7b49)\u306e\u5217\n\n### \u30e1\u30f3\u30d0\u30fc\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\napply -- apply\\<V...> \u304c\u578b\u3092\u5b9a\u7fa9\u3059\u308b\u3002V... \u306b\u5165\u308c\u3089\u308c\u308b\u578b\u306e\u6570\u306f\u3001mbind \u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570 binder... \u306b\u542b\u307e\u308c\u308b\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u306e\u6570\u306b\u7b49\u3057\u3044\u3002V... \u306b\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u304c\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f M\\<T...> \u306b\u306a\u308b\uff08M\\<T...>::type \u3067\u306f\u306a\u3044\uff09\u3002\u3053\u3053\u3067 T... \u306f binder... \u306e\u4e2d\u306e\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u3092\u9806\u306b V... \u306e\u5143\u306b\u7f6e\u304d\u63db\u3048\u305f\u3082\u306e\u3067\u3042\u308b\u3002\u3072\u3068\u3064\u4ee5\u4e0a\u306e\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u304c V... \u306b\u542b\u307e\u308c\u3066\u3044\u308b\u5834\u5408\u306f mbind \u578b\u3068\u306a\u308a\u3001\u7d9a\u3051\u3066 apply \u304c\u53ef\u80fd\u3068\u306a\u308b\u3002\n\n### \u4f8b\n\u30e1\u30bf\u95a2\u6570\u306e\u4f8b\u3068\u3057\u3066\\<type_traits\\> \u306e std::is_convertible \u3092\u3068\u308b\u3002\n\n```cpp\n#include <type_traits>\nusing mymd::_x_;\nusing b = mymd::mbind<std::is_convertible, int, _x_>;           // \u7b2c1\u5f15\u6570\u3092int\u306b\u675f\u7e1b\u3059\u308b\nstatic_assert(b::apply<double>::value, \"not convertible!!\");    // int\u304b\u3089double\u3078\u306e\u5909\u63db\u306f\u53ef\u80fd\nstatic_assert(!b::apply<int*>::value, \"not convertible!!\");     // int\u304b\u3089int*\u3078\u306e\u5909\u63db\u306f\u4e0d\u53ef\u80fd\n```\n\u6b21\u306ftuple \u306e\u4f8b\u3002\n\n```cpp\n#include <tuple>\n// \u5b8c\u6210\u578b\u306f5\u8981\u7d20\u306etuple\nusing tuple5 = std::tuple<char, std::string, int, char, int>;\nusing mymd::_x_;\n// 3\u3064\u306e\u578b\u3092\u675f\u7e1b\uff082\u3064\u306f\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\uff09\nusing bind_3_5 = mymd::mbind<std::tuple, char, _x_, int, _x_, int>;\n// \u6b8b\u308a\uff12\u3064\u306e\u578b\u3092\u6307\u5b9a\u3059\u308b\nusing bind_5_5 = bind_3_5::apply<std::string, char>;\nstatic_assert(std::is_same<bind_5_5, tuple5>::value, \"!=\");\n```\n\n### \u5b9a\u7fa9\u6e08\u307f\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\napply \u3067\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u306b\u5bfe\u3057\u3066\u4efb\u610f\u306e\u578b\u3092\u4ee3\u5165\u3057\u305f\u3068\u304d\u3001\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u306e\u7a2e\u985e\u306b\u3088\u3063\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u63db\u3055\u308c\u308b\u3002\nmymd::\\_x\\_ -- \u57fa\u672c\u306e\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u3002\u578b\u5909\u63db\u305b\u305a\u305d\u306e\u307e\u307e\u4ee3\u5165\u3055\u308c\u308b\u3002\nmymd::\\_xrr\\_ -- std::remove_reference<\u578b>::type \u304c\u4ee3\u5165\u3055\u308c\u308b\u3002\nmymd::\\_xrcv\\_ -- std::remove_cv\\<\u578b>::type \u304c\u4ee3\u5165\u3055\u308c\u308b\u3002\nmymd::\\_xrcvr\\_ -- std::remove_cv\\<std::remove_reference<\u578b>::type>::type \u304c\u4ee3\u5165\u3055\u308c\u308b\u3002\nmymd::\\_xdecay\\_ -- std::decay<\u578b>::type \u304c\u4ee3\u5165\u3055\u308c\u308b\u3002\n\n\u3053\u308c\u3089\u306f\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u751f\u6210\u578b\u3067\u3042\u308b mymd::\\_pX_ \u304b\u3089\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\\_pX_ \u306b\u30e1\u30bf\u95a2\u6570\u306e\u5217 convert... \u3092\u4e0e\u3048\u3066 \\_pX_\\<convert...> \u3092\u4f5c\u308c\u3070\u3001\u578b T \u306b\u5bfe\u3057\u3066convert0\\<convert1\\<convert2\\<... \\<T>>...> \u304c\u8a55\u4fa1\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u305f\u3068\u3048\u3070 \\_xrcvr_ \u306f \\_pX_\\<std::remove_cv, std::remove_reference> \u3068\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\nconvert\\<T> \u304b convert\\<T>::type \u304b\u306f\u52dd\u624b\u306b\u5224\u65ad\u3057\u3066\u3044\u308b\u3002\uff08\u518d\u8003\u306e\u4f59\u5730\u3042\u308a\uff1f\uff09\n\n### \u8ad6\u7406 or\u3001\u8ad6\u7406 and\u3001\u8ad6\u7406 not\nmbind \u305d\u306e\u3082\u306e\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u308b\u610f\u5473\u306f\u3042\u307e\u308a\u306a\u3044\u304c\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u5bfe\u3059\u308b operator ||, operator &&, operator ! \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u8ad6\u7406 or\u3001\u8ad6\u7406 and\u3001\u8ad6\u7406 not\u3092\u4f5c\u308b\u3068\u304d\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b\u3068\u3084\u308a\u3084\u3059\u3044\u3002\u3053\u308c\u3092\u578b\u306b\u5bfe\u3059\u308b\u5f0f\u3067\u8868\u305d\u3046\u3068\u3059\u308b\u3068\u76f8\u5f53\u3084\u3084\u3053\u3057\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u3002\n\n### \u30e2\u30b8\u30e5\u30fc\u30eb\nhpp\u30d5\u30a1\u30a4\u30eb\uff1a\u3000https://github.com/mYmd/miscellaneous/blob/master/mbind.hpp\n\u30b5\u30f3\u30d7\u30eb\uff1a\u3000https://github.com/mYmd/miscellaneous/blob/master/test_mbind.cpp\n[Wandbox]\u4e09\u3078( \u3078\u055e\u0a0a \u055e)\u3078 \uff8a\uff6f\uff8a\uff6f \uff1a\u3000http://melpon.org/wandbox/permlink/6GFinX4byC5j6bCZ\n", "tags": ["C++", "C++11"]}