{"context": "\n\n\u306f\u3058\u3081\u306b\n\u50d5\u306f\u4ee5\u524d Delphi \u3067 Windows \u306e\u30b7\u30a7\u30eb\u62e1\u5f35\uff08Shell Extension\uff09\u3092\u4f7f\u3063\u3066\u30a8\u30af\u30b9\u30d7\u30ed\u30fc\u30e9\u306b\u6a5f\u80fd\u3092\u8ffd\u52a0\u3059\u308b\u30a2\u30d7\u30ea\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n\u7c21\u5358\u30a8\u30af\u30b9\u30d7\u30ed\u30fc\u30e9\u62e1\u5f35 EzExpEx\n\u3053\u308c\u306f\u6b8b\u5ff5\u306a\u3053\u3068\u306b 64 \u30d3\u30c3\u30c8 Windows \u306e\u30a8\u30af\u30b9\u30d7\u30ed\u30fc\u30e9\u3067\u52d5\u304b\u306a\u3044\u3093\u3067\u3059\u3088\u306d\u3002\u50d5\u304c\u6301\u3063\u3066\u3044\u308b Delphi \u3067\u306f 64 \u30d3\u30c3\u30c8 Windows \u30a2\u30d7\u30ea\u3092\u4f5c\u308c\u306a\u3044\u3093\u3067\u3059\u3002\n\u3053\u308c\u3092 VB.NET \u3067\u4f5c\u308a\u76f4\u3057\u305f\u3044\u3068\u305a\u3063\u3068\u601d\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\u305d\u306e\u305f\u3081\u306b\u8abf\u3079\u3066\u3044\u308b\u3068\u6b21\u306e\u8a18\u4e8b\u304c\u3042\u308a\u307e\u3057\u305f\u3002\nHow to Write Windows Shell Extension with .NET Languages - CodeProject\n\u3053\u308c\u3092\u53c2\u8003\u306b\u3057\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\nWindows \u30b7\u30a7\u30eb\u62e1\u5f35\u3067\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30e1\u30cb\u30e5\u30fc\n\u30a8\u30af\u30b9\u30d7\u30ed\u30fc\u30e9\u3067\u53f3\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30e1\u30cb\u30e5\u30fc\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30e1\u30cb\u30e5\u30fc\u306b\u72ec\u81ea\u306e\u9805\u76ee\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u308b\n\u307e\u305a\u3001\u300c\u30af\u30e9\u30b9\u30e9\u30a4\u30d6\u30e9\u30ea\u300d\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u65b0\u898f\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d\u3092\u300cContextMenuExtension\u300d\u306b\u3057\u307e\u3059\u3002\n\u6b21\u306b\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u300c\u53c2\u7167\u300d\u8a2d\u5b9a\u306b\u4ee5\u4e0b\u306e\u30a2\u30bb\u30f3\u30d6\u30ea\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\nSystem.Windows.Forms\nSystem.Drawing\n\nIDE \u304c\u4f5c\u6210\u3057\u305f\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u300cClass1.cs\u300d\u307e\u305f\u306f\u300cClass1.vb\u300d\u3092\u300cContextMenuExtension.cs\u300d\u307e\u305f\u306f\u300cContextMenuExtension.vb\u300d\u306b\u30ea\u30cd\u30fc\u30e0\u3057\u307e\u3059\u3002* \u597d\u304d\u306a\u30d5\u30a1\u30a4\u30eb\u540d\u3067\u69cb\u3044\u307e\u305b\u3093\u3002\n\nIShellExtInit \u3068 IContextMenu \u3092\u7528\u610f\u3059\u308b\n\nContextMenuExtension.cs\nusing System.Runtime.InteropServices;\nusing System.Text;\n\nnamespace ContextMenuExtension\n{\n    [ComImport(), \n    InterfaceType(ComInterfaceType.InterfaceIsIUnknown),\n    Guid(\"000214e8-0000-0000-c000-000000000046\")]\n    internal interface IShellExtInit\n    {\n        void Initialize(IntPtr /*LPCITEMIDLIST*/ pidlFolder, IntPtr /*LPDATAOBJECT*/ pDataObj, IntPtr /*HKEY*/ hKeyProgID);\n    }\n\n    [ComImport(), \n    InterfaceType(ComInterfaceType.InterfaceIsIUnknown),\n    Guid(\"000214e4-0000-0000-c000-000000000046\")]\n    internal interface IContextMenu\n    {\n        [PreserveSig]\n        int QueryContextMenu(IntPtr /*HMENU*/ hMenu, uint iMenu, uint idCmdFirst, uint idCmdLast, uint uFlags);\n        void InvokeCommand(IntPtr pici);\n        void GetCommandString(UIntPtr idCmd, uint uFlags, IntPtr pReserved, StringBuilder pszName, uint cchMax);\n    }\n\n\n\nContextMenuExtension.vb\nImports System.Runtime.InteropServices\nImports System.Text\n\n<ComImport(),\nInterfaceType(ComInterfaceType.InterfaceIsIUnknown),\nGuid(\"000214e8-0000-0000-c000-000000000046\")>\nFriend Interface IShellExtInit\n    Sub Initialize(ByVal pidlFolder As IntPtr, ByVal pDataObj As IntPtr, ByVal hKeyProgID As IntPtr)\nEnd Interface\n\n<ComImport(),\nInterfaceType(ComInterfaceType.InterfaceIsIUnknown),\nGuid(\"000214e4-0000-0000-c000-000000000046\")>\nFriend Interface IContextMenu\n    <PreserveSig()>\n    Function QueryContextMenu(ByVal hMenu As IntPtr, ByVal iMenu As UInt32, ByVal idCmdFirst As UInt32, ByVal idCmdLast As UInt32, ByVal uFlags As UInt32) As Integer\n    Sub InvokeCommand(ByVal pici As IntPtr)\n    Sub GetCommandString(ByVal idCmd As UIntPtr, ByVal uFlags As UInt32, ByVal pReserved As IntPtr, ByVal pszName As StringBuilder, ByVal cchMax As UInt32)\nEnd Interface\n\n\n\nIShellExtInit \u3068 IContextMenu \u304b\u3089\u6d3e\u751f\u3059\u308b\n\u300cContextMenuExtension\u300d\u30af\u30e9\u30b9\u3092\u300cIShellExtInit\u300d\u300cIContextMenu\u300d\u304b\u3089\u6d3e\u751f\u3059\u308b\u3088\u3046\u66f8\u63db\u3057\u307e\u3059\u3002\n\nContextMenuExtension.cs\n    public class ContextMenuExtension : IShellExtInit, IContextMenu\n    {\n\n\n\nContextMenuExtension.vb\nPublic Class ContextMenuExtension\n    Implements IShellExtInit, IContextMenu\n\n\nIDE \u304c\u300c\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306e\u5b9f\u88c5\u300d\u3092\u52a9\u8a00\u3057\u3066\u304f\u308b\u306e\u3067\u5f93\u3063\u3066\u4ee5\u4e0b\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\nInitialize\nQueryContextMenu\nGetComandString\nInvokeCommand\n\n\n\u5fc5\u8981\u306a\u5b9a\u6570\u3084\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u610f\u3059\u308b\n\u5fc5\u8981\u306a\u5b9a\u6570\u3084\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n\nContextMenuExtension.cs\nusing System.Runtime.InteropServices.ComTypes;\n\nnamespace CsContextMenuExtension\n{\n    internal enum CLIPFORMAT : uint\n    {\n        CF_TEXT = 1,\n        CF_BITMAP = 2,\n        CF_METAFILEPICT = 3,\n        CF_SYLK = 4,\n        CF_DIF = 5,\n        CF_TIFF = 6,\n        CF_OEMTEXT = 7,\n        CF_DIB = 8,\n        CF_PALETTE = 9,\n        CF_PENDATA = 10,\n        CF_RIFF = 11,\n        CF_WAVE = 12,\n        CF_UNICODETEXT = 13,\n        CF_ENHMETAFILE = 14,\n        CF_HDROP = 15,\n        CF_LOCALE = 16,\n        CF_MAX = 17,\n\n        CF_OWNERDISPLAY = 0x0080,\n        CF_DSPTEXT = 0x0081,\n        CF_DSPBITMAP = 0x0082,\n        CF_DSPMETAFILEPICT = 0x0083,\n        CF_DSPENHMETAFILE = 0x008E,\n\n        CF_PRIVATEFIRST = 0x0200,\n        CF_PRIVATELAST = 0x02FF,\n\n        CF_GDIOBJFIRST = 0x0300,\n        CF_GDIOBJLAST = 0x03FF\n    }\n\n    internal static class WinError\n    {\n        public const int S_OK = 0x0000;\n        public const int S_FALSE = 0x0001;\n        public const int E_FAIL = -2147467259;\n        public const int E_INVALIDARG = -2147024809;\n        public const int E_OUTOFMEMORY = -2147024882;\n        public const int STRSAFE_E_INSUFFICIENT_BUFFER = -2147024774;\n\n        public const uint SEVERITY_SUCCESS = 0;\n        public const uint SEVERITY_ERROR = 1;\n\n        public static int MAKE_HRESULT(uint sev, uint fac, uint code)\n        {\n            return (int)((sev << 31) | (fac << 16) | code);\n        }\n    }\n\n    [Flags]\n    internal enum MIIM : uint\n    {\n        MIIM_STATE = 0x00000001,\n        MIIM_ID = 0x00000002,\n        MIIM_SUBMENU = 0x00000004,\n        MIIM_CHECKMARKS = 0x00000008,\n        MIIM_TYPE = 0x00000010,\n        MIIM_DATA = 0x00000020,\n        MIIM_STRING = 0x00000040,\n        MIIM_BITMAP = 0x00000080,\n        MIIM_FTYPE = 0x00000100\n    }\n\n    internal enum MFT : uint\n    {\n        MFT_STRING = 0x00000000,\n        MFT_BITMAP = 0x00000004,\n        MFT_MENUBARBREAK = 0x00000020,\n        MFT_MENUBREAK = 0x00000040,\n        MFT_OWNERDRAW = 0x00000100,\n        MFT_RADIOCHECK = 0x00000200,\n        MFT_SEPARATOR = 0x00000800,\n        MFT_RIGHTORDER = 0x00002000,\n        MFT_RIGHTJUSTIFY = 0x00004000\n    }\n\n    internal enum MFS : uint\n    {\n        MFS_ENABLED = 0x00000000,\n        MFS_UNCHECKED = 0x00000000,\n        MFS_UNHILITE = 0x00000000,\n        MFS_GRAYED = 0x00000003,\n        MFS_DISABLED = 0x00000003,\n        MFS_CHECKED = 0x00000008,\n        MFS_HILITE = 0x00000080,\n        MFS_DEFAULT = 0x00001000\n    }\n\n    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]\n    internal struct MENUITEMINFO\n    {\n        public uint cbSize;\n        public MIIM fMask;\n        public MFT fType;\n        public MFS fState;\n        public uint wID;\n        public IntPtr hSubMenu;\n        public IntPtr hbmpChecked;\n        public IntPtr hbmpUnchecked;\n        public UIntPtr dwItemData;\n        public string dwTypeData;\n        public uint cch;\n        public IntPtr hbmpItem;\n    }\n\n    [Flags]\n    internal enum CMF : uint\n    {\n        CMF_NORMAL = 0x00000000,\n        CMF_DEFAULTONLY = 0x00000001,\n        CMF_VERBSONLY = 0x00000002,\n        CMF_EXPLORE = 0x00000004,\n        CMF_NOVERBS = 0x00000008,\n        CMF_CANRENAME = 0x00000010,\n        CMF_NODEFAULT = 0x00000020,\n        CMF_INCLUDESTATIC = 0x00000040,\n        CMF_ITEMMENU = 0x00000080,\n        CMF_EXTENDEDVERBS = 0x00000100,\n        CMF_DISABLEDVERBS = 0x00000200,\n        CMF_ASYNCVERBSTATE = 0x00000400,\n        CMF_OPTIMIZEFORINVOKE = 0x00000800,\n        CMF_SYNCCASCADEMENU = 0x00001000,\n        CMF_DONOTPICKDEFAULT = 0x00002000,\n        CMF_RESERVED = 0xFFFF0000\n    }\n\n    [Flags]\n    internal enum CMIC : uint\n    {\n        CMIC_MASK_ICON = 0x00000010,\n        CMIC_MASK_HOTKEY = 0x00000020,\n        CMIC_MASK_NOASYNC = 0x00000100,\n        CMIC_MASK_FLAG_NO_UI = 0x00000400,\n        CMIC_MASK_UNICODE = 0x00004000,\n        CMIC_MASK_NO_CONSOLE = 0x00008000,\n        CMIC_MASK_ASYNCOK = 0x00100000,\n        CMIC_MASK_NOZONECHECKS = 0x00800000,\n        CMIC_MASK_FLAG_LOG_USAGE = 0x04000000,\n        CMIC_MASK_SHIFT_DOWN = 0x10000000,\n        CMIC_MASK_PTINVOKE = 0x20000000,\n        CMIC_MASK_CONTROL_DOWN = 0x40000000\n    }\n\n    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]\n    public struct POINT\n    {\n        public int X;\n        public int Y;\n    }\n\n    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]\n    internal struct CMINVOKECOMMANDINFO\n    {\n        public uint cbSize;\n        public CMIC fMask;\n        public IntPtr hwnd;\n        public IntPtr lpVerb;\n        [MarshalAs(UnmanagedType.LPStr)]\n        public string parameters;\n        [MarshalAs(UnmanagedType.LPStr)]\n        public string directory;\n        public int nShow;\n        public uint dwHotKey;\n        public IntPtr hIcon;\n    }\n\n    internal enum GCS : uint\n    {\n        GCS_VERBA = 0x00000000,\n        GCS_HELPTEXTA = 0x00000001,\n        GCS_VALIDATEA = 0x00000002,\n        GCS_VERBW = 0x00000004,\n        GCS_HELPTEXTW = 0x00000005,\n        GCS_VALIDATEW = 0x00000006,\n        GCS_VERBICONW = 0x00000014,\n        GCS_UNICODE = 0x00000004\n    }\n\n    internal class WinApi\n    {\n        public const int MAX_PATH = 260;\n\n        [DllImport(\"shell32\", CharSet = CharSet.Unicode)]\n        public static extern uint DragQueryFile(IntPtr hDrop, uint iFile, StringBuilder pszFile, int cch);\n\n        [DllImport(\"ole32.dll\", CharSet = CharSet.Unicode)]\n        public static extern void ReleaseStgMedium(ref STGMEDIUM pmedium);\n\n        [DllImport(\"user32\", CharSet = CharSet.Unicode, SetLastError = true)]\n        [return: MarshalAs(UnmanagedType.Bool)]\n        public static extern bool InsertMenuItem(IntPtr hMenu, uint uItem, [MarshalAs(UnmanagedType.Bool)]bool fByPosition, ref MENUITEMINFO mii);\n\n        public static int HighWord(int number)\n        {\n            return ((number & 0x80000000) == 0x80000000) ? (number >> 16) : ((number >> 16) & 0xffff);\n        }\n\n        public static int LowWord(int number)\n        {\n            return number & 0xffff;\n        }\n    }\n\n\n\nContextMenuExtension.vb\nImports System.Runtime.InteropServices.ComTypes\n\nFriend Enum CLIPFORMAT As UInt32\n    CF_TEXT = 1\n    CF_BITMAP = 2\n    CF_METAFILEPICT = 3\n    CF_SYLK = 4\n    CF_DIF = 5\n    CF_TIFF = 6\n    CF_OEMTEXT = 7\n    CF_DIB = 8\n    CF_PALETTE = 9\n    CF_PENDATA = 10\n    CF_RIFF = 11\n    CF_WAVE = 12\n    CF_UNICODETEXT = 13\n    CF_ENHMETAFILE = 14\n    CF_HDROP = 15\n    CF_LOCALE = &H10\n    CF_MAX = &H11\n\n    CF_OWNERDISPLAY = &H80\n    CF_DSPTEXT = &H81\n    CF_DSPBITMAP = &H82\n    CF_DSPMETAFILEPICT = &H83\n    CF_DSPENHMETAFILE = &H8E\n\n    CF_PRIVATEFIRST = &H200\n    CF_PRIVATELAST = &H2FF\n\n    CF_GDIOBJFIRST = &H300\n    CF_GDIOBJLAST = &H3FF\nEnd Enum\n\nFriend Class WinError\n    Public Const S_OK As Integer = 0\n    Public Const S_FALSE As Integer = 1\n    Public Const E_FAIL As Integer = -2147467259\n    Public Const E_INVALIDARG As Integer = -2147024809\n    Public Const E_OUTOFMEMORY As Integer = -2147024882\n    Public Const STRSAFE_E_INSUFFICIENT_BUFFER As Integer = -2147024774\n\n    Public Const SEVERITY_ERROR As UInt32 = 1\n    Public Const SEVERITY_SUCCESS As UInt32 = 0\n\n    Public Shared Function MAKE_HRESULT(ByVal sev As UInt32, ByVal fac As UInt32, ByVal code As UInt32) As Integer\n        Return CInt((((sev << &H1F) Or (fac << &H10)) Or code))\n    End Function\nEnd Class\n\n<Flags()>\nFriend Enum MIIM As UInt32\n    MIIM_STATE = 1\n    MIIM_ID = 2\n    MIIM_SUBMENU = 4\n    MIIM_CHECKMARKS = 8\n    MIIM_TYPE = &H10\n    MIIM_DATA = &H20\n    MIIM_STRING = &H40\n    MIIM_BITMAP = &H80\n    MIIM_FTYPE = &H100\nEnd Enum\n\nFriend Enum MFT As UInt32\n    MFT_STRING = 0\n    MFT_BITMAP = 4\n    MFT_MENUBARBREAK = &H20\n    MFT_MENUBREAK = &H40\n    MFT_OWNERDRAW = &H100\n    MFT_RADIOCHECK = &H200\n    MFT_SEPARATOR = &H800\n    MFT_RIGHTORDER = &H2000\n    MFT_RIGHTJUSTIFY = &H4000\nEnd Enum\n\nFriend Enum MFS As UInt32\n    MFS_ENABLED = 0\n    MFS_UNCHECKED = 0\n    MFS_UNHILITE = 0\n    MFS_DISABLED = 3\n    MFS_GRAYED = 3\n    MFS_CHECKED = 8\n    MFS_HILITE = &H80\n    MFS_DEFAULT = &H1000\nEnd Enum\n\n<StructLayout(LayoutKind.Sequential, CharSet:=CharSet.Unicode)>\nFriend Structure MENUITEMINFO\n    Public cbSize As UInt32\n    Public fMask As MIIM\n    Public fType As MFT\n    Public fState As MFS\n    Public wID As UInt32\n    Public hSubMenu As IntPtr\n    Public hbmpChecked As IntPtr\n    Public hbmpUnchecked As IntPtr\n    Public dwItemData As UIntPtr\n    Public dwTypeData As String\n    Public cch As UInt32\n    Public hbmpItem As IntPtr\nEnd Structure\n\n<Flags()>\nFriend Enum CMF\n    CMF_NORMAL = 0\n    CMF_DEFAULTONLY = 1\n    CMF_VERBSONLY = 2\n    CMF_EXPLORE = 4\n    CMF_NOVERBS = 8\n    CMF_CANRENAME = &H10\n    CMF_NODEFAULT = &H20\n    CMF_INCLUDESTATIC = &H40\n    CMF_ITEMMENU = &H80\n    CMF_EXTENDEDVERBS = &H100\n    CMF_DISABLEDVERBS = &H200\n    CMF_ASYNCVERBSTATE = &H400\n    CMF_OPTIMIZEFORINVOKE = &H800\n    CMF_SYNCCASCADEMENU = &H1000\n    CMF_DONOTPICKDEFAULT = &H2000\n    CMF_RESERVED = &HFFFF0000\nEnd Enum\n\n<Flags()>\nFriend Enum CMIC As UInt32\n    CMIC_MASK_ICON = &H10\n    CMIC_MASK_HOTKEY = &H20\n    CMIC_MASK_NOASYNC = &H100\n    CMIC_MASK_FLAG_NO_UI = &H400\n    CMIC_MASK_UNICODE = &H4000\n    CMIC_MASK_NO_CONSOLE = &H8000\n    CMIC_MASK_ASYNCOK = &H100000\n    CMIC_MASK_NOZONECHECKS = &H800000\n    CMIC_MASK_FLAG_LOG_USAGE = &H4000000\n    CMIC_MASK_SHIFT_DOWN = &H10000000\n    CMIC_MASK_PTINVOKE = &H20000000\n    CMIC_MASK_CONTROL_DOWN = &H40000000\nEnd Enum\n\n<StructLayout(LayoutKind.Sequential, CharSet:=CharSet.Unicode)>\nPublic Structure POINT\n    Public X As Integer\n    Public Y As Integer\nEnd Structure\n\n<StructLayout(LayoutKind.Sequential, CharSet:=CharSet.Unicode)>\nFriend Structure CMINVOKECOMMANDINFO\n    Public cbSize As UInt32\n    Public fMask As CMIC\n    Public hwnd As IntPtr\n    Public lpVerb As IntPtr\n    <MarshalAs(UnmanagedType.LPStr)>\n    Public parameters As String\n    <MarshalAs(UnmanagedType.LPStr)>\n    Public directory As String\n    Public nShow As Integer\n    Public dwHotKey As UInt32\n    Public hIcon As IntPtr\nEnd Structure\n\nFriend Enum GCS As UInt32\n    GCS_VERBA = 0\n    GCS_HELPTEXTA = 1\n    GCS_VALIDATEA = 2\n    GCS_HELPTEXTW = 5\n    GCS_UNICODE = 4\n    GCS_VERBW = 4\n    GCS_VALIDATEW = 6\n    GCS_VERBICONW = 20\nEnd Enum\n\nFriend Class WinApi\n    Public Const MAX_PATH As Integer = 260\n\n    <DllImport(\"shell32\", CharSet:=CharSet.Unicode)>\n    Public Shared Function DragQueryFile(ByVal hDrop As IntPtr, ByVal iFile As UInt32, ByVal pszFile As StringBuilder, ByVal cch As Integer) As UInt32\n    End Function\n\n    <DllImport(\"ole32.dll\", CharSet:=CharSet.Unicode)>\n    Public Shared Sub ReleaseStgMedium(ByRef pmedium As STGMEDIUM)\n    End Sub\n\n    <DllImport(\"user32\", CharSet:=CharSet.Unicode, SetLastError:=True)>\n    Public Shared Function InsertMenuItem(ByVal hMenu As IntPtr, ByVal uItem As UInt32, <MarshalAs(UnmanagedType.Bool)> ByVal fByPosition As Boolean, ByRef mii As MENUITEMINFO) As <MarshalAs(UnmanagedType.Bool)> Boolean\n    End Function\n\n    Public Shared Function HighWord(ByVal number As Integer) As Integer\n        Return If(((number And &H80000000) = &H80000000), (number >> &H10), ((number >> &H10) And &HFFFF))\n    End Function\n\n    Public Shared Function LowWord(ByVal number As Integer) As Integer\n        Return (number And &HFFFF)\n    End Function\nEnd Class\n\n\n\nInitialize \u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\n\u9078\u629e\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\uff0f\u30d5\u30a9\u30eb\u30c0\u3092\u53d6\u5f97\u3057\u3066\u5909\u6570\u306b\u30bb\u30c3\u30c8\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\nContextMenuExtension.cs\n    public class ContextMenuExtension : IShellExtInit, IContextMenu\n    {\n        private string selectedFile;\n\n        public void Initialize(IntPtr pidlFolder, IntPtr pDataObj, IntPtr hKeyProgID)\n        {\n            // \u9078\u629e\u3055\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb/\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u53d6\u5f97\n            if (pDataObj == IntPtr.Zero)\n            {\n                throw new ArgumentException();\n            }\n            FORMATETC fe = new FORMATETC();\n            fe.cfFormat = (short)CLIPFORMAT.CF_HDROP;\n            fe.ptd = IntPtr.Zero;\n            fe.dwAspect = DVASPECT.DVASPECT_CONTENT;\n            fe.lindex = -1;\n            fe.tymed = TYMED.TYMED_HGLOBAL;\n            STGMEDIUM stm = new STGMEDIUM();\n            IDataObject dataObject = (IDataObject)Marshal.GetObjectForIUnknown(pDataObj);\n            dataObject.GetData(ref fe, out stm);\n            try\n            {\n                IntPtr hDrop = stm.unionmember;\n                if (hDrop == IntPtr.Zero)\n                {\n                    throw new ArgumentException();\n                }\n                uint nFiles = WinApi.DragQueryFile(hDrop, UInt32.MaxValue, null, 0);\n                if (nFiles == 1)\n                {\n                    StringBuilder fileName = new StringBuilder(WinApi.MAX_PATH);\n                    if (0 == WinApi.DragQueryFile(hDrop, 0, fileName,\n                        fileName.Capacity))\n                    {\n                        Marshal.ThrowExceptionForHR(WinError.E_FAIL);\n                    }\n                    this.selectedFile = fileName.ToString();\n                }\n                else\n                {\n                    Marshal.ThrowExceptionForHR(WinError.E_FAIL);\n                }\n            }\n            finally\n            {\n                WinApi.ReleaseStgMedium(ref stm);\n            }\n        }\n\n\n\nContextMenuExtension.vb\nPublic Class ContextMenuExtension\n    Implements IShellExtInit, IContextMenu\n\n    Private SelectedFile As String\n\n    Public Sub Initialize(ByVal pidlFolder As IntPtr, ByVal pDataObj As IntPtr, ByVal hKeyProgID As IntPtr) Implements IShellExtInit.Initialize\n\n        '\u9078\u629e\u3055\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb/\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u53d6\u5f97\n        If (pDataObj = IntPtr.Zero) Then\n            Throw New ArgumentException\n        End If\n        Dim fe As New FORMATETC\n        With fe\n            .cfFormat = CLIPFORMAT.CF_HDROP\n            .ptd = IntPtr.Zero\n            .dwAspect = DVASPECT.DVASPECT_CONTENT\n            .lindex = -1\n            .tymed = TYMED.TYMED_HGLOBAL\n        End With\n        Dim stm As New STGMEDIUM\n        Dim dataObject As IDataObject = Marshal.GetObjectForIUnknown(pDataObj)\n        dataObject.GetData(fe, stm)\n        Try\n            Dim hDrop As IntPtr = stm.unionmember\n            If (hDrop = IntPtr.Zero) Then\n                Throw New ArgumentException\n            End If\n            Dim nFiles As UInteger = WinApi.DragQueryFile(hDrop, UInt32.MaxValue, Nothing, 0)\n            If (nFiles = 1) Then\n                Dim fileName As New StringBuilder(WinApi.MAX_PATH)\n                If (0 = WinApi.DragQueryFile(hDrop, 0, fileName, fileName.Capacity)) Then\n                    Marshal.ThrowExceptionForHR(WinError.E_FAIL)\n                End If\n                Me.SelectedFile = fileName.ToString\n            Else\n                Marshal.ThrowExceptionForHR(WinError.E_FAIL)\n            End If\n        Finally\n            WinApi.ReleaseStgMedium((stm))\n        End Try\n    End Sub\n\n\n\nQueryContextMenu \u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\n\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30e1\u30cb\u30e5\u30fc\u306b\u9805\u76ee\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\nContextMenuExtension.cs\n    public class ContextMenuExtension : IShellExtInit, IContextMenu\n    {\n        private uint IDM_SHOW_FILENAME = 0;\n        private string TXT_SHOW_FILENAME = \"\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u8868\u793a(&D)\";\n\n        public int QueryContextMenu(IntPtr hMenu, uint iMenu, uint idCmdFirst, uint idCmdLast, uint uFlags)\n        {\n            // \u30e1\u30cb\u30e5\u30fc\u9805\u76ee\u3092\u8ffd\u52a0\n            if (((uint)CMF.CMF_DEFAULTONLY & uFlags) != 0)\n            {\n                return WinError.MAKE_HRESULT(WinError.SEVERITY_SUCCESS, 0, 0);\n            }\n            MENUITEMINFO mii = new MENUITEMINFO();\n            mii.cbSize = (uint)Marshal.SizeOf(mii);\n            mii.fMask = MIIM.MIIM_ID | MIIM.MIIM_TYPE | MIIM.MIIM_STATE;\n            mii.wID = idCmdFirst + IDM_SHOW_FILENAME;\n            mii.fType = MFT.MFT_STRING;\n            mii.dwTypeData = TXT_SHOW_FILENAME;\n            mii.fState = MFS.MFS_ENABLED;\n            if (!WinApi.InsertMenuItem(hMenu, iMenu, true, ref mii))\n            {\n                return Marshal.GetHRForLastWin32Error();\n            }\n\n            // \u8ffd\u52a0\u3057\u305f\u30e1\u30cb\u30e5\u30fc\u9805\u76ee\u306e\u6570\u3092\u8fd4\u3059\n            return WinError.MAKE_HRESULT(WinError.SEVERITY_SUCCESS, 0, 1);\n        }\n\n\n\nContextMenuExtension.vb\nPublic Class ContextMenuExtension\n    Implements IShellExtInit, IContextMenu\n\n    Private IDM_SHOW_FILENAME As UInteger = 0\n    Private TXT_SHOW_FILENAME As String = \"\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u8868\u793a(&D)\"\n\n    Public Function QueryContextMenu(ByVal hMenu As IntPtr, ByVal iMenu As UInt32, ByVal idCmdFirst As UInt32, ByVal idCmdLast As UInt32, ByVal uFlags As UInt32) As Integer Implements IContextMenu.QueryContextMenu\n\n        '\u30e1\u30cb\u30e5\u30fc\u9805\u76ee\u3092\u8ffd\u52a0\n        If ((CMF.CMF_DEFAULTONLY And uFlags) <> 0) Then\n            Return WinError.MAKE_HRESULT(WinError.SEVERITY_SUCCESS, 0, 0)\n        End If\n        Dim mii As New MENUITEMINFO\n        With mii\n            .cbSize = Marshal.SizeOf(mii)\n            .fMask = MIIM.MIIM_TYPE Or MIIM.MIIM_STATE Or MIIM.MIIM_ID\n            .wID = idCmdFirst + Me.IDM_SHOW_FILENAME\n            .fType = MFT.MFT_STRING\n            .dwTypeData = Me.TXT_SHOW_FILENAME\n            .fState = MFS.MFS_ENABLED\n        End With\n        If Not WinApi.InsertMenuItem(hMenu, iMenu, True, mii) Then\n            Return Marshal.GetHRForLastWin32Error\n        End If\n\n        '\u8ffd\u52a0\u3057\u305f\u30e1\u30cb\u30e5\u30fc\u9805\u76ee\u306e\u6570\u3092\u8fd4\u3059\n        Return WinError.MAKE_HRESULT(WinError.SEVERITY_SUCCESS, 0, 1))\n    End Function\n\n\n\nGetCommandString \u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\n\u30a8\u30af\u30b9\u30d7\u30ed\u30fc\u30e9\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u30d0\u30fc\u306b\u8868\u793a\u3055\u308c\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\nContextMenuExtension.cs\n    public class ContextMenuExtension : IShellExtInit, IContextMenu\n    {\n        private string MSG_SHOW_FILENAME = \"\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u8868\u793a\u3057\u307e\u3059\u3002\";\n\n        public void GetCommandString(UIntPtr idCmd, uint uFlags, IntPtr pReserved, StringBuilder pszName, uint cchMax)\n        {\n            if (idCmd.ToUInt32() != IDM_SHOW_FILENAME)\n            {\n                return;\n            }\n            if ((GCS)uFlags == GCS.GCS_HELPTEXTW)\n            {\n                if (MSG_SHOW_FILENAME.Length > cchMax - 1)\n                {\n                    Marshal.ThrowExceptionForHR(WinError.STRSAFE_E_INSUFFICIENT_BUFFER);\n                }\n                else\n                {\n                    pszName.Clear();\n                    pszName.Append(MSG_SHOW_FILENAME);\n                }\n            }\n        }\n\n\n\nContextMenuExtension.vb\nPublic Class ContextMenuExtension\n    Implements IShellExtInit, IContextMenu\n\n    Private MSG_SHOW_FILENAME As String = \"\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u8868\u793a\u3057\u307e\u3059\u3002\"\n\n    Public Sub GetCommandString(ByVal idCmd As UIntPtr, ByVal uFlags As UInt32, ByVal pReserved As IntPtr, ByVal pszName As StringBuilder, ByVal cchMax As UInt32) Implements IContextMenu.GetCommandString\n\n        If Not (idCmd.ToUInt32 = IDM_SHOW_FILENAME) Then\n            Exit Sub\n        End If\n        If DirectCast(uFlags, GCS) = GCS.GCS_HELPTEXTW Then\n            If (MSG_SHOW_FILENAME.Length > (cchMax - 1)) Then\n                Marshal.ThrowExceptionForHR(WinError.STRSAFE_E_INSUFFICIENT_BUFFER)\n            Else\n                pszName.Clear()\n                pszName.Append(MSG_SHOW_FILENAME)\n            End If\n        End If\n    End Sub\n\n\n\nInvokeCommand \u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\n\u30e1\u30cb\u30e5\u30fc\u9805\u76ee\u304c\u9078\u629e\u3055\u308c\u308b\u3068\u547c\u51fa\u3055\u308c\u307e\u3059\u3002\n\nContextMenuExtension.cs\n    public class ContextMenuExtension : IShellExtInit, IContextMenu\n    {\n        public void InvokeCommand(IntPtr pici)\n        {\n            CMINVOKECOMMANDINFO ici = (CMINVOKECOMMANDINFO)Marshal.PtrToStructure(pici, typeof(CMINVOKECOMMANDINFO));\n            // ici.lpVerb \u306e\u4e0a\u4f4d\u30ef\u30fc\u30c9\u304c NULL \u3067\u306a\u3051\u308c\u3070\n            // \u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u5225\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u3063\u3066\u547c\u51fa\u3055\u308c\u305f\u3082\u306e\u306a\u306e\u3067\n            // \u305d\u306e\u307e\u307e\u8fd4\u3059\n            if (WinApi.HighWord(ici.lpVerb.ToInt32()) != 0)\n            {\n                return;\n            }\n\n            // \u305d\u3046\u3067\u306a\u3051\u308c\u3070\n            // \u30b7\u30a7\u30eb\u304c\u547c\u51fa\u3057\u305f\u3082\u306e\u3067\n            // ici.lpVerb \u306e\u4e0b\u4f4d\u30ef\u30fc\u30c9\u304c\u3001\u30e6\u30fc\u30b6\u304c\u9078\u629e\u3057\u305f\u30e1\u30cb\u30e5\u30fc\u9805\u76ee\n            if (WinApi.LowWord(ici.lpVerb.ToInt32()) == IDM_SHOW_FILENAME)\n            {\n                this.DoShowFileName();\n            }\n            else\n            {\n                Marshal.ThrowExceptionForHR(WinError.E_FAIL);\n            }\n        }\n\n\n\nContextMenuExtension.vb\nPublic Class ContextMenuExtension\n    Implements IShellExtInit, IContextMenu\n\n    Public Sub InvokeCommand(ByVal pici As IntPtr) Implements IContextMenu.InvokeCommand\n\n        Dim ici As CMINVOKECOMMANDINFO = Marshal.PtrToStructure(pici, GetType(CMINVOKECOMMANDINFO))\n        'ici.lpVerb \u306e\u4e0a\u4f4d\u30ef\u30fc\u30c9\u304c NULL \u3067\u306a\u3051\u308c\u3070\n        '\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u5225\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u3063\u3066\u547c\u51fa\u3055\u308c\u305f\u3082\u306e\u306a\u306e\u3067\n        '\u305d\u306e\u307e\u307e\u8fd4\u3059\n        If (WinApi.HighWord(ici.lpVerb.ToInt32) <> 0) Then\n            Exit Sub\n        End If\n\n        '\u305d\u3046\u3067\u306a\u3051\u308c\u3070\n        '\u30b7\u30a7\u30eb\u304c\u547c\u51fa\u3057\u305f\u3082\u306e\u3067\n        'ici.lpVerb \u306e\u4e0b\u4f4d\u30ef\u30fc\u30c9\u304c\u3001\u30e6\u30fc\u30b6\u304c\u9078\u629e\u3057\u305f\u30e1\u30cb\u30e5\u30fc\u9805\u76ee\n        If (WinApi.LowWord(ici.lpVerb.ToInt32) = IDM_SHOW_FILENAME) Then\n            Me.DoShowFileName()\n        Else\n            Marshal.ThrowExceptionForHR(WinError.E_FAIL)\n        End If\n    End Sub\n\n\n\u4e3b\u306a\u6a5f\u80fd\u306f\u300cDoShowFileName\u300d\u3002\u9078\u629e\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u540d\u79f0\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n\nContextMenuExtension.cs\n    public class ContextMenuExtension : IShellExtInit, IContextMenu\n    {\n        private void DoShowFileName()\n        {\n            System.Windows.Forms.MessageBox.Show(\"\u9078\u629e\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb: \" + Environment.NewLine + this.selectedFile);\n        }\n\n\n\nContextMenuExtension.vb\nPublic Class ContextMenuExtension\n    Implements IShellExtInit, IContextMenu\n\n    Private Sub DoShowFileName(hwnd As IntPtr)\n        System.Windows.Forms.MessageBox.Show(\"\u9078\u629e\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb: \" & Environment.NewLine & Me.SelectedFile, My.Application.Info.Title)\n    End Sub\n\n\n\nCOM \u30b5\u30fc\u30d0\u767b\u9332\u6a5f\u80fd\u3092\u5b9f\u88c5\u3059\u308b\n\u4f5c\u6210\u3057\u3066\u3044\u308b\u30af\u30e9\u30b9\u30e9\u30a4\u30d6\u30e9\u30ea\u304c COM \u30b5\u30fc\u30d0\u3068\u3057\u3066\u767b\u9332\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\u307e\u305a\u3001\u30a2\u30bb\u30f3\u30d6\u30ea\u3092 COM \u53c2\u7167\u53ef\u80fd\u306b\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u624b\u9806\u3067\u4f5c\u696d\u3057\u307e\u3059\u3002\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u300c\u30d7\u30ed\u30d1\u30c6\u30a3\u300d\u3092\u958b\u304f\u3002\n\u300c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u300d\u30bf\u30d6\u3092\u9078\u629e\u3002\n\u300c\u30a2\u30bb\u30f3\u30d6\u30ea\u60c5\u5831\u300d\u3092\u62bc\u4e0b\u3002\n\u30c0\u30a4\u30a2\u30ed\u30b0\u30dc\u30c3\u30af\u30b9\u3067\u300c\u30a2\u30bb\u30f3\u30d6\u30ea\u3092 COM \u53c2\u7167\u53ef\u80fd\u306b\u3059\u308b\u300d\u306b\u30c1\u30a7\u30c3\u30af\u3002\n\n\u6b21\u306b\u3001\u30a2\u30bb\u30f3\u30d6\u30ea\u306b\u7f72\u540d\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u624b\u9806\u3067\u4f5c\u696d\u3057\u307e\u3059\u3002\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u300c\u30d7\u30ed\u30d1\u30c6\u30a3\u300d\u3092\u958b\u304f\u3002\n\u300c\u7f72\u540d\u300d\u30bf\u30d6\u3092\u9078\u629e\u3002\n\u300c\u30a2\u30bb\u30f3\u30d6\u30ea\u306b\u7f72\u540d\u3059\u308b\u300d\u3092\u30c1\u30a7\u30c3\u30af\u3002\n\u300c\u53b3\u5bc6\u306a\u540d\u524d\u306e\u30ad\u30fc\u30d5\u30a1\u30a4\u30eb\u3092\u9078\u629e\u300d\u3067\u300c\u65b0\u898f\u4f5c\u6210\u300d\u3092\u9078\u629e\u3002\n\u30c0\u30a4\u30a2\u30ed\u30b0\u30dc\u30c3\u30af\u30b9\u3067\u300c\u30ad\u30fc\u30d5\u30a1\u30a4\u30eb\u540d\u300d\u306b\u4efb\u610f\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u6307\u5b9a\u3002\n\u300c\u30ad\u30fc\u30d5\u30a1\u30a4\u30eb\u3092\u30d1\u30b9\u30ef\u30fc\u30c9\u3067\u4fdd\u8b77\u3059\u308b\u300d\u306f\u5fc5\u9808\u3067\u306f\u306a\u3044\u3002\n\n\u30af\u30e9\u30b9\u306b\u5c5e\u6027\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\nGUID \u306f\u30af\u30e9\u30b9\u3054\u3068\u306b\u65b0\u898f\u4f5c\u6210\u3057\u3066\u4e0b\u3055\u3044\u3002\n\nContextMenuExtension.cs\n    [ClassInterface(ClassInterfaceType.None),\n    Guid(\"99999999-9999-9999-9999-9999999999\"), \n    ComVisible(true)]\n    public class ContextMenuExtension : IShellExtInit, IContextMenu\n    {\n\n\n\nContextMenuExtension.vb\n<ClassInterface(ClassInterfaceType.None),\nGuid(\"99999999-9999-9999-9999-9999999999\"),\nComVisible(True)>\nPublic Class ContextMenuExtension\n    Implements IShellExtInit, IContextMenu\n\n\n\u767b\u9332\u304a\u3088\u3073\u89e3\u9664\u306e\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u5bfe\u8c61\u3068\u306a\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\nContextMenuExtension.cs\nusing Microsoft.Win32\n\n    public class ContextMenuExtension : IShellExtInit, IContextMenu\n    {\n        private const string Description = \"ContextMenuExtention Class\";\n        private const string TargetFileType = \"*\";\n\n        [ComRegisterFunction()]\n        public static void Register(Type t)\n        {\n            try\n            {\n                Guid clsid = t.GUID;\n                if (clsid == Guid.Empty)\n                {\n                    throw new ArgumentException(\"clsid must not be empty\");\n                }\n                string keyName = string.Format(\"{0}\\\\shellex\\\\ContextMenuHandlers\\\\{1}\", TargetFileType, clsid.ToString(\"B\"));\n                using (RegistryKey key = Registry.ClassesRoot.CreateSubKey(keyName))\n                {\n                    if (key != null && !string.IsNullOrEmpty(Description))\n                    {\n                        key.SetValue(null, Description);\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex.Message);\n                throw;\n            }\n        }\n\n        [ComUnregisterFunction()]\n        public static void Unregister(Type t)\n        {\n            try\n            {\n                Guid clsid = t.GUID;\n                if (clsid == Guid.Empty)\n                {\n                    throw new ArgumentException(\"clsid must not be empty\");\n                }\n                string keyName = string.Format(\"{0}\\\\shellex\\\\ContextMenuHandlers\\\\{1}\", TargetFileType, clsid.ToString(\"B\"));\n                Registry.ClassesRoot.DeleteSubKeyTree(keyName, false);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex.Message);\n                throw;\n            }\n        }\n\n\n\nContextMenuExtension.vb\nImports Microsoft.Win32\n\nPublic Class ContextMenuExtension\n    Implements IShellExtInit, IContextMenu\n\n    Private Const Description As String = \"ContextMenuExtention Class\"\n    Private Const TargetFileType As String = \"*\"\n\n    <ComRegisterFunction()>\n    Public Shared Sub Register(ByVal t As Type)\n        Try\n            Dim clsid = t.GUID\n            If clsid = Guid.Empty Then\n                Throw New ArgumentException(\"clsid must not be empty\")\n            End If\n            Dim keyName As String = String.Format(\"{0}\\shellex\\ContextMenuHandlers\\{1}\", TargetFileType, clsid.ToString(\"B\"))\n            Using key As RegistryKey = Registry.ClassesRoot.CreateSubKey(keyName)\n                If ((key IsNot Nothing) AndAlso (Not String.IsNullOrEmpty(Description))) Then\n                    key.SetValue(Nothing, Description)\n                End If\n            End Using\n        Catch ex As Exception\n            Console.WriteLine(ex.Message)\n            Throw\n        End Try\n    End Sub\n\n    <ComUnregisterFunction()>\n    Public Shared Sub Unregister(ByVal t As Type)\n        Try\n            Dim clsid = t.GUID\n            If clsid = Guid.Empty Then\n                Throw New ArgumentException(\"clsid must not be empty\")\n            End If\n            Dim keyName As String = String.Format(\"{0}\\shellex\\ContextMenuHandlers\\{1}\", TargetFileType, clsid.ToString(\"B\"))\n            Registry.ClassesRoot.DeleteSubKeyTree(keyName, False)\n        Catch ex As Exception\n            Console.WriteLine(ex.Message)\n            Throw\n        End Try\n    End Sub\n\n\n\n\u30d3\u30eb\u30c9\u3059\u308b\n\u30d3\u30eb\u30c9\u3059\u308b\u3068\u30a2\u30bb\u30f3\u30d6\u30ea\u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u3092 COM \u30b5\u30fc\u30d0\u3068\u3057\u3066 Windows \u306b\u767b\u9332\u3057\u307e\u3059\u3002\n\nCOM \u30b5\u30fc\u30d0\u3068\u3057\u3066\u767b\u9332\u3059\u308b\nC# \u307e\u305f\u306f VB.NET \u3067\u4f5c\u6210\u3057\u305f\u30a2\u30bb\u30f3\u30d6\u30ea\u30d5\u30a1\u30a4\u30eb\u3092 COM \u30b5\u30fc\u30d0\u3068\u3057\u3066\u767b\u9332\u3059\u308b\u306b\u306f\u3001.NET Framework \u306b\u540c\u68b1\u3055\u308c\u3066\u3044\u308b\u300cregasm\u300d\u30c4\u30fc\u30eb\u3092\u4f7f\u3044\u307e\u3059\u3002\nregasm ContextMenuExtension.dll /codebase\n\n\n\u304a\u308f\u308a\u306b\n\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3082\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\n.NET \u3067 Windows \u30a8\u30af\u30b9\u30d7\u30ed\u30fc\u30e9\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30e1\u30cb\u30e5\u30fc\u3092\u62e1\u5f35 - Qiita\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306e\u5927\u534a\u3092\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3057\u305f SharpShell \u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n# \u306f\u3058\u3081\u306b\n\n\u50d5\u306f\u4ee5\u524d Delphi \u3067 Windows \u306e\u30b7\u30a7\u30eb\u62e1\u5f35\uff08Shell Extension\uff09\u3092\u4f7f\u3063\u3066\u30a8\u30af\u30b9\u30d7\u30ed\u30fc\u30e9\u306b\u6a5f\u80fd\u3092\u8ffd\u52a0\u3059\u308b\u30a2\u30d7\u30ea\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n[\u7c21\u5358\u30a8\u30af\u30b9\u30d7\u30ed\u30fc\u30e9\u62e1\u5f35 EzExpEx]\n(http://hp.vector.co.jp/authors/VA029585/EzExpEx/)\n\u3053\u308c\u306f\u6b8b\u5ff5\u306a\u3053\u3068\u306b 64 \u30d3\u30c3\u30c8 Windows \u306e\u30a8\u30af\u30b9\u30d7\u30ed\u30fc\u30e9\u3067\u52d5\u304b\u306a\u3044\u3093\u3067\u3059\u3088\u306d\u3002\u50d5\u304c\u6301\u3063\u3066\u3044\u308b Delphi \u3067\u306f 64 \u30d3\u30c3\u30c8 Windows \u30a2\u30d7\u30ea\u3092\u4f5c\u308c\u306a\u3044\u3093\u3067\u3059\u3002\n\u3053\u308c\u3092 VB.NET \u3067\u4f5c\u308a\u76f4\u3057\u305f\u3044\u3068\u305a\u3063\u3068\u601d\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\n\u305d\u306e\u305f\u3081\u306b\u8abf\u3079\u3066\u3044\u308b\u3068\u6b21\u306e\u8a18\u4e8b\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n[How to Write Windows Shell Extension with .NET Languages - CodeProject]\n(http://www.codeproject.com/Articles/174369/How-to-Write-Windows-Shell-Extension-with-NET-Lang)\n\u3053\u308c\u3092\u53c2\u8003\u306b\u3057\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\n# Windows \u30b7\u30a7\u30eb\u62e1\u5f35\u3067\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30e1\u30cb\u30e5\u30fc\n\n\u30a8\u30af\u30b9\u30d7\u30ed\u30fc\u30e9\u3067\u53f3\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30e1\u30cb\u30e5\u30fc\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30e1\u30cb\u30e5\u30fc\u306b\u72ec\u81ea\u306e\u9805\u76ee\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n## \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u308b\n\n\u307e\u305a\u3001\u300c\u30af\u30e9\u30b9\u30e9\u30a4\u30d6\u30e9\u30ea\u300d\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u65b0\u898f\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n\u3053\u3053\u3067\u306f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d\u3092\u300cContextMenuExtension\u300d\u306b\u3057\u307e\u3059\u3002\n\n\u6b21\u306b\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u300c\u53c2\u7167\u300d\u8a2d\u5b9a\u306b\u4ee5\u4e0b\u306e\u30a2\u30bb\u30f3\u30d6\u30ea\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n* System.Windows.Forms\n* System.Drawing\n\nIDE \u304c\u4f5c\u6210\u3057\u305f\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u300cClass1.cs\u300d\u307e\u305f\u306f\u300cClass1.vb\u300d\u3092\u300cContextMenuExtension.cs\u300d\u307e\u305f\u306f\u300cContextMenuExtension.vb\u300d\u306b\u30ea\u30cd\u30fc\u30e0\u3057\u307e\u3059\u3002* \u597d\u304d\u306a\u30d5\u30a1\u30a4\u30eb\u540d\u3067\u69cb\u3044\u307e\u305b\u3093\u3002\n\n## IShellExtInit \u3068 IContextMenu \u3092\u7528\u610f\u3059\u308b\n\n```csharp:ContextMenuExtension.cs\nusing System.Runtime.InteropServices;\nusing System.Text;\n\nnamespace ContextMenuExtension\n{\n    [ComImport(), \n    InterfaceType(ComInterfaceType.InterfaceIsIUnknown),\n    Guid(\"000214e8-0000-0000-c000-000000000046\")]\n    internal interface IShellExtInit\n    {\n        void Initialize(IntPtr /*LPCITEMIDLIST*/ pidlFolder, IntPtr /*LPDATAOBJECT*/ pDataObj, IntPtr /*HKEY*/ hKeyProgID);\n    }\n\n    [ComImport(), \n    InterfaceType(ComInterfaceType.InterfaceIsIUnknown),\n    Guid(\"000214e4-0000-0000-c000-000000000046\")]\n    internal interface IContextMenu\n    {\n        [PreserveSig]\n        int QueryContextMenu(IntPtr /*HMENU*/ hMenu, uint iMenu, uint idCmdFirst, uint idCmdLast, uint uFlags);\n        void InvokeCommand(IntPtr pici);\n        void GetCommandString(UIntPtr idCmd, uint uFlags, IntPtr pReserved, StringBuilder pszName, uint cchMax);\n    }\n```\n\n```vbnet:ContextMenuExtension.vb\nImports System.Runtime.InteropServices\nImports System.Text\n\n<ComImport(),\nInterfaceType(ComInterfaceType.InterfaceIsIUnknown),\nGuid(\"000214e8-0000-0000-c000-000000000046\")>\nFriend Interface IShellExtInit\n    Sub Initialize(ByVal pidlFolder As IntPtr, ByVal pDataObj As IntPtr, ByVal hKeyProgID As IntPtr)\nEnd Interface\n\n<ComImport(),\nInterfaceType(ComInterfaceType.InterfaceIsIUnknown),\nGuid(\"000214e4-0000-0000-c000-000000000046\")>\nFriend Interface IContextMenu\n    <PreserveSig()>\n    Function QueryContextMenu(ByVal hMenu As IntPtr, ByVal iMenu As UInt32, ByVal idCmdFirst As UInt32, ByVal idCmdLast As UInt32, ByVal uFlags As UInt32) As Integer\n    Sub InvokeCommand(ByVal pici As IntPtr)\n    Sub GetCommandString(ByVal idCmd As UIntPtr, ByVal uFlags As UInt32, ByVal pReserved As IntPtr, ByVal pszName As StringBuilder, ByVal cchMax As UInt32)\nEnd Interface\n```\n\n## IShellExtInit \u3068 IContextMenu \u304b\u3089\u6d3e\u751f\u3059\u308b\n\n\u300cContextMenuExtension\u300d\u30af\u30e9\u30b9\u3092\u300cIShellExtInit\u300d\u300cIContextMenu\u300d\u304b\u3089\u6d3e\u751f\u3059\u308b\u3088\u3046\u66f8\u63db\u3057\u307e\u3059\u3002\n\n```csharp:ContextMenuExtension.cs\n    public class ContextMenuExtension : IShellExtInit, IContextMenu\n    {\n```\n\n```vbnet:ContextMenuExtension.vb\nPublic Class ContextMenuExtension\n    Implements IShellExtInit, IContextMenu\n```\n\nIDE \u304c\u300c\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306e\u5b9f\u88c5\u300d\u3092\u52a9\u8a00\u3057\u3066\u304f\u308b\u306e\u3067\u5f93\u3063\u3066\u4ee5\u4e0b\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n* Initialize\n* QueryContextMenu\n* GetComandString\n* InvokeCommand\n\n## \u5fc5\u8981\u306a\u5b9a\u6570\u3084\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u610f\u3059\u308b\n\n\u5fc5\u8981\u306a\u5b9a\u6570\u3084\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n\n```csharp:ContextMenuExtension.cs\nusing System.Runtime.InteropServices.ComTypes;\n\nnamespace CsContextMenuExtension\n{\n    internal enum CLIPFORMAT : uint\n    {\n        CF_TEXT = 1,\n        CF_BITMAP = 2,\n        CF_METAFILEPICT = 3,\n        CF_SYLK = 4,\n        CF_DIF = 5,\n        CF_TIFF = 6,\n        CF_OEMTEXT = 7,\n        CF_DIB = 8,\n        CF_PALETTE = 9,\n        CF_PENDATA = 10,\n        CF_RIFF = 11,\n        CF_WAVE = 12,\n        CF_UNICODETEXT = 13,\n        CF_ENHMETAFILE = 14,\n        CF_HDROP = 15,\n        CF_LOCALE = 16,\n        CF_MAX = 17,\n\n        CF_OWNERDISPLAY = 0x0080,\n        CF_DSPTEXT = 0x0081,\n        CF_DSPBITMAP = 0x0082,\n        CF_DSPMETAFILEPICT = 0x0083,\n        CF_DSPENHMETAFILE = 0x008E,\n\n        CF_PRIVATEFIRST = 0x0200,\n        CF_PRIVATELAST = 0x02FF,\n\n        CF_GDIOBJFIRST = 0x0300,\n        CF_GDIOBJLAST = 0x03FF\n    }\n\n    internal static class WinError\n    {\n        public const int S_OK = 0x0000;\n        public const int S_FALSE = 0x0001;\n        public const int E_FAIL = -2147467259;\n        public const int E_INVALIDARG = -2147024809;\n        public const int E_OUTOFMEMORY = -2147024882;\n        public const int STRSAFE_E_INSUFFICIENT_BUFFER = -2147024774;\n\n        public const uint SEVERITY_SUCCESS = 0;\n        public const uint SEVERITY_ERROR = 1;\n\n        public static int MAKE_HRESULT(uint sev, uint fac, uint code)\n        {\n            return (int)((sev << 31) | (fac << 16) | code);\n        }\n    }\n\n    [Flags]\n    internal enum MIIM : uint\n    {\n        MIIM_STATE = 0x00000001,\n        MIIM_ID = 0x00000002,\n        MIIM_SUBMENU = 0x00000004,\n        MIIM_CHECKMARKS = 0x00000008,\n        MIIM_TYPE = 0x00000010,\n        MIIM_DATA = 0x00000020,\n        MIIM_STRING = 0x00000040,\n        MIIM_BITMAP = 0x00000080,\n        MIIM_FTYPE = 0x00000100\n    }\n\n    internal enum MFT : uint\n    {\n        MFT_STRING = 0x00000000,\n        MFT_BITMAP = 0x00000004,\n        MFT_MENUBARBREAK = 0x00000020,\n        MFT_MENUBREAK = 0x00000040,\n        MFT_OWNERDRAW = 0x00000100,\n        MFT_RADIOCHECK = 0x00000200,\n        MFT_SEPARATOR = 0x00000800,\n        MFT_RIGHTORDER = 0x00002000,\n        MFT_RIGHTJUSTIFY = 0x00004000\n    }\n\n    internal enum MFS : uint\n    {\n        MFS_ENABLED = 0x00000000,\n        MFS_UNCHECKED = 0x00000000,\n        MFS_UNHILITE = 0x00000000,\n        MFS_GRAYED = 0x00000003,\n        MFS_DISABLED = 0x00000003,\n        MFS_CHECKED = 0x00000008,\n        MFS_HILITE = 0x00000080,\n        MFS_DEFAULT = 0x00001000\n    }\n\n    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]\n    internal struct MENUITEMINFO\n    {\n        public uint cbSize;\n        public MIIM fMask;\n        public MFT fType;\n        public MFS fState;\n        public uint wID;\n        public IntPtr hSubMenu;\n        public IntPtr hbmpChecked;\n        public IntPtr hbmpUnchecked;\n        public UIntPtr dwItemData;\n        public string dwTypeData;\n        public uint cch;\n        public IntPtr hbmpItem;\n    }\n\n    [Flags]\n    internal enum CMF : uint\n    {\n        CMF_NORMAL = 0x00000000,\n        CMF_DEFAULTONLY = 0x00000001,\n        CMF_VERBSONLY = 0x00000002,\n        CMF_EXPLORE = 0x00000004,\n        CMF_NOVERBS = 0x00000008,\n        CMF_CANRENAME = 0x00000010,\n        CMF_NODEFAULT = 0x00000020,\n        CMF_INCLUDESTATIC = 0x00000040,\n        CMF_ITEMMENU = 0x00000080,\n        CMF_EXTENDEDVERBS = 0x00000100,\n        CMF_DISABLEDVERBS = 0x00000200,\n        CMF_ASYNCVERBSTATE = 0x00000400,\n        CMF_OPTIMIZEFORINVOKE = 0x00000800,\n        CMF_SYNCCASCADEMENU = 0x00001000,\n        CMF_DONOTPICKDEFAULT = 0x00002000,\n        CMF_RESERVED = 0xFFFF0000\n    }\n\n    [Flags]\n    internal enum CMIC : uint\n    {\n        CMIC_MASK_ICON = 0x00000010,\n        CMIC_MASK_HOTKEY = 0x00000020,\n        CMIC_MASK_NOASYNC = 0x00000100,\n        CMIC_MASK_FLAG_NO_UI = 0x00000400,\n        CMIC_MASK_UNICODE = 0x00004000,\n        CMIC_MASK_NO_CONSOLE = 0x00008000,\n        CMIC_MASK_ASYNCOK = 0x00100000,\n        CMIC_MASK_NOZONECHECKS = 0x00800000,\n        CMIC_MASK_FLAG_LOG_USAGE = 0x04000000,\n        CMIC_MASK_SHIFT_DOWN = 0x10000000,\n        CMIC_MASK_PTINVOKE = 0x20000000,\n        CMIC_MASK_CONTROL_DOWN = 0x40000000\n    }\n\n    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]\n    public struct POINT\n    {\n        public int X;\n        public int Y;\n    }\n\n    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]\n    internal struct CMINVOKECOMMANDINFO\n    {\n        public uint cbSize;\n        public CMIC fMask;\n        public IntPtr hwnd;\n        public IntPtr lpVerb;\n        [MarshalAs(UnmanagedType.LPStr)]\n        public string parameters;\n        [MarshalAs(UnmanagedType.LPStr)]\n        public string directory;\n        public int nShow;\n        public uint dwHotKey;\n        public IntPtr hIcon;\n    }\n\n    internal enum GCS : uint\n    {\n        GCS_VERBA = 0x00000000,\n        GCS_HELPTEXTA = 0x00000001,\n        GCS_VALIDATEA = 0x00000002,\n        GCS_VERBW = 0x00000004,\n        GCS_HELPTEXTW = 0x00000005,\n        GCS_VALIDATEW = 0x00000006,\n        GCS_VERBICONW = 0x00000014,\n        GCS_UNICODE = 0x00000004\n    }\n\n    internal class WinApi\n    {\n        public const int MAX_PATH = 260;\n\n        [DllImport(\"shell32\", CharSet = CharSet.Unicode)]\n        public static extern uint DragQueryFile(IntPtr hDrop, uint iFile, StringBuilder pszFile, int cch);\n\n        [DllImport(\"ole32.dll\", CharSet = CharSet.Unicode)]\n        public static extern void ReleaseStgMedium(ref STGMEDIUM pmedium);\n\n        [DllImport(\"user32\", CharSet = CharSet.Unicode, SetLastError = true)]\n        [return: MarshalAs(UnmanagedType.Bool)]\n        public static extern bool InsertMenuItem(IntPtr hMenu, uint uItem, [MarshalAs(UnmanagedType.Bool)]bool fByPosition, ref MENUITEMINFO mii);\n\n        public static int HighWord(int number)\n        {\n            return ((number & 0x80000000) == 0x80000000) ? (number >> 16) : ((number >> 16) & 0xffff);\n        }\n\n        public static int LowWord(int number)\n        {\n            return number & 0xffff;\n        }\n    }\n```\n\n```vbnet:ContextMenuExtension.vb\nImports System.Runtime.InteropServices.ComTypes\n\nFriend Enum CLIPFORMAT As UInt32\n    CF_TEXT = 1\n    CF_BITMAP = 2\n    CF_METAFILEPICT = 3\n    CF_SYLK = 4\n    CF_DIF = 5\n    CF_TIFF = 6\n    CF_OEMTEXT = 7\n    CF_DIB = 8\n    CF_PALETTE = 9\n    CF_PENDATA = 10\n    CF_RIFF = 11\n    CF_WAVE = 12\n    CF_UNICODETEXT = 13\n    CF_ENHMETAFILE = 14\n    CF_HDROP = 15\n    CF_LOCALE = &H10\n    CF_MAX = &H11\n\n    CF_OWNERDISPLAY = &H80\n    CF_DSPTEXT = &H81\n    CF_DSPBITMAP = &H82\n    CF_DSPMETAFILEPICT = &H83\n    CF_DSPENHMETAFILE = &H8E\n\n    CF_PRIVATEFIRST = &H200\n    CF_PRIVATELAST = &H2FF\n\n    CF_GDIOBJFIRST = &H300\n    CF_GDIOBJLAST = &H3FF\nEnd Enum\n\nFriend Class WinError\n    Public Const S_OK As Integer = 0\n    Public Const S_FALSE As Integer = 1\n    Public Const E_FAIL As Integer = -2147467259\n    Public Const E_INVALIDARG As Integer = -2147024809\n    Public Const E_OUTOFMEMORY As Integer = -2147024882\n    Public Const STRSAFE_E_INSUFFICIENT_BUFFER As Integer = -2147024774\n\n    Public Const SEVERITY_ERROR As UInt32 = 1\n    Public Const SEVERITY_SUCCESS As UInt32 = 0\n\n    Public Shared Function MAKE_HRESULT(ByVal sev As UInt32, ByVal fac As UInt32, ByVal code As UInt32) As Integer\n        Return CInt((((sev << &H1F) Or (fac << &H10)) Or code))\n    End Function\nEnd Class\n\n<Flags()>\nFriend Enum MIIM As UInt32\n    MIIM_STATE = 1\n    MIIM_ID = 2\n    MIIM_SUBMENU = 4\n    MIIM_CHECKMARKS = 8\n    MIIM_TYPE = &H10\n    MIIM_DATA = &H20\n    MIIM_STRING = &H40\n    MIIM_BITMAP = &H80\n    MIIM_FTYPE = &H100\nEnd Enum\n\nFriend Enum MFT As UInt32\n    MFT_STRING = 0\n    MFT_BITMAP = 4\n    MFT_MENUBARBREAK = &H20\n    MFT_MENUBREAK = &H40\n    MFT_OWNERDRAW = &H100\n    MFT_RADIOCHECK = &H200\n    MFT_SEPARATOR = &H800\n    MFT_RIGHTORDER = &H2000\n    MFT_RIGHTJUSTIFY = &H4000\nEnd Enum\n\nFriend Enum MFS As UInt32\n    MFS_ENABLED = 0\n    MFS_UNCHECKED = 0\n    MFS_UNHILITE = 0\n    MFS_DISABLED = 3\n    MFS_GRAYED = 3\n    MFS_CHECKED = 8\n    MFS_HILITE = &H80\n    MFS_DEFAULT = &H1000\nEnd Enum\n\n<StructLayout(LayoutKind.Sequential, CharSet:=CharSet.Unicode)>\nFriend Structure MENUITEMINFO\n    Public cbSize As UInt32\n    Public fMask As MIIM\n    Public fType As MFT\n    Public fState As MFS\n    Public wID As UInt32\n    Public hSubMenu As IntPtr\n    Public hbmpChecked As IntPtr\n    Public hbmpUnchecked As IntPtr\n    Public dwItemData As UIntPtr\n    Public dwTypeData As String\n    Public cch As UInt32\n    Public hbmpItem As IntPtr\nEnd Structure\n\n<Flags()>\nFriend Enum CMF\n    CMF_NORMAL = 0\n    CMF_DEFAULTONLY = 1\n    CMF_VERBSONLY = 2\n    CMF_EXPLORE = 4\n    CMF_NOVERBS = 8\n    CMF_CANRENAME = &H10\n    CMF_NODEFAULT = &H20\n    CMF_INCLUDESTATIC = &H40\n    CMF_ITEMMENU = &H80\n    CMF_EXTENDEDVERBS = &H100\n    CMF_DISABLEDVERBS = &H200\n    CMF_ASYNCVERBSTATE = &H400\n    CMF_OPTIMIZEFORINVOKE = &H800\n    CMF_SYNCCASCADEMENU = &H1000\n    CMF_DONOTPICKDEFAULT = &H2000\n    CMF_RESERVED = &HFFFF0000\nEnd Enum\n\n<Flags()>\nFriend Enum CMIC As UInt32\n    CMIC_MASK_ICON = &H10\n    CMIC_MASK_HOTKEY = &H20\n    CMIC_MASK_NOASYNC = &H100\n    CMIC_MASK_FLAG_NO_UI = &H400\n    CMIC_MASK_UNICODE = &H4000\n    CMIC_MASK_NO_CONSOLE = &H8000\n    CMIC_MASK_ASYNCOK = &H100000\n    CMIC_MASK_NOZONECHECKS = &H800000\n    CMIC_MASK_FLAG_LOG_USAGE = &H4000000\n    CMIC_MASK_SHIFT_DOWN = &H10000000\n    CMIC_MASK_PTINVOKE = &H20000000\n    CMIC_MASK_CONTROL_DOWN = &H40000000\nEnd Enum\n\n<StructLayout(LayoutKind.Sequential, CharSet:=CharSet.Unicode)>\nPublic Structure POINT\n    Public X As Integer\n    Public Y As Integer\nEnd Structure\n\n<StructLayout(LayoutKind.Sequential, CharSet:=CharSet.Unicode)>\nFriend Structure CMINVOKECOMMANDINFO\n    Public cbSize As UInt32\n    Public fMask As CMIC\n    Public hwnd As IntPtr\n    Public lpVerb As IntPtr\n    <MarshalAs(UnmanagedType.LPStr)>\n    Public parameters As String\n    <MarshalAs(UnmanagedType.LPStr)>\n    Public directory As String\n    Public nShow As Integer\n    Public dwHotKey As UInt32\n    Public hIcon As IntPtr\nEnd Structure\n\nFriend Enum GCS As UInt32\n    GCS_VERBA = 0\n    GCS_HELPTEXTA = 1\n    GCS_VALIDATEA = 2\n    GCS_HELPTEXTW = 5\n    GCS_UNICODE = 4\n    GCS_VERBW = 4\n    GCS_VALIDATEW = 6\n    GCS_VERBICONW = 20\nEnd Enum\n\nFriend Class WinApi\n    Public Const MAX_PATH As Integer = 260\n\n    <DllImport(\"shell32\", CharSet:=CharSet.Unicode)>\n    Public Shared Function DragQueryFile(ByVal hDrop As IntPtr, ByVal iFile As UInt32, ByVal pszFile As StringBuilder, ByVal cch As Integer) As UInt32\n    End Function\n\n    <DllImport(\"ole32.dll\", CharSet:=CharSet.Unicode)>\n    Public Shared Sub ReleaseStgMedium(ByRef pmedium As STGMEDIUM)\n    End Sub\n\n    <DllImport(\"user32\", CharSet:=CharSet.Unicode, SetLastError:=True)>\n    Public Shared Function InsertMenuItem(ByVal hMenu As IntPtr, ByVal uItem As UInt32, <MarshalAs(UnmanagedType.Bool)> ByVal fByPosition As Boolean, ByRef mii As MENUITEMINFO) As <MarshalAs(UnmanagedType.Bool)> Boolean\n    End Function\n\n    Public Shared Function HighWord(ByVal number As Integer) As Integer\n        Return If(((number And &H80000000) = &H80000000), (number >> &H10), ((number >> &H10) And &HFFFF))\n    End Function\n\n    Public Shared Function LowWord(ByVal number As Integer) As Integer\n        Return (number And &HFFFF)\n    End Function\nEnd Class\n```\n\n## Initialize \u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\n\n\u9078\u629e\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\uff0f\u30d5\u30a9\u30eb\u30c0\u3092\u53d6\u5f97\u3057\u3066\u5909\u6570\u306b\u30bb\u30c3\u30c8\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```csharp:ContextMenuExtension.cs\n    public class ContextMenuExtension : IShellExtInit, IContextMenu\n    {\n        private string selectedFile;\n\n        public void Initialize(IntPtr pidlFolder, IntPtr pDataObj, IntPtr hKeyProgID)\n        {\n            // \u9078\u629e\u3055\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb/\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u53d6\u5f97\n            if (pDataObj == IntPtr.Zero)\n            {\n                throw new ArgumentException();\n            }\n            FORMATETC fe = new FORMATETC();\n            fe.cfFormat = (short)CLIPFORMAT.CF_HDROP;\n            fe.ptd = IntPtr.Zero;\n            fe.dwAspect = DVASPECT.DVASPECT_CONTENT;\n            fe.lindex = -1;\n            fe.tymed = TYMED.TYMED_HGLOBAL;\n            STGMEDIUM stm = new STGMEDIUM();\n            IDataObject dataObject = (IDataObject)Marshal.GetObjectForIUnknown(pDataObj);\n            dataObject.GetData(ref fe, out stm);\n            try\n            {\n                IntPtr hDrop = stm.unionmember;\n                if (hDrop == IntPtr.Zero)\n                {\n                    throw new ArgumentException();\n                }\n                uint nFiles = WinApi.DragQueryFile(hDrop, UInt32.MaxValue, null, 0);\n                if (nFiles == 1)\n                {\n                    StringBuilder fileName = new StringBuilder(WinApi.MAX_PATH);\n                    if (0 == WinApi.DragQueryFile(hDrop, 0, fileName,\n                        fileName.Capacity))\n                    {\n                        Marshal.ThrowExceptionForHR(WinError.E_FAIL);\n                    }\n                    this.selectedFile = fileName.ToString();\n                }\n                else\n                {\n                    Marshal.ThrowExceptionForHR(WinError.E_FAIL);\n                }\n            }\n            finally\n            {\n                WinApi.ReleaseStgMedium(ref stm);\n            }\n        }\n```\n\n```vbnet:ContextMenuExtension.vb\nPublic Class ContextMenuExtension\n    Implements IShellExtInit, IContextMenu\n\n    Private SelectedFile As String\n\n    Public Sub Initialize(ByVal pidlFolder As IntPtr, ByVal pDataObj As IntPtr, ByVal hKeyProgID As IntPtr) Implements IShellExtInit.Initialize\n\n        '\u9078\u629e\u3055\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb/\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u53d6\u5f97\n        If (pDataObj = IntPtr.Zero) Then\n            Throw New ArgumentException\n        End If\n        Dim fe As New FORMATETC\n        With fe\n            .cfFormat = CLIPFORMAT.CF_HDROP\n            .ptd = IntPtr.Zero\n            .dwAspect = DVASPECT.DVASPECT_CONTENT\n            .lindex = -1\n            .tymed = TYMED.TYMED_HGLOBAL\n        End With\n        Dim stm As New STGMEDIUM\n        Dim dataObject As IDataObject = Marshal.GetObjectForIUnknown(pDataObj)\n        dataObject.GetData(fe, stm)\n        Try\n            Dim hDrop As IntPtr = stm.unionmember\n            If (hDrop = IntPtr.Zero) Then\n                Throw New ArgumentException\n            End If\n            Dim nFiles As UInteger = WinApi.DragQueryFile(hDrop, UInt32.MaxValue, Nothing, 0)\n            If (nFiles = 1) Then\n                Dim fileName As New StringBuilder(WinApi.MAX_PATH)\n                If (0 = WinApi.DragQueryFile(hDrop, 0, fileName, fileName.Capacity)) Then\n                    Marshal.ThrowExceptionForHR(WinError.E_FAIL)\n                End If\n                Me.SelectedFile = fileName.ToString\n            Else\n                Marshal.ThrowExceptionForHR(WinError.E_FAIL)\n            End If\n        Finally\n            WinApi.ReleaseStgMedium((stm))\n        End Try\n    End Sub\n```\n\n## QueryContextMenu \u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\n\n\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30e1\u30cb\u30e5\u30fc\u306b\u9805\u76ee\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n```csharp:ContextMenuExtension.cs\n    public class ContextMenuExtension : IShellExtInit, IContextMenu\n    {\n        private uint IDM_SHOW_FILENAME = 0;\n        private string TXT_SHOW_FILENAME = \"\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u8868\u793a(&D)\";\n\n        public int QueryContextMenu(IntPtr hMenu, uint iMenu, uint idCmdFirst, uint idCmdLast, uint uFlags)\n        {\n            // \u30e1\u30cb\u30e5\u30fc\u9805\u76ee\u3092\u8ffd\u52a0\n            if (((uint)CMF.CMF_DEFAULTONLY & uFlags) != 0)\n            {\n                return WinError.MAKE_HRESULT(WinError.SEVERITY_SUCCESS, 0, 0);\n            }\n            MENUITEMINFO mii = new MENUITEMINFO();\n            mii.cbSize = (uint)Marshal.SizeOf(mii);\n            mii.fMask = MIIM.MIIM_ID | MIIM.MIIM_TYPE | MIIM.MIIM_STATE;\n            mii.wID = idCmdFirst + IDM_SHOW_FILENAME;\n            mii.fType = MFT.MFT_STRING;\n            mii.dwTypeData = TXT_SHOW_FILENAME;\n            mii.fState = MFS.MFS_ENABLED;\n            if (!WinApi.InsertMenuItem(hMenu, iMenu, true, ref mii))\n            {\n                return Marshal.GetHRForLastWin32Error();\n            }\n\n            // \u8ffd\u52a0\u3057\u305f\u30e1\u30cb\u30e5\u30fc\u9805\u76ee\u306e\u6570\u3092\u8fd4\u3059\n            return WinError.MAKE_HRESULT(WinError.SEVERITY_SUCCESS, 0, 1);\n        }\n```\n\n```vbnet:ContextMenuExtension.vb\nPublic Class ContextMenuExtension\n    Implements IShellExtInit, IContextMenu\n\n    Private IDM_SHOW_FILENAME As UInteger = 0\n    Private TXT_SHOW_FILENAME As String = \"\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u8868\u793a(&D)\"\n\n    Public Function QueryContextMenu(ByVal hMenu As IntPtr, ByVal iMenu As UInt32, ByVal idCmdFirst As UInt32, ByVal idCmdLast As UInt32, ByVal uFlags As UInt32) As Integer Implements IContextMenu.QueryContextMenu\n\n        '\u30e1\u30cb\u30e5\u30fc\u9805\u76ee\u3092\u8ffd\u52a0\n        If ((CMF.CMF_DEFAULTONLY And uFlags) <> 0) Then\n            Return WinError.MAKE_HRESULT(WinError.SEVERITY_SUCCESS, 0, 0)\n        End If\n        Dim mii As New MENUITEMINFO\n        With mii\n            .cbSize = Marshal.SizeOf(mii)\n            .fMask = MIIM.MIIM_TYPE Or MIIM.MIIM_STATE Or MIIM.MIIM_ID\n            .wID = idCmdFirst + Me.IDM_SHOW_FILENAME\n            .fType = MFT.MFT_STRING\n            .dwTypeData = Me.TXT_SHOW_FILENAME\n            .fState = MFS.MFS_ENABLED\n        End With\n        If Not WinApi.InsertMenuItem(hMenu, iMenu, True, mii) Then\n            Return Marshal.GetHRForLastWin32Error\n        End If\n\n        '\u8ffd\u52a0\u3057\u305f\u30e1\u30cb\u30e5\u30fc\u9805\u76ee\u306e\u6570\u3092\u8fd4\u3059\n        Return WinError.MAKE_HRESULT(WinError.SEVERITY_SUCCESS, 0, 1))\n    End Function\n```\n\n## GetCommandString \u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\n\n\u30a8\u30af\u30b9\u30d7\u30ed\u30fc\u30e9\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u30d0\u30fc\u306b\u8868\u793a\u3055\u308c\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n```csharp:ContextMenuExtension.cs\n    public class ContextMenuExtension : IShellExtInit, IContextMenu\n    {\n        private string MSG_SHOW_FILENAME = \"\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u8868\u793a\u3057\u307e\u3059\u3002\";\n\n        public void GetCommandString(UIntPtr idCmd, uint uFlags, IntPtr pReserved, StringBuilder pszName, uint cchMax)\n        {\n            if (idCmd.ToUInt32() != IDM_SHOW_FILENAME)\n            {\n                return;\n            }\n            if ((GCS)uFlags == GCS.GCS_HELPTEXTW)\n            {\n                if (MSG_SHOW_FILENAME.Length > cchMax - 1)\n                {\n                    Marshal.ThrowExceptionForHR(WinError.STRSAFE_E_INSUFFICIENT_BUFFER);\n                }\n                else\n                {\n                    pszName.Clear();\n                    pszName.Append(MSG_SHOW_FILENAME);\n                }\n            }\n        }\n```\n\n```vbnet:ContextMenuExtension.vb\nPublic Class ContextMenuExtension\n    Implements IShellExtInit, IContextMenu\n\n    Private MSG_SHOW_FILENAME As String = \"\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u8868\u793a\u3057\u307e\u3059\u3002\"\n\n    Public Sub GetCommandString(ByVal idCmd As UIntPtr, ByVal uFlags As UInt32, ByVal pReserved As IntPtr, ByVal pszName As StringBuilder, ByVal cchMax As UInt32) Implements IContextMenu.GetCommandString\n\n        If Not (idCmd.ToUInt32 = IDM_SHOW_FILENAME) Then\n            Exit Sub\n        End If\n        If DirectCast(uFlags, GCS) = GCS.GCS_HELPTEXTW Then\n            If (MSG_SHOW_FILENAME.Length > (cchMax - 1)) Then\n                Marshal.ThrowExceptionForHR(WinError.STRSAFE_E_INSUFFICIENT_BUFFER)\n            Else\n                pszName.Clear()\n                pszName.Append(MSG_SHOW_FILENAME)\n            End If\n        End If\n    End Sub\n```\n\n## InvokeCommand \u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\n\n\u30e1\u30cb\u30e5\u30fc\u9805\u76ee\u304c\u9078\u629e\u3055\u308c\u308b\u3068\u547c\u51fa\u3055\u308c\u307e\u3059\u3002\n\n```csharp:ContextMenuExtension.cs\n    public class ContextMenuExtension : IShellExtInit, IContextMenu\n    {\n        public void InvokeCommand(IntPtr pici)\n        {\n            CMINVOKECOMMANDINFO ici = (CMINVOKECOMMANDINFO)Marshal.PtrToStructure(pici, typeof(CMINVOKECOMMANDINFO));\n            // ici.lpVerb \u306e\u4e0a\u4f4d\u30ef\u30fc\u30c9\u304c NULL \u3067\u306a\u3051\u308c\u3070\n            // \u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u5225\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u3063\u3066\u547c\u51fa\u3055\u308c\u305f\u3082\u306e\u306a\u306e\u3067\n            // \u305d\u306e\u307e\u307e\u8fd4\u3059\n            if (WinApi.HighWord(ici.lpVerb.ToInt32()) != 0)\n            {\n                return;\n            }\n\n            // \u305d\u3046\u3067\u306a\u3051\u308c\u3070\n            // \u30b7\u30a7\u30eb\u304c\u547c\u51fa\u3057\u305f\u3082\u306e\u3067\n            // ici.lpVerb \u306e\u4e0b\u4f4d\u30ef\u30fc\u30c9\u304c\u3001\u30e6\u30fc\u30b6\u304c\u9078\u629e\u3057\u305f\u30e1\u30cb\u30e5\u30fc\u9805\u76ee\n            if (WinApi.LowWord(ici.lpVerb.ToInt32()) == IDM_SHOW_FILENAME)\n            {\n                this.DoShowFileName();\n            }\n            else\n            {\n                Marshal.ThrowExceptionForHR(WinError.E_FAIL);\n            }\n        }\n```\n\n```vbnet:ContextMenuExtension.vb\nPublic Class ContextMenuExtension\n    Implements IShellExtInit, IContextMenu\n\n    Public Sub InvokeCommand(ByVal pici As IntPtr) Implements IContextMenu.InvokeCommand\n\n        Dim ici As CMINVOKECOMMANDINFO = Marshal.PtrToStructure(pici, GetType(CMINVOKECOMMANDINFO))\n        'ici.lpVerb \u306e\u4e0a\u4f4d\u30ef\u30fc\u30c9\u304c NULL \u3067\u306a\u3051\u308c\u3070\n        '\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u5225\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u3063\u3066\u547c\u51fa\u3055\u308c\u305f\u3082\u306e\u306a\u306e\u3067\n        '\u305d\u306e\u307e\u307e\u8fd4\u3059\n        If (WinApi.HighWord(ici.lpVerb.ToInt32) <> 0) Then\n            Exit Sub\n        End If\n\n        '\u305d\u3046\u3067\u306a\u3051\u308c\u3070\n        '\u30b7\u30a7\u30eb\u304c\u547c\u51fa\u3057\u305f\u3082\u306e\u3067\n        'ici.lpVerb \u306e\u4e0b\u4f4d\u30ef\u30fc\u30c9\u304c\u3001\u30e6\u30fc\u30b6\u304c\u9078\u629e\u3057\u305f\u30e1\u30cb\u30e5\u30fc\u9805\u76ee\n        If (WinApi.LowWord(ici.lpVerb.ToInt32) = IDM_SHOW_FILENAME) Then\n            Me.DoShowFileName()\n        Else\n            Marshal.ThrowExceptionForHR(WinError.E_FAIL)\n        End If\n    End Sub\n```\n\n\u4e3b\u306a\u6a5f\u80fd\u306f\u300cDoShowFileName\u300d\u3002\u9078\u629e\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u540d\u79f0\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n\n```csharp:ContextMenuExtension.cs\n    public class ContextMenuExtension : IShellExtInit, IContextMenu\n    {\n        private void DoShowFileName()\n        {\n            System.Windows.Forms.MessageBox.Show(\"\u9078\u629e\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb: \" + Environment.NewLine + this.selectedFile);\n        }\n```\n\n```vbnet:ContextMenuExtension.vb\nPublic Class ContextMenuExtension\n    Implements IShellExtInit, IContextMenu\n\n    Private Sub DoShowFileName(hwnd As IntPtr)\n        System.Windows.Forms.MessageBox.Show(\"\u9078\u629e\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb: \" & Environment.NewLine & Me.SelectedFile, My.Application.Info.Title)\n    End Sub\n```\n\n## COM \u30b5\u30fc\u30d0\u767b\u9332\u6a5f\u80fd\u3092\u5b9f\u88c5\u3059\u308b\n\n\u4f5c\u6210\u3057\u3066\u3044\u308b\u30af\u30e9\u30b9\u30e9\u30a4\u30d6\u30e9\u30ea\u304c COM \u30b5\u30fc\u30d0\u3068\u3057\u3066\u767b\u9332\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n\u307e\u305a\u3001\u30a2\u30bb\u30f3\u30d6\u30ea\u3092 COM \u53c2\u7167\u53ef\u80fd\u306b\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u624b\u9806\u3067\u4f5c\u696d\u3057\u307e\u3059\u3002\n\n> \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u300c\u30d7\u30ed\u30d1\u30c6\u30a3\u300d\u3092\u958b\u304f\u3002\n> \u300c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u300d\u30bf\u30d6\u3092\u9078\u629e\u3002\n> \u300c\u30a2\u30bb\u30f3\u30d6\u30ea\u60c5\u5831\u300d\u3092\u62bc\u4e0b\u3002\n> \u30c0\u30a4\u30a2\u30ed\u30b0\u30dc\u30c3\u30af\u30b9\u3067\u300c\u30a2\u30bb\u30f3\u30d6\u30ea\u3092 COM \u53c2\u7167\u53ef\u80fd\u306b\u3059\u308b\u300d\u306b\u30c1\u30a7\u30c3\u30af\u3002\n\n\u6b21\u306b\u3001\u30a2\u30bb\u30f3\u30d6\u30ea\u306b\u7f72\u540d\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u624b\u9806\u3067\u4f5c\u696d\u3057\u307e\u3059\u3002\n\n> \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u300c\u30d7\u30ed\u30d1\u30c6\u30a3\u300d\u3092\u958b\u304f\u3002\n> \u300c\u7f72\u540d\u300d\u30bf\u30d6\u3092\u9078\u629e\u3002\n> \u300c\u30a2\u30bb\u30f3\u30d6\u30ea\u306b\u7f72\u540d\u3059\u308b\u300d\u3092\u30c1\u30a7\u30c3\u30af\u3002\n> \u300c\u53b3\u5bc6\u306a\u540d\u524d\u306e\u30ad\u30fc\u30d5\u30a1\u30a4\u30eb\u3092\u9078\u629e\u300d\u3067\u300c\u65b0\u898f\u4f5c\u6210\u300d\u3092\u9078\u629e\u3002\n> \u30c0\u30a4\u30a2\u30ed\u30b0\u30dc\u30c3\u30af\u30b9\u3067\u300c\u30ad\u30fc\u30d5\u30a1\u30a4\u30eb\u540d\u300d\u306b\u4efb\u610f\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u6307\u5b9a\u3002\n> \u300c\u30ad\u30fc\u30d5\u30a1\u30a4\u30eb\u3092\u30d1\u30b9\u30ef\u30fc\u30c9\u3067\u4fdd\u8b77\u3059\u308b\u300d\u306f\u5fc5\u9808\u3067\u306f\u306a\u3044\u3002\n\n\u30af\u30e9\u30b9\u306b\u5c5e\u6027\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\nGUID \u306f\u30af\u30e9\u30b9\u3054\u3068\u306b\u65b0\u898f\u4f5c\u6210\u3057\u3066\u4e0b\u3055\u3044\u3002\n\n```csharp:ContextMenuExtension.cs\n    [ClassInterface(ClassInterfaceType.None),\n    Guid(\"99999999-9999-9999-9999-9999999999\"), \n    ComVisible(true)]\n    public class ContextMenuExtension : IShellExtInit, IContextMenu\n    {\n```\n\n```vbnet:ContextMenuExtension.vb\n<ClassInterface(ClassInterfaceType.None),\nGuid(\"99999999-9999-9999-9999-9999999999\"),\nComVisible(True)>\nPublic Class ContextMenuExtension\n    Implements IShellExtInit, IContextMenu\n```\n\n\u767b\u9332\u304a\u3088\u3073\u89e3\u9664\u306e\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n\u3053\u3053\u3067\u5bfe\u8c61\u3068\u306a\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n```csharp:ContextMenuExtension.cs\nusing Microsoft.Win32\n\n    public class ContextMenuExtension : IShellExtInit, IContextMenu\n    {\n        private const string Description = \"ContextMenuExtention Class\";\n        private const string TargetFileType = \"*\";\n\n        [ComRegisterFunction()]\n        public static void Register(Type t)\n        {\n            try\n            {\n                Guid clsid = t.GUID;\n                if (clsid == Guid.Empty)\n                {\n                    throw new ArgumentException(\"clsid must not be empty\");\n                }\n                string keyName = string.Format(\"{0}\\\\shellex\\\\ContextMenuHandlers\\\\{1}\", TargetFileType, clsid.ToString(\"B\"));\n                using (RegistryKey key = Registry.ClassesRoot.CreateSubKey(keyName))\n                {\n                    if (key != null && !string.IsNullOrEmpty(Description))\n                    {\n                        key.SetValue(null, Description);\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex.Message);\n                throw;\n            }\n        }\n\n        [ComUnregisterFunction()]\n        public static void Unregister(Type t)\n        {\n            try\n            {\n                Guid clsid = t.GUID;\n                if (clsid == Guid.Empty)\n                {\n                    throw new ArgumentException(\"clsid must not be empty\");\n                }\n                string keyName = string.Format(\"{0}\\\\shellex\\\\ContextMenuHandlers\\\\{1}\", TargetFileType, clsid.ToString(\"B\"));\n                Registry.ClassesRoot.DeleteSubKeyTree(keyName, false);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex.Message);\n                throw;\n            }\n        }\n```\n\n```vbnet:ContextMenuExtension.vb\nImports Microsoft.Win32\n\nPublic Class ContextMenuExtension\n    Implements IShellExtInit, IContextMenu\n\n    Private Const Description As String = \"ContextMenuExtention Class\"\n    Private Const TargetFileType As String = \"*\"\n\n    <ComRegisterFunction()>\n    Public Shared Sub Register(ByVal t As Type)\n        Try\n            Dim clsid = t.GUID\n            If clsid = Guid.Empty Then\n                Throw New ArgumentException(\"clsid must not be empty\")\n            End If\n            Dim keyName As String = String.Format(\"{0}\\shellex\\ContextMenuHandlers\\{1}\", TargetFileType, clsid.ToString(\"B\"))\n            Using key As RegistryKey = Registry.ClassesRoot.CreateSubKey(keyName)\n                If ((key IsNot Nothing) AndAlso (Not String.IsNullOrEmpty(Description))) Then\n                    key.SetValue(Nothing, Description)\n                End If\n            End Using\n        Catch ex As Exception\n            Console.WriteLine(ex.Message)\n            Throw\n        End Try\n    End Sub\n\n    <ComUnregisterFunction()>\n    Public Shared Sub Unregister(ByVal t As Type)\n        Try\n            Dim clsid = t.GUID\n            If clsid = Guid.Empty Then\n                Throw New ArgumentException(\"clsid must not be empty\")\n            End If\n            Dim keyName As String = String.Format(\"{0}\\shellex\\ContextMenuHandlers\\{1}\", TargetFileType, clsid.ToString(\"B\"))\n            Registry.ClassesRoot.DeleteSubKeyTree(keyName, False)\n        Catch ex As Exception\n            Console.WriteLine(ex.Message)\n            Throw\n        End Try\n    End Sub\n```\n\n## \u30d3\u30eb\u30c9\u3059\u308b\n\n\u30d3\u30eb\u30c9\u3059\u308b\u3068\u30a2\u30bb\u30f3\u30d6\u30ea\u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u3092 COM \u30b5\u30fc\u30d0\u3068\u3057\u3066 Windows \u306b\u767b\u9332\u3057\u307e\u3059\u3002\n\n## COM \u30b5\u30fc\u30d0\u3068\u3057\u3066\u767b\u9332\u3059\u308b\n\nC# \u307e\u305f\u306f VB.NET \u3067\u4f5c\u6210\u3057\u305f\u30a2\u30bb\u30f3\u30d6\u30ea\u30d5\u30a1\u30a4\u30eb\u3092 COM \u30b5\u30fc\u30d0\u3068\u3057\u3066\u767b\u9332\u3059\u308b\u306b\u306f\u3001.NET Framework \u306b\u540c\u68b1\u3055\u308c\u3066\u3044\u308b\u300cregasm\u300d\u30c4\u30fc\u30eb\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```\nregasm ContextMenuExtension.dll /codebase\n```\n\n# \u304a\u308f\u308a\u306b\n\n\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3082\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\n[.NET \u3067 Windows \u30a8\u30af\u30b9\u30d7\u30ed\u30fc\u30e9\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30e1\u30cb\u30e5\u30fc\u3092\u62e1\u5f35 - Qiita] (http://qiita.com/tinymouse/items/eb8aebb39ddd5c103347)\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306e\u5927\u534a\u3092\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3057\u305f SharpShell \u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n", "tags": [".NET", "VB.Net", "C#"]}