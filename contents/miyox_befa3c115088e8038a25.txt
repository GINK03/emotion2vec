{"context": "RocketBoards.org\u306eOpenCL Mandelbrot Demo on Altera\u3092\u8aad\u3093\u3067\u8a66\u3057\u3066\u307f\u305f\uff0c\u3068\u3044\u3046\u8a71\uff0e\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\nhttps://github.com/altcrauer/mandelbrot_demo \u3067\u516c\u958b\u3055\u308c\u3066\u3044\u308b\uff0e\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306fARM\u4e0a\u3067\u5b9f\u884c\u3055\u308c\u308b\u3082\u306e\u3068FPGA\u3067\u5b9f\u884c\u3055\u308c\u308b\u3082\u306e\u304b\u3089\u69cb\u6210\u3055\u308c\u308b\uff0e\n\nARM\u4e0a\u3067\u5b9f\u884c\u3055\u308c\u308b\u3082\u306e\n\nmain.cpp\n\n\ncolorTableInit \u8272\u30c6\u30fc\u30d6\u30eb[0\uff5e999]\u306e\u521d\u671f\u5316\nmain \u521d\u671f\u5316\u3068\u5b9f\u884c\n\n\nMandelbrotWindow.cpp \u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u30fc\u63cf\u753b\u306e\u51e6\u7406\u5168\u4f53\u306e\u7d71\u62ec\n\n\nmandelbrotWindowInitialize hardwareInitialize\u3068softwareInitialize\u3092\u547c\u3073\u51fa\u3059\uff0e\u307e\u305f\uff0cSDL_CreateRGBSurfaceFrom\u3092\u547c\u3073\u51fa\u3057\u3066\u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u30fc\u753b\u50cf\u4fdd\u6301\u7528\u306e\u30d0\u30c3\u30d5\u30a1\u30922\u9762\u7528\u610f(\u30d0\u30c3\u30d5\u30a1\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u306ftheFrames[0], theFrames[1]\u3067\u4fdd\u6301\u3055\u308c\u308b)\nmandelbrotWindowRelease\nmandelbrotWindowResetView\nmandelbrotWindowUpdate\nmandelbrotWindowMainLoop \u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u30fc\u306e\u8a08\u7b97\u3068\u63cf\u753b\u51e6\u7406\u306e\u30eb\u30fc\u30d7\nmandelbrotCalculateFrame\u3092\u547c\u3073\u51fa\u3057\u3066theFrames[]\u306b\u753b\u50cf\u3092\u66f8\u304b\u305b\u308b\n\u7d50\u679c\u3092\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306b\u51fa\u529b\u3059\u308b\uff0c\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3059\u308b\uff0c\u306a\u3069\nmandelbrotWindowRepaint\nmandelbrotDumpFrame\n\n\nMandelbrot.cpp\n\n\nmandelbrotSetColorTable\nmandelbrotSwitchCalculationMethod \u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u30fc\u8a08\u7b97\u3092HW\u3067\u884c\u3046\u304bSW\u3067\u884c\u3046\u304b\u5207\u308a\u66ff\u3048\u308b\uff0e\u30c7\u30d5\u30a9\u30eb\u30c8\u306fHW\uff0e\u5b9f\u884c\u4e2d\u306bSDLK_h(SDL\u306eh\u30ad\u30fc\u62bc\u4e0b\u30a4\u30d9\u30f3\u30c8)\u3067\u5207\u308a\u66ff\u3048\uff0e\nmandelbrotCalculateFrame \u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u30fc\u8a08\u7b97\u3092HW\u307e\u305f\u306fSW\u3067\u5b9f\u884c\nmandelbrotRelease\n\n\nHardwareMandelbrot.cpp\n\n\nhardwareInitialize FPGA\u306b\u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u30fc\u8a08\u7b97\u30ab\u30fc\u30cd\u30eb\u3092\u30ed\u30fc\u30c9\nhardwareSetColorTable\nhardwareCalculateFrame FPGA\u4e0a\u306e\u30ab\u30fc\u30cd\u30eb\u3067\u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u30fc\u8a08\u7b97\nhardwareRelease\ncleanup opencl.cpp\u3067\u5229\u7528\u3055\u308c\u308b\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u95a2\u6570\uff0e\u5b9f\u969b\u306fhardwareRelease\u3092\u547c\u3093\u3067\u3044\u308b\n\n\nSoftwareMandelbrot.cpp\n\n\nsoftwareInitialize HardwareInitialize\u3068\u9055\u3063\u3066\u4f55\u3082\u3057\u3066\u306a\u3044\nsoftwareSetColorTable\nsoftwareCalculateFrame \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3067\u306e\u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u30fc\u8a08\u7b97\nsoftwareRelease\n\n\nopencl.cpp OpenCL\u30b3\u30a2\u3092\u5229\u7528\u3059\u308b\u305f\u3081\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\n\n\nsetCwdToExeDir\nfindPlatform\ngetPlatformName\ngetDeviceName\ngetDevices\ncreateProgramFromBinary\ncreateProgramFromSource\nloadBinaryFile\nfileExists\ngetBoardBinaryFile\ngetCurrentTimestamp\ngetStartEndTime\ngetStartEndTime\nwaitMilliseconds\noclContextCallback\nisAlteraPlatform\nfindAnyPlatform\n\n\nKeyboard.cpp\n\n\nkeyboardPressEvent\n\n\nMouse.cpp\n\n\nmousePressEvent\nmouseReleaseEvent\n\n\nStopWatch.cpp\n\n\nstartTime\ngetElapsedTime\n\n\noptions.cpp\n\n\nFPGA\u4e0a\u3067\u5b9f\u884c\u3055\u308c\u308b\u3082\u306e\n\ndevice/mandelbrot_kernel.cl\n\n\nhw_mandelbrot_frame \u30b0\u30ed\u30fc\u30d0\u30ebID\u306b\u3057\u305f\u304c\u3063\u3066\u4e26\u5217\u8a08\u7b97\n\n\n\n\n\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u51e6\u7406\u3068OpenCL\u51e6\u7406\u306e\u5b9f\u88c5\n\u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u30fc\u753b\u50cf\u306e\u63cf\u753b\u30eb\u30fc\u30c1\u30f3\u306fCPU\u3067\u5b9f\u884c\u3059\u308b\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3068OpenCL\u306e\u4e21\u65b9\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\uff0e\u305d\u308c\u305e\u308c\u306e\u5b9f\u88c5\u3092\u307f\u3066\u307f\u308b\n\n\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30d0\u30fc\u30b8\u30e7\u30f3\n\u3042\u308b\u30d4\u30af\u30bb\u30eb\u306e\u5024\u3092\u6c7a\u5b9a\u3059\u308bmandel_pixel\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u3066\ninline unsigned int mandel_pixel(MANDELBROT_SW_PRECISION x0, MANDELBROT_SW_PRECISION y0, unsigned int maxIterations)\n{\n// \u7565\n  while (xSqr + ySqr < 4.0 && iterations < maxIterations)\n  {\n    // perform the current iteration                                                                                                 \n    xSqr = x*x;\n    ySqr = y*y;\n\n    y = 2*x*y + y0;\n    x = xSqr - ySqr + x0;\n\n    // increment iteration count                                                                                                     \n    iterations++;\n  }\n\n  // return the iteration count                                                                                                      \n  return iterations;\n}\n\nsoftwareCalculateFrame\u306e\u4e2d\u3067\uff0c\u5168\u30d4\u30af\u30bb\u30eb\u3092\u6c42\u3081\u3066\u3044\u308b\n  // for each pixel in the y dimension window                                                                                        \n  for (j = 0, cur_y = y; j < theHeight; j++, cur_y -= cur_step_size)\n  {\n    // for each pixel in the x dimension of the window                                                                               \n    for (cur_x = x, k = 0; k < theWidth; k++, cur_x += cur_step_size)\n    {\n      // set the value of the pixel in the window                                                                                    \n      pixel = mandel_pixel(cur_x, cur_y, theSoftColorTableSize);\n      if (pixel == theSoftColorTableSize)\n        *fb_ptr++ = 0x0;\n      else\n        *fb_ptr++ = theSoftColorTable[pixel];\n    }\n  }\n\n\nOpenCL\u30d0\u30fc\u30b8\u30e7\u30f3\nOpenCL\u30ab\u30fc\u30cd\u30eb\u3068\u3057\u3066\u306f\uff0c\u2193\u306e\u51e6\u7406\u304c\u30aa\u30d5\u30ed\u30fc\u30c9\u3055\u308c\u308b\n        const size_t windowPosX = get_global_id(0);\n        const size_t windowPosY = get_global_id(1);\n        const MANDELBROT_HW_PRECISION stepPosX = x0 + (windowPosX * stepSize);\n        const MANDELBROT_HW_PRECISION stepPosY = y0 - (windowPosY * stepSize);\n// \u7565\n        while ( xSqr + ySqr < 4.0 &&\n                        iterations < maxIterations)\n        {\n                // Perform the current iteration                                                                                     \n                xSqr = x*x;\n                ySqr = y*y;\n\n                y = 2*x*y + stepPosY;\n                x = xSqr - ySqr + stepPosX;\n\n                // Increment iteration count                                                                                         \n                iterations++;\n        }\n\n        // Output black if we never finished, and a color from the look up table otherwise                                           \n        framebuffer[windowWidth * windowPosY + windowPosX] = (iterations == maxIterations)? BLACK : colorLUT[iterations];\n\n\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u304b\u3089\u306f\u6b21\u306e\u3088\u3046\u306b\u547c\u3073\u51fa\u3055\u308c\u308b(\u30a8\u30e9\u30fc\u30c1\u30a7\u30c3\u30af\u90e8\u5206\u3092\u7701\u7565\u3057\u3066\u3044\u308b)\uff0e\nint hardwareCalculateFrame(MANDELBROT_HW_PRECISION aStartX, MANDELBROT_HW_PRECISION aStartY, MANDELBROT_HW_PRECISION aScale, unsigned short int* aFrameBuffer)\n{\n  // Make sure width and height match up                                                                                             \n  hardwareSetFrameBufferSize();\n\n  unsigned rowOffset = 0;\n  for(unsigned i = 0; i < numDevices; rowOffset += rowsPerDevice[i++])\n  {\n    // Create ND range size                                                                                                          \n    size_t globalSize[2] = {thePixelDataWidth, rowsPerDevice[i]};\n\n    // Set the arguments                                                                                                             \n    unsigned argi = 0;\n    theStatus = clSetKernelArg(theKernels[i], argi++, sizeof(MANDELBROT_CL_PRECISION), (void*)&aStartX);\n    const MANDELBROT_HW_PRECISION offsetedStartY = aStartY - rowOffset * aScale;\n    theStatus = clSetKernelArg(theKernels[i], argi++, sizeof(MANDELBROT_CL_PRECISION), (void*)&offsetedStartY);\n    theStatus = clSetKernelArg(theKernels[i], argi++, sizeof(MANDELBROT_CL_PRECISION), (void*)&aScale);\n    theStatus = clSetKernelArg(theKernels[i], argi++, sizeof(cl_uint), (void*)&theHardColorTableSize);\n    theStatus = clSetKernelArg(theKernels[i], argi++, sizeof(cl_mem), (void*)&thePixelData[i]);\n    theStatus = clSetKernelArg(theKernels[i], argi++, sizeof(cl_mem), (void*)&theHardColorTable);\n    theStatus = clSetKernelArg(theKernels[i], argi++, sizeof(cl_uint), (void*)&theWidth);\n    // Launch kernel                                                                                                                 \n    theStatus = clEnqueueNDRangeKernel(theQueues[i], theKernels[i], 2, NULL, globalSize, NULL, 0, NULL, NULL);\n  }\n\n  rowOffset = 0;\n  for(unsigned i = 0; i < numDevices; rowOffset += rowsPerDevice[i++])\n  {\n    // Read the output                                                                                                               \n    theStatus = clEnqueueReadBuffer(theQueues[i], thePixelData[i], CL_TRUE, 0, thePixelDataWidth*rowsPerDevice[i]*sizeof(unsigned short int), &aFrameBuffer[rowOffset * theWidth], 0, NULL, NULL);\n   }\n\n\n\u7c21\u5358\u306b\u305f\u3081\u3059\u306b\u306f\nOpenCL Mandelbrot Demo on Altera\u306e\u624b\u9806\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308c\u3070\u3044\u3044...\u3051\u3069\u30ab\u30fc\u30cd\u30eb\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u306f\u9762\u5012\u3068\u3044\u3046\u5834\u5408\u306f\u30a4\u30e1\u30fc\u30b8\u30d5\u30a1\u30a4\u30eb(mandelbrot_demo.img)\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u8a66\u3059\u3053\u3068\u304c\u3067\u304d\u308b\uff0e\n\u81ea\u5206\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u305f\u3044\u5834\u5408\u306b\u306f\uff0c\u30a4\u30e1\u30fc\u30b8\u30d5\u30a1\u30a4\u30eb\u3092\u30eb\u30fc\u30d7\u30d0\u30c3\u30af\u3067\u30de\u30a6\u30f3\u30c8\u3057\u3066\u66f8\u3051\u3070\u3044\u3044\uff0emandelbrot_demo.img\u306b\u306f\u8907\u6570\u306e\u30d1\u30fc\u30c6\u30a3\u30b7\u30e7\u30f3\u304c\u3042\u308b\u306e\u3067\uff0c\u305f\u3068\u3048\u3070\uff0c\nfdisk -l -u mandelbrot_demo.img\n\n\u3067\uff0cLinux\u30b7\u30b9\u30c6\u30e0\u306e\u3042\u308b\u30d1\u30fc\u30c6\u30a3\u30b7\u30e7\u30f3\u306e\u958b\u59cb\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u78ba\u8a8d\u3057\u3066\nsudo mount -o loop,offset=$((49152*512)) mandelbrot_demo.img /mnt\n\n\u3068\u3057\u3066\u30de\u30a6\u30f3\u30c8\u3059\u308c\u3070\u3044\u3044\uff0e\nOpenCL\u30bd\u30fc\u30b9\u3092Linux\u306a\u74b0\u5883\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u306b\u306f\uff0c\u305f\u3068\u3048\u3070\nexport LM_LICENSE_FILE=\u30e9\u30a4\u30bb\u30f3\u30b9\u30d5\u30a1\u30a4\u30eb\nexport AOCL_BOARD_PACKAGE_ROOT=\u3069\u3053\u304b/mandelblot_de0nanosoc/opencl_soc_bsp-de0_nano_with_display/c5soc\nexport ALTERAOCLSDKROOT=/opt/Altera/15.1/hld\nsource /opt/Altera/15.1/hld/init_opencl.sh\naoc -v device/mandelbrot_kernel.cl --board de0_nano_sharedonly_with_spi_tft\n\n\u3068\u304b\n\n\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u304c\u306a\u3044\u5834\u5408\u306e\u5b9f\u884c\n\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u304c\u306a\u3044\u5834\u5408\u306b\u3075\u3064\u3046\u306b\u8d77\u52d5\u3059\u308b\u3068SDL\u306e\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u30c1\u30a7\u30c3\u30af\u3067\u7d42\u4e86\u3059\u308b\uff0e\u306a\u306e\u3067\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u5fc5\u8981\uff0e\n\u30b5\u30f3\u30d7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u8d77\u52d5\u3092\u53c2\u8003\u306b\nsource /de0_ocl_150_tft/init_opencl.sh\nsource /de0_ocl_150_tft/disable_auto_reprogram.sh\n./mandelbrot --display=0 --test=1 --test-frames=10 --test-dump=10\n\n\u3068\u304b\uff0e\u2193\u306e\u3088\u3046\u306b\u6307\u5b9a\u3057\u305f\u3089FPS\u8a08\u6e2c\u306e\u7d50\u679c\u304c\u51fa\u529b\u3055\u308c\u305f\uff0e\u3061\u3087\u3063\u3068\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u3064\u3051\u65b9\u304c\u308f\u304b\u3063\u3066\u306a\u3044\n./mandelbrot --display=0 --test=true\n\n\u5b9f\u884c\u3057\u3066\u3044\u308b\u69d8\u5b50\u306f\u3053\u3093\u306a\u611f\u3058\uff0e\n\n\u6a19\u6e96\u51fa\u529b\u306b\u793a\u3055\u308c\u3066\u3044\u308b\u751f\u6210\u901f\u5ea6\u3092\u307f\u308b\u3068\uff0c18FPS-30FPS\u304f\u3089\u3044\uff0c\u3063\u3066\u3068\u3053\u308d\u306e\u3088\u3046\uff0e\n\u6700\u521d\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u5834\u5408\u306b\u306f\u751f\u6210\u3057\u305f\u753b\u50cf\u304cframe0.ppm\u304b\u3089frame9.ppm\u306b\u4fdd\u5b58\u3055\u308c\u308b\uff0e\u78ba\u8a8d\u3057\u3066\u307f\u308b\u3068\u3053\u3093\u306a\u611f\u3058(convert\u3067ppm\u2192png\u5909\u63db\u3057\u305f\u7d50\u679c)\n\n\n\n\nOpenCL\u30ab\u30fc\u30cd\u30eb\u3092\u5909\u66f4\u3057\u3066\u307f\u308b...rbf\u30d5\u30a1\u30a4\u30eb\u5909\u66f4\u7de8\n\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u6642\u306b\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u304b\u3063\u305f(\u8981\u78ba\u8a8d)\u306e\u3067\uff0c\u30b3\u30f3\u30d5\u30a3\u30ae\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u30d5\u30a1\u30a4\u30eb\u3092\u5909\u66f4\u3059\u308b\u65b9\u6cd5\u3092\u8a66\u3059\uff0e\u3053\u306e\u74b0\u5883\u3067\u306fSD\u30ab\u30fc\u30c9\u306e\u5148\u982d\u30d1\u30fc\u30c6\u30a3\u30b7\u30e7\u30f3(FAT32\u9818\u57df)\u306esoc_system.rbf\u304cFPGA\u306e\u30b3\u30f3\u30d5\u30a3\u30ae\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u30d5\u30a1\u30a4\u30eb\u306b\u76f8\u5f53\uff0e\n\u3068\u3044\u3046\u308f\u3051\u3067\uff0caoc\u3092\u5b9f\u884c\u3057\u3066OpenCL\u30b3\u30fc\u30c9\u3092\u5408\u6210\u3059\u308b\u3068\u751f\u6210\u3055\u308c\u308btop.rbf\u3067\u4e0a\u66f8\u304d\u3057\u3066\u307f\u305f\uff0e\n\u7d50\u679c\u306f\u3053\u3093\u306a\u611f\u3058\uff0e\n\n\u3053\u308c\u306f\uff0c\u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u30fc\u63cf\u753b\u30eb\u30fc\u30c1\u30f3\u3067\uff0c\u9ed2\u306b\u3057\u3066\u3044\u305f\u90e8\u5206\u3092\u8272\u30c6\u30fc\u30d6\u30eb\u306e999\u306b\u8a2d\u5b9a\u3059\u308b\u3088\u3046\u5909\u66f4\u3057\u305f\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\uff0e\u305f\u3057\u304b\u306b\uff0c\u30aa\u30ea\u30b8\u30ca\u30eb\u3067\u306f\u9ed2\u304b\u3063\u305f\u3068\u3053\u308d\u304c\u8272\u30c6\u30fc\u30d6\u30eb999(\u9ec4\u8272: main.cpp\u3067\u8272\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u3063\u3066\u3044\u308b)\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u305f\uff0e\n        // Output black if we never finished, and a color from the look up table otherwise                                           \n        //framebuffer[windowWidth * windowPosY + windowPosX] = (iterations == maxIterations)? BLACK : colorLUT[iterations];          \n        framebuffer[windowWidth * windowPosY + windowPosX] = (iterations == maxIterations)? colorLUT[999] : colorLUT[iterations];\n\nRocketBoards.org\u306e[OpenCL Mandelbrot Demo on Altera](https://rocketboards.org/foswiki/view/Projects/OpenCLMandelbrotDemoOnAtlasSoC)\u3092\u8aad\u3093\u3067\u8a66\u3057\u3066\u307f\u305f\uff0c\u3068\u3044\u3046\u8a71\uff0e\n\n## \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\nhttps://github.com/altcrauer/mandelbrot_demo \u3067\u516c\u958b\u3055\u308c\u3066\u3044\u308b\uff0e\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306fARM\u4e0a\u3067\u5b9f\u884c\u3055\u308c\u308b\u3082\u306e\u3068FPGA\u3067\u5b9f\u884c\u3055\u308c\u308b\u3082\u306e\u304b\u3089\u69cb\u6210\u3055\u308c\u308b\uff0e\n\n### ARM\u4e0a\u3067\u5b9f\u884c\u3055\u308c\u308b\u3082\u306e\n- main.cpp\n - colorTableInit \u8272\u30c6\u30fc\u30d6\u30eb[0\uff5e999]\u306e\u521d\u671f\u5316\n - main \u521d\u671f\u5316\u3068\u5b9f\u884c\n- MandelbrotWindow.cpp \u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u30fc\u63cf\u753b\u306e\u51e6\u7406\u5168\u4f53\u306e\u7d71\u62ec\n - mandelbrotWindowInitialize hardwareInitialize\u3068softwareInitialize\u3092\u547c\u3073\u51fa\u3059\uff0e\u307e\u305f\uff0cSDL_CreateRGBSurfaceFrom\u3092\u547c\u3073\u51fa\u3057\u3066\u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u30fc\u753b\u50cf\u4fdd\u6301\u7528\u306e\u30d0\u30c3\u30d5\u30a1\u30922\u9762\u7528\u610f(\u30d0\u30c3\u30d5\u30a1\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u306ftheFrames[0], theFrames[1]\u3067\u4fdd\u6301\u3055\u308c\u308b)\n - mandelbrotWindowRelease\n - mandelbrotWindowResetView\n - mandelbrotWindowUpdate\n - mandelbrotWindowMainLoop \u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u30fc\u306e\u8a08\u7b97\u3068\u63cf\u753b\u51e6\u7406\u306e\u30eb\u30fc\u30d7\n  - mandelbrotCalculateFrame\u3092\u547c\u3073\u51fa\u3057\u3066theFrames[]\u306b\u753b\u50cf\u3092\u66f8\u304b\u305b\u308b\n  - \u7d50\u679c\u3092\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306b\u51fa\u529b\u3059\u308b\uff0c\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3059\u308b\uff0c\u306a\u3069\n - mandelbrotWindowRepaint\n - mandelbrotDumpFrame\n- Mandelbrot.cpp\n - mandelbrotSetColorTable\n - mandelbrotSwitchCalculationMethod \u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u30fc\u8a08\u7b97\u3092HW\u3067\u884c\u3046\u304bSW\u3067\u884c\u3046\u304b\u5207\u308a\u66ff\u3048\u308b\uff0e\u30c7\u30d5\u30a9\u30eb\u30c8\u306fHW\uff0e\u5b9f\u884c\u4e2d\u306bSDLK_h(SDL\u306eh\u30ad\u30fc\u62bc\u4e0b\u30a4\u30d9\u30f3\u30c8)\u3067\u5207\u308a\u66ff\u3048\uff0e\n - mandelbrotCalculateFrame \u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u30fc\u8a08\u7b97\u3092HW\u307e\u305f\u306fSW\u3067\u5b9f\u884c\n - mandelbrotRelease\n- HardwareMandelbrot.cpp\n - hardwareInitialize FPGA\u306b\u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u30fc\u8a08\u7b97\u30ab\u30fc\u30cd\u30eb\u3092\u30ed\u30fc\u30c9\n - hardwareSetColorTable\n - hardwareCalculateFrame FPGA\u4e0a\u306e\u30ab\u30fc\u30cd\u30eb\u3067\u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u30fc\u8a08\u7b97\n - hardwareRelease\n - cleanup opencl.cpp\u3067\u5229\u7528\u3055\u308c\u308b\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u95a2\u6570\uff0e\u5b9f\u969b\u306fhardwareRelease\u3092\u547c\u3093\u3067\u3044\u308b\n- SoftwareMandelbrot.cpp\n - softwareInitialize HardwareInitialize\u3068\u9055\u3063\u3066\u4f55\u3082\u3057\u3066\u306a\u3044\n - softwareSetColorTable\n - softwareCalculateFrame \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3067\u306e\u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u30fc\u8a08\u7b97\n - softwareRelease\n- opencl.cpp OpenCL\u30b3\u30a2\u3092\u5229\u7528\u3059\u308b\u305f\u3081\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\n - setCwdToExeDir\n - findPlatform\n - getPlatformName\n - getDeviceName\n - getDevices\n - createProgramFromBinary\n - createProgramFromSource\n - loadBinaryFile\n - fileExists\n - getBoardBinaryFile\n - getCurrentTimestamp\n - getStartEndTime\n - getStartEndTime\n - waitMilliseconds\n - oclContextCallback\n - isAlteraPlatform\n - findAnyPlatform\n- Keyboard.cpp\n - keyboardPressEvent\n- Mouse.cpp\n - mousePressEvent\n - mouseReleaseEvent\n- StopWatch.cpp\n - startTime\n - getElapsedTime\n- options.cpp\n\n### FPGA\u4e0a\u3067\u5b9f\u884c\u3055\u308c\u308b\u3082\u306e\n- device/mandelbrot_kernel.cl\n - hw_mandelbrot_frame \u30b0\u30ed\u30fc\u30d0\u30ebID\u306b\u3057\u305f\u304c\u3063\u3066\u4e26\u5217\u8a08\u7b97\n\n## \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u51e6\u7406\u3068OpenCL\u51e6\u7406\u306e\u5b9f\u88c5\n\u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u30fc\u753b\u50cf\u306e\u63cf\u753b\u30eb\u30fc\u30c1\u30f3\u306fCPU\u3067\u5b9f\u884c\u3059\u308b\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3068OpenCL\u306e\u4e21\u65b9\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\uff0e\u305d\u308c\u305e\u308c\u306e\u5b9f\u88c5\u3092\u307f\u3066\u307f\u308b\n\n### \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30d0\u30fc\u30b8\u30e7\u30f3\n\n\u3042\u308b\u30d4\u30af\u30bb\u30eb\u306e\u5024\u3092\u6c7a\u5b9a\u3059\u308bmandel_pixel\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u3066\n\n```\ninline unsigned int mandel_pixel(MANDELBROT_SW_PRECISION x0, MANDELBROT_SW_PRECISION y0, unsigned int maxIterations)\n{\n// \u7565\n  while (xSqr + ySqr < 4.0 && iterations < maxIterations)\n  {\n    // perform the current iteration                                                                                                 \n    xSqr = x*x;\n    ySqr = y*y;\n\n    y = 2*x*y + y0;\n    x = xSqr - ySqr + x0;\n\n    // increment iteration count                                                                                                     \n    iterations++;\n  }\n\n  // return the iteration count                                                                                                      \n  return iterations;\n}\n```\n\nsoftwareCalculateFrame\u306e\u4e2d\u3067\uff0c\u5168\u30d4\u30af\u30bb\u30eb\u3092\u6c42\u3081\u3066\u3044\u308b\n\n```\n  // for each pixel in the y dimension window                                                                                        \n  for (j = 0, cur_y = y; j < theHeight; j++, cur_y -= cur_step_size)\n  {\n    // for each pixel in the x dimension of the window                                                                               \n    for (cur_x = x, k = 0; k < theWidth; k++, cur_x += cur_step_size)\n    {\n      // set the value of the pixel in the window                                                                                    \n      pixel = mandel_pixel(cur_x, cur_y, theSoftColorTableSize);\n      if (pixel == theSoftColorTableSize)\n        *fb_ptr++ = 0x0;\n      else\n        *fb_ptr++ = theSoftColorTable[pixel];\n    }\n  }\n```\n\n### OpenCL\u30d0\u30fc\u30b8\u30e7\u30f3\n\nOpenCL\u30ab\u30fc\u30cd\u30eb\u3068\u3057\u3066\u306f\uff0c\u2193\u306e\u51e6\u7406\u304c\u30aa\u30d5\u30ed\u30fc\u30c9\u3055\u308c\u308b\n\n```\n        const size_t windowPosX = get_global_id(0);\n        const size_t windowPosY = get_global_id(1);\n        const MANDELBROT_HW_PRECISION stepPosX = x0 + (windowPosX * stepSize);\n        const MANDELBROT_HW_PRECISION stepPosY = y0 - (windowPosY * stepSize);\n// \u7565\n        while ( xSqr + ySqr < 4.0 &&\n                        iterations < maxIterations)\n        {\n                // Perform the current iteration                                                                                     \n                xSqr = x*x;\n                ySqr = y*y;\n\n                y = 2*x*y + stepPosY;\n                x = xSqr - ySqr + stepPosX;\n\n                // Increment iteration count                                                                                         \n                iterations++;\n        }\n\n        // Output black if we never finished, and a color from the look up table otherwise                                           \n        framebuffer[windowWidth * windowPosY + windowPosX] = (iterations == maxIterations)? BLACK : colorLUT[iterations];\n```\n\n\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u304b\u3089\u306f\u6b21\u306e\u3088\u3046\u306b\u547c\u3073\u51fa\u3055\u308c\u308b(\u30a8\u30e9\u30fc\u30c1\u30a7\u30c3\u30af\u90e8\u5206\u3092\u7701\u7565\u3057\u3066\u3044\u308b)\uff0e\n\n```\nint hardwareCalculateFrame(MANDELBROT_HW_PRECISION aStartX, MANDELBROT_HW_PRECISION aStartY, MANDELBROT_HW_PRECISION aScale, unsigned short int* aFrameBuffer)\n{\n  // Make sure width and height match up                                                                                             \n  hardwareSetFrameBufferSize();\n\n  unsigned rowOffset = 0;\n  for(unsigned i = 0; i < numDevices; rowOffset += rowsPerDevice[i++])\n  {\n    // Create ND range size                                                                                                          \n    size_t globalSize[2] = {thePixelDataWidth, rowsPerDevice[i]};\n\n    // Set the arguments                                                                                                             \n    unsigned argi = 0;\n    theStatus = clSetKernelArg(theKernels[i], argi++, sizeof(MANDELBROT_CL_PRECISION), (void*)&aStartX);\n    const MANDELBROT_HW_PRECISION offsetedStartY = aStartY - rowOffset * aScale;\n    theStatus = clSetKernelArg(theKernels[i], argi++, sizeof(MANDELBROT_CL_PRECISION), (void*)&offsetedStartY);\n    theStatus = clSetKernelArg(theKernels[i], argi++, sizeof(MANDELBROT_CL_PRECISION), (void*)&aScale);\n    theStatus = clSetKernelArg(theKernels[i], argi++, sizeof(cl_uint), (void*)&theHardColorTableSize);\n    theStatus = clSetKernelArg(theKernels[i], argi++, sizeof(cl_mem), (void*)&thePixelData[i]);\n    theStatus = clSetKernelArg(theKernels[i], argi++, sizeof(cl_mem), (void*)&theHardColorTable);\n    theStatus = clSetKernelArg(theKernels[i], argi++, sizeof(cl_uint), (void*)&theWidth);\n    // Launch kernel                                                                                                                 \n    theStatus = clEnqueueNDRangeKernel(theQueues[i], theKernels[i], 2, NULL, globalSize, NULL, 0, NULL, NULL);\n  }\n\n  rowOffset = 0;\n  for(unsigned i = 0; i < numDevices; rowOffset += rowsPerDevice[i++])\n  {\n    // Read the output                                                                                                               \n    theStatus = clEnqueueReadBuffer(theQueues[i], thePixelData[i], CL_TRUE, 0, thePixelDataWidth*rowsPerDevice[i]*sizeof(unsigned short int), &aFrameBuffer[rowOffset * theWidth], 0, NULL, NULL);\n   }\n```\n\n## \u7c21\u5358\u306b\u305f\u3081\u3059\u306b\u306f\n[OpenCL Mandelbrot Demo on Altera](https://rocketboards.org/foswiki/view/Projects/OpenCLMandelbrotDemoOnAtlasSoC)\u306e\u624b\u9806\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308c\u3070\u3044\u3044...\u3051\u3069\u30ab\u30fc\u30cd\u30eb\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u306f\u9762\u5012\u3068\u3044\u3046\u5834\u5408\u306f\u30a4\u30e1\u30fc\u30b8\u30d5\u30a1\u30a4\u30eb(mandelbrot_demo.img)\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u8a66\u3059\u3053\u3068\u304c\u3067\u304d\u308b\uff0e\n\u81ea\u5206\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u305f\u3044\u5834\u5408\u306b\u306f\uff0c\u30a4\u30e1\u30fc\u30b8\u30d5\u30a1\u30a4\u30eb\u3092\u30eb\u30fc\u30d7\u30d0\u30c3\u30af\u3067\u30de\u30a6\u30f3\u30c8\u3057\u3066\u66f8\u3051\u3070\u3044\u3044\uff0emandelbrot_demo.img\u306b\u306f\u8907\u6570\u306e\u30d1\u30fc\u30c6\u30a3\u30b7\u30e7\u30f3\u304c\u3042\u308b\u306e\u3067\uff0c\u305f\u3068\u3048\u3070\uff0c\n\n```\nfdisk -l -u mandelbrot_demo.img\n```\n\n\u3067\uff0cLinux\u30b7\u30b9\u30c6\u30e0\u306e\u3042\u308b\u30d1\u30fc\u30c6\u30a3\u30b7\u30e7\u30f3\u306e\u958b\u59cb\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u78ba\u8a8d\u3057\u3066\n\n```\nsudo mount -o loop,offset=$((49152*512)) mandelbrot_demo.img /mnt\n```\n\n\u3068\u3057\u3066\u30de\u30a6\u30f3\u30c8\u3059\u308c\u3070\u3044\u3044\uff0e\nOpenCL\u30bd\u30fc\u30b9\u3092Linux\u306a\u74b0\u5883\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u306b\u306f\uff0c\u305f\u3068\u3048\u3070\n\n```\nexport LM_LICENSE_FILE=\u30e9\u30a4\u30bb\u30f3\u30b9\u30d5\u30a1\u30a4\u30eb\nexport AOCL_BOARD_PACKAGE_ROOT=\u3069\u3053\u304b/mandelblot_de0nanosoc/opencl_soc_bsp-de0_nano_with_display/c5soc\nexport ALTERAOCLSDKROOT=/opt/Altera/15.1/hld\nsource /opt/Altera/15.1/hld/init_opencl.sh\naoc -v device/mandelbrot_kernel.cl --board de0_nano_sharedonly_with_spi_tft\n```\n\n\u3068\u304b\n\n## \u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u304c\u306a\u3044\u5834\u5408\u306e\u5b9f\u884c\n\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u304c\u306a\u3044\u5834\u5408\u306b\u3075\u3064\u3046\u306b\u8d77\u52d5\u3059\u308b\u3068SDL\u306e\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u30c1\u30a7\u30c3\u30af\u3067\u7d42\u4e86\u3059\u308b\uff0e\u306a\u306e\u3067\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u5fc5\u8981\uff0e\n\u30b5\u30f3\u30d7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u8d77\u52d5\u3092\u53c2\u8003\u306b\n\n```\nsource /de0_ocl_150_tft/init_opencl.sh\nsource /de0_ocl_150_tft/disable_auto_reprogram.sh\n./mandelbrot --display=0 --test=1 --test-frames=10 --test-dump=10\n```\n\n\u3068\u304b\uff0e\u2193\u306e\u3088\u3046\u306b\u6307\u5b9a\u3057\u305f\u3089FPS\u8a08\u6e2c\u306e\u7d50\u679c\u304c\u51fa\u529b\u3055\u308c\u305f\uff0e\u3061\u3087\u3063\u3068\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u3064\u3051\u65b9\u304c\u308f\u304b\u3063\u3066\u306a\u3044\n\n```\n./mandelbrot --display=0 --test=true\n```\n\n\u5b9f\u884c\u3057\u3066\u3044\u308b\u69d8\u5b50\u306f\u3053\u3093\u306a\u611f\u3058\uff0e\n![Clipboard03.png](https://qiita-image-store.s3.amazonaws.com/0/25342/42a0740c-d038-041d-fbda-37ccb8c1145d.png)\n\n\u6a19\u6e96\u51fa\u529b\u306b\u793a\u3055\u308c\u3066\u3044\u308b\u751f\u6210\u901f\u5ea6\u3092\u307f\u308b\u3068\uff0c18FPS-30FPS\u304f\u3089\u3044\uff0c\u3063\u3066\u3068\u3053\u308d\u306e\u3088\u3046\uff0e\n\n\n\u6700\u521d\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u5834\u5408\u306b\u306f\u751f\u6210\u3057\u305f\u753b\u50cf\u304cframe0.ppm\u304b\u3089frame9.ppm\u306b\u4fdd\u5b58\u3055\u308c\u308b\uff0e\u78ba\u8a8d\u3057\u3066\u307f\u308b\u3068\u3053\u3093\u306a\u611f\u3058(convert\u3067ppm\u2192png\u5909\u63db\u3057\u305f\u7d50\u679c)\n\n![frame0.png](https://qiita-image-store.s3.amazonaws.com/0/25342/f2e8e72a-e842-7f9b-45e4-2e8ef35d9935.png)\n\n![frame4.png](https://qiita-image-store.s3.amazonaws.com/0/25342/87167b8d-432a-3123-38d2-310d0473e315.png)\n\n![frame9.png](https://qiita-image-store.s3.amazonaws.com/0/25342/1d7be804-8b87-11eb-9859-beb6a400e9b2.png)\n\n## OpenCL\u30ab\u30fc\u30cd\u30eb\u3092\u5909\u66f4\u3057\u3066\u307f\u308b...rbf\u30d5\u30a1\u30a4\u30eb\u5909\u66f4\u7de8\n\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u6642\u306b\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u304b\u3063\u305f(**\u8981\u78ba\u8a8d**)\u306e\u3067\uff0c\u30b3\u30f3\u30d5\u30a3\u30ae\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u30d5\u30a1\u30a4\u30eb\u3092\u5909\u66f4\u3059\u308b\u65b9\u6cd5\u3092\u8a66\u3059\uff0e\u3053\u306e\u74b0\u5883\u3067\u306fSD\u30ab\u30fc\u30c9\u306e\u5148\u982d\u30d1\u30fc\u30c6\u30a3\u30b7\u30e7\u30f3(FAT32\u9818\u57df)\u306esoc_system.rbf\u304cFPGA\u306e\u30b3\u30f3\u30d5\u30a3\u30ae\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u30d5\u30a1\u30a4\u30eb\u306b\u76f8\u5f53\uff0e\n\u3068\u3044\u3046\u308f\u3051\u3067\uff0caoc\u3092\u5b9f\u884c\u3057\u3066OpenCL\u30b3\u30fc\u30c9\u3092\u5408\u6210\u3059\u308b\u3068\u751f\u6210\u3055\u308c\u308btop.rbf\u3067\u4e0a\u66f8\u304d\u3057\u3066\u307f\u305f\uff0e\n\u7d50\u679c\u306f\u3053\u3093\u306a\u611f\u3058\uff0e\n![frame0_mod.png](https://qiita-image-store.s3.amazonaws.com/0/25342/524645bb-93d1-6e0e-6dcf-dbe651dde437.png)\n\n\u3053\u308c\u306f\uff0c\u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u30fc\u63cf\u753b\u30eb\u30fc\u30c1\u30f3\u3067\uff0c\u9ed2\u306b\u3057\u3066\u3044\u305f\u90e8\u5206\u3092\u8272\u30c6\u30fc\u30d6\u30eb\u306e999\u306b\u8a2d\u5b9a\u3059\u308b\u3088\u3046\u5909\u66f4\u3057\u305f\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\uff0e\u305f\u3057\u304b\u306b\uff0c\u30aa\u30ea\u30b8\u30ca\u30eb\u3067\u306f\u9ed2\u304b\u3063\u305f\u3068\u3053\u308d\u304c\u8272\u30c6\u30fc\u30d6\u30eb999(\u9ec4\u8272: main.cpp\u3067\u8272\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u3063\u3066\u3044\u308b)\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u305f\uff0e\n\n```\n        // Output black if we never finished, and a color from the look up table otherwise                                           \n        //framebuffer[windowWidth * windowPosY + windowPosX] = (iterations == maxIterations)? BLACK : colorLUT[iterations];          \n        framebuffer[windowWidth * windowPosY + windowPosX] = (iterations == maxIterations)? colorLUT[999] : colorLUT[iterations];\n```\n", "tags": ["OpenCL", "FPGA", "Altera"]}