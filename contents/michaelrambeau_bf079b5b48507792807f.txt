{"context": " More than 1 year has passed since last update.\n\nPart 1: ES6 syntax\nES6 is the next version of JavaScript!\n\n2009: ES5\n2015: ES6\n2016: ES7\n\nWith Babel transformer, we can use ES6 now!\nBabel is included in react-rails gem.\n\nLinks\n\nES6 overview\nES5 VS. ES6 syntax comparison\nAirbnb JavaScript ES6 style guide\n\nBabel transformer \n\n\nThe arrow symbol =>\n\nUseful in .jsx loops with .map() function and event handlers.\nBenefits:\n\ncompact! no function , no {}, no return\n\nNo problem scope with this keyword\n\n\nJSX Example 1: create table rows\nBEFORE\n\n\n\n          <tbody>\n            { entries.map( function (entry, i) {\n              return(<RestoreLogList.Entry\n                entry={ entry }\n                key={ i }\n              />);\n            }\n            ) }\n          </tbody>\n\nAFTER\n\n\n          <tbody>\n            { entries.map( (entry, i) =>\n              <RestoreLogList.Entry\n                entry={ entry }\n                key={ i }\n              />\n            ) }\n          </tbody>\n\nJSX Example 2: create a button toolbar\nBEFORE\n\nvar self = this;\n\n\n\n<div className=\"btn-group\">\n  { this.props.options.map(\n    function (item, i) {\n      return (<button\n        key={ i }\n        type=\"button\"\n        className={ 'btn' + (self.props.value == item ? ' active' : '')  }\n        onClick={ function () { self.props.onChange(item); } }\n      >\n        { item }\n      </button>);\n    }\n  )}\n</div>\n\n\nAFTER\n\n\n<div className=\"btn-group\">\n  { this.props.options.map( (item, i) =>\n      <button\n        key={ i }\n        type=\"button\"\n        className={ 'btn' + (this.props.value == item ? ' active' : '')  }\n        onClick={ () => this.props.onChange(item) }\n      >\n        { item }\n      </button>\n  ) }\n</div>\n\n\nDestructuring\nBEFORE\n\nvar x = data.x;\nvar y = data.y;\nvar z = data.z;\n\n\nAFTER\n\nlet {x, y, z} = data;\n\n\nOther nice features\n\nclass\n\nlet and const\n\ndefault parameter value\n...\n\n\nComing soon: ES7 (ES2016) !\nAn example of feature: decorators\n\nPart 2: use JavaScript modules ?\n\n1. Old JavaScript (everything is global)\n\nmy-component.jsx\n\n//React is in the global namespace.\n\nvar MyComponent = React.createClass({\n\n  handleSubmit: function(e) {\n  },\n\n  render: function() {\n  }\n});\n\n\n\nmy-page.jsx\n\n//MyComponent is an object declared in the global namespace\n\n<MyComponent />\n\n\n\n2. CommonJS module system (used by node.js)\n\nrequire\nmodule.exports\n\n\nmy-component.jsx\n\nvar React = require('react');\n\nvar MyComponent = React.createClass({\n\n  handleSubmit: function(e) {\n  },\n\n  render: function() {\n  }\n});\n\nmodule.exports = MyComponent\n\n\n\nmy-page.jsx\n\nvar MyComponent = require('./path/to/my-component.jsx');\n\n<MyComponent />\n\n\n\n3. ES6 modules\n\nimport\nexport\n\n\nmy-component.jsx\n\nimport React from \"react\";\n\nexport default class MyComponent extends React.Component {\n\n  handleSubmit(e) {\n  }\n\n  render() {\n  }\n}\n\n\n\nmy-page.jsx\n\nimport MyComponent from './path/to/my-component.jsx';\n\n<MyComponent />\n\n\nMore details about ES6 class syntax: React on ES6+\n\nWhy use modules (instead of Rails sprockets) ?\n\nCode easier to read and maintain\nCode easier to test\nnpm ecosystem power: more choice, librairies up-to-date...\nDecoupled architecture (Front-end application + Rails backend application, used to make API calls)\n\nBlog entry and discussion: Rails with Webpack - Why and How\nFrom rails-webpack-react-flux\n\nLove the asset pipeline to death, but the lack of true modules definitely gets noticable with larger amounts of client side code. \n\n\nHow to use modules in our Rails application ?\nWe need to convert modules to plain JavaScript code.\n\nBrowserify\n\nWebpack \n\nWebpack can be used to require any file (JavaScript, CoffeeScript, JSX, css, sass) and generates a single bundle file.\nA nice add-on : react-hot-reload\nReact hot loader automaically updates the browser when a .JSX file is updated, keeping the context (state and props). \n\nExamples of Rails + Webpack integration\n\n\nrails-webpack-react-flux: Rails + CoffeeScript + Flux (Flummox) + csjx + Webpack\n\nreact-webpack-rails-tutorial: Rails + ES6 + Flux (Alt) + Webpack\n\nFFRRIWB on Rails: Flux (Flummox), React, React Router, Immutable\n\n\nDiscussion\nSingle-Page-Application (\"SPA\") pros and cons\nPros:\n\nFast (static assets pushed to a CDN, Rails only serves JSON data)\nRich user experience\nDecoupled architecture: more flexible UI, easier to change\nMobile application (native or hybrid) are possible\n\nCons:\n\nrequires modern JavaScript skills!\nBuilding process\nin local environment, 2 servers are needed: a back-end server (Rails) + a front-end server that builds asset and serves static content (node.js) \nToo complicated ? (\u7686\u3093\u306a\u3055\u3093\u3001\u3069\u3046\u601d\u3044\u307e\u3059\u304b\uff1f)\n\n\nComing soon, next \u52c9\u5f37\u4f1a\n\nHow to test (modern) JavaScript\nFlux architecture\n...\n\n# Part 1: ES6 syntax\n\nES6 is the next version of JavaScript!\n\n* 2009: ES5\n* 2015: ES6\n* 2016: ES7\n\nWith Babel transformer, we can use ES6 **now**!\nBabel is included in react-rails gem.\n\n### Links\n\n* [ES6 overview](https://github.com/lukehoban/es6features)\n* [ES5 VS. ES6 syntax comparison](http://es6-features.org)\n* [Airbnb JavaScript ES6 style guide](https://github.com/airbnb/javascript)\n* [Babel transformer](https://babeljs.io/) \n\n### The arrow symbol `=>`\n\nUseful in .jsx loops with `.map()` function and event handlers.\nBenefits:\n\n* compact! no `function` , no `{}`, no `return`\n* No problem scope with `this` keyword\n\n#### JSX Example 1: create table rows\n\nBEFORE\n\n```html\n\n\n\n          <tbody>\n            { entries.map( function (entry, i) {\n              return(<RestoreLogList.Entry\n                entry={ entry }\n                key={ i }\n              />);\n            }\n            ) }\n          </tbody>\n```\n\nAFTER\n\n```html\n\n\n          <tbody>\n            { entries.map( (entry, i) =>\n              <RestoreLogList.Entry\n                entry={ entry }\n                key={ i }\n              />\n            ) }\n          </tbody>\n```\n\nJSX Example 2: create a button toolbar\n\nBEFORE\n\n```js\n\nvar self = this;\n```\n\n```html\n\n\n<div className=\"btn-group\">\n  { this.props.options.map(\n    function (item, i) {\n      return (<button\n        key={ i }\n        type=\"button\"\n        className={ 'btn' + (self.props.value == item ? ' active' : '')  }\n        onClick={ function () { self.props.onChange(item); } }\n      >\n        { item }\n      </button>);\n    }\n  )}\n</div>\n\n```\n\nAFTER\n\n```html\n\n\n<div className=\"btn-group\">\n  { this.props.options.map( (item, i) =>\n      <button\n        key={ i }\n        type=\"button\"\n        className={ 'btn' + (this.props.value == item ? ' active' : '')  }\n        onClick={ () => this.props.onChange(item) }\n      >\n        { item }\n      </button>\n  ) }\n</div>\n```\n\n### Destructuring\n\nBEFORE\n\n```js\n\nvar x = data.x;\nvar y = data.y;\nvar z = data.z;\n\n```\n\nAFTER\n\n```js\n\nlet {x, y, z} = data;\n```\n\n### Other nice features\n\n* `class`\n* `let` and `const`\n* default parameter value\n* ...\n\n### Coming soon: ES7 (ES2016) !\n\nAn example of feature: [decorators] (https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841)\n\n\n# Part 2: use JavaScript modules ?\n\n## 1. Old JavaScript (everything is global)\n\n```js:my-component.jsx\n\n//React is in the global namespace.\n\nvar MyComponent = React.createClass({\n\n  handleSubmit: function(e) {\n  },\n\n  render: function() {\n  }\n});\n```\n\n```js:my-page.jsx\n\n//MyComponent is an object declared in the global namespace\n\n<MyComponent />\n```\n\n## 2. CommonJS module system (used by node.js)\n\n* `require`\n* `module.exports`\n\n```js:my-component.jsx\n\nvar React = require('react');\n\nvar MyComponent = React.createClass({\n\n  handleSubmit: function(e) {\n  },\n\n  render: function() {\n  }\n});\n\nmodule.exports = MyComponent\n```\n\n\n```js:my-page.jsx\n\nvar MyComponent = require('./path/to/my-component.jsx');\n\n<MyComponent />\n```\n\n## 3. ES6 modules\n\n* `import`\n* `export`\n\n```js:my-component.jsx\n\nimport React from \"react\";\n\nexport default class MyComponent extends React.Component {\n\n  handleSubmit(e) {\n  }\n\n  render() {\n  }\n}\n```\n\n```js:my-page.jsx\n\nimport MyComponent from './path/to/my-component.jsx';\n\n<MyComponent />\n```\n\nMore details about ES6 class syntax: [React on ES6+](http://babeljs.io/blog/2015/06/07/react-on-es6-plus/)\n\n\n\n### Why use modules (instead of Rails sprockets) ?\n\n* Code easier to read and maintain\n* Code easier to test\n* npm ecosystem power: more choice, librairies up-to-date...\n* Decoupled architecture (Front-end application + Rails backend application, used to make API calls)\n\nBlog entry and discussion: [Rails with Webpack - Why and How](https://reinteractive.net/posts/213-rails-with-webpack-why-and-how)\n\nFrom [rails-webpack-react-flux](https://github.com/nambrot/rails-webpack-react-flux)\n\n> Love the asset pipeline to death, but the lack of true modules definitely gets noticable with larger amounts of client side code. \n\n## How to use modules in our Rails application ?\n\nWe need to convert modules to plain JavaScript code.\n\n* [Browserify](http://browserify.org/)\n* [Webpack](http://webpack.github.io/) \n\nWebpack can be used to require any file (JavaScript, CoffeeScript, JSX, css, sass) and generates a single bundle file.\n\nA nice add-on : [react-hot-reload](http://gaearon.github.io/react-hot-loader/)\nReact hot loader automaically updates the browser when a .JSX file is updated, keeping the context (state and props). \n\n\n### Examples of Rails + Webpack integration\n\n* [rails-webpack-react-flux](https://github.com/nambrot/rails-webpack-react-flux): Rails + CoffeeScript + Flux (Flummox) + csjx + Webpack\n* [react-webpack-rails-tutorial](https://github.com/justin808/react-webpack-rails-tutorial): Rails + ES6 + Flux (Alt) + Webpack\n* [FFRRIWB on Rails](https://github.com/zepplock/FFRRIWB): Flux (Flummox), React, React Router, Immutable\n\n\n## Discussion \n\nSingle-Page-Application (\"SPA\") pros and cons\n\nPros:\n\n* Fast (static assets pushed to a CDN, Rails only serves JSON data)\n* Rich user experience\n* Decoupled architecture: more flexible UI, easier to change\n* Mobile application (native or hybrid) are possible\n\nCons:\n\n* requires modern JavaScript skills!\n* Building process\n* in local environment, 2 servers are needed: a back-end server (Rails) + a front-end server that builds asset and serves static content (node.js) \n* Too complicated ? (\u7686\u3093\u306a\u3055\u3093\u3001\u3069\u3046\u601d\u3044\u307e\u3059\u304b\uff1f)\n\n## Coming soon, next \u52c9\u5f37\u4f1a\n\n* How to test (modern) JavaScript\n* Flux architecture\n* ...\n\n\n\n", "tags": ["es6", "JavaScript"]}