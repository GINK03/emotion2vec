{"context": "PySide\u3067\u30c4\u30ea\u30fc\u578b\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u305f\u969b\u306b\u3001\u3059\u3079\u3066\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u9806\u6b21\u30a2\u30af\u30bb\u30b9\u3057\u305f\u3044\u5834\u5408\u304c\u3042\u308b\u3002\nQTreeWidget\u3092\u4f7f\u7528\u3066\u3044\u308b\u5834\u5408\u306f\u3001QTreeWidgetItemIterator\u3067\u9806\u6b21\u30a2\u30af\u30bb\u30b9\u3059\u308b\u4e8b\u304c\u3067\u304d\u308b\u3002\uff08C++\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u306e\u3067python\u3060\u3068\u82e5\u5e72\u4f7f\u3044\u52dd\u624b\u304c\u60aa\u3044\u304c\uff09\nQStandardItemModel\u3084\u72ec\u81ea\u306e\u30e2\u30c7\u30eb\u3067\u3082\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u3044\u305f\u3044\u306e\u3067\u4f5c\u6210\u3057\u305f\u3002\n\u30b3\u30fc\u30c9\u306fpython2\u3060\u304c\u3001xrange\u3092\u4f7f\u3063\u3066\u3044\u306a\u3044\u306e\u3067python3\u3067\u3082\u305d\u306e\u307e\u307e\u52d5\u304f\u3002\n\n\u30b3\u30fc\u30c9\n#! usr/bin/python\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals, print_function, absolute_import\nfrom PySide.QtCore import *\nfrom PySide.QtGui import *\n\n\ndef model_iter(model, parent_index=QModelIndex(), col_iter=True):\n    \"\"\" \u30e2\u30c7\u30eb\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\n    :rtype: generator(QModelIndex)\n    :type col_iter: bool\n    :type parent_index: QModelIndex\n    :type model: QAbstractItemModel\n    \"\"\"\n    index = model.index(0, 0, parent_index)\n\n    while True:\n        if col_iter:\n            for col in range(0, model.columnCount(parent_index)):\n                yield index.sibling(index.row(), col)\n        else:\n            yield index\n\n        if model.rowCount(index) > 0:\n            for _ in model_iter(model, index, col_iter):\n                yield _\n\n        index = index.sibling(index.row() + 1, index.column())\n        if not index.isValid():\n            break\n\n\u4f7f\u3044\u65b9\u306f\u7c21\u5358\u3067\u3001\u30e2\u30c7\u30eb\u3092\u6e21\u3059\u3060\u3051\u3067\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8fd4\u3057\u3066\u304f\u308c\u308b\u3002\ntree_model = QStandardItemModel()\n\nitem = QStandardItem(\"A\")\nitem.appendRow(QStandardItem(\"A-1\"))\nitem.appendRow(QStandardItem(\"A-2\"))\ntree_model.appendRow(item)\n\nitem = QStandardItem(\"B\")\nitem.appendRow(QStandardItem(\"B-1\"))\nitem.appendRow(QStandardItem(\"B-2\"))\ntree_model.appendRow(item)\n\nitem = QStandardItem(\"C\")\ntree_model.appendRow(item)\n\nprint([_.data() for _ in model_iter(tree_model)])\n>>> [u'A', u'A-1', u'A-2', u'B', u'B-1', u'B-2', u'C']\n\n\u30c4\u30ea\u30fc\u578b\u3060\u3051\u3067\u306a\u304f\u3001\u30c6\u30fc\u30d6\u30eb\u578b\u306e\u30e2\u30c7\u30eb\u306b\u3082\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u3002\ntable_model = QStandardItemModel(3, 3)\nfor r in range(3):\n    for c in range(3):\n        table_model.setItem(r, c, QStandardItem(\"%d-%d\" % (r, c)))\n\nprint([_.data() for _ in model_iter(table_model)])\n>>> [u'0-0', u'0-1', u'0-2', u'1-0', u'1-1', u'1-2', u'2-0', u'2-1', u'2-2']\n\n\n\u9006\u9806\u30a4\u30c6\u30ec\u30fc\u30bf\n\u3064\u3044\u3067\u306b\u9006\u9806\u30a4\u30c6\u30ec\u30fc\u30bf\u3082\u4f5c\u6210\u3057\u305f\u3002\ndef model_iter_r(model, parent_index=QModelIndex(), col_iter=True):\n    \"\"\" \u30e2\u30c7\u30eb\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\uff08\u9006\u9806\uff09\n    :rtype: generator(QModelIndex)\n    :type col_iter: bool\n    :type parent_index: QModelIndex\n    :type model: QAbstractItemModel\n    \"\"\"\n    index = model.index(model.rowCount(parent_index) - 1, 0, parent_index)\n\n    while True:\n        if model.rowCount(index) > 0:\n            for _ in model_iter_r(model, index, col_iter):\n                yield _\n\n        if col_iter:\n            for col in range(model.columnCount(parent_index) - 1, -1, -1):\n                yield index.sibling(index.row(), col)\n        else:\n            yield index\n\n        index = index.sibling(index.row() - 1, index.column())\n        if not index.isValid():\n            break\n\n\u4f7f\u3044\u65b9\u306f\u3001\u6b63\u9806\u306e\u3082\u306e\u3068\u307e\u3063\u305f\u304f\u540c\u3058\u3002\nprint([_.data() for _ in model_iter_r(tree_model)])\n>>> [u'C', u'B-2', u'B-1', u'B', u'A-2', u'A-1', u'A']\n\nprint([_.data() for _ in model_iter_r(table_model)])\n>>> [u'2-2', u'2-1', u'2-0', u'1-2', u'1-1', u'1-0', u'0-2', u'0-1', u'0-0']\n\n\u3061\u3083\u3093\u3068\u30c4\u30ea\u30fc\u69cb\u9020\u3082\u9006\u9806\u306b\u8fbf\u3063\u3066\u3044\u308b\u3002\n\u30e2\u30c7\u30eb\u306e\u9806\u6b21\u30a2\u30af\u30bb\u30b9\u306f\u3088\u304f\u4f7f\u3046\u6a5f\u80fd\u3060\u304c\u3001\u518d\u5e30\u3092\u4f7f\u3046\u305f\u3081\u3044\u3061\u3044\u3061\u5b9f\u88c5\u3059\u308b\u306e\u306f\u9762\u5012\u3067\u3042\u308b\u3002\n\u3053\u306e\u95a2\u6570\u3092\u30b3\u30d4\u30da\u3057\u3066\u304a\u3051\u3070\u4f55\u304b\u3068\u4fbf\u5229\u3060\u3002\n\u6b21\u56de\u306f\u3001\u3053\u306e\u95a2\u6570\u3092\u4f7f\u3063\u3066\u691c\u7d22\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3002\nPySide\u3067\u30c4\u30ea\u30fc\u578b\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u305f\u969b\u306b\u3001\u3059\u3079\u3066\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u9806\u6b21\u30a2\u30af\u30bb\u30b9\u3057\u305f\u3044\u5834\u5408\u304c\u3042\u308b\u3002\n\nQTreeWidget\u3092\u4f7f\u7528\u3066\u3044\u308b\u5834\u5408\u306f\u3001QTreeWidgetItemIterator\u3067\u9806\u6b21\u30a2\u30af\u30bb\u30b9\u3059\u308b\u4e8b\u304c\u3067\u304d\u308b\u3002\uff08C++\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u306e\u3067python\u3060\u3068\u82e5\u5e72\u4f7f\u3044\u52dd\u624b\u304c\u60aa\u3044\u304c\uff09\nQStandardItemModel\u3084\u72ec\u81ea\u306e\u30e2\u30c7\u30eb\u3067\u3082\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u3044\u305f\u3044\u306e\u3067\u4f5c\u6210\u3057\u305f\u3002\n\n\u30b3\u30fc\u30c9\u306fpython2\u3060\u304c\u3001xrange\u3092\u4f7f\u3063\u3066\u3044\u306a\u3044\u306e\u3067python3\u3067\u3082\u305d\u306e\u307e\u307e\u52d5\u304f\u3002\n\n## \u30b3\u30fc\u30c9\n```python\n#! usr/bin/python\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals, print_function, absolute_import\nfrom PySide.QtCore import *\nfrom PySide.QtGui import *\n\n\ndef model_iter(model, parent_index=QModelIndex(), col_iter=True):\n    \"\"\" \u30e2\u30c7\u30eb\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\n    :rtype: generator(QModelIndex)\n    :type col_iter: bool\n    :type parent_index: QModelIndex\n    :type model: QAbstractItemModel\n    \"\"\"\n    index = model.index(0, 0, parent_index)\n\n    while True:\n        if col_iter:\n            for col in range(0, model.columnCount(parent_index)):\n                yield index.sibling(index.row(), col)\n        else:\n            yield index\n\n        if model.rowCount(index) > 0:\n            for _ in model_iter(model, index, col_iter):\n                yield _\n\n        index = index.sibling(index.row() + 1, index.column())\n        if not index.isValid():\n            break\n```\n\n\u4f7f\u3044\u65b9\u306f\u7c21\u5358\u3067\u3001\u30e2\u30c7\u30eb\u3092\u6e21\u3059\u3060\u3051\u3067\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8fd4\u3057\u3066\u304f\u308c\u308b\u3002\n\n```python\ntree_model = QStandardItemModel()\n\nitem = QStandardItem(\"A\")\nitem.appendRow(QStandardItem(\"A-1\"))\nitem.appendRow(QStandardItem(\"A-2\"))\ntree_model.appendRow(item)\n\nitem = QStandardItem(\"B\")\nitem.appendRow(QStandardItem(\"B-1\"))\nitem.appendRow(QStandardItem(\"B-2\"))\ntree_model.appendRow(item)\n\nitem = QStandardItem(\"C\")\ntree_model.appendRow(item)\n\nprint([_.data() for _ in model_iter(tree_model)])\n>>> [u'A', u'A-1', u'A-2', u'B', u'B-1', u'B-2', u'C']\n```\n\n\u30c4\u30ea\u30fc\u578b\u3060\u3051\u3067\u306a\u304f\u3001\u30c6\u30fc\u30d6\u30eb\u578b\u306e\u30e2\u30c7\u30eb\u306b\u3082\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u3002\n\n```python\ntable_model = QStandardItemModel(3, 3)\nfor r in range(3):\n    for c in range(3):\n        table_model.setItem(r, c, QStandardItem(\"%d-%d\" % (r, c)))\n\nprint([_.data() for _ in model_iter(table_model)])\n>>> [u'0-0', u'0-1', u'0-2', u'1-0', u'1-1', u'1-2', u'2-0', u'2-1', u'2-2']\n```\n\n## \u9006\u9806\u30a4\u30c6\u30ec\u30fc\u30bf\n\u3064\u3044\u3067\u306b\u9006\u9806\u30a4\u30c6\u30ec\u30fc\u30bf\u3082\u4f5c\u6210\u3057\u305f\u3002\n\n```python\ndef model_iter_r(model, parent_index=QModelIndex(), col_iter=True):\n    \"\"\" \u30e2\u30c7\u30eb\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\uff08\u9006\u9806\uff09\n    :rtype: generator(QModelIndex)\n    :type col_iter: bool\n    :type parent_index: QModelIndex\n    :type model: QAbstractItemModel\n    \"\"\"\n    index = model.index(model.rowCount(parent_index) - 1, 0, parent_index)\n\n    while True:\n        if model.rowCount(index) > 0:\n            for _ in model_iter_r(model, index, col_iter):\n                yield _\n\n        if col_iter:\n            for col in range(model.columnCount(parent_index) - 1, -1, -1):\n                yield index.sibling(index.row(), col)\n        else:\n            yield index\n\n        index = index.sibling(index.row() - 1, index.column())\n        if not index.isValid():\n            break\n```\n\n\u4f7f\u3044\u65b9\u306f\u3001\u6b63\u9806\u306e\u3082\u306e\u3068\u307e\u3063\u305f\u304f\u540c\u3058\u3002\n\n```python\nprint([_.data() for _ in model_iter_r(tree_model)])\n>>> [u'C', u'B-2', u'B-1', u'B', u'A-2', u'A-1', u'A']\n\nprint([_.data() for _ in model_iter_r(table_model)])\n>>> [u'2-2', u'2-1', u'2-0', u'1-2', u'1-1', u'1-0', u'0-2', u'0-1', u'0-0']\n```\n\n\u3061\u3083\u3093\u3068\u30c4\u30ea\u30fc\u69cb\u9020\u3082\u9006\u9806\u306b\u8fbf\u3063\u3066\u3044\u308b\u3002\n\n\u30e2\u30c7\u30eb\u306e\u9806\u6b21\u30a2\u30af\u30bb\u30b9\u306f\u3088\u304f\u4f7f\u3046\u6a5f\u80fd\u3060\u304c\u3001\u518d\u5e30\u3092\u4f7f\u3046\u305f\u3081\u3044\u3061\u3044\u3061\u5b9f\u88c5\u3059\u308b\u306e\u306f\u9762\u5012\u3067\u3042\u308b\u3002\n\u3053\u306e\u95a2\u6570\u3092\u30b3\u30d4\u30da\u3057\u3066\u304a\u3051\u3070\u4f55\u304b\u3068\u4fbf\u5229\u3060\u3002\n\n\u6b21\u56de\u306f\u3001\u3053\u306e\u95a2\u6570\u3092\u4f7f\u3063\u3066\u691c\u7d22\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3002\n", "tags": ["Python", "PySide"]}