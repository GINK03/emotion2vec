{"context": "\n\n\u6982\u8981\nOpenGL/GLUT\u3092\u4f7f\u3063\u305f\u30a4\u30f3\u30d9\u30fc\u30c0\u30fc\u30b2\u30fc\u30e0\u3082\u3069\u304d\u3067\u3059\u3002\nmac\u74b0\u5883\u3067\u306e\u5236\u4f5c\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u307e\u3060\u307e\u3060\u672a\u5b8c\u6210\u3067\u5f53\u305f\u308a\u5224\u5b9a\u3082\u51fa\u6765\u3066\u306a\u3044\u30ec\u30d9\u30eb\u306e\u3082\u306e\u3067\u3059\u3002\n\u30b3\u30fc\u30c9\u3082\u975e\u5e38\u306b\u898b\u306b\u304f\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u304c\u7d20\u4eba\u306a\u308a\u306b\u9811\u5f35\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\nInvader\u30b3\u30fc\u30c9\n    //Invader.cpp\n    #include <GLUT/glut.h>\n    #include <ctime>\n    #include <cmath>\n    #include <cstdlib>\n    #include <iostream>\n    using namespace std;\n\n    #define WIDTH 640\n    #define HEIGHT 480\n    #define PI 3.1411592    //\u03c0\n\n    int VV;     //\u30e6\u30cb\u30c3\u30c8\u306e\u540d\u524d\n    int shut;   //\u30e6\u30cb\u30c3\u30c8\u304c\u5f3e\u3092\u6483\u3064\n    int ort;    //\u30a4\u30f3\u30d9\u30fc\u30c0\u30fc\u306e\u6483\u3064\n    //int dan;  \n    static GLfloat l = 0.0;     //\u30a4\u30f3\u30d9\u30fc\u30c0\u30fc\u79fb\u52d5\u3059\u308b\u8ddd\u96e2\n    static int dim = 0;     //\u30e6\u30cb\u30c3\u30c8\u306e\u52d5\u304f\u3068\u304d\u306e\u5b9a\u6570\n\n    //\u5f3e\u4e38\u306e\u5143\n    void Point(int x,int y,float size){\n        glPointSize(size);  //\u5f3e\u306e\u30b5\u30a4\u30ba\n        glBegin(GL_POINTS);\n        glVertex2i(x,y);\n        //\u3053\u3053\u306b\u5f3e\u81ea\u4f53\u306b\u5f53\u305f\u308a\u5224\u5b9a\u3092\u3064\u3051\u308b\n        glEnd();\n    }\n\n    //\u30a4\u30f3\u30d9\u30fc\u30c0\u30fc\u306e\u5b9f\u614b\u5143\n    void InvaderPoint(int x,int y){\n        glColor3d(1.0,0.0,0.0);\n        glBegin(GL_QUADS);\n        glVertex2f(x * 4 - 40, y * 4 + 40);\n        glVertex2f(x * 4 - 40, y * 4 + 4 + 40);\n        glVertex2f(x * 4 + 4 - 40, y * 4 + 4 + 40);\n        glVertex2f(x * 4 + 4 - 40, y * 4 + 40);\n    }\n\n    //\u30a4\u30f3\u30d9\u30fc\u30c0\u30fc\u306e\u30af\u30e9\u30b9\n    class Invader{\n    public:\n        Invader();      //\u30a4\u30f3\u30d9\u30fc\u30c0\u30fc\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n        /*Shot\u3092\u4e00\u3064\u4f5c\u3063\u305f\u5f8c\u306b\u305d\u308c\u3092\u72ec\u7acb\u3055\u305b\u305f\u3082\u306e\u306b\u9069\u7528\u3055\u305b\u3066\u3044\u304f\u3002\n        \u5f3e\u81ea\u4f53\u306b\u5f53\u305f\u308a\u5224\u5b9a\u3092\u5165\u308c\u3066\u304a\u304f*/\n        void InvaderShot0();    //\u30a4\u30f3\u30d9\u30fc\u30c0\u30fc\u306e\u5f3e\u3092\u6483\u3064\n        void InvaderShot1();\n        void InvaderShot2();\n        void InvaderShot3();\n        void InvaderShot4();\n        void InvaderShot5();\n        void InvaderShot6();\n        void InvaderShot7();\n    };\n\n    //\u30a4\u30f3\u30d9\u30fc\u30c0\u30fc\u306e\u8a2d\u8a08\u56f3\n    Invader::Invader(){\n        static GLboolean isUp = GL_TRUE;\n\n    //\u914d\u5217\u306b\u76f4\u3057\u3066\u4e00\u3064\u4e00\u3064\u306b\u72ec\u7acb\u3055\u305b\u305f\u3082\u306e\u306b\u3059\u308b\u3002\n        for(int i = 0; i < WIDTH; i += 20){\n            InvaderPoint(0+l+10+i,5);\n            InvaderPoint(0+l+10+i,6);\n            InvaderPoint(0+l+10+i,7);\n            InvaderPoint(1+l+10+i,4);\n            InvaderPoint(1+l+10+i,5);\n            InvaderPoint(2+l+10+i,1);\n            InvaderPoint(2+l+10+i,3);\n            InvaderPoint(2+l+10+i,4);\n            InvaderPoint(2+l+10+i,5);\n            InvaderPoint(2+l+10+i,6);\n            InvaderPoint(2+l+10+i,7);\n            InvaderPoint(3+l+10+i,2);\n            InvaderPoint(3+l+10+i,3);\n            InvaderPoint(3+l+10+i,5);\n            InvaderPoint(3+l+10+i,6);\n            InvaderPoint(3+l+10+i,8);\n            InvaderPoint(4+l+10+i,3);\n            InvaderPoint(4+l+10+i,4);\n            InvaderPoint(4+l+10+i,5);\n            InvaderPoint(4+l+10+i,6);\n            InvaderPoint(5+l+10+i,3);\n            InvaderPoint(5+l+10+i,4);\n            InvaderPoint(5+l+10+i,5);\n            InvaderPoint(5+l+10+i,6);\n            InvaderPoint(6+l+10+i,2);\n            InvaderPoint(6+l+10+i,3);\n            InvaderPoint(6+l+10+i,5);\n            InvaderPoint(6+l+10+i,6);\n            InvaderPoint(6+l+10+i,8);\n            InvaderPoint(7+l+10+i,1);\n            InvaderPoint(7+l+10+i,3);\n            InvaderPoint(7+l+10+i,4);\n            InvaderPoint(7+l+10+i,5);\n            InvaderPoint(7+l+10+i,6);\n            InvaderPoint(7+l+10+i,7);\n            InvaderPoint(8+l+10+i,4);\n            InvaderPoint(8+l+10+i,5);\n            InvaderPoint(9+l+10+i,5);\n            InvaderPoint(9+l+10+i,6);\n            InvaderPoint(9+l+10+i,7);\n        }\n    //\u30a4\u30f3\u30d9\u30fc\u30c0\u30fc\u306e\u79fb\u52d5\u51e6\u7406\n        if(l > 10)isUp = GL_FALSE;\n        else if(l <= 0)isUp = GL_TRUE;\n        l += (isUp == GL_TRUE ? 0.07:-0.07);\n        glutPostRedisplay();    //Idle\u306e\u4ee3\u308f\u308a\n        glFlush();\n    }\n\n    void Invader::InvaderShot0(){\n        static int y0 = 80;     //y\u8ef8\u306e\u5024\n        static int x0;          //x\u8ef8\u306e\u5024\n\n        glColor3d(0.5,0.7,0.3); //\u5f3e\u306e\u8272\n        ort = 1;                //\u30a4\u30f3\u30d9\u30fc\u30c0\u30fc\u306e\u5f3e\u3092\u6483\u3064\u3068\u304d\u306e\u5024\n        if(ort == 1){           //ort\u304c1\u306b\u306a\u3063\u305f\u3068\u304d\u306b\u52d5\u304f\n            if(y0 == 80){\n                x0 = l * 4 + 20;    //\u5f3e\u306eX\u8ef8\u3068Y\u8ef8\u306e\u5834\u6240\n            }\n            y0 += 4;    //\u5f3e\u304c\u6483\u305f\u308c\u305f\u6642\u306eY\u8ef8\u306e\u79fb\u52d5\u30b9\u30d4\u30fc\u30c9\n            Point(x0, y0, 5);\n            if(y0 > 480){   //Y\u8ef8\u304c\u3053\u3053\u307e\u3067\u79fb\u52d5\u3057\u305f\u3089\u521d\u671f\u4f4d\u7f6e\u306b\u623b\u308b\u51e6\u7406\n                y0 = 80;\n            }\n        }\n    }\n\n    void Invader::InvaderShot1(){\n        static int y2 = 80;\n        static int x2;\n\n        glColor3d(0.5,0.7,0.3);\n        ort = 1;\n        if(ort == 1){\n            if(y2 == 80){\n                x2 = l * 4 + 100;\n            }\n            y2 += 4;\n            Point(x2, y2, 5);\n            if(y2 > 480){\n                y2 = 80;\n            }\n        }\n    }\n\n    void Invader::InvaderShot2(){\n        static int y3 = 80;\n        static int x3;\n\n        glColor3d(0.5,0.7,0.3);\n        ort = 1;\n        if(ort == 1){\n            if(y3 == 80){\n                x3 = l * 4 + 180;\n            }\n            y3 += 4;\n            Point(x3, y3, 5);\n            if(y3 > 480){\n                y3 = 80;\n            }\n        }\n    }\n\n    void Invader::InvaderShot3(){\n        static int y4 = 80;\n        static int x4;\n\n        glColor3d(0.5,0.7,0.3);\n        ort = 1;\n        if(ort == 1){\n            if(y4 == 80){\n                x4 = l * 4 + 260;\n            }\n            y4 += 4;\n            Point(x4, y4, 5);\n            if(y4 > 480){\n                y4 = 80;\n            }\n        }\n    }\n\n    void Invader::InvaderShot4(){\n        static int y5 = 80;\n        static int x5;\n\n        glColor3d(0.5,0.7,0.3);\n        ort = 1;\n        if(ort == 1){\n            if(y5 == 80){\n                x5 = l * 4 + 340;\n            }\n            y5 += 4;\n            Point(x5, y5, 5);\n            if(y5 > 480){\n                y5 = 80;\n            }\n        }\n    }\n\n    void Invader::InvaderShot5(){\n        static int y5 = 80;\n        static int x5;\n\n        glColor3d(0.5,0.7,0.3);\n        ort = 1;\n        if(ort == 1){\n            if(y5 == 80){\n                x5 = l * 4 + 420;\n            }\n            y5 += 4;\n            Point(x5, y5, 5);\n            if(y5 > 480){\n                y5 = 80;\n            }\n        }\n    }\n\n    void Invader::InvaderShot6(){\n        static int y6 = 80;\n        static int x6;\n\n        glColor3d(0.5,0.7,0.3);\n        ort = 1;\n        if(ort == 1){\n            if(y6 == 80){\n                x6 = l * 4 + 500;\n            }\n            y6 += 4;\n            Point(x6, y6, 5);\n            if(y6 > 480){\n                y6= 80;\n            }\n        }\n    }\n\n    void Invader::InvaderShot7(){\n        static int y7 = 80;\n        static int x7;\n\n        glColor3d(0.5,0.7,0.3);\n        ort = 1;\n        if(ort == 1){\n            if(y7 == 80){\n                x7 = l * 4 + 580;\n            }\n            y7 += 4;\n            Point(x7, y7, 5);\n            if(y7 > 480){\n                y7 = 80;\n            }\n        }\n    }\n\n    class Life{\n    public:\n        float v;    //\u30e6\u30cb\u30c3\u30c8\u306e\u751f\u6b7b\u5224\u5b9a\u306e\u969b\u306e\u5024\n        float i;    //\u30a4\u30f3\u30d9\u30fc\u30c0\u30fc\u306e\u751f\u6b7b\u5224\u5b9a\u306e\u969b\u306e\u5024\n        float Life; //\u751f\u6b7b\u5224\u5b9a\n\n        //\u30e6\u30cb\u30c3\u30c8\u306e\u751f\u6b7b\u5224\u5b9a\n        //\u30a8\u30cd\u30df\u30fc\u306e\u751f\u6b7b\u5224\u5b9a\n    };\n\n    //\u30e6\u30cb\u30c3\u30c8\u306e\u5143\u3092\u69cb\u6210\u3059\u308b\u5f62\n    void UnitPoint(int x,int y){\n        glColor3d(1.0,1.0,1.0);\n        glBegin(GL_QUADS);\n        x = x * 4;  //x\u8ef8\u306e\u5927\u304d\u3055\u30924\u500d\u3059\u308b\n        y = y * 4;  //y\u8ef8\u306e\u5927\u304d\u3055\u30924\u500d\u3059\u308b\n        glVertex2f(x + 300, y + 400);\n        glVertex2f(x + 4 + 300, y + 400);\n        glVertex2f(x + 4 + 300, y + 4 + 400);\n        glVertex2f(x + 300, y + 4 + 400);\n        glEnd();\n    }\n\n    //\u30e6\u30cb\u30c3\u30c8\u306e\u30af\u30e9\u30b9\n    class Unit{\n    public:\n        Unit();     //\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n        //void MyLife();\n        void specialKey();  //\u77e2\u5370key\u306e\u6240\u5f97\n        void specialUpKey();    //\u77e2\u5370key\u306e\u96e2\u308c\u308b\u3092\u6240\u5f97\n        void keyboard();    //\u30b9\u30da\u30fc\u30b9key\u306e\u6240\u5f97\n        void keyboardUp();  //\u30b9\u30da\u30fc\u30b9key\u306e\u96e2\u308c\u308b\u3092\u6240\u5f97\n        void UnitShot();    //\u30e6\u30cb\u30c3\u30c8\u304c\u5f3e\u3092\u6483\u3064\n    };\n\n    //\u30e6\u30cb\u30c3\u30c8\u306e\u8a2d\u8a08\u56f3\n    Unit::Unit(){\n        static GLboolean isUp = GL_TRUE;\n        if(VV == 1){    //\u5de6\u306b\u79fb\u52d5\u3059\u308b\u51e6\u7406\n            dim -= 1;   //\u79fb\u52d5\u30b9\u30d4\u30fc\u30c9\n        }else\n        if(VV == 2){    //\u53f3\u306b\u79fb\u52d5\u3059\u308b\u51e6\u7406\n            dim += 1;   //\u79fb\u52d5\u30b9\u30d4\u30fc\u30c9\n        }\n    //\u30e6\u30cb\u30c3\u30c8\u3092\u69cb\u6210\u3059\u308b\u3082\u306e\n        UnitPoint(0 + dim, 5);\n        UnitPoint(0 + dim, 6);\n        UnitPoint(0 + dim, 7);\n        UnitPoint(0 + dim, 8);\n        UnitPoint(1 + dim, 5);\n        UnitPoint(1 + dim, 6);\n        UnitPoint(1 + dim, 7);\n        UnitPoint(1 + dim, 8);\n        UnitPoint(2 + dim, 5);\n        UnitPoint(2 + dim, 6);\n        UnitPoint(2 + dim, 7);\n        UnitPoint(2 + dim, 8);\n        UnitPoint(3 + dim, 2);\n        UnitPoint(3 + dim, 3);\n        UnitPoint(3 + dim, 4);\n        UnitPoint(3 + dim, 5);\n        UnitPoint(3 + dim, 6);\n        UnitPoint(3 + dim, 7);\n        UnitPoint(3 + dim, 8);\n        UnitPoint(4 + dim, 2);\n        UnitPoint(4 + dim, 3);\n        UnitPoint(4 + dim, 4);\n        UnitPoint(4 + dim, 5);\n        UnitPoint(4 + dim, 6);\n        UnitPoint(4 + dim, 7);\n        UnitPoint(4 + dim, 8);\n        UnitPoint(5 + dim, 2);\n        UnitPoint(5 + dim, 3);\n        UnitPoint(5 + dim, 4);\n        UnitPoint(5 + dim, 5);\n        UnitPoint(5 + dim, 6);\n        UnitPoint(5 + dim, 7);\n        UnitPoint(5 + dim, 8);\n        UnitPoint(6 + dim, 2);\n        UnitPoint(6 + dim, 3);\n        UnitPoint(6 + dim, 4);\n        UnitPoint(6 + dim, 5);\n        UnitPoint(6 + dim, 6);\n        UnitPoint(6 + dim, 7);\n        UnitPoint(6 + dim, 8);\n        UnitPoint(7 + dim, 5);\n        UnitPoint(7 + dim, 6);\n        UnitPoint(7 + dim, 7);\n        UnitPoint(7 + dim, 8);\n        UnitPoint(8 + dim, 5);\n        UnitPoint(8 + dim, 6);\n        UnitPoint(8 + dim, 7);\n        UnitPoint(8 + dim, 8);\n        UnitPoint(9 + dim, 5);\n        UnitPoint(9 + dim, 6);\n        UnitPoint(9 + dim, 7);\n        UnitPoint(9 + dim, 8);\n        glFlush();\n    }\n\n    //\u30b9\u30da\u30fc\u30b9\u3092\u62bc\u3057\u305f\u3068\u304d\u306b\u5f3e\u3092\u51fa\u3059\n    void keyboard(unsigned char key,int x,int y){\n        switch(key){\n            case ' ': shut = 1;\n                break;\n        }\n    }\n\n    //\u30b9\u30da\u30fc\u30b9\u3092\u96e2\u3059\n    void keyboardUp(unsigned char key,int x,int y){\n        switch(key){\n            case ' ':\n            break;\n        }\n    }\n\n    //\u5de6\u53f3\u306e\u79fb\u52d5\u306e\u30b3\u30de\u30f3\u30c9key\n    void specialKey(int key,int x,int y){\n        switch(key){\n            case GLUT_KEY_LEFT: VV = 1;     //\u5de6\u306b\u79fb\u52d5\n                break;\n            case GLUT_KEY_RIGHT: VV = 2;    //\u53f3\u306b\u79fb\u52d5\n                break;\n        }\n    }\n\n    //key\u304b\u3089\u96e2\u308c\u305f\u5834\u5408\u306e\u51e6\u7406\n    void specialUpKey(int key, int x, int y){\n        switch(key){\n            case GLUT_KEY_LEFT: VV = 0;     //\u5de6\u306b\u79fb\u52d5\u3057\u3066\u308b\u306e\u3092\u6b62\u3081\u308b\n                break;\n            case GLUT_KEY_RIGHT: VV = 0;    //\u53f3\u306b\u79fb\u52d5\u3057\u3066\u308b\u306e\u3092\u6b62\u3081\u308b\n                break;\n        }\n    }\n\n    //\u30e6\u30cb\u30c3\u30c8\u306e\u5f3e\u3092\u6483\u3064\u306e\u51e6\u7406\n    void Unit::UnitShot(){\n        static int Uy1 = 400;   //y\u8ef8\u306e\u5024\n        static int Ux1;         //x\u8ef8\u306e\u5024\n        glColor3d(0.0,0.7,1.0); //\u30e6\u30cb\u30c3\u30c8\u306e\u6253\u3063\u305f\u3068\u304d\u306e\u8272\n        if(shut == 1){\n            if(Uy1 == 400){\n                Ux1 = dim * 4 + 320;\n            }\n            Uy1 -= 10;\n            Point(Ux1, Uy1, 5);\n            if(Uy1 < 0){\n                Uy1 = 400;\n                shut = 0;\n            }\n        }\n    }\n\n    //\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\n    void display(void){\n        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n        Invader i;          //\u30a4\u30f3\u30d9\u30fc\u30c0\u30fc\n        i.InvaderShot0();   //\u30a4\u30f3\u30d9\u30fc\u30c0\u30fc\u304c\u6483\u3064\u63cf\u753b\n        i.InvaderShot1();   //\u6b8b\u308a\u3082\u540c\u3058\u3060\u304c\u3072\u3068\u307e\u3068\u3081\u306b\u3059\u308b\n        i.InvaderShot2();\n        i.InvaderShot3();\n        i.InvaderShot4();\n        i.InvaderShot5();\n        i.InvaderShot6();\n        i.InvaderShot7();\n        Unit u;             //\u30e6\u30cb\u30c3\u30c8\n        u.UnitShot();       //\u30e6\u30cb\u30c3\u30c8\u304c\u6483\u3064\u63cf\u753b\n        glutSwapBuffers();  //\u30c0\u30d6\u30eb\u30d0\u30c3\u30d5\u30a1\n    }\n\n    void Init(void){\n        glClearColor(0.0,0.0,0.0,0.0);\n        glOrtho(0,WIDTH,HEIGHT,0,-1,1);\n    }\n\n    int main(int argc, char* argv[]){\n        glutInit(&argc, argv);\n        glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE);\n        glutInitWindowSize(WIDTH,HEIGHT);\n        glutCreateWindow(\"Invader\");\n        glutDisplayFunc(display);\n        glutKeyboardFunc(keyboard);\n        glutKeyboardUpFunc(keyboardUp);\n        glutSpecialFunc(specialKey);\n        glutSpecialUpFunc(specialUpKey);\n        Init();\n        glutMainLoop();\n        return 0; \n    }\n\n\n\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8!\n\n\n\u611f\u60f3\n\u5f53\u305f\u308a\u5224\u5b9a\u3092\u5165\u308c\u3089\u308c\u306a\u304b\u3063\u305f\u306e\u3067\u4eca\u5ea6\u306f\u305d\u3053\u3092\u7d44\u307f\u8fbc\u3093\u3067\u3044\u3051\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u3067\u3059\u3002\n#\u6982\u8981\nOpenGL/GLUT\u3092\u4f7f\u3063\u305f\u30a4\u30f3\u30d9\u30fc\u30c0\u30fc\u30b2\u30fc\u30e0\u3082\u3069\u304d\u3067\u3059\u3002\nmac\u74b0\u5883\u3067\u306e\u5236\u4f5c\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u307e\u3060\u307e\u3060\u672a\u5b8c\u6210\u3067\u5f53\u305f\u308a\u5224\u5b9a\u3082\u51fa\u6765\u3066\u306a\u3044\u30ec\u30d9\u30eb\u306e\u3082\u306e\u3067\u3059\u3002\n\u30b3\u30fc\u30c9\u3082\u975e\u5e38\u306b\u898b\u306b\u304f\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u304c\u7d20\u4eba\u306a\u308a\u306b\u9811\u5f35\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n#Invader\u30b3\u30fc\u30c9\n~~~\n    //Invader.cpp\n\t#include <GLUT/glut.h>\n\t#include <ctime>\n\t#include <cmath>\n\t#include <cstdlib>\n\t#include <iostream>\n\tusing namespace std;\n\n\t#define WIDTH 640\n\t#define HEIGHT 480\n\t#define PI 3.1411592\t//\u03c0\n\n\tint VV;\t\t//\u30e6\u30cb\u30c3\u30c8\u306e\u540d\u524d\n\tint shut;\t//\u30e6\u30cb\u30c3\u30c8\u304c\u5f3e\u3092\u6483\u3064\n\tint ort;\t//\u30a4\u30f3\u30d9\u30fc\u30c0\u30fc\u306e\u6483\u3064\n\t//int dan;\t\n\tstatic GLfloat l = 0.0;\t\t//\u30a4\u30f3\u30d9\u30fc\u30c0\u30fc\u79fb\u52d5\u3059\u308b\u8ddd\u96e2\n\tstatic int dim = 0;\t\t//\u30e6\u30cb\u30c3\u30c8\u306e\u52d5\u304f\u3068\u304d\u306e\u5b9a\u6570\n\n\t//\u5f3e\u4e38\u306e\u5143\n\tvoid Point(int x,int y,float size){\n\t\tglPointSize(size);\t//\u5f3e\u306e\u30b5\u30a4\u30ba\n\t\tglBegin(GL_POINTS);\n\t\tglVertex2i(x,y);\n\t\t//\u3053\u3053\u306b\u5f3e\u81ea\u4f53\u306b\u5f53\u305f\u308a\u5224\u5b9a\u3092\u3064\u3051\u308b\n\t\tglEnd();\n\t}\n\n\t//\u30a4\u30f3\u30d9\u30fc\u30c0\u30fc\u306e\u5b9f\u614b\u5143\n\tvoid InvaderPoint(int x,int y){\n\t\tglColor3d(1.0,0.0,0.0);\n\t\tglBegin(GL_QUADS);\n\t\tglVertex2f(x * 4 - 40, y * 4 + 40);\n\t\tglVertex2f(x * 4 - 40, y * 4 + 4 + 40);\n\t\tglVertex2f(x * 4 + 4 - 40, y * 4 + 4 + 40);\n\t\tglVertex2f(x * 4 + 4 - 40, y * 4 + 40);\n\t}\n\n\t//\u30a4\u30f3\u30d9\u30fc\u30c0\u30fc\u306e\u30af\u30e9\u30b9\n\tclass Invader{\n\tpublic:\n\t\tInvader();\t\t//\u30a4\u30f3\u30d9\u30fc\u30c0\u30fc\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n\t\t/*Shot\u3092\u4e00\u3064\u4f5c\u3063\u305f\u5f8c\u306b\u305d\u308c\u3092\u72ec\u7acb\u3055\u305b\u305f\u3082\u306e\u306b\u9069\u7528\u3055\u305b\u3066\u3044\u304f\u3002\n\t\t\u5f3e\u81ea\u4f53\u306b\u5f53\u305f\u308a\u5224\u5b9a\u3092\u5165\u308c\u3066\u304a\u304f*/\n\t\tvoid InvaderShot0();\t//\u30a4\u30f3\u30d9\u30fc\u30c0\u30fc\u306e\u5f3e\u3092\u6483\u3064\n\t\tvoid InvaderShot1();\n\t\tvoid InvaderShot2();\n\t\tvoid InvaderShot3();\n\t\tvoid InvaderShot4();\n\t\tvoid InvaderShot5();\n\t\tvoid InvaderShot6();\n\t\tvoid InvaderShot7();\n\t};\n\n\t//\u30a4\u30f3\u30d9\u30fc\u30c0\u30fc\u306e\u8a2d\u8a08\u56f3\n\tInvader::Invader(){\n\t\tstatic GLboolean isUp = GL_TRUE;\n\n\t//\u914d\u5217\u306b\u76f4\u3057\u3066\u4e00\u3064\u4e00\u3064\u306b\u72ec\u7acb\u3055\u305b\u305f\u3082\u306e\u306b\u3059\u308b\u3002\n\t\tfor(int i = 0; i < WIDTH; i += 20){\n\t\t\tInvaderPoint(0+l+10+i,5);\n\t\t\tInvaderPoint(0+l+10+i,6);\n\t\t\tInvaderPoint(0+l+10+i,7);\n\t\t\tInvaderPoint(1+l+10+i,4);\n\t\t\tInvaderPoint(1+l+10+i,5);\n\t\t\tInvaderPoint(2+l+10+i,1);\n\t\t\tInvaderPoint(2+l+10+i,3);\n\t\t\tInvaderPoint(2+l+10+i,4);\n\t\t\tInvaderPoint(2+l+10+i,5);\n\t\t\tInvaderPoint(2+l+10+i,6);\n\t\t\tInvaderPoint(2+l+10+i,7);\n\t\t\tInvaderPoint(3+l+10+i,2);\n\t\t\tInvaderPoint(3+l+10+i,3);\n\t\t\tInvaderPoint(3+l+10+i,5);\n\t\t\tInvaderPoint(3+l+10+i,6);\n\t\t\tInvaderPoint(3+l+10+i,8);\n\t\t\tInvaderPoint(4+l+10+i,3);\n\t\t\tInvaderPoint(4+l+10+i,4);\n\t\t\tInvaderPoint(4+l+10+i,5);\n\t\t\tInvaderPoint(4+l+10+i,6);\n\t\t\tInvaderPoint(5+l+10+i,3);\n\t\t\tInvaderPoint(5+l+10+i,4);\n\t\t\tInvaderPoint(5+l+10+i,5);\n\t\t\tInvaderPoint(5+l+10+i,6);\n\t\t\tInvaderPoint(6+l+10+i,2);\n\t\t\tInvaderPoint(6+l+10+i,3);\n\t\t\tInvaderPoint(6+l+10+i,5);\n\t\t\tInvaderPoint(6+l+10+i,6);\n\t\t\tInvaderPoint(6+l+10+i,8);\n\t\t\tInvaderPoint(7+l+10+i,1);\n\t\t\tInvaderPoint(7+l+10+i,3);\n\t\t\tInvaderPoint(7+l+10+i,4);\n\t\t\tInvaderPoint(7+l+10+i,5);\n\t\t\tInvaderPoint(7+l+10+i,6);\n\t\t\tInvaderPoint(7+l+10+i,7);\n\t\t\tInvaderPoint(8+l+10+i,4);\n\t\t\tInvaderPoint(8+l+10+i,5);\n\t\t\tInvaderPoint(9+l+10+i,5);\n\t\t\tInvaderPoint(9+l+10+i,6);\n\t\t\tInvaderPoint(9+l+10+i,7);\n\t\t}\n\t//\u30a4\u30f3\u30d9\u30fc\u30c0\u30fc\u306e\u79fb\u52d5\u51e6\u7406\n\t\tif(l > 10)isUp = GL_FALSE;\n\t\telse if(l <= 0)isUp = GL_TRUE;\n\t\tl += (isUp == GL_TRUE ? 0.07:-0.07);\n\t\tglutPostRedisplay();\t//Idle\u306e\u4ee3\u308f\u308a\n\t\tglFlush();\n\t}\n\n\tvoid Invader::InvaderShot0(){\n\t\tstatic int y0 = 80;\t\t//y\u8ef8\u306e\u5024\n\t\tstatic int x0;\t\t\t//x\u8ef8\u306e\u5024\n\n\t\tglColor3d(0.5,0.7,0.3);\t//\u5f3e\u306e\u8272\n\t\tort = 1;\t\t\t\t//\u30a4\u30f3\u30d9\u30fc\u30c0\u30fc\u306e\u5f3e\u3092\u6483\u3064\u3068\u304d\u306e\u5024\n\t\tif(ort == 1){\t\t\t//ort\u304c1\u306b\u306a\u3063\u305f\u3068\u304d\u306b\u52d5\u304f\n\t\t\tif(y0 == 80){\n\t\t\t\tx0 = l * 4 + 20;\t//\u5f3e\u306eX\u8ef8\u3068Y\u8ef8\u306e\u5834\u6240\n\t\t\t}\n\t\t\ty0 += 4;\t//\u5f3e\u304c\u6483\u305f\u308c\u305f\u6642\u306eY\u8ef8\u306e\u79fb\u52d5\u30b9\u30d4\u30fc\u30c9\n\t\t\tPoint(x0, y0, 5);\n\t\t\tif(y0 > 480){\t//Y\u8ef8\u304c\u3053\u3053\u307e\u3067\u79fb\u52d5\u3057\u305f\u3089\u521d\u671f\u4f4d\u7f6e\u306b\u623b\u308b\u51e6\u7406\n\t\t\t\ty0 = 80;\n\t\t\t}\n\t\t}\n\t}\n\n\tvoid Invader::InvaderShot1(){\n\t\tstatic int y2 = 80;\n\t\tstatic int x2;\n\n\t\tglColor3d(0.5,0.7,0.3);\n\t\tort = 1;\n\t\tif(ort == 1){\n\t\t\tif(y2 == 80){\n\t\t\t\tx2 = l * 4 + 100;\n\t\t\t}\n\t\t\ty2 += 4;\n\t\t\tPoint(x2, y2, 5);\n\t\t\tif(y2 > 480){\n\t\t\t\ty2 = 80;\n\t\t\t}\n\t\t}\n\t}\n\n\tvoid Invader::InvaderShot2(){\n\t\tstatic int y3 = 80;\n\t\tstatic int x3;\n\n\t\tglColor3d(0.5,0.7,0.3);\n\t\tort = 1;\n\t\tif(ort == 1){\n\t\t\tif(y3 == 80){\n\t\t\t\tx3 = l * 4 + 180;\n\t\t\t}\n\t\t\ty3 += 4;\n\t\t\tPoint(x3, y3, 5);\n\t\t\tif(y3 > 480){\n\t\t\t\ty3 = 80;\n\t\t\t}\n\t\t}\n\t}\n\n\tvoid Invader::InvaderShot3(){\n\t\tstatic int y4 = 80;\n\t\tstatic int x4;\n\n\t\tglColor3d(0.5,0.7,0.3);\n\t\tort = 1;\n\t\tif(ort == 1){\n\t\t\tif(y4 == 80){\n\t\t\t\tx4 = l * 4 + 260;\n\t\t\t}\n\t\t\ty4 += 4;\n\t\t\tPoint(x4, y4, 5);\n\t\t\tif(y4 > 480){\n\t\t\t\ty4 = 80;\n\t\t\t}\n\t\t}\n\t}\n\n\tvoid Invader::InvaderShot4(){\n\t\tstatic int y5 = 80;\n\t\tstatic int x5;\n\n\t\tglColor3d(0.5,0.7,0.3);\n\t\tort = 1;\n\t\tif(ort == 1){\n\t\t\tif(y5 == 80){\n\t\t\t\tx5 = l * 4 + 340;\n\t\t\t}\n\t\t\ty5 += 4;\n\t\t\tPoint(x5, y5, 5);\n\t\t\tif(y5 > 480){\n\t\t\t\ty5 = 80;\n\t\t\t}\n\t\t}\n\t}\n\n\tvoid Invader::InvaderShot5(){\n\t\tstatic int y5 = 80;\n\t\tstatic int x5;\n\n\t\tglColor3d(0.5,0.7,0.3);\n\t\tort = 1;\n\t\tif(ort == 1){\n\t\t\tif(y5 == 80){\n\t\t\t\tx5 = l * 4 + 420;\n\t\t\t}\n\t\t\ty5 += 4;\n\t\t\tPoint(x5, y5, 5);\n\t\t\tif(y5 > 480){\n\t\t\t\ty5 = 80;\n\t\t\t}\n\t\t}\n\t}\n\n\tvoid Invader::InvaderShot6(){\n\t\tstatic int y6 = 80;\n\t\tstatic int x6;\n\n\t\tglColor3d(0.5,0.7,0.3);\n\t\tort = 1;\n\t\tif(ort == 1){\n\t\t\tif(y6 == 80){\n\t\t\t\tx6 = l * 4 + 500;\n\t\t\t}\n\t\t\ty6 += 4;\n\t\t\tPoint(x6, y6, 5);\n\t\t\tif(y6 > 480){\n\t\t\t\ty6= 80;\n\t\t\t}\n\t\t}\n\t}\n\n\tvoid Invader::InvaderShot7(){\n\t\tstatic int y7 = 80;\n\t\tstatic int x7;\n\n\t\tglColor3d(0.5,0.7,0.3);\n\t\tort = 1;\n\t\tif(ort == 1){\n\t\t\tif(y7 == 80){\n\t\t\t\tx7 = l * 4 + 580;\n\t\t\t}\n\t\t\ty7 += 4;\n\t\t\tPoint(x7, y7, 5);\n\t\t\tif(y7 > 480){\n\t\t\t\ty7 = 80;\n\t\t\t}\n\t\t}\n\t}\n\n\tclass Life{\n\tpublic:\n\t\tfloat v;\t//\u30e6\u30cb\u30c3\u30c8\u306e\u751f\u6b7b\u5224\u5b9a\u306e\u969b\u306e\u5024\n\t\tfloat i;\t//\u30a4\u30f3\u30d9\u30fc\u30c0\u30fc\u306e\u751f\u6b7b\u5224\u5b9a\u306e\u969b\u306e\u5024\n\t\tfloat Life;\t//\u751f\u6b7b\u5224\u5b9a\n\n\t\t//\u30e6\u30cb\u30c3\u30c8\u306e\u751f\u6b7b\u5224\u5b9a\n\t\t//\u30a8\u30cd\u30df\u30fc\u306e\u751f\u6b7b\u5224\u5b9a\n\t};\n\n\t//\u30e6\u30cb\u30c3\u30c8\u306e\u5143\u3092\u69cb\u6210\u3059\u308b\u5f62\n\tvoid UnitPoint(int x,int y){\n\t\tglColor3d(1.0,1.0,1.0);\n\t\tglBegin(GL_QUADS);\n\t\tx = x * 4; \t//x\u8ef8\u306e\u5927\u304d\u3055\u30924\u500d\u3059\u308b\n\t\ty = y * 4;\t//y\u8ef8\u306e\u5927\u304d\u3055\u30924\u500d\u3059\u308b\n\t\tglVertex2f(x + 300, y + 400);\n\t\tglVertex2f(x + 4 + 300, y + 400);\n\t\tglVertex2f(x + 4 + 300, y + 4 + 400);\n\t\tglVertex2f(x + 300, y + 4 + 400);\n\t\tglEnd();\n\t}\n\n\t//\u30e6\u30cb\u30c3\u30c8\u306e\u30af\u30e9\u30b9\n\tclass Unit{\n\tpublic:\n\t\tUnit();\t\t//\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n\t\t//void MyLife();\n\t\tvoid specialKey();\t//\u77e2\u5370key\u306e\u6240\u5f97\n\t\tvoid specialUpKey();\t//\u77e2\u5370key\u306e\u96e2\u308c\u308b\u3092\u6240\u5f97\n\t\tvoid keyboard();\t//\u30b9\u30da\u30fc\u30b9key\u306e\u6240\u5f97\n\t\tvoid keyboardUp();\t//\u30b9\u30da\u30fc\u30b9key\u306e\u96e2\u308c\u308b\u3092\u6240\u5f97\n\t\tvoid UnitShot();\t//\u30e6\u30cb\u30c3\u30c8\u304c\u5f3e\u3092\u6483\u3064\n\t};\n\n\t//\u30e6\u30cb\u30c3\u30c8\u306e\u8a2d\u8a08\u56f3\n\tUnit::Unit(){\n\t\tstatic GLboolean isUp = GL_TRUE;\n\t\tif(VV == 1){\t//\u5de6\u306b\u79fb\u52d5\u3059\u308b\u51e6\u7406\n\t\t\tdim -= 1;\t//\u79fb\u52d5\u30b9\u30d4\u30fc\u30c9\n\t\t}else\n\t\tif(VV == 2){\t//\u53f3\u306b\u79fb\u52d5\u3059\u308b\u51e6\u7406\n\t\t\tdim += 1;\t//\u79fb\u52d5\u30b9\u30d4\u30fc\u30c9\n\t\t}\n\t//\u30e6\u30cb\u30c3\u30c8\u3092\u69cb\u6210\u3059\u308b\u3082\u306e\n\t\tUnitPoint(0 + dim, 5);\n\t\tUnitPoint(0 + dim, 6);\n\t\tUnitPoint(0 + dim, 7);\n\t\tUnitPoint(0 + dim, 8);\n\t\tUnitPoint(1 + dim, 5);\n\t\tUnitPoint(1 + dim, 6);\n\t\tUnitPoint(1 + dim, 7);\n\t\tUnitPoint(1 + dim, 8);\n\t\tUnitPoint(2 + dim, 5);\n\t\tUnitPoint(2 + dim, 6);\n\t\tUnitPoint(2 + dim, 7);\n\t\tUnitPoint(2 + dim, 8);\n\t\tUnitPoint(3 + dim, 2);\n\t\tUnitPoint(3 + dim, 3);\n\t\tUnitPoint(3 + dim, 4);\n\t\tUnitPoint(3 + dim, 5);\n\t\tUnitPoint(3 + dim, 6);\n\t\tUnitPoint(3 + dim, 7);\n\t\tUnitPoint(3 + dim, 8);\n\t\tUnitPoint(4 + dim, 2);\n\t\tUnitPoint(4 + dim, 3);\n\t\tUnitPoint(4 + dim, 4);\n\t\tUnitPoint(4 + dim, 5);\n\t\tUnitPoint(4 + dim, 6);\n\t\tUnitPoint(4 + dim, 7);\n\t\tUnitPoint(4 + dim, 8);\n\t\tUnitPoint(5 + dim, 2);\n\t\tUnitPoint(5 + dim, 3);\n\t\tUnitPoint(5 + dim, 4);\n\t\tUnitPoint(5 + dim, 5);\n\t\tUnitPoint(5 + dim, 6);\n\t\tUnitPoint(5 + dim, 7);\n\t\tUnitPoint(5 + dim, 8);\n\t\tUnitPoint(6 + dim, 2);\n\t\tUnitPoint(6 + dim, 3);\n\t\tUnitPoint(6 + dim, 4);\n\t\tUnitPoint(6 + dim, 5);\n\t\tUnitPoint(6 + dim, 6);\n\t\tUnitPoint(6 + dim, 7);\n\t\tUnitPoint(6 + dim, 8);\n\t\tUnitPoint(7 + dim, 5);\n\t\tUnitPoint(7 + dim, 6);\n\t\tUnitPoint(7 + dim, 7);\n\t\tUnitPoint(7 + dim, 8);\n\t\tUnitPoint(8 + dim, 5);\n\t\tUnitPoint(8 + dim, 6);\n\t\tUnitPoint(8 + dim, 7);\n\t\tUnitPoint(8 + dim, 8);\n\t\tUnitPoint(9 + dim, 5);\n\t\tUnitPoint(9 + dim, 6);\n\t\tUnitPoint(9 + dim, 7);\n\t\tUnitPoint(9 + dim, 8);\n\t\tglFlush();\n\t}\n\n\t//\u30b9\u30da\u30fc\u30b9\u3092\u62bc\u3057\u305f\u3068\u304d\u306b\u5f3e\u3092\u51fa\u3059\n\tvoid keyboard(unsigned char key,int x,int y){\n\t\tswitch(key){\n\t\t\tcase ' ': shut = 1;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t//\u30b9\u30da\u30fc\u30b9\u3092\u96e2\u3059\n\tvoid keyboardUp(unsigned char key,int x,int y){\n\t\tswitch(key){\n\t\t\tcase ' ':\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t//\u5de6\u53f3\u306e\u79fb\u52d5\u306e\u30b3\u30de\u30f3\u30c9key\n\tvoid specialKey(int key,int x,int y){\n\t\tswitch(key){\n\t\t\tcase GLUT_KEY_LEFT: VV = 1;\t\t//\u5de6\u306b\u79fb\u52d5\n\t\t\t\tbreak;\n\t\t\tcase GLUT_KEY_RIGHT: VV = 2;\t//\u53f3\u306b\u79fb\u52d5\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t//key\u304b\u3089\u96e2\u308c\u305f\u5834\u5408\u306e\u51e6\u7406\n\tvoid specialUpKey(int key, int x, int y){\n\t\tswitch(key){\n\t\t\tcase GLUT_KEY_LEFT: VV = 0;\t\t//\u5de6\u306b\u79fb\u52d5\u3057\u3066\u308b\u306e\u3092\u6b62\u3081\u308b\n\t\t\t\tbreak;\n\t\t\tcase GLUT_KEY_RIGHT: VV = 0;\t//\u53f3\u306b\u79fb\u52d5\u3057\u3066\u308b\u306e\u3092\u6b62\u3081\u308b\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t//\u30e6\u30cb\u30c3\u30c8\u306e\u5f3e\u3092\u6483\u3064\u306e\u51e6\u7406\n\tvoid Unit::UnitShot(){\n\t\tstatic int Uy1 = 400;\t//y\u8ef8\u306e\u5024\n\t\tstatic int Ux1;\t\t\t//x\u8ef8\u306e\u5024\n\t\tglColor3d(0.0,0.7,1.0);\t//\u30e6\u30cb\u30c3\u30c8\u306e\u6253\u3063\u305f\u3068\u304d\u306e\u8272\n\t\tif(shut == 1){\n\t\t\tif(Uy1 == 400){\n\t\t\t\tUx1 = dim * 4 + 320;\n\t\t\t}\n\t\t\tUy1 -= 10;\n\t\t\tPoint(Ux1, Uy1, 5);\n\t\t\tif(Uy1 < 0){\n\t\t\t\tUy1 = 400;\n\t\t\t\tshut = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\t//\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\n\tvoid display(void){\n\t\tglClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n\t\tInvader i;\t\t\t//\u30a4\u30f3\u30d9\u30fc\u30c0\u30fc\n\t\ti.InvaderShot0();\t//\u30a4\u30f3\u30d9\u30fc\u30c0\u30fc\u304c\u6483\u3064\u63cf\u753b\n\t\ti.InvaderShot1();\t//\u6b8b\u308a\u3082\u540c\u3058\u3060\u304c\u3072\u3068\u307e\u3068\u3081\u306b\u3059\u308b\n\t\ti.InvaderShot2();\n\t\ti.InvaderShot3();\n\t\ti.InvaderShot4();\n\t\ti.InvaderShot5();\n\t\ti.InvaderShot6();\n\t\ti.InvaderShot7();\n\t\tUnit u;\t\t\t\t//\u30e6\u30cb\u30c3\u30c8\n\t\tu.UnitShot();\t\t//\u30e6\u30cb\u30c3\u30c8\u304c\u6483\u3064\u63cf\u753b\n\t\tglutSwapBuffers();\t//\u30c0\u30d6\u30eb\u30d0\u30c3\u30d5\u30a1\n\t}\n\n\tvoid Init(void){\n\t\tglClearColor(0.0,0.0,0.0,0.0);\n\t\tglOrtho(0,WIDTH,HEIGHT,0,-1,1);\n\t}\n\n\tint main(int argc, char* argv[]){\n\t\tglutInit(&argc, argv);\n\t\tglutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE);\n\t\tglutInitWindowSize(WIDTH,HEIGHT);\n\t\tglutCreateWindow(\"Invader\");\n\t\tglutDisplayFunc(display);\n\t\tglutKeyboardFunc(keyboard);\n\t\tglutKeyboardUpFunc(keyboardUp);\n\t\tglutSpecialFunc(specialKey);\n\t\tglutSpecialUpFunc(specialUpKey);\n\t\tInit();\n\t\tglutMainLoop();\n\t\treturn 0; \n\t}\n~~~\n#\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8!\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-06-20 12.31.16.png](https://qiita-image-store.s3.amazonaws.com/0/121173/79b43fae-2717-c8a2-ce81-e969d5b064df.png)\n#\u611f\u60f3\n\u5f53\u305f\u308a\u5224\u5b9a\u3092\u5165\u308c\u3089\u308c\u306a\u304b\u3063\u305f\u306e\u3067\u4eca\u5ea6\u306f\u305d\u3053\u3092\u7d44\u307f\u8fbc\u3093\u3067\u3044\u3051\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u3067\u3059\u3002\n", "tags": ["C++", "OpenGL"]}