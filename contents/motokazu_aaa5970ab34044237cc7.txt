{"context": " More than 1 year has passed since last update.\u8a08\u7b97\u306f\u3053\u3061\u3089\u306e\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u9802\u304d\u307e\u3057\u305f\u3002\nhttp://mononofu.hatenablog.com/entry/20090324/1237894846\npython \u306e faker \u3092\u4f7f\u3044\u307e\u3059.\nfaker\u306b\u306f\u65e5\u672c\u30ed\u30b1\u30fc\u30eb\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u5229\u7528\u3002\n\u4f8b\u3048\u3070\u3001\u6771\u4eac\u99c5\u3092\u4e2d\u5fc3\u306b\u534a\u5f84100m\u306e\u5186\u306e\u4e2d\u306b\u70b9\u309210\u500b\u751f\u6210\n#!/usr/bin/env python\n\nfrom faker import Factory\nfake = Factory.create('ja_JP')\n\nimport math\nimport csv\n\n##\n# \nsamples       = 10\nlimit_samples = 10000\ncsvfile       = \"data.csv\"\n\n# Tokyo Station(35.681382, 139.766084)\ncenterlat  = 35.681382\ncenterlong = 139.766084\nradius_m   = 100\n\n#########\nearthradius = 6378137\nlat1radm   = ((2*math.pi*earthradius)/360)\nlatradius  = radius_m/lat1radm\nlong1radm  = ((earthradius*math.cos(centerlat/180*math.pi)*2*math.pi)/360)\nlongradius = radius_m/long1radm\n\nwith open(csvfile, \"w+\") as f:\n    csv_writer = csv.writer(f)\n\n    counter = 0\n    for _ in range(0,limit_samples):\n        geolat  = fake.geo_coordinate(center=centerlat , radius=latradius)\n        geolong = fake.geo_coordinate(center=centerlong, radius=longradius)\n\n        r = math.sqrt(math.pow((float(geolat)-centerlat)*lat1radm,2)+math.pow((float(geolong)-centerlong)*long1radm,2))\n        if r < radius_m:       \n            d = [geolat, geolong]\n            #print d\n            csv_writer.writerow(d)\n            counter = counter + 1\n\n        if counter >= samples:\n            break\n\n\u3053\u306e\u307e\u307e\u3060\u3068\u4f7f\u3044\u3065\u3089\u3044\u306e\u3067\u3001\u5f15\u6570\u3067\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u5bfe\u5fdc\u3055\u305b\u308b\u3002\n## args\nimport argparse\nparser = argparse.ArgumentParser(description='Generater of coordinate points.')\nparser.add_argument('--samples', type=int, nargs='?', default=10, help='number of points')\nparser.add_argument('--csv', type=str, nargs='?', default=\"dummydata.csv\", help='csv file name')\nparser.add_argument('--radius', type=int, nargs='?', default=100, help='radius(m)')\n# Tokyo Station(35.681382, 139.766084)\nparser.add_argument('--latitude', type=float, nargs='?', default=35.681382, help='center latitude of the circle')\nparser.add_argument('--longitude', type=float, nargs='?', default=139.766084, help='center longitude of the circle')\nargs = parser.parse_args()\n\n##\n# \nsamples       = args.samples\nlimit_samples = samples * samples\ncsvfile       = args.csv\ncenterlat     = args.latitude\ncenterlong    = args.longitude\nradius_m      = args.radius\n\n$ python genpointsbygeo.py -h\nusage: genpointsbygeo.py [-h] [--samples SAMPLES] [--csv CSV]\n                         [--radius RADIUS] [--latitude LATITUDE]\n                         [--longitude LONGITUDE]\n\nGenerater of coordinate points.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --samples SAMPLES     number of points\n  --csv CSV             csv file name\n  --radius RADIUS       radius(m)\n  --latitude LATITUDE   center latitude of the circle\n  --longitude LONGITUDE\n                        center longitude of the circle\n\n$ python genpointsbygeo.py --samples 100 --csv data1.csv --radius 1000\n$ wc -l data1.csv \n     100 data1.csv\n\n\u8907\u6570\u306e\u70b9\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u78ba\u8a8d\u3067\u304d\u308b\u305f\u3081\u975e\u5e38\u306b\u4fbf\u5229\u3067\u3059\uff01\n\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01\nhttp://www.tree-maps.com/prot/\n\n\u8a08\u7b97\u306f\u3053\u3061\u3089\u306e\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u9802\u304d\u307e\u3057\u305f\u3002\nhttp://mononofu.hatenablog.com/entry/20090324/1237894846\n\npython \u306e [faker](https://github.com/joke2k/faker) \u3092\u4f7f\u3044\u307e\u3059.\n\n[faker\u306b\u306f\u65e5\u672c\u30ed\u30b1\u30fc\u30eb](http://fake-factory.readthedocs.org/en/master/locales/ja_JP.html)\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u5229\u7528\u3002\n\n\u4f8b\u3048\u3070\u3001\u6771\u4eac\u99c5\u3092\u4e2d\u5fc3\u306b\u534a\u5f84100m\u306e\u5186\u306e\u4e2d\u306b\u70b9\u309210\u500b\u751f\u6210\n\n```python\n#!/usr/bin/env python\n\nfrom faker import Factory\nfake = Factory.create('ja_JP')\n\nimport math\nimport csv\n\n##\n# \nsamples       = 10\nlimit_samples = 10000\ncsvfile       = \"data.csv\"\n\n# Tokyo Station(35.681382, 139.766084)\ncenterlat  = 35.681382\ncenterlong = 139.766084\nradius_m   = 100\n\n#########\nearthradius = 6378137\nlat1radm   = ((2*math.pi*earthradius)/360)\nlatradius  = radius_m/lat1radm\nlong1radm  = ((earthradius*math.cos(centerlat/180*math.pi)*2*math.pi)/360)\nlongradius = radius_m/long1radm\n\nwith open(csvfile, \"w+\") as f:\n    csv_writer = csv.writer(f)\n    \n    counter = 0\n    for _ in range(0,limit_samples):\n        geolat  = fake.geo_coordinate(center=centerlat , radius=latradius)\n        geolong = fake.geo_coordinate(center=centerlong, radius=longradius)\n        \n        r = math.sqrt(math.pow((float(geolat)-centerlat)*lat1radm,2)+math.pow((float(geolong)-centerlong)*long1radm,2))\n        if r < radius_m:       \n            d = [geolat, geolong]\n            #print d\n            csv_writer.writerow(d)\n            counter = counter + 1\n        \n        if counter >= samples:\n            break\n```\n\n\n\u3053\u306e\u307e\u307e\u3060\u3068\u4f7f\u3044\u3065\u3089\u3044\u306e\u3067\u3001\u5f15\u6570\u3067\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u5bfe\u5fdc\u3055\u305b\u308b\u3002\n\n```python\n## args\nimport argparse\nparser = argparse.ArgumentParser(description='Generater of coordinate points.')\nparser.add_argument('--samples', type=int, nargs='?', default=10, help='number of points')\nparser.add_argument('--csv', type=str, nargs='?', default=\"dummydata.csv\", help='csv file name')\nparser.add_argument('--radius', type=int, nargs='?', default=100, help='radius(m)')\n# Tokyo Station(35.681382, 139.766084)\nparser.add_argument('--latitude', type=float, nargs='?', default=35.681382, help='center latitude of the circle')\nparser.add_argument('--longitude', type=float, nargs='?', default=139.766084, help='center longitude of the circle')\nargs = parser.parse_args()\n   \n##\n# \nsamples       = args.samples\nlimit_samples = samples * samples\ncsvfile       = args.csv\ncenterlat     = args.latitude\ncenterlong    = args.longitude\nradius_m      = args.radius\n```\n\n```bash\n$ python genpointsbygeo.py -h\nusage: genpointsbygeo.py [-h] [--samples SAMPLES] [--csv CSV]\n                         [--radius RADIUS] [--latitude LATITUDE]\n                         [--longitude LONGITUDE]\n\nGenerater of coordinate points.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --samples SAMPLES     number of points\n  --csv CSV             csv file name\n  --radius RADIUS       radius(m)\n  --latitude LATITUDE   center latitude of the circle\n  --longitude LONGITUDE\n                        center longitude of the circle\n\n$ python genpointsbygeo.py --samples 100 --csv data1.csv --radius 1000\n$ wc -l data1.csv \n     100 data1.csv\n```\n\n\n\n\u8907\u6570\u306e\u70b9\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u78ba\u8a8d\u3067\u304d\u308b\u305f\u3081\u975e\u5e38\u306b\u4fbf\u5229\u3067\u3059\uff01\n\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01\nhttp://www.tree-maps.com/prot/\n", "tags": ["Faker", "geo", "Python"]}