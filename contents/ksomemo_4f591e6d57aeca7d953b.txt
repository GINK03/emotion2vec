{"context": "\n\nmultiprocess/thread\n\ninterface\u304c\u4f3c\u3066\u3044\u308b\nthread\u306f\u898b\u305f\u3053\u3068\u304c\u306a\u3044\n\n\nmultiprocess_thread.py\nimport multiprocessing as mp\nimport threading as th\nimport datetime\n\nn_loop = 10000 ** 2\nn_x = 8\n\n\ndef loop():\n    for _ in range(n_loop):\n        pass\n\n\ndef run(klass):\n    xs = []\n    for _ in range(n_x):\n        x = klass(target=loop)\n        x.start()\n        xs.append(x)\n\n    for x in xs:\n        x.join()\n\n\ndef main():\n    print(\"start\", datetime.datetime.now())\n    print(\"-\"*10)\n\n    run(mp.Process)\n    print(\"run end(mp)\", datetime.datetime.now())\n    print(\"-\"*10)\n\n    run(th.Thread)\n    print(\"run end(th)\", datetime.datetime.now())\n    print(\"-\"*10)\n\n    for _ in range(n_x):\n        loop()\n\n    print(\"loop end\", datetime.datetime.now())\n\nif __name__ == \"__main__\":\n    main()\n\n\n\narguments\n\u5f15\u6570\u306fiterator, keyword\u5f15\u6570\u306fdict\n\nmultiprocess_using_arguments.py\ndef print_args(arg1, arg2, kwarg1=3, kwarg2=4, **kwargs):\n    print(arg1, arg2)\n    print(kwarg1, kwarg2)\n    print(kwargs)\n    return arg1 + arg2\n\nx = mp.Process(target=print_args, args=(1, 2),\n                                  kwargs={\"kwarg1\":5, \"kwargs100\":10})\nx.start()\n1 2\n5 4\n{'kwargs100': 100}\n\n\n\nPool\n\n\u7d50\u679c\u3092\u8fd4\u3057\u3066\u304f\u308c\u308b\nlambda\u304c\u30c0\u30e1\u3060\u3063\u305f\nmap\u306f\u5358\u4e00\u5f15\u6570\n\n\nstartmap\u306f\u8907\u6570\u53ef\u80fd\n\n\napply\u306fkeyword\u3092\u6e21\u305b\u308b\n\n\nasync\u7248\u304c\u3042\u308b\ncontext\u629c\u3051\u308b\u524d\u306b\u51e6\u7406\u3057\u306a\u3044\u3068\u30c0\u30e1\n\n\n\n\nmultiprocess_pool.py\ndef add(x, y): return x + y\nwith mp.Pool() as p:\n    results = p.starmap(add, [(1, 2), (3, 4)])\n    result = p.apply(print_args, args=(5, 6), kwds={\"kwarg1\":5, \"kwarg100\":100})\n    async_result = p.apply_async(print_args, args=(7, 8), kwds={\"kwarg1\":5, \"kwarg100\":100})\n    print(async_result.get(timeout=2))\n    # => 15\nprint(results)\n# => [3, 7]\nprint(result)\n# => 11\n\n\n\nother\n\nQueue/Pipe\n\n\nmessage passing\n\n\nLock\nSemaphore\n\n\u3082\u3063\u3068\u7c21\u5358\u306b\u4f7f\u3044\u305f\u3044\u5834\u5408\u3084\u975e\u540c\u671f\u51e6\u7406\u306f\u4e0b\u8a18\u3067\u3088\u3055\u305d\u3046\n\nconcurrent.futures\nasync/await\n\n\njoblib\n\nsklearn\u306eexternals\u3068\u3057\u3066\u5229\u7528\u3055\u308c\u3066\u3044\u308b\nQueue\u306f\u306a\u3044\u306e\u3067\u7f6e\u304d\u63db\u3048\u3089\u306a\u3055\u305d\u3046\n\n\nmultiprocessing\u3088\u308a\u826f\u3044\u70b9\u304c\u3042\u308b\nhttps://pythonhosted.org/joblib/parallel.html#bad-interaction-of-multiprocessing-and-third-party-libraries\n\n\n\u96d1\u306b\u6e2c\u5b9a\u3057\u3066\u307f\u305f\n\n\nexample_joblib.py\nimport joblib\nimport time\n\n%timeit joblib.Parallel(n_jobs=1)(joblib.delayed(time.sleep)(0.1) for i in range(100))\n1 loop, best of 3: 10.3 s per loop\n\n%timeit joblib.Parallel(n_jobs=-1)(joblib.delayed(time.sleep)(0.1) for i in range(100))\n1 loop, best of 3: 2.7 s per loop\n\n%timeit [time.sleep(0.1) for i in range(100)]\n1 loop, best of 3: 10.2 s per loop\n\njoblib.Parallel(n_jobs=-1)(\n    joblib.delayed(print_args)(i, 2, kwarg1=5, kwarg100=100)\n    for i in range(3))\n\n\n## multiprocess/thread\n- interface\u304c\u4f3c\u3066\u3044\u308b\n- thread\u306f\u898b\u305f\u3053\u3068\u304c\u306a\u3044\n\n```py3:multiprocess_thread.py\nimport multiprocessing as mp\nimport threading as th\nimport datetime\n\nn_loop = 10000 ** 2\nn_x = 8\n\n\ndef loop():\n    for _ in range(n_loop):\n        pass\n\n\ndef run(klass):\n    xs = []\n    for _ in range(n_x):\n        x = klass(target=loop)\n        x.start()\n        xs.append(x)\n\n    for x in xs:\n        x.join()\n\n\ndef main():\n    print(\"start\", datetime.datetime.now())\n    print(\"-\"*10)\n\n    run(mp.Process)\n    print(\"run end(mp)\", datetime.datetime.now())\n    print(\"-\"*10)\n\n    run(th.Thread)\n    print(\"run end(th)\", datetime.datetime.now())\n    print(\"-\"*10)\n\n    for _ in range(n_x):\n        loop()\n\n    print(\"loop end\", datetime.datetime.now())\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### arguments\n\u5f15\u6570\u306fiterator, keyword\u5f15\u6570\u306fdict\n\n```multiprocess_using_arguments.py\ndef print_args(arg1, arg2, kwarg1=3, kwarg2=4, **kwargs):\n    print(arg1, arg2)\n    print(kwarg1, kwarg2)\n    print(kwargs)\n    return arg1 + arg2\n\nx = mp.Process(target=print_args, args=(1, 2),\n                                  kwargs={\"kwarg1\":5, \"kwargs100\":10})\nx.start()\n1 2\n5 4\n{'kwargs100': 100}\n```\n\n### Pool\n- \u7d50\u679c\u3092\u8fd4\u3057\u3066\u304f\u308c\u308b\n- lambda\u304c\u30c0\u30e1\u3060\u3063\u305f\n- map\u306f\u5358\u4e00\u5f15\u6570\n    - startmap\u306f\u8907\u6570\u53ef\u80fd\n- apply\u306fkeyword\u3092\u6e21\u305b\u308b\n    - async\u7248\u304c\u3042\u308b\n    - context\u629c\u3051\u308b\u524d\u306b\u51e6\u7406\u3057\u306a\u3044\u3068\u30c0\u30e1\n\n```multiprocess_pool.py\ndef add(x, y): return x + y\nwith mp.Pool() as p:\n    results = p.starmap(add, [(1, 2), (3, 4)])\n    result = p.apply(print_args, args=(5, 6), kwds={\"kwarg1\":5, \"kwarg100\":100})\n    async_result = p.apply_async(print_args, args=(7, 8), kwds={\"kwarg1\":5, \"kwarg100\":100})\n    print(async_result.get(timeout=2))\n    # => 15\nprint(results)\n# => [3, 7]\nprint(result)\n# => 11\n```\n\n### other\n- Queue/Pipe\n    - message passing\n- Lock\n- Semaphore\n\n\u3082\u3063\u3068\u7c21\u5358\u306b\u4f7f\u3044\u305f\u3044\u5834\u5408\u3084\u975e\u540c\u671f\u51e6\u7406\u306f\u4e0b\u8a18\u3067\u3088\u3055\u305d\u3046\n\n- concurrent.futures\n- async/await\n\n## joblib\n- sklearn\u306eexternals\u3068\u3057\u3066\u5229\u7528\u3055\u308c\u3066\u3044\u308b\n- Queue\u306f\u306a\u3044\u306e\u3067\u7f6e\u304d\u63db\u3048\u3089\u306a\u3055\u305d\u3046\n    - multiprocessing\u3088\u308a\u826f\u3044\u70b9\u304c\u3042\u308b\n    - https://pythonhosted.org/joblib/parallel.html#bad-interaction-of-multiprocessing-and-third-party-libraries\n- \u96d1\u306b\u6e2c\u5b9a\u3057\u3066\u307f\u305f\n\n```example_joblib.py\nimport joblib\nimport time\n\n%timeit joblib.Parallel(n_jobs=1)(joblib.delayed(time.sleep)(0.1) for i in range(100))\n1 loop, best of 3: 10.3 s per loop\n\n%timeit joblib.Parallel(n_jobs=-1)(joblib.delayed(time.sleep)(0.1) for i in range(100))\n1 loop, best of 3: 2.7 s per loop\n\n%timeit [time.sleep(0.1) for i in range(100)]\n1 loop, best of 3: 10.2 s per loop\n\njoblib.Parallel(n_jobs=-1)(\n    joblib.delayed(print_args)(i, 2, kwarg1=5, kwarg100=100)\n    for i in range(3))\n```\n", "tags": ["memo"]}