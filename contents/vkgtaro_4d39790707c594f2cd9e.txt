{"context": " More than 1 year has passed since last update.\u3046\u3061\u306e\u4f1a\u793e\u306f Google Calrendar \u3092\u4f7f\u3063\u3066\u3066\u3001\u65e5\u5831\u306b\u542b\u3081\u308b\u300c\u4eca\u65e5\u3084\u3063\u305f\u3053\u3068\u300d\u7684\u306a\u3082\u306e\u306f calendar \u304b\u3089\u5f15\u3063\u5f35\u3063\u3066\u304f\u308c\u3070\u3044\u3044\u3088\u306d\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u66f8\u3044\u305f\u3002\nPyPI \u304b\u3089 gdata \u3068 dateutil \u3092 install \u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\ndaily.py\n# -*- coding: utf-8 -*-\n\nimport gdata.acl.data\nimport gdata.calendar.data\nimport gdata.calendar.service\nimport gdata.service\n\nfrom datetime import date, timedelta\nfrom dateutil import parser\nimport re\n\n\nclass DailyReport(object):\n    def __init__(self, email, password, name, when=0):\n        self._name     = name\n        self.set_date(when)\n        self._password = password\n        self._email    = email\n\n        self._calendar   = gdata.calendar.service.CalendarService()\n\n    def set_date(self, when=0):\n        today = date.today()\n        t = timedelta(days = when * -1)\n        d = today - t\n\n        # \u55b6\u696d\u65e5\u306a\u306e\u3067\u3001\u571f\u65e5\u3092\u5916\u3059\u3002\n        if d.weekday() >= 5:\n            t = timedelta(days = d.weekday() - 4)\n            self._date = d - t\n        else:\n            self._date = d\n\n    def login(self):\n        self._calendar.email = self._email\n        self._calendar.password = self._password\n        self._calendar.source = 'daily_report'\n        self._calendar.ssl = True\n        self._calendar.ProgrammaticLogin()\n\n    def get_schedule(self):\n        query = self.get_calendar_event_query()\n        feed = self._calendar.CalendarQuery(query)\n\n        schedule = []\n        for i, event in zip(xrange(len(feed.entry)), feed.entry):\n            row = {}\n            row['subject'] = event.title.text\n\n            if event.when and event.when[0].start_time:\n                row['start_time'] = parser.parse( event.when[0].start_time ).strftime('%H:%M')\n\n            if event.when and event.when[0].end_time:\n                row['end_time'] = parser.parse( event.when[0].end_time ).strftime('%H:%M')\n\n            schedule.append(row)\n\n        self._schedule = schedule\n        return schedule\n\n\n    def get_calendar_event_query(self):\n        query = gdata.calendar.service.CalendarEventQuery('default', 'private', 'full')\n        query.start_min = self._date.strftime('%Y-%m-%dT00:00:00')\n        query.start_max = self._date.strftime('%Y-%m-%dT23:59:59')\n        query.orderby   = 'starttime'\n        query.sortorder = 'ascending'\n        query.max_results = 200\n\n        return query\n\n    def report_with_template(self, template):\n        template = re.sub(\"__subject__\", self._date.strftime('%Y-%m-%d'), template)\n        template = re.sub(\"__name__\",    self._name, template)\n        template = re.sub(\"__contents__\", self.make_contents_from_schedule(), template)\n        return template\n\n\n    def make_contents_from_schedule(self):\n        contents = \"\"\n        for item in self._schedule:\n            contents += \"%s\u301c%s %s\\n\" % (item['start_time'], item['end_time'], item['subject'])\n\n        return contents\n\ntemplate = \"\"\"\n\u3010\u65e5\u5831\u3011__name__ __subject__\n\n\n\u25c6\u4eca\u6708\u306e\u76ee\u6a19\n\n\n\u25c6\u672c\u65e5\u306e\u696d\u52d9\n__contents__\n\n\n\u25c6\u660e\u65e5\u306e\u4e88\u5b9a\n\n\n\u25c6\u30b7\u30a7\u30a2\u30fb\u60c5\u5831\u306a\u3069\n\"\"\"\n\n\nif __name__ == \"__main__\":\n    dr = DailyReport(\"your email\", \"your password\", \"your name\", 0)\n    dr.login()\n    dr.get_calendar_event_query()\n    dr.get_schedule()\n    print dr.report_with_template(template)\n\n\nDailyReport \u306b\u6e21\u30594\u756a\u76ee\u306e\u5f15\u6570\u306f\u3001\u4eca\u65e5\u306a\u3089 0\u3001\u6628\u65e5\u306a\u3089 -1\u3002\n\u65e5\u5831\u3092\u7fcc\u65e5\u306b\u66f8\u304f\u3053\u3068\u3082\u3042\u308b\u304b\u3089\u306d\u3002\n\u3053\u308c\u306f raw_input \u3068\u304b\u3067\u53d6\u308c\u3070\u3044\u3044\u304b\u306a\u3041\u3002\n\u3061\u306a\u307f\u306b2\u6bb5\u968e\u8a8d\u8a3c\u3057\u3066\u308b\u5834\u5408\u306f\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u306b\u306f\u30a2\u30d7\u30ea\u7528\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u751f\u6210\u3057\u3066\u3042\u3052\u306a\u3044\u3068\u4f7f\u3048\u306a\u3044\u3067\u3059\u3002\nOAuth \u3068\u304b\u3067\u3084\u308c\u308b\u3068\u3044\u3044\u3093\u3060\u3051\u3069\u3001\u307e\u3041\u3044\u3044\u304b\u3002\n\n\u3046\u3061\u306e\u4f1a\u793e\u306f Google Calrendar \u3092\u4f7f\u3063\u3066\u3066\u3001\u65e5\u5831\u306b\u542b\u3081\u308b\u300c\u4eca\u65e5\u3084\u3063\u305f\u3053\u3068\u300d\u7684\u306a\u3082\u306e\u306f calendar \u304b\u3089\u5f15\u3063\u5f35\u3063\u3066\u304f\u308c\u3070\u3044\u3044\u3088\u306d\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u66f8\u3044\u305f\u3002\n\nPyPI \u304b\u3089 gdata \u3068 dateutil \u3092 install \u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n```python:daily.py\n# -*- coding: utf-8 -*-\n\nimport gdata.acl.data\nimport gdata.calendar.data\nimport gdata.calendar.service\nimport gdata.service\n\nfrom datetime import date, timedelta\nfrom dateutil import parser\nimport re\n\n\nclass DailyReport(object):\n    def __init__(self, email, password, name, when=0):\n        self._name     = name\n        self.set_date(when)\n        self._password = password\n        self._email    = email\n\n        self._calendar   = gdata.calendar.service.CalendarService()\n\n    def set_date(self, when=0):\n        today = date.today()\n        t = timedelta(days = when * -1)\n        d = today - t\n\n        # \u55b6\u696d\u65e5\u306a\u306e\u3067\u3001\u571f\u65e5\u3092\u5916\u3059\u3002\n        if d.weekday() >= 5:\n            t = timedelta(days = d.weekday() - 4)\n            self._date = d - t\n        else:\n            self._date = d\n\n    def login(self):\n        self._calendar.email = self._email\n        self._calendar.password = self._password\n        self._calendar.source = 'daily_report'\n        self._calendar.ssl = True\n        self._calendar.ProgrammaticLogin()\n\n    def get_schedule(self):\n        query = self.get_calendar_event_query()\n        feed = self._calendar.CalendarQuery(query)\n\n        schedule = []\n        for i, event in zip(xrange(len(feed.entry)), feed.entry):\n            row = {}\n            row['subject'] = event.title.text\n\n            if event.when and event.when[0].start_time:\n                row['start_time'] = parser.parse( event.when[0].start_time ).strftime('%H:%M')\n\n            if event.when and event.when[0].end_time:\n                row['end_time'] = parser.parse( event.when[0].end_time ).strftime('%H:%M')\n\n            schedule.append(row)\n\n        self._schedule = schedule\n        return schedule\n\n\n    def get_calendar_event_query(self):\n        query = gdata.calendar.service.CalendarEventQuery('default', 'private', 'full')\n        query.start_min = self._date.strftime('%Y-%m-%dT00:00:00')\n        query.start_max = self._date.strftime('%Y-%m-%dT23:59:59')\n        query.orderby   = 'starttime'\n        query.sortorder = 'ascending'\n        query.max_results = 200\n\n        return query\n\n    def report_with_template(self, template):\n        template = re.sub(\"__subject__\", self._date.strftime('%Y-%m-%d'), template)\n        template = re.sub(\"__name__\",    self._name, template)\n        template = re.sub(\"__contents__\", self.make_contents_from_schedule(), template)\n        return template\n\n\n    def make_contents_from_schedule(self):\n        contents = \"\"\n        for item in self._schedule:\n            contents += \"%s\u301c%s %s\\n\" % (item['start_time'], item['end_time'], item['subject'])\n\n        return contents\n\ntemplate = \"\"\"\n\u3010\u65e5\u5831\u3011__name__ __subject__\n\n\n\u25c6\u4eca\u6708\u306e\u76ee\u6a19\n\n\n\u25c6\u672c\u65e5\u306e\u696d\u52d9\n__contents__\n\n\n\u25c6\u660e\u65e5\u306e\u4e88\u5b9a\n\n\n\u25c6\u30b7\u30a7\u30a2\u30fb\u60c5\u5831\u306a\u3069\n\"\"\"\n\n\nif __name__ == \"__main__\":\n    dr = DailyReport(\"your email\", \"your password\", \"your name\", 0)\n    dr.login()\n    dr.get_calendar_event_query()\n    dr.get_schedule()\n    print dr.report_with_template(template)\n```\n\nDailyReport \u306b\u6e21\u30594\u756a\u76ee\u306e\u5f15\u6570\u306f\u3001\u4eca\u65e5\u306a\u3089 0\u3001\u6628\u65e5\u306a\u3089 -1\u3002\n\u65e5\u5831\u3092\u7fcc\u65e5\u306b\u66f8\u304f\u3053\u3068\u3082\u3042\u308b\u304b\u3089\u306d\u3002\n\u3053\u308c\u306f raw_input \u3068\u304b\u3067\u53d6\u308c\u3070\u3044\u3044\u304b\u306a\u3041\u3002\n\n\u3061\u306a\u307f\u306b2\u6bb5\u968e\u8a8d\u8a3c\u3057\u3066\u308b\u5834\u5408\u306f\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u306b\u306f\u30a2\u30d7\u30ea\u7528\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u751f\u6210\u3057\u3066\u3042\u3052\u306a\u3044\u3068\u4f7f\u3048\u306a\u3044\u3067\u3059\u3002\nOAuth \u3068\u304b\u3067\u3084\u308c\u308b\u3068\u3044\u3044\u3093\u3060\u3051\u3069\u3001\u307e\u3041\u3044\u3044\u304b\u3002\n\n\n", "tags": ["calendar", "google", "datetime", "Python"]}