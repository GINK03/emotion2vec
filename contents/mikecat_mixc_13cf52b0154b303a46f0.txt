{"context": " More than 1 year has passed since last update.\n\nBison\u3068\u306f\nBison\u306f\u3001\u6587\u8108\u81ea\u7531\u6587\u6cd5\u3092\u5165\u529b\u3068\u3057\u3066\u81ea\u52d5\u3067\u30d1\u30fc\u30b5\u3092\u4f5c\u3063\u3066\u304f\u308c\u308b\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3067\u3042\u308b\u3002\n\u305d\u308c\u305e\u308c\u306e\u898f\u5247\u3092\u51e6\u7406\u3057\u305f\u5f8c\u306b\u5b9f\u884c\u3059\u308b\u51e6\u7406\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\nBison - GNU Project - Free Software Foundation\nBison - Wikipedia\n\n\nBison\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\nWindows\nBison for Windows\n\u304b\u3089\u3001Complete package, except sources\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3002\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u3092\u4f7f\u3044\u305f\u304f\u306a\u3044\u5834\u5408\u306f\u3001Binaries\u3068Dependencies\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3001\u9069\u5f53\u306a\u540c\u3058\u30d5\u30a9\u30eb\u30c0\u306b\u89e3\u51cd(\u4e2d\u8eab\u306e\u30d5\u30a9\u30eb\u30c0\u3092\u7d71\u5408)\u3057\u3066\u3082\u3088\u3044\u3002\n\nLinux\nBison - GNU Project - Free Software Foundation\n\u306eDownloading Bison\u306e\u6240\u306e\u30ea\u30f3\u30af\u304b\u3089\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u89e3\u51cd\u3057\u3001\u89e3\u51cd\u3057\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea(configure\u306a\u3069\u304c\u3042\u308b)\u3067\n$ ./configure\n$ make\n$ make install\n\n\u3068\u3044\u3046\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3002\u305f\u3060\u3057\u3001$\u306f\u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u8868\u3057\u3001\u30b3\u30de\u30f3\u30c9\u306b\u306f\u542b\u307e\u308c\u306a\u3044\u3002\n./configure\u306b\u304a\u3044\u3066\u306f\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u306a\u3069\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3059\u308b\u3068\u3088\u3044\u3002\n\n\u7c21\u5358\u306a\u30b5\u30f3\u30d7\u30eb(\u52d5\u4f5c\u78ba\u8a8d)\n\ntest.y\n%{\n/* \u3053\u3053\u306bC\u8a00\u8a9e\u306e\u300c\u30d8\u30c3\u30c0\u300d\u3092\u66f8\u304f */\n\n#include <stdio.h>\n\nint yylex(void);\nvoid yyerror(const char *);\n\n%}\n\n%%\n/* \u3053\u3053\u306b\u6587\u6cd5\u3092\u66f8\u304f */\n\nlang\n    : /* \u7a7a */\n    | 'a' lang 'b'\n    ;\n\n%%\n/* \u3053\u3053\u306bC\u8a00\u8a9e\u306e\u300c\u30d5\u30c3\u30bf\u300d\u3092\u66f8\u304f */\n\n/* \u6b21\u306e\u300c\u6587\u5b57\u300d\u3092\u30b9\u30c8\u30ea\u30fc\u30e0\u304b\u3089\u8aad\u307f\u53d6\u3063\u3066\u8fd4\u3059 */\nint yylex(void) {\n    int input;\n    do {\n        input = getchar();\n    } while (input == '\\n'); /* \u6539\u884c\u306f\u7121\u8996\u3059\u308b */\n    if (input == EOF) return 0; /* \u7d42\u4e86\u3092\u8868\u3059 */\n    return input;\n}\n\n/* \u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u51fa\u529b\u3059\u308b */\nvoid yyerror(const char *m) {\n    fprintf(stderr, \"%s\\n\", m);\n}\n\nint main(void) {\n    if (yyparse() == 0) {\n        puts(\"YES\");\n    } else {\n        puts(\"NO\");\n    }\n    return 0;\n}\n\n\n\u3053\u308c\u3092bison -d -v test.y\u3068\u3044\u3046\u30b3\u30de\u30f3\u30c9\u3067Bison\u3067\u51e6\u7406\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u3067\u304d\u308b\u3002\n\n\ntest.tab.c : \u751f\u6210\u3055\u308c\u305f\u30d1\u30fc\u30b5\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\ntest.tab.h : \u751f\u6210\u3055\u308c\u305f\u30d1\u30fc\u30b5\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\ntest.output : \u751f\u6210\u3055\u308c\u305f\u30d1\u30fc\u30b5\u306e\u52d5\u4f5c\u304c\u8a18\u8ff0\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb(\u53c2\u8003)\n\n\u3053\u306etest.tab.c\u3092gcc\u306a\u3069\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3001\u5b9f\u884c\u3059\u308b\u3068\u3001\u30d1\u30fc\u30b5\u304c\u52d5\u4f5c\u3059\u308b\u3002\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u5165\u529b\u304b\u3089\u6539\u884c\u3092\u53d6\u308a\u9664\u3044\u305f\u6587\u5b57\u5217\u304c\u300ca\u304c0\u500b\u4ee5\u4e0a\u7d9a\u3044\u305f\u5f8c\u3001b\u304c\u3061\u3087\u3046\u3069\u540c\u3058\u6570\u7d9a\u304f\u300d\u3068\u3044\u3046\u6587\u5b57\u5217\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u3092\u5224\u5b9a\u3057\u3001\n\u306a\u3063\u3066\u3044\u308b\u306a\u3089YES\u3001\u306a\u3063\u3066\u3044\u306a\u3044\u306a\u3089NO\u3068\u51fa\u529b\u3059\u308b\u3002\n\n\u6587\u6cd5\u306e\u66f8\u304d\u65b9\nBison\u3067\u7528\u3044\u308b\u6587\u6cd5\u306f\u3001\u975e\u7d42\u7aef\u8a18\u53f7\u540d: \u8a18\u53f7\u5217 [{\u30a2\u30af\u30b7\u30e7\u30f3}] [| \u8a18\u53f7\u5217 [{\u30a2\u30af\u30b7\u30e7\u30f3}] ...] ; \u306e\u3088\u3046\u306a\u5f62\u3067\u66f8\u304f\u3002\n\u8a18\u53f7\u5217\u306f\u3001\u975e\u7d42\u7aef\u8a18\u53f7\u3084\u6587\u5b57(\u7d42\u7aef\u8a18\u53f7)\u306e0\u500b\u4ee5\u4e0a\u306e\u5217\u3067\u3042\u308b\u3002\n\u30a2\u30af\u30b7\u30e7\u30f3\u306f\u3001\u305d\u306e\u8a18\u53f7\u5217\u3092\u8aad\u307f\u8fbc\u307f\u3001\u305d\u306e\u975e\u7d42\u7aef\u8a18\u53f7\u3068\u3057\u3066\u89e3\u91c8\u3059\u308b\u3068\u304d\u306b\u5b9f\u884c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3042\u308b\u3002\n\u5177\u4f53\u7684\u306b\u306f\u3001\nhoge\n    : hoge fuga\n    | 'a'\n    ;\n\nfuga\n    : 'b'\n      { puts(\"fuga b\"); }\n    | 'c'\n    ;\n\n\u306e\u3088\u3046\u306a\u611f\u3058\u306b\u306a\u308b\u3002\u3053\u306e\u6587\u6cd5\u306f\u3001\n\n\nhoge\u306f\u3001hoge\u306e\u5f8c\u306bfuga\u3092\u3064\u306a\u3052\u305f\u3082\u306e\u304b\u3001\u6587\u5b57'a'\n\n\nfuga\u306f\u3001\u6587\u5b57'b'\u304b\u3001\u6587\u5b57'c'\n\n\n\u3068\u3044\u3046\u610f\u5473\u3067\u3042\u308b\u3002\u307e\u305f\u3001fuga\u306e'b'\u306b\u5bfe\u3057\u3066\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u304a\u308a\u3001\u3053\u308c\u306b\u3088\u308a\u6587\u5b57'b'\u304c\u8aad\u307f\u8fbc\u307e\u308c\u3001fuga\u3068\u3057\u3066\u89e3\u91c8\u3055\u308c\u308b\u3068\u304d\u306bfuga b\u304c\u51fa\u529b\u3055\u308c\u308b\u3002(puts\u304c\u30de\u30af\u30ed\u5b9a\u7fa9\u306a\u3069\u306e\u5f71\u97ff\u3092\u53d7\u3051\u305a\u3001C\u8a00\u8a9e\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u95a2\u6570\u3068\u3057\u3066\u89e3\u91c8\u3055\u308c\u308b\u5834\u5408)\n\u5165\u529b\u5168\u4f53\u3092\u8868\u3059\u975e\u7d42\u7aef\u8a18\u53f7\u306fBison\u306e%start\u3092\u7528\u3044\u3066\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u306f\u6700\u521d\u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u975e\u7d42\u7aef\u8a18\u53f7\u3068\u306a\u308b\u3002\n\u307e\u305f\u3001\u30a2\u30af\u30b7\u30e7\u30f3\u4e2d\u306b\u304a\u3044\u3066\u3001\u3053\u306e\u975e\u7d42\u7aef\u8a18\u53f7\u306e\u300c\u610f\u5473\u300d\u306f$$\u3068\u8868\u3055\u308c\u3001\u3053\u306e\u975e\u7d42\u7aef\u8a18\u53f7\u3067\u8868\u3055\u308c\u308b\u8a18\u53f7\u5217\u306e\u5404\u8981\u7d20\u306e\u300c\u610f\u5473\u300d\u306f\u524d\u304b\u3089\u9806\u306b$1, $2, ...\u3068\u8868\u308f\u3055\u308c\u308b\u306e\u3067\u3001\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u7528\u3044\u3066\u5404\u8981\u7d20\u306e\u300c\u610f\u5473\u300d\u304b\u3089\u3053\u306e\u975e\u7d42\u7aef\u8a18\u53f7\u306e\u300c\u610f\u5473\u300d\u3092\u6c42\u3081\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\nBrainf*ck\u30b3\u30f3\u30d1\u30a4\u30e9\n\u4ee5\u4e0b\u306bBison\u3092\u7528\u3044\u305fBrainf*ck\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u793a\u3059\u3002\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u5404\u30b3\u30de\u30f3\u30c9\u3092\u8868\u3059\u6587\u5b57\u306b\u5bfe\u3057\u5358\u7d14\u306b\u5909\u63db\u7d50\u679c\u3092\u5bfe\u5fdc\u3055\u305b\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u306e\u7d50\u679c\u306f\u5165\u529b\u30d7\u30ed\u30b0\u30e9\u30e0\u5168\u4f53\u306e\u5909\u63db\u7d50\u679c\u3092\u9023\u7d50\u3057\u305f\u3082\u306e\u306e\u524d\u5f8c\u306b\u521d\u671f\u5316\u3001\u7d42\u4e86\u3001\u5165\u51fa\u529b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u9023\u7d50\u3057\u305f\u3082\u306e\u3068\u306a\u308b\u3002\n\u30bf\u30fc\u30b2\u30c3\u30c8\u306f32\u30d3\u30c3\u30c8\u306ex86 Linux\u3067\u3042\u308b\u304c\u3001\u5404\u30b3\u30de\u30f3\u30c9\u306b\u5bfe\u5fdc\u3059\u308b\u5909\u63db\u7d50\u679c\u3084\u524d\u5f8c\u306b\u3064\u3051\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5909\u3048\u308b\u3053\u3068\u3067\u4ed6\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u3082\u5bfe\u5fdc\u3067\u304d\u308b\u306f\u305a\u3067\u3042\u308b\u3002\n\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u304b\u3089\u5f15\u6570\u30921\u500b\u6307\u5b9a\u3059\u308b\u3068\u3001\u305d\u308c\u3092\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u3057\u3066\u89e3\u91c8\u3057\u3001\u305d\u306e\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u5165\u529b\u3092\u8aad\u307f\u8fbc\u3082\u3046\u3068\u3059\u308b\u3002\n\u5f15\u6570\u304c\u7121\u3044\u5834\u5408\u306f\u3001\u6a19\u6e96\u5165\u529b\u304b\u3089\u5165\u529b\u3092\u8aad\u307f\u8fbc\u3080\u3002\n\u30b3\u30f3\u30d1\u30a4\u30eb\u7d50\u679c\u306f\u6a19\u6e96\u51fa\u529b\u306b\u51fa\u529b\u3055\u308c\u308b\u3002\n\nbf.y\n%{\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint yylex(void);\nvoid yyerror(const char *s);\n\n#define YYSTYPE char*\n\n/* \u5206\u5c90\u306b\u4f7f\u7528\u3059\u308b\u30e9\u30d9\u30eb\u306e\u901a\u3057\u756a\u53f7 */\nint label_id;\n/* \u6587\u5b57\u5217\u3092\u6e21\u3059\u3068\u3001\u305d\u308c\u3092malloc\u3067\u683c\u7d0d\u3057\u305f\u5834\u6240\u306b\u30b3\u30d4\u30fc\u3057\u3066\u8fd4\u3059 */\nchar *allocate_string(const char *str);\n/* 2\u500b\u306e\u6587\u5b57\u5217\u3092\u9023\u7d50\u3057\u305f\u6587\u5b57\u5217\u3092\u8fd4\u3057\u3001\u5143\u306e\u6587\u5b57\u5217\u306f\u958b\u653e\u3059\u308b */\nchar *concat_and_free(char *s1, char *s2);\n\n%}\n\n/* syntax error\u3060\u3051\u3067\u306a\u304f\u3001\u3088\u308a\u8a73\u3057\u3044\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u5410\u304b\u305b\u308b */\n/* bison 3\u7528 */\n/* %define parse.error verbose */\n/* bison 2.4.1\u7528 */\n%error-verbose\n\n/* \u69cb\u6587\u89e3\u6790\u4e2d\u306e\u5834\u6240\u306e\u8ffd\u8de1\u3092\u6709\u52b9\u306b\u3059\u308b */\n%locations\n\n/* \u69cb\u6587\u89e3\u6790\u524d\u306b\u5b9f\u884c\u3059\u308b\u51e6\u7406\u3092\u8a18\u8ff0\u3059\u308b */\n%initial-action {\n    /* \u30e9\u30d9\u30eb\u756a\u53f7\u3092\u521d\u671f\u5316\u3059\u308b */\n    label_id = 0;\n    /* \u89e3\u6790\u4e2d\u306e\u4f4d\u7f6e\u3092\u521d\u671f\u5316\u3059\u308b */\n    yylloc.last_line = yylloc.first_line = 1;\n    /* \u6587\u5b57\u3092\u8aad\u307f\u8fbc\u3093\u3060\u6642\u306b\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u306e\u3067\u3001\u5217\u756a\u53f7\u306f0\u306b\u521d\u671f\u5316\u3059\u308b */\n    yylloc.last_column = yylloc.first_column = 0;\n}\n\n/* \u89e3\u6790\u3092\u958b\u59cb\u3059\u308b\u975e\u7d42\u7aef\u8a18\u53f7\u3092\u6307\u5b9a\u3059\u308b */\n%start program\n\n%%\n\n/* \u30d7\u30ed\u30b0\u30e9\u30e0\u5168\u4f53 */\nprogram\n    : command_list\n        {\n            /* \u30b3\u30de\u30f3\u30c9\u5217\u306e\u524d\u306b\u51fa\u529b\u3059\u308b\u30c7\u30fc\u30bf */\n            char *prorogue = allocate_string(\n                \"\\t.text\\n\"\n                \"\\t.globl main\\n\"\n                \"main:\\n\"\n                \"\\txorl %esi, %esi\\n\"\n            );\n            /* \u30b3\u30de\u30f3\u30c9\u5217\u306e\u5f8c\u308d\u306b\u51fa\u529b\u3059\u308b\u30c7\u30fc\u30bf */\n            char *epilogue = allocate_string(\n                \"\\tmovl $1, %eax\\n\"\n                \"\\tmovl $0, %ebx\\n\"\n                \"\\tint $0x80\\n\"\n                \"\\tret\\n\"\n                \"\\n\"\n                \"read_byte:\\n\"\n                \"\\tpushl $0\\n\"\n                \"\\tmovl $3, %eax\\n\"\n                \"\\tmovl $0, %ebx\\n\"\n                \"\\tmovl %esp, %ecx\\n\"\n                \"\\tmovl $1, %edx\\n\"\n                \"\\tint $0x80\\n\"\n                \"\\tpop %eax\\n\"\n                \"\\tmovb %al, memory(%esi)\\n\"\n                \"\\tret\\n\"\n                \"\\n\"\n                \"write_byte:\\n\"\n                \"\\tmovb memory(%esi), %al\\n\"\n                \"\\tpushl %eax\\n\"\n                \"\\tmovl $4, %eax\\n\"\n                \"\\tmovl $1, %ebx\\n\"\n                \"\\tmovl %esp, %ecx\\n\"\n                \"\\tmovl $1, %edx\\n\"\n                \"\\tint $0x80\\n\"\n                \"\\tpop %eax\\n\"\n                \"\\tret\\n\"\n                \"\\n\"\n                \"\\t.lcomm memory, 65536\\n\"\n            );\n            char *result = concat_and_free(prorogue, concat_and_free($1, epilogue));\n            /* \u30b3\u30f3\u30d1\u30a4\u30eb\u7d50\u679c\u3092\u51fa\u529b\u3059\u308b */\n            fputs(result, stdout);\n            free(result);\n            $$ = NULL;\n        }\n    ;\n\n/* \u30b3\u30de\u30f3\u30c9\u304c0\u500b\u4ee5\u4e0a\u7e4b\u304c\u3063\u305f\u3082\u306e */\ncommand_list\n    : /* \u7a7a */\n        {\n            $$ = allocate_string(\"\");\n        }\n    | command_list command\n        {\n            $$ = concat_and_free($1, $2);\n        }\n    ;\n\n/* \u5404\u30b3\u30de\u30f3\u30c9 */\ncommand\n    : '+'\n        {\n            $$ = allocate_string(\"\\tincb memory(%esi)\\n\");\n        }\n    | '-'\n        {\n            $$ = allocate_string(\"\\tdecb memory(%esi)\\n\");\n        }\n    | '>'\n        {\n            $$ = allocate_string(\"\\tincw %si\\n\");\n        }\n    | '<'\n        {\n            $$ = allocate_string(\"\\tdecw %si\\n\");\n        }\n    | ','\n        {\n            $$ = allocate_string(\"\\tcall read_byte\\n\");\n        }\n    | '.'\n        {\n            $$ = allocate_string(\"\\tcall write_byte\\n\");\n        }\n    | '[' command_list ']'\n        {\n            char buffer[256], *prorogue, *epilogue;\n            int start_label = label_id++;\n            int end_label = label_id++;\n            sprintf(buffer,\n                \"\\tcmpb $0, memory(%%esi)\\n\"\n                \"\\tjnz L%d\\n\"\n                \"\\tjmp L%d\\n\"\n                \"L%d:\\n\", start_label, end_label, start_label);\n            prorogue = allocate_string(buffer);\n            sprintf(buffer,\n                \"\\tcmpb $0, memory(%%esi)\\n\"\n                \"\\tjz L%d\\n\"\n                \"\\tjmp L%d\\n\"\n                \"L%d:\\n\", end_label, start_label, end_label);\n            epilogue = allocate_string(buffer);\n            $$ = concat_and_free(concat_and_free(prorogue, $2), epilogue);\n        }\n    ;\n\n%%\n\nFILE *infp;\n\nint yylex(void) {\n    static char commands[] = \"+-><[],.\";\n    for(;;) {\n        /* \u6587\u5b57\u306e\u8aad\u307f\u8fbc\u307f */\n        int input = getc(infp);\n        if (input == EOF) {\n            /* \u5165\u529b\u7d42\u4e86\u6642\u306b\u306f0\u3092\u8fd4\u3059 */\n            return 0;\n        }\n        /* \u4f4d\u7f6e\u306e\u66f4\u65b0 */\n        if (input == '\\n') {\n            /* \u6b21\u306e\u884c\u306b\u884c\u304f */\n            yylloc.last_line = ++yylloc.first_line;\n            yylloc.last_column = yylloc.first_column = 0;\n        } else {\n            /* \u6b21\u306e\u6587\u5b57\u306b\u884c\u304f */\n            yylloc.last_column = ++yylloc.first_column;\n        }\n        /* \u30b3\u30de\u30f3\u30c9\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a */\n        if (strchr(commands, input) != NULL) {\n            /* \u6709\u52b9\u306a\u30b3\u30de\u30f3\u30c9\u306a\u3089\u69cb\u6587\u89e3\u6790\u5668\u306b\u6e21\u3059 */\n            yylval = NULL;\n            return input;\n        } else {\n            /* \u305d\u306e\u4ed6\u306e\u6587\u5b57(\u30b3\u30e1\u30f3\u30c8)\u306f\u6368\u3066\u308b */\n        }\n    }\n}\n\nvoid yyerror(const char *s) {\n    fprintf(stderr, \"%s at line %d, column %d\\n\", s, yylloc.first_line, yylloc.first_column);\n}\n\n/* \u30d0\u30c3\u30d5\u30a1\u3092\u78ba\u4fdd\u3057\u3001\u305d\u3053\u306b\u5f15\u6570\u3067\u4e0e\u3048\u3089\u308c\u305f\u6587\u5b57\u5217\u3092\u30b3\u30d4\u30fc\u3057\u3066\u8fd4\u3059 */\nchar *allocate_string(const char *str) {\n    char *buffer = malloc(sizeof(char) * (strlen(str) + 1));\n    if (buffer == NULL) {\n        yyerror(\"malloc failed\");\n        exit(1);\n    }\n    strcpy(buffer, str);\n    return buffer;\n}\n\n/* \u30d0\u30c3\u30d5\u30a1\u3092\u78ba\u4fdd\u3057\u3001str1\u3068str2\u3092\u9023\u7d50\u3057\u305f\u6587\u5b57\u5217\u3092\u305d\u3053\u306b\u30b3\u30d4\u30fc\u3057\u3066\u8fd4\u3059\u3002\n * str1\u3068str2\u304c\u6307\u3059\u9818\u57df\u306f\u958b\u653e\u3055\u308c\u308b\u3002 */\nchar *concat_and_free(char *str1, char *str2) {\n    size_t len1 = strlen(str1);\n    size_t len2 = strlen(str2);\n    char *buffer = malloc(sizeof(char) * (len1 + len2 + 1));\n    if (buffer == NULL) {\n        yyerror(\"malloc failed\");\n        exit(1);\n    }\n    strcpy(buffer, str1);\n    strcpy(buffer + len1, str2);\n    free(str1);\n    free(str2);\n    return buffer;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) {\n        infp = stdin;\n    } else {\n        infp = fopen(argv[1], \"r\");\n        if (infp == NULL) {\n            fputs(\"input file open failed\\n\", stderr);\n            return 1;\n        }\n    }\n    yyparse();\n    if (argc >= 2) fclose(infp);\n    return 0;\n}\n\n\n\nBrainf*ck\u6d3e\u751f\u8a00\u8a9e\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u4f5c\u308b\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5229\u7528\u3057\u3066\u3001\u5404\u30b3\u30de\u30f3\u30c9\u3092\u5358\u7d14\u306b\u5225\u306e\u6587\u5b57\u5217\u3067\u7f6e\u304d\u63db\u3048\u305fBrainf*ck\u6d3e\u751f\u8a00\u8a9e\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u4f5c\u308b\u3053\u3068\u3092\u8003\u3048\u308b\u3002\n\u5358\u7d14\u306b\u8003\u3048\u308b\u3068\u3001yylex()\u95a2\u6570\u3067\u5165\u529b\u3055\u308c\u305f\u30b3\u30de\u30f3\u30c9\u3092\u305d\u306e\u307e\u307e\u69cb\u6587\u89e3\u6790\u5668\u306b\u6e21\u3057\u3066\u3044\u308b\u304c\u3001\n\u3053\u3053\u3092\u30b3\u30de\u30f3\u30c9\u3068\u3057\u3066\u7528\u3044\u308b\u6587\u5b57\u5217\u3092\u8aad\u307f\u8fbc\u3093\u3060\u3089\u305d\u306e\u30b3\u30de\u30f3\u30c9\u3092\u69cb\u6587\u89e3\u6790\u5668\u306b\u6e21\u3059\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3059\u308b\u3068\u3088\u3044\u3002\n\u4ed6\u306e\u90e8\u5206\u306f\u5171\u901a\u306a\u306e\u3067\u3001yylex()\u95a2\u6570\u304a\u3088\u3073\u8907\u6570\u6587\u5b57\u304b\u3089\u306a\u308b\u30b3\u30de\u30f3\u30c9\u306b\u5bfe\u5fdc\u3057\u305fyyerror()\u95a2\u6570\u306e\u307f\u3092\u8f09\u305b\u308b\u3002\n\nbf2.y\nint yylex(void) {\n    static char commands[] = \"+-><[],.\";\n    static const char *command_str[8] = {\n        \"\u963f\u6f84\u4f73\u5948\",\n        \"\u6c34\u6a4b\u304b\u304a\u308a\",\n        \"\u559c\u591a\u6751\u82f1\u68a8\",\n        \"\u4e95\u53e3\u88d5\u9999\",\n        \"\u7530\u6751\u3086\u304b\u308a\",\n        \"\u5800\u6c5f\u7531\u8863\",\n        \"\u4f50\u85e4\u5229\u5948\",\n        \"\u82b1\u6fa4\u9999\u83dc\"\n    };\n    int command_pos[8];\n    int i, j;\n    int loc_log[64][2];\n    int loc_log_head = 0;\n    int loc_log_max = sizeof(loc_log) / sizeof(loc_log[0]);\n    for (i = 0; i < 8; i++) command_pos[i] = 0;\n    for(;;) {\n        /* \u6587\u5b57\u306e\u8aad\u307f\u8fbc\u307f */\n        int input = getc(infp);\n        if (input == EOF) {\n            /* \u5165\u529b\u7d42\u4e86\u6642\u306b\u306f0\u3092\u8fd4\u3059 */\n            return 0;\n        }\n        /* \u4f4d\u7f6e\u306e\u66f4\u65b0 */\n        if (input == '\\n') {\n            /* \u6b21\u306e\u884c\u306b\u884c\u304f */\n            yylloc.last_line++;\n            yylloc.last_column = 0;\n        } else {\n            /* \u6b21\u306e\u6587\u5b57\u306b\u884c\u304f */\n            yylloc.last_column++;\n        }\n        loc_log[loc_log_head][0] = yylloc.last_line;\n        loc_log[loc_log_head][1] = yylloc.last_column;\n        loc_log_head = (loc_log_head + 1) % loc_log_max;\n        /* \u30b3\u30de\u30f3\u30c9\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a */\n        for (i = 0; i < 8; i++) {\n            if ((unsigned char)command_str[i][command_pos[i]] == input) {\n                command_pos[i]++;\n                if (command_str[i][command_pos[i]] == '\\0') {\n                    int loc_index;\n                    /* \u6709\u52b9\u306a\u30b3\u30de\u30f3\u30c9\u3092\u8aad\u307f\u8fbc\u3093\u3060 */\n                    /* \u30c8\u30fc\u30af\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u3092\u8a2d\u5b9a\u3059\u308b */\n                    loc_index = loc_log_head - command_pos[i];\n                    while (loc_index < 0) loc_index += loc_log_max;\n                    yylloc.first_line = loc_log[loc_index][0];\n                    yylloc.first_column = loc_log[loc_index][1];\n                    /* \u5404\u30b3\u30de\u30f3\u30c9\u306e\u5224\u5b9a\u72b6\u614b\u3092\u30ea\u30bb\u30c3\u30c8\u3059\u308b */\n                    for (j = 0; j < 8; j++) command_pos[j] = 0;\n                    /* \u69cb\u6587\u89e3\u6790\u5668\u306b\u6e21\u3059 */\n                    yylval = NULL;\n                    return commands[i];\n                }\n            } else if (command_pos[i] > 0) {\n                /* \u3053\u306e\u30b3\u30de\u30f3\u30c9\u306f\u5b9f\u306fj\u6587\u5b57\u5f8c\u304b\u3089\u59cb\u307e\u3063\u3066\u3044\u305f\u304b\u3082\u3057\u308c\u306a\u3044 */\n                for (j = 1; j <= command_pos[i]; j++) {\n                    /* \u307e\u305a\u8aad\u307f\u8fbc\u3093\u3060\u6587\u5b57\u304c\u77db\u76fe\u3057\u306a\u3044\u304b\u3092\u5224\u5b9a\u3059\u308b */\n                    if ((unsigned char)command_str[i][command_pos[i] - j]  == input) {\n                        int ok = 1;\n                        int k;\n                        /* \u4eca\u306e\u72b6\u614b\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3067\u304d\u305f\u6587\u5b57\u304c\u308f\u304b\u308b\u306e\u3067\u3001\u77db\u76fe\u3057\u306a\u3044\u304b\u3092\u5224\u5b9a\u3059\u308b */\n                        for (k = 1; command_pos[i] - j - k >= 0; k++) {\n                            if (command_str[i][command_pos[i] - j - k] != command_str[i][command_pos[i] - k]) {\n                                ok = 0;\n                                break;\n                            }\n                        }\n                        if (ok) break;\n                    }\n                }\n                command_pos[i] = command_pos[i] - j + 1;\n            }\n        }\n    }\n}\n\nvoid yyerror(const char *s) {\n    fprintf(stderr, \"%s at %d:%d-%d:%d\\n\", s,\n        yylloc.first_line, yylloc.first_column,\n        yylloc.last_line, yylloc.last_column);\n}\n\n\n\u5404\u30b3\u30de\u30f3\u30c9\u3092command_pos\u306b\u683c\u7d0d\u3057\u3066\u304a\u304f\u3053\u3068\u3067\u3001\u3053\u3053\u3092\u5909\u3048\u308b\u3060\u3051\u3067\u69d8\u3005\u306a\u30b3\u30de\u30f3\u30c9\u306b\u5bfe\u5fdc\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\n\u305d\u3057\u3066\u3001\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u5217\u304c\u305d\u308c\u305e\u308c\u306e\u30b3\u30de\u30f3\u30c9\u306b\u306a\u3063\u305f\u304b\u3069\u3046\u304b\u3092\u5e73\u884c\u3067\u5224\u5b9a\u3057\u3066\u3044\u308b\u3002\n\u3053\u3053\u3067\u3001\u300c\u4e00\u81f4\u3057\u306a\u304b\u3063\u305f\u3089\u5358\u7d14\u306b\u5404\u30b3\u30de\u30f3\u30c9\u306e\u5148\u982d\u306b\u623b\u308b\u300d\u3068\u3044\u3046\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3057\u3066\u3057\u307e\u3046\u3068\u3001\n\u4f8b\u3048\u3070ab\u3092\u63a2\u3057\u305f\u3044\u6642\u306baab\u3068\u3044\u3046\u5165\u529b\u304c\u6765\u308b\u3068\u30012\u500b\u76ee\u306ea\u3067\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u3001\u6b21\u306eb\u3068\u63a2\u3057\u305f\u3044\u6587\u5b57\u5217\u306e\u5148\u982d\u306ea\u3092\u6bd4\u8f03\u3057\u3066\u3057\u307e\u3044\u3001ab\u304c\u3042\u308b\u306e\u306b\u898b\u9003\u3057\u3066\u3057\u307e\u3046\u3002\n\u305d\u3053\u3067\u3001\u305d\u306e\u30b3\u30de\u30f3\u30c9\u304c\u59cb\u307e\u3063\u305f\u304b\u3082\u3057\u308c\u306a\u3044\u3068\u8003\u3048\u308b\u4f4d\u7f6e\u3092\u5fc5\u8981\u6700\u4f4e\u9650\u3060\u3051\u305a\u3089\u3059\u3053\u3068\u3067\u3001\u3053\u306e\u3088\u3046\u306a\u898b\u9003\u3057\u304c\u8d77\u3053\u3089\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\n\u305f\u3060\u3057\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u30b3\u30de\u30f3\u30c9\u306e\u96c6\u5408\u304c\u8a9e\u982d\u7b26\u53f7\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u3001\u3059\u306a\u308f\u3061\u4f8b\u3048\u3070ba\u3068baa\u304c\u4e21\u65b9\u30b3\u30de\u30f3\u30c9\u306e\u96c6\u5408\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u77ed\u3044\u65b9\u306e\u30b3\u30de\u30f3\u30c9(\u3053\u306e\u5834\u5408ba)\u304c\u8aad\u307f\u8fbc\u307e\u308c\u305f\u6642\u70b9\u3067\u3059\u3050\u306b\u69cb\u6587\u89e3\u6790\u5668\u306b\u6e21\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u3046\u307e\u304f\u51e6\u7406\u3067\u304d\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002\n\nBrainf*ck\u6d3e\u751f\u8a00\u8a9e\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u6539\u826f\u3059\u308b\n\u5148\u307b\u3069\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067Brainf*ck\u6d3e\u751f\u8a00\u8a9e\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u305f\u304c\u3001\u975e\u5e38\u306b\u51e6\u7406\u304c\u91cd\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u3002\n\u3053\u308c\u306f\u3001\u30b3\u30de\u30f3\u30c9\u304c\u4e00\u81f4\u3057\u306a\u304b\u3063\u305f\u6642\u306b\u308f\u3056\u308f\u3056\u30eb\u30fc\u30d7\u3092\u56de\u3057\u3066\u958b\u59cb\u4f4d\u7f6e\u306e\u5019\u88dc\u3092\u3069\u308c\u3060\u3051\u9032\u3081\u308b\u3079\u304d\u304b\u3092\u8abf\u3079\u3066\u3044\u308b\u305f\u3081\u3067\u3042\u308b\u3068\u8003\u3048\u3089\u308c\u308b\u3002\n\u3088\u304f\u8003\u3048\u308b\u3068\u3001\u3053\u306e\u90e8\u5206\u3067\u3069\u308c\u3060\u3051\u9032\u3081\u308b\u304b\u306f\u3001\u4eca\u30b3\u30de\u30f3\u30c9\u306e\u3069\u3053\u3068\u6bd4\u8f03\u3057\u3066\u3044\u308b\u304b\u3068\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3060\u3051\u304b\u3089\u6c7a\u307e\u308b\u306f\u305a\u3067\u3042\u308b\u3002\n\u305d\u3053\u3067\u3001\u4e8b\u524d\u306b\u8abf\u3079\u3066\u30c6\u30fc\u30d6\u30eb\u306b\u683c\u7d0d\u3059\u308b\u3053\u3068\u3067\u3001\u51e6\u7406\u3092\u9ad8\u901f\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u305f\u3002\n\u5909\u66f4\u3057\u305f\u95a2\u6570\u306e\u307f\u3092\u8f09\u305b\u308b\u3002\n\nbf3.y\nvoid initialize_table(const char *command_str, int command_next[][256]) {\n    int command_pos, input;\n    for (command_pos = 0; command_str[command_pos] != '\\0'; command_pos++) {\n        for (input = 0; input < 256; input++) {\n            if ((unsigned char)command_str[command_pos] == input) {\n                /* \u4e00\u81f4 */\n                command_next[command_pos][input] = command_pos + 1;\n            } else if (command_pos == 0) {\n                /* \u304b\u3059\u3063\u3066\u3059\u3089\u3044\u306a\u3044 */\n                command_next[command_pos][input] = 0;\n            } else {\n                int i;\n                /* \u3053\u306e\u30b3\u30de\u30f3\u30c9\u306f\u5b9f\u306fi\u6587\u5b57\u5f8c\u304b\u3089\u59cb\u307e\u3063\u3066\u3044\u305f\u304b\u3082\u3057\u308c\u306a\u3044 */\n                for (i = 1; i <= command_pos; i++) {\n                    /* \u307e\u305a\u8aad\u307f\u8fbc\u3093\u3060\u6587\u5b57\u304c\u77db\u76fe\u3057\u306a\u3044\u304b\u3092\u5224\u5b9a\u3059\u308b */\n                    if ((unsigned char)command_str[command_pos - i]  == input) {\n                        int ok = 1;\n                        int j;\n                        /* \u4eca\u306e\u72b6\u614b\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3067\u304d\u305f\u6587\u5b57\u304c\u308f\u304b\u308b\u306e\u3067\u3001\u77db\u76fe\u3057\u306a\u3044\u304b\u3092\u5224\u5b9a\u3059\u308b */\n                        for (j = 1; command_pos - i - j >= 0; j++) {\n                            if (command_str[command_pos - i - j] != command_str[command_pos - j]) {\n                                ok = 0;\n                                break;\n                            }\n                        }\n                        if (ok) break;\n                    }\n                }\n                command_next[command_pos][input] = command_pos - i + 1;\n            }\n        }\n    }\n}\n\nint yylex(void) {\n    static char commands[] = \"+-><[],.\";\n    static const char *command_str[8] = {\n        \"\u963f\u6f84\u4f73\u5948\",\n        \"\u6c34\u6a4b\u304b\u304a\u308a\",\n        \"\u559c\u591a\u6751\u82f1\u68a8\",\n        \"\u4e95\u53e3\u88d5\u9999\",\n        \"\u7530\u6751\u3086\u304b\u308a\",\n        \"\u5800\u6c5f\u7531\u8863\",\n        \"\u4f50\u85e4\u5229\u5948\",\n        \"\u82b1\u6fa4\u9999\u83dc\"\n    };\n    static int command_next[8][64][256]; /* 2\u756a\u3081\u306e\u5024\u304c\u6587\u5b57\u5217\u306e\u6700\u5927\u9577 */\n    static int command_initialized;\n    int command_pos[8];\n    int i, j;\n    int loc_log[64][2];\n    int loc_log_head = 0;\n    int loc_log_max = sizeof(loc_log) / sizeof(loc_log[0]);\n    if (!command_initialized) {\n        for (i = 0; i < 8; i++) initialize_table(command_str[i], command_next[i]);\n        command_initialized = 1;\n    }\n    for (i = 0; i < 8; i++) command_pos[i] = 0;\n    for(;;) {\n        /* \u6587\u5b57\u306e\u8aad\u307f\u8fbc\u307f */\n        int input = getc(infp);\n        if (input == EOF) {\n            /* \u5165\u529b\u7d42\u4e86\u6642\u306b\u306f0\u3092\u8fd4\u3059 */\n            return 0;\n        }\n        /* \u4f4d\u7f6e\u306e\u66f4\u65b0 */\n        if (input == '\\n') {\n            /* \u6b21\u306e\u884c\u306b\u884c\u304f */\n            yylloc.last_line++;\n            yylloc.last_column = 0;\n        } else {\n            /* \u6b21\u306e\u6587\u5b57\u306b\u884c\u304f */\n            yylloc.last_column++;\n        }\n        loc_log[loc_log_head][0] = yylloc.last_line;\n        loc_log[loc_log_head][1] = yylloc.last_column;\n        loc_log_head = (loc_log_head + 1) % loc_log_max;\n        /* \u30b3\u30de\u30f3\u30c9\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a */\n        for (i = 0; i < 8; i++) {\n            command_pos[i] = command_next[i][command_pos[i]][input];\n            if (command_str[i][command_pos[i]] == '\\0') {\n                int loc_index;\n                /* \u6709\u52b9\u306a\u30b3\u30de\u30f3\u30c9\u3092\u8aad\u307f\u8fbc\u3093\u3060 */\n                /* \u30c8\u30fc\u30af\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u3092\u8a2d\u5b9a\u3059\u308b */\n                loc_index = loc_log_head - command_pos[i];\n                while (loc_index < 0) loc_index += loc_log_max;\n                yylloc.first_line = loc_log[loc_index][0];\n                yylloc.first_column = loc_log[loc_index][1];\n                /* \u5404\u30b3\u30de\u30f3\u30c9\u306e\u5224\u5b9a\u72b6\u614b\u3092\u30ea\u30bb\u30c3\u30c8\u3059\u308b */\n                for (j = 0; j < 8; j++) command_pos[j] = 0;\n                /* \u69cb\u6587\u89e3\u6790\u5668\u306b\u6e21\u3059 */\n                yylval = NULL;\n                return commands[i];\n            }\n        }\n    }\n}\n\n\n### Bison\u3068\u306f\nBison\u306f\u3001\u6587\u8108\u81ea\u7531\u6587\u6cd5\u3092\u5165\u529b\u3068\u3057\u3066\u81ea\u52d5\u3067\u30d1\u30fc\u30b5\u3092\u4f5c\u3063\u3066\u304f\u308c\u308b\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3067\u3042\u308b\u3002\n\u305d\u308c\u305e\u308c\u306e\u898f\u5247\u3092\u51e6\u7406\u3057\u305f\u5f8c\u306b\u5b9f\u884c\u3059\u308b\u51e6\u7406\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n* [Bison - GNU Project - Free Software Foundation](https://www.gnu.org/software/bison/)\n* [Bison - Wikipedia](https://ja.wikipedia.org/wiki/Bison)\n\n### Bison\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n#### Windows\n[Bison for Windows](http://gnuwin32.sourceforge.net/packages/bison.htm)\n\u304b\u3089\u3001Complete package, except sources\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3002\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u3092\u4f7f\u3044\u305f\u304f\u306a\u3044\u5834\u5408\u306f\u3001Binaries\u3068Dependencies\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3001\u9069\u5f53\u306a\u540c\u3058\u30d5\u30a9\u30eb\u30c0\u306b\u89e3\u51cd(\u4e2d\u8eab\u306e\u30d5\u30a9\u30eb\u30c0\u3092\u7d71\u5408)\u3057\u3066\u3082\u3088\u3044\u3002\n\n#### Linux\n[Bison - GNU Project - Free Software Foundation](https://www.gnu.org/software/bison/)\n\u306eDownloading Bison\u306e\u6240\u306e\u30ea\u30f3\u30af\u304b\u3089\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u89e3\u51cd\u3057\u3001\u89e3\u51cd\u3057\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea(`configure`\u306a\u3069\u304c\u3042\u308b)\u3067\n\n```\n$ ./configure\n$ make\n$ make install\n```\n\n\u3068\u3044\u3046\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3002\u305f\u3060\u3057\u3001`$`\u306f\u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u8868\u3057\u3001\u30b3\u30de\u30f3\u30c9\u306b\u306f\u542b\u307e\u308c\u306a\u3044\u3002\n`./configure`\u306b\u304a\u3044\u3066\u306f\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u306a\u3069\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3059\u308b\u3068\u3088\u3044\u3002\n\n### \u7c21\u5358\u306a\u30b5\u30f3\u30d7\u30eb(\u52d5\u4f5c\u78ba\u8a8d)\n```test.y\n%{\n/* \u3053\u3053\u306bC\u8a00\u8a9e\u306e\u300c\u30d8\u30c3\u30c0\u300d\u3092\u66f8\u304f */\n\n#include <stdio.h>\n\nint yylex(void);\nvoid yyerror(const char *);\n\n%}\n\n%%\n/* \u3053\u3053\u306b\u6587\u6cd5\u3092\u66f8\u304f */\n\nlang\n    : /* \u7a7a */\n    | 'a' lang 'b'\n    ;\n\n%%\n/* \u3053\u3053\u306bC\u8a00\u8a9e\u306e\u300c\u30d5\u30c3\u30bf\u300d\u3092\u66f8\u304f */\n\n/* \u6b21\u306e\u300c\u6587\u5b57\u300d\u3092\u30b9\u30c8\u30ea\u30fc\u30e0\u304b\u3089\u8aad\u307f\u53d6\u3063\u3066\u8fd4\u3059 */\nint yylex(void) {\n    int input;\n    do {\n        input = getchar();\n    } while (input == '\\n'); /* \u6539\u884c\u306f\u7121\u8996\u3059\u308b */\n    if (input == EOF) return 0; /* \u7d42\u4e86\u3092\u8868\u3059 */\n    return input;\n}\n\n/* \u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u51fa\u529b\u3059\u308b */\nvoid yyerror(const char *m) {\n    fprintf(stderr, \"%s\\n\", m);\n}\n\nint main(void) {\n    if (yyparse() == 0) {\n        puts(\"YES\");\n    } else {\n        puts(\"NO\");\n    }\n    return 0;\n}\n```\n\n\u3053\u308c\u3092`bison -d -v test.y`\u3068\u3044\u3046\u30b3\u30de\u30f3\u30c9\u3067`Bison`\u3067\u51e6\u7406\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u3067\u304d\u308b\u3002\n\n* `test.tab.c` : \u751f\u6210\u3055\u308c\u305f\u30d1\u30fc\u30b5\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n* `test.tab.h` : \u751f\u6210\u3055\u308c\u305f\u30d1\u30fc\u30b5\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n* `test.output` : \u751f\u6210\u3055\u308c\u305f\u30d1\u30fc\u30b5\u306e\u52d5\u4f5c\u304c\u8a18\u8ff0\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb(\u53c2\u8003)\n\n\u3053\u306e`test.tab.c`\u3092`gcc`\u306a\u3069\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3001\u5b9f\u884c\u3059\u308b\u3068\u3001\u30d1\u30fc\u30b5\u304c\u52d5\u4f5c\u3059\u308b\u3002\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u5165\u529b\u304b\u3089\u6539\u884c\u3092\u53d6\u308a\u9664\u3044\u305f\u6587\u5b57\u5217\u304c\u300ca\u304c0\u500b\u4ee5\u4e0a\u7d9a\u3044\u305f\u5f8c\u3001b\u304c\u3061\u3087\u3046\u3069\u540c\u3058\u6570\u7d9a\u304f\u300d\u3068\u3044\u3046\u6587\u5b57\u5217\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u3092\u5224\u5b9a\u3057\u3001\n\u306a\u3063\u3066\u3044\u308b\u306a\u3089`YES`\u3001\u306a\u3063\u3066\u3044\u306a\u3044\u306a\u3089`NO`\u3068\u51fa\u529b\u3059\u308b\u3002\n\n### \u6587\u6cd5\u306e\u66f8\u304d\u65b9\n\nBison\u3067\u7528\u3044\u308b\u6587\u6cd5\u306f\u3001`\u975e\u7d42\u7aef\u8a18\u53f7\u540d: \u8a18\u53f7\u5217 [{\u30a2\u30af\u30b7\u30e7\u30f3}] [| \u8a18\u53f7\u5217 [{\u30a2\u30af\u30b7\u30e7\u30f3}] ...] ;` \u306e\u3088\u3046\u306a\u5f62\u3067\u66f8\u304f\u3002\n\u8a18\u53f7\u5217\u306f\u3001\u975e\u7d42\u7aef\u8a18\u53f7\u3084\u6587\u5b57(\u7d42\u7aef\u8a18\u53f7)\u306e0\u500b\u4ee5\u4e0a\u306e\u5217\u3067\u3042\u308b\u3002\n\u30a2\u30af\u30b7\u30e7\u30f3\u306f\u3001\u305d\u306e\u8a18\u53f7\u5217\u3092\u8aad\u307f\u8fbc\u307f\u3001\u305d\u306e\u975e\u7d42\u7aef\u8a18\u53f7\u3068\u3057\u3066\u89e3\u91c8\u3059\u308b\u3068\u304d\u306b\u5b9f\u884c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3042\u308b\u3002\n\u5177\u4f53\u7684\u306b\u306f\u3001\n\n```\nhoge\n    : hoge fuga\n    | 'a'\n    ;\n\nfuga\n    : 'b'\n      { puts(\"fuga b\"); }\n    | 'c'\n    ;\n```\n\n\u306e\u3088\u3046\u306a\u611f\u3058\u306b\u306a\u308b\u3002\u3053\u306e\u6587\u6cd5\u306f\u3001\n\n* `hoge`\u306f\u3001`hoge`\u306e\u5f8c\u306b`fuga`\u3092\u3064\u306a\u3052\u305f\u3082\u306e\u304b\u3001\u6587\u5b57`'a'`\n* `fuga`\u306f\u3001\u6587\u5b57`'b'`\u304b\u3001\u6587\u5b57`'c'`\n\n\u3068\u3044\u3046\u610f\u5473\u3067\u3042\u308b\u3002\u307e\u305f\u3001fuga\u306e`'b'`\u306b\u5bfe\u3057\u3066\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u304a\u308a\u3001\u3053\u308c\u306b\u3088\u308a\u6587\u5b57`'b'`\u304c\u8aad\u307f\u8fbc\u307e\u308c\u3001`fuga`\u3068\u3057\u3066\u89e3\u91c8\u3055\u308c\u308b\u3068\u304d\u306b`fuga b`\u304c\u51fa\u529b\u3055\u308c\u308b\u3002(`puts`\u304c\u30de\u30af\u30ed\u5b9a\u7fa9\u306a\u3069\u306e\u5f71\u97ff\u3092\u53d7\u3051\u305a\u3001C\u8a00\u8a9e\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u95a2\u6570\u3068\u3057\u3066\u89e3\u91c8\u3055\u308c\u308b\u5834\u5408)\n\n\u5165\u529b\u5168\u4f53\u3092\u8868\u3059\u975e\u7d42\u7aef\u8a18\u53f7\u306fBison\u306e`%start`\u3092\u7528\u3044\u3066\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u306f\u6700\u521d\u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u975e\u7d42\u7aef\u8a18\u53f7\u3068\u306a\u308b\u3002\n\n\u307e\u305f\u3001\u30a2\u30af\u30b7\u30e7\u30f3\u4e2d\u306b\u304a\u3044\u3066\u3001\u3053\u306e\u975e\u7d42\u7aef\u8a18\u53f7\u306e\u300c\u610f\u5473\u300d\u306f`$$`\u3068\u8868\u3055\u308c\u3001\u3053\u306e\u975e\u7d42\u7aef\u8a18\u53f7\u3067\u8868\u3055\u308c\u308b\u8a18\u53f7\u5217\u306e\u5404\u8981\u7d20\u306e\u300c\u610f\u5473\u300d\u306f\u524d\u304b\u3089\u9806\u306b`$1, $2, ...`\u3068\u8868\u308f\u3055\u308c\u308b\u306e\u3067\u3001\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u7528\u3044\u3066\u5404\u8981\u7d20\u306e\u300c\u610f\u5473\u300d\u304b\u3089\u3053\u306e\u975e\u7d42\u7aef\u8a18\u53f7\u306e\u300c\u610f\u5473\u300d\u3092\u6c42\u3081\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n### Brainf*ck\u30b3\u30f3\u30d1\u30a4\u30e9\n\u4ee5\u4e0b\u306bBison\u3092\u7528\u3044\u305fBrainf*ck\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u793a\u3059\u3002\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u5404\u30b3\u30de\u30f3\u30c9\u3092\u8868\u3059\u6587\u5b57\u306b\u5bfe\u3057\u5358\u7d14\u306b\u5909\u63db\u7d50\u679c\u3092\u5bfe\u5fdc\u3055\u305b\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u306e\u7d50\u679c\u306f\u5165\u529b\u30d7\u30ed\u30b0\u30e9\u30e0\u5168\u4f53\u306e\u5909\u63db\u7d50\u679c\u3092\u9023\u7d50\u3057\u305f\u3082\u306e\u306e\u524d\u5f8c\u306b\u521d\u671f\u5316\u3001\u7d42\u4e86\u3001\u5165\u51fa\u529b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u9023\u7d50\u3057\u305f\u3082\u306e\u3068\u306a\u308b\u3002\n\u30bf\u30fc\u30b2\u30c3\u30c8\u306f32\u30d3\u30c3\u30c8\u306ex86 Linux\u3067\u3042\u308b\u304c\u3001\u5404\u30b3\u30de\u30f3\u30c9\u306b\u5bfe\u5fdc\u3059\u308b\u5909\u63db\u7d50\u679c\u3084\u524d\u5f8c\u306b\u3064\u3051\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5909\u3048\u308b\u3053\u3068\u3067\u4ed6\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u3082\u5bfe\u5fdc\u3067\u304d\u308b\u306f\u305a\u3067\u3042\u308b\u3002\n\n\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u304b\u3089\u5f15\u6570\u30921\u500b\u6307\u5b9a\u3059\u308b\u3068\u3001\u305d\u308c\u3092\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u3057\u3066\u89e3\u91c8\u3057\u3001\u305d\u306e\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u5165\u529b\u3092\u8aad\u307f\u8fbc\u3082\u3046\u3068\u3059\u308b\u3002\n\u5f15\u6570\u304c\u7121\u3044\u5834\u5408\u306f\u3001\u6a19\u6e96\u5165\u529b\u304b\u3089\u5165\u529b\u3092\u8aad\u307f\u8fbc\u3080\u3002\n\u30b3\u30f3\u30d1\u30a4\u30eb\u7d50\u679c\u306f\u6a19\u6e96\u51fa\u529b\u306b\u51fa\u529b\u3055\u308c\u308b\u3002\n\n```bf.y\n%{\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint yylex(void);\nvoid yyerror(const char *s);\n\n#define YYSTYPE char*\n\n/* \u5206\u5c90\u306b\u4f7f\u7528\u3059\u308b\u30e9\u30d9\u30eb\u306e\u901a\u3057\u756a\u53f7 */\nint label_id;\n/* \u6587\u5b57\u5217\u3092\u6e21\u3059\u3068\u3001\u305d\u308c\u3092malloc\u3067\u683c\u7d0d\u3057\u305f\u5834\u6240\u306b\u30b3\u30d4\u30fc\u3057\u3066\u8fd4\u3059 */\nchar *allocate_string(const char *str);\n/* 2\u500b\u306e\u6587\u5b57\u5217\u3092\u9023\u7d50\u3057\u305f\u6587\u5b57\u5217\u3092\u8fd4\u3057\u3001\u5143\u306e\u6587\u5b57\u5217\u306f\u958b\u653e\u3059\u308b */\nchar *concat_and_free(char *s1, char *s2);\n\n%}\n\n/* syntax error\u3060\u3051\u3067\u306a\u304f\u3001\u3088\u308a\u8a73\u3057\u3044\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u5410\u304b\u305b\u308b */\n/* bison 3\u7528 */\n/* %define parse.error verbose */\n/* bison 2.4.1\u7528 */\n%error-verbose\n\n/* \u69cb\u6587\u89e3\u6790\u4e2d\u306e\u5834\u6240\u306e\u8ffd\u8de1\u3092\u6709\u52b9\u306b\u3059\u308b */\n%locations\n\n/* \u69cb\u6587\u89e3\u6790\u524d\u306b\u5b9f\u884c\u3059\u308b\u51e6\u7406\u3092\u8a18\u8ff0\u3059\u308b */\n%initial-action {\n    /* \u30e9\u30d9\u30eb\u756a\u53f7\u3092\u521d\u671f\u5316\u3059\u308b */\n    label_id = 0;\n    /* \u89e3\u6790\u4e2d\u306e\u4f4d\u7f6e\u3092\u521d\u671f\u5316\u3059\u308b */\n    yylloc.last_line = yylloc.first_line = 1;\n    /* \u6587\u5b57\u3092\u8aad\u307f\u8fbc\u3093\u3060\u6642\u306b\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u306e\u3067\u3001\u5217\u756a\u53f7\u306f0\u306b\u521d\u671f\u5316\u3059\u308b */\n    yylloc.last_column = yylloc.first_column = 0;\n}\n\n/* \u89e3\u6790\u3092\u958b\u59cb\u3059\u308b\u975e\u7d42\u7aef\u8a18\u53f7\u3092\u6307\u5b9a\u3059\u308b */\n%start program\n\n%%\n\n/* \u30d7\u30ed\u30b0\u30e9\u30e0\u5168\u4f53 */\nprogram\n    : command_list\n        {\n            /* \u30b3\u30de\u30f3\u30c9\u5217\u306e\u524d\u306b\u51fa\u529b\u3059\u308b\u30c7\u30fc\u30bf */\n            char *prorogue = allocate_string(\n                \"\\t.text\\n\"\n                \"\\t.globl main\\n\"\n                \"main:\\n\"\n                \"\\txorl %esi, %esi\\n\"\n            );\n            /* \u30b3\u30de\u30f3\u30c9\u5217\u306e\u5f8c\u308d\u306b\u51fa\u529b\u3059\u308b\u30c7\u30fc\u30bf */\n            char *epilogue = allocate_string(\n                \"\\tmovl $1, %eax\\n\"\n                \"\\tmovl $0, %ebx\\n\"\n                \"\\tint $0x80\\n\"\n                \"\\tret\\n\"\n                \"\\n\"\n                \"read_byte:\\n\"\n                \"\\tpushl $0\\n\"\n                \"\\tmovl $3, %eax\\n\"\n                \"\\tmovl $0, %ebx\\n\"\n                \"\\tmovl %esp, %ecx\\n\"\n                \"\\tmovl $1, %edx\\n\"\n                \"\\tint $0x80\\n\"\n                \"\\tpop %eax\\n\"\n                \"\\tmovb %al, memory(%esi)\\n\"\n                \"\\tret\\n\"\n                \"\\n\"\n                \"write_byte:\\n\"\n                \"\\tmovb memory(%esi), %al\\n\"\n                \"\\tpushl %eax\\n\"\n                \"\\tmovl $4, %eax\\n\"\n                \"\\tmovl $1, %ebx\\n\"\n                \"\\tmovl %esp, %ecx\\n\"\n                \"\\tmovl $1, %edx\\n\"\n                \"\\tint $0x80\\n\"\n                \"\\tpop %eax\\n\"\n                \"\\tret\\n\"\n                \"\\n\"\n                \"\\t.lcomm memory, 65536\\n\"\n            );\n            char *result = concat_and_free(prorogue, concat_and_free($1, epilogue));\n            /* \u30b3\u30f3\u30d1\u30a4\u30eb\u7d50\u679c\u3092\u51fa\u529b\u3059\u308b */\n            fputs(result, stdout);\n            free(result);\n            $$ = NULL;\n        }\n    ;\n\n/* \u30b3\u30de\u30f3\u30c9\u304c0\u500b\u4ee5\u4e0a\u7e4b\u304c\u3063\u305f\u3082\u306e */\ncommand_list\n    : /* \u7a7a */\n        {\n            $$ = allocate_string(\"\");\n        }\n    | command_list command\n        {\n            $$ = concat_and_free($1, $2);\n        }\n    ;\n\n/* \u5404\u30b3\u30de\u30f3\u30c9 */\ncommand\n    : '+'\n        {\n            $$ = allocate_string(\"\\tincb memory(%esi)\\n\");\n        }\n    | '-'\n        {\n            $$ = allocate_string(\"\\tdecb memory(%esi)\\n\");\n        }\n    | '>'\n        {\n            $$ = allocate_string(\"\\tincw %si\\n\");\n        }\n    | '<'\n        {\n            $$ = allocate_string(\"\\tdecw %si\\n\");\n        }\n    | ','\n        {\n            $$ = allocate_string(\"\\tcall read_byte\\n\");\n        }\n    | '.'\n        {\n            $$ = allocate_string(\"\\tcall write_byte\\n\");\n        }\n    | '[' command_list ']'\n        {\n            char buffer[256], *prorogue, *epilogue;\n            int start_label = label_id++;\n            int end_label = label_id++;\n            sprintf(buffer,\n                \"\\tcmpb $0, memory(%%esi)\\n\"\n                \"\\tjnz L%d\\n\"\n                \"\\tjmp L%d\\n\"\n                \"L%d:\\n\", start_label, end_label, start_label);\n            prorogue = allocate_string(buffer);\n            sprintf(buffer,\n                \"\\tcmpb $0, memory(%%esi)\\n\"\n                \"\\tjz L%d\\n\"\n                \"\\tjmp L%d\\n\"\n                \"L%d:\\n\", end_label, start_label, end_label);\n            epilogue = allocate_string(buffer);\n            $$ = concat_and_free(concat_and_free(prorogue, $2), epilogue);\n        }\n    ;\n\n%%\n\nFILE *infp;\n\nint yylex(void) {\n    static char commands[] = \"+-><[],.\";\n    for(;;) {\n        /* \u6587\u5b57\u306e\u8aad\u307f\u8fbc\u307f */\n        int input = getc(infp);\n        if (input == EOF) {\n            /* \u5165\u529b\u7d42\u4e86\u6642\u306b\u306f0\u3092\u8fd4\u3059 */\n            return 0;\n        }\n        /* \u4f4d\u7f6e\u306e\u66f4\u65b0 */\n        if (input == '\\n') {\n            /* \u6b21\u306e\u884c\u306b\u884c\u304f */\n            yylloc.last_line = ++yylloc.first_line;\n            yylloc.last_column = yylloc.first_column = 0;\n        } else {\n            /* \u6b21\u306e\u6587\u5b57\u306b\u884c\u304f */\n            yylloc.last_column = ++yylloc.first_column;\n        }\n        /* \u30b3\u30de\u30f3\u30c9\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a */\n        if (strchr(commands, input) != NULL) {\n            /* \u6709\u52b9\u306a\u30b3\u30de\u30f3\u30c9\u306a\u3089\u69cb\u6587\u89e3\u6790\u5668\u306b\u6e21\u3059 */\n            yylval = NULL;\n            return input;\n        } else {\n            /* \u305d\u306e\u4ed6\u306e\u6587\u5b57(\u30b3\u30e1\u30f3\u30c8)\u306f\u6368\u3066\u308b */\n        }\n    }\n}\n\nvoid yyerror(const char *s) {\n    fprintf(stderr, \"%s at line %d, column %d\\n\", s, yylloc.first_line, yylloc.first_column);\n}\n\n/* \u30d0\u30c3\u30d5\u30a1\u3092\u78ba\u4fdd\u3057\u3001\u305d\u3053\u306b\u5f15\u6570\u3067\u4e0e\u3048\u3089\u308c\u305f\u6587\u5b57\u5217\u3092\u30b3\u30d4\u30fc\u3057\u3066\u8fd4\u3059 */\nchar *allocate_string(const char *str) {\n    char *buffer = malloc(sizeof(char) * (strlen(str) + 1));\n    if (buffer == NULL) {\n        yyerror(\"malloc failed\");\n        exit(1);\n    }\n    strcpy(buffer, str);\n    return buffer;\n}\n\n/* \u30d0\u30c3\u30d5\u30a1\u3092\u78ba\u4fdd\u3057\u3001str1\u3068str2\u3092\u9023\u7d50\u3057\u305f\u6587\u5b57\u5217\u3092\u305d\u3053\u306b\u30b3\u30d4\u30fc\u3057\u3066\u8fd4\u3059\u3002\n * str1\u3068str2\u304c\u6307\u3059\u9818\u57df\u306f\u958b\u653e\u3055\u308c\u308b\u3002 */\nchar *concat_and_free(char *str1, char *str2) {\n    size_t len1 = strlen(str1);\n    size_t len2 = strlen(str2);\n    char *buffer = malloc(sizeof(char) * (len1 + len2 + 1));\n    if (buffer == NULL) {\n        yyerror(\"malloc failed\");\n        exit(1);\n    }\n    strcpy(buffer, str1);\n    strcpy(buffer + len1, str2);\n    free(str1);\n    free(str2);\n    return buffer;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) {\n        infp = stdin;\n    } else {\n        infp = fopen(argv[1], \"r\");\n        if (infp == NULL) {\n            fputs(\"input file open failed\\n\", stderr);\n            return 1;\n        }\n    }\n    yyparse();\n    if (argc >= 2) fclose(infp);\n    return 0;\n}\n```\n\n### Brainf*ck\u6d3e\u751f\u8a00\u8a9e\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u4f5c\u308b\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5229\u7528\u3057\u3066\u3001\u5404\u30b3\u30de\u30f3\u30c9\u3092\u5358\u7d14\u306b\u5225\u306e\u6587\u5b57\u5217\u3067\u7f6e\u304d\u63db\u3048\u305fBrainf*ck\u6d3e\u751f\u8a00\u8a9e\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u4f5c\u308b\u3053\u3068\u3092\u8003\u3048\u308b\u3002\n\u5358\u7d14\u306b\u8003\u3048\u308b\u3068\u3001`yylex()`\u95a2\u6570\u3067\u5165\u529b\u3055\u308c\u305f\u30b3\u30de\u30f3\u30c9\u3092\u305d\u306e\u307e\u307e\u69cb\u6587\u89e3\u6790\u5668\u306b\u6e21\u3057\u3066\u3044\u308b\u304c\u3001\n\u3053\u3053\u3092\u30b3\u30de\u30f3\u30c9\u3068\u3057\u3066\u7528\u3044\u308b\u6587\u5b57\u5217\u3092\u8aad\u307f\u8fbc\u3093\u3060\u3089\u305d\u306e\u30b3\u30de\u30f3\u30c9\u3092\u69cb\u6587\u89e3\u6790\u5668\u306b\u6e21\u3059\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3059\u308b\u3068\u3088\u3044\u3002\n\n\u4ed6\u306e\u90e8\u5206\u306f\u5171\u901a\u306a\u306e\u3067\u3001`yylex()`\u95a2\u6570\u304a\u3088\u3073\u8907\u6570\u6587\u5b57\u304b\u3089\u306a\u308b\u30b3\u30de\u30f3\u30c9\u306b\u5bfe\u5fdc\u3057\u305f`yyerror()`\u95a2\u6570\u306e\u307f\u3092\u8f09\u305b\u308b\u3002\n\n```bf2.y\nint yylex(void) {\n    static char commands[] = \"+-><[],.\";\n    static const char *command_str[8] = {\n        \"\u963f\u6f84\u4f73\u5948\",\n        \"\u6c34\u6a4b\u304b\u304a\u308a\",\n        \"\u559c\u591a\u6751\u82f1\u68a8\",\n        \"\u4e95\u53e3\u88d5\u9999\",\n        \"\u7530\u6751\u3086\u304b\u308a\",\n        \"\u5800\u6c5f\u7531\u8863\",\n        \"\u4f50\u85e4\u5229\u5948\",\n        \"\u82b1\u6fa4\u9999\u83dc\"\n    };\n    int command_pos[8];\n    int i, j;\n    int loc_log[64][2];\n    int loc_log_head = 0;\n    int loc_log_max = sizeof(loc_log) / sizeof(loc_log[0]);\n    for (i = 0; i < 8; i++) command_pos[i] = 0;\n    for(;;) {\n        /* \u6587\u5b57\u306e\u8aad\u307f\u8fbc\u307f */\n        int input = getc(infp);\n        if (input == EOF) {\n            /* \u5165\u529b\u7d42\u4e86\u6642\u306b\u306f0\u3092\u8fd4\u3059 */\n            return 0;\n        }\n        /* \u4f4d\u7f6e\u306e\u66f4\u65b0 */\n        if (input == '\\n') {\n            /* \u6b21\u306e\u884c\u306b\u884c\u304f */\n            yylloc.last_line++;\n            yylloc.last_column = 0;\n        } else {\n            /* \u6b21\u306e\u6587\u5b57\u306b\u884c\u304f */\n            yylloc.last_column++;\n        }\n        loc_log[loc_log_head][0] = yylloc.last_line;\n        loc_log[loc_log_head][1] = yylloc.last_column;\n        loc_log_head = (loc_log_head + 1) % loc_log_max;\n        /* \u30b3\u30de\u30f3\u30c9\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a */\n        for (i = 0; i < 8; i++) {\n            if ((unsigned char)command_str[i][command_pos[i]] == input) {\n                command_pos[i]++;\n                if (command_str[i][command_pos[i]] == '\\0') {\n                    int loc_index;\n                    /* \u6709\u52b9\u306a\u30b3\u30de\u30f3\u30c9\u3092\u8aad\u307f\u8fbc\u3093\u3060 */\n                    /* \u30c8\u30fc\u30af\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u3092\u8a2d\u5b9a\u3059\u308b */\n                    loc_index = loc_log_head - command_pos[i];\n                    while (loc_index < 0) loc_index += loc_log_max;\n                    yylloc.first_line = loc_log[loc_index][0];\n                    yylloc.first_column = loc_log[loc_index][1];\n                    /* \u5404\u30b3\u30de\u30f3\u30c9\u306e\u5224\u5b9a\u72b6\u614b\u3092\u30ea\u30bb\u30c3\u30c8\u3059\u308b */\n                    for (j = 0; j < 8; j++) command_pos[j] = 0;\n                    /* \u69cb\u6587\u89e3\u6790\u5668\u306b\u6e21\u3059 */\n                    yylval = NULL;\n                    return commands[i];\n                }\n            } else if (command_pos[i] > 0) {\n                /* \u3053\u306e\u30b3\u30de\u30f3\u30c9\u306f\u5b9f\u306fj\u6587\u5b57\u5f8c\u304b\u3089\u59cb\u307e\u3063\u3066\u3044\u305f\u304b\u3082\u3057\u308c\u306a\u3044 */\n                for (j = 1; j <= command_pos[i]; j++) {\n                    /* \u307e\u305a\u8aad\u307f\u8fbc\u3093\u3060\u6587\u5b57\u304c\u77db\u76fe\u3057\u306a\u3044\u304b\u3092\u5224\u5b9a\u3059\u308b */\n                    if ((unsigned char)command_str[i][command_pos[i] - j]  == input) {\n                        int ok = 1;\n                        int k;\n                        /* \u4eca\u306e\u72b6\u614b\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3067\u304d\u305f\u6587\u5b57\u304c\u308f\u304b\u308b\u306e\u3067\u3001\u77db\u76fe\u3057\u306a\u3044\u304b\u3092\u5224\u5b9a\u3059\u308b */\n                        for (k = 1; command_pos[i] - j - k >= 0; k++) {\n                            if (command_str[i][command_pos[i] - j - k] != command_str[i][command_pos[i] - k]) {\n                                ok = 0;\n                                break;\n                            }\n                        }\n                        if (ok) break;\n                    }\n                }\n                command_pos[i] = command_pos[i] - j + 1;\n            }\n        }\n    }\n}\n\nvoid yyerror(const char *s) {\n    fprintf(stderr, \"%s at %d:%d-%d:%d\\n\", s,\n        yylloc.first_line, yylloc.first_column,\n        yylloc.last_line, yylloc.last_column);\n}\n```\n\n\u5404\u30b3\u30de\u30f3\u30c9\u3092`command_pos`\u306b\u683c\u7d0d\u3057\u3066\u304a\u304f\u3053\u3068\u3067\u3001\u3053\u3053\u3092\u5909\u3048\u308b\u3060\u3051\u3067\u69d8\u3005\u306a\u30b3\u30de\u30f3\u30c9\u306b\u5bfe\u5fdc\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\n\u305d\u3057\u3066\u3001\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u5217\u304c\u305d\u308c\u305e\u308c\u306e\u30b3\u30de\u30f3\u30c9\u306b\u306a\u3063\u305f\u304b\u3069\u3046\u304b\u3092\u5e73\u884c\u3067\u5224\u5b9a\u3057\u3066\u3044\u308b\u3002\n\u3053\u3053\u3067\u3001\u300c\u4e00\u81f4\u3057\u306a\u304b\u3063\u305f\u3089\u5358\u7d14\u306b\u5404\u30b3\u30de\u30f3\u30c9\u306e\u5148\u982d\u306b\u623b\u308b\u300d\u3068\u3044\u3046\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3057\u3066\u3057\u307e\u3046\u3068\u3001\n\u4f8b\u3048\u3070`ab`\u3092\u63a2\u3057\u305f\u3044\u6642\u306b`aab`\u3068\u3044\u3046\u5165\u529b\u304c\u6765\u308b\u3068\u30012\u500b\u76ee\u306e`a`\u3067\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u3001\u6b21\u306e`b`\u3068\u63a2\u3057\u305f\u3044\u6587\u5b57\u5217\u306e\u5148\u982d\u306e`a`\u3092\u6bd4\u8f03\u3057\u3066\u3057\u307e\u3044\u3001`ab`\u304c\u3042\u308b\u306e\u306b\u898b\u9003\u3057\u3066\u3057\u307e\u3046\u3002\n\u305d\u3053\u3067\u3001\u305d\u306e\u30b3\u30de\u30f3\u30c9\u304c\u59cb\u307e\u3063\u305f\u304b\u3082\u3057\u308c\u306a\u3044\u3068\u8003\u3048\u308b\u4f4d\u7f6e\u3092\u5fc5\u8981\u6700\u4f4e\u9650\u3060\u3051\u305a\u3089\u3059\u3053\u3068\u3067\u3001\u3053\u306e\u3088\u3046\u306a\u898b\u9003\u3057\u304c\u8d77\u3053\u3089\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\n\n\u305f\u3060\u3057\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u30b3\u30de\u30f3\u30c9\u306e\u96c6\u5408\u304c\u8a9e\u982d\u7b26\u53f7\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u3001\u3059\u306a\u308f\u3061\u4f8b\u3048\u3070`ba`\u3068`baa`\u304c\u4e21\u65b9\u30b3\u30de\u30f3\u30c9\u306e\u96c6\u5408\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u77ed\u3044\u65b9\u306e\u30b3\u30de\u30f3\u30c9(\u3053\u306e\u5834\u5408`ba`)\u304c\u8aad\u307f\u8fbc\u307e\u308c\u305f\u6642\u70b9\u3067\u3059\u3050\u306b\u69cb\u6587\u89e3\u6790\u5668\u306b\u6e21\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u3046\u307e\u304f\u51e6\u7406\u3067\u304d\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002\n\n### Brainf*ck\u6d3e\u751f\u8a00\u8a9e\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u6539\u826f\u3059\u308b\n\u5148\u307b\u3069\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067Brainf*ck\u6d3e\u751f\u8a00\u8a9e\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u305f\u304c\u3001\u975e\u5e38\u306b\u51e6\u7406\u304c\u91cd\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u3002\n\u3053\u308c\u306f\u3001\u30b3\u30de\u30f3\u30c9\u304c\u4e00\u81f4\u3057\u306a\u304b\u3063\u305f\u6642\u306b\u308f\u3056\u308f\u3056\u30eb\u30fc\u30d7\u3092\u56de\u3057\u3066\u958b\u59cb\u4f4d\u7f6e\u306e\u5019\u88dc\u3092\u3069\u308c\u3060\u3051\u9032\u3081\u308b\u3079\u304d\u304b\u3092\u8abf\u3079\u3066\u3044\u308b\u305f\u3081\u3067\u3042\u308b\u3068\u8003\u3048\u3089\u308c\u308b\u3002\n\u3088\u304f\u8003\u3048\u308b\u3068\u3001\u3053\u306e\u90e8\u5206\u3067\u3069\u308c\u3060\u3051\u9032\u3081\u308b\u304b\u306f\u3001\u4eca\u30b3\u30de\u30f3\u30c9\u306e\u3069\u3053\u3068\u6bd4\u8f03\u3057\u3066\u3044\u308b\u304b\u3068\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u3060\u3051\u304b\u3089\u6c7a\u307e\u308b\u306f\u305a\u3067\u3042\u308b\u3002\n\u305d\u3053\u3067\u3001\u4e8b\u524d\u306b\u8abf\u3079\u3066\u30c6\u30fc\u30d6\u30eb\u306b\u683c\u7d0d\u3059\u308b\u3053\u3068\u3067\u3001\u51e6\u7406\u3092\u9ad8\u901f\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u305f\u3002\n\n\u5909\u66f4\u3057\u305f\u95a2\u6570\u306e\u307f\u3092\u8f09\u305b\u308b\u3002\n\n```bf3.y\nvoid initialize_table(const char *command_str, int command_next[][256]) {\n    int command_pos, input;\n    for (command_pos = 0; command_str[command_pos] != '\\0'; command_pos++) {\n        for (input = 0; input < 256; input++) {\n            if ((unsigned char)command_str[command_pos] == input) {\n                /* \u4e00\u81f4 */\n                command_next[command_pos][input] = command_pos + 1;\n            } else if (command_pos == 0) {\n                /* \u304b\u3059\u3063\u3066\u3059\u3089\u3044\u306a\u3044 */\n                command_next[command_pos][input] = 0;\n            } else {\n                int i;\n                /* \u3053\u306e\u30b3\u30de\u30f3\u30c9\u306f\u5b9f\u306fi\u6587\u5b57\u5f8c\u304b\u3089\u59cb\u307e\u3063\u3066\u3044\u305f\u304b\u3082\u3057\u308c\u306a\u3044 */\n                for (i = 1; i <= command_pos; i++) {\n                    /* \u307e\u305a\u8aad\u307f\u8fbc\u3093\u3060\u6587\u5b57\u304c\u77db\u76fe\u3057\u306a\u3044\u304b\u3092\u5224\u5b9a\u3059\u308b */\n                    if ((unsigned char)command_str[command_pos - i]  == input) {\n                        int ok = 1;\n                        int j;\n                        /* \u4eca\u306e\u72b6\u614b\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3067\u304d\u305f\u6587\u5b57\u304c\u308f\u304b\u308b\u306e\u3067\u3001\u77db\u76fe\u3057\u306a\u3044\u304b\u3092\u5224\u5b9a\u3059\u308b */\n                        for (j = 1; command_pos - i - j >= 0; j++) {\n                            if (command_str[command_pos - i - j] != command_str[command_pos - j]) {\n                                ok = 0;\n                                break;\n                            }\n                        }\n                        if (ok) break;\n                    }\n                }\n                command_next[command_pos][input] = command_pos - i + 1;\n            }\n        }\n    }\n}\n\nint yylex(void) {\n    static char commands[] = \"+-><[],.\";\n    static const char *command_str[8] = {\n        \"\u963f\u6f84\u4f73\u5948\",\n        \"\u6c34\u6a4b\u304b\u304a\u308a\",\n        \"\u559c\u591a\u6751\u82f1\u68a8\",\n        \"\u4e95\u53e3\u88d5\u9999\",\n        \"\u7530\u6751\u3086\u304b\u308a\",\n        \"\u5800\u6c5f\u7531\u8863\",\n        \"\u4f50\u85e4\u5229\u5948\",\n        \"\u82b1\u6fa4\u9999\u83dc\"\n    };\n    static int command_next[8][64][256]; /* 2\u756a\u3081\u306e\u5024\u304c\u6587\u5b57\u5217\u306e\u6700\u5927\u9577 */\n    static int command_initialized;\n    int command_pos[8];\n    int i, j;\n    int loc_log[64][2];\n    int loc_log_head = 0;\n    int loc_log_max = sizeof(loc_log) / sizeof(loc_log[0]);\n    if (!command_initialized) {\n        for (i = 0; i < 8; i++) initialize_table(command_str[i], command_next[i]);\n        command_initialized = 1;\n    }\n    for (i = 0; i < 8; i++) command_pos[i] = 0;\n    for(;;) {\n        /* \u6587\u5b57\u306e\u8aad\u307f\u8fbc\u307f */\n        int input = getc(infp);\n        if (input == EOF) {\n            /* \u5165\u529b\u7d42\u4e86\u6642\u306b\u306f0\u3092\u8fd4\u3059 */\n            return 0;\n        }\n        /* \u4f4d\u7f6e\u306e\u66f4\u65b0 */\n        if (input == '\\n') {\n            /* \u6b21\u306e\u884c\u306b\u884c\u304f */\n            yylloc.last_line++;\n            yylloc.last_column = 0;\n        } else {\n            /* \u6b21\u306e\u6587\u5b57\u306b\u884c\u304f */\n            yylloc.last_column++;\n        }\n        loc_log[loc_log_head][0] = yylloc.last_line;\n        loc_log[loc_log_head][1] = yylloc.last_column;\n        loc_log_head = (loc_log_head + 1) % loc_log_max;\n        /* \u30b3\u30de\u30f3\u30c9\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a */\n        for (i = 0; i < 8; i++) {\n            command_pos[i] = command_next[i][command_pos[i]][input];\n            if (command_str[i][command_pos[i]] == '\\0') {\n                int loc_index;\n                /* \u6709\u52b9\u306a\u30b3\u30de\u30f3\u30c9\u3092\u8aad\u307f\u8fbc\u3093\u3060 */\n                /* \u30c8\u30fc\u30af\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u3092\u8a2d\u5b9a\u3059\u308b */\n                loc_index = loc_log_head - command_pos[i];\n                while (loc_index < 0) loc_index += loc_log_max;\n                yylloc.first_line = loc_log[loc_index][0];\n                yylloc.first_column = loc_log[loc_index][1];\n                /* \u5404\u30b3\u30de\u30f3\u30c9\u306e\u5224\u5b9a\u72b6\u614b\u3092\u30ea\u30bb\u30c3\u30c8\u3059\u308b */\n                for (j = 0; j < 8; j++) command_pos[j] = 0;\n                /* \u69cb\u6587\u89e3\u6790\u5668\u306b\u6e21\u3059 */\n                yylval = NULL;\n                return commands[i];\n            }\n        }\n    }\n}\n```\n", "tags": ["bison", "Brainf*ck", "\u30b3\u30f3\u30d1\u30a4\u30e9"]}