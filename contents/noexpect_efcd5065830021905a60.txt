{"context": "\n\n\u306f\u3058\u3081\u306b\n\n\u30bf\u30a4\u30c8\u30eb\u843d\u3061\u3002 \u3084\u3063\u3071\u4eca\u6642\u306e\u30a4\u30f3\u30d5\u30e9\u30a8\u30f3\u30b8\u30cb\u30a2\u306f\u30dc\u30bf\u30f31\u3064\u3067\u30b5\u30fc\u30d0\u306e1\u3064\u3082\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u306a\u3044\u3068\u306d\u3002\nn\u756a\u714e\u3058\u306apacket\u3092sniff\u3057\u3066dash\u30dc\u30bf\u30f3\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u62fe\u3046\u3084\u3064(python on ubuntu)\u306b\u3001\u4e0b\u306a\u611f\u3058\u306eaws cli\u3092\u53e9\u3044\u305f\u3060\u3051\u306e\u3082\u306e\u3092\u3084\u3063\u3066\u307f\u305f\u3002\n\nAmazon EC2 Dash Button(EC2\u306eVM\u4f5c\u308b)\nAws Lambda Dash Button(lamda\u3092invoke)\n\n\u6982\u306d\u4ee5\u4e0b\u306e\u53c2\u8003\u8a18\u4e8b\u306e\u518d\u73fe\u3067\u3059\u3002\nHow I Hacked Amazon\u2019s $5 WiFi Button to track Baby Data \u2013 Medium\n\nDash\u30dc\u30bf\u30f3\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\n\u308f\u304b\u308a\u3084\u3059\u3044\u89e3\u8aac\u3002 -> Amazon Dash Button\u8d85\u901f\u89e3\u8aac - Qiita\n\namazon\u3067Dash\u30dc\u30bf\u30f3\u3092\u30dd\u30c1\u3063\u3066\u304a\u5bb6\u306b\u5c4a\u304f\namazon\u306e\u30b9\u30de\u30d5\u30a9\u30a2\u30d7\u30ea\u3092\u8d77\u52d5(\u53d6\u8aac\u306e\u901a\u308a)\n\u5de6\u4e0a\u30e1\u30cb\u30e5\u30fc\u2192\u300c\u30a2\u30ab\u30a6\u30f3\u30c8\u30b5\u30fc\u30d3\u30b9\u300d\u2192\u300cDash\u7aef\u672b \u65b0\u3057\u3044\u7aef\u672b\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u300d\u3092\u9078\u629e(\u53d6\u8aac\u306e\u901a\u308a)\nLED\u9752\u306b\u306a\u308b\u307e\u3067Dash\u30dc\u30bf\u30f3\u30926\u79d2\u9577\u62bc\u3057(\u53d6\u8aac\u306e\u901a\u308a)\n\u30a2\u30d7\u30ea\u3067\u300c\u63a5\u7d9a\u300d(\u53d6\u8aac\u306e\u901a\u308a)\n\u30a2\u30d7\u30ea\u3067wifi\u63a5\u7d9a\u60c5\u5831\u5165\u529b(\u53d6\u8aac\u306e\u901a\u308a)\n\u5546\u54c1\u3092\u9078\u3070\u306a\u3044(\u53d6\u8aac\u3068\u9055\u3046)\n\n\nDash\u30dc\u30bf\u30f3\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u62fe\u3046\n\npython\u74b0\u5883\u306e\u6e96\u5099\n$ sudo apt-get install tcpdump python-crypto python-scapy\n# scapy\u3092\u4f7f\u3044\u305f\u3044\u3060\u3051\u3060\u3051\u3069\u3042\u308c\u3053\u308c\u3044\u308c\u308b\n\n$ pip show scapy\nName: scapy\nVersion: 2.2.3\nLocation: /usr/lib/python2.7/dist-packages\nRequires:\n# scapy\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u3066\u308c\u3070OK\n\n\n\nDash\u30dc\u30bf\u30f3\u306eMAC\u30a2\u30c9\u30ec\u30b9\u306e\u53d6\u5f97\ndash-listen-1.py\u3092\u4f5c\u6210\u3057\u3066\u5b9f\u884c\u3002\n\ndash-listen-1.py\n\nfrom scapy.all import *\n\ndef arp_display(pkt):\n  if pkt[ARP].op == 1: #who-has (request)\n    if pkt[ARP].psrc == '0.0.0.0': # ARP Probe\n      print \"ARP Probe from: \" + pkt[ARP].hwsrc\n\nprint sniff(prn=arp_display, filter=\"arp\", store=0, count=10)\n\n\n\n\n\u3082\u3057\u5fc5\u8981\u306a\u3089ARP Probe\u7f6e\u304d\u63db\u3048\u308b\n\n$ sudo python dash-listen-1.py \nWARNING: No route found for IPv6 destination :: (no default route?)\n# \u3053\u3053\u307e\u3067\u51fa\u529b\u3055\u308c\u308b\u306e\u3067Dash\u30dc\u30bf\u30f3\u3092\u62bc\u4e0b\nARP Probe from: XX:XX:XX:XX:XX:XX\nARP Probe from: XX:XX:XX:XX:XX:XX\nARP Probe from: XX:XX:XX:XX:XX:XX\n^C[]\n$ \n\n\n\u3053\u308c\u3067MAC\u30a2\u30c9\u30ec\u30b9\u3068\u308c\u308b\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067Dash\u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8\u3092\u53d6\u5f97\n\u5f15\u304d\u7d9a\u304ddash-listen-2.py\u3092\u4f5c\u6210\u3057\u3066\u5b9f\u884c\u3002\n\ndash-listen-2.py\n\nfrom scapy.all import *\ndef arp_display(pkt):\n  if pkt[ARP].op == 1:\n    if pkt[ARP].psrc == '0.0.0.0': # ARP probe as your env\n      if pkt[ARP].hwsrc == 'XX:XX:XX:XX:XX:XX': # MAC address as your env \n        print \"Amazon dash button Pushed.\"\n        sys.exit()\n\nprint sniff(prn=arp_display, filter=\"arp\", store=0, count=10)\n\n\n\n\u3082\u3057\u5fc5\u8981\u306a\u3089ARP Probe\u7f6e\u304d\u63db\u3048\u308b\nMAC\u30a2\u30c9\u30ec\u30b9\u306f\u4e0a\u8a18\u3067\u53d6\u5f97\u3057\u305f\u3082\u306e\u3078\u66f8\u304d\u63db\u3048\u308b\n\"sys.exit()\"\u306f\u300c\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u30a4\u30d9\u30f3\u30c8\u53d6\u5f97\u300d\u306e\u901a\u308a\u8907\u6570\u56de\u30d1\u30b1\u30c3\u30c8\u62fe\u3046\u306e\u3067\u6700\u521d\u306e1\u3064\u51e6\u7406\u3057\u305f\u3089\u7d42\u4e86\u3059\u308b\u305f\u3081\n\n\n$ sudo python dash-listen-2.py \nWARNING: No route found for IPv6 destination :: (no default route?)\n# \u3053\u3053\u307e\u3067\u51fa\u529b\u3055\u308c\u308b\u306e\u3067Dash\u30dc\u30bf\u30f3\u62bc\u4e0b\nAmazon dash button Pushed.\n$\n\n\n\u3053\u308c\u3067\u30a4\u30d9\u30f3\u30c8\u62fe\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\nAmazon Web Service Dash button\n\u3055\u3066\u3001\u3044\u3088\u3044\u3088\u672c\u984c\u3060\u3051\u3069\u7d50\u5c40\u306f\u2191\u306e\u300cprint \"Amazon dash button Pushed.\"\u300d\u3092aws cli\u306e\u3057\u3087\u307c\u3044\u30b3\u30de\u30f3\u30c9\u306b\u7f6e\u304d\u63db\u3048\u3066\u308b\u3060\u3051\u3067\u3042\u308b\u3002\n\u4ee5\u4e0b\u306f\u6e96\u5099\u3057\u3066\u3042\u308b\u524d\u63d0\u3002\n\naws cli\u3092\u5c0e\u5165\u3057\u3066aws configure\u3067\u8a8d\u8a3c\u6e08\nec2\u306eami\u306f\u65e2\u5b58(\u4eca\u56de\u306famazon linux\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3042\u308b\u306e)\nlamda\u95a2\u6570\u306f\u4f5c\u6210\u6e08(\u304a\u3088\u3073IAM)\n\n\nAmazon EC2 Dash Button\u3084\u3063\u3066\u307f\u305f\ndash-ec2.py\u3092\u4f5c\u6210\u3002\n\ndash-ec2.py\n\nfrom scapy.all import *\ndef arp_display(pkt):\n  if pkt[ARP].op == 1: #who-has (request)\n    if pkt[ARP].psrc == '0.0.0.0': # ARP probe as your env\n      if pkt[ARP].hwsrc == 'XX:XX:XX:XX:XX:XX': # MAC address as your env \n        print \"Amazon EC2 dash button Pushed.\"\n        os.system(\"aws ec2 run-instances --image-id ami-0c11b26d --count 1 --instance-type t2.micro\")\n        # \u3053\u3053\u8ffd\u52a0\u3057\u305f\u3060\u3051(\u305d\u306e\u4e0a\u306eprint\u306e\u6587\u8a00\u3082\u3061\u3087\u3063\u3068\u5909\u3048\u3066\u308b)\n        sys.exit()\n\nprint sniff(prn=arp_display, filter=\"arp\", store=0, count=10)\n\n\n\n\n\u96d1\u306bEC2\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u308b\nami-0c11b26d\u306famazon linux\u306e\u30d7\u30ec\u30fc\u30f3\u306a\u3084\u3064\n\n\u4ee5\u4e0b\u3001\u5b9f\u884c\u524d\u306e\u30b3\u30f3\u30bd\u30fc\u30eb(\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3044\u306a\u3044)\n\n\u3093\u3067\u5b9f\u884c\u3002\n\n$ sudo python  dash-ec2.py \nWARNING: No route found for IPv6 destination :: (no default route?)\n# \u3053\u3053\u307e\u3067\u51fa\u529b\u3055\u308c\u308b\u306e\u3067Dash\u30dc\u30bf\u30f3\u62bc\u4e0b\nAmazon EC2 dash button Pushed.\n{\n    \"OwnerId\": \"XXXXXXXXXXX\", \n    \"ReservationId\": \"XXXXXXXXXX\", \n    \"Groups\": [], \n    \"Instances\": [\n        {\n            \"Monitoring\": {\n                \"State\": \"disabled\"\n            }, \n            \"PublicDnsName\": \"\", \n            \"RootDeviceType\": \"ebs\", \n            \"State\": {\n                \"Code\": 0, \n                \"Name\": \"pending\"\n            }, \n            \"EbsOptimized\": false, \n            \"LaunchTime\": \"2016-12-06T11:48:25.000Z\", \n            \"PrivateIpAddress\": \"XXX.XXX.XXX.XXX\", \n            \"ProductCodes\": [], \n            \"VpcId\": \"vpc-XXXXXXXXXX\", \n            \"StateTransitionReason\": \"\", \n            \"InstanceId\": \"i-98abXXXXX\", \n            \"ImageId\": \"ami-0c11b26d\", \n...\n\n\n\u4ee5\u4e0b\u3001\u5b9f\u884c\u5f8c\u306e\u30b3\u30f3\u30bd\u30fc\u30eb\u3002(\u3061\u3083\u3093\u3068\u30dc\u30bf\u30f31\u3064\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u304d\u3066\u308b! i-98abXXXXX\u306a\u306e)\n\n\nAws Lambda Dash Button\u3084\u3063\u3066\u307f\u305f\n\u4eca\u56de\u306fhelloworld\u3068\u3044\u3046\u307e\u3093\u307e\u306a\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30f3\u3092\u4e8b\u524d\u306b\u4f5c\u6210\u6e08\u3002\n\n\u307e\u3055\u306b\"Hello from Lambda\"\u3063\u3066\u51fa\u529b\u3059\u308b\u3060\u3051\u306e\u3082\u306e\u3002\ndash-lambda.py\u3092\u4f5c\u6210\u3057\u3066\u3002\n\ndash-lambda.py\n\nfrom scapy.all import *\ndef arp_display(pkt):\n  if pkt[ARP].op == 1: #who-has (request)\n    if pkt[ARP].psrc == '0.0.0.0': # ARP probe as your env\n      if pkt[ARP].hwsrc == 'XX:XX:XX:XX:XX:XX': # MAC address as your env \n        print \"Aws lambda button Pushed.\"\n        os.system(\"aws lambda invoke --invocation-type RequestResponse --function-name helloworld --region ap-northeast-1 --log-type Tail --payload '{}' output.txt\")\n        # \u3053\u3053\u8ffd\u52a0\u3057\u305f\u3060\u3051(\u305d\u306e\u4e0a\u306eprint\u306e\u6587\u8a00\u3082\u3061\u3087\u3063\u3068\u5909\u3048\u3066\u308b)\n        sys.exit()\n\nprint sniff(prn=arp_display, filter=\"arp\", store=0, count=10)\n\n\n\n\u3093\u3067\u5b9f\u884c\u3002\n\n$ sudo python dash-lambda.py \nWARNING: No route found for IPv6 destination :: (no default route?)\n# \u3053\u3053\u307e\u3067\u51fa\u529b\u3055\u308c\u308b\u306e\u3067Dash\u30dc\u30bf\u30f3\u62bc\u4e0b\nAws lambda button Pushed.\n{\n    \"LogResult\": \"XXXXXXXXXXXXXX\", \n    \"StatusCode\": 200\n}\n$ cat output.txt \n\"Hello from Lambda\"$ \n# \u51fa\u529b\u7d50\u679c\u3068\u308c\u3066\u308b!\n\n\n\u3066\u306a\u611f\u3058\u3067\u5b9f\u884c\u3067\u304d\u305f\u3002\n\n\u304a\u308f\u308a\u306b\n\n\u3071\u3063\u3068\u30b0\u30b0\u3063\u3066\u3082\u3067\u3066\u3053\u306a\u304b\u3063\u305f\u306e\u3067\u4eca\u3057\u304b\u306a\u3044\u3068\u601d\u3063\u3066\u52e2\u3044\u3067\u3084\u3063\u305f\n\u3057\u304b\u3057\u300camazon dash button (\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e)\u300d\u3068\u304b\u30b0\u30b0\u308b\u3068\u6d77\u5916\u52e2\u306e\u8a18\u4e8b\u304c\u3044\u304f\u3089\u3067\u3082\u898b\u3064\u304b\u3063\u305f\u306e\u3067\u4fbf\u5229\n\u305d\u3082\u305d\u3082Amazon IoT Button\u304c\u65e5\u672c\u3067\u3082\u3067\u3066\u308c\u3070... AWS IoT Button\u3092\u5206\u89e3\u3057\u3066\u307f\u305f #reinvent \uff5c Developers.IO\n\n\u5b9f\u306f\u6700\u521d\u306fwindows\u3067\u3084\u308d\u3046\u3068\u601d\u3063\u3066\u305f\u3051\u3069scapy\u5165\u308c\u308b\u306e\u304c\u6700\u9ad8\u306b\u3081\u3093\u3069\u304f\u3055\u304f\u3066\u3001\u6c17\u3065\u3044\u305f\u3089chromebook\u306bubuntu\u3044\u308c\u3066\u305d\u306e\u4e0a\u3067\u3084\u3063\u3066\u305f\n\u30dc\u30bf\u30f31\u3064\u3067\u30b5\u30fc\u30d0\u3067\u304d\u308b\u306e\u3061\u3087\u3063\u3068\u611f\u52d5\u3057\u305f\u3057\u3001\u793e\u5185\u306e\u30a2\u30d7\u30ea\u30a8\u30f3\u30b8\u30cb\u30a2\u306b\u3044\u3044\u5024\u6bb5\u3067\u58f2\u308c\u308b\u306e\u3067\u306f?\n\u305d\u3057\u3066\u904a\u3093\u3067\u305f\u3089\u30b9\u30de\u30d5\u30a9\u306e\u901a\u77e5\u9762\u767d\u3044\u3053\u3068\u306bw\n\n\n\n\u4f7f\u3044\u7d42\u308f\u3063\u305f\u306e\u3067\u7121\u52b9\u5316+\u30ea\u30bb\u30c3\u30c8\u3057\u3068\u3044\u305f\u3002 Amazon.co.jp \u30d8\u30eb\u30d7: Dash Button\u3092\u7121\u52b9\u5316\u3059\u308b\n\n\n\u4ee5\u4e0a\u3002\n# \u306f\u3058\u3081\u306b\n![aws\u30dc\u30bf\u30f3.jpg](https://qiita-image-store.s3.amazonaws.com/0/26677/66281a69-7cee-268a-3ebd-354693430cb2.jpeg)\n\n\u30bf\u30a4\u30c8\u30eb\u843d\u3061\u3002 \u3084\u3063\u3071\u4eca\u6642\u306e\u30a4\u30f3\u30d5\u30e9\u30a8\u30f3\u30b8\u30cb\u30a2\u306f\u30dc\u30bf\u30f31\u3064\u3067\u30b5\u30fc\u30d0\u306e1\u3064\u3082\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u306a\u3044\u3068\u306d\u3002\nn\u756a\u714e\u3058\u306apacket\u3092sniff\u3057\u3066dash\u30dc\u30bf\u30f3\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u62fe\u3046\u3084\u3064(python on ubuntu)\u306b\u3001\u4e0b\u306a\u611f\u3058\u306eaws cli\u3092\u53e9\u3044\u305f\u3060\u3051\u306e\u3082\u306e\u3092\u3084\u3063\u3066\u307f\u305f\u3002\n\n- Amazon EC2 Dash Button(EC2\u306eVM\u4f5c\u308b)\n- Aws Lambda Dash Button(lamda\u3092invoke)\n\n\u6982\u306d\u4ee5\u4e0b\u306e\u53c2\u8003\u8a18\u4e8b\u306e\u518d\u73fe\u3067\u3059\u3002\n[How I Hacked Amazon\u2019s $5 WiFi Button to track Baby Data \u2013 Medium](https://medium.com/@edwardbenson/how-i-hacked-amazon-s-5-wifi-button-to-track-baby-data-794214b0bdd8#.825ipgd1o)\n\n\n\n\n# Dash\u30dc\u30bf\u30f3\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\n\n\u308f\u304b\u308a\u3084\u3059\u3044\u89e3\u8aac\u3002 -> [Amazon Dash Button\u8d85\u901f\u89e3\u8aac - Qiita](http://qiita.com/ma2shita/items/b2fbaabf398db4324275)\n\n0. amazon\u3067Dash\u30dc\u30bf\u30f3\u3092\u30dd\u30c1\u3063\u3066\u304a\u5bb6\u306b\u5c4a\u304f\n0. amazon\u306e\u30b9\u30de\u30d5\u30a9\u30a2\u30d7\u30ea\u3092\u8d77\u52d5(\u53d6\u8aac\u306e\u901a\u308a)\n0. \u5de6\u4e0a\u30e1\u30cb\u30e5\u30fc\u2192\u300c\u30a2\u30ab\u30a6\u30f3\u30c8\u30b5\u30fc\u30d3\u30b9\u300d\u2192\u300cDash\u7aef\u672b \u65b0\u3057\u3044\u7aef\u672b\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u300d\u3092\u9078\u629e(\u53d6\u8aac\u306e\u901a\u308a)\n0. LED\u9752\u306b\u306a\u308b\u307e\u3067Dash\u30dc\u30bf\u30f3\u30926\u79d2\u9577\u62bc\u3057(\u53d6\u8aac\u306e\u901a\u308a)\n0. \u30a2\u30d7\u30ea\u3067\u300c\u63a5\u7d9a\u300d(\u53d6\u8aac\u306e\u901a\u308a)\n0. \u30a2\u30d7\u30ea\u3067wifi\u63a5\u7d9a\u60c5\u5831\u5165\u529b(\u53d6\u8aac\u306e\u901a\u308a)\n0. \u5546\u54c1\u3092\u9078\u3070\u306a\u3044(\u53d6\u8aac\u3068\u9055\u3046)\n\n# Dash\u30dc\u30bf\u30f3\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u62fe\u3046\n\n## python\u74b0\u5883\u306e\u6e96\u5099\n\n```bash\n$ sudo apt-get install tcpdump python-crypto python-scapy\n# scapy\u3092\u4f7f\u3044\u305f\u3044\u3060\u3051\u3060\u3051\u3069\u3042\u308c\u3053\u308c\u3044\u308c\u308b\n\n$ pip show scapy\nName: scapy\nVersion: 2.2.3\nLocation: /usr/lib/python2.7/dist-packages\nRequires:\n# scapy\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u3066\u308c\u3070OK\n\n```\n\n## Dash\u30dc\u30bf\u30f3\u306eMAC\u30a2\u30c9\u30ec\u30b9\u306e\u53d6\u5f97\n\ndash-listen-1.py\u3092\u4f5c\u6210\u3057\u3066\u5b9f\u884c\u3002\n\n```py:dash-listen-1.py\n\nfrom scapy.all import *\n\ndef arp_display(pkt):\n  if pkt[ARP].op == 1: #who-has (request)\n    if pkt[ARP].psrc == '0.0.0.0': # ARP Probe\n      print \"ARP Probe from: \" + pkt[ARP].hwsrc\n\nprint sniff(prn=arp_display, filter=\"arp\", store=0, count=10)\n\n```\n\n- \u3082\u3057\u5fc5\u8981\u306a\u3089ARP Probe\u7f6e\u304d\u63db\u3048\u308b\n\n```bash\n$ sudo python dash-listen-1.py \nWARNING: No route found for IPv6 destination :: (no default route?)\n# \u3053\u3053\u307e\u3067\u51fa\u529b\u3055\u308c\u308b\u306e\u3067Dash\u30dc\u30bf\u30f3\u3092\u62bc\u4e0b\nARP Probe from: XX:XX:XX:XX:XX:XX\nARP Probe from: XX:XX:XX:XX:XX:XX\nARP Probe from: XX:XX:XX:XX:XX:XX\n^C[]\n$ \n\n```\n\n\u3053\u308c\u3067MAC\u30a2\u30c9\u30ec\u30b9\u3068\u308c\u308b\u3002\n\n## \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067Dash\u30dc\u30bf\u30f3\u30a4\u30d9\u30f3\u30c8\u3092\u53d6\u5f97\n\n\u5f15\u304d\u7d9a\u304ddash-listen-2.py\u3092\u4f5c\u6210\u3057\u3066\u5b9f\u884c\u3002\n\n```py:dash-listen-2.py\n\nfrom scapy.all import *\ndef arp_display(pkt):\n  if pkt[ARP].op == 1:\n    if pkt[ARP].psrc == '0.0.0.0': # ARP probe as your env\n      if pkt[ARP].hwsrc == 'XX:XX:XX:XX:XX:XX': # MAC address as your env \n        print \"Amazon dash button Pushed.\"\n        sys.exit()\n\nprint sniff(prn=arp_display, filter=\"arp\", store=0, count=10)\n```\n\n- \u3082\u3057\u5fc5\u8981\u306a\u3089ARP Probe\u7f6e\u304d\u63db\u3048\u308b\n- MAC\u30a2\u30c9\u30ec\u30b9\u306f\u4e0a\u8a18\u3067\u53d6\u5f97\u3057\u305f\u3082\u306e\u3078\u66f8\u304d\u63db\u3048\u308b\n- \"sys.exit()\"\u306f\u300c\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u30a4\u30d9\u30f3\u30c8\u53d6\u5f97\u300d\u306e\u901a\u308a\u8907\u6570\u56de\u30d1\u30b1\u30c3\u30c8\u62fe\u3046\u306e\u3067\u6700\u521d\u306e1\u3064\u51e6\u7406\u3057\u305f\u3089\u7d42\u4e86\u3059\u308b\u305f\u3081\n\n```bash\n\n$ sudo python dash-listen-2.py \nWARNING: No route found for IPv6 destination :: (no default route?)\n# \u3053\u3053\u307e\u3067\u51fa\u529b\u3055\u308c\u308b\u306e\u3067Dash\u30dc\u30bf\u30f3\u62bc\u4e0b\nAmazon dash button Pushed.\n$\n\n```\n\n\u3053\u308c\u3067\u30a4\u30d9\u30f3\u30c8\u62fe\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\n# Amazon Web Service Dash button\n\u3055\u3066\u3001\u3044\u3088\u3044\u3088\u672c\u984c\u3060\u3051\u3069\u7d50\u5c40\u306f\u2191\u306e\u300cprint \"Amazon dash button Pushed.\"\u300d\u3092aws cli\u306e\u3057\u3087\u307c\u3044\u30b3\u30de\u30f3\u30c9\u306b\u7f6e\u304d\u63db\u3048\u3066\u308b\u3060\u3051\u3067\u3042\u308b\u3002\n\n\u4ee5\u4e0b\u306f\u6e96\u5099\u3057\u3066\u3042\u308b\u524d\u63d0\u3002\n\n- aws cli\u3092\u5c0e\u5165\u3057\u3066aws configure\u3067\u8a8d\u8a3c\u6e08\n- ec2\u306eami\u306f\u65e2\u5b58(\u4eca\u56de\u306famazon linux\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3042\u308b\u306e)\n- lamda\u95a2\u6570\u306f\u4f5c\u6210\u6e08(\u304a\u3088\u3073IAM)\n\n## Amazon EC2 Dash Button\u3084\u3063\u3066\u307f\u305f\n\ndash-ec2.py\u3092\u4f5c\u6210\u3002\n\n```py:dash-ec2.py\n\nfrom scapy.all import *\ndef arp_display(pkt):\n  if pkt[ARP].op == 1: #who-has (request)\n    if pkt[ARP].psrc == '0.0.0.0': # ARP probe as your env\n      if pkt[ARP].hwsrc == 'XX:XX:XX:XX:XX:XX': # MAC address as your env \n        print \"Amazon EC2 dash button Pushed.\"\n        os.system(\"aws ec2 run-instances --image-id ami-0c11b26d --count 1 --instance-type t2.micro\")\n        # \u3053\u3053\u8ffd\u52a0\u3057\u305f\u3060\u3051(\u305d\u306e\u4e0a\u306eprint\u306e\u6587\u8a00\u3082\u3061\u3087\u3063\u3068\u5909\u3048\u3066\u308b)\n        sys.exit()\n\nprint sniff(prn=arp_display, filter=\"arp\", store=0, count=10)\n\n```\n\n- \u96d1\u306bEC2\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u308b\n- ami-0c11b26d\u306famazon linux\u306e\u30d7\u30ec\u30fc\u30f3\u306a\u3084\u3064\n\n\u4ee5\u4e0b\u3001\u5b9f\u884c\u524d\u306e\u30b3\u30f3\u30bd\u30fc\u30eb(\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3044\u306a\u3044)\n![before.png](https://qiita-image-store.s3.amazonaws.com/0/26677/4791a1bd-84d1-083c-2b51-6faba750925e.png)\n\n\n\u3093\u3067\u5b9f\u884c\u3002\n\n```bash\n\n$ sudo python  dash-ec2.py \nWARNING: No route found for IPv6 destination :: (no default route?)\n# \u3053\u3053\u307e\u3067\u51fa\u529b\u3055\u308c\u308b\u306e\u3067Dash\u30dc\u30bf\u30f3\u62bc\u4e0b\nAmazon EC2 dash button Pushed.\n{\n    \"OwnerId\": \"XXXXXXXXXXX\", \n    \"ReservationId\": \"XXXXXXXXXX\", \n    \"Groups\": [], \n    \"Instances\": [\n        {\n            \"Monitoring\": {\n                \"State\": \"disabled\"\n            }, \n            \"PublicDnsName\": \"\", \n            \"RootDeviceType\": \"ebs\", \n            \"State\": {\n                \"Code\": 0, \n                \"Name\": \"pending\"\n            }, \n            \"EbsOptimized\": false, \n            \"LaunchTime\": \"2016-12-06T11:48:25.000Z\", \n            \"PrivateIpAddress\": \"XXX.XXX.XXX.XXX\", \n            \"ProductCodes\": [], \n            \"VpcId\": \"vpc-XXXXXXXXXX\", \n            \"StateTransitionReason\": \"\", \n            \"InstanceId\": \"i-98abXXXXX\", \n            \"ImageId\": \"ami-0c11b26d\", \n...\n\n```\n\n\u4ee5\u4e0b\u3001\u5b9f\u884c\u5f8c\u306e\u30b3\u30f3\u30bd\u30fc\u30eb\u3002(\u3061\u3083\u3093\u3068\u30dc\u30bf\u30f31\u3064\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u304d\u3066\u308b! i-98abXXXXX\u306a\u306e)\n![after.png](https://qiita-image-store.s3.amazonaws.com/0/26677/16c75e68-ac9c-889c-3d35-8b5d1cad70cc.png)\n\n\n## Aws Lambda Dash Button\u3084\u3063\u3066\u307f\u305f\n\n\u4eca\u56de\u306fhelloworld\u3068\u3044\u3046\u307e\u3093\u307e\u306a\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30f3\u3092\u4e8b\u524d\u306b\u4f5c\u6210\u6e08\u3002\n![lambda.png](https://qiita-image-store.s3.amazonaws.com/0/26677/b3f52fe3-7553-1c3a-bd5c-f15bc6de0b72.png)\n\u307e\u3055\u306b\"Hello from Lambda\"\u3063\u3066\u51fa\u529b\u3059\u308b\u3060\u3051\u306e\u3082\u306e\u3002\n\ndash-lambda.py\u3092\u4f5c\u6210\u3057\u3066\u3002\n\n```py:dash-lambda.py\n\nfrom scapy.all import *\ndef arp_display(pkt):\n  if pkt[ARP].op == 1: #who-has (request)\n    if pkt[ARP].psrc == '0.0.0.0': # ARP probe as your env\n      if pkt[ARP].hwsrc == 'XX:XX:XX:XX:XX:XX': # MAC address as your env \n        print \"Aws lambda button Pushed.\"\n        os.system(\"aws lambda invoke --invocation-type RequestResponse --function-name helloworld --region ap-northeast-1 --log-type Tail --payload '{}' output.txt\")\n        # \u3053\u3053\u8ffd\u52a0\u3057\u305f\u3060\u3051(\u305d\u306e\u4e0a\u306eprint\u306e\u6587\u8a00\u3082\u3061\u3087\u3063\u3068\u5909\u3048\u3066\u308b)\n        sys.exit()\n\nprint sniff(prn=arp_display, filter=\"arp\", store=0, count=10)\n\n```\n\n\u3093\u3067\u5b9f\u884c\u3002\n\n```bash\n\n$ sudo python dash-lambda.py \nWARNING: No route found for IPv6 destination :: (no default route?)\n# \u3053\u3053\u307e\u3067\u51fa\u529b\u3055\u308c\u308b\u306e\u3067Dash\u30dc\u30bf\u30f3\u62bc\u4e0b\nAws lambda button Pushed.\n{\n    \"LogResult\": \"XXXXXXXXXXXXXX\", \n    \"StatusCode\": 200\n}\n$ cat output.txt \n\"Hello from Lambda\"$ \n# \u51fa\u529b\u7d50\u679c\u3068\u308c\u3066\u308b!\n\n```\n\n\u3066\u306a\u611f\u3058\u3067\u5b9f\u884c\u3067\u304d\u305f\u3002\n\n# \u304a\u308f\u308a\u306b\n\n- \u3071\u3063\u3068\u30b0\u30b0\u3063\u3066\u3082\u3067\u3066\u3053\u306a\u304b\u3063\u305f\u306e\u3067\u4eca\u3057\u304b\u306a\u3044\u3068\u601d\u3063\u3066\u52e2\u3044\u3067\u3084\u3063\u305f\n- \u3057\u304b\u3057\u300camazon dash button (\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e)\u300d\u3068\u304b\u30b0\u30b0\u308b\u3068\u6d77\u5916\u52e2\u306e\u8a18\u4e8b\u304c\u3044\u304f\u3089\u3067\u3082\u898b\u3064\u304b\u3063\u305f\u306e\u3067\u4fbf\u5229\n- \u305d\u3082\u305d\u3082Amazon IoT Button\u304c\u65e5\u672c\u3067\u3082\u3067\u3066\u308c\u3070... [AWS IoT Button\u3092\u5206\u89e3\u3057\u3066\u307f\u305f #reinvent \uff5c Developers.IO](http://dev.classmethod.jp/cloud/aws/decomposition-aws-iot-button/)\n- \u5b9f\u306f\u6700\u521d\u306fwindows\u3067\u3084\u308d\u3046\u3068\u601d\u3063\u3066\u305f\u3051\u3069scapy\u5165\u308c\u308b\u306e\u304c\u6700\u9ad8\u306b\u3081\u3093\u3069\u304f\u3055\u304f\u3066\u3001\u6c17\u3065\u3044\u305f\u3089chromebook\u306bubuntu\u3044\u308c\u3066\u305d\u306e\u4e0a\u3067\u3084\u3063\u3066\u305f\n- \u30dc\u30bf\u30f31\u3064\u3067\u30b5\u30fc\u30d0\u3067\u304d\u308b\u306e\u3061\u3087\u3063\u3068\u611f\u52d5\u3057\u305f\u3057\u3001\u793e\u5185\u306e\u30a2\u30d7\u30ea\u30a8\u30f3\u30b8\u30cb\u30a2\u306b\u3044\u3044\u5024\u6bb5\u3067\u58f2\u308c\u308b\u306e\u3067\u306f?\n- \u305d\u3057\u3066\u904a\u3093\u3067\u305f\u3089\u30b9\u30de\u30d5\u30a9\u306e\u901a\u77e5\u9762\u767d\u3044\u3053\u3068\u306bw\n\n![\u30b9\u30de\u30d5\u30a9\u306e\u30b9\u30af\u30b7\u30e7.png](https://qiita-image-store.s3.amazonaws.com/0/26677/ca02065e-dc99-ff18-338d-8241dccb5e4d.png)\n\n- \u4f7f\u3044\u7d42\u308f\u3063\u305f\u306e\u3067\u7121\u52b9\u5316+\u30ea\u30bb\u30c3\u30c8\u3057\u3068\u3044\u305f\u3002 [Amazon.co.jp \u30d8\u30eb\u30d7: Dash Button\u3092\u7121\u52b9\u5316\u3059\u308b](https://www.amazon.co.jp/gp/help/customer/display.html?nodeId=201746400)\n\n\u4ee5\u4e0a\u3002\n", "tags": ["AmazonDashButton", "Python", "EC2", "lambda", "Ubuntu"]}