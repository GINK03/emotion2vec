{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\u56fa\u6709\u8868\u73fe\u62bd\u51fa\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u306b\u51fa\u73fe\u3059\u308b\u4eba\u540d\u3084\u5730\u540d\u306a\u3069\u306e\u56fa\u6709\u540d\u8a5e\u3084\u3001\u65e5\u4ed8\u3084\u6642\u9593\u306a\u3069\u306e\u6570\u5024\u8868\u73fe\u3092\u62bd\u51fa\u3059\u308b\u6280\u8853\u3067\u3059\u3002\u56fa\u6709\u8868\u73fe\u62bd\u51fa\u306f\u3001\u8cea\u554f\u5fdc\u7b54\u30b7\u30b9\u30c6\u30e0\u3001\u5bfe\u8a71\u30b7\u30b9\u30c6\u30e0\u3001\u60c5\u5831\u62bd\u51fa\u3068\u3044\u3063\u305f\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u3092\u7528\u3044\u305f\u5fdc\u7528\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u8981\u7d20\u6280\u8853\u3068\u3057\u3066\u3082\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002\n\u4eca\u56de\u306f\u6a5f\u68b0\u5b66\u7fd2\u6280\u8853\u3092\u4f7f\u3063\u3066\u56fa\u6709\u8868\u73fe\u62bd\u51fa\u5668\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\u203b\u6ce8\u610f\u4e8b\u9805\n\u7406\u8ad6\u7684\u306a\u8a71\u306f\u4e00\u5207\u51fa\u3066\u304d\u307e\u305b\u3093\u3002\u7406\u8ad6\u3092\u77e5\u308a\u305f\u3044\u65b9\u306f\u4ed6\u3092\u5f53\u305f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u5bfe\u8c61\u8aad\u8005\n\n\u56fa\u6709\u8868\u73fe\u62bd\u51fa\u3092\u5c11\u3057\u306f\u77e5\u3063\u3066\u3044\u308b\u65b9\n\u56fa\u6709\u8868\u73fe\u62bd\u51fa\u5668\u3092\u4f5c\u3063\u3066\u307f\u305f\u3044\u65b9\nPython\u30b3\u30fc\u30c9\u3092\u8aad\u3081\u308b\u65b9\n\n\n\u56fa\u6709\u8868\u73fe\u62bd\u51fa\u3068\u306f\uff1f\n\u3053\u3053\u3067\u306f\u3001\u56fa\u6709\u8868\u73fe\u62bd\u51fa\u306e\u6982\u8981\u3068\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\n\n\u6982\u8981\n\u56fa\u6709\u8868\u73fe\u62bd\u51fa\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u306b\u51fa\u73fe\u3059\u308b\u4eba\u540d\u3084\u5730\u540d\u306a\u3069\u306e\u56fa\u6709\u540d\u8a5e\u3084\u3001\u65e5\u4ed8\u3084\u6642\u9593\u306a\u3069\u306e\u6570\u5024\u8868\u73fe\u3092\u62bd\u51fa\u3059\u308b\u6280\u8853\u3067\u3059\u3002\u5177\u4f53\u4f8b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u4ee5\u4e0b\u306e\u6587\u304b\u3089\u56fa\u6709\u8868\u73fe\u3092\u62bd\u51fa\u3057\u3066\u307f\u307e\u3059\u3002\n\u592a\u90ce\u306f5\u670818\u65e5\u306e\u671d9\u6642\u306b\u82b1\u5b50\u306b\u4f1a\u3044\u306b\u884c\u3063\u305f\u3002\n\n\u4e0a\u8a18\u306e\u6587\u306b\u542b\u307e\u308c\u308b\u56fa\u6709\u8868\u73fe\u3092\u62bd\u51fa\u3059\u308b\u3068\u4eba\u540d\u3068\u3057\u3066\u592a\u90ce\u3068\u82b1\u5b50\u3001\u65e5\u4ed8\u3068\u3057\u30665\u670818\u65e5\u3001\u6642\u9593\u3068\u3057\u3066\u671d9\u6642\u304c\u62bd\u51fa\u3067\u304d\u307e\u3059\u3002\n\u4e0a\u8a18\u306e\u4f8b\u3067\u306f\u56fa\u6709\u8868\u73fe\u306e\u30af\u30e9\u30b9\u3068\u3057\u3066\u4eba\u540d\u3001\u65e5\u4ed8\u3001\u6642\u9593\u304c\u62bd\u51fa\u3055\u308c\u307e\u3057\u305f\u3002\u4e00\u822c\u7684\u306b\u306f\u4ee5\u4e0b\u306e8\u3064\u306e\u30af\u30e9\u30b9\u304c\u3088\u304f\u4f7f\u308f\u308c\u307e\u3059\u3002\n\n\n\n\u30af\u30e9\u30b9\n\u4f8b\n\n\n\n\nART \u56fa\u6709\u7269\u540d\u3000\n\u30ce\u30fc\u30d9\u30eb\u6587\u5b66\u8cde\u3001Windows7\n\n\nLOC \u5730\u540d\n\u30a2\u30e1\u30ea\u30ab\u3001\u5343\u8449\u770c\n\n\nORG \u7d44\u7e54\n\u81ea\u6c11\u515a\u3001NHK            \u3000\n\n\nPSN \u4eba\u540d\n\u5b89\u500d\u664b\u4e09\u3001\u30e1\u30eb\u30b1\u30eb     \u3000\u3000\n\n\nDAT \u65e5\u4ed8\n1\u670829\u65e5\u30012016/01/29 \u3000\u3000\n\n\nTIM \u6642\u9593\n\u5348\u5f8c\u4e09\u6642\u300110:30\n\n\nMNY \u91d1\u984d\n241\u5186\u30018\u30c9\u30eb           \u3000\n\n\nPNT \u5272\u5408\n10\uff05\u30013\u5272           \u3000\u3000\n\n\n\n\n\u65b9\u6cd5\n\u56fa\u6709\u8868\u73fe\u62bd\u51fa\u3092\u884c\u3046\u65b9\u6cd5\u3068\u3057\u3066\u3001\u5f62\u614b\u7d20\u89e3\u6790\u6e08\u307f\u306e\u6587\u306b\u5bfe\u3057\u3066\u30e9\u30d9\u30eb\u4ed8\u3051\u3092\u884c\u3046\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u306f\u300c\u592a\u90ce\u306f5\u670818\u65e5\u306e\u671d9\u6642\u306b\u30fb\u30fb\u30fb\u300d\u3068\u3044\u3046\u6587\u3092\u5f62\u614b\u7d20\u89e3\u6790\u3057\u3066\u304b\u3089\u30e9\u30d9\u30eb\u4ed8\u3051\u3092\u884c\u3063\u305f\u4f8b\u3067\u3059\u3002\n\nB-XXX\u3001I-XXX \u3068\u3044\u3046\u30e9\u30d9\u30eb\u304c\u3053\u308c\u3089\u306e\u6587\u5b57\u5217\u304c\u56fa\u6709\u8868\u73fe\u3067\u3042\u308b\u3053\u3068\u3092\u8868\u73fe\u3057\u3066\u3044\u307e\u3059\u3002B-XXX \u306f\u56fa\u6709\u8868\u73fe\u6587\u5b57\u5217\u306e\u59cb\u307e\u308a\u3001I-XXX \u306f\u56fa\u6709\u8868\u73fe\u6587\u5b57\u5217\u304c\u7d9a\u3044\u3066\u3044\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u3066\u3044\u307e\u3059\u3002XXX \u90e8\u5206\u306b\u306fORG\u3001PSN \u306a\u3069\u306e\u56fa\u6709\u8868\u73fe\u30af\u30e9\u30b9\u304c\u5165\u308a\u307e\u3059\u3002\u56fa\u6709\u8868\u73fe\u3067\u306a\u3044\u90e8\u5206\u306b\u306f O \u3068\u3044\u3046\u30e9\u30d9\u30eb\u304c\u4ed8\u4e0e\u3055\u308c\u307e\u3059\u3002\n\u30e9\u30d9\u30eb\u4ed8\u3051\u306f\u898f\u5247\u3092\u7528\u3044\u3066\u884c\u3046\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u304c\u3001\u4eca\u56de\u306f\u6a5f\u68b0\u5b66\u7fd2\u6280\u8853\u3092\u7528\u3044\u3066\u884c\u3044\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u3042\u3089\u304b\u3058\u3081\u30e9\u30d9\u30eb\u4ed8\u3051\u3055\u308c\u305f\u5b66\u7fd2\u30c7\u30fc\u30bf\u304b\u3089\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u3001\u305d\u306e\u30e2\u30c7\u30eb\u3092\u7528\u3044\u3066\u30e9\u30d9\u30eb\u306e\u4ed8\u3044\u3066\u3044\u306a\u3044\u6587\u306b\u30e9\u30d9\u30eb\u4ed8\u3051\u3092\u884c\u3044\u307e\u3059\u3002\u5177\u4f53\u7684\u306b\u306fCRF\u3068\u3044\u3046\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7528\u3044\u3066\u5b66\u7fd2\u3092\u884c\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\u305d\u308c\u3067\u306f\u5b9f\u969b\u306b\u624b\u3092\u52d5\u304b\u3057\u3066\u884c\u304d\u307e\u3057\u3087\u3046\u3002\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u307e\u305a\u306f\u5fc5\u8981\u306aPython\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3068\u3053\u308d\u304b\u3089\u59cb\u3081\u307e\u3059\u3002\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002CRF\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066CRFsuite\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3044\u307e\u3059\u3002\npip install numpy\npip install scipy\npip install sklearn\npip install python-crfsuite\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u3089\u5fc5\u8981\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u3092import\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nfrom itertools import chain\nimport pycrfsuite\nimport sklearn\nfrom sklearn.metrics import classification_report\nfrom sklearn.preprocessing import LabelBinarizer\n\n\n\u56fa\u6709\u8868\u73fe\u62bd\u51fa\u5668\u3092\u69cb\u7bc9\u3059\u308b\u306e\u306b\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\nCRF\u306f\u6559\u5e2b\u3042\u308a\u5b66\u7fd2\u306a\u306e\u3067\u6559\u5e2b\u30c7\u30fc\u30bf\u304c\u30bf\u30b0\u4ed8\u3051\u3055\u308c\u305f\u30c7\u30fc\u30bf\u304c\u5fc5\u8981\u3067\u3059\u3002\u4eca\u56de\u306f\u3042\u3089\u304b\u3058\u3081\u30bf\u30b0\u4ed8\u3051\u3057\u305f\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3057\u3066\u304a\u304d\u307e\u3057\u305f\u3002\u3053\u3061\u3089\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30d5\u30a1\u30a4\u30eb\u540d\u306f\u300chironsan.txt\u300d\u3067\u3059\u3002\n\u305d\u308c\u3067\u306f\u3001\u307e\u305a\u306f\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u305f\u3081\u306e\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\nimport codecs\n\nclass CorpusReader(object):\n\n    def __init__(self, path):\n        with codecs.open(path, encoding='utf-8') as f:\n            sent = []\n            sents = []\n            for line in f:\n                if line == '\\n':\n                    sents.append(sent)\n                    sent = []\n                    continue\n                morph_info = line.strip().split('\\t')\n                sent.append(morph_info)\n        train_num = int(len(sents) * 0.9)\n        self.__train_sents = sents[:train_num]\n        self.__test_sents = sents[train_num:]\n\n    def iob_sents(self, name):\n        if name == 'train':\n            return self.__train_sents\n        elif name == 'test':\n            return self.__test_sents\n        else:\n            return None\n\n\u6b21\u306b\u3001\u4f5c\u6210\u3057\u305f\u30af\u30e9\u30b9\u3092\u7528\u3044\u3066\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\u5b66\u7fd2\u30c7\u30fc\u30bf\u6570\u304c450\u6587\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u6570\u304c50\u6587\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nc = CorpusReader('hironsan.txt')\ntrain_sents = c.iob_sents('train')\ntest_sents = c.iob_sents('test')\n\n\u8aad\u307f\u8fbc\u3093\u3060\u30c7\u30fc\u30bf\u306e\u5f62\u5f0f\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u5f62\u614b\u7d20\u89e3\u6790\u5668\u300cMeCab\u300d\u3067\u5f62\u614b\u7d20\u89e3\u6790\u3092\u884c\u3063\u305f\u5f8c\u306bIOB2\u30bf\u30b0\u3092\u4ed8\u3051\u3066\u3044\u307e\u3059\u3002\u30c7\u30fc\u30bf\u306f\u4e00\u6587\u3054\u3068\u306b\u5206\u304b\u308c\u3066\u304a\u308a\u3001\u4e00\u6587\u306f\u8907\u6570\u306e\u5f62\u614b\u7d20\u60c5\u5831\u306e\u96c6\u307e\u308a\u304b\u3089\u69cb\u6210\u3055\u308c\u307e\u3059\u3002\n>>> train_sents[0]\n[['2005', '\u540d\u8a5e', '\u6570', '*', '*', '*', '*', '*', 'B-DAT'],\n ['\u5e74', '\u540d\u8a5e', '\u63a5\u5c3e', '\u52a9\u6570\u8a5e', '*', '*', '*', '\u5e74', '\u30cd\u30f3', '\u30cd\u30f3', 'I-DAT'],\n ['7', '\u540d\u8a5e', '\u6570', '*', '*', '*', '*', '*', 'I-DAT'],\n ['\u6708', '\u540d\u8a5e', '\u4e00\u822c', '*', '*', '*', '*', '\u6708', '\u30c4\u30ad', '\u30c4\u30ad', 'I-DAT'],\n ['14', '\u540d\u8a5e', '\u6570', '*', '*', '*', '*', '*', 'I-DAT'],\n ['\u65e5', '\u540d\u8a5e', '\u63a5\u5c3e', '\u52a9\u6570\u8a5e', '*', '*', '*', '\u65e5', '\u30cb\u30c1', '\u30cb\u30c1', 'I-DAT'],\n ['\u3001', '\u8a18\u53f7', '\u8aad\u70b9', '*', '*', '*', '*', '\u3001', '\u3001', '\u3001', 'O'],\n...\n]\n\n\u305d\u308c\u3067\u306f\u6b21\u306b\u3001\u56fa\u6709\u8868\u73fe\u62bd\u51fa\u306b\u4f7f\u3046\u7d20\u6027\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u4f7f\u7528\u3059\u308b\u7d20\u6027\n\u3053\u3053\u3067\u306f\u3001\u4f7f\u7528\u3059\u308b\u7d20\u6027\u306e\u6982\u8981\u3092\u8aac\u660e\u3057\u3066\u304b\u3089\u3001\u305d\u308c\u3092\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u6982\u8981\n\u6b21\u306b\u3001\u4f7f\u7528\u3059\u308b\u7d20\u6027\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\u4eca\u56de\u306f\u3001\u524d\u5f8c\uff12\u6587\u5b57\u306e\u5358\u8a9e\u3001\u54c1\u8a5e\u7d30\u5206\u985e\u3001\u6587\u5b57\u7a2e\u3001\u56fa\u6709\u8868\u73fe\u30bf\u30b0\u3092\u4f7f\u3044\u307e\u3059\u3002\u4ee5\u4e0b\u306b\u3053\u308c\u3089\u306e\u7d20\u6027\u3092\u7528\u3044\u305f\u5834\u5408\u306e\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\u67a0\u3067\u56f2\u307e\u308c\u305f\u90e8\u5206\u304c\u4f7f\u7528\u3059\u308b\u7d20\u6027\u3067\u3059\u3002\n\n\u6587\u5b57\u7a2e\u306e\u5206\u985e\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u5168\u90e8\u3067\uff17\u7a2e\u985e\u3042\u308a\u307e\u3059\u3002\n\n\n\n\u6587\u5b57\u7a2e\u30bf\u30b0\n\u8aac\u660e\n\n\n\n\nZSPACE\n\u7a7a\u767d\n\n\nZDIGIT\n\u30a2\u30e9\u30d3\u30a2\u6570\u5b57\n\n\nZLLET\n\u82f1\u5b57\u5c0f\u6587\u5b57\n\n\nZULET\n\u82f1\u5b57\u5927\u6587\u5b57\n\n\nHIRAG\n\u3072\u3089\u304c\u306a\n\n\nKATAK\n\u30ab\u30bf\u30ab\u30ca\n\n\nOTHER\n\u305d\u306e\u4ed6\n\n\n\n\u7d20\u6027\u3068\u3057\u3066\u7528\u3044\u308b\u6587\u5b57\u7a2e\u306f\u5358\u8a9e\u306b\u542b\u307e\u308c\u308b\u3059\u3079\u3066\u306e\u6587\u5b57\u7a2e\u3092\u7d50\u5408\u3057\u305f\u3082\u306e\u3067\u3059\u3002\u4f8b\u3048\u3070\u300c\u591a\u3044\u300d\u3068\u3044\u3046\u5358\u8a9e\u306f\u6f22\u5b57\u3068\u3072\u3089\u304c\u306a\u3092\u542b\u3093\u3067\u3044\u307e\u3059\u3002\u3072\u3089\u304c\u306a\u306e\u6587\u5b57\u7a2e\u30bf\u30b0\u306fHIRAG\u3067\u3042\u308a\u3001\u6f22\u5b57\u306e\u6587\u5b57\u7a2e\u30bf\u30b0\u306fOTHER\u3067\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u300c\u591a\u3044\u300d\u3068\u3044\u3046\u5358\u8a9e\u306e\u6587\u5b57\u7a2e\u306f\u300cHIRAG-OTHER\u300d\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u7d20\u6027\u62bd\u51fa\u306e\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\n\n\u6587\u5b57\u7a2e\u306e\u5224\u5b9a\n\u6587\u5b57\u7a2e\u306e\u5224\u5b9a\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059\u3002\u6587\u5b57\u5217\u306b\u542b\u307e\u308c\u308b\u3059\u3079\u3066\u306e\u6587\u5b57\u7a2e\u3092-(\u30cf\u30a4\u30d5\u30f3)\u3067\u7d50\u5408\u3057\u3066\u3044\u307e\u3059\u3002\ndef is_hiragana(ch):\n    return 0x3040 <= ord(ch) <= 0x309F\n\ndef is_katakana(ch):\n    return 0x30A0 <= ord(ch) <= 0x30FF\n\ndef get_character_type(ch):\n    if ch.isspace():\n        return 'ZSPACE'\n    elif ch.isdigit():\n        return 'ZDIGIT'\n    elif ch.islower():\n        return 'ZLLET'\n    elif ch.isupper():\n        return 'ZULET'\n    elif is_hiragana(ch):\n        return 'HIRAG'\n    elif is_katakana(ch):\n        return 'KATAK'\n    else:\n        return 'OTHER'\n\ndef get_character_types(string):\n    character_types = map(get_character_type, string)\n    character_types_str = '-'.join(sorted(set(character_types)))\n\n    return character_types_str\n\n\n\u54c1\u8a5e\u7d30\u5206\u985e\u306e\u62bd\u51fa\n\u5f62\u614b\u7d20\u60c5\u5831\u304b\u3089\u54c1\u8a5e\u7d30\u5206\u985e\u3092\u62bd\u51fa\u3059\u308b\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\ndef extract_pos_with_subtype(morph):\n    idx = morph.index('*')\n\n    return '-'.join(morph[1:idx])\n\n\n\u6587\u304b\u3089\u306e\u7d20\u6027\u62bd\u51fa\n\u4ee5\u4e0a\u3092\u3075\u307e\u3048\u3066\u3001\u5404\u5358\u8a9e\u306b\u5bfe\u3057\u3066\u7d20\u6027\u62bd\u51fa\u3092\u3059\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u5c11\u3057\u5197\u9577\u3067\u3059\u304c\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\ndef word2features(sent, i):\n    word = sent[i][0]\n    chtype = get_character_types(sent[i][0])\n    postag = extract_pos_with_subtype(sent[i])\n    features = [\n        'bias',\n        'word=' + word,\n        'type=' + chtype,\n        'postag=' + postag,\n    ]\n    if i >= 2:\n        word2 = sent[i-2][0]\n        chtype2 = get_character_types(sent[i-2][0])\n        postag2 = extract_pos_with_subtype(sent[i-2])\n        iobtag2 = sent[i-2][-1]\n        features.extend([\n            '-2:word=' + word2,\n            '-2:type=' + chtype2,\n            '-2:postag=' + postag2,\n            '-2:iobtag=' + iobtag2,\n        ])\n    else:\n        features.append('BOS')\n\n    if i >= 1:\n        word1 = sent[i-1][0]\n        chtype1 = get_character_types(sent[i-1][0])\n        postag1 = extract_pos_with_subtype(sent[i-1])\n        iobtag1 = sent[i-1][-1]\n        features.extend([\n            '-1:word=' + word1,\n            '-1:type=' + chtype1,\n            '-1:postag=' + postag1,\n            '-1:iobtag=' + iobtag1,\n        ])\n    else:\n        features.append('BOS')\n\n    if i < len(sent)-1:\n        word1 = sent[i+1][0]\n        chtype1 = get_character_types(sent[i+1][0])\n        postag1 = extract_pos_with_subtype(sent[i+1])\n        features.extend([\n            '+1:word=' + word1,\n            '+1:type=' + chtype1,\n            '+1:postag=' + postag1,\n        ])\n    else:\n        features.append('EOS')\n\n    if i < len(sent)-2:\n        word2 = sent[i+2][0]\n        chtype2 = get_character_types(sent[i+2][0])\n        postag2 = extract_pos_with_subtype(sent[i+2])\n        features.extend([\n            '+2:word=' + word2,\n            '+2:type=' + chtype2,\n            '+2:postag=' + postag2,\n        ])\n    else:\n        features.append('EOS')\n\n    return features\n\n\ndef sent2features(sent):\n    return [word2features(sent, i) for i in range(len(sent))]\n\n\ndef sent2labels(sent):\n    return [morph[-1] for morph in sent]\n\n\ndef sent2tokens(sent):\n    return [morph[0] for morph in sent]\n\nsent2features\u3067\u6587\u304b\u3089\u7d20\u6027\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002\u5b9f\u969b\u306b\u62bd\u51fa\u3055\u308c\u308b\u7d20\u6027\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n>>> sent2features(train_sents[0])[0]\n['bias',\n 'word=2005',\n 'type=ZDIGIT',\n 'postag=\u540d\u8a5e-\u6570',\n 'BOS',\n 'BOS',\n '+1:word=\u5e74',\n '+1:type=OTHER',\n '+1:postag=\u540d\u8a5e-\u63a5\u5c3e-\u52a9\u6570\u8a5e',\n '+2:word=7',\n '+2:type=ZDIGIT',\n '+2:postag=\u540d\u8a5e-\u6570']\n\n\u30c7\u30fc\u30bf\u304b\u3089\u7d20\u6027\u304c\u62bd\u51fa\u3067\u304d\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3057\u305f\u3002\u5f8c\u3067\u4f7f\u7528\u3059\u308b\u305f\u3081\u306b\u3001\u30c7\u30fc\u30bf\u304b\u3089\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u7528\u306e\u7d20\u6027\u3068\u30e9\u30d9\u30eb\u3092\u62bd\u51fa\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nX_train = [sent2features(s) for s in train_sents]\ny_train = [sent2labels(s) for s in train_sents]\n\nX_test = [sent2features(s) for s in test_sents]\ny_test = [sent2labels(s) for s in test_sents]\n\n\n\u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\n\u30e2\u30c7\u30eb\u3092\u5b66\u7fd2\u3059\u308b\u305f\u3081\u306b\u3001pycrfsuite.Trainer\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3001\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307e\u305b\u305f\u5f8c\u3001train\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\u307e\u305a\u306f\u3001Trainer\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\u3068\u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u3092\u884c\u3044\u307e\u3059\u3002\ntrainer = pycrfsuite.Trainer(verbose=False)\n\nfor xseq, yseq in zip(X_train, y_train):\n    trainer.append(xseq, yseq)\n\n\u6b21\u306b\u5b66\u7fd2\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u672c\u6765\u306f\u958b\u767a\u7528\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u6c7a\u3081\u308b\u3079\u304d\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u56fa\u5b9a\u5024\u3068\u3057\u3066\u304a\u304d\u307e\u3059\u3002\ntrainer.set_params({\n    'c1': 1.0,   # coefficient for L1 penalty\n    'c2': 1e-3,  # coefficient for L2 penalty\n    'max_iterations': 50,  # stop earlier\n\n    # include transitions that are possible, but not observed\n    'feature.possible_transitions': True\n})\n\n\u305d\u308c\u3067\u306f\u6e96\u5099\u304c\u6574\u3063\u305f\u306e\u3067\u30e2\u30c7\u30eb\u3092\u5b66\u7fd2\u3055\u305b\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u6307\u5b9a\u3057\u3066\u3001train\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002\ntrainer.train('model.crfsuite')\n\n\u5b9f\u884c\u304c\u7d42\u308f\u308b\u3068\u3001\u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u4e2d\u306b\u3001\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\n\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306b\u306f\u3001pycrfsuite.Tagger\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3001\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3092\u8aad\u307f\u8fbc\u307f\u3001tag\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u307e\u305a\u306f\u3001Tagger\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\u3068\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u3092\u884c\u3044\u307e\u3059\u3002\ntagger = pycrfsuite.Tagger()\ntagger.open('model.crfsuite')\n\n\u305d\u308c\u3067\u306f\u3001\u5b9f\u969b\u306b\u6587\u306b\u5bfe\u3057\u3066\u30bf\u30b0\u4ed8\u3051\u3092\u3057\u3066\u307f\u307e\u3059\u3002\nexample_sent = test_sents[0]\nprint(' '.join(sent2tokens(example_sent)))\n\nprint(\"Predicted:\", ' '.join(tagger.tag(sent2features(example_sent))))\nprint(\"Correct:  \", ' '.join(sent2labels(example_sent)))\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u7d50\u679c\u304c\u5f97\u3089\u308c\u308b\u306f\u305a\u3067\u3059\u3002Predicted\u306f\u4f5c\u6210\u3057\u305f\u30e2\u30c7\u30eb\u3092\u7528\u3044\u3066\u4e88\u60f3\u3057\u305f\u30bf\u30b0\u5217\u3067\u3001Correct\u306f\u6b63\u89e3\u306e\u30bf\u30b0\u5217\u3067\u3059\u3002\u4eca\u56de\u306e\u6587\u306e\u5834\u5408\u306f\u3001\u30e2\u30c7\u30eb\u306e\u4e88\u60f3\u7d50\u679c\u3068\u6b63\u89e3\u30c7\u30fc\u30bf\u304c\u4e00\u81f4\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\u6628\u5e74 10 \u6708 \u306b \u306f \u3001 34 \u4eba \u304c \u3001 \u4eca\u56de \u306e \u73fe\u5834 \u306b \u8fd1\u3044 \u30a8\u30b8\u30d7\u30c8 \u306e \u30bf\u30d0 \u3067 \u7206\u767a \u4e8b\u4ef6 \u306e \u305f\u3081 \u6b7b\u4ea1 \u3057 \u3066 \u3044\u308b \u3002\nPredicted: B-DAT I-DAT I-DAT O O O O O O O O O O O O B-LOC O B-LOC O O O O O O O O O O\nCorrect:   B-DAT I-DAT I-DAT O O O O O O O O O O O O B-LOC O B-LOC O O O O O O O O O O\n\n\u56fa\u6709\u8868\u73fe\u62bd\u51fa\u5668\u306e\u69cb\u7bc9\u306f\u3053\u308c\u3067\u7d42\u4e86\u3057\u307e\u3057\u305f\u3002\n\n\u30e2\u30c7\u30eb\u306e\u8a55\u4fa1\n\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u304c\u3001\u3053\u308c\u3060\u3051\u3067\u306f\u826f\u3044\u306e\u304b\u60aa\u3044\u306e\u304b\u308f\u304b\u308a\u307e\u305b\u3093\u3002\u305d\u306e\u305f\u3081\u3001\u4f5c\u6210\u3057\u305f\u30e2\u30c7\u30eb\u306b\u3064\u3044\u3066\u306f\u8a55\u4fa1\u3092\u884c\u3046\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\u3002\u305d\u308c\u3067\u306f\u4f5c\u6210\u3057\u305f\u30e2\u30c7\u30eb\u306b\u3064\u3044\u3066\u8a55\u4fa1\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\u8a55\u4fa1\u306f\u3001\u9069\u5408\u7387\u3001\u518d\u73fe\u7387\u3001F\u5024\u3067\u884c\u3044\u307e\u3059\u3002\u4ee5\u4e0b\u304c\u8a55\u4fa1\u3092\u884c\u3046\u30b3\u30fc\u30c9\u3067\u3059\u3002\ndef bio_classification_report(y_true, y_pred):\n    lb = LabelBinarizer()\n    y_true_combined = lb.fit_transform(list(chain.from_iterable(y_true)))\n    y_pred_combined = lb.transform(list(chain.from_iterable(y_pred)))\n\n    tagset = set(lb.classes_) - {'O'}\n    tagset = sorted(tagset, key=lambda tag: tag.split('-', 1)[::-1])\n    class_indices = {cls: idx for idx, cls in enumerate(lb.classes_)}\n\n    return classification_report(\n        y_true_combined,\n        y_pred_combined,\n        labels = [class_indices[cls] for cls in tagset],\n        target_names = tagset,\n    )\n\n\u8a55\u4fa1\u306b\u4f7f\u3046\u305f\u3081\u306e\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u96c6\u5408\u5185\u306e\u6587\u306b\u5bfe\u3057\u3066\u30bf\u30b0\u4ed8\u3051\u3057\u307e\u3059\u3002\ny_pred = [tagger.tag(xseq) for xseq in X_test]\n\n\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3092\u7528\u3044\u3066\u30bf\u30b0\u4ed8\u3051\u3057\u305f\u30c7\u30fc\u30bf\u3068\u3001\u6b63\u89e3\u30c7\u30fc\u30bf\u3092\u8a55\u4fa1\u7528\u306e\u95a2\u6570\u306b\u6e21\u3057\u3066\u7d50\u679c\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u5404\u30ab\u30c6\u30b4\u30ea\u306b\u3064\u3044\u3066\u3001\u9069\u5408\u7387\u3001\u518d\u73fe\u7387\u3001F\u5024\u3001\u30bf\u30b0\u6570\u3092\u8868\u793a\u3057\u3066\u3044\u307e\u3059\u3002\n>>> print(bio_classification_report(y_test, y_pred))\n             precision    recall  f1-score   support\n\n      B-ART       1.00      0.89      0.94         9\n      I-ART       0.92      1.00      0.96        12\n      B-DAT       1.00      1.00      1.00        12\n      I-DAT       1.00      1.00      1.00        22\n      B-LOC       1.00      0.95      0.97        55\n      I-LOC       0.94      0.94      0.94        17\n      B-ORG       0.75      0.86      0.80        14\n      I-ORG       1.00      0.90      0.95        10\n      B-PSN       0.00      0.00      0.00         3\n      B-TIM       1.00      0.71      0.83         7\n      I-TIM       1.00      0.81      0.90        16\n\navg / total       0.95      0.91      0.93       177\n\n\u3061\u3087\u3063\u3068\u7d50\u679c\u304c\u826f\u3059\u304e\u308b\u6c17\u3082\u3057\u307e\u3059\u304c\u3001\u7528\u3044\u305f\u30c7\u30fc\u30bf\u306b\u540c\u3058\u3088\u3046\u306a\u6587\u304c\u542b\u307e\u308c\u3066\u3044\u305f\u306e\u3067\u3057\u3087\u3046\u3002\n\u203b\u6ce8\u610f\nUndefinedMetricWarning\u304c\u51fa\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u4e88\u6e2c\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u306b\u5b58\u5728\u3057\u306a\u3044\u30e9\u30d9\u30eb\u306b\u5bfe\u3057\u3066\u9069\u5408\u7387\u306a\u3069\u304c\u5b9a\u7fa9\u3067\u304d\u306a\u3044\u304b\u3089\u306e\u3088\u3046\u3067\u3059\u3002\u7528\u610f\u3067\u304d\u305f\u30c7\u30fc\u30bf\u6570\u304c\u5c11\u306a\u3044\u306e\u3067\u30fb\u30fb\u30fb\n\n\u304a\u308f\u308a\u306b\n\u4eca\u56de\u306f\u3001Python\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3042\u308bcrfsuite\u3092\u4f7f\u3046\u3053\u3068\u3067\u7c21\u5358\u306b\u56fa\u6709\u8868\u73fe\u62bd\u51fa\u5668\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\u30bf\u30b0\u4ed8\u3051\u306b\u306fIREX\u306e\u5b9a\u7fa9\u306b\u57fa\u3065\u3044\u30668\u7a2e\u985e\u306e\u56fa\u6709\u8868\u73fe\u3092\u4ed8\u3051\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u3001\u5b9f\u969b\u306b\u4f7f\u3046\u306b\u306fIREX\u306e\u5b9a\u7fa9\u306f\u7c97\u3044\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u56fa\u6709\u8868\u73fe\u62bd\u51fa\u3092\u4f55\u304b\u306e\u30bf\u30b9\u30af\u306b\u4f7f\u3046\u5834\u5408\u306b\u306f\u3001\u30bf\u30b9\u30af\u306b\u5fdc\u3058\u3066\u5fc5\u8981\u306a\u30bf\u30b0\u3092\u4ed8\u3051\u305f\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u307e\u305f\u3001\u3088\u308a\u826f\u3044\u7d20\u6027\u3084\u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a2\u3057\u3066\u307f\u308b\u3068\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u53c2\u8003\n\npython-crfsuite Documentation\nSupport Vector Machine\u3092\u7528\u3044\u305f\u65e5\u672c\u8a9e\u56fa\u6709\u8868\u73fe\u62bd\u51fa\n\u65e5\u672c\u8a9e\u56fa\u6709\u8868\u73fe\u62bd\u51fa\u306b\u304a\u3051\u308b\u308f\u304b\u3061\u66f8\u304d\u554f\u984c\u306e\u89e3\u6c7a\nIREX\u306b\u3088\u308b\u56fa\u6709\u8868\u73fe\u306e\u5b9a\u7fa9\n\n# \u306f\u3058\u3081\u306b\n**\u56fa\u6709\u8868\u73fe\u62bd\u51fa**\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u306b\u51fa\u73fe\u3059\u308b**\u4eba\u540d**\u3084**\u5730\u540d**\u306a\u3069\u306e\u56fa\u6709\u540d\u8a5e\u3084\u3001**\u65e5\u4ed8**\u3084**\u6642\u9593**\u306a\u3069\u306e\u6570\u5024\u8868\u73fe\u3092\u62bd\u51fa\u3059\u308b\u6280\u8853\u3067\u3059\u3002\u56fa\u6709\u8868\u73fe\u62bd\u51fa\u306f\u3001**\u8cea\u554f\u5fdc\u7b54\u30b7\u30b9\u30c6\u30e0**\u3001**\u5bfe\u8a71\u30b7\u30b9\u30c6\u30e0**\u3001**\u60c5\u5831\u62bd\u51fa**\u3068\u3044\u3063\u305f\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u3092\u7528\u3044\u305f\u5fdc\u7528\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u8981\u7d20\u6280\u8853\u3068\u3057\u3066\u3082\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u4eca\u56de\u306f**\u6a5f\u68b0\u5b66\u7fd2\u6280\u8853**\u3092\u4f7f\u3063\u3066\u56fa\u6709\u8868\u73fe\u62bd\u51fa\u5668\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\n**\u203b\u6ce8\u610f\u4e8b\u9805**\n<font color=\"red\">\u7406\u8ad6\u7684\u306a\u8a71\u306f\u4e00\u5207\u51fa\u3066\u304d\u307e\u305b\u3093\u3002\u7406\u8ad6\u3092\u77e5\u308a\u305f\u3044\u65b9\u306f\u4ed6\u3092\u5f53\u305f\u3063\u3066\u304f\u3060\u3055\u3044\u3002</font>\n\n# \u5bfe\u8c61\u8aad\u8005\n\n* \u56fa\u6709\u8868\u73fe\u62bd\u51fa\u3092\u5c11\u3057\u306f\u77e5\u3063\u3066\u3044\u308b\u65b9\n* \u56fa\u6709\u8868\u73fe\u62bd\u51fa\u5668\u3092\u4f5c\u3063\u3066\u307f\u305f\u3044\u65b9\n* Python\u30b3\u30fc\u30c9\u3092\u8aad\u3081\u308b\u65b9\n\n\n# \u56fa\u6709\u8868\u73fe\u62bd\u51fa\u3068\u306f\uff1f\n\u3053\u3053\u3067\u306f\u3001\u56fa\u6709\u8868\u73fe\u62bd\u51fa\u306e\u6982\u8981\u3068\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\n\n## \u6982\u8981\n\u56fa\u6709\u8868\u73fe\u62bd\u51fa\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u306b\u51fa\u73fe\u3059\u308b\u4eba\u540d\u3084\u5730\u540d\u306a\u3069\u306e\u56fa\u6709\u540d\u8a5e\u3084\u3001\u65e5\u4ed8\u3084\u6642\u9593\u306a\u3069\u306e\u6570\u5024\u8868\u73fe\u3092\u62bd\u51fa\u3059\u308b\u6280\u8853\u3067\u3059\u3002\u5177\u4f53\u4f8b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u4ee5\u4e0b\u306e\u6587\u304b\u3089\u56fa\u6709\u8868\u73fe\u3092\u62bd\u51fa\u3057\u3066\u307f\u307e\u3059\u3002\n\n```\n\u592a\u90ce\u306f5\u670818\u65e5\u306e\u671d9\u6642\u306b\u82b1\u5b50\u306b\u4f1a\u3044\u306b\u884c\u3063\u305f\u3002\n```\n\u4e0a\u8a18\u306e\u6587\u306b\u542b\u307e\u308c\u308b\u56fa\u6709\u8868\u73fe\u3092\u62bd\u51fa\u3059\u308b\u3068**\u4eba\u540d**\u3068\u3057\u3066**\u592a\u90ce**\u3068**\u82b1\u5b50**\u3001**\u65e5\u4ed8**\u3068\u3057\u3066**5\u670818\u65e5**\u3001**\u6642\u9593**\u3068\u3057\u3066**\u671d9\u6642**\u304c\u62bd\u51fa\u3067\u304d\u307e\u3059\u3002\n\n\u4e0a\u8a18\u306e\u4f8b\u3067\u306f\u56fa\u6709\u8868\u73fe\u306e\u30af\u30e9\u30b9\u3068\u3057\u3066\u4eba\u540d\u3001\u65e5\u4ed8\u3001\u6642\u9593\u304c\u62bd\u51fa\u3055\u308c\u307e\u3057\u305f\u3002\u4e00\u822c\u7684\u306b\u306f\u4ee5\u4e0b\u306e8\u3064\u306e\u30af\u30e9\u30b9\u304c\u3088\u304f\u4f7f\u308f\u308c\u307e\u3059\u3002\n\n|\u30af\u30e9\u30b9  |\u4f8b  |\n|------------|-----------------------|\n|ART \u56fa\u6709\u7269\u540d\u3000|\u30ce\u30fc\u30d9\u30eb\u6587\u5b66\u8cde\u3001Windows7  |\n|LOC \u5730\u540d     |\u30a2\u30e1\u30ea\u30ab\u3001\u5343\u8449\u770c          |\n|ORG \u7d44\u7e54     |\u81ea\u6c11\u515a\u3001NHK            \u3000|\n|PSN \u4eba\u540d     |\u5b89\u500d\u664b\u4e09\u3001\u30e1\u30eb\u30b1\u30eb     \u3000\u3000|\n|DAT \u65e5\u4ed8     |1\u670829\u65e5\u30012016/01/29 \u3000\u3000 |\n|TIM \u6642\u9593     |\u5348\u5f8c\u4e09\u6642\u300110:30          |\n|MNY \u91d1\u984d     |241\u5186\u30018\u30c9\u30eb           \u3000|\n|PNT \u5272\u5408     |10\uff05\u30013\u5272           \u3000\u3000 |\n\n## \u65b9\u6cd5\n\u56fa\u6709\u8868\u73fe\u62bd\u51fa\u3092\u884c\u3046\u65b9\u6cd5\u3068\u3057\u3066\u3001\u5f62\u614b\u7d20\u89e3\u6790\u6e08\u307f\u306e\u6587\u306b\u5bfe\u3057\u3066\u30e9\u30d9\u30eb\u4ed8\u3051\u3092\u884c\u3046\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u306f\u300c\u592a\u90ce\u306f5\u670818\u65e5\u306e\u671d9\u6642\u306b\u30fb\u30fb\u30fb\u300d\u3068\u3044\u3046\u6587\u3092\u5f62\u614b\u7d20\u89e3\u6790\u3057\u3066\u304b\u3089\u30e9\u30d9\u30eb\u4ed8\u3051\u3092\u884c\u3063\u305f\u4f8b\u3067\u3059\u3002\n\n<img width=\"954\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-01-28 14.35.17.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/77079/1ff148a3-2372-5906-9422-d28b6b9cdf9a.png\">\n\nB-XXX\u3001I-XXX \u3068\u3044\u3046\u30e9\u30d9\u30eb\u304c\u3053\u308c\u3089\u306e\u6587\u5b57\u5217\u304c\u56fa\u6709\u8868\u73fe\u3067\u3042\u308b\u3053\u3068\u3092\u8868\u73fe\u3057\u3066\u3044\u307e\u3059\u3002B-XXX \u306f\u56fa\u6709\u8868\u73fe\u6587\u5b57\u5217\u306e\u59cb\u307e\u308a\u3001I-XXX \u306f\u56fa\u6709\u8868\u73fe\u6587\u5b57\u5217\u304c\u7d9a\u3044\u3066\u3044\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u3066\u3044\u307e\u3059\u3002XXX \u90e8\u5206\u306b\u306fORG\u3001PSN \u306a\u3069\u306e\u56fa\u6709\u8868\u73fe\u30af\u30e9\u30b9\u304c\u5165\u308a\u307e\u3059\u3002\u56fa\u6709\u8868\u73fe\u3067\u306a\u3044\u90e8\u5206\u306b\u306f O \u3068\u3044\u3046\u30e9\u30d9\u30eb\u304c\u4ed8\u4e0e\u3055\u308c\u307e\u3059\u3002\n\n\u30e9\u30d9\u30eb\u4ed8\u3051\u306f\u898f\u5247\u3092\u7528\u3044\u3066\u884c\u3046\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u304c\u3001\u4eca\u56de\u306f**\u6a5f\u68b0\u5b66\u7fd2\u6280\u8853**\u3092\u7528\u3044\u3066\u884c\u3044\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u3042\u3089\u304b\u3058\u3081\u30e9\u30d9\u30eb\u4ed8\u3051\u3055\u308c\u305f\u5b66\u7fd2\u30c7\u30fc\u30bf\u304b\u3089\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u3001\u305d\u306e\u30e2\u30c7\u30eb\u3092\u7528\u3044\u3066\u30e9\u30d9\u30eb\u306e\u4ed8\u3044\u3066\u3044\u306a\u3044\u6587\u306b\u30e9\u30d9\u30eb\u4ed8\u3051\u3092\u884c\u3044\u307e\u3059\u3002\u5177\u4f53\u7684\u306b\u306fCRF\u3068\u3044\u3046\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7528\u3044\u3066\u5b66\u7fd2\u3092\u884c\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u305d\u308c\u3067\u306f\u5b9f\u969b\u306b\u624b\u3092\u52d5\u304b\u3057\u3066\u884c\u304d\u307e\u3057\u3087\u3046\u3002\n\n\n# \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u307e\u305a\u306f\u5fc5\u8981\u306aPython\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3068\u3053\u308d\u304b\u3089\u59cb\u3081\u307e\u3059\u3002\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002CRF\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066CRFsuite\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3044\u307e\u3059\u3002\n\n```shell-session\npip install numpy\npip install scipy\npip install sklearn\npip install python-crfsuite\n```\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u3089\u5fc5\u8981\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u3092import\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```py\nfrom itertools import chain\nimport pycrfsuite\nimport sklearn\nfrom sklearn.metrics import classification_report\nfrom sklearn.preprocessing import LabelBinarizer\n```\n\n\n# \u56fa\u6709\u8868\u73fe\u62bd\u51fa\u5668\u3092\u69cb\u7bc9\u3059\u308b\u306e\u306b\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\nCRF\u306f\u6559\u5e2b\u3042\u308a\u5b66\u7fd2\u306a\u306e\u3067\u6559\u5e2b\u30c7\u30fc\u30bf\u304c\u30bf\u30b0\u4ed8\u3051\u3055\u308c\u305f\u30c7\u30fc\u30bf\u304c\u5fc5\u8981\u3067\u3059\u3002\u4eca\u56de\u306f\u3042\u3089\u304b\u3058\u3081\u30bf\u30b0\u4ed8\u3051\u3057\u305f\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3057\u3066\u304a\u304d\u307e\u3057\u305f\u3002[\u3053\u3061\u3089](https://github.com/Hironsan/IOB2Corpus)\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30d5\u30a1\u30a4\u30eb\u540d\u306f\u300chironsan.txt\u300d\u3067\u3059\u3002\n\n\u305d\u308c\u3067\u306f\u3001\u307e\u305a\u306f\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u305f\u3081\u306e\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```py\nimport codecs\n\nclass CorpusReader(object):\n\n    def __init__(self, path):\n        with codecs.open(path, encoding='utf-8') as f:\n            sent = []\n            sents = []\n            for line in f:\n                if line\t== '\\n':\n                    sents.append(sent)\n                    sent = []\n                    continue\n                morph_info = line.strip().split('\\t')\n                sent.append(morph_info)\n        train_num = int(len(sents) * 0.9)\n        self.__train_sents = sents[:train_num]\n        self.__test_sents = sents[train_num:]\n\n    def iob_sents(self, name):\n        if name == 'train':\n            return self.__train_sents\n        elif name == 'test':\n            return self.__test_sents\n        else:\n            return None\n```\n\n\u6b21\u306b\u3001\u4f5c\u6210\u3057\u305f\u30af\u30e9\u30b9\u3092\u7528\u3044\u3066\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\u5b66\u7fd2\u30c7\u30fc\u30bf\u6570\u304c450\u6587\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u6570\u304c50\u6587\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```py\nc = CorpusReader('hironsan.txt')\ntrain_sents = c.iob_sents('train')\ntest_sents = c.iob_sents('test')\n```\n\n\u8aad\u307f\u8fbc\u3093\u3060\u30c7\u30fc\u30bf\u306e\u5f62\u5f0f\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u5f62\u614b\u7d20\u89e3\u6790\u5668\u300cMeCab\u300d\u3067\u5f62\u614b\u7d20\u89e3\u6790\u3092\u884c\u3063\u305f\u5f8c\u306bIOB2\u30bf\u30b0\u3092\u4ed8\u3051\u3066\u3044\u307e\u3059\u3002\u30c7\u30fc\u30bf\u306f\u4e00\u6587\u3054\u3068\u306b\u5206\u304b\u308c\u3066\u304a\u308a\u3001\u4e00\u6587\u306f\u8907\u6570\u306e\u5f62\u614b\u7d20\u60c5\u5831\u306e\u96c6\u307e\u308a\u304b\u3089\u69cb\u6210\u3055\u308c\u307e\u3059\u3002\n\n```py\n>>> train_sents[0]\n[['2005', '\u540d\u8a5e', '\u6570', '*', '*', '*', '*', '*', 'B-DAT'],\n ['\u5e74', '\u540d\u8a5e', '\u63a5\u5c3e', '\u52a9\u6570\u8a5e', '*', '*', '*', '\u5e74', '\u30cd\u30f3', '\u30cd\u30f3', 'I-DAT'],\n ['7', '\u540d\u8a5e', '\u6570', '*', '*', '*', '*', '*', 'I-DAT'],\n ['\u6708', '\u540d\u8a5e', '\u4e00\u822c', '*', '*', '*', '*', '\u6708', '\u30c4\u30ad', '\u30c4\u30ad', 'I-DAT'],\n ['14', '\u540d\u8a5e', '\u6570', '*', '*', '*', '*', '*', 'I-DAT'],\n ['\u65e5', '\u540d\u8a5e', '\u63a5\u5c3e', '\u52a9\u6570\u8a5e', '*', '*', '*', '\u65e5', '\u30cb\u30c1', '\u30cb\u30c1', 'I-DAT'],\n ['\u3001', '\u8a18\u53f7', '\u8aad\u70b9', '*', '*', '*', '*', '\u3001', '\u3001', '\u3001', 'O'],\n...\n]\n```\n\u305d\u308c\u3067\u306f\u6b21\u306b\u3001\u56fa\u6709\u8868\u73fe\u62bd\u51fa\u306b\u4f7f\u3046\u7d20\u6027\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\n# \u4f7f\u7528\u3059\u308b\u7d20\u6027\n\u3053\u3053\u3067\u306f\u3001\u4f7f\u7528\u3059\u308b\u7d20\u6027\u306e\u6982\u8981\u3092\u8aac\u660e\u3057\u3066\u304b\u3089\u3001\u305d\u308c\u3092\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n## \u6982\u8981\n\u6b21\u306b\u3001\u4f7f\u7528\u3059\u308b\u7d20\u6027\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\u4eca\u56de\u306f\u3001\u524d\u5f8c\uff12\u6587\u5b57\u306e\u5358\u8a9e\u3001\u54c1\u8a5e\u7d30\u5206\u985e\u3001\u6587\u5b57\u7a2e\u3001\u56fa\u6709\u8868\u73fe\u30bf\u30b0\u3092\u4f7f\u3044\u307e\u3059\u3002\u4ee5\u4e0b\u306b\u3053\u308c\u3089\u306e\u7d20\u6027\u3092\u7528\u3044\u305f\u5834\u5408\u306e\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\u67a0\u3067\u56f2\u307e\u308c\u305f\u90e8\u5206\u304c\u4f7f\u7528\u3059\u308b\u7d20\u6027\u3067\u3059\u3002\n![ner.png](https://qiita-image-store.s3.amazonaws.com/0/77079/c78cb70a-06d0-bc18-9c81-e704fbc7792a.png)\n\n\u6587\u5b57\u7a2e\u306e\u5206\u985e\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u5168\u90e8\u3067\uff17\u7a2e\u985e\u3042\u308a\u307e\u3059\u3002\n\n| \u6587\u5b57\u7a2e\u30bf\u30b0 |     \u8aac\u660e    |\n|-----------|-------------|\n| ZSPACE    | \u7a7a\u767d        |\n| ZDIGIT    | \u30a2\u30e9\u30d3\u30a2\u6570\u5b57 |\n| ZLLET     | \u82f1\u5b57\u5c0f\u6587\u5b57   |\n| ZULET     | \u82f1\u5b57\u5927\u6587\u5b57  |\n| HIRAG     | \u3072\u3089\u304c\u306a    |\n| KATAK     | \u30ab\u30bf\u30ab\u30ca    |\n| OTHER     | \u305d\u306e\u4ed6      |\n\n\u7d20\u6027\u3068\u3057\u3066\u7528\u3044\u308b\u6587\u5b57\u7a2e\u306f\u5358\u8a9e\u306b\u542b\u307e\u308c\u308b\u3059\u3079\u3066\u306e\u6587\u5b57\u7a2e\u3092\u7d50\u5408\u3057\u305f\u3082\u306e\u3067\u3059\u3002\u4f8b\u3048\u3070\u300c\u591a\u3044\u300d\u3068\u3044\u3046\u5358\u8a9e\u306f\u6f22\u5b57\u3068\u3072\u3089\u304c\u306a\u3092\u542b\u3093\u3067\u3044\u307e\u3059\u3002\u3072\u3089\u304c\u306a\u306e\u6587\u5b57\u7a2e\u30bf\u30b0\u306fHIRAG\u3067\u3042\u308a\u3001\u6f22\u5b57\u306e\u6587\u5b57\u7a2e\u30bf\u30b0\u306fOTHER\u3067\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u300c\u591a\u3044\u300d\u3068\u3044\u3046\u5358\u8a9e\u306e\u6587\u5b57\u7a2e\u306f\u300cHIRAG-OTHER\u300d\u306b\u306a\u308a\u307e\u3059\u3002\n\n## \u7d20\u6027\u62bd\u51fa\u306e\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\n### \u6587\u5b57\u7a2e\u306e\u5224\u5b9a\n\u6587\u5b57\u7a2e\u306e\u5224\u5b9a\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059\u3002\u6587\u5b57\u5217\u306b\u542b\u307e\u308c\u308b\u3059\u3079\u3066\u306e\u6587\u5b57\u7a2e\u3092-(\u30cf\u30a4\u30d5\u30f3)\u3067\u7d50\u5408\u3057\u3066\u3044\u307e\u3059\u3002\n\n```py\ndef is_hiragana(ch):\n    return 0x3040 <= ord(ch) <= 0x309F\n\ndef is_katakana(ch):\n    return 0x30A0 <= ord(ch) <= 0x30FF\n\ndef get_character_type(ch):\n    if ch.isspace():\n        return 'ZSPACE'\n    elif ch.isdigit():\n        return 'ZDIGIT'\n    elif ch.islower():\n        return 'ZLLET'\n    elif ch.isupper():\n        return 'ZULET'\n    elif is_hiragana(ch):\n        return 'HIRAG'\n    elif is_katakana(ch):\n        return 'KATAK'\n    else:\n        return 'OTHER'\n\ndef get_character_types(string):\n    character_types = map(get_character_type, string)\n    character_types_str = '-'.join(sorted(set(character_types)))\n\n    return character_types_str\n```\n\n### \u54c1\u8a5e\u7d30\u5206\u985e\u306e\u62bd\u51fa\n\u5f62\u614b\u7d20\u60c5\u5831\u304b\u3089\u54c1\u8a5e\u7d30\u5206\u985e\u3092\u62bd\u51fa\u3059\u308b\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```py\ndef extract_pos_with_subtype(morph):\n    idx = morph.index('*')\n\n    return '-'.join(morph[1:idx])\n```\n\n### \u6587\u304b\u3089\u306e\u7d20\u6027\u62bd\u51fa\n\u4ee5\u4e0a\u3092\u3075\u307e\u3048\u3066\u3001\u5404\u5358\u8a9e\u306b\u5bfe\u3057\u3066\u7d20\u6027\u62bd\u51fa\u3092\u3059\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u5c11\u3057\u5197\u9577\u3067\u3059\u304c\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n```py\ndef word2features(sent, i):\n    word = sent[i][0]\n    chtype = get_character_types(sent[i][0])\n    postag = extract_pos_with_subtype(sent[i])\n    features = [\n        'bias',\n        'word=' + word,\n        'type=' + chtype,\n        'postag=' + postag,\n    ]\n    if i >= 2:\n        word2 = sent[i-2][0]\n        chtype2 = get_character_types(sent[i-2][0])\n        postag2 = extract_pos_with_subtype(sent[i-2])\n        iobtag2 = sent[i-2][-1]\n        features.extend([\n            '-2:word=' + word2,\n            '-2:type=' + chtype2,\n            '-2:postag=' + postag2,\n            '-2:iobtag=' + iobtag2,\n        ])\n    else:\n        features.append('BOS')\n\n    if i >= 1:\n        word1 = sent[i-1][0]\n        chtype1 = get_character_types(sent[i-1][0])\n        postag1 = extract_pos_with_subtype(sent[i-1])\n        iobtag1 = sent[i-1][-1]\n        features.extend([\n            '-1:word=' + word1,\n            '-1:type=' + chtype1,\n            '-1:postag=' + postag1,\n            '-1:iobtag=' + iobtag1,\n        ])\n    else:\n        features.append('BOS')\n\n    if i < len(sent)-1:\n        word1 = sent[i+1][0]\n        chtype1 = get_character_types(sent[i+1][0])\n        postag1 = extract_pos_with_subtype(sent[i+1])\n        features.extend([\n            '+1:word=' + word1,\n            '+1:type=' + chtype1,\n            '+1:postag=' + postag1,\n        ])\n    else:\n        features.append('EOS')\n\n    if i < len(sent)-2:\n        word2 = sent[i+2][0]\n        chtype2 = get_character_types(sent[i+2][0])\n        postag2 = extract_pos_with_subtype(sent[i+2])\n        features.extend([\n            '+2:word=' + word2,\n            '+2:type=' + chtype2,\n            '+2:postag=' + postag2,\n        ])\n    else:\n        features.append('EOS')\n\n    return features\n\n\ndef sent2features(sent):\n    return [word2features(sent, i) for i in range(len(sent))]\n\n\ndef sent2labels(sent):\n    return [morph[-1] for morph in sent]\n\n\ndef sent2tokens(sent):\n    return [morph[0] for morph in sent]\n```\n\nsent2features\u3067\u6587\u304b\u3089\u7d20\u6027\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002\u5b9f\u969b\u306b\u62bd\u51fa\u3055\u308c\u308b\u7d20\u6027\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```py\n>>> sent2features(train_sents[0])[0]\n['bias',\n 'word=2005',\n 'type=ZDIGIT',\n 'postag=\u540d\u8a5e-\u6570',\n 'BOS',\n 'BOS',\n '+1:word=\u5e74',\n '+1:type=OTHER',\n '+1:postag=\u540d\u8a5e-\u63a5\u5c3e-\u52a9\u6570\u8a5e',\n '+2:word=7',\n '+2:type=ZDIGIT',\n '+2:postag=\u540d\u8a5e-\u6570']\n```\n\n\u30c7\u30fc\u30bf\u304b\u3089\u7d20\u6027\u304c\u62bd\u51fa\u3067\u304d\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3057\u305f\u3002\u5f8c\u3067\u4f7f\u7528\u3059\u308b\u305f\u3081\u306b\u3001\u30c7\u30fc\u30bf\u304b\u3089\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u7528\u306e\u7d20\u6027\u3068\u30e9\u30d9\u30eb\u3092\u62bd\u51fa\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```py\nX_train = [sent2features(s) for s in train_sents]\ny_train = [sent2labels(s) for s in train_sents]\n\nX_test = [sent2features(s) for s in test_sents]\ny_test = [sent2labels(s) for s in test_sents]\n```\n\n# \u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\n\u30e2\u30c7\u30eb\u3092\u5b66\u7fd2\u3059\u308b\u305f\u3081\u306b\u3001pycrfsuite.Trainer\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3001\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307e\u305b\u305f\u5f8c\u3001train\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\u307e\u305a\u306f\u3001Trainer\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\u3068\u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u3092\u884c\u3044\u307e\u3059\u3002\n\n```py\ntrainer = pycrfsuite.Trainer(verbose=False)\n\nfor xseq, yseq in zip(X_train, y_train):\n    trainer.append(xseq, yseq)\n```\n\n\u6b21\u306b\u5b66\u7fd2\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u672c\u6765\u306f\u958b\u767a\u7528\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u6c7a\u3081\u308b\u3079\u304d\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u56fa\u5b9a\u5024\u3068\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```py\ntrainer.set_params({\n    'c1': 1.0,   # coefficient for L1 penalty\n    'c2': 1e-3,  # coefficient for L2 penalty\n    'max_iterations': 50,  # stop earlier\n\n    # include transitions that are possible, but not observed\n    'feature.possible_transitions': True\n})\n```\n\n<!--\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u5bfe\u3057\u3066\u8a2d\u5b9a\u53ef\u80fd\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\n```py\n>>> trainer.params()\n\n['feature.minfreq',\n 'feature.possible_states',\n 'feature.possible_transitions',\n 'c1',\n 'c2',\n 'max_iterations',\n 'num_memories',\n 'epsilon',\n 'period',\n 'delta',\n 'linesearch',\n 'max_linesearch']\n```\n-->\n\n\u305d\u308c\u3067\u306f\u6e96\u5099\u304c\u6574\u3063\u305f\u306e\u3067\u30e2\u30c7\u30eb\u3092\u5b66\u7fd2\u3055\u305b\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u6307\u5b9a\u3057\u3066\u3001train\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```py\ntrainer.train('model.crfsuite')\n```\n\u5b9f\u884c\u304c\u7d42\u308f\u308b\u3068\u3001\u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u4e2d\u306b\u3001\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\n\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306b\u306f\u3001pycrfsuite.Tagger\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3001\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3092\u8aad\u307f\u8fbc\u307f\u3001tag\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u307e\u305a\u306f\u3001Tagger\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\u3068\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u3092\u884c\u3044\u307e\u3059\u3002\n\n```py\ntagger = pycrfsuite.Tagger()\ntagger.open('model.crfsuite')\n```\n\n\u305d\u308c\u3067\u306f\u3001\u5b9f\u969b\u306b\u6587\u306b\u5bfe\u3057\u3066\u30bf\u30b0\u4ed8\u3051\u3092\u3057\u3066\u307f\u307e\u3059\u3002\n\n```py\nexample_sent = test_sents[0]\nprint(' '.join(sent2tokens(example_sent)))\n\nprint(\"Predicted:\", ' '.join(tagger.tag(sent2features(example_sent))))\nprint(\"Correct:  \", ' '.join(sent2labels(example_sent)))\n```\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u7d50\u679c\u304c\u5f97\u3089\u308c\u308b\u306f\u305a\u3067\u3059\u3002Predicted\u306f\u4f5c\u6210\u3057\u305f\u30e2\u30c7\u30eb\u3092\u7528\u3044\u3066\u4e88\u60f3\u3057\u305f\u30bf\u30b0\u5217\u3067\u3001Correct\u306f\u6b63\u89e3\u306e\u30bf\u30b0\u5217\u3067\u3059\u3002\u4eca\u56de\u306e\u6587\u306e\u5834\u5408\u306f\u3001\u30e2\u30c7\u30eb\u306e\u4e88\u60f3\u7d50\u679c\u3068\u6b63\u89e3\u30c7\u30fc\u30bf\u304c\u4e00\u81f4\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\n```shell-session\n\u6628\u5e74 10 \u6708 \u306b \u306f \u3001 34 \u4eba \u304c \u3001 \u4eca\u56de \u306e \u73fe\u5834 \u306b \u8fd1\u3044 \u30a8\u30b8\u30d7\u30c8 \u306e \u30bf\u30d0 \u3067 \u7206\u767a \u4e8b\u4ef6 \u306e \u305f\u3081 \u6b7b\u4ea1 \u3057 \u3066 \u3044\u308b \u3002\nPredicted: B-DAT I-DAT I-DAT O O O O O O O O O O O O B-LOC O B-LOC O O O O O O O O O O\nCorrect:   B-DAT I-DAT I-DAT O O O O O O O O O O O O B-LOC O B-LOC O O O O O O O O O O\n```\n\n\u56fa\u6709\u8868\u73fe\u62bd\u51fa\u5668\u306e\u69cb\u7bc9\u306f\u3053\u308c\u3067\u7d42\u4e86\u3057\u307e\u3057\u305f\u3002\n\n# \u30e2\u30c7\u30eb\u306e\u8a55\u4fa1\n\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u304c\u3001\u3053\u308c\u3060\u3051\u3067\u306f\u826f\u3044\u306e\u304b\u60aa\u3044\u306e\u304b\u308f\u304b\u308a\u307e\u305b\u3093\u3002\u305d\u306e\u305f\u3081\u3001\u4f5c\u6210\u3057\u305f\u30e2\u30c7\u30eb\u306b\u3064\u3044\u3066\u306f\u8a55\u4fa1\u3092\u884c\u3046\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\u3002\u305d\u308c\u3067\u306f\u4f5c\u6210\u3057\u305f\u30e2\u30c7\u30eb\u306b\u3064\u3044\u3066\u8a55\u4fa1\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\u8a55\u4fa1\u306f\u3001\u9069\u5408\u7387\u3001\u518d\u73fe\u7387\u3001F\u5024\u3067\u884c\u3044\u307e\u3059\u3002\u4ee5\u4e0b\u304c\u8a55\u4fa1\u3092\u884c\u3046\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\n```py\ndef bio_classification_report(y_true, y_pred):\n    lb = LabelBinarizer()\n    y_true_combined = lb.fit_transform(list(chain.from_iterable(y_true)))\n    y_pred_combined = lb.transform(list(chain.from_iterable(y_pred)))\n        \n    tagset = set(lb.classes_) - {'O'}\n    tagset = sorted(tagset, key=lambda tag: tag.split('-', 1)[::-1])\n    class_indices = {cls: idx for idx, cls in enumerate(lb.classes_)}\n    \n    return classification_report(\n        y_true_combined,\n        y_pred_combined,\n        labels = [class_indices[cls] for cls in tagset],\n        target_names = tagset,\n    )\n```\n\n\u8a55\u4fa1\u306b\u4f7f\u3046\u305f\u3081\u306e\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u96c6\u5408\u5185\u306e\u6587\u306b\u5bfe\u3057\u3066\u30bf\u30b0\u4ed8\u3051\u3057\u307e\u3059\u3002\n\n```py\ny_pred = [tagger.tag(xseq) for xseq in X_test]\n```\n\n\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3092\u7528\u3044\u3066\u30bf\u30b0\u4ed8\u3051\u3057\u305f\u30c7\u30fc\u30bf\u3068\u3001\u6b63\u89e3\u30c7\u30fc\u30bf\u3092\u8a55\u4fa1\u7528\u306e\u95a2\u6570\u306b\u6e21\u3057\u3066\u7d50\u679c\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u5404\u30ab\u30c6\u30b4\u30ea\u306b\u3064\u3044\u3066\u3001\u9069\u5408\u7387\u3001\u518d\u73fe\u7387\u3001F\u5024\u3001\u30bf\u30b0\u6570\u3092\u8868\u793a\u3057\u3066\u3044\u307e\u3059\u3002\n\n```py\n>>> print(bio_classification_report(y_test, y_pred))\n             precision    recall  f1-score   support\n\n      B-ART       1.00      0.89      0.94         9\n      I-ART       0.92      1.00      0.96        12\n      B-DAT       1.00      1.00      1.00        12\n      I-DAT       1.00      1.00      1.00        22\n      B-LOC       1.00      0.95      0.97        55\n      I-LOC       0.94      0.94      0.94        17\n      B-ORG       0.75      0.86      0.80        14\n      I-ORG       1.00      0.90      0.95        10\n      B-PSN       0.00      0.00      0.00         3\n      B-TIM       1.00      0.71      0.83         7\n      I-TIM       1.00      0.81      0.90        16\n\navg / total       0.95      0.91      0.93       177\n```\n\n\u3061\u3087\u3063\u3068\u7d50\u679c\u304c\u826f\u3059\u304e\u308b\u6c17\u3082\u3057\u307e\u3059\u304c\u3001\u7528\u3044\u305f\u30c7\u30fc\u30bf\u306b\u540c\u3058\u3088\u3046\u306a\u6587\u304c\u542b\u307e\u308c\u3066\u3044\u305f\u306e\u3067\u3057\u3087\u3046\u3002\n\n\u203b\u6ce8\u610f\nUndefinedMetricWarning\u304c\u51fa\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u4e88\u6e2c\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u306b\u5b58\u5728\u3057\u306a\u3044\u30e9\u30d9\u30eb\u306b\u5bfe\u3057\u3066\u9069\u5408\u7387\u306a\u3069\u304c\u5b9a\u7fa9\u3067\u304d\u306a\u3044\u304b\u3089\u306e\u3088\u3046\u3067\u3059\u3002\u7528\u610f\u3067\u304d\u305f\u30c7\u30fc\u30bf\u6570\u304c\u5c11\u306a\u3044\u306e\u3067\u30fb\u30fb\u30fb\n\n# \u304a\u308f\u308a\u306b\n\u4eca\u56de\u306f\u3001Python\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3042\u308bcrfsuite\u3092\u4f7f\u3046\u3053\u3068\u3067\u7c21\u5358\u306b\u56fa\u6709\u8868\u73fe\u62bd\u51fa\u5668\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\u30bf\u30b0\u4ed8\u3051\u306b\u306fIREX\u306e\u5b9a\u7fa9\u306b\u57fa\u3065\u3044\u30668\u7a2e\u985e\u306e\u56fa\u6709\u8868\u73fe\u3092\u4ed8\u3051\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u3001\u5b9f\u969b\u306b\u4f7f\u3046\u306b\u306fIREX\u306e\u5b9a\u7fa9\u306f\u7c97\u3044\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u56fa\u6709\u8868\u73fe\u62bd\u51fa\u3092\u4f55\u304b\u306e\u30bf\u30b9\u30af\u306b\u4f7f\u3046\u5834\u5408\u306b\u306f\u3001\u30bf\u30b9\u30af\u306b\u5fdc\u3058\u3066\u5fc5\u8981\u306a\u30bf\u30b0\u3092\u4ed8\u3051\u305f\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u307e\u305f\u3001\u3088\u308a\u826f\u3044\u7d20\u6027\u3084\u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a2\u3057\u3066\u307f\u308b\u3068\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n# \u53c2\u8003\n\n* [python-crfsuite Documentation](https://python-crfsuite.readthedocs.org/en/latest/)\n* [Support Vector Machine\u3092\u7528\u3044\u305f\u65e5\u672c\u8a9e\u56fa\u6709\u8868\u73fe\u62bd\u51fa](http://ci.nii.ac.jp/naid/110002726221)\n* [\u65e5\u672c\u8a9e\u56fa\u6709\u8868\u73fe\u62bd\u51fa\u306b\u304a\u3051\u308b\u308f\u304b\u3061\u66f8\u304d\u554f\u984c\u306e\u89e3\u6c7a](http://ci.nii.ac.jp/naid/110002712193)\n* [IREX\u306b\u3088\u308b\u56fa\u6709\u8868\u73fe\u306e\u5b9a\u7fa9](http://nlp.cs.nyu.edu/irex/NE/df990214.txt)\n", "tags": ["Python", "\u6a5f\u68b0\u5b66\u7fd2", "\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]}