{"context": "Android\u305d\u306e\uff12 Advent Calendar 2016\n\u306e5\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\uff01\n\u4f5c\u6210\u3057\u3066\u308b\u30a2\u30d7\u30ea\u3067\u97f3\u697d\u306eBPM\u3092\u77e5\u308a\u305f\u304b\u3063\u305f\u306e\u3067\n\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u97f3\u697d\u306eBPM\u3092\u8abf\u3079\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u8a18\u4e8b\u3068\u3057\u3066\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u304c\u308f\u304b\u3063\u3066\u306a\u3044\u3068\u3053\u308d\u3082\u591a\u3044\u70ba\n\u304a\u304b\u3057\u3044\u3068\u3053\u308d\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u305d\u3053\u306f\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u308b\u3068\u5b09\u3057\u3044\u3067\u3059m(_ _)m\n\n\u624b\u9806\n\n\u97f3\u58f0\u30c7\u30fc\u30bf\u3092\u30c7\u30b3\u30fc\u30c9\u3059\u308b\n\u30c7\u30b3\u30fc\u30c9\u3057\u305f\u30c7\u30fc\u30bf\u3092\u30b5\u30f3\u30d7\u30eb\u3054\u3068\u306b\u683c\u7d0d\n\u30d5\u30ec\u30fc\u30e0\u3054\u3068\u306e\u97f3\u91cf\u3092\u6c42\u3081\u308b\n\u96a3\u308a\u5408\u3046\u30d5\u30ec\u30fc\u30e0\u306e\u97f3\u91cf\u306e\u5897\u52a0\u5206\u3092\u6c42\u3081\u308b\n\u3069\u306e\u30c6\u30f3\u30dd\u304c\u30de\u30c3\u30c1\u3059\u308b\u304b\u3092\u6c42\u3081\u308b\n\n\u3063\u3066\u624b\u9806\u3067\u3084\u308a\u307e\u3057\u305f\uff01\n\u3053\u3053\u306e\u30b5\u30a4\u30c8\u3092\u307b\u307c\u307b\u307c\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\nhttp://hp.vector.co.jp/authors/VA046927/tempo/tempo.html\n\u8a73\u3057\u3044\u3068\u3053\u308d\u3092\u77e5\u308a\u305f\u3044\u65b9\u306f\u3053\u3063\u3061\u3092\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u4eca\u56de\u5229\u7528\u3057\u305f\u97f3\u6e90\n\u4eca\u56de\u306e\u97f3\u6e90\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30e1\u30c8\u30ed\u30ce\u30fc\u30e0\u306e\u97f3\u3092\u5229\u7528\u3057\u307e\u3057\u305f\u3002\n\n\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30ec\u30fc\u30c8\uff1a48000\n\u30c1\u30e3\u30f3\u30cd\u30eb\u6570\uff1a1\n\u30d3\u30c3\u30c8\uff0f\u30b5\u30f3\u30d7\u30eb\uff1a16bit\nBPM\uff1a120\n\u79d2\u6570\uff1a30s\n\n\n\u66f8\u3044\u3066\u307f\u305f\u30b3\u30fc\u30c9\n\n\u97f3\u58f0\u30c7\u30fc\u30bf\u3092\u30c7\u30b3\u30fc\u30c9\u3059\u308b\nMediaCodec\u3063\u3066\u3044\u3046\u4f4e\u30ec\u30d9\u30eb\u306e\u30e1\u30c7\u30a3\u30a2\u30b3\u30fc\u30c7\u30a3\u30c3\u30af\uff08\u30a8\u30f3\u30b3\u30fc\u30c0/\u30c7\u30b3\u30fc\u30c0\uff09\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308bapi\u3092\u5229\u7528\u3057\u3066\u30c7\u30b3\u30fc\u30c9\u3092\u884c\u3044\u307e\u3057\u305f\u3002\n\u30c7\u30b3\u30fc\u30c0\u306e\u4f5c\u6210\n\n        for (int i = 0; i < extractor.getTrackCount(); i++) {\n            MediaFormat format = extractor.getTrackFormat(i);\n            String mime = format.getString(MediaFormat.KEY_MIME);\n            // \u97f3\u697d\u306e\u30c7\u30fc\u30bf\u306a\u3089\n            if (mime.startsWith(\"audio/\")) {\n                extractor.selectTrack(i);\n                try {\n                    decoder = MediaCodec.createDecoderByType(mime);\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                decoder.configure(format, null, null, 0);\n                break;\n            }\n        }\n\n\n\u30c7\u30b3\u30fc\u30c9\n\n        decoder.start();\n\n        ByteBuffer[] inputBuffers = decoder.getInputBuffers();\n        ByteBuffer[] outputBuffers = decoder.getOutputBuffers();\n        MediaCodec.BufferInfo info = new MediaCodec.BufferInfo();\n        boolean isDecoding = true;\n\n        while (!Thread.interrupted()) {\n\n            if (isDecoding) {\n                int inIndex = decoder.dequeueInputBuffer(TIMEOUT_US);\n                if (inIndex >= 0) {\n                    ByteBuffer buffer = inputBuffers[inIndex];\n                    int sampleSize = extractor.readSampleData(buffer, 0);\n                    if (sampleSize < 0) {\n                        // \u7d42\u4e86\n                        Log.d(TAG, \"InputBuffer BUFFER_FLAG_END_OF_STREAM\");\n                        decoder.queueInputBuffer(inIndex, 0, 0, 0, MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n                        isDecoding = false;\n                    } else {\n                        // \u6b21\u3078\n                        decoder.queueInputBuffer(inIndex, 0, sampleSize, extractor.getSampleTime(), 0);\n                        extractor.advance();\n                    }\n                }\n            }\n\n            int outIndex = decoder.dequeueOutputBuffer(info, TIMEOUT_US);\n            switch (outIndex) {\n                case MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED:\n                    Log.d(TAG, \"INFO_OUTPUT_BUFFERS_CHANGED\");\n                    outputBuffers = decoder.getOutputBuffers();\n                    break;\n                case MediaCodec.INFO_OUTPUT_FORMAT_CHANGED:\n                    Log.d(TAG, \"New format \" + decoder.getOutputFormat());\n                    break;\n                case MediaCodec.INFO_TRY_AGAIN_LATER:\n                    Log.d(TAG, \"time out\");\n                    break;\n                default:\n                    ByteBuffer buffer = outputBuffers[outIndex];\n\n                    final byte[] chunk = new byte[info.size];\n                    buffer.get(chunk);\n                    buffer.clear();\n                    soundDataList.add(chunk);\n                    decoder.releaseOutputBuffer(outIndex, true);\n                    break;\n            }\n\n            if ((info.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n                Log.d(TAG, \"OutputBuffer BUFFER_FLAG_END_OF_STREAM\");\n                break;\n            }\n        }\n\n        decoder.stop();\n        decoder.release();\n        extractor.release();\n\n\n\n\u30c7\u30b3\u30fc\u30c9\u3057\u305f\u30c7\u30fc\u30bf\u3092\u30b5\u30f3\u30d7\u30eb\u3054\u3068\u306b\u683c\u7d0d\n\u4eca\u56de\u306f\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30ec\u30fc\u30c8\u304c48000\u306a\u306e\u3067\n1\u79d2\u9593\u306b48000\u306e\u30b5\u30f3\u30d7\u30eb\u304c\u5165\u3063\u3066\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u4eca\u56de\u306f\u30d3\u30c3\u30c8\uff0f\u30b5\u30f3\u30d7\u30eb\u304c16bit\u306a\u306e\u3067\n2\u30d0\u30a4\u30c8\u5206\u3065\u3064samples[]\u306b\u683c\u7d0d\u3057\u3066\u3044\u304d\u307e\u3059\n        int c = 0;\n        for (int i = 0; i < soundDataList.size(); i++) {\n            byte[] chunk = (byte[]) soundDataList.get(i);\n            for (int j = 0; j < chunk.length; j = j + 2) {\n                int value = 0;\n                value = (value << 8) + (chunk[j]);\n                value = (value << 8) + (chunk[j + 1]);\n                samples[c] = value;\n                c++;\n            }\n        }\n\n\n\u30d5\u30ec\u30fc\u30e0\u3054\u3068\u306e\u97f3\u91cf\u3092\u6c42\u3081\u308b\n1\u30d5\u30ec\u30fc\u30e0\u306e\u30b5\u30f3\u30d7\u30eb\u6570\u306f\u53c2\u8003\u30b5\u30a4\u30c8\u540c\u69d8512\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n        // \u30d5\u30ec\u30fc\u30e0\u306e\u6570\n        int n = c / FRAME_LEN;\n\n        // \u30d5\u30ec\u30fc\u30e0\u3054\u3068\u306e\u97f3\u91cf\u3092\u6c42\u3081\u308b\n        double[] vols = new double[n];\n        for (int i = 0; i < n; i++) {\n            double vol = 0;\n            for (int j = 0; j < FRAME_LEN; j++) {\n                int sound = samples[i * FRAME_LEN + j];\n                vol += Math.pow(sound, 2);\n            }\n            vol = Math.sqrt((1.0 / FRAME_LEN) * vol);\n            vols[i] = vol;\n        }\n\n\n\u96a3\u308a\u5408\u3046\u30d5\u30ec\u30fc\u30e0\u306e\u97f3\u91cf\u306e\u5897\u52a0\u5206\u3092\u6c42\u3081\u308b\n        // \u96a3\u308a\u5408\u3046\u30d5\u30ec\u30fc\u30e0\u306e\u97f3\u91cf\u306e\u5897\u52a0\u5206\u3092\u6c42\u3081\u308b\n        double[] diffs = new double[n];\n        for (int i = 0; i < n - 1; i++) {\n            double diff = vols[i] - vols[i + 1];\n            if (diff > 0) {\n                diffs[i] = diff;\n            } else {\n                diffs[i] = 0;\n            }\n        }\n\n\n\u4e0b\u306e\u56f3\u306f\u97f3\u91cf\u306e\u5897\u52a0\u5206\u306e\u4e00\u90e8\u3092\u30b0\u30e9\u30d5\u306b\u3057\u305f\u3082\u306e\u3067\u3059\n\u6a2a\u304c\u6642\u9593\u8ef8\u3067\u7e26\u304c\u97f3\u91cf\u306e\u5897\u52a0\u5206\n\n\n\u3069\u306e\u30c6\u30f3\u30dd\u304c\u30de\u30c3\u30c1\u3059\u308b\u304b\u3092\u6c42\u3081\u308b\n\u5897\u52a0\u91cf\u306e\u6642\u9593\u5909\u5316\u306e\u5468\u6ce2\u6570\u6210\u5206\u3092\u6c42\u3081\u3066\n        double s = (double) sampleRate / FRAME_LEN;\n\n        double[] a = new double[240 - 60 + 1];\n        double[] b = new double[240 - 60 + 1];\n        double[] r = new double[240 - 60 + 1];\n        for (int bpm = 60; bpm <= 240; bpm++) {\n            double aSum = 0;\n            double bSum = 0;\n            double f = (double) bpm / 60;\n            for (int i = 0; i < n; i++) {\n                aSum += diffs[i] * Math.cos(2.0 * Math.PI * f * i / s);\n                bSum += diffs[i] * Math.sin(2.0 * Math.PI * f * i / s);\n            }\n            double aTmp = aSum / n;\n            double bTmp = bSum / n;\n            a[bpm - 60] = aTmp;\n            b[bpm - 60] = bTmp;\n            r[bpm - 60] = Math.sqrt(Math.pow(aTmp, 2) + Math.pow(bTmp, 2));\n        }\n\n\n\u4e00\u756a\u30de\u30c3\u30c1\u3059\u308b\u914d\u5217\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6c42\u3081\u308b\n        int maxIndex = -1;\n\n        // \u4e00\u756a\u30de\u30c3\u30c1\u3059\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6c42\u3081\u308b\n        double dy = 0;\n        for (int i = 1; i < 240 - 60 + 1; ++i) {\n            double dyPre = dy;\n            dy = r[i] - r[i - 1];\n            if (dyPre > 0 && dy <= 0) {\n                if (maxIndex < 0 || r[i - 1] > r[maxIndex]) {\n                    maxIndex = i - 1;\n                }\n            }\n        }\n\n\u5b9f\u969b\u306eBPM\u306fmaxIndex + 60\u306b\u306a\u308a\u307e\u3059\u3002\n\uff08maxIndex\u306f\u914d\u5217\u306e\u8981\u7d20\u6570\u3067\u3042\u308b\u305f\u3081\uff09\n\u5b9f\u884c\u3057\u305f\u7d50\u679c\u3001120\u3068\u3044\u3046\u5024\u304c\u51fa\u3066\u304d\u307e\u3057\u305f\u3002\n\u3053\u308c\u306e\u30bd\u30fc\u30b9\u306fgithub\u306b\u3042\u3052\u3066\u307e\u3059\u3002\nhttps://github.com/music431per/MusicBpm\n\n\u6700\u5f8c\u306b\nBPM\u3092\u8abf\u3079\u3066\u307f\u3066\n\u3074\u3063\u305f\u308a120\u3068\u3044\u3046\u5024\u304c\u51fa\u3066\u304d\u3066\u3073\u3063\u304f\u308a\u3057\u307e\u3057\u305f\u3002\n\u540c\u69d8\u306b\u30c6\u30f3\u30dd100\u306e\u30e1\u30c8\u30ed\u30ce\u30fc\u30e0\u306e\u97f3\u6e90\u3067\u3082\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u304c\u540c\u3058\u304f\n\u3074\u3063\u305f\u308a\u306e\u5024\u304c\u51fa\u3066\u304d\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306f\u30e1\u30c8\u30ed\u30ce\u30fc\u30e0\u306e\u97f3\u6e90\u3068\u3044\u3046\n\u30c6\u30f3\u30dd\u304c\u308f\u304b\u308a\u3084\u3059\u305d\u3046\u306a\u97f3\u6e90\u3092\u5229\u7528\u3057\u307e\u3057\u305f\u304c\n\u307e\u3060\u3001\u97f3\u697d\u306e\u30c7\u30fc\u30bf\u3067\u5b9f\u969b\u306bBPM\u306f\u53d6\u308c\u3066\u3044\u307e\u305b\u3093\u3002\n\u30c1\u30e3\u30f3\u30cd\u30eb\u6570\u304c\u9055\u3046\u305f\u3081\u3001\u307e\u305f\u3053\u307e\u304b\u306a\u3068\u3053\u308d\u304c\u9055\u3046\u306e\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\n\u97f3\u697d\u3067\u3082\u5b9f\u969b\u306bBPM\u3092\u53d6\u308c\u308b\u3088\u3046\u306b\u3050\u3050\u3063\u3066\u3044\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u304c\n2\u30c1\u30e3\u30f3\u30cd\u30eb\u306e\u5834\u5408\u3069\u3093\u306a\u98a8\u306bBPM\u3092\u8abf\u3079\u308c\u3070\u3044\u3044\u304b\u306a\u3069\n\u308f\u304b\u308b\u65b9\u3001\u30a2\u30c9\u30d0\u30a4\u30b9\u3044\u305f\u3060\u3051\u308b\u3068\u5b09\u3057\u3044\u3067\u3059\u3002\n\u3067\u306f\uff01\n\n\u53c2\u8003\nMediaCodec\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\nhttps://developer.android.com/reference/android/media/MediaCodec.html\nMediaCodec\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u548c\u8a33\nhttp://qiita.com/imatomi/items/bd9d49cfb1f73383ca12\n\u30c7\u30b3\u30fc\u30c9\u306e\u6642\u306b\u53c2\u8003\u306b\u3057\u305f\u30b3\u30fc\u30c9\nhttps://github.com/taehwandev/MediaCodecExample\nhttps://github.com/vecio/MediaCodecDemo\nC/C++\u8a00\u8a9e\u3067\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u306e\u30c6\u30f3\u30dd\u89e3\u6790\u3092\u884c\u3046\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\nhttp://hp.vector.co.jp/authors/VA046927/tempo/tempo.html\n\u30e1\u30c8\u30ed\u30ce\u30fc\u30e0\u306e\u97f3\u6e90\u53d6\u5f97\nhttp://metronomer.com/\n[Android\u305d\u306e\uff12 Advent Calendar 2016](http://qiita.com/advent-calendar/2016/android_second)\n\u306e5\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\uff01\n\n\u4f5c\u6210\u3057\u3066\u308b\u30a2\u30d7\u30ea\u3067\u97f3\u697d\u306eBPM\u3092\u77e5\u308a\u305f\u304b\u3063\u305f\u306e\u3067\n\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u97f3\u697d\u306eBPM\u3092\u8abf\u3079\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u8a18\u4e8b\u3068\u3057\u3066\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u304c\u308f\u304b\u3063\u3066\u306a\u3044\u3068\u3053\u308d\u3082\u591a\u3044\u70ba\n\u304a\u304b\u3057\u3044\u3068\u3053\u308d\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u305d\u3053\u306f\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u308b\u3068\u5b09\u3057\u3044\u3067\u3059m(_ _)m\n\n## \u624b\u9806\n\n1. \u97f3\u58f0\u30c7\u30fc\u30bf\u3092\u30c7\u30b3\u30fc\u30c9\u3059\u308b\n2. \u30c7\u30b3\u30fc\u30c9\u3057\u305f\u30c7\u30fc\u30bf\u3092\u30b5\u30f3\u30d7\u30eb\u3054\u3068\u306b\u683c\u7d0d\n3. \u30d5\u30ec\u30fc\u30e0\u3054\u3068\u306e\u97f3\u91cf\u3092\u6c42\u3081\u308b\n4. \u96a3\u308a\u5408\u3046\u30d5\u30ec\u30fc\u30e0\u306e\u97f3\u91cf\u306e\u5897\u52a0\u5206\u3092\u6c42\u3081\u308b\n5. \u3069\u306e\u30c6\u30f3\u30dd\u304c\u30de\u30c3\u30c1\u3059\u308b\u304b\u3092\u6c42\u3081\u308b\n\n\u3063\u3066\u624b\u9806\u3067\u3084\u308a\u307e\u3057\u305f\uff01\n\n\u3053\u3053\u306e\u30b5\u30a4\u30c8\u3092\u307b\u307c\u307b\u307c\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\nhttp://hp.vector.co.jp/authors/VA046927/tempo/tempo.html\n\u8a73\u3057\u3044\u3068\u3053\u308d\u3092\u77e5\u308a\u305f\u3044\u65b9\u306f\u3053\u3063\u3061\u3092\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n## \u4eca\u56de\u5229\u7528\u3057\u305f\u97f3\u6e90\n\n\u4eca\u56de\u306e\u97f3\u6e90\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30e1\u30c8\u30ed\u30ce\u30fc\u30e0\u306e\u97f3\u3092\u5229\u7528\u3057\u307e\u3057\u305f\u3002\n\n- \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30ec\u30fc\u30c8\uff1a48000\n- \u30c1\u30e3\u30f3\u30cd\u30eb\u6570\uff1a1\n- \u30d3\u30c3\u30c8\uff0f\u30b5\u30f3\u30d7\u30eb\uff1a16bit\n- BPM\uff1a120\n- \u79d2\u6570\uff1a30s\n\n## \u66f8\u3044\u3066\u307f\u305f\u30b3\u30fc\u30c9\n\n### \u97f3\u58f0\u30c7\u30fc\u30bf\u3092\u30c7\u30b3\u30fc\u30c9\u3059\u308b\n\nMediaCodec\u3063\u3066\u3044\u3046\u4f4e\u30ec\u30d9\u30eb\u306e\u30e1\u30c7\u30a3\u30a2\u30b3\u30fc\u30c7\u30a3\u30c3\u30af\uff08\u30a8\u30f3\u30b3\u30fc\u30c0/\u30c7\u30b3\u30fc\u30c0\uff09\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308bapi\u3092\u5229\u7528\u3057\u3066\u30c7\u30b3\u30fc\u30c9\u3092\u884c\u3044\u307e\u3057\u305f\u3002\n\n\u30c7\u30b3\u30fc\u30c0\u306e\u4f5c\u6210\n\n```\n\n        for (int i = 0; i < extractor.getTrackCount(); i++) {\n            MediaFormat format = extractor.getTrackFormat(i);\n            String mime = format.getString(MediaFormat.KEY_MIME);\n            // \u97f3\u697d\u306e\u30c7\u30fc\u30bf\u306a\u3089\n            if (mime.startsWith(\"audio/\")) {\n                extractor.selectTrack(i);\n                try {\n                    decoder = MediaCodec.createDecoderByType(mime);\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                decoder.configure(format, null, null, 0);\n                break;\n            }\n        }\n\n```\n\n\n\u30c7\u30b3\u30fc\u30c9\n\n```\n        \n        decoder.start();\n\n        ByteBuffer[] inputBuffers = decoder.getInputBuffers();\n        ByteBuffer[] outputBuffers = decoder.getOutputBuffers();\n        MediaCodec.BufferInfo info = new MediaCodec.BufferInfo();\n        boolean isDecoding = true;\n\n        while (!Thread.interrupted()) {\n\n            if (isDecoding) {\n                int inIndex = decoder.dequeueInputBuffer(TIMEOUT_US);\n                if (inIndex >= 0) {\n                    ByteBuffer buffer = inputBuffers[inIndex];\n                    int sampleSize = extractor.readSampleData(buffer, 0);\n                    if (sampleSize < 0) {\n                        // \u7d42\u4e86\n                        Log.d(TAG, \"InputBuffer BUFFER_FLAG_END_OF_STREAM\");\n                        decoder.queueInputBuffer(inIndex, 0, 0, 0, MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n                        isDecoding = false;\n                    } else {\n                        // \u6b21\u3078\n                        decoder.queueInputBuffer(inIndex, 0, sampleSize, extractor.getSampleTime(), 0);\n                        extractor.advance();\n                    }\n                }\n            }\n\n            int outIndex = decoder.dequeueOutputBuffer(info, TIMEOUT_US);\n            switch (outIndex) {\n                case MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED:\n                    Log.d(TAG, \"INFO_OUTPUT_BUFFERS_CHANGED\");\n                    outputBuffers = decoder.getOutputBuffers();\n                    break;\n                case MediaCodec.INFO_OUTPUT_FORMAT_CHANGED:\n                    Log.d(TAG, \"New format \" + decoder.getOutputFormat());\n                    break;\n                case MediaCodec.INFO_TRY_AGAIN_LATER:\n                    Log.d(TAG, \"time out\");\n                    break;\n                default:\n                    ByteBuffer buffer = outputBuffers[outIndex];\n\n                    final byte[] chunk = new byte[info.size];\n                    buffer.get(chunk);\n                    buffer.clear();\n                    soundDataList.add(chunk);\n                    decoder.releaseOutputBuffer(outIndex, true);\n                    break;\n            }\n\n            if ((info.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n                Log.d(TAG, \"OutputBuffer BUFFER_FLAG_END_OF_STREAM\");\n                break;\n            }\n        }\n\n        decoder.stop();\n        decoder.release();\n        extractor.release();\n\n```\n\n### \u30c7\u30b3\u30fc\u30c9\u3057\u305f\u30c7\u30fc\u30bf\u3092\u30b5\u30f3\u30d7\u30eb\u3054\u3068\u306b\u683c\u7d0d\n\n\u4eca\u56de\u306f\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30ec\u30fc\u30c8\u304c48000\u306a\u306e\u3067\n1\u79d2\u9593\u306b48000\u306e\u30b5\u30f3\u30d7\u30eb\u304c\u5165\u3063\u3066\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u4eca\u56de\u306f\u30d3\u30c3\u30c8\uff0f\u30b5\u30f3\u30d7\u30eb\u304c16bit\u306a\u306e\u3067\n2\u30d0\u30a4\u30c8\u5206\u3065\u3064`samples[]`\u306b\u683c\u7d0d\u3057\u3066\u3044\u304d\u307e\u3059\n\n\n```\n\t\tint c = 0;\n        for (int i = 0; i < soundDataList.size(); i++) {\n            byte[] chunk = (byte[]) soundDataList.get(i);\n            for (int j = 0; j < chunk.length; j = j + 2) {\n                int value = 0;\n                value = (value << 8) + (chunk[j]);\n                value = (value << 8) + (chunk[j + 1]);\n                samples[c] = value;\n                c++;\n            }\n        }\n```\n\n### \u30d5\u30ec\u30fc\u30e0\u3054\u3068\u306e\u97f3\u91cf\u3092\u6c42\u3081\u308b\n\n1\u30d5\u30ec\u30fc\u30e0\u306e\u30b5\u30f3\u30d7\u30eb\u6570\u306f\u53c2\u8003\u30b5\u30a4\u30c8\u540c\u69d8512\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n```\n\t\t// \u30d5\u30ec\u30fc\u30e0\u306e\u6570\n        int n = c / FRAME_LEN;\n\n        // \u30d5\u30ec\u30fc\u30e0\u3054\u3068\u306e\u97f3\u91cf\u3092\u6c42\u3081\u308b\n        double[] vols = new double[n];\n        for (int i = 0; i < n; i++) {\n            double vol = 0;\n            for (int j = 0; j < FRAME_LEN; j++) {\n                int sound = samples[i * FRAME_LEN + j];\n                vol += Math.pow(sound, 2);\n            }\n            vol = Math.sqrt((1.0 / FRAME_LEN) * vol);\n            vols[i] = vol;\n        }\n```\n\n### \u96a3\u308a\u5408\u3046\u30d5\u30ec\u30fc\u30e0\u306e\u97f3\u91cf\u306e\u5897\u52a0\u5206\u3092\u6c42\u3081\u308b\n\n```\n\t\t// \u96a3\u308a\u5408\u3046\u30d5\u30ec\u30fc\u30e0\u306e\u97f3\u91cf\u306e\u5897\u52a0\u5206\u3092\u6c42\u3081\u308b\n        double[] diffs = new double[n];\n        for (int i = 0; i < n - 1; i++) {\n            double diff = vols[i] - vols[i + 1];\n            if (diff > 0) {\n                diffs[i] = diff;\n            } else {\n                diffs[i] = 0;\n            }\n        }\n\n```\n\n\u4e0b\u306e\u56f3\u306f\u97f3\u91cf\u306e\u5897\u52a0\u5206\u306e\u4e00\u90e8\u3092\u30b0\u30e9\u30d5\u306b\u3057\u305f\u3082\u306e\u3067\u3059\n\u6a2a\u304c\u6642\u9593\u8ef8\u3067\u7e26\u304c\u97f3\u91cf\u306e\u5897\u52a0\u5206\n![\u56f31.png](https://qiita-image-store.s3.amazonaws.com/0/64452/02f9f8d8-8643-ce47-d352-ed631d87c5d1.png)\n\n\n\n\n### \u3069\u306e\u30c6\u30f3\u30dd\u304c\u30de\u30c3\u30c1\u3059\u308b\u304b\u3092\u6c42\u3081\u308b\n\n\u5897\u52a0\u91cf\u306e\u6642\u9593\u5909\u5316\u306e\u5468\u6ce2\u6570\u6210\u5206\u3092\u6c42\u3081\u3066\n\n```\n\t\tdouble s = (double) sampleRate / FRAME_LEN;\n\n        double[] a = new double[240 - 60 + 1];\n        double[] b = new double[240 - 60 + 1];\n        double[] r = new double[240 - 60 + 1];\n        for (int bpm = 60; bpm <= 240; bpm++) {\n            double aSum = 0;\n            double bSum = 0;\n            double f = (double) bpm / 60;\n            for (int i = 0; i < n; i++) {\n                aSum += diffs[i] * Math.cos(2.0 * Math.PI * f * i / s);\n                bSum += diffs[i] * Math.sin(2.0 * Math.PI * f * i / s);\n            }\n            double aTmp = aSum / n;\n            double bTmp = bSum / n;\n            a[bpm - 60] = aTmp;\n            b[bpm - 60] = bTmp;\n            r[bpm - 60] = Math.sqrt(Math.pow(aTmp, 2) + Math.pow(bTmp, 2));\n        }\n\n```\n\n\u4e00\u756a\u30de\u30c3\u30c1\u3059\u308b\u914d\u5217\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6c42\u3081\u308b\n\n```\n\t\tint maxIndex = -1;\n\n        // \u4e00\u756a\u30de\u30c3\u30c1\u3059\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6c42\u3081\u308b\n        double dy = 0;\n        for (int i = 1; i < 240 - 60 + 1; ++i) {\n            double dyPre = dy;\n            dy = r[i] - r[i - 1];\n            if (dyPre > 0 && dy <= 0) {\n                if (maxIndex < 0 || r[i - 1] > r[maxIndex]) {\n                    maxIndex = i - 1;\n                }\n            }\n        }\n```\n\n\u5b9f\u969b\u306eBPM\u306f`maxIndex + 60`\u306b\u306a\u308a\u307e\u3059\u3002\n\uff08maxIndex\u306f\u914d\u5217\u306e\u8981\u7d20\u6570\u3067\u3042\u308b\u305f\u3081\uff09\n\n\u5b9f\u884c\u3057\u305f\u7d50\u679c\u3001120\u3068\u3044\u3046\u5024\u304c\u51fa\u3066\u304d\u307e\u3057\u305f\u3002\n\n\u3053\u308c\u306e\u30bd\u30fc\u30b9\u306fgithub\u306b\u3042\u3052\u3066\u307e\u3059\u3002\nhttps://github.com/music431per/MusicBpm\n\n\n## \u6700\u5f8c\u306b\n\nBPM\u3092\u8abf\u3079\u3066\u307f\u3066\n\u3074\u3063\u305f\u308a120\u3068\u3044\u3046\u5024\u304c\u51fa\u3066\u304d\u3066\u3073\u3063\u304f\u308a\u3057\u307e\u3057\u305f\u3002\n\u540c\u69d8\u306b\u30c6\u30f3\u30dd100\u306e\u30e1\u30c8\u30ed\u30ce\u30fc\u30e0\u306e\u97f3\u6e90\u3067\u3082\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u304c\u540c\u3058\u304f\n\u3074\u3063\u305f\u308a\u306e\u5024\u304c\u51fa\u3066\u304d\u307e\u3057\u305f\u3002\n\n\u4eca\u56de\u306f\u30e1\u30c8\u30ed\u30ce\u30fc\u30e0\u306e\u97f3\u6e90\u3068\u3044\u3046\n\u30c6\u30f3\u30dd\u304c\u308f\u304b\u308a\u3084\u3059\u305d\u3046\u306a\u97f3\u6e90\u3092\u5229\u7528\u3057\u307e\u3057\u305f\u304c\n\u307e\u3060\u3001\u97f3\u697d\u306e\u30c7\u30fc\u30bf\u3067\u5b9f\u969b\u306bBPM\u306f\u53d6\u308c\u3066\u3044\u307e\u305b\u3093\u3002\n\n\u30c1\u30e3\u30f3\u30cd\u30eb\u6570\u304c\u9055\u3046\u305f\u3081\u3001\u307e\u305f\u3053\u307e\u304b\u306a\u3068\u3053\u308d\u304c\u9055\u3046\u306e\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\n\u97f3\u697d\u3067\u3082\u5b9f\u969b\u306bBPM\u3092\u53d6\u308c\u308b\u3088\u3046\u306b\u3050\u3050\u3063\u3066\u3044\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u304c\n2\u30c1\u30e3\u30f3\u30cd\u30eb\u306e\u5834\u5408\u3069\u3093\u306a\u98a8\u306bBPM\u3092\u8abf\u3079\u308c\u3070\u3044\u3044\u304b\u306a\u3069\n\u308f\u304b\u308b\u65b9\u3001\u30a2\u30c9\u30d0\u30a4\u30b9\u3044\u305f\u3060\u3051\u308b\u3068\u5b09\u3057\u3044\u3067\u3059\u3002\n\n\u3067\u306f\uff01\n\n## \u53c2\u8003\n\nMediaCodec\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\nhttps://developer.android.com/reference/android/media/MediaCodec.html\n\nMediaCodec\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u548c\u8a33\nhttp://qiita.com/imatomi/items/bd9d49cfb1f73383ca12\n\n\u30c7\u30b3\u30fc\u30c9\u306e\u6642\u306b\u53c2\u8003\u306b\u3057\u305f\u30b3\u30fc\u30c9\nhttps://github.com/taehwandev/MediaCodecExample\nhttps://github.com/vecio/MediaCodecDemo\n\nC/C++\u8a00\u8a9e\u3067\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u306e\u30c6\u30f3\u30dd\u89e3\u6790\u3092\u884c\u3046\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\nhttp://hp.vector.co.jp/authors/VA046927/tempo/tempo.html\n\n\u30e1\u30c8\u30ed\u30ce\u30fc\u30e0\u306e\u97f3\u6e90\u53d6\u5f97\nhttp://metronomer.com/\n\n\n\n\n", "tags": ["audio", "Android"]}