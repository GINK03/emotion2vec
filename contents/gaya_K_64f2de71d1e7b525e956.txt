{"context": "\u30bf\u30a4\u30c8\u30eb\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\u30b3\u30fc\u30c9\u30d3\u30cf\u30a4\u30f3\u30c9\u7b49\u3092\u4f7f\u308f\u305a\u306b\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u8a18\u8ff0\u3059\u308b\u3053\u3068\u306e\u826f\u3057\u60aa\u3057\u306f\u3055\u3066\u304a\u304d\u3001\nC# Script \u306e\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u307f\u305f\u304b\u3063\u305f\u306e\u3067\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u51fa\u6765\u4e0a\u304c\u308a\u30a4\u30e1\u30fc\u30b8\n\u5148\u306b\u51fa\u6765\u4e0a\u304c\u308a\u306e\u4f7f\u7528\u65b9\u6cd5\u3092\u66f8\u3044\u3066\u304a\u304f\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nArg0 \u306b MainWindow \u304c\u30d0\u30a4\u30f3\u30c9\u3055\u308c\u3001 EventTrigger \u3067 Load \u30a4\u30d9\u30f3\u30c8\u767a\u751f\u6642\u306b\nif (Arg0.ActualWidth > Arg0.ActualHeight) ... \u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n\u203b\u305f\u3060\u3057\u3001\u30a4\u30d9\u30f3\u30c8\u306e\u521d\u56de\u5b9f\u884c\u6642\u306b\u3081\u3061\u3083\u304f\u3061\u3083\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002\n<Window x:Class=\"ScriptOnWpf.MainWindow\"\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n        xmlns:i=\"http://schemas.microsoft.com/expression/2010/interactivity\"\n        xmlns:ei=\"http://schemas.microsoft.com/expression/2010/interactions\"\n        xmlns:local=\"clr-namespace:ScriptOnWpf\"\n        mc:Ignorable=\"d\"\n        Name=\"mainWin\"\n        Title=\"MainWindow\" Height=\"350\" Width=\"525\">\n    <i:Interaction.Triggers>\n        <i:EventTrigger EventName=\"Loaded\">\n            <local:ScriptAction Arg0=\"{Binding ElementName=mainWin}\">\n                <local:ScriptAction.Script>\n                    if (Arg0.ActualWidth > Arg0.ActualHeight)\n                    {\n                        Arg0.Height = Arg0.ActualWidth;\n                    }\n                    else\n                    {\n                        Arg0.Width = Arg0.ActualHeight;\n                    }\n                </local:ScriptAction.Script>\n            </local:ScriptAction>\n        </i:EventTrigger>\n    </i:Interaction.Triggers>\n    <Grid />\n</Window>\n\n\n\u4f5c\u6210\u3057\u305f\u30b3\u30fc\u30c9\n\u307e\u305a\u306f NuGet \u3067 Microsoft.CodeAnalysis.CSharp.Scripting \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\u305d\u3057\u3066\u3001\u53c2\u7167\u306b System.Windows.Interactivity, Microsoft.Expression.Interactions \u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\u305d\u3053\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3001 TriggerAction \u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\npublic class ScriptAction : TriggerAction<DependencyObject>\n{\n    private bool _scriptElementChanged;\n\n    private ScriptRunner<object> _runner;\n\n    private ScriptArguments _args;\n\n    #region Script\n    public string Script\n    {\n        get { return (string)GetValue(ScriptProperty); }\n        set { SetValue(ScriptProperty, value); }\n    }\n\n    public static readonly DependencyProperty ScriptProperty =\n        DependencyProperty.Register(\n            \"Script\",\n            typeof(string),\n            typeof(ScriptAction),\n            new FrameworkPropertyMetadata(\n                \"\",\n                (d, e) => ((ScriptAction)d).OnScriptChanged((string)e.OldValue, (string)e.NewValue)));\n\n    protected virtual void OnScriptChanged(string oldValue, string newValue)\n    {\n        _scriptElementChanged = true;\n    }\n    #endregion\n\n    #region ScriptOptions\n    public ScriptOptions ScriptOptions\n    {\n        get { return (ScriptOptions)GetValue(ScriptOptionsProperty); }\n        set { SetValue(ScriptOptionsProperty, value); }\n    }\n\n    public static readonly DependencyProperty ScriptOptionsProperty =\n        DependencyProperty.Register(\n            \"ScriptOptions\",\n            typeof(ScriptOptions),\n            typeof(ScriptAction),\n            new FrameworkPropertyMetadata(\n                null,\n                (d, e) => ((ScriptAction)d).OnScriptOptionsChanged((ScriptOptions)e.OldValue, (ScriptOptions)e.NewValue)));\n\n    protected virtual void OnScriptOptionsChanged(ScriptOptions oldValue, ScriptOptions newValue)\n    {\n        _scriptElementChanged = true;\n    }\n    #endregion\n\n    #region Arg0\n    public object Arg0\n    {\n        get { return GetValue(Arg0Property); }\n        set { SetValue(Arg0Property, value); }\n    }\n\n    public static readonly DependencyProperty Arg0Property =\n        DependencyProperty.Register(\n            \"Arg0\",\n            typeof(object),\n            typeof(ScriptAction),\n            new FrameworkPropertyMetadata(\n                null,\n                (d, e) => ((ScriptAction)d).OnArg0Changed(e.OldValue, e.NewValue)));\n\n    protected virtual void OnArg0Changed(object oldValue, object newValue)\n    {\n        if (oldValue?.GetType() != newValue?.GetType())\n        {\n            UpdateArguments();\n        }\n        else\n        {\n            _args?.SetArg(0, newValue);\n        }\n    }\n    #endregion\n\n    #region Arg1\n    public object Arg1\n    {\n        get { return GetValue(Arg1Property); }\n        set { SetValue(Arg1Property, value); }\n    }\n\n    public static readonly DependencyProperty Arg1Property =\n        DependencyProperty.Register(\n            \"Arg1\",\n            typeof(object),\n            typeof(ScriptAction),\n            new FrameworkPropertyMetadata(\n                null,\n                (d, e) => ((ScriptAction)d).OnArg1Changed(e.OldValue, e.NewValue)));\n\n    protected virtual void OnArg1Changed(object oldValue, object newValue)\n    {\n        if (oldValue?.GetType() != newValue?.GetType())\n        {\n            UpdateArguments();\n        }\n        else\n        {\n            _args?.SetArg(1, newValue);\n        }\n    }\n    #endregion\n\n    #region Arg2\n    public object Arg2\n    {\n        get { return GetValue(Arg2Property); }\n        set { SetValue(Arg2Property, value); }\n    }\n\n    public static readonly DependencyProperty Arg2Property =\n        DependencyProperty.Register(\n            \"Arg2\",\n            typeof(object),\n            typeof(ScriptAction),\n            new FrameworkPropertyMetadata(\n                null,\n                (d, e) => ((ScriptAction)d).OnArg2Changed(e.OldValue, e.NewValue)));\n\n    protected virtual void OnArg2Changed(object oldValue, object newValue)\n    {\n        if (oldValue?.GetType() != newValue?.GetType())\n        {\n            UpdateArguments();\n        }\n        else\n        {\n            _args?.SetArg(2, newValue);\n        }\n    }\n    #endregion\n\n    #region Arg3\n    public object Arg3\n    {\n        get { return GetValue(Arg3Property); }\n        set { SetValue(Arg3Property, value); }\n    }\n\n    public static readonly DependencyProperty Arg3Property =\n        DependencyProperty.Register(\n            \"Arg3\",\n            typeof(object),\n            typeof(ScriptAction),\n            new FrameworkPropertyMetadata(\n                null,\n                (d, e) => ((ScriptAction)d).OnArg3Changed(e.OldValue, e.NewValue)));\n\n    protected virtual void OnArg3Changed(object oldValue, object newValue)\n    {\n        if (oldValue?.GetType() != newValue?.GetType())\n        {\n            UpdateArguments();\n        }\n        else\n        {\n            _args?.SetArg(3, newValue);\n        }\n    }\n    #endregion\n\n    private void UpdateArguments()\n    {\n        // \u5404\u5f15\u6570\u306e\u578b\u304b\u3089\u52d5\u7684\u306b ScriptArguments<> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u308a\u51fa\u3059\u3002\n        var argTypes = new Type[]\n        {\n            Arg0?.GetType() ?? typeof(object),\n            Arg1?.GetType() ?? typeof(object),\n            Arg2?.GetType() ?? typeof(object),\n            Arg3?.GetType() ?? typeof(object),\n        };\n        _args = typeof(ScriptArguments<,,,>)\n            .MakeGenericType(argTypes)\n            .GetConstructor(argTypes)\n            .Invoke(new object[] { Arg0, Arg1, Arg2, Arg3 }) as ScriptArguments;\n\n        _scriptElementChanged = true;\n    }\n\n    protected override async void Invoke(object parameter)\n    {\n        if (_scriptElementChanged)\n        {\n            // \u30b9\u30af\u30ea\u30d7\u30c8\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u30c7\u30ea\u30b2\u30fc\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3002\n            _runner = CSharpScript\n                .Create(Script, ScriptOptions, _args?.GetType())\n                .CreateDelegate(); ;\n            _scriptElementChanged = false;\n        }\n\n        // \u30c7\u30ea\u30b2\u30fc\u30c8\u3092\u5b9f\u884c\n        await _runner?.Invoke(_args);\n    }\n}\n\npublic abstract class ScriptArguments\n{\n    public abstract void SetArg(int index, object value);\n}\n\npublic class ScriptArguments<T0, T1, T2, T3> : ScriptArguments\n{\n    public ScriptArguments(T0 arg0, T1 arg1, T2 arg2, T3 arg3)\n    {\n        Arg0 = arg0;\n        Arg1 = arg1;\n        Arg2 = arg2;\n        Arg3 = arg3;\n    }\n\n    // 4\u500b\u3082\u5f15\u6570\u304c\u3042\u308c\u3070\u8db3\u308a\u308b\u3067\u3057\u3087\u3002\n\n    public T0 Arg0 { get; set; }\n    public T1 Arg1 { get; set; }\n    public T2 Arg2 { get; set; }\n    public T3 Arg3 { get; set; }\n\n    public override void SetArg(int index, object value)\n    {\n        switch (index)\n        {\n            case 0:\n                Arg0 = (T0)value;\n                break;\n            case 1:\n                Arg1 = (T1)value;\n                break;\n            case 2:\n                Arg2 = (T2)value;\n                break;\n            case 3:\n                Arg3 = (T3)value;\n                break;\n            default:\n                throw new ArgumentOutOfRangeException(\"index\");\n        }\n    }\n}\n\n\u3054\u610f\u898b\u3042\u308a\u307e\u3057\u305f\u3089\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\u30bf\u30a4\u30c8\u30eb\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\u30b3\u30fc\u30c9\u30d3\u30cf\u30a4\u30f3\u30c9\u7b49\u3092\u4f7f\u308f\u305a\u306b\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u8a18\u8ff0\u3059\u308b\u3053\u3068\u306e\u826f\u3057\u60aa\u3057\u306f\u3055\u3066\u304a\u304d\u3001\nC# Script \u306e\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u307f\u305f\u304b\u3063\u305f\u306e\u3067\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n# \u51fa\u6765\u4e0a\u304c\u308a\u30a4\u30e1\u30fc\u30b8\n\u5148\u306b\u51fa\u6765\u4e0a\u304c\u308a\u306e\u4f7f\u7528\u65b9\u6cd5\u3092\u66f8\u3044\u3066\u304a\u304f\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nArg0 \u306b MainWindow \u304c\u30d0\u30a4\u30f3\u30c9\u3055\u308c\u3001 EventTrigger \u3067 Load \u30a4\u30d9\u30f3\u30c8\u767a\u751f\u6642\u306b\n`if (Arg0.ActualWidth > Arg0.ActualHeight) ...` \u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n\n\u203b\u305f\u3060\u3057\u3001\u30a4\u30d9\u30f3\u30c8\u306e\u521d\u56de\u5b9f\u884c\u6642\u306b\u3081\u3061\u3083\u304f\u3061\u3083\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002\n\n```xml\n<Window x:Class=\"ScriptOnWpf.MainWindow\"\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n        xmlns:i=\"http://schemas.microsoft.com/expression/2010/interactivity\"\n        xmlns:ei=\"http://schemas.microsoft.com/expression/2010/interactions\"\n        xmlns:local=\"clr-namespace:ScriptOnWpf\"\n        mc:Ignorable=\"d\"\n        Name=\"mainWin\"\n        Title=\"MainWindow\" Height=\"350\" Width=\"525\">\n    <i:Interaction.Triggers>\n        <i:EventTrigger EventName=\"Loaded\">\n            <local:ScriptAction Arg0=\"{Binding ElementName=mainWin}\">\n                <local:ScriptAction.Script>\n                    if (Arg0.ActualWidth > Arg0.ActualHeight)\n                    {\n                        Arg0.Height = Arg0.ActualWidth;\n                    }\n                    else\n                    {\n                        Arg0.Width = Arg0.ActualHeight;\n                    }\n                </local:ScriptAction.Script>\n            </local:ScriptAction>\n        </i:EventTrigger>\n    </i:Interaction.Triggers>\n    <Grid />\n</Window>\n```\n\n#\u4f5c\u6210\u3057\u305f\u30b3\u30fc\u30c9\n\u307e\u305a\u306f NuGet \u3067 Microsoft.CodeAnalysis.CSharp.Scripting \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\u305d\u3057\u3066\u3001\u53c2\u7167\u306b System.Windows.Interactivity, Microsoft.Expression.Interactions \u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n\u305d\u3053\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3001 TriggerAction \u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\n```csharp\npublic class ScriptAction : TriggerAction<DependencyObject>\n{\n    private bool _scriptElementChanged;\n\n    private ScriptRunner<object> _runner;\n\n    private ScriptArguments _args;\n\n    #region Script\n    public string Script\n    {\n        get { return (string)GetValue(ScriptProperty); }\n        set { SetValue(ScriptProperty, value); }\n    }\n\n    public static readonly DependencyProperty ScriptProperty =\n        DependencyProperty.Register(\n            \"Script\",\n            typeof(string),\n            typeof(ScriptAction),\n            new FrameworkPropertyMetadata(\n                \"\",\n                (d, e) => ((ScriptAction)d).OnScriptChanged((string)e.OldValue, (string)e.NewValue)));\n\n    protected virtual void OnScriptChanged(string oldValue, string newValue)\n    {\n        _scriptElementChanged = true;\n    }\n    #endregion\n\n    #region ScriptOptions\n    public ScriptOptions ScriptOptions\n    {\n        get { return (ScriptOptions)GetValue(ScriptOptionsProperty); }\n        set { SetValue(ScriptOptionsProperty, value); }\n    }\n\n    public static readonly DependencyProperty ScriptOptionsProperty =\n        DependencyProperty.Register(\n            \"ScriptOptions\",\n            typeof(ScriptOptions),\n            typeof(ScriptAction),\n            new FrameworkPropertyMetadata(\n                null,\n                (d, e) => ((ScriptAction)d).OnScriptOptionsChanged((ScriptOptions)e.OldValue, (ScriptOptions)e.NewValue)));\n\n    protected virtual void OnScriptOptionsChanged(ScriptOptions oldValue, ScriptOptions newValue)\n    {\n        _scriptElementChanged = true;\n    }\n    #endregion\n\n    #region Arg0\n    public object Arg0\n    {\n        get { return GetValue(Arg0Property); }\n        set { SetValue(Arg0Property, value); }\n    }\n\n    public static readonly DependencyProperty Arg0Property =\n        DependencyProperty.Register(\n            \"Arg0\",\n            typeof(object),\n            typeof(ScriptAction),\n            new FrameworkPropertyMetadata(\n                null,\n                (d, e) => ((ScriptAction)d).OnArg0Changed(e.OldValue, e.NewValue)));\n\n    protected virtual void OnArg0Changed(object oldValue, object newValue)\n    {\n        if (oldValue?.GetType() != newValue?.GetType())\n        {\n            UpdateArguments();\n        }\n        else\n        {\n            _args?.SetArg(0, newValue);\n        }\n    }\n    #endregion\n\n    #region Arg1\n    public object Arg1\n    {\n        get { return GetValue(Arg1Property); }\n        set { SetValue(Arg1Property, value); }\n    }\n\n    public static readonly DependencyProperty Arg1Property =\n        DependencyProperty.Register(\n            \"Arg1\",\n            typeof(object),\n            typeof(ScriptAction),\n            new FrameworkPropertyMetadata(\n                null,\n                (d, e) => ((ScriptAction)d).OnArg1Changed(e.OldValue, e.NewValue)));\n\n    protected virtual void OnArg1Changed(object oldValue, object newValue)\n    {\n        if (oldValue?.GetType() != newValue?.GetType())\n        {\n            UpdateArguments();\n        }\n        else\n        {\n            _args?.SetArg(1, newValue);\n        }\n    }\n    #endregion\n\n    #region Arg2\n    public object Arg2\n    {\n        get { return GetValue(Arg2Property); }\n        set { SetValue(Arg2Property, value); }\n    }\n\n    public static readonly DependencyProperty Arg2Property =\n        DependencyProperty.Register(\n            \"Arg2\",\n            typeof(object),\n            typeof(ScriptAction),\n            new FrameworkPropertyMetadata(\n                null,\n                (d, e) => ((ScriptAction)d).OnArg2Changed(e.OldValue, e.NewValue)));\n\n    protected virtual void OnArg2Changed(object oldValue, object newValue)\n    {\n        if (oldValue?.GetType() != newValue?.GetType())\n        {\n            UpdateArguments();\n        }\n        else\n        {\n            _args?.SetArg(2, newValue);\n        }\n    }\n    #endregion\n\n    #region Arg3\n    public object Arg3\n    {\n        get { return GetValue(Arg3Property); }\n        set { SetValue(Arg3Property, value); }\n    }\n\n    public static readonly DependencyProperty Arg3Property =\n        DependencyProperty.Register(\n            \"Arg3\",\n            typeof(object),\n            typeof(ScriptAction),\n            new FrameworkPropertyMetadata(\n                null,\n                (d, e) => ((ScriptAction)d).OnArg3Changed(e.OldValue, e.NewValue)));\n\n    protected virtual void OnArg3Changed(object oldValue, object newValue)\n    {\n        if (oldValue?.GetType() != newValue?.GetType())\n        {\n            UpdateArguments();\n        }\n        else\n        {\n            _args?.SetArg(3, newValue);\n        }\n    }\n    #endregion\n\n    private void UpdateArguments()\n    {\n        // \u5404\u5f15\u6570\u306e\u578b\u304b\u3089\u52d5\u7684\u306b ScriptArguments<> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u308a\u51fa\u3059\u3002\n        var argTypes = new Type[]\n        {\n            Arg0?.GetType() ?? typeof(object),\n            Arg1?.GetType() ?? typeof(object),\n            Arg2?.GetType() ?? typeof(object),\n            Arg3?.GetType() ?? typeof(object),\n        };\n        _args = typeof(ScriptArguments<,,,>)\n            .MakeGenericType(argTypes)\n            .GetConstructor(argTypes)\n            .Invoke(new object[] { Arg0, Arg1, Arg2, Arg3 }) as ScriptArguments;\n\n        _scriptElementChanged = true;\n    }\n\n    protected override async void Invoke(object parameter)\n    {\n        if (_scriptElementChanged)\n        {\n            // \u30b9\u30af\u30ea\u30d7\u30c8\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u30c7\u30ea\u30b2\u30fc\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3002\n            _runner = CSharpScript\n                .Create(Script, ScriptOptions, _args?.GetType())\n                .CreateDelegate(); ;\n            _scriptElementChanged = false;\n        }\n\n        // \u30c7\u30ea\u30b2\u30fc\u30c8\u3092\u5b9f\u884c\n        await _runner?.Invoke(_args);\n    }\n}\n\npublic abstract class ScriptArguments\n{\n    public abstract void SetArg(int index, object value);\n}\n\npublic class ScriptArguments<T0, T1, T2, T3> : ScriptArguments\n{\n    public ScriptArguments(T0 arg0, T1 arg1, T2 arg2, T3 arg3)\n    {\n        Arg0 = arg0;\n        Arg1 = arg1;\n        Arg2 = arg2;\n        Arg3 = arg3;\n    }\n\n    // 4\u500b\u3082\u5f15\u6570\u304c\u3042\u308c\u3070\u8db3\u308a\u308b\u3067\u3057\u3087\u3002\n\n    public T0 Arg0 { get; set; }\n    public T1 Arg1 { get; set; }\n    public T2 Arg2 { get; set; }\n    public T3 Arg3 { get; set; }\n\n    public override void SetArg(int index, object value)\n    {\n        switch (index)\n        {\n            case 0:\n                Arg0 = (T0)value;\n                break;\n            case 1:\n                Arg1 = (T1)value;\n                break;\n            case 2:\n                Arg2 = (T2)value;\n                break;\n            case 3:\n                Arg3 = (T3)value;\n                break;\n            default:\n                throw new ArgumentOutOfRangeException(\"index\");\n        }\n    }\n}\n```\n\n\u3054\u610f\u898b\u3042\u308a\u307e\u3057\u305f\u3089\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n", "tags": ["C#", "WPF", "Xaml", ".NET", ".NETFramework"]}