{"context": "CPU\u306e\u5275\u308a\u304b\u305f\u81ea\u4f53\u306f\u767a\u58f2\u3055\u308c\u305f\u3068\u304d\u8cb7\u3063\u3066\u8aad\u3093\u3060\u3093\u3060\u3051\u3069CPU\u4f5c\u3089\u305a\u306b\u305a\u3063\u3068\u304d\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u3001\u6b63\u6708\u4f11\u307f\u3092\u5229\u7528\u3057\u3066\u3064\u304f\u3063\u3066\u307f\u305f\u3002\n\nFPGA\u3084verilog\u81ea\u4f53\u306b\u6163\u308c\u308b\u305f\u3081\u306b\n\n\u30b3\u30b3\u3089\u3078\u3093\u3092\u3088\u3093\u3067\u305f\u3002\n\u6700\u521d\u306f\u307e\u3063\u305f\u304f\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u304c\u3001\u56de\u8def\u56f3\u3092\u8868\u73fe\u3057\u3066\u3044\u308b\u3068\u308f\u304b\u3063\u3066\u304b\u3089\u7d50\u69cb\u3001\u8aad\u307f\u66f8\u304d\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\u3042\u3068\u3001verilog\u306f\u56de\u8def\u56f3\u306b\u8fd1\u3044\u8868\u8a18\u3060\u3051\u3058\u3083\u306a\u304f\u3066\u3001\u308f\u308a\u3068\u632f\u308b\u821e\u3044\u3084\u624b\u7d9a\u304d\u8a00\u8a9e\u3063\u307d\u304f\u304b\u3051\u308b\u3068\u3053\u308d\u3082\u3042\u308b\u306e\u3067\u3001\u30de\u30eb\u30c1\u30d7\u30ec\u30af\u30b5\u306a\u3093\u304b\u306f\u3059\u3054\u304f\u697d\u306b\u304b\u3051\u308b\u3002\n\u305d\u3082\u305d\u3082\u81ea\u5206\u306f\u7d44\u307f\u8fbc\u307f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u77e5\u8b58\u304c\u3042\u3063\u305f\u306e\u30d4\u30f3\u304c\u3069\u3046\u3053\u3046\u306e\u8a71\u306f\u6163\u308c\u305f\u3089\u3068\u304f\u82e6\u52b4\u306f\u3057\u306a\u304b\u3063\u305f\u3002\uff08\u8a2d\u5b9a\u306a\u3069\u9762\u5012\u304f\u3055\u3044\u304c\u30fb\u30fb\u30fb\uff09\n\u3042\u3068\u3001\u30c6\u30b9\u30c8\u30d9\u30f3\u30c1\u306e\u66f8\u304d\u65b9\u304c\u3088\u304f\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u304c\u3042\u308b\u7a0b\u5ea6\u308f\u304b\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u304b\u3089\u306f\u30e2\u30b8\u30e5\u30fc\u30eb\u6bce\u306b\u66f8\u304f\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\u4eca\u56de\u3055\u304f\u305b\u3044\u3057\u305fCPU\u3082\u30e2\u30b8\u30e5\u30fc\u30eb\u6bce\u306b\u30c6\u30b9\u30c8\u30d9\u30f3\u30c1\u3092\u66f8\u3044\u3066\u3042\u308b\u3002\n\u6700\u521d\u306ficarus verilog\u3068GTKWave\u4e0a\u3067\u30c6\u30b9\u30c8\u30d9\u30f3\u30c1\u3067\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u4e0a\u3067\u52d5\u304b\u3057\u3066\u3001\u52d5\u3044\u305f\u306e\u3092\u78ba\u8a8d\u3057\u3066\u304b\u3089\u5b9f\u6a5f\u4e0a\uff08DE0)\u3067\u3082\u52d5\u304b\u3057\u3066\u307f\u305f\u3002\nDE0\u306f50MHZ\u3060\u3063\u305f\u306e\u3067\u52d5\u304d\u3092\u8ffd\u3046\u306b\u306f\u5206\u5468\u3059\u308b\u5fc5\u8981\u304c\u3042\u3063\u305f\u3051\u3069\u5206\u5468\u3057\u305f\u3089\u3061\u3083\u3093\u3068\u52d5\u3044\u305f\u3002\n\u7d44\u3093\u3067\u307f\u3066\u4e00\u756a\u82e6\u52b4\u3057\u305f\u306e\u304c\u30c7\u30b3\u30fc\u30c0\u30fc\u3067\u3001\u5168\u547d\u4ee4\u306b\u5bfe\u3057\u3066\u66f8\u304f\u306e\u3067\u9762\u5012\u304f\u3055\u304b\u3063\u305f\u3002\u30c6\u30b9\u30c8\u30d9\u30f3\u30c1\u3082\u3075\u304f\u3081\u3066\u3002\nTD4\u306f\u304b\u306a\u308a\u547d\u4ee4\u306e\u5c11\u306a\u3044CPU\u3067\u304b\u3064verilog\u306a\u306e\u3067\u3001\u307e\u3068\u3082\u306a\u898f\u6a21\u3067\u914d\u7dda\u3068\u304b\u3060\u3068\u76f8\u5f53\u9762\u5012\u304f\u3055\u3044\u3053\u3068\u304c\u76ee\u306b\u6d6e\u304b\u3076\u3002\n\u3042\u3068\u6700\u521d\u306f\u30ea\u30bb\u30c3\u30c8\u3092\u4ed8\u3051\u3066\u306a\u304b\u3063\u305f\u306e\u3067\u521d\u671f\u5316\u3055\u308c\u305aCPU\u304c\u3046\u3054\u304b\u306a\u304b\u3063\u305f\u3002\nverilog\u306f\u7d50\u69cb\u308f\u304b\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3093\u3060\u3051\u3069\u3001\u305d\u308c\u3067\u3082always\u3084function\u306e\u4f7f\u3044\u308f\u3051\u304c\u3088\u304f\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u308a\u306f\u307e\u3060\u3057\u3066\u3044\u308b\u306e\u3067\u3082\u3063\u3068\u52c9\u5f37\u3057\u305f\u3044\u3002\n\u3042\u3068\u306f\u3082\u3046\u3061\u3087\u3063\u3068\u307e\u3068\u3082\u306aCPU\u3064\u304f\u3063\u305f\u308a\u3001NES\u3092FPGA\u3067\u3064\u304f\u3063\u3066\u307f\u305f\u3044\u306a\u3068\u601d\u3063\u305f\u3002\n\u30ea\u30dd\u30b8\u30c8\u30ea\u306f\u3053\u3053\u3067\u3059\u3002\nhttps://github.com/oskimura/TD4\n\n\u89e3\u8aac\n\nALU\nTD4\u306eALU\u306f\u8db3\u3057\u7b97\u3057\u304b\u306a\u3044\u3002\u30b7\u30f3\u30d7\u30eb\u306aALU\u3002\nmodule alu(ain, bin, c, out);\n    input wire [3:0] ain,bin;\n    output c;\n    output wire [3:0] out;\n\n    assign {c,out} = ain + bin;\nendmodule\n\n\n\u30ab\u30a6\u30f3\u30bf\u30fc\nPC(\u30d7\u30ed\u30b0\u30e9\u30e0\u30ab\u30a6\u30f3\u30bf\u30fc)\u3001\u30af\u30ed\u30c3\u30af\u30ab\u30a6\u30f3\u30bf\u30fc\u306b\u30b8\u30e3\u30f3\u30d7\u547d\u4ee4\u3088\u3046\u306b\u30ed\u30fc\u30c9\u3092\u8ffd\u52a0\nmodule counter(reset, in,ld,clk,out);\n    input reset;\n    input [3:0] in;\n    input ld;\n    input clk;\n    output [3:0] out;\n\n    reg [3:0] cnt=4'b0000;\n    always @(posedge clk or negedge reset) begin\n        if (!reset) begin \n            cnt<= #1 4'b0000;\n        end\n        else if(ld==0) begin\n            cnt<= #1 in;\n        end \n        else begin\n            cnt <= #1 cnt+1;\n        end\n    end\n    assign out = cnt;\n\nendmodule\n\n\n\u30ec\u30b8\u30b9\u30bf\n\u30ea\u30bb\u30c3\u30c8\u3084\u5165\u529b\u304c\u306a\u3044\u9650\u308a\u540c\u3058\u5024\u3092\u51fa\u529b\u3057\u7d9a\u3051\u308b \nmodule register(reset,in,ld,clk,out);\n  input reset;\n  input [3:0] in;\n  input ld;\n  input clk;\n  output [3:0] out;\n\n  reg [3:0] mem=4'b000;\n  always @(posedge clk or negedge reset) begin\n    if(!reset) begin\n       mem =  #1 4'b0000;\n    end else if(!ld)begin\n      mem =  #1 in;\n    end\n  end \n  assign out = mem;\n\nendmodule\n\n\n\u30ed\u30e0\n\u672c\u306b\u306e\u3063\u3066\u3044\u308b\u30e9\u30fc\u30e1\u30f3\u30bf\u30a4\u30de\u30fc\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u5b9f\u88c5\u3055\u308c\u305fROM\u3002\n1Hz\u306716\u79d2\u30ab\u30a6\u30f3\u30bf\u30925\u56de\u7e70\u308a\u8fd4\u3059\nmodule rom(addr,out);\n    input [3:0] addr;\n    output reg [7:0] out;\n\n    always @(addr) begin\n        case (addr) \n            4'b0000: out=8'b10110111; // out 5\n\n//1           \n            4'b0001: out=8'b00000001; // add a 1\n            //2\n            4'b0010: out=8'b11100001; // jnc 1\n\n//3\n            4'b0011: out=8'b00000001; // add a 1\n            //4\n            4'b0100: out=8'b11100011; // jnc 3\n\n//5\n            4'b0101: out=8'b10110110; // out 6\n            //6\n            4'b0110: out=8'b00000001; // add a 1\n            //7\n            4'b0111: out=8'b11100110; // jnc 6\n\n//8\n            4'b1000: out=8'b00000001; // add a 1\n            //9\n            4'b1001: out=8'b11101000; // jnc 8\n\n            //10\n            4'b1010: out=8'b10110000; // out 0\n            //11\n            4'b1011: out=8'b10110100; // out 4\n            //12\n            4'b1100: out=8'b00000001; // add a 1\n            //13\n            4'b1101: out=8'b11101010; // jnc 10\n\n//14\n            4'b1110: out=8'b10111000; // out 8\n            //15\n            4'b1111: out=8'b11111111; // jmp 15\n        endcase\n    end\n\nendmodule\n\n\n\u30c7\u30b3\u30fc\u30c0\u30fc\n\u30a2\u30bb\u30f3\u30d6\u30e9\u306e\u547d\u4ee4\u3092\u3072\u305f\u3059\u3089\u56de\u8def\u51fa\u529b\u306b\u5909\u63db\u3057\u3066\u3044\u304f\nmodule decorder(op,c,sel,ld);\n    input [3:0] op;\n    input c;\n    output [1:0] sel;\n    output [3:0] ld;\n\n    reg [3:0] load;\n    reg [1:0] select;\n\n    always @(op or c) begin      \n        case (op) \n            // ADD,A,Im\n            4'b0000 : load<=4'b1110; \n            // MOV A,B\n            4'b0001: load=4'b1110; \n            // IN A\n            4'b0010: load=4'b1110;\n            // MOV A,Im\n            4'b0011: load=4'b1110;\n\n            // MOV B,A\n            4'b0100: load=4'b1101; \n            // MOV B,Im\n            4'b0101: load=4'b1101; \n            // IN B\n            4'b0110: load=4'b1101; \n            // MOV B,Im\n            4'b0111: load=4'b1101; \n\n            // OUT B\n            4'b1001: load=4'b1011; \n            // OUT Im\n            4'b1011: load=4'b1011; \n\n            // JMC\n            4'b1110:  if(c==0) begin \n                        // JMC(C=0) \n                            load=4'b0111; \n                        end \n                        else begin\n                        // JMC(C=1) \n                            load=4'b1111; \n                        end\n            // JMP\n            4'b1111: load=4'b0111;\n        endcase\n    end\n\n    always @(op) begin      \n        case (op) \n            // ADD,A,Im\n            4'b0000 : select<=2'b00;\n            // MOV A,B\n            4'b0001: select=2'b01;\n            // IN A\n            4'b0010:  select=2'b10;\n            // MOV A,Im\n            4'b0011: select=2'b11;\n\n            // MOV B,A\n            4'b0100:  select=2'b00;\n            // MOV B,Im\n            4'b0101:  select=2'b01;\n            // IN B\n            4'b0110:  select=2'b10;\n            // MOV B,Im\n            4'b0111: select=2'b11;\n\n            // OUT B\n            4'b1001: select=2'b10;\n            // OUT Im\n            4'b1011: select=2'b11;\n\n            // JMC\n            4'b1110:  if(c==0) begin \n                            // JMC(C=0) \n                            select=2'b11;\n                        end \n                        else begin\n                            // JMC(C=1) \n                            select=2'bxx;\n                        end\n            // JMP\n            4'b1111: select=2'b11;\n    endcase end\n\n    assign ld=load;\n    assign sel=select;\nendmodule\n\n\nTD4\n\u3053\u308c\u307e\u3067\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u7e4b\u3044\u3060\u3082\u306e\u3002\u30ad\u30e3\u30ea\u30fc\u30ec\u30b8\u30b9\u30bf\u306f\u5fd8\u308c\u3066\u3044\u305f\u306e\u3067\u5f8c\u304b\u3089\u8ffd\u52a0\u3002\nmodule td4(reset,clk,inp,outp);\n    input reset;\n    input clk;\n    input [3:0] inp;\n    output [3:0] outp;\n\n    wire [3:0] ch0,ch1,ch2,ch3;\n    wire [3:0] addr;\n\n    wire [3:0] a;\n\n    wire [7:0] memdata;\n\n    wire [3:0] alu_out;\n    wire [3:0] ld;\n\n    reg cflag;\n    wire cflga_r;\n\n    wire [1:0] sel;\n\n    assign outp = ch2;\n    wire [3:0] op,im;\n\n    mem mem_u(.addr(addr),.out(memdata));\n    assign ch3=4'b0000;\n\n    register areg(.reset(reset),.in(alu_out),.ld(ld[0]),.clk(clk),.out(ch0));\n    register breg(.reset(reset),.in(alu_out),.ld(ld[1]),.clk(clk),.out(ch1));\n    register creg(.reset(reset),.in(alu_out),.ld(ld[2]),.clk(clk),.out(outp));\n    counter pc(.reset(reset),.in(alu_out),.ld(ld[3]),.clk(clk),.out(addr));\n\n    assign op = memdata[7:4];\n    assign im = memdata[3:0];\n    dataselector dataselector_u(.sel(sel),.c0(ch0),.c1(ch1),.c2(inp),.c3(ch3),.y(a));\n\n    alu alu_u(.ain(a), .bin(im), .c(cflag_r), .out(alu_out));\n\n    always @(posedge clk  or reset) begin\n        if (!reset) begin\n            cflag = 1'b0;\n        end\n        else begin   \n            cflag = cflag_r;\n        end\n    end\n\n    decorder decorder_u(.op(op),.c(cflag),.sel(sel),.ld(ld));\n\n\nendmodule\n\nCPU\u306e\u5275\u308a\u304b\u305f\u81ea\u4f53\u306f\u767a\u58f2\u3055\u308c\u305f\u3068\u304d\u8cb7\u3063\u3066\u8aad\u3093\u3060\u3093\u3060\u3051\u3069CPU\u4f5c\u3089\u305a\u306b\u305a\u3063\u3068\u304d\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u3001\u6b63\u6708\u4f11\u307f\u3092\u5229\u7528\u3057\u3066\u3064\u304f\u3063\u3066\u307f\u305f\u3002\n<a  href=\"https://www.amazon.co.jp/gp/product/4839909865/ref=as_li_tf_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4839909865&linkCode=as2&tag=oskimura-22\"><img border=\"0\" src=\"http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=4839909865&Format=_SL110_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=oskimura-22\" ></a><img src=\"http://ir-jp.amazon-adsystem.com/e/ir?t=oskimura-22&l=as2&o=9&a=4839909865\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" />\n\n\nFPGA\u3084verilog\u81ea\u4f53\u306b\u6163\u308c\u308b\u305f\u3081\u306b\n<a  href=\"https://www.amazon.co.jp/gp/product/478983137X/ref=as_li_tf_il?ie=UTF8&camp=247&creative=1211&creativeASIN=478983137X&linkCode=as2&tag=oskimura-22\"><img border=\"0\" src=\"http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=478983137X&Format=_SL110_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=oskimura-22\" ></a><img src=\"http://ir-jp.amazon-adsystem.com/e/ir?t=oskimura-22&l=as2&o=9&a=478983137X\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" />\n\n\n\u30b3\u30b3\u3089\u3078\u3093\u3092\u3088\u3093\u3067\u305f\u3002\n\u6700\u521d\u306f\u307e\u3063\u305f\u304f\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u304c\u3001\u56de\u8def\u56f3\u3092\u8868\u73fe\u3057\u3066\u3044\u308b\u3068\u308f\u304b\u3063\u3066\u304b\u3089\u7d50\u69cb\u3001\u8aad\u307f\u66f8\u304d\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\u3042\u3068\u3001verilog\u306f\u56de\u8def\u56f3\u306b\u8fd1\u3044\u8868\u8a18\u3060\u3051\u3058\u3083\u306a\u304f\u3066\u3001\u308f\u308a\u3068\u632f\u308b\u821e\u3044\u3084\u624b\u7d9a\u304d\u8a00\u8a9e\u3063\u307d\u304f\u304b\u3051\u308b\u3068\u3053\u308d\u3082\u3042\u308b\u306e\u3067\u3001\u30de\u30eb\u30c1\u30d7\u30ec\u30af\u30b5\u306a\u3093\u304b\u306f\u3059\u3054\u304f\u697d\u306b\u304b\u3051\u308b\u3002\n\n\u305d\u3082\u305d\u3082\u81ea\u5206\u306f\u7d44\u307f\u8fbc\u307f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u77e5\u8b58\u304c\u3042\u3063\u305f\u306e\u30d4\u30f3\u304c\u3069\u3046\u3053\u3046\u306e\u8a71\u306f\u6163\u308c\u305f\u3089\u3068\u304f\u82e6\u52b4\u306f\u3057\u306a\u304b\u3063\u305f\u3002\uff08\u8a2d\u5b9a\u306a\u3069\u9762\u5012\u304f\u3055\u3044\u304c\u30fb\u30fb\u30fb\uff09\n\n\u3042\u3068\u3001\u30c6\u30b9\u30c8\u30d9\u30f3\u30c1\u306e\u66f8\u304d\u65b9\u304c\u3088\u304f\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u304c\u3042\u308b\u7a0b\u5ea6\u308f\u304b\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u304b\u3089\u306f\u30e2\u30b8\u30e5\u30fc\u30eb\u6bce\u306b\u66f8\u304f\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\u4eca\u56de\u3055\u304f\u305b\u3044\u3057\u305fCPU\u3082\u30e2\u30b8\u30e5\u30fc\u30eb\u6bce\u306b\u30c6\u30b9\u30c8\u30d9\u30f3\u30c1\u3092\u66f8\u3044\u3066\u3042\u308b\u3002\n\n\u6700\u521d\u306ficarus verilog\u3068GTKWave\u4e0a\u3067\u30c6\u30b9\u30c8\u30d9\u30f3\u30c1\u3067\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u4e0a\u3067\u52d5\u304b\u3057\u3066\u3001\u52d5\u3044\u305f\u306e\u3092\u78ba\u8a8d\u3057\u3066\u304b\u3089\u5b9f\u6a5f\u4e0a\uff08DE0)\u3067\u3082\u52d5\u304b\u3057\u3066\u307f\u305f\u3002\nDE0\u306f50MHZ\u3060\u3063\u305f\u306e\u3067\u52d5\u304d\u3092\u8ffd\u3046\u306b\u306f\u5206\u5468\u3059\u308b\u5fc5\u8981\u304c\u3042\u3063\u305f\u3051\u3069\u5206\u5468\u3057\u305f\u3089\u3061\u3083\u3093\u3068\u52d5\u3044\u305f\u3002\n\n\u7d44\u3093\u3067\u307f\u3066\u4e00\u756a\u82e6\u52b4\u3057\u305f\u306e\u304c\u30c7\u30b3\u30fc\u30c0\u30fc\u3067\u3001\u5168\u547d\u4ee4\u306b\u5bfe\u3057\u3066\u66f8\u304f\u306e\u3067\u9762\u5012\u304f\u3055\u304b\u3063\u305f\u3002\u30c6\u30b9\u30c8\u30d9\u30f3\u30c1\u3082\u3075\u304f\u3081\u3066\u3002\n\nTD4\u306f\u304b\u306a\u308a\u547d\u4ee4\u306e\u5c11\u306a\u3044CPU\u3067\u304b\u3064verilog\u306a\u306e\u3067\u3001\u307e\u3068\u3082\u306a\u898f\u6a21\u3067\u914d\u7dda\u3068\u304b\u3060\u3068\u76f8\u5f53\u9762\u5012\u304f\u3055\u3044\u3053\u3068\u304c\u76ee\u306b\u6d6e\u304b\u3076\u3002\n\u3042\u3068\u6700\u521d\u306f\u30ea\u30bb\u30c3\u30c8\u3092\u4ed8\u3051\u3066\u306a\u304b\u3063\u305f\u306e\u3067\u521d\u671f\u5316\u3055\u308c\u305aCPU\u304c\u3046\u3054\u304b\u306a\u304b\u3063\u305f\u3002\n\nverilog\u306f\u7d50\u69cb\u308f\u304b\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3093\u3060\u3051\u3069\u3001\u305d\u308c\u3067\u3082always\u3084function\u306e\u4f7f\u3044\u308f\u3051\u304c\u3088\u304f\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u308a\u306f\u307e\u3060\u3057\u3066\u3044\u308b\u306e\u3067\u3082\u3063\u3068\u52c9\u5f37\u3057\u305f\u3044\u3002\n\n\u3042\u3068\u306f\u3082\u3046\u3061\u3087\u3063\u3068\u307e\u3068\u3082\u306aCPU\u3064\u304f\u3063\u305f\u308a\u3001NES\u3092FPGA\u3067\u3064\u304f\u3063\u3066\u307f\u305f\u3044\u306a\u3068\u601d\u3063\u305f\u3002\n\n\u30ea\u30dd\u30b8\u30c8\u30ea\u306f\u3053\u3053\u3067\u3059\u3002\nhttps://github.com/oskimura/TD4\n\n\n## \u89e3\u8aac\n\n### ALU\nTD4\u306eALU\u306f\u8db3\u3057\u7b97\u3057\u304b\u306a\u3044\u3002\u30b7\u30f3\u30d7\u30eb\u306aALU\u3002\n\n````\nmodule alu(ain, bin, c, out);\n    input wire [3:0] ain,bin;\n    output c;\n    output wire [3:0] out;\n\n    assign {c,out} = ain + bin;\nendmodule\n````\n\n### \u30ab\u30a6\u30f3\u30bf\u30fc\n\nPC(\u30d7\u30ed\u30b0\u30e9\u30e0\u30ab\u30a6\u30f3\u30bf\u30fc)\u3001\u30af\u30ed\u30c3\u30af\u30ab\u30a6\u30f3\u30bf\u30fc\u306b\u30b8\u30e3\u30f3\u30d7\u547d\u4ee4\u3088\u3046\u306b\u30ed\u30fc\u30c9\u3092\u8ffd\u52a0\n\n````\nmodule counter(reset, in,ld,clk,out);\n    input reset;\n    input [3:0] in;\n    input ld;\n    input clk;\n    output [3:0] out;\n\n    reg [3:0] cnt=4'b0000;\n    always @(posedge clk or negedge reset) begin\n        if (!reset) begin \n            cnt<= #1 4'b0000;\n        end\n        else if(ld==0) begin\n            cnt<= #1 in;\n        end \n        else begin\n            cnt <= #1 cnt+1;\n        end\n    end\n    assign out = cnt;\n\nendmodule\n````\n\n#### \u30ec\u30b8\u30b9\u30bf\n\n\u30ea\u30bb\u30c3\u30c8\u3084\u5165\u529b\u304c\u306a\u3044\u9650\u308a\u540c\u3058\u5024\u3092\u51fa\u529b\u3057\u7d9a\u3051\u308b \n\n````\nmodule register(reset,in,ld,clk,out);\n  input reset;\n  input [3:0] in;\n  input ld;\n  input clk;\n  output [3:0] out;\n\n  reg [3:0] mem=4'b000;\n  always @(posedge clk or negedge reset) begin\n    if(!reset) begin\n       mem =  #1 4'b0000;\n    end else if(!ld)begin\n      mem =  #1 in;\n    end\n  end \n  assign out = mem;\n\nendmodule\n````\n\n#### \u30ed\u30e0\n\u672c\u306b\u306e\u3063\u3066\u3044\u308b\u30e9\u30fc\u30e1\u30f3\u30bf\u30a4\u30de\u30fc\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u5b9f\u88c5\u3055\u308c\u305fROM\u3002\n1Hz\u306716\u79d2\u30ab\u30a6\u30f3\u30bf\u30925\u56de\u7e70\u308a\u8fd4\u3059\n\n`````\nmodule rom(addr,out);\n    input [3:0] addr;\n    output reg [7:0] out;\n   \n    always @(addr) begin\n        case (addr) \n            4'b0000: out=8'b10110111; // out 5\n\n//1           \n            4'b0001: out=8'b00000001; // add a 1\n            //2\n            4'b0010: out=8'b11100001; // jnc 1\n\n//3\n            4'b0011: out=8'b00000001; // add a 1\n            //4\n            4'b0100: out=8'b11100011; // jnc 3\n\n//5\n            4'b0101: out=8'b10110110; // out 6\n            //6\n            4'b0110: out=8'b00000001; // add a 1\n            //7\n            4'b0111: out=8'b11100110; // jnc 6\n\n//8\n            4'b1000: out=8'b00000001; // add a 1\n            //9\n            4'b1001: out=8'b11101000; // jnc 8\n\n            //10\n            4'b1010: out=8'b10110000; // out 0\n            //11\n            4'b1011: out=8'b10110100; // out 4\n            //12\n            4'b1100: out=8'b00000001; // add a 1\n            //13\n            4'b1101: out=8'b11101010; // jnc 10\n\n//14\n            4'b1110: out=8'b10111000; // out 8\n            //15\n            4'b1111: out=8'b11111111; // jmp 15\n        endcase\n    end\n \nendmodule\n````\n\n### \u30c7\u30b3\u30fc\u30c0\u30fc\n\u30a2\u30bb\u30f3\u30d6\u30e9\u306e\u547d\u4ee4\u3092\u3072\u305f\u3059\u3089\u56de\u8def\u51fa\u529b\u306b\u5909\u63db\u3057\u3066\u3044\u304f\n\n`````verilog\nmodule decorder(op,c,sel,ld);\n    input [3:0] op;\n    input c;\n    output [1:0] sel;\n    output [3:0] ld;\n\n    reg [3:0] load;\n    reg [1:0] select;\n\n    always @(op or c) begin      \n        case (op) \n            // ADD,A,Im\n            4'b0000 : load<=4'b1110; \n            // MOV A,B\n            4'b0001: load=4'b1110; \n            // IN A\n            4'b0010: load=4'b1110;\n            // MOV A,Im\n            4'b0011: load=4'b1110;\n            \n            // MOV B,A\n            4'b0100: load=4'b1101; \n            // MOV B,Im\n            4'b0101: load=4'b1101; \n            // IN B\n            4'b0110: load=4'b1101; \n            // MOV B,Im\n            4'b0111: load=4'b1101; \n\n            // OUT B\n            4'b1001: load=4'b1011; \n            // OUT Im\n            4'b1011: load=4'b1011; \n\n            // JMC\n            4'b1110:  if(c==0) begin \n                        // JMC(C=0) \n                            load=4'b0111; \n                        end \n                        else begin\n                        // JMC(C=1) \n                            load=4'b1111; \n                        end\n            // JMP\n            4'b1111: load=4'b0111;\n        endcase\n    end\n\n    always @(op) begin      \n        case (op) \n            // ADD,A,Im\n            4'b0000 : select<=2'b00;\n            // MOV A,B\n            4'b0001: select=2'b01;\n            // IN A\n            4'b0010:  select=2'b10;\n            // MOV A,Im\n            4'b0011: select=2'b11;\n            \n            // MOV B,A\n            4'b0100:  select=2'b00;\n            // MOV B,Im\n            4'b0101:  select=2'b01;\n            // IN B\n            4'b0110:  select=2'b10;\n            // MOV B,Im\n            4'b0111: select=2'b11;\n\n            // OUT B\n            4'b1001: select=2'b10;\n            // OUT Im\n            4'b1011: select=2'b11;\n\n            // JMC\n            4'b1110:  if(c==0) begin \n                            // JMC(C=0) \n                            select=2'b11;\n                        end \n                        else begin\n                            // JMC(C=1) \n                            select=2'bxx;\n                        end\n            // JMP\n            4'b1111: select=2'b11;\n    endcase end\n    \n    assign ld=load;\n    assign sel=select;\nendmodule\n````\n\n#### TD4\n\u3053\u308c\u307e\u3067\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u7e4b\u3044\u3060\u3082\u306e\u3002\u30ad\u30e3\u30ea\u30fc\u30ec\u30b8\u30b9\u30bf\u306f\u5fd8\u308c\u3066\u3044\u305f\u306e\u3067\u5f8c\u304b\u3089\u8ffd\u52a0\u3002\n\n````\nmodule td4(reset,clk,inp,outp);\n    input reset;\n    input clk;\n    input [3:0] inp;\n    output [3:0] outp;\n\n    wire [3:0] ch0,ch1,ch2,ch3;\n    wire [3:0] addr;\n\n    wire [3:0] a;\n\n    wire [7:0] memdata;\n\n    wire [3:0] alu_out;\n    wire [3:0] ld;\n\n    reg cflag;\n    wire cflga_r;\n\n    wire [1:0] sel;\n\n    assign outp = ch2;\n    wire [3:0] op,im;\n\n    mem mem_u(.addr(addr),.out(memdata));\n    assign ch3=4'b0000;\n\n    register areg(.reset(reset),.in(alu_out),.ld(ld[0]),.clk(clk),.out(ch0));\n    register breg(.reset(reset),.in(alu_out),.ld(ld[1]),.clk(clk),.out(ch1));\n    register creg(.reset(reset),.in(alu_out),.ld(ld[2]),.clk(clk),.out(outp));\n    counter pc(.reset(reset),.in(alu_out),.ld(ld[3]),.clk(clk),.out(addr));\n\n    assign op = memdata[7:4];\n    assign im = memdata[3:0];\n    dataselector dataselector_u(.sel(sel),.c0(ch0),.c1(ch1),.c2(inp),.c3(ch3),.y(a));\n   \n    alu alu_u(.ain(a), .bin(im), .c(cflag_r), .out(alu_out));\n\n    always @(posedge clk  or reset) begin\n        if (!reset) begin\n            cflag = 1'b0;\n        end\n        else begin   \n            cflag = cflag_r;\n        end\n    end\n\n    decorder decorder_u(.op(op),.c(cflag),.sel(sel),.ld(ld));\n\n\nendmodule\n````\n", "tags": ["FPGA"]}