{"tags": ["URI", "C#", "PCL"], "context": " More than 1 year has passed since last update.\n\n    using System;\n    using System.Linq;\n    using System.Collections.Generic;\n    using NUnit.Framework;\n\n    using MonoTouch.UIKit;\n\n    [TestFixture]\n    public class UnitMisc : UnitBase\n    {\n\n        public Dictionary<string, string> ParseQuery(string query)\n        {\n            return query\n                    .Split (\"?&\".ToCharArray ())\n                    .Where (i => string.IsNullOrEmpty (i) == false)\n                    .Select (i => i.Split ('='))\n                    .ToDictionary (\n                        i => Uri.UnescapeDataString (i [0]), \n                        i => Uri.UnescapeDataString (i [1]));\n        }\n\n\n\n        [Test]\n        public void TestUri()\n        {\n\n            var authreq = _ (@\"\n            openid://?\n            response_type=id_token\n            &client_id=https%3A%2F%2Fclient.example.org%2Fcb\n            &scope=openid%20profile\n            &state=af0ifjsldkj\n            &nonce=n-0S6_WzA2Mj\n            &registration=%7B%22logo_uri%22%3A%22https%3A%2F%2F\n            client.example.org%2Flogo.png%22%7D\n            \");\n\n            var uri = new Uri (authreq);\n\n            var query = ParseQuery (uri.Query);\n\n            Assert.AreEqual (query.Count, 6);\n            Assert.AreEqual (query [\"response_type\"], \"id_token\");\n            Assert.AreEqual (query [\"client_id\"], \"https://client.example.org/cb\");\n            Assert.AreEqual (query [\"state\"], \"af0ifjsldkj\");\n            Assert.AreEqual (query [\"scope\"], \"openid profile\");\n            Assert.AreEqual (query [\"nonce\"], \"n-0S6_WzA2Mj\");\n            Assert.AreEqual (query [\"registration\"],\n                @\"{\"\"logo_uri\"\":\"\"https://client.example.org/logo.png\"\"}\");\n\n        }\n    }\n\n\n```csharp\n\n\n    using System;\n    using System.Linq;\n    using System.Collections.Generic;\n    using NUnit.Framework;\n\n    using MonoTouch.UIKit;\n\n\t[TestFixture]\n\tpublic class UnitMisc : UnitBase\n\t{\n  \n\t\tpublic Dictionary<string, string> ParseQuery(string query)\n\t\t{\n\t\t\treturn query\n\t\t\t\t\t.Split (\"?&\".ToCharArray ())\n\t\t\t\t\t.Where (i => string.IsNullOrEmpty (i) == false)\n\t\t\t\t\t.Select (i => i.Split ('='))\n\t\t\t\t\t.ToDictionary (\n\t\t\t\t\t\ti => Uri.UnescapeDataString (i [0]), \n\t\t\t\t\t\ti => Uri.UnescapeDataString (i [1]));\n\t\t}\n\n\n\t\t\n\t\t[Test]\n\t\tpublic void TestUri()\n\t\t{\n\n\t\t\tvar authreq = _ (@\"\n\t\t\topenid://?\n  \t\t\tresponse_type=id_token\n  \t\t\t&client_id=https%3A%2F%2Fclient.example.org%2Fcb\n  \t\t\t&scope=openid%20profile\n  \t\t\t&state=af0ifjsldkj\n  \t\t\t&nonce=n-0S6_WzA2Mj\n  \t\t\t&registration=%7B%22logo_uri%22%3A%22https%3A%2F%2F\n    \t\tclient.example.org%2Flogo.png%22%7D\n\t\t\t\");\n\n\t\t\tvar uri = new Uri (authreq);\n\n\t\t\tvar query = ParseQuery (uri.Query);\n\n\t\t\tAssert.AreEqual (query.Count, 6);\n\t\t\tAssert.AreEqual (query [\"response_type\"], \"id_token\");\n\t\t\tAssert.AreEqual (query [\"client_id\"], \"https://client.example.org/cb\");\n\t\t\tAssert.AreEqual (query [\"state\"], \"af0ifjsldkj\");\n\t\t\tAssert.AreEqual (query [\"scope\"], \"openid profile\");\n\t\t\tAssert.AreEqual (query [\"nonce\"], \"n-0S6_WzA2Mj\");\n\t\t\tAssert.AreEqual (query [\"registration\"],\n\t\t\t\t@\"{\"\"logo_uri\"\":\"\"https://client.example.org/logo.png\"\"}\");\n\n\t\t}\n\t}\n```\t\t\n"}