{"context": " More than 1 year has passed since last update.\u3053\u3093\u3070\u3093\u306f\u3002\u3053\u308c\u306f\u3001D\u8a00\u8a9e Advent Calendar 2012\u306e20\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002D\u8a00\u8a9e\u3067OAuth\u306aAPI\u547c\u3073\u51fa\u3057\u3092\u3057\u305f\u3044\u3001\u3068\u3044\u3046\u4eba\u304c\u4e16\u306e\u4e2d\u306b\u306f\u5c45\u308b\u305d\u3046\u3067\u3059\u3002\u3068\u3044\u3046\u8a71\u3092\u3057\u307e\u3059\u3002\n\nOAuth\u8a8d\u8a3c\nOAuth\u8a8d\u8a3c\u3068\u306f\u3001\u5e73\u548c\u3068\u6148\u611b\u306b\u6e80\u3061\u305f\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u69d8\u306e\u4e0e\u3048\u3066\u4e0b\u3055\u308b\u5e87\u8b77\u3068\u6069\u6075\u3067\u3042\u308a\u3001\u305d\u308c\u3092\u5e78\u798f\u3068\u611f\u3058\u308b\u3053\u3068\u306f\u5584\u826f\u306a\u5e02\u6c11\u305f\u308b\u3042\u306a\u305f\u306e\u7fa9\u52d9\u3067\u3059\u3002\n\u4eca\u3069\u304d\u306eWeb API\u306a\u3093\u304b\u304c\u3053\u305e\u3063\u3066\u63a1\u7528\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u6b8b\u5ff5\u306a\u3053\u3068\u306bD\u8a00\u8a9e\u306b\u306fOAuth\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u7121\u3044\u3089\u3057\u3044\u3067\u3059\u3002\u4ed5\u65b9\u306a\u3044\u306d\u3002\n\n\u30c8\u30fc\u30af\u30f3\n\u3068\u308a\u3042\u3048\u305a\u3001key\u3068secret\u306e\u30da\u30a2\u3092\u30c8\u30fc\u30af\u30f3\u3068\u547c\u3076\u3053\u3068\u306b\u3057\u307e\u3059\u3002\u306a\u3069\u3068\u610f\u5473\u4e0d\u660e\u306a\u4f9b\u8ff0\u3092\u3057\u3066\u304a\u308a\u3001\u6b63\u78ba\u306a\u610f\u5473\u306f\u308f\u304b\u308a\u307e\u305b\u3093\u3002\n\n\n\nname\ndescription\n\n\n\n\n\nconsumer token (consumer key, consumer secret)\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306e\u30c8\u30fc\u30af\u30f3\n\n\n\nrequest token (request key, request secret)\n\naccess token \u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u3001\u4f7f\u3044\u6368\u3066\n\n\n\naccess token (access key, access secret)\n\u30e6\u30fc\u30b6\u56fa\u6709\u306e\u30c8\u30fc\u30af\u30f3\u3001\u30e6\u30fc\u30b6ID\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u4ee3\u308f\u308a\n\n\n\n\u6700\u7d42\u7684\u306b\u5fc5\u8981\u306a\u306e\u306f\u3001consumer token \u3068 access token \u306e2\u3064\u3067\u3059\u3002\n\n\u624b\u9806\n\u3084\u3084\u3053\u3057\u3044\u3067\u3059\u3002\u6b7b\u306b\u307e\u3059\u3002\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u767b\u9332\u3092\u3057\u3066 consumer token \u3092\u3082\u3089\u3046\n\nconsumer token \u3092\u4f7f\u3063\u3066 request token \u3092\u3082\u3089\u3046\n\u8a8d\u8a3c\u7528URI\u306b request key \u3092\u4ed8\u52a0\u3057\u305fURI\u3092\u958b\u304d\u3001PIN\u756a\u53f7\u3092\u3082\u3089\u3046\n\nconsumer token \u3068 request token \u3068PIN\u756a\u53f7\u3092\u4f7f\u3044\u3001access token \u3092\u3082\u3089\u3046\n\nconsumer token \u3068 access token \u3092\u4f7f\u3063\u3066API\u3068\u30ad\u30e3\u30c3\u30ad\u30e3\u30a6\u30d5\u30d5\u3059\u308b\n\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\n\u3084\u3084\u3053\u3057\u3044\u3067\u3059\u3002\u6b7b\u306b\u307e\u3059\u3002\n\n\n\nkey\nvalue\n\n\n\n\noauth_consumer_key\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u767b\u9332\u3092\u3057\u305f\u3068\u304d\u306b\u8cb0\u3048\u308bconsumer key\n\n\n\noautn_nonce\n\u9069\u5f53\u306a\u6587\u5b57\u5217\u3001\u4f8b\u3067\u306f\u9762\u5012\u306a\u306e\u3067Unix\u6642\u9593\u306b\u3057\u3066\u308b\n\n\noauth_signature\n\u7f72\u540d\u3001\u8a73\u3057\u304f\u306f\u5f8c\u8ff0\n\n\noauth_signature_method\n\u4f7f\u7528\u3059\u308b\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u306e\u540d\u524d\u3001HMAC-SHA1\n\n\n\noauth_timestamp\n\u73fe\u5728\u306eUnix\u6642\u9593\u3001\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306e\u5224\u5b9a\u3068\u304b\u306b\u4f7f\u308f\u308c\u308b\n\n\n\noauth_token *1\n\nrequest token \u3068\u304b access token \u3068\u304b\n\n\n\noauth_verifier *2\n\u540d\u72b6\u3057\u304c\u305f\u304d\u5024\u3001PIN\u756a\u53f7\n\n\noauth_version\n\u30d0\u30fc\u30b8\u30e7\u30f3\u3001\u73fe\u5728 1.0 \u3068 2.0 \u304c\u3042\u308b\n\n\n\n\u3053\u308c\u306b\u52a0\u3048\u3066\u3001API\u3054\u3068\u306b\u8981\u6c42\u3055\u308c\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u30c4\u30a4\u30fc\u30e8\u3059\u308b\u3068\u304d\u306f\u3001status\u3068\u3044\u3046\u30ad\u30fc\u306b\u545f\u304d\u305f\u3044\u6587\u5b57\u5217\u3092\u6e21\u3057\u307e\u3059\u3002\u5f8c\u306f\u3001\u5404\u30b5\u30fc\u30d3\u30b9\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3067\u3082\u98df\u3079\u3066\u304f\u3060\u3055\u3044\u3002\n\n*1 \u624b\u98064\u3067 request token \u3001\u305d\u308c\u4ee5\u964d\u306f access token \u304c\u5165\u308b\n*2 \u624b\u98064\u3067\u3057\u304b\u4f7f\u308f\u306a\u3044\n\n\n\u8a8d\u8a3c\u4ed8\u304d\u547c\u3073\u51fa\u3057\n\u8aac\u660e\u3059\u308b\u306e\u304c\u5104\u52ab\u306a\u306e\u3067\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u307e\u3059\u3002\u5bdf\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u4eca\u56de\u306f\u3001\u901a\u4fe1\u306bcurl\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u4ee5\u4e0b\u306e\u901a\u308a\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u69cb\u9020\u4f53\u306e\u5b9a\u7fa9\u3092\u3057\u3066\u3044\u308b\u3082\u306e\u3068\u3057\u307e\u3059\u3002\nimport std.algorithm, std.array, std.base64, std.conv, std.datetime, std.digest.sha, std.string, std.typecons, std.uri;\nimport std.net.curl, std.stdio;\n\nalias Tuple!(string, \"key\", string, \"secret\") Token;\n\n\n\u7f72\u540d\u306e\u751f\u6210\n\u30c8\u30fc\u30af\u30f3\u3068HTTP\u30e1\u30bd\u30c3\u30c9\u540d\u3068URI\u3068\u30d1\u30e9\u30e1\u30fc\u30bf\u304b\u3089\u751f\u6210\u3057\u307e\u3059\u3002\n// \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30ad\u30fc\u3067\u30bd\u30fc\u30c8\u3057\u3001\u30ad\u30fc\u3068\u5024\u3092\u305d\u308c\u305e\u308c=\u3068&\u3067\u7e4b\u3050\nauto query = param.keys.sort.map!(k => k ~ \"=\" ~ param[k]).join(\"&\");\n\n// consumer secret\u3068token secret\u3092\u305d\u308c\u305e\u308cURL\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3001&\u3067\u7e4b\u3050\nauto key = [consumer.secret, token.secret].map!encodeComponent.join(\"&\");\n\n// \u30e1\u30bd\u30c3\u30c9\u540d\u3068URI\u3068\u4e0a\u8a18\u306equery\u3092\u305d\u308c\u305e\u308cURL\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3001&\u3067\u7e4b\u3050\nauto base = [method, uri, query].map!encodeComponent.join(\"&\");\n\n// HMAC-SHA1\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u306bkey\u3068base\u3092\u6e21\u3057\u3066\u30c0\u30a4\u30b8\u30a7\u30b9\u30c8\u5024\u3092\u6c42\u3081\u3001Base64\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3001URL\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\nauto signature = encodeComponent(cast(immutable)Base64.encode(hmac_sha1(key, base)));\n\nhmac_sha1\u95a2\u6570\u306f\u3001std.digest.sha.sha1Of\u95a2\u6570\u3092\u5229\u7528\u3057\u3066\u81ea\u5206\u3067\u4f5c\u6210\u3057\u305f\u3082\u306e\u3067\u3059\u3002\u5b9f\u88c5\u306f\u5f8c\u3067\u51fa\u3057\u307e\u3059\u3002\n\nOAuth\u306a\u547c\u3073\u51fa\u3057\n\u7f72\u540d\u306a\u3069\u3092HTTP\u30d8\u30c3\u30c0\u306eAuthorization\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u4e57\u305b\u3066\u3001HTTP\u30e1\u30bd\u30c3\u30c9\u3092\u7e70\u308a\u51fa\u3057\u307e\u3059\u3002\n// \u9069\u5f53\u306bAPI\u306e\u547c\u3073\u51fa\u3057\u306b\u4f7f\u3046\u30d1\u30e9\u30e1\u30fc\u30bf\nauto param = [\"mami\": \"candeloro\", \"saya\": \"oktavia\", \"mado\": \"kriemhild gretchen\"];\n\n// OAuth\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3064\u3063\u3053\u3080\nauto parameter = [\"oauth_consumer_key\": consumer.key,\n    \"oauth_nonce\": Clock.currTime.toUnixTime.to!string,\n    \"oauth_signature_method\": \"HMAC-SHA1\",\n    \"oauth_timestamp\": Clock.currTime.toUnixTime.to!string,\n    \"oauth_version\": \"1.0\"];\n\n// \u30d1\u30e9\u30e1\u30fc\u30bf\u540c\u58eb\u3092\u5408\u308f\u305b\u308b\n// \u3064\u3044\u3067\u306b\u65e5\u672c\u8a9e\u6765\u308b\u3068\u56f0\u308b\u306e\u3067URL\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3068\u304f\nforeach (k, v; param)\n    parameter[k] = v.encodeComponent;\n\n// token key\u304c\u5b58\u5728\u3057\u3066\u3044\u308b\u306a\u3089\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u542b\u3081\u308b\nif (!(token.key is null))\n    parameter[\"oauth_token\"] = token.key;\n\n// \u7f72\u540d\u3092\u751f\u6210\u3057\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u542b\u3081\u308b\nauto signature = \u2026\u2026;\nparameter[\"oauth_signature\"] = signature;\n\n// OAuth\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u629c\u304d\u51fa\u3057\u3001\u305d\u308c\u305e\u308c=\u3068,\u3067\u7e4b\u3050\nauto authorize_keys = parameter.keys.filter!q{a.countUntil(\"oauth_\")==0};\nauto authorize = \"OAuth \" ~ authorize_keys.map!(x => x ~ \"=\" ~ parameter[x]).join(\",\");\n\n// \u305d\u308c\u4ee5\u5916\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001\u305d\u308c\u305e\u308c=\u3068&\u3067\u7e4b\u3050\nauto option_keys = parameter.keys.filter!q{a.countUntil(\"oauth_\")!=0};\nauto option = option_keys.map!(x => x ~ \"=\" ~ parameter[x]).join(\"&\");\n\nauto http = HTTP();\n// Authorization\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6e21\u3059\nhttp.addRequestHeader(\"Authorization\", authorize);\n// URI\u306e\u5f8c\u308d\u306b\u6b8b\u308a\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4ed8\u4e0e\u3057\u3066GET\nauto result = cast(immutable)get((0 < option.length)? uri ~ \"?\" ~ option: uri, http);\n\n\n\u5b9f\u88c5\u4f8b\n\u30c4\u30a4\u30fc\u30e8\u3059\u308b\u30b3\u30fc\u30c9\u3002\n// dmd 2.062import std.algorithm, std.array, std.base64, std.conv, std.datetime, std.digest.sha, std.string, std.typecons, std.uri;import std.net.curl, std.stdio;alias Tuple!(string, \"key\", string, \"secret\") Token;private string signature(in Token consumer, in Token token, in string method, in string uri,\n        in string[string] param) {  auto query = param.keys.sort.map!(k => k ~ \"=\" ~ param[k]).join(\"&\");   auto key = [consumer.secret, token.secret].map!encodeComponent.join(\"&\");   auto base = [method, uri, query].map!encodeComponent.join(\"&\"); return encodeComponent(cast(immutable)Base64.encode(hmac_sha1(key, base)));}private string signedCall(in Token consumer, in Token token, in string method, in string uri,\n        in string[string] param, string delegate(HTTP, in string, in string) call) {    auto parameter = [\"oauth_consumer_key\": consumer.key,       \"oauth_nonce\": Clock.currTime.toUnixTime.to!string,     \"oauth_signature_method\": \"HMAC-SHA1\",      \"oauth_timestamp\": Clock.currTime.toUnixTime.to!string,     \"oauth_version\": \"1.0\"];    foreach (k, v; param)       parameter[k] = v.encodeComponent;   if (!(token.key is null))       parameter[\"oauth_token\"] = token.key;   auto signature = signature(consumer, token, method, uri, parameter);    parameter[\"oauth_signature\"] = signature;   auto authorize_keys = parameter.keys.filter!q{a.countUntil(\"oauth_\")==0};   auto authorize = \"OAuth \" ~ authorize_keys.map!(x => x ~ \"=\" ~ parameter[x]).join(\",\"); auto option_keys = parameter.keys.filter!q{a.countUntil(\"oauth_\")!=0};  auto option = option_keys.map!(x => x ~ \"=\" ~ parameter[x]).join(\"&\");  auto http = HTTP(); http.addRequestHeader(\"Authorization\", authorize);  return call(http, uri, option);}string signedGet(in Token consumer, in Token token, in string uri, in string[string] param = null) {    return signedCall(consumer, token, \"GET\", uri, param, (http, uri, option) {     return cast(immutable)get((0 < option.length)? uri ~ \"?\" ~ option: uri, http);  });}string signedPost(in Token consumer, in Token token, in string uri, in string[string] param = null) {   return signedCall(consumer, token, \"POST\", uri, param, (http, uri, option) {        return cast(immutable)post(uri, option, http);  });}private ubyte[] hmac_sha1(in string key, in string message) {   auto padding(in ubyte[] k) {        auto h = (64 < k.length)? sha1Of(k): k;     return h ~ new ubyte[64 - h.length];    }   const k = padding(cast(ubyte[])key);    return sha1Of((k.map!q{cast(ubyte)(a^0x5c)}.array)          ~ sha1Of((k.map!q{cast(ubyte)(a^0x36)}.array) ~ cast(ubyte[])message)).dup;}private Token toToken(string s) {   string[string] result;  foreach (x; s.split(\"&\").map!q{a.split(\"=\")})       result[x[0]] = x[1];    return Token(result[\"oauth_token\"], result[\"oauth_token_secret\"]);}void main() {    immutable consumer      = Token(\"replace your consumer key\", \"replace your consumer secret\");       auto request_token = signedGet(consumer, Token(),        \"https://api.twitter.com/oauth/request_token\").toToken;    auto authorize_uri = \"https://api.twitter.com/oauth/authorize\" ~ \"?oauth_token=\" ~ request_token.key;   authorize_uri.writeln;  auto verifier = readln.chomp;   auto access_token = signedGet(consumer, request_token,        \"https://api.twitter.com/oauth/access_token\", [\"oauth_verifier\": verifier]).toToken;    signedPost(consumer, access_token,\n        \"https://api.twitter.com/1.1/statuses/update.json\", [\"status\": \"\u5e02\u6c11\u3001\u8a8d\u8a3c\u306f\u7fa9\u52d9\u3067\u3059\"]);\n}```\n\n##\u7d42\u308f\u308a\u306b\n\n\u6726\u6727\u3068\u3057\u305f\u610f\u8b58\u306e\u4e2d\u66f8\u3044\u305f\u6587\u7ae0\u3068\u30b3\u30fc\u30c9\u306a\u306e\u3067\u3068\u3053\u308d\u3069\u3053\u308d\u982d\u304c\u6eb6\u3051\u3066\u3044\u308b\u611f\u3058\u3082\u3057\u307e\u3059\u304c\u3001\n\u3069\u3046\u3057\u3066\u3053\u3093\u306a\u3053\u3068\u306b\u306a\u3063\u305f\u306e\u304b\u3001\u79c1\u306b\u306f\u308f\u304b\u308a\u307e\u305b\u3093\u3002\n\u3053\u308c\u3092\u3042\u306a\u305f\u304c\u8aad\u3093\u3060\u306a\u3089\u3001\u305d\u306e\u6642\u3001\u79c1\u306f\u5bdd\u3066\u3044\u308b\u3067\u3057\u3087\u3046\u3002\n\u8a18\u4e8b\u304c\u3042\u308b\u304b\u3001\u306a\u3044\u304b\u306e\u9055\u3044\u306f\u3042\u308b\u3067\u3057\u3087\u3046\u304c\u3002\n\u3053\u308c\u3092\u8aad\u3093\u3060\u3042\u306a\u305f\u3002\u3069\u3046\u304b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u66f8\u3044\u3066\u304f\u3060\u3055\u3044\u3002\u305d\u308c\u3060\u3051\u304c\u3001\u79c1\u306e\u671b\u307f\u3067\u3059\u3002\n\n\u6b21\u306e21\u65e5\u76ee\u306f\u3001[@Fuhduki](http://qiita.com/users/Fuhduki)\u3055\u3093\u3067\u3059\u3002\u86d9\u3002\n\n\u3053\u3093\u3070\u3093\u306f\u3002\u3053\u308c\u306f\u3001[D\u8a00\u8a9e Advent Calendar 2012](http://qiita.com/advent-calendar/2012/d)\u306e20\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002D\u8a00\u8a9e\u3067OAuth\u306aAPI\u547c\u3073\u51fa\u3057\u3092\u3057\u305f\u3044\u3001\u3068\u3044\u3046\u4eba\u304c\u4e16\u306e\u4e2d\u306b\u306f\u5c45\u308b\u305d\u3046\u3067\u3059\u3002\u3068\u3044\u3046\u8a71\u3092\u3057\u307e\u3059\u3002\n\n##OAuth\u8a8d\u8a3c\n\nOAuth\u8a8d\u8a3c\u3068\u306f\u3001\u5e73\u548c\u3068\u6148\u611b\u306b\u6e80\u3061\u305f\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u69d8\u306e\u4e0e\u3048\u3066\u4e0b\u3055\u308b\u5e87\u8b77\u3068\u6069\u6075\u3067\u3042\u308a\u3001\u305d\u308c\u3092\u5e78\u798f\u3068\u611f\u3058\u308b\u3053\u3068\u306f\u5584\u826f\u306a\u5e02\u6c11\u305f\u308b\u3042\u306a\u305f\u306e\u7fa9\u52d9\u3067\u3059\u3002\n\u4eca\u3069\u304d\u306eWeb API\u306a\u3093\u304b\u304c\u3053\u305e\u3063\u3066\u63a1\u7528\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u6b8b\u5ff5\u306a\u3053\u3068\u306bD\u8a00\u8a9e\u306b\u306fOAuth\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u7121\u3044\u3089\u3057\u3044\u3067\u3059\u3002\u4ed5\u65b9\u306a\u3044\u306d\u3002\n\n####\u30c8\u30fc\u30af\u30f3\n\n\u3068\u308a\u3042\u3048\u305a\u3001key\u3068secret\u306e\u30da\u30a2\u3092\u30c8\u30fc\u30af\u30f3\u3068\u547c\u3076\u3053\u3068\u306b\u3057\u307e\u3059\u3002\u306a\u3069\u3068\u610f\u5473\u4e0d\u660e\u306a\u4f9b\u8ff0\u3092\u3057\u3066\u304a\u308a\u3001\u6b63\u78ba\u306a\u610f\u5473\u306f\u308f\u304b\u308a\u307e\u305b\u3093\u3002\n\n|name|description|\n|:---|:---|\n|**consumer token** (consumer key, consumer secret)|\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u56fa\u6709\u306e\u30c8\u30fc\u30af\u30f3|\n|**request token** (request key, request secret)|*access token* \u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u3001\u4f7f\u3044\u6368\u3066|\n|**access token** (access key, access secret)|\u30e6\u30fc\u30b6\u56fa\u6709\u306e\u30c8\u30fc\u30af\u30f3\u3001\u30e6\u30fc\u30b6ID\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u4ee3\u308f\u308a|\n\n\u6700\u7d42\u7684\u306b\u5fc5\u8981\u306a\u306e\u306f\u3001*consumer token* \u3068 *access token* \u306e2\u3064\u3067\u3059\u3002\n\n####\u624b\u9806\n\n\u3084\u3084\u3053\u3057\u3044\u3067\u3059\u3002\u6b7b\u306b\u307e\u3059\u3002\n\n1. \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u767b\u9332\u3092\u3057\u3066 *consumer token* \u3092\u3082\u3089\u3046\n2. *consumer token* \u3092\u4f7f\u3063\u3066 *request token* \u3092\u3082\u3089\u3046\n3. \u8a8d\u8a3c\u7528URI\u306b *request key* \u3092\u4ed8\u52a0\u3057\u305fURI\u3092\u958b\u304d\u3001PIN\u756a\u53f7\u3092\u3082\u3089\u3046\n4. *consumer token* \u3068 *request token* \u3068PIN\u756a\u53f7\u3092\u4f7f\u3044\u3001*access token* \u3092\u3082\u3089\u3046\n5. *consumer token* \u3068 *access token* \u3092\u4f7f\u3063\u3066API\u3068\u30ad\u30e3\u30c3\u30ad\u30e3\u30a6\u30d5\u30d5\u3059\u308b\n\n####\u30d1\u30e9\u30e1\u30fc\u30bf\n\n\u3084\u3084\u3053\u3057\u3044\u3067\u3059\u3002\u6b7b\u306b\u307e\u3059\u3002\n\n|key|value|\n|:---|:---|\n|**oauth_consumer_key**|\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u767b\u9332\u3092\u3057\u305f\u3068\u304d\u306b\u8cb0\u3048\u308b*consumer key* |\n|**oautn_nonce**|\u9069\u5f53\u306a\u6587\u5b57\u5217\u3001\u4f8b\u3067\u306f\u9762\u5012\u306a\u306e\u3067Unix\u6642\u9593\u306b\u3057\u3066\u308b|\n|**oauth_signature**|\u7f72\u540d\u3001\u8a73\u3057\u304f\u306f\u5f8c\u8ff0|\n|**oauth_signature_method**|\u4f7f\u7528\u3059\u308b\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u306e\u540d\u524d\u3001*HMAC-SHA1*|\n|**oauth_timestamp**|\u73fe\u5728\u306eUnix\u6642\u9593\u3001\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306e\u5224\u5b9a\u3068\u304b\u306b\u4f7f\u308f\u308c\u308b|\n|**oauth_token** *1|*request token* \u3068\u304b *access token* \u3068\u304b|\n|**oauth_verifier** *2|\u540d\u72b6\u3057\u304c\u305f\u304d\u5024\u3001PIN\u756a\u53f7|\n|**oauth_version**|\u30d0\u30fc\u30b8\u30e7\u30f3\u3001\u73fe\u5728 *1.0* \u3068 *2.0* \u304c\u3042\u308b|\n\n\u3053\u308c\u306b\u52a0\u3048\u3066\u3001API\u3054\u3068\u306b\u8981\u6c42\u3055\u308c\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u30c4\u30a4\u30fc\u30e8\u3059\u308b\u3068\u304d\u306f\u3001`status`\u3068\u3044\u3046\u30ad\u30fc\u306b\u545f\u304d\u305f\u3044\u6587\u5b57\u5217\u3092\u6e21\u3057\u307e\u3059\u3002\u5f8c\u306f\u3001\u5404\u30b5\u30fc\u30d3\u30b9\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3067\u3082\u98df\u3079\u3066\u304f\u3060\u3055\u3044\u3002\n\n>\\*1 \u624b\u98064\u3067 *request token* \u3001\u305d\u308c\u4ee5\u964d\u306f *access token* \u304c\u5165\u308b\n>\\*2 \u624b\u98064\u3067\u3057\u304b\u4f7f\u308f\u306a\u3044\n\n##\u8a8d\u8a3c\u4ed8\u304d\u547c\u3073\u51fa\u3057\n\n\u8aac\u660e\u3059\u308b\u306e\u304c\u5104\u52ab\u306a\u306e\u3067\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u307e\u3059\u3002\u5bdf\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u4eca\u56de\u306f\u3001\u901a\u4fe1\u306bcurl\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u4ee5\u4e0b\u306e\u901a\u308a\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u69cb\u9020\u4f53\u306e\u5b9a\u7fa9\u3092\u3057\u3066\u3044\u308b\u3082\u306e\u3068\u3057\u307e\u3059\u3002\n\n```d\nimport std.algorithm, std.array, std.base64, std.conv, std.datetime, std.digest.sha, std.string, std.typecons, std.uri;\nimport std.net.curl, std.stdio;\n \nalias Tuple!(string, \"key\", string, \"secret\") Token;\n```\n\n####\u7f72\u540d\u306e\u751f\u6210\n\n\u30c8\u30fc\u30af\u30f3\u3068HTTP\u30e1\u30bd\u30c3\u30c9\u540d\u3068URI\u3068\u30d1\u30e9\u30e1\u30fc\u30bf\u304b\u3089\u751f\u6210\u3057\u307e\u3059\u3002\n\n```d\n// \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30ad\u30fc\u3067\u30bd\u30fc\u30c8\u3057\u3001\u30ad\u30fc\u3068\u5024\u3092\u305d\u308c\u305e\u308c=\u3068&\u3067\u7e4b\u3050\nauto query = param.keys.sort.map!(k => k ~ \"=\" ~ param[k]).join(\"&\");\n\n// consumer secret\u3068token secret\u3092\u305d\u308c\u305e\u308cURL\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3001&\u3067\u7e4b\u3050\nauto key = [consumer.secret, token.secret].map!encodeComponent.join(\"&\");\n\n// \u30e1\u30bd\u30c3\u30c9\u540d\u3068URI\u3068\u4e0a\u8a18\u306equery\u3092\u305d\u308c\u305e\u308cURL\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3001&\u3067\u7e4b\u3050\nauto base = [method, uri, query].map!encodeComponent.join(\"&\");\n\n// HMAC-SHA1\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u306bkey\u3068base\u3092\u6e21\u3057\u3066\u30c0\u30a4\u30b8\u30a7\u30b9\u30c8\u5024\u3092\u6c42\u3081\u3001Base64\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3001URL\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\nauto signature = encodeComponent(cast(immutable)Base64.encode(hmac_sha1(key, base)));\n```\n\n`hmac_sha1`\u95a2\u6570\u306f\u3001`std.digest.sha.sha1Of`\u95a2\u6570\u3092\u5229\u7528\u3057\u3066\u81ea\u5206\u3067\u4f5c\u6210\u3057\u305f\u3082\u306e\u3067\u3059\u3002\u5b9f\u88c5\u306f\u5f8c\u3067\u51fa\u3057\u307e\u3059\u3002\n\n####OAuth\u306a\u547c\u3073\u51fa\u3057\n\n\u7f72\u540d\u306a\u3069\u3092HTTP\u30d8\u30c3\u30c0\u306eAuthorization\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u4e57\u305b\u3066\u3001HTTP\u30e1\u30bd\u30c3\u30c9\u3092\u7e70\u308a\u51fa\u3057\u307e\u3059\u3002\n\n```d\n// \u9069\u5f53\u306bAPI\u306e\u547c\u3073\u51fa\u3057\u306b\u4f7f\u3046\u30d1\u30e9\u30e1\u30fc\u30bf\nauto param = [\"mami\": \"candeloro\", \"saya\": \"oktavia\", \"mado\": \"kriemhild gretchen\"];\n\n// OAuth\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3064\u3063\u3053\u3080\nauto parameter = [\"oauth_consumer_key\": consumer.key,\n\t\"oauth_nonce\": Clock.currTime.toUnixTime.to!string,\n\t\"oauth_signature_method\": \"HMAC-SHA1\",\n\t\"oauth_timestamp\": Clock.currTime.toUnixTime.to!string,\n\t\"oauth_version\": \"1.0\"];\n\n// \u30d1\u30e9\u30e1\u30fc\u30bf\u540c\u58eb\u3092\u5408\u308f\u305b\u308b\n// \u3064\u3044\u3067\u306b\u65e5\u672c\u8a9e\u6765\u308b\u3068\u56f0\u308b\u306e\u3067URL\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3068\u304f\nforeach (k, v; param)\n\tparameter[k] = v.encodeComponent;\n\n// token key\u304c\u5b58\u5728\u3057\u3066\u3044\u308b\u306a\u3089\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u542b\u3081\u308b\nif (!(token.key is null))\n\tparameter[\"oauth_token\"] = token.key;\n\n// \u7f72\u540d\u3092\u751f\u6210\u3057\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u542b\u3081\u308b\nauto signature = \u2026\u2026;\nparameter[\"oauth_signature\"] = signature;\n\n// OAuth\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u629c\u304d\u51fa\u3057\u3001\u305d\u308c\u305e\u308c=\u3068,\u3067\u7e4b\u3050\nauto authorize_keys = parameter.keys.filter!q{a.countUntil(\"oauth_\")==0};\nauto authorize = \"OAuth \" ~ authorize_keys.map!(x => x ~ \"=\" ~ parameter[x]).join(\",\");\n\n// \u305d\u308c\u4ee5\u5916\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001\u305d\u308c\u305e\u308c=\u3068&\u3067\u7e4b\u3050\nauto option_keys = parameter.keys.filter!q{a.countUntil(\"oauth_\")!=0};\nauto option = option_keys.map!(x => x ~ \"=\" ~ parameter[x]).join(\"&\");\n\nauto http = HTTP();\n// Authorization\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6e21\u3059\nhttp.addRequestHeader(\"Authorization\", authorize);\n// URI\u306e\u5f8c\u308d\u306b\u6b8b\u308a\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4ed8\u4e0e\u3057\u3066GET\nauto result = cast(immutable)get((0 < option.length)? uri ~ \"?\" ~ option: uri, http);\n```\n\n##\u5b9f\u88c5\u4f8b\n\n\u30c4\u30a4\u30fc\u30e8\u3059\u308b\u30b3\u30fc\u30c9\u3002\n\n```d\n// dmd 2.062import std.algorithm, std.array, std.base64, std.conv, std.datetime, std.digest.sha, std.string, std.typecons, std.uri;import std.net.curl, std.stdio;alias Tuple!(string, \"key\", string, \"secret\") Token;private string signature(in Token consumer, in Token token, in string method, in string uri,\n\t\tin string[string] param) {\tauto query = param.keys.sort.map!(k => k ~ \"=\" ~ param[k]).join(\"&\");\tauto key = [consumer.secret, token.secret].map!encodeComponent.join(\"&\");\tauto base = [method, uri, query].map!encodeComponent.join(\"&\");\treturn encodeComponent(cast(immutable)Base64.encode(hmac_sha1(key, base)));}private string signedCall(in Token consumer, in Token token, in string method, in string uri,\n\t\tin string[string] param, string delegate(HTTP, in string, in string) call) {\tauto parameter = [\"oauth_consumer_key\": consumer.key,\t\t\"oauth_nonce\": Clock.currTime.toUnixTime.to!string,\t\t\"oauth_signature_method\": \"HMAC-SHA1\",\t\t\"oauth_timestamp\": Clock.currTime.toUnixTime.to!string,\t\t\"oauth_version\": \"1.0\"];\tforeach (k, v; param)\t\tparameter[k] = v.encodeComponent;\tif (!(token.key is null))\t\tparameter[\"oauth_token\"] = token.key;\tauto signature = signature(consumer, token, method, uri, parameter);\tparameter[\"oauth_signature\"] = signature;\tauto authorize_keys = parameter.keys.filter!q{a.countUntil(\"oauth_\")==0};\tauto authorize = \"OAuth \" ~ authorize_keys.map!(x => x ~ \"=\" ~ parameter[x]).join(\",\");\tauto option_keys = parameter.keys.filter!q{a.countUntil(\"oauth_\")!=0};\tauto option = option_keys.map!(x => x ~ \"=\" ~ parameter[x]).join(\"&\");\tauto http = HTTP();\thttp.addRequestHeader(\"Authorization\", authorize);\treturn call(http, uri, option);}string signedGet(in Token consumer, in Token token, in string uri, in string[string] param = null) {\treturn signedCall(consumer, token, \"GET\", uri, param, (http, uri, option) {\t\treturn cast(immutable)get((0 < option.length)? uri ~ \"?\" ~ option: uri, http);\t});}string signedPost(in Token consumer, in Token token, in string uri, in string[string] param = null) {\treturn signedCall(consumer, token, \"POST\", uri, param, (http, uri, option) {\t\treturn cast(immutable)post(uri, option, http);\t});}private ubyte[] hmac_sha1(in string key, in string message) {\tauto padding(in ubyte[] k) {\t\tauto h = (64 < k.length)? sha1Of(k): k;\t\treturn h ~ new ubyte[64 - h.length];\t}\tconst k = padding(cast(ubyte[])key);\treturn sha1Of((k.map!q{cast(ubyte)(a^0x5c)}.array)\t\t\t~ sha1Of((k.map!q{cast(ubyte)(a^0x36)}.array) ~ cast(ubyte[])message)).dup;}private Token toToken(string s) {\tstring[string] result;\tforeach (x; s.split(\"&\").map!q{a.split(\"=\")})\t\tresult[x[0]] = x[1];\treturn Token(result[\"oauth_token\"], result[\"oauth_token_secret\"]);}void main() {\timmutable consumer\t\t= Token(\"replace your consumer key\", \"replace your consumer secret\");\t\tauto request_token = signedGet(consumer, Token(),        \"https://api.twitter.com/oauth/request_token\").toToken;\tauto authorize_uri = \"https://api.twitter.com/oauth/authorize\" ~ \"?oauth_token=\" ~ request_token.key;\tauthorize_uri.writeln;\tauto verifier = readln.chomp;\tauto access_token = signedGet(consumer, request_token,        \"https://api.twitter.com/oauth/access_token\", [\"oauth_verifier\": verifier]).toToken;    signedPost(consumer, access_token,\n        \"https://api.twitter.com/1.1/statuses/update.json\", [\"status\": \"\u5e02\u6c11\u3001\u8a8d\u8a3c\u306f\u7fa9\u52d9\u3067\u3059\"]);\n}```\n\n##\u7d42\u308f\u308a\u306b\n\n\u6726\u6727\u3068\u3057\u305f\u610f\u8b58\u306e\u4e2d\u66f8\u3044\u305f\u6587\u7ae0\u3068\u30b3\u30fc\u30c9\u306a\u306e\u3067\u3068\u3053\u308d\u3069\u3053\u308d\u982d\u304c\u6eb6\u3051\u3066\u3044\u308b\u611f\u3058\u3082\u3057\u307e\u3059\u304c\u3001\n\u3069\u3046\u3057\u3066\u3053\u3093\u306a\u3053\u3068\u306b\u306a\u3063\u305f\u306e\u304b\u3001\u79c1\u306b\u306f\u308f\u304b\u308a\u307e\u305b\u3093\u3002\n\u3053\u308c\u3092\u3042\u306a\u305f\u304c\u8aad\u3093\u3060\u306a\u3089\u3001\u305d\u306e\u6642\u3001\u79c1\u306f\u5bdd\u3066\u3044\u308b\u3067\u3057\u3087\u3046\u3002\n\u8a18\u4e8b\u304c\u3042\u308b\u304b\u3001\u306a\u3044\u304b\u306e\u9055\u3044\u306f\u3042\u308b\u3067\u3057\u3087\u3046\u304c\u3002\n\u3053\u308c\u3092\u8aad\u3093\u3060\u3042\u306a\u305f\u3002\u3069\u3046\u304b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u66f8\u3044\u3066\u304f\u3060\u3055\u3044\u3002\u305d\u308c\u3060\u3051\u304c\u3001\u79c1\u306e\u671b\u307f\u3067\u3059\u3002\n\n\u6b21\u306e21\u65e5\u76ee\u306f\u3001[@Fuhduki](http://qiita.com/users/Fuhduki)\u3055\u3093\u3067\u3059\u3002\u86d9\u3002", "tags": ["dlang"]}