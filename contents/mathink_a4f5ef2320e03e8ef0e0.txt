{"context": " More than 1 year has passed since last update.\n\n\u4f55\u3092\u3057\u305f\uff1f\n\nCoq \u3067\u534a\u74b0\u3092\u5b9a\u7fa9\u3057\u305f\n\u8db3\u3057\u7b97\u3068\u304b\u3051\u7b97\u3067\u534a\u74b0\u306b\u306a\u308b\u3053\u3068\u3092\u793a\u3057\u305f\u3002\n\u81ea\u7136\u6570\u306b \u221e \u3092\u8ffd\u52a0\u3057\u3066\u3001\u305d\u306e\u4e0a\u3067\u6700\u5c0f\u5024\u3068\u8db3\u3057\u7b97\u304c\u534a\u74b0\u306b\u306a\u308b\u3053\u3068\u3092\u793a\u3057\u305f\u3002\n\n\n\u3069\u3046\u8aad\u3081\u3070\u3044\u3044\uff1f\n\u300c\u3078\u30fc\u3001 Coq \u3067\u534a\u74b0\u5b9a\u7fa9\u3057\u3066\u904a\u3079\u308b\u3093\u3060\u30fc\u300d\n\u524d\u534a\u306e\u30b3\u30fc\u30c9\u306e\u89e3\u8aac\u306f\u3057\u307e\u305b\u3093\u3002\n\u8aad\u3081\u3070\u5927\u4f53\u308f\u304b\u308b\u3088\u3046\u306a\u66f8\u304d\u65b9\u3092\u3057\u3066\u3044(\u308b\u3064\u3082\u308a\u3067\u306f\u3042\u308a)\u307e\u3059\u304c\u3001\u4f55\u304b\u8cea\u554f\u304c\u3042\u308c\u3070 https://twitter.com/mathink \u307e\u3067\u304a\u5bc4\u305b\u304f\u3060\u3055\u3044\u3002\n\u57fa\u672c\u7684\u306b\u9806\u756a\u901a\u308a\u306b\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30da\u3059\u308c\u3070\u52d5\u304d\u307e\u3059\u3002\n\u307e\u305f\u3001\u5168\u90e8\u3072\u3063\u304f\u308b\u3081\u305f\u3084\u3064\u3092 https://gist.github.com/mathink/fe8f36b9cca0697fc5b5 \u306b\u7f6e\u304d\u307e\u3057\u305f\u3002\n\nCoq \u3067\u534a\u74b0\u3092\u3064\u304f\u308b\n\n\u5fc5\u8981\u306a\u9053\u5177\u305f\u3061\nSetoid \u3092\u30d9\u30fc\u30b9\u306b\u3057\u3066\u8b70\u8ad6\u3092\u884c\u306a\u3044\u307e\u3059\u3002\n\u534a\u74b0\u3092\u5b9a\u7fa9\u3059\u308b\u524d\u306b\u3001\u5fc5\u8981\u306a\u9053\u5177\u3067\u3042\u308b\n\nSetoid :: \u540c\u5024\u95a2\u4fc2\u3092\u7b49\u4fa1\u6027\u3068\u898b\u505a\u3057\u3066\u6271\u3046\u69cb\u9020\nMap :: Setoid \u306e\u9593\u306e\u30e2\u30eb\u30d5\u30a3\u30ba\u30e0\nBinop :: Setoid \u4e0a\u306e\u4e8c\u9805\u6f14\u7b97\nAssociative \u306a\u3069 :: Binop \u306b\u95a2\u3059\u308b\u6027\u8cea\nMonoid :: Setoid \u30d9\u30fc\u30b9\u306e\u30e2\u30ce\u30a4\u30c9\n\n\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u4e00\u6c17\u306b\u3069\u3046\u305e\u3002\n\u3068\u308a\u3042\u3048\u305a\u3001\u5fc5\u8981\u306a\u3082\u306e\u304c\u3053\u3053\u306b\u66f8\u3044\u3066\u3042\u308b\u3093\u3060\u306a\u3041\u3068\u601d\u3063\u3066\u304f\u308c\u308c\u3070 OK \u3067\u3059\u3002\nSet Implicit Arguments.\nUnset Strict Implicit.\n\nGeneralizable All Variables.\n\nRequire Export Basics Tactics Coq.Setoids.Setoid Morphisms.\n\nStructure Setoid :=\n  {\n    carrier:> Type;\n    equal: relation carrier;\n\n    prf_Setoid:> Equivalence equal\n  }.\nExisting Instance prf_Setoid.\nNotation Setoid_of eq := (@Build_Setoid _ eq _).\n\nNotation \"(== :> S )\" := (equal (s:=S)).\nNotation \"(==)\" := (== :> _).\nNotation \"x == y\" := (equal x y) (at level 70, no associativity).\nNotation \"x == y :> S\" := (equal (s:=S) x y)\n  (at level 70, y at next level, no associativity).\n\nClass isMap (X Y: Setoid)(f: X -> Y) :=\n  map_subst:> Proper ((==) ==> (==)) f.\n\nStructure Map (X Y: Setoid) :=\n  {\n    map_body:> X -> Y;\n\n    prf_Map:> isMap map_body\n  }.\nExisting Instance prf_Map.\nNotation makeMap f := (@Build_Map _ _ f _).\nNotation \"[ x .. y :-> p ]\" := \n  (makeMap (fun x => .. (makeMap (fun y => p)) ..))\n    (at level 200, x binder, y binder, right associativity,\n     format \"'[' [ x .. y :-> '/ ' p ] ']'\"): map_scope.\nDelimit Scope map_scope with map.\n\nClass isBinop (X: Setoid)(op: X -> X -> X) :=\n  binop_subst:> Proper ((==) ==> (==) ==> (==)) op.\n\nStructure Binop (X: Setoid) :=\n  {\n    binop:> X -> X -> X;\n    prf_Binop:> isBinop binop\n  }.\nExisting Instance prf_Binop.\n\n\nClass Associative `(op: Binop X): Prop :=\n  associative:>\n    forall (x y z: X), op x (op y z) == op (op x y) z.\n\nClass LIdentical `(op: Binop X)(e: X): Prop :=\n  left_identical:> forall x: X, op e x == x.\n\nClass RIdentical `(op: Binop X)(e: X): Prop :=\n  right_identical:> forall x: X, op x e == x.\n\nClass Identical `(op: Binop X)(e: X): Prop :=\n  {\n    identical_l:> LIdentical op e;\n    identical_r:> RIdentical op e\n  }.\nExisting Instance identical_l.\nExisting Instance identical_r.\nCoercion identical_l: Identical >-> LIdentical.\nCoercion identical_r: Identical >-> RIdentical.\n\nClass LInvertible `{Identical X op e}(inv: Map X X): Prop :=\n  left_invertible:>\n    forall (x: X), op (inv x) x == e.\n\nClass RInvertible `{Identical X op e}(inv: Map X X): Prop :=\n  right_invertible:>\n    forall (x: X), op x (inv x) == e.\n\nClass Invertible `{Identical X op e}(inv: Map X X): Prop :=\n  {\n    invertible_l:> LInvertible inv;\n    invertible_r:> RInvertible inv\n  }.\nCoercion invertible_l: Invertible >-> LInvertible.\nCoercion invertible_r: Invertible >-> RInvertible.\n\nClass Divisible `(op: Binop X)(divL divR: Binop X): Prop :=\n  {\n    divisible_l:>\n      forall (a b: X), op (divL a b) a == b;\n    divisible_r:>\n      forall (a b: X), op a (divR a b) == b\n  }.\n\nClass Commute `(op: Binop X): Prop :=\n  commute:>\n    forall a b, op a b == op b a.\n\n\nModule Monoid.\n  Class spec (M: Setoid)(op: Binop M)(e: M) :=\n    proof {\n        associative:> Associative op;\n        identical:> Identical op e\n      }.\n\n  Structure type :=\n    make {\n        carrier: Setoid;\n        op: Binop carrier;\n        e: carrier;\n\n        prf: spec op e\n      }.\n\n  Module Ex.\n    Existing Instance associative.\n    Existing Instance identical.\n    Existing Instance prf.\n\n    Notation isMonoid := spec.\n    Notation Monoid := type.\n\n    Coercion associative: isMonoid >-> Associative.\n    Coercion identical: isMonoid >-> Identical.\n    Coercion carrier: Monoid >-> Setoid.\n    Coercion prf: Monoid >-> isMonoid.\n\n    Delimit Scope monoid_scope with monoid.\n    Notation \"x * y\" := (op _ x y) (at level 40, left associativity): monoid_scope.\n    Notation \"'1'\" := (e _): monoid_scope.\n  End Ex.\n\nEnd Monoid.\nExport Monoid.Ex.\n\nModule \u3068 Class \u3068 Structure\u3001\u305d\u3057\u3066 Export \u306e\u5408\u308f\u305b\u6280\u306f\u6163\u308c\u308b\u3068(\u79c1\u306b\u3068\u3063\u3066\u306f)\u8aad\u307f\u6613\u3044\u3093\u3067\u3059\u304c\u3001\u6163\u308c\u3066\u306a\u3044\u3068\u3069\u3046\u306a\u3093\u3067\u3057\u3087\u3046\uff1f\n\u3053\u3046\u3084\u3063\u3066\u30d9\u30bf\u30fc\u3063\u3068\u8f09\u305b\u308b\u306e\u306f\u3001\u53cd\u611f\u3092k\n\n\u534a\u74b0\u306e\u5b9a\u7fa9\n\u4ee5\u4e0a\u306e\u9053\u5177\u3092\u7528\u3044\u3066\u534a\u74b0\u306e\u5b9a\u7fa9\u3092\u884c\u3044\u307e\u3059\u3002\n\u534a\u74b0\u306f\u3001\u52a0\u6cd5\u306b\u3064\u3044\u3066\u306f\u53ef\u63db\u306a\u30e2\u30ce\u30a4\u30c9\u306e\u3001\u4e57\u6cd5\u306b\u3064\u3044\u3066\u306f(\u53ef\u63db\u3068\u306f\u9650\u3089\u306a\u3044)\u30e2\u30ce\u30a4\u30c9\u306e\u69cb\u9020\u3092\u6301\u3063\u305f\u4ee3\u6570\u7cfb\u3067\u3042\u308a\u3001\u66f4\u306b\u52a0\u6cd5\u306b\u3064\u3044\u3066\u306e\u5358\u4f4d\u5143 0 \u304c\u4e57\u6cd5\u306e\u96f6\u5143\u306b\u306a\u3063\u3066\u3044\u308b\u3082\u306e\u3067\u3059\u3002\n\u3053\u306e\u6761\u4ef6\u3092\u305d\u306e\u307e\u307e\u66f8\u304d\u4e0b\u305b\u3070 Coq \u306b\u304a\u3044\u3066\u3082\u534a\u74b0\u304c\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\nspec \u304c \u534a\u74b0\u3067\u3042\u308b\u3053\u3068 \u3092\u8a18\u8ff0\u3057\u3066\u3044\u308b\u90e8\u5206\u3067\u3059\u3002\nModule SemiRing.\n  Class spec (S: Setoid)(add: Binop S)(z: S)(mul: Binop S)(e: S) :=\n    proof {\n        add_monoid: isMonoid add z;\n        add_commute:> Commute add;\n        mul_monoid: isMonoid mul e;\n\n        zero_l:\n          forall a: S, mul z a == z;\n        zero_r:\n          forall a: S, mul a z == z\n      }.\n\n  Structure type :=\n    make {\n        carrier: Setoid;\n\n        add: Binop carrier;\n        z: carrier;\n\n        mul: Binop carrier;\n        e: carrier;\n\n        prf: spec add z mul e\n      }.\n\n  Module Ex.\n    Existing Instance add_monoid.\n    Existing Instance add_commute.\n    Existing Instance mul_monoid.\n    Existing Instance prf.\n\n    Notation isSemiRing := spec.\n    Notation SemiRing := type.\n\n    Coercion add_commute: isSemiRing >-> Commute.\n    Coercion carrier: SemiRing >-> Setoid.\n    Coercion prf: SemiRing >-> isSemiRing.\n\n    Delimit Scope semiring_scope with srng.\n\n    Notation \"x + y\" := (add _ x y): semiring_scope.\n    Notation \"x * y\" := (mul _ x y): semiring_scope.\n    Notation \"'0'\" := (z _): semiring_scope.\n    Notation \"'1'\" := (e _): semiring_scope.\n  End Ex.\n  Import Ex.\nEnd SemiRing.\nExport SemiRing.Ex.\n\n\u6700\u5f8c\u306e\u65b9\u306b\u3042\u308b\u8a18\u6cd5\u306e\u5b9a\u7fa9\u306f\u5927\u5207\u306a\u306e\u3067\u3088\u304f\u898b\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\u3053\u3046\u3044\u3063\u305f\u8a18\u53f7\u306f\u3068\u3066\u3082\u4e71\u7528\u3055\u308c\u308b\u306e\u3067\u3001\u30b9\u30b3\u30fc\u30d7\u3067\u5236\u9650\u3057\u3066\u6642\u3068\u5834\u5408\u306b\u5fdc\u3058\u3066\u4f7f\u3044\u5206\u3051\u3089\u308c\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u30e2\u30ce\u30a4\u30c9\u3067\u3082\u540c\u3058\u3053\u3068\u3092\u3084\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u53c2\u7167\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u8db3\u3057\u7b97\u304b\u3051\u7b97\u306e\u534a\u74b0\n\u534a\u74b0\u306e\u5b9a\u7fa9\u3092\u8a18\u8ff0\u3067\u304d\u305f\u306e\u3067\u5b9f\u969b\u306b\u534a\u74b0\u3092\u69cb\u6210\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u4e00\u3064\u76ee\u306f\u308f\u304b\u308a\u3084\u3059\u3044\u4f8b\u3001\u8db3\u3057\u7b97\u3068\u304b\u3051\u7b97\u3067\u3059\u3002\n\u8a3c\u660e\u306f\u7701\u7565\u3057\u3066\u3044\u304d\u307e\u3059\u304c\u3001\u3069\u308c\u3082\u7c21\u5358\u306a\u306e\u3067\u5927\u4e08\u592b\u3067\u3059\u3002\n\u3068\u308a\u3042\u3048\u305a Arith \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\u4ee5\u964d\u3001\u65e2\u306b\u793a\u3055\u308c\u3066\u3044\u308b\u6027\u8cea\u3092\u4f7f\u3048\u3070\u8a3c\u660e\u304c\u697d\u306b\u306a\u308b\u305f\u3081\u3067\u3059(\u7701\u7565\u3057\u307e\u3059\u304c)\u3002\nRequire Import Arith.\n\n\u3055\u3066\u3001\u3053\u308c\u304b\u3089\u534a\u74b0\u3092\u69cb\u6210\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u534a\u74b0\u306e\u69cb\u6210\n\u307e\u305a\u3001nat \u304c Setoid \u3067\u3042\u308b\u3053\u3068\u3092\u8ff0\u3079\u3066\u304a\u304d\u307e\u3059\u3002\nCanonical Structure nat_setoid := Setoid_of (@eq nat).\n\n\u7b49\u4fa1\u6027\u306f Coq \u304c\u6a19\u6e96\u3067\u63d0\u4f9b\u3057\u3066\u3044\u308b = \u3067\u69cb\u3044\u307e\u305b\u3093\u3002\n\u6b21\u306b\u3001\u8db3\u3057\u7b97\u304c nat_setoid \u4e0a\u306e\u4e8c\u9805\u6f14\u7b97\u3068\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u8ff0\u3079\u307e\u3057\u3087\u3046\u3002\n\u4e00\u822c\u306b\u3001 Setoid \u4e0a\u3067\u306e\u6f14\u7b97\u306f\u7b49\u4fa1\u6027\u306b\u3064\u3044\u3066 well-defined \u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u304b\u3089\u3001\u3053\u306e\u78ba\u8a8d\u306f\u5fc5\u8981\u3067\u3059\u3002\n\u4eca\u56de\u306f\u7b49\u4fa1\u6027\u304c = \u306a\u306e\u3067\u3001 Program \u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3048\u3070\u8a3c\u660e\u306f\u5927\u4f53 Coq \u304c\u3084\u3063\u3066\u304f\u308c\u307e\u3059\u3002\nProgram Instance plus_is_binop: isBinop (X:=nat_setoid) plus.\nCanonical Structure plus_binop := Build_Binop plus_is_binop.\n\n\u305d\u3057\u3066\u3001\u8db3\u3057\u7b97\u304c 0 \u3092\u5358\u4f4d\u5143\u3068\u3059\u308b\u30e2\u30ce\u30a4\u30c9\u3068\u306a\u308b\u3053\u3068\u3092\u4ee5\u4e0b\u3067\u793a\u3057\u307e\u3059\u3002\n\u7701\u7565\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u30e2\u30ce\u30a4\u30c9\u5247\u306b\u5bfe\u5fdc\u3057\u305f\u30b4\u30fc\u30eb\u304c\u4e8c\u3064\u751f\u6210\u3055\u308c\u308b\u306e\u3067\u3001\u8a3c\u660e\u304c\u5fc5\u8981\u3067\u3059\u3002\nProgram Instance plus_is_monoid: isMonoid plus_binop 0.\n\n\u304b\u3051\u7b97\u306b\u3064\u3044\u3066\u3082\u540c\u69d8\u306b\u3001\u4e8c\u9805\u6f14\u7b97\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u304b\u3081\u305f\u306e\u3061\u30011 \u3092\u5358\u4f4d\u5143\u3068\u3059\u308b\u30e2\u30ce\u30a4\u30c9\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\nProgram Instance mult_is_binop: isBinop (X:=nat_setoid) mult.\nCanonical Structure mult_binop := Build_Binop mult_is_binop.\n\nProgram Instance mult_is_monoid: isMonoid mult_binop 1.\n\n\u3053\u308c\u3067\u534a\u74b0\u3092\u69cb\u6210\u3059\u308b\u6e96\u5099\u304c\u5927\u4f53\u51fa\u6765\u307e\u3057\u305f\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u534a\u74b0\u306e\u5b9a\u7fa9\u3092\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u5927\u4f53\u3001\u3068\u3044\u3046\u306e\u306f\u3001\u534a\u74b0\u306f\u52a0\u6cd5\u306b\u3064\u3044\u3066\u53ef\u63db\u3067\u3059\u306e\u3067\u3001\u6700\u5f8c\u306b\u8db3\u3057\u7b97\u306e\u53ef\u63db\u6027\u306b\u3064\u3044\u3066\u306e\u8a3c\u660e\u304c\u5fc5\u8981\u306b\u306a\u308b\u304b\u3089\u3067\u3059\u3002\n\u3059\u3054\u304f\u7c21\u5358\u306a\u306e\u3067\u7279\u306b\u89e6\u308c\u307e\u305b\u3093(plus_comm \u3092 apply \u3059\u308a\u3083\u3044\u3044\u3067\u3059)\u3002\nProgram Instance plus_mult_is_semiring: isSemiRing plus_binop 0 mult_binop 1.\nCanonical Structure plus_mult_semiring: SemiRing := SemiRing.make plus_mult_is_semiring.\n\n\u3064\u3044\u3067\u306b\u96f6\u5143\u306b\u95a2\u3059\u308b\u8a3c\u660e\u3082\u751f\u3058\u307e\u3059\u304c\u3001\u3053\u308c\u307e\u305f\u7c21\u5358\u306a\u306e\u3067\u7701\u7565\u3067\u3059\u3002\n\u3053\u308c\u3067\u3001\u8db3\u3057\u7b97\u3068\u304b\u3051\u7b97\u306e\u306a\u3059\u534a\u74b0\u306e\u69cb\u6210\u304c\u7d42\u308f\u308a\u307e\u3057\u305f\u3002\n\n\u8a66\u3059\n\u4f5c\u3063\u305f\u306e\u3067\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u3061\u3087\u3063\u3068\u3057\u305f\u6e96\u5099\u3068\u3057\u3066\u3001\u6b21\u306e\u7701\u7565\u8a18\u6cd5\u3092\u7528\u610f\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nNotation pms := plus_mult_semiring.\n\n\u4ee5\u4e0b\u3067\u5e7e\u3064\u304b\u306e\u8a08\u7b97\u3092\u884c\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u52a0\u6cd5\u3068\u4e57\u6cd5\u304c\u305d\u308c\u305e\u308c\u8db3\u3057\u7b97\u3068\u304b\u3051\u7b97\u306a\u306e\u3067\u3001\u672c\u5f53\u306b\u534a\u74b0\u3068\u3057\u3066\u306e\u8a08\u7b97\u304c\u884c\u306a\u308f\u308c\u3066\u3044\u308b\u306e\u304b\u5fc3\u914d\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u304c\u3001\u8a08\u7b97\u306e\u7d50\u679c\u304c pms\u3001\u5148\u7a0b\u5b9a\u7fa9\u3057\u305f\u534a\u74b0\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u3069\u3046\u3084\u3089\u554f\u984c\u306f\u306a\u3055\u305d\u3046\u3067\u3059\u3002\nOpen Scope semiring_scope.\n\nCompute (3 + 2).\n     (* = 5 *)\n     (* : pms *)\n\nCompute (3 * 2).\n     (* = 6 *)\n     (* : pms *)\n\nCompute (0 + 4).\n     (* = 4 *)\n     (* : pms *)\n\nCompute (0 * 4).\n     (* = 0 *)\n     (* : pms *)\n\n\n\u6700\u5c0f\u5024\u3068\u8db3\u3057\u7b97\u306e\u534a\u74b0\n\u4e8c\u3064\u76ee\u306e\u4f8b\u306f\u3001\u6700\u5c0f\u5024\u3092\u53d6\u308b\u6f14\u7b97\u3092\u52a0\u6cd5\u3001\u8db3\u3057\u7b97\u3092\u4e57\u6cd5\u3068\u3057\u305f\u534a\u74b0\u3067\u3059\u3002\nmin-plus \u4ee3\u6570\u3068\u304b\u30c8\u30ed\u30d4\u30ab\u30eb\u534a\u74b0\u3068\u304b\u547c\u3070\u308c\u308b\u69cb\u9020\u3067\u3059\u3002\n\u3053\u306e\u6642\u5229\u7528\u3059\u308b\u306e\u306f\u901a\u5e38\u306e\u81ea\u7136\u6570\u3067\u306f\u306a\u304f\u3001\u81ea\u7136\u6570\u306b \u221e \u3092\u52a0\u3048\u305f\u69cb\u9020\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\u3067\u3059\u306e\u3067\u3001\u307e\u305a\u306f\u3053\u308c\u3092\u8868\u3059\u578b\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u3087\u3046\u3002\nInductive nat_inf :=\n| num: nat -> nat_inf\n| inf: nat_inf.\n\nNotation \"! n\" := (num n) (at level 0).\n\nnat_inf \u306f inf \u3068\u3044\u3046\u65b0\u305f\u306a\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u3001\u901a\u5e38\u306e\u81ea\u7136\u6570\u3092\u30e9\u30c3\u30d7\u3059\u308b num \u3068\u3044\u3046\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304b\u3089\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u306f option nat \u3068\u540c\u578b\u306a\u306e\u3067\u3059\u304c\u3001\u305d\u306e\u307e\u307e option nat \u3092\u4f7f\u3063\u3066\u3057\u307e\u3046\u3068\u5b9f\u969b\u306b\u8a08\u7b97\u3092\u884c\u3046\u3068\u304d\u306b\u3061\u3087\u3063\u3068\u9762\u5012\u306a\u3053\u3068\u306b\u306a\u308b\u306e\u3067\u3001\u3053\u306e\u3088\u3046\u306b\u65b0\u305f\u306a\u578b\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\u305d\u306e\u9762\u5012\u306e\u8aac\u660e\u306f\u3053\u3053\u3067\u306f\u5272\u611b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u3068\u308a\u3042\u3048\u305a\u3001\u30bf\u30a4\u30d7\u91cf\u304c\u5897\u3048\u3066\u898b\u305f\u76ee\u304c\u60aa\u304f\u306a\u308b\u306e\u3067\u3059\u3002\n\u307e\u305f\u3001\u8a18\u6cd5\u3092\u7c21\u7565\u5316\u3059\u308b\u305f\u3081\u306b !n \u3067 num n \u3092\u8868\u305b\u308b\u3088\u3046\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u6f14\u7b97\u306e\u5b9a\u7fa9\n\u307e\u305a\u306f\u6700\u5c0f\u5024\u3068\u8db3\u3057\u7b97\u306e\u5b9a\u7fa9\u3067\u3059\u3002\nnat \u3092\u62e1\u5f35\u3057\u3066 nat_inf \u3092\u4f5c\u3063\u305f\u306e\u3067\u3001min \u3068 plus \u3082\u305d\u308c\u306b\u5408\u308f\u305b\u3066\u62e1\u5f35\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u8003\u3048\u308b\u3079\u304d\u3068\u3053\u308d\u306f inf \u304c\u95a2\u308f\u308b\u5834\u5408\u306e\u307f\u3067\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u5143\u306e\u6f14\u7b97\u3092\u4f7f\u3048\u3070\u3088\u3044\u3067\u3059\u3002\nRequire Import Min.\n\nDefinition min_inf (n m: nat_inf): nat_inf :=\n  match n, m with\n  | inf, _ => m\n  | _, inf => n\n  | !n, !m => !(min n m)\n  end.\n\nDefinition plus_inf (n m: nat_inf): nat_inf :=\n  match n, m with\n  | inf, _ | _, inf => inf\n  | !n, !m => !(plus n m)\n  end.\n\n\n\u534a\u74b0\u306e\u69cb\u6210\n\u6f14\u7b97\u3092\u5b9a\u7fa9\u3057\u305f\u306e\u3067\u3001\u524d\u306e\u4f8b\u3068\u540c\u69d8\u306e\u6d41\u308c\u3067\u534a\u74b0\u69cb\u9020\u3092\u4e0e\u3048\u3066\u3044\u304d\u307e\u3059\u3002\n\u307e\u305a\u3001 nat_inf \u3092\u901a\u5e38\u306e = \u3067 Setoid \u3068\u898b\u505a\u3057\u307e\u3059\u3002\nCanonical Structure nat_inf_setoid := Setoid_of (@eq nat_inf).\n\n\u6b21\u306b\u3001 min_inf\u3001\u6700\u5c0f\u5024\u6f14\u7b97\u304c\u4e8c\u9805\u6f14\u7b97\u3067\u3042\u308a\u3001 inf \u3092\u5358\u4f4d\u5143\u3068\u3059\u308b\u30e2\u30ce\u30a4\u30c9\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\nProgram Instance min_inf_is_binop: isBinop (X:=nat_inf_setoid) min_inf.\nCanonical Structure min_inf_binop := Build_Binop min_inf_is_binop.\n\nProgram Instance min_inf_is_monoid: isMonoid min_inf_binop inf.\n\n\u307e\u305f\u3001 plus_inf \u3082\u4e8c\u9805\u6f14\u7b97\u3067\u3042\u308a\u3001 !0 \u3092\u5358\u4f4d\u5143\u3068\u3059\u308b\u30e2\u30ce\u30a4\u30c9\u3067\u3059\u3002\nProgram Instance plus_inf_is_binop: isBinop (X:=nat_inf_setoid) plus_inf.\nCanonical Structure plus_inf_binop := Build_Binop plus_inf_is_binop.\n\nProgram Instance plus_inf_is_monoid: isMonoid plus_inf_binop !0.\n\n\u4ee5\u4e0a\u306e\u4e8b\u5b9f\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u6700\u5c0f\u5024\u3068\u8db3\u3057\u7b97\u306b\u3088\u308b\u534a\u74b0\u304c\u69cb\u6210\u3067\u304d\u307e\u3057\u305f\u3002\nProgram Instance min_plus_is_semiring: isSemiRing min_inf_binop inf plus_inf_binop !0.\nCanonical Structure min_plus_semiring := SemiRing.make min_plus_is_semiring.\n\n\n\u8a66\u3059\n\u305b\u3063\u304b\u304f\u69cb\u6210\u3057\u305f\u306e\u3067\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u524d\u56de\u540c\u69d8\u306b\u7701\u7565\u8a18\u6cd5\u3092\u5c0e\u5165\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nNotation mps := min_plus_semiring.\n\n\u305d\u3057\u3066\u3001\u4ee5\u4e0b\u304c\u8a08\u7b97\u7d50\u679c\u305f\u3061\u3067\u3059\u3002\n+ \u304c\u6700\u5c0f\u5024\u306b\u3001 * \u304c\u8db3\u3057\u7b97\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001 inf \u3082\u4e0a\u624b\u304f\u6a5f\u80fd\u3057\u3066\u3044\u308b\u3053\u3068\u3082\u308f\u304b\u308a\u307e\u3059\u3002\nOpen Scope semiring_scope.\n\nCompute (!3 + !2).\n     (* = !(2) *)\n     (* : mps *)\n\nCompute (!3 * !2).\n     (* = !(5) *)\n     (* : mps *)\n\nCompute (!1 + !2).\n     (* = !(1) *)\n     (* : mps *)\n\nCompute (!1 * !2).\n     (* = !(3) *)\n     (* : mps *)\n\nCompute (inf + !4).\n     (* = !(4) *)\n     (* : mps *)\n\nCompute (inf * !4).\n     (* = inf *)\n     (* : mps *)\n\nCompute (!0 + inf).\n     (* = !(0) *)\n     (* : mps *)\n\nCompute (!0 * inf).\n     (* = inf *)\n     (* : mps *)\n\n\n\u307e\u3068\u3081\nCoq \u3067\u534a\u74b0\u3092\u5b9a\u7fa9\u3057\u3066\u3001\u5b9f\u4f8b\u3092\u4e8c\u3064\u69cb\u6210\u3057\u3066\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\u306a\u304a\u3001\u3053\u306e\u4e8c\u3064\u306e\u534a\u74b0\u306f\u4f75\u7528(\u3068\u3044\u3046\u304b\u3001\u8db3\u3057\u7b97\u304b\u3051\u7b97\u306e\u534a\u74b0\u306e\u8a08\u7b97\u7d50\u679c\u3092\u6700\u5c0f\u5024\u8db3\u3057\u7b97\u306e\u534a\u74b0\u306b\u6d41\u7528)\u3067\u304d\u307e\u3059\u3002\n\u3053\u3093\u306a\u611f\u3058\u306b\u8272\u3005\u9762\u767d\u3044\u8a08\u7b97\u304c\u66f8\u3051\u305d\u3046\u3067\u3059\u306d\u3002\nCompute (!(5 + 2) + !6).\n     (* = !(6) *)\n     (* : mps *)\n\nCompute (inf * !(3 + 1)).\n     (* = inf *)\n     (* : mps *)\n\n\u305f\u3060\u3057\u3001\u8db3\u3057\u7b97\u304b\u3051\u7b97\u306e\u534a\u74b0\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u306a\u304f\u3066\u3082\u540c\u3058\u3082\u306e\u304c\u66f8\u3051\u307e\u3059\u3002\n\n\u304a\u307e\u3051\nCoercion \u3092\u4f7f\u3046\u3053\u3068\u3067 '!' \u3092\u3064\u3051\u305a\u306b\u66f8\u304f\u3053\u3068\u304c\u3001\u6982\u306d\u3001\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u4f8b\u3092\u898b\u308c\u3070\u300c\u6982\u306d\u300d\u306e\u610f\u5473\u3082\u308f\u304b\u308b\u3053\u3068\u3067\u3057\u3087\u3046\u3002\nCoercion num: nat >-> nat_inf.\n\nNotation \"x '|' X\" := (x:X) (at level 15, no associativity, format \"x '|' X\").\n\nCompute (!3 + 2).\n     (* = !(2) *)\n     (* : mps *)\n\nFail Compute (3 * !2).\n\nCompute (3|mps * 2).\n     (* = !(5) *)\n     (* : mps *)\n\nCompute (1|mps + inf).\n     (* = !(2) *)\n     (* : mps *)\n\nCompute (inf * 0).\n     (* = inf *)\n     (* : mps *)\n\nCompute ((4 * 3)|mps + inf).\n     (* = !(12) *)\n     (* : mps *)\n\nCompute (0 + (4 * 3)).\n     (* = 12 *)\n     (* : pms *)\n\n+ \u3084 * \u304c\u3069\u306e\u534a\u74b0\u3067\u306e\u6f14\u7b97\u306a\u306e\u304b\u306f\u7b2c\u4e00\u5f15\u6570\u3067\u63a8\u8ad6\u3055\u308c\u307e\u3059\u3002\n\u3086\u3048\u306b\u3001\u7b2c\u4e00\u5f15\u6570\u304c\u6570\u306e\u5834\u5408\u3001pms \u4e0a\u306e\u6f14\u7b97\u3068\u898b\u505a\u3055\u308c\u3066\u3057\u307e\u3046\u305f\u3081\u306b\u3001\u7b2c\u4e8c\u5f15\u6570\u304c mps \u306e\u6570\u3060\u3068\u578b\u304c\u5408\u308f\u306a\u3044\u3068\u3044\u3046\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u3067\u3059\u304b\u3089\u3001\u7b2c\u4e00\u5f15\u6570\u304c inf \u306a\u3089\u305d\u3046\u3044\u3046\u5fc3\u914d\u306f\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u5927\u62b5\u306e\u5834\u5408 mps \u3060\u3068\u660e\u793a\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\u7d50\u5c40\u3001 ! \u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u3088\u3044\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308b\u306e\u3067\u3059\u306d\u3002\n\u3061\u306a\u307f\u306b x|X \u3068\u3044\u3046\u306e\u306f x:X \u306e\u7d50\u5408\u5ea6\u3092\u4e0a\u3052\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\n\u305d\u3046\u3057\u306a\u3044\u3068\u3001 3|mps * 2 \u3092 (3:mps) * 2 \u3068\u66f8\u304b\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u304f\u306a\u308a\u307e\u3059\u3002\n# \u4f55\u3092\u3057\u305f\uff1f\n\n* Coq \u3067\u534a\u74b0\u3092\u5b9a\u7fa9\u3057\u305f\n* \u8db3\u3057\u7b97\u3068\u304b\u3051\u7b97\u3067\u534a\u74b0\u306b\u306a\u308b\u3053\u3068\u3092\u793a\u3057\u305f\u3002\n* \u81ea\u7136\u6570\u306b \u221e \u3092\u8ffd\u52a0\u3057\u3066\u3001\u305d\u306e\u4e0a\u3067\u6700\u5c0f\u5024\u3068\u8db3\u3057\u7b97\u304c\u534a\u74b0\u306b\u306a\u308b\u3053\u3068\u3092\u793a\u3057\u305f\u3002\n\n# \u3069\u3046\u8aad\u3081\u3070\u3044\u3044\uff1f\n\n\u300c\u3078\u30fc\u3001 Coq \u3067\u534a\u74b0\u5b9a\u7fa9\u3057\u3066\u904a\u3079\u308b\u3093\u3060\u30fc\u300d\n\n\u524d\u534a\u306e\u30b3\u30fc\u30c9\u306e\u89e3\u8aac\u306f\u3057\u307e\u305b\u3093\u3002\n\u8aad\u3081\u3070\u5927\u4f53\u308f\u304b\u308b\u3088\u3046\u306a\u66f8\u304d\u65b9\u3092\u3057\u3066\u3044(\u308b\u3064\u3082\u308a\u3067\u306f\u3042\u308a)\u307e\u3059\u304c\u3001\u4f55\u304b\u8cea\u554f\u304c\u3042\u308c\u3070 https://twitter.com/mathink \u307e\u3067\u304a\u5bc4\u305b\u304f\u3060\u3055\u3044\u3002\n\n\u57fa\u672c\u7684\u306b\u9806\u756a\u901a\u308a\u306b\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30da\u3059\u308c\u3070\u52d5\u304d\u307e\u3059\u3002\n\u307e\u305f\u3001\u5168\u90e8\u3072\u3063\u304f\u308b\u3081\u305f\u3084\u3064\u3092 https://gist.github.com/mathink/fe8f36b9cca0697fc5b5 \u306b\u7f6e\u304d\u307e\u3057\u305f\u3002\n\n# Coq \u3067\u534a\u74b0\u3092\u3064\u304f\u308b\n\n## \u5fc5\u8981\u306a\u9053\u5177\u305f\u3061\n\nSetoid \u3092\u30d9\u30fc\u30b9\u306b\u3057\u3066\u8b70\u8ad6\u3092\u884c\u306a\u3044\u307e\u3059\u3002\n\u534a\u74b0\u3092\u5b9a\u7fa9\u3059\u308b\u524d\u306b\u3001\u5fc5\u8981\u306a\u9053\u5177\u3067\u3042\u308b\n\n* Setoid :: \u540c\u5024\u95a2\u4fc2\u3092\u7b49\u4fa1\u6027\u3068\u898b\u505a\u3057\u3066\u6271\u3046\u69cb\u9020\n* Map :: Setoid \u306e\u9593\u306e\u30e2\u30eb\u30d5\u30a3\u30ba\u30e0\n* Binop :: Setoid \u4e0a\u306e\u4e8c\u9805\u6f14\u7b97\n* Associative \u306a\u3069 :: Binop \u306b\u95a2\u3059\u308b\u6027\u8cea\n* Monoid :: Setoid \u30d9\u30fc\u30b9\u306e\u30e2\u30ce\u30a4\u30c9\n\n\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u4e00\u6c17\u306b\u3069\u3046\u305e\u3002\n\u3068\u308a\u3042\u3048\u305a\u3001\u5fc5\u8981\u306a\u3082\u306e\u304c\u3053\u3053\u306b\u66f8\u3044\u3066\u3042\u308b\u3093\u3060\u306a\u3041\u3068\u601d\u3063\u3066\u304f\u308c\u308c\u3070 OK \u3067\u3059\u3002\n\n```coq\nSet Implicit Arguments.\nUnset Strict Implicit.\n\nGeneralizable All Variables.\n\nRequire Export Basics Tactics Coq.Setoids.Setoid Morphisms.\n\nStructure Setoid :=\n  {\n    carrier:> Type;\n    equal: relation carrier;\n\n    prf_Setoid:> Equivalence equal\n  }.\nExisting Instance prf_Setoid.\nNotation Setoid_of eq := (@Build_Setoid _ eq _).\n\nNotation \"(== :> S )\" := (equal (s:=S)).\nNotation \"(==)\" := (== :> _).\nNotation \"x == y\" := (equal x y) (at level 70, no associativity).\nNotation \"x == y :> S\" := (equal (s:=S) x y)\n  (at level 70, y at next level, no associativity).\n\nClass isMap (X Y: Setoid)(f: X -> Y) :=\n  map_subst:> Proper ((==) ==> (==)) f.\n\nStructure Map (X Y: Setoid) :=\n  {\n    map_body:> X -> Y;\n\n    prf_Map:> isMap map_body\n  }.\nExisting Instance prf_Map.\nNotation makeMap f := (@Build_Map _ _ f _).\nNotation \"[ x .. y :-> p ]\" := \n  (makeMap (fun x => .. (makeMap (fun y => p)) ..))\n    (at level 200, x binder, y binder, right associativity,\n     format \"'[' [ x .. y :-> '/ ' p ] ']'\"): map_scope.\nDelimit Scope map_scope with map.\n\nClass isBinop (X: Setoid)(op: X -> X -> X) :=\n  binop_subst:> Proper ((==) ==> (==) ==> (==)) op.\n\nStructure Binop (X: Setoid) :=\n  {\n    binop:> X -> X -> X;\n    prf_Binop:> isBinop binop\n  }.\nExisting Instance prf_Binop.\n\n\nClass Associative `(op: Binop X): Prop :=\n  associative:>\n    forall (x y z: X), op x (op y z) == op (op x y) z.\n\nClass LIdentical `(op: Binop X)(e: X): Prop :=\n  left_identical:> forall x: X, op e x == x.\n\nClass RIdentical `(op: Binop X)(e: X): Prop :=\n  right_identical:> forall x: X, op x e == x.\n\nClass Identical `(op: Binop X)(e: X): Prop :=\n  {\n    identical_l:> LIdentical op e;\n    identical_r:> RIdentical op e\n  }.\nExisting Instance identical_l.\nExisting Instance identical_r.\nCoercion identical_l: Identical >-> LIdentical.\nCoercion identical_r: Identical >-> RIdentical.\n\nClass LInvertible `{Identical X op e}(inv: Map X X): Prop :=\n  left_invertible:>\n    forall (x: X), op (inv x) x == e.\n\nClass RInvertible `{Identical X op e}(inv: Map X X): Prop :=\n  right_invertible:>\n    forall (x: X), op x (inv x) == e.\n\nClass Invertible `{Identical X op e}(inv: Map X X): Prop :=\n  {\n    invertible_l:> LInvertible inv;\n    invertible_r:> RInvertible inv\n  }.\nCoercion invertible_l: Invertible >-> LInvertible.\nCoercion invertible_r: Invertible >-> RInvertible.\n\nClass Divisible `(op: Binop X)(divL divR: Binop X): Prop :=\n  {\n    divisible_l:>\n      forall (a b: X), op (divL a b) a == b;\n    divisible_r:>\n      forall (a b: X), op a (divR a b) == b\n  }.\n\nClass Commute `(op: Binop X): Prop :=\n  commute:>\n    forall a b, op a b == op b a.\n\n\nModule Monoid.\n  Class spec (M: Setoid)(op: Binop M)(e: M) :=\n    proof {\n        associative:> Associative op;\n        identical:> Identical op e\n      }.\n\n  Structure type :=\n    make {\n        carrier: Setoid;\n        op: Binop carrier;\n        e: carrier;\n\n        prf: spec op e\n      }.\n\n  Module Ex.\n    Existing Instance associative.\n    Existing Instance identical.\n    Existing Instance prf.\n\n    Notation isMonoid := spec.\n    Notation Monoid := type.\n\n    Coercion associative: isMonoid >-> Associative.\n    Coercion identical: isMonoid >-> Identical.\n    Coercion carrier: Monoid >-> Setoid.\n    Coercion prf: Monoid >-> isMonoid.\n\n    Delimit Scope monoid_scope with monoid.\n    Notation \"x * y\" := (op _ x y) (at level 40, left associativity): monoid_scope.\n    Notation \"'1'\" := (e _): monoid_scope.\n  End Ex.\n\nEnd Monoid.\nExport Monoid.Ex.\n```\n\n`Module` \u3068 `Class` \u3068 `Structure`\u3001\u305d\u3057\u3066 `Export` \u306e\u5408\u308f\u305b\u6280\u306f\u6163\u308c\u308b\u3068(\u79c1\u306b\u3068\u3063\u3066\u306f)\u8aad\u307f\u6613\u3044\u3093\u3067\u3059\u304c\u3001\u6163\u308c\u3066\u306a\u3044\u3068\u3069\u3046\u306a\u3093\u3067\u3057\u3087\u3046\uff1f\n\n\u3053\u3046\u3084\u3063\u3066\u30d9\u30bf\u30fc\u3063\u3068\u8f09\u305b\u308b\u306e\u306f\u3001\u53cd\u611f\u3092k\n\n\n## \u534a\u74b0\u306e\u5b9a\u7fa9\n\n\u4ee5\u4e0a\u306e\u9053\u5177\u3092\u7528\u3044\u3066\u534a\u74b0\u306e\u5b9a\u7fa9\u3092\u884c\u3044\u307e\u3059\u3002\n\n\u534a\u74b0\u306f\u3001\u52a0\u6cd5\u306b\u3064\u3044\u3066\u306f\u53ef\u63db\u306a\u30e2\u30ce\u30a4\u30c9\u306e\u3001\u4e57\u6cd5\u306b\u3064\u3044\u3066\u306f(\u53ef\u63db\u3068\u306f\u9650\u3089\u306a\u3044)\u30e2\u30ce\u30a4\u30c9\u306e\u69cb\u9020\u3092\u6301\u3063\u305f\u4ee3\u6570\u7cfb\u3067\u3042\u308a\u3001\u66f4\u306b\u52a0\u6cd5\u306b\u3064\u3044\u3066\u306e\u5358\u4f4d\u5143 0 \u304c\u4e57\u6cd5\u306e\u96f6\u5143\u306b\u306a\u3063\u3066\u3044\u308b\u3082\u306e\u3067\u3059\u3002\n\n\u3053\u306e\u6761\u4ef6\u3092\u305d\u306e\u307e\u307e\u66f8\u304d\u4e0b\u305b\u3070 Coq \u306b\u304a\u3044\u3066\u3082\u534a\u74b0\u304c\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\n`spec` \u304c **\u534a\u74b0\u3067\u3042\u308b\u3053\u3068** \u3092\u8a18\u8ff0\u3057\u3066\u3044\u308b\u90e8\u5206\u3067\u3059\u3002\n\n```coq:\nModule SemiRing.\n  Class spec (S: Setoid)(add: Binop S)(z: S)(mul: Binop S)(e: S) :=\n    proof {\n        add_monoid: isMonoid add z;\n        add_commute:> Commute add;\n        mul_monoid: isMonoid mul e;\n\n        zero_l:\n          forall a: S, mul z a == z;\n        zero_r:\n          forall a: S, mul a z == z\n      }.\n\n  Structure type :=\n    make {\n        carrier: Setoid;\n\n        add: Binop carrier;\n        z: carrier;\n\n        mul: Binop carrier;\n        e: carrier;\n\n        prf: spec add z mul e\n      }.\n\n  Module Ex.\n    Existing Instance add_monoid.\n    Existing Instance add_commute.\n    Existing Instance mul_monoid.\n    Existing Instance prf.\n\n    Notation isSemiRing := spec.\n    Notation SemiRing := type.\n\n    Coercion add_commute: isSemiRing >-> Commute.\n    Coercion carrier: SemiRing >-> Setoid.\n    Coercion prf: SemiRing >-> isSemiRing.\n\n    Delimit Scope semiring_scope with srng.\n\n    Notation \"x + y\" := (add _ x y): semiring_scope.\n    Notation \"x * y\" := (mul _ x y): semiring_scope.\n    Notation \"'0'\" := (z _): semiring_scope.\n    Notation \"'1'\" := (e _): semiring_scope.\n  End Ex.\n  Import Ex.\nEnd SemiRing.\nExport SemiRing.Ex.\n```\n\n\u6700\u5f8c\u306e\u65b9\u306b\u3042\u308b\u8a18\u6cd5\u306e\u5b9a\u7fa9\u306f\u5927\u5207\u306a\u306e\u3067\u3088\u304f\u898b\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\u3053\u3046\u3044\u3063\u305f\u8a18\u53f7\u306f\u3068\u3066\u3082\u4e71\u7528\u3055\u308c\u308b\u306e\u3067\u3001\u30b9\u30b3\u30fc\u30d7\u3067\u5236\u9650\u3057\u3066\u6642\u3068\u5834\u5408\u306b\u5fdc\u3058\u3066\u4f7f\u3044\u5206\u3051\u3089\u308c\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u30e2\u30ce\u30a4\u30c9\u3067\u3082\u540c\u3058\u3053\u3068\u3092\u3084\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u53c2\u7167\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n# \u8db3\u3057\u7b97\u304b\u3051\u7b97\u306e\u534a\u74b0\n\n\u534a\u74b0\u306e\u5b9a\u7fa9\u3092\u8a18\u8ff0\u3067\u304d\u305f\u306e\u3067\u5b9f\u969b\u306b\u534a\u74b0\u3092\u69cb\u6210\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u4e00\u3064\u76ee\u306f\u308f\u304b\u308a\u3084\u3059\u3044\u4f8b\u3001\u8db3\u3057\u7b97\u3068\u304b\u3051\u7b97\u3067\u3059\u3002\n\n\u8a3c\u660e\u306f\u7701\u7565\u3057\u3066\u3044\u304d\u307e\u3059\u304c\u3001\u3069\u308c\u3082\u7c21\u5358\u306a\u306e\u3067\u5927\u4e08\u592b\u3067\u3059\u3002\n\n\u3068\u308a\u3042\u3048\u305a `Arith` \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\u4ee5\u964d\u3001\u65e2\u306b\u793a\u3055\u308c\u3066\u3044\u308b\u6027\u8cea\u3092\u4f7f\u3048\u3070\u8a3c\u660e\u304c\u697d\u306b\u306a\u308b\u305f\u3081\u3067\u3059(\u7701\u7565\u3057\u307e\u3059\u304c)\u3002\n\n```coq:\nRequire Import Arith.\n```\n\n\u3055\u3066\u3001\u3053\u308c\u304b\u3089\u534a\u74b0\u3092\u69cb\u6210\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n## \u534a\u74b0\u306e\u69cb\u6210\n\n\u307e\u305a\u3001`nat` \u304c `Setoid` \u3067\u3042\u308b\u3053\u3068\u3092\u8ff0\u3079\u3066\u304a\u304d\u307e\u3059\u3002\n\n```coq:\nCanonical Structure nat_setoid := Setoid_of (@eq nat).\n```\n\n\u7b49\u4fa1\u6027\u306f Coq \u304c\u6a19\u6e96\u3067\u63d0\u4f9b\u3057\u3066\u3044\u308b `=` \u3067\u69cb\u3044\u307e\u305b\u3093\u3002\n\n\u6b21\u306b\u3001\u8db3\u3057\u7b97\u304c `nat_setoid` \u4e0a\u306e\u4e8c\u9805\u6f14\u7b97\u3068\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u8ff0\u3079\u307e\u3057\u3087\u3046\u3002\n\u4e00\u822c\u306b\u3001 Setoid \u4e0a\u3067\u306e\u6f14\u7b97\u306f\u7b49\u4fa1\u6027\u306b\u3064\u3044\u3066 well-defined \u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u304b\u3089\u3001\u3053\u306e\u78ba\u8a8d\u306f\u5fc5\u8981\u3067\u3059\u3002\n\u4eca\u56de\u306f\u7b49\u4fa1\u6027\u304c `=` \u306a\u306e\u3067\u3001 `Program` \u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3048\u3070\u8a3c\u660e\u306f\u5927\u4f53 Coq \u304c\u3084\u3063\u3066\u304f\u308c\u307e\u3059\u3002\n\n```coq:\nProgram Instance plus_is_binop: isBinop (X:=nat_setoid) plus.\nCanonical Structure plus_binop := Build_Binop plus_is_binop.\n```\n\n\u305d\u3057\u3066\u3001\u8db3\u3057\u7b97\u304c 0 \u3092\u5358\u4f4d\u5143\u3068\u3059\u308b\u30e2\u30ce\u30a4\u30c9\u3068\u306a\u308b\u3053\u3068\u3092\u4ee5\u4e0b\u3067\u793a\u3057\u307e\u3059\u3002\n\u7701\u7565\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u30e2\u30ce\u30a4\u30c9\u5247\u306b\u5bfe\u5fdc\u3057\u305f\u30b4\u30fc\u30eb\u304c\u4e8c\u3064\u751f\u6210\u3055\u308c\u308b\u306e\u3067\u3001\u8a3c\u660e\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n```coq:\nProgram Instance plus_is_monoid: isMonoid plus_binop 0.\n```\n\n\u304b\u3051\u7b97\u306b\u3064\u3044\u3066\u3082\u540c\u69d8\u306b\u3001\u4e8c\u9805\u6f14\u7b97\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u304b\u3081\u305f\u306e\u3061\u30011 \u3092\u5358\u4f4d\u5143\u3068\u3059\u308b\u30e2\u30ce\u30a4\u30c9\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\n\n```coq:\nProgram Instance mult_is_binop: isBinop (X:=nat_setoid) mult.\nCanonical Structure mult_binop := Build_Binop mult_is_binop.\n\nProgram Instance mult_is_monoid: isMonoid mult_binop 1.\n```\n\n\u3053\u308c\u3067\u534a\u74b0\u3092\u69cb\u6210\u3059\u308b\u6e96\u5099\u304c\u5927\u4f53\u51fa\u6765\u307e\u3057\u305f\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u534a\u74b0\u306e\u5b9a\u7fa9\u3092\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u5927\u4f53\u3001\u3068\u3044\u3046\u306e\u306f\u3001\u534a\u74b0\u306f\u52a0\u6cd5\u306b\u3064\u3044\u3066\u53ef\u63db\u3067\u3059\u306e\u3067\u3001\u6700\u5f8c\u306b\u8db3\u3057\u7b97\u306e\u53ef\u63db\u6027\u306b\u3064\u3044\u3066\u306e\u8a3c\u660e\u304c\u5fc5\u8981\u306b\u306a\u308b\u304b\u3089\u3067\u3059\u3002\n\u3059\u3054\u304f\u7c21\u5358\u306a\u306e\u3067\u7279\u306b\u89e6\u308c\u307e\u305b\u3093(`plus_comm` \u3092 `apply` \u3059\u308a\u3083\u3044\u3044\u3067\u3059)\u3002\n\n```coq:\nProgram Instance plus_mult_is_semiring: isSemiRing plus_binop 0 mult_binop 1.\nCanonical Structure plus_mult_semiring: SemiRing := SemiRing.make plus_mult_is_semiring.\n```\n\n\u3064\u3044\u3067\u306b\u96f6\u5143\u306b\u95a2\u3059\u308b\u8a3c\u660e\u3082\u751f\u3058\u307e\u3059\u304c\u3001\u3053\u308c\u307e\u305f\u7c21\u5358\u306a\u306e\u3067\u7701\u7565\u3067\u3059\u3002\n\n\u3053\u308c\u3067\u3001\u8db3\u3057\u7b97\u3068\u304b\u3051\u7b97\u306e\u306a\u3059\u534a\u74b0\u306e\u69cb\u6210\u304c\u7d42\u308f\u308a\u307e\u3057\u305f\u3002\n\n## \u8a66\u3059\n\n\u4f5c\u3063\u305f\u306e\u3067\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u3061\u3087\u3063\u3068\u3057\u305f\u6e96\u5099\u3068\u3057\u3066\u3001\u6b21\u306e\u7701\u7565\u8a18\u6cd5\u3092\u7528\u610f\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```coq:\nNotation pms := plus_mult_semiring.\n```\n\n\u4ee5\u4e0b\u3067\u5e7e\u3064\u304b\u306e\u8a08\u7b97\u3092\u884c\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u52a0\u6cd5\u3068\u4e57\u6cd5\u304c\u305d\u308c\u305e\u308c\u8db3\u3057\u7b97\u3068\u304b\u3051\u7b97\u306a\u306e\u3067\u3001\u672c\u5f53\u306b\u534a\u74b0\u3068\u3057\u3066\u306e\u8a08\u7b97\u304c\u884c\u306a\u308f\u308c\u3066\u3044\u308b\u306e\u304b\u5fc3\u914d\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u304c\u3001\u8a08\u7b97\u306e\u7d50\u679c\u304c `pms`\u3001\u5148\u7a0b\u5b9a\u7fa9\u3057\u305f\u534a\u74b0\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u3069\u3046\u3084\u3089\u554f\u984c\u306f\u306a\u3055\u305d\u3046\u3067\u3059\u3002\n\n```coq:\nOpen Scope semiring_scope.\n\nCompute (3 + 2).\n     (* = 5 *)\n     (* : pms *)\n\nCompute (3 * 2).\n     (* = 6 *)\n     (* : pms *)\n\nCompute (0 + 4).\n     (* = 4 *)\n     (* : pms *)\n\nCompute (0 * 4).\n     (* = 0 *)\n     (* : pms *)\n```\n\n# \u6700\u5c0f\u5024\u3068\u8db3\u3057\u7b97\u306e\u534a\u74b0\n\n\u4e8c\u3064\u76ee\u306e\u4f8b\u306f\u3001\u6700\u5c0f\u5024\u3092\u53d6\u308b\u6f14\u7b97\u3092\u52a0\u6cd5\u3001\u8db3\u3057\u7b97\u3092\u4e57\u6cd5\u3068\u3057\u305f\u534a\u74b0\u3067\u3059\u3002\nmin-plus \u4ee3\u6570\u3068\u304b\u30c8\u30ed\u30d4\u30ab\u30eb\u534a\u74b0\u3068\u304b\u547c\u3070\u308c\u308b\u69cb\u9020\u3067\u3059\u3002\n\n\u3053\u306e\u6642\u5229\u7528\u3059\u308b\u306e\u306f\u901a\u5e38\u306e\u81ea\u7136\u6570\u3067\u306f\u306a\u304f\u3001\u81ea\u7136\u6570\u306b \u221e \u3092\u52a0\u3048\u305f\u69cb\u9020\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\u3067\u3059\u306e\u3067\u3001\u307e\u305a\u306f\u3053\u308c\u3092\u8868\u3059\u578b\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u3087\u3046\u3002\n\n```coq:\nInductive nat_inf :=\n| num: nat -> nat_inf\n| inf: nat_inf.\n\nNotation \"! n\" := (num n) (at level 0).\n```\n\n`nat_inf` \u306f `inf` \u3068\u3044\u3046\u65b0\u305f\u306a\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u3001\u901a\u5e38\u306e\u81ea\u7136\u6570\u3092\u30e9\u30c3\u30d7\u3059\u308b `num` \u3068\u3044\u3046\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304b\u3089\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u306f `option nat` \u3068\u540c\u578b\u306a\u306e\u3067\u3059\u304c\u3001\u305d\u306e\u307e\u307e `option nat` \u3092\u4f7f\u3063\u3066\u3057\u307e\u3046\u3068\u5b9f\u969b\u306b\u8a08\u7b97\u3092\u884c\u3046\u3068\u304d\u306b\u3061\u3087\u3063\u3068\u9762\u5012\u306a\u3053\u3068\u306b\u306a\u308b\u306e\u3067\u3001\u3053\u306e\u3088\u3046\u306b\u65b0\u305f\u306a\u578b\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\u305d\u306e\u9762\u5012\u306e\u8aac\u660e\u306f\u3053\u3053\u3067\u306f\u5272\u611b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u3068\u308a\u3042\u3048\u305a\u3001\u30bf\u30a4\u30d7\u91cf\u304c\u5897\u3048\u3066\u898b\u305f\u76ee\u304c\u60aa\u304f\u306a\u308b\u306e\u3067\u3059\u3002\n\n\u307e\u305f\u3001\u8a18\u6cd5\u3092\u7c21\u7565\u5316\u3059\u308b\u305f\u3081\u306b `!n` \u3067 `num n` \u3092\u8868\u305b\u308b\u3088\u3046\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n## \u6f14\u7b97\u306e\u5b9a\u7fa9\n\n\u307e\u305a\u306f\u6700\u5c0f\u5024\u3068\u8db3\u3057\u7b97\u306e\u5b9a\u7fa9\u3067\u3059\u3002\n`nat` \u3092\u62e1\u5f35\u3057\u3066 `nat_inf` \u3092\u4f5c\u3063\u305f\u306e\u3067\u3001`min` \u3068 `plus` \u3082\u305d\u308c\u306b\u5408\u308f\u305b\u3066\u62e1\u5f35\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u8003\u3048\u308b\u3079\u304d\u3068\u3053\u308d\u306f `inf` \u304c\u95a2\u308f\u308b\u5834\u5408\u306e\u307f\u3067\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u5143\u306e\u6f14\u7b97\u3092\u4f7f\u3048\u3070\u3088\u3044\u3067\u3059\u3002\n\n```coq:\nRequire Import Min.\n\nDefinition min_inf (n m: nat_inf): nat_inf :=\n  match n, m with\n  | inf, _ => m\n  | _, inf => n\n  | !n, !m => !(min n m)\n  end.\n\nDefinition plus_inf (n m: nat_inf): nat_inf :=\n  match n, m with\n  | inf, _ | _, inf => inf\n  | !n, !m => !(plus n m)\n  end.\n```\n\n## \u534a\u74b0\u306e\u69cb\u6210\n\n\u6f14\u7b97\u3092\u5b9a\u7fa9\u3057\u305f\u306e\u3067\u3001\u524d\u306e\u4f8b\u3068\u540c\u69d8\u306e\u6d41\u308c\u3067\u534a\u74b0\u69cb\u9020\u3092\u4e0e\u3048\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u307e\u305a\u3001 `nat_inf` \u3092\u901a\u5e38\u306e `=` \u3067 `Setoid` \u3068\u898b\u505a\u3057\u307e\u3059\u3002\n\n```coq:\nCanonical Structure nat_inf_setoid := Setoid_of (@eq nat_inf).\n```\n\n\u6b21\u306b\u3001 `min_inf`\u3001\u6700\u5c0f\u5024\u6f14\u7b97\u304c\u4e8c\u9805\u6f14\u7b97\u3067\u3042\u308a\u3001 `inf` \u3092\u5358\u4f4d\u5143\u3068\u3059\u308b\u30e2\u30ce\u30a4\u30c9\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\n\n```coq:\nProgram Instance min_inf_is_binop: isBinop (X:=nat_inf_setoid) min_inf.\nCanonical Structure min_inf_binop := Build_Binop min_inf_is_binop.\n\nProgram Instance min_inf_is_monoid: isMonoid min_inf_binop inf.\n```\n\n\u307e\u305f\u3001 `plus_inf` \u3082\u4e8c\u9805\u6f14\u7b97\u3067\u3042\u308a\u3001 `!0` \u3092\u5358\u4f4d\u5143\u3068\u3059\u308b\u30e2\u30ce\u30a4\u30c9\u3067\u3059\u3002\n\n```coq:\nProgram Instance plus_inf_is_binop: isBinop (X:=nat_inf_setoid) plus_inf.\nCanonical Structure plus_inf_binop := Build_Binop plus_inf_is_binop.\n\nProgram Instance plus_inf_is_monoid: isMonoid plus_inf_binop !0.\n```\n\n\u4ee5\u4e0a\u306e\u4e8b\u5b9f\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u6700\u5c0f\u5024\u3068\u8db3\u3057\u7b97\u306b\u3088\u308b\u534a\u74b0\u304c\u69cb\u6210\u3067\u304d\u307e\u3057\u305f\u3002\n\n```coq:\nProgram Instance min_plus_is_semiring: isSemiRing min_inf_binop inf plus_inf_binop !0.\nCanonical Structure min_plus_semiring := SemiRing.make min_plus_is_semiring.\n```\n\n## \u8a66\u3059\n\n\u305b\u3063\u304b\u304f\u69cb\u6210\u3057\u305f\u306e\u3067\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u524d\u56de\u540c\u69d8\u306b\u7701\u7565\u8a18\u6cd5\u3092\u5c0e\u5165\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```coq:\nNotation mps := min_plus_semiring.\n```\n\n\u305d\u3057\u3066\u3001\u4ee5\u4e0b\u304c\u8a08\u7b97\u7d50\u679c\u305f\u3061\u3067\u3059\u3002\n`+` \u304c\u6700\u5c0f\u5024\u306b\u3001 `*` \u304c\u8db3\u3057\u7b97\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u307e\u305f\u3001 `inf` \u3082\u4e0a\u624b\u304f\u6a5f\u80fd\u3057\u3066\u3044\u308b\u3053\u3068\u3082\u308f\u304b\u308a\u307e\u3059\u3002\n\n```coq:\nOpen Scope semiring_scope.\n\nCompute (!3 + !2).\n     (* = !(2) *)\n     (* : mps *)\n\nCompute (!3 * !2).\n     (* = !(5) *)\n     (* : mps *)\n\nCompute (!1 + !2).\n     (* = !(1) *)\n     (* : mps *)\n\nCompute (!1 * !2).\n     (* = !(3) *)\n     (* : mps *)\n\nCompute (inf + !4).\n     (* = !(4) *)\n     (* : mps *)\n\nCompute (inf * !4).\n     (* = inf *)\n     (* : mps *)\n\nCompute (!0 + inf).\n     (* = !(0) *)\n     (* : mps *)\n\nCompute (!0 * inf).\n     (* = inf *)\n     (* : mps *)\n```\n\n# \u307e\u3068\u3081\n\nCoq \u3067\u534a\u74b0\u3092\u5b9a\u7fa9\u3057\u3066\u3001\u5b9f\u4f8b\u3092\u4e8c\u3064\u69cb\u6210\u3057\u3066\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u306a\u304a\u3001\u3053\u306e\u4e8c\u3064\u306e\u534a\u74b0\u306f\u4f75\u7528(\u3068\u3044\u3046\u304b\u3001\u8db3\u3057\u7b97\u304b\u3051\u7b97\u306e\u534a\u74b0\u306e\u8a08\u7b97\u7d50\u679c\u3092\u6700\u5c0f\u5024\u8db3\u3057\u7b97\u306e\u534a\u74b0\u306b\u6d41\u7528)\u3067\u304d\u307e\u3059\u3002\n\n\u3053\u3093\u306a\u611f\u3058\u306b\u8272\u3005\u9762\u767d\u3044\u8a08\u7b97\u304c\u66f8\u3051\u305d\u3046\u3067\u3059\u306d\u3002\n\n```coq:\nCompute (!(5 + 2) + !6).\n     (* = !(6) *)\n     (* : mps *)\n\nCompute (inf * !(3 + 1)).\n     (* = inf *)\n     (* : mps *)\n```\n\n\u305f\u3060\u3057\u3001\u8db3\u3057\u7b97\u304b\u3051\u7b97\u306e\u534a\u74b0\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u306a\u304f\u3066\u3082\u540c\u3058\u3082\u306e\u304c\u66f8\u3051\u307e\u3059\u3002\n\n# \u304a\u307e\u3051\n\nCoercion \u3092\u4f7f\u3046\u3053\u3068\u3067 '!' \u3092\u3064\u3051\u305a\u306b\u66f8\u304f\u3053\u3068\u304c\u3001\u6982\u306d\u3001\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u4f8b\u3092\u898b\u308c\u3070\u300c\u6982\u306d\u300d\u306e\u610f\u5473\u3082\u308f\u304b\u308b\u3053\u3068\u3067\u3057\u3087\u3046\u3002\n\n```coq:\nCoercion num: nat >-> nat_inf.\n\nNotation \"x '|' X\" := (x:X) (at level 15, no associativity, format \"x '|' X\").\n\nCompute (!3 + 2).\n     (* = !(2) *)\n     (* : mps *)\n\nFail Compute (3 * !2).\n\nCompute (3|mps * 2).\n     (* = !(5) *)\n     (* : mps *)\n\nCompute (1|mps + inf).\n     (* = !(2) *)\n     (* : mps *)\n\nCompute (inf * 0).\n     (* = inf *)\n     (* : mps *)\n\nCompute ((4 * 3)|mps + inf).\n     (* = !(12) *)\n     (* : mps *)\n\nCompute (0 + (4 * 3)).\n     (* = 12 *)\n     (* : pms *)\n```\n\n`+` \u3084 `*` \u304c\u3069\u306e\u534a\u74b0\u3067\u306e\u6f14\u7b97\u306a\u306e\u304b\u306f\u7b2c\u4e00\u5f15\u6570\u3067\u63a8\u8ad6\u3055\u308c\u307e\u3059\u3002\n\u3086\u3048\u306b\u3001\u7b2c\u4e00\u5f15\u6570\u304c\u6570\u306e\u5834\u5408\u3001pms \u4e0a\u306e\u6f14\u7b97\u3068\u898b\u505a\u3055\u308c\u3066\u3057\u307e\u3046\u305f\u3081\u306b\u3001\u7b2c\u4e8c\u5f15\u6570\u304c `mps` \u306e\u6570\u3060\u3068\u578b\u304c\u5408\u308f\u306a\u3044\u3068\u3044\u3046\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\u3067\u3059\u304b\u3089\u3001\u7b2c\u4e00\u5f15\u6570\u304c `inf` \u306a\u3089\u305d\u3046\u3044\u3046\u5fc3\u914d\u306f\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u5927\u62b5\u306e\u5834\u5408 `mps` \u3060\u3068\u660e\u793a\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\u7d50\u5c40\u3001 `!` \u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u3088\u3044\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308b\u306e\u3067\u3059\u306d\u3002\n\n\u3061\u306a\u307f\u306b `x|X` \u3068\u3044\u3046\u306e\u306f `x:X` \u306e\u7d50\u5408\u5ea6\u3092\u4e0a\u3052\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\n\u305d\u3046\u3057\u306a\u3044\u3068\u3001 `3|mps * 2` \u3092 `(3:mps) * 2` \u3068\u66f8\u304b\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u304f\u306a\u308a\u307e\u3059\u3002\n\n", "tags": ["Coq"]}