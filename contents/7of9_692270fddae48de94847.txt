{"context": "\n\u52d5\u4f5c\u74b0\u5883\nGeForce GTX 1070 (8GB)\nASRock Z170M Pro4S [Intel Z170chipset]\nUbuntu 14.04 LTS desktop amd64\nTensorFlow v0.11\ncuDNN v5.1 for Linux\nCUDA v8.0\nPython 2.7.6\nIPython 5.1.0 -- An enhanced Interactive Python.\n\n\npython\u306e\u30b3\u30fc\u30c9\u3092\u9014\u4e2d\u3067\u6b62\u3081\u305f\u304b\u3063\u305f\u3002\nJupyter\u3092\u4f7f\u3063\u3066\u9010\u6b21\u5b9f\u884c\u3067\u3082\u826f\u304b\u3063\u305f\u304c\u3001script\u3067\u6b62\u3081\u308b\u65b9\u6cd5\u3092\u8abf\u3079\u305f\u3002\n\u53c2\u8003 http://stackoverflow.com/questions/179369/how-do-i-abort-the-execution-of-a-python-script\n\nimport sys\nsys.exit()\n\n\u4ee5\u4e0b\u306fTensorFlow\u3068\u3044\u3046Deep Learning\u7528\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3002\nprint(input_ph.get_shape())\u306e\u6b21\u3067\u7d42\u4e86\u3057\u305f\u304b\u3063\u305f\u3002\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nimport tensorflow as tf\nimport tensorflow.contrib.slim as slim\n\n# \u30d5\u30a1\u30a4\u30eb\u540d\u306e Queue \u3092\u4f5c\u6210\nfilename_queue = tf.train.string_input_producer([\"input.csv\"])\n\n# CSV \u3092 parse\nreader = tf.TextLineReader()\nkey, value = reader.read(filename_queue)\ninput1, output = tf.decode_csv(value, record_defaults=[[0.], [0.]])\ninputs = tf.pack([input1])\noutput = tf.pack([output])\n\nbatch_size=4 # [4]\ninputs_batch, output_batch = tf.train.shuffle_batch([inputs, output], batch_size, capacity=40, min_after_dequeue=batch_size)\n\ninput_ph = tf.placeholder(\"float\", [None,1])\noutput_ph = tf.placeholder(\"float\",[None,1])\n\n#if 1 // debug\nprint(input_ph.get_shape())\nsys.exit()\n#endif\n\n## NN \u306e\u30b0\u30e9\u30d5\u751f\u6210\nhiddens = slim.stack(input_ph, slim.fully_connected, [1,7,7,7], \n  activation_fn=tf.nn.sigmoid, scope=\"hidden\")\nprediction = slim.fully_connected(hiddens, 1, activation_fn=tf.nn.sigmoid, scope=\"output\")\nloss = tf.contrib.losses.mean_squared_error(prediction, output_ph)\n\n#train_op = slim.learning.create_train_op(loss, tf.train.AdamOptimizer(0.01))\ntrain_op = slim.learning.create_train_op(loss, tf.train.AdamOptimizer(0.001))\n\ndef feed_dict(inputs, output):\n    return {input_ph: inputs.eval(), output_ph: output.eval()}\n\ninit_op = tf.initialize_all_variables()\n\nwith tf.Session() as sess:\n  coord = tf.train.Coordinator()\n  threads = tf.train.start_queue_runners(sess=sess, coord=coord)\n\n  try:\n    sess.run(init_op)\n    for i in range(30000): #[10000]\n      _, t_loss = sess.run([train_op, loss], feed_dict=feed_dict(inputs_batch, output_batch))\n      if (i+1) % 100 == 0:\n        print(\"%d,%f\" % (i+1, t_loss))\n#        print(\"%d,%f,#step, loss\" % (i+1, t_loss))\n  finally:\n    coord.request_stop()\n\n  coord.join(threads)\n\n\n\u7d50\u679c\n$ python linreg2_feeddict.py \nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcublas.so locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcudnn.so locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcufft.so locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcuda.so.1 locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcurand.so locally\n(?, 1)\n\n\n```txt:\u52d5\u4f5c\u74b0\u5883\nGeForce GTX 1070 (8GB)\nASRock Z170M Pro4S [Intel Z170chipset]\nUbuntu 14.04 LTS desktop amd64\nTensorFlow v0.11\ncuDNN v5.1 for Linux\nCUDA v8.0\nPython 2.7.6\nIPython 5.1.0 -- An enhanced Interactive Python.\n```\n\npython\u306e\u30b3\u30fc\u30c9\u3092\u9014\u4e2d\u3067\u6b62\u3081\u305f\u304b\u3063\u305f\u3002\nJupyter\u3092\u4f7f\u3063\u3066\u9010\u6b21\u5b9f\u884c\u3067\u3082\u826f\u304b\u3063\u305f\u304c\u3001script\u3067\u6b62\u3081\u308b\u65b9\u6cd5\u3092\u8abf\u3079\u305f\u3002\n\n\u53c2\u8003 http://stackoverflow.com/questions/179369/how-do-i-abort-the-execution-of-a-python-script\n\n- import sys\n- sys.exit()\n\n\u4ee5\u4e0b\u306fTensorFlow\u3068\u3044\u3046Deep Learning\u7528\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3002\n`print(input_ph.get_shape())`\u306e\u6b21\u3067\u7d42\u4e86\u3057\u305f\u304b\u3063\u305f\u3002\n\n```py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nimport tensorflow as tf\nimport tensorflow.contrib.slim as slim\n\n# \u30d5\u30a1\u30a4\u30eb\u540d\u306e Queue \u3092\u4f5c\u6210\nfilename_queue = tf.train.string_input_producer([\"input.csv\"])\n\n# CSV \u3092 parse\nreader = tf.TextLineReader()\nkey, value = reader.read(filename_queue)\ninput1, output = tf.decode_csv(value, record_defaults=[[0.], [0.]])\ninputs = tf.pack([input1])\noutput = tf.pack([output])\n\nbatch_size=4 # [4]\ninputs_batch, output_batch = tf.train.shuffle_batch([inputs, output], batch_size, capacity=40, min_after_dequeue=batch_size)\n\ninput_ph = tf.placeholder(\"float\", [None,1])\noutput_ph = tf.placeholder(\"float\",[None,1])\n\n#if 1 // debug\nprint(input_ph.get_shape())\nsys.exit()\n#endif\n\n## NN \u306e\u30b0\u30e9\u30d5\u751f\u6210\nhiddens = slim.stack(input_ph, slim.fully_connected, [1,7,7,7], \n  activation_fn=tf.nn.sigmoid, scope=\"hidden\")\nprediction = slim.fully_connected(hiddens, 1, activation_fn=tf.nn.sigmoid, scope=\"output\")\nloss = tf.contrib.losses.mean_squared_error(prediction, output_ph)\n\n#train_op = slim.learning.create_train_op(loss, tf.train.AdamOptimizer(0.01))\ntrain_op = slim.learning.create_train_op(loss, tf.train.AdamOptimizer(0.001))\n\ndef feed_dict(inputs, output):\n    return {input_ph: inputs.eval(), output_ph: output.eval()}\n\ninit_op = tf.initialize_all_variables()\n\nwith tf.Session() as sess:\n  coord = tf.train.Coordinator()\n  threads = tf.train.start_queue_runners(sess=sess, coord=coord)\n\n  try:\n    sess.run(init_op)\n    for i in range(30000): #[10000]\n      _, t_loss = sess.run([train_op, loss], feed_dict=feed_dict(inputs_batch, output_batch))\n      if (i+1) % 100 == 0:\n        print(\"%d,%f\" % (i+1, t_loss))\n#        print(\"%d,%f,#step, loss\" % (i+1, t_loss))\n  finally:\n    coord.request_stop()\n\n  coord.join(threads)\n```\n\n```txt:\u7d50\u679c\n$ python linreg2_feeddict.py \nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcublas.so locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcudnn.so locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcufft.so locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcuda.so.1 locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcurand.so locally\n(?, 1)\n```\n", "tags": ["Python", "borgWarp"]}