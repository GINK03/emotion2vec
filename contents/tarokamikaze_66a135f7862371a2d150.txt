{"context": "\u3053\u3093\u306b\u3061\u306f\u3002\u306f\u3058\u3081\u307e\u3057\u3066\u3002tarokamikaze\u3067\u3059\u3002\nPHPUnit \u3092\u66f8\u3044\u3066\u3044\u308b\u3068\u3001\u4f55\u5ea6\u3082\u540c\u3058\u51e6\u7406\u5185\u5bb9\u3084Assert\u304c\u51fa\u3066\u304f\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u304b? \n\u30c6\u30b9\u30c8\u304c\u5197\u9577\u3067\u3001\u3044\u3084\u306b\u306a\u3063\u3061\u3083\u3044\u307e\u3059\u306d\u3002\n\u3088\u308d\u3057\u3044\u3001\u306a\u3089\u3070\u30ea\u30d5\u30a1\u30af\u30bf\u3060\u3002\n\n\u5197\u9577\u3067\u3044\u3084\u306b\u306a\u308b\u4f8b\n/**\n * REST API \u7528\u306e\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u304c\u3044\u3063\u3071\u3044\u3042\u308b\u3068\u601d\u3063\u3066\u304f\u3060\u3055\u3044\n */\nclass RestApiTest extends \\PHPUnit_Framework_TestCase\n{\n    public function test_getFoo()\n    {\n        // json\u3067\u51fa\u529b\u3055\u308c\u3066\u6b32\u3057\u3044\u30ad\u30fc\n        $expectedColumns = ['id', 'name', 'foo'];\n\n\u3000      $json = ...// \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u3092\u53e9\u3044\u3066\u3001json\u3092\u53d6\u308a\u51fa\u3059\n\n        /** \u3053\u3053\u304b\u3089\u5171\u901a\u51e6\u7406 **/\n        // json\u3092\u914d\u5217\u306bdecode\u3057\u3066\u3001\u30ad\u30fc\u304c\u4e00\u81f4\u3059\u308b\u304b\u78ba\u8a8d\u3059\u308b\n        $data = json_decode($json, true);\n        $this->assertTrue(is_array($data));\n        $keys = array_keys($data);\n        // json hash \u306f\u672c\u8cea\u7684\u306b\u30ab\u30e9\u30e0\u9806\u3092\u4fdd\u8a3c\u3057\u306a\u3044\u306e\u3067\n        // \u30bd\u30fc\u30c8\u3057\u305f\u3046\u3048\u3067\u30ad\u30fc\u306e\u4e00\u81f4\u30c1\u30a7\u30c3\u30af\u3092\u3057\u306a\u3044\u3068\u30c0\u30e1\n        sort($keys); \n        sort($expectedColumns);\n        $this->assertEquals($expectedColumns, $keys);\n        /** \u3053\u3053\u307e\u3067\u5171\u901a\u51e6\u7406 **/\n    }\n}\n\n\u3072\u3068\u76ee\u3067\u306a\u306b\u3092\u3084\u3063\u3066\u3044\u308b\u306e\u304b\u308f\u304b\u308a\u307e\u3059\u3002\n\u304c\u3001\u3053\u306e\u5148\u30b3\u30d4\u30da\u5730\u7344\u304c\u5f85\u3063\u3066\u3044\u307e\u3059\u306d\u3002\n\n\u5171\u901a\u51e6\u7406\u3092\u57fa\u5e95\u30af\u30e9\u30b9\u306b\u9003\u304c\u3057\u3066\u307f\u308b\n\u8ab0\u3067\u3082\u601d\u3044\u3064\u304f\u624b\u306f\u300cextends\u3059\u308c\u3070\u3044\u30fc\u3058\u3083\u3093\u300d\u3068\u3044\u3046\u3082\u306e\u3002\n/**\n * \u5171\u901a\u30c6\u30b9\u30c8\u7528\u57fa\u5e95\u30af\u30e9\u30b9\n */\nabstract class BaseRestApiTest extends \\PHPUnit_Framework_TestCase\n{\n    public static function assertJsonColumns(array $expectedColumns, $json)\n    {\n        // \u914d\u5217\u306bdecode\u3057\u3066\u3001\u30ad\u30fc\u304c\u4e00\u81f4\u3059\u308b\u304b\u78ba\u8a8d\u3059\u308b\n        $data = json_decode($json, true);\n        self::assertTrue(is_array($data));\n        $keys = array_keys($data);\n        sort($keys); // json hash \u306f\u672c\u8cea\u7684\u306b\u30ab\u30e9\u30e0\u9806\u306e\u4fdd\u8a3c\u304c\u306a\u3044\u306e\u3067\u3001\u30bd\u30fc\u30c8\u3057\u305f\u3046\u3048\u3067\u30ad\u30fc\u306e\u4e00\u81f4\u30c1\u30a7\u30c3\u30af\u3092\u3057\u306a\u3044\u3068\u30c0\u30e1\n        sort($expectedColumns);\n        self::assertEquals($expectedColumns, $keys);\n    }\n}\n\nclass RestApiTest extends BaseRestApiTest\n{\n    public function test_getFoo()\n    {\n        // json\u3067\u51fa\u529b\u3055\u308c\u3066\u6b32\u3057\u3044\u30ad\u30fc\n        $expectedColumns = ['id', 'name', 'foo'];\n\n\u3000      $json = ...// \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u3092\u53e9\u3044\u3066\u3001json\u3092\u53d6\u308a\u51fa\u3059\n        // \u57fa\u5e95\u30af\u30e9\u30b9\u306b\u9003\u304c\u3057\u305f\u5171\u901a\u51e6\u7406\u3092\u53e9\u304f\n        $this->assertJsonColumns($expectedColumns, $json);\n    }\n}\n\n\u3053\u308c\u306f\u3053\u308c\u306f\u3002\u304a\u624b\u8efd\u3067\u3059\u306d\u3002\n\u3057\u304b\u3057\u3001\u3053\u306e\u30ce\u30ea\u3067\u8907\u6570\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u3044\u3063\u3066\u3057\u307e\u3046\u3068\n\u8ff7\u5b50\u306b\u306a\u3063\u305f\u308a\u591a\u91cd\u7d99\u627f\u554f\u984c\u306b\u7a81\u304d\u5f53\u305f\u3063\u305f\u308a\u57fa\u5e95\u30af\u30e9\u30b9\u304c\u80a5\u5927\u5316\u3057\u305f\u308a\u3068\n\u3044\u3044\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u30aa\u30ec\u30aa\u30ec\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u307f\u308b\n\u5b9f\u306f\u3001Assert\u3059\u308b\u3060\u3051\u306e\u30af\u30e9\u30b9\u3092\u4f5c\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3093\u3067\u3059\u3002\n\u500b\u4eba\u7684\u306b\u306f\u4e00\u756a\u597d\u304d\u306a\u3084\u308a\u65b9\u3002\n/**\n * \u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u5c02\u7528\u30af\u30e9\u30b9\u3002\n * \u30c6\u30b9\u30c8\u672c\u4f53\u3067\u3082\u306a\u3044\u30af\u30e9\u30b9\u304cTestCase\u3092\u7d99\u627f\u3059\u308b\u306e\u304c\u30ad\u30e2\u3044\u306e\u3067\n * PHPUnit_Framework_Assert\u3092\u7d99\u627f\u3059\u308b\u3002\n */\nclass JsonColumnAssert extends \\PHPUnit_Framework_Assert\n{\n    public static function assert(array $expectedColumns, $json)\n    {\n        // \u914d\u5217\u306bdecode\u3057\u3066\u3001\u30ad\u30fc\u304c\u4e00\u81f4\u3059\u308b\u304b\u78ba\u8a8d\u3059\u308b\n        $data = json_decode($json, true);\n        self::assertTrue(is_array($data));\n        $keys = array_keys($data);\n        sort($keys); // json hash \u306f\u672c\u8cea\u7684\u306b\u30ab\u30e9\u30e0\u9806\u306e\u4fdd\u8a3c\u304c\u306a\u3044\u306e\u3067\u3001\u30bd\u30fc\u30c8\u3057\u305f\u3046\u3048\u3067\u30ad\u30fc\u306e\u4e00\u81f4\u30c1\u30a7\u30c3\u30af\u3092\u3057\u306a\u3044\u3068\u30c0\u30e1\n        sort($expectedColumns);\n        self::assertEquals($expectedColumns, $keys);\n    }\n}\nclass RestApiTest extends BaseRestApiTest\n{\n    public function test_getFoo()\n    {\n        // json\u3067\u51fa\u529b\u3055\u308c\u3066\u6b32\u3057\u3044\u30ad\u30fc\n        $expectedColumns = ['id', 'name', 'foo'];\n\n\u3000      $json = ...// \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u3092\u53e9\u3044\u3066\u3001json\u3092\u53d6\u308a\u51fa\u3059\n        // \u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u5c02\u7528\u30af\u30e9\u30b9\u306b\u9003\u304c\u3057\u305f\u5171\u901a\u51e6\u7406\u3092\u53e9\u304f\n\u3000      JsonColumnAssert::assert($expectedColumns, $json);\n    }\n}\n\n\u5358\u4e00\u8cac\u4efb\u539f\u5247\u3067\u3059\u3002\u3044\u3044\u304b\u3093\u3058\u3002\n\u3042\u307e\u308a\u898b\u306a\u3044\u5f62\u306a\u306e\u3067\u3001\u898b\u6163\u308c\u306a\u3044\u3072\u3068\u306f\u8ff7\u3046\u304b\u3082\u3002\u3067\u3082\u6163\u308c\u308b\u3068\u5feb\u611f\u3002\n\n\u304a\u307e\u3051: \u30aa\u30ec\u30aa\u30ec\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u30af\u30e9\u30b9\u3092\u6f54\u7656\u306b\u4f5c\u308d\u3046\u3068\u3057\u3066\u5fc3\u304c\u6298\u308c\u305f\n\u30aa\u30ec\u306fextends\u3068\u304b\u30ad\u30e9\u30a4\u306a\u3093\u3060\u3088\uff01\u3068\u3044\u3046\u6f54\u7656\u306a\u304a\u65b9\u306e\u305f\u3081\u306e\n\u4f55\u306b\u3082\u4f9d\u5b58\u3057\u306a\u3044\u30c6\u30b9\u30c8\u306f\u3053\u3061\u3089\u3002\n\u305d\u3082\u305d\u3082\u300c\u30c6\u30b9\u30c8\u5931\u6557\u300d\u3092PHPUnit\u306f\u3069\u3046\u8868\u73fe\u3057\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\n\u30bd\u30fc\u30b9\u3092\u898b\u308b\u9650\u308a\u3001PHPUnit_Framework_AssertionFailedError \u3092\n\u6295\u3052\u3066\u3044\u308b\u306b\u904e\u304e\u307e\u305b\u3093\u3002\n// vendor/phpunit/phpunit/src/Framework/Assert.php\nabstract class PHPUnit_Framework_Assert\n{\n    /** \u7565 **/\n    public static function fail($message = '')\n    {\n        throw new PHPUnit_Framework_AssertionFailedError($message);\n    }\n    /** \u7565 **/\n}\n\n\u3068\u3044\u3046\u3053\u3068\u306f\u3001\u30aa\u30ec\u30aa\u30ec\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u3067\u3001\u3053\u306e\u30a8\u30e9\u30fc\u3092\u6295\u3052\u308c\u3070\n\u5931\u6557\u3068\u5224\u65ad\u3057\u3066\u304f\u308c\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u3059\uff01\n/**\n * \u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u5c02\u7528\u30af\u30e9\u30b9\u3002\n * \u306a\u306b\u3082extends\u3057\u306a\u3044\uff01\n */\nclass JsonColumnAssert\n{\n    public static function assert(array $expectedColumns, $json)\n    {\n        // \u914d\u5217\u306bdecode\u3057\u3066\u3001\u30ad\u30fc\u304c\u4e00\u81f4\u3059\u308b\u304b\u78ba\u8a8d\u3059\u308b\n        $data = json_decode($json, true);\n        if(!is_array($data)){\n            throw new \\PHPUnit_Framework_AssertionFailedError('json\u3058\u3083\u306a\u3044\u3067\u3059\u3088');\n        }\n        $keys = array_keys($data);\n        sort($keys); // json hash \u306f\u672c\u8cea\u7684\u306b\u30ab\u30e9\u30e0\u9806\u306e\u4fdd\u8a3c\u304c\u306a\u3044\u306e\u3067\u3001\u30bd\u30fc\u30c8\u3057\u305f\u3046\u3048\u3067\u30ad\u30fc\u306e\u4e00\u81f4\u30c1\u30a7\u30c3\u30af\u3092\u3057\u306a\u3044\u3068\u30c0\u30e1\n        sort($expectedColumns);\n        if($expectedColumns !== $keys){\n            throw new \\PHPUnit_Framework_AssertionFailedError('\u4e00\u81f4\u3057\u307e\u305b\u3093\u3088');\n        }\n    }\n}\nclass RestApiTest extends BaseRestApiTest\n{\n    public function test_getFoo()\n    {\n        // json\u3067\u51fa\u529b\u3055\u308c\u3066\u6b32\u3057\u3044\u30ad\u30fc\n        $expectedColumns = ['id', 'name', 'foo'];\n\n\u3000      $json = ...// \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u3092\u53e9\u3044\u3066\u3001json\u3092\u53d6\u308a\u51fa\u3059\n        // \u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u5c02\u7528\u30af\u30e9\u30b9\u306b\u9003\u304c\u3057\u305f\u5171\u901a\u51e6\u7406\u3092\u53e9\u304f\n\u3000      JsonColumnAssert::assert($expectedColumns, $json);\n    }\n}\n\n\u3053\u308c\u3060\u3068\u3001\u5931\u6557\u6642\u306f\u3044\u3044\u611f\u3058\u306bfail \u306b\u306a\u3063\u3066\u304f\u308c\u307e\u3059\uff01\u3000\n\n\u3057\u304b\u3057...\nPHPUnit 5.2.12 by Sebastian Bergmann and contributors.\n\n\n\u4e00\u81f4\u3057\u307e\u305b\u3093\u3088\n ***/RestApiTest.php:21\n ***/RestApiTest.php:44\n\nTime: 56 ms, Memory: 6.00Mb\n\n\nFAILURES!\nTests: 1, Assertions: 0, Failures: 1.\n\nAssertions: 0...\u3060\u3068...?\n\u305d\u3046\u3001Assertion\u3092\u6570\u3048\u308b\u6a5f\u80fd\u304c\u52b9\u304d\u307e\u305b\u3093\u3002\nAssertion\u3092\u6570\u3048\u308b\u6a5f\u80fd\u306f\uff08\u304a\u305d\u3089\u304f\uff09\u3053\u3053\u3067\u3084\u3063\u3066\u307e\u3059\u3002\n// vendor/phpunit/phpunit/src/Framework/Assert.php\nabstract class PHPUnit_Framework_Assert\n{\n    private static $count = 0;\n    /** \u7565 **/\n    public static function assertThat($value, PHPUnit_Framework_Constraint $constraint, $message = '')\n    {\n        self::$count += count($constraint);\n\n        $constraint->evaluate($value, $message);\n    }\n    /** \u7565 **/\n}\n\n\u3053\u306eassertThat\u306f\u3001\u3059\u3079\u3066\u306eassert***\u30e1\u30bd\u30c3\u30c9\u3092\u53e9\u304f\u3068\u304d\u306b\u901a\u308b\u3082\u306e\u3067\u3059\u3002\ncount\u3092\u8db3\u3057\u4e0a\u3052\u3066\u307e\u3059\u306d\u3002\nphpunit\u30b3\u30de\u30f3\u30c9\u3092\u53e9\u3044\u305f\u6642\u306e\u300cAssertions\u300d\u306f\u3001\u3053\u3053\u3092\u53c2\u7167\u3057\u3066\u3044\u308b\u3082\u306e\u3068\u4e88\u60f3\u3055\u308c\u307e\u3059\u3002\n\u3057\u304b\u3057private static\u306a\u30d7\u30ed\u30d1\u30c6\u30a3\u306a\u306e\u3067\u3001\u3053\u3044\u3064\u3092\u5916\u90e8\u304b\u3089\u3044\u3058\u308b\u306e\u306f\u4e00\u82e6\u52b4\u3067\u3059\u306d\u3002\n\u305d\u308c\u3060\u3063\u305f\u3089\u3001\u7d20\u76f4\u306bPHPUnit_Framework_Assert\u3092\u7d99\u627f\u3057\u305f\u307b\u3046\u304c\n\u697d\u3067\u8aad\u307f\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u5099\u8003\n1\u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u306b\u3044\u304f\u3064\u3082assert\u3092\u66f8\u304f\u306a\u6559\u56e3\u304c\u3042\u308b\u3089\u3057\u3044\u3067\u3059\u306d\u3002\n\u308f\u305f\u3057\u306f\u3069\u3061\u3089\u3067\u3082\u3044\u3044\u3088\u6d3e\u3067\u3059\u3002\n\u3053\u3093\u306b\u3061\u306f\u3002\u306f\u3058\u3081\u307e\u3057\u3066\u3002tarokamikaze\u3067\u3059\u3002\n\nPHPUnit \u3092\u66f8\u3044\u3066\u3044\u308b\u3068\u3001\u4f55\u5ea6\u3082\u540c\u3058\u51e6\u7406\u5185\u5bb9\u3084Assert\u304c\u51fa\u3066\u304f\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u304b? \n\u30c6\u30b9\u30c8\u304c\u5197\u9577\u3067\u3001\u3044\u3084\u306b\u306a\u3063\u3061\u3083\u3044\u307e\u3059\u306d\u3002\n\n\u3088\u308d\u3057\u3044\u3001\u306a\u3089\u3070\u30ea\u30d5\u30a1\u30af\u30bf\u3060\u3002\n\n# \u5197\u9577\u3067\u3044\u3084\u306b\u306a\u308b\u4f8b\n\n```php\n/**\n * REST API \u7528\u306e\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u304c\u3044\u3063\u3071\u3044\u3042\u308b\u3068\u601d\u3063\u3066\u304f\u3060\u3055\u3044\n */\nclass RestApiTest extends \\PHPUnit_Framework_TestCase\n{\n    public function test_getFoo()\n    {\n        // json\u3067\u51fa\u529b\u3055\u308c\u3066\u6b32\u3057\u3044\u30ad\u30fc\n        $expectedColumns = ['id', 'name', 'foo'];\n\n\u3000      $json = ...// \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u3092\u53e9\u3044\u3066\u3001json\u3092\u53d6\u308a\u51fa\u3059\n\n        /** \u3053\u3053\u304b\u3089\u5171\u901a\u51e6\u7406 **/\n        // json\u3092\u914d\u5217\u306bdecode\u3057\u3066\u3001\u30ad\u30fc\u304c\u4e00\u81f4\u3059\u308b\u304b\u78ba\u8a8d\u3059\u308b\n        $data = json_decode($json, true);\n        $this->assertTrue(is_array($data));\n        $keys = array_keys($data);\n        // json hash \u306f\u672c\u8cea\u7684\u306b\u30ab\u30e9\u30e0\u9806\u3092\u4fdd\u8a3c\u3057\u306a\u3044\u306e\u3067\n        // \u30bd\u30fc\u30c8\u3057\u305f\u3046\u3048\u3067\u30ad\u30fc\u306e\u4e00\u81f4\u30c1\u30a7\u30c3\u30af\u3092\u3057\u306a\u3044\u3068\u30c0\u30e1\n        sort($keys); \n        sort($expectedColumns);\n        $this->assertEquals($expectedColumns, $keys);\n        /** \u3053\u3053\u307e\u3067\u5171\u901a\u51e6\u7406 **/\n    }\n}\n```\n\n\u3072\u3068\u76ee\u3067\u306a\u306b\u3092\u3084\u3063\u3066\u3044\u308b\u306e\u304b\u308f\u304b\u308a\u307e\u3059\u3002\n\u304c\u3001\u3053\u306e\u5148\u30b3\u30d4\u30da\u5730\u7344\u304c\u5f85\u3063\u3066\u3044\u307e\u3059\u306d\u3002\n\n# \u5171\u901a\u51e6\u7406\u3092\u57fa\u5e95\u30af\u30e9\u30b9\u306b\u9003\u304c\u3057\u3066\u307f\u308b\n\n\u8ab0\u3067\u3082\u601d\u3044\u3064\u304f\u624b\u306f\u300cextends\u3059\u308c\u3070\u3044\u30fc\u3058\u3083\u3093\u300d\u3068\u3044\u3046\u3082\u306e\u3002\n\n``` php\n/**\n * \u5171\u901a\u30c6\u30b9\u30c8\u7528\u57fa\u5e95\u30af\u30e9\u30b9\n */\nabstract class BaseRestApiTest extends \\PHPUnit_Framework_TestCase\n{\n    public static function assertJsonColumns(array $expectedColumns, $json)\n    {\n        // \u914d\u5217\u306bdecode\u3057\u3066\u3001\u30ad\u30fc\u304c\u4e00\u81f4\u3059\u308b\u304b\u78ba\u8a8d\u3059\u308b\n        $data = json_decode($json, true);\n        self::assertTrue(is_array($data));\n        $keys = array_keys($data);\n        sort($keys); // json hash \u306f\u672c\u8cea\u7684\u306b\u30ab\u30e9\u30e0\u9806\u306e\u4fdd\u8a3c\u304c\u306a\u3044\u306e\u3067\u3001\u30bd\u30fc\u30c8\u3057\u305f\u3046\u3048\u3067\u30ad\u30fc\u306e\u4e00\u81f4\u30c1\u30a7\u30c3\u30af\u3092\u3057\u306a\u3044\u3068\u30c0\u30e1\n        sort($expectedColumns);\n        self::assertEquals($expectedColumns, $keys);\n    }\n}\n\nclass RestApiTest extends BaseRestApiTest\n{\n    public function test_getFoo()\n    {\n        // json\u3067\u51fa\u529b\u3055\u308c\u3066\u6b32\u3057\u3044\u30ad\u30fc\n        $expectedColumns = ['id', 'name', 'foo'];\n\n\u3000      $json = ...// \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u3092\u53e9\u3044\u3066\u3001json\u3092\u53d6\u308a\u51fa\u3059\n        // \u57fa\u5e95\u30af\u30e9\u30b9\u306b\u9003\u304c\u3057\u305f\u5171\u901a\u51e6\u7406\u3092\u53e9\u304f\n        $this->assertJsonColumns($expectedColumns, $json);\n    }\n}\n```\n\n\u3053\u308c\u306f\u3053\u308c\u306f\u3002\u304a\u624b\u8efd\u3067\u3059\u306d\u3002\n\u3057\u304b\u3057\u3001\u3053\u306e\u30ce\u30ea\u3067\u8907\u6570\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u3044\u3063\u3066\u3057\u307e\u3046\u3068\n\u8ff7\u5b50\u306b\u306a\u3063\u305f\u308a\u591a\u91cd\u7d99\u627f\u554f\u984c\u306b\u7a81\u304d\u5f53\u305f\u3063\u305f\u308a\u57fa\u5e95\u30af\u30e9\u30b9\u304c\u80a5\u5927\u5316\u3057\u305f\u308a\u3068\n\u3044\u3044\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n# \u30aa\u30ec\u30aa\u30ec\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u307f\u308b\n\n\u5b9f\u306f\u3001Assert\u3059\u308b\u3060\u3051\u306e\u30af\u30e9\u30b9\u3092\u4f5c\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3093\u3067\u3059\u3002\n\u500b\u4eba\u7684\u306b\u306f\u4e00\u756a\u597d\u304d\u306a\u3084\u308a\u65b9\u3002\n\n``` php\n/**\n * \u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u5c02\u7528\u30af\u30e9\u30b9\u3002\n * \u30c6\u30b9\u30c8\u672c\u4f53\u3067\u3082\u306a\u3044\u30af\u30e9\u30b9\u304cTestCase\u3092\u7d99\u627f\u3059\u308b\u306e\u304c\u30ad\u30e2\u3044\u306e\u3067\n * PHPUnit_Framework_Assert\u3092\u7d99\u627f\u3059\u308b\u3002\n */\nclass JsonColumnAssert extends \\PHPUnit_Framework_Assert\n{\n    public static function assert(array $expectedColumns, $json)\n    {\n        // \u914d\u5217\u306bdecode\u3057\u3066\u3001\u30ad\u30fc\u304c\u4e00\u81f4\u3059\u308b\u304b\u78ba\u8a8d\u3059\u308b\n        $data = json_decode($json, true);\n        self::assertTrue(is_array($data));\n        $keys = array_keys($data);\n        sort($keys); // json hash \u306f\u672c\u8cea\u7684\u306b\u30ab\u30e9\u30e0\u9806\u306e\u4fdd\u8a3c\u304c\u306a\u3044\u306e\u3067\u3001\u30bd\u30fc\u30c8\u3057\u305f\u3046\u3048\u3067\u30ad\u30fc\u306e\u4e00\u81f4\u30c1\u30a7\u30c3\u30af\u3092\u3057\u306a\u3044\u3068\u30c0\u30e1\n        sort($expectedColumns);\n        self::assertEquals($expectedColumns, $keys);\n    }\n}\nclass RestApiTest extends BaseRestApiTest\n{\n    public function test_getFoo()\n    {\n        // json\u3067\u51fa\u529b\u3055\u308c\u3066\u6b32\u3057\u3044\u30ad\u30fc\n        $expectedColumns = ['id', 'name', 'foo'];\n\n\u3000      $json = ...// \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u3092\u53e9\u3044\u3066\u3001json\u3092\u53d6\u308a\u51fa\u3059\n        // \u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u5c02\u7528\u30af\u30e9\u30b9\u306b\u9003\u304c\u3057\u305f\u5171\u901a\u51e6\u7406\u3092\u53e9\u304f\n\u3000      JsonColumnAssert::assert($expectedColumns, $json);\n    }\n}\n```\n\n\u5358\u4e00\u8cac\u4efb\u539f\u5247\u3067\u3059\u3002\u3044\u3044\u304b\u3093\u3058\u3002\n\u3042\u307e\u308a\u898b\u306a\u3044\u5f62\u306a\u306e\u3067\u3001\u898b\u6163\u308c\u306a\u3044\u3072\u3068\u306f\u8ff7\u3046\u304b\u3082\u3002\u3067\u3082\u6163\u308c\u308b\u3068\u5feb\u611f\u3002\n\n# \u304a\u307e\u3051: \u30aa\u30ec\u30aa\u30ec\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u30af\u30e9\u30b9\u3092\u6f54\u7656\u306b\u4f5c\u308d\u3046\u3068\u3057\u3066\u5fc3\u304c\u6298\u308c\u305f\n\n\u30aa\u30ec\u306fextends\u3068\u304b\u30ad\u30e9\u30a4\u306a\u3093\u3060\u3088\uff01\u3068\u3044\u3046\u6f54\u7656\u306a\u304a\u65b9\u306e\u305f\u3081\u306e\n\u4f55\u306b\u3082\u4f9d\u5b58\u3057\u306a\u3044\u30c6\u30b9\u30c8\u306f\u3053\u3061\u3089\u3002\n\n\u305d\u3082\u305d\u3082\u300c\u30c6\u30b9\u30c8\u5931\u6557\u300d\u3092PHPUnit\u306f\u3069\u3046\u8868\u73fe\u3057\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\n\u30bd\u30fc\u30b9\u3092\u898b\u308b\u9650\u308a\u3001PHPUnit_Framework_AssertionFailedError \u3092\n\u6295\u3052\u3066\u3044\u308b\u306b\u904e\u304e\u307e\u305b\u3093\u3002\n\n``` php\n// vendor/phpunit/phpunit/src/Framework/Assert.php\nabstract class PHPUnit_Framework_Assert\n{\n    /** \u7565 **/\n    public static function fail($message = '')\n    {\n        throw new PHPUnit_Framework_AssertionFailedError($message);\n    }\n    /** \u7565 **/\n}\n```\n\n\u3068\u3044\u3046\u3053\u3068\u306f\u3001\u30aa\u30ec\u30aa\u30ec\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u3067\u3001\u3053\u306e\u30a8\u30e9\u30fc\u3092\u6295\u3052\u308c\u3070\n\u5931\u6557\u3068\u5224\u65ad\u3057\u3066\u304f\u308c\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u3059\uff01\n\n``` php\n/**\n * \u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u5c02\u7528\u30af\u30e9\u30b9\u3002\n * \u306a\u306b\u3082extends\u3057\u306a\u3044\uff01\n */\nclass JsonColumnAssert\n{\n    public static function assert(array $expectedColumns, $json)\n    {\n        // \u914d\u5217\u306bdecode\u3057\u3066\u3001\u30ad\u30fc\u304c\u4e00\u81f4\u3059\u308b\u304b\u78ba\u8a8d\u3059\u308b\n        $data = json_decode($json, true);\n        if(!is_array($data)){\n            throw new \\PHPUnit_Framework_AssertionFailedError('json\u3058\u3083\u306a\u3044\u3067\u3059\u3088');\n        }\n        $keys = array_keys($data);\n        sort($keys); // json hash \u306f\u672c\u8cea\u7684\u306b\u30ab\u30e9\u30e0\u9806\u306e\u4fdd\u8a3c\u304c\u306a\u3044\u306e\u3067\u3001\u30bd\u30fc\u30c8\u3057\u305f\u3046\u3048\u3067\u30ad\u30fc\u306e\u4e00\u81f4\u30c1\u30a7\u30c3\u30af\u3092\u3057\u306a\u3044\u3068\u30c0\u30e1\n        sort($expectedColumns);\n        if($expectedColumns !== $keys){\n            throw new \\PHPUnit_Framework_AssertionFailedError('\u4e00\u81f4\u3057\u307e\u305b\u3093\u3088');\n        }\n    }\n}\nclass RestApiTest extends BaseRestApiTest\n{\n    public function test_getFoo()\n    {\n        // json\u3067\u51fa\u529b\u3055\u308c\u3066\u6b32\u3057\u3044\u30ad\u30fc\n        $expectedColumns = ['id', 'name', 'foo'];\n\n\u3000      $json = ...// \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u3092\u53e9\u3044\u3066\u3001json\u3092\u53d6\u308a\u51fa\u3059\n        // \u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u5c02\u7528\u30af\u30e9\u30b9\u306b\u9003\u304c\u3057\u305f\u5171\u901a\u51e6\u7406\u3092\u53e9\u304f\n\u3000      JsonColumnAssert::assert($expectedColumns, $json);\n    }\n}\n```\n\n\u3053\u308c\u3060\u3068\u3001\u5931\u6557\u6642\u306f\u3044\u3044\u611f\u3058\u306bfail \u306b\u306a\u3063\u3066\u304f\u308c\u307e\u3059\uff01\u3000\n\n## \u3057\u304b\u3057...\n```\nPHPUnit 5.2.12 by Sebastian Bergmann and contributors.\n\n\n\u4e00\u81f4\u3057\u307e\u305b\u3093\u3088\n ***/RestApiTest.php:21\n ***/RestApiTest.php:44\n\nTime: 56 ms, Memory: 6.00Mb\n\n\nFAILURES!\nTests: 1, Assertions: 0, Failures: 1.\n```\n\nAssertions: 0...\u3060\u3068...?\n\u305d\u3046\u3001Assertion\u3092\u6570\u3048\u308b\u6a5f\u80fd\u304c\u52b9\u304d\u307e\u305b\u3093\u3002\nAssertion\u3092\u6570\u3048\u308b\u6a5f\u80fd\u306f\uff08\u304a\u305d\u3089\u304f\uff09\u3053\u3053\u3067\u3084\u3063\u3066\u307e\u3059\u3002\n\n``` php\n// vendor/phpunit/phpunit/src/Framework/Assert.php\nabstract class PHPUnit_Framework_Assert\n{\n    private static $count = 0;\n    /** \u7565 **/\n    public static function assertThat($value, PHPUnit_Framework_Constraint $constraint, $message = '')\n    {\n        self::$count += count($constraint);\n\n        $constraint->evaluate($value, $message);\n    }\n    /** \u7565 **/\n}\n```\n\n\u3053\u306eassertThat\u306f\u3001\u3059\u3079\u3066\u306eassert***\u30e1\u30bd\u30c3\u30c9\u3092\u53e9\u304f\u3068\u304d\u306b\u901a\u308b\u3082\u306e\u3067\u3059\u3002\ncount\u3092\u8db3\u3057\u4e0a\u3052\u3066\u307e\u3059\u306d\u3002\nphpunit\u30b3\u30de\u30f3\u30c9\u3092\u53e9\u3044\u305f\u6642\u306e\u300cAssertions\u300d\u306f\u3001\u3053\u3053\u3092\u53c2\u7167\u3057\u3066\u3044\u308b\u3082\u306e\u3068\u4e88\u60f3\u3055\u308c\u307e\u3059\u3002\n\n\u3057\u304b\u3057private static\u306a\u30d7\u30ed\u30d1\u30c6\u30a3\u306a\u306e\u3067\u3001\u3053\u3044\u3064\u3092\u5916\u90e8\u304b\u3089\u3044\u3058\u308b\u306e\u306f\u4e00\u82e6\u52b4\u3067\u3059\u306d\u3002\n\u305d\u308c\u3060\u3063\u305f\u3089\u3001\u7d20\u76f4\u306bPHPUnit_Framework_Assert\u3092\u7d99\u627f\u3057\u305f\u307b\u3046\u304c\n\u697d\u3067\u8aad\u307f\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u5099\u8003\n\n1\u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u306b\u3044\u304f\u3064\u3082assert\u3092\u66f8\u304f\u306a\u6559\u56e3\u304c\u3042\u308b\u3089\u3057\u3044\u3067\u3059\u306d\u3002\n\u308f\u305f\u3057\u306f\u3069\u3061\u3089\u3067\u3082\u3044\u3044\u3088\u6d3e\u3067\u3059\u3002\n", "tags": ["PHP", "PHPUnit", "TDD"]}