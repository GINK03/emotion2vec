{"context": "\n\n\u4f55\u306e\u8a18\u4e8b\uff1f\nlisp\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u3059\u308b\u3068\u3044\u3063\u3066\u771f\u3063\u5148\u306b\u601d\u3044\u6d6e\u304b\u3076\u306e\u306fCLOS\u3067\u3057\u3087\u3046\u3002\n\u3057\u304b\u3057\u3001\u4eca\u56de\u306fCLOS\u3092\u4f7f\u308f\u305a\u306b\u81ea\u524d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u3063\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u4f5c\u3063\u305f\u3082\u306e\njavascript\u307f\u305f\u3044\u306a\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u30d9\u30fc\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30b7\u30b9\u30c6\u30e0\n\n\u3069\u3093\u306a\u304b\u3093\u3058\uff1f\uff1f\n\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\njsos.lisp\n;; prototype key\n(defvar +prototype+ '-prototype-)\n;; initialize function key\n(defvar +initialize+ 'initialize)\n\n;; make new object\n(defun new (&optional (prot nil))\n  (let ((obj (make-hash-table :test #'equal)))\n    (if prot\n        (setf (gethash +prototype+ obj) prot)\n        (setf (gethash +prototype+ obj) +object+))\n    (initialize-obj obj)\n    obj))\n\n;; get property value\n(defun getv (ht key) (gethash key ht))\n\n;; get short\n(defun -> (ht sym) (gethash key ht))\n\n;; get prop short\n(defmacro => (ht sym) `(gethash ',sym ,ht))\n\n;; set property value\n(defun setv (ht key val) (setf (gethash key ht) val))\n\n;; set short\n(defun -< (ht key val) (setf (gethash key ht) val))\n\n;; set prop short\n(defmacro =< (ht sym val) `(setf (gethash ',sym ,ht) ,val))\n\n;; call function\n(defmacro send (ht sym &rest vals) `(funcall (lookup ,ht ',sym) ,ht ,@vals))\n\n;; call function\n(defmacro ? (ht sym &rest vals) `(funcall (lookup ,ht ',sym) ,ht ,@vals))\n\n;; call initialize\n(defun initialize-obj (ht)\n  (let ((fnls (reverse (lookup-chain ht +initialize+))))\n    (mapcar\n      (lambda (fn)\n        (if fn (funcall fn ht) nil))\n      fnls)))\n\n;; lookup prototype chain\n(defun lookup (ht sym)\n  (if ht\n    (if (nth-value 1 (gethash sym ht))\n      (gethash sym ht)\n      (lookup (gethash +prototype+ ht) sym))\n    (error \"no property or method found\")))\n\n;; lookup prototype chain\n(defun lookup-chain (ht sym)\n  (labels (\n    (lookup-chain-1 (ht sym ls)\n      (if (gethash +prototype+ ht)\n         (lookup-chain-1 (gethash +prototype+ ht) sym (append ls (list (gethash sym ht))))\n         (append ls (list (gethash sym ht))))))\n    (lookup-chain-1 ht sym (list))))\n\n;-------------------------------------------------\n; preset\n(defvar +object+ (make-hash-table :test #'equal))\n(-< +object+ +initialize+ (lambda (this) (-< this 'this this)))\n(=< +object+ to-string (lambda (this) \"object\"))\n; --------------------------------------------------------\n\n\n\n\n\u4f55\u3057\u3066\u3093\u306e\u30b3\u30ec\uff1f\nlisp\u306e\u30cf\u30c3\u30b7\u30e5\u30de\u30c3\u30d7\u3092\u4f7f\u3063\u3066\u64ec\u4f3c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u3064\u304f\u3063\u3066\u3044\u307e\u3059\u3002\n\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u3082\u540c\u69d8\u306b\u30cf\u30c3\u30b7\u30e5\u30de\u30c3\u30d7\u3067\u8868\u73fe\u3057\u3066\u3044\u3066\u7d99\u627f(\u5358\u7d14\u306b\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u30c1\u30a7\u30fc\u30f3\u3092\u8ffd\u3046\u3060\u3051)\u3082\u3067\u304d\u307e\u3059\u3002\nsetf\u307f\u305f\u3044\u306bsetter/getter\u4e21\u65b9\u3064\u304b\u3048\u308b\u3088\u3046\u306a\u66f8\u304d\u65b9\u304c\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u5206\u3051\u3066\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\n=>, =< \u3092\u4f7f\u3048\u3070\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u969b\u306b\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u306b\u30af\u30a9\u30fc\u30c8\u3092\u3064\u3051\u306a\u304f\u3066\u3082\u3044\u3044\u3088\u3046\u306b\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\n\u3069\u3046\u3084\u3063\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u3059\u308b\u306e\uff1f\n\u3053\u3093\u306a\u304b\u3093\u3058\u3067\u4f7f\u3044\u307e\u3059\u3002\n\njsos-test.lisp\n;; \u52d5\u7269\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u3092\u5b9a\u7fa9\n(defvar prot-animal (new))\n(=< prot-animal initialize\n  (lambda (this)\n    (=< this name \"\u540d\u7121\u3057\u306e\u3069\u3046\u3076\u3064\")\n    (=< this age 0)\n    (=< this mood \"\u3075\u3064\u3046\")))\n(=< prot-animal cry\n  (lambda (this)\n    (format t \"...~%\")))\n(=< prot-animal print-detail\n  (lambda (this)\n    (format t \"\u540d\u524d : ~S, \u5e74\u9f62 : ~S, \u6a5f\u5acc : ~S~%\" (=> this name) (=> this age) (=> this mood))))\n\n;; \u732b\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u3092\u5b9a\u7fa9\n(defvar prot-cat (new prot-animal))\n(=< prot-cat initialize\n  (lambda (this)))\n(=< prot-cat cry\n  (lambda (this)\n    (format t \"\u306b\u3083\u30fc~%\")))\n(=< prot-cat water\n  (lambda (this)\n    (format t \"\u306a\u3044\u308f\u30fc\u3001\u732b\u306b\u6c34\u304b\u3051\u308b\u3068\u304b\u307e\u3058\u306a\u3044\u308f\u30fc~%\")\n    (=< this mood \"\u304a\u3053\")))\n(=< prot-cat calc \n  (lambda (this x y)\n    (format t \"~S!\" (+ x y))))\n\n(defparameter *cat* (new prot-cat))\n(=< *cat* name \"\u306d\u3053001\")\n(=< *cat* age 3)\n\n(? *cat* cry) ; => \u306b\u3083\u30fc\n(? *cat* print-detail) ; => \u540d\u524d : \"\u306d\u3053001\", \u5e74\u9f62 : 3, \u6a5f\u5acc : \"\u3075\u3064\u3046\"\n(? *cat* water) ; => \u306a\u3044\u308f\u30fc\u3001\u732b\u306b\u6c34\u304b\u3051\u308b\u3068\u304b\u307e\u3058\u306a\u3044\u308f\u30fc\n(? *cat* print-detail) ; => \u540d\u524d : \"\u306d\u3053001\", \u5e74\u9f62 : 3, \u6a5f\u5acc : \"\u304a\u3053\"\n(? *cat* calc 1 2) ; => 3!\n\n\n\n\u66f8\u304d\u65b9\u30ad\u30e2\u304f\u306a\u3044\uff1f\n\u6c17\u306b\u3057\u3066\u306f\u3044\u3051\u307e\u305b\u3093:)\n(\u30de\u30af\u30ed\u306e\u66f8\u304d\u65b9\u304c\u3088\u304f\u308f\u304b\u3093\u306a\u3044...)\n\n\u307e\u3068\u3081\n\u7c21\u5358\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30b7\u30b9\u30c6\u30e0\u3067\u3042\u308c\u3070\u610f\u5916\u3068\u7c21\u5358\u306b\u304b\u3051\u308b\u3093\u3060\u306a\u3041\u3068\u3002\n\u30de\u30af\u30ed\u3092\u3046\u307e\u304f\u3064\u304b\u3048\u3070\u3082\u3063\u3068\u30b7\u30f3\u30d7\u30eb\u306b\u30e1\u30bd\u30c3\u30c9\u306e\u30b3\u30fc\u30eb\u3068\u304b\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u30a2\u30af\u30bb\u30b9\u3068\u304b\n\u66f8\u3051\u308b\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u304a\u3082\u3044\u307e\u3059\u3002\n\u3084\u3063\u3066\u307f\u305f\u7684\u306a\u8a18\u4e8b\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u53cd\u7701\uff3e\uff3e\uff1b\n\n\u74b0\u5883\u3068\u304b\nOS : Windows 10\n\u51e6\u7406\u7cfb : SBCL 1.2.15\n\n\u8ffd\u8a181\n\u6298\u89d2\u306a\u306e\u3067\u30b3\u30fc\u30c9\u3092github\u306b\u3042\u3052\u3066\u307f\u307e\u3057\u305f\u3002\n\u79c1\u304c\u82f1\u8a9e\u3092\u66f8\u304f\u3068\u58ee\u7d76\u306abroken english\u306b\u306a\u308b\u306e\u3067\u30b3\u30e1\u30f3\u30c8\u3068\u304b\u306f\u3059\u3054\u304f\u77ed\u304f\u306a\u3063\u3066\u307e\u3059\u3002\ngithub : https://github.com/singy15/lclos\n\n#\u4f55\u306e\u8a18\u4e8b\uff1f\nlisp\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u3059\u308b\u3068\u3044\u3063\u3066\u771f\u3063\u5148\u306b\u601d\u3044\u6d6e\u304b\u3076\u306e\u306fCLOS\u3067\u3057\u3087\u3046\u3002\n\u3057\u304b\u3057\u3001\u4eca\u56de\u306fCLOS\u3092\u4f7f\u308f\u305a\u306b\u81ea\u524d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u3063\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n#\u4f5c\u3063\u305f\u3082\u306e\njavascript\u307f\u305f\u3044\u306a\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u30d9\u30fc\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30b7\u30b9\u30c6\u30e0\n\n#\u3069\u3093\u306a\u304b\u3093\u3058\uff1f\uff1f\n\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n``` cl:jsos.lisp\n;; prototype key\n(defvar +prototype+ '-prototype-)\n;; initialize function key\n(defvar +initialize+ 'initialize)\n\n;; make new object\n(defun new (&optional (prot nil))\n  (let ((obj (make-hash-table :test #'equal)))\n    (if prot\n        (setf (gethash +prototype+ obj) prot)\n        (setf (gethash +prototype+ obj) +object+))\n    (initialize-obj obj)\n    obj))\n\n;; get property value\n(defun getv (ht key) (gethash key ht))\n\n;; get short\n(defun -> (ht sym) (gethash key ht))\n\n;; get prop short\n(defmacro => (ht sym) `(gethash ',sym ,ht))\n\n;; set property value\n(defun setv (ht key val) (setf (gethash key ht) val))\n\n;; set short\n(defun -< (ht key val) (setf (gethash key ht) val))\n\n;; set prop short\n(defmacro =< (ht sym val) `(setf (gethash ',sym ,ht) ,val))\n\n;; call function\n(defmacro send (ht sym &rest vals) `(funcall (lookup ,ht ',sym) ,ht ,@vals))\n\n;; call function\n(defmacro ? (ht sym &rest vals) `(funcall (lookup ,ht ',sym) ,ht ,@vals))\n\n;; call initialize\n(defun initialize-obj (ht)\n  (let ((fnls (reverse (lookup-chain ht +initialize+))))\n    (mapcar\n      (lambda (fn)\n        (if fn (funcall fn ht) nil))\n      fnls)))\n\n;; lookup prototype chain\n(defun lookup (ht sym)\n  (if ht\n    (if (nth-value 1 (gethash sym ht))\n      (gethash sym ht)\n      (lookup (gethash +prototype+ ht) sym))\n    (error \"no property or method found\")))\n\n;; lookup prototype chain\n(defun lookup-chain (ht sym)\n  (labels (\n    (lookup-chain-1 (ht sym ls)\n      (if (gethash +prototype+ ht)\n         (lookup-chain-1 (gethash +prototype+ ht) sym (append ls (list (gethash sym ht))))\n         (append ls (list (gethash sym ht))))))\n    (lookup-chain-1 ht sym (list))))\n\n;-------------------------------------------------\n; preset\n(defvar +object+ (make-hash-table :test #'equal))\n(-< +object+ +initialize+ (lambda (this) (-< this 'this this)))\n(=< +object+ to-string (lambda (this) \"object\"))\n; --------------------------------------------------------\n\n```\n\n#\u4f55\u3057\u3066\u3093\u306e\u30b3\u30ec\uff1f\nlisp\u306e\u30cf\u30c3\u30b7\u30e5\u30de\u30c3\u30d7\u3092\u4f7f\u3063\u3066\u64ec\u4f3c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u3064\u304f\u3063\u3066\u3044\u307e\u3059\u3002\n\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u3082\u540c\u69d8\u306b\u30cf\u30c3\u30b7\u30e5\u30de\u30c3\u30d7\u3067\u8868\u73fe\u3057\u3066\u3044\u3066\u7d99\u627f(\u5358\u7d14\u306b\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u30c1\u30a7\u30fc\u30f3\u3092\u8ffd\u3046\u3060\u3051)\u3082\u3067\u304d\u307e\u3059\u3002\nsetf\u307f\u305f\u3044\u306bsetter/getter\u4e21\u65b9\u3064\u304b\u3048\u308b\u3088\u3046\u306a\u66f8\u304d\u65b9\u304c\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u5206\u3051\u3066\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\n=>, =< \u3092\u4f7f\u3048\u3070\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u969b\u306b\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u306b\u30af\u30a9\u30fc\u30c8\u3092\u3064\u3051\u306a\u304f\u3066\u3082\u3044\u3044\u3088\u3046\u306b\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\n#\u3069\u3046\u3084\u3063\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u3059\u308b\u306e\uff1f\n\u3053\u3093\u306a\u304b\u3093\u3058\u3067\u4f7f\u3044\u307e\u3059\u3002\n\n```cl:jsos-test.lisp\n;; \u52d5\u7269\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u3092\u5b9a\u7fa9\n(defvar prot-animal (new))\n(=< prot-animal initialize\n  (lambda (this)\n    (=< this name \"\u540d\u7121\u3057\u306e\u3069\u3046\u3076\u3064\")\n    (=< this age 0)\n    (=< this mood \"\u3075\u3064\u3046\")))\n(=< prot-animal cry\n  (lambda (this)\n    (format t \"...~%\")))\n(=< prot-animal print-detail\n  (lambda (this)\n    (format t \"\u540d\u524d : ~S, \u5e74\u9f62 : ~S, \u6a5f\u5acc : ~S~%\" (=> this name) (=> this age) (=> this mood))))\n\n;; \u732b\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u3092\u5b9a\u7fa9\n(defvar prot-cat (new prot-animal))\n(=< prot-cat initialize\n  (lambda (this)))\n(=< prot-cat cry\n  (lambda (this)\n    (format t \"\u306b\u3083\u30fc~%\")))\n(=< prot-cat water\n  (lambda (this)\n    (format t \"\u306a\u3044\u308f\u30fc\u3001\u732b\u306b\u6c34\u304b\u3051\u308b\u3068\u304b\u307e\u3058\u306a\u3044\u308f\u30fc~%\")\n    (=< this mood \"\u304a\u3053\")))\n(=< prot-cat calc \n  (lambda (this x y)\n    (format t \"~S!\" (+ x y))))\n\n(defparameter *cat* (new prot-cat))\n(=< *cat* name \"\u306d\u3053001\")\n(=< *cat* age 3)\n\n(? *cat* cry) ; => \u306b\u3083\u30fc\n(? *cat* print-detail) ; => \u540d\u524d : \"\u306d\u3053001\", \u5e74\u9f62 : 3, \u6a5f\u5acc : \"\u3075\u3064\u3046\"\n(? *cat* water) ; => \u306a\u3044\u308f\u30fc\u3001\u732b\u306b\u6c34\u304b\u3051\u308b\u3068\u304b\u307e\u3058\u306a\u3044\u308f\u30fc\n(? *cat* print-detail) ; => \u540d\u524d : \"\u306d\u3053001\", \u5e74\u9f62 : 3, \u6a5f\u5acc : \"\u304a\u3053\"\n(? *cat* calc 1 2) ; => 3!\n```\n\n#\u66f8\u304d\u65b9\u30ad\u30e2\u304f\u306a\u3044\uff1f\n\u6c17\u306b\u3057\u3066\u306f\u3044\u3051\u307e\u305b\u3093:)\n(\u30de\u30af\u30ed\u306e\u66f8\u304d\u65b9\u304c\u3088\u304f\u308f\u304b\u3093\u306a\u3044...)\n\n#\u307e\u3068\u3081\n\u7c21\u5358\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30b7\u30b9\u30c6\u30e0\u3067\u3042\u308c\u3070\u610f\u5916\u3068\u7c21\u5358\u306b\u304b\u3051\u308b\u3093\u3060\u306a\u3041\u3068\u3002\n\u30de\u30af\u30ed\u3092\u3046\u307e\u304f\u3064\u304b\u3048\u3070\u3082\u3063\u3068\u30b7\u30f3\u30d7\u30eb\u306b\u30e1\u30bd\u30c3\u30c9\u306e\u30b3\u30fc\u30eb\u3068\u304b\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u30a2\u30af\u30bb\u30b9\u3068\u304b\n\u66f8\u3051\u308b\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u304a\u3082\u3044\u307e\u3059\u3002\n\n\u3084\u3063\u3066\u307f\u305f\u7684\u306a\u8a18\u4e8b\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u53cd\u7701\uff3e\uff3e\uff1b\n\n#\u74b0\u5883\u3068\u304b\nOS : Windows 10\n\u51e6\u7406\u7cfb : SBCL 1.2.15\n\n#\u8ffd\u8a181\n\u6298\u89d2\u306a\u306e\u3067\u30b3\u30fc\u30c9\u3092github\u306b\u3042\u3052\u3066\u307f\u307e\u3057\u305f\u3002\n\u79c1\u304c\u82f1\u8a9e\u3092\u66f8\u304f\u3068\u58ee\u7d76\u306abroken english\u306b\u306a\u308b\u306e\u3067\u30b3\u30e1\u30f3\u30c8\u3068\u304b\u306f\u3059\u3054\u304f\u77ed\u304f\u306a\u3063\u3066\u307e\u3059\u3002\ngithub : https://github.com/singy15/lclos\n\n", "tags": ["CommonLisp", "lisp", "SBCL"]}