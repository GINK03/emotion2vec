{"context": "\n\n\u306f\u3058\u3081\u306b\n\n\u3053\u3093\u306b\u3061\u306f\u3001Hironsan\u3067\u3059\u3002\n\u9854\u8a8d\u8b58\u306f\u753b\u50cf\u4e2d\u306b\u6620\u3063\u305f\u4eba\u3092\u691c\u77e5\u3057\u3001\u4eba\u7269\u306e\u8b58\u5225\u3092\u884c\u3046\u6280\u8853\u3067\u3059\u3002\u9854\u8a8d\u8b58\u306e\u7528\u9014\u3068\u3057\u3066\u306f\u3001\u76e3\u8996\u30ab\u30e1\u30e9\u306e\u30b7\u30b9\u30c6\u30e0\u306b\u7d44\u307f\u8fbc\u3093\u3067\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u5411\u4e0a\u306b\u5f79\u7acb\u3066\u305f\u308a\u3001\u30ed\u30dc\u30c3\u30c8\u306b\u7d44\u307f\u8fbc\u3093\u3067\u5bb6\u65cf\u306e\u9854\u3092\u8a8d\u8b58\u3055\u305b\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u3042\u3052\u3089\u308c\u307e\u3059\u3002\n\u4eca\u56de\u306fTensorFlow\u3092\u4f7f\u3063\u3066\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u69cb\u7bc9\u3057\u3001\u65e2\u5b58\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f7f\u3063\u3066\u9854\u8a8d\u8b58\u5668\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\n\u5bfe\u8c61\u8aad\u8005\n\n\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af(CNN)\u3092\u77e5\u3063\u3066\u3044\u308b\nTensorFlow\u3067\u3069\u3046\u66f8\u304f\u304b\u306f\u308f\u304b\u3089\u306a\u3044\n\nCNN\u306e\u7406\u8ad6\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u3092\u898b\u308c\u3070\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\nConvolutional Neural Network\u3068\u306f\u4f55\u306a\u306e\u304b\n\n\n\u6e96\u5099\n\nTensorFlow\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nTensorFlow\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u516c\u5f0f\u30b5\u30a4\u30c8\u304c\u4e01\u5be7\u306b\u89e3\u8aac\u3057\u3066\u3044\u308b\u306e\u3067\u305d\u3061\u3089\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nTensorFlow\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n\n\u30c7\u30fc\u30bf\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n\u307e\u305a\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u7528\u610f\u3057\u307e\u3059\u3002\u4eca\u56de\u306f\u4ee5\u4e0b\u306e\u9854\u753b\u50cf\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f7f\u3044\u307e\u3059\u3002\n\nOlivetti Faces\n\n\u3053\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u306f40\u4eba\u5206\u306e\u753b\u50cf\u304c\u540410\u679a\u305a\u3064\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\u5404\u753b\u50cf\u30b5\u30a4\u30ba\u306f64x64\u3067\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u753b\u50cf\u3067\u3059\u3002\n\n\n\u753b\u50cf\u306e\u8aad\u307f\u8fbc\u307f\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u7528\u610f\u3057\u305f\u3089\u3001\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\nPyFaceRecognizer/example/input_data.py\nimport input_data\ndataset = input_data.read_data_sets('data/olivettifaces.mat')\n\n\u3053\u3053\u3067\u3001dataset\u306f\u5b66\u7fd2\u30c7\u30fc\u30bf\u3001\u691c\u8a3c\u30c7\u30fc\u30bf\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u542b\u3093\u3067\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u8aad\u307f\u8fbc\u3093\u3060\u6bb5\u968e\u3067\u753b\u50cf\u30b5\u30a4\u30ba\u309232x32\u306b\u7e2e\u5c0f\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u69cb\u7bc9\n\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af(CNN)\u3092\u7528\u3044\u3066\u9854\u8a8d\u8b58\u3092\u884c\u3044\u307e\u3059\u3002\u5168\u4f53\u50cf\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u5404\u5c64\u306econv, pool, fc\u306f\u305d\u308c\u305e\u308c\u7573\u307f\u8fbc\u307f\u5c64\u3001\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\u3001\u5168\u7d50\u5408\u5c64\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002\u95a2\u6570\u6b04\u306eReL\u306f\u6b63\u898f\u5316\u7dda\u5f62\u95a2\u6570\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8868\u306b\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n\n\u5c64\u7a2e\u30fb\u540d\u79f0\n\u30d1\u30c3\u30c1\n\u30b9\u30c8\u30e9\u30a4\u30c9\n\u51fa\u529b\u30de\u30c3\u30d7\u30b5\u30a4\u30ba\n\u95a2\u6570\n\n\n\n\ndata\n-\n-\n32 x 32 x 1\n-\n\n\nconv1\n5 x 5\n1\n32 x 32 x 32\nReL\n\n\npool1\n2 x 2\n2\n16 x 16 x 32\n-\n\n\nconv2\n5 x 5\n1\n16 x 16 x 64\nReL\n\n\npool2\n2 x 2\n2\n8 x  8 x 64\n-\n\n\nfc3\n-\n-\n1 x 1 x 1024\nReL\n\n\nfc4\n-\n-\n1 x 1 x 40\nsoftmax\n\n\n\n\u30b3\u30fc\u30c9\u3067\u66f8\u3044\u3066\u3042\u3052\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u307b\u307c\u305d\u306e\u307e\u307e\u3067\u3059\u306d\u3002\nPyFaceRecognizer/example/run.py\ndef inference(input_placeholder, keep_prob):\n    W_conv1 = weight_variable([5, 5, 1, 32])  # \u6700\u521d\u306e\uff12\u3064\u306f\u30d1\u30c3\u30c1\u30b5\u30a4\u30ba\u3002\u6b8b\u308a\u306f\u5165\u529b\u30c1\u30e3\u30cd\u30eb\u3068\u51fa\u529b\u30c1\u30e3\u30cd\u30eb\u306e\u6570\n    b_conv1 = bias_variable([32])\n\n    x_image = tf.reshape(input_placeholder, [-1, 32, 32, 1])  # \u7b2c\uff12\u3001\u7b2c\uff13\u306e\u6b21\u5143\u306f\u753b\u50cf\u306e\u5e45\u3068\u9ad8\u3055\u3001\u6700\u5f8c\u306e\u6b21\u5143\u306f\u30ab\u30e9\u30fc\u30fb\u30c1\u30e3\u30cd\u30eb\u306e\u6570\n\n    h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)  # \u305f\u305f\u307f\u8fbc\u307f\n    h_pool1 = max_pool_2x2(h_conv1)  # max\u30d7\u30fc\u30ea\u30f3\u30b0\n\n    W_conv2 = weight_variable([5, 5, 32, 64])\n    b_conv2 = bias_variable([64])\n\n    h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\n    h_pool2 = max_pool_2x2(h_conv2)\n\n    W_fc1 = weight_variable([8 * 8 * 64, 1024])\n    b_fc1 = bias_variable([1024])\n\n    h_pool2_flat = tf.reshape(h_pool2, [-1, 8 * 8 * 64])\n    h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\n\n    h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n\n    W_fc2 = weight_variable([1024, 40])\n    b_fc2 = bias_variable([40])\n\n    y_conv = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)  # \u51fa\u529b\u305d\u3046\n\n    return y_conv\n\n\n\u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u3068\u8a55\u4fa1\ninference\u306b\u30e2\u30c7\u30eb\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\u6b21\u306f\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3059\u308b\u305f\u3081\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\u305d\u308c\u304closs\u3068training\u3067\u3059\u3002loss\u3067\u306f\u30af\u30ed\u30b9\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u3092\u8a08\u7b97\u3057\u3001training\u3067\u306fAdam\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u3092\u4f7f\u7528\u3057\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u66f4\u65b0\u3092\u884c\u3063\u3066\u3044\u304d\u307e\u3059\u3002\u30b3\u30fc\u30c9\u306b\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\ndef loss(output, supervisor_labels_placeholder):\n    cross_entropy = tf.reduce_mean(-tf.reduce_sum(supervisor_labels_placeholder * tf.log(output), reduction_indices=[1]))\n    return cross_entropy\n\n\ndef training(loss):\n    train_step = tf.train.AdamOptimizer(1e-4).minimize(loss)\n    return train_step\n\n\u4ee5\u4e0a\u3067\u5b9a\u7fa9\u3057\u305f\u3001inference, loss, training\u3092\u7528\u3044\u3066\u9854\u8a8d\u8b58\u3092\u884c\u3044\u307e\u3059\u3002\u8a13\u7df4\u30d7\u30ed\u30bb\u30b9\u306e100\u53cd\u5fa9\u3054\u3068\u306b\u30ed\u30b0\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\u30c6\u30b9\u30c8\u3059\u308b\u3068\u304d\u306f\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u3055\u305b\u306a\u3044\u3088\u3046\u306b\u3001keep_peob\u30921.0\u306b\u3057\u3066\u3044\u307e\u3059\u3002\nwith tf.Session() as sess:\n    output = inference(x, keep_prob)\n    loss = loss(output, y_)\n    training_op = training(loss)\n\n    init = tf.initialize_all_variables()\n    sess.run(init)\n\n    for step in range(1000):\n        batch = dataset.train.next_batch(40)\n        sess.run(training_op, feed_dict={x: batch[0], y_: batch[1], keep_prob: 0.5})\n        if step % 100 == 0:\n            print(sess.run(loss, feed_dict={x: batch[0], y_: batch[1], keep_prob: 1.0}))\n\n    correct_prediction = tf.equal(tf.argmax(output, 1), tf.argmax(y_, 1))\n    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n    print('test accuracy %g' % accuracy.eval(feed_dict={x: dataset.test.images, y_: dataset.test.labels, keep_prob: 1.0}))\n\n\n\u5b9f\u884c\n\u5b9f\u884c\u7d50\u679c\u306f\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u3002\u30af\u30ed\u30b9\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u304c\u4e0b\u304c\u3063\u3066\u3044\u308b\u69d8\u5b50\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n9.8893\n1.68918\n0.602403\n0.261183\n0.0490791\n0.0525591\n0.0133087\n0.0121071\n0.00673524\n0.00580989\n\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u4ee5\u4e0b\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u52d5\u304b\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nPyFaceRecognizer\n\n\n\u304a\u308f\u308a\u306b\n\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u7528\u3044\u3066\u65e2\u5b58\u306e\u9854\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u5bfe\u3057\u3066\u9854\u8a8d\u8b58\u3092\u884c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\u6b21\u306f\u30ab\u30e1\u30e9\u304b\u3089\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u53d6\u5f97\u3057\u305f\u753b\u50cf\u3092\u4f7f\u3063\u3066\u3001\u9854\u691c\u77e5\u30fb\u9854\u8a8d\u8b58\u3092\u3084\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u53c2\u8003\u8cc7\u6599\n\nTensorFlow\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\n\u6df1\u5c64\u5b66\u7fd2 (\u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb\u30b7\u30ea\u30fc\u30ba)\n\n# \u306f\u3058\u3081\u306b\n![s_\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-07-27 12.37.01.png](https://qiita-image-store.s3.amazonaws.com/0/77079/960963a7-9099-0e62-36b7-33736761ad8d.png)\n\n\u3053\u3093\u306b\u3061\u306f\u3001[Hironsan](http://qiita.com/Hironsan)\u3067\u3059\u3002\n\n\u9854\u8a8d\u8b58\u306f\u753b\u50cf\u4e2d\u306b\u6620\u3063\u305f\u4eba\u3092\u691c\u77e5\u3057\u3001\u4eba\u7269\u306e\u8b58\u5225\u3092\u884c\u3046\u6280\u8853\u3067\u3059\u3002\u9854\u8a8d\u8b58\u306e\u7528\u9014\u3068\u3057\u3066\u306f\u3001\u76e3\u8996\u30ab\u30e1\u30e9\u306e\u30b7\u30b9\u30c6\u30e0\u306b\u7d44\u307f\u8fbc\u3093\u3067\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u5411\u4e0a\u306b\u5f79\u7acb\u3066\u305f\u308a\u3001\u30ed\u30dc\u30c3\u30c8\u306b\u7d44\u307f\u8fbc\u3093\u3067\u5bb6\u65cf\u306e\u9854\u3092\u8a8d\u8b58\u3055\u305b\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u3042\u3052\u3089\u308c\u307e\u3059\u3002\n\n\u4eca\u56de\u306fTensorFlow\u3092\u4f7f\u3063\u3066\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u69cb\u7bc9\u3057\u3001\u65e2\u5b58\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f7f\u3063\u3066\u9854\u8a8d\u8b58\u5668\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\n# \u5bfe\u8c61\u8aad\u8005\n\n* \u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af(CNN)\u3092\u77e5\u3063\u3066\u3044\u308b\n* TensorFlow\u3067\u3069\u3046\u66f8\u304f\u304b\u306f\u308f\u304b\u3089\u306a\u3044\n\nCNN\u306e\u7406\u8ad6\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u3092\u898b\u308c\u3070\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n* [Convolutional Neural Network\u3068\u306f\u4f55\u306a\u306e\u304b](http://qiita.com/icoxfog417/items/5fd55fad152231d706c2)\n\n# \u6e96\u5099\n## TensorFlow\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nTensorFlow\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u516c\u5f0f\u30b5\u30a4\u30c8\u304c\u4e01\u5be7\u306b\u89e3\u8aac\u3057\u3066\u3044\u308b\u306e\u3067\u305d\u3061\u3089\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n* [TensorFlow\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb](https://www.tensorflow.org/versions/r0.9/get_started/os_setup.html)\n\n## \u30c7\u30fc\u30bf\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n\u307e\u305a\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u7528\u610f\u3057\u307e\u3059\u3002\u4eca\u56de\u306f\u4ee5\u4e0b\u306e\u9854\u753b\u50cf\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n* [Olivetti Faces](http://www.cs.nyu.edu/~roweis/data.html)\n\n\u3053\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u306f40\u4eba\u5206\u306e\u753b\u50cf\u304c\u540410\u679a\u305a\u3064\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\u5404\u753b\u50cf\u30b5\u30a4\u30ba\u306f64x64\u3067\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u753b\u50cf\u3067\u3059\u3002\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-07-25 22.30.04.png](https://qiita-image-store.s3.amazonaws.com/0/77079/c381389a-e8c0-27ab-d94c-6d689831a0fd.png)\n\n\n# \u753b\u50cf\u306e\u8aad\u307f\u8fbc\u307f\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u7528\u610f\u3057\u305f\u3089\u3001\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n[PyFaceRecognizer/example/input_data.py](https://github.com/Hironsan/PyFaceRecognizer/blob/master/example/input_data.py)\n\n```py\nimport input_data\ndataset = input_data.read_data_sets('data/olivettifaces.mat')\n```\n\u3053\u3053\u3067\u3001dataset\u306f\u5b66\u7fd2\u30c7\u30fc\u30bf\u3001\u691c\u8a3c\u30c7\u30fc\u30bf\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u542b\u3093\u3067\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u8aad\u307f\u8fbc\u3093\u3060\u6bb5\u968e\u3067\u753b\u50cf\u30b5\u30a4\u30ba\u309232x32\u306b\u7e2e\u5c0f\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n<!--\n# \u30bb\u30c3\u30b7\u30e7\u30f3\u306e\u958b\u59cb\nTensorflow\u3067\u306e\u8a08\u7b97\u306f\u3001\u9ad8\u52b9\u7387\u306eC++\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u306b\u4f9d\u5b58\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u3068\u306e\u63a5\u7d9a\u3092\u30bb\u30c3\u30b7\u30e7\u30f3\u3068\u547c\u3073\u307e\u3059\u3002 TensorFlow\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4e00\u822c\u7684\u306a\u4f7f\u7528\u6cd5\u306f\u3001\u307e\u305a\u30b0\u30e9\u30d5\u3092\u4f5c\u6210\u3057\u3001\u30bb\u30c3\u30b7\u30e7\u30f3\u3067\u305d\u308c\u3092\u8d77\u52d5\u3059\u308b\u3053\u3068\u3067\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001\u30b3\u30fc\u30c9\u3092\u69cb\u9020\u5316\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066TensorFlow\u3092\u3088\u308a\u67d4\u8edf\u306b\u3059\u308b\u4fbf\u5229\u306aInteractiveSession\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u3053\u308c\u3092\u4f7f\u3048\u3070\u3001\u8a08\u7b97\u30b0\u30e9\u30d5\u3092\u5b9f\u884c\u3059\u308b\u9593\u306b\u3001\u30b0\u30e9\u30d5\u3092\u69cb\u7bc9\u3059\u308b\u64cd\u4f5c\u3092\u306f\u3055\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u3053\u3068\u306f\u3001iPython\u306e\u3088\u3046\u306a\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u306a\u72b6\u6cc1\u3067\u4f5c\u696d\u3059\u308b\u5834\u5408\u3001\u7279\u306b\u4fbf\u5229\u3067\u3059\u3002InteractiveSession\u3092\u4f7f\u7528\u3057\u306a\u3044\u5834\u5408\u306f\u3001\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u958b\u59cb\u3057\u3001\u30b0\u30e9\u30d5\u3092\u8d77\u52d5\u3059\u308b\u524d\u306b\u3001\u5168\u4f53\u306e\u30b0\u30e9\u30d5\u3092\u69cb\u7bc9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n```py\nimport tensorflow as tf\nsess = tf.InteractiveSession()\n```\n\n\u3053\u306e\u8fba\u308a\u306bplaceholder\u3092\u66f8\u3044\u3066\u304a\u304f\u3002\n-->\n\n# \u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u69cb\u7bc9\n\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af(CNN)\u3092\u7528\u3044\u3066\u9854\u8a8d\u8b58\u3092\u884c\u3044\u307e\u3059\u3002\u5168\u4f53\u50cf\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n<img width=\"781\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-07-27 13.19.06.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/77079/c5896d0e-b09d-b11f-e8f1-88801e478d5d.png\">\n\n\u5404\u5c64\u306econv, pool, fc\u306f\u305d\u308c\u305e\u308c\u7573\u307f\u8fbc\u307f\u5c64\u3001\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\u3001\u5168\u7d50\u5408\u5c64\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002\u95a2\u6570\u6b04\u306eReL\u306f\u6b63\u898f\u5316\u7dda\u5f62\u95a2\u6570\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8868\u306b\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n| \u5c64\u7a2e\u30fb\u540d\u79f0 | \u30d1\u30c3\u30c1  | \u30b9\u30c8\u30e9\u30a4\u30c9  | \u51fa\u529b\u30de\u30c3\u30d7\u30b5\u30a4\u30ba  |  \u95a2\u6570  |\n|---------|:------:|:-------:|:--------------:|:-----:|\n| data    |    -   |    -    |  32 x 32 x 1   |   -   |\n| conv1   |  5 x 5 |    1    |  32 x 32 x 32  |  ReL  |\n| pool1   |  2 x 2 |    2    |  16 x 16 x 32  |   -   |\n| conv2   |  5 x 5 |    1    |  16 x 16 x 64  |  ReL  |\n| pool2   |  2 x 2 |    2    |   8 x  8 x 64  |   -   |\n| fc3     |    -   |    -    |   1 x 1 x 1024 |  ReL  |\n| fc4     |    -   |    -    |   1 x 1 x 40   |  softmax |\n\n\u30b3\u30fc\u30c9\u3067\u66f8\u3044\u3066\u3042\u3052\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u307b\u307c\u305d\u306e\u307e\u307e\u3067\u3059\u306d\u3002\n[PyFaceRecognizer/example/run.py](https://github.com/Hironsan/PyFaceRecognizer/blob/master/example/run.py)\n\n```py3\ndef inference(input_placeholder, keep_prob):\n    W_conv1 = weight_variable([5, 5, 1, 32])  # \u6700\u521d\u306e\uff12\u3064\u306f\u30d1\u30c3\u30c1\u30b5\u30a4\u30ba\u3002\u6b8b\u308a\u306f\u5165\u529b\u30c1\u30e3\u30cd\u30eb\u3068\u51fa\u529b\u30c1\u30e3\u30cd\u30eb\u306e\u6570\n    b_conv1 = bias_variable([32])\n\n    x_image = tf.reshape(input_placeholder, [-1, 32, 32, 1])  # \u7b2c\uff12\u3001\u7b2c\uff13\u306e\u6b21\u5143\u306f\u753b\u50cf\u306e\u5e45\u3068\u9ad8\u3055\u3001\u6700\u5f8c\u306e\u6b21\u5143\u306f\u30ab\u30e9\u30fc\u30fb\u30c1\u30e3\u30cd\u30eb\u306e\u6570\n\n    h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)  # \u305f\u305f\u307f\u8fbc\u307f\n    h_pool1 = max_pool_2x2(h_conv1)  # max\u30d7\u30fc\u30ea\u30f3\u30b0\n\n    W_conv2 = weight_variable([5, 5, 32, 64])\n    b_conv2 = bias_variable([64])\n\n    h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\n    h_pool2 = max_pool_2x2(h_conv2)\n\n    W_fc1 = weight_variable([8 * 8 * 64, 1024])\n    b_fc1 = bias_variable([1024])\n\n    h_pool2_flat = tf.reshape(h_pool2, [-1, 8 * 8 * 64])\n    h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\n\n    h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n\n    W_fc2 = weight_variable([1024, 40])\n    b_fc2 = bias_variable([40])\n\n    y_conv = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)  # \u51fa\u529b\u305d\u3046\n\n    return y_conv\n```\n\n<!--\n\n\u3053\u306e\u5c64\u306b\u5408\u308f\u305b\u308b\u305f\u3081\u306b\u3001\u307e\u305ax\u3092\uff14\u6b21\u5143\u30c6\u30f3\u30bd\u30eb\u306b\u5909\u5f62\u3057\u307e\u3059\u3002\u7b2c\uff12\u3001\u7b2c\uff13\u306e\u6b21\u5143\u306f\u753b\u50cf\u306e\u5e45\u3068\u9ad8\u3055\u306b\u5bfe\u5fdc\u3057\u3001\u6700\u5f8c\u306e\u6b21\u5143\u306f\u30ab\u30e9\u30fc\u30fb\u30c1\u30e3\u30cd\u30eb\u306e\u6570\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n\n```py\nx_image = tf.reshape(x, [-1, 32, 32, 1])\n```\n-->\n\n## \u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u3068\u8a55\u4fa1\ninference\u306b\u30e2\u30c7\u30eb\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\u6b21\u306f\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3059\u308b\u305f\u3081\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\u305d\u308c\u304closs\u3068training\u3067\u3059\u3002loss\u3067\u306f\u30af\u30ed\u30b9\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u3092\u8a08\u7b97\u3057\u3001training\u3067\u306fAdam\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u3092\u4f7f\u7528\u3057\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u66f4\u65b0\u3092\u884c\u3063\u3066\u3044\u304d\u307e\u3059\u3002\u30b3\u30fc\u30c9\u306b\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\n```py3\ndef loss(output, supervisor_labels_placeholder):\n    cross_entropy = tf.reduce_mean(-tf.reduce_sum(supervisor_labels_placeholder * tf.log(output), reduction_indices=[1]))\n    return cross_entropy\n\n\ndef training(loss):\n    train_step = tf.train.AdamOptimizer(1e-4).minimize(loss)\n    return train_step\n```\n\n\u4ee5\u4e0a\u3067\u5b9a\u7fa9\u3057\u305f\u3001inference, loss, training\u3092\u7528\u3044\u3066\u9854\u8a8d\u8b58\u3092\u884c\u3044\u307e\u3059\u3002\u8a13\u7df4\u30d7\u30ed\u30bb\u30b9\u306e100\u53cd\u5fa9\u3054\u3068\u306b\u30ed\u30b0\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\u30c6\u30b9\u30c8\u3059\u308b\u3068\u304d\u306f\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u3055\u305b\u306a\u3044\u3088\u3046\u306b\u3001keep_peob\u30921.0\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n```py\nwith tf.Session() as sess:\n    output = inference(x, keep_prob)\n    loss = loss(output, y_)\n    training_op = training(loss)\n\n    init = tf.initialize_all_variables()\n    sess.run(init)\n\n    for step in range(1000):\n        batch = dataset.train.next_batch(40)\n        sess.run(training_op, feed_dict={x: batch[0], y_: batch[1], keep_prob: 0.5})\n        if step % 100 == 0:\n            print(sess.run(loss, feed_dict={x: batch[0], y_: batch[1], keep_prob: 1.0}))\n\n    correct_prediction = tf.equal(tf.argmax(output, 1), tf.argmax(y_, 1))\n    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n    print('test accuracy %g' % accuracy.eval(feed_dict={x: dataset.test.images, y_: dataset.test.labels, keep_prob: 1.0}))\n```\n\n## \u5b9f\u884c\n\u5b9f\u884c\u7d50\u679c\u306f\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u3002\u30af\u30ed\u30b9\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u304c\u4e0b\u304c\u3063\u3066\u3044\u308b\u69d8\u5b50\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n```shell-session\n9.8893\n1.68918\n0.602403\n0.261183\n0.0490791\n0.0525591\n0.0133087\n0.0121071\n0.00673524\n0.00580989\n```\n\n# \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u4ee5\u4e0b\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u52d5\u304b\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n* [PyFaceRecognizer](https://github.com/Hironsan/PyFaceRecognizer)\n\n# \u304a\u308f\u308a\u306b\n\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u7528\u3044\u3066\u65e2\u5b58\u306e\u9854\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u5bfe\u3057\u3066\u9854\u8a8d\u8b58\u3092\u884c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\u6b21\u306f\u30ab\u30e1\u30e9\u304b\u3089\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u53d6\u5f97\u3057\u305f\u753b\u50cf\u3092\u4f7f\u3063\u3066\u3001\u9854\u691c\u77e5\u30fb\u9854\u8a8d\u8b58\u3092\u3084\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u53c2\u8003\u8cc7\u6599\n\n* [TensorFlow\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb](https://www.tensorflow.org/)\n* [\u6df1\u5c64\u5b66\u7fd2 (\u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb\u30b7\u30ea\u30fc\u30ba)](https://www.amazon.co.jp/%E6%B7%B1%E5%B1%A4%E5%AD%A6%E7%BF%92-%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92%E3%83%97%E3%83%AD%E3%83%95%E3%82%A7%E3%83%83%E3%82%B7%E3%83%A7%E3%83%8A%E3%83%AB%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA-%E5%B2%A1%E8%B0%B7-%E8%B2%B4%E4%B9%8B/dp/4061529021/ref=sr_1_1?ie=UTF8&qid=1469600155&sr=8-1&keywords=%E6%B7%B1%E5%B1%A4%E5%AD%A6%E7%BF%92)\n", "tags": ["\u6a5f\u68b0\u5b66\u7fd2", "TensorFlow", "\u753b\u50cf\u51e6\u7406", "DeepLearning", "Python"]}