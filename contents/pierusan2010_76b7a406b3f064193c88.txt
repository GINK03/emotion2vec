{"tags": ["async", ".NET4.5", "C#"], "context": " More than 1 year has passed since last update.neue cc \u3055\u3093\u306e\u8a18\u4e8b\u3092\u62dd\u898b\u3057\u3066\u601d\u3044\u3064\u3044\u305f\u3053\u3068\u306e\u30e1\u30e2\u3002\nasync\u306e\u843d\u3068\u3057\u7a74Part3, async void\u3092\u907f\u3051\u308b\u3079\u304d100\u5104\u306e\u7406\u7531\n(\u203b\u601d\u3044\u4ed8\u304d\u3067\u3059\u306e\u3067\u3001\u898b\u5f53\u9055\u3044\u3060\u3063\u305f\u308a\u3059\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3054\u610f\u898b\u3092\u9802\u3051\u308b\u3068\u52a9\u304b\u308a\u3059\u3002)\n\n\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u5185\u3067\u306f Observable.Create(With async) \u3092\u4f7f\u3046\n\u5f15\u6570\u306b\u3001\u623b\u308a\u5024\u304cTask\u306e\u30c7\u30ea\u30b2\u30fc\u30c8\u3092\u6e21\u3059Observable.Create\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\npublic static IObservable<T> Create<T>(Func<IObserver<T>, CancellationToken, Task> subscribeAsync)\n\n\u4e2d\u8eab\u306f\u3053\u3093\u306a\u611f\u3058\n\u203b\u53c2\u8003: http://go4answers.webhost4life.com/Example/observablecreate-async-166592.aspx\npublic static IObservable<T> Create<T>(Func<IObserver<T>, CancellationToken, Task> subscribeAsync)\n{\n    return Observable.Create<T>(observer =>\n        {\n            var cts = new CancellationTokenSource();\n            var task = subscribeAsync(observer, cts.Token);\n            var subscription = task.ToObservable().Subscribe(_ => { }, observer.OnError, observer.OnCompleted);\n            return new CompositeDisposable(subscription, new CancellationDisposable(cts));\n        });\n}\n\n\u5f15\u6570\u306e\u30c7\u30ea\u30b1\u30fc\u30c8\u5185\u3067\u3001\u3068\u3042\u308b\u975e\u540c\u671f\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002\npublic static async Task ToaruAsyncMethod()\n{\n    await Task.Delay(2000);\n}\n\nprivate void NanikanoEventHandler(Object sender, EventArgs e)\n{\n     var io = ObservableExt.Create<Unit>(async (observer, ct) =>\n            {\n                await ToaruMethod();\n            });\n    disposable = io.Subscribe(\n            _ => { }, \n            error => logger.WriteLine(\"error! \" + error.Message), \n            () => logger.WriteLine(\"completed!\"));\n}\n\n\n\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u306basync \u3092\u66f8\u304b\u306a\u304f\u3066\u6e08\u307f\u307e\u3059\nOnError\u3067\u30a8\u30e9\u30fc\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u304c\u3067\u304d\u307e\u3059\nOnCompleted\u3067\u5b8c\u4e86\u901a\u77e5\u3082\u53d7\u3051\u53d6\u308c\u307e\u3059\n\nneue cc \u3055\u3093\u306e\u8a18\u4e8b\u3092\u62dd\u898b\u3057\u3066\u601d\u3044\u3064\u3044\u305f\u3053\u3068\u306e\u30e1\u30e2\u3002\n[async\u306e\u843d\u3068\u3057\u7a74Part3, async void\u3092\u907f\u3051\u308b\u3079\u304d100\u5104\u306e\u7406\u7531](http://neue.cc/2013/10/10_429.html)\n\n(\u203b\u601d\u3044\u4ed8\u304d\u3067\u3059\u306e\u3067\u3001\u898b\u5f53\u9055\u3044\u3060\u3063\u305f\u308a\u3059\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3054\u610f\u898b\u3092\u9802\u3051\u308b\u3068\u52a9\u304b\u308a\u3059\u3002)\n\n## \u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u5185\u3067\u306f Observable.Create(With async) \u3092\u4f7f\u3046\n\n\u5f15\u6570\u306b\u3001\u623b\u308a\u5024\u304cTask\u306e\u30c7\u30ea\u30b2\u30fc\u30c8\u3092\u6e21\u3059Observable.Create\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n```csharp\npublic static IObservable<T> Create<T>(Func<IObserver<T>, CancellationToken, Task> subscribeAsync)\n```\n\n\u4e2d\u8eab\u306f\u3053\u3093\u306a\u611f\u3058\n\u203b\u53c2\u8003: http://go4answers.webhost4life.com/Example/observablecreate-async-166592.aspx\n\n```csharp\npublic static IObservable<T> Create<T>(Func<IObserver<T>, CancellationToken, Task> subscribeAsync)\n{\n    return Observable.Create<T>(observer =>\n        {\n            var cts = new CancellationTokenSource();\n            var task = subscribeAsync(observer, cts.Token);\n            var subscription = task.ToObservable().Subscribe(_ => { }, observer.OnError, observer.OnCompleted);\n            return new CompositeDisposable(subscription, new CancellationDisposable(cts));\n        });\n}\n```\n\n\u5f15\u6570\u306e\u30c7\u30ea\u30b1\u30fc\u30c8\u5185\u3067\u3001\u3068\u3042\u308b\u975e\u540c\u671f\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\n```csharp\npublic static async Task ToaruAsyncMethod()\n{\n    await Task.Delay(2000);\n}\n\nprivate void NanikanoEventHandler(Object sender, EventArgs e)\n{\n     var io = ObservableExt.Create<Unit>(async (observer, ct) =>\n            {\n                await ToaruMethod();\n            });\n    disposable = io.Subscribe(\n            _ => { }, \n            error => logger.WriteLine(\"error! \" + error.Message), \n            () => logger.WriteLine(\"completed!\"));\n}\n```\n\n- \u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u306basync \u3092\u66f8\u304b\u306a\u304f\u3066\u6e08\u307f\u307e\u3059\n- OnError\u3067\u30a8\u30e9\u30fc\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u304c\u3067\u304d\u307e\u3059\n- OnCompleted\u3067\u5b8c\u4e86\u901a\u77e5\u3082\u53d7\u3051\u53d6\u308c\u307e\u3059\n"}