{"context": "\n\n\u306f\u3058\u3081\u306b\nEnterprise Identity WG\u304c\u300eOpenID Connect\u3068SCIM\u306e\u30a8\u30f3\u30bf\u30fc\u30d7\u30e9\u30a4\u30ba\u5229\u7528\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3\u300f\u3068\u300e(\u540c)\u5b9f\u88c5\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3\u300f\u3092\u516c\u958b\u3057\u307e\u3057\u305f\u3002\nhttps://www.openid.or.jp/news/2016/03/eiwg-guideline.html\n\u975e\u5e38\u306b\u8aad\u307f\u5fdc\u3048\u306e\u3042\u308b\u5185\u5bb9\u3067\u3001\u5b9f\u88c5\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3\u306b\u306fRuby\u306b\u3088\u308b\u5b9f\u88c5\u4f8b\u3082\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002\nhttps://github.com/openid-foundation-japan/eiwg-guideline-samples\n\u3053\u306e\u8a18\u4e8b\u3067\u306fJava\u306b\u3088\u308b\u5b9f\u88c5\u4f8b\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n\u5b9f\u884c\u74b0\u5883\n\u4e0b\u8a18\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u52d5\u4f5c\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\n- Java 8(1.8.0_91)\n- Tomcat 8(8.0.33)\n- JSR 353: Java API for JSON Processing(1.0.4)\n- JSON Web Token for Java and Android(0.6.0)\n- FasterXML Jackson(2.7.0)\n- Apache Commons Lang(3-3.4)\n- Apache Log4j 2(2.5)\n\n\u5b9f\u88c5\u65b9\u91dd\n\u30b7\u30f3\u30d7\u30eb\u306bSERVLET/JSP\u3067JavaDB\u3092\u5229\u7528\u3057\u307e\u3057\u305f\u3002\u4ee5\u4e0b\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5229\u7528\u3057\u307e\u3057\u305f\u3002\n- servlet-api.jar\n- derby.jar\n- commons-lang3-3.4.jar\n- jackson-annotations-2.7.0.jar\n- jackson-core-2.7.0.jar\n- jackson-databind-2.7.0.jar\n- javax.json-1.0.4.jar\n- jjwt-0.6.0.jar\n\u4ee5\u4e0b\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\ncreate table profile(uid varchar(128) not null primary key, passwd varchar(256) not null, email varchar(256), phone_number varchar(256), name varchar(256), given_name varchar(256), family_name varchar(256), middle_name varchar(256), nickname varchar(256), address varchar(1024));\ncreate table client(client_id varchar(128) not null primary key,  secret varchar(256) not null, scope varchar(256) not null, redirect_uri varchar(256));\ncreate table session(uid varchar(128) not null, access_token varchar(256) not null primary key, issued_in timestamp not null, scope varchar(256) not null,  client_id varchar(256) not null);\n\n\n\u30ed\u30b0\u51fa\u529b\n\u30ed\u30b0\u51fa\u529b\u306b\u306fApache Log4j 2\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5229\u7528\u3057\u307e\u3059\u3002\u30a2\u30af\u30bb\u30b9\u30ed\u30b0\u3001\u30a8\u30e9\u30fc\u30ed\u30b0\u306fINFO\u3001\u30c7\u30d0\u30c3\u30b0\u30ed\u30b0\u306fTRACE\u3068\u3057\u307e\u3059\u3002\n- log4j-api-2.5.jar\n- log4j-core-2.5.jar\n- log4j-web-2.5.jar\nlog4j2.json\n{\n  \"configuration\": {\n    \"status\": \"off\",\n    \"appenders\": {\n        \"File\": {\"name\": \"File\",\n                 \"fileName\": \"logs/myop.log\",\n                 \"PatternLayout\": {\"pattern\": \"%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n\"}\n        }\n    },\n    \"loggers\": {\n        \"root\": {\"level\": \"info\",\n                 \"AppenderRef\": {\"ref\": \"File\"}\n        }\n    }\n  }\n}\n\n\nDISCOVERY\n/.well-known/openid-configuration\u306b\u30a2\u30af\u30bb\u30b9\u304c\u6765\u305f\u3089\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8868\u793a\u3057\u307e\u3059\u3002\nopenid-configuration.json\n\n/jks_uri\u306b\u30a2\u30af\u30bb\u30b9\u304c\u6765\u305f\u3089\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8868\u793a\u3057\u307e\u3059\u3002\njks_uri.json\n\n\nAUTHORIZE\nImplicit Flow\u306e\u4e0b\u8a18\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\n- response_type\n- prompt\n- login_hint\n- max_age\n- client_id\n- redirect_uri\n- scope\n- state\n- nonce\naccess_token\u306f\u4ee5\u4e0b\u3067\u751f\u6210\u3057\u307e\u3059\u3002DB\u306ePRIMARY KEY\u306b\u3059\u308b\u3053\u3068\u3067\u4e00\u610f\u6027\u306f\u4fdd\u8a3c\u3055\u308c\u307e\u3059\u3002\naccess_token = RandomStringUtils.randomAlphanumeric(32);\n\nat_hash\u306f\u4ee5\u4e0b\u3067\u751f\u6210\u3057\u307e\u3059\u3002\nmd.update(access_token.getBytes());\ncipher_byte = md.digest();\nbyte[] half_cipher_byte = Arrays.copyOf(cipher_byte, (cipher_byte.length / 2));\nString at_hash = Base64.getEncoder().withoutPadding().encodeToString(half_cipher_byte);\n\n\u79d8\u5bc6\u9375\u306f\u4ee5\u4e0b\u3067\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\npath = context.getRealPath(\"/WEB-INF/private.der\");\nFile filePrivateKey = new File(path);\nFileInputStream fis = new FileInputStream(path);\nbyte[] encodedPrivateKey = new byte[(int) filePrivateKey.length()];\nfis.read(encodedPrivateKey);\nfis.close();\nKeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\nPKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(encodedPrivateKey);\nPrivateKey privateKey = keyFactory.generatePrivate(privateKeySpec);\n\nid_token\u306f\u4ee5\u4e0b\u3067\u751f\u6210\u3057\u307e\u3059\u3002\nCalendar exp = Calendar.getInstance();\nexp.add(Calendar.SECOND, access_token_time);\nid_token = Jwts.builder().setHeaderParam(\"alg\", \"RS256\").setHeaderParam(\"typ\", \"JWT\").setHeaderParam(\"kid\", kit).setIssuer(issuer).claim(\"at_hash\",at_hash).setSubject(username).setAudience(client_id).claim(\"nonce\",nonce).setSubject(username).setExpiration(exp.getTime()).setIssuedAt(Calendar.getInstance().getTime()).claim(\"auth_time\",String.valueOf(Calendar.getInstance().getTime().getTime()).substring(0,10)).signWith(SignatureAlgorithm.RS256,privateKey).compact();\n\n\nLOGIN\n\u8a8d\u8a3c\u51e6\u7406\u306e\u305f\u3081\u306b\u4e0b\u8a18\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\u30ed\u30b0\u30a4\u30f3\u6210\u529f\u306e\u5834\u5408\u306f\u30b7\u30f3\u30b0\u30eb\u30b5\u30a4\u30f3\u30aa\u30f3\u306e\u305f\u3081\u306b\u30bb\u30c3\u30b7\u30e7\u30f3\u3067\u4fdd\u6301\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n- username\n- password\n\u5165\u529b\u3055\u308c\u305f\u30d1\u30b9\u30ef\u30fc\u30c9\u306f\u30cf\u30c3\u30b7\u30e5\u5316\u3057\u3066DB\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3068\u6bd4\u8f03\u3057\u307e\u3059\u3002\nbyte[] cipher_byte;\nMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\nmd.update(password.getBytes());\ncipher_byte = md.digest();\nString sha256_password = Base64.getEncoder().withoutPadding().encodeToString(cipher_byte);\n\nprompt\u30d1\u30e9\u30e1\u30fc\u30bf\u306bconsent\u304c\u542b\u307e\u308c\u308b\u5834\u5408\u306f\u540c\u610f\u51e6\u7406\u30d5\u30e9\u30b0consent\u3092true\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\nCONSENT\n\u540c\u610f\u51e6\u7406\u306e\u305f\u3081\u306b\u4e0b\u8a18\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\n- consent\n- scope\n- openid\n- profile\n- email\n- phone\n- address\nscope\u3092\u5404\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306b\u5206\u89e3\u3057\u307e\u3059\u3002\n\uff1cinput type=\"checkbox\" name=\"openid\" value=\"openid\" checked=\"true\"\uff1eopenid\uff1cbr\uff1e\n<% if (authorize.getScope().contains(\"profile\")) { %>\n\uff1cinput type=\"checkbox\" name=\"profile\" value=\"profile\" checked=\"true\"\uff1eprofile\uff1cbr\uff1e\n<% } if (authorize.getScope().contains(\"email\")) { %>\n\uff1cinput type=\"checkbox\" name=\"email\" value=\"email\" checked=\"true\"\uff1eemail\uff1cbr\uff1e\n<% } if (authorize.getScope().contains(\"phone\")) { %>\n\uff1cinput type=\"checkbox\" name=\"phone\" value=\"phone\" checked=\"true\"\uff1ephone\uff1cbr\uff1e\n<% } if (authorize.getScope().contains(\"address\")) { %>\n\uff1cinput type=\"checkbox\" name=\"address\" value=\"address\" checked=\"true\"\uff1eaddress\uff1cbr\uff1e\n<% } %>\n\nOK\u306e\u5834\u5408\u306f\u540c\u610f\u51e6\u7406\u30d5\u30e9\u30b0consent\u3092false\u306b\u8a2d\u5b9a\u3057\u3066authorize\u306bPOST\u3057\u307e\u3059\u3002CANCEL\u306e\u5834\u5408\u306f\u30a8\u30e9\u30fc\u3092redirect_uri\u306b#\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u3067\u8fd4\u3057\u307e\u3059\u3002\n\uff1cinput type=\"hidden\" name=\"consent\" value=\"false\"\uff1e\n\n\nLOGOUT\n\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u7121\u52b9\u5316\u3057\u3066\u30ed\u30b0\u30a2\u30a6\u30c8\u30da\u30fc\u30b8\u3092\u8868\u793a\u3057\u307e\u3059\u3002\nHttpSession session = request.getSession(false);\nif (session != null) {\n    session.invalidate();\n}\nRequestDispatcher rd = ctx.getRequestDispatcher(\"/logout.jsp\");\nrd.forward(request, response);\n\n\nERROR\n\u7570\u5e38\u51e6\u7406\u306e\u305f\u3081\u306b\u4e0b\u8a18\u30a8\u30e9\u30fc\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\u30a8\u30e9\u30fc\u306fredirect_uri\u306b#\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u3067\u8fd4\u3057\u307e\u3059\u3002\n\nerror=access_denied&error_description=User%20authentication%20failed.\n\nerror=invalid_scope&error_description=The%20scope%20value%20is%20not%20supported.\n\nerror=unauthorized_clienti&error_description=Client%20authentication%20failed.\n\nerror=unsupported_response_type&error_description==The%20response_type%20value%20%22nnn%22%20is%20not%20supported.\n\nerror=invalid_request&error_description=redirect_uri%20is%20not%20valid.\n\nerror=invalid_request&error_description=nonce%20is%20not%20valid.\n\n\n\n\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n\u3053\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u3067\u306fOpenID\u30d5\u30a1\u30a6\u30f3\u30c7\u30fc\u30b7\u30e7\u30f3\u30fb\u30b8\u30e3\u30d1\u30f3 Enterprise Identity WG \u304c\u516c\u958b\u3057\u305f\u300eOpenID Connect\u3068SCIM\u306e\u30a8\u30f3\u30bf\u30fc\u30d7\u30e9\u30a4\u30ba\u5b9f\u88c5\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3\u300f\u306b\u5408\u308f\u305b\u305f\u30b9\u30af\u30e9\u30c3\u30c1\u5b9f\u88c5\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\nJava\u306b\u3088\u308bOP\u30b5\u30fc\u30d0\u30fc\u306e\u30b9\u30af\u30e9\u30c3\u30c1\u5b9f\u88c5\u4f8b\nhttps://github.com/namikitakeo/myop\n# \u306f\u3058\u3081\u306b\nEnterprise Identity WG\u304c\u300eOpenID Connect\u3068SCIM\u306e\u30a8\u30f3\u30bf\u30fc\u30d7\u30e9\u30a4\u30ba\u5229\u7528\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3\u300f\u3068\u300e(\u540c)\u5b9f\u88c5\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3\u300f\u3092\u516c\u958b\u3057\u307e\u3057\u305f\u3002\nhttps://www.openid.or.jp/news/2016/03/eiwg-guideline.html\n\u975e\u5e38\u306b\u8aad\u307f\u5fdc\u3048\u306e\u3042\u308b\u5185\u5bb9\u3067\u3001\u5b9f\u88c5\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3\u306b\u306fRuby\u306b\u3088\u308b\u5b9f\u88c5\u4f8b\u3082\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002\nhttps://github.com/openid-foundation-japan/eiwg-guideline-samples\n\n\u3053\u306e\u8a18\u4e8b\u3067\u306fJava\u306b\u3088\u308b\u5b9f\u88c5\u4f8b\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n# \u5b9f\u884c\u74b0\u5883\n\u4e0b\u8a18\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u52d5\u4f5c\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\n- Java 8(1.8.0_91)\n- Tomcat 8(8.0.33)\n- JSR 353: Java API for JSON Processing(1.0.4)\n- JSON Web Token for Java and Android(0.6.0)\n- FasterXML Jackson(2.7.0)\n- Apache Commons Lang(3-3.4)\n- Apache Log4j 2(2.5)\n\n# \u5b9f\u88c5\u65b9\u91dd\n\u30b7\u30f3\u30d7\u30eb\u306bSERVLET/JSP\u3067JavaDB\u3092\u5229\u7528\u3057\u307e\u3057\u305f\u3002\u4ee5\u4e0b\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5229\u7528\u3057\u307e\u3057\u305f\u3002\n- servlet-api.jar\n- derby.jar\n- commons-lang3-3.4.jar\n- jackson-annotations-2.7.0.jar\n- jackson-core-2.7.0.jar\n- jackson-databind-2.7.0.jar\n- javax.json-1.0.4.jar\n- jjwt-0.6.0.jar\n\n\u4ee5\u4e0b\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n<pre>\ncreate table profile(uid varchar(128) not null primary key, passwd varchar(256) not null, email varchar(256), phone_number varchar(256), name varchar(256), given_name varchar(256), family_name varchar(256), middle_name varchar(256), nickname varchar(256), address varchar(1024));\ncreate table client(client_id varchar(128) not null primary key,  secret varchar(256) not null, scope varchar(256) not null, redirect_uri varchar(256));\ncreate table session(uid varchar(128) not null, access_token varchar(256) not null primary key, issued_in timestamp not null, scope varchar(256) not null,  client_id varchar(256) not null);\n</pre>\n\n# \u30ed\u30b0\u51fa\u529b\n\u30ed\u30b0\u51fa\u529b\u306b\u306fApache Log4j 2\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5229\u7528\u3057\u307e\u3059\u3002\u30a2\u30af\u30bb\u30b9\u30ed\u30b0\u3001\u30a8\u30e9\u30fc\u30ed\u30b0\u306fINFO\u3001\u30c7\u30d0\u30c3\u30b0\u30ed\u30b0\u306fTRACE\u3068\u3057\u307e\u3059\u3002\n- log4j-api-2.5.jar\n- log4j-core-2.5.jar\n- log4j-web-2.5.jar\n\nlog4j2.json\n<pre>\n{\n  \"configuration\": {\n    \"status\": \"off\",\n    \"appenders\": {\n        \"File\": {\"name\": \"File\",\n                 \"fileName\": \"logs/myop.log\",\n                 \"PatternLayout\": {\"pattern\": \"%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n\"}\n        }\n    },\n    \"loggers\": {\n        \"root\": {\"level\": \"info\",\n                 \"AppenderRef\": {\"ref\": \"File\"}\n        }\n    }\n  }\n}\n</pre>\n\n# DISCOVERY\n/.well-known/openid-configuration\u306b\u30a2\u30af\u30bb\u30b9\u304c\u6765\u305f\u3089\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n<pre>\nopenid-configuration.json\n</pre>\n\n/jks_uri\u306b\u30a2\u30af\u30bb\u30b9\u304c\u6765\u305f\u3089\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n<pre>\njks_uri.json\n</pre>\n\n# AUTHORIZE\nImplicit Flow\u306e\u4e0b\u8a18\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\n- response_type\n- prompt\n- login_hint\n- max_age\n- client_id\n- redirect_uri\n- scope\n- state\n- nonce\n\naccess_token\u306f\u4ee5\u4e0b\u3067\u751f\u6210\u3057\u307e\u3059\u3002DB\u306ePRIMARY KEY\u306b\u3059\u308b\u3053\u3068\u3067\u4e00\u610f\u6027\u306f\u4fdd\u8a3c\u3055\u308c\u307e\u3059\u3002\n<pre>\naccess_token = RandomStringUtils.randomAlphanumeric(32);\n</pre>\n\nat_hash\u306f\u4ee5\u4e0b\u3067\u751f\u6210\u3057\u307e\u3059\u3002\n<pre>\nmd.update(access_token.getBytes());\ncipher_byte = md.digest();\nbyte[] half_cipher_byte = Arrays.copyOf(cipher_byte, (cipher_byte.length / 2));\nString at_hash = Base64.getEncoder().withoutPadding().encodeToString(half_cipher_byte);\n</pre>\n                   \n\u79d8\u5bc6\u9375\u306f\u4ee5\u4e0b\u3067\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n<pre>\npath = context.getRealPath(\"/WEB-INF/private.der\");\nFile filePrivateKey = new File(path);\nFileInputStream fis = new FileInputStream(path);\nbyte[] encodedPrivateKey = new byte[(int) filePrivateKey.length()];\nfis.read(encodedPrivateKey);\nfis.close();\nKeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\nPKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(encodedPrivateKey);\nPrivateKey privateKey = keyFactory.generatePrivate(privateKeySpec);\n</pre>\n\nid_token\u306f\u4ee5\u4e0b\u3067\u751f\u6210\u3057\u307e\u3059\u3002\n<pre>\nCalendar exp = Calendar.getInstance();\nexp.add(Calendar.SECOND, access_token_time);\nid_token = Jwts.builder().setHeaderParam(\"alg\", \"RS256\").setHeaderParam(\"typ\", \"JWT\").setHeaderParam(\"kid\", kit).setIssuer(issuer).claim(\"at_hash\",at_hash).setSubject(username).setAudience(client_id).claim(\"nonce\",nonce).setSubject(username).setExpiration(exp.getTime()).setIssuedAt(Calendar.getInstance().getTime()).claim(\"auth_time\",String.valueOf(Calendar.getInstance().getTime().getTime()).substring(0,10)).signWith(SignatureAlgorithm.RS256,privateKey).compact();\n</pre>\n\n# LOGIN\n\u8a8d\u8a3c\u51e6\u7406\u306e\u305f\u3081\u306b\u4e0b\u8a18\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\u30ed\u30b0\u30a4\u30f3\u6210\u529f\u306e\u5834\u5408\u306f\u30b7\u30f3\u30b0\u30eb\u30b5\u30a4\u30f3\u30aa\u30f3\u306e\u305f\u3081\u306b\u30bb\u30c3\u30b7\u30e7\u30f3\u3067\u4fdd\u6301\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n- username\n- password\n\n\u5165\u529b\u3055\u308c\u305f\u30d1\u30b9\u30ef\u30fc\u30c9\u306f\u30cf\u30c3\u30b7\u30e5\u5316\u3057\u3066DB\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3068\u6bd4\u8f03\u3057\u307e\u3059\u3002\n<pre>\nbyte[] cipher_byte;\nMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\nmd.update(password.getBytes());\ncipher_byte = md.digest();\nString sha256_password = Base64.getEncoder().withoutPadding().encodeToString(cipher_byte);\n</pre>\n\nprompt\u30d1\u30e9\u30e1\u30fc\u30bf\u306bconsent\u304c\u542b\u307e\u308c\u308b\u5834\u5408\u306f\u540c\u610f\u51e6\u7406\u30d5\u30e9\u30b0consent\u3092true\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n# CONSENT\n\u540c\u610f\u51e6\u7406\u306e\u305f\u3081\u306b\u4e0b\u8a18\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\n- consent\n- scope\n- openid\n- profile\n- email\n- phone\n- address\n\nscope\u3092\u5404\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306b\u5206\u89e3\u3057\u307e\u3059\u3002\n<pre>\n\uff1cinput type=\"checkbox\" name=\"openid\" value=\"openid\" checked=\"true\"\uff1eopenid\uff1cbr\uff1e\n<% if (authorize.getScope().contains(\"profile\")) { %>\n\uff1cinput type=\"checkbox\" name=\"profile\" value=\"profile\" checked=\"true\"\uff1eprofile\uff1cbr\uff1e\n<% } if (authorize.getScope().contains(\"email\")) { %>\n\uff1cinput type=\"checkbox\" name=\"email\" value=\"email\" checked=\"true\"\uff1eemail\uff1cbr\uff1e\n<% } if (authorize.getScope().contains(\"phone\")) { %>\n\uff1cinput type=\"checkbox\" name=\"phone\" value=\"phone\" checked=\"true\"\uff1ephone\uff1cbr\uff1e\n<% } if (authorize.getScope().contains(\"address\")) { %>\n\uff1cinput type=\"checkbox\" name=\"address\" value=\"address\" checked=\"true\"\uff1eaddress\uff1cbr\uff1e\n<% } %><p>\n</pre>\n\nOK\u306e\u5834\u5408\u306f\u540c\u610f\u51e6\u7406\u30d5\u30e9\u30b0consent\u3092false\u306b\u8a2d\u5b9a\u3057\u3066authorize\u306bPOST\u3057\u307e\u3059\u3002CANCEL\u306e\u5834\u5408\u306f\u30a8\u30e9\u30fc\u3092redirect_uri\u306b#\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u3067\u8fd4\u3057\u307e\u3059\u3002\n\n<pre>\n\uff1cinput type=\"hidden\" name=\"consent\" value=\"false\"\uff1e\n</pre>\n\n# LOGOUT\n\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u7121\u52b9\u5316\u3057\u3066\u30ed\u30b0\u30a2\u30a6\u30c8\u30da\u30fc\u30b8\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n<pre>\nHttpSession session = request.getSession(false);\nif (session != null) {\n    session.invalidate();\n}\nRequestDispatcher rd = ctx.getRequestDispatcher(\"/logout.jsp\");\nrd.forward(request, response);\n</pre>\n\n# ERROR\n\u7570\u5e38\u51e6\u7406\u306e\u305f\u3081\u306b\u4e0b\u8a18\u30a8\u30e9\u30fc\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\u30a8\u30e9\u30fc\u306fredirect_uri\u306b#\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u3067\u8fd4\u3057\u307e\u3059\u3002\n<pre>\n#error=access_denied&error_description=User%20authentication%20failed.\n#error=invalid_scope&error_description=The%20scope%20value%20is%20not%20supported.\n#error=unauthorized_clienti&error_description=Client%20authentication%20failed.\n#error=unsupported_response_type&error_description==The%20response_type%20value%20%22nnn%22%20is%20not%20supported.\n#error=invalid_request&error_description=redirect_uri%20is%20not%20valid.\n#error=invalid_request&error_description=nonce%20is%20not%20valid.\n</pre>\n\n# \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n\u3053\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u3067\u306fOpenID\u30d5\u30a1\u30a6\u30f3\u30c7\u30fc\u30b7\u30e7\u30f3\u30fb\u30b8\u30e3\u30d1\u30f3 Enterprise Identity WG \u304c\u516c\u958b\u3057\u305f\u300eOpenID Connect\u3068SCIM\u306e\u30a8\u30f3\u30bf\u30fc\u30d7\u30e9\u30a4\u30ba\u5b9f\u88c5\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3\u300f\u306b\u5408\u308f\u305b\u305f\u30b9\u30af\u30e9\u30c3\u30c1\u5b9f\u88c5\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\n\nJava\u306b\u3088\u308bOP\u30b5\u30fc\u30d0\u30fc\u306e\u30b9\u30af\u30e9\u30c3\u30c1\u5b9f\u88c5\u4f8b\nhttps://github.com/namikitakeo/myop\n", "tags": ["openid_connect", "OAuth2.0", "oauth2"]}