{"context": " More than 1 year has passed since last update.\u30aa\u30d5\u30e9\u30a4\u30f3\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u300c\u3069\u3046\u66f8\u304f\u300d\u3092\u3084\u308b\u30a4\u30d9\u30f3\u30c8\u3002\nhttp://atnd.org/events/32979\n\u306e\u53c2\u8003\u554f\u984c\nhttp://nabetani.sakura.ne.jp/hena/ord5railsontiles/ ( http://qiita.com/items/0ddde0164a745cd09c34 )\n\u306e\u5b9f\u88c5\u3002\n\u6700\u521d\u306b\u66f8\u3044\u305f\u3082\u306e\u3002\n\u81ea\u5206\u3068\u3057\u3066\u306f\u666e\u901a\u306b\u66f8\u3044\u305f\u3064\u3082\u308a\u3060\u3051\u3069\u3001\u4eca\u3072\u3068\u3064\u30a8\u30ec\u30ac\u30f3\u30c8\u3067\u306f\u306a\u3044\u3068\u3044\u3046\u304b\u3001\u30b9\u30de\u30fc\u30c8\u3055\u306b\u6b20\u3051\u308b\u3068\u3044\u3046\u304b\u3001\u305d\u3093\u306a\u611f\u3058\u3002\n#!ruby\n#coding:utf-8\n\ndef nextpos( path, tiles )\n    dir = path.last[1]\n    pos=path.last[0].ord - ?A.ord\n    newdir=case tiles[ pos ]\n    when \"1\" then dir.reverse\n    when \"2\" then dir.reverse.map{ |i| -i }\n    else dir.dup\n    end\n    newpos = [ pos%3+newdir[0], pos/3+newdir[1] ]\n    return nil unless newpos.all?{ |xy| (0..2)===xy }\n    [ (newpos[0]+newpos[1]*3+?A.ord).chr, newdir ]\nend\n\ndef solve( tiles )\n    path=[['B',[0,1]]] # array of (  pair of position and direction )\n    loop{\n        np = nextpos( path, tiles )\n        break unless np\n        path << np\n    }\n    path.map{ |i| i[0] }.join\nend\n\nDATA.each{ |line|\n    num, input, expected = line.split( /\\s+/ )\n    actual = solve( input )\n    error = actual==expected ? \"\" : \" ** expected is : #{expected} **\"\n    puts \"%s -> %s %s\" % [input, actual, error]\n}\n__END__\n#0  101221102   BEDGHIFEH\n\n\u4f8b\u306b\u3088\u3063\u3066\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u3092\u7701\u7565\u3002\n\u3053\u3046\u3057\u3066\u307f\u3066\u307f\u308b\u3068\u3001\u3084\u3063\u3071\u308a solve \u306e\u4e2d\u306e loop \u304c\u6c5a\u3044\u6c17\u304c\u3059\u308b\u3002\n\u6226\u8853\u3068\u3057\u3066\u306f\u3001\n\n\u4e8c\u6b21\u5143\u306e\u307e\u307e\u3067\u51e6\u7406\u3002\n\u7d42\u4e86\u5224\u5b9a\u306f\u756a\u5175\u3067\u306f\u306a\u304f\u5ea7\u6a19\u306e\u5024\u3002\n\u5730\u56f3\u30c7\u30fc\u30bf\u306f\u6587\u5b57\u30b3\u30fc\u30c9\u304b\u3089\u751f\u6210\u3002\n\n\u3068\u3001\u3059\u3079\u3066 nidouchi \u3055\u3093\u306e\u5b9f\u88c5( http://qiita.com/items/ed5fa743164638de72b1 )\u3068\u9006\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\u30aa\u30d5\u30e9\u30a4\u30f3\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u300c\u3069\u3046\u66f8\u304f\u300d\u3092\u3084\u308b\u30a4\u30d9\u30f3\u30c8\u3002\nhttp://atnd.org/events/32979\n\u306e\u53c2\u8003\u554f\u984c\nhttp://nabetani.sakura.ne.jp/hena/ord5railsontiles/ ( http://qiita.com/items/0ddde0164a745cd09c34 )\n\u306e\u5b9f\u88c5\u3002\n\n\u6700\u521d\u306b\u66f8\u3044\u305f\u3082\u306e\u3002\n\n\u81ea\u5206\u3068\u3057\u3066\u306f\u666e\u901a\u306b\u66f8\u3044\u305f\u3064\u3082\u308a\u3060\u3051\u3069\u3001\u4eca\u3072\u3068\u3064\u30a8\u30ec\u30ac\u30f3\u30c8\u3067\u306f\u306a\u3044\u3068\u3044\u3046\u304b\u3001\u30b9\u30de\u30fc\u30c8\u3055\u306b\u6b20\u3051\u308b\u3068\u3044\u3046\u304b\u3001\u305d\u3093\u306a\u611f\u3058\u3002\n\n```ruby\n#!ruby\n#coding:utf-8\n\ndef nextpos( path, tiles )\n    dir = path.last[1]\n    pos=path.last[0].ord - ?A.ord\n    newdir=case tiles[ pos ]\n    when \"1\" then dir.reverse\n    when \"2\" then dir.reverse.map{ |i| -i }\n    else dir.dup\n    end\n    newpos = [ pos%3+newdir[0], pos/3+newdir[1] ]\n    return nil unless newpos.all?{ |xy| (0..2)===xy }\n    [ (newpos[0]+newpos[1]*3+?A.ord).chr, newdir ]\nend\n\ndef solve( tiles )\n    path=[['B',[0,1]]] # array of (  pair of position and direction )\n    loop{\n        np = nextpos( path, tiles )\n        break unless np\n        path << np\n    }\n    path.map{ |i| i[0] }.join\nend\n\nDATA.each{ |line|\n    num, input, expected = line.split( /\\s+/ )\n    actual = solve( input )\n    error = actual==expected ? \"\" : \" ** expected is : #{expected} **\"\n    puts \"%s -> %s %s\" % [input, actual, error]\n}\n__END__\n#0  101221102   BEDGHIFEH\n```\n\n\u4f8b\u306b\u3088\u3063\u3066\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u3092\u7701\u7565\u3002\n\n\u3053\u3046\u3057\u3066\u307f\u3066\u307f\u308b\u3068\u3001\u3084\u3063\u3071\u308a solve \u306e\u4e2d\u306e loop \u304c\u6c5a\u3044\u6c17\u304c\u3059\u308b\u3002\n\n\u6226\u8853\u3068\u3057\u3066\u306f\u3001\n\n* \u4e8c\u6b21\u5143\u306e\u307e\u307e\u3067\u51e6\u7406\u3002\n* \u7d42\u4e86\u5224\u5b9a\u306f\u756a\u5175\u3067\u306f\u306a\u304f\u5ea7\u6a19\u306e\u5024\u3002\n* \u5730\u56f3\u30c7\u30fc\u30bf\u306f\u6587\u5b57\u30b3\u30fc\u30c9\u304b\u3089\u751f\u6210\u3002\n\n\u3068\u3001\u3059\u3079\u3066 nidouchi \u3055\u3093\u306e\u5b9f\u88c5( http://qiita.com/items/ed5fa743164638de72b1 )\u3068\u9006\u306b\u306a\u3063\u3066\u3044\u308b\u3002", "tags": ["\u3069\u3046\u66f8\u304f", "yhpg", "Ruby"]}