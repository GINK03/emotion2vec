{"tags": ["Kotlin", "Groovy"], "context": "\u305f\u3068\u3048\u3070\u3001\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3042\u308b \u62e1\u5f35\u5b50 .png \u3092\u6301\u3063\u305f\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u307f\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3057\u305f\u3044\u5834\u5408\u3002\nkotlin \u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3051\u308b\u3002\n\nlistup-png.kts\nimport java.io.File\nval list = File(\".\").listFiles().filter( { it.name.endsWith(\".png\") } ).map( {it.name} )\n\n\n\u6b21\u306b png \u3067\u306f\u306a\u304f jpg \u3092\u5217\u6319\u3057\u305f\u3044\u5834\u5408...\n\nlistup-jpg.kts\nimport java.io.File\nval list = File(\".\").listFiles().filter( { it.name.endsWith(\".jpg\") } ).map( {it.name} )\n\n\n\u3068\u66f8\u3051\u3070\u3044\u3044\u306e\u3060\u304c\u3001\u6b21\u306b bmp \u306e\u5834\u5408\u306f\u30fb\u30fb\u30fb\u3068\u306a\u308b\u3068\u3053\u306e\u30d5\u30a3\u30eb\u30bf\u5b9f\u88c5\u90e8\u5206\u3060\u3051\u3092\u5207\u308a\u96e2\u3057\u305f\u304f\u306a\u308b\u3002\n\u3082\u3057 Groovy \u306a\u3089\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\nlistup.groovy\ndef pngFilter = { it.name.endsWith(\".png\") }\ndef jpgFilter = { it.name.endsWith(\".jpg\") }\ndef bmpFilter = { it.name.endsWith(\".bmp\") }\n\ndef list = new File(\".\").listFiles().findAll( pngFilter ).collect( {it.name} )\n\n\nkotlin \u3082\u540c\u3058\u30ce\u30ea\u3067\u5b9f\u88c5\u3057\u3066\u307f\u308b\u3068\u30fb\u30fb\u30fb\n\nlistup-png-2.kts\nval pngFilter = { it.name.endsWith(\".png\") }\nval list = File(\".\").listFiles().filter( pngFilter ).map( {it.name} )\n\n\n\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u6012\u3089\u308c\u308b\u3002\nerror: type inference failed: inline fun <T> kotlin.Array<out T>.filter(predicate: (T) -> kotlin.Boolean): kotlin.collections.List<T>\n\n\u3069\u3046\u3084\u3089 predicate: (T) -> kotlin.Boolean \u3068\u3044\u3046\u95a2\u6570\u578b\u304c\u304f\u308b\u3053\u3068\u3092\u671f\u5f85\u3057\u3066\u3044\u308b\u3088\u3001\u3068\u3044\u3046\u3053\u3068\u3089\u3057\u3044\u3002\n(T) \u306e\u90e8\u5206\u306f\u3001\u4eca\u306e\u6587\u8108\u3067\u306f File \u304c\u304f\u308b\u3068\u3053\u308d\u306a\u306e\u3067\u3001File \u306b\u7f6e\u304d\u63db\u3048\u3066\u3001pngFilter \u306b\u578b\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u30b3\u30fc\u30c9\u306b\u4fee\u6b63\u3002\n\nlistup-png-3.kts\nval pngFilter:(predicate:File)->kotlin.Boolean = { it.name.endsWith(\".png\") }\nval list = File(\".\").listFiles().filter( pngFilter ).map( {it.name} )\n\n\n\u3053\u308c\u3067\u610f\u56f3\u901a\u308a\u4f5c\u52d5\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\u305f\u3068\u3048\u3070\u3001\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3042\u308b \u62e1\u5f35\u5b50 .png \u3092\u6301\u3063\u305f\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u307f\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3057\u305f\u3044\u5834\u5408\u3002\nkotlin \u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3051\u308b\u3002\n\n```kotlin:listup-png.kts\nimport java.io.File\nval list = File(\".\").listFiles().filter( { it.name.endsWith(\".png\") } ).map( {it.name} )\n```\n\n\u6b21\u306b png \u3067\u306f\u306a\u304f jpg \u3092\u5217\u6319\u3057\u305f\u3044\u5834\u5408...\n\n```kotlin:listup-jpg.kts\nimport java.io.File\nval list = File(\".\").listFiles().filter( { it.name.endsWith(\".jpg\") } ).map( {it.name} )\n```\n\n\u3068\u66f8\u3051\u3070\u3044\u3044\u306e\u3060\u304c\u3001\u6b21\u306b bmp \u306e\u5834\u5408\u306f\u30fb\u30fb\u30fb\u3068\u306a\u308b\u3068\u3053\u306e\u30d5\u30a3\u30eb\u30bf\u5b9f\u88c5\u90e8\u5206\u3060\u3051\u3092\u5207\u308a\u96e2\u3057\u305f\u304f\u306a\u308b\u3002\n\n\u3082\u3057 Groovy \u306a\u3089\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n```groovy:listup.groovy\ndef pngFilter = { it.name.endsWith(\".png\") }\ndef jpgFilter = { it.name.endsWith(\".jpg\") }\ndef bmpFilter = { it.name.endsWith(\".bmp\") }\n\ndef list = new File(\".\").listFiles().findAll( pngFilter ).collect( {it.name} )\n```\n\nkotlin \u3082\u540c\u3058\u30ce\u30ea\u3067\u5b9f\u88c5\u3057\u3066\u307f\u308b\u3068\u30fb\u30fb\u30fb\n\n```kotlin:listup-png-2.kts\nval pngFilter = { it.name.endsWith(\".png\") }\nval list = File(\".\").listFiles().filter( pngFilter ).map( {it.name} )\n```\n\n\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u6012\u3089\u308c\u308b\u3002\n\n```kotlin\nerror: type inference failed: inline fun <T> kotlin.Array<out T>.filter(predicate: (T) -> kotlin.Boolean): kotlin.collections.List<T>\n```\n\n\u3069\u3046\u3084\u3089 ```predicate: (T) -> kotlin.Boolean``` \u3068\u3044\u3046\u95a2\u6570\u578b\u304c\u304f\u308b\u3053\u3068\u3092\u671f\u5f85\u3057\u3066\u3044\u308b\u3088\u3001\u3068\u3044\u3046\u3053\u3068\u3089\u3057\u3044\u3002\n\n```(T)``` \u306e\u90e8\u5206\u306f\u3001\u4eca\u306e\u6587\u8108\u3067\u306f File \u304c\u304f\u308b\u3068\u3053\u308d\u306a\u306e\u3067\u3001File \u306b\u7f6e\u304d\u63db\u3048\u3066\u3001pngFilter \u306b\u578b\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u30b3\u30fc\u30c9\u306b\u4fee\u6b63\u3002\n\n```kotlin:listup-png-3.kts\nval pngFilter:(predicate:File)->kotlin.Boolean = { it.name.endsWith(\".png\") }\nval list = File(\".\").listFiles().filter( pngFilter ).map( {it.name} )\n```\n\n\u3053\u308c\u3067\u610f\u56f3\u901a\u308a\u4f5c\u52d5\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\n\n\n\n"}