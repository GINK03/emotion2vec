{"context": " More than 1 year has passed since last update.\n\n\u30af\u30e9\u30de\u30fc\u306e V \u4fc2\u6570\n\u30af\u30ed\u30b9\u96c6\u8a08\u8868\u3067\u96e2\u6563\u5909\u6570\u9593\u3067\u306e\u72ec\u7acb\u6027\u3092\u691c\u5b9a\u3059\u308b\u305f\u3081\u306b\u30ab\u30a4\u4e8c\u4e57\u691c\u5b9a\u3092\u3059\u308b\u8a71\u306f\u4ee5\u524d\u306b\u8aac\u660e\u3057\u307e\u3057\u305f\u3002\n\u30ab\u30a4\u4e8c\u4e57\u5024 \u03c7^2 \u304c\u5927\u304d\u3044\u307b\u3069 2 \u5909\u6570\u306e\u95a2\u9023\u306f\u5f37\u3044\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002\u3057\u304b\u3057 \u03c7^2 \u5024\u306f\u30af\u30ed\u30b9\u96c6\u8a08\u8868\u306e\u5927\u304d\u3055\u3084\u30b1\u30fc\u30b9\u6570\u306b\u4f9d\u5b58\u3057\u307e\u3059\u3057\u3001\u6700\u5927\u5024\u3082\u7570\u306a\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u884c\u30fb\u5217\u306e\u6570\u304c\u7570\u306a\u308b\u30af\u30ed\u30b9\u96c6\u8a08\u8868\u3067\u306f\u6bd4\u8f03\u304c\u96e3\u3057\u3044\u3068\u3044\u3046\u9762\u3082\u3042\u308a\u307e\u3059\u3002\n\u30af\u30e9\u30de\u30fc\u306e V \u4fc2\u6570 \u3067\u306f \u03c7^2 \u3092\u6b21\u5f0f\u3067\u5909\u63db\u3057\u3001\u3069\u3093\u306a\u30af\u30ed\u30b9\u96c6\u8a08\u8868\u3067\u3082\u307e\u3063\u305f\u304f\u95a2\u9023\u306e\u7121\u3044\u72b6\u614b\u3092 0 \u3001\u5b8c\u5168\u306a\u95a2\u9023\u306e\u3042\u308b\u72b6\u614b\u3092 1 \u3068\u3057\u305f\u5024\u3092\u5c0e\u51fa\u3057\u307e\u3059\u3002\n\\Phi_c = \\sqrt{\\frac {\\chi^2} {N(k-1)}}\n\n\u3053\u306e\u3068\u304d N \u306f\u7dcf\u5ea6\u6570\u3001 k \u306f\u30af\u30ed\u30b9\u96c6\u8a08\u8868\u306e\u884c\u6570\u304b\u5217\u6570\u306e\u5c0f\u3055\u3044\u307b\u3046\u3067\u3059\u3002\n\u7dcf\u5ea6\u6570\u3092\u4f7f\u3046\u3053\u3068\u3067\u30b1\u30fc\u30b9\u6570\u306e\u5f71\u97ff\u3092\u88dc\u6b63\u3001\u5217\u6570\u3068\u884c\u6570\u306e\u5c0f\u3055\u3044\u307b\u3046\u3092\u53d6\u308b\u3053\u3068\u3067\u884c\u5217\u6570\u306e\u5f71\u97ff\u3092\u88dc\u6b63\u3057\u307e\u3059\u3002\u307e\u305f\u5143\u304c\u30ab\u30a4\u4e8c\u4e57\u5024\u306a\u306e\u3067\u5e73\u65b9\u6839\u3092\u53d6\u308b\u308f\u3051\u3067\u3059\u306d\u3002\n\n\u30b3\u30fc\u30c9\u3067\u8a08\u7b97\u3059\u308b\n\u3053\u3061\u3089\u306b\u53c2\u8003\u306b\u306a\u308b\u30b3\u30fc\u30c9\u304c\u3042\u308b\u306e\u3067\u5f15\u7528\u3057\u307e\u3059\u3002\nimport numpy as np\n\ndef det2x2(A, v=False):\n    if v:  print('compute 2 x 2 det of')\n    if v:  print(A)\n    assert A.shape == (2,2)\n    return A[0][0]*A[1][1] - A[0][1]*A[1][0]\n\ndef det3x3(A):\n    print('compute 3 x 3 det of')\n    print(A)\n    assert A.shape == (3,3)\n    a,b,c = A[0]\n    c1 = a * det2x2(A[1:3,[1,2]])\n    c2 = b * det2x2(A[1:3,[0,2]])\n    c3 = c * det2x2(A[1:3,[0,1]])\n    return c1 - c2 + c3\n\ndef solve(A):\n    print('solve')\n    print(A, '\\n')\n    assert A.shape == (3,4)\n    D = det3x3(A[:,:3])\n    print('D = ', D, '\\n')\n    if D == 0:\n        print('no solution')\n        return\n    Dx = det3x3(A[:,[3,1,2]])\n    print('Dx = ', Dx, '\\n')\n    Dy = det3x3(A[:,[0,3,2]])\n    print('Dy = ', Dy, '\\n')\n    Dz = det3x3(A[:,[0,1,3]])\n    print('Dz = ', Dz, '\\n')\n    return Dx*1.0/D, Dy*1.0/D, Dz*1.0/D\n\ndef check(A,x,y,z):\n    print('check')\n    for i,r in enumerate(A):\n        print('row', i, '=', r)\n        pL = list()\n        for coeff,var in zip(r[:3],(x,y,z)):\n            c = str(round(coeff,2))\n            v = str(round(var,2))\n            pL.append(c + '*' + v)\n        print(' + '.join(pL), end=' ')\n        print(' =', r[0]*x + r[1]*y + r[2]*z, '\\n')\n\n\n\u5b9f\u884c\u3059\u308b\u3068\u3053\u3046\u306a\u308a\u307e\u3059\u3002\nimport numpy as np\nimport cramer\n\ndef run_cramer():\n    L = [2, 3, 0, 5,\n         1, 1, 1, 3,\n         2,-1, 3, 7]\n    A = np.array(L)\n    A.shape = (3,4)\n    result = cramer.solve(A)\n    if result:\n        x,y,z = result\n        print('solution')\n        print('x =', x)\n        print('y =', y)\n        print('z =', z, '\\n')\n        cramer.check(A,x,y,z)\n\nrun_cramer()\n# =>\n# solve\n# [[ 2  3  0  5]\n#  [ 1  1  1  3]\n#  [ 2 -1  3  7]] \n# \n# compute 3 x 3 det of\n# [[ 2  3  0]\n#  [ 1  1  1]\n#  [ 2 -1  3]]\n# D =  5 \n# \n# compute 3 x 3 det of\n# [[ 5  3  0]\n#  [ 3  1  1]\n#  [ 7 -1  3]]\n# Dx =  14 \n# \n# compute 3 x 3 det of\n# [[2 5 0]\n#  [1 3 1]\n#  [2 7 3]]\n# Dy =  -1 \n# \n# compute 3 x 3 det of\n# [[ 2  3  5]\n#  [ 1  1  3]\n#  [ 2 -1  7]]\n# Dz =  2 \n# \n# solution\n# x = 2.8\n# y = -0.2\n# z = 0.4 \n# \n# check\n# row 0 = [2 3 0 5]\n# 2*2.8 + 3*-0.2 + 0*0.4  = 5.0 \n# \n# row 1 = [1 1 1 3]\n# 1*2.8 + 1*-0.2 + 1*0.4  = 3.0 \n# \n# row 2 = [ 2 -1  3  7]\n# 2*2.8 + -1*-0.2 + 3*0.4  = 7.0 \n# \n\n\u307e\u305f\u5f15\u7528\u5143\u306e\u8a18\u4e8b\u306b\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u3061\u3089\u306b\u30aa\u30f3\u30e9\u30a4\u30f3\u8a08\u7b97\u6a5f\u3082\u3042\u308a\u307e\u3059\u3002\n## \u30af\u30e9\u30de\u30fc\u306e V \u4fc2\u6570\n\n\u30af\u30ed\u30b9\u96c6\u8a08\u8868\u3067\u96e2\u6563\u5909\u6570\u9593\u3067\u306e\u72ec\u7acb\u6027\u3092\u691c\u5b9a\u3059\u308b\u305f\u3081\u306b\u30ab\u30a4\u4e8c\u4e57\u691c\u5b9a\u3092\u3059\u308b\u8a71\u306f[\u4ee5\u524d\u306b\u8aac\u660e](http://qiita.com/ynakayama/items/67ddb321a8ce5b07274c)\u3057\u307e\u3057\u305f\u3002\n\n\u30ab\u30a4\u4e8c\u4e57\u5024 \u03c7^2 \u304c\u5927\u304d\u3044\u307b\u3069 2 \u5909\u6570\u306e\u95a2\u9023\u306f\u5f37\u3044\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002\u3057\u304b\u3057 \u03c7^2 \u5024\u306f\u30af\u30ed\u30b9\u96c6\u8a08\u8868\u306e\u5927\u304d\u3055\u3084\u30b1\u30fc\u30b9\u6570\u306b\u4f9d\u5b58\u3057\u307e\u3059\u3057\u3001\u6700\u5927\u5024\u3082\u7570\u306a\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u884c\u30fb\u5217\u306e\u6570\u304c\u7570\u306a\u308b\u30af\u30ed\u30b9\u96c6\u8a08\u8868\u3067\u306f\u6bd4\u8f03\u304c\u96e3\u3057\u3044\u3068\u3044\u3046\u9762\u3082\u3042\u308a\u307e\u3059\u3002\n\n[\u30af\u30e9\u30de\u30fc\u306e V \u4fc2\u6570](http://en.wikipedia.org/wiki/Cram%C3%A9r%27s_V) \u3067\u306f \u03c7^2 \u3092\u6b21\u5f0f\u3067\u5909\u63db\u3057\u3001\u3069\u3093\u306a\u30af\u30ed\u30b9\u96c6\u8a08\u8868\u3067\u3082\u307e\u3063\u305f\u304f\u95a2\u9023\u306e\u7121\u3044\u72b6\u614b\u3092 0 \u3001\u5b8c\u5168\u306a\u95a2\u9023\u306e\u3042\u308b\u72b6\u614b\u3092 1 \u3068\u3057\u305f\u5024\u3092\u5c0e\u51fa\u3057\u307e\u3059\u3002\n\n```math\n\\Phi_c = \\sqrt{\\frac {\\chi^2} {N(k-1)}}\n```\n\n\u3053\u306e\u3068\u304d N \u306f\u7dcf\u5ea6\u6570\u3001 k \u306f\u30af\u30ed\u30b9\u96c6\u8a08\u8868\u306e\u884c\u6570\u304b\u5217\u6570\u306e\u5c0f\u3055\u3044\u307b\u3046\u3067\u3059\u3002\n\n\u7dcf\u5ea6\u6570\u3092\u4f7f\u3046\u3053\u3068\u3067\u30b1\u30fc\u30b9\u6570\u306e\u5f71\u97ff\u3092\u88dc\u6b63\u3001\u5217\u6570\u3068\u884c\u6570\u306e\u5c0f\u3055\u3044\u307b\u3046\u3092\u53d6\u308b\u3053\u3068\u3067\u884c\u5217\u6570\u306e\u5f71\u97ff\u3092\u88dc\u6b63\u3057\u307e\u3059\u3002\u307e\u305f\u5143\u304c\u30ab\u30a4\u4e8c\u4e57\u5024\u306a\u306e\u3067\u5e73\u65b9\u6839\u3092\u53d6\u308b\u308f\u3051\u3067\u3059\u306d\u3002\n\n## \u30b3\u30fc\u30c9\u3067\u8a08\u7b97\u3059\u308b\n\n[\u3053\u3061\u3089](http://telliott99.blogspot.jp/2011/06/cramers-rule-calculation.html)\u306b\u53c2\u8003\u306b\u306a\u308b\u30b3\u30fc\u30c9\u304c\u3042\u308b\u306e\u3067\u5f15\u7528\u3057\u307e\u3059\u3002\n\n```py3\nimport numpy as np\n\ndef det2x2(A, v=False):\n    if v:  print('compute 2 x 2 det of')\n    if v:  print(A)\n    assert A.shape == (2,2)\n    return A[0][0]*A[1][1] - A[0][1]*A[1][0]\n\ndef det3x3(A):\n    print('compute 3 x 3 det of')\n    print(A)\n    assert A.shape == (3,3)\n    a,b,c = A[0]\n    c1 = a * det2x2(A[1:3,[1,2]])\n    c2 = b * det2x2(A[1:3,[0,2]])\n    c3 = c * det2x2(A[1:3,[0,1]])\n    return c1 - c2 + c3\n\ndef solve(A):\n    print('solve')\n    print(A, '\\n')\n    assert A.shape == (3,4)\n    D = det3x3(A[:,:3])\n    print('D = ', D, '\\n')\n    if D == 0:\n        print('no solution')\n        return\n    Dx = det3x3(A[:,[3,1,2]])\n    print('Dx = ', Dx, '\\n')\n    Dy = det3x3(A[:,[0,3,2]])\n    print('Dy = ', Dy, '\\n')\n    Dz = det3x3(A[:,[0,1,3]])\n    print('Dz = ', Dz, '\\n')\n    return Dx*1.0/D, Dy*1.0/D, Dz*1.0/D\n\ndef check(A,x,y,z):\n    print('check')\n    for i,r in enumerate(A):\n        print('row', i, '=', r)\n        pL = list()\n        for coeff,var in zip(r[:3],(x,y,z)):\n            c = str(round(coeff,2))\n            v = str(round(var,2))\n            pL.append(c + '*' + v)\n        print(' + '.join(pL), end=' ')\n        print(' =', r[0]*x + r[1]*y + r[2]*z, '\\n')\n\n```\n\n\u5b9f\u884c\u3059\u308b\u3068\u3053\u3046\u306a\u308a\u307e\u3059\u3002\n\n```py3\nimport numpy as np\nimport cramer\n\ndef run_cramer():\n    L = [2, 3, 0, 5,\n         1, 1, 1, 3,\n         2,-1, 3, 7]\n    A = np.array(L)\n    A.shape = (3,4)\n    result = cramer.solve(A)\n    if result:\n        x,y,z = result\n        print('solution')\n        print('x =', x)\n        print('y =', y)\n        print('z =', z, '\\n')\n        cramer.check(A,x,y,z)\n\nrun_cramer()\n# =>\n# solve\n# [[ 2  3  0  5]\n#  [ 1  1  1  3]\n#  [ 2 -1  3  7]] \n# \n# compute 3 x 3 det of\n# [[ 2  3  0]\n#  [ 1  1  1]\n#  [ 2 -1  3]]\n# D =  5 \n# \n# compute 3 x 3 det of\n# [[ 5  3  0]\n#  [ 3  1  1]\n#  [ 7 -1  3]]\n# Dx =  14 \n# \n# compute 3 x 3 det of\n# [[2 5 0]\n#  [1 3 1]\n#  [2 7 3]]\n# Dy =  -1 \n# \n# compute 3 x 3 det of\n# [[ 2  3  5]\n#  [ 1  1  3]\n#  [ 2 -1  7]]\n# Dz =  2 \n# \n# solution\n# x = 2.8\n# y = -0.2\n# z = 0.4 \n# \n# check\n# row 0 = [2 3 0 5]\n# 2*2.8 + 3*-0.2 + 0*0.4  = 5.0 \n# \n# row 1 = [1 1 1 3]\n# 1*2.8 + 1*-0.2 + 1*0.4  = 3.0 \n# \n# row 2 = [ 2 -1  3  7]\n# 2*2.8 + -1*-0.2 + 3*0.4  = 7.0 \n# \n```\n\n\u307e\u305f\u5f15\u7528\u5143\u306e\u8a18\u4e8b\u306b\u3082\u3042\u308a\u307e\u3059\u304c\u3001[\u3053\u3061\u3089](http://www.analyzemath.com/Calculators/Calculator_syst_eq.html)\u306b\u30aa\u30f3\u30e9\u30a4\u30f3\u8a08\u7b97\u6a5f\u3082\u3042\u308a\u307e\u3059\u3002\n\n\n\n\n\n\n\n\n", "tags": ["numpy", "Python", "math"]}