{"tags": ["spreadsheet", "LibreOffice", "Calc", "OSS", "lecture_doss"], "context": " More than 1 year has passed since last update.\n\n\u524d\u56de\u306e\u307e\u3068\u3081\nLibreOffice\u3092gud-gdb\u3067\u8ffd\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\u30d0\u30f3\u30b6\u30a4\u3002\n\n\u30c7\u30d0\u30c3\u30ac\u3067\u8ffd\u3048\u308b\u3068\u3053\u308d\u307e\u3067\u8ffd\u3063\u3066\u307f\u308b\n\n\u3068\u308a\u3042\u3048\u305abt\n\u524d\u56de\u3084\u3063\u305f\u3088\u3046\u306bLibreOffice\u3092\u8d77\u52d5\u3057\u3066\u307f\u305f\u3051\u3069\u3001\u6050\u308d\u3057\u3044\u304f\u3089\u3044\u8d77\u52d5\u304c\u9045\u3044\u30022\u5206\u304f\u3089\u3044\u304b\u304b\u3063\u305f\u3002\u305f\u3076\u3093\u30c7\u30d0\u30c3\u30b0\u30b7\u30f3\u30dc\u30eb\u3092\u4ed8\u3051\u305f\u304b\u3089\u9045\u3044\u306e\u3060\u308d\u3046\u3002\u6bce\u56de\u3053\u306e\u6642\u9593\u5f85\u3064\u306e\u306f\u304b\u306a\u308a\u82e6\u75db\u306a\u306e\u3060\u304c\u3001\u307e\u3042\u4ed5\u65b9\u306a\u3044\u2026\u3002\nEmacs\u4e0a\u3067C-c C-c\u3092\u62bc\u3059\u3068\u3001\u5b9f\u884c\u3092\u4e2d\u65ad\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u3053\u3053\u3067bt\u3092\u62bc\u3059\u3068\u3069\u306e\u95a2\u6570\u304c\u547c\u3070\u308c\u3066\u3044\u308b\u304b\u308f\u304b\u308b\u3002\n\u76ee\u7684\u306e\u95a2\u6570\u3068\u304b\u3092\u63a2\u3059\u305f\u3081\u306bgrep\u3067\u691c\u7d22\u3057\u305f\u3044\u306e\u3060\u304c\u3001\u5168\u30bd\u30fc\u30b9\u3092\u691c\u7d22\u3057\u3066\u3044\u305f\u3089\u6642\u9593\u304c\u3044\u304f\u3089\u3042\u3063\u3066\u3082\u8db3\u308a\u306a\u3044\u3002calc\u306b\u95a2\u4fc2\u3042\u308a\u305d\u3046\u306a\u3068\u3053\u308d\u3060\u3051\u306b\u7d5e\u3063\u3066\u691c\u7d22\u3057\u305f\u3044\uff01\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001bt\u3067\u898b\u3064\u3051\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u624b\u63a2\u3063\u3066\u307f\u3088\u3046\u3002\n\ngud-gdb\n(gdb) bt\n#0  0x00007ffff755c12d in poll () at ../sysdeps/unix/syscall-template.S:81\n#1  0x00007fffe30d4fe4 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\n#2  0x00007fffe30d50ec in g_main_context_iteration ()\n   from /lib/x86_64-linux-gnu/libglib-2.0.so.0\n#3  0x00007fffe3b6a3e3 in GtkData::Yield (this=0x6284e0, bWait=true, \n    bHandleAllCurrentEvents=false)\n    at /home/denjo/[pass]/team_babumi_project/libreoffice-4.4.5.2/vcl/unx/gtk/app/gtkdata.cxx:575\n#4  0x00007fffe3b6e34c in GtkInstance::Yield (this=0x628430, bWait=true, \n    bHandleAllCurrentEvents=false)\n    at /home/denjo/[pass]/team_babumi_project/libreoffice-4.4.5.2/vcl/unx/gtk/app/gtkinst.cxx:406\n#5  0x00007ffff12a5208 in ImplYield (i_bWait=true, i_bAllEvents=false)\n    at /home/denjo/[pass]/team_babumi_project/libreoffice-4.4.5.2/vcl/source/app/svapp.cxx:360\n#6  0x00007ffff12a1c69 in Application::Yield ()\n    at /home/denjo/[pass]/team_babumi_project/libreoffice-4.4.5.2/vcl/source/app/svapp.cxx:392\n#7  0x00007ffff12a1c17 in Application::Execute ()\n    at /home/denjo/[pass]/team_babumi_project/libreoffice-4.4.5.2/vcl/source/app/svapp.cxx:341\n#8  0x00007ffff784f29f in desktop::Desktop::Main (this=0x7fffffffe170)\n    at /home/denjo/[pass]/team_babumi_project/libreoffice-4.4.5.2/desktop/source/app/app.cxx:1638\n#9  0x00007ffff12a92fa in ImplSVMain ()\n    at /home/denjo/[pass]/team_babumi_project/libreoffice-4.4.5.2/vcl/source/app/svmain.cxx:163\n#10 0x00007ffff12a93f0 in SVMain ()\n    at /home/denjo/[pass]/team_babumi_project/libreoffice-4.4.5.2/vcl/source/app/svmain.cxx:196\n#11 0x00007ffff7892a97 in soffice_main ()\n    at /home/denjo/[pass]/team_babumi_project/libreoffice-4.4.5.2/desktop/source/app/sofficemain.cxx:101\n#12 0x0000000000400964 in sal_main ()\n    at /home/denjo/[pass]/team_babumi_project/libreoffice-4.4.5.2/desktop/source/app/main.c:48\n#13 0x000000000040094a in main (argc=2, argv=0x7fffffffe418)\n    at /home/denjo/[pass]/team_babumi_project/libreoffice-4.4.5.2/desktop/source/app/main.c:47\n\n\n\u305f\u3081\u3057\u306b\u3001ImplYield ()\u3092\u898b\u3066\u307f\u308b\u3002\n\nlibreoffice-4.4.5.2/vcl/source/app/svapp.cxx\ninline void ImplYield( bool i_bWait, bool i_bAllEvents )\n{\n    ImplSVData* pSVData = ImplGetSVData();\n\n    // run timers that have timed out\n    if ( !pSVData->mbNoCallTimer )\n        while ( pSVData->mbNotAllTimerCalled )\n            Timer::ImplTimerCallbackProc();\n\n    pSVData->maAppData.mnDispatchLevel++;\n    // do not wait for events if application was already quit; in that\n    // case only dispatch events already available\n    // do not wait for events either if the app decided that it is too busy for timers\n    // (feature added for the slideshow)\n    pSVData->mpDefInst->Yield( i_bWait && !pSVData->maAppData.mbAppQuit && !pSVData->maAppData.mbNoYield, i_bAllEvents );\n    pSVData->maAppData.mnDispatchLevel--;\n\n    DBG_TESTSOLARMUTEX(); // must be locked on return from Yield\n\n    // flush lazy deleted objects\n    if( pSVData->maAppData.mnDispatchLevel == 0 )\n        vcl::LazyDelete::flush();\n\n    // the system timer events will not necessarily come in non waiting mode\n    // e.g. on OS X; need to trigger timer checks manually\n    if( pSVData->maAppData.mbNoYield && !pSVData->mbNoCallTimer )\n    {\n        do\n        {\n            Timer::ImplTimerCallbackProc();\n        }\n        while( pSVData->mbNotAllTimerCalled );\n    }\n\n    // call post yield listeners\n    if( pSVData->maAppData.mpPostYieldListeners )\n        pSVData->maAppData.mpPostYieldListeners->callListeners( NULL );\n}\n\n\n\nfind-tag\u7528\u306e\u30bf\u30b0\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\nImplSVData\u30af\u30e9\u30b9\u3092\u63a2\u3057\u3066\u307f\u308b\u2026\u3068\u305d\u306e\u524d\u306b\u3001\u5148\u306bfind-tag\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\nshell\n$ find . -regex  \".*\\.+\\(c\\|cxx\\|h\\|hxx\\)\" -print | etags -\n\n\n\n\u30bf\u30b0\u691c\u7d22\u3067\u3069\u3093\u3069\u3093\u5965\u3078\n\nlibreoffice-4.4.5.2/vcl/inc/svdata.hxx\nstruct ImplSVData\n{\n    SalData*                mpSalData;\n    SalInstance*            mpDefInst;          // Default SalInstance\n    Application*            mpApp;              // pApp\n    WorkWindow*             mpDefaultWin;       // Default-Window\n    bool                    mbDeInit;             // Is VCL deinitializing\n    sal_uLong                   mnThreadCount;      // is VCL MultiThread enabled\n    ImplConfigData*         mpFirstConfigData;  // Zeiger auf ersten Config-Block\n    ImplTimerData*          mpFirstTimerData;   // list of all running timers\n    SalTimer*               mpSalTimer;         // interface to sal event loop/timers\n    SalI18NImeStatus*       mpImeStatus;        // interface to ime status window\n    SalSystem*              mpSalSystem;        // SalSystem interface\n    ResMgr*                 mpResMgr;           // SV-Resource-Manager\n    sal_uLong                   mnTimerPeriod;      // current timer period\n    sal_uLong                   mnTimerUpdate;      // TimerCallbackProcs on stack\n    bool                    mbNotAllTimerCalled;// true: Es muessen noch Timer abgearbeitet werden\n    bool                    mbNoCallTimer;      // true: No Timeout calls\n    ImplSVAppData           maAppData;          // indepen data for class Application\n    ImplSVGDIData           maGDIData;          // indepen data for Output classes\n    ImplSVWinData           maWinData;          // indepen data for Windows classes\n    ImplSVCtrlData          maCtrlData;         // indepen data for Control classes\n    ImplSVHelpData          maHelpData;         // indepen data for Help classes\n    ImplSVNWFData           maNWFData;\n    UnoWrapperBase*         mpUnoWrapper;\n    vcl::Window*                 mpIntroWindow;      // the splash screen\n    DockingManager*         mpDockingManager;\n    BlendFrameCache*        mpBlendFrameCache;\n    bool                mbIsTestTool;\n\n    oslThreadIdentifier                     mnMainThreadId;\n    rtl::Reference< vcl::DisplayConnection >            mxDisplayConnection;\n\n    ::com::sun::star::uno::Reference< ::com::sun::star::lang::XComponent > mxAccessBridge;\n    ::vcl::SettingsConfigItem*          mpSettingsConfigItem;\n    std::list< vcl::DeleteOnDeinitBase* >*   mpDeinitDeleteList;\n    boost::unordered_map< int, OUString >*     mpPaperNames;\n\n    Link maDeInitHook;\n};\n\n\nYield()\u95a2\u6570\u3092\u6301\u3063\u3066\u3044\u308bmpDefInst\u30e1\u30f3\u30d0\u306f\u3001SalInstance\u3068\u3044\u3046\u30af\u30e9\u30b9\uff1f\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3089\u3057\u3044\u3002\u305d\u3053\u3067\u3001\u3053\u3093\u3069\u306f\u3053\u308c\u3092\u691c\u7d22\u3057\u3066\u307f\u308b\u3002\n\nlibreoffice-4.4.5.2/vcl/headless/headlessinst.cxx\n// This is our main entry point:\nSalInstance *CreateSalInstance()\n{\n    HeadlessSalInstance* pInstance = new HeadlessSalInstance( new SalYieldMutex() );\n    new HeadlessSalData( pInstance );\n    pInstance->AcquireYieldMutex(1);\n    return pInstance;\n}\n\n\n\u300cThis is our main entry point :\u300d\u3068\u3044\u3046\u8a00\u8449\u306b\u611f\u6168\u3092\u899a\u3048\u3064\u3064\u3001\u3055\u3089\u306b\u5965\u3078\u3002\nHeadlessSalInstance\u30af\u30e9\u30b9\u304cSalInstance\u30af\u30e9\u30b9\u306e\u5b9f\u4f53(?)\u306e\u3088\u3046\u306a\u306e\u3067\u3001\u4eca\u5ea6\u306f\u3053\u3063\u3061\u3092find-tag\u3002\n\nlibreoffice-4.4.5.2/vcl/headless/headlessinst.cxx\nclass HeadlessSalInstance : public SvpSalInstance\n{\npublic:\n    HeadlessSalInstance( SalYieldMutex *pMutex );\n    virtual ~HeadlessSalInstance();\n\n    virtual SalSystem* CreateSalSystem();\n};\n\n\n\u3048\u3001\u3053\u308c\u3060\u3051\uff1f\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5b9f\u88c5\u306f\u4ee5\u4e0b\n\nlibreoffice-4.4.5.2/vcl/headless/headlessinst.cxx\nHeadlessSalInstance::HeadlessSalInstance( SalYieldMutex *pMutex ) :\n    SvpSalInstance( pMutex)\n{\n}\n\n\n\u3053\u306e\u30b3\u30ed\u30f3\u306b\u3064\u3044\u3066\u8abf\u3079\u305f\u3068\u3053\u308d\uff08C++\u5168\u7136\u308f\u304b\u3089\u306a\u3044\uff09\u3001\u3069\u3046\u3084\u3089\u30e1\u30f3\u30d0\u5909\u6570\u3092\u521d\u671f\u5316\u3059\u308b\u69cb\u6587\u3089\u3057\u3044\u3002\nHogeClass () :\n    var (value)\n{\n    // \u5185\u5bb9\n}\n\n\u3067\u3001var\u306bvalue\u3092\u4ee3\u5165\u3059\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306a\u308b\u3002\n\nbt\u306e\u30c7\u30fc\u30bf\u3092\u5143\u306b\u3001\u4e0a\u306e\u65b9\u3078\u9032\u3093\u3067\u307f\u308b\n\nlibreoffice-4.4.5.2/vcl/source/app/svmain.cxx\nbool InitVCL()\n{\n    if( pExceptionHandler != NULL )\n        return false;\n\n    EmbeddedFontsHelper::clearTemporaryFontFiles();\n\n    if( ! ImplGetSVData() )\n        ImplInitSVData();\n\n    if( !ImplGetSVData()->mpApp )\n    {\n        pOwnSvApp = new DummyApplication();\n    }\n    InitSalMain();\n\n    ImplSVData* pSVData = ImplGetSVData();\n\n    // remember Main-Thread-Id\n    pSVData->mnMainThreadId = ::osl::Thread::getCurrentIdentifier();\n\n    // Initialize Sal\n    pSVData->mpDefInst = CreateSalInstance();\n    if ( !pSVData->mpDefInst )\n        return false;\n\n    // Desktop Environment context (to be able to get value of \"system.desktop-environment\" as soon as possible)\n    com::sun::star::uno::setCurrentContext(\n        new DesktopEnvironmentContext( com::sun::star::uno::getCurrentContext() ) );\n\n    // Initialize application instance (should be done after initialization of VCL SAL part)\n    if( pSVData->mpApp )\n        // call init to initialize application class\n        // soffice/sfx implementation creates the global service manager\n        pSVData->mpApp->Init();\n\n    pSVData->mpDefInst->AfterAppInit();\n\n    // Fetch AppFileName and make it absolute before the workdir changes...\n    OUString aExeFileName;\n    osl_getExecutableFile( &aExeFileName.pData );\n\n    // convert path to native file format\n    OUString aNativeFileName;\n    osl::FileBase::getSystemPathFromFileURL( aExeFileName, aNativeFileName );\n    pSVData->maAppData.mpAppFileName = new OUString( aNativeFileName );\n\n    // Initialize global data\n    pSVData->maGDIData.mpScreenFontList     = new PhysicalFontCollection;\n    pSVData->maGDIData.mpScreenFontCache    = new ImplFontCache;\n    pSVData->maGDIData.mpGrfConverter       = new GraphicConverter;\n\n    // Set exception handler\n    pExceptionHandler = osl_addSignalHandler(VCLExceptionSignal_impl, NULL);\n\n    DBGGUI_INIT_SOLARMUTEXCHECK();\n\n#if OSL_DEBUG_LEVEL > 0\n    DebugEventInjector::getCreate();\n#endif\n\n    return true;\n}\n\n\n\u3053\u308c\u304cCreateSalInstance()\u3092\u547c\u3073\u51fa\u3057\u3066\u305f\u95a2\u6570\u3002\u3044\u304b\u306b\u3082\u521d\u671f\u5316\u3057\u307e\u3059\u3063\u3066\u9854\u3057\u3066\u3066\u3001\u3081\u3061\u3083\u304f\u3061\u3083\u602a\u3057\u3044\u3051\u3069\u3001\u3069\u3046\u306b\u3082\u4f55\u3084\u3063\u3066\u308b\u304b\u3088\u304f\u308f\u304b\u3093\u306a\u3044\u2026\u3002\npSVData->mpApp->Init();\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u65b0\u3057\u3044\u30b9\u30ec\u30c3\u30c9\u304c2\u3064\u7acb\u3061\u4e0a\u304c\u3063\u305f\u3002\u305d\u306e1\u3064\u4e0b\u306e\u884c\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u3055\u3063\u304d\u7acb\u3061\u4e0a\u304c\u3063\u305f\u30b9\u30ec\u30c3\u30c9\u306e\u3046\u3061\u5148\u306b\u7acb\u3061\u4e0a\u304c\u3063\u305f\u307b\u3046\u304c\u9589\u3058\u3066\u30012\u3064\u65b0\u898f\u30b9\u30ec\u30c3\u30c9\u304c\u7acb\u3061\u4e0a\u304c\u308b\u3002\n\nlibreoffice-4.4.5.2/vcl/source/app/svmain.cxx\nint ImplSVMain()\n{\n    // The 'real' SVMain()\n    ImplSVData* pSVData = ImplGetSVData();\n\n    DBG_ASSERT( pSVData->mpApp, \"no instance of class Application\" );\n\n    int nReturn = EXIT_FAILURE;\n\n    bool bInit = InitVCL();\n\n    if( bInit )\n    {\n        // call application main\n        pSVData->maAppData.mbInAppMain = true;\n        nReturn = pSVData->mpApp->Main();\n        pSVData->maAppData.mbInAppMain = false;\n    }\n\n    if( pSVData->mxDisplayConnection.is() )\n    {\n        pSVData->mxDisplayConnection->terminate();\n        pSVData->mxDisplayConnection.clear();\n    }\n\n    // This is a hack to work around the problem of the asynchronous nature\n    // of bridging accessibility through Java: on shutdown there might still\n    // be some events in the AWT EventQueue, which need the SolarMutex which\n    // - on the other hand - is destroyed in DeInitVCL(). So empty the queue\n    // here ..\n    if( pSVData->mxAccessBridge.is() )\n    {\n      sal_uLong nCount = Application::ReleaseSolarMutex();\n      pSVData->mxAccessBridge->dispose();\n      Application::AcquireSolarMutex(nCount);\n      pSVData->mxAccessBridge.clear();\n    }\n\n    DeInitVCL();\n    return nReturn;\n}\n\n\n\u3053\u3044\u3064\u304cInitVCL\u3092\u547c\u3073\u51fa\u3057\u3066\u305f\u3084\u3064\u3002\nnReturn = pSVData->mpApp->Main();\u3092next\u3067\u3068\u3073\u3053\u3048\u308b\u3068\u2026\u3042\uff01\u3000LibreOffice\u304c\u958b\u3044\u305f\uff01\n\nlibreoffice-4.4.5.2/desktop/source/app/app.cxx\nint Desktop::Main()\n{\n // (\u9577\u3044\u306e\u3067\u7565)\n}\n\n\n\u7d50\u5c40\u3001\u3053\u3053\u304c\u30e1\u30a4\u30f3\u3068\u3044\u3046\u3053\u3068\u3089\u3057\u3044\u3002\u3053\u3053\u307e\u3067\u9577\u304b\u3063\u305f\u2026\u3002\n\n\u6b21\u56de\u4e88\u544a\n\u6b21\u56de\u306f\u3053\u306eMain()\u95a2\u6570\u3092\u3044\u3058\u3063\u3066\u3001\u521d\u3081\u3066\u9032\u6357\u3092\u751f\u3093\u3067\u307f\u308b\u3002\n\n\u30ea\u30f3\u30af\n\nLibreOfficeCalc\u306b\u95a2\u6570\u5019\u88dc\u8868\u793a\u6a5f\u80fd\u3092\u4ed8\u3051\u308b\u307e\u3067\n\n\u7b2c1\u56de\uff1a\u76ee\u7684\u306e\u8a2d\u5b9a\u3068\u6e96\u5099\n\u7b2c2\u56de\uff1a\u30c7\u30d0\u30c3\u30ac\u3067\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u3092\u63a2\u3059\n\u7b2c3\u56de\uff1a\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u3068\u5168\u63a2\u7d22\n\u7b2c4\u56de\uff1a\u30d5\u30a9\u30eb\u30c0\u540d\u3067\u30a2\u30bf\u30ea\u3092\u4ed8\u3051\u308b\n\u7b2c5\u56de\uff1a\u95a2\u6570\u5019\u88dc\u306e\u96c6\u5408\u3092\u8fd4\u3059\n\u7b2c6\u56de\uff1a\u95a2\u6570\u5019\u88dc\u30fb\u8aac\u660e\u8868\u793a\u6a5f\u80fd\u3092\u5b9f\u88c5\u3059\u308b\n\u7b2c7\u56de\uff1aLibreOffice\u306b\u30b3\u30df\u30c3\u30c8\u3057\u3066\u307f\u308b\n\n#\u524d\u56de\u306e\u307e\u3068\u3081\nLibreOffice\u3092gud-gdb\u3067\u8ffd\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\u30d0\u30f3\u30b6\u30a4\u3002\n#\u30c7\u30d0\u30c3\u30ac\u3067\u8ffd\u3048\u308b\u3068\u3053\u308d\u307e\u3067\u8ffd\u3063\u3066\u307f\u308b\n##\u3068\u308a\u3042\u3048\u305abt\n\u524d\u56de\u3084\u3063\u305f\u3088\u3046\u306bLibreOffice\u3092\u8d77\u52d5\u3057\u3066\u307f\u305f\u3051\u3069\u3001\u6050\u308d\u3057\u3044\u304f\u3089\u3044\u8d77\u52d5\u304c\u9045\u3044\u30022\u5206\u304f\u3089\u3044\u304b\u304b\u3063\u305f\u3002\u305f\u3076\u3093\u30c7\u30d0\u30c3\u30b0\u30b7\u30f3\u30dc\u30eb\u3092\u4ed8\u3051\u305f\u304b\u3089\u9045\u3044\u306e\u3060\u308d\u3046\u3002\u6bce\u56de\u3053\u306e\u6642\u9593\u5f85\u3064\u306e\u306f\u304b\u306a\u308a\u82e6\u75db\u306a\u306e\u3060\u304c\u3001\u307e\u3042\u4ed5\u65b9\u306a\u3044\u2026\u3002\nEmacs\u4e0a\u3067C-c C-c\u3092\u62bc\u3059\u3068\u3001\u5b9f\u884c\u3092\u4e2d\u65ad\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u3053\u3053\u3067bt\u3092\u62bc\u3059\u3068\u3069\u306e\u95a2\u6570\u304c\u547c\u3070\u308c\u3066\u3044\u308b\u304b\u308f\u304b\u308b\u3002\n\u76ee\u7684\u306e\u95a2\u6570\u3068\u304b\u3092\u63a2\u3059\u305f\u3081\u306bgrep\u3067\u691c\u7d22\u3057\u305f\u3044\u306e\u3060\u304c\u3001\u5168\u30bd\u30fc\u30b9\u3092\u691c\u7d22\u3057\u3066\u3044\u305f\u3089\u6642\u9593\u304c\u3044\u304f\u3089\u3042\u3063\u3066\u3082\u8db3\u308a\u306a\u3044\u3002calc\u306b\u95a2\u4fc2\u3042\u308a\u305d\u3046\u306a\u3068\u3053\u308d\u3060\u3051\u306b\u7d5e\u3063\u3066\u691c\u7d22\u3057\u305f\u3044\uff01\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001bt\u3067\u898b\u3064\u3051\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u624b\u63a2\u3063\u3066\u307f\u3088\u3046\u3002\n\n```text:gud-gdb\n(gdb) bt\n#0  0x00007ffff755c12d in poll () at ../sysdeps/unix/syscall-template.S:81\n#1  0x00007fffe30d4fe4 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\n#2  0x00007fffe30d50ec in g_main_context_iteration ()\n   from /lib/x86_64-linux-gnu/libglib-2.0.so.0\n#3  0x00007fffe3b6a3e3 in GtkData::Yield (this=0x6284e0, bWait=true, \n    bHandleAllCurrentEvents=false)\n    at /home/denjo/[pass]/team_babumi_project/libreoffice-4.4.5.2/vcl/unx/gtk/app/gtkdata.cxx:575\n#4  0x00007fffe3b6e34c in GtkInstance::Yield (this=0x628430, bWait=true, \n    bHandleAllCurrentEvents=false)\n    at /home/denjo/[pass]/team_babumi_project/libreoffice-4.4.5.2/vcl/unx/gtk/app/gtkinst.cxx:406\n#5  0x00007ffff12a5208 in ImplYield (i_bWait=true, i_bAllEvents=false)\n    at /home/denjo/[pass]/team_babumi_project/libreoffice-4.4.5.2/vcl/source/app/svapp.cxx:360\n#6  0x00007ffff12a1c69 in Application::Yield ()\n    at /home/denjo/[pass]/team_babumi_project/libreoffice-4.4.5.2/vcl/source/app/svapp.cxx:392\n#7  0x00007ffff12a1c17 in Application::Execute ()\n    at /home/denjo/[pass]/team_babumi_project/libreoffice-4.4.5.2/vcl/source/app/svapp.cxx:341\n#8  0x00007ffff784f29f in desktop::Desktop::Main (this=0x7fffffffe170)\n    at /home/denjo/[pass]/team_babumi_project/libreoffice-4.4.5.2/desktop/source/app/app.cxx:1638\n#9  0x00007ffff12a92fa in ImplSVMain ()\n    at /home/denjo/[pass]/team_babumi_project/libreoffice-4.4.5.2/vcl/source/app/svmain.cxx:163\n#10 0x00007ffff12a93f0 in SVMain ()\n    at /home/denjo/[pass]/team_babumi_project/libreoffice-4.4.5.2/vcl/source/app/svmain.cxx:196\n#11 0x00007ffff7892a97 in soffice_main ()\n    at /home/denjo/[pass]/team_babumi_project/libreoffice-4.4.5.2/desktop/source/app/sofficemain.cxx:101\n#12 0x0000000000400964 in sal_main ()\n    at /home/denjo/[pass]/team_babumi_project/libreoffice-4.4.5.2/desktop/source/app/main.c:48\n#13 0x000000000040094a in main (argc=2, argv=0x7fffffffe418)\n    at /home/denjo/[pass]/team_babumi_project/libreoffice-4.4.5.2/desktop/source/app/main.c:47\n```\n\u305f\u3081\u3057\u306b\u3001`ImplYield ()`\u3092\u898b\u3066\u307f\u308b\u3002\n\n```cpp:libreoffice-4.4.5.2/vcl/source/app/svapp.cxx\ninline void ImplYield( bool i_bWait, bool i_bAllEvents )\n{\n    ImplSVData* pSVData = ImplGetSVData();\n\n    // run timers that have timed out\n    if ( !pSVData->mbNoCallTimer )\n        while ( pSVData->mbNotAllTimerCalled )\n            Timer::ImplTimerCallbackProc();\n\n    pSVData->maAppData.mnDispatchLevel++;\n    // do not wait for events if application was already quit; in that\n    // case only dispatch events already available\n    // do not wait for events either if the app decided that it is too busy for timers\n    // (feature added for the slideshow)\n    pSVData->mpDefInst->Yield( i_bWait && !pSVData->maAppData.mbAppQuit && !pSVData->maAppData.mbNoYield, i_bAllEvents );\n    pSVData->maAppData.mnDispatchLevel--;\n\n    DBG_TESTSOLARMUTEX(); // must be locked on return from Yield\n\n    // flush lazy deleted objects\n    if( pSVData->maAppData.mnDispatchLevel == 0 )\n        vcl::LazyDelete::flush();\n\n    // the system timer events will not necessarily come in non waiting mode\n    // e.g. on OS X; need to trigger timer checks manually\n    if( pSVData->maAppData.mbNoYield && !pSVData->mbNoCallTimer )\n    {\n        do\n        {\n            Timer::ImplTimerCallbackProc();\n        }\n        while( pSVData->mbNotAllTimerCalled );\n    }\n\n    // call post yield listeners\n    if( pSVData->maAppData.mpPostYieldListeners )\n        pSVData->maAppData.mpPostYieldListeners->callListeners( NULL );\n}\n```\n\n##find-tag\u7528\u306e\u30bf\u30b0\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\n`ImplSVData`\u30af\u30e9\u30b9\u3092\u63a2\u3057\u3066\u307f\u308b\u2026\u3068\u305d\u306e\u524d\u306b\u3001\u5148\u306b`find-tag`\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\n```sh:shell\n$ find . -regex  \".*\\.+\\(c\\|cxx\\|h\\|hxx\\)\" -print | etags -\n```\n\n##\u30bf\u30b0\u691c\u7d22\u3067\u3069\u3093\u3069\u3093\u5965\u3078\n```cpp:libreoffice-4.4.5.2/vcl/inc/svdata.hxx\nstruct ImplSVData\n{\n    SalData*                mpSalData;\n    SalInstance*            mpDefInst;          // Default SalInstance\n    Application*            mpApp;              // pApp\n    WorkWindow*             mpDefaultWin;       // Default-Window\n    bool                    mbDeInit;             // Is VCL deinitializing\n    sal_uLong                   mnThreadCount;      // is VCL MultiThread enabled\n    ImplConfigData*         mpFirstConfigData;  // Zeiger auf ersten Config-Block\n    ImplTimerData*          mpFirstTimerData;   // list of all running timers\n    SalTimer*               mpSalTimer;         // interface to sal event loop/timers\n    SalI18NImeStatus*       mpImeStatus;        // interface to ime status window\n    SalSystem*              mpSalSystem;        // SalSystem interface\n    ResMgr*                 mpResMgr;           // SV-Resource-Manager\n    sal_uLong                   mnTimerPeriod;      // current timer period\n    sal_uLong                   mnTimerUpdate;      // TimerCallbackProcs on stack\n    bool                    mbNotAllTimerCalled;// true: Es muessen noch Timer abgearbeitet werden\n    bool                    mbNoCallTimer;      // true: No Timeout calls\n    ImplSVAppData           maAppData;          // indepen data for class Application\n    ImplSVGDIData           maGDIData;          // indepen data for Output classes\n    ImplSVWinData           maWinData;          // indepen data for Windows classes\n    ImplSVCtrlData          maCtrlData;         // indepen data for Control classes\n    ImplSVHelpData          maHelpData;         // indepen data for Help classes\n    ImplSVNWFData           maNWFData;\n    UnoWrapperBase*         mpUnoWrapper;\n    vcl::Window*                 mpIntroWindow;      // the splash screen\n    DockingManager*         mpDockingManager;\n    BlendFrameCache*        mpBlendFrameCache;\n    bool                mbIsTestTool;\n\n    oslThreadIdentifier                     mnMainThreadId;\n    rtl::Reference< vcl::DisplayConnection >            mxDisplayConnection;\n\n    ::com::sun::star::uno::Reference< ::com::sun::star::lang::XComponent > mxAccessBridge;\n    ::vcl::SettingsConfigItem*          mpSettingsConfigItem;\n    std::list< vcl::DeleteOnDeinitBase* >*   mpDeinitDeleteList;\n    boost::unordered_map< int, OUString >*     mpPaperNames;\n\n    Link maDeInitHook;\n};\n```\n`Yield()`\u95a2\u6570\u3092\u6301\u3063\u3066\u3044\u308bmpDefInst\u30e1\u30f3\u30d0\u306f\u3001SalInstance\u3068\u3044\u3046\u30af\u30e9\u30b9\uff1f\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3089\u3057\u3044\u3002\u305d\u3053\u3067\u3001\u3053\u3093\u3069\u306f\u3053\u308c\u3092\u691c\u7d22\u3057\u3066\u307f\u308b\u3002\n\n```cpp:libreoffice-4.4.5.2/vcl/headless/headlessinst.cxx\n// This is our main entry point:\nSalInstance *CreateSalInstance()\n{\n    HeadlessSalInstance* pInstance = new HeadlessSalInstance( new SalYieldMutex() );\n    new HeadlessSalData( pInstance );\n    pInstance->AcquireYieldMutex(1);\n    return pInstance;\n}\n```\n\u300cThis is our main entry point :\u300d\u3068\u3044\u3046\u8a00\u8449\u306b\u611f\u6168\u3092\u899a\u3048\u3064\u3064\u3001\u3055\u3089\u306b\u5965\u3078\u3002\nHeadlessSalInstance\u30af\u30e9\u30b9\u304cSalInstance\u30af\u30e9\u30b9\u306e\u5b9f\u4f53(?)\u306e\u3088\u3046\u306a\u306e\u3067\u3001\u4eca\u5ea6\u306f\u3053\u3063\u3061\u3092find-tag\u3002\n\n```cpp:libreoffice-4.4.5.2/vcl/headless/headlessinst.cxx\nclass HeadlessSalInstance : public SvpSalInstance\n{\npublic:\n    HeadlessSalInstance( SalYieldMutex *pMutex );\n    virtual ~HeadlessSalInstance();\n\n    virtual SalSystem* CreateSalSystem();\n};\n```\n\u3048\u3001\u3053\u308c\u3060\u3051\uff1f\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5b9f\u88c5\u306f\u4ee5\u4e0b\n\n```cpp:libreoffice-4.4.5.2/vcl/headless/headlessinst.cxx\nHeadlessSalInstance::HeadlessSalInstance( SalYieldMutex *pMutex ) :\n    SvpSalInstance( pMutex)\n{\n}\n```\n\u3053\u306e\u30b3\u30ed\u30f3\u306b\u3064\u3044\u3066\u8abf\u3079\u305f\u3068\u3053\u308d\uff08C++\u5168\u7136\u308f\u304b\u3089\u306a\u3044\uff09\u3001\u3069\u3046\u3084\u3089\u30e1\u30f3\u30d0\u5909\u6570\u3092\u521d\u671f\u5316\u3059\u308b\u69cb\u6587\u3089\u3057\u3044\u3002\n\n```cpp:\nHogeClass () :\n    var (value)\n{\n    // \u5185\u5bb9\n}\n```\n\n\u3067\u3001`var`\u306b`value`\u3092\u4ee3\u5165\u3059\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306a\u308b\u3002\n\n##bt\u306e\u30c7\u30fc\u30bf\u3092\u5143\u306b\u3001\u4e0a\u306e\u65b9\u3078\u9032\u3093\u3067\u307f\u308b\n\n```cpp:libreoffice-4.4.5.2/vcl/source/app/svmain.cxx\nbool InitVCL()\n{\n    if( pExceptionHandler != NULL )\n        return false;\n\n    EmbeddedFontsHelper::clearTemporaryFontFiles();\n\n    if( ! ImplGetSVData() )\n        ImplInitSVData();\n\n    if( !ImplGetSVData()->mpApp )\n    {\n        pOwnSvApp = new DummyApplication();\n    }\n    InitSalMain();\n\n    ImplSVData* pSVData = ImplGetSVData();\n\n    // remember Main-Thread-Id\n    pSVData->mnMainThreadId = ::osl::Thread::getCurrentIdentifier();\n\n    // Initialize Sal\n    pSVData->mpDefInst = CreateSalInstance();\n    if ( !pSVData->mpDefInst )\n        return false;\n\n    // Desktop Environment context (to be able to get value of \"system.desktop-environment\" as soon as possible)\n    com::sun::star::uno::setCurrentContext(\n        new DesktopEnvironmentContext( com::sun::star::uno::getCurrentContext() ) );\n\n    // Initialize application instance (should be done after initialization of VCL SAL part)\n    if( pSVData->mpApp )\n        // call init to initialize application class\n        // soffice/sfx implementation creates the global service manager\n        pSVData->mpApp->Init();\n\n    pSVData->mpDefInst->AfterAppInit();\n\n    // Fetch AppFileName and make it absolute before the workdir changes...\n    OUString aExeFileName;\n    osl_getExecutableFile( &aExeFileName.pData );\n\n    // convert path to native file format\n    OUString aNativeFileName;\n    osl::FileBase::getSystemPathFromFileURL( aExeFileName, aNativeFileName );\n    pSVData->maAppData.mpAppFileName = new OUString( aNativeFileName );\n\n    // Initialize global data\n    pSVData->maGDIData.mpScreenFontList     = new PhysicalFontCollection;\n    pSVData->maGDIData.mpScreenFontCache    = new ImplFontCache;\n    pSVData->maGDIData.mpGrfConverter       = new GraphicConverter;\n\n    // Set exception handler\n    pExceptionHandler = osl_addSignalHandler(VCLExceptionSignal_impl, NULL);\n\n    DBGGUI_INIT_SOLARMUTEXCHECK();\n\n#if OSL_DEBUG_LEVEL > 0\n    DebugEventInjector::getCreate();\n#endif\n\n    return true;\n}\n```\n\u3053\u308c\u304c`CreateSalInstance()`\u3092\u547c\u3073\u51fa\u3057\u3066\u305f\u95a2\u6570\u3002\u3044\u304b\u306b\u3082\u521d\u671f\u5316\u3057\u307e\u3059\u3063\u3066\u9854\u3057\u3066\u3066\u3001\u3081\u3061\u3083\u304f\u3061\u3083\u602a\u3057\u3044\u3051\u3069\u3001\u3069\u3046\u306b\u3082\u4f55\u3084\u3063\u3066\u308b\u304b\u3088\u304f\u308f\u304b\u3093\u306a\u3044\u2026\u3002\n`pSVData->mpApp->Init();`\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u65b0\u3057\u3044\u30b9\u30ec\u30c3\u30c9\u304c2\u3064\u7acb\u3061\u4e0a\u304c\u3063\u305f\u3002\u305d\u306e1\u3064\u4e0b\u306e\u884c\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u3055\u3063\u304d\u7acb\u3061\u4e0a\u304c\u3063\u305f\u30b9\u30ec\u30c3\u30c9\u306e\u3046\u3061\u5148\u306b\u7acb\u3061\u4e0a\u304c\u3063\u305f\u307b\u3046\u304c\u9589\u3058\u3066\u30012\u3064\u65b0\u898f\u30b9\u30ec\u30c3\u30c9\u304c\u7acb\u3061\u4e0a\u304c\u308b\u3002\n\n```cpp:libreoffice-4.4.5.2/vcl/source/app/svmain.cxx\nint ImplSVMain()\n{\n    // The 'real' SVMain()\n    ImplSVData* pSVData = ImplGetSVData();\n\n    DBG_ASSERT( pSVData->mpApp, \"no instance of class Application\" );\n\n    int nReturn = EXIT_FAILURE;\n\n    bool bInit = InitVCL();\n\n    if( bInit )\n    {\n        // call application main\n        pSVData->maAppData.mbInAppMain = true;\n        nReturn = pSVData->mpApp->Main();\n        pSVData->maAppData.mbInAppMain = false;\n    }\n\n    if( pSVData->mxDisplayConnection.is() )\n    {\n        pSVData->mxDisplayConnection->terminate();\n        pSVData->mxDisplayConnection.clear();\n    }\n\n    // This is a hack to work around the problem of the asynchronous nature\n    // of bridging accessibility through Java: on shutdown there might still\n    // be some events in the AWT EventQueue, which need the SolarMutex which\n    // - on the other hand - is destroyed in DeInitVCL(). So empty the queue\n    // here ..\n    if( pSVData->mxAccessBridge.is() )\n    {\n      sal_uLong nCount = Application::ReleaseSolarMutex();\n      pSVData->mxAccessBridge->dispose();\n      Application::AcquireSolarMutex(nCount);\n      pSVData->mxAccessBridge.clear();\n    }\n\n    DeInitVCL();\n    return nReturn;\n}\n```\n\n\u3053\u3044\u3064\u304cInitVCL\u3092\u547c\u3073\u51fa\u3057\u3066\u305f\u3084\u3064\u3002\n`nReturn = pSVData->mpApp->Main();`\u3092next\u3067\u3068\u3073\u3053\u3048\u308b\u3068\u2026\u3042\uff01\u3000LibreOffice\u304c\u958b\u3044\u305f\uff01\n\n```cpp:libreoffice-4.4.5.2/desktop/source/app/app.cxx\nint Desktop::Main()\n{\n // (\u9577\u3044\u306e\u3067\u7565)\n}\n```\n\u7d50\u5c40\u3001\u3053\u3053\u304c\u30e1\u30a4\u30f3\u3068\u3044\u3046\u3053\u3068\u3089\u3057\u3044\u3002\u3053\u3053\u307e\u3067\u9577\u304b\u3063\u305f\u2026\u3002\n\n#\u6b21\u56de\u4e88\u544a\n\u6b21\u56de\u306f\u3053\u306e`Main()`\u95a2\u6570\u3092\u3044\u3058\u3063\u3066\u3001\u521d\u3081\u3066\u9032\u6357\u3092\u751f\u3093\u3067\u307f\u308b\u3002\n\n#\u30ea\u30f3\u30af\n##LibreOfficeCalc\u306b\u95a2\u6570\u5019\u88dc\u8868\u793a\u6a5f\u80fd\u3092\u4ed8\u3051\u308b\u307e\u3067\n\n- [\u7b2c1\u56de\uff1a\u76ee\u7684\u306e\u8a2d\u5b9a\u3068\u6e96\u5099](http://qiita.com/KRiver1/items/2188d71d316a28ad23ac)\n- [\u7b2c2\u56de\uff1a\u30c7\u30d0\u30c3\u30ac\u3067\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u3092\u63a2\u3059](http://qiita.com/KRiver1/items/1f93efcf47d2146c78b8)\n- [\u7b2c3\u56de\uff1a\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u3068\u5168\u63a2\u7d22](http://qiita.com/KRiver1/items/d7ab9614d5bbd409c541)\n- [\u7b2c4\u56de\uff1a\u30d5\u30a9\u30eb\u30c0\u540d\u3067\u30a2\u30bf\u30ea\u3092\u4ed8\u3051\u308b](http://qiita.com/KRiver1/items/3531679de3c262332de7)\n- [\u7b2c5\u56de\uff1a\u95a2\u6570\u5019\u88dc\u306e\u96c6\u5408\u3092\u8fd4\u3059](http://qiita.com/KRiver1/items/08ef4586866833048805)\n- [\u7b2c6\u56de\uff1a\u95a2\u6570\u5019\u88dc\u30fb\u8aac\u660e\u8868\u793a\u6a5f\u80fd\u3092\u5b9f\u88c5\u3059\u308b](http://qiita.com/KRiver1/items/c33d62f4bcc73e76b359)\n- [\u7b2c7\u56de\uff1aLibreOffice\u306b\u30b3\u30df\u30c3\u30c8\u3057\u3066\u307f\u308b](http://qiita.com/KRiver1/items/7aba2a32cc42672c105d)\n"}