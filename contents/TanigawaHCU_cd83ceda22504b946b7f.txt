{"context": "Python\u3092\u4f7f\u3063\u3066HDL(Hardware Description Language)\u8a18\u8ff0\u3092\u7d44\u307f\u7acb\u3066\u308b\u3053\u3068\u304c\u3067\u304d\u308bveriloggen\u3068\u3044\u3046\u30c4\u30fc\u30eb\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u304c\uff0c\u30c7\u30b3\u30fc\u30c0\u306e\u3088\u3046\u306bcase\u6587\u3092\u3069\u306e\u3088\u3046\u306b\u66f8\u304f\u306e\u304b\u5206\u304b\u3089\u306a\u304f\u3066\u82e6\u52b4\u3057\u305f\u305f\u3081\uff0c\u30e1\u30e2\u3068\u3057\u3066\u6b8b\u3057\u3066\u304a\u304d\u307e\u3059\uff0e\n\ndecoder.py\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nimport sys\nimport os\nfrom veriloggen import *\n\ndef mkDecoder():\n\n    m = Module('decoder')\n    indata = m.Input('in', 3)\n    out = m.OutputReg('out',8)\n\n    decCond = []\n    decCond.append( When(0)(out(0b00000001)) )\n    decCond.append( When(1)(out(0b00000010)) )\n    decCond.append( When(2)(out(0b00000100)) )\n    decCond.append( When(3)(out(0b00001000)) )\n    decCond.append( When(4)(out(0b00010000)) )\n    decCond.append( When(5)(out(0b00100000)) )\n    decCond.append( When(6)(out(0b01000000)) )\n    decCond.append( When(7)(out(0b10000000)) )\n    #decCond.append( When()(out(0b10000000)) )\n\n    m.Always() (\n        Case(indata)(\n            *decCond\n            )\n        )\n\n    return m\n\nif __name__ == '__main__':\n    dut = mkDecoder()\n    verilog = dut.to_verilog(filename='dut.v')\n    print(verilog)\n\n    sim = simulation.Simulator(dut)\n    rslt = sim.run()\n    print(rslt)\n\n\n\n'When(0)out(0b000000001)'\u3067\uff0c\u300c\u5024\u304c0\u306e\u5834\u5408\uff0cout\u3068\u3044\u3046\u5909\u6570\uff08\u4fe1\u53f7\uff09\u306b\uff12\u9032\u6570\u306700000001\u3092\u5272\u308a\u5f53\u3066\u308b\u300d\u3068\u3044\u3046\u610f\u5473\u306b\u306a\u308a\u307e\u3059\uff0e\u305d\u306e\u3088\u3046\u306a\u5024\u3068\u4ee3\u5165\u5f0f\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u30ea\u30b9\u30c8decCond\u306b\u767b\u9332\u3057\u307e\u3059\uff0e\u4eca\u56de\u306f\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u3066\u3044\u307e\u3059\u304c\uff0c\u3053\u306e\u30ea\u30b9\u30c8\u306e\u6700\u5f8c\u306b\u306e\u307fWhen()\u3068\u3059\u308b\u3053\u3068\u3067\uff0cdefault\u6587\u304c\u8ffd\u52a0\u3067\u304d\u307e\u3059\uff0e\u305d\u306e\u3042\u3068\u3067\uff0calways\u6587\u306e\u4e2d\u306eCase\u6587\u3067\uff0c\u5165\u529b\u3068\u3057\u3066\u7528\u3044\u308b\u5909\u6570\u540d\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\uff0e\n\nPython\u3092\u4f7f\u3063\u3066HDL(Hardware Description Language)\u8a18\u8ff0\u3092\u7d44\u307f\u7acb\u3066\u308b\u3053\u3068\u304c\u3067\u304d\u308bveriloggen\u3068\u3044\u3046\u30c4\u30fc\u30eb\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u304c\uff0c\u30c7\u30b3\u30fc\u30c0\u306e\u3088\u3046\u306bcase\u6587\u3092\u3069\u306e\u3088\u3046\u306b\u66f8\u304f\u306e\u304b\u5206\u304b\u3089\u306a\u304f\u3066\u82e6\u52b4\u3057\u305f\u305f\u3081\uff0c\u30e1\u30e2\u3068\u3057\u3066\u6b8b\u3057\u3066\u304a\u304d\u307e\u3059\uff0e\n\n```python:decoder.py\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nimport sys\nimport os\nfrom veriloggen import *\n\ndef mkDecoder():\n\n    m = Module('decoder')\n    indata = m.Input('in', 3)\n    out = m.OutputReg('out',8)\n\n    decCond = []\n    decCond.append( When(0)(out(0b00000001)) )\n    decCond.append( When(1)(out(0b00000010)) )\n    decCond.append( When(2)(out(0b00000100)) )\n    decCond.append( When(3)(out(0b00001000)) )\n    decCond.append( When(4)(out(0b00010000)) )\n    decCond.append( When(5)(out(0b00100000)) )\n    decCond.append( When(6)(out(0b01000000)) )\n    decCond.append( When(7)(out(0b10000000)) )\n    #decCond.append( When()(out(0b10000000)) )\n\n    m.Always() (\n        Case(indata)(\n            *decCond\n            )\n        )\n\n    return m\n\nif __name__ == '__main__':\n    dut = mkDecoder()\n    verilog = dut.to_verilog(filename='dut.v')\n    print(verilog)\n\n    sim = simulation.Simulator(dut)\n    rslt = sim.run()\n    print(rslt)\n\n```\n\n'When(0)out(0b000000001)'\u3067\uff0c\u300c\u5024\u304c0\u306e\u5834\u5408\uff0cout\u3068\u3044\u3046\u5909\u6570\uff08\u4fe1\u53f7\uff09\u306b\uff12\u9032\u6570\u306700000001\u3092\u5272\u308a\u5f53\u3066\u308b\u300d\u3068\u3044\u3046\u610f\u5473\u306b\u306a\u308a\u307e\u3059\uff0e\u305d\u306e\u3088\u3046\u306a\u5024\u3068\u4ee3\u5165\u5f0f\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u30ea\u30b9\u30c8decCond\u306b\u767b\u9332\u3057\u307e\u3059\uff0e\u4eca\u56de\u306f\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u3066\u3044\u307e\u3059\u304c\uff0c\u3053\u306e\u30ea\u30b9\u30c8\u306e\u6700\u5f8c\u306b\u306e\u307fWhen()\u3068\u3059\u308b\u3053\u3068\u3067\uff0cdefault\u6587\u304c\u8ffd\u52a0\u3067\u304d\u307e\u3059\uff0e\u305d\u306e\u3042\u3068\u3067\uff0calways\u6587\u306e\u4e2d\u306eCase\u6587\u3067\uff0c\u5165\u529b\u3068\u3057\u3066\u7528\u3044\u308b\u5909\u6570\u540d\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\uff0e\n", "tags": ["case", "Python", "HDL", "veriloggen"]}