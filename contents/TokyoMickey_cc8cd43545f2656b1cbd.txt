{"context": "\u672c\u8a18\u4e8b\u306fChainer\u3084TensorFlow\u3067GPU\u3092\u4f7f\u3046\u3068\u6bce\u56de\u7d50\u679c\u304c\u5909\u308f\u308b\u7406\u7531\u3068\u5bfe\u7b56 (\u307e\u3068\u3081)\u306e\u8a73\u7d30\u7de8\u3067\u3042\u308a\u3001Chainer\u306b\u3064\u3044\u3066\u5177\u4f53\u7684\u306a\u5bfe\u7b56\u306b\u3064\u3044\u3066\u691c\u8a3c\u3057\u307e\u3059\u3002\n\n\u95a2\u9023Issues(Chainer)\nhttps://github.com/pfnet/chainer/pull/1321\n\n\u691c\u8a3c\u74b0\u5883\nChainer v1.20.0\nPython 3.5.2\nCUDA 8.0\ncuDNN 5.1\nNVIDIA Tesla/GeForce \u3044\u308d\u3044\u308d\n\n\u307e\u305a\u306f\u4e71\u6570\u7a2e\u306e\u6307\u5b9a\nGPU\u306e\u6f14\u7b97\u8aa4\u5dee\u3060\u3051\u3067\u306a\u304f\u4e71\u6570\u3092\u7528\u3044\u3066\u3044\u308b\u3053\u3068\u3082\u6f14\u7b97\u7d50\u679c\u304c\u5b89\u5b9a\u3057\u306a\u3044\u539f\u56e0\u3067\u3059\u3002\n\u305d\u3053\u3067\u4e71\u6570\u7a2e\u3092\u6307\u5b9a\u3057\u3066\u767a\u751f\u3059\u308b\u4e71\u6570\u3092\u56fa\u5b9a\u3057\u307e\u3059\u3002\n\n\u4e71\u6570\u7a2e\u306e\u6307\u5b9a\u5bfe\u8c61\nChainer\u306e\u5834\u5408\u3001\u4e0b\u8a18\u306e3\u7a2e\u985e\u306e\u4e71\u6570\u306b\u914d\u616e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\nPython\nNumPy\nCuPy\n\nCuPy\u306fPFN\u793e\u8b39\u88fd\u306eGPU\u5bfe\u5fdc\u7248NumPy\u3068\u8003\u3048\u308c\u3070\u3088\u3044\u3067\u3057\u3087\u3046\u3002\n\n\u53c2\u8003\u5b9f\u88c5\ndef set_random_seed(seed):\n    # set Python random seed\n    random.seed(seed)\n\n    # set NumPy random seed\n    np.random.seed(seed)\n\n    # set Chainer(CuPy) random seed\n    cp.random.seed(seed)\n\nseed\u306b\u540c\u3058\u5024\u3092\u8a2d\u5b9a\u3059\u308c\u3070\u767a\u751f\u3059\u308b\u4e71\u6570\u5024\u304c\u5b89\u5b9a\u3057\u307e\u3059\u3002\n\n\u305d\u308c\u3067\u306f\u3061\u3087\u3063\u3068\u3057\u305fCNN\u3067\u5b9f\u9a13\u3057\u3066\u307f\u307e\u3059\n\u5b9f\u9a13\u7528\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u307f\u3093\u306a\u5927\u597d\u304dMNIST\u3002\u4f7f\u7528\u3059\u308b\u30e2\u30c7\u30eb\u306fCNN\u3092\u7528\u3044\u3066\u3044\u308b\u5c0f\u3055\u3081\u306e\u3082\u306e\u3092\u9078\u3073\u307e\u3057\u305f\u3002\n\n\u30c6\u30b9\u30c8\u306b\u7528\u3044\u305f\u30e2\u30c7\u30eb\nclass CNN(chainer.Chain):\n    def __init__(self):\n        super(CNN, self).__init__(\n            conv1=L.Convolution2D(1, 32, 5, stride=1),\n            conv2=L.Convolution2D(32, 64, 5, stride=1),\n            l1=L.Linear(None, 512),\n            l2=L.Linear(None, 10),\n        )\n\n    def __call__(self, x):\n        x_4d = x.data.reshape(len(x.data), 1, 28, 28)\n        h = F.relu(self.conv1(x_4d))\n        h = F.max_pooling_2d(h, 2, stride=1)\n        h = F.relu(self.conv2(h))\n        h = F.max_pooling_2d(h, 2, stride=1)\n        h = F.relu(self.l1(h))\n        return self.l2(h)\n\n\n\u3061\u306a\u307f\u306bChainer\u306eMNIST\u3092\u7528\u3044\u305fExample\u306fCNN\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u305f\u3081\u3001TensorFlow\u306eExample\u3067\u3042\u308bDeep MNIST for Experts\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b\u30e2\u30c7\u30eb(Conv2\u5c64+FC1\u5c64)\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u307e\u305aCPU\u30675\u56de\u5b9f\u884c\u3057\u307e\u3057\u305f\n\nCPU\u306b\u3088\u308b\u5b9f\u884c\u7d50\u679c(10Epoch\u76ee\u306e\u7d50\u679c\u3060\u3051\u3092\u62bd\u51fa)\n$ python mnist_chainer.py\nepoch       main/loss   validation/main/loss  main/accuracy  validation/main/accuracy  elapsed_time\n10          0.00639321  0.0375724             0.998116       0.99164                   4494.79\n10          0.00639321  0.0375724             0.998116       0.99164                   4487.52\n10          0.00639321  0.0375724             0.998116       0.99164                   4498.98\n10          0.00639321  0.0375724             0.998116       0.99164                   4493.16\n10          0.00639321  0.0375724             0.998116       0.99164                   4492.28\n\n\n\u671f\u5f85\u901a\u308a5\u56de\u3068\u3082\u540c\u3058\u7d50\u679c\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u6b21\u306bGPU\u30675\u56de\u5b9f\u884c\u3057\u307e\u3057\u305f\n\nGPU\u306b\u3088\u308b\u5b9f\u884c\u7d50\u679c(10Epoch\u76ee\u306e\u7d50\u679c\u3060\u3051\u3092\u62bd\u51fa)\n$ python mnist_chainer.py\nepoch       main/loss   validation/main/loss  main/accuracy  validation/main/accuracy  elapsed_time\n10          0.00759941  0.0510452             0.997615       0.988754                  77.9142\n10          0.00894238  0.0384938             0.997499       0.99164                   78.9828\n10          0.00753692  0.0475569             0.997615       0.988256                  78.1221\n10          0.00674504  0.0442383             0.998166       0.99164                   77.9893\n10          0.00766461  0.0411011             0.997465       0.991143                  80.4075\n\n\n\u3084\u306f\u308aGPU\u3067\u306f\u7d50\u679c\u304c\u4e0d\u5b89\u5b9a(\u975e\u6c7a\u5b9a\u7684)\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u306d\u3002\n\nGPU\u3092\u4f7f\u7528\u3057\u3066\u3082\u6f14\u7b97\u7d50\u679c\u3092\u5b89\u5b9a(\u6c7a\u5b9a\u7684\u306b)\u3055\u305b\u308b\u65b9\u6cd5\n\u624b\u3063\u53d6\u308a\u65e9\u304f\u3066\u52b9\u679c\u7684\u306a\u306e\u306f\u74b0\u5883\u5909\u6570CHAINER_CUDNN\u306b0\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3059\u3002\nChainer\u306e\u74b0\u5883\u5909\u6570\u306b\u3064\u3044\u3066\u306f\u3053\u3061\u3089\u3092\u53c2\u7167\u306e\u3053\u3068\u3002\n\n\u74b0\u5883\u5909\u6570\u3092\u6307\u5b9a\u3057\u305f\u3001GPU\u306b\u3088\u308b\u5b9f\u884c\u7d50\u679c(10Epoch\u76ee\u306e\u7d50\u679c\u3060\u3051\u3092\u62bd\u51fa)\n$ export CHAINER_CUDNN=0\n$ python mnist_chainer.py\nepoch       main/loss   validation/main/loss  main/accuracy  validation/main/accuracy  elapsed_time\n10          0.00971611  0.0498366             0.997232       0.98955                   175.727\n10          0.00971611  0.0498366             0.997232       0.98955                   174.934\n10          0.00971611  0.0498366             0.997232       0.98955                   175.237\n10          0.00971611  0.0498366             0.997232       0.98955                   175.662\n10          0.00971611  0.0498366             0.997232       0.98955                   174.704\n\n\n\u3042\u3063\u3055\u308a\u89e3\u6c7a\u3057\u307e\u3057\u305f\u3002\u6f14\u7b97\u7d50\u679c\u304c\u4e0d\u5b89\u5b9a(\u975e\u6c7a\u5b9a\u7684)\u306b\u306a\u308b\u539f\u56e0\u306fcuDNN\u3060\u3063\u305f\u3088\u3046\u3067\u3059\u3002\n\u3057\u304b\u3057\u3001\u6f14\u7b97\u7d50\u679c\u306f\u5b89\u5b9a\u3057\u305f\u3082\u306e\u306e\u6f14\u7b97\u6642\u9593\u304c\u7d042.2\u500d\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\n\u6f14\u7b97\u6027\u80fd\u3092\u307b\u3068\u3093\u3069\u4f4e\u4e0b\u3055\u305b\u305a\u306b\u5b89\u5b9a(\u6c7a\u5b9a)\u7684\u306a\u6f14\u7b97\u3092\u884c\u3046\u65b9\u6cd5\n\u500b\u4eba\u7684\u306b\u306f\u904e\u53bb\u306e\u8a66\u9a13\u7d50\u679c\u3068\u306e\u6bd4\u8f03\u3092\u884c\u3046\u3088\u3046\u306a\u8a66\u9a13\u306f\u305d\u308c\u307b\u3069\u9ad8\u983b\u5ea6\u3067\u884c\u3046\u308f\u3051\u3067\u306f\u306a\u3044\u305f\u3081\u3001\u6f14\u7b97\u6642\u9593\u304c2.2\u500d\u7a0b\u5ea6\u306a\u3089\u5341\u5206\u8a31\u5bb9\u51fa\u6765\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u30b1\u30fc\u30b9\u306b\u3088\u3063\u3066\u306f\u51fa\u6765\u308b\u3060\u3051\u51e6\u7406\u6027\u80fd\u3092\u843d\u3068\u3055\u305a\u306b\u5b89\u5b9a(\u6c7a\u5b9a)\u7684\u306a\u7d50\u679c\u3092\u5f97\u305f\u3044\u3053\u3068\u3082\u3042\u308b\u3067\u3057\u3087\u3046\u3002\n\u305d\u306e\u5834\u5408\u3001\u5b9f\u88c5\u306b\u82e5\u5e72\u306e\u4fee\u6b63\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u8ffd\u52a0\u3067\u5bfe\u5fdc\u53ef\u80fd\u3067\u3059\u3002\n\n\u6027\u80fd\u4f4e\u4e0b\u3092\u6291\u3048\u3066\u5b89\u5b9a(\u6c7a\u5b9a)\u7684\u306a\u6f14\u7b97\u7d50\u679c\u3092\u5f97\u3089\u308c\u308b\u3088\u3046\u4fee\u6b63\nclass CNN(chainer.Chain):\n    def __init__(self):\n        super(CNN, self).__init__(\n            conv1=L.Convolution2D(1, 32, 5, stride=1, deterministic=True),\n            conv2=L.Convolution2D(32, 64, 5, stride=1, deterministic=True),\n            l1=L.Linear(None, 512),\n            l2=L.Linear(None, 10),\n        )\n\n    def __call__(self, x):\n        x_4d = x.data.reshape(len(x.data), 1, 28, 28)\n        h = F.relu(self.conv1(x_4d), use_cudnn=False)\n        h = F.max_pooling_2d(h, 2, stride=1, use_cudnn=False)\n        h = F.relu(self.conv2(h), use_cudnn=False)\n        h = F.max_pooling_2d(h, 2, stride=1, use_cudnn=False)\n        h = F.relu(self.l1(h), use_cudnn=False)\n        return self.l2(h)\n\n\n\u8a18\u8ff0\u306e\u30dd\u30a4\u30f3\u30c8\u306f\u4e0b\u8a18\u306e3\u70b9\u3067\u3059\u3002\n\nL.Convolution2D\u306bdeterministic=True\u3092\u6307\u5b9a\nF.max_pooling_2d\u306buse_cudnn=False\u3092\u6307\u5b9a\nF.relu\u306buse_cudnn=False\u3092\u6307\u5b9a\n\nConvolution2D\u3067\u306fcuDNN\u3092\u4f7f\u7528\u3059\u308b\u3082\u306e\u306edeterministic(\u6c7a\u5b9a\u7684)\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u7528\u3059\u308b\u3088\u3046\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002(\u672c\u8a18\u4e8b\u5192\u982d\u306eIssues\u306b\u3042\u308b\u901a\u308a\u3001v1.18.0\u306b\u3066\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f)\nmax_pooling_2d\u3068relu\u3067\u306fdeterministic\u306e\u6307\u5b9a\u304c\u51fa\u6765\u306a\u3044\u305f\u3081cuDNN\u3092\u4f7f\u7528\u3057\u306a\u3044\u3088\u3046\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n(max_pooling_2d\u3067cuDNN\u3092\u4f7f\u7528\u3059\u308b\u3068\u7d50\u679c\u304c\u975e\u6c7a\u5b9a\u7684\u306b\u306a\u308a\u307e\u3059)\n\u5c1a\u3001\u3053\u306e\u5b9f\u88c5\u306e\u5834\u5408\u306f\u3001\u74b0\u5883\u5909\u6570CHAINER_CUDNN\u306f\u6307\u5b9a\u3057\u306a\u3044\u3001\u307e\u305f\u306f1\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u901f\u5ea6\u3092\u6c17\u306b\u3057\u3064\u3064\u518d\u5ea6\u5b9f\u884c\u3057\u307e\u3059\n\nGPU\u306b\u3088\u308b\u5b9f\u884c\u7d50\u679c(10Epoch\u76ee\u306e\u7d50\u679c\u3060\u3051\u3092\u62bd\u51fa)\n$ export CHAINER_CUDNN=1\n$ python mnist_chainer_deterministic.py\nepoch       main/loss   validation/main/loss  main/accuracy  validation/main/accuracy  elapsed_time\n10          0.00820688  0.0408237             0.997649       0.991242                  80.8627\n10          0.00820688  0.0408237             0.997649       0.991242                  80.2272\n10          0.00820688  0.0408237             0.997649       0.991242                  80.7561\n10          0.00820688  0.0408237             0.997649       0.991242                  80.8799\n10          0.00820688  0.0408237             0.997649       0.991242                  80.7954\n\n\n\u671f\u5f85\u901a\u308a\u3001\u307b\u3068\u3093\u3069\u6f14\u7b97\u6027\u80fd\u3092\u843d\u3068\u3055\u305a\u306b\u5b89\u5b9a(\u6c7a\u5b9a)\u7684\u306a\u6f14\u7b97\u7d50\u679c\u3092\u5f97\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3057\u305f\u3002\n\u4e0a\u8a18\u5b9f\u884c\u4f8b\u3067\u306f\u50c5\u304b2.5%\u306e\u901f\u5ea6\u4f4e\u4e0b\u3067\u5b89\u5b9a(\u6c7a\u5b9a)\u7684\u306a\u6f14\u7b97\u7d50\u679c\u3092\u5f97\u3089\u308c\u307e\u3057\u305f\u3002\n\n\u7d50\u8ad6\nChainer\u3067GPU\u6f14\u7b97\u3092\u7528\u3044\u3066\u5b89\u5b9a(\u6c7a\u5b9a)\u7684\u306a\u6f14\u7b97\u3092\u884c\u3044\u305f\u3044\u5834\u5408\u306f\u4e0b\u8a182\u3064\u306e\u65b9\u6cd5\u304c\u3042\u308b\u3002\n\n\u74b0\u5883\u5909\u6570CHAINER_CUDNN\u306b0\u3092\u8a2d\u5b9a\u3057cuDNN\u3092\u7121\u52b9\u306b\u3059\u308b\nLink\u3084Function\u7cfbAPI\u306e\u5f15\u6570\u3067use_cudnn=False\u3084deterministic=True\u3092\u500b\u5225\u6307\u5b9a\u3059\u308b\n\n\n\u4f59\u8ac7\nTensorFlow, Torch, Caffe\u306a\u3069\u4ed6\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3082\u3053\u306e\u554f\u984c\u306b\u53d6\u308a\u7d44\u3093\u3067\u3044\u308b\u3088\u3046\u3067\u3059\u304c\u3001Chainer\u304c\u4e00\u756a\u7f8e\u3057\u304f\u89e3\u6c7a\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\u672c\u8a18\u4e8b\u306f[Chainer\u3084TensorFlow\u3067GPU\u3092\u4f7f\u3046\u3068\u6bce\u56de\u7d50\u679c\u304c\u5909\u308f\u308b\u7406\u7531\u3068\u5bfe\u7b56 (\u307e\u3068\u3081)](http://qiita.com/TokyoMickey/items/63c4053740ab1f3f28a2)\u306e\u8a73\u7d30\u7de8\u3067\u3042\u308a\u3001Chainer\u306b\u3064\u3044\u3066\u5177\u4f53\u7684\u306a\u5bfe\u7b56\u306b\u3064\u3044\u3066\u691c\u8a3c\u3057\u307e\u3059\u3002\n\n##\u95a2\u9023Issues(Chainer)\nhttps://github.com/pfnet/chainer/pull/1321\n\n##\u691c\u8a3c\u74b0\u5883\nChainer v1.20.0\nPython 3.5.2\nCUDA 8.0\ncuDNN 5.1\nNVIDIA Tesla/GeForce \u3044\u308d\u3044\u308d\n\n##\u307e\u305a\u306f\u4e71\u6570\u7a2e\u306e\u6307\u5b9a\n\nGPU\u306e\u6f14\u7b97\u8aa4\u5dee\u3060\u3051\u3067\u306a\u304f\u4e71\u6570\u3092\u7528\u3044\u3066\u3044\u308b\u3053\u3068\u3082\u6f14\u7b97\u7d50\u679c\u304c\u5b89\u5b9a\u3057\u306a\u3044\u539f\u56e0\u3067\u3059\u3002\n\u305d\u3053\u3067\u4e71\u6570\u7a2e\u3092\u6307\u5b9a\u3057\u3066\u767a\u751f\u3059\u308b\u4e71\u6570\u3092\u56fa\u5b9a\u3057\u307e\u3059\u3002\n\n###\u4e71\u6570\u7a2e\u306e\u6307\u5b9a\u5bfe\u8c61\nChainer\u306e\u5834\u5408\u3001\u4e0b\u8a18\u306e3\u7a2e\u985e\u306e\u4e71\u6570\u306b\u914d\u616e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n- Python\n- NumPy\n- CuPy\n\nCuPy\u306fPFN\u793e\u8b39\u88fd\u306eGPU\u5bfe\u5fdc\u7248NumPy\u3068\u8003\u3048\u308c\u3070\u3088\u3044\u3067\u3057\u3087\u3046\u3002\n\n###\u53c2\u8003\u5b9f\u88c5\n\n```python:\ndef set_random_seed(seed):\n    # set Python random seed\n    random.seed(seed)\n\n    # set NumPy random seed\n    np.random.seed(seed)\n\n    # set Chainer(CuPy) random seed\n    cp.random.seed(seed)\n```\nseed\u306b\u540c\u3058\u5024\u3092\u8a2d\u5b9a\u3059\u308c\u3070\u767a\u751f\u3059\u308b\u4e71\u6570\u5024\u304c\u5b89\u5b9a\u3057\u307e\u3059\u3002\n\n##\u305d\u308c\u3067\u306f\u3061\u3087\u3063\u3068\u3057\u305fCNN\u3067\u5b9f\u9a13\u3057\u3066\u307f\u307e\u3059\n\n\u5b9f\u9a13\u7528\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u307f\u3093\u306a\u5927\u597d\u304dMNIST\u3002\u4f7f\u7528\u3059\u308b\u30e2\u30c7\u30eb\u306fCNN\u3092\u7528\u3044\u3066\u3044\u308b\u5c0f\u3055\u3081\u306e\u3082\u306e\u3092\u9078\u3073\u307e\u3057\u305f\u3002\n\n```python:\u30c6\u30b9\u30c8\u306b\u7528\u3044\u305f\u30e2\u30c7\u30eb\nclass CNN(chainer.Chain):\n    def __init__(self):\n        super(CNN, self).__init__(\n            conv1=L.Convolution2D(1, 32, 5, stride=1),\n            conv2=L.Convolution2D(32, 64, 5, stride=1),\n            l1=L.Linear(None, 512),\n            l2=L.Linear(None, 10),\n        )\n\n    def __call__(self, x):\n        x_4d = x.data.reshape(len(x.data), 1, 28, 28)\n        h = F.relu(self.conv1(x_4d))\n        h = F.max_pooling_2d(h, 2, stride=1)\n        h = F.relu(self.conv2(h))\n        h = F.max_pooling_2d(h, 2, stride=1)\n        h = F.relu(self.l1(h))\n        return self.l2(h)\n```\n\u3061\u306a\u307f\u306bChainer\u306eMNIST\u3092\u7528\u3044\u305fExample\u306fCNN\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u305f\u3081\u3001TensorFlow\u306eExample\u3067\u3042\u308bDeep MNIST for Experts\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b\u30e2\u30c7\u30eb(Conv2\u5c64+FC1\u5c64)\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n###\u307e\u305aCPU\u30675\u56de\u5b9f\u884c\u3057\u307e\u3057\u305f\n\n```console:CPU\u306b\u3088\u308b\u5b9f\u884c\u7d50\u679c(10Epoch\u76ee\u306e\u7d50\u679c\u3060\u3051\u3092\u62bd\u51fa)\n$ python mnist_chainer.py\nepoch       main/loss   validation/main/loss  main/accuracy  validation/main/accuracy  elapsed_time\n10          0.00639321  0.0375724             0.998116       0.99164                   4494.79\n10          0.00639321  0.0375724             0.998116       0.99164                   4487.52\n10          0.00639321  0.0375724             0.998116       0.99164                   4498.98\n10          0.00639321  0.0375724             0.998116       0.99164                   4493.16\n10          0.00639321  0.0375724             0.998116       0.99164                   4492.28\n```\n\u671f\u5f85\u901a\u308a5\u56de\u3068\u3082\u540c\u3058\u7d50\u679c\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n###\u6b21\u306bGPU\u30675\u56de\u5b9f\u884c\u3057\u307e\u3057\u305f\n\n```console:GPU\u306b\u3088\u308b\u5b9f\u884c\u7d50\u679c(10Epoch\u76ee\u306e\u7d50\u679c\u3060\u3051\u3092\u62bd\u51fa)\n$ python mnist_chainer.py\nepoch       main/loss   validation/main/loss  main/accuracy  validation/main/accuracy  elapsed_time\n10          0.00759941  0.0510452             0.997615       0.988754                  77.9142\n10          0.00894238  0.0384938             0.997499       0.99164                   78.9828\n10          0.00753692  0.0475569             0.997615       0.988256                  78.1221\n10          0.00674504  0.0442383             0.998166       0.99164                   77.9893\n10          0.00766461  0.0411011             0.997465       0.991143                  80.4075\n```\n\u3084\u306f\u308aGPU\u3067\u306f\u7d50\u679c\u304c\u4e0d\u5b89\u5b9a(\u975e\u6c7a\u5b9a\u7684)\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u306d\u3002\n\n##GPU\u3092\u4f7f\u7528\u3057\u3066\u3082\u6f14\u7b97\u7d50\u679c\u3092\u5b89\u5b9a(\u6c7a\u5b9a\u7684\u306b)\u3055\u305b\u308b\u65b9\u6cd5\n\n**\u624b\u3063\u53d6\u308a\u65e9\u304f\u3066\u52b9\u679c\u7684\u306a\u306e\u306f\u74b0\u5883\u5909\u6570CHAINER_CUDNN\u306b0\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3059\u3002**\n\nChainer\u306e\u74b0\u5883\u5909\u6570\u306b\u3064\u3044\u3066\u306f[\u3053\u3061\u3089](http://docs.chainer.org/en/stable/reference/environment.html)\u3092\u53c2\u7167\u306e\u3053\u3068\u3002\n\n```console:\u74b0\u5883\u5909\u6570\u3092\u6307\u5b9a\u3057\u305f\u3001GPU\u306b\u3088\u308b\u5b9f\u884c\u7d50\u679c(10Epoch\u76ee\u306e\u7d50\u679c\u3060\u3051\u3092\u62bd\u51fa)\n$ export CHAINER_CUDNN=0\n$ python mnist_chainer.py\nepoch       main/loss   validation/main/loss  main/accuracy  validation/main/accuracy  elapsed_time\n10          0.00971611  0.0498366             0.997232       0.98955                   175.727\n10          0.00971611  0.0498366             0.997232       0.98955                   174.934\n10          0.00971611  0.0498366             0.997232       0.98955                   175.237\n10          0.00971611  0.0498366             0.997232       0.98955                   175.662\n10          0.00971611  0.0498366             0.997232       0.98955                   174.704\n```\n\u3042\u3063\u3055\u308a\u89e3\u6c7a\u3057\u307e\u3057\u305f\u3002\u6f14\u7b97\u7d50\u679c\u304c\u4e0d\u5b89\u5b9a(\u975e\u6c7a\u5b9a\u7684)\u306b\u306a\u308b\u539f\u56e0\u306fcuDNN\u3060\u3063\u305f\u3088\u3046\u3067\u3059\u3002\n\n\u3057\u304b\u3057\u3001\u6f14\u7b97\u7d50\u679c\u306f\u5b89\u5b9a\u3057\u305f\u3082\u306e\u306e**\u6f14\u7b97\u6642\u9593\u304c\u7d042.2\u500d**\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\n##\u6f14\u7b97\u6027\u80fd\u3092\u307b\u3068\u3093\u3069\u4f4e\u4e0b\u3055\u305b\u305a\u306b\u5b89\u5b9a(\u6c7a\u5b9a)\u7684\u306a\u6f14\u7b97\u3092\u884c\u3046\u65b9\u6cd5\n\n\u500b\u4eba\u7684\u306b\u306f\u904e\u53bb\u306e\u8a66\u9a13\u7d50\u679c\u3068\u306e\u6bd4\u8f03\u3092\u884c\u3046\u3088\u3046\u306a\u8a66\u9a13\u306f\u305d\u308c\u307b\u3069\u9ad8\u983b\u5ea6\u3067\u884c\u3046\u308f\u3051\u3067\u306f\u306a\u3044\u305f\u3081\u3001\u6f14\u7b97\u6642\u9593\u304c2.2\u500d\u7a0b\u5ea6\u306a\u3089\u5341\u5206\u8a31\u5bb9\u51fa\u6765\u307e\u3059\u3002\n\n\u3057\u304b\u3057\u3001\u30b1\u30fc\u30b9\u306b\u3088\u3063\u3066\u306f\u51fa\u6765\u308b\u3060\u3051\u51e6\u7406\u6027\u80fd\u3092\u843d\u3068\u3055\u305a\u306b\u5b89\u5b9a(\u6c7a\u5b9a)\u7684\u306a\u7d50\u679c\u3092\u5f97\u305f\u3044\u3053\u3068\u3082\u3042\u308b\u3067\u3057\u3087\u3046\u3002\n\n\u305d\u306e\u5834\u5408\u3001\u5b9f\u88c5\u306b\u82e5\u5e72\u306e\u4fee\u6b63\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u8ffd\u52a0\u3067\u5bfe\u5fdc\u53ef\u80fd\u3067\u3059\u3002\n\n```python:\u6027\u80fd\u4f4e\u4e0b\u3092\u6291\u3048\u3066\u5b89\u5b9a(\u6c7a\u5b9a)\u7684\u306a\u6f14\u7b97\u7d50\u679c\u3092\u5f97\u3089\u308c\u308b\u3088\u3046\u4fee\u6b63\nclass CNN(chainer.Chain):\n    def __init__(self):\n        super(CNN, self).__init__(\n            conv1=L.Convolution2D(1, 32, 5, stride=1, deterministic=True),\n            conv2=L.Convolution2D(32, 64, 5, stride=1, deterministic=True),\n            l1=L.Linear(None, 512),\n            l2=L.Linear(None, 10),\n        )\n\n    def __call__(self, x):\n        x_4d = x.data.reshape(len(x.data), 1, 28, 28)\n        h = F.relu(self.conv1(x_4d), use_cudnn=False)\n        h = F.max_pooling_2d(h, 2, stride=1, use_cudnn=False)\n        h = F.relu(self.conv2(h), use_cudnn=False)\n        h = F.max_pooling_2d(h, 2, stride=1, use_cudnn=False)\n        h = F.relu(self.l1(h), use_cudnn=False)\n        return self.l2(h)\n```\n\n\u8a18\u8ff0\u306e\u30dd\u30a4\u30f3\u30c8\u306f\u4e0b\u8a18\u306e3\u70b9\u3067\u3059\u3002\n\n- L.Convolution2D\u306bdeterministic=True\u3092\u6307\u5b9a\n- F.max_pooling_2d\u306buse_cudnn=False\u3092\u6307\u5b9a\n- F.relu\u306buse_cudnn=False\u3092\u6307\u5b9a\n\nConvolution2D\u3067\u306fcuDNN\u3092\u4f7f\u7528\u3059\u308b\u3082\u306e\u306edeterministic(\u6c7a\u5b9a\u7684)\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u7528\u3059\u308b\u3088\u3046\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002(\u672c\u8a18\u4e8b\u5192\u982d\u306eIssues\u306b\u3042\u308b\u901a\u308a\u3001v1.18.0\u306b\u3066\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f)\n\nmax_pooling_2d\u3068relu\u3067\u306fdeterministic\u306e\u6307\u5b9a\u304c\u51fa\u6765\u306a\u3044\u305f\u3081cuDNN\u3092\u4f7f\u7528\u3057\u306a\u3044\u3088\u3046\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n(max_pooling_2d\u3067cuDNN\u3092\u4f7f\u7528\u3059\u308b\u3068\u7d50\u679c\u304c\u975e\u6c7a\u5b9a\u7684\u306b\u306a\u308a\u307e\u3059)\n\n\u5c1a\u3001\u3053\u306e\u5b9f\u88c5\u306e\u5834\u5408\u306f\u3001\u74b0\u5883\u5909\u6570CHAINER_CUDNN\u306f\u6307\u5b9a\u3057\u306a\u3044\u3001\u307e\u305f\u306f1\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n###\u901f\u5ea6\u3092\u6c17\u306b\u3057\u3064\u3064\u518d\u5ea6\u5b9f\u884c\u3057\u307e\u3059\n```console:GPU\u306b\u3088\u308b\u5b9f\u884c\u7d50\u679c(10Epoch\u76ee\u306e\u7d50\u679c\u3060\u3051\u3092\u62bd\u51fa)\n$ export CHAINER_CUDNN=1\n$ python mnist_chainer_deterministic.py\nepoch       main/loss   validation/main/loss  main/accuracy  validation/main/accuracy  elapsed_time\n10          0.00820688  0.0408237             0.997649       0.991242                  80.8627\n10          0.00820688  0.0408237             0.997649       0.991242                  80.2272\n10          0.00820688  0.0408237             0.997649       0.991242                  80.7561\n10          0.00820688  0.0408237             0.997649       0.991242                  80.8799\n10          0.00820688  0.0408237             0.997649       0.991242                  80.7954\n```\n\u671f\u5f85\u901a\u308a\u3001\u307b\u3068\u3093\u3069\u6f14\u7b97\u6027\u80fd\u3092\u843d\u3068\u3055\u305a\u306b\u5b89\u5b9a(\u6c7a\u5b9a)\u7684\u306a\u6f14\u7b97\u7d50\u679c\u3092\u5f97\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3057\u305f\u3002\n\n\u4e0a\u8a18\u5b9f\u884c\u4f8b\u3067\u306f\u50c5\u304b**2.5%\u306e\u901f\u5ea6\u4f4e\u4e0b**\u3067\u5b89\u5b9a(\u6c7a\u5b9a)\u7684\u306a\u6f14\u7b97\u7d50\u679c\u3092\u5f97\u3089\u308c\u307e\u3057\u305f\u3002\n\n##\u7d50\u8ad6\nChainer\u3067GPU\u6f14\u7b97\u3092\u7528\u3044\u3066\u5b89\u5b9a(\u6c7a\u5b9a)\u7684\u306a\u6f14\u7b97\u3092\u884c\u3044\u305f\u3044\u5834\u5408\u306f\u4e0b\u8a182\u3064\u306e\u65b9\u6cd5\u304c\u3042\u308b\u3002\n\n- **\u74b0\u5883\u5909\u6570CHAINER_CUDNN\u306b0\u3092\u8a2d\u5b9a\u3057cuDNN\u3092\u7121\u52b9\u306b\u3059\u308b**\n- **Link\u3084Function\u7cfbAPI\u306e\u5f15\u6570\u3067use_cudnn=False\u3084deterministic=True\u3092\u500b\u5225\u6307\u5b9a\u3059\u308b**\n\n###\u4f59\u8ac7\nTensorFlow, Torch, Caffe\u306a\u3069\u4ed6\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3082\u3053\u306e\u554f\u984c\u306b\u53d6\u308a\u7d44\u3093\u3067\u3044\u308b\u3088\u3046\u3067\u3059\u304c\u3001Chainer\u304c\u4e00\u756a\u7f8e\u3057\u304f\u89e3\u6c7a\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n", "tags": ["\u6a5f\u68b0\u5b66\u7fd2", "DeepLearning", "Chainer"]}