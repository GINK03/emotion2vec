{"context": " More than 1 year has passed since last update.\u541b\u306a\u3089\u3069\u3046\u66f8\u304f Online \u554f\u984c\u6587\u3002\n\u6a19\u6e96\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u8ffd\u52a0\u3059\u308b\u3002\n\u30b7\u30fc\u30c8\u306e\u3068\u3042\u308b\u5217\u306b\u5165\u529b\u6587\u5b57\u5217\u3092\u5f35\u308a\u4ed8\u3051\u3001\u5148\u982d\u30bb\u30eb\u3092\u9078\u629e\u3057\u3066\u30de\u30af\u30ed\u304b\u3089Decrypt\u30d7\u30ed\u30b7\u30fc\u30b8\u30e3\u3092\u5b9f\u884c\u3059\u308b\u3002\n\u305d\u306e\u7d50\u679c\u3001\u5165\u529b\u30bb\u30eb\u306e\u53f3\u96a3\u306e\u30bb\u30eb\u306b(4\u3064\u304a\u304d\u306b)\u89e3\u8aad\u3055\u308c\u305f\u6587\u5b57\u304c\u73fe\u308c\u308b\u3002\n\u30b3\u30fc\u30c9\u81ea\u4f53\u306f\u307e\u3063\u3068\u3046\u3067\u3059\u3088\u3002\u9762\u767d\u307f\u3068\u3044\u3048\u3070\u3001\u30bb\u30eb\u53c2\u7167\u3092\u57cb\u3081\u8fbc\u3093\u3067\u3044\u308b\u306e\u3067\u3001Excel\u306e\u30ef\u30fc\u30af\u30b7\u30fc\u30c8\u4e0a\u3067\u5165\u529b\u6587\u5b57\u5217\u3092\u5909\u66f4\u3057\u305f\u3089\u305d\u308c\u306b\u8ffd\u5f93\u3059\u308b\u3053\u3068\u3050\u3089\u3044\u304b\u3002\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\uff01\n\nModule1.BAS\nSub Decrypt()\n    Set rAll = Range(ActiveCell, ActiveCell.End(xlDown))\n    For i = 1 To rAll.Count Step 4\n        rAll.Item(i).Offset(0, 1).FormulaR1C1 = \"=GetChar(RC[-1]:R[3]C[-1])\"\n    Next\nEnd Sub\n\nFunction GetChar(ByVal r As Range) As String\n    If r.Count <> 4 Then\n        Exit Function\n    End If\n    For i = 1 To 4\n        a = (a * 4) + Encode(r.Item(i).Value)\n    Next\n    GetChar = ChrW(a)\nEnd Function\n\nFunction Encode(ByVal str As String) As Integer\n    Set regex = CreateObject(\"VBScript.RegExp\")\n    If IsMAC(str, regex) Then\n        Encode = 0\n    ElseIf IsIPv4(str, regex) Then\n        Encode = 1\n    ElseIf IsIPv6(str, regex) Then\n        Encode = 2\n    Else\n        Encode = 3\n    End If\nEnd Function\n\nFunction IsMAC(ByVal str As String, ByVal regex As Object) As Boolean\n    pt = \"^[0-9a-f]{2}([:-])[0-9a-f]{2}\\1[0-9a-f]{2}\\1[0-9a-f]{2}\\1[0-9a-f]{2}\\1[0-9a-f]{2}$\"\n    regex.Pattern = pt\n    regex.IgnoreCase = True\n    IsMAC = regex.Test(str)\nEnd Function\n\nFunction IsIPv4(ByVal str As String, ByVal regex As Object) As Boolean\n    str = \".\" & str\n    regex.Pattern = \"\\.(0|[1-9]\\d{0,2})\"\n    regex.Global = True\n    Set mc = regex.Execute(str)\n    If mc.Count <> 4 Then\n        Exit Function\n    End If\n    If (mc(0).Value & mc(1).Value & mc(2).Value & mc(3).Value) <> str Then\n        Exit Function\n    End If\n    For Each m In mc\n        d = CInt(Mid(m.Value, 2))\n        If d < 0 Or d > 255 Then\n            Exit Function\n        End If\n    Next\n    IsIPv4 = True\nEnd Function\n\nFunction IsIPv6(ByVal str As String, ByVal regex As Object) As Boolean\n    w = \"[1-9a-f][0-9a-f]{0,3}\"\n    cw = \":\" & w\n    pt = \"^\" & w & cw & cw & cw & cw & cw & cw & cw & \"$\"\n    regex.Pattern = pt\n    regex.IgnoreCase = True\n    IsIPV6 = regex.Test(str)\nEnd Function\n\n\n[\u541b\u306a\u3089\u3069\u3046\u66f8\u304f Online \u554f\u984c\u6587](http://ll.jus.or.jp/2012/doukaku-online-main.html)\u3002\n\n\u6a19\u6e96\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u8ffd\u52a0\u3059\u308b\u3002\n\u30b7\u30fc\u30c8\u306e\u3068\u3042\u308b\u5217\u306b\u5165\u529b\u6587\u5b57\u5217\u3092\u5f35\u308a\u4ed8\u3051\u3001\u5148\u982d\u30bb\u30eb\u3092\u9078\u629e\u3057\u3066\u30de\u30af\u30ed\u304b\u3089Decrypt\u30d7\u30ed\u30b7\u30fc\u30b8\u30e3\u3092\u5b9f\u884c\u3059\u308b\u3002\n\u305d\u306e\u7d50\u679c\u3001\u5165\u529b\u30bb\u30eb\u306e\u53f3\u96a3\u306e\u30bb\u30eb\u306b(4\u3064\u304a\u304d\u306b)\u89e3\u8aad\u3055\u308c\u305f\u6587\u5b57\u304c\u73fe\u308c\u308b\u3002\n\n\u30b3\u30fc\u30c9\u81ea\u4f53\u306f\u307e\u3063\u3068\u3046\u3067\u3059\u3088\u3002\u9762\u767d\u307f\u3068\u3044\u3048\u3070\u3001\u30bb\u30eb\u53c2\u7167\u3092\u57cb\u3081\u8fbc\u3093\u3067\u3044\u308b\u306e\u3067\u3001Excel\u306e\u30ef\u30fc\u30af\u30b7\u30fc\u30c8\u4e0a\u3067\u5165\u529b\u6587\u5b57\u5217\u3092\u5909\u66f4\u3057\u305f\u3089\u305d\u308c\u306b\u8ffd\u5f93\u3059\u308b\u3053\u3068\u3050\u3089\u3044\u304b\u3002\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\uff01\n\n```vbnet:Module1.BAS\nSub Decrypt()\n    Set rAll = Range(ActiveCell, ActiveCell.End(xlDown))\n    For i = 1 To rAll.Count Step 4\n        rAll.Item(i).Offset(0, 1).FormulaR1C1 = \"=GetChar(RC[-1]:R[3]C[-1])\"\n    Next\nEnd Sub\n\nFunction GetChar(ByVal r As Range) As String\n    If r.Count <> 4 Then\n        Exit Function\n    End If\n    For i = 1 To 4\n        a = (a * 4) + Encode(r.Item(i).Value)\n    Next\n    GetChar = ChrW(a)\nEnd Function\n\nFunction Encode(ByVal str As String) As Integer\n    Set regex = CreateObject(\"VBScript.RegExp\")\n    If IsMAC(str, regex) Then\n        Encode = 0\n    ElseIf IsIPv4(str, regex) Then\n        Encode = 1\n    ElseIf IsIPv6(str, regex) Then\n        Encode = 2\n    Else\n        Encode = 3\n    End If\nEnd Function\n\nFunction IsMAC(ByVal str As String, ByVal regex As Object) As Boolean\n    pt = \"^[0-9a-f]{2}([:-])[0-9a-f]{2}\\1[0-9a-f]{2}\\1[0-9a-f]{2}\\1[0-9a-f]{2}\\1[0-9a-f]{2}$\"\n    regex.Pattern = pt\n    regex.IgnoreCase = True\n    IsMAC = regex.Test(str)\nEnd Function\n\nFunction IsIPv4(ByVal str As String, ByVal regex As Object) As Boolean\n    str = \".\" & str\n    regex.Pattern = \"\\.(0|[1-9]\\d{0,2})\"\n    regex.Global = True\n    Set mc = regex.Execute(str)\n    If mc.Count <> 4 Then\n        Exit Function\n    End If\n    If (mc(0).Value & mc(1).Value & mc(2).Value & mc(3).Value) <> str Then\n        Exit Function\n    End If\n    For Each m In mc\n        d = CInt(Mid(m.Value, 2))\n        If d < 0 Or d > 255 Then\n            Exit Function\n        End If\n    Next\n    IsIPv4 = True\nEnd Function\n\nFunction IsIPv6(ByVal str As String, ByVal regex As Object) As Boolean\n    w = \"[1-9a-f][0-9a-f]{0,3}\"\n    cw = \":\" & w\n    pt = \"^\" & w & cw & cw & cw & cw & cw & cw & cw & \"$\"\n    regex.Pattern = pt\n    regex.IgnoreCase = True\n    IsIPV6 = regex.Test(str)\nEnd Function\n```\n", "tags": ["Excel", "VBA"]}