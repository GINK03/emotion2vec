{"context": " More than 1 year has passed since last update.\u30e4\u30de\u30ed\u30dc \u6280\u8853\u62c5\u5f53\u306eHata\u3067\u3059\u3002\nPepper\u306b\u300c\u4eca\u65e5\u306e\u5929\u6c17\u306f\uff1f\u300d\u3068\u8074\u3044\u3066\u3082\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u6559\u3048\u3066\u304f\u308c\u307e\u305b\u3093\u3002\n\u305d\u3053\u3067\u3001\u4eca\u56de\u306fOpenWeatherMap\u3068\u3044\u3046\u7121\u6599\u306e\u304a\u5929\u6c17API\u3068\u9023\u643a\u3057\u3066\u3001Pepper\u304c\u304a\u5929\u6c17\u60c5\u5831\u3092\u6559\u3048\u3066\u304f\u308c\u308b\u3088\u3046\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u81ea\u4f5c\u3057\u305f\u306e\u3067\u3054\u7d39\u4ecb\u3057\u307e\u3059\u3002\nAPI\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u306fJSON\u5f62\u5f0f\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nJSON - \u5929\u6c17\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\n\n\u304a\u5929\u6c17\u53d6\u5f97\u30dc\u30c3\u30af\u30b9\u306e\u4f5c\u6210\n\n\u30d3\u30d8\u30a4\u30d3\u30a2\u4e0a\u3067\u53f3\u30af\u30ea\u30c3\u30af > [\u30dc\u30c3\u30af\u30b9\u306e\u65b0\u898f\u4f5c\u6210] > [Python] \u3067\u65b0\u898f\u306b\u30dc\u30c3\u30af\u30b9\u3092\u4f5c\u6210\n\u30b9\u30af\u30ea\u30d7\u30c8\u30a8\u30c7\u30a3\u30bf\u3067\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u4f5c\u6210\n[\u51fa\u529b\u3092\u8ffd\u52a0]\u3067\u51fa\u529b\u306b\u300cresult\u300d\u3092\u8ffd\u52a0\nSpeech Reco\u30dc\u30c3\u30af\u30b9\u3092\u4f5c\u6210\u3057\u3001Word list\u306b\u300c\u4eca\u65e5\u306e\u5929\u6c17\u306f;\u4eca\u65e5\u306e\u6e29\u5ea6\u306f;\u660e\u65e5\u306e\u5929\u6c17\u306f;\u660e\u65e5\u306e\u6e29\u5ea6\u306f\u300d\u3092\u8ffd\u52a0\nSet language > Speech Reco(4.) > Weather(1.\uff5e3.) > Say Text\u306e\u9806\u3067\u7e4b\u3050\n\n\n\nWeather\u30dc\u30c3\u30af\u30b9\u306e\u30b9\u30af\u30ea\u30d7\u30c8\nclass MyClass(GeneratedClass):\n    def __init__(self):\n        GeneratedClass.__init__(self, False)\n\n    def onLoad(self):\n        pass\n\n    def onUnload(self):\n        pass\n\n    def onInput_onStart(self, p):\n        # self.logger.info(p)\n\n        import requests\n        import json\n\n        r = requests.get('http://api.openweathermap.org/data/2.5/forecast?q=\"Tokyo\",\"Japan\"')\n\n        list = r.json()['list']\n        today = list[2]\n        tommorow = list[10]\n\n        result = {\\\n            \"\u4eca\u65e5\u306e\u5929\u6c17\u306f\":getWeather(today),\\\n            \"\u4eca\u65e5\u306e\u6e29\u5ea6\u306f\":getTempa(today),\\\n            \"\u660e\u65e5\u306e\u5929\u6c17\u306f\":getWeather(tommorow),\\\n            \"\u660e\u65e5\u306e\u6e29\u5ea6\u306f\":getTempa(tommorow)\\\n        }\n\n        self.result(result[p])\n\n        pass\n\n    def onInput_onStop(self):\n        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped\n        self.onStopped() #activate the output of the box\n\ndef getWeather(obj):\n    weather = obj['weather'][0]['main'].replace('\"', '')\n    if (weather == 'Clear'):\n        return '\u6674\u308c\u3067\u3059'\n    elif (weather == 'Clouds'):\n        return '\u66c7\u308a\u3067\u3059'\n    elif (weather == 'Rain'):\n        return '\u96e8\u3067\u3059'\n    else:\n        return '\u308f\u304b\u308a\u307e\u305b\u3093'\n\ndef getTempa(obj):\n    temp = int(float(json.dumps(obj['main']['temp']).replace('\"','')) - 273.15)\n    return str(temp) + '\u5ea6\u3067\u3059'\n\n\n\n\u30b3\u30fc\u30c9\u306e\u89e3\u8aac\n\u9806\u306b\u89e3\u8aac\u3057\u307e\u3059\u3002\n\u307e\u305a\u3001onInput_onStart\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306bp\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\u3053\u308c\u306f\u524d\u306e\u30dc\u30c3\u30af\u30b9\u304b\u3089\u306e\u51fa\u529b\u5024\u3092\u53d7\u3051\u53d6\u308a\u307e\u3059\u3002\n\nWeather\ndef onInput_onStart(self, p):\n\n\n\u6b21\u306bAPI\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u3053\u306e\u6642\u3001\u4e8b\u524d\u306b\u5fc5\u8981\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\nAPI\u306b\u3064\u3044\u3066\n\u4eca\u56de\u30a2\u30af\u30bb\u30b9\u3059\u308bAPI\u3067\u53d6\u5f97\u3067\u304d\u308b\u5929\u6c17\u60c5\u5831\u306f\u3001\n0\u6642\u30fb3\u6642\u30fb6\u6642\u2026\u3068\u30013\u6642\u9593\u304a\u304d\u306b\u5b9a\u6642\u523b\u306b\u914d\u4fe1\u3055\u308c\u307e\u3059\u3002\n\nAPI\u3092\u53e9\u3044\u305f\u6642\u523b\u306b\u6700\u3082\u8fd1\u3044\u5929\u6c17\u60c5\u5831\u306f\u3001list[2]\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\n1\u65e5\u3042\u305f\u308a\u306e\u914d\u4fe1\u6570\u306f8\u901a\u3068\u306a\u308a\u307e\u3059\u306e\u3067\uff0824\u6642\u9593\u00f73\u6642\u9593 = 8\u901a)\n\u7fcc\u65e5\u306e\u540c\u914d\u4fe1\u6642\u523b\u306f\u3001\u30ea\u30b9\u30c8\u756a\u53f7\u306b+8\u3057\u305f\nlist[10]\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\n\n\nWeather\nimport requests # HTTP\u30ea\u30af\u30a8\u30b9\u30c8\u3059\u308b\u306e\u306b\u5fc5\u8981\nimport json # JSON\u64cd\u4f5c\u3059\u308b\u306e\u306b\u5fc5\u8981\n\n# \u6771\u4eac\u306e\u5929\u6c17\u3092\u53d6\u5f97\n# forecast\u3067\"Call 5 day / 3 hour forecast data\"(5\u65e5\u5206\u306e3\u6642\u9593\u6bce\u306e\u60c5\u5831)\u3092\u53d6\u5f97\nr = requests.get('http://api.openweathermap.org/data/2.5/forecast?q=\"Tokyo\",\"Japan\"')\n\n# list\u306bforecast\u306e\u60c5\u5831\u304c\u914d\u5217\u3068\u3057\u3066\u5165\u3063\u3066\u3044\u308b\u306e\u3067\u53d6\u5f97\nlist = r.json()['list']\n# \u4eca\u65e5\u306e\u60c5\u5831\u3092\u53d6\u5f97\ntoday = list[2]\n# \u660e\u65e5\u306e\u60c5\u5831\u3092\u53d6\u5f97\ntommorow = list[10]\n\n\n\u5f8c\u306f\u51fa\u529b\u306b\u7d50\u679c\u3092\u8fd4\u3059\u3060\u3051\u3067\u3059\u3002\n\nWeather\n# Speech Reco\u306e\u7d50\u679c\u306b\u3088\u3063\u3066\u8fd4\u3059\u5024\u3092\u5207\u308a\u66ff\u3048\u308b\nresult = {\\\n    \"\u4eca\u65e5\u306e\u5929\u6c17\u306f\":getWeather(today),\\\n    \"\u4eca\u65e5\u306e\u6e29\u5ea6\u306f\":getTempa(today),\\\n    \"\u660e\u65e5\u306e\u5929\u6c17\u306f\":getWeather(tommorow),\\\n    \"\u660e\u65e5\u306e\u6e29\u5ea6\u306f\":getTempa(tommorow)\\\n}\n\n# \u51fa\u529b\u5909\u6570result\u306b\u5024\u3092\u30bb\u30c3\u30c8\nself.result(result[p])\n\n\n\n\u304a\u308f\u308a\u306b\nAPI\u306b\u3088\u3063\u3066JSON\u306e\u69cb\u9020\u304c\u9055\u3044\u307e\u3059\u306e\u3067\u3001\n\u5229\u7528\u3057\u305f\u3044API\u306b\u5408\u308f\u305b\u3066\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\u4eca\u56de\u306e\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u304b\u3089\u3002\n\u30e4\u30de\u30ed\u30dc \u6280\u8853\u62c5\u5f53\u306eHata\u3067\u3059\u3002\n\nPepper\u306b\u300c\u4eca\u65e5\u306e\u5929\u6c17\u306f\uff1f\u300d\u3068\u8074\u3044\u3066\u3082\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u6559\u3048\u3066\u304f\u308c\u307e\u305b\u3093\u3002\n\u305d\u3053\u3067\u3001\u4eca\u56de\u306f[OpenWeatherMap](http://openweathermap.org/)\u3068\u3044\u3046\u7121\u6599\u306e\u304a\u5929\u6c17API\u3068\u9023\u643a\u3057\u3066\u3001Pepper\u304c\u304a\u5929\u6c17\u60c5\u5831\u3092\u6559\u3048\u3066\u304f\u308c\u308b\u3088\u3046\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u81ea\u4f5c\u3057\u305f\u306e\u3067\u3054\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\nAPI\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u306fJSON\u5f62\u5f0f\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n[JSON - \u5929\u6c17\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b](http://qiita.com/s0hno/items/b67a24bd3cbeb6e7cdc0)\n\n# \u304a\u5929\u6c17\u53d6\u5f97\u30dc\u30c3\u30af\u30b9\u306e\u4f5c\u6210\n\n1. \u30d3\u30d8\u30a4\u30d3\u30a2\u4e0a\u3067\u53f3\u30af\u30ea\u30c3\u30af > [\u30dc\u30c3\u30af\u30b9\u306e\u65b0\u898f\u4f5c\u6210] > [Python] \u3067\u65b0\u898f\u306b\u30dc\u30c3\u30af\u30b9\u3092\u4f5c\u6210\n2. \u30b9\u30af\u30ea\u30d7\u30c8\u30a8\u30c7\u30a3\u30bf\u3067\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u4f5c\u6210\n3. [\u51fa\u529b\u3092\u8ffd\u52a0]\u3067\u51fa\u529b\u306b\u300cresult\u300d\u3092\u8ffd\u52a0\n4. Speech Reco\u30dc\u30c3\u30af\u30b9\u3092\u4f5c\u6210\u3057\u3001Word list\u306b\u300c\u4eca\u65e5\u306e\u5929\u6c17\u306f;\u4eca\u65e5\u306e\u6e29\u5ea6\u306f;\u660e\u65e5\u306e\u5929\u6c17\u306f;\u660e\u65e5\u306e\u6e29\u5ea6\u306f\u300d\u3092\u8ffd\u52a0\n5. Set language > Speech Reco(4.) > Weather(1.\uff5e3.) > Say Text\u306e\u9806\u3067\u7e4b\u3050\n\n![WeatherPepper.PNG](https://qiita-image-store.s3.amazonaws.com/0/94209/ef5fe3c3-ad25-117f-2056-95b1cbd2ade3.png)\n\n```py:Weather\u30dc\u30c3\u30af\u30b9\u306e\u30b9\u30af\u30ea\u30d7\u30c8\nclass MyClass(GeneratedClass):\n    def __init__(self):\n        GeneratedClass.__init__(self, False)\n\n    def onLoad(self):\n        pass\n\n    def onUnload(self):\n        pass\n\n    def onInput_onStart(self, p):\n        # self.logger.info(p)\n\n        import requests\n        import json\n\n        r = requests.get('http://api.openweathermap.org/data/2.5/forecast?q=\"Tokyo\",\"Japan\"')\n\n        list = r.json()['list']\n        today = list[2]\n        tommorow = list[10]\n\n        result = {\\\n            \"\u4eca\u65e5\u306e\u5929\u6c17\u306f\":getWeather(today),\\\n            \"\u4eca\u65e5\u306e\u6e29\u5ea6\u306f\":getTempa(today),\\\n            \"\u660e\u65e5\u306e\u5929\u6c17\u306f\":getWeather(tommorow),\\\n            \"\u660e\u65e5\u306e\u6e29\u5ea6\u306f\":getTempa(tommorow)\\\n        }\n\n        self.result(result[p])\n\n        pass\n\n    def onInput_onStop(self):\n        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped\n        self.onStopped() #activate the output of the box\n\ndef getWeather(obj):\n    weather = obj['weather'][0]['main'].replace('\"', '')\n    if (weather == 'Clear'):\n        return '\u6674\u308c\u3067\u3059'\n    elif (weather == 'Clouds'):\n        return '\u66c7\u308a\u3067\u3059'\n    elif (weather == 'Rain'):\n        return '\u96e8\u3067\u3059'\n    else:\n        return '\u308f\u304b\u308a\u307e\u305b\u3093'\n\ndef getTempa(obj):\n    temp = int(float(json.dumps(obj['main']['temp']).replace('\"','')) - 273.15)\n    return str(temp) + '\u5ea6\u3067\u3059'\n```\n\n# \u30b3\u30fc\u30c9\u306e\u89e3\u8aac\n\n\u9806\u306b\u89e3\u8aac\u3057\u307e\u3059\u3002\n\n\u307e\u305a\u3001onInput_onStart\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306bp\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\u3053\u308c\u306f\u524d\u306e\u30dc\u30c3\u30af\u30b9\u304b\u3089\u306e\u51fa\u529b\u5024\u3092\u53d7\u3051\u53d6\u308a\u307e\u3059\u3002\n\n```py:Weather\ndef onInput_onStart(self, p):\n```\n\n\u6b21\u306bAPI\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u3053\u306e\u6642\u3001\u4e8b\u524d\u306b\u5fc5\u8981\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```text:API\u306b\u3064\u3044\u3066\n\u4eca\u56de\u30a2\u30af\u30bb\u30b9\u3059\u308bAPI\u3067\u53d6\u5f97\u3067\u304d\u308b\u5929\u6c17\u60c5\u5831\u306f\u3001\n0\u6642\u30fb3\u6642\u30fb6\u6642\u2026\u3068\u30013\u6642\u9593\u304a\u304d\u306b\u5b9a\u6642\u523b\u306b\u914d\u4fe1\u3055\u308c\u307e\u3059\u3002\n\nAPI\u3092\u53e9\u3044\u305f\u6642\u523b\u306b\u6700\u3082\u8fd1\u3044\u5929\u6c17\u60c5\u5831\u306f\u3001list[2]\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\n1\u65e5\u3042\u305f\u308a\u306e\u914d\u4fe1\u6570\u306f8\u901a\u3068\u306a\u308a\u307e\u3059\u306e\u3067\uff0824\u6642\u9593\u00f73\u6642\u9593 = 8\u901a)\n\u7fcc\u65e5\u306e\u540c\u914d\u4fe1\u6642\u523b\u306f\u3001\u30ea\u30b9\u30c8\u756a\u53f7\u306b+8\u3057\u305f\nlist[10]\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n```\n\n```py:Weather\nimport requests # HTTP\u30ea\u30af\u30a8\u30b9\u30c8\u3059\u308b\u306e\u306b\u5fc5\u8981\nimport json # JSON\u64cd\u4f5c\u3059\u308b\u306e\u306b\u5fc5\u8981\n\n# \u6771\u4eac\u306e\u5929\u6c17\u3092\u53d6\u5f97\n# forecast\u3067\"Call 5 day / 3 hour forecast data\"(5\u65e5\u5206\u306e3\u6642\u9593\u6bce\u306e\u60c5\u5831)\u3092\u53d6\u5f97\nr = requests.get('http://api.openweathermap.org/data/2.5/forecast?q=\"Tokyo\",\"Japan\"')\n\n# list\u306bforecast\u306e\u60c5\u5831\u304c\u914d\u5217\u3068\u3057\u3066\u5165\u3063\u3066\u3044\u308b\u306e\u3067\u53d6\u5f97\nlist = r.json()['list']\n# \u4eca\u65e5\u306e\u60c5\u5831\u3092\u53d6\u5f97\ntoday = list[2]\n# \u660e\u65e5\u306e\u60c5\u5831\u3092\u53d6\u5f97\ntommorow = list[10]\n```\n\n\u5f8c\u306f\u51fa\u529b\u306b\u7d50\u679c\u3092\u8fd4\u3059\u3060\u3051\u3067\u3059\u3002\n\n```py:Weather\n# Speech Reco\u306e\u7d50\u679c\u306b\u3088\u3063\u3066\u8fd4\u3059\u5024\u3092\u5207\u308a\u66ff\u3048\u308b\nresult = {\\\n    \"\u4eca\u65e5\u306e\u5929\u6c17\u306f\":getWeather(today),\\\n    \"\u4eca\u65e5\u306e\u6e29\u5ea6\u306f\":getTempa(today),\\\n    \"\u660e\u65e5\u306e\u5929\u6c17\u306f\":getWeather(tommorow),\\\n    \"\u660e\u65e5\u306e\u6e29\u5ea6\u306f\":getTempa(tommorow)\\\n}\n\n# \u51fa\u529b\u5909\u6570result\u306b\u5024\u3092\u30bb\u30c3\u30c8\nself.result(result[p])\n```\n\n# \u304a\u308f\u308a\u306b\n\nAPI\u306b\u3088\u3063\u3066JSON\u306e\u69cb\u9020\u304c\u9055\u3044\u307e\u3059\u306e\u3067\u3001\n\u5229\u7528\u3057\u305f\u3044API\u306b\u5408\u308f\u305b\u3066\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u4eca\u56de\u306e\u30b3\u30fc\u30c9\u306f[\u3053\u3061\u3089](https://github.com/yamarobo/pepper_samples/tree/master/Weather)\u304b\u3089\u3002\n", "tags": ["Pepper"]}