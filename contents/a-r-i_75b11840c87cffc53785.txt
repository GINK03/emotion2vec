{"context": "\n\n\u6982\u8981\n\n\u30e6\u30fc\u30b6\u30fc\u304b\u3089\u9001\u3089\u308c\u3066\u304d\u305f\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3ID\u3092\u3082\u3068\u306bbitFlyer\u306echainFlyer API\u3092\u4f7f\u3063\u3066\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u60c5\u5831\u2192\u78ba\u8a8d\u6570\u3092\u53d6\u5f97\u3001\u8fd4\u4fe1\n\n\u30b3\u30fc\u30c9\n\ncallback.rb\nrequire 'sinatra'\nrequire 'line/bot'\nrequire 'json'\nrequire 'open-uri'\n\ndef client\n  @client ||= Line::Bot::Client.new { |config|\n    config.channel_secret = ENV[\"LINE_CHANNEL_SECRET\"]\n    config.channel_token = ENV[\"LINE_CHANNEL_TOKEN\"]\n  }\nend\n\npost '/callback' do\n  body = request.body.read\n  signature = request.env['HTTP_X_LINE_SIGNATURE']\n  unless client.validate_signature(body, signature)\n    error 400 do 'Bad Request' end\n  end\n  events = client.parse_events_from(body)\n  events.each { |event|\n    case event\n    when Line::Bot::Event::Message\n      case event.type\n      when Line::Bot::Event::MessageType::Text\n        begin\n          #\u30e6\u30fc\u30b6\u30fc\u304b\u3089\u9001\u3089\u308c\u3066\u304d\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\n          events_message_text = JSON.parse(body)[\"events\"][0][\"message\"][\"text\"]\n          #\u9001\u3089\u308c\u3066\u304d\u305f\u30e1\u30c3\u30bb\u30fc\u30b8=\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3ID\u3092\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8URL\u306b\u7d50\u5408\u3057\u3001\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306e\u60c5\u5831\u3092\u53d6\u5f97\n          transaction_info = open(\"https://chainflyer.bitflyer.jp/v1/tx/\"+events_message_text).read\n          #\u78ba\u8a8d\u6570\n          confirmed = JSON.parse(transaction_info)[\"confirmed\"]\n          message = {type:'text',text:confirmed}\n        rescue\n          #\u9001\u3089\u308c\u3066\u304d\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3ID\u3067\u3067\u306f\u306a\u3044\u5834\u5408\u306e\u51e6\u7406\n          message = {type:'text',text:\"\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\"}\n        end\n        client.reply_message(event['replyToken'], message)\n      end\n    end\n  }\n\n  \"OK\"\nend\n\n\n#\u6982\u8981\n<img width=\"1000\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-01-08 11.10.47.png\" src=\"http://i.imgur.com/67j7RYd.png\">\n\n\u30e6\u30fc\u30b6\u30fc\u304b\u3089\u9001\u3089\u308c\u3066\u304d\u305f\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3ID\u3092\u3082\u3068\u306bbitFlyer\u306e[chainFlyer API](https://chainflyer.bitflyer.jp/API/docs?lang=ja)\u3092\u4f7f\u3063\u3066\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u60c5\u5831\u2192\u78ba\u8a8d\u6570\u3092\u53d6\u5f97\u3001\u8fd4\u4fe1\n#\u30b3\u30fc\u30c9\n```callback.rb\nrequire 'sinatra'\nrequire 'line/bot'\nrequire 'json'\nrequire 'open-uri'\n\ndef client\n  @client ||= Line::Bot::Client.new { |config|\n    config.channel_secret = ENV[\"LINE_CHANNEL_SECRET\"]\n    config.channel_token = ENV[\"LINE_CHANNEL_TOKEN\"]\n  }\nend\n\npost '/callback' do\n  body = request.body.read\n  signature = request.env['HTTP_X_LINE_SIGNATURE']\n  unless client.validate_signature(body, signature)\n    error 400 do 'Bad Request' end\n  end\n  events = client.parse_events_from(body)\n  events.each { |event|\n    case event\n    when Line::Bot::Event::Message\n      case event.type\n      when Line::Bot::Event::MessageType::Text\n        begin\n          #\u30e6\u30fc\u30b6\u30fc\u304b\u3089\u9001\u3089\u308c\u3066\u304d\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\n          events_message_text = JSON.parse(body)[\"events\"][0][\"message\"][\"text\"]\n          #\u9001\u3089\u308c\u3066\u304d\u305f\u30e1\u30c3\u30bb\u30fc\u30b8=\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3ID\u3092\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8URL\u306b\u7d50\u5408\u3057\u3001\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306e\u60c5\u5831\u3092\u53d6\u5f97\n          transaction_info = open(\"https://chainflyer.bitflyer.jp/v1/tx/\"+events_message_text).read\n          #\u78ba\u8a8d\u6570\n          confirmed = JSON.parse(transaction_info)[\"confirmed\"]\n          message = {type:'text',text:confirmed}\n        rescue\n          #\u9001\u3089\u308c\u3066\u304d\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3ID\u3067\u3067\u306f\u306a\u3044\u5834\u5408\u306e\u51e6\u7406\n          message = {type:'text',text:\"\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\"}\n        end\n        client.reply_message(event['replyToken'], message)\n      end\n    end\n  }\n\n  \"OK\"\nend\n```\n", "tags": ["Bitcoin", "linebot", "LINEmessagingAPI", "Ruby", "Line"]}