{"context": "\n\n\u306f\u3058\u3081\u306b\nSSL\u306e\u30bd\u30b1\u30c3\u30c8\u901a\u4fe1\u3092\u4f7f\u3063\u305f\u3053\u3068\u304c\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u5b9f\u969b\u306b\u52d5\u304b\u3057\u305f\u7d50\u679c\u3092\u3053\u3053\u306b\u307e\u3068\u3081\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u74b0\u5883\nOS X El Capitan\nPython 2.7.11\nOpenSSL 0.9.8zh 14 Jan 2016\n\n\u6e96\u5099\n\n\u8a3c\u660e\u66f8\u3068\u516c\u958b\u9375\u306e\u4f5c\u6210\n\u4ee5\u4e0b\u306e\u30da\u30fc\u30b8\u3092\u53c2\u8003\u306b\u3001\u8a3c\u660e\u66f8\u3068\u516c\u958b\u9375\u3092OpenSSL\u3067\u4f5c\u6210\u3057\u305f\u3002\nhttp://qiita.com/marcy-terui/items/2f63d7f170ff82531245\n\u251c\u2500\u2500 keys\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 server.crt\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 server.csr  \u203b\u672a\u4f7f\u7528\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 server.key\n\n\n\u5b9f\u88c5\n\u4ee5\u4e0b\u306e\u30da\u30fc\u30b8\u3092\u53c2\u8003\u306b\u3001\u30b3\u30fc\u30c9\u3092\u4f5c\u6210\u3057\u305f\u3002\nhttps://docs.python.org/2/library/ssl.html\n17.3.5.2. \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30b5\u30a4\u30c9\u306e\u51e6\u7406\n17.3.5.3. \u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u306e\u51e6\u7406\n\nssl_server.py\nimport socket, ssl\n\nURL = '127.0.0.1'\nPORT = 10023\n\ncontext = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\ncontext.load_cert_chain(certfile=\"keys/server.crt\", keyfile=\"keys/server.key\")\n\nbindsocket = socket.socket()\nbindsocket.bind((URL, 10023))\nbindsocket.listen(5)\n\ndef do_something(connstream, data):\n    print '---------------------'\n    print data + '\\n'\n    print '---------------------'\n    print\n\ndef deal_with_client(connstream):\n    data = connstream.read()\n    # null data means the client is finished with us\n    while data:\n        if not do_something(connstream, data):\n            # we'll assume do_something returns False\n            # when we're finished with client\n            break\n        data = connstream.read()\n    # finished with client\n\nwhile True:\n    newsocket, fromaddr = bindsocket.accept()\n    connstream = context.wrap_socket(newsocket, server_side=True)\n    try:\n        deal_with_client(connstream)\n    finally:\n        connstream.shutdown(socket.SHUT_RDWR)\n        connstream.close()\n\n\n\nssl_client.py\nimport ssl\nimport socket\nimport pprint\n\nURL = '127.0.0.1'\nPORT = 10023\n\ncontext = ssl.create_default_context()\ncontext = ssl.SSLContext(ssl.PROTOCOL_SSLv23)\ncontext.verify_mode = ssl.CERT_NONE \ncontext.check_hostname = False\nconn = context.wrap_socket(socket.socket(socket.AF_INET),\n           server_hostname=URL)\nconn.connect((URL, PORT))\ncert = conn.getpeercert()\npprint.pprint(cert)\nconn.sendall(b\"HEAD / HTTP/1.0\\r\\nHost: linuxfr.org\\r\\n\\r\\n\")\npprint.pprint(conn.recv(1024).split(b\"\\r\\n\"))\n\n\n\n\u7d50\u679c\n\n\u30b5\u30fc\u30d0\u5074\n$ python ssl_server.py \n---------------------\nHEAD / HTTP/1.0\nHost: linuxfr.org\n\n\n\n---------------------\n\n\n\n\n\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\n$ python ssl_client.py \n{}\n['']\n$ \n\n\n\n\u4eca\u5f8c\n\u4eca\u5f8c\u306f\u3001SSL\u306e\u30d1\u30b1\u30c3\u30c8\u901a\u4fe1\u306e\u30ad\u30e3\u30d7\u30c1\u30e3\uff06\u30ea\u30d7\u30ec\u30a4\u3092\u5b9f\u9a13\u3057\u3001\nSSL\u3067\u52d5\u4f5c\u3057\u3066\u3044\u308b\u901a\u4fe1\u306e\u30b9\u30bf\u30d6\u4f5c\u6210\u306b\u6311\u6226\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u53c2\u8003\nhttps://docs.python.org/2/library/ssl.html\nhttp://qiita.com/marcy-terui/items/2f63d7f170ff82531245\n\n# \u306f\u3058\u3081\u306b\nSSL\u306e\u30bd\u30b1\u30c3\u30c8\u901a\u4fe1\u3092\u4f7f\u3063\u305f\u3053\u3068\u304c\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u5b9f\u969b\u306b\u52d5\u304b\u3057\u305f\u7d50\u679c\u3092\u3053\u3053\u306b\u307e\u3068\u3081\u3066\u304a\u304d\u307e\u3059\u3002\n\n# \u74b0\u5883\nOS X El Capitan\nPython 2.7.11\nOpenSSL 0.9.8zh 14 Jan 2016\n\n# \u6e96\u5099\n## \u8a3c\u660e\u66f8\u3068\u516c\u958b\u9375\u306e\u4f5c\u6210\n\n\u4ee5\u4e0b\u306e\u30da\u30fc\u30b8\u3092\u53c2\u8003\u306b\u3001\u8a3c\u660e\u66f8\u3068\u516c\u958b\u9375\u3092OpenSSL\u3067\u4f5c\u6210\u3057\u305f\u3002\nhttp://qiita.com/marcy-terui/items/2f63d7f170ff82531245\n\n```\n\u251c\u2500\u2500 keys\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 server.crt\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 server.csr  \u203b\u672a\u4f7f\u7528\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 server.key\n```\n\n# \u5b9f\u88c5\n\n\u4ee5\u4e0b\u306e\u30da\u30fc\u30b8\u3092\u53c2\u8003\u306b\u3001\u30b3\u30fc\u30c9\u3092\u4f5c\u6210\u3057\u305f\u3002\nhttps://docs.python.org/2/library/ssl.html\n17.3.5.2. \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30b5\u30a4\u30c9\u306e\u51e6\u7406\n17.3.5.3. \u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u306e\u51e6\u7406\n\n```lang:ssl_server.py\nimport socket, ssl\n\nURL = '127.0.0.1'\nPORT = 10023\n\ncontext = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\ncontext.load_cert_chain(certfile=\"keys/server.crt\", keyfile=\"keys/server.key\")\n\nbindsocket = socket.socket()\nbindsocket.bind((URL, 10023))\nbindsocket.listen(5)\n\ndef do_something(connstream, data):\n    print '---------------------'\n    print data + '\\n'\n    print '---------------------'\n    print\n\ndef deal_with_client(connstream):\n    data = connstream.read()\n    # null data means the client is finished with us\n    while data:\n        if not do_something(connstream, data):\n            # we'll assume do_something returns False\n            # when we're finished with client\n            break\n        data = connstream.read()\n    # finished with client\n\nwhile True:\n    newsocket, fromaddr = bindsocket.accept()\n    connstream = context.wrap_socket(newsocket, server_side=True)\n    try:\n        deal_with_client(connstream)\n    finally:\n        connstream.shutdown(socket.SHUT_RDWR)\n        connstream.close()\n```\n\n```lang:ssl_client.py\nimport ssl\nimport socket\nimport pprint\n\nURL = '127.0.0.1'\nPORT = 10023\n\ncontext = ssl.create_default_context()\ncontext = ssl.SSLContext(ssl.PROTOCOL_SSLv23)\ncontext.verify_mode = ssl.CERT_NONE \ncontext.check_hostname = False\nconn = context.wrap_socket(socket.socket(socket.AF_INET),\n           server_hostname=URL)\nconn.connect((URL, PORT))\ncert = conn.getpeercert()\npprint.pprint(cert)\nconn.sendall(b\"HEAD / HTTP/1.0\\r\\nHost: linuxfr.org\\r\\n\\r\\n\")\npprint.pprint(conn.recv(1024).split(b\"\\r\\n\"))\n```\n\n# \u7d50\u679c\n\n```lang:\u30b5\u30fc\u30d0\u5074\n$ python ssl_server.py \n---------------------\nHEAD / HTTP/1.0\nHost: linuxfr.org\n\n\n\n---------------------\n\n\n```\n\n```lang:\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\n$ python ssl_client.py \n{}\n['']\n$ \n```\n\n# \u4eca\u5f8c\n\n\u4eca\u5f8c\u306f\u3001SSL\u306e\u30d1\u30b1\u30c3\u30c8\u901a\u4fe1\u306e\u30ad\u30e3\u30d7\u30c1\u30e3\uff06\u30ea\u30d7\u30ec\u30a4\u3092\u5b9f\u9a13\u3057\u3001\nSSL\u3067\u52d5\u4f5c\u3057\u3066\u3044\u308b\u901a\u4fe1\u306e\u30b9\u30bf\u30d6\u4f5c\u6210\u306b\u6311\u6226\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u53c2\u8003\n\nhttps://docs.python.org/2/library/ssl.html\nhttp://qiita.com/marcy-terui/items/2f63d7f170ff82531245\n", "tags": ["SSL", "Python", "socket"]}