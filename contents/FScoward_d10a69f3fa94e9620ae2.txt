{"context": " More than 1 year has passed since last update.\n\n\u4eca\u65e5\u306f\u4e00\u65e5\u201c\u6b4c\u3046\u58f0\u512a\u201d\u4e09\u6627\u3000\u30c4\u30f4\u30a1\u30a4\uff01\nhttp://www9.nhk.or.jp/zanmai/program/141103.html#playlist_top\n\u3044\u3063\u3071\u3044\u30c4\u30a4\u30fc\u30c8\u304c\u624b\u306b\u5165\u308b\u3057\u3001BigQuery\u4f7f\u3063\u3066\u307f\u305f\u3044\u3057\nBigQuery\u306b\u653e\u308a\u8fbc\u3080\u7528\u306eCSV\u3092\u4f5c\u3063\u3066\u307f\u308b\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\nproject.clj\n(defproject tweet-bigdata-clj \"0.1.0-SNAPSHOT\"\n  :description \"FIXME: write description\"\n  :url \"http://example.com/FIXME\"\n  :license {:name \"Eclipse Public License\"\n            :url \"http://www.eclipse.org/legal/epl-v10.html\"}\n  :dependencies [[org.clojure/clojure \"1.6.0\"]\n                 [org.twitter4j/twitter4j-core \"4.0.2\"]\n                 [clojure-csv/clojure-csv \"2.0.1\"]]\n  :main tweet-bigdata-clj.core)\n\n\n\ncore.clj\n(ns tweet-bigdata-clj.core\n  (:import [twitter4j TwitterFactory Query QueryResult])\n  (:require [clojure-csv.core :as csv]\n            [clojure.java.io :as io]))\n\n(declare twitter get-tweets tweets-to-map to-csvfile to-csv make-csv get-all-tweets)\n\n(def twitter (.getInstance (TwitterFactory.)))\n\n(defn get-tweets [hash-tag]\n  \"tweet\u53d6\u5f97\"\n  (let [query (doto (Query.)\n                (.setQuery hash-tag)\n                (.setCount 100)\n                (.setSince \"2014-11-03\")\n                (.setUntil \"2014-11-04\"))]\n    (->> (.search twitter query))))\n\n(defn tweets-to-map [tweets]\n  \"tweets\u3092map\u5f62\u5f0f\u306b\u5909\u63db\u3059\u308b\"\n  (map #(zipmap [:screenName\n                 :name\n                 :text\n                 :createdAt]\n                [(.. % getUser getScreenName)\n                 (.. % getUser getName)\n                 (clojure.string/replace (.getText %) #\"\\n\" \" \")\n                 (.. % getCreatedAt toString)]) tweets))\n\n(defn to-csvfile [text]\n  \"csv\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\"\n  (with-open [out-file (io/writer \"out-file.csv\" :encoding \"utf-8\" :append true)]\n    (.write out-file (apply str text))))\n\n(defn to-csv [{text :text name :name screen-name :screenName created-at :createdAt}]\n  \"\u30ab\u30f3\u30de\u5206\u5272\"\n  (csv/write-csv [[screen-name text created-at]]))\n\n(defn make-csv [query]\n  (->> query\n       (.getTweets)\n       (tweets-to-map)\n       (map #(to-csv %))\n       (to-csvfile)))\n\n(defn get-all-tweets [#^QueryResult query]\n  (loop [q query]\n    (when (.hasNext q)\n      (Thread/sleep 5000)\n      (let [nq (doto (.nextQuery q)\n                 (.setCount 100))\n            nqr (.search twitter nq)]\n        (make-csv nqr)\n        (recur nqr)))))\n\n(defn get-first-page [query]\n  (let [q (.search twitter query)]\n    (dosync(alter result-list conj q))\n    q))\n\n(defn -main[]\n  (let [first-tweets (get-tweets \"#zanmai\")]\n    (make-csv first-tweets)\n    (get-all-tweets first-tweets)))\n\n\n#\u4eca\u65e5\u306f\u4e00\u65e5\u201c\u6b4c\u3046\u58f0\u512a\u201d\u4e09\u6627\u3000\u30c4\u30f4\u30a1\u30a4\uff01\n\nhttp://www9.nhk.or.jp/zanmai/program/141103.html#playlist_top\n\n\u3044\u3063\u3071\u3044\u30c4\u30a4\u30fc\u30c8\u304c\u624b\u306b\u5165\u308b\u3057\u3001BigQuery\u4f7f\u3063\u3066\u307f\u305f\u3044\u3057\n\nBigQuery\u306b\u653e\u308a\u8fbc\u3080\u7528\u306eCSV\u3092\u4f5c\u3063\u3066\u307f\u308b\u3002\n\n# \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n```clj:project.clj\n(defproject tweet-bigdata-clj \"0.1.0-SNAPSHOT\"\n  :description \"FIXME: write description\"\n  :url \"http://example.com/FIXME\"\n  :license {:name \"Eclipse Public License\"\n            :url \"http://www.eclipse.org/legal/epl-v10.html\"}\n  :dependencies [[org.clojure/clojure \"1.6.0\"]\n                 [org.twitter4j/twitter4j-core \"4.0.2\"]\n                 [clojure-csv/clojure-csv \"2.0.1\"]]\n  :main tweet-bigdata-clj.core)\n```\n\n```clj:core.clj\n(ns tweet-bigdata-clj.core\n  (:import [twitter4j TwitterFactory Query QueryResult])\n  (:require [clojure-csv.core :as csv]\n            [clojure.java.io :as io]))\n\n(declare twitter get-tweets tweets-to-map to-csvfile to-csv make-csv get-all-tweets)\n\n(def twitter (.getInstance (TwitterFactory.)))\n\n(defn get-tweets [hash-tag]\n  \"tweet\u53d6\u5f97\"\n  (let [query (doto (Query.)\n                (.setQuery hash-tag)\n                (.setCount 100)\n                (.setSince \"2014-11-03\")\n                (.setUntil \"2014-11-04\"))]\n    (->> (.search twitter query))))\n\n(defn tweets-to-map [tweets]\n  \"tweets\u3092map\u5f62\u5f0f\u306b\u5909\u63db\u3059\u308b\"\n  (map #(zipmap [:screenName\n                 :name\n                 :text\n                 :createdAt]\n                [(.. % getUser getScreenName)\n                 (.. % getUser getName)\n                 (clojure.string/replace (.getText %) #\"\\n\" \" \")\n                 (.. % getCreatedAt toString)]) tweets))\n\n(defn to-csvfile [text]\n  \"csv\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\"\n  (with-open [out-file (io/writer \"out-file.csv\" :encoding \"utf-8\" :append true)]\n    (.write out-file (apply str text))))\n\n(defn to-csv [{text :text name :name screen-name :screenName created-at :createdAt}]\n  \"\u30ab\u30f3\u30de\u5206\u5272\"\n  (csv/write-csv [[screen-name text created-at]]))\n\n(defn make-csv [query]\n  (->> query\n       (.getTweets)\n       (tweets-to-map)\n       (map #(to-csv %))\n       (to-csvfile)))\n\n(defn get-all-tweets [#^QueryResult query]\n  (loop [q query]\n    (when (.hasNext q)\n      (Thread/sleep 5000)\n      (let [nq (doto (.nextQuery q)\n                 (.setCount 100))\n            nqr (.search twitter nq)]\n        (make-csv nqr)\n        (recur nqr)))))\n\n(defn get-first-page [query]\n  (let [q (.search twitter query)]\n    (dosync(alter result-list conj q))\n    q))\n\n(defn -main[]\n  (let [first-tweets (get-tweets \"#zanmai\")]\n    (make-csv first-tweets)\n    (get-all-tweets first-tweets)))\n```\n", "tags": ["Clojure1.6.0"]}