{"context": " More than 1 year has passed since last update.\n\n\u30c6\u30fc\u30de\n\u7686\u3055\u3093\u3053\u3093\u306b\u3061\u308f\u3001\u4eca\u56de\u306fcl-opengl\u3067\u5165\u529b\u3092\u62fe\u3063\u3066\u7c21\u5358\u306a\u30b2\u30fc\u30e0(\u6240\u8b02\u30c6\u30cb\u30b9\u30b2\u30fc\u30e0\u3063\u3066\u3084\u3064)\u3092\u4f5c\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u3053\u306e\u8a18\u4e8b\u66f8\u304d\u306a\u304c\u3089\u4f5c\u3063\u3066\u3044\u305f\u306e\u3067\u77db\u76fe\u306e\u3042\u308b\u3053\u3068\u66f8\u3044\u3066\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u305d\u3053\u306f\u751f\u6696\u304b\u3044\u76ee\uff08 \u309c\u309c\uff09\u3067\u898b\u3066\u3084\u3063\u3066\u304f\u3060\u3055\u3044\u307e\u305b\u3002\n\n\u5165\u529b\u3092\u62fe\u3046\n\u65e9\u901f\u3067\u3059\u304c\u3001cl-opengl\u3067\u5165\u529b\u3092\u62fe\u3046\u305f\u3081\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u306b\u7d50\u679c\u3092\u4fdd\u5b58\u3057\u3066\u307e\u3059\u304c\u3001\u30c6\u30b9\u30c8\u306a\u3093\u3067\u8a31\u3057\u3066\u306d\u3002\n;;;; \u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u5165\u529b\u304c\u62fe\u3048\u307e\u3059\u3002\n;; keyboard\n;; Executed when key pressed.\n(defmethod glut:keyboard ((window main-window) key x y)\n    (case key\n        (#\\Esc (glut:destroy-current-window))\n        (#\\z (setq *key-z* t))\n        (#\\c (setq *key-c* t))\n    ))\n\n;; keyboard-up\n;; Executed when key released.\n(defmethod glut:keyboard-up ((window main-window) key x y )\n    (case key\n        (#\\z (setq *key-z* nil))\n        (#\\c (setq *key-c* nil))\n    ))\n\n\u30de\u30a6\u30b9\u306e\u5165\u529b\u3092\u62fe\u3046\u306b\u306f\u3053\u3046\u3002\n;; mouse\n(defmethod glut:mouse ((window main-window) button state x y)\n  (setf *mouse-left-down* (and (equal button :LEFT-BUTTON) (equal state :DOWN)))\n  (setf *mouse-right-down* (and (equal button :RIGHT-BUTTON) (equal state :DOWN))))\n\n;; detect mouse move\n(defmethod glut:passive-motion ((window main-window) x y)\n  (setq *mouse-x* x)\n  (setq *mouse-y* y))\n\n;; detect mouse drag\n(defmethod glut:motion ((window main-window) x y)\n  (setq *mouse-x* x)\n  (setq *mouse-y* y))\n\n\u4e0a\u8a18\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3067\u4eca\u56de\u4f5c\u308b\u3082\u306e\u306b\u306f\u5145\u5206\u306a\u5165\u529b\u304c\u62fe\u3048\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3067\u306f\u65e9\u901f\u4f7f\u3063\u3066\u898b\u307e\u3057\u3087\u3046\u3002\n\u63cf\u753b\u5468\u308a\u306b\u4f7f\u7528\u3059\u308b\u95a2\u6570\u7fa4\u306f\u524d\u56de\u306e\u8a18\u4e8b\u3067\n\u4f7f\u7528\u3057\u305fglib.lisp\u306b\u3044\u304f\u3089\u304b\u30b3\u30fc\u30c9\u3092\u8ffd\u52a0\u3057\u305f\u3082\u306e\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u30bd\u30fc\u30b9\u3092\u8f09\u305b\u3066\u304a\u304d\u307e\u3059\u3002\n\n\nglib.lisp\n\n;; Load librarlies\n(require 'asdf)\n(require 'cl-opengl)\n(require 'cl-glut)\n(require 'cl-glu)\n\n;; Parameters\n(defvar *width* 500)\n(defvar *height* 500)\n(defparameter *key-z* nil)\n(defparameter *key-c* nil)\n\n\n;; USER FUNCTIONS\n(defun user-display () ())\n(defun user-init () ())\n(defun user-idle () ())\n\n\n;; Derived window class\n(defclass main-window (glut:window) ()\n    (:default-initargs :title \"opengl test\" :mode '(:double :rgb :depth) :width *width* :height *height*))\n\n\n;; keyboard\n;; Executed when key pressed.\n(defmethod glut:keyboard ((window main-window) key x y)\n    ;(declare (ignore x y))\n    (case key\n        (#\\Esc (glut:destroy-current-window))\n        (#\\z (setq *key-z* t))\n        (#\\c (setq *key-c* t))\n    ))\n\n;; keyboard-up\n;; Executed when key released.\n(defmethod glut:keyboard-up ((window main-window) key x y )\n    (case key\n        (#\\z (setq *key-z* nil))\n        (#\\c (setq *key-c* nil))\n    ))\n\n;; glut:display\n;; Draw.\n(defmethod glut:display ((window main-window))\n    ;; Clear buffer\n    (gl:clear :color-buffer :depth-buffer)\n\n    ;; Draw shape\n    (gl:shade-model :flat)\n    (gl:normal 0 0 1)\n\n    ;; user display process\n    (user-display)\n\n    ;; Swap buffer\n    (glut:swap-buffers))\n\n;; glut:idle\n;; Application idle.\n(defmethod glut:idle ((window main-window))\n    ;; user idling process\n    (user-idle)\n    (glut:post-redisplay))\n\n;; glut:reshape\n(defmethod glut:reshape ((w main-window) width height)\n    (gl:viewport 0 0 width height)\n    (gl:load-identity)\n    (glu:ortho-2d 0.0 *width* *height* 0.0))\n\n;; glut-display\n;; Draw.\n(defmethod glut:display-window :before ((window main-window)) )\n\n;; main\n;; Main function (Program entry point).\n(defun main ()\n    ;; user initalization process\n    (user-init)\n    (glut:display-window (make-instance 'main-window)))\n\n;; Draw 2D line.\n(defun g2line (x y x2 y2)\n    (gl:with-primitives :lines\n        (gl:vertex x y 0.0)\n        (gl:vertex x2 y2 0.0)))\n\n\n;; Draw 2D line.\n(defun g2linec (x y x2 y2 r g b)\n    (gl:with-primitives :lines\n        (gl:color r g b)\n        (gl:vertex x y 0.0)\n        (gl:vertex x2 y2 0.0))\n        (gl:color 1.0 1.0 1.0))\n\n\n;; Draw filled rect\n(defun g2fillrectc (x y x2 y2 r g b)\n    (gl:with-primitives :polygon\n        (gl:color r g b)\n        (gl:vertex x y 0.0)\n        (gl:vertex x2 y 0.0)\n        (gl:vertex x2 y2 0.0)\n        (gl:vertex x y2 0.0)\n        (gl:color 1.0 1.0 1.0)))\n\n;; iota\n(defun iota (m &optional (n 0) (step 1))\n  (if (>= n m)\n    nil\n    (cons n (iota m (+ n step) step))))\n\n\n\ninput_test.lisp\n;; glib\u3092\u30ed\u30fc\u30c9\n(load \"glib.lisp\")\n\n#|\n | \u521d\u671f\u5316\u51e6\u7406\n |#\n(defun user-init ()\n  (defparameter *bar-x* (/ *width* 2.0))\n  (defparameter *bar-spd* 10.0)\n  (defparameter *bar-size* 80.0)\n  (defparameter *ball* (list (/ *width* 2.0) (/ *height* 2.0)))\n  (defparameter *ball-spd* (list 0.0 2.0))\n  (defparameter *bar-elev* 10.0)\n  (defparameter *bar-width* 5.0)\n  (defparameter *ball-max-spd* 10.0)\n  (defparameter *count-max* 50)\n  (defparameter *count* *count-max*))\n\n#|\n | \u30a6\u30a7\u30a4\u30c8\u51e6\u7406\n |#\n(defun user-idle ()\n  (sleep (/ 1.0 60.0)))\n\n#|\n | \u63cf\u753b\u51e6\u7406\n |#\n(defun user-display ()\n  ;; bar\u306e\u51e6\u7406\n  (updt-bar)\n  (draw-bar)\n\n  ;; ball\u306e\u51e6\u7406\n  (draw-ball)\n  (updt-ball))\n\n#|\n | bar\u306e\u63cf\u753b\n |#\n(defun draw-bar ()\n  (g2fillrectc (- *bar-x* (/ *bar-size* 2.0)) \n               (- *height* *bar-elev*) \n               (+ *bar-x* (/ *bar-size* 2.0)) \n               (+ (- *height* *bar-elev*) *bar-width*) 1.0 1.0 1.0))\n\n#|\n | bar\u306e\u66f4\u65b0\u51e6\u7406\u3068\u30ad\u30fc\u64cd\u4f5c\u306e\u53d7\u3051\u4ed8\u3051\n |#\n(defun updt-bar ()\n  (if *key-z* (setf *bar-x* (- *bar-x* *bar-spd*)) nil)\n  (if *key-c* (setf *bar-x* (+ *bar-x* *bar-spd*)) nil))\n\n#|\n | ball\u306e\u63cf\u753b\u51e6\u7406\n |#\n(defun draw-ball ()\n  (g2fillrectc (- (car *ball*) 2.0) (- (cadr *ball*) 2.0)\n               (+ (car *ball*) 2.0) (+ (cadr *ball*) 2.0)\n               1.0 1.0 1.0))\n\n#|\n | ball\u306e\u66f4\u65b0\u51e6\u7406\n |#\n(defun updt-ball ()\n  ;; ball\u3092\u79fb\u52d5\n  (setf (car *ball*) (+ (car *ball*) (car *ball-spd*)))\n  (setf (cadr *ball*) (+ (cadr *ball*) (cadr *ball-spd*)))\n\n  ;; ball\u3092\u52a0\u901f\n  (if (< (cadr *ball-spd*) 0.0)\n    (setf (cadr *ball-spd*) (+ (cadr *ball-spd*) -0.001))\n    (setf (cadr *ball-spd*) (+ (cadr *ball-spd*) 0.001)))\n\n  ;; bar\u3068\u306e\u885d\u7a81\u5224\u5b9a\n  (if (and (> (cadr *ball*) (- *height* *bar-width* *bar-elev*)) \n           (< (cadr *ball*) (- *height* *bar-elev*)))\n    (if (and (> (car *ball*) (- *bar-x* *bar-size*)) (< (car *ball*) (+ *bar-x* *bar-size*)))\n      (progn \n        (setf (cadr *ball-spd*) (* (cadr *ball-spd*) -1.0))\n        (setf (cadr *ball*) (- *height* *bar-width* *bar-elev* 1.0)))\n      nil)\n    nil)\n\n  ;; ball\u306e\u901f\u5ea6\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u5909\u66f4\u3059\u308b\n  (setf *count* (- *count* 1))\n  (if (< *count* 0) \n    (progn \n      (setf (car *ball-spd*) (* (- (random 1.0) 0.5) *ball-max-spd*))\n      (setf *count* *count-max*))\n    nil)\n\n  ;; ball\u3092\u753b\u9762\u5185\u306b\u3068\u3069\u3081\u308b\n  (if (< *width* (car *ball*))\n    (progn\n      (setf (car *ball*) (- *width* 1.0))\n      (setf (car *ball-spd*) (* (car *ball-spd*) -1.0)))\n    nil)\n  (if (> 0.0 (car *ball*))\n    (progn\n      (setf (car *ball*) (+ 0.0 1.0))\n      (setf (car *ball-spd*) (* (car *ball-spd*) -1.0)))\n    nil)\n  (if (> 0.0 (cadr *ball*))\n    (progn\n      (setf (cadr *ball*) (+ 0.0 1.0))\n      (setf (cadr *ball-spd*) (* (cadr *ball-spd*) -1.0)))\n    nil))\n\n\n\n\n\u5b9f\u884c\u7d50\u679c\n\n\u306f\u3044\u3001\u9b3c\u755c\u30b2\u30fc\u304c\u8a95\u751f\u3057\u307e\u3057\u305f\u3002\n\u7d30\u304b\u3044\u3068\u3053\u308d\u306f\u4f5c\u308a\u3053\u3093\u3067\u306f\u3044\u306a\u3044\u306e\u3067\u305d\u3053\u306f\u76ee\u3092\u3064\u3076\u3063\u3066\u306d\u3002\nZ\u3068C\u3067\u30d0\u30fc\u3092\u52d5\u304b\u3057\u307e\u3059\u3002\n\u30dc\u30fc\u30eb\u306f\u30e9\u30f3\u30c0\u30e0\u306b\u901f\u5ea6\u3092\u5909\u3048\u3001\u5f90\u3005\u306b\u65e9\u304f\u306a\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\u3061\u306a\u307f\u306buser-idle\u3067\u901f\u5ea6\u3092\u8abf\u6574\u3057\u3066\u3044\u307e\u3059\u300160fps\u3092\u7dad\u6301\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u3067\u3059\u304c\u3084\u308a\u65b9\u3092\u3057\u308a\u307e\u305b\u3093\u3002\u8ab0\u304b\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u3002m(_ _)m\n\u4eca\u56de\u306f\u3053\u3053\u307e\u3067\u3002\n\u6700\u5f8c\u307e\u3067\u8aad\u3093\u3067\u304f\u3060\u3055\u3063\u305f\u65b9\u3005\u3001\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n\u8ffd\u8a18\uff11\n\u307e\u305f\u74b0\u5883\u3092\u66f8\u304d\u5fd8\u308c\u307e\u3057\u305f\u3002\nOS\uff1aWindows 7 64bit\n\u51e6\u7406\u7cfb:SBCL 1.2.15 x86\n\n#\u30c6\u30fc\u30de\n\n\u7686\u3055\u3093\u3053\u3093\u306b\u3061\u308f\u3001\u4eca\u56de\u306fcl-opengl\u3067\u5165\u529b\u3092\u62fe\u3063\u3066\u7c21\u5358\u306a\u30b2\u30fc\u30e0(\u6240\u8b02\u30c6\u30cb\u30b9\u30b2\u30fc\u30e0\u3063\u3066\u3084\u3064)\u3092\u4f5c\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u3053\u306e\u8a18\u4e8b\u66f8\u304d\u306a\u304c\u3089\u4f5c\u3063\u3066\u3044\u305f\u306e\u3067\u77db\u76fe\u306e\u3042\u308b\u3053\u3068\u66f8\u3044\u3066\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u305d\u3053\u306f\u751f\u6696\u304b\u3044\u76ee\uff08 \u309c\u309c\uff09\u3067\u898b\u3066\u3084\u3063\u3066\u304f\u3060\u3055\u3044\u307e\u305b\u3002\n\n#\u5165\u529b\u3092\u62fe\u3046\n\n\u65e9\u901f\u3067\u3059\u304c\u3001cl-opengl\u3067\u5165\u529b\u3092\u62fe\u3046\u305f\u3081\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u306b\u7d50\u679c\u3092\u4fdd\u5b58\u3057\u3066\u307e\u3059\u304c\u3001\u30c6\u30b9\u30c8\u306a\u3093\u3067\u8a31\u3057\u3066\u306d\u3002\n\n```cl\n;;;; \u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u5165\u529b\u304c\u62fe\u3048\u307e\u3059\u3002\n;; keyboard\n;; Executed when key pressed.\n(defmethod glut:keyboard ((window main-window) key x y)\n\t(case key\n\t\t(#\\Esc (glut:destroy-current-window))\n\t\t(#\\z (setq *key-z* t))\n\t\t(#\\c (setq *key-c* t))\n\t))\n\n;; keyboard-up\n;; Executed when key released.\n(defmethod glut:keyboard-up ((window main-window) key x y )\n\t(case key\n\t\t(#\\z (setq *key-z* nil))\n\t\t(#\\c (setq *key-c* nil))\n\t))\n```\n\n\u30de\u30a6\u30b9\u306e\u5165\u529b\u3092\u62fe\u3046\u306b\u306f\u3053\u3046\u3002\n\n```cl\n;; mouse\n(defmethod glut:mouse ((window main-window) button state x y)\n  (setf *mouse-left-down* (and (equal button :LEFT-BUTTON) (equal state :DOWN)))\n  (setf *mouse-right-down* (and (equal button :RIGHT-BUTTON) (equal state :DOWN))))\n\n;; detect mouse move\n(defmethod glut:passive-motion ((window main-window) x y)\n  (setq *mouse-x* x)\n  (setq *mouse-y* y))\n\n;; detect mouse drag\n(defmethod glut:motion ((window main-window) x y)\n  (setq *mouse-x* x)\n  (setq *mouse-y* y))\n```\n\n\u4e0a\u8a18\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3067\u4eca\u56de\u4f5c\u308b\u3082\u306e\u306b\u306f\u5145\u5206\u306a\u5165\u529b\u304c\u62fe\u3048\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3067\u306f\u65e9\u901f\u4f7f\u3063\u3066\u898b\u307e\u3057\u3087\u3046\u3002\n\n\u63cf\u753b\u5468\u308a\u306b\u4f7f\u7528\u3059\u308b\u95a2\u6570\u7fa4\u306f\u524d\u56de\u306e\u8a18\u4e8b\u3067\n\u4f7f\u7528\u3057\u305fglib.lisp\u306b\u3044\u304f\u3089\u304b\u30b3\u30fc\u30c9\u3092\u8ffd\u52a0\u3057\u305f\u3082\u306e\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n\u30bd\u30fc\u30b9\u3092\u8f09\u305b\u3066\u304a\u304d\u307e\u3059\u3002\n\n***\n\n```cl:glib.lisp\n\n;; Load librarlies\n(require 'asdf)\n(require 'cl-opengl)\n(require 'cl-glut)\n(require 'cl-glu)\n\n;; Parameters\n(defvar *width* 500)\n(defvar *height* 500)\n(defparameter *key-z* nil)\n(defparameter *key-c* nil)\n\n\n;; USER FUNCTIONS\n(defun user-display () ())\n(defun user-init () ())\n(defun user-idle () ())\n\n\n;; Derived window class\n(defclass main-window (glut:window) ()\n\t(:default-initargs :title \"opengl test\" :mode '(:double :rgb :depth) :width *width* :height *height*))\n\n\n;; keyboard\n;; Executed when key pressed.\n(defmethod glut:keyboard ((window main-window) key x y)\n\t;(declare (ignore x y))\n\t(case key\n\t\t(#\\Esc (glut:destroy-current-window))\n\t\t(#\\z (setq *key-z* t))\n\t\t(#\\c (setq *key-c* t))\n\t))\n\n;; keyboard-up\n;; Executed when key released.\n(defmethod glut:keyboard-up ((window main-window) key x y )\n\t(case key\n\t\t(#\\z (setq *key-z* nil))\n\t\t(#\\c (setq *key-c* nil))\n\t))\n\n;; glut:display\n;; Draw.\n(defmethod glut:display ((window main-window))\n\t;; Clear buffer\n\t(gl:clear :color-buffer :depth-buffer)\n\t\n\t;; Draw shape\n\t(gl:shade-model :flat)\n\t(gl:normal 0 0 1)\n\n\t;; user display process\n\t(user-display)\n\n\t;; Swap buffer\n\t(glut:swap-buffers))\n\n;; glut:idle\n;; Application idle.\n(defmethod glut:idle ((window main-window))\n\t;; user idling process\n\t(user-idle)\n\t(glut:post-redisplay))\n\n;; glut:reshape\n(defmethod glut:reshape ((w main-window) width height)\n\t(gl:viewport 0 0 width height)\n\t(gl:load-identity)\n\t(glu:ortho-2d 0.0 *width* *height* 0.0))\n\n;; glut-display\n;; Draw.\n(defmethod glut:display-window :before ((window main-window)) )\n\n;; main\n;; Main function (Program entry point).\n(defun main ()\n\t;; user initalization process\n\t(user-init)\n\t(glut:display-window (make-instance 'main-window)))\n\n;; Draw 2D line.\n(defun g2line (x y x2 y2)\n    (gl:with-primitives :lines\n        (gl:vertex x y 0.0)\n        (gl:vertex x2 y2 0.0)))\n\n\n;; Draw 2D line.\n(defun g2linec (x y x2 y2 r g b)\n\t(gl:with-primitives :lines\n        (gl:color r g b)\n\t\t(gl:vertex x y 0.0)\n\t\t(gl:vertex x2 y2 0.0))\n        (gl:color 1.0 1.0 1.0))\n\n\n;; Draw filled rect\n(defun g2fillrectc (x y x2 y2 r g b)\n\t(gl:with-primitives :polygon\n        (gl:color r g b)\n\t\t(gl:vertex x y 0.0)\n\t\t(gl:vertex x2 y 0.0)\n\t\t(gl:vertex x2 y2 0.0)\n\t\t(gl:vertex x y2 0.0)\n        (gl:color 1.0 1.0 1.0)))\n\n;; iota\n(defun iota (m &optional (n 0) (step 1))\n  (if (>= n m)\n    nil\n    (cons n (iota m (+ n step) step))))\n```\n\n```cl:input_test.lisp\n;; glib\u3092\u30ed\u30fc\u30c9\n(load \"glib.lisp\")\n\n#|\n | \u521d\u671f\u5316\u51e6\u7406\n |#\n(defun user-init ()\n  (defparameter *bar-x* (/ *width* 2.0))\n  (defparameter *bar-spd* 10.0)\n  (defparameter *bar-size* 80.0)\n  (defparameter *ball* (list (/ *width* 2.0) (/ *height* 2.0)))\n  (defparameter *ball-spd* (list 0.0 2.0))\n  (defparameter *bar-elev* 10.0)\n  (defparameter *bar-width* 5.0)\n  (defparameter *ball-max-spd* 10.0)\n  (defparameter *count-max* 50)\n  (defparameter *count* *count-max*))\n\n#|\n | \u30a6\u30a7\u30a4\u30c8\u51e6\u7406\n |#\n(defun user-idle ()\n  (sleep (/ 1.0 60.0)))\n\n#|\n | \u63cf\u753b\u51e6\u7406\n |#\n(defun user-display ()\n  ;; bar\u306e\u51e6\u7406\n  (updt-bar)\n  (draw-bar)\n\n  ;; ball\u306e\u51e6\u7406\n  (draw-ball)\n  (updt-ball))\n\n#|\n | bar\u306e\u63cf\u753b\n |#\n(defun draw-bar ()\n  (g2fillrectc (- *bar-x* (/ *bar-size* 2.0)) \n\t\t\t   (- *height* *bar-elev*) \n\t\t\t   (+ *bar-x* (/ *bar-size* 2.0)) \n\t\t\t   (+ (- *height* *bar-elev*) *bar-width*) 1.0 1.0 1.0))\n\n#|\n | bar\u306e\u66f4\u65b0\u51e6\u7406\u3068\u30ad\u30fc\u64cd\u4f5c\u306e\u53d7\u3051\u4ed8\u3051\n |#\n(defun updt-bar ()\n  (if *key-z* (setf *bar-x* (- *bar-x* *bar-spd*)) nil)\n  (if *key-c* (setf *bar-x* (+ *bar-x* *bar-spd*)) nil))\n\n#|\n | ball\u306e\u63cf\u753b\u51e6\u7406\n |#\n(defun draw-ball ()\n  (g2fillrectc (- (car *ball*) 2.0) (- (cadr *ball*) 2.0)\n\t\t\t   (+ (car *ball*) 2.0) (+ (cadr *ball*) 2.0)\n\t\t\t   1.0 1.0 1.0))\n\n#|\n | ball\u306e\u66f4\u65b0\u51e6\u7406\n |#\n(defun updt-ball ()\n  ;; ball\u3092\u79fb\u52d5\n  (setf (car *ball*) (+ (car *ball*) (car *ball-spd*)))\n  (setf (cadr *ball*) (+ (cadr *ball*) (cadr *ball-spd*)))\n\n  ;; ball\u3092\u52a0\u901f\n  (if (< (cadr *ball-spd*) 0.0)\n\t(setf (cadr *ball-spd*) (+ (cadr *ball-spd*) -0.001))\n\t(setf (cadr *ball-spd*) (+ (cadr *ball-spd*) 0.001)))\n\n  ;; bar\u3068\u306e\u885d\u7a81\u5224\u5b9a\n  (if (and (> (cadr *ball*) (- *height* *bar-width* *bar-elev*)) \n\t\t   (< (cadr *ball*) (- *height* *bar-elev*)))\n\t(if (and (> (car *ball*) (- *bar-x* *bar-size*)) (< (car *ball*) (+ *bar-x* *bar-size*)))\n\t  (progn \n\t\t(setf (cadr *ball-spd*) (* (cadr *ball-spd*) -1.0))\n\t\t(setf (cadr *ball*) (- *height* *bar-width* *bar-elev* 1.0)))\n\t  nil)\n\tnil)\n\n  ;; ball\u306e\u901f\u5ea6\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u5909\u66f4\u3059\u308b\n  (setf *count* (- *count* 1))\n  (if (< *count* 0) \n\t(progn \n\t  (setf (car *ball-spd*) (* (- (random 1.0) 0.5) *ball-max-spd*))\n\t  (setf *count* *count-max*))\n\tnil)\n\n  ;; ball\u3092\u753b\u9762\u5185\u306b\u3068\u3069\u3081\u308b\n  (if (< *width* (car *ball*))\n\t(progn\n\t  (setf (car *ball*) (- *width* 1.0))\n\t  (setf (car *ball-spd*) (* (car *ball-spd*) -1.0)))\n\tnil)\n  (if (> 0.0 (car *ball*))\n\t(progn\n\t  (setf (car *ball*) (+ 0.0 1.0))\n\t  (setf (car *ball-spd*) (* (car *ball-spd*) -1.0)))\n\tnil)\n  (if (> 0.0 (cadr *ball*))\n\t(progn\n\t  (setf (cadr *ball*) (+ 0.0 1.0))\n\t  (setf (cadr *ball-spd*) (* (cadr *ball-spd*) -1.0)))\n\tnil))\n```\n***\n\n#\u5b9f\u884c\u7d50\u679c\n\n![\u30af\u30ea\u30c3\u30d7\u30dc\u30fc\u30c901.png](https://qiita-image-store.s3.amazonaws.com/0/74246/cfc04973-a294-44d0-c820-c1b8ef1f41a1.png)\n\n\n\u306f\u3044\u3001\u9b3c\u755c\u30b2\u30fc\u304c\u8a95\u751f\u3057\u307e\u3057\u305f\u3002\n\u7d30\u304b\u3044\u3068\u3053\u308d\u306f\u4f5c\u308a\u3053\u3093\u3067\u306f\u3044\u306a\u3044\u306e\u3067\u305d\u3053\u306f\u76ee\u3092\u3064\u3076\u3063\u3066\u306d\u3002\n\nZ\u3068C\u3067\u30d0\u30fc\u3092\u52d5\u304b\u3057\u307e\u3059\u3002\n\u30dc\u30fc\u30eb\u306f\u30e9\u30f3\u30c0\u30e0\u306b\u901f\u5ea6\u3092\u5909\u3048\u3001\u5f90\u3005\u306b\u65e9\u304f\u306a\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u3061\u306a\u307f\u306b`user-idle`\u3067\u901f\u5ea6\u3092\u8abf\u6574\u3057\u3066\u3044\u307e\u3059\u300160fps\u3092\u7dad\u6301\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u3067\u3059\u304c\u3084\u308a\u65b9\u3092\u3057\u308a\u307e\u305b\u3093\u3002\u8ab0\u304b\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u3002m(_ _)m\n\n\n\u4eca\u56de\u306f\u3053\u3053\u307e\u3067\u3002\n\u6700\u5f8c\u307e\u3067\u8aad\u3093\u3067\u304f\u3060\u3055\u3063\u305f\u65b9\u3005\u3001\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n\n\u8ffd\u8a18\uff11\n\u307e\u305f\u74b0\u5883\u3092\u66f8\u304d\u5fd8\u308c\u307e\u3057\u305f\u3002\nOS\uff1aWindows 7 64bit\n\u51e6\u7406\u7cfb:SBCL 1.2.15 x86\n\n\n\n\n", "tags": ["CommonLisp", "lisp", "OpenGL"]}