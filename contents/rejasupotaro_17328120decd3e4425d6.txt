{"context": " More than 1 year has passed since last update.\n\n\u6295\u7a3f\u306e\u7de8\u96c6\n\"Rust Json\" \u3067\u691c\u7d22\u3059\u308b\u3068rust-lang/rust\u306e serialize::json \u3068 rust-lang/rust-serialize\u306e rustc-serialize::json \u306e2\u3064\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\u3069\u3061\u3089\u3092\u4f7f\u3048\u3070\u3044\u3044\u306e\u304b\u3068\u601d\u3044\u8abf\u3079\u3066\u3044\u305f\u30892015\u5e74\u306e1\u6708\u306b Confused between serialize and rustc-serialize \u3068\u3044\u3046issue\u304c\u7acb\u3066\u3089\u308c\u3066\u3044\u3066\u3001\u4eca\u306frustc-serialize\u3092\u4f7f\u3046\u306e\u304c\u826f\u3044\u307f\u305f\u3044\u3067\u3059\u3002\nserialize\u304crustc-serialize\u3088\u308a\u4e0a\u306b\u8868\u793a\u3055\u308c\u308b\u306e\u7f60\u3067\u3059\u306d\u2026\u3002\n\u203b\u8ffd\u8a18: rustc-serialize\u306f\u3044\u305a\u308cserde\u306b\u7f6e\u304d\u63db\u3048\u305f\u3044\u3068\u3044\u3046\u8a71\u304c\u3042\u308a\u307e\u3059\u3002\u8a73\u7d30\u306f\u30b3\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nrust-serialize::json \u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\n\u307e\u305adependency\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\nCargo.toml\n[dependencies]\nrustc-serialize = \"*\"\n\n\nrustc_serialize::json::encode \u3067JSON\u306b\u30a8\u30f3\u30b3\u30fc\u30c9\u3067\u304d\u307e\u3059\u3002\nextern crate rustc_serialize;\n\nuse std::collections::HashMap;\nuse rustc_serialize::json\n\nfn main() {\n    let numeric = 3.14;\n    println!(\"{}\", json::encode(&numeric).unwrap());\n    // => 3.14\n\n    let str = \"Hello world\";\n    println!(\"{}\", json::encode(&str).unwrap());\n    // => \"Hello world\"\n\n    let opt = Some(3.14);\n    println!(\"{}\", json::encode(&opt).unwrap());\n    // => 3.14\n    let opt: Option<f64> = None;\n    println!(\"{}\", json::encode(&opt).unwrap());\n    // => null\n\n    let vec = vec!(1939, 1945);\n    println!(\"{}\", json::encode(&vec).unwrap());\n    // => [1939, 1945]\n\n    let mut map = HashMap::new();\n    map.insert(\"pi\", 3.14);\n    map.insert(\"e\", 2.71);\n    println!(\"{}\", json::encode(&map).unwrap());\n    // => {\"pi\":3.14,\"e\":2.71}\n}\n\njson::decode \u3067\u305d\u306e\u9006\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nstruct\u3068JSON\u306e\u76f8\u4e92\u5909\u63db\u3092\u884c\u3046\n\u3053\u306e\u3088\u3046\u306astruct\u304c\u3042\u3063\u305f\u3068\u3057\u307e\u3059\u3002\npub struct Person {\n    first_name: String,\n    last_name: String,\n    age: u8,\n    address: HashMap<String, String>,\n    phone_numbers: Vec<String>\n}\n\n\u3053\u306estruct\u3092\u4ee5\u4e0b\u306eJSON\u3068\u76f8\u4e92\u5909\u63db\u3092\u884c\u3044\u307e\u3059\u3002\n{\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\",\n    \"age\": 43,\n    \"address\": {\n        \"city\": \"London\",\n        \"country\": \"Great Britain\"\n    },\n    \"phone_number\": [\n        \"+44 1234567\",\n        \"+44 2345678\"\n    ]\n}\n\n\nstruct\u3092String\u306b\u5909\u63db\u3059\u308b\nstruct\u306b RustcDecodable \u3068 RustcEncodable \u306ederive\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n#[derive(Debug, RustcDecodable, RustcEncodable)]\nstruct Person {\n    ...\n}\n\nstruct\u3092String\u306b\u5909\u63db\u3059\u308b\u306b\u306f json::encode \u3092\u547c\u3073\u307e\u3059\u3002\nfn main() {\n    let person = Person {\n        first_name: \"John\".to_string(),\n        last_name: \"Doe\".to_string(),\n        age: 43,\n        address: map![\n            \"city\" => \"London\",\n            \"country\" => \"Great Britain\"],\n        phone_numbers: vec![\n            \"+44 1234567\".to_string(),\n            \"+44 2345678\".to_string()],\n    };\n\n    let encoded = json::encode(&person).unwrap();\n    println!(\"{}\", encoded);\n}\n\n\u3053\u308c\u3092\u51fa\u529b\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n{\"age\":1,\"first_name\":\"John\",\"last_name\":\"Doe\",\"address\":{\"city\":\"London\",\"country\":\"Greet Britain\"},\"phone_numbers\":[\"+44 1234567\",\"+44 2345678\"]}\n\njson::decode \u3067struct\u306b\u623b\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nlet decoded: Person = json::decode(&encoded).unwrap();\n\n\nString\u3092Json\u306b\u5909\u63db\u3059\u308b\nJson::from_str \u3067String\u304b\u3089Json\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nlet json = Json::from_str(\"{\\\"age\\\":1,\\\"first_name\\\":\\\"John\\\",\\\"last_name\\\":\\\"Doe\\\",\\\"address\\\":{\\\"city\\\":\\\"London\\\",\\\"country\\\":\\\"Greet Britain\\\"},\\\"phone_numbers\\\":[\\\"+44 1234567\\\",\\\"+44 2345678\\\"]}\").unwrap();\n\nprintln!(\"first name: {}\", json.find(\"first_name\").unwrap());\n// => first name: \"John\"\n\nprintln!(\"last name: {}\", json.find(\"last_name\").unwrap());\n// => last name: \"Doe\"\n\nprintln!(\"age: {}\", json.find(\"age\").unwrap());\n// => 43\n\n\n\u30cd\u30b9\u30c8\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\nRustcEncodable/RustcDecodable\u304cderive\u3055\u308c\u305fstruct\u3084\u3001Vec\u3084HashHap\u306a\u3069\u306fToJson\u30c8\u30ec\u30a4\u30c8\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u306a\u306e\u3067\u3001\u81ea\u5206\u3067\u5b9a\u7fa9\u3057\u305fstruct\u3092\u5165\u308c\u5b50\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n#[derive(Debug, RustcDecodable, RustcEncodable)]\nstruct Person {\n    first_name: String,\n    last_name: String,\n    age: u8,\n    phone_numbers: Vec<String>,\n    address: HashMap<String, String>,\n    image: Image,\n}\n\n#[derive(Debug, RustcDecodable, RustcEncodable)]\nstruct Image {\n    url: String,\n}\n\njson::encode(&person).unwrap();\n// => {\"first_name\":\"John\",\"last_name\":\"Doe\",\"age\":43,\"phone_numbers\":[\"+44 1234567\",\"+44 2345678\"],\"image\":{\"url\":\"url\"}}\n\njson::decode(&person_str).unwrap();\n// => Person { first_name: \"John\", last_name: \"Doe\", age: 43, phone_numbers: [\"+44 1234567\", \"+44 2345678\"], image: Image { url: \"url\" } }\n\nstruct\u3092Vec\u3084HashMap\u306b\u5165\u308c\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\nprintln!(\"{}\", vec!(person).to_json());\n// => [{\"address\":{\"city\":\"London\",\"country\":\"Greet Britain\"},\"age\":43,\"first_name\":\"John\",\"last_name\":\"Doe\",\"phone_numbers\":[\"+44 1234567\",\"+44 2345678\"]}]\n\nlet mut map = HashMap::new();\nmap.insert(\"person\".to_string(), person);\nprintln!(\"{}\", map.to_json());\n// => {\"person\":{\"address\":{\"city\":\"London\",\"country\":\"Greet Britain\"},\"age\":43,\"first_name\":\"John\",\"last_name\":\"Doe\",\"phone_numbers\":[\"+44 1234567\",\"+44 2345678\"]}}\n\n\n\u307e\u3068\u3081\n\n# \u6295\u7a3f\u306e\u7de8\u96c6\n\n\"Rust Json\" \u3067\u691c\u7d22\u3059\u308b\u3068rust-lang/rust\u306e [serialize::json](https://github.com/rust-lang/rust/blob/master/src/libserialize/json.rs) \u3068 rust-lang/rust-serialize\u306e [rustc-serialize::json](https://github.com/rust-lang/rustc-serialize) \u306e2\u3064\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\u3069\u3061\u3089\u3092\u4f7f\u3048\u3070\u3044\u3044\u306e\u304b\u3068\u601d\u3044\u8abf\u3079\u3066\u3044\u305f\u30892015\u5e74\u306e1\u6708\u306b [Confused between serialize and rustc-serialize](https://github.com/rust-lang/rustc-serialize/issues/38) \u3068\u3044\u3046issue\u304c\u7acb\u3066\u3089\u308c\u3066\u3044\u3066\u3001\u4eca\u306frustc-serialize\u3092\u4f7f\u3046\u306e\u304c\u826f\u3044\u307f\u305f\u3044\u3067\u3059\u3002\nserialize\u304crustc-serialize\u3088\u308a\u4e0a\u306b\u8868\u793a\u3055\u308c\u308b\u306e\u7f60\u3067\u3059\u306d\u2026\u3002\n\n\u203b\u8ffd\u8a18: rustc-serialize\u306f\u3044\u305a\u308cserde\u306b\u7f6e\u304d\u63db\u3048\u305f\u3044\u3068\u3044\u3046\u8a71\u304c\u3042\u308a\u307e\u3059\u3002\u8a73\u7d30\u306f\u30b3\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n# rust-serialize::json \u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\n\n\u307e\u305adependency\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n```Cargo.toml\n[dependencies]\nrustc-serialize = \"*\"\n```\n\n`rustc_serialize::json::encode` \u3067JSON\u306b\u30a8\u30f3\u30b3\u30fc\u30c9\u3067\u304d\u307e\u3059\u3002\n\n```rust\nextern crate rustc_serialize;\n\nuse std::collections::HashMap;\nuse rustc_serialize::json\n\nfn main() {\n    let numeric = 3.14;\n    println!(\"{}\", json::encode(&numeric).unwrap());\n    // => 3.14\n    \n    let str = \"Hello world\";\n    println!(\"{}\", json::encode(&str).unwrap());\n    // => \"Hello world\"\n\n    let opt = Some(3.14);\n    println!(\"{}\", json::encode(&opt).unwrap());\n    // => 3.14\n    let opt: Option<f64> = None;\n    println!(\"{}\", json::encode(&opt).unwrap());\n    // => null\n\n    let vec = vec!(1939, 1945);\n    println!(\"{}\", json::encode(&vec).unwrap());\n    // => [1939, 1945]\n\n    let mut map = HashMap::new();\n    map.insert(\"pi\", 3.14);\n    map.insert(\"e\", 2.71);\n    println!(\"{}\", json::encode(&map).unwrap());\n    // => {\"pi\":3.14,\"e\":2.71}\n}\n```\n\n`json::decode` \u3067\u305d\u306e\u9006\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n# struct\u3068JSON\u306e\u76f8\u4e92\u5909\u63db\u3092\u884c\u3046\n\n\u3053\u306e\u3088\u3046\u306astruct\u304c\u3042\u3063\u305f\u3068\u3057\u307e\u3059\u3002\n\n```rust\npub struct Person {\n    first_name: String,\n    last_name: String,\n    age: u8,\n    address: HashMap<String, String>,\n    phone_numbers: Vec<String>\n}\n```\n\n\u3053\u306estruct\u3092\u4ee5\u4e0b\u306eJSON\u3068\u76f8\u4e92\u5909\u63db\u3092\u884c\u3044\u307e\u3059\u3002\n\n```json\n{\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\",\n    \"age\": 43,\n    \"address\": {\n        \"city\": \"London\",\n        \"country\": \"Great Britain\"\n    },\n    \"phone_number\": [\n        \"+44 1234567\",\n        \"+44 2345678\"\n    ]\n}\n```\n\n## struct\u3092String\u306b\u5909\u63db\u3059\u308b\n\nstruct\u306b `RustcDecodable` \u3068 `RustcEncodable` \u306ederive\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n```rust\n#[derive(Debug, RustcDecodable, RustcEncodable)]\nstruct Person {\n    ...\n}\n```\n\nstruct\u3092String\u306b\u5909\u63db\u3059\u308b\u306b\u306f `json::encode` \u3092\u547c\u3073\u307e\u3059\u3002\n\n```rust\nfn main() {\n    let person = Person {\n        first_name: \"John\".to_string(),\n        last_name: \"Doe\".to_string(),\n        age: 43,\n        address: map![\n            \"city\" => \"London\",\n            \"country\" => \"Great Britain\"],\n        phone_numbers: vec![\n            \"+44 1234567\".to_string(),\n            \"+44 2345678\".to_string()],\n    };\n\n    let encoded = json::encode(&person).unwrap();\n    println!(\"{}\", encoded);\n}\n```\n\n\u3053\u308c\u3092\u51fa\u529b\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```json\n{\"age\":1,\"first_name\":\"John\",\"last_name\":\"Doe\",\"address\":{\"city\":\"London\",\"country\":\"Greet Britain\"},\"phone_numbers\":[\"+44 1234567\",\"+44 2345678\"]}\n```\n\n`json::decode` \u3067struct\u306b\u623b\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```rust\nlet decoded: Person = json::decode(&encoded).unwrap();\n```\n\n## String\u3092Json\u306b\u5909\u63db\u3059\u308b\n\n`Json::from_str` \u3067String\u304b\u3089Json\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```rust\nlet json = Json::from_str(\"{\\\"age\\\":1,\\\"first_name\\\":\\\"John\\\",\\\"last_name\\\":\\\"Doe\\\",\\\"address\\\":{\\\"city\\\":\\\"London\\\",\\\"country\\\":\\\"Greet Britain\\\"},\\\"phone_numbers\\\":[\\\"+44 1234567\\\",\\\"+44 2345678\\\"]}\").unwrap();\n\nprintln!(\"first name: {}\", json.find(\"first_name\").unwrap());\n// => first name: \"John\"\n\nprintln!(\"last name: {}\", json.find(\"last_name\").unwrap());\n// => last name: \"Doe\"\n\nprintln!(\"age: {}\", json.find(\"age\").unwrap());\n// => 43\n```\n\n\n## \u30cd\u30b9\u30c8\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\nRustcEncodable/RustcDecodable\u304cderive\u3055\u308c\u305fstruct\u3084\u3001Vec\u3084HashHap\u306a\u3069\u306fToJson\u30c8\u30ec\u30a4\u30c8\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u306a\u306e\u3067\u3001\u81ea\u5206\u3067\u5b9a\u7fa9\u3057\u305fstruct\u3092\u5165\u308c\u5b50\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```rust\n#[derive(Debug, RustcDecodable, RustcEncodable)]\nstruct Person {\n    first_name: String,\n    last_name: String,\n    age: u8,\n    phone_numbers: Vec<String>,\n    address: HashMap<String, String>,\n    image: Image,\n}\n\n#[derive(Debug, RustcDecodable, RustcEncodable)]\nstruct Image {\n    url: String,\n}\n```\n\n```rust\njson::encode(&person).unwrap();\n// => {\"first_name\":\"John\",\"last_name\":\"Doe\",\"age\":43,\"phone_numbers\":[\"+44 1234567\",\"+44 2345678\"],\"image\":{\"url\":\"url\"}}\n\njson::decode(&person_str).unwrap();\n// => Person { first_name: \"John\", last_name: \"Doe\", age: 43, phone_numbers: [\"+44 1234567\", \"+44 2345678\"], image: Image { url: \"url\" } }\n```\n\nstruct\u3092Vec\u3084HashMap\u306b\u5165\u308c\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n```rust\nprintln!(\"{}\", vec!(person).to_json());\n// => [{\"address\":{\"city\":\"London\",\"country\":\"Greet Britain\"},\"age\":43,\"first_name\":\"John\",\"last_name\":\"Doe\",\"phone_numbers\":[\"+44 1234567\",\"+44 2345678\"]}]\n\nlet mut map = HashMap::new();\nmap.insert(\"person\".to_string(), person);\nprintln!(\"{}\", map.to_json());\n// => {\"person\":{\"address\":{\"city\":\"London\",\"country\":\"Greet Britain\"},\"age\":43,\"first_name\":\"John\",\"last_name\":\"Doe\",\"phone_numbers\":[\"+44 1234567\",\"+44 2345678\"]}}\n```\n\n# \u307e\u3068\u3081\n\n![Screen Shot 2015-05-24 at 02.08.41.png](https://qiita-image-store.s3.amazonaws.com/0/179/8c786221-9bfc-9454-68de-ecb2b9f94055.png)\n", "tags": ["rust"]}