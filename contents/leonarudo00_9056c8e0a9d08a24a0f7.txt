{"tags": ["Kinect", "KinectV2", "pointcloudlibrary", "PCL"], "context": "Kinect\u3084PCL\u306e\u5c0e\u5165\u30fb\u8a2d\u5b9a\u65b9\u6cd5\u306b\u95a2\u3057\u3066\u306f\u4ed6\u306e\u89e3\u8aac\u8a18\u4e8b\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\uff01\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\nmain.cpp\n// C\u306emin,max\u30de\u30af\u30ed\u3092\u7121\u52b9\u306b\u3059\u308b\n#define NOMINMAX\n// \u5b89\u5168\u3067\u306a\u3044\u30e1\u30bd\u30c3\u30c9\u306e\u547c\u3073\u51fa\u3057\u3067\u306e\u8b66\u544a\u3092\u7121\u52b9\u306b\u3059\u308b\n#define _SCL_SECURE_NO_WARNINGS\n#define _CRT_SECURE_NO_WARNINGS\n\n#include <iostream>\n#include <Windows.h>\n#include <pcl/visualization/cloud_viewer.h>\n#include <pcl/features/integral_image_normal.h>\n#include \"kinect2_grabber.h\"\n\n// \u70b9\u7fa4\u306e\u578b\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304f\ntypedef pcl::PointXYZ PointType;\n\n// \u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\nvoid estimateNormal( pcl::PointCloud<PointType>::Ptr cloud, pcl::PointCloud<pcl::Normal>::Ptr &cloud_normals );\n\nvoid main()\n{\n    try{\n        // \u30d3\u30e5\u30fc\u30a2\n        pcl::visualization::PCLVisualizer viewer( \"Point Cloud Viewer\" );\n\n        // \u70b9\u7fa4\n        pcl::PointCloud<PointType>::Ptr cloud( new pcl::PointCloud<PointType> );\n\n        // \u70b9\u7fa4\u306e\u6392\u4ed6\u51e6\u7406\n        boost::mutex mutex;\n\n        // \u6cd5\u7dda\n        pcl::PointCloud<pcl::Normal>::Ptr cloud_normals( new pcl::PointCloud < pcl::Normal > );\n\n        // \u30c7\u30fc\u30bf\u306e\u66f4\u65b0\u3054\u3068\u306b\u547c\u3070\u308c\u308b\u95a2\u6570\uff08\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\n        boost::function<void( const pcl::PointCloud<PointType>::ConstPtr& )> function\n            = [&cloud, &mutex]( const pcl::PointCloud<PointType>::ConstPtr &new_cloud ){\n            boost::mutex::scoped_lock lock( mutex );\n            pcl::copyPointCloud( *new_cloud, *cloud );\n        };\n\n        // Kinect2Grabber\u3092\u958b\u59cb\u3059\u308b\n        pcl::Kinect2Grabber grabber;\n        grabber.registerCallback( function );\n        grabber.start();\n\n        // \u30d3\u30e5\u30fc\u30a2\u30fc\u304c\u7d42\u4e86\u3055\u308c\u308b\u307e\u3067\u52d5\u4f5c\u3059\u308b\n        while ( !viewer.wasStopped() ){\n            // \u8868\u793a\u3092\u66f4\u65b0\u3059\u308b\n            viewer.spinOnce();\n\n            // \u70b9\u7fa4\u304c\u3042\u308b\u5834\u5408\n            boost::mutex::scoped_try_lock lock( mutex );\n            if ( ( cloud->size() != 0 ) && lock.owns_lock() ){\n                // \u70b9\u7fa4\u3092\u66f4\u65b0\u3059\u308b\n                auto ret = viewer.updatePointCloud( cloud, \"cloud\" );\n                if ( !ret ){\n                    // \u66f4\u65b0\u304c\u30a8\u30e9\u30fc\u306b\u306a\u3063\u305f\u5834\u5408\u306f\u3001\u672a\u4f5c\u6210\u306a\u306e\u3067\u65b0\u3057\u3044\u70b9\u7fa4\u3068\u3057\u3066\u8ffd\u52a0\u3059\u308b\n                    viewer.addPointCloud( cloud, \"cloud\" );\n                }\n\n                // \u6cd5\u7dda\u3092\u63a8\u5b9a\u3059\u308b\n                estimateNormal( cloud, cloud_normals );\n                // \u6cd5\u7dda\u3092\u66f4\u65b0\u3059\u308b\n                viewer.removePointCloud( \"normals\" );\n                viewer.addPointCloudNormals<PointType, pcl::Normal>( cloud, cloud_normals, 100, 0.05, \"normals\" );\n            }\n\n            // \u30a8\u30b9\u30b1\u30fc\u30d7\u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089\u7d42\u4e86\u3059\u308b\n            if ( GetKeyState( VK_ESCAPE ) < 0 ){\n                break;\n            }\n        }\n    }\n\n    catch ( std::exception& ex ){\n        std::cout << ex.what() << std::endl;\n    }\n}\n\n// \u6cd5\u7dda\u3092\u63a8\u5b9a\u3059\u308b\nvoid estimateNormal( pcl::PointCloud<PointType>::Ptr cloud, pcl::PointCloud<pcl::Normal>::Ptr &cloud_normals )\n{\n    // \u6cd5\u7dda\u63a8\u5b9a\u30af\u30e9\u30b9\n    pcl::IntegralImageNormalEstimation<PointType, pcl::Normal>  ne;\n\n    ne.setNormalEstimationMethod( ne.AVERAGE_DEPTH_CHANGE );\n    ne.setMaxDepthChangeFactor( 0.01 );\n    ne.setNormalSmoothingSize( 5.0 );\n    ne.setInputCloud( cloud );\n    ne.compute( *cloud_normals );\n}\n\n\n\nkinect2_grabber.h\u306f\u4ee5\u4e0b\u306e\u30ea\u30f3\u30af\u5148\u304b\u3089\u9802\u304d\u307e\u3057\u305f\u3002\nhttps://github.com/UnaNancyOwen/KinectGrabber\n\u5b9f\u884c\u7d50\u679c\u4f8b\u304c\u3053\u3061\u3089\n\n\u306b\u3087\u308d\u306b\u3087\u308d\u51fa\u3066\u3044\u308b\u7dda\u304c\u63a8\u5b9a\u3055\u308c\u305f\u6cd5\u7dda\u3067\u3059\u3002\nKinect\u3084PCL\u306e\u5c0e\u5165\u30fb\u8a2d\u5b9a\u65b9\u6cd5\u306b\u95a2\u3057\u3066\u306f\u4ed6\u306e\u89e3\u8aac\u8a18\u4e8b\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\uff01\n# \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n```cpp:main.cpp\n// C\u306emin,max\u30de\u30af\u30ed\u3092\u7121\u52b9\u306b\u3059\u308b\n#define NOMINMAX\n// \u5b89\u5168\u3067\u306a\u3044\u30e1\u30bd\u30c3\u30c9\u306e\u547c\u3073\u51fa\u3057\u3067\u306e\u8b66\u544a\u3092\u7121\u52b9\u306b\u3059\u308b\n#define _SCL_SECURE_NO_WARNINGS\n#define _CRT_SECURE_NO_WARNINGS\n\n#include <iostream>\n#include <Windows.h>\n#include <pcl/visualization/cloud_viewer.h>\n#include <pcl/features/integral_image_normal.h>\n#include \"kinect2_grabber.h\"\n\n// \u70b9\u7fa4\u306e\u578b\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304f\ntypedef pcl::PointXYZ PointType;\n\n// \u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\nvoid estimateNormal( pcl::PointCloud<PointType>::Ptr cloud, pcl::PointCloud<pcl::Normal>::Ptr &cloud_normals );\n\nvoid main()\n{\n\ttry{\n\t\t// \u30d3\u30e5\u30fc\u30a2\n\t\tpcl::visualization::PCLVisualizer viewer( \"Point Cloud Viewer\" );\n\n\t\t// \u70b9\u7fa4\n\t\tpcl::PointCloud<PointType>::Ptr cloud( new pcl::PointCloud<PointType> );\n\n\t\t// \u70b9\u7fa4\u306e\u6392\u4ed6\u51e6\u7406\n\t\tboost::mutex mutex;\n\n\t\t// \u6cd5\u7dda\n\t\tpcl::PointCloud<pcl::Normal>::Ptr cloud_normals( new pcl::PointCloud < pcl::Normal > );\n\n\t\t// \u30c7\u30fc\u30bf\u306e\u66f4\u65b0\u3054\u3068\u306b\u547c\u3070\u308c\u308b\u95a2\u6570\uff08\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\n\t\tboost::function<void( const pcl::PointCloud<PointType>::ConstPtr& )> function\n\t\t\t= [&cloud, &mutex]( const pcl::PointCloud<PointType>::ConstPtr &new_cloud ){\n\t\t\tboost::mutex::scoped_lock lock( mutex );\n\t\t\tpcl::copyPointCloud( *new_cloud, *cloud );\n\t\t};\n\n\t\t// Kinect2Grabber\u3092\u958b\u59cb\u3059\u308b\n\t\tpcl::Kinect2Grabber grabber;\n\t\tgrabber.registerCallback( function );\n\t\tgrabber.start();\n\n\t\t// \u30d3\u30e5\u30fc\u30a2\u30fc\u304c\u7d42\u4e86\u3055\u308c\u308b\u307e\u3067\u52d5\u4f5c\u3059\u308b\n\t\twhile ( !viewer.wasStopped() ){\n\t\t\t// \u8868\u793a\u3092\u66f4\u65b0\u3059\u308b\n\t\t\tviewer.spinOnce();\n\n\t\t\t// \u70b9\u7fa4\u304c\u3042\u308b\u5834\u5408\n\t\t\tboost::mutex::scoped_try_lock lock( mutex );\n\t\t\tif ( ( cloud->size() != 0 ) && lock.owns_lock() ){\n\t\t\t\t// \u70b9\u7fa4\u3092\u66f4\u65b0\u3059\u308b\n\t\t\t\tauto ret = viewer.updatePointCloud( cloud, \"cloud\" );\n\t\t\t\tif ( !ret ){\n\t\t\t\t\t// \u66f4\u65b0\u304c\u30a8\u30e9\u30fc\u306b\u306a\u3063\u305f\u5834\u5408\u306f\u3001\u672a\u4f5c\u6210\u306a\u306e\u3067\u65b0\u3057\u3044\u70b9\u7fa4\u3068\u3057\u3066\u8ffd\u52a0\u3059\u308b\n\t\t\t\t\tviewer.addPointCloud( cloud, \"cloud\" );\n\t\t\t\t}\n\n\t\t\t\t// \u6cd5\u7dda\u3092\u63a8\u5b9a\u3059\u308b\n\t\t\t\testimateNormal( cloud, cloud_normals );\n\t\t\t\t// \u6cd5\u7dda\u3092\u66f4\u65b0\u3059\u308b\n\t\t\t\tviewer.removePointCloud( \"normals\" );\n\t\t\t\tviewer.addPointCloudNormals<PointType, pcl::Normal>( cloud, cloud_normals, 100, 0.05, \"normals\" );\n\t\t\t}\n\n\t\t\t// \u30a8\u30b9\u30b1\u30fc\u30d7\u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089\u7d42\u4e86\u3059\u308b\n\t\t\tif ( GetKeyState( VK_ESCAPE ) < 0 ){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tcatch ( std::exception& ex ){\n\t\tstd::cout << ex.what() << std::endl;\n\t}\n}\n\n// \u6cd5\u7dda\u3092\u63a8\u5b9a\u3059\u308b\nvoid estimateNormal( pcl::PointCloud<PointType>::Ptr cloud, pcl::PointCloud<pcl::Normal>::Ptr &cloud_normals )\n{\n\t// \u6cd5\u7dda\u63a8\u5b9a\u30af\u30e9\u30b9\n\tpcl::IntegralImageNormalEstimation<PointType, pcl::Normal>  ne;\n\n\tne.setNormalEstimationMethod( ne.AVERAGE_DEPTH_CHANGE );\n\tne.setMaxDepthChangeFactor( 0.01 );\n\tne.setNormalSmoothingSize( 5.0 );\n\tne.setInputCloud( cloud );\n\tne.compute( *cloud_normals );\n}\n\n```\n\nkinect2_grabber.h\u306f\u4ee5\u4e0b\u306e\u30ea\u30f3\u30af\u5148\u304b\u3089\u9802\u304d\u307e\u3057\u305f\u3002\nhttps://github.com/UnaNancyOwen/KinectGrabber\n\n\u5b9f\u884c\u7d50\u679c\u4f8b\u304c\u3053\u3061\u3089\n![2017-01-09 (1).png](https://qiita-image-store.s3.amazonaws.com/0/48341/2cf9e555-90ae-db24-af1f-aae0ba8ccc0a.png)\n\u306b\u3087\u308d\u306b\u3087\u308d\u51fa\u3066\u3044\u308b\u7dda\u304c\u63a8\u5b9a\u3055\u308c\u305f\u6cd5\u7dda\u3067\u3059\u3002\n"}