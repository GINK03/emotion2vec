{"context": " More than 1 year has passed since last update.\u305d\u306e1\n\u305d\u306e2\n\n\u6982\u8981\nActionCable\u306e\u30b3\u30fc\u30c9\u30ea\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u3057\u3064\u3064\u30e1\u30e2\u66f8\u304d\u3002\n\u4eca\u56de\u306fWebSocket\u306b\u5bfe\u3057\u3066\u767b\u9332\u3055\u308c\u305f\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u304b\u3089\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\nActionCable::Connection::Base#process\n\u305d\u306e1\u3067\u3082\u898b\u307e\u3057\u305f\u304c\u3001WebSocket\u3078\u306e\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u306e\u767b\u9332\u306f\u3053\u3053\u3067\u884c\u308f\u308c\u3066\u3044\u307e\u3059\u3002\n# Called by the server when a new WebSocket connection is established. This configures the callbacks intended for overwriting by the user.\n# This method should not be called directly. Rely on the #connect (and #disconnect) callback instead.\ndef process\n  logger.info started_request_message\n\n  if websocket.possible? && allow_request_origin?\n    websocket.on(:open)    { |event| send_async :on_open   }\n    websocket.on(:message) { |event| on_message event.data }\n    websocket.on(:close)   { |event| send_async :on_close  }\n\n    respond_to_successful_request\n  else\n    respond_to_invalid_request\n  end\nend\n\n\nActionCable::Connection::Base#send_async\nsend_async\u3067\u306f\u3001worker_pool\u306easync\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\n# Invoke a method on the connection asynchronously through the pool of thread workers.\ndef send_async(method, *arguments)\n  worker_pool.async.invoke(self, method, *arguments)\nend\n\nworker_pool\u306e\u4e2d\u8eab\u306fActionCable::Server::Worker#pool\u306e\u623b\u308a\u5024\u3067\u3059\u3002\n\u30b3\u30e1\u30f3\u30c8\u306b\u3082\u3042\u308b\u901a\u308a\u3001config\u306eworker_pool_size\u3067\u3053\u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n# The thread worker pool for handling all the connection work on this server. Default size is set by config.worker_pool_size.\ndef worker_pool\n  @worker_pool ||= ActionCable::Server::Worker.pool(size: config.worker_pool_size)\nend\n\n\u3053\u306epool\u30e1\u30bd\u30c3\u30c9\u3084\u3001send_async\u3067\u547c\u3073\u51fa\u3057\u3066\u3044\u308basync\u30e1\u30bd\u30c3\u30c9\u306fActionCable::Server::Worker\u304cinclude\u3057\u3066\u3044\u308bCelluloid\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n\nCelluloid\nCelluloid\u306factor\u3063\u307d\u3044\u3053\u3068\u3092Ruby\u3067\u3059\u308b\u305f\u3081\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3059\u3002\nactor\u306b\u3064\u3044\u3066\u306f\u5148\u65e5\u306eRubyKaigi2015\u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u3067\u3082\u7d39\u4ecb\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u306d\u3002\n\uff08\u30b9\u30e9\u30a4\u30c9\u304cSpeakerDeck\u306b\u30a2\u30c3\u30d7\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3000\u21db\u3000https://speakerdeck.com/m_seki/actor-thread-and-me-rubykaigi2015)\nCelluloid\u306b\u3064\u3044\u3066\u306f\u3053\u3061\u3089\u306e\u8a18\u4e8b\u304c\u5206\u304b\u308a\u3084\u3059\u304b\u3063\u305f\u3067\u3059\u3002\nCelluloid\u306e\u306f\u306a\u3057\n\nCelluloid#pool\npool\u306b\u3064\u3044\u3066\u306fGithub\u306ewiki\u306b\u8aac\u660e\u304c\u8f09\u3063\u3066\u3044\u307e\u3057\u305f\u3002\ndelegate\u5148\u306eproxy object\u3067\u3042\u308bworker\u306epool\u3092\u4f5c\u308b\u30e1\u30bd\u30c3\u30c9\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u304b\u306d\u2026\u2026\u3002\n\nActionCable::Server::Worker#invoke\ndef invoke(receiver, method, *args)\n  @connection = receiver\n\n  run_callbacks :work do\n    receiver.send method, *args\n  end\nrescue Exception => e\n  # ...\n\ninvoke\u306fcallback\u3092\u547c\u3093\u3067\u3001connection\u306b\u5bfe\u3057\u3066send\u3057\u3066\u308b\u3060\u3051\u3067\u3059\u3002\nsend\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9\u306fon_open\u3068on_close\u3067\u3057\u305f\u306d\u3002\n\u3064\u307e\u308a\u3001connection\u306eon_open / on_close\u304c\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\ndef on_open\n  connect if respond_to?(:connect)\n  subscribe_to_internal_channel\n  beat\n\n  message_buffer.process!\n  server.add_connection(self)\nrescue ActionCable::Connection::Authorization::UnauthorizedError\n  respond_to_invalid_request\nend\n\n# ...\n\ndef on_close\n  logger.info finished_request_message\n\n  server.remove_connection(self)\n\n  subscriptions.unsubscribe_from_all\n  unsubscribe_from_internal_channel\n\n  disconnect if respond_to?(:disconnect)\nend\n\non_open\u306e\u65b9\u306f\u3001MessageBuffer#process!\u3092\u547c\u3093\u3067server\u306b\u81ea\u8eab\u3092\u8ffd\u52a0\u3002\non_close\u306e\u65b9\u306fchannel\u3092remove\u3057\u3066\u3001subscribe\u3092\u89e3\u9664\u3057\u3066disconnect\u3057\u3066\u307e\u3059\u3002\n\nActionCable::Connection::MessageBuffer#process!\ndef process!\n  @processing = true\n  receive_buffered_messages\nend\n\ndef receive_buffered_messages\n  receive buffered_messages.shift until buffered_messages.empty?\nend\n\ndef receive(message)\n  connection.send_async :receive, message\nend\n\nMessageBuffer#process!\u304c\u547c\u3070\u308c\u308b\u3068\u3001buffer\u3055\u308c\u3066\u3044\u305fmessage\u304c\u306a\u304f\u306a\u308b\u307e\u3067connection\u306ereceive\u30e1\u30bd\u30c3\u30c9\u3092\u975e\u540c\u671f\u3067\u547c\u3073\u51fa\u3059\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nreceive\u30e1\u30bd\u30c3\u30c9\u3067\u3001execute_command\u304c\u547c\u3073\u51fa\u3055\u308c\u3001\u30b3\u30de\u30f3\u30c9\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u5fdc\u3058\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u51e6\u7406\u304c\u306a\u3055\u308c\u307e\u3059\u3002\ndef receive(data_in_json)\n  if websocket.alive?\n    subscriptions.execute_command ActiveSupport::JSON.decode(data_in_json)\n  else\n    logger.error \"Received data without a live WebSocket (#{data_in_json.inspect})\"\n  end\nend\n\n\nActionCable::Connection::Base#on_message\non_open\u3068on_close\u306f\u7d42\u308f\u308a\u3067\u3059\u304c\u3001\u6700\u5f8c\u306bon_message\u3092\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u307e\u3067\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\ndef on_message(message)\n  message_buffer.append message\nend\n\nmessage_buffer\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\nMessageBuffer#append\u3067\u306fprocess!\u304c\u547c\u3070\u308c\u3066\u3044\u308c\u3070receive\u3092\u3001\u547c\u3070\u308c\u3066\u3044\u306a\u3051\u308c\u3070buffer\u3092\u547c\u3073\u51fa\u3059\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\ndef append(message)\n  if valid? message\n    if processing?\n      receive message\n    else\n      buffer message\n    end\n  else\n    connection.logger.error \"Couldn't handle non-string message: #{message.class}\"\n  end\nend\n\nbuffer\u306f\u914d\u5217\u306bmessage\u3092\u8ffd\u52a0\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u306d\u3002\ndef buffer(message)\n  buffered_messages << message\nend\n\n\n\u307e\u3068\u3081\nexecute_command\u304c\u547c\u3070\u308c\u308b\u307e\u3067\u306e\u6d41\u308c\u3092\u8ffd\u3046\u3053\u3068\u304c\u51fa\u6765\u3066\u3001\u4e00\u901a\u308a\u30b3\u30fc\u30c9\u3092\u8ffd\u3048\u307e\u3057\u305f\u3002\n\u3042\u3068\u6c17\u306b\u306a\u3063\u3066\u308b\u306e\u306fidentified_by\u306e\u3042\u305f\u308a\u306a\u306e\u3067\u3001\u305d\u306e\u8fba\u3092\u8ffd\u3048\u305f\u3089\u306a\u3068\u601d\u3044\u307e\u3059\u3002\n\n[\u305d\u306e1](http://qiita.com/wakaba260/items/f71b48219106d4f225c4)\n[\u305d\u306e2](http://qiita.com/wakaba260/items/2f578b8e08ef6ac0c1c4)\n\n## \u6982\u8981\n\nActionCable\u306e\u30b3\u30fc\u30c9\u30ea\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u3057\u3064\u3064\u30e1\u30e2\u66f8\u304d\u3002\n\u4eca\u56de\u306fWebSocket\u306b\u5bfe\u3057\u3066\u767b\u9332\u3055\u308c\u305f\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u304b\u3089\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\n## ActionCable::Connection::Base#process\n\n\u305d\u306e1\u3067\u3082\u898b\u307e\u3057\u305f\u304c\u3001WebSocket\u3078\u306e\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u306e\u767b\u9332\u306f\u3053\u3053\u3067\u884c\u308f\u308c\u3066\u3044\u307e\u3059\u3002\n\n```ruby\n# Called by the server when a new WebSocket connection is established. This configures the callbacks intended for overwriting by the user.\n# This method should not be called directly. Rely on the #connect (and #disconnect) callback instead.\ndef process\n  logger.info started_request_message\n\n  if websocket.possible? && allow_request_origin?\n    websocket.on(:open)    { |event| send_async :on_open   }\n    websocket.on(:message) { |event| on_message event.data }\n    websocket.on(:close)   { |event| send_async :on_close  }\n\n    respond_to_successful_request\n  else\n    respond_to_invalid_request\n  end\nend\n```\n\n## ActionCable::Connection::Base#send_async\n\nsend_async\u3067\u306f\u3001worker_pool\u306easync\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\n\n```ruby\n# Invoke a method on the connection asynchronously through the pool of thread workers.\ndef send_async(method, *arguments)\n  worker_pool.async.invoke(self, method, *arguments)\nend\n```\n\nworker_pool\u306e\u4e2d\u8eab\u306fActionCable::Server::Worker#pool\u306e\u623b\u308a\u5024\u3067\u3059\u3002\n\u30b3\u30e1\u30f3\u30c8\u306b\u3082\u3042\u308b\u901a\u308a\u3001config\u306eworker_pool_size\u3067\u3053\u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\n```ruby\n# The thread worker pool for handling all the connection work on this server. Default size is set by config.worker_pool_size.\ndef worker_pool\n  @worker_pool ||= ActionCable::Server::Worker.pool(size: config.worker_pool_size)\nend\n```\n\n\u3053\u306epool\u30e1\u30bd\u30c3\u30c9\u3084\u3001send_async\u3067\u547c\u3073\u51fa\u3057\u3066\u3044\u308basync\u30e1\u30bd\u30c3\u30c9\u306fActionCable::Server::Worker\u304cinclude\u3057\u3066\u3044\u308bCelluloid\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n\n## Celluloid\n\nCelluloid\u306factor\u3063\u307d\u3044\u3053\u3068\u3092Ruby\u3067\u3059\u308b\u305f\u3081\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3059\u3002\nactor\u306b\u3064\u3044\u3066\u306f\u5148\u65e5\u306eRubyKaigi2015\u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u3067\u3082\u7d39\u4ecb\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u306d\u3002\n\uff08\u30b9\u30e9\u30a4\u30c9\u304cSpeakerDeck\u306b\u30a2\u30c3\u30d7\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3000\u21db\u3000https://speakerdeck.com/m_seki/actor-thread-and-me-rubykaigi2015)\n\nCelluloid\u306b\u3064\u3044\u3066\u306f\u3053\u3061\u3089\u306e\u8a18\u4e8b\u304c\u5206\u304b\u308a\u3084\u3059\u304b\u3063\u305f\u3067\u3059\u3002\n[Celluloid\u306e\u306f\u306a\u3057](http://qiita.com/mururu/items/da460af3db8105a86ed4)\n\n### Celluloid#pool\n\npool\u306b\u3064\u3044\u3066\u306f[Github\u306ewiki](https://github.com/celluloid/celluloid/wiki/Pools)\u306b\u8aac\u660e\u304c\u8f09\u3063\u3066\u3044\u307e\u3057\u305f\u3002\ndelegate\u5148\u306eproxy object\u3067\u3042\u308bworker\u306epool\u3092\u4f5c\u308b\u30e1\u30bd\u30c3\u30c9\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u304b\u306d\u2026\u2026\u3002\n\n## ActionCable::Server::Worker#invoke\n\n```ruby\ndef invoke(receiver, method, *args)\n  @connection = receiver\n\n  run_callbacks :work do\n    receiver.send method, *args\n  end\nrescue Exception => e\n  # ...\n```\n\ninvoke\u306fcallback\u3092\u547c\u3093\u3067\u3001connection\u306b\u5bfe\u3057\u3066send\u3057\u3066\u308b\u3060\u3051\u3067\u3059\u3002\nsend\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9\u306fon_open\u3068on_close\u3067\u3057\u305f\u306d\u3002\n\u3064\u307e\u308a\u3001connection\u306eon_open / on_close\u304c\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\n\n```ruby\ndef on_open\n  connect if respond_to?(:connect)\n  subscribe_to_internal_channel\n  beat\n\n  message_buffer.process!\n  server.add_connection(self)\nrescue ActionCable::Connection::Authorization::UnauthorizedError\n  respond_to_invalid_request\nend\n\n# ...\n\ndef on_close\n  logger.info finished_request_message\n\n  server.remove_connection(self)\n\n  subscriptions.unsubscribe_from_all\n  unsubscribe_from_internal_channel\n\n  disconnect if respond_to?(:disconnect)\nend\n```\n\non_open\u306e\u65b9\u306f\u3001MessageBuffer#process!\u3092\u547c\u3093\u3067server\u306b\u81ea\u8eab\u3092\u8ffd\u52a0\u3002\non_close\u306e\u65b9\u306fchannel\u3092remove\u3057\u3066\u3001subscribe\u3092\u89e3\u9664\u3057\u3066disconnect\u3057\u3066\u307e\u3059\u3002\n\n## ActionCable::Connection::MessageBuffer#process!\n\n```ruby\ndef process!\n  @processing = true\n  receive_buffered_messages\nend\n```\n\n```ruby\ndef receive_buffered_messages\n  receive buffered_messages.shift until buffered_messages.empty?\nend\n```\n\n```ruby\ndef receive(message)\n  connection.send_async :receive, message\nend\n```\n\nMessageBuffer#process!\u304c\u547c\u3070\u308c\u308b\u3068\u3001buffer\u3055\u308c\u3066\u3044\u305fmessage\u304c\u306a\u304f\u306a\u308b\u307e\u3067connection\u306ereceive\u30e1\u30bd\u30c3\u30c9\u3092\u975e\u540c\u671f\u3067\u547c\u3073\u51fa\u3059\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\nreceive\u30e1\u30bd\u30c3\u30c9\u3067\u3001execute_command\u304c\u547c\u3073\u51fa\u3055\u308c\u3001\u30b3\u30de\u30f3\u30c9\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u5fdc\u3058\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u51e6\u7406\u304c\u306a\u3055\u308c\u307e\u3059\u3002\n\n```ruby\ndef receive(data_in_json)\n  if websocket.alive?\n    subscriptions.execute_command ActiveSupport::JSON.decode(data_in_json)\n  else\n    logger.error \"Received data without a live WebSocket (#{data_in_json.inspect})\"\n  end\nend\n```\n\n## ActionCable::Connection::Base#on_message\n\non_open\u3068on_close\u306f\u7d42\u308f\u308a\u3067\u3059\u304c\u3001\u6700\u5f8c\u306bon_message\u3092\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u307e\u3067\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\n```ruby\ndef on_message(message)\n  message_buffer.append message\nend\n```\n\nmessage_buffer\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\nMessageBuffer#append\u3067\u306fprocess!\u304c\u547c\u3070\u308c\u3066\u3044\u308c\u3070receive\u3092\u3001\u547c\u3070\u308c\u3066\u3044\u306a\u3051\u308c\u3070buffer\u3092\u547c\u3073\u51fa\u3059\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```ruby\ndef append(message)\n  if valid? message\n    if processing?\n      receive message\n    else\n      buffer message\n    end\n  else\n    connection.logger.error \"Couldn't handle non-string message: #{message.class}\"\n  end\nend\n```\n\nbuffer\u306f\u914d\u5217\u306bmessage\u3092\u8ffd\u52a0\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u306d\u3002\n\n```ruby\ndef buffer(message)\n  buffered_messages << message\nend\n```\n\n## \u307e\u3068\u3081\n\nexecute_command\u304c\u547c\u3070\u308c\u308b\u307e\u3067\u306e\u6d41\u308c\u3092\u8ffd\u3046\u3053\u3068\u304c\u51fa\u6765\u3066\u3001\u4e00\u901a\u308a\u30b3\u30fc\u30c9\u3092\u8ffd\u3048\u307e\u3057\u305f\u3002\n\u3042\u3068\u6c17\u306b\u306a\u3063\u3066\u308b\u306e\u306fidentified_by\u306e\u3042\u305f\u308a\u306a\u306e\u3067\u3001\u305d\u306e\u8fba\u3092\u8ffd\u3048\u305f\u3089\u306a\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["Rails", "Ruby", "ActionCable"]}