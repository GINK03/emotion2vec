{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nAssertJ \uff5eFluent assertions for java\uff5e\nJUnit \u3067\u3088\u304f\u4f7f\u3046 Matcher \u306f\u3053\u3061\u3089\u306b\u3088\u304f\u307e\u3068\u307e\u3063\u3066\u3044\u307e\u3059\u3002\nHamcrest\u306eMatchers\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u30e1\u30bd\u30c3\u30c9\u306e\u4f7f\u3044\u65b9\u30e1\u30e2\n\u4eca\u56de\u306f\u3053\u308c\u306e AssertJ \u7248\u7684\u306a\u4f4d\u7f6e\u3065\u3051\u3067\u7528\u610f\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u305f\u3060\u3057\u3001\u5168\u3066\u306e\u691c\u8a3c\u30e1\u30bd\u30c3\u30c9\u3092\u7db2\u7f85\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u306e\u3067\u3001\u305d\u306e\u70b9\u306b\u3064\u3044\u3066\u306f\u3054\u5bb9\u8d66\u4e0b\u3055\u3044\u3002\n\n\u30d0\u30fc\u30b8\u30e7\u30f3\n\nJava\n1.8\n\nAssertJ\n3.2.0\n\n\u57fa\u672c\u7684\u306a\u6bd4\u8f03\nhttps://gist.github.com/naotawool/b3d3903dfd3d17c51573#file-assertjbasiclearning-java\n\nisEqualTo/isNotEqualTo: \u540c\u5024\u691c\u8a3c\n\nAssertJBasicLearning.java\n@Test\npublic void \u540c\u5024\u691c\u8a3c() {\n    assertThat(\"Foo\").isEqualTo(\"Foo\");\n    assertThat(\"Foo\").isNotEqualTo(\"Bar\");\n}\n\n\n\nisNull/isNotNull: Null \u691c\u8a3c\n\nAssertJBasicLearning.java\n@Test\npublic void null\u691c\u8a3c() {\n    Object actual = null;\n    assertThat(actual).isNull();\n\n    actual = \"Foo\";\n    assertThat(actual).isNotNull();\n}\n\n\n\nisEqualByComparingTo/isNotEqualByComparingTo: compareTo\u306b\u3088\u308b\u691c\u8a3c\n\nAssertJBasicLearning.java\n@Test\npublic void compareTo\u306b\u3088\u308b\u691c\u8a3c() {\n    Foo foo1 = new Foo();\n    Foo foo2 = new Foo();\n\n    assertThat(foo1).isEqualByComparingTo(foo2);\n}\n\nprivate static final class Foo implements Comparable<Foo> {\n    @Override\n    public int compareTo(Foo other) {\n        return 0;\n    }\n}\n\n\n\nisSameAs/isNotSameAs: \u540c\u4e00\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u691c\u8a3c\n\nAssertJBasicLearning.java\n@Test\npublic void \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u691c\u8a3c() {\n    Bar bar1 = new Bar();\n    Bar bar2 = bar1;\n\n    assertThat(bar1).isSameAs(bar2);\n}\n\nprivate static class Bar { }\n\n\n\nisInstanceOf/isNotInstanceOf: \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u578b\u691c\u8a3c\n\nAssertJBasicLearning.java\n@Test\npublic void \u578b\u691c\u8a3c() {\n    Baz baz = new Baz();\n    Qux qux = new Qux();\n\n    assertThat(baz).isInstanceOf(Baz.class);\n    assertThat(qux).isInstanceOf(Baz.class).isInstanceOf(Qux.class);\n}\n\nprivate static class Baz { }\nprivate static final class Qux extends Baz { }\n\n\n\nhasToString: toString \u691c\u8a3c\n\nAssertJBasicLearning.java\n@Test\npublic void toString\u306b\u3088\u308b\u691c\u8a3c() {\n    FooBar fooBar = new FooBar();\n\n    assertThat(fooBar).hasToString(\"FooBar\");\n}\n\nprivate static final class FooBar {\n    @Override\n    public String toString() {\n        return \"FooBar\";\n    }\n}\n\n\n\nas: \u691c\u8a3c\u5185\u5bb9\u306e\u6ce8\u91c8\n\nAssertJBasicLearning.java\n@Test\npublic void \u5931\u6557\u6642\u306b\u8868\u793a\u3055\u308c\u308b\u691c\u8a3c\u5185\u5bb9\u3092\u8a2d\u5b9a() {\n    assertThat(\"Foo\").as(\"AssertJ sample\").isEqualTo(\"Bar\");\n\n    // org.junit.ComparisonFailure: [AssertJ sample] expected:<\"[Bar]\"> but was:<\"[Foo]\">\n}\n\n\n\n\u6587\u5b57\u5217\u6bd4\u8f03\nhttps://gist.github.com/naotawool/b3d3903dfd3d17c51573#file-assertjstringlearning-java\n\nstartsWith: \u63a5\u982d\u8f9e\u691c\u8a3c\n\nAssertJStringLearning.java\n@Test\npublic void \u63a5\u982d\u8f9e\u691c\u8a3c() {\n    assertThat(\"FooBar\").startsWith(\"Foo\");\n}\n\n\n\nendsWith: \u63a5\u5c3e\u8f9e\u691c\u8a3c\n\nAssertJStringLearning.java\n@Test\npublic void \u63a5\u5c3e\u8f9e\u691c\u8a3c() {\n    assertThat(\"FooBar\").endsWith(\"Bar\");\n}\n\n\n\nisEqualToIgnoringCase: \u5927\u6587\u5b57\u5c0f\u6587\u5b57\u3092\u7121\u8996\u3057\u305f\u691c\u8a3c\n\nAssertJStringLearning.java\n@Test\npublic void \u5927\u6587\u5b57\u5c0f\u6587\u5b57\u691c\u8a3c\u691c\u8a3c() {\n    assertThat(\"Foo\").isNotEqualTo(\"FOO\").isEqualToIgnoringCase(\"FOO\");\n}\n\n\n\nisEqualToIgnoringWhitespace: \u7a7a\u767d\u3092\u7121\u8996\u3057\u305f\u691c\u8a3c\n\n\u30bf\u30d6 (\\t) \u3082 1 \u3064\u306e\u30b9\u30da\u30fc\u30b9\u3068\u3057\u3066\u30ab\u30a6\u30f3\u30c8\u3055\u308c\u308b\n\u5148\u982d\u3068\u672b\u5c3e\u306e\u30b9\u30da\u30fc\u30b9\u306f\u7121\u8996\u3055\u308c\u308b\n\u8907\u6570\u306e\u30b9\u30da\u30fc\u30b9\u306f 1 \u3064\u306b\u307e\u3068\u3081\u3089\u308c\u308b\n\u5927\u6587\u5b57\u5c0f\u6587\u5b57\u306f\u7121\u8996\u3057\u306a\u3044\n\n\nAssertJStringLearning.java\n@Test\npublic void \u30b9\u30da\u30fc\u30b9\u7121\u8996\u691c\u8a3c() {\n    assertThat(\"Foo BAR baz\").isEqualToIgnoringWhitespace(\" Foo   BAR\\tbaz \");\n    assertThat(\" Foo   BAR\\tbaz \").isEqualToIgnoringWhitespace(\"Foo BAR baz\");\n}\n\n\n\nisEmpty: \u7a7a\u6587\u5b57\u691c\u8a3c\n\nAssertJStringLearning.java\n@Test\npublic void \u7a7a\u6587\u5b57\u691c\u8a3c() {\n    assertThat(\"\").isEmpty();\n}\n\n\n\nisNullOrEmpty: \u7a7a\u6587\u5b57 Null \u691c\u8a3c\n\nAssertJStringLearning.java\n@Test\npublic void \u7a7a\u6587\u5b57null\u691c\u8a3c() {\n    String actual = \"\";\n    assertThat(actual).isNullOrEmpty();\n\n    actual = null;\n    assertThat(actual).isNullOrEmpty();\n}\n\n\n\nmatches: \u6b63\u898f\u8868\u73fe\u3092\u4f7f\u3063\u305f\u691c\u8a3c\n\nAssertJStringLearning.java\n@Test\npublic void \u6b63\u898f\u8868\u73fe\u691c\u8a3c() {\n    String actual = \"FooBarBaz\";\n    assertThat(actual).matches(\"F..B..B..\").matches(\"F.*z\");\n}\n\n\n\ncontainsOnlyDigits: \u6570\u5b57\u691c\u8a3c\n\nAssertJStringLearning.java\n@Test\npublic void \u6570\u5b57\u691c\u8a3c() {\n    String actual = \"1234567890\";\n    assertThat(actual).containsOnlyDigits();\n}\n\n\n\nhasLineCount: \u884c\u6570\u691c\u8a3c\n\nAssertJStringLearning.java\n@Test\npublic void \u884c\u6570\u691c\u8a3c() {\n    String actual = \"foo\";\n    assertThat(actual).hasLineCount(1);\n\n    actual = \"foo\\nbar\\nbaz\";\n    assertThat(actual).hasLineCount(3);\n\n    actual = \"foo\\r\\nbar\\r\\nbaz\";\n    assertThat(actual).hasLineCount(3);\n}\n\n\n\n\u6570\u5024\u6bd4\u8f03\nhttps://gist.github.com/naotawool/b3d3903dfd3d17c51573#file-assertjnumberlearning-java\n\nisBetween: \u7bc4\u56f2\u691c\u8a3c\n\n\u6307\u5b9a\u3057\u305f\u5024\u3092\u542b\u3080\n\n\nAssertJNumberLearning.java\n@Test\npublic void \u7bc4\u56f2\u691c\u8a3c() {\n    assertThat(7).isBetween(0, 9).isBetween(7, 7);\n    assertThat(7).isCloseTo(5, within(2)); // 5 \u00b1 2 -> OK\n    assertThat(7).isCloseTo(5, within(1)); // 5 \u00b1 1 -> NG\n}\n\n\n\nisGreaterThan/isGreaterThanOrEqualTo: \u5927\u306a\u308a\u691c\u8a3c\n\nAssertJNumberLearning.java\n@Test\npublic void \u5927\u306a\u308a\u691c\u8a3c() {\n    assertThat(7).isGreaterThan(6).isGreaterThanOrEqualTo(7);\n}\n\n\n\nisLessThan/isLessThanOrEqualTo: \u5c0f\u306a\u308a\u691c\u8a3c\n\nAssertJNumberLearning.java\n@Test\npublic void \u306a\u308a\u691c\u8a3c() {\n    assertThat(7).isLessThan(8).isLessThanOrEqualTo(7);\n}\n\n\n\nCollection \u6bd4\u8f03\nhttps://gist.github.com/naotawool/b3d3903dfd3d17c51573#file-assertjcollectionlearning-java\n\ncontains\n\n\u4e26\u3073\u9806\u306f\u691c\u8a3c\u3057\u306a\u3044\n\u671f\u5f85\u5024\u306b\u691c\u8a3c\u5bfe\u8c61\u306e\u5024\u304c\u5168\u3066\u542b\u307e\u308c\u3066\u3044\u306a\u304f\u3066\u3082 OK\n\n\nAssertJCollectionLearning.java\n@Test\npublic void contains() {\n    List<String> actuals = Lists.newArrayList(\"Lucy\", \"Debit\", \"Anna\", \"Jack\");\n\n    // \u4e26\u3073\u9806\u306f\u691c\u8a3c\u3057\u306a\u3044\n    // \u671f\u5f85\u5024\u306b\u691c\u8a3c\u5bfe\u8c61\u306e\u5024\u304c\u5168\u3066\u542b\u307e\u308c\u3066\u3044\u306a\u304f\u3066\u3082 OK\n    assertThat(actuals).contains(\"Debit\", \"Lucy\", \"Anna\")\n                       .contains(\"Lucy\", \"Anna\");\n}\n\n\n\ncontainsOnly\n\n\u4e26\u3073\u9806\u306f\u691c\u8a3c\u3057\u306a\u3044\n\u671f\u5f85\u5024\u306b\u691c\u8a3c\u5bfe\u8c61\u306e\u5024\u304c\u5168\u3066\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u3068 NG\n\n\nAssertJCollectionLearning.java\n@Test\npublic void containsOnly() {\n    List<String> actuals = Lists.newArrayList(\"Lucy\", \"Debit\", \"Anna\", \"Jack\");\n\n    // \u4e26\u3073\u9806\u306f\u691c\u8a3c\u3057\u306a\u3044\n    // \u671f\u5f85\u5024\u306b\u691c\u8a3c\u5bfe\u8c61\u306e\u5024\u304c\u5168\u3066\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u3068 NG\n    assertThat(actuals).containsOnly(\"Debit\", \"Lucy\", \"Jack\", \"Anna\");\n}\n\n\n\ncontainsSequence\n\n\u4e26\u3073\u9806\u3092\u691c\u8a3c\n\u671f\u5f85\u5024\u3068\u691c\u8a3c\u5bfe\u8c61\u306e\u4ef6\u6570\u306f\u691c\u8a3c\u3057\u306a\u3044\n\n\nAssertJCollectionLearning.java\n@Test\npublic void containsSequence() {\n    List<String> actuals = Lists.newArrayList(\"Lucy\", \"Debit\", \"Anna\", \"Jack\");\n\n    // \u4e26\u3073\u9806\u3092\u691c\u8a3c\n    // \u671f\u5f85\u5024\u3068\u691c\u8a3c\u5bfe\u8c61\u306e\u4ef6\u6570\u306f\u691c\u8a3c\u3057\u306a\u3044\n    assertThat(actuals).containsSequence(\"Lucy\", \"Debit\")\n                       .containsSequence(\"Debit\", \"Anna\", \"Jack\");\n}\n\n\n\ncontainsSubsequence\n\n\u4e26\u3073\u9806\u3092\u691c\u8a3c\n\u671f\u5f85\u5024\u3068\u691c\u8a3c\u5bfe\u8c61\u306e\u4ef6\u6570\u306f\u691c\u8a3c\u3057\u306a\u3044\n\u671f\u5f85\u5024\u306b\u691c\u8a3c\u5bfe\u8c61\u306e\u629c\u3051\u76db\u308c\u304c\u3042\u3063\u305f\u5834\u5408\u3067\u3082 OK\n\n\nAssertJCollectionLearning.java\n@Test\npublic void containsSubsequence() {\n    List<String> actuals = Lists.newArrayList(\"Lucy\", \"Debit\", \"Anna\", \"Jack\");\n\n    // \u4e26\u3073\u9806\u3092\u691c\u8a3c\n    // \u671f\u5f85\u5024\u3068\u691c\u8a3c\u5bfe\u8c61\u306e\u4ef6\u6570\u306f\u691c\u8a3c\u3057\u306a\u3044\n    // \u671f\u5f85\u5024\u306b\u691c\u8a3c\u5bfe\u8c61\u306e\u629c\u3051\u76db\u308c\u304c\u3042\u3063\u305f\u5834\u5408\u3067\u3082 OK\n    assertThat(actuals).containsSubsequence(\"Lucy\", \"Anna\")\n                       .containsSubsequence(\"Debit\", \"Jack\")\n                       .containsSubsequence(\"Lucy\", \"Jack\");\n}\n\n\n\ncontainsExactly\n\n\u4e26\u3073\u9806\u3092\u691c\u8a3c\n\u671f\u5f85\u5024\u3068\u691c\u8a3c\u5bfe\u8c61\u306e\u4ef6\u6570\u3082\u691c\u8a3c\n\n\nAssertJCollectionLearning.java\n@Test\npublic void containsExactly() {\n    List<String> actuals = Lists.newArrayList(\"Lucy\", \"Debit\", \"Anna\", \"Jack\");\n\n    // \u4e26\u3073\u9806\u3092\u691c\u8a3c\n    // \u671f\u5f85\u5024\u3068\u691c\u8a3c\u5bfe\u8c61\u306e\u4ef6\u6570\u3082\u691c\u8a3c\n    assertThat(actuals).containsExactly(\"Lucy\", \"Debit\", \"Anna\", \"Jack\");\n}\n\n\n\ncontainsNull\n\n\u691c\u8a3c\u5bfe\u8c61\u306b null \u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u691c\u8a3c\n\n\nAssertJCollectionLearning.java\n@Test\npublic void containsNull() {\n    List<String> actuals = Lists.newArrayList(\"Lucy\", null, \"Anna\", \"Jack\");\n\n    // \u691c\u8a3c\u5bfe\u8c61\u306b null \u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u691c\u8a3c\n    assertThat(actuals).containsNull();\n}\n\n\n\ncontainsOnlyOnce\n\n\u671f\u5f85\u5024\u304c\u691c\u8a3c\u5bfe\u8c61\u306b 1 \u3064\u3060\u3051\u542b\u307e\u308c\u308b\u3053\u3068\u3092\u691c\u8a3c\n\u671f\u5f85\u5024\u304c\u691c\u8a3c\u5bfe\u8c61\u306b 2 \u3064\u4ee5\u4e0a\u542b\u307e\u308c\u308b\u3001\u3082\u3057\u304f\u306f 1 \u3064\u3082\u542b\u307e\u308c\u306a\u3044\u3068 NG\n\n\nAssertJCollectionLearning.java\n@Test\npublic void containsOnlyOnce() {\n    List<String> actuals = Lists.newArrayList(\"Lucy\", \"Debit\", \"Anna\", \"Lucy\");\n\n    // \u671f\u5f85\u5024\u304c\u691c\u8a3c\u5bfe\u8c61\u306b 1 \u3064\u3060\u3051\u542b\u307e\u308c\u308b\u3053\u3068\u3092\u691c\u8a3c\n    // \u671f\u5f85\u5024\u304c\u691c\u8a3c\u5bfe\u8c61\u306b 2 \u3064\u4ee5\u4e0a\u542b\u307e\u308c\u308b\u3001\u3082\u3057\u304f\u306f 1 \u3064\u3082\u542b\u307e\u308c\u306a\u3044\u3068 NG\n    assertThat(actuals).containsOnlyOnce(\"Debit\", \"Anna\");\n}\n\n\n\nhasSize: \u4ef6\u6570\u691c\u8a3c\n\nAssertJCollectionLearning.java\n@Test\npublic void \u4ef6\u6570\u691c\u8a3c() {\n    List<String> actuals = Lists.newArrayList(\"Lucy\", \"Debit\", \"Anna\", \"Jack\");\n    assertThat(actuals).hasSize(4);\n}\n\n\n\nisEmpty: \u7a7a\u691c\u8a3c\n\nAssertJCollectionLearning.java\n@Test\npublic void \u7a7a\u691c\u8a3c() {\n    List<String> actuals = Lists.newArrayList();\n    assertThat(actuals).isEmpty();\n}\n\n\n\nMap \u691c\u8a3c\nhttps://gist.github.com/naotawool/b3d3903dfd3d17c51573#file-assertjmaplearning-java\n\ncontainsEntry/doesNotContainEntry: Entry \u691c\u8a3c\n\nAssertJMapLearning.java\n@Test\npublic void Entry\u691c\u8a3c() {\n    Map<String, Integer> actuals = Maps.newHashMap();\n    actuals.put(\"Key1\", 101);\n    actuals.put(\"Key2\", 202);\n    actuals.put(\"Key3\", 303);\n\n    assertThat(actuals).containsEntry(\"Key1\", 101)\n                       .containsEntry(\"Key2\", 202)\n                       .doesNotContainEntry(\"Key9\", 999);\n}\n\n\n\ncontainsKey/doesNotContainKey: Key \u691c\u8a3c\n\nAssertJMapLearning.java\n@Test\npublic void Key\u691c\u8a3c() {\n    Map<String, Integer> actuals = Maps.newHashMap();\n    actuals.put(\"Key1\", 101);\n    actuals.put(\"Key2\", 202);\n    actuals.put(\"Key3\", 303);\n\n    assertThat(actuals).containsKey(\"Key1\")\n                       .containsKeys(\"Key2\", \"Key3\")\n                       .doesNotContainKey(\"Key9\");\n}\n\n\n\ncontainsValue/doesNotContainValue: Value \u691c\u8a3c\n\nAssertJMapLearning.java\n@Test\npublic void Value\u691c\u8a3c() {\n    Map<String, Integer> actuals = Maps.newHashMap();\n    actuals.put(\"Key1\", 101);\n    actuals.put(\"Key2\", 202);\n    actuals.put(\"Key3\", 303);\n\n    assertThat(actuals).containsValue(101)\n                       .containsValues(202, 303)\n                       .doesNotContainValue(999);\n}\n\n\n\nhasSize: \u4ef6\u6570\u691c\u8a3c\n\nAssertJMapLearning.java\n@Test\npublic void \u4ef6\u6570\u691c\u8a3c() {\n    Map<String, Integer> actuals = Maps.newHashMap();\n    actuals.put(\"Key1\", 101);\n    actuals.put(\"Key2\", 202);\n    actuals.put(\"Key3\", 303);\n\n    assertThat(actuals).hasSize(3);\n}\n\n\n\nisEmpty: \u7a7a\u691c\u8a3c\n\nAssertJMapLearning.java\n@Test\npublic void \u7a7a\u691c\u8a3c() {\n    Map<String, Integer> actuals = Maps.newHashMap();\n    assertThat(actuals).isEmpty();\n}\n\n\n\n\u914d\u5217\u691c\u8a3c\nhttps://gist.github.com/naotawool/b3d3903dfd3d17c51573#file-assertjarraylearning-java\nAssertJ \u3067\u306f\u3001\u914d\u5217\u306e\u691c\u8a3c\u306b\u304a\u3044\u3066 Collection \u691c\u8a3c\u3067\u4f7f\u7528\u3067\u304d\u308b\u30e1\u30bd\u30c3\u30c9\u540d\u3068\u540c\u540d\u306e\u3082\u306e\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u305d\u3061\u3089\u3092\u4f7f\u3046\u3002\n\n\u304a\u308f\u308a\u306b\n\u3053\u306e\u3088\u3046\u306b\u3001\u57fa\u672c\u7684\u306a\u691c\u8a3c\u30e1\u30bd\u30c3\u30c9\u306f AssertJ \u306b\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001JUnit4 \u304b\u3089\u306e\u4e57\u308a\u63db\u3048\u3082\u53ef\u80fd\u3067\u3059\u3002\n\u53c2\u8003\u306b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\u6b21\u56de\u306f \u30ab\u30b9\u30bf\u30e0 Assertion \u3084 SoftAssertions \u306a\u3069\u3092\u53d6\u308a\u4e0a\u3052\u308b\u4e88\u5b9a\u3067\u3059\u3002\n# \u306f\u3058\u3081\u306b\n\n[AssertJ \uff5eFluent assertions for java\uff5e](http://joel-costigliola.github.io/assertj/index.html)\n\nJUnit \u3067\u3088\u304f\u4f7f\u3046 Matcher \u306f\u3053\u3061\u3089\u306b\u3088\u304f\u307e\u3068\u307e\u3063\u3066\u3044\u307e\u3059\u3002\n[Hamcrest\u306eMatchers\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u30e1\u30bd\u30c3\u30c9\u306e\u4f7f\u3044\u65b9\u30e1\u30e2](http://qiita.com/opengl-8080/items/e57dab6e1fa5940850a3)\n\n\u4eca\u56de\u306f\u3053\u308c\u306e AssertJ \u7248\u7684\u306a\u4f4d\u7f6e\u3065\u3051\u3067\u7528\u610f\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u305f\u3060\u3057\u3001\u5168\u3066\u306e\u691c\u8a3c\u30e1\u30bd\u30c3\u30c9\u3092\u7db2\u7f85\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u306e\u3067\u3001\u305d\u306e\u70b9\u306b\u3064\u3044\u3066\u306f\u3054\u5bb9\u8d66\u4e0b\u3055\u3044\u3002\n\n# \u30d0\u30fc\u30b8\u30e7\u30f3\n\n## Java\n1.8\n\n## AssertJ\n3.2.0\n\n# \u57fa\u672c\u7684\u306a\u6bd4\u8f03\nhttps://gist.github.com/naotawool/b3d3903dfd3d17c51573#file-assertjbasiclearning-java\n\n## isEqualTo/isNotEqualTo: \u540c\u5024\u691c\u8a3c\n\n```java:AssertJBasicLearning.java\n@Test\npublic void \u540c\u5024\u691c\u8a3c() {\n    assertThat(\"Foo\").isEqualTo(\"Foo\");\n    assertThat(\"Foo\").isNotEqualTo(\"Bar\");\n}\n```\n\n## isNull/isNotNull: Null \u691c\u8a3c\n\n```java:AssertJBasicLearning.java\n@Test\npublic void null\u691c\u8a3c() {\n    Object actual = null;\n    assertThat(actual).isNull();\n\n    actual = \"Foo\";\n    assertThat(actual).isNotNull();\n}\n```\n\n## isEqualByComparingTo/isNotEqualByComparingTo: compareTo\u306b\u3088\u308b\u691c\u8a3c\n\n```java:AssertJBasicLearning.java\n@Test\npublic void compareTo\u306b\u3088\u308b\u691c\u8a3c() {\n    Foo foo1 = new Foo();\n    Foo foo2 = new Foo();\n\n    assertThat(foo1).isEqualByComparingTo(foo2);\n}\n\nprivate static final class Foo implements Comparable<Foo> {\n    @Override\n    public int compareTo(Foo other) {\n        return 0;\n    }\n}\n```\n\n## isSameAs/isNotSameAs: \u540c\u4e00\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u691c\u8a3c\n\n```java:AssertJBasicLearning.java\n@Test\npublic void \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u691c\u8a3c() {\n    Bar bar1 = new Bar();\n    Bar bar2 = bar1;\n\n    assertThat(bar1).isSameAs(bar2);\n}\n\nprivate static class Bar { }\n```\n\n## isInstanceOf/isNotInstanceOf: \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u578b\u691c\u8a3c\n\n```java:AssertJBasicLearning.java\n@Test\npublic void \u578b\u691c\u8a3c() {\n    Baz baz = new Baz();\n    Qux qux = new Qux();\n\n    assertThat(baz).isInstanceOf(Baz.class);\n    assertThat(qux).isInstanceOf(Baz.class).isInstanceOf(Qux.class);\n}\n\nprivate static class Baz { }\nprivate static final class Qux extends Baz { }\n```\n\n## hasToString: toString \u691c\u8a3c\n\n```java:AssertJBasicLearning.java\n@Test\npublic void toString\u306b\u3088\u308b\u691c\u8a3c() {\n    FooBar fooBar = new FooBar();\n\n    assertThat(fooBar).hasToString(\"FooBar\");\n}\n\nprivate static final class FooBar {\n    @Override\n    public String toString() {\n        return \"FooBar\";\n    }\n}\n```\n\n## as: \u691c\u8a3c\u5185\u5bb9\u306e\u6ce8\u91c8\n\n```java:AssertJBasicLearning.java\n@Test\npublic void \u5931\u6557\u6642\u306b\u8868\u793a\u3055\u308c\u308b\u691c\u8a3c\u5185\u5bb9\u3092\u8a2d\u5b9a() {\n    assertThat(\"Foo\").as(\"AssertJ sample\").isEqualTo(\"Bar\");\n\n    // org.junit.ComparisonFailure: [AssertJ sample] expected:<\"[Bar]\"> but was:<\"[Foo]\">\n}\n```\n\n\n# \u6587\u5b57\u5217\u6bd4\u8f03\nhttps://gist.github.com/naotawool/b3d3903dfd3d17c51573#file-assertjstringlearning-java\n\n## startsWith: \u63a5\u982d\u8f9e\u691c\u8a3c\n\n```java:AssertJStringLearning.java\n@Test\npublic void \u63a5\u982d\u8f9e\u691c\u8a3c() {\n    assertThat(\"FooBar\").startsWith(\"Foo\");\n}\n```\n\n## endsWith: \u63a5\u5c3e\u8f9e\u691c\u8a3c\n\n```java:AssertJStringLearning.java\n@Test\npublic void \u63a5\u5c3e\u8f9e\u691c\u8a3c() {\n    assertThat(\"FooBar\").endsWith(\"Bar\");\n}\n```\n\n\n## isEqualToIgnoringCase: \u5927\u6587\u5b57\u5c0f\u6587\u5b57\u3092\u7121\u8996\u3057\u305f\u691c\u8a3c\n\n```java:AssertJStringLearning.java\n@Test\npublic void \u5927\u6587\u5b57\u5c0f\u6587\u5b57\u691c\u8a3c\u691c\u8a3c() {\n    assertThat(\"Foo\").isNotEqualTo(\"FOO\").isEqualToIgnoringCase(\"FOO\");\n}\n```\n\n\n## isEqualToIgnoringWhitespace: \u7a7a\u767d\u3092\u7121\u8996\u3057\u305f\u691c\u8a3c\n- \u30bf\u30d6 (\\t) \u3082 1 \u3064\u306e\u30b9\u30da\u30fc\u30b9\u3068\u3057\u3066\u30ab\u30a6\u30f3\u30c8\u3055\u308c\u308b\n- \u5148\u982d\u3068\u672b\u5c3e\u306e\u30b9\u30da\u30fc\u30b9\u306f\u7121\u8996\u3055\u308c\u308b\n- \u8907\u6570\u306e\u30b9\u30da\u30fc\u30b9\u306f 1 \u3064\u306b\u307e\u3068\u3081\u3089\u308c\u308b\n- \u5927\u6587\u5b57\u5c0f\u6587\u5b57\u306f\u7121\u8996\u3057\u306a\u3044\n\n```java:AssertJStringLearning.java\n@Test\npublic void \u30b9\u30da\u30fc\u30b9\u7121\u8996\u691c\u8a3c() {\n    assertThat(\"Foo BAR baz\").isEqualToIgnoringWhitespace(\" Foo   BAR\\tbaz \");\n    assertThat(\" Foo   BAR\\tbaz \").isEqualToIgnoringWhitespace(\"Foo BAR baz\");\n}\n```\n\n\n## isEmpty: \u7a7a\u6587\u5b57\u691c\u8a3c\n\n```java:AssertJStringLearning.java\n@Test\npublic void \u7a7a\u6587\u5b57\u691c\u8a3c() {\n    assertThat(\"\").isEmpty();\n}\n```\n\n\n## isNullOrEmpty: \u7a7a\u6587\u5b57 Null \u691c\u8a3c\n\n```java:AssertJStringLearning.java\n@Test\npublic void \u7a7a\u6587\u5b57null\u691c\u8a3c() {\n    String actual = \"\";\n    assertThat(actual).isNullOrEmpty();\n\n    actual = null;\n    assertThat(actual).isNullOrEmpty();\n}\n```\n\n\n## matches: \u6b63\u898f\u8868\u73fe\u3092\u4f7f\u3063\u305f\u691c\u8a3c\n\n```java:AssertJStringLearning.java\n@Test\npublic void \u6b63\u898f\u8868\u73fe\u691c\u8a3c() {\n    String actual = \"FooBarBaz\";\n    assertThat(actual).matches(\"F..B..B..\").matches(\"F.*z\");\n}\n```\n\n\n## containsOnlyDigits: \u6570\u5b57\u691c\u8a3c\n\n```java:AssertJStringLearning.java\n@Test\npublic void \u6570\u5b57\u691c\u8a3c() {\n    String actual = \"1234567890\";\n    assertThat(actual).containsOnlyDigits();\n}\n```\n\n\n## hasLineCount: \u884c\u6570\u691c\u8a3c\n\n```java:AssertJStringLearning.java\n@Test\npublic void \u884c\u6570\u691c\u8a3c() {\n    String actual = \"foo\";\n    assertThat(actual).hasLineCount(1);\n\n    actual = \"foo\\nbar\\nbaz\";\n    assertThat(actual).hasLineCount(3);\n\n    actual = \"foo\\r\\nbar\\r\\nbaz\";\n    assertThat(actual).hasLineCount(3);\n}\n```\n\n\n\n# \u6570\u5024\u6bd4\u8f03\nhttps://gist.github.com/naotawool/b3d3903dfd3d17c51573#file-assertjnumberlearning-java\n\n## isBetween: \u7bc4\u56f2\u691c\u8a3c\n- \u6307\u5b9a\u3057\u305f\u5024\u3092\u542b\u3080\n\n```java:AssertJNumberLearning.java\n@Test\npublic void \u7bc4\u56f2\u691c\u8a3c() {\n    assertThat(7).isBetween(0, 9).isBetween(7, 7);\n    assertThat(7).isCloseTo(5, within(2)); // 5 \u00b1 2 -> OK\n    assertThat(7).isCloseTo(5, within(1)); // 5 \u00b1 1 -> NG\n}\n```\n\n## isGreaterThan/isGreaterThanOrEqualTo: \u5927\u306a\u308a\u691c\u8a3c\n\n```java:AssertJNumberLearning.java\n@Test\npublic void \u5927\u306a\u308a\u691c\u8a3c() {\n    assertThat(7).isGreaterThan(6).isGreaterThanOrEqualTo(7);\n}\n```\n\n\n## isLessThan/isLessThanOrEqualTo: \u5c0f\u306a\u308a\u691c\u8a3c\n\n```java:AssertJNumberLearning.java\n@Test\npublic void \u306a\u308a\u691c\u8a3c() {\n    assertThat(7).isLessThan(8).isLessThanOrEqualTo(7);\n}\n```\n\n\n\n# Collection \u6bd4\u8f03\nhttps://gist.github.com/naotawool/b3d3903dfd3d17c51573#file-assertjcollectionlearning-java\n\n## contains\n- \u4e26\u3073\u9806\u306f\u691c\u8a3c\u3057\u306a\u3044\n- \u671f\u5f85\u5024\u306b\u691c\u8a3c\u5bfe\u8c61\u306e\u5024\u304c\u5168\u3066\u542b\u307e\u308c\u3066\u3044\u306a\u304f\u3066\u3082 OK\n\n```java:AssertJCollectionLearning.java\n@Test\npublic void contains() {\n    List<String> actuals = Lists.newArrayList(\"Lucy\", \"Debit\", \"Anna\", \"Jack\");\n\n    // \u4e26\u3073\u9806\u306f\u691c\u8a3c\u3057\u306a\u3044\n    // \u671f\u5f85\u5024\u306b\u691c\u8a3c\u5bfe\u8c61\u306e\u5024\u304c\u5168\u3066\u542b\u307e\u308c\u3066\u3044\u306a\u304f\u3066\u3082 OK\n    assertThat(actuals).contains(\"Debit\", \"Lucy\", \"Anna\")\n                       .contains(\"Lucy\", \"Anna\");\n}\n```\n\n## containsOnly\n- \u4e26\u3073\u9806\u306f\u691c\u8a3c\u3057\u306a\u3044\n- \u671f\u5f85\u5024\u306b\u691c\u8a3c\u5bfe\u8c61\u306e\u5024\u304c\u5168\u3066\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u3068 NG\n\n```java:AssertJCollectionLearning.java\n@Test\npublic void containsOnly() {\n    List<String> actuals = Lists.newArrayList(\"Lucy\", \"Debit\", \"Anna\", \"Jack\");\n\n    // \u4e26\u3073\u9806\u306f\u691c\u8a3c\u3057\u306a\u3044\n    // \u671f\u5f85\u5024\u306b\u691c\u8a3c\u5bfe\u8c61\u306e\u5024\u304c\u5168\u3066\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u3068 NG\n    assertThat(actuals).containsOnly(\"Debit\", \"Lucy\", \"Jack\", \"Anna\");\n}\n```\n\n\n\n## containsSequence\n- \u4e26\u3073\u9806\u3092\u691c\u8a3c\n- \u671f\u5f85\u5024\u3068\u691c\u8a3c\u5bfe\u8c61\u306e\u4ef6\u6570\u306f\u691c\u8a3c\u3057\u306a\u3044\n\n```java:AssertJCollectionLearning.java\n@Test\npublic void containsSequence() {\n    List<String> actuals = Lists.newArrayList(\"Lucy\", \"Debit\", \"Anna\", \"Jack\");\n\n    // \u4e26\u3073\u9806\u3092\u691c\u8a3c\n    // \u671f\u5f85\u5024\u3068\u691c\u8a3c\u5bfe\u8c61\u306e\u4ef6\u6570\u306f\u691c\u8a3c\u3057\u306a\u3044\n    assertThat(actuals).containsSequence(\"Lucy\", \"Debit\")\n                       .containsSequence(\"Debit\", \"Anna\", \"Jack\");\n}\n```\n\n\n\n## containsSubsequence\n- \u4e26\u3073\u9806\u3092\u691c\u8a3c\n- \u671f\u5f85\u5024\u3068\u691c\u8a3c\u5bfe\u8c61\u306e\u4ef6\u6570\u306f\u691c\u8a3c\u3057\u306a\u3044\n- \u671f\u5f85\u5024\u306b\u691c\u8a3c\u5bfe\u8c61\u306e\u629c\u3051\u76db\u308c\u304c\u3042\u3063\u305f\u5834\u5408\u3067\u3082 OK\n\n```java:AssertJCollectionLearning.java\n@Test\npublic void containsSubsequence() {\n    List<String> actuals = Lists.newArrayList(\"Lucy\", \"Debit\", \"Anna\", \"Jack\");\n\n    // \u4e26\u3073\u9806\u3092\u691c\u8a3c\n    // \u671f\u5f85\u5024\u3068\u691c\u8a3c\u5bfe\u8c61\u306e\u4ef6\u6570\u306f\u691c\u8a3c\u3057\u306a\u3044\n    // \u671f\u5f85\u5024\u306b\u691c\u8a3c\u5bfe\u8c61\u306e\u629c\u3051\u76db\u308c\u304c\u3042\u3063\u305f\u5834\u5408\u3067\u3082 OK\n    assertThat(actuals).containsSubsequence(\"Lucy\", \"Anna\")\n                       .containsSubsequence(\"Debit\", \"Jack\")\n                       .containsSubsequence(\"Lucy\", \"Jack\");\n}\n```\n\n\n\n## containsExactly\n- \u4e26\u3073\u9806\u3092\u691c\u8a3c\n- \u671f\u5f85\u5024\u3068\u691c\u8a3c\u5bfe\u8c61\u306e\u4ef6\u6570\u3082\u691c\u8a3c\n\n```java:AssertJCollectionLearning.java\n@Test\npublic void containsExactly() {\n    List<String> actuals = Lists.newArrayList(\"Lucy\", \"Debit\", \"Anna\", \"Jack\");\n\n    // \u4e26\u3073\u9806\u3092\u691c\u8a3c\n    // \u671f\u5f85\u5024\u3068\u691c\u8a3c\u5bfe\u8c61\u306e\u4ef6\u6570\u3082\u691c\u8a3c\n    assertThat(actuals).containsExactly(\"Lucy\", \"Debit\", \"Anna\", \"Jack\");\n}\n```\n\n\n## containsNull\n- \u691c\u8a3c\u5bfe\u8c61\u306b null \u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u691c\u8a3c\n\n```java:AssertJCollectionLearning.java\n@Test\npublic void containsNull() {\n    List<String> actuals = Lists.newArrayList(\"Lucy\", null, \"Anna\", \"Jack\");\n\n    // \u691c\u8a3c\u5bfe\u8c61\u306b null \u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u691c\u8a3c\n    assertThat(actuals).containsNull();\n}\n```\n\n\n## containsOnlyOnce\n- \u671f\u5f85\u5024\u304c\u691c\u8a3c\u5bfe\u8c61\u306b 1 \u3064\u3060\u3051\u542b\u307e\u308c\u308b\u3053\u3068\u3092\u691c\u8a3c\n- \u671f\u5f85\u5024\u304c\u691c\u8a3c\u5bfe\u8c61\u306b 2 \u3064\u4ee5\u4e0a\u542b\u307e\u308c\u308b\u3001\u3082\u3057\u304f\u306f 1 \u3064\u3082\u542b\u307e\u308c\u306a\u3044\u3068 NG\n\n```java:AssertJCollectionLearning.java\n@Test\npublic void containsOnlyOnce() {\n    List<String> actuals = Lists.newArrayList(\"Lucy\", \"Debit\", \"Anna\", \"Lucy\");\n\n    // \u671f\u5f85\u5024\u304c\u691c\u8a3c\u5bfe\u8c61\u306b 1 \u3064\u3060\u3051\u542b\u307e\u308c\u308b\u3053\u3068\u3092\u691c\u8a3c\n    // \u671f\u5f85\u5024\u304c\u691c\u8a3c\u5bfe\u8c61\u306b 2 \u3064\u4ee5\u4e0a\u542b\u307e\u308c\u308b\u3001\u3082\u3057\u304f\u306f 1 \u3064\u3082\u542b\u307e\u308c\u306a\u3044\u3068 NG\n    assertThat(actuals).containsOnlyOnce(\"Debit\", \"Anna\");\n}\n```\n\n\n## hasSize: \u4ef6\u6570\u691c\u8a3c\n\n```java:AssertJCollectionLearning.java\n@Test\npublic void \u4ef6\u6570\u691c\u8a3c() {\n    List<String> actuals = Lists.newArrayList(\"Lucy\", \"Debit\", \"Anna\", \"Jack\");\n    assertThat(actuals).hasSize(4);\n}\n```\n\n\n## isEmpty: \u7a7a\u691c\u8a3c\n\n```java:AssertJCollectionLearning.java\n@Test\npublic void \u7a7a\u691c\u8a3c() {\n    List<String> actuals = Lists.newArrayList();\n    assertThat(actuals).isEmpty();\n}\n```\n\n\n\n# Map \u691c\u8a3c\nhttps://gist.github.com/naotawool/b3d3903dfd3d17c51573#file-assertjmaplearning-java\n\n## containsEntry/doesNotContainEntry: Entry \u691c\u8a3c\n\n```java:AssertJMapLearning.java\n@Test\npublic void Entry\u691c\u8a3c() {\n    Map<String, Integer> actuals = Maps.newHashMap();\n    actuals.put(\"Key1\", 101);\n    actuals.put(\"Key2\", 202);\n    actuals.put(\"Key3\", 303);\n\n    assertThat(actuals).containsEntry(\"Key1\", 101)\n                       .containsEntry(\"Key2\", 202)\n                       .doesNotContainEntry(\"Key9\", 999);\n}\n```\n\n\n## containsKey/doesNotContainKey: Key \u691c\u8a3c\n\n```java:AssertJMapLearning.java\n@Test\npublic void Key\u691c\u8a3c() {\n    Map<String, Integer> actuals = Maps.newHashMap();\n    actuals.put(\"Key1\", 101);\n    actuals.put(\"Key2\", 202);\n    actuals.put(\"Key3\", 303);\n\n    assertThat(actuals).containsKey(\"Key1\")\n                       .containsKeys(\"Key2\", \"Key3\")\n                       .doesNotContainKey(\"Key9\");\n}\n```\n\n\n## containsValue/doesNotContainValue: Value \u691c\u8a3c\n\n```java:AssertJMapLearning.java\n@Test\npublic void Value\u691c\u8a3c() {\n    Map<String, Integer> actuals = Maps.newHashMap();\n    actuals.put(\"Key1\", 101);\n    actuals.put(\"Key2\", 202);\n    actuals.put(\"Key3\", 303);\n\n    assertThat(actuals).containsValue(101)\n                       .containsValues(202, 303)\n                       .doesNotContainValue(999);\n}\n```\n\n\n## hasSize: \u4ef6\u6570\u691c\u8a3c\n\n```java:AssertJMapLearning.java\n@Test\npublic void \u4ef6\u6570\u691c\u8a3c() {\n    Map<String, Integer> actuals = Maps.newHashMap();\n    actuals.put(\"Key1\", 101);\n    actuals.put(\"Key2\", 202);\n    actuals.put(\"Key3\", 303);\n\n    assertThat(actuals).hasSize(3);\n}\n```\n\n\n## isEmpty: \u7a7a\u691c\u8a3c\n\n```java:AssertJMapLearning.java\n@Test\npublic void \u7a7a\u691c\u8a3c() {\n    Map<String, Integer> actuals = Maps.newHashMap();\n    assertThat(actuals).isEmpty();\n}\n```\n\n\n\n# \u914d\u5217\u691c\u8a3c\nhttps://gist.github.com/naotawool/b3d3903dfd3d17c51573#file-assertjarraylearning-java\n\nAssertJ \u3067\u306f\u3001\u914d\u5217\u306e\u691c\u8a3c\u306b\u304a\u3044\u3066 Collection \u691c\u8a3c\u3067\u4f7f\u7528\u3067\u304d\u308b\u30e1\u30bd\u30c3\u30c9\u540d\u3068\u540c\u540d\u306e\u3082\u306e\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u305d\u3061\u3089\u3092\u4f7f\u3046\u3002\n\n\n# \u304a\u308f\u308a\u306b\n\u3053\u306e\u3088\u3046\u306b\u3001\u57fa\u672c\u7684\u306a\u691c\u8a3c\u30e1\u30bd\u30c3\u30c9\u306f AssertJ \u306b\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001JUnit4 \u304b\u3089\u306e\u4e57\u308a\u63db\u3048\u3082\u53ef\u80fd\u3067\u3059\u3002\n\u53c2\u8003\u306b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u6b21\u56de\u306f \u30ab\u30b9\u30bf\u30e0 Assertion \u3084 SoftAssertions \u306a\u3069\u3092\u53d6\u308a\u4e0a\u3052\u308b\u4e88\u5b9a\u3067\u3059\u3002\n", "tags": ["Java", "assertj", "JUnit", "junit4"]}