{"context": " More than 1 year has passed since last update.\n\nTL;DR\n\u3053\u306e\u30da\u30fc\u30b8\u3067\u8a66\u305b\u307e\u3059\u3002http://handwritten-classifier.app.ginrou.com/\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3053\u3053\u306b\u3042\u308a\u307e\u3059\u3002https://github.com/ginrou/handwritten_classifier\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\n\u5168\u4f53\u306e\u69cb\u6210\n\u5165\u529b\u3055\u308c\u305f\u753b\u50cf\u3092\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u304b\u3051\u3066\u3001\u3069\u306e\u6570\u5b57\u304c\u5165\u529b\u3055\u308c\u305f\u304b\u3092\u51fa\u529b\u3059\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3059\u3002\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3053\u308c\u3092\u30d9\u30fc\u30b9\u306b\u3057\u3066\u3044\u307e\u3059\u3002handwritten_classifier\n\n\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u3088\u308b\u8a8d\u8b58\u3068\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5b66\u7fd2\u3092\u884c\u3046\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\n\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u4f7f\u3046Web\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\nPython3.x, numpy\u3068flask\u306b\u4f9d\u5b58\n\n\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304c\u898b\u305f\u3044\u3001Web\u30a2\u30d7\u30ea\u304b\u3089\u30b5\u30af\u30c3\u3068\u4f7f\u3044\u305f\u3044\u3001\u3068\u3044\u3046\u65b9\u306b\u3068\u3063\u3066\u53c2\u8003\u306b\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5b9f\u88c5\n\u5165\u529b\u5c64-\u96a0\u308c\u5c64-\u51fa\u529b\u5c64 \u304b\u3089\u306a\u308b\u4e00\u822c\u7684\u306a\uff13\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3067\u3059\u3002\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u306f\u53d6\u308a\u6271\u3063\u3066\u3044\u307e\u305b\u3093\u3002\u6d3b\u6027\u5316\u95a2\u6570\u306b\u306f\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u3092\u7528\u3044\u3066\u3044\u307e\u3059\u3002\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u8a73\u7d30\u306a\u3069\u306f\u4ee5\u4e0b\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3067\u624b\u66f8\u304d\u6570\u5b57\u8a8d\u8b58 - \u4eba\u5de5\u77e5\u80fd\u306b\u95a2\u3059\u308b\u65ad\u5275\u9332\n\u8aa4\u5dee\u9006\u4f1d\u64ad\u6cd5\uff08\u30d0\u30c3\u30af\u30fb\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\uff09\n\u6751\u4e0a\u30fb\u6cc9\u7530\u7814\u7a76\u5ba4 \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\n\n\u6982\u8981\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u753b\u50cf\u306e(0,0)\u304b\u3089\u9806\u306b(W,H)\u307e\u3067\u30921\u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\u306b\u3057\u3001\u5b9a\u6570\u9805\u3092\u52a0\u3048\u3066\u5165\u529b\u4fe1\u53f7xx{\\bf x}\u3068\u3057\u307e\u3059\u3002\nxx{\\bf x} \u306b\u91cd\u307f w1i,jw1i,jw^1_{i,j} \u3092\u4e57\u3058\u3066\u96a0\u308c\u5c64\u3078\u306e\u5165\u529b zin,izin,iz_{in,i} \u3068\u3057\u307e\u3059\u3002\n\u3053\u308c\u306b\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u3092\u304b\u3051\u305f\u3082\u306e\u304c\u96a0\u308c\u5c64\u306e\u51fa\u529b\u3068\u306a\u308a\u307e\u3059\u3002\nz_{in,i} = \\sum_{j=0}^{N} w^1_{i,j} x_j \\\\\nz_{out,i} = sigmoid(z_{in,i})\nzin,i=N\u2211j=0w1i,jxjzout,i=sigmoid(zin,i)zin,i=\u2211j=0Nw1i,jxjzout,i=sigmoid(zin,i){z_{in,i} = \\sum_{j=0}^{N} w^1_{i,j} x_j \\\\\nz_{out,i} = sigmoid(z_{in,i})\n}\n\u3055\u3089\u306b\u96a0\u308c\u5c64\u306e\u51fa\u529b zout,iz_{out,i} \u306b\u91cd\u307f w2i,jw^2_{i,j} \u3092\u4e57\u3058\u305f\u3082\u306e\u304c\u51fa\u529b\u5c64\u3078\u306e\u5165\u529b yin,iy_{in,i} \u3068\u306a\u308a, \u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u3092\u304b\u3051\u305f\u3082\u306e\u304c\u6700\u7d42\u7684\u306a\u51fa\u529b yout,iy_{out,i}\u3068\u306a\u308a\u307e\u3059\u3002\ny_{in,i} = \\sum_{j=0}^{N} w^2_{i,j} z_{out,j} \\\\\ny_{out,i} = sigmoid(y_{in,i})\nyin,i=N\u2211j=0w2i,jzout,jyout,i=sigmoid(yin,i){y_{in,i} = \\sum_{j=0}^{N} w^2_{i,j} z_{out,j} \\\\\ny_{out,i} = sigmoid(y_{in,i})\n}\n\u51fa\u529b\u3055\u308c\u308b{\\bf y}\u306f10\u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u4e2d\u3067\u6700\u3082\u51fa\u529b\u5024\u304c\u5927\u304d\u3044\u3082\u306e\u304c\u63a8\u5b9a\u7d50\u679c\u3068\u306a\u308a\u307e\u3059\u3002\n\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5909\u6570\u306f\u91cd\u307f w1,w2{\\bf w^1},{\\bf w^2} \u3067\u3059\u3002\u305d\u306e\u5024\u3092\u5b66\u7fd2\u3057\u307e\u3059\u3002\n\u307e\u3068\u3081\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u5b66\u7fd2\u3057\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u66f8\u304d\u8fbc\u307f\uff0f\u8aad\u307f\u8fbc\u307f\u3082\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/ginrou/handwritten_classifier/blob/master/NeuralNetwork.py\n\nNeuralNetwork.py\n\n\n#!/usr/bin/env python\n\nfrom math import exp\nimport numpy\n\ndef sigmoid(x):\n    return 1.0 / (1.0 + exp(-x))\n\ndef sigmoid_a(array):\n    return numpy.vectorize(sigmoid)(array)\n\nclass NeuralNetwork:\n    def __init__(self, in_size, hidden_size, out_size):\n        self.hidden_weight = 0.1 * (numpy.random.random_sample((hidden_size, in_size+1)) - 0.5)\n        self.output_weight = 0.1 * (numpy.random.random_sample((out_size, hidden_size+1)) - 0.5)\n\n    def fit(self, x, t, update_ratio = 0.1):\n        z, y = self.fire(x)\n        dy = ( y - t ) *y * ( 1 - y )\n        dz = (self.output_weight.T.dot(dy))[1:] * z * ( 1- z )\n\n        output_input = numpy.r_[ numpy.array([1]), z ]\n        self.output_weight -= update_ratio * dy.reshape(-1,1) * output_input\n\n        hidden_input = numpy.r_[ numpy.array([1]), x ]\n        self.hidden_weight -= update_ratio * dz.reshape(-1,1) * hidden_input\n\n    def fire(self, x):\n        z = sigmoid_a(self.hidden_weight.dot(numpy.r_[ numpy.array([1]), x ]))\n        y = sigmoid_a(self.output_weight.dot(numpy.r_[ numpy.array([1]), z ]))\n        return (z, y)\n\n    def predicate(self, x):\n        z, y = self.fire(x)\n        return numpy.array(y).argmax()\n\n    def save(self, filepath):\n        numpy.savez(filepath, hidden = self.hidden_weight, output = self.output_weight)\n\n    def load(self, filepath):\n        npzfiles = numpy.load(filepath)\n        self.hidden_weight = npzfiles['hidden']\n        self.output_weight = npzfiles['output']\n\n\n\n\u5b66\u7fd2\n\u3053\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5b66\u7fd2\u3092\u884c\u3044\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306fMNIST\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u5229\u7528\u3057\u307e\u3057\u305f\u3002\u751f\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30d1\u30fc\u30b9\u3059\u308b\u306e\u304c\u9762\u5012\u306a\u306e\u3067 http://deeplearning.net/tutorial/gettingstarted.html \u306bPickle\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u3057\u3066\u3042\u308b\u3082\u306e\u304c\u3042\u308b\u306e\u3067\u3053\u308c\u3092\u5229\u7528\u3057\u307e\u3057\u305f\u3002\n\u3053\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5165\u529b\u753b\u50cf\u306e\u30b5\u30a4\u30ba\u306f 28x28 \u306a\u306e\u3067\u3001\u5165\u529b\u5c64\u306e\u30b5\u30a4\u30ba\u306f784\u6b21\u5143\u3001\u51fa\u529b\u5c64\u306f0~9\u306e\u6570\u5b57\u3092\u8a8d\u8b58\u3059\u308b\u306e\u306710\u6b21\u5143\u3001\u4e2d\u9593\u5c64\u306f\u9069\u5f53\u306b300\u6b21\u5143\u3068\u3057\u307e\u3057\u305f\u3002\n\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u542b\u307e\u308c\u3066\u3044\u308bhandwritten_classifier.py\u3067\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\nMNIST\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c850000\u70b9\u306e\u5b66\u7fd2\u306b\u304a\u3088\u305d2~3\u5206\u3001\u7cbe\u5ea6\u306f92.52%\u3067\u3057\u305f\u3002\n\nWeb\u30a2\u30d7\u30ea\u304b\u3089\u4f7f\u3046\n\u3053\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u7528\u3044\u305f\u6570\u5b57\u8a8d\u8b58\u30b7\u30b9\u30c6\u30e0\u3092\u30d6\u30e9\u30a6\u30b6\u304b\u3089\u4f7f\u3044\u307e\u3059\u3002\n\u30a2\u30a4\u30c7\u30a2\u306f\n\ncanvas\u306b\u6570\u5b57\u63cf\u304f\ncanvas\u3092\u753b\u50cf\u306b\u5909\u63db\u3057\u3066\u8f1d\u5ea6\u5024\u3092\u5f97\u308b\n\u8f1d\u5ea6\u5024\u3092ajax\u3067\u9001\u3063\u3066\u8a8d\u8b58\u3059\u308b\n\n\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3067\u3059\u3002\nhandwritten_classifier\u3067\u306fFlask\u3092\u4f7f\u3063\u3066Web\u306e\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u3092\u4f5c\u3063\u3066\u3044\u307e\u3059\u3002\nJS\u3067canvas\u304b\u3089\u753b\u50cf\u306e\u8f1d\u5ea6\u5024\u3092\u5f97\u3066\u9001\u4fe1\u3059\u308b\u306e\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\nvar estimate = function(context) {\n   var img_buf = getImageBuffer(context, 28, 28);\n    $.ajax({\n        type:\"post\",\n        url:\"/estimate\",\n        data: JSON.stringify({\"input\": img_buf}),\n        contentType: 'application/json',\n        success: function(result) {\n            $(\"#estimated\").text(\"Estimated = \" + result.estimated);\n        }\n    });\n};\n\nvar getImageBuffer = function(context, width, height) {\n    var tmpCanvas = $('<canvas>').get(0);\n    tmpCanvas.width = width;\n    tmpCanvas.height = height;\n    var tmpContext = tmpCanvas.getContext('2d');\n    tmpContext.drawImage(context.canvas, 0, 0, width, height);\n    var image = tmpContext.getImageData(0,0,width,height);\n    var buffer = []\n    for( var i = 0; i < image.data.length; i += 4 ) {\n        var sum = image.data[i+0] + image.data[i+1] + image.data[i+2] + image.data[i+3];\n        buffer.push(Math.min(sum,255));\n    }\n    return buffer;\n};\n\n\u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba\u304c28x28\u3060\u3068\u5c0f\u3055\u3059\u304e\u308b\u306e\u3067\u3001\u5927\u304d\u3081\u306e\u30ad\u30e3\u30f3\u30d0\u30b9\u306b\u30d6\u30e9\u30a6\u30b6\u4e0a\u3067\u306f\u63cf\u753b\u3057\u3001\n\u305d\u306e\u5f8c\u7e2e\u5c0f\u3057\u307e\u3059\u3002\n\u9001\u4fe1\u3055\u308c\u308bjson\u306f\n{\"input\":[0,0,255,255,,,,255]}\n\n\u3053\u3093\u306a\u611f\u3058\u3002\nFlask\u3067\u53d7\u3051\u308b\u306e\u306f\u3053\u3046\u3044\u3046\u611f\u3058\u3067\u3059\n@app.route(\"/estimate\", methods = [\"POST\"])\ndef estimate():\n    try:\n        x = numpy.array(request.json[\"input\"]) / 255.0\n        y = int(nn.predicate(x))\n        return jsonify({\"estimated\":y})\n    except Exception as e:\n        print(e)\n        return jsonify({\"error\":e})\n\n\u5148\u7a0b\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u3067\n$ python app.py\n\n\u307f\u305f\u3044\u306b\u3059\u308b\u3068\u3001http://localhost:5000 \u3067\u8a66\u305b\u307e\u3059\u3002\n\nDocker\n\u30ce\u30ea\u3067Docker\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u306e\u3067\nhttps://registry.hub.docker.com/u/ginrou/handwritten-classifier/\n\u3067\u4f7f\u3048\u307e\u3059\u3002\u3055\u304f\u3063\u3068\u8a66\u3057\u305f\u3044\u5834\u5408\u306fheroku\u3068\u304b\u306bdeploy\u3059\u308b\u3068\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u96d1\u611f\nPython\u3067\u66f8\u304f\u3068\u3053\u3093\u306a\u306b\u77ed\u304f\u66f8\u3051\u308b\uff01\nWeb\u30a2\u30d7\u30ea\u3001\u610f\u5916\u306b\u8a8d\u8b58\u7cbe\u5ea6\u60aa\u3044\n### TL;DR\n\u3053\u306e\u30da\u30fc\u30b8\u3067\u8a66\u305b\u307e\u3059\u3002[http://handwritten-classifier.app.ginrou.com/](http://handwritten-classifier.app.ginrou.com/)\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3053\u3053\u306b\u3042\u308a\u307e\u3059\u3002[https://github.com/ginrou/handwritten_classifier](https://github.com/ginrou/handwritten_classifier)\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2014-12-01 23.18.43.png](https://qiita-image-store.s3.amazonaws.com/0/15582/bf6f718d-d0f8-d0b7-f5b1-79b7ded2cca2.png)\n\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\n### \u5168\u4f53\u306e\u69cb\u6210\n\u5165\u529b\u3055\u308c\u305f\u753b\u50cf\u3092\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u304b\u3051\u3066\u3001\u3069\u306e\u6570\u5b57\u304c\u5165\u529b\u3055\u308c\u305f\u304b\u3092\u51fa\u529b\u3059\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3059\u3002\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3053\u308c\u3092\u30d9\u30fc\u30b9\u306b\u3057\u3066\u3044\u307e\u3059\u3002[handwritten_classifier](https://github.com/ginrou/handwritten_classifier)\n\n* \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u3088\u308b\u8a8d\u8b58\u3068\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5b66\u7fd2\u3092\u884c\u3046\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\n* \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u4f7f\u3046Web\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\n* Python3.x, numpy\u3068flask\u306b\u4f9d\u5b58\n\n\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304c\u898b\u305f\u3044\u3001Web\u30a2\u30d7\u30ea\u304b\u3089\u30b5\u30af\u30c3\u3068\u4f7f\u3044\u305f\u3044\u3001\u3068\u3044\u3046\u65b9\u306b\u3068\u3063\u3066\u53c2\u8003\u306b\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n### \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5b9f\u88c5\n\u5165\u529b\u5c64-\u96a0\u308c\u5c64-\u51fa\u529b\u5c64 \u304b\u3089\u306a\u308b\u4e00\u822c\u7684\u306a\uff13\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3067\u3059\u3002\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u306f\u53d6\u308a\u6271\u3063\u3066\u3044\u307e\u305b\u3093\u3002\u6d3b\u6027\u5316\u95a2\u6570\u306b\u306f\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u3092\u7528\u3044\u3066\u3044\u307e\u3059\u3002\n\n\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u8a73\u7d30\u306a\u3069\u306f\u4ee5\u4e0b\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002\n\n* [\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3067\u624b\u66f8\u304d\u6570\u5b57\u8a8d\u8b58 - \u4eba\u5de5\u77e5\u80fd\u306b\u95a2\u3059\u308b\u65ad\u5275\u9332](http://aidiary.hatenablog.com/entry/20140201/1391218771)\n* [\u8aa4\u5dee\u9006\u4f1d\u64ad\u6cd5\uff08\u30d0\u30c3\u30af\u30fb\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\uff09](http://www.sist.ac.jp/~kanakubo/research/neuro/backpropagation.html)\n* [\u6751\u4e0a\u30fb\u6cc9\u7530\u7814\u7a76\u5ba4 \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af](http://ipr20.cs.ehime-u.ac.jp/column/neural/chapter6.html)\n\n\u6982\u8981\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n![neuralnetwork.png](https://qiita-image-store.s3.amazonaws.com/0/15582/61b2ba68-f382-e28b-96db-e900f20c3eac.png)\n\n\u753b\u50cf\u306e(0,0)\u304b\u3089\u9806\u306b(W,H)\u307e\u3067\u30921\u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\u306b\u3057\u3001\u5b9a\u6570\u9805\u3092\u52a0\u3048\u3066\u5165\u529b\u4fe1\u53f7${\\bf x}$\u3068\u3057\u307e\u3059\u3002\n\n${\\bf x}$ \u306b\u91cd\u307f $w^1_{i,j}$ \u3092\u4e57\u3058\u3066\u96a0\u308c\u5c64\u3078\u306e\u5165\u529b $z_{in,i}$ \u3068\u3057\u307e\u3059\u3002\n\u3053\u308c\u306b\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u3092\u304b\u3051\u305f\u3082\u306e\u304c\u96a0\u308c\u5c64\u306e\u51fa\u529b\u3068\u306a\u308a\u307e\u3059\u3002\n\n```math\nz_{in,i} = \\sum_{j=0}^{N} w^1_{i,j} x_j \\\\\nz_{out,i} = sigmoid(z_{in,i})\n```\n\n\u3055\u3089\u306b\u96a0\u308c\u5c64\u306e\u51fa\u529b $z_{out,i}$ \u306b\u91cd\u307f $w^2_{i,j}$ \u3092\u4e57\u3058\u305f\u3082\u306e\u304c\u51fa\u529b\u5c64\u3078\u306e\u5165\u529b $y_{in,i}$ \u3068\u306a\u308a, \u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u3092\u304b\u3051\u305f\u3082\u306e\u304c\u6700\u7d42\u7684\u306a\u51fa\u529b $y_{out,i}$\u3068\u306a\u308a\u307e\u3059\u3002\n\n```math\ny_{in,i} = \\sum_{j=0}^{N} w^2_{i,j} z_{out,j} \\\\\ny_{out,i} = sigmoid(y_{in,i})\n```\n\n\u51fa\u529b\u3055\u308c\u308b{\\bf y}\u306f10\u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u4e2d\u3067\u6700\u3082\u51fa\u529b\u5024\u304c\u5927\u304d\u3044\u3082\u306e\u304c\u63a8\u5b9a\u7d50\u679c\u3068\u306a\u308a\u307e\u3059\u3002\n\n\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5909\u6570\u306f\u91cd\u307f ${\\bf w^1},{\\bf w^2}$ \u3067\u3059\u3002\u305d\u306e\u5024\u3092\u5b66\u7fd2\u3057\u307e\u3059\u3002\n\u307e\u3068\u3081\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u5b66\u7fd2\u3057\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u66f8\u304d\u8fbc\u307f\uff0f\u8aad\u307f\u8fbc\u307f\u3082\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\n\nhttps://github.com/ginrou/handwritten_classifier/blob/master/NeuralNetwork.py\n\n```py:NeuralNetwork.py\n\n\n#!/usr/bin/env python\n\nfrom math import exp\nimport numpy\n\ndef sigmoid(x):\n    return 1.0 / (1.0 + exp(-x))\n\ndef sigmoid_a(array):\n    return numpy.vectorize(sigmoid)(array)\n\nclass NeuralNetwork:\n    def __init__(self, in_size, hidden_size, out_size):\n        self.hidden_weight = 0.1 * (numpy.random.random_sample((hidden_size, in_size+1)) - 0.5)\n        self.output_weight = 0.1 * (numpy.random.random_sample((out_size, hidden_size+1)) - 0.5)\n\n    def fit(self, x, t, update_ratio = 0.1):\n        z, y = self.fire(x)\n        dy = ( y - t ) *y * ( 1 - y )\n        dz = (self.output_weight.T.dot(dy))[1:] * z * ( 1- z )\n\n        output_input = numpy.r_[ numpy.array([1]), z ]\n        self.output_weight -= update_ratio * dy.reshape(-1,1) * output_input\n\n        hidden_input = numpy.r_[ numpy.array([1]), x ]\n        self.hidden_weight -= update_ratio * dz.reshape(-1,1) * hidden_input\n\n    def fire(self, x):\n        z = sigmoid_a(self.hidden_weight.dot(numpy.r_[ numpy.array([1]), x ]))\n        y = sigmoid_a(self.output_weight.dot(numpy.r_[ numpy.array([1]), z ]))\n        return (z, y)\n\n    def predicate(self, x):\n        z, y = self.fire(x)\n        return numpy.array(y).argmax()\n\n    def save(self, filepath):\n        numpy.savez(filepath, hidden = self.hidden_weight, output = self.output_weight)\n\n    def load(self, filepath):\n        npzfiles = numpy.load(filepath)\n        self.hidden_weight = npzfiles['hidden']\n        self.output_weight = npzfiles['output']\n```\n\n### \u5b66\u7fd2\n\u3053\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5b66\u7fd2\u3092\u884c\u3044\u307e\u3059\u3002\n\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f[MNIST\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8](http://yann.lecun.com/exdb/mnist/)\u3092\u5229\u7528\u3057\u307e\u3057\u305f\u3002\u751f\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30d1\u30fc\u30b9\u3059\u308b\u306e\u304c\u9762\u5012\u306a\u306e\u3067 [http://deeplearning.net/tutorial/gettingstarted.html](http://deeplearning.net/tutorial/gettingstarted.html) \u306bPickle\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u3057\u3066\u3042\u308b\u3082\u306e\u304c\u3042\u308b\u306e\u3067\u3053\u308c\u3092\u5229\u7528\u3057\u307e\u3057\u305f\u3002\n\n\u3053\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5165\u529b\u753b\u50cf\u306e\u30b5\u30a4\u30ba\u306f 28x28 \u306a\u306e\u3067\u3001\u5165\u529b\u5c64\u306e\u30b5\u30a4\u30ba\u306f784\u6b21\u5143\u3001\u51fa\u529b\u5c64\u306f0~9\u306e\u6570\u5b57\u3092\u8a8d\u8b58\u3059\u308b\u306e\u306710\u6b21\u5143\u3001\u4e2d\u9593\u5c64\u306f\u9069\u5f53\u306b300\u6b21\u5143\u3068\u3057\u307e\u3057\u305f\u3002\n\n[\u30ea\u30dd\u30b8\u30c8\u30ea](https://github.com/ginrou/handwritten_classifier/)\u306b\u542b\u307e\u308c\u3066\u3044\u308b[handwritten_classifier.py](https://github.com/ginrou/handwritten_classifier/blob/master/handwritten_classifier.py)\u3067\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\n\nMNIST\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c850000\u70b9\u306e\u5b66\u7fd2\u306b\u304a\u3088\u305d2~3\u5206\u3001\u7cbe\u5ea6\u306f92.52%\u3067\u3057\u305f\u3002\n\n### Web\u30a2\u30d7\u30ea\u304b\u3089\u4f7f\u3046\n\u3053\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u7528\u3044\u305f\u6570\u5b57\u8a8d\u8b58\u30b7\u30b9\u30c6\u30e0\u3092\u30d6\u30e9\u30a6\u30b6\u304b\u3089\u4f7f\u3044\u307e\u3059\u3002\n\u30a2\u30a4\u30c7\u30a2\u306f\n\n* canvas\u306b\u6570\u5b57\u63cf\u304f\n* canvas\u3092\u753b\u50cf\u306b\u5909\u63db\u3057\u3066\u8f1d\u5ea6\u5024\u3092\u5f97\u308b\n* \u8f1d\u5ea6\u5024\u3092ajax\u3067\u9001\u3063\u3066\u8a8d\u8b58\u3059\u308b\n\n\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3067\u3059\u3002\n[handwritten_classifier](https://github.com/ginrou/handwritten_classifier/)\u3067\u306fFlask\u3092\u4f7f\u3063\u3066Web\u306e\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u3092\u4f5c\u3063\u3066\u3044\u307e\u3059\u3002\n\nJS\u3067canvas\u304b\u3089\u753b\u50cf\u306e\u8f1d\u5ea6\u5024\u3092\u5f97\u3066\u9001\u4fe1\u3059\u308b\u306e\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\n```js\nvar estimate = function(context) {\n   var img_buf = getImageBuffer(context, 28, 28);\n    $.ajax({\n        type:\"post\",\n        url:\"/estimate\",\n        data: JSON.stringify({\"input\": img_buf}),\n        contentType: 'application/json',\n        success: function(result) {\n            $(\"#estimated\").text(\"Estimated = \" + result.estimated);\n        }\n    });\n};\n\nvar getImageBuffer = function(context, width, height) {\n    var tmpCanvas = $('<canvas>').get(0);\n    tmpCanvas.width = width;\n    tmpCanvas.height = height;\n    var tmpContext = tmpCanvas.getContext('2d');\n    tmpContext.drawImage(context.canvas, 0, 0, width, height);\n    var image = tmpContext.getImageData(0,0,width,height);\n    var buffer = []\n    for( var i = 0; i < image.data.length; i += 4 ) {\n        var sum = image.data[i+0] + image.data[i+1] + image.data[i+2] + image.data[i+3];\n        buffer.push(Math.min(sum,255));\n    }\n    return buffer;\n};\n```\n\u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba\u304c28x28\u3060\u3068\u5c0f\u3055\u3059\u304e\u308b\u306e\u3067\u3001\u5927\u304d\u3081\u306e\u30ad\u30e3\u30f3\u30d0\u30b9\u306b\u30d6\u30e9\u30a6\u30b6\u4e0a\u3067\u306f\u63cf\u753b\u3057\u3001\n\u305d\u306e\u5f8c\u7e2e\u5c0f\u3057\u307e\u3059\u3002\n\n\u9001\u4fe1\u3055\u308c\u308bjson\u306f\n\n```json\n{\"input\":[0,0,255,255,,,,255]}\n```\n\n\u3053\u3093\u306a\u611f\u3058\u3002\n\nFlask\u3067\u53d7\u3051\u308b\u306e\u306f\u3053\u3046\u3044\u3046\u611f\u3058\u3067\u3059\n\n```py\n@app.route(\"/estimate\", methods = [\"POST\"])\ndef estimate():\n    try:\n        x = numpy.array(request.json[\"input\"]) / 255.0\n        y = int(nn.predicate(x))\n        return jsonify({\"estimated\":y})\n    except Exception as e:\n        print(e)\n        return jsonify({\"error\":e})\n```\n\n\u5148\u7a0b\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u3067\n\n```bash\n$ python app.py\n```\n\n\u307f\u305f\u3044\u306b\u3059\u308b\u3068\u3001`http://localhost:5000` \u3067\u8a66\u305b\u307e\u3059\u3002\n\n#### Docker\n\u30ce\u30ea\u3067Docker\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u306e\u3067\nhttps://registry.hub.docker.com/u/ginrou/handwritten-classifier/\n\u3067\u4f7f\u3048\u307e\u3059\u3002\u3055\u304f\u3063\u3068\u8a66\u3057\u305f\u3044\u5834\u5408\u306fheroku\u3068\u304b\u306bdeploy\u3059\u308b\u3068\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n### \u96d1\u611f\nPython\u3067\u66f8\u304f\u3068\u3053\u3093\u306a\u306b\u77ed\u304f\u66f8\u3051\u308b\uff01\nWeb\u30a2\u30d7\u30ea\u3001\u610f\u5916\u306b\u8a8d\u8b58\u7cbe\u5ea6\u60aa\u3044\n", "tags": ["Python", "\u6a5f\u68b0\u5b66\u7fd2", "ComputerVision"]}