{"tags": ["cocos2d-x"], "context": " More than 1 year has passed since last update.\n\nCCObject\u304b\u3089JSON\u3092\u4f5c\u6210\u3057\u307e\u3059\uff08cocos2d-x ver2.2.1\uff09\n\u524d\u56de\u306fJSON\u3092\u30d1\u30fc\u30b9\u3059\u308b\u65b9\u6cd5\u3092\u6295\u7a3f\u3057\u305f\u306e\u3067\u3001\u4eca\u56de\u306f\u305d\u306e\u9006\u3067CCObject\u304b\u3089JSON\u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u3092\u6295\u7a3f\u3057\u307e\u3059\u3002\n\u6298\u89d2cocos2d-x\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u306e\u3060\u304b\u3089CCObject\u304b\u3089JSON\u3092\u4f5c\u308c\u305f\u3089\u826f\u3044\u306a\u3068\u601d\u3044\u691c\u7d22\u3057\u3066\u3044\u305f\u3089\u3001\u4e0b\u8a18\u306e\u8a18\u4e8b\u3092\u898b\u3064\u3051\u307e\u3057\u305f\u3002\nCCObject\u306e\u60c5\u5831\u3092\u51fa\u529b\u3059\u308b\n\u4e0a\u8a18\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3001\u3059\u3050\u306bCCLog\u3067\u51fa\u529b\u3059\u308b\u306e\u3067\u306f\u306a\u304fstream\u306b\u6e9c\u3081\u8fbc\u3093\u3067\u8fd4\u3059\u3088\u3046\u306a\u611f\u3058\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u306e\u306fCCString\u3001CCInteger\u3001CCFloat\u3001CCBool\u3001CCArray\u3001CCDictionary\u306b\u5bfe\u5fdc\u3057\u3066\u304a\u308a\u3001\u5165\u308c\u5b50\u69cb\u9020\u306b\u3082\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u8a2d\u8a08\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u5c1a\u3001\u51fa\u529b\u3055\u308c\u305fJSON\u3092CCLog\u3067\u8868\u793a\u3059\u308b\u3068\u4e2d\u8eab\u304c\u3061\u3083\u3093\u3068\u5165\u3063\u3066\u3044\u308b\u304b\u78ba\u8a8d\u51fa\u6765\u308b\u306e\u3067\u3001CCObject\u306e\u7c21\u6613\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d3\u30e5\u30fc\u30a2\u3068\u3057\u3066\u3082\u5229\u7528\u51fa\u6765\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n#define OutputCCObject( obj )   ( outputObject( obj , \"\") )\n\nconst char* outputObject(CCObject* obj, const char* key);\n\ninline const char* outputArray(CCArray* array)\n{\n    std::ostringstream stream;\n    stream << \"[\";\n\n    for(int i = 0 ; i < array->count(); ++i)\n    {\n        CCObject* value = array->objectAtIndex(i);\n\n        stream << outputObject(value, \"\");\n\n        if(i != array->count() - 1) {\n            stream << \",\";\n        }\n    }\n\n    stream << \"]\";\n    return stream.str().c_str();\n}\n\ninline const char* outputDictionary(CCDictionary* dictionary)\n{\n    std::ostringstream stream;\n    stream << \"{\";\n\n    CCArray* allKeys = dictionaryAllKeys(dictionary);\n    CCObject* obj;\n    int i = 0;\n    CCARRAY_FOREACH(allKeys, obj)\n    {\n        CCString* key = (CCString*)obj;\n\n        CCObject* value = dictionary->objectForKey(key->getCString());\n\n        stream << outputObject(value, key->getCString());\n\n        if(i++ != allKeys->count() - 1) {\n            stream << \",\";\n        }\n    }\n\n    delete allKeys;\n\n    stream << \"}\";\n    return stream.str().c_str();\n}\n\ninline const char* outputObject(CCObject* obj, const char* key)\n{\n    std::ostringstream stream;\n    std::ostringstream initialStream;\n\n    if(strlen(key) != 0)\n    {\n        initialStream << \"\\\"\" << key << \"\\\":\";\n    }\n\n    if(typeid(*obj) == typeid(CCString))\n    {\n        stream << initialStream.str() << \"\\\"\" << ((CCString*)obj)->getCString() << \"\\\"\";\n    }\n    else if(typeid(*obj) == typeid(CCInteger))\n    {\n        stream << initialStream.str() << ((CCInteger*)obj)->getValue();\n    }\n    else if(typeid(*obj) == typeid(CCFloat))\n    {\n        stream << initialStream.str() << ((CCFloat*)obj)->getValue();\n    }\n    else if(typeid(*obj) == typeid(CCBool))\n    {\n        if( ((CCBool*)obj)->getValue())\n        {\n            stream << initialStream.str() << \"true\";\n        } else {\n            stream << initialStream.str() << \"false\";\n        }\n    }\n    else if(typeid(*obj) == typeid(CCArray))\n    {\n        stream << initialStream.str() << outputArray((CCArray*)obj);\n    }\n    else if(typeid(*obj) == typeid(CCDictionary))\n    {\n        stream << initialStream.str() << outputDictionary((CCDictionary*)obj);\n    }\n    else\n    {\n        stream << initialStream.str() << typeid(obj).name();\n    }\n\n    return stream.str().c_str();\n}\n\nOutputCCObject( obj ) \u306f const char* \u3092\u8fd4\u3057\u307e\u3059\u306e\u3067\u3001\u30b1\u30fc\u30b9\u306b\u3088\u3063\u3066\u306fstring\u7b49\u306b\u4fdd\u5b58\u3057\u305f\u308a\u3057\u3066\u4e0b\u3055\u3044\u3002\n\u4e0b\u8a18\u306e\u4f8b\u3067\u306fCCLog\u306b\u51fa\u529b\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u306e\u307e\u307e\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\u203bCCObject\u306ecreate\u3092\u4f7f\u7528\u3059\u308b\u969b\u306f\u30e1\u30e2\u30ea\u7ba1\u7406\u306b\u6c17\u3092\u3064\u3051\u3066\u4e0b\u3055\u3044\u3002\n\u4f8b) \u3053\u308c\u306f\u3042\u304f\u307e\u3067\u3082\u4f8b\u3067\u3059\u306e\u3067\u3001\u5b9f\u969b\u306bCCArray\u3084CCDictionary\u3067\u4f7f\u3046\u5834\u5408\u306fretain\u3092\u9069\u5207\u306b\u3059\u308b\u304b\u3001new\u3067\u4f5c\u6210\u3057\u3066\u4e0b\u3055\u3044\u3002\n    CCEGLView* view = CCDirector::sharedDirector()->getOpenGLView();\n    CCSize frameSize = view->getFrameSize();\n\n    CCDictionary* paramDic = CCDictionary::create();\n    paramDic->setObject(CCString::create(\"ABCD\"), \"uuid\");\n    paramDic->setObject(CCFloat::create(1.1), \"version\");\n\n    CCArray* mainArray = CCArray::create();\n    mainArray->addObject(CCBool::create(false));\n    mainArray->addObject(CCString::create(\"dummy\"));\n\n    CCDictionary* arrayDic = CCDictionary::create();\n    CCArray* subArray = CCArray::create(CCInteger::create(4), CCString::create(\"test\"));\n\n    arrayDic->setObject(subArray, \"subarray\");\n    mainArray->addObject(arrayDic);\n    paramDic->setObject(mainArray, \"mainarray\");\n\n    CCDictionary* sizeDic = new CCDictionary();\n    sizeDic->setObject(CCFloat::create(frameSize.width), \"width\");\n    sizeDic->setObject(CCFloat::create(frameSize.height), \"height\");\n    sizeDic->setObject(CCBool::create(true), \"ios\");\n    paramDic->setObject(sizeDic, \"screen\");\n\n    CCLog(\"OutputCCObject = %s\", OutputCCObject(paramDic));\n\n\u7d50\u679c)\nOutputCCObject = {\"uuid\":\"ABCD\",\"version\":1.1,\"mainarray\":[false,\"dummy\",{\"subarray\":[4,\"test\",PN7cocos2d8CCObjectE]}],\"screen\":{\"width\":640,\"height\":1136,\"ios\":true}}\n\n\u4eca\u56de\u306f std::ostringstream \u3092\u4f7f\u3044\u307e\u3057\u305f\u304c\u3001\u4ed6\u306b\u3082\u3082\u3063\u3068\u826f\u3044\u65b9\u6cd5\u304c\u3042\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3082\u3057\u826f\u3044\u30a2\u30a4\u30c7\u30a3\u30a2\u304c\u3042\u3063\u305f\u3089\u6559\u3048\u3066\u4e0b\u3055\u3044\u3002\n\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n#CCObject\u304b\u3089JSON\u3092\u4f5c\u6210\u3057\u307e\u3059\uff08cocos2d-x ver2.2.1\uff09\n\n\u524d\u56de\u306fJSON\u3092\u30d1\u30fc\u30b9\u3059\u308b\u65b9\u6cd5\u3092\u6295\u7a3f\u3057\u305f\u306e\u3067\u3001\u4eca\u56de\u306f\u305d\u306e\u9006\u3067CCObject\u304b\u3089JSON\u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u3092\u6295\u7a3f\u3057\u307e\u3059\u3002\n\n\u6298\u89d2cocos2d-x\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u306e\u3060\u304b\u3089CCObject\u304b\u3089JSON\u3092\u4f5c\u308c\u305f\u3089\u826f\u3044\u306a\u3068\u601d\u3044\u691c\u7d22\u3057\u3066\u3044\u305f\u3089\u3001\u4e0b\u8a18\u306e\u8a18\u4e8b\u3092\u898b\u3064\u3051\u307e\u3057\u305f\u3002\n[CCObject\u306e\u60c5\u5831\u3092\u51fa\u529b\u3059\u308b](http://qiita.com/e73ryo/items/347975cffede21f7a7a3)\n\n\u4e0a\u8a18\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3001\u3059\u3050\u306bCCLog\u3067\u51fa\u529b\u3059\u308b\u306e\u3067\u306f\u306a\u304fstream\u306b\u6e9c\u3081\u8fbc\u3093\u3067\u8fd4\u3059\u3088\u3046\u306a\u611f\u3058\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u306e\u306fCCString\u3001CCInteger\u3001CCFloat\u3001CCBool\u3001CCArray\u3001CCDictionary\u306b\u5bfe\u5fdc\u3057\u3066\u304a\u308a\u3001\u5165\u308c\u5b50\u69cb\u9020\u306b\u3082\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u8a2d\u8a08\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u5c1a\u3001\u51fa\u529b\u3055\u308c\u305fJSON\u3092CCLog\u3067\u8868\u793a\u3059\u308b\u3068\u4e2d\u8eab\u304c\u3061\u3083\u3093\u3068\u5165\u3063\u3066\u3044\u308b\u304b\u78ba\u8a8d\u51fa\u6765\u308b\u306e\u3067\u3001CCObject\u306e\u7c21\u6613\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d3\u30e5\u30fc\u30a2\u3068\u3057\u3066\u3082\u5229\u7528\u51fa\u6765\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n```cpp\n#define OutputCCObject( obj )   ( outputObject( obj , \"\") )\n\nconst char* outputObject(CCObject* obj, const char* key);\n\ninline const char* outputArray(CCArray* array)\n{\n    std::ostringstream stream;\n    stream << \"[\";\n    \n    for(int i = 0 ; i < array->count(); ++i)\n    {\n        CCObject* value = array->objectAtIndex(i);\n        \n        stream << outputObject(value, \"\");\n        \n        if(i != array->count() - 1) {\n            stream << \",\";\n        }\n    }\n    \n    stream << \"]\";\n    return stream.str().c_str();\n}\n\ninline const char* outputDictionary(CCDictionary* dictionary)\n{\n    std::ostringstream stream;\n    stream << \"{\";\n    \n    CCArray* allKeys = dictionaryAllKeys(dictionary);\n    CCObject* obj;\n    int i = 0;\n    CCARRAY_FOREACH(allKeys, obj)\n    {\n        CCString* key = (CCString*)obj;\n        \n        CCObject* value = dictionary->objectForKey(key->getCString());\n        \n        stream << outputObject(value, key->getCString());\n        \n        if(i++ != allKeys->count() - 1) {\n            stream << \",\";\n        }\n    }\n\n    delete allKeys;\n    \n    stream << \"}\";\n    return stream.str().c_str();\n}\n\ninline const char* outputObject(CCObject* obj, const char* key)\n{\n    std::ostringstream stream;\n    std::ostringstream initialStream;\n    \n    if(strlen(key) != 0)\n    {\n        initialStream << \"\\\"\" << key << \"\\\":\";\n    }\n    \n    if(typeid(*obj) == typeid(CCString))\n    {\n        stream << initialStream.str() << \"\\\"\" << ((CCString*)obj)->getCString() << \"\\\"\";\n    }\n    else if(typeid(*obj) == typeid(CCInteger))\n    {\n        stream << initialStream.str() << ((CCInteger*)obj)->getValue();\n    }\n    else if(typeid(*obj) == typeid(CCFloat))\n    {\n        stream << initialStream.str() << ((CCFloat*)obj)->getValue();\n    }\n    else if(typeid(*obj) == typeid(CCBool))\n    {\n        if( ((CCBool*)obj)->getValue())\n        {\n            stream << initialStream.str() << \"true\";\n        } else {\n            stream << initialStream.str() << \"false\";\n        }\n    }\n    else if(typeid(*obj) == typeid(CCArray))\n    {\n        stream << initialStream.str() << outputArray((CCArray*)obj);\n    }\n    else if(typeid(*obj) == typeid(CCDictionary))\n    {\n        stream << initialStream.str() << outputDictionary((CCDictionary*)obj);\n    }\n    else\n    {\n        stream << initialStream.str() << typeid(obj).name();\n    }\n    \n    return stream.str().c_str();\n}\n```\n\nOutputCCObject( obj ) \u306f const char* \u3092\u8fd4\u3057\u307e\u3059\u306e\u3067\u3001\u30b1\u30fc\u30b9\u306b\u3088\u3063\u3066\u306fstring\u7b49\u306b\u4fdd\u5b58\u3057\u305f\u308a\u3057\u3066\u4e0b\u3055\u3044\u3002\n\u4e0b\u8a18\u306e\u4f8b\u3067\u306fCCLog\u306b\u51fa\u529b\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u306e\u307e\u307e\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\u203bCCObject\u306ecreate\u3092\u4f7f\u7528\u3059\u308b\u969b\u306f\u30e1\u30e2\u30ea\u7ba1\u7406\u306b\u6c17\u3092\u3064\u3051\u3066\u4e0b\u3055\u3044\u3002\n\n\u4f8b) \u3053\u308c\u306f\u3042\u304f\u307e\u3067\u3082\u4f8b\u3067\u3059\u306e\u3067\u3001\u5b9f\u969b\u306bCCArray\u3084CCDictionary\u3067\u4f7f\u3046\u5834\u5408\u306fretain\u3092\u9069\u5207\u306b\u3059\u308b\u304b\u3001new\u3067\u4f5c\u6210\u3057\u3066\u4e0b\u3055\u3044\u3002\n\n```cpp\n    CCEGLView* view = CCDirector::sharedDirector()->getOpenGLView();\n    CCSize frameSize = view->getFrameSize();\n    \n    CCDictionary* paramDic = CCDictionary::create();\n    paramDic->setObject(CCString::create(\"ABCD\"), \"uuid\");\n    paramDic->setObject(CCFloat::create(1.1), \"version\");\n    \n    CCArray* mainArray = CCArray::create();\n    mainArray->addObject(CCBool::create(false));\n    mainArray->addObject(CCString::create(\"dummy\"));\n    \n    CCDictionary* arrayDic = CCDictionary::create();\n    CCArray* subArray = CCArray::create(CCInteger::create(4), CCString::create(\"test\"));\n\n    arrayDic->setObject(subArray, \"subarray\");\n    mainArray->addObject(arrayDic);\n    paramDic->setObject(mainArray, \"mainarray\");\n    \n    CCDictionary* sizeDic = new CCDictionary();\n    sizeDic->setObject(CCFloat::create(frameSize.width), \"width\");\n    sizeDic->setObject(CCFloat::create(frameSize.height), \"height\");\n    sizeDic->setObject(CCBool::create(true), \"ios\");\n    paramDic->setObject(sizeDic, \"screen\");\n    \n    CCLog(\"OutputCCObject = %s\", OutputCCObject(paramDic));\n```\n\n\u7d50\u679c)\n\n```cpp\nOutputCCObject = {\"uuid\":\"ABCD\",\"version\":1.1,\"mainarray\":[false,\"dummy\",{\"subarray\":[4,\"test\",PN7cocos2d8CCObjectE]}],\"screen\":{\"width\":640,\"height\":1136,\"ios\":true}}\n```\n\n\u4eca\u56de\u306f std::ostringstream \u3092\u4f7f\u3044\u307e\u3057\u305f\u304c\u3001\u4ed6\u306b\u3082\u3082\u3063\u3068\u826f\u3044\u65b9\u6cd5\u304c\u3042\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3082\u3057\u826f\u3044\u30a2\u30a4\u30c7\u30a3\u30a2\u304c\u3042\u3063\u305f\u3089\u6559\u3048\u3066\u4e0b\u3055\u3044\u3002\n\n\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002"}