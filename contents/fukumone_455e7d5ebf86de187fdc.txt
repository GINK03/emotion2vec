{"context": " More than 1 year has passed since last update.\n\n\u7d20\u6570 \u691c\u7d22\n\nprime.rb\ndef prime_number(n)\n  sqrt = Math.sqrt(n)\n  factor_number = (2..sqrt).any? { |num| n % num == 0 }\n  unless factor_number || n == 1\n    \"#{n}\u306f\u7d20\u6570\u3067\u3059\"\n  else\n    \"#{n}\u306f\u7d20\u6570\u3067\u306f\u306a\u3044\"\n  end\nend\n\nprime_number(1000)\n\n\n\n\n\u53cc\u5b50\u7d20\u6570 \u691c\u7d22\n\nprime.rb\n\ndef twins_range_prime(numbers)\n  prime_number = Proc.new { |number|\n    sqrt = Math.sqrt(number)\n    factor_number = (2..sqrt).any? { |num| number % num == 0 }\n    unless factor_number || number == 1\n      number\n    end\n    }\n  array = []\n  (1..numbers).each do |number|\n    array << prime_number.call(number)\n  end\n  array.compact.each_cons(2).select{ |b, r| (r - b) == 2}\nend\n\np twins_range_prime(1000)\n\n\n\n\n\u4e09\u3064\u5b50\u7d20\u6570 \u691c\u7d22\n\nprime.rb\n\ndef prime_triplet(numbers)\n   prime_number = lambda { |number|\n    sqrt = Math.sqrt(number)\n    factor_number = (2..sqrt).any? { |num| number % num == 0 }\n    unless factor_number || number == 1\n      number\n    end\n    }\n\n  array = []\n  (1..numbers).each do |number|\n    array << prime_number.call(number)\n  end\n  array.compact.each_cons(3).select{ |a, b, c| (b - a == 2 && c - a == 6) || (b - a == 4 && c - a == 6) }\nend\n\np prime_triplet(1000)\n\n\n\n\u56db\u3064\u5b50\u7d20\u6570 \u691c\u7d22\n\nprime.rb\n\ndef prime_quadruplet(numbers)\n   prime_number = lambda { |number|\n    sqrt = Math.sqrt(number)\n    factor_number = (2..sqrt).any? { |num| number % num == 0 }\n    unless factor_number || number == 1\n      number\n    end\n    }\n\n  array = []\n  (1..numbers).each do |number|\n    array << prime_number.call(number)\n  end\n  array.compact.each_cons(4).select{ |a, b, c, d| (b - a == 2 && c - a == 6 && d - a == 8) }\nend\n\np prime_quadruplet(1000)\n\n\n\n\n\u30e1\u30eb\u30bb\u30f3\u30cc\u7d20\u6570 \u691c\u7d22\n\nprime.rb\n\ndef mersenne_number(multiplier)\n  prime_number = proc { |number|\n    sqrt = Math.sqrt(number)\n    factor_number = (2..sqrt).any? { |num| number % num == 0 }\n    unless factor_number || number == 1\n      \"2\u306e#{multiplier}\u4e57\u306f#{number}\u3067\u7d20\u6570\u3067\u3059\"\n    else\n      \"2\u306e#{multiplier}\u4e57\u306f#{number}\u3067\u7d20\u6570\u3067\u306f\u3042\u308a\u307e\u305b\u3093\"\n    end\n  }\n\n  number = (2 ** multiplier - 1)\n  prime_number.call(number)\nend\n\n(1..10).each do |a|\nputs mersenne_number(a)\nend\n\n\n\n## \u7d20\u6570 \u691c\u7d22\n\n```prime.rb\ndef prime_number(n)\n  sqrt = Math.sqrt(n)\n  factor_number = (2..sqrt).any? { |num| n % num == 0 }\n  unless factor_number || n == 1\n    \"#{n}\u306f\u7d20\u6570\u3067\u3059\"\n  else\n    \"#{n}\u306f\u7d20\u6570\u3067\u306f\u306a\u3044\"\n  end\nend\n\nprime_number(1000)\n\n```\n\n##\u53cc\u5b50\u7d20\u6570 \u691c\u7d22\n\n```prime.rb\n\ndef twins_range_prime(numbers)\n  prime_number = Proc.new { |number|\n    sqrt = Math.sqrt(number)\n    factor_number = (2..sqrt).any? { |num| number % num == 0 }\n    unless factor_number || number == 1\n      number\n    end\n    }\n  array = []\n  (1..numbers).each do |number|\n    array << prime_number.call(number)\n  end\n  array.compact.each_cons(2).select{ |b, r| (r - b) == 2}\nend\n\np twins_range_prime(1000)\n\n```\n\n##\u4e09\u3064\u5b50\u7d20\u6570 \u691c\u7d22\n```prime.rb\n\ndef prime_triplet(numbers)\n   prime_number = lambda { |number|\n    sqrt = Math.sqrt(number)\n    factor_number = (2..sqrt).any? { |num| number % num == 0 }\n    unless factor_number || number == 1\n      number\n    end\n    }\n\n  array = []\n  (1..numbers).each do |number|\n    array << prime_number.call(number)\n  end\n  array.compact.each_cons(3).select{ |a, b, c| (b - a == 2 && c - a == 6) || (b - a == 4 && c - a == 6) }\nend\n\np prime_triplet(1000)\n```\n\n##\u56db\u3064\u5b50\u7d20\u6570 \u691c\u7d22\n\n```prime.rb\n\ndef prime_quadruplet(numbers)\n   prime_number = lambda { |number|\n    sqrt = Math.sqrt(number)\n    factor_number = (2..sqrt).any? { |num| number % num == 0 }\n    unless factor_number || number == 1\n      number\n    end\n    }\n\n  array = []\n  (1..numbers).each do |number|\n    array << prime_number.call(number)\n  end\n  array.compact.each_cons(4).select{ |a, b, c, d| (b - a == 2 && c - a == 6 && d - a == 8) }\nend\n\np prime_quadruplet(1000)\n\n```\n\n##\u30e1\u30eb\u30bb\u30f3\u30cc\u7d20\u6570 \u691c\u7d22\n\n```prime.rb\n\ndef mersenne_number(multiplier)\n  prime_number = proc { |number|\n    sqrt = Math.sqrt(number)\n    factor_number = (2..sqrt).any? { |num| number % num == 0 }\n    unless factor_number || number == 1\n      \"2\u306e#{multiplier}\u4e57\u306f#{number}\u3067\u7d20\u6570\u3067\u3059\"\n    else\n      \"2\u306e#{multiplier}\u4e57\u306f#{number}\u3067\u7d20\u6570\u3067\u306f\u3042\u308a\u307e\u305b\u3093\"\n    end\n  }\n\n  number = (2 ** multiplier - 1)\n  prime_number.call(number)\nend\n\n(1..10).each do |a|\nputs mersenne_number(a)\nend\n\n```", "tags": ["Ruby", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0", "\u7d20\u6570"]}