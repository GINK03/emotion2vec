{"tags": ["C++11", "C++"], "context": "\n\n\u554f\u984c\u63d0\u8d77\nC++11\u3067\u3001\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u4f7f\u7528\u3059\u308b\u969b\u306b\u3001unique_ptr\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u305f\u3044\u3001\u3068\u3044\u3046\u3053\u3068\u3082\u3042\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\u3082\u3057\u304b\u3057\u305f\u3089\u5f53\u305f\u308a\u524d\u306e\u3053\u3068\u306a\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001C++11\u3067\u305d\u308c\u3092\u9054\u6210\u3059\u308b\u305f\u3081\u306e\u65b9\u6cd5\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n\u3053\u3093\u306a\u30b3\u30fc\u30c9\u304c\u3042\u3063\u305f\u3068\u3057\u307e\u3059\u3002\nhoge\u30af\u30e9\u30b9\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u53d7\u3051\u53d6\u3063\u305f\u6587\u5b57\u5217\u3092\u30e1\u30f3\u30d0\u306b\u6301\u3063\u3066\u304a\u304d\u3001func\u30e1\u30bd\u30c3\u30c9\u306f\u305d\u306e\u6587\u5b57\u5217\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\nworker::woker\u30e1\u30bd\u30c3\u30c9\u306f\u5f15\u6570\u3067\u53d7\u3051\u53d6\u3063\u305fhoge\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306efunc\u30e1\u30bd\u30c3\u30c9\u30923\u79d2\u5f8c\u306b\u547c\u3073\u51fa\u3059\u30b9\u30ec\u30c3\u30c9\u3092\u4f5c\u6210\u3057\u3001\nuniqur_ptr<thread>\u3092\u8fd4\u3057\u307e\u3059\u3002\n#include <iostream>\n#include <memory>\n#include <utility>\n#include <thread>\n\nusing namespace std;\n\n// \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u6e21\u3055\u308c\u305f\u6587\u5b57\u5217\u3092\u51fa\u529b\u3059\u308b\u3060\u3051\u306e\u30e1\u30bd\u30c3\u30c9func\u3092\u6301\u3064\nclass hoge {\npublic:\n    hoge(string data):_data(data) {};\n    void func() {\n        cout << \"message :\" + _data << endl;\n    };\n\nprivate:\n    string _data;\n};\n\n// work\u30e1\u30bd\u30c3\u30c9\u3067\u6e21\u3055\u308c\u305fhoge\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306efunc\u30e1\u30bd\u30c3\u30c9\u3092\n// 3\u79d2\u5f8c\u306b\u547c\u3076\u30b9\u30ec\u30c3\u30c9\u3092\u7acb\u3066\u3001\u30b9\u30ec\u30c3\u30c9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3059\nclass worker {\npublic:\n    worker() {};\n    unique_ptr<thread> work(unique_ptr<hoge> hoge) {\n        unique_ptr<thread> th(new thread([&hoge]{\n            this_thread::sleep_for(chrono::seconds(3));\n            hoge->func();\n        }));\n\n        return th;\n    };\n};\n\n\nint main(int argc, char const* argv[])\n{\n    unique_ptr<hoge> hoge_ptr(new hoge(\"hello!!\"));\n    unique_ptr<worker> worker_ptr(new worker());\n\n    // work\u306fthread\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3059\u306e\u3067join\u3057\u3066\u3042\u3052\u308b\n    unique_ptr<thread> thread_ptr(worker_ptr->work(move(hoge_ptr)));\n    thread_ptr->join();\n    return 0;\n}\n\n\u6b8b\u5ff5\u306a\u304c\u3089\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306fsegmentation fault\u30a8\u30e9\u30fc\u3092\u5f15\u304d\u8d77\u3053\u3057\u307e\u3059\u3002\n\u79c1\u306e\u74b0\u5883\u3067\u306e\u51fa\u529b\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n$ ./a.out \nzsh: segmentation fault (core dumped)  ./a.out\n\n\u539f\u56e0\u306fworker::work\u306b\u3042\u308a\u307e\u3059\u3002\nunique_ptr<thread> work(unique_ptr<hoge> hoge) {\n    // unique_ptr<hoge>\u578b\u306ehoge\u3092\u53c2\u7167\u3067\u53d7\u3051\u53d6\u3063\u3066\u3044\u308b\u304c\u3001\n    // 3\u79d2\u5f8c\u306b\u306fhoge\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u547c\u3070\u308c\u3066\u3044\u308b\n    unique_ptr<thread> th(new thread([&hoge]{\n        this_thread::sleep_for(chrono::seconds(3));\n        hoge->func();\n    }));\n\n    return th;\n};\n\n\u53c2\u7167\u3067\u53d7\u3051\u64ae\u3063\u305fhoge\u304c3\u79d2\u5f8c\u306b\u306f\u751f\u304d\u3066\u3044\u306a\u3044\u306e\u3067\u3059\u3002\n\u3055\u3066\u3001\u3069\u3046\u3057\u307e\u3057\u3087\u3046\u3002\n\n\u89e3\u6c7a\u65b9\u6cd51 C++14\u3092\u4f7f\u3063\u3066 move on capture\u3059\u308b\nC++14\u3067\u8ffd\u52a0\u3055\u308c\u305f\u300c\u521d\u671f\u5316lambda\u30ad\u30e3\u30d7\u30c1\u30e3\u300d\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u30b9\u30ec\u30c3\u30c9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u3066\u3044\u308b\u90e8\u5206\u3092\u3053\u306e\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u307e\u3057\u3087\u3046\u3002\n    unique_ptr<thread> th(new thread([hoge = move(hoge)]{\n        this_thread::sleep_for(chrono::seconds(3));\n        hoge->func();\n    }));\n\n\u30ad\u30e3\u30d7\u30c1\u30e3\u6307\u5b9a\u5b50\u306e\u4e2d\u3067move\u3059\u308c\u3070OK\u3067\u3059\u3002\n\nC++11\u3067\u306a\u3093\u3068\u304b\u3059\u308b\n\u3057\u304b\u3057\u3001\u4f55\u3089\u304b\u306e\u7406\u7531\u3067C++14\u304c\u4f7f\u3048\u306a\u3044\u5834\u5408\u3001\u5f53\u305f\u308a\u524d\u3067\u3059\u304c\u521d\u671f\u5316lambda\u30ad\u30e3\u30d7\u30c1\u30e3\u3092\u4f7f\u3046\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\u305d\u3053\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30af\u30e9\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\ntemplate<class T>\nclass move_on_copy {\npublic:\n    move_on_copy(T&& value) : _value(move(value)){};\n    move_on_copy(const move_on_copy& other): _value(move(other._value)) {};\n    const T& get() const { return _value; };\n    T& get() { return _value; };\nprivate:\n    mutable T _value;\n    move_on_copy& operator=(const move_on_copy<T>& other) = delete;\n    move_on_copy& operator=(const move_on_copy<T>&& other) = delete;\n};\n\n\n\u3053\u306e\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u30b3\u30d4\u30fc\u3055\u308c\u305f\u6642\u3001\u30e1\u30f3\u30d0\u5909\u6570\u3067\u3042\u308b_value\u306f\u30b3\u30d4\u30fc\u5148\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e_value\u306bmove\u3055\u308c\u307e\u3059\u3002\nunique_ptr<hoge>\u3092\u6e21\u3057\u305f\u3053\u306e\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u3068\u3001\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u547c\u3073\u51fa\u3055\u308c\u3001\n\u7121\u4e8b\u3001\u30af\u30ed\u30fc\u30b8\u30e3\u306e\u4e2d\u3067unique_ptr<hoge>\u304c\u4f7f\u7528\u3067\u304d\u308b\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3067\u3059\u3002\n\u3053\u306e\u5909\u66f4\u3092work\u30e1\u30bd\u30c3\u30c9\u306b\u9069\u7528\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nunique_ptr<thread> work(unique_ptr<hoge> hoge_ptr) {\n    move_on_copy<unique_ptr<hoge>> hoge_container(move(hoge_ptr));\n    unique_ptr<thread> th(new thread([hoge_container]{\n        this_thread::sleep_for(chrono::seconds(3));\n        hoge_container.get()->func();\n    }));\n\n    return th;\n};\n\n\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n$ ./a.out \nmessage :hello!!\n\n\n\u53c2\u8003\u30b5\u30a4\u30c8\n\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u304f\u306b\u3042\u305f\u308a\u3001Learn how to capture by move \u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n## \u554f\u984c\u63d0\u8d77\nC++11\u3067\u3001\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u4f7f\u7528\u3059\u308b\u969b\u306b\u3001`unique_ptr`\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u305f\u3044\u3001\u3068\u3044\u3046\u3053\u3068\u3082\u3042\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\u3082\u3057\u304b\u3057\u305f\u3089\u5f53\u305f\u308a\u524d\u306e\u3053\u3068\u306a\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001C++11\u3067\u305d\u308c\u3092\u9054\u6210\u3059\u308b\u305f\u3081\u306e\u65b9\u6cd5\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n\n\u3053\u3093\u306a\u30b3\u30fc\u30c9\u304c\u3042\u3063\u305f\u3068\u3057\u307e\u3059\u3002\nhoge\u30af\u30e9\u30b9\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u53d7\u3051\u53d6\u3063\u305f\u6587\u5b57\u5217\u3092\u30e1\u30f3\u30d0\u306b\u6301\u3063\u3066\u304a\u304d\u3001func\u30e1\u30bd\u30c3\u30c9\u306f\u305d\u306e\u6587\u5b57\u5217\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\nworker::woker\u30e1\u30bd\u30c3\u30c9\u306f\u5f15\u6570\u3067\u53d7\u3051\u53d6\u3063\u305fhoge\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306efunc\u30e1\u30bd\u30c3\u30c9\u30923\u79d2\u5f8c\u306b\u547c\u3073\u51fa\u3059\u30b9\u30ec\u30c3\u30c9\u3092\u4f5c\u6210\u3057\u3001\n`uniqur_ptr<thread>`\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```cpp\n#include <iostream>\n#include <memory>\n#include <utility>\n#include <thread>\n\nusing namespace std;\n\n// \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u6e21\u3055\u308c\u305f\u6587\u5b57\u5217\u3092\u51fa\u529b\u3059\u308b\u3060\u3051\u306e\u30e1\u30bd\u30c3\u30c9func\u3092\u6301\u3064\nclass hoge {\npublic:\n    hoge(string data):_data(data) {};\n    void func() {\n        cout << \"message :\" + _data << endl;\n    };\n\nprivate:\n    string _data;\n};\n\n// work\u30e1\u30bd\u30c3\u30c9\u3067\u6e21\u3055\u308c\u305fhoge\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306efunc\u30e1\u30bd\u30c3\u30c9\u3092\n// 3\u79d2\u5f8c\u306b\u547c\u3076\u30b9\u30ec\u30c3\u30c9\u3092\u7acb\u3066\u3001\u30b9\u30ec\u30c3\u30c9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3059\nclass worker {\npublic:\n    worker() {};\n    unique_ptr<thread> work(unique_ptr<hoge> hoge) {\n        unique_ptr<thread> th(new thread([&hoge]{\n            this_thread::sleep_for(chrono::seconds(3));\n            hoge->func();\n        }));\n\n        return th;\n    };\n};\n\n\nint main(int argc, char const* argv[])\n{\n    unique_ptr<hoge> hoge_ptr(new hoge(\"hello!!\"));\n    unique_ptr<worker> worker_ptr(new worker());\n    \n    // work\u306fthread\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3059\u306e\u3067join\u3057\u3066\u3042\u3052\u308b\n    unique_ptr<thread> thread_ptr(worker_ptr->work(move(hoge_ptr)));\n    thread_ptr->join();\n    return 0;\n}\n```\n\n\u6b8b\u5ff5\u306a\u304c\u3089\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306fsegmentation fault\u30a8\u30e9\u30fc\u3092\u5f15\u304d\u8d77\u3053\u3057\u307e\u3059\u3002\n\u79c1\u306e\u74b0\u5883\u3067\u306e\u51fa\u529b\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n```\n$ ./a.out \nzsh: segmentation fault (core dumped)  ./a.out\n```\n\n\u539f\u56e0\u306fworker::work\u306b\u3042\u308a\u307e\u3059\u3002\n\n```cpp\nunique_ptr<thread> work(unique_ptr<hoge> hoge) {\n    // unique_ptr<hoge>\u578b\u306ehoge\u3092\u53c2\u7167\u3067\u53d7\u3051\u53d6\u3063\u3066\u3044\u308b\u304c\u3001\n    // 3\u79d2\u5f8c\u306b\u306fhoge\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u547c\u3070\u308c\u3066\u3044\u308b\n    unique_ptr<thread> th(new thread([&hoge]{\n        this_thread::sleep_for(chrono::seconds(3));\n        hoge->func();\n    }));\n\n    return th;\n};\n```\n\n\u53c2\u7167\u3067\u53d7\u3051\u64ae\u3063\u305fhoge\u304c3\u79d2\u5f8c\u306b\u306f\u751f\u304d\u3066\u3044\u306a\u3044\u306e\u3067\u3059\u3002\n\u3055\u3066\u3001\u3069\u3046\u3057\u307e\u3057\u3087\u3046\u3002\n\n## \u89e3\u6c7a\u65b9\u6cd51 C++14\u3092\u4f7f\u3063\u3066 move on capture\u3059\u308b\nC++14\u3067\u8ffd\u52a0\u3055\u308c\u305f\u300c\u521d\u671f\u5316lambda\u30ad\u30e3\u30d7\u30c1\u30e3\u300d\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n\u30b9\u30ec\u30c3\u30c9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u3066\u3044\u308b\u90e8\u5206\u3092\u3053\u306e\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u307e\u3057\u3087\u3046\u3002\n\n```cpp\n    unique_ptr<thread> th(new thread([hoge = move(hoge)]{\n        this_thread::sleep_for(chrono::seconds(3));\n        hoge->func();\n    }));\n```\n\n\u30ad\u30e3\u30d7\u30c1\u30e3\u6307\u5b9a\u5b50\u306e\u4e2d\u3067move\u3059\u308c\u3070OK\u3067\u3059\u3002\n\n## C++11\u3067\u306a\u3093\u3068\u304b\u3059\u308b\n\n\u3057\u304b\u3057\u3001\u4f55\u3089\u304b\u306e\u7406\u7531\u3067C++14\u304c\u4f7f\u3048\u306a\u3044\u5834\u5408\u3001\u5f53\u305f\u308a\u524d\u3067\u3059\u304c\u521d\u671f\u5316lambda\u30ad\u30e3\u30d7\u30c1\u30e3\u3092\u4f7f\u3046\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\u305d\u3053\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30af\u30e9\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n```cpp\ntemplate<class T>\nclass move_on_copy {\npublic:\n    move_on_copy(T&& value) : _value(move(value)){};\n    move_on_copy(const move_on_copy& other): _value(move(other._value)) {};\n    const T& get() const { return _value; };\n    T& get() { return _value; };\nprivate:\n    mutable T _value;\n    move_on_copy& operator=(const move_on_copy<T>& other) = delete;\n    move_on_copy& operator=(const move_on_copy<T>&& other) = delete;\n};\n\n```\n\u3053\u306e\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u30b3\u30d4\u30fc\u3055\u308c\u305f\u6642\u3001\u30e1\u30f3\u30d0\u5909\u6570\u3067\u3042\u308b`_value`\u306f\u30b3\u30d4\u30fc\u5148\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e`_value`\u306bmove\u3055\u308c\u307e\u3059\u3002\n`unique_ptr<hoge>`\u3092\u6e21\u3057\u305f\u3053\u306e\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u3068\u3001\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u547c\u3073\u51fa\u3055\u308c\u3001\n\u7121\u4e8b\u3001\u30af\u30ed\u30fc\u30b8\u30e3\u306e\u4e2d\u3067`unique_ptr<hoge>`\u304c\u4f7f\u7528\u3067\u304d\u308b\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3067\u3059\u3002\n\n\u3053\u306e\u5909\u66f4\u3092`work`\u30e1\u30bd\u30c3\u30c9\u306b\u9069\u7528\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```cpp\nunique_ptr<thread> work(unique_ptr<hoge> hoge_ptr) {\n    move_on_copy<unique_ptr<hoge>> hoge_container(move(hoge_ptr));\n    unique_ptr<thread> th(new thread([hoge_container]{\n        this_thread::sleep_for(chrono::seconds(3));\n        hoge_container.get()->func();\n    }));\n\n    return th;\n};\n```\n\n\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n```\n$ ./a.out \nmessage :hello!!\n```\n\n## \u53c2\u8003\u30b5\u30a4\u30c8\n\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u304f\u306b\u3042\u305f\u308a\u3001[Learn how to capture by move](https://marcoarena.wordpress.com/2012/11/01/learn-how-to-capture-by-move/) \u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n"}