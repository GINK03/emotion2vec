{"tags": ["dlang"], "context": " More than 1 year has passed since last update.\u7279\u306b\u65b0\u3057\u3044\u30cd\u30bf\u3067\u306f\u306a\u3044\u3067\u3059\u3002\n\u6700\u521d\u30d5\u30a1\u30a4\u30d0\u30fc\u306b\u3064\u3044\u3066\u66f8\u3053\u3046\u304b\u306a\u3068\u601d\u3063\u305f\u3093\u3067\u3059\u304c\u3001\u7279\u7b46\u3059\u3079\u304d\u70b9\u304c\u4e2d\u3005\u898b\u3064\u304b\u3089\u306a\u304f\u3066\u30c6\u30fc\u30de\u3092\u5909\u3048\u307e\u3057\u305f\u3002\n\u53bb\u5e74\u306eAdvent Calendar\u306b\u5f15\u304d\u7d9a\u304d\u3001\u30b2\u30fc\u30e0\u4f5c\u308b\u969b\u306b\u5fc5\u8981\u306b\u306a\u308b\u304b\u3082\u3057\u308c\u306a\u3044GC\u3068\u30e1\u30e2\u30ea\u306b\u95a2\u3059\u308b\u3053\u3068\u7b2c\u4e8c\u5f3e\u3068\u3044\u3046\u3053\u3068\u3067\u4e00\u3064\u2026\n\n\u30ab\u30b9\u30bf\u30e0\u30a2\u30ed\u30b1\u30fc\u30bf\u3068\u306f\nD\u8a00\u8a9e\u306e\u30af\u30e9\u30b9\u306fJava\u3084C#\u306b\u985e\u4f3c\u3057\u3066\u304a\u308a\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u57fa\u672c\u7684\u306bGC\uff08\u30ac\u30d9\u30fc\u30b8\u30b3\u30ec\u30af\u30bf\uff09\u306b\u3088\u3063\u3066\u7ba1\u7406\u3055\u308c\u307e\u3059\u3002\n\u3057\u304b\u3057C++\u3067new,delete\u3092\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u3088\u3046\u306b\u3001D\u8a00\u8a9e\u3067\u3082\u30ab\u30b9\u30bf\u30e0\u30a2\u30ed\u30b1\u30fc\u30bf/\u30c7\u30a2\u30ed\u30b1\u30fc\u30bf\u3092\u8a18\u8ff0\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u30d7\u30ed\u30b0\u30e9\u30de\u304c\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u30e1\u30e2\u30ea\u3092\u7ba1\u7406\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\n\ntest_custom_allocator.d\nclass Foo\n{\n    new(size_t size) {\n        return std.c.stdlib.malloc(size);\n    }\n    delete(void* p) {\n        if (p) {\n            std.c.stdlib.free(p);\n        }\n    }\n}\n\n\n\n\u306a\u305c\u81ea\u5206\u3067\u30e1\u30e2\u30ea\u7ba1\u7406\u3059\u308b\u306e\u304b\n\u307e\u305aD\u8a00\u8a9e\u306b\u306fGC\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u81ea\u5206\u3067\u30e1\u30e2\u30ea\u3092\u7ba1\u7406\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u305b\u3093\u3057\u63a8\u5968\u3082\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\n\u3057\u304b\u3057\u9ad8\u5ea6\u306a\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u6027\u304c\u6c42\u3081\u3089\u308c\u308b\u5206\u91ce\u3067\u4f7f\u3046\u969b\u306bGC\u3084new\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u554f\u984c\u306b\u306a\u308b\u3053\u3068\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u305d\u3046\u3044\u3063\u305f\u3068\u304d\u3001\u3042\u3089\u304b\u3058\u3081\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\u3057\u3066\u304a\u3044\u3066\u305d\u308c\u3092\u4f7f\u3044\u307e\u308f\u3059\u30e1\u30e2\u30ea\u30d7\u30fc\u30eb\u3068\u3044\u3046\u624b\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u30e1\u30e2\u30ea\u30d7\u30fc\u30eb\u306e\u5b9f\u88c5\u4f8b\n\nmemorypool.d\nimport core.exception, std.stdio;\n\nclass MemoryPool\n{\n    // \u30e1\u30e2\u30ea\u30d6\u30ed\u30c3\u30af\u7ba1\u7406\u7528\n    align(8) struct Block {\n        void delegate(void*) deallocate;\n        Block* next;\n    }\n\n    ubyte[] memory;     // \u78ba\u4fdd\u3055\u308c\u305f\u30e1\u30e2\u30ea\n    Block* topBlock;    // \u30d7\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u30e1\u30e2\u30ea\u30d6\u30ed\u30c3\u30af\u306e\u5148\u982d\n    size_t blockSize;   // \u30d6\u30ed\u30c3\u30af\u30b5\u30a4\u30ba\n    int restCount;      // \u6b8b\u308a\u306e\u30d6\u30ed\u30c3\u30af\u6570\n\n    this(size_t blockSize, int count) {\n        // \u7ba1\u7406\u9818\u57df\u3092\u542b\u3081\u3066\u30e1\u30e2\u30ea\u3092\u4e00\u62ec\u78ba\u4fdd\n        size_t realSize = blockSize + Block.sizeof;\n        this.memory = new ubyte[realSize * count];\n        ubyte* p = this.memory.ptr;\n\n        Block* nextBlock;\n        for (int i = 0; i < count; i++) {\n            Block* block = cast(Block*)p;   // \u30e1\u30e2\u30ea\u30d6\u30ed\u30c3\u30af\u3092\u5207\u308a\u51fa\u3059\n            block.next = nextBlock;         // \u6b21\u306e\u30d6\u30ed\u30c3\u30af\u3092\u9023\u7d50\n            block.deallocate = &deallocate; // \u89e3\u653e\u30e1\u30bd\u30c3\u30c9\u3092\u30bb\u30c3\u30c8\n            nextBlock = block;\n            p += realSize;\n        }\n        this.topBlock = nextBlock;\n        this.blockSize = blockSize;\n        this.restCount = count;\n    }\n    void* allocate(size_t size) {\n        if (this.topBlock && size < this.blockSize) {\n            Block* block = this.topBlock;\n            this.topBlock = block.next;\n            this.restCount--;\n            // \u30a2\u30c9\u30ec\u30b9\u3092\u30b7\u30d5\u30c8\u3057\u3066\u4f7f\u7528\u53ef\u80fd\u9818\u57df\u3092\u8fd4\u3059\n            return cast(ubyte*)block + Block.sizeof;\n        }\n        return null;\n    }\n    void deallocate(void* p) {\n        // \u30a2\u30c9\u30ec\u30b9\u3092\u30b7\u30d5\u30c8\u3057\u3066\u7ba1\u7406\u9818\u57df\u3092\u53d6\u5f97\n        Block* block = cast(Block*)(cast(ubyte*)p - Block.sizeof);\n        if (this.topBlock) {\n            block.next = this.topBlock;\n            this.topBlock = block;\n        } else {\n            block.next = null;\n            this.topBlock = block;\n        }\n        this.restCount++;\n    }\n    static void deallocateS(void* p) {\n        // \u30a2\u30c9\u30ec\u30b9\u3092\u30b7\u30d5\u30c8\u3057\u3066\u7ba1\u7406\u9818\u57df\u3092\u53d6\u5f97\n        Block* block = cast(Block*)(cast(ubyte*)p - Block.sizeof);\n        block.deallocate(p);\n    }\n}\n\n\n\u2191\u3054\u3061\u3083\u3063\u3068\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3051\u3069\u3001\n\u6307\u5b9a\u3055\u308c\u305f\u30b5\u30a4\u30ba\u306e\u30e1\u30e2\u30ea\u30d6\u30ed\u30c3\u30af\u3092\u4efb\u610f\u306e\u6570\u5206\u78ba\u4fdd\u3057\u3066\u30d7\u30fc\u30eb\u3057\u3066\u304a\u304d\u3001\u5fc5\u8981\u306b\u306a\u3068\u304d\u306b\u53d6\u308a\u51fa\u305b\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u305d\u308c\u3092\u4f7f\u3044\u3001\u30af\u30e9\u30b9\u306e\u30ab\u30b9\u30bf\u30e0\u30a2\u30ed\u30b1\u30fc\u30bf\u304b\u3089\u78ba\u4fdd\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u306e\u304c\u2193\u3067\u3059\u3002\n\ntest.d\nimport std.stdio;\nimport memorypool;\nclass A\n{\n    int value = 6;\n\n    this() {\n        writeln(\"A.ctor()\");\n    }\n    ~this() {\n        writeln(\"A.dtor()\");\n    }\n    void say(string msg) {\n        writefln(\"%s value=%d\", msg, this.value);\n    }\n    new(size_t size, MemoryPool memoryPool) {\n        writefln(\"A.new(%d)\", size, memoryPool);\n        void* p = memoryPool.allocate(size);\n        if (p == null) {\n            // \u5931\u6557\u3057\u3066\u3082null\u3092\u8fd4\u3057\u3066\u306f\u30c0\u30e1\n            throw new OutOfMemoryError;\n        }\n        return p;\n    }\n    delete(void* p) {\n        writefln(\"A.delete(0x%08x)\", p);\n        if (p) {    // null\u306e\u5834\u5408\u304c\u3042\u308b\u3089\u3057\u3044\uff1f\n            MemoryPool.deallocateS(p);\n        }\n    }\n}\nvoid main()\n{\n    // 64byte\u306e\u30e1\u30e2\u30ea\u309216\u500b\u6301\u3064\u30e1\u30e2\u30ea\u30d7\u30fc\u30eb\u3092\u4f5c\u6210\n    auto memoryPool = new MemoryPool(64, 16);\n    // \u30e1\u30e2\u30ea\u30d7\u30fc\u30eb\u4f7f\u3063\u3066\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\n    A a = new(memoryPool) A;\n    // \u9069\u5f53\u306b\u4f7f\u3046\n    a.say(\"Hello\");\n    // \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u524a\u9664\uff08\u4f7f\u7528\u3057\u3066\u3044\u305f\u30e1\u30e2\u30ea\u306f\u30e1\u30e2\u30ea\u30d7\u30fc\u30eb\u306b\u623b\u308b\uff09\n    delete a;\n}\n\n\n\noutput\nA.new(12)\nA.ctor()\nHello value=6\nA.dtor()\nA.delete(0x00443cc0)\n\n\n\n\u2191\u306e\u30b3\u30fc\u30c9\u306e\u554f\u984c\n\u4e0a\u8a18\u306e\u30a2\u30ed\u30b1\u30fc\u30bf\u304b\u3089\u4f5c\u6210\u3057\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u3061\u3083\u3093\u3068delete\u3057\u306a\u3044\u3068\u30e1\u30e2\u30ea\u30d7\u30fc\u30eb\u5185\u3067\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u3057\u307e\u3059\u3002\nMemoryPool\u304c\u5927\u5143\u306e\u30e1\u30e2\u30ea\u3092\u63e1\u3063\u3066\u3044\u308b\u305f\u3081GC\u304c\u50cd\u304b\u306a\u3044\u306e\u3067\u3059\u3002\n\u3082\u3061\u308d\u3093MemoryPool\u304cGC\u306b\u3088\u3063\u3066\u89e3\u653e\u3055\u308c\u308c\u3070\u3001\u30d7\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u30e1\u30e2\u30ea\u306f\u5168\u90e8\u56de\u53ce\u3055\u308c\u307e\u3059\u3002\n\u5b9f\u969b\u4f7f\u3046\u969b\u306fC++\u306e\u3088\u3046\u306b\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u3067\u904b\u7528\u3059\u308b\u306e\u304c\u826f\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3067\u3059\u306d\u3002\n\n\u4ee5\u4e0a\n\u666e\u6bb5\u306e\u65b9\u6cd5\u3068\u306f\u5225\u306b\u3001\u3053\u3093\u306a\u65b9\u6cd5\u3067\u3082\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3067\u304d\u308b\u3088\u3068\u3044\u3046\u7d39\u4ecb\u3067\u3057\u305f\u3002\n\u2193\u3067\u306f\u4ed6\u306b\u3082\u4f55\u7a2e\u985e\u304b\u306e\u30e1\u30e2\u30ea\u78ba\u4fdd\u65b9\u6cd5\u304c\u8f09\u3063\u3066\u3044\u307e\u3059\u3002D\u8a00\u8a9e\u306e\u81ea\u7531\u5ea6\u306e\u9ad8\u3055\u304c\u304a\u5206\u304b\u308a\u3044\u305f\u3060\u3051\u308b\u304b\u3068\u3002\n\u30e1\u30e2\u30ea\u7ba1\u7406 - \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9eD\n\u7279\u306b\u65b0\u3057\u3044\u30cd\u30bf\u3067\u306f\u306a\u3044\u3067\u3059\u3002\n\u6700\u521d\u30d5\u30a1\u30a4\u30d0\u30fc\u306b\u3064\u3044\u3066\u66f8\u3053\u3046\u304b\u306a\u3068\u601d\u3063\u305f\u3093\u3067\u3059\u304c\u3001\u7279\u7b46\u3059\u3079\u304d\u70b9\u304c\u4e2d\u3005\u898b\u3064\u304b\u3089\u306a\u304f\u3066\u30c6\u30fc\u30de\u3092\u5909\u3048\u307e\u3057\u305f\u3002\n\u53bb\u5e74\u306eAdvent Calendar\u306b\u5f15\u304d\u7d9a\u304d\u3001\u30b2\u30fc\u30e0\u4f5c\u308b\u969b\u306b\u5fc5\u8981\u306b\u306a\u308b\u304b\u3082\u3057\u308c\u306a\u3044GC\u3068\u30e1\u30e2\u30ea\u306b\u95a2\u3059\u308b\u3053\u3068\u7b2c\u4e8c\u5f3e\u3068\u3044\u3046\u3053\u3068\u3067\u4e00\u3064\u2026\n\n#\u30ab\u30b9\u30bf\u30e0\u30a2\u30ed\u30b1\u30fc\u30bf\u3068\u306f\nD\u8a00\u8a9e\u306e\u30af\u30e9\u30b9\u306fJava\u3084C#\u306b\u985e\u4f3c\u3057\u3066\u304a\u308a\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u57fa\u672c\u7684\u306bGC\uff08\u30ac\u30d9\u30fc\u30b8\u30b3\u30ec\u30af\u30bf\uff09\u306b\u3088\u3063\u3066\u7ba1\u7406\u3055\u308c\u307e\u3059\u3002\n\n\u3057\u304b\u3057C++\u3067new,delete\u3092\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u3088\u3046\u306b\u3001D\u8a00\u8a9e\u3067\u3082\u30ab\u30b9\u30bf\u30e0\u30a2\u30ed\u30b1\u30fc\u30bf/\u30c7\u30a2\u30ed\u30b1\u30fc\u30bf\u3092\u8a18\u8ff0\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u30d7\u30ed\u30b0\u30e9\u30de\u304c\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u30e1\u30e2\u30ea\u3092\u7ba1\u7406\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\n\n```d:test_custom_allocator.d\nclass Foo\n{\n\tnew(size_t size) {\n\t\treturn std.c.stdlib.malloc(size);\n\t}\n\tdelete(void* p) {\n\t\tif (p) {\n\t\t\tstd.c.stdlib.free(p);\n\t\t}\n\t}\n}\n```\n\n#\u306a\u305c\u81ea\u5206\u3067\u30e1\u30e2\u30ea\u7ba1\u7406\u3059\u308b\u306e\u304b\n\u307e\u305aD\u8a00\u8a9e\u306b\u306fGC\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u81ea\u5206\u3067\u30e1\u30e2\u30ea\u3092\u7ba1\u7406\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u305b\u3093\u3057\u63a8\u5968\u3082\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\n\n\u3057\u304b\u3057\u9ad8\u5ea6\u306a\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u6027\u304c\u6c42\u3081\u3089\u308c\u308b\u5206\u91ce\u3067\u4f7f\u3046\u969b\u306bGC\u3084new\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u554f\u984c\u306b\u306a\u308b\u3053\u3068\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u305d\u3046\u3044\u3063\u305f\u3068\u304d\u3001\u3042\u3089\u304b\u3058\u3081\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\u3057\u3066\u304a\u3044\u3066\u305d\u308c\u3092\u4f7f\u3044\u307e\u308f\u3059\u30e1\u30e2\u30ea\u30d7\u30fc\u30eb\u3068\u3044\u3046\u624b\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\n\n#\u30e1\u30e2\u30ea\u30d7\u30fc\u30eb\u306e\u5b9f\u88c5\u4f8b\n\n```d:memorypool.d\nimport core.exception, std.stdio;\n\nclass MemoryPool\n{\n\t// \u30e1\u30e2\u30ea\u30d6\u30ed\u30c3\u30af\u7ba1\u7406\u7528\n\talign(8) struct Block {\n\t\tvoid delegate(void*) deallocate;\n\t\tBlock* next;\n\t}\n\t\n\tubyte[] memory;\t\t// \u78ba\u4fdd\u3055\u308c\u305f\u30e1\u30e2\u30ea\n\tBlock* topBlock;\t// \u30d7\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u30e1\u30e2\u30ea\u30d6\u30ed\u30c3\u30af\u306e\u5148\u982d\n\tsize_t blockSize;\t// \u30d6\u30ed\u30c3\u30af\u30b5\u30a4\u30ba\n\tint restCount;\t\t// \u6b8b\u308a\u306e\u30d6\u30ed\u30c3\u30af\u6570\n\t\n\tthis(size_t blockSize, int count) {\n\t\t// \u7ba1\u7406\u9818\u57df\u3092\u542b\u3081\u3066\u30e1\u30e2\u30ea\u3092\u4e00\u62ec\u78ba\u4fdd\n\t\tsize_t realSize = blockSize + Block.sizeof;\n\t\tthis.memory = new ubyte[realSize * count];\n\t\tubyte* p = this.memory.ptr;\n\t\t\n\t\tBlock* nextBlock;\n\t\tfor (int i = 0; i < count; i++) {\n\t\t\tBlock* block = cast(Block*)p;\t// \u30e1\u30e2\u30ea\u30d6\u30ed\u30c3\u30af\u3092\u5207\u308a\u51fa\u3059\n\t\t\tblock.next = nextBlock;\t\t\t// \u6b21\u306e\u30d6\u30ed\u30c3\u30af\u3092\u9023\u7d50\n\t\t\tblock.deallocate = &deallocate;\t// \u89e3\u653e\u30e1\u30bd\u30c3\u30c9\u3092\u30bb\u30c3\u30c8\n\t\t\tnextBlock = block;\n\t\t\tp += realSize;\n\t\t}\n\t\tthis.topBlock = nextBlock;\n\t\tthis.blockSize = blockSize;\n\t\tthis.restCount = count;\n\t}\n\tvoid* allocate(size_t size) {\n\t\tif (this.topBlock && size < this.blockSize) {\n\t\t\tBlock* block = this.topBlock;\n\t\t\tthis.topBlock = block.next;\n\t\t\tthis.restCount--;\n\t\t\t// \u30a2\u30c9\u30ec\u30b9\u3092\u30b7\u30d5\u30c8\u3057\u3066\u4f7f\u7528\u53ef\u80fd\u9818\u57df\u3092\u8fd4\u3059\n\t\t\treturn cast(ubyte*)block + Block.sizeof;\n\t\t}\n\t\treturn null;\n\t}\n\tvoid deallocate(void* p) {\n\t\t// \u30a2\u30c9\u30ec\u30b9\u3092\u30b7\u30d5\u30c8\u3057\u3066\u7ba1\u7406\u9818\u57df\u3092\u53d6\u5f97\n\t\tBlock* block = cast(Block*)(cast(ubyte*)p - Block.sizeof);\n\t\tif (this.topBlock) {\n\t\t\tblock.next = this.topBlock;\n\t\t\tthis.topBlock = block;\n\t\t} else {\n\t\t\tblock.next = null;\n\t\t\tthis.topBlock = block;\n\t\t}\n\t\tthis.restCount++;\n\t}\n\tstatic void deallocateS(void* p) {\n\t\t// \u30a2\u30c9\u30ec\u30b9\u3092\u30b7\u30d5\u30c8\u3057\u3066\u7ba1\u7406\u9818\u57df\u3092\u53d6\u5f97\n\t\tBlock* block = cast(Block*)(cast(ubyte*)p - Block.sizeof);\n\t\tblock.deallocate(p);\n\t}\n}\n```\n\n\u2191\u3054\u3061\u3083\u3063\u3068\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3051\u3069\u3001\n\u6307\u5b9a\u3055\u308c\u305f\u30b5\u30a4\u30ba\u306e\u30e1\u30e2\u30ea\u30d6\u30ed\u30c3\u30af\u3092\u4efb\u610f\u306e\u6570\u5206\u78ba\u4fdd\u3057\u3066\u30d7\u30fc\u30eb\u3057\u3066\u304a\u304d\u3001\u5fc5\u8981\u306b\u306a\u3068\u304d\u306b\u53d6\u308a\u51fa\u305b\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u305d\u308c\u3092\u4f7f\u3044\u3001\u30af\u30e9\u30b9\u306e\u30ab\u30b9\u30bf\u30e0\u30a2\u30ed\u30b1\u30fc\u30bf\u304b\u3089\u78ba\u4fdd\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u306e\u304c\u2193\u3067\u3059\u3002\n\n```d:test.d\nimport std.stdio;\nimport memorypool;\nclass A\n{\n\tint value = 6;\n\t\n\tthis() {\n\t\twriteln(\"A.ctor()\");\n\t}\n\t~this() {\n\t\twriteln(\"A.dtor()\");\n\t}\n\tvoid say(string msg) {\n\t\twritefln(\"%s value=%d\", msg, this.value);\n\t}\n\tnew(size_t size, MemoryPool memoryPool) {\n\t\twritefln(\"A.new(%d)\", size, memoryPool);\n\t\tvoid* p = memoryPool.allocate(size);\n\t\tif (p == null) {\n\t\t\t// \u5931\u6557\u3057\u3066\u3082null\u3092\u8fd4\u3057\u3066\u306f\u30c0\u30e1\n\t\t\tthrow new OutOfMemoryError;\n\t\t}\n\t\treturn p;\n\t}\n\tdelete(void* p) {\n\t\twritefln(\"A.delete(0x%08x)\", p);\n\t\tif (p) {\t// null\u306e\u5834\u5408\u304c\u3042\u308b\u3089\u3057\u3044\uff1f\n\t\t\tMemoryPool.deallocateS(p);\n\t\t}\n\t}\n}\nvoid main()\n{\n\t// 64byte\u306e\u30e1\u30e2\u30ea\u309216\u500b\u6301\u3064\u30e1\u30e2\u30ea\u30d7\u30fc\u30eb\u3092\u4f5c\u6210\n\tauto memoryPool = new MemoryPool(64, 16);\n\t// \u30e1\u30e2\u30ea\u30d7\u30fc\u30eb\u4f7f\u3063\u3066\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\n\tA a = new(memoryPool) A;\n\t// \u9069\u5f53\u306b\u4f7f\u3046\n\ta.say(\"Hello\");\n\t// \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u524a\u9664\uff08\u4f7f\u7528\u3057\u3066\u3044\u305f\u30e1\u30e2\u30ea\u306f\u30e1\u30e2\u30ea\u30d7\u30fc\u30eb\u306b\u623b\u308b\uff09\n\tdelete a;\n}\n```\n\n```:output\nA.new(12)\nA.ctor()\nHello value=6\nA.dtor()\nA.delete(0x00443cc0)\n```\n#\u2191\u306e\u30b3\u30fc\u30c9\u306e\u554f\u984c\n\u4e0a\u8a18\u306e\u30a2\u30ed\u30b1\u30fc\u30bf\u304b\u3089\u4f5c\u6210\u3057\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u3061\u3083\u3093\u3068delete\u3057\u306a\u3044\u3068\u30e1\u30e2\u30ea\u30d7\u30fc\u30eb\u5185\u3067\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u3057\u307e\u3059\u3002\n\nMemoryPool\u304c\u5927\u5143\u306e\u30e1\u30e2\u30ea\u3092\u63e1\u3063\u3066\u3044\u308b\u305f\u3081GC\u304c\u50cd\u304b\u306a\u3044\u306e\u3067\u3059\u3002\n\n\u3082\u3061\u308d\u3093MemoryPool\u304cGC\u306b\u3088\u3063\u3066\u89e3\u653e\u3055\u308c\u308c\u3070\u3001\u30d7\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u30e1\u30e2\u30ea\u306f\u5168\u90e8\u56de\u53ce\u3055\u308c\u307e\u3059\u3002\n\n\u5b9f\u969b\u4f7f\u3046\u969b\u306fC++\u306e\u3088\u3046\u306b\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u3067\u904b\u7528\u3059\u308b\u306e\u304c\u826f\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3067\u3059\u306d\u3002\n\n#\u4ee5\u4e0a\n\u666e\u6bb5\u306e\u65b9\u6cd5\u3068\u306f\u5225\u306b\u3001\u3053\u3093\u306a\u65b9\u6cd5\u3067\u3082\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3067\u304d\u308b\u3088\u3068\u3044\u3046\u7d39\u4ecb\u3067\u3057\u305f\u3002\n\u2193\u3067\u306f\u4ed6\u306b\u3082\u4f55\u7a2e\u985e\u304b\u306e\u30e1\u30e2\u30ea\u78ba\u4fdd\u65b9\u6cd5\u304c\u8f09\u3063\u3066\u3044\u307e\u3059\u3002D\u8a00\u8a9e\u306e\u81ea\u7531\u5ea6\u306e\u9ad8\u3055\u304c\u304a\u5206\u304b\u308a\u3044\u305f\u3060\u3051\u308b\u304b\u3068\u3002\n[\u30e1\u30e2\u30ea\u7ba1\u7406 - \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9eD](http://www.kmonos.net/alang/d/memory.html)"}