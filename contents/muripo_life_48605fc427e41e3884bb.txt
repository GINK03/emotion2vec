{"context": "modeling with distance functions\u306e\u8ddd\u96e2\u95a2\u6570\u306e\u4e00\u89a7\u306b\u6cbf\u3063\u3066\u8a18\u4e8b\u3092\u66f8\u3044\u3066\u3044\u307e\u3059.\n\u4e8c\u6b21\u5143\u306e\u30b0\u30e9\u30d5\u306e\u63cf\u753b\u306f\u3001Desmos Graphing Calculator \u3092\u4f7f\u3063\u3066\u3044\u307e\u3059.\n\n\u516d\u89d2\u5f62\u306e\u5f0f\u3092\u66f8\u304f\u306b\u306f\u3069\u3046\u3059\u308b\u306e\u304c\u65e9\u3044\u306e\u304b?\n\u6700\u521d\u306f\u3001\u6b63\u4e09\u89d2\u5f62\u3092\u91cd\u306d\u308b\u304b\u3068\u601d\u3063\u3066\u3044\u307e\u3057\u305f\u304c\u2026\n\n\n\u8ddd\u96e2\u95a2\u6570\u3092\u307f\u3066\n// Hexagonal\u306e\u8ddd\u96e2\u95a2\u6570\nvec3 q = abs(p);\nfloat radio = 1.0; // \u4e00\u8fba\u306e\u9577\u3055\nfloat hight = 2.0; // \u539a\u3055\uff08\u9ad8\u3055\uff09\nreturn max(q.z-hight,max((q.x*0.866025+q.y*0.5),q.y)-radio);\n\n\u5272\u3068\u30b7\u30f3\u30d7\u30eb\u306b\u304b\u3051\u308b\u306a\u3068\u611f\u5fc3\u3057\u307e\u3057\u305f\u3002\n\n\u5c0e\u51fa\u65b9\u6cd5\n\n\u9ad8\u6821\u306e\u6642\u306b\u3088\u304f\u898b\u305f\u3053\u306e\u554f\u984c\n|x|+|y| = 1 (-1<x<1)\n|x|+|y|=1(\u22121<x<1)|x|+|y|=1(\u22121<x<1){|x|+|y| = 1 (-1<x<1)\n}\n\u3092\u56f3\u793a\u3092\u305b\u3088.\n\u3053\u308c\u3092\u4f7f\u3044\u307e\u3059.\n\u3061\u306a\u307f\u306b\u7b54\u3048\u306f\u3053\u308c\n\n\u3053\u306e\u5f0f\u3092\u3001glsl\u3067\u66f8\u304f\u3068\nabs(p.x)+abs(p.y) - 1.0\n\n\u3068\u306a\u308a\u307e\u3059.\n\u3053\u308c\u3092box\u306e\u8ddd\u96e2\u95a2\u6570\u306b\u3059\u308b\u3068\n// box\u306e\u8ddd\u96e2\u95a2\u6570\nfloat radio = 1.0;\nfloat hight = 2.0;\nreturn max(abs(p.z)-hight,abs(p.x)+abs(p.y)-radio);\n\n\u6b21\u306b\u516d\u89d2\u5f62\u3092\u4f5c\u308a\u305f\u3044\u306e\u3067\u3001\n\\sin(\\frac{\\pi}{3})|x|+\\sin(\\frac{\\pi}{6})|y| = 1 (-1<x<1)\nsin(\u03c03)|x|+sin(\u03c06)|y|=1(\u22121<x<1)sin(\u03c03)|x|+sin(\u03c06)|y|=1(\u22121<x<1){\\sin(\\frac{\\pi}{3})|x|+\\sin(\\frac{\\pi}{6})|y| = 1 (-1<x<1)\n}\n\u3068\u3044\u3046\u3001\u5f0f\u3092\u8003\u3048\u307e\u3059.\n\u5c0e\u51fa\u306f\u3001\u66f8\u304f\u306e\u3081\u3093\u3069\u304f\u3055\u3044\u306e\u3067\u3001\u4e2d\u5b66\u306e\u6570\u5b66\u306e\u5fa9\u7fd2\u3068\u601d\u3063\u3066\u8003\u3048\u3066\u304f\u3060\u3055\u3044.\n\n\\sin(\\frac{\\pi}{6}) y \\pm 1 =0 \nsin(\u03c06)y\u00b11=0sin(\u03c06)y\u00b11=0{\\sin(\\frac{\\pi}{6}) y \\pm 1 =0 \n}\n\u3067\u533a\u5207\u308b\u3068,\n\n\u307e\u3068\u3081\u308b\u3068\u3001\n\nglsl\u306b\u3059\u308b\u3068\n// Hexagonal\u306e\u8ddd\u96e2\u95a2\u6570\nfloat radio = 1.0;\nfloat hight = 2.0;\nreturn max(abs(p.z)-hight,max(abs(p.x)*sin(1.04)+abs(p.y)*sin(0.52),abs(p.y))-radio);\n\n\u307e\u3068\u3081\u76f4\u3059\u3068\n// Hexagonal\u306e\u8ddd\u96e2\u95a2\u6570\nvec3 q = abs(p);\nvec2 h = vec2(1.0, 1.0);\nreturn max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n\n\n\u3067\u5b8c\u6210\n\n\u56de\u8ee2\u3055\u305b\u3066\u307f\u308b\n\n\n\u30cf\u30c1\u306e\u5de3\u3063\u307d\u3044\u3082\u306e\u3092\u4f5c\u3063\u3066\u307f\u308b.\n\n\u30b3\u30fc\u30c9\n// ============================================================================\n// Hexagonal function\n// ============================================================================\n\nprecision mediump float;\nuniform vec2  resolution;    // resolution (512.0, 512.0)\nuniform vec2  mouse;         // mouse      (-1.0 ~ 1.0)\nuniform float time;          // time       (1second == 1.0)\nuniform sampler2D prevScene; // previous scene texture\n\n// Hexagonal\u306e\u8ddd\u96e2\u95a2\u6570\nfloat sdHexagonal(vec3 p)\n{\n\n    // \u56de\u8ee2\n    // mat3 m_x = mat3(1,0,0,0,cos(time),-sin(time),0,sin(time),cos(time));\n    // p = m_x * p;\n    // mat3 m_y = mat3(cos(time),0,-sin(time),0,1,0,sin(time),0,cos(time));\n    // p = m_y * p;\n    // mat3 m_z = mat3(cos(time),-sin(time),0,sin(time),cos(time),0,0,0,1);\n    // p = m_z * p;\n\n    // box\u306e\u8ddd\u96e2\u95a2\u6570\n    // float radio = 1.0;\n    // float hight = 2.0;\n    // return max(abs(p.z)-hight,abs(p.x)+abs(p.y)-radio);\n\n    // Hexagonal\u306e\u8ddd\u96e2\u95a2\u6570\n    // float radio = 1.0;\n    // float hight = 2.0;\n    // return max(abs(p.z)-hight,max(abs(p.x)*sin(1.04)+abs(p.y)*sin(0.52),abs(p.y))-radio);\n\n    // Hexagonal\u306e\u8ddd\u96e2\u95a2\u6570\n    vec3 q = abs(p);\n    vec2 h = vec2(1.0, 1.0);\n    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n}\n\n// HoneycombStract\nfloat honeycombStract(vec3 p){\n    vec3 p1 = vec3(p.x+1.73, p.y+1.0, p.z);\n    vec3 p2 = vec3(p.x-1.73, p.y+1.0, p.z);\n    vec3 p3 = vec3(p.x+1.73, p.y-1.0, p.z);\n    vec3 p4 = vec3(p.x-1.73, p.y-1.0, p.z);\n    vec3 p5 = vec3(p.x, p.y-2.0, p.z);\n    vec3 p6 = vec3(p.x, p.y+2.0, p.z);\n    return min(sdHexagonal(p6), min(sdHexagonal(p5), min(sdHexagonal(p4), min(sdHexagonal(p3), min(sdHexagonal(p2), min(sdHexagonal(p1), sdHexagonal(p)))))));\n}\n\n\n// \u8ddd\u96e2\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u30cf\u30d6\u95a2\u6570\nfloat distanceHub(vec3 p){\n    // return sdHexagonal(p);\n    return honeycombStract(p);\n}\n\n// \u6cd5\u7dda\u3092\u751f\u6210\u3059\u308b\nvec3 genNormal(vec3 p){\n    float d = 0.001;\n    return normalize(vec3(\n        distanceHub(p + vec3(  d, 0.0, 0.0)) - distanceHub(p + vec3( -d, 0.0, 0.0)),\n        distanceHub(p + vec3(0.0,   d, 0.0)) - distanceHub(p + vec3(0.0,  -d, 0.0)),\n        distanceHub(p + vec3(0.0, 0.0,   d)) - distanceHub(p + vec3(0.0, 0.0,  -d))\n    ));\n}\n\nvoid main(){\n    // \u30b9\u30af\u30ea\u30fc\u30f3\u30b9\u30da\u30fc\u30b9\u3092\u8003\u616e\u3057\u3066\u5ea7\u6a19\u3092\u6b63\u898f\u5316\u3059\u308b\n    vec2 p = (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y);\n    // \u30ab\u30e1\u30e9\u3092\u5b9a\u7fa9\u3059\u308b\n    vec3 cPos = vec3(0.0,  0.0,  5.0); // \u30ab\u30e1\u30e9\u306e\u4f4d\u7f6e\n    vec3 cDir = vec3(0.0,  0.0, -1.0); // \u30ab\u30e1\u30e9\u306e\u5411\u304d(\u8996\u7dda)\n    vec3 cUp  = vec3(0.0,  1.0,  0.0); // \u30ab\u30e1\u30e9\u306e\u4e0a\u65b9\u5411\n    vec3 cSide = cross(cDir, cUp);     // \u5916\u7a4d\u3092\u4f7f\u3063\u3066\u6a2a\u65b9\u5411\u3092\u7b97\u51fa\n    float targetDepth = 1.0;           // \u30d5\u30a9\u30fc\u30ab\u30b9\u3059\u308b\u6df1\u5ea6\n    // \u30ab\u30e1\u30e9\u306e\u60c5\u5831\u304b\u3089\u30ec\u30a4\u3092\u5b9a\u7fa9\u3059\u308b\n    vec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n    // \u30de\u30fc\u30c1\u30f3\u30b0\u30eb\u30fc\u30d7\u3092\u7d44\u3080\n    float dist = 0.0;  // \u30ec\u30a4\u3068\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u9593\u306e\u6700\u77ed\u8ddd\u96e2\n    float rLen = 0.0;  // \u30ec\u30a4\u306b\u7d99\u304e\u8db3\u3059\u9577\u3055\n    vec3  rPos = cPos; // \u30ec\u30a4\u306e\u5148\u7aef\u4f4d\u7f6e(\u521d\u671f\u4f4d\u7f6e)\n    for(int i = 0; i < 32; ++i){\n        dist = distanceHub(rPos);\n        rLen += dist;\n        rPos = cPos + ray * rLen;\n    }\n    // \u30ec\u30a4\u3068\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u8ddd\u96e2\u3092\u78ba\u8a8d\n    if(abs(dist) < 0.001){\n        // \u6cd5\u7dda\u3092\u7b97\u51fa\n        vec3 normal = genNormal(rPos);\n        // \u30e9\u30a4\u30c8\u30d9\u30af\u30c8\u30eb\u306e\u5b9a\u7fa9\n        vec3 light = normalize(vec3(1.0, 1.0, 1.0));\n        // \u30e9\u30a4\u30c8\u30d9\u30af\u30c8\u30eb\u3068\u306e\u5185\u7a4d\u3092\u53d6\u308b\n        float diff = max(dot(normal, light), 0.1);\n        // gl_FragColor = vec4(vec3(diff, diff, diff), 1.0);\n        gl_FragColor = vec4(vec3(diff*177.0/255.0, diff*120.0/255.0, diff*68.0/255.0), 1.0);\n    }else{\n        // \u885d\u7a81\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u305d\u306e\u307e\u307e\u9ed2\n        gl_FragColor = vec4(vec3(0.0, 0.0, 0.0), 1.0);\n    }\n}\n\n[modeling with distance functions](http://iquilezles.org/www/articles/distfunctions/distfunctions.htm)\u306e\u8ddd\u96e2\u95a2\u6570\u306e\u4e00\u89a7\u306b\u6cbf\u3063\u3066\u8a18\u4e8b\u3092\u66f8\u3044\u3066\u3044\u307e\u3059.\n\n\u4e8c\u6b21\u5143\u306e\u30b0\u30e9\u30d5\u306e\u63cf\u753b\u306f\u3001[Desmos Graphing Calculator](https://www.desmos.com/) \u3092\u4f7f\u3063\u3066\u3044\u307e\u3059.\n\n# \u516d\u89d2\u5f62\u306e\u5f0f\u3092\u66f8\u304f\u306b\u306f\u3069\u3046\u3059\u308b\u306e\u304c\u65e9\u3044\u306e\u304b?\n\n\u6700\u521d\u306f\u3001\u6b63\u4e09\u89d2\u5f62\u3092\u91cd\u306d\u308b\u304b\u3068\u601d\u3063\u3066\u3044\u307e\u3057\u305f\u304c\u2026\n\n![image01.PNG](https://qiita-image-store.s3.amazonaws.com/0/102634/bf3926d8-0fe4-b226-93e2-50b8b2c18b3d.png)\n\n## \u8ddd\u96e2\u95a2\u6570\u3092\u307f\u3066\n\n```c++\n// Hexagonal\u306e\u8ddd\u96e2\u95a2\u6570\nvec3 q = abs(p);\nfloat radio = 1.0; // \u4e00\u8fba\u306e\u9577\u3055\nfloat hight = 2.0; // \u539a\u3055\uff08\u9ad8\u3055\uff09\nreturn max(q.z-hight,max((q.x*0.866025+q.y*0.5),q.y)-radio);\n```\n\n\u5272\u3068\u30b7\u30f3\u30d7\u30eb\u306b\u304b\u3051\u308b\u306a\u3068\u611f\u5fc3\u3057\u307e\u3057\u305f\u3002\n\n## \u5c0e\u51fa\u65b9\u6cd5\n\n### \u9ad8\u6821\u306e\u6642\u306b\u3088\u304f\u898b\u305f\u3053\u306e\u554f\u984c\n\n```math\n|x|+|y| = 1 (-1<x<1)\n```\n\u3092\u56f3\u793a\u3092\u305b\u3088.\n\n\u3053\u308c\u3092\u4f7f\u3044\u307e\u3059.\n\n\u3061\u306a\u307f\u306b\u7b54\u3048\u306f\u3053\u308c\n\n![image02.PNG](https://qiita-image-store.s3.amazonaws.com/0/102634/f56cc407-beee-e0ee-455f-9e1d11ce36f6.png)\n\n\u3053\u306e\u5f0f\u3092\u3001glsl\u3067\u66f8\u304f\u3068\n\n```c++\nabs(p.x)+abs(p.y) - 1.0\n```\n\u3068\u306a\u308a\u307e\u3059.\n\n\u3053\u308c\u3092box\u306e\u8ddd\u96e2\u95a2\u6570\u306b\u3059\u308b\u3068\n\n```c++\n// box\u306e\u8ddd\u96e2\u95a2\u6570\nfloat radio = 1.0;\nfloat hight = 2.0;\nreturn max(abs(p.z)-hight,abs(p.x)+abs(p.y)-radio);\n```\n\n\u6b21\u306b\u516d\u89d2\u5f62\u3092\u4f5c\u308a\u305f\u3044\u306e\u3067\u3001\n\n```math\n\\sin(\\frac{\\pi}{3})|x|+\\sin(\\frac{\\pi}{6})|y| = 1 (-1<x<1)\n```\n\u3068\u3044\u3046\u3001\u5f0f\u3092\u8003\u3048\u307e\u3059.\n\n\u5c0e\u51fa\u306f\u3001\u66f8\u304f\u306e\u3081\u3093\u3069\u304f\u3055\u3044\u306e\u3067\u3001\u4e2d\u5b66\u306e\u6570\u5b66\u306e\u5fa9\u7fd2\u3068\u601d\u3063\u3066\u8003\u3048\u3066\u304f\u3060\u3055\u3044.\n\n![image03.PNG](https://qiita-image-store.s3.amazonaws.com/0/102634/ed2bb061-64b9-b07c-1ff9-a25793cbe066.png)\n\n```math\n\\sin(\\frac{\\pi}{6}) y \\pm 1 =0 \n```\n\n\u3067\u533a\u5207\u308b\u3068,\n\n![image02.PNG](https://qiita-image-store.s3.amazonaws.com/0/102634/298adc50-0851-47e8-06ca-958a7db4f6b8.png)\n\n\u307e\u3068\u3081\u308b\u3068\u3001\n\n![image.PNG](https://qiita-image-store.s3.amazonaws.com/0/102634/00d26435-f7b1-aa63-44c5-0c4ee7cec691.png)\n\nglsl\u306b\u3059\u308b\u3068\n\n```c++\n// Hexagonal\u306e\u8ddd\u96e2\u95a2\u6570\nfloat radio = 1.0;\nfloat hight = 2.0;\nreturn max(abs(p.z)-hight,max(abs(p.x)*sin(1.04)+abs(p.y)*sin(0.52),abs(p.y))-radio);\n```\n\n\u307e\u3068\u3081\u76f4\u3059\u3068\n\n```c++\n// Hexagonal\u306e\u8ddd\u96e2\u95a2\u6570\nvec3 q = abs(p);\nvec2 h = vec2(1.0, 1.0);\nreturn max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n```\n\n![image06.PNG](https://qiita-image-store.s3.amazonaws.com/0/102634/a77ba29d-7e23-b989-e105-f081a8fd9738.png)\n\n\u3067\u5b8c\u6210\n\n# \u56de\u8ee2\u3055\u305b\u3066\u307f\u308b\n![transform01.gif](https://qiita-image-store.s3.amazonaws.com/0/102634/d4a4c9e1-6950-d2e1-84fd-d658d6dfe0a1.gif)\n\n# \u30cf\u30c1\u306e\u5de3\u3063\u307d\u3044\u3082\u306e\u3092\u4f5c\u3063\u3066\u307f\u308b.\n\n![image07.PNG](https://qiita-image-store.s3.amazonaws.com/0/102634/8898febe-8a98-52d8-3e8f-404869dc10c6.png)\n\n[\u30b3\u30fc\u30c9](https://github.com/muripoLife/RayMarchingDistanceFunction/blob/master/10/fsp.frag)\n\n```c++\n// ============================================================================\n// Hexagonal function\n// ============================================================================\n\nprecision mediump float;\nuniform vec2  resolution;    // resolution (512.0, 512.0)\nuniform vec2  mouse;         // mouse      (-1.0 ~ 1.0)\nuniform float time;          // time       (1second == 1.0)\nuniform sampler2D prevScene; // previous scene texture\n\n// Hexagonal\u306e\u8ddd\u96e2\u95a2\u6570\nfloat sdHexagonal(vec3 p)\n{\n    \n    // \u56de\u8ee2\n    // mat3 m_x = mat3(1,0,0,0,cos(time),-sin(time),0,sin(time),cos(time));\n    // p = m_x * p;\n    // mat3 m_y = mat3(cos(time),0,-sin(time),0,1,0,sin(time),0,cos(time));\n    // p = m_y * p;\n    // mat3 m_z = mat3(cos(time),-sin(time),0,sin(time),cos(time),0,0,0,1);\n    // p = m_z * p;\n    \n    // box\u306e\u8ddd\u96e2\u95a2\u6570\n    // float radio = 1.0;\n    // float hight = 2.0;\n    // return max(abs(p.z)-hight,abs(p.x)+abs(p.y)-radio);\n\n    // Hexagonal\u306e\u8ddd\u96e2\u95a2\u6570\n    // float radio = 1.0;\n    // float hight = 2.0;\n    // return max(abs(p.z)-hight,max(abs(p.x)*sin(1.04)+abs(p.y)*sin(0.52),abs(p.y))-radio);\n\n    // Hexagonal\u306e\u8ddd\u96e2\u95a2\u6570\n    vec3 q = abs(p);\n    vec2 h = vec2(1.0, 1.0);\n    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n}\n\n// HoneycombStract\nfloat honeycombStract(vec3 p){\n    vec3 p1 = vec3(p.x+1.73, p.y+1.0, p.z);\n    vec3 p2 = vec3(p.x-1.73, p.y+1.0, p.z);\n    vec3 p3 = vec3(p.x+1.73, p.y-1.0, p.z);\n    vec3 p4 = vec3(p.x-1.73, p.y-1.0, p.z);\n    vec3 p5 = vec3(p.x, p.y-2.0, p.z);\n    vec3 p6 = vec3(p.x, p.y+2.0, p.z);\n    return min(sdHexagonal(p6), min(sdHexagonal(p5), min(sdHexagonal(p4), min(sdHexagonal(p3), min(sdHexagonal(p2), min(sdHexagonal(p1), sdHexagonal(p)))))));\n}\n\n\n// \u8ddd\u96e2\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u30cf\u30d6\u95a2\u6570\nfloat distanceHub(vec3 p){\n    // return sdHexagonal(p);\n    return honeycombStract(p);\n}\n\n// \u6cd5\u7dda\u3092\u751f\u6210\u3059\u308b\nvec3 genNormal(vec3 p){\n    float d = 0.001;\n    return normalize(vec3(\n        distanceHub(p + vec3(  d, 0.0, 0.0)) - distanceHub(p + vec3( -d, 0.0, 0.0)),\n        distanceHub(p + vec3(0.0,   d, 0.0)) - distanceHub(p + vec3(0.0,  -d, 0.0)),\n        distanceHub(p + vec3(0.0, 0.0,   d)) - distanceHub(p + vec3(0.0, 0.0,  -d))\n    ));\n}\n\nvoid main(){\n    // \u30b9\u30af\u30ea\u30fc\u30f3\u30b9\u30da\u30fc\u30b9\u3092\u8003\u616e\u3057\u3066\u5ea7\u6a19\u3092\u6b63\u898f\u5316\u3059\u308b\n    vec2 p = (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y);\n    // \u30ab\u30e1\u30e9\u3092\u5b9a\u7fa9\u3059\u308b\n    vec3 cPos = vec3(0.0,  0.0,  5.0); // \u30ab\u30e1\u30e9\u306e\u4f4d\u7f6e\n    vec3 cDir = vec3(0.0,  0.0, -1.0); // \u30ab\u30e1\u30e9\u306e\u5411\u304d(\u8996\u7dda)\n    vec3 cUp  = vec3(0.0,  1.0,  0.0); // \u30ab\u30e1\u30e9\u306e\u4e0a\u65b9\u5411\n    vec3 cSide = cross(cDir, cUp);     // \u5916\u7a4d\u3092\u4f7f\u3063\u3066\u6a2a\u65b9\u5411\u3092\u7b97\u51fa\n    float targetDepth = 1.0;           // \u30d5\u30a9\u30fc\u30ab\u30b9\u3059\u308b\u6df1\u5ea6\n    // \u30ab\u30e1\u30e9\u306e\u60c5\u5831\u304b\u3089\u30ec\u30a4\u3092\u5b9a\u7fa9\u3059\u308b\n    vec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n    // \u30de\u30fc\u30c1\u30f3\u30b0\u30eb\u30fc\u30d7\u3092\u7d44\u3080\n    float dist = 0.0;  // \u30ec\u30a4\u3068\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u9593\u306e\u6700\u77ed\u8ddd\u96e2\n    float rLen = 0.0;  // \u30ec\u30a4\u306b\u7d99\u304e\u8db3\u3059\u9577\u3055\n    vec3  rPos = cPos; // \u30ec\u30a4\u306e\u5148\u7aef\u4f4d\u7f6e(\u521d\u671f\u4f4d\u7f6e)\n    for(int i = 0; i < 32; ++i){\n        dist = distanceHub(rPos);\n        rLen += dist;\n        rPos = cPos + ray * rLen;\n    }\n    // \u30ec\u30a4\u3068\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u8ddd\u96e2\u3092\u78ba\u8a8d\n    if(abs(dist) < 0.001){\n        // \u6cd5\u7dda\u3092\u7b97\u51fa\n        vec3 normal = genNormal(rPos);\n        // \u30e9\u30a4\u30c8\u30d9\u30af\u30c8\u30eb\u306e\u5b9a\u7fa9\n        vec3 light = normalize(vec3(1.0, 1.0, 1.0));\n        // \u30e9\u30a4\u30c8\u30d9\u30af\u30c8\u30eb\u3068\u306e\u5185\u7a4d\u3092\u53d6\u308b\n        float diff = max(dot(normal, light), 0.1);\n        // gl_FragColor = vec4(vec3(diff, diff, diff), 1.0);\n        gl_FragColor = vec4(vec3(diff*177.0/255.0, diff*120.0/255.0, diff*68.0/255.0), 1.0);\n    }else{\n        // \u885d\u7a81\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u305d\u306e\u307e\u307e\u9ed2\n        gl_FragColor = vec4(vec3(0.0, 0.0, 0.0), 1.0);\n    }\n}\n```\n", "tags": ["GLSL", "\u6570\u5b66"]}