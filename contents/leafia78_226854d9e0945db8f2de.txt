{"tags": ["Erlang", "Twitter", "TwitterAPI"], "context": " More than 1 year has passed since last update.\u300c\u8a00\u8a9e\u5165\u9580\u306f\u307e\u305aTwitterAPI\u3060\uff01\uff01\u300d\u3063\u3066\u611f\u3058\u3067\u3044\u308d\u3044\u308d\u3084\u3063\u3066\u304d\u305f\u306e\u3067Erlang\u3082\u305d\u3046\u3059\u308b\u4e8b\u306b\u3057\u305f\u306e\u3067\u3059\u304c\u3001\u3068\u3066\u3082\u624b\u3053\u305a\u3063\u305f\u2026\u3002\nPHP\u3067\u3044\u3046json_decode()\u304c\u6a19\u6e96\u3067\u5165\u3063\u3066\u306a\u304b\u3063\u305f\u308a\u3001$status->text\u307f\u305f\u3044\u306b\u66f8\u3051\u306a\u304b\u3063\u305f\u308a\u2026\u3002\n\n\u306a\u3093\u3068\u304b\u9811\u5f35\u3063\u305f\n\n\u4f7f\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\n\u30fbjson\u306e\u30c7\u30b3\u30fc\u30c9\njsx (https://github.com/talentdeficit/jsx)\n\u30fbOAuth\u306e\u901a\u4fe1\nErlang-oauth (https://github.com/tim/erlang-oauth/)\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\ntwi.erl\n-module(twi).\n-compile(export_all).\n\n-define(CK,\"\").\n-define(CS,\"\").\n-define(AT,\"\").\n-define(AS,\"\").\n\npost() ->\n        ssl:start(),\n        ApiKey = {?CK, ?CS, hmac_sha1},\n        URL = \"https://api.twitter.com/1.1/statuses/update.json\",\n        io:format(\"post text : \"),\n        Input = io:get_line(standard_io,''),\n        Text = string:substr(Input, 1, length(Input)-1),\n        Response = oauth:post(URL, [{\"status\", Text}], ApiKey, ?AT, ?AS).\n\nget() ->\n        ssl:start(),\n        ApiKey = {?CK, ?CS, hmac_sha1},\n        URL = \"https://api.twitter.com/1.1/statuses/user_timeline.json\",\n        Body = return_body(oauth:get(URL, [{\"count\", 10}], ApiKey, ?AT, ?AS)),\n        if\n                Body == error -> \n                        io:format(\"Error\");\n                true ->         \n                        Res = jsx:decode(list_to_binary(Body), [{labels, atom}]),\n                        lists:foreach(fun(Status) ->\n                                Text = [Text|| {text,Text} <- Status],\n                                io:format(\"~s~n\",Text),\n                                io:format(\"----------------------------~n\")\n                         end,Res)\n        end.\n\n\n\nreturn_body({ok, {{_, 200, _}, _, Body}}) -> Body;\nreturn_body({ok, {{_, _, _}, _, _}})-> error.\n\n\n\n\u5b9f\u884c\n\n\u6295\u7a3f\n$ erl -pa ebin -s crypto -s inets\n1> c(twi).       //\u30b3\u30f3\u30d1\u30a4\u30eb\n2> twi:post().   //post()\u3092\u5b9f\u884c\n\n\n\n\u30c4\u30a4\u30fc\u30c8\u53d6\u5f97\n$ erl -pa ebin -s crypto -s inets\n1> c(twi).       //\u30b3\u30f3\u30d1\u30a4\u30eb\n2> twi:get().   //get()\u3092\u5b9f\u884c\n\n\n\n\u8efd\u304f\u8aac\u660e\n\npost()\n\u30c4\u30a4\u30fc\u30c8\u3059\u308b\u5185\u5bb9\u3092io:get_line(standard_io,'')\u3067\u53d7\u3051\u53d6\u3063\u3066\u307e\u3059\nio:format(\"post text : \"),\n        Input = io:get_line(standard_io,''),\n\n\u3042\u3068\u306foauth:post()\u3092\u4f7f\u3063\u3066\u30ea\u30af\u30a8\u30b9\u30c8\u3059\u308b\u3060\u3051\uff01\uff01\n\nget()\noauth:get()\u3067\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u308a\u307e\u3059\u3002\n\u8fd4\u3063\u3066\u304d\u305f\u5024\u304c\u6b63\u5e38\u304b\u5224\u5b9a\u3059\u308b\u305f\u3081\u306breturn_body()\u95a2\u6570\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\u30a8\u30e9\u30fc\u3058\u3083\u306a\u3051\u308c\u3070api\u3067\u5f97\u305fjson\u30c7\u30fc\u30bf\u3092\u305d\u306e\u307e\u307e\u8fd4\u3057\u307e\u3059\u3002\nreturn_body({ok, {{_, 200, _}, _, Body}}) -> Body;\nreturn_body({ok, {{_, _, _}, _, _}})-> error.\n\nreturn_body()\u95a2\u6570\u3067\u6b63\u5e38\u3060\u3068\u5224\u65ad\u3055\u308c\u305f\u5834\u5408jsx:decode()\u3067\u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n10\u4ef6\u5206\u306e\u30c4\u30a4\u30fc\u30c8\u3092\u62fe\u3063\u305f\u306e\u3067\u305d\u308c\u3092foreach\u3067\u3050\u308b\u3050\u308b\u56de\u3057\u307e\u3059\u3002\n\u3042\u3068\u306f\u30ea\u30b9\u30c8\u5185\u5305\u8868\u8a18\u3092\u4f7f\u3044\u30c4\u30a4\u30fc\u30c8\u30c6\u30ad\u30b9\u30c8\u3092\u629c\u304d\u53d6\u3063\u3066\u8868\u793a\uff01\uff01\n       if\n                Body == error -> \n                        io:format(\"Error\");\n                true ->         \n                        Res = jsx:decode(list_to_binary(Body), [{labels, atom}]),\n                        lists:foreach(fun(Status) ->\n                                Text = [Text|| {text,Text} <- Status],\n                                io:format(\"~s~n\",Text)\n                         end,Res)\n        end.\n\n\n\u611f\u60f3\nErlang\u306f\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u304c\u697d\u3057\u3044\u3067\u3059\u306d\u3002\n\u6700\u521d\u306f\u300c\u30af\u30bd\u8a00\u8a9e\u3060\uff01\uff01\u300d\u3068\u8a00\u3063\u3066\u305f\u3051\u3069\u6163\u308c\u308b\u3068\u306a\u304b\u306a\u304b\u9762\u767d\u304f\u3066\u597d\u304d\u3067\u3059\uff3e\uff3e\n\u300c\u8a00\u8a9e\u5165\u9580\u306f\u307e\u305aTwitterAPI\u3060\uff01\uff01\u300d\u3063\u3066\u611f\u3058\u3067\u3044\u308d\u3044\u308d\u3084\u3063\u3066\u304d\u305f\u306e\u3067Erlang\u3082\u305d\u3046\u3059\u308b\u4e8b\u306b\u3057\u305f\u306e\u3067\u3059\u304c\u3001\u3068\u3066\u3082\u624b\u3053\u305a\u3063\u305f\u2026\u3002\n\nPHP\u3067\u3044\u3046json_decode()\u304c\u6a19\u6e96\u3067\u5165\u3063\u3066\u306a\u304b\u3063\u305f\u308a\u3001```$status->text```\u307f\u305f\u3044\u306b\u66f8\u3051\u306a\u304b\u3063\u305f\u308a\u2026\u3002\n\n#\u306a\u3093\u3068\u304b\u9811\u5f35\u3063\u305f\n##\u4f7f\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\n\u30fbjson\u306e\u30c7\u30b3\u30fc\u30c9\njsx (https://github.com/talentdeficit/jsx)\n\u30fbOAuth\u306e\u901a\u4fe1\nErlang-oauth (https://github.com/tim/erlang-oauth/)\n\n##\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n```erlang:twi.erl\n-module(twi).\n-compile(export_all).\n\n-define(CK,\"\").\n-define(CS,\"\").\n-define(AT,\"\").\n-define(AS,\"\").\n\npost() ->\n        ssl:start(),\n        ApiKey = {?CK, ?CS, hmac_sha1},\n        URL = \"https://api.twitter.com/1.1/statuses/update.json\",\n        io:format(\"post text : \"),\n        Input = io:get_line(standard_io,''),\n        Text = string:substr(Input, 1, length(Input)-1),\n        Response = oauth:post(URL, [{\"status\", Text}], ApiKey, ?AT, ?AS).\n\nget() ->\n        ssl:start(),\n        ApiKey = {?CK, ?CS, hmac_sha1},\n        URL = \"https://api.twitter.com/1.1/statuses/user_timeline.json\",\n        Body = return_body(oauth:get(URL, [{\"count\", 10}], ApiKey, ?AT, ?AS)),\n        if\n                Body == error -> \n                        io:format(\"Error\");\n                true ->         \n                        Res = jsx:decode(list_to_binary(Body), [{labels, atom}]),\n                        lists:foreach(fun(Status) ->\n                                Text = [Text|| {text,Text} <- Status],\n                                io:format(\"~s~n\",Text),\n                                io:format(\"----------------------------~n\")\n                         end,Res)\n        end.\n        \n\n\nreturn_body({ok, {{_, 200, _}, _, Body}}) -> Body;\nreturn_body({ok, {{_, _, _}, _, _}})-> error.\n```\n\n##\u5b9f\u884c\n###\u6295\u7a3f\n\n```\n$ erl -pa ebin -s crypto -s inets\n1> c(twi).       //\u30b3\u30f3\u30d1\u30a4\u30eb\n2> twi:post().   //post()\u3092\u5b9f\u884c\n\n```\n\n###\u30c4\u30a4\u30fc\u30c8\u53d6\u5f97\n\n```\n$ erl -pa ebin -s crypto -s inets\n1> c(twi).       //\u30b3\u30f3\u30d1\u30a4\u30eb\n2> twi:get().   //get()\u3092\u5b9f\u884c\n\n```\n\n#\u8efd\u304f\u8aac\u660e\n##post()\n\n\u30c4\u30a4\u30fc\u30c8\u3059\u308b\u5185\u5bb9\u3092```io:get_line(standard_io,'')```\u3067\u53d7\u3051\u53d6\u3063\u3066\u307e\u3059\n\n```erlang\nio:format(\"post text : \"),\n        Input = io:get_line(standard_io,''),\n```\n\u3042\u3068\u306foauth:post()\u3092\u4f7f\u3063\u3066\u30ea\u30af\u30a8\u30b9\u30c8\u3059\u308b\u3060\u3051\uff01\uff01\n\n##get()\noauth:get()\u3067\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u308a\u307e\u3059\u3002\n\u8fd4\u3063\u3066\u304d\u305f\u5024\u304c\u6b63\u5e38\u304b\u5224\u5b9a\u3059\u308b\u305f\u3081\u306breturn_body()\u95a2\u6570\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\u30a8\u30e9\u30fc\u3058\u3083\u306a\u3051\u308c\u3070api\u3067\u5f97\u305fjson\u30c7\u30fc\u30bf\u3092\u305d\u306e\u307e\u307e\u8fd4\u3057\u307e\u3059\u3002\n\n```erlang\nreturn_body({ok, {{_, 200, _}, _, Body}}) -> Body;\nreturn_body({ok, {{_, _, _}, _, _}})-> error.\n```\n\nreturn_body()\u95a2\u6570\u3067\u6b63\u5e38\u3060\u3068\u5224\u65ad\u3055\u308c\u305f\u5834\u5408jsx:decode()\u3067\u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n10\u4ef6\u5206\u306e\u30c4\u30a4\u30fc\u30c8\u3092\u62fe\u3063\u305f\u306e\u3067\u305d\u308c\u3092foreach\u3067\u3050\u308b\u3050\u308b\u56de\u3057\u307e\u3059\u3002\n\u3042\u3068\u306f\u30ea\u30b9\u30c8\u5185\u5305\u8868\u8a18\u3092\u4f7f\u3044\u30c4\u30a4\u30fc\u30c8\u30c6\u30ad\u30b9\u30c8\u3092\u629c\u304d\u53d6\u3063\u3066\u8868\u793a\uff01\uff01\n\n```erlang\n       if\n                Body == error -> \n                        io:format(\"Error\");\n                true ->         \n                        Res = jsx:decode(list_to_binary(Body), [{labels, atom}]),\n                        lists:foreach(fun(Status) ->\n                                Text = [Text|| {text,Text} <- Status],\n                                io:format(\"~s~n\",Text)\n                         end,Res)\n        end.\n```\n\n#\u611f\u60f3\n\nErlang\u306f\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u304c\u697d\u3057\u3044\u3067\u3059\u306d\u3002\n\u6700\u521d\u306f\u300c\u30af\u30bd\u8a00\u8a9e\u3060\uff01\uff01\u300d\u3068\u8a00\u3063\u3066\u305f\u3051\u3069\u6163\u308c\u308b\u3068\u306a\u304b\u306a\u304b\u9762\u767d\u304f\u3066\u597d\u304d\u3067\u3059\uff3e\uff3e\n"}