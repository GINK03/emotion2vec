{"tags": ["\u3069\u3046\u66f8\u304f", "Erlang"], "context": " More than 1 year has passed since last update.http://nabetani.sakura.ne.jp/hena/ord10pokarest/\n\u300c\u30dd\u30fc\u30ab\u30fc\u306e\u6b8b\u308a\uff0b\u300d\u3092Erlang\u3067\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u30022\u6642\u9593\u4ee5\u4e0a\u304b\u304b\u308a\u307e\u3057\u305f\u3002\n\u6700\u521d\u306b5\u679a\u306e\u30ab\u30fc\u30c9\u3068\u3001\u305d\u3053\u304b\u30894\u679a\u53d6\u3063\u305f\u7d44\u307f\u5408\u308f\u305b(drop1)\u3092\u5408\u308f\u305b\u305f\u30ea\u30b9\u30c8\u3092\u4f5c\u3063\u3066\u3044\u307e\u3059\u3002\n\u30b9\u30c8\u30ec\u30fc\u30c8\u3068\u30d5\u30e9\u30c3\u30b7\u30e5\u306e\u5224\u5b9a\u306f4\u679a\u30015\u679a\u306e\u4e21\u65b9\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\nErlang\u306f\u30a2\u30c8\u30e0(royal\u3068\u304bstraight\u3068\u304bflush\u306a\u3069)\u3092\u5024\u3068\u3057\u3066\u4f7f\u3048\u308b\u306e\u3067\u3001\u5224\u5b9a\u90e8\u5206(hand2)\u306f\u82e5\u5e72\u308f\u304b\u308a\u3084\u3059\u304f\u66f8\u3051\u307e\u3057\u305f\u3002\n\u5404\u95a2\u6570\u306f\u624b\u629c\u304d\u3092\u3057\u3066\u672b\u5c3e\u518d\u5e30\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\npoker.erl\n-module(poker).\n-compile(export_all).\n\nhand(Data) ->\n  X1 = to_array(Data),\n  X2 = [X1 | drop1(X1)],\n  X3 = lists:map(fun to_flug/1, X2),\n  element(2, lists:min(lists:map(fun hand2/1, X3))).\n\nhand2(X) ->\n  case X of\n    {5, royal, straight, flush} -> {1, \"RF\"};\n    {5, _, straight, flush}     -> {2, \"SF\"};\n    {5, _, _, flush}            -> {3, \"FL\"};\n    {5, _, straight, _}         -> {4, \"ST\"};\n    {4, _, straight, flush}     -> {5, \"4SF\"};\n    {4, _, _, flush}            -> {6, \"4F\"};\n    {4, _, straight, x}         -> {7, \"4S\"};\n    {_, _, _, _}                -> {9, \"-\"}\n  end.\n\nto_flug(X) ->\n  {Straight, Royal} = is_straight(X),\n  {length(X), Royal, Straight, is_flush(X)}.\n\ndrop1(Data) ->\n  lists:foldl(fun(X, L) -> [lists:delete(X, Data) | L] end, [], Data).\n\nto_array([]) -> [];\nto_array([H|T]) ->\n  S = hd(T), R = tl(T),\n  case H of\n    $K -> [{S, 13} | to_array(R)];\n    $Q -> [{S, 12} | to_array(R)];\n    $J -> [{S, 11} | to_array(R)];\n    $1 -> [{hd(tl(T)), 10} | to_array(tl(R))];\n    $A -> [{S, 1}  | to_array(R)];\n    X  -> [{S, X - $0} | to_array(R)]\n  end.\n\nsuite(L) -> [element(1, X) || X <- L].\nrank(L)  -> [element(2, X) || X <- L].\n\nis_straight(L) ->\n  L2 = lists:sort(rank(L)),\n  First = hd(L2),\n  case [X - First + 1 || X <- L2] of\n    [1,10,11,12,13] -> {straight, royal};\n    [1,11,12,13]    -> {straight, royal};\n    [1,2,3,4,5]     -> {straight, x};\n    [1,2,3,4]       -> {straight, x};\n    _               -> {x,        x}\n  end.\n\nis_flush(L) -> is_flush2(suite(L)).\nis_flush2([S,S,S,S,S]) -> flush;\nis_flush2([S,S,S,S])   -> flush;\nis_flush2(_)           -> x.\n\ntests() ->\n  test(\"Qs9s3dJd10h\", \"4S\"), % #0\n  test(\"KdAdJd10dQd\", \"RF\"), % #1\n  test(\"Js10sAsQsKs\", \"RF\"), % #51\n  test(\"10dKdQdAdJd\", \"RF\"). % #52\n\ntest(Data, Expected) ->\n  Result = hand(Data),\n  io:fwrite(\"~p: ~s -> ~s~n\", [Result =:= Expected, Data, Result]).\n\n\nhttp://nabetani.sakura.ne.jp/hena/ord10pokarest/\n\u300c\u30dd\u30fc\u30ab\u30fc\u306e\u6b8b\u308a\uff0b\u300d\u3092Erlang\u3067\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u30022\u6642\u9593\u4ee5\u4e0a\u304b\u304b\u308a\u307e\u3057\u305f\u3002\n\n\u6700\u521d\u306b5\u679a\u306e\u30ab\u30fc\u30c9\u3068\u3001\u305d\u3053\u304b\u30894\u679a\u53d6\u3063\u305f\u7d44\u307f\u5408\u308f\u305b(drop1)\u3092\u5408\u308f\u305b\u305f\u30ea\u30b9\u30c8\u3092\u4f5c\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u30b9\u30c8\u30ec\u30fc\u30c8\u3068\u30d5\u30e9\u30c3\u30b7\u30e5\u306e\u5224\u5b9a\u306f4\u679a\u30015\u679a\u306e\u4e21\u65b9\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\n\nErlang\u306f\u30a2\u30c8\u30e0(royal\u3068\u304bstraight\u3068\u304bflush\u306a\u3069)\u3092\u5024\u3068\u3057\u3066\u4f7f\u3048\u308b\u306e\u3067\u3001\u5224\u5b9a\u90e8\u5206(hand2)\u306f\u82e5\u5e72\u308f\u304b\u308a\u3084\u3059\u304f\u66f8\u3051\u307e\u3057\u305f\u3002\n\n\u5404\u95a2\u6570\u306f\u624b\u629c\u304d\u3092\u3057\u3066\u672b\u5c3e\u518d\u5e30\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\n```erlang:poker.erl\n-module(poker).\n-compile(export_all).\n\nhand(Data) ->\n  X1 = to_array(Data),\n  X2 = [X1 | drop1(X1)],\n  X3 = lists:map(fun to_flug/1, X2),\n  element(2, lists:min(lists:map(fun hand2/1, X3))).\n\nhand2(X) ->\n  case X of\n    {5, royal, straight, flush} -> {1, \"RF\"};\n    {5, _, straight, flush}     -> {2, \"SF\"};\n    {5, _, _, flush}            -> {3, \"FL\"};\n    {5, _, straight, _}         -> {4, \"ST\"};\n    {4, _, straight, flush}     -> {5, \"4SF\"};\n    {4, _, _, flush}            -> {6, \"4F\"};\n    {4, _, straight, x}         -> {7, \"4S\"};\n    {_, _, _, _}                -> {9, \"-\"}\n  end.\n\nto_flug(X) ->\n  {Straight, Royal} = is_straight(X),\n  {length(X), Royal, Straight, is_flush(X)}.\n\ndrop1(Data) ->\n  lists:foldl(fun(X, L) -> [lists:delete(X, Data) | L] end, [], Data).\n\nto_array([]) -> [];\nto_array([H|T]) ->\n  S = hd(T), R = tl(T),\n  case H of\n    $K -> [{S, 13} | to_array(R)];\n    $Q -> [{S, 12} | to_array(R)];\n    $J -> [{S, 11} | to_array(R)];\n    $1 -> [{hd(tl(T)), 10} | to_array(tl(R))];\n    $A -> [{S, 1}  | to_array(R)];\n    X  -> [{S, X - $0} | to_array(R)]\n  end.\n\nsuite(L) -> [element(1, X) || X <- L].\nrank(L)  -> [element(2, X) || X <- L].\n\nis_straight(L) ->\n  L2 = lists:sort(rank(L)),\n  First = hd(L2),\n  case [X - First + 1 || X <- L2] of\n    [1,10,11,12,13] -> {straight, royal};\n    [1,11,12,13]    -> {straight, royal};\n    [1,2,3,4,5]     -> {straight, x};\n    [1,2,3,4]       -> {straight, x};\n    _               -> {x,        x}\n  end.\n\nis_flush(L) -> is_flush2(suite(L)).\nis_flush2([S,S,S,S,S]) -> flush;\nis_flush2([S,S,S,S])   -> flush;\nis_flush2(_)           -> x.\n\ntests() ->\n  test(\"Qs9s3dJd10h\", \"4S\"), % #0\n  test(\"KdAdJd10dQd\", \"RF\"), % #1\n  test(\"Js10sAsQsKs\", \"RF\"), % #51\n  test(\"10dKdQdAdJd\", \"RF\"). % #52\n\ntest(Data, Expected) ->\n  Result = hand(Data),\n  io:fwrite(\"~p: ~s -> ~s~n\", [Result =:= Expected, Data, Result]).\n```\n"}