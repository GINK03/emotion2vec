{"context": " More than 1 year has passed since last update.\n\n\u767a\u7aef\nHubot \u306b\u69d8\u3005\u306a\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u3066\u3044\u308b\u3068, \u6a29\u9650\u7ba1\u7406\u3092\u884c\u3044\u305f\u304f\u306a\u308b.\n\ndeploy \u306f, A \u3055\u3093\u3068 B \u3055\u3093\u306e\u307f\u304c\u884c\u3048\u308b\nTrello \u306e\u30c1\u30b1\u30c3\u30c8\u4f5c\u6210\u306f, Chat Room \u306b\u6240\u5c5e\u3057\u3066\u3044\u308b\u8005\u306e\u307f\u304c\u884c\u3048\u308b\n\n\u7b49\u3005\u2026\n\u5c11\u3057\u8abf\u3079\u308b\u3068, auth.coffee \u304c\u898b\u3064\u304b\u308b\u304c, Chat Room \u306b\u5236\u9650\u304c\u639b\u3051\u3089\u308c\u306a\u3044.\nHubot \u306f\u5c3b\u8efd\u3067\u3042\u308b\u305f\u3081, \u62db\u5f85\u3055\u308c\u308b\u3068, \u3069\u306e\u3088\u3046\u306a Chat Room \u3067\u3042\u3063\u3066\u3082\u9854\u3092\u51fa\u3057\u3066\u3057\u307e\u3044, \u30b3\u30de\u30f3\u30c9\u3092\u5165\u529b\u3055\u308c\u308b\u3068, \u7d20\u76f4\u306b\u53d7\u3051\u5165\u308c\u3066\u3057\u307e\u3046.\n\u305d\u3053\u3067, auth.coffee \u306b Chat Room \u3092\u5224\u5225\u3059\u308b\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u3064\u3064, \u30ea\u30d5\u30a1\u30af\u30bf\u3092\u8a66\u307f\u308b.\n\nSource Code\n\nauth.coffee\n# Description:\n#   Auth allows you to assign roles to users which can be used by other scripts\n#   to restrict access to Hubot commands\n#\n# Dependencies:\n#   None\n#\n# Configuration:\n#   HUBOT_AUTH_ADMIN - A comma separate list of user IDs\n#   HUBOT_AUTH_ROOM - A comma separate list of room IDs\n#\n# Commands:\n#   hubot <user id> has <role> role - Assigns a role to a user\n#   hubot <user id> doesn't have <role> role - Removes a role from a user\n#   hubot what role does <user id> have - Find out what roles are assigned to a specific user\n#   hubot who has admin role - Find out who's an admin and can assign roles\n#\n# Notes:\n#   * Call the method: robot.auth.validUser(msg, '<role>')\n#   * returns bool true or false\n#\n#   * the 'admin' role can only be assigned through the environment variable\n#   * roles are all transformed to lower case\n#\n# Author:\n#   IKUTA Masahito\n\nmodule.exports = (robot) ->\n  admin = process.env.HUBOT_AUTH_ADMIN or ''\n  room = process.env.HUBOT_AUTH_ROOM or ''\n\n  class Auth\n    validUser: (msg, role) ->\n      user = msg.message.user\n\n      unless @inRoom(user)\n        msg.reply \"Can not execute in this room.\"\n        return false\n\n      unless @hasRole(user, role)\n        msg.reply \"#{user.name} has not the '#{role}' role.\"\n        return false\n\n      return true\n\n    hasRole: (user, role) ->\n      if @hasAdminRole(user.id)\n        return true\n\n      unless user.roles?\n        return false\n\n      return role in user.roles\n\n    hasAdminRole: (id) ->\n      return id.toString() in admin.toLowerCase().split(',')\n\n    inRoom: (user) ->\n      return user.room == room\n\n  robot.auth = new Auth\n\n  validParams = (msg, id, role) ->\n    if not validIDParam(msg, id)\n      return false\n\n    if not validRoleParam(msg, role)\n      return false\n\n    return true\n\n  validIDParam = (msg, id) ->\n    if isNaN(id)\n      msg.reply \"ID is not integer.\"\n      return false\n\n    user = robot.brain.userForId(id)\n    unless user?\n      msg.reply \"#{id} does not exist\"\n      return false\n\n    if robot.auth.hasAdminRole(id)\n      msg.reply \"ID have admin role.\"\n      return false\n\n    return true\n\n  validRoleParam = (msg, role) ->\n    if role == 'admin'\n      msg.reply \"Sorry, the 'admin' role can only be defined in the HUBOT_AUTH_ADMIN env variable.\"\n      return false\n\n    return true\n\n  robot.respond /auth help$/i, (msg) ->\n    msg.reply '''\n              <user id> has <role> role - Assigns a role to a user\n              <user id> doesn't have <role> role - Removes a role from a user\n              what role does <user id> have - Find out what roles are assigned to a specific user\n              who has admin role - Find out who's an admin and can assign roles\n              '''\n\n  robot.respond /@?(.+) (has) ([\"'\\w: -_]+) (role)/i, (msg) ->\n    unless robot.auth.validUser(msg, 'auth')\n      return\n\n    name = msg.match[1].trim()\n    newRole = msg.match[3].trim().toLowerCase()\n\n    if name == 'who' and newRole == 'admin'\n        msg.reply \"The following people have the 'admin' role: #{admin.split(',')}\"\n        return\n\n    id = parseInt(name)\n    if not validParams(msg, id, newRole)\n      return\n\n    user = robot.brain.userForId(id)\n    user.roles = user.roles or []\n    if newRole in user.roles\n      msg.reply \"#{user.name} already has the '#{newRole}' role.\"\n      return\n\n    user.roles.push(newRole)\n    msg.reply \"Ok, #{user.name} has the '#{newRole}' role.\"\n\n  robot.respond /@?(.+) (doesn't have|does not have) ([\"'\\w: -_]+) (role)/i, (msg) ->\n    unless robot.auth.validUser(msg, 'auth')\n      return\n\n    id = parseInt(msg.match[1].trim())\n    newRole = msg.match[3].trim().toLowerCase()\n\n    if not validParams(msg, id, newRole)\n      return\n\n    user = robot.brain.userForId(id)\n    user.roles = (role for role in user.roles when role isnt newRole)\n    msg.reply \"Ok, #{user.name} doesn't have the '#{newRole}' role.\"\n\n  robot.respond /(what role does|what roles does) @?(.+) (have)\\?*$/i, (msg) ->\n    id = parseInt(msg.match[2].trim())\n\n    if not validIDParam(msg, id)\n      return\n\n    user = robot.brain.userForId(id)\n    user.roles = user.roles or []\n\n    if robot.auth.hasAdminRole(id)\n      isAdmin = ' and is also an admin'\n    else\n      isAdmin = ''\n\n    msg.reply \"#{user.name} has the following roles: \" + user.roles + isAdmin + \".\"\n\n\n\nsay.coffee\n# Description:\n#   Hubot always has a snappy comeback.\n#\n# Dependencies:\n#   None\n#\n# Configuration:\n#   None\n#\n# Commands:\n#   hubot who am i - Display your name, id and room name.\n#\n# Notes:\n#   None\n#\n# Author:\n#   IKUTA Masahito\n\nmodule.exports = (robot) ->\n  robot.respond /who am i$/i, (msg) ->\n    user = msg.message.user\n    msg.reply \"\"\"\n              Name: #{user.name}\n              ID: #{user.id}\n              Room: #{user.room}\n              \"\"\"\n\n\n\n\u4f7f\u3044\u65b9\nsay.coffee \u3092\u8a2d\u7f6e\u3057, \u74b0\u5883\u5909\u6570\u306b\u8a2d\u5b9a\u3059\u308b\u5024\u3092\u8abf\u3079\u308b.\nHubot> hubot who am i\nHubot>\nName: Shell\nID: 1\nRoom: Shell\n\n\u5024\u304c\u5f97\u3089\u308c\u305f\u3089, \u74b0\u5883\u5909\u6570\u3092\u8a2d\u5b9a\u3059\u308b.\n\nbin/hubot-local\n#!/bin/sh\n\nnpm install\nexport PATH=\"node_modules/.bin:node_modules/hubot/node_modules/.bin:$PATH\"\nexport HUBOT_LOG_LEVEL=\"debug\"\n\nexport HUBOT_AUTH_ADMIN=\"1\"\nexport HUBOT_AUTH_ROOM=\"Shell\"\n\nexec node_modules/.bin/hubot \"$@\"\n\n\n\u6a29\u9650\u3092\u8a2d\u5b9a\u3059\u308b.\nHubot> hubot 2 has fabric role\nHubot> hubot 2 has trello role\nHubot> hubot what role does 2 have\nHubot> 2 has the following roles: trello,fabric.\n\n\u5404\u30b3\u30de\u30f3\u30c9\u306b\u6a29\u9650\u3092\u78ba\u8a8d\u3059\u308b\u51e6\u7406\u3092\u8ffd\u52a0\u3059\u308b.\n\ntrello.coffee\n# ..snip..\n\nmodule.exports = (robot) ->\n  robot.respond /trello (.*)$/i, (msg) ->\n    unless robot.auth.validUser(msg, 'trello')\n      return\n\n# ..snip..\n\n\n\u3053\u308c\u3067, \u5c11\u3057\u5b89\u5168\u306b hubot \u3092\u904b\u7528\u3067\u304d\u308b.\n\n# \u767a\u7aef\n\nHubot \u306b\u69d8\u3005\u306a\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u3066\u3044\u308b\u3068, \u6a29\u9650\u7ba1\u7406\u3092\u884c\u3044\u305f\u304f\u306a\u308b.\n\n - deploy \u306f, A \u3055\u3093\u3068 B \u3055\u3093\u306e\u307f\u304c\u884c\u3048\u308b\n - Trello \u306e\u30c1\u30b1\u30c3\u30c8\u4f5c\u6210\u306f, Chat Room \u306b\u6240\u5c5e\u3057\u3066\u3044\u308b\u8005\u306e\u307f\u304c\u884c\u3048\u308b\n\n\u7b49\u3005\u2026\n\n\u5c11\u3057\u8abf\u3079\u308b\u3068, [auth.coffee](https://github.com/github/hubot/blob/master/src/scripts/auth.coffee) \u304c\u898b\u3064\u304b\u308b\u304c, Chat Room \u306b\u5236\u9650\u304c\u639b\u3051\u3089\u308c\u306a\u3044.\nHubot \u306f\u5c3b\u8efd\u3067\u3042\u308b\u305f\u3081, \u62db\u5f85\u3055\u308c\u308b\u3068, \u3069\u306e\u3088\u3046\u306a Chat Room \u3067\u3042\u3063\u3066\u3082\u9854\u3092\u51fa\u3057\u3066\u3057\u307e\u3044, \u30b3\u30de\u30f3\u30c9\u3092\u5165\u529b\u3055\u308c\u308b\u3068, \u7d20\u76f4\u306b\u53d7\u3051\u5165\u308c\u3066\u3057\u307e\u3046.\n\n\u305d\u3053\u3067, auth.coffee \u306b Chat Room \u3092\u5224\u5225\u3059\u308b\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u3064\u3064, \u30ea\u30d5\u30a1\u30af\u30bf\u3092\u8a66\u307f\u308b.\n\n# Source Code\n\n```coffeescript:auth.coffee\n# Description:\n#   Auth allows you to assign roles to users which can be used by other scripts\n#   to restrict access to Hubot commands\n#\n# Dependencies:\n#   None\n#\n# Configuration:\n#   HUBOT_AUTH_ADMIN - A comma separate list of user IDs\n#   HUBOT_AUTH_ROOM - A comma separate list of room IDs\n#\n# Commands:\n#   hubot <user id> has <role> role - Assigns a role to a user\n#   hubot <user id> doesn't have <role> role - Removes a role from a user\n#   hubot what role does <user id> have - Find out what roles are assigned to a specific user\n#   hubot who has admin role - Find out who's an admin and can assign roles\n#\n# Notes:\n#   * Call the method: robot.auth.validUser(msg, '<role>')\n#   * returns bool true or false\n#\n#   * the 'admin' role can only be assigned through the environment variable\n#   * roles are all transformed to lower case\n#\n# Author:\n#   IKUTA Masahito\n\nmodule.exports = (robot) ->\n  admin = process.env.HUBOT_AUTH_ADMIN or ''\n  room = process.env.HUBOT_AUTH_ROOM or ''\n\n  class Auth\n    validUser: (msg, role) ->\n      user = msg.message.user\n\n      unless @inRoom(user)\n        msg.reply \"Can not execute in this room.\"\n        return false\n\n      unless @hasRole(user, role)\n        msg.reply \"#{user.name} has not the '#{role}' role.\"\n        return false\n\n      return true\n\n    hasRole: (user, role) ->\n      if @hasAdminRole(user.id)\n        return true\n\n      unless user.roles?\n        return false\n\n      return role in user.roles\n\n    hasAdminRole: (id) ->\n      return id.toString() in admin.toLowerCase().split(',')\n\n    inRoom: (user) ->\n      return user.room == room\n\n  robot.auth = new Auth\n\n  validParams = (msg, id, role) ->\n    if not validIDParam(msg, id)\n      return false\n\n    if not validRoleParam(msg, role)\n      return false\n\n    return true\n\n  validIDParam = (msg, id) ->\n    if isNaN(id)\n      msg.reply \"ID is not integer.\"\n      return false\n\n    user = robot.brain.userForId(id)\n    unless user?\n      msg.reply \"#{id} does not exist\"\n      return false\n      \n    if robot.auth.hasAdminRole(id)\n      msg.reply \"ID have admin role.\"\n      return false\n\n    return true\n\n  validRoleParam = (msg, role) ->\n    if role == 'admin'\n      msg.reply \"Sorry, the 'admin' role can only be defined in the HUBOT_AUTH_ADMIN env variable.\"\n      return false\n\n    return true\n\n  robot.respond /auth help$/i, (msg) ->\n    msg.reply '''\n              <user id> has <role> role - Assigns a role to a user\n              <user id> doesn't have <role> role - Removes a role from a user\n              what role does <user id> have - Find out what roles are assigned to a specific user\n              who has admin role - Find out who's an admin and can assign roles\n              '''\n\n  robot.respond /@?(.+) (has) ([\"'\\w: -_]+) (role)/i, (msg) ->\n    unless robot.auth.validUser(msg, 'auth')\n      return\n\n    name = msg.match[1].trim()\n    newRole = msg.match[3].trim().toLowerCase()\n\n    if name == 'who' and newRole == 'admin'\n        msg.reply \"The following people have the 'admin' role: #{admin.split(',')}\"\n        return\n\n    id = parseInt(name)\n    if not validParams(msg, id, newRole)\n      return\n\n    user = robot.brain.userForId(id)\n    user.roles = user.roles or []\n    if newRole in user.roles\n      msg.reply \"#{user.name} already has the '#{newRole}' role.\"\n      return\n\n    user.roles.push(newRole)\n    msg.reply \"Ok, #{user.name} has the '#{newRole}' role.\"\n\n  robot.respond /@?(.+) (doesn't have|does not have) ([\"'\\w: -_]+) (role)/i, (msg) ->\n    unless robot.auth.validUser(msg, 'auth')\n      return\n\n    id = parseInt(msg.match[1].trim())\n    newRole = msg.match[3].trim().toLowerCase()\n\n    if not validParams(msg, id, newRole)\n      return\n\n    user = robot.brain.userForId(id)\n    user.roles = (role for role in user.roles when role isnt newRole)\n    msg.reply \"Ok, #{user.name} doesn't have the '#{newRole}' role.\"\n\n  robot.respond /(what role does|what roles does) @?(.+) (have)\\?*$/i, (msg) ->\n    id = parseInt(msg.match[2].trim())\n\n    if not validIDParam(msg, id)\n      return\n\n    user = robot.brain.userForId(id)\n    user.roles = user.roles or []\n\n    if robot.auth.hasAdminRole(id)\n      isAdmin = ' and is also an admin'\n    else\n      isAdmin = ''\n\n    msg.reply \"#{user.name} has the following roles: \" + user.roles + isAdmin + \".\"\n```\n\n```coffeescript:say.coffee\n# Description:\n#   Hubot always has a snappy comeback.\n#\n# Dependencies:\n#   None\n#\n# Configuration:\n#   None\n#\n# Commands:\n#   hubot who am i - Display your name, id and room name.\n#\n# Notes:\n#   None\n#\n# Author:\n#   IKUTA Masahito\n\nmodule.exports = (robot) ->\n  robot.respond /who am i$/i, (msg) ->\n    user = msg.message.user\n    msg.reply \"\"\"\n              Name: #{user.name}\n              ID: #{user.id}\n              Room: #{user.room}\n              \"\"\"\n```\n\n# \u4f7f\u3044\u65b9\n\nsay.coffee \u3092\u8a2d\u7f6e\u3057, \u74b0\u5883\u5909\u6570\u306b\u8a2d\u5b9a\u3059\u308b\u5024\u3092\u8abf\u3079\u308b.\n\n```\nHubot> hubot who am i\nHubot>\nName: Shell\nID: 1\nRoom: Shell\n```\n\n\u5024\u304c\u5f97\u3089\u308c\u305f\u3089, \u74b0\u5883\u5909\u6570\u3092\u8a2d\u5b9a\u3059\u308b.\n\n```shell:bin/hubot-local\n#!/bin/sh\n\nnpm install\nexport PATH=\"node_modules/.bin:node_modules/hubot/node_modules/.bin:$PATH\"\nexport HUBOT_LOG_LEVEL=\"debug\"\n\nexport HUBOT_AUTH_ADMIN=\"1\"\nexport HUBOT_AUTH_ROOM=\"Shell\"\n\nexec node_modules/.bin/hubot \"$@\"\n```\n\n\u6a29\u9650\u3092\u8a2d\u5b9a\u3059\u308b.\n\n```\nHubot> hubot 2 has fabric role\nHubot> hubot 2 has trello role\nHubot> hubot what role does 2 have\nHubot> 2 has the following roles: trello,fabric.\n```\n\n\u5404\u30b3\u30de\u30f3\u30c9\u306b\u6a29\u9650\u3092\u78ba\u8a8d\u3059\u308b\u51e6\u7406\u3092\u8ffd\u52a0\u3059\u308b.\n\n```coffeescript:trello.coffee\n# ..snip..\n\nmodule.exports = (robot) ->\n  robot.respond /trello (.*)$/i, (msg) ->\n    unless robot.auth.validUser(msg, 'trello')\n      return\n\n# ..snip..\n```\n\n\u3053\u308c\u3067, \u5c11\u3057\u5b89\u5168\u306b hubot \u3092\u904b\u7528\u3067\u304d\u308b.\n", "tags": ["Hubot", "CoffeeScript"]}