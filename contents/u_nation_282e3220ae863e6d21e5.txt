{"context": " More than 1 year has passed since last update.\u521d\u6295\u7a3f\u3057\u307e\u3059@u_nation \u3067\u3059\u3002\n\n\u7d50\u8ad6\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u5b9f\u73fe\u3067\u304d\u307e\u3057\u305f\u3002\nrecyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {\n    @Override\n    public void onScrollStateChanged(RecyclerView recyclerView, int newState) {\n        super.onScrollStateChanged(recyclerView, newState);\n    }\n\n    @Override\n    public void onScrolled(RecyclerView recyclerView, int dx, int dy) {\n        super.onScrolled(recyclerView, dx, dy);\n        if (!recyclerView.canScrollVertically(-1)) {\n           /*\u30ea\u30b9\u30c8\u306e\u5148\u982d\u306b\u6765\u305f\u6642\u306e\u51e6\u7406*/\n         }\n\n        if (!recyclerView.canScrollVertically(1)) {\n           /*\u30ea\u30b9\u30c8\u306e\u672b\u5c3e\u306b\u6765\u305f\u6642\u306e\u51e6\u7406*/\n        }\n    }\n);\n\n\u91cd\u8981\u306a\u306e\u306frecyclerView.canScrollVertically(-1 or 1)\u306e\u90e8\u5206\u3067\u3059\u3002\nView.java\u306eJavadoc\u3092\u8aad\u3080\u3068\u8ca0\u306e\u6570\u306f\u30b9\u30af\u30ed\u30fc\u30eb\u30a2\u30c3\u30d7\u3092\u6b63\u306e\u6570\u306f\u30b9\u30af\u30ed\u30fc\u30eb\u30c0\u30a6\u30f3\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3068\u3042\u308a\u307e\u3059\u304c\u3001\u5b9f\u969b\u306e\u6319\u52d5\u3092\u898b\u308b\u3068\u9006\u306a\u6c17\u3082\u3057\u307e\u3059\u3002\u3002\n\u5f15\u6570\u306b\u8ca0\u306e\u6570\u3092\u4e0e\u3048\u308b\u3068\u5148\u982d\u3067false\u304c\u8fd4\u308a\u3001\u6b63\u306e\u6570\u3092\u4e0e\u3048\u308b\u3068\u672b\u5c3e\u3067false\u3092\u8fd4\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\nView.java\n/**\n  * Check if this view can be scrolled vertically in a certain direction.\n  *\n  * @param direction Negative to check scrolling up, positive to check scrolling down.\n  * @return true if this view can be scrolled in the specified direction, false otherwise.\n  */\npublic boolean canScrollVertically(int direction) {\n     final int offset = computeVerticalScrollOffset();\n     final int range = computeVerticalScrollRange() - computeVerticalScrollExtent();\n     if (range == 0) return false;\n     if (direction < 0) {\n         return offset > 0;\n     } else {\n         return offset < range - 1;\n     }\n }\n\n\n\n\u4f7f\u7528\u4f8b\n1.\u672b\u5c3e\u3067\u6b21\u306e\u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9\n\u3088\u304f\u3042\u308b\u30d1\u30bf\u30fc\u30f3\u306e\u30a2\u30ec\u3067\u3059\n2.SwipeRefreshLayout\nListView\u306e\u6642\u306f\u30ea\u30b9\u30c8\u306e\u5148\u982d\u3067\u4e0b\u65b9\u5411\u306b\u30b9\u30ef\u30a4\u30d7\u3059\u308b\u3068\u3088\u3057\u306a\u306b\u52d5\u3044\u3066\u304f\u308c\u305fSwipeRefreshLayout\u3067\u3059\u304cRecyclerView\u3067\u306f\u30ea\u30b9\u30c8\u306e\u5148\u982d\u4ee5\u5916\u3067\u306fsetEnabled(false)\u3057\u3066\u3042\u3052\u306a\u3044\u3068\u610f\u56f3\u3057\u306a\u3044\u4f4d\u7f6e\u3067\u3082onRefresh\u304c\u547c\u3070\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\nrecyclerView.addOnScrollListener\u5185\u306eonScrolled\u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u306b\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u9069\u5207\u306b\u51e6\u7406\u3057\u3066\u304f\u308c\u307e\u3059\nif (!recyclerView.canScrollVertically(-1)) {\n   swipeRefreshLayout.setEnabled(true);\n} else if (binding.included.refresh.isEnabled()) {\n   swipeRefreshLayout.setEnabled(false);\n}\n\n\n\u30aa\u30de\u30b1\n\u672b\u5c3e\u691c\u77e5\u306fAdapter\u5185\u3067\u3082\u3067\u304d\u307e\u3059\u3002\nposition\u3092\u4f7f\u3063\u305f\u308a\u30c7\u30fc\u30bf\u3092\u3069\u3046\u3053\u3046\u3057\u305f\u3044\u6642\u306f\u3053\u3061\u3089\u3067\u3082\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u305f\u3060onBindViewHolder\u30e1\u30bd\u30c3\u30c9\u5185\u3067\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u306e\u5909\u66f4\u3092\u3059\u308b\u3068\u304d\u306f\njava.lang.IllegalStateException: Cannot call this method while RecyclerView is computing a layout or scrolling\n\u304c\u3067\u308b\u306e\u3092\u9632\u3050\u305f\u3081\u306bHandler\u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n@Override\npublic void onBindViewHolder(BindingHolder holder, int position) {\n    if (position == getItemCount() - 1) {\n       /*\u30ea\u30b9\u30c8\u306e\u672b\u5c3e\u306b\u6765\u305f\u6642\u306e\u51e6\u7406*/\n\n       handler.post(() -> {/*\u8981\u7d20\u306e\u5909\u66f4\u3092\u3059\u308b\u5834\u5408*/})); \n    }\n}\n\n\u4ee5\u4e0a\u3067\u3059\u3002\u8aa4\u308a\u304c\u3042\u308c\u3070\u8a02\u6b63\u3044\u305f\u3057\u307e\u3059(>_<)\n\u521d\u6295\u7a3f\u3057\u307e\u3059[@u_nation](https://twitter.com/u_nation) \u3067\u3059\u3002\n\n##\u7d50\u8ad6\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u5b9f\u73fe\u3067\u304d\u307e\u3057\u305f\u3002\n\n```java\nrecyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {\n    @Override\n    public void onScrollStateChanged(RecyclerView recyclerView, int newState) {\n        super.onScrollStateChanged(recyclerView, newState);\n    }\n\n    @Override\n    public void onScrolled(RecyclerView recyclerView, int dx, int dy) {\n        super.onScrolled(recyclerView, dx, dy);\n        if (!recyclerView.canScrollVertically(-1)) {\n           /*\u30ea\u30b9\u30c8\u306e\u5148\u982d\u306b\u6765\u305f\u6642\u306e\u51e6\u7406*/\n         }\n\n        if (!recyclerView.canScrollVertically(1)) {\n           /*\u30ea\u30b9\u30c8\u306e\u672b\u5c3e\u306b\u6765\u305f\u6642\u306e\u51e6\u7406*/\n        }\n    }\n);\n```\n\n\u91cd\u8981\u306a\u306e\u306f__recyclerView.canScrollVertically(-1 or 1)__\u306e\u90e8\u5206\u3067\u3059\u3002\n__View.java__\u306e_Javadoc_\u3092\u8aad\u3080\u3068\u8ca0\u306e\u6570\u306f\u30b9\u30af\u30ed\u30fc\u30eb\u30a2\u30c3\u30d7\u3092\u6b63\u306e\u6570\u306f\u30b9\u30af\u30ed\u30fc\u30eb\u30c0\u30a6\u30f3\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3068\u3042\u308a\u307e\u3059\u304c\u3001\u5b9f\u969b\u306e\u6319\u52d5\u3092\u898b\u308b\u3068\u9006\u306a\u6c17\u3082\u3057\u307e\u3059\u3002\u3002\n\n\u5f15\u6570\u306b\u8ca0\u306e\u6570\u3092\u4e0e\u3048\u308b\u3068\u5148\u982d\u3067false\u304c\u8fd4\u308a\u3001\u6b63\u306e\u6570\u3092\u4e0e\u3048\u308b\u3068\u672b\u5c3e\u3067false\u3092\u8fd4\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n```java:View.java\n/**\n  * Check if this view can be scrolled vertically in a certain direction.\n  *\n  * @param direction Negative to check scrolling up, positive to check scrolling down.\n  * @return true if this view can be scrolled in the specified direction, false otherwise.\n  */\npublic boolean canScrollVertically(int direction) {\n     final int offset = computeVerticalScrollOffset();\n     final int range = computeVerticalScrollRange() - computeVerticalScrollExtent();\n     if (range == 0) return false;\n     if (direction < 0) {\n         return offset > 0;\n     } else {\n         return offset < range - 1;\n     }\n }\n```\n\n##\u4f7f\u7528\u4f8b\n**1.\u672b\u5c3e\u3067\u6b21\u306e\u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9**\n\u3088\u304f\u3042\u308b\u30d1\u30bf\u30fc\u30f3\u306e\u30a2\u30ec\u3067\u3059\n\n**2.SwipeRefreshLayout**\nListView\u306e\u6642\u306f\u30ea\u30b9\u30c8\u306e\u5148\u982d\u3067\u4e0b\u65b9\u5411\u306b\u30b9\u30ef\u30a4\u30d7\u3059\u308b\u3068\u3088\u3057\u306a\u306b\u52d5\u3044\u3066\u304f\u308c\u305f*SwipeRefreshLayout*\u3067\u3059\u304cRecyclerView\u3067\u306f\u30ea\u30b9\u30c8\u306e\u5148\u982d\u4ee5\u5916\u3067\u306fsetEnabled(false)\u3057\u3066\u3042\u3052\u306a\u3044\u3068\u610f\u56f3\u3057\u306a\u3044\u4f4d\u7f6e\u3067\u3082onRefresh\u304c\u547c\u3070\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\nrecyclerView.addOnScrollListener\u5185\u306eonScrolled\u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u306b\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u9069\u5207\u306b\u51e6\u7406\u3057\u3066\u304f\u308c\u307e\u3059\n\n```java\nif (!recyclerView.canScrollVertically(-1)) {\n   swipeRefreshLayout.setEnabled(true);\n} else if (binding.included.refresh.isEnabled()) {\n   swipeRefreshLayout.setEnabled(false);\n}\n```\n\n##\u30aa\u30de\u30b1\n\u672b\u5c3e\u691c\u77e5\u306fAdapter\u5185\u3067\u3082\u3067\u304d\u307e\u3059\u3002\nposition\u3092\u4f7f\u3063\u305f\u308a\u30c7\u30fc\u30bf\u3092\u3069\u3046\u3053\u3046\u3057\u305f\u3044\u6642\u306f\u3053\u3061\u3089\u3067\u3082\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u305f\u3060onBindViewHolder\u30e1\u30bd\u30c3\u30c9\u5185\u3067\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u306e\u5909\u66f4\u3092\u3059\u308b\u3068\u304d\u306f\n**java.lang.IllegalStateException: Cannot call this method while RecyclerView is computing a layout or scrolling**\n\u304c\u3067\u308b\u306e\u3092\u9632\u3050\u305f\u3081\u306bHandler\u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n```java\n@Override\npublic void onBindViewHolder(BindingHolder holder, int position) {\n    if (position == getItemCount() - 1) {\n       /*\u30ea\u30b9\u30c8\u306e\u672b\u5c3e\u306b\u6765\u305f\u6642\u306e\u51e6\u7406*/\n\n       handler.post(() -> {/*\u8981\u7d20\u306e\u5909\u66f4\u3092\u3059\u308b\u5834\u5408*/})); \n    }\n}\n```\n\n\n\u4ee5\u4e0a\u3067\u3059\u3002\u8aa4\u308a\u304c\u3042\u308c\u3070\u8a02\u6b63\u3044\u305f\u3057\u307e\u3059(>_<)\n", "tags": ["Android", "android\u958b\u767a"]}