{"context": " More than 1 year has passed since last update.Nexus\u30b5\u30fc\u30d0\u30fc\u306b\u4e0a\u3052\u308b\u65b9\u6cd5\u306b\u82e6\u52b4\u3057\u305f\u306e\u3067\u3001\u30e1\u30e2\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u3084\u308a\u305f\u3044\u3053\u3068\n\nFatJar\u3092\u4f5c\u308a\u305f\u3044 (<- sbt-assembly)\nconf\u30d5\u30a1\u30a4\u30eb\u3092\u52a0\u3048\u3066Zip\u306b\u3057\u305f\u3044 (<- sbt-native-packager)\nZip\u3092Nexus\u306b\u767b\u9332\u3057\u305f\u3044 (<- sbt-release)\n\n\n\u6982\u7565\n\n\nsbt-assembly, sbt-native_packager, sbt-release\u3092\u4f7f\u3046\n\nsbtAssemblyOutput\u3067jar\u306e\u540d\u524d\u3092\u5909\u66f4\u3057\u305f (option)\n\nsharedSettings\u4e2d\u306bNexus\u3078\u306epublish\u306b\u5fc5\u8981\u306a\u60c5\u5831\u3092\u8a18\u8ff0\u3000\n\npublishZipSettings\u306bzip\u5316\u306b\u5fc5\u8981\u306a\u60c5\u5831\u3092\u8a18\u8ff0\n\n\n\u306f\u307e\u3063\u305f\u70b9\n\nBuild.scala\u3067\u306fsbt-native-packager\u306e\u8a2d\u5b9a\u304c\u3046\u307e\u304f\u8aad\u307f\u8fbc\u3081\u306a\u304b\u3063\u305f.. (dist \u304c\u898b\u3064\u304b\u3089\u306a\u3044..)\nroot project\u306b\u5bfe\u3057\u3066\u3082 enablePlugins(JavaAppPackaging) \u3057\u306a\u3044\u3068\u3060\u3081\n\n\nFiles\n\nproject/plugins.sbt\nresolvers += \"sonatype\" at \"https://oss.sonatype.org/content/groups/public\"\n\naddSbtPlugin(\"com.eed3si9n\" % \"sbt-assembly\" % \"0.14.1\")\n\naddSbtPlugin(\"com.github.gseitz\" % \"sbt-release\" % \"1.0.0\")\n\naddSbtPlugin(\"com.typesafe.sbt\" % \"sbt-native-packager\" % \"1.0.4\")\n\n\n\nbuild.sbt\nval libOrganization = \"com.anonymous\"\n// use version.sbt\n// val libVersion = \"\"\n\nval sharedSettings = Seq(\n  // version := libVersion,\n  organization := libOrganization,\n  crossScalaVersions := Seq(\"2.11.7\"),\n  scalacOptions := Seq(\"-deprecation\", \"-encoding\", \"utf8\"),\n  scalaVersion := \"2.11.7\",\n  shellPrompt := { s => Project.extract(s).currentProject.id + \" > \" },\n  skip in update := false,\n  crossPaths := false,\n  publishMavenStyle := true,\n  publishArtifact in Test := false,\n  pomIncludeRepository := { _ => false },\n  publishArtifact in (Compile, packageDoc) := false,\n  publishArtifact in (Compile, packageSrc) := false,\n  publishTo <<= (version) apply { v: String =>\n    val anonymous_base = \"http://nexus.anonymous/nexus/content/repositories/\"\n    if (v.trim.endsWith(\"SNAPSHOT\"))\n      Some(\"snapshots\" at anonymous_base + \"snapshots\")\n    else\n      Some(\"releases\"  at anonymous_base + \"anonymous\")\n  },\n  credentials += Credentials(Path.userHome / \".ivy2\" / \".credentials\"),\n  resolvers ++= Seq(\n    Resolver.mavenLocal,\n    // without this Resolvers, it will conflict with anonymous repos.\n    Resolver.sonatypeRepo(\"releases\"),\n    Resolver.sonatypeRepo(\"snapshots\"),\n    \"anonymous\" at \"http://nexus.anonymous/nexus/content/repositories/anonymous\",\n    \"Twitter Repository\" at \"https://maven.twttr.com\"),\n  libraryDependencies ++= Seq(),\n  testOptions in Test += Tests.Argument(TestFrameworks.ScalaTest, \"-oDS\")\n)\n\nlazy val sbtAssemblyOutput = Seq(\n  assemblyJarName in assembly <<= (name, version) map { (name, version) =>\n    name + \".jar\"\n  }\n)\n\n// aggregate fatjar by sbt-assembly and conf files to zip.\nval publishDist = TaskKey[sbt.File](\"publish-dist\", \"publish the dist artifact\")\nlazy val publishZipSettings = Seq(\n  publish <<= (publish) dependsOn dist,\n  publishLocal <<= (publishLocal) dependsOn dist,\n  artifact in publishDist ~= {\n    (art: Artifact) => art.copy(`type` = \"zip\", extension = \"zip\")\n  },\n  // first, removes all in mappings and adds fat jar.\n  mappings in Universal := {\n    val universalMappings = (mappings in Universal).value\n    val fatJar = (assembly in Compile).value\n    val filtered = universalMappings filter {\n        case (file, name) =>  ! name.endsWith(\".jar\")\n    }\n    filtered :+ (fatJar -> (\"lib/\" + fatJar.getName))\n  },\n  mappings in Universal += file(\"some.conf\") -> \"conf/some.conf\",\n  publishDist <<= (target in Universal, normalizedName, version) map { (targetDir, id, version) =>\n    val packageName = \"%s-%s\" format(id, version)\n    targetDir / (packageName + \".zip\")\n  }\n)\n\nlazy val hello = (project in file(\"hello\"))\n.settings( name := \"hello\")\n.enablePlugins(JavaAppPackaging)\n.settings( sharedSettings: _*)\n.settings( publishZipSettings: _*)\n.settings( sbtAssemblyOutput: _*)\n.settings( mainClass in assembly := Some(\"Hello\"))\n.settings( addArtifact(artifact in publishDist, publishDist) )\n\nlazy val root = (project in file(\".\"))\n.settings( name := \"test\")\n.enablePlugins(JavaAppPackaging)\n.settings(sharedSettings: _*)\n.settings( aggregate in update := false)\n.settings( isSnapshot := true)\n.aggregate(hello)\n\n\n\nversion.sbt\nversion in ThisBuild := \"0.0.1-SNAPSHOT\" \n\n\n$ sbt release\n\n\n\u53c2\u8003\u306b\u3057\u305f\u30b5\u30a4\u30c8\n\ndeployment - How do I publish a fat JAR (JAR with dependencies) using sbt and sbt-release? - Stack Overflow\nplayframework - How to publish Play's \"dist\" zip file to remote Maven repository? - Stack Overflow\nUniversal Plugin \u2014 sbt-native-packager 1.1.0-SNAPSHOT documentation\n\n\nNexus\u30b5\u30fc\u30d0\u30fc\u306b\u4e0a\u3052\u308b\u65b9\u6cd5\u306b\u82e6\u52b4\u3057\u305f\u306e\u3067\u3001\u30e1\u30e2\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n## \u3084\u308a\u305f\u3044\u3053\u3068\n\n- FatJar\u3092\u4f5c\u308a\u305f\u3044 (<- sbt-assembly)\n- conf\u30d5\u30a1\u30a4\u30eb\u3092\u52a0\u3048\u3066Zip\u306b\u3057\u305f\u3044 (<- sbt-native-packager)\n- Zip\u3092Nexus\u306b\u767b\u9332\u3057\u305f\u3044 (<- sbt-release)\n\n## \u6982\u7565\n\n- `sbt-assembly`, `sbt-native_packager`, `sbt-release`\u3092\u4f7f\u3046\n- `sbtAssemblyOutput`\u3067jar\u306e\u540d\u524d\u3092\u5909\u66f4\u3057\u305f (option)\n- `sharedSettings`\u4e2d\u306bNexus\u3078\u306epublish\u306b\u5fc5\u8981\u306a\u60c5\u5831\u3092\u8a18\u8ff0\u3000\n- `publishZipSettings`\u306bzip\u5316\u306b\u5fc5\u8981\u306a\u60c5\u5831\u3092\u8a18\u8ff0\n\n\n## \u306f\u307e\u3063\u305f\u70b9\n- Build.scala\u3067\u306fsbt-native-packager\u306e\u8a2d\u5b9a\u304c\u3046\u307e\u304f\u8aad\u307f\u8fbc\u3081\u306a\u304b\u3063\u305f.. (`dist` \u304c\u898b\u3064\u304b\u3089\u306a\u3044..)\n- root project\u306b\u5bfe\u3057\u3066\u3082 `enablePlugins(JavaAppPackaging)` \u3057\u306a\u3044\u3068\u3060\u3081\n\n## Files\n\n```project/plugins.sbt\nresolvers += \"sonatype\" at \"https://oss.sonatype.org/content/groups/public\"\n\naddSbtPlugin(\"com.eed3si9n\" % \"sbt-assembly\" % \"0.14.1\")\n\naddSbtPlugin(\"com.github.gseitz\" % \"sbt-release\" % \"1.0.0\")\n\naddSbtPlugin(\"com.typesafe.sbt\" % \"sbt-native-packager\" % \"1.0.4\")\n```\n\n```build.sbt\nval libOrganization = \"com.anonymous\"\n// use version.sbt\n// val libVersion = \"\"\n\nval sharedSettings = Seq(\n  // version := libVersion,\n  organization := libOrganization,\n  crossScalaVersions := Seq(\"2.11.7\"),\n  scalacOptions := Seq(\"-deprecation\", \"-encoding\", \"utf8\"),\n  scalaVersion := \"2.11.7\",\n  shellPrompt := { s => Project.extract(s).currentProject.id + \" > \" },\n  skip in update := false,\n  crossPaths := false,\n  publishMavenStyle := true,\n  publishArtifact in Test := false,\n  pomIncludeRepository := { _ => false },\n  publishArtifact in (Compile, packageDoc) := false,\n  publishArtifact in (Compile, packageSrc) := false,\n  publishTo <<= (version) apply { v: String =>\n    val anonymous_base = \"http://nexus.anonymous/nexus/content/repositories/\"\n    if (v.trim.endsWith(\"SNAPSHOT\"))\n      Some(\"snapshots\" at anonymous_base + \"snapshots\")\n    else\n      Some(\"releases\"  at anonymous_base + \"anonymous\")\n  },\n  credentials += Credentials(Path.userHome / \".ivy2\" / \".credentials\"),\n  resolvers ++= Seq(\n    Resolver.mavenLocal,\n    // without this Resolvers, it will conflict with anonymous repos.\n    Resolver.sonatypeRepo(\"releases\"),\n    Resolver.sonatypeRepo(\"snapshots\"),\n    \"anonymous\" at \"http://nexus.anonymous/nexus/content/repositories/anonymous\",\n    \"Twitter Repository\" at \"https://maven.twttr.com\"),\n  libraryDependencies ++= Seq(),\n  testOptions in Test += Tests.Argument(TestFrameworks.ScalaTest, \"-oDS\")\n)\n\nlazy val sbtAssemblyOutput = Seq(\n  assemblyJarName in assembly <<= (name, version) map { (name, version) =>\n    name + \".jar\"\n  }\n)\n\n// aggregate fatjar by sbt-assembly and conf files to zip.\nval publishDist = TaskKey[sbt.File](\"publish-dist\", \"publish the dist artifact\")\nlazy val publishZipSettings = Seq(\n  publish <<= (publish) dependsOn dist,\n  publishLocal <<= (publishLocal) dependsOn dist,\n  artifact in publishDist ~= {\n    (art: Artifact) => art.copy(`type` = \"zip\", extension = \"zip\")\n  },\n  // first, removes all in mappings and adds fat jar.\n  mappings in Universal := {\n    val universalMappings = (mappings in Universal).value\n    val fatJar = (assembly in Compile).value\n    val filtered = universalMappings filter {\n        case (file, name) =>  ! name.endsWith(\".jar\")\n    }\n    filtered :+ (fatJar -> (\"lib/\" + fatJar.getName))\n  },\n  mappings in Universal += file(\"some.conf\") -> \"conf/some.conf\",\n  publishDist <<= (target in Universal, normalizedName, version) map { (targetDir, id, version) =>\n    val packageName = \"%s-%s\" format(id, version)\n    targetDir / (packageName + \".zip\")\n  }\n)\n\nlazy val hello = (project in file(\"hello\"))\n.settings( name := \"hello\")\n.enablePlugins(JavaAppPackaging)\n.settings( sharedSettings: _*)\n.settings( publishZipSettings: _*)\n.settings( sbtAssemblyOutput: _*)\n.settings( mainClass in assembly := Some(\"Hello\"))\n.settings( addArtifact(artifact in publishDist, publishDist) )\n\nlazy val root = (project in file(\".\"))\n.settings( name := \"test\")\n.enablePlugins(JavaAppPackaging)\n.settings(sharedSettings: _*)\n.settings( aggregate in update := false)\n.settings( isSnapshot := true)\n.aggregate(hello)\n```\n\n```version.sbt\nversion in ThisBuild := \"0.0.1-SNAPSHOT\" \n```\n\n```shell\n$ sbt release\n```\n\n\n## \u53c2\u8003\u306b\u3057\u305f\u30b5\u30a4\u30c8\n- <a href='http://stackoverflow.com/questions/23070469/how-do-i-publish-a-fat-jar-jar-with-dependencies-using-sbt-and-sbt-release'>deployment - How do I publish a fat JAR (JAR with dependencies) using sbt and sbt-release? - Stack Overflow</a>\n- <a href='http://stackoverflow.com/questions/26452140/how-to-publish-plays-dist-zip-file-to-remote-maven-repository'>playframework - How to publish Play's \"dist\" zip file to remote Maven repository? - Stack Overflow</a>\n- <a href='http://www.scala-sbt.org/sbt-native-packager/formats/universal.html'>Universal Plugin \u2014 sbt-native-packager 1.1.0-SNAPSHOT documentation</a>\n", "tags": ["sbt", "Scala"]}