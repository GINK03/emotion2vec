{"tags": ["R", "\u6570\u5b66", "\u6a5f\u68b0\u5b66\u7fd2", "MachineLearning", "math"], "context": " More than 1 year has passed since last update.\n\n\u3000\u3010\u3000\u6ce8 \u8a18\u3000\u3011\n\n\u203b \u4ee5\u4e0b\u3067\u306f\u3001\u8a08\u7b97\u901f\u5ea6\u9ad8\u901f\u5316\u30fb\u8ca0\u8377\u8efd\u6e1b\u5316\u3092\u3081\u3056\u3059\u300c\u6700\u9069\u5316\u300d\u3067\u306f\u306a\u304f\u3001\u95a2\u6570\u306e\u6700\u5c0f\u5024\u30fb\u6700\u5927\u5024\u554f\u984c\u3092\u89e3\u304f\u300c\u6700\u9069\u5316\u554f\u984c\u300d\u3092\u6271\u3044\u307e\u3059\n\n\u6700\u9069\u5316\u554f\u984c\u3092\u89e3\u304f\u5834\u9762\uff08\u591a\u5909\u91cf\u89e3\u6790\u30fb\u6a5f\u68b0\u5b66\u7fd2\u30fb\u7d71\u8a08\u7684\u5b66\u7fd2\u306e\u9818\u57df\uff09\n\n\n\uff08\u4f8b\uff11\uff09\u7dda\u5f62\u56de\u5e30\uff08\u6700\u5c0f\u4e8c\u4e57\u6cd5\uff09 \u21d2 \u8aa4\u5dee\u95a2\u6570\u306e\u6700\u5c0f\u5316\n\n\uff08\u4f8b\uff12\uff09\u7dda\u5f62\u56de\u5e30\uff08\u6700\u5c24\u6cd5\uff09\u21d2 \u5c24\u5ea6\u95a2\u6570\u306e\u6700\u5927\u5316\n\n\uff08\u4f8b\uff13\uff09\u30d9\u30a4\u30ba\u7d71\u8a08\u3000\u21d2 \u4e8b\u5f8c\u5206\u5e03\u306e\u6700\u5927\u5024\u30fb\u6700\u5c0f\u5024\u306e\u63a2\u7d22\n\n\n\uff11\u5909\u6570\u306e\u6700\u9069\u5316\u554f\u984c\uff1a optimize() \u95a2\u6570\n\n\u3010\u95a2\u6570\u5b9a\u7fa9\u3011\noptimize(f = , interval = ,  ..., lower = min(interval), upper = max(interval), maximum = FALSE, tol = .Machine$double.eps^0.25)\n\n\uff08\u5f15\u6570\u30fb\u30aa\u30d7\u30b7\u30e7\u30f3\uff09\n-f : \u6700\u5927\u5024\u30fb\u6700\u5c0f\u5024\u3092\u6c42\u3081\u305f\u3044\u95a2\u6570\n-interval :\u6700\u5927\u5024 \u307e\u305f\u306f \u6700\u5927\u5024\u3092\u63a2\u7d22\u3059\u308b\u533a\u9593\u3068\uff08\u5f53\u8a72\u533a\u9593\u5185\u306e\uff09\u30c7\u30fc\u30bf\u70b9\u3092\u8a18\u8ff0\u3059\u308b\u30d9\u30af\u30c8\u30eb\u578b\u30c7\u30fc\u30bf\n-lower : \u63a2\u7d22\u533a\u9593\u306e\u6700\u5c0f\u5024\n-upper : \u63a2\u7d22\u533a\u9593\u306e\u6700\u5927\u5024\n-tol : \u8fd4\u308a\u5024\u306e\u6841\u6570\n-maximum : \u6700\u5927\u5316\u554f\u984c\u3092\u89e3\u304f\u5426\u304b\u3092\u8ad6\u7406\u5024\uff08true or false\uff09\u3067\u6307\u5b9a\u3002 \u203b\u30c7\u30d5\u30a9\u30eb\u30c8\u306f false \u3067\u6700\u5c0f\u5316\u554f\u984c\u3092\u89e3\u304f\n\n\uff08\u623b\u308a\u5024\uff08\u8fd4\u308a\u5024\uff09\uff09\n-minumum or maximum : \u6700\u5c0f\u5024 \u3082\u3057\u304f\u306f \u6700\u5927\u5024\u306e\uff08\u63a2\u7d22\u30c7\u30fc\u30bf\u533a\u9593\u4e2d\u306e\uff09\u4f4d\u7f6e\uff08\u4f55\u756a\u76ee\u306e\u30c7\u30fc\u30bf\u70b9\u304c\u8a72\u5f53\u70b9\u3067\u3042\u308b\u304b\uff09\u203b\u4f8b\uff1a y = f(x) = a*x \u306e x \u306e\u5024\n-objective : \u6700\u5c0f\u5024 \u3082\u3057\u304f\u306f \u6700\u5927\u5024\u3000\u203b objective \u756a\u76ee\u306e\u30c7\u30fc\u30bf\u70b9\u306e\u95a2\u6570\u5024 \u203b\u4f8b\uff1a y = f(x) = a*x \u306e y \u306e\u5024\n\nR\nargs(optimize)\n\n\nfunction (f, interval, ..., lower = min(interval), upper = max(interval), \n    maximum = FALSE, tol = .Machine$double.eps^0.25) \n\n\n\uff08\u4f7f\u7528\u4f8b\uff09\n\nexample() \u95a2\u6570\u3067\u3001\u4f7f\u7528\u30c7\u30e2\u3092\u8868\u793a\u3000\uff08\u203b\u4ee5\u4e0b\u306e\u30b3\u30e1\u30f3\u30c8\u306f\u6295\u7a3f\u8005\u306b\u3088\u308b\u3082\u306e\uff09\n\nR\nexample(optimize)\n\n\n\nR\noptimz> require(graphics) # \u4f8b\u3067\u4f7f\u3046 graphics() \u95a2\u6570\u306e\u8aad\u307f\u8fbc\u307f\n\n # \u95a2\u6570\u306e\u5b9a\u7fa9\uff082\u6b21\u95a2\u6570\uff09\noptimz> f <- function (x, a) (x - a)^2\n\n # _optimize()_ \u95a2\u6570\u306e\u5b9f\u884c\n # \u4e0a\u3067\u5b9a\u7fa9\u3057\u305f\u95a2\u6570 f \uff08\u4f46\u3057\u3001\u5909\u6570 a = 1/3\uff09\u3092\u3001\u63a2\u7d22\u533a\u9593: 0\uff5e1\u3067\u3001\u8fd4\u308a\u5024\u306e\u6841\u6570\uff1a\u5c0f\u6570\u70b9\u7b2c4\u4f4d\u3067\u3001\u6700\u5c0f\u5316\u554f\u984c\u3092\u8a08\u7b97 \noptimz> xmin <- optimize(f, c(0, 1), tol = 0.0001, a = 1/3)\n\n # \u8a08\u7b97\u7d50\u679c\u306e\u8868\u793a\noptimz> xmin\n$minimum\u3000\u3000# \u6700\u5c0f\u5024 x \u306e\u5024\n[1] 0.3333333\n\n$objective # \u4e0a\u8a18 \u6700\u5c0f\u5024 x \u306e\u3068\u304d\u306e f(x) \u306e\u5024\n[1] 0\n\n\n\n\uff08\u4f7f\u7528\u4f8b\uff12\uff09\n\n\u3010\u51fa\u5178\u3011Maria.L.Rizzo\uff08\u8457\uff09 \u300eR\u306b\u3088\u308b\u8a08\u7b97\u6a5f\u7d71\u8a08\u5b66\u300f\uff08\u30aa\u30fc\u30e0\u793e\uff09 p9.394-395\n\n\n \uff08\u4e0a\u8a18\u6587\u732e \u63b2\u8f09\u30b3\u30fc\u30c9\u63b2\u8f09\u30a6\u30a7\u30d6\u30da\u30fc\u30b8\u3078\u306e\u30ea\u30f3\u30af\uff09 \n\n\nR\n### Example 11.11 (One-dimensional optimization with optimize)\n\n    x <- seq(2, 8, .001)\n    y <- log(x + log(x))/(log(1+x))\n    plot(x, y, type = \"l\")\n\n\n\n\nR\n ### \uff08\u3064\u3065\u304d\uff09Example 11.11 (One-dimensional optimization with optimize)\n    f <- function(x)\n        log(x + log(x))/log(1+x)\n\n ### _maximum_ \u30aa\u30d7\u30b7\u30e7\u30f3\u3092 TRUE \u306b\u3057\u3066\u3001\u6700\u5927\u5316\u554f\u984c\u3092\u89e3\u304b\u305b\u308b\n    optimize(f, lower = 4, upper = 8, maximum = TRUE)\n\n\n$maximum    # x\u306e\u6700\u5927\u5024\n[1] 5.792299 \n\n$objective\u3000#  \u4e0a\u8a18 \u6700\u5927\u5024 x \u306e\u3068\u304d\u306e f(x) \u306e\u5024\n[1] 1.055122\n\n\n\u5909\u6570\u304c\uff12\u500b\u4ee5\u4e0a\u306e\u95a2\u6570\u306e\u6700\u9069\u5316\u554f\u984c\uff1a optimize() \u95a2\u6570\n\n\u3010\u95a2\u6570\u5b9a\u7fa9\u3011\u203b \u30c7\u30d5\u30a9\u30eb\u30c8\u306f\u6700\u5c0f\u5316\u8a08\u7b97\u3002\u6700\u5927\u5316\u306f\u3001control \u4e2d\u306e fnscale \u306b\u8ca0\u306e\u6570\u5024\u3092\u6307\u5b9a\u3002\noptim(par, fn, gr = NULL, ..., method = c(\"Nelder-Mead\", \"BFGS\", \"CG\", \"L-BFGS-B\", \"SANN\", \"Brent\"), lower = -Inf, upper = Inf,control = list(), hessian = FALSE)\n\n\uff08\u5f15\u6570\u30fb\u30aa\u30d7\u30b7\u30e7\u30f3\uff09\n\n\u203b \u4e0b\u8a18\u306e\u5f15\u7528\u3092\u4e2d\u5fc3\u306b\u3001\u4e00\u90e8\u3001\u6295\u7a3f\u8005\u304c help() \u30de\u30cb\u30e5\u30a2\u30eb\u306e\u8868\u793a\u5185\u5bb9\u3092\u548c\u8a33\u3057\u3066\u8ffd\u8a18\n\n\uff08\u5f15\u7528\u5143\uff09  RWiki \u300c\u6c4e\u7528\u6700\u9069\u5316\u95a2\u6570 optim() \u306e\u4f7f\u7528\u6cd5\u300d\n\n\n\u203b  optim()  \u306f\u518d\u5e30\u7684\u306b\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u308b(\u76ee\u7684\u95a2\u6570\u81ea\u8eab\u304c\u5185\u90e8\u3067 optim \u3092\u4f7f\u3063\u3066\u3044\u3066\u3082\u826f\u3044\uff09\u3002\u5f15\u6570 par \u306f\u30b9\u30ab\u30e9\u30fc\u3067\u3082\u3001\u30d9\u30af\u30c8\u30eb(\u591a\u5909\u6570\u95a2\u6570)\u3067\u3082\u826f\u3044\n-par : \u76ee\u7684\u95a2\u6570\u306e\u30d9\u30af\u30c8\u30eb\u5f15\u6570\u306b\u5bfe\u3059\u308b\u521d\u671f\u5024\u3002\u3053\u306e\u9078\u629e\u306f\u4e00\u822c\u306b\u8a66\u884c\u932f\u8aa4\u306b\u3088\u3089\u3056\u308b\u3092\u5f97\u306a\u3044\u3002\u307e\u305a\u3044\u9078\u629e\u3092\u3059\u308b\u3068\u3002\u53ce\u675f\u3057\u306a\u3044\u304b\u3001\u5c40\u6240\u7684\u6700\u7684\u5024\u3057\u304b\u5f97\u3089\u308c\u306a\u3044\n-fn :\u6700\u5c0f\u5316(\u65e2\u5b9a)\u3082\u3057\u304f\u306f\u6700\u5927\u5316\u3059\u3079\u304d\u76ee\u7684\u5909\u6570\u3002\u6700\u521d\u306e(\u30d9\u30af\u30c8\u30eb)\u5f15\u6570\u306b\u95a2\u3057\u3066\u6700\u9069\u5316\u304c\u5b9f\u884c\u3055\u308c\u308b\u3002\u8fd4\u308a\u5024\u306f\u30b9\u30ab\u30e9\u30fc\u3067\u3042\u308b\u5fc5\u8981\u3002fn \u306f\u7279\u5b9a\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u5024\u3067\u95a2\u8a55\u4fa1\u4e0d\u80fd\u306a\u3089 NA \u3084 Inf \u5024\u3092\u8fd4\u3057\u3066\u3082\u826f\u3044\u304c\u3001\u521d\u671f\u30d1\u30e9\u30e1\u30fc\u30bf\u5024\u3067\u306f\u6709\u9650\u306e\u5024\u3092\u8fd4\u3055\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044(\"L-BFGS-B\" \u6cd5\u3067\u306f\u5e38\u306b\u6709\u9650\u306e\u5024\u3092\u8fd4\u3059\u5fc5\u8981)\n-gr : \"BFGS\", \"CG\", \"L-BFGS-B\" \u6cd5\u306b\u5bfe\u3059\u308b\u30b0\u30e9\u30c7\u30a3\u30a8\u30f3\u30c8(\u4e00\u968e(\u504f)\u5fae\u5206)\u95a2\u6570\u3002\u3082\u3057 NULL \u3092\u6307\u5b9a(\u65e2\u5b9a)\u3059\u308b\u3068\u3001\u30b0\u30e9\u30c7\u30a3\u30a8\u30f3\u30c8\u95a2\u6570\u306f\u5fae\u5206\u5546\u3092\u7528\u3044\u305f\u6570\u5024\u5fae\u5206\u3067\u8a08\u7b97\u3055\u308c\u308b\u3002\u3082\u3057\u3001\u6bd4\u8f03\u7684\u7c21\u5358\u306b\u5b9a\u7fa9\u3067\u304d\u308b\u306a\u3089\u660e\u793a\u7684\u306b\u4e0e\u3048\u305f\u65b9\u304c\u826f\u3044\u3002\"SANN\" \u6cd5\u306b\u5bfe\u3057\u3066\u306f\u3001\u3053\u308c\u306f\u65b0\u3057\u3044\u5019\u88dc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3068\u89e3\u91c8\u3055\u308c\u3001\u3082\u3057 NULL \u306a\u3089\u65e2\u5b9a\u306e Gaussian Markov kernel \u304c\u4f7f\u7528\u3055\u308c\u308b\u3002\n-method : \u4f7f\u7528\u3059\u308b\u6700\u9069\u5316\u624b\u6cd5\u3092\u6307\u793a\u3059\u308b\u3002\u65e2\u5b9a\u624b\u6cd5\u306f \"Nelder-Mead\" \u6cd5\u3002\n---[\u5404\u624b\u6cd5]-------------------------------------------------------\n\n\"Nelder-Mead\" \u6cd5 : \u95a2\u6570\u5024\u3060\u3051\u3092\u7528\u3044\u3001\u9811\u5065(\u4f8b\u3048\u3070\u521d\u671f\u5024\u306e\u9078\u629e\u306b\u654f\u611f\u3067\u306a\u3044)\u3067\u3042\u308b\u304c\u3001\u76f8\u5bfe\u7684\u306b\u9045\u3044\u3002\u5fae\u5206\u3067\u304d\u306a\u3044\u95a2\u6570\u306b\u5bfe\u3057\u3066\u3082\u305d\u308c\u306a\u308a\u306b\u4f7f\u3048\u308b\n\n\"BFGS\" \u6cd5 : \u6e96\u30cb\u30e5\u30fc\u30c8\u30f3\u6cd5\u3002variable metric \u6cd5\u3068\u3082\u547c\u3070\u308c\u308b\u3002\u95a2\u6570\u5024\u3068\u30b0\u30e9\u30c7\u30a3\u30a8\u30f3\u30c8\u95a2\u6570\u3092\u6700\u9069\u5316\u95a2\u6570\u306e\u66f2\u9762\u3092\u8fd1\u4f3c\u3059\u308b\u306e\u306b\u4f7f\u3046\u3002Broyden, letcher, Goldfarb, Shanno \u306e4\u4eba\u304c\u540c\u6642\u671f\u306b\u63d0\u6848\u3002\n\n\"CG\" \u6cd5 : Fletcher and Reeves \u306b\u3088\u308b\u5171\u5f79\u52fe\u914d\u6cd5\u3002Polak-Ribiere \u3068 Beale-Sorenson \u306b\u3088\u308b\u66f4\u65b0\u6cd5\u3082\u9078\u629e\u3067\u304d\u308b\u5171\u5f79\u52fe\u914d\u6cd5\u306f\u6e96\u30cb\u30e5\u30fc\u30c8\u30f3\u6cd5\u306b\u6bd4\u3079\u308b\u3068\u7834\u7dbb\u3057\u3084\u3059\u3044\u304c\u3001\u30e1\u30e2\u30ea\u30fc\u4f7f\u7528\u91cf\u304c\u5c11\u306a\u3044\u305f\u3081\u3001\u3088\u308a\u5927\u898f\u6a21\u306e\u6700\u9069\u5316\u306b\u4f7f\u3048\u308b\u53ef\u80fd\u6027\n\n\"L-BFGS-B\" \u6cd5 : \u5404\u5909\u6570\u304c\u4e0a\u9650\u30fb\u4e0b\u9650\u306b\u3088\u308b\u5236\u7d04\u6761\u4ef6\u3092\u8a31\u3059\u6e96\u30cb\u30e5\u30fc\u30c8\u30f3\u6cd5\u306e\u5909\u7a2e\u3002\u521d\u671f\u5024\u306f\u3053\u306e\u5236\u7d04\u6761\u4ef6\u3092\u6e80\u305f\u3059\u5fc5\u8981\n\n\"SANN\" \u6cd5 : \u78ba\u7387\u7684\u624b\u6cd5\u3067\u3042\u308b\u3044\u308f\u3086\u308b\u30b7\u30df\u30e5\u30ec\u30fc\u30c6\u30c3\u30c9\u30fb\u30a2\u30cb\u30fc\u30ea\u30f3\u30b0\u6cd5\u3002\u95a2\u6570\u5024\u3060\u3051\u3092\u7528\u3044\u9045\u3044\u3002\u5fae\u5206\u3067\u304d\u306a\u3044\u95a2\u6570\u306b\u3082\u4f7f\u3048\u308b\u3002\u30e1\u30c8\u30ed\u30dd\u30ea\u30b9\u6cd5\u3092\u7528\u3044\u308b\u3002\u7d44\u5408\u305b\u7684\u6700\u9069\u5316\u554f\u984c(\u5de8\u5927\u306a\u6709\u9650\u96c6\u5408\u5185\u304b\u3089\u6700\u9069\u5024\u3092\u63a2\u3059)\u306b\u3082\u4f7f\u3048\u308b\u3002\u4e00\u822c\u7684\u624b\u6cd5\u3067\u306f\u306a\u3044\u304c\u3001\u975e\u5e38\u306b\u30e9\u30d5\u306a\u95a2\u6570\u306b\u5bfe\u3057\u3066\u3082\u826f\u3044\u5024\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\n\n-lower , upper : \"L-BFGS-B\" \u6cd5\u306b\u5bfe\u3059\u308b\u5909\u6570\u306e\u4e0b\u9650\u3001\u4e0a\u9650\u3092\u4e0e\u3048\u308b\u3002\u65e2\u5b9a\u5024\u306f lower = -Inf, upper = Inf\n-control : \u5236\u5fa1\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30ea\u30b9\u30c8\u3002\uff08\u53f3\u304c\u6307\u5b9a\u53ef\u80fd\uff09\u3000\"trace\", \"fnscale\", \"parscale\", \"ndeps\", \"maxit\", \"abstol\", \"reltol\", \"alpha, beta, gamma\", \u30fb\u30fb\u30fb\u307b\u304b\u591a\u6570 \uff08\u8a73\u7d30\u306f\u3001 help(optim) \u3092\u5b9f\u884c\u3057\u3066\u30de\u30cb\u30e5\u30a2\u30eb\u3092\u53c2\u7167\uff09 \n\n\ntrace : \u975e\u8ca0\u6574\u6570\u3002\u3082\u3057\u6b63\u306a\u3089\u9014\u4e2d\u7d50\u679c\u304c\u8868\u793a\u3055\u308c\u308b\u3002\u5024\u304c\u5927\u304d\u3044\u307b\u3069\u3088\u308a\u8a73\u3057\u3044\u60c5\u5831\n\nfnscal : \u6700\u9069\u5316\u306e\u9014\u4e2d\u3067\u3001\u95a2\u6570 fn \u3068 gr \u306b\u9069\u7528\u3055\u308c\u308b\u6bd4\u4f8b\u5b9a\u6570\u3002\u6700\u9069\u5316\u306f\u5b9f\u969b\u306f\u5909\u6570 fn(par)/fnscale \u306b\u5bfe\u3057\u3066\u884c\u308f\u308c\u308b\u3002\u3082\u3057\u8ca0\u306a\u3089\u3070\u3001\u6700\u9069\u5316\u306f\u5b9f\u306f\u6700\u5927\u5316\u3068\u306a\u308b\n\nparscale : \u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u6bd4\u4f8b\u5b9a\u6570(\u30d9\u30af\u30c8\u30eb)\u3002\u6700\u9069\u5316\u306e\u969b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u5b9f\u969b\u306f par/parscale \u3068\u3055\u308c\u308b(\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5909\u5316\u3092\u8a87\u5f35\u30fb\u6291\u5236\u3067\u304d\u308b)\u3002\n\n-hessian : \u8ad6\u7406\u5024\u3002\u6570\u5024\u7684\u306b\u8a08\u7b97\u3057\u305f\u30d8\u30c3\u30b7\u30a2\u30f3(\u4e8c\u968e\u504f\u5fae\u5206\u95a2\u6570\u884c\u5217\u306e\u5024)\u3092\u8fd4\u3059\u3079\u304d\u304b\u3069\u3046\u304b\u3092\u6307\u793a\u3002\n-...- : fn \u3068 gr \u306b\u5f15\u304d\u6e21\u3055\u308c\u308b\u8ffd\u52a0\u306e\u5f15\u6570(\u7fa4)\n\n\uff08\u623b\u308a\u5024\uff08\u8fd4\u308a\u5024\uff09\uff09\n-par : \u8a08\u7b97\u3055\u308c\u305f x \u306e\u5024\uff08\u306e\u96c6\u5408\uff09\n-value : f(x) \u306e x \u306b par \u306e\u5024\u3092\u4ee3\u5165\u3057\u305f\u5024\n-counts : \u8a08\u7b97\u7e70\u308a\u8fd4\u3057\u5b9f\u884c\u56de\u6570\n-convergence : \u8a08\u7b97\u53ce\u675f\u6709\u7121\u7d50\u679c\u3092\u8868\u3059\u30b3\u30fc\u30c9\u5024 \uff080:\u53ce\u675f\u3057\u305f / 1:\u672a\u53ce\u675f\u306e\u307e\u307e\u3001\u8a08\u7b97\u4e0a\u9650\u56de\u6570\u306b\u9054\u3057\u305f \u203b \u305d\u306e\u4ed6\u300110, 51, 52\u304c\u3042\u308b\u3002\u59d4\u7d30\u306f\u3001 help(optim) \u53c2\u7167\uff09\n-message : \u305d\u306e\u4ed6\u3001\u5b9f\u884c\u7d50\u679c\u30e1\u30c3\u30bb\u30fc\u30b8\n-hessian : \u203b hessian \u30aa\u30d7\u30b7\u30e7\u30f3\u3092 TRUE \u306b\u3057\u305f\u5834\u5408\u306e\u307f\u8fd4\u3055\u308c\u308b\u3002\u30d8\u30c3\u30b7\u30a2\u30f3\u63a8\u8a08\u5024\uff08\u5bfe\u79f0\u884c\u5217\uff09\u3002\n\n\uff08\u4f7f\u7528\u4f8b\uff09\n\n\u307e\u305a\u306f\u3001 RWiki \u63b2\u8f09\u306e\u4e8b\u4f8b\u304c\u308f\u304b\u308a\u3084\u3059\u3044 \uff08\u4ee5\u4e0b\u3001\u5f15\u7528\uff09\n\n\u8ca0\u306e\u4e8c\u9805\u5206\u5e03\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6700\u5c24\u63a8\u5b9a\n\n# \u65e2\u5b9a\u306e Nelder-Mead \u6cd5\u3067\u5bfe\u6570\u5c24\u5ea6\u3092\u6700\u5927\u5316(\u30aa\u30d7\u30b7\u30e7\u30f3 fnscale=-1 \u3092\u5fd8\u308c\u305a\u52a0\u3048\u308b)\n\nR\nd <- c(1612,164,71,47,28,17,12,12,5,7,6,3,3,13) # \u30c7\u30fc\u30bf(\u6700\u5f8c\u306f\u500b\u657013\u4ee5\u4e0a)\nNB <- function (s, p) { # \u30d1\u30e9\u30e1\u30fc\u30bf (size, prob)=(s, p) \u306e\u8ca0\u306e\u4e8c\u9805\u5206\u5e03\u306e\u78ba\u7387\u95a2\u6570\n  P <- dnbinom(0:12, size=s, prob=p, log=T) # \u500b\u6570 0,1,...,12 \u306e\u78ba\u7387\u306e\u5bfe\u6570\n  P[14] <- pnbinom(12, size=s, prob=p, lower.tail=F, log.p=T) # \u500b\u657013\u4ee5\u4e0a\u306e\u78ba\u7387\u306e\u5bfe\u6570\n  return(P)\n}\n\n\nLL <- function (x) return(sum(NB(x[1],x[2])*d)) # \u76ee\u7684\u95a2\u6570(\u5bfe\u6570\u5c24\u5ea6\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570)\n\noptim(c(0.2, 0.5), LL, control=list(fnscale=-1)) # \u521d\u671f\u30d1\u30e9\u30e1\u30fc\u30bf (0.2, 0.5) \u3067\u6700\u5927\u5316\u5b9f\u884c\n\n\n\nR\n$par\n[1] 0.1155133 0.1553361  # (size, prob) \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6700\u5c24\u63a8\u5b9a\u5024\n$value\n[1] -1705.324            # \u305d\u306e\u6642\u306e\u5bfe\u6570\u5c24\u5ea6\u5024\n$counts\nfunction gradient\n      63       NA        # Nelder-Mead \u6cd5\u7e70\u308a\u8fd4\u3057\u657063\u56de\u3001gradient \u8a55\u4fa1\u306f\u7121\u3057\n$convergence\n[1] 0                    # \u53ce\u675f\u5224\u5b9a\u30b3\u30fc\u30c9 0 (\u7121\u4e8b\u53ce\u675f)\n$message\nNULL                     # \u305d\u306e\u4ed6\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u7121\u3057\n\n\n\nR\n> sum(d)*exp(NB(res$par[1],res$par[2])) # \u63a8\u5b9a\u5ea6\u6570\u306e\u8a08\u7b97\n\n\n\nR\n [1] 1612.914091  157.371829   74.140527   44.160512   29.052777   20.198801\n[7]   14.546131   10.734116    8.064296    6.142199    4.729214    3.673399\n[13]    2.874090   11.398017\n\n\n\nexample() \u95a2\u6570\u3067\u3001\u4f7f\u7528\u30c7\u30e2\u3092\u8868\u793a\u3000\uff08\u203b\u30b3\u30e1\u30f3\u30c8\u306f\u4e0b\u8a18\u3092\u8ee2\u8a18\uff09\n\n\uff08\u5f15\u7528\u5143\uff09  RWiki \u300c\u6c4e\u7528\u6700\u9069\u5316\u95a2\u6570 optim() \u306e\u4f7f\u7528\u6cd5\u300d\n\n\nR\nexample(optim)\n\n\n\nR\n> require(graphics)\n\n>fr <- function(x) {    # \u76ee\u7684\u95a2\u6570 (Rosenbrock \u306e Banana \u95a2\u6570)\n     x1 <- x[1]; x2 <- x[2]\n     100 * (x2 - x1 * x1)^2 + (1 - x1)^2\n}\n\n> grr <- function(x) { # \u305d\u306e\u30b0\u30e9\u30c7\u30a3\u30a8\u30f3\u30c8\u95a2\u6570 (\u8fd4\u308a\u5024\u304c\u30d9\u30af\u30c8\u30eb\u306b\u6ce8\u610f)\n     x1 <- x[1]; x2 <- x[2]\n     c(-400 * x1 * (x2 - x1 * x1) - 2 * (1 - x1),\n        200 * (x2 - x1 * x1))\n}\n# \u4ee5\u4e0b\u5404\u7a2e\u624b\u6cd5\u306b\u3088\u308b\u6700\u9069\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u6700\u9069\u5024\u3092\u7d39\u4ecb\n# \u591a\u6570\u6c7a\u306b\u3088\u308a\u3001\u6700\u9069\u5024\u306f 1,1 \u3089\u3057\u3044(!?)\n# \u3067\u3082\u6700\u9069\u5024\u306f\u7d50\u69cb\u9055\u3046(\u3088\u3046\u306b\u898b\u3048\u308b)\n\n> optim(c(-1.2,1), fr)  # \u65e2\u5b9a\u306e \"Nelder-Mead\" \u6cd5\n$par\n[1] 1.000260 1.000506\n\n$value\n[1] 8.825241e-08\n\n$counts\nfunction gradient \n     195       NA \n\n$convergence\n[1] 0\n\n$message\nNULL\n\n\n\nR\nres <- optim(c(-1.2,1), fr, grr, method = \"BFGS\"))  # \"BFGS\" \u6cd5\n$par\n[1] 1 1\n\n$value\n[1] 9.594956e-18\n\n$counts\nfunction gradient \n     110       43 \n\n$convergence\n[1] 0\n\n$message\nNULL\n\n\n\nR\noptim(c(-1.2,1), fr, NULL, method = \"BFGS\", hessian = TRUE) # hessian\u3092T\u306b\u8a2d\u5b9a\n\n$par\n[1] 0.9998044 0.9996084\n\n$value\n[1] 3.827383e-08\n\n$counts\nfunction gradient \n     118       38 \n\n$convergence\n[1] 0\n\n$message\nNULL\n\n$hessian  # hessian\uff08\u5bfe\u79f0\u884c\u5217\uff09\u304c\u8fd4\u3055\u308c\u308b\n          [,1]      [,2]\n[1,]  801.6881 -399.9218\n[2,] -399.9218  200.0000\n\n\n\n\u203b \u8a08\u7b97\u304c\u8a2d\u5b9a\u7e70\u308a\u8fd4\u3057\u56de\u6570\u5185\u306b\u53ce\u675f\u3057\u306a\u3044\u4f8b\n\n\u8fd4\u308a\u5024\u306e $convergence \u306e\u30b3\u30fc\u30c9\u5024\u304c\u3001\u300c1\u300d\uff08\u53ce\u675f\u305b\u305a\uff09\u306b\u306a\u3063\u3066\u3044\u308b\n\nR\n## These do not converge in the default number of steps\n> optim(c(-1.2,1), fr, grr, method = \"CG\")\n$par\n[1] -0.7648373  0.5927588\n\n$value\n[1] 3.106579\n\n$counts\nfunction gradient \n     402      101 \n\n$convergence\n[1] 1\n\n$message\nNULL\n\n--------------------------------------------------------------\n\n> optim(c(-1.2,1), fr, grr, method = \"CG\", control = list(type = 2))\n$par\n[1] 0.9944093 0.9888229\n\n$value\n[1] 3.123777e-05\n\n$counts\nfunction gradient \n     385      101 \n\n$convergence\n[1] 1\n\n$message\nNULL\n\n\n\n\u4ee5\u4e0b\u306f\u3001$convergence \u306f\u300c0\u300d\u3060\u304c\u3001$message \u306e\u51fa\u529b\u7d50\u679c\u306b\u6ce8\u76ee\n\nR\n--------------------------------------------------------\n\n> optim(c(-1.2,1), fr, grr, method = \"L-BFGS-B\")\n$par\n[1] 0.9999997 0.9999995\n\n$value\n[1] 2.267577e-13\n\n$counts\nfunction gradient \n      47       47 \n\n$convergence\n[1] 0\n\n$message\n[1] \"CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH\"\n\n--------------------------------------------------------------\n\n> flb <- function(x)\n     { p <- length(x); sum(c(1, rep(4, p-1)) * (x - c(1, x[-p])^2)^2) }\n\n> ## 25-dimensional box constrained\n> optim(rep(3, 25), flb, NULL, method = \"L-BFGS-B\",\nlower = rep(2, 25), upper = rep(4, 25)) # par[24] is *not* at boundary\n$par\n [1] 2.000000 2.000000 2.000000 2.000000 2.000000 2.000000 2.000000 2.000000 2.000000 2.000000\n[11] 2.000000 2.000000 2.000000 2.000000 2.000000 2.000000 2.000000 2.000000 2.000000 2.000000\n[21] 2.000000 2.000000 2.000000 2.109093 4.000000\n\n$value\n[1] 368.1059\n\n$counts\nfunction gradient \n       6        6 \n\n$convergence\n[1] 0\n\n$message\n[1] \"CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH\"\n\n\n\n\u4ee5\u4e0b\u3001\u30b0\u30e9\u30d5\u3092\u898b\u306a\u304c\u3089\u306e\u4e8b\u4f8b\n\nR\n> ## \u3042\u308b\u30ef\u30a4\u30eb\u30c9\u306a\u76ee\u7684\u95a2\u6570\n> fw <- function (x)\n     10*sin(0.3*x)*sin(1.3*x^2) + 0.00001*x^4 + 0.2*x+80\n\n# \u30b0\u30e9\u30d5\u3092\u66f8\u3044\u3066\u307f\u308b\u3068\u69d8\u5b50\u304c\u3088\u304f\u308f\u304b\u308b\uff08\u203b \u8d64\u5370\u7b87\u6240\u304c\u3001\u6700\u5c0f\u5024\uff09\n> plot(fw, -50, 50, n = 1000, main = \"optim() minimising 'wild function'\")\n\n\n\n\nR\nres <- optim(50, fw, method = \"SANN\", control = list(maxit = 20000, temp = 20, parscale = 20)) # \"SANN\" \u6cd5\u3067\u7b2c\u4e00\u6bb5\u968e\u6700\u9069\u5316\n\n> res\n$par  # \u771f\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u7d04 -15.81515\n[1] -15.81515\n\n$value\n[1] 67.46773\n\n$counts\nfunction gradient \n   20000       NA \n\n$convergence\n[1] 0\n\n$message\nNULL\n\n> # \"BFGS\" \u6cd5\u3067\u7b2c\u4e8c\u6bb5\u968e\u6700\u9069\u5316\n  ## Now improve locally {typically only by a small bit}:\n> (r2 <- optim(res$par, fw, method = \"BFGS\"))\n$par\n[1] -15.81515  # \"\u771f\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\" \u304c\u6c42\u307e\u3063\u305f\uff01\n\n$value\n[1] 67.46773 # \u6700\u9069\u5024\u3082\u78ba\u304b\u306b\u524d\u3088\u308a\u5c0f\u3055\u3044\n\n$counts\nfunction gradient \n       8        1 \n\n$convergence\n[1] 0\n\n$message\nNULL\n\n\n\n\u5de1\u56de\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u554f\u984c\n\nR\n> points(r2$par, r2$value, pch = 8, col = \"red\", cex = 2)\n\n> ## Combinatorial optimization: Traveling salesman problem\n> library(stats) # normally loaded\n\n> eurodistmat <- as.matrix(eurodist)\n\n> distance <- function(sq) {  # Target function\n     sq2 <- embed(sq, 2)\n     sum(eurodistmat[cbind(sq2[,2], sq2[,1])])\n }\n\n> genseq <- function(sq) {  # Generate new candidate sequence\n     idx <- seq(2, NROW(eurodistmat)-1)\n     changepoints <- sample(idx, size = 2, replace = FALSE)\n     tmp <- sq[changepoints[1]]\n     sq[changepoints[1]] <- sq[changepoints[2]]\n     sq[changepoints[2]] <- tmp\n     sq\n }\n\n> sq <- c(1:nrow(eurodistmat), 1)  # Initial sequence: alphabetic\n\n> distance(sq)\n[1] 29625\n\n> # rotate for conventional orientation\n> loc <- -cmdscale(eurodist, add = TRUE)$points\n\n> x <- loc[,1]; y <- loc[,2]\n\n> s <- seq_len(nrow(eurodistmat))\n> tspinit <- loc[sq,]\n\n> plot(x, y, type = \"n\", asp = 1, xlab = \"\", ylab = \"\", main = \"initial solution of traveling salesman problem\", axes = FALSE)\n\n\n\n\nR\n> arrows(tspinit[s,1], tspinit[s,2], tspinit[s+1,1], tspinit[s+1,2],\nangle = 10, col = \"green\")\n\n> text(x, y, labels(eurodist), cex = 0.8)\n\n> set.seed(123) # chosen to get a good soln relatively quickly\n\n> res <- optim(sq, distance, genseq, method = \"SANN\", control = list(maxit = 30000, temp = 2000, trace = TRUE, REPORT = 500))\nsann objective function values\ninitial       value 29625.000000\niter     5000 value 13585.000000\niter    10000 value 13092.000000\niter    15000 value 13063.000000\niter    20000 value 12919.000000\niter    25000 value 12907.000000\niter    29999 value 12842.000000\nfinal         value 12842.000000\nsann stopped after 29999 iterations\n\n> res  # Near optimum distance around 12842\n$par\n [1]  1 19 16  8 15  2 14  9 12 13 18  5  4  3 11  7 20 10  6 17 21  1\n\n$value\n[1] 12842\n\n$counts\nfunction gradient \n   30000       NA \n\n$convergence\n[1] 0\n\n$message\nNULL\n\n\n\nR\n\n> tspres <- loc[res$par,]\n\n> plot(x, y, type = \"n\", asp = 1, xlab = \"\", ylab = \"\", main = \"optim() 'solving' traveling salesman problem\", axes = FALSE)\n\n> arrows(tspres[s,1], tspres[s,2], tspres[s+1,1], tspres[s+1,2], angle = 10, col = \"red\")\n\n> text(x, y, labels(eurodist), cex = 0.8)\n> \n\n\n\n###\u3000\u3010\u3000\u6ce8 \u8a18\u3000\u3011\n#### \u203b \u4ee5\u4e0b\u3067\u306f\u3001\u8a08\u7b97\u901f\u5ea6\u9ad8\u901f\u5316\u30fb\u8ca0\u8377\u8efd\u6e1b\u5316\u3092\u3081\u3056\u3059\u300c\u6700\u9069\u5316\u300d\u3067\u306f\u306a\u304f\u3001\u95a2\u6570\u306e\u6700\u5c0f\u5024\u30fb\u6700\u5927\u5024\u554f\u984c\u3092\u89e3\u304f\u300c\u6700\u9069\u5316\u554f\u984c\u300d\u3092\u6271\u3044\u307e\u3059\n\n### \u6700\u9069\u5316\u554f\u984c\u3092\u89e3\u304f\u5834\u9762\uff08\u591a\u5909\u91cf\u89e3\u6790\u30fb\u6a5f\u68b0\u5b66\u7fd2\u30fb\u7d71\u8a08\u7684\u5b66\u7fd2\u306e\u9818\u57df\uff09\n--------------------------------------------------\n##### \uff08\u4f8b\uff11\uff09\u7dda\u5f62\u56de\u5e30\uff08\u6700\u5c0f\u4e8c\u4e57\u6cd5\uff09 \u21d2 \u8aa4\u5dee\u95a2\u6570\u306e\u6700\u5c0f\u5316\n##### \uff08\u4f8b\uff12\uff09\u7dda\u5f62\u56de\u5e30\uff08\u6700\u5c24\u6cd5\uff09\u21d2 \u5c24\u5ea6\u95a2\u6570\u306e\u6700\u5927\u5316\n##### \uff08\u4f8b\uff13\uff09\u30d9\u30a4\u30ba\u7d71\u8a08\u3000\u21d2 \u4e8b\u5f8c\u5206\u5e03\u306e\u6700\u5927\u5024\u30fb\u6700\u5c0f\u5024\u306e\u63a2\u7d22\n--------------------------------------------------\n\n### \uff11\u5909\u6570\u306e\u6700\u9069\u5316\u554f\u984c\uff1a _optimize()_ \u95a2\u6570\n\n#### \u3010\u95a2\u6570\u5b9a\u7fa9\u3011\n_optimize(f = , interval = ,  ..., lower = min(interval), upper = max(interval), maximum = FALSE, tol = .Machine$double.eps^0.25)_\n\n##### \uff08\u5f15\u6570\u30fb\u30aa\u30d7\u30b7\u30e7\u30f3\uff09\n-_f_ : \u6700\u5927\u5024\u30fb\u6700\u5c0f\u5024\u3092\u6c42\u3081\u305f\u3044\u95a2\u6570\n-_interval_ :\u6700\u5927\u5024 \u307e\u305f\u306f \u6700\u5927\u5024\u3092\u63a2\u7d22\u3059\u308b\u533a\u9593\u3068\uff08\u5f53\u8a72\u533a\u9593\u5185\u306e\uff09\u30c7\u30fc\u30bf\u70b9\u3092\u8a18\u8ff0\u3059\u308b\u30d9\u30af\u30c8\u30eb\u578b\u30c7\u30fc\u30bf\n-_lower_ : \u63a2\u7d22\u533a\u9593\u306e\u6700\u5c0f\u5024\n-_upper_ : \u63a2\u7d22\u533a\u9593\u306e\u6700\u5927\u5024\n-_tol_ : \u8fd4\u308a\u5024\u306e\u6841\u6570\n-_maximum_ : \u6700\u5927\u5316\u554f\u984c\u3092\u89e3\u304f\u5426\u304b\u3092\u8ad6\u7406\u5024\uff08true or false\uff09\u3067\u6307\u5b9a\u3002 \u203b\u30c7\u30d5\u30a9\u30eb\u30c8\u306f _false_ \u3067\u6700\u5c0f\u5316\u554f\u984c\u3092\u89e3\u304f\n\n##### \uff08\u623b\u308a\u5024\uff08\u8fd4\u308a\u5024\uff09\uff09\n-_minumum_ or _maximum_ : \u6700\u5c0f\u5024 \u3082\u3057\u304f\u306f \u6700\u5927\u5024\u306e\uff08\u63a2\u7d22\u30c7\u30fc\u30bf\u533a\u9593\u4e2d\u306e\uff09\u4f4d\u7f6e\uff08\u4f55\u756a\u76ee\u306e\u30c7\u30fc\u30bf\u70b9\u304c\u8a72\u5f53\u70b9\u3067\u3042\u308b\u304b\uff09\u203b\u4f8b\uff1a _y = f(x) = a*x_ \u306e _x_ \u306e\u5024\n-_objective_ : \u6700\u5c0f\u5024 \u3082\u3057\u304f\u306f \u6700\u5927\u5024\u3000\u203b _objective_ \u756a\u76ee\u306e\u30c7\u30fc\u30bf\u70b9\u306e\u95a2\u6570\u5024 \u203b\u4f8b\uff1a _y = f(x) = a*x_ \u306e _y_ \u306e\u5024\n\n```{r:R}\nargs(optimize)\n```\n\n```\nfunction (f, interval, ..., lower = min(interval), upper = max(interval), \n    maximum = FALSE, tol = .Machine$double.eps^0.25) \n```\n\n#### \uff08\u4f7f\u7528\u4f8b\uff09\n\n##### _example()_ \u95a2\u6570\u3067\u3001\u4f7f\u7528\u30c7\u30e2\u3092\u8868\u793a\u3000\uff08\u203b\u4ee5\u4e0b\u306e\u30b3\u30e1\u30f3\u30c8\u306f\u6295\u7a3f\u8005\u306b\u3088\u308b\u3082\u306e\uff09\n```{r:R}\nexample(optimize)\n```\n\n```{r:R}\noptimz> require(graphics) # \u4f8b\u3067\u4f7f\u3046 graphics() \u95a2\u6570\u306e\u8aad\u307f\u8fbc\u307f\n\n # \u95a2\u6570\u306e\u5b9a\u7fa9\uff082\u6b21\u95a2\u6570\uff09\noptimz> f <- function (x, a) (x - a)^2\n\n # _optimize()_ \u95a2\u6570\u306e\u5b9f\u884c\n # \u4e0a\u3067\u5b9a\u7fa9\u3057\u305f\u95a2\u6570 f \uff08\u4f46\u3057\u3001\u5909\u6570 a = 1/3\uff09\u3092\u3001\u63a2\u7d22\u533a\u9593: 0\uff5e1\u3067\u3001\u8fd4\u308a\u5024\u306e\u6841\u6570\uff1a\u5c0f\u6570\u70b9\u7b2c4\u4f4d\u3067\u3001\u6700\u5c0f\u5316\u554f\u984c\u3092\u8a08\u7b97 \noptimz> xmin <- optimize(f, c(0, 1), tol = 0.0001, a = 1/3)\n\n # \u8a08\u7b97\u7d50\u679c\u306e\u8868\u793a\noptimz> xmin\n$minimum\u3000\u3000# \u6700\u5c0f\u5024 x \u306e\u5024\n[1] 0.3333333\n\n$objective # \u4e0a\u8a18 \u6700\u5c0f\u5024 x \u306e\u3068\u304d\u306e f(x) \u306e\u5024\n[1] 0\n```\n\n#### \uff08\u4f7f\u7528\u4f8b\uff12\uff09\n###### \u3010\u51fa\u5178\u3011_Maria.L.Rizzo\uff08\u8457\uff09_ \u300eR\u306b\u3088\u308b\u8a08\u7b97\u6a5f\u7d71\u8a08\u5b66\u300f\uff08\u30aa\u30fc\u30e0\u793e\uff09 _p9.394-395_\n###### [ \uff08\u4e0a\u8a18\u6587\u732e \u63b2\u8f09\u30b3\u30fc\u30c9\u63b2\u8f09\u30a6\u30a7\u30d6\u30da\u30fc\u30b8\u3078\u306e\u30ea\u30f3\u30af\uff09 ](http://personal.bgsu.edu/~mrizzo/SCR/SCRch11.R)\n\n```{r:R}\n### Example 11.11 (One-dimensional optimization with optimize)\n\n    x <- seq(2, 8, .001)\n    y <- log(x + log(x))/(log(1+x))\n    plot(x, y, type = \"l\")\n```\n![example.11.11.graph.png](https://qiita-image-store.s3.amazonaws.com/0/43487/1e6a1634-7261-fd60-87ac-a9ded168051a.png)\n\n```{r:R}\n ### \uff08\u3064\u3065\u304d\uff09Example 11.11 (One-dimensional optimization with optimize)\n    f <- function(x)\n        log(x + log(x))/log(1+x)\n\n ### _maximum_ \u30aa\u30d7\u30b7\u30e7\u30f3\u3092 TRUE \u306b\u3057\u3066\u3001\u6700\u5927\u5316\u554f\u984c\u3092\u89e3\u304b\u305b\u308b\n    optimize(f, lower = 4, upper = 8, maximum = TRUE)\n```\n\n```\n$maximum    # x\u306e\u6700\u5927\u5024\n[1] 5.792299 \n\n$objective\u3000#  \u4e0a\u8a18 \u6700\u5927\u5024 x \u306e\u3068\u304d\u306e f(x) \u306e\u5024\n[1] 1.055122\n```\n\n### \u5909\u6570\u304c\uff12\u500b\u4ee5\u4e0a\u306e\u95a2\u6570\u306e\u6700\u9069\u5316\u554f\u984c\uff1a _optimize()_ \u95a2\u6570\n\n#### \u3010\u95a2\u6570\u5b9a\u7fa9\u3011\u203b \u30c7\u30d5\u30a9\u30eb\u30c8\u306f\u6700\u5c0f\u5316\u8a08\u7b97\u3002\u6700\u5927\u5316\u306f\u3001_control_ \u4e2d\u306e _fnscale_ \u306b\u8ca0\u306e\u6570\u5024\u3092\u6307\u5b9a\u3002\n_optim(par, fn, gr = NULL, ..., method = c(\"Nelder-Mead\", \"BFGS\", \"CG\", \"L-BFGS-B\", \"SANN\", \"Brent\"), lower = -Inf, upper = Inf,control = list(), hessian = FALSE)_\n\n##### \uff08\u5f15\u6570\u30fb\u30aa\u30d7\u30b7\u30e7\u30f3\uff09\n##### \u203b \u4e0b\u8a18\u306e\u5f15\u7528\u3092\u4e2d\u5fc3\u306b\u3001\u4e00\u90e8\u3001\u6295\u7a3f\u8005\u304c _help()_ \u30de\u30cb\u30e5\u30a2\u30eb\u306e\u8868\u793a\u5185\u5bb9\u3092\u548c\u8a33\u3057\u3066\u8ffd\u8a18\n##### \uff08\u5f15\u7528\u5143\uff09 [ _RWiki_ \u300c\u6c4e\u7528\u6700\u9069\u5316\u95a2\u6570 optim() \u306e\u4f7f\u7528\u6cd5\u300d](http://www.okada.jp.org/RWiki/?%B4%D8%BF%F4%A4%CE%BA%C7%C2%E7%A1%A6%BA%C7%BE%AE%B2%BD)\n\n##### \u203b  _optim()_  \u306f\u518d\u5e30\u7684\u306b\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u308b(\u76ee\u7684\u95a2\u6570\u81ea\u8eab\u304c\u5185\u90e8\u3067 optim \u3092\u4f7f\u3063\u3066\u3044\u3066\u3082\u826f\u3044\uff09\u3002\u5f15\u6570 par \u306f\u30b9\u30ab\u30e9\u30fc\u3067\u3082\u3001\u30d9\u30af\u30c8\u30eb(\u591a\u5909\u6570\u95a2\u6570)\u3067\u3082\u826f\u3044\n-_par_ : \u76ee\u7684\u95a2\u6570\u306e\u30d9\u30af\u30c8\u30eb\u5f15\u6570\u306b\u5bfe\u3059\u308b\u521d\u671f\u5024\u3002\u3053\u306e\u9078\u629e\u306f\u4e00\u822c\u306b\u8a66\u884c\u932f\u8aa4\u306b\u3088\u3089\u3056\u308b\u3092\u5f97\u306a\u3044\u3002\u307e\u305a\u3044\u9078\u629e\u3092\u3059\u308b\u3068\u3002\u53ce\u675f\u3057\u306a\u3044\u304b\u3001\u5c40\u6240\u7684\u6700\u7684\u5024\u3057\u304b\u5f97\u3089\u308c\u306a\u3044\n\n-_fn_ :\u6700\u5c0f\u5316(\u65e2\u5b9a)\u3082\u3057\u304f\u306f\u6700\u5927\u5316\u3059\u3079\u304d\u76ee\u7684\u5909\u6570\u3002\u6700\u521d\u306e(\u30d9\u30af\u30c8\u30eb)\u5f15\u6570\u306b\u95a2\u3057\u3066\u6700\u9069\u5316\u304c\u5b9f\u884c\u3055\u308c\u308b\u3002\u8fd4\u308a\u5024\u306f\u30b9\u30ab\u30e9\u30fc\u3067\u3042\u308b\u5fc5\u8981\u3002fn \u306f\u7279\u5b9a\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u5024\u3067\u95a2\u8a55\u4fa1\u4e0d\u80fd\u306a\u3089 NA \u3084 Inf \u5024\u3092\u8fd4\u3057\u3066\u3082\u826f\u3044\u304c\u3001\u521d\u671f\u30d1\u30e9\u30e1\u30fc\u30bf\u5024\u3067\u306f\u6709\u9650\u306e\u5024\u3092\u8fd4\u3055\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044(\"L-BFGS-B\" \u6cd5\u3067\u306f\u5e38\u306b\u6709\u9650\u306e\u5024\u3092\u8fd4\u3059\u5fc5\u8981)\n\n-_gr_ : \"BFGS\", \"CG\", \"L-BFGS-B\" \u6cd5\u306b\u5bfe\u3059\u308b\u30b0\u30e9\u30c7\u30a3\u30a8\u30f3\u30c8(\u4e00\u968e(\u504f)\u5fae\u5206)\u95a2\u6570\u3002\u3082\u3057 NULL \u3092\u6307\u5b9a(\u65e2\u5b9a)\u3059\u308b\u3068\u3001\u30b0\u30e9\u30c7\u30a3\u30a8\u30f3\u30c8\u95a2\u6570\u306f\u5fae\u5206\u5546\u3092\u7528\u3044\u305f\u6570\u5024\u5fae\u5206\u3067\u8a08\u7b97\u3055\u308c\u308b\u3002\u3082\u3057\u3001\u6bd4\u8f03\u7684\u7c21\u5358\u306b\u5b9a\u7fa9\u3067\u304d\u308b\u306a\u3089\u660e\u793a\u7684\u306b\u4e0e\u3048\u305f\u65b9\u304c\u826f\u3044\u3002\"SANN\" \u6cd5\u306b\u5bfe\u3057\u3066\u306f\u3001\u3053\u308c\u306f\u65b0\u3057\u3044\u5019\u88dc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3068\u89e3\u91c8\u3055\u308c\u3001\u3082\u3057 NULL \u306a\u3089\u65e2\u5b9a\u306e Gaussian Markov kernel \u304c\u4f7f\u7528\u3055\u308c\u308b\u3002\n\n-_method_ : \u4f7f\u7528\u3059\u308b\u6700\u9069\u5316\u624b\u6cd5\u3092\u6307\u793a\u3059\u308b\u3002\u65e2\u5b9a\u624b\u6cd5\u306f \"Nelder-Mead\" \u6cd5\u3002\n\n\n---[\u5404\u624b\u6cd5]-------------------------------------------------------\n###### \"Nelder-Mead\" \u6cd5 : \u95a2\u6570\u5024\u3060\u3051\u3092\u7528\u3044\u3001\u9811\u5065(\u4f8b\u3048\u3070\u521d\u671f\u5024\u306e\u9078\u629e\u306b\u654f\u611f\u3067\u306a\u3044)\u3067\u3042\u308b\u304c\u3001\u76f8\u5bfe\u7684\u306b\u9045\u3044\u3002\u5fae\u5206\u3067\u304d\u306a\u3044\u95a2\u6570\u306b\u5bfe\u3057\u3066\u3082\u305d\u308c\u306a\u308a\u306b\u4f7f\u3048\u308b\n\n###### \"BFGS\" \u6cd5 : \u6e96\u30cb\u30e5\u30fc\u30c8\u30f3\u6cd5\u3002variable metric \u6cd5\u3068\u3082\u547c\u3070\u308c\u308b\u3002\u95a2\u6570\u5024\u3068\u30b0\u30e9\u30c7\u30a3\u30a8\u30f3\u30c8\u95a2\u6570\u3092\u6700\u9069\u5316\u95a2\u6570\u306e\u66f2\u9762\u3092\u8fd1\u4f3c\u3059\u308b\u306e\u306b\u4f7f\u3046\u3002Broyden, letcher, Goldfarb, Shanno \u306e4\u4eba\u304c\u540c\u6642\u671f\u306b\u63d0\u6848\u3002 \n\n###### \"CG\" \u6cd5 : Fletcher and Reeves \u306b\u3088\u308b\u5171\u5f79\u52fe\u914d\u6cd5\u3002Polak-Ribiere \u3068 Beale-Sorenson \u306b\u3088\u308b\u66f4\u65b0\u6cd5\u3082\u9078\u629e\u3067\u304d\u308b\u5171\u5f79\u52fe\u914d\u6cd5\u306f\u6e96\u30cb\u30e5\u30fc\u30c8\u30f3\u6cd5\u306b\u6bd4\u3079\u308b\u3068\u7834\u7dbb\u3057\u3084\u3059\u3044\u304c\u3001\u30e1\u30e2\u30ea\u30fc\u4f7f\u7528\u91cf\u304c\u5c11\u306a\u3044\u305f\u3081\u3001\u3088\u308a\u5927\u898f\u6a21\u306e\u6700\u9069\u5316\u306b\u4f7f\u3048\u308b\u53ef\u80fd\u6027\n\n###### \"L-BFGS-B\" \u6cd5 : \u5404\u5909\u6570\u304c\u4e0a\u9650\u30fb\u4e0b\u9650\u306b\u3088\u308b\u5236\u7d04\u6761\u4ef6\u3092\u8a31\u3059\u6e96\u30cb\u30e5\u30fc\u30c8\u30f3\u6cd5\u306e\u5909\u7a2e\u3002\u521d\u671f\u5024\u306f\u3053\u306e\u5236\u7d04\u6761\u4ef6\u3092\u6e80\u305f\u3059\u5fc5\u8981\n\n###### \"SANN\" \u6cd5 : \u78ba\u7387\u7684\u624b\u6cd5\u3067\u3042\u308b\u3044\u308f\u3086\u308b\u30b7\u30df\u30e5\u30ec\u30fc\u30c6\u30c3\u30c9\u30fb\u30a2\u30cb\u30fc\u30ea\u30f3\u30b0\u6cd5\u3002\u95a2\u6570\u5024\u3060\u3051\u3092\u7528\u3044\u9045\u3044\u3002\u5fae\u5206\u3067\u304d\u306a\u3044\u95a2\u6570\u306b\u3082\u4f7f\u3048\u308b\u3002\u30e1\u30c8\u30ed\u30dd\u30ea\u30b9\u6cd5\u3092\u7528\u3044\u308b\u3002\u7d44\u5408\u305b\u7684\u6700\u9069\u5316\u554f\u984c(\u5de8\u5927\u306a\u6709\u9650\u96c6\u5408\u5185\u304b\u3089\u6700\u9069\u5024\u3092\u63a2\u3059)\u306b\u3082\u4f7f\u3048\u308b\u3002\u4e00\u822c\u7684\u624b\u6cd5\u3067\u306f\u306a\u3044\u304c\u3001\u975e\u5e38\u306b\u30e9\u30d5\u306a\u95a2\u6570\u306b\u5bfe\u3057\u3066\u3082\u826f\u3044\u5024\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\n-----------------------------------------------------------------\n\n-_lower_ , _upper_ : \"L-BFGS-B\" \u6cd5\u306b\u5bfe\u3059\u308b\u5909\u6570\u306e\u4e0b\u9650\u3001\u4e0a\u9650\u3092\u4e0e\u3048\u308b\u3002\u65e2\u5b9a\u5024\u306f lower = -Inf, upper = Inf\n\n-_control_ : \u5236\u5fa1\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30ea\u30b9\u30c8\u3002\uff08\u53f3\u304c\u6307\u5b9a\u53ef\u80fd\uff09\u3000\"trace\", \"fnscale\", \"parscale\", \"ndeps\", \"maxit\", \"abstol\", \"reltol\", \"alpha, beta, gamma\", \u30fb\u30fb\u30fb\u307b\u304b\u591a\u6570 \uff08\u8a73\u7d30\u306f\u3001 _help(optim)_ \u3092\u5b9f\u884c\u3057\u3066\u30de\u30cb\u30e5\u30a2\u30eb\u3092\u53c2\u7167\uff09 \n\n-----------------------------------------------------------------\n###### _trace_ : \u975e\u8ca0\u6574\u6570\u3002\u3082\u3057\u6b63\u306a\u3089\u9014\u4e2d\u7d50\u679c\u304c\u8868\u793a\u3055\u308c\u308b\u3002\u5024\u304c\u5927\u304d\u3044\u307b\u3069\u3088\u308a\u8a73\u3057\u3044\u60c5\u5831\n\n###### _fnscal_ : \u6700\u9069\u5316\u306e\u9014\u4e2d\u3067\u3001\u95a2\u6570 fn \u3068 gr \u306b\u9069\u7528\u3055\u308c\u308b\u6bd4\u4f8b\u5b9a\u6570\u3002\u6700\u9069\u5316\u306f\u5b9f\u969b\u306f\u5909\u6570 fn(par)/fnscale \u306b\u5bfe\u3057\u3066\u884c\u308f\u308c\u308b\u3002\u3082\u3057\u8ca0\u306a\u3089\u3070\u3001\u6700\u9069\u5316\u306f\u5b9f\u306f\u6700\u5927\u5316\u3068\u306a\u308b\n\n###### _parscale_ : \u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u6bd4\u4f8b\u5b9a\u6570(\u30d9\u30af\u30c8\u30eb)\u3002\u6700\u9069\u5316\u306e\u969b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u5b9f\u969b\u306f par/parscale \u3068\u3055\u308c\u308b(\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5909\u5316\u3092\u8a87\u5f35\u30fb\u6291\u5236\u3067\u304d\u308b)\u3002\n\n\n-----------------------------------------------------------------\n\n\n-_hessian_ : \u8ad6\u7406\u5024\u3002\u6570\u5024\u7684\u306b\u8a08\u7b97\u3057\u305f\u30d8\u30c3\u30b7\u30a2\u30f3(\u4e8c\u968e\u504f\u5fae\u5206\u95a2\u6570\u884c\u5217\u306e\u5024)\u3092\u8fd4\u3059\u3079\u304d\u304b\u3069\u3046\u304b\u3092\u6307\u793a\u3002\n\n-...- : fn \u3068 gr \u306b\u5f15\u304d\u6e21\u3055\u308c\u308b\u8ffd\u52a0\u306e\u5f15\u6570(\u7fa4)\n\n##### \uff08\u623b\u308a\u5024\uff08\u8fd4\u308a\u5024\uff09\uff09\n\n-_par_ : \u8a08\u7b97\u3055\u308c\u305f _x_ \u306e\u5024\uff08\u306e\u96c6\u5408\uff09\n\n-_value_ : _f(x)_ \u306e _x_ \u306b _par_ \u306e\u5024\u3092\u4ee3\u5165\u3057\u305f\u5024\n\n-_counts_ : \u8a08\u7b97\u7e70\u308a\u8fd4\u3057\u5b9f\u884c\u56de\u6570\n\n-_convergence_ : \u8a08\u7b97\u53ce\u675f\u6709\u7121\u7d50\u679c\u3092\u8868\u3059\u30b3\u30fc\u30c9\u5024 \uff080:\u53ce\u675f\u3057\u305f / 1:\u672a\u53ce\u675f\u306e\u307e\u307e\u3001\u8a08\u7b97\u4e0a\u9650\u56de\u6570\u306b\u9054\u3057\u305f \u203b \u305d\u306e\u4ed6\u300110, 51, 52\u304c\u3042\u308b\u3002\u59d4\u7d30\u306f\u3001 _help(optim)_ \u53c2\u7167\uff09\n\n-_message_ : \u305d\u306e\u4ed6\u3001\u5b9f\u884c\u7d50\u679c\u30e1\u30c3\u30bb\u30fc\u30b8\n\n-_hessian_ : \u203b _hessian_ \u30aa\u30d7\u30b7\u30e7\u30f3\u3092 _TRUE_ \u306b\u3057\u305f\u5834\u5408\u306e\u307f\u8fd4\u3055\u308c\u308b\u3002\u30d8\u30c3\u30b7\u30a2\u30f3\u63a8\u8a08\u5024\uff08\u5bfe\u79f0\u884c\u5217\uff09\u3002\n\n#### \uff08\u4f7f\u7528\u4f8b\uff09\n\n##### \u307e\u305a\u306f\u3001 _RWiki_ \u63b2\u8f09\u306e\u4e8b\u4f8b\u304c\u308f\u304b\u308a\u3084\u3059\u3044 \uff08\u4ee5\u4e0b\u3001\u5f15\u7528\uff09\n###### \u8ca0\u306e\u4e8c\u9805\u5206\u5e03\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6700\u5c24\u63a8\u5b9a \n####### \u65e2\u5b9a\u306e Nelder-Mead \u6cd5\u3067\u5bfe\u6570\u5c24\u5ea6\u3092\u6700\u5927\u5316(\u30aa\u30d7\u30b7\u30e7\u30f3 fnscale=-1 \u3092\u5fd8\u308c\u305a\u52a0\u3048\u308b)\n```{r:R}\nd <- c(1612,164,71,47,28,17,12,12,5,7,6,3,3,13) # \u30c7\u30fc\u30bf(\u6700\u5f8c\u306f\u500b\u657013\u4ee5\u4e0a)\nNB <- function (s, p) { # \u30d1\u30e9\u30e1\u30fc\u30bf (size, prob)=(s, p) \u306e\u8ca0\u306e\u4e8c\u9805\u5206\u5e03\u306e\u78ba\u7387\u95a2\u6570\n  P <- dnbinom(0:12, size=s, prob=p, log=T) # \u500b\u6570 0,1,...,12 \u306e\u78ba\u7387\u306e\u5bfe\u6570\n  P[14] <- pnbinom(12, size=s, prob=p, lower.tail=F, log.p=T) # \u500b\u657013\u4ee5\u4e0a\u306e\u78ba\u7387\u306e\u5bfe\u6570\n  return(P)\n}\n\n\nLL <- function (x) return(sum(NB(x[1],x[2])*d)) # \u76ee\u7684\u95a2\u6570(\u5bfe\u6570\u5c24\u5ea6\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570)\n\noptim(c(0.2, 0.5), LL, control=list(fnscale=-1)) # \u521d\u671f\u30d1\u30e9\u30e1\u30fc\u30bf (0.2, 0.5) \u3067\u6700\u5927\u5316\u5b9f\u884c\n```\n\n\n```{r:R}\n$par\n[1] 0.1155133 0.1553361  # (size, prob) \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6700\u5c24\u63a8\u5b9a\u5024\n$value\n[1] -1705.324            # \u305d\u306e\u6642\u306e\u5bfe\u6570\u5c24\u5ea6\u5024\n$counts\nfunction gradient\n      63       NA        # Nelder-Mead \u6cd5\u7e70\u308a\u8fd4\u3057\u657063\u56de\u3001gradient \u8a55\u4fa1\u306f\u7121\u3057\n$convergence\n[1] 0                    # \u53ce\u675f\u5224\u5b9a\u30b3\u30fc\u30c9 0 (\u7121\u4e8b\u53ce\u675f)\n$message\nNULL                     # \u305d\u306e\u4ed6\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u7121\u3057\n```\n\n```{r:R}\n> sum(d)*exp(NB(res$par[1],res$par[2])) # \u63a8\u5b9a\u5ea6\u6570\u306e\u8a08\u7b97\n```\n\n```{r:R}\n [1] 1612.914091  157.371829   74.140527   44.160512   29.052777   20.198801\n[7]   14.546131   10.734116    8.064296    6.142199    4.729214    3.673399\n[13]    2.874090   11.398017\n```\n\n##### _example()_ \u95a2\u6570\u3067\u3001\u4f7f\u7528\u30c7\u30e2\u3092\u8868\u793a\u3000\uff08\u203b\u30b3\u30e1\u30f3\u30c8\u306f\u4e0b\u8a18\u3092\u8ee2\u8a18\uff09\n\n###### \uff08\u5f15\u7528\u5143\uff09 [ _RWiki_ \u300c\u6c4e\u7528\u6700\u9069\u5316\u95a2\u6570 optim() \u306e\u4f7f\u7528\u6cd5\u300d](http://www.okada.jp.org/RWiki/?%B4%D8%BF%F4%A4%CE%BA%C7%C2%E7%A1%A6%BA%C7%BE%AE%B2%BD)\n\n```{r:R}\nexample(optim)\n```\n\n```{r:R}\n> require(graphics)\n\n>fr <- function(x) {    # \u76ee\u7684\u95a2\u6570 (Rosenbrock \u306e Banana \u95a2\u6570)\n     x1 <- x[1]; x2 <- x[2]\n     100 * (x2 - x1 * x1)^2 + (1 - x1)^2\n}\n\n> grr <- function(x) { # \u305d\u306e\u30b0\u30e9\u30c7\u30a3\u30a8\u30f3\u30c8\u95a2\u6570 (\u8fd4\u308a\u5024\u304c\u30d9\u30af\u30c8\u30eb\u306b\u6ce8\u610f)\n     x1 <- x[1]; x2 <- x[2]\n     c(-400 * x1 * (x2 - x1 * x1) - 2 * (1 - x1),\n        200 * (x2 - x1 * x1))\n}\n# \u4ee5\u4e0b\u5404\u7a2e\u624b\u6cd5\u306b\u3088\u308b\u6700\u9069\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u6700\u9069\u5024\u3092\u7d39\u4ecb\n# \u591a\u6570\u6c7a\u306b\u3088\u308a\u3001\u6700\u9069\u5024\u306f 1,1 \u3089\u3057\u3044(!?)\n# \u3067\u3082\u6700\u9069\u5024\u306f\u7d50\u69cb\u9055\u3046(\u3088\u3046\u306b\u898b\u3048\u308b)\n\n> optim(c(-1.2,1), fr)  # \u65e2\u5b9a\u306e \"Nelder-Mead\" \u6cd5\n$par\n[1] 1.000260 1.000506\n\n$value\n[1] 8.825241e-08\n\n$counts\nfunction gradient \n     195       NA \n\n$convergence\n[1] 0\n\n$message\nNULL\n```\n\n```{r:R}\nres <- optim(c(-1.2,1), fr, grr, method = \"BFGS\"))  # \"BFGS\" \u6cd5\n$par\n[1] 1 1\n\n$value\n[1] 9.594956e-18\n\n$counts\nfunction gradient \n     110       43 \n\n$convergence\n[1] 0\n\n$message\nNULL\n```\n\n```{r:R}\noptim(c(-1.2,1), fr, NULL, method = \"BFGS\", hessian = TRUE) # hessian\u3092T\u306b\u8a2d\u5b9a\n\n$par\n[1] 0.9998044 0.9996084\n\n$value\n[1] 3.827383e-08\n\n$counts\nfunction gradient \n     118       38 \n\n$convergence\n[1] 0\n\n$message\nNULL\n\n$hessian  # hessian\uff08\u5bfe\u79f0\u884c\u5217\uff09\u304c\u8fd4\u3055\u308c\u308b\n          [,1]      [,2]\n[1,]  801.6881 -399.9218\n[2,] -399.9218  200.0000\n```\n\n#### \u203b \u8a08\u7b97\u304c\u8a2d\u5b9a\u7e70\u308a\u8fd4\u3057\u56de\u6570\u5185\u306b\u53ce\u675f\u3057\u306a\u3044\u4f8b\n##### \u8fd4\u308a\u5024\u306e _$convergence_ \u306e\u30b3\u30fc\u30c9\u5024\u304c\u3001\u300c1\u300d\uff08\u53ce\u675f\u305b\u305a\uff09\u306b\u306a\u3063\u3066\u3044\u308b\n```{r:R}\n## These do not converge in the default number of steps\n> optim(c(-1.2,1), fr, grr, method = \"CG\")\n$par\n[1] -0.7648373  0.5927588\n\n$value\n[1] 3.106579\n\n$counts\nfunction gradient \n     402      101 \n\n$convergence\n[1] 1\n\n$message\nNULL\n\n--------------------------------------------------------------\n\n> optim(c(-1.2,1), fr, grr, method = \"CG\", control = list(type = 2))\n$par\n[1] 0.9944093 0.9888229\n\n$value\n[1] 3.123777e-05\n\n$counts\nfunction gradient \n     385      101 \n\n$convergence\n[1] 1\n\n$message\nNULL\n```\n\n##### \u4ee5\u4e0b\u306f\u3001_$convergence_ \u306f\u300c0\u300d\u3060\u304c\u3001_$message_ \u306e\u51fa\u529b\u7d50\u679c\u306b\u6ce8\u76ee\n```{r:R}\n--------------------------------------------------------\n\n> optim(c(-1.2,1), fr, grr, method = \"L-BFGS-B\")\n$par\n[1] 0.9999997 0.9999995\n\n$value\n[1] 2.267577e-13\n\n$counts\nfunction gradient \n      47       47 \n\n$convergence\n[1] 0\n\n$message\n[1] \"CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH\"\n\n--------------------------------------------------------------\n\n> flb <- function(x)\n     { p <- length(x); sum(c(1, rep(4, p-1)) * (x - c(1, x[-p])^2)^2) }\n\n> ## 25-dimensional box constrained\n> optim(rep(3, 25), flb, NULL, method = \"L-BFGS-B\",\nlower = rep(2, 25), upper = rep(4, 25)) # par[24] is *not* at boundary\n$par\n [1] 2.000000 2.000000 2.000000 2.000000 2.000000 2.000000 2.000000 2.000000 2.000000 2.000000\n[11] 2.000000 2.000000 2.000000 2.000000 2.000000 2.000000 2.000000 2.000000 2.000000 2.000000\n[21] 2.000000 2.000000 2.000000 2.109093 4.000000\n\n$value\n[1] 368.1059\n\n$counts\nfunction gradient \n       6        6 \n\n$convergence\n[1] 0\n\n$message\n[1] \"CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH\"\n```\n\n#### \u4ee5\u4e0b\u3001\u30b0\u30e9\u30d5\u3092\u898b\u306a\u304c\u3089\u306e\u4e8b\u4f8b\n```{r:R}\n> ## \u3042\u308b\u30ef\u30a4\u30eb\u30c9\u306a\u76ee\u7684\u95a2\u6570\n> fw <- function (x)\n     10*sin(0.3*x)*sin(1.3*x^2) + 0.00001*x^4 + 0.2*x+80\n\n# \u30b0\u30e9\u30d5\u3092\u66f8\u3044\u3066\u307f\u308b\u3068\u69d8\u5b50\u304c\u3088\u304f\u308f\u304b\u308b\uff08\u203b \u8d64\u5370\u7b87\u6240\u304c\u3001\u6700\u5c0f\u5024\uff09\n> plot(fw, -50, 50, n = 1000, main = \"optim() minimising 'wild function'\")\n```\n![wild.png](https://qiita-image-store.s3.amazonaws.com/0/43487/657ca654-47b8-709c-3271-42f1f2a29375.png)\n\n\n```{r:R}\nres <- optim(50, fw, method = \"SANN\", control = list(maxit = 20000, temp = 20, parscale = 20)) # \"SANN\" \u6cd5\u3067\u7b2c\u4e00\u6bb5\u968e\u6700\u9069\u5316\n\n> res\n$par  # \u771f\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u7d04 -15.81515\n[1] -15.81515\n\n$value\n[1] 67.46773\n\n$counts\nfunction gradient \n   20000       NA \n\n$convergence\n[1] 0\n\n$message\nNULL\n\n> # \"BFGS\" \u6cd5\u3067\u7b2c\u4e8c\u6bb5\u968e\u6700\u9069\u5316\n  ## Now improve locally {typically only by a small bit}:\n> (r2 <- optim(res$par, fw, method = \"BFGS\"))\n$par\n[1] -15.81515  # \"\u771f\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\" \u304c\u6c42\u307e\u3063\u305f\uff01\n\n$value\n[1] 67.46773 # \u6700\u9069\u5024\u3082\u78ba\u304b\u306b\u524d\u3088\u308a\u5c0f\u3055\u3044\n\n$counts\nfunction gradient \n       8        1 \n\n$convergence\n[1] 0\n\n$message\nNULL\n```\n\n#### \u5de1\u56de\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u554f\u984c\n```{r:R}\n> points(r2$par, r2$value, pch = 8, col = \"red\", cex = 2)\n\n> ## Combinatorial optimization: Traveling salesman problem\n> library(stats) # normally loaded\n\n> eurodistmat <- as.matrix(eurodist)\n\n> distance <- function(sq) {  # Target function\n     sq2 <- embed(sq, 2)\n     sum(eurodistmat[cbind(sq2[,2], sq2[,1])])\n }\n\n> genseq <- function(sq) {  # Generate new candidate sequence\n     idx <- seq(2, NROW(eurodistmat)-1)\n     changepoints <- sample(idx, size = 2, replace = FALSE)\n     tmp <- sq[changepoints[1]]\n     sq[changepoints[1]] <- sq[changepoints[2]]\n     sq[changepoints[2]] <- tmp\n     sq\n }\n\n> sq <- c(1:nrow(eurodistmat), 1)  # Initial sequence: alphabetic\n\n> distance(sq)\n[1] 29625\n\n> # rotate for conventional orientation\n> loc <- -cmdscale(eurodist, add = TRUE)$points\n\n> x <- loc[,1]; y <- loc[,2]\n\n> s <- seq_len(nrow(eurodistmat))\n> tspinit <- loc[sq,]\n\n> plot(x, y, type = \"n\", asp = 1, xlab = \"\", ylab = \"\", main = \"initial solution of traveling salesman problem\", axes = FALSE)\n```\n![salesman.1.png](https://qiita-image-store.s3.amazonaws.com/0/43487/be84ac47-12d4-bf39-1c4e-cc8310b7438c.png)\n\n\n```{r:R}\n> arrows(tspinit[s,1], tspinit[s,2], tspinit[s+1,1], tspinit[s+1,2],\nangle = 10, col = \"green\")\n\n> text(x, y, labels(eurodist), cex = 0.8)\n\n> set.seed(123) # chosen to get a good soln relatively quickly\n\n> res <- optim(sq, distance, genseq, method = \"SANN\", control = list(maxit = 30000, temp = 2000, trace = TRUE, REPORT = 500))\nsann objective function values\ninitial       value 29625.000000\niter     5000 value 13585.000000\niter    10000 value 13092.000000\niter    15000 value 13063.000000\niter    20000 value 12919.000000\niter    25000 value 12907.000000\niter    29999 value 12842.000000\nfinal         value 12842.000000\nsann stopped after 29999 iterations\n\n> res  # Near optimum distance around 12842\n$par\n [1]  1 19 16  8 15  2 14  9 12 13 18  5  4  3 11  7 20 10  6 17 21  1\n\n$value\n[1] 12842\n\n$counts\nfunction gradient \n   30000       NA \n\n$convergence\n[1] 0\n\n$message\nNULL\n```\n\n```{r:R}\n\n> tspres <- loc[res$par,]\n\n> plot(x, y, type = \"n\", asp = 1, xlab = \"\", ylab = \"\", main = \"optim() 'solving' traveling salesman problem\", axes = FALSE)\n\n> arrows(tspres[s,1], tspres[s,2], tspres[s+1,1], tspres[s+1,2], angle = 10, col = \"red\")\n\n> text(x, y, labels(eurodist), cex = 0.8)\n> \n```\n![salesman.2.png](https://qiita-image-store.s3.amazonaws.com/0/43487/f10548fe-c798-35ac-a758-cbc5b516c12c.png)\n"}