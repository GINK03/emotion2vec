{"context": "\n\njava8 + spring-boot \u3067 line bot \u3092\u66f8\u304d\u307e\u3057\u305f\n\ncallback \u306f https://...:443/linebot \u306b\n\u5fc5\u8981\u60c5\u5831\u306f\u74b0\u5883\u5909\u6570\u3067\njackson, httpclient, lombok \u4f7f\u7528\ntry catch \u306f\u30ce\u30fc\u30dd\u30ea\u30b7\u30fc\n\n\ncontroller\n@RestController\npublic class LineBotController {\n    @Autowired\n    LineBotService botService;\n\n    @RequestMapping(value = \"/linebot\")\n    String index(HttpServletRequest request) throws RuntimeException {\n        botService.sendToChannel(request);\n        return \"OK\";\n    }\n}\n\n\nmodel\n// callback \u306b\u304f\u308b\u3084\u3064\n@Data\npublic class LineBotResponse {\n    List<LineBotResponseResult> result;\n}\n\n@Data\npublic class LineBotResponseResult {\n    LineBotResponseContent content;\n    BigDecimal createdTime;\n    String eventType;\n    String from;\n    BigDecimal fromChannel;\n    String id;\n    List<String> to;\n    BigDecimal toChannel;\n\n}\n\n@Data\npublic class LineBotResponseContent {\n    String toType;\n    BigDecimal createdTime;\n    String from;\n    String location;\n    String id;\n    List<String> to;\n    String text;\n    Map<String, String> contentMetadata;\n    BigDecimal deliveredTime;\n    BigDecimal contentType;\n    String seq;\n\n}\n\n// line bot api \u306b\u6295\u3052\u308b\u3084\u3064\n@Data\npublic class LineBotRequest {\n    List<String> to;\n    final int toChannel = 1383378250;\n    final String eventType = \"138311608800106203\";\n    LineBotResponseContent content;\n}\n\n\n\nservice\n@Service\n@val\n@Slf4j\npublic class LineBotService {\n    final String LINEBOTAPI_ENDPOINT = System.getenv(\"LINEBOTAPI_ENDPOINT\");\n    final String LINE_CHANNEL_ID = System.getenv(\"LINE_CHANNEL_ID\");\n    final String LINE_CHANNEL_SECRET = System.getenv(\"LINE_CHANNEL_SECRET\");\n    final String LINE_CHANNEL_MID = System.getenv(\"LINE_CHANNEL_MID\");\n\n    public void sendToChannel(HttpServletRequest request) {\n        try {\n            val jb = new StringBuffer();\n            request.getReader().lines().forEach(jb::append);\n\n            val mapper = new ObjectMapper();\n            val botResponse = mapper.readValue(jb.toString(), LineBotResponse.class);\n\n            botResponse.getResult().stream().forEach(this::sendRequest);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    void sendRequest(LineBotResponseResult botResponse) {\n        try {\n            val botContent = botResponse.getContent();\n            val request = new LineBotRequest();\n            request.setTo(Arrays.asList(botContent.getFrom()));\n            request.setContent(botContent);\n            val text = botContent.getText();\n            // \uff11\u3082\u3058\u3065\u3064\u3070\u3089\u3070\u3089\u306b\u3057\u3066\u9001\u308a\u8fd4\u3059\n            Stream<String> stream = Arrays.stream(text.split(\"\"));\n            val post = new HttpPost(LINEBOTAPI_ENDPOINT);\n            post.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n            post.setHeader(\"X-Line-ChannelID\", LINE_CHANNEL_ID);\n            post.setHeader(\"X-Line-ChannelSecret\", LINE_CHANNEL_SECRET);\n            post.setHeader(\"X-Line-Trusted-User-With-ACL\", LINE_CHANNEL_MID);\n            try (val httpclient = HttpClients.createDefault()) {\n                stream.forEach(e -> sendOneRequest(httpclient, post, request, e));\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    void sendOneRequest(CloseableHttpClient client, HttpPost post, LineBotRequest request, String oneString) {\n        try {\n            request.getContent().setText(oneString);\n            val mapper = new ObjectMapper();\n            val json = mapper.writeValueAsString(request);\n\n            post.setEntity(new StringEntity(json, StandardCharsets.UTF_8));\n            val res = client.execute(post);\n\n            try (val br = new BufferedReader(\n                    new InputStreamReader(res.getEntity().getContent(), StandardCharsets.UTF_8))) {\n                br.lines().forEach(e -> log.info(e.toString()));\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            log.info(\"STATUSLINE:\" + res.getStatusLine().toString());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n\n\nbuild.gradle\ndependencies {\n    compileOnly('org.projectlombok:lombok')\n    compile('org.springframework.boot:spring-boot-starter-web')\n    compile('com.fasterxml.jackson.core:jackson-databind:2.7.0')\n    compile('com.fasterxml.jackson.core:jackson-annotations:2.7.0')\n    compile('com.fasterxml.jackson.core:jackson-core:2.7.0')\n    compile('org.apache.httpcomponents:httpasyncclient:4.1.1')\n    compile('org.apache.httpcomponents:httpcore-nio:4.4.4')\n}\n\ntask wrapper(type: Wrapper) {\n    gradleVersion = '2.12'\n}\n\n\n\u4f8b\u5916\u306e\u3068\u3053\u3080\u305a\u3044\u3002\u3002\u3002\nfacebook messenger \u7248\uff1ahttp://qiita.com/amanoiverse/items/ed7e177a209a8a12c3ea : \n\n# java8 + spring-boot \u3067 line bot \u3092\u66f8\u304d\u307e\u3057\u305f\n\n- callback \u306f https://...:443/linebot \u306b\n- \u5fc5\u8981\u60c5\u5831\u306f\u74b0\u5883\u5909\u6570\u3067\n- jackson, httpclient, lombok \u4f7f\u7528\n- try catch \u306f\u30ce\u30fc\u30dd\u30ea\u30b7\u30fc\n\n\n## controller\n\n```java\n@RestController\npublic class LineBotController {\n\t@Autowired\n\tLineBotService botService;\n\n\t@RequestMapping(value = \"/linebot\")\n\tString index(HttpServletRequest request) throws RuntimeException {\n\t\tbotService.sendToChannel(request);\n\t\treturn \"OK\";\n\t}\n}\n```\n\n## model\n\n```java\n// callback \u306b\u304f\u308b\u3084\u3064\n@Data\npublic class LineBotResponse {\n\tList<LineBotResponseResult> result;\n}\n\n@Data\npublic class LineBotResponseResult {\n\tLineBotResponseContent content;\n\tBigDecimal createdTime;\n\tString eventType;\n\tString from;\n\tBigDecimal fromChannel;\n\tString id;\n\tList<String> to;\n\tBigDecimal toChannel;\n\n}\n\n@Data\npublic class LineBotResponseContent {\n\tString toType;\n\tBigDecimal createdTime;\n\tString from;\n\tString location;\n\tString id;\n\tList<String> to;\n\tString text;\n\tMap<String, String> contentMetadata;\n\tBigDecimal deliveredTime;\n\tBigDecimal contentType;\n\tString seq;\n\n}\n\n// line bot api \u306b\u6295\u3052\u308b\u3084\u3064\n@Data\npublic class LineBotRequest {\n    List<String> to;\n    final int toChannel = 1383378250;\n    final String eventType = \"138311608800106203\";\n    LineBotResponseContent content;\n}\n\n```\n\n## service\n\n```java\n@Service\n@val\n@Slf4j\npublic class LineBotService {\n\tfinal String LINEBOTAPI_ENDPOINT = System.getenv(\"LINEBOTAPI_ENDPOINT\");\n\tfinal String LINE_CHANNEL_ID = System.getenv(\"LINE_CHANNEL_ID\");\n\tfinal String LINE_CHANNEL_SECRET = System.getenv(\"LINE_CHANNEL_SECRET\");\n\tfinal String LINE_CHANNEL_MID = System.getenv(\"LINE_CHANNEL_MID\");\n\n\tpublic void sendToChannel(HttpServletRequest request) {\n\t\ttry {\n\t\t\tval jb = new StringBuffer();\n\t\t\trequest.getReader().lines().forEach(jb::append);\n\n\t\t\tval mapper = new ObjectMapper();\n\t\t\tval botResponse = mapper.readValue(jb.toString(), LineBotResponse.class);\n\n\t\t\tbotResponse.getResult().stream().forEach(this::sendRequest);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tvoid sendRequest(LineBotResponseResult botResponse) {\n\t\ttry {\n\t\t\tval botContent = botResponse.getContent();\n\t\t\tval request = new LineBotRequest();\n\t\t\trequest.setTo(Arrays.asList(botContent.getFrom()));\n\t\t\trequest.setContent(botContent);\n\t\t\tval text = botContent.getText();\n\t\t\t// \uff11\u3082\u3058\u3065\u3064\u3070\u3089\u3070\u3089\u306b\u3057\u3066\u9001\u308a\u8fd4\u3059\n\t\t\tStream<String> stream = Arrays.stream(text.split(\"\"));\n\t\t\tval post = new HttpPost(LINEBOTAPI_ENDPOINT);\n\t\t\tpost.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n\t\t\tpost.setHeader(\"X-Line-ChannelID\", LINE_CHANNEL_ID);\n\t\t\tpost.setHeader(\"X-Line-ChannelSecret\", LINE_CHANNEL_SECRET);\n\t\t\tpost.setHeader(\"X-Line-Trusted-User-With-ACL\", LINE_CHANNEL_MID);\n\t\t\ttry (val httpclient = HttpClients.createDefault()) {\n\t\t\t\tstream.forEach(e -> sendOneRequest(httpclient, post, request, e));\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tvoid sendOneRequest(CloseableHttpClient client, HttpPost post, LineBotRequest request, String oneString) {\n\t\ttry {\n\t\t\trequest.getContent().setText(oneString);\n\t\t\tval mapper = new ObjectMapper();\n\t\t\tval json = mapper.writeValueAsString(request);\n\n\t\t\tpost.setEntity(new StringEntity(json, StandardCharsets.UTF_8));\n\t\t\tval res = client.execute(post);\n\n\t\t\ttry (val br = new BufferedReader(\n\t\t\t\t\tnew InputStreamReader(res.getEntity().getContent(), StandardCharsets.UTF_8))) {\n\t\t\t\tbr.lines().forEach(e -> log.info(e.toString()));\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tlog.info(\"STATUSLINE:\" + res.getStatusLine().toString());\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n}\n```\n\n## build.gradle\n\n```groovy\ndependencies {\n\tcompileOnly('org.projectlombok:lombok')\n\tcompile('org.springframework.boot:spring-boot-starter-web')\n\tcompile('com.fasterxml.jackson.core:jackson-databind:2.7.0')\n\tcompile('com.fasterxml.jackson.core:jackson-annotations:2.7.0')\n\tcompile('com.fasterxml.jackson.core:jackson-core:2.7.0')\n\tcompile('org.apache.httpcomponents:httpasyncclient:4.1.1')\n\tcompile('org.apache.httpcomponents:httpcore-nio:4.4.4')\n}\n\ntask wrapper(type: Wrapper) {\n\tgradleVersion = '2.12'\n}\n```\n\n- \u4f8b\u5916\u306e\u3068\u3053\u3080\u305a\u3044\u3002\u3002\u3002\n\n- facebook messenger \u7248\uff1ahttp://qiita.com/amanoiverse/items/ed7e177a209a8a12c3ea : \n", "tags": ["Java\u5165\u9580", "java8", "Java", "spring-boot", "linebot"]}