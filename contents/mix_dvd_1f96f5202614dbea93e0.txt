{"context": "\n\n\u306f\u3058\u3081\u306b\n\u4ee5\u524d\u3001\u540c\u540d\u306e\u30bf\u30a4\u30c8\u30eb\u3067\u6295\u7a3f\u3057\u3066\u304b\u3089\u305a\u3044\u3076\u3093\u3068\u65e5\u6570\u304c\u7d4c\u904e\u3057\u3001\u5c11\u3057\u719f\u308c\u3066\u304d\u305f\u306e\u3067\u518d\u5ea6\u6295\u7a3f\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u30c7\u30fc\u30bf\u53ce\u96c6\n\n\u96fb\u529b\u9700\u8981\n\u307e\u305a\u306f\u6771\u4eac\u96fb\u529b\u306e\u30b5\u30a4\u30c8\u304b\u3089\u96fb\u529b\u9700\u8981\u306e\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\nhttp://www.tepco.co.jp/forecast/html/download-j.html\nhttp://www.tepco.co.jp/forecast/html/images/juyo-2016.csv\n\u203b2017/1/14\u73fe\u5728\u30012016/4/1\u301c2016/12/31\u306e\u4e00\u6642\u9593\u6bce\u306e\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u307e\u3057\u305f\u3002\n\u307e\u305f\u3001URL\u3092\u5909\u66f4\u3059\u308b\u30682014\u5e74\u306e\u30c7\u30fc\u30bf\u3082\u5165\u624b\u3067\u304d\u307e\u3057\u305f\u3002\nhttp://www.tepco.co.jp/forecast/html/images/juyo-2014.csv\n\u203b2017/1/14\u73fe\u5728\u30012015\u5e74\u306e\u30c7\u30fc\u30bf\u306f\u304b\u3089\u3063\u307d\u3067\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30c7\u30fc\u30bf\u306f\u65e5\u4ed8\u3001\u6642\u523b\u3001\u96fb\u529b\u5b9f\u7e3e\u306eCSV\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u53d6\u5f97\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n$ curl -O http://www.tepco.co.jp/forecast/html/images/juyo-2014.csv\n$ curl -O http://www.tepco.co.jp/forecast/html/images/juyo-2016.csv\n\n\n\u6c17\u6e29\n\u524d\u56de\u540c\u69d8\u306b\u3001\u6c17\u8c61\u5e81\u304b\u3089\u904e\u53bb\u306e\u6c17\u8c61\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\nhttp://www.data.jma.go.jp/gmd/risk/obsdl/index.php\n\u5730\u70b9\u306f\u300c\u6771\u4eac\u300d\u3001\u9805\u76ee\u306f\u300c\u6642\u5225\u5024\u300d\u300c\u6c17\u6e29\u300d\u3001\u671f\u9593\u306f2013/12/31\u301c2015/1/1\u30682015/12/31\u301c2017/1/1\u3068\u3057\u3001data-2014.csv\u3001data-2016.csv\u3068\u3044\u3046\u540d\u524d\u3067\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u3001\u5c11\u3057\u9577\u3081\u306e\u671f\u9593\u3092\u9078\u629e\u3057\u3066\u3044\u308b\u306e\u306f\u3001\u5f8c\u3067\u671f\u9593\u3092\u7d5e\u3063\u3066\u53d6\u308a\u8fbc\u3080\u305f\u3081\u3067\u3059\u3002\n\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30c7\u30fc\u30bf\u306f\u65e5\u6642\u3001\u6c17\u6e29\u3001\u54c1\u8cea\u60c5\u5831\u3001\u5747\u8cea\u756a\u53f7\u3068\u3044\u3046\u30c7\u30fc\u30bf\u306e\u5165\u3063\u305fCSV\u3067\u3059\u3002\n\u3061\u306a\u307f\u306b\u3053\u308c\u306f\u666e\u901a\u306b\u30b5\u30a4\u30c8\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u306e\u304c\u65e9\u305d\u3046\u3067\u3059\u3002\n\n\u30c7\u30fc\u30bf\u8aad\u8fbc\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\nimport pandas as pd\nimport numpy as np\nimport datetime as dt\nimport math\n\n\n\u96fb\u529b\u9700\u8981\n\u307e\u305a\u30012014\u5e74\u306e\u96fb\u529b\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\nfilename = \"juyo-2014.csv\"\n\n# \u6587\u5b57\u30b3\u30fc\u30c9\u304c\u30b7\u30d5\u30c8JIS\u3067\u3001\u4e0d\u8981\u306a\u884c\u3092\u98db\u3070\u3057\u3066\u8aad\u307f\u8fbc\u3080\ndf = pd.read_csv(filename,encoding=\"SHIFT-JIS\",skiprows=2)\n\n# \u5217\u540d\u3092\u5909\u63db\ndf.columns = [\"DATE\",\"TIME\",\"KW\"]\n\n# \u65e5\u4ed8\u3068\u6642\u9593\u306e\u30c7\u30fc\u30bf\u304c\u5206\u304b\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u4e00\u3064\u306b\u3064\u306a\u3052\u3066\u65e5\u6642\u578b\u306b\u5909\u63db\u3057\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u6307\u5b9a\ndf.index = df.index.map(lambda x: dt.datetime.strptime(df.loc[x].DATE + \" \" + df.loc[x].TIME,\"%Y/%m/%d %H:%M\"))\n\n# \u6708\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\ndf[\"MONTH\"] = df.index.month\n\n# \u66dc\u65e5\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\ndf[\"WEEK\"] = df.index.weekday\n\n# \u6642\u9593\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\ndf[\"HOUR\"] = df.index.hour\n\ndf_kw = df\n\n\n\u6c17\u6e29\n\u6b21\u306b\u30012014\u5e74\u306e\u6c17\u6e29\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\nfilename = \"data-2014.csv\"\n\n# \u6587\u5b57\u30b3\u30fc\u30c9\u304c\u30b7\u30d5\u30c8JIS\u3067\u3001\u4e0d\u8981\u306a\u884c\u3092\u98db\u3070\u3057\u3001\u5fc5\u8981\u306a2\u5217\u306e\u307f\u53d6\u5f97\ndf = pd.read_csv(filename,encoding=\"SHIFT-JIS\",skiprows=4)[[0,1]]\n\n# \u5217\u540d\u3092\u5909\u63db\ndf.columns = [\"DATE\",\"TEMP\"]\n\n# \u65e5\u6642\u30c7\u30fc\u30bf\u3092\u65e5\u6642\u578b\u306b\u5909\u63db\u3057\u3066\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u6307\u5b9a\ndf.index = df.index.map(lambda x: dt.datetime.strptime(df.loc[x].DATE,\"%Y/%m/%d %H:%M:%S\"))\n\ndf_temp = df\n\n\n\u96fb\u529b\u9700\u8981\u3068\u6c17\u6e29\u306e\u30c7\u30fc\u30bf\u3092\u7d50\u5408\nd1 = df_kw.index.min()\nd2 = df_kw.index.max()\n\ndf_kw[\"TEMP\"] = df_temp.ix[d1:d2].TEMP\n\n\n\u30c7\u30fc\u30bf\u306e\u52a0\u5de5\n\u6a5f\u68b0\u5b66\u7fd2\u306b\u7528\u3044\u308b\u5165\u529b\u30c7\u30fc\u30bf\u3068\u51fa\u529b\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u4e88\u6e2c\u3059\u308b\u306e\u306f\u96fb\u529b\u9700\u8981\u306a\u306e\u3067\u3001\u51fa\u529b\u306fKW\u5217\u3001\u5165\u529b\u306fMONTH\u3001WEEK\u3001HOUR\u3001TEMP\u5217\u3068\u3057\u307e\u3059\u3002\n# \u5165\u529b\u306b\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u5217\u306e\u6307\u5b9a\nX_cols = [\"MONTH\",\"WEEK\",\"HOUR\",\"TEMP\"]\n\n# \u51fa\u529b\u306b\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u5217\u306e\u6307\u5b9a\ny_cols = [\"KW\"]\n\n# \u5165\u529b\u30fb\u51fa\u529b\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\nX = df_kw[X_cols].as_matrix().astype('float')\ny = df_kw[y_cols].as_matrix().astype('int').flatten()\n\n\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u691c\u8a3c\u30c7\u30fc\u30bf\u306b\u5206\u5272\u3057\u307e\u3059\u3002\nfrom sklearn import cross_validation\n\nX_train, X_test, y_train, y_test = cross_validation.train_test_split(X, y, test_size=.1, random_state=42)\n\n\u5165\u529b\u30c7\u30fc\u30bf\u3092\u6b63\u898f\u5316\u3057\u307e\u3059\u3002\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nscaler.fit(X_train)\n\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)\n\n\n\u5b66\u7fd2\n\u56de\u5e30\u30e2\u30c7\u30eb\u3067\u5b66\u7fd2\u3057\u307e\u3059\u3002\nfrom sklearn.ensemble import RandomForestRegressor\n\nmodel = RandomForestRegressor()\nmodel.fit(X_train, y_train)\n\n\n\u4e88\u6e2c\n\u5206\u5272\u3057\u305f\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\nprint(model.score(X_test,y_test))\n\n\u30b9\u30b3\u30a2\u306f\u300c0.91601162513664502\u300d\u3067\u3057\u305f(^-^)\n\n\u4e88\u6e2c\u7d50\u679c\u306e\u78ba\u8a8d\n\u4e88\u6e2c\u7d50\u679c\u3068\u5b9f\u30c7\u30fc\u30bf\u3092\u30b0\u30e9\u30d5\u5316\u3057\u3001\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3059\u3002\n# \u4e88\u6e2c\u7d50\u679c\nresult = model.predict(X_test)\n\n# \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u5909\u63db\ndf_result = pd.DataFrame({\n    \"y_test\":y_test,\n    \"result\":result\n})\n\n# \u30b0\u30e9\u30d5\u30e9\u30a4\u30d6\u30e9\u30ea\n%matplotlib inline\nimport matplotlib\nimport matplotlib.pyplot as plt\n\n# \u30b0\u30e9\u30d5\u63cf\u753b\ndf_result.plot(figsize=(15, 3))\n\n\n\u5f53\u305f\u3063\u3066\u308b\u3088\u3046\u306a\u3093\u3060\u3051\u3069\u3001\u3069\u3046\u306a\u306e\u304b\u3044\u307e\u3044\u3061\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u3002\n\u30c7\u30fc\u30bf\u6570\u3092\u6e1b\u3089\u3057\u3066\u518d\u78ba\u8a8d\u3002\n# \u30b0\u30e9\u30d5\u63cf\u753b\ndf_result[:20].plot(figsize=(15, 3))\n\n\n\u3044\u3044\u611f\u3058\u3058\u3083\u306a\u3044\u3067\u3059\u304b\uff01\n\n2016\u5e74\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u4e88\u6e2c\n\n\u30c7\u30fc\u30bf\u8aad\u8fbc\n2014\u5e74\u306e\u30c7\u30fc\u30bf\u3068\u540c\u3058\u624b\u9806\u30672016\u5e74\u306e\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n# \u96fb\u529b\u9700\u8981\nfilename = \"juyo-2016.csv\"\n\ndf = pd.read_csv(filename,encoding=\"SHIFT-JIS\",skiprows=2)\ndf.columns = [\"DATE\",\"TIME\",\"KW\"]\ndf.index = df.index.map(lambda x: dt.datetime.strptime(df.loc[x].DATE + \" \" + df.loc[x].TIME,\"%Y/%m/%d %H:%M\"))\ndf[\"MONTH\"] = df.index.month\ndf[\"WEEK\"] = df.index.weekday\ndf[\"HOUR\"] = df.index.hour\n\n# 4\u6708\u5206\u306b\u9650\u5b9a\u3057\u3066\u5229\u7528\ndf_kw = df[df.index.month == 4]\n\n# \u6c17\u6e29\nfilename = \"data-2016.csv\"\n\ndf = pd.read_csv(filename,encoding=\"SHIFT-JIS\",skiprows=4)[[0,1]]\ndf.columns = [\"DATE\",\"TEMP\"]\ndf.index = df.index.map(lambda x: dt.datetime.strptime(df.loc[x].DATE,\"%Y/%m/%d %H:%M:%S\"))\n\ndf_temp = df\n\n# \u30c7\u30fc\u30bf\u7d50\u5408\nd1 = df_kw.index.min()\nd2 = df_kw.index.max()\ndf_kw[\"TEMP\"] = df_temp.ix[d1:d2].TEMP\n\n\n\u30c7\u30fc\u30bf\u52a0\u5de5\n# \u5165\u529b\u30fb\u51fa\u529b\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\nX = df_kw[X_cols].as_matrix().astype('float')\ny = df_kw[y_cols].as_matrix().astype('int').flatten()\n\nX_test = scaler.transform(X)\ny_test = y\n\n\n\u4e88\u6e2c\n2014\u5e74\u306e\u30c7\u30fc\u30bf\u3067\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3057\u3066\u4e88\u6e2c\u3057\u3001\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\nmodel.score(X_test,y_test)\n\n\u7d50\u679c\u306f\u3001\u5c11\u3057\u843d\u3061\u3066\u300c0.82435418225963963\u300d\u3067\u3057\u305f\u3002\n\n\u4e88\u6e2c\u7d50\u679c\u306e\u78ba\u8a8d\n# \u4e88\u6e2c\u7d50\u679c\nresult = model.predict(X_test)\n\n# \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u5909\u63db\ndf_result = pd.DataFrame({\n    \"y_test\":y_test,\n    \"result\":result\n})\n\n# \u30b0\u30e9\u30d5\u63cf\u753b\ndf_result.plot(figsize=(15, 3))\n\n\n\u3082\u3046\u5c11\u3057\u5de5\u592b\u304c\u5fc5\u8981\u3067\u3059\u306d(-_-;)\n# \u306f\u3058\u3081\u306b\n\n\u4ee5\u524d\u3001\u540c\u540d\u306e\u30bf\u30a4\u30c8\u30eb\u3067\u6295\u7a3f\u3057\u3066\u304b\u3089\u305a\u3044\u3076\u3093\u3068\u65e5\u6570\u304c\u7d4c\u904e\u3057\u3001\u5c11\u3057\u719f\u308c\u3066\u304d\u305f\u306e\u3067\u518d\u5ea6\u6295\u7a3f\u3057\u3066\u307f\u307e\u3059\u3002\n\n# \u30c7\u30fc\u30bf\u53ce\u96c6\n\n## \u96fb\u529b\u9700\u8981\n\n\u307e\u305a\u306f\u6771\u4eac\u96fb\u529b\u306e\u30b5\u30a4\u30c8\u304b\u3089\u96fb\u529b\u9700\u8981\u306e\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\n\nhttp://www.tepco.co.jp/forecast/html/download-j.html\n\nhttp://www.tepco.co.jp/forecast/html/images/juyo-2016.csv\n\u203b2017/1/14\u73fe\u5728\u30012016/4/1\u301c2016/12/31\u306e\u4e00\u6642\u9593\u6bce\u306e\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u307e\u305f\u3001URL\u3092\u5909\u66f4\u3059\u308b\u30682014\u5e74\u306e\u30c7\u30fc\u30bf\u3082\u5165\u624b\u3067\u304d\u307e\u3057\u305f\u3002\n\nhttp://www.tepco.co.jp/forecast/html/images/juyo-2014.csv\n\u203b2017/1/14\u73fe\u5728\u30012015\u5e74\u306e\u30c7\u30fc\u30bf\u306f\u304b\u3089\u3063\u307d\u3067\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30c7\u30fc\u30bf\u306f\u65e5\u4ed8\u3001\u6642\u523b\u3001\u96fb\u529b\u5b9f\u7e3e\u306eCSV\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u3061\u306a\u307f\u306b\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u53d6\u5f97\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n\n```sh:\n$ curl -O http://www.tepco.co.jp/forecast/html/images/juyo-2014.csv\n$ curl -O http://www.tepco.co.jp/forecast/html/images/juyo-2016.csv\n```\n\n## \u6c17\u6e29\n\n\u524d\u56de\u540c\u69d8\u306b\u3001\u6c17\u8c61\u5e81\u304b\u3089\u904e\u53bb\u306e\u6c17\u8c61\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\n\nhttp://www.data.jma.go.jp/gmd/risk/obsdl/index.php\n\n\u5730\u70b9\u306f\u300c\u6771\u4eac\u300d\u3001\u9805\u76ee\u306f\u300c\u6642\u5225\u5024\u300d\u300c\u6c17\u6e29\u300d\u3001\u671f\u9593\u306f2013/12/31\u301c2015/1/1\u30682015/12/31\u301c2017/1/1\u3068\u3057\u3001data-2014.csv\u3001data-2016.csv\u3068\u3044\u3046\u540d\u524d\u3067\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u3001\u5c11\u3057\u9577\u3081\u306e\u671f\u9593\u3092\u9078\u629e\u3057\u3066\u3044\u308b\u306e\u306f\u3001\u5f8c\u3067\u671f\u9593\u3092\u7d5e\u3063\u3066\u53d6\u308a\u8fbc\u3080\u305f\u3081\u3067\u3059\u3002\n\n\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30c7\u30fc\u30bf\u306f\u65e5\u6642\u3001\u6c17\u6e29\u3001\u54c1\u8cea\u60c5\u5831\u3001\u5747\u8cea\u756a\u53f7\u3068\u3044\u3046\u30c7\u30fc\u30bf\u306e\u5165\u3063\u305fCSV\u3067\u3059\u3002\n\n\u3061\u306a\u307f\u306b\u3053\u308c\u306f\u666e\u901a\u306b\u30b5\u30a4\u30c8\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u306e\u304c\u65e9\u305d\u3046\u3067\u3059\u3002\n\n# \u30c7\u30fc\u30bf\u8aad\u8fbc\n\n## \u30e9\u30a4\u30d6\u30e9\u30ea\n\n```py3:\nimport pandas as pd\nimport numpy as np\nimport datetime as dt\nimport math\n```\n\n## \u96fb\u529b\u9700\u8981\n\n\u307e\u305a\u30012014\u5e74\u306e\u96fb\u529b\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\n```py3:\nfilename = \"juyo-2014.csv\"\n\n# \u6587\u5b57\u30b3\u30fc\u30c9\u304c\u30b7\u30d5\u30c8JIS\u3067\u3001\u4e0d\u8981\u306a\u884c\u3092\u98db\u3070\u3057\u3066\u8aad\u307f\u8fbc\u3080\ndf = pd.read_csv(filename,encoding=\"SHIFT-JIS\",skiprows=2)\n\n# \u5217\u540d\u3092\u5909\u63db\ndf.columns = [\"DATE\",\"TIME\",\"KW\"]\n\n# \u65e5\u4ed8\u3068\u6642\u9593\u306e\u30c7\u30fc\u30bf\u304c\u5206\u304b\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u4e00\u3064\u306b\u3064\u306a\u3052\u3066\u65e5\u6642\u578b\u306b\u5909\u63db\u3057\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u6307\u5b9a\ndf.index = df.index.map(lambda x: dt.datetime.strptime(df.loc[x].DATE + \" \" + df.loc[x].TIME,\"%Y/%m/%d %H:%M\"))\n\n# \u6708\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\ndf[\"MONTH\"] = df.index.month\n\n# \u66dc\u65e5\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\ndf[\"WEEK\"] = df.index.weekday\n\n# \u6642\u9593\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\ndf[\"HOUR\"] = df.index.hour\n\ndf_kw = df\n```\n\n## \u6c17\u6e29\n\n\u6b21\u306b\u30012014\u5e74\u306e\u6c17\u6e29\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\n```py3:\nfilename = \"data-2014.csv\"\n\n# \u6587\u5b57\u30b3\u30fc\u30c9\u304c\u30b7\u30d5\u30c8JIS\u3067\u3001\u4e0d\u8981\u306a\u884c\u3092\u98db\u3070\u3057\u3001\u5fc5\u8981\u306a2\u5217\u306e\u307f\u53d6\u5f97\ndf = pd.read_csv(filename,encoding=\"SHIFT-JIS\",skiprows=4)[[0,1]]\n\n# \u5217\u540d\u3092\u5909\u63db\ndf.columns = [\"DATE\",\"TEMP\"]\n\n# \u65e5\u6642\u30c7\u30fc\u30bf\u3092\u65e5\u6642\u578b\u306b\u5909\u63db\u3057\u3066\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u6307\u5b9a\ndf.index = df.index.map(lambda x: dt.datetime.strptime(df.loc[x].DATE,\"%Y/%m/%d %H:%M:%S\"))\n\ndf_temp = df\n```\n\n## \u96fb\u529b\u9700\u8981\u3068\u6c17\u6e29\u306e\u30c7\u30fc\u30bf\u3092\u7d50\u5408\n\n```py3:\nd1 = df_kw.index.min()\nd2 = df_kw.index.max()\n\ndf_kw[\"TEMP\"] = df_temp.ix[d1:d2].TEMP\n```\n\n# \u30c7\u30fc\u30bf\u306e\u52a0\u5de5\n\n\u6a5f\u68b0\u5b66\u7fd2\u306b\u7528\u3044\u308b\u5165\u529b\u30c7\u30fc\u30bf\u3068\u51fa\u529b\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u4e88\u6e2c\u3059\u308b\u306e\u306f\u96fb\u529b\u9700\u8981\u306a\u306e\u3067\u3001\u51fa\u529b\u306fKW\u5217\u3001\u5165\u529b\u306fMONTH\u3001WEEK\u3001HOUR\u3001TEMP\u5217\u3068\u3057\u307e\u3059\u3002\n\n```py3:\n# \u5165\u529b\u306b\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u5217\u306e\u6307\u5b9a\nX_cols = [\"MONTH\",\"WEEK\",\"HOUR\",\"TEMP\"]\n\n# \u51fa\u529b\u306b\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u5217\u306e\u6307\u5b9a\ny_cols = [\"KW\"]\n\n# \u5165\u529b\u30fb\u51fa\u529b\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\nX = df_kw[X_cols].as_matrix().astype('float')\ny = df_kw[y_cols].as_matrix().astype('int').flatten()\n```\n\n\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u691c\u8a3c\u30c7\u30fc\u30bf\u306b\u5206\u5272\u3057\u307e\u3059\u3002\n\n```py3:\nfrom sklearn import cross_validation\n\nX_train, X_test, y_train, y_test = cross_validation.train_test_split(X, y, test_size=.1, random_state=42)\n```\n\n\u5165\u529b\u30c7\u30fc\u30bf\u3092\u6b63\u898f\u5316\u3057\u307e\u3059\u3002\n\n```py3:\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nscaler.fit(X_train)\n\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)\n```\n\n# \u5b66\u7fd2\n\n\u56de\u5e30\u30e2\u30c7\u30eb\u3067\u5b66\u7fd2\u3057\u307e\u3059\u3002\n\n```py3:\nfrom sklearn.ensemble import RandomForestRegressor\n\nmodel = RandomForestRegressor()\nmodel.fit(X_train, y_train)\n```\n\n# \u4e88\u6e2c\n\n\u5206\u5272\u3057\u305f\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\n\n```py3:\nprint(model.score(X_test,y_test))\n```\n\n\u30b9\u30b3\u30a2\u306f\u300c0.91601162513664502\u300d\u3067\u3057\u305f(^-^)\n\n# \u4e88\u6e2c\u7d50\u679c\u306e\u78ba\u8a8d\n\n\u4e88\u6e2c\u7d50\u679c\u3068\u5b9f\u30c7\u30fc\u30bf\u3092\u30b0\u30e9\u30d5\u5316\u3057\u3001\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3059\u3002\n\n```py3:\n# \u4e88\u6e2c\u7d50\u679c\nresult = model.predict(X_test)\n\n# \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u5909\u63db\ndf_result = pd.DataFrame({\n    \"y_test\":y_test,\n    \"result\":result\n})\n\n# \u30b0\u30e9\u30d5\u30e9\u30a4\u30d6\u30e9\u30ea\n%matplotlib inline\nimport matplotlib\nimport matplotlib.pyplot as plt\n\n# \u30b0\u30e9\u30d5\u63cf\u753b\ndf_result.plot(figsize=(15, 3))\n```\n\n![Unknown.png](https://qiita-image-store.s3.amazonaws.com/0/114240/3e488f71-c681-9e66-9907-38bb9d4a1239.png)\n\n\u5f53\u305f\u3063\u3066\u308b\u3088\u3046\u306a\u3093\u3060\u3051\u3069\u3001\u3069\u3046\u306a\u306e\u304b\u3044\u307e\u3044\u3061\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u3002\n\n\u30c7\u30fc\u30bf\u6570\u3092\u6e1b\u3089\u3057\u3066\u518d\u78ba\u8a8d\u3002\n\n```py3:\n# \u30b0\u30e9\u30d5\u63cf\u753b\ndf_result[:20].plot(figsize=(15, 3))\n```\n\n![Unknown.png](https://qiita-image-store.s3.amazonaws.com/0/114240/51326381-5080-c31e-cf35-3ae6fff50a16.png)\n\n\u3044\u3044\u611f\u3058\u3058\u3083\u306a\u3044\u3067\u3059\u304b\uff01\n\n# 2016\u5e74\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u4e88\u6e2c\n\n## \u30c7\u30fc\u30bf\u8aad\u8fbc\n\n2014\u5e74\u306e\u30c7\u30fc\u30bf\u3068\u540c\u3058\u624b\u9806\u30672016\u5e74\u306e\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\n```py3:\n# \u96fb\u529b\u9700\u8981\nfilename = \"juyo-2016.csv\"\n\ndf = pd.read_csv(filename,encoding=\"SHIFT-JIS\",skiprows=2)\ndf.columns = [\"DATE\",\"TIME\",\"KW\"]\ndf.index = df.index.map(lambda x: dt.datetime.strptime(df.loc[x].DATE + \" \" + df.loc[x].TIME,\"%Y/%m/%d %H:%M\"))\ndf[\"MONTH\"] = df.index.month\ndf[\"WEEK\"] = df.index.weekday\ndf[\"HOUR\"] = df.index.hour\n\n# 4\u6708\u5206\u306b\u9650\u5b9a\u3057\u3066\u5229\u7528\ndf_kw = df[df.index.month == 4]\n\n# \u6c17\u6e29\nfilename = \"data-2016.csv\"\n\ndf = pd.read_csv(filename,encoding=\"SHIFT-JIS\",skiprows=4)[[0,1]]\ndf.columns = [\"DATE\",\"TEMP\"]\ndf.index = df.index.map(lambda x: dt.datetime.strptime(df.loc[x].DATE,\"%Y/%m/%d %H:%M:%S\"))\n\ndf_temp = df\n\n# \u30c7\u30fc\u30bf\u7d50\u5408\nd1 = df_kw.index.min()\nd2 = df_kw.index.max()\ndf_kw[\"TEMP\"] = df_temp.ix[d1:d2].TEMP\n```\n\n## \u30c7\u30fc\u30bf\u52a0\u5de5\n\n```py3:\n# \u5165\u529b\u30fb\u51fa\u529b\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\nX = df_kw[X_cols].as_matrix().astype('float')\ny = df_kw[y_cols].as_matrix().astype('int').flatten()\n\nX_test = scaler.transform(X)\ny_test = y\n```\n\n## \u4e88\u6e2c\n\n2014\u5e74\u306e\u30c7\u30fc\u30bf\u3067\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3057\u3066\u4e88\u6e2c\u3057\u3001\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\n\n```py3:\nmodel.score(X_test,y_test)\n```\n\n\u7d50\u679c\u306f\u3001\u5c11\u3057\u843d\u3061\u3066\u300c0.82435418225963963\u300d\u3067\u3057\u305f\u3002\n\n## \u4e88\u6e2c\u7d50\u679c\u306e\u78ba\u8a8d\n\n```py3:\n# \u4e88\u6e2c\u7d50\u679c\nresult = model.predict(X_test)\n\n# \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u5909\u63db\ndf_result = pd.DataFrame({\n    \"y_test\":y_test,\n    \"result\":result\n})\n\n# \u30b0\u30e9\u30d5\u63cf\u753b\ndf_result.plot(figsize=(15, 3))\n```\n\n![Unknown.png](https://qiita-image-store.s3.amazonaws.com/0/114240/e5dbec5c-e4ad-3cde-f6d2-626d23ecf7d1.png)\n\n\u3082\u3046\u5c11\u3057\u5de5\u592b\u304c\u5fc5\u8981\u3067\u3059\u306d(-_-;)\n", "tags": ["scikit-learn", "\u6a5f\u68b0\u5b66\u7fd2", "Python"]}