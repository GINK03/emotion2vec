{"context": "\u203b \u30a2\u30ab\u30c7\u30df\u30c3\u30af\u306a\u5185\u5bb9\u306b\u307e\u3067\u306f\u306a\u3063\u3066\u3044\u307e\u305b\u3093\u3002\u5b66\u7fd2\u65b9\u6cd5\u306e\u8a66\u884c\u932f\u8aa4\u3092\u307e\u3068\u3081\u305f\u5185\u5bb9\u3067\u3059\u3002\n\n\u306f\u3058\u3081\u306b\n\u524d\u56de\u300cChainer\u306b\u5165\u9580\u3001And/Or/Xor\u306e\u5b9f\u88c5\u300d\u3001And/Or/Xor\u306e\u8ad6\u7406\u3092\u5b66\u7fd2\u3059\u308b\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306eChainer\u3067\u306e\u5b9f\u88c5\u306b\u3064\u3044\u3066\u3001\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3092\u30d9\u30fc\u30b9\u306b\u307e\u3068\u3081\u307e\u3057\u305f\u3002\n\u3053\u306e\u5b9f\u88c5\u3067\u30d9\u30fc\u30b9\u306b\u3057\u305f\u5b66\u7fd2\u65b9\u6cd5\u306f\u3001\u771f\u7406\u5024\u8868\u306e4\u884c\u3092\u3072\u305f\u3059\u3089\u4e00\u884c\u305a\u3064\u3001\u305d\u306e\u3064\u3069\u30d0\u30c3\u30af\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\u3057\u3066\u5b66\u7fd2\u3055\u305b\u308b\u3053\u3068\u3092\u7e70\u308a\u8fd4\u3059\u5185\u5bb9\u3067\u3057\u305f\u3002\n\u4e00\u822c\u306b\u753b\u50cf\u8a8d\u8b58\u306a\u3069\u306e\u5b66\u7fd2\u3067\u306f\u3001\u30d0\u30c3\u30c1\u51e6\u7406\u3067\u305f\u304f\u3055\u3093\u306e\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u4e00\u5ea6\u306b\u4e0e\u3048\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\u4e00\u3064\u306e\u30c7\u30fc\u30bf\u6bce\u306b\u30d0\u30c3\u30af\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\u3057\u3066\u3044\u3066\u306f\u8a08\u7b97\u52b9\u7387\u304c\u60aa\u3059\u304e\u308b\u306f\u305a\u3067\u3001\u4e00\u5ea6\u306b\u4e0e\u3048\u305f\u308a\u3001\u5206\u3051\u3066\u4e0e\u3048\u305f\u308a\u3001\u3053\u306e\u8fba\u308a\u3092\u30ab\u30b8\u30e5\u30a2\u30eb\u306b\u691c\u8a3c\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u524d\u63d0\n2\u5165\u529b\u306e\u8ad6\u7406\u6f14\u7b97\u306e\u771f\u7406\u5024\u8868\u306a\u306e\u3067\u3001And/Or/Xor\u54044\u3064\u3060\u3051\u3068\u3057\u3066\u3044\u307e\u3059\u3002And\u306e\u5834\u5408)\n\n\n\n\u5165\u529b1\n\u5165\u529b2\n\u51fa\u529b\n\n\n\n\n0\n0\n0\n\n\n0\n1\n0\n\n\n1\n0\n0\n\n\n1\n1\n1\n\n\n\nOr/Xor\u306f\u5272\u611b\u3057\u307e\u3059\u3002\n\u5b66\u7fd2\u306e\u305f\u3081\u5927\u91cf\u306a\u30c7\u30fc\u30bf\u306b\u3059\u308b\u306b\u306f\u3001\u5358\u7d14\u306b\u3053\u306e4\u3064\u3092\u5927\u91cf\u306b\u8907\u88fd\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5b66\u7fd2\u306e\u3055\u305b\u65b9\n5\u3064\u306e\u65b9\u6cd5\u3092\u8a66\u3057\u307e\u3057\u305f\u3002\n\n\u771f\u7406\u5024\u8868\u4e00\u884c\u3054\u3068\u306b\u8aa4\u5dee\u9006\u4f1d\u64ad(optimizer.update)\u3002\n\u771f\u7406\u5024\u8868\u4e00\u884c\u30921000\u500b\u306e\u30c7\u30fc\u30bf\u306b\u5897\u6b96\u3057\u3001\u3053\u306e1000\u500b\u3054\u3068\u306b\u9006\u4f1d\u64ad\u30024\u884c\u5206\u30014\u56de\u3060\u3051\u9006\u4f1d\u64ad\u3059\u308b\u306e\u30921\u56de\u306eepoch\u3068\u3059\u308b\u3002\n2.\u3092100\u500d\u7e70\u308a\u8fd4\u3059\u3002\n\u771f\u7406\u5024\u8868\u30921000\u500d\u500b\u306e\u30c7\u30fc\u30bf\u306b\u5897\u6b96\u3057\u305f\u3082\u306e\u3092\u300110\u500b\u305a\u3064\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u3073\u3001\u3053\u306e\u5168\u3066\u306e\u8aa4\u5dee\u3092\u9006\u4f1d\u64ad\u3002\n4.\u3092500\u500d\u500b\u306b\u3057\u305f\u3082\u306e\u3002\n\n\n\u3044\u304d\u306a\u308a\u7d50\u679c\u3068\u8003\u5bdf\n\n\u771f\u7406\u5024\u8868\u4e00\u884c\u3054\u3068\u306b\u9006\u4f1d\u64ad\u3059\u308c\u3070\u3001\u7121\u96e3\u306b\u5b66\u3079\u307e\u3057\u305f\u3002\n1000\u500b\u5206\u306e\u8aa4\u5dee\u3092\u4e00\u5ea6\u306bupdate\u3057\u3066\u3082\u3001\u5168\u304f\u5b66\u3079\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n2.\u306e100\u500d\u56de\u5b66\u7fd2\u3092\u7e70\u308a\u8fd4\u3059\u3053\u3068\u3067\u3001\u5b66\u3079\u307e\u3057\u305f\u304c1.\u306e2\u500d\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3044\u307e\u3059\u3002\n\u30e9\u30f3\u30c0\u30e0\u306b\u4e0e\u3048\u308b\u3068\u30011\u3068\u540c\u3058\u5b66\u7fd2\u6642\u9593\u3067\u3082\u3088\u308a\u826f\u304f\u5b66\u3079\u307e\u3057\u305f\u3002\u305f\u3060\u3057\u30011.\u3068\u6bd4\u8f03\u3057\u306610\u500d\u306e\u8aa4\u5dee\u304c\u8fbc\u3081\u3089\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u666e\u901a\u8003\u3048\u308b\u306810\u500d\u306e\u30c7\u30fc\u30bf\u304c\u5fc5\u8981\u3068\u306a\u308b\u304b\u3001\u4f7f\u3044\u307e\u308f\u3057\u305f\u304b\u3001\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u4e00\u822c\u7684\u306b\u306f\u3001\u5b66\u7fd2\u30c7\u30fc\u30bf\u304c\u306f\u305d\u308c\u305e\u308c\u9055\u3044\u304c\u3042\u308b\u3067\u3057\u3087\u3046\u304b\u3089\u3001\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u3093\u3067\u4e0e\u3048\u308b\u3053\u3068\u306f\u3001\u305d\u308c\u81ea\u4f53\u610f\u5473\u304c\u3042\u308b\u306e\u3067\u306f\u3068\u601d\u3044\u307e\u3059\u3002\n4.\u306e\u534a\u5206\u306e\u91cf\u30fb\u6642\u9593\u30671\u3068\u540c\u3058\u3088\u3046\u306b\u5b66\u3079\u307e\u3057\u305f\u304c\u3001\u5834\u5408\u306b\u3088\u3063\u3066\u5931\u6557\u3057\u307e\u3057\u305f\u3002\u30b9\u30b3\u30a2\u304c\u60aa\u3044\u306e\u3067\u3001\u3084\u306f\u308a\u5b66\u7fd2\u91cf\u304c\u30ae\u30ea\u30ae\u30ea\u306a\u3082\u304b\u3068\u60f3\u5b9a\u3055\u308c\u307e\u3059\u3002\n\n\n\u7d50\u679c\u8a73\u7d30\n\u4e0b\u306e\u8868\u306b\u307e\u3068\u3081\u307e\u3059\u3002\n\u300cLooper#\u300d\u306f\u4e0a\u306e\u5b66\u7fd2\u306e\u3055\u305b\u65b9\u3001\n\u300cTarget Logic\u300d\u304c\u5bfe\u8c61\u306e\u8ad6\u7406\u6f14\u7b97\u3001Total\u306f3\u3064\u306e\u6f14\u7b97\u7d50\u679c\u3092\u8db3\u3057\u305f\u3082\u306e\u3002\n\u300cScore\u300d\u306f\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u51fa\u529b\u304c\u3069\u308c\u3060\u3051\u65ad\u5b9a\u7684(\u5b66\u7fd2\u3057\u305f\u91cd\u307f\u306e\u5dee\u304c\u5927\u304d\u3044)\u306b\u8b58\u5225\u3057\u305f\u304b\u3092\u5b9a\u91cf\u5316\u3057\u307e\u3057\u305f\u3002\u5177\u4f53\u7684\u306b\u306f\u30012\u5165\u529b\u306b\u5bfe\u3057\u30660\u3067\u3042\u308b\u304b(=y0)\u30011\u3067\u3042\u308b\u304b\u306e\u5ea6\u5408\u3044(=y1)\u3092\u305d\u308c\u305e\u308c2\u51fa\u529b\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001\n\u30b9\u30b3\u30a2 = \u6b63\u89e3\u306e\u3068\u304d\u300cabs(y0 - y1) \u300d\u3001\u307e\u305f\u306f\u5931\u6557\u306e\u3068\u304d\u30da\u30ca\u30eb\u30c6\u30a3-10\n\n\u3068\u3057\u307e\u3057\u305f\u3002\u5931\u6557\u306f\u6c7a\u5b9a\u7684\u306b\u99c4\u76ee\u3067\u3059\u304b\u3089\u3001\u3053\u306e\u304f\u3089\u3044\u306b\u3059\u308b\u3068\u8abf\u5ea6\u826f\u3044\u5b9a\u91cf\u5316\u306b\u306a\u308a\u307e\u3059\u3002\n\u203b \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306eloss\u3092\u5229\u7528\u3059\u308b\u65b9\u6cd5\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u5b66\u7fd2\u306e\u6df1\u3055\u3067\u8a55\u4fa1\u3057\u306b\u304f\u3044\u306e\u3067\u3053\u306e\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u300cTime\u300d\u306f\u5358\u7d14\u306b\u5b66\u7fd2\u6642\u9593\u3067\u3059\u3002\u4ee5\u4e0b\u3001\u4ee3\u8868\u7684\u306a\u5b66\u7fd2\u7d50\u679c\u3067\u3059\u3002\n\n\n\nLooper#\nTarget Logic\nScore\nTime[s]\n\n\n\n\n1\nAND\n24.74618053\n12.496183\n\n\n1\nOR\n26.4404521\n12.319802\n\n\n1\nXOR\n29.4809413\n126.857355\n\n\n\nTotal\n80.66757393\n151.67334\n\n\n2\nAND\n2.581748486\n0.209413\n\n\n2\nOR\n2.840739608\n0.203\n\n\n2\nXOR\n0.001452803612\n1.944938\n\n\n\nTotal\n5.423940897\n2.357351\n\n\n3\nAND\n25.68048954\n19.507454\n\n\n3\nOR\n25.75035954\n21.889814\n\n\n3\nXOR\n29.09391069\n216.89496\n\n\n\nTotal\n80.52475977\n258.292228\n\n\n4\nAND\n27.19021177\n12.583697\n\n\n4\nOR\n25.7230587\n12.561616\n\n\n4\nXOR\n29.48229361\n131.140775\n\n\n\nTotal\n82.39556408\n156.286088\n\n\n5\nAND\n22.49892282\n6.33744\n\n\n5\nOR\n21.9080205\n6.285826\n\n\n5\nXOR\n26.59224701\n64.576828\n\n\n\nTotal\n70.99919033\n77.200094\n\n\n\n\n\u30b3\u30fc\u30c9\nStopwatch\u3068\u3044\u3046\u81ea\u5bb6\u88fd\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n(\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3067: [Python]\u6c17\u8efd\u306b\u30d7\u30ed\u30fc\u30d6\u3092\u5dee\u3057\u8fbc\u3093\u3067\u3001\u51e6\u7406\u6642\u9593\u3092\u7c21\u6613\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u30ea\u30f3\u30b0: Stopwatch)\n\nlearner_test_logicalop.py\n# Chainer training: And/Or/Xor classifier network: Learning algo comparison.\n#\n# This is re-written version of:\n#   http://hi-king.hatenablog.com/entry/2015/06/27/194630\n# By following chainer introduction:\n#   http://docs.chainer.org/en/stable/tutorial/basic.html\n\n## Chainer cliche\nimport numpy as np\nimport chainer\nfrom chainer import cuda, Function, gradient_check, Variable, optimizers, serializers, utils\nfrom chainer import Link, Chain, ChainList\nimport chainer.functions as F\nimport chainer.links as L\nfrom stopwatch import Stopwatch\n\n# Neural Network\n\n## Network definition\nclass NN2x2_2links(Chain):\n    def __init__(self):\n        super(NN2x2_2links, self).__init__(\n            l1 = F.Linear(2, 2),\n            l2 = F.Linear(2, 2),\n        )\n    def __call__(self, x):\n        l1out = F.sigmoid(self.l1(x))\n        h = self.l2(l1out)\n        return h\n\n# Sub routine\n\n## Utility: Score marker\ndef mark_score(model, inputs, outputs):\n    def one_score(expected, predicted, zero_degree, one_degree):\n        degree = abs(zero_degree - one_degree)\n        return degree * (-1, 1)[expected == predicted]\n    sum_score, sum_loss, sum_accuracy = 0, 0, 0\n    for i in range(len(inputs)):\n        x  = Variable(np.array(inputs[i], dtype=np.float32))\n        t  = Variable(np.array([outputs[i]], dtype=np.int32))\n        y = model.predictor(x)\n        loss = model(x, t)\n        sum_loss += loss.data\n        sum_accuracy += model.accuracy.data\n        # debug print('  %d & %d = %d (zero:%f one:%f)' % (x.data[0,0], x.data[0,1], np.argmax(y.data), y.data[0,0], y.data[0,1]))\n        sum_score += one_score(outputs[i], np.argmax(y.data), y.data[0,0], y.data[0,1])\n    return sum_score\n\n## Learning loop#1: Learn One training data for One update\ndef learning_looper(model, optimizer, inputs, outputs, epoch_size):\n    augment_size = 100\n    for epoch in range(epoch_size):\n        for a in range(augment_size):\n            for i in range(4):\n                x = Variable(np.array(inputs[i], dtype=np.float32))\n                t = Variable(np.array([outputs[i]], dtype=np.int32))\n                optimizer.update(model, x, t)\n\n## Learning loop#2: 100 Copy of a training data for One update\ndef learning_looper2(model, optimizer, inputs, outputs, epoch_size, extra_epoch_x = 1):\n    augment_size = 1000\n    for epoch in range(epoch_size * extra_epoch_x):\n        for i in range(4):\n            x = Variable(np.array(inputs[i] * augment_size, dtype=np.float32))\n            t = Variable(np.array([outputs[i]] * augment_size, dtype=np.int32))\n            optimizer.update(model, x, t)\n\n## Learning loop#3: Extra x100 times of epoch loop for #2.\ndef learning_looper3(model, optimizer, inputs, outputs, epoch_size):\n    return learning_looper2(model, optimizer, inputs, outputs, epoch_size, 100)\n\n## Learning loop#4: One batch of ramdomly selected for One update\ndef learning_looper4(model, optimizer, inputs, outputs, epoch_size, augment_size = 1000):\n    data_size = 4 * augment_size\n    in_augs  = np.array(inputs * augment_size, dtype=np.float32)\n    out_augs = np.array([o for o in outputs * augment_size], dtype=np.int32)\n    batch_size = 10\n    for epoch in range(epoch_size):\n        indexes = np.random.permutation(data_size)\n        for i in range(0, data_size, batch_size):\n            x = Variable( in_augs[indexes[i : i + batch_size]])\n            t = Variable(out_augs[indexes[i : i + batch_size]])\n            optimizer.update(model, x, t)\n\ndef learning_looper5(model, optimizer, inputs, outputs, epoch_size):\n    return learning_looper4(model, optimizer, inputs, outputs, epoch_size, 500)\n\n# Main\n\nclass Logic2Learn:\n    def __init__(self, name, outputs):\n        self.inputs = [[[0., 0.]], [[0., 1.]], [[1., 0.]], [[1., 1.]]]\n        self.outputs = outputs\n        self.model = L.Classifier(NN2x2_2links())\n        self.optimizer = optimizers.MomentumSGD(lr=0.01, momentum=0.9)\n        self.name = name\n    def learn(self, looper = 0, epoch_size = 20):\n        watch = Stopwatch()\n        self.optimizer.setup(self.model)\n        (learning_looper, learning_looper2, learning_looper3, learning_looper4, learning_looper5) \\\n            [looper if 0 <= looper and looper < 5 else 0] \\\n            (self.model, self.optimizer, self.inputs, self.outputs, epoch_size)\n        score = mark_score(self.model, self.inputs, self.outputs)\n        sec = watch.stop().total_seconds()\n        print self.name + '\\t' + str(looper + 1) + '\\t' + str(score) + '\\t' + str(sec)\n        return score, sec\n\nclass ScoreSecCount:\n    def __init__(self):\n        self.sum_score, self.sum_sec = 0, 0\n    def count(self, tup):\n        score, sec = tup\n        self.sum_score += score\n        self.sum_sec   += sec\n    def totalScore(self):\n        return self.sum_score\n    def totalSec(self):\n        return self.sum_sec\n\n## Lean and output results\nprint 'Target Logic\\tLooper#\\tScore\\tTime[s]'\nfor  looper in range(5):\n    counter = ScoreSecCount()\n\n    logic_and = Logic2Learn('AND', [0, 0, 0, 1])\n    counter.count(logic_and.learn(looper))\n\n    logic_or  = Logic2Learn('OR',  [0, 1, 1, 1])\n    counter.count(logic_or.learn(looper))\n\n    logic_xor = Logic2Learn('XOR', [0, 1, 1, 0])\n    counter.count(logic_xor.learn(looper, 200))\n\n    print 'Total\\t--\\t' + str(counter.totalScore()) + '\\t' + str(counter.totalSec())\n\n\n\n\u203b \u30a2\u30ab\u30c7\u30df\u30c3\u30af\u306a\u5185\u5bb9\u306b\u307e\u3067\u306f\u306a\u3063\u3066\u3044\u307e\u305b\u3093\u3002\u5b66\u7fd2\u65b9\u6cd5\u306e\u8a66\u884c\u932f\u8aa4\u3092\u307e\u3068\u3081\u305f\u5185\u5bb9\u3067\u3059\u3002\n\n## \u306f\u3058\u3081\u306b\n\u524d\u56de\u300c[Chainer\u306b\u5165\u9580\u3001And/Or/Xor\u306e\u5b9f\u88c5](http://qiita.com/daisukelab/items/6ad3242eeba140023191)\u300d\u3001And/Or/Xor\u306e\u8ad6\u7406\u3092\u5b66\u7fd2\u3059\u308b\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306eChainer\u3067\u306e\u5b9f\u88c5\u306b\u3064\u3044\u3066\u3001\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3092\u30d9\u30fc\u30b9\u306b\u307e\u3068\u3081\u307e\u3057\u305f\u3002\n\n\u3053\u306e\u5b9f\u88c5\u3067\u30d9\u30fc\u30b9\u306b\u3057\u305f\u5b66\u7fd2\u65b9\u6cd5\u306f\u3001\u771f\u7406\u5024\u8868\u306e4\u884c\u3092\u3072\u305f\u3059\u3089\u4e00\u884c\u305a\u3064\u3001\u305d\u306e\u3064\u3069[\u30d0\u30c3\u30af\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3](https://ja.wikipedia.org/wiki/\u30d0\u30c3\u30af\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3)\u3057\u3066\u5b66\u7fd2\u3055\u305b\u308b\u3053\u3068\u3092\u7e70\u308a\u8fd4\u3059\u5185\u5bb9\u3067\u3057\u305f\u3002\n\n\u4e00\u822c\u306b\u753b\u50cf\u8a8d\u8b58\u306a\u3069\u306e\u5b66\u7fd2\u3067\u306f\u3001\u30d0\u30c3\u30c1\u51e6\u7406\u3067\u305f\u304f\u3055\u3093\u306e\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u4e00\u5ea6\u306b\u4e0e\u3048\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\u4e00\u3064\u306e\u30c7\u30fc\u30bf\u6bce\u306b\u30d0\u30c3\u30af\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\u3057\u3066\u3044\u3066\u306f\u8a08\u7b97\u52b9\u7387\u304c\u60aa\u3059\u304e\u308b\u306f\u305a\u3067\u3001\u4e00\u5ea6\u306b\u4e0e\u3048\u305f\u308a\u3001\u5206\u3051\u3066\u4e0e\u3048\u305f\u308a\u3001\u3053\u306e\u8fba\u308a\u3092\u30ab\u30b8\u30e5\u30a2\u30eb\u306b\u691c\u8a3c\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n### \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u524d\u63d0\n2\u5165\u529b\u306e\u8ad6\u7406\u6f14\u7b97\u306e\u771f\u7406\u5024\u8868\u306a\u306e\u3067\u3001And/Or/Xor\u54044\u3064\u3060\u3051\u3068\u3057\u3066\u3044\u307e\u3059\u3002And\u306e\u5834\u5408)\n\n| \u5165\u529b1 | \u5165\u529b2 | \u51fa\u529b |\n|:----:|:-----:|:---:|\n| 0 | 0 | 0 | \n| 0 | 1 | 0 | \n| 1 | 0 | 0 | \n| 1 | 1 | 1 | \n\nOr/Xor\u306f\u5272\u611b\u3057\u307e\u3059\u3002\n\n\u5b66\u7fd2\u306e\u305f\u3081\u5927\u91cf\u306a\u30c7\u30fc\u30bf\u306b\u3059\u308b\u306b\u306f\u3001\u5358\u7d14\u306b\u3053\u306e4\u3064\u3092\u5927\u91cf\u306b\u8907\u88fd\u3057\u3066\u3044\u307e\u3059\u3002\n\n## \u5b66\u7fd2\u306e\u3055\u305b\u65b9\n5\u3064\u306e\u65b9\u6cd5\u3092\u8a66\u3057\u307e\u3057\u305f\u3002\n\n1. \u771f\u7406\u5024\u8868\u4e00\u884c\u3054\u3068\u306b\u8aa4\u5dee\u9006\u4f1d\u64ad(optimizer.update)\u3002\n2. \u771f\u7406\u5024\u8868\u4e00\u884c\u30921000\u500b\u306e\u30c7\u30fc\u30bf\u306b\u5897\u6b96\u3057\u3001\u3053\u306e1000\u500b\u3054\u3068\u306b\u9006\u4f1d\u64ad\u30024\u884c\u5206\u30014\u56de\u3060\u3051\u9006\u4f1d\u64ad\u3059\u308b\u306e\u30921\u56de\u306eepoch\u3068\u3059\u308b\u3002\n3. 2.\u3092100\u500d\u7e70\u308a\u8fd4\u3059\u3002\n4. \u771f\u7406\u5024\u8868\u30921000\u500d\u500b\u306e\u30c7\u30fc\u30bf\u306b\u5897\u6b96\u3057\u305f\u3082\u306e\u3092\u300110\u500b\u305a\u3064\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u3073\u3001\u3053\u306e\u5168\u3066\u306e\u8aa4\u5dee\u3092\u9006\u4f1d\u64ad\u3002\n5. 4.\u3092500\u500d\u500b\u306b\u3057\u305f\u3082\u306e\u3002\n\n## \u3044\u304d\u306a\u308a\u7d50\u679c\u3068\u8003\u5bdf\n\n1. \u771f\u7406\u5024\u8868\u4e00\u884c\u3054\u3068\u306b\u9006\u4f1d\u64ad\u3059\u308c\u3070\u3001\u7121\u96e3\u306b\u5b66\u3079\u307e\u3057\u305f\u3002\n2. 1000\u500b\u5206\u306e\u8aa4\u5dee\u3092\u4e00\u5ea6\u306bupdate\u3057\u3066\u3082\u3001\u5168\u304f\u5b66\u3079\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n3. 2.\u306e100\u500d\u56de\u5b66\u7fd2\u3092\u7e70\u308a\u8fd4\u3059\u3053\u3068\u3067\u3001\u5b66\u3079\u307e\u3057\u305f\u304c1.\u306e2\u500d\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3044\u307e\u3059\u3002\n4. \u30e9\u30f3\u30c0\u30e0\u306b\u4e0e\u3048\u308b\u3068\u30011\u3068\u540c\u3058\u5b66\u7fd2\u6642\u9593\u3067\u3082\u3088\u308a\u826f\u304f\u5b66\u3079\u307e\u3057\u305f\u3002\u305f\u3060\u3057\u30011.\u3068\u6bd4\u8f03\u3057\u306610\u500d\u306e\u8aa4\u5dee\u304c\u8fbc\u3081\u3089\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u666e\u901a\u8003\u3048\u308b\u306810\u500d\u306e\u30c7\u30fc\u30bf\u304c\u5fc5\u8981\u3068\u306a\u308b\u304b\u3001\u4f7f\u3044\u307e\u308f\u3057\u305f\u304b\u3001\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u4e00\u822c\u7684\u306b\u306f\u3001\u5b66\u7fd2\u30c7\u30fc\u30bf\u304c\u306f\u305d\u308c\u305e\u308c\u9055\u3044\u304c\u3042\u308b\u3067\u3057\u3087\u3046\u304b\u3089\u3001\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u3093\u3067\u4e0e\u3048\u308b\u3053\u3068\u306f\u3001\u305d\u308c\u81ea\u4f53\u610f\u5473\u304c\u3042\u308b\u306e\u3067\u306f\u3068\u601d\u3044\u307e\u3059\u3002\n5. 4.\u306e\u534a\u5206\u306e\u91cf\u30fb\u6642\u9593\u30671\u3068\u540c\u3058\u3088\u3046\u306b\u5b66\u3079\u307e\u3057\u305f\u304c\u3001\u5834\u5408\u306b\u3088\u3063\u3066\u5931\u6557\u3057\u307e\u3057\u305f\u3002\u30b9\u30b3\u30a2\u304c\u60aa\u3044\u306e\u3067\u3001\u3084\u306f\u308a\u5b66\u7fd2\u91cf\u304c\u30ae\u30ea\u30ae\u30ea\u306a\u3082\u304b\u3068\u60f3\u5b9a\u3055\u308c\u307e\u3059\u3002\n\n## \u7d50\u679c\u8a73\u7d30\n\u4e0b\u306e\u8868\u306b\u307e\u3068\u3081\u307e\u3059\u3002\n\n\u300cLooper#\u300d\u306f\u4e0a\u306e\u5b66\u7fd2\u306e\u3055\u305b\u65b9\u3001\n\u300cTarget Logic\u300d\u304c\u5bfe\u8c61\u306e\u8ad6\u7406\u6f14\u7b97\u3001Total\u306f3\u3064\u306e\u6f14\u7b97\u7d50\u679c\u3092\u8db3\u3057\u305f\u3082\u306e\u3002\n\n\u300cScore\u300d\u306f\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u51fa\u529b\u304c\u3069\u308c\u3060\u3051\u65ad\u5b9a\u7684(\u5b66\u7fd2\u3057\u305f\u91cd\u307f\u306e\u5dee\u304c\u5927\u304d\u3044)\u306b\u8b58\u5225\u3057\u305f\u304b\u3092\u5b9a\u91cf\u5316\u3057\u307e\u3057\u305f\u3002\u5177\u4f53\u7684\u306b\u306f\u30012\u5165\u529b\u306b\u5bfe\u3057\u30660\u3067\u3042\u308b\u304b(=y0)\u30011\u3067\u3042\u308b\u304b\u306e\u5ea6\u5408\u3044(=y1)\u3092\u305d\u308c\u305e\u308c2\u51fa\u529b\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001\n\n\t\u30b9\u30b3\u30a2 = \u6b63\u89e3\u306e\u3068\u304d\u300cabs(y0 - y1) \u300d\u3001\u307e\u305f\u306f\u5931\u6557\u306e\u3068\u304d\u30da\u30ca\u30eb\u30c6\u30a3-10\n\n\u3068\u3057\u307e\u3057\u305f\u3002\u5931\u6557\u306f\u6c7a\u5b9a\u7684\u306b\u99c4\u76ee\u3067\u3059\u304b\u3089\u3001\u3053\u306e\u304f\u3089\u3044\u306b\u3059\u308b\u3068\u8abf\u5ea6\u826f\u3044\u5b9a\u91cf\u5316\u306b\u306a\u308a\u307e\u3059\u3002\n\u203b \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306eloss\u3092\u5229\u7528\u3059\u308b\u65b9\u6cd5\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u5b66\u7fd2\u306e\u6df1\u3055\u3067\u8a55\u4fa1\u3057\u306b\u304f\u3044\u306e\u3067\u3053\u306e\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u300cTime\u300d\u306f\u5358\u7d14\u306b\u5b66\u7fd2\u6642\u9593\u3067\u3059\u3002\u4ee5\u4e0b\u3001\u4ee3\u8868\u7684\u306a\u5b66\u7fd2\u7d50\u679c\u3067\u3059\u3002\n\n| Looper# | Target Logic | Score | Time[s] |\n|:-------:|:-----------:|:------|:-----|\n|1 | AND | 24.74618053 | 12.496183 |\n|1 |\tOR\t| 26.4404521 |\t12.319802 |\n|1\t| XOR |\t29.4809413 |\t126.857355 |\n|\t| Total\t| 80.66757393\t| 151.67334 |\n|2\t| AND\t| 2.581748486\t| 0.209413 |\n|2\t| OR\t| 2.840739608\t| 0.203 |\n|2\t| XOR\t| 0.001452803612\t| 1.944938 |\n|\t| Total\t| 5.423940897\t| 2.357351 |\n|3\t| AND\t| 25.68048954\t| 19.507454 |\n|3\t| OR\t| 25.75035954\t| 21.889814 |\n|3\t| XOR\t| 29.09391069\t| 216.89496 |\n|\t| Total\t| 80.52475977\t| 258.292228 |\n|4\t| AND\t| 27.19021177\t| 12.583697 |\n|4\t| OR\t| 25.7230587\t| 12.561616 |\n|4\t| XOR\t| 29.48229361\t| 131.140775 |\n|\t| Total\t| 82.39556408\t| 156.286088 |\n|5\t| AND\t| 22.49892282\t| 6.33744 |\n|5\t| OR\t| 21.9080205\t| 6.285826 |\n|5\t| XOR\t| 26.59224701\t| 64.576828 |\n|\t| Total\t| 70.99919033\t| 77.200094 |\n\n## \u30b3\u30fc\u30c9\nStopwatch\u3068\u3044\u3046\u81ea\u5bb6\u88fd\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n(\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3067: [[Python]\u6c17\u8efd\u306b\u30d7\u30ed\u30fc\u30d6\u3092\u5dee\u3057\u8fbc\u3093\u3067\u3001\u51e6\u7406\u6642\u9593\u3092\u7c21\u6613\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u30ea\u30f3\u30b0: Stopwatch](http://qiita.com/daisukelab/items/b05853829e229d7070f5))\n\n```python:learner_test_logicalop.py\n# Chainer training: And/Or/Xor classifier network: Learning algo comparison.\n#\n# This is re-written version of:\n#   http://hi-king.hatenablog.com/entry/2015/06/27/194630\n# By following chainer introduction:\n#   http://docs.chainer.org/en/stable/tutorial/basic.html\n\n## Chainer cliche\nimport numpy as np\nimport chainer\nfrom chainer import cuda, Function, gradient_check, Variable, optimizers, serializers, utils\nfrom chainer import Link, Chain, ChainList\nimport chainer.functions as F\nimport chainer.links as L\nfrom stopwatch import Stopwatch\n\n# Neural Network\n\n## Network definition\nclass NN2x2_2links(Chain):\n    def __init__(self):\n        super(NN2x2_2links, self).__init__(\n            l1 = F.Linear(2, 2),\n            l2 = F.Linear(2, 2),\n        )\n    def __call__(self, x):\n        l1out = F.sigmoid(self.l1(x))\n        h = self.l2(l1out)\n        return h\n\n# Sub routine\n\n## Utility: Score marker\ndef mark_score(model, inputs, outputs):\n    def one_score(expected, predicted, zero_degree, one_degree):\n        degree = abs(zero_degree - one_degree)\n        return degree * (-1, 1)[expected == predicted]\n    sum_score, sum_loss, sum_accuracy = 0, 0, 0\n    for i in range(len(inputs)):\n        x  = Variable(np.array(inputs[i], dtype=np.float32))\n        t  = Variable(np.array([outputs[i]], dtype=np.int32))\n        y = model.predictor(x)\n        loss = model(x, t)\n        sum_loss += loss.data\n        sum_accuracy += model.accuracy.data\n        # debug print('  %d & %d = %d (zero:%f one:%f)' % (x.data[0,0], x.data[0,1], np.argmax(y.data), y.data[0,0], y.data[0,1]))\n        sum_score += one_score(outputs[i], np.argmax(y.data), y.data[0,0], y.data[0,1])\n    return sum_score\n\n## Learning loop#1: Learn One training data for One update\ndef learning_looper(model, optimizer, inputs, outputs, epoch_size):\n    augment_size = 100\n    for epoch in range(epoch_size):\n        for a in range(augment_size):\n            for i in range(4):\n                x = Variable(np.array(inputs[i], dtype=np.float32))\n                t = Variable(np.array([outputs[i]], dtype=np.int32))\n                optimizer.update(model, x, t)\n\n## Learning loop#2: 100 Copy of a training data for One update\ndef learning_looper2(model, optimizer, inputs, outputs, epoch_size, extra_epoch_x = 1):\n    augment_size = 1000\n    for epoch in range(epoch_size * extra_epoch_x):\n        for i in range(4):\n            x = Variable(np.array(inputs[i] * augment_size, dtype=np.float32))\n            t = Variable(np.array([outputs[i]] * augment_size, dtype=np.int32))\n            optimizer.update(model, x, t)\n\n## Learning loop#3: Extra x100 times of epoch loop for #2.\ndef learning_looper3(model, optimizer, inputs, outputs, epoch_size):\n    return learning_looper2(model, optimizer, inputs, outputs, epoch_size, 100)\n\n## Learning loop#4: One batch of ramdomly selected for One update\ndef learning_looper4(model, optimizer, inputs, outputs, epoch_size, augment_size = 1000):\n    data_size = 4 * augment_size\n    in_augs  = np.array(inputs * augment_size, dtype=np.float32)\n    out_augs = np.array([o for o in outputs * augment_size], dtype=np.int32)\n    batch_size = 10\n    for epoch in range(epoch_size):\n        indexes = np.random.permutation(data_size)\n        for i in range(0, data_size, batch_size):\n            x = Variable( in_augs[indexes[i : i + batch_size]])\n            t = Variable(out_augs[indexes[i : i + batch_size]])\n            optimizer.update(model, x, t)\n\ndef learning_looper5(model, optimizer, inputs, outputs, epoch_size):\n    return learning_looper4(model, optimizer, inputs, outputs, epoch_size, 500)\n\n# Main\n\nclass Logic2Learn:\n    def __init__(self, name, outputs):\n        self.inputs = [[[0., 0.]], [[0., 1.]], [[1., 0.]], [[1., 1.]]]\n        self.outputs = outputs\n        self.model = L.Classifier(NN2x2_2links())\n        self.optimizer = optimizers.MomentumSGD(lr=0.01, momentum=0.9)\n        self.name = name\n    def learn(self, looper = 0, epoch_size = 20):\n        watch = Stopwatch()\n        self.optimizer.setup(self.model)\n        (learning_looper, learning_looper2, learning_looper3, learning_looper4, learning_looper5) \\\n            [looper if 0 <= looper and looper < 5 else 0] \\\n            (self.model, self.optimizer, self.inputs, self.outputs, epoch_size)\n        score = mark_score(self.model, self.inputs, self.outputs)\n        sec = watch.stop().total_seconds()\n        print self.name + '\\t' + str(looper + 1) + '\\t' + str(score) + '\\t' + str(sec)\n        return score, sec\n\nclass ScoreSecCount:\n    def __init__(self):\n        self.sum_score, self.sum_sec = 0, 0\n    def count(self, tup):\n        score, sec = tup\n        self.sum_score += score\n        self.sum_sec   += sec\n    def totalScore(self):\n        return self.sum_score\n    def totalSec(self):\n        return self.sum_sec\n\n## Lean and output results\nprint 'Target Logic\\tLooper#\\tScore\\tTime[s]'\nfor  looper in range(5):\n    counter = ScoreSecCount()\n\n    logic_and = Logic2Learn('AND', [0, 0, 0, 1])\n    counter.count(logic_and.learn(looper))\n\n    logic_or  = Logic2Learn('OR',  [0, 1, 1, 1])\n    counter.count(logic_or.learn(looper))\n\n    logic_xor = Logic2Learn('XOR', [0, 1, 1, 0])\n    counter.count(logic_xor.learn(looper, 200))\n\n    print 'Total\\t--\\t' + str(counter.totalScore()) + '\\t' + str(counter.totalSec())\n```\n", "tags": ["Chainer", "NeuralNetwork"]}