{"tags": ["Socket\u901a\u4fe1", "windows7", "C", "MinGW"], "context": "\n\nminGW \u3092\u4f7f\u3063\u305f\u3001UDP\u306e\u30de\u30eb\u30c1\u30ad\u30e3\u30b9\u30c8\u53d7\u4fe1\u95a2\u6570\nwindows 7 \u306eDOS\u7a93\u3067\u52d5\u4f5c\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\n\nudprcvmc.c\n#include <stdio.h>\n#include <fcntl.h>\n#include <winsock.h>\n#include <string.h>\n\nint main()\n{\n    int sock, err;\n    struct sockaddr_in addr;\n    struct ip_mreq mreq;\n    WSADATA wsaData;\n    char buf[2048];\n\n    // winsock2\u306e\u521d\u671f\u5316\n    WSAStartup(MAKEWORD(2,0), &wsaData);\n\n    //socket\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\n    //\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bfsd\u3092\u53d6\u5f97\u3059\u308b\n    //SOCK_DGRAM <- UDP, SOCK_STREAM<- TCP\n    if ((sock = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {\n        perror(\"socket\");\n        printf(\"error:%d\\n\",WSAGetLastError());\n        return 1;\n    }\n\n    // \u53d7\u4fe1\u5143\u30a2\u30c9\u30ec\u30b9\u3068\u30dd\u30fc\u30c8\u756a\u53f7\u3092\u8a2d\u5b9a\u3059\u308b\n    addr.sin_family = AF_INET;\n    addr.sin_port = htons(12345);       //IP\u30a2\u30c9\u30ec\u30b9\u3092\u683c\u7d0d\u3057\u305fin_addr\u69cb\u9020\u4f53\n    addr.sin_addr.s_addr = INADDR_ANY;  // \u30dd\u30fc\u30c8\u756a\u53f7(htons)\u3067\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30d0\u30a4\u30c8\u30aa\u30fc\u30c0\u30fc\u306b\u5909\u63db\n\n    // \u30bd\u30b1\u30c3\u30c8\u306b\u540d\u524d\uff08\u30dd\u30fc\u30c8\u756a\u53f7 & IP\u30a2\u30c9\u30ec\u30b9\uff09\u3092\u4ed8\u3051\u308b\n    if (bind(sock, (struct sockaddr *)&addr, sizeof(addr)) < 0) {\n        perror(\"bind\");\n        printf(\"error:%d\\n\",WSAGetLastError());\n        closesocket(sock);\n        return -1;\n    }\n\n    char loopch=0;\n\n    // IP_MULTICAST_LOOP<- \u767a\u4fe1\u30de\u30eb\u30c1\u30ad\u30e3\u30b9\u30c8\u30fb\u30c7\u30fc\u30bf\u30b0\u30e9\u30e0\u306e\u30b3\u30d4\u30fc\u304c\u30de\u30eb\u30c1\u30ad\u30e3\u30b9\u30c8\u30fb\u30b0\u30eb\u30fc\u30d7\n    // \u306e\u30e1\u30f3\u30d0\u30fc\u3067\u3042\u308b\u304b\u304e\u308a\u9001\u4fe1\u3057\u3066\u3044\u308b\u30db\u30b9\u30c8\u306b\u9001\u9054\u3055\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n    if ((err=setsockopt(sock, IPPROTO_IP, IP_MULTICAST_LOOP,\n        (char *)&loopch, sizeof(loopch))) < 0) {\n        perror(\"setsockopt\");\n        printf(\"error:%d\\n\",WSAGetLastError());\n        closesocket(sock);\n        return 1;\n        }\n\n    // setsockopt\u306f\u3001bind\u4ee5\u964d\u3067\u884c\u3046\u5fc5\u8981\u3042\u308a\n    // \u53d7\u4fe1\u5143\u30a2\u30c9\u30ec\u30b9\u3068\u30dd\u30fc\u30c8\u756a\u53f7\u3092\u8a2d\u5b9a\u3059\u308b\n    memset(&mreq, 0, sizeof(mreq));\n    mreq.imr_interface.s_addr = INADDR_ANY;\n    mreq.imr_multiaddr.s_addr = inet_addr(\"127.0.0.1\");\n    if (setsockopt(sock,\n        IPPROTO_IP,\n        IP_ADD_MEMBERSHIP,  //\u53d7\u4fe1\n        (char *)&mreq, sizeof(mreq)) != 0) {\n            perror(\"setsockopt\");\n            printf(\"error:%d\\n\",WSAGetLastError());\n            return 1;\n    }\n\n    int recv_len;\n    struct sockaddr_in from;\n    int sockaddr_in_size = sizeof(struct sockaddr_in);\n\n    while(1){\n        memset(buf, 0, sizeof(buf));\n        recv_len = recvfrom(sock, buf, sizeof(buf), 0, (struct sockaddr *)&from, &sockaddr_in_size);\n        printf(\"recv: '%s'(%d) from %s:%d\\n\", buf, recv_len, inet_ntoa(from.sin_addr), ntohs(from.sin_port));\n    }\n\n    // \u63a5\u7d9a\u3092\u5207\u65ad\u3059\u308b\n    closesocket(sock);\n    WSACleanup();\n    return 0;\n}\n\n\n\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\n\ngcc udprcvmc.c libwsock32.a\n\n##minGW \u3092\u4f7f\u3063\u305f\u3001UDP\u306e\u30de\u30eb\u30c1\u30ad\u30e3\u30b9\u30c8\u53d7\u4fe1\u95a2\u6570\nwindows 7 \u306eDOS\u7a93\u3067\u52d5\u4f5c\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\n\n```c:udprcvmc.c\n#include <stdio.h>\n#include <fcntl.h>\n#include <winsock.h>\n#include <string.h>\n\nint main()\n{\n\tint sock, err;\n\tstruct sockaddr_in addr;\n\tstruct ip_mreq mreq;\n\tWSADATA wsaData;\n\tchar buf[2048];\n\n\t// winsock2\u306e\u521d\u671f\u5316\n\tWSAStartup(MAKEWORD(2,0), &wsaData);\n\n\t//socket\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\n\t//\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bfsd\u3092\u53d6\u5f97\u3059\u308b\n\t//SOCK_DGRAM <- UDP, SOCK_STREAM<- TCP\n\tif ((sock = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {\n\t\tperror(\"socket\");\n\t\tprintf(\"error:%d\\n\",WSAGetLastError());\n\t\treturn 1;\n\t}\n\n\t// \u53d7\u4fe1\u5143\u30a2\u30c9\u30ec\u30b9\u3068\u30dd\u30fc\u30c8\u756a\u53f7\u3092\u8a2d\u5b9a\u3059\u308b\n\taddr.sin_family = AF_INET;\n\taddr.sin_port = htons(12345);\t\t//IP\u30a2\u30c9\u30ec\u30b9\u3092\u683c\u7d0d\u3057\u305fin_addr\u69cb\u9020\u4f53\n\taddr.sin_addr.s_addr = INADDR_ANY;\t// \u30dd\u30fc\u30c8\u756a\u53f7(htons)\u3067\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30d0\u30a4\u30c8\u30aa\u30fc\u30c0\u30fc\u306b\u5909\u63db\n\n\t// \u30bd\u30b1\u30c3\u30c8\u306b\u540d\u524d\uff08\u30dd\u30fc\u30c8\u756a\u53f7 & IP\u30a2\u30c9\u30ec\u30b9\uff09\u3092\u4ed8\u3051\u308b\n\tif (bind(sock, (struct sockaddr *)&addr, sizeof(addr)) < 0) {\n\t\tperror(\"bind\");\n\t\tprintf(\"error:%d\\n\",WSAGetLastError());\n\t\tclosesocket(sock);\n\t\treturn -1;\n\t}\n\n\tchar loopch=0;\n \n\t// IP_MULTICAST_LOOP<- \u767a\u4fe1\u30de\u30eb\u30c1\u30ad\u30e3\u30b9\u30c8\u30fb\u30c7\u30fc\u30bf\u30b0\u30e9\u30e0\u306e\u30b3\u30d4\u30fc\u304c\u30de\u30eb\u30c1\u30ad\u30e3\u30b9\u30c8\u30fb\u30b0\u30eb\u30fc\u30d7\n    // \u306e\u30e1\u30f3\u30d0\u30fc\u3067\u3042\u308b\u304b\u304e\u308a\u9001\u4fe1\u3057\u3066\u3044\u308b\u30db\u30b9\u30c8\u306b\u9001\u9054\u3055\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\tif ((err=setsockopt(sock, IPPROTO_IP, IP_MULTICAST_LOOP,\n\t\t(char *)&loopch, sizeof(loopch))) < 0) {\n\t\tperror(\"setsockopt\");\n\t\tprintf(\"error:%d\\n\",WSAGetLastError());\n\t\tclosesocket(sock);\n\t\treturn 1;\n\t\t}\n\n\t// setsockopt\u306f\u3001bind\u4ee5\u964d\u3067\u884c\u3046\u5fc5\u8981\u3042\u308a\n\t// \u53d7\u4fe1\u5143\u30a2\u30c9\u30ec\u30b9\u3068\u30dd\u30fc\u30c8\u756a\u53f7\u3092\u8a2d\u5b9a\u3059\u308b\n\tmemset(&mreq, 0, sizeof(mreq));\n\tmreq.imr_interface.s_addr = INADDR_ANY;\n\tmreq.imr_multiaddr.s_addr = inet_addr(\"127.0.0.1\");\n\tif (setsockopt(sock,\n\t\tIPPROTO_IP,\n\t\tIP_ADD_MEMBERSHIP,\t//\u53d7\u4fe1\n\t\t(char *)&mreq, sizeof(mreq)) != 0) {\n\t\t\tperror(\"setsockopt\");\n\t\t\tprintf(\"error:%d\\n\",WSAGetLastError());\n\t\t\treturn 1;\n \t}\n\n\tint recv_len;\n\tstruct sockaddr_in from;\n\tint sockaddr_in_size = sizeof(struct sockaddr_in);\n\n\twhile(1){\n\t\tmemset(buf, 0, sizeof(buf));\n\t\trecv_len = recvfrom(sock, buf, sizeof(buf), 0, (struct sockaddr *)&from, &sockaddr_in_size);\n\t\tprintf(\"recv: '%s'(%d) from %s:%d\\n\", buf, recv_len, inet_ntoa(from.sin_addr), ntohs(from.sin_port));\n\t}\n\n\t// \u63a5\u7d9a\u3092\u5207\u65ad\u3059\u308b\n\tclosesocket(sock);\n\tWSACleanup();\n\treturn 0;\n}\n\n\n```\n\u30b3\u30f3\u30d1\u30a4\u30eb\n> gcc udprcvmc.c libwsock32.a\n\n"}