{"context": " More than 1 year has passed since last update.Deep Learning\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306b\u5148\u65e5\u958b\u50ac\u3055\u308c\u305fDeep Learning\u30cf\u30c3\u30ab\u30bd\u30f3\u306b\u53c2\u52a0\u3057\u3066\u304d\u307e\u3057\u305f\u3002\npylearn2\u3067\u968e\u5c64\u578b\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3092\u4f7f\u3063\u3066\u5b66\u7fd2\u3055\u305b\u3066\u305f\u306e\u3067\u3059\u304c\u3001\u610f\u5916\u3068\u60c5\u5831\u304c\u5c11\u306a\u3044\u6c17\u304c\u3059\u308b\u306e\u3067\u65b9\u6cd5\u3092\u307e\u3068\u3081\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u5b9f\u9a13\u74b0\u5883\nMac OS X 10.10\npython2.7.9\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306fGitHub\u306b\u516c\u958b\u3057\u3066\u304a\u304d\u307e\u3057\u305f\u3002\npylearn2_AutoEncoder_MLP\n\npylearn2\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\u306f\u3053\u3053\u306b\u306f\u8a18\u8f09\u3057\u306a\u3044\u306e\u3067\u3001\u9069\u5f53\u306b\u30b0\u30b0\u308b\u304b\u3053\u306e\u8fba\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u7537\u306e\u305f\u3081\u306e\u6a5f\u68b0\u5b66\u7fd2\nQiita\u306e\u8a18\u4e8b\n\n\u53c2\u8003\u306b\u3057\u305f\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\npylearn2\u306b\u306f\u30b3\u30e1\u30f3\u30c8\u4ed8\u304d\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30b3\u30fc\u30c9\u304c\u7528\u610f\u3055\u308c\u3066\u3066\u3001\u305d\u308c\u8aad\u3080\u3068\u3060\u3044\u305f\u3044\u4f7f\u3044\u65b9\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e\u4fdd\u5b58\u30d1\u30b9\u306f\u4ee5\u4e0b\u3067\u3059\u3002\n[pylearn2]->[pylearn2]->[scripts]->[tutorial]\n\u4eca\u56de\u306f stacked_autoencoder\u3068\u3044\u3046\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\nstacked_autoencoder\u306e\u8aac\u660e\nstacked_autoencoder\u30d5\u30a9\u30eb\u30c0\u5185\u3092\u78ba\u8a8d\u3059\u308b\u3068\n\n[tests]-> test_dae.py\ndae_l1.yaml\ndae_l2.yaml\ndae_mlp.yaml\n\n\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u3053\u308c\u304c\u4eca\u56de\u4f7f\u3046\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002\nyaml\u30d5\u30a1\u30a4\u30eb\u306fpylearn2\u4f7f\u3046\u306b\u306f\u5fc5\u9808\u3067\u3059\u3002yaml\u30d5\u30a1\u30a4\u30eb\u3068\u304b\u77e5\u3089\u306d\u3063\u3066\u4eba\u306f\u9069\u5f53\u306b\u3053\u306e\u3078\u3093\u306e\u30b5\u30a4\u30c8\u773a\u3081\u3066\u304f\u3060\u3055\u3044\u3002XML\u30d5\u30a1\u30a4\u30eb\u3068\u304bjson\u30d5\u30a1\u30a4\u30eb\u307f\u305f\u3044\u306b\u8a2d\u5b9a\u304c\u63cf\u304b\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3067\u53ef\u8aad\u6027\u304c\u9ad8\u3044\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u3063\u307d\u3044\u3067\u3059\u3002\n\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u306e\u305f\u3081\u306eyaml\u5165\u9580\uff08\u521d\u7d1a\u7de8\uff09\n\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306fAutoEncoder\u3067\u5404\u968e\u5c64\u3092\u30d7\u30ec\u5b66\u7fd2\u3055\u305b\u305f\u591a\u6bb5\u578b\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3092\u5b66\u7fd2\u3055\u305b\u307e\u3059\u3002\nAutoEncoder\u3063\u3066\u4f55\u3059\u304b\u3063\u3066\u4eba\u306f\u3053\u306e\u8fba\u898b\u3066\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nAutoEncoder\u3067\u7279\u5fb4\u62bd\u51fa\ndae_l1.yaml\u3068dae_l2.yaml\u306f\u5404\u5c64\u3092AutoEncoder\u3067\u30d7\u30ec\u5b66\u7fd2\u3059\u308b\u305f\u3081\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002\ndae_mlp.yaml\u306f\u591a\u6bb5\u578b\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3092\u5b66\u7fd2\u3055\u305b\u308b\u305f\u3081\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002\ncd tests\n\n\u3068\u30c6\u30b9\u30c8\u30d5\u30a9\u30eb\u30c0\u306b\u79fb\u52d5\u3057\u3066\u3001\npython test_dae.py\n\n\u3068\u5b9f\u884c\u3059\u308b\u3068\u30011\u5c64\u76ee\u306e\u30d7\u30ec\u5b66\u7fd2\u30012\u5c64\u76ee\u306e\u30d7\u30ec\u5b66\u7fd2\u3001\u6700\u5f8c\u4e2d\u9593\u5c642\u3064\u306e\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u306e\u5b66\u7fd2\u3092\u3057\u3066\u3001\u305d\u306e\u30e2\u30c7\u30eb\u304c\u8a18\u8f09\u3055\u308c\u305fdae_mlp.pkl\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\u3061\u306a\u307f\u306bmlp\u3068\u306fMulti Layer Perceptron\u306e\u7565\u3068\u306e\u3053\u3068\u3002\n\n\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u6e96\u5099\n\u5b66\u7fd2\u306b\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306fMNIST\u3068\u3044\u3046\u624b\u66f8\u304d\u6587\u5b57\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305f\u3060\u3001\u3053\u308c\u3092\u5b9f\u884c\u3057\u3066\u3082\u3042\u307e\u308a\u304a\u3082\u3057\u308d\u304f\u306a\u3044\u306e\u3067\u3001\u81ea\u5206\u3067\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u7528\u610f\u3057\u3066\u307f\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u7528\u610f\u306e\u4ed5\u65b9\u306f\u8272\u3005\u3042\u308b\u3051\u3069\u3001\u4eca\u56de\u306fCSV\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u3067\u7528\u610f\u3057\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u5f62\u5f0f\u3068\u3057\u3066\u306f\n\u30af\u30e9\u30b9, \u7279\u5fb4\u91cf1 \u7279\u5fb4\u91cf2 \u7279\u5fb4\u91cf3 ... \u7279\u5fb4\u91cfN\n\u30af\u30e9\u30b9, \u7279\u5fb4\u91cf1 \u7279\u5fb4\u91cf2 \u7279\u5fb4\u91cf3 ... \u7279\u5fb4\u91cfN\n\u30af\u30e9\u30b9, \u7279\u5fb4\u91cf1 \u7279\u5fb4\u91cf2 \u7279\u5fb4\u91cf3 ... \u7279\u5fb4\u91cfN\n\n\u3068\u3044\u3046\u5f62\u5f0f\u306a\u306e\u3067\u3001\n3\u30af\u30e9\u30b9\u5206\u985e\u3060\u3063\u305f\u3089\u3001\n1, \u7279\u5fb4\u91cf\n0, \u7279\u5fb4\u91cf\n2, \u7279\u5fb4\u91cf\n...\n\n\u307f\u305f\u3044\u306a\u66f8\u304d\u65b9\u3057\u3066\u304a\u3051\u3070OK\u3067\u3059\u3002\n\u4f8b\u3048\u3070\u3001\u4eca\u56de\u306f\u72ac\u732b\u306e\u8b58\u5225\u5668\u3092\u4f5c\u3063\u305f\u306e\u3067\u3001\u72ac\u732b\u753b\u50cf\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u7528\u610f\u3057\u3066\u307f\u307e\u3059\u3002\nGitHub\u4e0a\u306ecreateCSV.py\u3068\u3044\u3046\u30d5\u30a9\u30eb\u30c0\u3092\u6e96\u5099\u3057\u3066\u304f\u3060\u3055\u3044\u3002\ncreateCSV.py\u304c\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\n\n\u72ac\u753b\u50cf\u3092\u914d\u7f6e\u3057\u305f\"dog_train\"\n\u732b\u753b\u50cf\u3092\u914d\u7f6e\u3057\u305f\"cat_train\"\n\u305d\u306e\u4ed6\u753b\u50cf\u3092\u914d\u7f6e\u3057\u305f\"other_train\"\n\n\u3068\u3044\u3046\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u7528\u610f\u3057\u3001\u5404\u753b\u50cf\u3092\u914d\u7f6e\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u4eca\u56de\u72ac\u3001\u732b\u3001\u305d\u306e\u4ed6\u306e\u753b\u50cf\u306f\u3053\u3053\u304b\u3089\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u3002\nImageNetDogs \u72ac\u753b\u50cf\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\ncatDatabase \u732b\u753b\u50cf\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\nHoliday Dataset \u98a8\u666f\u753b\u50cf\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\n\u305d\u3057\u3066\u3001\npython createCSV.py dog_train cat_train other_train train.csv\n\n\u3068\u5b9f\u884c\u3059\u308c\u3070\u3001train.csv\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\u540c\u3058\u3088\u3046\u306b\u30c6\u30b9\u30c8\u7528\u753b\u50cf\u304c\u914d\u7f6e\u3055\u308c\u305f\u30d5\u30a9\u30eb\u30c0\u7528\u610f\u3057\u3066\u3001\npython createCSV.py dog_test cat_test other_test test.csv\n\n\u3068\u5b9f\u884c\u3059\u308c\u3070\u30c6\u30b9\u30c8\u7528CSV\u30d5\u30a1\u30a4\u30eb\u304c\u914d\u7f6e\u3055\u308c\u307e\u3059\u3002\n\u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u306f\u753b\u50cf\u3092\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306b\u3057\u3066\u300164x64\u306b\u7e2e\u5c0f\u3057\u305f\u3082\u306e\u3092[0,1]\u306b\u30d4\u30af\u30bb\u30eb\u5024\u3092\u6b63\u898f\u5316\u3057\u3066\u7279\u5fb4\u91cf\u3068\u3057\u3066\u3044\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u7279\u5fb4\u91cf\u306f4096\u6b21\u5143\u3067\u3059\u3002\n\u3053\u306eCSV\u30d5\u30a1\u30a4\u30eb\u306fpylearn2\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u6642\u306b\u30bb\u30c3\u30c8\u3057\u305fPYLEARN2_DATA_PATH\u30d5\u30a9\u30eb\u30c0\u306b\u9069\u5f53\u306b\u914d\u7f6e\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u631f\u3093\u3067\u3001PYLEARN2_DATA_PATH/dogcat/\u307f\u305f\u3044\u306a\u3068\u3053\u306b\u4fdd\u5b58\u3057\u3066\u3082OK\u3067\u3059\u3002\n\u305d\u306e\u5f8c\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u8aad\u307f\u8fbc\u307f\u7528\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u7528\u610f\u3057\u307e\u3059\u3002\nGitHub\u4e0a\u306edogcat_dataset.py\u3092\u958b\u3044\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\u3053\u308c\u306f\u5148\u307b\u3069\u751f\u6210\u3057\u305fCSV\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u305f\u3081\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u3059\u3002\n\uff081\u5ea6\u8aad\u307f\u8fbc\u3093\u3060\u3089.npy\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3057\u3066\u30012\u56de\u76ee\u306f\u305d\u3063\u3061\u8aad\u307f\u8fbc\u3080\u3088\u3046\u306b\u3057\u3066\u901f\u5ea6\u4e0a\u3052\u3066\u308b\u306e\u3001\n\u3000CSV\u30d5\u30a1\u30a4\u30eb\u3092\u5909\u66f4\u3057\u305f\u3089\u3053\u306enpy\u30d5\u30a1\u30a4\u30eb\u3082\u524a\u9664\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\uff01\uff09\nPYLEARN2_DATA_PATH\u5185\u306b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u751f\u6210\u3057\u3066CSV\u30d5\u30a1\u30a4\u30eb\u3092\u914d\u7f6e\u3057\u305f\u5834\u5408\u306f\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u306ebase_path\u306e\u3068\u3053\u308d\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u540d\u3092\u4fee\u6b63\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\ndogcat_dataset.py\ndef __init__(self, which_set,\n        base_path = '${PYLEARN2_DATA_PATH}/dogcat',\n        start = None,\n        stop = None,\n        preprocessor = None,\n        fit_preprocessor = False,\n        axes = ('b', 0, 1, 'c'),\n        fit_test_preprocessor = False):\n\n\n\u305d\u3057\u3066\u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\n[pylearn2]->[pylearn2]->[datasets]\n\u914d\u4e0b\u306b\u914d\u7f6e\u3057\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\u65b9\u3068\u3057\u3066\u306f\u3001\u3053\u3093\u306a\u611f\u3058\u3067\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\nfrom pylearn2.datasets.dogcat_dataset import DogCatDataset\n\ntrain_dataset = DogCatDataset('train')\ntest_dataset  = DogCatDataset('test')\n\n# \u30af\u30e9\u30b9\u306fy, \u7279\u5fb4\u91cf\u306fX\u306e\u884c\u5217\u306b\u683c\u7d0d\u3055\u308c\u3066\u307e\u3059\u3002\ntarget_class = train_dataset.y\ntarget_feature = train_dataset.X\n\n\n\u8aad\u307f\u8fbc\u3081\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u3001\u4f55\u304b\u304c\u304a\u304b\u3057\u3044\u306e\u3067\u898b\u306a\u304a\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u7528\u610f\u3057\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u5b66\u7fd2\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u7528\u610f\u51fa\u6765\u305f\u306e\u3067\u3001\u5b66\u7fd2\u3057\u3066\u307f\u307e\u3059\u3002\nyaml\u30d5\u30a1\u30a4\u30eb\u5185\u3067\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5b9a\u7fa9\u3092\u3057\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u3001dae_l1.yaml\u306e2~6\u884c\u76ee\u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3002\n\ndae_l1.yaml\ndataset: &train !obj:pylearn2.datasets.mnist.MNIST {\n    which_set: 'train',\n    start: 0,\n    stop: %(train_stop)i\n},\n\n\n\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3092\u3001\u3053\u3093\u306a\u611f\u3058\u3067\u4fee\u6b63\u3057\u307e\u3059\u3002\n\ndae_l1.yaml\ndataset: &train !obj:pylearn2.datasets.dogcat_dataset {\n    which_set: 'train'\n},\n\n\n\u3053\u308c\u3067\u5148\u307b\u3069\u4fee\u6b63\u3057\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u3093\u3067\u5b66\u7fd2\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\u540c\u3058\u3088\u3046\u306b\u3001dae_l2.yaml, dae_mlp.yaml\u3082\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\u3092\u4fee\u6b63\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001dae_l1.yaml\u3068dae_mlp.yaml\u306f\u5165\u529b\u6b21\u5143\u304c4096\u306b\u5909\u66f4\u3055\u308c\u305f\u306e\u3067\u3001nvis\u306e\u5024\u30924096\u306b\u4fee\u6b63\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\ndae_l1.yaml\nmodel: !obj:pylearn2.models.autoencoder.DenoisingAutoencoder {\n    nvis : 4096,\n    nhid : %(nhid)i,\n    irange : 0.05,\n    corruptor: !obj:pylearn2.corruption.BinomialCorruptor {\n        corruption_level: .2,\n    },\n    act_enc: \"tanh\",\n    act_dec: null,    # Linear activation on the decoder side.\n},\n\n\n\ndae_mlp.yaml\nmodel: !obj:pylearn2.models.mlp.MLP {\n    batch_size: %(batch_size)i,\n    layers: [\n             !obj:pylearn2.models.mlp.PretrainedLayer {\n                 layer_name: 'h1',\n                 layer_content: !pkl: \"%(save_path)s/dae_l1.pkl\"\n             },\n             !obj:pylearn2.models.mlp.PretrainedLayer {\n                 layer_name: 'h2',\n                 layer_content: !pkl: \"%(save_path)s/dae_l2.pkl\"\n             },\n             !obj:pylearn2.models.mlp.Softmax {\n                 max_col_norm: 1.9365,\n                 layer_name: 'y',\n                 n_classes: 10,\n                 irange: .005\n             }\n            ],\n    nvis: 4096\n},\n\n\n\u6b21\u306btest_dae.py\u3092\u4fee\u6b63\u3057\u307e\u3059\u3002\u5b66\u7fd2\u56de\u6570(max_epochs)\u304c1\u3068\u6b63\u76f4\u5b66\u7fd2\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001500\u3050\u3089\u3044\u306b\u5897\u3084\u3057\u307e\u3059\u3002\u305d\u306e\u4ed6\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u5909\u308f\u3063\u305f\u3053\u3068\u3067\u4e0d\u8981\u306b\u306a\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3082\u3042\u308b\u306e\u3067\u3001\u8272\u3005\u30d1\u30e9\u30e1\u30fc\u30bf\u4fee\u6b63\u3057\u307e\u3059\u3002\n\ntest_dae.py\ndef train_layer1(yaml_file_path, save_path):\n\n    yaml = open(\"{0}/dae_l1.yaml\".format(yaml_file_path), 'r').read()\n    hyper_params = {'batch_size': 100,\n                    'monitoring_batches': 1,\n                    'nhid': 1000, # 1\u3064\u3081\u306e\u4e2d\u9593\u5c64\u306e\u30ce\u30fc\u30c9\u6570\u306f1000\n                    'max_epochs': 500, # \u30c6\u30b9\u30c8\u56de\u6570\u3092500\u56de\u306b\u3059\u308b\n                    'save_path': save_path}\n    yaml = yaml % (hyper_params)\n    train_yaml(yaml)\n\n\ndef train_layer2(yaml_file_path, save_path):\n\n    yaml = open(\"{0}/dae_l2.yaml\".format(yaml_file_path), 'r').read()\n    hyper_params = {'batch_size': 100,\n                    'monitoring_batches': 1,\n                    'nvis': 1000, # 1\u3064\u3081\u306e\u4e2d\u9593\u5c64\u306e\u30ce\u30fc\u30c9\u6570\u3068\u5408\u308f\u305b\u308b\n                    'nhid': 100,  # 2\u3064\u3081\u306e\u4e2d\u9593\u5c64\u306e\u30ce\u30fc\u30c9\u6570\u306f100\n                    'max_epochs': 500, # \u30c6\u30b9\u30c8\u56de\u6570\u3092500\u56de\u306b\u3059\u308b\n                    'save_path': save_path}\n    yaml = yaml % (hyper_params)\n    train_yaml(yaml)\n\n\ndef train_mlp(yaml_file_path, save_path):\n\n    yaml = open(\"{0}/dae_mlp.yaml\".format(yaml_file_path), 'r').read()\n    hyper_params = {'valid_stop': 12000,\n                    'batch_size': 100,\n                    'max_epochs': 500,\n                    'save_path': save_path}\n    yaml = yaml % (hyper_params)\n    train_yaml(yaml)\n\n\n\u3053\u308c\u3067tests\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u3067\npython test_dae.py\n\n\u3068\u5b9f\u884c\u3059\u308b\u3068\u3001\u5b66\u7fd2\u304c\u59cb\u307e\u308a\u307e\u3059\u3002\n\uff08\u6700\u521d\u30c6\u30b9\u30c8\u3059\u308b\u3068\u304d\u306fmax_epochs\u30921\u306b\u3057\u3066\u3061\u3083\u3093\u3068\u52d5\u304f\u304b\u898b\u305f\u307b\u3046\u304c\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\uff09\n\n\u5b66\u7fd2\u3055\u308c\u305f\u30e2\u30c7\u30eb\u3092\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u9069\u7528\n\u3053\u3093\u306a\u30b3\u30fc\u30c9\u3092\u7528\u610f\u3059\u308c\u3070\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5b66\u7fd2\u3055\u308c\u305f\u30e2\u30c7\u30eb\u3092\u9069\u7528\u3067\u304d\u307e\u3059\u3002\n\ntest_calcurated_model.py\nimport numpy as np\nimport pickle\nimport theano\nfrom pylearn2.datasets.dogcat_dataset import DogCatDataset\n\nif __name__ == \"__main__\":\n\n    model = pickle.load(open('dae_mlp.pkl'))\n    test_data = DogCatDataset(\"test\")\n\n    results = model.fprop(theano.shared(test_data.X)).eval()\n\n    nCorrect = 0\n    for result, label in zip(results, test_data.y):\n        if np.argmax(result) == np.argmax(label):\n            nCorrect += 1\n\n    print '%d / %d' %(nCorrect, len(test_data.X))\n\n\n\n\u7cbe\u5ea6\u304c\u3042\u307e\u308a\u826f\u304f\u306a\u304b\u3063\u305f\u3089\u3001\u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3060\u3063\u305f\u308a\u3001\u5165\u529b\u753b\u50cf\u3060\u3063\u305f\u308a\u3001\u968e\u5c64\u306e\u6570\u3092\u5909\u3048\u3066\u307f\u308b\u3068\u3044\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u968e\u5c64\u306e\u5897\u3084\u3057\u65b9\u306f\u3001\u307e\u305f\u5225\u8a18\u4e8b\u3067\u66f8\u3044\u3066\u307f\u307e\u3059\uff01\n\n\u53c2\u8003\nhttp://qiita.com/icoxfog417/items/65e800c3a2094457c3a0\nhttp://qiita.com/dsanno/items/a1d805a89e192c44730d\n\nDeep Learning\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306b\u5148\u65e5\u958b\u50ac\u3055\u308c\u305fDeep Learning\u30cf\u30c3\u30ab\u30bd\u30f3\u306b\u53c2\u52a0\u3057\u3066\u304d\u307e\u3057\u305f\u3002\npylearn2\u3067\u968e\u5c64\u578b\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3092\u4f7f\u3063\u3066\u5b66\u7fd2\u3055\u305b\u3066\u305f\u306e\u3067\u3059\u304c\u3001\u610f\u5916\u3068\u60c5\u5831\u304c\u5c11\u306a\u3044\u6c17\u304c\u3059\u308b\u306e\u3067\u65b9\u6cd5\u3092\u307e\u3068\u3081\u3066\u304a\u304d\u307e\u3059\u3002\n\n## \u5b9f\u9a13\u74b0\u5883\nMac OS X 10.10\npython2.7.9\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306fGitHub\u306b\u516c\u958b\u3057\u3066\u304a\u304d\u307e\u3057\u305f\u3002\n[pylearn2_AutoEncoder_MLP](https://github.com/RyotaKatoh/pylearn2_AutoEncoder_MLP)\n\n## pylearn2\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\u306f\u3053\u3053\u306b\u306f\u8a18\u8f09\u3057\u306a\u3044\u306e\u3067\u3001\u9069\u5f53\u306b\u30b0\u30b0\u308b\u304b\u3053\u306e\u8fba\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n[\u7537\u306e\u305f\u3081\u306e\u6a5f\u68b0\u5b66\u7fd2](http://kensuke-mi.xyz/kensuke-mi_diary/2014/11/rbma.html)\n[Qiita\u306e\u8a18\u4e8b](http://qiita.com/mizuki0420@github/items/3f9c97b32e8d6e37abad)\n\n## \u53c2\u8003\u306b\u3057\u305f\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\npylearn2\u306b\u306f\u30b3\u30e1\u30f3\u30c8\u4ed8\u304d\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30b3\u30fc\u30c9\u304c\u7528\u610f\u3055\u308c\u3066\u3066\u3001\u305d\u308c\u8aad\u3080\u3068\u3060\u3044\u305f\u3044\u4f7f\u3044\u65b9\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e\u4fdd\u5b58\u30d1\u30b9\u306f\u4ee5\u4e0b\u3067\u3059\u3002\n[pylearn2]->[pylearn2]->[scripts]->[tutorial]\n\u4eca\u56de\u306f **stacked_autoencoder**\u3068\u3044\u3046\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\n## stacked_autoencoder\u306e\u8aac\u660e\n**stacked_autoencoder**\u30d5\u30a9\u30eb\u30c0\u5185\u3092\u78ba\u8a8d\u3059\u308b\u3068\n\n* [tests]-> test_dae.py\n* dae_l1.yaml\n* dae_l2.yaml\n* dae_mlp.yaml\n\n\n\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u3053\u308c\u304c\u4eca\u56de\u4f7f\u3046\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002\nyaml\u30d5\u30a1\u30a4\u30eb\u306fpylearn2\u4f7f\u3046\u306b\u306f\u5fc5\u9808\u3067\u3059\u3002yaml\u30d5\u30a1\u30a4\u30eb\u3068\u304b\u77e5\u3089\u306d\u3063\u3066\u4eba\u306f\u9069\u5f53\u306b\u3053\u306e\u3078\u3093\u306e\u30b5\u30a4\u30c8\u773a\u3081\u3066\u304f\u3060\u3055\u3044\u3002XML\u30d5\u30a1\u30a4\u30eb\u3068\u304bjson\u30d5\u30a1\u30a4\u30eb\u307f\u305f\u3044\u306b\u8a2d\u5b9a\u304c\u63cf\u304b\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3067\u53ef\u8aad\u6027\u304c\u9ad8\u3044\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u3063\u307d\u3044\u3067\u3059\u3002\n[\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u306e\u305f\u3081\u306eyaml\u5165\u9580\uff08\u521d\u7d1a\u7de8\uff09](http://magazine.rubyist.net/?0009-YAML)\n\n\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306fAutoEncoder\u3067\u5404\u968e\u5c64\u3092\u30d7\u30ec\u5b66\u7fd2\u3055\u305b\u305f\u591a\u6bb5\u578b\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3092\u5b66\u7fd2\u3055\u305b\u307e\u3059\u3002\nAutoEncoder\u3063\u3066\u4f55\u3059\u304b\u3063\u3066\u4eba\u306f\u3053\u306e\u8fba\u898b\u3066\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n[AutoEncoder\u3067\u7279\u5fb4\u62bd\u51fa](http://www.slideshare.net/lewuathe/auto-encoder-v2)\n\ndae_l1.yaml\u3068dae_l2.yaml\u306f\u5404\u5c64\u3092AutoEncoder\u3067\u30d7\u30ec\u5b66\u7fd2\u3059\u308b\u305f\u3081\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002\ndae_mlp.yaml\u306f\u591a\u6bb5\u578b\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3092\u5b66\u7fd2\u3055\u305b\u308b\u305f\u3081\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002\n\n```\ncd tests\n```\n\n\u3068\u30c6\u30b9\u30c8\u30d5\u30a9\u30eb\u30c0\u306b\u79fb\u52d5\u3057\u3066\u3001\n\n```\npython test_dae.py\n```\n\n\u3068\u5b9f\u884c\u3059\u308b\u3068\u30011\u5c64\u76ee\u306e\u30d7\u30ec\u5b66\u7fd2\u30012\u5c64\u76ee\u306e\u30d7\u30ec\u5b66\u7fd2\u3001\u6700\u5f8c\u4e2d\u9593\u5c642\u3064\u306e\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u306e\u5b66\u7fd2\u3092\u3057\u3066\u3001\u305d\u306e\u30e2\u30c7\u30eb\u304c\u8a18\u8f09\u3055\u308c\u305fdae_mlp.pkl\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\u3061\u306a\u307f\u306bmlp\u3068\u306fMulti Layer Perceptron\u306e\u7565\u3068\u306e\u3053\u3068\u3002\n\n## \u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u6e96\u5099\n\u5b66\u7fd2\u306b\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306fMNIST\u3068\u3044\u3046\u624b\u66f8\u304d\u6587\u5b57\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305f\u3060\u3001\u3053\u308c\u3092\u5b9f\u884c\u3057\u3066\u3082\u3042\u307e\u308a\u304a\u3082\u3057\u308d\u304f\u306a\u3044\u306e\u3067\u3001\u81ea\u5206\u3067\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u7528\u610f\u3057\u3066\u307f\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u7528\u610f\u306e\u4ed5\u65b9\u306f\u8272\u3005\u3042\u308b\u3051\u3069\u3001\u4eca\u56de\u306fCSV\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u3067\u7528\u610f\u3057\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u5f62\u5f0f\u3068\u3057\u3066\u306f\n\n```\n\u30af\u30e9\u30b9, \u7279\u5fb4\u91cf1 \u7279\u5fb4\u91cf2 \u7279\u5fb4\u91cf3 ... \u7279\u5fb4\u91cfN\n\u30af\u30e9\u30b9, \u7279\u5fb4\u91cf1 \u7279\u5fb4\u91cf2 \u7279\u5fb4\u91cf3 ... \u7279\u5fb4\u91cfN\n\u30af\u30e9\u30b9, \u7279\u5fb4\u91cf1 \u7279\u5fb4\u91cf2 \u7279\u5fb4\u91cf3 ... \u7279\u5fb4\u91cfN\n```\n\n\u3068\u3044\u3046\u5f62\u5f0f\u306a\u306e\u3067\u3001\n\n3\u30af\u30e9\u30b9\u5206\u985e\u3060\u3063\u305f\u3089\u3001\n\n```\n1, \u7279\u5fb4\u91cf\n0, \u7279\u5fb4\u91cf\n2, \u7279\u5fb4\u91cf\n...\n```\n\n\u307f\u305f\u3044\u306a\u66f8\u304d\u65b9\u3057\u3066\u304a\u3051\u3070OK\u3067\u3059\u3002\n\n\u4f8b\u3048\u3070\u3001\u4eca\u56de\u306f\u72ac\u732b\u306e\u8b58\u5225\u5668\u3092\u4f5c\u3063\u305f\u306e\u3067\u3001\u72ac\u732b\u753b\u50cf\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u7528\u610f\u3057\u3066\u307f\u307e\u3059\u3002\nGitHub\u4e0a\u306ecreateCSV.py\u3068\u3044\u3046\u30d5\u30a9\u30eb\u30c0\u3092\u6e96\u5099\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\ncreateCSV.py\u304c\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\n\n* \u72ac\u753b\u50cf\u3092\u914d\u7f6e\u3057\u305f\"dog_train\"\n* \u732b\u753b\u50cf\u3092\u914d\u7f6e\u3057\u305f\"cat_train\"\n* \u305d\u306e\u4ed6\u753b\u50cf\u3092\u914d\u7f6e\u3057\u305f\"other_train\"\n\n\u3068\u3044\u3046\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u7528\u610f\u3057\u3001\u5404\u753b\u50cf\u3092\u914d\u7f6e\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u4eca\u56de\u72ac\u3001\u732b\u3001\u305d\u306e\u4ed6\u306e\u753b\u50cf\u306f\u3053\u3053\u304b\u3089\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u3002\n[ImageNetDogs](http://vision.stanford.edu/aditya86/ImageNetDogs/) \u72ac\u753b\u50cf\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\n[catDatabase](http://137.189.35.203/WebUI/CatDatabase/catData.html) \u732b\u753b\u50cf\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\n[Holiday Dataset](http://lear.inrialpes.fr/~jegou/data.php) \u98a8\u666f\u753b\u50cf\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\n\n\u305d\u3057\u3066\u3001\n\n\n```\npython createCSV.py dog_train cat_train other_train train.csv\n```\n\n\u3068\u5b9f\u884c\u3059\u308c\u3070\u3001train.csv\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\n\u540c\u3058\u3088\u3046\u306b\u30c6\u30b9\u30c8\u7528\u753b\u50cf\u304c\u914d\u7f6e\u3055\u308c\u305f\u30d5\u30a9\u30eb\u30c0\u7528\u610f\u3057\u3066\u3001\n\n```\npython createCSV.py dog_test cat_test other_test test.csv\n```\n\n\u3068\u5b9f\u884c\u3059\u308c\u3070\u30c6\u30b9\u30c8\u7528CSV\u30d5\u30a1\u30a4\u30eb\u304c\u914d\u7f6e\u3055\u308c\u307e\u3059\u3002\n\u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u306f\u753b\u50cf\u3092\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306b\u3057\u3066\u300164x64\u306b\u7e2e\u5c0f\u3057\u305f\u3082\u306e\u3092[0,1]\u306b\u30d4\u30af\u30bb\u30eb\u5024\u3092\u6b63\u898f\u5316\u3057\u3066\u7279\u5fb4\u91cf\u3068\u3057\u3066\u3044\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u7279\u5fb4\u91cf\u306f4096\u6b21\u5143\u3067\u3059\u3002\n\n\n\u3053\u306eCSV\u30d5\u30a1\u30a4\u30eb\u306fpylearn2\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u6642\u306b\u30bb\u30c3\u30c8\u3057\u305fPYLEARN2_DATA_PATH\u30d5\u30a9\u30eb\u30c0\u306b\u9069\u5f53\u306b\u914d\u7f6e\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u631f\u3093\u3067\u3001PYLEARN2_DATA_PATH/dogcat/\u307f\u305f\u3044\u306a\u3068\u3053\u306b\u4fdd\u5b58\u3057\u3066\u3082OK\u3067\u3059\u3002\n\n\u305d\u306e\u5f8c\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u8aad\u307f\u8fbc\u307f\u7528\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u7528\u610f\u3057\u307e\u3059\u3002\nGitHub\u4e0a\u306edogcat_dataset.py\u3092\u958b\u3044\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\u3053\u308c\u306f\u5148\u307b\u3069\u751f\u6210\u3057\u305fCSV\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u305f\u3081\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u3059\u3002\n**\uff081\u5ea6\u8aad\u307f\u8fbc\u3093\u3060\u3089.npy\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3057\u3066\u30012\u56de\u76ee\u306f\u305d\u3063\u3061\u8aad\u307f\u8fbc\u3080\u3088\u3046\u306b\u3057\u3066\u901f\u5ea6\u4e0a\u3052\u3066\u308b\u306e\u3001\n\u3000CSV\u30d5\u30a1\u30a4\u30eb\u3092\u5909\u66f4\u3057\u305f\u3089\u3053\u306enpy\u30d5\u30a1\u30a4\u30eb\u3082\u524a\u9664\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\uff01\uff09**\n\nPYLEARN2_DATA_PATH\u5185\u306b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u751f\u6210\u3057\u3066CSV\u30d5\u30a1\u30a4\u30eb\u3092\u914d\u7f6e\u3057\u305f\u5834\u5408\u306f\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u306ebase_path\u306e\u3068\u3053\u308d\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u540d\u3092\u4fee\u6b63\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```python:dogcat_dataset.py\ndef __init__(self, which_set,\n        base_path = '${PYLEARN2_DATA_PATH}/dogcat',\n        start = None,\n        stop = None,\n        preprocessor = None,\n        fit_preprocessor = False,\n        axes = ('b', 0, 1, 'c'),\n        fit_test_preprocessor = False):\n```\n\n\u305d\u3057\u3066\u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\n[pylearn2]->[pylearn2]->[datasets]\n\u914d\u4e0b\u306b\u914d\u7f6e\u3057\u307e\u3059\u3002\n\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\u65b9\u3068\u3057\u3066\u306f\u3001\u3053\u3093\u306a\u611f\u3058\u3067\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\n```python\nfrom pylearn2.datasets.dogcat_dataset import DogCatDataset\n\ntrain_dataset = DogCatDataset('train')\ntest_dataset  = DogCatDataset('test')\n\n# \u30af\u30e9\u30b9\u306fy, \u7279\u5fb4\u91cf\u306fX\u306e\u884c\u5217\u306b\u683c\u7d0d\u3055\u308c\u3066\u307e\u3059\u3002\ntarget_class = train_dataset.y\ntarget_feature = train_dataset.X\n\n```\n\n\u8aad\u307f\u8fbc\u3081\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u3001\u4f55\u304b\u304c\u304a\u304b\u3057\u3044\u306e\u3067\u898b\u306a\u304a\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n## \u7528\u610f\u3057\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u5b66\u7fd2\n\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u7528\u610f\u51fa\u6765\u305f\u306e\u3067\u3001\u5b66\u7fd2\u3057\u3066\u307f\u307e\u3059\u3002\nyaml\u30d5\u30a1\u30a4\u30eb\u5185\u3067\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5b9a\u7fa9\u3092\u3057\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u3001dae_l1.yaml\u306e2~6\u884c\u76ee\u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3002\n\n```python:dae_l1.yaml\ndataset: &train !obj:pylearn2.datasets.mnist.MNIST {\n    which_set: 'train',\n    start: 0,\n    stop: %(train_stop)i\n},\n```\n\n\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3092\u3001\u3053\u3093\u306a\u611f\u3058\u3067\u4fee\u6b63\u3057\u307e\u3059\u3002\n\n```python:dae_l1.yaml\ndataset: &train !obj:pylearn2.datasets.dogcat_dataset {\n    which_set: 'train'\n},\n```\n\n\u3053\u308c\u3067\u5148\u307b\u3069\u4fee\u6b63\u3057\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u3093\u3067\u5b66\u7fd2\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\u540c\u3058\u3088\u3046\u306b\u3001dae_l2.yaml, dae_mlp.yaml\u3082\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\u3092\u4fee\u6b63\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001dae_l1.yaml\u3068dae_mlp.yaml\u306f\u5165\u529b\u6b21\u5143\u304c4096\u306b\u5909\u66f4\u3055\u308c\u305f\u306e\u3067\u3001nvis\u306e\u5024\u30924096\u306b\u4fee\u6b63\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n```python:dae_l1.yaml\nmodel: !obj:pylearn2.models.autoencoder.DenoisingAutoencoder {\n    nvis : 4096,\n    nhid : %(nhid)i,\n    irange : 0.05,\n    corruptor: !obj:pylearn2.corruption.BinomialCorruptor {\n        corruption_level: .2,\n    },\n    act_enc: \"tanh\",\n    act_dec: null,    # Linear activation on the decoder side.\n},\n```\n\n```python:dae_mlp.yaml\nmodel: !obj:pylearn2.models.mlp.MLP {\n    batch_size: %(batch_size)i,\n    layers: [\n             !obj:pylearn2.models.mlp.PretrainedLayer {\n                 layer_name: 'h1',\n                 layer_content: !pkl: \"%(save_path)s/dae_l1.pkl\"\n             },\n             !obj:pylearn2.models.mlp.PretrainedLayer {\n                 layer_name: 'h2',\n                 layer_content: !pkl: \"%(save_path)s/dae_l2.pkl\"\n             },\n             !obj:pylearn2.models.mlp.Softmax {\n                 max_col_norm: 1.9365,\n                 layer_name: 'y',\n                 n_classes: 10,\n                 irange: .005\n             }\n            ],\n    nvis: 4096\n},\n```\n\n\u6b21\u306btest_dae.py\u3092\u4fee\u6b63\u3057\u307e\u3059\u3002\u5b66\u7fd2\u56de\u6570(max_epochs)\u304c1\u3068\u6b63\u76f4\u5b66\u7fd2\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001500\u3050\u3089\u3044\u306b\u5897\u3084\u3057\u307e\u3059\u3002\u305d\u306e\u4ed6\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u5909\u308f\u3063\u305f\u3053\u3068\u3067\u4e0d\u8981\u306b\u306a\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3082\u3042\u308b\u306e\u3067\u3001\u8272\u3005\u30d1\u30e9\u30e1\u30fc\u30bf\u4fee\u6b63\u3057\u307e\u3059\u3002\n\n```python:test_dae.py\ndef train_layer1(yaml_file_path, save_path):\n\n    yaml = open(\"{0}/dae_l1.yaml\".format(yaml_file_path), 'r').read()\n    hyper_params = {'batch_size': 100,\n                    'monitoring_batches': 1,\n                    'nhid': 1000, # 1\u3064\u3081\u306e\u4e2d\u9593\u5c64\u306e\u30ce\u30fc\u30c9\u6570\u306f1000\n                    'max_epochs': 500, # \u30c6\u30b9\u30c8\u56de\u6570\u3092500\u56de\u306b\u3059\u308b\n                    'save_path': save_path}\n    yaml = yaml % (hyper_params)\n    train_yaml(yaml)\n\n\ndef train_layer2(yaml_file_path, save_path):\n\n    yaml = open(\"{0}/dae_l2.yaml\".format(yaml_file_path), 'r').read()\n    hyper_params = {'batch_size': 100,\n                    'monitoring_batches': 1,\n                    'nvis': 1000, # 1\u3064\u3081\u306e\u4e2d\u9593\u5c64\u306e\u30ce\u30fc\u30c9\u6570\u3068\u5408\u308f\u305b\u308b\n                    'nhid': 100,  # 2\u3064\u3081\u306e\u4e2d\u9593\u5c64\u306e\u30ce\u30fc\u30c9\u6570\u306f100\n                    'max_epochs': 500, # \u30c6\u30b9\u30c8\u56de\u6570\u3092500\u56de\u306b\u3059\u308b\n                    'save_path': save_path}\n    yaml = yaml % (hyper_params)\n    train_yaml(yaml)\n\n\ndef train_mlp(yaml_file_path, save_path):\n\n    yaml = open(\"{0}/dae_mlp.yaml\".format(yaml_file_path), 'r').read()\n    hyper_params = {'valid_stop': 12000,\n                    'batch_size': 100,\n                    'max_epochs': 500,\n                    'save_path': save_path}\n    yaml = yaml % (hyper_params)\n    train_yaml(yaml)\n```\n    \n\u3053\u308c\u3067tests\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u3067\n\n```\npython test_dae.py\n```\n\n\u3068\u5b9f\u884c\u3059\u308b\u3068\u3001\u5b66\u7fd2\u304c\u59cb\u307e\u308a\u307e\u3059\u3002\n\uff08\u6700\u521d\u30c6\u30b9\u30c8\u3059\u308b\u3068\u304d\u306fmax_epochs\u30921\u306b\u3057\u3066\u3061\u3083\u3093\u3068\u52d5\u304f\u304b\u898b\u305f\u307b\u3046\u304c\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\uff09\n\n## \u5b66\u7fd2\u3055\u308c\u305f\u30e2\u30c7\u30eb\u3092\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u9069\u7528\n\n\u3053\u3093\u306a\u30b3\u30fc\u30c9\u3092\u7528\u610f\u3059\u308c\u3070\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5b66\u7fd2\u3055\u308c\u305f\u30e2\u30c7\u30eb\u3092\u9069\u7528\u3067\u304d\u307e\u3059\u3002\n\n```python:test_calcurated_model.py\nimport numpy as np\nimport pickle\nimport theano\nfrom pylearn2.datasets.dogcat_dataset import DogCatDataset\n\nif __name__ == \"__main__\":\n\n    model = pickle.load(open('dae_mlp.pkl'))\n    test_data = DogCatDataset(\"test\")\n    \n    results = model.fprop(theano.shared(test_data.X)).eval()\n    \n    nCorrect = 0\n    for result, label in zip(results, test_data.y):\n        if np.argmax(result) == np.argmax(label):\n            nCorrect += 1\n    \n    print '%d / %d' %(nCorrect, len(test_data.X))\n\n```\n \n\u7cbe\u5ea6\u304c\u3042\u307e\u308a\u826f\u304f\u306a\u304b\u3063\u305f\u3089\u3001\u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3060\u3063\u305f\u308a\u3001\u5165\u529b\u753b\u50cf\u3060\u3063\u305f\u308a\u3001\u968e\u5c64\u306e\u6570\u3092\u5909\u3048\u3066\u307f\u308b\u3068\u3044\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u968e\u5c64\u306e\u5897\u3084\u3057\u65b9\u306f\u3001\u307e\u305f\u5225\u8a18\u4e8b\u3067\u66f8\u3044\u3066\u307f\u307e\u3059\uff01\n\n## \u53c2\u8003\n\n[http://qiita.com/icoxfog417/items/65e800c3a2094457c3a0](http://qiita.com/icoxfog417/items/65e800c3a2094457c3a0)\n[http://qiita.com/dsanno/items/a1d805a89e192c44730d](http://qiita.com/dsanno/items/a1d805a89e192c44730d)\n\n          \n", "tags": ["Pylearn2", "\u753b\u50cf\u51e6\u7406", "DeepLearning"]}