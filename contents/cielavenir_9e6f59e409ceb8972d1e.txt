{"context": "\u6a19\u6e96\u5165\u51fa\u529b\u3092\u4f7f\u3046\u30c4\u30fc\u30eb\u3067\u3001\u5165\u529b\u3068\u51fa\u529b\u3092\u540c\u3058\u30d5\u30a1\u30a4\u30eb\u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3057\u305f\u3044\u5834\u5408\u3001\u3057\u3070\u3057\u3070\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u3053\u308c\u3092\u884c\u3046\u3068\u3001\u30d5\u30a1\u30a4\u30eb\u306f\u7834\u58ca\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059(\u6700\u8fd1\u306f\u5165\u529b\u3068\u51fa\u529b\u304c\u540c\u3058\u30d5\u30a1\u30a4\u30eb\u306e\u5834\u5408\u8b66\u544a\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u306d)\u3002\n\u4e00\u65b9\u3067\u3001sed -i\u306e\u3088\u3046\u306b\u3001\u66f8\u304d\u63db\u3048\u30e2\u30fc\u30c9\u304c\u5b58\u5728\u3059\u308b\u30c4\u30fc\u30eb\u3082\u3042\u308a\u307e\u3059\u3002\n\u3053\u306e\u66f8\u304d\u63db\u3048\u30e2\u30fc\u30c9\u3092\u6c4e\u7528\u7684\u306b\u4f5c\u308c\u306a\u3044\u304b\uff1f\n\u30cd\u30c3\u30c8\u3092\u691c\u7d22\u3057\u307e\u3057\u305f\u304c\u898b\u3064\u3051\u3089\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u30d9\u30bf\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u30d5\u30a1\u30a4\u30eb\u3092\u5168\u90e8\u8aad\u307f\u8fbc\u3080\u3053\u3068\u3067\u5b9f\u73fe\u3057\u3066\u307f\u307e\u3057\u305f(\u73fe\u72b6Linux\u3084BSD\u7cfb\u3067\u3057\u304b\u4f7f\u3048\u307e\u305b\u3093\u304c\u2026)\u3002\n\u4e00\u5fdc\u3001\u7570\u5e38\u7d42\u4e86\u3084\u4e2d\u6b62\u3057\u305f\u6642\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u5fa9\u5143\u3059\u308b\u6a5f\u80fd\u3082\u4ed8\u3051\u3066\u3042\u308a\u307e\u3059(\u304c\u3001Usage\u3092\u8868\u793a\u3057\u3066\u6b63\u5e38\u7d42\u4e86\u3059\u308b\u30c4\u30fc\u30eb\u306b\u306f\u7121\u529b\u306a\u306e\u3067\u3054\u6ce8\u610f\u3092)\u3002\n\n\u5de8\u5927\u306a\u30d5\u30a1\u30a4\u30eb\u306b\u306f\u4f7f\u3063\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002\n\u5bfe\u8c61\u30c4\u30fc\u30eb\u306e\u4f7f\u3044\u65b9\u3092\u719f\u77e5\u3057\u305f\u4e0a\u3067\u4f7f\u308f\u306a\u3044\u3068\u30d5\u30a1\u30a4\u30eb\u7834\u640d\u306e\u30ea\u30b9\u30af\u304c\u78ba\u5b9f\u306b\u4e0a\u304c\u308a\u307e\u3059\u3002\n\n\n\u4f7f\u7528\u4f8b\n$ cat 000\nabc\nde\nghikl\ncme\nbde\n$ stdreplace 000 sed -e 's/b//' # this has the same meaning as `sed -i -e 's/b//'`\n$ cat 000\nac\nde\nghikl\ncme\nde\n\n\n\u30b3\u30fc\u30c9\n\n\nhttps://github.com/cielavenir/7razf/blob/master/compat.h \u3092\u304a\u4f7f\u3044\u4e0b\u3055\u3044\n\n\nstdreplace.c\n#include \"../compat.h\"\n\n#ifdef STANDALONE\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/stat.h>\nunsigned char buf[BUFLEN];\n\n#if defined(_WIN32) || (!defined(__GNUC__) && !defined(__clang__))\n#else\n//constant phrase\nlong long filelengthi64(int fd){\n    struct stat st;\n    fstat(fd,&st);\n    return st.st_size;\n}\nint filelength(int fd){return filelengthi64(fd);}\n#endif\n#else\n#include \"../cielbox.h\"\n#endif\n\n#if defined(_WIN32) || (!defined(__GNUC__) && !defined(__clang__)) || defined(FEOS)\n#ifdef STANDALONE\nint main(const int argc, const char **argv){\n    initstdio();\n#else\nint stdreplace(const int argc, const char **argv){\n#endif\n    fprintf(stderr,\"Sorry: currently stdreplace is supported only on POSIX.\\n\");\n    return -1;\n}\n#else\n\n#include <signal.h>\nstatic int g_pid;\nstatic void sighan(int sig){\n    kill(g_pid,sig);\n}\n\nstatic int run(const char* file, int pid, FILE *fin, FILE *fout){\n    int threshold=2048; //must be FIFO size or less.\n\n    setbuf(fin,0);\n    setbuf(fout,0);\n    FILE *f=fopen(file,\"r+b\");\n    if(!f){\n        fprintf(stderr,\"Failed to open %s\\n\",file);\n        return 1;\n    }\n    long long flen=filelengthi64(fileno(f)),off=0;\n    unsigned char *ibuf=malloc(flen);\n    if(!ibuf){\n        fprintf(stderr,\"Failed to allocate buffer\\n\");\n        fclose(f);\n        return 1;\n    }\n    fread(ibuf,1,flen,f);\n\n    g_pid=pid;\n    signal(SIGINT,sighan);\n    signal(SIGTERM,sighan);\n    signal(SIGHUP,sighan); // POSIX\n\n    rewind(f);\n    ftruncate(fileno(f),0);\n    for(;off+=fwrite(ibuf+off,1,threshold<flen-off?threshold:flen-off,fout);){\n        if(off==flen){fclose(fout);break;}\n        int len=fread(buf,1,threshold,fin);\n        if(len<0)break;\n        fwrite(buf,1,len,f);\n    }\n    for(;;){\n        int len=fread(buf,1,threshold,fin);\n        if(len<0)break;\n        fwrite(buf,1,len,f);\n        if(feof(fin))break;\n    }\n    fclose(fin);\n    int st;\n    waitpid(pid,&st,WUNTRACED);\n    if(!WIFEXITED(st)||WEXITSTATUS(st)!=0){\n        fprintf(stderr,\"Execution failed (%d). Recovering backup... \",!WIFEXITED(st)?255:WEXITSTATUS(st));\n        rewind(f);\n        ftruncate(fileno(f),0);\n        fwrite(ibuf,1,flen,f);\n        fprintf(stderr,\"Done.\\n\");\n    }\n    free(ibuf);\n    fclose(f);\n    return 0;\n}\n\n#ifdef STANDALONE\nint main(const int argc, const char **argv){\n    initstdio();\n#else\nint stdreplace(const int argc, const char **argv){\n#endif\n    if(argc<3){\n        fprintf(stderr,\"stdreplace file program/interpreter...\\n\");\n        return 0;\n    }\n    const char *cmd=argv[2];\n\n    //Initialize\n    int fd_in[2],fd_out[2];\n    pipe(fd_in);\n    pipe(fd_out);\n    fcntl(fd_out[0],F_SETFL,O_NONBLOCK);\n    fcntl(fd_in[1],F_SETFL,O_NONBLOCK);\n\n    int pid=fork();\n    if(pid==-1){\n        fprintf(stderr,\"Fork error\\n\");\n        return 1;\n    }\n    if(pid==0){//child\n        close(0);\n        dup2(fd_in[0],0);\n        close(1);\n        dup2(fd_out[1],1);\n        close(fd_in[0]);\n        close(fd_in[1]);\n        close(fd_out[0]);\n        close(fd_out[1]);\n        char **args=(char**)malloc(sizeof(char*)*(argc-1));\n        for(int i=2;i<argc;i++)args[i-2]=argv[i];\n        args[argc-2]=NULL;\n        execvp(cmd,args); //execvp is required; cmd might be interpreter name\n        free(args);\n        return 0;\n    }\n    //parent\n    close(fd_in[0]);\n    close(fd_out[1]);\n    FILE *fin=fdopen(fd_out[0],\"r\");\n    FILE *fout=fdopen(fd_in[1],\"w\");\n    run(argv[1],pid,fin,fout);\n}\n#endif\n\n\n\n\u7d42\u308f\u308a\u306b\n\nnon-blocking IO\u306f\u521d\u3081\u3066\u4f7f\u3063\u305f\u306e\u3067\u4f7f\u3044\u65b9\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3088\u308d\u3057\u3051\u308c\u3070\u3054\u6307\u6458\u4e0b\u3055\u3044\u3002\n\n\n\u6a19\u6e96\u5165\u51fa\u529b\u3092\u4f7f\u3046\u30c4\u30fc\u30eb\u3067\u3001\u5165\u529b\u3068\u51fa\u529b\u3092\u540c\u3058\u30d5\u30a1\u30a4\u30eb\u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3057\u305f\u3044\u5834\u5408\u3001\u3057\u3070\u3057\u3070\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u3053\u308c\u3092\u884c\u3046\u3068\u3001\u30d5\u30a1\u30a4\u30eb\u306f\u7834\u58ca\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059(\u6700\u8fd1\u306f\u5165\u529b\u3068\u51fa\u529b\u304c\u540c\u3058\u30d5\u30a1\u30a4\u30eb\u306e\u5834\u5408\u8b66\u544a\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u306d)\u3002\n\u4e00\u65b9\u3067\u3001`sed -i`\u306e\u3088\u3046\u306b\u3001\u66f8\u304d\u63db\u3048\u30e2\u30fc\u30c9\u304c\u5b58\u5728\u3059\u308b\u30c4\u30fc\u30eb\u3082\u3042\u308a\u307e\u3059\u3002\n\u3053\u306e\u66f8\u304d\u63db\u3048\u30e2\u30fc\u30c9\u3092\u6c4e\u7528\u7684\u306b\u4f5c\u308c\u306a\u3044\u304b\uff1f\n\u30cd\u30c3\u30c8\u3092\u691c\u7d22\u3057\u307e\u3057\u305f\u304c\u898b\u3064\u3051\u3089\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u30d9\u30bf\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u30d5\u30a1\u30a4\u30eb\u3092\u5168\u90e8\u8aad\u307f\u8fbc\u3080\u3053\u3068\u3067\u5b9f\u73fe\u3057\u3066\u307f\u307e\u3057\u305f(\u73fe\u72b6Linux\u3084BSD\u7cfb\u3067\u3057\u304b\u4f7f\u3048\u307e\u305b\u3093\u304c\u2026)\u3002\n\n\u4e00\u5fdc\u3001\u7570\u5e38\u7d42\u4e86\u3084\u4e2d\u6b62\u3057\u305f\u6642\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u5fa9\u5143\u3059\u308b\u6a5f\u80fd\u3082\u4ed8\u3051\u3066\u3042\u308a\u307e\u3059(\u304c\u3001Usage\u3092\u8868\u793a\u3057\u3066\u6b63\u5e38\u7d42\u4e86\u3059\u308b\u30c4\u30fc\u30eb\u306b\u306f\u7121\u529b\u306a\u306e\u3067\u3054\u6ce8\u610f\u3092)\u3002\n\n- \u5de8\u5927\u306a\u30d5\u30a1\u30a4\u30eb\u306b\u306f\u4f7f\u3063\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002\n- \u5bfe\u8c61\u30c4\u30fc\u30eb\u306e\u4f7f\u3044\u65b9\u3092\u719f\u77e5\u3057\u305f\u4e0a\u3067\u4f7f\u308f\u306a\u3044\u3068\u30d5\u30a1\u30a4\u30eb\u7834\u640d\u306e\u30ea\u30b9\u30af\u304c\u78ba\u5b9f\u306b\u4e0a\u304c\u308a\u307e\u3059\u3002\n\n## \u4f7f\u7528\u4f8b\n\n```sh\n$ cat 000\nabc\nde\nghikl\ncme\nbde\n$ stdreplace 000 sed -e 's/b//' # this has the same meaning as `sed -i -e 's/b//'`\n$ cat 000\nac\nde\nghikl\ncme\nde\n```\n\n## \u30b3\u30fc\u30c9\n\n- https://github.com/cielavenir/7razf/blob/master/compat.h \u3092\u304a\u4f7f\u3044\u4e0b\u3055\u3044\n\n```c:stdreplace.c\n#include \"../compat.h\"\n\n#ifdef STANDALONE\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/stat.h>\nunsigned char buf[BUFLEN];\n\n#if defined(_WIN32) || (!defined(__GNUC__) && !defined(__clang__))\n#else\n//constant phrase\nlong long filelengthi64(int fd){\n\tstruct stat st;\n\tfstat(fd,&st);\n\treturn st.st_size;\n}\nint filelength(int fd){return filelengthi64(fd);}\n#endif\n#else\n#include \"../cielbox.h\"\n#endif\n\n#if defined(_WIN32) || (!defined(__GNUC__) && !defined(__clang__)) || defined(FEOS)\n#ifdef STANDALONE\nint main(const int argc, const char **argv){\n\tinitstdio();\n#else\nint stdreplace(const int argc, const char **argv){\n#endif\n\tfprintf(stderr,\"Sorry: currently stdreplace is supported only on POSIX.\\n\");\n\treturn -1;\n}\n#else\n\n#include <signal.h>\nstatic int g_pid;\nstatic void sighan(int sig){\n\tkill(g_pid,sig);\n}\n\nstatic int run(const char* file, int pid, FILE *fin, FILE *fout){\n\tint threshold=2048; //must be FIFO size or less.\n\n\tsetbuf(fin,0);\n\tsetbuf(fout,0);\n\tFILE *f=fopen(file,\"r+b\");\n\tif(!f){\n\t\tfprintf(stderr,\"Failed to open %s\\n\",file);\n\t\treturn 1;\n\t}\n\tlong long flen=filelengthi64(fileno(f)),off=0;\n\tunsigned char *ibuf=malloc(flen);\n\tif(!ibuf){\n\t\tfprintf(stderr,\"Failed to allocate buffer\\n\");\n\t\tfclose(f);\n\t\treturn 1;\n\t}\n\tfread(ibuf,1,flen,f);\n\n\tg_pid=pid;\n\tsignal(SIGINT,sighan);\n\tsignal(SIGTERM,sighan);\n\tsignal(SIGHUP,sighan); // POSIX\n\n\trewind(f);\n\tftruncate(fileno(f),0);\n\tfor(;off+=fwrite(ibuf+off,1,threshold<flen-off?threshold:flen-off,fout);){\n\t\tif(off==flen){fclose(fout);break;}\n\t\tint len=fread(buf,1,threshold,fin);\n\t\tif(len<0)break;\n\t\tfwrite(buf,1,len,f);\n\t}\n\tfor(;;){\n\t\tint len=fread(buf,1,threshold,fin);\n\t\tif(len<0)break;\n\t\tfwrite(buf,1,len,f);\n\t\tif(feof(fin))break;\n\t}\n\tfclose(fin);\n\tint st;\n\twaitpid(pid,&st,WUNTRACED);\n\tif(!WIFEXITED(st)||WEXITSTATUS(st)!=0){\n\t\tfprintf(stderr,\"Execution failed (%d). Recovering backup... \",!WIFEXITED(st)?255:WEXITSTATUS(st));\n\t\trewind(f);\n\t\tftruncate(fileno(f),0);\n\t\tfwrite(ibuf,1,flen,f);\n\t\tfprintf(stderr,\"Done.\\n\");\n\t}\n\tfree(ibuf);\n\tfclose(f);\n\treturn 0;\n}\n\n#ifdef STANDALONE\nint main(const int argc, const char **argv){\n\tinitstdio();\n#else\nint stdreplace(const int argc, const char **argv){\n#endif\n\tif(argc<3){\n\t\tfprintf(stderr,\"stdreplace file program/interpreter...\\n\");\n\t\treturn 0;\n\t}\n\tconst char *cmd=argv[2];\n\n\t//Initialize\n\tint fd_in[2],fd_out[2];\n\tpipe(fd_in);\n\tpipe(fd_out);\n\tfcntl(fd_out[0],F_SETFL,O_NONBLOCK);\n\tfcntl(fd_in[1],F_SETFL,O_NONBLOCK);\n\n\tint pid=fork();\n\tif(pid==-1){\n\t\tfprintf(stderr,\"Fork error\\n\");\n\t\treturn 1;\n\t}\n\tif(pid==0){//child\n\t\tclose(0);\n\t\tdup2(fd_in[0],0);\n\t\tclose(1);\n\t\tdup2(fd_out[1],1);\n\t\tclose(fd_in[0]);\n\t\tclose(fd_in[1]);\n\t\tclose(fd_out[0]);\n\t\tclose(fd_out[1]);\n\t\tchar **args=(char**)malloc(sizeof(char*)*(argc-1));\n\t\tfor(int i=2;i<argc;i++)args[i-2]=argv[i];\n\t\targs[argc-2]=NULL;\n\t\texecvp(cmd,args); //execvp is required; cmd might be interpreter name\n\t\tfree(args);\n\t\treturn 0;\n\t}\n\t//parent\n\tclose(fd_in[0]);\n\tclose(fd_out[1]);\n\tFILE *fin=fdopen(fd_out[0],\"r\");\n\tFILE *fout=fdopen(fd_in[1],\"w\");\n\trun(argv[1],pid,fin,fout);\n}\n#endif\n```\n\n## \u7d42\u308f\u308a\u306b\n\n- non-blocking IO\u306f\u521d\u3081\u3066\u4f7f\u3063\u305f\u306e\u3067\u4f7f\u3044\u65b9\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3088\u308d\u3057\u3051\u308c\u3070\u3054\u6307\u6458\u4e0b\u3055\u3044\u3002\n", "tags": ["C\u8a00\u8a9e", "UNIX"]}