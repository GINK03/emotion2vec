{"context": " More than 1 year has passed since last update.\u3053\u306e\u6295\u7a3f\u306f\u73fe\u5b9f\u9003\u907f\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc2013\u306e4\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n2\u65e5\u76ee\u306e\u8a18\u4e8b\u3067Bing API\u3092\u4f7f\u3063\u3066\u30d5\u30a7\u30c3\u30c1\u3057\u305fhtml\u3092\u4f7f\u3046\u306e\u3067\u30012\u65e5\u76ee\u3092\u5148\u306b\u8aad\u3093\u3067\u304a\u304f\u3068\u7406\u89e3\u3057\u3084\u3059\u3044\u3067\u3059\u3002\n\n\u672c\u7a3f\u30923\u884c\u3067\u307e\u3068\u3081\u308b\n\n\nscikit-learn\u3068\u3044\u3046Python\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8abf\u3079\u305f\n\n2\u65e5\u76ee\u3067\u4fdd\u5b58\u3057\u305fhtml\u5185\u306e\u8a9e\u306etf-idf\u3092\u8a08\u7b97\u3057\u305f\n\u8a9e\u3068tfidf\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u78ba\u8a8d\u3057\u305f\n\n\n\u53c2\u8003\nscikit-learn\u516c\u5f0f\u3001\u30c6\u30ad\u30b9\u30c8\u306e\u7d20\u6027\u62bd\u51fa\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\nscikit-learn\u3092\u4f7f\u3063\u3066Tweet\u4e2d\u306e\u5358\u8a9e\u306etfidf\u8a08\u7b97\n\n\u5b8c\u6210\u54c1\nhttps://github.com/katryo/tfidf_with_sklearn\nFork me!\n\n\u7406\u8ad6\n\ntfidf\u306e\u5b9a\u7fa9\n\ntf-idf\u306f tf * idf \u306e\u5024\u3002\u3042\u308b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\uff08\u6587\u66f8\uff09\u96c6\u5408\u306b\u304a\u3044\u3066\u3001\u3042\u308b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u3001\u3042\u308b\u5358\u8a9e\u306b\u3064\u3051\u3089\u308c\u308b\u3002tf-idf\u304c\u9ad8\u3044\u8a9e\u306f\u91cd\u8981\u3068\u8003\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u60c5\u5831\u691c\u7d22\u306b\u304a\u3044\u3066\u3001\u8a9e\u3078\u306e\u91cd\u307f\u3065\u3051\u306b\u4f7f\u3048\u308b\u3002\ntf (Term Frequency)\u306f \u305d\u306e\u5358\u8a9e (Term) \u306e\u3001\u305d\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306e\u51fa\u73fe\u56de\u6570 / \u305d\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u51fa\u73fe\u3057\u305f\u3059\u3079\u3066\u306e\u5358\u8a9e\u306e\u7dcf\u6570 \u3002\u5358\u8a9e\u304c\u305d\u306e\u6587\u66f8\u3067\u4f55\u5ea6\u3082\u4f7f\u308f\u308c\u3066\u3044\u308b\u3068\u5927\u304d\u304f\u306a\u308b\u3002\nidf (Inverse Document Frequency)\u306fdf\u306e\u9006\u6570\u3002\u305f\u3060\u3057\u5b9f\u969b\u306b\u306f\u8a08\u7b97\u3057\u3084\u3059\u304f\u3059\u308b\u3088\u3046\u306blog\u3067\u5bfe\u6570\u3092\u53d6\u308b\u3002\u306a\u306e\u3067 log(1/df) \u3068\u306a\u308b\u3002log\u306e\u5e95\u306f\u666e\u901a2\u3060\u304c\u3001\u5225\u306be\u3067\u308210\u3067\u3082\u3088\u3044\u3002\u306f\u305a\u3002\ndf (Document Frequency)\u306f \u305d\u306e\u5358\u8a9e\u304c\u51fa\u73fe\u3057\u305f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u6570 / \u5168\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u6570 \u3002\u5358\u8a9e\u304c\u5e83\u3044\u30c8\u30d4\u30c3\u30af\u3067\u7528\u3044\u3089\u308c\u3066\u3044\u308b\u3068\u5927\u304d\u304f\u306a\u308b\u3002\u300c\u306f\u300d\u3084\u300c\u3092\u300d\u3001\u82f1\u8a9e\u3060\u3068 \u201cis\u201d \u3084 \u201cthat\u201d \u306a\u3069\u3067\u975e\u5e38\u306b\u5927\u304d\u304f\u306a\u308b\u3002\u3042\u308b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u96c6\u5408\u306e\u3001\u3042\u308b\u5358\u8a9e\u306b\u3064\u3051\u3089\u308c\u308b\u5024\u3002\n\n\nscikit-learn\u3067\u306e\u3001\u30c6\u30ad\u30b9\u30c8\u304b\u3089\u306e\u7d20\u6027\u62bd\u51fa\nscikit-learn\u516c\u5f0f\u3001\u30c6\u30ad\u30b9\u30c8\u306e\u7d20\u6027\u62bd\u51fa\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u5185\u5bb9\u3092\u4e00\u90e8\u8a33\u3057\u306a\u304c\u3089\u3001\u81ea\u5206\u306a\u308a\u306e\u7406\u89e3\u3092\u52a0\u3048\u3066\u8aac\u660e\u3059\u308b\u3002\nscikit-learn\u3067\u30c6\u30ad\u30b9\u30c8\u304b\u3089\u7d20\u6027\u3092\u62bd\u51fa\u3059\u308b\u3068\u304d\u30013\u3064\u306e\u51e6\u7406\u304c\u5fc5\u8981\u306b\u306a\u308b\u3002\n\ntokenizing: \u30c6\u30ad\u30b9\u30c8\u3092bag-of-words\u306b\u5909\u63db\u3059\u308b\u3002\u82f1\u8a9e\u306e\u5834\u5408\u306f\u30db\u30ef\u30a4\u30c8\u30b9\u30da\u30fc\u30b9\u3067\u5206\u5272\u3057\u3066\u304b\u3089\u8a18\u53f7\u306a\u3069\u30ce\u30a4\u30ba\u3092\u9664\u53bb\u3059\u308b\u3060\u3051\u3067OK\u3060\u304c\u3001\u65e5\u672c\u8a9e\u3067\u3084\u308b\u5834\u5408\u3001MeCab\u3084KyTea\u306e\u3088\u3046\u306a\u5f62\u614b\u7d20\u89e3\u6790\u5668\u3092\u4f7f\u3046\u3002scikit-learn\u306b\u306f\u65e5\u672c\u8a9e\u306e\u5f62\u614b\u7d20\u89e3\u6790\u5668\u306f\u5165\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u3053\u306e\u51e6\u7406\u304c\u5225\u306b\u5fc5\u8981\u306b\u306a\u308b\u3002\ncounting: \u500b\u3005\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3054\u3068\u306b\u3001\u305d\u308c\u305e\u308c\u306e\u8a9e\u306e\u51fa\u73fe\u983b\u5ea6\u3092\u6570\u3048\u308b\u3002\nnormalizing and weighting: \u6b63\u898f\u5316\u3068\u91cd\u307f\u3065\u3051\u3002\u8a9e\u306e\u51fa\u73fe\u983b\u5ea6\u3068\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u5185\u306e\u8a9e\u306e\u6570\u3068\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u6570\u3067tf-idf\u3092\u8a08\u7b97\u3057\u3066\u3001\u3055\u3089\u306b\u305d\u308c\u3092\u4f7f\u3044\u3084\u3059\u3044\u5024\u306b\u5909\u63db\u3059\u308b\u3002\n\nscikit-learn\u3067\u306f\u4ee5\u4e0a3\u3064\u306e\u624b\u9806\u3092\u307e\u3068\u3081\u3066 vectorization \u3064\u307e\u308a\u300c\u30d9\u30af\u30c8\u30eb\u5316\u300d\u3068\u547c\u3093\u3067\u3044\u308b\u3002\u5f8c\u3067\u767b\u5834\u3059\u308bTfidfVectorizer\u306f3\u3064\u306e\u624b\u9806\u3059\u3079\u3066\u3092\u884c\u3048\u308b\u3002\u3059\u3067\u306b\u9014\u4e2d\u307e\u3067\u624b\u9806\u3092\u7d42\u3048\u3066\u3044\u308b\u306a\u3089\u3001\u9014\u4e2d\u304b\u3089\u306e\u8a08\u7b97\u3082\u3067\u304d\u308b\u3057\u3001\u9014\u4e2d\u307e\u3067\u306e\u8a08\u7b97\u3082\u3067\u304d\u308b\u3002\n\u3061\u306a\u307f\u306bscikit-learn\u306fbag-of-words\u3060\u3051\u3067\u306a\u304f\u30012\u3064\u4ee5\u4e0a\u306e\u8a9e\u306e\u9023\u7d9a\u306b\u7740\u76ee\u3057\u305fn-gram\u3067\u306etfidf\u8a08\u7b97\u3082\u3067\u304d\u308b\u304c\u4eca\u56de\u306f\u3084\u3089\u306a\u3044\u3002\n\nCountVectorizer\nsklearn.feature_extraction.text\u306b\u3044\u308bCountVectorizer\u306f\u3001tokenizing\u3068counting\u304c\u3067\u304d\u308b\u3002Counting\u306e\u7d50\u679c\u306f\u30d9\u30af\u30c8\u30eb\u3067\u8868\u73fe\u3055\u308c\u3066\u3044\u308b\u306e\u3067Vectorizer\u3002\n\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u3053\u306e\u7b87\u6240\u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u3002\n\nTfidfTransformer\n\u540c\u3058\u304fsklearn.feature_extraction.text\u306b\u3042\u308bTfidfTransformer\u306fnormalizing\u3092\u53d7\u3051\u6301\u3064\u3002fit_transform\u30e1\u30bd\u30c3\u30c9\u3067\u3001\u305f\u3060\u306e\u300c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3054\u3068\u306e\u8a9e\u306e\u51fa\u73fe\u983b\u5ea6\u300d\u3092\u3082\u3068\u306btfidf\u3092\u8a08\u7b97\u3057\u3066\u3001\u3055\u3089\u306b\u6b63\u898f\u5316\u307e\u3067\u3057\u3066\u304f\u308c\u308b\u3002\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u3053\u3053\u3002\n\nTfidfVectorizer\nCountVectorizer\u3068TfidfTransformer\u306e\u6a5f\u80fd\u3092\u4f75\u305b\u6301\u3064\u5b58\u5728\u3002\u307e\u3055\u306b\u4e09\u4f4d\u4e00\u4f53\u3001\u30c8\u30ea\u30cb\u30c6\u30a3\u30d5\u30a9\u30fc\u30e0\u3002\u751f\u30c6\u30ad\u30b9\u30c8\u304b\u3089\u7d20\u6027\u62bd\u51fa\u3059\u308b\u3068\u304d\u306f\u3053\u308c\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3002\n\n\u5b9f\u969b\u306b\u4f7f\u3063\u3066\u307f\u305f\n\ntfidf\u306e\u9ad8\u3044\u8a9e\u3092\u898b\u3066\u307f\u308b\n\u3053\u3053\u304b\u3089\u304c\u672c\u984c\u30028\u3064\u306e\u30af\u30a8\u30ea\u3067\u53d6\u5f97\u3057\u305f400\u306eWeb\u30da\u30fc\u30b8\u5185\u306e\u8a9e\u300136934\u7a2e\u985e\u3002\u3053\u308c\u3089\u306e\u306a\u304b\u304b\u3089\u3001\u300c\u51fa\u73fe\u3057\u305f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067tfidf\u304c0.1\u3088\u308a\u5927\u304d\u306a\u8a9e\u300d\u3092print\u3059\u308b\u3002\n\u307e\u305atfidf\u306e\u8a08\u7b97\u306f\u304b\u306a\u308a\u9ad8\u30b3\u30b9\u30c8\u306a\u306e\u3067\u3001tfidf\u3092\u8a08\u7b97\u3057\u305f\u3042\u3068\u3001\u7d50\u679c\u3092pickle\u5316\u3057\u3066\u304a\u3053\u3046\u3002\n\nset_tfidf_with_sklearn_to_fetched_pages.py\nimport utils\nimport constants\nimport pickle\nimport os\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n\ndef is_bigger_than_min_tfidf(term, terms, tfidfs):\n    '''\n    [term for term in terms if is_bigger_than_min_tfidf(term, terms, tfidfs)]\u3067\u4f7f\u3046\n    list\u5316\u3057\u305f\u3001\u8a9e\u305f\u3061\u306etfidf\u306e\u5024\u306e\u306a\u304b\u304b\u3089\u3001\u9806\u756a\u306b\u5f53\u3066\u308b\u95a2\u6570\u3002\n    tfidf\u306e\u5024\u304cMIN_TFIDF\u3088\u308a\u3082\u5927\u304d\u3051\u308c\u3070True\u3092\u8fd4\u3059\n    '''\n    if tfidfs[terms.index(term)] > constants.MIN_TFIDF:\n        return True\n    return False\n\n\ndef tfidf(pages):\n    # analyzer\u306f\u6587\u5b57\u5217\u3092\u5165\u308c\u308b\u3068\u6587\u5b57\u5217\u306elist\u304c\u8fd4\u308b\u95a2\u6570\n    vectorizer = TfidfVectorizer(analyzer=utils.stems, min_df=1, max_df=50)\n    corpus = [page.text for page in pages]\n\n    x = vectorizer.fit_transform(corpus)\n\n    #  \u3053\u3053\u304b\u3089\u4e0b\u306f\u8fd4\u3059\u5024\u3068\u95a2\u4fc2\u306a\u3044\u3002tfidf\u306e\u9ad8\u3044\u8a9e\u304c\u3069\u3093\u306a\u3082\u306e\u304b\u898b\u3066\u307f\u305f\u304b\u3063\u305f\u3060\u3051\n    terms = vectorizer.get_feature_names()\n    tfidfs = x.toarray()[constants.DOC_NUM]\n    print([term for term in terms if is_bigger_than_min_tfidf(term, terms, tfidfs)])\n\n    print('\u5408\u8a08%i\u7a2e\u985e\u306e\u5358\u8a9e\u304c%i\u30da\u30fc\u30b8\u304b\u3089\u898b\u3064\u304b\u308a\u307e\u3057\u305f\u3002' % (len(terms), len(pages)))\n\n    return x, vectorizer  # x\u306ftfidf_result\u3068\u3057\u3066main\u3067\u53d7\u3051\u53d6\u308b\n\nif __name__ == '__main__':\n    utils.go_to_fetched_pages_dir()\n    pages = utils.load_all_html_files()  # pages\u306fhtml\u3092\u30d5\u30a7\u30c3\u30c1\u3057\u3066text\u306b\u30bb\u30c3\u30c8\u305a\u307f\n    tfidf_result, vectorizer = tfidf(pages)  # tfidf_result\u306ftfidf\u95a2\u6570\u306ex\n\n    pkl_tfidf_result_path = os.path.join('..', constants.TFIDF_RESULT_PKL_FILENAME)\n    pkl_tfidf_vectorizer_path = os.path.join('..', constants.TFIDF_VECTORIZER_PKL_FILENAME)\n\n    with open(pkl_tfidf_result_path, 'wb') as f:\n        pickle.dump(tfidf_result, f)\n    with open(pkl_tfidf_vectorizer_path, 'wb') as f:\n        pickle.dump(vectorizer, f)\n\n\ntfidf\u95a2\u6570\u306e\u306a\u304b\u3067\nvectorizer = TfidfVectorizer(analyzer=utils.stems, min_df=1, max_df=50)\n\n\u3068\u3057\u3066\u3044\u308b\u3002analyzer\u306f\u6587\u5b57\u5217\u3092\u5165\u308c\u308b\u3068\u6587\u5b57\u5217\u306elist\u3092\u8fd4\u3059\u95a2\u6570\u3092\u5165\u308c\u308b\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u30db\u30ef\u30a4\u30c8\u30b9\u30da\u30fc\u30b9\u3067\u5206\u5272\u3057\u30661\u6587\u5b57\u306e\u8a18\u53f7\u3092\u9664\u53bb\u3059\u308b\u3060\u3051\u3060\u304c\u3001\u65e5\u672c\u8a9e\u3067\u884c\u3046\u3068\u304d\u306f\u5f62\u614b\u7d20\u89e3\u6790\u5668\u3092\u5229\u7528\u3057\u305f\u95a2\u6570\u3092\u81ea\u5206\u3067\u4f5c\u3063\u3066\u8a2d\u5b9a\u3057\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002utils.stems\u95a2\u6570\u306fMeCab\u3067\u5f62\u614b\u7d20\u89e3\u6790\u3092\u3057\u3066\u8a9e\u5e79\u306b\u5909\u63db\u3057\u3066list\u306b\u3057\u3066\u8fd4\u3059\u95a2\u6570\u3067\u3001\u5f8c\u8ff0\u3059\u308butils.py\u5185\u306b\u66f8\u3044\u305f\u3002\ntfidf\u95a2\u6570\u306e\u4e2d\u3067print\u3057\u3066\u3044\u308b\u306e\u306f\u3001\u300c\u80c3\u3082\u305f\u308c\u300d\u3067\u691c\u7d22\u3057\u305f\u7d50\u679c\u30da\u30fc\u30b8\u306e1\u3064\u306e\u4e2d\u304b\u3089\u767a\u898b\u3067\u304d\u308b\u5358\u8a9e\u306e\u306a\u304b\u3067\u3001tfidf\u306e\u5024\u304c0.1\u4ee5\u4e0a\u306e\u3082\u306e\u3067\u3042\u308b\u3002\u3053\u308c\u306e\u7d50\u679c\u306f\u5f8c\u8ff0\u3059\u308b\u3002\n\u30b3\u30fc\u30c9\u4e2d\u306b\u51fa\u3066\u304f\u308butils\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3001\u591a\u69d8\u306a\u5834\u9762\u3067\u4f7f\u3046\u4fbf\u5229\u306a\u95a2\u6570\u3092\u96c6\u3081\u3066\u3044\u308b\u3002\n\nutils.py\nimport MeCab\nimport constants\nimport os\nimport pdb\nfrom web_page import WebPage\n\ndef _split_to_words(text, to_stem=False):\n    \"\"\"\n    \u5165\u529b: '\u3059\u3079\u3066\u81ea\u5206\u306e\u307b\u3046\u3078'\n    \u51fa\u529b: tuple(['\u3059\u3079\u3066', '\u81ea\u5206', '\u306e', '\u307b\u3046', '\u3078'])\n    \"\"\"\n    tagger = MeCab.Tagger('mecabrc')  # \u5225\u306eTagger\u3092\u4f7f\u3063\u3066\u3082\u3044\u3044\n    mecab_result = tagger.parse(text)\n    info_of_words = mecab_result.split('\\n')\n    words = []\n    for info in info_of_words:\n        # macab\u3067\u5206\u3051\u308b\u3068\u3001\u6587\u306e\u6700\u5f8c\u306b\u2019\u2019\u304c\u3001\u305d\u306e\u624b\u524d\u306b'EOS'\u304c\u6765\u308b\n        if info == 'EOS' or info == '':\n            break\n            # info => '\u306a\\t\u52a9\u8a5e,\u7d42\u52a9\u8a5e,*,*,*,*,\u306a,\u30ca,\u30ca'\n        info_elems = info.split(',')\n        # 6\u756a\u76ee\u306b\u3001\u7121\u6d3b\u7528\u7cfb\u306e\u5358\u8a9e\u304c\u5165\u308b\u3002\u3082\u30576\u756a\u76ee\u304c'*'\u3060\u3063\u305f\u30890\u756a\u76ee\u3092\u5165\u308c\u308b\n        if info_elems[6] == '*':\n            # info_elems[0] => '\u30f4\u30a1\u30f3\u30ed\u30c3\u30b5\u30e0\\t\u540d\u8a5e'\n            words.append(info_elems[0][:-3])\n            continue\n        if to_stem:\n            # \u8a9e\u5e79\u306b\u5909\u63db\n            words.append(info_elems[6])\n            continue\n        # \u8a9e\u3092\u305d\u306e\u307e\u307e\n        words.append(info_elems[0][:-3])\n    return words\n\n\ndef words(text):\n    words = _split_to_words(text=text, to_stem=False)\n    return words\n\n\ndef stems(text):\n    stems = _split_to_words(text=text, to_stem=True)\n    return stems\n\n\ndef load_all_html_files():\n    pages = []\n    for query in constants.QUERIES:\n        pages.extend(load_html_files_with_query(query))\n    return pages\n\n\ndef load_html_files_with_query(query):\n    pages = []\n    for i in range(constants.NUM_OF_FETCHED_PAGES):\n        with open('%s_%s.html' % (query, str(i)), 'r') as f:\n            page = WebPage()\n            page.html_body = f.read()\n        page.remove_html_tags()\n        pages.append(page)\n    return pages\n\ndef load_html_files():\n    \"\"\"\n    HTML\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3044\u308b\u524d\u63d0\u3067\u4f7f\u3046\n    \"\"\"\n    pages = load_html_files_with_query(constants.QUERY)\n    return pages\n\n\ndef go_to_fetched_pages_dir():\n    if not os.path.exists(constants.FETCHED_PAGES_DIR_NAME):\n        os.mkdir(constants.FETCHED_PAGES_DIR_NAME)\n    os.chdir(constants.FETCHED_PAGES_DIR_NAME)\n\n\n\n\u305d\u3057\u3066constants\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\nconstants.py\nFETCHED_PAGES_DIR_NAME = 'fetched_pages'\nQUERIES = '\u80c3\u3082\u305f\u308c \u866b\u6b6f \u82b1\u7c89\u75c7\u5bfe\u7b56 \u9b31 \u6a5f\u68b0 \u9aa8\u6298 \u80a9\u3053\u308a \u66f8\u985e'.split(' ')\nNUM_OF_FETCHED_PAGES = 50\nNB_PKL_FILENAME = 'naive_bayes_classifier.pkl'\nDOC_NUM = 0\nMIN_TFIDF = 0.1\nTFIDF_RESULT_PKL_FILENAME = 'tfidf_result.pkl'\nTFIDF_VECTORIZER_PKL_FILENAME = 'tfidf_vectorizer.pkl'\n\n\nQUERIES\u306e\u9806\u756a\u3092\u898b\u3066\u3082\u3089\u3048\u3070\u3001\u300c\u80c3\u3082\u305f\u308c\u300d\u30ab\u30c6\u30b4\u30ea\u30fc\u304c\u6700\u521d\u306b\u6765\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3060\u308d\u3046\u3002DOC_NUM\u5b9a\u6570\u306f\u4eca\u56de\u306e\u5b9f\u9a13\u306e\u305f\u3081\u306b\u4f5c\u3063\u305f\u3082\u306e\u3067\u3001\u300c\u80c3\u3082\u305f\u308c\u300d\u30ab\u30c6\u30b4\u30ea\u30fc\u306e0\u756a\u76ee\u306e\u30d5\u30a1\u30a4\u30eb\u3001\u3064\u307e\u308a\u300c\u80c3\u3082\u305f\u308c_0.html\u300d\u3068\u3044\u3046\u540d\u524d\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3059\u308b\u305f\u3081\u306b\u4f7f\u3063\u305f\u3002\n\u3055\u3066\u3002\u3053\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3088\u3046\u3002\n$ python set_tfidf_with_sklearn_to_fetched_pages.py\n\nscikit-learn\u3092\u4f7f\u3063\u3066\u3044\u3066\u3082tfidf\u306e\u8a08\u7b97\u306b\u306f\u6642\u9593\u304c\u304b\u304b\u308b\u3002\u50d5\u306e\u74b0\u5883\u3067\u306f25.81\u79d2\u304b\u304b\u3063\u305f\u3002\u7d50\u679c\u3002\n['gaJsHost', 'https', '\u305f\u308c\u308b', '\u3084\u3051', '\u7a7a\u6c17\u56a5\u4e0b\u75c7', '\u80c3\u9178\u904e\u591a\u75c7', '\u80f8', '\u8abf\u7406', '\u98df\u6750', '\u98df\u9053\u88c2\u5b54\u30d8\u30eb\u30cb\u30a2']\n\u5408\u8a0836934\u7a2e\u985e\u306e\u5358\u8a9e\u304c400\u30da\u30fc\u30b8\u304b\u3089\u898b\u3064\u304b\u308a\u307e\u3057\u305f\u3002\n\n\u80c3\u3082\u305f\u308c\u3063\u307d\u3044\u8a9e\u3060\u3002\u80c3\u3082\u305f\u308c_0.html\u5185\u306e\u8a9e\u306e\u306a\u304b\u3067tfidf\u304c0.1\u3092\u8d85\u3048\u3066\u3044\u308b\u306e\u306f\u4ee5\u4e0a10\u7a2e\u985e\u306e\u8a9e\u3068\u3044\u3046\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u3002\ngaJsHost\u3068https\u306fJavaScript\u306e\u30b3\u30fc\u30c9\u306e\u4e00\u90e8\u3068\u601d\u308f\u308c\u308b\u3002\u3046\u306c\u30fc\u3002\u3053\u3046\u3044\u3046\u30ce\u30a4\u30ba\u306f\u5168\u90e8\u524a\u9664\u3057\u305f\u3044\u306e\u3060\u304c\u3001\u3046\u307e\u3044\u65b9\u6cd5\u304c\u601d\u3044\u3064\u304b\u306a\u3044\u3002\u3044\u3063\u305d\u306e\u3053\u3068\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3060\u3051\u306e\u8a9e\u306f\u6392\u9664\u3057\u305f\u307b\u3046\u304c\u3044\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\u3061\u306a\u307f\u306b\u300c\u98df\u9053\u88c2\u5b54\u30d8\u30eb\u30cb\u30a2\u300d\u306e\u3088\u3046\u306a\u8a9e\u306fMeCab\u306eIPADIC\uff08IPADIC\u306e\u7531\u6765\u306b\u3064\u3044\u3066\u306f\u3053\u306e\u8a18\u4e8b\u304c\u8a73\u3057\u3044\uff09\u306b\u306f\u5165\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3001Wikipedia\u3084\u306f\u3066\u306a\u30ad\u30fc\u30ef\u30fc\u30c9\u306e\u8a9e\u3092\u8f9e\u66f8\u306b\u5165\u308c\u308b\u306a\u3069\u3057\u3066\u5f37\u5316\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u3084\u308a\u304b\u305f\u306f\u30b0\u30b0\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u8a9e\u3068tfidf\u306e\u5024\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u78ba\u8a8d\n\u516c\u5f0f\u30da\u30fc\u30b8\u3092\u8aad\u3093\u3060\u306e\u3060\u304c\u3001tfidf\u3092\u8a08\u7b97\u3057\u305f\u7d50\u679c\u306fscipy\u306ecsr_matrix\u3068\u3044\u3046\u578b\u3067\u51fa\u529b\u3055\u308c\u308b\u3002\u3053\u308c\u306f\u30b9\u30d1\u30fc\u30b9\u306a\uff080\u304c\u591a\u3044\uff09\u884c\u5217\u3067\u3001\u500b\u3005\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u5185\u306e\u8a9e\u306etf-idf\u30920\u304b\u30891\u307e\u3067\u306e\u5c0f\u6570\u3067\u8868\u73fe\u3057\u3066\u3044\u308b\u3002\n(Pdb) type(x)\n<class 'scipy.sparse.csr.csr_matrix'>\n\n\u305d\u306etfidf\u306e\u5024\u306e\u96c6\u5408\u3068\u3001\u8a9e\u3068\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u304c\u3069\u3046\u306a\u3063\u3066\u3044\u308b\u304b\u308f\u304b\u3089\u306a\u304b\u3063\u305f\uff08\u3042\u3068\u3067\u308f\u304b\u3063\u305f\uff09\u306e\u3067\u3001pdb.set_trace()\u3092\u4f7f\u3063\u3066\u7c21\u5358\u306a\u5b9f\u9a13\u3092\u884c\u3063\u3066\u307f\u305f\u3002\n\u4f7f\u3046\u30e1\u30bd\u30c3\u30c9\u306fTfidfVectorizer\u304c\u6301\u3064\n\nget_feature_names\ninverse_transform\n\n\u305d\u3057\u3066scipy.sparse.csr_matrix\u304c\u6301\u3064\n\ntoarray\n\n\u3067\u3042\u308b\u3002\n\u307e\u305a\u3001\u6587\u66f8\u756a\u53f70\u306eWebPage\u3092\u8abf\u3079\u305f\u3068\u3053\u308d\u3001\u80c3\u3082\u305f\u308c.com\u3068\u3044\u3046\u30da\u30fc\u30b8\u3060\u3063\u305f\u3002\u3053\u306e\u30da\u30fc\u30b8\u306b\u51fa\u73fe\u3059\u308b\u8a9e\u304c\u3069\u306e\u3088\u3046\u306b\u8868\u73fe\u3055\u308c\u3066\u3044\u308b\u304b\u3001\u8abf\u3079\u3066\u307f\u308b\u3002\ntfidf\u306e\u8a08\u7b97\u7d50\u679c\u3092pickle\u5316\u3057\u305f\u3042\u3068\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u305f\u3002\n\nplay_with_tfidf.py\n# -*- coding: utf-8 -*-\nimport pickle\nimport constants\nimport pdb\n\ndef is_bigger_than_min_tfidf(term, terms, tfidfs):\n    '''\n    [term for term in terms if is_bigger_than_min_tfidf(term, terms, tfidfs)]\u3067\u4f7f\u3046\n    list\u5316\u3057\u305f\u3001\u8a9e\u305f\u3061\u306etfidf\u306e\u5024\u306e\u306a\u304b\u304b\u3089\u3001\u9806\u756a\u306b\u5f53\u3066\u308b\u95a2\u6570\u3002\n    tfidf\u306e\u5024\u304cMIN_TFIDF\u3088\u308a\u3082\u5927\u304d\u3051\u308c\u3070True\u3092\u8fd4\u3059\n    '''\n    if tfidfs[terms.index(term)] > constants.MIN_TFIDF:\n        return True\n    return False\n\nif __name__ == '__main__':\n    with open(constants.TFIDF_VECTORIZER_PKL_FILENAME, 'rb') as f:\n        vectorizer = pickle.load(f)\n    with open(constants.TFIDF_RESULT_PKL_FILENAME, 'rb') as f:\n        x = pickle.load(f)\n\n    pdb.set_trace()\n\n    terms = vectorizer.get_feature_names()\n    for i in range(3):\n        tfidfs = x.toarray()[i]\n        print([term for term in terms if is_bigger_than_min_tfidf(term, terms, tfidfs)])\n\n\npdb.set_trace\u3067\u30d6\u30ec\u30a4\u30af\u30dd\u30a4\u30f3\u30c8\u3068\u306a\u308a\u3001\u305d\u3053\u304b\u3089\u306f\u5bfe\u8a71\u74b0\u5883\u3067\u5024\u3092\u51fa\u529b\u3067\u304d\u308b\u306e\u3067\u3001\u8272\u3005\u306a\u78ba\u8a8d\u4f5c\u696d\u304c\u3067\u304d\u308b\u3002\n(Pdb) vectorizer.inverse_transform(x)[0]\n> array(['\u98df\u9053\u88c2\u5b54\u30d8\u30eb\u30cb\u30a2', '\u98df\u6750', '\u98df\u4e8b\u7642\u6cd5', '\u904b\u55b6', '\u9006\u6d41\u6027\u98df\u9053\u708e', '\u8abf\u7406', '\u80f8', '\u80c3\u9178\u904e\u591a\u75c7', '\u80c3\u75db',\n       '\u80c3\u6f70\u760d', '\u80c3\u4e0b\u5782', '\u80c3\u304c\u3093', '\u7a7a\u6c17\u56a5\u4e0b\u75c7', '\u6f22\u65b9\u85ac', '\u69cb\u9020', '\u6162\u6027\u80c3\u708e', '\u5341\u4e8c\u6307\u8178\u6f70\u760d', '\u533b\u7642\u4fdd\u967a',\n       '\u514d\u8cac', '\u4f01\u696d\u60c5\u5831', '\u30dd\u30ea\u30fc\u30d7', '\u30c4\u30dc', '\u30b1\u30a2', '\u30a2\u30e1\u30ea\u30ab\u30f3\u30d5\u30a1\u30df\u30ea\u30fc\u751f\u547d\u4fdd\u967a\u4f1a\u793e', '\u30a2\u30d5\u30e9\u30c3\u30af', '\u3086\u304f',\n       '\u3084\u3051', '\u306b\u95a2\u3057\u3066', '\u305f\u308c\u308b', 'unescape', 'try', 'ssl', 'protocol',\n       'javascript', 'inquiry', 'https', 'gaJsHost', 'ga', 'err',\n       'comCopyright', 'analytics', 'Inc', 'Cscript', 'CROSSFINITY',\n       '=\\'\"', \"='\", ':\"', '.\")', '.\"', ')\\u3000', '((\"', '(\"%', \"'%\",\n       '\"))'],\n      dtype='<U26')\n\n\u300c\u98df\u9053\u88c2\u5b54\u30d8\u30eb\u30cb\u30a2\u300d\u3068\u3044\u3046\u8a9e\u306f\u73cd\u3057\u304f\u3001\u4ed6\u306e\u30da\u30fc\u30b8\u306b\u306f\u3081\u3063\u305f\u306b\u51fa\u73fe\u3057\u306a\u3044\u3068\u601d\u308f\u308c\u308b\u306e\u3067\u3001\u3053\u306e\u8a9e\u3092\u30de\u30fc\u30ab\u30fc\u3068\u3057\u3066\u4f7f\u3046\u3053\u3068\u306b\u6c7a\u3081\u305f\u3002\n(Pdb) vectorizer.get_feature_names().index('\u98df\u9053\u88c2\u5b54\u30d8\u30eb\u30cb\u30a2')\n36097\n\n\u306736097\u756a\u76ee\u306e\u8a9e\u3060\u3068\u308f\u304b\u3063\u305f\u3002\u3067\u306f\u30010\u756a\u76ee\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\uff08\u3064\u307e\u308a\u80c3\u3082\u305f\u308c.com\uff09\u306b\u304a\u3051\u308b36097\u756a\u76ee\u306e\u8a9e\u306etfidf\u306e\u5024\u306f\uff1f\n(Pdb) x.toarray()[0][36097]\n0.10163697033184078\n\n\u304b\u306a\u308a\u9ad8\u3044\u3002\u6587\u66f8\u756a\u53f70\u306b\u304a\u3044\u3066\u5358\u8a9e\u756a\u53f736097\u306e\u8a9e\u306ftfidf\u304c0.10163697033184078\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u3002\u3053\u308c\u3060\u3051\u9ad8\u3044\uff08\u307e\u305a\u306a\u306b\u3088\u308a0\u3067\u306a\u3044\uff09tfidf\u306e\u5024\u304c\u3001\u5076\u7136\u5358\u8a9e\u756a\u53f736097\u3067\u51fa\u73fe\u3059\u308b\u3068\u306f\u601d\u3048\u306a\u3044\u3002x.toarray()\u306f\u3068\u3066\u3082\u758e\u306a\u884c\u5217\u3067\u3042\u308a\u3001\u307b\u3068\u3093\u3069\u306e\u8981\u7d20\u304c0\u306e\u306f\u305a\u3060\u3002\u3088\u3063\u3066\u3001vectorizer.get_feature_names()\u3067\u53d6\u308c\u308b\u8a9e\u30ea\u30b9\u30c8\u306e\u9806\u756a\u3068x.toarray()\u3067\u53d6\u308c\u308btfidf\u304c\u30bb\u30c3\u30c8\u3055\u308c\u305f\u8a9e\u306e\u9806\u756a\u306f\u540c\u3058\u3060\u3068\u8003\u3048\u3066\u3044\u3044\u3002\n\u3053\u3046\u3057\u3066\u3001\u5358\u8a9e\u4e00\u89a7\u306f\u540c\u3058\u9806\u5e8f\u304c\u4fdd\u305f\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u305f\u3002\u300c\u5358\u8a9e\u306e\u9806\u756a\u306f\u4fdd\u305f\u308c\u308b\u300d\u3068\u3001\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u3069\u3053\u304b\u306b\u66f8\u3044\u3066\u3042\u308b\u3068\u601d\u3046\u3002\n\u3053\u306e\u3042\u3068\u3001pdb.set_trace()\u3092\u524a\u9664\u3057\u3066\u3001\u3082\u3046\u3044\u3061\u3069play_with_tfidf.py\u3092\u5b9f\u884c\u3057\u305f\u3002\n['gaJsHost', 'https', '\u305f\u308c\u308b', '\u3084\u3051', '\u7a7a\u6c17\u56a5\u4e0b\u75c7', '\u80c3\u9178\u904e\u591a\u75c7', '\u80f8', '\u8abf\u7406', '\u98df\u6750', '\u98df\u9053\u88c2\u5b54\u30d8\u30eb\u30cb\u30a2']\n['\u305f\u308c\u308b', '\u3080\u304b\u3064\u304d', '\u3084\u3051', '\u80c3\u75db', '\u80f8', '\u904e\u304e\u308b']\n['TVCM', '\u3050\u3059\u308b', '\u305f\u308c\u308b', '\u306e\u3080', '\u3082\u305f\u308c\u308b', '\u3084\u3051', '\u3084\u3051\u308b', '\u308a', '\u30a2\u30af\u30b7\u30e7\u30f3', '\u30b5\u30a4\u30a8\u30f3\u30b9', '\u30b5\u30af\u30ed\u30f3', '\u30bb\u30eb\u30d9\u30fc\u30eb', '\u30c8\u30ea\u30d7\u30eb', '\u30d9\u30fc\u30eb', '\u4e8c\u65e5\u9154\u3044', '\u5f31\u308b', '\u6574\u3048\u308b', '\u7c98\u6db2', '\u80c3\u75db', '\u80c3\u85ac', '\u80f8', '\u81a8\u6e80']\n\n\u3053\u308c\u3089\u306e\u8a9e\u306ftfidf\u304c\u9ad8\u304f\uff08\u3044\u304b\u306b\u3082\u9ad8\u305d\u3046\uff09\u3001\u6587\u66f8\u3068\u80c3\u3082\u305f\u308c\u30ab\u30c6\u30b4\u30ea\u30fc\u3068\u306e\u985e\u4f3c\u5ea6\u3092\u8a08\u7b97\u3059\u308b\u969b\u306e\u7d20\u6027\u3068\u3057\u3066\u6709\u7528\u3060\u3068\u8003\u3048\u3089\u308c\u308b\u3002\n\n\u307e\u3068\u3081\nscikit-learn\u4fbf\u5229\u3002\n\u30b3\u30fc\u30c9\u306fGithub\u306b\u4e0a\u3052\u307e\u3057\u305f\u3002\nhttps://github.com/katryo/tfidf_with_sklearn\n\n\u6b21\u56de\u4e88\u544a\ntfidf\u306e\u8a08\u7b97\u6a5f\u80fd\u3092\u5b9f\u88c5\u3057\u3066\u3001scikit-learn\u3068\u306e\u6bd4\u8f03\u3092\u3057\u305f\u3044\u3002\n\n**\u3053\u306e\u6295\u7a3f\u306f[\u73fe\u5b9f\u9003\u907f\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc2013](http://katryo.hatenablog.com/entry/2013/12/19/001823)\u306e4\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002**\n\n[2\u65e5\u76ee\u306e\u8a18\u4e8b](http://qiita.com/katryo/items/62291ba328de9d12bd30)\u3067Bing API\u3092\u4f7f\u3063\u3066\u30d5\u30a7\u30c3\u30c1\u3057\u305fhtml\u3092\u4f7f\u3046\u306e\u3067\u3001[2\u65e5\u76ee](http://qiita.com/katryo/items/62291ba328de9d12bd30)\u3092\u5148\u306b\u8aad\u3093\u3067\u304a\u304f\u3068\u7406\u89e3\u3057\u3084\u3059\u3044\u3067\u3059\u3002\n\n\n## \u672c\u7a3f\u30923\u884c\u3067\u307e\u3068\u3081\u308b\n- [scikit-learn](http://scikit-learn.org/stable/index.html)\u3068\u3044\u3046Python\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8abf\u3079\u305f\n- [2\u65e5\u76ee](http://qiita.com/katryo/items/62291ba328de9d12bd30)\u3067\u4fdd\u5b58\u3057\u305fhtml\u5185\u306e\u8a9e\u306etf-idf\u3092\u8a08\u7b97\u3057\u305f\n- \u8a9e\u3068tfidf\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u78ba\u8a8d\u3057\u305f\n\n## \u53c2\u8003\n[scikit-learn\u516c\u5f0f\u3001\u30c6\u30ad\u30b9\u30c8\u306e\u7d20\u6027\u62bd\u51fa\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://scikit-learn.org/stable/modules/feature_extraction.html#text-feature-extraction)\n\n[scikit-learn\u3092\u4f7f\u3063\u3066Tweet\u4e2d\u306e\u5358\u8a9e\u306etfidf\u8a08\u7b97](http://blog.parosky.net/archives/2212)\n\n## \u5b8c\u6210\u54c1\nhttps://github.com/katryo/tfidf_with_sklearn\n\nFork me!\n\n\n## \u7406\u8ad6\n### tfidf\u306e\u5b9a\u7fa9\n- tf-idf\u306f **tf * idf** \u306e\u5024\u3002\u3042\u308b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\uff08\u6587\u66f8\uff09\u96c6\u5408\u306b\u304a\u3044\u3066\u3001\u3042\u308b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u3001\u3042\u308b\u5358\u8a9e\u306b\u3064\u3051\u3089\u308c\u308b\u3002tf-idf\u304c\u9ad8\u3044\u8a9e\u306f\u91cd\u8981\u3068\u8003\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u60c5\u5831\u691c\u7d22\u306b\u304a\u3044\u3066\u3001\u8a9e\u3078\u306e\u91cd\u307f\u3065\u3051\u306b\u4f7f\u3048\u308b\u3002\n- tf (Term Frequency)\u306f **\u305d\u306e\u5358\u8a9e (Term) \u306e\u3001\u305d\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306e\u51fa\u73fe\u56de\u6570 / \u305d\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u51fa\u73fe\u3057\u305f\u3059\u3079\u3066\u306e\u5358\u8a9e\u306e\u7dcf\u6570** \u3002\u5358\u8a9e\u304c\u305d\u306e\u6587\u66f8\u3067\u4f55\u5ea6\u3082\u4f7f\u308f\u308c\u3066\u3044\u308b\u3068\u5927\u304d\u304f\u306a\u308b\u3002\n- idf (Inverse Document Frequency)\u306fdf\u306e\u9006\u6570\u3002\u305f\u3060\u3057\u5b9f\u969b\u306b\u306f\u8a08\u7b97\u3057\u3084\u3059\u304f\u3059\u308b\u3088\u3046\u306blog\u3067\u5bfe\u6570\u3092\u53d6\u308b\u3002\u306a\u306e\u3067 **log(1/df)** \u3068\u306a\u308b\u3002log\u306e\u5e95\u306f\u666e\u901a2\u3060\u304c\u3001\u5225\u306be\u3067\u308210\u3067\u3082\u3088\u3044\u3002\u306f\u305a\u3002\n- df (Document Frequency)\u306f **\u305d\u306e\u5358\u8a9e\u304c\u51fa\u73fe\u3057\u305f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u6570 / \u5168\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u6570** \u3002\u5358\u8a9e\u304c\u5e83\u3044\u30c8\u30d4\u30c3\u30af\u3067\u7528\u3044\u3089\u308c\u3066\u3044\u308b\u3068\u5927\u304d\u304f\u306a\u308b\u3002\u300c\u306f\u300d\u3084\u300c\u3092\u300d\u3001\u82f1\u8a9e\u3060\u3068 \u201cis\u201d \u3084 \u201cthat\u201d \u306a\u3069\u3067\u975e\u5e38\u306b\u5927\u304d\u304f\u306a\u308b\u3002\u3042\u308b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u96c6\u5408\u306e\u3001\u3042\u308b\u5358\u8a9e\u306b\u3064\u3051\u3089\u308c\u308b\u5024\u3002\n\n## scikit-learn\u3067\u306e\u3001\u30c6\u30ad\u30b9\u30c8\u304b\u3089\u306e\u7d20\u6027\u62bd\u51fa\n[scikit-learn\u516c\u5f0f\u3001\u30c6\u30ad\u30b9\u30c8\u306e\u7d20\u6027\u62bd\u51fa\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://scikit-learn.org/stable/modules/feature_extraction.html#text-feature-extraction)\u306e\u5185\u5bb9\u3092\u4e00\u90e8\u8a33\u3057\u306a\u304c\u3089\u3001\u81ea\u5206\u306a\u308a\u306e\u7406\u89e3\u3092\u52a0\u3048\u3066\u8aac\u660e\u3059\u308b\u3002\n\nscikit-learn\u3067\u30c6\u30ad\u30b9\u30c8\u304b\u3089\u7d20\u6027\u3092\u62bd\u51fa\u3059\u308b\u3068\u304d\u30013\u3064\u306e\u51e6\u7406\u304c\u5fc5\u8981\u306b\u306a\u308b\u3002\n\n- tokenizing: \u30c6\u30ad\u30b9\u30c8\u3092bag-of-words\u306b\u5909\u63db\u3059\u308b\u3002\u82f1\u8a9e\u306e\u5834\u5408\u306f\u30db\u30ef\u30a4\u30c8\u30b9\u30da\u30fc\u30b9\u3067\u5206\u5272\u3057\u3066\u304b\u3089\u8a18\u53f7\u306a\u3069\u30ce\u30a4\u30ba\u3092\u9664\u53bb\u3059\u308b\u3060\u3051\u3067OK\u3060\u304c\u3001\u65e5\u672c\u8a9e\u3067\u3084\u308b\u5834\u5408\u3001MeCab\u3084KyTea\u306e\u3088\u3046\u306a\u5f62\u614b\u7d20\u89e3\u6790\u5668\u3092\u4f7f\u3046\u3002scikit-learn\u306b\u306f\u65e5\u672c\u8a9e\u306e\u5f62\u614b\u7d20\u89e3\u6790\u5668\u306f\u5165\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u3053\u306e\u51e6\u7406\u304c\u5225\u306b\u5fc5\u8981\u306b\u306a\u308b\u3002\n- counting: \u500b\u3005\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3054\u3068\u306b\u3001\u305d\u308c\u305e\u308c\u306e\u8a9e\u306e\u51fa\u73fe\u983b\u5ea6\u3092\u6570\u3048\u308b\u3002\n- normalizing and weighting: \u6b63\u898f\u5316\u3068\u91cd\u307f\u3065\u3051\u3002\u8a9e\u306e\u51fa\u73fe\u983b\u5ea6\u3068\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u5185\u306e\u8a9e\u306e\u6570\u3068\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u6570\u3067tf-idf\u3092\u8a08\u7b97\u3057\u3066\u3001\u3055\u3089\u306b\u305d\u308c\u3092\u4f7f\u3044\u3084\u3059\u3044\u5024\u306b\u5909\u63db\u3059\u308b\u3002\n\nscikit-learn\u3067\u306f\u4ee5\u4e0a3\u3064\u306e\u624b\u9806\u3092\u307e\u3068\u3081\u3066 **vectorization** \u3064\u307e\u308a\u300c\u30d9\u30af\u30c8\u30eb\u5316\u300d\u3068\u547c\u3093\u3067\u3044\u308b\u3002\u5f8c\u3067\u767b\u5834\u3059\u308bTfidfVectorizer\u306f3\u3064\u306e\u624b\u9806\u3059\u3079\u3066\u3092\u884c\u3048\u308b\u3002\u3059\u3067\u306b\u9014\u4e2d\u307e\u3067\u624b\u9806\u3092\u7d42\u3048\u3066\u3044\u308b\u306a\u3089\u3001\u9014\u4e2d\u304b\u3089\u306e\u8a08\u7b97\u3082\u3067\u304d\u308b\u3057\u3001\u9014\u4e2d\u307e\u3067\u306e\u8a08\u7b97\u3082\u3067\u304d\u308b\u3002\n\n\u3061\u306a\u307f\u306bscikit-learn\u306fbag-of-words\u3060\u3051\u3067\u306a\u304f\u30012\u3064\u4ee5\u4e0a\u306e\u8a9e\u306e\u9023\u7d9a\u306b\u7740\u76ee\u3057\u305fn-gram\u3067\u306etfidf\u8a08\u7b97\u3082\u3067\u304d\u308b\u304c\u4eca\u56de\u306f\u3084\u3089\u306a\u3044\u3002\n\n### CountVectorizer\nsklearn.feature_extraction.text\u306b\u3044\u308bCountVectorizer\u306f\u3001tokenizing\u3068counting\u304c\u3067\u304d\u308b\u3002Counting\u306e\u7d50\u679c\u306f\u30d9\u30af\u30c8\u30eb\u3067\u8868\u73fe\u3055\u308c\u3066\u3044\u308b\u306e\u3067Vectorizer\u3002\n\n[\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u3053\u306e\u7b87\u6240\u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u3002](http://scikit-learn.org/stable/modules/feature_extraction.html#common-vectorizer-usage)\n\n### TfidfTransformer\n\u540c\u3058\u304fsklearn.feature_extraction.text\u306b\u3042\u308bTfidfTransformer\u306fnormalizing\u3092\u53d7\u3051\u6301\u3064\u3002fit_transform\u30e1\u30bd\u30c3\u30c9\u3067\u3001\u305f\u3060\u306e\u300c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3054\u3068\u306e\u8a9e\u306e\u51fa\u73fe\u983b\u5ea6\u300d\u3092\u3082\u3068\u306btfidf\u3092\u8a08\u7b97\u3057\u3066\u3001\u3055\u3089\u306b\u6b63\u898f\u5316\u307e\u3067\u3057\u3066\u304f\u308c\u308b\u3002[\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u3053\u3053\u3002](http://scikit-learn.org/stable/modules/feature_extraction.html#tfidf-term-weighting)\n\n### TfidfVectorizer\nCountVectorizer\u3068TfidfTransformer\u306e\u6a5f\u80fd\u3092\u4f75\u305b\u6301\u3064\u5b58\u5728\u3002\u307e\u3055\u306b\u4e09\u4f4d\u4e00\u4f53\u3001\u30c8\u30ea\u30cb\u30c6\u30a3\u30d5\u30a9\u30fc\u30e0\u3002\u751f\u30c6\u30ad\u30b9\u30c8\u304b\u3089\u7d20\u6027\u62bd\u51fa\u3059\u308b\u3068\u304d\u306f\u3053\u308c\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3002\n\n\n## \u5b9f\u969b\u306b\u4f7f\u3063\u3066\u307f\u305f\n\n### tfidf\u306e\u9ad8\u3044\u8a9e\u3092\u898b\u3066\u307f\u308b\n\u3053\u3053\u304b\u3089\u304c\u672c\u984c\u30028\u3064\u306e\u30af\u30a8\u30ea\u3067\u53d6\u5f97\u3057\u305f400\u306eWeb\u30da\u30fc\u30b8\u5185\u306e\u8a9e\u300136934\u7a2e\u985e\u3002\u3053\u308c\u3089\u306e\u306a\u304b\u304b\u3089\u3001\u300c\u51fa\u73fe\u3057\u305f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067tfidf\u304c0.1\u3088\u308a\u5927\u304d\u306a\u8a9e\u300d\u3092print\u3059\u308b\u3002\n\n\u307e\u305atfidf\u306e\u8a08\u7b97\u306f\u304b\u306a\u308a\u9ad8\u30b3\u30b9\u30c8\u306a\u306e\u3067\u3001tfidf\u3092\u8a08\u7b97\u3057\u305f\u3042\u3068\u3001\u7d50\u679c\u3092pickle\u5316\u3057\u3066\u304a\u3053\u3046\u3002\n\n```python:set_tfidf_with_sklearn_to_fetched_pages.py\nimport utils\nimport constants\nimport pickle\nimport os\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n\ndef is_bigger_than_min_tfidf(term, terms, tfidfs):\n    '''\n    [term for term in terms if is_bigger_than_min_tfidf(term, terms, tfidfs)]\u3067\u4f7f\u3046\n    list\u5316\u3057\u305f\u3001\u8a9e\u305f\u3061\u306etfidf\u306e\u5024\u306e\u306a\u304b\u304b\u3089\u3001\u9806\u756a\u306b\u5f53\u3066\u308b\u95a2\u6570\u3002\n    tfidf\u306e\u5024\u304cMIN_TFIDF\u3088\u308a\u3082\u5927\u304d\u3051\u308c\u3070True\u3092\u8fd4\u3059\n    '''\n    if tfidfs[terms.index(term)] > constants.MIN_TFIDF:\n        return True\n    return False\n\n\ndef tfidf(pages):\n    # analyzer\u306f\u6587\u5b57\u5217\u3092\u5165\u308c\u308b\u3068\u6587\u5b57\u5217\u306elist\u304c\u8fd4\u308b\u95a2\u6570\n    vectorizer = TfidfVectorizer(analyzer=utils.stems, min_df=1, max_df=50)\n    corpus = [page.text for page in pages]\n\n    x = vectorizer.fit_transform(corpus)\n\n    #  \u3053\u3053\u304b\u3089\u4e0b\u306f\u8fd4\u3059\u5024\u3068\u95a2\u4fc2\u306a\u3044\u3002tfidf\u306e\u9ad8\u3044\u8a9e\u304c\u3069\u3093\u306a\u3082\u306e\u304b\u898b\u3066\u307f\u305f\u304b\u3063\u305f\u3060\u3051\n    terms = vectorizer.get_feature_names()\n    tfidfs = x.toarray()[constants.DOC_NUM]\n    print([term for term in terms if is_bigger_than_min_tfidf(term, terms, tfidfs)])\n\n    print('\u5408\u8a08%i\u7a2e\u985e\u306e\u5358\u8a9e\u304c%i\u30da\u30fc\u30b8\u304b\u3089\u898b\u3064\u304b\u308a\u307e\u3057\u305f\u3002' % (len(terms), len(pages)))\n\n    return x, vectorizer  # x\u306ftfidf_result\u3068\u3057\u3066main\u3067\u53d7\u3051\u53d6\u308b\n\nif __name__ == '__main__':\n    utils.go_to_fetched_pages_dir()\n    pages = utils.load_all_html_files()  # pages\u306fhtml\u3092\u30d5\u30a7\u30c3\u30c1\u3057\u3066text\u306b\u30bb\u30c3\u30c8\u305a\u307f\n    tfidf_result, vectorizer = tfidf(pages)  # tfidf_result\u306ftfidf\u95a2\u6570\u306ex\n\n    pkl_tfidf_result_path = os.path.join('..', constants.TFIDF_RESULT_PKL_FILENAME)\n    pkl_tfidf_vectorizer_path = os.path.join('..', constants.TFIDF_VECTORIZER_PKL_FILENAME)\n\n    with open(pkl_tfidf_result_path, 'wb') as f:\n        pickle.dump(tfidf_result, f)\n    with open(pkl_tfidf_vectorizer_path, 'wb') as f:\n        pickle.dump(vectorizer, f)\n```\n\ntfidf\u95a2\u6570\u306e\u306a\u304b\u3067\n\n```\nvectorizer = TfidfVectorizer(analyzer=utils.stems, min_df=1, max_df=50)\n```\n\n\u3068\u3057\u3066\u3044\u308b\u3002analyzer\u306f\u6587\u5b57\u5217\u3092\u5165\u308c\u308b\u3068\u6587\u5b57\u5217\u306elist\u3092\u8fd4\u3059\u95a2\u6570\u3092\u5165\u308c\u308b\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u30db\u30ef\u30a4\u30c8\u30b9\u30da\u30fc\u30b9\u3067\u5206\u5272\u3057\u30661\u6587\u5b57\u306e\u8a18\u53f7\u3092\u9664\u53bb\u3059\u308b\u3060\u3051\u3060\u304c\u3001\u65e5\u672c\u8a9e\u3067\u884c\u3046\u3068\u304d\u306f\u5f62\u614b\u7d20\u89e3\u6790\u5668\u3092\u5229\u7528\u3057\u305f\u95a2\u6570\u3092\u81ea\u5206\u3067\u4f5c\u3063\u3066\u8a2d\u5b9a\u3057\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002utils.stems\u95a2\u6570\u306fMeCab\u3067\u5f62\u614b\u7d20\u89e3\u6790\u3092\u3057\u3066\u8a9e\u5e79\u306b\u5909\u63db\u3057\u3066list\u306b\u3057\u3066\u8fd4\u3059\u95a2\u6570\u3067\u3001\u5f8c\u8ff0\u3059\u308butils.py\u5185\u306b\u66f8\u3044\u305f\u3002\n\ntfidf\u95a2\u6570\u306e\u4e2d\u3067print\u3057\u3066\u3044\u308b\u306e\u306f\u3001\u300c\u80c3\u3082\u305f\u308c\u300d\u3067\u691c\u7d22\u3057\u305f\u7d50\u679c\u30da\u30fc\u30b8\u306e1\u3064\u306e\u4e2d\u304b\u3089\u767a\u898b\u3067\u304d\u308b\u5358\u8a9e\u306e\u306a\u304b\u3067\u3001tfidf\u306e\u5024\u304c0.1\u4ee5\u4e0a\u306e\u3082\u306e\u3067\u3042\u308b\u3002\u3053\u308c\u306e\u7d50\u679c\u306f\u5f8c\u8ff0\u3059\u308b\u3002\n\n\u30b3\u30fc\u30c9\u4e2d\u306b\u51fa\u3066\u304f\u308butils\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3001\u591a\u69d8\u306a\u5834\u9762\u3067\u4f7f\u3046\u4fbf\u5229\u306a\u95a2\u6570\u3092\u96c6\u3081\u3066\u3044\u308b\u3002\n\n```python:utils.py\nimport MeCab\nimport constants\nimport os\nimport pdb\nfrom web_page import WebPage\n\ndef _split_to_words(text, to_stem=False):\n    \"\"\"\n    \u5165\u529b: '\u3059\u3079\u3066\u81ea\u5206\u306e\u307b\u3046\u3078'\n    \u51fa\u529b: tuple(['\u3059\u3079\u3066', '\u81ea\u5206', '\u306e', '\u307b\u3046', '\u3078'])\n    \"\"\"\n    tagger = MeCab.Tagger('mecabrc')  # \u5225\u306eTagger\u3092\u4f7f\u3063\u3066\u3082\u3044\u3044\n    mecab_result = tagger.parse(text)\n    info_of_words = mecab_result.split('\\n')\n    words = []\n    for info in info_of_words:\n        # macab\u3067\u5206\u3051\u308b\u3068\u3001\u6587\u306e\u6700\u5f8c\u306b\u2019\u2019\u304c\u3001\u305d\u306e\u624b\u524d\u306b'EOS'\u304c\u6765\u308b\n        if info == 'EOS' or info == '':\n            break\n            # info => '\u306a\\t\u52a9\u8a5e,\u7d42\u52a9\u8a5e,*,*,*,*,\u306a,\u30ca,\u30ca'\n        info_elems = info.split(',')\n        # 6\u756a\u76ee\u306b\u3001\u7121\u6d3b\u7528\u7cfb\u306e\u5358\u8a9e\u304c\u5165\u308b\u3002\u3082\u30576\u756a\u76ee\u304c'*'\u3060\u3063\u305f\u30890\u756a\u76ee\u3092\u5165\u308c\u308b\n        if info_elems[6] == '*':\n            # info_elems[0] => '\u30f4\u30a1\u30f3\u30ed\u30c3\u30b5\u30e0\\t\u540d\u8a5e'\n            words.append(info_elems[0][:-3])\n            continue\n        if to_stem:\n            # \u8a9e\u5e79\u306b\u5909\u63db\n            words.append(info_elems[6])\n            continue\n        # \u8a9e\u3092\u305d\u306e\u307e\u307e\n        words.append(info_elems[0][:-3])\n    return words\n\n\ndef words(text):\n    words = _split_to_words(text=text, to_stem=False)\n    return words\n\n\ndef stems(text):\n    stems = _split_to_words(text=text, to_stem=True)\n    return stems\n\n\ndef load_all_html_files():\n    pages = []\n    for query in constants.QUERIES:\n        pages.extend(load_html_files_with_query(query))\n    return pages\n\n\ndef load_html_files_with_query(query):\n    pages = []\n    for i in range(constants.NUM_OF_FETCHED_PAGES):\n        with open('%s_%s.html' % (query, str(i)), 'r') as f:\n            page = WebPage()\n            page.html_body = f.read()\n        page.remove_html_tags()\n        pages.append(page)\n    return pages\n\ndef load_html_files():\n    \"\"\"\n    HTML\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3044\u308b\u524d\u63d0\u3067\u4f7f\u3046\n    \"\"\"\n    pages = load_html_files_with_query(constants.QUERY)\n    return pages\n\n\ndef go_to_fetched_pages_dir():\n    if not os.path.exists(constants.FETCHED_PAGES_DIR_NAME):\n        os.mkdir(constants.FETCHED_PAGES_DIR_NAME)\n    os.chdir(constants.FETCHED_PAGES_DIR_NAME)\n\n```\n\n\u305d\u3057\u3066constants\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\n```python:constants.py\nFETCHED_PAGES_DIR_NAME = 'fetched_pages'\nQUERIES = '\u80c3\u3082\u305f\u308c \u866b\u6b6f \u82b1\u7c89\u75c7\u5bfe\u7b56 \u9b31 \u6a5f\u68b0 \u9aa8\u6298 \u80a9\u3053\u308a \u66f8\u985e'.split(' ')\nNUM_OF_FETCHED_PAGES = 50\nNB_PKL_FILENAME = 'naive_bayes_classifier.pkl'\nDOC_NUM = 0\nMIN_TFIDF = 0.1\nTFIDF_RESULT_PKL_FILENAME = 'tfidf_result.pkl'\nTFIDF_VECTORIZER_PKL_FILENAME = 'tfidf_vectorizer.pkl'\n```\n\nQUERIES\u306e\u9806\u756a\u3092\u898b\u3066\u3082\u3089\u3048\u3070\u3001\u300c\u80c3\u3082\u305f\u308c\u300d\u30ab\u30c6\u30b4\u30ea\u30fc\u304c\u6700\u521d\u306b\u6765\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3060\u308d\u3046\u3002DOC_NUM\u5b9a\u6570\u306f\u4eca\u56de\u306e\u5b9f\u9a13\u306e\u305f\u3081\u306b\u4f5c\u3063\u305f\u3082\u306e\u3067\u3001\u300c\u80c3\u3082\u305f\u308c\u300d\u30ab\u30c6\u30b4\u30ea\u30fc\u306e0\u756a\u76ee\u306e\u30d5\u30a1\u30a4\u30eb\u3001\u3064\u307e\u308a\u300c\u80c3\u3082\u305f\u308c_0.html\u300d\u3068\u3044\u3046\u540d\u524d\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3059\u308b\u305f\u3081\u306b\u4f7f\u3063\u305f\u3002\n\n\u3055\u3066\u3002\u3053\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3088\u3046\u3002\n\n```\n$ python set_tfidf_with_sklearn_to_fetched_pages.py\n```\n\nscikit-learn\u3092\u4f7f\u3063\u3066\u3044\u3066\u3082tfidf\u306e\u8a08\u7b97\u306b\u306f\u6642\u9593\u304c\u304b\u304b\u308b\u3002\u50d5\u306e\u74b0\u5883\u3067\u306f25.81\u79d2\u304b\u304b\u3063\u305f\u3002\u7d50\u679c\u3002\n\n```\n['gaJsHost', 'https', '\u305f\u308c\u308b', '\u3084\u3051', '\u7a7a\u6c17\u56a5\u4e0b\u75c7', '\u80c3\u9178\u904e\u591a\u75c7', '\u80f8', '\u8abf\u7406', '\u98df\u6750', '\u98df\u9053\u88c2\u5b54\u30d8\u30eb\u30cb\u30a2']\n\u5408\u8a0836934\u7a2e\u985e\u306e\u5358\u8a9e\u304c400\u30da\u30fc\u30b8\u304b\u3089\u898b\u3064\u304b\u308a\u307e\u3057\u305f\u3002\n```\n\n\u80c3\u3082\u305f\u308c\u3063\u307d\u3044\u8a9e\u3060\u3002\u80c3\u3082\u305f\u308c_0.html\u5185\u306e\u8a9e\u306e\u306a\u304b\u3067tfidf\u304c0.1\u3092\u8d85\u3048\u3066\u3044\u308b\u306e\u306f\u4ee5\u4e0a10\u7a2e\u985e\u306e\u8a9e\u3068\u3044\u3046\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u3002\n\ngaJsHost\u3068https\u306fJavaScript\u306e\u30b3\u30fc\u30c9\u306e\u4e00\u90e8\u3068\u601d\u308f\u308c\u308b\u3002\u3046\u306c\u30fc\u3002\u3053\u3046\u3044\u3046\u30ce\u30a4\u30ba\u306f\u5168\u90e8\u524a\u9664\u3057\u305f\u3044\u306e\u3060\u304c\u3001\u3046\u307e\u3044\u65b9\u6cd5\u304c\u601d\u3044\u3064\u304b\u306a\u3044\u3002\u3044\u3063\u305d\u306e\u3053\u3068\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3060\u3051\u306e\u8a9e\u306f\u6392\u9664\u3057\u305f\u307b\u3046\u304c\u3044\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n\u3061\u306a\u307f\u306b\u300c\u98df\u9053\u88c2\u5b54\u30d8\u30eb\u30cb\u30a2\u300d\u306e\u3088\u3046\u306a\u8a9e\u306fMeCab\u306eIPADIC\uff08IPADIC\u306e\u7531\u6765\u306b\u3064\u3044\u3066\u306f[\u3053\u306e\u8a18\u4e8b](http://parame.mwj.jp/blog/0209)\u304c\u8a73\u3057\u3044\uff09\u306b\u306f\u5165\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3001Wikipedia\u3084\u306f\u3066\u306a\u30ad\u30fc\u30ef\u30fc\u30c9\u306e\u8a9e\u3092\u8f9e\u66f8\u306b\u5165\u308c\u308b\u306a\u3069\u3057\u3066\u5f37\u5316\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u3084\u308a\u304b\u305f\u306f\u30b0\u30b0\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n### \u8a9e\u3068tfidf\u306e\u5024\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u78ba\u8a8d\n\n\u516c\u5f0f\u30da\u30fc\u30b8\u3092\u8aad\u3093\u3060\u306e\u3060\u304c\u3001tfidf\u3092\u8a08\u7b97\u3057\u305f\u7d50\u679c\u306fscipy\u306ecsr_matrix\u3068\u3044\u3046\u578b\u3067\u51fa\u529b\u3055\u308c\u308b\u3002\u3053\u308c\u306f\u30b9\u30d1\u30fc\u30b9\u306a\uff080\u304c\u591a\u3044\uff09\u884c\u5217\u3067\u3001\u500b\u3005\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u5185\u306e\u8a9e\u306etf-idf\u30920\u304b\u30891\u307e\u3067\u306e\u5c0f\u6570\u3067\u8868\u73fe\u3057\u3066\u3044\u308b\u3002\n\n```\n(Pdb) type(x)\n<class 'scipy.sparse.csr.csr_matrix'>\n```\n\n\u305d\u306etfidf\u306e\u5024\u306e\u96c6\u5408\u3068\u3001\u8a9e\u3068\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u304c\u3069\u3046\u306a\u3063\u3066\u3044\u308b\u304b\u308f\u304b\u3089\u306a\u304b\u3063\u305f\uff08\u3042\u3068\u3067\u308f\u304b\u3063\u305f\uff09\u306e\u3067\u3001pdb.set_trace()\u3092\u4f7f\u3063\u3066\u7c21\u5358\u306a\u5b9f\u9a13\u3092\u884c\u3063\u3066\u307f\u305f\u3002\n\n\u4f7f\u3046\u30e1\u30bd\u30c3\u30c9\u306fTfidfVectorizer\u304c\u6301\u3064\n\n- get_feature_names\n- inverse_transform\n\n\u305d\u3057\u3066scipy.sparse.csr_matrix\u304c\u6301\u3064\n\n- toarray\n\n\u3067\u3042\u308b\u3002\n\n\n\n\u307e\u305a\u3001\u6587\u66f8\u756a\u53f70\u306eWebPage\u3092\u8abf\u3079\u305f\u3068\u3053\u308d\u3001[\u80c3\u3082\u305f\u308c.com](http://atdesk.jp/)\u3068\u3044\u3046\u30da\u30fc\u30b8\u3060\u3063\u305f\u3002\u3053\u306e\u30da\u30fc\u30b8\u306b\u51fa\u73fe\u3059\u308b\u8a9e\u304c\u3069\u306e\u3088\u3046\u306b\u8868\u73fe\u3055\u308c\u3066\u3044\u308b\u304b\u3001\u8abf\u3079\u3066\u307f\u308b\u3002\n\ntfidf\u306e\u8a08\u7b97\u7d50\u679c\u3092pickle\u5316\u3057\u305f\u3042\u3068\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u305f\u3002\n\n```python:play_with_tfidf.py\n# -*- coding: utf-8 -*-\nimport pickle\nimport constants\nimport pdb\n\ndef is_bigger_than_min_tfidf(term, terms, tfidfs):\n    '''\n    [term for term in terms if is_bigger_than_min_tfidf(term, terms, tfidfs)]\u3067\u4f7f\u3046\n    list\u5316\u3057\u305f\u3001\u8a9e\u305f\u3061\u306etfidf\u306e\u5024\u306e\u306a\u304b\u304b\u3089\u3001\u9806\u756a\u306b\u5f53\u3066\u308b\u95a2\u6570\u3002\n    tfidf\u306e\u5024\u304cMIN_TFIDF\u3088\u308a\u3082\u5927\u304d\u3051\u308c\u3070True\u3092\u8fd4\u3059\n    '''\n    if tfidfs[terms.index(term)] > constants.MIN_TFIDF:\n        return True\n    return False\n\nif __name__ == '__main__':\n    with open(constants.TFIDF_VECTORIZER_PKL_FILENAME, 'rb') as f:\n        vectorizer = pickle.load(f)\n    with open(constants.TFIDF_RESULT_PKL_FILENAME, 'rb') as f:\n        x = pickle.load(f)\n\n    pdb.set_trace()\n\n    terms = vectorizer.get_feature_names()\n    for i in range(3):\n        tfidfs = x.toarray()[i]\n        print([term for term in terms if is_bigger_than_min_tfidf(term, terms, tfidfs)])\n```\n\npdb.set_trace\u3067\u30d6\u30ec\u30a4\u30af\u30dd\u30a4\u30f3\u30c8\u3068\u306a\u308a\u3001\u305d\u3053\u304b\u3089\u306f\u5bfe\u8a71\u74b0\u5883\u3067\u5024\u3092\u51fa\u529b\u3067\u304d\u308b\u306e\u3067\u3001\u8272\u3005\u306a\u78ba\u8a8d\u4f5c\u696d\u304c\u3067\u304d\u308b\u3002\n\n```\n(Pdb) vectorizer.inverse_transform(x)[0]\n> array(['\u98df\u9053\u88c2\u5b54\u30d8\u30eb\u30cb\u30a2', '\u98df\u6750', '\u98df\u4e8b\u7642\u6cd5', '\u904b\u55b6', '\u9006\u6d41\u6027\u98df\u9053\u708e', '\u8abf\u7406', '\u80f8', '\u80c3\u9178\u904e\u591a\u75c7', '\u80c3\u75db',\n       '\u80c3\u6f70\u760d', '\u80c3\u4e0b\u5782', '\u80c3\u304c\u3093', '\u7a7a\u6c17\u56a5\u4e0b\u75c7', '\u6f22\u65b9\u85ac', '\u69cb\u9020', '\u6162\u6027\u80c3\u708e', '\u5341\u4e8c\u6307\u8178\u6f70\u760d', '\u533b\u7642\u4fdd\u967a',\n       '\u514d\u8cac', '\u4f01\u696d\u60c5\u5831', '\u30dd\u30ea\u30fc\u30d7', '\u30c4\u30dc', '\u30b1\u30a2', '\u30a2\u30e1\u30ea\u30ab\u30f3\u30d5\u30a1\u30df\u30ea\u30fc\u751f\u547d\u4fdd\u967a\u4f1a\u793e', '\u30a2\u30d5\u30e9\u30c3\u30af', '\u3086\u304f',\n       '\u3084\u3051', '\u306b\u95a2\u3057\u3066', '\u305f\u308c\u308b', 'unescape', 'try', 'ssl', 'protocol',\n       'javascript', 'inquiry', 'https', 'gaJsHost', 'ga', 'err',\n       'comCopyright', 'analytics', 'Inc', 'Cscript', 'CROSSFINITY',\n       '=\\'\"', \"='\", ':\"', '.\")', '.\"', ')\\u3000', '((\"', '(\"%', \"'%\",\n       '\"))'],\n      dtype='<U26')\n```\n\n\u300c\u98df\u9053\u88c2\u5b54\u30d8\u30eb\u30cb\u30a2\u300d\u3068\u3044\u3046\u8a9e\u306f\u73cd\u3057\u304f\u3001\u4ed6\u306e\u30da\u30fc\u30b8\u306b\u306f\u3081\u3063\u305f\u306b\u51fa\u73fe\u3057\u306a\u3044\u3068\u601d\u308f\u308c\u308b\u306e\u3067\u3001\u3053\u306e\u8a9e\u3092\u30de\u30fc\u30ab\u30fc\u3068\u3057\u3066\u4f7f\u3046\u3053\u3068\u306b\u6c7a\u3081\u305f\u3002\n\n```\n(Pdb) vectorizer.get_feature_names().index('\u98df\u9053\u88c2\u5b54\u30d8\u30eb\u30cb\u30a2')\n36097\n```\n\n\u306736097\u756a\u76ee\u306e\u8a9e\u3060\u3068\u308f\u304b\u3063\u305f\u3002\u3067\u306f\u30010\u756a\u76ee\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\uff08\u3064\u307e\u308a\u80c3\u3082\u305f\u308c.com\uff09\u306b\u304a\u3051\u308b36097\u756a\u76ee\u306e\u8a9e\u306etfidf\u306e\u5024\u306f\uff1f\n\n```\n(Pdb) x.toarray()[0][36097]\n0.10163697033184078\n```\n\n\u304b\u306a\u308a\u9ad8\u3044\u3002\u6587\u66f8\u756a\u53f70\u306b\u304a\u3044\u3066\u5358\u8a9e\u756a\u53f736097\u306e\u8a9e\u306ftfidf\u304c0.10163697033184078\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u3002\u3053\u308c\u3060\u3051\u9ad8\u3044\uff08\u307e\u305a\u306a\u306b\u3088\u308a0\u3067\u306a\u3044\uff09tfidf\u306e\u5024\u304c\u3001\u5076\u7136\u5358\u8a9e\u756a\u53f736097\u3067\u51fa\u73fe\u3059\u308b\u3068\u306f\u601d\u3048\u306a\u3044\u3002x.toarray()\u306f\u3068\u3066\u3082\u758e\u306a\u884c\u5217\u3067\u3042\u308a\u3001\u307b\u3068\u3093\u3069\u306e\u8981\u7d20\u304c0\u306e\u306f\u305a\u3060\u3002\u3088\u3063\u3066\u3001vectorizer.get_feature_names()\u3067\u53d6\u308c\u308b\u8a9e\u30ea\u30b9\u30c8\u306e\u9806\u756a\u3068x.toarray()\u3067\u53d6\u308c\u308btfidf\u304c\u30bb\u30c3\u30c8\u3055\u308c\u305f\u8a9e\u306e\u9806\u756a\u306f\u540c\u3058\u3060\u3068\u8003\u3048\u3066\u3044\u3044\u3002\n\n\u3053\u3046\u3057\u3066\u3001\u5358\u8a9e\u4e00\u89a7\u306f\u540c\u3058\u9806\u5e8f\u304c\u4fdd\u305f\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u305f\u3002\u300c\u5358\u8a9e\u306e\u9806\u756a\u306f\u4fdd\u305f\u308c\u308b\u300d\u3068\u3001\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u3069\u3053\u304b\u306b\u66f8\u3044\u3066\u3042\u308b\u3068\u601d\u3046\u3002\n\n\u3053\u306e\u3042\u3068\u3001pdb.set_trace()\u3092\u524a\u9664\u3057\u3066\u3001\u3082\u3046\u3044\u3061\u3069play_with_tfidf.py\u3092\u5b9f\u884c\u3057\u305f\u3002\n\n```\n['gaJsHost', 'https', '\u305f\u308c\u308b', '\u3084\u3051', '\u7a7a\u6c17\u56a5\u4e0b\u75c7', '\u80c3\u9178\u904e\u591a\u75c7', '\u80f8', '\u8abf\u7406', '\u98df\u6750', '\u98df\u9053\u88c2\u5b54\u30d8\u30eb\u30cb\u30a2']\n['\u305f\u308c\u308b', '\u3080\u304b\u3064\u304d', '\u3084\u3051', '\u80c3\u75db', '\u80f8', '\u904e\u304e\u308b']\n['TVCM', '\u3050\u3059\u308b', '\u305f\u308c\u308b', '\u306e\u3080', '\u3082\u305f\u308c\u308b', '\u3084\u3051', '\u3084\u3051\u308b', '\u308a', '\u30a2\u30af\u30b7\u30e7\u30f3', '\u30b5\u30a4\u30a8\u30f3\u30b9', '\u30b5\u30af\u30ed\u30f3', '\u30bb\u30eb\u30d9\u30fc\u30eb', '\u30c8\u30ea\u30d7\u30eb', '\u30d9\u30fc\u30eb', '\u4e8c\u65e5\u9154\u3044', '\u5f31\u308b', '\u6574\u3048\u308b', '\u7c98\u6db2', '\u80c3\u75db', '\u80c3\u85ac', '\u80f8', '\u81a8\u6e80']\n```\n\n\u3053\u308c\u3089\u306e\u8a9e\u306ftfidf\u304c\u9ad8\u304f\uff08\u3044\u304b\u306b\u3082\u9ad8\u305d\u3046\uff09\u3001\u6587\u66f8\u3068\u80c3\u3082\u305f\u308c\u30ab\u30c6\u30b4\u30ea\u30fc\u3068\u306e\u985e\u4f3c\u5ea6\u3092\u8a08\u7b97\u3059\u308b\u969b\u306e\u7d20\u6027\u3068\u3057\u3066\u6709\u7528\u3060\u3068\u8003\u3048\u3089\u308c\u308b\u3002\n\n## \u307e\u3068\u3081\n\nscikit-learn\u4fbf\u5229\u3002\n\n\u30b3\u30fc\u30c9\u306fGithub\u306b\u4e0a\u3052\u307e\u3057\u305f\u3002\n\nhttps://github.com/katryo/tfidf_with_sklearn\n\n## \u6b21\u56de\u4e88\u544a\ntfidf\u306e\u8a08\u7b97\u6a5f\u80fd\u3092\u5b9f\u88c5\u3057\u3066\u3001scikit-learn\u3068\u306e\u6bd4\u8f03\u3092\u3057\u305f\u3044\u3002", "tags": ["MachineLearning", "tfidf", "\u6a5f\u68b0\u5b66\u7fd2", "Python", "scikit-learn"]}