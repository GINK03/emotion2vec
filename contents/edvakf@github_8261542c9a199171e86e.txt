{"context": " More than 1 year has passed since last update.Play Framework Streaming\u3068\u304b\u3067\u691c\u7d22\u3059\u308b\u3068\u3053\u3046\u3044\u3046\u30da\u30fc\u30b8\u304c\u51fa\u3066\u304d\u3066\u3001\nhttps://www.playframework.com/documentation/2.3.x/ScalaStream\ndef index = Action {\n\n  val data = getDataStream\n  val dataContent: Enumerator[Array[Byte]] = Enumerator.fromStream(data)\n\n  Ok.chunked(dataContent)\n}\n\n\u3068\u3084\u308b\u3068 Content-Encoding: chuked \u3067\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3089\u3057\u3044\u3002\n\u3075\u3080\u3075\u3080\u3001\u3055\u3066\u30b3\u30de\u30f3\u30c9\u306e\u5b9f\u884c\u7d50\u679c\u3092chunked\u3067\u9001\u308b\u306b\u306f\u3068\u306a\u308b\u3068\u521d\u5fc3\u8005\u306b\u306f\u53b3\u3057\u3044\u3002\n\u307e\u305a\u30b3\u30de\u30f3\u30c9\u306e\u5b9f\u884c\u306f\n\"ls\" !\nProcess(\"xargs test -z\") run()\n\n\u306a\u3069\u8272\u3005\u65b9\u6cd5\u304c\u3042\u308a\u3001Enumerator\u306b\u3059\u308b\u306b\u306f\u3069\u3046\u3059\u308b\u306e\u304b\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u3002\n\nPlayCLI\nhttps://github.com/gre/playCLI\nimport playcli._\nOk.chunked(CLI.enumerate(\"tail -f aLogFile\"))\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u4f7f\u3048\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\u307e\u3055\u306b\u3084\u308a\u305f\u304b\u3063\u305f\u3053\u3068\u304c\u3067\u304d\u3066\u308b\u3002\n\u305f\u3060\u3001\u3061\u3087\u3063\u3068\u653e\u7f6e\u6c17\u5473\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3060\u3057\u3001CLI.enumerate(Process(\"ls\") #| Process(\"tee /tmp/log.txt\")) \u306a\u3069\u3068\u3084\u308b\u3068warning\u304c\u51fa\u308b\u306e\u3067\u3001\u81ea\u5206\u3067\u5b9f\u88c5\u3057\u3088\u3046\u3068\u601d\u3063\u305f\u3002\n\nInputStream\u3092\u4f7f\u3046\nProcess(\"ls\") lineStream\n\n\u306a\u3069\u3068\u3084\u308b\u3068 Stream[String] \u3068\u3044\u3046\u306e\u304c\u5f97\u3089\u308c\u308b\u3089\u3057\u3044\u3002\n\u3053\u308c\u3068 Enumerator.fromStream \u3068\u3044\u3046\u306e\u3092\u7d44\u307f\u5408\u308f\u305b\u3089\u308c\u308b\u306e\u304b\u3068\u601d\u3044\u304d\u3084\u3001Enumerator.fromStream \u306fJava\u306eInputStream\u306e\u3053\u3068\u3067\u3042\u3063\u3066Scala\u3067\u3044\u3046\u3068\u3053\u308d\u306eStream\u3068\u306f\u5225\u7269\u3060\u305d\u3046\u306a\u3002\n\u7d50\u8ad6\u304b\u3089\u8a00\u3046\u3068\u3001\u3053\u3093\u306a\u3075\u3046\u306b\u3084\u3063\u305f\u3002\nobject ProcessEnumerator {\n  def apply(process: ProcessBuilder): Enumerator[Array[Byte]] = {\n    val in = new PipedInputStream()\n    val out = new PipedOutputStream(in)\n    Future(process.#>(out).run())\n    Enumerator.fromStream(in)\n  }\n}\n\n\u3053\u308c\u3067\u30b3\u30de\u30f3\u30c9\u306e\u5b9f\u884c\u7d50\u679c\u304cEnumerator\u306b\u306a\u308a\u3001Content-Encoding: chunked\u3067\u9001\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\u3082\u3057\u304b\u3057\u305f\u3089\nEnumerator.outputStream { out => Future(process.#>(out).run()) }\n\n\u3068\u3044\u3046\u624b\u3082\u3042\u3063\u305f\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u8a66\u3057\u3066\u306a\u3044\u306e\u3067\u308f\u304b\u3089\u306a\u3044\u3002\n\uff08\u3055\u3089\u3063\u3068\u66f8\u3044\u3066\u3044\u308b\u304c\u3001\u3053\u3053\u306b\u81f3\u308b\u307e\u3067Process\u3068ProcessBuilder\u306e\u3053\u3068\u3084Enumerator\u3068\u304bStream\u3068InputStream\u306b\u3064\u3044\u3066\u3060\u3044\u3076\u8abf\u3079\u305f\uff09\n\n\u30cf\u30de\u308a\u3069\u3053\u308d\n\u4e16\u306e\u4e2d\u306b\u306f Content-Encoding: chunked \u3092\u304d\u3061\u3093\u3068\u6271\u3048\u306a\u3044\u30d7\u30ed\u30ad\u30b7\u304c\u3042\u3063\u3066\u3001nginx\u3067\u3059\u3089\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\uff08\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u66f8\u304b\u306a\u3044\u3068\uff09\u3044\u3051\u306a\u3044\u3002\n\u30d7\u30ed\u30ad\u30b7\u3067\u30d0\u30c3\u30d5\u30a1\u30ea\u30f3\u30b0\u3055\u308c\u308b\u30b1\u30fc\u30b9\u3082\u3042\u308b\u3002Play\u304b\u3089\u306f\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u3057\u3066\u3044\u308b\u3064\u3082\u308a\u306a\u306e\u306b\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u306f\u5168\u7136\u6d41\u308c\u3066\u3053\u306a\u3044\u30b1\u30fc\u30b9\u3002\n\u3042\u3068\u30cf\u30de\u3063\u305f\u306e\u304c\u3001UNIX\u306e\u30b3\u30de\u30f3\u30c9\u306f \u30bf\u30fc\u30df\u30ca\u30eb\u51fa\u529b\u3067\u306a\u3044\u5834\u5408\u306f 4096\u30d0\u30a4\u30c8\u305a\u3064\u30d0\u30c3\u30d5\u30a1\u30ea\u30f3\u30b0\u3055\u308c\u308b\u3002\u30bf\u30fc\u30df\u30ca\u30eb\u51fa\u529b\u306e\u5834\u5408\u306f\u884c\u30d0\u30c3\u30d5\u30a1\u306a\u306e\u3067\u3061\u3083\u3093\u3068\u52d5\u3044\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u3066\u3082\u3001\u30a6\u30a7\u30d6\u3092\u4ecb\u3059\u308b\u3068\u306a\u305c\u304b\u8a70\u307e\u308b\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308b\u3002\u3053\u308c\u306flibc\u30ec\u30d9\u30eb\u306e\u554f\u984c\u3067\u3001\u307e\u3063\u3068\u3046\u306a\u65b9\u6cd5\u3067\u89e3\u6c7a\u3059\u308b\u306e\u306f\u3051\u3063\u3053\u3046\u305f\u3044\u3078\u3093\u3002\u691c\u7d22\u3057\u3066\u307f\u308b\u3068\u3001\u30bf\u30fc\u30df\u30ca\u30eb\u51fa\u529b\u306b\u898b\u305b\u304b\u3051\u308b\u305f\u3081\u306e\u30b3\u30de\u30f3\u30c9\u4f7f\u3046\u65b9\u6cd5\u306a\u3069\u304c\u898b\u3064\u304b\u3063\u305f\u3002\u81ea\u5206\u306fscript\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3063\u305f\u3002Mac, Linux\u4e21\u5bfe\u5fdc\u306a\u306e\u3068\u3001\u6a19\u6e96\u30a8\u30e9\u30fc\u51fa\u529b\u3092\u6a19\u6e96\u51fa\u529b\u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3057\u3066\u304f\u308c\u308b\u305f\u3081\u3002\n\nWebSocket\u5bfe\u5fdc\n\u30d7\u30ed\u30ad\u30b7\u306e\u554f\u984c\u304c\u3042\u3063\u305f\u306e\u3067Content-Encoding: chunked\u306f\u8ae6\u3081\u3066WebSocket\u3067\u3084\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\u5e78\u3044\u306a\u3053\u3068\u306b\u3001Enumerator\u306b\u306a\u3063\u3066\u3057\u307e\u3048\u3070WebSocket\u306b\u3059\u308b\u306e\u306f\u7c21\u5358\u3002\n\u2026\u3068\u601d\u3063\u3066\u305f\u6642\u671f\u304c\u50d5\u306b\u3082\u3042\u308a\u307e\u3057\u305f\u3002\n\u554f\u984c\u306f\u3001Enumerator.fromStream\u3067\u3067\u304d\u308bEnumerator\u306f\u3001 Enumerator[Array[Byte]] \u3060\u3068\u3044\u3046\u3053\u3068\u3002\n\u3053\u308c\u3060\u3068\u3001WebSocket\u306eBinaryFrame\u3067\u9001\u3089\u308c\u3061\u3083\u3046\u306e\u3067\u3001JavaScript\u304b\u3089\u306fBlob\u3084ArrayBuffer\u3067\u3057\u304b\u53d7\u3051\u53d6\u308c\u306a\u3044\u3002JS\u3067Blob\u304b\u3089String\u306b\u5909\u63db\u3059\u308b\u306e\u306f\u7d50\u69cb\u9762\u5012\u306a\u306e\u3067\u3001\u304d\u3061\u3093\u3068\u30c6\u30ad\u30b9\u30c8\u3068\u3057\u3066\u8fd4\u3057\u305f\u3044\u3002\nEnumerator[Array[Byte]] \u3092 Enumerator[String] \u306b\u5909\u63db\u3067\u304d\u308b\u30e9\u30c3\u30d1\u30fc\u3092\u66f8\u3044\u305f\u3089\u826f\u304b\u3063\u305f\u306e\u3060\u3051\u3069\u3001\u305d\u3053\u307e\u3067\u306f\u8abf\u3079\u304d\u308c\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u30b3\u30de\u30f3\u30c9\u306e\u51fa\u529b\u3092\u884c\u3054\u3068\u306b\u8aad\u3093\u3067\u51fa\u529b\u3059\u308b\u3068\u3044\u3046\u65b9\u5411\u3067\u3084\u308b\u3053\u3068\u306b\u3057\u305f\u3002\nobject ProcessEnumerator {\n  def apply(process: ProcessBuilder): Enumerator[String] = {\n    val in = new PipedInputStream()\n    val out = new PipedOutputStream(in)\n    Future(process.#>(out).run())\n\n    val reader = new BufferedReader(new InputStreamReader(in, \"UTF-8\"))\n\n    Enumerator.fromCallback1[String](_ => Future {\n      reader.readLine match {\n        case line: String => Some(line + \"\\n\")\n        case _ => None\n      }\n    }, { () => // oncomplete\n      in.close()\n    })\n  }\n}\n\nEnumerator.fromCallback1\u3068\u3044\u3046\u3001\u7b2c\u4e00\u5f15\u6570\u306e\u95a2\u6570\u3092\u3072\u305f\u3059\u3089\u5b9f\u884c\u3057\u3066\u304f\u308c\u3066Enumerator\u3092\u4f5c\u308c\u308b\u3082\u306e\u304c\u3042\u3063\u305f\u3002\n\u8a73\u3057\u304f\u306f\u3053\u306e\u3042\u305f\u308a\u3092\u3069\u3046\u305e\u3002\n\n\u8ffd\u8a18\n\u8272\u3005\u8a66\u884c\u932f\u8aa4\u3057\u3066\u305f\u3089\u3082\u3063\u3068\u7c21\u5358\u306b\u3067\u304d\u305f\u3002\nobject ProcessEnumerator {\n  def apply(process: ProcessBuilder): Enumerator[String] = {\n    Enumerator.enumerate[String](\n      process.lineStream_!(ProcessLogger(line => ())).map { line => line + \"\\n\" }\n    )\n  }\n}\n\n\nPlay Framework Streaming\u3068\u304b\u3067\u691c\u7d22\u3059\u308b\u3068\u3053\u3046\u3044\u3046\u30da\u30fc\u30b8\u304c\u51fa\u3066\u304d\u3066\u3001\n\nhttps://www.playframework.com/documentation/2.3.x/ScalaStream\n\n```scala\ndef index = Action {\n\n  val data = getDataStream\n  val dataContent: Enumerator[Array[Byte]] = Enumerator.fromStream(data)\n  \n  Ok.chunked(dataContent)\n}\n```\n\n\u3068\u3084\u308b\u3068 `Content-Encoding: chuked` \u3067\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3089\u3057\u3044\u3002\n\n\u3075\u3080\u3075\u3080\u3001\u3055\u3066\u30b3\u30de\u30f3\u30c9\u306e\u5b9f\u884c\u7d50\u679c\u3092chunked\u3067\u9001\u308b\u306b\u306f\u3068\u306a\u308b\u3068\u521d\u5fc3\u8005\u306b\u306f\u53b3\u3057\u3044\u3002\n\n\u307e\u305a\u30b3\u30de\u30f3\u30c9\u306e\u5b9f\u884c\u306f\n\n```scala\n\"ls\" !\nProcess(\"xargs test -z\") run()\n```\n\n\u306a\u3069\u8272\u3005\u65b9\u6cd5\u304c\u3042\u308a\u3001Enumerator\u306b\u3059\u308b\u306b\u306f\u3069\u3046\u3059\u308b\u306e\u304b\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u3002\n\n## PlayCLI\n\nhttps://github.com/gre/playCLI\n\n```scala\nimport playcli._\nOk.chunked(CLI.enumerate(\"tail -f aLogFile\"))\n```\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u4f7f\u3048\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\u307e\u3055\u306b\u3084\u308a\u305f\u304b\u3063\u305f\u3053\u3068\u304c\u3067\u304d\u3066\u308b\u3002\n\n\u305f\u3060\u3001\u3061\u3087\u3063\u3068\u653e\u7f6e\u6c17\u5473\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3060\u3057\u3001`CLI.enumerate(Process(\"ls\") #| Process(\"tee /tmp/log.txt\"))` \u306a\u3069\u3068\u3084\u308b\u3068warning\u304c\u51fa\u308b\u306e\u3067\u3001\u81ea\u5206\u3067\u5b9f\u88c5\u3057\u3088\u3046\u3068\u601d\u3063\u305f\u3002\n\n## InputStream\u3092\u4f7f\u3046\n\n```scala\nProcess(\"ls\") lineStream\n```\n\n\u306a\u3069\u3068\u3084\u308b\u3068 `Stream[String]` \u3068\u3044\u3046\u306e\u304c\u5f97\u3089\u308c\u308b[\u3089\u3057\u3044](http://www.scala-lang.org/api/2.11.1/index.html#scala.sys.process.ProcessBuilder)\u3002\n\n\u3053\u308c\u3068 [`Enumerator.fromStream`](https://www.playframework.com/documentation/2.3.x/api/scala/index.html#play.api.libs.iteratee.Enumerator$) \u3068\u3044\u3046\u306e\u3092\u7d44\u307f\u5408\u308f\u305b\u3089\u308c\u308b\u306e\u304b\u3068\u601d\u3044\u304d\u3084\u3001`Enumerator.fromStream` \u306fJava\u306eInputStream\u306e\u3053\u3068\u3067\u3042\u3063\u3066Scala\u3067\u3044\u3046\u3068\u3053\u308d\u306eStream\u3068\u306f\u5225\u7269\u3060\u305d\u3046\u306a\u3002\n\n\u7d50\u8ad6\u304b\u3089\u8a00\u3046\u3068\u3001\u3053\u3093\u306a\u3075\u3046\u306b\u3084\u3063\u305f\u3002\n\n```scala\nobject ProcessEnumerator {\n  def apply(process: ProcessBuilder): Enumerator[Array[Byte]] = {\n    val in = new PipedInputStream()\n    val out = new PipedOutputStream(in)\n    Future(process.#>(out).run())\n    Enumerator.fromStream(in)\n  }\n}\n```\n\n\u3053\u308c\u3067\u30b3\u30de\u30f3\u30c9\u306e\u5b9f\u884c\u7d50\u679c\u304cEnumerator\u306b\u306a\u308a\u3001Content-Encoding: chunked\u3067\u9001\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\n\u3082\u3057\u304b\u3057\u305f\u3089\n\n```scala\nEnumerator.outputStream { out => Future(process.#>(out).run()) }\n```\n\n\u3068\u3044\u3046\u624b\u3082\u3042\u3063\u305f\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u8a66\u3057\u3066\u306a\u3044\u306e\u3067\u308f\u304b\u3089\u306a\u3044\u3002\n\n\uff08\u3055\u3089\u3063\u3068\u66f8\u3044\u3066\u3044\u308b\u304c\u3001\u3053\u3053\u306b\u81f3\u308b\u307e\u3067Process\u3068ProcessBuilder\u306e\u3053\u3068\u3084Enumerator\u3068\u304bStream\u3068InputStream\u306b\u3064\u3044\u3066\u3060\u3044\u3076\u8abf\u3079\u305f\uff09\n\n### \u30cf\u30de\u308a\u3069\u3053\u308d\n\n\u4e16\u306e\u4e2d\u306b\u306f `Content-Encoding: chunked` \u3092\u304d\u3061\u3093\u3068\u6271\u3048\u306a\u3044\u30d7\u30ed\u30ad\u30b7\u304c\u3042\u3063\u3066\u3001nginx\u3067\u3059\u3089\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\uff08\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u66f8\u304b\u306a\u3044\u3068\uff09\u3044\u3051\u306a\u3044\u3002\n\n\u30d7\u30ed\u30ad\u30b7\u3067\u30d0\u30c3\u30d5\u30a1\u30ea\u30f3\u30b0\u3055\u308c\u308b\u30b1\u30fc\u30b9\u3082\u3042\u308b\u3002Play\u304b\u3089\u306f\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u3057\u3066\u3044\u308b\u3064\u3082\u308a\u306a\u306e\u306b\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u306f\u5168\u7136\u6d41\u308c\u3066\u3053\u306a\u3044\u30b1\u30fc\u30b9\u3002\n\n\u3042\u3068\u30cf\u30de\u3063\u305f\u306e\u304c\u3001UNIX\u306e\u30b3\u30de\u30f3\u30c9\u306f **\u30bf\u30fc\u30df\u30ca\u30eb\u51fa\u529b\u3067\u306a\u3044\u5834\u5408\u306f** 4096\u30d0\u30a4\u30c8\u305a\u3064\u30d0\u30c3\u30d5\u30a1\u30ea\u30f3\u30b0\u3055\u308c\u308b\u3002\u30bf\u30fc\u30df\u30ca\u30eb\u51fa\u529b\u306e\u5834\u5408\u306f\u884c\u30d0\u30c3\u30d5\u30a1\u306a\u306e\u3067\u3061\u3083\u3093\u3068\u52d5\u3044\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u3066\u3082\u3001\u30a6\u30a7\u30d6\u3092\u4ecb\u3059\u308b\u3068\u306a\u305c\u304b\u8a70\u307e\u308b\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308b\u3002\u3053\u308c\u306flibc\u30ec\u30d9\u30eb\u306e\u554f\u984c\u3067\u3001\u307e\u3063\u3068\u3046\u306a\u65b9\u6cd5\u3067\u89e3\u6c7a\u3059\u308b\u306e\u306f\u3051\u3063\u3053\u3046\u305f\u3044\u3078\u3093\u3002\u691c\u7d22\u3057\u3066\u307f\u308b\u3068\u3001[\u30bf\u30fc\u30df\u30ca\u30eb\u51fa\u529b\u306b\u898b\u305b\u304b\u3051\u308b\u305f\u3081\u306e\u30b3\u30de\u30f3\u30c9\u4f7f\u3046\u65b9\u6cd5](http://stackoverflow.com/questions/11337041/force-line-buffering-of-stdout-when-piping-to-tee)\u306a\u3069\u304c\u898b\u3064\u304b\u3063\u305f\u3002\u81ea\u5206\u306fscript\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3063\u305f\u3002Mac, Linux\u4e21\u5bfe\u5fdc\u306a\u306e\u3068\u3001\u6a19\u6e96\u30a8\u30e9\u30fc\u51fa\u529b\u3092\u6a19\u6e96\u51fa\u529b\u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3057\u3066\u304f\u308c\u308b\u305f\u3081\u3002\n\n## WebSocket\u5bfe\u5fdc\n\n\u30d7\u30ed\u30ad\u30b7\u306e\u554f\u984c\u304c\u3042\u3063\u305f\u306e\u3067`Content-Encoding: chunked`\u306f\u8ae6\u3081\u3066WebSocket\u3067\u3084\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\n\u5e78\u3044\u306a\u3053\u3068\u306b\u3001Enumerator\u306b\u306a\u3063\u3066\u3057\u307e\u3048\u3070WebSocket\u306b\u3059\u308b\u306e\u306f[\u7c21\u5358](https://www.playframework.com/documentation/2.3.x/ScalaWebSockets)\u3002\n\n\u2026\u3068\u601d\u3063\u3066\u305f\u6642\u671f\u304c\u50d5\u306b\u3082\u3042\u308a\u307e\u3057\u305f\u3002\n\n\u554f\u984c\u306f\u3001`Enumerator.fromStream`\u3067\u3067\u304d\u308bEnumerator\u306f\u3001 `Enumerator[Array[Byte]]` \u3060\u3068\u3044\u3046\u3053\u3068\u3002\n\n\u3053\u308c\u3060\u3068\u3001WebSocket\u306eBinaryFrame\u3067\u9001\u3089\u308c\u3061\u3083\u3046\u306e\u3067\u3001JavaScript\u304b\u3089\u306fBlob\u3084ArrayBuffer\u3067\u3057\u304b\u53d7\u3051\u53d6\u308c\u306a\u3044\u3002JS\u3067Blob\u304b\u3089String\u306b\u5909\u63db\u3059\u308b\u306e\u306f\u7d50\u69cb\u9762\u5012\u306a\u306e\u3067\u3001\u304d\u3061\u3093\u3068\u30c6\u30ad\u30b9\u30c8\u3068\u3057\u3066\u8fd4\u3057\u305f\u3044\u3002\n\n`Enumerator[Array[Byte]]` \u3092 `Enumerator[String]` \u306b\u5909\u63db\u3067\u304d\u308b\u30e9\u30c3\u30d1\u30fc\u3092\u66f8\u3044\u305f\u3089\u826f\u304b\u3063\u305f\u306e\u3060\u3051\u3069\u3001\u305d\u3053\u307e\u3067\u306f\u8abf\u3079\u304d\u308c\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u30b3\u30de\u30f3\u30c9\u306e\u51fa\u529b\u3092\u884c\u3054\u3068\u306b\u8aad\u3093\u3067\u51fa\u529b\u3059\u308b\u3068\u3044\u3046\u65b9\u5411\u3067\u3084\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\n```scala\nobject ProcessEnumerator {\n  def apply(process: ProcessBuilder): Enumerator[String] = {\n    val in = new PipedInputStream()\n    val out = new PipedOutputStream(in)\n    Future(process.#>(out).run())\n\n    val reader = new BufferedReader(new InputStreamReader(in, \"UTF-8\"))\n\n    Enumerator.fromCallback1[String](_ => Future {\n      reader.readLine match {\n        case line: String => Some(line + \"\\n\")\n        case _ => None\n      }\n    }, { () => // oncomplete\n      in.close()\n    })\n  }\n}\n```\n\n`Enumerator.fromCallback1`\u3068\u3044\u3046\u3001\u7b2c\u4e00\u5f15\u6570\u306e\u95a2\u6570\u3092\u3072\u305f\u3059\u3089\u5b9f\u884c\u3057\u3066\u304f\u308c\u3066Enumerator\u3092\u4f5c\u308c\u308b\u3082\u306e\u304c\u3042\u3063\u305f\u3002\n\n\u8a73\u3057\u304f\u306f[\u3053\u306e\u3042\u305f\u308a](http://fits.hatenablog.com/entry/20130216/1361027691)\u3092\u3069\u3046\u305e\u3002\n\n## \u8ffd\u8a18\n\n\u8272\u3005\u8a66\u884c\u932f\u8aa4\u3057\u3066\u305f\u3089\u3082\u3063\u3068\u7c21\u5358\u306b\u3067\u304d\u305f\u3002\n\n```scala\nobject ProcessEnumerator {\n  def apply(process: ProcessBuilder): Enumerator[String] = {\n    Enumerator.enumerate[String](\n      process.lineStream_!(ProcessLogger(line => ())).map { line => line + \"\\n\" }\n    )\n  }\n}\n```\n", "tags": ["Play", "Scala"]}