{"context": " More than 1 year has passed since last update.Originally posted in http://aespinosa.github.io/blog/2014-11-01-mpich3-over-docker.html.\nI will use this page as a notepad for my thoughts and notes for participating in\nDocker's Global Hackday event in Tokyo [1].\nI'll be using MPICH [2] and try to run an mpi-based app over containers.  Code\nwill be posted on Github\n(aespinosa/mpich-docker)\n\nUpdate: 2014-11-03 15:05\nWorking demo in http://mpich-demo.allan.wikonec.com.  Click on the\nLaunch_Node job first. Then launch all the compute nodes by clicking each\njob's Build button.\n\nWorkflow\n\nBuilding dependencies for a lean docker container\nhttps://packages.debian.org/jessie/mpich.\nPrepare the docker image with the your MPI program.  I write a sample in [4].\n\nmpif90 /src/hello.f90 -o /app/hello\n\n\n\nRunning mpi\nTwo parts of an mpich run [3]:\n\nLaunch node runs UI Process via mpiexec.  This listens to a control port\n\ndocker run --rm=true \\\n-e MPIEXEC_PORT_RANGE=1000:1000 --expose=1000 \\\n-h master --name master test \\\nmpiexec -hosts one,two  -launcher manual -n 2 /hello\n\nCompute node runs Proxy Executable and connects to UI Process (where the\njobs are actually run) via hydra_pmi_proxy\n\n$ docker run --rm=true --link master:master -h one test \\\nhydra_pmi_proxy --control-port master:1000 \\\n--rmk user --launcher manual --demux poll --pgid 0 --retries 10 --usize -2 \\\n--proxy-id 0\n$ docker run --rm=true --link master:master -h two test \\\nhydra_pmi_proxy --control-port master:1000 \\\n--rmk user --launcher manual --demux poll --pgid 0 --retries 10 --usize -2 \\\n--proxy-id 1\n\n\n\nNext steps\nWrite a custom hydra launcher instead of the manual one. Maybe a worthwhile\nproject to work one.\n\nAbstract write-up for Hackday entry\nI demonstrate how to run a distributed Fortran application in Docker. For this\ndemo, I will show how to build and run a Fortran90 program that computes the\nvalue of Pi using a distributed monte carlo computation implemented in MPI.  I\ngo into the details on how the mpich implementation of MPI works and how to get\nit running on Docker by descriptiong mpich (hydra)'s architecture.  I then show\nthe  sourcecode contains in GitHub that Dockerfiles to build the application\nthat uses the mpich MPI implementaton.\nFull description of this hackday entry is in\nhttp://aespinosa.github.io/blog/2014-11-01-mpich3-over-docker.html.\n\nReferences\n\nhttp://connpass.com/event/9491/\nhttp://www.mpich.org\nhttp://wiki.mpich.org/mpich/index.php/Hydra_Process_Management_Framework\nhttps://github.com/aespinosa/mpich-docker/tree/master/test\n\nOriginally posted in <http://aespinosa.github.io/blog/2014-11-01-mpich3-over-docker.html>.\n\nI will use this page as a notepad for my thoughts and notes for participating in\nDocker's Global Hackday event in Tokyo [1].\n\nI'll be using MPICH [2] and try to run an mpi-based app over containers.  Code\nwill be posted on Github\n([aespinosa/mpich-docker](http://github.com/aespinosa/mpich-docker))\n\n## Update: 2014-11-03 15:05\n\nWorking demo in <http://mpich-demo.allan.wikonec.com>.  Click on the\n`Launch_Node` job first. Then launch all the compute nodes by clicking each\njob's `Build` button.\n\n\n## Workflow\n\n* Building dependencies for a lean docker container\n <https://packages.debian.org/jessie/mpich>.\n\n* Prepare the docker image with the your MPI program.  I write a sample in [4].\n```\nmpif90 /src/hello.f90 -o /app/hello\n```\n\n## Running mpi\n\nTwo parts of an mpich run [3]:\n\n1. Launch node runs *UI Process* via mpiexec.  This listens to a *control port*\n```\ndocker run --rm=true \\\n  -e MPIEXEC_PORT_RANGE=1000:1000 --expose=1000 \\\n  -h master --name master test \\\n  mpiexec -hosts one,two  -launcher manual -n 2 /hello\n```\n\n2. Compute node runs *Proxy Executable* and connects to UI Process (where the\n   jobs are actually run) via `hydra_pmi_proxy`\n```\n$ docker run --rm=true --link master:master -h one test \\\n  hydra_pmi_proxy --control-port master:1000 \\\n  --rmk user --launcher manual --demux poll --pgid 0 --retries 10 --usize -2 \\\n  --proxy-id 0\n$ docker run --rm=true --link master:master -h two test \\\n  hydra_pmi_proxy --control-port master:1000 \\\n  --rmk user --launcher manual --demux poll --pgid 0 --retries 10 --usize -2 \\\n  --proxy-id 1\n```\n\n## Next steps\n\nWrite a custom hydra launcher instead of the manual one. Maybe a worthwhile\nproject to work one.\n\n## Abstract write-up for Hackday entry\n\nI demonstrate how to run a distributed Fortran application in Docker. For this\ndemo, I will show how to build and run a Fortran90 program that computes the\nvalue of Pi using a distributed monte carlo computation implemented in MPI.  I\ngo into the details on how the mpich implementation of MPI works and how to get\nit running on Docker by descriptiong mpich (hydra)'s architecture.  I then show\nthe  sourcecode contains in GitHub that Dockerfiles to build the application\nthat uses the mpich MPI implementaton.\n\nFull description of this hackday entry is in\n<http://aespinosa.github.io/blog/2014-11-01-mpich3-over-docker.html>.\n\n## References\n\n1. <http://connpass.com/event/9491/>\n2. <http://www.mpich.org>\n3. <http://wiki.mpich.org/mpich/index.php/Hydra_Process_Management_Framework>\n4. <https://github.com/aespinosa/mpich-docker/tree/master/test>\n", "tags": ["docker", "MPI", "Fortran"]}