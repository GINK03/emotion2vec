{"context": "Alamofire\u3067\u914d\u5217\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u3084POST\u306e\u30dc\u30c7\u30a3\u306b\u542b\u3081\u308b\u3068\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u540d\u524d\u306e\u672b\u5c3e\u306b\u62ec\u5f27\u304c\u4ed8\u304d\u307e\u3059\u304c\u3001API\u306e\u4ed5\u69d8\u306b\u3088\u3063\u3066\u306f\u62ec\u5f27\u306e\u306a\u3044\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u9001\u308a\u305f\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\nfoo[]=bar1&foo[]=bar2\n\u3053\u306e\u6295\u7a3f\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u62ec\u5f27\u304c\u7121\u3044\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u9001\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\nfoo=bar1&foo=bar2\n\n\u89e3\u6c7a\u65b9\u6cd5\nParameterEncoding\u3092\u5229\u7528\u3057\u3066\u3001\u30ea\u30af\u30a8\u30b9\u30c8URL\u306b\u542b\u307e\u308c\u308b\u62ec\u5f27\u306e\u6587\u5b57\u3092\u7f6e\u63db\u3059\u308b\u3053\u3068\u3067\u89e3\u6c7a\u3067\u304d\u307e\u3059\u3002\n\nGET\u306e\u5834\u5408\nlet parameterEncoding = ParameterEncoding.Custom { requestConvertible, parameters in\n    let (mutableRequest, error) = ParameterEncoding.URL.encode(requestConvertible, parameters: parameters)\n    mutableRequest.URL = NSURL(string: mutableRequest.URLString.stringByReplacingOccurrencesOfString(\"%5B%5D=\", withString: \"=\"))\n    return (mutableRequest, error)\n}\n\nAlamofire.request(.GET, \"http://example.com\", parameters: [\"foo\": [\"bar1\", \"bar2\"]], encoding: parameterEncoding)\n\n\n\nPOST\u306e\u5834\u5408\nlet parameterEncoding = ParameterEncoding.Custom { requestConvertible, parameters in\n    let (mutableRequest, error) = ParameterEncoding.URL.encode(requestConvertible, parameters: parameters)\n    let httpBody = NSString(data: mutableRequest.HTTPBody!, encoding: NSUTF8StringEncoding)!\n    mutableRequest.HTTPBody = httpBody.stringByReplacingOccurrencesOfString(\"%5B%5D=\", withString: \"=\").dataUsingEncoding(NSUTF8StringEncoding)\n    return (mutableRequest, error)\n}\n\nAlamofire.request(.POST, \"http://example.com\", parameters: [\"foo\": [\"bar1\", \"bar2\"]], encoding: parameterEncoding)\n\n\n\n\u62ec\u5f27\u304c\u4ed8\u304f\u5834\u5408\u3068\u4ed8\u304b\u306a\u3044\u5834\u5408\u304c\u3042\u308b\u80cc\u666f\n\u3053\u308c\u306fRFC\u3067\u914d\u5217\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u304c\u5b9a\u3081\u3089\u308c\u3066\u3044\u306a\u3044\u304b\u3089\u3067\u3059\u3002Alamofire\u306eREADME\u306b\u3082\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a18\u8f09\u304c\u3042\u308a\u3001Alamofire\u306f[]\u3092\u4ed8\u3051\u308b\u65b9\u91dd\u3092\u3068\u3063\u3066\u3044\u307e\u3059\u3002\n\nSince there is no published specification for how to encode collection types, Alamofire follows the convention of appending [] to the key for array values (foo[]=1&foo[]=2), and appending the key surrounded by square brackets for nested dictionary values (foo[bar]=baz).\n\n\n\u53c2\u8003\nhttps://github.com/Alamofire/Alamofire/issues/965\nAlamofire\u3067\u914d\u5217\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u3084POST\u306e\u30dc\u30c7\u30a3\u306b\u542b\u3081\u308b\u3068\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u540d\u524d\u306e\u672b\u5c3e\u306b\u62ec\u5f27\u304c\u4ed8\u304d\u307e\u3059\u304c\u3001API\u306e\u4ed5\u69d8\u306b\u3088\u3063\u3066\u306f\u62ec\u5f27\u306e\u306a\u3044\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u9001\u308a\u305f\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n\n`foo[]=bar1&foo[]=bar2`\n\n\u3053\u306e\u6295\u7a3f\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u62ec\u5f27\u304c\u7121\u3044\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u9001\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n`foo=bar1&foo=bar2`\n\n## \u89e3\u6c7a\u65b9\u6cd5\n\nParameterEncoding\u3092\u5229\u7528\u3057\u3066\u3001\u30ea\u30af\u30a8\u30b9\u30c8URL\u306b\u542b\u307e\u308c\u308b\u62ec\u5f27\u306e\u6587\u5b57\u3092\u7f6e\u63db\u3059\u308b\u3053\u3068\u3067\u89e3\u6c7a\u3067\u304d\u307e\u3059\u3002\n\n``` swift:GET\u306e\u5834\u5408\nlet parameterEncoding = ParameterEncoding.Custom { requestConvertible, parameters in\n    let (mutableRequest, error) = ParameterEncoding.URL.encode(requestConvertible, parameters: parameters)\n    mutableRequest.URL = NSURL(string: mutableRequest.URLString.stringByReplacingOccurrencesOfString(\"%5B%5D=\", withString: \"=\"))\n    return (mutableRequest, error)\n}\n\nAlamofire.request(.GET, \"http://example.com\", parameters: [\"foo\": [\"bar1\", \"bar2\"]], encoding: parameterEncoding)\n```\n\n``` swift:POST\u306e\u5834\u5408\nlet parameterEncoding = ParameterEncoding.Custom { requestConvertible, parameters in\n    let (mutableRequest, error) = ParameterEncoding.URL.encode(requestConvertible, parameters: parameters)\n    let httpBody = NSString(data: mutableRequest.HTTPBody!, encoding: NSUTF8StringEncoding)!\n    mutableRequest.HTTPBody = httpBody.stringByReplacingOccurrencesOfString(\"%5B%5D=\", withString: \"=\").dataUsingEncoding(NSUTF8StringEncoding)\n    return (mutableRequest, error)\n}\n\nAlamofire.request(.POST, \"http://example.com\", parameters: [\"foo\": [\"bar1\", \"bar2\"]], encoding: parameterEncoding)\n```\n\n## \u62ec\u5f27\u304c\u4ed8\u304f\u5834\u5408\u3068\u4ed8\u304b\u306a\u3044\u5834\u5408\u304c\u3042\u308b\u80cc\u666f\n\n\u3053\u308c\u306fRFC\u3067\u914d\u5217\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u304c\u5b9a\u3081\u3089\u308c\u3066\u3044\u306a\u3044\u304b\u3089\u3067\u3059\u3002Alamofire\u306e[README](https://github.com/Alamofire/Alamofire/blob/dae3ed1b22d33c28de0f50e1271fb4e0d54ad44a/README.md)\u306b\u3082\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a18\u8f09\u304c\u3042\u308a\u3001Alamofire\u306f`[]`\u3092\u4ed8\u3051\u308b\u65b9\u91dd\u3092\u3068\u3063\u3066\u3044\u307e\u3059\u3002\n\n>Since there is no published specification for how to encode collection types, Alamofire follows the convention of appending [] to the key for array values (foo[]=1&foo[]=2), and appending the key surrounded by square brackets for nested dictionary values (foo[bar]=baz).\n\n## \u53c2\u8003\n\nhttps://github.com/Alamofire/Alamofire/issues/965\n", "tags": ["Swift", "iOS", "Alamofire"]}