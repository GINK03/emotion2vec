{"context": " More than 1 year has passed since last update.\n\n\u7d50\u57ce\u6d69\u3055\u3093\u306edeepest\u554f\u984c\u89e3\u304d\u307e\u3057\u305f\u3002\nhttps://codeiq.jp/ace/yuki_hiroshi/q411\n\n\u8a55\u4fa15\u30d0\u30c3\u30b8\u30ad\u30bf\u30b3\u30ec\uff01\nhttps://codeiq.jp/achievement/34\n\n\u3069\u3046\u3084\u3063\u3066\u89e3\u3044\u305f\u304b\n\u30fb\u6700\u77ed\u7d4c\u8def\u3092\u6c42\u3081\u308b\u554f\u984c\u3067\u306a\u304b\u3063\u305f\n\u30fbWebAPI\u3092\u4f7f\u3063\u3066\u6b21\u306e\u76f4\u884c\u4fbf\u3092\u63a2\u3059\u3068\u3044\u3046\u554f\u984c\u306e\u6027\u8cea\u4e0a\u3001\u5927\u91cf\u5206\u5c90\u304c\u6f5c\u3093\u3067\u3044\u308b\u3068\u4e88\u60f3\u3057\u3066\u3001\u4e0b\u8a18\u306e\u679d\u5208\u308a\u3092\u5b9f\u65bd\n\u3000\u3000* \u5e45\u512a\u5148\u63a2\u7d22\u3067\u30011\u5730\u70b9\u304b\u3089\u5206\u5c90\u3059\u308b\u6570\u3092100\u307e\u3067\u3068\u3059\u308b\n\u3000\u3000* \u3059\u3067\u306b\u4ed6\u306e\u63a2\u7d22\u7d4c\u8def\u3067\u767a\u898b\u3055\u308c\u305f\u661f\u306f\u3001\u4e8c\u5ea6\u901a\u3089\u306a\u3044\u3088\u3046\u306b\u3059\u308b\n\u30fb\u3064\u3044\u3067\u306b\u76f4\u884c\u4fbf\u306e\u30de\u30c3\u30d7\u3092\u30d5\u30a1\u30a4\u30eb\u30ad\u30e3\u30c3\u30b7\u30e5\u3059\u308b\u3088\u3046\u306b\n\u3084\u3063\u305f\u3053\u3068\u306f\u3059\u3052\u30fc\u30b7\u30f3\u30d7\u30eb\u3067\u3057\u305f\u3002\n\n\u30b3\u30fc\u30c9\n\nstar-flight.py\n'''\nCreated on 2013/07/31\n\n@author: nubilum\n'''\nimport urllib2\nimport time\nimport os.path\n\nlimit   = 5\nstart   = 5426528869786\ndeep    = 4363616111476\ndeeper  = 5092488161056\ndeepest = 8838746292440\ngoal_points  = [start, deep, deeper, deepest]\ncache_path   = 'cache.txt'\ncache = {}\nalready = {}\n\ndef search(start, goal):\n    global cache\n    global already\n    load_cache()\n    now = start\n    queue = []\n    idx = 0\n    counter = 0\n    queue.append([[start]])\n    while True:\n        current = []\n        routes_list = queue[idx]\n        for routes in routes_list:\n            print routes\n            last = routes[-1]\n            if last in cache:\n                pathes = cache[last]\n                for path in pathes:\n                    if path == 0:\n                        break\n                    if path in already:\n                        continue\n                    already[path] = 1\n                    next = routes[:]\n                    next.append(path)\n                    current.append(next)\n                    if path == goal:\n                        return next\n            else:\n                next_pathes = []\n                for i in xrange(0, 100):\n                    response = get_response(last, i)\n                    counter += 1\n                    if response == 0:\n                        break\n                    if response in already:\n                        continue\n                    already[response] = 1\n                    next_pathes.append(response)\n                    next = routes[:]\n                    next.append(response)\n                    current.append(next)\n                    if response == goal:\n                        return next\n                    if counter % limit == 0:\n                        time.sleep(0.1)\n                write_cache(last, next_pathes)\n        now = next\n        queue.append(current)\n        idx += 1\n\ndef write_cache(start, path):\n    global cache_path\n    f = open(cache_path, \"a\")\n    f.write(str(start) + \":\" + ','.join([ str(p) for p in path ]) + \"\\n\")\n    f.close()\n\ndef load_cache():\n    global cache\n    global cache_path\n    if os.path.exists(cache_path) ==False:\n        return\n    f = open(cache_path, \"r\")\n    data = f.read()\n    f.close()\n    for line in data.split('\\n'):\n        if line == '': continue\n        start, path  = line.split(':')\n        cache[int(start)] = [int(p) if len(p) > 0 else 0 for p in path.split(',')]\n\ndef get_response(id, nth):\n    response = urllib2.urlopen('http://133.242.134.37/deepest.cgi?id=%d&nth=%d' % (id, nth))\n    return int(response.read().rstrip('rn'))\n\ndef main():\n    global goal_points\n    result = []\n    for i in xrange(0, len(goal_points) - 1):\n        answer_routes = search(goal_points[i], goal_points[i + 1])\n        print \"answer:\", answer_routes\n        for point in answer_routes:\n            result.append(point)\n    print \",\".join([str(p) for p in result])\n    print \"ENV: Python\"\n\nif __name__ == '__main__':\n    main()\n\n\n# \u7d50\u57ce\u6d69\u3055\u3093\u306edeepest\u554f\u984c\u89e3\u304d\u307e\u3057\u305f\u3002\nhttps://codeiq.jp/ace/yuki_hiroshi/q411\n\n## \u8a55\u4fa15\u30d0\u30c3\u30b8\u30ad\u30bf\u30b3\u30ec\uff01\nhttps://codeiq.jp/achievement/34\n\n## \u3069\u3046\u3084\u3063\u3066\u89e3\u3044\u305f\u304b\n\u30fb\u6700\u77ed\u7d4c\u8def\u3092\u6c42\u3081\u308b\u554f\u984c\u3067\u306a\u304b\u3063\u305f\n\u30fbWebAPI\u3092\u4f7f\u3063\u3066\u6b21\u306e\u76f4\u884c\u4fbf\u3092\u63a2\u3059\u3068\u3044\u3046\u554f\u984c\u306e\u6027\u8cea\u4e0a\u3001\u5927\u91cf\u5206\u5c90\u304c\u6f5c\u3093\u3067\u3044\u308b\u3068\u4e88\u60f3\u3057\u3066\u3001\u4e0b\u8a18\u306e\u679d\u5208\u308a\u3092\u5b9f\u65bd\n\u3000\u3000* \u5e45\u512a\u5148\u63a2\u7d22\u3067\u30011\u5730\u70b9\u304b\u3089\u5206\u5c90\u3059\u308b\u6570\u3092100\u307e\u3067\u3068\u3059\u308b\n\u3000\u3000* \u3059\u3067\u306b\u4ed6\u306e\u63a2\u7d22\u7d4c\u8def\u3067\u767a\u898b\u3055\u308c\u305f\u661f\u306f\u3001\u4e8c\u5ea6\u901a\u3089\u306a\u3044\u3088\u3046\u306b\u3059\u308b\n\u30fb\u3064\u3044\u3067\u306b\u76f4\u884c\u4fbf\u306e\u30de\u30c3\u30d7\u3092\u30d5\u30a1\u30a4\u30eb\u30ad\u30e3\u30c3\u30b7\u30e5\u3059\u308b\u3088\u3046\u306b\n\n\u3084\u3063\u305f\u3053\u3068\u306f\u3059\u3052\u30fc\u30b7\u30f3\u30d7\u30eb\u3067\u3057\u305f\u3002\n\n## \u30b3\u30fc\u30c9\n\n```python:star-flight.py\n'''\nCreated on 2013/07/31\n\n@author: nubilum\n'''\nimport urllib2\nimport time\nimport os.path\n\nlimit   = 5\nstart   = 5426528869786\ndeep    = 4363616111476\ndeeper  = 5092488161056\ndeepest = 8838746292440\ngoal_points  = [start, deep, deeper, deepest]\ncache_path   = 'cache.txt'\ncache = {}\nalready = {}\n\ndef search(start, goal):\n    global cache\n    global already\n    load_cache()\n    now = start\n    queue = []\n    idx = 0\n    counter = 0\n    queue.append([[start]])\n    while True:\n        current = []\n        routes_list = queue[idx]\n        for routes in routes_list:\n            print routes\n            last = routes[-1]\n            if last in cache:\n                pathes = cache[last]\n                for path in pathes:\n                    if path == 0:\n                        break\n                    if path in already:\n                        continue\n                    already[path] = 1\n                    next = routes[:]\n                    next.append(path)\n                    current.append(next)\n                    if path == goal:\n                        return next\n            else:\n                next_pathes = []\n                for i in xrange(0, 100):\n                    response = get_response(last, i)\n                    counter += 1\n                    if response == 0:\n                        break\n                    if response in already:\n                        continue\n                    already[response] = 1\n                    next_pathes.append(response)\n                    next = routes[:]\n                    next.append(response)\n                    current.append(next)\n                    if response == goal:\n                        return next\n                    if counter % limit == 0:\n                        time.sleep(0.1)\n                write_cache(last, next_pathes)\n        now = next\n        queue.append(current)\n        idx += 1\n\ndef write_cache(start, path):\n    global cache_path\n    f = open(cache_path, \"a\")\n    f.write(str(start) + \":\" + ','.join([ str(p) for p in path ]) + \"\\n\")\n    f.close()\n\ndef load_cache():\n    global cache\n    global cache_path\n    if os.path.exists(cache_path) ==False:\n        return\n    f = open(cache_path, \"r\")\n    data = f.read()\n    f.close()\n    for line in data.split('\\n'):\n        if line == '': continue\n        start, path  = line.split(':')\n        cache[int(start)] = [int(p) if len(p) > 0 else 0 for p in path.split(',')]\n\ndef get_response(id, nth):\n    response = urllib2.urlopen('http://133.242.134.37/deepest.cgi?id=%d&nth=%d' % (id, nth))\n    return int(response.read().rstrip('rn'))\n\ndef main():\n    global goal_points\n    result = []\n    for i in xrange(0, len(goal_points) - 1):\n        answer_routes = search(goal_points[i], goal_points[i + 1])\n        print \"answer:\", answer_routes\n        for point in answer_routes:\n            result.append(point)\n    print \",\".join([str(p) for p in result])\n    print \"ENV: Python\"\n\nif __name__ == '__main__':\n    main()\n```\n", "tags": ["codeiq", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0", "Python2.6"]}