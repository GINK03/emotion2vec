{"context": "Android\u306e\u30c6\u30b9\u30c8\u3092\u66f8\u3044\u3066\u308b\u3068\u3060\u3093\u3060\u3093\u3054\u3061\u3083\u3054\u3061\u3083\u3057\u3066\u304f\u308b\n\n\u6c5a\u304f\u306a\u308b\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u306e\u4f8b\npublic class HogeUnitTest {\n    @Test\n    public void hogeTest() {\n        HogeStatus hogeStatus = new HogeStatus();\n        assertTrue(hogeStatus.isRunning());\n        assertFalse(hogeStatus.isCanceled());\n        //cancel\n        hogeStatus.cancel();\n        assertFalse(hogeStatus.isRunning());\n        assertTrue(hogeStatus.isCanceled());\n        //finish\n        hogeStatus = new HogeStatus();\n        hogeStatus.finish();\n        assertFalse(hogeStatus.isRunning());\n        assertFalse(hogeStatus.isCanceled());\n    }\n    @Test\n    public void mogeTest() {\n        Moge moge = new Moge();\n        assertNull(moge.someProperty1);\n        assertNotNull(moge.someProperty2);\n        //calculate\n        moge.calculate()\n        assertEquals(moge.value, 10);\n    }\n}\n\n\n\u30b3\u30e1\u30f3\u30c8\u3068\u304b\u3092\u3064\u3051\u3066\u9811\u5f35\u3063\u3066\u307f\u3066\u3082\u6c5a\u304f\u306a\u308b...\nRspec\u306edescribe\u307f\u305f\u3044\u306b\u30b0\u30eb\u30fc\u30d7\u5316\u3068\u304b\u51fa\u6765\u305f\u3089\u6357\u308b\u306e\u306b...\u305d\u3046\u601d\u3063\u305f\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u304b\uff1f  \nEnclosed\u3092\u4f7f\u3046\u3053\u3068\u3067\u30b7\u30e5\u30c3\u3068\u3057\u305f\u611f\u3058\u306b\u30c6\u30b9\u30c8\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff01  \n\n\u7dba\u9e97\u306b\u306a\u3063\u305f\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u306e\u4f8b\n@RunWith(Enclosed.class)\npublic class HogeUnitTest {\n    @RunWith(CustomRobolectricTestRunner.class) //\u4f8b\u3067\u306f\u5fc5\u8981\u306a\u3044\u3051\u3069\u5fc5\u8981\u306a\u5834\u5408\u306f\u3053\u3053\u306b\u66f8\u304f\n    @Config(constants = BuildConfig.class)\n    public static class HogeTest {\n        @Test\n        public void start() {\n            // given\n            HogeStatus hogeStatus = new HogeStatus();\n            // then\n            assertTrue(hogeStatus.isRunning());\n            assertFalse(hogeStatus.isCanceled());\n        }\n        @Test\n        public void cancel() {\n            // given\n            HogeStatus hogeStatus = new HogeStatus();\n            // when\n            hogeStatus.cancel();\n            // then\n            assertFalse(hogeStatus.isRunning());\n            assertTrue(hogeStatus.isCanceled());\n        }\n        @Test\n        public void finish() {\n            // given\n            HogeStatus hogeStatus = new HogeStatus();\n            // when\n            hogeStatus.finish();\n            // then\n            assertFalse(hogeStatus.isRunning());\n            assertFalse(hogeStatus.isCanceled());\n        }\n    }\n    public static class MogeTest {\n        @Test\n        public void calculate() {\n            // given\n            Moge moge = new Moge();\n            // when\n            moge.calculate()\n            // then\n            assertNull(moge.someProperty1);\n            assertNotNull(moge.someProperty2);\n            assertEquals(moge.value, 10);\n        }\n    }\n}\n\n\n\u3053\u3093\u306a\u98a8\u306b\u66f8\u304f\u3068\u5b9f\u884c\u7d50\u679c\u3082\u3044\u3044\u611f\u3058\u306b\u5206\u5272\u3055\u308c\u3066\u89e3\u308a\u3084\u3059\u3044&&\u30e2\u30c1\u30d9\u30fc\u30b7\u30e7\u30f3\u30a2\u30c3\u30d7\u306b\u7e4b\u304c\u308b\u306e\u3067Enclosed\u304a\u3059\u3059\u3081\u3067\u3059\nAndroid\u306e\u30c6\u30b9\u30c8\u3092\u66f8\u3044\u3066\u308b\u3068\u3060\u3093\u3060\u3093\u3054\u3061\u3083\u3054\u3061\u3083\u3057\u3066\u304f\u308b\n\n```java:\u6c5a\u304f\u306a\u308b\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u306e\u4f8b\npublic class HogeUnitTest {\n    @Test\n    public void hogeTest() {\n        HogeStatus hogeStatus = new HogeStatus();\n        assertTrue(hogeStatus.isRunning());\n        assertFalse(hogeStatus.isCanceled());\n        //cancel\n        hogeStatus.cancel();\n        assertFalse(hogeStatus.isRunning());\n        assertTrue(hogeStatus.isCanceled());\n        //finish\n        hogeStatus = new HogeStatus();\n        hogeStatus.finish();\n        assertFalse(hogeStatus.isRunning());\n        assertFalse(hogeStatus.isCanceled());\n    }\n    @Test\n    public void mogeTest() {\n        Moge moge = new Moge();\n        assertNull(moge.someProperty1);\n        assertNotNull(moge.someProperty2);\n        //calculate\n        moge.calculate()\n        assertEquals(moge.value, 10);\n    }\n}\n```\n\n\u30b3\u30e1\u30f3\u30c8\u3068\u304b\u3092\u3064\u3051\u3066\u9811\u5f35\u3063\u3066\u307f\u3066\u3082\u6c5a\u304f\u306a\u308b...  \nRspec\u306e`describe`\u307f\u305f\u3044\u306b\u30b0\u30eb\u30fc\u30d7\u5316\u3068\u304b\u51fa\u6765\u305f\u3089\u6357\u308b\u306e\u306b...\u305d\u3046\u601d\u3063\u305f\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u304b\uff1f  \n  \n`Enclosed`\u3092\u4f7f\u3046\u3053\u3068\u3067\u30b7\u30e5\u30c3\u3068\u3057\u305f\u611f\u3058\u306b\u30c6\u30b9\u30c8\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff01  \n\n```java:\u7dba\u9e97\u306b\u306a\u3063\u305f\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u306e\u4f8b\n@RunWith(Enclosed.class)\npublic class HogeUnitTest {\n    @RunWith(CustomRobolectricTestRunner.class) //\u4f8b\u3067\u306f\u5fc5\u8981\u306a\u3044\u3051\u3069\u5fc5\u8981\u306a\u5834\u5408\u306f\u3053\u3053\u306b\u66f8\u304f\n    @Config(constants = BuildConfig.class)\n    public static class HogeTest {\n        @Test\n        public void start() {\n            // given\n            HogeStatus hogeStatus = new HogeStatus();\n            // then\n            assertTrue(hogeStatus.isRunning());\n            assertFalse(hogeStatus.isCanceled());\n        }\n        @Test\n        public void cancel() {\n            // given\n            HogeStatus hogeStatus = new HogeStatus();\n            // when\n            hogeStatus.cancel();\n            // then\n            assertFalse(hogeStatus.isRunning());\n            assertTrue(hogeStatus.isCanceled());\n        }\n        @Test\n        public void finish() {\n            // given\n            HogeStatus hogeStatus = new HogeStatus();\n            // when\n            hogeStatus.finish();\n            // then\n            assertFalse(hogeStatus.isRunning());\n            assertFalse(hogeStatus.isCanceled());\n        }\n    }\n    public static class MogeTest {\n        @Test\n        public void calculate() {\n            // given\n            Moge moge = new Moge();\n            // when\n            moge.calculate()\n            // then\n            assertNull(moge.someProperty1);\n            assertNotNull(moge.someProperty2);\n            assertEquals(moge.value, 10);\n        }\n    }\n}\n```\n\n\u3053\u3093\u306a\u98a8\u306b\u66f8\u304f\u3068\u5b9f\u884c\u7d50\u679c\u3082\u3044\u3044\u611f\u3058\u306b\u5206\u5272\u3055\u308c\u3066\u89e3\u308a\u3084\u3059\u3044&&\u30e2\u30c1\u30d9\u30fc\u30b7\u30e7\u30f3\u30a2\u30c3\u30d7\u306b\u7e4b\u304c\u308b\u306e\u3067`Enclosed`\u304a\u3059\u3059\u3081\u3067\u3059\n", "tags": ["Android", "JUnit"]}