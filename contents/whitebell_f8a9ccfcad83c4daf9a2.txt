{"tags": ["C#", "\u30e1\u30e2"], "context": "\nProgram.cs\nusing System;\n\nnamespace EventTest\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var c1 = new Command1();\n            var c2 = new Command2();\n\n            var i1 = new Instance1();\n\n            c1.Execute();\n            c2.Execute();\n\n            Console.ReadLine();\n        }\n    }\n}\n\n\n\nCommandEventArgs.cs\nusing System;\n\nnamespace EventTest\n{\n    public class CommandEventArgs : EventArgs\n    {\n        public new static readonly CommandEventArgs Empty = new CommandEventArgs();\n    }\n}\n\n\n\nAInstance.cs\nusing System;\n\nnamespace EventTest\n{\n    public abstract class AInstance\n    {\n        public abstract int Id { get; }\n    }\n\n    public class Instance1 : AInstance\n    {\n        public Instance1()\n        {\n            Command1.BeginCommand += Command1_BeginCommand;\n        }\n\n        public override int Id => 11;\n\n        private void Command1_BeginCommand(object sender, CommandEventArgs e)\n        {\n            Console.WriteLine(\"Command1.BeginCommand:Instance1\");\n        }\n    }\n}\n\n\n\nACommand.cs\nusing System;\nusing System.Collections.Generic;\n\nnamespace EventTest\n{\n    public abstract class ACommand\n    {\n        private static Dictionary<string, Delegate> eventStorage = new Dictionary<string, Delegate>();\n\n        private static Delegate ensureEvent(string eventName)\n        {\n            Delegate d = null;\n            if (!eventStorage.TryGetValue(eventName, out d))\n                eventStorage.Add(eventName, null);\n            return d;\n        }\n\n        protected static void AddEventHandler(string key, EventHandler<CommandEventArgs> eh)\n        {\n            var d = ensureEvent(key);\n            eventStorage[key] = Delegate.Combine(d, eh);\n        }\n\n        protected static void RemoveEventHandler(string key, EventHandler<CommandEventArgs> eh)\n        {\n            var d = ensureEvent(key);\n            eventStorage[key] = Delegate.Remove(d, eh);\n        }\n\n        private void onEvent(string key, CommandEventArgs e)\n        {\n            Delegate d = null;\n            if (eventStorage.TryGetValue($\"{GetType().FullName}::{key}\", out d))\n            {\n                var invs = d.GetInvocationList();\n                foreach (var inv in invs)\n                {\n                    var evh = inv as EventHandler<CommandEventArgs>;\n                    var t = evh.Target;\n\n                    if (t is AInstance)\n                    {\n                        var instance = t as AInstance;\n                        if (instance.Id == 11)\n                            evh(this, e);\n                    }\n                    else\n                    {\n                        throw new NotSupportedException();\n                    }\n                }\n            }\n        }\n\n        protected void OnBeginCommand(CommandEventArgs e)\n        {\n            onEvent(\"BeginCommand\", e);\n        }\n\n        protected void OnEndCommand(CommandEventArgs e)\n        {\n            onEvent(\"EndCommand\", e);\n        }\n\n        public virtual void Execute()\n        {\n            OnBeginCommand(CommandEventArgs.Empty);\n\n            OnEndCommand(CommandEventArgs.Empty);\n        }\n\n        public virtual bool IsExecutable() => false;\n    }\n\n    public sealed partial class Command1 : ACommand\n    {\n    }\n\n    public sealed partial class Command2 : ACommand\n    {\n    }\n}\n\n\n\nACommandEventImpl.tt\n<#@ template debug=\"false\" hostspecific=\"false\" language=\"C#\" #>\n<#@ assembly name=\"System.Core\" #>\n<#@ import namespace=\"System.Linq\" #>\n<#@ import namespace=\"System.Text\" #>\n<#@ import namespace=\"System.Collections.Generic\" #>\n<#@ output extension=\".generated.cs\" #>\nusing System;\n\nnamespace EventTest\n{\n<#\n    var ns = \"EventTest.\";\n    var classNames = new []{ \"Command1\", \"Command2\" };\n    var eventHandlerNames = new []{ \"BeginCommand\", \"EndCommand\" };\n\n    foreach (var c in classNames)\n    {\n#>\n    public sealed partial class <#= c #>\n    {\n<#\n        foreach (var eh in eventHandlerNames)\n        {\n#>\n        public static event EventHandler<CommandEventArgs> <#= eh #>\n        {\n            add\n            {\n                AddEventHandler(\"<#= ns #><#= c #>::<#= eh #>\", value);\n            }\n            remove\n            {\n                RemoveEventHandler(\"<#= ns #><#= c #>::<#= eh #>\", value);\n            }\n        }\n<#\n        }\n#>\n    }\n<#\n    }\n#>\n}\n\n\n\n\nACommandEventImpl.generated.cs\n// \u4e0a\u306eACommandEventImpl.tt\u306e\u751f\u6210\u7d50\u679c\nusing System;\n\nnamespace EventTest\n{\n    public sealed partial class Command1\n    {\n        public static event EventHandler<CommandEventArgs> BeginCommand\n        {\n            add\n            {\n                AddEventHandler(\"EventTest.Command1::BeginCommand\", value);\n            }\n            remove\n            {\n                RemoveEventHandler(\"EventTest.Command1::BeginCommand\", value);\n            }\n        }\n        public static event EventHandler<CommandEventArgs> EndCommand\n        {\n            add\n            {\n                AddEventHandler(\"EventTest.Command1::EndCommand\", value);\n            }\n            remove\n            {\n                RemoveEventHandler(\"EventTest.Command1::EndCommand\", value);\n            }\n        }\n    }\n    public sealed partial class Command2\n    {\n        public static event EventHandler<CommandEventArgs> BeginCommand\n        {\n            add\n            {\n                AddEventHandler(\"EventTest.Command2::BeginCommand\", value);\n            }\n            remove\n            {\n                RemoveEventHandler(\"EventTest.Command2::BeginCommand\", value);\n            }\n        }\n        public static event EventHandler<CommandEventArgs> EndCommand\n        {\n            add\n            {\n                AddEventHandler(\"EventTest.Command2::EndCommand\", value);\n            }\n            remove\n            {\n                RemoveEventHandler(\"EventTest.Command2::EndCommand\", value);\n            }\n        }\n    }\n}\n\n\n\n```csharp:Program.cs\nusing System;\n\nnamespace EventTest\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var c1 = new Command1();\n            var c2 = new Command2();\n\n            var i1 = new Instance1();\n\n            c1.Execute();\n            c2.Execute();\n\n            Console.ReadLine();\n        }\n    }\n}\n```\n\n```csharp:CommandEventArgs.cs\nusing System;\n\nnamespace EventTest\n{\n    public class CommandEventArgs : EventArgs\n    {\n        public new static readonly CommandEventArgs Empty = new CommandEventArgs();\n    }\n}\n```\n\n```csharp:AInstance.cs\nusing System;\n\nnamespace EventTest\n{\n    public abstract class AInstance\n    {\n        public abstract int Id { get; }\n    }\n\n    public class Instance1 : AInstance\n    {\n        public Instance1()\n        {\n            Command1.BeginCommand += Command1_BeginCommand;\n        }\n\n        public override int Id => 11;\n\n        private void Command1_BeginCommand(object sender, CommandEventArgs e)\n        {\n            Console.WriteLine(\"Command1.BeginCommand:Instance1\");\n        }\n    }\n}\n```\n\n```csharp:ACommand.cs\nusing System;\nusing System.Collections.Generic;\n\nnamespace EventTest\n{\n    public abstract class ACommand\n    {\n        private static Dictionary<string, Delegate> eventStorage = new Dictionary<string, Delegate>();\n\n        private static Delegate ensureEvent(string eventName)\n        {\n            Delegate d = null;\n            if (!eventStorage.TryGetValue(eventName, out d))\n                eventStorage.Add(eventName, null);\n            return d;\n        }\n\n        protected static void AddEventHandler(string key, EventHandler<CommandEventArgs> eh)\n        {\n            var d = ensureEvent(key);\n            eventStorage[key] = Delegate.Combine(d, eh);\n        }\n\n        protected static void RemoveEventHandler(string key, EventHandler<CommandEventArgs> eh)\n        {\n            var d = ensureEvent(key);\n            eventStorage[key] = Delegate.Remove(d, eh);\n        }\n\n        private void onEvent(string key, CommandEventArgs e)\n        {\n            Delegate d = null;\n            if (eventStorage.TryGetValue($\"{GetType().FullName}::{key}\", out d))\n            {\n                var invs = d.GetInvocationList();\n                foreach (var inv in invs)\n                {\n                    var evh = inv as EventHandler<CommandEventArgs>;\n                    var t = evh.Target;\n\n                    if (t is AInstance)\n                    {\n                        var instance = t as AInstance;\n                        if (instance.Id == 11)\n                            evh(this, e);\n                    }\n                    else\n                    {\n                        throw new NotSupportedException();\n                    }\n                }\n            }\n        }\n\n        protected void OnBeginCommand(CommandEventArgs e)\n        {\n            onEvent(\"BeginCommand\", e);\n        }\n\n        protected void OnEndCommand(CommandEventArgs e)\n        {\n            onEvent(\"EndCommand\", e);\n        }\n\n        public virtual void Execute()\n        {\n            OnBeginCommand(CommandEventArgs.Empty);\n\n            OnEndCommand(CommandEventArgs.Empty);\n        }\n\n        public virtual bool IsExecutable() => false;\n    }\n\n    public sealed partial class Command1 : ACommand\n    {\n    }\n\n    public sealed partial class Command2 : ACommand\n    {\n    }\n}\n```\n\n```text:ACommandEventImpl.tt\n<#@ template debug=\"false\" hostspecific=\"false\" language=\"C#\" #>\n<#@ assembly name=\"System.Core\" #>\n<#@ import namespace=\"System.Linq\" #>\n<#@ import namespace=\"System.Text\" #>\n<#@ import namespace=\"System.Collections.Generic\" #>\n<#@ output extension=\".generated.cs\" #>\nusing System;\n\nnamespace EventTest\n{\n<#\n    var ns = \"EventTest.\";\n    var classNames = new []{ \"Command1\", \"Command2\" };\n    var eventHandlerNames = new []{ \"BeginCommand\", \"EndCommand\" };\n\n    foreach (var c in classNames)\n    {\n#>\n    public sealed partial class <#= c #>\n    {\n<#\n        foreach (var eh in eventHandlerNames)\n        {\n#>\n        public static event EventHandler<CommandEventArgs> <#= eh #>\n        {\n            add\n            {\n                AddEventHandler(\"<#= ns #><#= c #>::<#= eh #>\", value);\n            }\n            remove\n            {\n                RemoveEventHandler(\"<#= ns #><#= c #>::<#= eh #>\", value);\n            }\n        }\n<#\n        }\n#>\n    }\n<#\n    }\n#>\n}\n\n```\n\n\n```csharp:ACommandEventImpl.generated.cs\n// \u4e0a\u306eACommandEventImpl.tt\u306e\u751f\u6210\u7d50\u679c\nusing System;\n\nnamespace EventTest\n{\n    public sealed partial class Command1\n    {\n        public static event EventHandler<CommandEventArgs> BeginCommand\n        {\n            add\n            {\n                AddEventHandler(\"EventTest.Command1::BeginCommand\", value);\n            }\n            remove\n            {\n                RemoveEventHandler(\"EventTest.Command1::BeginCommand\", value);\n            }\n        }\n        public static event EventHandler<CommandEventArgs> EndCommand\n        {\n            add\n            {\n                AddEventHandler(\"EventTest.Command1::EndCommand\", value);\n            }\n            remove\n            {\n                RemoveEventHandler(\"EventTest.Command1::EndCommand\", value);\n            }\n        }\n    }\n    public sealed partial class Command2\n    {\n        public static event EventHandler<CommandEventArgs> BeginCommand\n        {\n            add\n            {\n                AddEventHandler(\"EventTest.Command2::BeginCommand\", value);\n            }\n            remove\n            {\n                RemoveEventHandler(\"EventTest.Command2::BeginCommand\", value);\n            }\n        }\n        public static event EventHandler<CommandEventArgs> EndCommand\n        {\n            add\n            {\n                AddEventHandler(\"EventTest.Command2::EndCommand\", value);\n            }\n            remove\n            {\n                RemoveEventHandler(\"EventTest.Command2::EndCommand\", value);\n            }\n        }\n    }\n}\n```\n"}