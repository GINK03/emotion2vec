{"tags": ["Arduino", "\u30af\u30eb\u30de\u306eiot", "I2C"], "context": " More than 1 year has passed since last update.\n\n\u6982\u8981\n\u81ea\u52d5\u8eca\u306eOBD2\u306e\u30e9\u30a4\u30d6\u30c7\u30fc\u30bf\u3092arduino nano\u3067\u8aad\u307f\u53d6\u3063\u3066\u3001OLED\u306b\u8868\u793a\u3057\u307e\u3059\u3002\n\n\u5199\u771f\n\n\n\n\u56de\u8def\u56f3\n\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n#include <SPI.h>\n#include <Wire.h>\n#include <Adafruit_GFX.h>\n#include <Adafruit_SSD1306.h>\n#include \"Ohisquirt.h\"\n\nOhisquirt squirt;\nAdafruit_SSD1306 display(4);\nint state = 0;\nint flg = 0;\nbyte mode = 0x0C;\nvoid setup()\n{\n    pinMode(8, INPUT_PULLUP);\n    squirt.begin();\n    display.begin(SSD1306_SWITCHCAPVCC, 0x3c);\n    display.clearDisplay();\n    display.display();\n    display.setTextColor(WHITE);\n    display.clearDisplay();\n    display.setTextSize(2);\n    display.setCursor(0, 0);\n    display.print(\"live\");\n    display.setCursor(0, 25);\n    display.setTextSize(4);\n    display.print(\"init\");\n    display.display();\n    while (!squirt.init());\n    ELM_PROTOCOLS h = PROTO_ISO_9141_2;\n    if (squirt.setProtocol(h))\n    {\n        display.clearDisplay();\n        display.setTextSize(2);\n        display.setCursor(0, 0);\n        display.print(\"ISO_9141_2\");\n        display.display();\n    }\n}\nvoid loop()\n{\n    int sw = digitalRead(8);\n    int value = 0;\n    byte pid = 0;\n    display.clearDisplay();\n    display.setTextSize(2);\n    display.setCursor(0, 0);\n    if (sw == HIGH)\n    {\n        flg = 0;\n    }\n    else\n    {\n        if (flg == 1)\n        {\n            state++;\n            if (state > 9) state = 0;\n        }\n        flg = 1;\n    }\n    if (flg == 0)\n    {\n        squirt.sendQuery(mode);\n        if (squirt.getResult(pid, value))\n        {\n            switch (mode)\n            {\n            case 0x04:\n                display.print(\"ENGINE_LOAD\");\n            break;\n            case 0x05:\n                display.print(\"COOLANT_TEMP\");\n            break;\n            case 0x06:\n                display.print(\"SHORT_FUEL_TRIM\");\n            break;\n            case 0x07:\n                display.print(\"LONG_FUEL_TRIM\");\n            break;\n            case 0x0B:\n                display.print(\"INTAKE_MAP\");\n            break;\n            case 0x0C:\n                display.print(\"RPM\");\n            break;\n            case 0x0D:\n                display.print(\"SPEED\");\n            break;\n            case 0x0E:\n                display.print(\"TIMING_ADVANCE\");\n            break;\n            case 0x0F:\n                display.print(\"INTAKE_TEMP\");\n            break;\n            case 0x11:\n                display.print(\"THROTTLE\");\n            break;\n            }\n            display.setCursor(0, 35);\n            display.setTextSize(4);\n            display.print(value);\n            display.setCursor(90, 50);\n            display.setTextSize(2);\n            switch (mode)\n            {\n            case 0x04:\n                display.print(\"%\");\n            break;\n            case 0x05:\n                display.print(\"`C\");\n            break;\n            case 0x06:\n                display.print(\"%\");\n            break;\n            case 0x07:\n                display.print(\"%\");\n            break;\n            case 0x0B:\n                display.print(\"KPa\");\n            break;\n            case 0x0C:\n                display.print(\"RPM\");\n            break;\n            case 0x0D:\n                display.print(\"km/h\");\n            break;\n            case 0x0E:\n                display.print(\"deg\");\n            break;\n            case 0x0F:\n                display.print(\"`C\");\n            break;\n            case 0x11:\n                display.print(\"%\");\n            break;\n            }\n        }\n    }\n    else\n    {\n        switch (state)\n        {\n        case 0:\n            display.print(\"RPM\");\n            mode = 0x0C;\n        break;\n        case 1:\n            display.print(\"SPEED\");\n            mode = 0x0D;\n        break;\n        case 2:\n            display.print(\"THROTTLE\");\n            mode = 0x11;\n        break;\n        case 3:\n            display.print(\"COOLANT_TEMP\");\n            mode = 0x05;\n        break;\n        case 4:\n            display.print(\"INTAKE_TEMP\");\n            mode = 0x0F;\n        break;\n        case 5:\n            display.print(\"INTAKE_MAP\");\n            mode = 0x0B;\n        break;\n        case 6:\n            display.print(\"ENGINE_LOAD\");\n            mode = 0x04;\n        break;\n        case 7:\n            display.print(\"SHORT_FUEL_TRIM\");\n            mode = 0x06;\n        break;\n        case 8:\n            display.print(\"LONG_FUEL_TRIM\");\n            mode = 0x07;\n        break;\n        case 9:\n            display.print(\"TIMING_ADVANCE\");\n            mode = 0x0E;\n        break;\n        }\n    }\n    display.display();\n    delay(700);\n}\n\n\n#\u6982\u8981\n\u81ea\u52d5\u8eca\u306eOBD2\u306e\u30e9\u30a4\u30d6\u30c7\u30fc\u30bf\u3092arduino nano\u3067\u8aad\u307f\u53d6\u3063\u3066\u3001OLED\u306b\u8868\u793a\u3057\u307e\u3059\u3002\n\n#\u5199\u771f\n![2015-11-30 14.04.17.jpg](https://qiita-image-store.s3.amazonaws.com/0/18104/1dc4a9cf-477f-56eb-35be-f227b1ca0836.jpeg)\n![2015-11-30 14.04.28.jpg](https://qiita-image-store.s3.amazonaws.com/0/18104/b2a6889a-f688-f34b-ab95-ee12b148df05.jpeg)\n\n#\u56de\u8def\u56f3\n![live.JPG](https://qiita-image-store.s3.amazonaws.com/0/18104/b151a5a2-9611-0c7a-7ae5-15a9150df3a4.jpeg)\n\n#\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n```\n#include <SPI.h>\n#include <Wire.h>\n#include <Adafruit_GFX.h>\n#include <Adafruit_SSD1306.h>\n#include \"Ohisquirt.h\"\n\nOhisquirt squirt;\nAdafruit_SSD1306 display(4);\nint state = 0;\nint flg = 0;\nbyte mode = 0x0C;\nvoid setup()\n{\n\tpinMode(8, INPUT_PULLUP);\n\tsquirt.begin();\n\tdisplay.begin(SSD1306_SWITCHCAPVCC, 0x3c);\n\tdisplay.clearDisplay();\n\tdisplay.display();\n\tdisplay.setTextColor(WHITE);\n\tdisplay.clearDisplay();\n\tdisplay.setTextSize(2);\n\tdisplay.setCursor(0, 0);\n\tdisplay.print(\"live\");\n\tdisplay.setCursor(0, 25);\n\tdisplay.setTextSize(4);\n\tdisplay.print(\"init\");\n\tdisplay.display();\n\twhile (!squirt.init());\n\tELM_PROTOCOLS h = PROTO_ISO_9141_2;\n\tif (squirt.setProtocol(h))\n\t{\n\t\tdisplay.clearDisplay();\n\t\tdisplay.setTextSize(2);\n\t\tdisplay.setCursor(0, 0);\n\t\tdisplay.print(\"ISO_9141_2\");\n\t\tdisplay.display();\n\t}\n}\nvoid loop()\n{\n\tint sw = digitalRead(8);\n\tint value = 0;\n\tbyte pid = 0;\n\tdisplay.clearDisplay();\n\tdisplay.setTextSize(2);\n\tdisplay.setCursor(0, 0);\n\tif (sw == HIGH)\n\t{\n\t\tflg = 0;\n\t}\n\telse\n\t{\n\t\tif (flg == 1)\n\t\t{\n\t\t\tstate++;\n\t\t\tif (state > 9) state = 0;\n\t\t}\n\t\tflg = 1;\n\t}\n\tif (flg == 0)\n\t{\n\t\tsquirt.sendQuery(mode);\n\t\tif (squirt.getResult(pid, value))\n\t\t{\n\t\t\tswitch (mode)\n\t\t\t{\n\t\t\tcase 0x04:\n\t\t\t\tdisplay.print(\"ENGINE_LOAD\");\n\t\t\tbreak;\n\t\t\tcase 0x05:\n\t\t\t\tdisplay.print(\"COOLANT_TEMP\");\n\t\t\tbreak;\n\t\t\tcase 0x06:\n\t\t\t\tdisplay.print(\"SHORT_FUEL_TRIM\");\n\t\t\tbreak;\n\t\t\tcase 0x07:\n\t\t\t\tdisplay.print(\"LONG_FUEL_TRIM\");\n\t\t\tbreak;\n\t\t\tcase 0x0B:\n\t\t\t\tdisplay.print(\"INTAKE_MAP\");\n\t\t\tbreak;\n\t\t\tcase 0x0C:\n\t\t\t\tdisplay.print(\"RPM\");\n\t\t\tbreak;\n\t\t\tcase 0x0D:\n\t\t\t\tdisplay.print(\"SPEED\");\n\t\t\tbreak;\n\t\t\tcase 0x0E:\n\t\t\t\tdisplay.print(\"TIMING_ADVANCE\");\n\t\t\tbreak;\n\t\t\tcase 0x0F:\n\t\t\t\tdisplay.print(\"INTAKE_TEMP\");\n\t\t\tbreak;\n\t\t\tcase 0x11:\n\t\t\t\tdisplay.print(\"THROTTLE\");\n\t\t\tbreak;\n\t\t\t}\n\t\t\tdisplay.setCursor(0, 35);\n\t\t\tdisplay.setTextSize(4);\n\t\t\tdisplay.print(value);\n\t\t\tdisplay.setCursor(90, 50);\n\t\t\tdisplay.setTextSize(2);\n\t\t\tswitch (mode)\n\t\t\t{\n\t\t\tcase 0x04:\n\t\t\t\tdisplay.print(\"%\");\n\t\t\tbreak;\n\t\t\tcase 0x05:\n\t\t\t\tdisplay.print(\"`C\");\n\t\t\tbreak;\n\t\t\tcase 0x06:\n\t\t\t\tdisplay.print(\"%\");\n\t\t\tbreak;\n\t\t\tcase 0x07:\n\t\t\t\tdisplay.print(\"%\");\n\t\t\tbreak;\n\t\t\tcase 0x0B:\n\t\t\t\tdisplay.print(\"KPa\");\n\t\t\tbreak;\n\t\t\tcase 0x0C:\n\t\t\t\tdisplay.print(\"RPM\");\n\t\t\tbreak;\n\t\t\tcase 0x0D:\n\t\t\t\tdisplay.print(\"km/h\");\n\t\t\tbreak;\n\t\t\tcase 0x0E:\n\t\t\t\tdisplay.print(\"deg\");\n\t\t\tbreak;\n\t\t\tcase 0x0F:\n\t\t\t\tdisplay.print(\"`C\");\n\t\t\tbreak;\n\t\t\tcase 0x11:\n\t\t\t\tdisplay.print(\"%\");\n\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tswitch (state)\n\t\t{\n\t\tcase 0:\n\t\t\tdisplay.print(\"RPM\");\n\t\t\tmode = 0x0C;\n\t\tbreak;\n\t\tcase 1:\n\t\t\tdisplay.print(\"SPEED\");\n\t\t\tmode = 0x0D;\n\t\tbreak;\n\t\tcase 2:\n\t\t\tdisplay.print(\"THROTTLE\");\n\t\t\tmode = 0x11;\n\t\tbreak;\n\t\tcase 3:\n\t\t\tdisplay.print(\"COOLANT_TEMP\");\n\t\t\tmode = 0x05;\n\t\tbreak;\n\t\tcase 4:\n\t\t\tdisplay.print(\"INTAKE_TEMP\");\n\t\t\tmode = 0x0F;\n\t\tbreak;\n\t\tcase 5:\n\t\t\tdisplay.print(\"INTAKE_MAP\");\n\t\t\tmode = 0x0B;\n\t\tbreak;\n\t\tcase 6:\n\t\t\tdisplay.print(\"ENGINE_LOAD\");\n\t\t\tmode = 0x04;\n\t\tbreak;\n\t\tcase 7:\n\t\t\tdisplay.print(\"SHORT_FUEL_TRIM\");\n\t\t\tmode = 0x06;\n\t\tbreak;\n\t\tcase 8:\n\t\t\tdisplay.print(\"LONG_FUEL_TRIM\");\n\t\t\tmode = 0x07;\n\t\tbreak;\n\t\tcase 9:\n\t\t\tdisplay.print(\"TIMING_ADVANCE\");\n\t\t\tmode = 0x0E;\n\t\tbreak;\n\t\t}\n\t}\n\tdisplay.display();\n\tdelay(700);\n}\n\n```\n"}