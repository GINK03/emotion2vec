{"tags": ["Haskell", "ghc7.10.2", "ghc-typelits-natnormalise0.3.1"], "context": " More than 1 year has passed since last update.\n\n\u578b\u30ec\u30d9\u30eb\u81ea\u7136\u6570\n{-# LANGUAGE DataKinds #-}\n\nimport Data.Proxy\n\none :: Proxy 1 -- <- \u3053\u308c!!!\none = Proxy\n\n\n\u578b\u30ec\u30d9\u30eb\u81ea\u7136\u6570\u3092\u4f7f\u3063\u305f\u9577\u3055\u4ed8\u304d\u30ea\u30b9\u30c8\n{-# LANGUAGE DataKinds, GADTs, TypeOperators, KindSignatures, StandaloneDeriving #-}\n\nimport GHC.TypeLits\n\ndata List :: Nat -> * -> * where\n    Nil   :: List 0 a\n    (:::) :: a -> List length a -> List (length + 1) a\n\ninfixr 5 :::\n\nderiving instance Show a => Show (List l a)\n\n\nghci\n\u03bb> :load foo.hs\n[1 of 1] Compiling Main             ( foo.hs, interpreted )\nOk, modules loaded: Main.\n\n\u03bb> 1 ::: 2 ::: 3 ::: Nil\n1 ::: (2 ::: (3 ::: Nil))\n\n\u03bb> :t 1 ::: 2 ::: 3 ::: Nil\n1 ::: 2 ::: 3 ::: Nil :: Num a => List 3 a\n\n\n\n\n\u578b\u30ec\u30d9\u30eb\u81ea\u7136\u6570\u3092\u4f7f\u3063\u305f\u9577\u3055\u4ed8\u304d\u30ea\u30b9\u30c8\u3067head\nhead_ :: List (n + 1) a -> a\nhead_ (a ::: _) = a\n\n\nghci\n\u03bb> :load foo.hs\n[1 of 1] Compiling Main             ( foo.hs, interpreted )\nOk, modules loaded: Main.\n\n\u03bb> head_ (1 ::: Nil)\n1\n\n\u03bb> head_ Nil -- \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30a8\u30e9\u30fc\n<interactive>:3:7:\n    Couldn't match type \u20181\u2019 with \u20180\u2019\n    Expected type: List (0 + 1) a\n      Actual type: List 0 a\n    In the first argument of \u2018head_\u2019, namely \u2018Nil\u2019\n    In the expression: head_ Nil\n\n\n1\n\n\u578b\u30ec\u30d9\u30eb\u81ea\u7136\u6570\u3092\u4f7f\u3063\u305f\u9577\u3055\u4ed8\u304d\u30ea\u30b9\u30c8\u3067tail\ntail_ :: List (n + 1) a -> List n a\ntail_ (_ ::: as) = as\n\n\nghci\n\u03bb> :load foo.hs\n[1 of 1] Compiling Main             ( foo.hs, interpreted )\n\na.hs:17:20:\n    Could not deduce (length ~ n)\n    from the context ((n + 1) ~ (length + 1))\n      bound by a pattern with constructor\n                 ::: :: forall a (length :: Nat).\n                        a -> List length a -> List (length + 1) a,\n               in an equation for \u2018tail_\u2019\n      at a.hs:17:8-15\n      \u2018length\u2019 is a rigid type variable bound by\n               a pattern with constructor\n                 ::: :: forall a (length :: Nat).\n                        a -> List length a -> List (length + 1) a,\n               in an equation for \u2018tail_\u2019\n               at a.hs:17:8\n      \u2018n\u2019 is a rigid type variable bound by\n          the type signature for tail_ :: List (n + 1) a -> List n a\n          at a.hs:16:10\n    Expected type: List n a\n      Actual type: List length a\n    Relevant bindings include\n      as :: List length a (bound at a.hs:17:14)\n      tail_ :: List (n + 1) a -> List n a (bound at a.hs:17:1)\n    In the expression: as\n    In an equation for \u2018tail_\u2019: tail_ (_ ::: as) = as\nFailed, modules loaded: none.\n\n\n\u3088\u308f\u3044(\u78ba\u4fe12\n\n\u578b\u30ec\u30d9\u30eb\u81ea\u7136\u6570(\u3064\u3088\u3044)\n\u4ee5\u4e0b\u306e1\u884c\u3092\u30d5\u30a1\u30a4\u30eb\u306e\u5148\u982d3\u306b\u8ffd\u52a0\n{-# OPTIONS_GHC -fplugin=GHC.TypeLits.Normalise #-}\n\n$ stack install ghc-typelits-natnormalise\n$ stack ghci --package=ghc-typelits-natnormalise\n\n\nghci\n\u03bb> :load foo.hs\n[1 of 1] Compiling Main             ( foo.hs, interpreted )\nOk, modules loaded: Main.\n\n\n\n\nghci\n\u03bb> tail_ (1 ::: 2 ::: 3 ::: Nil)\n2 ::: (3 ::: Nil)\n\n\u03bb> tail_ Nil -- \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30a8\u30e9\u30fc\n\n<interactive>:4:7:\n    Couldn't match type \u20181\u2019 with \u20180\u2019\n    Expected type: List (0 + 1) a\n      Actual type: List 0 a\n    In the first argument of \u2018tail_\u2019, namely \u2018Nil\u2019\n    In the expression: tail_ Nil\n\n\n\u3064\u3088\u3044\n\n\u306a\u305c\nghc-plugin\u3092\u4f7f\u3048\u3070\u3001ghc\u672c\u4f53\u3092\u5f04\u308b\u4e8b\u306a\u304f\u6700\u9069\u5316\u3084\u578b\u30c1\u30a7\u30c3\u30af\u3092\u62e1\u5f35\u3067\u304d\u308b\nghc-typelits-natnormalise \u30d1\u30c3\u30b1\u30fc\u30b8\u306eghc-plugin\u306b\u3088\u308a\u3001\u578b\u30ec\u30d9\u30eb\u81ea\u7136\u6570\u304c\u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u306e\u78ba\u8a8d\u304c\u51fa\u6765\u308b\u69d8\u306b\u306a\u308b4\n\u3059\u3054\u3044\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u3082\u3046\u5c11\u3057\u30ea\u30b9\u30c8\u306e\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u578b\u5408\u305b\u30b2\u30fc\u30e0\u3092\u30af\u30ea\u30a2\u3057\u305f\u30b3\u30fc\u30c9 \u2192 foo.hs\n\n\u307e\u3068\u3081\n\n\u306d\u3080\u3044\nghc-plugin\u3057\u3085\u3054\u3044\u306e\u3049\u3049\u3049\u3049\u3049\n\n\n\n\n\n\n\u305f\u3060\u3057\u3001head_ :: List n a -> a\u3067\u3082\u666e\u901a\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u901a\u308a\u3001\u305d\u306e\u5834\u5408\u306fhead_ Nil\u306f\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\u00a0\u21a9\n\n\nn + 1\u304cn\u306e\u6b21\u306e\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u308f\u304b\u3089\u306a\u304f\u3066\u6b7b\u306c\u00a0\u21a9\n\n\n\u30d5\u30a1\u30a4\u30eb\u30d8\u30c3\u30c0\u30d7\u30e9\u30b0\u30de\u306a\u306e\u3067\u5b9f\u969b\u306b\u306fmodule Hoge where\u306e\u524d\u306a\u3089\u3069\u3053\u3067\u3082ok\u3002\u00a0\u21a9\n\n\n\u578b\u30ec\u30d9\u30eb\u81ea\u7136\u6570\u3092sort-of SOP (Sum-of-Products) form\u306b\u5909\u63db\u3057\u3066\u30c1\u30a7\u30c3\u30af\u3057\u3066\u308b\u3068\u304b\u306a\u3093\u3068\u304b\u00a0\u21a9\n\n\n\n\u578b\u30ec\u30d9\u30eb\u81ea\u7136\u6570\n==\n```.hs\n{-# LANGUAGE DataKinds #-}\n\nimport Data.Proxy\n\none :: Proxy 1 -- <- \u3053\u308c!!!\none = Proxy\n```\n\n\u578b\u30ec\u30d9\u30eb\u81ea\u7136\u6570\u3092\u4f7f\u3063\u305f\u9577\u3055\u4ed8\u304d\u30ea\u30b9\u30c8\n==\n```.hs\n{-# LANGUAGE DataKinds, GADTs, TypeOperators, KindSignatures, StandaloneDeriving #-}\n\nimport GHC.TypeLits\n\ndata List :: Nat -> * -> * where\n    Nil   :: List 0 a\n    (:::) :: a -> List length a -> List (length + 1) a\n\ninfixr 5 :::\n\nderiving instance Show a => Show (List l a)\n```\n\n```.hs:ghci\n\u03bb> :load foo.hs\n[1 of 1] Compiling Main             ( foo.hs, interpreted )\nOk, modules loaded: Main.\n\n\u03bb> 1 ::: 2 ::: 3 ::: Nil\n1 ::: (2 ::: (3 ::: Nil))\n\n\u03bb> :t 1 ::: 2 ::: 3 ::: Nil\n1 ::: 2 ::: 3 ::: Nil :: Num a => List 3 a\n```\n\n:smiley:\n\n\u578b\u30ec\u30d9\u30eb\u81ea\u7136\u6570\u3092\u4f7f\u3063\u305f\u9577\u3055\u4ed8\u304d\u30ea\u30b9\u30c8\u3067head\n--\n```.hs\nhead_ :: List (n + 1) a -> a\nhead_ (a ::: _) = a\n```\n\n```.hs:ghci\n\u03bb> :load foo.hs\n[1 of 1] Compiling Main             ( foo.hs, interpreted )\nOk, modules loaded: Main.\n\n\u03bb> head_ (1 ::: Nil)\n1\n\n\u03bb> head_ Nil -- \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30a8\u30e9\u30fc\n<interactive>:3:7:\n    Couldn't match type \u20181\u2019 with \u20180\u2019\n    Expected type: List (0 + 1) a\n      Actual type: List 0 a\n    In the first argument of \u2018head_\u2019, namely \u2018Nil\u2019\n    In the expression: head_ Nil\n```\n\n:smile:[^head_]\n\n\u578b\u30ec\u30d9\u30eb\u81ea\u7136\u6570\u3092\u4f7f\u3063\u305f\u9577\u3055\u4ed8\u304d\u30ea\u30b9\u30c8\u3067tail\n--\n```.hs\ntail_ :: List (n + 1) a -> List n a\ntail_ (_ ::: as) = as\n```\n\n```.hs:ghci\n\u03bb> :load foo.hs\n[1 of 1] Compiling Main             ( foo.hs, interpreted )\n\na.hs:17:20:\n    Could not deduce (length ~ n)\n    from the context ((n + 1) ~ (length + 1))\n      bound by a pattern with constructor\n                 ::: :: forall a (length :: Nat).\n                        a -> List length a -> List (length + 1) a,\n               in an equation for \u2018tail_\u2019\n      at a.hs:17:8-15\n      \u2018length\u2019 is a rigid type variable bound by\n               a pattern with constructor\n                 ::: :: forall a (length :: Nat).\n                        a -> List length a -> List (length + 1) a,\n               in an equation for \u2018tail_\u2019\n               at a.hs:17:8\n      \u2018n\u2019 is a rigid type variable bound by\n          the type signature for tail_ :: List (n + 1) a -> List n a\n          at a.hs:16:10\n    Expected type: List n a\n      Actual type: List length a\n    Relevant bindings include\n      as :: List length a (bound at a.hs:17:14)\n      tail_ :: List (n + 1) a -> List n a (bound at a.hs:17:1)\n    In the expression: as\n    In an equation for \u2018tail_\u2019: tail_ (_ ::: as) = as\nFailed, modules loaded: none.\n```\n\n:scream:\u3088\u308f\u3044(\u78ba\u4fe1[^tail_]\n\n\u578b\u30ec\u30d9\u30eb\u81ea\u7136\u6570(\u3064\u3088\u3044)\n==\n\n\u4ee5\u4e0b\u306e1\u884c\u3092\u30d5\u30a1\u30a4\u30eb\u306e\u5148\u982d[^header]\u306b\u8ffd\u52a0\n\n```.hs\n{-# OPTIONS_GHC -fplugin=GHC.TypeLits.Normalise #-}\n```\n\n```console:\n$ stack install ghc-typelits-natnormalise\n$ stack ghci --package=ghc-typelits-natnormalise\n```\n\n```.hs:ghci\n\u03bb> :load foo.hs\n[1 of 1] Compiling Main             ( foo.hs, interpreted )\nOk, modules loaded: Main.\n```\n\n:flushed:\n\n```.hs:ghci\n\u03bb> tail_ (1 ::: 2 ::: 3 ::: Nil)\n2 ::: (3 ::: Nil)\n\n\u03bb> tail_ Nil -- \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30a8\u30e9\u30fc\n\n<interactive>:4:7:\n    Couldn't match type \u20181\u2019 with \u20180\u2019\n    Expected type: List (0 + 1) a\n      Actual type: List 0 a\n    In the first argument of \u2018tail_\u2019, namely \u2018Nil\u2019\n    In the expression: tail_ Nil\n```\n\n\u3064\u3088\u3044:clap::clap::clap:\n\n\u306a\u305c\n--\nghc-plugin\u3092\u4f7f\u3048\u3070\u3001ghc\u672c\u4f53\u3092\u5f04\u308b\u4e8b\u306a\u304f\u6700\u9069\u5316\u3084\u578b\u30c1\u30a7\u30c3\u30af\u3092\u62e1\u5f35\u3067\u304d\u308b\n\n[ghc-typelits-natnormalise](https://hackage.haskell.org/package/ghc-typelits-natnormalise) \u30d1\u30c3\u30b1\u30fc\u30b8\u306eghc-plugin\u306b\u3088\u308a\u3001\u578b\u30ec\u30d9\u30eb\u81ea\u7136\u6570\u304c\u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u306e\u78ba\u8a8d\u304c\u51fa\u6765\u308b\u69d8\u306b\u306a\u308b[^sop]\n\n\u3059\u3054\u3044:clap::clap::clap:\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n==\n\u3082\u3046\u5c11\u3057\u30ea\u30b9\u30c8\u306e\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u578b\u5408\u305b\u30b2\u30fc\u30e0\u3092\u30af\u30ea\u30a2\u3057\u305f\u30b3\u30fc\u30c9 \u2192 [foo.hs](https://gist.github.com/philopon/a3ff274b371b8c75033a)\n\n\u307e\u3068\u3081\n==\n* \u306d\u3080\u3044\n* ghc-plugin\u3057\u3085\u3054\u3044\u306e\u3049\u3049\u3049\u3049\u3049\n\n------\n[^head_]: \u305f\u3060\u3057\u3001`head_ :: List n a -> a`\u3067\u3082\u666e\u901a\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u901a\u308a\u3001\u305d\u306e\u5834\u5408\u306f`head_ Nil`\u306f\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\n[^tail_]: `n + 1`\u304c`n`\u306e\u6b21\u306e\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u308f\u304b\u3089\u306a\u304f\u3066\u6b7b\u306c\n[^header]: \u30d5\u30a1\u30a4\u30eb\u30d8\u30c3\u30c0\u30d7\u30e9\u30b0\u30de\u306a\u306e\u3067\u5b9f\u969b\u306b\u306f`module Hoge where`\u306e\u524d\u306a\u3089\u3069\u3053\u3067\u3082ok\u3002\n[^sop]: \u578b\u30ec\u30d9\u30eb\u81ea\u7136\u6570\u3092sort-of SOP (Sum-of-Products) form\u306b\u5909\u63db\u3057\u3066\u30c1\u30a7\u30c3\u30af\u3057\u3066\u308b\u3068\u304b\u306a\u3093\u3068\u304b\n"}