{"context": "\n\ndef main(args: Any) -> None:\nPython \u306e\u9b45\u529b\u306f\u4f55\u3068\u8a00\u3063\u3066\u3082\u578b\u3092\u660e\u793a\u305b\u305a\u306b\u304b\u3051\u308b\u3053\u3068\u3067\u3059\u3088\u306d\u3002\u305d\u306e\u304a\u304b\u3052\u3067\u6570\u5206\u3067\u66f8\u3044\u305f\u5c0f\u3055\u306a\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u3082\u5927\u62b5\u306e\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3057\u304b\u3057\u52d5\u7684\u3059\u304e\u308b\u304c\u3086\u3048\u306b\u3001\u898f\u6a21\u304c\u5927\u304d\u304f\u306a\u308b\u306b\u3064\u308c\u3001\u3053\u308c\u304c\u88cf\u76ee\u306b\u51fa\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002\u4eba\u9593\u306e\u8133\u304c\u4e00\u5ea6\u306b\u4fdd\u6301\u3067\u304d\u308b\u60c5\u5831\u91cf\u306f\u305f\u304b\u304c\u77e5\u308c\u3066\u3044\u307e\u3059\u304b\u3089\u3001\u3084\u3063\u3071\u308a\u3069\u3053\u304b\u3067\u578b\u306e\u4e0d\u4e00\u81f4\u304b\u3089\u304f\u308b\u30d0\u30b0\u304c\u8d77\u3053\u308a\u3048\u307e\u3059\u3002\u3053\u308c\u306b\u5acc\u6c17\u304c\u5dee\u3057\u305f\u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb\u306a\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u305f\u3061\u306f\u8003\u3048\u307e\u3057\u305f\u3002\u3058\u3083\u3042\u3001 Python \u3082 type-aware \u306b\u3059\u308c\u3070\u3044\u3093\u3058\u3083\u306d\u3001\u3068\u3002\n\u305d\u306e\u7532\u6590\u3042\u3063\u3066 Python3.5\u304b\u3089\u306f\u95a2\u6570\u306e\u5f15\u6570\u3084\u623b\u308a\u5024\u306b\u578b\u3092\u660e\u793a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3042\u304f\u307e\u3067\u3082\u9078\u629e\u80a2\u306e\u4e00\u3064\u3068\u3057\u3066\u3001\u3084\u308a\u305f\u3051\u308c\u3070\u3084\u3063\u3066\u3044\u3044\u3068\u3044\u3046\u611f\u3058\u306b\u4f7f\u7528\u8005\u306e\u88c1\u91cf\u306b\u4efb\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3002\ndef fizzbuzz(num: int) -> None:\n    [print(\"fizzbuzz\") if not x % 15\n    else print(\"fizz\") if not x % 5\n    else print(\"buzz\") if not x % 3\n    else print(x) for x in range(num)]\n\n\n\u4eca\u5e74(2016\u5e74)\u306e\u672b\u9803\u307e\u3067\u306b\u306f Python3.6 \u304c\u51fa\u307e\u3059\u3002\u305d\u3053\u3067\u306f\u3053\u308c\u3092\u66f4\u306b\u767a\u5c55\u3055\u305b\u3066\u3001\u5909\u6570\u306b\u3082\u578b\u3092\u660e\u793a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3088\u306d\u3002\n\nfrom typing import List, Dict\nprimes: List[int] = []\n\ncaptain: str  # Note: no initial value!\n\nclass Starship:\n   stats: Dict[str, int] = {}\n\nWhat\u2019s New In Python 3.6\u3088\u308a\n\n\u3057\u304b\u3057\u5f53\u7136\u306a\u304c\u3089\u3001\u30b3\u30fc\u30c9\u306e\u672c\u4f53\u4e2d\u306b\u578b\u3092\u66f8\u3044\u3066\u3057\u307e\u3046\u3068\u3001\u3053\u306e\u30b3\u30fc\u30c9\u306f2\u7cfb\u3067\u306f\u52d5\u304d\u307e\u305b\u3093\u30023\u7cfb\u3067\u30822\u7cfb\u3067\u3082\u52d5\u304b\u305b\u308b\u3088\u3046\u3001\u7d20\u6674\u3089\u3057\u3044\u4ee3\u66ff\u6848\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30b3\u30e1\u30f3\u30c8\u306b\u66f8\u304f docstring \u3068\u306f\u9055\u3044\u307e\u3059\u3002\u578b\u306e\u60c5\u5831\u3060\u3051\u3092\u5916\u90e8\u306b\u5207\u308a\u51fa\u3059\u306e\u3067\u3059\u3002\n\n\u30b9\u30bf\u30d6\u304c\u751f\u307e\u308c\u305f\n\u3059\u306a\u308f\u3061\u3001\u578b\u306e\u60c5\u5831\u3060\u3051\u3092\u66f8\u3044\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u308a\u3001\u305d\u308c\u3092\u5143\u306b\u3057\u3066\u5148\u306e\u30b3\u30fc\u30c9\u306e\u578b\u30c1\u30a7\u30c3\u30af\u3092\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002PEP 484\u3067\u63d0\u5531\u3055\u308c\u305f\u3053\u308c\u3092\u30b9\u30bf\u30d6\u30d5\u30a1\u30a4\u30eb\u3068\u3044\u3044\u307e\u3059\u304c\u3001\u305d\u306e\u4e2d\u8eab\u306f\u30c1\u30a7\u30c3\u30af\u3057\u305f\u3044 Python \u30b3\u30fc\u30c9\u306e\u9aa8\u7d44\u307f\u3067\u3059\u3002\u3053\u308c\u3092\u3001\u578b\u30c1\u30a7\u30c3\u30af\u306e\u6a5f\u80fd\u3092\u6301\u3064\u30c4\u30fc\u30eb\u306b\u6e21\u3059\u3068\u3001\u4e0d\u5177\u5408\u306e\u6e90\u3092\u6307\u6458\u3057\u3066\u304f\u308c\u308b\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u3002mypy (mypy \u3067\u306e\u4f5c\u308a\u65b9: Creating Stubs For Python Modules) \u3084 PyCharm \u3067\u4f7f\u3048\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u306e\u66f8\u304d\u65b9\u81ea\u4f53\u306f\u3069\u3061\u3089\u3067\u3082\u540c\u3058\u3067\u3059\u3002\n\n\u5bfe\u8c61\u306f\n\u300c\u81ea\u4f5c\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u69cb\u6210\u306f\u628a\u63e1\u3057\u3066\u3044\u308b\u3001\u305d\u3046\u3058\u3083\u306a\u304f\u3066\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3046\u6642\u306b\u30b3\u30fc\u30c9\u88dc\u5b8c\u3092\u8ce2\u304f\u3055\u305b\u305f\u3044\u3093\u3060\u300d\u3068\u3044\u3046\u65b9\u306f typeshed: Collection of library stubs for Python, with static types \u3078\u3069\u3046\u305e\u3002\u6709\u5fd7\u306b\u3088\u3063\u3066\u3001\u6a19\u6e96\u30e2\u30b8\u30e5\u30fc\u30eb\u3084\u5916\u90e8\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u70ba\u306e\u30b9\u30bf\u30d6\u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u3089\u308c\u3066\u3044\u307e\u3059\u3002\n\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u306f\u306a\u3044\u30b9\u30af\u30ea\u30d7\u30c8\u306b\u9069\u7528\u3059\u308b\u610f\u7fa9\u306f\u3001 Python \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u4f9d\u3089\u305a\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u307e\u305f\u3001 IDE \u306e\u88dc\u5b8c\u306e\u7cbe\u5ea6\u304c\u4e0a\u304c\u308b\u305f\u3081\u3001\u958b\u767a\u304c\u3057\u3084\u3059\u304f\u306a\u308b\u306e\u304c\u30e1\u30ea\u30c3\u30c8\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3069\u3093\u306a\u611f\u3058\u306a\u306e\n\u305d\u308c\u3067\u306f\u3001\u5b9f\u969b\u306b\u4f5c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u30b9\u30bf\u30d6\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f .pyi \u3067\u3059\u3002\u305d\u308c\u3092\u691c\u67fb\u3057\u305f\u3044\u30b3\u30fc\u30c9\u3068\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30fc\u306b\u7f6e\u304d\u307e\u3059\u3002\u578b\u60c5\u5831\u3092\u30b9\u30bf\u30d6\u306b\u79fb\u3057\u3066\u3057\u307e\u3048\u3070\u3001\u30b3\u30fc\u30c9\u672c\u4f53\u306b\u3064\u3044\u3066\u3044\u305f\u65b9(\u3042\u308c\u3070)\u306f\u6d88\u3057\u3066\u3082\u5927\u4e08\u592b\u3067\u3059\u3002\u3061\u306a\u307f\u306b PyCharm \u3067\u306f\u65b0\u898f\u4f5c\u6210\u306e\u4e00\u89a7\u306b .pyi \u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u624b\u52d5\u3067\u4f5c\u6210\u3059\u308b\u3068\u81ea\u52d5\u3067\u8a8d\u8b58\u3057\u3066\u3001\u4ee5\u964d\u3053\u3061\u3089\u3092\u53c2\u7167\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u578b\u63a8\u6e2c\u306e\u512a\u5148\u9806\u4f4d\u306f\u3001 docstring < \u30b3\u30fc\u30c9\u4e2d\u306e\u76f4\u66f8\u304d < \u30b9\u30bf\u30d6 \u306e\u3088\u3046\u3067\u3059\u3002\n\n\nBefore\n\u3053\u3093\u306a\u30b3\u30fc\u30c9\u304c\u3042\u3063\u305f\u3068\u3057\u307e\u3059\u3002\u8aac\u660e\u7528\u306b\u3067\u304d\u308b\u3060\u3051\u8981\u7d20\u3092\u8a70\u3081\u8fbc\u3093\u3067\u4f5c\u3063\u305f\u306e\u3067\u4e0d\u81ea\u7136\u306a\u30b3\u30fc\u30c9\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u4e00\u5fdc\u52d5\u304f\u3082\u306e\u3067\u3059\u3002\n\u307e\u305a\u306f\u578b\u60c5\u5831\u304c\u4e00\u5207\u306a\u3044\u3069\u3053\u306b\u3067\u3082\u3042\u308b\u666e\u901a\u306e\u30b3\u30fc\u30c9\u3002\nimport json\nimport logging\nimport requests\nimport sys\n\n\nclass Resources:\n    POST_URL = \"https://httpbin.org/post\"\n\n    def __init__(self, auth, logger):\n        self.auth = auth\n        self.logger = logger\n        self.session = self.get_session()\n        self.res = self.get_resources()\n\n    def get_session(self):\n        return requests.session()\n\n    def get_resources(self):\n        return json.loads(self.session.post(\n            self.POST_URL, params=self.auth).text)\n\n    def get_infos(self, queue):\n        if isinstance(queue, str):\n            return str(self.res.get(queue, \"\"))\n        else:\n            return {key: self.res.get(key, \"\") for key in queue}\n\nclass FooLogger(logging.Logger):\n    def __init__(self):\n        super(FooLogger, self).__init__(\"foobar\", logging.INFO)\n        self.logger = logging.getLogger()\n\n        log_stdout = logging.StreamHandler(sys.stdout)\n        self.addHandler(log_stdout)\n\n\nr = Resources({\"name\": \"watashi\", u\"\u6587\u5b57\u5217\": u\"\u3082\u3058\u3082\u3058\"}, FooLogger())\nprint(r.get_infos([\"args\", \"origin\"]))\nprint(r.get_infos(\"origin\"))\n\n\u3053\u308c\u306b\u578b\u60c5\u5831\u3092\u3064\u3051\u308b\u3068\u3053\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u6642\u70b9\u30673\u7cfb\u5c02\u7528\u306b\u306a\u308a\u307e\u3057\u305f\u3002\nfrom typing import List, TypeVar, Union, Dict, Text\nimport json\nimport logging\nimport requests\nimport sys\n\nDatabaseType = Dict[Text, Union[int, Text, Dict[Text, Text], None]]\nLoggerType = TypeVar(\"LoggerType\", bound=logging.Logger)\n\n\nclass Resources:\n    POST_URL = \"https://httpbin.org/post\"\n\n    def __init__(self, auth: Dict[Text, Text], logger: LoggerType) -> None:\n        self.auth = auth\n        self.logger = logger\n        self.session = self.get_session()\n        self.res = self.get_resources()\n\n    def get_session(self) -> requests.Session:\n        return requests.session()\n\n    def get_resources(self) -> Dict:\n        return json.loads(self.session.post(\n            self.POST_URL, params=self.auth).text)\n\n    def get_infos(self, queue: Union[List[Text], Text]) ->\\\n            Union[DatabaseType, Text]:\n        if isinstance(queue, Text):\n            return str(self.res.get(queue, \"\"))\n        else:\n            return {key: self.res.get(key, \"\") for key in queue}\n\nclass FooLogger(logging.Logger):\n    def __init__(self) -> None:\n        super().__init__(\"foobar\", logging.INFO)\n        self.logger = logging.getLogger()\n\n        log_stdout = logging.StreamHandler(sys.stdout)\n        self.addHandler(log_stdout)\n\n\nr = Resources({\"name\": \"watashi\", \"\u6587\u5b57\u5217\": \"\u3082\u3058\u3082\u3058\"}, FooLogger())\nprint(r.get_infos([\"args\", \"origin\"]))\nprint(r.get_infos(\"origin\"))\n\n\nAfter\n\u3053\u308c\u306b\u5bfe\u3059\u308b\u30b9\u30bf\u30d6\u30d5\u30a1\u30a4\u30eb\u306e\u4e2d\u8eab\u306f\u3053\u3046\u306a\u308a\u307e\u3059\u3002# type:\u3068\u66f8\u3044\u3066\u3042\u308b\u306e\u306f\u5909\u6570\u306e\u578b\u3092\u660e\u793a\u3059\u308b\u70ba\u306e\u8a18\u6cd5\u3067\u3059\u3002\nfrom typing import List, TypeVar, Union, Dict, Text, overload\nimport logging\nimport requests\n\n\n# \u30a8\u30a4\u30ea\u30a2\u30b9\nDatabaseType = Dict[Text , Union[int, Text , Dict[Text , Text], None]]\n\n# \u30b8\u30a7\u30cd\u30ea\u30af\u30b9\nLoggerType = TypeVar(\"LoggerType\", bound=logging.Logger)\n\n\nclass Resources:\n    POST_URL = ...  # type: Text\n\n    def __init__(self, auth: Dict[Text , Text], logger: LoggerType) -> None:\n        self.auth = ...  # type: Dict[Text , Text]\n        self.logger = ...  # type: LoggerType\n        self.session = ... # type: requests.Session\n        self.res = ...  # type: Dict\n\n    def get_session(self) -> requests.Session: ...\n\n    def get_resources(self) -> Dict: ...\n\n    @overload\n    def get_infos(self, queue: Text) -> Text: ...\n    @overload\n    def get_infos(self, queue: List[Text]) -> DatabaseType: ...\n\n\nclass FooLogger(logging.Logger):\n    def __init__(self) -> None:\n        super().__init__(self, ...)\n        self.logger = ...  # type: LoggerType\n\n\n\u8aac\u660e\n\u307e\u305a\u30b9\u30bf\u30d6\u306f\u30b3\u30fc\u30c9\u306e\u6982\u89b3\u3092\u8868\u3059\u3082\u306e\u306a\u306e\u3067\u3001\u5b9f\u88c5\u306f\u66f8\u304b\u306a\u304f\u3066\u826f\u3044\u3093\u3067\u3059\u3002\u51e6\u7406\u306e\u672c\u4f53\u306f\u300c...\u300d\u3067\u7701\u7565\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u521d\u671f\u5024\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5f15\u6570\u3084\u5b9a\u6570\u3082\u3044\u304f\u3064\u304b\u3042\u308a\u307e\u3059\u304c\u3001\u5168\u3066\u300c...\u300d\u3067\u3059\u3002\u3086\u3048\u306b\u3053\u308c\u306f Python \u306e\u5f62\u3092\u3057\u305f\u5225\u7269\u3067\u3042\u3063\u3066\u3001\u5b9f\u884c\u306f\u51fa\u6765\u307e\u305b\u3093\u3002\n\n@overload\n\n\u30b9\u30bf\u30d6\u7279\u6709\u306e\u8981\u7d20\u306f\u5b9f\u306f\u4e00\u3064\u3060\u3051\u306a\u3093\u3067\u3059\u3002\u307b\u304b\u306f typing \u30e2\u30b8\u30e5\u30fc\u30eb\u81ea\u4f53\u306e\u4f7f\u3044\u65b9\u3068\u540c\u3058\u3067\u3059\u3002\u305d\u306e\u4e00\u3064\u304c\u3053\u308c\u3067\u3059\u3002\n\u4e0a\u306e\u30b3\u30fc\u30c9\u3067 get_infos() \u306f\u3001\u30ea\u30b9\u30c8\u304c\u4e0e\u3048\u3089\u308c\u308b\u3068\u8f9e\u66f8\u3092\u8fd4\u3057\u3001\u6587\u5b57\u5217\u3092\u4e0e\u3048\u3089\u308c\u308b\u3068\u6587\u5b57\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002\u672c\u4f53\u306e\u3088\u3046\u306b\u3001\ndef get_infos(self, queue: Union[List[str], str]) -> Union[DatabaseType, str]:\n\u3068\u66f8\u3044\u3066\u3057\u307e\u3046\u3068\u3001 \u30ea\u30b9\u30c8\u2192\u30ea\u30b9\u30c8 \u306a\u306e\u304b\u3001 \u30ea\u30b9\u30c8\u2192\u6587\u5b57\u5217 \u306a\u306e\u304b\u533a\u5225\u3067\u304d\u307e\u305b\u3093\u3002\u3053\u3046\u3044\u3046\u3068\u304d\u306b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306e\u51fa\u756a\u3067\u3059\u3002\u5f15\u6570\u3068\u623b\u308a\u5024\u306e\u578b\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u660e\u78ba\u306b\u3067\u304d\u307e\u3059\u3002\n\n\u6587\u5b57\u5217\n2\u7cfb\u306e\u5bfe\u5fdc\u3082\u8003\u3048\u308b\u306a\u3089\u3001\u6587\u5b57\u5217\u306e\u578b\u304c str \u3067\u306f\u4e0d\u81ea\u7136\u3067\u3059\u3002 Text \u306f\u300c\u6587\u5b57\u5217\u300d\u3068\u3057\u3066\u30013\u7cfb\u3067\u306f str \u3067\u30012\u7cfb\u3067\u306f unicode \u3068\u3057\u3066\u632f\u308b\u821e\u3063\u3066\u304f\u308c\u307e\u3059\u3002 bytes \u3082\u542b\u3081\u305f\u3044\u5834\u5408\u306b\u306f AnyStr \u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u6570\u5b57\nint \u3068 float \u4e21\u65b9\u3092\u8868\u3059\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u306f\u7528\u610f\u3055\u308c\u3066\u3044\u306a\u3044\u3088\u3046\u3067\u3059\u3002\u306a\u306e\u3067\nT = TypeVar('T', int, float)\n\u3068\u3059\u308b\u306e\u304c\u7121\u96e3\u3067\u3057\u3087\u3046\u304b\u3002\n\nList, Tuple, Dict \u306a\u3069\n\u901a\u5e38\u306elist\u3001tuple\u3001dict\u306b\u5bfe\u5fdc\u3059\u308b\u3082\u306e\u3067\u3059\u3002 typing \u30e2\u30b8\u30e5\u30fc\u30eb\u304b\u3089\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u305b\u305a\u306b\u5c0f\u6587\u5b57\u306e\u65b9\u3092\u4f7f\u3063\u3066\u3082\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002\u3068\u3044\u3046\u306e\u3082\u5b9f\u88c5\u3092\u898b\u308b\u3068\nclass List(list, MutableSequence[T], extra=list):\n\n    def __new__(cls, *args, **kwds):\n        if _geqv(cls, List):\n            raise TypeError(\"Type List cannot be instantiated; \"\n                            \"use list() instead\")\n        return list.__new__(cls, *args, **kwds)\n\n\u3068\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u305f\u3060\u306elist()\u3068\u5927\u5dee\u306a\u3044\u3088\u3046\u3067\u3059\u3002\u3061\u306a\u307f\u306b Dict[str, str] \u306f \u300c\u30ad\u30fc\u306e\u578b\u304c str \u3001\u5024\u306e\u578b\u304c str \u300d\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002Dict[str]\u306f\u7121\u52b9\u3067\u3059\u3002\n\nUnion \u3068 Optional\n\nUnion \u306f\u6587\u5b57\u901a\u308a\u3001\u4f55\u304b\u3068\u4f55\u304b\u304c\u5408\u308f\u3055\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u8868\u73fe\u3059\u308b\u3068\u304d\u306b\u4f7f\u3044\u307e\u3059\u3002\nUnion[int, str] \u3067\u306f int \u3068 str \u306e\u3069\u3061\u3089\u3082\u53d7\u3051\u53d6\u308c\u308b(or \u8fd4\u3059)\u3053\u3068\u3092\u8868\u3057\u307e\u3059\u3002\nOptional \u306f\u3001 Union \u306e\u8981\u7d20\u306e\u4e00\u3064\u304c None \u3067\u3042\u308b\u3082\u306e\u3092\u8868\u3057\u307e\u3059\u3002\u3064\u307e\u308a\u3001\nOptional[str] == Union[str, None]\n\u3067\u3059\u3002\u6628\u4eca\u8a71\u984c\u306e null \u5b89\u5168\u3092\u5b9f\u73fe\u3059\u308b(\u304b\u3082\u3057\u308c\u306a\u3044)\u3082\u306e\u3067\u3059\u3002\n\n\u30a8\u30a4\u30ea\u30a2\u30b9\nget_infos() \u306f\u8f9e\u66f8\u3092\u8fd4\u3057\u307e\u3059\u3002\u3082\u3061\u308d\u3093\u5358\u306b Dict \u3068\u66f8\u304f\u306e\u3067\u3082\u5341\u5206\u3067\u3059\u304c\u8a73\u7d30\u306b\u5b9a\u7fa9\u3059\u308b\u3068\u3069\u3046\u306a\u308b\u3067\u3057\u3087\u3046\u3002\nDict[str, Dict[str, Union[int, str, List[str]]]]\n\u3053\u3093\u306a\u306b\u9577\u3044\u3082\u306e\u3092\u4f55\u56de\u3082\u66f8\u304f\u306e\u306f\u9762\u5012\u3067\u3059\u3002\u30b3\u30d4\u30da\u306f\u30d0\u30b0\u306e\u3082\u3068\u3067\u3059\u3002\u5909\u6570\u306b\u4e38\u3081\u8fbc\u3093\u3067\u3057\u307e\u3044\u307e\u3057\u3087\u3046\u3002\u3053\u308c\u3092\u30a8\u30a4\u30ea\u30a2\u30b9\u3068\u8a00\u3044\u307e\u3059\u3002\n\n\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\nFooLogger \u306f\u30ed\u30b0\u51fa\u529b\u7528\u306e\u30af\u30e9\u30b9\u3067\u3059\u304c\u3001\u30e1\u30a4\u30f3\u306e\u51e6\u7406\u306b\u3068\u3063\u3066\u306f\u305d\u306e\u5177\u4f53\u7684\u306a\u540d\u524d\u306f\u3069\u3046\u3067\u3082\u3088\u304f\u3001\u305f\u3060 logging \u3092\u7d99\u627f\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u304c\u91cd\u8981\u3067\u3059\u3002\u305d\u3046\u3044\u3046\u6642\u306b\u3053\u308c\u3092\u4f7f\u3044\u307e\u3059\u3002 Python \u6d41\u306e\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u306e\u66f8\u304d\u65b9\u306f\u3053\u3046\u3067\u3059: T = TypeVar(\"T\", bound=logging.Logger)\n\u3053\u306e\u5834\u5408 T \u306f logging \u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3067\u3059\u3002\u4e00\u822c\u306b\u306fbound\u3092\u6307\u5b9a\u305b\u305a\u306b T = TypeVar(\"T\") \u3068\u66f8\u304f\u3053\u3068\u306e\u65b9\u304c\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b LoggerType = TypeVar(\"T\") \u306f\u99c4\u76ee\u3067\u3059\u3002\u5909\u6570\u540d\u3068\u6587\u5b57\u5217\u306e\u4e2d\u306e\u578b\u540d\u306f\u4e00\u81f4\u3057\u3066\u3044\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002\n# def main(args: Any) -> None:\nPython \u306e\u9b45\u529b\u306f\u4f55\u3068\u8a00\u3063\u3066\u3082\u578b\u3092\u660e\u793a\u305b\u305a\u306b\u304b\u3051\u308b\u3053\u3068\u3067\u3059\u3088\u306d\u3002\u305d\u306e\u304a\u304b\u3052\u3067\u6570\u5206\u3067\u66f8\u3044\u305f\u5c0f\u3055\u306a\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u3082\u5927\u62b5\u306e\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3057\u304b\u3057\u52d5\u7684\u3059\u304e\u308b\u304c\u3086\u3048\u306b\u3001\u898f\u6a21\u304c\u5927\u304d\u304f\u306a\u308b\u306b\u3064\u308c\u3001\u3053\u308c\u304c\u88cf\u76ee\u306b\u51fa\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002\u4eba\u9593\u306e\u8133\u304c\u4e00\u5ea6\u306b\u4fdd\u6301\u3067\u304d\u308b\u60c5\u5831\u91cf\u306f\u305f\u304b\u304c\u77e5\u308c\u3066\u3044\u307e\u3059\u304b\u3089\u3001\u3084\u3063\u3071\u308a\u3069\u3053\u304b\u3067\u578b\u306e\u4e0d\u4e00\u81f4\u304b\u3089\u304f\u308b\u30d0\u30b0\u304c\u8d77\u3053\u308a\u3048\u307e\u3059\u3002\u3053\u308c\u306b\u5acc\u6c17\u304c\u5dee\u3057\u305f\u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb\u306a\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u305f\u3061\u306f\u8003\u3048\u307e\u3057\u305f\u3002\u3058\u3083\u3042\u3001 Python \u3082 type-aware \u306b\u3059\u308c\u3070\u3044\u3093\u3058\u3083\u306d\u3001\u3068\u3002\n\n\u305d\u306e\u7532\u6590\u3042\u3063\u3066 Python3.5\u304b\u3089\u306f\u95a2\u6570\u306e\u5f15\u6570\u3084\u623b\u308a\u5024\u306b\u578b\u3092\u660e\u793a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3042\u304f\u307e\u3067\u3082\u9078\u629e\u80a2\u306e\u4e00\u3064\u3068\u3057\u3066\u3001\u3084\u308a\u305f\u3051\u308c\u3070\u3084\u3063\u3066\u3044\u3044\u3068\u3044\u3046\u611f\u3058\u306b\u4f7f\u7528\u8005\u306e\u88c1\u91cf\u306b\u4efb\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3002\n\n```python\ndef fizzbuzz(num: int) -> None:\n    [print(\"fizzbuzz\") if not x % 15\n    else print(\"fizz\") if not x % 5\n    else print(\"buzz\") if not x % 3\n    else print(x) for x in range(num)]\n\n```\n\n\u4eca\u5e74(2016\u5e74)\u306e\u672b\u9803\u307e\u3067\u306b\u306f Python3.6 \u304c\u51fa\u307e\u3059\u3002\u305d\u3053\u3067\u306f\u3053\u308c\u3092\u66f4\u306b\u767a\u5c55\u3055\u305b\u3066\u3001\u5909\u6570\u306b\u3082\u578b\u3092\u660e\u793a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3088\u306d\u3002\n\n>```python\n>from typing import List, Dict\n>primes: List[int] = []\n>\n>captain: str  # Note: no initial value!\n>\n>class Starship:\n>    stats: Dict[str, int] = {}\n>```\n>[What\u2019s New In Python 3.6](https://docs.python.org/3.6/whatsnew/3.6.html \"What\u2019s New In Python 3.6 \u2014 Python 3.6.0b4 documentation\")\u3088\u308a\n\n\u3057\u304b\u3057\u5f53\u7136\u306a\u304c\u3089\u3001\u30b3\u30fc\u30c9\u306e\u672c\u4f53\u4e2d\u306b\u578b\u3092\u66f8\u3044\u3066\u3057\u307e\u3046\u3068\u3001\u3053\u306e\u30b3\u30fc\u30c9\u306f2\u7cfb\u3067\u306f\u52d5\u304d\u307e\u305b\u3093\u30023\u7cfb\u3067\u30822\u7cfb\u3067\u3082\u52d5\u304b\u305b\u308b\u3088\u3046\u3001\u7d20\u6674\u3089\u3057\u3044\u4ee3\u66ff\u6848\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30b3\u30e1\u30f3\u30c8\u306b\u66f8\u304f docstring \u3068\u306f\u9055\u3044\u307e\u3059\u3002\u578b\u306e\u60c5\u5831\u3060\u3051\u3092\u5916\u90e8\u306b\u5207\u308a\u51fa\u3059\u306e\u3067\u3059\u3002\n\n\n# \u30b9\u30bf\u30d6\u304c\u751f\u307e\u308c\u305f\n\u3059\u306a\u308f\u3061\u3001\u578b\u306e\u60c5\u5831\u3060\u3051\u3092\u66f8\u3044\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u308a\u3001\u305d\u308c\u3092\u5143\u306b\u3057\u3066\u5148\u306e\u30b3\u30fc\u30c9\u306e\u578b\u30c1\u30a7\u30c3\u30af\u3092\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002[PEP 484](https://www.python.org/dev/peps/pep-0484/ \"PEP 484 -- Type Hints | Python.org\")\u3067\u63d0\u5531\u3055\u308c\u305f\u3053\u308c\u3092\u30b9\u30bf\u30d6\u30d5\u30a1\u30a4\u30eb\u3068\u3044\u3044\u307e\u3059\u304c\u3001\u305d\u306e\u4e2d\u8eab\u306f\u30c1\u30a7\u30c3\u30af\u3057\u305f\u3044 Python \u30b3\u30fc\u30c9\u306e\u9aa8\u7d44\u307f\u3067\u3059\u3002\u3053\u308c\u3092\u3001\u578b\u30c1\u30a7\u30c3\u30af\u306e\u6a5f\u80fd\u3092\u6301\u3064\u30c4\u30fc\u30eb\u306b\u6e21\u3059\u3068\u3001\u4e0d\u5177\u5408\u306e\u6e90\u3092\u6307\u6458\u3057\u3066\u304f\u308c\u308b\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u3002[mypy](https://github.com/python/mypy \"python/mypy: Optional static typing for Python 2 and 3 (PEP484)\") (mypy \u3067\u306e\u4f5c\u308a\u65b9: [Creating Stubs For Python Modules](https://github.com/python/mypy/wiki/Creating-Stubs-For-Python-Modules \"Creating Stubs For Python Modules\")) \u3084 PyCharm \u3067\u4f7f\u3048\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u306e\u66f8\u304d\u65b9\u81ea\u4f53\u306f\u3069\u3061\u3089\u3067\u3082\u540c\u3058\u3067\u3059\u3002\n\n## \u5bfe\u8c61\u306f\n\u300c\u81ea\u4f5c\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u69cb\u6210\u306f\u628a\u63e1\u3057\u3066\u3044\u308b\u3001\u305d\u3046\u3058\u3083\u306a\u304f\u3066\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3046\u6642\u306b\u30b3\u30fc\u30c9\u88dc\u5b8c\u3092\u8ce2\u304f\u3055\u305b\u305f\u3044\u3093\u3060\u300d\u3068\u3044\u3046\u65b9\u306f [typeshed: Collection of library stubs for Python, with static types](https://github.com/python/typeshed \"python/typeshed: Collection of library stubs for Python, with static types\") \u3078\u3069\u3046\u305e\u3002\u6709\u5fd7\u306b\u3088\u3063\u3066\u3001\u6a19\u6e96\u30e2\u30b8\u30e5\u30fc\u30eb\u3084\u5916\u90e8\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u70ba\u306e\u30b9\u30bf\u30d6\u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u3089\u308c\u3066\u3044\u307e\u3059\u3002\n\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u306f\u306a\u3044\u30b9\u30af\u30ea\u30d7\u30c8\u306b\u9069\u7528\u3059\u308b\u610f\u7fa9\u306f\u3001 Python \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u4f9d\u3089\u305a\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u307e\u305f\u3001 IDE \u306e\u88dc\u5b8c\u306e\u7cbe\u5ea6\u304c\u4e0a\u304c\u308b\u305f\u3081\u3001\u958b\u767a\u304c\u3057\u3084\u3059\u304f\u306a\u308b\u306e\u304c\u30e1\u30ea\u30c3\u30c8\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n# \u3069\u3093\u306a\u611f\u3058\u306a\u306e\n\u305d\u308c\u3067\u306f\u3001\u5b9f\u969b\u306b\u4f5c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u30b9\u30bf\u30d6\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f `.pyi` \u3067\u3059\u3002\u305d\u308c\u3092\u691c\u67fb\u3057\u305f\u3044\u30b3\u30fc\u30c9\u3068\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30fc\u306b\u7f6e\u304d\u307e\u3059\u3002\u578b\u60c5\u5831\u3092\u30b9\u30bf\u30d6\u306b\u79fb\u3057\u3066\u3057\u307e\u3048\u3070\u3001\u30b3\u30fc\u30c9\u672c\u4f53\u306b\u3064\u3044\u3066\u3044\u305f\u65b9(\u3042\u308c\u3070)\u306f\u6d88\u3057\u3066\u3082\u5927\u4e08\u592b\u3067\u3059\u3002\u3061\u306a\u307f\u306b PyCharm \u3067\u306f\u65b0\u898f\u4f5c\u6210\u306e\u4e00\u89a7\u306b `.pyi` \u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u624b\u52d5\u3067\u4f5c\u6210\u3059\u308b\u3068\u81ea\u52d5\u3067\u8a8d\u8b58\u3057\u3066\u3001\u4ee5\u964d\u3053\u3061\u3089\u3092\u53c2\u7167\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u578b\u63a8\u6e2c\u306e\u512a\u5148\u9806\u4f4d\u306f\u3001 docstring < \u30b3\u30fc\u30c9\u4e2d\u306e\u76f4\u66f8\u304d < \u30b9\u30bf\u30d6 \u306e\u3088\u3046\u3067\u3059\u3002\n\n\n----\n\n## Before\n\u3053\u3093\u306a\u30b3\u30fc\u30c9\u304c\u3042\u3063\u305f\u3068\u3057\u307e\u3059\u3002\u8aac\u660e\u7528\u306b\u3067\u304d\u308b\u3060\u3051\u8981\u7d20\u3092\u8a70\u3081\u8fbc\u3093\u3067\u4f5c\u3063\u305f\u306e\u3067\u4e0d\u81ea\u7136\u306a\u30b3\u30fc\u30c9\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u4e00\u5fdc\u52d5\u304f\u3082\u306e\u3067\u3059\u3002\n\n\u307e\u305a\u306f\u578b\u60c5\u5831\u304c\u4e00\u5207\u306a\u3044\u3069\u3053\u306b\u3067\u3082\u3042\u308b\u666e\u901a\u306e\u30b3\u30fc\u30c9\u3002\n\n```python\nimport json\nimport logging\nimport requests\nimport sys\n\n\nclass Resources:\n    POST_URL = \"https://httpbin.org/post\"\n\n    def __init__(self, auth, logger):\n        self.auth = auth\n        self.logger = logger\n        self.session = self.get_session()\n        self.res = self.get_resources()\n\n    def get_session(self):\n        return requests.session()\n\n    def get_resources(self):\n        return json.loads(self.session.post(\n            self.POST_URL, params=self.auth).text)\n\n    def get_infos(self, queue):\n        if isinstance(queue, str):\n            return str(self.res.get(queue, \"\"))\n        else:\n            return {key: self.res.get(key, \"\") for key in queue}\n\nclass FooLogger(logging.Logger):\n    def __init__(self):\n        super(FooLogger, self).__init__(\"foobar\", logging.INFO)\n        self.logger = logging.getLogger()\n\n        log_stdout = logging.StreamHandler(sys.stdout)\n        self.addHandler(log_stdout)\n\n\nr = Resources({\"name\": \"watashi\", u\"\u6587\u5b57\u5217\": u\"\u3082\u3058\u3082\u3058\"}, FooLogger())\nprint(r.get_infos([\"args\", \"origin\"]))\nprint(r.get_infos(\"origin\"))\n```\n\n\u3053\u308c\u306b\u578b\u60c5\u5831\u3092\u3064\u3051\u308b\u3068\u3053\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u6642\u70b9\u30673\u7cfb\u5c02\u7528\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n```python\nfrom typing import List, TypeVar, Union, Dict, Text\nimport json\nimport logging\nimport requests\nimport sys\n\nDatabaseType = Dict[Text, Union[int, Text, Dict[Text, Text], None]]\nLoggerType = TypeVar(\"LoggerType\", bound=logging.Logger)\n\n\nclass Resources:\n    POST_URL = \"https://httpbin.org/post\"\n\n    def __init__(self, auth: Dict[Text, Text], logger: LoggerType) -> None:\n        self.auth = auth\n        self.logger = logger\n        self.session = self.get_session()\n        self.res = self.get_resources()\n\n    def get_session(self) -> requests.Session:\n        return requests.session()\n\n    def get_resources(self) -> Dict:\n        return json.loads(self.session.post(\n            self.POST_URL, params=self.auth).text)\n\n    def get_infos(self, queue: Union[List[Text], Text]) ->\\\n            Union[DatabaseType, Text]:\n        if isinstance(queue, Text):\n            return str(self.res.get(queue, \"\"))\n        else:\n            return {key: self.res.get(key, \"\") for key in queue}\n\nclass FooLogger(logging.Logger):\n    def __init__(self) -> None:\n        super().__init__(\"foobar\", logging.INFO)\n        self.logger = logging.getLogger()\n\n        log_stdout = logging.StreamHandler(sys.stdout)\n        self.addHandler(log_stdout)\n\n\nr = Resources({\"name\": \"watashi\", \"\u6587\u5b57\u5217\": \"\u3082\u3058\u3082\u3058\"}, FooLogger())\nprint(r.get_infos([\"args\", \"origin\"]))\nprint(r.get_infos(\"origin\"))\n```\n\n\n## After\n\n\u3053\u308c\u306b\u5bfe\u3059\u308b\u30b9\u30bf\u30d6\u30d5\u30a1\u30a4\u30eb\u306e\u4e2d\u8eab\u306f\u3053\u3046\u306a\u308a\u307e\u3059\u3002`# type:`\u3068\u66f8\u3044\u3066\u3042\u308b\u306e\u306f\u5909\u6570\u306e\u578b\u3092\u660e\u793a\u3059\u308b\u70ba\u306e\u8a18\u6cd5\u3067\u3059\u3002\n\n```python\nfrom typing import List, TypeVar, Union, Dict, Text, overload\nimport logging\nimport requests\n\n\n# \u30a8\u30a4\u30ea\u30a2\u30b9\nDatabaseType = Dict[Text , Union[int, Text , Dict[Text , Text], None]]\n\n# \u30b8\u30a7\u30cd\u30ea\u30af\u30b9\nLoggerType = TypeVar(\"LoggerType\", bound=logging.Logger)\n\n\nclass Resources:\n    POST_URL = ...  # type: Text\n\n    def __init__(self, auth: Dict[Text , Text], logger: LoggerType) -> None:\n        self.auth = ...  # type: Dict[Text , Text]\n        self.logger = ...  # type: LoggerType\n        self.session = ... # type: requests.Session\n        self.res = ...  # type: Dict\n\n    def get_session(self) -> requests.Session: ...\n\n    def get_resources(self) -> Dict: ...\n\n    @overload\n    def get_infos(self, queue: Text) -> Text: ...\n    @overload\n    def get_infos(self, queue: List[Text]) -> DatabaseType: ...\n\n\nclass FooLogger(logging.Logger):\n    def __init__(self) -> None:\n        super().__init__(self, ...)\n        self.logger = ...  # type: LoggerType\n```\n\n## \u8aac\u660e\n\u307e\u305a\u30b9\u30bf\u30d6\u306f\u30b3\u30fc\u30c9\u306e\u6982\u89b3\u3092\u8868\u3059\u3082\u306e\u306a\u306e\u3067\u3001\u5b9f\u88c5\u306f\u66f8\u304b\u306a\u304f\u3066\u826f\u3044\u3093\u3067\u3059\u3002\u51e6\u7406\u306e\u672c\u4f53\u306f\u300c...\u300d\u3067\u7701\u7565\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u521d\u671f\u5024\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5f15\u6570\u3084\u5b9a\u6570\u3082\u3044\u304f\u3064\u304b\u3042\u308a\u307e\u3059\u304c\u3001\u5168\u3066\u300c...\u300d\u3067\u3059\u3002\u3086\u3048\u306b\u3053\u308c\u306f Python \u306e\u5f62\u3092\u3057\u305f\u5225\u7269\u3067\u3042\u3063\u3066\u3001\u5b9f\u884c\u306f\u51fa\u6765\u307e\u305b\u3093\u3002\n\n### @overload\n\u30b9\u30bf\u30d6\u7279\u6709\u306e\u8981\u7d20\u306f\u5b9f\u306f\u4e00\u3064\u3060\u3051\u306a\u3093\u3067\u3059\u3002\u307b\u304b\u306f typing \u30e2\u30b8\u30e5\u30fc\u30eb\u81ea\u4f53\u306e\u4f7f\u3044\u65b9\u3068\u540c\u3058\u3067\u3059\u3002\u305d\u306e\u4e00\u3064\u304c\u3053\u308c\u3067\u3059\u3002  \n\u4e0a\u306e\u30b3\u30fc\u30c9\u3067 get_infos() \u306f\u3001\u30ea\u30b9\u30c8\u304c\u4e0e\u3048\u3089\u308c\u308b\u3068\u8f9e\u66f8\u3092\u8fd4\u3057\u3001\u6587\u5b57\u5217\u3092\u4e0e\u3048\u3089\u308c\u308b\u3068\u6587\u5b57\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002\u672c\u4f53\u306e\u3088\u3046\u306b\u3001\n`def get_infos(self, queue: Union[List[str], str]) -> Union[DatabaseType, str]:`\n\u3068\u66f8\u3044\u3066\u3057\u307e\u3046\u3068\u3001 \u30ea\u30b9\u30c8\u2192\u30ea\u30b9\u30c8 \u306a\u306e\u304b\u3001 \u30ea\u30b9\u30c8\u2192\u6587\u5b57\u5217 \u306a\u306e\u304b\u533a\u5225\u3067\u304d\u307e\u305b\u3093\u3002\u3053\u3046\u3044\u3046\u3068\u304d\u306b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306e\u51fa\u756a\u3067\u3059\u3002\u5f15\u6570\u3068\u623b\u308a\u5024\u306e\u578b\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u660e\u78ba\u306b\u3067\u304d\u307e\u3059\u3002\n\n### \u6587\u5b57\u5217\n2\u7cfb\u306e\u5bfe\u5fdc\u3082\u8003\u3048\u308b\u306a\u3089\u3001\u6587\u5b57\u5217\u306e\u578b\u304c `str` \u3067\u306f\u4e0d\u81ea\u7136\u3067\u3059\u3002 `Text` \u306f\u300c\u6587\u5b57\u5217\u300d\u3068\u3057\u3066\u30013\u7cfb\u3067\u306f `str` \u3067\u30012\u7cfb\u3067\u306f `unicode` \u3068\u3057\u3066\u632f\u308b\u821e\u3063\u3066\u304f\u308c\u307e\u3059\u3002 `bytes` \u3082\u542b\u3081\u305f\u3044\u5834\u5408\u306b\u306f `AnyStr` \u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n### \u6570\u5b57\n`int` \u3068 `float` \u4e21\u65b9\u3092\u8868\u3059\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u306f\u7528\u610f\u3055\u308c\u3066\u3044\u306a\u3044\u3088\u3046\u3067\u3059\u3002\u306a\u306e\u3067\n`T = TypeVar('T', int, float)`\n\u3068\u3059\u308b\u306e\u304c\u7121\u96e3\u3067\u3057\u3087\u3046\u304b\u3002\n\n\n### `List`, `Tuple`, `Dict` \u306a\u3069\n\u901a\u5e38\u306e`list`\u3001`tuple`\u3001`dict`\u306b\u5bfe\u5fdc\u3059\u308b\u3082\u306e\u3067\u3059\u3002 typing \u30e2\u30b8\u30e5\u30fc\u30eb\u304b\u3089\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u305b\u305a\u306b\u5c0f\u6587\u5b57\u306e\u65b9\u3092\u4f7f\u3063\u3066\u3082\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002\u3068\u3044\u3046\u306e\u3082\u5b9f\u88c5\u3092\u898b\u308b\u3068\n\n```python\nclass List(list, MutableSequence[T], extra=list):\n\n    def __new__(cls, *args, **kwds):\n        if _geqv(cls, List):\n            raise TypeError(\"Type List cannot be instantiated; \"\n                            \"use list() instead\")\n        return list.__new__(cls, *args, **kwds)\n```\n\u3068\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u305f\u3060\u306e`list()`\u3068\u5927\u5dee\u306a\u3044\u3088\u3046\u3067\u3059\u3002\u3061\u306a\u307f\u306b `Dict[str, str]` \u306f \u300c\u30ad\u30fc\u306e\u578b\u304c str \u3001\u5024\u306e\u578b\u304c str \u300d\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002`Dict[str]`\u306f\u7121\u52b9\u3067\u3059\u3002\n\n### `Union` \u3068 `Optional`\nUnion \u306f\u6587\u5b57\u901a\u308a\u3001\u4f55\u304b\u3068\u4f55\u304b\u304c\u5408\u308f\u3055\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u8868\u73fe\u3059\u308b\u3068\u304d\u306b\u4f7f\u3044\u307e\u3059\u3002\n`Union[int, str]` \u3067\u306f int \u3068 str \u306e\u3069\u3061\u3089\u3082\u53d7\u3051\u53d6\u308c\u308b(or \u8fd4\u3059)\u3053\u3068\u3092\u8868\u3057\u307e\u3059\u3002\nOptional \u306f\u3001 Union \u306e\u8981\u7d20\u306e\u4e00\u3064\u304c `None` \u3067\u3042\u308b\u3082\u306e\u3092\u8868\u3057\u307e\u3059\u3002\u3064\u307e\u308a\u3001\n`Optional[str] == Union[str, None]`\n\u3067\u3059\u3002\u6628\u4eca\u8a71\u984c\u306e null \u5b89\u5168\u3092\u5b9f\u73fe\u3059\u308b(\u304b\u3082\u3057\u308c\u306a\u3044)\u3082\u306e\u3067\u3059\u3002\n\n\n### \u30a8\u30a4\u30ea\u30a2\u30b9\nget_infos() \u306f\u8f9e\u66f8\u3092\u8fd4\u3057\u307e\u3059\u3002\u3082\u3061\u308d\u3093\u5358\u306b Dict \u3068\u66f8\u304f\u306e\u3067\u3082\u5341\u5206\u3067\u3059\u304c\u8a73\u7d30\u306b\u5b9a\u7fa9\u3059\u308b\u3068\u3069\u3046\u306a\u308b\u3067\u3057\u3087\u3046\u3002\n`Dict[str, Dict[str, Union[int, str, List[str]]]]`\n\u3053\u3093\u306a\u306b\u9577\u3044\u3082\u306e\u3092\u4f55\u56de\u3082\u66f8\u304f\u306e\u306f\u9762\u5012\u3067\u3059\u3002\u30b3\u30d4\u30da\u306f\u30d0\u30b0\u306e\u3082\u3068\u3067\u3059\u3002\u5909\u6570\u306b\u4e38\u3081\u8fbc\u3093\u3067\u3057\u307e\u3044\u307e\u3057\u3087\u3046\u3002\u3053\u308c\u3092\u30a8\u30a4\u30ea\u30a2\u30b9\u3068\u8a00\u3044\u307e\u3059\u3002\n\n### \u30b8\u30a7\u30cd\u30ea\u30af\u30b9\nFooLogger \u306f\u30ed\u30b0\u51fa\u529b\u7528\u306e\u30af\u30e9\u30b9\u3067\u3059\u304c\u3001\u30e1\u30a4\u30f3\u306e\u51e6\u7406\u306b\u3068\u3063\u3066\u306f\u305d\u306e\u5177\u4f53\u7684\u306a\u540d\u524d\u306f\u3069\u3046\u3067\u3082\u3088\u304f\u3001\u305f\u3060 logging \u3092\u7d99\u627f\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u304c\u91cd\u8981\u3067\u3059\u3002\u305d\u3046\u3044\u3046\u6642\u306b\u3053\u308c\u3092\u4f7f\u3044\u307e\u3059\u3002 Python \u6d41\u306e\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u306e\u66f8\u304d\u65b9\u306f\u3053\u3046\u3067\u3059: `T = TypeVar(\"T\", bound=logging.Logger)`\n\u3053\u306e\u5834\u5408 `T` \u306f logging \u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3067\u3059\u3002\u4e00\u822c\u306b\u306f`bound`\u3092\u6307\u5b9a\u305b\u305a\u306b `T = TypeVar(\"T\")` \u3068\u66f8\u304f\u3053\u3068\u306e\u65b9\u304c\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3061\u306a\u307f\u306b `LoggerType = TypeVar(\"T\")` \u306f\u99c4\u76ee\u3067\u3059\u3002\u5909\u6570\u540d\u3068\u6587\u5b57\u5217\u306e\u4e2d\u306e\u578b\u540d\u306f\u4e00\u81f4\u3057\u3066\u3044\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002\n", "tags": ["Python", "python3", "python2.7"]}