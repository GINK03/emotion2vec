{"context": " More than 1 year has passed since last update.\u4f55\u5e74\u304b\u304a\u304d\u306b\u5fd8\u308c\u308b\u306e\u3067\u30e1\u30e2\u3057\u3066\u304a\u304f\u3002\nTCP\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u884c\u3046\u305f\u3081\u306b\u306f\u63a5\u7d9a\u5148\u306e\u30db\u30b9\u30c8\u540d\u304b\u3089\u30a2\u30c9\u30ec\u30b9\u3092\u77e5\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u305d\u306e\u305f\u3081\u306b\u306f\u4e8c\u3064\u306e\u65b9\u6cd5\u304c\u3042\u308b\u3002\n\ngethostbyname()\u3092\u4f7f\u3046\u3002\ngetaddrinfo()\u3092\u4f7f\u3046\u3002\n\n\u3069\u3061\u3089\u306e\u65b9\u6cd5\u3082\u6700\u7d42\u7684\u306b\u306fconnect()\u306b\u63a5\u7d9a\u5148\u306e\u30a2\u30c9\u30ec\u30b9\u304c\u683c\u7d0d\u3055\u308c\u305fsockaddr\u69cb\u9020\u4f53\u3092\u6e21\u3059\u3002\nsockaddr\u69cb\u9020\u4f53\u3068\u306f\u3001\u63a5\u7d9a\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u5c64\u30ec\u30d9\u30eb\u306e\u901a\u4fe1\u30d7\u30ed\u30c8\u30b3\u30eb\u3068\u30a2\u30c9\u30ec\u30b9\u3068\u30dd\u30fc\u30c8\u306e\u60c5\u5831\u3092\u683c\u7d0d\u3057\u305f\u69cb\u9020\u4f53\u306e\u3053\u3068\u3002\n\u305f\u3060\u3057\u3001\u3053\u308c\u306f\u305d\u306e\u307e\u307e\u3067\u306f\u4f7f\u308f\u308c\u306a\u3044\u3002\nIPv4\u306e\u5834\u5408\u306fsockaddr_in\u69cb\u9020\u4f53\u306b\u30ad\u30e3\u30b9\u30c8\u3055\u308c\u3066\u4f7f\u7528\u3055\u308c\u308b\u3002\nIPv6\u306e\u5834\u5408\u306fsockaddr_in6\u69cb\u9020\u4f53\u306b\u30ad\u30e3\u30b9\u30c8\u3055\u308c\u308b\u3002\n\u30b5\u30fc\u30d0\u30fc\u30bd\u30b1\u30c3\u30c8\u306a\u3069\u3067\u53d7\u3051\u53d6\u308b\u5834\u5408\u306f\u4f55\u304c\u6765\u3066\u3082\u3044\u3044\u3088\u3046\u306b\u5341\u5206\u306a\u5927\u304d\u3055\u3092\u6301\u3064sockaddr_storage\u69cb\u9020\u4f53\u306b\u30ad\u30e3\u30b9\u30c8\u3055\u308c\u308b\u3002\n\u307e\u305f\u3001\u30db\u30b9\u30c8\u540d\u304c\u8907\u6570\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u6301\u3064\u5834\u5408\u306b\u8907\u6570\u306esockaddr\u69cb\u9020\u4f53\u3092\u30ea\u30f3\u30af\u30ea\u30b9\u30c8\u3067\u4fdd\u6301\u3059\u308baddrinfo\u69cb\u9020\u4f53\u3084hostent\u69cb\u9020\u4f53\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\nhas-a\u306e\u95a2\u4fc2\u3084\u540c\u4e00\u30ec\u30d9\u30eb\u306e\u968e\u5c64\u69cb\u9020\u3067\u898b\u308b\u3068\u3053\u3046\u306a\u308b\u3002\naddrinfo\u69cb\u9020\u4f53 (48\u30d0\u30a4\u30c8)\n\u30e1\u30f3\u30d0\n|-- sockaddr\u69cb\u9020\u4f53 (16\u30d0\u30a4\u30c8)\n|-- sockaddr_in\u69cb\u9020\u4f53 (16\u30d0\u30a4\u30c8)\n\u3000\u3000\u3000\u30e1\u30f3\u30d0\n\u3000\u3000\u3000|-- in_addr\u69cb\u9020\u4f53 [iPv4\u306e\u30a2\u30c9\u30ec\u30b9\u5024]\n|-- sockaddr_in6\u69cb\u9020\u4f53 (28\u30d0\u30a4\u30c8)\n\u3000\u3000\u3000\u30e1\u30f3\u30d0\n\u3000\u3000\u3000|-- in6_addr\u69cb\u9020\u4f53 [iPv6\u306e\u30a2\u30c9\u30ec\u30b9\u5024]\n|-- sockaddr_storage\u69cb\u9020\u4f53 (128\u30d0\u30a4\u30c8)\n\n\ngethostbyname()\u3092\u4f7f\u3046\ngethostbyname()\u306b\u6587\u5b57\u5217\u3067\u30db\u30b9\u30c8\u540d\u3092\u6e21\u3059\u3068hostent\u69cb\u9020\u4f53\u304c\u53d6\u5f97\u3067\u304d\u308b\u3002\u3061\u306a\u307f\u306bgethostbyname()\u306f\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u3067\u306f\u306a\u3044\u306e\u3067\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u306a\u95a2\u6570\u306fgethostbyname_r()\u306b\u306a\u308b\u3002\n// \u540d\u524d\u89e3\u6c7a.\nstruct hostent *hp = gethostbyname(\"HOST NAME\");\n\n// \u69cb\u9020\u4f53\u521d\u671f\u5316.\nstruct sockaddr_in addr;\nmemset(&addr, 0, sizeof(addr));\n\n// \u8907\u6570\u306e\u30a2\u30c9\u30ec\u30b9\u306e\u4e2d\u304b\u3089\u6700\u521d\u306e\u3082\u306e\u3092\u9078\u629e.\naddr.sin_addr = *(struct in_addr*)hp->h_addr_list[0];\n\n// \u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u30fb\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u6307\u5b9a\u3059\u308b.\naddr.sin_family = AF_INET;\n\n// \u30dd\u30fc\u30c8\u3092\u6307\u5b9a\u3059\u308b.\naddr.sin_port = htons(PORT);\n\n// \u30bd\u30b1\u30c3\u30c8\u4f5c\u6210.\nif ((_socket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP))<0){\n    return -1;\n}\n\n// sockaddr\u69cb\u9020\u4f53(sockaddr_in\u69cb\u9020\u4f53)\u3092\u6e21\u3057\u3066\u63a5\u7d9a.\nif (connect(_socket, (struct sockaddr *)&addr, sizeof(addr))<0){\n    return -1;\n}\n\n\ngetaddrinfo()\u3092\u4f7f\u3046\ngetaddrinfo()\u306f\u30db\u30b9\u30c8\u540d\u3068\u30d2\u30f3\u30c8\u3068\u306a\u308b\u60c5\u5831\u3092\u683c\u7d0d\u3057\u305faddrinfo\u69cb\u9020\u4f53\u3092\u6e21\u3059\u3053\u3068\u3067\u5b8c\u5168\u306aaddrinfo\u69cb\u9020\u4f53\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u95a2\u6570\u3002\nstruct addrinfo hints, *address;\nint errcode = 0;\nint socket = 0;\n\n// \u30d2\u30f3\u30c8\u3068\u306a\u308baddrinfo\u69cb\u9020\u4f53\u3092\u521d\u671f\u5316.\nmemset(&hints, 0, sizeof(hints));\n\n// \u30d2\u30f3\u30c8\u3068\u3057\u3066IP\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30d7\u30ed\u30c8\u30b3\u30eb\u3068TCP\u901a\u4fe1\u306e\u30bd\u30b1\u30c3\u30c8\u30bf\u30a4\u30d7\u3092\u6307\u5b9a\nhints.ai_family = AF_INET;\nhints.ai_socktype = SOCK_STREAM;\n\n// addrinfo\u69cb\u9020\u4f53\u3092\u53d6\u5f97\u3059\u308b.\nif((errcode = getaddrinfo(\"\u30db\u30b9\u30c8\u540d\", \u30dd\u30fc\u30c8\u756a\u53f7, &hints, & address)) != 0){\n    return -1;\n}\n\n// \u5b8c\u5168\u306aaddrinfo\u69cb\u9020\u4f53\u3068\u3057\u3066address\u304c\u624b\u306b\u5165\u3063\u305f\u306e\u3067\u4ee5\u5f8c\u306f\u3053\u308c\u3092\u4f7f\u3046.\n\n// \u30bd\u30b1\u30c3\u30c8\u30bf\u30a4\u30d7\u3084\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u6307\u5b9a\u3057\u3066\u30bd\u30b1\u30c3\u30c8\u3092\u4f5c\u6210\u3059\u308b.\nif((socket = socket(address->ai_family, address->ai_socktype, address->ai_protocol)) == -1){\n    freeaddrinfo(address);\n    return -1;\n}\n\n// addrinfo\u69cb\u9020\u4f53\u306esockaddr\u69cb\u9020\u4f53\u3092\u6e21\u3057\u3066\u63a5\u7d9a.\nif(::connect(socket, address->ai_addr, address->ai_addrlen) == -1){\n    close(socket);\n    freeaddrinfo(address);\n    return -1;\n}\n\nfreeaddrinfo(address);\n\n\u5404\u69cb\u9020\u4f53\u306fLinux\u3067\u306f\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\n// 32\u30d0\u30a4\u30c8\nstruct hostent {\n    char    *h_name;    /* official name of host */\n    char    **h_aliases;    /* alias list */\n    int h_addrtype; /* host address type */\n    int h_length;   /* length of address */\n    char    **h_addr_list;  /* list of addresses from name server */\n#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)\n#define h_addr  h_addr_list[0]  /* address, for backward compatibility */\n#endif /* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE) */\n};\n\n// 48\u30d0\u30a4\u30c8\nstruct addrinfo {\n    int ai_flags;   /* AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST */\n    int ai_family;  /* PF_xxx */\n    int ai_socktype;    /* SOCK_xxx */\n    int ai_protocol;    /* 0 or IPPROTO_xxx for IPv4 and IPv6 */\n    socklen_t ai_addrlen;   /* length of ai_addr */\n    char    *ai_canonname;  /* canonical name for hostname */\n    struct  sockaddr *ai_addr;  /* binary address */\n    struct  addrinfo *ai_next;  /* next structure in linked list */\n};\n\n// 16\u30d0\u30a4\u30c8\nstruct sockaddr {\n    __uint8_t   sa_len;     /* total length */\n    sa_family_t sa_family;  /* [XSI] address family */\n    char        sa_data[14];    /* [XSI] addr value (actually larger) */\n};\n\n// 16\u30d0\u30a4\u30c8\nstruct sockaddr_in {\n    __uint8_t   sin_len;\n    sa_family_t sin_family;\n    in_port_t   sin_port;\n    struct  in_addr sin_addr;\n    char        sin_zero[8];\n};\n\n// 4\u30d0\u30a4\u30c8\nstruct in_addr {\n    in_addr_t s_addr;\n};\n\n\n// 28\u30d0\u30a4\u30c8\nstruct sockaddr_in6 {\n    __uint8_t   sin6_len;   /* length of this struct(sa_family_t) */\n    sa_family_t sin6_family;    /* AF_INET6 (sa_family_t) */\n    in_port_t   sin6_port;  /* Transport layer port # (in_port_t) */\n    __uint32_t  sin6_flowinfo;  /* IP6 flow information */\n    struct in6_addr sin6_addr;  /* IP6 address */\n    __uint32_t  sin6_scope_id;  /* scope zone index */\n};\n\n// 128\u30d0\u30a4\u30c8\nstruct sockaddr_storage {\n    __uint8_t   ss_len;     /* address length */\n    sa_family_t ss_family;  /* [XSI] address family */\n    char            __ss_pad1[_SS_PAD1SIZE];\n    __int64_t   __ss_align; /* force structure storage alignment */\n    char            __ss_pad2[_SS_PAD2SIZE];\n};\n\n\u3064\u3044\u3067\u306b\u30a2\u30c9\u30ec\u30b9\u30d5\u30a1\u30df\u30ea\u30fc\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u306b\u6307\u5b9a\u3067\u304d\u308b\u3082\u306e\u306e\u7a2e\u985e\u3092\u66f8\u3044\u3066\u304a\u304f\u3002\n\n\n\n\u30a2\u30c9\u30ec\u30b9\u30d5\u30a1\u30df\u30ea\u30fc\n\u610f\u5473\n\n\n\n\nAF_INET\n\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u30d7\u30ed\u30c8\u30b3\u30eb\n\n\nAF_UNIX\nUNIX\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u30c9\u30e1\u30a4\u30f3\n\n\nAF_ISO\nISO\u6a19\u6e96\u30d7\u30ed\u30c8\u30b3\u30eb\n\n\nAF_NS\nXeroxNetworkSystems\u30d7\u30ed\u30c8\u30b3\u30eb\n\n\nAF_IPX\nNovellIPX\u30d7\u30ed\u30c8\u30b3\u30eb\n\n\nAF_APPLETALK\nAppletalk\n\n\nPF_INET\nAF_INET\u3068\u540c\u3058\n\n\nPF_INET6\nIPv6\n\n\nPF_IPX\nIPX Novell \u30d7\u30ed\u30c8\u30b3\u30eb\n\n\nPF_NETLINK\n\u30ab\u30fc\u30cd\u30eb\u30e6\u30fc\u30b6\u30c7\u30d0\u30a4\u30b9\n\n\nPF_X25\nITU-T X.25(ISO-8208\u30d7\u30ed\u30c8\u30b3\u30eb)\n\n\nPF_AX25\n\u7121\u7dda AX.25\u30d7\u30ed\u30c8\u30b3\u30eb\n\n\nPF_ATMPVC\nATM PVC\n\n\nPF_APPLETALK\nAppletalk\n\n\nPF_PACKET\n\u4f4e\u30ec\u30d9\u30eb\u306e\u30d1\u30b1\u30c3\u30c8\n\n\n\n\u4f55\u5e74\u304b\u304a\u304d\u306b\u5fd8\u308c\u308b\u306e\u3067\u30e1\u30e2\u3057\u3066\u304a\u304f\u3002\n\nTCP\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u884c\u3046\u305f\u3081\u306b\u306f\u63a5\u7d9a\u5148\u306e\u30db\u30b9\u30c8\u540d\u304b\u3089\u30a2\u30c9\u30ec\u30b9\u3092\u77e5\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u305d\u306e\u305f\u3081\u306b\u306f\u4e8c\u3064\u306e\u65b9\u6cd5\u304c\u3042\u308b\u3002\n\n+ gethostbyname()\u3092\u4f7f\u3046\u3002\n+ getaddrinfo()\u3092\u4f7f\u3046\u3002\n\n\u3069\u3061\u3089\u306e\u65b9\u6cd5\u3082\u6700\u7d42\u7684\u306b\u306fconnect()\u306b\u63a5\u7d9a\u5148\u306e\u30a2\u30c9\u30ec\u30b9\u304c\u683c\u7d0d\u3055\u308c\u305fsockaddr\u69cb\u9020\u4f53\u3092\u6e21\u3059\u3002\n\nsockaddr\u69cb\u9020\u4f53\u3068\u306f\u3001\u63a5\u7d9a\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u5c64\u30ec\u30d9\u30eb\u306e\u901a\u4fe1\u30d7\u30ed\u30c8\u30b3\u30eb\u3068\u30a2\u30c9\u30ec\u30b9\u3068\u30dd\u30fc\u30c8\u306e\u60c5\u5831\u3092\u683c\u7d0d\u3057\u305f\u69cb\u9020\u4f53\u306e\u3053\u3068\u3002\n\n\u305f\u3060\u3057\u3001\u3053\u308c\u306f\u305d\u306e\u307e\u307e\u3067\u306f\u4f7f\u308f\u308c\u306a\u3044\u3002\nIPv4\u306e\u5834\u5408\u306fsockaddr_in\u69cb\u9020\u4f53\u306b\u30ad\u30e3\u30b9\u30c8\u3055\u308c\u3066\u4f7f\u7528\u3055\u308c\u308b\u3002\nIPv6\u306e\u5834\u5408\u306fsockaddr_in6\u69cb\u9020\u4f53\u306b\u30ad\u30e3\u30b9\u30c8\u3055\u308c\u308b\u3002\n\u30b5\u30fc\u30d0\u30fc\u30bd\u30b1\u30c3\u30c8\u306a\u3069\u3067\u53d7\u3051\u53d6\u308b\u5834\u5408\u306f\u4f55\u304c\u6765\u3066\u3082\u3044\u3044\u3088\u3046\u306b\u5341\u5206\u306a\u5927\u304d\u3055\u3092\u6301\u3064sockaddr_storage\u69cb\u9020\u4f53\u306b\u30ad\u30e3\u30b9\u30c8\u3055\u308c\u308b\u3002\n\n\u307e\u305f\u3001\u30db\u30b9\u30c8\u540d\u304c\u8907\u6570\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u6301\u3064\u5834\u5408\u306b\u8907\u6570\u306esockaddr\u69cb\u9020\u4f53\u3092\u30ea\u30f3\u30af\u30ea\u30b9\u30c8\u3067\u4fdd\u6301\u3059\u308baddrinfo\u69cb\u9020\u4f53\u3084hostent\u69cb\u9020\u4f53\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\n\nhas-a\u306e\u95a2\u4fc2\u3084\u540c\u4e00\u30ec\u30d9\u30eb\u306e\u968e\u5c64\u69cb\u9020\u3067\u898b\u308b\u3068\u3053\u3046\u306a\u308b\u3002\n\n```\naddrinfo\u69cb\u9020\u4f53 (48\u30d0\u30a4\u30c8)\n\u30e1\u30f3\u30d0\n|-- sockaddr\u69cb\u9020\u4f53 (16\u30d0\u30a4\u30c8)\n|-- sockaddr_in\u69cb\u9020\u4f53 (16\u30d0\u30a4\u30c8)\n\u3000\u3000\u3000\u30e1\u30f3\u30d0\n\u3000\u3000\u3000|-- in_addr\u69cb\u9020\u4f53 [iPv4\u306e\u30a2\u30c9\u30ec\u30b9\u5024]\n|-- sockaddr_in6\u69cb\u9020\u4f53 (28\u30d0\u30a4\u30c8)\n\u3000\u3000\u3000\u30e1\u30f3\u30d0\n\u3000\u3000\u3000|-- in6_addr\u69cb\u9020\u4f53 [iPv6\u306e\u30a2\u30c9\u30ec\u30b9\u5024]\n|-- sockaddr_storage\u69cb\u9020\u4f53 (128\u30d0\u30a4\u30c8)\n```\n\n\n\n\n\n\n#gethostbyname()\u3092\u4f7f\u3046\n\ngethostbyname()\u306b\u6587\u5b57\u5217\u3067\u30db\u30b9\u30c8\u540d\u3092\u6e21\u3059\u3068hostent\u69cb\u9020\u4f53\u304c\u53d6\u5f97\u3067\u304d\u308b\u3002\u3061\u306a\u307f\u306bgethostbyname()\u306f\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u3067\u306f\u306a\u3044\u306e\u3067\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u306a\u95a2\u6570\u306fgethostbyname_r()\u306b\u306a\u308b\u3002\n\n\n```c\n// \u540d\u524d\u89e3\u6c7a.\nstruct hostent *hp = gethostbyname(\"HOST NAME\");\n\n// \u69cb\u9020\u4f53\u521d\u671f\u5316.\nstruct sockaddr_in addr;\nmemset(&addr, 0, sizeof(addr));\n\n// \u8907\u6570\u306e\u30a2\u30c9\u30ec\u30b9\u306e\u4e2d\u304b\u3089\u6700\u521d\u306e\u3082\u306e\u3092\u9078\u629e.\naddr.sin_addr = *(struct in_addr*)hp->h_addr_list[0];\n\n// \u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u30fb\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u6307\u5b9a\u3059\u308b.\naddr.sin_family = AF_INET;\n\n// \u30dd\u30fc\u30c8\u3092\u6307\u5b9a\u3059\u308b.\naddr.sin_port = htons(PORT);\n\n// \u30bd\u30b1\u30c3\u30c8\u4f5c\u6210.\nif ((_socket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP))<0){\n    return -1;\n}\n\n// sockaddr\u69cb\u9020\u4f53(sockaddr_in\u69cb\u9020\u4f53)\u3092\u6e21\u3057\u3066\u63a5\u7d9a.\nif (connect(_socket, (struct sockaddr *)&addr, sizeof(addr))<0){\n    return -1;\n}\n```\n\n#getaddrinfo()\u3092\u4f7f\u3046\n\ngetaddrinfo()\u306f\u30db\u30b9\u30c8\u540d\u3068\u30d2\u30f3\u30c8\u3068\u306a\u308b\u60c5\u5831\u3092\u683c\u7d0d\u3057\u305faddrinfo\u69cb\u9020\u4f53\u3092\u6e21\u3059\u3053\u3068\u3067\u5b8c\u5168\u306aaddrinfo\u69cb\u9020\u4f53\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u95a2\u6570\u3002\n\n```c\nstruct addrinfo hints, *address;\nint errcode = 0;\nint socket = 0;\n    \n// \u30d2\u30f3\u30c8\u3068\u306a\u308baddrinfo\u69cb\u9020\u4f53\u3092\u521d\u671f\u5316.\nmemset(&hints, 0, sizeof(hints));\n\n// \u30d2\u30f3\u30c8\u3068\u3057\u3066IP\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30d7\u30ed\u30c8\u30b3\u30eb\u3068TCP\u901a\u4fe1\u306e\u30bd\u30b1\u30c3\u30c8\u30bf\u30a4\u30d7\u3092\u6307\u5b9a\nhints.ai_family = AF_INET;\nhints.ai_socktype = SOCK_STREAM;\n\n// addrinfo\u69cb\u9020\u4f53\u3092\u53d6\u5f97\u3059\u308b.\nif((errcode = getaddrinfo(\"\u30db\u30b9\u30c8\u540d\", \u30dd\u30fc\u30c8\u756a\u53f7, &hints, & address)) != 0){\n    return -1;\n}\n\n// \u5b8c\u5168\u306aaddrinfo\u69cb\u9020\u4f53\u3068\u3057\u3066address\u304c\u624b\u306b\u5165\u3063\u305f\u306e\u3067\u4ee5\u5f8c\u306f\u3053\u308c\u3092\u4f7f\u3046.\n\n// \u30bd\u30b1\u30c3\u30c8\u30bf\u30a4\u30d7\u3084\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u6307\u5b9a\u3057\u3066\u30bd\u30b1\u30c3\u30c8\u3092\u4f5c\u6210\u3059\u308b.\nif((socket = socket(address->ai_family, address->ai_socktype, address->ai_protocol)) == -1){\n    freeaddrinfo(address);\n    return -1;\n}\n\n// addrinfo\u69cb\u9020\u4f53\u306esockaddr\u69cb\u9020\u4f53\u3092\u6e21\u3057\u3066\u63a5\u7d9a.\nif(::connect(socket, address->ai_addr, address->ai_addrlen) == -1){\n    close(socket);\n    freeaddrinfo(address);\n    return -1;\n}\n\nfreeaddrinfo(address);\n```\n\n\n\u5404\u69cb\u9020\u4f53\u306fLinux\u3067\u306f\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\n\n```c\n// 32\u30d0\u30a4\u30c8\nstruct hostent {\n\tchar\t*h_name;\t/* official name of host */\n\tchar\t**h_aliases;\t/* alias list */\n\tint\th_addrtype;\t/* host address type */\n\tint\th_length;\t/* length of address */\n\tchar\t**h_addr_list;\t/* list of addresses from name server */\n#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)\n#define\th_addr\th_addr_list[0]\t/* address, for backward compatibility */\n#endif /* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE) */\n};\n\n// 48\u30d0\u30a4\u30c8\nstruct addrinfo {\n\tint\tai_flags;\t/* AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST */\n\tint\tai_family;\t/* PF_xxx */\n\tint\tai_socktype;\t/* SOCK_xxx */\n\tint\tai_protocol;\t/* 0 or IPPROTO_xxx for IPv4 and IPv6 */\n\tsocklen_t ai_addrlen;\t/* length of ai_addr */\n\tchar\t*ai_canonname;\t/* canonical name for hostname */\n\tstruct\tsockaddr *ai_addr;\t/* binary address */\n\tstruct\taddrinfo *ai_next;\t/* next structure in linked list */\n};\n\n// 16\u30d0\u30a4\u30c8\nstruct sockaddr {\n\t__uint8_t\tsa_len;\t\t/* total length */\n\tsa_family_t\tsa_family;\t/* [XSI] address family */\n\tchar\t\tsa_data[14];\t/* [XSI] addr value (actually larger) */\n};\n\n// 16\u30d0\u30a4\u30c8\nstruct sockaddr_in {\n\t__uint8_t\tsin_len;\n\tsa_family_t\tsin_family;\n\tin_port_t\tsin_port;\n\tstruct\tin_addr sin_addr;\n\tchar\t\tsin_zero[8];\n};\n\n// 4\u30d0\u30a4\u30c8\nstruct in_addr {\n\tin_addr_t s_addr;\n};\n\n\n// 28\u30d0\u30a4\u30c8\nstruct sockaddr_in6 {\n\t__uint8_t\tsin6_len;\t/* length of this struct(sa_family_t) */\n\tsa_family_t\tsin6_family;\t/* AF_INET6 (sa_family_t) */\n\tin_port_t\tsin6_port;\t/* Transport layer port # (in_port_t) */\n\t__uint32_t\tsin6_flowinfo;\t/* IP6 flow information */\n\tstruct in6_addr\tsin6_addr;\t/* IP6 address */\n\t__uint32_t\tsin6_scope_id;\t/* scope zone index */\n};\n\n// 128\u30d0\u30a4\u30c8\nstruct sockaddr_storage {\n\t__uint8_t\tss_len;\t\t/* address length */\n\tsa_family_t\tss_family;\t/* [XSI] address family */\n\tchar\t\t\t__ss_pad1[_SS_PAD1SIZE];\n\t__int64_t\t__ss_align;\t/* force structure storage alignment */\n\tchar\t\t\t__ss_pad2[_SS_PAD2SIZE];\n};\n```\n\n\u3064\u3044\u3067\u306b\u30a2\u30c9\u30ec\u30b9\u30d5\u30a1\u30df\u30ea\u30fc\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u306b\u6307\u5b9a\u3067\u304d\u308b\u3082\u306e\u306e\u7a2e\u985e\u3092\u66f8\u3044\u3066\u304a\u304f\u3002\n\n|\u30a2\u30c9\u30ec\u30b9\u30d5\u30a1\u30df\u30ea\u30fc|\u610f\u5473|\n|:--:|:---:|\n|AF_INET|\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u30d7\u30ed\u30c8\u30b3\u30eb|\n|AF_UNIX|UNIX\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u30c9\u30e1\u30a4\u30f3|\n|AF_ISO|ISO\u6a19\u6e96\u30d7\u30ed\u30c8\u30b3\u30eb|\n|AF_NS|XeroxNetworkSystems\u30d7\u30ed\u30c8\u30b3\u30eb|\n|AF_IPX|NovellIPX\u30d7\u30ed\u30c8\u30b3\u30eb|\n|AF_APPLETALK|Appletalk|\n|PF_INET|AF_INET\u3068\u540c\u3058|\n|PF_INET6|IPv6|\n|PF_IPX|IPX Novell \u30d7\u30ed\u30c8\u30b3\u30eb|\n|PF_NETLINK|\u30ab\u30fc\u30cd\u30eb\u30e6\u30fc\u30b6\u30c7\u30d0\u30a4\u30b9|\n|PF_X25|ITU-T X.25(ISO-8208\u30d7\u30ed\u30c8\u30b3\u30eb)|\n|PF_AX25|\u7121\u7dda AX.25\u30d7\u30ed\u30c8\u30b3\u30eb|\n|PF_ATMPVC|ATM PVC|\n|PF_APPLETALK|Appletalk|\n|PF_PACKET|\u4f4e\u30ec\u30d9\u30eb\u306e\u30d1\u30b1\u30c3\u30c8|\n", "tags": ["C", "C++", "TCP", "HTTP", "\u30cd\u30c3\u30c8\u30ef\u30fc\u30af"]}