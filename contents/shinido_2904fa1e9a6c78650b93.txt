{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e2\u3064\u306e\u753b\u50cf\uff0c\u5de6\u3068\u53f3\u306e\u8272\u3092\u6bd4\u3079\u305f\u3068\u304d\u306b\u3069\u3061\u3089\u306e\u65b9\u304c\u8272\u304c\u8fd1\u3044\u3068\u601d\u3044\u307e\u3059\u304b\uff1f\n\n #FF0000\u3068#400000\n\n #FF0000\u3068#FFBF00\n\u5358\u7d14\u306bRGB\u5024\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\u3059\u308b\u3068\u4e8c\u3064\u306e\u8272\u306e\u8ddd\u96e2\u306f\u540c\u3058\uff0e\n\u3057\u304b\u3057\uff11\u3064\u76ee\u306e\u753b\u50cf\u306f\u5358\u306b\u6697\u304f\u306a\u3063\u305f\u3060\u3051\u306a\u306e\u306b\u5bfe\u3057\u3066\uff0c\uff12\u3064\u76ee\u306e\u753b\u50cf\u306f\u8272\u76f8\u304c\u5909\u308f\u3063\u3066\u3044\u308b\u305f\u3081\uff0c\u4f8b\u3048\u3070\u5199\u771f\u306e\u30de\u30c3\u30c1\u30f3\u30b0\u3092\u53d6\u308b\u5834\u5408\u306f\u4e0a\u306e\u65b9\u304c\u4f3c\u305f\u8272\u3068\u3057\u3066\u5224\u5225\u3057\u305f\u65b9\u304c\u90fd\u5408\u304c\u826f\u304f\u306a\u3063\u305f\u308a\u3059\u308b\uff0e\n\u3053\u3046\u3057\u305f\u8272\u306e\u8ddd\u96e2\uff0c\u8272\u5dee\u306e\u8a08\u7b97\u306b\u3064\u3044\u3066\u5b9f\u88c5\u3057\u3066\u307f\u305f\uff0e\n\u30bd\u30fc\u30b9\u306fJava 8\u3092\u524d\u63d0\u306b\u66f8\u3044\u3066\u3044\u308b\u304c\uff0cAndroid\u3067\u3082\u52d5\u4f5c\u3059\u308b\uff08\u306f\u305a\uff09\uff0e\u305f\u3060\u3057\uff0cAndroid\u3067\u306fColor\u30af\u30e9\u30b9\u304c\u9055\u3046\u305f\u3081\u9069\u5b9c\u5909\u66f4\u3057\u3066\u307b\u3057\u3044\uff0e\n\n\u4e0b\u6e96\u5099\nJava\u3068Android\u306eColor\u30af\u30e9\u30b9\u306e\u9055\u3044\u3084\uff0cRGB\u5024\u306e\u4fdd\u5b58\u306a\u3069\u3092\u76ee\u7684\u3068\u3057\u3066\u4e0b\u8a18\u306e\u30af\u30e9\u30b9\u3092\u6e96\u5099\u3059\u308b\uff0eRGB\u5024\u306eint\u5024\u3092\u53d7\u3051\u53d6\u308b\u3068\u305d\u308c\u305e\u308c\u3092double\u306e\u5024\u3068\u3057\u3066\u914d\u5217\u3092\u4f5c\u6210\u3057\uff0c\u4fdd\u5b58\u3059\u308b\uff0e\u767d\u3068\u9ed2\u306b\u3064\u3044\u3066\u306f\u5f8c\u3067\u4f7f\u7528\u3059\u308b\u305f\u3081static\u306a\u5024\u3068\u3057\u3066\u4fdd\u6301\u3057\u3066\u3044\u308b\uff0e\n\nDColor.java\nimport java.awt.*;\n\npublic class DColor {\n    public static final DColor WHITE = new DColor(Color.WHITE.getRGB());\n    public static final DColor BLACK = new DColor(Color.BLACK.getRGB());\n\n    public static double getRed(int rgb){\n        return ((0xff0000 & rgb) >> 16) / 255d;\n    }\n\n    public static double getGreen(int rgb){\n        return ((0xff00 & rgb) >> 8) / 255d;\n    }\n\n    public static double getBlue(int rgb){\n        return (0xff & rgb) / 255d;\n    }\n\n    private final double[] color;\n\n    public DColor(int rgb){\n        color = new double[]{getRed(rgb), getGreen(rgb), getBlue(rgb)};\n    }\n\n    public DColor(double r, double g, double b){\n        color = new double[]{r, g, b};\n    }\n\n    public double r(){\n        return color[0];\n    }\n\n    public double g(){\n        return color[1];\n    }\n\n    public double b(){\n        return color[2];\n    }\n\n    public double[] color(){\n        return color;\n    }\n}\n\n\n\u5f8c\uff0c\u8272\u5dee\u3092\u53d6\u5f97\u3059\u308b\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304f\uff0e\n\nColorDifference.java\npublic interface ColorDifference {\n    public double difference(DColor src, DColor dst);\n}\n\n\n\nRGB\u8868\u8272\u7cfb\u3067\u306e\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u8ddd\u96e2\u306b\u3088\u308b\u8272\u5dee\u306e\u8a08\u7b97\n\u307e\u305a\u306f\u5358\u7d14\u306a\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u8ddd\u96e2\u306b\u3088\u308b\u8a08\u7b97\u30af\u30e9\u30b9\uff0e\u8272\u5dee\u306e\u6700\u5927\u3068\u306a\u308b\u767d\u3068\u9ed2\u306e\u8ddd\u96e2\u3092MAX\u3068\u3057\u3066\uff0c0\u301c1\u3067\u6b63\u898f\u5316\u3059\u308b\uff0e\u5f8c\u8ff0\u3059\u308b\u4ed6\u306e\u30af\u30e9\u30b9\u3067\u3082\u540c\u69d8\uff0e\n\nSimpleColorDifference.java\npublic class SimpleColorDifference implements ColorDifference {\n    private static final double MAX = Math.sqrt(3);\n\n    @Override\n    public double difference(DColor src, DColor dst) {\n        double rd = src.r() - dst.r();\n        double gd = src.g() - dst.g();\n        double bd = src.b() - dst.b();\n\n        return Math.sqrt(rd * rd + gd * gd + bd * bd) / MAX;\n    }\n\n\n\u3055\u3066\uff0c\u3053\u308c\u3067\u6700\u521d\u306e\u4f8b\u3092\u8a08\u7b97\u3057\u3066\u307f\u3088\u3046\uff0e\n\nMain.java\nimport java.awt.*;\n\npublic class Main {\n    public static void main(String[] args){\n        DColor c1 = new DColor((new Color(255, 0, 0)).getRGB());\n        DColor c2 = new DColor((new Color(64, 0, 0)).getRGB());\n        DColor c3 = new DColor((new Color(255, 191, 0)).getRGB());\n\n        ColorDifference cd = new SimpleColorDifference();\n        System.out.println(cd.difference(c1, c2)+\"\\t\"+cd.difference(c1, c3));\n    }\n}\n\n\n\n\u5b9f\u884c\u7d50\u679c\uff08RGB\uff09\n0.43244667221654326 0.43244667221654326\n\n\n\u3068\u3044\u3046\u3053\u3068\u3067\uff0c2\u3064\u306e\u8ddd\u96e2\u306f\u7b49\u3057\u304f\u306a\u3063\u305f\uff0e\n\nXYZ\u8868\u8272\u7cfb\u3067\u306e\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u8ddd\u96e2\u306b\u3088\u308b\u8272\u5dee\u306e\u8a08\u7b97\n\u3055\u3066\uff0c\u3053\u3053\u304b\u3089\u306f\u3076\u3063\u3061\u3083\u3051\u7b46\u8005\u304c\u3088\u304f\u5206\u304b\u3063\u3066\u3044\u306a\u3044\u306e\u3060\u304c\uff0c\u8272\u306e\u8868\u73fe\u3068\u3057\u3066RGB\u8868\u8272\u7cfb\u3067\u306f\u306a\u304fXYZ\u8868\u8272\u7cfb\u304c\u7528\u3044\u3089\u308c\u308b\u3089\u3057\u3044\uff0e\u4ed6\u306b\u3082\u6709\u540d\u3069\u3053\u308d\u3060\u3068CMY\u8868\u8272\u7cfb\u3068\u304b\u304c\u3042\u308b\u304c\uff0c\u3053\u306e\u5f8c\u306b\u3067\u3066\u304f\u308bL\u2217a\u2217b\u2217L\u2217a\u2217b\u2217L^* a^* b^*\u8868\u8272\u7cfb\u306b\u7e4b\u3052\u308b\u305f\u3081\u306bXYZ\u8868\u8272\u7cfb\u3067\u306e\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u8ddd\u96e2\u3092\u6e2c\u3063\u3066\u307f\u308b\uff0e\n\u5185\u5bb9\u306f\u82e5\u5e72\u96e3\u8aad\u3060\u3051\u308c\u3069\u3084\u3063\u3066\u308b\u3053\u3068\u306f\u5358\u7d14\u3067\u5358\u306b3\u00d73\u306e\u884c\u5217\u3092\u304b\u3051\u3066\u5909\u63db\u3059\u308b\u3060\u3051\u306b\u306a\u308b\uff0e\n\nXYZDifference.java\npublic class XYZDifference implements ColorDifference {\n    private static final double[][] m, mi;\n    private static final double MAX;\n\n    static {\n        m = new double[][]{\n                {0.4124f, 0.3576f, 0.1805f},\n                {0.2126f, 0.7152f, 0.0722f},\n                {0.0193f, 0.1192f, 0.9505f}};\n        double m11=m[0][0],m12=m[0][1],m13=m[0][2];\n        double m21=m[1][0],m22=m[1][1],m23=m[1][2];\n        double m31=m[2][0],m32=m[2][1],m33=m[2][2];\n        double d = m11*m22*m33\n                + m21*m32*m13\n                + m31*m12*m23\n                - m11*m32*m23\n                - m31*m22*m13\n                - m21*m12*m33;\n        mi = new double[][]{\n                { (m22*m33-m23*m32)/d,(m13*m32-m12*m33)/d,(m12*m23-m13*m22)/d },\n                { (m23*m31-m21*m33)/d,(m11*m33-m13*m31)/d,(m13*m21-m11*m23)/d },\n                { (m21*m32-m22*m31)/d,(m12*m31-m11*m32)/d,(m11*m22-m12*m21)/d }\n        };\n\n        MAX = dif(DColor.WHITE, DColor.BLACK);\n    }\n    public static double getX(double r, double g, double b){\n        return m[0][0] * r + m[0][1] * g + m[0][2] * b;\n    }\n    public static double getY(double r, double g, double b){\n        return m[1][0] * r + m[1][1] * g + m[1][2] * b;\n    }\n    public static double getZ(double r, double g, double b){\n        return m[2][0] * r + m[2][1] * g + m[2][2] * b;\n    }\n    public static double getR(double[] xyz){\n        return mi[0][0] * xyz[0] + mi[0][1] * xyz[1] + mi[0][2] * xyz[2];\n    }\n    public static double getG(double[] xyz){\n        return mi[1][0] * xyz[0] + mi[1][1] * xyz[1] + mi[1][2] * xyz[2];\n    }\n    public static double getB(double[] xyz){\n        return mi[2][0] * xyz[0] + mi[2][1] * xyz[1] + mi[2][2] * xyz[2];\n    }\n\n    public static double[] rgb2xyz(DColor c){\n        return new double[]{\n                getX(c.r(), c.g(), c.b()),\n                getY(c.r(), c.g(), c.b()),\n                getZ(c.r(), c.g(), c.b())\n        };\n    }\n\n    public static DColor xyz2rgb(double[] xyz){\n        return new DColor(\n                getR(xyz),\n                getG(xyz),\n                getB(xyz)\n        );\n    }\n\n    @Override\n    public double difference(DColor src, DColor dst) {\n        return dif(src, dst) / MAX;\n    }\n\n    private static final double dif(DColor src, DColor dst){\n        double[] s = rgb2xyz(src);\n        double[] d = rgb2xyz(dst);\n        double xd = s[0] - d[0];\n        double yd = s[1] - d[1];\n        double zd = s[2] - d[2];\n\n\n        return Math.sqrt(xd * xd + yd * yd + zd * zd);\n    }\n}\n\n\nrgb2xyz()\u3092\u547c\u3073\u51fa\u305b\u3070RGB\u8868\u8272\u7cfb\u306e\u304b\u3089XYZ\u8868\u8272\u7cfb\u306b\u5909\u63db\u3067\u304d\u308b\uff0e\u4f7f\u7528\u3057\u3066\u3044\u306a\u3044\u304cXYZ\u8868\u8272\u7cfb\u304b\u3089RGB\u8868\u8272\u7cfb\u3078\u9006\u5909\u63db\u3059\u308bxyz2rgb()\u3082\u5b9f\u88c5\u3057\u3066\u304a\u3044\u305f\uff0e\u884c\u5217\u306e\u5024\u306f\u6761\u4ef6\u306b\u3088\u3063\u3066\u3044\u308d\u3044\u308d\u3068\u5909\u308f\u308b\u306e\u3067\u3061\u3083\u3093\u3068\u7814\u7a76\u3059\u308b\u4eba\u306f\u8abf\u3079\u3066\u304b\u3089\u4f7f\u3063\u3066\u6b32\u3057\u3044\uff0e\u3068\u306f\u3044\u3048\u884c\u5217\u5024\u304c\u5909\u308f\u308b\u3050\u3089\u3044\u306a\u306e\u3067\u3053\u306e\u30af\u30e9\u30b9\u306f\u4f7f\u3044\u56de\u305b\u308b\u306f\u305a\uff0e\n\u8272\u5dee\u306e\u6700\u5927\u5024\u306f\u524d\u8ff0\u3057\u305fWHITE\u3068BLACK\u3092\u7a81\u3063\u8fbc\u3093\u3067\u4fdd\u5b58\u3057\u3066\u3044\u308b\uff0e\n\u3061\u306a\u307f\u306bJava\u306b\u306fColorSpace\u30af\u30e9\u30b9\u304c\u7528\u610f\u3055\u308c\u3066\u304a\u308a\uff0c\nColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_CIEXYZ);\nfloat[] xyz = cs.fromRGB(new float[]{1f, 0f, 0f});\n\n\u3068\u3059\u308c\u3070XYZ\u8868\u8272\u7cfb\u306b\u5909\u63db\u3067\u304d\u308b\u306e\u3060\u304c\uff0cAndroid\u3067\u306f\u4f7f\u3048\u306a\u3044\u306e\u3068\uff0c\u5b9f\u884c\u901f\u5ea6\u304c\u9045\u3044\u306e\u3067\u5b9f\u88c5\u3057\u3066\u3044\u308b\uff0e\n\u3055\u3066\uff0cRGB\u8868\u8272\u7cfb\u3068\u540c\u3058\u3088\u3046\u306b\u5b9f\u884c\u3057\u3066\u307f\u308b\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308b\uff0e\n\n\u5b9f\u884c\u7d50\u679c\uff08XYZ\uff09\n0.19789182003629588 0.34451910361308946\n\n\n\u3068\u3044\u3046\u3053\u3068\u30672\u3064\u3081\u306e\u8272\u5dee\u306f2\u3064\u3081\u306e\u8272\u5dee\u306e1.8\u500d\u3050\u3089\u3044\uff0c\u3068\u3044\u3046\u7d50\u679c\u304c\u51fa\u305f\uff0e\n\nL*a*b*\u8868\u8272\u7cfb\u3067\u306e\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u8ddd\u96e2\u306b\u3088\u308b\u8272\u5dee\u306e\u8a08\u7b97\n\u3055\u3066\uff0c\u5b9f\u306f\u3053\u3046\u3044\u3046\u8272\u5dee\u306b\u3064\u3044\u3066\u306f\u5b9f\u969b\u306b\u77e5\u899a\u3055\u308c\u308b\u8272\u5dee\u3092\u3061\u3083\u3093\u3068\u6c42\u3081\u307e\u3057\u3087\u3046\uff0c\u3068\u3044\u3046\u7814\u7a76\u304c\u6614\u304b\u3089\u3044\u308d\u3044\u308d\u3068\u3055\u308c\u3066\u3044\u3066\uff0c1976\u5e74\u306b\u8272\u5dee\u3092\u8a08\u308b\u305f\u3081\u306eLab\u8868\u8272\u7cfb\u304c\u52e7\u544a\u3055\u308c\u3066\u3044\u308b\uff0e\n\u3068\u3044\u3046\u3053\u3068\u3067Lab\u8868\u8272\u7cfb\u306b\u5909\u63db\u3057\u3066\u307f\u308b\uff0e\n\nLabDifference.java\npublic class LabDifference implements ColorDifference {\n    private static double[] WP;\n    private static final double t1 = Math.pow(6d/29, 3);\n    private static final double d629 = 6d/29;\n    private static final double d629_2 = d629 * d629;\n\n    private static final double d296 = 29d/6 * 29d/6;\n    private static final double d429 = 4d/29;\n    private static final double d16116 = 16d/116;\n\n    private static final double MAX;\n\n    static {\n        WP = XYZDifference.rgb2xyz(DColor.WHITE);\n        MAX = dif(DColor.WHITE, DColor.BLACK);\n    }\n\n    public static double[] xyz2lab(double[] xyz){\n        double[] dst = new double[3];\n        double xxn = func(xyz[0] / WP[0]);\n        double yyn = func(xyz[1] / WP[1]);\n        double zzn = func(xyz[2] / WP[2]);\n        dst[0] = 116f * yyn - 16;\n        dst[1] = 500 * (xxn - yyn);\n        dst[2] = 200 * (yyn - zzn);\n\n        return dst;\n    }\n\n    public static double[] lab2xyz(double[] lab){\n        double l = lab[0];\n        double a = lab[1];\n        double b = lab[2] ;\n        double fy = (l+16)/116;\n        double fx = fy + a / 500;\n        double fz = fy - b / 200;\n\n        return new double[]{\n                fx > d629 ? WP[0] * fx * fx * fx : (fx - d16116) * 3 * d629_2 * WP[0],\n                fy > d629 ? WP[1] * fy * fy * fy : (fy - d16116) * 3 * d629_2 * WP[1],\n                fx > d629 ? WP[2] * fz * fz * fz : (fz - d16116) * 3 * d629_2 * WP[2]\n        };\n    }\n\n    public static double func(double t){\n        if(t > t1){\n            return Math.pow(t, 1d/3);\n        } else {\n            return 1d/3 * d296 * t + d429;\n        }\n    }\n\n    public static double[] rgb2lab(DColor c){\n        return xyz2lab(XYZDifference.rgb2xyz(c));\n    }\n\n    public static DColor lab2rgb(double[] lab){\n        return XYZDifference.xyz2rgb(lab2xyz(lab));\n    }\n\n    @Override\n    public double difference(DColor src, DColor dst) {\n        return dif(src, dst) / MAX;\n    }\n\n    private static final double dif(DColor src, DColor dst){\n        double[] s = rgb2lab(src);\n        double[] d = rgb2lab(dst);\n        double xd = s[0] - d[0];\n        double yd = s[1] - d[1];\n        double zd = s[2] - d[2];\n\n        return Math.sqrt(xd * xd + yd * yd + zd * zd);\n    }\n}\n\n\n\u3053\u3053\u307e\u3067\u6765\u308b\u3068\u9580\u5916\u6f22\u306b\u306f\u3055\u3063\u3071\u308a\u5206\u304b\u3089\u306a\u3044\u306e\u3067\u8a73\u7d30\u306f\u5c02\u9580\u5bb6\u306b\u805e\u3044\u3066\u6b32\u3057\u3044\uff0e\u30b0\u30b0\u3063\u3066\u51fa\u3066\u304d\u305f\u6570\u5f0f\u3092\u5358\u7d14\u306b\u5b9f\u88c5\u3057\u3066\u3044\u308b\uff0e\u4e00\u5fdc\uff0c\u5b9f\u88c5\u4e0a\u306e\u5de5\u592b\u3068\u3057\u3066\u56fa\u5b9a\u5024\u3092\u3042\u3089\u304b\u3058\u3081\u8a08\u7b97\u3057\u3066\u3044\u308b\u304c\uff0cJava\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u6700\u9069\u5316\u3055\u308c\u308b\u306f\u305a\u306a\u306e\u3067\u901f\u5ea6\u7684\u306b\u306f\u610f\u5473\u306f\u7121\u304f\uff0c\u5358\u306b\u5b9f\u88c5\u4e0a\u306e\u8aa4\u308a\u3092\u6e1b\u3089\u3059\u305f\u3081\u306b\u884c\u3063\u3066\u3044\u308b\uff0e\n\u3055\u3066\uff0cLab\u8868\u8272\u7cfb\u3067\u8272\u5dee\u3092\u8a08\u7b97\u3059\u308b\u3068\n\n\u5b9f\u884c\u7d50\u679c\uff08Lab)\n0.47194631171156237 0.9645251064099958\n\n\n\u3068\u3044\u3046\u7d50\u679c\u304c\u51fa\u305f\uff0e\u5927\u4f532\u500d\u3050\u3089\u3044\u306e\u9055\u3044\uff0c\u3068\u3044\u3046\u308f\u3051\u3060\uff0e\n\nCIEDE2000\u306b\u3088\u308b\u8272\u5dee\u306e\u8a08\u7b97\n\u3055\u3066\uff0c\u672c\u756a\uff0eKONICA MINOLTA\u306e\u3053\u306e\u30da\u30fc\u30b8\u306b\u3088\u308b\u3068\uff0cLab\u306b\u3088\u308b\u8868\u8272\u7cfb\u3067\u3082\u307e\u3060\u554f\u984c\u304c\u3042\u308a\uff0cCIEDE2000\u3068\u3044\u3046\u306e\u304c\u51fa\u6765\u305f\u306e\u3060\u304c\uff0cCIEDE2000\u3067\u306f\n\nCIE Lab\u306e\u8272\u7a7a\u9593\u4e0a\u3067\u306e\u4eba\u306e\u76ee\u306e\u8272\u8b58\u5225\u57df\u306e\u7279\u5fb4\uff0c\uff11\uff09\u5f69\u5ea6\u4f9d\u5b58\u6027\uff0c\uff12\uff09\u8272\u76f8\u4f9d\u5b58\u6027\uff0c\u304a\u3088\u3073\uff0c\uff13\uff09\u660e\u5ea6\u4f9d\u5b58\u6027\u3092\u8003\u616e\u3057\u305f\u8a08\u7b97\u6307\u63ee\u3068\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\n\u3060\u305d\u3046\u3060\uff0e\n\nLab\u7acb\u4f53\u8272\u7a7a\u9593\u4e0a\u3067\u771f\u5186\u3082\u3057\u304f\u306f\u65b9\u5f62\u72b6\u3067\u3042\u3063\u305f\u306e\u306b\u5bfe\u3057\u3001CIE2000\u8272\u5dee\u5f0f\u3067\u306e\u8272\u5dee\u0394E00\u306f\u3001\u5f69\u5ea6\u65b9\u5411\u3092\u9577\u8ef8\u3068\u3059\u308b\u6955\u5186\u5f62\u72b6\u3068\u306a\u308a\u3001\u4eba\u306e\u76ee\u306e\u8272\u8b58\u5225\u57df\u306e\u5f62\u72b6\u306b\u8fd1\u4f3c\u3057\u3066\u3044\u308b\u306e\u304c\u7279\u9577\n\n\u306a\u3093\u3060\u305d\u3046\u3067\uff0c\u305d\u308c\u3092\u5730\u9053\u306b\u8a08\u7b97\u3059\u308b\u3053\u3068\u306b\u306a\u308b\uff0e\u300c\u5f69\u5ea6\u304c\u4f4e\u3044\u3068\u771f\u5186\u306b\u8fd1\u3044\u6955\u5186\u300d\u3068\u306a\u308a\u300c\u5f69\u5ea6\u304c\u9ad8\u3044\u3068\u5f69\u5ea6\u65b9\u5411\u306b\u306e\u3073\u305f\u6955\u5186\u300d\u3068\u306a\u308b\uff0e\u3064\u307e\u308a\uff0c\u4eba\u9593\u306f\u5f69\u5ea6\u304c\u9ad8\u3044\u307b\u3069\u8272\u5dee\u3092\u611f\u3058\u306b\u304f\u304f\u306a\u308b\uff0c\u3068\u3044\u3046\u3053\u3068\u3089\u3057\u3044\uff0e\u78ba\u304b\u306b\u305d\u3093\u306a\u6c17\u306f\u3059\u308b\uff0e\u3068\u3044\u3046\u3053\u3068\u3067\uff0c\u5b9f\u88c5\u3057\u3066\u307f\u305f\uff0e\n\u6570\u5f0f\u306fWikipedia\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u308b\uff0e\u4ed6\u306e\u6587\u732e\u3067\u3082\u305d\u3046\u306a\u306e\u3060\u304c\uff0cDegree\u3068\u3057\u3066\u89d2\u5ea6\u3092\u6271\u3063\u3066\u3044\u308b\u305f\u3081\uff0c\u5168\u3066Radius\u306b\u5909\u63db\u3059\u308b\u8fba\u308a\u3067\u6ce8\u610f\u304c\u5fc5\u8981\uff0e\uff08\u6587\u732e\u306b\u3088\u3063\u3066\u306f\u9593\u9055\u3048\u3066\u305f\u308a\u3082\u3059\u308b\uff09\n\nCIE2kDifference.java\npublic class CIE2kDifference implements ColorDifference {\n\n    private static final double v25_7 = Math.pow(25, 7);\n    private static final double d6 = Math.toRadians(6);\n    private static final double d25 = Math.toRadians(25);\n    private static final double d30 = Math.toRadians(30);\n    private static final double d60 = Math.toRadians(60);\n    private static final double d63 = Math.toRadians(63);\n    private static final double d275 = Math.toRadians(275);\n    private static final double kl = 1;\n    private static final double kc = 1;\n    private static final double kh = 1;\n    private static final double MAX;\n\n    static {\n        MAX = dif(DColor.WHITE, DColor.BLACK);\n    }\n\n    @Override\n    public double difference(DColor src, DColor dst) {\n        return dif(src, dst) / MAX;\n    }\n\n    public static double dif(DColor src, DColor dst) {\n        double[] src_lab = LabDifference.rgb2lab(src);\n        double l1 = src_lab[0];\n        double a1 = src_lab[1];\n        double b1 = src_lab[2];\n\n        double[] dst_lab = LabDifference.rgb2lab(dst);\n        double l2 = dst_lab[0];\n        double a2 = dst_lab[1];\n        double b2 = dst_lab[2];\n\n        return dif(l1, a1, b1, l2, a2, b2);\n    }\n\n    public static double dif(double l1, double a1, double b1, double l2, double a2, double b2){\n        double dld = l2 - l1;\n        double lb = (l1 + l2) / 2;\n\n        double cs1 = Math.hypot(a1, b1);\n        double cs2 = Math.hypot(a2, b2);\n        double cb = (cs1 + cs2) / 2;\n        double cb7 = Math.pow(cb, 7);\n        double ad1 = a1 + a1 / 2 * (1 - Math.sqrt(cb7 / (cb7 + v25_7)));\n        double ad2 = a2 + a2 / 2 * (1 - Math.sqrt(cb7 / (cb7 + v25_7)));\n\n        double cd1 = Math.hypot(ad1, b1);\n        double cd2 = Math.hypot(ad2, b2);\n        double cbd = (cd1 + cd2) / 2;\n        double cbd7 = Math.pow(cbd, 7);\n\n        double dcd = (cd2 - cd1);\n        double hd1 = b1 == 0 && ad1 == 0 ? 0 : Math.atan2(b1, ad1);\n        if(hd1 < 0){\n            hd1 += Math.PI * 2;\n        }\n        double hd2 = b2 == 0 && ad2 == 0 ? 0 : Math.atan2(b2, ad2);\n        if(hd2 < 0){\n            hd2 += Math.PI * 2;\n        }\n\n        double dhd = hd2 - hd1;\n        if(cd1 * cd2 == 0){\n            dhd = 0;\n        } else if(Math.abs(hd1 - hd2) > Math.PI) {\n            if(hd2 <= hd1){\n                dhd += Math.PI * 2;\n            } else {\n                dhd -= Math.PI * 2;\n            }\n        }\n\n\n        double dhhd = 2 * Math.sqrt(cd1 * cd2) * Math.sin(dhd / 2);\n        double hhbd = 0;\n        if(cd1 * cd2 != 0){\n            hhbd = Math.abs(hd1 - hd2) > Math.PI ? ( hd1 + hd2 + Math.PI * 2) / 2 : (hd1 + hd2) / 2;\n        }\n\n        double tt = 1\n                - 0.17 * Math.cos(hhbd - d30)\n                + 0.24 * Math.cos(2 * hhbd)\n                + 0.32 * Math.cos(3 * hhbd + d6)\n                - 0.20 * Math.cos(4 * hhbd - d63);\n        double lb50_2 = Math.pow(lb - 50, 2);\n        double ssl = 1 + (0.015 * lb50_2) / Math.sqrt(20 + lb50_2);\n        double ssc = 1 + 0.045 * cbd;\n        double ssh = 1 + 0.015 * cbd * tt;\n        double rrt = -2d * Math.sqrt(cbd7 / (cbd7 +v25_7)) * Math.sin(d60 * Math.exp(- Math.pow((hhbd - d275)/ d25, 2)));\n        double de = Math.pow(dld / (kl * ssl), 2)\n                + Math.pow(dcd / (kc * ssc), 2)\n                + Math.pow(dhhd / (kh * ssh), 2)\n                + rrt * (dcd / (kc * ssc)) * (dhhd / (kh * ssh));\n\n        return Math.sqrt(de);\n    }\n}\n\n\n\u3055\u3066\uff0c\u3082\u306f\u3084\u3055\u3063\u3071\u308a\u5206\u304b\u3089\u306a\u3044\u3051\u308c\u3069\uff0c\u4e00\u5fdc\u3053\u308c\u3067\u5408\u3063\u3066\u3044\u308b\u3089\u3057\u3044\uff0e\u3053\u306e\u8fba\u308a\u306e\u6587\u732e\u3068\u6bd4\u8f03\u3057\u3066\u51fa\u529b\u3055\u308c\u308b\u5024\u304c\u540c\u3058\u3067\u3042\u308b\u3053\u3068\u306f\u78ba\u8a8d\u3057\u3066\u3044\u308b\uff0e\n\u5b9f\u884c\u7d50\u679c\u306f\u6b21\u306e\u901a\u308a\uff0e\n\n\u5b9f\u884c\u7d50\u679c\uff08CIE2000\uff09\n0.24093258957174238 0.5480665244873609\n\n\n\u3068\u3044\u3046\u3053\u3068\u3067\uff0c2.2\u500d\u3050\u3089\u3044\u3089\u3057\u3044\uff0e\uff08\u3082\u306f\u3084\u5024\u306f\u3069\u3046\u3067\u3082\u826f\u304f\u306a\u3063\u3066\u304d\u305f\u304c\uff09\n\n\u304a\u307e\u3051\uff08CIEDE2000\u306e\u9ad8\u901f\u5316\uff09\nCIEDE2000\u306f\u898b\u305f\u76ee\u306e\u901a\u308a\u51c4\u304f\u91cd\u3044\u51e6\u7406\u306a\u306e\u3067\uff0c\u3067\u304d\u308b\u3060\u3051\u8efd\u304f\u3059\u308b\uff0e\u3068\u306f\u3044\u3063\u3066\u3082\u6700\u8fd1\u306eJava\u306f\u6700\u9069\u5316\u3055\u308c\u308b\u306e\u3067\u305d\u3082\u305d\u3082\u901f\u304f\uff0c\u307b\u3068\u3093\u3069\u51fa\u6765\u308b\u3068\u3053\u308d\u304c\u7121\u304b\u3063\u305f\uff0e\nAndroid\u3060\u3068\u307e\u3060\u307e\u3060\u3067\u304d\u308b\u3068\u3053\u308d\u306f\u3042\u308a\u305d\u3046\u306a\u306e\u3067\u5f8c\u65e5\u3084\u3063\u3066\u307f\u308b\uff0e\n\nFastCIE2kDif.java\npublic class FastCIE2kDif implements ColorDifference {\n\n    private static final double pi_2 = Math.PI * 2;\n    private static final double v25_7 = Math.pow(25, 7);\n    private static final double d6 = Math.toRadians(6);\n    private static final double d25 = Math.toRadians(25);\n    private static final double d30 = Math.toRadians(30);\n    private static final double d60 = Math.toRadians(60);\n    private static final double d63 = Math.toRadians(63);\n    private static final double d275 = Math.toRadians(275);\n    private static final double kl = 1;\n    private static final double kc = 1;\n    private static final double kh = 1;\n    private static final double MAX;\n\n    static {\n        MAX = dif(DColor.WHITE, DColor.BLACK);\n    }\n\n    public static final double hypot(double a, double b){\n        return Math.sqrt(a * a + b * b);\n    }\n\n    public static final double pow2(double a){\n        return a * a;\n    }\n\n    public static final double pow7(double a){\n        return a * a * a * a * a * a * a;\n    }\n\n    @Override\n    public double difference(DColor src, DColor dst) {\n        return dif(src, dst) / MAX;\n    }\n\n    public static double dif(DColor src, DColor dst) {\n        double[] src_lab = LabDifference.rgb2lab(src);\n        double l1 = src_lab[0];\n        double a1 = src_lab[1];\n        double b1 = src_lab[2];\n\n        double[] dst_lab = LabDifference.rgb2lab(dst);\n        double l2 = dst_lab[0];\n        double a2 = dst_lab[1];\n        double b2 = dst_lab[2];\n\n        return dif(l1, a1, b1, l2, a2, b2);\n    }\n\n    public static double dif(double l1, double a1, double b1, double l2, double a2, double b2){\n        double dld = l2 - l1;\n        double lb = (l1 + l2) / 2;\n\n        double cs1 = hypot(a1, b1);\n        double cs2 = hypot(a2, b2);\n        double cb = (cs1 + cs2) / 2;\n        double cb7 = pow7(cb);\n        double ad1 = a1 + a1 / 2 * (1 - Math.sqrt(cb7 / (cb7 + v25_7)));\n        double ad2 = a2 + a2 / 2 * (1 - Math.sqrt(cb7 / (cb7 + v25_7)));\n\n        double cd1 = hypot(ad1, b1);\n        double cd2 = hypot(ad2, b2);\n        double cbd = (cd1 + cd2) / 2;\n        double cbd7 = pow7(cbd);\n\n        double dcd = (cd2 - cd1);\n        double hd1 = b1 == 0 && ad1 == 0 ? 0 : Math.atan2(b1, ad1);\n        if(hd1 < 0){\n            hd1 += pi_2;\n        }\n        double hd2 = b2 == 0 && ad2 == 0 ? 0 : Math.atan2(b2, ad2);\n        if(hd2 < 0){\n            hd2 += pi_2;\n        }\n\n        double dhd = hd2 - hd1;\n        if(cd1 * cd2 == 0){\n            dhd = 0;\n        } else if(Math.abs(hd1 - hd2) > Math.PI) {\n            if(hd2 <= hd1){\n                dhd += pi_2;\n            } else {\n                dhd -= pi_2;\n            }\n        }\n\n\n        double dhhd = 2 * Math.sqrt(cd1 * cd2) * Math.sin(dhd / 2);\n        double hhbd = 0;\n        if(cd1 * cd2 != 0){\n            hhbd = Math.abs(hd1 - hd2) > Math.PI ? ( hd1 + hd2 + pi_2) / 2 : (hd1 + hd2) / 2;\n        }\n\n        double tt = 1\n                - 0.17 * Math.cos(hhbd - d30)\n                + 0.24 * Math.cos(2 * hhbd)\n                + 0.32 * Math.cos(3 * hhbd + d6)\n                - 0.20 * Math.cos(4 * hhbd - d63);\n        double lb50_2 = pow2(lb - 50);\n        double ssl = 1 + (0.015 * lb50_2) / Math.sqrt(20 + lb50_2);\n        double ssc = 1 + 0.045 * cbd;\n        double ssh = 1 + 0.015 * cbd * tt;\n        double rrt = -2d * Math.sqrt(cbd7 / (cbd7 +v25_7)) * Math.sin(d60 * Math.exp(- pow2((hhbd - d275)/ d25)));\n        double de = pow2(dld / (kl * ssl))\n                + pow2(dcd / (kc * ssc))\n                + pow2(dhhd / (kh * ssh))\n                + rrt * (dcd / (kc * ssc)) * (dhhd / (kh * ssh));\n\n        return Math.sqrt(de);\n    }\n}\n\n\n\u3084\u3063\u305f\u3053\u3068\u306f\u4e0b\u8a18\u306e\u901a\u308a\uff0e\n\nMath.hypot()\u304c\u51c4\u304f\u9045\u3044\u306e\u3067\u30d9\u30bf\u3067\u66f8\u304d\u76f4\u3057\u305f\uff0e\u30d0\u30c3\u30d5\u30a1\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3057\u305f\u5834\u5408\u306b\u3061\u3083\u3093\u3068\u8a08\u7b97\u3067\u304d\u306a\u3044\u304c\u4eca\u56de\u306e\u4f8b\u3067\u306f\u5927\u304d\u306a\u5024\u3092\u4f7f\u308f\u306a\u3044\u306e\u3067\u554f\u984c\u7121\u3044\uff0e\nMath.pow()\u3067\u306f2\u4e57\u30687\u4e57\u3057\u304b\u4f7f\u3063\u3066\u306a\u3044\u306e\u3067\u305d\u308c\u305e\u308c\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u610f\u3057\u3066\u639b\u3051\u7b97\u3092\u884c\u3063\u305f\uff0e\u305f\u3060\uff0c2\u4e57\u306b\u95a2\u3057\u3066\u306f\u52b9\u679c\u7121\u3057\uff0c7\u4e57\u306e\u5185\u90e8\u30922->4->8->7\u4e57\u306e\u9806\u306b\u8a08\u7b97\u3055\u305b\u305f\u308a\u3044\u308d\u3044\u308d\u3084\u3063\u305f\u304c\u5358\u7d14\u306b7\u56de\u639b\u3051\u308b\u306e\u3068\u5909\u5316\u7121\u3057\uff0e\n\n\u4ed6\u306b\u3082cos\u3084atan\u3092\u8fd1\u4f3c\u8a08\u7b97\u3055\u305b\u305f\u308a\u3057\u3066\u307f\u305f\u304c\u5168\u7136\u52b9\u679c\u304c\u51fa\u306a\u304b\u3063\u305f\uff0e\u89d2\u5ea6\u8a08\u7b97\u3092int\u5316\u3057\u3066\u6700\u5f8c\u306bRadius\u5909\u63db\u3059\u308b\u65b9\u6cd5\u7b49\u3082\u8003\u3048\u305f\u304c\u52b9\u679c\u304c\u51fa\u305d\u3046\u306b\u7121\u3044\u306e\u3067\u3084\u3063\u3066\u3044\u306a\u3044\uff0e\n\n\u3084\u308b\u3053\u3068\u30ea\u30b9\u30c8\nGitHub\u306b\u4e0a\u3052\u305f\u308aAndroid\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u308b\u4e88\u5b9a\uff0e\n# \u306f\u3058\u3081\u306b\n\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e2\u3064\u306e\u753b\u50cf\uff0c\u5de6\u3068\u53f3\u306e\u8272\u3092\u6bd4\u3079\u305f\u3068\u304d\u306b\u3069\u3061\u3089\u306e\u65b9\u304c\u8272\u304c\u8fd1\u3044\u3068\u601d\u3044\u307e\u3059\u304b\uff1f\n![RED_DarkRED.png](https://qiita-image-store.s3.amazonaws.com/0/113760/6d8179d3-c679-2025-00f5-5fcf2e087f37.png)\n #FF0000\u3068#400000\n\n![RED_YELLOW.png](https://qiita-image-store.s3.amazonaws.com/0/113760/7c6e0763-3846-b3c7-73c2-01050963aa89.png)\n #FF0000\u3068#FFBF00\n\n\u5358\u7d14\u306bRGB\u5024\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\u3059\u308b\u3068\u4e8c\u3064\u306e\u8272\u306e\u8ddd\u96e2\u306f\u540c\u3058\uff0e\n\u3057\u304b\u3057\uff11\u3064\u76ee\u306e\u753b\u50cf\u306f\u5358\u306b\u6697\u304f\u306a\u3063\u305f\u3060\u3051\u306a\u306e\u306b\u5bfe\u3057\u3066\uff0c\uff12\u3064\u76ee\u306e\u753b\u50cf\u306f\u8272\u76f8\u304c\u5909\u308f\u3063\u3066\u3044\u308b\u305f\u3081\uff0c\u4f8b\u3048\u3070\u5199\u771f\u306e\u30de\u30c3\u30c1\u30f3\u30b0\u3092\u53d6\u308b\u5834\u5408\u306f\u4e0a\u306e\u65b9\u304c\u4f3c\u305f\u8272\u3068\u3057\u3066\u5224\u5225\u3057\u305f\u65b9\u304c\u90fd\u5408\u304c\u826f\u304f\u306a\u3063\u305f\u308a\u3059\u308b\uff0e\n\n\u3053\u3046\u3057\u305f\u8272\u306e\u8ddd\u96e2\uff0c\u8272\u5dee\u306e\u8a08\u7b97\u306b\u3064\u3044\u3066\u5b9f\u88c5\u3057\u3066\u307f\u305f\uff0e\n\u30bd\u30fc\u30b9\u306fJava 8\u3092\u524d\u63d0\u306b\u66f8\u3044\u3066\u3044\u308b\u304c\uff0cAndroid\u3067\u3082\u52d5\u4f5c\u3059\u308b\uff08\u306f\u305a\uff09\uff0e\u305f\u3060\u3057\uff0cAndroid\u3067\u306fColor\u30af\u30e9\u30b9\u304c\u9055\u3046\u305f\u3081\u9069\u5b9c\u5909\u66f4\u3057\u3066\u307b\u3057\u3044\uff0e\n\n# \u4e0b\u6e96\u5099\nJava\u3068Android\u306eColor\u30af\u30e9\u30b9\u306e\u9055\u3044\u3084\uff0cRGB\u5024\u306e\u4fdd\u5b58\u306a\u3069\u3092\u76ee\u7684\u3068\u3057\u3066\u4e0b\u8a18\u306e\u30af\u30e9\u30b9\u3092\u6e96\u5099\u3059\u308b\uff0eRGB\u5024\u306eint\u5024\u3092\u53d7\u3051\u53d6\u308b\u3068\u305d\u308c\u305e\u308c\u3092double\u306e\u5024\u3068\u3057\u3066\u914d\u5217\u3092\u4f5c\u6210\u3057\uff0c\u4fdd\u5b58\u3059\u308b\uff0e\u767d\u3068\u9ed2\u306b\u3064\u3044\u3066\u306f\u5f8c\u3067\u4f7f\u7528\u3059\u308b\u305f\u3081static\u306a\u5024\u3068\u3057\u3066\u4fdd\u6301\u3057\u3066\u3044\u308b\uff0e\n\n```java:DColor.java\nimport java.awt.*;\n\npublic class DColor {\n    public static final DColor WHITE = new DColor(Color.WHITE.getRGB());\n    public static final DColor BLACK = new DColor(Color.BLACK.getRGB());\n\n    public static double getRed(int rgb){\n        return ((0xff0000 & rgb) >> 16) / 255d;\n    }\n\n    public static double getGreen(int rgb){\n        return ((0xff00 & rgb) >> 8) / 255d;\n    }\n\n    public static double getBlue(int rgb){\n        return (0xff & rgb) / 255d;\n    }\n\n    private final double[] color;\n\n    public DColor(int rgb){\n        color = new double[]{getRed(rgb), getGreen(rgb), getBlue(rgb)};\n    }\n\n    public DColor(double r, double g, double b){\n        color = new double[]{r, g, b};\n    }\n\n    public double r(){\n        return color[0];\n    }\n\n    public double g(){\n        return color[1];\n    }\n\n    public double b(){\n        return color[2];\n    }\n\n    public double[] color(){\n        return color;\n    }\n}\n```\n\n\u5f8c\uff0c\u8272\u5dee\u3092\u53d6\u5f97\u3059\u308b\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304f\uff0e\n\n```java:ColorDifference.java\npublic interface ColorDifference {\n    public double difference(DColor src, DColor dst);\n}\n```\n\n# RGB\u8868\u8272\u7cfb\u3067\u306e\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u8ddd\u96e2\u306b\u3088\u308b\u8272\u5dee\u306e\u8a08\u7b97\n\u307e\u305a\u306f\u5358\u7d14\u306a\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u8ddd\u96e2\u306b\u3088\u308b\u8a08\u7b97\u30af\u30e9\u30b9\uff0e\u8272\u5dee\u306e\u6700\u5927\u3068\u306a\u308b\u767d\u3068\u9ed2\u306e\u8ddd\u96e2\u3092MAX\u3068\u3057\u3066\uff0c0\u301c1\u3067\u6b63\u898f\u5316\u3059\u308b\uff0e\u5f8c\u8ff0\u3059\u308b\u4ed6\u306e\u30af\u30e9\u30b9\u3067\u3082\u540c\u69d8\uff0e\n\n```java:SimpleColorDifference.java\npublic class SimpleColorDifference implements ColorDifference {\n    private static final double MAX = Math.sqrt(3);\n\n    @Override\n    public double difference(DColor src, DColor dst) {\n        double rd = src.r() - dst.r();\n        double gd = src.g() - dst.g();\n        double bd = src.b() - dst.b();\n\n        return Math.sqrt(rd * rd + gd * gd + bd * bd) / MAX;\n    }\n```\n\n\u3055\u3066\uff0c\u3053\u308c\u3067\u6700\u521d\u306e\u4f8b\u3092\u8a08\u7b97\u3057\u3066\u307f\u3088\u3046\uff0e\n\n```java:Main.java\nimport java.awt.*;\n\npublic class Main {\n    public static void main(String[] args){\n        DColor c1 = new DColor((new Color(255, 0, 0)).getRGB());\n        DColor c2 = new DColor((new Color(64, 0, 0)).getRGB());\n        DColor c3 = new DColor((new Color(255, 191, 0)).getRGB());\n\n        ColorDifference cd = new SimpleColorDifference();\n        System.out.println(cd.difference(c1, c2)+\"\\t\"+cd.difference(c1, c3));\n    }\n}\n```\n\n```zsh:\u5b9f\u884c\u7d50\u679c\uff08RGB\uff09\n0.43244667221654326\t0.43244667221654326\n```\n\n\u3068\u3044\u3046\u3053\u3068\u3067\uff0c2\u3064\u306e\u8ddd\u96e2\u306f\u7b49\u3057\u304f\u306a\u3063\u305f\uff0e\n\n\n# XYZ\u8868\u8272\u7cfb\u3067\u306e\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u8ddd\u96e2\u306b\u3088\u308b\u8272\u5dee\u306e\u8a08\u7b97\n\u3055\u3066\uff0c\u3053\u3053\u304b\u3089\u306f**\u3076\u3063\u3061\u3083\u3051\u7b46\u8005\u304c\u3088\u304f\u5206\u304b\u3063\u3066\u3044\u306a\u3044**\u306e\u3060\u304c\uff0c\u8272\u306e\u8868\u73fe\u3068\u3057\u3066RGB\u8868\u8272\u7cfb\u3067\u306f\u306a\u304fXYZ\u8868\u8272\u7cfb\u304c\u7528\u3044\u3089\u308c\u308b\u3089\u3057\u3044\uff0e\u4ed6\u306b\u3082\u6709\u540d\u3069\u3053\u308d\u3060\u3068CMY\u8868\u8272\u7cfb\u3068\u304b\u304c\u3042\u308b\u304c\uff0c\u3053\u306e\u5f8c\u306b\u3067\u3066\u304f\u308b$L^* a^* b^*$\u8868\u8272\u7cfb\u306b\u7e4b\u3052\u308b\u305f\u3081\u306bXYZ\u8868\u8272\u7cfb\u3067\u306e\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u8ddd\u96e2\u3092\u6e2c\u3063\u3066\u307f\u308b\uff0e\n\u5185\u5bb9\u306f\u82e5\u5e72\u96e3\u8aad\u3060\u3051\u308c\u3069\u3084\u3063\u3066\u308b\u3053\u3068\u306f\u5358\u7d14\u3067\u5358\u306b3\u00d73\u306e\u884c\u5217\u3092\u304b\u3051\u3066\u5909\u63db\u3059\u308b\u3060\u3051\u306b\u306a\u308b\uff0e\n\n```java:XYZDifference.java\npublic class XYZDifference implements ColorDifference {\n    private static final double[][] m, mi;\n    private static final double MAX;\n\n    static {\n        m = new double[][]{\n                {0.4124f, 0.3576f, 0.1805f},\n                {0.2126f, 0.7152f, 0.0722f},\n                {0.0193f, 0.1192f, 0.9505f}};\n        double m11=m[0][0],m12=m[0][1],m13=m[0][2];\n        double m21=m[1][0],m22=m[1][1],m23=m[1][2];\n        double m31=m[2][0],m32=m[2][1],m33=m[2][2];\n        double d = m11*m22*m33\n                + m21*m32*m13\n                + m31*m12*m23\n                - m11*m32*m23\n                - m31*m22*m13\n                - m21*m12*m33;\n        mi = new double[][]{\n                { (m22*m33-m23*m32)/d,(m13*m32-m12*m33)/d,(m12*m23-m13*m22)/d },\n                { (m23*m31-m21*m33)/d,(m11*m33-m13*m31)/d,(m13*m21-m11*m23)/d },\n                { (m21*m32-m22*m31)/d,(m12*m31-m11*m32)/d,(m11*m22-m12*m21)/d }\n        };\n\n        MAX = dif(DColor.WHITE, DColor.BLACK);\n    }\n    public static double getX(double r, double g, double b){\n        return m[0][0] * r + m[0][1] * g + m[0][2] * b;\n    }\n    public static double getY(double r, double g, double b){\n        return m[1][0] * r + m[1][1] * g + m[1][2] * b;\n    }\n    public static double getZ(double r, double g, double b){\n        return m[2][0] * r + m[2][1] * g + m[2][2] * b;\n    }\n    public static double getR(double[] xyz){\n        return mi[0][0] * xyz[0] + mi[0][1] * xyz[1] + mi[0][2] * xyz[2];\n    }\n    public static double getG(double[] xyz){\n        return mi[1][0] * xyz[0] + mi[1][1] * xyz[1] + mi[1][2] * xyz[2];\n    }\n    public static double getB(double[] xyz){\n        return mi[2][0] * xyz[0] + mi[2][1] * xyz[1] + mi[2][2] * xyz[2];\n    }\n\n    public static double[] rgb2xyz(DColor c){\n        return new double[]{\n                getX(c.r(), c.g(), c.b()),\n                getY(c.r(), c.g(), c.b()),\n                getZ(c.r(), c.g(), c.b())\n        };\n    }\n\n    public static DColor xyz2rgb(double[] xyz){\n        return new DColor(\n                getR(xyz),\n                getG(xyz),\n                getB(xyz)\n        );\n    }\n\n    @Override\n    public double difference(DColor src, DColor dst) {\n        return dif(src, dst) / MAX;\n    }\n\n    private static final double dif(DColor src, DColor dst){\n        double[] s = rgb2xyz(src);\n        double[] d = rgb2xyz(dst);\n        double xd = s[0] - d[0];\n        double yd = s[1] - d[1];\n        double zd = s[2] - d[2];\n\n\n        return Math.sqrt(xd * xd + yd * yd + zd * zd);\n    }\n}\n```\n\nrgb2xyz()\u3092\u547c\u3073\u51fa\u305b\u3070RGB\u8868\u8272\u7cfb\u306e\u304b\u3089XYZ\u8868\u8272\u7cfb\u306b\u5909\u63db\u3067\u304d\u308b\uff0e\u4f7f\u7528\u3057\u3066\u3044\u306a\u3044\u304cXYZ\u8868\u8272\u7cfb\u304b\u3089RGB\u8868\u8272\u7cfb\u3078\u9006\u5909\u63db\u3059\u308bxyz2rgb()\u3082\u5b9f\u88c5\u3057\u3066\u304a\u3044\u305f\uff0e\u884c\u5217\u306e\u5024\u306f\u6761\u4ef6\u306b\u3088\u3063\u3066\u3044\u308d\u3044\u308d\u3068\u5909\u308f\u308b\u306e\u3067\u3061\u3083\u3093\u3068\u7814\u7a76\u3059\u308b\u4eba\u306f\u8abf\u3079\u3066\u304b\u3089\u4f7f\u3063\u3066\u6b32\u3057\u3044\uff0e\u3068\u306f\u3044\u3048\u884c\u5217\u5024\u304c\u5909\u308f\u308b\u3050\u3089\u3044\u306a\u306e\u3067\u3053\u306e\u30af\u30e9\u30b9\u306f\u4f7f\u3044\u56de\u305b\u308b\u306f\u305a\uff0e\n\u8272\u5dee\u306e\u6700\u5927\u5024\u306f\u524d\u8ff0\u3057\u305fWHITE\u3068BLACK\u3092\u7a81\u3063\u8fbc\u3093\u3067\u4fdd\u5b58\u3057\u3066\u3044\u308b\uff0e\n\n\u3061\u306a\u307f\u306bJava\u306b\u306f`ColorSpace`\u30af\u30e9\u30b9\u304c\u7528\u610f\u3055\u308c\u3066\u304a\u308a\uff0c\n\n```java\nColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_CIEXYZ);\nfloat[] xyz = cs.fromRGB(new float[]{1f, 0f, 0f});\n```\n\n\u3068\u3059\u308c\u3070XYZ\u8868\u8272\u7cfb\u306b\u5909\u63db\u3067\u304d\u308b\u306e\u3060\u304c\uff0cAndroid\u3067\u306f\u4f7f\u3048\u306a\u3044\u306e\u3068\uff0c\u5b9f\u884c\u901f\u5ea6\u304c\u9045\u3044\u306e\u3067\u5b9f\u88c5\u3057\u3066\u3044\u308b\uff0e\n\n\u3055\u3066\uff0cRGB\u8868\u8272\u7cfb\u3068\u540c\u3058\u3088\u3046\u306b\u5b9f\u884c\u3057\u3066\u307f\u308b\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308b\uff0e\n\n```zsh:\u5b9f\u884c\u7d50\u679c\uff08XYZ\uff09\n0.19789182003629588\t0.34451910361308946\n```\n\n\u3068\u3044\u3046\u3053\u3068\u30672\u3064\u3081\u306e\u8272\u5dee\u306f2\u3064\u3081\u306e\u8272\u5dee\u306e1.8\u500d\u3050\u3089\u3044\uff0c\u3068\u3044\u3046\u7d50\u679c\u304c\u51fa\u305f\uff0e\n\n\n# L*a*b*\u8868\u8272\u7cfb\u3067\u306e\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u8ddd\u96e2\u306b\u3088\u308b\u8272\u5dee\u306e\u8a08\u7b97\n\u3055\u3066\uff0c\u5b9f\u306f\u3053\u3046\u3044\u3046\u8272\u5dee\u306b\u3064\u3044\u3066\u306f\u5b9f\u969b\u306b\u77e5\u899a\u3055\u308c\u308b\u8272\u5dee\u3092\u3061\u3083\u3093\u3068\u6c42\u3081\u307e\u3057\u3087\u3046\uff0c\u3068\u3044\u3046\u7814\u7a76\u304c\u6614\u304b\u3089\u3044\u308d\u3044\u308d\u3068\u3055\u308c\u3066\u3044\u3066\uff0c1976\u5e74\u306b\u8272\u5dee\u3092\u8a08\u308b\u305f\u3081\u306eLab\u8868\u8272\u7cfb\u304c\u52e7\u544a\u3055\u308c\u3066\u3044\u308b\uff0e\n\u3068\u3044\u3046\u3053\u3068\u3067Lab\u8868\u8272\u7cfb\u306b\u5909\u63db\u3057\u3066\u307f\u308b\uff0e\n\n```java:LabDifference.java\npublic class LabDifference implements ColorDifference {\n    private static double[] WP;\n    private static final double t1 = Math.pow(6d/29, 3);\n    private static final double d629 = 6d/29;\n    private static final double d629_2 = d629 * d629;\n\n    private static final double d296 = 29d/6 * 29d/6;\n    private static final double d429 = 4d/29;\n    private static final double d16116 = 16d/116;\n\n    private static final double MAX;\n\n    static {\n        WP = XYZDifference.rgb2xyz(DColor.WHITE);\n        MAX = dif(DColor.WHITE, DColor.BLACK);\n    }\n\n    public static double[] xyz2lab(double[] xyz){\n        double[] dst = new double[3];\n        double xxn = func(xyz[0] / WP[0]);\n        double yyn = func(xyz[1] / WP[1]);\n        double zzn = func(xyz[2] / WP[2]);\n        dst[0] = 116f * yyn - 16;\n        dst[1] = 500 * (xxn - yyn);\n        dst[2] = 200 * (yyn - zzn);\n\n        return dst;\n    }\n\n    public static double[] lab2xyz(double[] lab){\n        double l = lab[0];\n        double a = lab[1];\n        double b = lab[2] ;\n        double fy = (l+16)/116;\n        double fx = fy + a / 500;\n        double fz = fy - b / 200;\n\n        return new double[]{\n                fx > d629 ? WP[0] * fx * fx * fx : (fx - d16116) * 3 * d629_2 * WP[0],\n                fy > d629 ? WP[1] * fy * fy * fy : (fy - d16116) * 3 * d629_2 * WP[1],\n                fx > d629 ? WP[2] * fz * fz * fz : (fz - d16116) * 3 * d629_2 * WP[2]\n        };\n    }\n\n    public static double func(double t){\n        if(t > t1){\n            return Math.pow(t, 1d/3);\n        } else {\n            return 1d/3 * d296 * t + d429;\n        }\n    }\n\n    public static double[] rgb2lab(DColor c){\n        return xyz2lab(XYZDifference.rgb2xyz(c));\n    }\n\n    public static DColor lab2rgb(double[] lab){\n        return XYZDifference.xyz2rgb(lab2xyz(lab));\n    }\n\n    @Override\n    public double difference(DColor src, DColor dst) {\n        return dif(src, dst) / MAX;\n    }\n\n    private static final double dif(DColor src, DColor dst){\n        double[] s = rgb2lab(src);\n        double[] d = rgb2lab(dst);\n        double xd = s[0] - d[0];\n        double yd = s[1] - d[1];\n        double zd = s[2] - d[2];\n\n        return Math.sqrt(xd * xd + yd * yd + zd * zd);\n    }\n}\n```\n\n\u3053\u3053\u307e\u3067\u6765\u308b\u3068**\u9580\u5916\u6f22\u306b\u306f\u3055\u3063\u3071\u308a\u5206\u304b\u3089\u306a\u3044**\u306e\u3067\u8a73\u7d30\u306f\u5c02\u9580\u5bb6\u306b\u805e\u3044\u3066\u6b32\u3057\u3044\uff0e\u30b0\u30b0\u3063\u3066\u51fa\u3066\u304d\u305f\u6570\u5f0f\u3092\u5358\u7d14\u306b\u5b9f\u88c5\u3057\u3066\u3044\u308b\uff0e\u4e00\u5fdc\uff0c\u5b9f\u88c5\u4e0a\u306e\u5de5\u592b\u3068\u3057\u3066\u56fa\u5b9a\u5024\u3092\u3042\u3089\u304b\u3058\u3081\u8a08\u7b97\u3057\u3066\u3044\u308b\u304c\uff0cJava\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u6700\u9069\u5316\u3055\u308c\u308b\u306f\u305a\u306a\u306e\u3067\u901f\u5ea6\u7684\u306b\u306f\u610f\u5473\u306f\u7121\u304f\uff0c\u5358\u306b\u5b9f\u88c5\u4e0a\u306e\u8aa4\u308a\u3092\u6e1b\u3089\u3059\u305f\u3081\u306b\u884c\u3063\u3066\u3044\u308b\uff0e\n\n\u3055\u3066\uff0cLab\u8868\u8272\u7cfb\u3067\u8272\u5dee\u3092\u8a08\u7b97\u3059\u308b\u3068\n\n```zsh:\u5b9f\u884c\u7d50\u679c\uff08Lab)\n0.47194631171156237\t0.9645251064099958\n```\n\n\u3068\u3044\u3046\u7d50\u679c\u304c\u51fa\u305f\uff0e\u5927\u4f532\u500d\u3050\u3089\u3044\u306e\u9055\u3044\uff0c\u3068\u3044\u3046\u308f\u3051\u3060\uff0e\n\n# CIEDE2000\u306b\u3088\u308b\u8272\u5dee\u306e\u8a08\u7b97\n\u3055\u3066\uff0c\u672c\u756a\uff0e[KONICA MINOLTA\u306e\u3053\u306e\u30da\u30fc\u30b8](http://www.konicaminolta.jp/instruments/knowledge/color/part5/03.html)\u306b\u3088\u308b\u3068\uff0cLab\u306b\u3088\u308b\u8868\u8272\u7cfb\u3067\u3082\u307e\u3060\u554f\u984c\u304c\u3042\u308a\uff0cCIEDE2000\u3068\u3044\u3046\u306e\u304c\u51fa\u6765\u305f\u306e\u3060\u304c\uff0cCIEDE2000\u3067\u306f\n> CIE Lab\u306e\u8272\u7a7a\u9593\u4e0a\u3067\u306e\u4eba\u306e\u76ee\u306e\u8272\u8b58\u5225\u57df\u306e\u7279\u5fb4\uff0c\uff11\uff09\u5f69\u5ea6\u4f9d\u5b58\u6027\uff0c\uff12\uff09\u8272\u76f8\u4f9d\u5b58\u6027\uff0c\u304a\u3088\u3073\uff0c\uff13\uff09\u660e\u5ea6\u4f9d\u5b58\u6027\u3092\u8003\u616e\u3057\u305f\u8a08\u7b97\u6307\u63ee\u3068\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\n\u3060\u305d\u3046\u3060\uff0e\n> Lab\u7acb\u4f53\u8272\u7a7a\u9593\u4e0a\u3067\u771f\u5186\u3082\u3057\u304f\u306f\u65b9\u5f62\u72b6\u3067\u3042\u3063\u305f\u306e\u306b\u5bfe\u3057\u3001CIE2000\u8272\u5dee\u5f0f\u3067\u306e\u8272\u5dee\u0394E00\u306f\u3001\u5f69\u5ea6\u65b9\u5411\u3092\u9577\u8ef8\u3068\u3059\u308b\u6955\u5186\u5f62\u72b6\u3068\u306a\u308a\u3001\u4eba\u306e\u76ee\u306e\u8272\u8b58\u5225\u57df\u306e\u5f62\u72b6\u306b\u8fd1\u4f3c\u3057\u3066\u3044\u308b\u306e\u304c\u7279\u9577\n\n\u306a\u3093\u3060\u305d\u3046\u3067\uff0c\u305d\u308c\u3092\u5730\u9053\u306b\u8a08\u7b97\u3059\u308b\u3053\u3068\u306b\u306a\u308b\uff0e\u300c\u5f69\u5ea6\u304c\u4f4e\u3044\u3068\u771f\u5186\u306b\u8fd1\u3044\u6955\u5186\u300d\u3068\u306a\u308a\u300c\u5f69\u5ea6\u304c\u9ad8\u3044\u3068\u5f69\u5ea6\u65b9\u5411\u306b\u306e\u3073\u305f\u6955\u5186\u300d\u3068\u306a\u308b\uff0e\u3064\u307e\u308a\uff0c\u4eba\u9593\u306f\u5f69\u5ea6\u304c\u9ad8\u3044\u307b\u3069\u8272\u5dee\u3092\u611f\u3058\u306b\u304f\u304f\u306a\u308b\uff0c\u3068\u3044\u3046\u3053\u3068\u3089\u3057\u3044\uff0e\u78ba\u304b\u306b\u305d\u3093\u306a\u6c17\u306f\u3059\u308b\uff0e\u3068\u3044\u3046\u3053\u3068\u3067\uff0c\u5b9f\u88c5\u3057\u3066\u307f\u305f\uff0e\n\u6570\u5f0f\u306f[Wikipedia](https://en.wikipedia.org/wiki/Color_difference#CIEDE2000)\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u308b\uff0e\u4ed6\u306e\u6587\u732e\u3067\u3082\u305d\u3046\u306a\u306e\u3060\u304c\uff0cDegree\u3068\u3057\u3066\u89d2\u5ea6\u3092\u6271\u3063\u3066\u3044\u308b\u305f\u3081\uff0c\u5168\u3066Radius\u306b\u5909\u63db\u3059\u308b\u8fba\u308a\u3067\u6ce8\u610f\u304c\u5fc5\u8981\uff0e\uff08\u6587\u732e\u306b\u3088\u3063\u3066\u306f\u9593\u9055\u3048\u3066\u305f\u308a\u3082\u3059\u308b\uff09\n\n```java:CIE2kDifference.java\npublic class CIE2kDifference implements ColorDifference {\n\n    private static final double v25_7 = Math.pow(25, 7);\n    private static final double d6 = Math.toRadians(6);\n    private static final double d25 = Math.toRadians(25);\n    private static final double d30 = Math.toRadians(30);\n    private static final double d60 = Math.toRadians(60);\n    private static final double d63 = Math.toRadians(63);\n    private static final double d275 = Math.toRadians(275);\n    private static final double kl = 1;\n    private static final double kc = 1;\n    private static final double kh = 1;\n    private static final double MAX;\n\n    static {\n        MAX = dif(DColor.WHITE, DColor.BLACK);\n    }\n\n    @Override\n    public double difference(DColor src, DColor dst) {\n        return dif(src, dst) / MAX;\n    }\n\n    public static double dif(DColor src, DColor dst) {\n        double[] src_lab = LabDifference.rgb2lab(src);\n        double l1 = src_lab[0];\n        double a1 = src_lab[1];\n        double b1 = src_lab[2];\n\n        double[] dst_lab = LabDifference.rgb2lab(dst);\n        double l2 = dst_lab[0];\n        double a2 = dst_lab[1];\n        double b2 = dst_lab[2];\n\n        return dif(l1, a1, b1, l2, a2, b2);\n    }\n\n    public static double dif(double l1, double a1, double b1, double l2, double a2, double b2){\n        double dld = l2 - l1;\n        double lb = (l1 + l2) / 2;\n\n        double cs1 = Math.hypot(a1, b1);\n        double cs2 = Math.hypot(a2, b2);\n        double cb = (cs1 + cs2) / 2;\n        double cb7 = Math.pow(cb, 7);\n        double ad1 = a1 + a1 / 2 * (1 - Math.sqrt(cb7 / (cb7 + v25_7)));\n        double ad2 = a2 + a2 / 2 * (1 - Math.sqrt(cb7 / (cb7 + v25_7)));\n\n        double cd1 = Math.hypot(ad1, b1);\n        double cd2 = Math.hypot(ad2, b2);\n        double cbd = (cd1 + cd2) / 2;\n        double cbd7 = Math.pow(cbd, 7);\n\n        double dcd = (cd2 - cd1);\n        double hd1 = b1 == 0 && ad1 == 0 ? 0 : Math.atan2(b1, ad1);\n        if(hd1 < 0){\n            hd1 += Math.PI * 2;\n        }\n        double hd2 = b2 == 0 && ad2 == 0 ? 0 : Math.atan2(b2, ad2);\n        if(hd2 < 0){\n            hd2 += Math.PI * 2;\n        }\n\n        double dhd = hd2 - hd1;\n        if(cd1 * cd2 == 0){\n            dhd = 0;\n        } else if(Math.abs(hd1 - hd2) > Math.PI) {\n            if(hd2 <= hd1){\n                dhd += Math.PI * 2;\n            } else {\n                dhd -= Math.PI * 2;\n            }\n        }\n\n\n        double dhhd = 2 * Math.sqrt(cd1 * cd2) * Math.sin(dhd / 2);\n        double hhbd = 0;\n        if(cd1 * cd2 != 0){\n            hhbd = Math.abs(hd1 - hd2) > Math.PI ? ( hd1 + hd2 + Math.PI * 2) / 2 : (hd1 + hd2) / 2;\n        }\n\n        double tt = 1\n                - 0.17 * Math.cos(hhbd - d30)\n                + 0.24 * Math.cos(2 * hhbd)\n                + 0.32 * Math.cos(3 * hhbd + d6)\n                - 0.20 * Math.cos(4 * hhbd - d63);\n        double lb50_2 = Math.pow(lb - 50, 2);\n        double ssl = 1 + (0.015 * lb50_2) / Math.sqrt(20 + lb50_2);\n        double ssc = 1 + 0.045 * cbd;\n        double ssh = 1 + 0.015 * cbd * tt;\n        double rrt = -2d * Math.sqrt(cbd7 / (cbd7 +v25_7)) * Math.sin(d60 * Math.exp(- Math.pow((hhbd - d275)/ d25, 2)));\n        double de = Math.pow(dld / (kl * ssl), 2)\n                + Math.pow(dcd / (kc * ssc), 2)\n                + Math.pow(dhhd / (kh * ssh), 2)\n                + rrt * (dcd / (kc * ssc)) * (dhhd / (kh * ssh));\n\n        return Math.sqrt(de);\n    }\n}\n```\n\n\u3055\u3066\uff0c**\u3082\u306f\u3084\u3055\u3063\u3071\u308a\u5206\u304b\u3089\u306a\u3044**\u3051\u308c\u3069\uff0c\u4e00\u5fdc\u3053\u308c\u3067\u5408\u3063\u3066\u3044\u308b\u3089\u3057\u3044\uff0e[\u3053\u306e\u8fba\u308a\u306e\u6587\u732e](http://www.ece.rochester.edu/~gsharma/ciede2000/ciede2000noteCRNA.pdf)\u3068\u6bd4\u8f03\u3057\u3066\u51fa\u529b\u3055\u308c\u308b\u5024\u304c\u540c\u3058\u3067\u3042\u308b\u3053\u3068\u306f\u78ba\u8a8d\u3057\u3066\u3044\u308b\uff0e\n\n\u5b9f\u884c\u7d50\u679c\u306f\u6b21\u306e\u901a\u308a\uff0e\n\n```zsh:\u5b9f\u884c\u7d50\u679c\uff08CIE2000\uff09\n0.24093258957174238\t0.5480665244873609\n```\n\n\u3068\u3044\u3046\u3053\u3068\u3067\uff0c2.2\u500d\u3050\u3089\u3044\u3089\u3057\u3044\uff0e\uff08\u3082\u306f\u3084\u5024\u306f\u3069\u3046\u3067\u3082\u826f\u304f\u306a\u3063\u3066\u304d\u305f\u304c\uff09\n\n# \u304a\u307e\u3051\uff08CIEDE2000\u306e\u9ad8\u901f\u5316\uff09\nCIEDE2000\u306f\u898b\u305f\u76ee\u306e\u901a\u308a\u51c4\u304f\u91cd\u3044\u51e6\u7406\u306a\u306e\u3067\uff0c\u3067\u304d\u308b\u3060\u3051\u8efd\u304f\u3059\u308b\uff0e\u3068\u306f\u3044\u3063\u3066\u3082\u6700\u8fd1\u306eJava\u306f\u6700\u9069\u5316\u3055\u308c\u308b\u306e\u3067\u305d\u3082\u305d\u3082\u901f\u304f\uff0c\u307b\u3068\u3093\u3069\u51fa\u6765\u308b\u3068\u3053\u308d\u304c\u7121\u304b\u3063\u305f\uff0e\nAndroid\u3060\u3068\u307e\u3060\u307e\u3060\u3067\u304d\u308b\u3068\u3053\u308d\u306f\u3042\u308a\u305d\u3046\u306a\u306e\u3067\u5f8c\u65e5\u3084\u3063\u3066\u307f\u308b\uff0e\n\n```java:FastCIE2kDif.java\npublic class FastCIE2kDif implements ColorDifference {\n\n    private static final double pi_2 = Math.PI * 2;\n    private static final double v25_7 = Math.pow(25, 7);\n    private static final double d6 = Math.toRadians(6);\n    private static final double d25 = Math.toRadians(25);\n    private static final double d30 = Math.toRadians(30);\n    private static final double d60 = Math.toRadians(60);\n    private static final double d63 = Math.toRadians(63);\n    private static final double d275 = Math.toRadians(275);\n    private static final double kl = 1;\n    private static final double kc = 1;\n    private static final double kh = 1;\n    private static final double MAX;\n\n    static {\n        MAX = dif(DColor.WHITE, DColor.BLACK);\n    }\n\n    public static final double hypot(double a, double b){\n        return Math.sqrt(a * a + b * b);\n    }\n\n    public static final double pow2(double a){\n        return a * a;\n    }\n\n    public static final double pow7(double a){\n        return a * a * a * a * a * a * a;\n    }\n\n    @Override\n    public double difference(DColor src, DColor dst) {\n        return dif(src, dst) / MAX;\n    }\n\n    public static double dif(DColor src, DColor dst) {\n        double[] src_lab = LabDifference.rgb2lab(src);\n        double l1 = src_lab[0];\n        double a1 = src_lab[1];\n        double b1 = src_lab[2];\n\n        double[] dst_lab = LabDifference.rgb2lab(dst);\n        double l2 = dst_lab[0];\n        double a2 = dst_lab[1];\n        double b2 = dst_lab[2];\n\n        return dif(l1, a1, b1, l2, a2, b2);\n    }\n\n    public static double dif(double l1, double a1, double b1, double l2, double a2, double b2){\n        double dld = l2 - l1;\n        double lb = (l1 + l2) / 2;\n\n        double cs1 = hypot(a1, b1);\n        double cs2 = hypot(a2, b2);\n        double cb = (cs1 + cs2) / 2;\n        double cb7 = pow7(cb);\n        double ad1 = a1 + a1 / 2 * (1 - Math.sqrt(cb7 / (cb7 + v25_7)));\n        double ad2 = a2 + a2 / 2 * (1 - Math.sqrt(cb7 / (cb7 + v25_7)));\n\n        double cd1 = hypot(ad1, b1);\n        double cd2 = hypot(ad2, b2);\n        double cbd = (cd1 + cd2) / 2;\n        double cbd7 = pow7(cbd);\n\n        double dcd = (cd2 - cd1);\n        double hd1 = b1 == 0 && ad1 == 0 ? 0 : Math.atan2(b1, ad1);\n        if(hd1 < 0){\n            hd1 += pi_2;\n        }\n        double hd2 = b2 == 0 && ad2 == 0 ? 0 : Math.atan2(b2, ad2);\n        if(hd2 < 0){\n            hd2 += pi_2;\n        }\n\n        double dhd = hd2 - hd1;\n        if(cd1 * cd2 == 0){\n            dhd = 0;\n        } else if(Math.abs(hd1 - hd2) > Math.PI) {\n            if(hd2 <= hd1){\n                dhd += pi_2;\n            } else {\n                dhd -= pi_2;\n            }\n        }\n\n\n        double dhhd = 2 * Math.sqrt(cd1 * cd2) * Math.sin(dhd / 2);\n        double hhbd = 0;\n        if(cd1 * cd2 != 0){\n            hhbd = Math.abs(hd1 - hd2) > Math.PI ? ( hd1 + hd2 + pi_2) / 2 : (hd1 + hd2) / 2;\n        }\n\n        double tt = 1\n                - 0.17 * Math.cos(hhbd - d30)\n                + 0.24 * Math.cos(2 * hhbd)\n                + 0.32 * Math.cos(3 * hhbd + d6)\n                - 0.20 * Math.cos(4 * hhbd - d63);\n        double lb50_2 = pow2(lb - 50);\n        double ssl = 1 + (0.015 * lb50_2) / Math.sqrt(20 + lb50_2);\n        double ssc = 1 + 0.045 * cbd;\n        double ssh = 1 + 0.015 * cbd * tt;\n        double rrt = -2d * Math.sqrt(cbd7 / (cbd7 +v25_7)) * Math.sin(d60 * Math.exp(- pow2((hhbd - d275)/ d25)));\n        double de = pow2(dld / (kl * ssl))\n                + pow2(dcd / (kc * ssc))\n                + pow2(dhhd / (kh * ssh))\n                + rrt * (dcd / (kc * ssc)) * (dhhd / (kh * ssh));\n\n        return Math.sqrt(de);\n    }\n}\n```\n\n\u3084\u3063\u305f\u3053\u3068\u306f\u4e0b\u8a18\u306e\u901a\u308a\uff0e\n\n- Math.hypot()\u304c\u51c4\u304f\u9045\u3044\u306e\u3067\u30d9\u30bf\u3067\u66f8\u304d\u76f4\u3057\u305f\uff0e\u30d0\u30c3\u30d5\u30a1\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3057\u305f\u5834\u5408\u306b\u3061\u3083\u3093\u3068\u8a08\u7b97\u3067\u304d\u306a\u3044\u304c\u4eca\u56de\u306e\u4f8b\u3067\u306f\u5927\u304d\u306a\u5024\u3092\u4f7f\u308f\u306a\u3044\u306e\u3067\u554f\u984c\u7121\u3044\uff0e\n- Math.pow()\u3067\u306f2\u4e57\u30687\u4e57\u3057\u304b\u4f7f\u3063\u3066\u306a\u3044\u306e\u3067\u305d\u308c\u305e\u308c\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u610f\u3057\u3066\u639b\u3051\u7b97\u3092\u884c\u3063\u305f\uff0e\u305f\u3060\uff0c2\u4e57\u306b\u95a2\u3057\u3066\u306f\u52b9\u679c\u7121\u3057\uff0c7\u4e57\u306e\u5185\u90e8\u30922->4->8->7\u4e57\u306e\u9806\u306b\u8a08\u7b97\u3055\u305b\u305f\u308a\u3044\u308d\u3044\u308d\u3084\u3063\u305f\u304c\u5358\u7d14\u306b7\u56de\u639b\u3051\u308b\u306e\u3068\u5909\u5316\u7121\u3057\uff0e\n\n\u4ed6\u306b\u3082cos\u3084atan\u3092\u8fd1\u4f3c\u8a08\u7b97\u3055\u305b\u305f\u308a\u3057\u3066\u307f\u305f\u304c\u5168\u7136\u52b9\u679c\u304c\u51fa\u306a\u304b\u3063\u305f\uff0e\u89d2\u5ea6\u8a08\u7b97\u3092int\u5316\u3057\u3066\u6700\u5f8c\u306bRadius\u5909\u63db\u3059\u308b\u65b9\u6cd5\u7b49\u3082\u8003\u3048\u305f\u304c\u52b9\u679c\u304c\u51fa\u305d\u3046\u306b\u7121\u3044\u306e\u3067\u3084\u3063\u3066\u3044\u306a\u3044\uff0e\n\n# \u3084\u308b\u3053\u3068\u30ea\u30b9\u30c8\nGitHub\u306b\u4e0a\u3052\u305f\u308aAndroid\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u308b\u4e88\u5b9a\uff0e\n", "tags": ["Java", "Android", "color", "\u8272", "\u8272\u7a7a\u9593"]}