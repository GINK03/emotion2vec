{"tags": ["iOS", "ReactiveCocoa", "Swift"], "context": "\n\n\u958b\u767a\u74b0\u5883\n\nXCode7.3\nSwift2.2\nReactiveCocoa4\n\n\nReactive\u3068\u306f\n\u3053\u3053\u304c\u5206\u304b\u308a\u3084\u3059\u304b\u3063\u305f\n\u53e4\u304f\u3066\u65b0\u3057\u3044\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u3059\u3059\u3081-Frontrend Conference\n\u6700\u521d\u306b\u7d39\u4ecb\u3057\u305fReactive\u306b\u3064\u3044\u3066\u306e\u89e3\u8aac\u3088\u308a\u306f\u5b9f\u88c5\u7684\u306a\u89e3\u8aac\u304c\u3042\u3063\u3066\u5206\u304b\u308a\u3084\u3059\u3044\u3002ObjC\u3001Swift\u3067\u306f\u306a\u304fRxJS\u3068\u3044\u3046JavaScript\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u4f7f\u3063\u3066\u89e3\u8aac\u3057\u3066\u3044\u308b\u3051\u3069\u3002\n\u300cRxJS\u300d\u521d\u5fc3\u8005\u5165\u9580 \u2013 JavaScript\u306e\u975e\u540c\u671f\u51e6\u7406\u306e\u5e38\u8b58\u3092\u5909\u3048\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\n\u7d50\u8ad6\u3068\u3057\u3066\u306f\u3001MVVM\u3068\u3044\u3046\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u5b9f\u88c5\u3059\u308b\u306e\u306b\u4f7f\u308f\u308c\u308b\u306e\u304cReactive\u30fb\u30fb\u30fb\u3067\u5408\u3063\u3066\u308b\u304b\u306a\uff1f\n\niOS\u30a2\u30d7\u30ea\u3067\u5b9f\u88c5\u3059\u308b\u306b\u306f\n\u9078\u629e\u80a2\u306f\u5927\u96d1\u628a\u306b\u306f\u4e8c\u3064\n\nReactiveCocoa\nRxSwift\n\nRxSwift\u3088\u308a\u524d\u306b\u77e5\u3063\u3066\u305f\u306e\u3067\u3001ReactiveCocoa\u3092\u9078\u629e\u3002\n\nReactiveCocoa\u3068\u306f\nReactiveCocoa\niOS\u30a2\u30d7\u30ea\u958b\u767a\u754c\u3067\u306f\u5148\u767a\u7d44\u3060\u3063\u305f\u3051\u3069\u3001ObjC\u304b\u3089Swift\u3078\u306e\u8ee2\u63db\u306f\u6bd4\u8f03\u7684\u6700\u8fd1\u3002\u306a\u306e\u3067\u8cc7\u6599(google\u3067\u306e\u691c\u7d22\u7d50\u679c)\u304c\u5727\u5012\u7684\u306bObjC\u6642\u4ee3\u306e\u304c\u591a\u304f\u3001\u4eca\u306eSwift\u3067\u306e\u3084\u308a\u65b9\u304c\u3059\u3050\u306b\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u3082\u3042\u308a\u307e\u3059\u3002\n\n\u5c0e\u5165\u65b9\u6cd5\n\u624b\u52d5\u3001Pods install\u3001Carthage\u3068\u8272\u3005\u3042\u308b\u3051\u3069\u4eca\u56de\u306fCarthage\u306b\u3057\u307e\u3057\u305f\u3002\nPods install\u3068\u4f3c\u3066\u308b\u3051\u3069\u3001Carthage\u306e\u65b9\u304c\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3059\u308b\u5f71\u97ff\u304c\u5c0f\u3055\u3044\u3088\u3046\u3067\u3059\u3002\u3053\u3061\u3089\u306e\u65b9\u304c\u597d\u307f\u3067\u3059\u306d\nCarthage\u306e\u5177\u4f53\u7684\u306a\u4f7f\u3044\u65b9\u306f\u4ee5\u4e0b\u3092\u53c2\u7167\nCarthage\u3092\u4f7f\u3063\u3066\u30d3\u30eb\u30c9\u6642\u9593\u3092\u77ed\u7e2e\u3057\u3088\u3046\nReactiveCocoa <- ReadMe\u306b\u3084\u308a\u65b9\u8f09\u3063\u3066\u307e\u3059\n\n\u5b9f\u88c5\n\u304a\u624b\u9803\u306a\u306e\u304c\u7121\u304b\u3063\u305f\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u5148\u65e5\u4f5c\u3063\u305fAVCam-iOS\u3092ReactiveCocoa\u3092\u4f7f\u3063\u3066\u4f5c\u308a\u76f4\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u5148\u306b\u7d50\u8ad6\u3092\u8a00\u3063\u3066\u304a\u304f\u3068\u3001\u3042\u307e\u308a\u9069\u5f53\u306a\u4f8b\u3067\u306f\u7121\u304b\u3063\u305fw\n\u4f5c\u3063\u305f\u3082\u306e\u306fgithub\u306b\u3042\u3052\u3066\u3042\u308a\u307e\u3059\u3002\nAVCamRCSample\n\u3084\u308a\u65b9\u304c\u3059\u3050\u306b\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3092\u30d4\u30c3\u30af\u30a2\u30c3\u30d7\u3002\n\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30dc\u30bf\u30f3\u306e\u30bf\u30c3\u30d7\u306b\u5bfe\u3059\u308bAction\u3092ReactiveCocoa\u3067\u5b9f\u88c5\u3057\u3088\u3046\u3068\u3059\u308b\u3068\n\nCameraViewController.swift\n\n    @IBAction func resumeInterruptedSession(sender: AnyObject) {\n        dispatch_async(self.sessionQueue, {\n            self.session.startRunning()\n            self.sessionRunning = self.session.running\n            if(!self.session.running){\n                dispatch_async(dispatch_get_main_queue(), {\n                    let message = NSLocalizedString(\"Unable to resume\", comment: \"Alert message when unable to resume the session running\")\n                    let alertController = UIAlertController(title: \"AVCam\", message: message, preferredStyle:.Alert)\n                    let cancleAction = UIAlertAction(title: NSLocalizedString(\"OK\", comment: \"Alert OK button\"), style: .Cancel, handler: nil)\n                    alertController.addAction(cancleAction)\n                    self.presentViewController(alertController, animated: true, completion: nil)\n                })\n            } else {\n                dispatch_async(dispatch_get_main_queue(), {\n                    self.resumeButton.hidden = true\n                })\n            }\n        })\n    }\n\n\n\n\u3053\u3046\u3044\u3046\u5f62\u306b\u306a\u308b\n\nCameraViewController.swift\n\n        let resumeInterruptedSessionAction = Action<AnyObject, Void, NSError>{ _ in\n            dispatch_async(self.sessionQueue, {\n                self.session.startRunning()\n                self.sessionRunning = self.session.running\n                if(!self.session.running){\n                    dispatch_async(dispatch_get_main_queue(), {\n                        let message = NSLocalizedString(\"Unable to resume\", comment: \"Alert message when unable to resume the session running\")\n                        let alertController = UIAlertController(title: \"AVCam\", message: message, preferredStyle:.Alert)\n                        let cancleAction = UIAlertAction(title: NSLocalizedString(\"OK\", comment: \"Alert OK button\"), style: .Cancel, handler: nil)\n                        alertController.addAction(cancleAction)\n                        self.presentViewController(alertController, animated: true, completion: nil)\n                    })\n                } else {\n                    dispatch_async(dispatch_get_main_queue(), {\n                        self.resumeButton.hidden = true\n                    })\n                }\n            })\n\n            return SignalProducer.empty\n        }\n\n        resumeButton.addTarget(resumeInterruptedSessionAction.unsafeCocoaAction, action: CocoaAction.selector, forControlEvents: .TouchUpInside)\n\n\n\n\n\u30b8\u30a7\u30b9\u30c1\u30e3\u30fc\u306e\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u305f\u3082\u306e\u3092\n\nCameraViewController.swift\n    @IBAction func focusAndExposeTap(gestureRecognizer: UITapGestureRecognizer) {\n        let devicePoint = (self.previewView.layer as! AVCaptureVideoPreviewLayer).captureDevicePointOfInterestForPoint(gestureRecognizer.locationInView(gestureRecognizer.view))\n        self.focusWithMode(AVCaptureFocusMode.AutoFocus, exposeWithMode: AVCaptureExposureMode.AutoExpose, atDevicePoint: devicePoint, motiorSubjectAreaChange: true)\n    }\n\n\n\n\u3053\u306e\u3088\u3046\u306b\u5909\u66f4\u3059\u308b\n\nCameraViewController.swift\n        let gesRect = UITapGestureRecognizer()\n        self.previewView.addGestureRecognizer(gesRect)\n        gesRect.rac_gestureSignal().toSignalProducer().map({ (x) -> CGPoint in\n            return (self.previewView.layer as! AVCaptureVideoPreviewLayer).captureDevicePointOfInterestForPoint(x!.locationInView(x!.view))\n        }).startWithNext { (pointInView) -> () in\n            self.focusWithMode(AVCaptureFocusMode.AutoFocus, exposeWithMode: AVCaptureExposureMode.AutoExpose, atDevicePoint: pointInView, motiorSubjectAreaChange: true)\n        }\n\n\n\n\u7d50\u8ad6\n\u307e\u3042\u304a\u8a66\u3057\u306a\u3093\u3067\u826f\u3044\u3082\u60aa\u3044\u3082\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u4eca\u56de\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u307e\u3060Reactive\u306e\u30e1\u30ea\u30c3\u30c8\u3092\u8a66\u3057\u304d\u308c\u3066\u306a\u3044\u306e\u3067\u3001\u3082\u3046\u5c11\u3057\u6069\u6075\u3092\u53d7\u3051\u3084\u3059\u3044\u5f62\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u7528\u610f\u3057\u3066\u8a66\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u8ffd\u8a18\n\u53c2\u8003\u306b\u306a\u308b\u30b5\u30a4\u30c8\nReactiveCocoa\u52c9\u5f37\u4f1a\u95a2\u897f\u3092\u958b\u50ac\u3057\u307e\u3057\u305f #rac_kansai\nReactiveCocoa and MVVM, an Introduction\n\n\n### \u958b\u767a\u74b0\u5883\n\n+ XCode7.3\n+ Swift2.2\n+ ReactiveCocoa4\n\n### Reactive\u3068\u306f\n\n\u3053\u3053\u304c\u5206\u304b\u308a\u3084\u3059\u304b\u3063\u305f\n[\u53e4\u304f\u3066\u65b0\u3057\u3044\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u3059\u3059\u3081-Frontrend Conference](https://html5experts.jp/ahomu/13333/)\n\n\u6700\u521d\u306b\u7d39\u4ecb\u3057\u305fReactive\u306b\u3064\u3044\u3066\u306e\u89e3\u8aac\u3088\u308a\u306f\u5b9f\u88c5\u7684\u306a\u89e3\u8aac\u304c\u3042\u3063\u3066\u5206\u304b\u308a\u3084\u3059\u3044\u3002ObjC\u3001Swift\u3067\u306f\u306a\u304fRxJS\u3068\u3044\u3046JavaScript\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u4f7f\u3063\u3066\u89e3\u8aac\u3057\u3066\u3044\u308b\u3051\u3069\u3002\n\n[\u300cRxJS\u300d\u521d\u5fc3\u8005\u5165\u9580 \u2013 JavaScript\u306e\u975e\u540c\u671f\u51e6\u7406\u306e\u5e38\u8b58\u3092\u5909\u3048\u308b\u30e9\u30a4\u30d6\u30e9\u30ea](http://liginc.co.jp/web/js/151272)\n\n\n\n\u7d50\u8ad6\u3068\u3057\u3066\u306f\u3001MVVM\u3068\u3044\u3046\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u5b9f\u88c5\u3059\u308b\u306e\u306b\u4f7f\u308f\u308c\u308b\u306e\u304cReactive\u30fb\u30fb\u30fb\u3067\u5408\u3063\u3066\u308b\u304b\u306a\uff1f\n\n\n### iOS\u30a2\u30d7\u30ea\u3067\u5b9f\u88c5\u3059\u308b\u306b\u306f\n\n\u9078\u629e\u80a2\u306f\u5927\u96d1\u628a\u306b\u306f\u4e8c\u3064\n\n+ ReactiveCocoa\n+ RxSwift\n\nRxSwift\u3088\u308a\u524d\u306b\u77e5\u3063\u3066\u305f\u306e\u3067\u3001ReactiveCocoa\u3092\u9078\u629e\u3002\n\n\n### ReactiveCocoa\u3068\u306f\n\n[ReactiveCocoa](https://github.com/ReactiveCocoa/ReactiveCocoa)\n\niOS\u30a2\u30d7\u30ea\u958b\u767a\u754c\u3067\u306f\u5148\u767a\u7d44\u3060\u3063\u305f\u3051\u3069\u3001ObjC\u304b\u3089Swift\u3078\u306e\u8ee2\u63db\u306f\u6bd4\u8f03\u7684\u6700\u8fd1\u3002\u306a\u306e\u3067\u8cc7\u6599(google\u3067\u306e\u691c\u7d22\u7d50\u679c)\u304c\u5727\u5012\u7684\u306bObjC\u6642\u4ee3\u306e\u304c\u591a\u304f\u3001\u4eca\u306eSwift\u3067\u306e\u3084\u308a\u65b9\u304c\u3059\u3050\u306b\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u3082\u3042\u308a\u307e\u3059\u3002\n\n\n### \u5c0e\u5165\u65b9\u6cd5\n\n\u624b\u52d5\u3001Pods install\u3001Carthage\u3068\u8272\u3005\u3042\u308b\u3051\u3069\u4eca\u56de\u306fCarthage\u306b\u3057\u307e\u3057\u305f\u3002\nPods install\u3068\u4f3c\u3066\u308b\u3051\u3069\u3001Carthage\u306e\u65b9\u304c\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3059\u308b\u5f71\u97ff\u304c\u5c0f\u3055\u3044\u3088\u3046\u3067\u3059\u3002\u3053\u3061\u3089\u306e\u65b9\u304c\u597d\u307f\u3067\u3059\u306d\n\nCarthage\u306e\u5177\u4f53\u7684\u306a\u4f7f\u3044\u65b9\u306f\u4ee5\u4e0b\u3092\u53c2\u7167\n[Carthage\u3092\u4f7f\u3063\u3066\u30d3\u30eb\u30c9\u6642\u9593\u3092\u77ed\u7e2e\u3057\u3088\u3046](http://qiita.com/yutat93/items/97fe9bc2bf2e97da7ec1)\n[ReactiveCocoa](https://github.com/ReactiveCocoa/ReactiveCocoa) <- ReadMe\u306b\u3084\u308a\u65b9\u8f09\u3063\u3066\u307e\u3059\n\n\n### \u5b9f\u88c5\n\n\u304a\u624b\u9803\u306a\u306e\u304c\u7121\u304b\u3063\u305f\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u5148\u65e5\u4f5c\u3063\u305fAVCam-iOS\u3092ReactiveCocoa\u3092\u4f7f\u3063\u3066\u4f5c\u308a\u76f4\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u5148\u306b\u7d50\u8ad6\u3092\u8a00\u3063\u3066\u304a\u304f\u3068\u3001\u3042\u307e\u308a\u9069\u5f53\u306a\u4f8b\u3067\u306f\u7121\u304b\u3063\u305fw\n\u4f5c\u3063\u305f\u3082\u306e\u306fgithub\u306b\u3042\u3052\u3066\u3042\u308a\u307e\u3059\u3002\n\n[AVCamRCSample](https://github.com/rnsm504/AVCamRCSample)\n\n\n\u3084\u308a\u65b9\u304c\u3059\u3050\u306b\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3092\u30d4\u30c3\u30af\u30a2\u30c3\u30d7\u3002\n\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30dc\u30bf\u30f3\u306e\u30bf\u30c3\u30d7\u306b\u5bfe\u3059\u308bAction\u3092ReactiveCocoa\u3067\u5b9f\u88c5\u3057\u3088\u3046\u3068\u3059\u308b\u3068\n\n```CameraViewController.swift\n\n    @IBAction func resumeInterruptedSession(sender: AnyObject) {\n        dispatch_async(self.sessionQueue, {\n            self.session.startRunning()\n            self.sessionRunning = self.session.running\n            if(!self.session.running){\n                dispatch_async(dispatch_get_main_queue(), {\n                    let message = NSLocalizedString(\"Unable to resume\", comment: \"Alert message when unable to resume the session running\")\n                    let alertController = UIAlertController(title: \"AVCam\", message: message, preferredStyle:.Alert)\n                    let cancleAction = UIAlertAction(title: NSLocalizedString(\"OK\", comment: \"Alert OK button\"), style: .Cancel, handler: nil)\n                    alertController.addAction(cancleAction)\n                    self.presentViewController(alertController, animated: true, completion: nil)\n                })\n            } else {\n                dispatch_async(dispatch_get_main_queue(), {\n                    self.resumeButton.hidden = true\n                })\n            }\n        })\n    }\n\n```\n\n\u3053\u3046\u3044\u3046\u5f62\u306b\u306a\u308b\n\n```CameraViewController.swift\n\n        let resumeInterruptedSessionAction = Action<AnyObject, Void, NSError>{ _ in\n            dispatch_async(self.sessionQueue, {\n                self.session.startRunning()\n                self.sessionRunning = self.session.running\n                if(!self.session.running){\n                    dispatch_async(dispatch_get_main_queue(), {\n                        let message = NSLocalizedString(\"Unable to resume\", comment: \"Alert message when unable to resume the session running\")\n                        let alertController = UIAlertController(title: \"AVCam\", message: message, preferredStyle:.Alert)\n                        let cancleAction = UIAlertAction(title: NSLocalizedString(\"OK\", comment: \"Alert OK button\"), style: .Cancel, handler: nil)\n                        alertController.addAction(cancleAction)\n                        self.presentViewController(alertController, animated: true, completion: nil)\n                    })\n                } else {\n                    dispatch_async(dispatch_get_main_queue(), {\n                        self.resumeButton.hidden = true\n                    })\n                }\n            })\n            \n            return SignalProducer.empty\n        }\n        \n        resumeButton.addTarget(resumeInterruptedSessionAction.unsafeCocoaAction, action: CocoaAction.selector, forControlEvents: .TouchUpInside)\n      \n\n```\n\n\n\u30b8\u30a7\u30b9\u30c1\u30e3\u30fc\u306e\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u305f\u3082\u306e\u3092\n\n```CameraViewController.swift\n    @IBAction func focusAndExposeTap(gestureRecognizer: UITapGestureRecognizer) {\n        let devicePoint = (self.previewView.layer as! AVCaptureVideoPreviewLayer).captureDevicePointOfInterestForPoint(gestureRecognizer.locationInView(gestureRecognizer.view))\n        self.focusWithMode(AVCaptureFocusMode.AutoFocus, exposeWithMode: AVCaptureExposureMode.AutoExpose, atDevicePoint: devicePoint, motiorSubjectAreaChange: true)\n    }\n    \n```\n\n\u3053\u306e\u3088\u3046\u306b\u5909\u66f4\u3059\u308b\n\n```CameraViewController.swift\n        let gesRect = UITapGestureRecognizer()\n        self.previewView.addGestureRecognizer(gesRect)\n        gesRect.rac_gestureSignal().toSignalProducer().map({ (x) -> CGPoint in\n            return (self.previewView.layer as! AVCaptureVideoPreviewLayer).captureDevicePointOfInterestForPoint(x!.locationInView(x!.view))\n        }).startWithNext { (pointInView) -> () in\n            self.focusWithMode(AVCaptureFocusMode.AutoFocus, exposeWithMode: AVCaptureExposureMode.AutoExpose, atDevicePoint: pointInView, motiorSubjectAreaChange: true)\n        }\n```\n\n\n### \u7d50\u8ad6\n\n\u307e\u3042\u304a\u8a66\u3057\u306a\u3093\u3067\u826f\u3044\u3082\u60aa\u3044\u3082\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u4eca\u56de\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u307e\u3060Reactive\u306e\u30e1\u30ea\u30c3\u30c8\u3092\u8a66\u3057\u304d\u308c\u3066\u306a\u3044\u306e\u3067\u3001\u3082\u3046\u5c11\u3057\u6069\u6075\u3092\u53d7\u3051\u3084\u3059\u3044\u5f62\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u7528\u610f\u3057\u3066\u8a66\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n### \u8ffd\u8a18\n\n\u53c2\u8003\u306b\u306a\u308b\u30b5\u30a4\u30c8\n\n[ReactiveCocoa\u52c9\u5f37\u4f1a\u95a2\u897f\u3092\u958b\u50ac\u3057\u307e\u3057\u305f #rac_kansai](http://ninjinkun.hatenablog.com/entry/2014/08/03/204348)\n\n[ReactiveCocoa and MVVM, an Introduction](http://www.sprynthesis.com/2014/12/06/reactivecocoa-mvvm-introduction/)\n\n\n"}