{"context": " More than 1 year has passed since last update.\n\nSICP\u3068\u306f\u4f55\u304b\n\nStructure and Interpretation of Computer Programs\u3068\u3044\u3046\u53e4\u3081\u304b\u3057\u3044\u8868\u7d19\u306e\u672c\u3092\u3054\u5b58\u77e5\u3067\u3057\u3087\u3046\u304b? \u3053\u308c\u306f\u3082\u3068\u3082\u3068\u3001\u30de\u30b5\u30c1\u30e5\u30fc\u30bb\u30c3\u30c4\u5de5\u79d1\u5927\u5b66(Massachusetts Institute of Technologies; MIT)\u306e\u96fb\u6c17\u5de5\u5b66\u304a\u3088\u3073\u8a08\u7b97\u6a5f\u79d1\u5b66(Electrical Engineering & Computer Science; EECS)\u7cfb\u306e\u5b66\u90e8\u306e\u6388\u696d\u306e\u4e00\u672c\u76ee\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u3066\u3044\u305f\u540c\u540d\u306e\u6388\u696d\u304b\u3089\u767a\u751f\u3057\u305f\u6559\u79d1\u66f8\u3067\u3059\u3002\u6559\u79d1\u66f8\u306f\u7121\u6599\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nHTML\u7248 http://mitpress.mit.edu/sicp/full-text/book/book.html\n\nKindle\u7248 https://github.com/jonathanpatt/sicp-kindle\n\nPDF\u7248 https://github.com/sarabander/sicp-pdf\n\nTexinfo\u7248 http://www.neilvandyke.org/sicp-texi/\n\n\u548c\u6587PDF\u7248 https://github.com/minghai/sicp-pdf/\n\n\n\u30b3\u30fc\u30b9\u306b\u306f6.001\u3068\u3044\u3046\u756a\u53f7\u304c\u3064\u3051\u3089\u308c\u3066\u3044\u307e\u3057\u305f(\u7c73\u56fd\u306e\u5b66\u6821\u306e\u6388\u696d\u306f\u756a\u53f7\u304c\u4ed8\u3044\u3066\u3044\u3066\u6570\u5b57\u304c\u9ad8\u3044\u65b9\u304c\u3060\u3044\u305f\u3044\u96e3\u3057\u3044)\u3002MIT\u306e\u6388\u696d\u306fEECS\u304c6\u756a\u53f0\u3067\u30016.001-6.004\u304ccomputer programs, circuits and electronics, signals and systems, computation structures\u3060\u3063\u305f\u305d\u3046\u3067\u3059(\u53c2\u8003)\u30021986\u5e74(?)\u306e\u6388\u696d\u306e\u69d8\u5b50\u306f\u52d5\u753b\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059(MIT OCW SICP 1986) \u3002Lisper\u306a\u3089\u3070\u9ed2\u677f\u3067\u62ec\u5f27\u306e\u5bfe\u5fdc\u3092\u3042\u308f\u305b\u308b(\u3068\u304d\u3069\u304d\u9593\u9055\u3048\u308b)\u8b1b\u5e2b\u306e\u59ff\u306b\u5fc3\u304c\u9707\u3048\u308b\u3053\u3068\u3046\u3051\u3042\u3044\u3067\u3059\u3002\u96e3\u89e3\u306a\u3053\u3068\u3067\u77e5\u3089\u308c\u308b\u540d\u7269\u6388\u696d\u3060\u3063\u305f\u3088\u3046\u306a\u306e\u3067\u3059\u304c\u3001\u4ed6\u306e\u5c02\u653b\u3060\u3051\u3069\u4e00\u500b\u3060\u3051computer science\u306e\u6388\u696d\u3092\u53d7\u3051\u3066\u307f\u3088\u3046\u3068\u76ee\u3092\u8f1d\u304b\u305b\u3066\u304d\u305f\u5b66\u751f\u306e\u5fc3\u304c\u6298\u308c\u308b\u3068\u304b\u3001\u6388\u696d\u306e\u518d\u7de8\u6210\u3060\u304b\u306e\u7406\u7531\u30672007\u5e74\u3067\u7d42\u308a\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u3088\u3046\u3067\u3059(\u53c2\u8003)\u3002\n\u305d\u306e\u5f8c\u306f\u3001computer science\u306e\u6388\u696d\u306e\u4e00\u672c\u76ee\u306fIntroduction to Computer Science and Programming \u3068\u3044\u3046\u6388\u696d\u306b\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002edX\u3067\u3082\u540c\u3058\u8b1b\u5e2b\u304c \u6388\u696d \u3092\u3084\u3063\u3066\u3044\u307e\u3059\u3002\u4f7f\u7528\u8a00\u8a9e\u306fPython\u306b\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u30b7\u30e9\u30d0\u30b9\u3092\u898b\u308b\u3068\u3053\u308c\u306f\u3053\u308c\u3067\u7d50\u69cb\u96e3\u3057\u305d\u3046\u306a\u611f\u3058\u3082\u3057\u307e\u3059\u3002\n\u79c1\u306f\u30dc\u30b9\u30c8\u30f3\u5357\u90e8\u306e\u4ed6\u306e\u5927\u5b66\u9662\u3067(\u9ad8\u9f62)\u5b66\u751f\u3092\u3057\u3066\u3044\u308b\u306e\u3067\u3001MIT\u3067SICP\u306e\u6388\u696d\u306b\u6f5c\u308a\u305f\u3044\u306a~\u3068\u601d\u3063\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u8abf\u3079\u305f\u3089\u4e0a\u8a18\u306e\u3088\u3046\u306a\u7d4c\u7def\u3092\u77e5\u3063\u3066\u3001\u5927\u5909\u304c\u3063\u304b\u308a\u3057\u3066\u304a\u308a\u307e\u3057\u305f\u3002\u3068\u3001\u3001\u601d\u3044\u304d\u3084\u30016.037 SICP\u3068\u3057\u3066\u3001\u51ac\u671f\u9593(\u7c73\u56fd\u306e\u5927\u5b66/\u5927\u5b66\u9662\u3067\u306f9-12\u6708\u304cFall semester\u30012-5\u6708\u304cSpring semester\u3068\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u591a\u3044?)\u306e\u7279\u5225\u6388\u696d(4\u90318\u30b3\u30de; \u3082\u3068\u3082\u3068\u306e\u6388\u696d\u306f26\u30b3\u30de)\u3068\u3057\u3066\u3001\u7121\u7406\u77e2\u7406\u5fa9\u6d3b\u3057\u3066\u3044\u308b(\u30b3\u30fc\u30b9\u306e\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u304c6.001-zombies!)\u306e\u3092\u767a\u898b\u3002\u6700\u521d\u3053\u308c\u3067\u5358\u4f4d\u7533\u8acb(\u63d0\u643a\u3057\u3066\u3044\u308b\u5927\u5b66\u540c\u58eb\u3060\u3068\u3067\u304d\u308b)\u3057\u3088\u3046\u304b\u3068\u8a66\u307f\u307e\u3057\u305f\u304c\u3001\u5b66\u90e8\u306e\u6388\u696d\u3058\u3083\u3060\u3081\u3068\u3044\u308f\u308c\u305f\u306e\u3067\u3001\u8b1b\u5e2b\u306b\u983c\u307f\u3053\u3093\u3067\u30e2\u30b0\u30ea\u5b66\u751f\u3068\u3057\u3066\u53d7\u8b1b\u3055\u305b\u3066\u3082\u3089\u3046\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u30022007\u5e74\u306e\u6388\u696d\u306e\u7d42\u4e86\u3092\u5606\u3044\u305f6.001\u306e\u904e\u53bb\u306eteaching assistant\u305f\u3061\u304c2009\u5e74\u3050\u3089\u3044\u304b\u3089\u5fa9\u6d3b\u3055\u305b\u305f\u3068\u3044\u3046\u3053\u3068\u306e\u3088\u3046\u3067\u3059\u3002\n\u4e0b\u8a18\u306f\u305d\u306e\u30b5\u30de\u30ea\u30fc\u3067\u3059\u3002\u79c1\u81ea\u8eab\u306f\u8a08\u7b97\u6a5f\u79d1\u5b66\u306e\u4eba\u9593\u3067\u3082\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u5de5\u5b66\u306e\u4eba\u9593\u3067\u3082\u306a\u304f\u3001\u4e3b\u306b\u66f8\u304f\u306e\u306fR\u3068Emacs Lisp\u3050\u3089\u3044\u3067\u3059\u306e\u3067\u3001\u5185\u5bb9\u7684\u306b\u4e0d\u5341\u5206\u3001\u4e0d\u6b63\u78ba\u306a\u90e8\u5206\u3082\u3042\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\nLecture 1: Syntax of Scheme, procedural abstraction, and recursion\nScheme\u306e\u57fa\u672c\u7684\u306a\u6587\u6cd5\u306b\u95a2\u3057\u3066\u3068\u3001\u518d\u5e30(recursion)\u3068iteration\u306e\u9055\u3044\u307f\u305f\u3044\u306a\u8a71\u3057\u3002\u307e\u308f\u308a\u306e\u5b66\u751f\u304c\u82e5\u3044(\u5b66\u90e8\u306e\u4e00\u5e74\u751f\u3068\u304b\u304c\u307b\u3068\u3093\u3069\u3063\u307d\u3044\u306e\u3067\u5e74\u9f62\u306f\u79c1\u306e\u534a\u5206\u3050\u3089\u3044\u306a\u306f\u305a)\u3002\u5f97\u610f\u306a\u8a00\u8a9e\u306f?\u3068\u30af\u30e9\u30b9\u306b\u805e\u3044\u3066\u3044\u3066\u3001Python, Matlab, C\u3068\u304b\u307f\u3093\u306a\u7b54\u3048\u3066\u3044\u308b\u306a\u304b\u3067\u3001\u3072\u3068\u308a\u3060\u3051\"R\"\u3068\u3044\u3063\u305f\u3089\u3001\u3048\u3063?\u3068\u805e\u304d\u304b\u3048\u3055\u308c\u307e\u3057\u305f(\u79c1\u306e\u767a\u97f3\u304c\u60aa\u3044\u3060\u3051?)\u3002\n\u74b0\u5883\u306fDrRacket\u3092\u52e7\u3081\u3066\u3044\u307e\u3057\u305f\u3002\u306a\u306e\u3067\u3001Scheme\u3068\u3044\u3046\u304bRacket\u3067\u3059\u306d\u3002DrRacket\u304c\u4e00\u756a\u74b0\u5883\u8a2d\u5b9a\u304c\u697d\u3060\u304b\u3089\u306e\u3088\u3046\u3067\u3057\u305f\u3002\u307e\u3042\u3001\u958b\u767a\u74b0\u5883\u8a2d\u5b9a\u3067\u3053\u3051\u308b\u3068\u3084\u308b\u6c17\u304c\u305d\u304c\u308c\u307e\u3059\u304b\u3089\u306d\u3002\n\u3053\u306e\u56de\u306e\u6388\u696d\u5185\u5bb9\u306f\u521d\u6b69\u7684\u3067\u3057\u305f\u3002\u518d\u5e30\u7684\u306a\u8a08\u7b97\u3068\u7e70\u308a\u8fd4\u3057\u7684(iterative\u306e\u8a33\u306e\u3064\u3082\u308a)\u306a\u8a08\u7b97\u3092\u5bfe\u6bd4\u3059\u308b\u306e\u306bGuile Scheme \u304c\u4fbf\u5229\u3067\u3042\u308b\u306e\u3092\u767a\u898b\u3057\u307e\u3057\u305f\u3002REPL\u3067 ,trace (fact-recur 5)\u3068\u304b\u3084\u308b\u3068\u8a08\u7b97\u7d4c\u904e\u3092\u8868\u793a\u3057\u3066\u304f\u308c\u307e\u3059(\u6700\u521d\u306e,\u306f\u7279\u5225REPL\u30b3\u30de\u30f3\u30c9\u306e\u8b58\u5225\u7528\u3067\u5fc5\u8981)\u3002\n\u6df1\u5ea6\u304c\u6df1\u304f\u306a\u3063\u3066\u3044\u308b(SICP\u672c\u66f0\u304f\u4e09\u89d2\u5f62\u3092\u611f\u3058\u3088!)\u3068stack\u3092\u6d88\u8cbb\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002accumulator\u3092\u4f7f\u3063\u3066\u3001iterative\u306b\u8a08\u7b97\u3059\u308b\u3068\u6df1\u5ea6\u304c\u6df1\u304f\u306a\u3089\u305astack\u304c\u4e00\u500b\u3067\u3059\u3093\u3067\u3044\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059(SICP\u672c\u66f0\u304fiteration\u306f\u56db\u89d2\u3044!)\u3002trace\u306fRacket\u3067\u3082\u4e00\u5fdc\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u7d4c\u904e\u8868\u793a\u304c\u3044\u307e\u3044\u3061\u3067\u3001\u308f\u304b\u308a\u3084\u3059\u304f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n;;; Factorial (linear recursion)\n(define (fact-recur n)\n  (if (zero? n)\n      1\n      (* n (fact-recur (- n 1)))))\n\n;; scheme@(guile-user)> ,trace (fact-recur 5)\n;; trace: |  (#<procedure 105a4d480> #(#<directory (guile-user) 104467c60> #f))\n;; trace: |  #(#<directory (guile-user) 104467c60> fact-recur)\n;; trace: (#<procedure 105a56a60 at <current input>:818:7 ()>)\n;; trace: (fact-recur 5)\n;; trace: |  (fact-recur 4)\n;; trace: |  |  (fact-recur 3)\n;; trace: |  |  |  (fact-recur 2)\n;; trace: |  |  |  |  (fact-recur 1)\n;; trace: |  |  |  |  |  (fact-recur 0)\n;; trace: |  |  |  |  |  1\n;; trace: |  |  |  |  1\n;; trace: |  |  |  2\n;; trace: |  |  6\n;; trace: |  24\n;; trace: 120\n\n;;; Factorial (iteration)\n(define (fact-iter-helper n acc)\n    (if (zero? n)\n        acc\n        (fact-iter-helper (- n 1) (* acc n))))\n(define (fact-iter n)\n  (fact-iter-helper n 1))\n\n;; scheme@(guile-user)> ,trace (fact-iter 5)\n;; trace: |  (#<procedure 1056fc340> #(#<directory (guile-user) 104467c60> #f))\n;; trace: |  #(#<directory (guile-user) 104467c60> fact-iter)\n;; trace: (#<procedure 105702860 at <current input>:1042:7 ()>)\n;; trace: (fact-iter 5)\n;; trace: (fact-iter-helper 5 1)\n;; trace: (fact-iter-helper 4 5)\n;; trace: (fact-iter-helper 3 20)\n;; trace: (fact-iter-helper 2 60)\n;; trace: (fact-iter-helper 1 120)\n;; trace: (fact-iter-helper 0 120)\n;; trace: 120\n\n\nLecture 2: Data abstractions, higher order procedures, symbols, and quotation\n\u3053\u308c\u3082\u3001\u307e\u3060\u57fa\u672c\u7684\u306a\u5185\u5bb9\u3002\u95a2\u6570\u306e\u5165\u51fa\u529b\u306e\u578b\u3001\u9ad8\u968e\u95a2\u6570\u306b\u3088\u308b\u4f3c\u305f\u51e6\u7406\u306e\u62bd\u8c61\u5316\u3001cons cell\u306b\u3088\u308b\u30c7\u30fc\u30bf\u53ce\u7d0d\u3068car/cdr/cons\u306e\u95a2\u9023\u306a\u3069\u3002symbol\u3068quote\u3001eq?\u306b\u3088\u308bsymbol\u306e\u6bd4\u8f03\u306a\u3069\u3002\n\u9014\u4e2d\u306erecitation(\u30ec\u30af\u30c1\u30e3\u30fc\u5f62\u5f0f\u306e\u8b1b\u7fa9\u306e\u5185\u5bb9\u3092\u518d\u5ea6\u5c0f\u30b0\u30eb\u30fc\u30d7\u306b\u308f\u304b\u308c\u3066\u554f\u984c\u3092\u3084\u308a\u306a\u304c\u3089\u5fa9\u7fd2\u3059\u308b\u307f\u305f\u3044\u306a\u611f\u3058)\u3067\u306f\u3001map, filter, reverse, fold\u306a\u3069\u3044\u308f\u3086\u308b\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u826f\u304f\u51fa\u3066\u304f\u308b\u95a2\u6570\u306e\u66f8\u304d\u304b\u305f\u307f\u305f\u3044\u306a\u5185\u5bb9\u3002\nreverse\u306fcons\u304c\u30ea\u30b9\u30c8\u306e\u982d\u306b\u3082\u306e\u3092\u4ed8\u3051\u52a0\u3048\u308b\u306e\u3067\u3001iteration\u3067\u66f8\u3044\u305f\u65b9\u304c\u30b7\u30f3\u30d7\u30eb\u3002\u901a\u5e38\u306e\u518d\u5e30\u3067\u66f8\u304f\u3068\u30ea\u30b9\u30c8\u306e\u6700\u5f8c\u306b\u3082\u306e\u3092\u4ed8\u3051\u52a0\u3048\u308bappend\u304c\u5fc5\u8981\u306b\u306a\u3063\u3066\u52b9\u7387\u304c\u60aa\u3044\u307f\u305f\u3044\u3002\n(define (reverse-rec lst)\n  (cond\n   [(null? lst) '()]\n   [#t (append (reverse-rec (cdr lst)) (list (car lst)))]))\n\n;; scheme@(guile-user)> ,trace (reverse-rec (iota 4))\n;; trace: |  (#<procedure 103784a00> #(#<directory (guile-user) 102cd8c60> #f #f))\n;; trace: |  #(#<directory (guile-user) 102cd8c60> reverse-rec iota)\n;; trace: (#<procedure 1037c09e0 at <current input>:93:7 ()>)\n;; trace: |  (iota 4)\n;; trace: |  (0 1 2 3)\n;; trace: (reverse-rec (0 1 2 3))\n;; trace: |  (reverse-rec (1 2 3))\n;; trace: |  |  (reverse-rec (2 3))\n;; trace: |  |  |  (reverse-rec (3))\n;; trace: |  |  |  |  (reverse-rec ())\n;; trace: |  |  |  |  ()\n;; trace: |  |  |  |  (append () (3))\n;; trace: |  |  |  |  (3)\n;; trace: |  |  |  (3)\n;; trace: |  |  |  (append (3) (2))\n;; trace: |  |  |  (3 2)\n;; trace: |  |  (3 2)\n;; trace: |  |  (append (3 2) (1))\n;; trace: |  |  (3 2 1)\n;; trace: |  (3 2 1)\n;; trace: |  (append (3 2 1) (0))\n;; trace: |  (3 2 1 0)\n;; trace: (3 2 1 0)\n\n(define (reverse-iter lst)\n  (define (helper acc lst)\n    (cond\n     [(null? lst) acc]\n     [#t (helper (cons (car lst) acc)\n                 (cdr lst))]))\n  (helper '() lst))\n\n;; scheme@(guile-user)> ,trace (reverse-iter (iota 4))\n;; trace: |  (#<procedure 103270a40> #(#<directory (guile-user) 102cd8c60> #f #f))\n;; trace: |  #(#<directory (guile-user) 102cd8c60> reverse-iter iota)\n;; trace: (#<procedure 103c549a0 at <current input>:277:7 ()>)\n;; trace: |  (iota 4)\n;; trace: |  (0 1 2 3)\n;; trace: (reverse-iter (0 1 2 3))\n;; trace: (3 2 1 0)\n\n\u52c9\u5f37\u306b\u306a\u3063\u305f\u306e\u306ffold\u95a2\u6570\u3002\u4ee5\u524d\u3001Programming in Haskell\u306e\u8aac\u660e\u304c\u79c0\u9038\u3068\u3069\u3053\u304b\u306b\u66f8\u3044\u3066\u3042\u3063\u305f\u306e\u3067\u3001\u8aad\u3093\u3067\u307f\u305f\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u304c\u3001Haskell\u304c\u826f\u304f\u308f\u304b\u3089\u306a\u3044\u306e\u3068\u3042\u3044\u307e\u3063\u3066\u3088\u304f\u308f\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002Scheme\u3067\u5b9f\u969b\u66f8\u3044\u3066\u307f\u308b\u3068\u826f\u304f\u308f\u304b\u308a\u307e\u3057\u305f\u3002\n\u307e\u305a\u306f\u3001reduce\u3068\u3082\u547c\u3070\u308c\u3066\u3088\u308a\u4e00\u822c\u7684\u3063\u307d\u3044fold left\u3002\u521d\u671f\u5024\u304b\u3089\u59cb\u3081\u3066\u5de6\u304b\u3089\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u3092\u4e0e\u3048\u3089\u308c\u305f\u95a2\u6570\u3067\u51e6\u7406\u3057\u3066\u3001accumulator\u306b\u8caf\u3081\u3066\u3044\u304d\u307e\u3059\u3002\u753b\u50cf\u306fWikipedia\u3088\u308a\u3002\n\n\u51e6\u7406\u306e\u9806\u756a\u304c\u982d(\u5de6)\u304b\u3089\u306a\u306e\u3067iteration\u3068\u3057\u3066\u3059\u3050\u66f8\u3051\u308b\u306e\u3067\u3001\u8a08\u7b97\u52b9\u7387\u304c\u826f\u3044\u3088\u3046\u3067\u3059\u3002\u4e0b\u8a18\u306e\u4f8b\u3067\u306f\u4e09\u89d2\u5f62\u306b\u306a\u3089\u305a\u306b\u30b9\u30bf\u30c3\u30af\u304c\u4e00\u5b9a\u3067\u3059\u3093\u3067\u3044\u308b\u3068\u3053\u308d\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n;;; fold left\n(define (foldl f init lst)\n  (define (helper lst acc)\n    (if (null? lst)\n        acc\n        (helper (cdr lst) (f acc (car lst)))))\n  ;;\n  (helper lst init))\n\n;; scheme@(guile-user)> ,trace (foldl + 0 (iota 5))\n;; trace: |  (#<procedure 108c46820> #(#<directory (guile-user) 107ce6c60> #f #f #f))\n;; trace: |  #(#<directory (guile-user) 107ce6c60> foldl + iota)\n;; trace: (#<procedure 108c4b160 at <current input>:1503:7 ()>)\n;; trace: |  (iota 5)\n;; trace: |  (0 1 2 3 4)\n;; trace: (foldl #<procedure + (#:optional _ _ . _)> 0 (0 1 2 3 4))\n;; trace: |  (+ 0 0)\n;; trace: |  0\n;; trace: |  (+ 0 1)\n;; trace: |  1\n;; trace: |  (+ 1 2)\n;; trace: |  3\n;; trace: |  (+ 3 3)\n;; trace: |  6\n;; trace: |  (+ 6 4)\n;; trace: |  10\n;; trace: 10\n\nfold right\u306fClojure\u306b\u306a\u3044\u306e\u3067\u3088\u304f\u77e5\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u30ea\u30b9\u30c8\u306e\u521d\u671f\u5024\u3092\u53f3\u7aef\u306b\u6301\u3063\u3066\u304d\u3066\u3001\u672b\u5c3e\u5074(\u53f3)\u304b\u3089\u30ea\u30b9\u30c8\u3092\u305f\u305f\u3093\u3067\u3044\u304d\u307e\u3059\u3002\u753b\u50cf\u306fWikipedia\u3088\u308a\u3002\n\n\u5b9f\u969b\u306e\u5b9f\u884c\u3068\u3057\u3066\u306f\u30ea\u30b9\u30c8\u306e\u982d\u5074\u304b\u3089\u518d\u5e30\u3067\u51e6\u7406\u3092\u307e\u305f\u305b\u3066\u304a\u3044\u3066\u3001\u6700\u5f8c\u5c3e\u306b\u9054\u3057\u305f\u3089\u521d\u671f\u5024\u3068\u6700\u5f8c\u5c3e\u306e\u5024\u3067\u95a2\u6570\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\u3042\u3068\u306f\u3001\u53f3\u5074\u304b\u3089\u51e6\u7406\u5f85\u3061\u306e\u51e6\u7406\u3092\u3059\u3059\u3081\u3066\u3044\u3051\u3070OK\u3002\u518d\u5e30\u306e\u51e6\u7406\u5f85\u3061\u304c\u767a\u751f\u3059\u308b\u306e\u3067\u4e09\u89d2\u5f62\u306btrace\u304c\u4f38\u3073\u3066\u3044\u304f\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n;;; fold right\n(define (foldr f init lst)\n  (if (null? lst)\n      init\n      (f (car lst)\n         (foldr f init (cdr lst)))))\n\n;; scheme@(guile-user)> ,trace (foldr + 0 (iota 5))\n;; trace: |  (#<procedure 108c89c80> #(#<directory (guile-user) 107ce6c60> #f #f #f))\n;; trace: |  #(#<directory (guile-user) 107ce6c60> foldr + iota)\n;; trace: (#<procedure 108c8d900 at <current input>:1220:7 ()>)\n;; trace: |  (iota 5)\n;; trace: |  (0 1 2 3 4)\n;; trace: (foldr #<procedure + (#:optional _ _ . _)> 0 (0 1 2 3 4))\n;; trace: |  (foldr #<procedure + (#:optional _ _ . _)> 0 (1 2 3 4))\n;; trace: |  |  (foldr #<procedure + (#:optional _ _ . _)> 0 (2 3 4))\n;; trace: |  |  |  (foldr #<procedure + (#:optional _ _ . _)> 0 (3 4))\n;; trace: |  |  |  |  (foldr #<procedure + (#:optional _ _ . _)> 0 (4))\n;; trace: |  |  |  |  |  (foldr #<procedure + (#:optional _ _ . _)> 0 ())\n;; trace: |  |  |  |  |  0\n;; trace: |  |  |  |  (+ 4 0)\n;; trace: |  |  |  |  4\n;; trace: |  |  |  (+ 3 4)\n;; trace: |  |  |  7\n;; trace: |  |  (+ 2 7)\n;; trace: |  |  9\n;; trace: |  (+ 1 9)\n;; trace: |  10\n;; trace: (+ 0 10)\n;; trace: 10\n\n\u3053\u306e\u4f8b\u3067\u306fleft\u3067\u3082right\u3067\u3082\u52a0\u7b97\u306f\u9806\u756a\u304c\u95a2\u4fc2\u306a\u3044\u306e\u3067\u3001\u7d50\u679c\u306f\u540c\u3058\u3067\u3059\u3002\u7d50\u679c\u304c\u540c\u3058\u5834\u5408\u306ffold left (reduce)\u306e\u65b9\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u3057\u3001\u8a08\u7b97\u52b9\u7387\u3082\u826f\u3044\u306e\u3067\u3088\u3055\u305d\u3046\u3067\u3059\u3002\u305f\u3060\u3001\u8a08\u7b97\u306b\u3088\u3063\u3066\u306fright fold\u3067\u306a\u3044\u3068\u3067\u304d\u306a\u3044\u3082\u306e\u3082\u3042\u308b\u3088\u3046\u3067\u3059\u3002\u3053\u306ecode IQ\u306e\u554f\u984c(\u3061\u3089\u898b\u3067\u898b\u3089\u308c\u307e\u3059)\u306f\u3001\u5206\u6570\u306e\u5206\u6bcd\u306e\u53f3\u5074\u304b\u3089\u8a08\u7b97\u304c\u3059\u3059\u3080\u306e\u3067\u3001\u307e\u3055\u306bfold right\u304c\u8868\u73fe\u306b\u826f\u3044\u3088\u3046\u3067\u3059\u3002\u79c1\u306ffold right\u3092\u7406\u89e3\u3057\u3066\u3044\u306a\u3044\u72b6\u614b\u3067\u3084\u3063\u305f\u3089\u3001reverse\u3092\u4f7f\u3063\u3066\u30ea\u30b9\u30c8\u3092\u53cd\u8ee2\u3057\u3066\u5148\u982d\u304b\u3089\u51e6\u7406\u3059\u308b\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f(\u3064\u307e\u308a\u3001\u53f3\u304b\u3089\u51e6\u7406\u3057\u305f\u65b9\u304c\u697d)\u3002\u3061\u306a\u307f\u306b\u3001Haskell\u3067\u306f\u9045\u5ef6\u8a55\u4fa1\u306e\u95a2\u4fc2\u3067foldr\u304c\u3088\u308a\u4f7f\u3044\u3084\u3059\u3044\u3089\u3057\u3044\u3067\u3059(\u53c2\u8003)\u3002\n\nLecture 3: Mutation, and the environment model\n3\u65e5\u76ee\u306b\u3057\u3066\u8b1b\u5e2b\u305f\u3061\u304cSICP\u3092\u30b7\u30af\u30d4\u30fc\u3068\u8aad\u3093\u3067\u3044\u308b\u306e\u306b\u6c17\u3065\u3044\u3066\u885d\u6483\u3092\u3046\u3051\u307e\u3057\u305f\u3002sick pee\u307f\u305f\u3044\u3067\u6c17\u6301\u60aa\u3044\u3067\u3059\u304c\u3001\u30b7\u30af\u306a\u306e\u3067sick\u306b\u306f\u805e\u3053\u3048\u306a\u3044\u304b\u3002\n\u4e3b\u306bmutation\u306b\u3064\u3044\u3066\u3002Scheme\u3067\u306fset!(!\u306fbang\u3068\u547c\u3093\u3067\u3044\u305f)\u3067symbol\u306b\u95a2\u9023\u4ed8\u3051\u3089\u308c\u3066\u3044\u308b\u5024\u3092\u5909\u66f4\u3001set-car!\u3068set-cdr!\u3067cons cell\u306b\u3076\u3089\u4e0b\u304c\u3063\u3066\u3044\u308b\u5024\u3092\u5909\u66f4\u3067\u304d\u307e\u3059\u3002set!\u306f\u518d\u5ea6define\u3057\u305f\u307f\u305f\u3044\u306a\u611f\u3058\u306a\u306e\u3067\u308f\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u304c\u3001set-car!\u3068set-cdr!\u306fcons cell\u3092\u306e\u3053\u3057\u305f\u307e\u307e\u5909\u66f4\u304c\u8d77\u308b\u306e\u3067\u96e3\u89e3\u3002\u3053\u308c\u3092\u3046\u307e\u3044\u3053\u3068\u4f7f\u3046\u3053\u3068\u3067\u5faa\u74b0\u69cb\u9020\u306b\u306a\u3063\u3066\u3044\u308b\u7121\u9650\u30ea\u30b9\u30c8(\u3068\u3044\u3046\u306e\u304b\u4e0d\u660e\u3067\u3059\u304c)\u3092\u4f5c\u6210\u3057\u3066\u3001\u51e6\u7406A\u3068\u51e6\u7406B\u3092\u4ea4\u4e92\u306b\u884c\u3046\u3088\u3046\u306a\u4f8b\u3092\u51fa\u3057\u3066\u3044\u307e\u3057\u305f(\u4e0b\u8a18)\u3002\n(define mystery\n  (let ([step1 (lambda () 'flop)]\n        [step2 (lambda () 'flip)])\n    (let ([todo (list step1 step2)])\n      (set-cdr! (cdr todo) todo)\n      (lambda ()\n        (set! todo (cdr todo))\n        ((car todo))))))\n\n(mystery) ; => flip\n(mystery) ; => flop\n(mystery) ; => flip\n(mystery) ; => flop\n\n\u3071\u3063\u3068\u898b\u3067\u306f\u306a\u306b\u304c\u304a\u3053\u3063\u3066\u3044\u308b\u306e\u304b\u308f\u304b\u308a\u306b\u304f\u3044\u3067\u3059\u304c\u3001\u307e\u305a\u3001symbol flop\u3092\u8fd4\u3059\u95a2\u6570\u3068symbol flip\u3092\u8fd4\u3059\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u30ea\u30b9\u30c8todo\u3068\u3057\u3066\u307e\u3068\u3081\u307e\u3059\u3002\u3053\u3053\u307e\u3067\u3067\u3001[ step1(flop) | (pointer to 2nd) ]\u3068\u3044\u3046cons cell\u3068[ step2(flip) | (empty) ]\u3068\u3044\u3046cons cell\u304c\u3064\u306a\u304c\u3063\u305f\u30ea\u30b9\u30c8\u304c\u51fa\u6765\u307e\u3059\u3002\u3053\u3053\u3067(cdr todo)\u3092\u884c\u306a\u3046\u3068\u4e8c\u500b\u76ee\u306econs cell\u304c\u5f97\u3089\u308c\u308b\u306e\u3067\u3001\u305d\u306econs cell\u306ecdr\u3064\u307e\u308aempty\u90e8\u5206\u3092todo\u81ea\u4f53\u3078\u306epointer\u3068\u3057\u3066mutation\u3057\u307e\u3059(set-cdr!)\u3002\u305d\u308c\u306b\u3088\u308a\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u4e8c\u500b\u76ee\u306econs cell\u306ecdr\u304c\u4e00\u500b\u76ee\u306econs cell\u306e\u5148\u982d\u3092\u6307\u3059\u5faa\u74b0\u69cb\u9020\u306b\u306a\u308a\u307e\u3059\u3002\n[ step1(flop) | (pointer to 2nd) ]->[ step2(flip) | (pointer to 1st) ]\ntodo\u3068\u3044\u3046symbol\u306f\u3053\u306e\u6642\u70b9\u3067\u306fflop cons cell\u306b\u7d50\u3073\u3064\u3044\u3066\u3044\u307e\u3059\u3002mystery\u95a2\u6570\u306f\u5b9f\u884c\u6642\u306bset!\u3067symbol todo\u304c\u6307\u3059cons cell\u3092\u4e00\u500b\u5f8c\u308d\u306b\u305a\u3089\u3057\u307e\u3059\u3002\u306a\u306e\u3067\u4e00\u56de\u76ee\u306e\u5b9f\u884c\u7d50\u679c\u306fflip\u306econs cell\u306ecar\u3001\u3064\u307e\u308a\u3001step2\u95a2\u6570\u304c\u5b9f\u884c\u3055\u308c\u3001symbol flip\u304c\u8fd4\u308a\u307e\u3059\u3002\u4e8c\u56de\u76ee\u306e\u5b9f\u884c\u3067\u306f\u518d\u5ea6symbol todo\u304c\u518d\u5b9a\u7fa9\u3055\u308c\u3066\u6b21\u306econs cell(\u6700\u521d\u306b\u623b\u308b)\u3092\u6307\u3059\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u305d\u306econs cell\u306ecar\u3001\u3064\u307e\u308a\u3001step1\u95a2\u6570\u304c\u5b9f\u884c\u3055\u308c\u3066\u3001symbol flop\u304c\u8fd4\u308a\u307e\u3059\u3002\nstack\u3084queue\u3068\u3044\u3063\u305f\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u3069\u3046\u3084\u3063\u3066cons cell\u3067\u8868\u73fe\u3059\u308b\u304b\u3068\u3044\u3046\u3088\u3046\u306a\u8a71\u3082\u3042\u308a\u307e\u3057\u305f(\u8cc7\u6599page 15-)\u3002stack\u306e\u65b9\u304c\u7c21\u5358\u306a\u3088\u3046\u3067\u3059\u3002queue\u306f\u4e00\u500b\u306econs cell\u3067\u30ea\u30b9\u30c8\u306e\u6700\u521d\u3068\u6700\u5f8c\u3078\u306epointer\u3092\u4e21\u65b9\u683c\u7d0d\u3059\u308b\u3068\u826f\u3044\u3088\u3046\u3067\u3057\u305f\u3002\nmutation\u3092\u5c0e\u5165\u3059\u308b\u3053\u3068\u3067\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306esubstitution model\u304b\u3089\u3001environmental model\u304c\u5fc5\u8981\u306b\u306a\u308b\u306e\u3060\u3068\u3044\u3046\u8a71\u3092\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u3044\u307e\u3044\u3061substitution model\u304c\u306a\u3093\u306e\u3053\u3068\u3060\u304b\u304c\u308f\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f(\u8cc7\u6599page 40-)\u3002\u3002\nenvironment\u3068\u306f\u540d\u524d(symbol)\u3068\u5024\u306e\u5bfe\u5fdc\u8868\u3067\u3042\u308bframe\u3068enclosing environment(\u89aaenvironment)\u3078\u306epointer\u304b\u3089\u306a\u308b\u6982\u5ff5\u3068\u306e\u3053\u3068\u3002cons cell\u3068\u3044\u3063\u305f\u30c7\u30fc\u30bf\u69cb\u9020\u306fenvironment\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u306f\u306a\u304f\u3001binding\u306f\u3042\u304f\u307e\u3067\u540d\u524d\u3068cons cell\u3078\u306epointer\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3060\u3051\u3068\u306e\u3053\u3068\u3067\u3057\u305f\u3002\u78ba\u304b\u306b\u305d\u3046\u3067\u306a\u3044\u3068\u3001\u540c\u3058\u30c7\u30fc\u30bf\u3092\u8907\u6570\u306eenvironment\u3067\u4f7f\u304a\u3046\u3068\u3059\u308b\u3068\u8907\u88fd\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u305d\u3046\u3067\u3059\u3002\nprocedure\u306e\u5b9a\u7fa9\u3067\u306f\"double bubble\"\u3068\u547c\u3076\u6982\u5ff5\u3092\u4f7f\u3063\u3066\u3044\u307e\u3057\u305f(\u8cc7\u6599p53)\u3002\u3053\u308c\u306flambda\u306b\u3088\u3063\u3066\u751f\u6210\u3055\u308c\u3066\u3001code pointer(\u5f15\u6570\u3092\u5b9a\u7fa9\u3059\u308bparameters\u3068\u51e6\u7406\u3092\u5b9a\u7fa9\u3059\u308bbody\u304b\u3089\u306a\u308b)\u3068environment pointer(\u540d\u524d\u306e\u5bfe\u5fdc\u8868\u3092\u6307\u3057\u3057\u3081\u3059)\u304b\u3089\u306a\u308b\u3068\u306e\u3053\u3068\u3067\u3057\u305f\u3002procedure\u306e\u540d\u524d\u3068\u3044\u3046\u306e\u306fframe\u3067\u540d\u524d\u3068\u306e\u5bfe\u5fdc\u3068\u3057\u3066\u4e8c\u6b21\u7684\u306b\u5b9a\u7fa9\u3055\u308c\u308b\u3082\u306e\u3067\u3001procedure\u81ea\u4f53\u306b\u306f\u540d\u524d\u3068\u3044\u3046\u6982\u5ff5\u306f\u306a\u3044\u3088\u3046\u3067\u3059\u3002procedure\u306e\u5b9f\u884c\u6642\u306b\u306f\u3001\u5f15\u6570\u3068\u5024\u306e\u5bfe\u5fdc\u8868\u306eframe\u3092\u6301\u3064environment\u304c\u4e00\u6642\u7684\u306b\u4f5c\u6210\u3055\u308c\u308b\u3053\u3068\u3067\u3001body\u306e\u4e2d\u306e\u5f15\u6570\u306b\u3042\u305f\u308b\u90e8\u5206\u304c\u89e3\u91c8\u53ef\u80fd\u306b\u306a\u308b\u3068\u306e\u3053\u3068\u3067\u3057\u305f\u3002\n\nLecture 4: Interpretation and evaluation\n4\u65e5\u76ee\u306b\u3057\u3066\u3044\u304d\u306a\u308aScheme\u3067Scheme evaluator (interpreter)\u3092\u66f8\u304f\u8a71\u3002\u3044\u304d\u306a\u308a\u30ec\u30d9\u30eb\u4e0a\u308a\u3059\u304e\u3002\u540c\u3058\u8a00\u8a9e\u81ea\u4f53\u306eevaluator\u3092\u66f8\u304f\u5834\u5408\u3092Meta-circular evaluator\u3068\u3044\u3046\u3088\u3046\u3067\u3059\u3002Coursera\u306eProgramming Languages(\u3082\u3057\u304f\u306f\u8b1b\u5e2b\u306eweb site)\u3067\u3001Racket\u3092\u4f7f\u3063\u3066\u540c\u69d8\u306a\u5185\u5bb9\u3092\u3084\u3063\u3066\u3044\u305f\u306e\u3067\u3001\u306a\u3093\u3068\u304b\u3064\u3044\u3066\u3044\u3051\u305f\u611f\u3058\u3002\u3053\u306eCoursera\u30b3\u30fc\u30b9\u306f\u975e\u5e38\u306b\u304a\u3059\u3059\u3081\u3067\u3059\u3002\u8a00\u8a9e\u3092\u3042\u3048\u3066SML, Racket, Ruby\u3068\u4e09\u7a2e\u985e\u4f7f\u3046\u3053\u3068\u3067\u3001\u7279\u5b9a\u306e\u8a00\u8a9e\u3067\u306f\u306a\u304f\u3001\u8a00\u8a9e\u30d1\u30e9\u30c0\u30a4\u30e0\u306a\u3069\u306b\u30d5\u30a9\u30fc\u30ab\u30b9\u3092\u3042\u3066\u3066\u3044\u307e\u3059\u3002\u3061\u306a\u307f\u306b\u3001\u540c\u6642\u671f\u306b\u3084\u3063\u3066\u3044\u305fedX\u306e Introduction to Functional Programming\u306f\u3042\u3048\u306a\u304f\u9014\u4e2d\u3067\u632b\u6298\u3057\u307e\u3057\u305f\u3002\n\u95a2\u4fc2\u306a\u3044\u3051\u3069\u6388\u696d\u306b\u3044\u308b\u9aea\u306e\u6bdb\u306e\u7247\u5074\u3060\u3051\u7dd1\u8272\u306e\u7537\u6027\u4e8c\u4eba\u7d44(\u30ab\u30c3\u30d7\u30eb?)\u304c\u3001\u306a\u305c\u304b\u3075\u305f\u308a\u3068\u3082\u88f8\u8db3\u3067\u3042\u308b\u3053\u3068\u306b\u6c17\u4ed8\u3044\u3066\u3001Emacs\u958b\u767a\u8005\u306eRichard Stallman\u3092\u8f29\u51fa\u3057\u305fMIT\u306e\u30d2\u30c3\u30d4\u30fc\u6587\u5316\u534a\u7aef\u306a\u3044\u3002\u3002\u3068\u601d\u3044\u307e\u3057\u305f\u3002\u8b1b\u7fa9\u306fScheme\u3067\u66f8\u304fScheme\u306eevaluator (interpreter)\u3092\u8db3\u65e9\u306b\u8aac\u660e\u3057\u3066\u3044\u3066\u3001\u901f\u3059\u304e\u3066\u3064\u3044\u3066\u3044\u3051\u305a\u3002\u3002SICP\u306e\u8868\u793a\u306e\u7d75\u306b\u3082\u3042\u308beval\u3068apply\u306e\u8aac\u660e\u3092\u3057\u3066\u3044\u305f\u3088\u3046\u306b\u601d\u3044\u307e\u3059\u3002\u8ab2\u984c\u306f\u975e\u5e38\u306b\u52c9\u5f37\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u305d\u3061\u3089\u306b\u3064\u3044\u3066\u8a18\u8f09\u3057\u307e\u3059\u3002\n\u8ab2\u984c\u306f\u4e0e\u3048\u3089\u308c\u305f\u4e0d\u5b8c\u5168\u306ainterpreter\u3092\u88dc\u5b8c\u3059\u308b\u3068\u3044\u3046\u3082\u306e\u3002\u30b3\u30fc\u30c9\u306e\u6700\u521d\u306e\u65b9\u306b\u4e0b\u8a18\u307f\u305f\u3044\u306a\u8a18\u8ff0\u304c\u3084\u305f\u3089\u305a\u3089\u305a\u3089\u3042\u308a\u3002\u8a00\u8a9e\u74b0\u5883\u306fRacket\u306a\u306e\u3067\u3059\u304c\u3001Scheme R5RS\u306b\u3042\u305f\u308b\u90e8\u5206\u3060\u3051\u3092\u4f7f\u3046\u3068\u3044\u3046\u65b9\u91dd\u306a\u306e\u3067Racket\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u5b9a\u7fa9struct\u3092\u4f7f\u308f\u306a\u3044\u306e\u3067\u5197\u9577\u306b\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3057\u305f\u3002Racket\u3060\u3068struct\u4e00\u884c\u3067\u30c7\u30fc\u30bf\u69cb\u9020\u5b9a\u7fa9\u3001predicate\u3001selector\u3082\u4e00\u5ea6\u306b\u5b9a\u7fa9\u3057\u3066\u304f\u308c\u305f\u3088\u3046\u306b\u601d\u3044\u307e\u3059\u3002\n## Plain Scheme\n(define (lambda? exp) (tagged-list? exp 'lambda))\n(define (lambda-parameters lambda-exp) (cadr lambda-exp))\n(define (lambda-body lambda-exp) (cddr lambda-exp))\n(define (make-lambda parms body) (cons 'lambda (cons parms body)))\n\n## Racket\n(struct lambda (parms body))\n\nevaluator\u306e\u672c\u4f53\u306f\u4e0b\u8a18(\u8ab2\u984c)\u3002\u8981\u306f\u4e0e\u3048\u3089\u308c\u305f\u5f0f(expression)\u306e\u30bf\u30a4\u30d7\u3092\u5224\u5225\u3057\u3066\u3001\u305d\u308c\u306b\u5fdc\u3058\u3066\u9069\u5207\u306a\u8a55\u4fa1\u3092\u3059\u308b\u3001\u3068\u3044\u3046\u624b\u9806\u304c\u7f85\u5217\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u8a55\u4fa1\u306e\u969b\u306b\u304b\u306a\u3089\u305aenv (environment)\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u306e\u3082\u91cd\u8981\u3067\u3001\u5f0f\u306e\u8a55\u4fa1\u3068\u3044\u3046\u306e\u306f\u540d\u524d\u306e\u5bfe\u5fdc\u8868\u3067\u3042\u308bframe\u3092\u542b\u3080environment\u304c\u306a\u3051\u308c\u3070\u306a\u308a\u305f\u305f\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u306e\u3088\u3046\u3067\u3059\u3002\n(define (m-eval exp env)\n  (cond ((self-evaluating? exp) exp)\n        ((variable? exp) (lookup-variable-value exp env))\n        ((quoted? exp) (text-of-quotation exp))\n        ((assignment? exp) (eval-assignment exp env))\n        ((definition? exp) (eval-definition exp env))\n        ((if? exp) (eval-if exp env))\n        ((lambda? exp)\n         (make-procedure (lambda-parameters exp) (lambda-body exp) env))\n        ((begin? exp) (eval-sequence (begin-actions exp) env))\n        ((cond? exp) (m-eval (cond->if exp) env))\n        ((let? exp) (m-eval (let->application exp) env))\n        ((time? exp) (time (m-eval (second exp) env)))\n        ((application? exp)\n         (m-apply (m-eval (operator exp) env)\n                  (list-of-values (operands exp) env)))\n        (else (error \"Unknown expression type -- EVAL\" exp))))\n\n\u4e00\u756a\u7c21\u5358\u306a\u306e\u306fself-evaluating?\u3067\u3072\u3063\u304b\u304b\u308b\u3082\u306e\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u6570\u5024\u3001\u6587\u5b57\u5217\u3001boolean\u306f\u3001\u8a55\u4fa1\u3059\u308b\u3068\u81ea\u5206\u306b\u306a\u308b\u306e\u3067\u5f0f(exp)\u304c\u305d\u306e\u307e\u307e\u8fd4\u308b\u3068\u3044\u3046\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n(define (self-evaluating? exp)\n  (cond ((number? exp) #t)\n        ((string? exp) #t)\n        ((boolean? exp) #t)\n        (else #f)))\n\n;; corresponding part of m-eval\n        ((self-evaluating? exp) exp)\n\n\u4ee5\u964d\u306f\u666e\u901a\u306e\u95a2\u6570\u3068\u9055\u3044\u3001\u672c\u4f53\u5b9f\u884c\u524d\u306b\u5168\u3066\u306e\u5f15\u6570\u3092\u4e8b\u524d\u306b\u8a55\u4fa1(eager evaluation)\u3057\u306a\u3044\u3001special form\u306e\u5b9a\u7fa9\u304c\u305a\u3089\u305a\u3089\u7d9a\u3044\u3066\u3044\u307e\u3059\u3002\u901a\u5e38\u306e\u95a2\u6570\u306f\u307f\u306a\u540c\u3058\u8a55\u4fa1\u65b9\u6cd5\u306a\u306e\u3067\u6700\u5f8c\u306eapplication?\u306e\u3068\u3053\u308d\u306b\u3072\u3063\u304b\u304b\u308b\u3068\u3044\u3046\u4ed5\u7d44\u307f\u306e\u3088\u3046\u3067\u3059\u3002eval-X\u3068\u3044\u3046\u5c02\u7528\u8a55\u4fa1\u6cd5\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u90e8\u5206\u3068cond->if\u306a\u3069\u3068\u5909\u63db\u6cd5\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u90e8\u5206\u304c\u3042\u308a\u307e\u3059\u3002\n\u3080\u3057\u308d\u3053\u3063\u3061\u306e\u65b9\u304c\u8907\u96d1\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u901a\u5e38\u306e\u95a2\u6570\u306e\u8a55\u4fa1\u304b\u3089\u898b\u3066\u307f\u307e\u3059\u3002\n(define (application? exp) (pair? exp))\n(define (operator app) (car app))\n(define (operands app) (cdr app))\n(define (no-operands? args) (null? args))\n(define (first-operand args) (car args))\n(define (rest-operands args) (cdr args))\n(define (make-application rator rands)\n  (cons rator rands))\n\n;; corresponding part of eval\n        ((application? exp)\n         (m-apply (m-eval (operator exp) env)\n                  (list-of-values (operands exp) env)))\n\n(define (m-apply procedure arguments)\n  (cond ((primitive-procedure? procedure)\n         (apply-primitive-procedure procedure arguments))\n        ((compound-procedure? procedure)\n         (eval-sequence\n          (procedure-body procedure)\n          (extend-environment (make-frame (procedure-parameters procedure)\n                                          arguments)\n                              (procedure-environment procedure))))\n        (else (error \"Unknown procedure type -- APPLY\" procedure))))\n\n(define (list-of-values exps env)\n  (cond ((no-operands? exps) '())\n        (else (cons (m-eval (first-operand exps) env)\n                    (list-of-values (rest-operands exps) env)))))\n\nm-apply\u3068\u3044\u3046\u95a2\u6570\u306b\u8a55\u4fa1\u3092\u6295\u3052\u3066\u3044\u307e\u3059\u3002m-apply\u306e\u5b9a\u7fa9\u3092\u307f\u308b\u3068procedure\u3092\u5f15\u6570\u7fa4\u306b\u9069\u7528\u3059\u308b\u3068\u3044\u3046\u3057\u304f\u307f\u306e\u3088\u3046\u3067\u3059\u3002m-apply\u306b\u4e0e\u3048\u3089\u308c\u3066\u3044\u308b\u306e\u306foperator(\u95a2\u6570\u9069\u7528\u5f0f\u306ecar\u90e8\u5206)\u3092\u8a55\u4fa1\u3057\u305f\u3082\u306e\u3001\u3068operands(\u5f15\u6570\u7fa4)\u3092\u8a55\u4fa1\u3057\u3066\u5024\u306b\u5909\u63db\u3057\u305f\u3082\u306e\u306e\u30ea\u30b9\u30c8\u306e\u3088\u3046\u3067\u3059\u3002list-of-values\u306f\u5f15\u6570\u3092\u4e00\u500b\u305a\u3064\u8a55\u4fa1\u3057\u3066\u3044\u304f\u3068\u3044\u3046\u95a2\u6570\u306e\u3088\u3046\u3067\u3059\u3002\n\u6b21\u306b\u5c02\u7528evauator\u3092\u7528\u610f\u3057\u3066\u3044\u308b\u3082\u306e\u3092\u898b\u3066\u307f\u307e\u3059\u3002eval-definition\u306fdefine special form\u3092\u8a55\u4fa1\u3059\u308bevaulator\u306e\u3088\u3046\u3067\u3059\u3002\n(define (definition? exp) (tagged-list? exp 'define))\n(define (definition-variable exp)\n  (if (symbol? (cadr exp))   (cadr exp)   (caadr exp)))\n(define (definition-value exp)\n  (if (symbol? (cadr exp))\n      (caddr exp)\n      (make-lambda (cdadr exp) (cddr exp))))  ; formal params, body\n(define (make-define var expr)\n  (list 'define var expr))\n\n;; corresponding part of m-eval\n        ((definition? exp) (eval-definition exp env))\n\n(define (eval-definition exp env)\n  (define-variable! (definition-variable exp)\n                    (m-eval (definition-value exp) env)\n                    env))\n\n(define (define-variable! var val env)\n  (let ((frame (environment-first-frame env)))\n    (let ((binding (find-in-frame var frame)))\n      (if binding\n          (set-binding-value! binding val)\n          (add-binding-to-frame!\n           (make-binding var val)\n           frame)))))\n\neval-definition\u304c\u884c\u306a\u3063\u3066\u3044\u308b\u306e\u306f\u3001variable\u306e\u540d\u524d\u3092definition-variable\u3067\u53d6\u308a\u51fa\u3057\u3066\u3001definition-value\u3067\u53d6\u308a\u51fa\u3057\u305f\u5024\u306b\u306a\u308b\u5f0f\u3092m-eval\u3067\u8a55\u4fa1\u3057\u305f\u5024\u3092\u7d50\u3073\u4ed8\u3051\u308b\u3068\u3044\u3046\u3053\u3068\u306e\u3088\u3046\u3067\u3059\u3002\u7d50\u3073\u3064\u3051\u308b\u3068\u3044\u3046\u306e\u306f\u3001define-variable!\u3067\u884c\u3063\u3066\u304a\u308a\u3001\u4e0e\u3048\u3089\u308c\u305fenvironment\u306e\u76f4\u8fd1\u306eframe (current environment\u3068\u8003\u3048\u3066\u3088\u3044\u304b)\u306b\u3001\u5909\u6570\u3068\u5024\u306ebinding\u3092\u52a0\u3048\u308b\u3068\u3044\u3046\u3053\u3068\u306e\u3088\u3046\u3067\u3059\u3002\u3053\u308c\u306f\u526f\u4f5c\u7528\u3092\u76ee\u7684\u3068\u3057\u3066\u3044\u308b\u306e\u3067\u8907\u96d1\u306b\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\u526f\u4f5c\u7528\u3092\u3082\u305f\u306a\u3044special form\u3067\u3042\u308bif\u306e\u8a55\u4fa1\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n(define (if? exp) (tagged-list? exp 'if))\n(define (if-predicate exp) (cadr exp))\n(define (if-consequent exp) (caddr exp))\n(define (if-alternative exp) (cadddr exp))\n(define (make-if pred conseq alt) (list 'if pred conseq alt))\n\n;; corresponding part of m-eval\n        ((if? exp) (eval-if exp env))\n\n(define (eval-if exp env)\n  (if (m-eval (if-predicate exp) env)\n      (m-eval (if-consequent exp) env)\n      (m-eval (if-alternative exp) env)))\n\n\u3060\u3044\u3076\u30b7\u30f3\u30d7\u30eb\u3067\u3059\u3002\u8981\u306feval-if\u306f\u7279\u5225\u306a\u6319\u52d5\u3092\u305d\u306e\u307e\u307eScheme\u7d44\u8fbc\u307f\u306eif\u306b\u4e38\u6295\u3052\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002predicate\u90e8\u5206\u3092\u8a55\u4fa1\u3057\u3066\u3001\u305d\u308c\u306b\u5fdc\u3058\u3066true\u7bc0\u3092\u8a55\u4fa1\u3059\u308b\u304bfalse\u7bc0\u3092\u8a55\u4fa1\u3059\u308b\u304b\u3092\u6c7a\u3081\u3066\u3044\u307e\u3059\u3002\n\u79c1\u304c\u4e00\u756a\u304a\u3082\u3057\u308d\u3044\u3068\u601d\u3063\u305f\u306e\u306fcode transformer\u3068\u547c\u3070\u308c\u3066\u3044\u305f\u3082\u306e\u3067\u3059\u3002cond\u306e\u4f8b\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n(define (cond? exp) (tagged-list? exp 'cond))\n(define (cond-clauses exp) (cdr exp))\n(define first-cond-clause car)\n(define rest-cond-clauses cdr)\n(define (make-cond seq) (cons 'cond seq))\n\n;; corresponding part of m-eval\n        ((cond? exp) (m-eval (cond->if exp) env))\n\n(define (cond->if expr)\n  (let ((clauses (cond-clauses expr)))\n    (if (null? clauses)\n        #f\n        (if (eq? (car (first-cond-clause clauses)) 'else)\n            (sequence->exp (cdr (first-cond-clause clauses)))\n            (make-if (car (first-cond-clause clauses))\n                     (sequence->exp (cdr (first-cond-clause clauses)))\n                     (make-cond (rest-cond-clauses clauses)))))))\n\nm-eval\u306e\u5bfe\u5fdc\u90e8\u5206\u3092\u307f\u308b\u3068\u3001cond\u5f0f\u3092\u898b\u3064\u3051\u305f\u3089\u3001\u307e\u305a\u3001cond->if\u3067\u5909\u63db\u3057\u3066\u3001\u305d\u308c\u3092m-eval\u3067\u666e\u901a\u306b\u8a55\u4fa1\u3059\u308b\u3068\u3044\u3046\u5f62\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002if\u306b\u5909\u63db\u3059\u308b\u306e\u3067\u3001\u6700\u7d42\u7684\u306b\u306feval-if\u304c\u51fa\u3066\u304d\u307e\u3059\u304c\u3001\u304a\u3082\u3057\u308d\u3044\u306e\u306fcond->if\u3067\u3059\u3002\u5b9f\u969b\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n(cond->if '(cond\n            [A do-a]\n            [B do-b]\n            [C do-c]\n            [#t do-d]))\n;; =>\n;; (if A\n;;     do-a\n;;     (cond\n;;      (B do-b)\n;;      (C do-c)\n;;      (#t do-d)))\n\n\u6ce8\u610f\u304c\u5fc5\u8981\u306a\u306e\u306f\u3053\u3053\u3067\u306f\u3001\u4e00\u5207\u8a55\u4fa1\u306f\u884c\u308f\u308c\u3066\u304a\u3089\u305a\u3001cond\u5f0f\u304cif\u5f0f\u306b\u30ea\u30b9\u30c8\u3092\u3044\u3058\u308b\u3053\u3068\u3067\u5909\u63db\u3055\u308c\u3066\u3044\u308b\u3060\u3051\u3060\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u666e\u901a\u306b\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3042\u308b\u3053\u3068(homoiconicity)\u304c\u3001\u3053\u306e\u904e\u7a0b\u3092\u5358\u7d14\u5316\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u3059\u306d(\u53c2\u8003 Lisp\u306e\u609f\u308a\u304c\u5206\u304b\u3063\u3061\u3083\u3046\u65b0\u6625\u30dd\u30a8\u30e0)\u3002\u305d\u306e\u5f8c\u3001\u3053\u306e\u5909\u63db\u3055\u308c\u305f\u3082\u306e\u304cm-eval\u306b\u5dee\u3057\u623b\u3057\u306b\u306a\u308a\u8a55\u4fa1\u304c\u304a\u3053\u306a\u308f\u308c\u307e\u3059\u3002A\u304ctrue\u3067\u3042\u308c\u3070do-a\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u6b21\u306ebranch\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u305f\u3081\u306b\u6b8b\u308a\u306econd\u5f0f\u3092if\u5f0f\u306b\u5909\u63db\u3001\u4ee5\u4e0b\u540c\u6587\u3001\u3068\u306a\u308b\u3088\u3046\u3067\u3059\u3002\u304a\u305d\u3089\u304f\u3001cond->if\u3092cond\u3092\u4e00\u5ea6\u306bnested if\u306b\u5909\u63db\u3059\u308b\u3088\u3046\u306b\u3082\u5b9f\u88c5\u3067\u304d\u305d\u3046\u3067\u3059\u304c\u3001\u5fc5\u8981\u306a\u3068\u3053\u308d\u3060\u3051\u5909\u63db\u3059\u308b\u3053\u306e\u65b9\u6cd5\u306e\u65b9\u304c\u3001\u4e0a\u306e\u65b9\u3067\u7d42\u308b\u3053\u3068\u304c\u3001\u591a\u3051\u308c\u3070\u7121\u99c4\u304c\u5c11\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\nenvironment\u306e\u5b9f\u88c5\u3092\u898b\u3066\u307f\u308b\u3068\u3044\u3046\u306e\u3082\u7406\u89e3\u3092\u52a9\u3051\u308b\u5185\u5bb9\u3067\u3057\u305f\u3002\u4e0b\u8a18\u3067\u306ffree variable x\u3092\u6301\u3064add1 procedure\u306eenvironment\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308bprocedure-env\u3068\u3044\u3046\u95a2\u6570\u306e\u30c6\u30b9\u30c8\u3067\u3059\u3002\n(let ([env (setup-environment)])\n  (m-eval '(begin\n             (define (add-x x)\n               (lambda (y) (+ x y)))\n             (define add1 (add-x 1))\n             (procedure-env add1))\n          env))\n;; =>\n;;(environment\n;;    (frame (binding x 1 ()))\n;;    #1=(environment\n;;        (frame\n;;         (binding add1 (procedure #2=(y) #3=((+ x y)) #0#) ())\n;;         (binding add-x (procedure (x) ((lambda #2# . #3#)) #1#) ())\n;;         (binding car (primitive #<procedure:mcar>) ())\n;;         (binding cdr (primitive #<procedure:mcdr>) ())\n;;         (binding cons (primitive #<procedure:mcons>) ())\n;;         (binding set-car! (primitive #<procedure:set-mcar!>) ())\n;;         (binding set-cdr! (primitive #<procedure:set-mcdr!>) ())\n;;         (binding null? (primitive #<procedure:null?>) ())\n;;         (binding + (primitive #<procedure:+>) ())\n;;         (binding - (primitive #<procedure:->) ())\n;;         (binding < (primitive #<procedure:<>) ())\n;;         (binding > (primitive #<procedure:>>) ())\n;;         (binding = (primitive #<procedure:=>) ())\n;;         (binding display (primitive #<procedure:mdisplay>) ())\n;;         (binding not (primitive #<procedure:not>) ())\n;;         (binding * (primitive #<procedure:*>) ())\n;;         (binding / (primitive #<procedure:/>) ())\n;;         (binding list (primitive #<procedure:mlist>) ())\n;;         (binding cadr (primitive #<procedure:mcadr>) ())\n;;         (binding cddr (primitive #<procedure:mcddr>) ())\n;;         (binding newline (primitive #<procedure:newline>) ())\n;;         (binding printf (primitive #<procedure:printf>) ())\n;;         (binding length (primitive #<procedure:mlength>) ())\n;;         (binding env-variables (primitive #<procedure:env-variables>) ())\n;;         (binding env-parent (primitive #<procedure:env-parent>) ())\n;;         (binding env-value (primitive #<procedure:env-value>) ())\n;;         (binding caddr (primitive #<procedure:mcaddr>) ())\n;;         (binding cdddr (primitive #<procedure:mcdddr>) ())\n;;         (binding cadddr (primitive #<procedure:mcadddr>) ())\n;;         (binding cddddr (primitive #<procedure:mcddddr>) ())\n;;         (binding symbol? (primitive #<procedure:symbol?>) ())\n;;         (binding pair? (primitive #<procedure:mpair?>) ())\n;;         (binding eq? (primitive #<procedure:eq?>) ())\n;;         (binding equal? (primitive #<procedure:equal?>) ())\n;;         (binding number? (primitive #<procedure:number?>) ())\n;;         (binding string? (primitive #<procedure:string?>) ())\n;;         (binding boolean? (primitive #<procedure:boolean?>) ())\n;;         (binding append (primitive #<procedure:mappend>) ())\n;;         (binding caadr (primitive #<procedure:mcaadr>) ())\n;;         (binding cdadr (primitive #<procedure:mcdadr>) ()))\n;;        (environment)))\n\n\u51fa\u529b\u306e\u4e00\u756a\u4e0b\u306b\u3042\u308b(environment)\u3068\u3044\u3046\u7a7a\u306eenvironment\u304c\u5927\u672c\u306b\u306a\u308a\u307e\u3059\u3002#1=\u3067\u793a\u3055\u308c\u3066\u3044\u308bglobal environment\u306b\u306f\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308bprimitive procedure\u306e\u540d\u524d\u5bfe\u5fdc(binding)\u304cframe\u5185\u306b\u4e26\u3093\u3067\u3044\u307e\u3059\u30022\u56dedefine\u3092\u3057\u3066\u3001binding\u3092\u4e8c\u500b\u8db3\u3057\u3066\u3044\u308b\u306e\u3067\u3001frame\u306e\u4e00\u756a\u4e0a\u306b\u306faddx\u3068add-1 procedure\u306ebinding\u304c\u3042\u308a\u307e\u3059\u3002\u66f4\u306badd-1\u306ffree variable x\u3092procedure\u5b9a\u7fa9\u6642\u306b\u5916\u304b\u3089\u4e0e\u3048\u3089\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3082\u3046\u4e00\u5c64environment(#0)\u304c\u5b58\u5728\u3057\u3066\u3001\u305d\u3053\u306eframe\u306bx = 1\u306ebinding\u304c\u5165\u3063\u3066\u3044\u307e\u3059\u3002\u5b9f\u884c\u524d\u306e\u72b6\u614b\u306a\u306e\u3067\u3001\u3053\u3053\u307e\u3067\u3067\u3059\u304c\u5b9f\u969b\u306eprocedure\u306e\u5b9f\u884c\u6642\u306b\u306f\u5f15\u6570\u3068\u3057\u3066\u4e0e\u3048\u3089\u3048\u305fy\u306ebinding\u3092\u542b\u3080\u4e00\u6642environment/frame\u304c\u5b9f\u884c\u4e2d\u306e\u307f\u4f5c\u6210\u3055\u308c\u308b\u3068\u3044\u3046\u3053\u3068\u306e\u3088\u3046\u3067\u3059\u3002SICP\u306e\u6559\u79d1\u66f8\u306b\u66f8\u3044\u3066\u3042\u308bdouble bubble\u306e\u8aac\u660e\u3092\u898b\u3066\u3082\u3044\u307e\u3044\u3061\u308f\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001\u5b9f\u88c5\u3057\u306a\u304c\u3089\u4e0b\u8a18\u306e\u3088\u3046\u306bclosure\u3092\u4f5c\u6210\u3057\u3066\u307f\u308b\u3068\u826f\u304f\u308f\u304b\u308a\u307e\u3057\u305f\u3002\n\u3053\u306e\u8ab2\u984c\u306e\u30af\u30e9\u30a4\u30de\u30c3\u30af\u30b9\u306f\u4f5c\u6210\u3057\u305fevaluator\u3067\u3001evaluator\u306e\u30b3\u30fc\u30c9\u81ea\u4f53\u3092REPL\u3067\u5b9f\u884c\u3057\u3066\u307f\u308b\u3068\u3044\u3046\u3082\u306e\u3002\u4e0b\u8a18\u306fDr.Racket\u306eREPL\u3067\u5b9f\u884c\u3057\u3066\u307f\u305f\u3082\u306e\u3067\u3059\u3002\nWelcome to DrRacket, version 6.1.1 [3m].\nLanguage: racket; memory limit: 128 MB.\n#f\n> (define (fib n)\n  (cond\n   [(< n 2) 1]\n   [else (+ (fib (- n 1)) (fib (- n 2)))]))\n> (time (fib 8))\ncpu time: 0 real time: 1 gc time: 0\n34\n\n\u3053\u3053\u307e\u3067\u306f\u666e\u901a\u306bRacket\u3067\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u3002Fibonacci\u306e8\u306f\u4e00\u77ac\u3067\u51fa\u307e\u3059\u3002\u6b21\u306fm-eval\u3092Racket\u4e0a\u3067\u8d70\u3089\u305b\u3066\u307f\u307e\u3059\u3002\n> (load-meval-defs)\nloaded\n> (driver-loop)\n\n;;; M-Eval input level 1\n(define (fib n)\n  (cond\n   [(< n 2) 1]\n   [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n;;; M-Eval value:\n#<void>\n\n;;; M-Eval input level 1\n(time (fib 8))\ncpu time: 3 real time: 3 gc time: 0\n\n;;; M-Eval value:\n34\n\nM-Eval input level 1\u3068\u51fa\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u72b6\u614b\u3067\u306fRacket\u306eREPL\u4e0a\u3067\u3001Scheme\u306eevaluator\u304c\u8d70\u3063\u3066\u3044\u3066\u3001\u305d\u3053\u3067\u30b3\u30fc\u30c9\u3092\u8d70\u3089\u305b\u3066\u3044\u307e\u3059\u3002REPL\u304c\u4e8c\u6bb5\u306b\u306a\u3063\u3066\u3044\u308b\u308f\u3051\u3067\u3059\u3002\u30b3\u30fc\u30c9\u5b9f\u884c\u306b\u5c11\u3057\u6642\u9593\u304c\u304b\u304b\u308b\u3088\u3046\u3067\u3059\u3002\u3055\u3089\u306b\u3001\u3053\u3053\u3067evaluator\u3092\u8d70\u3089\u305b\u3066\u307f\u307e\u3059\u3002\n;;; M-Eval input level 1\n(driver-loop)\n\n;;; M-Eval input level 2\n(define (fib n)\n  (cond\n   [(< n 2) 1]\n   [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n;;; M-Eval value:\n#<void>\n\n;;; M-Eval input level 2\n(time (fib 8))\ncpu time: 1148 real time: 1148 gc time: 10\n\n;;; M-Eval value:\n34\n\nevauator\u306e\u30b3\u30fc\u30c9\u3067\u5b9f\u884c\u3057\u3066\u3044\u308bREPL\u4e0a\u3067\u3055\u3089\u306b\u540c\u3058evaluator\u306e\u30b3\u30fc\u30c9\u3067REPL\u3092\u8d70\u3089\u305b\u3066\u3044\u308b\u308f\u3051\u3067\u3059\u3002REPL\u304c\u4e09\u6bb5\u306b\u306a\u3063\u3066\u3044\u308b\u308f\u3051\u3067\u3059\u306d\u3002\u3082\u3046\u4f55\u304c\u4f55\u3060\u304b\u308f\u304b\u308a\u307e\u305b\u3093\u3002\u540c\u3058Fibonacci\u306e\u5b9f\u884c\u306b\u306f\u5927\u5206\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u30b3\u30fc\u30c9\u304c3\u56de\u89e3\u91c8\u3055\u308c\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u306e\u3067\u3084\u3080\u306a\u3057\u3067\u3057\u3087\u3046\u304b\u3002REPL\u3092\u4e8c\u56deexit\u3059\u308b\u3068\u3082\u306e\u3068Racket REPL\u306b\u623b\u308a\u307e\u3059\u3002\n;;; M-Eval input level 2\n**quit**\n\n;;; M-Eval value:\nmeval-done\n\n;;; M-Eval input level 1\n**quit**\nmeval-done\n\n\nLecture 5: Debugging\n\u59bb\u51fa\u7523\u306e\u305f\u3081\u53d7\u8b1b\u305b\u305a\u3002Lecture 5\u306e\u30b9\u30e9\u30a4\u30c9\u3092\u898b\u308b\u304b\u304e\u308a\u306f\u3001SICP\u306e\u5185\u5bb9\u3068\u3044\u3046\u3088\u308a\u306f\u3001\u30e2\u30b8\u30e5\u30e9\u30fc\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u3051\u3001\u30c6\u30b9\u30c8\u3092\u66f8\u3051\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u305b\u3088\u3001\u3068\u304bgood programming practice\u306e\u4e00\u822c\u8ad6\u306e\u8a71\u3060\u3063\u305f\u69d8\u5b50\u3002\u30b9\u30e9\u30a4\u30c9\u306e\u5f8c\u534a\u3067Racket\u306eunit testing framework\u3068Dr.Racket\u306edebugger\u306e\u8a71\u304c\u4e00\u77ac\u3075\u308c\u3089\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u3053\u306f\u6709\u7528\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3002\n\nLecture 6: Language design and implementation\n\u9000\u9662\u76f4\u5f8c\u306e\u305f\u3081\u53d7\u8b1b\u305b\u305a\u3002\u7c73\u56fd\u3067\u306f\u51fa\u7523\u5f8c2\u6cca\u3067\u9000\u9662\u304c\u6a19\u6e96\u7684\u306a\u3088\u3046\u3067\u3059\u3002Lecture 6\u306e\u30b9\u30e9\u30a4\u30c9\u3092\u898b\u308b\u3068\u4e3b\u306bScheme\u3092\u4f7f\u3063\u3066Object Oriented Programming System\u3092\u5b9f\u88c5\u3057\u306a\u304c\u3089OOP\u306b\u3064\u3044\u3066\u5b66\u3076\u3068\u3044\u3063\u305f\u5185\u5bb9\u3060\u3063\u305f\u3088\u3046\u3067\u3059\u3002\u79c1\u306f\u3001R\u8a00\u8a9e\u304c\u3042\u307e\u308a\u4e00\u822c\u7684\u306a\u5f62\u5f0f\u306eOOP\u3092\u4f7f\u308f\u306a\u3044\u306e\u3067\u3001OOP\u95a2\u9023\u306f\u5168\u4f53\u7684\u306b\u82e6\u624b\u3067\u3059\u30021986\u5e74\u306e\u30d3\u30c7\u30aa\u3067\u306f\u3001\u3053\u306e\u5185\u5bb9\u306f\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u3063\u307d\u3044\u3067\u3059\u3002\n\u6388\u696d\u306e\u30b9\u30e9\u30a4\u30c9(\u30b9\u30e9\u30a4\u30c95-9)\u3067\u306f\u8907\u6570\u306e\u30c7\u30fc\u30bf\u5f62\u5f0f\u306b\u8907\u6570\u306e\u64cd\u4f5c\u304c\u30d4\u30dc\u30c3\u30c8\u30c6\u30fc\u30d6\u30eb\u306e\u69d8\u306b\u5b58\u5728\u3059\u308b\u3068\u304d\u306b\u3069\u306e\u3088\u3046\u306b\u307e\u3068\u3081\u308b\u304b\u3068\u3044\u3046\u65b9\u6cd5\u304c\u8a00\u53ca\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002functional programming\u3067\u306f\"generic operation\"\u3068\u3057\u3066\u3001\u3072\u3068\u3064\u306eprocedure\u306b\u3044\u308d\u3044\u308d\u306a\u30c7\u30fc\u30bf\u3092\u6295\u3052\u3066procedure\u304c\u5185\u90e8\u3067\u5834\u5408\u5206\u3051\u3067\u5bfe\u5fdc\u3059\u308b\u5f62\u3002OOP\u3067\u306f\u305d\u308c\u305e\u308c\u306e\u30c7\u30fc\u30bf\u5074\u306bmethod\u3068\u3057\u3066\u64cd\u4f5c\u304c\u4ed8\u5c5e\u3057\u3066\u3044\u3066\u3001\u3001\u3068\u3044\u3063\u305f\u8a71\u3092\u3057\u3066\u3044\u305f\u3082\u306e\u3068\u63a8\u6e2c\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u524d\u8ff0\u306e Coursera\u30b3\u30fc\u30b9(\u30ea\u30f3\u30af\u306f\u8b1b\u5e2b\u306ewebsite) \u3067\u3082Unit 8\u3067\u3075\u308c\u3066\u3044\u305f\u5185\u5bb9\u3068\u601d\u3044\u307e\u3059\u3002R\u8a00\u8a9e\u306f\u524d\u8005\u306e\u8003\u3048\u65b9\u306b\u8fd1\u3044\u5f62\u5f0f\u3068\u601d\u3044\u307e\u3059\u3002\u30b9\u30e9\u30a4\u30c9\u306b\u3082\u51fa\u3066\u304d\u307e\u3059\u304c\u3001\u524d\u8005\u306e\u307e\u3068\u3081\u304b\u305f\u3092\u3059\u308b\u3068\u3001generic operation\u3092\u8db3\u3059\u3068\u304d\u306f\u5909\u66f4\u304c\u4e00\u7b87\u6240(\u8db3\u3059operation\u306e\u307f)\u3067\u697d\u3060\u3051\u3069\u3001\u30c7\u30fc\u30bf\u5f62\u5f0f\u3092\u8db3\u3059\u3068\u304d\u306f\u5168\u3066\u306egeneric operation\u3092\u5909\u66f4\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u3002\u5f8c\u8005\u306e\u307e\u3068\u3081\u304b\u305f\u3060\u3068\u9006\u306b\u306a\u308a\u3001\u30c7\u30fc\u30bf\u5f62\u5f0f\u3092\u8db3\u3059\u3068\u304d\u306f\u5909\u66f4\u7b87\u6240\u304c\u4e00\u7b87\u6240\u3060\u304c\u3001operation\u3092\u8db3\u3059\u3068\u304d\u306f\u5168\u3066\u306e\u30c7\u30fc\u30bf\u5f62\u5f0f(class)\u3092\u5909\u66f4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3068\u306e\u3053\u3068\u3002\n\u6388\u696d\u306e\u30b3\u30fc\u30c9\u3067\u306fOOP sytem\u3092Scheme\u4e0a\u306b\u69cb\u7bc9\u3059\u308b\u30b3\u30fc\u30c9\u76f4\u30ea\u30f3\u30af\u3068\u3044\u3046\u3053\u3068\u3092\u3084\u3063\u3066\u3044\u305f\u3088\u3046\u3067\u3059\u3002\u4ed5\u7d44\u307f\u3068\u3057\u3066\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b1\u500b\u76ee\u306e\u8981\u7d20\u3067\u30de\u30fc\u30ad\u30f3\u30b0\u3057\u305f\u30ea\u30b9\u30c8\u3092\u4f7f\u3063\u3066\u3001\u65e2\u5b58\u306eScheme\u306e\u67a0\u5185\u3067class\u3084instance\u3068\u3044\u3063\u305f\u3082\u306e\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\u30af\u30e9\u30b9\u5b9a\u7fa9\n;; Class data abstraction\n(define (class? obj)\n  (tagged-list? obj 'class))\n(define (class-type class)\n  (second class))\n(define (class-state class)\n  (third class))\n(define (class-parent class)\n  (fourth class))\n(define (class-methods class)\n  (fifth class))\n\n(define (make-class type state parent methods)\n  (list 'class\n        type\n        state\n        parent\n        methods))\n\n\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u95a2\u9023\n;; Instance data abstraction\n(define (instance? obj)\n  (tagged-list? obj 'instance))\n(define (instance-state inst)\n  (second inst))\n(define (instance-class inst)\n  (third inst))\n\n(define (collect-type class)\n  (if (class? class)\n      (cons (class-type class)\n            (collect-type (class-parent class)))\n      '()))\n\n(define (collect-state class)\n  (if (class? class)\n      (append (class-state class)\n              (collect-state (class-parent class)))\n      '()))\n\n(define (make-instance class . args)\n  (let ((inst\n         (list 'instance\n               (map (lambda (x) (list x #f)) (collect-state class))\n               class)))\n    (if (has-method? inst 'CONSTRUCTOR)  ;; if it has a constructor, invoke it\n        (apply invoke inst 'CONSTRUCTOR args)\n        (void))\n    inst))\n\n\u30b3\u30fc\u30c9\u3092\u898b\u3066\u3044\u3066\u6c17\u4ed8\u304d\u307e\u3057\u305f\u304c\u3001Scheme\u306b\u306ffluid-let\u3068\u3044\u3046dynamic scoping\u306e\u305f\u3081\u306elet\u304c\u3042\u308b\u3093\u3067\u3059\u306d\u3002Clojure\u3067\u306fbinding\u3060\u3063\u305f\u3067\u3057\u3087\u3046\u304b\u3002(\u8108\u7565\u306a\u304b\u3063\u305f\u3067\u3059)\n\u8ab2\u984c\u306f\u524d\u56de\u306e\u8ab2\u984c\u3067\u4f5c\u6210\u3057\u305fScheme evaluator\u3092\u3055\u3089\u306b\u62e1\u5f35\u3059\u308b\u3053\u3068\u3067Scheme with OOP\u7684\u306a\u3082\u306e\u3092\u4f5c\u6210\u3057\u3066\u3001\u30b2\u30fc\u30e0\u3092\u30d7\u30ec\u30a4\u3059\u308b\u3068\u3044\u3046\u3082\u306e\u306e\u3088\u3046\u3067\u3059\u3002\u8ab2\u984c\u306b\u304b\u306a\u308a\u7121\u7406\u77e2\u7406\u611f\u306e\u3042\u308b\u30b2\u30fc\u30e0\u306e\u30d0\u30a4\u30aa\u30cf\u30b6\u30fc\u30c9\u307f\u305f\u3044\u306a\u30b9\u30c8\u30fc\u30ea\u30fc\u304c\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002\u5b9f\u969b\u4e0a\u306fOOP system\u306e\u30c6\u30b9\u30c8\u306f\u66f8\u3044\u3066\u3042\u3063\u3066\u3001\u305d\u308c\u306b\u3042\u308f\u305b\u3066test-driven development(\u3068\u3044\u3046\u304b\u65e2\u5b58\u306e\u30b3\u30fc\u30c9\u306e\u62e1\u5f35\u3092)\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u306e\u3088\u3046\u3067\u3059\u3002\u3068\u308a\u3042\u3048\u305a\u3001\u30c6\u30b9\u30c8\u3092\u8d70\u3089\u305b\u3066\u307f\u308b\u3068\"BRAINSBRAINSBRAINSBRAINS\"\u3068\u304b\u306a\u3063\u3061\u3083\u3063\u3066\u307e\u3059\u3002\u66f8\u3044\u3066\u3044\u305f\u3072\u3068\u304c\u30be\u30f3\u30d3\u306b\u306a\u3063\u3061\u3083\u305f\u3093\u3067\u3059\u306d\u3002\u300c\u304b\u3086\u3044 \u3046\u307e\u300d\u3063\u3066\u3084\u3064\u3067\u3059\u306d(\u53c2\u8003)\u3002\nracket@> (run-all-tests)\nRUNNING TEST: Getting started: make-instance with no extra args.\ntest-passed\nRUNNING TEST: Getting started: make-instance with arguments.\ntest-passed\nRUNNING TEST: Problem 1: create-class\ncreate-class did not produce a class. Instead, it produced:  BRAINSBRAINSBRAINSBRAINS\n  context...:\n   /Users/kazuki/Library/Racket/6.1.1/pkgs/compatibility-lib/compatibility/mlist.rkt:47:11: loop\n   /usr/local/Cellar/plt-racket/6.1.1/share/racket/collects/racket/private/misc.rkt:87:7\n\n\u554f\u984c5\u307e\u3067\u3084\u308b\u3068OOP system\u304c\u3068\u308a\u3042\u3048\u305a\u52d5\u304f\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u4e0b\u8a18\u307f\u305f\u3044\u306a\u611f\u3058\u3067named-object\u30af\u30e9\u30b9\u306esicp\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002method call\u3082(instance-name 'METHOD-NAME)\u307f\u305f\u3044\u306a\u611f\u3058\u3067instance.method()\u7684\u306a\u96f0\u56f2\u6c17\u3067\u3059\u3002\n> (driver-loop) ; enter the Scheme with OOP interpreter\n\n;;; OO-Eval input\n(define sicp (new named-object 'SICP))\n\n;;; OO-Eval value:\n#<void>\n\n;;; OO-Eval input\n(sicp 'NAME)\n\n;;; OO-Eval value:\nSICP\n\n\u3053\u306e\u6642\u70b9\u3067\u30b2\u30fc\u30e0\u3092\u8d77\u52d5\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u30b2\u30fc\u30e0\u4e16\u754c\u306e\u30af\u30e9\u30b9\u5b9a\u7fa9\u306foo-types.scm\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3067\u306a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u8ab2\u984c\u306ePDF\u306e8\u30da\u30fc\u30b8\u306b\u89e3\u8aac\u304c\u3042\u308a\u307e\u3059\u3002\"Mightly Chuck River\u306e\u5ddd\u5cb8\u306b\u3042\u308b\u7121\u540d\u306e\u5de5\u79d1\u5927\u5b66\"\u3092\u821e\u53f0\u306b\u3057\u3066\u3044\u308b\u305d\u3046\u3067\u3059(MIT\u306f\u30c1\u30e3\u30fc\u30eb\u30ba\u5ddd\u306e\u5ddd\u5cb8\u306b\u3042\u308b)\u3002\u81ea\u5206(avatar\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9)\u304c\u3044\u308b\u90e8\u5c4b\u306e\u69d8\u5b50\u3057\u304b\u898b\u3048\u306a\u3044\u3088\u3046\u3067\u3059\u304c\u3001DEITY-MODE(\u30cd\u7533\u30e2\u30fc\u30c9?)\u306b\u3059\u308b\u3068\u4ed6\u306e\u90e8\u5c4b\u3082\u898b\u3048\u308b\u3088\u3046\u306b\u30c1\u30fc\u30c8\u3067\u304d\u308b\u3068\u306e\u3053\u3068\u3002\n> (run-game 'kaz-yos)\n\nAt green-building-roof zombie-of-george says -- uuuuUUUUuuuuh.. brains...\nYou are in great-court\nYou are not holding anything.\nYou see stuff in the room: flag-pole lovely-trees\nThere are no other people around you.\nThe exits are in directions: east north\n\n;;; OO-Eval input\n(screen 'DEITY-MODE #t)\n\n;;; OO-Eval value:\n#<void>\n\n\u3068\u308a\u3042\u3048\u305a\u624b\u9803\u306a\u51f6\u5668\u3092\u3068\u601d\u3063\u3066\u65d7\u306e\u30dd\u30fc\u30eb\u3092\u53d6\u308d\u3046\u3068\u3057\u307e\u3057\u305f\u304c\u53d6\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u3088\u3063\u307d\u3069\u91cd\u3044\u306e\u3067\u3057\u3087\u3046\u3002\n;;; OO-Eval input\n(me 'TAKE (thing-named 'flag-pole))\n\nAt great-court kaz-yos says -- I try but cannot take flag-pole\n;;; OO-Eval value:\n#f\n\n\u897f\u306b\u5411\u3063\u3066\u307f\u308b\u3068PDF\u306b\u3042\u308b\u30b9\u30c8\u30fc\u30ea\u30fc\u306b\u51fa\u3066\u304f\u308b\u76f8\u68d2\u7684\u306a\u3072\u3068\u3092\u767a\u898b\u3057\u305f\u3088\u3046\u3067\u3059\u3002\n;;; OO-Eval input\n(me 'GO 'east)\n\nkaz-yos moves from great-court to the-dot\nAt the-dot kaz-yos says -- Hi alyssa-p-hacker\n--- Clock tick 0 ---\nlem-e-tweakit moves from lobby-7 to dorm-row\nAt lobby-10 dr-v says -- I take math-book from lobby-10\ngjs moves from 10-250 to barker-library\nYou are in the-dot\nYou are not holding anything.\nYou see stuff in the room: dollar-bill\nYou see other people: alyssa-p-hacker\nThe exits are in directions: west north\n;;; OO-Eval value:\nOK\n\navatar\u304c\u4f7f\u3048\u308b\u30e1\u30bd\u30c3\u30c9\u4e00\u89a7\u3002EMIT(\u653e\u3064?)\u3063\u3066\u306a\u3093\u3067\u3057\u3087\u3046\u306d\u3002\n;;; OO-Eval input\n((me 'GET-CLASS) 'GET-METHODS)\n\n;;; OO-Eval value:\n(LOOK-AROUND\n GO\n CONSTRUCTOR\n SAY\n PEOPLE-AROUND\n STUFF-AROUND\n PEEK-AROUND\n TAKE\n DROP\n HAVE-FIT\n LOSE\n GO-EXIT\n GO\n ENTER-ROOM\n SUFFER\n DIE\n CHANGE-LOCATION\n ENTER-ROOM\n LEAVE-ROOM\n CONSTRUCTOR\n LOCATION\n EMIT\n DESTROY\n CONSTRUCTOR\n ADD-THING\n DEL-THING\n THINGS\n HAVE-THING?\n CONSTRUCTOR\n NAME\n DESTROY\n GET-CLASS)\n\n\u3053\u306e\u5f8c\u306fmixin\u3092\u5b9f\u88c5\u3059\u308b\u3068\u3044\u3046\u554f\u984c\u3082\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u529b\u5c3d\u304d\u307e\u3057\u305f\u3002\u3002\n\nLecture 7: Continuations, concurrency, lazy evalutation, and streams\n\u524d\u65e5\u306e\u6642\u70b9\u3067\u3001\u6b74\u53f2\u4e0a\u307e\u308c\u306b\u898b\u308b\u5927\u96ea\u306e\u4e88\u5831\u3067\u6388\u696d\u304c\u30ad\u30e3\u30f3\u30bb\u30eb\u3002\u30de\u30b5\u30c1\u30e5\u30fc\u30bb\u30c3\u30c4\u5dde\u77e5\u4e8b\u304c\u7dca\u6025\u4e8b\u614b\u5ba3\u8a00\u3057\u3061\u3083\u3063\u3066\u3001\u516c\u5171\u4ea4\u901a\u6a5f\u95a2\u306f\u52d5\u304b\u306a\u3044\u4e88\u5b9a\u3068\u306e\u3053\u3068\u3002\n=> \u7d50\u5c40\u4e38\u4e00\u65e5\u3001\u5468\u56f2\u306e\u5b66\u6821\u3082\u8077\u5834\u3082\u307f\u306a\u4f11\u307f\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002biomedical\u306e\u57fa\u790e\u7cfb\u306e\u7814\u7a76\u5ba4\u306b\u306f\u65e5\u672c\u4eba\u30dd\u30b9\u30c9\u30af\u3060\u3051\u306f\u6765\u3066\u3044\u305f\u307f\u305f\u3044\u3067\u3059\u304c\u3002\u3002\u3002\n\u4ee5\u964d\u306f\u3001\u5fa9\u7fd2\u8cc7\u6599(recitation; PDF)\u306e\u5185\u5bb9\u3060\u3051\u3044\u304f\u3064\u304b\u3002\n;;; Stream operators\n;; Stream constructor macro (cdr part delayed)\n(define-syntax cons-stream\n  (syntax-rules ()\n    [(_ a b)\n     (cons a (delay b))]))\n\n;; Stream car part selector\n(define stream-car car)\n\n;; Stream cdr part selector (cdr part forced)\n(define stream-cdr\n  (lambda (s)\n    (force (cdr s))))\n\ndelay\u3068force\u306fGuile Scheme\u3067\u306fprimitive\u3068\u3057\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002delay\u306f\u8a08\u7b97\u3092\u9045\u5ef6\u3055\u305b\u3066\u3001\"\u547c\u3070\u308c\u305f\u3089\u8a08\u7b97\u3059\u308b\u3088\"\u3068\u3044\u3046\u610f\u5473\u306epromise\u3068\u3044\u3046\u3082\u306e\u3092\u8fd4\u3059\u3068\u306e\u3053\u3068\u3067\u3059\u3002\nR5RS\u3067\u306f\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u3044\u3088\u3046\u306a\u306e\u3067\u4e0b\u8a18\u306e\u69d8\u306bdelay\u3092\u30de\u30af\u30ed\u3068\u3057\u3066\u5b9a\u7fa9\u3001force\u3092\u901a\u5e38\u306eprocedure\u3068\u3057\u3066\u5b9a\u7fa9\u3059\u308c\u3070\u826f\u3044\u3088\u3046\u3067\u3059\u3002\n;;; DIY implementation\n(define-syntax my-delay\n  (syntax-rules ()\n    [(delay expr)\n     (lambda ()\n       expr)]))\n(define (my-force delayed-expr)\n  (delayed-expr))\n\n(my-delay (+ 1 2))\n;; => #<procedure 10672d220 at <current input>:143:0 ()>\n(my-force (my-delay (+ 1 2)))\n;; => 3\n\n\u8cc7\u6599\u306e\u4f8b\u3092\u3084\u3063\u3066\u307f\u307e\u3059\u30020\u304c\u306a\u3089\u3093\u3060\u7121\u9650sequence\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n;;; Infinite sequence of 0's\n(define zeros\n  (cons-stream\n   0\n   zeros))\n\nzeros\n;; => (0 . #<promise #<procedure 10719a840 at <current input>:22:2 ()>>)\n(stream-car zeros)\n;; => 0\n(stream-cdr zeros)\n;; => (0 . #<promise #-1#>)\n(stream-car (stream-cdr zeros))\n\nstream\u7528\u306enth\u3092\u5b9a\u7fa9\u3057\u3066\u307f\u307e\u3059\u3002\u78ba\u304b\u306b\u305a\u3063\u30680\u304c\u7d9a\u3044\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n(define (stream-nth s n)\n  (if (<= n 0)\n      (stream-car s)\n      (stream-nth (stream-cdr s) (- n 1))))\n;; 1 millionth element\n(stream-nth zeros 999999)\n;; => 0\n\n\u305a\u3063\u3068\u540c\u3058\u6570\u5b57\u3060\u3068\u672c\u5f53\u306b\u8a08\u7b97\u3057\u3066\u3044\u308b\u304b\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u81ea\u7136\u6570\u306e\u7121\u9650\u6570\u5217\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002stream-cons\u3067\u306e\u3084\u308a\u304b\u305f\u304c\u601d\u3044\u3064\u304b\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a Coursera Programming Languages\u306e\u8ab2\u984c\u3067\u307f\u304b\u3051\u305f\u3084\u308a\u304b\u305f\u3067\u3084\u3063\u3066\u307f\u307e\u3059\u3002\n;;; Infinite sequence of natural numbers\n(define nats\n  (letrec ([f (lambda (x)\n                (cons\n                 x\n                 (delay (f (+ x 1)))))])\n    (f 1)))\n\n;; First element\n(stream-car nats)\n;; => 1\n\n\u95a2\u6570\u578b\u8a00\u8a9e\u3067\u3088\u304f\u898b\u639b\u3051\u308b\u3088\u3046\u306atake\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u6700\u521d\u306en\u500b\u306e\u8981\u7d20\u3092realize\u3057\u307e\u3059\u3002\n;;; take for streams\n(define (take n s)\n  (map (lambda (x) (stream-nth s x)) (iota n)))\n;; First 10 elements\n(take 10 nats)\n;; => (1 2 3 4 5 6 7 8 9 10)\n\n\u4e0a\u8a18\u306enats\u306e\u5b9a\u7fa9\u3060\u3068abstraction\u4e0d\u8db3\u306a\u611f\u3058\u304c\u3057\u307e\u3059\u3002\u5fa9\u7fd2\u8ab2\u984c\u3067\u306e\u89e3\u6cd5\u306f\u3053\u3093\u306a\u306e\u3067\u3057\u305f\u3002\n;;; Define a function to map a binary operator over two streams\n(define (map2-stream op s1 s2)\n  (cons-stream\n   ;; Map the operator to first elements\n   (op (stream-car s1)\n       (stream-car s2))\n   ;; recurse\n   (map2-stream op\n                (stream-cdr s1)\n                (stream-cdr s2))))\n\n;; Arithmetic operators\n(define (add-streams s1 s2) (map2-stream + s1 s2))\n(define (sub-streams s1 s2) (map2-stream - s1 s2))\n(define (mul-streams s1 s2) (map2-stream * s1 s2))\n(define (div-streams s1 s2) (map2-stream / s1 s2))\n\n;; Infinite sequence of 1's\n(define ones (cons-stream 1 ones))\n\n;; Infinite sequence of natural numbers\n(define nats\n  (cons-stream\n   1\n   (add-streams nats ones)))\n\n;; First 10 elements\n(take 10 nats)\n;; => (1 2 3 4 5 6 7 8 9 10)\n\n\u3059\u3054\u304fabstract\u306b\u306a\u3063\u3066\u4eca\u5ea6\u306f\u4f55\u304c\u8d77\u3063\u3066\u3044\u308b\u306e\u304b\u308f\u304b\u308a\u306b\u304f\u3044\u3067\u3059\u304c\u3001\u4e00\u500b\u3065\u3064\u305a\u308c\u306a\u304c\u30891\u306e\u7121\u9650\u6570\u5217\u304c\u3001\u7e26\u65b9\u5411\u306b\u8db3\u3057\u3042\u3052\u3089\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3057\u3087\u3046\u304b\u3002\u5f8c\u306b\u306a\u308b\u307b\u3069\u8db3\u30591\u306e\u6570\u304c\u5897\u3048\u3066\u3044\u304f\u3068\u3002\n1 1 1 1 1 1 1 1 1 1 ....\n  1 1 1 1 1 1 1 1 1 1 ....\n    1 1 1 1 1 1 1 1 1 1 ....\n      1 1 1 1 1 1 1 1 1 1 ....\n        1 1 1 1 1 1 1 1 1 1 ....\n         ..........\n\nStream\u306e\u304b\u3051\u7b97\u3092\u3064\u304b\u3048\u3070\u3053\u3093\u306a\u306e\u3082\u3067\u304d\u307e\u3059\u306d\u3002\n;;; Infinite sequence of squared natural numbers\n(define squared-nats (mul-streams nats nats))\n\n(take 15 squared-nats)\n;; => (1 4 9 16 25 36 49 64 81 100 121 144 169 196 225)\n\nClojure\u3060\u3068\u6a19\u6e96\u3067infinite sequence (\u3053\u308c\u3082stream\u3068\u547c\u3076\u306e\u3067\u3057\u3087\u3046\u304b?)\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u76f4\u3050\u3067\u304d\u307e\u3059\u306d\u3002\n(defn square [n] (* n n))\n(def nats (iterate #(+ % 1) 1))\n(take 15 (map square nats))\n;; => (1 4 9 16 25 36 49 64 81 100 121 144 169 196 225)\n\nFactorials\u3068\u3044\u3046\u554f\u984c\u306f\u3001stream\u7528\u306emap\u3092\u7528\u610f\u3057\u3066\u3053\u3093\u306a\u611f\u3058\u3067\u3057\u3087\u3046\u304b\u3002\u3053\u3061\u3089\u3067\u5148\u7a0b\u306esquared-nats\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u306d\u3002\n;;; Infinite sequence of factorials\n(define (map-stream op s)\n  (cons-stream\n   (op (stream-car s))\n   (map-stream op\n               (stream-cdr s))))\n\n(define (factorial n)\n  (define (helper n acc)\n    (if (<= n 0)\n        acc\n        (helper (- n 1) (* acc n))))\n  (helper n 1))\n\n(define facts (map-stream factorial nats))\n(take 7 facts)\n;; => (1 2 6 24 120 720 5040)\n\nCode IQ\u3067\u51fa\u3066\u3044\u305f\u5186\u5468\u7387\u306e\u8fd1\u4f3c\u8a08\u7b97\u306e\u554f\u984c\u304c\u7de0\u3081\u5207\u3063\u305f\u306e\u3067\u3001stream\u3092\u4f7f\u3063\u3066\u3084\u3063\u3066\u307f\u307e\u3059\u3002\u307e\u305a\u306f\u6e96\u5099\u3068\u3057\u3066stream\u7528\u306efilter\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n;;; Stream filter\n(define (filter-stream pred s)\n  (if (pred (stream-car s))\n      (cons-stream (stream-car s) (filter-stream pred (stream-cdr s)))\n      (filter-stream pred (stream-cdr s))))\n\n(take 10 (filter-stream odd? nats))\n;; => (1 3 5 7 9 11 13 15 17 19)\n\n\u5206\u6bcd\u3068\u5206\u5b50\u306e\u30da\u30a2\u306estream\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u5206\u6bcd\u3068\u5206\u5b50\u306estream\u3092\u500b\u5225\u306b\u4f5c\u6210\u3057\u3066\u3001\u5148\u7a0b\u306emap2-stream\u3067\u30da\u30a2\u4f5c\u6210\u3057\u307e\u3059\u3002\n;; Stream of numerator-denominator pairs\n(define numer-stream (cons-stream 4 squared-nats))\n(define denom-stream (filter-stream odd? nats))\n(define numer-denom-pair-stream (map2-stream list numer-stream denom-stream))\n\n(take 10 numer-denom-pair-stream)\n;; => ((4 1) (1 3) (4 5) (9 7) (16 9) (25 11) (36 13) (49 15) (64 17) (81 19))\n\n\u3042\u3068\u306f\u4e00\u6bb5\u4e00\u6bb5\u306e\u8a08\u7b97\u306e\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u3053\u3061\u3089 \u306e\u4e8c\u500b\u76ee\u306e\u65b9\u6cd5\u3067\u3059\u3002\n;;; Procedure to perform one step in the continued fraction method 2\n;; http://en.wikipedia.org/wiki/Approximations_of_\u03c0#Continued_fractions\n(define (add-and-devide lst acc)\n  (let ([a (car lst)]\n        [b (cadr lst)])\n    (/ a (+ b acc))))\n\n\u6700\u521d\u306e\u65b9\u3067\u3082\u51fa\u3066\u304d\u305ffold-right\u3092\u4f7f\u3063\u3066\u307e\u3068\u3081\u307e\u3059\u3002\n;;; fold-right procedure\n(define (foldr f init lst)\n  (if (null? lst)\n      init\n      (f (car lst)\n         (foldr f init (cdr lst)))))\n\n;;; Pi approximator\n(define (pi-calc n)\n  (foldr add-and-devide 0 (take n numer-denom-pair-stream)))\n\n;;; First 10 approximations\n(map pi-calc (take 10 nats))\n;; => (4 3 19/6 160/51 1744/555 644/205 2529/805 183296/58345 3763456/1197945 4317632/1374345)\n(map exact->inexact (map pi-calc (take 10 nats)))\n;; => (4.0 3.0 3.1666666666666665 3.1372549019607843 3.142342342342342 3.1414634146341465 3.1416149068322983 3.1415888250921244 3.1415933118799275 3.14159254044654)\n\n;; Reach the maximum precision at 22\n(map exact->inexact (map pi-calc (list 1 10 21 22 100 1000)))\n;; => (4.0 3.14159254044654 3.1415926535897936 3.141592653589793 3.141592653589793 3.141592653589793)\n\n22\u56de\u76ee\u3067\u6d6e\u52d5\u5c0f\u6570\u70b9\u6f14\u7b97\u306e\u9650\u754c\u5024\u307e\u3067\u81f3\u308b\u3088\u3046\u3067\u3059\u3002\n\nLecture 8: Memory management, garbage collection, and the lambda calculus\n\u6700\u7d42\u65e5\u3002\u306a\u305c\u304b\u53c2\u52a0\u8005\u306f\u6700\u521d\u306e\u534a\u5206\u5f31(20\u540d\u3050\u3089\u3044)\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u304c\u3002\u3002\u5185\u5bb9\u306flambda\u304c\u3042\u308c\u3070\u306a\u3093\u3067\u3082\u3067\u304d\u308b!\u3068\u3044\u3046\u306f\u306a\u3057\u3068\u3001Lecture 7\u306econtinuation, concurrency, stream\u3092\u7121\u7406\u77e2\u7406\u3064\u3081\u3053\u3093\u3060\u611f\u3058\u3067\u3057\u305f\u3002\n\u307e\u305a\u3001\u6700\u521d\u306bScheme\u3067Scheme\u306eevaluator\u3092\u66f8\u304f(meta-circular evaluator)\u3068\u3044\u3046\u884c\u70ba\u306f\u610f\u5473\u304c\u3042\u308b\u306e\u304b\u3068\u3044\u3046\u8a71\u3002\u3053\u308c\u306f\u4f55\u3082evaluator\u3060\u3051\u3067\u306f\u306a\u304f\u3066\u3001compiler\u3082\u66f8\u3051\u308b\u3088\u3068\u3002\u3064\u307e\u308a\u3001Scheme\u3067Scheme -> Assembly\u306e\u5909\u63db\u3092\u884c\u3046compiler\u3092\u66f8\u304f\u3002\u3053\u3053\u306bScheme\u3067\u66f8\u304b\u308c\u305fScheme\u306eevaluator\u3092\u901a\u3059\u3068\u3001assembly\u3067\u66f8\u304b\u308c\u305fScheme evaluator\u304c\u51fa\u6765\u308b\u3068\u3002\u3055\u3089\u306b\u3001compiler\u81ea\u4f53\u3092\u305d\u306ecompiler\u306b\u901a\u3059\u3068\u3001assembly\u3067\u66f8\u304b\u308c\u305fScheme -> Assembly\u306ecompiler\u304c\u51fa\u6765\u308b\u3068\u306e\u3053\u3068(\u30b9\u30e9\u30a4\u30c9p22\u3088\u308a)\u3002\u306a\u308b\u307b\u3069\u3053\u308c\u306a\u3089\u5b9f\u7528\u6027\u304c\u3042\u308b\u884c\u70ba\u306b\u601d\u3048\u307e\u3059\u306d\u3002\nlambda calculus\u306e\u90e8\u5206\u306f\u3069\u3053\u307e\u3067primitive\u3092\u6e1b\u3089\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u304b\u3044\u3046\u5c0e\u5165\u304b\u3089\u3001if\u306e\u3088\u3046\u306aspecial form\u3084boolean\u3082\u4ed6\u306e\u3082\u306e(lambda)\u3067\u8868\u73fe\u3067\u304d\u308b\u3001\u6570\u5b57\u3059\u3089Church number\u3068\u3044\u3046\u304b\u305f\u3061\u3067lambda\u3067\u8868\u73fe\u3067\u304d\u308b\u3068\u3044\u3046\u3088\u3046\u306a\u306f\u306a\u3057\u3067\u3057\u305f\u3002\n\u305f\u3068\u3048\u3070cons cell\u3068car/cdr\u306f\u4e0b\u8a18\u306e\u69d8\u306blambda\u3060\u3051\u3067\u8868\u308f\u305b\u308b\u3088\u3046\u3067\u3059\u3002cons cell\u304cprocedure\u3092\u5f15\u6570c\u3068\u3057\u3066\u3068\u308bprocedure\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002car/cdr\u306f\u305d\u308c\u305e\u308c\u4e8c\u3064\u5f15\u6570\u3092\u3068\u3063\u3066\u524d\u8005/\u5f8c\u8005\u3092\u8fd4\u3059procedure\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u304ccons cell\u306b\u6e21\u308b\u3068a\u3068b\u306bcar/cdr\u304c\u9069\u7528\u3055\u308c\u3066\u524d\u8005/\u5f8c\u8005\u304c\u3068\u308a\u3060\u3055\u308c\u308b\u3068\u3044\u3046\u3053\u3068\u306e\u3088\u3046\u3067\u3059\u3002\n;;; pair construction and selection\n(define (cons a b)\n  (lambda (c)\n    (c a b)))\n(define (car p)\n  (p (lambda (a b) a)))\n(define (cdr p)\n  (p (lambda (a b) b)))\n\n(define pair1 (cons 1 (cons 2 '())))\n(car pair1)\n;; => 1\n(cdr pair1)\n;; => #<procedure 10ac241b0 at <current input>:5:2 (c)>\n(car (cdr pair1))\n;; => 2\n\nBoolean\u3068and\u3082\u4e0b\u8a18\u306e\u3054\u3068\u304fprocedure\u3067\u8868\u3055\u308c\u308b\u3088\u3046\u3067\u3059\u3002\n(define (true x)\n  (lambda (y) x))\n\n(define (false x)\n  (lambda (y) y))\n\n(define (and a b)\n  ((a b) false))\n\n(and true true)\n;; ((true true) false)\n;; ((lambda (y) true) false)\n;; true\n;; => #<procedure true (x)>\n\n(and true false)\n;; ((true false) false)\n;; ((lambda (y) false) false)\n;; false\n;; => #<procedure false (x)>\n\n\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u304c\u7d42\u3063\u305f\u3068\u304d\u306b\u3001\u3053\u308c\u3067\u3042\u306a\u305f\u3082Order of Lambda (\u30e9\u30e0\u30c0\u56e3?)\u306e\u4e00\u54e1\u3060!\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u30e9\u30e0\u30c0\u56e3\u306e\u7f36\u30d0\u30c3\u30b8\u3092\u8cb0\u3044\u307e\u3057\u305f\u3002\u666e\u901a\u306b\u3046\u308c\u3057\u304b\u3063\u305f\u3067\u3059\u3002\n\nContinuation\u3068\u3044\u3046\u6982\u5ff5\u306f\u4eca\u56de\u521d\u3081\u3066\u5b66\u3093\u3060\u306e\u3067\u4f8b\u793a\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u3053\u3061\u3089\u306e\u8cc7\u6599 \u306e\u5206\u306b\u306a\u308a\u307e\u3059\u3002continuation\u3068\u3044\u3046\u306e\u306f\u3001\"\u3067\u3001\u305d\u306eprocedure\u306e\u8fd4\u3059\u7d50\u679c\u3067\u4f55\u3092\u3057\u305f\u3044\u306e\"\u3068\u3044\u3046\u554f\u3044\u306b\u5bfe\u3059\u308b\u7b54\u3048\u3068\u3044\u3046\u3053\u3068\u306e\u3088\u3046\u3067\u3059\u3002\u3064\u307e\u308a\u3001\u73fe\u5728\u306eprocedure\u304c\u7d50\u679c\u3092\u8fd4\u3057\u305f\u5f8c\u306e\u6b8b\u308a\u306e\u8a08\u7b97\u3067\u3059\u3002\u3053\u306e\u6b8b\u308a\u306e\u8a08\u7b97\u3092procedure\u3068\u3057\u3066\u6e21\u3057\u3066\u3044\u304f\u5f62\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092continuation passing sytle\u3068\u3044\u3046\u3088\u3046\u3067\u3059\u3002\u8cc7\u6599\u306e\u4f8b\u3092\u898b\u3066\u307f\u307e\u3059\u3002\u4f8b\u306f\u304a\u306a\u3058\u307f\u306efactorial\u3067\u3059\u3002\n\u307e\u305a\u306f\u3001\u901a\u5e38\u306e\u518d\u5e30\u3068\u672b\u5c3e\u518d\u5e30\u3067\u3059\u3002\u518d\u5e30\u3067\u306f\u8a08\u7b97\u307e\u3061\u304c\u30b9\u30bf\u30c3\u30af\u3092\u6d88\u8cbb\u3059\u308b\u69d8\u5b50\u304c\u4e09\u89d2\u5f62\u304b\u3089\u898b\u3066\u3068\u308c\u307e\u3059\u3002\n;;; Regular linear recursion\n(define (factorial n)\n  (if (= n 0)\n      1\n      (* n (factorial (- n 1)))))\n;;\n;; scheme@(guile-user)> ,trace (factorial 5)\n;; trace: |  (#<procedure 105893500> #(#<directory (guile-user) 1048f2c60> #f))\n;; trace: |  #(#<directory (guile-user) 1048f2c60> factorial)\n;; trace: (#<procedure 105896880 at <current input>:129:7 ()>)\n;; trace: (factorial 5)\n;; trace: |  (factorial 4)\n;; trace: |  |  (factorial 3)\n;; trace: |  |  |  (factorial 2)\n;; trace: |  |  |  |  (factorial 1)\n;; trace: |  |  |  |  |  (factorial 0)\n;; trace: |  |  |  |  |  1\n;; trace: |  |  |  |  1\n;; trace: |  |  |  2\n;; trace: |  |  6\n;; trace: |  24\n;; trace: 120\n\n\u672b\u5c3e\u518d\u5e30(\u5b9f\u8cea\u30eb\u30fc\u30d7)\u306b\u3059\u308b\u3068\"\u73fe\u5728\u307e\u3067\u306e\u8a08\u7b97\u7d50\u679c\u306e\u5024\"\u3092\u9806\u6b21accmulator\u306b\u305f\u3081\u306a\u304c\u3089\u9032\u3081\u3066\u3044\u304f\u305f\u3081\u3001\u30b9\u30bf\u30c3\u30af\u304c\u5897\u3048\u307e\u305b\u3093\u3002\n;;; Tail-recursion (iterative)\n(define (fact-helper n acc)\n    (if (zero? n)\n        acc\n        (fact-helper (- n 1) (* acc n))))\n(define (fact-iter n)\n  (fact-helper n 1))\n;;\n;; scheme@(guile-user)> ,trace (fact-iter 5)\n;; trace: |  (#<procedure 10bb63440> #(#<directory (guile-user) 10afb6c60> #f))\n;; trace: |  #(#<directory (guile-user) 10afb6c60> fact-iter)\n;; trace: (#<procedure 10bb79c80 at <current input>:142:7 ()>)\n;; trace: (fact-iter 5)\n;; trace: (fact-helper 5 1)\n;; trace: (fact-helper 4 5)\n;; trace: (fact-helper 3 20)\n;; trace: (fact-helper 2 60)\n;; trace: (fact-helper 1 120)\n;; trace: (fact-helper 0 120)\n;; trace: 120\n\n\u4e0b\u8a18\u304ccontinuation passing sytle (\u4ee5\u4e0bCPS)\u3067\u3059\u3002\u5f62\u614b\u3068\u3057\u3066\u306f\u672b\u5c3e\u518d\u5e30\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u901a\u5e38\u306eiteration\u3067\u306f\"\u73fe\u5728\u307e\u3067\u306e\u8a08\u7b97\u7d50\u679c\u306e\u5024\"\u304c\u3042\u3063\u305f\u90e8\u5206\u306bprocedure\u304c\u5b58\u5728\u3059\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u3001\"\u73fe\u5728\u307e\u3067\u306e\u8a08\u7b97\u7d50\u679c\u306e\u5024\"\u306e\u304b\u308f\u308a\u306b\"\u3053\u308c\u304b\u3089\u306e\u8a08\u7b97\u65b9\u6cd5(procedure)\"\u3092\u6e21\u3057\u3066\u3044\u307e\u3059\u3002\u4e00\u756a\u6700\u521d\u306b\u6e21\u3057\u3066\u3044\u308b\u306e\u306fidentity procedure\u3067\u3001fact-cps 5\u306e\u7d50\u679c\u304c\u3067\u305f\u3089\u3001\"\u305d\u3053\u304b\u3089\u306f\u305f\u3060\u305d\u306e\u307e\u307e\u5024\u3092\u304f\u308c\"\u3068\u3044\u3046\u6307\u793a\u3092\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\u4ee5\u964d\u306f\u3053\u306e\u7c21\u5358\u306a\u6307\u793a\u66f8\u306b\u6b21\u3005\u3068\u6307\u793a\u3092\u66f8\u304d\u3053\u3093\u3067\u306f\u6e21\u3057\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n;;; Continuation passing style\n(define (fact-cps n cont)\n  (if (zero? n)\n      (cont 1)\n      (fact-cps (- n 1)\n                (lambda (x) (cont (* n x))))))\n;;\n;; scheme@(guile-user)> ,trace (fact-cps 5 (lambda (x) x))\n;; trace: |  (#<procedure 1053fb140> #(#<directory (guile-user) 1048f2c60> #f))\n;; trace: |  #(#<directory (guile-user) 1048f2c60> fact-cps)\n;; trace: (#<procedure 1054426a0 at <current input>:198:7 ()>)\n;; trace: (fact-cps 5 #<procedure 10557d820 at <current input>:198:19 (x)>)\n;; trace: (fact-cps 4 #<procedure 105583b70 at <current input>:160:16 (x)>)\n;; trace: (fact-cps 3 #<procedure 105745c60 at <current input>:160:16 (x)>)\n;; trace: (fact-cps 2 #<procedure 105745090 at <current input>:160:16 (x)>)\n;; trace: (fact-cps 1 #<procedure 105807180 at <current input>:160:16 (x)>)\n;; trace: (fact-cps 0 #<procedure 1058ef2a0 at <current input>:160:16 (x)>)\n;; trace: (#<procedure 1058ef2a0 at <current input>:160:16 (x)> 1)\n;; trace: (#<procedure 105807180 at <current input>:160:16 (x)> 1)\n;; trace: (#<procedure 105745090 at <current input>:160:16 (x)> 2)\n;; trace: (#<procedure 105745c60 at <current input>:160:16 (x)> 6)\n;; trace: (#<procedure 105583b70 at <current input>:160:16 (x)> 24)\n;; trace: (#<procedure 10557d820 at <current input>:198:19 (x)> 120)\n;; trace: 120\n\n\u4e0a\u8a18\u306e\u3082\u306e\u3060\u3051\u3060\u3068\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u5177\u4f53\u5316\u3057\u3066\u307f\u307e\u3059\u3002\u6700\u521d\u306fidentity procedure(\"\u7d50\u679c\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\")\u3067\u3059\u304c\u3001\u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u306f\"\u7d50\u679c\u306b5\u3092\u304b\u3051\u308b\u3001\u305d\u306e\u307e\u307e\u8fd4\u3059\"\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u6b21\u3067\u306f\u3001\"\u7d50\u679c\u306b4\u3092\u304b\u3051\u308b\u3001\u7d50\u679c\u306b5\u3092\u304b\u3051\u308b\u3001\u305d\u306e\u307e\u307e\u8fd4\u3059\"\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u6700\u7d42\u7684\u306bfact-cps 0\u306e\u7d50\u679c\u306b\"1,2,3,4,5\u3092\u9806\u756a\u306b\u304b\u3051\u308b\u3001\u305d\u306e\u307e\u307e\u8fd4\u3059\"\u3068\u3044\u3046\u6307\u793a\u66f8\u304cprocedure\u3068\u3057\u3066\u308f\u305f\u3063\u3066\u3044\u307e\u3059\u3002\n;;; Continuation passing in action\n;; Want to return the result of fact-cps 5\n(fact-cps 5 (lambda (x) x))\n;; Want to multiply the result of fact-cps 4 with 5, and return\n(fact-cps 4 (lambda (x) ((lambda (x) x) (* 5 x))))\n;; Want to multiply the result of fact-cps 3 with 4 and 5, and return\n(fact-cps 3 (lambda (x) ((lambda (x) ((lambda (x) x) (* 5 x))) (* 4 x))))\n;; Want to multiply the result of fact-cps 2 with 3, 4, and 5, and return\n(fact-cps 2 (lambda (x) ((lambda (x) ((lambda (x) ((lambda (x) x) (* 5 x))) (* 4 x))) (* 3 x))))\n;; Want to multiply the result of fact-cps 1 with 2, 3, 4, and 5, and return\n(fact-cps 1 (lambda (x) ((lambda (x) ((lambda (x) ((lambda (x) ((lambda (x) x) (* 5 x))) (* 4 x))) (* 3 x))) (* 2 x))))\n;; Want to multiply the result of fact-cps 0 with 1, 2, 3, 4, and 5, and return\n(fact-cps 0 (lambda (x) ((lambda (x) ((lambda (x) ((lambda (x) ((lambda (x) ((lambda (x) x) (* 5 x))) (* 4 x))) (* 3 x))) (* 2 x))) (* 1 x))))\n\nfact-cps 0\u306fif\u5f0f\u304ctrue\u306b\u306a\u308a\u307e\u3059\u306e\u3067\u3001(cont 1)\u3001\u3064\u307e\u308a\u3001\u6e21\u3055\u308c\u305f\u6307\u793a\u66f8(procedure)\u30921\u306b\u9069\u7528\u305b\u3088\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3064\u307e\u308a\u3001\"1\u3092\u3068\u308b\u30011,2,3,4,5\u3092\u9806\u756a\u306b\u304b\u3051\u308b\u3001\u305d\u306e\u307e\u307e\u8fd4\u3059\"\u3068\u3044\u3046\u5f0f\u304c\u5b8c\u6210\u3057\u3066\u5b9f\u884c\u304c\u958b\u59cb\u3055\u308c\u307e\u3059\u3002\u5177\u4f53\u7684\u306b\u306f\u4e0b\u8a18\u306e\u69d8\u306b\u305f\u307e\u306d\u304e\u306e\u76ae\u3092\u3080\u304f\u3088\u3046\u306blambda\u3092\u5916\u304b\u3089\u3080\u3044\u3066\u3044\u304d\u307e\u3059\u3002\u6700\u7d42\u7684\u306b\u306f\"120\u3092\u3068\u308b\u3001\u305d\u306e\u307e\u307e\u8fd4\u3059\"\u3068\u3044\u3046\u5f0f\u306b\u306a\u308a\u3001120\u3068\u3044\u3046\u8a55\u4fa1\u7d50\u679c\u304c\u3067\u307e\u3059\u3002\n;;; Passed procedures are executed\n;; (cont 1)\n((lambda (x) ((lambda (x) ((lambda (x) ((lambda (x) ((lambda (x) ((lambda (x) x) (* 5 x))) (* 4 x))) (* 3 x))) (* 2 x))) (* 1 x))) 1)\n((lambda (x) ((lambda (x) ((lambda (x) ((lambda (x) ((lambda (x) x) (* 5 x))) (* 4 x))) (* 3 x))) (* 2 x))) (* 1 1))\n\n((lambda (x) ((lambda (x) ((lambda (x) ((lambda (x) ((lambda (x) x) (* 5 x))) (* 4 x))) (* 3 x))) (* 2 x))) 1)\n((lambda (x) ((lambda (x) ((lambda (x) ((lambda (x) x) (* 5 x))) (* 4 x))) (* 3 x))) (* 2 1))\n\n((lambda (x) ((lambda (x) ((lambda (x) ((lambda (x) x) (* 5 x))) (* 4 x))) (* 3 x))) 2)\n((lambda (x) ((lambda (x) ((lambda (x) x) (* 5 x))) (* 4 x))) (* 3 2))\n\n((lambda (x) ((lambda (x) ((lambda (x) x) (* 5 x))) (* 4 x))) 6)\n((lambda (x) ((lambda (x) x) (* 5 x))) (* 4 6))\n\n((lambda (x) ((lambda (x) x) (* 5 x))) 24)\n((lambda (x) x) (* 5 24))\n\n((lambda (x) x) 120)\n120\n\nScheme\u3067\u306f\u3053\u306econtinuation(\"\u8a08\u7b97\u7d50\u679c\u306b\u5bfe\u3057\u3066\u3001\u4eca\u5f8c\u3084\u308b\u3053\u3068\")\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u6349\u3048\u3066\u4fdd\u5b58\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u305d\u3046\u3067\u3059\u3002\u4f8b\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n;;; call/cc example\n;; define a variable\n(define c #f)\n\n;; set! c as continuation in following\n(+ 10 (* 3 (call/cc\n            (lambda (cont)\n              (set! c cont)\n              (cont 5)))))\n;; => 25\n\ncall/cc\u306f\u81ea\u5206\u306e\u5916\u5074\u306b\u3042\u308b\u5f0f\u3001\u3064\u307e\u308a\u3001(call/cc ...)\u306e\u7d50\u679c\u306b\u5bfe\u3057\u3066\u884c\u3046\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u308b\u8a08\u7b97\u3092\u6349\u3048\u307e\u3059\u3002\u81ea\u5206\u306e\u62ec\u5f27\u306e\u5916\u5074\u306b\u51fa\u3066\u3044\u3063\u3066\u3001\u6b8b\u308a\u306e\u8a08\u7b97\u3092\u304b\u304d\u3042\u3064\u3081\u3066\u304f\u308b\u308f\u3051\u3067\u3059\u306d\u3002\u4ed6\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u6982\u5ff5\u3068\u5927\u304d\u304f\u9055\u3063\u3066\u3044\u308b\u611f\u3058\u304c\u3057\u307e\u3059\u3002\u305d\u306e\u6b8b\u308a\u306e\u8a08\u7b97continuation(\u5b9f\u8cea\u306fprocedure)\u306fcall/cc\u306e\u5f15\u6570\u306b\u306a\u3063\u3066\u3044\u308bprocedure\u306b\u6e21\u3055\u308c\u307e\u3059(cont\u306b\u306a\u308a\u307e\u3059)\u3002\"\u305d\u306e\u6b8b\u308a\u306e\u8a08\u7b97(continuation)\"\u304c\u3001c\u3068\u7d50\u3073\u3064\u3051\u3089\u308c\u307e\u3059\u3002\u6b21\u306b\"\u305d\u306e\u6b8b\u308a\u306e\u8a08\u7b97(continuation)\"\u304c5\u306b\u9069\u7528\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u6642\u70b9\u3067\u4e0b\u8a18\u306elambda\u90e8\u5206\u306b5\u304c\u3064\u3063\u3053\u307e\u308c\u3066\u5b9f\u884c\u3055\u308c\u308b\u611f\u3058\u3067\u3057\u3087\u3046\u304b\u3002call/cc\u306f\u81ea\u5206\u306e\u5916\u5074\u306b\u3042\u308b\u6b8b\u308a\u306e\u8a08\u7b97\u3092\u6301\u3063\u3066\u3044\u3063\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u3001\u3053\u306e\u5916\u5074\u306b\u306f\u306a\u306b\u3082\u306a\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u306e\u3067\u300125\u304c\u51fa\u3066\u8a08\u7b97\u7d42\u4e86\u3067\u3059\u3002\n(cont 5)\n((lambda (x) (+ 10 (* 3 x))) 5)\n(+ 10 (* 3 5))\n25\n\n\u304a\u3082\u3057\u308d\u3044\u306e\u306fc\u306b\u6349\u3048\u3089\u308c\u3066\u3044\u308b\u3001\"\u6b8b\u308a\u306e\u8a08\u7b97(continuation)\"\u3092\u9069\u7528\u3057\u3066\u307f\u305f\u5834\u5408\u3067\u3059\u30023\u3068\u3044\u3046\u5024\u306b\"\u3053\u306e\u6b8b\u308a\u306e\u8a08\u7b97\"\u3092\u9069\u7528\u3059\u308b\u3068\u4e88\u60f3\u901a\u308a3\u500d\u3057\u306610\u3092\u8db3\u3057\u306619\u306b\u306a\u308a\u307e\u3059\u3002\n(c 3)\n;; => 19\n\n\u3057\u304b\u3057\u3001\u305d\u306e\u307e\u308f\u308a\u306b\u66f4\u306b\u5f0f\u304c\u3042\u3063\u305f\u5834\u5408\u306f\u7121\u8996\u3055\u308c\u3066\u3084\u3063\u3071\u308a19\u306b\u306a\u308a\u307e\u3059\u3002\u306a\u305c\u306a\u3089\u30013\u3068\u3044\u3046\u5024\u306b\u5bfe\u3059\u308b\"\u6b8b\u308a\u306e\u8a08\u7b97\"\u306f\u3001\"3\u500d\u3057\u306610\u3092\u8db3\u3059\"\u3060\u3051\u3060\u304b\u3089\u3067\u3059\u3002\u8a08\u7b97\u3092\u6a2a\u53d6\u308a\u3057\u3066\u30aa\u30ec\u30aa\u30ec\u7d50\u672b\u3092\u62bc\u3057\u4ed8\u3051\u3066\u3044\u308b\u308f\u3051\u3067\u3059\u306d\u3002\n(+ 3 (* 99 (c 3)))\n;; => 19\n\ncontinuation\u3092\u9069\u7528\u3059\u308b\u524d\u306b\u3042\u308b\u3082\u306e\u306f\u5148\u306b\u8a55\u4fa1\u3055\u308c\u307e\u3059\u306e\u3067\u5f71\u97ff\u3092\u53d7\u3051\u307e\u305b\u3093\u3002\u4e0b\u8a18\u3067\u306f9\u304c\u8a08\u7b97\u3055\u308c\u305f\u6642\u70b9\u3067\"\u6b8b\u308a\u306e\u8a08\u7b97\"\u306f\u3001\"3\u500d\u3057\u306610\u3092\u8db3\u3059\"\u3060\u3051\u306b\u306a\u3063\u3066\u300137\u3068\u306a\u308a\u307e\u3059\u3002\n(+ 3 (* 99 (c (* 3 3))))\n;; => 37\n\n\u3053\u308c\u306e\u4f7f\u3044\u9053\u306f\u3001\u3001\u8cc7\u6599\u3067\u306fmulti-thread\u3082\u3069\u304d(?)\u3092\u4f5c\u6210\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u304c\u3001\u6b63\u76f4\u5341\u5206\u7406\u89e3\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n\u7dcf\u62ec\nLisp\u306e\u8056\u5730MIT\u3067\u7c21\u7565\u7248SICP(\u30b7\u30af\u30d4\u30fc)\u306e\u6388\u696d(6.037)\u3092\u53d7\u8b1b\u3057\u305f\u306e\u3067\u3001\u307e\u3068\u3081\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\u79c1\u306f\u666e\u6bb5R\u3050\u3089\u3044\u3057\u304b\u66f8\u304b\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u8a55\u4fa1\u306b\u304a\u3051\u308benvironment\u3068scope\u306e\u6982\u5ff5\u306e\u7406\u89e3\u304c\u9032\u3093\u3060\u306e\u306f\u6709\u7528\u3060\u3063\u305f\u3068\u601d\u3044\u307e\u3059\u3002\n\u8cc7\u6599\u306b\"Scheme is useful because code and data are just a quote away\"\u3068\u3044\u3046\u540d\u8a00\u304c\u3042\u308a\u307e\u3057\u305f(\u30b9\u30e9\u30a4\u30c9p17)\u3002\u30b3\u30fc\u30c9\u3068\u30c7\u30fc\u30bf\u8868\u73fe\u306e\u540c\u4e00\u6027(homoiconicity)\u3068\u3044\u3046\u3053\u3068\u306e\u7406\u89e3\u304c\u82e5\u5e72\u5f97\u3089\u308c\u3066(Lecture 4\u53c2\u7167)\u3001Lisp\u306e\u609f\u308a \u306b\u5c11\u3057\u8fd1\u3065\u3044\u305f\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n# SICP\u3068\u306f\u4f55\u304b\n\n![sicp_cover_small.png](https://qiita-image-store.s3.amazonaws.com/0/41237/4a95a66f-cc91-3ec3-5ae6-7173b1a2ed8e.png)\n\n[Structure and Interpretation of Computer Programs](http://www.amazon.com/Structure-Interpretation-Computer-Programs-Engineering/dp/0262510871/)\u3068\u3044\u3046\u53e4\u3081\u304b\u3057\u3044\u8868\u7d19\u306e\u672c\u3092\u3054\u5b58\u77e5\u3067\u3057\u3087\u3046\u304b? \u3053\u308c\u306f\u3082\u3068\u3082\u3068\u3001\u30de\u30b5\u30c1\u30e5\u30fc\u30bb\u30c3\u30c4\u5de5\u79d1\u5927\u5b66(Massachusetts Institute of Technologies; MIT)\u306e\u96fb\u6c17\u5de5\u5b66\u304a\u3088\u3073\u8a08\u7b97\u6a5f\u79d1\u5b66(Electrical Engineering & Computer Science; EECS)\u7cfb\u306e\u5b66\u90e8\u306e\u6388\u696d\u306e\u4e00\u672c\u76ee\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u3066\u3044\u305f\u540c\u540d\u306e\u6388\u696d\u304b\u3089\u767a\u751f\u3057\u305f\u6559\u79d1\u66f8\u3067\u3059\u3002\u6559\u79d1\u66f8\u306f\u7121\u6599\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n- HTML\u7248 http://mitpress.mit.edu/sicp/full-text/book/book.html\n- Kindle\u7248 https://github.com/jonathanpatt/sicp-kindle\n- PDF\u7248 https://github.com/sarabander/sicp-pdf\n- Texinfo\u7248 http://www.neilvandyke.org/sicp-texi/\n- \u548c\u6587PDF\u7248 https://github.com/minghai/sicp-pdf/\n\n\n\u30b3\u30fc\u30b9\u306b\u306f6.001\u3068\u3044\u3046\u756a\u53f7\u304c\u3064\u3051\u3089\u308c\u3066\u3044\u307e\u3057\u305f(\u7c73\u56fd\u306e\u5b66\u6821\u306e\u6388\u696d\u306f\u756a\u53f7\u304c\u4ed8\u3044\u3066\u3044\u3066\u6570\u5b57\u304c\u9ad8\u3044\u65b9\u304c\u3060\u3044\u305f\u3044\u96e3\u3057\u3044)\u3002MIT\u306e\u6388\u696d\u306fEECS\u304c6\u756a\u53f0\u3067\u30016.001-6.004\u304ccomputer programs, circuits and electronics, signals and systems, computation structures\u3060\u3063\u305f\u305d\u3046\u3067\u3059[(\u53c2\u8003)](http://tech.mit.edu/V125/N65/coursevi.html)\u30021986\u5e74(?)\u306e\u6388\u696d\u306e\u69d8\u5b50\u306f\u52d5\u753b\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059[(MIT OCW SICP 1986)](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/video-lectures/) \u3002Lisper\u306a\u3089\u3070\u9ed2\u677f\u3067\u62ec\u5f27\u306e\u5bfe\u5fdc\u3092\u3042\u308f\u305b\u308b(\u3068\u304d\u3069\u304d\u9593\u9055\u3048\u308b)\u8b1b\u5e2b\u306e\u59ff\u306b\u5fc3\u304c\u9707\u3048\u308b\u3053\u3068\u3046\u3051\u3042\u3044\u3067\u3059\u3002\u96e3\u89e3\u306a\u3053\u3068\u3067\u77e5\u3089\u308c\u308b\u540d\u7269\u6388\u696d\u3060\u3063\u305f\u3088\u3046\u306a\u306e\u3067\u3059\u304c\u3001\u4ed6\u306e\u5c02\u653b\u3060\u3051\u3069\u4e00\u500b\u3060\u3051computer science\u306e\u6388\u696d\u3092\u53d7\u3051\u3066\u307f\u3088\u3046\u3068\u76ee\u3092\u8f1d\u304b\u305b\u3066\u304d\u305f\u5b66\u751f\u306e\u5fc3\u304c\u6298\u308c\u308b\u3068\u304b\u3001\u6388\u696d\u306e\u518d\u7de8\u6210\u3060\u304b\u306e\u7406\u7531\u30672007\u5e74\u3067\u7d42\u308a\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u3088\u3046\u3067\u3059[(\u53c2\u8003)](http://www.cs.berkeley.edu/~bh/sicp.html)\u3002\n\n\n\u305d\u306e\u5f8c\u306f\u3001computer science\u306e\u6388\u696d\u306e\u4e00\u672c\u76ee\u306f[Introduction to Computer Science and Programming](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/) \u3068\u3044\u3046\u6388\u696d\u306b\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002edX\u3067\u3082\u540c\u3058\u8b1b\u5e2b\u304c [\u6388\u696d](https://www.edx.org/course/introduction-computer-science-mitx-6-00-1x-0#.VLiavMaRaS0) \u3092\u3084\u3063\u3066\u3044\u307e\u3059\u3002\u4f7f\u7528\u8a00\u8a9e\u306fPython\u306b\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002[\u30b7\u30e9\u30d0\u30b9](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00sc-introduction-to-computer-science-and-programming-spring-2011/Syllabus)\u3092\u898b\u308b\u3068\u3053\u308c\u306f\u3053\u308c\u3067\u7d50\u69cb\u96e3\u3057\u305d\u3046\u306a\u611f\u3058\u3082\u3057\u307e\u3059\u3002\n\n\n\u79c1\u306f\u30dc\u30b9\u30c8\u30f3\u5357\u90e8\u306e\u4ed6\u306e\u5927\u5b66\u9662\u3067(\u9ad8\u9f62)\u5b66\u751f\u3092\u3057\u3066\u3044\u308b\u306e\u3067\u3001MIT\u3067SICP\u306e\u6388\u696d\u306b\u6f5c\u308a\u305f\u3044\u306a~\u3068\u601d\u3063\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u8abf\u3079\u305f\u3089\u4e0a\u8a18\u306e\u3088\u3046\u306a\u7d4c\u7def\u3092\u77e5\u3063\u3066\u3001\u5927\u5909\u304c\u3063\u304b\u308a\u3057\u3066\u304a\u308a\u307e\u3057\u305f\u3002\u3068\u3001\u3001\u601d\u3044\u304d\u3084\u3001[6.037 SICP](http://web.mit.edu/alexmv/6.037/)\u3068\u3057\u3066\u3001\u51ac\u671f\u9593(\u7c73\u56fd\u306e\u5927\u5b66/\u5927\u5b66\u9662\u3067\u306f9-12\u6708\u304cFall semester\u30012-5\u6708\u304cSpring semester\u3068\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u591a\u3044?)\u306e\u7279\u5225\u6388\u696d(4\u90318\u30b3\u30de; \u3082\u3068\u3082\u3068\u306e[\u6388\u696d\u306f26\u30b3\u30de](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/calendar/))\u3068\u3057\u3066\u3001\u7121\u7406\u77e2\u7406\u5fa9\u6d3b\u3057\u3066\u3044\u308b(\u30b3\u30fc\u30b9\u306e\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u304c6.001-zombies!)\u306e\u3092\u767a\u898b\u3002\u6700\u521d\u3053\u308c\u3067\u5358\u4f4d\u7533\u8acb(\u63d0\u643a\u3057\u3066\u3044\u308b\u5927\u5b66\u540c\u58eb\u3060\u3068\u3067\u304d\u308b)\u3057\u3088\u3046\u304b\u3068\u8a66\u307f\u307e\u3057\u305f\u304c\u3001\u5b66\u90e8\u306e\u6388\u696d\u3058\u3083\u3060\u3081\u3068\u3044\u308f\u308c\u305f\u306e\u3067\u3001\u8b1b\u5e2b\u306b\u983c\u307f\u3053\u3093\u3067\u30e2\u30b0\u30ea\u5b66\u751f\u3068\u3057\u3066\u53d7\u8b1b\u3055\u305b\u3066\u3082\u3089\u3046\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u30022007\u5e74\u306e\u6388\u696d\u306e\u7d42\u4e86\u3092\u5606\u3044\u305f6.001\u306e\u904e\u53bb\u306eteaching assistant\u305f\u3061\u304c2009\u5e74\u3050\u3089\u3044\u304b\u3089\u5fa9\u6d3b\u3055\u305b\u305f\u3068\u3044\u3046\u3053\u3068\u306e\u3088\u3046\u3067\u3059\u3002\n\n\u4e0b\u8a18\u306f\u305d\u306e\u30b5\u30de\u30ea\u30fc\u3067\u3059\u3002\u79c1\u81ea\u8eab\u306f\u8a08\u7b97\u6a5f\u79d1\u5b66\u306e\u4eba\u9593\u3067\u3082\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u5de5\u5b66\u306e\u4eba\u9593\u3067\u3082\u306a\u304f\u3001\u4e3b\u306b\u66f8\u304f\u306e\u306fR\u3068Emacs Lisp\u3050\u3089\u3044\u3067\u3059\u306e\u3067\u3001\u5185\u5bb9\u7684\u306b\u4e0d\u5341\u5206\u3001\u4e0d\u6b63\u78ba\u306a\u90e8\u5206\u3082\u3042\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n# Lecture 1: Syntax of Scheme, procedural abstraction, and recursion\n\nScheme\u306e\u57fa\u672c\u7684\u306a\u6587\u6cd5\u306b\u95a2\u3057\u3066\u3068\u3001\u518d\u5e30(recursion)\u3068iteration\u306e\u9055\u3044\u307f\u305f\u3044\u306a\u8a71\u3057\u3002\u307e\u308f\u308a\u306e\u5b66\u751f\u304c\u82e5\u3044(\u5b66\u90e8\u306e\u4e00\u5e74\u751f\u3068\u304b\u304c\u307b\u3068\u3093\u3069\u3063\u307d\u3044\u306e\u3067\u5e74\u9f62\u306f\u79c1\u306e\u534a\u5206\u3050\u3089\u3044\u306a\u306f\u305a)\u3002\u5f97\u610f\u306a\u8a00\u8a9e\u306f?\u3068\u30af\u30e9\u30b9\u306b\u805e\u3044\u3066\u3044\u3066\u3001Python, Matlab, C\u3068\u304b\u307f\u3093\u306a\u7b54\u3048\u3066\u3044\u308b\u306a\u304b\u3067\u3001\u3072\u3068\u308a\u3060\u3051\"R\"\u3068\u3044\u3063\u305f\u3089\u3001\u3048\u3063?\u3068\u805e\u304d\u304b\u3048\u3055\u308c\u307e\u3057\u305f(\u79c1\u306e\u767a\u97f3\u304c\u60aa\u3044\u3060\u3051?)\u3002\n\n\u74b0\u5883\u306fDrRacket\u3092\u52e7\u3081\u3066\u3044\u307e\u3057\u305f\u3002\u306a\u306e\u3067\u3001Scheme\u3068\u3044\u3046\u304bRacket\u3067\u3059\u306d\u3002DrRacket\u304c\u4e00\u756a\u74b0\u5883\u8a2d\u5b9a\u304c\u697d\u3060\u304b\u3089\u306e\u3088\u3046\u3067\u3057\u305f\u3002\u307e\u3042\u3001\u958b\u767a\u74b0\u5883\u8a2d\u5b9a\u3067\u3053\u3051\u308b\u3068\u3084\u308b\u6c17\u304c\u305d\u304c\u308c\u307e\u3059\u304b\u3089\u306d\u3002\n\n\u3053\u306e\u56de\u306e\u6388\u696d\u5185\u5bb9\u306f\u521d\u6b69\u7684\u3067\u3057\u305f\u3002\u518d\u5e30\u7684\u306a\u8a08\u7b97\u3068\u7e70\u308a\u8fd4\u3057\u7684(iterative\u306e\u8a33\u306e\u3064\u3082\u308a)\u306a\u8a08\u7b97\u3092\u5bfe\u6bd4\u3059\u308b\u306e\u306b[Guile Scheme](http://www.gnu.org/software/guile/) \u304c\u4fbf\u5229\u3067\u3042\u308b\u306e\u3092\u767a\u898b\u3057\u307e\u3057\u305f\u3002REPL\u3067 ,trace (fact-recur 5)\u3068\u304b\u3084\u308b\u3068\u8a08\u7b97\u7d4c\u904e\u3092\u8868\u793a\u3057\u3066\u304f\u308c\u307e\u3059(\u6700\u521d\u306e,\u306f\u7279\u5225REPL\u30b3\u30de\u30f3\u30c9\u306e\u8b58\u5225\u7528\u3067\u5fc5\u8981)\u3002\n\n\u6df1\u5ea6\u304c\u6df1\u304f\u306a\u3063\u3066\u3044\u308b(SICP\u672c\u66f0\u304f\u4e09\u89d2\u5f62\u3092\u611f\u3058\u3088!)\u3068stack\u3092\u6d88\u8cbb\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002accumulator\u3092\u4f7f\u3063\u3066\u3001iterative\u306b\u8a08\u7b97\u3059\u308b\u3068\u6df1\u5ea6\u304c\u6df1\u304f\u306a\u3089\u305astack\u304c\u4e00\u500b\u3067\u3059\u3093\u3067\u3044\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059(SICP\u672c\u66f0\u304fiteration\u306f\u56db\u89d2\u3044!)\u3002trace\u306fRacket\u3067\u3082[\u4e00\u5fdc\u3042\u308b](http://docs.racket-lang.org/reference/debugging.html)\u306e\u3067\u3059\u304c\u3001\u7d4c\u904e\u8868\u793a\u304c\u3044\u307e\u3044\u3061\u3067\u3001\u308f\u304b\u308a\u3084\u3059\u304f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n```scheme\n;;; Factorial (linear recursion)\n(define (fact-recur n)\n  (if (zero? n)\n      1\n      (* n (fact-recur (- n 1)))))\n\n;; scheme@(guile-user)> ,trace (fact-recur 5)\n;; trace: |  (#<procedure 105a4d480> #(#<directory (guile-user) 104467c60> #f))\n;; trace: |  #(#<directory (guile-user) 104467c60> fact-recur)\n;; trace: (#<procedure 105a56a60 at <current input>:818:7 ()>)\n;; trace: (fact-recur 5)\n;; trace: |  (fact-recur 4)\n;; trace: |  |  (fact-recur 3)\n;; trace: |  |  |  (fact-recur 2)\n;; trace: |  |  |  |  (fact-recur 1)\n;; trace: |  |  |  |  |  (fact-recur 0)\n;; trace: |  |  |  |  |  1\n;; trace: |  |  |  |  1\n;; trace: |  |  |  2\n;; trace: |  |  6\n;; trace: |  24\n;; trace: 120\n\n;;; Factorial (iteration)\n(define (fact-iter-helper n acc)\n    (if (zero? n)\n        acc\n        (fact-iter-helper (- n 1) (* acc n))))\n(define (fact-iter n)\n  (fact-iter-helper n 1))\n\n;; scheme@(guile-user)> ,trace (fact-iter 5)\n;; trace: |  (#<procedure 1056fc340> #(#<directory (guile-user) 104467c60> #f))\n;; trace: |  #(#<directory (guile-user) 104467c60> fact-iter)\n;; trace: (#<procedure 105702860 at <current input>:1042:7 ()>)\n;; trace: (fact-iter 5)\n;; trace: (fact-iter-helper 5 1)\n;; trace: (fact-iter-helper 4 5)\n;; trace: (fact-iter-helper 3 20)\n;; trace: (fact-iter-helper 2 60)\n;; trace: (fact-iter-helper 1 120)\n;; trace: (fact-iter-helper 0 120)\n;; trace: 120\n```\n\n# Lecture 2: Data abstractions, higher order procedures, symbols, and quotation\n\n\u3053\u308c\u3082\u3001\u307e\u3060\u57fa\u672c\u7684\u306a\u5185\u5bb9\u3002\u95a2\u6570\u306e\u5165\u51fa\u529b\u306e\u578b\u3001\u9ad8\u968e\u95a2\u6570\u306b\u3088\u308b\u4f3c\u305f\u51e6\u7406\u306e\u62bd\u8c61\u5316\u3001cons cell\u306b\u3088\u308b\u30c7\u30fc\u30bf\u53ce\u7d0d\u3068car/cdr/cons\u306e\u95a2\u9023\u306a\u3069\u3002symbol\u3068quote\u3001eq?\u306b\u3088\u308bsymbol\u306e\u6bd4\u8f03\u306a\u3069\u3002\n\n\u9014\u4e2d\u306erecitation(\u30ec\u30af\u30c1\u30e3\u30fc\u5f62\u5f0f\u306e\u8b1b\u7fa9\u306e\u5185\u5bb9\u3092\u518d\u5ea6\u5c0f\u30b0\u30eb\u30fc\u30d7\u306b\u308f\u304b\u308c\u3066\u554f\u984c\u3092\u3084\u308a\u306a\u304c\u3089\u5fa9\u7fd2\u3059\u308b\u307f\u305f\u3044\u306a\u611f\u3058)\u3067\u306f\u3001map, filter, reverse, fold\u306a\u3069\u3044\u308f\u3086\u308b\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u826f\u304f\u51fa\u3066\u304f\u308b\u95a2\u6570\u306e\u66f8\u304d\u304b\u305f\u307f\u305f\u3044\u306a\u5185\u5bb9\u3002\n\nreverse\u306fcons\u304c\u30ea\u30b9\u30c8\u306e\u982d\u306b\u3082\u306e\u3092\u4ed8\u3051\u52a0\u3048\u308b\u306e\u3067\u3001iteration\u3067\u66f8\u3044\u305f\u65b9\u304c\u30b7\u30f3\u30d7\u30eb\u3002\u901a\u5e38\u306e\u518d\u5e30\u3067\u66f8\u304f\u3068\u30ea\u30b9\u30c8\u306e\u6700\u5f8c\u306b\u3082\u306e\u3092\u4ed8\u3051\u52a0\u3048\u308bappend\u304c\u5fc5\u8981\u306b\u306a\u3063\u3066\u52b9\u7387\u304c\u60aa\u3044\u307f\u305f\u3044\u3002\n\n```\n(define (reverse-rec lst)\n  (cond\n   [(null? lst) '()]\n   [#t (append (reverse-rec (cdr lst)) (list (car lst)))]))\n\n;; scheme@(guile-user)> ,trace (reverse-rec (iota 4))\n;; trace: |  (#<procedure 103784a00> #(#<directory (guile-user) 102cd8c60> #f #f))\n;; trace: |  #(#<directory (guile-user) 102cd8c60> reverse-rec iota)\n;; trace: (#<procedure 1037c09e0 at <current input>:93:7 ()>)\n;; trace: |  (iota 4)\n;; trace: |  (0 1 2 3)\n;; trace: (reverse-rec (0 1 2 3))\n;; trace: |  (reverse-rec (1 2 3))\n;; trace: |  |  (reverse-rec (2 3))\n;; trace: |  |  |  (reverse-rec (3))\n;; trace: |  |  |  |  (reverse-rec ())\n;; trace: |  |  |  |  ()\n;; trace: |  |  |  |  (append () (3))\n;; trace: |  |  |  |  (3)\n;; trace: |  |  |  (3)\n;; trace: |  |  |  (append (3) (2))\n;; trace: |  |  |  (3 2)\n;; trace: |  |  (3 2)\n;; trace: |  |  (append (3 2) (1))\n;; trace: |  |  (3 2 1)\n;; trace: |  (3 2 1)\n;; trace: |  (append (3 2 1) (0))\n;; trace: |  (3 2 1 0)\n;; trace: (3 2 1 0)\n\n(define (reverse-iter lst)\n  (define (helper acc lst)\n    (cond\n     [(null? lst) acc]\n     [#t (helper (cons (car lst) acc)\n                 (cdr lst))]))\n  (helper '() lst))\n\n;; scheme@(guile-user)> ,trace (reverse-iter (iota 4))\n;; trace: |  (#<procedure 103270a40> #(#<directory (guile-user) 102cd8c60> #f #f))\n;; trace: |  #(#<directory (guile-user) 102cd8c60> reverse-iter iota)\n;; trace: (#<procedure 103c549a0 at <current input>:277:7 ()>)\n;; trace: |  (iota 4)\n;; trace: |  (0 1 2 3)\n;; trace: (reverse-iter (0 1 2 3))\n;; trace: (3 2 1 0)\n```\n\n\u52c9\u5f37\u306b\u306a\u3063\u305f\u306e\u306ffold\u95a2\u6570\u3002\u4ee5\u524d\u3001[Programming in Haskell](http://www.cs.nott.ac.uk/~gmh/book.html)\u306e\u8aac\u660e\u304c\u79c0\u9038\u3068\u3069\u3053\u304b\u306b\u66f8\u3044\u3066\u3042\u3063\u305f\u306e\u3067\u3001\u8aad\u3093\u3067\u307f\u305f\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u304c\u3001Haskell\u304c\u826f\u304f\u308f\u304b\u3089\u306a\u3044\u306e\u3068\u3042\u3044\u307e\u3063\u3066\u3088\u304f\u308f\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002Scheme\u3067\u5b9f\u969b\u66f8\u3044\u3066\u307f\u308b\u3068\u826f\u304f\u308f\u304b\u308a\u307e\u3057\u305f\u3002\n\n\u307e\u305a\u306f\u3001reduce\u3068\u3082\u547c\u3070\u308c\u3066\u3088\u308a\u4e00\u822c\u7684\u3063\u307d\u3044fold left\u3002\u521d\u671f\u5024\u304b\u3089\u59cb\u3081\u3066\u5de6\u304b\u3089\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u3092\u4e0e\u3048\u3089\u308c\u305f\u95a2\u6570\u3067\u51e6\u7406\u3057\u3066\u3001accumulator\u306b\u8caf\u3081\u3066\u3044\u304d\u307e\u3059\u3002\u753b\u50cf\u306fWikipedia\u3088\u308a\u3002\n\n![foldl](http://upload.wikimedia.org/wikipedia/commons/5/5a/Left-fold-transformation.png \"foldl\")\n\n\u51e6\u7406\u306e\u9806\u756a\u304c\u982d(\u5de6)\u304b\u3089\u306a\u306e\u3067iteration\u3068\u3057\u3066\u3059\u3050\u66f8\u3051\u308b\u306e\u3067\u3001\u8a08\u7b97\u52b9\u7387\u304c\u826f\u3044\u3088\u3046\u3067\u3059\u3002\u4e0b\u8a18\u306e\u4f8b\u3067\u306f\u4e09\u89d2\u5f62\u306b\u306a\u3089\u305a\u306b\u30b9\u30bf\u30c3\u30af\u304c\u4e00\u5b9a\u3067\u3059\u3093\u3067\u3044\u308b\u3068\u3053\u308d\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n\n```scheme\n;;; fold left\n(define (foldl f init lst)\n  (define (helper lst acc)\n    (if (null? lst)\n        acc\n        (helper (cdr lst) (f acc (car lst)))))\n  ;;\n  (helper lst init))\n\n;; scheme@(guile-user)> ,trace (foldl + 0 (iota 5))\n;; trace: |  (#<procedure 108c46820> #(#<directory (guile-user) 107ce6c60> #f #f #f))\n;; trace: |  #(#<directory (guile-user) 107ce6c60> foldl + iota)\n;; trace: (#<procedure 108c4b160 at <current input>:1503:7 ()>)\n;; trace: |  (iota 5)\n;; trace: |  (0 1 2 3 4)\n;; trace: (foldl #<procedure + (#:optional _ _ . _)> 0 (0 1 2 3 4))\n;; trace: |  (+ 0 0)\n;; trace: |  0\n;; trace: |  (+ 0 1)\n;; trace: |  1\n;; trace: |  (+ 1 2)\n;; trace: |  3\n;; trace: |  (+ 3 3)\n;; trace: |  6\n;; trace: |  (+ 6 4)\n;; trace: |  10\n;; trace: 10\n```\n\nfold right\u306fClojure\u306b\u306a\u3044\u306e\u3067\u3088\u304f\u77e5\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u30ea\u30b9\u30c8\u306e\u521d\u671f\u5024\u3092\u53f3\u7aef\u306b\u6301\u3063\u3066\u304d\u3066\u3001\u672b\u5c3e\u5074(\u53f3)\u304b\u3089\u30ea\u30b9\u30c8\u3092\u305f\u305f\u3093\u3067\u3044\u304d\u307e\u3059\u3002\u753b\u50cf\u306fWikipedia\u3088\u308a\u3002\n\n![foldr](http://upload.wikimedia.org/wikipedia/commons/3/3e/Right-fold-transformation.png \"foldr\")\n\n\u5b9f\u969b\u306e\u5b9f\u884c\u3068\u3057\u3066\u306f\u30ea\u30b9\u30c8\u306e\u982d\u5074\u304b\u3089\u518d\u5e30\u3067\u51e6\u7406\u3092\u307e\u305f\u305b\u3066\u304a\u3044\u3066\u3001\u6700\u5f8c\u5c3e\u306b\u9054\u3057\u305f\u3089\u521d\u671f\u5024\u3068\u6700\u5f8c\u5c3e\u306e\u5024\u3067\u95a2\u6570\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\u3042\u3068\u306f\u3001\u53f3\u5074\u304b\u3089\u51e6\u7406\u5f85\u3061\u306e\u51e6\u7406\u3092\u3059\u3059\u3081\u3066\u3044\u3051\u3070OK\u3002\u518d\u5e30\u306e\u51e6\u7406\u5f85\u3061\u304c\u767a\u751f\u3059\u308b\u306e\u3067\u4e09\u89d2\u5f62\u306btrace\u304c\u4f38\u3073\u3066\u3044\u304f\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n```scheme\n;;; fold right\n(define (foldr f init lst)\n  (if (null? lst)\n      init\n      (f (car lst)\n         (foldr f init (cdr lst)))))\n\n;; scheme@(guile-user)> ,trace (foldr + 0 (iota 5))\n;; trace: |  (#<procedure 108c89c80> #(#<directory (guile-user) 107ce6c60> #f #f #f))\n;; trace: |  #(#<directory (guile-user) 107ce6c60> foldr + iota)\n;; trace: (#<procedure 108c8d900 at <current input>:1220:7 ()>)\n;; trace: |  (iota 5)\n;; trace: |  (0 1 2 3 4)\n;; trace: (foldr #<procedure + (#:optional _ _ . _)> 0 (0 1 2 3 4))\n;; trace: |  (foldr #<procedure + (#:optional _ _ . _)> 0 (1 2 3 4))\n;; trace: |  |  (foldr #<procedure + (#:optional _ _ . _)> 0 (2 3 4))\n;; trace: |  |  |  (foldr #<procedure + (#:optional _ _ . _)> 0 (3 4))\n;; trace: |  |  |  |  (foldr #<procedure + (#:optional _ _ . _)> 0 (4))\n;; trace: |  |  |  |  |  (foldr #<procedure + (#:optional _ _ . _)> 0 ())\n;; trace: |  |  |  |  |  0\n;; trace: |  |  |  |  (+ 4 0)\n;; trace: |  |  |  |  4\n;; trace: |  |  |  (+ 3 4)\n;; trace: |  |  |  7\n;; trace: |  |  (+ 2 7)\n;; trace: |  |  9\n;; trace: |  (+ 1 9)\n;; trace: |  10\n;; trace: (+ 0 10)\n;; trace: 10\n```\n\n\u3053\u306e\u4f8b\u3067\u306fleft\u3067\u3082right\u3067\u3082\u52a0\u7b97\u306f\u9806\u756a\u304c\u95a2\u4fc2\u306a\u3044\u306e\u3067\u3001\u7d50\u679c\u306f\u540c\u3058\u3067\u3059\u3002\u7d50\u679c\u304c\u540c\u3058\u5834\u5408\u306ffold left (reduce)\u306e\u65b9\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u3057\u3001\u8a08\u7b97\u52b9\u7387\u3082\u826f\u3044\u306e\u3067\u3088\u3055\u305d\u3046\u3067\u3059\u3002\u305f\u3060\u3001\u8a08\u7b97\u306b\u3088\u3063\u3066\u306fright fold\u3067\u306a\u3044\u3068\u3067\u304d\u306a\u3044\u3082\u306e\u3082\u3042\u308b\u3088\u3046\u3067\u3059\u3002[\u3053\u306ecode IQ\u306e\u554f\u984c](https://codeiq.jp/ace/egi/q1281#inline_content)(\u3061\u3089\u898b\u3067\u898b\u3089\u308c\u307e\u3059)\u306f\u3001\u5206\u6570\u306e\u5206\u6bcd\u306e\u53f3\u5074\u304b\u3089\u8a08\u7b97\u304c\u3059\u3059\u3080\u306e\u3067\u3001\u307e\u3055\u306bfold right\u304c\u8868\u73fe\u306b\u826f\u3044\u3088\u3046\u3067\u3059\u3002\u79c1\u306ffold right\u3092\u7406\u89e3\u3057\u3066\u3044\u306a\u3044\u72b6\u614b\u3067\u3084\u3063\u305f\u3089\u3001reverse\u3092\u4f7f\u3063\u3066\u30ea\u30b9\u30c8\u3092\u53cd\u8ee2\u3057\u3066\u5148\u982d\u304b\u3089\u51e6\u7406\u3059\u308b\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f(\u3064\u307e\u308a\u3001\u53f3\u304b\u3089\u51e6\u7406\u3057\u305f\u65b9\u304c\u697d)\u3002\u3061\u306a\u307f\u306b\u3001Haskell\u3067\u306f\u9045\u5ef6\u8a55\u4fa1\u306e\u95a2\u4fc2\u3067foldr\u304c\u3088\u308a\u4f7f\u3044\u3084\u3059\u3044\u3089\u3057\u3044\u3067\u3059([\u53c2\u8003](https://www.haskell.org/haskellwiki/Fold))\u3002\n\n\n# Lecture 3: Mutation, and the environment model\n\n3\u65e5\u76ee\u306b\u3057\u3066\u8b1b\u5e2b\u305f\u3061\u304cSICP\u3092\u30b7\u30af\u30d4\u30fc\u3068\u8aad\u3093\u3067\u3044\u308b\u306e\u306b\u6c17\u3065\u3044\u3066\u885d\u6483\u3092\u3046\u3051\u307e\u3057\u305f\u3002sick pee\u307f\u305f\u3044\u3067\u6c17\u6301\u60aa\u3044\u3067\u3059\u304c\u3001\u30b7\u30af\u306a\u306e\u3067sick\u306b\u306f\u805e\u3053\u3048\u306a\u3044\u304b\u3002\n\n\u4e3b\u306bmutation\u306b\u3064\u3044\u3066\u3002Scheme\u3067\u306fset!(!\u306fbang\u3068\u547c\u3093\u3067\u3044\u305f)\u3067symbol\u306b\u95a2\u9023\u4ed8\u3051\u3089\u308c\u3066\u3044\u308b\u5024\u3092\u5909\u66f4\u3001set-car!\u3068set-cdr!\u3067cons cell\u306b\u3076\u3089\u4e0b\u304c\u3063\u3066\u3044\u308b\u5024\u3092\u5909\u66f4\u3067\u304d\u307e\u3059\u3002set!\u306f\u518d\u5ea6define\u3057\u305f\u307f\u305f\u3044\u306a\u611f\u3058\u306a\u306e\u3067\u308f\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u304c\u3001set-car!\u3068set-cdr!\u306fcons cell\u3092\u306e\u3053\u3057\u305f\u307e\u307e\u5909\u66f4\u304c\u8d77\u308b\u306e\u3067\u96e3\u89e3\u3002\u3053\u308c\u3092\u3046\u307e\u3044\u3053\u3068\u4f7f\u3046\u3053\u3068\u3067\u5faa\u74b0\u69cb\u9020\u306b\u306a\u3063\u3066\u3044\u308b\u7121\u9650\u30ea\u30b9\u30c8(\u3068\u3044\u3046\u306e\u304b\u4e0d\u660e\u3067\u3059\u304c)\u3092\u4f5c\u6210\u3057\u3066\u3001\u51e6\u7406A\u3068\u51e6\u7406B\u3092\u4ea4\u4e92\u306b\u884c\u3046\u3088\u3046\u306a\u4f8b\u3092\u51fa\u3057\u3066\u3044\u307e\u3057\u305f(\u4e0b\u8a18)\u3002\n\n```scheme\n(define mystery\n  (let ([step1 (lambda () 'flop)]\n        [step2 (lambda () 'flip)])\n    (let ([todo (list step1 step2)])\n      (set-cdr! (cdr todo) todo)\n      (lambda ()\n        (set! todo (cdr todo))\n        ((car todo))))))\n\n(mystery) ; => flip\n(mystery) ; => flop\n(mystery) ; => flip\n(mystery) ; => flop\n```\n\n\u3071\u3063\u3068\u898b\u3067\u306f\u306a\u306b\u304c\u304a\u3053\u3063\u3066\u3044\u308b\u306e\u304b\u308f\u304b\u308a\u306b\u304f\u3044\u3067\u3059\u304c\u3001\u307e\u305a\u3001symbol flop\u3092\u8fd4\u3059\u95a2\u6570\u3068symbol flip\u3092\u8fd4\u3059\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u30ea\u30b9\u30c8todo\u3068\u3057\u3066\u307e\u3068\u3081\u307e\u3059\u3002\u3053\u3053\u307e\u3067\u3067\u3001[ step1(flop) | (pointer to 2nd) ]\u3068\u3044\u3046cons cell\u3068[ step2(flip) | (empty) ]\u3068\u3044\u3046cons cell\u304c\u3064\u306a\u304c\u3063\u305f\u30ea\u30b9\u30c8\u304c\u51fa\u6765\u307e\u3059\u3002\u3053\u3053\u3067(cdr todo)\u3092\u884c\u306a\u3046\u3068\u4e8c\u500b\u76ee\u306econs cell\u304c\u5f97\u3089\u308c\u308b\u306e\u3067\u3001\u305d\u306econs cell\u306ecdr\u3064\u307e\u308aempty\u90e8\u5206\u3092todo\u81ea\u4f53\u3078\u306epointer\u3068\u3057\u3066mutation\u3057\u307e\u3059(set-cdr!)\u3002\u305d\u308c\u306b\u3088\u308a\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u4e8c\u500b\u76ee\u306econs cell\u306ecdr\u304c\u4e00\u500b\u76ee\u306econs cell\u306e\u5148\u982d\u3092\u6307\u3059\u5faa\u74b0\u69cb\u9020\u306b\u306a\u308a\u307e\u3059\u3002\n\n[ step1(flop) | (pointer to 2nd) ]->[ step2(flip) | (pointer to 1st) ]\n\ntodo\u3068\u3044\u3046symbol\u306f\u3053\u306e\u6642\u70b9\u3067\u306fflop cons cell\u306b\u7d50\u3073\u3064\u3044\u3066\u3044\u307e\u3059\u3002mystery\u95a2\u6570\u306f\u5b9f\u884c\u6642\u306bset!\u3067symbol todo\u304c\u6307\u3059cons cell\u3092\u4e00\u500b\u5f8c\u308d\u306b\u305a\u3089\u3057\u307e\u3059\u3002\u306a\u306e\u3067\u4e00\u56de\u76ee\u306e\u5b9f\u884c\u7d50\u679c\u306fflip\u306econs cell\u306ecar\u3001\u3064\u307e\u308a\u3001step2\u95a2\u6570\u304c\u5b9f\u884c\u3055\u308c\u3001symbol flip\u304c\u8fd4\u308a\u307e\u3059\u3002\u4e8c\u56de\u76ee\u306e\u5b9f\u884c\u3067\u306f\u518d\u5ea6symbol todo\u304c\u518d\u5b9a\u7fa9\u3055\u308c\u3066\u6b21\u306econs cell(\u6700\u521d\u306b\u623b\u308b)\u3092\u6307\u3059\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u305d\u306econs cell\u306ecar\u3001\u3064\u307e\u308a\u3001step1\u95a2\u6570\u304c\u5b9f\u884c\u3055\u308c\u3066\u3001symbol flop\u304c\u8fd4\u308a\u307e\u3059\u3002\n\n\nstack\u3084queue\u3068\u3044\u3063\u305f\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u3069\u3046\u3084\u3063\u3066cons cell\u3067\u8868\u73fe\u3059\u308b\u304b\u3068\u3044\u3046\u3088\u3046\u306a\u8a71\u3082\u3042\u308a\u307e\u3057\u305f([\u8cc7\u6599page 15-](http://web.mit.edu/alexmv/6.037/l3.pdf))\u3002stack\u306e\u65b9\u304c\u7c21\u5358\u306a\u3088\u3046\u3067\u3059\u3002queue\u306f\u4e00\u500b\u306econs cell\u3067\u30ea\u30b9\u30c8\u306e\u6700\u521d\u3068\u6700\u5f8c\u3078\u306epointer\u3092\u4e21\u65b9\u683c\u7d0d\u3059\u308b\u3068\u826f\u3044\u3088\u3046\u3067\u3057\u305f\u3002\n\nmutation\u3092\u5c0e\u5165\u3059\u308b\u3053\u3068\u3067\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306esubstitution model\u304b\u3089\u3001environmental model\u304c\u5fc5\u8981\u306b\u306a\u308b\u306e\u3060\u3068\u3044\u3046\u8a71\u3092\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u3044\u307e\u3044\u3061substitution model\u304c\u306a\u3093\u306e\u3053\u3068\u3060\u304b\u304c\u308f\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f([\u8cc7\u6599page 40-](http://web.mit.edu/alexmv/6.037/l3.pdf))\u3002\u3002\n\nenvironment\u3068\u306f\u540d\u524d(symbol)\u3068\u5024\u306e\u5bfe\u5fdc\u8868\u3067\u3042\u308bframe\u3068enclosing environment(\u89aaenvironment)\u3078\u306epointer\u304b\u3089\u306a\u308b\u6982\u5ff5\u3068\u306e\u3053\u3068\u3002cons cell\u3068\u3044\u3063\u305f\u30c7\u30fc\u30bf\u69cb\u9020\u306fenvironment\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u306f\u306a\u304f\u3001binding\u306f\u3042\u304f\u307e\u3067\u540d\u524d\u3068cons cell\u3078\u306epointer\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3060\u3051\u3068\u306e\u3053\u3068\u3067\u3057\u305f\u3002\u78ba\u304b\u306b\u305d\u3046\u3067\u306a\u3044\u3068\u3001\u540c\u3058\u30c7\u30fc\u30bf\u3092\u8907\u6570\u306eenvironment\u3067\u4f7f\u304a\u3046\u3068\u3059\u308b\u3068\u8907\u88fd\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u305d\u3046\u3067\u3059\u3002\n\nprocedure\u306e\u5b9a\u7fa9\u3067\u306f\"double bubble\"\u3068\u547c\u3076\u6982\u5ff5\u3092\u4f7f\u3063\u3066\u3044\u307e\u3057\u305f([\u8cc7\u6599p53](http://web.mit.edu/alexmv/6.037/l3.pdf))\u3002\u3053\u308c\u306flambda\u306b\u3088\u3063\u3066\u751f\u6210\u3055\u308c\u3066\u3001code pointer(\u5f15\u6570\u3092\u5b9a\u7fa9\u3059\u308bparameters\u3068\u51e6\u7406\u3092\u5b9a\u7fa9\u3059\u308bbody\u304b\u3089\u306a\u308b)\u3068environment pointer(\u540d\u524d\u306e\u5bfe\u5fdc\u8868\u3092\u6307\u3057\u3057\u3081\u3059)\u304b\u3089\u306a\u308b\u3068\u306e\u3053\u3068\u3067\u3057\u305f\u3002procedure\u306e\u540d\u524d\u3068\u3044\u3046\u306e\u306fframe\u3067\u540d\u524d\u3068\u306e\u5bfe\u5fdc\u3068\u3057\u3066\u4e8c\u6b21\u7684\u306b\u5b9a\u7fa9\u3055\u308c\u308b\u3082\u306e\u3067\u3001procedure\u81ea\u4f53\u306b\u306f\u540d\u524d\u3068\u3044\u3046\u6982\u5ff5\u306f\u306a\u3044\u3088\u3046\u3067\u3059\u3002procedure\u306e\u5b9f\u884c\u6642\u306b\u306f\u3001\u5f15\u6570\u3068\u5024\u306e\u5bfe\u5fdc\u8868\u306eframe\u3092\u6301\u3064environment\u304c\u4e00\u6642\u7684\u306b\u4f5c\u6210\u3055\u308c\u308b\u3053\u3068\u3067\u3001body\u306e\u4e2d\u306e\u5f15\u6570\u306b\u3042\u305f\u308b\u90e8\u5206\u304c\u89e3\u91c8\u53ef\u80fd\u306b\u306a\u308b\u3068\u306e\u3053\u3068\u3067\u3057\u305f\u3002\n\n\n# Lecture 4: Interpretation and evaluation\n\n4\u65e5\u76ee\u306b\u3057\u3066\u3044\u304d\u306a\u308aScheme\u3067Scheme evaluator (interpreter)\u3092\u66f8\u304f\u8a71\u3002\u3044\u304d\u306a\u308a\u30ec\u30d9\u30eb\u4e0a\u308a\u3059\u304e\u3002\u540c\u3058\u8a00\u8a9e\u81ea\u4f53\u306eevaluator\u3092\u66f8\u304f\u5834\u5408\u3092Meta-circular evaluator\u3068\u3044\u3046\u3088\u3046\u3067\u3059\u3002[Coursera\u306eProgramming Languages](https://www.coursera.org/course/proglang)([\u3082\u3057\u304f\u306f\u8b1b\u5e2b\u306eweb site](http://courses.cs.washington.edu/courses/cse341/13sp/))\u3067\u3001Racket\u3092\u4f7f\u3063\u3066\u540c\u69d8\u306a\u5185\u5bb9\u3092\u3084\u3063\u3066\u3044\u305f\u306e\u3067\u3001\u306a\u3093\u3068\u304b\u3064\u3044\u3066\u3044\u3051\u305f\u611f\u3058\u3002\u3053\u306eCoursera\u30b3\u30fc\u30b9\u306f\u975e\u5e38\u306b\u304a\u3059\u3059\u3081\u3067\u3059\u3002\u8a00\u8a9e\u3092\u3042\u3048\u3066SML, Racket, Ruby\u3068\u4e09\u7a2e\u985e\u4f7f\u3046\u3053\u3068\u3067\u3001\u7279\u5b9a\u306e\u8a00\u8a9e\u3067\u306f\u306a\u304f\u3001\u8a00\u8a9e\u30d1\u30e9\u30c0\u30a4\u30e0\u306a\u3069\u306b\u30d5\u30a9\u30fc\u30ab\u30b9\u3092\u3042\u3066\u3066\u3044\u307e\u3059\u3002\u3061\u306a\u307f\u306b\u3001\u540c\u6642\u671f\u306b\u3084\u3063\u3066\u3044\u305fedX\u306e [Introduction to Functional Programming](https://www.edx.org/course/introduction-functional-programming-delftx-fp101x)\u306f\u3042\u3048\u306a\u304f\u9014\u4e2d\u3067\u632b\u6298\u3057\u307e\u3057\u305f\u3002\n\n\u95a2\u4fc2\u306a\u3044\u3051\u3069\u6388\u696d\u306b\u3044\u308b\u9aea\u306e\u6bdb\u306e\u7247\u5074\u3060\u3051\u7dd1\u8272\u306e\u7537\u6027\u4e8c\u4eba\u7d44(\u30ab\u30c3\u30d7\u30eb?)\u304c\u3001\u306a\u305c\u304b\u3075\u305f\u308a\u3068\u3082\u88f8\u8db3\u3067\u3042\u308b\u3053\u3068\u306b\u6c17\u4ed8\u3044\u3066\u3001Emacs\u958b\u767a\u8005\u306e[Richard Stallman](http://en.wikipedia.org/wiki/Richard_Stallman)\u3092\u8f29\u51fa\u3057\u305fMIT\u306e\u30d2\u30c3\u30d4\u30fc\u6587\u5316\u534a\u7aef\u306a\u3044\u3002\u3002\u3068\u601d\u3044\u307e\u3057\u305f\u3002\u8b1b\u7fa9\u306fScheme\u3067\u66f8\u304fScheme\u306eevaluator (interpreter)\u3092\u8db3\u65e9\u306b\u8aac\u660e\u3057\u3066\u3044\u3066\u3001\u901f\u3059\u304e\u3066\u3064\u3044\u3066\u3044\u3051\u305a\u3002\u3002SICP\u306e\u8868\u793a\u306e\u7d75\u306b\u3082\u3042\u308beval\u3068apply\u306e\u8aac\u660e\u3092\u3057\u3066\u3044\u305f\u3088\u3046\u306b\u601d\u3044\u307e\u3059\u3002\u8ab2\u984c\u306f\u975e\u5e38\u306b\u52c9\u5f37\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u305d\u3061\u3089\u306b\u3064\u3044\u3066\u8a18\u8f09\u3057\u307e\u3059\u3002\n\n\u8ab2\u984c\u306f\u4e0e\u3048\u3089\u308c\u305f\u4e0d\u5b8c\u5168\u306ainterpreter\u3092\u88dc\u5b8c\u3059\u308b\u3068\u3044\u3046\u3082\u306e\u3002\u30b3\u30fc\u30c9\u306e\u6700\u521d\u306e\u65b9\u306b\u4e0b\u8a18\u307f\u305f\u3044\u306a\u8a18\u8ff0\u304c\u3084\u305f\u3089\u305a\u3089\u305a\u3089\u3042\u308a\u3002\u8a00\u8a9e\u74b0\u5883\u306fRacket\u306a\u306e\u3067\u3059\u304c\u3001Scheme R5RS\u306b\u3042\u305f\u308b\u90e8\u5206\u3060\u3051\u3092\u4f7f\u3046\u3068\u3044\u3046\u65b9\u91dd\u306a\u306e\u3067Racket\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u5b9a\u7fa9struct\u3092\u4f7f\u308f\u306a\u3044\u306e\u3067\u5197\u9577\u306b\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3057\u305f\u3002Racket\u3060\u3068struct\u4e00\u884c\u3067\u30c7\u30fc\u30bf\u69cb\u9020\u5b9a\u7fa9\u3001predicate\u3001selector\u3082\u4e00\u5ea6\u306b\u5b9a\u7fa9\u3057\u3066\u304f\u308c\u305f\u3088\u3046\u306b\u601d\u3044\u307e\u3059\u3002\n\n```scheme\n## Plain Scheme\n(define (lambda? exp) (tagged-list? exp 'lambda))\n(define (lambda-parameters lambda-exp) (cadr lambda-exp))\n(define (lambda-body lambda-exp) (cddr lambda-exp))\n(define (make-lambda parms body) (cons 'lambda (cons parms body)))\n\n## Racket\n(struct lambda (parms body))\n```\n\nevaluator\u306e\u672c\u4f53\u306f\u4e0b\u8a18([\u8ab2\u984c](http://web.mit.edu/alexmv/6.037/p3.pdf))\u3002\u8981\u306f\u4e0e\u3048\u3089\u308c\u305f\u5f0f(expression)\u306e\u30bf\u30a4\u30d7\u3092\u5224\u5225\u3057\u3066\u3001\u305d\u308c\u306b\u5fdc\u3058\u3066\u9069\u5207\u306a\u8a55\u4fa1\u3092\u3059\u308b\u3001\u3068\u3044\u3046\u624b\u9806\u304c\u7f85\u5217\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u8a55\u4fa1\u306e\u969b\u306b\u304b\u306a\u3089\u305aenv (environment)\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u306e\u3082\u91cd\u8981\u3067\u3001\u5f0f\u306e\u8a55\u4fa1\u3068\u3044\u3046\u306e\u306f\u540d\u524d\u306e\u5bfe\u5fdc\u8868\u3067\u3042\u308bframe\u3092\u542b\u3080environment\u304c\u306a\u3051\u308c\u3070\u306a\u308a\u305f\u305f\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u306e\u3088\u3046\u3067\u3059\u3002\n\n```scheme\n(define (m-eval exp env)\n  (cond ((self-evaluating? exp) exp)\n        ((variable? exp) (lookup-variable-value exp env))\n        ((quoted? exp) (text-of-quotation exp))\n        ((assignment? exp) (eval-assignment exp env))\n        ((definition? exp) (eval-definition exp env))\n        ((if? exp) (eval-if exp env))\n        ((lambda? exp)\n         (make-procedure (lambda-parameters exp) (lambda-body exp) env))\n        ((begin? exp) (eval-sequence (begin-actions exp) env))\n        ((cond? exp) (m-eval (cond->if exp) env))\n        ((let? exp) (m-eval (let->application exp) env))\n        ((time? exp) (time (m-eval (second exp) env)))\n        ((application? exp)\n         (m-apply (m-eval (operator exp) env)\n                  (list-of-values (operands exp) env)))\n        (else (error \"Unknown expression type -- EVAL\" exp))))\n```\n\n\u4e00\u756a\u7c21\u5358\u306a\u306e\u306fself-evaluating?\u3067\u3072\u3063\u304b\u304b\u308b\u3082\u306e\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u6570\u5024\u3001\u6587\u5b57\u5217\u3001boolean\u306f\u3001\u8a55\u4fa1\u3059\u308b\u3068\u81ea\u5206\u306b\u306a\u308b\u306e\u3067\u5f0f(exp)\u304c\u305d\u306e\u307e\u307e\u8fd4\u308b\u3068\u3044\u3046\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```scheme\n(define (self-evaluating? exp)\n  (cond ((number? exp) #t)\n        ((string? exp) #t)\n        ((boolean? exp) #t)\n        (else #f)))\n\n;; corresponding part of m-eval\n        ((self-evaluating? exp) exp)\n```\n\n\u4ee5\u964d\u306f\u666e\u901a\u306e\u95a2\u6570\u3068\u9055\u3044\u3001\u672c\u4f53\u5b9f\u884c\u524d\u306b\u5168\u3066\u306e\u5f15\u6570\u3092\u4e8b\u524d\u306b\u8a55\u4fa1(eager evaluation)\u3057\u306a\u3044\u3001special form\u306e\u5b9a\u7fa9\u304c\u305a\u3089\u305a\u3089\u7d9a\u3044\u3066\u3044\u307e\u3059\u3002\u901a\u5e38\u306e\u95a2\u6570\u306f\u307f\u306a\u540c\u3058\u8a55\u4fa1\u65b9\u6cd5\u306a\u306e\u3067\u6700\u5f8c\u306eapplication?\u306e\u3068\u3053\u308d\u306b\u3072\u3063\u304b\u304b\u308b\u3068\u3044\u3046\u4ed5\u7d44\u307f\u306e\u3088\u3046\u3067\u3059\u3002eval-X\u3068\u3044\u3046\u5c02\u7528\u8a55\u4fa1\u6cd5\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u90e8\u5206\u3068cond->if\u306a\u3069\u3068\u5909\u63db\u6cd5\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u90e8\u5206\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u3080\u3057\u308d\u3053\u3063\u3061\u306e\u65b9\u304c\u8907\u96d1\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u901a\u5e38\u306e\u95a2\u6570\u306e\u8a55\u4fa1\u304b\u3089\u898b\u3066\u307f\u307e\u3059\u3002\n\n```\n(define (application? exp) (pair? exp))\n(define (operator app) (car app))\n(define (operands app) (cdr app))\n(define (no-operands? args) (null? args))\n(define (first-operand args) (car args))\n(define (rest-operands args) (cdr args))\n(define (make-application rator rands)\n  (cons rator rands))\n\n;; corresponding part of eval\n        ((application? exp)\n         (m-apply (m-eval (operator exp) env)\n                  (list-of-values (operands exp) env)))\n\n(define (m-apply procedure arguments)\n  (cond ((primitive-procedure? procedure)\n         (apply-primitive-procedure procedure arguments))\n        ((compound-procedure? procedure)\n         (eval-sequence\n          (procedure-body procedure)\n          (extend-environment (make-frame (procedure-parameters procedure)\n                                          arguments)\n                              (procedure-environment procedure))))\n        (else (error \"Unknown procedure type -- APPLY\" procedure))))\n\n(define (list-of-values exps env)\n  (cond ((no-operands? exps) '())\n        (else (cons (m-eval (first-operand exps) env)\n                    (list-of-values (rest-operands exps) env)))))\n```\n\nm-apply\u3068\u3044\u3046\u95a2\u6570\u306b\u8a55\u4fa1\u3092\u6295\u3052\u3066\u3044\u307e\u3059\u3002m-apply\u306e\u5b9a\u7fa9\u3092\u307f\u308b\u3068procedure\u3092\u5f15\u6570\u7fa4\u306b\u9069\u7528\u3059\u308b\u3068\u3044\u3046\u3057\u304f\u307f\u306e\u3088\u3046\u3067\u3059\u3002m-apply\u306b\u4e0e\u3048\u3089\u308c\u3066\u3044\u308b\u306e\u306foperator(\u95a2\u6570\u9069\u7528\u5f0f\u306ecar\u90e8\u5206)\u3092\u8a55\u4fa1\u3057\u305f\u3082\u306e\u3001\u3068operands(\u5f15\u6570\u7fa4)\u3092\u8a55\u4fa1\u3057\u3066\u5024\u306b\u5909\u63db\u3057\u305f\u3082\u306e\u306e\u30ea\u30b9\u30c8\u306e\u3088\u3046\u3067\u3059\u3002list-of-values\u306f\u5f15\u6570\u3092\u4e00\u500b\u305a\u3064\u8a55\u4fa1\u3057\u3066\u3044\u304f\u3068\u3044\u3046\u95a2\u6570\u306e\u3088\u3046\u3067\u3059\u3002\n\n\u6b21\u306b\u5c02\u7528evauator\u3092\u7528\u610f\u3057\u3066\u3044\u308b\u3082\u306e\u3092\u898b\u3066\u307f\u307e\u3059\u3002eval-definition\u306fdefine special form\u3092\u8a55\u4fa1\u3059\u308bevaulator\u306e\u3088\u3046\u3067\u3059\u3002\n\n```scheme\n(define (definition? exp) (tagged-list? exp 'define))\n(define (definition-variable exp)\n  (if (symbol? (cadr exp))   (cadr exp)   (caadr exp)))\n(define (definition-value exp)\n  (if (symbol? (cadr exp))\n      (caddr exp)\n      (make-lambda (cdadr exp) (cddr exp))))  ; formal params, body\n(define (make-define var expr)\n  (list 'define var expr))\n\n;; corresponding part of m-eval\n        ((definition? exp) (eval-definition exp env))\n\n(define (eval-definition exp env)\n  (define-variable! (definition-variable exp)\n                    (m-eval (definition-value exp) env)\n                    env))\n\n(define (define-variable! var val env)\n  (let ((frame (environment-first-frame env)))\n    (let ((binding (find-in-frame var frame)))\n      (if binding\n          (set-binding-value! binding val)\n          (add-binding-to-frame!\n           (make-binding var val)\n           frame)))))\n```\n\neval-definition\u304c\u884c\u306a\u3063\u3066\u3044\u308b\u306e\u306f\u3001variable\u306e\u540d\u524d\u3092definition-variable\u3067\u53d6\u308a\u51fa\u3057\u3066\u3001definition-value\u3067\u53d6\u308a\u51fa\u3057\u305f\u5024\u306b\u306a\u308b\u5f0f\u3092m-eval\u3067\u8a55\u4fa1\u3057\u305f\u5024\u3092\u7d50\u3073\u4ed8\u3051\u308b\u3068\u3044\u3046\u3053\u3068\u306e\u3088\u3046\u3067\u3059\u3002\u7d50\u3073\u3064\u3051\u308b\u3068\u3044\u3046\u306e\u306f\u3001define-variable!\u3067\u884c\u3063\u3066\u304a\u308a\u3001\u4e0e\u3048\u3089\u308c\u305fenvironment\u306e\u76f4\u8fd1\u306eframe (current environment\u3068\u8003\u3048\u3066\u3088\u3044\u304b)\u306b\u3001\u5909\u6570\u3068\u5024\u306ebinding\u3092\u52a0\u3048\u308b\u3068\u3044\u3046\u3053\u3068\u306e\u3088\u3046\u3067\u3059\u3002\u3053\u308c\u306f\u526f\u4f5c\u7528\u3092\u76ee\u7684\u3068\u3057\u3066\u3044\u308b\u306e\u3067\u8907\u96d1\u306b\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n\n\u526f\u4f5c\u7528\u3092\u3082\u305f\u306a\u3044special form\u3067\u3042\u308bif\u306e\u8a55\u4fa1\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\n```scheme\n(define (if? exp) (tagged-list? exp 'if))\n(define (if-predicate exp) (cadr exp))\n(define (if-consequent exp) (caddr exp))\n(define (if-alternative exp) (cadddr exp))\n(define (make-if pred conseq alt) (list 'if pred conseq alt))\n\n;; corresponding part of m-eval\n        ((if? exp) (eval-if exp env))\n\n(define (eval-if exp env)\n  (if (m-eval (if-predicate exp) env)\n      (m-eval (if-consequent exp) env)\n      (m-eval (if-alternative exp) env)))\n```\n\n\u3060\u3044\u3076\u30b7\u30f3\u30d7\u30eb\u3067\u3059\u3002\u8981\u306feval-if\u306f\u7279\u5225\u306a\u6319\u52d5\u3092\u305d\u306e\u307e\u307eScheme\u7d44\u8fbc\u307f\u306eif\u306b\u4e38\u6295\u3052\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002predicate\u90e8\u5206\u3092\u8a55\u4fa1\u3057\u3066\u3001\u305d\u308c\u306b\u5fdc\u3058\u3066true\u7bc0\u3092\u8a55\u4fa1\u3059\u308b\u304bfalse\u7bc0\u3092\u8a55\u4fa1\u3059\u308b\u304b\u3092\u6c7a\u3081\u3066\u3044\u307e\u3059\u3002\n\n\n\u79c1\u304c\u4e00\u756a\u304a\u3082\u3057\u308d\u3044\u3068\u601d\u3063\u305f\u306e\u306fcode transformer\u3068\u547c\u3070\u308c\u3066\u3044\u305f\u3082\u306e\u3067\u3059\u3002cond\u306e\u4f8b\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\n```scheme\n(define (cond? exp) (tagged-list? exp 'cond))\n(define (cond-clauses exp) (cdr exp))\n(define first-cond-clause car)\n(define rest-cond-clauses cdr)\n(define (make-cond seq) (cons 'cond seq))\n\n;; corresponding part of m-eval\n        ((cond? exp) (m-eval (cond->if exp) env))\n\n(define (cond->if expr)\n  (let ((clauses (cond-clauses expr)))\n    (if (null? clauses)\n        #f\n        (if (eq? (car (first-cond-clause clauses)) 'else)\n            (sequence->exp (cdr (first-cond-clause clauses)))\n            (make-if (car (first-cond-clause clauses))\n                     (sequence->exp (cdr (first-cond-clause clauses)))\n                     (make-cond (rest-cond-clauses clauses)))))))\n```\n\nm-eval\u306e\u5bfe\u5fdc\u90e8\u5206\u3092\u307f\u308b\u3068\u3001cond\u5f0f\u3092\u898b\u3064\u3051\u305f\u3089\u3001\u307e\u305a\u3001cond->if\u3067\u5909\u63db\u3057\u3066\u3001\u305d\u308c\u3092m-eval\u3067\u666e\u901a\u306b\u8a55\u4fa1\u3059\u308b\u3068\u3044\u3046\u5f62\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002if\u306b\u5909\u63db\u3059\u308b\u306e\u3067\u3001\u6700\u7d42\u7684\u306b\u306feval-if\u304c\u51fa\u3066\u304d\u307e\u3059\u304c\u3001\u304a\u3082\u3057\u308d\u3044\u306e\u306fcond->if\u3067\u3059\u3002\u5b9f\u969b\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n\n```scheme\n(cond->if '(cond\n            [A do-a]\n            [B do-b]\n            [C do-c]\n            [#t do-d]))\n;; =>\n;; (if A\n;;     do-a\n;;     (cond\n;;      (B do-b)\n;;      (C do-c)\n;;      (#t do-d)))\n```\n\n\u6ce8\u610f\u304c\u5fc5\u8981\u306a\u306e\u306f\u3053\u3053\u3067\u306f\u3001\u4e00\u5207\u8a55\u4fa1\u306f\u884c\u308f\u308c\u3066\u304a\u3089\u305a\u3001cond\u5f0f\u304cif\u5f0f\u306b\u30ea\u30b9\u30c8\u3092\u3044\u3058\u308b\u3053\u3068\u3067\u5909\u63db\u3055\u308c\u3066\u3044\u308b\u3060\u3051\u3060\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u666e\u901a\u306b\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3042\u308b\u3053\u3068(homoiconicity)\u304c\u3001\u3053\u306e\u904e\u7a0b\u3092\u5358\u7d14\u5316\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u3059\u306d(\u53c2\u8003 [Lisp\u306e\u609f\u308a\u304c\u5206\u304b\u3063\u3061\u3083\u3046\u65b0\u6625\u30dd\u30a8\u30e0](http://qiita.com/g000001/items/a31c150df1e3213b7329))\u3002\u305d\u306e\u5f8c\u3001\u3053\u306e\u5909\u63db\u3055\u308c\u305f\u3082\u306e\u304cm-eval\u306b\u5dee\u3057\u623b\u3057\u306b\u306a\u308a\u8a55\u4fa1\u304c\u304a\u3053\u306a\u308f\u308c\u307e\u3059\u3002A\u304ctrue\u3067\u3042\u308c\u3070do-a\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u6b21\u306ebranch\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u305f\u3081\u306b\u6b8b\u308a\u306econd\u5f0f\u3092if\u5f0f\u306b\u5909\u63db\u3001\u4ee5\u4e0b\u540c\u6587\u3001\u3068\u306a\u308b\u3088\u3046\u3067\u3059\u3002\u304a\u305d\u3089\u304f\u3001cond->if\u3092cond\u3092\u4e00\u5ea6\u306bnested if\u306b\u5909\u63db\u3059\u308b\u3088\u3046\u306b\u3082\u5b9f\u88c5\u3067\u304d\u305d\u3046\u3067\u3059\u304c\u3001\u5fc5\u8981\u306a\u3068\u3053\u308d\u3060\u3051\u5909\u63db\u3059\u308b\u3053\u306e\u65b9\u6cd5\u306e\u65b9\u304c\u3001\u4e0a\u306e\u65b9\u3067\u7d42\u308b\u3053\u3068\u304c\u3001\u591a\u3051\u308c\u3070\u7121\u99c4\u304c\u5c11\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\nenvironment\u306e\u5b9f\u88c5\u3092\u898b\u3066\u307f\u308b\u3068\u3044\u3046\u306e\u3082\u7406\u89e3\u3092\u52a9\u3051\u308b\u5185\u5bb9\u3067\u3057\u305f\u3002\u4e0b\u8a18\u3067\u306ffree variable x\u3092\u6301\u3064add1 procedure\u306eenvironment\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308bprocedure-env\u3068\u3044\u3046\u95a2\u6570\u306e\u30c6\u30b9\u30c8\u3067\u3059\u3002\n\n```scheme\n(let ([env (setup-environment)])\n  (m-eval '(begin\n             (define (add-x x)\n               (lambda (y) (+ x y)))\n             (define add1 (add-x 1))\n             (procedure-env add1))\n          env))\n;; =>\n;;(environment\n;;    (frame (binding x 1 ()))\n;;    #1=(environment\n;;        (frame\n;;         (binding add1 (procedure #2=(y) #3=((+ x y)) #0#) ())\n;;         (binding add-x (procedure (x) ((lambda #2# . #3#)) #1#) ())\n;;         (binding car (primitive #<procedure:mcar>) ())\n;;         (binding cdr (primitive #<procedure:mcdr>) ())\n;;         (binding cons (primitive #<procedure:mcons>) ())\n;;         (binding set-car! (primitive #<procedure:set-mcar!>) ())\n;;         (binding set-cdr! (primitive #<procedure:set-mcdr!>) ())\n;;         (binding null? (primitive #<procedure:null?>) ())\n;;         (binding + (primitive #<procedure:+>) ())\n;;         (binding - (primitive #<procedure:->) ())\n;;         (binding < (primitive #<procedure:<>) ())\n;;         (binding > (primitive #<procedure:>>) ())\n;;         (binding = (primitive #<procedure:=>) ())\n;;         (binding display (primitive #<procedure:mdisplay>) ())\n;;         (binding not (primitive #<procedure:not>) ())\n;;         (binding * (primitive #<procedure:*>) ())\n;;         (binding / (primitive #<procedure:/>) ())\n;;         (binding list (primitive #<procedure:mlist>) ())\n;;         (binding cadr (primitive #<procedure:mcadr>) ())\n;;         (binding cddr (primitive #<procedure:mcddr>) ())\n;;         (binding newline (primitive #<procedure:newline>) ())\n;;         (binding printf (primitive #<procedure:printf>) ())\n;;         (binding length (primitive #<procedure:mlength>) ())\n;;         (binding env-variables (primitive #<procedure:env-variables>) ())\n;;         (binding env-parent (primitive #<procedure:env-parent>) ())\n;;         (binding env-value (primitive #<procedure:env-value>) ())\n;;         (binding caddr (primitive #<procedure:mcaddr>) ())\n;;         (binding cdddr (primitive #<procedure:mcdddr>) ())\n;;         (binding cadddr (primitive #<procedure:mcadddr>) ())\n;;         (binding cddddr (primitive #<procedure:mcddddr>) ())\n;;         (binding symbol? (primitive #<procedure:symbol?>) ())\n;;         (binding pair? (primitive #<procedure:mpair?>) ())\n;;         (binding eq? (primitive #<procedure:eq?>) ())\n;;         (binding equal? (primitive #<procedure:equal?>) ())\n;;         (binding number? (primitive #<procedure:number?>) ())\n;;         (binding string? (primitive #<procedure:string?>) ())\n;;         (binding boolean? (primitive #<procedure:boolean?>) ())\n;;         (binding append (primitive #<procedure:mappend>) ())\n;;         (binding caadr (primitive #<procedure:mcaadr>) ())\n;;         (binding cdadr (primitive #<procedure:mcdadr>) ()))\n;;        (environment)))\n```\n\n\u51fa\u529b\u306e\u4e00\u756a\u4e0b\u306b\u3042\u308b(environment)\u3068\u3044\u3046\u7a7a\u306eenvironment\u304c\u5927\u672c\u306b\u306a\u308a\u307e\u3059\u3002#1=\u3067\u793a\u3055\u308c\u3066\u3044\u308bglobal environment\u306b\u306f\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308bprimitive procedure\u306e\u540d\u524d\u5bfe\u5fdc(binding)\u304cframe\u5185\u306b\u4e26\u3093\u3067\u3044\u307e\u3059\u30022\u56dedefine\u3092\u3057\u3066\u3001binding\u3092\u4e8c\u500b\u8db3\u3057\u3066\u3044\u308b\u306e\u3067\u3001frame\u306e\u4e00\u756a\u4e0a\u306b\u306faddx\u3068add-1 procedure\u306ebinding\u304c\u3042\u308a\u307e\u3059\u3002\u66f4\u306badd-1\u306ffree variable x\u3092procedure\u5b9a\u7fa9\u6642\u306b\u5916\u304b\u3089\u4e0e\u3048\u3089\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3082\u3046\u4e00\u5c64environment(#0)\u304c\u5b58\u5728\u3057\u3066\u3001\u305d\u3053\u306eframe\u306bx = 1\u306ebinding\u304c\u5165\u3063\u3066\u3044\u307e\u3059\u3002\u5b9f\u884c\u524d\u306e\u72b6\u614b\u306a\u306e\u3067\u3001\u3053\u3053\u307e\u3067\u3067\u3059\u304c\u5b9f\u969b\u306eprocedure\u306e\u5b9f\u884c\u6642\u306b\u306f\u5f15\u6570\u3068\u3057\u3066\u4e0e\u3048\u3089\u3048\u305fy\u306ebinding\u3092\u542b\u3080\u4e00\u6642environment/frame\u304c\u5b9f\u884c\u4e2d\u306e\u307f\u4f5c\u6210\u3055\u308c\u308b\u3068\u3044\u3046\u3053\u3068\u306e\u3088\u3046\u3067\u3059\u3002SICP\u306e\u6559\u79d1\u66f8\u306b\u66f8\u3044\u3066\u3042\u308bdouble bubble\u306e\u8aac\u660e\u3092\u898b\u3066\u3082\u3044\u307e\u3044\u3061\u308f\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001\u5b9f\u88c5\u3057\u306a\u304c\u3089\u4e0b\u8a18\u306e\u3088\u3046\u306bclosure\u3092\u4f5c\u6210\u3057\u3066\u307f\u308b\u3068\u826f\u304f\u308f\u304b\u308a\u307e\u3057\u305f\u3002\n\n\u3053\u306e\u8ab2\u984c\u306e\u30af\u30e9\u30a4\u30de\u30c3\u30af\u30b9\u306f\u4f5c\u6210\u3057\u305fevaluator\u3067\u3001evaluator\u306e\u30b3\u30fc\u30c9\u81ea\u4f53\u3092REPL\u3067\u5b9f\u884c\u3057\u3066\u307f\u308b\u3068\u3044\u3046\u3082\u306e\u3002\u4e0b\u8a18\u306fDr.Racket\u306eREPL\u3067\u5b9f\u884c\u3057\u3066\u307f\u305f\u3082\u306e\u3067\u3059\u3002\n\n```scheme\nWelcome to DrRacket, version 6.1.1 [3m].\nLanguage: racket; memory limit: 128 MB.\n#f\n> (define (fib n)\n  (cond\n   [(< n 2) 1]\n   [else (+ (fib (- n 1)) (fib (- n 2)))]))\n> (time (fib 8))\ncpu time: 0 real time: 1 gc time: 0\n34\n```\n\u3053\u3053\u307e\u3067\u306f\u666e\u901a\u306bRacket\u3067\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u3002Fibonacci\u306e8\u306f\u4e00\u77ac\u3067\u51fa\u307e\u3059\u3002\u6b21\u306fm-eval\u3092Racket\u4e0a\u3067\u8d70\u3089\u305b\u3066\u307f\u307e\u3059\u3002\n\n```scheme\n> (load-meval-defs)\nloaded\n> (driver-loop)\n\n;;; M-Eval input level 1\n(define (fib n)\n  (cond\n   [(< n 2) 1]\n   [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n;;; M-Eval value:\n#<void>\n\n;;; M-Eval input level 1\n(time (fib 8))\ncpu time: 3 real time: 3 gc time: 0\n\n;;; M-Eval value:\n34\n```\n\nM-Eval input level 1\u3068\u51fa\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u72b6\u614b\u3067\u306fRacket\u306eREPL\u4e0a\u3067\u3001Scheme\u306eevaluator\u304c\u8d70\u3063\u3066\u3044\u3066\u3001\u305d\u3053\u3067\u30b3\u30fc\u30c9\u3092\u8d70\u3089\u305b\u3066\u3044\u307e\u3059\u3002REPL\u304c\u4e8c\u6bb5\u306b\u306a\u3063\u3066\u3044\u308b\u308f\u3051\u3067\u3059\u3002\u30b3\u30fc\u30c9\u5b9f\u884c\u306b\u5c11\u3057\u6642\u9593\u304c\u304b\u304b\u308b\u3088\u3046\u3067\u3059\u3002\u3055\u3089\u306b\u3001\u3053\u3053\u3067evaluator\u3092\u8d70\u3089\u305b\u3066\u307f\u307e\u3059\u3002\n\n```scheme\n;;; M-Eval input level 1\n(driver-loop)\n\n;;; M-Eval input level 2\n(define (fib n)\n  (cond\n   [(< n 2) 1]\n   [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n;;; M-Eval value:\n#<void>\n\n;;; M-Eval input level 2\n(time (fib 8))\ncpu time: 1148 real time: 1148 gc time: 10\n\n;;; M-Eval value:\n34\n```\n\nevauator\u306e\u30b3\u30fc\u30c9\u3067\u5b9f\u884c\u3057\u3066\u3044\u308bREPL\u4e0a\u3067\u3055\u3089\u306b\u540c\u3058evaluator\u306e\u30b3\u30fc\u30c9\u3067REPL\u3092\u8d70\u3089\u305b\u3066\u3044\u308b\u308f\u3051\u3067\u3059\u3002REPL\u304c\u4e09\u6bb5\u306b\u306a\u3063\u3066\u3044\u308b\u308f\u3051\u3067\u3059\u306d\u3002\u3082\u3046\u4f55\u304c\u4f55\u3060\u304b\u308f\u304b\u308a\u307e\u305b\u3093\u3002\u540c\u3058Fibonacci\u306e\u5b9f\u884c\u306b\u306f\u5927\u5206\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u30b3\u30fc\u30c9\u304c3\u56de\u89e3\u91c8\u3055\u308c\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u306e\u3067\u3084\u3080\u306a\u3057\u3067\u3057\u3087\u3046\u304b\u3002REPL\u3092\u4e8c\u56deexit\u3059\u308b\u3068\u3082\u306e\u3068Racket REPL\u306b\u623b\u308a\u307e\u3059\u3002\n\n```scheme\n;;; M-Eval input level 2\n**quit**\n\n;;; M-Eval value:\nmeval-done\n\n;;; M-Eval input level 1\n**quit**\nmeval-done\n```\n\n\n\n# Lecture 5: Debugging\n\n\u59bb\u51fa\u7523\u306e\u305f\u3081\u53d7\u8b1b\u305b\u305a\u3002[Lecture 5](http://web.mit.edu/alexmv/6.037/l5-transitions.pdf)\u306e\u30b9\u30e9\u30a4\u30c9\u3092\u898b\u308b\u304b\u304e\u308a\u306f\u3001SICP\u306e\u5185\u5bb9\u3068\u3044\u3046\u3088\u308a\u306f\u3001\u30e2\u30b8\u30e5\u30e9\u30fc\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u3051\u3001\u30c6\u30b9\u30c8\u3092\u66f8\u3051\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u305b\u3088\u3001\u3068\u304bgood programming practice\u306e\u4e00\u822c\u8ad6\u306e\u8a71\u3060\u3063\u305f\u69d8\u5b50\u3002\u30b9\u30e9\u30a4\u30c9\u306e\u5f8c\u534a\u3067Racket\u306eunit testing framework\u3068Dr.Racket\u306edebugger\u306e\u8a71\u304c\u4e00\u77ac\u3075\u308c\u3089\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u3053\u306f\u6709\u7528\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3002\n\n\n# Lecture 6: Language design and implementation\n\n\u9000\u9662\u76f4\u5f8c\u306e\u305f\u3081\u53d7\u8b1b\u305b\u305a\u3002\u7c73\u56fd\u3067\u306f\u51fa\u7523\u5f8c2\u6cca\u3067\u9000\u9662\u304c\u6a19\u6e96\u7684\u306a\u3088\u3046\u3067\u3059\u3002[Lecture 6](http://web.mit.edu/alexmv/6.037/l6.pdf)\u306e\u30b9\u30e9\u30a4\u30c9\u3092\u898b\u308b\u3068\u4e3b\u306bScheme\u3092\u4f7f\u3063\u3066Object Oriented Programming System\u3092\u5b9f\u88c5\u3057\u306a\u304c\u3089OOP\u306b\u3064\u3044\u3066\u5b66\u3076\u3068\u3044\u3063\u305f\u5185\u5bb9\u3060\u3063\u305f\u3088\u3046\u3067\u3059\u3002\u79c1\u306f\u3001R\u8a00\u8a9e\u304c\u3042\u307e\u308a\u4e00\u822c\u7684\u306a\u5f62\u5f0f\u306eOOP\u3092\u4f7f\u308f\u306a\u3044\u306e\u3067\u3001OOP\u95a2\u9023\u306f\u5168\u4f53\u7684\u306b\u82e6\u624b\u3067\u3059\u3002[1986\u5e74\u306e\u30d3\u30c7\u30aa](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/video-lectures/)\u3067\u306f\u3001\u3053\u306e\u5185\u5bb9\u306f\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u3063\u307d\u3044\u3067\u3059\u3002\n\n\n\u6388\u696d\u306e\u30b9\u30e9\u30a4\u30c9(\u30b9\u30e9\u30a4\u30c95-9)\u3067\u306f\u8907\u6570\u306e\u30c7\u30fc\u30bf\u5f62\u5f0f\u306b\u8907\u6570\u306e\u64cd\u4f5c\u304c\u30d4\u30dc\u30c3\u30c8\u30c6\u30fc\u30d6\u30eb\u306e\u69d8\u306b\u5b58\u5728\u3059\u308b\u3068\u304d\u306b\u3069\u306e\u3088\u3046\u306b\u307e\u3068\u3081\u308b\u304b\u3068\u3044\u3046\u65b9\u6cd5\u304c\u8a00\u53ca\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002functional programming\u3067\u306f\"generic operation\"\u3068\u3057\u3066\u3001\u3072\u3068\u3064\u306eprocedure\u306b\u3044\u308d\u3044\u308d\u306a\u30c7\u30fc\u30bf\u3092\u6295\u3052\u3066procedure\u304c\u5185\u90e8\u3067\u5834\u5408\u5206\u3051\u3067\u5bfe\u5fdc\u3059\u308b\u5f62\u3002OOP\u3067\u306f\u305d\u308c\u305e\u308c\u306e\u30c7\u30fc\u30bf\u5074\u306bmethod\u3068\u3057\u3066\u64cd\u4f5c\u304c\u4ed8\u5c5e\u3057\u3066\u3044\u3066\u3001\u3001\u3068\u3044\u3063\u305f\u8a71\u3092\u3057\u3066\u3044\u305f\u3082\u306e\u3068\u63a8\u6e2c\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u524d\u8ff0\u306e [Coursera\u30b3\u30fc\u30b9(\u30ea\u30f3\u30af\u306f\u8b1b\u5e2b\u306ewebsite)](http://courses.cs.washington.edu/courses/cse341/13sp/) \u3067\u3082[Unit 8](http://courses.cs.washington.edu/courses/cse341/13sp/videos/unit8/)\u3067\u3075\u308c\u3066\u3044\u305f\u5185\u5bb9\u3068\u601d\u3044\u307e\u3059\u3002R\u8a00\u8a9e\u306f\u524d\u8005\u306e\u8003\u3048\u65b9\u306b\u8fd1\u3044\u5f62\u5f0f\u3068\u601d\u3044\u307e\u3059\u3002\u30b9\u30e9\u30a4\u30c9\u306b\u3082\u51fa\u3066\u304d\u307e\u3059\u304c\u3001\u524d\u8005\u306e\u307e\u3068\u3081\u304b\u305f\u3092\u3059\u308b\u3068\u3001generic operation\u3092\u8db3\u3059\u3068\u304d\u306f\u5909\u66f4\u304c\u4e00\u7b87\u6240(\u8db3\u3059operation\u306e\u307f)\u3067\u697d\u3060\u3051\u3069\u3001\u30c7\u30fc\u30bf\u5f62\u5f0f\u3092\u8db3\u3059\u3068\u304d\u306f\u5168\u3066\u306egeneric operation\u3092\u5909\u66f4\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u3002\u5f8c\u8005\u306e\u307e\u3068\u3081\u304b\u305f\u3060\u3068\u9006\u306b\u306a\u308a\u3001\u30c7\u30fc\u30bf\u5f62\u5f0f\u3092\u8db3\u3059\u3068\u304d\u306f\u5909\u66f4\u7b87\u6240\u304c\u4e00\u7b87\u6240\u3060\u304c\u3001operation\u3092\u8db3\u3059\u3068\u304d\u306f\u5168\u3066\u306e\u30c7\u30fc\u30bf\u5f62\u5f0f(class)\u3092\u5909\u66f4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3068\u306e\u3053\u3068\u3002\n\n\u6388\u696d\u306e\u30b3\u30fc\u30c9\u3067\u306fOOP sytem\u3092Scheme\u4e0a\u306b\u69cb\u7bc9\u3059\u308b[\u30b3\u30fc\u30c9\u76f4\u30ea\u30f3\u30af](http://web.mit.edu/alexmv/6.037/oo-sys.scm)\u3068\u3044\u3046\u3053\u3068\u3092\u3084\u3063\u3066\u3044\u305f\u3088\u3046\u3067\u3059\u3002\u4ed5\u7d44\u307f\u3068\u3057\u3066\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b1\u500b\u76ee\u306e\u8981\u7d20\u3067\u30de\u30fc\u30ad\u30f3\u30b0\u3057\u305f\u30ea\u30b9\u30c8\u3092\u4f7f\u3063\u3066\u3001\u65e2\u5b58\u306eScheme\u306e\u67a0\u5185\u3067class\u3084instance\u3068\u3044\u3063\u305f\u3082\u306e\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n**\u30af\u30e9\u30b9\u5b9a\u7fa9**\n\n```scheme\n;; Class data abstraction\n(define (class? obj)\n  (tagged-list? obj 'class))\n(define (class-type class)\n  (second class))\n(define (class-state class)\n  (third class))\n(define (class-parent class)\n  (fourth class))\n(define (class-methods class)\n  (fifth class))\n\n(define (make-class type state parent methods)\n  (list 'class\n        type\n        state\n        parent\n        methods))\n```\n\n**\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u95a2\u9023**\n\n```scheme\n;; Instance data abstraction\n(define (instance? obj)\n  (tagged-list? obj 'instance))\n(define (instance-state inst)\n  (second inst))\n(define (instance-class inst)\n  (third inst))\n\n(define (collect-type class)\n  (if (class? class)\n      (cons (class-type class)\n            (collect-type (class-parent class)))\n      '()))\n\n(define (collect-state class)\n  (if (class? class)\n      (append (class-state class)\n              (collect-state (class-parent class)))\n      '()))\n\n(define (make-instance class . args)\n  (let ((inst\n         (list 'instance\n               (map (lambda (x) (list x #f)) (collect-state class))\n               class)))\n    (if (has-method? inst 'CONSTRUCTOR)  ;; if it has a constructor, invoke it\n        (apply invoke inst 'CONSTRUCTOR args)\n        (void))\n    inst))\n```\n\n\u30b3\u30fc\u30c9\u3092\u898b\u3066\u3044\u3066\u6c17\u4ed8\u304d\u307e\u3057\u305f\u304c\u3001Scheme\u306b\u306f[fluid-let](http://www.ccs.neu.edu/home/dorai/t-y-scheme/t-y-scheme-Z-H-7.html#node_sec_5.2)\u3068\u3044\u3046dynamic scoping\u306e\u305f\u3081\u306elet\u304c\u3042\u308b\u3093\u3067\u3059\u306d\u3002Clojure\u3067\u306fbinding\u3060\u3063\u305f\u3067\u3057\u3087\u3046\u304b\u3002(\u8108\u7565\u306a\u304b\u3063\u305f\u3067\u3059)\n\n\u8ab2\u984c\u306f\u524d\u56de\u306e\u8ab2\u984c\u3067\u4f5c\u6210\u3057\u305fScheme evaluator\u3092\u3055\u3089\u306b\u62e1\u5f35\u3059\u308b\u3053\u3068\u3067Scheme with OOP\u7684\u306a\u3082\u306e\u3092\u4f5c\u6210\u3057\u3066\u3001\u30b2\u30fc\u30e0\u3092\u30d7\u30ec\u30a4\u3059\u308b\u3068\u3044\u3046\u3082\u306e\u306e\u3088\u3046\u3067\u3059\u3002\u8ab2\u984c\u306b\u304b\u306a\u308a\u7121\u7406\u77e2\u7406\u611f\u306e\u3042\u308b\u30b2\u30fc\u30e0\u306e\u30d0\u30a4\u30aa\u30cf\u30b6\u30fc\u30c9\u307f\u305f\u3044\u306a\u30b9\u30c8\u30fc\u30ea\u30fc\u304c\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002\u5b9f\u969b\u4e0a\u306fOOP system\u306e\u30c6\u30b9\u30c8\u306f\u66f8\u3044\u3066\u3042\u3063\u3066\u3001\u305d\u308c\u306b\u3042\u308f\u305b\u3066test-driven development(\u3068\u3044\u3046\u304b\u65e2\u5b58\u306e\u30b3\u30fc\u30c9\u306e\u62e1\u5f35\u3092)\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u306e\u3088\u3046\u3067\u3059\u3002\u3068\u308a\u3042\u3048\u305a\u3001\u30c6\u30b9\u30c8\u3092\u8d70\u3089\u305b\u3066\u307f\u308b\u3068\"BRAINSBRAINSBRAINSBRAINS\"\u3068\u304b\u306a\u3063\u3061\u3083\u3063\u3066\u307e\u3059\u3002\u66f8\u3044\u3066\u3044\u305f\u3072\u3068\u304c\u30be\u30f3\u30d3\u306b\u306a\u3063\u3061\u3083\u305f\u3093\u3067\u3059\u306d\u3002\u300c\u304b\u3086\u3044 \u3046\u307e\u300d\u3063\u3066\u3084\u3064\u3067\u3059\u306d([\u53c2\u8003](http://dic.nicovideo.jp/a/\u304b\u3086\u3046\u307e))\u3002\n\n```Scheme\nracket@> (run-all-tests)\nRUNNING TEST: Getting started: make-instance with no extra args.\ntest-passed\nRUNNING TEST: Getting started: make-instance with arguments.\ntest-passed\nRUNNING TEST: Problem 1: create-class\ncreate-class did not produce a class. Instead, it produced:  BRAINSBRAINSBRAINSBRAINS\n  context...:\n   /Users/kazuki/Library/Racket/6.1.1/pkgs/compatibility-lib/compatibility/mlist.rkt:47:11: loop\n   /usr/local/Cellar/plt-racket/6.1.1/share/racket/collects/racket/private/misc.rkt:87:7\n```\n\n\u554f\u984c5\u307e\u3067\u3084\u308b\u3068OOP system\u304c\u3068\u308a\u3042\u3048\u305a\u52d5\u304f\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u4e0b\u8a18\u307f\u305f\u3044\u306a\u611f\u3058\u3067named-object\u30af\u30e9\u30b9\u306esicp\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002method call\u3082(instance-name 'METHOD-NAME)\u307f\u305f\u3044\u306a\u611f\u3058\u3067instance.method()\u7684\u306a\u96f0\u56f2\u6c17\u3067\u3059\u3002\n\n```Scheme\n> (driver-loop) ; enter the Scheme with OOP interpreter\n\n;;; OO-Eval input\n(define sicp (new named-object 'SICP))\n\n;;; OO-Eval value:\n#<void>\n\n;;; OO-Eval input\n(sicp 'NAME)\n\n;;; OO-Eval value:\nSICP\n```\n\n\u3053\u306e\u6642\u70b9\u3067\u30b2\u30fc\u30e0\u3092\u8d77\u52d5\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u30b2\u30fc\u30e0\u4e16\u754c\u306e\u30af\u30e9\u30b9\u5b9a\u7fa9\u306foo-types.scm\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3067\u306a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u8ab2\u984c\u306ePDF\u306e8\u30da\u30fc\u30b8\u306b\u89e3\u8aac\u304c\u3042\u308a\u307e\u3059\u3002\"Mightly Chuck River\u306e\u5ddd\u5cb8\u306b\u3042\u308b\u7121\u540d\u306e\u5de5\u79d1\u5927\u5b66\"\u3092\u821e\u53f0\u306b\u3057\u3066\u3044\u308b\u305d\u3046\u3067\u3059(MIT\u306f\u30c1\u30e3\u30fc\u30eb\u30ba\u5ddd\u306e\u5ddd\u5cb8\u306b\u3042\u308b)\u3002\u81ea\u5206(avatar\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9)\u304c\u3044\u308b\u90e8\u5c4b\u306e\u69d8\u5b50\u3057\u304b\u898b\u3048\u306a\u3044\u3088\u3046\u3067\u3059\u304c\u3001DEITY-MODE(\u30cd\u7533\u30e2\u30fc\u30c9?)\u306b\u3059\u308b\u3068\u4ed6\u306e\u90e8\u5c4b\u3082\u898b\u3048\u308b\u3088\u3046\u306b\u30c1\u30fc\u30c8\u3067\u304d\u308b\u3068\u306e\u3053\u3068\u3002\n\n```Scheme\n> (run-game 'kaz-yos)\n\nAt green-building-roof zombie-of-george says -- uuuuUUUUuuuuh.. brains...\nYou are in great-court\nYou are not holding anything.\nYou see stuff in the room: flag-pole lovely-trees\nThere are no other people around you.\nThe exits are in directions: east north\n\n;;; OO-Eval input\n(screen 'DEITY-MODE #t)\n\n;;; OO-Eval value:\n#<void>\n```\n\u3068\u308a\u3042\u3048\u305a\u624b\u9803\u306a\u51f6\u5668\u3092\u3068\u601d\u3063\u3066\u65d7\u306e\u30dd\u30fc\u30eb\u3092\u53d6\u308d\u3046\u3068\u3057\u307e\u3057\u305f\u304c\u53d6\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u3088\u3063\u307d\u3069\u91cd\u3044\u306e\u3067\u3057\u3087\u3046\u3002\n\n```Scheme\n;;; OO-Eval input\n(me 'TAKE (thing-named 'flag-pole))\n\nAt great-court kaz-yos says -- I try but cannot take flag-pole\n;;; OO-Eval value:\n#f\n```\n\n\u897f\u306b\u5411\u3063\u3066\u307f\u308b\u3068PDF\u306b\u3042\u308b\u30b9\u30c8\u30fc\u30ea\u30fc\u306b\u51fa\u3066\u304f\u308b\u76f8\u68d2\u7684\u306a\u3072\u3068\u3092\u767a\u898b\u3057\u305f\u3088\u3046\u3067\u3059\u3002\n\n```Scheme\n;;; OO-Eval input\n(me 'GO 'east)\n\nkaz-yos moves from great-court to the-dot\nAt the-dot kaz-yos says -- Hi alyssa-p-hacker\n--- Clock tick 0 ---\nlem-e-tweakit moves from lobby-7 to dorm-row\nAt lobby-10 dr-v says -- I take math-book from lobby-10\ngjs moves from 10-250 to barker-library\nYou are in the-dot\nYou are not holding anything.\nYou see stuff in the room: dollar-bill\nYou see other people: alyssa-p-hacker\nThe exits are in directions: west north\n;;; OO-Eval value:\nOK\n```\n\navatar\u304c\u4f7f\u3048\u308b\u30e1\u30bd\u30c3\u30c9\u4e00\u89a7\u3002EMIT(\u653e\u3064?)\u3063\u3066\u306a\u3093\u3067\u3057\u3087\u3046\u306d\u3002\n\n```Scheme\n;;; OO-Eval input\n((me 'GET-CLASS) 'GET-METHODS)\n\n;;; OO-Eval value:\n(LOOK-AROUND\n GO\n CONSTRUCTOR\n SAY\n PEOPLE-AROUND\n STUFF-AROUND\n PEEK-AROUND\n TAKE\n DROP\n HAVE-FIT\n LOSE\n GO-EXIT\n GO\n ENTER-ROOM\n SUFFER\n DIE\n CHANGE-LOCATION\n ENTER-ROOM\n LEAVE-ROOM\n CONSTRUCTOR\n LOCATION\n EMIT\n DESTROY\n CONSTRUCTOR\n ADD-THING\n DEL-THING\n THINGS\n HAVE-THING?\n CONSTRUCTOR\n NAME\n DESTROY\n GET-CLASS)\n ```\n\n\u3053\u306e\u5f8c\u306fmixin\u3092\u5b9f\u88c5\u3059\u308b\u3068\u3044\u3046\u554f\u984c\u3082\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u529b\u5c3d\u304d\u307e\u3057\u305f\u3002\u3002\n\n# Lecture 7: Continuations, concurrency, lazy evalutation, and streams\n\n\u524d\u65e5\u306e\u6642\u70b9\u3067\u3001\u6b74\u53f2\u4e0a\u307e\u308c\u306b\u898b\u308b\u5927\u96ea\u306e\u4e88\u5831\u3067\u6388\u696d\u304c\u30ad\u30e3\u30f3\u30bb\u30eb\u3002\u30de\u30b5\u30c1\u30e5\u30fc\u30bb\u30c3\u30c4\u5dde\u77e5\u4e8b\u304c\u7dca\u6025\u4e8b\u614b\u5ba3\u8a00\u3057\u3061\u3083\u3063\u3066\u3001\u516c\u5171\u4ea4\u901a\u6a5f\u95a2\u306f\u52d5\u304b\u306a\u3044\u4e88\u5b9a\u3068\u306e\u3053\u3068\u3002\n\n=> \u7d50\u5c40\u4e38\u4e00\u65e5\u3001\u5468\u56f2\u306e\u5b66\u6821\u3082\u8077\u5834\u3082\u307f\u306a\u4f11\u307f\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002biomedical\u306e\u57fa\u790e\u7cfb\u306e\u7814\u7a76\u5ba4\u306b\u306f\u65e5\u672c\u4eba\u30dd\u30b9\u30c9\u30af\u3060\u3051\u306f\u6765\u3066\u3044\u305f\u307f\u305f\u3044\u3067\u3059\u304c\u3002\u3002\u3002\n\n\u4ee5\u964d\u306f\u3001\u5fa9\u7fd2\u8cc7\u6599(recitation; [PDF](http://web.mit.edu/alexmv/6.037/rec7.pdf))\u306e\u5185\u5bb9\u3060\u3051\u3044\u304f\u3064\u304b\u3002\n\n\n```Scheme\n;;; Stream operators\n;; Stream constructor macro (cdr part delayed)\n(define-syntax cons-stream\n  (syntax-rules ()\n    [(_ a b)\n     (cons a (delay b))]))\n\n;; Stream car part selector\n(define stream-car car)\n\n;; Stream cdr part selector (cdr part forced)\n(define stream-cdr\n  (lambda (s)\n    (force (cdr s))))\n```\n\n[delay\u3068force](http://people.cs.aau.dk/~normark/prog3-03/html/notes/eval-order_themes-delay-stream-section.html#eval-order_delay-force_title_1)\u306fGuile Scheme\u3067\u306fprimitive\u3068\u3057\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002delay\u306f\u8a08\u7b97\u3092\u9045\u5ef6\u3055\u305b\u3066\u3001\"\u547c\u3070\u308c\u305f\u3089\u8a08\u7b97\u3059\u308b\u3088\"\u3068\u3044\u3046\u610f\u5473\u306epromise\u3068\u3044\u3046\u3082\u306e\u3092\u8fd4\u3059\u3068\u306e\u3053\u3068\u3067\u3059\u3002\n\nR5RS\u3067\u306f\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u3044\u3088\u3046\u306a\u306e\u3067\u4e0b\u8a18\u306e\u69d8\u306bdelay\u3092\u30de\u30af\u30ed\u3068\u3057\u3066\u5b9a\u7fa9\u3001force\u3092\u901a\u5e38\u306eprocedure\u3068\u3057\u3066\u5b9a\u7fa9\u3059\u308c\u3070\u826f\u3044\u3088\u3046\u3067\u3059\u3002\n\n```Scheme\n;;; DIY implementation\n(define-syntax my-delay\n  (syntax-rules ()\n    [(delay expr)\n     (lambda ()\n       expr)]))\n(define (my-force delayed-expr)\n  (delayed-expr))\n\n(my-delay (+ 1 2))\n;; => #<procedure 10672d220 at <current input>:143:0 ()>\n(my-force (my-delay (+ 1 2)))\n;; => 3\n```\n\n\u8cc7\u6599\u306e\u4f8b\u3092\u3084\u3063\u3066\u307f\u307e\u3059\u30020\u304c\u306a\u3089\u3093\u3060\u7121\u9650sequence\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```Scheme\n;;; Infinite sequence of 0's\n(define zeros\n  (cons-stream\n   0\n   zeros))\n\nzeros\n;; => (0 . #<promise #<procedure 10719a840 at <current input>:22:2 ()>>)\n(stream-car zeros)\n;; => 0\n(stream-cdr zeros)\n;; => (0 . #<promise #-1#>)\n(stream-car (stream-cdr zeros))\n```\n\nstream\u7528\u306enth\u3092\u5b9a\u7fa9\u3057\u3066\u307f\u307e\u3059\u3002\u78ba\u304b\u306b\u305a\u3063\u30680\u304c\u7d9a\u3044\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n```Scheme\n(define (stream-nth s n)\n  (if (<= n 0)\n      (stream-car s)\n      (stream-nth (stream-cdr s) (- n 1))))\n;; 1 millionth element\n(stream-nth zeros 999999)\n;; => 0\n```\n\n\u305a\u3063\u3068\u540c\u3058\u6570\u5b57\u3060\u3068\u672c\u5f53\u306b\u8a08\u7b97\u3057\u3066\u3044\u308b\u304b\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u81ea\u7136\u6570\u306e\u7121\u9650\u6570\u5217\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002stream-cons\u3067\u306e\u3084\u308a\u304b\u305f\u304c\u601d\u3044\u3064\u304b\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a [Coursera Programming Languages](https://www.coursera.org/course/proglang)\u306e\u8ab2\u984c\u3067\u307f\u304b\u3051\u305f\u3084\u308a\u304b\u305f\u3067\u3084\u3063\u3066\u307f\u307e\u3059\u3002\n\n```Scheme\n;;; Infinite sequence of natural numbers\n(define nats\n  (letrec ([f (lambda (x)\n                (cons\n                 x\n                 (delay (f (+ x 1)))))])\n    (f 1)))\n\n;; First element\n(stream-car nats)\n;; => 1\n```\n\n\u95a2\u6570\u578b\u8a00\u8a9e\u3067\u3088\u304f\u898b\u639b\u3051\u308b\u3088\u3046\u306atake\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u6700\u521d\u306en\u500b\u306e\u8981\u7d20\u3092realize\u3057\u307e\u3059\u3002\n\n```Scheme\n;;; take for streams\n(define (take n s)\n  (map (lambda (x) (stream-nth s x)) (iota n)))\n;; First 10 elements\n(take 10 nats)\n;; => (1 2 3 4 5 6 7 8 9 10)\n```\n\n\u4e0a\u8a18\u306enats\u306e\u5b9a\u7fa9\u3060\u3068abstraction\u4e0d\u8db3\u306a\u611f\u3058\u304c\u3057\u307e\u3059\u3002\u5fa9\u7fd2\u8ab2\u984c\u3067\u306e\u89e3\u6cd5\u306f\u3053\u3093\u306a\u306e\u3067\u3057\u305f\u3002\n\n```Scheme\n;;; Define a function to map a binary operator over two streams\n(define (map2-stream op s1 s2)\n  (cons-stream\n   ;; Map the operator to first elements\n   (op (stream-car s1)\n       (stream-car s2))\n   ;; recurse\n   (map2-stream op\n                (stream-cdr s1)\n                (stream-cdr s2))))\n\n;; Arithmetic operators\n(define (add-streams s1 s2) (map2-stream + s1 s2))\n(define (sub-streams s1 s2) (map2-stream - s1 s2))\n(define (mul-streams s1 s2) (map2-stream * s1 s2))\n(define (div-streams s1 s2) (map2-stream / s1 s2))\n\n;; Infinite sequence of 1's\n(define ones (cons-stream 1 ones))\n\n;; Infinite sequence of natural numbers\n(define nats\n  (cons-stream\n   1\n   (add-streams nats ones)))\n\n;; First 10 elements\n(take 10 nats)\n;; => (1 2 3 4 5 6 7 8 9 10)\n```\n\n\u3059\u3054\u304fabstract\u306b\u306a\u3063\u3066\u4eca\u5ea6\u306f\u4f55\u304c\u8d77\u3063\u3066\u3044\u308b\u306e\u304b\u308f\u304b\u308a\u306b\u304f\u3044\u3067\u3059\u304c\u3001\u4e00\u500b\u3065\u3064\u305a\u308c\u306a\u304c\u30891\u306e\u7121\u9650\u6570\u5217\u304c\u3001\u7e26\u65b9\u5411\u306b\u8db3\u3057\u3042\u3052\u3089\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3057\u3087\u3046\u304b\u3002\u5f8c\u306b\u306a\u308b\u307b\u3069\u8db3\u30591\u306e\u6570\u304c\u5897\u3048\u3066\u3044\u304f\u3068\u3002\n\n```\n1 1 1 1 1 1 1 1 1 1 ....\n  1 1 1 1 1 1 1 1 1 1 ....\n    1 1 1 1 1 1 1 1 1 1 ....\n      1 1 1 1 1 1 1 1 1 1 ....\n        1 1 1 1 1 1 1 1 1 1 ....\n         ..........\n```\n\nStream\u306e\u304b\u3051\u7b97\u3092\u3064\u304b\u3048\u3070\u3053\u3093\u306a\u306e\u3082\u3067\u304d\u307e\u3059\u306d\u3002\n\n```Scheme\n;;; Infinite sequence of squared natural numbers\n(define squared-nats (mul-streams nats nats))\n\n(take 15 squared-nats)\n;; => (1 4 9 16 25 36 49 64 81 100 121 144 169 196 225)\n```\n\nClojure\u3060\u3068\u6a19\u6e96\u3067infinite sequence (\u3053\u308c\u3082stream\u3068\u547c\u3076\u306e\u3067\u3057\u3087\u3046\u304b?)\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u76f4\u3050\u3067\u304d\u307e\u3059\u306d\u3002\n\n```Clojure\n(defn square [n] (* n n))\n(def nats (iterate #(+ % 1) 1))\n(take 15 (map square nats))\n;; => (1 4 9 16 25 36 49 64 81 100 121 144 169 196 225)\n```\n\nFactorials\u3068\u3044\u3046\u554f\u984c\u306f\u3001stream\u7528\u306emap\u3092\u7528\u610f\u3057\u3066\u3053\u3093\u306a\u611f\u3058\u3067\u3057\u3087\u3046\u304b\u3002\u3053\u3061\u3089\u3067\u5148\u7a0b\u306esquared-nats\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u306d\u3002\n\n```Scheme\n;;; Infinite sequence of factorials\n(define (map-stream op s)\n  (cons-stream\n   (op (stream-car s))\n   (map-stream op\n               (stream-cdr s))))\n\n(define (factorial n)\n  (define (helper n acc)\n    (if (<= n 0)\n        acc\n        (helper (- n 1) (* acc n))))\n  (helper n 1))\n\n(define facts (map-stream factorial nats))\n(take 7 facts)\n;; => (1 2 6 24 120 720 5040)\n```\n\n[Code IQ\u3067\u51fa\u3066\u3044\u305f\u5186\u5468\u7387\u306e\u8fd1\u4f3c\u8a08\u7b97\u306e\u554f\u984c](https://codeiq.jp/magazine/2015/01/19157/)\u304c\u7de0\u3081\u5207\u3063\u305f\u306e\u3067\u3001stream\u3092\u4f7f\u3063\u3066\u3084\u3063\u3066\u307f\u307e\u3059\u3002\u307e\u305a\u306f\u6e96\u5099\u3068\u3057\u3066stream\u7528\u306efilter\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```Scheme\n;;; Stream filter\n(define (filter-stream pred s)\n  (if (pred (stream-car s))\n      (cons-stream (stream-car s) (filter-stream pred (stream-cdr s)))\n      (filter-stream pred (stream-cdr s))))\n\n(take 10 (filter-stream odd? nats))\n;; => (1 3 5 7 9 11 13 15 17 19)\n```\n\n\u5206\u6bcd\u3068\u5206\u5b50\u306e\u30da\u30a2\u306estream\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u5206\u6bcd\u3068\u5206\u5b50\u306estream\u3092\u500b\u5225\u306b\u4f5c\u6210\u3057\u3066\u3001\u5148\u7a0b\u306emap2-stream\u3067\u30da\u30a2\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n```Scheme\n;; Stream of numerator-denominator pairs\n(define numer-stream (cons-stream 4 squared-nats))\n(define denom-stream (filter-stream odd? nats))\n(define numer-denom-pair-stream (map2-stream list numer-stream denom-stream))\n\n(take 10 numer-denom-pair-stream)\n;; => ((4 1) (1 3) (4 5) (9 7) (16 9) (25 11) (36 13) (49 15) (64 17) (81 19))\n```\n\n\u3042\u3068\u306f\u4e00\u6bb5\u4e00\u6bb5\u306e\u8a08\u7b97\u306e\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002[\u3053\u3061\u3089](http://en.wikipedia.org/wiki/Approximations_of_\u03c0#Continued_fractions) \u306e\u4e8c\u500b\u76ee\u306e\u65b9\u6cd5\u3067\u3059\u3002\n\n```Scheme\n;;; Procedure to perform one step in the continued fraction method 2\n;; http://en.wikipedia.org/wiki/Approximations_of_\u03c0#Continued_fractions\n(define (add-and-devide lst acc)\n  (let ([a (car lst)]\n        [b (cadr lst)])\n    (/ a (+ b acc))))\n```\n\n\u6700\u521d\u306e\u65b9\u3067\u3082\u51fa\u3066\u304d\u305ffold-right\u3092\u4f7f\u3063\u3066\u307e\u3068\u3081\u307e\u3059\u3002\n\n```Scheme\n;;; fold-right procedure\n(define (foldr f init lst)\n  (if (null? lst)\n      init\n      (f (car lst)\n         (foldr f init (cdr lst)))))\n\n;;; Pi approximator\n(define (pi-calc n)\n  (foldr add-and-devide 0 (take n numer-denom-pair-stream)))\n\n;;; First 10 approximations\n(map pi-calc (take 10 nats))\n;; => (4 3 19/6 160/51 1744/555 644/205 2529/805 183296/58345 3763456/1197945 4317632/1374345)\n(map exact->inexact (map pi-calc (take 10 nats)))\n;; => (4.0 3.0 3.1666666666666665 3.1372549019607843 3.142342342342342 3.1414634146341465 3.1416149068322983 3.1415888250921244 3.1415933118799275 3.14159254044654)\n\n;; Reach the maximum precision at 22\n(map exact->inexact (map pi-calc (list 1 10 21 22 100 1000)))\n;; => (4.0 3.14159254044654 3.1415926535897936 3.141592653589793 3.141592653589793 3.141592653589793)\n```\n\n22\u56de\u76ee\u3067\u6d6e\u52d5\u5c0f\u6570\u70b9\u6f14\u7b97\u306e\u9650\u754c\u5024\u307e\u3067\u81f3\u308b\u3088\u3046\u3067\u3059\u3002\n\n\n# Lecture 8: Memory management, garbage collection, and the lambda calculus\n\n\u6700\u7d42\u65e5\u3002\u306a\u305c\u304b\u53c2\u52a0\u8005\u306f\u6700\u521d\u306e\u534a\u5206\u5f31(20\u540d\u3050\u3089\u3044)\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u304c\u3002\u3002\u5185\u5bb9\u306flambda\u304c\u3042\u308c\u3070\u306a\u3093\u3067\u3082\u3067\u304d\u308b!\u3068\u3044\u3046\u306f\u306a\u3057\u3068\u3001Lecture 7\u306econtinuation, concurrency, stream\u3092\u7121\u7406\u77e2\u7406\u3064\u3081\u3053\u3093\u3060\u611f\u3058\u3067\u3057\u305f\u3002\n\n\u307e\u305a\u3001\u6700\u521d\u306bScheme\u3067Scheme\u306eevaluator\u3092\u66f8\u304f(meta-circular evaluator)\u3068\u3044\u3046\u884c\u70ba\u306f\u610f\u5473\u304c\u3042\u308b\u306e\u304b\u3068\u3044\u3046\u8a71\u3002\u3053\u308c\u306f\u4f55\u3082evaluator\u3060\u3051\u3067\u306f\u306a\u304f\u3066\u3001compiler\u3082\u66f8\u3051\u308b\u3088\u3068\u3002\u3064\u307e\u308a\u3001Scheme\u3067Scheme -> Assembly\u306e\u5909\u63db\u3092\u884c\u3046compiler\u3092\u66f8\u304f\u3002\u3053\u3053\u306bScheme\u3067\u66f8\u304b\u308c\u305fScheme\u306eevaluator\u3092\u901a\u3059\u3068\u3001assembly\u3067\u66f8\u304b\u308c\u305fScheme evaluator\u304c\u51fa\u6765\u308b\u3068\u3002\u3055\u3089\u306b\u3001compiler\u81ea\u4f53\u3092\u305d\u306ecompiler\u306b\u901a\u3059\u3068\u3001assembly\u3067\u66f8\u304b\u308c\u305fScheme -> Assembly\u306ecompiler\u304c\u51fa\u6765\u308b\u3068\u306e\u3053\u3068([\u30b9\u30e9\u30a4\u30c9p22\u3088\u308a](http://web.mit.edu/alexmv/6.037/l8-transitions.pdf))\u3002\u306a\u308b\u307b\u3069\u3053\u308c\u306a\u3089\u5b9f\u7528\u6027\u304c\u3042\u308b\u884c\u70ba\u306b\u601d\u3048\u307e\u3059\u306d\u3002\n\n\nlambda calculus\u306e\u90e8\u5206\u306f\u3069\u3053\u307e\u3067primitive\u3092\u6e1b\u3089\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u304b\u3044\u3046\u5c0e\u5165\u304b\u3089\u3001if\u306e\u3088\u3046\u306aspecial form\u3084boolean\u3082\u4ed6\u306e\u3082\u306e(lambda)\u3067\u8868\u73fe\u3067\u304d\u308b\u3001\u6570\u5b57\u3059\u3089Church number\u3068\u3044\u3046\u304b\u305f\u3061\u3067lambda\u3067\u8868\u73fe\u3067\u304d\u308b\u3068\u3044\u3046\u3088\u3046\u306a\u306f\u306a\u3057\u3067\u3057\u305f\u3002\n\n\u305f\u3068\u3048\u3070cons cell\u3068car/cdr\u306f\u4e0b\u8a18\u306e\u69d8\u306blambda\u3060\u3051\u3067\u8868\u308f\u305b\u308b\u3088\u3046\u3067\u3059\u3002cons cell\u304cprocedure\u3092\u5f15\u6570c\u3068\u3057\u3066\u3068\u308bprocedure\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002car/cdr\u306f\u305d\u308c\u305e\u308c\u4e8c\u3064\u5f15\u6570\u3092\u3068\u3063\u3066\u524d\u8005/\u5f8c\u8005\u3092\u8fd4\u3059procedure\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u304ccons cell\u306b\u6e21\u308b\u3068a\u3068b\u306bcar/cdr\u304c\u9069\u7528\u3055\u308c\u3066\u524d\u8005/\u5f8c\u8005\u304c\u3068\u308a\u3060\u3055\u308c\u308b\u3068\u3044\u3046\u3053\u3068\u306e\u3088\u3046\u3067\u3059\u3002\n\n```Scheme\n;;; pair construction and selection\n(define (cons a b)\n  (lambda (c)\n    (c a b)))\n(define (car p)\n  (p (lambda (a b) a)))\n(define (cdr p)\n  (p (lambda (a b) b)))\n\n(define pair1 (cons 1 (cons 2 '())))\n(car pair1)\n;; => 1\n(cdr pair1)\n;; => #<procedure 10ac241b0 at <current input>:5:2 (c)>\n(car (cdr pair1))\n;; => 2\n```\n\nBoolean\u3068and\u3082\u4e0b\u8a18\u306e\u3054\u3068\u304fprocedure\u3067\u8868\u3055\u308c\u308b\u3088\u3046\u3067\u3059\u3002\n\n```Scheme\n(define (true x)\n  (lambda (y) x))\n\n(define (false x)\n  (lambda (y) y))\n\n(define (and a b)\n  ((a b) false))\n\n(and true true)\n;; ((true true) false)\n;; ((lambda (y) true) false)\n;; true\n;; => #<procedure true (x)>\n\n(and true false)\n;; ((true false) false)\n;; ((lambda (y) false) false)\n;; false\n;; => #<procedure false (x)>\n```\n\n\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u304c\u7d42\u3063\u305f\u3068\u304d\u306b\u3001\u3053\u308c\u3067\u3042\u306a\u305f\u3082Order of Lambda (\u30e9\u30e0\u30c0\u56e3?)\u306e\u4e00\u54e1\u3060!\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u30e9\u30e0\u30c0\u56e3\u306e\u7f36\u30d0\u30c3\u30b8\u3092\u8cb0\u3044\u307e\u3057\u305f\u3002\u666e\u901a\u306b\u3046\u308c\u3057\u304b\u3063\u305f\u3067\u3059\u3002\n\n![lambda.png](https://qiita-image-store.s3.amazonaws.com/0/41237/66890512-d4a5-1f8a-bc93-02f42dc3cf2f.png)\n\nContinuation\u3068\u3044\u3046\u6982\u5ff5\u306f\u4eca\u56de\u521d\u3081\u3066\u5b66\u3093\u3060\u306e\u3067\u4f8b\u793a\u3057\u3066\u304a\u304d\u307e\u3059\u3002[\u3053\u3061\u3089\u306e\u8cc7\u6599](http://web.mit.edu/alexmv/6.037/l7-continuations.pdf) \u306e\u5206\u306b\u306a\u308a\u307e\u3059\u3002continuation\u3068\u3044\u3046\u306e\u306f\u3001\"\u3067\u3001\u305d\u306eprocedure\u306e\u8fd4\u3059\u7d50\u679c\u3067\u4f55\u3092\u3057\u305f\u3044\u306e\"\u3068\u3044\u3046\u554f\u3044\u306b\u5bfe\u3059\u308b\u7b54\u3048\u3068\u3044\u3046\u3053\u3068\u306e\u3088\u3046\u3067\u3059\u3002\u3064\u307e\u308a\u3001\u73fe\u5728\u306eprocedure\u304c\u7d50\u679c\u3092\u8fd4\u3057\u305f\u5f8c\u306e\u6b8b\u308a\u306e\u8a08\u7b97\u3067\u3059\u3002\u3053\u306e\u6b8b\u308a\u306e\u8a08\u7b97\u3092procedure\u3068\u3057\u3066\u6e21\u3057\u3066\u3044\u304f\u5f62\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092continuation passing sytle\u3068\u3044\u3046\u3088\u3046\u3067\u3059\u3002\u8cc7\u6599\u306e\u4f8b\u3092\u898b\u3066\u307f\u307e\u3059\u3002\u4f8b\u306f\u304a\u306a\u3058\u307f\u306efactorial\u3067\u3059\u3002\n\n\u307e\u305a\u306f\u3001\u901a\u5e38\u306e\u518d\u5e30\u3068\u672b\u5c3e\u518d\u5e30\u3067\u3059\u3002\u518d\u5e30\u3067\u306f\u8a08\u7b97\u307e\u3061\u304c\u30b9\u30bf\u30c3\u30af\u3092\u6d88\u8cbb\u3059\u308b\u69d8\u5b50\u304c\u4e09\u89d2\u5f62\u304b\u3089\u898b\u3066\u3068\u308c\u307e\u3059\u3002\n\n```Scheme\n;;; Regular linear recursion\n(define (factorial n)\n  (if (= n 0)\n      1\n      (* n (factorial (- n 1)))))\n;;\n;; scheme@(guile-user)> ,trace (factorial 5)\n;; trace: |  (#<procedure 105893500> #(#<directory (guile-user) 1048f2c60> #f))\n;; trace: |  #(#<directory (guile-user) 1048f2c60> factorial)\n;; trace: (#<procedure 105896880 at <current input>:129:7 ()>)\n;; trace: (factorial 5)\n;; trace: |  (factorial 4)\n;; trace: |  |  (factorial 3)\n;; trace: |  |  |  (factorial 2)\n;; trace: |  |  |  |  (factorial 1)\n;; trace: |  |  |  |  |  (factorial 0)\n;; trace: |  |  |  |  |  1\n;; trace: |  |  |  |  1\n;; trace: |  |  |  2\n;; trace: |  |  6\n;; trace: |  24\n;; trace: 120\n```\n\n\u672b\u5c3e\u518d\u5e30(\u5b9f\u8cea\u30eb\u30fc\u30d7)\u306b\u3059\u308b\u3068\"\u73fe\u5728\u307e\u3067\u306e\u8a08\u7b97\u7d50\u679c\u306e\u5024\"\u3092\u9806\u6b21accmulator\u306b\u305f\u3081\u306a\u304c\u3089\u9032\u3081\u3066\u3044\u304f\u305f\u3081\u3001\u30b9\u30bf\u30c3\u30af\u304c\u5897\u3048\u307e\u305b\u3093\u3002\n\n```Scheme\n;;; Tail-recursion (iterative)\n(define (fact-helper n acc)\n    (if (zero? n)\n        acc\n        (fact-helper (- n 1) (* acc n))))\n(define (fact-iter n)\n  (fact-helper n 1))\n;;\n;; scheme@(guile-user)> ,trace (fact-iter 5)\n;; trace: |  (#<procedure 10bb63440> #(#<directory (guile-user) 10afb6c60> #f))\n;; trace: |  #(#<directory (guile-user) 10afb6c60> fact-iter)\n;; trace: (#<procedure 10bb79c80 at <current input>:142:7 ()>)\n;; trace: (fact-iter 5)\n;; trace: (fact-helper 5 1)\n;; trace: (fact-helper 4 5)\n;; trace: (fact-helper 3 20)\n;; trace: (fact-helper 2 60)\n;; trace: (fact-helper 1 120)\n;; trace: (fact-helper 0 120)\n;; trace: 120\n```\n\n\u4e0b\u8a18\u304ccontinuation passing sytle (\u4ee5\u4e0bCPS)\u3067\u3059\u3002\u5f62\u614b\u3068\u3057\u3066\u306f\u672b\u5c3e\u518d\u5e30\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u901a\u5e38\u306eiteration\u3067\u306f\"\u73fe\u5728\u307e\u3067\u306e\u8a08\u7b97\u7d50\u679c\u306e\u5024\"\u304c\u3042\u3063\u305f\u90e8\u5206\u306bprocedure\u304c\u5b58\u5728\u3059\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u3001\"\u73fe\u5728\u307e\u3067\u306e\u8a08\u7b97\u7d50\u679c\u306e\u5024\"\u306e\u304b\u308f\u308a\u306b\"\u3053\u308c\u304b\u3089\u306e\u8a08\u7b97\u65b9\u6cd5(procedure)\"\u3092\u6e21\u3057\u3066\u3044\u307e\u3059\u3002\u4e00\u756a\u6700\u521d\u306b\u6e21\u3057\u3066\u3044\u308b\u306e\u306fidentity procedure\u3067\u3001fact-cps 5\u306e\u7d50\u679c\u304c\u3067\u305f\u3089\u3001\"\u305d\u3053\u304b\u3089\u306f\u305f\u3060\u305d\u306e\u307e\u307e\u5024\u3092\u304f\u308c\"\u3068\u3044\u3046\u6307\u793a\u3092\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\u4ee5\u964d\u306f\u3053\u306e\u7c21\u5358\u306a\u6307\u793a\u66f8\u306b\u6b21\u3005\u3068\u6307\u793a\u3092\u66f8\u304d\u3053\u3093\u3067\u306f\u6e21\u3057\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n```Scheme\n;;; Continuation passing style\n(define (fact-cps n cont)\n  (if (zero? n)\n      (cont 1)\n      (fact-cps (- n 1)\n                (lambda (x) (cont (* n x))))))\n;;\n;; scheme@(guile-user)> ,trace (fact-cps 5 (lambda (x) x))\n;; trace: |  (#<procedure 1053fb140> #(#<directory (guile-user) 1048f2c60> #f))\n;; trace: |  #(#<directory (guile-user) 1048f2c60> fact-cps)\n;; trace: (#<procedure 1054426a0 at <current input>:198:7 ()>)\n;; trace: (fact-cps 5 #<procedure 10557d820 at <current input>:198:19 (x)>)\n;; trace: (fact-cps 4 #<procedure 105583b70 at <current input>:160:16 (x)>)\n;; trace: (fact-cps 3 #<procedure 105745c60 at <current input>:160:16 (x)>)\n;; trace: (fact-cps 2 #<procedure 105745090 at <current input>:160:16 (x)>)\n;; trace: (fact-cps 1 #<procedure 105807180 at <current input>:160:16 (x)>)\n;; trace: (fact-cps 0 #<procedure 1058ef2a0 at <current input>:160:16 (x)>)\n;; trace: (#<procedure 1058ef2a0 at <current input>:160:16 (x)> 1)\n;; trace: (#<procedure 105807180 at <current input>:160:16 (x)> 1)\n;; trace: (#<procedure 105745090 at <current input>:160:16 (x)> 2)\n;; trace: (#<procedure 105745c60 at <current input>:160:16 (x)> 6)\n;; trace: (#<procedure 105583b70 at <current input>:160:16 (x)> 24)\n;; trace: (#<procedure 10557d820 at <current input>:198:19 (x)> 120)\n;; trace: 120\n```\n\n\u4e0a\u8a18\u306e\u3082\u306e\u3060\u3051\u3060\u3068\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u5177\u4f53\u5316\u3057\u3066\u307f\u307e\u3059\u3002\u6700\u521d\u306fidentity procedure(\"\u7d50\u679c\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\")\u3067\u3059\u304c\u3001\u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u306f\"\u7d50\u679c\u306b5\u3092\u304b\u3051\u308b\u3001\u305d\u306e\u307e\u307e\u8fd4\u3059\"\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u6b21\u3067\u306f\u3001\"\u7d50\u679c\u306b4\u3092\u304b\u3051\u308b\u3001\u7d50\u679c\u306b5\u3092\u304b\u3051\u308b\u3001\u305d\u306e\u307e\u307e\u8fd4\u3059\"\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u6700\u7d42\u7684\u306bfact-cps 0\u306e\u7d50\u679c\u306b\"1,2,3,4,5\u3092\u9806\u756a\u306b\u304b\u3051\u308b\u3001\u305d\u306e\u307e\u307e\u8fd4\u3059\"\u3068\u3044\u3046\u6307\u793a\u66f8\u304cprocedure\u3068\u3057\u3066\u308f\u305f\u3063\u3066\u3044\u307e\u3059\u3002\n\n```Scheme\n;;; Continuation passing in action\n;; Want to return the result of fact-cps 5\n(fact-cps 5 (lambda (x) x))\n;; Want to multiply the result of fact-cps 4 with 5, and return\n(fact-cps 4 (lambda (x) ((lambda (x) x) (* 5 x))))\n;; Want to multiply the result of fact-cps 3 with 4 and 5, and return\n(fact-cps 3 (lambda (x) ((lambda (x) ((lambda (x) x) (* 5 x))) (* 4 x))))\n;; Want to multiply the result of fact-cps 2 with 3, 4, and 5, and return\n(fact-cps 2 (lambda (x) ((lambda (x) ((lambda (x) ((lambda (x) x) (* 5 x))) (* 4 x))) (* 3 x))))\n;; Want to multiply the result of fact-cps 1 with 2, 3, 4, and 5, and return\n(fact-cps 1 (lambda (x) ((lambda (x) ((lambda (x) ((lambda (x) ((lambda (x) x) (* 5 x))) (* 4 x))) (* 3 x))) (* 2 x))))\n;; Want to multiply the result of fact-cps 0 with 1, 2, 3, 4, and 5, and return\n(fact-cps 0 (lambda (x) ((lambda (x) ((lambda (x) ((lambda (x) ((lambda (x) ((lambda (x) x) (* 5 x))) (* 4 x))) (* 3 x))) (* 2 x))) (* 1 x))))\n```\n\nfact-cps 0\u306fif\u5f0f\u304ctrue\u306b\u306a\u308a\u307e\u3059\u306e\u3067\u3001(cont 1)\u3001\u3064\u307e\u308a\u3001\u6e21\u3055\u308c\u305f\u6307\u793a\u66f8(procedure)\u30921\u306b\u9069\u7528\u305b\u3088\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3064\u307e\u308a\u3001\"1\u3092\u3068\u308b\u30011,2,3,4,5\u3092\u9806\u756a\u306b\u304b\u3051\u308b\u3001\u305d\u306e\u307e\u307e\u8fd4\u3059\"\u3068\u3044\u3046\u5f0f\u304c\u5b8c\u6210\u3057\u3066\u5b9f\u884c\u304c\u958b\u59cb\u3055\u308c\u307e\u3059\u3002\u5177\u4f53\u7684\u306b\u306f\u4e0b\u8a18\u306e\u69d8\u306b\u305f\u307e\u306d\u304e\u306e\u76ae\u3092\u3080\u304f\u3088\u3046\u306blambda\u3092\u5916\u304b\u3089\u3080\u3044\u3066\u3044\u304d\u307e\u3059\u3002\u6700\u7d42\u7684\u306b\u306f\"120\u3092\u3068\u308b\u3001\u305d\u306e\u307e\u307e\u8fd4\u3059\"\u3068\u3044\u3046\u5f0f\u306b\u306a\u308a\u3001120\u3068\u3044\u3046\u8a55\u4fa1\u7d50\u679c\u304c\u3067\u307e\u3059\u3002\n\n```Scheme\n;;; Passed procedures are executed\n;; (cont 1)\n((lambda (x) ((lambda (x) ((lambda (x) ((lambda (x) ((lambda (x) ((lambda (x) x) (* 5 x))) (* 4 x))) (* 3 x))) (* 2 x))) (* 1 x))) 1)\n((lambda (x) ((lambda (x) ((lambda (x) ((lambda (x) ((lambda (x) x) (* 5 x))) (* 4 x))) (* 3 x))) (* 2 x))) (* 1 1))\n\n((lambda (x) ((lambda (x) ((lambda (x) ((lambda (x) ((lambda (x) x) (* 5 x))) (* 4 x))) (* 3 x))) (* 2 x))) 1)\n((lambda (x) ((lambda (x) ((lambda (x) ((lambda (x) x) (* 5 x))) (* 4 x))) (* 3 x))) (* 2 1))\n\n((lambda (x) ((lambda (x) ((lambda (x) ((lambda (x) x) (* 5 x))) (* 4 x))) (* 3 x))) 2)\n((lambda (x) ((lambda (x) ((lambda (x) x) (* 5 x))) (* 4 x))) (* 3 2))\n\n((lambda (x) ((lambda (x) ((lambda (x) x) (* 5 x))) (* 4 x))) 6)\n((lambda (x) ((lambda (x) x) (* 5 x))) (* 4 6))\n\n((lambda (x) ((lambda (x) x) (* 5 x))) 24)\n((lambda (x) x) (* 5 24))\n\n((lambda (x) x) 120)\n120\n```\n\nScheme\u3067\u306f\u3053\u306econtinuation(\"\u8a08\u7b97\u7d50\u679c\u306b\u5bfe\u3057\u3066\u3001\u4eca\u5f8c\u3084\u308b\u3053\u3068\")\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u6349\u3048\u3066\u4fdd\u5b58\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u305d\u3046\u3067\u3059\u3002\u4f8b\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\n```Scheme\n;;; call/cc example\n;; define a variable\n(define c #f)\n\n;; set! c as continuation in following\n(+ 10 (* 3 (call/cc\n            (lambda (cont)\n              (set! c cont)\n              (cont 5)))))\n;; => 25\n```\ncall/cc\u306f\u81ea\u5206\u306e\u5916\u5074\u306b\u3042\u308b\u5f0f\u3001\u3064\u307e\u308a\u3001(call/cc ...)\u306e\u7d50\u679c\u306b\u5bfe\u3057\u3066\u884c\u3046\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u308b\u8a08\u7b97\u3092\u6349\u3048\u307e\u3059\u3002\u81ea\u5206\u306e\u62ec\u5f27\u306e\u5916\u5074\u306b\u51fa\u3066\u3044\u3063\u3066\u3001\u6b8b\u308a\u306e\u8a08\u7b97\u3092\u304b\u304d\u3042\u3064\u3081\u3066\u304f\u308b\u308f\u3051\u3067\u3059\u306d\u3002\u4ed6\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u6982\u5ff5\u3068\u5927\u304d\u304f\u9055\u3063\u3066\u3044\u308b\u611f\u3058\u304c\u3057\u307e\u3059\u3002\u305d\u306e\u6b8b\u308a\u306e\u8a08\u7b97continuation(\u5b9f\u8cea\u306fprocedure)\u306fcall/cc\u306e\u5f15\u6570\u306b\u306a\u3063\u3066\u3044\u308bprocedure\u306b\u6e21\u3055\u308c\u307e\u3059(cont\u306b\u306a\u308a\u307e\u3059)\u3002\"\u305d\u306e\u6b8b\u308a\u306e\u8a08\u7b97(continuation)\"\u304c\u3001c\u3068\u7d50\u3073\u3064\u3051\u3089\u308c\u307e\u3059\u3002\u6b21\u306b\"\u305d\u306e\u6b8b\u308a\u306e\u8a08\u7b97(continuation)\"\u304c5\u306b\u9069\u7528\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u6642\u70b9\u3067\u4e0b\u8a18\u306elambda\u90e8\u5206\u306b5\u304c\u3064\u3063\u3053\u307e\u308c\u3066\u5b9f\u884c\u3055\u308c\u308b\u611f\u3058\u3067\u3057\u3087\u3046\u304b\u3002call/cc\u306f\u81ea\u5206\u306e\u5916\u5074\u306b\u3042\u308b\u6b8b\u308a\u306e\u8a08\u7b97\u3092\u6301\u3063\u3066\u3044\u3063\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u3001\u3053\u306e\u5916\u5074\u306b\u306f\u306a\u306b\u3082\u306a\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u306e\u3067\u300125\u304c\u51fa\u3066\u8a08\u7b97\u7d42\u4e86\u3067\u3059\u3002\n\n```Scheme\n(cont 5)\n((lambda (x) (+ 10 (* 3 x))) 5)\n(+ 10 (* 3 5))\n25\n```\n\n\u304a\u3082\u3057\u308d\u3044\u306e\u306fc\u306b\u6349\u3048\u3089\u308c\u3066\u3044\u308b\u3001\"\u6b8b\u308a\u306e\u8a08\u7b97(continuation)\"\u3092\u9069\u7528\u3057\u3066\u307f\u305f\u5834\u5408\u3067\u3059\u30023\u3068\u3044\u3046\u5024\u306b\"\u3053\u306e\u6b8b\u308a\u306e\u8a08\u7b97\"\u3092\u9069\u7528\u3059\u308b\u3068\u4e88\u60f3\u901a\u308a3\u500d\u3057\u306610\u3092\u8db3\u3057\u306619\u306b\u306a\u308a\u307e\u3059\u3002\n\n```Scheme\n(c 3)\n;; => 19\n```\n\n\u3057\u304b\u3057\u3001\u305d\u306e\u307e\u308f\u308a\u306b\u66f4\u306b\u5f0f\u304c\u3042\u3063\u305f\u5834\u5408\u306f\u7121\u8996\u3055\u308c\u3066\u3084\u3063\u3071\u308a19\u306b\u306a\u308a\u307e\u3059\u3002\u306a\u305c\u306a\u3089\u30013\u3068\u3044\u3046\u5024\u306b\u5bfe\u3059\u308b\"\u6b8b\u308a\u306e\u8a08\u7b97\"\u306f\u3001\"3\u500d\u3057\u306610\u3092\u8db3\u3059\"\u3060\u3051\u3060\u304b\u3089\u3067\u3059\u3002\u8a08\u7b97\u3092\u6a2a\u53d6\u308a\u3057\u3066\u30aa\u30ec\u30aa\u30ec\u7d50\u672b\u3092\u62bc\u3057\u4ed8\u3051\u3066\u3044\u308b\u308f\u3051\u3067\u3059\u306d\u3002\n\n```Scheme\n(+ 3 (* 99 (c 3)))\n;; => 19\n```\n\ncontinuation\u3092\u9069\u7528\u3059\u308b\u524d\u306b\u3042\u308b\u3082\u306e\u306f\u5148\u306b\u8a55\u4fa1\u3055\u308c\u307e\u3059\u306e\u3067\u5f71\u97ff\u3092\u53d7\u3051\u307e\u305b\u3093\u3002\u4e0b\u8a18\u3067\u306f9\u304c\u8a08\u7b97\u3055\u308c\u305f\u6642\u70b9\u3067\"\u6b8b\u308a\u306e\u8a08\u7b97\"\u306f\u3001\"3\u500d\u3057\u306610\u3092\u8db3\u3059\"\u3060\u3051\u306b\u306a\u3063\u3066\u300137\u3068\u306a\u308a\u307e\u3059\u3002\n\n```Scheme\n(+ 3 (* 99 (c (* 3 3))))\n;; => 37\n```\n\n\u3053\u308c\u306e\u4f7f\u3044\u9053\u306f\u3001\u3001\u8cc7\u6599\u3067\u306fmulti-thread\u3082\u3069\u304d(?)\u3092\u4f5c\u6210\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u304c\u3001\u6b63\u76f4\u5341\u5206\u7406\u89e3\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n\n# \u7dcf\u62ec\n\nLisp\u306e\u8056\u5730MIT\u3067\u7c21\u7565\u7248SICP(\u30b7\u30af\u30d4\u30fc)\u306e\u6388\u696d([6.037](http://web.mit.edu/alexmv/6.037/))\u3092\u53d7\u8b1b\u3057\u305f\u306e\u3067\u3001\u307e\u3068\u3081\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\u79c1\u306f\u666e\u6bb5R\u3050\u3089\u3044\u3057\u304b\u66f8\u304b\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u8a55\u4fa1\u306b\u304a\u3051\u308benvironment\u3068scope\u306e\u6982\u5ff5\u306e\u7406\u89e3\u304c\u9032\u3093\u3060\u306e\u306f\u6709\u7528\u3060\u3063\u305f\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u8cc7\u6599\u306b\"Scheme is useful because code and data are just a quote away\"\u3068\u3044\u3046\u540d\u8a00\u304c\u3042\u308a\u307e\u3057\u305f([\u30b9\u30e9\u30a4\u30c9p17](http://web.mit.edu/alexmv/6.037/l8-transitions.pdf))\u3002\u30b3\u30fc\u30c9\u3068\u30c7\u30fc\u30bf\u8868\u73fe\u306e\u540c\u4e00\u6027(homoiconicity)\u3068\u3044\u3046\u3053\u3068\u306e\u7406\u89e3\u304c\u82e5\u5e72\u5f97\u3089\u308c\u3066(Lecture 4\u53c2\u7167)\u3001[Lisp\u306e\u609f\u308a](http://qiita.com/g000001/items/a31c150df1e3213b7329#\u307e\u3068\u3081) \u306b\u5c11\u3057\u8fd1\u3065\u3044\u305f\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n", "tags": ["SICP", "Scheme", "Racket", "lisp"]}