{"context": " More than 1 year has passed since last update.Java8 \u30b9\u30c8\u30ea\u30fc\u30e0\u8133\u3060\u3051\u3069 Window \u304c\u30b9\u30de\u30fc\u30c8\u306b\u66f8\u3051\u306a\u3044\u82e6\u3057\u307f\u2026\n\u6700\u7d42\u51fa\u529b\u306f\u624b\u629c\u304d\u306b\u306a\u3063\u305f\u3051\u3069\u5927\u4e08\u592b\u3060\u554f\u984c\u306a\u3044\npublic class ZundokoCheckerWithJava8Stream {\n    public static void main(String[] args) {\n        final Window<String> window = new Window<>(5);\n\n        Stream.generate(() -> Math.random() <= 0.5 ? \"\u30ba\u30f3\" : \"\u30c9\u30b3\")\n            .map(window::next)\n            .peek(System.out::println)\n            .filter(z -> z.isPresent() && String.join(\",\", z.get()).equals(\"\u30ba\u30f3,\u30ba\u30f3,\u30ba\u30f3,\u30ba\u30f3,\u30c9\u30b3\"))\n            .findFirst();\n        System.out.println(\"\u30ad\u30fb\u30e8\u30fb\u30b7\uff01\");\n    }\n\n    public static class Window<T> {\n        final int size;\n        final List<T> elements;\n\n        public Window(int size) {\n            this.size = size;\n            elements = new ArrayList<>();\n        }\n\n        public Optional<List<T>> next(T element) {\n            while (wakuwoakeru())\n                ;\n            elements.add(element);\n            return peek();\n        }\n\n        private boolean wakuwoakeru() {\n            if (elements.size() < size) {\n                return false;\n            }\n\n            elements.remove(0);\n            return true;\n        }\n\n        public Optional<List<T>> peek() {\n            if (elements.size() < size) {\n                return Optional.empty();\n            }\n            return Optional.of(elements);\n        }\n    }\n}\n\n\n\u51fa\u529b\u4f8b\nOptional.empty\nOptional.empty\nOptional.empty\nOptional.empty\nOptional[[\u30c9\u30b3, \u30c9\u30b3, \u30c9\u30b3, \u30c9\u30b3, \u30ba\u30f3]]\nOptional[[\u30c9\u30b3, \u30c9\u30b3, \u30c9\u30b3, \u30ba\u30f3, \u30ba\u30f3]]\nOptional[[\u30c9\u30b3, \u30c9\u30b3, \u30ba\u30f3, \u30ba\u30f3, \u30ba\u30f3]]\nOptional[[\u30c9\u30b3, \u30ba\u30f3, \u30ba\u30f3, \u30ba\u30f3, \u30c9\u30b3]]\nOptional[[\u30ba\u30f3, \u30ba\u30f3, \u30ba\u30f3, \u30c9\u30b3, \u30ba\u30f3]]\nOptional[[\u30ba\u30f3, \u30ba\u30f3, \u30c9\u30b3, \u30ba\u30f3, \u30ba\u30f3]]\nOptional[[\u30ba\u30f3, \u30c9\u30b3, \u30ba\u30f3, \u30ba\u30f3, \u30ba\u30f3]]\nOptional[[\u30c9\u30b3, \u30ba\u30f3, \u30ba\u30f3, \u30ba\u30f3, \u30ba\u30f3]]\nOptional[[\u30ba\u30f3, \u30ba\u30f3, \u30ba\u30f3, \u30ba\u30f3, \u30ba\u30f3]]\nOptional[[\u30ba\u30f3, \u30ba\u30f3, \u30ba\u30f3, \u30ba\u30f3, \u30c9\u30b3]]\n\u30ad\u30fb\u30e8\u30fb\u30b7\uff01\n\n\nJava8 \u30b9\u30c8\u30ea\u30fc\u30e0\u8133\u3060\u3051\u3069 Window \u304c\u30b9\u30de\u30fc\u30c8\u306b\u66f8\u3051\u306a\u3044\u82e6\u3057\u307f\u2026\n\u6700\u7d42\u51fa\u529b\u306f\u624b\u629c\u304d\u306b\u306a\u3063\u305f\u3051\u3069\u5927\u4e08\u592b\u3060\u554f\u984c\u306a\u3044\n\n```java\npublic class ZundokoCheckerWithJava8Stream {\n\tpublic static void main(String[] args) {\n\t\tfinal Window<String> window = new Window<>(5);\n\n\t\tStream.generate(() -> Math.random() <= 0.5 ? \"\u30ba\u30f3\" : \"\u30c9\u30b3\")\n\t\t\t.map(window::next)\n\t\t\t.peek(System.out::println)\n\t\t\t.filter(z -> z.isPresent() && String.join(\",\", z.get()).equals(\"\u30ba\u30f3,\u30ba\u30f3,\u30ba\u30f3,\u30ba\u30f3,\u30c9\u30b3\"))\n\t\t\t.findFirst();\n\t\tSystem.out.println(\"\u30ad\u30fb\u30e8\u30fb\u30b7\uff01\");\n\t}\n\n\tpublic static class Window<T> {\n\t\tfinal int size;\n\t\tfinal List<T> elements;\n\n\t\tpublic Window(int size) {\n\t\t\tthis.size = size;\n\t\t\telements = new ArrayList<>();\n\t\t}\n\n\t\tpublic Optional<List<T>> next(T element) {\n\t\t\twhile (wakuwoakeru())\n\t\t\t\t;\n\t\t\telements.add(element);\n\t\t\treturn peek();\n\t\t}\n\n\t\tprivate boolean wakuwoakeru() {\n\t\t\tif (elements.size() < size) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\telements.remove(0);\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic Optional<List<T>> peek() {\n\t\t\tif (elements.size() < size) {\n\t\t\t\treturn Optional.empty();\n\t\t\t}\n\t\t\treturn Optional.of(elements);\n\t\t}\n\t}\n}\n```\n\n\n\n\n```text:\u51fa\u529b\u4f8b\nOptional.empty\nOptional.empty\nOptional.empty\nOptional.empty\nOptional[[\u30c9\u30b3, \u30c9\u30b3, \u30c9\u30b3, \u30c9\u30b3, \u30ba\u30f3]]\nOptional[[\u30c9\u30b3, \u30c9\u30b3, \u30c9\u30b3, \u30ba\u30f3, \u30ba\u30f3]]\nOptional[[\u30c9\u30b3, \u30c9\u30b3, \u30ba\u30f3, \u30ba\u30f3, \u30ba\u30f3]]\nOptional[[\u30c9\u30b3, \u30ba\u30f3, \u30ba\u30f3, \u30ba\u30f3, \u30c9\u30b3]]\nOptional[[\u30ba\u30f3, \u30ba\u30f3, \u30ba\u30f3, \u30c9\u30b3, \u30ba\u30f3]]\nOptional[[\u30ba\u30f3, \u30ba\u30f3, \u30c9\u30b3, \u30ba\u30f3, \u30ba\u30f3]]\nOptional[[\u30ba\u30f3, \u30c9\u30b3, \u30ba\u30f3, \u30ba\u30f3, \u30ba\u30f3]]\nOptional[[\u30c9\u30b3, \u30ba\u30f3, \u30ba\u30f3, \u30ba\u30f3, \u30ba\u30f3]]\nOptional[[\u30ba\u30f3, \u30ba\u30f3, \u30ba\u30f3, \u30ba\u30f3, \u30ba\u30f3]]\nOptional[[\u30ba\u30f3, \u30ba\u30f3, \u30ba\u30f3, \u30ba\u30f3, \u30c9\u30b3]]\n\u30ad\u30fb\u30e8\u30fb\u30b7\uff01\n```\n", "tags": ["java8", "Java"]}