{"tags": ["openssl", "C"], "context": " More than 1 year has passed since last update.\u524d\u56de\u306e[C\u8a00\u8a9e] HTTP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u4f5c\u3063\u3066\u307f\u308b\u306e\u7d9a\u304d\u3067\u3059\u3002\n\u3053\u3061\u3089\u306e\u8a18\u4e8b\uff08C \u8a00\u8a9e: OpenSSL \u3092\u4f7f\u3063\u3066 HTTPS \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u3064\u304f\u308b\uff09\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\u307e\u305a\u306f\u5199\u7d4c\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u30fb\u30fb\u3068\u601d\u3063\u305f\u3089deprecated\u306ewarning\u306e\u5c71\u304c\u30c3\u3002\n\u3069\u3046\u3084\u3089Mac\u6a19\u6e96\u3067\u5165\u3063\u3066\u308b\u3082\u306e\u3092\u4f7f\u3046\u3068\u305d\u3046\u306a\u308b\u3089\u3057\u3044\u3002\n\u3053\u3061\u3089\u306e\u8a18\u4e8b\uff08How to solve this error 'BIO_new' is deprecated in cocoa?\uff09\u3092\u53c2\u8003\u306b\u3001OpenSSL\u306e\u30b5\u30a4\u30c8\u304b\u3089\u6700\u65b0\u7248\u3092\u843d\u3068\u3057\u3066\u304d\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u3089warning\u3067\u306a\u304f\u306a\u3063\u305f\u3002\n\u3061\u306a\u307f\u306b\u8a18\u4e8b\u4e2d\u306b\u66f8\u3044\u3066\u3042\u308b\u30d1\u30b9\u3068\u9055\u3046\u3068\u3053\u308d\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u305f\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u30d3\u30eb\u30c9\u3057\u307e\u3057\u305f\u3002\n$ gcc -g https-client.c -o https-client -L/usr/local/lib -I/usr/local/include -lssl -lcrypto\n\n\u6700\u5f8c\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u5168\u6587\u3092\u8f09\u305b\u3066\u3044\u307e\u3059\u3002\n\n\u57fa\u672c\u306fHTTP\n\u524d\u56de\u4f5c\u3063\u305fHTTP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3067\u884c\u3063\u3066\u3044\u308b\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u51e6\u7406\u306f\u305d\u306e\u307e\u307e\u4f7f\u3044\u307e\u3059\u3002\n\u51e6\u7406\u306e\u6d41\u308c\u3068\u3057\u3066\u306f\u3001\u307e\u305a\u306f\u901a\u5e38\u306eHTTP\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u5f35\u308a\u3001\u305d\u306e\u3042\u3068\u3067OpenSSL\u3092\u4f7f\u3063\u3066\u30bd\u30b1\u30c3\u30c8\u3068SSL\u3092\u7d50\u3073\u3064\u3051\u308b\u3001\u3068\u3044\u3046\u624b\u9806\u3067\u5b9f\u88c5\u3092\u884c\u3044\u307e\u3059\u3002\n\u306a\u306e\u3067\u4eca\u56de\u306e\u4f8b\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306e\u4f8b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\u524d\u56de\u3068\u307b\u307c\u540c\u3058\u306b\u306a\u308a\u307e\u3059\u3002\nchar *host = \"web.lobi.co\";\nchar *path = \"/\";\nint   port = 443;\n\n// IP\u30a2\u30c9\u30ec\u30b9\u306e\u89e3\u6c7a\nmemset(&hints, 0, sizeof(hints));\nhints.ai_family   = AF_INET;\nhints.ai_socktype = SOCK_STREAM;\nchar *service = \"https\";\n\nint err = 0;\nif ((err = getaddrinfo(host, service, &hints, &res)) != 0) {\n    fprintf(stderr, \"Failed to resolve an ip address - %d\\n\", err);\n    return EXIT_FAILURE;\n}\n\nif ((mysocket = socket(res->ai_family, res->ai_socktype, res->ai_protocol)) < 0) {\n    fprintf(stderr, \"Failed to create a socket.\\n\");\n    return EXIT_FAILURE;\n}\n\nif (connect(mysocket, res->ai_addr, res->ai_addrlen) != 0) {\n    printf(\"Connection error.\\n\");\n    return EXIT_FAILURE;\n}\n\nchar *service = \"https\";\u3068\u3001int port = 443;\u3068\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u4ee5\u5916\u306f\u307b\u307c\u540c\u3058\u3067\u3059\u306d\u3002\n\nSSL\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\n\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u304c\u6210\u529f\u3057\u305f\u3089\u3001\u6b21\u306bSSL\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3092\u884c\u3044\u307e\u3059\u3002\n\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u624b\u9806\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n// \u30a8\u30e9\u30fc\u6587\u8a00\u306e\u8aad\u307f\u8fbc\u307f\u3068\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u521d\u671f\u5316\nSSL_load_error_strings();\nSSL_library_init();\n\nSSL_load_error_strings()\u3067OpenSSL\u306e\u30a8\u30e9\u30fc\u6587\u8a00\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\u3053\u308c\u306f\u3001OpenSSL\u3067\u306f\u30a8\u30e9\u30fc\u304c\u8d77\u3053\u3063\u305f\u969b\u3001\u30a8\u30e9\u30fc\u5185\u5bb9\u304c\u6570\u5024\u3067\u7ba1\u7406\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u305d\u306e\u6570\u5024\u3068\u3072\u3082\u3065\u3051\u308b\u3053\u3068\u3067\u30a8\u30e9\u30fc\u306e\u8a73\u7d30\u304c\u5206\u304b\u308b\u3001\u3068\u3044\u3046\u5177\u5408\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\uff08OpenGL\u3067\u3082\u4f3c\u305f\u3088\u3046\u306a\u30a2\u30d7\u30ed\u30fc\u30c1\u3067\u30a8\u30e9\u30fc\u3092\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3057\u307e\u3059\u306d\u3002\u304d\u3063\u3068\u7ba1\u7406\u3057\u3084\u3059\u3044\u306e\u3067\u3057\u3087\u3046\uff09\n\u6b21\u306eSSL_library_init()\u306fSSL\u306e\u521d\u671f\u5316\u3092\u884c\u3044\u307e\u3059\u3002\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u3001\u6697\u53f7\u5316\u65b9\u5f0f\u3084\u30e1\u30c3\u30bb\u30fc\u30b8\u30c0\u30a4\u30b8\u30a7\u30b9\u30c8\u95a2\u6570\u306a\u3069\u304c\u767b\u9332\u3055\u308c\u307e\u3059\u3002\n// SSL_CTX\u69cb\u9020\u4f53\u306e\u751f\u6210\nctx = SSL_CTX_new(SSLv23_client_method());\n\n\u521d\u671f\u5316\u304c\u7d42\u308f\u3063\u305f\u3089\u3044\u3088\u3044\u3088SSL\u306e\u69cb\u9020\u4f53\u3092\u4f5c\u308a\u307e\u3059\u3002\nctx = SSL_CTX_new(SSLv23_client_method());\u306e\u90e8\u5206\u304cSSL_CTX\u69cb\u9020\u4f53\u306e\u751f\u6210\u3067\u3059\u3002\uff08CTX\u306fcontext\u3060\u308d\u3046\u304b\uff1f\uff09\nnew\u3068\u304b\u4ed8\u3044\u3066\u3044\u308b\u3042\u305f\u308a\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u7684\u306a\u5302\u3044\u304c\u3057\u307e\u3059\uff57\n\u5f15\u6570\u306b\u6e21\u3057\u3066\u3044\u308bSSLv23_client_method()\u95a2\u6570\u306f\u4f7f\u7528\u3059\u308b\u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u7a2e\u985e\u3067\u3059\u3002\n\u3044\u304f\u3064\u304b\u7a2e\u985e\u304c\u3042\u3063\u3066\u3001SSLv2\u3001SSLv3\u3001TLSv1\u304c\u3042\u308a\u307e\u3059\u3002\n\u4eca\u56de\u306f\u3053\u306e\u3044\u305a\u308c\u304b\u3092\u5229\u7528\u3059\u308b\u305f\u3081SSLv23_client_method()\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\u3082\u3057\u3069\u308c\u304b\u3092\u660e\u793a\u7684\u306b\u4f7f\u3046\u5834\u5408\u306f\n\nSSLv2_client_method()\nSSLv3_client_method()\nTLSv1_client_method()\n\n\u306e\u3044\u305a\u308c\u304b\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n// SSL\u69cb\u9020\u4f53\u306e\u751f\u6210\nssl = SSL_new(ctx);\n\nSSL_new\u306e\u5f15\u6570\u306b\u3001\u76f4\u524d\u3067\u751f\u6210\u3057\u305fSSL_CTX\u69cb\u9020\u4f53\u306b\u30bb\u30c3\u30c8\u3057\u305f\u30d7\u30ed\u30c8\u30b3\u30eb\u3084\u6697\u53f7\u5316\u65b9\u5f0f\u3092\u5143\u306b\u3001\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u7ba1\u7406\u3059\u308bSSL\u69cb\u9020\u4f53\u3092\u751f\u6210\u3057\u307e\u3059\u3002\nSSL\u306f\u30b5\u30fc\u30d0\u3068\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306e\u7ba1\u7406\u3001SSL_CTX\u306fSSL\u306b\u304a\u3051\u308b\u6697\u53f7\u5316\u3084\u8a8d\u8a3c\u65b9\u6cd5\u306a\u3069\u3092\u7ba1\u7406\u3057\u307e\u3059\u3002\nSSL\u304c\u30b5\u30fc\u30d0\u3068\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u3059\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3001SSL_CTX\u304c\u305d\u306e\u5236\u5fa1\u306e\u305f\u3081\u306e\u30e2\u30c7\u30eb\u3068\u8003\u3048\u308b\u3068\u5206\u304b\u308a\u3084\u3059\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\uff08\u540c\u3058\u8a8d\u8a3c\u65b9\u5f0f\u30672\u30b5\u30fc\u30d0\u306b\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u5f35\u308b\u5834\u5408\u306f\u3001SSL\u306f2\u3064\u5fc5\u8981\u3060\u3051\u3069\u3001SSL_CTX\u306f\u3072\u3068\u3064\u3067\u3044\u3044\u3001\u307f\u305f\u3044\u306a\uff09\n// SSL\u69cb\u9020\u4f53\u3068\u30bd\u30b1\u30c3\u30c8\u3068\u306e\u95a2\u9023\u4ed8\u3051\nint ret = SSL_set_fd(ssl, mysocket);\nif (ret == 0) {\n    ERR_print_errors_fp(stderr);\n    return EXIT_FAILURE;\n}\n\nSSL_set_fb()\u3092\u4f7f\u3063\u3066\u3001\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u6e08\u306e\u30bd\u30b1\u30c3\u30c8\u3068SSL\u69cb\u9020\u4f53\u3092\u7d50\u3073\u3064\u3051\u307e\u3059\u3002\n\uff08\u3061\u306a\u307f\u306b\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306b\u5931\u6557\u3057\u305f\u30bd\u30b1\u30c3\u30c8\u3092\u6307\u5b9a\u3059\u308b\u3068\u30a8\u30e9\u30fc\u3068\u306a\u308a\u307e\u3059\uff09\n// \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\nint ret = SSL_connect(ssl);\nif (ret != 1) {\n    ERR_print_errors_fp(stderr);\n    return EXIT_FAILURE;\n}\n\nSSL_connect\u3092\u547c\u3076\u3053\u3068\u3067\u3001\u81ea\u52d5\u7684\u306b\u30b5\u30fc\u30d0\u3068\u30cf\u30f3\u30c9\u30b7\u30a7\u30a4\u30af\u304c\u884c\u308f\u308c\u307e\u3059\u3002\n\u3053\u306e\u6642\u70b9\u3067\u4ee5\u4e0b\u306e\u3053\u3068\u304c\u6c7a\u5b9a\u3057\u307e\u3059\u3002\n\n\u4f7f\u7528\u3059\u308b\u30d7\u30ed\u30c8\u30b3\u30eb\uff08SSLv2 / SSLv3 / TLSv1\uff09\n\u4f7f\u7528\u3059\u308b\u6697\u53f7\u5316\u65b9\u5f0f\u30fb\u9375\u4ea4\u63db\u65b9\u5f0f\u30fb\u30cf\u30c3\u30b7\u30e5\u65b9\u5f0f\n\u30b5\u30fc\u30d0\u8a3c\u660e\u66f8\u306e\u53d6\u5f97\n\u4f7f\u7528\u3059\u308b\u5171\u901a\u9375\n\n\u4ee5\u4e0a\u3067SSL\u3067\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u304c\u78ba\u7acb\u3057\u307e\u3057\u305f\u3002\n\u3042\u3068\u306f\u901a\u5e38\u3068\u540c\u3058\u3088\u3046\u306bHTTP\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u308a\u307e\u3059\u3002\nsprintf(msg, \"GET %s HTTP/1.1\\r\\nHost: %s\\r\\n\\r\\n\", path, host);\nSSL_write(ssl, msg, strlen(msg));\n\n\u305f\u3060\u3057\u3001\u901a\u5e38\u306eHTTP\u63a5\u7d9a\u3067\u306fwrite\u3092\u4f7f\u3063\u3066\u3044\u305f\u3082\u306e\u3092SSL_write\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u5f15\u6570\u306f\u4f3c\u305f\u3088\u3046\u306a\u611f\u3058\u306b\u306a\u3063\u3066\u3044\u3066\u3001ssl\u69cb\u9020\u4f53\u304c\u30bd\u30b1\u30c3\u30c8\u306e\u5f79\u5272\u3092\u679c\u305f\u3057\u3001\u3042\u3068\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3068\u305d\u306e\u9577\u3055\u3092\u6e21\u3057\u3066\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u8aad\u307f\u8fbc\u307f\u3082read\u95a2\u6570\u306e\u4ee3\u308f\u308a\u306bSSL_read\u3092\u4f7f\u3046\u3060\u3051\u3067\u3001\u305d\u308c\u4ee5\u5916\u306f\u307b\u307c\u540c\u3058\u3068\u306a\u308a\u307e\u3059\u3002\ndo {\n    read_size = SSL_read(ssl, buf, buf_size);\n    write(1, buf, read_size);\n} while(read_size > 0);\n\n\n\u5f8c\u51e6\u7406\n\u901a\u5e38\u306eHTTP\u901a\u4fe1\u3067\u306f\u30bd\u30b1\u30c3\u30c8\u3092\u9589\u3058\u308b\u3060\u3051\u3067\u3057\u305f\u304c\u3001\u4eca\u56de\u306fSSL\u306b\u3064\u3044\u3066\u306e\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u308c\u3089\u3082\u9069\u5207\u306b\u51e6\u7406\u3057\u306a\u3044\u3068\u306a\u308a\u307e\u305b\u3093\u3002\nSSL_shutdown(ssl);\nSSL_free(ssl);\nSSL_CTX_free(ctx);\nERR_free_strings();\n\nclose(mysocket);\n\nSSL\u3092\u9589\u3058\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u69cb\u9020\u4f53\u3092free\u3057\u3066\u3044\u307e\u3059\u3002\n\u6700\u5f8c\u306b\u30bd\u30b1\u30c3\u30c8\u3092\u9589\u3058\u3066\u51e6\u7406\u304c\u7d42\u4e86\u3068\u306a\u308a\u307e\u3059\u3002\n\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u5168\u4f53\n\u4eca\u56de\u5b9f\u88c5\u3057\u305f\u30c7\u30e2\u306f\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <unistd.h>\n\n#include <netdb.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n\n#include <openssl/ssl.h>\n#include <openssl/err.h>\n\nint main(void) {\n    int mysocket;\n    struct sockaddr_in server;\n    struct addrinfo hints, *res;\n\n    SSL *ssl;\n    SSL_CTX *ctx;\n\n    char msg[100];\n\n    char *host = \"web.lobi.co\";\n    char *path = \"/\";\n    int   port = 443;\n\n    // IP\u30a2\u30c9\u30ec\u30b9\u306e\u89e3\u6c7a\n    memset(&hints, 0, sizeof(hints));\n    hints.ai_family   = AF_INET;\n    hints.ai_socktype = SOCK_STREAM;\n    char *service = \"https\";\n\n    int err = 0;\n    if ((err = getaddrinfo(host, service, &hints, &res)) != 0) {\n        fprintf(stderr, \"Fail to resolve ip address - %d\\n\", err);\n        return EXIT_FAILURE;\n    }\n\n    if ((mysocket = socket(res->ai_family, res->ai_socktype, res->ai_protocol)) < 0) {\n        fprintf(stderr, \"Fail to create a socket.\\n\");\n        return EXIT_FAILURE;\n    }\n\n    if (connect(mysocket, res->ai_addr, res->ai_addrlen) != 0) {\n        printf(\"Connection error.\\n\");\n        return EXIT_FAILURE;\n    }\n\n    SSL_load_error_strings();\n    SSL_library_init();\n\n    ctx = SSL_CTX_new(SSLv23_client_method());\n    ssl = SSL_new(ctx);\n    err = SSL_set_fd(ssl, mysocket);\n    SSL_connect(ssl);\n\n    printf(\"Conntect to %s\\n\", host);\n\n    sprintf(msg, \"GET %s HTTP/1.0\\r\\nHost: %s\\r\\n\\r\\n\", path, host);\n\n    SSL_write(ssl, msg, strlen(msg));\n\n    int buf_size = 256;\n    char buf[buf_size];\n    int read_size;\n\n    do {\n        read_size = SSL_read(ssl, buf, buf_size);\n        write(1, buf, read_size);\n    } while(read_size > 0);\n\n    SSL_shutdown(ssl);\n    SSL_free(ssl);\n    SSL_CTX_free(ctx);\n    ERR_free_strings();\n\n    close(mysocket);\n\n    return EXIT_SUCCESS;\n}\n\n\n\n\u30b9\u30bf\u30c3\u30af\u304b\u3089\u306e\u30a8\u30e9\u30fc\u53d6\u5f97\n\u30a8\u30e9\u30fc\u306e\u53d6\u5f97\u306b\u306f\u3044\u304f\u3064\u304b\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\n\u7c21\u5358\u306b\u30a8\u30e9\u30fc\u3092\u6a19\u6e96\u51fa\u529b\u3084\u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b\u3059\u308b\u5834\u5408\u306fERR_print_errors_fp()\u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002\nif (ssl == NULL) {\n    ERR_print_errors_fp(stderr);\n    return EXIT_FAILURE;\n}\n\n\u3042\u308b\u3044\u306f\u4ee5\u4e0b\u306e\u95a2\u6570\u3092\u4f7f\u3063\u3066\u51fa\u529b\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n\n\n\u95a2\u6570\u540d\n\u8aac\u660e\n\n\n\n\nERR_reason_error_string\n\u9759\u7684\u30b9\u30c8\u30ea\u30f3\u30b0\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002\u3053\u306e\u9759\u7684\u30b9\u30c8\u30ea\u30f3\u30b0\u306f\u3001\u753b\u9762\u306b\u8868\u793a\u3057\u305f\u308a\u3001\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u8fbc\u3093\u3060\u308a\u3059\u308b\u306a\u3069\u3001\u4efb\u610f\u306e\u65b9\u6cd5\u3067\u51e6\u7406\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\nERR_lib_error_string\n\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3092\u901a\u77e5\u3057\u307e\u3059\u3002\n\n\nERR_func_error_string\n\u30a8\u30e9\u30fc\u306e\u539f\u56e0\u3068\u306a\u3063\u305f OpenSSL \u95a2\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n\n\n\u540c\u3058\u52d5\u4f5c\u3092\u3055\u305b\u308b\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002\uff08\u51fa\u529b\u5185\u5bb9\u306f\u82e5\u5e72\u7570\u306a\u308a\u307e\u3059\uff09\nconst char *err = ERR_reason_error_string(ERR_get_error());\nprintf(\"%s\\n\", err);\nreturn EXIT_FAILURE;\n\n\n\u524d\u56de\u306e[[C\u8a00\u8a9e] HTTP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u4f5c\u3063\u3066\u307f\u308b](http://qiita.com/edo_m18/items/cef278d0c14d1371db3b)\u306e\u7d9a\u304d\u3067\u3059\u3002\n\n[\u3053\u3061\u3089\u306e\u8a18\u4e8b\uff08C \u8a00\u8a9e: OpenSSL \u3092\u4f7f\u3063\u3066 HTTPS \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u3064\u304f\u308b\uff09](http://blog.sarabande.jp/post/82068392478)\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\n\u307e\u305a\u306f\u5199\u7d4c\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u30fb\u30fb\u3068\u601d\u3063\u305f\u3089deprecated\u306ewarning\u306e\u5c71\u304c\u30c3\u3002\n\u3069\u3046\u3084\u3089Mac\u6a19\u6e96\u3067\u5165\u3063\u3066\u308b\u3082\u306e\u3092\u4f7f\u3046\u3068\u305d\u3046\u306a\u308b\u3089\u3057\u3044\u3002\n\n[\u3053\u3061\u3089\u306e\u8a18\u4e8b\uff08How to solve this error 'BIO_new' is deprecated in cocoa?\uff09](http://stackoverflow.com/questions/16461315/how-to-solve-this-error-bio-new-is-deprecated-in-cocoa)\u3092\u53c2\u8003\u306b\u3001OpenSSL\u306e\u30b5\u30a4\u30c8\u304b\u3089\u6700\u65b0\u7248\u3092\u843d\u3068\u3057\u3066\u304d\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u3089warning\u3067\u306a\u304f\u306a\u3063\u305f\u3002\n\n\u3061\u306a\u307f\u306b\u8a18\u4e8b\u4e2d\u306b\u66f8\u3044\u3066\u3042\u308b\u30d1\u30b9\u3068\u9055\u3046\u3068\u3053\u308d\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u305f\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u30d3\u30eb\u30c9\u3057\u307e\u3057\u305f\u3002\n\n```console\n$ gcc -g https-client.c -o https-client -L/usr/local/lib -I/usr/local/include -lssl -lcrypto\n```\n\n**\u6700\u5f8c\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u5168\u6587\u3092\u8f09\u305b\u3066\u3044\u307e\u3059\u3002**\n\n## \u57fa\u672c\u306fHTTP\n\n[\u524d\u56de](http://qiita.com/edo_m18/items/cef278d0c14d1371db3b)\u4f5c\u3063\u305fHTTP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3067\u884c\u3063\u3066\u3044\u308b\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u51e6\u7406\u306f\u305d\u306e\u307e\u307e\u4f7f\u3044\u307e\u3059\u3002\n\u51e6\u7406\u306e\u6d41\u308c\u3068\u3057\u3066\u306f\u3001\u307e\u305a\u306f\u901a\u5e38\u306eHTTP\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u5f35\u308a\u3001\u305d\u306e\u3042\u3068\u3067OpenSSL\u3092\u4f7f\u3063\u3066\u30bd\u30b1\u30c3\u30c8\u3068SSL\u3092\u7d50\u3073\u3064\u3051\u308b\u3001\u3068\u3044\u3046\u624b\u9806\u3067\u5b9f\u88c5\u3092\u884c\u3044\u307e\u3059\u3002\n\n\u306a\u306e\u3067\u4eca\u56de\u306e\u4f8b\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306e\u4f8b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\u524d\u56de\u3068\u307b\u307c\u540c\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\n```c\nchar *host = \"web.lobi.co\";\nchar *path = \"/\";\nint   port = 443;\n\n// IP\u30a2\u30c9\u30ec\u30b9\u306e\u89e3\u6c7a\nmemset(&hints, 0, sizeof(hints));\nhints.ai_family   = AF_INET;\nhints.ai_socktype = SOCK_STREAM;\nchar *service = \"https\";\n\nint err = 0;\nif ((err = getaddrinfo(host, service, &hints, &res)) != 0) {\n    fprintf(stderr, \"Failed to resolve an ip address - %d\\n\", err);\n    return EXIT_FAILURE;\n}\n\nif ((mysocket = socket(res->ai_family, res->ai_socktype, res->ai_protocol)) < 0) {\n    fprintf(stderr, \"Failed to create a socket.\\n\");\n    return EXIT_FAILURE;\n}\n\nif (connect(mysocket, res->ai_addr, res->ai_addrlen) != 0) {\n    printf(\"Connection error.\\n\");\n    return EXIT_FAILURE;\n}\n```\n\n`char *service = \"https\";`\u3068\u3001`int port = 443;`\u3068\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u4ee5\u5916\u306f\u307b\u307c\u540c\u3058\u3067\u3059\u306d\u3002\n\n### SSL\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\n\n\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u304c\u6210\u529f\u3057\u305f\u3089\u3001\u6b21\u306bSSL\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3092\u884c\u3044\u307e\u3059\u3002\n\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u624b\u9806\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```c\n// \u30a8\u30e9\u30fc\u6587\u8a00\u306e\u8aad\u307f\u8fbc\u307f\u3068\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u521d\u671f\u5316\nSSL_load_error_strings();\nSSL_library_init();\n```\n\n`SSL_load_error_strings()`\u3067OpenSSL\u306e\u30a8\u30e9\u30fc\u6587\u8a00\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\u3053\u308c\u306f\u3001OpenSSL\u3067\u306f\u30a8\u30e9\u30fc\u304c\u8d77\u3053\u3063\u305f\u969b\u3001\u30a8\u30e9\u30fc\u5185\u5bb9\u304c\u6570\u5024\u3067\u7ba1\u7406\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u305d\u306e\u6570\u5024\u3068\u3072\u3082\u3065\u3051\u308b\u3053\u3068\u3067\u30a8\u30e9\u30fc\u306e\u8a73\u7d30\u304c\u5206\u304b\u308b\u3001\u3068\u3044\u3046\u5177\u5408\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n*\uff08OpenGL\u3067\u3082\u4f3c\u305f\u3088\u3046\u306a\u30a2\u30d7\u30ed\u30fc\u30c1\u3067\u30a8\u30e9\u30fc\u3092\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3057\u307e\u3059\u306d\u3002\u304d\u3063\u3068\u7ba1\u7406\u3057\u3084\u3059\u3044\u306e\u3067\u3057\u3087\u3046\uff09*\n\n\u6b21\u306e`SSL_library_init()`\u306fSSL\u306e\u521d\u671f\u5316\u3092\u884c\u3044\u307e\u3059\u3002\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u3001\u6697\u53f7\u5316\u65b9\u5f0f\u3084\u30e1\u30c3\u30bb\u30fc\u30b8\u30c0\u30a4\u30b8\u30a7\u30b9\u30c8\u95a2\u6570\u306a\u3069\u304c\u767b\u9332\u3055\u308c\u307e\u3059\u3002\n\n```c\n// SSL_CTX\u69cb\u9020\u4f53\u306e\u751f\u6210\nctx = SSL_CTX_new(SSLv23_client_method());\n```\n\n\u521d\u671f\u5316\u304c\u7d42\u308f\u3063\u305f\u3089\u3044\u3088\u3044\u3088SSL\u306e\u69cb\u9020\u4f53\u3092\u4f5c\u308a\u307e\u3059\u3002\n`ctx = SSL_CTX_new(SSLv23_client_method());`\u306e\u90e8\u5206\u304c`SSL_CTX`\u69cb\u9020\u4f53\u306e\u751f\u6210\u3067\u3059\u3002\uff08CTX\u306fcontext\u3060\u308d\u3046\u304b\uff1f\uff09\n\n`new`\u3068\u304b\u4ed8\u3044\u3066\u3044\u308b\u3042\u305f\u308a\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u7684\u306a\u5302\u3044\u304c\u3057\u307e\u3059\uff57\n\u5f15\u6570\u306b\u6e21\u3057\u3066\u3044\u308b`SSLv23_client_method()`\u95a2\u6570\u306f\u4f7f\u7528\u3059\u308b\u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u7a2e\u985e\u3067\u3059\u3002\n\u3044\u304f\u3064\u304b\u7a2e\u985e\u304c\u3042\u3063\u3066\u3001`SSLv2`\u3001`SSLv3`\u3001`TLSv1`\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u4eca\u56de\u306f\u3053\u306e\u3044\u305a\u308c\u304b\u3092\u5229\u7528\u3059\u308b\u305f\u3081`SSLv23_client_method()`\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\u3082\u3057\u3069\u308c\u304b\u3092\u660e\u793a\u7684\u306b\u4f7f\u3046\u5834\u5408\u306f\n\n- `SSLv2_client_method()`\n- `SSLv3_client_method()`\n- `TLSv1_client_method()`\n\n\u306e\u3044\u305a\u308c\u304b\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n```c\n// SSL\u69cb\u9020\u4f53\u306e\u751f\u6210\nssl = SSL_new(ctx);\n```\n\n`SSL_new`\u306e\u5f15\u6570\u306b\u3001\u76f4\u524d\u3067\u751f\u6210\u3057\u305f`SSL_CTX`\u69cb\u9020\u4f53\u306b\u30bb\u30c3\u30c8\u3057\u305f\u30d7\u30ed\u30c8\u30b3\u30eb\u3084\u6697\u53f7\u5316\u65b9\u5f0f\u3092\u5143\u306b\u3001\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u7ba1\u7406\u3059\u308bSSL\u69cb\u9020\u4f53\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n`SSL`\u306f\u30b5\u30fc\u30d0\u3068\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306e\u7ba1\u7406\u3001`SSL_CTX`\u306fSSL\u306b\u304a\u3051\u308b\u6697\u53f7\u5316\u3084\u8a8d\u8a3c\u65b9\u6cd5\u306a\u3069\u3092\u7ba1\u7406\u3057\u307e\u3059\u3002\n`SSL`\u304c\u30b5\u30fc\u30d0\u3068\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u3059\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3001`SSL_CTX`\u304c\u305d\u306e\u5236\u5fa1\u306e\u305f\u3081\u306e\u30e2\u30c7\u30eb\u3068\u8003\u3048\u308b\u3068\u5206\u304b\u308a\u3084\u3059\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n*\uff08\u540c\u3058\u8a8d\u8a3c\u65b9\u5f0f\u30672\u30b5\u30fc\u30d0\u306b\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u5f35\u308b\u5834\u5408\u306f\u3001`SSL`\u306f2\u3064\u5fc5\u8981\u3060\u3051\u3069\u3001`SSL_CTX`\u306f\u3072\u3068\u3064\u3067\u3044\u3044\u3001\u307f\u305f\u3044\u306a\uff09*\n\n\n```c\n// SSL\u69cb\u9020\u4f53\u3068\u30bd\u30b1\u30c3\u30c8\u3068\u306e\u95a2\u9023\u4ed8\u3051\nint ret = SSL_set_fd(ssl, mysocket);\nif (ret == 0) {\n\tERR_print_errors_fp(stderr);\n\treturn EXIT_FAILURE;\n}\n```\n\n`SSL_set_fb()`\u3092\u4f7f\u3063\u3066\u3001\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u6e08\u306e\u30bd\u30b1\u30c3\u30c8\u3068SSL\u69cb\u9020\u4f53\u3092\u7d50\u3073\u3064\u3051\u307e\u3059\u3002\n*\uff08\u3061\u306a\u307f\u306b\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306b\u5931\u6557\u3057\u305f\u30bd\u30b1\u30c3\u30c8\u3092\u6307\u5b9a\u3059\u308b\u3068\u30a8\u30e9\u30fc\u3068\u306a\u308a\u307e\u3059\uff09*\n\n\n```c\n// \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\nint ret = SSL_connect(ssl);\nif (ret != 1) {\n\tERR_print_errors_fp(stderr);\n\treturn EXIT_FAILURE;\n}\n```\n\n`SSL_connect`\u3092\u547c\u3076\u3053\u3068\u3067\u3001\u81ea\u52d5\u7684\u306b\u30b5\u30fc\u30d0\u3068\u30cf\u30f3\u30c9\u30b7\u30a7\u30a4\u30af\u304c\u884c\u308f\u308c\u307e\u3059\u3002\n\u3053\u306e\u6642\u70b9\u3067\u4ee5\u4e0b\u306e\u3053\u3068\u304c\u6c7a\u5b9a\u3057\u307e\u3059\u3002\n\n- \u4f7f\u7528\u3059\u308b\u30d7\u30ed\u30c8\u30b3\u30eb\uff08SSLv2 / SSLv3 / TLSv1\uff09\n- \u4f7f\u7528\u3059\u308b\u6697\u53f7\u5316\u65b9\u5f0f\u30fb\u9375\u4ea4\u63db\u65b9\u5f0f\u30fb\u30cf\u30c3\u30b7\u30e5\u65b9\u5f0f\n- \u30b5\u30fc\u30d0\u8a3c\u660e\u66f8\u306e\u53d6\u5f97\n- \u4f7f\u7528\u3059\u308b\u5171\u901a\u9375\n\n\u4ee5\u4e0a\u3067SSL\u3067\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u304c\u78ba\u7acb\u3057\u307e\u3057\u305f\u3002\n\u3042\u3068\u306f\u901a\u5e38\u3068\u540c\u3058\u3088\u3046\u306bHTTP\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u308a\u307e\u3059\u3002\n\n```c\nsprintf(msg, \"GET %s HTTP/1.1\\r\\nHost: %s\\r\\n\\r\\n\", path, host);\nSSL_write(ssl, msg, strlen(msg));\n```\n\n\u305f\u3060\u3057\u3001\u901a\u5e38\u306eHTTP\u63a5\u7d9a\u3067\u306f`write`\u3092\u4f7f\u3063\u3066\u3044\u305f\u3082\u306e\u3092`SSL_write`\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u5f15\u6570\u306f\u4f3c\u305f\u3088\u3046\u306a\u611f\u3058\u306b\u306a\u3063\u3066\u3044\u3066\u3001ssl\u69cb\u9020\u4f53\u304c\u30bd\u30b1\u30c3\u30c8\u306e\u5f79\u5272\u3092\u679c\u305f\u3057\u3001\u3042\u3068\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3068\u305d\u306e\u9577\u3055\u3092\u6e21\u3057\u3066\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u307e\u305f\u8aad\u307f\u8fbc\u307f\u3082`read`\u95a2\u6570\u306e\u4ee3\u308f\u308a\u306b`SSL_read`\u3092\u4f7f\u3046\u3060\u3051\u3067\u3001\u305d\u308c\u4ee5\u5916\u306f\u307b\u307c\u540c\u3058\u3068\u306a\u308a\u307e\u3059\u3002\n\n```c\ndo {\n    read_size = SSL_read(ssl, buf, buf_size);\n    write(1, buf, read_size);\n} while(read_size > 0);\n```\n\n### \u5f8c\u51e6\u7406\n\n\u901a\u5e38\u306eHTTP\u901a\u4fe1\u3067\u306f\u30bd\u30b1\u30c3\u30c8\u3092\u9589\u3058\u308b\u3060\u3051\u3067\u3057\u305f\u304c\u3001\u4eca\u56de\u306fSSL\u306b\u3064\u3044\u3066\u306e\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u308c\u3089\u3082\u9069\u5207\u306b\u51e6\u7406\u3057\u306a\u3044\u3068\u306a\u308a\u307e\u305b\u3093\u3002\n\n```c\nSSL_shutdown(ssl);\nSSL_free(ssl);\nSSL_CTX_free(ctx);\nERR_free_strings();\n\nclose(mysocket);\n```\n\nSSL\u3092\u9589\u3058\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u69cb\u9020\u4f53\u3092free\u3057\u3066\u3044\u307e\u3059\u3002\n\u6700\u5f8c\u306b\u30bd\u30b1\u30c3\u30c8\u3092\u9589\u3058\u3066\u51e6\u7406\u304c\u7d42\u4e86\u3068\u306a\u308a\u307e\u3059\u3002\n\n\n-------------------------------------------\n\n## \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u5168\u4f53\n\n\u4eca\u56de\u5b9f\u88c5\u3057\u305f\u30c7\u30e2\u306f\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\n\n```c\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <unistd.h>\n\n#include <netdb.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n\n#include <openssl/ssl.h>\n#include <openssl/err.h>\n\nint main(void) {\n    int mysocket;\n    struct sockaddr_in server;\n    struct addrinfo hints, *res;\n\n    SSL *ssl;\n    SSL_CTX *ctx;\n\n    char msg[100];\n\n    char *host = \"web.lobi.co\";\n    char *path = \"/\";\n    int   port = 443;\n\n    // IP\u30a2\u30c9\u30ec\u30b9\u306e\u89e3\u6c7a\n    memset(&hints, 0, sizeof(hints));\n    hints.ai_family   = AF_INET;\n    hints.ai_socktype = SOCK_STREAM;\n    char *service = \"https\";\n\n    int err = 0;\n    if ((err = getaddrinfo(host, service, &hints, &res)) != 0) {\n        fprintf(stderr, \"Fail to resolve ip address - %d\\n\", err);\n        return EXIT_FAILURE;\n    }\n\n    if ((mysocket = socket(res->ai_family, res->ai_socktype, res->ai_protocol)) < 0) {\n        fprintf(stderr, \"Fail to create a socket.\\n\");\n        return EXIT_FAILURE;\n    }\n\n    if (connect(mysocket, res->ai_addr, res->ai_addrlen) != 0) {\n        printf(\"Connection error.\\n\");\n        return EXIT_FAILURE;\n    }\n\n    SSL_load_error_strings();\n    SSL_library_init();\n\n    ctx = SSL_CTX_new(SSLv23_client_method());\n    ssl = SSL_new(ctx);\n    err = SSL_set_fd(ssl, mysocket);\n    SSL_connect(ssl);\n\n    printf(\"Conntect to %s\\n\", host);\n\n    sprintf(msg, \"GET %s HTTP/1.0\\r\\nHost: %s\\r\\n\\r\\n\", path, host);\n\n    SSL_write(ssl, msg, strlen(msg));\n\n    int buf_size = 256;\n    char buf[buf_size];\n    int read_size;\n\n    do {\n        read_size = SSL_read(ssl, buf, buf_size);\n        write(1, buf, read_size);\n    } while(read_size > 0);\n\n    SSL_shutdown(ssl);\n    SSL_free(ssl);\n    SSL_CTX_free(ctx);\n    ERR_free_strings();\n\n    close(mysocket);\n\n    return EXIT_SUCCESS;\n}\n```\n\n-------------------------------------------\n\n\n## \u30b9\u30bf\u30c3\u30af\u304b\u3089\u306e\u30a8\u30e9\u30fc\u53d6\u5f97\n\n\u30a8\u30e9\u30fc\u306e\u53d6\u5f97\u306b\u306f\u3044\u304f\u3064\u304b\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u7c21\u5358\u306b\u30a8\u30e9\u30fc\u3092\u6a19\u6e96\u51fa\u529b\u3084\u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b\u3059\u308b\u5834\u5408\u306f`ERR_print_errors_fp()`\u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```c\nif (ssl == NULL) {\n\tERR_print_errors_fp(stderr);\n\treturn EXIT_FAILURE;\n}\n```\n\n\u3042\u308b\u3044\u306f\u4ee5\u4e0b\u306e\u95a2\u6570\u3092\u4f7f\u3063\u3066\u51fa\u529b\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n| \u95a2\u6570\u540d | \u8aac\u660e |\n|:------|:---------------------------------------------|\n| ERR_reason_error_string | \u9759\u7684\u30b9\u30c8\u30ea\u30f3\u30b0\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002\u3053\u306e\u9759\u7684\u30b9\u30c8\u30ea\u30f3\u30b0\u306f\u3001\u753b\u9762\u306b\u8868\u793a\u3057\u305f\u308a\u3001\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u8fbc\u3093\u3060\u308a\u3059\u308b\u306a\u3069\u3001\u4efb\u610f\u306e\u65b9\u6cd5\u3067\u51e6\u7406\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 |\n| ERR_lib_error_string | \u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3092\u901a\u77e5\u3057\u307e\u3059\u3002 |\n| ERR_func_error_string | \u30a8\u30e9\u30fc\u306e\u539f\u56e0\u3068\u306a\u3063\u305f OpenSSL \u95a2\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002 |\n\n\u540c\u3058\u52d5\u4f5c\u3092\u3055\u305b\u308b\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002\uff08\u51fa\u529b\u5185\u5bb9\u306f\u82e5\u5e72\u7570\u306a\u308a\u307e\u3059\uff09\n\n```c\nconst char *err = ERR_reason_error_string(ERR_get_error());\nprintf(\"%s\\n\", err);\nreturn EXIT_FAILURE;\n```\n"}