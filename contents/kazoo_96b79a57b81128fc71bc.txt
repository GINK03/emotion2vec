{"context": " More than 1 year has passed since last update.\n\n\u524d\u63d0\n\u300e\u30de\u30eb\u30c1\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306e\u305f\u3081\u306eOpenGL ES\u5165\u9580 \u57fa\u790e\u7de8\u2015Android/iOS\u5bfe\u5fdc\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u300f\n\u306e\u629c\u7c8b\u30e1\u30e2\u3067\u3059\u30028\u7ae0\u306e\u5185\u5bb9\u3002\n\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\u306f\u65ad\u7247\u306e\u307f\u306a\u306e\u3067\u3001\u672c\u66f8\u3092\u8aad\u3093\u3067\u304f\u3060\u3055\u3044\u3002\n\n\u30b7\u30a7\u30fc\u30c0\u306e\u57fa\u790e\n\n\u5857\u308a\u3064\u3076\u3057\u306e\u8272\u3092\u5909\u66f4\u3059\u308b\n\n        const GLchar *fragment_shader_source =\n                \"void main() {\"\n                \"   gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n                \"}\";\n\n\n\u203b \u300c1.0f\u300d\u3068\u306f\u66f8\u3051\u306a\u3044\u306e\u3067\u6ce8\u610f\n\u3053\u308c\u3092\u3001\u300c\u4efb\u610f\u306e\u8272\u3067\u5857\u308b\u300d\u30b7\u30a7\u30fc\u30c0\u306b\u5909\u66f4\u3059\u308b\u3002\ntypedef struct {\n    // \u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u7528\u30b7\u30a7\u30fc\u30c0\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0\n    GLint shader_program;\n\n    // \u4f4d\u7f6e\u60c5\u5831\u5c5e\u6027\n    GLint attr_pos;\n\n    // \u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u306e\u63cf\u753b\u8272\n    GLint unif_color;\n} Extension_ShaderUniformColor;\n\n/**\n * \u30a2\u30d7\u30ea\u306e\u521d\u671f\u5316\u3092\u884c\u3046\n */\nvoid sample_ShaderUniformColor_initialize(GLApplication *app) {\n    // \u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u7528\u306e\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\u3059\u308b\n    app->extension = (Extension_ShaderUniformColor*) malloc(sizeof(Extension_ShaderUniformColor));\n    // \u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u7528\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\n    Extension_ShaderUniformColor *extension = (Extension_ShaderUniformColor*) app->extension;\n\n    // \u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u30fc\u3092\u7528\u610f\u3059\u308b\n    {\n        const GLchar *vertex_shader_source =\n                \"attribute mediump vec4 attr_pos;\"\n                \"void main() {\"\n                \"   gl_Position = attr_pos;\"\n                \"}\";\n\n        const GLchar *fragment_shader_source =\n                \"uniform lowp vec4 unif_color;\"\n                \"void main() {\"\n                \"   gl_FragColor = unif_color;\"\n                \"}\";\n\n        // \u30b3\u30f3\u30d1\u30a4\u30eb\u3068\u30ea\u30f3\u30af\u3092\u884c\u3046\n        extension->shader_program = Shader_createProgramFromSource(vertex_shader_source, fragment_shader_source);\n    }\n\n    // attribute\u3092\u53d6\u308a\u51fa\u3059\n    {\n        extension->attr_pos = glGetAttribLocation(extension->shader_program, \"attr_pos\");\n        assert(extension->attr_pos >= 0);\n    }\n\n    // uniform\u5909\u6570\u306elocation\u3092\u53d6\u5f97\u3059\u308b\n    {\n        extension->unif_color = glGetUniformLocation(extension->shader_program, \"unif_color\");\n        assert(extension->unif_color >= 0);\n    }\n\n    // \u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u5229\u7528\u3092\u958b\u59cb\u3059\u308b\n    glUseProgram(extension->shader_program);\n    assert(glGetError() == GL_NO_ERROR);\n\n\n    // \u30b7\u30a7\u30fc\u30c0\u30fc\u3067\u4f7f\u7528\u53ef\u80fd\u306a\u30d9\u30af\u30c8\u30eb\u6570\u3092\u53d6\u5f97\u3059\u308b\n    {\n        GLint   vert_vectors = 0;\n        GLint   frag_vectors = 0;\n        glGetIntegerv(GL_MAX_VERTEX_UNIFORM_VECTORS, &vert_vectors);\n        glGetIntegerv(GL_MAX_FRAGMENT_UNIFORM_VECTORS, &frag_vectors);\n\n        __logf(\"Max Uniform Vectors / Vert(%d) Frag(%d)\", vert_vectors, frag_vectors);\n    }\n}\n\n/**\n * \u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u30a8\u30ea\u30a2\u304c\u5909\u66f4\u3055\u308c\u305f\n */\nvoid sample_ShaderUniformColor_resized(GLApplication *app) {\n    // \u63cf\u753b\u9818\u57df\u3092\u8a2d\u5b9a\u3059\u308b\n    glViewport(0, 0, app->surface_width, app->surface_height);\n}\n\n/**\n * \u30a2\u30d7\u30ea\u306e\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3092\u884c\u3046\n * \u6bce\u79d260\u56de\u524d\u5f8c\u547c\u3073\u51fa\u3055\u308c\u308b\u3002\n */\nvoid sample_ShaderUniformColor_rendering(GLApplication *app) {\n    // \u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u7528\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\n    Extension_ShaderUniformColor *extension = (Extension_ShaderUniformColor*) app->extension;\n\n    glClearColor(0.0f, 1.0f, 1.0f, 1.0f);\n    glClear(GL_COLOR_BUFFER_BIT);\n\n    // attr_pos\u3092\u6709\u52b9\u306b\u3059\u308b\n    glEnableVertexAttribArray(extension->attr_pos);\n\n    // \u5de6\u4e0a\u3078\u56db\u89d2\u5f62\u63cf\u753b\n    {\n        const GLfloat position[] = {\n                // v0(left top)\n                -0.75f, 0.75f,\n                // v1(left bottom)\n                -0.75f, 0.25f,\n                // v2(right top)\n                -0.25f, 0.75f,\n                // v3(right bottom)\n                -0.25f, 0.25f, };\n\n        // \u63cf\u753b\u8272\u3092\u6307\u5b9a\u3059\u308b\n        {\n            //                                   R,    G,    B,    A\n            glUniform4f(extension->unif_color, 1.0f, 0.0f, 1.0f, 1.0f);\n        }\n        glVertexAttribPointer(extension->attr_pos, 2, GL_FLOAT, GL_FALSE, 0, (GLvoid*) position);\n        glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);\n    }\n\n    // \u53f3\u4e0a\u3078\u56db\u89d2\u5f62\u63cf\u753b\n    {\n        const GLfloat position[] = {\n                // v4(left top)\n                0.25f, 0.75f,\n                // v5(left bottom)\n                0.25f, 0.25f,\n                // v6(right top)\n                0.75f, 0.75f,\n                // v7(right bottom)\n                0.75f, 0.25f, };\n\n        // \u63cf\u753b\u8272\u3092\u914d\u5217\u6307\u5b9a\u3059\u308b\n        {\n            const GLfloat poly_color[] = {\n                    // R\n                    1.0f,\n                    // G\n                    1.0f,\n                    // B\n                    0.0f,\n                    // A\n                    1.0f, };\n            glUniform4fv(extension->unif_color, 1, poly_color);\n        }\n\n        glVertexAttribPointer(extension->attr_pos, 2, GL_FLOAT, GL_FALSE, 0, (GLvoid*) position);\n        glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);\n    }\n\n    // \u30d0\u30c3\u30af\u30d0\u30c3\u30d5\u30a1\u3092\u30d5\u30ed\u30f3\u30c8\u30d0\u30c3\u30d5\u30a1\u3078\u8ee2\u9001\u3059\u308b\u3002\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3054\u3068\u306b\u5185\u90e8\u306e\u5b9f\u88c5\u304c\u7570\u306a\u308b\u3002\n    ES20_postFrontBuffer(app);\n}\n\n\nGLSL\u6587\u6cd5\uff1auniform \u30ad\u30fc\u30ef\u30fc\u30c9\nattribute\u5909\u6570\u306f\u300c\u9802\u70b9\u304b\u3089\u60c5\u5831\u3092\u53d7\u3051\u53d6\u308b\u300d\u65b9\u6cd5\u3067\u30b7\u30a7\u30fc\u30c0\u306b\u60c5\u5831\u3092\u4f1d\u3048\u3066\u3044\u305f\u304c\u3001\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u306f attribute \u5909\u6570\u3092\u53d7\u3051\u53d6\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\n\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u306f\u3001 uniform\u5909\u6570 \u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u30a2\u30d7\u30ea\u304b\u3089\u60c5\u5831\u3092\u53d7\u3051\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n        const GLchar *fragment_shader_source =\n                \"uniform lowp vec4 unif_color;\"\n                \"void main() {\"\n                \"   gl_FragColor = unif_color;\"\n                \"}\";\n\n\nattribute\u5909\u6570\u304c\u300c\u9802\u70b9\u3054\u3068\u306e\u60c5\u5831\u300d\u3067\u3042\u308b\u306e\u306b\u5bfe\u3057\u3001uniform\u5909\u6570\u306f \u30a2\u30d7\u30ea\u304c\u8a2d\u5b9a\u3057\u305f\u5024\u304b\u3089\u4e00\u5207\u5909\u66f4\u3055\u308c\u306a\u3044 \u3068\u3044\u3046\u7279\u5fb4\u304c\u3042\u308b\u3002\n\u30d4\u30af\u30bb\u30eb\u8272\u306f\u4f4e\u7cbe\u5ea6\u3067\u3082\u30e2\u30d0\u30a4\u30eb\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u8272\u60c5\u5831\u3092\u8868\u73fe\u3067\u304d\u308b\u306e\u3067\u3001lowp \u3067\u5ba3\u8a00\u3057\u3066\u3044\u308b\u3002\n\nglGetUniformLocation\nuniform\u5909\u6570\u306e\u30a2\u30af\u30bb\u30b9\u306b\u306f\u3001attribute\u3068\u540c\u3058\u304f Location \u3092\u53d6\u5f97\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\nGLint glGetUniformLocation(GLuint program, const GLchar* name)\n\n\nprogram : location \u3092\u53d6\u5f97\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\nname : location \u3092\u53d6\u5f97\u3059\u308b uniform \u5909\u6570\u540d\n\n\u6b63\u5e38\u306b\u53d6\u5f97\u3067\u304d\u305f\u3089 0 \u4ee5\u4e0a\u3001\u5931\u6557\u3057\u305f\u5834\u5408\u306f -1 \u304c\u8fd4\u308b\u3002\n\nglUniform4f\n\u53d6\u5f97\u3057\u305f location \u3092\u5229\u7528\u3057\u3066 uniform \u5909\u6570\u3092\u66f8\u304d\u63db\u3048\u308b\u65b9\u6cd5\u306f\u8907\u6570\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u3002\u3053\u3053\u3067\u306f\u3001GLfloat\u578b\u306e\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\uff08\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\uff09\u3059\u308b\u30b3\u30de\u30f3\u30c9\u3092\u793a\u3059\u3002\nvoid glUniform4f(GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)\n\nGLfloat\u578b\u5909\u6570\u3092 vec4 \u578b uniform \u5909\u6570\u3078\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u3002\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u5bfe\u8c61\u306f\u3001\u6700\u5f8c\u306b glUseProgram \u30b3\u30de\u30f3\u30c9\u306b\u3088\u3063\u3066\u4f7f\u7528\u4e2d\u3068\u306a\u3063\u3066\u3044\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306a\u308b\u3002\nxyzw \u305d\u308c\u305e\u308c\u306e\u5f15\u6570\u306f\u3001RGBA \u306e\u8272\u60c5\u5831\u3068\u3057\u3066\u6271\u308f\u308c\u308b\u3002\n\nglUniform4fv\n\u914d\u5217\u3092\u4ecb\u3057\u3066XYZW\u306e\u60c5\u5831\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u3002vec4 \u306e\u914d\u5217\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u305funiform\u5909\u6570\u3078\u306e\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u306b\u3082\u5229\u7528\u3067\u304d\u308b\u3002\nvoid glUniform4fv(GLint location, GLsizei count, const GLfloat* v)\n\n\nlocation : \u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u5bfe\u8c61\u306e uniform \u5909\u6570 location\ncount : \u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u30d9\u30af\u30c8\u30eb\u6570\u3001v\u306e\u914d\u5217\u9577\u306f count * 4 \u4ee5\u4e0a\u304c\u5fc5\u8981\nv : \u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u30d9\u30af\u30c8\u30eb\u914d\u5217\n\n\n\u30b7\u30a7\u30fc\u30c0\u30b9\u30da\u30c3\u30af\u306b\u3064\u3044\u3066\n\u5b9a\u7fa9\u3067\u304d\u308b uniform \u5909\u6570\u306e\u6570\u306f\u7aef\u672b\u3054\u3068\u306b\u9650\u754c\u304c\u3042\u308b\u3002\nglGetIntegerv \u30b3\u30de\u30f3\u30c9\u306b GL_MAX_VERTEX_UNIFORM_VECTORS, GL_MAX_FRAGMENT_UNIFORM_VECTORS \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u305d\u308c\u305e\u308c\u306e uniform \u30d9\u30af\u30c8\u30eb\u500b\u6570\u304c\u53d6\u5f97\u3067\u304d\u308b\u3002\n        GLint   vert_vectors = 0;\n        GLint   frag_vectors = 0;\n        glGetIntegerv(GL_MAX_VERTEX_UNIFORM_VECTORS, &vert_vectors);\n        glGetIntegerv(GL_MAX_FRAGMENT_UNIFORM_VECTORS, &frag_vectors);\n\n\u305f\u3068\u3048\u3070 Nexus5 \u306f\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u3067 256 \u500b\u3001\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u3067 224 \u500b\u3068\u3044\u3063\u305f\u5236\u9650\u304c\u3042\u308b\u3002\n\u3042\u304f\u307e\u3067\u3053\u306e\u6570\u5b57\u306f\u300cvec4\u578b\u3067\u63db\u7b97\u3057\u3066\u300d\u3068\u3044\u3046\u5024\u3067\u3042\u308a\u3001\u4f8b\u3048\u3070 mat4 \u3068\u3044\u3046 4 x 4\u306e\u884c\u5217\u3067\u3042\u308c\u3070\u6d88\u8cbb\u91cf\u306f 4\u500d\u306b\u306a\u308b\u3002\nGPU \u306f\u30d9\u30af\u30c8\u30eb\u540c\u58eb\u306e\u6f14\u7b97\u306b\u7279\u5316\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u57fa\u672c\u3068\u306a\u308b vec4 \u5358\u4f4d\u3067\u7ba1\u7406\u304c\u3055\u308c\u3066\u3044\u308b\u3002\n\n\u9802\u70b9\u3092\u52d5\u304b\u3059\nuniform \u5909\u6570\u306f\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u306b\u3082\u6e21\u305b\u308b\u3002\n\u4f8b\u3048\u3070\u300c\u56db\u89d2\u5f62\u3092\u63cf\u753b\u3054\u3068\u306b\u79fb\u52d5\u3055\u305b\u308b\u300d\u3068\u3044\u3046\u51e6\u7406\u3092\u884c\u3046\u5834\u5408\u3001glVertexAttribPointer() \u3067\u306e\u64cd\u4f5c\u3067\u306f\u3001\u6bce\u5ea6\u6bce\u5ea6\u300c\u5168\u9802\u70b9\u4f4d\u7f6e\u306b\u52a0\u6e1b\u7b97\u51e6\u7406\u300d\u3092\u884c\u3044 OpenGL \u3078\u306e\u8ee2\u9001\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b\u3002\nCPU \u3067\u306f\u64cd\u4f5c\u8a18\u8ff0\u306f\u7c21\u5358\u3067\u3082\u3001\u901f\u5ea6\u7684\u306b\u512a\u308c\u3066\u3044\u308b\u3068\u306f\u8a00\u3048\u306a\u3044\u3002GPU \u306f\u305d\u306e\u3088\u3046\u306a\u5358\u7d14\u4f5c\u696d\u3001\u300c\u3053\u3053\u306e\u72ec\u7acb\u6027\u304c\u9ad8\u304f\u3001\u4e26\u5217\u5316\u304c\u53ef\u80fd\u306a\u51e6\u7406\u300d\u3092\u9ad8\u901f\u306b\u51e6\u7406\u3059\u308b\u305f\u3081\u306e\u6a5f\u69cb\u3092\u591a\u304f\u5099\u3048\u3066\u3044\u308b\u3002\n\u4ee5\u4e0b\u3067\u306f\u3001\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u306b\u300c\u79fb\u52d5\u60c5\u5831\u300d\u3092\u6e21\u3057\u3066\u79fb\u52d5\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\u3002\nvoid sample_ShaderUniformPos_initialize(GLApplication *app) {\n    // \u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u7528\u306e\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\u3059\u308b\n    app->extension = (Extension_ShaderUniformPos*) malloc(sizeof(Extension_ShaderUniformPos));\n    // \u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u7528\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\n    Extension_ShaderUniformPos *extension = (Extension_ShaderUniformPos*) app->extension;\n\n    // \u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u30fc\u3092\u7528\u610f\u3059\u308b\n    {\n        const GLchar *vertex_shader_source = \"attribute mediump vec4 attr_pos;\"\n        // \u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u8a2d\u5b9a\u3059\u308b\u5909\u6570\n        // \u3053\u306e\u5909\u6570\u306e\u5024\u3060\u3051\u3001\u9802\u70b9\u4f4d\u7f6e\u304c\u52d5\u304f\n                        \"uniform mediump vec2 unif_move_pos;\"\n                        \"void main() {\"\n                        \"   gl_Position = attr_pos;\"\n        //  unif_move_pos\u306e\u5024\u3092\u66f4\u306b\u52a0\u7b97\u3059\u308b\n                        \"   gl_Position.xy += unif_move_pos;\"\n                        \"}\";\n\n        const GLchar *fragment_shader_source = \"void main() {\"\n                \"   gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\"\n                \"}\";\n\n        // \u30b3\u30f3\u30d1\u30a4\u30eb\u3068\u30ea\u30f3\u30af\u3092\u884c\u3046\n        extension->shader_program = Shader_createProgramFromSource(vertex_shader_source, fragment_shader_source);\n    }\n\n    // attribute\u3092\u53d6\u308a\u51fa\u3059\n    {\n        extension->attr_pos = glGetAttribLocation(extension->shader_program, \"attr_pos\");\n        assert(extension->attr_pos >= 0);\n    }\n\n    // TODO \u89e3\u8aac\n    // uniform\u5909\u6570\u306elocation\u3092\u53d6\u5f97\u3059\u308b\n    {\n        extension->unif_move_pos = glGetUniformLocation(extension->shader_program, \"unif_move_pos\");\n        assert(extension->unif_move_pos >= 0);\n    }\n\n    // \u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u5229\u7528\u3092\u958b\u59cb\u3059\u308b\n    glUseProgram(extension->shader_program);\n    assert(glGetError() == GL_NO_ERROR);\n\n    {\n        // XY\u5ea7\u6a19\u521d\u671f\u5316\n        extension->pos.x = 0;\n        extension->pos.y = 0;\n    }\n}\n\n\n/**\n * \u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u30a8\u30ea\u30a2\u304c\u5909\u66f4\u3055\u308c\u305f\n */\nvoid sample_ShaderUniformPos_resized(GLApplication *app) {\n    // \u63cf\u753b\u9818\u57df\u3092\u8a2d\u5b9a\u3059\u308b\n    glViewport(0, 0, app->surface_width, app->surface_height);\n}\n\n/**\n * \u30a2\u30d7\u30ea\u306e\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3092\u884c\u3046\n * \u6bce\u79d260\u56de\u524d\u5f8c\u547c\u3073\u51fa\u3055\u308c\u308b\u3002\n */\nvoid sample_ShaderUniformPos_rendering(GLApplication *app) {\n    // \u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u7528\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\n    Extension_ShaderUniformPos *extension = (Extension_ShaderUniformPos*) app->extension;\n\n    glClearColor(0.0f, 1.0f, 1.0f, 1.0f);\n    glClear(GL_COLOR_BUFFER_BIT);\n\n    // attr_pos\u3092\u6709\u52b9\u306b\u3059\u308b\n    glEnableVertexAttribArray(extension->attr_pos);\n\n    const GLfloat position[] = {\n    // v4(left top)\n            0.0, 0.5f,\n            // v5(left bottom)\n            0.0f, 0.0f,\n            // v6(right top)\n            0.5f, 0.5f,\n            // v7(right bottom)\n            0.5f, 0.0f, };\n    // TODO \u89e3\u8aac\n    // \u9802\u70b9\u306e\u8a2d\u5b9a\u306f\u4e00\u5ea6\u3060\u3051\u3067\u3044\u3044\n    glVertexAttribPointer(extension->attr_pos, 2, GL_FLOAT, GL_FALSE, 0, (GLvoid*) position);\n\n    {\n        // XY\u306e\u4f4d\u7f6e\u306b\u9069\u5f53\u306b\u52a0\u7b97\u3092\u884c\u3046\n        extension->pos.x += 0.01f;\n        extension->pos.y += 0.02f;\n\n        // \u4e00\u5b9a\u3092\u8d85\u3048\u305f\u3089\u5024\u3092\u30ea\u30bb\u30c3\u30c8\u3059\u308b\n        if (extension->pos.x > 1.0f) {\n            extension->pos.x = -1;\n        }\n        if (extension->pos.y > 1.0f) {\n            extension->pos.y = -1;\n        }\n\n        // uniform\u3078XY\u306e\u4f4d\u7f6e\u3092\u8ee2\u9001\u3059\u308b\n        glUniform2f(extension->unif_move_pos, extension->pos.x, extension->pos.y);\n//        glUniform2fv(extension->unif_move_pos, 1, (GLfloat*) &extension->pos);\n    }\n\n// \u56db\u89d2\u5f62\u306e\u63cf\u753b\u3092\u884c\u3046\n    glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);\n\n// \u30d0\u30c3\u30af\u30d0\u30c3\u30d5\u30a1\u3092\u30d5\u30ed\u30f3\u30c8\u30d0\u30c3\u30d5\u30a1\u3078\u8ee2\u9001\u3059\u308b\u3002\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3054\u3068\u306b\u5185\u90e8\u306e\u5b9f\u88c5\u304c\u7570\u306a\u308b\u3002\n    ES20_postFrontBuffer(app);\n}\n\n\n\nGLSL\u306e\u5909\u6570\u30a2\u30af\u30bb\u30b9\u69cb\u6587\n\u4e0a\u8a18\u306e\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u306f\u3001\n        const GLchar *vertex_shader_source = \"attribute mediump vec4 attr_pos;\"\n        // \u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u8a2d\u5b9a\u3059\u308b\u5909\u6570\n        // \u3053\u306e\u5909\u6570\u306e\u5024\u3060\u3051\u3001\u9802\u70b9\u4f4d\u7f6e\u304c\u52d5\u304f\n                        \"uniform mediump vec2 unif_move_pos;\"\n                        \"void main() {\"\n                        \"   gl_Position = attr_pos;\"\n        //  unif_move_pos\u306e\u5024\u3092\u66f4\u306b\u52a0\u7b97\u3059\u308b\n                        \"   gl_Position.xy += unif_move_pos;\"\n                        \"}\";\n\n\n\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002main \u306e\u6700\u5f8c\u306e\u6587\n\"gl_Position.xy += unif_move_pos;\"\n\u3067\u306f\u3001gl_Position \u306e X\u8981\u7d20\u3068Y\u8981\u7d20\u3078\u306e\u52a0\u7b97\u3092\u884c\u3063\u3066\u3044\u308b\u3002\nGLSL ES \u3067\u306f\u3001\u30d9\u30af\u30c8\u30eb\u6f14\u7b97\u304c\u591a\u3044\u3068\u3044\u3046\u7279\u6027\u3092\u53cd\u6620\u3057\u3001XY\u8981\u7d20\uff08\u30d9\u30af\u30c8\u30eb\u5185\u306e\u7279\u5b9a\u8981\u7d20\uff09\u306b\u5bfe\u3057\u3066\u540c\u6642\u306b\u4ee3\u5165\u3092\u884c\u3046\u3088\u3046\u306a\u69cb\u6587\u304c\u8a31\u3055\u308c\u3066\u3044\u308b\u3002C\u8a00\u8a9e\u7684\u306b\u66f8\u304f\u3068\u3001\ngl_Position.x += unif_move_pos.x\ngl_Position.y += unif_move_pos.y\n\u3068\u540c\u4e00\u3002\n\u5de6\u8fba\u304c gl_Position(vec4) \u3067\u3001\u53f3\u8fba\u304c unif_move_pos(vec2) \u3060\u304c\u3001gl_Position.xy \u3068\u66f8\u304f\u3053\u3068\u3067\u3001vec2 \u3068\u3057\u3066\u4ee3\u5165\u304c\u53ef\u80fd\u306b\u306a\u308b\u3002\ngl_Position.xyz \u3068\u3059\u308c\u30703\u6b21\u5143\u3060\u3057\u3001gl_Position.zy \u306e\u3088\u3046\u306b\u9806\u756a\u3092\u5165\u308c\u66ff\u3048\u308b\u3053\u3068\u3082\u53ef\u80fd\u3002\n\nglUniform2f, glUniform2fv\nvec2\u578b uniform \u5909\u6570\u3078\u306e\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u306f\u3053\u308c\u3089\u306e\u30b3\u30de\u30f3\u30c9\u3067\u884c\u3046\u3002\u8003\u3048\u65b9\u306f\u8272\u60c5\u5831\u3092 4f, 4fv \u3067\u4e0e\u3048\u305f\u3068\u304d\u3068\u540c\u3058\u3002\nvoid glUniform2f(GLint location, GLfloat x, GLfloat y)\n\nvoid glUniform2fv(GLint location, GLsizei count, const GLfloat* v)\n\n\n\u9802\u70b9\u306b\u4f4d\u7f6e\u60c5\u5831\u4ee5\u5916\u306e\u60c5\u5831\u3092\u4ed8\u4e0e\u3059\u308b\nOpenGL\u306e\u9802\u70b9\u30c7\u30fc\u30bf\u306f\u3001\u300c\u4f4d\u7f6e\u60c5\u5831\u300d\u4ee5\u5916\u306b\u3082\u300c\u6cd5\u7dda\u300d\u300cUV\u300d\u300c\u8272\u300d\u3068\u3044\u3046\u60c5\u5831\u3092\u6301\u3061\u3001\u305d\u308c\u3089\u3092 \u9802\u70b9\u306e\u6210\u5206 \u3068\u547c\u3076\u3002\u307e\u305f\u3001OpenGL\u306f\u9802\u70b9\u3054\u3068\u306e\u5024\u3092 \u88dc\u5b8c \u3057\u3066\u51fa\u529b\u3059\u308b\u305f\u3081\u306e\u6a5f\u69cb\u3092\u5099\u3048\u3066\u3044\u308b\uff08\u8d64\u306e\u9802\u70b9\u3068\u9752\u306e\u9802\u70b9\u306e\u9593\u306e\u30d4\u30af\u30bb\u30eb\u3092\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u3055\u305b\u308b\u3088\u3046\u306b\uff09\u3002\n\u4ee5\u4e0b\u306f3\u9802\u70b9\u306b\u300c\u8272\u300d\u60c5\u5831\u3092\u6301\u305f\u305b\u308b\u3068\u304d\u306e\u30b7\u30a7\u30fc\u30c0\u306e\u30b5\u30f3\u30d7\u30eb\nvoid sample_VertexColor_initialize(GLApplication *app) {\n    // \u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u7528\u306e\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\u3059\u308b\n    app->extension = (Extension_VertexColor*) malloc(sizeof(Extension_VertexColor));\n    // \u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u7528\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\n    Extension_VertexColor *extension = (Extension_VertexColor*) app->extension;\n\n    // \u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u30fc\u3092\u7528\u610f\u3059\u308b\n    {\n        const GLchar *vertex_shader_source =\n        //\n                \"attribute mediump vec4 attr_pos;\"\n                // \u9802\u70b9\u30ab\u30e9\u30fc\n                \"attribute lowp vec4 attr_color;\"\n                \"varying lowp vec4 vary_color;\"\n                \"void main() {\"\n                \"   gl_Position = attr_pos;\"\n                // \u9802\u70b9\u30ab\u30e9\u30fc\u51fa\u529b\n                \"   vary_color = attr_color;\"\n                \"}\";\n\n        const GLchar *fragment_shader_source =\n//\n                \"varying lowp vec4 vary_color;\"\n                \"void main() {\"\n                \"   gl_FragColor = vary_color;\"\n                \"}\";\n\n        // \u30b3\u30f3\u30d1\u30a4\u30eb\u3068\u30ea\u30f3\u30af\u3092\u884c\u3046\n        extension->shader_program = Shader_createProgramFromSource(vertex_shader_source, fragment_shader_source);\n    }\n\n    // attribute\u3092\u53d6\u308a\u51fa\u3059\n    {\n        extension->attr_pos = glGetAttribLocation(extension->shader_program, \"attr_pos\");\n        assert(extension->attr_pos >= 0);\n\n        extension->attr_color = glGetAttribLocation(extension->shader_program, \"attr_color\");\n        assert(extension->attr_color >= 0);\n    }\n\n    // \u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u5229\u7528\u3092\u958b\u59cb\u3059\u308b\n    glUseProgram(extension->shader_program);\n    assert(glGetError() == GL_NO_ERROR);\n\n    // \u30b7\u30a7\u30fc\u30c0\u30fc\u3067\u4f7f\u7528\u53ef\u80fd\u306a\u30d9\u30af\u30c8\u30eb\u6570\u3092\u53d6\u5f97\u3059\u308b\n    {\n        GLint   vary_vectors = 0;\n        glGetIntegerv(GL_MAX_VARYING_VECTORS, &vary_vectors);\n\n        __logf(\"Max Varying Vectors / %d\", vary_vectors);\n    }\n}\n\n\nvoid sample_VertexColor_rendering(GLApplication *app) {\n    // \u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u7528\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\n    Extension_VertexColor *extension = (Extension_VertexColor*) app->extension;\n\n    glClearColor(0.0f, 1.0f, 1.0f, 1.0f);\n    glClear(GL_COLOR_BUFFER_BIT);\n\n    // attribute\u5909\u6570\u3092\u6709\u52b9\u306b\u3059\u308b\n    glEnableVertexAttribArray(extension->attr_pos);\n    glEnableVertexAttribArray(extension->attr_color);\n\n    // \u753b\u9762\u4e2d\u592e\u3078\u63cf\u753b\u3059\u308b\n    const GLfloat position[] = {\n    // v0\n            0.0f, 1.0f,\n            // v1\n            1.0f, -1.0f,\n            // v2\n            -1.0f, -1.0f };\n\n    // \u9802\u70b9\u30ab\u30e9\u30fc\u3092\u8a2d\u5b9a\u3059\u308b\n    const GLubyte color[] = {\n            // v0 rgb\n            255, 0, 0,\n            // v1 rgb\n            0, 255, 0,\n            // v2 rgb\n            0, 0, 255,\n    };\n\n    glVertexAttribPointer(extension->attr_pos, 2, GL_FLOAT, GL_FALSE, 0, (GLvoid*) position);\n    glVertexAttribPointer(extension->attr_color, 3, GL_UNSIGNED_BYTE, GL_TRUE, 0, color);\n    glDrawArrays(GL_TRIANGLES, 0, 3);\n\n    // \u30d0\u30c3\u30af\u30d0\u30c3\u30d5\u30a1\u3092\u30d5\u30ed\u30f3\u30c8\u30d0\u30c3\u30d5\u30a1\u3078\u8ee2\u9001\u3059\u308b\u3002\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3054\u3068\u306b\u5185\u90e8\u306e\u5b9f\u88c5\u304c\u7570\u306a\u308b\u3002\n    ES20_postFrontBuffer(app);\n}\n\n\n\nGLSL\u6587\u6cd5\uff1avarying \u30ad\u30fc\u30ef\u30fc\u30c9\n\u4e0a\u8a18\u306e2\u3064\u306e\u30b7\u30a7\u30fc\u30c0\u306f\u5171\u306b\u4e0b\u8a18\u306e\u5909\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u3002\n    \"varying lowp vec4 vary_color;\"\n\nvarying \u5909\u6570\u306f\u3001\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u304b\u3089\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u3078\u5024\u3092\u6e21\u3059\u969b\u306b\u7528\u3044\u3089\u308c\u308b\u3002\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u304c\u66f8\u304d\u8fbc\u3093\u3060 varying \u5909\u6570\u306f\u3042\u308b\u7279\u5b9a\u306e\u51e6\u7406\u3092\u65bd\u3055\u308c\u3066\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u306b\u6e21\u3055\u308c\u308b\u3002\u7642\u6cd5\u3067\u540c\u3058\u578b\u30fb\u540c\u3058\u5909\u6570\u540d\u3067\u5b9a\u7fa9\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\ngl_Position \u306a\u3069\u306e\u7d44\u307f\u8fbc\u307f\u5909\u6570\u306f\u7279\u5b9a\u7528\u9014\u3067\u3057\u304b\u5229\u7528\u3067\u304d\u306a\u3044\u304c\u3001varying\u5909\u6570\u306f\u6c4e\u7528\u7684\u306b\u5024\u3092\u53d7\u3051\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3002\nvarying\u3068\u3044\u3046\u540d\u306e\u901a\u308a\u3001\u6e21\u3055\u308c\u308b\u969b\u306b\u5024\u304c\u5909\u5316\u3059\u308b\u3002\n\nvarying \u5909\u6570\u306e\u5236\u9650\nvarying\u5909\u6570\u306f\u5b9a\u7fa9\u3067\u304d\u308b\u5909\u6570\u306e\u500b\u6570\u304c\u975e\u5e38\u306b\u5c11\u306a\u3044\u3002\nNexus5 \u3067\u300116 \u3068\u304b\u3002glGetIntegerv(GL_MAX_VARYING_VECTORS, &num) \u3067\u53d6\u5f97\u3067\u304d\u308b\u3002\u8d85\u3048\u305f\u3089\u30b3\u30f3\u30d1\u30a4\u30eb\u5931\u6557\u3002\n\n\u9802\u70b9\u306b\u8907\u6570\u306e\u60c5\u5831\u3092\u4e0e\u3048\u308b\n\u30b5\u30f3\u30d7\u30eb\u306e\u63cf\u753b\u90e8\u5206\u3092\u898b\u308b\u3068\u3001\u9802\u70b9\u5ea7\u6a19\u3068\u9802\u70b9\u30ab\u30e9\u30fc\u306e2\u3064\u306e\u60c5\u5831\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u3002\uff08\u305d\u308c\u305e\u308c\u306e\u578b\u306f\u540c\u4e00\u3067\u3042\u308b\u5fc5\u8981\u306f\u306a\u3044\uff09\n\u3068\u304f\u306b attribute \u5909\u6570\u306e enable \u3092\u5fd8\u308c\u304c\u3061\u306a\u306e\u3067\u6ce8\u610f\n\u6700\u5f8c\u306b\u3001glVertexAttribPointer \u3067\u8907\u6570\u306e\u9802\u70b9\u60c5\u5831\uff1d \u9802\u70b9\u30b9\u30c8\u30ea\u30fc\u30e0 \u3092\u96c6\u7d04\u3057\u3001attribute\u5909\u6570\u3068\u3057\u3066\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u306b\u6e21\u3059\u3002\n\u3053\u306e\u3068\u304d\u3001\u7b2c4\u5f15\u6570\uff08normalized\uff09\u306b\u6ce8\u76ee\u3059\u308b\u3068\u3001\u4f4d\u7f6e\u306f GL_FALSE, \u30ab\u30e9\u30fc\u306f GL_TRUE \u3068\u306a\u3063\u3066\u3044\u308b\u3002\u3053\u308c\u306f\u3001color \u914d\u5217\u304c 0\u301c255 \u3067\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u6b63\u898f\u5316\u304c\u5fc5\u8981\u3060\u304b\u3089\u3002\n\u6b63\u898f\u5316\u306e\u5229\u7528\u30b7\u30fc\u30f3\u306f\u300c0.0\u301c1.0\uff08-1.0\u301c1.0\uff09\u300d\u3092\u5165\u529b\u3057\u305f\u3044\u3051\u3069\u3001GLfloat \u307b\u3069\u306e\u5206\u89e3\u80fd\u3092\u5fc5\u8981\u3068\u3057\u306a\u3044\u300d\u3068\u3044\u3046\u5834\u5408\u3002\u8272\u6210\u5206\u306f\u305d\u306e\u5178\u578b\uff081byte\u3067\u5341\u5206\uff09\u3002\n\n## \u524d\u63d0\n\n\u300e<a href=\"http://www.amazon.co.jp/gp/product/4877833013/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4877833013&linkCode=as2&tag=tinynoises-22\">\u30de\u30eb\u30c1\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306e\u305f\u3081\u306eOpenGL ES\u5165\u9580 \u57fa\u790e\u7de8\u2015Android/iOS\u5bfe\u5fdc\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0</a>\u300f\n\n\u306e\u629c\u7c8b\u30e1\u30e2\u3067\u3059\u30028\u7ae0\u306e\u5185\u5bb9\u3002\n\n\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\u306f\u65ad\u7247\u306e\u307f\u306a\u306e\u3067\u3001\u672c\u66f8\u3092\u8aad\u3093\u3067\u304f\u3060\u3055\u3044\u3002\n\n\n# \u30b7\u30a7\u30fc\u30c0\u306e\u57fa\u790e\n\n## \u5857\u308a\u3064\u3076\u3057\u306e\u8272\u3092\u5909\u66f4\u3059\u308b\n\n```\u5358\u8272\u3067\u5857\u308a\u3064\u3076\u3059\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\uff1a\n\n        const GLchar *fragment_shader_source =\n                \"void main() {\"\n                \"   gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n                \"}\";\n\n```\n\u203b \u300c1.0f\u300d\u3068\u306f\u66f8\u3051\u306a\u3044\u306e\u3067\u6ce8\u610f\n\n\u3053\u308c\u3092\u3001\u300c\u4efb\u610f\u306e\u8272\u3067\u5857\u308b\u300d\u30b7\u30a7\u30fc\u30c0\u306b\u5909\u66f4\u3059\u308b\u3002\n\n```\u521d\u671f\u5316\u90e8\ntypedef struct {\n    // \u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u7528\u30b7\u30a7\u30fc\u30c0\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0\n    GLint shader_program;\n\n    // \u4f4d\u7f6e\u60c5\u5831\u5c5e\u6027\n    GLint attr_pos;\n\n    // \u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u306e\u63cf\u753b\u8272\n    GLint unif_color;\n} Extension_ShaderUniformColor;\n\n/**\n * \u30a2\u30d7\u30ea\u306e\u521d\u671f\u5316\u3092\u884c\u3046\n */\nvoid sample_ShaderUniformColor_initialize(GLApplication *app) {\n    // \u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u7528\u306e\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\u3059\u308b\n    app->extension = (Extension_ShaderUniformColor*) malloc(sizeof(Extension_ShaderUniformColor));\n    // \u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u7528\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\n    Extension_ShaderUniformColor *extension = (Extension_ShaderUniformColor*) app->extension;\n\n    // \u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u30fc\u3092\u7528\u610f\u3059\u308b\n    {\n        const GLchar *vertex_shader_source =\n                \"attribute mediump vec4 attr_pos;\"\n                \"void main() {\"\n                \"   gl_Position = attr_pos;\"\n                \"}\";\n\n        const GLchar *fragment_shader_source =\n                \"uniform lowp vec4 unif_color;\"\n                \"void main() {\"\n                \"   gl_FragColor = unif_color;\"\n                \"}\";\n\n        // \u30b3\u30f3\u30d1\u30a4\u30eb\u3068\u30ea\u30f3\u30af\u3092\u884c\u3046\n        extension->shader_program = Shader_createProgramFromSource(vertex_shader_source, fragment_shader_source);\n    }\n\n    // attribute\u3092\u53d6\u308a\u51fa\u3059\n    {\n        extension->attr_pos = glGetAttribLocation(extension->shader_program, \"attr_pos\");\n        assert(extension->attr_pos >= 0);\n    }\n\n    // uniform\u5909\u6570\u306elocation\u3092\u53d6\u5f97\u3059\u308b\n    {\n        extension->unif_color = glGetUniformLocation(extension->shader_program, \"unif_color\");\n        assert(extension->unif_color >= 0);\n    }\n\n    // \u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u5229\u7528\u3092\u958b\u59cb\u3059\u308b\n    glUseProgram(extension->shader_program);\n    assert(glGetError() == GL_NO_ERROR);\n\n\n    // \u30b7\u30a7\u30fc\u30c0\u30fc\u3067\u4f7f\u7528\u53ef\u80fd\u306a\u30d9\u30af\u30c8\u30eb\u6570\u3092\u53d6\u5f97\u3059\u308b\n    {\n        GLint   vert_vectors = 0;\n        GLint   frag_vectors = 0;\n        glGetIntegerv(GL_MAX_VERTEX_UNIFORM_VECTORS, &vert_vectors);\n        glGetIntegerv(GL_MAX_FRAGMENT_UNIFORM_VECTORS, &frag_vectors);\n\n        __logf(\"Max Uniform Vectors / Vert(%d) Frag(%d)\", vert_vectors, frag_vectors);\n    }\n}\n```\n\n```\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u90e8\n/**\n * \u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u30a8\u30ea\u30a2\u304c\u5909\u66f4\u3055\u308c\u305f\n */\nvoid sample_ShaderUniformColor_resized(GLApplication *app) {\n    // \u63cf\u753b\u9818\u57df\u3092\u8a2d\u5b9a\u3059\u308b\n    glViewport(0, 0, app->surface_width, app->surface_height);\n}\n\n/**\n * \u30a2\u30d7\u30ea\u306e\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3092\u884c\u3046\n * \u6bce\u79d260\u56de\u524d\u5f8c\u547c\u3073\u51fa\u3055\u308c\u308b\u3002\n */\nvoid sample_ShaderUniformColor_rendering(GLApplication *app) {\n    // \u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u7528\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\n    Extension_ShaderUniformColor *extension = (Extension_ShaderUniformColor*) app->extension;\n\n    glClearColor(0.0f, 1.0f, 1.0f, 1.0f);\n    glClear(GL_COLOR_BUFFER_BIT);\n\n    // attr_pos\u3092\u6709\u52b9\u306b\u3059\u308b\n    glEnableVertexAttribArray(extension->attr_pos);\n\n    // \u5de6\u4e0a\u3078\u56db\u89d2\u5f62\u63cf\u753b\n    {\n        const GLfloat position[] = {\n                // v0(left top)\n                -0.75f, 0.75f,\n                // v1(left bottom)\n                -0.75f, 0.25f,\n                // v2(right top)\n                -0.25f, 0.75f,\n                // v3(right bottom)\n                -0.25f, 0.25f, };\n\n        // \u63cf\u753b\u8272\u3092\u6307\u5b9a\u3059\u308b\n        {\n            //                                   R,    G,    B,    A\n            glUniform4f(extension->unif_color, 1.0f, 0.0f, 1.0f, 1.0f);\n        }\n        glVertexAttribPointer(extension->attr_pos, 2, GL_FLOAT, GL_FALSE, 0, (GLvoid*) position);\n        glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);\n    }\n\n    // \u53f3\u4e0a\u3078\u56db\u89d2\u5f62\u63cf\u753b\n    {\n        const GLfloat position[] = {\n                // v4(left top)\n                0.25f, 0.75f,\n                // v5(left bottom)\n                0.25f, 0.25f,\n                // v6(right top)\n                0.75f, 0.75f,\n                // v7(right bottom)\n                0.75f, 0.25f, };\n\n        // \u63cf\u753b\u8272\u3092\u914d\u5217\u6307\u5b9a\u3059\u308b\n        {\n            const GLfloat poly_color[] = {\n                    // R\n                    1.0f,\n                    // G\n                    1.0f,\n                    // B\n                    0.0f,\n                    // A\n                    1.0f, };\n            glUniform4fv(extension->unif_color, 1, poly_color);\n        }\n\n        glVertexAttribPointer(extension->attr_pos, 2, GL_FLOAT, GL_FALSE, 0, (GLvoid*) position);\n        glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);\n    }\n\n    // \u30d0\u30c3\u30af\u30d0\u30c3\u30d5\u30a1\u3092\u30d5\u30ed\u30f3\u30c8\u30d0\u30c3\u30d5\u30a1\u3078\u8ee2\u9001\u3059\u308b\u3002\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3054\u3068\u306b\u5185\u90e8\u306e\u5b9f\u88c5\u304c\u7570\u306a\u308b\u3002\n    ES20_postFrontBuffer(app);\n}\n```\n\n### GLSL\u6587\u6cd5\uff1auniform \u30ad\u30fc\u30ef\u30fc\u30c9\nattribute\u5909\u6570\u306f\u300c\u9802\u70b9\u304b\u3089\u60c5\u5831\u3092\u53d7\u3051\u53d6\u308b\u300d\u65b9\u6cd5\u3067\u30b7\u30a7\u30fc\u30c0\u306b\u60c5\u5831\u3092\u4f1d\u3048\u3066\u3044\u305f\u304c\u3001\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u306f attribute \u5909\u6570\u3092\u53d7\u3051\u53d6\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\n\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u306f\u3001 **uniform\u5909\u6570** \u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u30a2\u30d7\u30ea\u304b\u3089\u60c5\u5831\u3092\u53d7\u3051\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n```\u6307\u5b9a\u8272\u3067\u5857\u308a\u3064\u3076\u3059\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\n        const GLchar *fragment_shader_source =\n                \"uniform lowp vec4 unif_color;\"\n                \"void main() {\"\n                \"   gl_FragColor = unif_color;\"\n                \"}\";\n\n```\nattribute\u5909\u6570\u304c\u300c\u9802\u70b9\u3054\u3068\u306e\u60c5\u5831\u300d\u3067\u3042\u308b\u306e\u306b\u5bfe\u3057\u3001uniform\u5909\u6570\u306f **\u30a2\u30d7\u30ea\u304c\u8a2d\u5b9a\u3057\u305f\u5024\u304b\u3089\u4e00\u5207\u5909\u66f4\u3055\u308c\u306a\u3044** \u3068\u3044\u3046\u7279\u5fb4\u304c\u3042\u308b\u3002\n\u30d4\u30af\u30bb\u30eb\u8272\u306f\u4f4e\u7cbe\u5ea6\u3067\u3082\u30e2\u30d0\u30a4\u30eb\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u8272\u60c5\u5831\u3092\u8868\u73fe\u3067\u304d\u308b\u306e\u3067\u3001lowp \u3067\u5ba3\u8a00\u3057\u3066\u3044\u308b\u3002\n\n### glGetUniformLocation\nuniform\u5909\u6570\u306e\u30a2\u30af\u30bb\u30b9\u306b\u306f\u3001attribute\u3068\u540c\u3058\u304f Location \u3092\u53d6\u5f97\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n```\nGLint glGetUniformLocation(GLuint program, const GLchar* name)\n```\n- program : location \u3092\u53d6\u5f97\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n- name : location \u3092\u53d6\u5f97\u3059\u308b uniform \u5909\u6570\u540d\n\n\u6b63\u5e38\u306b\u53d6\u5f97\u3067\u304d\u305f\u3089 0 \u4ee5\u4e0a\u3001\u5931\u6557\u3057\u305f\u5834\u5408\u306f -1 \u304c\u8fd4\u308b\u3002\n\n### glUniform4f\n\u53d6\u5f97\u3057\u305f location \u3092\u5229\u7528\u3057\u3066 uniform \u5909\u6570\u3092\u66f8\u304d\u63db\u3048\u308b\u65b9\u6cd5\u306f\u8907\u6570\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u3002\u3053\u3053\u3067\u306f\u3001GLfloat\u578b\u306e\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\uff08\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\uff09\u3059\u308b\u30b3\u30de\u30f3\u30c9\u3092\u793a\u3059\u3002\n\n```\nvoid glUniform4f(GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)\n```\nGLfloat\u578b\u5909\u6570\u3092 vec4 \u578b uniform \u5909\u6570\u3078\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u3002\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u5bfe\u8c61\u306f\u3001\u6700\u5f8c\u306b glUseProgram \u30b3\u30de\u30f3\u30c9\u306b\u3088\u3063\u3066\u4f7f\u7528\u4e2d\u3068\u306a\u3063\u3066\u3044\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306a\u308b\u3002\nxyzw \u305d\u308c\u305e\u308c\u306e\u5f15\u6570\u306f\u3001RGBA \u306e\u8272\u60c5\u5831\u3068\u3057\u3066\u6271\u308f\u308c\u308b\u3002\n\n### glUniform4fv\n\u914d\u5217\u3092\u4ecb\u3057\u3066XYZW\u306e\u60c5\u5831\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u3002vec4 \u306e\u914d\u5217\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u305funiform\u5909\u6570\u3078\u306e\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u306b\u3082\u5229\u7528\u3067\u304d\u308b\u3002\n\n```\nvoid glUniform4fv(GLint location, GLsizei count, const GLfloat* v)\n```\n- location : \u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u5bfe\u8c61\u306e uniform \u5909\u6570 location\n- count : \u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u30d9\u30af\u30c8\u30eb\u6570\u3001v\u306e\u914d\u5217\u9577\u306f count * 4 \u4ee5\u4e0a\u304c\u5fc5\u8981\n- v : \u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u30d9\u30af\u30c8\u30eb\u914d\u5217\n\n## \u30b7\u30a7\u30fc\u30c0\u30b9\u30da\u30c3\u30af\u306b\u3064\u3044\u3066\n\u5b9a\u7fa9\u3067\u304d\u308b uniform \u5909\u6570\u306e\u6570\u306f\u7aef\u672b\u3054\u3068\u306b\u9650\u754c\u304c\u3042\u308b\u3002\nglGetIntegerv \u30b3\u30de\u30f3\u30c9\u306b GL_MAX_VERTEX_UNIFORM_VECTORS, GL_MAX_FRAGMENT_UNIFORM_VECTORS \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u305d\u308c\u305e\u308c\u306e uniform \u30d9\u30af\u30c8\u30eb\u500b\u6570\u304c\u53d6\u5f97\u3067\u304d\u308b\u3002\n\n```\n        GLint   vert_vectors = 0;\n        GLint   frag_vectors = 0;\n        glGetIntegerv(GL_MAX_VERTEX_UNIFORM_VECTORS, &vert_vectors);\n        glGetIntegerv(GL_MAX_FRAGMENT_UNIFORM_VECTORS, &frag_vectors);\n```\n\n\u305f\u3068\u3048\u3070 Nexus5 \u306f\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u3067 256 \u500b\u3001\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u3067 224 \u500b\u3068\u3044\u3063\u305f\u5236\u9650\u304c\u3042\u308b\u3002\n\u3042\u304f\u307e\u3067\u3053\u306e\u6570\u5b57\u306f\u300cvec4\u578b\u3067\u63db\u7b97\u3057\u3066\u300d\u3068\u3044\u3046\u5024\u3067\u3042\u308a\u3001\u4f8b\u3048\u3070 mat4 \u3068\u3044\u3046 4 x 4\u306e\u884c\u5217\u3067\u3042\u308c\u3070\u6d88\u8cbb\u91cf\u306f 4\u500d\u306b\u306a\u308b\u3002\nGPU \u306f\u30d9\u30af\u30c8\u30eb\u540c\u58eb\u306e\u6f14\u7b97\u306b\u7279\u5316\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u57fa\u672c\u3068\u306a\u308b vec4 \u5358\u4f4d\u3067\u7ba1\u7406\u304c\u3055\u308c\u3066\u3044\u308b\u3002\n\n## \u9802\u70b9\u3092\u52d5\u304b\u3059\nuniform \u5909\u6570\u306f\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u306b\u3082\u6e21\u305b\u308b\u3002\n\u4f8b\u3048\u3070\u300c\u56db\u89d2\u5f62\u3092\u63cf\u753b\u3054\u3068\u306b\u79fb\u52d5\u3055\u305b\u308b\u300d\u3068\u3044\u3046\u51e6\u7406\u3092\u884c\u3046\u5834\u5408\u3001glVertexAttribPointer() \u3067\u306e\u64cd\u4f5c\u3067\u306f\u3001\u6bce\u5ea6\u6bce\u5ea6\u300c\u5168\u9802\u70b9\u4f4d\u7f6e\u306b\u52a0\u6e1b\u7b97\u51e6\u7406\u300d\u3092\u884c\u3044 OpenGL \u3078\u306e\u8ee2\u9001\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b\u3002\n\nCPU \u3067\u306f\u64cd\u4f5c\u8a18\u8ff0\u306f\u7c21\u5358\u3067\u3082\u3001\u901f\u5ea6\u7684\u306b\u512a\u308c\u3066\u3044\u308b\u3068\u306f\u8a00\u3048\u306a\u3044\u3002GPU \u306f\u305d\u306e\u3088\u3046\u306a\u5358\u7d14\u4f5c\u696d\u3001\u300c\u3053\u3053\u306e\u72ec\u7acb\u6027\u304c\u9ad8\u304f\u3001\u4e26\u5217\u5316\u304c\u53ef\u80fd\u306a\u51e6\u7406\u300d\u3092\u9ad8\u901f\u306b\u51e6\u7406\u3059\u308b\u305f\u3081\u306e\u6a5f\u69cb\u3092\u591a\u304f\u5099\u3048\u3066\u3044\u308b\u3002\n\n\u4ee5\u4e0b\u3067\u306f\u3001\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u306b\u300c\u79fb\u52d5\u60c5\u5831\u300d\u3092\u6e21\u3057\u3066\u79fb\u52d5\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\u3002\n\n```\u521d\u671f\u5316\u90e8\nvoid sample_ShaderUniformPos_initialize(GLApplication *app) {\n    // \u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u7528\u306e\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\u3059\u308b\n    app->extension = (Extension_ShaderUniformPos*) malloc(sizeof(Extension_ShaderUniformPos));\n    // \u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u7528\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\n    Extension_ShaderUniformPos *extension = (Extension_ShaderUniformPos*) app->extension;\n\n    // \u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u30fc\u3092\u7528\u610f\u3059\u308b\n    {\n        const GLchar *vertex_shader_source = \"attribute mediump vec4 attr_pos;\"\n        // \u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u8a2d\u5b9a\u3059\u308b\u5909\u6570\n        // \u3053\u306e\u5909\u6570\u306e\u5024\u3060\u3051\u3001\u9802\u70b9\u4f4d\u7f6e\u304c\u52d5\u304f\n                        \"uniform mediump vec2 unif_move_pos;\"\n                        \"void main() {\"\n                        \"   gl_Position = attr_pos;\"\n        //  unif_move_pos\u306e\u5024\u3092\u66f4\u306b\u52a0\u7b97\u3059\u308b\n                        \"   gl_Position.xy += unif_move_pos;\"\n                        \"}\";\n\n        const GLchar *fragment_shader_source = \"void main() {\"\n                \"   gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\"\n                \"}\";\n\n        // \u30b3\u30f3\u30d1\u30a4\u30eb\u3068\u30ea\u30f3\u30af\u3092\u884c\u3046\n        extension->shader_program = Shader_createProgramFromSource(vertex_shader_source, fragment_shader_source);\n    }\n\n    // attribute\u3092\u53d6\u308a\u51fa\u3059\n    {\n        extension->attr_pos = glGetAttribLocation(extension->shader_program, \"attr_pos\");\n        assert(extension->attr_pos >= 0);\n    }\n\n    // TODO \u89e3\u8aac\n    // uniform\u5909\u6570\u306elocation\u3092\u53d6\u5f97\u3059\u308b\n    {\n        extension->unif_move_pos = glGetUniformLocation(extension->shader_program, \"unif_move_pos\");\n        assert(extension->unif_move_pos >= 0);\n    }\n\n    // \u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u5229\u7528\u3092\u958b\u59cb\u3059\u308b\n    glUseProgram(extension->shader_program);\n    assert(glGetError() == GL_NO_ERROR);\n\n    {\n        // XY\u5ea7\u6a19\u521d\u671f\u5316\n        extension->pos.x = 0;\n        extension->pos.y = 0;\n    }\n}\n\n```\n\n```rendering\u90e8\n/**\n * \u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u30a8\u30ea\u30a2\u304c\u5909\u66f4\u3055\u308c\u305f\n */\nvoid sample_ShaderUniformPos_resized(GLApplication *app) {\n    // \u63cf\u753b\u9818\u57df\u3092\u8a2d\u5b9a\u3059\u308b\n    glViewport(0, 0, app->surface_width, app->surface_height);\n}\n\n/**\n * \u30a2\u30d7\u30ea\u306e\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3092\u884c\u3046\n * \u6bce\u79d260\u56de\u524d\u5f8c\u547c\u3073\u51fa\u3055\u308c\u308b\u3002\n */\nvoid sample_ShaderUniformPos_rendering(GLApplication *app) {\n    // \u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u7528\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\n    Extension_ShaderUniformPos *extension = (Extension_ShaderUniformPos*) app->extension;\n\n    glClearColor(0.0f, 1.0f, 1.0f, 1.0f);\n    glClear(GL_COLOR_BUFFER_BIT);\n\n    // attr_pos\u3092\u6709\u52b9\u306b\u3059\u308b\n    glEnableVertexAttribArray(extension->attr_pos);\n\n    const GLfloat position[] = {\n    // v4(left top)\n            0.0, 0.5f,\n            // v5(left bottom)\n            0.0f, 0.0f,\n            // v6(right top)\n            0.5f, 0.5f,\n            // v7(right bottom)\n            0.5f, 0.0f, };\n    // TODO \u89e3\u8aac\n    // \u9802\u70b9\u306e\u8a2d\u5b9a\u306f\u4e00\u5ea6\u3060\u3051\u3067\u3044\u3044\n    glVertexAttribPointer(extension->attr_pos, 2, GL_FLOAT, GL_FALSE, 0, (GLvoid*) position);\n\n    {\n        // XY\u306e\u4f4d\u7f6e\u306b\u9069\u5f53\u306b\u52a0\u7b97\u3092\u884c\u3046\n        extension->pos.x += 0.01f;\n        extension->pos.y += 0.02f;\n\n        // \u4e00\u5b9a\u3092\u8d85\u3048\u305f\u3089\u5024\u3092\u30ea\u30bb\u30c3\u30c8\u3059\u308b\n        if (extension->pos.x > 1.0f) {\n            extension->pos.x = -1;\n        }\n        if (extension->pos.y > 1.0f) {\n            extension->pos.y = -1;\n        }\n\n        // uniform\u3078XY\u306e\u4f4d\u7f6e\u3092\u8ee2\u9001\u3059\u308b\n        glUniform2f(extension->unif_move_pos, extension->pos.x, extension->pos.y);\n//        glUniform2fv(extension->unif_move_pos, 1, (GLfloat*) &extension->pos);\n    }\n\n// \u56db\u89d2\u5f62\u306e\u63cf\u753b\u3092\u884c\u3046\n    glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);\n\n// \u30d0\u30c3\u30af\u30d0\u30c3\u30d5\u30a1\u3092\u30d5\u30ed\u30f3\u30c8\u30d0\u30c3\u30d5\u30a1\u3078\u8ee2\u9001\u3059\u308b\u3002\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3054\u3068\u306b\u5185\u90e8\u306e\u5b9f\u88c5\u304c\u7570\u306a\u308b\u3002\n    ES20_postFrontBuffer(app);\n}\n\n```\n\n## GLSL\u306e\u5909\u6570\u30a2\u30af\u30bb\u30b9\u69cb\u6587\n\u4e0a\u8a18\u306e\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u306f\u3001\n\n```\n        const GLchar *vertex_shader_source = \"attribute mediump vec4 attr_pos;\"\n        // \u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u8a2d\u5b9a\u3059\u308b\u5909\u6570\n        // \u3053\u306e\u5909\u6570\u306e\u5024\u3060\u3051\u3001\u9802\u70b9\u4f4d\u7f6e\u304c\u52d5\u304f\n                        \"uniform mediump vec2 unif_move_pos;\"\n                        \"void main() {\"\n                        \"   gl_Position = attr_pos;\"\n        //  unif_move_pos\u306e\u5024\u3092\u66f4\u306b\u52a0\u7b97\u3059\u308b\n                        \"   gl_Position.xy += unif_move_pos;\"\n                        \"}\";\n\n```\n\n\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002main \u306e\u6700\u5f8c\u306e\u6587\n\n\"gl_Position.xy += unif_move_pos;\"\n\n\u3067\u306f\u3001gl_Position \u306e X\u8981\u7d20\u3068Y\u8981\u7d20\u3078\u306e\u52a0\u7b97\u3092\u884c\u3063\u3066\u3044\u308b\u3002\n\nGLSL ES \u3067\u306f\u3001\u30d9\u30af\u30c8\u30eb\u6f14\u7b97\u304c\u591a\u3044\u3068\u3044\u3046\u7279\u6027\u3092\u53cd\u6620\u3057\u3001XY\u8981\u7d20\uff08\u30d9\u30af\u30c8\u30eb\u5185\u306e\u7279\u5b9a\u8981\u7d20\uff09\u306b\u5bfe\u3057\u3066\u540c\u6642\u306b\u4ee3\u5165\u3092\u884c\u3046\u3088\u3046\u306a\u69cb\u6587\u304c\u8a31\u3055\u308c\u3066\u3044\u308b\u3002C\u8a00\u8a9e\u7684\u306b\u66f8\u304f\u3068\u3001\n\ngl_Position.x += unif_move_pos.x\ngl_Position.y += unif_move_pos.y\n\n\u3068\u540c\u4e00\u3002\n\n\u5de6\u8fba\u304c gl_Position(vec4) \u3067\u3001\u53f3\u8fba\u304c unif_move_pos(vec2) \u3060\u304c\u3001gl_Position.xy \u3068\u66f8\u304f\u3053\u3068\u3067\u3001vec2 \u3068\u3057\u3066\u4ee3\u5165\u304c\u53ef\u80fd\u306b\u306a\u308b\u3002\ngl_Position.xyz \u3068\u3059\u308c\u30703\u6b21\u5143\u3060\u3057\u3001gl_Position.zy \u306e\u3088\u3046\u306b\u9806\u756a\u3092\u5165\u308c\u66ff\u3048\u308b\u3053\u3068\u3082\u53ef\u80fd\u3002\n\n## glUniform2f, glUniform2fv\nvec2\u578b uniform \u5909\u6570\u3078\u306e\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u306f\u3053\u308c\u3089\u306e\u30b3\u30de\u30f3\u30c9\u3067\u884c\u3046\u3002\u8003\u3048\u65b9\u306f\u8272\u60c5\u5831\u3092 4f, 4fv \u3067\u4e0e\u3048\u305f\u3068\u304d\u3068\u540c\u3058\u3002\n\n```\nvoid glUniform2f(GLint location, GLfloat x, GLfloat y)\n\nvoid glUniform2fv(GLint location, GLsizei count, const GLfloat* v)\n```\n\n## \u9802\u70b9\u306b\u4f4d\u7f6e\u60c5\u5831\u4ee5\u5916\u306e\u60c5\u5831\u3092\u4ed8\u4e0e\u3059\u308b\nOpenGL\u306e\u9802\u70b9\u30c7\u30fc\u30bf\u306f\u3001\u300c\u4f4d\u7f6e\u60c5\u5831\u300d\u4ee5\u5916\u306b\u3082\u300c\u6cd5\u7dda\u300d\u300cUV\u300d\u300c\u8272\u300d\u3068\u3044\u3046\u60c5\u5831\u3092\u6301\u3061\u3001\u305d\u308c\u3089\u3092 **\u9802\u70b9\u306e\u6210\u5206** \u3068\u547c\u3076\u3002\u307e\u305f\u3001OpenGL\u306f\u9802\u70b9\u3054\u3068\u306e\u5024\u3092 **\u88dc\u5b8c** \u3057\u3066\u51fa\u529b\u3059\u308b\u305f\u3081\u306e\u6a5f\u69cb\u3092\u5099\u3048\u3066\u3044\u308b\uff08\u8d64\u306e\u9802\u70b9\u3068\u9752\u306e\u9802\u70b9\u306e\u9593\u306e\u30d4\u30af\u30bb\u30eb\u3092\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u3055\u305b\u308b\u3088\u3046\u306b\uff09\u3002\n\n\u4ee5\u4e0b\u306f3\u9802\u70b9\u306b\u300c\u8272\u300d\u60c5\u5831\u3092\u6301\u305f\u305b\u308b\u3068\u304d\u306e\u30b7\u30a7\u30fc\u30c0\u306e\u30b5\u30f3\u30d7\u30eb\n\n```\u521d\u671f\u5316\u90e8\nvoid sample_VertexColor_initialize(GLApplication *app) {\n    // \u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u7528\u306e\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\u3059\u308b\n    app->extension = (Extension_VertexColor*) malloc(sizeof(Extension_VertexColor));\n    // \u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u7528\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\n    Extension_VertexColor *extension = (Extension_VertexColor*) app->extension;\n\n    // \u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u30fc\u3092\u7528\u610f\u3059\u308b\n    {\n        const GLchar *vertex_shader_source =\n        //\n                \"attribute mediump vec4 attr_pos;\"\n                // \u9802\u70b9\u30ab\u30e9\u30fc\n                \"attribute lowp vec4 attr_color;\"\n                \"varying lowp vec4 vary_color;\"\n                \"void main() {\"\n                \"   gl_Position = attr_pos;\"\n                // \u9802\u70b9\u30ab\u30e9\u30fc\u51fa\u529b\n                \"   vary_color = attr_color;\"\n                \"}\";\n\n        const GLchar *fragment_shader_source =\n//\n                \"varying lowp vec4 vary_color;\"\n                \"void main() {\"\n                \"   gl_FragColor = vary_color;\"\n                \"}\";\n\n        // \u30b3\u30f3\u30d1\u30a4\u30eb\u3068\u30ea\u30f3\u30af\u3092\u884c\u3046\n        extension->shader_program = Shader_createProgramFromSource(vertex_shader_source, fragment_shader_source);\n    }\n\n    // attribute\u3092\u53d6\u308a\u51fa\u3059\n    {\n        extension->attr_pos = glGetAttribLocation(extension->shader_program, \"attr_pos\");\n        assert(extension->attr_pos >= 0);\n\n        extension->attr_color = glGetAttribLocation(extension->shader_program, \"attr_color\");\n        assert(extension->attr_color >= 0);\n    }\n\n    // \u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u5229\u7528\u3092\u958b\u59cb\u3059\u308b\n    glUseProgram(extension->shader_program);\n    assert(glGetError() == GL_NO_ERROR);\n\n    // \u30b7\u30a7\u30fc\u30c0\u30fc\u3067\u4f7f\u7528\u53ef\u80fd\u306a\u30d9\u30af\u30c8\u30eb\u6570\u3092\u53d6\u5f97\u3059\u308b\n    {\n        GLint   vary_vectors = 0;\n        glGetIntegerv(GL_MAX_VARYING_VECTORS, &vary_vectors);\n\n        __logf(\"Max Varying Vectors / %d\", vary_vectors);\n    }\n}\n\n```\n\n```\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u90e8\nvoid sample_VertexColor_rendering(GLApplication *app) {\n    // \u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u7528\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\n    Extension_VertexColor *extension = (Extension_VertexColor*) app->extension;\n\n    glClearColor(0.0f, 1.0f, 1.0f, 1.0f);\n    glClear(GL_COLOR_BUFFER_BIT);\n\n    // attribute\u5909\u6570\u3092\u6709\u52b9\u306b\u3059\u308b\n    glEnableVertexAttribArray(extension->attr_pos);\n    glEnableVertexAttribArray(extension->attr_color);\n\n    // \u753b\u9762\u4e2d\u592e\u3078\u63cf\u753b\u3059\u308b\n    const GLfloat position[] = {\n    // v0\n            0.0f, 1.0f,\n            // v1\n            1.0f, -1.0f,\n            // v2\n            -1.0f, -1.0f };\n\n    // \u9802\u70b9\u30ab\u30e9\u30fc\u3092\u8a2d\u5b9a\u3059\u308b\n    const GLubyte color[] = {\n            // v0 rgb\n            255, 0, 0,\n            // v1 rgb\n            0, 255, 0,\n            // v2 rgb\n            0, 0, 255,\n    };\n\n    glVertexAttribPointer(extension->attr_pos, 2, GL_FLOAT, GL_FALSE, 0, (GLvoid*) position);\n    glVertexAttribPointer(extension->attr_color, 3, GL_UNSIGNED_BYTE, GL_TRUE, 0, color);\n    glDrawArrays(GL_TRIANGLES, 0, 3);\n\n    // \u30d0\u30c3\u30af\u30d0\u30c3\u30d5\u30a1\u3092\u30d5\u30ed\u30f3\u30c8\u30d0\u30c3\u30d5\u30a1\u3078\u8ee2\u9001\u3059\u308b\u3002\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3054\u3068\u306b\u5185\u90e8\u306e\u5b9f\u88c5\u304c\u7570\u306a\u308b\u3002\n    ES20_postFrontBuffer(app);\n}\n\n```\n\n### GLSL\u6587\u6cd5\uff1avarying \u30ad\u30fc\u30ef\u30fc\u30c9\n\u4e0a\u8a18\u306e2\u3064\u306e\u30b7\u30a7\u30fc\u30c0\u306f\u5171\u306b\u4e0b\u8a18\u306e\u5909\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u3002\n\n```\n    \"varying lowp vec4 vary_color;\"\n```\n   \nvarying \u5909\u6570\u306f\u3001\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u304b\u3089\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u3078\u5024\u3092\u6e21\u3059\u969b\u306b\u7528\u3044\u3089\u308c\u308b\u3002\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u304c\u66f8\u304d\u8fbc\u3093\u3060 varying \u5909\u6570\u306f\u3042\u308b\u7279\u5b9a\u306e\u51e6\u7406\u3092\u65bd\u3055\u308c\u3066\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u306b\u6e21\u3055\u308c\u308b\u3002\u7642\u6cd5\u3067\u540c\u3058\u578b\u30fb\u540c\u3058\u5909\u6570\u540d\u3067\u5b9a\u7fa9\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\ngl_Position \u306a\u3069\u306e\u7d44\u307f\u8fbc\u307f\u5909\u6570\u306f\u7279\u5b9a\u7528\u9014\u3067\u3057\u304b\u5229\u7528\u3067\u304d\u306a\u3044\u304c\u3001varying\u5909\u6570\u306f\u6c4e\u7528\u7684\u306b\u5024\u3092\u53d7\u3051\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3002\nvarying\u3068\u3044\u3046\u540d\u306e\u901a\u308a\u3001\u6e21\u3055\u308c\u308b\u969b\u306b\u5024\u304c\u5909\u5316\u3059\u308b\u3002\n\n### varying \u5909\u6570\u306e\u5236\u9650\nvarying\u5909\u6570\u306f\u5b9a\u7fa9\u3067\u304d\u308b\u5909\u6570\u306e\u500b\u6570\u304c\u975e\u5e38\u306b\u5c11\u306a\u3044\u3002\nNexus5 \u3067\u300116 \u3068\u304b\u3002glGetIntegerv(GL_MAX_VARYING_VECTORS, &num) \u3067\u53d6\u5f97\u3067\u304d\u308b\u3002\u8d85\u3048\u305f\u3089\u30b3\u30f3\u30d1\u30a4\u30eb\u5931\u6557\u3002\n\n### \u9802\u70b9\u306b\u8907\u6570\u306e\u60c5\u5831\u3092\u4e0e\u3048\u308b\n\u30b5\u30f3\u30d7\u30eb\u306e\u63cf\u753b\u90e8\u5206\u3092\u898b\u308b\u3068\u3001\u9802\u70b9\u5ea7\u6a19\u3068\u9802\u70b9\u30ab\u30e9\u30fc\u306e2\u3064\u306e\u60c5\u5831\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u3002\uff08\u305d\u308c\u305e\u308c\u306e\u578b\u306f\u540c\u4e00\u3067\u3042\u308b\u5fc5\u8981\u306f\u306a\u3044\uff09\n\n*\u3068\u304f\u306b attribute \u5909\u6570\u306e enable \u3092\u5fd8\u308c\u304c\u3061\u306a\u306e\u3067\u6ce8\u610f*\n\n\u6700\u5f8c\u306b\u3001glVertexAttribPointer \u3067\u8907\u6570\u306e\u9802\u70b9\u60c5\u5831\uff1d **\u9802\u70b9\u30b9\u30c8\u30ea\u30fc\u30e0** \u3092\u96c6\u7d04\u3057\u3001attribute\u5909\u6570\u3068\u3057\u3066\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u306b\u6e21\u3059\u3002\n\u3053\u306e\u3068\u304d\u3001\u7b2c4\u5f15\u6570\uff08normalized\uff09\u306b\u6ce8\u76ee\u3059\u308b\u3068\u3001\u4f4d\u7f6e\u306f GL_FALSE, \u30ab\u30e9\u30fc\u306f GL_TRUE \u3068\u306a\u3063\u3066\u3044\u308b\u3002\u3053\u308c\u306f\u3001color \u914d\u5217\u304c 0\u301c255 \u3067\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u6b63\u898f\u5316\u304c\u5fc5\u8981\u3060\u304b\u3089\u3002\n\n\u6b63\u898f\u5316\u306e\u5229\u7528\u30b7\u30fc\u30f3\u306f\u300c0.0\u301c1.0\uff08-1.0\u301c1.0\uff09\u300d\u3092\u5165\u529b\u3057\u305f\u3044\u3051\u3069\u3001GLfloat \u307b\u3069\u306e\u5206\u89e3\u80fd\u3092\u5fc5\u8981\u3068\u3057\u306a\u3044\u300d\u3068\u3044\u3046\u5834\u5408\u3002\u8272\u6210\u5206\u306f\u305d\u306e\u5178\u578b\uff081byte\u3067\u5341\u5206\uff09\u3002\n\n\n\n", "tags": ["study", "memo", "OpenGL"]}