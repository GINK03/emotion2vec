{"tags": ["Ruby", "codeiq"], "context": " More than 1 year has passed since last update.[Ruby] \u30c1\u30b1\u30c3\u30c8\u30b4\u30d6\u30eb\u554f\u984c\n\u7d50\u57ce\u6d69\u3055\u3093\u306eCodeIQ \u30c1\u30b1\u30c3\u30c8\u30b4\u30d6\u30eb\u554f\u984c\nhttps://codeiq.jp/ace/yuki_hiroshi/q863\n\u3092\u89e3\u3044\u3066\u5fdc\u52df\u3057\u3001\u8a55\u4fa1\uff15\u3092\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\u3053\u308c\u3067\uff14\u52dd\uff12\u6557\u3067\u3059\u3002\u3053\u308c\u307e\u3067\uff12\u9023\u6557\u3057\u3066\u3044\u305f\u306e\u3067\u3001\u5ff5\u5165\u308a\u306b\u691c\u7b97\u3057\u307e\u3057\u305f\u3002\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u5f8c\u534a\u306f\u691c\u7b97\u90e8\u5206\u3067\u3059\u3002\nPOINT: \u3046\u308b\u3046\u5e74\u306e1\u67081\u65e5\u304b\u308912\u670831\u65e5\u307e\u3067\u306e\u30c1\u30b1\u30c3\u30c8\u3068\u8003\u3048\u3066\u3001\u5e30\u56fd\u65e5\u9806\u306b\u30bd\u30fc\u30c8\u3057\u305f\u3042\u3068\u3001\u4e57\u308b\u3053\u3068\u304c\u3067\u304d\u3066\u3001\u304b\u3064\u3001\u3082\u3063\u3068\u3082\u65e9\u304f\u5e30\u56fd\u3067\u304d\u308b\u30c1\u30b1\u30c3\u30c8\u3092\u9806\u306b\u96c6\u3081\u3066\u89e3\u7b54\u3068\u3057\u307e\u3057\u305f\u3002\n\u8caa\u6b32\u6cd5\u3067\u3001\u533a\u9593\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\u554f\u984c\u3092\u89e3\u304f\u554f\u984c\u3067\u3057\u305f\u3002\n\ngobble.rb\n\n# encoding: Shift_JIS\n# gobble.rb\nrequire 'date'\nrequire 'time'\nrequire 'pp'\n\nif true & false\nheredoc=<<HEREDOC\nAustria 1/1-1/5\nBelgium 1/6-1/10\nCanada 1/7-1/8\nDenmark 1/9-1/10\nEgypt 1/18-1/30\nGeorgia 2/29-3/2\nHEREDOC\n  lines = heredoc.lines.to_a\nelse\n  lines = Array.new\n  File.open(\"tickets.txt\",'r') { |r|\n    while line = r.gets\n      lines << line.chop\n    end\n  }\nend\n\nclass Ticket\n  attr_accessor :name, :from, :to\n  def initialize(name,from,to)\n    @name = name\n    @from = from\n    @to = to\n  end\nend\n\nLEAP_YEAR = 2016\nraise \"leap error\" if ! Date.new(LEAP_YEAR).leap?\n\ntickets = Array.new\nlines.each { |line|\n  /(\\S+)\\s+(\\d+)\\/(\\d+)-(\\d+)\\/(\\d+)/ =~ line\n  name = $1\n  from_s = sprintf(\"%4d/%02d/%02d\",LEAP_YEAR,$2,$3)\n  to_s   = sprintf(\"%4d/%02d/%02d\",LEAP_YEAR,$4,$5)\n  from   = Time.parse(from_s).yday\n  to     = Time.parse(to_s).yday\n  printf(\"%20s #{from_s}-#{to_s} #{from}-#{to} \\n\",name)\n  tickets << Ticket.new(name,from,to)\n}\n# pp tickets\n#--------------------------------------------------\n# \u5e30\u56fd\u65e5\u9806\u306b\u30bd\u30fc\u30c8\u3057\u305f\u3042\u3068\u3001\u4e57\u308b\u3053\u3068\u304c\u3067\u304d\u3066\u3001\u304b\u3064\u3001\u3082\u3063\u3068\u3082\u65e9\u304f\u5e30\u56fd\u3067\u304d\u308b\u30c1\u30b1\u30c3\u30c8\u3092\u9806\u306b\u96c6\u3081\u308b\np '-'*20\ncourses = Array.new\nfine = (-1)\ntickets.sort { |a,b| a.to <=> b.to }.each { |t|\n  if fine < t.from\n    courses << t\n    fine = t.to\n  end\n}\n# pp courses\n#--------------------------------------------------\n# \u56fd\u306e\u540d\u524d\u3092\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u9806\u306b\u4e26\u3079\u308b\np '-'*20\nanswer = \"#{courses.size}\"\ncourses.sort { |a,b| a.name <=> b.name }.each { |t|\n  answer += \" #{t.name}\"\n}\nprintf \"[#{answer}]\\n\"\n#--\u691c\u7b97--------------------------------------------\np '-'*20\nanswer2 = \"#{courses.size}\"\ntickets.each { |t|\n    answer2 += \" #{t.name}\" if courses.include?(t)\n}\nprintf \"[#{answer2}]\\n\"\n\nraise \"sort error\" if ! (answer == answer2)\n\n#--------------------------------------------------\n# \u7b54\u3048\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\nFile.open(\"my_answer.txt\",'w') { |f|\n  f.puts answer\n} if true\n\n#--\u691c\u7b97--------------------------------------------\np '-'*20\nfine = (-1)\ncourses.each_with_index { |t,idx|\n  # printf(\"%20s %2d %2d\\n\", t.name, t.from, t.to)\n  from_time = Time.local(LEAP_YEAR,1,1) + (60*60*24*(t.from-1))\n  to_time = Time.local(LEAP_YEAR,1,1) + (60*60*24*(t.to-1))\n  printf(\"%2d %14s %d/%d-%d/%d\\n\", idx+1, t.name, \n    from_time.month, from_time.day,\n    to_time.month, to_time.day)\n  generate_line = sprintf(\"%s %d/%d-%d/%d\",t.name,\n    from_time.month, from_time.day,\n    to_time.month, to_time.day)\n  raise \"line error\" if ! (lines.include?(generate_line))\n  raise \"day error\" if t.from <= fine\n  fine = t.to\n}\n#--------------------------------------------------\n\n\n\n\n\n[Ruby] \u30c1\u30b1\u30c3\u30c8\u30b4\u30d6\u30eb\u554f\u984c\n\n\u7d50\u57ce\u6d69\u3055\u3093\u306eCodeIQ \u30c1\u30b1\u30c3\u30c8\u30b4\u30d6\u30eb\u554f\u984c\n[https://codeiq.jp/ace/yuki_hiroshi/q863](https://codeiq.jp/ace/yuki_hiroshi/q863)\n\u3092\u89e3\u3044\u3066\u5fdc\u52df\u3057\u3001\u8a55\u4fa1\uff15\u3092\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\u3053\u308c\u3067\uff14\u52dd\uff12\u6557\u3067\u3059\u3002\u3053\u308c\u307e\u3067\uff12\u9023\u6557\u3057\u3066\u3044\u305f\u306e\u3067\u3001\u5ff5\u5165\u308a\u306b\u691c\u7b97\u3057\u307e\u3057\u305f\u3002\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u5f8c\u534a\u306f\u691c\u7b97\u90e8\u5206\u3067\u3059\u3002\n\nPOINT: \u3046\u308b\u3046\u5e74\u306e1\u67081\u65e5\u304b\u308912\u670831\u65e5\u307e\u3067\u306e\u30c1\u30b1\u30c3\u30c8\u3068\u8003\u3048\u3066\u3001\u5e30\u56fd\u65e5\u9806\u306b\u30bd\u30fc\u30c8\u3057\u305f\u3042\u3068\u3001\u4e57\u308b\u3053\u3068\u304c\u3067\u304d\u3066\u3001\u304b\u3064\u3001\u3082\u3063\u3068\u3082\u65e9\u304f\u5e30\u56fd\u3067\u304d\u308b\u30c1\u30b1\u30c3\u30c8\u3092\u9806\u306b\u96c6\u3081\u3066\u89e3\u7b54\u3068\u3057\u307e\u3057\u305f\u3002\n\n\u8caa\u6b32\u6cd5\u3067\u3001\u533a\u9593\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\u554f\u984c\u3092\u89e3\u304f\u554f\u984c\u3067\u3057\u305f\u3002\n\n\n```ruby:gobble.rb\n\n# encoding: Shift_JIS\n# gobble.rb\nrequire 'date'\nrequire 'time'\nrequire 'pp'\n\nif true & false\nheredoc=<<HEREDOC\nAustria 1/1-1/5\nBelgium 1/6-1/10\nCanada 1/7-1/8\nDenmark 1/9-1/10\nEgypt 1/18-1/30\nGeorgia 2/29-3/2\nHEREDOC\n  lines = heredoc.lines.to_a\nelse\n  lines = Array.new\n  File.open(\"tickets.txt\",'r') { |r|\n    while line = r.gets\n      lines << line.chop\n    end\n  }\nend\n\nclass Ticket\n  attr_accessor :name, :from, :to\n  def initialize(name,from,to)\n    @name = name\n    @from = from\n    @to = to\n  end\nend\n\nLEAP_YEAR = 2016\nraise \"leap error\" if ! Date.new(LEAP_YEAR).leap?\n\ntickets = Array.new\nlines.each { |line|\n  /(\\S+)\\s+(\\d+)\\/(\\d+)-(\\d+)\\/(\\d+)/ =~ line\n  name = $1\n  from_s = sprintf(\"%4d/%02d/%02d\",LEAP_YEAR,$2,$3)\n  to_s   = sprintf(\"%4d/%02d/%02d\",LEAP_YEAR,$4,$5)\n  from   = Time.parse(from_s).yday\n  to     = Time.parse(to_s).yday\n  printf(\"%20s #{from_s}-#{to_s} #{from}-#{to} \\n\",name)\n  tickets << Ticket.new(name,from,to)\n}\n# pp tickets\n#--------------------------------------------------\n# \u5e30\u56fd\u65e5\u9806\u306b\u30bd\u30fc\u30c8\u3057\u305f\u3042\u3068\u3001\u4e57\u308b\u3053\u3068\u304c\u3067\u304d\u3066\u3001\u304b\u3064\u3001\u3082\u3063\u3068\u3082\u65e9\u304f\u5e30\u56fd\u3067\u304d\u308b\u30c1\u30b1\u30c3\u30c8\u3092\u9806\u306b\u96c6\u3081\u308b\np '-'*20\ncourses = Array.new\nfine = (-1)\ntickets.sort { |a,b| a.to <=> b.to }.each { |t|\n  if fine < t.from\n    courses << t\n    fine = t.to\n  end\n}\n# pp courses\n#--------------------------------------------------\n# \u56fd\u306e\u540d\u524d\u3092\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u9806\u306b\u4e26\u3079\u308b\np '-'*20\nanswer = \"#{courses.size}\"\ncourses.sort { |a,b| a.name <=> b.name }.each { |t|\n  answer += \" #{t.name}\"\n}\nprintf \"[#{answer}]\\n\"\n#--\u691c\u7b97--------------------------------------------\np '-'*20\nanswer2 = \"#{courses.size}\"\ntickets.each { |t|\n    answer2 += \" #{t.name}\" if courses.include?(t)\n}\nprintf \"[#{answer2}]\\n\"\n\nraise \"sort error\" if ! (answer == answer2)\n\n#--------------------------------------------------\n# \u7b54\u3048\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\nFile.open(\"my_answer.txt\",'w') { |f|\n  f.puts answer\n} if true\n\n#--\u691c\u7b97--------------------------------------------\np '-'*20\nfine = (-1)\ncourses.each_with_index { |t,idx|\n  # printf(\"%20s %2d %2d\\n\", t.name, t.from, t.to)\n  from_time = Time.local(LEAP_YEAR,1,1) + (60*60*24*(t.from-1))\n  to_time = Time.local(LEAP_YEAR,1,1) + (60*60*24*(t.to-1))\n  printf(\"%2d %14s %d/%d-%d/%d\\n\", idx+1, t.name, \n    from_time.month, from_time.day,\n    to_time.month, to_time.day)\n  generate_line = sprintf(\"%s %d/%d-%d/%d\",t.name,\n    from_time.month, from_time.day,\n    to_time.month, to_time.day)\n  raise \"line error\" if ! (lines.include?(generate_line))\n  raise \"day error\" if t.from <= fine\n  fine = t.to\n}\n#--------------------------------------------------\n\n\n\n```\n"}