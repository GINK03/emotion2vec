{"context": " More than 1 year has passed since last update.\u52c9\u5f37\u306e\u305f\u3081\u3001PHP\u3067\u30d9\u30a4\u30b8\u30a2\u30f3\u30d5\u30a3\u30eb\u30bf\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\u4e0b\u8a18\u306e\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u30b9\u30e0\u30fc\u30b8\u30f3\u30b0\u3068\u3057\u3066\u3001\u5358\u8a9e\u306e\u51fa\u73fe\u56de\u6570\u306b1\u3092\u8db3\u3057\u3066\u3044\u307e\u3059\u3002\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u30ea\u30f3\u30af\u5148\u306e\u89e3\u8aac\u304c\u6b63\u78ba\u3060\u3068\u601d\u3046\u306e\u3067\u3001\u5272\u611b\u3057\u307e\u3059\u304c\u3001\u624b\u8a08\u7b97\u3067\u306e\u8a08\u7b97\u3068\u7d50\u679c\u306f\u5408\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u591a\u5206\u6b63\u3057\u304f\u52d5\u4f5c\u3057\u3066\u3044\u308b\u304b\u3068\u3002\n\u25cf\u53c2\u8003\uff1a\n\u7b2c3\u56de\u3000\u30d9\u30a4\u30b8\u30a2\u30f3\u30d5\u30a3\u30eb\u30bf\u3092\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046\u3000http://gihyo.jp/dev/serial/01/machine-learning/0003?page=2\nP(word|cate)\u3092\u6c42\u3081\u308b\u6642\u306e\u5206\u6bcd\u306b\u306a\u308b\u30ab\u30c6\u30b4\u30ea\u306e\u5168\u5358\u8a9e\u51fa\u73fe\u56de\u6570\uff08getAllWordNumCate($cate)\uff09\u3092\u90fd\u5ea6\u8a08\u7b97\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u7121\u99c4\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u5206\u304b\u308a\u3084\u3059\u3055\u3092\u512a\u5148\u3057\u3066\u305d\u306e\u307e\u307e\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\nClassifer.php\n<?php\n\nerror_reporting(E_ALL & ~E_NOTICE);\n\n/**\n * Classifier\n *\n * @package\n * @author kure\n */\nclass Classifier {\n\n    private $cc = array();\n    private $fc = array();\n\n    private function getwords($doc) {\n        return array_unique(preg_split(\"/\\\\W/\", $doc));\n    }\n\n    /**\n     * \n     * @param type $doc\n     * @param type $cate\n     */\n    public function train($doc, $cate) {\n        $this->cc[$cate] ++;\n        $words = $this->getwords($doc);\n        foreach ($words as $v) {\n            $this->fc[$v][$cate] ++;\n        }\n    }\n\n    /**\n     * \n     * @param type $cate\n     * @return type\n     */\n    private function cateProb($cate) {\n        $total = 0;\n        foreach ($this->cc as $v) {\n            $total = $total + $v;\n        }\n        return $this->cc[$cate] / $total;\n    }\n\n    /**\n     * \n     * @param type $word\n     * @param type $cate\n     * @return type\n     */\n    private function getWordNumCate($word, $cate) {\n        foreach ($this->fc as $key => $value) {\n            if ($key === $word) {\n                return $value[$cate] + 1;\n            }\n        }\n    }\n\n    /**\n     * \n     * @param type $cateSelected\n     * @return type\n     */\n    private function getAllWordNumCate($cateSelected) {\n        $total = 0;\n        foreach ($this->fc as $key => $value) {\n            foreach ($value as $cate => $num) {\n                if ($cate === $cateSelected) {\n                    $total = $total + $num;\n                }\n            }\n        }\n        return $total;\n    }\n\n    /**\n     * P(word|cat)\n     * @param type $word\n     * @param type $cate\n     * @return type\n     */\n    private function wordCateProb($word, $cate) {\n        return $this->getWordNumCate($word, $cate) / $this->getAllWordNumCate($cate);\n    }\n\n    /**\n     * P(doc|cat) = P(word1|cat)P(word2|cat)...\n     * @param type $doc\n     * @param type $cate\n     * @return type\n     */\n    private function docCateProb($doc, $cate) {\n        $wordArr = $this->getwords($doc);\n        $wordProbArr = array();\n        $wordProbTotal = 1;\n        foreach ($wordArr as $word) {\n            $wordProbTotal = $wordProbTotal * $this->wordCateProb($word, $cate);\n        }\n        return $wordProbTotal;\n    }\n\n    /**\n     * P(cat|doc) = P(doc|cat)P(cat)\n     * @param type $doc\n     */\n    public function classify($doc) {\n        foreach ($this->cc as $cate => $num) {\n            echo $cate . \": \" . $this->cateProb($cate) * $this->docCateProb($doc, $cate) . \"\\n\";\n        }\n    }\n\n}\n\n$c = new Classifier();\n$c->train(\"I have\", \"bad\");\n$c->train(\"I donnot\", \"good\");\n$c->train(\"I know\", \"bad\");\n$c->classify(\"I\");\n\n\n\n\u5b9f\u884c\u7d50\u679c\nbad: 0.5\ngood: 0.33333333333333\n\n\n\n\u52c9\u5f37\u306e\u305f\u3081\u3001PHP\u3067\u30d9\u30a4\u30b8\u30a2\u30f3\u30d5\u30a3\u30eb\u30bf\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\u4e0b\u8a18\u306e\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u30b9\u30e0\u30fc\u30b8\u30f3\u30b0\u3068\u3057\u3066\u3001\u5358\u8a9e\u306e\u51fa\u73fe\u56de\u6570\u306b1\u3092\u8db3\u3057\u3066\u3044\u307e\u3059\u3002\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u30ea\u30f3\u30af\u5148\u306e\u89e3\u8aac\u304c\u6b63\u78ba\u3060\u3068\u601d\u3046\u306e\u3067\u3001\u5272\u611b\u3057\u307e\u3059\u304c\u3001\u624b\u8a08\u7b97\u3067\u306e\u8a08\u7b97\u3068\u7d50\u679c\u306f\u5408\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u591a\u5206\u6b63\u3057\u304f\u52d5\u4f5c\u3057\u3066\u3044\u308b\u304b\u3068\u3002\n\u25cf\u53c2\u8003\uff1a\n\u7b2c3\u56de\u3000\u30d9\u30a4\u30b8\u30a2\u30f3\u30d5\u30a3\u30eb\u30bf\u3092\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046\u3000http://gihyo.jp/dev/serial/01/machine-learning/0003?page=2\n\nP(word|cate)\u3092\u6c42\u3081\u308b\u6642\u306e\u5206\u6bcd\u306b\u306a\u308b\u30ab\u30c6\u30b4\u30ea\u306e\u5168\u5358\u8a9e\u51fa\u73fe\u56de\u6570\uff08`getAllWordNumCate($cate)`\uff09\u3092\u90fd\u5ea6\u8a08\u7b97\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u7121\u99c4\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u5206\u304b\u308a\u3084\u3059\u3055\u3092\u512a\u5148\u3057\u3066\u305d\u306e\u307e\u307e\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n```php:Classifer.php\n<?php\n\nerror_reporting(E_ALL & ~E_NOTICE);\n\n/**\n * Classifier\n *\n * @package\n * @author kure\n */\nclass Classifier {\n\n    private $cc = array();\n    private $fc = array();\n\n    private function getwords($doc) {\n        return array_unique(preg_split(\"/\\\\W/\", $doc));\n    }\n\n    /**\n     * \n     * @param type $doc\n     * @param type $cate\n     */\n    public function train($doc, $cate) {\n        $this->cc[$cate] ++;\n        $words = $this->getwords($doc);\n        foreach ($words as $v) {\n            $this->fc[$v][$cate] ++;\n        }\n    }\n\n    /**\n     * \n     * @param type $cate\n     * @return type\n     */\n    private function cateProb($cate) {\n        $total = 0;\n        foreach ($this->cc as $v) {\n            $total = $total + $v;\n        }\n        return $this->cc[$cate] / $total;\n    }\n\n    /**\n     * \n     * @param type $word\n     * @param type $cate\n     * @return type\n     */\n    private function getWordNumCate($word, $cate) {\n        foreach ($this->fc as $key => $value) {\n            if ($key === $word) {\n                return $value[$cate] + 1;\n            }\n        }\n    }\n\n    /**\n     * \n     * @param type $cateSelected\n     * @return type\n     */\n    private function getAllWordNumCate($cateSelected) {\n        $total = 0;\n        foreach ($this->fc as $key => $value) {\n            foreach ($value as $cate => $num) {\n                if ($cate === $cateSelected) {\n                    $total = $total + $num;\n                }\n            }\n        }\n        return $total;\n    }\n\n    /**\n     * P(word|cat)\n     * @param type $word\n     * @param type $cate\n     * @return type\n     */\n    private function wordCateProb($word, $cate) {\n        return $this->getWordNumCate($word, $cate) / $this->getAllWordNumCate($cate);\n    }\n\n    /**\n     * P(doc|cat) = P(word1|cat)P(word2|cat)...\n     * @param type $doc\n     * @param type $cate\n     * @return type\n     */\n    private function docCateProb($doc, $cate) {\n        $wordArr = $this->getwords($doc);\n        $wordProbArr = array();\n        $wordProbTotal = 1;\n        foreach ($wordArr as $word) {\n            $wordProbTotal = $wordProbTotal * $this->wordCateProb($word, $cate);\n        }\n        return $wordProbTotal;\n    }\n\n    /**\n     * P(cat|doc) = P(doc|cat)P(cat)\n     * @param type $doc\n     */\n    public function classify($doc) {\n        foreach ($this->cc as $cate => $num) {\n            echo $cate . \": \" . $this->cateProb($cate) * $this->docCateProb($doc, $cate) . \"\\n\";\n        }\n    }\n\n}\n\n$c = new Classifier();\n$c->train(\"I have\", \"bad\");\n$c->train(\"I donnot\", \"good\");\n$c->train(\"I know\", \"bad\");\n$c->classify(\"I\");\n```\n\n```lang:\u5b9f\u884c\u7d50\u679c\nbad: 0.5\ngood: 0.33333333333333\n```\n", "tags": ["PHP", "\u7d71\u8a08\u5b66", "\u6a5f\u68b0\u5b66\u7fd2"]}