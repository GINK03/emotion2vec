{"context": "\u3053\u3093\u306b\u3061\u306f\u3002\nArangoDB \u3092\u521d\u3081\u3066\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002MongoDB \u306b\u5c11\u3057\u4f3c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002 Key Features \u3092\u62fe\u3044\u8aad\u307f\u3059\u308b\u3068\n\nMulti-Model: Documents, graphs and key-value pairs\nJoins\nTransactions (ACID)\n\u3053\u308c\u3089\u3092 AQL query \u3067\u66f8\u3051\u308b\n\u4ed6\u306b\u3001Foxx (JavaScript framework) ...\n\n\u81ea\u5206\u3067\u3082\u3001Geo Indexes 1 \u3092\u8a66\u3057\u305f\u308a\u3001Go \u3067\u66f8\u3044\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u52d5\u304b\u3057\u3066\u307f\u307e\u3057\u305f\uff08aranGO \u3092\u5229\u7528\uff09\u3002\u6700\u521d\u306f arangosh \u3067\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u3001\n$ arangosh\n :\n :\n\narangosh [_system]> db._listDatabases()\n[ \n  \"_system\" \n]\n\narangosh [_system]> db._create(\"example\");\n[ArangoCollection 33715651, \"example\" (type document, status loaded)]\n\narangosh [_system]> db._collections()\n :\n :\n\narangosh [_system]> db.example.toArray();\n[ ]\n\narangosh [_system]> db.example.save({\"Hello\": \"World\"});\n{ \n  \"_id\" : \"example/35747267\", \n  \"_rev\" : \"35747267\", \n  \"_key\" : \"35747267\" \n}\n\narangosh [_system]> db.example.save({\"name\": \"John Doe\", \"age\": 29, \"coordinates\": [0, 0]});\n :\n :\n\narangosh [_system]> db.example.save({\"name\": \"Jane Smith\", \"age\": 31, \"coordinates\": [0.0001, 0]});\n :\n :\n\narangosh [_system]> db.example.ensureIndex({type: \"geo\", fields: [\"coordinates\"], geoJson: true})\n{ \n  \"id\" : \"example/37582275\", \n  \"type\" : \"geo1\", \n  \"fields\" : [ \n    \"coordinates\" \n  ], \n  \"geoJson\" : true, \n  \"constraint\" : false, \n  \"unique\" : false, \n  \"ignoreNull\" : true, \n  \"sparse\" : true, \n  \"isNewlyCreated\" : true, \n  \"code\" : 201 \n}\n\narangosh [_system]> db.example.getIndexes()\n :\n :\n\nGo \u3067\u66f8\u3044\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8d70\u3089\u305b\u308b\u3068\uff08aranGO \u3092\u5229\u7528\uff09\u3001\n$ go run arango.go \n[ 0 map[age:29 name:John Doe coordinates:[0 0] distance:5.559746332227936 _id:example/36730307 _key:36730307 _rev:36730307] ]\n{{example/36730307 36730307 36730307 false } John Doe 29 [] [0 0]}\n[ 1 map[_key:36926915 _rev:36926915 age:31 name:Jane Smith coordinates:[0.0001 0] distance:5.559746332227937 _id:example/36926915] ]\n{{example/36926915 36926915 36926915 false } Jane Smith 31 [] [0.0001 0]}\n\n[ 0 map[_key:36926915 age:31 name:Jane Smith coordinates:[0.0001 0] _id:example/36926915 _rev:36926915] ]\n{{example/36926915 36926915 36926915 false } Jane Smith 31 [] [0.0001 0]}\n[ 1 map[_id:example/35747267 _rev:35747267 _key:35747267 Hello:World] ]\n{{example/35747267 35747267 35747267 false }  0 [] []}\n[ 2 map[_id:example/36730307 _rev:36730307 _key:36730307 age:29 name:John Doe coordinates:[0 0]] ]\n{{example/36730307 36730307 36730307 false } John Doe 29 [] [0 0]}\n[ 3 map[age:0 name:Tony coordinates:[0.002 0] _id:example/4735230735 _key:4735230735 _rev:4735230735] ]\n{{example/4735230735 4735230735 4735230735 false } Tony 0 [] [0.002 0]}\n$ \n\n\narango.go\npackage main\n\nimport (\n    \"fmt\"\n    \"encoding/json\"\n    \"github.com/diegogub/aranGO\"\n)\n\ntype DocTest struct {\n    aranGO.Document\n    Name        string     `json:\"name\"`\n    Age         int        `json:\"age\"`\n    Likes       []string   `json:\"likes,omitempty\"`\n    Coordinates []float64  `json:\"coordinates\"`  // [lon, lat]\n}\n\nfunc main() {\n    sess, err := aranGO.Connect(\"http://localhost:8529\", \"root\", \"\", false) \n    if err != nil{\n        panic(err)\n    }\n    db := sess.DB(\"_system\")\n\n    col := \"example\"\n    if !db.ColExist(col){\n        panic(\"collection not found: \" + col)\n    }\n\n    circle := map[string]float64{\"lon\": 0.00005, \"lat\": 0, \"radius\": 100}\n    q := fmt.Sprintf(\"FOR d in WITHIN(%s, %f, %f, %f, \\\"distance\\\") FILTER d.age > 0 RETURN d\", col, circle[\"lat\"], circle[\"lon\"], circle[\"radius\"])\n    cur, _ := db.Execute(aranGO.NewQuery(q))\n    fetchAll(cur)\n\n    var x DocTest\n    x.Key = \"4735230735\" // \u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u306f\u3001DB \u304c\u81ea\u52d5\u7684\u306b\u5024\u3092\u6c7a\u3081\u3066\u4ed8\u4e0e\u3059\u308b\n    x.Name = \"Tony\"\n    x.Coordinates = []float64{0.002, 0}\n    err = db.Col(col).Save(&x)\n    fmt.Println(\"\")\n    cur, _ = db.Col(col).All(0,100)\n    fetchAll(cur)\n}\n\nfunc fetchAll(cur *aranGO.Cursor) {\n    for cur.Index < len(cur.Result) {\n        var doc DocTest\n        r := cur.Result[cur.Index]\n        fmt.Println(\"[\", cur.Index, r, \"]\")\n        b, err := json.Marshal(r)\n        err = json.Unmarshal(b, &doc)\n        if err != nil {\n            fmt.Println(err)\n        } else {\n            fmt.Println(doc)\n        }\n        cur.Index++\n    }\n}\n\n\narangosh \u306e\u8d77\u52d5\u753b\u9762\u306f\u3001\n$ /usr/local/sbin/arangod &\n :\n :\n\n$ arangosh\n\n                                       _     \n  __ _ _ __ __ _ _ __   __ _  ___  ___| |__  \n / _` | '__/ _` | '_ \\ / _` |/ _ \\/ __| '_ \\ \n| (_| | | | (_| | | | | (_| | (_) \\__ \\ | | |\n \\__,_|_|  \\__,_|_| |_|\\__, |\\___/|___/_| |_|\n                       |___/                 \n\nWelcome to arangosh 2.6.0 [darwin]. Copyright (c) ArangoDB GmbH\nUsing Google V8 3.31.74.1 JavaScript engine, READLINE 0x0402.hex, ICU 54.1\n\nPretty printing values.\nConnected to ArangoDB 'tcp://127.0.0.1:8529' version: 2.6.0 [standalone], database: '_system', username: 'root'\n\nType 'tutorial' for a tutorial or 'help' to see common examples\narangosh [_system]>\n\n\n\n\n\nArangoDB \u306e\u5730\u7406\u5ea7\u6a19\u7cfb\u306f\u5de6\u624b\u7cfb\u3067\u3059\u3002\u4e00\u90e8\u306b\u9650\u3063\u3066geojson=true\u3068\u8a2d\u5b9a\u3059\u308b\u3068\u53f3\u624b\u7cfb\u3078\u5207\u308a\u66ff\u3048\u3089\u308c\u307e\u3059\u3002\u00a0\u21a9\n\n\n\n\u3053\u3093\u306b\u3061\u306f\u3002\n[ArangoDB](https://www.arangodb.com/key-features/) \u3092\u521d\u3081\u3066\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002MongoDB \u306b\u5c11\u3057\u4f3c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002 [Key Features](https://github.com/arangodb/arangodb/blob/devel/README.md) \u3092\u62fe\u3044\u8aad\u307f\u3059\u308b\u3068\n\n* Multi-Model: Documents, graphs and key-value pairs\n* Joins\n* Transactions (ACID)\n* \u3053\u308c\u3089\u3092 AQL query \u3067\u66f8\u3051\u308b\n* \u4ed6\u306b\u3001Foxx (JavaScript framework) ...\n\n\u81ea\u5206\u3067\u3082\u3001[Geo Indexes](https://docs.arangodb.com/IndexHandling/Geo.html) [^1] \u3092\u8a66\u3057\u305f\u308a\u3001Go \u3067\u66f8\u3044\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u52d5\u304b\u3057\u3066\u307f\u307e\u3057\u305f\uff08[aranGO] (https://github.com/diegogub/aranGO) \u3092\u5229\u7528\uff09\u3002\u6700\u521d\u306f arangosh \u3067\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u3001\n\n```\n$ arangosh\n :\n :\n\narangosh [_system]> db._listDatabases()\n[ \n  \"_system\" \n]\n\narangosh [_system]> db._create(\"example\");\n[ArangoCollection 33715651, \"example\" (type document, status loaded)]\n\narangosh [_system]> db._collections()\n :\n :\n\narangosh [_system]> db.example.toArray();\n[ ]\n\narangosh [_system]> db.example.save({\"Hello\": \"World\"});\n{ \n  \"_id\" : \"example/35747267\", \n  \"_rev\" : \"35747267\", \n  \"_key\" : \"35747267\" \n}\n\narangosh [_system]> db.example.save({\"name\": \"John Doe\", \"age\": 29, \"coordinates\": [0, 0]});\n :\n :\n\narangosh [_system]> db.example.save({\"name\": \"Jane Smith\", \"age\": 31, \"coordinates\": [0.0001, 0]});\n :\n :\n\narangosh [_system]> db.example.ensureIndex({type: \"geo\", fields: [\"coordinates\"], geoJson: true})\n{ \n  \"id\" : \"example/37582275\", \n  \"type\" : \"geo1\", \n  \"fields\" : [ \n    \"coordinates\" \n  ], \n  \"geoJson\" : true, \n  \"constraint\" : false, \n  \"unique\" : false, \n  \"ignoreNull\" : true, \n  \"sparse\" : true, \n  \"isNewlyCreated\" : true, \n  \"code\" : 201 \n}\n\narangosh [_system]> db.example.getIndexes()\n :\n :\n```\n\nGo \u3067\u66f8\u3044\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8d70\u3089\u305b\u308b\u3068\uff08[aranGO] (https://github.com/diegogub/aranGO) \u3092\u5229\u7528\uff09\u3001\n\n```\n$ go run arango.go \n[ 0 map[age:29 name:John Doe coordinates:[0 0] distance:5.559746332227936 _id:example/36730307 _key:36730307 _rev:36730307] ]\n{{example/36730307 36730307 36730307 false } John Doe 29 [] [0 0]}\n[ 1 map[_key:36926915 _rev:36926915 age:31 name:Jane Smith coordinates:[0.0001 0] distance:5.559746332227937 _id:example/36926915] ]\n{{example/36926915 36926915 36926915 false } Jane Smith 31 [] [0.0001 0]}\n\n[ 0 map[_key:36926915 age:31 name:Jane Smith coordinates:[0.0001 0] _id:example/36926915 _rev:36926915] ]\n{{example/36926915 36926915 36926915 false } Jane Smith 31 [] [0.0001 0]}\n[ 1 map[_id:example/35747267 _rev:35747267 _key:35747267 Hello:World] ]\n{{example/35747267 35747267 35747267 false }  0 [] []}\n[ 2 map[_id:example/36730307 _rev:36730307 _key:36730307 age:29 name:John Doe coordinates:[0 0]] ]\n{{example/36730307 36730307 36730307 false } John Doe 29 [] [0 0]}\n[ 3 map[age:0 name:Tony coordinates:[0.002 0] _id:example/4735230735 _key:4735230735 _rev:4735230735] ]\n{{example/4735230735 4735230735 4735230735 false } Tony 0 [] [0.002 0]}\n$ \n```\n\n```arango.go\npackage main\n\nimport (\n    \"fmt\"\n    \"encoding/json\"\n    \"github.com/diegogub/aranGO\"\n)\n\ntype DocTest struct {\n    aranGO.Document\n    Name        string     `json:\"name\"`\n    Age         int        `json:\"age\"`\n    Likes       []string   `json:\"likes,omitempty\"`\n    Coordinates []float64  `json:\"coordinates\"`  // [lon, lat]\n}\n\nfunc main() {\n    sess, err := aranGO.Connect(\"http://localhost:8529\", \"root\", \"\", false) \n    if err != nil{\n        panic(err)\n    }\n    db := sess.DB(\"_system\")\n\n    col := \"example\"\n    if !db.ColExist(col){\n        panic(\"collection not found: \" + col)\n    }\n\t\n\tcircle := map[string]float64{\"lon\": 0.00005, \"lat\": 0, \"radius\": 100}\n    q := fmt.Sprintf(\"FOR d in WITHIN(%s, %f, %f, %f, \\\"distance\\\") FILTER d.age > 0 RETURN d\", col, circle[\"lat\"], circle[\"lon\"], circle[\"radius\"])\n\tcur, _ := db.Execute(aranGO.NewQuery(q))\n    fetchAll(cur)\n\n\tvar x DocTest\n\tx.Key = \"4735230735\" // \u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u306f\u3001DB \u304c\u81ea\u52d5\u7684\u306b\u5024\u3092\u6c7a\u3081\u3066\u4ed8\u4e0e\u3059\u308b\n\tx.Name = \"Tony\"\n\tx.Coordinates = []float64{0.002, 0}\n\terr = db.Col(col).Save(&x)\n\tfmt.Println(\"\")\n\tcur, _ = db.Col(col).All(0,100)\n\tfetchAll(cur)\n}\n\nfunc fetchAll(cur *aranGO.Cursor) {\n    for cur.Index < len(cur.Result) {\n\t\tvar doc DocTest\n\t\tr := cur.Result[cur.Index]\n\t\tfmt.Println(\"[\", cur.Index, r, \"]\")\n\t\tb, err := json.Marshal(r)\n\t\terr = json.Unmarshal(b, &doc)\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t} else {\n\t\t\tfmt.Println(doc)\n\t\t}\n\t\tcur.Index++\n    }\n}\n```\n\narangosh \u306e\u8d77\u52d5\u753b\u9762\u306f\u3001\n\n```\n$ /usr/local/sbin/arangod &\n :\n :\n\n$ arangosh\n\n                                       _     \n  __ _ _ __ __ _ _ __   __ _  ___  ___| |__  \n / _` | '__/ _` | '_ \\ / _` |/ _ \\/ __| '_ \\ \n| (_| | | | (_| | | | | (_| | (_) \\__ \\ | | |\n \\__,_|_|  \\__,_|_| |_|\\__, |\\___/|___/_| |_|\n                       |___/                 \n\nWelcome to arangosh 2.6.0 [darwin]. Copyright (c) ArangoDB GmbH\nUsing Google V8 3.31.74.1 JavaScript engine, READLINE 0x0402.hex, ICU 54.1\n\nPretty printing values.\nConnected to ArangoDB 'tcp://127.0.0.1:8529' version: 2.6.0 [standalone], database: '_system', username: 'root'\n\nType 'tutorial' for a tutorial or 'help' to see common examples\narangosh [_system]>\n```\n\n[^1]: ArangoDB \u306e\u5730\u7406\u5ea7\u6a19\u7cfb\u306f\u5de6\u624b\u7cfb\u3067\u3059\u3002\u4e00\u90e8\u306b\u9650\u3063\u3066```geojson=true```\u3068\u8a2d\u5b9a\u3059\u308b\u3068\u53f3\u624b\u7cfb\u3078\u5207\u308a\u66ff\u3048\u3089\u308c\u307e\u3059\u3002\n", "tags": ["ArangoDB", "golang", "Go", "GIS"]}