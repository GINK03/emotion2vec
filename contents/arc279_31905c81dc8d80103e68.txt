{"context": "\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\nhttp://qiita.com/hiroshi3110/items/af7b6c4f7824539d7a53\n\nWEBrick \u3067\u3084\u3063\u3066\u307f\u308b\n\nwebrick_https_reverse_proxy.ru\nrequire 'rack/reverse_proxy'\n\n# monkey patching\nmodule AddXForwardedProtoHeader\n    def set_forwarded_headers\n        super\n        return unless options[:x_forwarded_headers]\n        target_request_headers[\"X-Forwarded-Proto\"] = source_request.scheme\n    end\nend\nRackReverseProxy::RoundTrip.prepend AddXForwardedProtoHeader\n\nrequire 'rack/builder'\napp = Rack::Builder.new {\n    target = ENV[\"TO\"] || \"http://localhost:9292\"\n    use Rack::ReverseProxy do\n        reverse_proxy '/', target\n    end\n\n    run Proc.new {}\n}\n\nrequire 'webrick'\n# \u3053\u308c\u304c\u7121\u3044\u3068 curl: (35) Unknown SSL protocol error in connection to \u3068\u304b\u306b\u306a\u308b\nrequire 'webrick/https'\n\n# \u305d\u306e\u5834\u3067\u30aa\u30ec\u30aa\u30ec\u8a3c\u660e\u66f8\u3092\u4f5c\u6210\n# :SSLVerifyClient => OpenSSL::SSL::VERIFY_NONE \u3092\u6307\u5b9a\u3057\u3066\u308b\u306e\u3067\u8981\u3089\u306a\u3044\u3051\u3069\u3002\ncn = [[ \"CN\", WEBrick::Utils::getservername]]\ncomment = \"Generated by Ruby/OpenSSL\"\ncert, rsa = WEBrick::Utils::create_self_signed_cert(2048, cn, comment)\n\nrequire 'rack/handler/webrick'\nRack::Handler::WEBrick.run app, {\n    :Port => 443,\n    :BindAddress => \"0.0.0.0\",\n    :SSLEnable => true,\n    :SSLVerifyClient => OpenSSL::SSL::VERIFY_NONE,\n    :SSLPrivateKey => OpenSSL::PKey::RSA.new(rsa.to_s),\n    :SSLCertificate => OpenSSL::X509::Certificate.new(cert.to_s),\n    :SSLCertName => cn\n}\n\n\n\u601d\u3063\u305f\u307b\u3069\u30b5\u30af\u3063\u3068\u3057\u3066\u306a\u304b\u3063\u305f\u3002\n\n\u8d77\u52d5\nsudo rackup webrick_https_reverse_proxy.ru\n\n\n\n\u4f59\u8ac7\nrack/reverse_proxy \u306e gem \u304c X-Forwarded-Proto \u306e\u30d8\u30c3\u30c0\u4ed8\u3051\u3066\u304f\u308c\u306a\u3044\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u30e2\u30f3\u30ad\u30fc\u30d1\u30c3\u30c1\u3067\u5bfe\u5fdc\u3002\n\u8ffd\u52a0\u3057\u3066\u30d7\u30eb\u30ea\u30af\u9001\u3063\u3068\u3044\u305f\u3002\n\n\u8ffd\u8a18\n\u6bce\u56de\u8a3c\u660e\u66f8\u4f5c\u308a\u306a\u304a\u3059\u3068\u8d77\u52d5\u3059\u308b\u305f\u3073\u306b\u30d6\u30e9\u30a6\u30b6\u306b\u6ce8\u610f\u3055\u308c\u308b\u306e\u3067\u3001\n\u4e00\u5ea6\u30aa\u30ec\u30aa\u30ec\u8a3c\u660e\u66f8\u4f5c\u3063\u3066\u305d\u308c\u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u826f\u3055\u3052\u306a\u611f\u3058\u3002\n\u53c2\u8003\uff1ahttp://d.hatena.ne.jp/ozuma/20130511/1368284304\n\nsnip\n    webrick_opt = {\n        :Port => 443,\n        :BindAddress => \"0.0.0.0\",\n        :SSLEnable => true,\n        :SSLVerifyClient => OpenSSL::SSL::VERIFY_NONE,\n        :SSLPrivateKey => OpenSSL::PKey::RSA.new(File.open(File.dirname(__FILE__) + \"/server.key\")),\n        :SSLCertificate => OpenSSL::X509::Certificate.new(File.open(File.dirname(__FILE__) + \"/server.crt\")),\n    }\n\n\n\n\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\nhttp://qiita.com/hiroshi3110/items/af7b6c4f7824539d7a53\n\n# WEBrick \u3067\u3084\u3063\u3066\u307f\u308b\n\n```rb:webrick_https_reverse_proxy.ru\nrequire 'rack/reverse_proxy'\n\n# monkey patching\nmodule AddXForwardedProtoHeader\n    def set_forwarded_headers\n        super\n        return unless options[:x_forwarded_headers]\n        target_request_headers[\"X-Forwarded-Proto\"] = source_request.scheme\n    end\nend\nRackReverseProxy::RoundTrip.prepend AddXForwardedProtoHeader\n\nrequire 'rack/builder'\napp = Rack::Builder.new {\n    target = ENV[\"TO\"] || \"http://localhost:9292\"\n    use Rack::ReverseProxy do\n        reverse_proxy '/', target\n    end\n\n    run Proc.new {}\n}\n\nrequire 'webrick'\n# \u3053\u308c\u304c\u7121\u3044\u3068 curl: (35) Unknown SSL protocol error in connection to \u3068\u304b\u306b\u306a\u308b\nrequire 'webrick/https'\n\n# \u305d\u306e\u5834\u3067\u30aa\u30ec\u30aa\u30ec\u8a3c\u660e\u66f8\u3092\u4f5c\u6210\n# :SSLVerifyClient => OpenSSL::SSL::VERIFY_NONE \u3092\u6307\u5b9a\u3057\u3066\u308b\u306e\u3067\u8981\u3089\u306a\u3044\u3051\u3069\u3002\ncn = [[ \"CN\", WEBrick::Utils::getservername]]\ncomment = \"Generated by Ruby/OpenSSL\"\ncert, rsa = WEBrick::Utils::create_self_signed_cert(2048, cn, comment)\n\nrequire 'rack/handler/webrick'\nRack::Handler::WEBrick.run app, {\n    :Port => 443,\n    :BindAddress => \"0.0.0.0\",\n    :SSLEnable => true,\n    :SSLVerifyClient => OpenSSL::SSL::VERIFY_NONE,\n    :SSLPrivateKey => OpenSSL::PKey::RSA.new(rsa.to_s),\n    :SSLCertificate => OpenSSL::X509::Certificate.new(cert.to_s),\n    :SSLCertName => cn\n}\n```\n\n\u601d\u3063\u305f\u307b\u3069\u30b5\u30af\u3063\u3068\u3057\u3066\u306a\u304b\u3063\u305f\u3002\n\n```text:\u8d77\u52d5\nsudo rackup webrick_https_reverse_proxy.ru\n```\n\n## \u4f59\u8ac7\n\n`rack/reverse_proxy` \u306e gem \u304c `X-Forwarded-Proto` \u306e\u30d8\u30c3\u30c0\u4ed8\u3051\u3066\u304f\u308c\u306a\u3044\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u30e2\u30f3\u30ad\u30fc\u30d1\u30c3\u30c1\u3067\u5bfe\u5fdc\u3002\n\u8ffd\u52a0\u3057\u3066\u30d7\u30eb\u30ea\u30af\u9001\u3063\u3068\u3044\u305f\u3002\n\n## \u8ffd\u8a18\n\n\u6bce\u56de\u8a3c\u660e\u66f8\u4f5c\u308a\u306a\u304a\u3059\u3068\u8d77\u52d5\u3059\u308b\u305f\u3073\u306b\u30d6\u30e9\u30a6\u30b6\u306b\u6ce8\u610f\u3055\u308c\u308b\u306e\u3067\u3001\n\u4e00\u5ea6\u30aa\u30ec\u30aa\u30ec\u8a3c\u660e\u66f8\u4f5c\u3063\u3066\u305d\u308c\u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u826f\u3055\u3052\u306a\u611f\u3058\u3002\n\n\u53c2\u8003\uff1ahttp://d.hatena.ne.jp/ozuma/20130511/1368284304\n\n```rb:snip\n    webrick_opt = {\n        :Port => 443,\n        :BindAddress => \"0.0.0.0\",\n        :SSLEnable => true,\n        :SSLVerifyClient => OpenSSL::SSL::VERIFY_NONE,\n        :SSLPrivateKey => OpenSSL::PKey::RSA.new(File.open(File.dirname(__FILE__) + \"/server.key\")),\n        :SSLCertificate => OpenSSL::X509::Certificate.new(File.open(File.dirname(__FILE__) + \"/server.crt\")),\n    }\n```\n", "tags": ["rack", "WEBRick"]}