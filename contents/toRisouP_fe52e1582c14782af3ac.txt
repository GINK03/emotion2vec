{"context": " More than 1 year has passed since last update.UniRx\u306b\u3064\u3044\u3066\u306e\u8a18\u4e8b\u306e\u307e\u3068\u3081\u306f\u3053\u3061\u3089\n\nUniRx\u6700\u65b0\u7248\u306bThrottleFirst\u304c\u7d44\u307f\u8fbc\u307e\u308c\u307e\u3057\u305f\uff01\n\u30b2\u30fc\u30e0\u958b\u767a\u306b\u304a\u3044\u3066\u300c\u3042\u308b\u51e6\u7406\u3092\u884c\u3063\u3066\u304b\u3089\u3057\u3070\u3089\u304f\u306e\u9593\u306f\u30a4\u30d9\u30f3\u30c8\u3092\u7121\u8996\u3057\u305f\u3044\u300d\u300c\u30a4\u30d9\u30f3\u30c8\u304c\u305f\u304f\u3055\u3093\u304d\u305f\u6642\u306b\u6700\u521d\u3060\u3051\u51e6\u7406\u3057\u3066\u6b8b\u308a\u306f\u3057\u3070\u3089\u304f\u306e\u9593\u7121\u8996\u3057\u305f\u3044\u300d\u3068\u3044\u3063\u305f\u9700\u8981\u306f\u591a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n(\u4f8b\u3048\u3070\u300c\u30dc\u30bf\u30f3\u306e\u9577\u62bc\u3057\u30a4\u30d9\u30f3\u30c8\u3092300\u30df\u30ea\u79d2\u9593\u9694\u306b\u9593\u5f15\u304d\u305f\u3044\u300d\u300c\u6700\u5f8c\u306b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u30a4\u30d9\u30f3\u30c8\u304c\u6765\u3066\u304b\u30893\u79d2\u9593\u306f\u30a4\u30d9\u30f3\u30c8\u3092\u7121\u8996\u3057\u305f\u3044\u300d\u7b49)\n\u65e2\u5b58\u306eRx\u306e\u30aa\u30da\u30ec\u30fc\u30bf\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u3082\u3067\u304d\u306a\u304f\u306f\u306a\u3044\u3067\u3059\u304c\u3001\u983b\u51fa\u3059\u308b\u4f7f\u7528\u6cd5\u306a\u3060\u3051\u306b\u5c02\u7528\u306e\u30aa\u30da\u30ec\u30fc\u30bf\u304c\u6b32\u3057\u304f\u306a\u308a\u307e\u3059\u3002\n\u306a\u306e\u3067Throttle\u3092\u5143\u306b\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nRxJS\u306a\u3069\u306b\u306f\u300cThrottleFirst\u300d\u3068\u3044\u3046\u540d\u524d\u3067\u540c\u3058\u6319\u52d5\u306e\u30aa\u30da\u30ec\u30fc\u30bf\u304c\u5b58\u5728\u3057\u3066\u3044\u307e\u3057\u305f\u3002Rx.NET\u306b\u306f\u5b58\u5728\u3057\u306a\u3044\u30aa\u30da\u30ec\u30fc\u30bf\u3067\u3059\u3002\n\n\u753b\u50cf\u306fReactiveX\u3088\u308a\u5f15\u7528\n\nUniRx\u3067ThrottleFirst\n\nThrottleFirst.cs\nusing System;\nnamespace UniRx\n{\n    public static partial class Observable\n    {\n        public static IObservable<TSource> ThrottleFirst<TSource>(this IObservable<TSource> source, TimeSpan dueTime)\n        {\n            return source.ThrottleFirst(dueTime, Scheduler.DefaultSchedulers.TimeBasedOperations);\n        }\n\n        public static IObservable<TSource> ThrottleFirst<TSource>(this IObservable<TSource> source, TimeSpan dueTime, IScheduler scheduler)\n        {\n            return new AnonymousObservable<TSource>(observer =>\n            {\n                var gate = new object();\n                var open = true;\n                var cancelable = new SerialDisposable();\n\n                var subscription = source.Subscribe(x =>\n                {\n                    lock (gate)\n                    {\n                        if (!open) return;\n                        observer.OnNext(x);\n                        open = false;\n                    }\n\n                    var d = new SingleAssignmentDisposable();\n                    cancelable.Disposable = d;\n                    d.Disposable = scheduler.Schedule(dueTime, () =>\n                    {\n                        lock (gate)\n                        {\n                            open = true;\n                        }\n                    });\n\n                },\n                    exception =>\n                    {\n                        cancelable.Dispose();\n\n                        lock (gate)\n                        {\n                            observer.OnError(exception);\n                        }\n                    },\n                    () =>\n                    {\n                        cancelable.Dispose();\n\n                        lock (gate)\n                        {\n                            observer.OnCompleted();\n\n                        }\n                    });\n\n                return new CompositeDisposable(subscription, cancelable);\n            });\n        }\n\n        public static IObservable<TSource> ThrottleFirstFrame<TSource>(this IObservable<TSource> source, int frameCount,\n            FrameCountType frameCountType = FrameCountType.Update)\n        {\n            return new AnonymousObservable<TSource>(observer =>\n            {\n                var gate = new object();\n                var open = true;\n                var cancelable = new SerialDisposable();\n\n                var subscription = source.Subscribe(x =>\n                {\n                    lock (gate)\n                    {\n                        if (!open) return;\n                        observer.OnNext(x);\n                        open = false;\n                    }\n\n                    var d = new SingleAssignmentDisposable();\n                    cancelable.Disposable = d;\n\n                    d.Disposable = Observable.TimerFrame(frameCount, frameCountType)\n                        .Subscribe(_ =>\n                        {\n                            lock (gate)\n                            {\n                                open = true;\n                            }\n                        });\n                },\n                    exception =>\n                    {\n                        cancelable.Dispose();\n\n                        lock (gate)\n                        {\n                            observer.OnError(exception);\n                        }\n                    },\n                    () =>\n                    {\n                        cancelable.Dispose();\n\n                        lock (gate)\n                        {\n                            observer.OnCompleted();\n\n                        }\n                    });\n\n                return new CompositeDisposable(subscription, cancelable);\n            });\n        }\n    }\n}\n\n\n\n\nThrottleFirst(OnNext\u3092\u7121\u8996\u3059\u308b\u6642\u9593)\nThrottleFirstFrame(OnNext\u3092\u7121\u8996\u3059\u308b\u30d5\u30ec\u30fc\u30e0\u6570\uff09\n\n\u3069\u3061\u3089\u3082\u6700\u521d\u306e\uff11\u56de\u76ee\u306f\u5fc5\u305aOnNext\u3092\u901a\u904e\u3055\u305b\u307e\u3059\u3002 \n2\u56de\u76ee\u4ee5\u964d\u306eOnNext\u306b\u3064\u3044\u3066\u306f\u3001\u6700\u5f8c\u306bOnNext\u3092\u901a\u904e\u3055\u305b\u3066\u304b\u3089\u4e00\u5b9a\u6642\u9593\u7d4c\u904e\u3059\u308b\u307e\u3067\u306e\u9593OnNext\u3092\u6d41\u3055\u305a\u306b\u6368\u3066\u53bb\u308a\u307e\u3059\u3002\n\u4f8b\u3048\u3070ThrottleFirst(TimeSpan.FromSeconds(1))\u3068\u3044\u3063\u305f\u6307\u5b9a\u306e\u4ed5\u65b9\u3092\u3057\u305f\u5834\u5408\u306f\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u304c1\u79d2\u4ee5\u5185\u306b\u9023\u7d9a\u3057\u3066\u304d\u305f\u5834\u5408\u306f\u6700\u521d\u3060\u3051\u901a\u3057\u3066\u305d\u308c\u4ee5\u5916\u3092\u7121\u8996\u3059\u308b\u3068\u3044\u3063\u305f\u6319\u52d5\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u4f7f\u7528\u4f8b\n\n\u30af\u30ea\u30c3\u30af\u3055\u308c\u3066\u304b\u30895\u79d2\u9593\u306f\u30af\u30ea\u30c3\u30af\u3092\u7121\u8996\u3059\u308b\nthis.UpdateAsObservable()\n    .Where(_=>Input.GetMouseButtonDown(0))\n    .ThrottleFirst(TimeSpan.FromSeconds(5))\n    .Subscribe(x => Debug.Log(\"Clicked!\"));\n\n\n\nUpdate\u30921/10\u306b\u9593\u5f15\u304f(9\u56deUpdate\u304c\u6765\u308b\u307e\u3067\u7121\u8996\u3059\u308b)\nthis.UpdateAsObservable()\n    .ThrottleFirstFrame(9)\n    .Subscribe(x => Debug.Log(\"tenth part Update\"));\n\n\n\n**UniRx\u306b\u3064\u3044\u3066\u306e\u8a18\u4e8b\u306e\u307e\u3068\u3081\u306f[\u3053\u3061\u3089](http://qiita.com/toRisouP/items/48b9fa25df64d3c6a392)**\n\n---\n\n\n**UniRx\u6700\u65b0\u7248\u306bThrottleFirst\u304c\u7d44\u307f\u8fbc\u307e\u308c\u307e\u3057\u305f\uff01**\n\n\n\n\u30b2\u30fc\u30e0\u958b\u767a\u306b\u304a\u3044\u3066\u300c\u3042\u308b\u51e6\u7406\u3092\u884c\u3063\u3066\u304b\u3089\u3057\u3070\u3089\u304f\u306e\u9593\u306f\u30a4\u30d9\u30f3\u30c8\u3092\u7121\u8996\u3057\u305f\u3044\u300d\u300c\u30a4\u30d9\u30f3\u30c8\u304c\u305f\u304f\u3055\u3093\u304d\u305f\u6642\u306b\u6700\u521d\u3060\u3051\u51e6\u7406\u3057\u3066\u6b8b\u308a\u306f\u3057\u3070\u3089\u304f\u306e\u9593\u7121\u8996\u3057\u305f\u3044\u300d\u3068\u3044\u3063\u305f\u9700\u8981\u306f\u591a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n(\u4f8b\u3048\u3070\u300c\u30dc\u30bf\u30f3\u306e\u9577\u62bc\u3057\u30a4\u30d9\u30f3\u30c8\u3092300\u30df\u30ea\u79d2\u9593\u9694\u306b\u9593\u5f15\u304d\u305f\u3044\u300d\u300c\u6700\u5f8c\u306b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u30a4\u30d9\u30f3\u30c8\u304c\u6765\u3066\u304b\u30893\u79d2\u9593\u306f\u30a4\u30d9\u30f3\u30c8\u3092\u7121\u8996\u3057\u305f\u3044\u300d\u7b49)\n\n~~\u65e2\u5b58\u306eRx\u306e\u30aa\u30da\u30ec\u30fc\u30bf\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u3082\u3067\u304d\u306a\u304f\u306f\u306a\u3044\u3067\u3059\u304c\u3001\u983b\u51fa\u3059\u308b\u4f7f\u7528\u6cd5\u306a\u3060\u3051\u306b\u5c02\u7528\u306e\u30aa\u30da\u30ec\u30fc\u30bf\u304c\u6b32\u3057\u304f\u306a\u308a\u307e\u3059\u3002\n\u306a\u306e\u3067Throttle\u3092\u5143\u306b\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u305f\u3002~~\n**RxJS\u306a\u3069\u306b\u306f\u300c[ThrottleFirst](http://reactivex.io/documentation/operators/sample.html)\u300d\u3068\u3044\u3046\u540d\u524d\u3067\u540c\u3058\u6319\u52d5\u306e\u30aa\u30da\u30ec\u30fc\u30bf\u304c\u5b58\u5728\u3057\u3066\u3044\u307e\u3057\u305f\u3002**Rx.NET\u306b\u306f\u5b58\u5728\u3057\u306a\u3044\u30aa\u30da\u30ec\u30fc\u30bf\u3067\u3059\u3002\n\n![ThrottleFirst](http://reactivex.io/documentation/operators/images/throttleFirst.png)\n\n[\u753b\u50cf\u306fReactiveX\u3088\u308a\u5f15\u7528](http://reactivex.io/)\n\n#UniRx\u3067ThrottleFirst\n\n```csharp:ThrottleFirst.cs\nusing System;\nnamespace UniRx\n{\n    public static partial class Observable\n    {\n        public static IObservable<TSource> ThrottleFirst<TSource>(this IObservable<TSource> source, TimeSpan dueTime)\n        {\n            return source.ThrottleFirst(dueTime, Scheduler.DefaultSchedulers.TimeBasedOperations);\n        }\n\n        public static IObservable<TSource> ThrottleFirst<TSource>(this IObservable<TSource> source, TimeSpan dueTime, IScheduler scheduler)\n        {\n            return new AnonymousObservable<TSource>(observer =>\n            {\n                var gate = new object();\n                var open = true;\n                var cancelable = new SerialDisposable();\n\n                var subscription = source.Subscribe(x =>\n                {\n                    lock (gate)\n                    {\n                        if (!open) return;\n                        observer.OnNext(x);\n                        open = false;\n                    }\n                    \n                    var d = new SingleAssignmentDisposable();\n                    cancelable.Disposable = d;\n                    d.Disposable = scheduler.Schedule(dueTime, () =>\n                    {\n                        lock (gate)\n                        {\n                            open = true;\n                        }\n                    });\n\n                },\n                    exception =>\n                    {\n                        cancelable.Dispose();\n\n                        lock (gate)\n                        {\n                            observer.OnError(exception);\n                        }\n                    },\n                    () =>\n                    {\n                        cancelable.Dispose();\n\n                        lock (gate)\n                        {\n                            observer.OnCompleted();\n\n                        }\n                    });\n\n                return new CompositeDisposable(subscription, cancelable);\n            });\n        }\n\n        public static IObservable<TSource> ThrottleFirstFrame<TSource>(this IObservable<TSource> source, int frameCount,\n            FrameCountType frameCountType = FrameCountType.Update)\n        {\n            return new AnonymousObservable<TSource>(observer =>\n            {\n                var gate = new object();\n                var open = true;\n                var cancelable = new SerialDisposable();\n\n                var subscription = source.Subscribe(x =>\n                {\n                    lock (gate)\n                    {\n                        if (!open) return;\n                        observer.OnNext(x);\n                        open = false;\n                    }\n\n                    var d = new SingleAssignmentDisposable();\n                    cancelable.Disposable = d;\n\n                    d.Disposable = Observable.TimerFrame(frameCount, frameCountType)\n                        .Subscribe(_ =>\n                        {\n                            lock (gate)\n                            {\n                                open = true;\n                            }\n                        });\n                },\n                    exception =>\n                    {\n                        cancelable.Dispose();\n\n                        lock (gate)\n                        {\n                            observer.OnError(exception);\n                        }\n                    },\n                    () =>\n                    {\n                        cancelable.Dispose();\n\n                        lock (gate)\n                        {\n                            observer.OnCompleted();\n\n                        }\n                    });\n\n                return new CompositeDisposable(subscription, cancelable);\n            });\n        }\n    }\n}\n\n```\n\n* ThrottleFirst(OnNext\u3092\u7121\u8996\u3059\u308b\u6642\u9593)\n* ThrottleFirstFrame(OnNext\u3092\u7121\u8996\u3059\u308b\u30d5\u30ec\u30fc\u30e0\u6570\uff09\n\n\u3069\u3061\u3089\u3082\u6700\u521d\u306e\uff11\u56de\u76ee\u306f\u5fc5\u305aOnNext\u3092\u901a\u904e\u3055\u305b\u307e\u3059\u3002 \n2\u56de\u76ee\u4ee5\u964d\u306eOnNext\u306b\u3064\u3044\u3066\u306f\u3001\u6700\u5f8c\u306bOnNext\u3092\u901a\u904e\u3055\u305b\u3066\u304b\u3089\u4e00\u5b9a\u6642\u9593\u7d4c\u904e\u3059\u308b\u307e\u3067\u306e\u9593OnNext\u3092\u6d41\u3055\u305a\u306b\u6368\u3066\u53bb\u308a\u307e\u3059\u3002\n\n\u4f8b\u3048\u3070`ThrottleFirst(TimeSpan.FromSeconds(1))`\u3068\u3044\u3063\u305f\u6307\u5b9a\u306e\u4ed5\u65b9\u3092\u3057\u305f\u5834\u5408\u306f\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u304c1\u79d2\u4ee5\u5185\u306b\u9023\u7d9a\u3057\u3066\u304d\u305f\u5834\u5408\u306f\u6700\u521d\u3060\u3051\u901a\u3057\u3066\u305d\u308c\u4ee5\u5916\u3092\u7121\u8996\u3059\u308b\u3068\u3044\u3063\u305f\u6319\u52d5\u306b\u306a\u308a\u307e\u3059\u3002\n\n#\u4f7f\u7528\u4f8b\n\n```csharp:\u30af\u30ea\u30c3\u30af\u3055\u308c\u3066\u304b\u30895\u79d2\u9593\u306f\u30af\u30ea\u30c3\u30af\u3092\u7121\u8996\u3059\u308b\nthis.UpdateAsObservable()\n    .Where(_=>Input.GetMouseButtonDown(0))\n    .ThrottleFirst(TimeSpan.FromSeconds(5))\n    .Subscribe(x => Debug.Log(\"Clicked!\"));\n```\n\n```csharp:Update\u30921/10\u306b\u9593\u5f15\u304f(9\u56deUpdate\u304c\u6765\u308b\u307e\u3067\u7121\u8996\u3059\u308b)\nthis.UpdateAsObservable()\n    .ThrottleFirstFrame(9)\n    .Subscribe(x => Debug.Log(\"tenth part Update\"));\n```\n", "tags": ["UniRx", "Unity"]}