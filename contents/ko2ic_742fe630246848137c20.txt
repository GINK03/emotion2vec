{"context": "Dropwizard\u306eSpring\u7248\u3068\u3082\u8a00\u3048\u308bSpring Boot\u3068Dropwizard\u3092\u30b3\u30fc\u30c9\u30d9\u30fc\u30b9\u3067\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3059\u3002\n\u308f\u304b\u308a\u6613\u304f\u6bd4\u8f03\u3057\u305f\u3044\u306e\u3067\u3001\u30d1\u30c3\u30b1\u30fc\u30b8\u69cb\u6210\u30fb\u547d\u540d\u306a\u3069\u306fDropwizard\u306b\u5408\u308f\u305b\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001Dropwizard\u3068\u540c\u3058\u3088\u3046\u306b\u66f8\u304d\u305f\u3044\u306e\u3067\u3001Spring Boot\u3067\u5fc5\u9808\u3067\u306f\u306a\u3044jar\u3082\u4f9d\u5b58\u3055\u305b\u3066\u3044\u307e\u3059\u3002\n\u30bd\u30fc\u30b9\u4e2d\u306e\u30b3\u30e1\u30f3\u30c8\u306bDropwizard\u306e\u5834\u5408\u3092\u66f8\u3044\u3068\u304d\u307e\u3059\u3002\n\nmaven\u8a2d\u5b9a\n\u30b3\u30fc\u30c9\u306e\u6bd4\u8f03\u306e\u8a18\u4e8b\u306b\u3057\u305f\u3044\u306e\u3067\u3001Dropwizard\u306epom.xml\u306b\u3064\u3044\u3066\u306f\u3001\u3053\u3053\u3067\u306f\u66f8\u304d\u307e\u305b\u3093\u3002\n\u6c17\u306b\u306a\u308b\u65b9\u306f\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3082\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\n\u3044\u307e\u3059\u3050\u63a1\u7528\u3059\u3079\u304dJava\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30afDropWizard(\u305d\u306e\uff11)\n\u3044\u307e\u3059\u3050\u63a1\u7528\u3059\u3079\u304dJava\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30afDropWizard(\u305d\u306e\uff12)\n\u3044\u307e\u3059\u3050\u63a1\u7528\u3059\u3079\u304dJava\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30afDropWizard(\u305d\u306e\uff13)\ndropwizard-testing\u304c\u4fbf\u5229\u3067\u3057\u305f\n\n\u4ee5\u4e0b\u306fSpring Boot\u306e\u5834\u5408\u306e\u4e00\u90e8\u3067\u3059\n\npom.xml\n  <!-- Inherit defaults from Spring Boot -->\n  <parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>1.1.2.RELEASE</version>\n  </parent>\n\n  <dependencies>\n<!-- tomcat\u304b\u3089jetty\u306b\u5909\u66f4\u3057\u305f\u3044\u5834\u5408\u306e\u8a18\u8ff0\u3002liquibase\u3092\u4f9d\u5b58\u3055\u305b\u305f\u3089tomcat\u3067\u52d5\u4f5c\u3057\u306a\u304b\u3063\u305f\u305f\u3081 -->\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-web</artifactId>\n      <version>${boot.version}</version>\n      <exclusions>\n        <exclusion>\n          <groupId>org.springframework.boot</groupId>\n          <artifactId>spring-boot-starter-tomcat</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-jetty</artifactId>\n      <version>${boot.version}</version>\n    </dependency>\n\n<!-- \u30e1\u30c8\u30ea\u30c3\u30af\u30b9\u3092\u5229\u7528\u3057\u305f\u3044\u5834\u5408\u3060\u3051 -->\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-actuator</artifactId>\n      <version>${boot.version}</version>\n    </dependency>\n\n<!-- DB\u3092\u5229\u7528\u3057\u305f\u3044\u5834\u5408\u3060\u3051 -->\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-data-jpa</artifactId>\n      <version>${boot.version}</version>\n    </dependency>\n\n<!-- freemarker\u3092\u5229\u7528\u3057\u305f\u3044\u5834\u5408\u3060\u3051\u3002\u3053\u308c\u3092\u4f9d\u5b58\u3055\u305b\u308b\u3068classpath:/templates/\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u306a\u3044\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3057\u305f -->\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-freemarker</artifactId>\n      <version>${boot.version}</version>\n    </dependency>\n\n<!-- \u5fc5\u9808\u3067\u306a\u3044 -->\n    <dependency>\n      <groupId>com.google.guava</groupId>\n      <artifactId>guava</artifactId>\n      <version>17.0</version>\n    </dependency>\n\n<!-- liquibase\u3092\u5229\u7528\u3057\u305f\u3044\u5834\u5408\u3060\u3051 -->\n    <dependency>\n      <groupId>org.liquibase</groupId>\n      <artifactId>liquibase-core</artifactId>\n      <version>3.2.0</version>\n    </dependency>\n\n    <dependency>\n      <groupId>com.h2database</groupId>\n      <artifactId>h2</artifactId>\n      <version>1.3.175</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-test</artifactId>\n      <version>${boot.version}</version>\n      <scope>test</scope>\n    </dependency>\n\n  </dependencies>\n\n  <build>\n    <resources>\n      <resource>\n       <directory>src/main/resources</directory>\n        <includes>\n          <include>**/*</include>\n        </includes>\n      </resource>\n    </resources>  \n    <plugins>\n      <plugin>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-maven-plugin</artifactId>\n      </plugin>\n\u30fb\u30fb\u30fb\n    </plugins>\n  </build>\n\n\n\n\nHello-World\uff08\u57fa\u672c\uff09\u306e\u6bd4\u8f03\n\u307e\u305a\u306f\u3000Rest\u306aHello-World\u3067\u6bd4\u8f03\u3057\u307e\u3059\u3002\n\u30bd\u30fc\u30b9\u4e2d\u306e\u30b3\u30e1\u30f3\u30c8\u90e8\u5206\u304cDropwizard\u306b\u306a\u308a\u307e\u3059\u3002\n\nApplication\u30af\u30e9\u30b9\nDropwizard\u306f\u3001\u3053\u306e\u30af\u30e9\u30b9\u304c\u8272\u3005\u306a\u6a5f\u80fd\u3092\u8ffd\u52a0\u3059\u308b\u5f79\u5272\u3092\u6301\u3064\u306e\u3067\u3001\u8a18\u8ff0\u91cf\u304c\u591a\u304f\u306a\u308a\u307e\u3059\u3002\nSpring Boot\u3067\u306f\u3001SpringApplication\u30af\u30e9\u30b9\u3084DI\u3067\u3053\u306e\u3042\u305f\u308a\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\nHelloWorldApplication.java\n@Configuration\n@EnableAutoConfiguration\n@ComponentScan\n@EnableConfigurationProperties\npublic class HelloWorldApplication {\n//public class HelloWorldApplication extends Application<HelloWorldConfiguration> {\n\n    public static void main(String[] args) throws Exception {\n        SpringApplication.run(HelloWorldApplication.class, args);\n        //new HelloWorldApplication().run(args);\n    }\n\n//  @Override\n//  public String getName() {\n//      return \"hello-world\";\n//  }\n//\n//  @Override\n//  public void initialize(Bootstrap<HelloWorldConfiguration> bootstrap) {\n//  }\n//\n//  @Override\n//  public void run(HelloWorldConfiguration configuration,\n//          Environment environment) throws ClassNotFoundException {\n//      final Template template = configuration.buildTemplate();\n//      environment.jersey().register(new HelloWorldResource(template));\n    }\n\n\n\nConfiguration\u30af\u30e9\u30b9\nprefix = \"hello-world\"\u306f\u3001example.yml\u306b\u8a18\u8ff0\u3057\u3066\u3044\u308b\u30ad\u30fc\u3067\u3059\u3002\nSpring Boot\u3067\u306f\u3053\u306eprefix\u3092yml\u306b\u8ffd\u52a0\u3057\u306a\u3044\u3068\u8d77\u52d5\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002 \n\u3061\u306a\u307f\u306b\u8d77\u52d5\u306e\u3068\u304d\u306bexample.yml\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n$ java -jar target/spike-spring-boot-1.0-SNAPSHOT.jar --spring.config.location=example.yml\n\n$ java -jar target/spike-dropwizard-1.0-SNAPSHOT.jar server example.yml\n\n\nHelloWorldConfiguration.java\n@ConfigurationProperties(prefix = \"hello-world\", ignoreUnknownFields = false)\n@Component\npublic class HelloWorldConfiguration {\n//public class HelloWorldConfiguration extends Configuration {\n    @NotEmpty\n    private String template;\n\n    @NotEmpty\n    private String defaultName = \"Stranger\";\n\n//  @JsonProperty\n    public String getTemplate() {\n        return template;\n    }\n\n//  @JsonProperty\n    public void setTemplate(String template) {\n        this.template = template;\n    }\n\n//  @JsonProperty\n    public String getDefaultName() {\n        return defaultName;\n    }\n\n//  @JsonProperty\n    public void setDefaultName(String defaultName) {\n        this.defaultName = defaultName;\n    }\n\n//  public Template buildTemplate() {\n        return new Template(template, defaultName);\n    }\n}\n\n\n\nexample.yml\nhello-world:\n    template: Hello, %s!\n    defaultName: Stranger\n#template: Hello, %s!\n#defaultName: Stranger\n\n\n\nResource\u30af\u30e9\u30b9\nPOST\u3067\u306e\u30d0\u30ea\u30c7\u30fc\u30bf\u30a8\u30e9\u30fc(\u3053\u306e\u5834\u5408content\u306b\"hoge\"\u306e\u3088\u3046\u306b4\u6587\u5b57\u4ee5\u4e0a)\u306e\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u9055\u3044\u304c\u3042\u308a\u307e\u3059\u3002\nHTTP\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u306f\n\n\n422\u3000<- Dropwizard\n\n400\u3000<- Spring Boot\n\nbody\u306f\n\n\n{\"errors\":[\"content length must be between 0 and 3 (was hoge)\"]}\u3000<- Dropwizard\n\n{\"timestamp\":1403789235278,\"status\":400,\"error\":\"Bad Request\",\"exception\":\"org.springframework.web.bind.MethodArgumentNotValidException\",\"message\":\"Validation failed for argument at index 0 in method: public void com.github.ko2ic.resources.HelloWorldResource.receiveHello(com.github.ko2ic.core.Saying), with 1 error(s): [Field error in object 'saying' on field 'content': rejected value [hoge]; codes [Length.saying.content,Length.content,Length.java.lang.String,Length]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [saying.content,content]; arguments []; default message [content],3,0]; default message [length must be between 0 and 3]] \",\"path\":\"/hello-world\"}\u3000<- Spring Boot\n\n\nHelloWorldResource.java\n//@Path(\"/hello-world\")\n//@Produces(MediaType.APPLICATION_JSON)\n@RestController\n@RequestMapping(value = \"/hello-world\")\npublic class HelloWorldResource {\n    private static final Logger LOGGER = LoggerFactory\n            .getLogger(HelloWorldResource.class);\n\n//  private final Template template;\n//  private final AtomicLong counter;\n//\n//  public HelloWorldResource(Template template) {\n//      this.template = template;\n//      this.counter = new AtomicLong();\n//  }\n\n    @Autowired\n    private HelloWorldConfiguration configuration;\n    private final AtomicLong counter = new AtomicLong();\n\n//  @GET\n//  @Timed(name = \"get-requests\")\n//  @CacheControl(maxAge = 1, maxAgeUnit = TimeUnit.DAYS)\n//  public Saying sayHello(@QueryParam(\"name\") Optional<String> name) {\n//      return new Saying(counter.incrementAndGet(), template.render(name));\n//  }\n    @RequestMapping(method = RequestMethod.GET)\n    public Saying sayHello(\n            @RequestParam(value = \"name\", required = false) String name,\n            HttpServletResponse response) {\n        response.setHeader(\"Cache-Control\", \"max-age=86400\");\n        Template template = configuration.buildTemplate();\n        return new Saying(counter.incrementAndGet(), template.render(Optional\n                .fromNullable(name)));\n    }\n\n//  @POST\n    @RequestMapping(method = RequestMethod.POST)\n//  public void receiveHello(@Valid Saying saying) {\n    public void receiveHello(@RequestBody @Valid Saying saying) {\n        LOGGER.info(\"Received a saying: {}\", saying);\n    }\n}\n\n\n\u30e2\u30c7\u30eb\u30af\u30e9\u30b9\nSpring Boot\u3067\u306f@JsonProperty\u306f\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\u3002\n\nSaying.java\npublic class Saying {\n    private long id;\n\n    @Length(max = 3)\n    private String content;\n\n    public Saying() {\n    }\n\n    public Saying(long id, String content) {\n        this.id = id;\n        this.content = content;\n    }\n\n//  @JsonProperty\n    public long getId() {\n        return id;\n    }\n\n//  @JsonProperty\n    public String getContent() {\n        return content;\n    }\n\n    @Override\n    public String toString() {\n        return String.format(\"id=%d content=%s\", getId(), getContent());\n    }\n\n\n\nTemplate.java\npublic class Template {\n    private final String content;\n    private final String defaultName;\n\n    public Template(String content, String defaultName) {\n        this.content = content;\n        this.defaultName = defaultName;\n    }\n\n    public String render(Optional<String> name) {\n        return format(content, name.or(defaultName));\n    }\n}\n\n\n\nDB\u30a2\u30af\u30bb\u30b9\u306e\u6bd4\u8f03(Hibernate)\n\nApplication\u30af\u30e9\u30b9\nDropwizard\u306e\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8a2d\u5b9a\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u3001Spring Boot\u306f\u7279\u306b\u4f55\u3082\u8ffd\u8a18\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\nHelloWorldApplication.java\n//  // hibernate\u3092\u4f7f\u3046\u305f\u3081\n//  private final HibernateBundle<HelloWorldConfiguration> hibernateBundle = new HibernateBundle<HelloWorldConfiguration>(\n//          Person.class) {\n//      @Override\n//      public DataSourceFactory getDataSourceFactory(\n//              HelloWorldConfiguration configuration) {\n//          return configuration.getDataSourceFactory();\n//      }\n//  };\n//\n//  @Override\n//  public void initialize(Bootstrap<HelloWorldConfiguration> bootstrap) {\n//      // liquibase\u3092\u4f7f\u3046\u305f\u3081\n//      bootstrap.addBundle(new MigrationsBundle<HelloWorldConfiguration>() {\n//          @Override\n//          public DataSourceFactory getDataSourceFactory(\n//                  HelloWorldConfiguration configuration) {\n//              return configuration.getDataSourceFactory();\n//          }\n//      });\n//      bootstrap.addBundle(hibernateBundle);\n//  }\n//  @Override\n//  public void run(HelloWorldConfiguration configuration,\n//          Environment environment) throws ClassNotFoundException {\n//      final PersonRepository repository = new PersonRepository(\n//              hibernateBundle.getSessionFactory());\n//      environment.jersey().register(new PeopleResource(repository));\n\n\n\n\nConfiguration\u30af\u30e9\u30b9\nDropwizard\u306e\u5834\u5408\u306fDataSourceFactory\u3092\u4f7f\u3044\u307e\u3059\u3002\nSpring Boot\u306e\u5834\u5408\u306fDataSourceAutoConfiguration & DataSourceProperties\u306b\u81ea\u52d5\u3067\u8a2d\u5b9a\u3055\u308c\u308b\u306e\u3067\u3001\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304f\u3060\u3051\u3067\u8a2d\u5b9a\u3055\u308c\u307e\u3059\u3002\n\uff08Application\u30af\u30e9\u30b9\u3067\u306e@EnableAutoConfiguration\u3067spring-boot-autoconfigure.jar/META-INF/spring.factories\u306b\u8a18\u8ff0\u3055\u308c\u305f\u30af\u30e9\u30b9\u304c\u81ea\u52d5\u7684\u306b\u30ed\u30fc\u30c9\u3055\u308c\u308b\u3088\u3046\u3067\u3059\u3002\uff09\n\nHelloWorldConfiguration.java\n    // @Valid\n    // @NotNull\n    // private DataSourceFactory database = new DataSourceFactory();\n    //\n    // @JsonProperty(\"database\")\n    // public DataSourceFactory getDataSourceFactory() {\n    // return database;\n    // }\n    //\n    // @JsonProperty(\"database\")\n    // public void setDataSourceFactory(DataSourceFactory dataSourceFactory) {\n    // this.database = dataSourceFactory;\n    // }\n\n\nDropwizard\u306e\u5834\u5408\u306f\u3001liquibase\u306f\u7279\u306bliqibase\u7528\u306b\u8a18\u8ff0\u3057\u307e\u305b\u3093\n\nsrc/main/resources/config/application.yml\nspring:\n    application:\n        name: Hello World!\n    datasource:\n        driverClassName: org.h2.Driver\n        url: jdbc:h2:target/example\n        user: sa\n        password: sa\n    jpa:\n        hibernate:\n            ddl-auto: false\n        database: H2\n        show-sql: true\n    freemarker:\n        cache: false\n# \u30c7\u30d5\u30a9\u30eb\u30c8\u306f\u3001classpath:/templates/\n        templateLoaderPath: classpath:/views/  \nliquibase:\n    change-log: classpath:/migrations.xml\n    drop-first: true\n    enabled: false  \n\n# dropwizard\u306e\u5834\u5408\u306f\u3001hello-world\u3067\u5229\u7528\u3057\u305fexample.yml\u306b\u8ffd\u8a18\n\n#database:\n#  driverClass: org.h2.Driver\n#  user: sa\n#  password: sa\n#  url: jdbc:h2:target/example\n#  properties:\n#    charSet: UTF-8\n#    hibernate.dialect: org.hibernate.dialect.H2Dialect\n#  maxWaitForConnection: 1s\n#  validationQuery: \"/* MyApplication Health Check */ SELECT 1\"\n#  minSize: 8\n#  maxSize: 32\n#  checkConnectionWhileIdle: false\n\n\n\n\nResource\u30af\u30e9\u30b9\n\u610f\u56f3\u7684\u306bHTTP\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9404\u306a\u3069\u3092\u8fd4\u3057\u305f\u3044\u5834\u5408\u306b\u7279\u306b\u4ee5\u4e0b\u306e\u9055\u3044\u304c\u3042\u308a\u307e\u3059\u3002\n\nDropwizard\u3067\u306fNotFoundException\u3092\u6295\u3052\u308b\u3060\u3051\nSpring Boot\u3067\u306f\u81ea\u4f5c\u4f8b\u5916\u3092\u4f5c\u6210\u3057\u3066\u3001\u305d\u306e\u30af\u30e9\u30b9\u3092@ExceptionHandler\u3067\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3059\u308b\n\n\nPeopleResource.java\n//@Path(\"/people\")\n//@Produces(MediaType.APPLICATION_JSON)\n@RestController\n@RequestMapping(value = \"/people\")\npublic class PeopleResource {\n\n//  private final PersonRepository repository;\n//  public PeopleResource(PersonRepository repository) {\n//      this.repository = repository;\n//  }\n\n    @Autowired\n    private PeopleRepository peopleRepository;\n\n//  @POST\n//  @UnitOfWork\n    @RequestMapping(method = RequestMethod.POST)\n    @Transactional\n    //public Person createPerson(Person person) {\n    public @ResponseBody\n    Person createPerson(@RequestBody Person people) {\n        return repository.create(person);\n    }\n\n//  @GET\n//  @UnitOfWork\n    @RequestMapping(method = RequestMethod.GET)\n    @Transactional\n    public List<Person> listPeople() {\n        return repository.findAll();\n    }\n\n//  @GET\n//  @UnitOfWork\n//  @Path(\"/{personId}\")\n    @RequestMapping(value = \"/{personId}\", method = RequestMethod.GET)\n    @Transactional\n//  public Person getPerson(@PathParam(\"personId\") LongParam personId) {\n    public Person getPerson(@PathVariable(\"personId\") Long personId) {\n        final Optional<Person> person = repository.findById(personId.get());\n        if (!person.isPresent()) {\n            //throw new NotFoundException(\"Not Found Person\");\n            throw new PersonNotFoundException(\"Not Found Person\");\n        }\n        return person.get();\n    }\n\n    @ResponseStatus(value = HttpStatus.NOT_FOUND, reason = \"Not Found Person\")\n    @ExceptionHandler(PersonNotFoundException.class)\n    public void notfound() {\n        // Nothing to do\n    }\n\n    private static class PersonNotFoundException extends RuntimeException {\n        public PersonNotFoundException(String message) {\n            super(message);\n        }\n    }\n}\n\n\n\nEntity\u30af\u30e9\u30b9\nDropwizard\u3082Spring Boot\u3082\u540c\u3058\u3002\nSpring Boot\u3067\u306f\u30ab\u30e9\u30e0\u540d\u3092fullName\u306e\u3088\u3046\u306b\u30ad\u30e3\u30e1\u30eb\u30b1\u30fc\u30b9\u306b\u3059\u308b\u3068\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002(Dropwizard\u306f\u52d5\u4f5c\u3057\u305f)\n\nPerson.java\n@Entity\n@Table(name = \"people\")\n@NamedQueries({ @NamedQuery(name = \"com.github.ko2ic.core.People.findAll\", query = \"SELECT p FROM Person p\") })\npublic class Person {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private long id;\n\n    @Column(name = \"full_name\", nullable = false)\n    private String fullName;\n\n    @Column(name = \"job_title\", nullable = false)\n    private String jobTitle;\n\n    public Person() {\n    }\n\n    public Person(long id, String fullName, String jobTitle) {\n        this.id = id;\n        this.fullName = fullName;\n        this.jobTitle = jobTitle;\n    }\n// \u3042\u3068\u306fgetter,setter\u306a\u306e\u3067\u7701\u7565\n}\n\n\n\nRepository\u30af\u30e9\u30b9\nDropwizard\u3067\u306fAbstractDAO\u3092\u5229\u7528\u3059\u308b\u3002\nSpring Boot\u3067\u306fEntityManager\u3092\u6271\u3046\u3002\u3053\u308c\u306fDropwizard\u3067Guice\u3092\u4f7f\u3063\u305f\u3068\u304d\u3082\u4f3c\u305f\u3088\u3046\u306a\u30af\u30e9\u30b9\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n//public class PersonRepository extends AbstractDAO<Person> {\n//  public PersonRepository(SessionFactory factory) {\n//      super(factory);\n//  }\n//\n//  public Optional<Person> findById(Long id) {\n//      return Optional.fromNullable(get(id));\n//  }\n//\n//  public Person create(Person person) {\n//      return persist(person);\n//  }\n//\n//  public List<Person> findAll() {\n//      return list(namedQuery(\"com.github.ko2ic.core.Person.findAll\"));\n//  }\n//}\n\n@Repository\npublic class PeopleRepository {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n    public Optional<Person> findById(Long id) {\n        return Optional.fromNullable(entityManager.find(Person.class, id));\n    }\n\n    public Person create(Person person) {\n        entityManager.persist(person);\n        return person;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public List<Person> findAll() {\n        return entityManager.createNamedQuery(\n                \"com.github.ko2ic.core.People.findAll\").getResultList();\n    }\n}\n\n\nLiquibase\u3092\u5229\u7528\nDropwizard\u3082Spring Boot\u3082changelog\u30d5\u30a1\u30a4\u30eb\u306f\u540c\u3058\u3067\u3059\u3002\n\nsrc/main/resource/migrations.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog\n         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd\">\n\n    <changeSet id=\"1\" author=\"ko2ic\">\n        <createTable tableName=\"people\">\n            <column name=\"id\" type=\"bigint\" autoIncrement=\"true\">\n                <constraints primaryKey=\"true\" nullable=\"false\" />\n            </column>\n            <column name=\"full_name\" type=\"varchar(255)\">\n                <constraints nullable=\"false\" />\n            </column>\n            <column name=\"job_title\" type=\"varchar(255)\" />\n        </createTable>\n    </changeSet>    \n</databaseChangeLog>\n\n\nSpring Boot\u3067\u306f\u8a2d\u5b9a\u3067enabled: true\u306b\u3059\u308b\u3068\u8d77\u52d5\u3059\u308b\u305f\u3073\u306b\u30c6\u30fc\u30d6\u30eb\u304cDrop\u3055\u308c\u3066\u3001migrate\u3055\u308c\u307e\u3059\u3002\n\u306a\u306e\u3067\u3001 \u672c\u756a\u74b0\u5883\u3067\u306f\u6ce8\u610f \u304c\u5fc5\u8981\u3067\u3059\u3002\nLiquibase\u306e\u4ed6\u306e\u6a5f\u80fd\u3092Spring Boot\u7d4c\u7531\u3067\u5229\u7528\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u306f\u4e0d\u660e\u3067\u3057\u305f\u3002\n\u76f4\u63a5\u3001Liquibase\u3092\u5229\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\nsrc/main/resources/config/application.yml\nliquibase:\n    change-log: classpath:/migrations.xml\n    drop-first: true\n    enabled: true\n\n\nDropwizard\u306f\u4ee5\u4e0b\u306e\u8a18\u4e8b\u306e\u3088\u3046\u306bDropwizard\u7d4c\u7531\u3067\u69d8\u3005\u306a\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\nDropwizard(Java)\u3067rails\u306e\u3088\u3046\u306bDB\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u3059\u308b\n\n\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u3088\u308b\u52d5\u7684\u30d5\u30a1\u30a4\u30eb\u8868\u793a\u306e\u6bd4\u8f03(freemarker)\n\u4eca\u56de\u306ffreemarker\u3067\u3059\u304c\u3001Spring Boot\u306e\u5834\u5408\u306f\u3001velocity, thymeleaf\u3067\u3082\u307b\u3068\u3093\u3069\u5909\u308f\u308a\u307e\u305b\u3093\u3002\n\nApplication\u30af\u30e9\u30b9\nDropwizard\u306e\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8a2d\u5b9a\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u3001Spring Boot\u306f\u7279\u306b\u4f55\u3082\u8ffd\u8a18\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\nHelloWorldApplication.java\n//  @Override\n//  public void initialize(Bootstrap<HelloWorldConfiguration> bootstrap) {\n//      \u30fb\u30fb\u30fb\n//      bootstrap.addBundle(new ViewBundle());\n//  }\n//  @Override\n//  public void run(HelloWorldConfiguration configuration,\n//          Environment environment) throws ClassNotFoundException {\n//      \u30fb\u30fb\u30fb\n//      environment.jersey().register(new ViewResource());\n//  }\n\n\n\nResource\u30af\u30e9\u30b9\nDropwizard\u306e\u5834\u5408\u306fView\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u306bView\u3067\u8868\u793a\u3057\u305f\u3044\u5024\u3092\u8a2d\u5b9a\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\nSpring Boot\u306e\u5834\u5408\u306f\u3001\u5f15\u6570\u306eMap\u30af\u30e9\u30b9\u306bView\u3067\u8868\u793a\u3057\u305f\u3044\u5024\u3092\u8a2d\u5b9a\u3057\u3001\u623b\u308a\u5024\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u5834\u6240\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\nViewResource.java\n//@Path(\"/views\")\n@Controller\npublic class ViewResource {\n\n    @Value(\"${spring.freemarker.templateEncoding:UTF-8}\")\n    private String charset;\n\n//  @GET\n//  @Produces(\"text/html;charset=UTF-8\")\n//  @Path(\"/freemarker\")\n//  public View freemarkerUTF8() {\n//      return new View(\"/views/ftl/utf8.ftl\", Charsets.UTF_8) {\n//      };\n//  }\n\n    @RequestMapping(value = \"/views/freemarker\")\n    public String freemarkerUTF8(Map<String, Object> model) {\n        model.put(\"charset\", charset);\n        return \"ftl/utf8\";\n    }\n}\n\n\n\u4e21\u65b9\u3068\u3082\u540c\u3058\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002\n\nsrc/main/resouces/views/ftl/utf8.ftl\n<html>\n<body>\n<h1>This is an example of a freemarker</h1>\n\u6587\u5b57\u30b3\u30fc\u30c9\uff1a${charset}\n</body>\n</html>\n\n\n\n\u9759\u7684\u30d5\u30a1\u30a4\u30eb\u8868\u793a\u306e\u6bd4\u8f03\n\nApplication\u30af\u30e9\u30b9\nDropwizard\u306e\u5834\u5408\u306f\u3001AssetsBundle\u3092\u767b\u9332\u3059\u308b\u3060\u3051\u3067\u3059\u3002\nSpring Boot\u306e\u5834\u5408\u306f\u3001SpringBootServletInitializer\u3092\u7d99\u627f\u3055\u305b\u3066\u3001configure\u30e1\u30bd\u30c3\u30c9\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3055\u305b\u307e\u3059\u3002\n\nHelloWorldApplication.java\n//public class HelloWorldApplication {\npublic class HelloWorldApplication extends SpringBootServletInitializer {\n\n//  public void initialize(Bootstrap<HelloWorldConfiguration> bootstrap) {\n//      bootstrap.addBundle(new AssetsBundle());\n//      \u30fb\u30fb\u30fb\n//  }\n\n    @Override\n    protected SpringApplicationBuilder configure(\n            SpringApplicationBuilder application) {\n        return application.sources(HelloWorldApplication.class);\n    }\n\n\n\u3053\u3053\u3067\u306e\u9759\u7684\u30d5\u30a1\u30a4\u30eb\u306f\u4ee5\u4e0b\u3067\u3059\u3002\n\nsrc/main/resources/static/assets/js/example.js\nalert('sample');\n\n\nhttp://localhost:8080/assets/js/example.js\n\u3067\u8868\u793a\u3067\u304d\u308b\u3053\u3068\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\nDropwizard\u306e\u5834\u5408\u306f\u3001 src/main/resources/assets/js/example.js\nSpring Boot\u306e\u5834\u5408\u306f\u3001src/main/resources/static/assets/js/example.js\n\u306b\u7f6e\u304d\u307e\u3059\u3002\n\n\u30ab\u30b9\u30bf\u30e0\u30d8\u30eb\u30b9\u30c1\u30a7\u30c3\u30af\u306e\u6bd4\u8f03\n\nApplication\u30af\u30e9\u30b9\nDropwizard\u306e\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8a2d\u5b9a\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u3001Spring Boot\u306f\u7279\u306b\u4f55\u3082\u8ffd\u8a18\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\nHelloWorldApplication.java\n//  @Override\n//  public void run(HelloWorldConfiguration configuration,\n//          Environment environment) throws ClassNotFoundException {\n//      \u30fb\u30fb\u30fb\n//      environment.healthChecks().register(\"template\",\n//              new TemplateHealthCheck(template));\n\n\n\nHealthCheck\u30af\u30e9\u30b9\nDropwizard\u3068Spring Boot\u3067\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306f\u5f53\u7136\u9055\u3044\u307e\u3059\u304c\u3001\u4f3c\u3066\u3044\u307e\u3059\u3002\n\nTemplateHealthCheck.java_\n//public class TemplateHealthCheck extends HealthCheck {\n//  private final Template template;\n//\n//  public TemplateHealthCheck(Template template) {\n//      this.template = template;\n//  }\n//\n//  @Override\n//  protected Result check() throws Exception {\n//      return Result.unhealthy(template.render(Optional.of(\"error\")));\n//  }\n//}\n@Component\npublic class TemplateHealthCheck implements HealthIndicator {\n\n    @Autowired\n    private HelloWorldConfiguration configuration;\n\n    @Override\n    public Health health() {\n        String data = configuration.buildTemplate()\n                .render(Optional.of(\"error\"));\n        return Health.down().withDetail(\"message\", data).build();\n    }\n}\n\n\nDrpwizard\u306e\u5834\u5408\n$ curl http://localhost:8081/healthcheck\n{\"deadlocks\":{\"healthy\":true},\"hibernate\":{\"healthy\":true},\"template\":{\"healthy\":false,\"message\":\"Hello, error!\"}}\n\nSpring Boot\u306e\u5834\u5408\n$ curl http://localhost:8081/health\n{\"status\":\"DOWN\",\"templateHealthCheck\":{\"status\":\"DOWN\",\"message\":\"Hello, error!\"},\"db\":{\"status\":\"UP\",\"database\":\"H2\",\"hello\":1}}\n\n\nDropwizard\u306eSpring\u7248\u3068\u3082\u8a00\u3048\u308bSpring Boot\u3068Dropwizard\u3092\u30b3\u30fc\u30c9\u30d9\u30fc\u30b9\u3067\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3059\u3002\n\u308f\u304b\u308a\u6613\u304f\u6bd4\u8f03\u3057\u305f\u3044\u306e\u3067\u3001\u30d1\u30c3\u30b1\u30fc\u30b8\u69cb\u6210\u30fb\u547d\u540d\u306a\u3069\u306fDropwizard\u306b\u5408\u308f\u305b\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001Dropwizard\u3068\u540c\u3058\u3088\u3046\u306b\u66f8\u304d\u305f\u3044\u306e\u3067\u3001Spring Boot\u3067\u5fc5\u9808\u3067\u306f\u306a\u3044jar\u3082\u4f9d\u5b58\u3055\u305b\u3066\u3044\u307e\u3059\u3002\n\n\u30bd\u30fc\u30b9\u4e2d\u306e\u30b3\u30e1\u30f3\u30c8\u306bDropwizard\u306e\u5834\u5408\u3092\u66f8\u3044\u3068\u304d\u307e\u3059\u3002\n\n# maven\u8a2d\u5b9a\n\n\u30b3\u30fc\u30c9\u306e\u6bd4\u8f03\u306e\u8a18\u4e8b\u306b\u3057\u305f\u3044\u306e\u3067\u3001Dropwizard\u306epom.xml\u306b\u3064\u3044\u3066\u306f\u3001\u3053\u3053\u3067\u306f\u66f8\u304d\u307e\u305b\u3093\u3002\n\u6c17\u306b\u306a\u308b\u65b9\u306f\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3082\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\n* [\u3044\u307e\u3059\u3050\u63a1\u7528\u3059\u3079\u304dJava\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30afDropWizard(\u305d\u306e\uff11)](http://qiita.com/ko2ic/items/cfe5b2f4593b705f9463)\n* [\u3044\u307e\u3059\u3050\u63a1\u7528\u3059\u3079\u304dJava\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30afDropWizard(\u305d\u306e\uff12)](http://qiita.com/ko2ic/items/069c5f75823fd8964bfa)\n* [\u3044\u307e\u3059\u3050\u63a1\u7528\u3059\u3079\u304dJava\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30afDropWizard(\u305d\u306e\uff13)](http://qiita.com/ko2ic/items/8110f5959315d3255ae9)\n\n* [dropwizard-testing\u304c\u4fbf\u5229\u3067\u3057\u305f](http://qiita.com/ko2ic/items/b59447a75952703e809a)\n\n\n\u4ee5\u4e0b\u306fSpring Boot\u306e\u5834\u5408\u306e\u4e00\u90e8\u3067\u3059\n\n```pom.xml\n  <!-- Inherit defaults from Spring Boot -->\n  <parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>1.1.2.RELEASE</version>\n  </parent>\n\n  <dependencies>\n<!-- tomcat\u304b\u3089jetty\u306b\u5909\u66f4\u3057\u305f\u3044\u5834\u5408\u306e\u8a18\u8ff0\u3002liquibase\u3092\u4f9d\u5b58\u3055\u305b\u305f\u3089tomcat\u3067\u52d5\u4f5c\u3057\u306a\u304b\u3063\u305f\u305f\u3081 -->\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-web</artifactId>\n      <version>${boot.version}</version>\n      <exclusions>\n        <exclusion>\n          <groupId>org.springframework.boot</groupId>\n          <artifactId>spring-boot-starter-tomcat</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-jetty</artifactId>\n      <version>${boot.version}</version>\n    </dependency>\n\n<!-- \u30e1\u30c8\u30ea\u30c3\u30af\u30b9\u3092\u5229\u7528\u3057\u305f\u3044\u5834\u5408\u3060\u3051 -->\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-actuator</artifactId>\n      <version>${boot.version}</version>\n    </dependency>\n\n<!-- DB\u3092\u5229\u7528\u3057\u305f\u3044\u5834\u5408\u3060\u3051 -->\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-data-jpa</artifactId>\n      <version>${boot.version}</version>\n    </dependency>\n\n<!-- freemarker\u3092\u5229\u7528\u3057\u305f\u3044\u5834\u5408\u3060\u3051\u3002\u3053\u308c\u3092\u4f9d\u5b58\u3055\u305b\u308b\u3068classpath:/templates/\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u306a\u3044\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3057\u305f -->\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-freemarker</artifactId>\n      <version>${boot.version}</version>\n    </dependency>\n\n<!-- \u5fc5\u9808\u3067\u306a\u3044 -->\n    <dependency>\n      <groupId>com.google.guava</groupId>\n      <artifactId>guava</artifactId>\n      <version>17.0</version>\n    </dependency>\n\n<!-- liquibase\u3092\u5229\u7528\u3057\u305f\u3044\u5834\u5408\u3060\u3051 -->\n    <dependency>\n      <groupId>org.liquibase</groupId>\n      <artifactId>liquibase-core</artifactId>\n      <version>3.2.0</version>\n    </dependency>\n\n    <dependency>\n      <groupId>com.h2database</groupId>\n      <artifactId>h2</artifactId>\n      <version>1.3.175</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-test</artifactId>\n      <version>${boot.version}</version>\n      <scope>test</scope>\n    </dependency>\n\n  </dependencies>\n\n  <build>\n    <resources>\n      <resource>\n       <directory>src/main/resources</directory>\n        <includes>\n          <include>**/*</include>\n        </includes>\n      </resource>\n    </resources>  \n    <plugins>\n      <plugin>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-maven-plugin</artifactId>\n      </plugin>\n\u30fb\u30fb\u30fb\n    </plugins>\n  </build>\n\n```\n\n# Hello-World\uff08\u57fa\u672c\uff09\u306e\u6bd4\u8f03\n\n\u307e\u305a\u306f\u3000Rest\u306aHello-World\u3067\u6bd4\u8f03\u3057\u307e\u3059\u3002\n\u30bd\u30fc\u30b9\u4e2d\u306e\u30b3\u30e1\u30f3\u30c8\u90e8\u5206\u304cDropwizard\u306b\u306a\u308a\u307e\u3059\u3002\n\n## Application\u30af\u30e9\u30b9\n\nDropwizard\u306f\u3001\u3053\u306e\u30af\u30e9\u30b9\u304c\u8272\u3005\u306a\u6a5f\u80fd\u3092\u8ffd\u52a0\u3059\u308b\u5f79\u5272\u3092\u6301\u3064\u306e\u3067\u3001\u8a18\u8ff0\u91cf\u304c\u591a\u304f\u306a\u308a\u307e\u3059\u3002\nSpring Boot\u3067\u306f\u3001```SpringApplication```\u30af\u30e9\u30b9\u3084DI\u3067\u3053\u306e\u3042\u305f\u308a\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\n```HelloWorldApplication.java\n@Configuration\n@EnableAutoConfiguration\n@ComponentScan\n@EnableConfigurationProperties\npublic class HelloWorldApplication {\n//public class HelloWorldApplication extends Application<HelloWorldConfiguration> {\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tSpringApplication.run(HelloWorldApplication.class, args);\n\t\t//new HelloWorldApplication().run(args);\n\t}\n\n//\t@Override\n//\tpublic String getName() {\n//\t\treturn \"hello-world\";\n//\t}\n//\n//\t@Override\n//\tpublic void initialize(Bootstrap<HelloWorldConfiguration> bootstrap) {\n//\t}\n//\n//\t@Override\n//\tpublic void run(HelloWorldConfiguration configuration,\n//\t\t\tEnvironment environment) throws ClassNotFoundException {\n//\t\tfinal Template template = configuration.buildTemplate();\n//\t\tenvironment.jersey().register(new HelloWorldResource(template));\n\t}\n```\n\n## Configuration\u30af\u30e9\u30b9\n\n```prefix = \"hello-world\"```\u306f\u3001example.yml\u306b\u8a18\u8ff0\u3057\u3066\u3044\u308b\u30ad\u30fc\u3067\u3059\u3002\n**Spring Boot\u3067\u306f\u3053\u306eprefix\u3092yml\u306b\u8ffd\u52a0\u3057\u306a\u3044\u3068\u8d77\u52d5\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002** \n\n\u3061\u306a\u307f\u306b\u8d77\u52d5\u306e\u3068\u304d\u306bexample.yml\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n```\n$ java -jar target/spike-spring-boot-1.0-SNAPSHOT.jar --spring.config.location=example.yml\n\n$ java -jar target/spike-dropwizard-1.0-SNAPSHOT.jar server example.yml\n```\n\n```HelloWorldConfiguration.java\n@ConfigurationProperties(prefix = \"hello-world\", ignoreUnknownFields = false)\n@Component\npublic class HelloWorldConfiguration {\n//public class HelloWorldConfiguration extends Configuration {\n\t@NotEmpty\n\tprivate String template;\n\n\t@NotEmpty\n\tprivate String defaultName = \"Stranger\";\n\n//\t@JsonProperty\n\tpublic String getTemplate() {\n\t\treturn template;\n\t}\n\n//\t@JsonProperty\n\tpublic void setTemplate(String template) {\n\t\tthis.template = template;\n\t}\n\n//\t@JsonProperty\n\tpublic String getDefaultName() {\n\t\treturn defaultName;\n\t}\n\n//\t@JsonProperty\n\tpublic void setDefaultName(String defaultName) {\n\t\tthis.defaultName = defaultName;\n\t}\n\n//\tpublic Template buildTemplate() {\n\t\treturn new Template(template, defaultName);\n\t}\n}\n```\n\n```example.yml\nhello-world:\n    template: Hello, %s!\n    defaultName: Stranger\n#template: Hello, %s!\n#defaultName: Stranger\n```\n\n## Resource\u30af\u30e9\u30b9\n\nPOST\u3067\u306e\u30d0\u30ea\u30c7\u30fc\u30bf\u30a8\u30e9\u30fc(\u3053\u306e\u5834\u5408```content```\u306b\"hoge\"\u306e\u3088\u3046\u306b4\u6587\u5b57\u4ee5\u4e0a)\u306e\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u9055\u3044\u304c\u3042\u308a\u307e\u3059\u3002\n\nHTTP\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u306f\n\n* ```422```\u3000<- Dropwizard\n* ```400```\u3000<- Spring Boot\n\nbody\u306f\n\n* ```{\"errors\":[\"content length must be between 0 and 3 (was hoge)\"]}```\u3000<- Dropwizard\n* ```{\"timestamp\":1403789235278,\"status\":400,\"error\":\"Bad Request\",\"exception\":\"org.springframework.web.bind.MethodArgumentNotValidException\",\"message\":\"Validation failed for argument at index 0 in method: public void com.github.ko2ic.resources.HelloWorldResource.receiveHello(com.github.ko2ic.core.Saying), with 1 error(s): [Field error in object 'saying' on field 'content': rejected value [hoge]; codes [Length.saying.content,Length.content,Length.java.lang.String,Length]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [saying.content,content]; arguments []; default message [content],3,0]; default message [length must be between 0 and 3]] \",\"path\":\"/hello-world\"}```\u3000<- Spring Boot\n\n\n```HelloWorldResource.java\n//@Path(\"/hello-world\")\n//@Produces(MediaType.APPLICATION_JSON)\n@RestController\n@RequestMapping(value = \"/hello-world\")\npublic class HelloWorldResource {\n\tprivate static final Logger LOGGER = LoggerFactory\n\t\t\t.getLogger(HelloWorldResource.class);\n\n//\tprivate final Template template;\n//\tprivate final AtomicLong counter;\n//\n//\tpublic HelloWorldResource(Template template) {\n//\t\tthis.template = template;\n//\t\tthis.counter = new AtomicLong();\n//\t}\n\n\t@Autowired\n\tprivate HelloWorldConfiguration configuration;\n\tprivate final AtomicLong counter = new AtomicLong();\n\n//\t@GET\n//\t@Timed(name = \"get-requests\")\n//\t@CacheControl(maxAge = 1, maxAgeUnit = TimeUnit.DAYS)\n//\tpublic Saying sayHello(@QueryParam(\"name\") Optional<String> name) {\n//\t\treturn new Saying(counter.incrementAndGet(), template.render(name));\n//\t}\n\t@RequestMapping(method = RequestMethod.GET)\n\tpublic Saying sayHello(\n\t\t\t@RequestParam(value = \"name\", required = false) String name,\n\t\t\tHttpServletResponse response) {\n\t\tresponse.setHeader(\"Cache-Control\", \"max-age=86400\");\n\t\tTemplate template = configuration.buildTemplate();\n\t\treturn new Saying(counter.incrementAndGet(), template.render(Optional\n\t\t\t\t.fromNullable(name)));\n\t}\n\n//\t@POST\n\t@RequestMapping(method = RequestMethod.POST)\n//\tpublic void receiveHello(@Valid Saying saying) {\n\tpublic void receiveHello(@RequestBody @Valid Saying saying) {\n\t\tLOGGER.info(\"Received a saying: {}\", saying);\n\t}\n}\n```\n\n\u30e2\u30c7\u30eb\u30af\u30e9\u30b9\n\nSpring Boot\u3067\u306f```@JsonProperty```\u306f\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\u3002\n\n```Saying.java\npublic class Saying {\n\tprivate long id;\n\n\t@Length(max = 3)\n\tprivate String content;\n\n\tpublic Saying() {\n\t}\n\n\tpublic Saying(long id, String content) {\n\t\tthis.id = id;\n\t\tthis.content = content;\n\t}\n\n//\t@JsonProperty\n\tpublic long getId() {\n\t\treturn id;\n\t}\n\n//\t@JsonProperty\n\tpublic String getContent() {\n\t\treturn content;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn String.format(\"id=%d content=%s\", getId(), getContent());\n\t}\n```\n\n```Template.java\npublic class Template {\n    private final String content;\n    private final String defaultName;\n\n    public Template(String content, String defaultName) {\n        this.content = content;\n        this.defaultName = defaultName;\n    }\n    \n    public String render(Optional<String> name) {\n        return format(content, name.or(defaultName));\n    }\n}\n```\n\n# DB\u30a2\u30af\u30bb\u30b9\u306e\u6bd4\u8f03(Hibernate)\n\n## Application\u30af\u30e9\u30b9\n\nDropwizard\u306e\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8a2d\u5b9a\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u3001Spring Boot\u306f\u7279\u306b\u4f55\u3082\u8ffd\u8a18\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n```HelloWorldApplication.java\n//\t// hibernate\u3092\u4f7f\u3046\u305f\u3081\n//\tprivate final HibernateBundle<HelloWorldConfiguration> hibernateBundle = new HibernateBundle<HelloWorldConfiguration>(\n//\t\t\tPerson.class) {\n//\t\t@Override\n//\t\tpublic DataSourceFactory getDataSourceFactory(\n//\t\t\t\tHelloWorldConfiguration configuration) {\n//\t\t\treturn configuration.getDataSourceFactory();\n//\t\t}\n//\t};\n//\n//\t@Override\n//\tpublic void initialize(Bootstrap<HelloWorldConfiguration> bootstrap) {\n//\t\t// liquibase\u3092\u4f7f\u3046\u305f\u3081\n//\t\tbootstrap.addBundle(new MigrationsBundle<HelloWorldConfiguration>() {\n//\t\t\t@Override\n//\t\t\tpublic DataSourceFactory getDataSourceFactory(\n//\t\t\t\t\tHelloWorldConfiguration configuration) {\n//\t\t\t\treturn configuration.getDataSourceFactory();\n//\t\t\t}\n//\t\t});\n//\t\tbootstrap.addBundle(hibernateBundle);\n//\t}\n//\t@Override\n//\tpublic void run(HelloWorldConfiguration configuration,\n//\t\t\tEnvironment environment) throws ClassNotFoundException {\n//\t\tfinal PersonRepository repository = new PersonRepository(\n//\t\t\t\thibernateBundle.getSessionFactory());\n//\t\tenvironment.jersey().register(new PeopleResource(repository));\n\n```\n\n## Configuration\u30af\u30e9\u30b9\n\nDropwizard\u306e\u5834\u5408\u306f```DataSourceFactory```\u3092\u4f7f\u3044\u307e\u3059\u3002\nSpring Boot\u306e\u5834\u5408\u306f```DataSourceAutoConfiguration & DataSourceProperties```\u306b\u81ea\u52d5\u3067\u8a2d\u5b9a\u3055\u308c\u308b\u306e\u3067\u3001\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304f\u3060\u3051\u3067\u8a2d\u5b9a\u3055\u308c\u307e\u3059\u3002\n\uff08```Application\u30af\u30e9\u30b9\u3067\u306e@EnableAutoConfiguration```\u3067```spring-boot-autoconfigure.jar/META-INF/spring.factories```\u306b\u8a18\u8ff0\u3055\u308c\u305f\u30af\u30e9\u30b9\u304c\u81ea\u52d5\u7684\u306b\u30ed\u30fc\u30c9\u3055\u308c\u308b\u3088\u3046\u3067\u3059\u3002\uff09\n\n```HelloWorldConfiguration.java\n\t// @Valid\n\t// @NotNull\n\t// private DataSourceFactory database = new DataSourceFactory();\n\t//\n\t// @JsonProperty(\"database\")\n\t// public DataSourceFactory getDataSourceFactory() {\n\t// return database;\n\t// }\n\t//\n\t// @JsonProperty(\"database\")\n\t// public void setDataSourceFactory(DataSourceFactory dataSourceFactory) {\n\t// this.database = dataSourceFactory;\n\t// }\n```\n\nDropwizard\u306e\u5834\u5408\u306f\u3001liquibase\u306f\u7279\u306bliqibase\u7528\u306b\u8a18\u8ff0\u3057\u307e\u305b\u3093\n\n```src/main/resources/config/application.yml\nspring:\n    application:\n        name: Hello World!\n    datasource:\n        driverClassName: org.h2.Driver\n        url: jdbc:h2:target/example\n        user: sa\n        password: sa\n    jpa:\n        hibernate:\n            ddl-auto: false\n        database: H2\n        show-sql: true\n    freemarker:\n        cache: false\n# \u30c7\u30d5\u30a9\u30eb\u30c8\u306f\u3001classpath:/templates/\n        templateLoaderPath: classpath:/views/  \nliquibase:\n    change-log: classpath:/migrations.xml\n    drop-first: true\n    enabled: false  \n\n# dropwizard\u306e\u5834\u5408\u306f\u3001hello-world\u3067\u5229\u7528\u3057\u305fexample.yml\u306b\u8ffd\u8a18\n\n#database:\n#  driverClass: org.h2.Driver\n#  user: sa\n#  password: sa\n#  url: jdbc:h2:target/example\n#  properties:\n#    charSet: UTF-8\n#    hibernate.dialect: org.hibernate.dialect.H2Dialect\n#  maxWaitForConnection: 1s\n#  validationQuery: \"/* MyApplication Health Check */ SELECT 1\"\n#  minSize: 8\n#  maxSize: 32\n#  checkConnectionWhileIdle: false\n\n```\n\n## Resource\u30af\u30e9\u30b9\n\n\u610f\u56f3\u7684\u306bHTTP\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9```404```\u306a\u3069\u3092\u8fd4\u3057\u305f\u3044\u5834\u5408\u306b\u7279\u306b\u4ee5\u4e0b\u306e\u9055\u3044\u304c\u3042\u308a\u307e\u3059\u3002\n\n* Dropwizard\u3067\u306f```NotFoundException```\u3092\u6295\u3052\u308b\u3060\u3051\n* Spring Boot\u3067\u306f\u81ea\u4f5c\u4f8b\u5916\u3092\u4f5c\u6210\u3057\u3066\u3001\u305d\u306e\u30af\u30e9\u30b9\u3092```@ExceptionHandler```\u3067\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3059\u308b\n\n```PeopleResource.java\n//@Path(\"/people\")\n//@Produces(MediaType.APPLICATION_JSON)\n@RestController\n@RequestMapping(value = \"/people\")\npublic class PeopleResource {\n\n//\tprivate final PersonRepository repository;\n//\tpublic PeopleResource(PersonRepository repository) {\n//\t\tthis.repository = repository;\n//\t}\n\n\t@Autowired\n\tprivate PeopleRepository peopleRepository;\n\n//\t@POST\n//\t@UnitOfWork\n\t@RequestMapping(method = RequestMethod.POST)\n\t@Transactional\n\t//public Person createPerson(Person person) {\n\tpublic @ResponseBody\n\tPerson createPerson(@RequestBody Person people) {\n\t\treturn repository.create(person);\n\t}\n\n//\t@GET\n//\t@UnitOfWork\n\t@RequestMapping(method = RequestMethod.GET)\n\t@Transactional\n\tpublic List<Person> listPeople() {\n\t\treturn repository.findAll();\n\t}\n\n//\t@GET\n//\t@UnitOfWork\n//\t@Path(\"/{personId}\")\n\t@RequestMapping(value = \"/{personId}\", method = RequestMethod.GET)\n\t@Transactional\n//\tpublic Person getPerson(@PathParam(\"personId\") LongParam personId) {\n\tpublic Person getPerson(@PathVariable(\"personId\") Long personId) {\n\t\tfinal Optional<Person> person = repository.findById(personId.get());\n\t\tif (!person.isPresent()) {\n\t\t\t//throw new NotFoundException(\"Not Found Person\");\n\t\t\tthrow new PersonNotFoundException(\"Not Found Person\");\n\t\t}\n\t\treturn person.get();\n\t}\n\n\t@ResponseStatus(value = HttpStatus.NOT_FOUND, reason = \"Not Found Person\")\n\t@ExceptionHandler(PersonNotFoundException.class)\n\tpublic void notfound() {\n\t\t// Nothing to do\n\t}\n\n\tprivate static class PersonNotFoundException extends RuntimeException {\n\t\tpublic PersonNotFoundException(String message) {\n\t\t\tsuper(message);\n\t\t}\n\t}\n}\n```\n\n# Entity\u30af\u30e9\u30b9\n\nDropwizard\u3082Spring Boot\u3082\u540c\u3058\u3002\nSpring Boot\u3067\u306f\u30ab\u30e9\u30e0\u540d\u3092```fullName```\u306e\u3088\u3046\u306b\u30ad\u30e3\u30e1\u30eb\u30b1\u30fc\u30b9\u306b\u3059\u308b\u3068\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002(Dropwizard\u306f\u52d5\u4f5c\u3057\u305f)\n\n```Person.java\n@Entity\n@Table(name = \"people\")\n@NamedQueries({ @NamedQuery(name = \"com.github.ko2ic.core.People.findAll\", query = \"SELECT p FROM Person p\") })\npublic class Person {\n\t@Id\n\t@GeneratedValue(strategy = GenerationType.IDENTITY)\n\tprivate long id;\n\n\t@Column(name = \"full_name\", nullable = false)\n\tprivate String fullName;\n\n\t@Column(name = \"job_title\", nullable = false)\n\tprivate String jobTitle;\n\n\tpublic Person() {\n\t}\n\n\tpublic Person(long id, String fullName, String jobTitle) {\n\t\tthis.id = id;\n\t\tthis.fullName = fullName;\n\t\tthis.jobTitle = jobTitle;\n\t}\n// \u3042\u3068\u306fgetter,setter\u306a\u306e\u3067\u7701\u7565\n}\n```\n\n# Repository\u30af\u30e9\u30b9\n\nDropwizard\u3067\u306f```AbstractDAO```\u3092\u5229\u7528\u3059\u308b\u3002\nSpring Boot\u3067\u306f```EntityManager```\u3092\u6271\u3046\u3002\u3053\u308c\u306f[Dropwizard\u3067Guice\u3092\u4f7f\u3063\u305f\u3068\u304d](http://qiita.com/ko2ic/items/409bfecfd806c2f903e1)\u3082\u4f3c\u305f\u3088\u3046\u306a\u30af\u30e9\u30b9\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n```\n//public class PersonRepository extends AbstractDAO<Person> {\n//\tpublic PersonRepository(SessionFactory factory) {\n//\t\tsuper(factory);\n//\t}\n//\n//\tpublic Optional<Person> findById(Long id) {\n//\t\treturn Optional.fromNullable(get(id));\n//\t}\n//\n//\tpublic Person create(Person person) {\n//\t\treturn persist(person);\n//\t}\n//\n//\tpublic List<Person> findAll() {\n//\t\treturn list(namedQuery(\"com.github.ko2ic.core.Person.findAll\"));\n//\t}\n//}\n\n@Repository\npublic class PeopleRepository {\n\n\t@PersistenceContext\n\tprivate EntityManager entityManager;\n\n\tpublic Optional<Person> findById(Long id) {\n\t\treturn Optional.fromNullable(entityManager.find(Person.class, id));\n\t}\n\n\tpublic Person create(Person person) {\n\t\tentityManager.persist(person);\n\t\treturn person;\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic List<Person> findAll() {\n\t\treturn entityManager.createNamedQuery(\n\t\t\t\t\"com.github.ko2ic.core.People.findAll\").getResultList();\n\t}\n}\n```\n\n## Liquibase\u3092\u5229\u7528\n\nDropwizard\u3082Spring Boot\u3082changelog\u30d5\u30a1\u30a4\u30eb\u306f\u540c\u3058\u3067\u3059\u3002\n\n```src/main/resource/migrations.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog\n         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd\">\n\n\t<changeSet id=\"1\" author=\"ko2ic\">\n\t\t<createTable tableName=\"people\">\n\t\t\t<column name=\"id\" type=\"bigint\" autoIncrement=\"true\">\n\t\t\t\t<constraints primaryKey=\"true\" nullable=\"false\" />\n\t\t\t</column>\n\t\t\t<column name=\"full_name\" type=\"varchar(255)\">\n\t\t\t\t<constraints nullable=\"false\" />\n\t\t\t</column>\n\t\t\t<column name=\"job_title\" type=\"varchar(255)\" />\n\t\t</createTable>\n\t</changeSet>\t\n</databaseChangeLog>\n```\n\nSpring Boot\u3067\u306f\u8a2d\u5b9a\u3067```enabled: true```\u306b\u3059\u308b\u3068\u8d77\u52d5\u3059\u308b\u305f\u3073\u306b\u30c6\u30fc\u30d6\u30eb\u304cDrop\u3055\u308c\u3066\u3001migrate\u3055\u308c\u307e\u3059\u3002\n\u306a\u306e\u3067\u3001 **\u672c\u756a\u74b0\u5883\u3067\u306f\u6ce8\u610f** \u304c\u5fc5\u8981\u3067\u3059\u3002\nLiquibase\u306e\u4ed6\u306e\u6a5f\u80fd\u3092Spring Boot\u7d4c\u7531\u3067\u5229\u7528\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u306f\u4e0d\u660e\u3067\u3057\u305f\u3002\n\u76f4\u63a5\u3001Liquibase\u3092\u5229\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n``````src/main/resources/config/application.yml\nliquibase:\n    change-log: classpath:/migrations.xml\n    drop-first: true\n    enabled: true\n```\n\nDropwizard\u306f\u4ee5\u4e0b\u306e\u8a18\u4e8b\u306e\u3088\u3046\u306bDropwizard\u7d4c\u7531\u3067\u69d8\u3005\u306a\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n* [Dropwizard(Java)\u3067rails\u306e\u3088\u3046\u306bDB\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u3059\u308b](http://qiita.com/ko2ic/items/02da56fd64ec39562bec)\n\n# \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u3088\u308b\u52d5\u7684\u30d5\u30a1\u30a4\u30eb\u8868\u793a\u306e\u6bd4\u8f03(freemarker)\n\n\u4eca\u56de\u306ffreemarker\u3067\u3059\u304c\u3001Spring Boot\u306e\u5834\u5408\u306f\u3001velocity, thymeleaf\u3067\u3082\u307b\u3068\u3093\u3069\u5909\u308f\u308a\u307e\u305b\u3093\u3002\n\n## Application\u30af\u30e9\u30b9\n\nDropwizard\u306e\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8a2d\u5b9a\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u3001Spring Boot\u306f\u7279\u306b\u4f55\u3082\u8ffd\u8a18\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n```HelloWorldApplication.java\n//\t@Override\n//\tpublic void initialize(Bootstrap<HelloWorldConfiguration> bootstrap) {\n//\t\t\u30fb\u30fb\u30fb\n//\t\tbootstrap.addBundle(new ViewBundle());\n//\t}\n//\t@Override\n//\tpublic void run(HelloWorldConfiguration configuration,\n//\t\t\tEnvironment environment) throws ClassNotFoundException {\n//\t\t\u30fb\u30fb\u30fb\n//\t\tenvironment.jersey().register(new ViewResource());\n//\t}\n```\n\n## Resource\u30af\u30e9\u30b9\n\nDropwizard\u306e\u5834\u5408\u306fView\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u306bView\u3067\u8868\u793a\u3057\u305f\u3044\u5024\u3092\u8a2d\u5b9a\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\nSpring Boot\u306e\u5834\u5408\u306f\u3001\u5f15\u6570\u306eMap\u30af\u30e9\u30b9\u306bView\u3067\u8868\u793a\u3057\u305f\u3044\u5024\u3092\u8a2d\u5b9a\u3057\u3001\u623b\u308a\u5024\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u5834\u6240\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n```ViewResource.java\n//@Path(\"/views\")\n@Controller\npublic class ViewResource {\n\n\t@Value(\"${spring.freemarker.templateEncoding:UTF-8}\")\n\tprivate String charset;\n\n//\t@GET\n//\t@Produces(\"text/html;charset=UTF-8\")\n//\t@Path(\"/freemarker\")\n//\tpublic View freemarkerUTF8() {\n//\t\treturn new View(\"/views/ftl/utf8.ftl\", Charsets.UTF_8) {\n//\t\t};\n//\t}\n\n\t@RequestMapping(value = \"/views/freemarker\")\n\tpublic String freemarkerUTF8(Map<String, Object> model) {\n\t\tmodel.put(\"charset\", charset);\n\t\treturn \"ftl/utf8\";\n\t}\n}\n```\n\n\u4e21\u65b9\u3068\u3082\u540c\u3058\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002\n\n```src/main/resouces/views/ftl/utf8.ftl\n<html>\n<body>\n<h1>This is an example of a freemarker</h1>\n\u6587\u5b57\u30b3\u30fc\u30c9\uff1a${charset}\n</body>\n</html>\n```\n\n# \u9759\u7684\u30d5\u30a1\u30a4\u30eb\u8868\u793a\u306e\u6bd4\u8f03\n\n## Application\u30af\u30e9\u30b9\n\nDropwizard\u306e\u5834\u5408\u306f\u3001```AssetsBundle```\u3092\u767b\u9332\u3059\u308b\u3060\u3051\u3067\u3059\u3002\nSpring Boot\u306e\u5834\u5408\u306f\u3001```SpringBootServletInitializer```\u3092\u7d99\u627f\u3055\u305b\u3066\u3001```configure```\u30e1\u30bd\u30c3\u30c9\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3055\u305b\u307e\u3059\u3002\n\n```HelloWorldApplication.java\n//public class HelloWorldApplication {\npublic class HelloWorldApplication extends SpringBootServletInitializer {\n\n//\tpublic void initialize(Bootstrap<HelloWorldConfiguration> bootstrap) {\n//\t\tbootstrap.addBundle(new AssetsBundle());\n//\t\t\u30fb\u30fb\u30fb\n//\t}\n\n\t@Override\n\tprotected SpringApplicationBuilder configure(\n\t\t\tSpringApplicationBuilder application) {\n\t\treturn application.sources(HelloWorldApplication.class);\n\t}\n```\n\n\u3053\u3053\u3067\u306e\u9759\u7684\u30d5\u30a1\u30a4\u30eb\u306f\u4ee5\u4e0b\u3067\u3059\u3002\n\n```src/main/resources/static/assets/js/example.js\nalert('sample');\n```\n\nhttp://localhost:8080/assets/js/example.js\n\u3067\u8868\u793a\u3067\u304d\u308b\u3053\u3068\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\nDropwizard\u306e\u5834\u5408\u306f\u3001 ```src/main/resources/assets/js/example.js```\nSpring Boot\u306e\u5834\u5408\u306f\u3001```src/main/resources/static/assets/js/example.js```\n\u306b\u7f6e\u304d\u307e\u3059\u3002\n\n# \u30ab\u30b9\u30bf\u30e0\u30d8\u30eb\u30b9\u30c1\u30a7\u30c3\u30af\u306e\u6bd4\u8f03\n\n## Application\u30af\u30e9\u30b9\n\nDropwizard\u306e\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8a2d\u5b9a\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u3001Spring Boot\u306f\u7279\u306b\u4f55\u3082\u8ffd\u8a18\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n```HelloWorldApplication.java\n//\t@Override\n//\tpublic void run(HelloWorldConfiguration configuration,\n//\t\t\tEnvironment environment) throws ClassNotFoundException {\n//\t\t\u30fb\u30fb\u30fb\n//\t\tenvironment.healthChecks().register(\"template\",\n//\t\t\t\tnew TemplateHealthCheck(template));\n```\n\n## HealthCheck\u30af\u30e9\u30b9\n\nDropwizard\u3068Spring Boot\u3067\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306f\u5f53\u7136\u9055\u3044\u307e\u3059\u304c\u3001\u4f3c\u3066\u3044\u307e\u3059\u3002\n\n```TemplateHealthCheck.java_\n//public class TemplateHealthCheck extends HealthCheck {\n//\tprivate final Template template;\n//\n//\tpublic TemplateHealthCheck(Template template) {\n//\t\tthis.template = template;\n//\t}\n//\n//\t@Override\n//\tprotected Result check() throws Exception {\n//\t\treturn Result.unhealthy(template.render(Optional.of(\"error\")));\n//\t}\n//}\n@Component\npublic class TemplateHealthCheck implements HealthIndicator {\n\n\t@Autowired\n\tprivate HelloWorldConfiguration configuration;\n\n\t@Override\n\tpublic Health health() {\n\t\tString data = configuration.buildTemplate()\n\t\t\t\t.render(Optional.of(\"error\"));\n\t\treturn Health.down().withDetail(\"message\", data).build();\n\t}\n}\n```\n\n```\nDrpwizard\u306e\u5834\u5408\n$ curl http://localhost:8081/healthcheck\n{\"deadlocks\":{\"healthy\":true},\"hibernate\":{\"healthy\":true},\"template\":{\"healthy\":false,\"message\":\"Hello, error!\"}}\n\nSpring Boot\u306e\u5834\u5408\n$ curl http://localhost:8081/health\n{\"status\":\"DOWN\",\"templateHealthCheck\":{\"status\":\"DOWN\",\"message\":\"Hello, error!\"},\"db\":{\"status\":\"UP\",\"database\":\"H2\",\"hello\":1}}\n```\n\n", "tags": ["dropwizard0.7.0", "Java", "spring-boot1.1.3", "spring"]}