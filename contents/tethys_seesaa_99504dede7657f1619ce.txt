{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\u3002\ncocotb\u306f\u3001Python\u3092\u4f7f\u7528\u3057\u305fHDL\u30c6\u30b9\u30c8\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3059\u3002\n\u3057\u3070\u3089\u304f\u6210\u308a\u884c\u304d\u3092\u898b\u5b88\u3063\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u30d0\u30fc\u30b8\u30e7\u30f31.0\u304c\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305f\u306e\u3067\u8a66\u3057\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\ncocotb\u306e\u7279\u5fb4\u3002\ncocotb\u306f\u3001Potential Ventures\u793e\u304c\u958b\u767a\u3057\u3066\u3044\u308bHDL\u5411\u3051\u306e\u8efd\u91cf\u306a\u30c6\u30b9\u30c8\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3001Python\u3067\u8a18\u8ff0\u3055\u308c\u3066\u3044\u307e\u3059\u3002BSD\u30e9\u30a4\u30bb\u30f3\u30b9\u306b\u3066GitHub\u306b\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/potentialventures/cocotb\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u3053\u3061\u3089\u306b\u306a\u308a\u307e\u3059\u3002\nhttp://cocotb.readthedocs.org/en/latest/index.html\nFPGA\u958b\u767a\u306b\u304a\u3051\u308b\u901f\u3084\u304b\u306a\u691c\u8a3c\u74b0\u5883\u306e\u7acb\u3061\u4e0a\u3052\u610f\u8b58\u3057\u3066\u304a\u308a\u3001SystemVerilog\u3067\u66f8\u304b\u308c\u305fUVM\u3088\u308a\u3082\u975e\u5e38\u306b\u8efd\u304f\u3001\u307e\u305fPython\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u7c21\u7d20\u3067\u898b\u3084\u3059\u3044\u8a18\u8ff0\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u5bfe\u5fdc\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u30fc\u306f\u3001Icarus Verilog, VCS, Riviera-PRO, Questa(ModelSim), Incisive\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\n\u7279\u306bIcarus\u3068VCS\u306f\u89aa\u548c\u6027\u304c\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n\u307e\u305f\u3001xUnit\u7528\u306e\u30d5\u30a1\u30a4\u30eb\u51fa\u529b\u6a5f\u80fd\u3092\u5099\u3048\u3066\u304a\u308a\u3001CI\u30c4\u30fc\u30eb\u3067\u3042\u308bJenkins\u3068\u9023\u643a\u3057\u3084\u3059\u3044\u306e\u3082\u7279\u5fb4\u3068\u8a00\u3048\u307e\u3059\u3002\nDUT(HDL)\u3068\u306e\u30a2\u30af\u30bb\u30b9\u306b\u306fPython\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3068\u30b3\u30eb\u30fc\u30c1\u30f3\u3001\u30c7\u30b3\u30ec\u30fc\u30bf\u6280\u8853\u304c\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002\u30b3\u30eb\u30fc\u30c1\u30f3\u3067\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u30fc\u3092\u30dd\u30fc\u30ba\u3055\u305b\u3001cocotb\u306e\u51e6\u7406\u3092\u5165\u308c\u3066\u3001\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u30fc\u3092\u518d\u958b\u3055\u305b\u308b\u4ed5\u7d44\u307f\u3067\u3059\u3002\nPython\u3092\u4f7f\u3063\u3066\u3044\u308b\u4eba\u306b\u3082\u6163\u308c\u306a\u3044\u3068\u3053\u308d\u304c\u3042\u308a\u307e\u3059\u304c\u3001cocotb\u3067\u306f\u4f7f\u3044\u3069\u3053\u308d\u304c\u308f\u304b\u308c\u3070\u3042\u307e\u308a\u610f\u8b58\u3092\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u4eca\u56de\u306f\u30b5\u30f3\u30d7\u30eb\u3068\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u624b\u304b\u304c\u308a\u306b\u3001Verilog\u306e\u9806\u5e8f\u56de\u8def\u3092\u691c\u8a3c\u3059\u308b\u74b0\u5883\u3092cocotb\u3092\u4f7f\u3063\u3066\u8a18\u8ff0\u3057\u3066\u307f\u307e\u3057\u305f\u3002OS\u306f\u3001CentOS6.6\u3067\u3059\u3002\n\n\u6e96\u5099\nGitHub\u3088\u308a\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\ngit clone https://github.com/potentialventures/cocotb\n\n\u4eca\u56de\u306fexample\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u65b0\u305f\u306b\u30ef\u30fc\u30af\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u3001\u305d\u3053\u306brtl\u304a\u3088\u3073tests\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u3001\u305d\u308c\u305e\u308cDUT\u3001\u30c6\u30b9\u30c8\u3092\u4fdd\u5b58\u3057\u307e\u3057\u305f\u3002\n\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u306b\u306fIcarus Verilog\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002makefiles\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3042\u308b\u300cMakefile.sim\u300d\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u30fc\u9078\u629e\u90e8\u5206\u306b\u300cicarus\u300d\u3092\u5165\u308c\u307e\u3059\u3002\n# Default to Icarus if no simulator is defined\nSIM ?= icarus\n\n\nDUT\n8bit\u306e\u9806\u5e8f\u56de\u8def\u306b\u306a\u308a\u307e\u3059\u3002\n\u4e2d\u3067\u3001\u6ce2\u5f62\u53d6\u5f97\u306e\u305f\u3081\u306bvcd\u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\u3055\u305b\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\ndff.v\n\nmodule dff(\n  input            RST_N,\n  input            CLK,\n  input      [7:0] D,\n  output reg [7:0] Q\n);\n\n  always @(negedge RST_N, posedge CLK)\n    if(~RST_N)\n      Q <= 8'h0;\n    else\n      Q <= D;\n\n  initial begin\n    $dumpfile(\"dump.vcd\");\n    $dumpvars(1, dff);\n  end\n\nendmodule\n\n\n\n\u30c6\u30b9\u30c8\n\u30d5\u30a1\u30a4\u30eb1\u500b\u3067\u6e08\u307e\u3059\u305f\u3081\u3001\u30c6\u30b9\u30c8\u30d9\u30f3\u30c1\u74b0\u5883(DUT\u3068\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9)\u3068\u7c21\u5358\u306a\u30c9\u30e9\u30a4\u30d0\u30fb\u30c1\u30a7\u30c3\u30ab\u3092\u5165\u308c\u307e\u3057\u305f\u3002\n\u5185\u5bb9\u3068\u3057\u3066\u306f\u30e9\u30f3\u30c0\u30e0\u306a\u5024\u3092\u5165\u529b\u3057\u30011\u30b5\u30a4\u30af\u30eb\u5f8cDUT\u304b\u3089\u306e\u51fa\u529b\u5024\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u30b7\u30ca\u30ea\u30aa\u3067\u3059\u3002\n\ntests.py\nimport cocotb\nfrom cocotb.triggers import Timer, RisingEdge\nfrom cocotb.result import TestFailure\nfrom cocotb.clock import Clock\n\nimport random\n\nclass DffTB(object):\n    def __init__(self, dut, dubug=True):\n        self.dut = dut\n\n    @cocotb.coroutine\n    def reset(self, duration=10000):\n        self.dut.log.info(\"Resetting DUT\")\n        self.dut.RST_N <= 0\n        self.dut.D <= 0\n        yield Timer(duration)\n        yield RisingEdge(self.dut.CLK)\n        self.dut.RST_N <= 1\n        self.dut.log.info(\"Out of reset\")\n\n    @cocotb.coroutine\n    def gen_and_check(self):\n        D = random.randint(0, 255)\n        self.dut.D = D;\n        yield RisingEdge(self.dut.CLK)\n        yield Timer(1)\n        if int(self.dut.Q) != D :\n            raise TestFailure(\n                \"[NG] Compre error. D==%s Q==%s\" %  (D, int(self.dut.Q)))\n        else :\n            self.dut.log.info(\"[OK]\")\n\n\n@cocotb.coroutine\ndef clock_gen(signal):\n    while True:\n        signal <= 0\n        yield Timer(5000)\n        signal <= 1\n        yield Timer(5000)\n\n@cocotb.test()\ndef basic_test(dut):\n    \"\"\"basic_test\"\"\"\n    tb = DffTB(dut)\n    cocotb.fork(clock_gen(dut.CLK))\n    yield RisingEdge(dut.CLK)\n    yield tb.reset()\n\n    for i in range(30):\n        yield tb.gen_and_check()\n\n\ncocotb\u3067\u306f\u300cdut\u300d\u304c\u4e88\u7d04\u8a9e\u3067\u3001\u3053\u308c\u304cDUT\u306e\u30c8\u30c3\u30d7\u968e\u5c64\u3068\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u7c21\u5358\u306b\u3059\u308b\u305f\u3081\u3001class\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u4eca\u306e\u3068\u3053\u308ddut\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3057\u304b\u8a18\u8ff0\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u4ed6\u306e\u691c\u8a3c\u30e2\u30b8\u30e5\u30fc\u30eb\u3084\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u3092\u521d\u671f\u5316\u7b49\u306e\u51e6\u7406\u3092\u5165\u308c\u3066\u3044\u304d\u307e\u3059\u3002\n\u30c6\u30b9\u30c8\u30b7\u30ca\u30ea\u30aa\u306f\u3001\u6700\u5f8c\u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u3088\u3046\u306bcocotb.test()\u3092\u30c7\u30b3\u30ec\u30fc\u30c8\u3057\u3066\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\u306b\u5f53\u305f\u3063\u3066\u3001\u4e3b\u306a\u51e6\u7406\u3059\u308b\u90e8\u5206\u306fcocotb.coroutine\u3092\u30c7\u30b3\u30ec\u30fc\u30c8\u3057\u307e\u3059\u3002\u4e0a\u8a18\u8a18\u8ff0\u3067\u306f\u300cclock_gen\u300d\u3084\u300cgen_and_check\u300d\u8fba\u308a\u304c\u305d\u308c\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u5b9f\u884c\u30b9\u30af\u30ea\u30d7\u30c8\ntests\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306bMakefile\u3092\u7528\u610f\u3057\u307e\u3057\u305f\u3002\n(TOPLEVEL)\u306bDUT\u30c8\u30c3\u30d7\u968e\u5c64\u3092\u6307\u5b9a\u3057\u3001(MODULE)\u306bPython\u30b9\u30af\u30ea\u30d7\u30c8\u540d\u3092\u5165\u529b\u3057\u307e\u3059\u3002\n\nMakefile\nTOPLEVEL := dff\nTOPLEVEL_LANG ?= verilog\n\nPWD=$(shell pwd)\nCOCOTB=$(PWD)/../../..\n\nifeq ($(OS),Msys)\nWPWD=$(shell sh -c 'pwd -W')\nPYTHONPATH := $(WPWD)/../model;$(PYTHONPATH)\nelse\nWPWD=$(shell pwd)\nPYTHONPATH := $(WPWD)/../model:$(PYTHONPATH)\nendif\nexport PYTHONPATH\n\nVERILOG_SOURCES = $(WPWD)/../rtl/dff.v\nGPI_IMPL := vpi\n\nexport TOPLEVEL_LANG\n\nMODULE ?= tests\n\ninclude $(COCOTB)/makefiles/Makefile.inc\ninclude $(COCOTB)/makefiles/Makefile.sim\n\n\n\n\u5b9f\u884c\u7d50\u679c\u30fb\u6ce2\u5f62\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\u521d\u671f\u5316\u30d5\u30a7\u30a4\u30ba\u304b\u3089\u30ea\u30bb\u30c3\u30c8\u767a\u884c\u3001\u51fa\u529b\u5024\u30c1\u30a7\u30c3\u30af\u3001\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86\u307e\u3067\u6d41\u3059\u3053\u3068\u304c\u51fa\u6765\u307e\u3057\u305f\u3002\n        TESTCASE= TOPLEVEL=dff \\\n        vvp -M /tmp/cocotb/build/libs/x86_64 -m gpivpi sim_build/sim.vvp   \n     -.--ns INFO     cocotb.gpi                                GpiCommon.cpp:47   in gpi_print_registered_impl       VPI registered\n     0.00ns INFO     cocotb.gpi                                  gpi_embed.c:229  in embed_sim_init                  Running on Icarus Verilog version 0.9.6 \n     0.00ns INFO     cocotb.gpi                                  gpi_embed.c:230  in embed_sim_init                  Python interpreter initialised and cocotb loaded!\n     0.00ns INFO     cocotb.gpi                                  __init__.py:103  in _initialise_testbench           Running tests with Cocotb v1.0 from /tmp/cocotb\n     0.00ns INFO     cocotb.gpi                                  __init__.py:119  in _initialise_testbench           Seeding Python random module with 1430897996\n     0.00ns INFO     cocotb.regression                         regression.py:153  in initialise                      Found test tests.basic_test\n     0.00ns INFO     cocotb.regression                         regression.py:254  in execute                         Running test 1/1: basic_test\n     0.00ns INFO     ..routine.basic_test.0x7f2a3156ffd0       decorators.py:186  in send                            Starting test: \"basic_test\"\n                                                                                                                               Description: basic_test\nVCD info: dumpfile dump.vcd opened for output.\n     5.00ns INFO     cocotb.dff                                     tests.py:14   in reset                           Resetting DUT\n    15.00ns INFO     cocotb.dff                                     tests.py:20   in reset                           Out of reset\n    25.00ns INFO     cocotb.dff                                     tests.py:32   in gen_and_check                   [OK]\n    35.00ns INFO     cocotb.dff                                     tests.py:32   in gen_and_check                   [OK]\n\n    (\u4e2d\u7565)\n\n   315.00ns INFO     cocotb.dff                                     tests.py:32   in gen_and_check                   [OK]\n   315.00ns INFO     cocotb.regression                         regression.py:201  in handle_result                   Test Passed: basic_test\n   315.00ns INFO     cocotb.regression                         regression.py:162  in tear_down                       Passed 1 tests (0 skipped)\n   315.00ns INFO     cocotb.regression                         regression.py:168  in tear_down                       Shutting down...\n\n\u6ce2\u5f62\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002RST_N\u3067\u521d\u671f\u5316\u3055\u308c\u3066\u3001\u305d\u306e\u5f8c\u30e9\u30f3\u30c0\u30e0\u306a\u5024\u304c\u5165\u529b\u3055\u308c\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n\n\u304a\u308f\u308a\u306b\u3002\nPython\u306e\u77e5\u8b58\u304c\u3042\u308b\u7a0b\u5ea6\u3042\u308b\u3068\u3001\u6bd4\u8f03\u7684\u7c21\u5358\u306b\u691c\u8a3c\u74b0\u5883\u3092\u69cb\u7bc9\u3067\u304d\u308b\u5370\u8c61\u3067\u3059\u3002\n\u3057\u304b\u3057\u3001\u81ea\u5206\u306e\u7406\u89e3\u4e0d\u8db3\u306a\u3068\u3053\u308d\u3082\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u3042\u307e\u308a\u5145\u5b9f\u3057\u3066\u3044\u308b\u3068\u306f\u8a00\u3048\u307e\u305b\u3093\u3002\u307e\u305f\u3001Tutorial\u306e\u6700\u521d\u306b\u3042\u308bEndian Swapper\u306f\u6577\u5c45\u304c\u9ad8\u3059\u304e\u308b\u3088\u3046\u306b\u611f\u3058\u307e\u3057\u305f\u3002\n\u3068\u306f\u3044\u3048\u3001SystemVerilog\u3067\u306f\u30c7\u30d0\u30c3\u30b0\u3057\u3065\u3089\u3044\u30c6\u30b9\u30c8\u90e8\u5206\u304cPython\u3060\u3068\u304b\u306a\u308a\u5206\u304b\u308a\u6613\u304f\u3001\u307e\u305f\u4eca\u56de\u306erandom\u306e\u3088\u3046\u306bPython\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u4f7f\u3048\u308b\u306e\u306f\u3001\u30b3\u30b9\u30c8\u3084\u5229\u7528\u8005\u306e\u591a\u3055\u304b\u3089\u8003\u3048\u3066\u5229\u70b9\u304c\u5927\u304d\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\u307e\u30601.0\u304c\u51fa\u305f\u3070\u304b\u308a\u3067\u3082\u3042\u308a\u3001\u4eca\u5f8c\u306b\u671f\u5f85\u3067\u3059\u3002\n##\u306f\u3058\u3081\u306b\u3002\ncocotb\u306f\u3001Python\u3092\u4f7f\u7528\u3057\u305fHDL\u30c6\u30b9\u30c8\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3059\u3002\n\u3057\u3070\u3089\u304f\u6210\u308a\u884c\u304d\u3092\u898b\u5b88\u3063\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u30d0\u30fc\u30b8\u30e7\u30f31.0\u304c\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305f\u306e\u3067\u8a66\u3057\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\n##cocotb\u306e\u7279\u5fb4\u3002\ncocotb\u306f\u3001[Potential Ventures\u793e](http://potential.ventures/)\u304c\u958b\u767a\u3057\u3066\u3044\u308bHDL\u5411\u3051\u306e\u8efd\u91cf\u306a\u30c6\u30b9\u30c8\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3001Python\u3067\u8a18\u8ff0\u3055\u308c\u3066\u3044\u307e\u3059\u3002BSD\u30e9\u30a4\u30bb\u30f3\u30b9\u306b\u3066GitHub\u306b\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/potentialventures/cocotb\n\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u3053\u3061\u3089\u306b\u306a\u308a\u307e\u3059\u3002\nhttp://cocotb.readthedocs.org/en/latest/index.html\n\nFPGA\u958b\u767a\u306b\u304a\u3051\u308b\u901f\u3084\u304b\u306a\u691c\u8a3c\u74b0\u5883\u306e\u7acb\u3061\u4e0a\u3052\u610f\u8b58\u3057\u3066\u304a\u308a\u3001SystemVerilog\u3067\u66f8\u304b\u308c\u305f[UVM](http://accellera.org/downloads/standards/uvm)\u3088\u308a\u3082\u975e\u5e38\u306b\u8efd\u304f\u3001\u307e\u305fPython\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u7c21\u7d20\u3067\u898b\u3084\u3059\u3044\u8a18\u8ff0\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u5bfe\u5fdc\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u30fc\u306f\u3001[Icarus Verilog](http://iverilog.icarus.com/), [VCS](http://www.synopsys.com/jp2/Tools/Verification/FunctionalVerification/Pages/VCS.aspx), [Riviera-PRO](https://www.aldec.com/jp/products/functional_verification/riviera-pro), [Questa(ModelSim)](http://www.mentorg.co.jp/products/fv/questa/), [Incisive](http://www.cadence.com/products/fv/enterprise_simulator/pages/default.aspx)\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\n\u7279\u306bIcarus\u3068VCS\u306f\u89aa\u548c\u6027\u304c\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n\n\u307e\u305f\u3001xUnit\u7528\u306e\u30d5\u30a1\u30a4\u30eb\u51fa\u529b\u6a5f\u80fd\u3092\u5099\u3048\u3066\u304a\u308a\u3001CI\u30c4\u30fc\u30eb\u3067\u3042\u308b[Jenkins](http://jenkins-ci.org/)\u3068\u9023\u643a\u3057\u3084\u3059\u3044\u306e\u3082\u7279\u5fb4\u3068\u8a00\u3048\u307e\u3059\u3002\n\nDUT(HDL)\u3068\u306e\u30a2\u30af\u30bb\u30b9\u306b\u306fPython\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3068\u30b3\u30eb\u30fc\u30c1\u30f3\u3001\u30c7\u30b3\u30ec\u30fc\u30bf\u6280\u8853\u304c\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002\u30b3\u30eb\u30fc\u30c1\u30f3\u3067\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u30fc\u3092\u30dd\u30fc\u30ba\u3055\u305b\u3001cocotb\u306e\u51e6\u7406\u3092\u5165\u308c\u3066\u3001\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u30fc\u3092\u518d\u958b\u3055\u305b\u308b\u4ed5\u7d44\u307f\u3067\u3059\u3002\nPython\u3092\u4f7f\u3063\u3066\u3044\u308b\u4eba\u306b\u3082\u6163\u308c\u306a\u3044\u3068\u3053\u308d\u304c\u3042\u308a\u307e\u3059\u304c\u3001cocotb\u3067\u306f\u4f7f\u3044\u3069\u3053\u308d\u304c\u308f\u304b\u308c\u3070\u3042\u307e\u308a\u610f\u8b58\u3092\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u4eca\u56de\u306f\u30b5\u30f3\u30d7\u30eb\u3068\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u624b\u304b\u304c\u308a\u306b\u3001Verilog\u306e\u9806\u5e8f\u56de\u8def\u3092\u691c\u8a3c\u3059\u308b\u74b0\u5883\u3092cocotb\u3092\u4f7f\u3063\u3066\u8a18\u8ff0\u3057\u3066\u307f\u307e\u3057\u305f\u3002OS\u306f\u3001CentOS6.6\u3067\u3059\u3002\n\n##\u6e96\u5099\nGitHub\u3088\u308a\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\n\n```sh\ngit clone https://github.com/potentialventures/cocotb\n```\n\n\u4eca\u56de\u306f`example`\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u65b0\u305f\u306b\u30ef\u30fc\u30af\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u3001\u305d\u3053\u306b`rtl`\u304a\u3088\u3073`tests`\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u3001\u305d\u308c\u305e\u308cDUT\u3001\u30c6\u30b9\u30c8\u3092\u4fdd\u5b58\u3057\u307e\u3057\u305f\u3002\n\n\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u306b\u306fIcarus Verilog\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002`makefiles`\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3042\u308b\u300cMakefile.sim\u300d\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u30fc\u9078\u629e\u90e8\u5206\u306b\u300cicarus\u300d\u3092\u5165\u308c\u307e\u3059\u3002\n\n```mf\n# Default to Icarus if no simulator is defined\nSIM ?= icarus\n```\n\n##DUT\n8bit\u306e\u9806\u5e8f\u56de\u8def\u306b\u306a\u308a\u307e\u3059\u3002\n\u4e2d\u3067\u3001\u6ce2\u5f62\u53d6\u5f97\u306e\u305f\u3081\u306bvcd\u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\u3055\u305b\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n```verilog:dff.v\n\nmodule dff(\n  input            RST_N,\n  input            CLK,\n  input      [7:0] D,\n  output reg [7:0] Q\n);\n\n  always @(negedge RST_N, posedge CLK)\n    if(~RST_N)\n      Q <= 8'h0;\n    else\n      Q <= D;\n\n  initial begin\n    $dumpfile(\"dump.vcd\");\n    $dumpvars(1, dff);\n  end\n\nendmodule\n```\n\n##\u30c6\u30b9\u30c8\n\u30d5\u30a1\u30a4\u30eb1\u500b\u3067\u6e08\u307e\u3059\u305f\u3081\u3001\u30c6\u30b9\u30c8\u30d9\u30f3\u30c1\u74b0\u5883(DUT\u3068\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9)\u3068\u7c21\u5358\u306a\u30c9\u30e9\u30a4\u30d0\u30fb\u30c1\u30a7\u30c3\u30ab\u3092\u5165\u308c\u307e\u3057\u305f\u3002\n\u5185\u5bb9\u3068\u3057\u3066\u306f\u30e9\u30f3\u30c0\u30e0\u306a\u5024\u3092\u5165\u529b\u3057\u30011\u30b5\u30a4\u30af\u30eb\u5f8cDUT\u304b\u3089\u306e\u51fa\u529b\u5024\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u30b7\u30ca\u30ea\u30aa\u3067\u3059\u3002\n\n```py:tests.py\nimport cocotb\nfrom cocotb.triggers import Timer, RisingEdge\nfrom cocotb.result import TestFailure\nfrom cocotb.clock import Clock\n\nimport random\n\nclass DffTB(object):\n    def __init__(self, dut, dubug=True):\n        self.dut = dut\n\n    @cocotb.coroutine\n    def reset(self, duration=10000):\n        self.dut.log.info(\"Resetting DUT\")\n        self.dut.RST_N <= 0\n        self.dut.D <= 0\n        yield Timer(duration)\n        yield RisingEdge(self.dut.CLK)\n        self.dut.RST_N <= 1\n        self.dut.log.info(\"Out of reset\")\n\n    @cocotb.coroutine\n    def gen_and_check(self):\n        D = random.randint(0, 255)\n        self.dut.D = D;\n        yield RisingEdge(self.dut.CLK)\n        yield Timer(1)\n        if int(self.dut.Q) != D :\n            raise TestFailure(\n                \"[NG] Compre error. D==%s Q==%s\" %  (D, int(self.dut.Q)))\n        else :\n            self.dut.log.info(\"[OK]\")\n\n\n@cocotb.coroutine\ndef clock_gen(signal):\n    while True:\n        signal <= 0\n        yield Timer(5000)\n        signal <= 1\n        yield Timer(5000)\n\n@cocotb.test()\ndef basic_test(dut):\n    \"\"\"basic_test\"\"\"\n    tb = DffTB(dut)\n    cocotb.fork(clock_gen(dut.CLK))\n    yield RisingEdge(dut.CLK)\n    yield tb.reset()\n\n    for i in range(30):\n        yield tb.gen_and_check()\n```\n\ncocotb\u3067\u306f\u300cdut\u300d\u304c\u4e88\u7d04\u8a9e\u3067\u3001\u3053\u308c\u304cDUT\u306e\u30c8\u30c3\u30d7\u968e\u5c64\u3068\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u7c21\u5358\u306b\u3059\u308b\u305f\u3081\u3001class\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u4eca\u306e\u3068\u3053\u308ddut\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3057\u304b\u8a18\u8ff0\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u4ed6\u306e\u691c\u8a3c\u30e2\u30b8\u30e5\u30fc\u30eb\u3084\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u3092\u521d\u671f\u5316\u7b49\u306e\u51e6\u7406\u3092\u5165\u308c\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u30c6\u30b9\u30c8\u30b7\u30ca\u30ea\u30aa\u306f\u3001\u6700\u5f8c\u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u3088\u3046\u306bcocotb.test()\u3092\u30c7\u30b3\u30ec\u30fc\u30c8\u3057\u3066\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\n\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\u306b\u5f53\u305f\u3063\u3066\u3001\u4e3b\u306a\u51e6\u7406\u3059\u308b\u90e8\u5206\u306fcocotb.coroutine\u3092\u30c7\u30b3\u30ec\u30fc\u30c8\u3057\u307e\u3059\u3002\u4e0a\u8a18\u8a18\u8ff0\u3067\u306f\u300cclock_gen\u300d\u3084\u300cgen_and_check\u300d\u8fba\u308a\u304c\u305d\u308c\u306b\u306a\u308a\u307e\u3059\u3002\n\n##\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u5b9f\u884c\u30b9\u30af\u30ea\u30d7\u30c8\n`tests`\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306bMakefile\u3092\u7528\u610f\u3057\u307e\u3057\u305f\u3002\n(TOPLEVEL)\u306bDUT\u30c8\u30c3\u30d7\u968e\u5c64\u3092\u6307\u5b9a\u3057\u3001(MODULE)\u306bPython\u30b9\u30af\u30ea\u30d7\u30c8\u540d\u3092\u5165\u529b\u3057\u307e\u3059\u3002\n\n```mf:Makefile\nTOPLEVEL := dff\nTOPLEVEL_LANG ?= verilog\n\nPWD=$(shell pwd)\nCOCOTB=$(PWD)/../../..\n\nifeq ($(OS),Msys)\nWPWD=$(shell sh -c 'pwd -W')\nPYTHONPATH := $(WPWD)/../model;$(PYTHONPATH)\nelse\nWPWD=$(shell pwd)\nPYTHONPATH := $(WPWD)/../model:$(PYTHONPATH)\nendif\nexport PYTHONPATH\n\nVERILOG_SOURCES = $(WPWD)/../rtl/dff.v\nGPI_IMPL := vpi\n\nexport TOPLEVEL_LANG\n\nMODULE ?= tests\n\ninclude $(COCOTB)/makefiles/Makefile.inc\ninclude $(COCOTB)/makefiles/Makefile.sim\n```\n\n##\u5b9f\u884c\u7d50\u679c\u30fb\u6ce2\u5f62\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\u521d\u671f\u5316\u30d5\u30a7\u30a4\u30ba\u304b\u3089\u30ea\u30bb\u30c3\u30c8\u767a\u884c\u3001\u51fa\u529b\u5024\u30c1\u30a7\u30c3\u30af\u3001\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86\u307e\u3067\u6d41\u3059\u3053\u3068\u304c\u51fa\u6765\u307e\u3057\u305f\u3002\n\n```\n        TESTCASE= TOPLEVEL=dff \\\n        vvp -M /tmp/cocotb/build/libs/x86_64 -m gpivpi sim_build/sim.vvp   \n     -.--ns INFO     cocotb.gpi                                GpiCommon.cpp:47   in gpi_print_registered_impl       VPI registered\n     0.00ns INFO     cocotb.gpi                                  gpi_embed.c:229  in embed_sim_init                  Running on Icarus Verilog version 0.9.6 \n     0.00ns INFO     cocotb.gpi                                  gpi_embed.c:230  in embed_sim_init                  Python interpreter initialised and cocotb loaded!\n     0.00ns INFO     cocotb.gpi                                  __init__.py:103  in _initialise_testbench           Running tests with Cocotb v1.0 from /tmp/cocotb\n     0.00ns INFO     cocotb.gpi                                  __init__.py:119  in _initialise_testbench           Seeding Python random module with 1430897996\n     0.00ns INFO     cocotb.regression                         regression.py:153  in initialise                      Found test tests.basic_test\n     0.00ns INFO     cocotb.regression                         regression.py:254  in execute                         Running test 1/1: basic_test\n     0.00ns INFO     ..routine.basic_test.0x7f2a3156ffd0       decorators.py:186  in send                            Starting test: \"basic_test\"\n                                                                                                                               Description: basic_test\nVCD info: dumpfile dump.vcd opened for output.\n     5.00ns INFO     cocotb.dff                                     tests.py:14   in reset                           Resetting DUT\n    15.00ns INFO     cocotb.dff                                     tests.py:20   in reset                           Out of reset\n    25.00ns INFO     cocotb.dff                                     tests.py:32   in gen_and_check                   [OK]\n    35.00ns INFO     cocotb.dff                                     tests.py:32   in gen_and_check                   [OK]\n\n    (\u4e2d\u7565)\n\n   315.00ns INFO     cocotb.dff                                     tests.py:32   in gen_and_check                   [OK]\n   315.00ns INFO     cocotb.regression                         regression.py:201  in handle_result                   Test Passed: basic_test\n   315.00ns INFO     cocotb.regression                         regression.py:162  in tear_down                       Passed 1 tests (0 skipped)\n   315.00ns INFO     cocotb.regression                         regression.py:168  in tear_down                       Shutting down...\n```\n\n\u6ce2\u5f62\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002RST_N\u3067\u521d\u671f\u5316\u3055\u308c\u3066\u3001\u305d\u306e\u5f8c\u30e9\u30f3\u30c0\u30e0\u306a\u5024\u304c\u5165\u529b\u3055\u308c\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n![waves.png](https://qiita-image-store.s3.amazonaws.com/0/32925/5363f4ca-a975-0501-466c-968b817f068c.png)\n\n##\u304a\u308f\u308a\u306b\u3002\nPython\u306e\u77e5\u8b58\u304c\u3042\u308b\u7a0b\u5ea6\u3042\u308b\u3068\u3001\u6bd4\u8f03\u7684\u7c21\u5358\u306b\u691c\u8a3c\u74b0\u5883\u3092\u69cb\u7bc9\u3067\u304d\u308b\u5370\u8c61\u3067\u3059\u3002\n\u3057\u304b\u3057\u3001\u81ea\u5206\u306e\u7406\u89e3\u4e0d\u8db3\u306a\u3068\u3053\u308d\u3082\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u3042\u307e\u308a\u5145\u5b9f\u3057\u3066\u3044\u308b\u3068\u306f\u8a00\u3048\u307e\u305b\u3093\u3002\u307e\u305f\u3001Tutorial\u306e\u6700\u521d\u306b\u3042\u308bEndian Swapper\u306f\u6577\u5c45\u304c\u9ad8\u3059\u304e\u308b\u3088\u3046\u306b\u611f\u3058\u307e\u3057\u305f\u3002\n\u3068\u306f\u3044\u3048\u3001SystemVerilog\u3067\u306f\u30c7\u30d0\u30c3\u30b0\u3057\u3065\u3089\u3044\u30c6\u30b9\u30c8\u90e8\u5206\u304cPython\u3060\u3068\u304b\u306a\u308a\u5206\u304b\u308a\u6613\u304f\u3001\u307e\u305f\u4eca\u56de\u306erandom\u306e\u3088\u3046\u306bPython\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u4f7f\u3048\u308b\u306e\u306f\u3001\u30b3\u30b9\u30c8\u3084\u5229\u7528\u8005\u306e\u591a\u3055\u304b\u3089\u8003\u3048\u3066\u5229\u70b9\u304c\u5927\u304d\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\u307e\u30601.0\u304c\u51fa\u305f\u3070\u304b\u308a\u3067\u3082\u3042\u308a\u3001\u4eca\u5f8c\u306b\u671f\u5f85\u3067\u3059\u3002\n", "tags": ["Python2.6", "Verilog", "FPGA", "SystemVerilog", "UVM"]}