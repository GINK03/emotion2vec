{"tags": ["rust"], "context": " More than 1 year has passed since last update.\n\n\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\n\u3044\u308f\u3086\u308b assert\u3002\n\n\u65b0\u898f\u4f5c\u6210\n$ cargo new test_example1 --bin\n\n\n\n\u30d5\u30a1\u30a4\u30eb\u69cb\u6210\n$ tree\n|   Cargo.toml\n|\n\\---src\n        main.rs\n\n\n\nsrc/main.rs\nfn main() {\n  let x = 1;\n  let y = 2;\n\n  debug_assert!(x <= y, \"{} > {}\", x, y);\n  debug_assert_eq!(x, y);\n\n  assert!(x <= y, \"{} != {}\", x, y);\n  assert_eq!(x, y);\n}\n\n\n\n\u30c7\u30d0\u30c3\u30b0\u5b9f\u884c\n$ cd test_example1\n$ cargo run\nthread '<main>' panicked at 'assertion failed: `(left == right)` (left: `1`, right: `2`)', src\\main.rs:6\nAn unknown error occurred\n\n\n\n\u30ea\u30ea\u30fc\u30b9\u5b9f\u884c\n$ cargo run --release\nthread '<main>' panicked at 'assertion failed: `(left == right)` (left: `1`, right: `2`)', src\\main.rs:9\nAn unknown error occurred\n\n\n\nassert! \u30de\u30af\u30ed\n\u7b2c\u4e00\u5f15\u6570\u304c\u6761\u4ef6\u3067\u3001\u7b2c\u4e8c\u6570\u4ee5\u964d\u306f\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u6642\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u8868\u793a\u7528\u3001println! \u3068\u540c\u3058\u3088\u3046\u306b\u51fa\u529b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u6307\u5b9a\u3067\u304d\u308b\u3002\n\u6761\u4ef6\u304c false \u3060\u3068\u3001\u6307\u5b9a\u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092 panic! (\u56de\u5fa9\u4e0d\u80fd\u306a\u30a8\u30e9\u30fc\u3068\u3057\u3066\u3001\u6307\u5b9a\u3055\u308c\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u51fa\u529b\u3068\u3068\u3082\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3059\u308b) \u306b\u6e21\u3059\u3002\n\nassert_eq! \u30de\u30af\u30ed\n\u540c\u5024\u6761\u4ef6\u5c02\u7528\u306e assert!\u3002\nassert_eq!(a, b)\n\n\u306f\nassert!(a == b, \"assertion failed: `(left == right)` (left: `{:?}`, right: `{:?}`)\", a, b);\n\n\u3068\u8a18\u8ff0\u3057\u3066\u3044\u308b\u306e\u3068\u304a\u306a\u3058\u3002\n\ndebug_assert! \u30de\u30af\u30ed\n\u30ea\u30ea\u30fc\u30b9\u30d3\u30eb\u30c9\u6642\u306b\u7121\u52b9\u5316\u3055\u308c\u308b assert!\u3002\n\ndebug_assert_eq! \u30de\u30af\u30ed\n\u30ea\u30ea\u30fc\u30b9\u30d3\u30eb\u30c9\u6642\u306b\u7121\u52b9\u5316\u3055\u308c\u308b assert_eq!\u3002\n\n\u30c6\u30b9\u30c8\n\n#[test]\n\n\u95a2\u6570\u306b test \u5c5e\u6027\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u30c6\u30b9\u30c8\u3068\u3057\u3066\u8a8d\u8b58\u3055\u308c\u308b\u3002\n\n\u65b0\u898f\u4f5c\u6210\n$ cargo new test_example2\n\n\n\n\u30d5\u30a1\u30a4\u30eb\u69cb\u6210\n$ tree\n|   Cargo.toml\n|\n\\---src\n        lib.rs\n\n\n\nsrc/lib.rs\n#[test] // test \u5c5e\u6027\nfn it_works() {\n  assert!(false, \"always false\"); // \u5fc5\u305a\u5931\u6557\u3059\u308b\n}\n\n#[test] // test \u5c5e\u6027\nfn it_works2() {\n  assert!(true, \"always true\"); // \u5fc5\u305a\u6210\u529f\u3059\u308b\n}\n\n\ntest \u5c5e\u6027\u306e\u3064\u3044\u305f\u95a2\u6570\u306e\u4e2d\u3067 panic! \u304c\u8d77\u3053\u308b\u3068\u3001\u30c6\u30b9\u30c8\u306b\u5931\u6557\u3057\u305f\u3082\u306e\u3068\u3057\u3066\u6271\u308f\u308c\u308b\u3002\n\n\u30c6\u30b9\u30c8\n$ cargo test\n\nrunning 2 tests\ntest it_works2 ... ok\ntest it_works ... FAILED\n\nfailures:\n\n---- it_works stdout ----\n        thread 'it_works' panicked at 'always false', src\\lib.rs:3\n\nfailures:\n    it_works\n\ntest result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured\n\n\ncargo test \u3067 test \u5c5e\u6027\u306e\u3064\u3044\u305f\u95a2\u6570\u304c\u5b9f\u884c\u3055\u308c\u308b\u3002\n\n#[should_panic]\n\nshould_panic \u5c5e\u6027\u3092\u4ed8\u3051\u308b\u3068\u3001\u5fc5\u305a\u5931\u6557\u3059\u308b\u3053\u3068\u3092\u30c6\u30b9\u30c8\u3067\u304d\u308b\u3002\n\n\u65b0\u898f\u4f5c\u6210\n$ cargo new test_example3\n\n\n\n\u30d5\u30a1\u30a4\u30eb\u69cb\u6210\n$ tree\n|   Cargo.toml\n|\n\\---src\n        lib.rs\n\n\n\nsrc/lib.rs\n#[test]\n#[should_panic(expected = \"always false\")] // should_panic \u5c5e\u6027\nfn it_works() {\n  assert!(false, \"always false\"); // \u3053\u3053\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092 expected \u306b\u6307\u5b9a\u3059\u308b\n}\n\n#[test]\nfn it_works2() {\n  assert!(true, \"always true\");\n}\n\n\n\u610f\u56f3\u3057\u306a\u3044\u539f\u56e0\u3067 panic! \u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u3066\u306f\u3001\u305f\u3060\u3057\u304f\u30c6\u30b9\u30c8\u3067\u304d\u3066\u3044\u308b\u3068\u306f\u8a00\u3048\u306a\u3044\u3002\n\u305d\u3053\u3067 should_panic \u306b expected \u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\u3002\u3053\u3053\u306b\u6307\u5b9a\u3057\u3066\u3042\u308b\u6587\u5b57\u5217\u304c panic! \u306e\u51fa\u529b\u306b\u542b\u307e\u308c\u3066\u3044\u308c\u3070\u3001\u305f\u3060\u3057\u304f\u5931\u6557\u3057\u3066\u3044\u308b\u3068\u5224\u65ad\u3057\u3066\u3044\u308b\u3002\n\n\u30c6\u30b9\u30c8\n$ cargo test\n\nrunning 2 tests\ntest it_works2 ... ok\ntest it_works ... ok\n\ntest result: ok. 2 passed; 0 failed; 0 ignored; 0 measured\n\n   Doc-tests test_example3\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured\n\n\n\u901a\u5e38\u306e\u30c6\u30b9\u30c8\u306e\u3042\u3068\u306b Doc-tests \u3068\u3044\u3046\u3082\u306e\u3082\u8d70\u3063\u3066\u3044\u308b\u3051\u3069\u3001\u3053\u308c\u306b\u3064\u3044\u3066\u306f\u5f8c\u8ff0\u3059\u308b\u3002\n\n#[ignore]\n\n\u5e38\u306b\u3059\u3079\u3066\u306e\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3068\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u3067\u3001\u7701\u7565\u53ef\u80fd\u306a\u30c6\u30b9\u30c8\u3092 ignore \u5c5e\u6027\u3067\u6307\u5b9a\u3067\u304d\u308b\u3002\n\n\u65b0\u898f\u4f5c\u6210\n$ cargo new test_example4\n\n\n\n\u30d5\u30a1\u30a4\u30eb\u69cb\u6210\n$ tree\n|   Cargo.toml\n|\n\\---src\n        lib.rs\n\n\n\nsrc/lib.rs\n#[test]\n#[should_panic(expected = \"always false\")]\nfn it_works() {\n  assert!(false, \"always false\");\n}\n\n#[test]\n#[ignore] // ignore \u5c5e\u6027\nfn it_works2() {\n  assert!(true, \"always true\");\n}\n\n\n\n\u30c6\u30b9\u30c8\n$ cargo test\n\nrunning 2 tests\ntest it_works2 ... ignored\ntest it_works ... ok\n\ntest result: ok. 1 passed; 0 failed; 1 ignored; 0 measured\n\n\n\n\u30c6\u30b9\u30c8(ignored)\n$ cargo test -- --ignored\n\nrunning 1 test\ntest it_works2 ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n\n\ncargo test \u306b -- \u304c\u3064\u3044\u3066\u3044\u308b\u306e\u306f\u30df\u30b9\u3067\u306f\u306a\u304f\u3066\u3001--ignore \u304c cargo \u306b\u3067\u306f\u306a\u304f\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3078\u306e\u5f15\u6570\u306e\u305f\u3081\u3002\n\n\u30c6\u30b9\u30c8\u30e2\u30b8\u30e5\u30fc\u30eb\n\u30c6\u30b9\u30c8\u306e\u3068\u304d\u3060\u3051\u30d3\u30eb\u30c9\u3055\u308c\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f5c\u308b\u3002\n\n\u65b0\u898f\u4f5c\u6210\n$ cargo new test_example5\n\n\n\n\u30d5\u30a1\u30a4\u30eb\u69cb\u6210\n$ tree\n|   Cargo.toml\n|\n\\---src\n        lib.rs\n\n\n\nsrc/lib.rs\npub fn square(x: i32) -> i32 {\n  x * x\n}\n\n#[cfg(test)]\nmod tests {\n  use super::*; // \u5916\u306e\u5b9a\u7fa9\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081 use\n\n  // \u3075\u3064\u3046\u306b\u30c6\u30b9\u30c8\u3092\u66f8\u304f\n  #[test]\n  fn it_works() {\n    assert_eq!(square(2), 4);\n  }\n}\n\n\n#[cfg(test)] \u3067 test \u306e\u3068\u304d\u3060\u3051\u30d3\u30eb\u30c9\u3055\u308c\u308b (cfg \u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3067\u304d\u308b)\u3002\n\n\u30c6\u30b9\u30c8\n$ cargo test\n\nrunning 1 test\ntest tests::it_works ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n\n\n\u3053\u308c\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u5358\u4f4d\u306e\u5358\u4f53\u30c6\u30b9\u30c8\u3092\u8a18\u8ff0\u3059\u308b\u3068\u304d\u306e\u66f8\u304d\u65b9\u3002\n\ntests \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\ntests \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u308b\u3068\u3001\u7d50\u5408\u30c6\u30b9\u30c8\u3092\u66f8\u3051\u308b\u3002\n\n\u65b0\u898f\u4f5c\u6210\n$ cargo new test_example6\n$ cd test_example6\n$ mkdir tests\n\n\n\n\u30d5\u30a1\u30a4\u30eb\u69cb\u6210\n$ tree\n|   Cargo.toml\n|\n+---src\n|       lib.rs\n\\---tests\n        lib.rs\n\n\n\nsrc/lib.rs\npub fn square(x: i32) -> i32 {\n  x * x\n}\n\n\n\ntests/lib.rs\nextern crate test_example6; // tests \u306f\u5225\u306e crate \u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067 extern \u304c\u5fc5\u8981\n\nuse test_example6::*; // test_example6:: \u3092\u7701\u7565\u3059\u308b\u305f\u3081 use\n\n#[test]\nfn it_works() {\n  assert_eq!(square(2), 4);\n}\n\n\n\n\u30c6\u30b9\u30c8\n$ cargo test\n\nrunning 1 test\ntest it_works ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n\n\n\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u30c6\u30b9\u30c8\nRust \u306f\u3001//! \u3067\u958b\u59cb\u3059\u308b\u30b3\u30e1\u30f3\u30c8\u3067\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u8aac\u660e\u3092\u3001/// \u3067\u958b\u59cb\u3059\u308b\u30b3\u30e1\u30f3\u30c8\u3067\u95a2\u6570\u306e\u8aac\u660e\u3092\u3001Markdown \u5f62\u5f0f\u3067\u8a18\u8ff0\u3067\u304d\u308b\u3002\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u30c6\u30b9\u30c8\u3067\u3001\u3053\u308c\u3089\u306e\u30b3\u30e1\u30f3\u30c8\u306e\u4e2d\u306b\u542b\u307e\u308c\u308b\u30b3\u30fc\u30c9\u304c\u3001\u305f\u3060\u3057\u304f\u52d5\u4f5c\u3059\u308b\u304b\u30c6\u30b9\u30c8\u3067\u304d\u308b\u3002\n\n\u65b0\u898f\u4f5c\u6210\n$ cargo new test_example5\n\n\n\n\u30d5\u30a1\u30a4\u30eb\u69cb\u6210\n$ tree\n|   Cargo.toml\n|\n\\---src\n        lib.rs\n\n\n\nsrc/lib.rs\n//! This module provides a square function.\n//!\n//! ```\n//! use test_example7::*;\n//!\n//! assert_eq!(square(3), 9);\n//! ```\n\n/// This function return a square of x.\n///\n/// ```\n/// use test_example7::*;\n///\n/// assert_eq!(square(2), 4);\n/// ```\npub fn square(x: i32) -> i32 {\n  x * x\n}\n\n\n\n\u30c6\u30b9\u30c8\n$ cargo test\n\n   Doc-tests test_example7\n\nrunning 2 tests\ntest square_0 ... ok\ntest _0 ... ok\n\ntest result: ok. 2 passed; 0 failed; 0 ignored; 0 measured\n\n\ntest square_0 \u306f\u95a2\u6570\u306e\u30b3\u30e1\u30f3\u30c8\u90e8\u5206\u306e\u30b3\u30fc\u30c9\u306b\u5bfe\u3059\u308b\u30c6\u30b9\u30c8\u3067\u3001test _0 \u306f\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30b3\u30e1\u30f3\u30c8\u90e8\u5206\u306e\u30b3\u30fc\u30c9\u306b\u5bfe\u3059\u308b\u30c6\u30b9\u30c8\u3002\n\u30dd\u30b9\u30c8\u30d5\u30a3\u30c3\u30af\u30b9\u306e _0 \u306f\u9023\u756a\u3067\u3001\u8907\u6570\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3068\u5897\u3048\u3066\u3044\u304f\u3002\n\u3061\u306a\u307f\u306b\n\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\n$ cargo doc\n\n\n\u3067\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u751f\u6210\u3067\u304d\u308b\u3002\n\n\u307e\u3068\u3081\n\n\u5358\u4f53\u30c6\u30b9\u30c8\u306f #[cfg(test)] \u3092\u6307\u5b9a\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u5358\u4f4d\u3067\u8a18\u8ff0\u3059\u308b\u3002\n\u7d71\u5408\u30c6\u30b9\u30c8\u306f tests \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u3063\u3066\u3001\u305d\u306e\u4e2d\u306b\u8a18\u8ff0\u3059\u308b\u3002\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u66f8\u304d\u306b\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u30c6\u30b9\u30c8\u3092\u4f7f\u304a\u3046\u3002\n\n# \u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\n\n\u3044\u308f\u3086\u308b `assert`\u3002\n\n```bash:\u65b0\u898f\u4f5c\u6210\n$ cargo new test_example1 --bin\n```\n\n```bash:\u30d5\u30a1\u30a4\u30eb\u69cb\u6210\n$ tree\n|   Cargo.toml\n|\n\\---src\n        main.rs\n```\n\n```rust:src/main.rs\nfn main() {\n  let x = 1;\n  let y = 2;\n\n  debug_assert!(x <= y, \"{} > {}\", x, y);\n  debug_assert_eq!(x, y);\n\n  assert!(x <= y, \"{} != {}\", x, y);\n  assert_eq!(x, y);\n}\n```\n\n```bash:\u30c7\u30d0\u30c3\u30b0\u5b9f\u884c\n$ cd test_example1\n$ cargo run\nthread '<main>' panicked at 'assertion failed: `(left == right)` (left: `1`, right: `2`)', src\\main.rs:6\nAn unknown error occurred\n```\n\n```bash:\u30ea\u30ea\u30fc\u30b9\u5b9f\u884c\n$ cargo run --release\nthread '<main>' panicked at 'assertion failed: `(left == right)` (left: `1`, right: `2`)', src\\main.rs:9\nAn unknown error occurred\n```\n\n## `assert!` \u30de\u30af\u30ed\n\u7b2c\u4e00\u5f15\u6570\u304c\u6761\u4ef6\u3067\u3001\u7b2c\u4e8c\u6570\u4ee5\u964d\u306f\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u6642\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u8868\u793a\u7528\u3001`println!` \u3068\u540c\u3058\u3088\u3046\u306b\u51fa\u529b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u6307\u5b9a\u3067\u304d\u308b\u3002\n\n\u6761\u4ef6\u304c `false` \u3060\u3068\u3001\u6307\u5b9a\u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092 `panic!` (\u56de\u5fa9\u4e0d\u80fd\u306a\u30a8\u30e9\u30fc\u3068\u3057\u3066\u3001\u6307\u5b9a\u3055\u308c\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u51fa\u529b\u3068\u3068\u3082\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3059\u308b) \u306b\u6e21\u3059\u3002\n\n## `assert_eq!` \u30de\u30af\u30ed\n\n\u540c\u5024\u6761\u4ef6\u5c02\u7528\u306e `assert!`\u3002\n\n```rust\nassert_eq!(a, b)\n```\n\n\u306f\n\n```rust\nassert!(a == b, \"assertion failed: `(left == right)` (left: `{:?}`, right: `{:?}`)\", a, b);\n```\n\n\u3068\u8a18\u8ff0\u3057\u3066\u3044\u308b\u306e\u3068\u304a\u306a\u3058\u3002\n\n## `debug_assert!` \u30de\u30af\u30ed\n\n\u30ea\u30ea\u30fc\u30b9\u30d3\u30eb\u30c9\u6642\u306b\u7121\u52b9\u5316\u3055\u308c\u308b `assert!`\u3002\n\n## `debug_assert_eq!` \u30de\u30af\u30ed\n\n\u30ea\u30ea\u30fc\u30b9\u30d3\u30eb\u30c9\u6642\u306b\u7121\u52b9\u5316\u3055\u308c\u308b `assert_eq!`\u3002\n\n# \u30c6\u30b9\u30c8\n\n## `#[test]`\n\n\u95a2\u6570\u306b `test` \u5c5e\u6027\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u30c6\u30b9\u30c8\u3068\u3057\u3066\u8a8d\u8b58\u3055\u308c\u308b\u3002\n\n```bash:\u65b0\u898f\u4f5c\u6210\n$ cargo new test_example2\n```\n\n```bash:\u30d5\u30a1\u30a4\u30eb\u69cb\u6210\n$ tree\n|   Cargo.toml\n|\n\\---src\n        lib.rs\n```\n\n```rust:src/lib.rs\n#[test] // test \u5c5e\u6027\nfn it_works() {\n  assert!(false, \"always false\"); // \u5fc5\u305a\u5931\u6557\u3059\u308b\n}\n\n#[test] // test \u5c5e\u6027\nfn it_works2() {\n  assert!(true, \"always true\"); // \u5fc5\u305a\u6210\u529f\u3059\u308b\n}\n```\n\n`test` \u5c5e\u6027\u306e\u3064\u3044\u305f\u95a2\u6570\u306e\u4e2d\u3067 `panic!` \u304c\u8d77\u3053\u308b\u3068\u3001\u30c6\u30b9\u30c8\u306b\u5931\u6557\u3057\u305f\u3082\u306e\u3068\u3057\u3066\u6271\u308f\u308c\u308b\u3002\n\n```bash:\u30c6\u30b9\u30c8\n$ cargo test\n\nrunning 2 tests\ntest it_works2 ... ok\ntest it_works ... FAILED\n\nfailures:\n\n---- it_works stdout ----\n        thread 'it_works' panicked at 'always false', src\\lib.rs:3\n\nfailures:\n    it_works\n\ntest result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured\n```\n\n`cargo test` \u3067 `test` \u5c5e\u6027\u306e\u3064\u3044\u305f\u95a2\u6570\u304c\u5b9f\u884c\u3055\u308c\u308b\u3002\n\n## `#[should_panic]`\n\n`should_panic` \u5c5e\u6027\u3092\u4ed8\u3051\u308b\u3068\u3001\u5fc5\u305a\u5931\u6557\u3059\u308b\u3053\u3068\u3092\u30c6\u30b9\u30c8\u3067\u304d\u308b\u3002\n\n```bash:\u65b0\u898f\u4f5c\u6210\n$ cargo new test_example3\n```\n\n```bash:\u30d5\u30a1\u30a4\u30eb\u69cb\u6210\n$ tree\n|   Cargo.toml\n|\n\\---src\n        lib.rs\n```\n\n```rust:src/lib.rs\n#[test]\n#[should_panic(expected = \"always false\")] // should_panic \u5c5e\u6027\nfn it_works() {\n  assert!(false, \"always false\"); // \u3053\u3053\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092 expected \u306b\u6307\u5b9a\u3059\u308b\n}\n\n#[test]\nfn it_works2() {\n  assert!(true, \"always true\");\n}\n```\n\n\u610f\u56f3\u3057\u306a\u3044\u539f\u56e0\u3067 `panic!` \u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u3066\u306f\u3001\u305f\u3060\u3057\u304f\u30c6\u30b9\u30c8\u3067\u304d\u3066\u3044\u308b\u3068\u306f\u8a00\u3048\u306a\u3044\u3002\n\u305d\u3053\u3067 `should_panic` \u306b `expected` \u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\u3002\u3053\u3053\u306b\u6307\u5b9a\u3057\u3066\u3042\u308b\u6587\u5b57\u5217\u304c `panic!` \u306e\u51fa\u529b\u306b\u542b\u307e\u308c\u3066\u3044\u308c\u3070\u3001\u305f\u3060\u3057\u304f\u5931\u6557\u3057\u3066\u3044\u308b\u3068\u5224\u65ad\u3057\u3066\u3044\u308b\u3002\n\n```bash:\u30c6\u30b9\u30c8\n$ cargo test\n\nrunning 2 tests\ntest it_works2 ... ok\ntest it_works ... ok\n\ntest result: ok. 2 passed; 0 failed; 0 ignored; 0 measured\n\n   Doc-tests test_example3\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured\n```\n\n\u901a\u5e38\u306e\u30c6\u30b9\u30c8\u306e\u3042\u3068\u306b `Doc-tests` \u3068\u3044\u3046\u3082\u306e\u3082\u8d70\u3063\u3066\u3044\u308b\u3051\u3069\u3001\u3053\u308c\u306b\u3064\u3044\u3066\u306f\u5f8c\u8ff0\u3059\u308b\u3002\n\n## `#[ignore]`\n\n\u5e38\u306b\u3059\u3079\u3066\u306e\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3068\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u3067\u3001\u7701\u7565\u53ef\u80fd\u306a\u30c6\u30b9\u30c8\u3092 `ignore` \u5c5e\u6027\u3067\u6307\u5b9a\u3067\u304d\u308b\u3002\n\n```bash:\u65b0\u898f\u4f5c\u6210\n$ cargo new test_example4\n```\n\n```bash:\u30d5\u30a1\u30a4\u30eb\u69cb\u6210\n$ tree\n|   Cargo.toml\n|\n\\---src\n        lib.rs\n```\n\n```rust:src/lib.rs\n#[test]\n#[should_panic(expected = \"always false\")]\nfn it_works() {\n  assert!(false, \"always false\");\n}\n\n#[test]\n#[ignore] // ignore \u5c5e\u6027\nfn it_works2() {\n  assert!(true, \"always true\");\n}\n```\n\n```bash:\u30c6\u30b9\u30c8\n$ cargo test\n\nrunning 2 tests\ntest it_works2 ... ignored\ntest it_works ... ok\n\ntest result: ok. 1 passed; 0 failed; 1 ignored; 0 measured\n```\n\n```bash:\u30c6\u30b9\u30c8(ignored)\n$ cargo test -- --ignored\n\nrunning 1 test\ntest it_works2 ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n```\n\n`cargo test` \u306b `--` \u304c\u3064\u3044\u3066\u3044\u308b\u306e\u306f\u30df\u30b9\u3067\u306f\u306a\u304f\u3066\u3001`--ignore` \u304c `cargo` \u306b\u3067\u306f\u306a\u304f\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3078\u306e\u5f15\u6570\u306e\u305f\u3081\u3002\n\n## \u30c6\u30b9\u30c8\u30e2\u30b8\u30e5\u30fc\u30eb\n\n\u30c6\u30b9\u30c8\u306e\u3068\u304d\u3060\u3051\u30d3\u30eb\u30c9\u3055\u308c\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f5c\u308b\u3002\n\n```bash:\u65b0\u898f\u4f5c\u6210\n$ cargo new test_example5\n```\n\n```bash:\u30d5\u30a1\u30a4\u30eb\u69cb\u6210\n$ tree\n|   Cargo.toml\n|\n\\---src\n        lib.rs\n```\n\n```rust:src/lib.rs\npub fn square(x: i32) -> i32 {\n  x * x\n}\n\n#[cfg(test)]\nmod tests {\n  use super::*; // \u5916\u306e\u5b9a\u7fa9\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081 use\n\n  // \u3075\u3064\u3046\u306b\u30c6\u30b9\u30c8\u3092\u66f8\u304f\n  #[test]\n  fn it_works() {\n    assert_eq!(square(2), 4);\n  }\n}\n```\n\n`#[cfg(test)]` \u3067 `test` \u306e\u3068\u304d\u3060\u3051\u30d3\u30eb\u30c9\u3055\u308c\u308b (`cfg` \u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3067\u304d\u308b)\u3002\n\n```bash:\u30c6\u30b9\u30c8\n$ cargo test\n\nrunning 1 test\ntest tests::it_works ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n```\n\n\u3053\u308c\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u5358\u4f4d\u306e\u5358\u4f53\u30c6\u30b9\u30c8\u3092\u8a18\u8ff0\u3059\u308b\u3068\u304d\u306e\u66f8\u304d\u65b9\u3002\n\n## `tests` \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n\n`tests` \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u308b\u3068\u3001\u7d50\u5408\u30c6\u30b9\u30c8\u3092\u66f8\u3051\u308b\u3002\n\n```bash:\u65b0\u898f\u4f5c\u6210\n$ cargo new test_example6\n$ cd test_example6\n$ mkdir tests\n```\n\n```bash:\u30d5\u30a1\u30a4\u30eb\u69cb\u6210\n$ tree\n|   Cargo.toml\n|\n+---src\n|       lib.rs\n\\---tests\n        lib.rs\n```\n\n```rust:src/lib.rs\npub fn square(x: i32) -> i32 {\n  x * x\n}\n```\n\n```rust:tests/lib.rs\nextern crate test_example6; // tests \u306f\u5225\u306e crate \u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067 extern \u304c\u5fc5\u8981\n\nuse test_example6::*; // test_example6:: \u3092\u7701\u7565\u3059\u308b\u305f\u3081 use\n\n#[test]\nfn it_works() {\n  assert_eq!(square(2), 4);\n}\n```\n\n```bash:\u30c6\u30b9\u30c8\n$ cargo test\n\nrunning 1 test\ntest it_works ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n```\n\n## \u30c9\u30ad\u30e5\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u30c6\u30b9\u30c8\n\n`Rust` \u306f\u3001`//!` \u3067\u958b\u59cb\u3059\u308b\u30b3\u30e1\u30f3\u30c8\u3067\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u8aac\u660e\u3092\u3001`///` \u3067\u958b\u59cb\u3059\u308b\u30b3\u30e1\u30f3\u30c8\u3067\u95a2\u6570\u306e\u8aac\u660e\u3092\u3001`Markdown` \u5f62\u5f0f\u3067\u8a18\u8ff0\u3067\u304d\u308b\u3002\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u30c6\u30b9\u30c8\u3067\u3001\u3053\u308c\u3089\u306e\u30b3\u30e1\u30f3\u30c8\u306e\u4e2d\u306b\u542b\u307e\u308c\u308b\u30b3\u30fc\u30c9\u304c\u3001\u305f\u3060\u3057\u304f\u52d5\u4f5c\u3059\u308b\u304b\u30c6\u30b9\u30c8\u3067\u304d\u308b\u3002\n\n\n```bash:\u65b0\u898f\u4f5c\u6210\n$ cargo new test_example5\n```\n\n```bash:\u30d5\u30a1\u30a4\u30eb\u69cb\u6210\n$ tree\n|   Cargo.toml\n|\n\\---src\n        lib.rs\n```\n\n```rust:src/lib.rs\n//! This module provides a square function.\n//!\n//! ```\n//! use test_example7::*;\n//!\n//! assert_eq!(square(3), 9);\n//! ```\n\n/// This function return a square of x.\n///\n/// ```\n/// use test_example7::*;\n///\n/// assert_eq!(square(2), 4);\n/// ```\npub fn square(x: i32) -> i32 {\n  x * x\n}\n```\n\n```bash:\u30c6\u30b9\u30c8\n$ cargo test\n\n   Doc-tests test_example7\n\nrunning 2 tests\ntest square_0 ... ok\ntest _0 ... ok\n\ntest result: ok. 2 passed; 0 failed; 0 ignored; 0 measured\n```\n\n`test square_0` \u306f\u95a2\u6570\u306e\u30b3\u30e1\u30f3\u30c8\u90e8\u5206\u306e\u30b3\u30fc\u30c9\u306b\u5bfe\u3059\u308b\u30c6\u30b9\u30c8\u3067\u3001`test _0` \u306f\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30b3\u30e1\u30f3\u30c8\u90e8\u5206\u306e\u30b3\u30fc\u30c9\u306b\u5bfe\u3059\u308b\u30c6\u30b9\u30c8\u3002\n\u30dd\u30b9\u30c8\u30d5\u30a3\u30c3\u30af\u30b9\u306e `_0` \u306f\u9023\u756a\u3067\u3001\u8907\u6570\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3068\u5897\u3048\u3066\u3044\u304f\u3002\n\n\u3061\u306a\u307f\u306b\n\n```bash:\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\n$ cargo doc\n```\n\n\u3067\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u751f\u6210\u3067\u304d\u308b\u3002\n\n# \u307e\u3068\u3081\n\n* \u5358\u4f53\u30c6\u30b9\u30c8\u306f `#[cfg(test)]` \u3092\u6307\u5b9a\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u5358\u4f4d\u3067\u8a18\u8ff0\u3059\u308b\u3002\n* \u7d71\u5408\u30c6\u30b9\u30c8\u306f `tests` \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u3063\u3066\u3001\u305d\u306e\u4e2d\u306b\u8a18\u8ff0\u3059\u308b\u3002\n* \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u66f8\u304d\u306b\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u30c6\u30b9\u30c8\u3092\u4f7f\u304a\u3046\u3002\n"}