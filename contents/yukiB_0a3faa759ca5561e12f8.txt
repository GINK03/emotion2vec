{"context": "\n\n\u306f\u3058\u3081\u306b\n\u3053\u306e\u8a18\u4e8b\u306f\u3044\u307e\u3055\u3089\u306a\u304c\u3089\u306b\u5f37\u5316\u5b66\u7fd2(DQN)\u306e\u5b9f\u88c5\u3092Keras\u3092\u4f7f\u3063\u3066\u9032\u3081\u3064\u3064\uff0c\u76ee\u7684\u95a2\u6570\u306e\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3084optimizer\u306e\u8ffd\u52a0\uff0c\u8907\u6570\u5165\u529b\u306a\u3069\uff0c\u3061\u3087\u3063\u3068\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u624b\u3092\u52a0\u3048\u3088\u3046\u3068\u3057\u305f\u6642\u306b\u30cf\u30de\u3063\u305f\u70b9\u3092\u5099\u5fd8\u9332\u3068\u3057\u3066\u6b8b\u3057\u305f\u3082\u306e\u3067\u3059\uff0e\u305d\u306e\u305f\u3081\uff0cDQN\u306e\u89e3\u8aac\u8a18\u4e8b\u3068\u3044\u3046\u3088\u308a\u3082\u521d\u5fc3\u8005\u5411\u3051KerasTips\u306b\u306a\u308a\u307e\u3059\uff0e\n\n\u5b9f\u884c\u74b0\u5883\nPython3.5.2\nKeras 1.2.1\ntensorflow 0.12.1\n\nDQN\u3068\u306f\nDQN(DeepQNetwork)\u304cDeepMind\u304b\u3089\u767a\u8868\u3055\u308c\u30662\u5e74\u4ee5\u4e0a\u7d4c\u3064\u306e\u3067\uff0c\u3082\u306f\u3084\u3044\u305f\u308b\u6240\u306b\u89e3\u8aac\u8a18\u4e8b\u3084\u5b9f\u88c5\u30b5\u30f3\u30d7\u30eb\u304c\u3042\u308a\uff0c\u3053\u3053\u3067\u306e\u8a73\u3057\u3044\u89e3\u8aac\u306f\u4e0d\u8981\u3060\u3068\u601d\u3044\u307e\u3059\uff0e\u304c\uff0c\u3056\u3063\u304f\u308a\u8a00\u3046\u3068\uff0cQ-Learning\u3068\u3044\u3046\u5f37\u5316\u5b66\u7fd2\u624b\u6cd5\u306eQ\u95a2\u6570\u90e8\u5206\u3092\uff0c\u6df1\u5c64\u5b66\u7fd2\u306b\u3088\u308a\u8fd1\u4f3c\u3059\u308b\u3053\u3068\u3067\u3001\u52d5\u753b\u50cf\u304b\u3089\u76f4\u63a5Q\u5024\u3092\u63a8\u5b9a\u3059\u308b\u3053\u3068\u3092\u53ef\u80fd\u306b\u3057\u305f\u5b66\u7fd2\u624b\u6cd5\u3067\u3059\uff0e\nDQN\u306e\u7406\u8ad6\u3068\u3057\u3066\u306f\n\n\u30bc\u30ed\u304b\u3089Deep\u307e\u3067\u5b66\u3076\u5f37\u5316\u5b66\u7fd2\nPython\u3067\u306f\u3058\u3081\u308b\u5f37\u5316\u5b66\u7fd2\n\u5168\u529b\u3067\u4eba\u5de5\u77e5\u80fd\u306b\u5bfe\u6c7a\u3092\u6311\u3093\u3067\u307f\u305f (\u7406\u8ad6\u7de8)[\u30cb\u30b3\u30cb\u30b3\u52d5\u753b]\nDQN\u306e\u751f\u3044\u7acb\u3061\u3000\uff0b\u3000Deep Q-Network\u3092Chainer\u3067\u66f8\u3044\u305f\n\n\u3042\u305f\u308a\u306e\u89e3\u8aac\u8a18\u4e8b\u304c\u975e\u5e38\u306b\u4e01\u5be7\u3067\u308f\u304b\u308a\u3084\u3059\u3044\u306e\u3067\u662f\u975e\u305d\u3061\u3089\u3092\u3054\u3089\u3093\u304f\u3060\u3055\u3044\uff0e\n\u4ed6\u306e\u6df1\u5c64\u5b66\u7fd2\u7814\u7a76\u3068\u540c\u69d8\uff0e\u5f37\u5316\u5b66\u7fd2\u3082\u3053\u3053\u6570\u5e74\u3067\u4e00\u6c17\u306b\u7814\u7a76\u304c\u9032\u307f\uff0c2013\u5e74\u767a\u8868\u306eDQN\u306f\u6700\u65b0\u624b\u6cd5\u3068\u306f\u8a00\u3048\u307e\u305b\u3093\u304c\uff0c\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u30b7\u30f3\u30d7\u30eb\u3067\u308f\u304b\u308a\u3084\u3059\u304f\uff0c\u5b9f\u88c5\u3057\u3084\u3059\u3044\u306e\u3067\u4eca\u56de\u306f\u3053\u3061\u3089\u3092\u6271\u3044\u307e\u3059\uff0e\n\nKeras\u3068\u306f\nKeras\u306fTheano\uff0cTensorFlow\u30d9\u30fc\u30b9\u306e\u6df1\u5c64\u5b66\u7fd2\u30e9\u30c3\u30d1\u30fc\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\uff0eTheano\uff0cTensorFlow\u306e\u304a\u304b\u3052\u3067\u3060\u3044\u3076\u6df1\u5c64\u5b66\u7fd2\u306b\u3068\u3063\u3064\u304d\u3084\u3059\u304f\u306a\u3063\u3066\u304d\u305f\u3082\u306e\u306e\uff0c\u307e\u3060\u307e\u3060\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u30ac\u30ea\u30ac\u30ea\u66f8\u3044\u3066\u3044\u304f\u306e\u304c\u5927\u5909\uff0e\u3068\u3044\u3046\u3053\u3068\u3067\uff0c\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u9020\u3092\u304b\u306a\u308a\u30b7\u30f3\u30d7\u30eb\u306b\u66f8\u3051\u308b\u3088\u3046\u306b\u3057\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u304cKeras\u3067\u3059\uff0e\u79c1\u306e\u3088\u3046\u306a\u6a5f\u68b0\u5b66\u7fd2\u521d\u5fc3\u8005\u306b\u3082\u6bd4\u8f03\u7684\u7c21\u5358\u306b\u30b3\u30fc\u30c9\u3092\u7d44\u3081\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff0eKeras\u3092\u59cb\u3081\u3066\u89e6\u308b\u3068\u3044\u3046\u65b9\u306f\uff0c\u57fa\u672c\u7684\u306a\u90e8\u5206\u3092\u4ee5\u524d\u6df1\u5c64\u5b66\u7fd2\u30e9\u30a4\u30d6\u30e9\u30eaKeras\u3067RNN\u3092\u4f7f\u3063\u3066sin\u6ce2\u4e88\u6e2c\u3068\u3044\u3046\u8a18\u4e8b\u3067\u66f8\u3044\u305f\u306e\u3067\uff0c\u3088\u308d\u3057\u3051\u308c\u3070\u305d\u3061\u3089\u3092\u3054\u3089\u3093\u304f\u3060\u3055\u3044\uff0e\n\nKeras(Tensorflow)\u3067\u306eDQN\u5b9f\u88c5\nKeras\u3084Tensorflow\u3067\u306eDQN\u5b9f\u88c5\u89e3\u8aac\u8a18\u4e8b\u3082\u6570\u591a\u51fa\u3066\u3044\u307e\u3059\uff0e\n\n\u3044\u307e\u3055\u3089\u3060\u3051\u3069Tensorflow\u3067DQN\uff08\u5b8c\u5168\u7248\uff09\u3092\u5b9f\u88c5\u3059\u308b\nTensorFlow\u3067DQN \uff0d\u7bb1\u5ead\u306e\u4eba\u5de5\u77e5\u80fd\u866b\u30fc\nDQN\u3092Keras\u3068TensorFlow\u3068OpenAI Gym\u3067\u5b9f\u88c5\u3059\u308b\n\u8d85\u30b7\u30f3\u30d7\u30eb\u306bTensorFlow\u3067DQN (Deep Q Network) \u3092\u5b9f\u88c5\u3057\u3066\u307f\u308b \u301c\u5c0e\u5165\u7de8\u301c\nKeras+DQN\u3067\u30ea\u30d0\u30fc\u30b7\u306eAI\u66f8\u304f\nDQN\u30d7\u30cb\u30ad\u306b\u30db\u30fc\u30e0\u30e9\u30f3\u3092\u6253\u305f\u305b\u305f\u3044\n\n\u306e\u3067\uff0cKeras\u306b\u3064\u3044\u3066\u308f\u304b\u3063\u3066\u3044\u3066\uff0cDQN\u5b9f\u88c5\u304c\u898b\u305f\u3044\u3068\u3044\u3046\u65b9\u306f\u4e0a\u306e\u8a18\u4e8b\u3092\u3054\u89a7\u3044\u305f\u3060\u3044\u305f\u65b9\u304c\u3044\u3044\u304b\u3068\u304a\u3082\u3044\u307e\u3059\uff0e\n\u307e\u305f\uff0c\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u5b9f\u88c5\u306f\u304a\u3044\u3068\u3044\u3066\uff0c\u3055\u3063\u3055\u3068Keras\u3067\u5f37\u5316\u5b66\u7fd2\u8a66\u3057\u305f\u3044\u3093\u3058\u3083\uff01\u3068\u3044\u3046\u65b9\u306f\uff0ckeras-rl\u3068\u3044\u3046\u5f37\u5316\u5b66\u7fd2\u7279\u5316keras\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308b\u306e\u3067\u305d\u3061\u3089\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\uff0e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u306f\n[Python] Keras-RL\u3067\u7c21\u5358\u306b\u5f37\u5316\u5b66\u7fd2(DQN)\u3092\u8a66\u3059\n\u306e\u8a18\u4e8b\u304c\u53c2\u8003\u306b\u306a\u308b\u304b\u3068\u601d\u3044\u307e\u3059\uff0e\n\n\u8d85\u30b7\u30f3\u30d7\u30eb\u306bKeras\u3067DQN\u3092\u5b9f\u88c5\u3057\u3066\u307f\u308b\n\u9577\u3005\u3068\u524d\u7f6e\u304d\u3092\u3057\u307e\u3057\u305f\u304c\u672c\u984c\u3067\u3059\uff0e\n\u4eca\u56de\u306fKeras\u306b\u6163\u308c\u308b\u3068\u3044\u3046\u3053\u3068\u3067\uff0c\u3082\u3068\u3082\u3068Tensorflow\u7b49\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3092\u6539\u5909\u3059\u308b\u307b\u3046\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u3068\u601d\u3044\uff0c\u3059\u3067\u306bTensorflow\u3067\u5b9f\u88c5\u30fb\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3092\u4f7f\u308f\u305b\u3066\u3044\u305f\u3060\u304f\u3053\u3068\u306b\u3057\u307e\u3059\uff0e\n\u7ae0\u984c\u3082\u305d\u306e\u307e\u307e\u3067\u3059\u304c\uff0cALGO GEEKS\u69d8\u306e\u8d85\u30b7\u30f3\u30d7\u30eb\u306bTensorFlow\u3067DQN (Deep Q Network) \u3092\u5b9f\u88c5\u3057\u3066\u307f\u308b \u301c\u5c0e\u5165\u7de8\u301c\u3067\u3042\u3052\u3066\u9802\u3044\u3066\u3044\u308b\u30b3\u30fc\u30c9\u3092\u62dd\u501f\u3057\u307e\u3059\uff0e\u975e\u5e38\u306b\u30b3\u30f3\u30d1\u30af\u30c8\u304b\u3064\u5206\u304b\u308a\u3084\u3059\u3044\u5b9f\u88c5\u306b\u306a\u3063\u3066\u304a\u308a\uff0c\u5b66\u7fd2\u6642\u9593\u3082\u77ed\u304f\u3059\u3050\u7d50\u679c\u304c\u898b\u3089\u308c\u308b\u826f\u30b5\u30f3\u30d7\u30eb\u306e\u305f\u3081\uff0c\u3053\u3061\u3089\u3092Keras\u306b\u30b3\u30f3\u30d0\u30fc\u30c8\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\u4eca\u56de\u5b9f\u88c5\u3057\u305f\u30b3\u30fc\u30c9\u306fgithub\u306b\u3042\u3052\u307e\u3057\u305f\uff0e\n\n\u30b2\u30fc\u30e0\n\n(1000epoch\u56de\u3057\u305f\u3042\u3068\u306e\u69d8\u5b50)\n\u5b66\u7fd2\u74b0\u5883\u306f\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u3067\uff0c\u56f3\u306e\u3088\u3046\u306b8x8\u306e\u30de\u30b9\u306e\u306a\u304b\u3067\uff0c\u6b21\u3005\u306b\u843d\u3061\u3066\u304f\u308b\u30dc\u30fc\u30eb\u3092\u6700\u4e0b\u6bb5\u306e\u30d0\u30fc\u3067\u30ad\u30e3\u30c3\u30c1\u3059\u308b\u3068\u3044\u3046\u30b2\u30fc\u30e0\u3067\u3059\uff0e\u4eca\u56de\u5b9f\u88c5\u3059\u308b\u306b\u3042\u305f\u308a\uff0c\u672c\u5bb6\u30b5\u30a4\u30c8\u69d8\u3068\u30eb\u30fc\u30eb\u3092\u82e5\u5e72\u5909\u3048\u3066\u304a\u308a\uff0c\n\n\u30dc\u30fc\u30eb\u3092\u30ad\u30e3\u30c3\u30c1\u3057\u305f\u3089+1\u5831\u916c\n\u30dc\u30fc\u30eb\u3092\u843d\u3068\u3057\u305f\u3089-1\u5831\u916c\n\u30a2\u30af\u30b7\u30e7\u30f3\u306f(1:\u53f3\u306b\u52d5\u304f\uff0c0:\u52d5\u304b\u306a\u3044\uff0c-1:\u5de6\u306b\u52d5\u304f)\u306e\u4e09\u7a2e\u985e\n\u30dc\u30fc\u30eb\u306e\u843d\u3061\u308b\u5834\u6240\u306f\u30e9\u30f3\u30c0\u30e0\uff0c\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb\u306f4\u30d5\u30ec\u30fc\u30e0\n\u30dc\u30fc\u30eb\u3092\u30ad\u30e3\u30c3\u30c1\u3059\u308b\u3068Score+1\n\u30dc\u30fc\u30eb\u3092\u843d\u3068\u3057\u305f\u6642\u70b9\u3067\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\n\n\u3068\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\n\u66f8\u304d\u63db\u3048\ntensorflow\u3067\u306f\n\n# input layer (8 x 8)\nself.x = tf.placeholder(tf.float32, [None, 8, 8])\n\n# flatten (64)\nx_flat = tf.reshape(self.x, [-1, 64])\n\n# fully connected layer (32)\nW_fc1 = tf.Variable(tf.truncated_normal([64, 64], stddev=0.01))\nb_fc1 = tf.Variable(tf.zeros([64]))\nh_fc1 = tf.nn.relu(tf.matmul(x_flat, W_fc1) + b_fc1)\n\n# output layer (n_actions)\nW_out = tf.Variable(tf.truncated_normal([64, self.n_actions], stddev=0.01))\nb_out = tf.Variable(tf.zeros([self.n_actions]))\nself.y = tf.matmul(h_fc1, W_out) + b_out\n\n# loss function\nself.y_ = tf.placeholder(tf.float32, [None, self.n_actions])\nself.loss = tf.reduce_mean(tf.square(self.y_ - self.y))\n\n# train operation\noptimizer = tf.train.RMSPropOptimizer(self.learning_rate)\nself.training = optimizer.minimize(self.loss)\n\n# saver\nself.saver = tf.train.Saver()\n\n# session\nself.sess = tf.Session()\nself.sess.run(tf.global_variables_initializer())\n\n\u3068\u306a\u3063\u3066\u3044\u307e\u3057\u305f\uff0e\n\n\u672c\u6765\u306eDQN\u3067\u306fConv\u5c64\u3092\uff13\u5c64\u631f\u3093\u3060\u3042\u3068\uff0c\u5168\u7d50\u5408\u3057\u3066Relu\u3092\u5f53\u3066\u3066\u3044\u308b\u306e\u3067\u3059\u304c\uff0c\u4eca\u56de\u306f\u305d\u3082\u305d\u30828x8\u3068\u753b\u7d20\u6570\u304c\u5c0f\u3055\u3044\u3067\u3059\u3057\uff0cConv\u5c64\u306f\u5b66\u7fd2\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u3067\u3053\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u304b\u3068\u601d\u3044\u307e\u3059\uff0e\u3053\u3061\u3089\u3092Keras\u3067\u66f8\u304d\u76f4\u3059\u3068\nself.model = Sequential()\nself.model.add(InputLayer(input_shape=(8, 8)))\nself.model.add(Flatten())\nself.model.add(Dense(32, activation='relu'))\nself.model.add(Dense(self.n_actions))\n\noptimizer=RMSprop(lr=self.learning_rate)\nself.model.compile(loss='mean_squared_error',\n                   optimizer=optimizer,\n                   metrics=['accuracy'])\n\n\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\nKeras\u306e\u4e00\u756a\u306e\u9b45\u529b\u306f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u7d44\u3080\u30b3\u30fc\u30c9\u304c\u304b\u306a\u308a\u30b7\u30f3\u30d7\u30eb\u306b\u306a\u308b\u3068\u3053\u308d\u3067\u3059\uff0e\n\u3053\u308c\u30678x8\u306e\u30b2\u30fc\u30e0\u753b\u9762\u30d4\u30af\u30bb\u30eb\u3092\u5165\u529b\u3059\u308b\u3068\u30a2\u30af\u30b7\u30e7\u30f3\u305d\u308c\u305e\u308c\u306b\u5fdc\u3058\u305f3\u3064\u306eQ\u5024\u304c\u51fa\u529b\u3055\u308c\u308b\u30e2\u30c7\u30eb\u304c\u3067\u304d\u307e\u3057\u305f\uff0e\nQ\u5024\u53d6\u5f97\u306fpredict\u95a2\u6570\u3092\u4f7f\u3063\u3066\ndef Q_values(self, states):\n    res = self.model.predict(np.array([states]))\n    return res[0]\n\n\u3067\u3044\u3044\u3067\u3059\u3057\uff0cexperience memory\u306e\u90e8\u5206\u306f\uff0c\n# training\nself.model.fit(np.array(state_minibatch), np.array(y_minibatch), batch_size=minibatch_size,nb_epoch=1,verbose=0)\n\n\u3068\u306a\u308a\u307e\u3059\uff0e\u30e2\u30c7\u30eb\u306esave, load\u306f\ndef load_model(self, model_path=None):\n\n    yaml_string = open(os.path.join(f_model, model_filename)).read()\n    self.model = model_from_yaml(yaml_string)\n    self.model.load_weights(os.path.join(f_model, weights_filename))\n\n    self.model.compile(loss='mean_squared_error',\n                       optimizer=RMSProp(lr=self.learning_rate),\n                       metrics=['accuracy'])\n\ndef save_model(self, num=None):\n    yaml_string = self.model.to_yaml()\n    model_name = 'dqn_model{0}.yaml'.format((str(num) if num else ''))\n    weight_name = 'dqn_model_weights{0}.hdf5'.format((str(num) if num else ''))\n    open(os.path.join(f_model, model_name), 'w').write(yaml_string)\n    self.model.save_weights(os.path.join(f_model, weight_name))\n\n\n\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\u30b3\u30f3\u30d1\u30af\u30c8\u3067\u3059\uff0e\n\u3053\u306e\u5b9f\u88c5\u306f\u308f\u304b\u308a\u3084\u3059\u3055\uff0c\u30b3\u30f3\u30d1\u30af\u30c8\u3055\u306b\u91cd\u304d\u3092\u7f6e\u3044\u305f\u3082\u306e\u306b\u306a\u3063\u3066\u3044\u305f\u305f\u3081\uff0c\u672c\u6765\u306eDQN\u3068\u306f\u7570\u306a\u308b\u70b9\u304c\u3044\u304f\u3064\u304b\u3042\u308a\u307e\u3059\uff0e\n\ntarget network\u304c\u306a\u3044\nloss\u95a2\u6570\u3067\u30af\u30ea\u30c3\u30d4\u30f3\u30b0\u3092\u3057\u3066\u3044\u306a\u3044\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u7573\u307f\u8fbc\u307f\u3092\u4f7f\u3063\u3066\u3044\u306a\u3044\noptimizer\u3068\u3057\u3066\u901a\u5e38\u306eRMSProp\u3092\u4f7f\u3063\u3066\u304a\u308a\uff0cDQN\u3067\u63a8\u5968\u3055\u308c\u3066\u3044\u308bRMSPropGraves\u3067\u306f\u306a\u3044\n(replay memory\u3092\u6e80\u5e06\u306b\u3057\u3066\u304b\u3089\u5b66\u7fd2\u958b\u59cb)\n(Q\u5024\u306b\u95a2\u4fc2\u306a\u304frandom\u306b\u884c\u52d5\u9078\u629e\u3059\u308b\u5272\u5408\u30921\u304b\u3089\u7dda\u5f62\u306b\u964d\u4e0b\u3055\u305b\u3066\u3044\u304f)\n\n\u4eca\u56de\u306f\u3053\u308c\u3089\u306e\u70b9\u306b\u3042\u305f\u308a\u3064\u3064\uff0cKeras\u3067\u5b9f\u88c5\u3057\u3066\u3044\u304f\u969b\u306b\u3064\u307e\u3063\u305f\u30dd\u30a4\u30f3\u30c8\u3092\u8ff0\u3079\u3066\u3044\u304d\u307e\u3059\uff0e\n\nTips1: \u30e2\u30c7\u30eb\u306e\u30b3\u30d4\u30fc\nDQN\u3067\u306f\uff0c\u9078\u629e\u3057\u305faction\u3092\u904e\u5927\u8a55\u4fa1\u3057\u306a\u3044\u3088\u3046\uff0cexperience memory\u3092\u884c\u3046(\u884c\u52d5\u3092\u8a55\u4fa1\u3059\u308b)\u969b\u3068\uff0c\u884c\u52d5\u9078\u629e\u3092\u9078\u629e\u3059\u308b\u969b\u3067\u4f7f\u3046\u30e2\u30c7\u30eb\u3092\u5206\u3051\u308b\u3068\u3044\u3046\u65b9\u7b56\u304c\u3068\u3089\u308c\u3066\u3044\u307e\u3059\uff0e\u5143\u3005\u306e\u8ad6\u6587[1]\u3067\u306f\u4e21\u8005\u3067\u540c\u3058\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u3066\u304a\u308a\uff0cnature\u306b\u63b2\u8f09\u3055\u308c\u305f2015\u5e74\u306e\u8ad6\u6587[2]\u3067\u306f\uff0c\u4e21\u8005\u3092\u5206\u3051\u3066\u65b0\u3057\u304ftarget network\u3092\u5c0e\u5165\u3057\u3066\u3044\u307e\u3059\uff0e\u3053\u308c\u306b\u3088\u3063\u3066\uff0c\u53e4\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u6559\u5e2b\u4fe1\u53f7\u3092\u4f5c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\uff0c\u3053\u306e\u3042\u305f\u308a\u306e\u89e3\u8aac\u306f\uff0c\nintroduction to double deep Q-learning\n\u306b\u5927\u5909\u308f\u304b\u308a\u3084\u3059\u304f\u89e3\u8aac\u3055\u308c\u3066\u3044\u307e\u3059\u306e\u3067\uff0c\u662f\u975e\u305d\u3061\u3089\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\uff0e\n\u5b9f\u88c5\u9762\u306e\u8a71\u3067\u306f\uff0c\u4f55\u30d5\u30ec\u30fc\u30e0\u304b\u306b\u4e00\u56de\uff0c\u884c\u52d5\u9078\u629e\u306b\u5229\u7528\u3057\u3066\u3044\u308b\u30e2\u30c7\u30eb\u3092\u30b3\u30d4\u30fc\u3057\u3066\uff0c\u30bf\u30fc\u30b2\u30c3\u30c8\u30e2\u30c7\u30eb\u306b\u6e21\u3055\u306a\u3051\u308c\u3070\u3044\u3051\u307e\u305b\u3093\uff0e\nKeras\u3067\u306f\u3069\u3046\u3059\u308b\u304b\u3068\u3044\u3046\u3068\uff0c\nfrom keras.models import model_from_config\n\ndef clone_model(model, custom_objects={}):\n    config = {\n        'class_name': model.__class__.__name__,\n        'config': model.get_config(),\n    }\n    clone = model_from_config(config, custom_objects=custom_objects)\n    clone.set_weights(model.get_weights())\n    return clone\n\nself.target_model = clone_model(self.model)\n\n\u306e\u3088\u3046\u306b\uff0c\u30e2\u30c7\u30eb\u3068\u91cd\u307f\u3092\u305d\u308c\u305e\u308c\u65b0\u3057\u3044\u30e2\u30c7\u30eb\u306b\u6e21\u3059\u3053\u3068\u3067\u30b3\u30d4\u30fc\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\u305f\u3060\uff0c\nimport copy\nself.target_model = copy.copy(self.model)\n## deepcopy\u306f\u30a8\u30e9\u30fc\u306b\u306a\u308b\n# self.target_model = copy.deepcopy(self.model)\n\n\u306e\u3088\u3046\u306b\u6a19\u6e96copy\u95a2\u6570\u3067\u3082\uff0c\u30e2\u30c7\u30eb\uff0c\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u30b3\u30d4\u30fc\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\uff08\u516c\u5f0f\u306b\u306f\u307f\u3064\u3051\u3089\u308c\u307e\u305b\u3093\u3067\u3057\u305f\uff09\u304c\uff0c\u3061\u3087\u3063\u3068\u6319\u52d5\u304c\u3053\u308f\u3044\u306e\u3067\u5148\u306e\u65b9\u6cd5\u306e\u307b\u3046\u304c\u3088\u3044\u3067\u3057\u3087\u3046\uff0e\n\u4eca\u56de\u306f\uff0cclone_model\u3092\u3064\u304b\u3063\u3066\u5b9a\u671f\u7684\u306btarget_model\u306b\u73femodel\u3092\u30b3\u30d4\u30fc\u3057\uff0cQ\u5024\u3092\u8a55\u4fa1\u66f4\u65b0\u3059\u308b\u969b\u306b\u306ftarget_model\u3092\u7528\u3044\u308b\u3088\u3046\u306b\u3057\u307e\u3059\uff0e\uff08\u4f59\u8ac7\u3067\u3059\u304c\u6539\u826f\u7248DQN\u306eDDQN\u3067\u306f\uff0c'\u73femodel\u306b\u72b6\u614b\u3092\u5165\u308c\u3066\u51fa\u305f\u6700\u5927\u306eQ\u5024\u3092\u3068\u308baction'(A)\u3092\u3082\u3068\u3081\uff0ctarget model\u306b\u72b6\u614b\u3092\u5165\u308c\u3066\u51fa\u305fQ\u5024\u3067A\u306b\u5bfe\u5fdc\u3059\u308b\u3082\u306e\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\uff09\ndef Q_values(self, states, isTarget=False):\n    model = self.target_model if isTarget else self.model\n    res = model.predict(np.array([states]))\n    return res[0]\n\ndef store_experience(self, states, action, reward, states_1, terminal):\n    self.D.append((states, action, reward, states_1, terminal))\n    return (len(self.D) >= self.replay_memory_size)\n\ndef experience_replay(self):\n    state_minibatch = []\n    y_minibatch = []\n    action_minibatch = []\n\n    # sample random minibatch\n    minibatch_size = min(len(self.D), self.minibatch_size)\n    minibatch_indexes = np.random.randint(0, len(self.D), minibatch_size)\n\n    for j in minibatch_indexes:\n        state_j, action_j, reward_j, state_j_1, terminal = self.D[j]\n        action_j_index = self.enable_actions.index(action_j)\n\n        y_j = self.Q_values(state_j)\n\n        if terminal:\n            y_j[action_j_index] = reward_j\n        else:\n            if not self.use_ddqn:\n                v = np.max(self.Q_values(state_j_1, isTarget=True))\n            else: # for DDQN\n                v = self.Q_values(state_j_1, isTarget=True)[action_j_index]\n            y_j[action_j_index] = reward_j + self.discount_factor * v\n\n        state_minibatch.append(state_j)\n        y_minibatch.append(y_j)\n        action_minibatch.append(action_j_index)\n\n    # training\n    self.model.fit(np.array(state_minibatch), np.array(y_minibatch), verbose=0)\n\n\nTips2: loss\u95a2\u6570\u306e\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\n\u5148\u307b\u3069\u306e\u4f8b\u3067\u306f\u5358\u7d14\u306b'mean_squared_error'\u3092\u4f7f\u3063\u3066\u3044\u307e\u3057\u305f\u304c\uff0cDQN\u3067\u306f\u5b66\u7fd2\u306e\u5b89\u5b9a\u6027\u3092\u5411\u4e0a\u3055\u305b\u308b\u305f\u3081\u306b\u3001\u30a8\u30e9\u30fc\u3067\u3042\u308btarget \u2212 Q(s,a;\u03b8)\u306e\u5024\u3092-1\u304b\u30891\u306e\u7bc4\u56f2\u3067\u30af\u30ea\u30c3\u30d7\u3057\u307e\u3059\uff0e\u3053\u306e\u3042\u305f\u308a\u306f\nDQN\u3092Keras\u3068TensorFlow\u3068OpenAI Gym\u3067\u5b9f\u88c5\u3059\u308b\n\u306b\u5927\u5909\u308f\u304b\u308a\u3084\u3059\u304f\u89e3\u8aac\u3055\u308c\u3066\u307e\u3059\u306e\u3067\uff0c\u662f\u975e\u305d\u3061\u3089\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\uff0e\nKeras\u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u6570\u7a2e\u985e\u306eloss\u95a2\u6570\u3092\u7528\u610f\u3057\u3066\u304a\u308a\uff0c'mean_squared_error'\u306e\u3088\u3046\u306b\u540d\u524d\u3092\u66f8\u304f\u3060\u3051\u3067\u4f7f\u3048\u307e\u3059\u304c\uff0c\u4eca\u56de\u306e\u3088\u3046\u306b\u81ea\u5206\u3067loss\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u305f\u304f\u306a\u308b\u3053\u3068\u306f\u307e\u307e\u3042\u308a\u307e\u3059\uff0e\n\u3082\u3061\u308d\u3093\uff0cKeras\u306b\u306f\u305d\u306e\u305f\u3081\u306e\u65b9\u6cd5\u304c\u7528\u610f\u3055\u308c\u3066\u304a\u308a\uff08\u82e5\u5e72\u53d6\u308a\u56de\u3057\u304c\u60aa\u3044\u3067\u3059\u304c\uff09\ndef loss_func(y_true, y_pred):\n    error = tf.abs(y_pred - y_true)\n    quadratic_part = tf.clip_by_value(error, 0.0, 1.0)\n    linear_part = error - quadratic_part\n    loss = tf.reduce_sum(0.5 * tf.square(quadratic_part) + linear_part)\n    return loss\n\nself.model.compile(loss=loss_func, optimizer='rmsprops', metrics=['accuracy'])\n\n\u306e\u3088\u3046\u306b\u72ec\u81ea\u3067loss\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff08y_true\u304c\u6559\u5e2b\u30c7\u30fc\u30bf\uff0cy_pred\u304c\u30e2\u30c7\u30eb\u306e\u51fa\u529b\u3067\u3059\uff09\uff0emodel.fit\u3084model.evaluate\u3092\u547c\u3073\u51fa\u3057\u305f\u969b\u306f\u3053\u3061\u3089\u306e\u95a2\u6570\u304c\u4f7f\u308f\u308c\u307e\u3059\uff0e\n[\u53c2\u8003]\u3000How to use a custom objective function for a model? #369\n\u82e5\u5e72\u53d6\u308a\u56de\u3057\u304c\u60aa\u3044\uff0c\u3068\u3044\u3063\u305f\u306e\u306floss\u95a2\u6570\u306by_true, y_pred\u4ee5\u5916\u306e\u5916\u90e8\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5c0e\u5165\u3059\u308b\u306e\u304c\u975e\u5e38\u306b\u3084\u3063\u304b\u3044\u3060\u304b\u3089\u3067\u3059\uff0e\n\u4eca\u56de\u306e\u4f8b\u3067\u306f\uff0cexperience memory\u306b\u3066y_true\u306b\u4ee3\u5165\u3059\u308b\u5024\u3068\u3057\u3066\uff0c\u73femodel\u304b\u3089\u306e\u51fa\u529bQ\u5024\u30ea\u30b9\u30c8\u3092\u305d\u306e\u307e\u307e\u4ee3\u5165\uff08\u66f4\u65b0\u304c\u3042\u308b\u90e8\u5206\u3060\u3051\u3092\u66f4\u65b0\uff09\u3057([1.2, 0.5, 0.1] -> [1.3, 0.5, 0.1])\uff0c\u3000loss\u95a2\u6570\u5185\u90e8\u3067\u73femodel\u304b\u3089\u306e\u51fa\u529bQ\u5024\u30ea\u30b9\u30c8\u3068\u306e\u7d76\u5bfe\u5024\u5dee\u5206\u3092\u3068\u3063\u3066\u3044\u307e\u3059\uff0e\u305d\u306e\u305f\u3081\uff0cerror\u3067\u306f\u66f4\u65b0\u304c\u3042\u3063\u305f\u90e8\u5206\u306e\u307f\u306b\u5024\u304c\u6b8b\u308a\uff0c\u4ed6\u306f0\u306b\u306a\u3063\u3066\u3044\u307e\u3059([1.3, 0.5, 0.1] - [1.2, 0.5, 0.1] = [0.1, 0, 0])\uff0e\u6700\u7d42\u7684\u306b\u306f\u66f4\u65b0\u304c\u3042\u3063\u305f\u90e8\u5206\u3057\u304bloss\u5024\u306b\u5f71\u97ff\u3057\u306a\u3044\u3088\u3046\u306b\u306a\u3063\u3066\u304a\u308a\uff0c\u4ed6\u306e\u5916\u90e8\u5909\u6570\u306f\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\uff0e\n\u3057\u304b\u3057\uff0closs\u95a2\u6570\u306b\u6559\u5e2b\u4fe1\u53f7\uff08\u66f4\u65b0\u5024\u306e\u307f\uff09(1.3)\uff0c\u30e2\u30c7\u30eb\u51fa\u529b([1.2, 0.5, 0.1])\uff0c\u9078\u629e\u30a2\u30af\u30b7\u30e7\u30f3(0)\u3092\u6e21\u3057\uff0c\u30e2\u30c7\u30eb\u5185\u3067\u305d\u308c\u3089\u304b\u3089loss\u5024\u3092\u8a08\u7b97\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u9014\u7aef\u306b\u9762\u5012\u306b\u306a\u308a\u307e\u3059\uff0e Tensorflow\u3067\u306f\nstate = tf.placeholder(tf.float32, [None, 8, 8]) # \u72b6\u614b\na = tf.placeholder(tf.int64, [None])  # \u884c\u52d5\nsupervisor = tf.placeholder(tf.float32, [None])  # \u6559\u5e2b\u4fe1\u53f7\noutput = self.inference(state)\n\nloss = lossfunc(output, supervisor)\n\n...\n\nloss_val = sess.run(loss, feed_dict={\n            self.state: np.float32(np.array(state_batch),\n            self.action: action_batch,\n            self.super_visor: y_batch\n        })\n\ndef lossfunc(self, a, output, supervisor)\n\n        a_one_hot = tf.one_hot(a, self.num_actions, 1.0, 0.0)  # \u884c\u52d5\u3092one hot vector\u306b\u5909\u63db\u3059\u308b\n        q_value = tf.reduce_sum(tf.mul(output, a_one_hot), reduction_indices=1)  # \u884c\u52d5\u306eQ\u5024\u306e\u8a08\u7b97\n\n        # \u30a8\u30e9\u30fc\u30af\u30ea\u30c3\u30d7\n        error = tf.abs(supervisor - q_value)\n        quadratic_part = tf.clip_by_value(error, 0.0, 1.0)\n        linear_part = error - quadratic_part\n        loss = tf.reduce_mean(0.5 * tf.square(quadratic_part) + linear_part)  # \u8aa4\u5dee\u95a2\u6570\n\n\u306e\u3088\u3046\u306b\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u306b\u304b\u3051\u307e\u3059\u304c\uff0cKeras\u3067\u306f\u305d\u3046\u3082\u3044\u304d\u307e\u305b\u3093\uff0c\u3069\u3046\u3059\u308b\u304b\u3068\u3044\u3046\u3068\uff0cy_true, y_pred, \u305d\u306e\u4ed6\u5916\u90e8\u95a2\u6570\u3092\u5165\u529b\u3068\u3057\uff0closs\u5024\u3092\u51fa\u529b\u3068\u3059\u308b\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\n\nTips3: \u8907\u6570\u5165\u529b\uff0c\u8907\u6570\u51fa\u529b\nfrom keras.layers.core import Dense, Dropout, Activation, Flatten\nfrom keras.layers import Lambda, Input\n\nlosses = {'loss': lambda y_true, y_pred: y_pred, #dummy loss func\n          'main_output': lambda y_true, y_pred: K.zeros_like(y_pred)} \n\ndef customized_loss(args):\n    import tensorflow as tf\n    y_true, y_pred, action = args\n    a_one_hot = tf.one_hot(action, K.shape(y_pred)[1], 1.0, 0.0)\n    q_value = tf.reduce_sum(tf.mul(y_pred, a_one_hot), reduction_indices=1)\n    error = tf.abs(q_value - y_true)\n    quadratic_part = tf.clip_by_value(error, 0.0, 1.0)\n    linear_part = error - quadratic_part\n    loss = tf.reduce_sum(0.5 * tf.square(quadratic_part) + linear_part)\n    return loss\n\n...\n\ndef init_model(self):\n\n    state_input = Input(shape=(1, 8, 8), name='state')\n    action_input = Input(shape=[None], name='action', dtype='int32')\n\n    x = Flatten()(state_input)\n    x = Dense(32, activation='relu')(x)\n    y_pred = Dense(3, activation='linear', name='main_output')(x)\n\n    y_true = Input(shape=(1, ), name='y_true')\n    loss_out = Lambda(customized_loss, output_shape=(1, ), name='loss')([y_true, y_pred, action_input])\n    self.model = Model(input=[state_input, action_input, y_true], output=[loss_out, y_pred])\n\n    self.model.compile(loss=losses,\n                       optimizer=RMSprop(lr=self.learning_rate),\n                       metrics=['accuracy'])\n\nslef.init_model()\n\n...\n\nres = model.predict({'state': np.array([states]),\n                     'action': np.array([0]), #dummy\n                     'y_true': np.array([[0] * self.n_actions]) #dummy\n                     })\nreturn res[1][0]\n...\n\nself.model.fit({'action': np.array(action_minibatch),\n                'state': np.array(state_minibatch),\n                'y_true': np.array(y_minibatch)},\n                [np.zeros([minibatch_size]),\n                 np.array(y_minibatch)],\n                 batch_size=minibatch_size,\n                 nb_epoch=1,\n                 verbose=0)\n\n...\u5727\u5012\u7684\u306b\u9762\u5012\uff0eKeras\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u304b\u306a\u308a\u30b7\u30f3\u30d7\u30eb\u304b\u3051\u308b\u4ed5\u7d44\u307f\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\uff0c\u305d\u3053\u304b\u3089\u3061\u3087\u3063\u3068\u5916\u308c\u305f\u3053\u3068\u3092\u3084\u308d\u3046\u3068\u3059\u308b\u3068\u4e00\u6c17\u306b\u9762\u5012\u304f\u3055\u304f\u306a\u3063\u3066\u304d\u307e\u3059\uff0e\n\u5148\u307b\u3069\u3068\u5909\u308f\u3063\u305f\u70b9\u306f\uff0c\n\n\u5165\u529b\u306b\u65b0\u305f\u306baction_input\u304c\u52a0\u308f\u3063\u3066\u3044\u308b\ny_true\u3082\u5165\u529b\u3068\u3057\u3066\u6271\u3063\u3066\u3044\u308b\uff08\u5165\u529b\u306f3\u3064\uff09\nloss\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306b\u72ec\u81ea\u30ec\u30a4\u30e4\u30fc\u5b9a\u7fa9\u306b\u7528\u3044\u308bLambda\u3092\u4f7f\u3063\u3066\u3044\u308b\n\u51fa\u529b\u3068\u3057\u3066loss\u5024\u3068Q\u5024\u3092\u51fa\u3059\u3088\u3046\u306b\u3057\u3066\u3044\u308b\n\n\u70b9\u3067\u3059\uff0e\u3064\u3089\u3044\uff0eloss\u95a2\u6570\u306e\u5f15\u6570\u3092\u5909\u3048\u308b\u7b49\u306e\u5927\u5e45\u306a\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u304c\u51fa\u6765\u306a\u3044\u4ee5\u4e0a\u3053\u3046\u305b\u3056\u308b\u3092\u3048\u307e\u305b\u3093\uff0e\u3061\u306a\u307f\u306b\u3053\u306e\u65b9\u6cd5\u306fKeras\u516c\u5f0f\u306eexample(https://github.com/fchollet/keras/blob/master/examples/image_ocr.py)\u306b\u8f09\u3063\u3066\u3044\u307e\u3059\uff0e\n\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3066\u306f\uff0c\n\nLambda\u3092\u4f7f\u3046\u3053\u3068\u3067\uff0c\u30a4\u30f3\u30d7\u30c3\u30c8\u3068\u5c64\u5185\u306e\u51e6\u7406\uff0c\u51fa\u529b\u306e\u5f62\u3092\u81ea\u7531\u306b\u8a2d\u8a08\u3067\u304d\u308b\uff0e\n\u30a4\u30f3\u30d7\u30c3\u30c8\uff0c\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u306bname\u3092\u3064\u304b\u3063\u3066\u540d\u524d\u3092\u3064\u3051\uff0cprediction, fit\u6642\u306b\u4f7f\u7528\u3057\u3066\u3044\u308b\uff0e\n\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u304c\u8907\u6570\u3042\u308b\u969b\u306b\u306f\u305d\u308c\u305e\u308c\u306bloss\u95a2\u6570\u3092\u9069\u7528\u3067\u304d\u308b\uff0e\nmodel\u306e\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u306bloss\u5024\u304c\u542b\u307e\u308c\u308b\u305f\u3081\uff0cmodel.compile\u6642\u306b\u6307\u5b9a\u3059\u308bloss\u95a2\u6570\u306f\u30c0\u30df\u30fc\u3067\u3088\u304f\uff0closs\u5024\u306b\u304b\u3051\u308b\u95a2\u6570\u306f\u5024\u3092\u305d\u306e\u307e\u307e\u51fa\u529b\u3057\uff0cQ\u5024\u306b\u304b\u3051\u308b\u95a2\u6570\u306f\u5e38\u306b\u51fa\u529b0\u306b\u306a\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e\npredict\u3092\u547c\u3073\u51fa\u3059\u969b\u306b\u306f\u4f7f\u308f\u306a\u3044\u30a4\u30f3\u30d7\u30c3\u30c8\u306b\u306f\u30c0\u30df\u30fc\u5024\u3092\u6307\u5b9a\u3057\uff08\u4e0d\u8981\uff1f\uff09\uff0cfit\u3092\u547c\u3073\u51fa\u3059\u969b\u306b\u306f\uff0c\u6559\u5e2b\u4fe1\u53f7\u3082\u30a4\u30f3\u30d7\u30c3\u30c8\u3068\u3057\u3066\u3042\u3064\u304b\u3046\uff0e\n\n\u3068\u3044\u3063\u305f\u3068\u3053\u308d\u3067\u3057\u3087\u3046\u304b\uff0e\n\u6b63\u76f4\u3053\u3093\u306a\u66f8\u304d\u65b9\u3092\u3059\u308b\u304f\u3089\u3044\u306a\u3089Tensorflow\u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u30de\u30b7\u8aac\u3082\u3042\u308a\u307e\u3059\u304c\uff0cKeras\u30aa\u30f3\u30ea\u30fc\u3067\u66f8\u304f\u306a\u3089\u3053\u306e\u3088\u3046\u306a\u611f\u3058\u306b\u306a\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff0e\u30e2\u30c7\u30eb\u7d44\u3060\u3051Keras\u3067\u3084\u3063\u3066\uff0c\u6b8b\u308a\u306e\u90e8\u5206\u306fTensorflow\u3092\u4f7f\u3046\u3068\u3044\u3046\u65b9\u6cd5\u3082\u3042\u308a\u307e\u3059\uff0e\n\nTips4: optimizer\u306e\u5909\u66f4\n\u8a18\u4e8b\u304c\u601d\u3063\u305f\u3088\u308a\u9577\u304f\u306a\u3063\u3066\u304d\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u8a73\u3057\u3044\u89e3\u8aac\u306f\u7701\u304d\u307e\u3059\u304c\uff08\u5f8c\u65e5\u8ffd\u8a18\u3059\u308b\u304b\u3082\uff1f\uff09\uff0cDQN\u3067\u306foptimizer\u3068\u3057\u3066\u901a\u5e38\u306eRMSProp\u3067\u306f\u306a\u304fRMSPropGraves\u3092\u7528\u3044\u308b\u3068\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u51fa\u3084\u3059\u3044\u3068\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u6a5f\u68b0\u5b66\u7fd2\u521d\u5fc3\u8005\u306a\u306e\u3067\uff0c\u5f0f\u3092\u898b\u3066\u3082\u306a\u305c\u65e9\u304f\u306a\u308b\u306e\u304b\u3055\u3063\u3071\u308a\u306a\u306e\u3067\u3059\u304c\uff08\u3069\u306a\u305f\u304b\u304a\u6559\u3048\u304f\u3060\u3055\u3044...\uff09\uff0c\u5b66\u7fd2\u304c\u65e9\u304f\u306a\u308b\u3068\u306e\u3053\u3068\u306a\u3089\u662f\u975e\u4f7f\u3044\u305f\u3044\u3068\u3053\u308d\u3067\u3059(DQN+RNN\u306e\u8ad6\u6587\u7b49\u306f\u5225\u306eoptimizer\u3092\u4f7f\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059)\uff0e\u3057\u304b\u3057\uff0cChainer\u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3044\u3063\u3066\u3044\u308b\u3053\u306eRMSPropsGraves\u3067\u3059\u304c\uff0cTensorflow\uff0cKeras\u306b\u306f\u5165\u3063\u3066\u3044\u307e\u305b\u3093(\u8a66\u3057\u3066\u3044\u307e\u305b\u3093\u304cChainer\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u306eKeras\u3067\u3042\u308c\u3070\u4f7f\u3048\u308b\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093)\uff0e\n\u305d\u306e\u305f\u3081\uff0c\u81ea\u5206\u3067optimizer\u3092\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0eTensorflow\u7248\u306f\n\u3044\u307e\u3055\u3089\u3060\u3051\u3069Tensorflow\u3067DQN\uff08\u5b8c\u5168\u7248\uff09\u3092\u5b9f\u88c5\u3059\u308b\n\n\u3053\u3061\u3089\u3067\u8a73\u3057\u304f\u89e3\u8aac\u3055\u308c\u3066\u3044\u307e\u3059\u306e\u3067\uff0c\u305d\u3061\u3089\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\uff0e\u8ad6\u6587[3]\u306b\u4e57\u3063\u3066\u3044\u308b\u5f0f\u3092\u307f\u308c\u3070\u5b9f\u88c5\u3067\u304d\u307e\u3059\uff0e\nepoch\u3092\u91cd\u306d\u3066\u884c\u3063\u305f\u6642\u306eloss\u5024\u306e\u63a8\u79fb\u306e\u9055\u3044\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\uff0e\n\n\u8d64\u304cRMSProp\u3067\u56de\u3057\u305f\u3082\u306e\uff0c\u9752\u304cRMSPropGraves\u3067\u56de\u3057\u305f\u3082\u306e\u3067\u3059\uff0e\n\u306f\u3058\u3081\u306e\u3046\u3061\u306fRMSPropGraves\u306e\u65b9\u304c\u512a\u52e2\u304b\u3068\u601d\u308f\u308c\u307e\u3057\u305f\u304c\uff0c2000\u56de\u56de\u3059\u3068\u4e21\u8005\u540c\u7a0b\u5ea6\u306e\u6240\u306b\u843d\u3061\u7740\u304d\u307e\u3057\u305f\uff0e\u8ab2\u984c\u304c\u7c21\u5358\u3060\u3063\u305f\u305b\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e\nKeras\u3067\u306foptimizer\u306e\u5b9a\u7fa9\u306fhttps://github.com/yukiB/keras/blob/master/keras/optimizers.py\u306b\u5168\u90e8\u3042\u308a\u307e\u3059\u306e\u3067\uff0c\u3053\u3053\u3092\u66f8\u304d\u63db\u3048\u3066\u3042\u3052\u308c\u3070\u826f\u3055\u305d\u3046\u3067\u3059\uff0eWIP\u3067\u3059\u304c\uff0cgithub\u306b\u30b3\u30fc\u30c9\u3092\u3042\u3052\u3066\u304a\u304d\u307e\u3059\uff0e\n\n\u3082\u3046\u5c11\u3057\u8907\u96d1\u306a\u30b2\u30fc\u30e0\u3067\u8a66\u3059\n\u3053\u3053\u307e\u3067\u3067\u5927\u5206\u30e2\u30c7\u30eb\u306e\u6027\u80fd\u3082\u6539\u5584\u3057\u305f\u306f\u305a\u306a\u306e\u3067\uff0c\u30d4\u30af\u30bb\u30eb\u6570\u3092\u3075\u3084\u3057\uff0c\u5168\u7d50\u5408\u306e\u524d\u306bConv\u5c64\u30923\u5c64\u8ffd\u52a0\u3057\u3066\u307f\u307e\u3059\uff0e\n\n1000\u56de\u56de\u3057\u305f\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\uff0e\n\n\u7d9a\u3044\u3066\uff0c\u3082\u3046\u5c11\u3057\u8907\u96d1\u306a\u30b2\u30fc\u30e0\u3092\u4f5c\u308a\uff0c\u540c\u3058\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u3066\u5b66\u7fd2\u3092\u56de\u3057\u3066\u307f\u307e\u3059\uff0e\n\u30ac\u30e9\u30b1\u30fc\u6642\u4ee3\u306b\u3068\u3066\u3082\u306f\u3084\u3063\u305fCAVE\u3068\u3044\u3046\u30b2\u30fc\u30e0\u3092\u7c21\u5358\u306bmatplotlib\u3067\u5b9f\u88c5\u3057\u307e\u3057\u305f\uff0e\n\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068\u4e0a\u6607\uff0c\u96e2\u3059\u3068\u4e0b\u964d\u3059\u308b\u3046\u306b\u3087\u3046\u306b\u3087\u3057\u305f\u3084\u3064\u3092\uff0c\u3067\u304d\u308b\u3060\u3051\u58c1\u306b\u3076\u3064\u304b\u3089\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u9032\u3081\u3066\u3044\u304f\u30b2\u30fc\u30e0\u3067\u3059\uff0e\n\u30b2\u30fc\u30e0\u753b\u9762\u306f48x48\u3067\uff0c\u5148\u307b\u3069\u4f5c\u3063\u305f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af(Conv3\u5c64+\u5168\u7d50\u5408Relu)\u3092\u3064\u304b\u3063\u3066\uff0c\n\n\u5165\u529b: \u30c0\u30a6\u30f3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u305f\u76f4\u8fd14\u30d5\u30ec\u30fc\u30e0\n\u51fa\u529b: \u30dc\u30bf\u30f3\u5165\u529b\uff08ON, OFF\uff09\n\n\u3068\u306a\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\uff0e\n\u7d50\u679c\u3068\u3057\u3066\u306f\u4e0a\u4e0b\u306e\u58c1\u306b\u3076\u3064\u304b\u308b\u3053\u3068\u306f\u307e\u305a\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u304c\uff0c\u9053\u4e2d\u306e\u30d6\u30ed\u30c3\u30af\u306b\u5bfe\u3059\u308b\u56de\u907f\u306f\u3042\u307e\u308a\u5b66\u7fd2\u3057\u3066\u304f\u308c\u305a\uff0c\u30b9\u30b3\u30a2\u304c\u4f38\u3073\u307e\u305b\u3093\u3067\u3057\u305f\uff0e\u4e00\u5fdc\u5165\u529b\u30c7\u30fc\u30bf\u3068\u3057\u30664\u30d5\u30ec\u30fc\u30e0\u5206\u306f\u3068\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u304c\uff0c\u30d6\u30ed\u30c3\u30af\u540c\u58eb\u306e\u4f4d\u7f6e\u95a2\u4fc2\u306b\u3088\u3063\u3066\u306f\u3082\u3063\u3068\u9061\u3063\u305f\u30d5\u30ec\u30fc\u30e0\u30c7\u30fc\u30bf\u304c\u52b9\u3044\u3066\u304f\u308b\u3053\u3068\u3082\u8003\u3048\u3089\u308c\u308b\u306e\u3067\uff0cLSTM\u3092\u7d44\u307f\u5408\u308f\u305b\u305fDQN\u7b49\u3082\u691c\u8a0e\u3057\u305f\u307b\u3046\u304c\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e\u3053\u306e\u3042\u305f\u308a\u306e\u8a71\u306f\u307e\u305f\u6b21\u56de\n\n(\u5b66\u7fd2\u7d50\u679c\u3092\u307f\u3066\u308b\u3060\u3051\u3067\u7121\u9650\u306b\u6642\u9593\u304c\u904e\u304e\u3066\u3057\u307e\u3063\u3066\u5371\u306a\u3044)\n\n\u304a\u308f\u308a\u306b\n\u4eca\u56de\u306fKeras\u3067DQN\u3092\u7d44\u3080\u306b\u3042\u305f\u3063\u3066\uff0c\u521d\u5fc3\u8005\u304c\u8e93\u304d\u3084\u3059\u305d\u3046\u306a\u3068\u3053\u308d\u3092\u53d6\u308a\u4e0a\u3052\u3066\u307f\u307e\u3057\u305f\uff0e\n\u521d\u3081\u3066\u306e\u5f37\u5316\u5b66\u7fd2\u3068\u3044\u3046\u3053\u3068\u3067\u4eca\u56de\u306fDQN\u3092\u6271\u3044\u307e\u3057\u305f\u304c\uff0c\u304b\u306a\u308a\u6642\u4ee3\u306b\u4e57\u308a\u9045\u308c\u3066\u3044\u308b(DDQN\u3084LSTM\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u3082\u306e\u306a\u3069\u306f\u307e\u3060\u307e\u3060\u73fe\u5f79\u3067\u3059)\u306e\u3067\u6b21\u56de\u306fA3C\u7b49\u3092\u4f7f\u3063\u3066\uff08\u7d44\u3093\u3067\uff1f\uff09\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\u4eca\u56de\u306e\u30b3\u30fc\u30c9\u306f\u3053\u3053\u306b\u3042\u308a\u307e\u3059\uff0e\n\n\u53c2\u8003\u6587\u732e\n[1] V. Mnih, K. Kavukcuoglu, D. Silver, A. Graves I. Antonoglou, D. Wierstra, M. Riedmiller. \u201cPlaying Atari with Deep Reinforcement Learning\u201d arXiv:1312.5602, 2013.\n[2] V. Mnih, et al. \u201cHuman-level control through deep reinforcement learning\u201d nature, 2015.\n[3] Alex Graves, \u201cGenerating Sequences With Recurrent Neural Networks\u201d arXiv preprint arXiv http://arxiv.org/abs/1308.0850\n# \u306f\u3058\u3081\u306b\n\n\u3053\u306e\u8a18\u4e8b\u306f\u3044\u307e\u3055\u3089\u306a\u304c\u3089\u306b\u5f37\u5316\u5b66\u7fd2(DQN)\u306e\u5b9f\u88c5\u3092Keras\u3092\u4f7f\u3063\u3066\u9032\u3081\u3064\u3064\uff0c\u76ee\u7684\u95a2\u6570\u306e\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3084optimizer\u306e\u8ffd\u52a0\uff0c\u8907\u6570\u5165\u529b\u306a\u3069\uff0c\u3061\u3087\u3063\u3068\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u624b\u3092\u52a0\u3048\u3088\u3046\u3068\u3057\u305f\u6642\u306b\u30cf\u30de\u3063\u305f\u70b9\u3092\u5099\u5fd8\u9332\u3068\u3057\u3066\u6b8b\u3057\u305f\u3082\u306e\u3067\u3059\uff0e\u305d\u306e\u305f\u3081\uff0cDQN\u306e\u89e3\u8aac\u8a18\u4e8b\u3068\u3044\u3046\u3088\u308a\u3082\u521d\u5fc3\u8005\u5411\u3051KerasTips\u306b\u306a\u308a\u307e\u3059\uff0e\n\n# \u5b9f\u884c\u74b0\u5883\n\nPython3.5.2\nKeras 1.2.1\ntensorflow 0.12.1\n\n## DQN\u3068\u306f\n\nDQN(DeepQNetwork)\u304c[DeepMind](https://deepmind.com/)\u304b\u3089\u767a\u8868\u3055\u308c\u30662\u5e74\u4ee5\u4e0a\u7d4c\u3064\u306e\u3067\uff0c\u3082\u306f\u3084\u3044\u305f\u308b\u6240\u306b\u89e3\u8aac\u8a18\u4e8b\u3084\u5b9f\u88c5\u30b5\u30f3\u30d7\u30eb\u304c\u3042\u308a\uff0c\u3053\u3053\u3067\u306e\u8a73\u3057\u3044\u89e3\u8aac\u306f\u4e0d\u8981\u3060\u3068\u601d\u3044\u307e\u3059\uff0e\u304c\uff0c\u3056\u3063\u304f\u308a\u8a00\u3046\u3068\uff0cQ-Learning\u3068\u3044\u3046\u5f37\u5316\u5b66\u7fd2\u624b\u6cd5\u306eQ\u95a2\u6570\u90e8\u5206\u3092\uff0c\u6df1\u5c64\u5b66\u7fd2\u306b\u3088\u308a\u8fd1\u4f3c\u3059\u308b\u3053\u3068\u3067\u3001\u52d5\u753b\u50cf\u304b\u3089\u76f4\u63a5Q\u5024\u3092\u63a8\u5b9a\u3059\u308b\u3053\u3068\u3092\u53ef\u80fd\u306b\u3057\u305f\u5b66\u7fd2\u624b\u6cd5\u3067\u3059\uff0e\nDQN\u306e\u7406\u8ad6\u3068\u3057\u3066\u306f\n\n- [\u30bc\u30ed\u304b\u3089Deep\u307e\u3067\u5b66\u3076\u5f37\u5316\u5b66\u7fd2](http://qiita.com/yuishihara/items/0e530e9c0a17a7fa0111)\n- [Python\u3067\u306f\u3058\u3081\u308b\u5f37\u5316\u5b66\u7fd2](http://qiita.com/Hironsan/items/56f6c0b2f4cfd28dd906)\n- [\u5168\u529b\u3067\u4eba\u5de5\u77e5\u80fd\u306b\u5bfe\u6c7a\u3092\u6311\u3093\u3067\u307f\u305f (\u7406\u8ad6\u7de8)[\u30cb\u30b3\u30cb\u30b3\u52d5\u753b]](http://www.nicovideo.jp/watch/sm30440714?playlist_type=deflist&mylist_sort=1&ref=my_deflist_s1_p1_n177)\n- [DQN\u306e\u751f\u3044\u7acb\u3061\u3000\uff0b\u3000Deep Q-Network\u3092Chainer\u3067\u66f8\u3044\u305f](http://qiita.com/Ugo-Nama/items/08c6a5f6a571335972d5)\n\n\u3042\u305f\u308a\u306e\u89e3\u8aac\u8a18\u4e8b\u304c\u975e\u5e38\u306b\u4e01\u5be7\u3067\u308f\u304b\u308a\u3084\u3059\u3044\u306e\u3067\u662f\u975e\u305d\u3061\u3089\u3092\u3054\u3089\u3093\u304f\u3060\u3055\u3044\uff0e\n\u4ed6\u306e\u6df1\u5c64\u5b66\u7fd2\u7814\u7a76\u3068\u540c\u69d8\uff0e\u5f37\u5316\u5b66\u7fd2\u3082\u3053\u3053\u6570\u5e74\u3067\u4e00\u6c17\u306b\u7814\u7a76\u304c\u9032\u307f\uff0c2013\u5e74\u767a\u8868\u306eDQN\u306f\u6700\u65b0\u624b\u6cd5\u3068\u306f\u8a00\u3048\u307e\u305b\u3093\u304c\uff0c\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u30b7\u30f3\u30d7\u30eb\u3067\u308f\u304b\u308a\u3084\u3059\u304f\uff0c\u5b9f\u88c5\u3057\u3084\u3059\u3044\u306e\u3067\u4eca\u56de\u306f\u3053\u3061\u3089\u3092\u6271\u3044\u307e\u3059\uff0e\n\n## Keras\u3068\u306f\n\n[Keras](https://keras.io/)\u306fTheano\uff0cTensorFlow\u30d9\u30fc\u30b9\u306e\u6df1\u5c64\u5b66\u7fd2\u30e9\u30c3\u30d1\u30fc\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\uff0eTheano\uff0cTensorFlow\u306e\u304a\u304b\u3052\u3067\u3060\u3044\u3076\u6df1\u5c64\u5b66\u7fd2\u306b\u3068\u3063\u3064\u304d\u3084\u3059\u304f\u306a\u3063\u3066\u304d\u305f\u3082\u306e\u306e\uff0c\u307e\u3060\u307e\u3060\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u30ac\u30ea\u30ac\u30ea\u66f8\u3044\u3066\u3044\u304f\u306e\u304c\u5927\u5909\uff0e\u3068\u3044\u3046\u3053\u3068\u3067\uff0c\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u9020\u3092\u304b\u306a\u308a\u30b7\u30f3\u30d7\u30eb\u306b\u66f8\u3051\u308b\u3088\u3046\u306b\u3057\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u304cKeras\u3067\u3059\uff0e\u79c1\u306e\u3088\u3046\u306a\u6a5f\u68b0\u5b66\u7fd2\u521d\u5fc3\u8005\u306b\u3082\u6bd4\u8f03\u7684\u7c21\u5358\u306b\u30b3\u30fc\u30c9\u3092\u7d44\u3081\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff0eKeras\u3092\u59cb\u3081\u3066\u89e6\u308b\u3068\u3044\u3046\u65b9\u306f\uff0c\u57fa\u672c\u7684\u306a\u90e8\u5206\u3092\u4ee5\u524d[\u6df1\u5c64\u5b66\u7fd2\u30e9\u30a4\u30d6\u30e9\u30eaKeras\u3067RNN\u3092\u4f7f\u3063\u3066sin\b\u6ce2\u4e88\u6e2c](http://qiita.com/yukiB/items/5d5b202af86e3c587843)\u3068\u3044\u3046\u8a18\u4e8b\u3067\u66f8\u3044\u305f\u306e\u3067\uff0c\u3088\u308d\u3057\u3051\u308c\u3070\u305d\u3061\u3089\u3092\u3054\u3089\u3093\u304f\u3060\u3055\u3044\uff0e\n\n## Keras(Tensorflow)\u3067\u306eDQN\u5b9f\u88c5\n\nKeras\u3084Tensorflow\u3067\u306eDQN\u5b9f\u88c5\u89e3\u8aac\u8a18\u4e8b\u3082\u6570\u591a\u51fa\u3066\u3044\u307e\u3059\uff0e\n\n- [\u3044\u307e\u3055\u3089\u3060\u3051\u3069Tensorflow\u3067DQN\uff08\u5b8c\u5168\u7248\uff09\u3092\u5b9f\u88c5\u3059\u308b](http://qiita.com/yuishihara/items/73e8f8c4a30b8148d9fc)\n- [TensorFlow\u3067DQN \uff0d\u7bb1\u5ead\u306e\u4eba\u5de5\u77e5\u80fd\u866b\u30fc](http://qiita.com/yai/items/2afa2692b9c00964a625)\n- [DQN\u3092Keras\u3068TensorFlow\u3068OpenAI Gym\u3067\u5b9f\u88c5\u3059\u308b](https://elix-tech.github.io/ja/2016/06/29/dqn-ja.html)\n- [\u8d85\u30b7\u30f3\u30d7\u30eb\u306bTensorFlow\u3067DQN (Deep Q Network) \u3092\u5b9f\u88c5\u3057\u3066\u307f\u308b \u301c\u5c0e\u5165\u7de8\u301c](http://blog.algolab.jp/post/2016/08/01/tf-dqn-simple-1/)\n- [Keras+DQN\u3067\u30ea\u30d0\u30fc\u30b7\u306eAI\u66f8\u304f](http://qiita.com/t-ae/items/daa9fcf9286a10a19c89)\n- [DQN\u30d7\u30cb\u30ad\u306b\u30db\u30fc\u30e0\u30e9\u30f3\u3092\u6253\u305f\u305b\u305f\u3044](http://qiita.com/dsanno/items/1a80471690367a81c6e7)\n\n\u306e\u3067\uff0cKeras\u306b\u3064\u3044\u3066\u308f\u304b\u3063\u3066\u3044\u3066\uff0cDQN\u5b9f\u88c5\u304c\u898b\u305f\u3044\u3068\u3044\u3046\u65b9\u306f\u4e0a\u306e\u8a18\u4e8b\u3092\u3054\u89a7\u3044\u305f\u3060\u3044\u305f\u65b9\u304c\u3044\u3044\u304b\u3068\u304a\u3082\u3044\u307e\u3059\uff0e\n\n\u307e\u305f\uff0c\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u5b9f\u88c5\u306f\u304a\u3044\u3068\u3044\u3066\uff0c\u3055\u3063\u3055\u3068Keras\u3067\u5f37\u5316\u5b66\u7fd2\u8a66\u3057\u305f\u3044\u3093\u3058\u3083\uff01\u3068\u3044\u3046\u65b9\u306f\uff0c[keras-rl](https://github.com/matthiasplappert/keras-rl)\u3068\u3044\u3046\u5f37\u5316\u5b66\u7fd2\u7279\u5316keras\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308b\u306e\u3067\u305d\u3061\u3089\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\uff0e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u306f\n[[Python] Keras-RL\u3067\u7c21\u5358\u306b\u5f37\u5316\u5b66\u7fd2(DQN)\u3092\u8a66\u3059](http://qiita.com/inoory/items/e63ade6f21766c7c2393)\n\u306e\u8a18\u4e8b\u304c\u53c2\u8003\u306b\u306a\u308b\u304b\u3068\u601d\u3044\u307e\u3059\uff0e\n\n# \u8d85\u30b7\u30f3\u30d7\u30eb\u306bKeras\u3067DQN\u3092\u5b9f\u88c5\u3057\u3066\u307f\u308b\n\n\u9577\u3005\u3068\u524d\u7f6e\u304d\u3092\u3057\u307e\u3057\u305f\u304c\u672c\u984c\u3067\u3059\uff0e\n\u4eca\u56de\u306fKeras\u306b\u6163\u308c\u308b\u3068\u3044\u3046\u3053\u3068\u3067\uff0c\u3082\u3068\u3082\u3068Tensorflow\u7b49\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3092\u6539\u5909\u3059\u308b\u307b\u3046\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u3068\u601d\u3044\uff0c\u3059\u3067\u306bTensorflow\u3067\u5b9f\u88c5\u30fb\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3092\u4f7f\u308f\u305b\u3066\u3044\u305f\u3060\u304f\u3053\u3068\u306b\u3057\u307e\u3059\uff0e\n\u7ae0\u984c\u3082\u305d\u306e\u307e\u307e\u3067\u3059\u304c\uff0c[ALGO GEEKS](http://blog.algolab.jp/post/2016/08/01/tf-dqn-simple-1/)\u69d8\u306e[\u8d85\u30b7\u30f3\u30d7\u30eb\u306bTensorFlow\u3067DQN (Deep Q Network) \u3092\u5b9f\u88c5\u3057\u3066\u307f\u308b \u301c\u5c0e\u5165\u7de8\u301c](http://blog.algolab.jp/post/2016/08/01/tf-dqn-simple-1/)\u3067\u3042\u3052\u3066\u9802\u3044\u3066\u3044\u308b\u30b3\u30fc\u30c9\u3092\u62dd\u501f\u3057\u307e\u3059\uff0e\u975e\u5e38\u306b\u30b3\u30f3\u30d1\u30af\u30c8\u304b\u3064\u5206\u304b\u308a\u3084\u3059\u3044\u5b9f\u88c5\u306b\u306a\u3063\u3066\u304a\u308a\uff0c\u5b66\u7fd2\u6642\u9593\u3082\u77ed\u304f\u3059\u3050\u7d50\u679c\u304c\u898b\u3089\u308c\u308b\u826f\u30b5\u30f3\u30d7\u30eb\u306e\u305f\u3081\uff0c\u3053\u3061\u3089\u3092Keras\u306b\u30b3\u30f3\u30d0\u30fc\u30c8\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\n\u4eca\u56de\u5b9f\u88c5\u3057\u305f\u30b3\u30fc\u30c9\u306f[github](https://github.com/yukiB/keras-dqn-test)\u306b\u3042\u3052\u307e\u3057\u305f\uff0e\n\n## \u30b2\u30fc\u30e0\n\n![demo-catch_ball8.gif](https://qiita-image-store.s3.amazonaws.com/0/59864/6dcd9255-4f66-c606-23fd-d0002087ae80.gif)\n\n\n(1000epoch\u56de\u3057\u305f\u3042\u3068\u306e\u69d8\u5b50)\n\n\u5b66\u7fd2\u74b0\u5883\u306f\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u3067\uff0c\u56f3\u306e\u3088\u3046\u306b8x8\u306e\u30de\u30b9\u306e\u306a\u304b\u3067\uff0c\u6b21\u3005\u306b\u843d\u3061\u3066\u304f\u308b\u30dc\u30fc\u30eb\u3092\u6700\u4e0b\u6bb5\u306e\u30d0\u30fc\u3067\u30ad\u30e3\u30c3\u30c1\u3059\u308b\u3068\u3044\u3046\u30b2\u30fc\u30e0\u3067\u3059\uff0e\u4eca\u56de\u5b9f\u88c5\u3059\u308b\u306b\u3042\u305f\u308a\uff0c\u672c\u5bb6\u30b5\u30a4\u30c8\u69d8\u3068\u30eb\u30fc\u30eb\u3092\u82e5\u5e72\u5909\u3048\u3066\u304a\u308a\uff0c\n\n- \u30dc\u30fc\u30eb\u3092\u30ad\u30e3\u30c3\u30c1\u3057\u305f\u3089+1\u5831\u916c\n- \u30dc\u30fc\u30eb\u3092\u843d\u3068\u3057\u305f\u3089-1\u5831\u916c\n- \u30a2\u30af\u30b7\u30e7\u30f3\u306f(1:\u53f3\u306b\u52d5\u304f\uff0c0:\u52d5\u304b\u306a\u3044\uff0c-1:\u5de6\u306b\u52d5\u304f)\u306e\u4e09\u7a2e\u985e\n- \u30dc\u30fc\u30eb\u306e\u843d\u3061\u308b\u5834\u6240\u306f\u30e9\u30f3\u30c0\u30e0\uff0c\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb\u306f4\u30d5\u30ec\u30fc\u30e0\n- \u30dc\u30fc\u30eb\u3092\u30ad\u30e3\u30c3\u30c1\u3059\u308b\u3068Score+1\n- \u30dc\u30fc\u30eb\u3092\u843d\u3068\u3057\u305f\u6642\u70b9\u3067\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\n\n\u3068\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\n## \u66f8\u304d\u63db\u3048\n\ntensorflow\u3067\u306f\n\n```py3\n\n# input layer (8 x 8)\nself.x = tf.placeholder(tf.float32, [None, 8, 8])\n\n# flatten (64)\nx_flat = tf.reshape(self.x, [-1, 64])\n\n# fully connected layer (32)\nW_fc1 = tf.Variable(tf.truncated_normal([64, 64], stddev=0.01))\nb_fc1 = tf.Variable(tf.zeros([64]))\nh_fc1 = tf.nn.relu(tf.matmul(x_flat, W_fc1) + b_fc1)\n\n# output layer (n_actions)\nW_out = tf.Variable(tf.truncated_normal([64, self.n_actions], stddev=0.01))\nb_out = tf.Variable(tf.zeros([self.n_actions]))\nself.y = tf.matmul(h_fc1, W_out) + b_out\n\n# loss function\nself.y_ = tf.placeholder(tf.float32, [None, self.n_actions])\nself.loss = tf.reduce_mean(tf.square(self.y_ - self.y))\n\n# train operation\noptimizer = tf.train.RMSPropOptimizer(self.learning_rate)\nself.training = optimizer.minimize(self.loss)\n\n# saver\nself.saver = tf.train.Saver()\n\n# session\nself.sess = tf.Session()\nself.sess.run(tf.global_variables_initializer())\n```\n\n\u3068\u306a\u3063\u3066\u3044\u307e\u3057\u305f\uff0e\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/59864/83063923-8d18-1512-ff05-864270beb89f.png)\n\n\n\u672c\u6765\u306eDQN\u3067\u306fConv\u5c64\u3092\uff13\u5c64\u631f\u3093\u3060\u3042\u3068\uff0c\u5168\u7d50\u5408\u3057\u3066Relu\u3092\u5f53\u3066\u3066\u3044\u308b\u306e\u3067\u3059\u304c\uff0c\u4eca\u56de\u306f\u305d\u3082\u305d\u30828x8\u3068\u753b\u7d20\u6570\u304c\u5c0f\u3055\u3044\u3067\u3059\u3057\uff0cConv\u5c64\u306f\u5b66\u7fd2\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u3067\u3053\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u304b\u3068\u601d\u3044\u307e\u3059\uff0e\u3053\u3061\u3089\u3092Keras\u3067\u66f8\u304d\u76f4\u3059\u3068\n\n```py3\nself.model = Sequential()\nself.model.add(InputLayer(input_shape=(8, 8)))\nself.model.add(Flatten())\nself.model.add(Dense(32, activation='relu'))\nself.model.add(Dense(self.n_actions))\n\noptimizer=RMSprop(lr=self.learning_rate)\nself.model.compile(loss='mean_squared_error',\n                   optimizer=optimizer,\n                   metrics=['accuracy'])\n```\n\n\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\nKeras\u306e\u4e00\u756a\u306e\u9b45\u529b\u306f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u7d44\u3080\u30b3\u30fc\u30c9\u304c\u304b\u306a\u308a\u30b7\u30f3\u30d7\u30eb\u306b\u306a\u308b\u3068\u3053\u308d\u3067\u3059\uff0e\n\u3053\u308c\u30678x8\u306e\u30b2\u30fc\u30e0\u753b\u9762\u30d4\u30af\u30bb\u30eb\u3092\u5165\u529b\u3059\u308b\u3068\u30a2\u30af\u30b7\u30e7\u30f3\u305d\u308c\u305e\u308c\u306b\u5fdc\u3058\u305f3\u3064\u306eQ\u5024\u304c\u51fa\u529b\u3055\u308c\u308b\u30e2\u30c7\u30eb\u304c\u3067\u304d\u307e\u3057\u305f\uff0e\n\nQ\u5024\u53d6\u5f97\u306fpredict\u95a2\u6570\u3092\u4f7f\u3063\u3066\n\n```py3\ndef Q_values(self, states):\n    res = self.model.predict(np.array([states]))\n    return res[0]\n```\n\n\u3067\u3044\u3044\u3067\u3059\u3057\uff0cexperience memory\u306e\u90e8\u5206\u306f\uff0c\n\n```py3\n# training\nself.model.fit(np.array(state_minibatch), np.array(y_minibatch), batch_size=minibatch_size,nb_epoch=1,verbose=0)\n```\n\n\u3068\u306a\u308a\u307e\u3059\uff0e\u30e2\u30c7\u30eb\u306esave, load\u306f\n\n```py3\ndef load_model(self, model_path=None):\n\n    yaml_string = open(os.path.join(f_model, model_filename)).read()\n    self.model = model_from_yaml(yaml_string)\n    self.model.load_weights(os.path.join(f_model, weights_filename))\n\n    self.model.compile(loss='mean_squared_error',\n                       optimizer=RMSProp(lr=self.learning_rate),\n                       metrics=['accuracy'])\n\ndef save_model(self, num=None):\n    yaml_string = self.model.to_yaml()\n    model_name = 'dqn_model{0}.yaml'.format((str(num) if num else ''))\n    weight_name = 'dqn_model_weights{0}.hdf5'.format((str(num) if num else ''))\n    open(os.path.join(f_model, model_name), 'w').write(yaml_string)\n    self.model.save_weights(os.path.join(f_model, weight_name))\n\n```\n\n\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\u30b3\u30f3\u30d1\u30af\u30c8\u3067\u3059\uff0e\n\n\u3053\u306e\u5b9f\u88c5\u306f\u308f\u304b\u308a\u3084\u3059\u3055\uff0c\u30b3\u30f3\u30d1\u30af\u30c8\u3055\u306b\u91cd\u304d\u3092\u7f6e\u3044\u305f\u3082\u306e\u306b\u306a\u3063\u3066\u3044\u305f\u305f\u3081\uff0c\u672c\u6765\u306eDQN\u3068\u306f\u7570\u306a\u308b\u70b9\u304c\u3044\u304f\u3064\u304b\u3042\u308a\u307e\u3059\uff0e\n\n- target network\u304c\u306a\u3044\n- loss\u95a2\u6570\u3067\u30af\u30ea\u30c3\u30d4\u30f3\u30b0\u3092\u3057\u3066\u3044\u306a\u3044\n- \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u7573\u307f\u8fbc\u307f\u3092\u4f7f\u3063\u3066\u3044\u306a\u3044\n- optimizer\u3068\u3057\u3066\u901a\u5e38\u306eRMSProp\u3092\u4f7f\u3063\u3066\u304a\u308a\uff0cDQN\u3067\u63a8\u5968\u3055\u308c\u3066\u3044\u308bRMSPropGraves\u3067\u306f\u306a\u3044\n- (replay memory\u3092\u6e80\u5e06\u306b\u3057\u3066\u304b\u3089\u5b66\u7fd2\u958b\u59cb)\n- (Q\u5024\u306b\u95a2\u4fc2\u306a\u304frandom\u306b\u884c\u52d5\u9078\u629e\u3059\u308b\u5272\u5408\u30921\u304b\u3089\u7dda\u5f62\u306b\u964d\u4e0b\u3055\u305b\u3066\u3044\u304f)\n\n\u4eca\u56de\u306f\u3053\u308c\u3089\u306e\u70b9\u306b\u3042\u305f\u308a\u3064\u3064\uff0cKeras\u3067\u5b9f\u88c5\u3057\u3066\u3044\u304f\u969b\u306b\u3064\u307e\u3063\u305f\u30dd\u30a4\u30f3\u30c8\u3092\u8ff0\u3079\u3066\u3044\u304d\u307e\u3059\uff0e\n\n## Tips1: \u30e2\u30c7\u30eb\u306e\u30b3\u30d4\u30fc\n\nDQN\u3067\u306f\uff0c\u9078\u629e\u3057\u305faction\u3092\u904e\u5927\u8a55\u4fa1\u3057\u306a\u3044\u3088\u3046\uff0cexperience memory\u3092\u884c\u3046(\u884c\u52d5\u3092\u8a55\u4fa1\u3059\u308b)\u969b\u3068\uff0c\u884c\u52d5\u9078\u629e\u3092\u9078\u629e\u3059\u308b\u969b\u3067\u4f7f\u3046\u30e2\u30c7\u30eb\u3092\u5206\u3051\u308b\u3068\u3044\u3046\u65b9\u7b56\u304c\u3068\u3089\u308c\u3066\u3044\u307e\u3059\uff0e\u5143\u3005\u306e\u8ad6\u6587[1]\u3067\u306f\u4e21\u8005\u3067\u540c\u3058\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u3066\u304a\u308a\uff0cnature\u306b\u63b2\u8f09\u3055\u308c\u305f2015\u5e74\u306e\u8ad6\u6587[2]\u3067\u306f\uff0c\u4e21\u8005\u3092\u5206\u3051\u3066\u65b0\u3057\u304ftarget network\u3092\u5c0e\u5165\u3057\u3066\u3044\u307e\u3059\uff0e\u3053\u308c\u306b\u3088\u3063\u3066\uff0c\u53e4\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u6559\u5e2b\u4fe1\u53f7\u3092\u4f5c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\uff0c\u3053\u306e\u3042\u305f\u308a\u306e\u89e3\u8aac\u306f\uff0c\n\n[introduction to double deep Q-learning](http://www.slideshare.net/ssuser07aa33/introduction-to-double-deep-qlearning)\n\n\u306b\u5927\u5909\u308f\u304b\u308a\u3084\u3059\u304f\u89e3\u8aac\u3055\u308c\u3066\u3044\u307e\u3059\u306e\u3067\uff0c\u662f\u975e\u305d\u3061\u3089\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\uff0e\n\n\u5b9f\u88c5\u9762\u306e\u8a71\u3067\u306f\uff0c\u4f55\u30d5\u30ec\u30fc\u30e0\u304b\u306b\u4e00\u56de\uff0c\u884c\u52d5\u9078\u629e\u306b\u5229\u7528\u3057\u3066\u3044\u308b\u30e2\u30c7\u30eb\u3092\u30b3\u30d4\u30fc\u3057\u3066\uff0c\u30bf\u30fc\u30b2\u30c3\u30c8\u30e2\u30c7\u30eb\u306b\u6e21\u3055\u306a\u3051\u308c\u3070\u3044\u3051\u307e\u305b\u3093\uff0e\nKeras\u3067\u306f\u3069\u3046\u3059\u308b\u304b\u3068\u3044\u3046\u3068\uff0c\n\n```\nfrom keras.models import model_from_config\n\ndef clone_model(model, custom_objects={}):\n    config = {\n        'class_name': model.__class__.__name__,\n        'config': model.get_config(),\n    }\n    clone = model_from_config(config, custom_objects=custom_objects)\n    clone.set_weights(model.get_weights())\n    return clone\n\nself.target_model = clone_model(self.model)\n```\n\n\u306e\u3088\u3046\u306b\uff0c\u30e2\u30c7\u30eb\u3068\u91cd\u307f\u3092\u305d\u308c\u305e\u308c\u65b0\u3057\u3044\u30e2\u30c7\u30eb\u306b\u6e21\u3059\u3053\u3068\u3067\u30b3\u30d4\u30fc\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\n\u305f\u3060\uff0c\n\n```py3\nimport copy\nself.target_model = copy.copy(self.model)\n## deepcopy\u306f\u30a8\u30e9\u30fc\u306b\u306a\u308b\n# self.target_model = copy.deepcopy(self.model)\n```\n\n\u306e\u3088\u3046\u306b\u6a19\u6e96copy\u95a2\u6570\u3067\u3082\uff0c\u30e2\u30c7\u30eb\uff0c\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u30b3\u30d4\u30fc\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\uff08\u516c\u5f0f\u306b\u306f\u307f\u3064\u3051\u3089\u308c\u307e\u305b\u3093\u3067\u3057\u305f\uff09\u304c\uff0c\u3061\u3087\u3063\u3068\u6319\u52d5\u304c\u3053\u308f\u3044\u306e\u3067\u5148\u306e\u65b9\u6cd5\u306e\u307b\u3046\u304c\u3088\u3044\u3067\u3057\u3087\u3046\uff0e\n\n\u4eca\u56de\u306f\uff0cclone_model\u3092\u3064\u304b\u3063\u3066\u5b9a\u671f\u7684\u306btarget_model\u306b\u73femodel\u3092\u30b3\u30d4\u30fc\u3057\uff0cQ\u5024\u3092\u8a55\u4fa1\u66f4\u65b0\u3059\u308b\u969b\u306b\u306ftarget_model\u3092\u7528\u3044\u308b\u3088\u3046\u306b\u3057\u307e\u3059\uff0e\uff08\u4f59\u8ac7\u3067\u3059\u304c\u6539\u826f\u7248DQN\u306eDDQN\u3067\u306f\uff0c'\u73femodel\u306b\u72b6\u614b\u3092\u5165\u308c\u3066\u51fa\u305f\u6700\u5927\u306eQ\u5024\u3092\u3068\u308baction'(A)\u3092\u3082\u3068\u3081\uff0ctarget model\u306b\u72b6\u614b\u3092\u5165\u308c\u3066\u51fa\u305fQ\u5024\u3067A\u306b\u5bfe\u5fdc\u3059\u308b\u3082\u306e\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\uff09\n\n```py3\ndef Q_values(self, states, isTarget=False):\n    model = self.target_model if isTarget else self.model\n    res = model.predict(np.array([states]))\n    return res[0]\n\ndef store_experience(self, states, action, reward, states_1, terminal):\n    self.D.append((states, action, reward, states_1, terminal))\n    return (len(self.D) >= self.replay_memory_size)\n\ndef experience_replay(self):\n    state_minibatch = []\n    y_minibatch = []\n    action_minibatch = []\n\n    # sample random minibatch\n    minibatch_size = min(len(self.D), self.minibatch_size)\n    minibatch_indexes = np.random.randint(0, len(self.D), minibatch_size)\n\n    for j in minibatch_indexes:\n        state_j, action_j, reward_j, state_j_1, terminal = self.D[j]\n        action_j_index = self.enable_actions.index(action_j)\n\n        y_j = self.Q_values(state_j)\n\n        if terminal:\n            y_j[action_j_index] = reward_j\n        else:\n            if not self.use_ddqn:\n                v = np.max(self.Q_values(state_j_1, isTarget=True))\n            else: # for DDQN\n                v = self.Q_values(state_j_1, isTarget=True)[action_j_index]\n            y_j[action_j_index] = reward_j + self.discount_factor * v\n\n        state_minibatch.append(state_j)\n        y_minibatch.append(y_j)\n        action_minibatch.append(action_j_index)\n\n    # training\n    self.model.fit(np.array(state_minibatch), np.array(y_minibatch), verbose=0)\n```\n\n## Tips2: loss\u95a2\u6570\u306e\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\n\n\u5148\u307b\u3069\u306e\u4f8b\u3067\u306f\u5358\u7d14\u306b'mean_squared_error'\u3092\u4f7f\u3063\u3066\u3044\u307e\u3057\u305f\u304c\uff0cDQN\u3067\u306f\u5b66\u7fd2\u306e\u5b89\u5b9a\u6027\u3092\u5411\u4e0a\u3055\u305b\u308b\u305f\u3081\u306b\u3001\u30a8\u30e9\u30fc\u3067\u3042\u308b`target \u2212 Q(s,a;\u03b8)`\u306e\u5024\u3092-1\u304b\u30891\u306e\u7bc4\u56f2\u3067\u30af\u30ea\u30c3\u30d7\u3057\u307e\u3059\uff0e\u3053\u306e\u3042\u305f\u308a\u306f\n\n[DQN\u3092Keras\u3068TensorFlow\u3068OpenAI Gym\u3067\u5b9f\u88c5\u3059\u308b](https://elix-tech.github.io/ja/2016/06/29/dqn-ja.html)\n\n\u306b\u5927\u5909\u308f\u304b\u308a\u3084\u3059\u304f\u89e3\u8aac\u3055\u308c\u3066\u307e\u3059\u306e\u3067\uff0c\u662f\u975e\u305d\u3061\u3089\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\uff0e\n\nKeras\u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u6570\u7a2e\u985e\u306eloss\u95a2\u6570\u3092\u7528\u610f\u3057\u3066\u304a\u308a\uff0c`'mean_squared_error'`\u306e\u3088\u3046\u306b\u540d\u524d\u3092\u66f8\u304f\u3060\u3051\u3067\u4f7f\u3048\u307e\u3059\u304c\uff0c\u4eca\u56de\u306e\u3088\u3046\u306b\u81ea\u5206\u3067loss\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u305f\u304f\u306a\u308b\u3053\u3068\u306f\u307e\u307e\u3042\u308a\u307e\u3059\uff0e\n\n\u3082\u3061\u308d\u3093\uff0cKeras\u306b\u306f\u305d\u306e\u305f\u3081\u306e\u65b9\u6cd5\u304c\u7528\u610f\u3055\u308c\u3066\u304a\u308a\uff08\u82e5\u5e72\u53d6\u308a\u56de\u3057\u304c\u60aa\u3044\u3067\u3059\u304c\uff09\n\n```py3\ndef loss_func(y_true, y_pred):\n    error = tf.abs(y_pred - y_true)\n    quadratic_part = tf.clip_by_value(error, 0.0, 1.0)\n    linear_part = error - quadratic_part\n    loss = tf.reduce_sum(0.5 * tf.square(quadratic_part) + linear_part)\n    return loss\n\nself.model.compile(loss=loss_func, optimizer='rmsprops', metrics=['accuracy'])\n```\n\n\u306e\u3088\u3046\u306b\u72ec\u81ea\u3067loss\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff08y_true\u304c\u6559\u5e2b\u30c7\u30fc\u30bf\uff0cy_pred\u304c\u30e2\u30c7\u30eb\u306e\u51fa\u529b\u3067\u3059\uff09\uff0emodel.fit\u3084model.evaluate\u3092\u547c\u3073\u51fa\u3057\u305f\u969b\u306f\u3053\u3061\u3089\u306e\u95a2\u6570\u304c\u4f7f\u308f\u308c\u307e\u3059\uff0e\n\n[\u53c2\u8003]\u3000[How to use a custom objective function for a model? #369](https://github.com/fchollet/keras/issues/369)\n\n\u82e5\u5e72\u53d6\u308a\u56de\u3057\u304c\u60aa\u3044\uff0c\u3068\u3044\u3063\u305f\u306e\u306floss\u95a2\u6570\u306by_true, y_pred\u4ee5\u5916\u306e\u5916\u90e8\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5c0e\u5165\u3059\u308b\u306e\u304c\u975e\u5e38\u306b\u3084\u3063\u304b\u3044\u3060\u304b\u3089\u3067\u3059\uff0e\n\u4eca\u56de\u306e\u4f8b\u3067\u306f\uff0cexperience memory\u306b\u3066y_true\u306b\u4ee3\u5165\u3059\u308b\u5024\u3068\u3057\u3066\uff0c\u73femodel\u304b\u3089\u306e\u51fa\u529bQ\u5024\u30ea\u30b9\u30c8\u3092\u305d\u306e\u307e\u307e\u4ee3\u5165\uff08\u66f4\u65b0\u304c\u3042\u308b\u90e8\u5206\u3060\u3051\u3092\u66f4\u65b0\uff09\u3057(`[1.2, 0.5, 0.1] -> [1.3, 0.5, 0.1]`)\uff0c\u3000loss\u95a2\u6570\u5185\u90e8\u3067\u73femodel\u304b\u3089\u306e\u51fa\u529bQ\u5024\u30ea\u30b9\u30c8\u3068\u306e\u7d76\u5bfe\u5024\u5dee\u5206\u3092\u3068\u3063\u3066\u3044\u307e\u3059\uff0e\u305d\u306e\u305f\u3081\uff0c`error`\u3067\u306f\u66f4\u65b0\u304c\u3042\u3063\u305f\u90e8\u5206\u306e\u307f\u306b\u5024\u304c\u6b8b\u308a\uff0c\u4ed6\u306f0\u306b\u306a\u3063\u3066\u3044\u307e\u3059(`[1.3, 0.5, 0.1] - [1.2, 0.5, 0.1] = [0.1, 0, 0]`)\uff0e\u6700\u7d42\u7684\u306b\u306f\u66f4\u65b0\u304c\u3042\u3063\u305f\u90e8\u5206\u3057\u304bloss\u5024\u306b\u5f71\u97ff\u3057\u306a\u3044\u3088\u3046\u306b\u306a\u3063\u3066\u304a\u308a\uff0c\u4ed6\u306e\u5916\u90e8\u5909\u6570\u306f\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\uff0e\n\n\u3057\u304b\u3057\uff0closs\u95a2\u6570\u306b\u6559\u5e2b\u4fe1\u53f7\uff08\u66f4\u65b0\u5024\u306e\u307f\uff09(`1.3`)\uff0c\u30e2\u30c7\u30eb\u51fa\u529b(`[1.2, 0.5, 0.1]`)\uff0c\u9078\u629e\u30a2\u30af\u30b7\u30e7\u30f3(`0`)\u3092\u6e21\u3057\uff0c\u30e2\u30c7\u30eb\u5185\u3067\u305d\u308c\u3089\u304b\u3089loss\u5024\u3092\u8a08\u7b97\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u9014\u7aef\u306b\u9762\u5012\u306b\u306a\u308a\u307e\u3059\uff0e Tensorflow\u3067\u306f\n\n```py3\nstate = tf.placeholder(tf.float32, [None, 8, 8]) # \u72b6\u614b\na = tf.placeholder(tf.int64, [None])  # \u884c\u52d5\nsupervisor = tf.placeholder(tf.float32, [None])  # \u6559\u5e2b\u4fe1\u53f7\noutput = self.inference(state)\n\nloss = lossfunc(output, supervisor)\n\n...\n\nloss_val = sess.run(loss, feed_dict={\n            self.state: np.float32(np.array(state_batch),\n            self.action: action_batch,\n            self.super_visor: y_batch\n        })\n\ndef lossfunc(self, a, output, supervisor)\n\n        a_one_hot = tf.one_hot(a, self.num_actions, 1.0, 0.0)  # \u884c\u52d5\u3092one hot vector\u306b\u5909\u63db\u3059\u308b\n        q_value = tf.reduce_sum(tf.mul(output, a_one_hot), reduction_indices=1)  # \u884c\u52d5\u306eQ\u5024\u306e\u8a08\u7b97\n\n        # \u30a8\u30e9\u30fc\u30af\u30ea\u30c3\u30d7\n        error = tf.abs(supervisor - q_value)\n        quadratic_part = tf.clip_by_value(error, 0.0, 1.0)\n        linear_part = error - quadratic_part\n        loss = tf.reduce_mean(0.5 * tf.square(quadratic_part) + linear_part)  # \u8aa4\u5dee\u95a2\u6570\n```\n\n\u306e\u3088\u3046\u306b\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u306b\u304b\u3051\u307e\u3059\u304c\uff0cKeras\u3067\u306f\u305d\u3046\u3082\u3044\u304d\u307e\u305b\u3093\uff0c\u3069\u3046\u3059\u308b\u304b\u3068\u3044\u3046\u3068\uff0cy_true, y_pred, \u305d\u306e\u4ed6\u5916\u90e8\u95a2\u6570\u3092\u5165\u529b\u3068\u3057\uff0closs\u5024\u3092\u51fa\u529b\u3068\u3059\u308b\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\n\n## Tips3: \u8907\u6570\u5165\u529b\uff0c\u8907\u6570\u51fa\u529b\n\n```py3\nfrom keras.layers.core import Dense, Dropout, Activation, Flatten\nfrom keras.layers import Lambda, Input\n\nlosses = {'loss': lambda y_true, y_pred: y_pred, #dummy loss func\n          'main_output': lambda y_true, y_pred: K.zeros_like(y_pred)} \n\ndef customized_loss(args):\n    import tensorflow as tf\n    y_true, y_pred, action = args\n    a_one_hot = tf.one_hot(action, K.shape(y_pred)[1], 1.0, 0.0)\n    q_value = tf.reduce_sum(tf.mul(y_pred, a_one_hot), reduction_indices=1)\n    error = tf.abs(q_value - y_true)\n    quadratic_part = tf.clip_by_value(error, 0.0, 1.0)\n    linear_part = error - quadratic_part\n    loss = tf.reduce_sum(0.5 * tf.square(quadratic_part) + linear_part)\n    return loss\n\n...\n\ndef init_model(self):\n\n    state_input = Input(shape=(1, 8, 8), name='state')\n    action_input = Input(shape=[None], name='action', dtype='int32')\n\n    x = Flatten()(state_input)\n    x = Dense(32, activation='relu')(x)\n    y_pred = Dense(3, activation='linear', name='main_output')(x)\n\n    y_true = Input(shape=(1, ), name='y_true')\n    loss_out = Lambda(customized_loss, output_shape=(1, ), name='loss')([y_true, y_pred, action_input])\n    self.model = Model(input=[state_input, action_input, y_true], output=[loss_out, y_pred])\n\n    self.model.compile(loss=losses,\n                       optimizer=RMSprop(lr=self.learning_rate),\n                       metrics=['accuracy'])\n\nslef.init_model()\n\n...\n\nres = model.predict({'state': np.array([states]),\n                     'action': np.array([0]), #dummy\n                     'y_true': np.array([[0] * self.n_actions]) #dummy\n                     })\nreturn res[1][0]\n...\n\nself.model.fit({'action': np.array(action_minibatch),\n                'state': np.array(state_minibatch),\n                'y_true': np.array(y_minibatch)},\n                [np.zeros([minibatch_size]),\n                 np.array(y_minibatch)],\n                 batch_size=minibatch_size,\n                 nb_epoch=1,\n                 verbose=0)\n```\n\n...\u5727\u5012\u7684\u306b\u9762\u5012\uff0eKeras\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u304b\u306a\u308a\u30b7\u30f3\u30d7\u30eb\u304b\u3051\u308b\u4ed5\u7d44\u307f\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\uff0c\u305d\u3053\u304b\u3089\u3061\u3087\u3063\u3068\u5916\u308c\u305f\u3053\u3068\u3092\u3084\u308d\u3046\u3068\u3059\u308b\u3068\u4e00\u6c17\u306b\u9762\u5012\u304f\u3055\u304f\u306a\u3063\u3066\u304d\u307e\u3059\uff0e\n\n\u5148\u307b\u3069\u3068\u5909\u308f\u3063\u305f\u70b9\u306f\uff0c\n\n- \u5165\u529b\u306b\u65b0\u305f\u306baction_input\u304c\u52a0\u308f\u3063\u3066\u3044\u308b\n- y_true\u3082\u5165\u529b\u3068\u3057\u3066\u6271\u3063\u3066\u3044\u308b\uff08\u5165\u529b\u306f3\u3064\uff09\n- loss\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306b\u72ec\u81ea\u30ec\u30a4\u30e4\u30fc\u5b9a\u7fa9\u306b\u7528\u3044\u308bLambda\u3092\u4f7f\u3063\u3066\u3044\u308b\n- \u51fa\u529b\u3068\u3057\u3066loss\u5024\u3068Q\u5024\u3092\u51fa\u3059\u3088\u3046\u306b\u3057\u3066\u3044\u308b\n\n\u70b9\u3067\u3059\uff0e\u3064\u3089\u3044\uff0eloss\u95a2\u6570\u306e\u5f15\u6570\u3092\u5909\u3048\u308b\u7b49\u306e\u5927\u5e45\u306a\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u304c\u51fa\u6765\u306a\u3044\u4ee5\u4e0a\u3053\u3046\u305b\u3056\u308b\u3092\u3048\u307e\u305b\u3093\uff0e\u3061\u306a\u307f\u306b\u3053\u306e\u65b9\u6cd5\u306fKeras\u516c\u5f0f\u306eexample(<https://github.com/fchollet/keras/blob/master/examples/image_ocr.py>)\u306b\u8f09\u3063\u3066\u3044\u307e\u3059\uff0e\n\n\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3066\u306f\uff0c\n\n- Lambda\u3092\u4f7f\u3046\u3053\u3068\u3067\uff0c\u30a4\u30f3\u30d7\u30c3\u30c8\u3068\u5c64\u5185\u306e\u51e6\u7406\uff0c\u51fa\u529b\u306e\u5f62\u3092\u81ea\u7531\u306b\u8a2d\u8a08\u3067\u304d\u308b\uff0e\n- \u30a4\u30f3\u30d7\u30c3\u30c8\uff0c\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u306bname\u3092\u3064\u304b\u3063\u3066\u540d\u524d\u3092\u3064\u3051\uff0cprediction, fit\u6642\u306b\u4f7f\u7528\u3057\u3066\u3044\u308b\uff0e\n- \u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u304c\u8907\u6570\u3042\u308b\u969b\u306b\u306f\u305d\u308c\u305e\u308c\u306bloss\u95a2\u6570\u3092\u9069\u7528\u3067\u304d\u308b\uff0e\n- model\u306e\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u306bloss\u5024\u304c\u542b\u307e\u308c\u308b\u305f\u3081\uff0cmodel.compile\u6642\u306b\u6307\u5b9a\u3059\u308bloss\u95a2\u6570\u306f\u30c0\u30df\u30fc\u3067\u3088\u304f\uff0closs\u5024\u306b\u304b\u3051\u308b\u95a2\u6570\u306f\u5024\u3092\u305d\u306e\u307e\u307e\u51fa\u529b\u3057\uff0cQ\u5024\u306b\u304b\u3051\u308b\u95a2\u6570\u306f\u5e38\u306b\u51fa\u529b0\u306b\u306a\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e\n- predict\u3092\u547c\u3073\u51fa\u3059\u969b\u306b\u306f\u4f7f\u308f\u306a\u3044\u30a4\u30f3\u30d7\u30c3\u30c8\u306b\u306f\u30c0\u30df\u30fc\u5024\u3092\u6307\u5b9a\u3057\uff08\u4e0d\u8981\uff1f\uff09\uff0cfit\u3092\u547c\u3073\u51fa\u3059\u969b\u306b\u306f\uff0c\u6559\u5e2b\u4fe1\u53f7\u3082\u30a4\u30f3\u30d7\u30c3\u30c8\u3068\u3057\u3066\u3042\u3064\u304b\u3046\uff0e\n\n\u3068\u3044\u3063\u305f\u3068\u3053\u308d\u3067\u3057\u3087\u3046\u304b\uff0e\n\u6b63\u76f4\u3053\u3093\u306a\u66f8\u304d\u65b9\u3092\u3059\u308b\u304f\u3089\u3044\u306a\u3089Tensorflow\u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u30de\u30b7\u8aac\u3082\u3042\u308a\u307e\u3059\u304c\uff0cKeras\u30aa\u30f3\u30ea\u30fc\u3067\u66f8\u304f\u306a\u3089\u3053\u306e\u3088\u3046\u306a\u611f\u3058\u306b\u306a\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff0e\u30e2\u30c7\u30eb\u7d44\u3060\u3051Keras\u3067\u3084\u3063\u3066\uff0c\u6b8b\u308a\u306e\u90e8\u5206\u306fTensorflow\u3092\u4f7f\u3046\u3068\u3044\u3046\u65b9\u6cd5\u3082\u3042\u308a\u307e\u3059\uff0e\n\n## Tips4: optimizer\u306e\u5909\u66f4\n\n\u8a18\u4e8b\u304c\u601d\u3063\u305f\u3088\u308a\u9577\u304f\u306a\u3063\u3066\u304d\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u8a73\u3057\u3044\u89e3\u8aac\u306f\u7701\u304d\u307e\u3059\u304c\uff08\u5f8c\u65e5\u8ffd\u8a18\u3059\u308b\u304b\u3082\uff1f\uff09\uff0cDQN\u3067\u306foptimizer\u3068\u3057\u3066\u901a\u5e38\u306eRMSProp\u3067\u306f\u306a\u304fRMSPropGraves\u3092\u7528\u3044\u308b\u3068\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u51fa\u3084\u3059\u3044\u3068\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u6a5f\u68b0\u5b66\u7fd2\u521d\u5fc3\u8005\u306a\u306e\u3067\uff0c\u5f0f\u3092\u898b\u3066\u3082\u306a\u305c\u65e9\u304f\u306a\u308b\u306e\u304b\u3055\u3063\u3071\u308a\u306a\u306e\u3067\u3059\u304c\uff08\u3069\u306a\u305f\u304b\u304a\u6559\u3048\u304f\u3060\u3055\u3044...\uff09\uff0c\u5b66\u7fd2\u304c\u65e9\u304f\u306a\u308b\u3068\u306e\u3053\u3068\u306a\u3089\u662f\u975e\u4f7f\u3044\u305f\u3044\u3068\u3053\u308d\u3067\u3059(DQN+RNN\u306e\u8ad6\u6587\u7b49\u306f\u5225\u306eoptimizer\u3092\u4f7f\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059)\uff0e\u3057\u304b\u3057\uff0cChainer\u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3044\u3063\u3066\u3044\u308b\u3053\u306eRMSPropsGraves\u3067\u3059\u304c\uff0cTensorflow\uff0cKeras\u306b\u306f\u5165\u3063\u3066\u3044\u307e\u305b\u3093(\u8a66\u3057\u3066\u3044\u307e\u305b\u3093\u304cChainer\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u306eKeras\u3067\u3042\u308c\u3070\u4f7f\u3048\u308b\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093)\uff0e\n\u305d\u306e\u305f\u3081\uff0c\u81ea\u5206\u3067optimizer\u3092\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0eTensorflow\u7248\u306f\n\n[\u3044\u307e\u3055\u3089\u3060\u3051\u3069Tensorflow\u3067DQN\uff08\u5b8c\u5168\u7248\uff09\u3092\u5b9f\u88c5\u3059\u308b\n](http://qiita.com/yuishihara/items/73e8f8c4a30b8148d9fc)\n\n\u3053\u3061\u3089\u3067\u8a73\u3057\u304f\u89e3\u8aac\u3055\u308c\u3066\u3044\u307e\u3059\u306e\u3067\uff0c\u305d\u3061\u3089\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\uff0e\u8ad6\u6587[3]\u306b\u4e57\u3063\u3066\u3044\u308b\u5f0f\u3092\u307f\u308c\u3070\u5b9f\u88c5\u3067\u304d\u307e\u3059\uff0e\n\nepoch\u3092\u91cd\u306d\u3066\u884c\u3063\u305f\u6642\u306eloss\u5024\u306e\u63a8\u79fb\u306e\u9055\u3044\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\uff0e\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/59864/1ec26f5b-3474-3240-2247-9ceda107fed6.png)\n\n\n\u8d64\u304cRMSProp\u3067\u56de\u3057\u305f\u3082\u306e\uff0c\u9752\u304cRMSPropGraves\u3067\u56de\u3057\u305f\u3082\u306e\u3067\u3059\uff0e\n\u306f\u3058\u3081\u306e\u3046\u3061\u306fRMSPropGraves\u306e\u65b9\u304c\u512a\u52e2\u304b\u3068\u601d\u308f\u308c\u307e\u3057\u305f\u304c\uff0c2000\u56de\u56de\u3059\u3068\u4e21\u8005\u540c\u7a0b\u5ea6\u306e\u6240\u306b\u843d\u3061\u7740\u304d\u307e\u3057\u305f\uff0e\u8ab2\u984c\u304c\u7c21\u5358\u3060\u3063\u305f\u305b\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e\n\n\nKeras\u3067\u306foptimizer\u306e\u5b9a\u7fa9\u306f<https://github.com/yukiB/keras/blob/master/keras/optimizers.py>\u306b\u5168\u90e8\u3042\u308a\u307e\u3059\u306e\u3067\uff0c\u3053\u3053\u3092\u66f8\u304d\u63db\u3048\u3066\u3042\u3052\u308c\u3070\u826f\u3055\u305d\u3046\u3067\u3059\uff0eWIP\u3067\u3059\u304c\uff0c[github](https://github.com/yukiB/keras)\u306b\u30b3\u30fc\u30c9\u3092\u3042\u3052\u3066\u304a\u304d\u307e\u3059\uff0e\n\n# \u3082\u3046\u5c11\u3057\u8907\u96d1\u306a\u30b2\u30fc\u30e0\u3067\u8a66\u3059\n\n\u3053\u3053\u307e\u3067\u3067\u5927\u5206\u30e2\u30c7\u30eb\u306e\u6027\u80fd\u3082\u6539\u5584\u3057\u305f\u306f\u305a\u306a\u306e\u3067\uff0c\u30d4\u30af\u30bb\u30eb\u6570\u3092\u3075\u3084\u3057\uff0c\u5168\u7d50\u5408\u306e\u524d\u306bConv\u5c64\u30923\u5c64\u8ffd\u52a0\u3057\u3066\u307f\u307e\u3059\uff0e\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/59864/d498ba59-58c3-daff-9780-a4ed12ee43d3.png)\n\n1000\u56de\u56de\u3057\u305f\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\uff0e\n![demo-catch_ball16.gif](https://qiita-image-store.s3.amazonaws.com/0/59864/c6a488f1-e1f6-ccca-f637-1e3b0cff7d45.gif)\n\n\n\u7d9a\u3044\u3066\uff0c\u3082\u3046\u5c11\u3057\u8907\u96d1\u306a\u30b2\u30fc\u30e0\u3092\u4f5c\u308a\uff0c\u540c\u3058\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u3066\u5b66\u7fd2\u3092\u56de\u3057\u3066\u307f\u307e\u3059\uff0e\n\u30ac\u30e9\u30b1\u30fc\u6642\u4ee3\u306b\u3068\u3066\u3082\u306f\u3084\u3063\u305fCAVE\u3068\u3044\u3046\u30b2\u30fc\u30e0\u3092\u7c21\u5358\u306bmatplotlib\u3067\u5b9f\u88c5\u3057\u307e\u3057\u305f\uff0e\n\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068\u4e0a\u6607\uff0c\u96e2\u3059\u3068\u4e0b\u964d\u3059\u308b\u3046\u306b\u3087\u3046\u306b\u3087\u3057\u305f\u3084\u3064\u3092\uff0c\u3067\u304d\u308b\u3060\u3051\u58c1\u306b\u3076\u3064\u304b\u3089\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u9032\u3081\u3066\u3044\u304f\u30b2\u30fc\u30e0\u3067\u3059\uff0e\n\n\u30b2\u30fc\u30e0\u753b\u9762\u306f48x48\u3067\uff0c\u5148\u307b\u3069\u4f5c\u3063\u305f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af(Conv3\u5c64+\u5168\u7d50\u5408Relu)\u3092\u3064\u304b\u3063\u3066\uff0c\n\n- \u5165\u529b: \u30c0\u30a6\u30f3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u305f\u76f4\u8fd14\u30d5\u30ec\u30fc\u30e0\n- \u51fa\u529b: \u30dc\u30bf\u30f3\u5165\u529b\uff08ON, OFF\uff09\n\n\u3068\u306a\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\uff0e\n\n\u7d50\u679c\u3068\u3057\u3066\u306f\u4e0a\u4e0b\u306e\u58c1\u306b\u3076\u3064\u304b\u308b\u3053\u3068\u306f\u307e\u305a\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u304c\uff0c\u9053\u4e2d\u306e\u30d6\u30ed\u30c3\u30af\u306b\u5bfe\u3059\u308b\u56de\u907f\u306f\u3042\u307e\u308a\u5b66\u7fd2\u3057\u3066\u304f\u308c\u305a\uff0c\u30b9\u30b3\u30a2\u304c\u4f38\u3073\u307e\u305b\u3093\u3067\u3057\u305f\uff0e\u4e00\u5fdc\u5165\u529b\u30c7\u30fc\u30bf\u3068\u3057\u30664\u30d5\u30ec\u30fc\u30e0\u5206\u306f\u3068\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u304c\uff0c\u30d6\u30ed\u30c3\u30af\u540c\u58eb\u306e\u4f4d\u7f6e\u95a2\u4fc2\u306b\u3088\u3063\u3066\u306f\u3082\u3063\u3068\u9061\u3063\u305f\u30d5\u30ec\u30fc\u30e0\u30c7\u30fc\u30bf\u304c\u52b9\u3044\u3066\u304f\u308b\u3053\u3068\u3082\u8003\u3048\u3089\u308c\u308b\u306e\u3067\uff0cLSTM\u3092\u7d44\u307f\u5408\u308f\u305b\u305fDQN\u7b49\u3082\u691c\u8a0e\u3057\u305f\u307b\u3046\u304c\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e\u3053\u306e\u3042\u305f\u308a\u306e\u8a71\u306f\u307e\u305f\u6b21\u56de\n\n![demo-cave2.gif](https://qiita-image-store.s3.amazonaws.com/0/59864/78af77ed-882b-72c1-983b-1ba0036cb048.gif)\n\n\n(\u5b66\u7fd2\u7d50\u679c\u3092\u307f\u3066\u308b\u3060\u3051\u3067\u7121\u9650\u306b\u6642\u9593\u304c\u904e\u304e\u3066\u3057\u307e\u3063\u3066\u5371\u306a\u3044)\n\n# \u304a\u308f\u308a\u306b\n\n\u4eca\u56de\u306fKeras\u3067DQN\u3092\u7d44\u3080\u306b\u3042\u305f\u3063\u3066\uff0c\u521d\u5fc3\u8005\u304c\u8e93\u304d\u3084\u3059\u305d\u3046\u306a\u3068\u3053\u308d\u3092\u53d6\u308a\u4e0a\u3052\u3066\u307f\u307e\u3057\u305f\uff0e\n\u521d\u3081\u3066\u306e\u5f37\u5316\u5b66\u7fd2\u3068\u3044\u3046\u3053\u3068\u3067\u4eca\u56de\u306fDQN\u3092\u6271\u3044\u307e\u3057\u305f\u304c\uff0c\u304b\u306a\u308a\u6642\u4ee3\u306b\u4e57\u308a\u9045\u308c\u3066\u3044\u308b(DDQN\u3084LSTM\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u3082\u306e\u306a\u3069\u306f\u307e\u3060\u307e\u3060\u73fe\u5f79\u3067\u3059)\u306e\u3067\u6b21\u56de\u306fA3C\u7b49\u3092\u4f7f\u3063\u3066\uff08\u7d44\u3093\u3067\uff1f\uff09\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\n\u4eca\u56de\u306e\u30b3\u30fc\u30c9\u306f[\u3053\u3053](https://github.com/yukiB/keras-dqn-test)\u306b\u3042\u308a\u307e\u3059\uff0e\n\n# \u53c2\u8003\u6587\u732e\n[1] V. Mnih, K. Kavukcuoglu, D. Silver, A. Graves I. Antonoglou, D. Wierstra, M. Riedmiller. \u201cPlaying Atari with Deep Reinforcement Learning\u201d arXiv:1312.5602, 2013.\n[2] V. Mnih, et al. \u201cHuman-level control through deep reinforcement learning\u201d nature, 2015.\n[3] Alex Graves, \u201cGenerating Sequences With Recurrent Neural Networks\u201d arXiv preprint arXiv <http://arxiv.org/abs/1308.0850>\n", "tags": ["Keras", "TensorFlow", "Python", "\u6a5f\u68b0\u5b66\u7fd2", "DeepLearning"]}