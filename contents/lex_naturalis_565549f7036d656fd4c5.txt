{"context": " More than 1 year has passed since last update.Paiza Online Hackason 6 \u3092\u89e3\u3044\u3066\u307f\u3088\u3046\u3068\u3044\u3046\u3082\u306e\u3067\u3057\u305f\u3000\uff08\u6700\u5f8c\u306f\u30b3\u30fc\u30c9\u30b4\u30eb\u30d5\uff09\n\n\u7b2c1\u554f \u516d\u6751\u30ea\u30aa\n\n\u7c21\u5358\u306a\u554f\u984c\u306a\u306e\u3067\u3059\u304c\u3001\u6d6e\u52d5\u5c0f\u6570\u70b9\u306e\u7cbe\u5ea6\u306e\u305b\u3044\u3067\u7d20\u76f4\u306b\u66f8\u304f\u3068\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u901a\u3089\u306a\u3044\u3053\u3068\u304c\u3042\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u306e\u3088\u3046\u3067\u3059\uff08\u79c1\u306f\u305d\u3093\u306a\u3053\u3068\u306a\u304b\u3063\u305f\uff09\u3002\u6c17\u3092\u4f7f\u3046\u306a\u3089\u6709\u7406\u6570\u3067\u8a08\u7b97\u3057\u3066\u6700\u5f8c\u306b\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306b\u5909\u63db\u3059\u308c\u3070\u3044\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nRio.hs\nimport Data.Ratio\n\nparse = map read' . map words . tail . lines \n  where \n    read' [t,n] = ((read :: String->Int) t, (read:: String->Int) n % 1)\n    read' _ = (0, 0 % 1)\n\nprocess (w, c) (1, n) = (w+n, c)\nprocess (w, c) (2, n) = (w, c+n)\nprocess (w, c) (3, n) = (i*w, i*c) where i = (w+c-n)/(w+c)\n\nconc (w, c) = floor $ (100*c) / (w+c) \n\nmain = getContents >>= print . conc . foldl process (0 % 1, 0 % 1) . parse\n\n\n\n\u7b2c2\u554f \u9727\u5cf6\u4eac\u5b50\n\n\u7c21\u5358\u306a\u518d\u5e30\u306e\u554f\u984c\u3002\u518d\u5e30\u3067\u30de\u30b9\u3092\u3069\u3093\u3069\u3093\u9032\u3093\u3067\u3044\u304f\u3002\u5404\u30b9\u30c6\u30c3\u30d7\u3067\u7bc4\u56f2\u5916\u306b\u306f\u307f\u51fa\u308b\u30b1\u30fc\u30b9\u3067\"No\"\u3092\u8fd4\u3057\u3001\u5faa\u74b0\u3057\u3066\u3057\u307e\u3046\u30b1\u30fc\u30b9\u306b\u3064\u3044\u3066\u306f\u3001\u65e2\u306b\u6b62\u307e\u3063\u305f\u3053\u3068\u306e\u3042\u308b\u30de\u30b9\u3092\u8a18\u61b6\u3057\u3066\u304a\u3044\u3066\u305d\u3053\u306b\u884c\u304d\u5f53\u305f\u3063\u305f\u3089\"No\"\u3092\u8fd4\u3059\u3088\u3046\u306b\u3059\u308b\u3060\u3051\u3002n\u30de\u30b9\u306a\u3089n\u56de\u76ee\u307e\u3067\u306e\u518d\u5e30\u3067\u5fc5\u305a\u540c\u3058\u30de\u30b9\u30922\u5ea6\u8e0f\u3080\u304b\u3001\u7bc4\u56f2\u3092\u306f\u307f\u51fa\u308b\u304b\u3001\u30b4\u30fc\u30eb\u3059\u308b\u304b\u306b\u306a\u308b\uff08\u9ce9\u306e\u5de3\u539f\u7406\uff09\u3002\u52d5\u7684\u8a08\u753b\u6cd5\u3060\u306e\u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u3060\u306e\u3001\u3053\u3093\u306a\u554f\u984c\u306b\u305d\u3093\u306a\u3082\u3093\u8981\u308a\u3083\u3057\u307e\u305b\u3093\u3002\n\nKirishima.hs\nimport Data.Array.IArray (Array, (!), bounds, listArray)\nimport Data.Set (Set, insert, empty, member)\n\nrun :: Array Int Int -> Set Int -> Int -> String\nrun arr memo pos\n  | pos < min || pos > max = \"No\"\n  | member pos memo = \"No\"\n  | pos == max = \"Yes\"\n  | otherwise = run arr (insert pos memo) (pos + arr!pos)\n  where (min,max) = bounds arr\n\nmain = mapM_ putStrLn . solve . parse =<< getContents\n where\n  parse = construct . map words . lines \n  construct (n:ts:_:ds) = (read $ head n, map read ts, map (read . head) ds)\n  solve (n, es, ds) = map (run (listArray (0,n-1) es) empty) ds\n\n\n\u6562\u3048\u3066\u63a2\u7d22\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3084\u308b\u306a\u3089\u3070\u3001\u30b4\u30fc\u30eb\u304b\u3089\u5e45\u512a\u5148\u63a2\u7d22\u98a8\u5473\u306b\u9006\u7b97\u3057\u307e\u3059\u3002\u30b4\u30fc\u30eb\u306e\u88ab\u5230\u9054\u53ef\u80fd\u5730\u70b9\u3092\u9806\u6b21\u63a2\u7d22\u3057\u3066\u30e1\u30e2\u306b\u52a0\u3048\u3066\u3044\u304f\u3060\u3051\u3067\u3059\u3002\n\nKirishimaBis.hs\nimport Data.Set (Set, member, notMember, insert, empty, singleton)\n\nsearch :: [(Int,Int)] -> Set Int -> [Int] -> Set Int\nsearch board memo ps -- board: \u76e4\u9762 memo: \u5230\u9054\u53ef\u80fd\u5730\u70b9\u306e\u30e1\u30e2 ps: \u6700\u5f8c\u306b\u63a2\u7d22\u3057\u305f\u5230\u9054\u53ef\u80fd\u5730\u70b9\n | ps == nps = memo -- \u5230\u9054\u53ef\u80fd\u5730\u70b9\u304c\u3053\u308c\u4ee5\u4e0a\u5897\u3048\u306a\u3044\u306a\u3089\u63a2\u7d22\u7d42\u4e86\n | otherwise = search board nmemo nps -- \u65b0\u305f\u306a\u30e1\u30e2\u3068\u73fe\u30b9\u30c6\u30c3\u30d7\u306e\u63a2\u7d22\u7d50\u679c\u3067\u518d\u5e30\n where\n  step board pos = map fst $ filter (\\(i,e)->i+e==pos) board -- \u5730\u70b9pos\u3078\u5230\u9054\u53ef\u80fd\u306a\u5730\u70b9\u306e\u5217\u6319\n  nps = concatMap (step board) ps -- \u524d\u30b9\u30c6\u30c3\u30d7\u304b\u3089\u306e\u63a2\u7d22\u306e\u7d50\u679c\n  nmemo = foldr insert memo nps -- \u305d\u308c\u3092\u5230\u9054\u53ef\u80fd\u5730\u70b9\u306e\u30e1\u30e2\u306b\u8ffd\u52a0\n\nmain = mapM_ putStrLn . solve . parse =<< getContents\n where\n  parse = construct . map words . lines \n  construct (n:ts:_:ds) = (read $ head n ,map read ts, map (read . head) ds)\n  solve (n, es, ds) = map (isAccessible n $ zip [0..] es) ds\n  isAccessible n board dice\n    | dice `member` search board (singleton $ n-1) [n-1] = \"Yes\"\n    | otherwise = \"No\"\n\n\n\n\u7b2c3\u554f \u7dd1\u5ddd\u3064\u3070\u3081\n\n\u2026\u2026Piaza\u306f\u306a\u306b\u304c\u3057\u305f\u3044\u306e\uff1f\uff1f\n\nTsubame.hs\nmain = print . (\\n -> n + div n 10 + mod n 10) . read =<< getContents\n\n\n\nPOH6+ \u677e\u6c5fRuby\u4f1a\u8b70\u30df\u30c3\u30b7\u30e7\u30f3\n\n\u3053\u308c\u3082\u518d\u5e30\u3067\u66f8\u304f\u3060\u3051\u3002\u8f9e\u66f8\u9806\u306b\u30bd\u30fc\u30c8\u3055\u308c\u305f\u5358\u8a9e\u30ea\u30b9\u30c8\u304b\u3089\u9069\u5207\u306a\u56de\u6587\u3092\u4f5c\u308b\u95a2\u6570build\u3092\u8003\u3048\u308c\u3070\u3001\u7d20\u76f4\u306a\u518d\u5e30\u3067\u66f8\u3051\u308b\u3002\u771f\u3093\u4e2d\u3067\u7dba\u9e97\u306b\u6298\u534a\u3057\u3066\u93e1\u50cf\u306b\u51fa\u6765\u308b\u5834\u5408\u3068\u3001\u4e2d\u592e\u306b\u305d\u308c\u81ea\u4f53\u304c\u56de\u6587\u3067\u3042\u308b\u3088\u3046\u306a\u5358\u8a9e\u304c1\u8a9e\u631f\u307e\u308b\u5834\u5408\u3068\u304c\u3042\u308b\u306e\u3067\uff08\u3053\u306e\u5834\u5408\u306b\u306f\u5bfe\u306b\u306a\u308b\u8a9e\u304c\u6b8b\u308a\u306e\u30ea\u30b9\u30c8\u4e2d\u306b\u306a\u304f\u304b\u3064\u305d\u308c\u81ea\u4f53\u304c\u56de\u6587\u3067\u3042\u308b\u3088\u3046\u306a\u8a9e\u306e\u3046\u3061\u6700\u3082\u8f9e\u66f8\u9806\u3067\u6700\u5c0f\u306e\u3082\u306e\u2015\u2015\u3053\u308c\u3092\u84c4\u7a4d\u5f15\u6570acc\u3067\u7ba1\u7406\u3059\u308b\u2015\u2015\u304c\u4e2d\u592e\u306b\u914d\u7f6e\u3055\u308c\u308b\uff09\u3001\u305d\u3053\u3092\u5834\u5408\u5206\u3051\u3059\u308b\u3002\n\nMatsue.hs\nimport Data.List\n\nsolve ws = build \"\" ws\nbuild acc [] = acc\nbuild acc (x:xs)\n | reverse x `elem` xs = x ++ next acc ++ reverse x\n | x == reverse x && null acc = next x\n | otherwise = next acc\n where next w = build w $ delete (reverse x) xs\n\nmain = putStrLn  . solve . sort . tail . lines =<< getContents\n\n\n\u518d\u5e30\u306e\u969b\u306b\u30ea\u30b9\u30c8\u306e\u5f8c\u308d\u306b(++)\u3067append\u3059\u308b\u306e\u306f\u4e00\u822c\u306b\u611a\u7b56\u306a\u306e\u3060\u304c\u3001\u305d\u308c\u3092\u907f\u3051\u3066\n\nMatsueBis.hs\nimport Data.List\n\nsolve = build \"\" \"\"\nbuild r c [] = reverse r ++ c ++ r\nbuild r c (w:ws)\n | reverse w `elem` ws = build (reverse w++r) c next\n | w == reverse w && null c = build r w ws\n | otherwise = build r c ws\n where next = delete (reverse w) ws\n\nmain = putStrLn  . solve . sort . tail . lines =<< getContents\n\n\n\u3068\u672b\u5c3e\u518d\u5e30\u306b\u3059\u308b\u3068\u901f\u5ea6\u306f\u5411\u4e0a\u3059\u308b\u304c\u6700\u521d\u306e\u3082\u306e\u306b\u6bd4\u3079\u3066\u30b3\u30fc\u30c9\u30b4\u30eb\u30d5\u304c\u304b\u306a\u308a\u4e0d\u5229\u306b\u306a\u308b\u3002\u305d\u3053\u3067\u6562\u3048\u3066\u6700\u521d\u306e\u3082\u306e\u306e\u65b9\u3092\u63a1\u7528\u3057\u3066\u30b4\u30eb\u30d5\u3059\u308b\u3068\uff1a\n\nMatsueGolf.hs\nimport Data.List;main=interact$c\"\".sort.tail.lines;c a[]=a;c a (x:y)|r`elem`y=x++n a++r|x++a==r=n x|1>0= n a where n s=c s$delete r y;r=reverse x\n\n\n\u3053\u308c\u3067145\u30d0\u30a4\u30c8\u306b\u306a\u3063\u305f\uff08\u63a1\u70b9\u7d50\u679c\uff09\u3002\n\u3082\u3057\u6539\u5584\u6848\u304b\u3001\u3088\u308a\u77ed\u3044\u5225\u89e3\u304c\u3042\u308c\u3070\u6559\u3048\u3066\u4e0b\u3055\u3044\uff08\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u304c\u6b86\u3069\u6a5f\u80fd\u3057\u3066\u3044\u306a\u3044\u3089\u3057\u304f\u660e\u3089\u304b\u306b\u8aa4\u3063\u305f\u30b3\u30fc\u30c9\u3067\u3082\u901a\u3063\u3066\u3057\u307e\u3046\u306e\u304c\u30a2\u30ec\u306a\u611f\u3058\uff09\u3002\n\u3067\u3082\u30b3\u30fc\u30c9\u30b4\u30eb\u30d5\u3042\u3093\u307e\u308a\u697d\u3057\u304f\u306a\u3044\uff08\u5c0f\u4e26\u611f\uff09\u3002\n[Paiza Online Hackason 6](https://paiza.jp/poh/joshibato) \u3092\u89e3\u3044\u3066\u307f\u3088\u3046\u3068\u3044\u3046\u3082\u306e\u3067\u3057\u305f\u3000\uff08\u6700\u5f8c\u306f\u30b3\u30fc\u30c9\u30b4\u30eb\u30d5\uff09\n\n# [\u7b2c1\u554f \u516d\u6751\u30ea\u30aa](https://paiza.jp/poh/joshibato/rio)\n\u7c21\u5358\u306a\u554f\u984c\u306a\u306e\u3067\u3059\u304c\u3001\u6d6e\u52d5\u5c0f\u6570\u70b9\u306e\u7cbe\u5ea6\u306e\u305b\u3044\u3067\u7d20\u76f4\u306b\u66f8\u304f\u3068\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u901a\u3089\u306a\u3044\u3053\u3068\u304c\u3042\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u306e\u3088\u3046\u3067\u3059\uff08\u79c1\u306f\u305d\u3093\u306a\u3053\u3068\u306a\u304b\u3063\u305f\uff09\u3002\u6c17\u3092\u4f7f\u3046\u306a\u3089\u6709\u7406\u6570\u3067\u8a08\u7b97\u3057\u3066\u6700\u5f8c\u306b\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306b\u5909\u63db\u3059\u308c\u3070\u3044\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n```hs:Rio.hs\nimport Data.Ratio\n\nparse = map read' . map words . tail . lines \n  where \n    read' [t,n] = ((read :: String->Int) t, (read:: String->Int) n % 1)\n    read' _ = (0, 0 % 1)\n\nprocess (w, c) (1, n) = (w+n, c)\nprocess (w, c) (2, n) = (w, c+n)\nprocess (w, c) (3, n) = (i*w, i*c) where i = (w+c-n)/(w+c)\n\nconc (w, c) = floor $ (100*c) / (w+c) \n\nmain = getContents >>= print . conc . foldl process (0 % 1, 0 % 1) . parse\n```\n\n# [\u7b2c2\u554f \u9727\u5cf6\u4eac\u5b50](https://paiza.jp/poh/joshibato/kirishima)\n\u7c21\u5358\u306a\u518d\u5e30\u306e\u554f\u984c\u3002\u518d\u5e30\u3067\u30de\u30b9\u3092\u3069\u3093\u3069\u3093\u9032\u3093\u3067\u3044\u304f\u3002\u5404\u30b9\u30c6\u30c3\u30d7\u3067\u7bc4\u56f2\u5916\u306b\u306f\u307f\u51fa\u308b\u30b1\u30fc\u30b9\u3067\"No\"\u3092\u8fd4\u3057\u3001\u5faa\u74b0\u3057\u3066\u3057\u307e\u3046\u30b1\u30fc\u30b9\u306b\u3064\u3044\u3066\u306f\u3001\u65e2\u306b\u6b62\u307e\u3063\u305f\u3053\u3068\u306e\u3042\u308b\u30de\u30b9\u3092\u8a18\u61b6\u3057\u3066\u304a\u3044\u3066\u305d\u3053\u306b\u884c\u304d\u5f53\u305f\u3063\u305f\u3089\"No\"\u3092\u8fd4\u3059\u3088\u3046\u306b\u3059\u308b\u3060\u3051\u3002n\u30de\u30b9\u306a\u3089n\u56de\u76ee\u307e\u3067\u306e\u518d\u5e30\u3067\u5fc5\u305a\u540c\u3058\u30de\u30b9\u30922\u5ea6\u8e0f\u3080\u304b\u3001\u7bc4\u56f2\u3092\u306f\u307f\u51fa\u308b\u304b\u3001\u30b4\u30fc\u30eb\u3059\u308b\u304b\u306b\u306a\u308b\uff08\u9ce9\u306e\u5de3\u539f\u7406\uff09\u3002\u52d5\u7684\u8a08\u753b\u6cd5\u3060\u306e\u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u3060\u306e\u3001\u3053\u3093\u306a\u554f\u984c\u306b\u305d\u3093\u306a\u3082\u3093\u8981\u308a\u3083\u3057\u307e\u305b\u3093\u3002\n\n```hs:Kirishima.hs\nimport Data.Array.IArray (Array, (!), bounds, listArray)\nimport Data.Set (Set, insert, empty, member)\n\nrun :: Array Int Int -> Set Int -> Int -> String\nrun arr memo pos\n  | pos < min || pos > max = \"No\"\n  | member pos memo = \"No\"\n  | pos == max = \"Yes\"\n  | otherwise = run arr (insert pos memo) (pos + arr!pos)\n  where (min,max) = bounds arr\n\nmain = mapM_ putStrLn . solve . parse =<< getContents\n where\n  parse = construct . map words . lines \n  construct (n:ts:_:ds) = (read $ head n, map read ts, map (read . head) ds)\n  solve (n, es, ds) = map (run (listArray (0,n-1) es) empty) ds\n```\n\n\u6562\u3048\u3066\u63a2\u7d22\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3084\u308b\u306a\u3089\u3070\u3001\u30b4\u30fc\u30eb\u304b\u3089\u5e45\u512a\u5148\u63a2\u7d22\u98a8\u5473\u306b\u9006\u7b97\u3057\u307e\u3059\u3002\u30b4\u30fc\u30eb\u306e\u88ab\u5230\u9054\u53ef\u80fd\u5730\u70b9\u3092\u9806\u6b21\u63a2\u7d22\u3057\u3066\u30e1\u30e2\u306b\u52a0\u3048\u3066\u3044\u304f\u3060\u3051\u3067\u3059\u3002\n\n```hs:KirishimaBis.hs\nimport Data.Set (Set, member, notMember, insert, empty, singleton)\n\nsearch :: [(Int,Int)] -> Set Int -> [Int] -> Set Int\nsearch board memo ps -- board: \u76e4\u9762 memo: \u5230\u9054\u53ef\u80fd\u5730\u70b9\u306e\u30e1\u30e2 ps: \u6700\u5f8c\u306b\u63a2\u7d22\u3057\u305f\u5230\u9054\u53ef\u80fd\u5730\u70b9\n | ps == nps = memo -- \u5230\u9054\u53ef\u80fd\u5730\u70b9\u304c\u3053\u308c\u4ee5\u4e0a\u5897\u3048\u306a\u3044\u306a\u3089\u63a2\u7d22\u7d42\u4e86\n | otherwise = search board nmemo nps -- \u65b0\u305f\u306a\u30e1\u30e2\u3068\u73fe\u30b9\u30c6\u30c3\u30d7\u306e\u63a2\u7d22\u7d50\u679c\u3067\u518d\u5e30\n where\n  step board pos = map fst $ filter (\\(i,e)->i+e==pos) board -- \u5730\u70b9pos\u3078\u5230\u9054\u53ef\u80fd\u306a\u5730\u70b9\u306e\u5217\u6319\n  nps = concatMap (step board) ps -- \u524d\u30b9\u30c6\u30c3\u30d7\u304b\u3089\u306e\u63a2\u7d22\u306e\u7d50\u679c\n  nmemo = foldr insert memo nps -- \u305d\u308c\u3092\u5230\u9054\u53ef\u80fd\u5730\u70b9\u306e\u30e1\u30e2\u306b\u8ffd\u52a0\n\nmain = mapM_ putStrLn . solve . parse =<< getContents\n where\n  parse = construct . map words . lines \n  construct (n:ts:_:ds) = (read $ head n ,map read ts, map (read . head) ds)\n  solve (n, es, ds) = map (isAccessible n $ zip [0..] es) ds\n  isAccessible n board dice\n    | dice `member` search board (singleton $ n-1) [n-1] = \"Yes\"\n    | otherwise = \"No\"\n```\n\n\n\n# [\u7b2c3\u554f \u7dd1\u5ddd\u3064\u3070\u3081](https://paiza.jp/poh/joshibato/tsubame)\n\u2026\u2026Piaza\u306f\u306a\u306b\u304c\u3057\u305f\u3044\u306e\uff1f\uff1f\n\n```hs:Tsubame.hs\nmain = print . (\\n -> n + div n 10 + mod n 10) . read =<< getContents\n```\n\n# [POH6+ \u677e\u6c5fRuby\u4f1a\u8b70\u30df\u30c3\u30b7\u30e7\u30f3](https://paiza.jp/poh/joshibato/matsue-ruby)\n\u3053\u308c\u3082\u518d\u5e30\u3067\u66f8\u304f\u3060\u3051\u3002\u8f9e\u66f8\u9806\u306b\u30bd\u30fc\u30c8\u3055\u308c\u305f\u5358\u8a9e\u30ea\u30b9\u30c8\u304b\u3089\u9069\u5207\u306a\u56de\u6587\u3092\u4f5c\u308b\u95a2\u6570`build`\u3092\u8003\u3048\u308c\u3070\u3001\u7d20\u76f4\u306a\u518d\u5e30\u3067\u66f8\u3051\u308b\u3002\u771f\u3093\u4e2d\u3067\u7dba\u9e97\u306b\u6298\u534a\u3057\u3066\u93e1\u50cf\u306b\u51fa\u6765\u308b\u5834\u5408\u3068\u3001\u4e2d\u592e\u306b\u305d\u308c\u81ea\u4f53\u304c\u56de\u6587\u3067\u3042\u308b\u3088\u3046\u306a\u5358\u8a9e\u304c1\u8a9e\u631f\u307e\u308b\u5834\u5408\u3068\u304c\u3042\u308b\u306e\u3067\uff08\u3053\u306e\u5834\u5408\u306b\u306f\u5bfe\u306b\u306a\u308b\u8a9e\u304c\u6b8b\u308a\u306e\u30ea\u30b9\u30c8\u4e2d\u306b\u306a\u304f\u304b\u3064\u305d\u308c\u81ea\u4f53\u304c\u56de\u6587\u3067\u3042\u308b\u3088\u3046\u306a\u8a9e\u306e\u3046\u3061\u6700\u3082\u8f9e\u66f8\u9806\u3067\u6700\u5c0f\u306e\u3082\u306e\u2015\u2015\u3053\u308c\u3092\u84c4\u7a4d\u5f15\u6570`acc`\u3067\u7ba1\u7406\u3059\u308b\u2015\u2015\u304c\u4e2d\u592e\u306b\u914d\u7f6e\u3055\u308c\u308b\uff09\u3001\u305d\u3053\u3092\u5834\u5408\u5206\u3051\u3059\u308b\u3002\n\n```hs:Matsue.hs\nimport Data.List\n\nsolve ws = build \"\" ws\nbuild acc [] = acc\nbuild acc (x:xs)\n | reverse x `elem` xs = x ++ next acc ++ reverse x\n | x == reverse x && null acc = next x\n | otherwise = next acc\n where next w = build w $ delete (reverse x) xs\n\nmain = putStrLn  . solve . sort . tail . lines =<< getContents\n```\n\n\u518d\u5e30\u306e\u969b\u306b\u30ea\u30b9\u30c8\u306e\u5f8c\u308d\u306b`(++)`\u3067append\u3059\u308b\u306e\u306f\u4e00\u822c\u306b\u611a\u7b56\u306a\u306e\u3060\u304c\u3001\u305d\u308c\u3092\u907f\u3051\u3066\n\n```hs:MatsueBis.hs\nimport Data.List\n\nsolve = build \"\" \"\"\nbuild r c [] = reverse r ++ c ++ r\nbuild r c (w:ws)\n | reverse w `elem` ws = build (reverse w++r) c next\n | w == reverse w && null c = build r w ws\n | otherwise = build r c ws\n where next = delete (reverse w) ws\n\nmain = putStrLn  . solve . sort . tail . lines =<< getContents\n```\n\n\u3068\u672b\u5c3e\u518d\u5e30\u306b\u3059\u308b\u3068\u901f\u5ea6\u306f\u5411\u4e0a\u3059\u308b\u304c\u6700\u521d\u306e\u3082\u306e\u306b\u6bd4\u3079\u3066\u30b3\u30fc\u30c9\u30b4\u30eb\u30d5\u304c\u304b\u306a\u308a\u4e0d\u5229\u306b\u306a\u308b\u3002\u305d\u3053\u3067\u6562\u3048\u3066\u6700\u521d\u306e\u3082\u306e\u306e\u65b9\u3092\u63a1\u7528\u3057\u3066\u30b4\u30eb\u30d5\u3059\u308b\u3068\uff1a\n\n```hs:MatsueGolf.hs\nimport Data.List;main=interact$c\"\".sort.tail.lines;c a[]=a;c a (x:y)|r`elem`y=x++n a++r|x++a==r=n x|1>0= n a where n s=c s$delete r y;r=reverse x\n```\n\u3053\u308c\u3067145\u30d0\u30a4\u30c8\u306b\u306a\u3063\u305f\uff08[\u63a1\u70b9\u7d50\u679c](https://paiza.jp/poh/joshibato/matsue-ruby/result/45172bbc)\uff09\u3002\n\n\u3082\u3057\u6539\u5584\u6848\u304b\u3001\u3088\u308a\u77ed\u3044\u5225\u89e3\u304c\u3042\u308c\u3070\u6559\u3048\u3066\u4e0b\u3055\u3044\uff08\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u304c\u6b86\u3069\u6a5f\u80fd\u3057\u3066\u3044\u306a\u3044\u3089\u3057\u304f\u660e\u3089\u304b\u306b\u8aa4\u3063\u305f\u30b3\u30fc\u30c9\u3067\u3082\u901a\u3063\u3066\u3057\u307e\u3046\u306e\u304c\u30a2\u30ec\u306a\u611f\u3058\uff09\u3002\n\n\u3067\u3082\u30b3\u30fc\u30c9\u30b4\u30eb\u30d5\u3042\u3093\u307e\u308a\u697d\u3057\u304f\u306a\u3044\uff08\u5c0f\u4e26\u611f\uff09\u3002\n", "tags": ["paiza", "Haskell"]}