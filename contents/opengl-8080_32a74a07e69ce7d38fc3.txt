{"tags": ["Java", "CDI", "JavaFX", "Weld"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002JavaFX\u306e\u5b9f\u88c5\u3067CDI\uff08Weld\uff09\u3092\u5229\u7528\u3059\u308b\u65b9\u6cd5\u306e\u30e1\u30e2\u3002\n\n\u74b0\u5883\n\nJava\n1.7.0_25\n\nWeld\n1.1.10\n\n\u5b9f\u88c5\n\nMain\u30af\u30e9\u30b9\n\nMain.java\npackage fx;\n\nimport javafx.application.Application;\nimport javafx.stage.Stage;\n\nimport javax.enterprise.util.AnnotationLiteral;\n\nimport org.jboss.weld.environment.se.Weld;\nimport org.jboss.weld.environment.se.WeldContainer;\n\npublic class Main extends Application {\n\n    public static void main(String[] args) {\n        Application.launch(args);\n    }\n\n    private Weld weld;\n\n    @SuppressWarnings(\"serial\")\n    @Override\n    public void start(Stage stage) throws Exception {\n        this.weld = new Weld();\n        WeldContainer container = this.weld.initialize();\n\n        container.event()\n                 .select(Stage.class, new AnnotationLiteral<MyQualifier>() {})\n                 .fire(stage);\n    }\n\n    @Override\n    public void stop() {\n        this.weld.shutdown();\n    }\n}\n\n\n\n\u30a4\u30d9\u30f3\u30c8\u901a\u77e5\u3092\u7d5e\u308a\u8fbc\u3080\u305f\u3081\u306e\u30ab\u30b9\u30bf\u30e0\u9650\u5b9a\u5b50\n\nMyQualifier.java\npackage fx;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\nimport javax.inject.Qualifier;\n\n@Qualifier\n@Target(ElementType.PARAMETER)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface MyQualifier {\n}\n\n\n\nJavaFX\u306e\u753b\u9762\u8868\u793a\u3092\u958b\u59cb\u3059\u308b\u30af\u30e9\u30b9\n\nApplicationStarter.java\npackage fx;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Parent;\nimport javafx.scene.Scene;\nimport javafx.stage.Stage;\n\nimport javax.enterprise.event.Observes;\nimport javax.inject.Inject;\n\npublic class ApplicationStarter {\n\n    @Inject private FXMLLoader loader;\n\n    public void start(@Observes @MyQualifier Stage stage) throws IOException {\n        try (InputStream fxml = MyController.getFxmlStream()) {\n            Parent root = (Parent)this.loader.load(fxml);\n            Scene scene = new Scene(root);\n\n            stage.setScene(scene);\n            stage.show();\n        }\n    }\n}\n\n\n\nFXMLLoader \u306e Producer \u30af\u30e9\u30b9\n\nFXMLLoaderProducer.java\n\npackage fx;\n\nimport javafx.fxml.FXMLLoader;\nimport javafx.util.Callback;\n\nimport javax.enterprise.inject.Instance;\nimport javax.enterprise.inject.Produces;\nimport javax.inject.Inject;\n\npublic class FXMLLoaderProducer {\n\n    @Inject Instance<Object> instance;\n\n    @Produces\n    public FXMLLoader createLoader() {\n        FXMLLoader loader = new FXMLLoader();\n\n        loader.setControllerFactory(new Callback<Class<?>, Object>() {\n            @Override\n            public Object call(Class<?> param) {\n                return instance.select(param).get();\n            }\n        });\n\n        return loader;\n    }\n}\n\n\n\nFXML\n\ncdi.fxml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<?import java.lang.*?>\n<?import javafx.scene.control.*?>\n<?import javafx.scene.layout.*?>\n<?import javafx.scene.layout.AnchorPane?>\n<?import javafx.scene.text.*?>\n\n<AnchorPane fx:id=\"base\" minHeight=\"158.0\" prefHeight=\"158.0\" prefWidth=\"266.0\" xmlns:fx=\"http://javafx.com/fxml/1\" xmlns=\"http://javafx.com/javafx/2.2\" fx:controller=\"fx.MyController\">\n  <!-- TODO Add Nodes -->\n  <children>\n    <Button fx:id=\"button\" layoutX=\"75.0\" layoutY=\"25.0\" mnemonicParsing=\"false\" onAction=\"#onButtonClick\" prefHeight=\"37.0\" prefWidth=\"118.0\" text=\"Button\">\n      <font>\n        <Font size=\"20.0\" fx:id=\"x1\" />\n      </font>\n    </Button>\n    <Label id=\"text\" fx:id=\"label\" alignment=\"CENTER\" contentDisplay=\"CENTER\" font=\"$x1\" layoutX=\"15.0\" layoutY=\"79.0\" minHeight=\"12.0\" prefHeight=\"65.0\" prefWidth=\"237.0\" text=\"Label\" textAlignment=\"CENTER\" />\n  </children>\n</AnchorPane>\n\n\nScene Builder \u3067\u898b\u305f\u69d8\u5b50\u3002\n\n\n\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30af\u30e9\u30b9\n\nMyController.java\npackage fx;\n\nimport javafx.fxml.FXML;\nimport javafx.scene.control.Label;\n\nimport javax.inject.Inject;\n\npublic class MyController {\n\n    public static InputStream getFxmlStream() {\n        return MyController.class.getResourceAsStream(\"/cdi.fxml\");\n    }\n\n    @FXML   private Label     label;\n    @Inject private MyService service;\n\n    @FXML\n    public void onButtonClick() {\n        label.setText(\"cnt : \" + this.service.nextCount());\n    }\n}\n\n\n\nCDI\u3067\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3059\u308b\u30af\u30e9\u30b9\n\nMyService.java\npackage fx;\n\nimport javax.inject.Singleton;\n\n@Singleton\npublic class MyService {\n\n    private int cnt;\n\n    public int nextCount() {\n        return ++cnt;\n    }\n}\n\n\n\n\u5b9f\u884c\u7d50\u679c\n\n\u30af\u30ea\u30c3\u30af\u3059\u308b\u5ea6\u306b\u30ab\u30a6\u30f3\u30c8\u304c\u52a0\u7b97\u3055\u308c\u308b\u3002\n\nEclipse \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u69d8\u5b50\n\n\n\u8aac\u660e\n\n\u8d77\u52d5\n\nMain.java\npublic class Main extends Application {\n\n    public static void main(String[] args) {\n        Application.launch(args);\n    }\n\n    @SuppressWarnings(\"serial\")\n    @Override\n    public void start(Stage stage) throws Exception {\n        // ....\n        container.event()\n                 .select(Stage.class, new AnnotationLiteral<MyQualifier>() {})\n                 .fire(stage);\n        // ....\n    }\n}\n\n\n\u307e\u305a\u3001 CDI \u306e\u30a4\u30d9\u30f3\u30c8\u901a\u77e5\u6a5f\u80fd\u3092\u5229\u7528\u3057\u3066\u3001JavaFX \u753b\u9762\u8d77\u52d5\u7528\u306e\u30e1\u30bd\u30c3\u30c9\uff08ApplicationStarter#start(Stage)\uff09\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u3002\n\nCDI \u7528\u306b\u6539\u9020\u3057\u305f FXMLLoader \u3092\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3059\u308b\n\nApplicationStarter.java\npublic class ApplicationStarter {\n\n    @Inject private FXMLLoader loader;\n\n    public void start(@Observes @MyQualifier Stage stage) throws IOException {\n        // ....       \n        Parent root = (Parent)this.loader.load(fxml);\n        // ....\n    }\n}\n\n\nJavaFX \u753b\u9762\u8d77\u52d5\u7528\u30af\u30e9\u30b9\u306b\u306f\u3001 FXMLLoader \u3092\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3057\u3066\u3044\u308b\u3002\u3053\u306e FXMLLoader \u306f\u3001 FXMLLoaderProducer \u3068\u3044\u3046\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u63d0\u4f9b\u7528\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u3066\u3001\u305d\u3053\u304b\u3089\u53d6\u5f97\u3057\u3066\u3044\u308b\u3002\n\nFXMLLoaderProducer.java\npublic class FXMLLoaderProducer {\n\n    @Inject Instance<Object> instance;\n\n    @Produces\n    public FXMLLoader createLoader() {\n        FXMLLoader loader = new FXMLLoader();\n\n        loader.setControllerFactory(new Callback<Class<?>, Object>() {\n            @Override\n            public Object call(Class<?> param) {\n                return instance.select(param).get();\n            }\n        });\n\n        return loader;\n    }\n}\n\n\nFXMLLoaderProducer \u3067\u306f\u3001 FXMLLoader \u306e controllerFactory \u3092 CDI \u306e\u30b3\u30f3\u30c6\u30ca\u304b\u3089\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b\u5b9f\u88c5\u306b\u5dee\u3057\u66ff\u3048\u305f\u3082\u306e\u3092\u63d0\u4f9b\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\n\u3053\u3046\u3059\u308b\u3053\u3068\u3067\u3001 JavaFX \u304c FXML \u3068\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30af\u30e9\u30b9\u3092\u7d50\u3073\u3064\u3051\u308b\u3068\u304d\u306b\u3001\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092 CDI \u30b3\u30f3\u30c6\u30ca\u304b\u3089\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\u7d50\u679c\u3001\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30af\u30e9\u30b9\u3067\u3082 CDI \u306e\u6a5f\u80fd\u304c\u4f7f\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\n\u53c2\u8003\n\nFXML & JavaFX\u2014Fueled by CDI & JBoss Weld | Javalobby\n\n\n\u66f8\u3044\u305f\u5f8c\u306b\u6c17\u3065\u3044\u305f\u3053\u3068\n\u53c2\u8003\u306b\u6319\u3052\u3066\u3044\u308b\u30b5\u30a4\u30c8\u306e\u5b9f\u88c5\u3092\u305d\u306e\u307e\u307e\u5229\u7528\u3057\u3066\u3044\u308b\u306e\u3067\u3001 ApplicationStarter#start(Stage) \u306e\u5b9f\u884c\u306b\u306f\u30a4\u30d9\u30f3\u30c8\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3051\u3069\u3001\u3088\u304f\u8003\u3048\u305f\u3089\u666e\u901a\u306b ApplicationStarter \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u30b3\u30f3\u30c6\u30ca\u304b\u3089\u53d6\u5f97\u3057\u3066\u5b9f\u884c\u3057\u3066\u3082\u554f\u984c\u306a\u3044\u6c17\u304c\u3059\u308b\u3002\n\nMain.java\npackage fx;\n\nimport javafx.application.Application;\nimport javafx.stage.Stage;\n\nimport org.jboss.weld.environment.se.Weld;\nimport org.jboss.weld.environment.se.WeldContainer;\n\npublic class Main extends Application {\n\n    public static void main(String[] args) {\n        Application.launch(args);\n    }\n\n    @Override\n    public void start(Stage stage) throws Exception {\n        Weld weld = new Weld();\n        WeldContainer container = weld.initialize();\n\n        // \u30b3\u30f3\u30c6\u30ca\u304b\u3089\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3057\u3066\u5b9f\u884c\n        ApplicationStarter starter = container.instance().select(ApplicationStarter.class).get();\n        starter.start(stage);\n\n        weld.shutdown();\n    }\n}\n\n\n\u4e00\u5fdc\u52d5\u3044\u305f\u3051\u3069\u3001\u4f55\u304c\u9055\u3046\u306e\u3060\u308d\u3046\uff1f\nJavaFX\u306e\u5b9f\u88c5\u3067CDI\uff08Weld\uff09\u3092\u5229\u7528\u3059\u308b\u65b9\u6cd5\u306e\u30e1\u30e2\u3002\n\n\n#\u74b0\u5883\n##Java\n1.7.0_25\n\n##Weld\n1.1.10\n\n#\u5b9f\u88c5\n##Main\u30af\u30e9\u30b9\n```java:Main.java\npackage fx;\n\nimport javafx.application.Application;\nimport javafx.stage.Stage;\n\nimport javax.enterprise.util.AnnotationLiteral;\n\nimport org.jboss.weld.environment.se.Weld;\nimport org.jboss.weld.environment.se.WeldContainer;\n\npublic class Main extends Application {\n    \n    public static void main(String[] args) {\n        Application.launch(args);\n    }\n    \n    private Weld weld;\n    \n    @SuppressWarnings(\"serial\")\n    @Override\n    public void start(Stage stage) throws Exception {\n        this.weld = new Weld();\n        WeldContainer container = this.weld.initialize();\n        \n        container.event()\n                 .select(Stage.class, new AnnotationLiteral<MyQualifier>() {})\n                 .fire(stage);\n    }\n    \n    @Override\n    public void stop() {\n        this.weld.shutdown();\n    }\n}\n```\n\n##\u30a4\u30d9\u30f3\u30c8\u901a\u77e5\u3092\u7d5e\u308a\u8fbc\u3080\u305f\u3081\u306e\u30ab\u30b9\u30bf\u30e0\u9650\u5b9a\u5b50\n```java:MyQualifier.java\npackage fx;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\nimport javax.inject.Qualifier;\n\n@Qualifier\n@Target(ElementType.PARAMETER)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface MyQualifier {\n}\n```\n\n##JavaFX\u306e\u753b\u9762\u8868\u793a\u3092\u958b\u59cb\u3059\u308b\u30af\u30e9\u30b9\n```java:ApplicationStarter.java\npackage fx;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Parent;\nimport javafx.scene.Scene;\nimport javafx.stage.Stage;\n\nimport javax.enterprise.event.Observes;\nimport javax.inject.Inject;\n\npublic class ApplicationStarter {\n    \n    @Inject private FXMLLoader loader;\n    \n    public void start(@Observes @MyQualifier Stage stage) throws IOException {\n        try (InputStream fxml = MyController.getFxmlStream()) {\n            Parent root = (Parent)this.loader.load(fxml);\n            Scene scene = new Scene(root);\n            \n            stage.setScene(scene);\n            stage.show();\n        }\n    }\n}\n```\n\n##FXMLLoader \u306e Producer \u30af\u30e9\u30b9\n```java:FXMLLoaderProducer.java\n\npackage fx;\n\nimport javafx.fxml.FXMLLoader;\nimport javafx.util.Callback;\n\nimport javax.enterprise.inject.Instance;\nimport javax.enterprise.inject.Produces;\nimport javax.inject.Inject;\n\npublic class FXMLLoaderProducer {\n    \n    @Inject Instance<Object> instance;\n    \n    @Produces\n    public FXMLLoader createLoader() {\n        FXMLLoader loader = new FXMLLoader();\n        \n        loader.setControllerFactory(new Callback<Class<?>, Object>() {\n            @Override\n            public Object call(Class<?> param) {\n                return instance.select(param).get();\n            }\n        });\n        \n        return loader;\n    }\n}\n```\n\n##FXML\n```xml:cdi.fxml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<?import java.lang.*?>\n<?import javafx.scene.control.*?>\n<?import javafx.scene.layout.*?>\n<?import javafx.scene.layout.AnchorPane?>\n<?import javafx.scene.text.*?>\n\n<AnchorPane fx:id=\"base\" minHeight=\"158.0\" prefHeight=\"158.0\" prefWidth=\"266.0\" xmlns:fx=\"http://javafx.com/fxml/1\" xmlns=\"http://javafx.com/javafx/2.2\" fx:controller=\"fx.MyController\">\n  <!-- TODO Add Nodes -->\n  <children>\n    <Button fx:id=\"button\" layoutX=\"75.0\" layoutY=\"25.0\" mnemonicParsing=\"false\" onAction=\"#onButtonClick\" prefHeight=\"37.0\" prefWidth=\"118.0\" text=\"Button\">\n      <font>\n        <Font size=\"20.0\" fx:id=\"x1\" />\n      </font>\n    </Button>\n    <Label id=\"text\" fx:id=\"label\" alignment=\"CENTER\" contentDisplay=\"CENTER\" font=\"$x1\" layoutX=\"15.0\" layoutY=\"79.0\" minHeight=\"12.0\" prefHeight=\"65.0\" prefWidth=\"237.0\" text=\"Label\" textAlignment=\"CENTER\" />\n  </children>\n</AnchorPane>\n```\n\nScene Builder \u3067\u898b\u305f\u69d8\u5b50\u3002\n![cdi.fxml](https://qiita-image-store.s3.amazonaws.com/0/28302/6b6ca6ab-048d-5c93-0f15-2c436a951e08.jpeg)\n\n##\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30af\u30e9\u30b9\n```java:MyController.java\npackage fx;\n\nimport javafx.fxml.FXML;\nimport javafx.scene.control.Label;\n\nimport javax.inject.Inject;\n\npublic class MyController {\n    \n    public static InputStream getFxmlStream() {\n        return MyController.class.getResourceAsStream(\"/cdi.fxml\");\n    }\n\n    @FXML   private Label     label;\n    @Inject private MyService service;\n    \n    @FXML\n    public void onButtonClick() {\n        label.setText(\"cnt : \" + this.service.nextCount());\n    }\n}\n```\n\n##CDI\u3067\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3059\u308b\u30af\u30e9\u30b9\n```java:MyService.java\npackage fx;\n\nimport javax.inject.Singleton;\n\n@Singleton\npublic class MyService {\n    \n    private int cnt;\n    \n    public int nextCount() {\n        return ++cnt;\n    }\n}\n```\n\n##\u5b9f\u884c\u7d50\u679c\n![\u5b9f\u884c\u7d50\u679c](https://qiita-image-store.s3.amazonaws.com/0/28302/b1762cc3-15e6-2599-7d8f-268063c8d88e.jpeg)\n\u30af\u30ea\u30c3\u30af\u3059\u308b\u5ea6\u306b\u30ab\u30a6\u30f3\u30c8\u304c\u52a0\u7b97\u3055\u308c\u308b\u3002\n\n##Eclipse \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u69d8\u5b50\n![Eclipse \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u69d8\u5b50](https://qiita-image-store.s3.amazonaws.com/0/28302/0a21f1c0-e035-08bd-b3d3-b72eb74f0a14.jpeg)\n\n#\u8aac\u660e\n##\u8d77\u52d5\n```java:Main.java\npublic class Main extends Application {\n    \n    public static void main(String[] args) {\n        Application.launch(args);\n    }\n\n    @SuppressWarnings(\"serial\")\n    @Override\n    public void start(Stage stage) throws Exception {\n        // ....\n        container.event()\n                 .select(Stage.class, new AnnotationLiteral<MyQualifier>() {})\n                 .fire(stage);\n        // ....\n    }\n}\n```\n\n\u307e\u305a\u3001 CDI \u306e\u30a4\u30d9\u30f3\u30c8\u901a\u77e5\u6a5f\u80fd\u3092\u5229\u7528\u3057\u3066\u3001JavaFX \u753b\u9762\u8d77\u52d5\u7528\u306e\u30e1\u30bd\u30c3\u30c9\uff08`ApplicationStarter#start(Stage)`\uff09\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u3002\n\n##CDI \u7528\u306b\u6539\u9020\u3057\u305f FXMLLoader \u3092\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3059\u308b\n```java:ApplicationStarter.java\npublic class ApplicationStarter {\n    \n    @Inject private FXMLLoader loader;\n    \n    public void start(@Observes @MyQualifier Stage stage) throws IOException {\n        // ....       \n        Parent root = (Parent)this.loader.load(fxml);\n        // ....\n    }\n}\n```\n\nJavaFX \u753b\u9762\u8d77\u52d5\u7528\u30af\u30e9\u30b9\u306b\u306f\u3001 `FXMLLoader` \u3092\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3057\u3066\u3044\u308b\u3002\u3053\u306e `FXMLLoader` \u306f\u3001 `FXMLLoaderProducer` \u3068\u3044\u3046\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u63d0\u4f9b\u7528\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u3066\u3001\u305d\u3053\u304b\u3089\u53d6\u5f97\u3057\u3066\u3044\u308b\u3002\n\n```java:FXMLLoaderProducer.java\npublic class FXMLLoaderProducer {\n    \n    @Inject Instance<Object> instance;\n    \n    @Produces\n    public FXMLLoader createLoader() {\n        FXMLLoader loader = new FXMLLoader();\n        \n        loader.setControllerFactory(new Callback<Class<?>, Object>() {\n            @Override\n            public Object call(Class<?> param) {\n                return instance.select(param).get();\n            }\n        });\n        \n        return loader;\n    }\n}\n```\n\n`FXMLLoaderProducer` \u3067\u306f\u3001 `FXMLLoader` \u306e `controllerFactory` \u3092 CDI \u306e\u30b3\u30f3\u30c6\u30ca\u304b\u3089\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b\u5b9f\u88c5\u306b\u5dee\u3057\u66ff\u3048\u305f\u3082\u306e\u3092\u63d0\u4f9b\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\n\n\u3053\u3046\u3059\u308b\u3053\u3068\u3067\u3001 JavaFX \u304c FXML \u3068\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30af\u30e9\u30b9\u3092\u7d50\u3073\u3064\u3051\u308b\u3068\u304d\u306b\u3001\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092 CDI \u30b3\u30f3\u30c6\u30ca\u304b\u3089\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\n\u7d50\u679c\u3001\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30af\u30e9\u30b9\u3067\u3082 CDI \u306e\u6a5f\u80fd\u304c\u4f7f\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\n#\u53c2\u8003\n+ [FXML &amp; JavaFX\u2014Fueled by CDI &amp; JBoss Weld | Javalobby](http://java.dzone.com/articles/fxml-javafx-powered-cdi-jboss)\n\n#\u66f8\u3044\u305f\u5f8c\u306b\u6c17\u3065\u3044\u305f\u3053\u3068\n\u53c2\u8003\u306b\u6319\u3052\u3066\u3044\u308b\u30b5\u30a4\u30c8\u306e\u5b9f\u88c5\u3092\u305d\u306e\u307e\u307e\u5229\u7528\u3057\u3066\u3044\u308b\u306e\u3067\u3001 `ApplicationStarter#start(Stage)` \u306e\u5b9f\u884c\u306b\u306f\u30a4\u30d9\u30f3\u30c8\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3051\u3069\u3001\u3088\u304f\u8003\u3048\u305f\u3089\u666e\u901a\u306b `ApplicationStarter` \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u30b3\u30f3\u30c6\u30ca\u304b\u3089\u53d6\u5f97\u3057\u3066\u5b9f\u884c\u3057\u3066\u3082\u554f\u984c\u306a\u3044\u6c17\u304c\u3059\u308b\u3002\n\n```java:Main.java\npackage fx;\n\nimport javafx.application.Application;\nimport javafx.stage.Stage;\n\nimport org.jboss.weld.environment.se.Weld;\nimport org.jboss.weld.environment.se.WeldContainer;\n\npublic class Main extends Application {\n    \n    public static void main(String[] args) {\n        Application.launch(args);\n    }\n\n    @Override\n    public void start(Stage stage) throws Exception {\n        Weld weld = new Weld();\n        WeldContainer container = weld.initialize();\n        \n        // \u30b3\u30f3\u30c6\u30ca\u304b\u3089\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3057\u3066\u5b9f\u884c\n        ApplicationStarter starter = container.instance().select(ApplicationStarter.class).get();\n        starter.start(stage);\n        \n        weld.shutdown();\n    }\n}\n```\n\n\u4e00\u5fdc\u52d5\u3044\u305f\u3051\u3069\u3001\u4f55\u304c\u9055\u3046\u306e\u3060\u308d\u3046\uff1f\n"}