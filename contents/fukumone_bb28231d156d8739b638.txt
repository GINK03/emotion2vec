{"context": " More than 1 year has passed since last update.\u300cRuby \u3067\u5b9f\u88c5\u3059\u308b\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u3075\u308b\u3044 \u5c0f\u6ce2\u79c0\u96c4(pdf)\n\u300d\u306e\u826f\u8cea\u306a\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u3066\u3044\u308b\n\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u7be9\u3068\u306f\u7d20\u6570\u3092\u898b\u3064\u3051\u51fa\u3059\u305f\u3081\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3042\u308b\u3002\n\u307e\u305a\u6700\u521d\u306e\u7d20\u6570\u3067\u3042\u308b\uff12\u306e\u500d\u6570\u3092\u524a\u9664\u3057\u3066\u3044\u304f\u3001\u6b21\u306b\u6b8b\u3063\u305f\u6570\u306e\u6700\u521d\u306b\u6765\u308b\u6570\u3001\uff13\u306e\u500d\u6570\u3092\u524a\u9664\u3057\u3066\u3044\u304f\u3002\u6b21\u306b\u304f\u308b\u6570\u3001\uff15\u306e\u500d\u6570\u3092\u524a\u9664\u3057\u3066\u3044\u304f\u3002\n\u540c\u3058\u3088\u3046\u306a\u52d5\u4f5c\u3092\u5ef6\u3005\u3068\u7d9a\u3051\u3066\u7d20\u6570\u3092\u898b\u3064\u3051\u308b\u3002\n\u3053\u306e\u8a18\u4e8b\u306f\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u7be9\u3092\u901a\u3057\u3066\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5a01\u529b\u3092\u4f53\u611f\u3059\u308b\u4e8b\u304c\u76ee\u7684\nrequire 'benchmark'\ndef erato_1(n)\n  numbers = (2..n).to_a # 2 \uff5e n \u306e\u914d\u5217\u3092\u7528\u610f\n  primes = [] # \u7d20\u6570\u3092\u653e\u308a\u8fbc\u3080\u305f\u3081\u306e\u914d\u5217\n  loop do\n    d = numbers.shift # \u914d\u5217\u306e\u5148\u982d\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3057\u3066\n  break if d == nil # nil \u306a\u3089\u7d42\u4e86\n    primes << d # \u7d20\u6570\u306e\u914d\u5217\u306b\u8ffd\u52a0\u3002\n    to_delete = [] # \u53d6\u308a\u9664\u304f\u5019\u88dc\u3092\u5165\u308c\u308b\u914d\u5217\n    numbers.each do |x|\n      to_delete << x if x % d == 0 # d \u306e\u500d\u6570\u3092\u53d6\u308a\u9664\u304f\u5019\u88dc\u306b\u5165\u308c\u308b\n    end\n    numbers -= to_delete # d \u306e\u500d\u6570\u304c\u305d\u3063\u304f\u308a\u5f15\u304b\u308c\u308b\n  end\n  return primes\nend\n\nputs Benchmark.measure{ erato_1(10000) }\n\n=>  0.120000   0.000000   0.120000 (  0.120805)\n\nruby\u306e\u30d7\u30ed\u30d5\u30a1\u30a4\u30e9\u3067\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3001\u30d5\u30a1\u30a4\u30eb\u306e\u5148\u982d\u306b\n#!/usr/local/bin/ruby # -r profile\u3092\u52a0\u3048\u3066\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b.\n\ntime   seconds   seconds    calls  ms/call  ms/call  name\n 57.31    26.15     26.15   777862     0.03     0.16  Object#erato_1\n 25.68    37.87     11.72     1230     9.53    36.90  Array#each\n  8.99    41.97      4.10   777860     0.01     0.01  Fixnum#==\n  7.69    45.48      3.51   776631     0.00     0.00  Fixnum#%\n  0.15    45.55      0.07     9999     0.01     0.01  Array#<<\n  0.11    45.60      0.05     1229     0.04     0.04  Array#-\n....\u4e0b\u8a18\u7701\u7565\n\nif x % d == 0\u306e\u6761\u4ef6\u5224\u65ad\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3044\u308b\u3001\n\u307e\u305fprime = [ ]\u306e\u3068\u3053\u308d\u304cnumbers\u306b\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u306e\u3067\u4e0d\u8981\u3067\u3042\u308b\nrequire 'benchmark'\ndef erato_2(n)\n  numbers = (2..n).to_a\n  i = 0\n  loop do\n  break unless d = numbers[i]\n    to_delete = []\n    (2*d..n).step(d){|e| to_delete << e}\n    numbers -= to_delete\n    i += 1\n  end\n  return numbers\nend\n\nputs Benchmark.measure{\n  erato_2(10000) }\n=> 0.090000   0.010000   0.100000 (  0.097825)\n\n\u5c11\u3057\u3060\u3051\u306f\u3084\u304f\u306a\u3063\u305f\n\u305f\u3060#erato_2\u306b\u306f\u307e\u3060\u7121\u99c4\u304c\u3042\u308b\u3001\u4f8b\u3048\u3070\uff11\uff10\uff10\u307e\u3067\u306e\u7d20\u6570\u3092\u8abf\u3079\u305f\u3044\u3068\u3057\u3066\u30012,3,5,7\u306e\u500d\u6570\u3092\u524a\u9664\u3057\u305f\u6642\u70b9\u3067\uff11\uff10\uff10\u307e\u3067\u306e\u7d20\u6570\u306f\u3059\u3079\u3066\u305d\u308d\u3063\u3066\u3044\u308b\u72b6\u614b\u3067\u3042\u308b\u304c\u305d\u306e\u3042\u3068\u306e\uff11\uff11\u3001\uff11\uff13\u3001\u3001\u4ee5\u964d\u306e\u500d\u6570\u3092\u524a\u9664\u3057\u3066\u3044\u308b\u51e6\u7406\u304c\u7121\u99c4\u3067\u3042\u308b\ndef erato_3(n)\n  sqrt = Math.sqrt(n).floor\n  numbers = (2...n).to_a\n  i = 0\n  loop do\n    break if i >= sqrt\n    d = numbers[i]\n    to_delete = []\n    (2*d..n).step(d){|e| to_delete << e}\n    numbers -= to_delete\n    i += 1\n  end\n  return numbers\nend\n\nputs Benchmark.measure{ erato_3(10000) }\n=> 0.020000   0.000000   0.020000 (  0.026519)\n\n\uff13\u500d\u8fd1\u304f\u65e9\u304f\u306a\u3063\u305f\u3001\u3060\u304c\u307e\u3060\u65e9\u304f\u3059\u308b\u4f59\u5730\u304c\u3042\u308b\nnumbers -= to_delete\u306e\u7b87\u6240\u3067\u51e6\u7406\u91cf\u304c\u5897\u3048\u3066\u3044\u308b\u306e\u3067\u3053\u3053\u306e\u7b87\u6240\u3092\u306a\u304f\u3059\ndef erato_4(n)\n  numbers = (0..n).to_a\n  numbers[0],numbers[1] = nil\n  numbers.each do |d|\n    next if d == nil\n    break if (Math.sqrt(n) < d)\n    (2*d..n).step(d){|e| numbers[e] = nil}\n  end\n  numbers.compact!\n  return numbers\nend\nputs Benchmark.measure{ erato_4(10000) }\n=> 0.010000   0.000000   0.010000 (  0.003047)\n\n\uff18\u500d\u3050\u3089\u3044\u65e9\u304f\u306a\u3063\u305f\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u6df1\u3044\u3001\u3001\u3001\u3001\n\u300c[Ruby \u3067\u5b9f\u88c5\u3059\u308b\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u3075\u308b\u3044](https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=0CCkQFjAA&url=http%3A%2F%2Fjp.rubyist.net%2F%3Fc%3Dplugin%3Bplugin%3Dattach_download%3Bp%3DKansaiWorkshop28%3Bfile_name%3Deratosthenes.pdf&ei=ijxiU7XnGcH28QWp8oHwDQ&usg=AFQjCNHbaGxLZ5TFLlInXIopOWd-Mq_Xsg&sig2=-wAq3FsvIBE2sAWyFo-ahA&bvm=bv.65636070,d.dGc) \u5c0f\u6ce2\u79c0\u96c4(pdf)\n\u300d\u306e\u826f\u8cea\u306a\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u3066\u3044\u308b\n\n\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u7be9\u3068\u306f\u7d20\u6570\u3092\u898b\u3064\u3051\u51fa\u3059\u305f\u3081\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3042\u308b\u3002\n\u307e\u305a\u6700\u521d\u306e\u7d20\u6570\u3067\u3042\u308b\uff12\u306e\u500d\u6570\u3092\u524a\u9664\u3057\u3066\u3044\u304f\u3001\u6b21\u306b\u6b8b\u3063\u305f\u6570\u306e\u6700\u521d\u306b\u6765\u308b\u6570\u3001\uff13\u306e\u500d\u6570\u3092\u524a\u9664\u3057\u3066\u3044\u304f\u3002\u6b21\u306b\u304f\u308b\u6570\u3001\uff15\u306e\u500d\u6570\u3092\u524a\u9664\u3057\u3066\u3044\u304f\u3002\n\u540c\u3058\u3088\u3046\u306a\u52d5\u4f5c\u3092\u5ef6\u3005\u3068\u7d9a\u3051\u3066\u7d20\u6570\u3092\u898b\u3064\u3051\u308b\u3002\n\n\u3053\u306e\u8a18\u4e8b\u306f\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u7be9\u3092\u901a\u3057\u3066\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5a01\u529b\u3092\u4f53\u611f\u3059\u308b\u4e8b\u304c\u76ee\u7684\n\n```rb\nrequire 'benchmark'\ndef erato_1(n)\n  numbers = (2..n).to_a # 2 \uff5e n \u306e\u914d\u5217\u3092\u7528\u610f\n  primes = [] # \u7d20\u6570\u3092\u653e\u308a\u8fbc\u3080\u305f\u3081\u306e\u914d\u5217\n  loop do\n    d = numbers.shift # \u914d\u5217\u306e\u5148\u982d\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3057\u3066\n  break if d == nil # nil \u306a\u3089\u7d42\u4e86\n    primes << d # \u7d20\u6570\u306e\u914d\u5217\u306b\u8ffd\u52a0\u3002\n    to_delete = [] # \u53d6\u308a\u9664\u304f\u5019\u88dc\u3092\u5165\u308c\u308b\u914d\u5217\n    numbers.each do |x|\n      to_delete << x if x % d == 0 # d \u306e\u500d\u6570\u3092\u53d6\u308a\u9664\u304f\u5019\u88dc\u306b\u5165\u308c\u308b\n    end\n    numbers -= to_delete # d \u306e\u500d\u6570\u304c\u305d\u3063\u304f\u308a\u5f15\u304b\u308c\u308b\n  end\n  return primes\nend\n\nputs Benchmark.measure{ erato_1(10000) }\n\n=>  0.120000   0.000000   0.120000 (  0.120805)\n```\n\nruby\u306e\u30d7\u30ed\u30d5\u30a1\u30a4\u30e9\u3067\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3001\u30d5\u30a1\u30a4\u30eb\u306e\u5148\u982d\u306b\n\\#!/usr/local/bin/ruby # -r profile\u3092\u52a0\u3048\u3066\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b.\n\n```rb\n\ntime   seconds   seconds    calls  ms/call  ms/call  name\n 57.31    26.15     26.15   777862     0.03     0.16  Object#erato_1\n 25.68    37.87     11.72     1230     9.53    36.90  Array#each\n  8.99    41.97      4.10   777860     0.01     0.01  Fixnum#==\n  7.69    45.48      3.51   776631     0.00     0.00  Fixnum#%\n  0.15    45.55      0.07     9999     0.01     0.01  Array#<<\n  0.11    45.60      0.05     1229     0.04     0.04  Array#-\n....\u4e0b\u8a18\u7701\u7565\n```\n\nif x % d == 0\u306e\u6761\u4ef6\u5224\u65ad\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3044\u308b\u3001\n\u307e\u305fprime = [ ]\u306e\u3068\u3053\u308d\u304cnumbers\u306b\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u306e\u3067\u4e0d\u8981\u3067\u3042\u308b\n\n```rb\nrequire 'benchmark'\ndef erato_2(n)\n  numbers = (2..n).to_a\n  i = 0\n  loop do\n  break unless d = numbers[i]\n    to_delete = []\n    (2*d..n).step(d){|e| to_delete << e}\n    numbers -= to_delete\n    i += 1\n  end\n  return numbers\nend\n\nputs Benchmark.measure{\n  erato_2(10000) }\n=> 0.090000   0.010000   0.100000 (  0.097825)\n```\n\n\u5c11\u3057\u3060\u3051\u306f\u3084\u304f\u306a\u3063\u305f\n\u305f\u3060\\#erato_2\u306b\u306f\u307e\u3060\u7121\u99c4\u304c\u3042\u308b\u3001\u4f8b\u3048\u3070\uff11\uff10\uff10\u307e\u3067\u306e\u7d20\u6570\u3092\u8abf\u3079\u305f\u3044\u3068\u3057\u3066\u30012,3,5,7\u306e\u500d\u6570\u3092\u524a\u9664\u3057\u305f\u6642\u70b9\u3067\uff11\uff10\uff10\u307e\u3067\u306e\u7d20\u6570\u306f\u3059\u3079\u3066\u305d\u308d\u3063\u3066\u3044\u308b\u72b6\u614b\u3067\u3042\u308b\u304c\u305d\u306e\u3042\u3068\u306e\uff11\uff11\u3001\uff11\uff13\u3001\u3001\u4ee5\u964d\u306e\u500d\u6570\u3092\u524a\u9664\u3057\u3066\u3044\u308b\u51e6\u7406\u304c\u7121\u99c4\u3067\u3042\u308b\n\n\n```rb\ndef erato_3(n)\n  sqrt = Math.sqrt(n).floor\n  numbers = (2...n).to_a\n  i = 0\n  loop do\n    break if i >= sqrt\n    d = numbers[i]\n    to_delete = []\n    (2*d..n).step(d){|e| to_delete << e}\n    numbers -= to_delete\n    i += 1\n  end\n  return numbers\nend\n\nputs Benchmark.measure{ erato_3(10000) }\n=> 0.020000   0.000000   0.020000 (  0.026519)\n```\n\n\uff13\u500d\u8fd1\u304f\u65e9\u304f\u306a\u3063\u305f\u3001\u3060\u304c\u307e\u3060\u65e9\u304f\u3059\u308b\u4f59\u5730\u304c\u3042\u308b\nnumbers -= to_delete\u306e\u7b87\u6240\u3067\u51e6\u7406\u91cf\u304c\u5897\u3048\u3066\u3044\u308b\u306e\u3067\u3053\u3053\u306e\u7b87\u6240\u3092\u306a\u304f\u3059\n\n```rb\ndef erato_4(n)\n  numbers = (0..n).to_a\n  numbers[0],numbers[1] = nil\n  numbers.each do |d|\n    next if d == nil\n    break if (Math.sqrt(n) < d)\n    (2*d..n).step(d){|e| numbers[e] = nil}\n  end\n  numbers.compact!\n  return numbers\nend\nputs Benchmark.measure{ erato_4(10000) }\n=> 0.010000   0.000000   0.010000 (  0.003047)\n```\n\n\uff18\u500d\u3050\u3089\u3044\u65e9\u304f\u306a\u3063\u305f\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u6df1\u3044\u3001\u3001\u3001\u3001\n", "tags": ["Ruby", "ruby2.1", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"]}