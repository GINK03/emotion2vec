{"context": "\n\n\u306f\u3058\u3081\u306b\nISLisp\u51e6\u7406\u7cfb\u3092\u81ea\u4f5c\u3057\u305f\u3068\u304d\u306bISLisp\u898f\u683c\u306b\u9069\u5408\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u306e\u691c\u67fb\u306b\u304a\u4f7f\u3044\u304f\u3060\u3055\u3044\u3002\n\n\u5229\u7528\u65b9\u6cd5\n\u30b3\u30fc\u30c9\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u30bb\u30fc\u30d6\u3057\u3001\u51e6\u7406\u7cfb\u304b\u3089\u30ed\u30fc\u30c9\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u7d50\u679c\u304c\u753b\u9762\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n\u7bc4\u56f2\n\u8ff0\u8a9e\u306e\u90e8\u5206\u3092\u30c6\u30b9\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u51fa\u5178\nISLisp\u691c\u8a3c\u30b7\u30b9\u30c6\u30e0\nhttp://islisp.org/jp/verification-jp.html\n\n\u30b3\u30fc\u30c9\n\n(defmacro test(form1 form2 :rest pred)\n  (if (null pred)\n      `(if (equal ,form1 ',form2)\n           (format (standard-output) \"~S is ok~%\" ',form1)\n           (format (standard-output) \"~S is bad~%\" ',form1))\n      `(if (,@pred ,form1 ',form2)\n           (format (standard-output) \"~S is ok~%\" ',form1)\n           (format (standard-output) \"~S is bad~%\" ',form1))))\n\n(test (eq () ()) t)\n(test (eq '() '()) t)\n(test (eq 'a 'a) t)\n(test (eq 'a 'A) t)\n(test (eq 'a 'b) nil)\n(test (eq 'f 'nil) nil)\n\n\n;;((eq 2 2) t)                      ; nil or t (IDEF)\n(test (eq 2 2.0) nil)\n;;((eq 100000000 100000000) nil)            ; nil or t (IDEF)\n;;((eq 10.00000 10.0) nil)              ; nil or t (IDEF)\n(test (eq (cons 1 2) (cons 1 2)) nil)\n(test (let ((x '(a))) (eq x x)) t)\n;;((eq '(a) '(a)) nil)                  ; nil or t (IDEF)\n;;((let ((x '(b)) (y '(a b))) (eq x (cdr y))) nil)  ; nil or t (IDEF)\n;;((eq '(b) (cdr '(a b))) nil)              ; nil or t (IDEF)\n(test (let ((p (lambda (x) x))) (eq p p)) t)\n(test (let ((x \"a\")) (eq x x)) t)\n;;((eq \"a\" \"a\") nil)\n            ; nil or t (IDEF)\n(test (let ((x \"\")) (eq x x)) t)\n;;((eq \"\" \"\") nil)                  ; nil or t (IDEF)\n(test (eq #\\a #\\A) nil)\n;;((eq #\\a #\\a) t)                  ; nil or t (IDEF)\n;;((eq #\\space #\\Space) t)              ; nil or t (IDEF)\n;;((eq #\\space #\\space) t)              ; nil or t (IDEF)\n;;;\n\n;;;\n;;; \u95a2\u6570 (EQL obj1 obj2) --> boolean\n;;;\n(test (eql () ()) t)\n(test (eql '() '()) t)\n(test (eql 'a 'a) t)\n(test (eql 'a 'A) t)\n(test (eql 'a 'b) nil)\n(test (eql 'f 'nil) nil)\n(test (eql 2 2) t)\n(test (eql 2 2.0) nil)\n(test (eql 100000000 100000000) t)\n(test (eql 10.00000 10.0) t)\n(test (eql (cons 1 2) (cons 1 2)) nil)\n(test (let ((x '(a))) (eql x x)) t)\n\n;;((eql '(a) '(a)) nil)                 ; nil or t (IDEF)\n;;((let ((x '(b)) (y '(a b))) (eql x (cdr y))) nil) ; nil or t (IDEF)\n;;((eql '(b) (cdr '(a b))) nil)             ; nil or t (IDEF)\n(test (let ((p (lambda (x) x))) (eql p p)) t)\n(test (let ((x \"a\")) (eql x x)) t)\n;;((eql \"a\" \"a\") nil)                   ; nil or t (IDEF)\n(test (let ((x \"\")) (eql x x)) t)\n;;((eql \"\" \"\") nil)\n                    ; nil or t (IDEF)\n(test (eql #\\a #\\A) nil)\n(test (eql #\\a #\\a) t)\n(test (eql #\\space #\\Space) t)\n(test (eql #\\space #\\space) t)\n;;;\n;;;\n\n(test (eql *most-negative-float* *most-negative-float*) t)\n(test (eql *most-negative-float* *most-positive-float*) nil)\n\n;;;\n;;; \u95a2\u6570 (EQUAL obj1 obj2) --> boolean\n;;;\n(test (equal 'a 'a) t)\n(test (equal 2 2) t)\n(test (equal 2 2.0) nil)\n(test (equal '(a) '(a)) t)\n(test (equal '(a (b) c) '(a (b) c)) t)\n(test (equal (cons 1 2) (cons 1 2)) t)\n(test (equal '(a) (list 'a)) t)\n(test (equal \"abc\" \"abc\") t)\n(test (equal (vector 'a) (vector 'a)) t)\n(test (equal #(a b) #(a b)) t)\n(test (equal #(a b) #(a c)) nil)\n(test (equal \"a\" \"A\") nil)\n;;;\n;;;\n(test (equal 2.0 2.0) t)\n(test (equal *most-negative-float* *most-negative-float*) t)\n(test (equal *most-negative-float* *most-positive-float*) nil)\n(test (equal \"\" \"\") t)\n(test (equal (create-string 1000 #\\a) (create-string 1000 #\\a)) t)\n(test (equal (create-string 1000 #\\a) (create-string 1000 #\\b)) nil)\n(test (equal #() #()) t)\n(test (equal #(a #(b) c) #(a #(b) c)) t)\n(test (equal #(a #(b) c) #(a #(d) c)) nil)\n(test (equal (create-vector 1000 'a) (create-vector 1000 'a)) t)\n(test (equal (create-vector 1000 'a) (create-vector 1000 'b)) nil)\n(test (equal (create-array () 'a) (create-array () 'a)) t)\n(test (equal (create-array () 'a) (create-array () 'b)) nil)\n(test (equal (create-array '(1 2 3) 'a) (create-array '(1 2 3) 'a)) t)\n(test (equal (create-array '(1 2 3) 'a) (create-array '(1 2 3) 'b)) nil)\n\n;;;\n;;; \u95a2\u6570 (NOT obj) --> boolean\n;;;\n(test (not t) nil)\n(test (not '()) t)\n(test (not 'nil) t)\n(test (not nil) t)\n(test (not 3) nil)\n(test (not (list)) t)\n(test (not (list 3)) nil)\n;;;\n\n;;;\n;;; \u7279\u6b8a\u5f62\u5f0f (AND form*) --> <object>\n;;;\n(test (and (= 2 2) (> 2 1)) t)\n(test (and (= 2 2) (< 2 1)) nil)\n(test (and (eql 'a 'a) (not (> 1 2))) t)\n(test (let ((x 'a)) (and x (setq x 'b))) b)\n(test (let ((x nil)) (and x (setq x 'b))) nil)\n(test (let ((time 10))\n   (if (and (< time 24) (> time 12))\n       (- time 12) time))\n 10\n eql)\n(test (let ((time 18))\n   (if (and (< time 24) (> time 12))\n       (- time 12) time))\n 6\n eql)\n;;;\n;;;\n(test (and) t)\n(test (and (cons 1 2)) (1 . 2) equal)\n(test (and (cons 1 2) nil (cons 3 4)) nil)\n(test (and (cons 1 2) (cons 3 4) nil) nil)\n(test (and (cons 1 2) (cons 3 4) (cons 5 6)) (5 . 6) equal)\n\n;;;\n;;; \u7279\u6b8a\u5f62\u5f0f (OR form*) --> <object>\n;;;\n(test (or (= 2 2) (> 2 1)) t)\n(test (or (= 2 2) (< 2 1)) t)\n(test (let ((x 'a)) (or x (setq x 'b))) a)\n(test (let ((x nil)) (or x (setq x 'b))) b)\n;;;\n;;;\n(test (or) nil)\n(test (or (cons 1 2)) (1 . 2) equal)\n(test (or nil (cons 1 2) (cons 3 4)) (1 . 2) equal)\n(test (or (cons 1 2) (cons 3 4) (cons 5 6)) (1 . 2) equal)\n(test (or nil nil nil nil nil) nil)\n\n\n#\u306f\u3058\u3081\u306b\nISLisp\u51e6\u7406\u7cfb\u3092\u81ea\u4f5c\u3057\u305f\u3068\u304d\u306bISLisp\u898f\u683c\u306b\u9069\u5408\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u306e\u691c\u67fb\u306b\u304a\u4f7f\u3044\u304f\u3060\u3055\u3044\u3002\n\n#\u5229\u7528\u65b9\u6cd5\n\u30b3\u30fc\u30c9\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u30bb\u30fc\u30d6\u3057\u3001\u51e6\u7406\u7cfb\u304b\u3089\u30ed\u30fc\u30c9\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u7d50\u679c\u304c\u753b\u9762\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n#\u7bc4\u56f2\n\u8ff0\u8a9e\u306e\u90e8\u5206\u3092\u30c6\u30b9\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\n#\u51fa\u5178\nISLisp\u691c\u8a3c\u30b7\u30b9\u30c6\u30e0\nhttp://islisp.org/jp/verification-jp.html\n\n\n\n#\u30b3\u30fc\u30c9\n\n```\n\n(defmacro test(form1 form2 :rest pred)\n  (if (null pred)\n      `(if (equal ,form1 ',form2)\n           (format (standard-output) \"~S is ok~%\" ',form1)\n           (format (standard-output) \"~S is bad~%\" ',form1))\n      `(if (,@pred ,form1 ',form2)\n           (format (standard-output) \"~S is ok~%\" ',form1)\n           (format (standard-output) \"~S is bad~%\" ',form1))))\n\n(test (eq () ()) t)\n(test (eq '() '()) t)\n(test (eq 'a 'a) t)\n(test (eq 'a 'A) t)\n(test (eq 'a 'b) nil)\n(test (eq 'f 'nil) nil)\n\n\n;;((eq 2 2) t)\t\t\t\t\t\t; nil or t (IDEF)\n(test (eq 2 2.0) nil)\n;;((eq 100000000 100000000) nil)\t\t\t; nil or t (IDEF)\n;;((eq 10.00000 10.0) nil)\t\t\t\t; nil or t (IDEF)\n(test (eq (cons 1 2) (cons 1 2)) nil)\n(test (let ((x '(a))) (eq x x)) t)\n;;((eq '(a) '(a)) nil)\t\t\t\t\t; nil or t (IDEF)\n;;((let ((x '(b)) (y '(a b))) (eq x (cdr y))) nil)\t; nil or t (IDEF)\n;;((eq '(b) (cdr '(a b))) nil)\t\t\t\t; nil or t (IDEF)\n(test (let ((p (lambda (x) x))) (eq p p)) t)\n(test (let ((x \"a\")) (eq x x)) t)\n;;((eq \"a\" \"a\") nil)\n\t\t\t; nil or t (IDEF)\n(test (let ((x \"\")) (eq x x)) t)\n;;((eq \"\" \"\") nil)\t\t\t\t\t; nil or t (IDEF)\n(test (eq #\\a #\\A) nil)\n;;((eq #\\a #\\a) t)\t\t\t\t\t; nil or t (IDEF)\n;;((eq #\\space #\\Space) t)\t\t\t\t; nil or t (IDEF)\n;;((eq #\\space #\\space) t)\t\t\t\t; nil or t (IDEF)\n;;;\n\n;;;\n;;; \u95a2\u6570 (EQL obj1 obj2) --> boolean\n;;;\n(test (eql () ()) t)\n(test (eql '() '()) t)\n(test (eql 'a 'a) t)\n(test (eql 'a 'A) t)\n(test (eql 'a 'b) nil)\n(test (eql 'f 'nil) nil)\n(test (eql 2 2) t)\n(test (eql 2 2.0) nil)\n(test (eql 100000000 100000000) t)\n(test (eql 10.00000 10.0) t)\n(test (eql (cons 1 2) (cons 1 2)) nil)\n(test (let ((x '(a))) (eql x x)) t)\n\n;;((eql '(a) '(a)) nil)\t\t\t\t\t; nil or t (IDEF)\n;;((let ((x '(b)) (y '(a b))) (eql x (cdr y))) nil)\t; nil or t (IDEF)\n;;((eql '(b) (cdr '(a b))) nil)\t\t\t\t; nil or t (IDEF)\n(test (let ((p (lambda (x) x))) (eql p p)) t)\n(test (let ((x \"a\")) (eql x x)) t)\n;;((eql \"a\" \"a\") nil)\t\t\t\t\t; nil or t (IDEF)\n(test (let ((x \"\")) (eql x x)) t)\n;;((eql \"\" \"\") nil)\n\t\t\t\t\t; nil or t (IDEF)\n(test (eql #\\a #\\A) nil)\n(test (eql #\\a #\\a) t)\n(test (eql #\\space #\\Space) t)\n(test (eql #\\space #\\space) t)\n;;;\n;;;\n\n(test (eql *most-negative-float* *most-negative-float*) t)\n(test (eql *most-negative-float* *most-positive-float*) nil)\n\n;;;\n;;; \u95a2\u6570 (EQUAL obj1 obj2) --> boolean\n;;;\n(test (equal 'a 'a) t)\n(test (equal 2 2) t)\n(test (equal 2 2.0) nil)\n(test (equal '(a) '(a)) t)\n(test (equal '(a (b) c) '(a (b) c)) t)\n(test (equal (cons 1 2) (cons 1 2)) t)\n(test (equal '(a) (list 'a)) t)\n(test (equal \"abc\" \"abc\") t)\n(test (equal (vector 'a) (vector 'a)) t)\n(test (equal #(a b) #(a b)) t)\n(test (equal #(a b) #(a c)) nil)\n(test (equal \"a\" \"A\") nil)\n;;;\n;;;\n(test (equal 2.0 2.0) t)\n(test (equal *most-negative-float* *most-negative-float*) t)\n(test (equal *most-negative-float* *most-positive-float*) nil)\n(test (equal \"\" \"\") t)\n(test (equal (create-string 1000 #\\a) (create-string 1000 #\\a)) t)\n(test (equal (create-string 1000 #\\a) (create-string 1000 #\\b)) nil)\n(test (equal #() #()) t)\n(test (equal #(a #(b) c) #(a #(b) c)) t)\n(test (equal #(a #(b) c) #(a #(d) c)) nil)\n(test (equal (create-vector 1000 'a) (create-vector 1000 'a)) t)\n(test (equal (create-vector 1000 'a) (create-vector 1000 'b)) nil)\n(test (equal (create-array () 'a) (create-array () 'a)) t)\n(test (equal (create-array () 'a) (create-array () 'b)) nil)\n(test (equal (create-array '(1 2 3) 'a) (create-array '(1 2 3) 'a)) t)\n(test (equal (create-array '(1 2 3) 'a) (create-array '(1 2 3) 'b)) nil)\n\n;;;\n;;; \u95a2\u6570 (NOT obj) --> boolean\n;;;\n(test (not t) nil)\n(test (not '()) t)\n(test (not 'nil) t)\n(test (not nil) t)\n(test (not 3) nil)\n(test (not (list)) t)\n(test (not (list 3)) nil)\n;;;\n\n;;;\n;;; \u7279\u6b8a\u5f62\u5f0f (AND form*) --> <object>\n;;;\n(test (and (= 2 2) (> 2 1)) t)\n(test (and (= 2 2) (< 2 1)) nil)\n(test (and (eql 'a 'a) (not (> 1 2))) t)\n(test (let ((x 'a)) (and x (setq x 'b))) b)\n(test (let ((x nil)) (and x (setq x 'b))) nil)\n(test (let ((time 10))\n   (if (and (< time 24) (> time 12))\n       (- time 12) time))\n 10\n eql)\n(test (let ((time 18))\n   (if (and (< time 24) (> time 12))\n       (- time 12) time))\n 6\n eql)\n;;;\n;;;\n(test (and) t)\n(test (and (cons 1 2)) (1 . 2) equal)\n(test (and (cons 1 2) nil (cons 3 4)) nil)\n(test (and (cons 1 2) (cons 3 4) nil) nil)\n(test (and (cons 1 2) (cons 3 4) (cons 5 6)) (5 . 6) equal)\n\n;;;\n;;; \u7279\u6b8a\u5f62\u5f0f (OR form*) --> <object>\n;;;\n(test (or (= 2 2) (> 2 1)) t)\n(test (or (= 2 2) (< 2 1)) t)\n(test (let ((x 'a)) (or x (setq x 'b))) a)\n(test (let ((x nil)) (or x (setq x 'b))) b)\n;;;\n;;;\n(test (or) nil)\n(test (or (cons 1 2)) (1 . 2) equal)\n(test (or nil (cons 1 2) (cons 3 4)) (1 . 2) equal)\n(test (or (cons 1 2) (cons 3 4) (cons 5 6)) (1 . 2) equal)\n(test (or nil nil nil nil nil) nil)\n\n```\n", "tags": ["ISLisp", "lisp"]}