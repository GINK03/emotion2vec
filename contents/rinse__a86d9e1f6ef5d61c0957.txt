{"context": " More than 1 year has passed since last update.\u524d\u306b\u6295\u7a3f\u3057\u305f\u8a18\u4e8b\u3001\u914d\u5217\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u306f\u6c17\u306e\u5411\u304f\u307e\u307e\u306b\u66f8\u3044\u305f\u305f\u3081\u6c5a\u3044\u30af\u30e9\u30b9\u3092\u66f8\u3044\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u306e\u3067\u3001\u5c11\u3057\u7dba\u9e97\u306b\u3057\u305f\u3082\u306e\u3092\u6295\u7a3f\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n//\n// get array-information\n\n\u914d\u5217\u306e\u57fa\u672c\u578b\u3092\u5f97\u308b\u30e1\u30bf\u95a2\u6570\u3067\u3059\u3002\n\u4f8b\u3048\u3070\u3001int[5]\u306e\u57fa\u672c\u578b\u306fint\u3001int[10][20]\u306e\u57fa\u672c\u578b\u306fint[20]\u3067\u3059\u3002\n\u7279\u6b8a\u5316\u304c\u524d\u63d0\u306a\u306e\u3067\u3082\u3063\u3068\u3082\u57fa\u672c\u7684\u306a\u5f62\u306f\u7a7a\u306e\u30af\u30e9\u30b9\u3067\u3059\u304c\u3001\nSFINAE\u3092\u8003\u616e\u3057\u3066\u5b9a\u7fa9\u3060\u3051\u306f\u66f8\u3044\u305f\u307b\u3046\u304c\u826f\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\uff08SFINAE\u306fsubstitution fault\u3092\u7121\u8996\u3059\u308b\u3060\u3051\u3067\u3001\u5b9a\u7fa9\u81ea\u4f53\u304c\u306a\u3044\u3068\u305d\u306e\u6642\u70b9\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3092\u5410\u3044\u3066\u3057\u307e\u3046\u3002\u306f\u305a\u3002\u9593\u9055\u3063\u3066\u305f\u3089\u3054\u3081\u3093\u306a\u3055\u3044\u3002\uff09\n// Get Base Type of Array\ntemplate < class >\nstruct array_base\n{ // Ty must be array\n};\ntemplate < class Ty, std::size_t size >\nstruct array_base < Ty[size] >\n{\n  using type = Ty;\n};\ntemplate < class Ty, std::size_t size >\nstruct array_base < std::array < Ty, size > >\n{\n  using type = Ty;\n};\ntemplate < class Ty >\nusing array_base_t = typename array_base < Ty >::type;\n\n\u540c\u69d8\u306b\u3001\u914d\u5217\u306e\u9577\u3055\u3092\u53d6\u5f97\u3059\u308b\u30e1\u30bf\u95a2\u6570\u3067\u3059\u3002\n//\n// Get Length of Array\ntemplate < class >\nstruct array_length\n{ // Ty must be array\n};\ntemplate < class Ty, std::size_t size >\nstruct array_length < Ty[size] >\n{\n  enum : std::size_t { value = size };\n};\ntemplate < class Ty, std::size_t size >\nstruct array_length < std::array < Ty, size > >\n{\n  enum : std::size_t { value = size };\n};\n\n\u3053\u308c\u3060\u3051\u306f\u524d\u56de\u4f5c\u3063\u3066\u3044\u307e\u3057\u305f\u3001rank\u3067\u3059\u3002\n\u6b21\u5143\u6570\u3092\u6c42\u3081\u307e\u3059\u3002\n_array_rank\u306f\u5b9f\u88c5\u3092\u62c5\u3063\u3066\u3044\u307e\u3059\u3002\n\u5f15\u6570\u3092\u4f7f\u3063\u3066\u6b21\u5143\u6570\u3092\u6570\u3048\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u96a0\u3059\u305f\u3081\u306b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3068\u5206\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n//\n// Get Rank of Array\ntemplate < class, std::size_t rank >\nstruct _array_rank\n{\n  enum : std::size_t { value = rank };\n};\ntemplate < class Ty, std::size_t size, std::size_t rank >\nstruct _array_rank < std::array < Ty, size >, rank >\n{\n  enum { value = _array_rank < Ty, rank + 1 >::value };\n};\ntemplate < class Ty, std::size_t size, std::size_t rank >\nstruct _array_rank < Ty[size], rank >\n{\n  enum { value = _array_rank < Ty, rank + 1 >::value };\n};\ntemplate < class _array >\nusing array_rank = _array_rank < _array, 0 >;\n\n\u6b8b\u5ff5\u306a\u304c\u3089\u3082\u3046\u4e00\u3064\u30e1\u30bf\u95a2\u6570\u3002is_array\u3067\u3059\u3002\nstd::is_array\u306fstd::array\u3092\u914d\u5217\u3068\u8a8d\u8b58\u3057\u307e\u305b\u3093\u3002\u4ef2\u304c\u60aa\u3044\u306e\u304b\u3057\u3089\u3002\n//\n// is_array\ntemplate < class >\nstruct is_array : std::false_type {};\ntemplate < class Ty, std::size_t size >\nstruct is_array < Ty[size] > : std::true_type {};\ntemplate < class Ty, std::size_t size >\nstruct is_array < std::array < Ty, size > > : std::true_type {};\n\n\u3055\u3066\u3001\u3053\u308c\u3089\u3092\u675f\u306d\u305farray_element\u3067\u3059\u3002\n\u5b9f\u88c5\u3092\u5168\u3066\u4e0a\u306e\u30e1\u30bf\u95a2\u6570\u306b\u6295\u3052\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u306e\u30af\u30e9\u30b9\u306f\u30cd\u30a4\u30c6\u30a3\u30d6\u306a\u914d\u5217\u3068STL\u3068\u3067\u533a\u5225\u3059\u308b\u5fc5\u8981\u304c\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n//\n// Get Information of Static Array\ntemplate < class Ty, std::size_t N = 1 >\nstruct array_element\n{\n  static_assert ( is_array < Ty >::value, \"Type must be array\" );\n  using type = typename array_element < array_base_t < Ty >, N - 1 >::type;\n  using value_type = typename array_element < array_base_t < Ty >, N - 1 >::value_type;\n  enum : std::size_t \n  {\n    max_size = array_element< array_base_t < Ty >, N - 1 >::max_size,\n    rank = array_element< array_base_t < Ty >, N - 1 >::rank,\n  };\n};\ntemplate < class Ty >\nstruct array_element < Ty, 1 >\n{ \n  static_assert ( is_array < Ty >::value, \"Type must be array\" );\n  using type = Ty;\n  using value_type = array_base_t < Ty >;\n  enum : std::size_t\n  {\n    max_size = array_length < Ty >::value,\n    rank = array_rank < Ty >::value,\n  };\n};\ntemplate < class Ty >\nstruct array_element < Ty, 0 >\n{ // N == 0 is invalid\n// \u3053\u3053\u306fstatic_assert\u306e\u65b9\u304c\u3044\u3044\u304b\u3082\uff1f\n};\n\n\u5024\u3092\u5f97\u308b\u3068\u304d\u306f\u578b\u63a8\u8ad6\u306e\u50cd\u304f\u95a2\u6570\u304c\u826f\u3044\u3067\u3057\u3087\u3046\u3002\n// get length of static array\ntemplate < class Ty > static constexpr\nstd::size_t lengthof( const Ty& ) noexcept\n{\n  return array_length< Ty >::value;\n}\n// get rank of static array\ntemplate < class Ty > static constexpr\nstd::size_t rankof( const Ty& ) noexcept\n{\n  return arrat_rank< Ty >::value;\n}\n\n\u30aa\u30de\u30b1\u3067\u3059\u3002\nstd::array\u306ebegin() / end()\u304cconstexpr\u3058\u3083\u306a\u3044\u306e\u306f\u60b2\u3057\u3044\u3053\u3068\u3067\u3054\u3056\u3044\u307e\u3059\u3002\n\u305d\u3053\u3067\u3001\u30c1\u30e7\u30ed\u3063\u3068\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\nnamespace std\n{\ntemplate < class Ty, std::size_t size > static constexpr\nauto begin( std::array < Ty, size >& arg ) -> decltype( arg.begin() )\n{\n  return reinterpret_cast < decltype( arg.begin() ) > ( &arg );\n}\ntemplate < class Ty, std::size_t size > static constexpr\nauto cbegin( const std::array < Ty, size >& arg ) -> decltype( arg.cbegin() )\n{\n  return reinterpret_cast < decltype( arg.cbegin() ) > ( &arg );\n}\n\ntemplate < class Ty, std::size_t size > static constexpr\nauto end( std::array < Ty, size >& arg ) -> decltype( arg.end() )\n{\n  return reinterpret_cast < decltype( arg.end() ) > ( reinterpret_cast < Ty( & )[size] > ( arg ) + size );\n}\ntemplate < class Ty, std::size_t size > static constexpr\nauto cend( const std::array < Ty, size >& arg ) -> decltype( arg.cend() )\n{\n  return reinterpret_cast < decltype( arg.cend() ) > ( reinterpret_cast < Ty( & )[size] > ( arg ) + size );\n}\n}\n\n\u8133\u5185\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u306f\u3053\u308c\u3067\u3044\u3051\u305f\u3002\n\u305d\u308c\u306b\u3057\u3066\u3082std\u540d\u524d\u7a7a\u9593\u306bSTL\u3067\u3042\u308bstd::array\u306e\u7279\u6b8a\u5316\u3092\u66f8\u304f\u306e\u306f\u3042\u307e\u308a\u8912\u3081\u3089\u308c\u305f\u3053\u3068\u3067\u306f\u306a\u3044\u3067\u3059\u306d\u3002\n\u304a\u3068\u306a\u3057\u304fC++14\u3092\u5f85\u3061\u307e\u3059\u3002\n\u524d\u306b\u6295\u7a3f\u3057\u305f\u8a18\u4e8b\u3001[\u914d\u5217\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b](http://qiita.com/rinse_/items/9e7b7104321a2a8ee0a5)\u306f\u6c17\u306e\u5411\u304f\u307e\u307e\u306b\u66f8\u3044\u305f\u305f\u3081\u6c5a\u3044\u30af\u30e9\u30b9\u3092\u66f8\u3044\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u306e\u3067\u3001\u5c11\u3057\u7dba\u9e97\u306b\u3057\u305f\u3082\u306e\u3092\u6295\u7a3f\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n```\n//\n// get array-information\n```\n\n\u914d\u5217\u306e\u57fa\u672c\u578b\u3092\u5f97\u308b\u30e1\u30bf\u95a2\u6570\u3067\u3059\u3002\n\u4f8b\u3048\u3070\u3001`int[5]`\u306e\u57fa\u672c\u578b\u306f`int`\u3001`int[10][20]`\u306e\u57fa\u672c\u578b\u306f`int[20]`\u3067\u3059\u3002\n\u7279\u6b8a\u5316\u304c\u524d\u63d0\u306a\u306e\u3067\u3082\u3063\u3068\u3082\u57fa\u672c\u7684\u306a\u5f62\u306f\u7a7a\u306e\u30af\u30e9\u30b9\u3067\u3059\u304c\u3001\nSFINAE\u3092\u8003\u616e\u3057\u3066\u5b9a\u7fa9\u3060\u3051\u306f\u66f8\u3044\u305f\u307b\u3046\u304c\u826f\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\uff08SFINAE\u306fsubstitution fault\u3092\u7121\u8996\u3059\u308b\u3060\u3051\u3067\u3001\u5b9a\u7fa9\u81ea\u4f53\u304c\u306a\u3044\u3068\u305d\u306e\u6642\u70b9\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3092\u5410\u3044\u3066\u3057\u307e\u3046\u3002\u306f\u305a\u3002\u9593\u9055\u3063\u3066\u305f\u3089\u3054\u3081\u3093\u306a\u3055\u3044\u3002\uff09\n\n```\n// Get Base Type of Array\ntemplate < class >\nstruct array_base\n{ // Ty must be array\n};\ntemplate < class Ty, std::size_t size >\nstruct array_base < Ty[size] >\n{\n  using type = Ty;\n};\ntemplate < class Ty, std::size_t size >\nstruct array_base < std::array < Ty, size > >\n{\n  using type = Ty;\n};\ntemplate < class Ty >\nusing array_base_t = typename array_base < Ty >::type;\n```\n\n\u540c\u69d8\u306b\u3001\u914d\u5217\u306e\u9577\u3055\u3092\u53d6\u5f97\u3059\u308b\u30e1\u30bf\u95a2\u6570\u3067\u3059\u3002\n\n```\n//\n// Get Length of Array\ntemplate < class >\nstruct array_length\n{ // Ty must be array\n};\ntemplate < class Ty, std::size_t size >\nstruct array_length < Ty[size] >\n{\n  enum : std::size_t { value = size };\n};\ntemplate < class Ty, std::size_t size >\nstruct array_length < std::array < Ty, size > >\n{\n  enum : std::size_t { value = size };\n};\n```\n\n\u3053\u308c\u3060\u3051\u306f\u524d\u56de\u4f5c\u3063\u3066\u3044\u307e\u3057\u305f\u3001rank\u3067\u3059\u3002\n\u6b21\u5143\u6570\u3092\u6c42\u3081\u307e\u3059\u3002\n_array_rank\u306f\u5b9f\u88c5\u3092\u62c5\u3063\u3066\u3044\u307e\u3059\u3002\n\u5f15\u6570\u3092\u4f7f\u3063\u3066\u6b21\u5143\u6570\u3092\u6570\u3048\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u96a0\u3059\u305f\u3081\u306b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3068\u5206\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\n```\n//\n// Get Rank of Array\ntemplate < class, std::size_t rank >\nstruct _array_rank\n{\n  enum : std::size_t { value = rank };\n};\ntemplate < class Ty, std::size_t size, std::size_t rank >\nstruct _array_rank < std::array < Ty, size >, rank >\n{\n  enum { value = _array_rank < Ty, rank + 1 >::value };\n};\ntemplate < class Ty, std::size_t size, std::size_t rank >\nstruct _array_rank < Ty[size], rank >\n{\n  enum { value = _array_rank < Ty, rank + 1 >::value };\n};\ntemplate < class _array >\nusing array_rank = _array_rank < _array, 0 >;\n```\n\n\u6b8b\u5ff5\u306a\u304c\u3089\u3082\u3046\u4e00\u3064\u30e1\u30bf\u95a2\u6570\u3002is_array\u3067\u3059\u3002\nstd::is_array\u306fstd::array\u3092\u914d\u5217\u3068\u8a8d\u8b58\u3057\u307e\u305b\u3093\u3002\u4ef2\u304c\u60aa\u3044\u306e\u304b\u3057\u3089\u3002\n\n```\n//\n// is_array\ntemplate < class >\nstruct is_array : std::false_type {};\ntemplate < class Ty, std::size_t size >\nstruct is_array < Ty[size] > : std::true_type {};\ntemplate < class Ty, std::size_t size >\nstruct is_array < std::array < Ty, size > > : std::true_type {};\n```\n\n\u3055\u3066\u3001\u3053\u308c\u3089\u3092\u675f\u306d\u305farray_element\u3067\u3059\u3002\n\u5b9f\u88c5\u3092\u5168\u3066\u4e0a\u306e\u30e1\u30bf\u95a2\u6570\u306b\u6295\u3052\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u306e\u30af\u30e9\u30b9\u306f\u30cd\u30a4\u30c6\u30a3\u30d6\u306a\u914d\u5217\u3068STL\u3068\u3067\u533a\u5225\u3059\u308b\u5fc5\u8981\u304c\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\n```\n//\n// Get Information of Static Array\ntemplate < class Ty, std::size_t N = 1 >\nstruct array_element\n{\n  static_assert ( is_array < Ty >::value, \"Type must be array\" );\n  using type = typename array_element < array_base_t < Ty >, N - 1 >::type;\n  using value_type = typename array_element < array_base_t < Ty >, N - 1 >::value_type;\n  enum : std::size_t \n  {\n    max_size = array_element< array_base_t < Ty >, N - 1 >::max_size,\n    rank = array_element< array_base_t < Ty >, N - 1 >::rank,\n  };\n};\ntemplate < class Ty >\nstruct array_element < Ty, 1 >\n{ \n  static_assert ( is_array < Ty >::value, \"Type must be array\" );\n  using type = Ty;\n  using value_type = array_base_t < Ty >;\n  enum : std::size_t\n  {\n    max_size = array_length < Ty >::value,\n    rank = array_rank < Ty >::value,\n  };\n};\ntemplate < class Ty >\nstruct array_element < Ty, 0 >\n{ // N == 0 is invalid\n// \u3053\u3053\u306fstatic_assert\u306e\u65b9\u304c\u3044\u3044\u304b\u3082\uff1f\n};\n```\n\n\u5024\u3092\u5f97\u308b\u3068\u304d\u306f\u578b\u63a8\u8ad6\u306e\u50cd\u304f\u95a2\u6570\u304c\u826f\u3044\u3067\u3057\u3087\u3046\u3002\n\n```\n// get length of static array\ntemplate < class Ty > static constexpr\nstd::size_t lengthof( const Ty& ) noexcept\n{\n  return array_length< Ty >::value;\n}\n// get rank of static array\ntemplate < class Ty > static constexpr\nstd::size_t rankof( const Ty& ) noexcept\n{\n  return arrat_rank< Ty >::value;\n}\n```\n\n\u30aa\u30de\u30b1\u3067\u3059\u3002\nstd::array\u306ebegin() / end()\u304cconstexpr\u3058\u3083\u306a\u3044\u306e\u306f\u60b2\u3057\u3044\u3053\u3068\u3067\u3054\u3056\u3044\u307e\u3059\u3002\n\u305d\u3053\u3067\u3001\u30c1\u30e7\u30ed\u3063\u3068\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\n```\nnamespace std\n{\ntemplate < class Ty, std::size_t size > static constexpr\nauto begin( std::array < Ty, size >& arg ) -> decltype( arg.begin() )\n{\n  return reinterpret_cast < decltype( arg.begin() ) > ( &arg );\n}\ntemplate < class Ty, std::size_t size > static constexpr\nauto cbegin( const std::array < Ty, size >& arg ) -> decltype( arg.cbegin() )\n{\n  return reinterpret_cast < decltype( arg.cbegin() ) > ( &arg );\n}\n\ntemplate < class Ty, std::size_t size > static constexpr\nauto end( std::array < Ty, size >& arg ) -> decltype( arg.end() )\n{\n  return reinterpret_cast < decltype( arg.end() ) > ( reinterpret_cast < Ty( & )[size] > ( arg ) + size );\n}\ntemplate < class Ty, std::size_t size > static constexpr\nauto cend( const std::array < Ty, size >& arg ) -> decltype( arg.cend() )\n{\n  return reinterpret_cast < decltype( arg.cend() ) > ( reinterpret_cast < Ty( & )[size] > ( arg ) + size );\n}\n}\n```\n\n\u8133\u5185\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u306f\u3053\u308c\u3067\u3044\u3051\u305f\u3002\n\u305d\u308c\u306b\u3057\u3066\u3082std\u540d\u524d\u7a7a\u9593\u306bSTL\u3067\u3042\u308bstd::array\u306e\u7279\u6b8a\u5316\u3092\u66f8\u304f\u306e\u306f\u3042\u307e\u308a\u8912\u3081\u3089\u308c\u305f\u3053\u3068\u3067\u306f\u306a\u3044\u3067\u3059\u306d\u3002\n\u304a\u3068\u306a\u3057\u304fC++14\u3092\u5f85\u3061\u307e\u3059\u3002\n", "tags": ["C++11", "C++"]}