{"context": " More than 1 year has passed since last update.\u3053\u308c\u306f\u3001Lisp Advent Calendar 2014\u306e\uff11\uff12\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\nFinal Shift for Call/cc: Direct Implementation of Shift and Reset\nhttp://www.deinprogramm.de/sperber/papers/shift-reset-direct.pdf\n\u3068\u3044\u3046\u8ad6\u6587\u306b\u3088\u308c\u3070shift/reset \u6f14\u7b97\u5b50\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306bcall/cc\u6f14\u7b97\u5b50\u304b\u3089\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\ncallcc-shift-reset.scm\n(define-syntax reset\n  (syntax-rules ()\n                ((reset ?e) (*reset (lambda () ?e)))))\n(define-syntax shift\n  (syntax-rules ()\n                ((shift ?k ?e) (*shift (lambda (?k) ?e)))))\n\n(define (*meta-continuation* v)\n  (error \"You forgot the top-level reset...\"))\n\n(define (*abort thunk)\n  (let ((v (thunk)))\n    (*meta-continuation* v)))\n\n(define (*reset thunk)\n  (let ((mc *meta-continuation*))\n    (call-with-current-continuation\n      (lambda (k)\n        (begin\n          (set! *meta-continuation*\n            (lambda (v)\n              (set! *meta-continuation* mc)\n              (k v)))\n          (*abort thunk))))))\n\n(define (*shift f)\n  (call-with-current-continuation\n    (lambda (k)\n      (*abort (lambda ()\n                (f (lambda (v)\n                     (reset (k v)))))))))\n\n\n\u3053\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u898b\u3066\u3057\u307e\u3046\u3068\u300c\u9650\u5b9a\u7d99\u7d9a\u3092\u5b9f\u88c5\u3059\u308b\u306b\u306f\u3084\u3063\u3071\u308a\u5b9f\u88c5\u30ec\u30d9\u30eb\u304b\u3089\u7d44\u307f\u7acb\u3066\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3093\u3060\u306a\u3041\u300d\u3068\u601d\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u306f\u305f\u3057\u3066\u672c\u5f53\u306b\u305d\u3046\u3067\u3057\u3087\u3046\u304b\u3002\u672c\u5f53\u306bcall/cc\u306f\u5fc5\u8981\u306a\u3093\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u521d\u6b69:begin\u6587\u304b\u3089\u306e\u8131\u51fa\nscheme\u306e\u6587\u306f\u6240\u8a6e\u03bb\u5f0f\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u3059\u30021\u30b9\u30c6\u30c3\u30d7\u3054\u3068\u306b\u5b9f\u884c\u3092\u884c\u3046begin\u6587\u306b\u3064\u3044\u3066\u3082\u540c\u69d8\u3067\u3001\u305f\u3068\u3048\u3070\u6b21\u306e\u3088\u3046\u306b\u30de\u30af\u30ed\u3068\u3057\u3066\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nbegin-macro.scm\n(define-syntax BEGIN\n  (syntax-rules ()\n                ((BEGIN exp) exp)\n                ((BEGIN exp1 exp2 ...)\n                 ((lambda (e) (BEGIN exp2 ...)) exp1))\n                ))  \n\n\n\n\u3053\u3053\u3067\u6ce8\u76ee\u3057\u3066\u3082\u3089\u3044\u305f\u3044\u306e\u306f\u3001(lambda (e) (BEGIN exp2 ...)) \u3068\u3044\u3046\u90e8\u5206\u306f\u3061\u3087\u3046\u3069 exp1 \u306e\u8a08\u7b97\u306e\u7d99\u7d9a\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u3064\u307e\u308a exp1 \u306e\u90e8\u5206\u304c\u305f\u3068\u3048\u3070 (shift (lambda (cont) body)) \u3068\u7d99\u7d9a\u547c\u3073\u51fa\u3057\u306b\u306a\u3063\u3066\u3044\u308c\u3070\u3001\u5f15\u6570 cont \u306e\u90e8\u5206\u306b\u4ee3\u5165\u3055\u308c\u308b\u7d99\u7d9a\u306f\u3000(lambda (e) (BEGIN exp2 ...))\u3000\u3067\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\u3067\u306f\u3053\u3046\u3044\u3046\u7740\u60f3\u3092\u3082\u3063\u3066begin\u6587\u8131\u51fa\u7d99\u7d9a\uff08reset/shift\uff09\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nbegin-reset-shift.scm\n(define-syntax reset-cps\n  (syntax-rules (shift begin)\n    ;;;begin part\n    ((_ cont (begin exp1))\n     (cont exp1))\n    ((_ cont (begin (shift proc)))\n     (proc cont))\n    ((_ cont (begin (shift proc) exp2 ...))\n     (let ((programpoint (lambda (res) (reset-cps cont (begin exp2 ...)))))\n       (proc programpoint)))\n    ((_ cont (begin exp1 exp2 ...))\n     (let ((programpoint (lambda (res) (reset-cps cont (begin exp2 ...)))))\n       (reset-cps programpoint (begin exp1))))\n    ))\n(define-syntax reset\n  (syntax-rules ()\n    ((_ exp)\n     (reset-cps id exp))\n    ))\n(define (id x) x)\n\n\n\u898b\u3066\u3082\u3089\u3048\u3070\u308f\u304b\u308b\u3088\u3046\u306b reset \u30de\u30af\u30ed\u81ea\u4f53\u306f\u521d\u671f\u5024\uff08\u4f55\u3082\u3057\u306a\u3044\u7d99\u7d9a id\uff09\u3092\u4e0e\u3048\u308b\u305f\u3081\u306e\u30e9\u30c3\u30d1\u30fc\u3067\u3059\u3002\u672c\u4f53\u306f reset-cps \u3067\u3059\u3002\u6700\u521d\u306e\u5f15\u6570 cont \u304c\u73fe\u5728\u306e\u7d99\u7d9a\u3092\u660e\u793a\u5316\u3057\u3066\u3044\u308b\u3082\u306e\u3067\u3059\u3002\n\u306a\u304a\u3001\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u5358\u7d14\u306b (begin exp1 exp2 ...) \u3068\u3044\u3046\u8868\u73fe\u304c\u51fa\u3066\u304d\u305f\u3068\u304d\u306f exp2 ... \u4ee5\u964d\u306e\u8a55\u4fa1\u3092\u7d99\u7d9a\u3068\u3057\u3066\u73fe\u5728\u306e\u7d99\u7d9a cont \u306b\u30b9\u30bf\u30c3\u30af\u3055\u305b\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002shift \u304c\u51fa\u3066\u304d\u305f\u3068\u304d\u306f shift \u306e\u624b\u7d9a\u304d\u306b\u73fe\u5728\u306e\u7d99\u7d9a\u3092\u6e21\u3057\u3066\u8a55\u4fa1\u3092\u3055\u305b\u308b\u3068\u3044\u3046\u3082\u306e\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u5b9f\u884c\u7d50\u679c\u306f\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\nevaluated.scm\n> (reset\n   (begin\n     (display \"1\\n\")\n     (display \"2\\n\")\n     (shift (lambda (cont) (cont 0) (display \"3 shifted\\n\")))\n     (display \"4\\n\")\n     (shift (lambda (cont) (display \"5 exit\\n\")))\n     (display \"6\\n\")\n     (display \"END\\n\")\n     ))\n1\n2\n4\n5 exit\n3 shifted\n\n\n\u898b\u4e8b\u306b\u9650\u5b9a\u7d99\u7d9a\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u306d\u3002\u3053\u306e\u8abf\u5b50\u3067\u4ed6\u306e\u8868\u73fe\u306b\u3064\u3044\u3066\u3082\u9650\u5b9a\u7d99\u7d9a\u3092\u5b9f\u88c5\u3067\u304d\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u624b\u7d9a\u304d\u304b\u3089\u306e\u8131\u51fa\n\u5358\u7d14\u306a\u30a2\u30ea\u30c6\u30a3\uff11\u306e\u624b\u7d9a\u304d (proc value) \u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002value \u3092\u8a55\u4fa1\u3059\u308b\u3068\u304d\u3001\u305d\u306e\u6642\u70b9\u306e\u76f4\u5f8c\u306e\u7d99\u7d9a\u306f proc \u3067\u3059\u3002value \u3092\u8a55\u4fa1\u3059\u308b\u307e\u3048\u306e\u6642\u70b9\u306e\u7d99\u7d9a\u3092 cont \u3068\u3059\u308b\u3068 value \u3092\u8a55\u4fa1\u3057\u305f\u3068\u304d\u306e\u7d99\u7d9a\u306f proc + cont \u3068\u3044\u3046\u3082\u306e\u306b\u306a\u308b\u306f\u305a\u3067\u3059\u3002\n\nproc-shift-reset.scm\n(define-syntax reset-cps\n  (syntax-rules (shift begin)\n    ((_ cont (shift proc))\n     (proc cont))\n    ((_ cont (p a)) \n     (reset-cps (connect cont p) a)) \n    ((_ cont a)\n     (cont a)) \n   ))  \n(define-syntax reset\n  (syntax-rules ()\n    ((_ exp)\n     (reset-cps id exp))\n    ))  \n\n(define (connect c-src stacked-proc)\n  (lambda (x) \n    (c-src (stacked-proc x))))\n\n(define (id x) x)\n\n\n\u5b9f\u884c\u7d50\u679c\n\nproc-escape.scm\n(reset (succ (succ \n                (shift (lambda (c) (display \"continuation\\n\")             \n                         (c 9))))))\ncontinuation\n11\n\n\n\n\u3068\u3044\u3046\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u305f\u3060\u3001\u4e00\u5909\u6570\u306b\u3057\u304b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u306e\u3067 (+ 1 2) \u3068\u3044\u3046\u8868\u73fe\u306a\u3069\u306b\u306f\u5bfe\u51e6\u3067\u304d\u307e\u305b\u3093\u3002\u5bfe\u51e6\u7642\u6cd5\u7684\u306b\u6b21\u306e\u3088\u3046\u306a\u5b9f\u88c5\u304c\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\n2-param-shift-reset.scm\n(define-syntax reset-cps\n  (syntax-rules (shift begin)\n    ((_ cont (shift proc))\n     (proc cont))\n    ((_ cont (p a)) \n     (reset-cps (connect cont p) a)) \n    ((_ cont (p (shift proc) b ))\n     (reset-cps (connect cont (lambda (first) (p first b))) (shift proc)))\n    ((_ cont (p a (shift proc)))\n     (reset-cps (connect cont (lambda (second) (p a second))) (shift proc)))\n    ((_ cont a)\n     (cont a)) \n   ))  \n\n\n\u3053\u308c\u3067 (+ 1 (shift (lambda (c) (c 0)))) \u3068\u3044\u3046\u3088\u3046\u306a\u8131\u51fa\u3082\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\u304c\u3001\u304b\u306a\u308aad hoc\u306a\u5b9f\u88c5\u306a\u306e\u3067\uff13\u5909\u6570\u3001\uff14\u5909\u6570\u3068\u5f15\u6570\u304c\u5897\u3048\u305f\u3068\u304d\u306b\u3069\u3046\u3057\u3088\u3046\u3082\u306a\u3044\u3067\u3059\u2190\u3053\u308c\u304c\u4e0d\u5b8c\u5168\u306a\u3068\u3053\u308d\u3002\n\n\u307e\u3068\u3081\n\nbegin \u8131\u51fa\u3001\u624b\u7d9a\u304d\u8131\u51fa\u3092\u5b9f\u88c5\u3059\u308b\u3060\u3051\u3067\u304b\u306a\u308a\u9650\u5b9a\u7d99\u7d9a\u7684\u306a\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u4ed6\u306e\u7d30\u304b\u3044\u8868\u73fe\u306b\u3064\u3044\u3066\u306f\u30de\u30af\u30ed\u3067\u5b9f\u88c5\u53ef\u80fd\u304b\u3069\u3046\u304b\u3082\u542b\u3081\u3066\u691c\u8a0e\u8ab2\u984c\n\u306a\u304a\u3001\u3053\u306e\u65b9\u5f0f\u306e\u5834\u5408 http://okmij.org/ftp/continuations/against-callcc.html#memory-leak \u3053\u3053\u3067\u3044\u3046\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u3082\u767a\u751f\u3057\u306a\u3044\n\n\u307e\u3068\u3081\u305f\u30b3\u30fc\u30c9\n\nshift-reset.scm\n(define-syntax reset-cps\n  (syntax-rules (shift begin)\n    ;;;Begin begin part\n    ((_ cont (begin exp1))\n     (cont exp1))\n    ((_ cont (begin (shift proc)))\n     (proc cont))\n    ((_ cont (begin (shift proc) exp2 ...))\n     (let ((programpoint (lambda (res) (reset-cps cont (begin exp2 ...)))))\n       (proc programpoint)))\n    ((_ cont (begin exp1 exp2 ...))\n     (let ((programpoint (lambda (res) (reset-cps cont (begin exp2 ...)))))\n       (reset-cps programpoint (begin exp1))))\n   ;;;End begin part\n    ((_ cont (shift proc))\n     (proc cont))\n    ((_ cont (p a)) \n     (reset-cps (connect cont p) a)) \n    ((_ cont (p (shift proc) b ))\n     (reset-cps (connect cont (lambda (first) (p first b ...))) (shift proc)))\n    ((_ cont (p a (shift proc)))\n     (reset-cps (connect cont (lambda (second) (p a second))) (shift proc)))\n    ((_ cont (p a b)) \n     (let ((p-curried (curry* (p xa xb))))\n       (reset-cps cont ((p-curried a) b))))\n    ((_ cont a)\n     (cont a))\n   ))\n(define-syntax reset\n  (syntax-rules ()\n    ((_ exp)\n     (reset-cps id exp))\n    ))\n(define-syntax curry\n  (syntax-rules ()\n    ((_ (a) body)\n     (lambda (a) body))\n    ((_ (a b ...) body)\n     (lambda (a) (curry (b ...) body)))))\n\n(define-syntax curry*\n  (syntax-rules ()\n    ((_ (f args ...))\n     (curry (args ...) (f args ...)))))\n;;;;Leak test procedure from\n;;;;http://okmij.org/ftp/continuations/against-callcc.html#memory-leak  \n(define (leak-test1 identity-thunk)\n  (let loop ((id (lambda (x) x)))\n    (loop (id (identity-thunk)))))\n\n;;;;Some procedures;;;;;\n(define (stacking proc-cps)\n  (lambda (n)\n    (proc-cps n id)))\n\n(define (id x) x)\n\n(define (unitcont a)\n  (lambda (k) (k a)))\n\n(define (connect c-src stacked-proc)\n  (lambda (x)\n    (c-src (stacked-proc x))))\n(define (fact-cps n cont)\n  (if (= n 0)\n    cont\n    (fact-cps (- n 1) (lambda (x) (cont (* n x))))))\n(define (succ n) (+ 1 n))\n\n\n\u203b\u4e00\u90e8\u30c6\u30b9\u30c8\u4e2d\u306e\u624b\u7d9a\u304d\u3082\u5165\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u53c2\u8003\u6587\u732e\nGuy Lewis Steele, Jr. and Gerald Jay Sussman(1976), Lambda: The Ultimate Imperative\nPeter J. Landin (1965), A Generalization of Jumps and Labels\nHayo Thielecke (1998), An Introduction to Landin's \"A Generalization of Jumps and Labels\"\nJohn C.Reynolds (1993), The Discoveries of Continuations\nKenichi Asai, shift/reset \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u5165\u9580, ACM SIGPLAN Continuation Workshop 2011 \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30bb\u30c3\u30b7\u30e7\u30f3\u8cc7\u6599\n\u3053\u308c\u306f\u3001[Lisp Advent Calendar 2014](http://qiita.com/advent-calendar/2014/lisp)\u306e\uff11\uff12\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n* * *\nFinal Shift for Call/cc: Direct Implementation of Shift and Reset\nhttp://www.deinprogramm.de/sperber/papers/shift-reset-direct.pdf\n\u3068\u3044\u3046\u8ad6\u6587\u306b\u3088\u308c\u3070shift/reset \u6f14\u7b97\u5b50\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306bcall/cc\u6f14\u7b97\u5b50\u304b\u3089\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```scm:callcc-shift-reset.scm\n(define-syntax reset\n  (syntax-rules ()\n                ((reset ?e) (*reset (lambda () ?e)))))\n(define-syntax shift\n  (syntax-rules ()\n                ((shift ?k ?e) (*shift (lambda (?k) ?e)))))\n\n(define (*meta-continuation* v)\n  (error \"You forgot the top-level reset...\"))\n\n(define (*abort thunk)\n  (let ((v (thunk)))\n    (*meta-continuation* v)))\n\n(define (*reset thunk)\n  (let ((mc *meta-continuation*))\n    (call-with-current-continuation\n      (lambda (k)\n        (begin\n          (set! *meta-continuation*\n            (lambda (v)\n              (set! *meta-continuation* mc)\n              (k v)))\n          (*abort thunk))))))\n\n(define (*shift f)\n  (call-with-current-continuation\n    (lambda (k)\n      (*abort (lambda ()\n                (f (lambda (v)\n                     (reset (k v)))))))))\n```\n\n\u3053\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u898b\u3066\u3057\u307e\u3046\u3068\u300c\u9650\u5b9a\u7d99\u7d9a\u3092\u5b9f\u88c5\u3059\u308b\u306b\u306f\u3084\u3063\u3071\u308a\u5b9f\u88c5\u30ec\u30d9\u30eb\u304b\u3089\u7d44\u307f\u7acb\u3066\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3093\u3060\u306a\u3041\u300d\u3068\u601d\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u306f\u305f\u3057\u3066\u672c\u5f53\u306b\u305d\u3046\u3067\u3057\u3087\u3046\u304b\u3002\u672c\u5f53\u306bcall/cc\u306f\u5fc5\u8981\u306a\u3093\u3067\u3057\u3087\u3046\u304b\u3002\n# \u521d\u6b69:begin\u6587\u304b\u3089\u306e\u8131\u51fa\nscheme\u306e\u6587\u306f\u6240\u8a6e\u03bb\u5f0f\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u3059\u30021\u30b9\u30c6\u30c3\u30d7\u3054\u3068\u306b\u5b9f\u884c\u3092\u884c\u3046begin\u6587\u306b\u3064\u3044\u3066\u3082\u540c\u69d8\u3067\u3001\u305f\u3068\u3048\u3070\u6b21\u306e\u3088\u3046\u306b\u30de\u30af\u30ed\u3068\u3057\u3066\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```scm:begin-macro.scm\n(define-syntax BEGIN\n  (syntax-rules ()\n                ((BEGIN exp) exp)\n                ((BEGIN exp1 exp2 ...)\n                 ((lambda (e) (BEGIN exp2 ...)) exp1))\n                ))  \n\n```\n\n\u3053\u3053\u3067\u6ce8\u76ee\u3057\u3066\u3082\u3089\u3044\u305f\u3044\u306e\u306f\u3001`(lambda (e) (BEGIN exp2 ...))` \u3068\u3044\u3046\u90e8\u5206\u306f\u3061\u3087\u3046\u3069 `exp1` \u306e\u8a08\u7b97\u306e\u7d99\u7d9a\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u3064\u307e\u308a `exp1` \u306e\u90e8\u5206\u304c\u305f\u3068\u3048\u3070 `(shift (lambda (cont) body))` \u3068\u7d99\u7d9a\u547c\u3073\u51fa\u3057\u306b\u306a\u3063\u3066\u3044\u308c\u3070\u3001\u5f15\u6570 `cont` \u306e\u90e8\u5206\u306b\u4ee3\u5165\u3055\u308c\u308b\u7d99\u7d9a\u306f\u3000`(lambda (e) (BEGIN exp2 ...))`\u3000\u3067\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\u3067\u306f\u3053\u3046\u3044\u3046\u7740\u60f3\u3092\u3082\u3063\u3066begin\u6587\u8131\u51fa\u7d99\u7d9a\uff08reset/shift\uff09\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```scm:begin-reset-shift.scm\n(define-syntax reset-cps\n  (syntax-rules (shift begin)\n    ;;;begin part\n    ((_ cont (begin exp1))\n     (cont exp1))\n    ((_ cont (begin (shift proc)))\n     (proc cont))\n    ((_ cont (begin (shift proc) exp2 ...))\n     (let ((programpoint (lambda (res) (reset-cps cont (begin exp2 ...)))))\n       (proc programpoint)))\n    ((_ cont (begin exp1 exp2 ...))\n     (let ((programpoint (lambda (res) (reset-cps cont (begin exp2 ...)))))\n       (reset-cps programpoint (begin exp1))))\n    ))\n(define-syntax reset\n  (syntax-rules ()\n    ((_ exp)\n     (reset-cps id exp))\n    ))\n(define (id x) x)\n```\n\u898b\u3066\u3082\u3089\u3048\u3070\u308f\u304b\u308b\u3088\u3046\u306b `reset` \u30de\u30af\u30ed\u81ea\u4f53\u306f\u521d\u671f\u5024\uff08\u4f55\u3082\u3057\u306a\u3044\u7d99\u7d9a id\uff09\u3092\u4e0e\u3048\u308b\u305f\u3081\u306e\u30e9\u30c3\u30d1\u30fc\u3067\u3059\u3002\u672c\u4f53\u306f `reset-cps` \u3067\u3059\u3002\u6700\u521d\u306e\u5f15\u6570 `cont` \u304c\u73fe\u5728\u306e\u7d99\u7d9a\u3092\u660e\u793a\u5316\u3057\u3066\u3044\u308b\u3082\u306e\u3067\u3059\u3002\n\u306a\u304a\u3001\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u5358\u7d14\u306b `(begin exp1 exp2 ...)` \u3068\u3044\u3046\u8868\u73fe\u304c\u51fa\u3066\u304d\u305f\u3068\u304d\u306f `exp2 ...` \u4ee5\u964d\u306e\u8a55\u4fa1\u3092\u7d99\u7d9a\u3068\u3057\u3066\u73fe\u5728\u306e\u7d99\u7d9a `cont` \u306b\u30b9\u30bf\u30c3\u30af\u3055\u305b\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002`shift` \u304c\u51fa\u3066\u304d\u305f\u3068\u304d\u306f `shift` \u306e\u624b\u7d9a\u304d\u306b\u73fe\u5728\u306e\u7d99\u7d9a\u3092\u6e21\u3057\u3066\u8a55\u4fa1\u3092\u3055\u305b\u308b\u3068\u3044\u3046\u3082\u306e\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u5b9f\u884c\u7d50\u679c\u306f\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\n```scm:evaluated.scm\n> (reset\n   (begin\n     (display \"1\\n\")\n     (display \"2\\n\")\n     (shift (lambda (cont) (cont 0) (display \"3 shifted\\n\")))\n     (display \"4\\n\")\n     (shift (lambda (cont) (display \"5 exit\\n\")))\n     (display \"6\\n\")\n     (display \"END\\n\")\n     ))\n1\n2\n4\n5 exit\n3 shifted\n```\n\n\u898b\u4e8b\u306b\u9650\u5b9a\u7d99\u7d9a\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u306d\u3002\u3053\u306e\u8abf\u5b50\u3067\u4ed6\u306e\u8868\u73fe\u306b\u3064\u3044\u3066\u3082\u9650\u5b9a\u7d99\u7d9a\u3092\u5b9f\u88c5\u3067\u304d\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\n# \u624b\u7d9a\u304d\u304b\u3089\u306e\u8131\u51fa\n\u5358\u7d14\u306a\u30a2\u30ea\u30c6\u30a3\uff11\u306e\u624b\u7d9a\u304d `(proc value)` \u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002`value` \u3092\u8a55\u4fa1\u3059\u308b\u3068\u304d\u3001\u305d\u306e\u6642\u70b9\u306e\u76f4\u5f8c\u306e\u7d99\u7d9a\u306f `proc` \u3067\u3059\u3002`value` \u3092\u8a55\u4fa1\u3059\u308b\u307e\u3048\u306e\u6642\u70b9\u306e\u7d99\u7d9a\u3092 `cont` \u3068\u3059\u308b\u3068 `value` \u3092\u8a55\u4fa1\u3057\u305f\u3068\u304d\u306e\u7d99\u7d9a\u306f `proc` + `cont` \u3068\u3044\u3046\u3082\u306e\u306b\u306a\u308b\u306f\u305a\u3067\u3059\u3002\n\n```scm:proc-shift-reset.scm\n(define-syntax reset-cps\n  (syntax-rules (shift begin)\n    ((_ cont (shift proc))\n     (proc cont))\n    ((_ cont (p a)) \n     (reset-cps (connect cont p) a)) \n    ((_ cont a)\n     (cont a)) \n   ))  \n(define-syntax reset\n  (syntax-rules ()\n    ((_ exp)\n     (reset-cps id exp))\n    ))  \n\n(define (connect c-src stacked-proc)\n  (lambda (x) \n    (c-src (stacked-proc x))))\n\n(define (id x) x)\n```\n\n\u5b9f\u884c\u7d50\u679c\n\n```scm:proc-escape.scm\n(reset (succ (succ \n                (shift (lambda (c) (display \"continuation\\n\")             \n                         (c 9))))))\ncontinuation\n11\n\n```\n\n\u3068\u3044\u3046\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u305f\u3060\u3001\u4e00\u5909\u6570\u306b\u3057\u304b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u306e\u3067 `(+ 1 2)` \u3068\u3044\u3046\u8868\u73fe\u306a\u3069\u306b\u306f\u5bfe\u51e6\u3067\u304d\u307e\u305b\u3093\u3002\u5bfe\u51e6\u7642\u6cd5\u7684\u306b\u6b21\u306e\u3088\u3046\u306a\u5b9f\u88c5\u304c\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\n```scm:2-param-shift-reset.scm\n(define-syntax reset-cps\n  (syntax-rules (shift begin)\n    ((_ cont (shift proc))\n     (proc cont))\n    ((_ cont (p a)) \n     (reset-cps (connect cont p) a)) \n    ((_ cont (p (shift proc) b ))\n     (reset-cps (connect cont (lambda (first) (p first b))) (shift proc)))\n    ((_ cont (p a (shift proc)))\n     (reset-cps (connect cont (lambda (second) (p a second))) (shift proc)))\n    ((_ cont a)\n     (cont a)) \n   ))  \n```\n\n\u3053\u308c\u3067 `(+ 1 (shift (lambda (c) (c 0))))` \u3068\u3044\u3046\u3088\u3046\u306a\u8131\u51fa\u3082\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\u304c\u3001\u304b\u306a\u308aad hoc\u306a\u5b9f\u88c5\u306a\u306e\u3067\uff13\u5909\u6570\u3001\uff14\u5909\u6570\u3068\u5f15\u6570\u304c\u5897\u3048\u305f\u3068\u304d\u306b\u3069\u3046\u3057\u3088\u3046\u3082\u306a\u3044\u3067\u3059\u2190\u3053\u308c\u304c\u4e0d\u5b8c\u5168\u306a\u3068\u3053\u308d\u3002\n\n# \u307e\u3068\u3081\n* begin \u8131\u51fa\u3001\u624b\u7d9a\u304d\u8131\u51fa\u3092\u5b9f\u88c5\u3059\u308b\u3060\u3051\u3067\u304b\u306a\u308a\u9650\u5b9a\u7d99\u7d9a\u7684\u306a\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n* \u4ed6\u306e\u7d30\u304b\u3044\u8868\u73fe\u306b\u3064\u3044\u3066\u306f\u30de\u30af\u30ed\u3067\u5b9f\u88c5\u53ef\u80fd\u304b\u3069\u3046\u304b\u3082\u542b\u3081\u3066\u691c\u8a0e\u8ab2\u984c\n* \u306a\u304a\u3001\u3053\u306e\u65b9\u5f0f\u306e\u5834\u5408 http://okmij.org/ftp/continuations/against-callcc.html#memory-leak \u3053\u3053\u3067\u3044\u3046\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u3082\u767a\u751f\u3057\u306a\u3044\n\n\u307e\u3068\u3081\u305f\u30b3\u30fc\u30c9\n\n```scm:shift-reset.scm\n(define-syntax reset-cps\n  (syntax-rules (shift begin)\n    ;;;Begin begin part\n    ((_ cont (begin exp1))\n     (cont exp1))\n    ((_ cont (begin (shift proc)))\n     (proc cont))\n    ((_ cont (begin (shift proc) exp2 ...))\n     (let ((programpoint (lambda (res) (reset-cps cont (begin exp2 ...)))))\n       (proc programpoint)))\n    ((_ cont (begin exp1 exp2 ...))\n     (let ((programpoint (lambda (res) (reset-cps cont (begin exp2 ...)))))\n       (reset-cps programpoint (begin exp1))))\n   ;;;End begin part\n    ((_ cont (shift proc))\n     (proc cont))\n    ((_ cont (p a)) \n     (reset-cps (connect cont p) a)) \n    ((_ cont (p (shift proc) b ))\n     (reset-cps (connect cont (lambda (first) (p first b ...))) (shift proc)))\n    ((_ cont (p a (shift proc)))\n     (reset-cps (connect cont (lambda (second) (p a second))) (shift proc)))\n    ((_ cont (p a b)) \n     (let ((p-curried (curry* (p xa xb))))\n       (reset-cps cont ((p-curried a) b))))\n    ((_ cont a)\n     (cont a))\n   ))\n(define-syntax reset\n  (syntax-rules ()\n    ((_ exp)\n     (reset-cps id exp))\n    ))\n(define-syntax curry\n  (syntax-rules ()\n    ((_ (a) body)\n     (lambda (a) body))\n    ((_ (a b ...) body)\n     (lambda (a) (curry (b ...) body)))))\n\n(define-syntax curry*\n  (syntax-rules ()\n    ((_ (f args ...))\n     (curry (args ...) (f args ...)))))\n;;;;Leak test procedure from\n;;;;http://okmij.org/ftp/continuations/against-callcc.html#memory-leak  \n(define (leak-test1 identity-thunk)\n  (let loop ((id (lambda (x) x)))\n    (loop (id (identity-thunk)))))\n\n;;;;Some procedures;;;;;\n(define (stacking proc-cps)\n  (lambda (n)\n    (proc-cps n id)))\n\n(define (id x) x)\n\n(define (unitcont a)\n  (lambda (k) (k a)))\n\n(define (connect c-src stacked-proc)\n  (lambda (x)\n    (c-src (stacked-proc x))))\n(define (fact-cps n cont)\n  (if (= n 0)\n    cont\n    (fact-cps (- n 1) (lambda (x) (cont (* n x))))))\n(define (succ n) (+ 1 n))\n```\n\n\u203b\u4e00\u90e8\u30c6\u30b9\u30c8\u4e2d\u306e\u624b\u7d9a\u304d\u3082\u5165\u3063\u3066\u3044\u307e\u3059\u3002\n\n# \u53c2\u8003\u6587\u732e\nGuy Lewis Steele, Jr. and Gerald Jay Sussman(1976), Lambda: The Ultimate Imperative\nPeter J. Landin (1965), A Generalization of Jumps and Labels\nHayo Thielecke (1998), An Introduction to Landin's \"A Generalization of Jumps and Labels\"\nJohn C.Reynolds (1993), The Discoveries of Continuations\nKenichi Asai, shift/reset \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u5165\u9580, ACM SIGPLAN Continuation Workshop 2011 \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30bb\u30c3\u30b7\u30e7\u30f3\u8cc7\u6599\n", "tags": ["Scheme"]}