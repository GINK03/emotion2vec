{"tags": ["\u3069\u3046\u66f8\u304f", "C", "yhpg"], "context": " More than 1 year has passed since last update.\u30a4\u30d9\u30f3\u30c8\u306f http://atnd.org/events/34368 ( \u7d42\u4e86\u3057\u3066\u307e\u3059 )\n\u554f\u984c\u306f http://nabetani.sakura.ne.jp/hena/ord6kinship/\n\u3067\u3002\nC\u8a00\u8a9e \u306b\u3088\u308b\u5b9f\u88c5\u3002\n\u5f53\u65e5\u305d\u306e\u5834\u3067\u66f8\u3044\u305f\u3002\n\u914d\u5217\u306e\u5f15\u304d\u7b97\u304c\u306a\u3051\u308c\u3070\u7d20\u76f4\u306b if \u6587\u3092\u305f\u304f\u3055\u3093\u66f8\u304f\u306e\u304c\u666e\u901a\u304b\u306a\u3068\u3044\u3046\u3053\u3068\u3067\u3002\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n\nint parent( int s )\n{\n    return (s+1)/3;\n}\n\nchar const * solve( char const * input )\n{\n    int from = atoi( input );\n    int to = atoi( strchr( input, '>')+1 );\n    if ( from == to ){\n        return \"me\";\n    } else if ( parent( from ) == to ){\n        return \"mo\";\n    } else if ( from == parent(to) ){\n        return \"da\";\n    } else if ( parent( parent( from ) )== parent(to) ){\n        return \"au\";\n    } else if ( parent(from) == parent(to) ){\n        return \"si\";\n    } else if ( parent(from) == parent(parent(to)) ){\n        return \"ni\";\n    } else if ( parent(parent(from)) == parent(parent(to)) ){\n        return \"co\";\n    }\n    return \"-\";\n}\n\nvoid test( char const * input, char const * expected )\n{\n    char const * actual = solve( input );\n    if ( 0 != strcmp( actual, expected ) ){\n        printf( \"%s / %s / %s\\n\", input, expected, actual );\n    }\n}\n\nint main()\n{\n/*#0*/ test( \"5->2\", \"mo\" );\n/*#1*/ test( \"28->10\", \"au\" );\n/*#2*/ test( \"1->1\", \"me\" );\nreturn 0;\n}\n\nruby \u306e\u3068\u304d( http://qiita.com/items/9e305b6c7fce0204c1cf )\u306f mother \u3060\u3063\u305f\u3051\u3069\u3053\u3053\u3067\u306f\u306a\u3093\u3067 parent \u306a\u306e\u304b\u3001\u81ea\u5206\u3067\u3082\u4e0d\u601d\u8b70\u3002\n\u30a4\u30d9\u30f3\u30c8\u306f http://atnd.org/events/34368 ( \u7d42\u4e86\u3057\u3066\u307e\u3059 )\n\u554f\u984c\u306f http://nabetani.sakura.ne.jp/hena/ord6kinship/\n\u3067\u3002\nC\u8a00\u8a9e \u306b\u3088\u308b\u5b9f\u88c5\u3002\n\n\u5f53\u65e5\u305d\u306e\u5834\u3067\u66f8\u3044\u305f\u3002\n\u914d\u5217\u306e\u5f15\u304d\u7b97\u304c\u306a\u3051\u308c\u3070\u7d20\u76f4\u306b if \u6587\u3092\u305f\u304f\u3055\u3093\u66f8\u304f\u306e\u304c\u666e\u901a\u304b\u306a\u3068\u3044\u3046\u3053\u3068\u3067\u3002\n\n```c\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n\nint parent( int s )\n{\n    return (s+1)/3;\n}\n\nchar const * solve( char const * input )\n{\n    int from = atoi( input );\n    int to = atoi( strchr( input, '>')+1 );\n    if ( from == to ){\n        return \"me\";\n    } else if ( parent( from ) == to ){\n        return \"mo\";\n    } else if ( from == parent(to) ){\n        return \"da\";\n    } else if ( parent( parent( from ) )== parent(to) ){\n        return \"au\";\n    } else if ( parent(from) == parent(to) ){\n        return \"si\";\n    } else if ( parent(from) == parent(parent(to)) ){\n        return \"ni\";\n    } else if ( parent(parent(from)) == parent(parent(to)) ){\n        return \"co\";\n    }\n    return \"-\";\n}\n\nvoid test( char const * input, char const * expected )\n{\n    char const * actual = solve( input );\n    if ( 0 != strcmp( actual, expected ) ){\n        printf( \"%s / %s / %s\\n\", input, expected, actual );\n    }\n}\n\nint main()\n{\n/*#0*/ test( \"5->2\", \"mo\" );\n/*#1*/ test( \"28->10\", \"au\" );\n/*#2*/ test( \"1->1\", \"me\" );\nreturn 0;\n}\n```\n\nruby \u306e\u3068\u304d( http://qiita.com/items/9e305b6c7fce0204c1cf )\u306f mother \u3060\u3063\u305f\u3051\u3069\u3053\u3053\u3067\u306f\u306a\u3093\u3067 parent \u306a\u306e\u304b\u3001\u81ea\u5206\u3067\u3082\u4e0d\u601d\u8b70\u3002"}