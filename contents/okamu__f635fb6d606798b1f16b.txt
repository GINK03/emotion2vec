{"context": "\n\n\u3010Android\u3011Router\u30af\u30e9\u30b9\u3092\u5c0e\u5165\u3057\u3066\u3001\u901a\u4fe1\u30af\u30e9\u30b9\u3092\u307e\u3068\u3081\u308b\uff08iOS\u98a8\uff09\n\n\n\u524d\u63d0\u6761\u4ef6\n\nAndroidStudio\nKotlin\nOKHTTP3\n\n\n\u306f\u3058\u3081\u306b\n\n\u79c1\u306f\u4e3b\u306bios\u30a2\u30d7\u30ea\u306e\u65b9\u3092\u4e2d\u5fc3\u306b\u88fd\u4f5c\u3057\u3066\u3044\u307e\u3059\u304c\u3001API\u901a\u4fe1\u306b\u306fAlamofire\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u3057\u3070\u3057\u3070\u4f7f\u3044\u307e\u3059\u3002\n\u305d\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u306fswift\u306e\u65e8\u5473\u3092\u751f\u304b\u3057\u305f\u3001Router\u30af\u30e9\u30b9\u3068\u3044\u3046\u3082\u306e\u304cenum\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u304a\u308a\u3001kotlin\u3067\u3082enum\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u751f\u304b\u3057\u3066\u540c\u3058\u3088\u3046\u306benum\u3067\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\nKotlin\u3068Swift\u3067\u540c\u3058\u3088\u3046\u306a\u30b3\u30fc\u30c9\u304c\u66f8\u3051\u308c\u3070\u3001\u30a2\u30d7\u30ea\u306e\u4fdd\u5b88\u6027\u3082\u4e0a\u304c\u308b\u3068\u601d\u3044\u88fd\u4f5c\u3057\u307e\u3057\u305f\u3002\n\u3067\u3059\u306e\u3067\u3001iOS\u306eAlamofire\u3092\u89e6\u3063\u305f\u3053\u3068\u304c\u3042\u308b\u4eba\u306b\u306f\u99b4\u67d3\u3081\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u6839\u3063\u304b\u3089\u306e\u3001\u30a2\u30f3\u30c9\u30ed\u30a4\u30c0\u30fc\u306e\u65b9\u306f\u3082\u3057\u304b\u3059\u308b\u3068\u30ad\u30e2\u30a4\u304b\u3082\u3057\u308c\u3093\u3067\u3059\u3002\n\u4eca\u306fiOS\u3067\u3082\u3001\u4eca\u5f8cAndroid\u3092\u4f5c\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u4eba\u306f\u5f79\u306b\u7acb\u3064\u304b\u3082\uff01\uff1f\n\n\n\u3088\u3046\u3059\u308b\u306b\n\nKotlin\u306e\u65e8\u5473\u3092\u751f\u304b\u3057\u3066\u3001\u901a\u4fe1\u30af\u30e9\u30b9\u3092\u5b9f\u88c5\u3057\u3088\u3046\uff01\uff01\n\n\n\u6a5f\u80fd\u5b9a\u7fa9\n\nKotlin\u3067\u8a18\u8ff0\nhttps\u901a\u4fe1\u304c\u3067\u304d\u308b\nOKHttp3\u3092\u4f7f\u7528\u3059\u308b\napi\u306e\u30d0\u30fc\u30b8\u30e7\u30cb\u30f3\u30b0\u304c\u3067\u304d\u308b\nurl\u306epath\u3092\u8ffd\u52a0\u3067\u304d\u308b\nget post delete put \u7b49\u306ehttp\u30e1\u30bd\u30c3\u30c9\u304c\u53e9\u3051\u308b\n\u305d\u308c\u305e\u308c\u3001parameter\u3092map\u3067\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u308b\n\u901a\u4fe1\u306f\u975e\u540c\u671f\u3067\u304a\u3053\u306a\u3046\n\n\n\u30b5\u30f3\u30d7\u30eb\n\nRouter.kt (API\u306e\u7a2e\u985e\u3092\u5217\u6319\u3057\u307e\u3059)\nAPIService.kt (\u5b9f\u969b\u306e\u51e6\u7406\u3092\u8a18\u8ff0)\nTLSSocketFactory.kt (SSL\u3067\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059)\n\n\nRouter.kt\n\n\u53e9\u304fAPI\u306b\u5fdc\u3058\u3066\u3001post\u3084delete\u30e1\u30bd\u30c3\u30c9\u304b\u3092\u660e\u793a\u3067\u304d\u305f\u308a\u3001path\u3092\u5217\u6319\u3057\u3066\u3044\u307e\u3059\naddPathSegment\u3067\u30c1\u30a7\u30fc\u30f3\u3059\u308c\u3070\u9577\u3044path\u3082\u4f5c\u308c\u307e\u3059\n\u4f8b) DeleteGroup\u3060\u3068 (DELETE)\u3000https://xxx.xxxx.jp/api/v2/groups/delete (key=value,key2=value,...) \u3068\u3044\u3046Request\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\n\nRouter.kt\nimport okhttp3.*\n\nenum class Router() {\n    GetVoice,\n    CreateUser,\n    UpdateUser,\n    CreateGroup,\n    GroupCheck,\n    DeleteGroup,\n    JoinGroup,\n    LeftGroup,\n    FinishJoin,\n    SelectUser,\n    GetStatus,\n    CallStandby,\n    Complete;\n\n    fun params(map: Map<String,String>?): Request {\n        return when (this) {\n            //http\u30e1\u30bd\u30c3\u30c9\n            GetVoice ->     get(map)\n            CreateUser ->   post(map)\n            UpdateUser ->   put(map)\n            CreateGroup ->  post(map)\n            GroupCheck ->   get(map)\n            DeleteGroup ->  delete(map)\n            JoinGroup ->    post(map)\n            LeftGroup ->    put(map)\n            FinishJoin ->   put(map)\n            SelectUser ->   put(map)\n            GetStatus ->    get(map)\n            CallStandby ->  get(map)\n            Complete ->     get(map)\n        }\n    }\n\n    // xx.xx.jp/api/v2/oooo <-path\u3092\u8ffd\u52a0\u3067\u304d\u307e\u3059\n    private fun route(): HttpUrl.Builder {\n        return HttpUrl.Builder().scheme(\"https\").host(\"xxx.xxxx.jp\").addPathSegment(\"api\").addPathSegment(\"v2\").addPathSegment(\n                when (this) {\n                    GetVoice -> \"voice\"\n                    CreateUser, UpdateUser -> \"users\"\n                    CreateGroup, GroupCheck, DeleteGroup, JoinGroup, LeftGroup, FinishJoin, SelectUser, GetStatus -> \"groups\"\n                    CallStandby, Complete, TestPush -> \"dials\"\n                }\n        ).addPathSegment(\n    // xx.xx.jp/api/v2/oooo/OOOO <-path\u3092\u8ffd\u52a0\u3067\u304d\u307e\u3059\n                when (this) {\n                    GroupCheck -> \"check_start\"\n                    DeleteGroup -> \"delete\"\n                    JoinGroup -> \"join\"\n                    LeftGroup -> \"left\"\n                    FinishJoin -> \"start\"\n                    SelectUser -> \"select\"\n                    GetStatus -> \"status\"\n                    CallStandby -> \"matching\"\n                    Complete -> \"complete\"\n                    else -> \"\"\n                }\n        )\n    }\n    private fun createUrl(route: HttpUrl.Builder, query: Map<String,String>?): Request.Builder {\n        if (query == null) { return Request.Builder().url(route.build()) }\n        with(route) {\n            for ((key, value) in query) {\n                this.addQueryParameter(key,value)\n            }\n        }\n        return Request.Builder().url(route.build())\n    }\n\n    private fun createUrl(route: HttpUrl.Builder): Request.Builder {\n        return Request.Builder().url(route.build())\n    }\n\n    private fun post(map: Map<String,String>?) :Request {\n        return createUrl(route()).post(buildBody(map)).build()\n    }\n\n    private fun get(query: Map<String,String>?): Request {\n        return createUrl(route(),query).get().build()\n    }\n\n    private fun delete(map: Map<String,String>?) :Request {\n        return createUrl(route()).delete(buildBody(map)).build()\n    }\n\n    private fun put(map: Map<String,String>?): Request {\n        return createUrl(route()).put(buildBody(map)).build()\n    }\n\n    private fun buildBody(map: Map<String,String>?): RequestBody {\n        val body = with(MultipartBody.Builder()) {\n            map?.let {\n                for ((key, value) in map) {\n                    addFormDataPart(key, value)\n                }\n            }\n            build()\n        }\n        return body\n    }\n}\n\n\n\nAPIservice.kt\n\nAPI\u901a\u4fe1\u306e\u5b9f\u969b\u306e\u51e6\u7406\u306f\u3053\u3053\u306b\u307e\u3068\u3081\u307e\u3059\n\n\nAPIService.kt\nclass APIService{\n    companion object {\n        //https\u901a\u4fe1\u3067\u5fc5\u8981\n        val socketFactory: SSLSocketFactory?\n            get() = TLSSocketFactory()\n\n        fun createUser(token: String, name: String, sex: Sex, handler: (String) -> Unit) {\n            val map = mapOf(\"device_token\" to token,\n                    \"name\" to name,\n                    \"sex\" to sex.rawval().toString(),\n                    \"device\" to \"android\")\n\n            this.enqueueAccess(Router.CreateUser.params(map), { result ->\n                val user_id = result.getString(\"user_id\")\n                handler(user_id)\n            }, { code, message ->\n             //error\u51e6\u7406\n            })\n        }\n\n        fun createGroup(name: String, handler: (String) -> Unit) {\n            val map = mapOf(\"host_user_id\" to user.userId.toString(),\n                    \"name\" to name)\n            this.enqueueAccess(Router.CreateGroup.params(map), { res ->\n                val groupId = res.getString(\"group_id\")\n                handler(groupId)\n            }, { code, message ->\n             //error\u51e6\u7406\n            })\n        }\n\n        fun deleteGroup(success: () -> Unit) {\n            val map = mapOf(\"host_id\" to user.userId,\n                    \"group_id\" to group.groupId)\n            this.enqueueAccess(Router.DeleteGroup.params(map), { res ->\n                success()\n            }, { code, message ->\n          \u3000 //error\u51e6\u7406\n\n            })\n        }\n\n        private fun enqueueAccess(request: Request, successHandler: (JSONObject) -> (Unit), errorHandler: (Int, String?) -> (Unit)) {\n            object : AsyncTask<Void, Void, String>() {\n                protected override fun doInBackground(vararg params: Void): String? {\n                    var result: String? = null\n                    val client = object : OkHttpClient() {\n                        override fun sslSocketFactory(): SSLSocketFactory? {\n                            return socketFactory\n                        }\n                    }\n                    try {\n                        val response = client.newCall(request).execute()\n                        val code = response.code()\n                        if (code < 200 || code >= 300) {\n                            return null\n                        }\n                        result = response.body().string()\n                    } catch (e: IOException) {\n                        e.printStackTrace()\n                    }\n                    return result\n                }\n\n                protected override fun onPostExecute(result: String?) {\n                    if (result == null) { errorHandler(999,\"error!!\"); return }\n                    val json = JSONObject(result)\n                    val code = json.getInt(\"code\")\n                    if (code >= 200 && code < 300) {\n                        successHandler(json)\n                    } else {\n                        errorHandler(code,\"error message\")\n                    }\n                }\n            }.execute()\n        }\n    }\n}\n\n\n\nTLSSocketFactory.kt\n\nhttps\u901a\u4fe1\u3067\u5fc5\u8981\uff08http\u3067\u3044\u3044\u4eba\u306f\u3044\u3089\u306a\u3044\uff09\n\n\nTLSSocketFactory.kt\nclass TLSSocketFactory @Throws(KeyManagementException::class, NoSuchAlgorithmException::class)\nconstructor() : SSLSocketFactory() {\n\n    private val internalSSLSocketFactory: SSLSocketFactory\n\n    init {\n        val context = SSLContext.getInstance(\"TLS\")\n        context.init(null, null, null)\n        internalSSLSocketFactory = context.socketFactory\n    }\n\n    override fun getDefaultCipherSuites(): Array<String> {\n        return internalSSLSocketFactory.defaultCipherSuites\n    }\n\n    override fun getSupportedCipherSuites(): Array<String> {\n        return internalSSLSocketFactory.supportedCipherSuites\n    }\n\n    @Throws(IOException::class)\n    override fun createSocket(s: Socket, host: String, port: Int, autoClose: Boolean): Socket {\n        return enableTLSOnSocket(internalSSLSocketFactory.createSocket(s, host, port, autoClose))\n    }\n\n    @Throws(IOException::class, UnknownHostException::class)\n    override fun createSocket(host: String, port: Int): Socket {\n        return enableTLSOnSocket(internalSSLSocketFactory.createSocket(host, port))\n    }\n\n    @Throws(IOException::class, UnknownHostException::class)\n    override fun createSocket(host: String, port: Int, localHost: InetAddress, localPort: Int): Socket {\n        return enableTLSOnSocket(internalSSLSocketFactory.createSocket(host, port, localHost, localPort))\n    }\n\n    @Throws(IOException::class)\n    override fun createSocket(host: InetAddress, port: Int): Socket {\n        return enableTLSOnSocket(internalSSLSocketFactory.createSocket(host, port))\n    }\n\n    @Throws(IOException::class)\n    override fun createSocket(address: InetAddress, port: Int, localAddress: InetAddress, localPort: Int): Socket {\n        return enableTLSOnSocket(internalSSLSocketFactory.createSocket(address, port, localAddress, localPort))\n    }\n\n    private fun enableTLSOnSocket(socket: Socket?): Socket {\n        if (socket != null && socket is SSLSocket) {\n            socket.enabledProtocols = arrayOf(\"TLSv1.1\", \"TLSv1.2\")\n        }\n        return socket!!\n    }\n}\n\n\n\n\n\u4f7f\u3044\u65b9\n\nUserModel.kt\n\nModel\u30af\u30e9\u30b9\u306a\u3069\u304b\u3089API\u3092\u547c\u3073\u51fa\u3059\u3060\u3051\u3067\u3088\u304f\u306a\u308a\u307e\u3059\u3002\n\n\nUserModel.kt\nclass UserModel {\n    companion object {\n        fun createUer(name:String,sex: Sex) {\n            val token = UserDefault.getPreferenceValue(PreferenceKey.KEY_DEVICE_TOKEN)\n            //API\u3092\u3088\u3073\u3060\u3059YO!\n            APIService.createUser(token.toString(), name, sex) { userId ->\n                val user = User(userId, name, sex)\n                UserViewModel.user.value = user\n            }\n        }\n    }\n}\n\n\n\n\u307e\u3068\u3081\n\nKotlin\u3068Swift\u3067\u540c\u3058\u3088\u3046\u306a\u30b3\u30fc\u30c9\u304c\u66f8\u3051\u308c\u3070\u3001\u30a2\u30d7\u30ea\u306e\u4fdd\u5b88\u6027\u3082\u4e0a\u304c\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\nAndroid\u306b\u95a2\u3057\u3066\u306f\u521d\u5fc3\u8005\u306a\u306e\u3067\u3001\u6307\u6458\u7b49\u3042\u308c\u3070\u304a\u3057\u3089\u305b\u304f\u3060\u3055\u3044\u3002\n\n\n\u53c2\u8003\nhttps://github.com/Alamofire/Alamofire\n# \u3010Android\u3011Router\u30af\u30e9\u30b9\u3092\u5c0e\u5165\u3057\u3066\u3001\u901a\u4fe1\u30af\u30e9\u30b9\u3092\u307e\u3068\u3081\u308b\uff08iOS\u98a8\uff09\n\n![kotlin_800x320.png](https://qiita-image-store.s3.amazonaws.com/0/62822/79c5423b-7866-5c82-aecf-84c14d1168b6.png)\n\n## \u524d\u63d0\u6761\u4ef6\n+ AndroidStudio\n+ Kotlin\n+ OKHTTP3\n\n## \u306f\u3058\u3081\u306b\n+ \u79c1\u306f\u4e3b\u306bios\u30a2\u30d7\u30ea\u306e\u65b9\u3092\u4e2d\u5fc3\u306b\u88fd\u4f5c\u3057\u3066\u3044\u307e\u3059\u304c\u3001API\u901a\u4fe1\u306b\u306f[**Alamofire**](https://github.com/Alamofire/Alamofire)\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u3057\u3070\u3057\u3070\u4f7f\u3044\u307e\u3059\u3002\n+ \u305d\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u306fswift\u306e\u65e8\u5473\u3092\u751f\u304b\u3057\u305f\u3001Router\u30af\u30e9\u30b9\u3068\u3044\u3046\u3082\u306e\u304cenum\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u304a\u308a\u3001kotlin\u3067\u3082enum\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u751f\u304b\u3057\u3066\u540c\u3058\u3088\u3046\u306benum\u3067\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\n+ Kotlin\u3068Swift\u3067\u540c\u3058\u3088\u3046\u306a\u30b3\u30fc\u30c9\u304c\u66f8\u3051\u308c\u3070\u3001\u30a2\u30d7\u30ea\u306e\u4fdd\u5b88\u6027\u3082\u4e0a\u304c\u308b\u3068\u601d\u3044\u88fd\u4f5c\u3057\u307e\u3057\u305f\u3002\n\n+ \u3067\u3059\u306e\u3067\u3001iOS\u306eAlamofire\u3092\u89e6\u3063\u305f\u3053\u3068\u304c\u3042\u308b\u4eba\u306b\u306f\u99b4\u67d3\u3081\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n+ \u6839\u3063\u304b\u3089\u306e\u3001\u30a2\u30f3\u30c9\u30ed\u30a4\u30c0\u30fc\u306e\u65b9\u306f\u3082\u3057\u304b\u3059\u308b\u3068\u30ad\u30e2\u30a4\u304b\u3082\u3057\u308c\u3093\u3067\u3059\u3002\n+ \u4eca\u306fiOS\u3067\u3082\u3001\u4eca\u5f8cAndroid\u3092\u4f5c\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u4eba\u306f\u5f79\u306b\u7acb\u3064\u304b\u3082\uff01\uff1f\n\n### \u3088\u3046\u3059\u308b\u306b\n+ **Kotlin\u306e\u65e8\u5473\u3092\u751f\u304b\u3057\u3066\u3001\u901a\u4fe1\u30af\u30e9\u30b9\u3092\u5b9f\u88c5\u3057\u3088\u3046\uff01\uff01**\n\n\n## \u6a5f\u80fd\u5b9a\u7fa9\n+ Kotlin\u3067\u8a18\u8ff0\n+ https\u901a\u4fe1\u304c\u3067\u304d\u308b\n+ OKHttp3\u3092\u4f7f\u7528\u3059\u308b\n+ api\u306e\u30d0\u30fc\u30b8\u30e7\u30cb\u30f3\u30b0\u304c\u3067\u304d\u308b\n+ url\u306epath\u3092\u8ffd\u52a0\u3067\u304d\u308b\n+ get post delete put \u7b49\u306ehttp\u30e1\u30bd\u30c3\u30c9\u304c\u53e9\u3051\u308b\n+ \u305d\u308c\u305e\u308c\u3001parameter\u3092map\u3067\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u308b\n+ \u901a\u4fe1\u306f\u975e\u540c\u671f\u3067\u304a\u3053\u306a\u3046\n\n \n## \u30b5\u30f3\u30d7\u30eb\n\n- **Router.kt (API\u306e\u7a2e\u985e\u3092\u5217\u6319\u3057\u307e\u3059)**\n- APIService.kt (\u5b9f\u969b\u306e\u51e6\u7406\u3092\u8a18\u8ff0)\n- TLSSocketFactory.kt (SSL\u3067\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059)\n\n### Router.kt\n+ \u53e9\u304fAPI\u306b\u5fdc\u3058\u3066\u3001post\u3084delete\u30e1\u30bd\u30c3\u30c9\u304b\u3092\u660e\u793a\u3067\u304d\u305f\u308a\u3001path\u3092\u5217\u6319\u3057\u3066\u3044\u307e\u3059\n+ addPathSegment\u3067\u30c1\u30a7\u30fc\u30f3\u3059\u308c\u3070\u9577\u3044path\u3082\u4f5c\u308c\u307e\u3059\n+ \u4f8b) DeleteGroup\u3060\u3068 (DELETE)\u3000https://xxx.xxxx.jp/api/v2/groups/delete (key=value,key2=value,...) \u3068\u3044\u3046Request\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\n``` Router.kt\nimport okhttp3.*\n\nenum class Router() {\n    GetVoice,\n    CreateUser,\n    UpdateUser,\n    CreateGroup,\n    GroupCheck,\n    DeleteGroup,\n    JoinGroup,\n    LeftGroup,\n    FinishJoin,\n    SelectUser,\n    GetStatus,\n    CallStandby,\n    Complete;\n\n    fun params(map: Map<String,String>?): Request {\n        return when (this) {\n            //http\u30e1\u30bd\u30c3\u30c9\n            GetVoice ->     get(map)\n            CreateUser ->   post(map)\n            UpdateUser ->   put(map)\n            CreateGroup ->  post(map)\n            GroupCheck ->   get(map)\n            DeleteGroup ->  delete(map)\n            JoinGroup ->    post(map)\n            LeftGroup ->    put(map)\n            FinishJoin ->   put(map)\n            SelectUser ->   put(map)\n            GetStatus ->    get(map)\n            CallStandby ->  get(map)\n            Complete ->     get(map)\n        }\n    }\n\n    // xx.xx.jp/api/v2/oooo <-path\u3092\u8ffd\u52a0\u3067\u304d\u307e\u3059\n    private fun route(): HttpUrl.Builder {\n        return HttpUrl.Builder().scheme(\"https\").host(\"xxx.xxxx.jp\").addPathSegment(\"api\").addPathSegment(\"v2\").addPathSegment(\n                when (this) {\n                    GetVoice -> \"voice\"\n                    CreateUser, UpdateUser -> \"users\"\n                    CreateGroup, GroupCheck, DeleteGroup, JoinGroup, LeftGroup, FinishJoin, SelectUser, GetStatus -> \"groups\"\n                    CallStandby, Complete, TestPush -> \"dials\"\n                }\n        ).addPathSegment(\n    // xx.xx.jp/api/v2/oooo/OOOO <-path\u3092\u8ffd\u52a0\u3067\u304d\u307e\u3059\n                when (this) {\n                    GroupCheck -> \"check_start\"\n                    DeleteGroup -> \"delete\"\n                    JoinGroup -> \"join\"\n                    LeftGroup -> \"left\"\n                    FinishJoin -> \"start\"\n                    SelectUser -> \"select\"\n                    GetStatus -> \"status\"\n                    CallStandby -> \"matching\"\n                    Complete -> \"complete\"\n                    else -> \"\"\n                }\n        )\n    }\n    private fun createUrl(route: HttpUrl.Builder, query: Map<String,String>?): Request.Builder {\n        if (query == null) { return Request.Builder().url(route.build()) }\n        with(route) {\n            for ((key, value) in query) {\n                this.addQueryParameter(key,value)\n            }\n        }\n        return Request.Builder().url(route.build())\n    }\n\n    private fun createUrl(route: HttpUrl.Builder): Request.Builder {\n        return Request.Builder().url(route.build())\n    }\n\n    private fun post(map: Map<String,String>?) :Request {\n        return createUrl(route()).post(buildBody(map)).build()\n    }\n\n    private fun get(query: Map<String,String>?): Request {\n        return createUrl(route(),query).get().build()\n    }\n\n    private fun delete(map: Map<String,String>?) :Request {\n        return createUrl(route()).delete(buildBody(map)).build()\n    }\n\n    private fun put(map: Map<String,String>?): Request {\n        return createUrl(route()).put(buildBody(map)).build()\n    }\n\n    private fun buildBody(map: Map<String,String>?): RequestBody {\n        val body = with(MultipartBody.Builder()) {\n            map?.let {\n                for ((key, value) in map) {\n                    addFormDataPart(key, value)\n                }\n            }\n            build()\n        }\n        return body\n    }\n}\n```\n\n### APIservice.kt\n+ API\u901a\u4fe1\u306e\u5b9f\u969b\u306e\u51e6\u7406\u306f\u3053\u3053\u306b\u307e\u3068\u3081\u307e\u3059\n\n\n``` APIService.kt\nclass APIService{\n    companion object {\n        //https\u901a\u4fe1\u3067\u5fc5\u8981\n        val socketFactory: SSLSocketFactory?\n            get() = TLSSocketFactory()\n\n        fun createUser(token: String, name: String, sex: Sex, handler: (String) -> Unit) {\n            val map = mapOf(\"device_token\" to token,\n                    \"name\" to name,\n                    \"sex\" to sex.rawval().toString(),\n                    \"device\" to \"android\")\n\n            this.enqueueAccess(Router.CreateUser.params(map), { result ->\n                val user_id = result.getString(\"user_id\")\n                handler(user_id)\n            }, { code, message ->\n             //error\u51e6\u7406\n            })\n        }\n\n        fun createGroup(name: String, handler: (String) -> Unit) {\n            val map = mapOf(\"host_user_id\" to user.userId.toString(),\n                    \"name\" to name)\n            this.enqueueAccess(Router.CreateGroup.params(map), { res ->\n                val groupId = res.getString(\"group_id\")\n                handler(groupId)\n            }, { code, message ->\n             //error\u51e6\u7406\n            })\n        }\n\n        fun deleteGroup(success: () -> Unit) {\n            val map = mapOf(\"host_id\" to user.userId,\n                    \"group_id\" to group.groupId)\n            this.enqueueAccess(Router.DeleteGroup.params(map), { res ->\n                success()\n            }, { code, message ->\n          \u3000 //error\u51e6\u7406\n\n            })\n        }\n\n        private fun enqueueAccess(request: Request, successHandler: (JSONObject) -> (Unit), errorHandler: (Int, String?) -> (Unit)) {\n            object : AsyncTask<Void, Void, String>() {\n                protected override fun doInBackground(vararg params: Void): String? {\n                    var result: String? = null\n                    val client = object : OkHttpClient() {\n                        override fun sslSocketFactory(): SSLSocketFactory? {\n                            return socketFactory\n                        }\n                    }\n                    try {\n                        val response = client.newCall(request).execute()\n                        val code = response.code()\n                        if (code < 200 || code >= 300) {\n                            return null\n                        }\n                        result = response.body().string()\n                    } catch (e: IOException) {\n                        e.printStackTrace()\n                    }\n                    return result\n                }\n\n                protected override fun onPostExecute(result: String?) {\n                    if (result == null) { errorHandler(999,\"error!!\"); return }\n                    val json = JSONObject(result)\n                    val code = json.getInt(\"code\")\n                    if (code >= 200 && code < 300) {\n                        successHandler(json)\n                    } else {\n                        errorHandler(code,\"error message\")\n                    }\n                }\n            }.execute()\n        }\n    }\n}\n```\n\n### TLSSocketFactory.kt\n+ https\u901a\u4fe1\u3067\u5fc5\u8981\uff08http\u3067\u3044\u3044\u4eba\u306f\u3044\u3089\u306a\u3044\uff09\n\n``` TLSSocketFactory.kt\nclass TLSSocketFactory @Throws(KeyManagementException::class, NoSuchAlgorithmException::class)\nconstructor() : SSLSocketFactory() {\n\n    private val internalSSLSocketFactory: SSLSocketFactory\n\n    init {\n        val context = SSLContext.getInstance(\"TLS\")\n        context.init(null, null, null)\n        internalSSLSocketFactory = context.socketFactory\n    }\n\n    override fun getDefaultCipherSuites(): Array<String> {\n        return internalSSLSocketFactory.defaultCipherSuites\n    }\n\n    override fun getSupportedCipherSuites(): Array<String> {\n        return internalSSLSocketFactory.supportedCipherSuites\n    }\n\n    @Throws(IOException::class)\n    override fun createSocket(s: Socket, host: String, port: Int, autoClose: Boolean): Socket {\n        return enableTLSOnSocket(internalSSLSocketFactory.createSocket(s, host, port, autoClose))\n    }\n\n    @Throws(IOException::class, UnknownHostException::class)\n    override fun createSocket(host: String, port: Int): Socket {\n        return enableTLSOnSocket(internalSSLSocketFactory.createSocket(host, port))\n    }\n\n    @Throws(IOException::class, UnknownHostException::class)\n    override fun createSocket(host: String, port: Int, localHost: InetAddress, localPort: Int): Socket {\n        return enableTLSOnSocket(internalSSLSocketFactory.createSocket(host, port, localHost, localPort))\n    }\n\n    @Throws(IOException::class)\n    override fun createSocket(host: InetAddress, port: Int): Socket {\n        return enableTLSOnSocket(internalSSLSocketFactory.createSocket(host, port))\n    }\n\n    @Throws(IOException::class)\n    override fun createSocket(address: InetAddress, port: Int, localAddress: InetAddress, localPort: Int): Socket {\n        return enableTLSOnSocket(internalSSLSocketFactory.createSocket(address, port, localAddress, localPort))\n    }\n\n    private fun enableTLSOnSocket(socket: Socket?): Socket {\n        if (socket != null && socket is SSLSocket) {\n            socket.enabledProtocols = arrayOf(\"TLSv1.1\", \"TLSv1.2\")\n        }\n        return socket!!\n    }\n}\n\n```\n\n## \u4f7f\u3044\u65b9\n### UserModel.kt\n+ Model\u30af\u30e9\u30b9\u306a\u3069\u304b\u3089API\u3092\u547c\u3073\u51fa\u3059\u3060\u3051\u3067\u3088\u304f\u306a\u308a\u307e\u3059\u3002\n\n\n``` UserModel.kt\nclass UserModel {\n    companion object {\n        fun createUer(name:String,sex: Sex) {\n            val token = UserDefault.getPreferenceValue(PreferenceKey.KEY_DEVICE_TOKEN)\n            //API\u3092\u3088\u3073\u3060\u3059YO!\n            APIService.createUser(token.toString(), name, sex) { userId ->\n                val user = User(userId, name, sex)\n                UserViewModel.user.value = user\n            }\n        }\n    }\n}\n```\n\n## \u307e\u3068\u3081\n+ Kotlin\u3068Swift\u3067\u540c\u3058\u3088\u3046\u306a\u30b3\u30fc\u30c9\u304c\u66f8\u3051\u308c\u3070\u3001\u30a2\u30d7\u30ea\u306e\u4fdd\u5b88\u6027\u3082\u4e0a\u304c\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n+ Android\u306b\u95a2\u3057\u3066\u306f\u521d\u5fc3\u8005\u306a\u306e\u3067\u3001\u6307\u6458\u7b49\u3042\u308c\u3070\u304a\u3057\u3089\u305b\u304f\u3060\u3055\u3044\u3002\n\n## \u53c2\u8003\nhttps://github.com/Alamofire/Alamofire\n", "tags": ["Kotlin", "OkHttp", "Swift", "Android", "\u65b0\u4eba\u30d7\u30ed\u30b0\u30e9\u30de\u5fdc\u63f4"]}