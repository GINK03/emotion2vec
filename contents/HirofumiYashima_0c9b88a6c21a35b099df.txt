{"tags": ["Python", "\u53ef\u8996\u5316", "DataVisualization", "\u7d71\u8a08\u5b66", "statistics"], "context": "\n\n\uff11\uff0e\u6563\u5e03\u56f3\u884c\u5217 \u3067 \u5168\u300c\uff12\u5909\u91cf\u300d\u5909\u6570\u30da\u30a2\u9593 \u306e \u76f8\u95a2\u95a2\u4fc2 \u3092 \u53ef\u8996\u5316\n\n\n\uff11\u2212\uff11. pandas \u306e scatter_matrix \u3092\u4f7f\u3046\u5834\u5408\n\n\nPython3\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\na = np.array([[0,0,4,6,7,0,0],\n              [0,0,19,8,6,8,0],\n              [0,0,9,4,0,0,0]]).T\n\na_df = pd.DataFrame(a)\nprint(a_df)\n\n\n   0   1  2\n0  0   0  0\n1  0   0  0\n2  4  19  9\n3  6   8  4\n4  7   6  0\n5  0   8  0\n6  0   0  0\n\n\nPython3\nfrom pandas.tools.plotting import scatter_matrix\nplt.figure()\n\nscatter_matrix(a_df)\nplt.show()\n\n\n\n\n\uff11\u2212\uff12. Seaborn\u30e2\u30b8\u30e5\u30fc\u30eb \u3092 \u4f7f\u3046\u5834\u5408\n\n\nMyEnigma \uff082015/10/09\uff09\u300c\u7c21\u5358\u306b\u7f8e\u3057\u3044\u30b0\u30e9\u30d5\u63cf\u753b\u304c\u3067\u304d\u308bPython\u30e9\u30a4\u30d6\u30e9\u30eaSeaborn\u5165\u9580\u300d\n\n\n\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u76f8\u95a2\u5206\u6790\n\nseaborn\u306e\u7d20\u6674\u3089\u3057\u3044\u6a5f\u80fd\u306e\u4e00\u3064\u306b\u3001\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5404\u5909\u6570\u540c\u58eb\u306e\u76f8\u95a2\u5206\u6790\u3092\u7c21\u5358\u306b\u5b9f\u65bd\u3067\u304d\u308b\u95a2\u6570\u304c\u3042\u308a\u307e\u3059\u3002\n\u305d\u308c\u306fpairplot\u95a2\u6570\u3067\u3059\u3002\nimport seaborn as sns\n\niris = sns.load_dataset(\"iris\") #\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\nsns.pairplot(iris)\nsns.plt.show()\n\n\u3059\u308b\u3068\u3001\u4e0b\u8a18\u306e\u30b0\u30e9\u30d5\u306e\u3088\u3046\u306b\u7c21\u5358\u306b\u76f8\u95a2\u5206\u6790\u3092\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\n\n\u5148\u307b\u3069\u4f5c\u6210\u3057\u305f\u30c7\u30fc\u30bf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff08 a_df \uff09\u3092\u51fa\u529b\u3057\u3066\u307f\u308b\n\n\nimport seaborn as sns\n\nsns.pairplot(a_df)\nsns.plt.show()\n\n\n\n\nSeaborn \u3067\u306f\u3001\u6563\u5e03\u56f3\u306e\u8ef8\u306e\u8107\u306b\u3001\u5404\u30c7\u30fc\u30bf\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u6dfb\u3048\u308b\u3053\u3068\u3082\u3067\u304d\u308b\n\n\nMyEnigma \uff082015/10/09\uff09\u300c\u7c21\u5358\u306b\u7f8e\u3057\u3044\u30b0\u30e9\u30d5\u63cf\u753b\u304c\u3067\u304d\u308bPython\u30e9\u30a4\u30d6\u30e9\u30eaSeaborn\u5165\u9580\u300d\n\n\n\n\u4e8c\u6b21\u5143\u306e\u5206\u5e03\u30c7\u30fc\u30bf\u306e\u63cf\u753b\n\n\u7d9a\u3044\u3066\u3001\u4e8c\u6b21\u5143\u5206\u5e03\u30c7\u30fc\u30bf\u306e\u63cf\u753b\u306e\u8aac\u660e\u3092\u3057\u307e\u3059\u3002\n\n\u6563\u5e03\u56f3\u306e\u30d7\u30ed\u30c3\u30c8\n\njointplot\u95a2\u6570\u3092\u4f7f\u3046\u3068\u3001\n\u4e8c\u6b21\u5143\u306e\u5909\u6570\u306e\u6563\u5e03\u56f3\u3068\u3001\n\u5404\u6b21\u5143\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u8868\u793a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\uff12\u6b21\u5143\u30c7\u30fc\u30bf\u306e\u6563\u5e03\u56f3\u3068\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306f\u4ee5\u4e0b\u3002\nMyEnigma \uff082015/10/09\uff09\u300c\u7c21\u5358\u306b\u7f8e\u3057\u3044\u30b0\u30e9\u30d5\u63cf\u753b\u304c\u3067\u304d\u308bPython\u30e9\u30a4\u30d6\u30e9\u30eaSeaborn\u5165\u9580\u300d\n\n\uff08 \u4ee5\u4e0b\u3001\u4e0a\u8a18\u8a18\u4e8b\u304b\u3089\u30b3\u30fc\u30c9\u3092\u8ee2\u8f09 \uff09\n\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\n\nmean, cov = [0, 1], [(1, .5), (.5, 1)]\ndata = np.random.multivariate_normal(mean, cov, 200)\n\n>>> print(data[0:3])\n[[-0.63023416 -0.32206524]\n [-1.46338235  0.38968927]\n [ 1.3123004   2.49452611]]\n\ndf = pd.DataFrame(data, columns=[\"x\", \"y\"])\nsns.jointplot(x=\"x\", y=\"y\", data=df)\nsns.plt.show()\n\n\n\nkind=\"hex\" \u3068\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u6563\u5e03\u56f3\u5185\u306e\u5404\u70b9 \u306b\u3001\u4f55\u4ef6\u306e\u30c7\u30fc\u30bf \u304c \u8a72\u5f53\u3059\u308b\u304b\u306e \u4ef6\u6570\u60c5\u5831\uff08\u4ef6\u6570\u5206\u5e03\uff09 \u3092\u3001\u70b9\u306e\u8272\u306e\u6fc3\u5ea6 \u3067 \u53ef\u8996\u5316\u3067\u304d\u308b\n\nsns.jointplot(x=\"x\", y=\"y\", kind=\"hex\", data=df)\nsns.plt.show()\n\n\n\nkind=\"kde\" \u3068\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u6563\u5e03\u56f3\u5185\u306e\u5404\u70b9 \u306b\u3001\u4f55\u4ef6\u306e\u30c7\u30fc\u30bf \u304c \u8a72\u5f53\u3059\u308b\u304b\u306e \u4ef6\u6570\u60c5\u5831\uff08\u4ef6\u6570\u5206\u5e03\uff09 \u3092\u3001\u70b9\u306e\u8272\u306e\u6fc3\u5ea6 \u3067 \u53ef\u8996\u5316\u3067\u304d\u308b\n\nMyEnigma \uff082015/10/09\uff09\u300c\u7c21\u5358\u306b\u7f8e\u3057\u3044\u30b0\u30e9\u30d5\u63cf\u753b\u304c\u3067\u304d\u308bPython\u30e9\u30a4\u30d6\u30e9\u30eaSeaborn\u5165\u9580\u300d\n\nkind=\"kde\"\u3068\u3059\u308b\u3053\u3068\u3067\u30ab\u30fc\u30cd\u30eb\u5bc6\u5ea6\u6cd5\u306b\u3088\u308b\u78ba\u7387\u5bc6\u5ea6\u95a2\u6570\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002####\u6563\u5e03\u56f3 \uff08\u70b9\u306e\u8868\u793a\u8272\u306e\u6fc3\u3055 \u3067\u3001\u5404\u70b9\u3054\u3068\u306e\u30c7\u30fc\u30bf\u4ef6\u6570 \u306e\u60c5\u5831\u3092\u91cd\u306d\u3066\u8868\u793a\uff09\n\nsns.jointplot(x=\"x\", y=\"y\", kind=\"kde\", data=df)\nsns.plt.show()\n\n\n\n\u5148\u307b\u3069\u4f5c\u6210\u3057\u305f\u30c7\u30fc\u30bf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff08 a_df \uff09\u3092\u51fa\u529b\u3057\u3066\u307f\u308b\n\na_df.columns\n# Int64Index([0, 1, 2], dtype='int64')\n\na_df.columns = [\"A\", \"B\", \"C\"]\nprint(a_df)\n#    A   B  C\n# 0  0   0  0\n# 1  0   0  0\n# 2  4  19  9\n# 3  6   8  4\n# 4  7   6  0\n# 5  0   8  0\n# 6  0   0  0\n\nsns.jointplot(x=\"A\", y=\"B\", data=a_df)\nsns.plt.show()\n\n\n\nkind=\"hex\" \u3068\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u6563\u5e03\u56f3\u5185\u306e\u5404\u70b9 \u306b\u3001\u4f55\u4ef6\u306e\u30c7\u30fc\u30bf \u304c \u8a72\u5f53\u3059\u308b\u304b\u306e \u4ef6\u6570\u60c5\u5831\uff08\u4ef6\u6570\u5206\u5e03\uff09 \u3092\u3001\u70b9\u306e\u8272\u306e\u6fc3\u5ea6 \u3067 \u53ef\u8996\u5316\u3067\u304d\u308b\n\nsns.jointplot(x=\"A\", y=\"B\", kind=\"hex\", data=a_df)\nsns.plt.show()\n\n\n\nkind=\"kde\" \u3068\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u6563\u5e03\u56f3\u5185\u306e\u5404\u70b9 \u306b\u3001\u4f55\u4ef6\u306e\u30c7\u30fc\u30bf \u304c \u8a72\u5f53\u3059\u308b\u304b\u306e \u4ef6\u6570\u60c5\u5831\uff08\u4ef6\u6570\u5206\u5e03\uff09 \u3092\u3001 \u70b9\u306e\u8272\u3068\u3057\u3066 \u53ef\u8996\u5316\u3067\u304d\u308b\n\nsns.jointplot(x=\"A\", y=\"B\", kind=\"kde\", data=a_df)\nsns.plt.show()\n\n\n\n\n\uff12. \u5404\uff12\u5909\u91cf\u9593 \u306e \u76f8\u95a2\u4fc2\u6570\u306e\u5ea6\u5408\u3044 \u3092 \u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u30fb\u30b0\u30e9\u30d5\u3067\u8996\u899a\u7684\u306b\u78ba\u8a8d\n\n\npandas.DataFrame \u306e pivot_table\u30e1\u30bd\u30c3\u30c9 \u3067 \u5ea6\u6570\u5206\u5e03\u7b97\u51fa => Seaborn \u3067 \u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u51fa\u529b\n\n\nhik0107\u3055\u3093 Qiita\u8a18\u4e8b\uff082015/10/14\uff09\u300cPython \u3067\u30c7\u30fc\u30bf\u53ef\u8996\u5316 - \u30ab\u30c3\u30b3\u3044\u3044\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3092\u63cf\u3053\u3046\u300d\n\n\ndf_flights_pivot = pd.pivot_table(data=df_flights, values='passengers', \n                                  columns='year', index='month', aggfunc=np.mean)\n\n\uff08 \u4e2d\u7565 \uff09\n\u3042\u3068\u306f\u3001Pivot\u5f62\u5f0f\u306b\u3057\u305fdataframe\u3092seaborn\u306b\u4e0e\u3048\u308b\u3060\u3051\u3067\u3059\ndraw.py\nsns.heatmap(df_flights_pivot)                                \n\n\n\uff08 \u5b9f\u884c\u3057\u3066\u307f\u308b \uff09\n>>> df_flights = sns.load_dataset('flights')\n>>> df_flights.head(5)\n   year     month  passengers\n0  1949   January         112\n1  1949  February         118\n2  1949     March         132\n3  1949     April         129\n4  1949       May         121\n>>>\n>>> df_flights_pivot = pd.pivot_table(data=df_flights, values='passengers',\\\n...  columns='year', index='month', aggfunc=np.mean)\n>>>\n>>> print(df_flights_pivot)\nyear       1949  1950  1951  1952  1953  1954  1955  1956  1957  1958  1959  \\\nmonth\nJanuary     112   115   145   171   196   204   242   284   315   340   360\nFebruary    118   126   150   180   196   188   233   277   301   318   342\nMarch       132   141   178   193   236   235   267   317   356   362   406\nApril       129   135   163   181   235   227   269   313   348   348   396\nMay         121   125   172   183   229   234   270   318   355   363   420\nJune        135   149   178   218   243   264   315   374   422   435   472\nJuly        148   170   199   230   264   302   364   413   465   491   548\nAugust      148   170   199   242   272   293   347   405   467   505   559\nSeptember   136   158   184   209   237   259   312   355   404   404   463\nOctober     119   133   162   191   211   229   274   306   347   359   407\nNovember    104   114   146   172   180   203   237   271   305   310   362\nDecember    118   140   166   194   201   229   278   306   336   337   405\n\nyear       1960\nmonth\nJanuary     417\nFebruary    391\nMarch       419\nApril       461\nMay         472\nJune        535\nJuly        622\nAugust      606\nSeptember   508\nOctober     461\nNovember    390\nDecember    432\n>>>\n>>> sns.heatmap(df_flights_pivot)\n<matplotlib.axes._subplots.AxesSubplot object at 0x10f33dc50>\n>>>\n>>> sns.plt.show()\n>>>\n\n\n\n\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u56f3 \u306e \u5404\u30de\u30b9 \u306b \u8a72\u5f53\u30c7\u30fc\u30bf\u4ef6\u6570\uff08\u5ea6\u6570\uff09\u306e\u6570\u5b57 \u3092 \u57cb\u3081\u8fbc\u307f\u305f\u3044\u3068\u304d\n\n\n\n\u3082\u3046\u5c11\u3057\u304a\u5316\u7ca7\n\n\u4e0a\u8a18\u56f3\u306e\u307e\u307e\u3067\u3082\u3044\u3044\u306e\u3067\u3059\u304c\u3001\u3082\u3046\u5c11\u3057\u898b\u305b\u65b9\u3092\u5909\u3048\u308b\u305f\u3081\u306b\u304a\u5316\u7ca7\u3092\u65bd\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u4f8b\u3048\u3070\u3053\u3093\u306a\u611f\u3058\u3067\u3059\nplt.figure(figsize=(12, 9))\nsns.heatmap(df_flights_pivot, annot=True, fmt='g', cmap='Blues')\n\nannot\u306f\u6570\u5024\u3092\u30bb\u30eb\u306b\u66f8\u304d\u8fbc\u3080\u5f15\u6570\u3001fmt\u306f\u6570\u5024\u306e\u6841\u306e\u8abf\u6574\u3001cmap\u306fColour_map\u306e\u3053\u3068\u3067\u3001\u30b0\u30e9\u30c7\u30a3\u30a8\u30fc\u30b7\u30e7\u30f3\u306e\u8272\u306e\u30d1\u30ec\u30c3\u30c8\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u3053\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u5177\u4f53\u7684\u306a\u6570\u5024\u3092\u898b\u306a\u304c\u3089\u8b70\u8ad6\u3057\u305f\u3044\u3068\u304d\u306f\u3053\u3063\u3061\u306e\u307b\u3046\u304c\u3088\u3044\u3067\u3057\u3087\u3046\u3002\nsns.heatmap(a, annot=True)\nsns.plt.show()\n\n\n>>> sns.heatmap(df_flights_pivot, annot=True, fmt='g', cmap='Blues')\n<matplotlib.axes._subplots.AxesSubplot object at 0x10f0e49e8>\n>>> sns.plt.show()\n>>>\n\n\n\n\u307e\u305a\u6700\u521d\u306b\u3001\uff12\u5909\u6570\u9593\u306e\u76f8\u95a2\u4fc2\u6570\u3067\u306f\u306a\u304f\u3001\u624b\u5143\u3067\u4f5c\u6210\u3057\u305fNumpy.array\u306e\u30de\u30c8\u30ea\u30c3\u30af\u30b9\u30fb\u30c7\u30fc\u30bf \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff08 a \uff09 \u3092 \u51fa\u529b\u3057\u3066\u307f\u308b\n\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\na = np.array([[0,0,4,6,7,0,0],\n              [0,0,19,8,6,8,0],\n              [0,0,9,4,0,0,0]]).T\n\nprint(a)\n\narray([[ 0,  0,  0],\n       [ 0,  0,  0],\n       [ 4, 19,  9],\n       [ 6,  8,  4],\n       [ 7,  6,  0],\n       [ 0,  8,  0],\n       [ 0,  0,  0]])\n\nsns.heatmap(a, annot=True, fmt='g', cmap='Blues')\nsns.plt.show()\n\n\n\n\u3044\u308d\u3044\u308d\u306a\u8272\u3092\u6307\u5b9a\u3067\u304d\u308b\n\nsns.heatmap(a, annot=True, fmt='g', cmap='Oranges')\nsns.plt.show()\n\n\nsns.heatmap(a, annot=True, fmt='g', cmap='Reds')\nsns.plt.show()\n\n\nsns.heatmap(a, annot=True, fmt='g', cmap='Purples')\nsns.plt.show()\n\n\nsns.heatmap(a, annot=True, fmt='g', cmap='Greens')\nsns.plt.show()\n\n\n\n\u8272\u3092\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u7d2b\u306b\u306a\u308b\n\nsns.heatmap(a, annot=True, fmt='g')\nsns.plt.show()\n\n\nsns.heatmap(a, annot=True)\nsns.plt.show()\n\n\n\n\"Gray\" \u3092\u6307\u5b9a\u3059\u308b\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\uff08\u672a\u5b9a\u7fa9\u306e\u8272\u30e9\u30d9\u30eb\uff09\n\nsns.heatmap(a, annot=True, cmap='Gray')\n\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/Users/hirofumi.yashima/anaconda/lib/python3.5/site-packages/seaborn/matrix.py\", line 463, in heatmap\n    plotter.plot(ax, cbar_ax, kwargs)\n  File \"/Users/hirofumi.yashima/anaconda/lib/python3.5/site-packages/seaborn/matrix.py\", line 227, in plot\n    cmap=self.cmap, **kws)\n  File \"/Users/hirofumi.yashima/anaconda/lib/python3.5/site-packages/matplotlib/__init__.py\", line 1811, in inner\n    return func(ax, *args, **kwargs)\n  File \"/Users/hirofumi.yashima/anaconda/lib/python3.5/site-packages/matplotlib/axes/_axes.py\", line 5416, in pcolormesh\n    collection.set_cmap(cmap)\n  File \"/Users/hirofumi.yashima/anaconda/lib/python3.5/site-packages/matplotlib/cm.py\", line 306, in set_cmap\n    cmap = get_cmap(cmap)\n  File \"/Users/hirofumi.yashima/anaconda/lib/python3.5/site-packages/matplotlib/cm.py\", line 166, in get_cmap\n    % (name, ', '.join(sorted(cmap_d.keys()))))\nValueError: Colormap Gray is not recognized. Possible values are: Accent, Accent_r, Blues, Blues_r, BrBG, BrBG_r, BuGn, BuGn_r, BuPu, BuPu_r, CMRmap, CMRmap_r, Dark2, Dark2_r, GnBu, GnBu_r, Greens, Greens_r, Greys, Greys_r, OrRd, OrRd_r, Oranges, Oranges_r, PRGn, PRGn_r, Paired, Paired_r, Pastel1, Pastel1_r, Pastel2, Pastel2_r, PiYG, PiYG_r, PuBu, PuBuGn, PuBuGn_r, PuBu_r, PuOr, PuOr_r, PuRd, PuRd_r, Purples, Purples_r, RdBu, RdBu_r, RdGy, RdGy_r, RdPu, RdPu_r, RdYlBu, RdYlBu_r, RdYlGn, RdYlGn_r, Reds, Reds_r, Set1, Set1_r, Set2, Set2_r, Set3, Set3_r, Spectral, Spectral_r, Wistia, Wistia_r, YlGn, YlGnBu, YlGnBu_r, YlGn_r, YlOrBr, YlOrBr_r, YlOrRd, YlOrRd_r, afmhot, afmhot_r, autumn, autumn_r, binary, binary_r, bone, bone_r, brg, brg_r, bwr, bwr_r, cool, cool_r, coolwarm, coolwarm_r, copper, copper_r, cubehelix, cubehelix_r, flag, flag_r, gist_earth, gist_earth_r, gist_gray, gist_gray_r, gist_heat, gist_heat_r, gist_ncar, gist_ncar_r, gist_rainbow, gist_rainbow_r, gist_stern, gist_stern_r, gist_yarg, gist_yarg_r, gnuplot, gnuplot2, gnuplot2_r, gnuplot_r, gray, gray_r, hot, hot_r, hsv, hsv_r, inferno, inferno_r, jet, jet_r, magma, magma_r, nipy_spectral, nipy_spectral_r, ocean, ocean_r, pink, pink_r, plasma, plasma_r, prism, prism_r, rainbow, rainbow_r, seismic, seismic_r, spectral, spectral_r, spring, spring_r, summer, summer_r, terrain, terrain_r, viridis, viridis_r, winter, winter_r\n>>>\n\n\n\u6307\u5b9a\u3067\u304d\u308b\u8272\u30e9\u30d9\u30eb\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u3060\n\n\nAccent \nAccent_r\nBlues\nBlues_r\nBrBG\nBrBG_r\nBuGn\nBuGn_r\nBuPu\nBuPu_r\nCMRmap\nCMRmap_r\nDark2\nDark2_r\nGnBu\nGnBu_r\nGreens\nGreens_r\nGreys\nGreys_r\nOrRd\nOrRd_r\nOranges\nOranges_r\nPRGn\nPRGn_r\nPaired\nPaired_r\nPastel1\nPastel1_r\nPastel2\nPastel2_r\nPiYG\nPiYG_r\nPuBu\nPuBuGn\nPuBuGn_r\nPuBu_r\nPuOr\nPuOr_r\nPuRd\nPuRd_r\nPurples\nPurples_r\\\nRdBu\nRdBu_r\nRdGy\nRdGy_r\nRdPu\nRdPu_r\n\n...\n\uff08\u4ee5\u4e0b\u7565\uff09\n\n'Paired' \u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\n\nsns.heatmap(a, annot=True, cmap='Paired')\nplt.show()\n\n\n\n'gray' \u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\n\nsns.heatmap(a, annot=True, cmap='gray')\nplt.show()\n\n[uploading \u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 19.05.00.png...]()\n\n'gray_r' \u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\n\nsns.heatmap(a, annot=True, cmap='gray_r')\nplt.show()\n\n\n\n\u884c\u5217\u30c7\u30fc\u30bf\u306f\u3001imshow\u30e1\u30bd\u30c3\u3067\u3082\u5024\u306e\u5927\u5c0f\u3092\u8272\u8868\u73fe\u306b\u5909\u63db\u3057\u3066\u63cf\u753b\u3067\u304d\u308b\n\n\nPython3\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\na = np.array([[0,0,4,6,7,0,0],\n              [0,0,19,8,6,8,0],\n              [0,0,9,4,0,0,0]]).T\n\nprint(a)\n\n\narray([[ 0,  0,  0],\n       [ 0,  0,  0],\n       [ 4, 19,  9],\n       [ 6,  8,  4],\n       [ 7,  6,  0],\n       [ 0,  8,  0],\n       [ 0,  0,  0]])\n\n\nPython3\nplt.imshow(a, interpolation='none')\nplt.show()\n\n\n\n\n\n\u884c\u5217\u30c7\u30fc\u30bf\u30fb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4e0b\u306b\u76f8\u95a2\u4fc2\u6570\u884c\u5217\u3092\u7b97\u51fa\u3057\u305f\u7d50\u679c\u3092\u3001heatmap \u3068 imshow \u3067 \u51fa\u529b\n\n\n\uff08 \u76f8\u95a2\u4fc2\u6570\u306e\u5927\u5c0f \u3092 \u8272\u8868\u73fe \u63cf\u753b\u51fa\u529b \uff09\n\n\npandas.DataFrame \u306e corr\u30e1\u30bd\u30c3\u30c9 \u3067 \u76f8\u95a2\u4fc2\u6570\u884c\u5217 \u3092 \u7b97\u51fa => \u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u56f3\u51fa\u529b\n\n\nimshow\u30e1\u30bd\u30c3\u30c9 \u3067 \u51fa\u529b\n\na_df = pd.DataFrame(a)\n\na_df.corr()\n#           A         B         C\n# A  1.000000  0.509333  0.431003\n# B  0.509333  1.000000  0.880573\n# C  0.431003  0.880573  1.000000\n\nplt.imshow(a_df.corr(), interpolation='none')\nplt.gray()\nplt.show()\n\n\n\nsns.heatmap\u30e1\u30bd\u30c3\u30c9 \u3067 \u51fa\u529b\n\nsns.heatmap(a_df.corr(), annot=True)\nsns.plt.show()\n\n\nsns.heatmap(a_df.corr(), annot=True, cmap='gray')\nsns.plt.show()\n\n\n\nDataFrme => numpy.array \u578b \u306b \u5909\u63db\u3057\u3066\u304b\u3089 \u5b9f\u884c\n\n\n\u65b0kensuke-mi\u306e\u65e5\u8a18 \uff082014/08/29\uff09 \u300cpandas\u306edataframe\u578b\u3092numpy\u306earray\u578b\u306b\u5909\u63db\u3059\u308b\u300d\n\n\ndf.as_matrix()\n\na_coeff_matrix_array = a_df.corr().as_matrix()\n# print(type(a_coeff_matrix_array))\n# <class 'numpy.ndarray'>\n\nplt.imshow(a_coeff_matrix_array, interpolation='none')\nplt.gray()\nplt.show()\n\n\u307e\u3068\u3081\u308b\u3068\u3001\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n\na = np.array([[0,0,4,6,7,0,0],\n              [0,0,19,8,6,8,0],\n              [0,0,9,4,0,0,0]]).T\n\na_df = pd.DataFrame(a)\n\nprint(a_df.corr())\n#           A         B         C\n# A  1.000000  0.509333  0.431003\n# B  0.509333  1.000000  0.880573\n# C  0.431003  0.880573  1.000000\n\nprint(a_df.corr().as_matrix())\n# [[ 1.          0.50933349  0.43100256]\n#  [ 0.50933349  1.          0.88057287]\n#  [ 0.43100256  0.88057287  1.        ]]\n\nplt.imshow(a_df.corr().as_matrix(), interpolation='none')\nplt.gray()\nplt.show()\n\n\nsns.heatmap(a_df.corr().as_matrix(), annot=True)\nplt.show()\n\n\nsns.heatmap(a_df.corr().as_matrix(), annot=True, cmap='gray')\nplt.show()\n\n\n\nnumpy \u306e corrcoef\u30e1\u30bd\u30c3\u30c9 \u3067 \u76f8\u95a2\u4fc2\u6570\u884c\u5217 \u3092 \u7b97\u51fa => \u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u56f3\u51fa\u529b\n\n\n\u826f\u3044\u3082\u306e\u3002\u60aa\u3044\u3082\u306e\u3002 Python: NumPy\u3067\u76f8\u95a2\u4fc2\u6570\u3092\u6c42\u3081\u308b\n\n\nfrom numpy import corrcoef\nprint corrcoef([1, 2, 3, 4, 5], [1, 2, 2, 5, 5])\n\n\u51fa\u529b\u7d50\u679c:\n\n[[ 1.          0.92966968]\n[ 0.92966968  1.        ]]\n\n\n\n <Python\u3067A*(A-Star)\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 2009-07-14 \u9ad8\u901f\u6570\u5024\u8a08\u7b97\u30e9\u30a4\u30d6\u30e9\u30ea\u300cNumpy\u300d\u899a\u66f8\u76f8\u95a2\u4fc2\u6570\uff06\u76f8\u95a2\u4fc2\u6570\u884c\u5217\n\n\u4ee5\u4e0b\u3001\u540c\u3058\u30c7\u30fc\u30bf\u3067\u5b9f\u884c\u3057\u3066\u307f\u308b\na = np.array([[0,0,4,6,7,0,0],\n              [0,0,19,8,6,8,0],\n              [0,0,9,4,0,0,0]]).T\n\nprint(a)\n# array([[ 0,  0,  0],\n#        [ 0,  0,  0],\n#        [ 4, 19,  9],\n#        [ 6,  8,  4],\n#        [ 7,  6,  0],\n#        [ 0,  8,  0],\n#        [ 0,  0,  0]])\n\nfrom numpy import corrcoef\nprint(corrcoef(a))\n# [[        nan         nan         nan         nan         nan          nan\n#           nan]\n#  [        nan         nan         nan         nan         nan          nan\n           nan]\n#  [        nan         nan  1.          0.65465367  0.05763904   0.94491118\n          nan]\n#  [        nan         nan  0.65465367  1.          0.79240582  0.8660254\n          nan]\n#  [        nan         nan  0.05763904  0.79240582  1.          0.38124643\n          nan]\n#  [        nan         nan  0.94491118  0.8660254   0.38124643  1.\n          nan]\n#  [        nan         nan         nan         nan         nan         nan\n          nan]]\n\nplt.imshow(corrcoef(a))\nplt.show()\n\n\nsns.heatmap(corrcoef(a), annot=True)\nplt.show()\n\n\nsns.heatmap(corrcoef(a), annot=True, cmap='gray')\nplt.show()\n\n\n\n\n\u6563\u5e03\u56f3 \u306e \u5404\u70b9 \u306b \uff08\u70b9\u3054\u3068\u306e\uff09\u8a72\u5f53\u30c7\u30fc\u30bf\u4ef6\u6570 \u306e\u60c5\u5831\u3082\u4f75\u305b\u3066\u307f\u305f\u3044\u3068\u304d\n\n\uff08 \u6563\u5e03\u56f3 \u306e \u5404\u70b9 \u3092 \uff08\u70b9\u3054\u3068\u306e\uff09\u8a72\u5f53\u30c7\u30fc\u30bf\u4ef6\u6570 \u3092 \u8272\u5206\u3051\u3057\u3066 \u8868\u793a \uff09\n\nSeaborn \u306e jointplot\u30e1\u30bd\u30c3\u30c9 \u306e\u65b9 \u304c\u3001\u77ed\u3044\u30b3\u30fc\u30c9\u6587\u5b57\u6570 \u3067 \u63cf\u753b\u3067\u304d\u308b\n\n\n\uff12. histogram2d \u3067 \u51fa\u529b\n\n\noceanpython.org 2D histogram\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create some random numbers\nn = 100000\nx = np.random.randn(n)\ny = (1.5 * x) + np.random.randn(n)\n\n# print(x)\n# print(y)\n\n# \u6563\u5e03\u56f3 \u3092 \u78ba\u8a8d\n# fig1 = plt.figure()\n# plt.plot(x,y,'.r')\n# plt.xlabel('x')\n# plt.ylabel('y')\n# plt.show()\n\n\nnbins = 200\nresult = np.histogram2d(x,y,bins=nbins)\n# print(result)\n# print(len(result))\n# 3\n\n# print(result[0])\n# print(result[0])\n# [[ 0.  0.  0. ...,  0.  0.  0.]\n#  [ 0.  0.  0. ...,  0.  0.  0.]\n#  [ 0.  0.  0. ...,  0.  0.  0.]\n#  ...,\n#  [ 0.  0.  0. ...,  0.  0.  0.]\n#  [ 0.  0.  0. ...,  0.  0.  0.]\n#  [ 0.  0.  0. ...,  0.  0.  0.]]\n\n# print(result[1])\n\n [-4.54046472 -4.49710089 -4.45373705 -4.41037321 -4.36700938 -4.32364554\n -4.2802817  -4.23691787 -4.19355403 -4.15019019 -4.10682635 -4.06346252\n -4.02009868 -3.97673484 -3.93337101 -3.89000717 -3.84664333 -3.8032795\n -3.75991566 -3.71655182 -3.67318799 -3.62982415 -3.58646031 -3.54309648\n -3.49973264 -3.4563688  -3.41300497 -3.36964113 -3.32627729 -3.28291346\n -3.23954962 -3.19618578 -3.15282195 -3.10945811 -3.06609427 -3.02273043\n -2.9793666  -2.93600276 -2.89263892 -2.84927509 -2.80591125 -2.76254741\n -2.71918358 -2.67581974 -2.6324559  -2.58909207 -2.54572823 -2.50236439\n -2.45900056 -2.41563672 -2.37227288 -2.32890905 -2.28554521 -2.24218137\n -2.19881754 -2.1554537  -2.11208986 -2.06872603 -2.02536219 -1.98199835\n -1.93863451 -1.89527068 -1.85190684 -1.808543   -1.76517917 -1.72181533\n -1.67845149 -1.63508766 -1.59172382 -1.54835998 -1.50499615 -1.46163231\n -1.41826847 -1.37490464 -1.3315408  -1.28817696 -1.24481313 -1.20144929\n -1.15808545 -1.11472162 -1.07135778 -1.02799394 -0.98463011 -0.94126627\n -0.89790243 -0.85453859 -0.81117476 -0.76781092 -0.72444708 -0.68108325\n -0.63771941 -0.59435557 -0.55099174 -0.5076279  -0.46426406 -0.42090023\n -0.37753639 -0.33417255 -0.29080872 -0.24744488 -0.20408104 -0.16071721\n -0.11735337 -0.07398953 -0.0306257   0.01273814  0.05610198  0.09946581\n  0.14282965  0.18619349  0.22955733  0.27292116  0.316285    0.35964884\n  0.40301267  0.44637651  0.48974035  0.53310418  0.57646802  0.61983186\n  0.66319569  0.70655953  0.74992337  0.7932872   0.83665104  0.88001488\n  0.92337871  0.96674255  1.01010639  1.05347022  1.09683406  1.1401979\n  1.18356173  1.22692557  1.27028941  1.31365325  1.35701708  1.40038092\n  1.44374476  1.48710859  1.53047243  1.57383627  1.6172001   1.66056394\n  1.70392778  1.74729161  1.79065545  1.83401929  1.87738312  1.92074696\n  1.9641108   2.00747463  2.05083847  2.09420231  2.13756614  2.18092998\n  2.22429382  2.26765765  2.31102149  2.35438533  2.39774917  2.441113\n  2.48447684  2.52784068  2.57120451  2.61456835  2.65793219  2.70129602\n  2.74465986  2.7880237   2.83138753  2.87475137  2.91811521  2.96147904\n  3.00484288  3.04820672  3.09157055  3.13493439  3.17829823  3.22166206\n  3.2650259   3.30838974  3.35175357  3.39511741  3.43848125  3.48184509\n  3.52520892  3.56857276  3.6119366   3.65530043  3.69866427  3.74202811\n  3.78539194  3.82875578  3.87211962  3.91548345  3.95884729  4.00221113\n  4.04557496  4.0889388   4.13230264]\n\nprint(result[2])\n\n[-6.91272439 -6.83391376 -6.75510312 -6.67629249 -6.59748185 -6.51867122\n -6.43986059 -6.36104995 -6.28223932 -6.20342869 -6.12461805 -6.04580742\n -5.96699678 -5.88818615 -5.80937552 -5.73056488 -5.65175425 -5.57294362\n -5.49413298 -5.41532235 -5.33651171 -5.25770108 -5.17889045 -5.10007981\n -5.02126918 -4.94245855 -4.86364791 -4.78483728 -4.70602664 -4.62721601\n -4.54840538 -4.46959474 -4.39078411 -4.31197348 -4.23316284 -4.15435221\n -4.07554157 -3.99673094 -3.91792031 -3.83910967 -3.76029904 -3.68148841\n -3.60267777 -3.52386714 -3.4450565  -3.36624587 -3.28743524 -3.2086246\n -3.12981397 -3.05100334 -2.9721927  -2.89338207 -2.81457143 -2.7357608\n -2.65695017 -2.57813953 -2.4993289  -2.42051827 -2.34170763 -2.262897\n -2.18408636 -2.10527573 -2.0264651  -1.94765446 -1.86884383 -1.7900332\n -1.71122256 -1.63241193 -1.55360129 -1.47479066 -1.39598003 -1.31716939\n -1.23835876 -1.15954813 -1.08073749 -1.00192686 -0.92311622 -0.84430559\n -0.76549496 -0.68668432 -0.60787369 -0.52906306 -0.45025242 -0.37144179\n -0.29263115 -0.21382052 -0.13500989 -0.05619925  0.02261138  0.10142201\n  0.18023265  0.25904328  0.33785392  0.41666455  0.49547518  0.57428582\n  0.65309645  0.73190708  0.81071772  0.88952835  0.96833898  1.04714962\n  1.12596025  1.20477089  1.28358152  1.36239215  1.44120279  1.52001342\n  1.59882405  1.67763469  1.75644532  1.83525596  1.91406659  1.99287722\n  2.07168786  2.15049849  2.22930912  2.30811976  2.38693039  2.46574103\n  2.54455166  2.62336229  2.70217293  2.78098356  2.85979419  2.93860483\n  3.01741546  3.0962261   3.17503673  3.25384736  3.332658    3.41146863\n  3.49027926  3.5690899   3.64790053  3.72671117  3.8055218   3.88433243\n  3.96314307  4.0419537   4.12076433  4.19957497  4.2783856   4.35719624\n  4.43600687  4.5148175   4.59362814  4.67243877  4.7512494   4.83006004\n  4.90887067  4.98768131  5.06649194  5.14530257  5.22411321  5.30292384\n  5.38173447  5.46054511  5.53935574  5.61816638  5.69697701  5.77578764\n  5.85459828  5.93340891  6.01221954  6.09103018  6.16984081  6.24865145\n  6.32746208  6.40627271  6.48508335  6.56389398  6.64270461  6.72151525\n  6.80032588  6.87913652  6.95794715  7.03675778  7.11556842  7.19437905\n  7.27318968  7.35200032  7.43081095  7.50962159  7.58843222  7.66724285\n  7.74605349  7.82486412  7.90367475  7.98248539  8.06129602  8.14010666\n  8.21891729  8.29772792  8.37653856  8.45534919  8.53415982  8.61297046\n  8.69178109  8.77059173  8.84940236]\n\nH, xedges, yedges = np.histogram2d(x,y,bins=nbins)\n# print(H.max())\n# 72.0\n\n# print(H.min())\n# 0.0\n\n# H needs to be rotated and flipped\nH = np.rot90(H)\nH = np.flipud(H)\n\n# Mask zeros\nHmasked = np.ma.masked_where(H==0,H)\n# print(Hmasked)\n# [[-- -- -- ..., -- -- --]\n#  [-- -- -- ..., -- -- --]\n#  [-- -- -- ..., -- -- --]\n#  ...,\n#  [-- -- -- ..., -- -- --]\n#  [-- -- -- ..., -- -- --]\n#  [-- -- -- ..., -- -- --]]\n\n# plt.boxplot(xedges)\n# plt.show()\n\n\nfig2 = plt.figure()\nplt.pcolormesh(xedges,yedges,Hmasked)\nplt.xlabel('x')\nplt.ylabel('y')\ncbar = plt.colorbar()\ncbar.ax.set_ylabel('Counts')\nplt.show()\n\n\n\n# \u4ee5\u4e0b\u3082\u540c\u3058\n\nplt.imshow(Hmasked)\nplt.show()\n\n\n\n##__\uff11\uff0e\u6563\u5e03\u56f3\u884c\u5217 \u3067 \u5168\u300c\uff12\u5909\u91cf\u300d\u5909\u6570\u30da\u30a2\u9593 \u306e \u76f8\u95a2\u95a2\u4fc2 \u3092 \u53ef\u8996\u5316__\n\n###__\uff11\u2212\uff11. pandas \u306e scatter_matrix \u3092\u4f7f\u3046\u5834\u5408__\n\n```{python:Python3}\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\na = np.array([[0,0,4,6,7,0,0],\n              [0,0,19,8,6,8,0],\n              [0,0,9,4,0,0,0]]).T\n\na_df = pd.DataFrame(a)\nprint(a_df)\n```\n\n```\n   0   1  2\n0  0   0  0\n1  0   0  0\n2  4  19  9\n3  6   8  4\n4  7   6  0\n5  0   8  0\n6  0   0  0\n```\n\n\n```{python:Python3}\nfrom pandas.tools.plotting import scatter_matrix\nplt.figure()\n\nscatter_matrix(a_df)\nplt.show()\n```\n\n<img width=\"643\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 17.52.11.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/6d370596-a059-380f-15f4-607f70936e0b.png\">\n\n\n###__\uff11\u2212\uff12. Seaborn\u30e2\u30b8\u30e5\u30fc\u30eb \u3092 \u4f7f\u3046\u5834\u5408__\n\n* [MyEnigma \uff082015/10/09\uff09\u300c\u7c21\u5358\u306b\u7f8e\u3057\u3044\u30b0\u30e9\u30d5\u63cf\u753b\u304c\u3067\u304d\u308bPython\u30e9\u30a4\u30d6\u30e9\u30eaSeaborn\u5165\u9580\u300d](http://myenigma.hatenablog.com/entry/2015/10/09/223629)\n\n>####__\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u76f8\u95a2\u5206\u6790__\n>\n>seaborn\u306e\u7d20\u6674\u3089\u3057\u3044\u6a5f\u80fd\u306e\u4e00\u3064\u306b\u3001\n>\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5404\u5909\u6570\u540c\u58eb\u306e\u76f8\u95a2\u5206\u6790\u3092\u7c21\u5358\u306b\u5b9f\u65bd\u3067\u304d\u308b\u95a2\u6570\u304c\u3042\u308a\u307e\u3059\u3002\n>\n>\u305d\u308c\u306fpairplot\u95a2\u6570\u3067\u3059\u3002\n>\n>```\n>import seaborn as sns\n>\n>iris = sns.load_dataset(\"iris\") #\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\n>sns.pairplot(iris)\n>sns.plt.show()\n>```\n>\n>\u3059\u308b\u3068\u3001\u4e0b\u8a18\u306e\u30b0\u30e9\u30d5\u306e\u3088\u3046\u306b\u7c21\u5358\u306b\u76f8\u95a2\u5206\u6790\u3092\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<img width=\"743\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 17.53.55.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/f43f6751-8f7a-15cb-9014-8fea3ea12350.png\">\n\n##__\u5148\u307b\u3069\u4f5c\u6210\u3057\u305f\u30c7\u30fc\u30bf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff08 a_df \uff09\u3092\u51fa\u529b\u3057\u3066\u307f\u308b__\n\n>```\n>import seaborn as sns\n>\n>sns.pairplot(a_df)\n>sns.plt.show()\n>```\n\n<img width=\"599\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 17.57.00.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/35818e14-5d76-51bb-1846-266c8a4d590e.png\">\n\n\n###__Seaborn \u3067\u306f\u3001\u6563\u5e03\u56f3\u306e\u8ef8\u306e\u8107\u306b\u3001\u5404\u30c7\u30fc\u30bf\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u6dfb\u3048\u308b\u3053\u3068\u3082\u3067\u304d\u308b__\n\n* [MyEnigma \uff082015/10/09\uff09\u300c\u7c21\u5358\u306b\u7f8e\u3057\u3044\u30b0\u30e9\u30d5\u63cf\u753b\u304c\u3067\u304d\u308bPython\u30e9\u30a4\u30d6\u30e9\u30eaSeaborn\u5165\u9580\u300d](http://myenigma.hatenablog.com/entry/2015/10/09/223629)\n\n>####__\u4e8c\u6b21\u5143\u306e\u5206\u5e03\u30c7\u30fc\u30bf\u306e\u63cf\u753b__\n>\n>\u7d9a\u3044\u3066\u3001\u4e8c\u6b21\u5143\u5206\u5e03\u30c7\u30fc\u30bf\u306e\u63cf\u753b\u306e\u8aac\u660e\u3092\u3057\u307e\u3059\u3002\n>\n>####__\u6563\u5e03\u56f3\u306e\u30d7\u30ed\u30c3\u30c8__\n>\n>jointplot\u95a2\u6570\u3092\u4f7f\u3046\u3068\u3001\n>\u4e8c\u6b21\u5143\u306e\u5909\u6570\u306e\u6563\u5e03\u56f3\u3068\u3001\n>\u5404\u6b21\u5143\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u8868\u793a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\n__\uff12\u6b21\u5143\u30c7\u30fc\u30bf\u306e\u6563\u5e03\u56f3\u3068\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306f\u4ee5\u4e0b\u3002__\n\n[MyEnigma \uff082015/10/09\uff09\u300c\u7c21\u5358\u306b\u7f8e\u3057\u3044\u30b0\u30e9\u30d5\u63cf\u753b\u304c\u3067\u304d\u308bPython\u30e9\u30a4\u30d6\u30e9\u30eaSeaborn\u5165\u9580\u300d](http://myenigma.hatenablog.com/entry/2015/10/09/223629)\n\n* __\uff08 \u4ee5\u4e0b\u3001\u4e0a\u8a18\u8a18\u4e8b\u304b\u3089\u30b3\u30fc\u30c9\u3092\u8ee2\u8f09 \uff09__\n\n```\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\n\nmean, cov = [0, 1], [(1, .5), (.5, 1)]\ndata = np.random.multivariate_normal(mean, cov, 200)\n```\n\n```\n>>> print(data[0:3])\n[[-0.63023416 -0.32206524]\n [-1.46338235  0.38968927]\n [ 1.3123004   2.49452611]]\n```\n\n```\ndf = pd.DataFrame(data, columns=[\"x\", \"y\"])\nsns.jointplot(x=\"x\", y=\"y\", data=df)\nsns.plt.show()\n```\n\n<img width=\"483\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 18.00.06.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/7451a493-565d-f86e-b632-c8ca8d0a6282.png\">\n\n* __kind=\"hex\" \u3068\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u6563\u5e03\u56f3\u5185\u306e\u5404\u70b9 \u306b\u3001\u4f55\u4ef6\u306e\u30c7\u30fc\u30bf \u304c \u8a72\u5f53\u3059\u308b\u304b\u306e \u4ef6\u6570\u60c5\u5831\uff08\u4ef6\u6570\u5206\u5e03\uff09 \u3092\u3001\u70b9\u306e\u8272\u306e\u6fc3\u5ea6 \u3067 \u53ef\u8996\u5316\u3067\u304d\u308b__\n\n```\nsns.jointplot(x=\"x\", y=\"y\", kind=\"hex\", data=df)\nsns.plt.show()\n```\n\n<img width=\"481\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 18.00.30.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/39f116d2-caae-cb86-95fc-54d2f7b80c45.png\">\n\n* __kind=\"kde\" \u3068\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u6563\u5e03\u56f3\u5185\u306e\u5404\u70b9 \u306b\u3001\u4f55\u4ef6\u306e\u30c7\u30fc\u30bf \u304c \u8a72\u5f53\u3059\u308b\u304b\u306e \u4ef6\u6570\u60c5\u5831\uff08\u4ef6\u6570\u5206\u5e03\uff09 \u3092\u3001\u70b9\u306e\u8272\u306e\u6fc3\u5ea6 \u3067 \u53ef\u8996\u5316\u3067\u304d\u308b__\n\n[MyEnigma \uff082015/10/09\uff09\u300c\u7c21\u5358\u306b\u7f8e\u3057\u3044\u30b0\u30e9\u30d5\u63cf\u753b\u304c\u3067\u304d\u308bPython\u30e9\u30a4\u30d6\u30e9\u30eaSeaborn\u5165\u9580\u300d](http://myenigma.hatenablog.com/entry/2015/10/09/223629)\n\n> kind=\"kde\"\u3068\u3059\u308b\u3053\u3068\u3067\u30ab\u30fc\u30cd\u30eb\u5bc6\u5ea6\u6cd5\u306b\u3088\u308b\u78ba\u7387\u5bc6\u5ea6\u95a2\u6570\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002####__\u6563\u5e03\u56f3 \uff08\u70b9\u306e\u8868\u793a\u8272\u306e\u6fc3\u3055 \u3067\u3001\u5404\u70b9\u3054\u3068\u306e\u30c7\u30fc\u30bf\u4ef6\u6570 \u306e\u60c5\u5831\u3092\u91cd\u306d\u3066\u8868\u793a\uff09__\n\n\n```\nsns.jointplot(x=\"x\", y=\"y\", kind=\"kde\", data=df)\nsns.plt.show()\n```\n\n<img width=\"481\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 18.00.55.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/d7bc2839-6371-3b96-8060-676b9eb73dc8.png\">\n\n####__\u5148\u307b\u3069\u4f5c\u6210\u3057\u305f\u30c7\u30fc\u30bf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff08 a_df \uff09\u3092\u51fa\u529b\u3057\u3066\u307f\u308b__\n\n```\na_df.columns\n# Int64Index([0, 1, 2], dtype='int64')\n\na_df.columns = [\"A\", \"B\", \"C\"]\nprint(a_df)\n#    A   B  C\n# 0  0   0  0\n# 1  0   0  0\n# 2  4  19  9\n# 3  6   8  4\n# 4  7   6  0\n# 5  0   8  0\n# 6  0   0  0\n\nsns.jointplot(x=\"A\", y=\"B\", data=a_df)\nsns.plt.show()\n```\n\n<img width=\"457\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 18.05.03.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/53c0cef4-1904-3306-a66b-b9a5dfef8a3a.png\">\n\n* __kind=\"hex\" \u3068\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u6563\u5e03\u56f3\u5185\u306e\u5404\u70b9 \u306b\u3001\u4f55\u4ef6\u306e\u30c7\u30fc\u30bf \u304c \u8a72\u5f53\u3059\u308b\u304b\u306e \u4ef6\u6570\u60c5\u5831\uff08\u4ef6\u6570\u5206\u5e03\uff09 \u3092\u3001\u70b9\u306e\u8272\u306e\u6fc3\u5ea6 \u3067 \u53ef\u8996\u5316\u3067\u304d\u308b__\n\n```\nsns.jointplot(x=\"A\", y=\"B\", kind=\"hex\", data=a_df)\nsns.plt.show()\n```\n\n<img width=\"480\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 18.07.09.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/d8c0a99b-770c-8488-1f1d-98c72915331b.png\">\n\n* __kind=\"kde\" \u3068\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u6563\u5e03\u56f3\u5185\u306e\u5404\u70b9 \u306b\u3001\u4f55\u4ef6\u306e\u30c7\u30fc\u30bf \u304c \u8a72\u5f53\u3059\u308b\u304b\u306e \u4ef6\u6570\u60c5\u5831\uff08\u4ef6\u6570\u5206\u5e03\uff09 \u3092\u3001 \u70b9\u306e\u8272\u3068\u3057\u3066 \u53ef\u8996\u5316\u3067\u304d\u308b__\n\n```\nsns.jointplot(x=\"A\", y=\"B\", kind=\"kde\", data=a_df)\nsns.plt.show()\n```\n\n<img width=\"481\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 18.09.05.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/be77c65e-e883-9dbc-3b15-efc797250f8e.png\">\n\n\n___\n\n##__\uff12. \u5404\uff12\u5909\u91cf\u9593 \u306e \u76f8\u95a2\u4fc2\u6570\u306e\u5ea6\u5408\u3044 \u3092 \u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u30fb\u30b0\u30e9\u30d5\u3067\u8996\u899a\u7684\u306b\u78ba\u8a8d__\n\n\n####__pandas.DataFrame \u306e pivot_table\u30e1\u30bd\u30c3\u30c9 \u3067 \u5ea6\u6570\u5206\u5e03\u7b97\u51fa => Seaborn \u3067 \u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u51fa\u529b__\n\n* [hik0107\u3055\u3093 Qiita\u8a18\u4e8b\uff082015/10/14\uff09\u300cPython \u3067\u30c7\u30fc\u30bf\u53ef\u8996\u5316 - \u30ab\u30c3\u30b3\u3044\u3044\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3092\u63cf\u3053\u3046\u300d](http://qiita.com/hik0107/items/67ad4cfbc9e84032fc6b)\n\n>```\n>df_flights_pivot = pd.pivot_table(data=df_flights, values='passengers', \n                                  columns='year', index='month', aggfunc=np.mean)\n>```\n>\n\uff08 \u4e2d\u7565 \uff09\n>\n>\u3042\u3068\u306f\u3001Pivot\u5f62\u5f0f\u306b\u3057\u305fdataframe\u3092seaborn\u306b\u4e0e\u3048\u308b\u3060\u3051\u3067\u3059\n>\n>```\n>draw.py\n>sns.heatmap(df_flights_pivot)\t\t\t\t\t\t\t\t  \n>```\n\n__\uff08 \u5b9f\u884c\u3057\u3066\u307f\u308b \uff09__\n\n```\n>>> df_flights = sns.load_dataset('flights')\n>>> df_flights.head(5)\n   year     month  passengers\n0  1949   January         112\n1  1949  February         118\n2  1949     March         132\n3  1949     April         129\n4  1949       May         121\n>>>\n>>> df_flights_pivot = pd.pivot_table(data=df_flights, values='passengers',\\\n...  columns='year', index='month', aggfunc=np.mean)\n>>>\n>>> print(df_flights_pivot)\nyear       1949  1950  1951  1952  1953  1954  1955  1956  1957  1958  1959  \\\nmonth\nJanuary     112   115   145   171   196   204   242   284   315   340   360\nFebruary    118   126   150   180   196   188   233   277   301   318   342\nMarch       132   141   178   193   236   235   267   317   356   362   406\nApril       129   135   163   181   235   227   269   313   348   348   396\nMay         121   125   172   183   229   234   270   318   355   363   420\nJune        135   149   178   218   243   264   315   374   422   435   472\nJuly        148   170   199   230   264   302   364   413   465   491   548\nAugust      148   170   199   242   272   293   347   405   467   505   559\nSeptember   136   158   184   209   237   259   312   355   404   404   463\nOctober     119   133   162   191   211   229   274   306   347   359   407\nNovember    104   114   146   172   180   203   237   271   305   310   362\nDecember    118   140   166   194   201   229   278   306   336   337   405\n\nyear       1960\nmonth\nJanuary     417\nFebruary    391\nMarch       419\nApril       461\nMay         472\nJune        535\nJuly        622\nAugust      606\nSeptember   508\nOctober     461\nNovember    390\nDecember    432\n>>>\n>>> sns.heatmap(df_flights_pivot)\n<matplotlib.axes._subplots.AxesSubplot object at 0x10f33dc50>\n>>>\n>>> sns.plt.show()\n>>>\n```\n\n<img width=\"644\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 18.12.06.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/5ccdb304-491f-d1b6-c3a7-b5da9f72ac41.png\">\n\n\n\n* __\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u56f3 \u306e \u5404\u30de\u30b9 \u306b \u8a72\u5f53\u30c7\u30fc\u30bf\u4ef6\u6570\uff08\u5ea6\u6570\uff09\u306e\u6570\u5b57 \u3092 \u57cb\u3081\u8fbc\u307f\u305f\u3044\u3068\u304d__\n\n>####__\u3082\u3046\u5c11\u3057\u304a\u5316\u7ca7__\n>\n>\u4e0a\u8a18\u56f3\u306e\u307e\u307e\u3067\u3082\u3044\u3044\u306e\u3067\u3059\u304c\u3001\u3082\u3046\u5c11\u3057\u898b\u305b\u65b9\u3092\u5909\u3048\u308b\u305f\u3081\u306b\u304a\u5316\u7ca7\u3092\u65bd\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n>\n>\u4f8b\u3048\u3070\u3053\u3093\u306a\u611f\u3058\u3067\u3059\n>\n>```\n>plt.figure(figsize=(12, 9))\n>sns.heatmap(df_flights_pivot, annot=True, fmt='g', cmap='Blues')\n>```\n>\n>annot\u306f\u6570\u5024\u3092\u30bb\u30eb\u306b\u66f8\u304d\u8fbc\u3080\u5f15\u6570\u3001fmt\u306f\u6570\u5024\u306e\u6841\u306e\u8abf\u6574\u3001cmap\u306fColour_map\u306e\u3053\u3068\u3067\u3001\u30b0\u30e9\u30c7\u30a3\u30a8\u30fc\u30b7\u30e7\u30f3\u306e\u8272\u306e\u30d1\u30ec\u30c3\u30c8\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n>\u3053\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n>\n>\u5177\u4f53\u7684\u306a\u6570\u5024\u3092\u898b\u306a\u304c\u3089\u8b70\u8ad6\u3057\u305f\u3044\u3068\u304d\u306f\u3053\u3063\u3061\u306e\u307b\u3046\u304c\u3088\u3044\u3067\u3057\u3087\u3046\u3002\n>\n>```\n>sns.heatmap(a, annot=True)\n>sns.plt.show()\n>```\n\n```\n>>> sns.heatmap(df_flights_pivot, annot=True, fmt='g', cmap='Blues')\n<matplotlib.axes._subplots.AxesSubplot object at 0x10f0e49e8>\n>>> sns.plt.show()\n>>>\n```\n\n<img width=\"960\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 18.13.48.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/0de527d7-467e-b0ad-520c-6e2d44276a91.png\">\n\n####__\u307e\u305a\u6700\u521d\u306b\u3001\uff12\u5909\u6570\u9593\u306e\u76f8\u95a2\u4fc2\u6570\u3067\u306f\u306a\u304f\u3001\u624b\u5143\u3067\u4f5c\u6210\u3057\u305fNumpy.array\u306e\u30de\u30c8\u30ea\u30c3\u30af\u30b9\u30fb\u30c7\u30fc\u30bf \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff08 a \uff09 \u3092 \u51fa\u529b\u3057\u3066\u307f\u308b__\n\n```\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\na = np.array([[0,0,4,6,7,0,0],\n              [0,0,19,8,6,8,0],\n              [0,0,9,4,0,0,0]]).T\n\nprint(a)\n```\n\n```\narray([[ 0,  0,  0],\n       [ 0,  0,  0],\n       [ 4, 19,  9],\n       [ 6,  8,  4],\n       [ 7,  6,  0],\n       [ 0,  8,  0],\n       [ 0,  0,  0]])\n```\n\n```\nsns.heatmap(a, annot=True, fmt='g', cmap='Blues')\nsns.plt.show()\n```\n\n<img width=\"640\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 18.39.54.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/0a5609bd-e59c-731c-9f43-f2cca0986f7f.png\">\n\n\n* __\u3044\u308d\u3044\u308d\u306a\u8272\u3092\u6307\u5b9a\u3067\u304d\u308b__\n\n\n```\nsns.heatmap(a, annot=True, fmt='g', cmap='Oranges')\nsns.plt.show()\n```\n\n<img width=\"643\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 18.15.20.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/73424b03-c276-d4f7-6019-3bb59b5c802c.png\">\n\n\n```\nsns.heatmap(a, annot=True, fmt='g', cmap='Reds')\nsns.plt.show()\n```\n\n<img width=\"643\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 18.15.41.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/747a6313-811a-3d89-1b76-15273b404d60.png\">\n\n\n```\nsns.heatmap(a, annot=True, fmt='g', cmap='Purples')\nsns.plt.show()\n```\n\n<img width=\"642\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 18.16.02.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/07acdcf0-0cd7-d9af-f510-670234f2dac4.png\">\n\n\n```\nsns.heatmap(a, annot=True, fmt='g', cmap='Greens')\nsns.plt.show()\n```\n\n<img width=\"640\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 18.16.21.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/a65f318c-951b-c055-1000-747341e0be44.png\">\n\n\n* __\u8272\u3092\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u7d2b\u306b\u306a\u308b__\n\n```\nsns.heatmap(a, annot=True, fmt='g')\nsns.plt.show()\n```\n\n<img width=\"641\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 18.16.54.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/85af7fbb-dc00-3ad5-5683-5d9192ac0bd7.png\">\n\n\n```\nsns.heatmap(a, annot=True)\nsns.plt.show()\n```\n\n<img width=\"639\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 18.17.18.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/1785983a-221b-747b-69b6-888c6128e0d2.png\">\n\n###__\"Gray\" \u3092\u6307\u5b9a\u3059\u308b\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\uff08\u672a\u5b9a\u7fa9\u306e\u8272\u30e9\u30d9\u30eb\uff09__\n\n```\nsns.heatmap(a, annot=True, cmap='Gray')\n```\n\n```\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/Users/hirofumi.yashima/anaconda/lib/python3.5/site-packages/seaborn/matrix.py\", line 463, in heatmap\n    plotter.plot(ax, cbar_ax, kwargs)\n  File \"/Users/hirofumi.yashima/anaconda/lib/python3.5/site-packages/seaborn/matrix.py\", line 227, in plot\n    cmap=self.cmap, **kws)\n  File \"/Users/hirofumi.yashima/anaconda/lib/python3.5/site-packages/matplotlib/__init__.py\", line 1811, in inner\n    return func(ax, *args, **kwargs)\n  File \"/Users/hirofumi.yashima/anaconda/lib/python3.5/site-packages/matplotlib/axes/_axes.py\", line 5416, in pcolormesh\n    collection.set_cmap(cmap)\n  File \"/Users/hirofumi.yashima/anaconda/lib/python3.5/site-packages/matplotlib/cm.py\", line 306, in set_cmap\n    cmap = get_cmap(cmap)\n  File \"/Users/hirofumi.yashima/anaconda/lib/python3.5/site-packages/matplotlib/cm.py\", line 166, in get_cmap\n    % (name, ', '.join(sorted(cmap_d.keys()))))\nValueError: Colormap Gray is not recognized. Possible values are: Accent, Accent_r, Blues, Blues_r, BrBG, BrBG_r, BuGn, BuGn_r, BuPu, BuPu_r, CMRmap, CMRmap_r, Dark2, Dark2_r, GnBu, GnBu_r, Greens, Greens_r, Greys, Greys_r, OrRd, OrRd_r, Oranges, Oranges_r, PRGn, PRGn_r, Paired, Paired_r, Pastel1, Pastel1_r, Pastel2, Pastel2_r, PiYG, PiYG_r, PuBu, PuBuGn, PuBuGn_r, PuBu_r, PuOr, PuOr_r, PuRd, PuRd_r, Purples, Purples_r, RdBu, RdBu_r, RdGy, RdGy_r, RdPu, RdPu_r, RdYlBu, RdYlBu_r, RdYlGn, RdYlGn_r, Reds, Reds_r, Set1, Set1_r, Set2, Set2_r, Set3, Set3_r, Spectral, Spectral_r, Wistia, Wistia_r, YlGn, YlGnBu, YlGnBu_r, YlGn_r, YlOrBr, YlOrBr_r, YlOrRd, YlOrRd_r, afmhot, afmhot_r, autumn, autumn_r, binary, binary_r, bone, bone_r, brg, brg_r, bwr, bwr_r, cool, cool_r, coolwarm, coolwarm_r, copper, copper_r, cubehelix, cubehelix_r, flag, flag_r, gist_earth, gist_earth_r, gist_gray, gist_gray_r, gist_heat, gist_heat_r, gist_ncar, gist_ncar_r, gist_rainbow, gist_rainbow_r, gist_stern, gist_stern_r, gist_yarg, gist_yarg_r, gnuplot, gnuplot2, gnuplot2_r, gnuplot_r, gray, gray_r, hot, hot_r, hsv, hsv_r, inferno, inferno_r, jet, jet_r, magma, magma_r, nipy_spectral, nipy_spectral_r, ocean, ocean_r, pink, pink_r, plasma, plasma_r, prism, prism_r, rainbow, rainbow_r, seismic, seismic_r, spectral, spectral_r, spring, spring_r, summer, summer_r, terrain, terrain_r, viridis, viridis_r, winter, winter_r\n>>>\n```\n\n####__\u6307\u5b9a\u3067\u304d\u308b\u8272\u30e9\u30d9\u30eb\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u3060__\n\n* Accent \n* Accent_r\n* Blues\n* Blues_r\n* BrBG\n* BrBG_r\n* BuGn\n* BuGn_r\n* BuPu\n* BuPu_r\n* CMRmap\n* CMRmap_r\n* Dark2\n* Dark2_r\n* GnBu\n* GnBu_r\n* Greens\n* Greens_r\n* Greys\n* Greys_r\n* OrRd\n* OrRd_r\n* Oranges\n* Oranges_r\n* PRGn\n* PRGn_r\n* Paired\n* Paired_r\n* Pastel1\n* Pastel1_r\n* Pastel2\n* Pastel2_r\n* PiYG\n* PiYG_r\n* PuBu\n* PuBuGn\n* PuBuGn_r\n* PuBu_r\n* PuOr\n* PuOr_r\n* PuRd\n* PuRd_r\n* Purples\n* Purples_r\\\n* RdBu\n* RdBu_r\n* RdGy\n* RdGy_r\n* RdPu\n* RdPu_r\n\n...\n\n\uff08\u4ee5\u4e0b\u7565\uff09\n\n\n* __'Paired' \u3092\u6307\u5b9a\u3057\u305f\u5834\u5408__\n\n```\nsns.heatmap(a, annot=True, cmap='Paired')\nplt.show()\n```\n\n<img width=\"645\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 19.03.25.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/f7562b29-4072-04ee-c0f4-cfd71fa40a26.png\">\n\n* __'gray' \u3092\u6307\u5b9a\u3057\u305f\u5834\u5408__\n\n```\nsns.heatmap(a, annot=True, cmap='gray')\nplt.show()\n```\n\n![uploading \u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 19.05.00.png...]()\n\n* __'gray_r' \u3092\u6307\u5b9a\u3057\u305f\u5834\u5408__\n\n```\nsns.heatmap(a, annot=True, cmap='gray_r')\nplt.show()\n```\n\n<img width=\"640\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 19.05.40.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/d0930893-407b-68e8-7135-5b059b5a0796.png\">\n\n\n####__\u884c\u5217\u30c7\u30fc\u30bf\u306f\u3001imshow\u30e1\u30bd\u30c3\u3067\u3082\u5024\u306e\u5927\u5c0f\u3092\u8272\u8868\u73fe\u306b\u5909\u63db\u3057\u3066\u63cf\u753b\u3067\u304d\u308b__\n\n```{python:Python3}\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\na = np.array([[0,0,4,6,7,0,0],\n              [0,0,19,8,6,8,0],\n              [0,0,9,4,0,0,0]]).T\n\nprint(a)\n```\n\n```\narray([[ 0,  0,  0],\n       [ 0,  0,  0],\n       [ 4, 19,  9],\n       [ 6,  8,  4],\n       [ 7,  6,  0],\n       [ 0,  8,  0],\n       [ 0,  0,  0]])\n```\n\n\n```{python:Python3}\nplt.imshow(a, interpolation='none')\nplt.show()\n```\n\n<img width=\"642\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 17.48.56.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/50d69e78-3f09-be1f-a2ff-afe96f9a686a.png\">\n\n___\n\n##__\u884c\u5217\u30c7\u30fc\u30bf\u30fb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4e0b\u306b\u76f8\u95a2\u4fc2\u6570\u884c\u5217\u3092\u7b97\u51fa\u3057\u305f\u7d50\u679c\u3092\u3001heatmap \u3068 imshow \u3067 \u51fa\u529b__\n\n####__\uff08 \u76f8\u95a2\u4fc2\u6570\u306e\u5927\u5c0f \u3092 \u8272\u8868\u73fe \u63cf\u753b\u51fa\u529b \uff09__ \n\n####__pandas.DataFrame \u306e corr\u30e1\u30bd\u30c3\u30c9 \u3067 \u76f8\u95a2\u4fc2\u6570\u884c\u5217 \u3092 \u7b97\u51fa => \u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u56f3\u51fa\u529b__\n\n* __imshow\u30e1\u30bd\u30c3\u30c9 \u3067 \u51fa\u529b__\n\n```\na_df = pd.DataFrame(a)\n\na_df.corr()\n#           A         B         C\n# A  1.000000  0.509333  0.431003\n# B  0.509333  1.000000  0.880573\n# C  0.431003  0.880573  1.000000\n\nplt.imshow(a_df.corr(), interpolation='none')\nplt.gray()\nplt.show()\n```\n\n<img width=\"639\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 18.50.40.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/5e66fe3f-d280-59fe-1eaf-4bb16a6bb72d.png\">\n\n\n* __sns.heatmap\u30e1\u30bd\u30c3\u30c9 \u3067 \u51fa\u529b__\n\n```\nsns.heatmap(a_df.corr(), annot=True)\nsns.plt.show()\n```\n\n<img width=\"640\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 18.47.45.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/c1c87e0b-99f6-b775-f77d-fd066a31e076.png\">\n\n```\nsns.heatmap(a_df.corr(), annot=True, cmap='gray')\nsns.plt.show()\n```\n\n<img width=\"646\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 19.11.44.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/46600e41-4461-b454-7cce-6453992bed55.png\">\n\n####__DataFrme => numpy.array \u578b \u306b \u5909\u63db\u3057\u3066\u304b\u3089 \u5b9f\u884c__\n\n* [\u65b0kensuke-mi\u306e\u65e5\u8a18 \uff082014/08/29\uff09 \u300cpandas\u306edataframe\u578b\u3092numpy\u306earray\u578b\u306b\u5909\u63db\u3059\u308b\u300d](http://kensuke-mi.xyz/kensuke-mi_diary/2014/08/pandasdataframenumpyarray.html)\n\n> df.as_matrix()\n\n\n```\na_coeff_matrix_array = a_df.corr().as_matrix()\n# print(type(a_coeff_matrix_array))\n# <class 'numpy.ndarray'>\n\nplt.imshow(a_coeff_matrix_array, interpolation='none')\nplt.gray()\nplt.show()\n```\n\n\u307e\u3068\u3081\u308b\u3068\u3001\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\n\n```\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n\na = np.array([[0,0,4,6,7,0,0],\n              [0,0,19,8,6,8,0],\n              [0,0,9,4,0,0,0]]).T\n\na_df = pd.DataFrame(a)\n\nprint(a_df.corr())\n#           A         B         C\n# A  1.000000  0.509333  0.431003\n# B  0.509333  1.000000  0.880573\n# C  0.431003  0.880573  1.000000\n\nprint(a_df.corr().as_matrix())\n# [[ 1.          0.50933349  0.43100256]\n#  [ 0.50933349  1.          0.88057287]\n#  [ 0.43100256  0.88057287  1.        ]]\n\nplt.imshow(a_df.corr().as_matrix(), interpolation='none')\nplt.gray()\nplt.show()\n```\n\n<img width=\"639\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 18.19.21.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/cfc8bda6-4827-cafc-67cc-279da2e03801.png\">\n\n```\nsns.heatmap(a_df.corr().as_matrix(), annot=True)\nplt.show()\n```\n\n<img width=\"642\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 18.52.39.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/13774285-d28e-7779-d1a3-471a49d3d217.png\">\n\n```\nsns.heatmap(a_df.corr().as_matrix(), annot=True, cmap='gray')\nplt.show()\n```\n\n<img width=\"643\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 19.08.42.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/e29f9c1e-3bc0-1ed5-9b51-77d9dfa5cde1.png\">\n\n\n####__numpy \u306e corrcoef\u30e1\u30bd\u30c3\u30c9 \u3067 \u76f8\u95a2\u4fc2\u6570\u884c\u5217 \u3092 \u7b97\u51fa => \u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u56f3\u51fa\u529b__\n\n* [\u826f\u3044\u3082\u306e\u3002\u60aa\u3044\u3082\u306e\u3002 Python: NumPy\u3067\u76f8\u95a2\u4fc2\u6570\u3092\u6c42\u3081\u308b](http://handasse.blogspot.com/2008/12/python-numpy.html)\n\n>```\n>from numpy import corrcoef\n>print corrcoef([1, 2, 3, 4, 5], [1, 2, 2, 5, 5])\n>```\n>\n>\u51fa\u529b\u7d50\u679c:\n>```\n>[[ 1.          0.92966968]\n> [ 0.92966968  1.        ]]\n>```\n\n* [ <Python\u3067A*(A-Star)\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 2009-07-14 \u9ad8\u901f\u6570\u5024\u8a08\u7b97\u30e9\u30a4\u30d6\u30e9\u30ea\u300cNumpy\u300d\u899a\u66f8\u76f8\u95a2\u4fc2\u6570\uff06\u76f8\u95a2\u4fc2\u6570\u884c\u5217](http://d.hatena.ne.jp/pashango_p/20090714/1247590272)\n\n__\u4ee5\u4e0b\u3001\u540c\u3058\u30c7\u30fc\u30bf\u3067\u5b9f\u884c\u3057\u3066\u307f\u308b__\n\n```\na = np.array([[0,0,4,6,7,0,0],\n              [0,0,19,8,6,8,0],\n              [0,0,9,4,0,0,0]]).T\n\nprint(a)\n# array([[ 0,  0,  0],\n#        [ 0,  0,  0],\n#        [ 4, 19,  9],\n#        [ 6,  8,  4],\n#        [ 7,  6,  0],\n#        [ 0,  8,  0],\n#        [ 0,  0,  0]])\n\nfrom numpy import corrcoef\nprint(corrcoef(a))\n# [[        nan         nan         nan         nan         nan          nan\n#           nan]\n#  [        nan         nan         nan         nan         nan          nan\n           nan]\n#  [        nan         nan  1.          0.65465367  0.05763904   0.94491118\n          nan]\n#  [        nan         nan  0.65465367  1.          0.79240582  0.8660254\n          nan]\n#  [        nan         nan  0.05763904  0.79240582  1.          0.38124643\n          nan]\n#  [        nan         nan  0.94491118  0.8660254   0.38124643  1.\n          nan]\n#  [        nan         nan         nan         nan         nan         nan\n          nan]]\n\nplt.imshow(corrcoef(a))\nplt.show()\n```\n\n<img width=\"641\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 18.27.16.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/c58dbe86-0a3c-5329-18ac-2ae8bc0ee7a1.png\">\n\n```\nsns.heatmap(corrcoef(a), annot=True)\nplt.show()\n```\n\n<img width=\"643\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 18.53.57.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/5b8121a0-0a7c-4ed3-a753-77731362e20c.png\">\n\n```\nsns.heatmap(corrcoef(a), annot=True, cmap='gray')\nplt.show()\n```\n\n<img width=\"640\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 19.07.24.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/4a4993d6-bc04-7c2e-2dc8-0201c4d1d7fa.png\">\n\n___\n\n###__\u6563\u5e03\u56f3 \u306e \u5404\u70b9 \u306b \uff08\u70b9\u3054\u3068\u306e\uff09\u8a72\u5f53\u30c7\u30fc\u30bf\u4ef6\u6570 \u306e\u60c5\u5831\u3082\u4f75\u305b\u3066\u307f\u305f\u3044\u3068\u304d__\n\uff08 \u6563\u5e03\u56f3 \u306e \u5404\u70b9 \u3092 \uff08\u70b9\u3054\u3068\u306e\uff09\u8a72\u5f53\u30c7\u30fc\u30bf\u4ef6\u6570 \u3092 \u8272\u5206\u3051\u3057\u3066 \u8868\u793a \uff09\n\n* __Seaborn \u306e jointplot\u30e1\u30bd\u30c3\u30c9 \u306e\u65b9 \u304c\u3001\u77ed\u3044\u30b3\u30fc\u30c9\u6587\u5b57\u6570 \u3067 \u63cf\u753b\u3067\u304d\u308b__\n\n##__\uff12. histogram2d \u3067 \u51fa\u529b__\n\n* [oceanpython.org 2D histogram](https://oceanpython.org/2013/02/25/2d-histogram/)\n\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n \n# Create some random numbers\nn = 100000\nx = np.random.randn(n)\ny = (1.5 * x) + np.random.randn(n)\n\n# print(x)\n# print(y)\n\n# \u6563\u5e03\u56f3 \u3092 \u78ba\u8a8d\n# fig1 = plt.figure()\n# plt.plot(x,y,'.r')\n# plt.xlabel('x')\n# plt.ylabel('y')\n# plt.show()\n```\n\n<img width=\"640\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 18.28.46.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/4526816b-1d22-7bce-31cf-c3dc07966788.png\">\n\n\n```\nnbins = 200\nresult = np.histogram2d(x,y,bins=nbins)\n# print(result)\n# print(len(result))\n# 3\n\n# print(result[0])\n# print(result[0])\n# [[ 0.  0.  0. ...,  0.  0.  0.]\n#  [ 0.  0.  0. ...,  0.  0.  0.]\n#  [ 0.  0.  0. ...,  0.  0.  0.]\n#  ...,\n#  [ 0.  0.  0. ...,  0.  0.  0.]\n#  [ 0.  0.  0. ...,  0.  0.  0.]\n#  [ 0.  0.  0. ...,  0.  0.  0.]]\n\n# print(result[1])\n```\n\n```\n [-4.54046472 -4.49710089 -4.45373705 -4.41037321 -4.36700938 -4.32364554\n -4.2802817  -4.23691787 -4.19355403 -4.15019019 -4.10682635 -4.06346252\n -4.02009868 -3.97673484 -3.93337101 -3.89000717 -3.84664333 -3.8032795\n -3.75991566 -3.71655182 -3.67318799 -3.62982415 -3.58646031 -3.54309648\n -3.49973264 -3.4563688  -3.41300497 -3.36964113 -3.32627729 -3.28291346\n -3.23954962 -3.19618578 -3.15282195 -3.10945811 -3.06609427 -3.02273043\n -2.9793666  -2.93600276 -2.89263892 -2.84927509 -2.80591125 -2.76254741\n -2.71918358 -2.67581974 -2.6324559  -2.58909207 -2.54572823 -2.50236439\n -2.45900056 -2.41563672 -2.37227288 -2.32890905 -2.28554521 -2.24218137\n -2.19881754 -2.1554537  -2.11208986 -2.06872603 -2.02536219 -1.98199835\n -1.93863451 -1.89527068 -1.85190684 -1.808543   -1.76517917 -1.72181533\n -1.67845149 -1.63508766 -1.59172382 -1.54835998 -1.50499615 -1.46163231\n -1.41826847 -1.37490464 -1.3315408  -1.28817696 -1.24481313 -1.20144929\n -1.15808545 -1.11472162 -1.07135778 -1.02799394 -0.98463011 -0.94126627\n -0.89790243 -0.85453859 -0.81117476 -0.76781092 -0.72444708 -0.68108325\n -0.63771941 -0.59435557 -0.55099174 -0.5076279  -0.46426406 -0.42090023\n -0.37753639 -0.33417255 -0.29080872 -0.24744488 -0.20408104 -0.16071721\n -0.11735337 -0.07398953 -0.0306257   0.01273814  0.05610198  0.09946581\n  0.14282965  0.18619349  0.22955733  0.27292116  0.316285    0.35964884\n  0.40301267  0.44637651  0.48974035  0.53310418  0.57646802  0.61983186\n  0.66319569  0.70655953  0.74992337  0.7932872   0.83665104  0.88001488\n  0.92337871  0.96674255  1.01010639  1.05347022  1.09683406  1.1401979\n  1.18356173  1.22692557  1.27028941  1.31365325  1.35701708  1.40038092\n  1.44374476  1.48710859  1.53047243  1.57383627  1.6172001   1.66056394\n  1.70392778  1.74729161  1.79065545  1.83401929  1.87738312  1.92074696\n  1.9641108   2.00747463  2.05083847  2.09420231  2.13756614  2.18092998\n  2.22429382  2.26765765  2.31102149  2.35438533  2.39774917  2.441113\n  2.48447684  2.52784068  2.57120451  2.61456835  2.65793219  2.70129602\n  2.74465986  2.7880237   2.83138753  2.87475137  2.91811521  2.96147904\n  3.00484288  3.04820672  3.09157055  3.13493439  3.17829823  3.22166206\n  3.2650259   3.30838974  3.35175357  3.39511741  3.43848125  3.48184509\n  3.52520892  3.56857276  3.6119366   3.65530043  3.69866427  3.74202811\n  3.78539194  3.82875578  3.87211962  3.91548345  3.95884729  4.00221113\n  4.04557496  4.0889388   4.13230264]\n```\n\n```\nprint(result[2])\n```\n\n```\n[-6.91272439 -6.83391376 -6.75510312 -6.67629249 -6.59748185 -6.51867122\n -6.43986059 -6.36104995 -6.28223932 -6.20342869 -6.12461805 -6.04580742\n -5.96699678 -5.88818615 -5.80937552 -5.73056488 -5.65175425 -5.57294362\n -5.49413298 -5.41532235 -5.33651171 -5.25770108 -5.17889045 -5.10007981\n -5.02126918 -4.94245855 -4.86364791 -4.78483728 -4.70602664 -4.62721601\n -4.54840538 -4.46959474 -4.39078411 -4.31197348 -4.23316284 -4.15435221\n -4.07554157 -3.99673094 -3.91792031 -3.83910967 -3.76029904 -3.68148841\n -3.60267777 -3.52386714 -3.4450565  -3.36624587 -3.28743524 -3.2086246\n -3.12981397 -3.05100334 -2.9721927  -2.89338207 -2.81457143 -2.7357608\n -2.65695017 -2.57813953 -2.4993289  -2.42051827 -2.34170763 -2.262897\n -2.18408636 -2.10527573 -2.0264651  -1.94765446 -1.86884383 -1.7900332\n -1.71122256 -1.63241193 -1.55360129 -1.47479066 -1.39598003 -1.31716939\n -1.23835876 -1.15954813 -1.08073749 -1.00192686 -0.92311622 -0.84430559\n -0.76549496 -0.68668432 -0.60787369 -0.52906306 -0.45025242 -0.37144179\n -0.29263115 -0.21382052 -0.13500989 -0.05619925  0.02261138  0.10142201\n  0.18023265  0.25904328  0.33785392  0.41666455  0.49547518  0.57428582\n  0.65309645  0.73190708  0.81071772  0.88952835  0.96833898  1.04714962\n  1.12596025  1.20477089  1.28358152  1.36239215  1.44120279  1.52001342\n  1.59882405  1.67763469  1.75644532  1.83525596  1.91406659  1.99287722\n  2.07168786  2.15049849  2.22930912  2.30811976  2.38693039  2.46574103\n  2.54455166  2.62336229  2.70217293  2.78098356  2.85979419  2.93860483\n  3.01741546  3.0962261   3.17503673  3.25384736  3.332658    3.41146863\n  3.49027926  3.5690899   3.64790053  3.72671117  3.8055218   3.88433243\n  3.96314307  4.0419537   4.12076433  4.19957497  4.2783856   4.35719624\n  4.43600687  4.5148175   4.59362814  4.67243877  4.7512494   4.83006004\n  4.90887067  4.98768131  5.06649194  5.14530257  5.22411321  5.30292384\n  5.38173447  5.46054511  5.53935574  5.61816638  5.69697701  5.77578764\n  5.85459828  5.93340891  6.01221954  6.09103018  6.16984081  6.24865145\n  6.32746208  6.40627271  6.48508335  6.56389398  6.64270461  6.72151525\n  6.80032588  6.87913652  6.95794715  7.03675778  7.11556842  7.19437905\n  7.27318968  7.35200032  7.43081095  7.50962159  7.58843222  7.66724285\n  7.74605349  7.82486412  7.90367475  7.98248539  8.06129602  8.14010666\n  8.21891729  8.29772792  8.37653856  8.45534919  8.53415982  8.61297046\n  8.69178109  8.77059173  8.84940236]\n```\n\n```\nH, xedges, yedges = np.histogram2d(x,y,bins=nbins)\n# print(H.max())\n# 72.0\n\n# print(H.min())\n# 0.0\n\n# H needs to be rotated and flipped\nH = np.rot90(H)\nH = np.flipud(H)\n \n# Mask zeros\nHmasked = np.ma.masked_where(H==0,H)\n# print(Hmasked)\n# [[-- -- -- ..., -- -- --]\n#  [-- -- -- ..., -- -- --]\n#  [-- -- -- ..., -- -- --]\n#  ...,\n#  [-- -- -- ..., -- -- --]\n#  [-- -- -- ..., -- -- --]\n#  [-- -- -- ..., -- -- --]]\n\n# plt.boxplot(xedges)\n# plt.show()\n```\n\n<img width=\"642\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 18.32.46.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/88e7c50e-46ad-6ed0-c2c7-0ca14dfc9e57.png\">\n\n\n```\nfig2 = plt.figure()\nplt.pcolormesh(xedges,yedges,Hmasked)\nplt.xlabel('x')\nplt.ylabel('y')\ncbar = plt.colorbar()\ncbar.ax.set_ylabel('Counts')\nplt.show()\n```\n\n<img width=\"638\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 18.33.44.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/667e6b78-3a03-db1b-ff07-84de6665c3e3.png\">\n\n\n####__# \u4ee5\u4e0b\u3082\u540c\u3058__\n\n```\nplt.imshow(Hmasked)\nplt.show()\n```\n\n<img width=\"641\" alt=\"_\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-04 18.34.06.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/ccb280a0-2a2c-3865-ba9b-3ca6b0f56b0b.png\">\n"}