{"context": "\n\n\u6982\u8981\n\u30d8\u30eb\u30b9\u30b1\u30a2\u98a8\u306e\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\n\u5b8c\u6210\u30a4\u30e1\u30fc\u30b8\n\n\n\u8aac\u660e\nUIView\u306edrawRect\u306b\u3066\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3057\u307e\u3059\u3002\n\u2460\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u63cf\u753b\n\u2461X\u5ea7\u6a19/Y\u5ea7\u6a19\u306e\u8a08\u7b97\n\u2462\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u306e\u63cf\u753b\n\u2463\u30d7\u30ed\u30c3\u30c8\u306e\u63cf\u753b\n\u2464\u6a2a\u8ef8(\u4e0a/\u771f\u3093\u4e2d/\u4e0b\uff09\u306e\u63cf\u753b\n\n\u53c2\u8003\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\nGraphView.swift\nimport UIKit\n\n@IBDesignable class GraphView: UIView {\n\n    @IBInspectable var startColor: UIColor = UIColor.redColor()\n    @IBInspectable var endColor: UIColor = UIColor.greenColor()\n\n    // \u30c0\u30df\u30fc\u30c7\u30fc\u30bf\n    var graphPoints:[Int] = [4, 2, 6, 4, 5, 8, 3]\n\n    // \u30b0\u30e9\u30d5\u306e\u30d7\u30ed\u30c3\u30c8\u30c7\u30fc\u30bf\u8a2d\u5b9a\u7528\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n    func setupPoints(points: [Int]) {\n        graphPoints = points\n        self.setNeedsDisplay()\n    }\n\n    override func drawRect(rect: CGRect) {\n\n        // \u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u63cf\u753b\n        let width = rect.width\n        let height = rect.height\n\n        let path = UIBezierPath(roundedRect: rect,\n                                byRoundingCorners: UIRectCorner.AllCorners,\n                                cornerRadii: CGSize(width: 8.0, height: 8.0))\n        path.addClip()\n\n        let context = UIGraphicsGetCurrentContext()\n        let colors = [startColor.CGColor, endColor.CGColor]\n        let colorSpace = CGColorSpaceCreateDeviceRGB()\n        let colorLocations:[CGFloat] = [0.0, 1.0]\n        let gradient = CGGradientCreateWithColors(colorSpace,\n                                                  colors,\n                                                  colorLocations)\n        var startPoint = CGPoint.zero\n        var endPoint = CGPoint(x:0, y:self.bounds.height)\n        CGContextDrawLinearGradient(context,\n                                    gradient,\n                                    startPoint,\n                                    endPoint,\n                                    .DrawsBeforeStartLocation)\n\n\n        // X\u5ea7\u6a19\u306e\u8a08\u7b97\n        let margin:CGFloat = 20.0\n        let columnXPoint = { (column:Int) -> CGFloat in\n\n            let spacer = (width - margin*2 - 4) /\n                CGFloat((self.graphPoints.count - 1))\n            var x:CGFloat = CGFloat(column) * spacer\n            x += margin + 2\n            return x\n        }\n\n        // Y\u5ea7\u6a19\u306e\u8a08\u7b97\n        let topBorder:CGFloat = 60\n        let bottomBorder:CGFloat = 50\n        let graphHeight = height - topBorder - bottomBorder\n        let maxValue = graphPoints.maxElement() ?? 1\n        let columnYPoint = { (graphPoint:Int) -> CGFloat in\n\n            var y:CGFloat = CGFloat(graphPoint) / CGFloat(maxValue) * graphHeight\n            y = graphHeight + topBorder - y\n            return y\n        }\n\n        // \u6298\u308c\u7dda\u30b0\u30e9\u30d5\u306e\u63cf\u753b\n        UIColor.whiteColor().setFill()\n        UIColor.whiteColor().setStroke()\n\n        let graphPath = UIBezierPath()\n\n        graphPath.moveToPoint(CGPoint(x:columnXPoint(0),\n            y:columnYPoint(graphPoints[0])))\n\n        for i in 1..<graphPoints.count {\n            let nextPoint = CGPoint(x:columnXPoint(i),\n                                    y:columnYPoint(graphPoints[i]))\n            graphPath.addLineToPoint(nextPoint)\n        }\n\n        graphPath.stroke()\n\n        // \u9ad8\u3055\u306e\u8abf\u6574\n        let highestYPoint = columnYPoint(maxValue)\n        startPoint = CGPoint(x:margin, y: highestYPoint)\n        endPoint = CGPoint(x:margin, y:self.bounds.height)\n\n        CGContextDrawLinearGradient(context,\n                                    gradient,\n                                    startPoint,\n                                    endPoint,\n                                    .DrawsBeforeStartLocation)\n\n        graphPath.lineWidth = 2.0\n        graphPath.stroke()\n\n        // \u30d7\u30ed\u30c3\u30c8\u306e\u63cf\u753b\n        for i in 0..<graphPoints.count {\n            var point = CGPoint(x:columnXPoint(i), y:columnYPoint(graphPoints[i]))\n            point.x -= 5.0/2\n            point.y -= 5.0/2\n\n            let circle = UIBezierPath(ovalInRect:\n                CGRect(origin: point,\n                    size: CGSize(width: 5.0, height: 5.0)))\n\n            circle.fill()\n        }\n\n        let linePath = UIBezierPath()\n\n        // \u4e0a\u306e\u30e9\u30a4\u30f3\u306e\u63cf\u753b\n        linePath.moveToPoint(CGPoint(x:margin, y: topBorder))\n        linePath.addLineToPoint(CGPoint(x: width - margin,\n            y:topBorder))\n\n\n        // \u4e2d\u592e\u306e\u30e9\u30a4\u30f3\u306e\u63cf\u753b\n        linePath.moveToPoint(CGPoint(x:margin,\n            y: graphHeight/2 + topBorder))\n        linePath.addLineToPoint(CGPoint(x:width - margin,\n            y:graphHeight/2 + topBorder))\n\n\n        // \u4e0b\u306e\u30e9\u30a4\u30f3\u306e\u63cf\u753b\n        linePath.moveToPoint(CGPoint(x:margin,\n            y:height - bottomBorder))\n        linePath.addLineToPoint(CGPoint(x:width - margin,\n            y:height - bottomBorder))\n        let color = UIColor(white: 1.0, alpha: 0.3)\n        color.setStroke()\n\n        linePath.lineWidth = 1.0\n        linePath.stroke()\n    }\n}\n\n\n\n\u5b9f\u88c5\u306e\u4ed5\u65b9\n\u2460 Storyboard\u306bUIView\u3092\u914d\u7f6e\u3057\u3001Custom Class\u306bGraphView\u3092\u6307\u5b9a\u3059\u308b\u3002\n\u2461 Graph View\u306eStart Color\u3068End Color\u3092\u6307\u5b9a\u3059\u308b\u3002\n\n\u672c\u30b5\u30f3\u30d7\u30eb\u306f\u3001\u4e0b\u8a18\u306e\u30ab\u30e9\u30fc\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\n\u3000 Start Color RGB(140,204,217)\n\u3000 End Color   RGB(112 131 194)\n\n\n\n\u2462 ViewController\u306bOutlet\u3092\u8a2d\u7f6e\u3059\u308b\n\nViewController.swift\nimport UIKit\n\nclass ViewController: UIViewController {\n\n    @IBOutlet weak var graphView: GraphView!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()        \n        graphView.setupPoints([1,3,5,2,6,5,4])\n    }\n}\n\n\n\n\u5fa1\u793c\nRay Wenderlich\u793e\u306e\u30b5\u30a4\u30c8\u3092\u5199\u7d4c\u3055\u305b\u3066\u9802\u304d\u307e\u3057\u305f\u3002\n\n2016/12/3\nSwift3\u5bfe\u5fdc\u3057\u307e\u3057\u305f\u3002\nGithub\u3092\u5fa1\u89a7\u304f\u3060\u3055\u3044\n# \u6982\u8981\n\u30d8\u30eb\u30b9\u30b1\u30a2\u98a8\u306e\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\n# \u5b8c\u6210\u30a4\u30e1\u30fc\u30b8\n<img width=\"233\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-07-17 14.29.25.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/71694/ba7b6231-b062-a4ca-28dc-cbf4f4f03878.png\">\n\n# \u8aac\u660e\nUIView\u306edrawRect\u306b\u3066\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3057\u307e\u3059\u3002\n\n\u2460\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u63cf\u753b\n\u2461X\u5ea7\u6a19/Y\u5ea7\u6a19\u306e\u8a08\u7b97\n\u2462\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u306e\u63cf\u753b\n\u2463\u30d7\u30ed\u30c3\u30c8\u306e\u63cf\u753b\n\u2464\u6a2a\u8ef8(\u4e0a/\u771f\u3093\u4e2d/\u4e0b\uff09\u306e\u63cf\u753b\n\n# \u53c2\u8003\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n```:GraphView.swift\nimport UIKit\n\n@IBDesignable class GraphView: UIView {\n    \n    @IBInspectable var startColor: UIColor = UIColor.redColor()\n    @IBInspectable var endColor: UIColor = UIColor.greenColor()\n    \n    // \u30c0\u30df\u30fc\u30c7\u30fc\u30bf\n    var graphPoints:[Int] = [4, 2, 6, 4, 5, 8, 3]\n    \n    // \u30b0\u30e9\u30d5\u306e\u30d7\u30ed\u30c3\u30c8\u30c7\u30fc\u30bf\u8a2d\u5b9a\u7528\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n    func setupPoints(points: [Int]) {\n        graphPoints = points\n        self.setNeedsDisplay()\n    }\n    \n    override func drawRect(rect: CGRect) {\n\n        // \u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u63cf\u753b\n        let width = rect.width\n        let height = rect.height\n\n        let path = UIBezierPath(roundedRect: rect,\n                                byRoundingCorners: UIRectCorner.AllCorners,\n                                cornerRadii: CGSize(width: 8.0, height: 8.0))\n        path.addClip()\n        \n        let context = UIGraphicsGetCurrentContext()\n        let colors = [startColor.CGColor, endColor.CGColor]\n        let colorSpace = CGColorSpaceCreateDeviceRGB()\n        let colorLocations:[CGFloat] = [0.0, 1.0]\n        let gradient = CGGradientCreateWithColors(colorSpace,\n                                                  colors,\n                                                  colorLocations)\n        var startPoint = CGPoint.zero\n        var endPoint = CGPoint(x:0, y:self.bounds.height)\n        CGContextDrawLinearGradient(context,\n                                    gradient,\n                                    startPoint,\n                                    endPoint,\n                                    .DrawsBeforeStartLocation)\n\n        \n        // X\u5ea7\u6a19\u306e\u8a08\u7b97\n        let margin:CGFloat = 20.0\n        let columnXPoint = { (column:Int) -> CGFloat in\n\n            let spacer = (width - margin*2 - 4) /\n                CGFloat((self.graphPoints.count - 1))\n            var x:CGFloat = CGFloat(column) * spacer\n            x += margin + 2\n            return x\n        }\n        \n        // Y\u5ea7\u6a19\u306e\u8a08\u7b97\n        let topBorder:CGFloat = 60\n        let bottomBorder:CGFloat = 50\n        let graphHeight = height - topBorder - bottomBorder\n        let maxValue = graphPoints.maxElement() ?? 1\n        let columnYPoint = { (graphPoint:Int) -> CGFloat in\n            \n            var y:CGFloat = CGFloat(graphPoint) / CGFloat(maxValue) * graphHeight\n            y = graphHeight + topBorder - y\n            return y\n        }\n        \n        // \u6298\u308c\u7dda\u30b0\u30e9\u30d5\u306e\u63cf\u753b\n        UIColor.whiteColor().setFill()\n        UIColor.whiteColor().setStroke()\n        \n        let graphPath = UIBezierPath()\n\n        graphPath.moveToPoint(CGPoint(x:columnXPoint(0),\n            y:columnYPoint(graphPoints[0])))\n        \n        for i in 1..<graphPoints.count {\n            let nextPoint = CGPoint(x:columnXPoint(i),\n                                    y:columnYPoint(graphPoints[i]))\n            graphPath.addLineToPoint(nextPoint)\n        }\n        \n        graphPath.stroke()\n        \n        // \u9ad8\u3055\u306e\u8abf\u6574\n        let highestYPoint = columnYPoint(maxValue)\n        startPoint = CGPoint(x:margin, y: highestYPoint)\n        endPoint = CGPoint(x:margin, y:self.bounds.height)\n        \n        CGContextDrawLinearGradient(context,\n                                    gradient,\n                                    startPoint,\n                                    endPoint,\n                                    .DrawsBeforeStartLocation)\n        \n        graphPath.lineWidth = 2.0\n        graphPath.stroke()\n        \n        // \u30d7\u30ed\u30c3\u30c8\u306e\u63cf\u753b\n        for i in 0..<graphPoints.count {\n            var point = CGPoint(x:columnXPoint(i), y:columnYPoint(graphPoints[i]))\n            point.x -= 5.0/2\n            point.y -= 5.0/2\n            \n            let circle = UIBezierPath(ovalInRect:\n                CGRect(origin: point,\n                    size: CGSize(width: 5.0, height: 5.0)))\n            \n            circle.fill()\n        }\n        \n        let linePath = UIBezierPath()\n        \n        // \u4e0a\u306e\u30e9\u30a4\u30f3\u306e\u63cf\u753b\n        linePath.moveToPoint(CGPoint(x:margin, y: topBorder))\n        linePath.addLineToPoint(CGPoint(x: width - margin,\n            y:topBorder))\n        \n        \n        // \u4e2d\u592e\u306e\u30e9\u30a4\u30f3\u306e\u63cf\u753b\n        linePath.moveToPoint(CGPoint(x:margin,\n            y: graphHeight/2 + topBorder))\n        linePath.addLineToPoint(CGPoint(x:width - margin,\n            y:graphHeight/2 + topBorder))\n        \n        \n        // \u4e0b\u306e\u30e9\u30a4\u30f3\u306e\u63cf\u753b\n        linePath.moveToPoint(CGPoint(x:margin,\n            y:height - bottomBorder))\n        linePath.addLineToPoint(CGPoint(x:width - margin,\n            y:height - bottomBorder))\n        let color = UIColor(white: 1.0, alpha: 0.3)\n        color.setStroke()\n        \n        linePath.lineWidth = 1.0\n        linePath.stroke()\n    }\n}\n```\n# \u5b9f\u88c5\u306e\u4ed5\u65b9\n\u2460 Storyboard\u306bUIView\u3092\u914d\u7f6e\u3057\u3001Custom Class\u306bGraphView\u3092\u6307\u5b9a\u3059\u308b\u3002\n\u2461 Graph View\u306eStart Color\u3068End Color\u3092\u6307\u5b9a\u3059\u308b\u3002\n\n```:\u672c\u30b5\u30f3\u30d7\u30eb\u306f\u3001\u4e0b\u8a18\u306e\u30ab\u30e9\u30fc\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\n\u3000 Start Color RGB(140,204,217)\n\u3000 End Color   RGB(112 131 194)\n```\n\n<img width=\"659\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-07-17 14.37.26.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/71694/66b8b9c2-20a0-f744-e825-cff239f722c5.png\">\n\n\u2462 ViewController\u306bOutlet\u3092\u8a2d\u7f6e\u3059\u308b\n\n```:ViewController.swift\nimport UIKit\n\nclass ViewController: UIViewController {\n\n    @IBOutlet weak var graphView: GraphView!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()        \n        graphView.setupPoints([1,3,5,2,6,5,4])\n    }\n}\n```\n\n# \u5fa1\u793c\nRay Wenderlich\u793e\u306e\u30b5\u30a4\u30c8\u3092\u5199\u7d4c\u3055\u305b\u3066\u9802\u304d\u307e\u3057\u305f\u3002\n\n#### 2016/12/3\nSwift3\u5bfe\u5fdc\u3057\u307e\u3057\u305f\u3002\n[Github](https://github.com/stv-ekushida/ios-graph-ui)\u3092\u5fa1\u89a7\u304f\u3060\u3055\u3044\n\n", "tags": ["iOS", "Swift", "\u30b0\u30e9\u30d5"]}