{"context": " More than 1 year has passed since last update.\uff08\u305f\u3060\u3044\u307e\u7de8\u96c6\u4e2d\u3002\uff09\n\n\u4ee5\u524d\uff08Version1.X\uff09\u307e\u3067\n\n\u518d\u5e30\u7684\u306b\u30ea\u30c8\u30e9\u30a4\u3055\u308c\u308b\nset_max_retries\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u3067\u30ea\u30c8\u30e9\u30a4\u56de\u6570\u3092\u8a2d\u5b9a\u3067\u304d\u308b\nhttp://docs.aws.amazon.com/AWSSDKforPHP/latest/index.html#m=CFRuntime/set_max_retries\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306f3\u56de\n\u30ec\u30b9\u30dd\u30f3\u30b9\u30b3\u30fc\u30c9\u304c500 \u3082\u3057\u304f\u306f503\u306e\u5834\u5408\u30ea\u30c8\u30e9\u30a4\u3059\u308b\n\u30ea\u30c8\u30e9\u30a4\u306e\u9045\u5ef6\u306f0.4\u79d2\u306e\u7d2f\u4e57(pow\u95a2\u6570)\u3054\u3068\u306b\u9577\u304f\u306a\u3063\u3066\u3044\u304f\u30020.4\u79d2 -->1.6 --> 6.4....\n\u305d\u308c\u4ee5\u5916\u306ecurl\u306e\u4f8b\u5916\u306a\u3069\u304c\u8d77\u3053\u3063\u3066\u3082Exception\u304ctrow\u3055\u308c\u308b\u3060\u3051\u3067\u30ea\u30c8\u30e9\u30a4\u3055\u308c\u308b\u308f\u3051\u3067\u306f\u306a\u3044\n\n// Was it Amazon's fault the request failed? Retry the request until we reach $max_retries.\nelseif ((integer) $request->get_response_code() === 500 || (integer) $request->get_response_code() === 503)\n{\n    if ($this->redirects <= $this->max_retries)\n    {\n        // Exponential backoff\n        $delay = (integer) (pow(4, $this->redirects) * 100000);\n        usleep($delay);\n        $this->redirects++;\n        $data = $this->authenticate($bucket, $opt);\n    }\n}\n\n\nSDK2\u4ee5\u964d\u306f\u3053\u3046\u306a\u308b\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\n\n$backoff = new BackoffPlugin(\n// Retry failed requests up to 3 times if it is determined that the request can be retried\n    new TruncatedBackoffStrategy(3,\n        // Retry failed requests with 400-level responses due to throttling\n        new ThrottlingErrorChecker($this->exceptionParser,\n            // Retry failed requests with 500-level responses\n            new HttpBackoffStrategy(array(500, 503, 509),\n                // Retry failed requests due to transient network or cURL problems\n                new CurlBackoffStrategy(null,\n                    // Retry requests that failed due to expired credentials\n                    new ExpiredCredentialsChecker($this->exceptionParser,\n                        new ExponentialBackoffStrategy()\n                    )\n                )\n            )\n        )\n    )\n);\n\n\n\u4f8b\u3048\u3070S3\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3060\u3068\n\n\nS3Client.php\n// Configure the custom exponential backoff plugin for retrying S3 specific errors\nif (!isset($config[Options::BACKOFF])) {\n    $config[Options::BACKOFF] = new BackoffPlugin(\n        new TruncatedBackoffStrategy(3,\n            new HttpBackoffStrategy(null,\n                new SocketTimeoutChecker(\n                    new CurlBackoffStrategy(null,\n                        new ExpiredCredentialsChecker($exceptionParser,\n                            new ExponentialBackoffStrategy()\n                        )\n                    )\n                )\n            )\n        )\n    );\n}\n\n\n\nBackoffPlugin\u3067\u6307\u5b9a\u3059\u308b\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30ea\u30c8\u30e9\u30a4\u56de\u6570\u306f3\u56de\nV1\u3067\u898b\u3066\u306a\u304b\u3063\u305f\u8a8d\u8a3c\u306e\u3068\u3053\u308d\u304b\u3089Curl \u306e\u30a8\u30e9\u30fc\u307e\u3067\u542b\u3081\u305f\u30ea\u30c8\u30e9\u30a4\u3092\u884c\u3046\u3088\u3046\u3067\u3059\n\n\nBackoffPlugin\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067BackoffStrategyInterface\u3092\u7d99\u627f\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30bb\u30c3\u30c8\n\nTruncatedBackoffStrategy\n\n\nBackoffPlugin.php\n    /**\n     * Called when a request has been sent  and isn't finished processing\n     *\n     * @param Event $event\n     */\n    public function onRequestSent(Event $event)\n    {\n        $request = $event['request'];\n        $response = $event['response'];\n        $exception = $event['exception'];\n\n        $params = $request->getParams();\n        $retries = (int) $params->get(self::RETRY_PARAM);\n        $delay = $this->strategy->getBackoffPeriod($retries, $request, $response, $exception);\n\n        if ($delay !== false) {\n            // Calculate how long to wait until the request should be retried\n            $params->set(self::RETRY_PARAM, ++$retries)\n                ->set(self::DELAY_PARAM, microtime(true) + $delay);\n            // Send the request again\n            $request->setState(RequestInterface::STATE_TRANSFER);\n            $this->dispatch(self::RETRY_EVENT, array(\n                'request'  => $request,\n                'response' => $response,\n                'handle'   => $exception ? $exception->getCurlHandle() : null,\n                'retries'  => $retries,\n                'delay'    => $delay\n            ));\n        }\n    }\n\n\n\u3053\u306e\u90e8\u5206\u3067\u9045\u5ef6\u3059\u308b\u79d2\u6570\u3092\u8abf\u6574\u3057\u3066\u3044\u308b\n// Calculate how long to wait until the request should be retried\n$params->set(self::RETRY_PARAM, ++$retries)\n    ->set(self::DELAY_PARAM, microtime(true) + $delay);\n\n\nBackoffPlugin.php\n    /**\n     * Called when a request is polling in the curl multi object\n     *\n     * @param Event $event\n     */\n    public function onRequestPoll(Event $event)\n    {\n        $request = $event['request'];\n        $delay = $request->getParams()->get(self::DELAY_PARAM);\n\n        // If the duration of the delay has passed, retry the request using the pool\n        if (null !== $delay && microtime(true) >= $delay) {\n            // Remove the request from the pool and then add it back again. This is required for cURL to know that we\n            // want to retry sending the easy handle.\n            $request->getParams()->remove(self::DELAY_PARAM);\n            // Rewind the request body if possible\n            if ($request instanceof EntityEnclosingRequestInterface && $request->getBody()) {\n                $request->getBody()->seek(0);\n            }\n            $multi = $event['curl_multi'];\n            $multi->remove($request);\n            $multi->add($request);\n        }\n    }\n\n\n\u3053\u3053\u3067\u3001\u5148\u307b\u3069dispatch\u3067\u8a2d\u5b9a\u3055\u308c\u305fDELAY_PARAM\u304c\u3001\u73fe\u5728\u6642\u523b\u3068\u304f\u3089\u3079\u3066\u5927\u304d\u3044\u304b\u3069\u3046\u304b\u5224\u5b9a\u3057\u3066\u5927\u304d\u3051\u308c\u3070\u5b9f\u884c\u3055\u308c\u308b\u3002\nif (null !== $delay && microtime(true) >= $delay) {\n\n\nBackoffPlugin\n$strategy\u3092\u767b\u9332\u3059\u308b\nonRequestSent\u304c\u547c\u3070\u308cr\u308b\n\u767b\u9332\u3057\u305fgetBackoffPeriod\u3067\u30ea\u30c8\u30e9\u30a4\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\u30ea\u30c8\u30e9\u30a4\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u306ffalse\u4ee5\u5916\u304c\u8fd4\u5374\u3055\u308c\u308b\u3002\nfalse\u4ee5\u5916\u306e\u8fd4\u5374\u3055\u308c\u305f\u5024\u79d2\u6570\u3092delay\u3059\u308b\ntrue\u304c\u8fd4\u3063\u3066\u304f\u308b\u30681\u79d2\u5f8c\u3068\u3044\u3046\u610f\u5473\n// Calculate how long to wait until the request should be retried\n$params->set(self::RETRY_PARAM, ++$retries)\n    ->set(self::DELAY_PARAM, microtime(true) + $delay);\n\n\u30ea\u30c8\u30e9\u30a4\u6570\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u3001\u73fe\u5728\u6642\u523b\u304b\u3089\u4f55\u79d2\u5f8c\u306b\u307e\u305f\u30ea\u30c8\u30e9\u30a4\u3059\u308b\u304b$delay\u79d2\u5206\u9045\u5ef6\u3055\u305b\u308b\nTruncatedBackoffStrategy\n\u304c\u30ea\u30c8\u30e9\u30a4\u56de\u65703\nnext\u306bHttpBackoffStrategy\u3092set\n\u30ea\u30c8\u30e9\u30a4\u56de\u6570\u304cmax\u3092\u8d85\u3048\u305f\u3089null\u3092\u8fd4\u3059\nHttpBackoffStrategy\n\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\u306e\u6307\u5b9a\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u307f\ngetDelay\u306f\n\u901a\u4fe1\u306b\u6210\u529f\uff08$response->isSuccessful()\uff09\u3057\u3066\u3044\u305f\u3089false\u3092\u8fd4\u3059\n\u5931\u6557\u3057\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9500, 503\u306e\u5834\u5408\u306ftrue, \u305d\u308c\u4ee5\u5916\u306fnull\u3092\u8fd4\u3059\nnext\u306bSocketTimeoutChecker\nSocketTimeoutChecker\nnext\u306bCurlBackoffStrategy\u3092\u30bb\u30c3\u30c8\ngetDelay\u306f\u3001\n\u901a\u4fe1\u306b\u6210\u529f\u3057\u305f\u304c400\u306e\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\u3067\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3057\u3066\u3044\u305f\u5834\u5408\n\u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u3066\u3044\u305f\u5834\u5408\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u30af\u30ea\u30a2\u3002true\u3092\u8fd4\u3059\nCurlBackoffStrategy\nnull\u306a\u306e\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\nnext\u306bExpiredCredentialsChecker\ngetDelay\u3067\u306fcurl\u306e\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\u3092Catch\u3057\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3002\u5b58\u5728\u3057\u305f\u3089true\u3001\u306a\u3051\u308c\u3070null\nExpiredCredentialsChecker\n$exceptionParser\u306bS3ExceptionParser\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\nnext\u306bExponentialBackoffStrategy\ngetDelay\u3067\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u30a8\u30e9\u30fc\u304b\u3069\u3046\u304b\uff08\u8a8d\u8a3c\u307e\u308f\u308a\uff09\u3092\u30c1\u30a7\u30c3\u30af\n\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u30a8\u30e9\u30fc\u304c\u542b\u307e\u308c\u308b\u5834\u5408\u3001null\u3092\u8fd4\u3057\u3066\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u304c\u5fc5\u8981\n0\u3092\u8fd4\u5374\u3057\u3066\u3059\u3050\u30ea\u30c8\u30e9\u30a4\uff08Retry immediately with no delay\uff09\nExponentialBackoffStrategy\nnext\uff1a\u306a\u3057\ngetDelay\uff1apow(2, $retries)\u3092\u8fd4\u3059\u306e\u307f\u3002\n\n\u4ee5\u4e0b\u306e3\u3064\u306e\u95a2\u6570\u306f\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\uff09\u6210\u529f\u3059\u308b\u307e\u30673\u79d2\u9593\u9694\u306725\u56de\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u3059\u308b\n\nwaitUntilObjectExists\nwaitUntilBucketExists\nwaitUntilBucketNotExists\n\nhttp://docs.aws.amazon.com/aws-sdk-php/latest/class-Aws.S3.S3Client.html#_waitUntilObjectExists\n\n\uff08\u305f\u3060\u3044\u307e\u7de8\u96c6\u4e2d\u3002\uff09\n\n##\u4ee5\u524d\uff08Version1.X\uff09\u307e\u3067\n\n- \u518d\u5e30\u7684\u306b\u30ea\u30c8\u30e9\u30a4\u3055\u308c\u308b\n- set_max_retries\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u3067\u30ea\u30c8\u30e9\u30a4\u56de\u6570\u3092\u8a2d\u5b9a\u3067\u304d\u308b\nhttp://docs.aws.amazon.com/AWSSDKforPHP/latest/index.html#m=CFRuntime/set_max_retries\n- \u30c7\u30d5\u30a9\u30eb\u30c8\u306f3\u56de\n- \u30ec\u30b9\u30dd\u30f3\u30b9\u30b3\u30fc\u30c9\u304c500 \u3082\u3057\u304f\u306f503\u306e\u5834\u5408\u30ea\u30c8\u30e9\u30a4\u3059\u308b\n- \u30ea\u30c8\u30e9\u30a4\u306e\u9045\u5ef6\u306f0.4\u79d2\u306e\u7d2f\u4e57(pow\u95a2\u6570)\u3054\u3068\u306b\u9577\u304f\u306a\u3063\u3066\u3044\u304f\u30020.4\u79d2 -->1.6 --> 6.4....\n- \u305d\u308c\u4ee5\u5916\u306ecurl\u306e\u4f8b\u5916\u306a\u3069\u304c\u8d77\u3053\u3063\u3066\u3082Exception\u304ctrow\u3055\u308c\u308b\u3060\u3051\u3067\u30ea\u30c8\u30e9\u30a4\u3055\u308c\u308b\u308f\u3051\u3067\u306f\u306a\u3044\n\n```php\n// Was it Amazon's fault the request failed? Retry the request until we reach $max_retries.\nelseif ((integer) $request->get_response_code() === 500 || (integer) $request->get_response_code() === 503)\n{\n    if ($this->redirects <= $this->max_retries)\n    {\n        // Exponential backoff\n        $delay = (integer) (pow(4, $this->redirects) * 100000);\n        usleep($delay);\n        $this->redirects++;\n        $data = $this->authenticate($bucket, $opt);\n    }\n}\n```\n\n##SDK2\u4ee5\u964d\u306f\u3053\u3046\u306a\u308b\n\n- \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\n\n```php\n$backoff = new BackoffPlugin(\n// Retry failed requests up to 3 times if it is determined that the request can be retried\n    new TruncatedBackoffStrategy(3,\n        // Retry failed requests with 400-level responses due to throttling\n        new ThrottlingErrorChecker($this->exceptionParser,\n            // Retry failed requests with 500-level responses\n            new HttpBackoffStrategy(array(500, 503, 509),\n                // Retry failed requests due to transient network or cURL problems\n                new CurlBackoffStrategy(null,\n                    // Retry requests that failed due to expired credentials\n                    new ExpiredCredentialsChecker($this->exceptionParser,\n                        new ExponentialBackoffStrategy()\n                    )\n                )\n            )\n        )\n    )\n);\n```\n\n- \u4f8b\u3048\u3070S3\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3060\u3068\n\n```php:S3Client.php\n// Configure the custom exponential backoff plugin for retrying S3 specific errors\nif (!isset($config[Options::BACKOFF])) {\n    $config[Options::BACKOFF] = new BackoffPlugin(\n        new TruncatedBackoffStrategy(3,\n            new HttpBackoffStrategy(null,\n                new SocketTimeoutChecker(\n                    new CurlBackoffStrategy(null,\n                        new ExpiredCredentialsChecker($exceptionParser,\n                            new ExponentialBackoffStrategy()\n                        )\n                    )\n                )\n            )\n        )\n    );\n}\n```\n\n- BackoffPlugin\u3067\u6307\u5b9a\u3059\u308b\n- \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30ea\u30c8\u30e9\u30a4\u56de\u6570\u306f3\u56de\n- V1\u3067\u898b\u3066\u306a\u304b\u3063\u305f\u8a8d\u8a3c\u306e\u3068\u3053\u308d\u304b\u3089Curl \u306e\u30a8\u30e9\u30fc\u307e\u3067\u542b\u3081\u305f\u30ea\u30c8\u30e9\u30a4\u3092\u884c\u3046\u3088\u3046\u3067\u3059\n\n\n\n##BackoffPlugin\n\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067BackoffStrategyInterface\u3092\u7d99\u627f\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30bb\u30c3\u30c8\n\n- TruncatedBackoffStrategy\n\n\n```php:BackoffPlugin.php\n    /**\n     * Called when a request has been sent  and isn't finished processing\n     *\n     * @param Event $event\n     */\n    public function onRequestSent(Event $event)\n    {\n        $request = $event['request'];\n        $response = $event['response'];\n        $exception = $event['exception'];\n\n        $params = $request->getParams();\n        $retries = (int) $params->get(self::RETRY_PARAM);\n        $delay = $this->strategy->getBackoffPeriod($retries, $request, $response, $exception);\n\n        if ($delay !== false) {\n            // Calculate how long to wait until the request should be retried\n            $params->set(self::RETRY_PARAM, ++$retries)\n                ->set(self::DELAY_PARAM, microtime(true) + $delay);\n            // Send the request again\n            $request->setState(RequestInterface::STATE_TRANSFER);\n            $this->dispatch(self::RETRY_EVENT, array(\n                'request'  => $request,\n                'response' => $response,\n                'handle'   => $exception ? $exception->getCurlHandle() : null,\n                'retries'  => $retries,\n                'delay'    => $delay\n            ));\n        }\n    }\n```\n\n\u3053\u306e\u90e8\u5206\u3067\u9045\u5ef6\u3059\u308b\u79d2\u6570\u3092\u8abf\u6574\u3057\u3066\u3044\u308b\n\n```php\n// Calculate how long to wait until the request should be retried\n$params->set(self::RETRY_PARAM, ++$retries)\n\t->set(self::DELAY_PARAM, microtime(true) + $delay);\n```\n\n\n\n```php:BackoffPlugin.php\n    /**\n     * Called when a request is polling in the curl multi object\n     *\n     * @param Event $event\n     */\n    public function onRequestPoll(Event $event)\n    {\n        $request = $event['request'];\n        $delay = $request->getParams()->get(self::DELAY_PARAM);\n\n        // If the duration of the delay has passed, retry the request using the pool\n        if (null !== $delay && microtime(true) >= $delay) {\n            // Remove the request from the pool and then add it back again. This is required for cURL to know that we\n            // want to retry sending the easy handle.\n            $request->getParams()->remove(self::DELAY_PARAM);\n            // Rewind the request body if possible\n            if ($request instanceof EntityEnclosingRequestInterface && $request->getBody()) {\n                $request->getBody()->seek(0);\n            }\n            $multi = $event['curl_multi'];\n            $multi->remove($request);\n            $multi->add($request);\n        }\n    }\n```\n\n\u3053\u3053\u3067\u3001\u5148\u307b\u3069dispatch\u3067\u8a2d\u5b9a\u3055\u308c\u305fDELAY_PARAM\u304c\u3001\u73fe\u5728\u6642\u523b\u3068\u304f\u3089\u3079\u3066\u5927\u304d\u3044\u304b\u3069\u3046\u304b\u5224\u5b9a\u3057\u3066\u5927\u304d\u3051\u308c\u3070\u5b9f\u884c\u3055\u308c\u308b\u3002\n\n```\nif (null !== $delay && microtime(true) >= $delay) {\n```\n\n-----\n\n\n\nBackoffPlugin\n$strategy\u3092\u767b\u9332\u3059\u308b\nonRequestSent\u304c\u547c\u3070\u308cr\u308b\n\u767b\u9332\u3057\u305fgetBackoffPeriod\u3067\u30ea\u30c8\u30e9\u30a4\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\u30ea\u30c8\u30e9\u30a4\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u306ffalse\u4ee5\u5916\u304c\u8fd4\u5374\u3055\u308c\u308b\u3002\nfalse\u4ee5\u5916\u306e\u8fd4\u5374\u3055\u308c\u305f\u5024\u79d2\u6570\u3092delay\u3059\u308b\ntrue\u304c\u8fd4\u3063\u3066\u304f\u308b\u30681\u79d2\u5f8c\u3068\u3044\u3046\u610f\u5473\n\n```\n// Calculate how long to wait until the request should be retried\n$params->set(self::RETRY_PARAM, ++$retries)\n\t->set(self::DELAY_PARAM, microtime(true) + $delay);\n```\n\n\u30ea\u30c8\u30e9\u30a4\u6570\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u3001\u73fe\u5728\u6642\u523b\u304b\u3089\u4f55\u79d2\u5f8c\u306b\u307e\u305f\u30ea\u30c8\u30e9\u30a4\u3059\u308b\u304b$delay\u79d2\u5206\u9045\u5ef6\u3055\u305b\u308b\n\n\nTruncatedBackoffStrategy\n\u304c\u30ea\u30c8\u30e9\u30a4\u56de\u65703\nnext\u306bHttpBackoffStrategy\u3092set\n\u30ea\u30c8\u30e9\u30a4\u56de\u6570\u304cmax\u3092\u8d85\u3048\u305f\u3089null\u3092\u8fd4\u3059\n\nHttpBackoffStrategy\n\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\u306e\u6307\u5b9a\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u307f\ngetDelay\u306f\n\u901a\u4fe1\u306b\u6210\u529f\uff08$response->isSuccessful()\uff09\u3057\u3066\u3044\u305f\u3089false\u3092\u8fd4\u3059\n\u5931\u6557\u3057\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9500, 503\u306e\u5834\u5408\u306ftrue, \u305d\u308c\u4ee5\u5916\u306fnull\u3092\u8fd4\u3059\nnext\u306bSocketTimeoutChecker\n\nSocketTimeoutChecker\nnext\u306bCurlBackoffStrategy\u3092\u30bb\u30c3\u30c8\ngetDelay\u306f\u3001\n\u901a\u4fe1\u306b\u6210\u529f\u3057\u305f\u304c400\u306e\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\u3067\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3057\u3066\u3044\u305f\u5834\u5408\n\u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u3066\u3044\u305f\u5834\u5408\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u30af\u30ea\u30a2\u3002true\u3092\u8fd4\u3059\n\nCurlBackoffStrategy\nnull\u306a\u306e\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\nnext\u306bExpiredCredentialsChecker\ngetDelay\u3067\u306fcurl\u306e\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\u3092Catch\u3057\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3002\u5b58\u5728\u3057\u305f\u3089true\u3001\u306a\u3051\u308c\u3070null\n\n\nExpiredCredentialsChecker\n$exceptionParser\u306bS3ExceptionParser\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\nnext\u306bExponentialBackoffStrategy\ngetDelay\u3067\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u30a8\u30e9\u30fc\u304b\u3069\u3046\u304b\uff08\u8a8d\u8a3c\u307e\u308f\u308a\uff09\u3092\u30c1\u30a7\u30c3\u30af\n\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u30a8\u30e9\u30fc\u304c\u542b\u307e\u308c\u308b\u5834\u5408\u3001null\u3092\u8fd4\u3057\u3066\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u304c\u5fc5\u8981\n0\u3092\u8fd4\u5374\u3057\u3066\u3059\u3050\u30ea\u30c8\u30e9\u30a4\uff08Retry immediately with no delay\uff09\n\nExponentialBackoffStrategy\nnext\uff1a\u306a\u3057\ngetDelay\uff1apow(2, $retries)\u3092\u8fd4\u3059\u306e\u307f\u3002\n\n\n\n\n\n\n----\n\n\u4ee5\u4e0b\u306e3\u3064\u306e\u95a2\u6570\u306f\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\uff09\u6210\u529f\u3059\u308b\u307e\u30673\u79d2\u9593\u9694\u306725\u56de\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u3059\u308b\n\n- waitUntilObjectExists\n- waitUntilBucketExists\n- waitUntilBucketNotExists\n\nhttp://docs.aws.amazon.com/aws-sdk-php/latest/class-Aws.S3.S3Client.html#_waitUntilObjectExists", "tags": ["AWS", "PHP", "SDK2"]}