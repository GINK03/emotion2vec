{"context": " More than 1 year has passed since last update.Capybara\u4fbf\u5229\u3067\u3059\u306d\u3002\n\u3046\u3061\u3067\u306fPoltergeist\u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\nJS\u304c\u3089\u307f\u306eUI\u306e\u30c6\u30b9\u30c8\u3092\u3057\u3066\u3044\u305f\u3068\u304d\u3001JS\u306e\u52d5\u4f5c\u5b8c\u4e86\u3092\u5f85\u3063\u3066\u304f\u308c\u305a\u3001\u30c6\u30b9\u30c8\u304c\u3053\u3051\u308b\u3068\u3044\u3046\u4e8b\u304c\u3042\u3063\u305f\u306e\u3067\u3001JS\u3092\u5f85\u3064\u90e8\u5206\u306e\u52d5\u4f5c\u539f\u7406\u306b\u3064\u3044\u3066\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\nCapybara::Node::Base#syncronize\u306b\u5b9f\u88c5\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\nlib/capybara/node/base.rb\n      def synchronize(seconds=Capybara.default_wait_time)\n        start_time = Time.now\n\n        if session.synchronized\n          yield\n        else\n          session.synchronized = true\n          begin\n            yield\n          rescue => e\n            session.raise_server_error!\n            raise e unless driver.wait?\n            raise e unless catch_error?(e)\n            raise e if (Time.now - start_time) >= seconds\n            sleep(0.05)\n            raise Capybara::FrozenInTime, \"time appears to be frozen, Capybara does not work with libraries which freeze time, consider using time travelling instead\" if Time.now == start_time\n            reload if Capybara.automatic_reload\n            retry\n          ensure\n            session.synchronized = false\n          end\n        end\n      end\n\n\nhttps://github.com/jnicklas/capybara/blob/master/lib/capybara/node/base.rb#L73\nCapybara::Node::Matchers\u3084\u3089Capybara::Node::Finders\u3084\u3089\u306e\u30e1\u30bd\u30c3\u30c9\u304b\u3089\u547c\u3070\u308c\u3066\u3044\u307e\u3059\u3002\n\nlib/capybara/node/finders.rb\n      def find(*args)\n        query = Capybara::Query.new(*args)\n        synchronize(query.wait) do\n          if query.match == :smart or query.match == :prefer_exact\n            result = resolve_query(query, true)\n            result = resolve_query(query, false) if result.size == 0 and not query.exact?\n          else\n            result = resolve_query(query)\n          end\n          if query.match == :one or query.match == :smart and result.size > 1\n            raise Capybara::Ambiguous.new(\"Ambiguous match, found #{result.size} elements matching #{query.description}\")\n          end\n          if result.size == 0\n            raise Capybara::ElementNotFound.new(\"Unable to find #{query.description}\")\n          end\n          result.first\n        end.tap(&:allow_reload!)\n      end\n\n\n\u4f8b\u3048\u3070Capybara::Node::Finders#find\u3067\u306f\u3001\u30ce\u30fc\u30c9\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u5834\u5408\u306bCapybara::ElementNotFound\u304c\u767a\u751f\u3057\u307e\u3059\u304c\u3001\u305d\u308c\u306a\u3089\u898b\u3064\u304b\u308b\u307e\u3067retry\u3059\u308c\u3070\u826f\u3044\u3058\u3083\u306a\u3044\u3001\u3068\u3044\u3046\u767a\u60f3\u3067\u3059\u306d\u3002\n\u5206\u304b\u308a\u3084\u3059\u3044\u3002\nCapybara.default_wait_time\u306fsyncronize\u306b\u304b\u304b\u308b\u6700\u5927\u79d2\u6570\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u5927\u304d\u306a\u5024\u3092\u5165\u308c\u3066\u3082\u4f55\u304b\u30d0\u30b0\u304c\u7121\u3044\u9650\u308a\u30c6\u30b9\u30c8\u306e\u5b9f\u884c\u6642\u9593\u304c\u9577\u304f\u306a\u3063\u305f\u308a\u306f\u3057\u307e\u305b\u3093\u3002\n\u306e\u3067\u3001\u3046\u3061\u3067\u306f10\u79d2\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059(\u30c7\u30d5\u30a9\u30eb\u30c8\u306f2\u79d2)\n\u6614\u306fwait_until\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u3063\u305f\u3088\u3046\u3067\u3059\u304c\u3001Capybara2\u306b\u306a\u3063\u3066\u304b\u3089\u6d88\u3048\u305f\u3088\u3046\u3067\u3059\u3002\nWhy wait_until was removed from Capybara\n\u3061\u306a\u307f\u306b\u3001\u8abf\u3079\u308b\u304d\u3063\u304b\u3051\u306b\u306a\u3063\u305fsyncronize\u3057\u3066\u304f\u308c\u306a\u3044\u4ef6\u3067\u3059\u304c\u3001example\u306bjs: true\u304c\u4ed8\u3044\u3066\u306a\u304b\u3063\u305f\u305b\u3044\u3067\u3057\u305f\uff0f(^o^)\uff3c\njs: true\u3057\u306a\u3044\u3068driver\u304cPoltergeist\u306b\u306a\u3089\u305a\u3001Capybara::Driver::Node\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002\nJS\u3082\u5b9f\u884c\u3055\u308c\u307e\u305b\u3093\u3002(\u3061\u3083\u3093\u3068\u8aad\u3093\u3067\u306a\u3044\u3051\u3069\u304a\u305d\u3089\u304f#execute_script\u306b\u5b9f\u88c5\u304c\u5fc5\u8981)\n#syncronize\u3067\u306fdriver.wait?\u304cfalse\u3092\u8fd4\u3059\u306e\u3067\u3001rescue\u30d6\u30ed\u30c3\u30af\u306f\u5358\u306b\u4f8b\u5916\u3092\u6295\u3052\u76f4\u3057\u307e\u3059\u3002\n[Capybara](https://github.com/jnicklas/capybara/)\u4fbf\u5229\u3067\u3059\u306d\u3002\n\u3046\u3061\u3067\u306f[Poltergeist](https://github.com/jonleighton/poltergeist)\u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\nJS\u304c\u3089\u307f\u306eUI\u306e\u30c6\u30b9\u30c8\u3092\u3057\u3066\u3044\u305f\u3068\u304d\u3001JS\u306e\u52d5\u4f5c\u5b8c\u4e86\u3092\u5f85\u3063\u3066\u304f\u308c\u305a\u3001\u30c6\u30b9\u30c8\u304c\u3053\u3051\u308b\u3068\u3044\u3046\u4e8b\u304c\u3042\u3063\u305f\u306e\u3067\u3001JS\u3092\u5f85\u3064\u90e8\u5206\u306e\u52d5\u4f5c\u539f\u7406\u306b\u3064\u3044\u3066\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\n`Capybara::Node::Base#syncronize`\u306b\u5b9f\u88c5\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\n```lib/capybara/node/base.rb\n      def synchronize(seconds=Capybara.default_wait_time)\n        start_time = Time.now\n\n        if session.synchronized\n          yield\n        else\n          session.synchronized = true\n          begin\n            yield\n          rescue => e\n            session.raise_server_error!\n            raise e unless driver.wait?\n            raise e unless catch_error?(e)\n            raise e if (Time.now - start_time) >= seconds\n            sleep(0.05)\n            raise Capybara::FrozenInTime, \"time appears to be frozen, Capybara does not work with libraries which freeze time, consider using time travelling instead\" if Time.now == start_time\n            reload if Capybara.automatic_reload\n            retry\n          ensure\n            session.synchronized = false\n          end\n        end\n      end\n```\n\nhttps://github.com/jnicklas/capybara/blob/master/lib/capybara/node/base.rb#L73\n\n`Capybara::Node::Matchers`\u3084\u3089`Capybara::Node::Finders`\u3084\u3089\u306e\u30e1\u30bd\u30c3\u30c9\u304b\u3089\u547c\u3070\u308c\u3066\u3044\u307e\u3059\u3002\n\n```lib/capybara/node/finders.rb\n      def find(*args)\n        query = Capybara::Query.new(*args)\n        synchronize(query.wait) do\n          if query.match == :smart or query.match == :prefer_exact\n            result = resolve_query(query, true)\n            result = resolve_query(query, false) if result.size == 0 and not query.exact?\n          else\n            result = resolve_query(query)\n          end\n          if query.match == :one or query.match == :smart and result.size > 1\n            raise Capybara::Ambiguous.new(\"Ambiguous match, found #{result.size} elements matching #{query.description}\")\n          end\n          if result.size == 0\n            raise Capybara::ElementNotFound.new(\"Unable to find #{query.description}\")\n          end\n          result.first\n        end.tap(&:allow_reload!)\n      end\n```\n\n\u4f8b\u3048\u3070`Capybara::Node::Finders#find`\u3067\u306f\u3001\u30ce\u30fc\u30c9\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u5834\u5408\u306b`Capybara::ElementNotFound`\u304c\u767a\u751f\u3057\u307e\u3059\u304c\u3001\u305d\u308c\u306a\u3089\u898b\u3064\u304b\u308b\u307e\u3067`retry`\u3059\u308c\u3070\u826f\u3044\u3058\u3083\u306a\u3044\u3001\u3068\u3044\u3046\u767a\u60f3\u3067\u3059\u306d\u3002\n\u5206\u304b\u308a\u3084\u3059\u3044\u3002\n`Capybara.default_wait_time`\u306f`syncronize`\u306b\u304b\u304b\u308b\u6700\u5927\u79d2\u6570\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u5927\u304d\u306a\u5024\u3092\u5165\u308c\u3066\u3082\u4f55\u304b\u30d0\u30b0\u304c\u7121\u3044\u9650\u308a\u30c6\u30b9\u30c8\u306e\u5b9f\u884c\u6642\u9593\u304c\u9577\u304f\u306a\u3063\u305f\u308a\u306f\u3057\u307e\u305b\u3093\u3002\n\u306e\u3067\u3001\u3046\u3061\u3067\u306f10\u79d2\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059(\u30c7\u30d5\u30a9\u30eb\u30c8\u306f2\u79d2)\n\n\u6614\u306f`wait_until`\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u3063\u305f\u3088\u3046\u3067\u3059\u304c\u3001Capybara2\u306b\u306a\u3063\u3066\u304b\u3089\u6d88\u3048\u305f\u3088\u3046\u3067\u3059\u3002\n[Why wait_until was removed from Capybara](http://www.elabs.se/blog/53-why-wait_until-was-removed-from-capybara)\n\n\u3061\u306a\u307f\u306b\u3001\u8abf\u3079\u308b\u304d\u3063\u304b\u3051\u306b\u306a\u3063\u305f`syncronize`\u3057\u3066\u304f\u308c\u306a\u3044\u4ef6\u3067\u3059\u304c\u3001example\u306b`js: true`\u304c\u4ed8\u3044\u3066\u306a\u304b\u3063\u305f\u305b\u3044\u3067\u3057\u305f\uff0f(^o^)\uff3c\n`js: true`\u3057\u306a\u3044\u3068driver\u304cPoltergeist\u306b\u306a\u3089\u305a\u3001`Capybara::Driver::Node`\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002\nJS\u3082\u5b9f\u884c\u3055\u308c\u307e\u305b\u3093\u3002(\u3061\u3083\u3093\u3068\u8aad\u3093\u3067\u306a\u3044\u3051\u3069\u304a\u305d\u3089\u304f`#execute_script`\u306b\u5b9f\u88c5\u304c\u5fc5\u8981)\n`#syncronize`\u3067\u306f`driver.wait?`\u304c`false`\u3092\u8fd4\u3059\u306e\u3067\u3001`rescue`\u30d6\u30ed\u30c3\u30af\u306f\u5358\u306b\u4f8b\u5916\u3092\u6295\u3052\u76f4\u3057\u307e\u3059\u3002\n", "tags": ["Capybara", "Rails", "RSpec"]}