{"tags": ["Swift", "Firebase", "remoteconfig", "future", "\u975e\u540c\u671f\u51e6\u7406"], "context": "\n\nFirebase Remote Config\u3068\u306f\nWeb\u3067\u3044\u3046GoogleAnalytics\u306e\u30e2\u30d0\u30a4\u30eb\u7248\u304cFirebase\u3068\u3044\u3046\u611f\u3058\u3067\u3059\u3002GoogleAnalytics\u307b\u3069\u3055\u307e\u3056\u307e\u306a\u5206\u6790\u306f\u73fe\u72b6\u307e\u3060\u3067\u304d\u307e\u305b\u3093\u304c\u3001\u5206\u6790\u306e\u4ed6\u306b\u3082\u30d7\u30c3\u30b7\u30e5\u901a\u77e5\uff08Notification\uff09\u3084\u3001\u30e2\u30d0\u30a4\u30eb\u7aef\u672b\u3067\u6301\u3063\u3066\u3044\u308b\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u30ea\u30e2\u30fc\u30c8\u3067\u64cd\u4f5c\u3059\u308b\uff08RemoteConfig\uff09\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\u8868\u793a\u3057\u3066\u3044\u308b\u8272\u306a\u3069\u3092\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u3088\u3063\u3066\u30e9\u30f3\u30c0\u30e0\u306b\u5909\u66f4\u3059\u308b\u3068\u3044\u3046\u306e\u3082RemoteConfig\u3092\u5229\u7528\u3059\u308b\u3068\u7c21\u5358\u306b\u3067\u304d\u307e\u3059\uff08AB\u30c6\u30b9\u30c8\u3067\u3059\u306d\uff09\u3002\n\n\u3084\u308a\u305f\u3044\u3053\u3068\n\u30e6\u30fc\u30b6\u306b\u3088\u3063\u3066\u8868\u793a\u3059\u308b\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u5909\u3048\u305f\u3044\u3002\u6700\u65b0\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u4eba\u3068\u305d\u3046\u3067\u306a\u3044\u4eba\u3068\u3067\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u5909\u3048\u3066\u307f\u307e\u3059\u3002\n\n\u74b0\u5883\nXcode7.3, Swift2.2\n\n\u5b9f\u969b\u306bRemote Config\u3092\u4f7f\u3063\u3066\u307f\u305f\n\n1, \u30b3\u30f3\u30bd\u30fc\u30eb\u3067\u306e\u8a2d\u5b9a\n\u307e\u305aFirebase\u306e\u30b3\u30f3\u30bd\u30fc\u30eb\u753b\u9762\u306b\u884c\u304d\u3001Remote Config\u306e\u8a2d\u5b9a\u3092\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8ffd\u52a0\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u5fc5\u8981\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u6700\u65b0\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u3044\u308c\u3066\u3044\u308b\u30e6\u30fc\u30b6\u306b\u9055\u3046\u5024\u3092\u6e21\u3059\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u3001latestVersion\u3068\u3044\u3046\u6761\u4ef6\u3092\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n2, \u5b9f\u88c5\nPodfile\u306b pod 'Firebase/RemoteConfig' \u3068\u8a18\u5165\u3057\u3066 pod install \u3068\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u5b9f\u884c\u3057\u3066FirebaseRemoteConfig\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\nAppDelegate.swift\u306f\u6700\u4f4e\u9650\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002(github\u3088\u308a\u629c\u7c8b)\nimport UIKit\nimport Firebase\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n    var window: UIWindow?\n\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions   launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {\n        // [START configure_firebase]\n        FIRApp.configure()\n        // [END configure_firebase]\n\n        return true\n    }\n}\n\nViewController.swift\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nimport UIKit\nimport Firebase\nimport FirebaseRemoteConfig\n\nclass ViewController: UIViewController {\n\n    var remoteConfig: FIRRemoteConfig!\n    var tabTitles: [String] = [\"\u30d8\u30a2\u30a2\u30ec\u30f3\u30b8\", \"\u30e1\u30a4\u30af\", \"\u30b9\u30ad\u30f3\u30b1\u30a2\"]\n    var tabTitlesEn: [String] = [\"hair_arrange\", \"make\", \"skin_care\"]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        setTabWithRemoteConfig() \n\n    }\n\n    ...\n\n    func setTabWithRemoteConfig() {\n\n        // RemoteConfig\u306e\u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u53d6\u5f97\n        remoteConfig = FIRRemoteConfig.remoteConfig()\n\n        // \u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\u306e\u8a2d\u5b9a\n        let remoteConfigSettings = FIRRemoteConfigSettings(developerModeEnabled: true)\n        remoteConfig.configSettings = remoteConfigSettings!\n\n        // \u4e0b\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u304b\u3089\u3053\u308c\u306f\u306a\u304f\u3066\u3082\u554f\u984c\u306a\u3044.\n        // remoteConfig.setDefaults([\"tabTitles\": \"\u30a2\u30a4\u30c6\u30e0\"])\n        // remoteConfig.setDefaults([\"tabTitlesEn\": \"item\"])\n\n        // \u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u6709\u52b9\u671f\u9593\n        let expirationDuration = remoteConfig.configSettings.isDeveloperModeEnabled ? 0 : 3600\n\n        // Firebase\u306e\u30b3\u30f3\u30bd\u30fc\u30eb\u753b\u9762\u3067\u8a2d\u5b9a\u3057\u305f\u5024\u3092\u6301\u3063\u3066\u304f\u308b\u975e\u540c\u671f\u51e6\u7406\n        remoteConfig.fetchWithExpirationDuration(NSTimeInterval(expirationDuration)) { [weak self] (status, error) -> Void in\n\n            if (status == FIRRemoteConfigFetchStatus.Success) {\n\n                self?.remoteConfig.activateFetched()\n            } else {\n                print(\"Config not fetched\")\n                print(\"Error \\(error!.localizedDescription)\")\n            }\n\n            // \u5024\u3092\u53d6\u308a\u51fa\u3059. \u3053\u3053\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3082\u8a2d\u5b9a.\n            self?.tabTitles.append(self?.remoteConfig[\"tabTitles\"].stringValue ?? \"\u30a2\u30a4\u30c6\u30e0\")\n            self?.tabTitlesEn.append(self?.remoteConfig[\"tabTitlesEn\"].stringValue ?? \"item\")\n\n            // tableView\u3092\u6271\u3063\u3066\u3044\u308b\u6642\u306f\u3053\u3053\u3067reloadData\u3092\u3059\u308b.\n            // \u5024\u3092Remote Config\u3067\u53d6\u5f97\u3057\u305f\u5f8c\u306e\u51e6\u7406\u3092\u5b9f\u88c5\u3059\u308b.\n        }\n    }\n\n    ...\n\n}\n\n\n\u3053\u306e\u51e6\u7406\u3092\u3069\u3053\u304b\u306b\u307e\u3068\u3081\u305f\u3044\nRemote Config\u3092\u5229\u7528\u3059\u308b\u6642\u306b\u3001\u6bce\u56de\u3053\u308c\u3092\u66f8\u304f\u3068\u540c\u3058\u30b3\u30fc\u30c9\u304c\u5897\u3048\u308b\u306e\u3067\u3001FirebaseRemoteConfigManager\u3092\u4f5c\u3063\u3066\u540c\u3058\u30b3\u30fc\u30c9\u306b\u306a\u308a\u3046\u308b\u3068\u3053\u308d\u306f\u4e00\u7b87\u6240\u306b\u307e\u3068\u3081\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\nFirebaseRemoteConfigManager.swift\u306e\u4f5c\u6210\nBrightFutures\u3092\u4f7f\u3063\u3066\u975e\u540c\u671f\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002Carthage\u7b49\u3067BrightFutures\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u4ee5\u4e0b\u306fFirebaseRemoteConfigManager.swift\u306e\u4e2d\u8eab\u3067\u3059\u3002\nimport Foundation\nimport Firebase\nimport FirebaseRemoteConfig\nimport BrightFutures\n\nstruct FirebaseRemoteConfigManager {\n\n    private let remoteConfig: FIRRemoteConfig\n    private let expirationDuration: Int\n\n    init() {\n        // \u3055\u3063\u304dfunction\u306e\u4e2d\u3067\u8a2d\u5b9a\u3057\u3066\u3044\u305f\u3082\u306e\u3092\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u306b\u307e\u3068\u3081\u308b.\n        self.remoteConfig = FIRRemoteConfig.remoteConfig()\n\n        let remoteConfigSettings = FIRRemoteConfigSettings(developerModeEnabled: true)\n        self.remoteConfig.configSettings = remoteConfigSettings!\n\n        self.expirationDuration = remoteConfig.configSettings.isDeveloperModeEnabled ? 0 : 3600\n\n    }\n\n    // \u8fd4\u308a\u5024\u306fFuture\u3067\u30e9\u30c3\u30d7\u3059\u308b.\n    func fetchRemoteConfig() -> Future<FIRRemoteConfig, NSError> {\n\n        let promise = Promise<FIRRemoteConfig, NSError>()\n\n        remoteConfig.fetchWithExpirationDuration(NSTimeInterval(expirationDuration)) { (status, error) -> Void in\n\n            if let error = error {\n                promise.failure(error)\n\n                // \u51e6\u7406\u306b\u5931\u6557\u3057\u305f\u304b\u3089\u65e9\u3081\u306breturn\u3055\u305b\u308b.\n                return \n            }\n\n            if status != FIRRemoteConfigFetchStatus.Success {\n                let error = NSError(domain: \"hogehoge\", code: 0, userInfo: [NSLocalizedDescriptionKey: \"status is failed\"])\n                promise.failure(error)\n\n                // \u51e6\u7406\u306b\u5931\u6557\u3057\u305f\u304b\u3089\u65e9\u3081\u306breturn\u3055\u305b\u308b.\n                return\n            }\n\n            self.remoteConfig.activateFetched()\n\n            // \u901a\u4fe1\u304c\u554f\u984c\u306a\u304f\u5b8c\u4e86\u3057\u305f\u6642\u306e\u307fSuccess\u306b\u306a\u308b.\n            promise.success(self.remoteConfig)\n\n        }\n\n        return promise.future\n\n    }\n\n}\n\n\nViewController\u306e\u5b9f\u88c5\nimport UIKit\nimport Firebase\nimport FirebaseRemoteConfig\n\nclass ViewController: UIViewController {\n\n    var tabTitles: [String] = [\"\u30d8\u30a2\u30a2\u30ec\u30f3\u30b8\", \"\u30e1\u30a4\u30af\", \"\u30b9\u30ad\u30f3\u30b1\u30a2\"]\n    var tabTitlesEn: [String] = [\"hair_arrange\", \"make\", \"skin_care\"]\n\n    // FirebaseRemoteConfigManager\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b.\n    private let remoteConfigManager = FirebaseRemoteConfigManager()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        setTabNameFromRemoteConfig() \n\n    }\n\n    ...\n\n    private func setTabNameFromRemoteConfig() {\n        // .onSuccess\u306b\u3001\u975e\u540c\u671f\u901a\u4fe1\u304c\u3046\u307e\u304f\u884c\u3063\u305f\u6642\u306e(Remote Config\u3067\u8a2d\u5b9a\u3057\u305f\u5024\u3092\u5229\u7528\u3059\u308b)\u51e6\u7406\u3092\u66f8\u304f.\n        // .onFailure\u306b\u3001\u975e\u540c\u671f\u901a\u4fe1\u304c\u5931\u6557\u3057\u305f\u6642\u306e\u51e6\u7406\u3092\u66f8\u304f.\n        remoteConfigManager.fetchRemoteConfig()\n            .onSuccess { result in\n                print(\"Fetch succeeded.\")\n\n                // [\"key\u540d\"].stringValue\u3067\u5024\u3092\u53d6\u308a\u51fa\u305b\u308b.\n                self.tabTitles.append(result[\"tabTitles\"].stringValue ?? \"\u30a2\u30a4\u30c6\u30e0\")\n                self.tabTitlesEn.append(result[\"tabTitlesEn\"].stringValue ?? \"item\")\n\n                // tableView\u3092\u6271\u3063\u3066\u3044\u308b\u6642\u306f\u3053\u3053\u3067reloadData\u3092\u3059\u308b.\n                // \u5024\u3092Remote Config\u3067\u53d6\u5f97\u3057\u305f\u5f8c\u306e\u51e6\u7406\u3092\u5b9f\u88c5\u3059\u308b.\n            }\n            .onFailure { error in\n                print(error.localizedDescription)\n            }\n    }\n\n    ...\n}\n\nViewController\u306e\u8a18\u8ff0\u91cf\u304c\u6e1b\u3063\u305f\u4e0a\u3001\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3067\u66f8\u304f\u3068\u6df1\u3044\u30cd\u30b9\u30c8\u306b\u306a\u308b\u554f\u984c\u70b9\u3082\u56de\u907f\u3067\u304d\u307e\u3059\u3002Remote Config\u3092\u4f7f\u3044\u305f\u3044\u3068\u3053\u308d\u3067\u3001private let remoteConfigManager = FirebaseRemoteConfigManager()\u3092\u8a18\u8ff0\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092func\u306e\u4e2d\u306a\u3069\u306b\u3044\u308c\u3066\u3042\u3052\u308c\u3070\u826f\u3044\u3067\u3059\u3002\nremoteConfigManager.fetchRemoteConfig()\n    .onSuccess { result in\n        // [\"key\u540d\"].stringValue\u3067\u5024\u3092\u53d6\u308a\u51fa\u305b\u308b.\n        // result[\"key\u540d\"].stringValue ?? \"\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306a\u3069\"\u3092\u4f7f\u3063\u305f\u51e6\u7406\n        // tableView\u3092\u6271\u3063\u3066\u3044\u308b\u6642\u306f\u3053\u3053\u3067reloadData\u3092\u3059\u308b.\n    }\n    .onFailure { error in\n        print(error.localizedDescription)\n    }\n\n\n# Firebase Remote Config\u3068\u306f\nWeb\u3067\u3044\u3046GoogleAnalytics\u306e\u30e2\u30d0\u30a4\u30eb\u7248\u304cFirebase\u3068\u3044\u3046\u611f\u3058\u3067\u3059\u3002GoogleAnalytics\u307b\u3069\u3055\u307e\u3056\u307e\u306a\u5206\u6790\u306f\u73fe\u72b6\u307e\u3060\u3067\u304d\u307e\u305b\u3093\u304c\u3001\u5206\u6790\u306e\u4ed6\u306b\u3082\u30d7\u30c3\u30b7\u30e5\u901a\u77e5\uff08Notification\uff09\u3084\u3001\u30e2\u30d0\u30a4\u30eb\u7aef\u672b\u3067\u6301\u3063\u3066\u3044\u308b\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u30ea\u30e2\u30fc\u30c8\u3067\u64cd\u4f5c\u3059\u308b\uff08RemoteConfig\uff09\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\u8868\u793a\u3057\u3066\u3044\u308b\u8272\u306a\u3069\u3092\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u3088\u3063\u3066\u30e9\u30f3\u30c0\u30e0\u306b\u5909\u66f4\u3059\u308b\u3068\u3044\u3046\u306e\u3082RemoteConfig\u3092\u5229\u7528\u3059\u308b\u3068\u7c21\u5358\u306b\u3067\u304d\u307e\u3059\uff08AB\u30c6\u30b9\u30c8\u3067\u3059\u306d\uff09\u3002\n\n# \u3084\u308a\u305f\u3044\u3053\u3068\n\u30e6\u30fc\u30b6\u306b\u3088\u3063\u3066\u8868\u793a\u3059\u308b\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u5909\u3048\u305f\u3044\u3002\u6700\u65b0\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u4eba\u3068\u305d\u3046\u3067\u306a\u3044\u4eba\u3068\u3067\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u5909\u3048\u3066\u307f\u307e\u3059\u3002\n\n# \u74b0\u5883\nXcode7.3, Swift2.2\n\n# \u5b9f\u969b\u306bRemote Config\u3092\u4f7f\u3063\u3066\u307f\u305f\n## 1, \u30b3\u30f3\u30bd\u30fc\u30eb\u3067\u306e\u8a2d\u5b9a\n\u307e\u305aFirebase\u306e\u30b3\u30f3\u30bd\u30fc\u30eb\u753b\u9762\u306b\u884c\u304d\u3001Remote Config\u306e\u8a2d\u5b9a\u3092\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8ffd\u52a0\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u5fc5\u8981\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u6700\u65b0\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u3044\u308c\u3066\u3044\u308b\u30e6\u30fc\u30b6\u306b\u9055\u3046\u5024\u3092\u6e21\u3059\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u3001latestVersion\u3068\u3044\u3046\u6761\u4ef6\u3092\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u3002\n<img width=\"1413\" alt=\"Screen Shot 2016-10-13 at 14.10.51.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/122365/f4db9d82-158a-2736-1b3a-acde782e06fc.png\">\n\n## 2, \u5b9f\u88c5\n\nPodfile\u306b `pod 'Firebase/RemoteConfig'` \u3068\u8a18\u5165\u3057\u3066 `pod install` \u3068\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u5b9f\u884c\u3057\u3066FirebaseRemoteConfig\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\n`AppDelegate.swift`\u306f\u6700\u4f4e\u9650\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002([github\u3088\u308a\u629c\u7c8b](https://github.com/firebase/quickstart-ios/tree/master/config/ConfigExampleSwift))\n\n    import UIKit\n    import Firebase\n\n    @UIApplicationMain\n    class AppDelegate: UIResponder, UIApplicationDelegate {\n\n        var window: UIWindow?\n\n        func application(_ application: UIApplication, didFinishLaunchingWithOptions   launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {\n            // [START configure_firebase]\n            FIRApp.configure()\n            // [END configure_firebase]\n        \n            return true\n        }\n    }\n\n\n`ViewController.swift`\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n    import UIKit\n    import Firebase\n    import FirebaseRemoteConfig\n\n    class ViewController: UIViewController {\n       \n        var remoteConfig: FIRRemoteConfig!\n        var tabTitles: [String] = [\"\u30d8\u30a2\u30a2\u30ec\u30f3\u30b8\", \"\u30e1\u30a4\u30af\", \"\u30b9\u30ad\u30f3\u30b1\u30a2\"]\n        var tabTitlesEn: [String] = [\"hair_arrange\", \"make\", \"skin_care\"]\n\n        override func viewDidLoad() {\n            super.viewDidLoad()\n\n            setTabWithRemoteConfig() \n            \n        }\n\n        ...\n\n        func setTabWithRemoteConfig() {\n\n            // RemoteConfig\u306e\u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u53d6\u5f97\n            remoteConfig = FIRRemoteConfig.remoteConfig()\n\n            // \u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\u306e\u8a2d\u5b9a\n            let remoteConfigSettings = FIRRemoteConfigSettings(developerModeEnabled: true)\n            remoteConfig.configSettings = remoteConfigSettings!\n        \n            // \u4e0b\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u304b\u3089\u3053\u308c\u306f\u306a\u304f\u3066\u3082\u554f\u984c\u306a\u3044.\n            // remoteConfig.setDefaults([\"tabTitles\": \"\u30a2\u30a4\u30c6\u30e0\"])\n            // remoteConfig.setDefaults([\"tabTitlesEn\": \"item\"])\n\n            // \u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u6709\u52b9\u671f\u9593\n            let expirationDuration = remoteConfig.configSettings.isDeveloperModeEnabled ? 0 : 3600\n        \n            // Firebase\u306e\u30b3\u30f3\u30bd\u30fc\u30eb\u753b\u9762\u3067\u8a2d\u5b9a\u3057\u305f\u5024\u3092\u6301\u3063\u3066\u304f\u308b\u975e\u540c\u671f\u51e6\u7406\n            remoteConfig.fetchWithExpirationDuration(NSTimeInterval(expirationDuration)) { [weak self] (status, error) -> Void in\n            \n                if (status == FIRRemoteConfigFetchStatus.Success) {\n                \n                    self?.remoteConfig.activateFetched()\n                } else {\n                    print(\"Config not fetched\")\n                    print(\"Error \\(error!.localizedDescription)\")\n                }\n            \n                // \u5024\u3092\u53d6\u308a\u51fa\u3059. \u3053\u3053\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3082\u8a2d\u5b9a.\n                self?.tabTitles.append(self?.remoteConfig[\"tabTitles\"].stringValue ?? \"\u30a2\u30a4\u30c6\u30e0\")\n                self?.tabTitlesEn.append(self?.remoteConfig[\"tabTitlesEn\"].stringValue ?? \"item\")\n\n                // tableView\u3092\u6271\u3063\u3066\u3044\u308b\u6642\u306f\u3053\u3053\u3067reloadData\u3092\u3059\u308b.\n                // \u5024\u3092Remote Config\u3067\u53d6\u5f97\u3057\u305f\u5f8c\u306e\u51e6\u7406\u3092\u5b9f\u88c5\u3059\u308b.\n            }\n        }\n\n        ...\n \n    }\n\n\n# \u3053\u306e\u51e6\u7406\u3092\u3069\u3053\u304b\u306b\u307e\u3068\u3081\u305f\u3044\n\nRemote Config\u3092\u5229\u7528\u3059\u308b\u6642\u306b\u3001\u6bce\u56de\u3053\u308c\u3092\u66f8\u304f\u3068\u540c\u3058\u30b3\u30fc\u30c9\u304c\u5897\u3048\u308b\u306e\u3067\u3001FirebaseRemoteConfigManager\u3092\u4f5c\u3063\u3066\u540c\u3058\u30b3\u30fc\u30c9\u306b\u306a\u308a\u3046\u308b\u3068\u3053\u308d\u306f\u4e00\u7b87\u6240\u306b\u307e\u3068\u3081\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n## FirebaseRemoteConfigManager.swift\u306e\u4f5c\u6210\n\nBrightFutures\u3092\u4f7f\u3063\u3066\u975e\u540c\u671f\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002Carthage\u7b49\u3067BrightFutures\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u4ee5\u4e0b\u306f`FirebaseRemoteConfigManager.swift`\u306e\u4e2d\u8eab\u3067\u3059\u3002\n\n    import Foundation\n    import Firebase\n    import FirebaseRemoteConfig\n    import BrightFutures\n\n    struct FirebaseRemoteConfigManager {\n    \n        private let remoteConfig: FIRRemoteConfig\n        private let expirationDuration: Int\n\n        init() {\n            // \u3055\u3063\u304dfunction\u306e\u4e2d\u3067\u8a2d\u5b9a\u3057\u3066\u3044\u305f\u3082\u306e\u3092\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u306b\u307e\u3068\u3081\u308b.\n            self.remoteConfig = FIRRemoteConfig.remoteConfig()\n    \n            let remoteConfigSettings = FIRRemoteConfigSettings(developerModeEnabled: true)\n            self.remoteConfig.configSettings = remoteConfigSettings!\n    \n            self.expirationDuration = remoteConfig.configSettings.isDeveloperModeEnabled ? 0 : 3600\n        \n        }\n    \n        // \u8fd4\u308a\u5024\u306fFuture\u3067\u30e9\u30c3\u30d7\u3059\u308b.\n        func fetchRemoteConfig() -> Future<FIRRemoteConfig, NSError> {\n        \n            let promise = Promise<FIRRemoteConfig, NSError>()\n        \n            remoteConfig.fetchWithExpirationDuration(NSTimeInterval(expirationDuration)) { (status, error) -> Void in\n            \n                if let error = error {\n                    promise.failure(error)\n\n                    // \u51e6\u7406\u306b\u5931\u6557\u3057\u305f\u304b\u3089\u65e9\u3081\u306breturn\u3055\u305b\u308b.\n                    return \n                }\n            \n                if status != FIRRemoteConfigFetchStatus.Success {\n                    let error = NSError(domain: \"hogehoge\", code: 0, userInfo: [NSLocalizedDescriptionKey: \"status is failed\"])\n                    promise.failure(error)\n\n                    // \u51e6\u7406\u306b\u5931\u6557\u3057\u305f\u304b\u3089\u65e9\u3081\u306breturn\u3055\u305b\u308b.\n                    return\n                }\n            \n                self.remoteConfig.activateFetched()\n\n                // \u901a\u4fe1\u304c\u554f\u984c\u306a\u304f\u5b8c\u4e86\u3057\u305f\u6642\u306e\u307fSuccess\u306b\u306a\u308b.\n                promise.success(self.remoteConfig)\n            \n            }\n        \n            return promise.future\n        \n        }\n    \n    }\n\n\n## ViewController\u306e\u5b9f\u88c5\n\n    import UIKit\n    import Firebase\n    import FirebaseRemoteConfig\n\n    class ViewController: UIViewController {\n\n        var tabTitles: [String] = [\"\u30d8\u30a2\u30a2\u30ec\u30f3\u30b8\", \"\u30e1\u30a4\u30af\", \"\u30b9\u30ad\u30f3\u30b1\u30a2\"]\n        var tabTitlesEn: [String] = [\"hair_arrange\", \"make\", \"skin_care\"]\n\n        // FirebaseRemoteConfigManager\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b.\n        private let remoteConfigManager = FirebaseRemoteConfigManager()\n\n        override func viewDidLoad() {\n            super.viewDidLoad()\n\n            setTabNameFromRemoteConfig() \n            \n        }\n\n        ...\n\n        private func setTabNameFromRemoteConfig() {\n            // .onSuccess\u306b\u3001\u975e\u540c\u671f\u901a\u4fe1\u304c\u3046\u307e\u304f\u884c\u3063\u305f\u6642\u306e(Remote Config\u3067\u8a2d\u5b9a\u3057\u305f\u5024\u3092\u5229\u7528\u3059\u308b)\u51e6\u7406\u3092\u66f8\u304f.\n            // .onFailure\u306b\u3001\u975e\u540c\u671f\u901a\u4fe1\u304c\u5931\u6557\u3057\u305f\u6642\u306e\u51e6\u7406\u3092\u66f8\u304f.\n            remoteConfigManager.fetchRemoteConfig()\n                .onSuccess { result in\n                    print(\"Fetch succeeded.\")\n                \n                    // [\"key\u540d\"].stringValue\u3067\u5024\u3092\u53d6\u308a\u51fa\u305b\u308b.\n                    self.tabTitles.append(result[\"tabTitles\"].stringValue ?? \"\u30a2\u30a4\u30c6\u30e0\")\n                    self.tabTitlesEn.append(result[\"tabTitlesEn\"].stringValue ?? \"item\")\n                    \n                    // tableView\u3092\u6271\u3063\u3066\u3044\u308b\u6642\u306f\u3053\u3053\u3067reloadData\u3092\u3059\u308b.\n                    // \u5024\u3092Remote Config\u3067\u53d6\u5f97\u3057\u305f\u5f8c\u306e\u51e6\u7406\u3092\u5b9f\u88c5\u3059\u308b.\n                }\n                .onFailure { error in\n                    print(error.localizedDescription)\n                }\n        }\n\n        ...\n    }\n\nViewController\u306e\u8a18\u8ff0\u91cf\u304c\u6e1b\u3063\u305f\u4e0a\u3001\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3067\u66f8\u304f\u3068\u6df1\u3044\u30cd\u30b9\u30c8\u306b\u306a\u308b\u554f\u984c\u70b9\u3082\u56de\u907f\u3067\u304d\u307e\u3059\u3002Remote Config\u3092\u4f7f\u3044\u305f\u3044\u3068\u3053\u308d\u3067\u3001`private let remoteConfigManager = FirebaseRemoteConfigManager()`\u3092\u8a18\u8ff0\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092func\u306e\u4e2d\u306a\u3069\u306b\u3044\u308c\u3066\u3042\u3052\u308c\u3070\u826f\u3044\u3067\u3059\u3002\n\n```\nremoteConfigManager.fetchRemoteConfig()\n    .onSuccess { result in\n        // [\"key\u540d\"].stringValue\u3067\u5024\u3092\u53d6\u308a\u51fa\u305b\u308b.\n        // result[\"key\u540d\"].stringValue ?? \"\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306a\u3069\"\u3092\u4f7f\u3063\u305f\u51e6\u7406\n        // tableView\u3092\u6271\u3063\u3066\u3044\u308b\u6642\u306f\u3053\u3053\u3067reloadData\u3092\u3059\u308b.\n    }\n    .onFailure { error in\n        print(error.localizedDescription)\n    }\n\n"}