{"context": " More than 1 year has passed since last update.\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306bGAE\u304b\u3089Spreadsheet\u3092\u53c2\u7167\u3059\u308b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u3063\u3066\u307f\u305f\u306e\u3067\u3059\u304cOAuth2.0\u306b\u5bfe\u5fdc\u3055\u305b\u308b\u306e\u306b\u3048\u3089\u304f\u624b\u3053\u305a\u3063\u305f\u306e\u3067\u30e1\u30e2\u3092\u6b8b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\u4f7f\u7528\u3059\u308b\u306e\u306f\u300cGData API\u300d\u3067\u74b0\u5883\u69cb\u7bc9\u306e\u624b\u9806\u306f\u4e0b\u8a18\u306e\u8a18\u4e8b\u3068\u540c\u3058\u3067\u3059\u3002\u307e\u305f\u3001\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306f\u300cSlim3+Scenic3\u300d\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u3061\u3089\u306f\u516c\u5f0f\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3002\nGData API\u3067Google\u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8\u3092\u53c2\u7167\u3059\u308b\u306b\u306f\nhttp://www.atmarkit.co.jp/ait/articles/1001/15/news121.html\nSlim3\nhttps://sites.google.com/site/slim3documentja/\nScenic3\nhttps://sites.google.com/site/aboutscenic3/home\n\u4f5c\u3063\u305f\u3082\u306e\u306f http://localhost:8888/spreadsheet \u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068spreadsheet\u306e\u5185\u5bb9\u3092\u51fa\u529b\u3059\u308b\u7c21\u5358\u306aWEB\u30a2\u30d7\u30ea\u3067\u3059\u3002\u975e\u5e38\u306b\u624b\u629c\u304d\u51e6\u7406\u3070\u304b\u308a\u3067\u3059\u3057\u3001\u305f\u3044\u3057\u3066\u30c6\u30b9\u30c8\u3057\u3066\u3044\u306a\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u304c\u304c\u3054\u53c2\u8003\u307e\u3067\u306b\u3002\n\nTestPage.java\npackage test.page;\n\nimport test.service.CredentialDataService;\n\nimport java.net.URL;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.slim3.controller.Navigation;\n\nimport com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;\nimport com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\nimport com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse;\nimport com.google.api.client.http.HttpTransport;\nimport com.google.api.client.http.javanet.NetHttpTransport;\nimport com.google.api.client.json.JsonFactory;\nimport com.google.api.client.json.jackson2.JacksonFactory;\nimport com.google.api.services.drive.DriveScopes;\nimport com.google.gdata.client.spreadsheet.SpreadsheetService;\nimport com.google.gdata.data.spreadsheet.ListEntry;\nimport com.google.gdata.data.spreadsheet.ListFeed;\nimport com.google.gdata.data.spreadsheet.SpreadsheetEntry;\nimport com.google.gdata.data.spreadsheet.WorksheetEntry;\n\nimport scenic3.annotation.ActionPath;\nimport scenic3.annotation.Page;\n\n@Page(\"/\")\npublic class TestPage extends CommonPage {\n\n    private static final String CLIENT_ID_DEBUG =\n        \"<\u30ed\u30fc\u30ab\u30eb\u30c6\u30b9\u30c8\u7528\u30af\u30e9\u30a4\u30a2\u30f3\u30c8ID>\";\n    private static final String CLIENT_SECRET_DEBUG =\n        \"\uff1c\u30ed\u30fc\u30ab\u30eb\u30c6\u30b9\u30c8\u7528\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\uff1e\";\n    private static final String REDIRECT_URI_DEBUG =\n        \"http://localhost:8888/oauth2callback\";\n\n    private static final String CLIENT_ID = \"\uff1cGAE\u74b0\u5883\u7528\u30af\u30e9\u30a4\u30a2\u30f3\u30c8ID\uff1e\";\n    private static final String CLIENT_SECRET = \"\uff1cGAE\u74b0\u5883\u7528\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\uff1e\";\n    private static final String REDIRECT_URI =\n        \"http://\uff1c\u81ea\u5206\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30c9\u30e1\u30a4\u30f3\uff1e/oauth2callback\";\n\n    private static final List<String> SCOPES = Arrays.asList(\n        DriveScopes.DRIVE_FILE,\n        \"https://spreadsheets.google.com/feeds\");\n\n    private static final HttpTransport TRANSPORT = new NetHttpTransport();\n    private static final JsonFactory JSON_FACTORY = new JacksonFactory();\n\n    private static final String SERVICE_NAME = \"\uff1c\u30b5\u30fc\u30d3\u30b9\u540d\uff1e\";\n\n    CredentialDataService credentialService = new CredentialDataService();\n\n    /**\n     * \u30c7\u30d0\u30c3\u30b0\u7528\u30b5\u30fc\u30d0\u304b\u3069\u3046\u304b\n     */\n    private boolean isDebug() {\n        String serverName = request.getServerName();\n        if (serverName.indexOf(\"localhost\") != -1) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * \u6587\u5b57\u5217\u3092\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u51fa\u529b\n     */\n    private void writeResponse(String str) {\n        try {\n            response.setCharacterEncoding(\"utf-8\");\n            response.getWriter().println(str);\n            response.flushBuffer();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * OAuth\u8a8d\u8a3c\u7528flow\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\n     */\n    private GoogleAuthorizationCodeFlow getFlow() {\n\n        String clientId, clientSecret;\n        if (isDebug()) {\n            clientId = CLIENT_ID_DEBUG;\n            clientSecret = CLIENT_SECRET_DEBUG;\n        } else {\n            clientId = CLIENT_ID;\n            clientSecret = CLIENT_SECRET;\n        }\n\n        GoogleAuthorizationCodeFlow flow =\n            new GoogleAuthorizationCodeFlow.Builder(\n                TRANSPORT,\n                JSON_FACTORY,\n                clientId,\n                clientSecret,\n                SCOPES)\n                .setAccessType(\"online\")\n                .setApprovalPrompt(\"auto\")\n                .build();\n\n        return flow;\n    }\n\n    /**\n     * OAuth\u8a8d\u8a3c\u306e\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u5148\u3092\u53d6\u5f97\n     */\n    private String getRedirectURL() {\n        String redirectUri;\n        if (isDebug()) {\n            redirectUri = REDIRECT_URI_DEBUG;\n        } else {\n            redirectUri = REDIRECT_URI;\n        }\n\n        return redirectUri;\n    }\n\n    /**\n     * OAuth\u8a8d\u8a3c\uff0f\u30b9\u30bf\u30fc\u30c8\n     */\n    @ActionPath(\"loginOAuth\")\n    public Navigation loginOAuth() {\n\n        GoogleAuthorizationCodeFlow flow = getFlow();\n        String redirectUri = getRedirectURL();\n\n        String url =\n            flow.newAuthorizationUrl().setRedirectUri(redirectUri).build();\n\n        return redirect(url);\n    }\n\n    /**\n     * OAuth\u8a8d\u8a3c\uff0f\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\n     */\n    @ActionPath(\"oauth2callback\")\n    public Navigation oauth2callback() {\n        String code = request.getParameter(\"code\");\n\n        GoogleAuthorizationCodeFlow flow = getFlow();\n        String redirectUri = getRedirectURL();\n\n        try {\n\n            GoogleTokenResponse response =\n                flow\n                    .newTokenRequest(code)\n                    .setRedirectUri(redirectUri)\n                    .execute();\n            GoogleCredential credential =\n                new GoogleCredential().setFromTokenResponse(response);\n\n            credentialService.save(credential);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n            writeResponse(e.getMessage());\n            return null;\n        }\n\n        return redirect(\"/spreadsheet\");\n    }\n\n    /**\n     * \u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8\u30c6\u30b9\u30c8\n     * \n     * @return\n     */\n    @ActionPath(\"spreadsheet\")\n    public Navigation spreadsheet() {\n        try {\n\n            GoogleCredential credential = credentialService.load();\n            if (credential == null) {\n                return redirect(\"loginOAuth\");\n            }\n\n            SpreadsheetService service = new SpreadsheetService(SERVICE_NAME);\n            service.setOAuth2Credentials(credential);\n\n            String key = \"\uff1c\u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8\u306eKey\uff1e\";\n            URL entryUrl =\n                new URL(\"https://spreadsheets.google.com/feeds/spreadsheets/\"\n                    + key);\n            SpreadsheetEntry spreadsheetEntry =\n                service.getEntry(entryUrl, SpreadsheetEntry.class);\n\n            // \u691c\u7d22\u5bfe\u8c61\u306e\u30ef\u30fc\u30af\u30b7\u30fc\u30c8\u3092\u53d6\u5f97\n            WorksheetEntry worksheetEntry =\n                spreadsheetEntry.getDefaultWorksheet();\n\n            // \u30ef\u30fc\u30af\u30b7\u30fc\u30c8\u5185\u3092\u691c\u7d22\n            URL listFeedUrl = worksheetEntry.getListFeedUrl();\n            ListFeed listFeed = service.getFeed(listFeedUrl, ListFeed.class);\n\n            // \u30ef\u30fc\u30af\u30b7\u30fc\u30c8\u306e\u5185\u5bb9\u3092\u8868\u793a\n            String ret = \"\";\n            for (ListEntry row : listFeed.getEntries()) {\n                for (String tag : row.getCustomElements().getTags()) {\n                    ret += row.getCustomElements().getValue(tag) + \"\\t\";\n                }\n                ret += \"\\n\";\n            }\n            writeResponse(ret);\n\n        } catch (Exception e) {\n            // \u3053\u3053\u8d85\u30c6\u30ad\u30c8\u30fc\n            e.printStackTrace();\n            credentialService.delete();\n            writeResponse(e.getMessage());\n        }\n\n        return null;\n    }\n}\n\n\n\n\nCredentialData.java\npackage test.model;\n\nimport java.io.Serializable;\n\nimport org.slim3.datastore.Attribute;\nimport org.slim3.datastore.Model;\n\nimport com.google.appengine.api.datastore.Key;\nimport com.google.appengine.api.users.User;\n\n@Model(schemaVersion = 1)\npublic class CredentialData implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n\n    @Attribute(primaryKey = true)\n    private Key key;\n\n    @Attribute(version = true)\n    private Long version;\n\n    private String accessToken;\n\n    private User user;\n\n    /** ------- Setter/Getter -------------------------------------- **/\n\n    public Key getKey() {\n        return key;\n    }\n\n    public void setKey(Key key) {\n        this.key = key;\n    }\n\n    public Long getVersion() {\n        return version;\n    }\n\n    public void setVersion(Long version) {\n        this.version = version;\n    }\n\n\n    public User getUser() {\n        return user;\n    }\n\n    public void setUser(User user) {\n        this.user = user;\n    }\n\n    public String getAccessToken() {\n        return accessToken;\n    }\n\n    public void setAccessToken(String accessToken) {\n        this.accessToken = accessToken;\n    }\n}\n\n\n\n\nCredentialDataService.java\npackage test.service;\n\nimport java.util.List;\n\nimport org.slim3.datastore.Datastore;\n\nimport com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\nimport com.google.appengine.api.datastore.Transaction;\nimport com.google.appengine.api.users.User;\nimport com.google.appengine.api.users.UserService;\nimport com.google.appengine.api.users.UserServiceFactory;\n\nimport test.meta.CredentialDataMeta;\nimport test.model.CredentialData;\n\npublic class CredentialDataService {\n\n    private CredentialDataMeta t = new CredentialDataMeta();\n\n    /**\n     * OAuth\u8a3c\u660e\u60c5\u5831\u3092\u4fdd\u5b58\u3059\u308b\n     * \n     * @param credential\n     *            OAuth\u8a3c\u660e\u60c5\u5831\n     */\n    public void save(GoogleCredential credential) {\n        Transaction tx = Datastore.beginTransaction();\n\n        if (load() != null) {\n            delete();\n        }\n\n        UserService userService = UserServiceFactory.getUserService();\n        User user = userService.getCurrentUser();\n\n        CredentialData data = new CredentialData();\n        data.setUser(user);\n        data.setAccessToken(credential.getAccessToken());\n\n        Datastore.put(data);\n        tx.commit();\n    }\n\n    /**\n     * \u30ed\u30b0\u30a4\u30f3\u3057\u3066\u3044\u308b\u30e6\u30fc\u30b6\u306eOAuth\u8a3c\u660e\u60c5\u5831\u3092\u524a\u9664\u3059\u308b\n     */\n    public void delete() {\n        UserService userService = UserServiceFactory.getUserService();\n        User user = userService.getCurrentUser();\n\n        List<CredentialData> list =\n            Datastore.query(t).filter(t.user.equal(user)).asList();\n        for (CredentialData d : list) {\n            Datastore.delete(d.getKey());\n        }\n    }\n\n    /**\n     * \u30ed\u30b0\u30a4\u30f3\u3057\u3066\u3044\u308b\u30e6\u30fc\u30b6\u306eOAuth\u8a3c\u660e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\n     * \n     * @return OAuth\u8a3c\u660e\u60c5\u5831\n     */\n    public GoogleCredential load() {\n        UserService userService = UserServiceFactory.getUserService();\n        User user = userService.getCurrentUser();\n\n        List<CredentialData> list =\n            Datastore.query(t).filter(t.user.equal(user)).asList();\n\n        if (list.size() == 0) {\n            return null;\n        } else {\n            String accessToken = list.get(0).getAccessToken();\n            GoogleCredential credential =\n                new GoogleCredential().setAccessToken(accessToken);\n            return credential;\n        }\n    }\n}\n\n\n\n\n\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306bGAE\u304b\u3089Spreadsheet\u3092\u53c2\u7167\u3059\u308b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u3063\u3066\u307f\u305f\u306e\u3067\u3059\u304cOAuth2.0\u306b\u5bfe\u5fdc\u3055\u305b\u308b\u306e\u306b\u3048\u3089\u304f\u624b\u3053\u305a\u3063\u305f\u306e\u3067\u30e1\u30e2\u3092\u6b8b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u4f7f\u7528\u3059\u308b\u306e\u306f\u300cGData API\u300d\u3067\u74b0\u5883\u69cb\u7bc9\u306e\u624b\u9806\u306f\u4e0b\u8a18\u306e\u8a18\u4e8b\u3068\u540c\u3058\u3067\u3059\u3002\u307e\u305f\u3001\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306f\u300cSlim3+Scenic3\u300d\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u3061\u3089\u306f\u516c\u5f0f\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3002\n\n```GData API\u3067Google\u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8\u3092\u53c2\u7167\u3059\u308b\u306b\u306f```\nhttp://www.atmarkit.co.jp/ait/articles/1001/15/news121.html\n```Slim3```\nhttps://sites.google.com/site/slim3documentja/\n```Scenic3```\nhttps://sites.google.com/site/aboutscenic3/home\n\n\n\u4f5c\u3063\u305f\u3082\u306e\u306f http://localhost:8888/spreadsheet \u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068spreadsheet\u306e\u5185\u5bb9\u3092\u51fa\u529b\u3059\u308b\u7c21\u5358\u306aWEB\u30a2\u30d7\u30ea\u3067\u3059\u3002\u975e\u5e38\u306b\u624b\u629c\u304d\u51e6\u7406\u3070\u304b\u308a\u3067\u3059\u3057\u3001\u305f\u3044\u3057\u3066\u30c6\u30b9\u30c8\u3057\u3066\u3044\u306a\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u304c\u304c\u3054\u53c2\u8003\u307e\u3067\u306b\u3002\n\n\n```java:TestPage.java\npackage test.page;\n\nimport test.service.CredentialDataService;\n\nimport java.net.URL;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.slim3.controller.Navigation;\n\nimport com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;\nimport com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\nimport com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse;\nimport com.google.api.client.http.HttpTransport;\nimport com.google.api.client.http.javanet.NetHttpTransport;\nimport com.google.api.client.json.JsonFactory;\nimport com.google.api.client.json.jackson2.JacksonFactory;\nimport com.google.api.services.drive.DriveScopes;\nimport com.google.gdata.client.spreadsheet.SpreadsheetService;\nimport com.google.gdata.data.spreadsheet.ListEntry;\nimport com.google.gdata.data.spreadsheet.ListFeed;\nimport com.google.gdata.data.spreadsheet.SpreadsheetEntry;\nimport com.google.gdata.data.spreadsheet.WorksheetEntry;\n\nimport scenic3.annotation.ActionPath;\nimport scenic3.annotation.Page;\n\n@Page(\"/\")\npublic class TestPage extends CommonPage {\n\n    private static final String CLIENT_ID_DEBUG =\n        \"<\u30ed\u30fc\u30ab\u30eb\u30c6\u30b9\u30c8\u7528\u30af\u30e9\u30a4\u30a2\u30f3\u30c8ID>\";\n    private static final String CLIENT_SECRET_DEBUG =\n        \"\uff1c\u30ed\u30fc\u30ab\u30eb\u30c6\u30b9\u30c8\u7528\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\uff1e\";\n    private static final String REDIRECT_URI_DEBUG =\n        \"http://localhost:8888/oauth2callback\";\n\n    private static final String CLIENT_ID = \"\uff1cGAE\u74b0\u5883\u7528\u30af\u30e9\u30a4\u30a2\u30f3\u30c8ID\uff1e\";\n    private static final String CLIENT_SECRET = \"\uff1cGAE\u74b0\u5883\u7528\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\uff1e\";\n    private static final String REDIRECT_URI =\n        \"http://\uff1c\u81ea\u5206\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30c9\u30e1\u30a4\u30f3\uff1e/oauth2callback\";\n\n    private static final List<String> SCOPES = Arrays.asList(\n        DriveScopes.DRIVE_FILE,\n        \"https://spreadsheets.google.com/feeds\");\n\n    private static final HttpTransport TRANSPORT = new NetHttpTransport();\n    private static final JsonFactory JSON_FACTORY = new JacksonFactory();\n\n    private static final String SERVICE_NAME = \"\uff1c\u30b5\u30fc\u30d3\u30b9\u540d\uff1e\";\n\n    CredentialDataService credentialService = new CredentialDataService();\n\n    /**\n     * \u30c7\u30d0\u30c3\u30b0\u7528\u30b5\u30fc\u30d0\u304b\u3069\u3046\u304b\n     */\n    private boolean isDebug() {\n        String serverName = request.getServerName();\n        if (serverName.indexOf(\"localhost\") != -1) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * \u6587\u5b57\u5217\u3092\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u51fa\u529b\n     */\n    private void writeResponse(String str) {\n        try {\n            response.setCharacterEncoding(\"utf-8\");\n            response.getWriter().println(str);\n            response.flushBuffer();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * OAuth\u8a8d\u8a3c\u7528flow\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\n     */\n    private GoogleAuthorizationCodeFlow getFlow() {\n\n        String clientId, clientSecret;\n        if (isDebug()) {\n            clientId = CLIENT_ID_DEBUG;\n            clientSecret = CLIENT_SECRET_DEBUG;\n        } else {\n            clientId = CLIENT_ID;\n            clientSecret = CLIENT_SECRET;\n        }\n\n        GoogleAuthorizationCodeFlow flow =\n            new GoogleAuthorizationCodeFlow.Builder(\n                TRANSPORT,\n                JSON_FACTORY,\n                clientId,\n                clientSecret,\n                SCOPES)\n                .setAccessType(\"online\")\n                .setApprovalPrompt(\"auto\")\n                .build();\n\n        return flow;\n    }\n\n    /**\n     * OAuth\u8a8d\u8a3c\u306e\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u5148\u3092\u53d6\u5f97\n     */\n    private String getRedirectURL() {\n        String redirectUri;\n        if (isDebug()) {\n            redirectUri = REDIRECT_URI_DEBUG;\n        } else {\n            redirectUri = REDIRECT_URI;\n        }\n\n        return redirectUri;\n    }\n\n    /**\n     * OAuth\u8a8d\u8a3c\uff0f\u30b9\u30bf\u30fc\u30c8\n     */\n    @ActionPath(\"loginOAuth\")\n    public Navigation loginOAuth() {\n\n        GoogleAuthorizationCodeFlow flow = getFlow();\n        String redirectUri = getRedirectURL();\n\n        String url =\n            flow.newAuthorizationUrl().setRedirectUri(redirectUri).build();\n\n        return redirect(url);\n    }\n\n    /**\n     * OAuth\u8a8d\u8a3c\uff0f\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\n     */\n    @ActionPath(\"oauth2callback\")\n    public Navigation oauth2callback() {\n        String code = request.getParameter(\"code\");\n\n        GoogleAuthorizationCodeFlow flow = getFlow();\n        String redirectUri = getRedirectURL();\n\n        try {\n\n            GoogleTokenResponse response =\n                flow\n                    .newTokenRequest(code)\n                    .setRedirectUri(redirectUri)\n                    .execute();\n            GoogleCredential credential =\n                new GoogleCredential().setFromTokenResponse(response);\n\n            credentialService.save(credential);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n            writeResponse(e.getMessage());\n            return null;\n        }\n\n        return redirect(\"/spreadsheet\");\n    }\n\n    /**\n     * \u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8\u30c6\u30b9\u30c8\n     * \n     * @return\n     */\n    @ActionPath(\"spreadsheet\")\n    public Navigation spreadsheet() {\n        try {\n\n            GoogleCredential credential = credentialService.load();\n            if (credential == null) {\n                return redirect(\"loginOAuth\");\n            }\n\n            SpreadsheetService service = new SpreadsheetService(SERVICE_NAME);\n            service.setOAuth2Credentials(credential);\n\n            String key = \"\uff1c\u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8\u306eKey\uff1e\";\n            URL entryUrl =\n                new URL(\"https://spreadsheets.google.com/feeds/spreadsheets/\"\n                    + key);\n            SpreadsheetEntry spreadsheetEntry =\n                service.getEntry(entryUrl, SpreadsheetEntry.class);\n\n            // \u691c\u7d22\u5bfe\u8c61\u306e\u30ef\u30fc\u30af\u30b7\u30fc\u30c8\u3092\u53d6\u5f97\n            WorksheetEntry worksheetEntry =\n                spreadsheetEntry.getDefaultWorksheet();\n\n            // \u30ef\u30fc\u30af\u30b7\u30fc\u30c8\u5185\u3092\u691c\u7d22\n            URL listFeedUrl = worksheetEntry.getListFeedUrl();\n            ListFeed listFeed = service.getFeed(listFeedUrl, ListFeed.class);\n\n            // \u30ef\u30fc\u30af\u30b7\u30fc\u30c8\u306e\u5185\u5bb9\u3092\u8868\u793a\n            String ret = \"\";\n            for (ListEntry row : listFeed.getEntries()) {\n                for (String tag : row.getCustomElements().getTags()) {\n                    ret += row.getCustomElements().getValue(tag) + \"\\t\";\n                }\n                ret += \"\\n\";\n            }\n            writeResponse(ret);\n\n        } catch (Exception e) {\n            // \u3053\u3053\u8d85\u30c6\u30ad\u30c8\u30fc\n            e.printStackTrace();\n            credentialService.delete();\n            writeResponse(e.getMessage());\n        }\n\n        return null;\n    }\n}\n\n```\n\n```java:CredentialData.java\npackage test.model;\n\nimport java.io.Serializable;\n\nimport org.slim3.datastore.Attribute;\nimport org.slim3.datastore.Model;\n\nimport com.google.appengine.api.datastore.Key;\nimport com.google.appengine.api.users.User;\n\n@Model(schemaVersion = 1)\npublic class CredentialData implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n\n    @Attribute(primaryKey = true)\n    private Key key;\n\n    @Attribute(version = true)\n    private Long version;\n\n    private String accessToken;\n\n    private User user;\n    \n    /** ------- Setter/Getter -------------------------------------- **/\n\n    public Key getKey() {\n        return key;\n    }\n\n    public void setKey(Key key) {\n        this.key = key;\n    }\n\n    public Long getVersion() {\n        return version;\n    }\n\n    public void setVersion(Long version) {\n        this.version = version;\n    }\n\n\n    public User getUser() {\n        return user;\n    }\n\n    public void setUser(User user) {\n        this.user = user;\n    }\n\n    public String getAccessToken() {\n        return accessToken;\n    }\n\n    public void setAccessToken(String accessToken) {\n        this.accessToken = accessToken;\n    }\n}\n\n```\n\n```java:CredentialDataService.java\npackage test.service;\n\nimport java.util.List;\n\nimport org.slim3.datastore.Datastore;\n\nimport com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\nimport com.google.appengine.api.datastore.Transaction;\nimport com.google.appengine.api.users.User;\nimport com.google.appengine.api.users.UserService;\nimport com.google.appengine.api.users.UserServiceFactory;\n\nimport test.meta.CredentialDataMeta;\nimport test.model.CredentialData;\n\npublic class CredentialDataService {\n\n    private CredentialDataMeta t = new CredentialDataMeta();\n\n    /**\n     * OAuth\u8a3c\u660e\u60c5\u5831\u3092\u4fdd\u5b58\u3059\u308b\n     * \n     * @param credential\n     *            OAuth\u8a3c\u660e\u60c5\u5831\n     */\n    public void save(GoogleCredential credential) {\n        Transaction tx = Datastore.beginTransaction();\n\n        if (load() != null) {\n            delete();\n        }\n\n        UserService userService = UserServiceFactory.getUserService();\n        User user = userService.getCurrentUser();\n\n        CredentialData data = new CredentialData();\n        data.setUser(user);\n        data.setAccessToken(credential.getAccessToken());\n\n        Datastore.put(data);\n        tx.commit();\n    }\n\n    /**\n     * \u30ed\u30b0\u30a4\u30f3\u3057\u3066\u3044\u308b\u30e6\u30fc\u30b6\u306eOAuth\u8a3c\u660e\u60c5\u5831\u3092\u524a\u9664\u3059\u308b\n     */\n    public void delete() {\n        UserService userService = UserServiceFactory.getUserService();\n        User user = userService.getCurrentUser();\n\n        List<CredentialData> list =\n            Datastore.query(t).filter(t.user.equal(user)).asList();\n        for (CredentialData d : list) {\n            Datastore.delete(d.getKey());\n        }\n    }\n\n    /**\n     * \u30ed\u30b0\u30a4\u30f3\u3057\u3066\u3044\u308b\u30e6\u30fc\u30b6\u306eOAuth\u8a3c\u660e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\n     * \n     * @return OAuth\u8a3c\u660e\u60c5\u5831\n     */\n    public GoogleCredential load() {\n        UserService userService = UserServiceFactory.getUserService();\n        User user = userService.getCurrentUser();\n\n        List<CredentialData> list =\n            Datastore.query(t).filter(t.user.equal(user)).asList();\n\n        if (list.size() == 0) {\n            return null;\n        } else {\n            String accessToken = list.get(0).getAccessToken();\n            GoogleCredential credential =\n                new GoogleCredential().setAccessToken(accessToken);\n            return credential;\n        }\n    }\n}\n\n```", "tags": ["Slim3", "scenic3", "GAE"]}