{"context": " More than 1 year has passed since last update.\u9069\u5f53\u306b\u4f5c\u3063\u305f\u3002\nSDAsterNode::findPath()\u3092\u547c\u3073\u51fa\u305b\u3070\u3001\u30b4\u30fc\u30eb\u304b\u3089\u306e\u7d4c\u8def\u306eVector\u304c\u304b\u3048\u3063\u3066\u304f\u308b\u3002\n\u305d\u306e\u307e\u307e\u30b3\u30d4\u30fc\u3067\u306f\u4f7f\u3048\u306a\u3044\u304c\u3001\u4ee5\u4e0b\u3092\u5909\u3048\u308c\u3070\u52d5\u304f\u3002\n\u30fbMapPosition\u306fx,y,z\u306e\u5ea7\u6a19\u3068\u30de\u30c3\u30d7\u540d\u304c\u5165\u3063\u3066\u308b\u3002\u306e\u3067\u9069\u5b9cx,y\u306a\u3069\u306ecocos2d::Ref\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u306b\u3059\u308b\u3002\n\u30fb\u30ad\u30e3\u30e9\u30af\u30bf\u306f\u6bb5\u5dee1\u3092\u767b\u308a\u30012\u3092\u964d\u308a\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306bz\u5ea7\u6a19\u306e\u91cd\u307f\u4ed8\u3051\u3092\u3057\u3066\u3044\u308b\u3002\n\u30fbSDMapNode::makeTag\u306f\u3001x+y*100+z*10000\u306estring\u3092\u8fd4\u3059\u3002\n\nSDAstar.h`\n#pragma once\n#include \"SDMapPosition.h\"\n#include \"SDGameParts.h\"\n\nnamespace sevendays {\n\n    class SDAstarNode : public cocos2d::Ref{\n\n    public:\n        SDAstarNode(MapPosition *pos, int heuristic):m_mpos(pos), m_heuristic(heuristic) {\n            m_parent = nullptr;\n        };\n        int m_heuristic;\n        MapPosition *m_mpos;\n        SDAstarNode *m_parent;\n        static cocos2d::Vector<MapPosition *> findPath(\n                                                       MapPosition *start,\n                                                       MapPosition *end,\n                                                       const cocos2d::Map<std::string, SDGameParts *> jungleGym);\n    };\n\n\n};\n\n\n\nSDAstar.cpp`\n//\n// Created by Akinori ADACHI on 2014/07/09.\n// Wikipedia\u3092\u53c2\u8003\u306bA*\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5b9f\u88c5\u3057\u305f\n\n\n#include \"SDAstar.h\"\n#include \"SDMapPosition.h\"\n#include \"SDMapNode.h\"\n#include \"SDGameParts.h\"\n\nusing namespace sevendays;\nusing namespace cocos2d;\n\nstatic int _gAster(MapPosition *pos, MapPosition *start);\n\nstatic int _hAster(MapPosition *pos, MapPosition *end);\n\nstatic SDAstarNode *littleHeuristic(\n        MapPosition *start,\n        MapPosition *end,\n        Map<std::string, SDAstarNode *> nodes);\n\nVector<MapPosition *> SDAstarNode::findPath(\n        MapPosition *start,\n        MapPosition *end,\n        const cocos2d::Map<std::string, sevendays::SDGameParts *> jungleGym) {\n\n    Map<std::string, SDAstarNode *> opens;\n    Map<std::string, SDAstarNode *> closes;\n\n    std::vector<SDAstarNode *> path;\n\n    SDAstarNode *startNode = new SDAstarNode(start, _hAster(start, end));\n    SDAstarNode *endNode = nullptr;\n    opens.insert(SDMapNode::makeTag(start->m_x, start->m_y, start->m_z), startNode);\n\n    while (true) {\n        //OpenList\u304c\u7a7a\u306a\u3089\u63a2\u7d22\u5931\u6557\n        if (opens.empty()) {\n            break;\n        }\n\n        //\u30d2\u30e5\u30fc\u30ea\u30b9\u30c6\u30a3\u30c3\u30af\u304c\u6700\u5c0f\u306e\u30ce\u30fc\u30c9\u3092\u53d6\u308a\u51fa\u3059\n        auto node = littleHeuristic(start, end, opens);\n\n        //\u30b4\u30fc\u30eb\u3068\u4e00\u81f4\u306a\u3089\u63a2\u7d22\u7d42\u4e86\n        if (node->m_mpos->equalTo(end)) {\n            endNode = node;\n            break;\n        }\n\n\n        closes.insert(SDMapNode::makeTag(node->m_mpos->m_x, node->m_mpos->m_y, node->m_mpos->m_z), node);\n        opens.erase(SDMapNode::makeTag(node->m_mpos->m_x, node->m_mpos->m_y, node->m_mpos->m_z));\n\n        SDGameParts *currentCube = jungleGym.at(\n                SDMapNode::makeTag(node->m_mpos->m_x,\n                        node->m_mpos->m_y,\n                        node->m_mpos->m_z));\n        int currentHigh = currentCube->getHarf() ? 1 : 2;\n\n        //\u96a3\u63a5\u30ce\u30fc\u30c9\u306b\u5bfe\u3059\u308b\u64cd\u4f5c\n        for (int xoffs = -1; xoffs <= 1; xoffs++) {\n            for (int yoffs = -1; yoffs <= 1; yoffs++) {\n                int cost = 1;\n                if (yoffs == xoffs) {\n                    continue;\n                }\n                if (xoffs && yoffs) {\n                    continue;\n                }\n                if((node->m_mpos->m_x + xoffs) < 0 or (node->m_mpos->m_x + xoffs) > 13){\n                    continue;\n                }\n                if((node->m_mpos->m_y + yoffs) < 0 or (node->m_mpos->m_y + yoffs) > 13){\n                    continue;\n                }\n                for (int zoffs = -1; zoffs <= 1; zoffs++) {\n                    if(node->m_mpos->m_z + zoffs < 0){\n                        continue;\n                    }\n                    SDGameParts *cube = jungleGym.at(\n                            SDMapNode::makeTag(node->m_mpos->m_x + xoffs,\n                                    node->m_mpos->m_y + yoffs,\n                                    node->m_mpos->m_z + zoffs));\n\n                    if (!cube) {\n                        continue;\n                    }\n                    if (!(cube->getWalkable())) {\n                        continue;\n                    }\n                    int high = (cube->getHarf() ? 1 : 2) + zoffs * 2;\n                    if (high - currentHigh > 1) {\n                        continue;\n                    }\n                    if (high - currentHigh < -2) {\n                        continue;\n                    }\n\n                    //int gAster = _gAster(node->m_mpos, start);\n                    int gAster = node->m_heuristic - _hAster(node->m_mpos,end);\n                    int hAster = _hAster(MapPosition::createWithParams(\n                            node->m_mpos->m_mapId,\n                            (node->m_mpos->m_x + xoffs),\n                            (node->m_mpos->m_y + yoffs),\n                            (node->m_mpos->m_z + zoffs)), end);\n                    int heuristic = gAster + hAster + cost;\n\n                    SDAstarNode *nodeInOpen = opens.at(\n                            SDMapNode::makeTag(node->m_mpos->m_x + xoffs,\n                                    node->m_mpos->m_y + yoffs,\n                                    node->m_mpos->m_z + zoffs));\n                    if (nodeInOpen) {\n                        if (heuristic < nodeInOpen->m_heuristic) {\n                            nodeInOpen->m_heuristic = heuristic;\n                            nodeInOpen->m_parent = node;\n                        }\n                        continue;\n                    }\n\n                    SDAstarNode *nodeInClose = closes.at(\n                            SDMapNode::makeTag(node->m_mpos->m_x + xoffs,\n                                    node->m_mpos->m_y + yoffs,\n                                    node->m_mpos->m_z + zoffs));\n                    if (nodeInClose) {\n                        if (heuristic < nodeInClose->m_heuristic) {\n                            nodeInClose->m_heuristic = heuristic;\n                            nodeInClose->m_parent = node;\n                            opens.insert(SDMapNode::makeTag(node->m_mpos->m_x + xoffs,\n                                    node->m_mpos->m_y + yoffs,\n                                    node->m_mpos->m_z + zoffs), nodeInClose);\n                            closes.erase(SDMapNode::makeTag(node->m_mpos->m_x + xoffs,\n                                    node->m_mpos->m_y + yoffs,\n                                    node->m_mpos->m_z + zoffs));\n                        }\n                        continue;\n                    }\n                    SDAstarNode *newNode = new SDAstarNode(MapPosition::createWithParams(\n                            node->m_mpos->m_mapId,\n                            (node->m_mpos->m_x + xoffs),\n                            (node->m_mpos->m_y + yoffs),\n                            (node->m_mpos->m_z + zoffs)),\n                            heuristic);\n                    newNode->m_parent = node;\n                    opens.insert(SDMapNode::makeTag(node->m_mpos->m_x + xoffs,\n                            node->m_mpos->m_y + yoffs,\n                            node->m_mpos->m_z + zoffs), newNode);\n                }\n            }\n        }\n    }\n\n    //\n    Vector<MapPosition *> answer;\n    if (!endNode) {\n        return answer;\n    }\n    while (endNode->m_parent) {\n        answer.pushBack(endNode->m_parent->m_mpos);\n        endNode = endNode->m_parent;\n    }\n    return answer;\n}\n\n//g*(n)\nint _gAster(MapPosition *pos, MapPosition *start) {\n    int gAster = abs(pos->m_x - start->m_x)\n            + abs(pos->m_y - start->m_y)\n            + abs(pos->m_z - start->m_z);\n    return gAster;\n}\n\n//h*(n)\nint _hAster(MapPosition *pos, MapPosition *end) {\n    int hAster = abs(end->m_x - pos->m_x)\n            + abs(end->m_y - pos->m_y)\n            + abs(end->m_z - pos->m_z);\n    return hAster;\n}\n\n//\u6700\u5c0f\u306e f*(n)\u3092\u3082\u3064\u30ce\u30fc\u30c9\u3092\u53d6\u308a\u51fa\u3059\nSDAstarNode *littleHeuristic(\n        MapPosition *start,\n        MapPosition *end,\n        Map<std::string, SDAstarNode *> nodes) {\n    int min = INT_MAX;\n    SDAstarNode *littleHeuristic = nullptr;\n    for (std::pair<std::string, SDAstarNode *> pair: nodes) {\n        SDAstarNode *node = pair.second;\n        int heuristic = _gAster(node->m_mpos, start) + _hAster(node->m_mpos, end);\n        if (min > heuristic) {\n            min = heuristic;\n            littleHeuristic = node;\n        }\n    }\n    return littleHeuristic;\n}\n\n\n\u9069\u5f53\u306b\u4f5c\u3063\u305f\u3002\n\nSDAsterNode::findPath()\u3092\u547c\u3073\u51fa\u305b\u3070\u3001\u30b4\u30fc\u30eb\u304b\u3089\u306e\u7d4c\u8def\u306eVector\u304c\u304b\u3048\u3063\u3066\u304f\u308b\u3002\n\u305d\u306e\u307e\u307e\u30b3\u30d4\u30fc\u3067\u306f\u4f7f\u3048\u306a\u3044\u304c\u3001\u4ee5\u4e0b\u3092\u5909\u3048\u308c\u3070\u52d5\u304f\u3002\n\u30fbMapPosition\u306fx,y,z\u306e\u5ea7\u6a19\u3068\u30de\u30c3\u30d7\u540d\u304c\u5165\u3063\u3066\u308b\u3002\u306e\u3067\u9069\u5b9cx,y\u306a\u3069\u306ecocos2d::Ref\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u306b\u3059\u308b\u3002\n\u30fb\u30ad\u30e3\u30e9\u30af\u30bf\u306f\u6bb5\u5dee1\u3092\u767b\u308a\u30012\u3092\u964d\u308a\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306bz\u5ea7\u6a19\u306e\u91cd\u307f\u4ed8\u3051\u3092\u3057\u3066\u3044\u308b\u3002\n\u30fbSDMapNode::makeTag\u306f\u3001x+y*100+z*10000\u306estring\u3092\u8fd4\u3059\u3002\n\n```C++:SDAstar.h`\n#pragma once\n#include \"SDMapPosition.h\"\n#include \"SDGameParts.h\"\n\nnamespace sevendays {\n    \n    class SDAstarNode : public cocos2d::Ref{\n\n    public:\n        SDAstarNode(MapPosition *pos, int heuristic):m_mpos(pos), m_heuristic(heuristic) {\n            m_parent = nullptr;\n        };\n        int m_heuristic;\n        MapPosition *m_mpos;\n        SDAstarNode *m_parent;\n        static cocos2d::Vector<MapPosition *> findPath(\n                                                       MapPosition *start,\n                                                       MapPosition *end,\n                                                       const cocos2d::Map<std::string, SDGameParts *> jungleGym);\n    };\n\n\n};\n```\n\n```C++:SDAstar.cpp`\n//\n// Created by Akinori ADACHI on 2014/07/09.\n// Wikipedia\u3092\u53c2\u8003\u306bA*\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5b9f\u88c5\u3057\u305f\n\n\n#include \"SDAstar.h\"\n#include \"SDMapPosition.h\"\n#include \"SDMapNode.h\"\n#include \"SDGameParts.h\"\n\nusing namespace sevendays;\nusing namespace cocos2d;\n\nstatic int _gAster(MapPosition *pos, MapPosition *start);\n\nstatic int _hAster(MapPosition *pos, MapPosition *end);\n\nstatic SDAstarNode *littleHeuristic(\n        MapPosition *start,\n        MapPosition *end,\n        Map<std::string, SDAstarNode *> nodes);\n\nVector<MapPosition *> SDAstarNode::findPath(\n        MapPosition *start,\n        MapPosition *end,\n        const cocos2d::Map<std::string, sevendays::SDGameParts *> jungleGym) {\n\n    Map<std::string, SDAstarNode *> opens;\n    Map<std::string, SDAstarNode *> closes;\n\n    std::vector<SDAstarNode *> path;\n\n    SDAstarNode *startNode = new SDAstarNode(start, _hAster(start, end));\n    SDAstarNode *endNode = nullptr;\n    opens.insert(SDMapNode::makeTag(start->m_x, start->m_y, start->m_z), startNode);\n\n    while (true) {\n        //OpenList\u304c\u7a7a\u306a\u3089\u63a2\u7d22\u5931\u6557\n        if (opens.empty()) {\n            break;\n        }\n\n        //\u30d2\u30e5\u30fc\u30ea\u30b9\u30c6\u30a3\u30c3\u30af\u304c\u6700\u5c0f\u306e\u30ce\u30fc\u30c9\u3092\u53d6\u308a\u51fa\u3059\n        auto node = littleHeuristic(start, end, opens);\n\n        //\u30b4\u30fc\u30eb\u3068\u4e00\u81f4\u306a\u3089\u63a2\u7d22\u7d42\u4e86\n        if (node->m_mpos->equalTo(end)) {\n            endNode = node;\n            break;\n        }\n        \n\n        closes.insert(SDMapNode::makeTag(node->m_mpos->m_x, node->m_mpos->m_y, node->m_mpos->m_z), node);\n        opens.erase(SDMapNode::makeTag(node->m_mpos->m_x, node->m_mpos->m_y, node->m_mpos->m_z));\n\n        SDGameParts *currentCube = jungleGym.at(\n                SDMapNode::makeTag(node->m_mpos->m_x,\n                        node->m_mpos->m_y,\n                        node->m_mpos->m_z));\n        int currentHigh = currentCube->getHarf() ? 1 : 2;\n\n        //\u96a3\u63a5\u30ce\u30fc\u30c9\u306b\u5bfe\u3059\u308b\u64cd\u4f5c\n        for (int xoffs = -1; xoffs <= 1; xoffs++) {\n            for (int yoffs = -1; yoffs <= 1; yoffs++) {\n                int cost = 1;\n                if (yoffs == xoffs) {\n                    continue;\n                }\n                if (xoffs && yoffs) {\n                    continue;\n                }\n                if((node->m_mpos->m_x + xoffs) < 0 or (node->m_mpos->m_x + xoffs) > 13){\n                    continue;\n                }\n                if((node->m_mpos->m_y + yoffs) < 0 or (node->m_mpos->m_y + yoffs) > 13){\n                    continue;\n                }\n                for (int zoffs = -1; zoffs <= 1; zoffs++) {\n                    if(node->m_mpos->m_z + zoffs < 0){\n                        continue;\n                    }\n                    SDGameParts *cube = jungleGym.at(\n                            SDMapNode::makeTag(node->m_mpos->m_x + xoffs,\n                                    node->m_mpos->m_y + yoffs,\n                                    node->m_mpos->m_z + zoffs));\n                    \n                    if (!cube) {\n                        continue;\n                    }\n                    if (!(cube->getWalkable())) {\n                        continue;\n                    }\n                    int high = (cube->getHarf() ? 1 : 2) + zoffs * 2;\n                    if (high - currentHigh > 1) {\n                        continue;\n                    }\n                    if (high - currentHigh < -2) {\n                        continue;\n                    }\n\n                    //int gAster = _gAster(node->m_mpos, start);\n                    int gAster = node->m_heuristic - _hAster(node->m_mpos,end);\n                    int hAster = _hAster(MapPosition::createWithParams(\n                            node->m_mpos->m_mapId,\n                            (node->m_mpos->m_x + xoffs),\n                            (node->m_mpos->m_y + yoffs),\n                            (node->m_mpos->m_z + zoffs)), end);\n                    int heuristic = gAster + hAster + cost;\n\n                    SDAstarNode *nodeInOpen = opens.at(\n                            SDMapNode::makeTag(node->m_mpos->m_x + xoffs,\n                                    node->m_mpos->m_y + yoffs,\n                                    node->m_mpos->m_z + zoffs));\n                    if (nodeInOpen) {\n                        if (heuristic < nodeInOpen->m_heuristic) {\n                            nodeInOpen->m_heuristic = heuristic;\n                            nodeInOpen->m_parent = node;\n                        }\n                        continue;\n                    }\n\n                    SDAstarNode *nodeInClose = closes.at(\n                            SDMapNode::makeTag(node->m_mpos->m_x + xoffs,\n                                    node->m_mpos->m_y + yoffs,\n                                    node->m_mpos->m_z + zoffs));\n                    if (nodeInClose) {\n                        if (heuristic < nodeInClose->m_heuristic) {\n                            nodeInClose->m_heuristic = heuristic;\n                            nodeInClose->m_parent = node;\n                            opens.insert(SDMapNode::makeTag(node->m_mpos->m_x + xoffs,\n                                    node->m_mpos->m_y + yoffs,\n                                    node->m_mpos->m_z + zoffs), nodeInClose);\n                            closes.erase(SDMapNode::makeTag(node->m_mpos->m_x + xoffs,\n                                    node->m_mpos->m_y + yoffs,\n                                    node->m_mpos->m_z + zoffs));\n                        }\n                        continue;\n                    }\n                    SDAstarNode *newNode = new SDAstarNode(MapPosition::createWithParams(\n                            node->m_mpos->m_mapId,\n                            (node->m_mpos->m_x + xoffs),\n                            (node->m_mpos->m_y + yoffs),\n                            (node->m_mpos->m_z + zoffs)),\n                            heuristic);\n                    newNode->m_parent = node;\n                    opens.insert(SDMapNode::makeTag(node->m_mpos->m_x + xoffs,\n                            node->m_mpos->m_y + yoffs,\n                            node->m_mpos->m_z + zoffs), newNode);\n                }\n            }\n        }\n    }\n\n    //\n    Vector<MapPosition *> answer;\n    if (!endNode) {\n        return answer;\n    }\n    while (endNode->m_parent) {\n        answer.pushBack(endNode->m_parent->m_mpos);\n        endNode = endNode->m_parent;\n    }\n    return answer;\n}\n\n//g*(n)\nint _gAster(MapPosition *pos, MapPosition *start) {\n    int gAster = abs(pos->m_x - start->m_x)\n            + abs(pos->m_y - start->m_y)\n            + abs(pos->m_z - start->m_z);\n    return gAster;\n}\n\n//h*(n)\nint _hAster(MapPosition *pos, MapPosition *end) {\n    int hAster = abs(end->m_x - pos->m_x)\n            + abs(end->m_y - pos->m_y)\n            + abs(end->m_z - pos->m_z);\n    return hAster;\n}\n\n//\u6700\u5c0f\u306e f*(n)\u3092\u3082\u3064\u30ce\u30fc\u30c9\u3092\u53d6\u308a\u51fa\u3059\nSDAstarNode *littleHeuristic(\n        MapPosition *start,\n        MapPosition *end,\n        Map<std::string, SDAstarNode *> nodes) {\n    int min = INT_MAX;\n    SDAstarNode *littleHeuristic = nullptr;\n    for (std::pair<std::string, SDAstarNode *> pair: nodes) {\n        SDAstarNode *node = pair.second;\n        int heuristic = _gAster(node->m_mpos, start) + _hAster(node->m_mpos, end);\n        if (min > heuristic) {\n            min = heuristic;\n            littleHeuristic = node;\n        }\n    }\n    return littleHeuristic;\n}\n```\n", "tags": ["cocos2d-x3.1", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"]}