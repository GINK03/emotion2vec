{"context": " More than 1 year has passed since last update.\u3053\u306e\u8a18\u4e8b\u306f\u8a00\u8a9e\u51e6\u7406\u7cfb Advent Calender\uff17\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\u4eca\u65e5\u306f\u3001ML\u7cfb\u306e\u8a00\u8a9e\u306e\u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30c8\u306e\u4f8bats-beautify[1]\u306b\u3064\u3044\u3066\u66f8\u304d\u307e\u3059\u3002ats-beautify\u306fpython\u3060\u3051\u3067\u5b9f\u88c5\u3057\u3066\u3042\u308a\u3001sublime-text2\u306e\u30d7\u30e9\u30b0\u30a4\u30f3\u3068\u3057\u3066\u4f7f\u3063\u305f\u308a\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u547c\u3073\u51fa\u3057\u3092\u4f7f\u3044\u69d8\u3005\u306a\u30a8\u30c7\u30a3\u30bf\u304b\u3089\u4f7f\u7528\u3059\u308b\u4e8b\u304c\u51fa\u6765\u307e\u3059\u3002\n\n\u30e2\u30c1\u30d9\u30fc\u30b7\u30e7\u30f3\nATS2\u3068\u3044\u3046SML\u306b\u4f3c\u305f\u6587\u6cd5\u3092\u6301\u3063\u305f\u8a00\u8a9e\u304c\u3042\u308a\u307e\u3059\u3002\nATS\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u30b3\u30fc\u30c9\u306b\u8a3c\u660e\u3092\u4ed8\u3051\u308b\u4e8b\u304c\u51fa\u6765\u308b\u306e\u3067\u5b89\u5168\u306a\u30b3\u30fc\u30c9\u3092\u69cb\u7bc9\u51fa\u6765\u307e\u3059\u3002\u3057\u304b\u3082\u3001C\u8a00\u8a9e\u3092\u51fa\u529b\u3059\u308b\u306e\u3067C\u8a00\u8a9e\u306e\u30bd\u30fc\u30b9\u306e\u4e00\u90e8\u5206\u3060\u3051\u3092ATS\u304c\u51fa\u529b\u3057\u305f\u30b3\u30fc\u30c9\u306b\u7f6e\u304d\u63db\u3048\u3066\u8a3c\u660e\u4ed8\u304d\u306e\u5b8c\u5168\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u7f6e\u304d\u63db\u3048\u3066\u76f4\u3050\u306b\u4f7f\u3046\u4e8b\u304c\u51fa\u6765\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u4f5c\u8005\u306e\u30db\u30f3\u30b0\u30a6\u30a7\u30a4\u306e\u66f8\u304f\u30d7\u30ed\u30b0\u30e9\u30e0\u30b3\u30fc\u30c9\u306f\u8aad\u307f\u3084\u3059\u3044\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u3068\u306f\u8a00\u3048\u3001\u8a00\u8a9e\u306e\u4f5c\u8005\u3067\u3059\u3002\u305d\u308c\u306a\u308a\u306e\u3053\u3060\u308f\u308a\u3092\u6301\u3063\u3066\u66f8\u3044\u3066\u3044\u308b\u306f\u305a\u3067\u3059\u3002\n\u5947\u9e97\u306b\u66f8\u304d\u76f4\u3057\u3066\u304f\u308c\u3068\u304a\u9858\u3044\u3057\u3066\u3082\u306a\u304b\u306a\u304b\u53d7\u3051\u5165\u308c\u3066\u3082\u3089\u3048\u306a\u3044\u3088\u3046\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\n\u3057\u3063\u304b\u308a\u3057\u305f\u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30bf\u3092\u66f8\u3044\u3066\u3053\u308c\u3092\u4f7f\u3048\u3070\u5947\u9e97\u306b\u306a\u308b\u3088\u3068\u3044\u3046\u8a71\u306b\u3059\u308c\u3070\u3088\u3044\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u601d\u3063\u305f\u8a33\u3067\u3059\u3002\n\u3068\u308a\u3042\u3048\u305aOCaml\u3092\u53c2\u8003\u306b\u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30bf\u3092\u4f5c\u308c\u3070\u3044\u3044\u3058\u3083\u306a\u3044\u304b\u3068\u601d\u3063\u305f\u8a33\u3067\u3059\u3002\n\u304cC\u8a00\u8a9e\u7cfb\u7d71\u306e\u8a00\u8a9e\u3084Ruby\u306e\u3088\u3046\u306bend\u3067\u7d42\u308f\u308b\u8a00\u8a9e\u3068\u9055\u3044ML\u7cfb\u7d71\u306e\u8a00\u8a9e\u306e\u30d3\u30e5\u30fc\u30c6\u30a3\u30d5\u30a1\u30a4\u30a2\u306f\u4f5c\u308b\u306e\u304c\u3061\u3087\u3044\u3068\u5927\u5909\u3067\u3001\u7c21\u5358\u306b\u4f5c\u308c\u305d\u3046\u306b\u306a\u304b\u3063\u305f\u3002\n\u30d1\u30fc\u30b5\u3092\u4fee\u6b63\u3059\u308b\u4e8b\u3067\u3042\u308b\u7a0b\u5ea6\u306e\u7269\u306f\u4f5c\u308c\u305f\u306e\u3067\u3059\u304c\u3001\u69cb\u6587\u6728\u306b\u306f\u306a\u3044\u60c5\u5831\u304c\u5fc5\u8981\u3067\u4e0a\u624b\u304f\u884c\u304d\u307e\u305b\u3093\u3002\nOCaml\u306e\u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30bf\u306f\u72ec\u81ea\u306b\u30d1\u30fc\u30b5\u3092\u6301\u3063\u3066\u3044\u305f\u308a\u3068\u5927\u5909\u305d\u3046\u3067\u3059\uff01\n\u3046\u3046\u3080\u3002\u697d\u306b\u5947\u9e97\u306b\u4f5c\u308a\u305f\u3044\u3002\u3057\u304b\u3057\u4f5c\u308c\u306a\u3044\u3002\u305d\u3093\u306a\u72b6\u6cc1\u304c\u7d9a\u3044\u3066\u304a\u308a\u307e\u3057\u305f\u3002\n\u590f\u9803\u306b PEG\u3068\u69cb\u6587\u89e3\u6790\u306b\u95a2\u3059\u308b\u30a2\u30ec\u30b3\u30ec\u306e\u52c9\u5f37\u4f1a Vol.1 [2]\u3068\u3044\u3046\u52c9\u5f37\u4f1a\u304c\u3042\u308a\u307e\u3057\u305f\u3002\u4f55\u304b\u30cd\u30bf\u306a\u3044\u304b\u306a\u3068\u8003\u3048\u3066\u307f\u3066\u3044\u3066\u3075\u3068\u601d\u3044\u3064\u304d\u307e\u3057\u305f\u3002\n\u300c\u305d\u3046\u3060\uff01\u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3092\u4f5c\u3063\u3066\u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30bf\u3092\u4f5c\u308d\u3046\uff01\u300d\n\u305d\u3053\u3067\u3001\u6587\u6cd5\u306b\u30cd\u30b9\u30c8\u60c5\u5831\u3092\u52a0\u3048\u308b\u4e8b\u304c\u51fa\u6765\u308b\u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3092\u4f5c\u6210\u3057\u3066\u307f\u305f\u306e\u3067\u3059\u3002\n\u3053\u308c\u306a\u3089\u884c\u3051\u308b\u3002\u3042\u308b\u7a0b\u5ea6\u4f5c\u308c\u308b\u4e8b\u304c\u5206\u304b\u308a\u307e\u3057\u305f\u3002\n\n\u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30bf\u306e\u4f7f\u3044\u65b9\nparse(src)\n\n\u30d1\u30fc\u30b9\u95a2\u6570\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u6e21\u3059\u3068\u3001\u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30c8\u3055\u308c\u305f\u6587\u5b57\u5217\u304c\u304b\u3048\u3063\u3066\u304d\u307e\u3059\u3002\n\n\u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30bf\u6a5f\u80fd\u4ed8\u304d\u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306e\u4f7f\u3044\u65b9\n\u3044\u304d\u306a\u308a\u30c7\u30ab\u3044\u3067\u3059\u304c\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\u5b8c\u5168\u3067\u306f\u306a\u3044\u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30c8\u3055\u3048\u51fa\u6765\u308c\u3070\u826f\u3044\u3088\u3046\u306a\u3001ATS\u306e\u30d1\u30fc\u30b5\u3092\u66f8\u304d\u307e\u3059\u3002\n\u30dd\u30a4\u30f3\u30c8\u306f\u3001\u30cd\u30b9\u30c8\u3092\u5165\u308c\u305f\u3044\u6240\u306b-\u3092\u66f8\u304f\u3068\u30cd\u30b9\u30c8\u304c\u4ed8\u304d\u307e\u3059\u3002\u306a\u305c-\u306b\u3057\u305f\u304b\u3068\u3044\u3046\u3068\u3001SublimeText2\u3067-\u304c\u5947\u9e97\u306b\u8272\u304c\u3064\u3044\u305f\u304b\u3089\u3067\u3059\u3002\n\u6587\u6cd5\u306e\u4f5c\u308a\u65b9\u306f\u3001\u304d\u3063\u3068\u3001\u4f7f\u3044\u6163\u308c\u308c\u3070\u5206\u304b\u308a\u307e\u3059\u3002python\u306e\u5834\u5408\u6f14\u7b97\u5b50\u3092\u591a\u304f\u4f7f\u3048\u306a\u3044\u306e\u3067\u3001go\u306e\u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3092\u53c2\u8003\u306b\u3001a / b / c\u3092 or(a,b,c)\u3068\u66f8\u304f\u3088\u3046\u306b\u3057\u3066\u3042\u308a\u307e\u3059\u304c\u3001\u4f7f\u3044\u6163\u308c\u306a\u3044\u3068\u5206\u3051\u5206\u304b\u3089\u306a\u3044\u6c17\u3082\u3057\u307e\u3059\u3002\u307e\u3001\u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306a\u3093\u3066\u304d\u3063\u3068\u305d\u3046\u3044\u3046\u3082\u306e\u3067\u3059\u3002\nkeywords = reg(r\"^(begin|end|if|else|then|let|in|val|implement|local|typedef|sortdef|datatype|extern|lam|try|with|fnx|fn|fun|case|of|orelse|macrodef|macdef|staload|dynload|open|struct|module|and|while|do|done)\\b\")\nsemi = notp(\";;\") >> p(\";\")\nexp = p(lambda i: p(exp4, rep[semi, exp4], opt(semi))(i))\nexps = p(exp, opt(semi))\nid = orp(\n    notp(keywords) >> reg(r\"^[\\$\\\\]?[_a-zA-Z0-9]+\"),\n    str(\":<cloref>\"),\n    reg(r'^[+\\-*/.<>:@=^|~?]+') ^ (lambda i: i if re.search(r'^(=|=>|=<|->|\\||)$', i[1]) is None else None),\n    reg(r'^[!]'),\n    reg(r'^(\"(\\\\.|[^\"])*\"|\\'(\\\\.|[^\\'])\\')')\n)\nassign = p(lambda i: p(app, \"=\", -exp)(i))\nsexp = orp(\n    p(\"@(\", -opt(exp), \")\"),\n    p(\"@{\", -p(assign, rep(\",\", assign)), \"}\"),\n    p(\"@[\", -opt(exp), \"]\"),\n    p(\"'(\", -opt(exp), \")\"),\n    p(\",(\", -opt(exp), \")\"),\n    p(\"'{\", -p(assign, rep(\",\", assign)), \"}\"),\n    p(\"'[\", -opt(exp), \"]\"),\n    id,\n    p(\"begin\", -exp, \"end\"),\n    p(\"(\", -opt(exp), \")\"),\n    p(\"{\", -p(lambda i: rep(toplevel)(i)), \"}\"),\n    p(\"[\", -opt(exp), \"]\")\n)\napp = rep1(sexp)\nexp1 = orp(\n    p(\"lam\", -p[app], orp(\"=>\", \"=<cloptr1>\", \"=<cloref>\"), -p(lambda i: exp2(i))),\n    p(\"let\", -p(lambda i: rep(toplevel, opt(\";;\"))(i)), \"in\", -opt(exp), \"end\"),\n    p(\"if\", -exps, \"then\", -p(lambda i: exp4(i)), opt(p(\"else\", exp))),\n    p(\"case\", -exps, \"of\", -p(opt(\"|\"), app, \"=>\", -exp, rep(\"|\", app, \"=>\", -exp))),\n    p(\"try\", -exps, \"with\", opt(\"|\"), -app, \"=>\", exp, rep[\"|\", app, \"=>\", -exp]),\n    p(\"while\", -exps, \"do\", -exps, \"done\"),\n    app\n)\n\nexp2 = p(exp1, opt(orp(\"=\", \"orelse\"), p(lambda i: exp2(i))))\nexp3 = p(exp2, rep(\",\", exp2))\nexp4 = p(exp3, opt(\"->\", exp))\nprog = p(lambda i: rep(toplevel)(i))\nstruct = p(lambda i: orp(\n    p(\"struct\", -prog, \"end\"),\n    -struct_exp\n)(i))\nstruct_exp = rep1(orp(\n    id,\n    p(\"(\", -opt(struct), \")\")\n))\ndatatype = p[app, \"=\", opt(\"|\"), -app, opt(\"of\", -app), rep(\"|\", -app, opt(\"of\", -app))]\ntoplevel = orp(\n    p(orp(\"fn\", \"fnx\", \"fun\"), -p[app], opt(\"=\", -exp)),\n    p(\"extern\", -p[orp(\"fn\", \"fnx\", \"fun\"), app]),\n    p(orp(\"macdef\", \"macrodef\"), -p[app], opt(\"=\", -exp)),\n    p(\"val\", -p[app], \"=\", -exp),\n    p(\"implement\", -p[app], \"=\", -exp),\n    p(orp(\"typedef\", \"sortdef\"), -p[app], \"=\", -exp),\n    p(\"and\", -p[app], \"=\", -exp),\n    p(orp(\"#include\", \"staload\", \"dynload\"), -exp),\n    p(\"#define\", -sexp, opt(\"(\", -exps, \")\"), -sexp),\n    p(\"local\", -p[prog], \"in\", -p[prog], \"end\"),\n    p(\"datatype\", -datatype, rep(\"and\", -datatype)),\n    p(\"exception\", -id, \"of\", -exp),\n    p(\"open\", -p[id, rep(\".\", id)]),\n    p(exp, opt(semi)),\n    p(\"module\", -p[app], \"=\", struct)\n)\n\n\n\u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30bf\u6a5f\u80fd\u4ed8\u304d\u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306e\u5b9f\u88c5\n\u307e\u305a\u306f\u3001\u7c21\u5358\u306a\u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u308a\u307e\u3059\u3002\n\u5b9f\u88c5\u7528\u306e\u8a00\u8a9e\u306fsublimetext2\u3067\u4f7f\u3044\u305f\u304b\u3063\u305f\u306e\u3067python\u3067\u3059\u3002python\u306fclass\u304c\u3042\u308a\u3001\u6f14\u7b97\u5b50\u306f\u3061\u3087\u3063\u3068\u3060\u3051\u5909\u66f4\u51fa\u6765\u307e\u3059\u3002\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u3092\u4f7f\u3046\u624b\u3082\u3042\u308a\u307e\u3059\u304c\u3001go\u306e\u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf goparsec[3]\u3092\u53c2\u8003\u306b\u95a2\u6570\u3092\u4f7f\u3046\u4e8b\u306b\u3057\u307e\u3057\u305f\u3002\nimport re\nimport sys\n\nsys.setrecursionlimit(1000*1000)\n\n\nclass Parser(object):\n    def __rshift__(self, that):\n        return p(self, that) ^ (lambda a: a[1])\n\n    def __lshift__(self, that):\n        return p(self, that) ^ (lambda a: a[0])\n\n    def __xor__(self, that):\n        return Action(self, that)\n\n    def __neg__(self):\n        return Action(self, lambda a: [NestP, a, NestM])\n\n    class static(type):\n        def __getitem__(self, i):\n            return self(*i) if isinstance(i, tuple) else self(i)\n    __metaclass__ = static\n\n\nclass nreg(Parser):\n    def __init__(self, param):\n        self.param = re.compile(param)\n\n    def __call__(self, i):\n        m = self.param.search(i)\n        return None if m is None else [m.group(0), i[len(m.group(0)):]]\n\n\nclass orp(Parser):\n    def __init__(self, *params):\n        self.params = map(lambda v: st(v) if isinstance(v, basestring) else v, params)\n\n    def __call__(self, i):\n        for v in self.params:\n            r = v(i)\n            if r is not None:\n                return r\n        return None\n\n\nclass nstr(Parser):\n    def __init__(self, param):\n        self.param = param\n\n    def __call__(self, i):\n        return None if not i.startswith(self.param) else [self.param, i[len(self.param):]]\n\n\nclass p(Parser):\n    def __init__(self, *params):\n        self.params = map(lambda v: st(v) if isinstance(v, basestring) else v, params)\n\n    def __call__(self, i):\n        rs = []\n        for v in self.params:\n            r = v(i)\n            if r is None:\n                return None\n            rs.append(r[0])\n            i = r[1]\n        return [rs, i]\n\n\nclass Action(Parser):\n    def __init__(self, thiz, action):\n        self.thiz = thiz\n        self.action = action\n\n    def __call__(self, i):\n        r = self.thiz(i)\n        if r is None:\n            return None\n        else:\n            r2 = self.action(r[0])\n            return None if r2 is None else [r2, r[1]]\n\n\nclass opt(Parser):\n    def __init__(self, *thiz):\n        self.thiz = p(*thiz)\n\n    def __call__(self, i):\n        r = self.thiz(i)\n        return [[], i] if r is None else r\n\n\nclass rep(Parser):\n    def __init__(self, *thiz):\n        self.thiz = p(*thiz)\n\n    def __call__(self, i):\n        rs = []\n        while(True):\n            r = self.thiz(i)\n            if r is None:\n                return [rs, i]\n            rs.append(r[0])\n            i = r[1]\n\n\ndef rep1(*thiz):\n    return rep(*thiz) ^ (lambda p: None if len(p) < 1 else p)\n\n\nclass notp(Parser):\n    def __init__(self, *thiz):\n        self.thiz = orp(*thiz)\n\n    def __call__(self, i):\n        return [[], i] if self.thiz(i) is None else None\n\n\nclass Any1(Parser):\n    def __call__(self, i):\n        return None if len(i) == 0 else [i[0], i[1:]]\nany1 = Any1()\n\n\u3053\u308c\u3092\u3042\u308b\u7a0b\u5ea6\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u307e\u3059\u3002\nblockcomment = p(nstr(\"(*\"), rep(orp(notp(nreg(r\"^(\\(\\*|\\*\\))\"), any1), (lambda i: blockcomment(i)))), nstr(\"*)\"))\nskip = rep(orp(nreg(r'^(\\s|/\\*.*?\\*/|//[^\\r\\n]*)+'), blockcomment))\n\ndef st(s):\n    return p(skip, nstr(s))\n\n\ndef reg(s):\n    return p(skip, nreg(s))\n\n\u3053\u3053\u3067\u3001\u30cd\u30b9\u30c8\u7528\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\uff12\u3064\u4f5c\u308a\u307e\u3059\u3002\nclass Nest:\n    def __init__(self, name, n):\n        self.name = name\n        self.n = n\n\n    def __repr__(self):\n        return self.name\nNestP = Nest(\"NestP\", 1)\nNestM = Nest(\"NestM\", -1)\n\nNestP\u304c\u30cd\u30b9\u30c8\u3092\uff11\u3064\u4e0a\u3052\u3001NestM\u304c\u4e00\u3064\u4e0b\u3052\u308b\u610f\u5473\u3067\u3059\u3002\n\u3053\u308c\u306f\u3001Parser\u30af\u30e9\u30b9\u306e__neg__\u3092\u4f7f\u3063\u3066\u3001-\u3092\u4ed8\u3051\u308b\u3068\u3001\u30d1\u30fc\u30b5\u306e\u524d\u5f8c\u306bNestP\u3068NestM\u3092\u4ed8\u3051\u308b\u4e8b\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\n\u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30c8\n\u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30c8\u306e\u95a2\u6570\u306fflat\u3068cnv\u306e\uff12\u3064\u306e\u95a2\u6570\u3067\u69cb\u6210\u3055\u308c\u307e\u3059\u3002\n\u30d1\u30fc\u30b9\u7d50\u679c\u306b\u306f\u3001\u5168\u3066\u306e\u30c8\u30fc\u30af\u30f3\uff0b\u30cd\u30b9\u30c8\u60c5\u5831\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u30cd\u30b9\u30c8\u60c5\u5831\u3092\u3067\u7a7a\u767d\u3092\u8abf\u6574\u3057\u3066\u51fa\u529b\u3059\u308b\u3060\u3051\u3067\u3059\u3002\ndef flat(a, rc):\n    if isinstance(a, list):\n        for i in a:\n            rc = flat(i, rc)\n    else:\n        rc.append(a)\n    return rc\n\n\ndef cnv(e):\n    reg2 = re.compile(r'\\n')\n    whiteSpace = re.compile(r'^(\\s|\\s*\\(\\*)')\n    reg1 = re.compile(r'\\n')\n\n    e = flat(e, [])\n    e2 = []\n    i = 0\n    while(i < len(e)):\n        s = [e[i]]\n        if isinstance(s[0], basestring) and reg2.search(s[0]) is not None and whiteSpace.search(s[0]) is not None:\n            s = []\n            while(i < len(e)):\n                s2 = e[i]\n                if s2 is NestM:\n                    e2.append(s2)\n                else:\n                    s.append(s2)\n                    if whiteSpace.search(s2) is None:\n                        break\n                i += 1\n        i += 1\n        e2.extend(s)\n\n    nest = 0\n    e3 = []\n    for s in e2:\n        if isinstance(s, Nest):\n            nest += s.n\n        else:\n            m = reg2.search(s)\n            if m is not None:\n                s = reg1.sub(\"\\n\"+(\"  \" * nest), s)\n            e3.append(s)\n    return \"\".join(e3)\n\n\u3053\u308c\u3089\u306e\u6a5f\u80fd\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\nregparse = re.compile(r\"^[ \\t]+\", re.M)\n\n\ndef parse(s):\n    return cnv(prog(regparse.sub(\"\", s)))\n\n\n\u307e\u3068\u3081\n\n\u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30bf\u4f5c\u6210\u5c02\u7528\u306e\u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3092\u4f5c\u308a\u307e\u3059\u3002\n\u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306f\u81ea\u52d5\u7684\u306b\u69cb\u6587\u6728\u3092\u4f5c\u308a\u3001\u7a7a\u767d\u3084\u30b3\u30e1\u30f3\u30c8\u3092\u542b\u3081\u305f\u30c8\u30fc\u30af\u30f3\u60c5\u5831\u3092\u6301\u3061\u307e\u3059\u3002\n\u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306b\u30cd\u30b9\u30c8\u60c5\u5831\u3092\u52a0\u3048\u308b\u4e8b\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\u30cd\u30b9\u30c8\u60c5\u5831\u3092\u5143\u306b\u30d7\u30ea\u30f3\u30c8\u3059\u308b\u51e6\u7406\u3092\u4f5c\u308a\u307e\u3059\u3002\n\u5b8c\u5168\u3067\u306f\u306a\u304f\u3066\u826f\u3044\u306e\u3067\u3001\u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30c8\u7528\u306e\u30d1\u30fc\u30b5\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n\u4ee5\u4e0a\u306e\u3088\u3046\u306b\u3059\u308b\u4e8b\u3067\u3001\u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30c8\u3092\u4f5c\u308b\u4e8b\u304c\u51fa\u6765\u307e\u3059\u3002\nATS\u306e\u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30bf\u306f\u307e\u3060\u5b8c\u5168\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u3053\u306e\u30d1\u30fc\u30b5\u3092\u62e1\u5f35\u3057\u3066\u884c\u3051\u3070\u3088\u308a\u826f\u3044\u7269\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002\u307e\u305f\u3001\u3053\u306e\u4ed5\u7d44\u307f\u3092\u4f7f\u3048\u3070\u4ed6\u306eML\u7cfb\u306e\u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30bf\u3082\u5947\u9e97\u306b\u66f8\u304f\u4e8b\u304c\u51fa\u6765\u308b\u306f\u305a\u3067\u3059\u3002\n\n\u30ea\u30f3\u30af\n\n[1] ats/beautify\nhttps://github.com/hsk/docs/tree/master/ats/beautify\n[2] PEG\u3068\u69cb\u6587\u89e3\u6790\u306b\u95a2\u3059\u308b\u30a2\u30ec\u30b3\u30ec\u306e\u52c9\u5f37\u4f1a Vol.1\nhttp://connpass.com/event/16630/\n[3] goparsec\nhttps://github.com/prataprc/goparsec\n\n\u3053\u306e\u8a18\u4e8b\u306f[\u8a00\u8a9e\u51e6\u7406\u7cfb Advent Calender](http://qiita.com/advent-calendar/2015/lang_dev)\uff17\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n\u4eca\u65e5\u306f\u3001ML\u7cfb\u306e\u8a00\u8a9e\u306e\u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30c8\u306e\u4f8bats-beautify<a name=\"r1\"></a>[[1]](#1)\u306b\u3064\u3044\u3066\u66f8\u304d\u307e\u3059\u3002ats-beautify\u306fpython\u3060\u3051\u3067\u5b9f\u88c5\u3057\u3066\u3042\u308a\u3001sublime-text2\u306e\u30d7\u30e9\u30b0\u30a4\u30f3\u3068\u3057\u3066\u4f7f\u3063\u305f\u308a\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u547c\u3073\u51fa\u3057\u3092\u4f7f\u3044\u69d8\u3005\u306a\u30a8\u30c7\u30a3\u30bf\u304b\u3089\u4f7f\u7528\u3059\u308b\u4e8b\u304c\u51fa\u6765\u307e\u3059\u3002\n\n## \u30e2\u30c1\u30d9\u30fc\u30b7\u30e7\u30f3\n\nATS2\u3068\u3044\u3046SML\u306b\u4f3c\u305f\u6587\u6cd5\u3092\u6301\u3063\u305f\u8a00\u8a9e\u304c\u3042\u308a\u307e\u3059\u3002\nATS\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u30b3\u30fc\u30c9\u306b\u8a3c\u660e\u3092\u4ed8\u3051\u308b\u4e8b\u304c\u51fa\u6765\u308b\u306e\u3067\u5b89\u5168\u306a\u30b3\u30fc\u30c9\u3092\u69cb\u7bc9\u51fa\u6765\u307e\u3059\u3002\u3057\u304b\u3082\u3001C\u8a00\u8a9e\u3092\u51fa\u529b\u3059\u308b\u306e\u3067C\u8a00\u8a9e\u306e\u30bd\u30fc\u30b9\u306e\u4e00\u90e8\u5206\u3060\u3051\u3092ATS\u304c\u51fa\u529b\u3057\u305f\u30b3\u30fc\u30c9\u306b\u7f6e\u304d\u63db\u3048\u3066\u8a3c\u660e\u4ed8\u304d\u306e\u5b8c\u5168\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u7f6e\u304d\u63db\u3048\u3066\u76f4\u3050\u306b\u4f7f\u3046\u4e8b\u304c\u51fa\u6765\u307e\u3059\u3002\n\n\u3057\u304b\u3057\u3001\u4f5c\u8005\u306e\u30db\u30f3\u30b0\u30a6\u30a7\u30a4\u306e\u66f8\u304f\u30d7\u30ed\u30b0\u30e9\u30e0\u30b3\u30fc\u30c9\u306f\u8aad\u307f\u3084\u3059\u3044\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u3068\u306f\u8a00\u3048\u3001\u8a00\u8a9e\u306e\u4f5c\u8005\u3067\u3059\u3002\u305d\u308c\u306a\u308a\u306e\u3053\u3060\u308f\u308a\u3092\u6301\u3063\u3066\u66f8\u3044\u3066\u3044\u308b\u306f\u305a\u3067\u3059\u3002\n\u5947\u9e97\u306b\u66f8\u304d\u76f4\u3057\u3066\u304f\u308c\u3068\u304a\u9858\u3044\u3057\u3066\u3082\u306a\u304b\u306a\u304b\u53d7\u3051\u5165\u308c\u3066\u3082\u3089\u3048\u306a\u3044\u3088\u3046\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\n\u3057\u3063\u304b\u308a\u3057\u305f\u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30bf\u3092\u66f8\u3044\u3066\u3053\u308c\u3092\u4f7f\u3048\u3070\u5947\u9e97\u306b\u306a\u308b\u3088\u3068\u3044\u3046\u8a71\u306b\u3059\u308c\u3070\u3088\u3044\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u601d\u3063\u305f\u8a33\u3067\u3059\u3002\n\u3068\u308a\u3042\u3048\u305aOCaml\u3092\u53c2\u8003\u306b\u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30bf\u3092\u4f5c\u308c\u3070\u3044\u3044\u3058\u3083\u306a\u3044\u304b\u3068\u601d\u3063\u305f\u8a33\u3067\u3059\u3002\n\n\u304cC\u8a00\u8a9e\u7cfb\u7d71\u306e\u8a00\u8a9e\u3084Ruby\u306e\u3088\u3046\u306bend\u3067\u7d42\u308f\u308b\u8a00\u8a9e\u3068\u9055\u3044ML\u7cfb\u7d71\u306e\u8a00\u8a9e\u306e\u30d3\u30e5\u30fc\u30c6\u30a3\u30d5\u30a1\u30a4\u30a2\u306f\u4f5c\u308b\u306e\u304c\u3061\u3087\u3044\u3068\u5927\u5909\u3067\u3001\u7c21\u5358\u306b\u4f5c\u308c\u305d\u3046\u306b\u306a\u304b\u3063\u305f\u3002\n\n\u30d1\u30fc\u30b5\u3092\u4fee\u6b63\u3059\u308b\u4e8b\u3067\u3042\u308b\u7a0b\u5ea6\u306e\u7269\u306f\u4f5c\u308c\u305f\u306e\u3067\u3059\u304c\u3001\u69cb\u6587\u6728\u306b\u306f\u306a\u3044\u60c5\u5831\u304c\u5fc5\u8981\u3067\u4e0a\u624b\u304f\u884c\u304d\u307e\u305b\u3093\u3002\nOCaml\u306e\u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30bf\u306f\u72ec\u81ea\u306b\u30d1\u30fc\u30b5\u3092\u6301\u3063\u3066\u3044\u305f\u308a\u3068\u5927\u5909\u305d\u3046\u3067\u3059\uff01\n\n\u3046\u3046\u3080\u3002\u697d\u306b\u5947\u9e97\u306b\u4f5c\u308a\u305f\u3044\u3002\u3057\u304b\u3057\u4f5c\u308c\u306a\u3044\u3002\u305d\u3093\u306a\u72b6\u6cc1\u304c\u7d9a\u3044\u3066\u304a\u308a\u307e\u3057\u305f\u3002\n\n\u590f\u9803\u306b PEG\u3068\u69cb\u6587\u89e3\u6790\u306b\u95a2\u3059\u308b\u30a2\u30ec\u30b3\u30ec\u306e\u52c9\u5f37\u4f1a Vol.1 <a name=\"r2\"></a>[[2]](#2)\u3068\u3044\u3046\u52c9\u5f37\u4f1a\u304c\u3042\u308a\u307e\u3057\u305f\u3002\u4f55\u304b\u30cd\u30bf\u306a\u3044\u304b\u306a\u3068\u8003\u3048\u3066\u307f\u3066\u3044\u3066\u3075\u3068\u601d\u3044\u3064\u304d\u307e\u3057\u305f\u3002\n\n**\u300c\u305d\u3046\u3060\uff01\u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3092\u4f5c\u3063\u3066\u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30bf\u3092\u4f5c\u308d\u3046\uff01\u300d**\n\n\u305d\u3053\u3067\u3001\u6587\u6cd5\u306b\u30cd\u30b9\u30c8\u60c5\u5831\u3092\u52a0\u3048\u308b\u4e8b\u304c\u51fa\u6765\u308b\u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3092\u4f5c\u6210\u3057\u3066\u307f\u305f\u306e\u3067\u3059\u3002\n\u3053\u308c\u306a\u3089\u884c\u3051\u308b\u3002\u3042\u308b\u7a0b\u5ea6\u4f5c\u308c\u308b\u4e8b\u304c\u5206\u304b\u308a\u307e\u3057\u305f\u3002\n\n\n## \u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30bf\u306e\u4f7f\u3044\u65b9\n\n```\nparse(src)\n```\n\n\u30d1\u30fc\u30b9\u95a2\u6570\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u6e21\u3059\u3068\u3001\u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30c8\u3055\u308c\u305f\u6587\u5b57\u5217\u304c\u304b\u3048\u3063\u3066\u304d\u307e\u3059\u3002\n\n## \u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30bf\u6a5f\u80fd\u4ed8\u304d\u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306e\u4f7f\u3044\u65b9\n\n\u3044\u304d\u306a\u308a\u30c7\u30ab\u3044\u3067\u3059\u304c\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\u5b8c\u5168\u3067\u306f\u306a\u3044\u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30c8\u3055\u3048\u51fa\u6765\u308c\u3070\u826f\u3044\u3088\u3046\u306a\u3001ATS\u306e\u30d1\u30fc\u30b5\u3092\u66f8\u304d\u307e\u3059\u3002\n\u30dd\u30a4\u30f3\u30c8\u306f\u3001\u30cd\u30b9\u30c8\u3092\u5165\u308c\u305f\u3044\u6240\u306b-\u3092\u66f8\u304f\u3068\u30cd\u30b9\u30c8\u304c\u4ed8\u304d\u307e\u3059\u3002\u306a\u305c-\u306b\u3057\u305f\u304b\u3068\u3044\u3046\u3068\u3001SublimeText2\u3067-\u304c\u5947\u9e97\u306b\u8272\u304c\u3064\u3044\u305f\u304b\u3089\u3067\u3059\u3002\n\u6587\u6cd5\u306e\u4f5c\u308a\u65b9\u306f\u3001\u304d\u3063\u3068\u3001\u4f7f\u3044\u6163\u308c\u308c\u3070\u5206\u304b\u308a\u307e\u3059\u3002python\u306e\u5834\u5408\u6f14\u7b97\u5b50\u3092\u591a\u304f\u4f7f\u3048\u306a\u3044\u306e\u3067\u3001go\u306e\u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3092\u53c2\u8003\u306b\u3001a / b / c\u3092 or(a,b,c)\u3068\u66f8\u304f\u3088\u3046\u306b\u3057\u3066\u3042\u308a\u307e\u3059\u304c\u3001\u4f7f\u3044\u6163\u308c\u306a\u3044\u3068\u5206\u3051\u5206\u304b\u3089\u306a\u3044\u6c17\u3082\u3057\u307e\u3059\u3002\u307e\u3001\u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306a\u3093\u3066\u304d\u3063\u3068\u305d\u3046\u3044\u3046\u3082\u306e\u3067\u3059\u3002\n\n```py\nkeywords = reg(r\"^(begin|end|if|else|then|let|in|val|implement|local|typedef|sortdef|datatype|extern|lam|try|with|fnx|fn|fun|case|of|orelse|macrodef|macdef|staload|dynload|open|struct|module|and|while|do|done)\\b\")\nsemi = notp(\";;\") >> p(\";\")\nexp = p(lambda i: p(exp4, rep[semi, exp4], opt(semi))(i))\nexps = p(exp, opt(semi))\nid = orp(\n    notp(keywords) >> reg(r\"^[\\$\\\\]?[_a-zA-Z0-9]+\"),\n    str(\":<cloref>\"),\n    reg(r'^[+\\-*/.<>:@=^|~?]+') ^ (lambda i: i if re.search(r'^(=|=>|=<|->|\\||)$', i[1]) is None else None),\n    reg(r'^[!]'),\n    reg(r'^(\"(\\\\.|[^\"])*\"|\\'(\\\\.|[^\\'])\\')')\n)\nassign = p(lambda i: p(app, \"=\", -exp)(i))\nsexp = orp(\n    p(\"@(\", -opt(exp), \")\"),\n    p(\"@{\", -p(assign, rep(\",\", assign)), \"}\"),\n    p(\"@[\", -opt(exp), \"]\"),\n    p(\"'(\", -opt(exp), \")\"),\n    p(\",(\", -opt(exp), \")\"),\n    p(\"'{\", -p(assign, rep(\",\", assign)), \"}\"),\n    p(\"'[\", -opt(exp), \"]\"),\n    id,\n    p(\"begin\", -exp, \"end\"),\n    p(\"(\", -opt(exp), \")\"),\n    p(\"{\", -p(lambda i: rep(toplevel)(i)), \"}\"),\n    p(\"[\", -opt(exp), \"]\")\n)\napp = rep1(sexp)\nexp1 = orp(\n    p(\"lam\", -p[app], orp(\"=>\", \"=<cloptr1>\", \"=<cloref>\"), -p(lambda i: exp2(i))),\n    p(\"let\", -p(lambda i: rep(toplevel, opt(\";;\"))(i)), \"in\", -opt(exp), \"end\"),\n    p(\"if\", -exps, \"then\", -p(lambda i: exp4(i)), opt(p(\"else\", exp))),\n    p(\"case\", -exps, \"of\", -p(opt(\"|\"), app, \"=>\", -exp, rep(\"|\", app, \"=>\", -exp))),\n    p(\"try\", -exps, \"with\", opt(\"|\"), -app, \"=>\", exp, rep[\"|\", app, \"=>\", -exp]),\n    p(\"while\", -exps, \"do\", -exps, \"done\"),\n    app\n)\n\nexp2 = p(exp1, opt(orp(\"=\", \"orelse\"), p(lambda i: exp2(i))))\nexp3 = p(exp2, rep(\",\", exp2))\nexp4 = p(exp3, opt(\"->\", exp))\nprog = p(lambda i: rep(toplevel)(i))\nstruct = p(lambda i: orp(\n    p(\"struct\", -prog, \"end\"),\n    -struct_exp\n)(i))\nstruct_exp = rep1(orp(\n    id,\n    p(\"(\", -opt(struct), \")\")\n))\ndatatype = p[app, \"=\", opt(\"|\"), -app, opt(\"of\", -app), rep(\"|\", -app, opt(\"of\", -app))]\ntoplevel = orp(\n    p(orp(\"fn\", \"fnx\", \"fun\"), -p[app], opt(\"=\", -exp)),\n    p(\"extern\", -p[orp(\"fn\", \"fnx\", \"fun\"), app]),\n    p(orp(\"macdef\", \"macrodef\"), -p[app], opt(\"=\", -exp)),\n    p(\"val\", -p[app], \"=\", -exp),\n    p(\"implement\", -p[app], \"=\", -exp),\n    p(orp(\"typedef\", \"sortdef\"), -p[app], \"=\", -exp),\n    p(\"and\", -p[app], \"=\", -exp),\n    p(orp(\"#include\", \"staload\", \"dynload\"), -exp),\n    p(\"#define\", -sexp, opt(\"(\", -exps, \")\"), -sexp),\n    p(\"local\", -p[prog], \"in\", -p[prog], \"end\"),\n    p(\"datatype\", -datatype, rep(\"and\", -datatype)),\n    p(\"exception\", -id, \"of\", -exp),\n    p(\"open\", -p[id, rep(\".\", id)]),\n    p(exp, opt(semi)),\n    p(\"module\", -p[app], \"=\", struct)\n)\n```\n\n## \u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30bf\u6a5f\u80fd\u4ed8\u304d\u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306e\u5b9f\u88c5\n\n\u307e\u305a\u306f\u3001\u7c21\u5358\u306a\u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n\u5b9f\u88c5\u7528\u306e\u8a00\u8a9e\u306fsublimetext2\u3067\u4f7f\u3044\u305f\u304b\u3063\u305f\u306e\u3067python\u3067\u3059\u3002python\u306fclass\u304c\u3042\u308a\u3001\u6f14\u7b97\u5b50\u306f\u3061\u3087\u3063\u3068\u3060\u3051\u5909\u66f4\u51fa\u6765\u307e\u3059\u3002\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u3092\u4f7f\u3046\u624b\u3082\u3042\u308a\u307e\u3059\u304c\u3001go\u306e\u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf goparsec<a name=\"r3\"></a>[[3]](#3)\u3092\u53c2\u8003\u306b\u95a2\u6570\u3092\u4f7f\u3046\u4e8b\u306b\u3057\u307e\u3057\u305f\u3002\n\n```\nimport re\nimport sys\n\nsys.setrecursionlimit(1000*1000)\n\n\nclass Parser(object):\n    def __rshift__(self, that):\n        return p(self, that) ^ (lambda a: a[1])\n\n    def __lshift__(self, that):\n        return p(self, that) ^ (lambda a: a[0])\n\n    def __xor__(self, that):\n        return Action(self, that)\n\n    def __neg__(self):\n        return Action(self, lambda a: [NestP, a, NestM])\n\n    class static(type):\n        def __getitem__(self, i):\n            return self(*i) if isinstance(i, tuple) else self(i)\n    __metaclass__ = static\n\n\nclass nreg(Parser):\n    def __init__(self, param):\n        self.param = re.compile(param)\n\n    def __call__(self, i):\n        m = self.param.search(i)\n        return None if m is None else [m.group(0), i[len(m.group(0)):]]\n\n\nclass orp(Parser):\n    def __init__(self, *params):\n        self.params = map(lambda v: st(v) if isinstance(v, basestring) else v, params)\n\n    def __call__(self, i):\n        for v in self.params:\n            r = v(i)\n            if r is not None:\n                return r\n        return None\n\n\nclass nstr(Parser):\n    def __init__(self, param):\n        self.param = param\n\n    def __call__(self, i):\n        return None if not i.startswith(self.param) else [self.param, i[len(self.param):]]\n\n\nclass p(Parser):\n    def __init__(self, *params):\n        self.params = map(lambda v: st(v) if isinstance(v, basestring) else v, params)\n\n    def __call__(self, i):\n        rs = []\n        for v in self.params:\n            r = v(i)\n            if r is None:\n                return None\n            rs.append(r[0])\n            i = r[1]\n        return [rs, i]\n\n\nclass Action(Parser):\n    def __init__(self, thiz, action):\n        self.thiz = thiz\n        self.action = action\n\n    def __call__(self, i):\n        r = self.thiz(i)\n        if r is None:\n            return None\n        else:\n            r2 = self.action(r[0])\n            return None if r2 is None else [r2, r[1]]\n\n\nclass opt(Parser):\n    def __init__(self, *thiz):\n        self.thiz = p(*thiz)\n\n    def __call__(self, i):\n        r = self.thiz(i)\n        return [[], i] if r is None else r\n\n\nclass rep(Parser):\n    def __init__(self, *thiz):\n        self.thiz = p(*thiz)\n\n    def __call__(self, i):\n        rs = []\n        while(True):\n            r = self.thiz(i)\n            if r is None:\n                return [rs, i]\n            rs.append(r[0])\n            i = r[1]\n\n\ndef rep1(*thiz):\n    return rep(*thiz) ^ (lambda p: None if len(p) < 1 else p)\n\n\nclass notp(Parser):\n    def __init__(self, *thiz):\n        self.thiz = orp(*thiz)\n\n    def __call__(self, i):\n        return [[], i] if self.thiz(i) is None else None\n\n\nclass Any1(Parser):\n    def __call__(self, i):\n        return None if len(i) == 0 else [i[0], i[1:]]\nany1 = Any1()\n```\n\n\u3053\u308c\u3092\u3042\u308b\u7a0b\u5ea6\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u307e\u3059\u3002\n\n```\nblockcomment = p(nstr(\"(*\"), rep(orp(notp(nreg(r\"^(\\(\\*|\\*\\))\"), any1), (lambda i: blockcomment(i)))), nstr(\"*)\"))\nskip = rep(orp(nreg(r'^(\\s|/\\*.*?\\*/|//[^\\r\\n]*)+'), blockcomment))\n\ndef st(s):\n    return p(skip, nstr(s))\n\n\ndef reg(s):\n    return p(skip, nreg(s))\n```\n\n\u3053\u3053\u3067\u3001\u30cd\u30b9\u30c8\u7528\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\uff12\u3064\u4f5c\u308a\u307e\u3059\u3002\n\n```\nclass Nest:\n    def __init__(self, name, n):\n        self.name = name\n        self.n = n\n\n    def __repr__(self):\n        return self.name\nNestP = Nest(\"NestP\", 1)\nNestM = Nest(\"NestM\", -1)\n```\n\nNestP\u304c\u30cd\u30b9\u30c8\u3092\uff11\u3064\u4e0a\u3052\u3001NestM\u304c\u4e00\u3064\u4e0b\u3052\u308b\u610f\u5473\u3067\u3059\u3002\n\u3053\u308c\u306f\u3001Parser\u30af\u30e9\u30b9\u306e`__neg__`\u3092\u4f7f\u3063\u3066\u3001-\u3092\u4ed8\u3051\u308b\u3068\u3001\u30d1\u30fc\u30b5\u306e\u524d\u5f8c\u306bNestP\u3068NestM\u3092\u4ed8\u3051\u308b\u4e8b\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\n## \u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30c8\n\n\u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30c8\u306e\u95a2\u6570\u306fflat\u3068cnv\u306e\uff12\u3064\u306e\u95a2\u6570\u3067\u69cb\u6210\u3055\u308c\u307e\u3059\u3002\n\u30d1\u30fc\u30b9\u7d50\u679c\u306b\u306f\u3001\u5168\u3066\u306e\u30c8\u30fc\u30af\u30f3\uff0b\u30cd\u30b9\u30c8\u60c5\u5831\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u30cd\u30b9\u30c8\u60c5\u5831\u3092\u3067\u7a7a\u767d\u3092\u8abf\u6574\u3057\u3066\u51fa\u529b\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\n```\ndef flat(a, rc):\n    if isinstance(a, list):\n        for i in a:\n            rc = flat(i, rc)\n    else:\n        rc.append(a)\n    return rc\n\n\ndef cnv(e):\n    reg2 = re.compile(r'\\n')\n    whiteSpace = re.compile(r'^(\\s|\\s*\\(\\*)')\n    reg1 = re.compile(r'\\n')\n\n    e = flat(e, [])\n    e2 = []\n    i = 0\n    while(i < len(e)):\n        s = [e[i]]\n        if isinstance(s[0], basestring) and reg2.search(s[0]) is not None and whiteSpace.search(s[0]) is not None:\n            s = []\n            while(i < len(e)):\n                s2 = e[i]\n                if s2 is NestM:\n                    e2.append(s2)\n                else:\n                    s.append(s2)\n                    if whiteSpace.search(s2) is None:\n                        break\n                i += 1\n        i += 1\n        e2.extend(s)\n\n    nest = 0\n    e3 = []\n    for s in e2:\n        if isinstance(s, Nest):\n            nest += s.n\n        else:\n            m = reg2.search(s)\n            if m is not None:\n                s = reg1.sub(\"\\n\"+(\"  \" * nest), s)\n            e3.append(s)\n    return \"\".join(e3)\n```\n\n\u3053\u308c\u3089\u306e\u6a5f\u80fd\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n\n```\nregparse = re.compile(r\"^[ \\t]+\", re.M)\n\n\ndef parse(s):\n    return cnv(prog(regparse.sub(\"\", s)))\n```\n\n## \u307e\u3068\u3081\n\n1. \u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30bf\u4f5c\u6210\u5c02\u7528\u306e\u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3092\u4f5c\u308a\u307e\u3059\u3002\n2. \u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306f\u81ea\u52d5\u7684\u306b\u69cb\u6587\u6728\u3092\u4f5c\u308a\u3001\u7a7a\u767d\u3084\u30b3\u30e1\u30f3\u30c8\u3092\u542b\u3081\u305f\u30c8\u30fc\u30af\u30f3\u60c5\u5831\u3092\u6301\u3061\u307e\u3059\u3002\n2. \u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306b\u30cd\u30b9\u30c8\u60c5\u5831\u3092\u52a0\u3048\u308b\u4e8b\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n3. \u30cd\u30b9\u30c8\u60c5\u5831\u3092\u5143\u306b\u30d7\u30ea\u30f3\u30c8\u3059\u308b\u51e6\u7406\u3092\u4f5c\u308a\u307e\u3059\u3002\n4. \u5b8c\u5168\u3067\u306f\u306a\u304f\u3066\u826f\u3044\u306e\u3067\u3001\u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30c8\u7528\u306e\u30d1\u30fc\u30b5\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n\u4ee5\u4e0a\u306e\u3088\u3046\u306b\u3059\u308b\u4e8b\u3067\u3001\u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30c8\u3092\u4f5c\u308b\u4e8b\u304c\u51fa\u6765\u307e\u3059\u3002\n\nATS\u306e\u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30bf\u306f\u307e\u3060\u5b8c\u5168\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u3053\u306e\u30d1\u30fc\u30b5\u3092\u62e1\u5f35\u3057\u3066\u884c\u3051\u3070\u3088\u308a\u826f\u3044\u7269\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002\u307e\u305f\u3001\u3053\u306e\u4ed5\u7d44\u307f\u3092\u4f7f\u3048\u3070\u4ed6\u306eML\u7cfb\u306e\u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30bf\u3082\u5947\u9e97\u306b\u66f8\u304f\u4e8b\u304c\u51fa\u6765\u308b\u306f\u305a\u3067\u3059\u3002\n\n## \u30ea\u30f3\u30af\n\n- <a name=\"1\"></a>[[1]](#r1) ats/beautify\n   https://github.com/hsk/docs/tree/master/ats/beautify\n\n- <a name=\"2\"></a>[[2]](#r2) PEG\u3068\u69cb\u6587\u89e3\u6790\u306b\u95a2\u3059\u308b\u30a2\u30ec\u30b3\u30ec\u306e\u52c9\u5f37\u4f1a Vol.1\n   http://connpass.com/event/16630/\n- <a name=\"3\"></a>[[3]](#r3) goparsec\n   https://github.com/prataprc/goparsec\n", "tags": ["Python", "ATS", "\u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf", "\u30d7\u30ea\u30c6\u30a3\u30d7\u30ea\u30f3\u30c8"]}