{"tags": ["dlang", "Dlanguage", "codeiq"], "context": " More than 1 year has passed since last update.\n\n\u6982\u8981\n\u30bf\u30a4\u30c8\u30eb\u3067\u97fb\u3092\u8e0f\u3082\u3046\u3068\u3057\u305f\u304c\u82e6\u3057\u3044\u3002CodeIQ \u306b \u7d50\u57ce\u6d69\u3055\u3093 \u304c\u51fa\u984c\u3057\u3066\u3044\u308b\u300c\u30de\u30e8\u30a4\u30c9\u30fc\u30ed\u300d\u3068\u3044\u3046\u554f\u984c\u3092\u89e3\u3044\u305f\u3089\u3001\u3044\u306b\u3057\u3048\u306eD\u8a00\u8a9e\u306b\u8ff7\u3044\u8fbc\u3093\u3067\u3057\u307e\u3063\u305f\u3002\n\n\u554f\u984c\u307b\u304b\n\u7d50\u57ce\u6d69\u3055\u3093\u306b\u3088\u308b\u30a2\u30ca\u30a6\u30f3\u30b9 tweet \u3092\u53c2\u7167\u3002\n\n\u672c\u7de8\n\u3055\u3066\u3001\u554f\u984c\u6587\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u4f8b\u306b\u5c11\u3057\u306e\u5b9f\u9a13\u3092\u52a0\u3048\u3001\u6b21\u306e unittest \u304b\u3089\u59cb\u3081\u308b\u3053\u3068\u306b\u3059\u308b\u3002\nunittest\n{\n    assert (0.solve == 0);\n    assert (1.solve == 2); // B, C\n    assert (2.solve == 2);\n    assert (3.solve == 7); // CAC, CAB, CBC, BAB, BAC\n    assert (4.solve == 7);\n}\n\n\u6c5a\u3044\u306a\u304c\u3089\u3082\u3001\u6700\u4f4e\u9650\u306e\u8003\u5bdf\u304b\u3089\u611a\u76f4\u306b\u5b9f\u88c5\u3057\u305f\u3002\u6570\u5b66\u3092\u5c02\u9580\u3068\u3057\u3066\u3044\u305f\u8005\u306b\u3042\u308b\u307e\u3058\u304d\u614b\u5ea6\u3060\u304c\u3001\u98df\u5f8c\u306e\u7720\u3044\u3068\u304d\u3060\u3063\u305f\u306e\u3067\u59a5\u5354\u3057\u3066\u307b\u3057\u3044\u3002\u30b3\u30fc\u30c9\u306e\u4e2d\u8eab\u306f\u672c\u7b4b\u306b\u95a2\u4fc2\u306a\u3044\u306e\u3067\u3002\n/** The number of sequences of alphabets,\n    with length not larger than n,\n    starts with B or C,\n    B/C after A,\n    A or C after eventh/oddth (zero-origin) B,\n    A/B after C\n*/\nauto solve(in ulong n)\n{\n    ulong ret;\n    ulong[3] current, next;\n    current[0] = 1;\n    foreach (i; 0..n)\n    {\n        next[] = 0;\n        next[0] = current[2] + (i & 1) * current[1];\n        next[1] = current[0] + current[2];\n        next[2] = current[0] + ((i & 1) ^ 1) * current[1];\n        current = next;\n        if (i & 1)\n            continue;\n        ret += current[0] + current[1] + current[2];\n    }\n    return ret;\n}\n\nimport std.stdio, std.conv, std.string;\nvoid main()\n{\n    readln.chomp.to!ulong.solve.writeln;\n}\n\nrdmd -unittest \u3067\u3046\u307e\u304f\u52d5\u3044\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u3002\u3061\u3087\u3063\u3068\u8a66\u3057\u305f\u3060\u3051\u3067\u306f\u898f\u5247\u6027\u306f\u3088\u304f\u308f\u304b\u3089\u306a\u30441\u304c\u3001\u307e\u3042\u5927\u4e08\u592b\u3060\u308d\u3046\u3068\u601d\u3063\u3066\u63d0\u51fa\u3002\u304c\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u3002\n\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u305f\u3081\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u5b9f\u884c\u306f\u3055\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u3002(D (dmd) dmd-2.042)\n\nDMD 2.042 \u306e\u30ea\u30ea\u30fc\u30b9\u306f2010\u5e7403\u670819\u65e5 \u3067\u3001\u3053\u308c\u306f\u79c1\u304cD\u3092\u59cb\u3081\u308b\u3088\u308a\u524d\u306e\u3053\u3068\u3067\u3042\u308b\u3002\u3053\u308c\u3067\u306f\u3001\u3053\u306e\u3088\u3046\u306a\u77ed\u3044\u30b3\u30fc\u30c9\u3067\u3042\u3063\u3066\u3082\u300c\u305d\u3093\u306a\u6614\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u308b\u308f\u3051\u306a\u3044\u3060\u308d!\u300d\u3068\u3044\u3046\u306e\u304c D\u8a00\u8a9eer \u306e\u5e38\u8b58\u3002\u3057\u304b\u3057\u3001\u305b\u3063\u304b\u304f\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u306a\u3051\u308c\u3070\u63a1\u70b9\u3082\u3055\u308c\u306a\u3044\u3002\u30a8\u30e9\u30fc\u8aad\u3093\u3067\u53e4\u3081\u304b\u3057\u3044\u30b3\u30fc\u30c9\u306b\u66f8\u304d\u76f4\u305d\u3046\u3002\n\u6700\u521d\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306f\u3001\u3044\u304d\u306a\u308a unittest \u5185\u304b\u3089\u3002\n\nerror code:11\nprog.d(3): found 'solve' when expecting ')'\nprog.d(3): found ')' when expecting ';' following 'statement'\nprog.d(4): found 'solve' when expecting ')'\nprog.d(4): found ')' when expecting ';' following 'statement'\nprog.d(5): found 'solve' when expecting ')'\nprog.d(5): found ')' when expecting ';' following 'statement'\nprog.d(6): found 'solve' when expecting ')'\nprog.d(6): found ')' when expecting ';' following 'statement'\nprog.d(7): found 'solve' when expecting ')'\nprog.d(7): found ')' when expecting ';' following 'statement'\n\n\u30a8\u30e9\u30fc\u306f\u30d4\u30ea\u30aa\u30c9\u306e\u307e\u308f\u308a\u3002\u6574\u6570\u30ea\u30c6\u30e9\u30eb\u3092\u7b2c1\u5f15\u6570\u3068\u3059\u308b UFCS \u306f\u3001\u3053\u306e\u3068\u304d\u306b\u306f\u4f7f\u3048\u306a\u304b\u3063\u305f\u3002\u539f\u5247\u3068\u3057\u3066\u5168\u3066\u306e\u578b\u306b UFCS \u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u306f DMD 2.059 \u304b\u3089\u3060\u304c\u3001\u3053\u308c\u306f\u306a\u3093\u3068 2006\u5e74\u306b file \u3055\u308c\u305f issue \u3067\u3042\u3063\u305f\u3002\n\u3068\u3082\u3042\u308c\u66f8\u304d\u76f4\u3059\u3002\n unittest\n {\n-   assert (0.solve == 0);\n-   assert (1.solve == 2); // B, C\n-   assert (2.solve == 2);\n-   assert (3.solve == 7); // CAC, CAB, CBC, BAB, BAC\n-   assert (4.solve == 7);\n+   assert (solve(0) == 0);\n+   assert (solve(1) == 2); // B, C\n+   assert (solve(2) == 2);\n+   assert (solve(3) == 7); // CAC, CAB, CBC, BAB, BAC\n+   assert (solve(4) == 7);\n }\n\n\u3057\u304b\u3057\u3001\u3053\u308c\u304f\u3089\u3044\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u304c\u306a\u304f\u306a\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u3002\n\nerror code:11\nprog.d(39): Error: template std.conv.to(T,S) if (!implicitlyConverts!(S,T) && isSomeString!(T) && isSomeString!(S)) does not match any function template declaration\nprog.d(39): Error: template std.conv.to(T,S) if (!implicitlyConverts!(S,T) && isSomeString!(T) && isSomeString!(S)) cannot deduce template function from argument types !()(string)\nprog.d(39): Error: (to(T,S) if (!implicitlyConverts!(S,T) && isSomeString!(T) && isSomeString!(S)))(chomp(readln('\\x0a'),null)) isn't a template\nError: no property 'solve' for type 'int'\nError: no property 'writeln' for type 'int'\n\nstd.conv.to \u304c\u540d\u6307\u3057\u3055\u308c\u305f\u306e\u306f\u4e0d\u53ef\u89e3\u3060\u304c\u3001\u3053\u308c\u3082 UFCS \u306b\u95a2\u4fc2\u3059\u308b\u3089\u3057\u3044\u3002\n void main()\n {\n-   readln.chomp.to!ulong.solve.writeln;\n+   writeln(solve(to!ulong(readln.chomp)));\n }\n\n\u300c\u3053\u308c\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u901a\u3063\u305f!\u300d\u3068\u63d0\u51fa\u3057\u305f\u3089\u3001\u5165\u529b\u304c\u5927\u304d\u3044\u3068\u304d\u306b\u51fa\u529b\u304c\u5408\u308f\u306a\u3044\u3002\u898b\u305f\u3068\u3053\u308d\u6307\u6570\u30aa\u30fc\u30c0\u30fc\u3067\u5927\u304d\u304f\u306a\u308b\u3088\u3046\u306a\u306e\u306b\u982d\u6253\u3061\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u3089\u3001\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u306e\u3088\u3046\u3060\u3002\u3053\u3093\u306a\u3068\u304d\u306e\u305f\u3081\u306b\u3001D \u306b\u306f std.bigint \u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n auto solve(in ulong n)\n {\n-   ulong ret;\n-   ulong[3] current, next;\n+   import std.bigint;\n+   BigInt ret;\n+   BigInt[3] current, next;\n    current[0] = 1;\n    foreach (i; 0..n)\n    {\n-       next[] = 0;\n+       next[] = BigInt(0);\n        next[0] = current[2] + (i & 1) * current[1];\n        next[1] = current[0] + current[2];\n        next[2] = current[0] + ((i & 1) ^ 1) * current[1];\n\n\u3057\u304b\u3057\u307e\u305f\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3002\n\nerror code:11\nprog.d(19): found 'import' instead of statement\n\nScoped import \u3082\u6700\u8fd1\u306b\u306a\u3063\u3066\u8ffd\u52a0\u3055\u308c\u305f\u3082\u306e (\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f 2.058 \u3060\u304c\u3001changelog \u4e0a\u3067\u306f\u78ba\u8a8d\u3067\u304d\u306a\u304b\u3063\u305f) \u3089\u3057\u3044\u3002\n+import std.bigint;\n /** \u30b3\u30e1\u30f3\u30c8\u7565 */\n auto solve(in ulong n)\n {\n-   import std.bigint;\n    BigInt ret;\n    BigInt[3] current, next;\n\n\u3053\u308c\u3067\u3084\u3063\u3068\u63d0\u51fa\u30fb\u6b63\u89e3\u3068\u306a\u3063\u305f\u3002\n\n\u611f\u60f3\n\u3053\u3093\u306a\u53e4\u3044\u30b3\u30f3\u30d1\u30a4\u30e9\u4f7f\u3063\u3066\u3089\u308c\u308b\u304b! \u79c1\u306f\u6700\u65b0DMD\u306b\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u3059\u308b\u305e! \u3068\u3044\u3046\u306e\u304c\u6b63\u76f4\u306a\u3068\u3053\u308d\u3060\u304c\u3001\u8fd1\u5e74\u306eD\u8a00\u8a9e\u306e\u9032\u6b69\u3092\u57a3\u9593\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u305f\u3068\u3044\u3046\u3053\u3068\u306b\u3057\u3066\u304a\u3053\u3046\u3002\n\u3057\u304b\u3057\u3053\u308c\u306fD\u8a00\u8a9e\u3092\u59cb\u3081\u308b\u306e\u304c\u5c11\u3057\u65e9\u304b\u3063\u305f\u3089\u6295\u3052\u51fa\u3057\u3066\u3044\u305f\u304b\u3082\u3057\u308c\u306a\u3044\u306a\u2026\u2026\u3002\n\n\n\n\n\u6b63\u89e3\u306f\u300c\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306e\u9805 (\u305f\u3060\u30571\u9805\u304a\u304d) - 1\u300d\u3060\u3063\u305f\u3002\u3082\u3046\u5c11\u3057\u3088\u304f\u898b\u308c\u3070\u308f\u304b\u3063\u305f\u3060\u308d\u3046\u3002\u3064\u307e\u308a std.range.recurrence \u3067\u4e00\u767a\u306e\u306f\u305a\u3060\u3002\u00a0\u21a9\n\n\n\n# \u6982\u8981\n\u30bf\u30a4\u30c8\u30eb\u3067\u97fb\u3092\u8e0f\u3082\u3046\u3068\u3057\u305f\u304c\u82e6\u3057\u3044\u3002[CodeIQ](https://codeiq.jp/) \u306b [\u7d50\u57ce\u6d69\u3055\u3093](http://hyuki.com/) \u304c\u51fa\u984c\u3057\u3066\u3044\u308b\u300c\u30de\u30e8\u30a4\u30c9\u30fc\u30ed\u300d\u3068\u3044\u3046\u554f\u984c\u3092\u89e3\u3044\u305f\u3089\u3001\u3044\u306b\u3057\u3048\u306eD\u8a00\u8a9e\u306b\u8ff7\u3044\u8fbc\u3093\u3067\u3057\u307e\u3063\u305f\u3002\n\n# \u554f\u984c\u307b\u304b\n\n[\u7d50\u57ce\u6d69\u3055\u3093\u306b\u3088\u308b\u30a2\u30ca\u30a6\u30f3\u30b9 tweet](https://twitter.com/hyuki/status/677453411760005122) \u3092\u53c2\u7167\u3002\n\n# \u672c\u7de8\n\n\u3055\u3066\u3001\u554f\u984c\u6587\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u4f8b\u306b\u5c11\u3057\u306e\u5b9f\u9a13\u3092\u52a0\u3048\u3001\u6b21\u306e unittest \u304b\u3089\u59cb\u3081\u308b\u3053\u3068\u306b\u3059\u308b\u3002\n\n```d\nunittest\n{\n\tassert (0.solve == 0);\n\tassert (1.solve == 2); // B, C\n\tassert (2.solve == 2);\n\tassert (3.solve == 7); // CAC, CAB, CBC, BAB, BAC\n\tassert (4.solve == 7);\n}\n```\n\n\u6c5a\u3044\u306a\u304c\u3089\u3082\u3001\u6700\u4f4e\u9650\u306e\u8003\u5bdf\u304b\u3089\u611a\u76f4\u306b\u5b9f\u88c5\u3057\u305f\u3002\u6570\u5b66\u3092\u5c02\u9580\u3068\u3057\u3066\u3044\u305f\u8005\u306b\u3042\u308b\u307e\u3058\u304d\u614b\u5ea6\u3060\u304c\u3001\u98df\u5f8c\u306e\u7720\u3044\u3068\u304d\u3060\u3063\u305f\u306e\u3067\u59a5\u5354\u3057\u3066\u307b\u3057\u3044\u3002\u30b3\u30fc\u30c9\u306e\u4e2d\u8eab\u306f\u672c\u7b4b\u306b\u95a2\u4fc2\u306a\u3044\u306e\u3067\u3002\n\n```d\n/** The number of sequences of alphabets,\n    with length not larger than n,\n    starts with B or C,\n    B/C after A,\n    A or C after eventh/oddth (zero-origin) B,\n    A/B after C\n*/\nauto solve(in ulong n)\n{\n\tulong ret;\n\tulong[3] current, next;\n\tcurrent[0] = 1;\n\tforeach (i; 0..n)\n\t{\n\t\tnext[] = 0;\n\t\tnext[0] = current[2] + (i & 1) * current[1];\n\t\tnext[1] = current[0] + current[2];\n\t\tnext[2] = current[0] + ((i & 1) ^ 1) * current[1];\n\t\tcurrent = next;\n\t\tif (i & 1)\n\t\t\tcontinue;\n\t\tret += current[0] + current[1] + current[2];\n\t}\n\treturn ret;\n}\n\nimport std.stdio, std.conv, std.string;\nvoid main()\n{\n\treadln.chomp.to!ulong.solve.writeln;\n}\n```\n\n`rdmd -unittest` \u3067\u3046\u307e\u304f\u52d5\u3044\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u3002\u3061\u3087\u3063\u3068\u8a66\u3057\u305f\u3060\u3051\u3067\u306f\u898f\u5247\u6027\u306f\u3088\u304f\u308f\u304b\u3089\u306a\u3044[^1]\u304c\u3001\u307e\u3042\u5927\u4e08\u592b\u3060\u308d\u3046\u3068\u601d\u3063\u3066\u63d0\u51fa\u3002**\u304c\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u3002**\n\n```\n\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u305f\u3081\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u5b9f\u884c\u306f\u3055\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u3002(D (dmd) dmd-2.042)\n```\n\n[**DMD 2.042** \u306e\u30ea\u30ea\u30fc\u30b9\u306f2010\u5e7403\u670819\u65e5](http://dlang.org/changelog/2.042.html) \u3067\u3001\u3053\u308c\u306f\u79c1\u304cD\u3092\u59cb\u3081\u308b\u3088\u308a\u524d\u306e\u3053\u3068\u3067\u3042\u308b\u3002\u3053\u308c\u3067\u306f\u3001\u3053\u306e\u3088\u3046\u306a\u77ed\u3044\u30b3\u30fc\u30c9\u3067\u3042\u3063\u3066\u3082\u300c**\u305d\u3093\u306a\u6614\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u308b\u308f\u3051\u306a\u3044\u3060\u308d!**\u300d\u3068\u3044\u3046\u306e\u304c D\u8a00\u8a9eer \u306e\u5e38\u8b58\u3002\u3057\u304b\u3057\u3001\u305b\u3063\u304b\u304f\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u306a\u3051\u308c\u3070\u63a1\u70b9\u3082\u3055\u308c\u306a\u3044\u3002\u30a8\u30e9\u30fc\u8aad\u3093\u3067\u53e4\u3081\u304b\u3057\u3044\u30b3\u30fc\u30c9\u306b\u66f8\u304d\u76f4\u305d\u3046\u3002\n\n\u6700\u521d\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306f\u3001\u3044\u304d\u306a\u308a unittest \u5185\u304b\u3089\u3002\n\n>error code:11\n>prog.d(3): found 'solve' when expecting ')'\n>prog.d(3): found ')' when expecting ';' following 'statement'\n>prog.d(4): found 'solve' when expecting ')'\n>prog.d(4): found ')' when expecting ';' following 'statement'\n>prog.d(5): found 'solve' when expecting ')'\n>prog.d(5): found ')' when expecting ';' following 'statement'\n>prog.d(6): found 'solve' when expecting ')'\n>prog.d(6): found ')' when expecting ';' following 'statement'\n>prog.d(7): found 'solve' when expecting ')'\n>prog.d(7): found ')' when expecting ';' following 'statement'\n\n\u30a8\u30e9\u30fc\u306f\u30d4\u30ea\u30aa\u30c9\u306e\u307e\u308f\u308a\u3002\u6574\u6570\u30ea\u30c6\u30e9\u30eb\u3092\u7b2c1\u5f15\u6570\u3068\u3059\u308b UFCS \u306f\u3001\u3053\u306e\u3068\u304d\u306b\u306f\u4f7f\u3048\u306a\u304b\u3063\u305f\u3002\u539f\u5247\u3068\u3057\u3066\u5168\u3066\u306e\u578b\u306b UFCS \u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u306f [DMD 2.059](http://dlang.org/changelog/2.059.html) \u304b\u3089\u3060\u304c\u3001\u3053\u308c\u306f\u306a\u3093\u3068 [2006\u5e74\u306b file \u3055\u308c\u305f issue](https://issues.dlang.org/show_bug.cgi?id=662) \u3067\u3042\u3063\u305f\u3002\n\n\u3068\u3082\u3042\u308c\u66f8\u304d\u76f4\u3059\u3002\n\n```diff\n unittest\n {\n-\tassert (0.solve == 0);\n-\tassert (1.solve == 2); // B, C\n-\tassert (2.solve == 2);\n-\tassert (3.solve == 7); // CAC, CAB, CBC, BAB, BAC\n-\tassert (4.solve == 7);\n+\tassert (solve(0) == 0);\n+\tassert (solve(1) == 2); // B, C\n+\tassert (solve(2) == 2);\n+\tassert (solve(3) == 7); // CAC, CAB, CBC, BAB, BAC\n+\tassert (solve(4) == 7);\n }\n```\n\n\u3057\u304b\u3057\u3001\u3053\u308c\u304f\u3089\u3044\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u304c\u306a\u304f\u306a\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u3002\n\n>error code:11\n>prog.d(39): Error: template std.conv.to(T,S) if (!implicitlyConverts!(S,T) && isSomeString!(T) && isSomeString!(S)) does not match any function template declaration\n>prog.d(39): Error: template std.conv.to(T,S) if (!implicitlyConverts!(S,T) && isSomeString!(T) && isSomeString!(S)) cannot deduce template function from argument types !()(string)\n>prog.d(39): Error: (to(T,S) if (!implicitlyConverts!(S,T) && isSomeString!(T) && isSomeString!(S)))(chomp(readln('\\x0a'),null)) isn't a template\n>Error: no property 'solve' for type 'int'\n>Error: no property 'writeln' for type 'int'\n\n`std.conv.to` \u304c\u540d\u6307\u3057\u3055\u308c\u305f\u306e\u306f\u4e0d\u53ef\u89e3\u3060\u304c\u3001\u3053\u308c\u3082 UFCS \u306b\u95a2\u4fc2\u3059\u308b\u3089\u3057\u3044\u3002\n\n```diff\n void main()\n {\n-\treadln.chomp.to!ulong.solve.writeln;\n+\twriteln(solve(to!ulong(readln.chomp)));\n }\n```\n\n\u300c\u3053\u308c\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u901a\u3063\u305f!\u300d\u3068\u63d0\u51fa\u3057\u305f\u3089\u3001\u5165\u529b\u304c\u5927\u304d\u3044\u3068\u304d\u306b\u51fa\u529b\u304c\u5408\u308f\u306a\u3044\u3002\u898b\u305f\u3068\u3053\u308d\u6307\u6570\u30aa\u30fc\u30c0\u30fc\u3067\u5927\u304d\u304f\u306a\u308b\u3088\u3046\u306a\u306e\u306b\u982d\u6253\u3061\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u3089\u3001\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u306e\u3088\u3046\u3060\u3002\u3053\u3093\u306a\u3068\u304d\u306e\u305f\u3081\u306b\u3001D \u306b\u306f `std.bigint` \u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\n```\n auto solve(in ulong n)\n {\n-\tulong ret;\n-\tulong[3] current, next;\n+\timport std.bigint;\n+\tBigInt ret;\n+\tBigInt[3] current, next;\n \tcurrent[0] = 1;\n \tforeach (i; 0..n)\n \t{\n-\t\tnext[] = 0;\n+\t\tnext[] = BigInt(0);\n \t\tnext[0] = current[2] + (i & 1) * current[1];\n \t\tnext[1] = current[0] + current[2];\n \t\tnext[2] = current[0] + ((i & 1) ^ 1) * current[1];\n```\n\n\u3057\u304b\u3057\u307e\u305f\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3002\n\n>error code:11\n>prog.d(19): found 'import' instead of statement\n\n[Scoped import \u3082\u6700\u8fd1\u306b\u306a\u3063\u3066\u8ffd\u52a0\u3055\u308c\u305f\u3082\u306e (\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f 2.058 \u3060\u304c\u3001changelog \u4e0a\u3067\u306f\u78ba\u8a8d\u3067\u304d\u306a\u304b\u3063\u305f)](https://github.com/D-Programming-Language/dlang.org/commit/bf370b110460cd515c0dee5f7fde0605e3663aeb) \u3089\u3057\u3044\u3002\n\n```diff\n+import std.bigint;\n /** \u30b3\u30e1\u30f3\u30c8\u7565 */\n auto solve(in ulong n)\n {\n-\timport std.bigint;\n \tBigInt ret;\n \tBigInt[3] current, next;\n```\n\n\u3053\u308c\u3067\u3084\u3063\u3068\u63d0\u51fa\u30fb\u6b63\u89e3\u3068\u306a\u3063\u305f\u3002\n\n# \u611f\u60f3\n\n**\u3053\u3093\u306a\u53e4\u3044\u30b3\u30f3\u30d1\u30a4\u30e9\u4f7f\u3063\u3066\u3089\u308c\u308b\u304b! \u79c1\u306f\u6700\u65b0DMD\u306b\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u3059\u308b\u305e!** \u3068\u3044\u3046\u306e\u304c\u6b63\u76f4\u306a\u3068\u3053\u308d\u3060\u304c\u3001\u8fd1\u5e74\u306eD\u8a00\u8a9e\u306e\u9032\u6b69\u3092\u57a3\u9593\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u305f\u3068\u3044\u3046\u3053\u3068\u306b\u3057\u3066\u304a\u3053\u3046\u3002\n\n\u3057\u304b\u3057\u3053\u308c\u306fD\u8a00\u8a9e\u3092\u59cb\u3081\u308b\u306e\u304c\u5c11\u3057\u65e9\u304b\u3063\u305f\u3089\u6295\u3052\u51fa\u3057\u3066\u3044\u305f\u304b\u3082\u3057\u308c\u306a\u3044\u306a\u2026\u2026\u3002\n\n[^1]: \u6b63\u89e3\u306f\u300c\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306e\u9805 (\u305f\u3060\u30571\u9805\u304a\u304d) - 1\u300d\u3060\u3063\u305f\u3002\u3082\u3046\u5c11\u3057\u3088\u304f\u898b\u308c\u3070\u308f\u304b\u3063\u305f\u3060\u308d\u3046\u3002\u3064\u307e\u308a `std.range.recurrence` \u3067\u4e00\u767a\u306e\u306f\u305a\u3060\u3002\n"}