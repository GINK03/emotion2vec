{"context": " More than 1 year has passed since last update.Python3\u3067XML \u3092\u30d1\u30fc\u30b9\u3057\u3088\u3046\u3068\u3001\nfrom xml.etree import ElementTree\nElementTree.parse(xml_path)\n\n\u3057\u305f\u6240\u3001\nxml.etree.ElementTree.ParseError: not well-formed (invalid token): line *, column *\n\n\u306e\u4f8b\u5916\u304c\u51fa\u3066\u3001\u51e6\u7406\u304c\u5931\u6557\u3057\u307e\u3057\u305f\u3002\nXML (\u4eca\u56de\u306e\u306f \u3068\u3042\u308bEPUB \u306e content xml )\u3092\u8aad\u3093\u3060\u6240\u3001\n<dc:title id=\"title\">\u307b\u3052\u307b\u3052&\u3075\u304c\u3075\u304c</dc:title>\n\n\u3068\u306a\u3063\u3066\u304a\u308a\u3001\u3053\u306e & \u304c\u5b9f\u4f53\u53c2\u7167\u3055\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u5931\u6557\u3057\u305f\u69d8\u5b50\u3002\nlxml \u3092\u4f7f\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u3001\npython - ParseError: not well-formed (invalid token) using cElementTree - Stack Overflow\n\u3053\u3053\u306b\u3042\u308b\u3088\u3046\u306b\u3001Parser \u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b recover=True \u3092\u3064\u3051\u308b\u3053\u3068\u3067\u3044\u3051\u305d\u3046\u3067\u3059\u304c\u3001Python3 \u306e xml.etree.ElementTree.XMLParser \u306b\u306f recover \u5f15\u6570\u306f\u7121\u304f\u3001\u540c\u7b49\u306e\u65b9\u6cd5\u304c\u308f\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u305d\u306e\u305f\u3081\u3001\u6b63\u898f\u8868\u73fe\u3067 & -> &amp; \u306b\u5f37\u5f15\u306b\u7f6e\u63db\u3057\u3066\u51e6\u7406\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u73fe\u72b6\u3046\u307e\u304f\u3044\u3063\u3066\u3044\u307e\u3059\u3002\n\u3053\u3093\u306a\u30b3\u30fc\u30c9\u3067\u7f6e\u63db\u3057\u307e\u3057\u305f\u3002\nre_entity = re.compile(r'(>[^<]*)(&)([^<]*<)')\nre_replace = re.compile(r'&(?!\\w*?;)')\n\ndef xml_repair(xml_source):\n    \"\"\"\n    >>> xml_repair('<dc:title id=\"title\">\u307b\u3052&\u3075\u304c (\u30db\u30b2&\u30d5\u30ac)</dc:title>')\n    '<dc:title id=\"title\">\u307b\u3052&amp;\u3075\u304c (\u30db\u30b2&amp;\u30d5\u30ac)</dc:title>'\n    >>> xml_repair('<a>a&b&c&amp;d&quot;e</a>')\n    '<a>a&amp;b&amp;c&amp;d&quot;e</a>'\n    \"\"\"\n    def _replace(matcher):\n        return re_replace.sub('&amp;', matcher.group(0))\n\n    return re_entity.sub(_replace, xml_source)\n\n(\u4eca\u56de\u306e\u4ef6\u3067\u306f\u7279\u306b\u5fc5\u8981\u3067\u306f\u306a\u304b\u3063\u305f\u305f\u3081) > \u3068 < \u306b\u631f\u307e\u308c\u3066\u3044\u308b\u90e8\u5206\u306e\u307f\u5bfe\u8c61\u306b\u3057\u307e\u3057\u305f\u304c\u3001\u3082\u3057\u304b\u3057\u3066\u305d\u306e\u5224\u5b9a\u306f\u884c\u308f\u305a\u306bxml \u3059\u3079\u3066\u306b _replace \u3092\u304b\u3051\u3066\u3082\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u307e\u305f\u3001& \u3067\u306f\u306a\u304f ' \u306a\u3069\u304c\u5165\u3063\u3066\u304d\u305f\u3089\u3084\u3063\u3071\u308a\u5931\u6557\u3059\u308b\u3088\u3046\u306b\u601d\u3044\u307e\u3059\u304c(\u672a\u691c\u8a3c)\u3001\u3053\u308c\u3082\u4eca\u56de\u306f\u4e0d\u8981\u3060\u3063\u305f\u305f\u3081\u8003\u616e\u306f\u3057\u3066\u3044\u307e\u305b\u3093\u3002\nPython3\u3067XML \u3092\u30d1\u30fc\u30b9\u3057\u3088\u3046\u3068\u3001\n\n```python\nfrom xml.etree import ElementTree\nElementTree.parse(xml_path)\n```\n\n\u3057\u305f\u6240\u3001\n\n```\nxml.etree.ElementTree.ParseError: not well-formed (invalid token): line *, column *\n```\n\n\u306e\u4f8b\u5916\u304c\u51fa\u3066\u3001\u51e6\u7406\u304c\u5931\u6557\u3057\u307e\u3057\u305f\u3002\n\nXML (\u4eca\u56de\u306e\u306f \u3068\u3042\u308bEPUB \u306e content xml )\u3092\u8aad\u3093\u3060\u6240\u3001\n\n```xml\n<dc:title id=\"title\">\u307b\u3052\u307b\u3052&\u3075\u304c\u3075\u304c</dc:title>\n```\n\n\u3068\u306a\u3063\u3066\u304a\u308a\u3001\u3053\u306e & \u304c\u5b9f\u4f53\u53c2\u7167\u3055\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u5931\u6557\u3057\u305f\u69d8\u5b50\u3002\n\nlxml \u3092\u4f7f\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u3001\n\n[python - ParseError: not well-formed (invalid token) using cElementTree - Stack Overflow](http://stackoverflow.com/questions/13046240/parseerror-not-well-formed-invalid-token-using-celementtree)\n\n\n\u3053\u3053\u306b\u3042\u308b\u3088\u3046\u306b\u3001Parser \u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b `recover=True` \u3092\u3064\u3051\u308b\u3053\u3068\u3067\u3044\u3051\u305d\u3046\u3067\u3059\u304c\u3001Python3 \u306e `xml.etree.ElementTree.XMLParser` \u306b\u306f `recover` \u5f15\u6570\u306f\u7121\u304f\u3001\u540c\u7b49\u306e\u65b9\u6cd5\u304c\u308f\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n\u305d\u306e\u305f\u3081\u3001\u6b63\u898f\u8868\u73fe\u3067 `&` -> `&amp;` \u306b\u5f37\u5f15\u306b\u7f6e\u63db\u3057\u3066\u51e6\u7406\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u73fe\u72b6\u3046\u307e\u304f\u3044\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u3093\u306a\u30b3\u30fc\u30c9\u3067\u7f6e\u63db\u3057\u307e\u3057\u305f\u3002\n\n```python\nre_entity = re.compile(r'(>[^<]*)(&)([^<]*<)')\nre_replace = re.compile(r'&(?!\\w*?;)')\n\ndef xml_repair(xml_source):\n    \"\"\"\n    >>> xml_repair('<dc:title id=\"title\">\u307b\u3052&\u3075\u304c (\u30db\u30b2&\u30d5\u30ac)</dc:title>')\n    '<dc:title id=\"title\">\u307b\u3052&amp;\u3075\u304c (\u30db\u30b2&amp;\u30d5\u30ac)</dc:title>'\n    >>> xml_repair('<a>a&b&c&amp;d&quot;e</a>')\n    '<a>a&amp;b&amp;c&amp;d&quot;e</a>'\n    \"\"\"\n    def _replace(matcher):\n        return re_replace.sub('&amp;', matcher.group(0))\n\n    return re_entity.sub(_replace, xml_source)\n```\n\n(\u4eca\u56de\u306e\u4ef6\u3067\u306f\u7279\u306b\u5fc5\u8981\u3067\u306f\u306a\u304b\u3063\u305f\u305f\u3081) > \u3068 < \u306b\u631f\u307e\u308c\u3066\u3044\u308b\u90e8\u5206\u306e\u307f\u5bfe\u8c61\u306b\u3057\u307e\u3057\u305f\u304c\u3001\u3082\u3057\u304b\u3057\u3066\u305d\u306e\u5224\u5b9a\u306f\u884c\u308f\u305a\u306bxml \u3059\u3079\u3066\u306b `_replace` \u3092\u304b\u3051\u3066\u3082\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u307e\u305f\u3001& \u3067\u306f\u306a\u304f ' \u306a\u3069\u304c\u5165\u3063\u3066\u304d\u305f\u3089\u3084\u3063\u3071\u308a\u5931\u6557\u3059\u308b\u3088\u3046\u306b\u601d\u3044\u307e\u3059\u304c(\u672a\u691c\u8a3c)\u3001\u3053\u308c\u3082\u4eca\u56de\u306f\u4e0d\u8981\u3060\u3063\u305f\u305f\u3081\u8003\u616e\u306f\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n", "tags": ["Python", "python3", "\u6b63\u898f\u8868\u73fe", "XML"]}