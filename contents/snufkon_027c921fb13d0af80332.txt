{"context": " More than 1 year has passed since last update.\u30d5\u30ea\u30fc\u3067\u4ed5\u4e8b\u3092\u3057\u3066\u3044\u308b snufkon \u3068\u3044\u3044\u307e\u3059\u3002\u6700\u8fd1\u306f\u682a\u5f0f\u4f1a\u793e\u30c6\u30f3\u30af\u30fc\u306b\u3066\u3001Clojure\u3092\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\n\u4eca\u65e5\u306f\u4ee5\u524d\u304b\u3089\u8abf\u3079\u3088\u3046\u3001\u8abf\u3079\u3088\u3046\u3068\u601d\u3044\u3064\u3064\u305a\u3063\u3068TODO\u30ea\u30b9\u30c8\u306b\u57cb\u3082\u308c\u3066\u3044\u305f Plumbing \u306b\u3064\u3044\u3066\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\u89b3\u6e2c\u3057\u305f\u9650\u308a\u3067\u306f\u65e5\u672c\u8a9e\u3067\u5f79\u306b\u7acb\u3064\u60c5\u5831\u3082\u306a\u3055\u305d\u3046\u3060\u3063\u305f\u306e\u3067\u3001\u3055\u308f\u308a\u7a0b\u5ea6\u306b\u8efd\u304f\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nPlumbing \u3068\u306f\uff1f\nPrismatic \u3068\u3044\u3046\u4f1a\u793e\u304c\u4f5c\u3063\u3066\u3044\u308b Clojure \u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002core \u306e\u90e8\u5206\u306f cljx \u3067\u66f8\u304b\u308c\u3066\u304a\u308a Version 0.3.0 \u304b\u3089 ClojureScript \u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002Prismatic \u3068\u3044\u3046\u3068 schema \u306e\u65b9\u3092\u3088\u304f\u898b\u304b\u3051\u307e\u3059\u304c\u3001 github \u306b\u3064\u3051\u3089\u308c\u3066\u3044\u308b\u2605\u306e\u6570\u3092\u307f\u3066\u307f\u308b\u3068\n\nschema: 787\nplumbing: 1038\n\n\u203b 2014-12-13 \u6642\u70b9\n\u3068\u306a\u3063\u3066\u304a\u308a plumbing > schema \u3060\u3063\u305f\u308a\u3057\u307e\u3059\u3002\u3064\u3044\u3067\u306b\u5b9a\u756a\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3069\u308c\u304f\u3089\u3044\u306e\u2605\u3092\u7372\u5f97\u3057\u3066\u3044\u308b\u304b\u8abf\u3079\u3066\u307f\u308b\u3068...\n\n\ncore.async: 778\n\nkorma: 870\n\nmidje: 942\n\nhiccup: 969\n\nring: 1228\n\ncompojure: 2310\n\nom: 3091\n\n\u3068\u3044\u3046\u7d50\u679c\u3067\u3057\u305f\u3002\u5b9f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u4f7f\u308f\u308c\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u9054\u3068\u905c\u8272\u306a\u3044\u7a0b\u5ea6\u306e\u2605\u3092\u78ba\u4fdd\u3057\u3066\u304a\u308a\u6f5c\u5728\u80fd\u529b\uff1f\u304c\u3042\u308a\u305d\u3046\u306a\u6c17\u304c\u3057\u307e\u3059\u3002(\u3042\u304f\u307e\u3067\u2605\u306e\u6570\u3060\u3051\u3067\u3059\u304c...)\n\u3053\u306e\u6f5c\u5728\u80fd\u529b\u3092\u6301\u3063\u305f Plumbing \u3067\u3059\u304c\u5185\u90e8\u7684\u306b\uff12\u3064\u306e\u6a5f\u80fd\u7fa4\u306b\u5206\u304b\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\nGraph\nplumbing.core\n\n\u4eca\u56de\u306f\u3001\u7d19\u9762\u306e\u90fd\u5408\u306b\u3088\u308a Graph \u306f\u6271\u3044\u307e\u305b\u3093\u3002\u5358\u7d14\u306a\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u3067\u3042\u308b plumbing.core \u306b\u3069\u3093\u306a\u95a2\u6570\u304c\u3042\u308b\u304b\u3060\u3051\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\nplumbing.core\n\u73fe\u5728(2014-12-13)\u3001plumbing.core \u306b\u306f43\u500b\u306e\u95a2\u6570&\u30de\u30af\u30ed\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u3046\u3061\u306e\u3044\u304f\u3064\u304b\u306b\u3064\u3044\u3066\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\nplumbing \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f0.3.5\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30de\u30c3\u30d7\u95a2\u9023\n\u30b9\u30ec\u30c3\u30c7\u30a3\u30f3\u30b0\u30de\u30af\u30ed\u95a2\u9023\nWhen \u95a2\u9023\n\u305d\u306e\u4ed6\n\n\u3068\u5206\u985e\u3057\u3066\u3042\u308a\u307e\u3059\u304c\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u5074\u3067\u306f\u7279\u306b\u5206\u985e\u7b49\u306f\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\n\u30de\u30c3\u30d7\u95a2\u9023\nmap-from-keys\n(map-from-keys f ks)\nks(keys) \u306e\u5404 k(key) \u306b\u5bfe\u3057\u3066 (f k) \u3092\u5024\u306b\u3057\u305f\u30de\u30c3\u30d7\u3092\u4f5c\u6210\n(map-from-keys #(count %) [\"a\" \"bb\" \"ccc\"])\n;; {\"a\" 1, \"bb\" 2, \"ccc\" 3}\n\nmap-from-vals\n(map-from-vals f vs)\nvs(values) \u306e\u5404 v(value) \u306b\u5bfe\u3057\u3066 (f v) \u3092\u30ad\u30fc\u306b\u3057\u305f\u30de\u30c3\u30d7\u3092\u4f5c\u6210\n(map-from-vals #(-> % first str keyword) [\"aaa\" \"bbb\" \"ccc\"])\n;; {:a \"aaa\", :b \"bbb\", :c \"ccc\"}\n\n;; \u30ad\u30fc\u304c\u91cd\u8907\u3059\u308b\u5834\u5408\u306f\u5f8c\u3092\u6b8b\u3059\n(map-from-vals #(-> % first str keyword) [\"aaa\" \"bbb\" \"ccc\" \"aaaa\"])\n;; {:a \"aaaa\", :b \"bbb\", :c \"ccc\"}\n\nmap-keys\n(map-keys f m)\nm(map)\u306e \u5404 k(key) \u306b\u5bfe\u3057\u3066 (f k) \u3067\u30ad\u30fc\u3092\u7f6e\u63db\u3057\u305f\u30de\u30c3\u30d7\u3092\u4f5c\u6210\n(map-keys #(-> % name first str keyword) {:aa 1 :bb 2 :cc 3})\n;; {:a 1, :b 2, :c 3}\n\n;; \u30ad\u30fc\u304c\u91cd\u8907\u3059\u308b\u5834\u5408\u306f\u5f8c\u3092\u6b8b\u3059\n(map-keys #(-> % name first str keyword) {:aa 1 :bb 2 :cc 3 :aaa 4})\n;; {:a 4, :b 2, :c 3}\n\nmap-vals\n(map-vals f m)\nm(map)\u306e \u5404 v(value) \u306b\u5bfe\u3057\u3066 (f v) \u3067\u5024\u3092\u7f6e\u63db\u3057\u305f\u30de\u30c3\u30d7\u3092\u4f5c\u6210\n(map-vals inc {:aa 1 :bb 2 :cc 3})\n;; {:aa 2, :bb 3, :cc 4}\n\nfor-map\n(for-map seq-exprs key-expr val-expr)\nfor \u306e\u69cb\u6587\u3067\u6700\u5f8c\u306b\uff12\u3064(key-expr, val-expr)\u5f15\u6570\u3092\u53d6\u308a\u30de\u30c3\u30d7\u3092\u4f5c\u6210\n(for-map [i (range 3)\n           j (range 3)\n           :let [s (+ i j)]\n           :when (< s 3)]\n           [i j]\n           (even? s))\n;; {[0 0] true, [0 1] false, [0 2] true, [1 0] false, [1 1] true, [2 0] true}\n\n\n\u30b9\u30ec\u30c3\u30c7\u30a3\u30f3\u30b0\u30de\u30af\u30ed\u95a2\u9023\n?>\n(?> arg do-it? & rest)\n->(thread-first\u30de\u30af\u30ed)\u5185\u306b\u6761\u4ef6\u4ed8\u304d\u306e\u30d5\u30a9\u30fc\u30e0\u3092\u8ffd\u52a0\n(let [add-c? false]\n  (-> {:a 1}\n      (merge {:b 2})\n      (?> add-c? (assoc :c 3))))\n;; {:b 2, :a 1}\n\n;; add-c? \u3092 true \u306b\u5909\u66f4\n(let [add-c? true]\n  (-> {:a 1}\n      (merge {:b 2})\n      (?> add-c? (assoc :c 3))))\n;; {:c 3, :b 2, :a 1}      \n\n?>>\n(?>> do-it? & args)\n->>(thread-last\u30de\u30af\u30ed)\u5185\u306b\u6761\u4ef6\u4ed8\u304d\u30d5\u30a9\u30fc\u30e0\u3092\u8ffd\u52a0\n(let [inc-all? false]\n  (->> (range 10)\n       (filter even?)\n       (?>> inc-all? (map inc))))\n;; (0 2 4 6 8)       \n\n;; inc-all? \u3092 true \u306b\u5909\u66f4\n(let [inc-all? true]\n  (->> (range 10)\n       (filter even?)\n       (?>> inc-all? (map inc))))\n;; (1 3 5 7 9)       \n\n\n<-\n(<- & body)\n->>(thread-last\u30de\u30af\u30ed)\u5185\u3067->(thread-first\u30de\u30af\u30ed)\u306e\u52d5\u4f5c\u306b\u5909\u66f4\n(->> (range 5)\n     (map inc)\n     vec\n     (<- (conj 6)))\n;; [1 2 3 4 5 6]     \n\nas->>\n(as->> name & forms-and-expr)\n->>(thread-last\u30de\u30af\u30ed)\u5185\u3067as->\u3068\u540c\u69d8\u306e\u6a5f\u80fd\u3092\u63d0\u4f9b\n(->> [1 2 3 4 5]\n      (map inc)\n      (as->> x (do (println \"x:\" x) x))\n      (map inc))\n;; (3 4 5 6 7)\n\nfn->\n(fn-> & body)\n`(fn [x] (-> x ~@body)) \u3068\u7b49\u4fa1\n(def func (fn-> (assoc :b 2) \n                 (assoc :c 3)))\n(func {:a 1})\n;; {:c 3, :b 2, :a 1}\n\n\nwhen \u95a2\u9023\nassoc-when\n(assoc-when m & kvs)\nvalue \u304c truthy \u306e\u5834\u5408\u306e\u307f assoc\n(assoc-when {:a 1 :b 2} :c 3 :d nil)\n;; {:a 1, :b 2, :c 3}\n\n;; assoc \u306e\u5834\u5408\n(assoc {:a 1 :b 2} :c 3 :d nil)\n;; {:d nil, :c 3, :a 1, :b 2}\n\nconj-when\n(conj-when coll x)\n(conj-when coll x & xs)\ntruthy \u306e\u5024\u306e\u307f conj\n(conj-when [1 2 3] nil 4)\n;; [1 2 3 4]\n\n;; conj \u306e\u5834\u5408\n(conj [1 2 3] nil 4)\n;; [1 2 3 nil 4]\n\ncons-when\n(cons-when x s)\ntruthy \u306e\u5834\u5408\u306e\u307f cons\n(cons-when 4 '(1 2 3))\n;; (4 1 2 3)\n(cons-when nil '(1 2 3))\n;; (1 2 3)\n\n;; cons \u306e\u5834\u5408\n(cons 4 '(1 2 3))\n;; (4 1 2 3)\n(cons nil '(1 2 3))\n;; (nil 1 2 3)\n\ncount-when\n(count-when pred xs)\n(pred x) \u304c truthy \u306e\u5834\u5408\u306e\u307f count\n(count-when even? [1 2 3 4 5])\n;; 2\n\nupdate-in-when\n(update-in-when m key-seq f & args)\nkey-seq \u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306b m(map) \u3092\u5909\u66f4\u305b\u305a\u306b\u8fd4\u3059 update-in\n(update-in-when {:a 1 :b 2} [:b] inc)\n;; {:a 1, :b 3}\n(update-in-when {:a 1 :b 2} [:c] inc)\n;; {:a 1, :b 2}\n\n;; update-in \u306e\u5834\u5408\n(update-in {:a 1 :b 2} [:b] inc)\n;; {:a 1, :b 3}\n(update-in {:a 1 :b 2} [:c] inc)\n;; java.lang.NullPointerException: null...\n\n\n\u305d\u306e\u4ed6\nsafe-get\n(safe-get m k)\nk(key)\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306b\u4f8b\u5916\u3092\u6295\u3052\u308b get\n(safe-get {:a 1 :b 2} :b)\n;; 2\n(safe-get {:a 1 :b 2} :c)\n;; java.lang.RuntimeException: Key :c not found in [:a :b]\n\n;; get \u306e\u5834\u5408\n(get {:a 1 :b 2} :b)\n;; 2\n(get {:a 1 :b 2} :c)\n;; nil\n\nswap-pair!\n(swap-pair! a f)\n(swap-pair! a f & args)\n[old-val new-val] \u3092\u8fd4\u3059 swap!\n(let [a (atom 0)]\n  (swap-pair! a inc))\n;; [0 1]\n\n;; swap! \u306e\u5834\u5408\n(let [a (atom 0)]\n  (swap! a inc))\n;; 1\n\npositions\n(positions f s)\ns(sequence)\u306e\u8981\u7d20 x \u306b\u5bfe\u3057\u3066 (f x) \u304c truthy \u3068\u306a\u308b\u4f4d\u7f6e(\u30a4\u30f3\u30c7\u30c3\u30af\u30b9)\n(positions number? [1 \"2\" 3 \\4])\n;; (0 2)\n\nsingleton\n(singleton xs)\nxs \u304c 1\u8981\u7d20\u306e\u5834\u5408\u3001(first xs)\u3092\u8fd4\u3059\n(singleton [1])\n;; 1\n(singleton [1 2 3])\n;; nil\n\ndissoc-in\n(dissoc-in m [k & ks])\nget-in, assoc-in \u7b49\u306e dissoc \u7248\n(dissoc-in {:a 1 :b {:c 2 :d 3} :e 4} \n             [:b :d])\n;; {:a 1, :b {:c 2}, :e 4}\n\n;; \u7a7a\u306e\u30de\u30c3\u30d7\u306f\u53d6\u308a\u9664\u304b\u308c\u308b\n(dissoc-in {:a 1 :b {:c 3} :d 4} \n             [:b :c])\n;; {:a 1, :d 4}           \n\n\n\u304a\u308f\u308a\u306b\n\u4eca\u56de\u306f\u3001Plumbing \u306e\u4e00\u90e8\u3092\u306a\u3059 plumbing.core \u5185\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3057\u305f\u30021\u30641\u3064\u306e\u95a2\u6570\u306f\u30b7\u30f3\u30d7\u30eb\u3067\u3001\u666e\u6bb5 Clojure \u3092\u66f8\u3044\u3066\u3044\u308b\u4eba\u306f\u4f3c\u3066\u3044\u308b\u95a2\u6570\u3092\u3044\u304f\u3064\u304b\u66f8\u3044\u305f\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\nplumbing.core \u306f\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u3060\u3051\u306a\u306e\u3067\u3001\u5b9f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u3082\u3059\u3093\u306a\u308a\u3068\u5c0e\u5165\u3067\u304d\u305d\u3046\u3067\u3059\u3002\u307e\u305f\u3001ClojureScript \u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u3082\u5b09\u3057\u3044\u3068\u3053\u308d\u3067\u3059\u3002\u9006\u306b\u4eca\u56de\u7d39\u4ecb\u3057\u306a\u304b\u3063\u305f Graph \u306e\u65b9\u306f\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u5c0e\u5165\u306b\u5c11\u3057\u3070\u304b\u308a\u30b3\u30b9\u30c8\u304c\u304c\u304b\u308a\u307e\u3059\u304c\u3001\u6709\u52b9\u306b\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u3068\u5927\u304d\u306a\u52b9\u679c\u304c\u671f\u5f85\u3067\u304d\u305d\u3046\u3067\u3059\u3002\u8208\u5473\u304c\u3042\u308b\u65b9\u306f\u3001Prismatic\u306e\u30d6\u30ed\u30b0\u8a18\u4e8b\u304c\u5206\u304b\u308a\u3084\u3059\u304b\u3063\u305f\u306e\u3067\u4e00\u8aad\u3057\u3066\u307f\u308b\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002\u6a5f\u4f1a\u304c\u3042\u308a\u307e\u3057\u305f\u3089\u3001Graph \u306b\u3064\u3044\u3066\u3082\u8a18\u4e8b\u3092\u66f8\u3044\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30d5\u30ea\u30fc\u3067\u4ed5\u4e8b\u3092\u3057\u3066\u3044\u308b snufkon \u3068\u3044\u3044\u307e\u3059\u3002\u6700\u8fd1\u306f[\u682a\u5f0f\u4f1a\u793e\u30c6\u30f3\u30af\u30fc](https://xcoo.co.jp/)\u306b\u3066\u3001Clojure\u3092\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\n\n\u4eca\u65e5\u306f\u4ee5\u524d\u304b\u3089\u8abf\u3079\u3088\u3046\u3001\u8abf\u3079\u3088\u3046\u3068\u601d\u3044\u3064\u3064\u305a\u3063\u3068TODO\u30ea\u30b9\u30c8\u306b\u57cb\u3082\u308c\u3066\u3044\u305f Plumbing \u306b\u3064\u3044\u3066\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\u89b3\u6e2c\u3057\u305f\u9650\u308a\u3067\u306f\u65e5\u672c\u8a9e\u3067\u5f79\u306b\u7acb\u3064\u60c5\u5831\u3082\u306a\u3055\u305d\u3046\u3060\u3063\u305f\u306e\u3067\u3001\u3055\u308f\u308a\u7a0b\u5ea6\u306b\u8efd\u304f\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n## Plumbing \u3068\u306f\uff1f\n\nPrismatic \u3068\u3044\u3046\u4f1a\u793e\u304c\u4f5c\u3063\u3066\u3044\u308b Clojure \u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002core \u306e\u90e8\u5206\u306f [cljx](https://github.com/lynaghk/cljx) \u3067\u66f8\u304b\u308c\u3066\u304a\u308a Version 0.3.0 \u304b\u3089 ClojureScript \u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002Prismatic \u3068\u3044\u3046\u3068 [schema](https://github.com/Prismatic/schema) \u306e\u65b9\u3092\u3088\u304f\u898b\u304b\u3051\u307e\u3059\u304c\u3001 github \u306b\u3064\u3051\u3089\u308c\u3066\u3044\u308b\u2605\u306e\u6570\u3092\u307f\u3066\u307f\u308b\u3068\n\n* schema: 787\n* plumbing: 1038\n\n\u203b 2014-12-13 \u6642\u70b9\n\n\u3068\u306a\u3063\u3066\u304a\u308a plumbing > schema \u3060\u3063\u305f\u308a\u3057\u307e\u3059\u3002\u3064\u3044\u3067\u306b\u5b9a\u756a\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3069\u308c\u304f\u3089\u3044\u306e\u2605\u3092\u7372\u5f97\u3057\u3066\u3044\u308b\u304b\u8abf\u3079\u3066\u307f\u308b\u3068...\n\n\n* [core.async](https://github.com/clojure/core.async): 778\n* [korma](https://github.com/korma/Korma): 870\n* [midje](https://github.com/marick/Midje): 942\n* [hiccup](https://github.com/weavejester/hiccup): 969\n* [ring](https://github.com/ring-clojure/ring): 1228\n* [compojure](https://github.com/weavejester/compojure): 2310\n* [om](https://github.com/swannodette/om): 3091\n\n\u3068\u3044\u3046\u7d50\u679c\u3067\u3057\u305f\u3002\u5b9f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u4f7f\u308f\u308c\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u9054\u3068\u905c\u8272\u306a\u3044\u7a0b\u5ea6\u306e\u2605\u3092\u78ba\u4fdd\u3057\u3066\u304a\u308a\u6f5c\u5728\u80fd\u529b\uff1f\u304c\u3042\u308a\u305d\u3046\u306a\u6c17\u304c\u3057\u307e\u3059\u3002(\u3042\u304f\u307e\u3067\u2605\u306e\u6570\u3060\u3051\u3067\u3059\u304c...)\n\n\u3053\u306e\u6f5c\u5728\u80fd\u529b\u3092\u6301\u3063\u305f Plumbing \u3067\u3059\u304c\u5185\u90e8\u7684\u306b\uff12\u3064\u306e\u6a5f\u80fd\u7fa4\u306b\u5206\u304b\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n* Graph\n* plumbing.core\n\n\u4eca\u56de\u306f\u3001\u7d19\u9762\u306e\u90fd\u5408\u306b\u3088\u308a Graph \u306f\u6271\u3044\u307e\u305b\u3093\u3002\u5358\u7d14\u306a\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u3067\u3042\u308b plumbing.core \u306b\u3069\u3093\u306a\u95a2\u6570\u304c\u3042\u308b\u304b\u3060\u3051\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n## plumbing.core\n\n\u73fe\u5728(2014-12-13)\u3001plumbing.core \u306b\u306f43\u500b\u306e\u95a2\u6570&\u30de\u30af\u30ed\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u3046\u3061\u306e\u3044\u304f\u3064\u304b\u306b\u3064\u3044\u3066\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\nplumbing \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f`0.3.5`\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n* \u30de\u30c3\u30d7\u95a2\u9023\n* \u30b9\u30ec\u30c3\u30c7\u30a3\u30f3\u30b0\u30de\u30af\u30ed\u95a2\u9023\n* When \u95a2\u9023\n* \u305d\u306e\u4ed6\n\n\u3068\u5206\u985e\u3057\u3066\u3042\u308a\u307e\u3059\u304c\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u5074\u3067\u306f\u7279\u306b\u5206\u985e\u7b49\u306f\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\n### \u30de\u30c3\u30d7\u95a2\u9023\n\n**map-from-keys**\n(map-from-keys f ks)\n\nks(keys) \u306e\u5404 k(key) \u306b\u5bfe\u3057\u3066 (f k) \u3092\u5024\u306b\u3057\u305f\u30de\u30c3\u30d7\u3092\u4f5c\u6210\n\n```clojure\n(map-from-keys #(count %) [\"a\" \"bb\" \"ccc\"])\n;; {\"a\" 1, \"bb\" 2, \"ccc\" 3}\n```\n\n\n**map-from-vals**\n(map-from-vals f vs)\n\nvs(values) \u306e\u5404 v(value) \u306b\u5bfe\u3057\u3066 (f v) \u3092\u30ad\u30fc\u306b\u3057\u305f\u30de\u30c3\u30d7\u3092\u4f5c\u6210\n\n```clojure\n(map-from-vals #(-> % first str keyword) [\"aaa\" \"bbb\" \"ccc\"])\n;; {:a \"aaa\", :b \"bbb\", :c \"ccc\"}\n\n;; \u30ad\u30fc\u304c\u91cd\u8907\u3059\u308b\u5834\u5408\u306f\u5f8c\u3092\u6b8b\u3059\n(map-from-vals #(-> % first str keyword) [\"aaa\" \"bbb\" \"ccc\" \"aaaa\"])\n;; {:a \"aaaa\", :b \"bbb\", :c \"ccc\"}\n```\n\n\n**map-keys**\n(map-keys f m)\n\nm(map)\u306e \u5404 k(key) \u306b\u5bfe\u3057\u3066 (f k) \u3067\u30ad\u30fc\u3092\u7f6e\u63db\u3057\u305f\u30de\u30c3\u30d7\u3092\u4f5c\u6210\n\n```clojure\n(map-keys #(-> % name first str keyword) {:aa 1 :bb 2 :cc 3})\n;; {:a 1, :b 2, :c 3}\n\n;; \u30ad\u30fc\u304c\u91cd\u8907\u3059\u308b\u5834\u5408\u306f\u5f8c\u3092\u6b8b\u3059\n(map-keys #(-> % name first str keyword) {:aa 1 :bb 2 :cc 3 :aaa 4})\n;; {:a 4, :b 2, :c 3}\n```\n\n\n**map-vals**\n(map-vals f m)\n\nm(map)\u306e \u5404 v(value) \u306b\u5bfe\u3057\u3066 (f v) \u3067\u5024\u3092\u7f6e\u63db\u3057\u305f\u30de\u30c3\u30d7\u3092\u4f5c\u6210\n\n```clojure\n(map-vals inc {:aa 1 :bb 2 :cc 3})\n;; {:aa 2, :bb 3, :cc 4}\n```\n\n**for-map**\n(for-map seq-exprs key-expr val-expr)\n\nfor \u306e\u69cb\u6587\u3067\u6700\u5f8c\u306b\uff12\u3064(key-expr, val-expr)\u5f15\u6570\u3092\u53d6\u308a\u30de\u30c3\u30d7\u3092\u4f5c\u6210\n\n```clojure\n(for-map [i (range 3)\n           j (range 3)\n           :let [s (+ i j)]\n           :when (< s 3)]\n           [i j]\n           (even? s))\n;; {[0 0] true, [0 1] false, [0 2] true, [1 0] false, [1 1] true, [2 0] true}\n```\n\n\n### \u30b9\u30ec\u30c3\u30c7\u30a3\u30f3\u30b0\u30de\u30af\u30ed\u95a2\u9023\n**?>**\n(?> arg do-it? & rest)\n\n`->`(thread-first\u30de\u30af\u30ed)\u5185\u306b\u6761\u4ef6\u4ed8\u304d\u306e\u30d5\u30a9\u30fc\u30e0\u3092\u8ffd\u52a0\n\n```clojure\n(let [add-c? false]\n  (-> {:a 1}\n      (merge {:b 2})\n      (?> add-c? (assoc :c 3))))\n;; {:b 2, :a 1}\n\n;; add-c? \u3092 true \u306b\u5909\u66f4\n(let [add-c? true]\n  (-> {:a 1}\n      (merge {:b 2})\n      (?> add-c? (assoc :c 3))))\n;; {:c 3, :b 2, :a 1}      \n```\n\n**?>>**\n(?>> do-it? & args)\n\n`->>`(thread-last\u30de\u30af\u30ed)\u5185\u306b\u6761\u4ef6\u4ed8\u304d\u30d5\u30a9\u30fc\u30e0\u3092\u8ffd\u52a0\n\n```clojure\n(let [inc-all? false]\n  (->> (range 10)\n       (filter even?)\n       (?>> inc-all? (map inc))))\n;; (0 2 4 6 8)       \n       \n;; inc-all? \u3092 true \u306b\u5909\u66f4\n(let [inc-all? true]\n  (->> (range 10)\n       (filter even?)\n       (?>> inc-all? (map inc))))\n;; (1 3 5 7 9)       \n       \n```\n\n**<-**\n(<- & body)\n\n`->>`(thread-last\u30de\u30af\u30ed)\u5185\u3067`->`(thread-first\u30de\u30af\u30ed)\u306e\u52d5\u4f5c\u306b\u5909\u66f4\n\n```clojure\n(->> (range 5)\n     (map inc)\n     vec\n     (<- (conj 6)))\n;; [1 2 3 4 5 6]     \n```\n\n**as->>**\n(as->> name & forms-and-expr)\n\n`->>`(thread-last\u30de\u30af\u30ed)\u5185\u3067`as->`\u3068\u540c\u69d8\u306e\u6a5f\u80fd\u3092\u63d0\u4f9b\n\n```clojure\n(->> [1 2 3 4 5]\n      (map inc)\n      (as->> x (do (println \"x:\" x) x))\n      (map inc))\n;; (3 4 5 6 7)\n```\n\n**fn->**\n(fn-> & body)\n\n\\`(fn \\[x] (-> x ~@body)) \u3068\u7b49\u4fa1\n\n```clojure\n(def func (fn-> (assoc :b 2) \n                 (assoc :c 3)))\n(func {:a 1})\n;; {:c 3, :b 2, :a 1}\n```\n\n### when \u95a2\u9023\n\n**assoc-when**\n(assoc-when m & kvs)\n\nvalue \u304c truthy \u306e\u5834\u5408\u306e\u307f assoc\n\n```clojure\n(assoc-when {:a 1 :b 2} :c 3 :d nil)\n;; {:a 1, :b 2, :c 3}\n\n;; assoc \u306e\u5834\u5408\n(assoc {:a 1 :b 2} :c 3 :d nil)\n;; {:d nil, :c 3, :a 1, :b 2}\n```\n\n**conj-when**\n(conj-when coll x)\n(conj-when coll x & xs)\n\ntruthy \u306e\u5024\u306e\u307f conj\n\n```clojure\n(conj-when [1 2 3] nil 4)\n;; [1 2 3 4]\n\n;; conj \u306e\u5834\u5408\n(conj [1 2 3] nil 4)\n;; [1 2 3 nil 4]\n```\n\n**cons-when**\n(cons-when x s)\n\ntruthy \u306e\u5834\u5408\u306e\u307f cons\n\n```clojure\n(cons-when 4 '(1 2 3))\n;; (4 1 2 3)\n(cons-when nil '(1 2 3))\n;; (1 2 3)\n\n;; cons \u306e\u5834\u5408\n(cons 4 '(1 2 3))\n;; (4 1 2 3)\n(cons nil '(1 2 3))\n;; (nil 1 2 3)\n```\n\n**count-when**\n(count-when pred xs)\n\n(pred x) \u304c truthy \u306e\u5834\u5408\u306e\u307f count\n\n```clojure\n(count-when even? [1 2 3 4 5])\n;; 2\n```\n\n**update-in-when**\n(update-in-when m key-seq f & args)\n\nkey-seq \u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306b m(map) \u3092\u5909\u66f4\u305b\u305a\u306b\u8fd4\u3059 update-in\n\n```clojure\n(update-in-when {:a 1 :b 2} [:b] inc)\n;; {:a 1, :b 3}\n(update-in-when {:a 1 :b 2} [:c] inc)\n;; {:a 1, :b 2}\n\n;; update-in \u306e\u5834\u5408\n(update-in {:a 1 :b 2} [:b] inc)\n;; {:a 1, :b 3}\n(update-in {:a 1 :b 2} [:c] inc)\n;; java.lang.NullPointerException: null...\n```\n\n### \u305d\u306e\u4ed6\n\n**safe-get**\n(safe-get m k)\n\nk(key)\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306b\u4f8b\u5916\u3092\u6295\u3052\u308b get\n\n```clojure\n(safe-get {:a 1 :b 2} :b)\n;; 2\n(safe-get {:a 1 :b 2} :c)\n;; java.lang.RuntimeException: Key :c not found in [:a :b]\n\n;; get \u306e\u5834\u5408\n(get {:a 1 :b 2} :b)\n;; 2\n(get {:a 1 :b 2} :c)\n;; nil\n```\n\n**swap-pair!**\n(swap-pair! a f)\n(swap-pair! a f & args)\n\n[old-val new-val] \u3092\u8fd4\u3059 swap!\n\n```clojure\n(let [a (atom 0)]\n  (swap-pair! a inc))\n;; [0 1]\n\n;; swap! \u306e\u5834\u5408\n(let [a (atom 0)]\n  (swap! a inc))\n;; 1\n```\n\n**positions**\n(positions f s)\n\ns(sequence)\u306e\u8981\u7d20 x \u306b\u5bfe\u3057\u3066 (f x) \u304c truthy \u3068\u306a\u308b\u4f4d\u7f6e(\u30a4\u30f3\u30c7\u30c3\u30af\u30b9)\n\n```clojure\n(positions number? [1 \"2\" 3 \\4])\n;; (0 2)\n```\n\n**singleton**\n(singleton xs)\n\nxs \u304c 1\u8981\u7d20\u306e\u5834\u5408\u3001(first xs)\u3092\u8fd4\u3059\n\n```clojure\n(singleton [1])\n;; 1\n(singleton [1 2 3])\n;; nil\n```\n\n**dissoc-in**\n(dissoc-in m [k & ks])\n\nget-in, assoc-in \u7b49\u306e dissoc \u7248\n\n```clojure\n(dissoc-in {:a 1 :b {:c 2 :d 3} :e 4} \n             [:b :d])\n;; {:a 1, :b {:c 2}, :e 4}\n\n;; \u7a7a\u306e\u30de\u30c3\u30d7\u306f\u53d6\u308a\u9664\u304b\u308c\u308b\n(dissoc-in {:a 1 :b {:c 3} :d 4} \n             [:b :c])\n;; {:a 1, :d 4}           \n```\n\n## \u304a\u308f\u308a\u306b\n\n\u4eca\u56de\u306f\u3001Plumbing \u306e\u4e00\u90e8\u3092\u306a\u3059 plumbing.core \u5185\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3057\u305f\u30021\u30641\u3064\u306e\u95a2\u6570\u306f\u30b7\u30f3\u30d7\u30eb\u3067\u3001\u666e\u6bb5 Clojure \u3092\u66f8\u3044\u3066\u3044\u308b\u4eba\u306f\u4f3c\u3066\u3044\u308b\u95a2\u6570\u3092\u3044\u304f\u3064\u304b\u66f8\u3044\u305f\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\n\nplumbing.core \u306f\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u3060\u3051\u306a\u306e\u3067\u3001\u5b9f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u3082\u3059\u3093\u306a\u308a\u3068\u5c0e\u5165\u3067\u304d\u305d\u3046\u3067\u3059\u3002\u307e\u305f\u3001ClojureScript \u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u3082\u5b09\u3057\u3044\u3068\u3053\u308d\u3067\u3059\u3002\u9006\u306b\u4eca\u56de\u7d39\u4ecb\u3057\u306a\u304b\u3063\u305f Graph \u306e\u65b9\u306f\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u5c0e\u5165\u306b\u5c11\u3057\u3070\u304b\u308a\u30b3\u30b9\u30c8\u304c\u304c\u304b\u308a\u307e\u3059\u304c\u3001\u6709\u52b9\u306b\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u3068\u5927\u304d\u306a\u52b9\u679c\u304c\u671f\u5f85\u3067\u304d\u305d\u3046\u3067\u3059\u3002\u8208\u5473\u304c\u3042\u308b\u65b9\u306f\u3001Prismatic\u306e[\u30d6\u30ed\u30b0\u8a18\u4e8b](http://blog.getprismatic.com/prismatics-graph-at-strange-loop/)\u304c\u5206\u304b\u308a\u3084\u3059\u304b\u3063\u305f\u306e\u3067\u4e00\u8aad\u3057\u3066\u307f\u308b\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002\u6a5f\u4f1a\u304c\u3042\u308a\u307e\u3057\u305f\u3089\u3001Graph \u306b\u3064\u3044\u3066\u3082\u8a18\u4e8b\u3092\u66f8\u3044\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["Clojure", "AdventCalendar", "ClojureScript"]}