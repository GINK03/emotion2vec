{"context": "\n\n\u3053\u308c\u306a\u306b\n\u4fe1\u53f7\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u5909\u3048\u3066\u3001\u4fe1\u53f7\u5f85\u3061\u3092\u6e1b\u3089\u3057\u307e\u3059\u3002\n\n\u554f\u984c\n\u4e0b\u56f3\u306e\u3088\u3046\u306a\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304c\u3042\u308a\u3001D, E, H, I \u306e4\u304b\u6240\u306b\u4fe1\u53f7\u304c\u3042\u308a\u307e\u3059\u3002\n\n4\u4eba\u306e\u30e6\u30fc\u30b6\u304c \u305d\u308c\u305e\u308c\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u79fb\u52d5\u3057\u307e\u3059\u3002\n\n\u6642\u523b 0 \u306b\u3001A \u3092\u51fa\u767a\u3057 L \u306b\u5411\u304b\u3046\n\u6642\u523b 2 \u306b\u3001B \u3092\u51fa\u767a\u3057 K \u306b\u5411\u304b\u3046\n\u6642\u523b 1 \u306b\u3001C \u3092\u51fa\u767a\u3057 J \u306b\u5411\u304b\u3046\n\u6642\u523b 2 \u306b\u3001G \u3092\u51fa\u767a\u3057 F \u306b\u5411\u304b\u3046\n\n\u4fe1\u53f7\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u306f\u30014\u30d1\u30bf\u30fc\u30f3\u3042\u308a\u3001\u4e0b\u8868\u306e\u3088\u3046\u306b\u52d5\u3051\u308b\u3068\u3057\u307e\u3059\u3002\n\n\n\n\u30d1\u30bf\u30fc\u30f3\nT1\nT2\nT3\nT4\n\n\n\n\n0\n\u4e0a\u4e0b\n\u5de6\u53f3\n\u5de6\u53f3\n\u4e0a\u4e0b\n\n\n1\n\u4e0a\u4e0b\n\u4e0a\u4e0b\n\u5de6\u53f3\n\u5de6\u53f3\n\n\n2\n\u5de6\u53f3\n\u4e0a\u4e0b\n\u4e0a\u4e0b\n\u5de6\u53f3\n\n\n3\n\u5de6\u53f3\n\u5de6\u53f3\n\u4e0a\u4e0b\n\u4e0a\u4e0b\n\n\n\n\u3053\u306e\u3068\u304d\u3001\u6700\u3082\u30b9\u30e0\u30fc\u30b9\u306b\u6d41\u308c\u308b\u3001\u4fe1\u53f7D, E, H, I \u306e\u30bf\u30a4\u30df\u30f3\u30b0\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u6c42\u3081\u307e\u3059\u3002\n\n\u89e3\u3044\u3066\u307f\u308b\n\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u4f5c\u6210\n\npython3\n%matplotlib inline\nimport networkx as nx, matplotlib.pyplot as plt\nfrom more_itertools import chunked\nplt.rcParams['figure.figsize'] = 4, 4\ng = nx.DiGraph()\nfor i, ar in enumerate(['ADBECDEFGHIJHKIL', '', 'DEDHEIHI']):\n    for fr, to in chunked(ar, 2):\n        g.add_edge(fr, to, weight=i+1)\n        if i == 2:\n            g.add_edge(to, fr, weight=i+1)\npos = {chr(i+65):(int(x),int(y)) for i, (x,y)\n    in enumerate(chunked('154504144454011141511040', 2))}\nnx.draw(g, pos, node_color='white')\nnx.draw_networkx_labels(g, pos);\n\n\n\n\n\u591a\u54c1\u7a2e\u6642\u7a7a\u9593\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u30d5\u30ed\u30fc\u306b\u5bfe\u5fdc\u3059\u308b\u8868\u3092\u4f5c\u6210\n\u30e6\u30fc\u30b6\u3054\u3068\u306b\u30ec\u30a4\u30e4\u3092\u308f\u3051\u307e\u3059\u3002\u30e6\u30fc\u30b6\u00d7\u6642\u00d7\u7a7a\u306e3\u6b21\u5143\u306b\u306a\u308a\u307e\u3059\u3002\n\npython3\nimport numpy as np, pandas as pd\nfrom pulp import *\nfrom ortoolpy import addvars, addbinvars\ndef make(g, T):\n    stnd, ednd, sttm = 'ABCG', 'LKJF', [0,2,1,2] # \u767a\u751f\u30e6\u30fc\u30b6\u306e\u59cb\u3068\u7d42\u3068\u6642\n    for la in range(4):\n        for t1 in range(T):\n            for nd in g.nodes():\n                yield la, nd, t1, nd, t1+1\n            for fr, dc in g.edge.items():\n                for to, atr in dc.items():\n                    t2 = t1 + atr['weight']\n                    if t2 <= T:\n                        yield la, fr, t1, to, t2\n    for l, c in enumerate(stnd):\n        yield l, '_', 0, c, sttm[l]\n    for l, c in enumerate(ednd):\n        for t in range(8,T):\n            t2 = t+sttm[l]\n            if t2 < T:\n                yield l, c, t2, '_', 0\nT = 13\na = pd.DataFrame(make(g, T), columns=['Layer', 'FrNd', 'FrTm', 'ToNd', 'ToTm'])\na['From'] = a.FrNd+a.FrTm.astype(str)\na['To'] = a.ToNd+a.ToTm.astype(str)\na['Weight'] = a.ToTm - a.FrTm\na.loc[a.FrNd == a.ToNd, 'Weight'] = 0.001\na.loc[(a.FrNd == '_') | (a.ToNd == '_'), 'Weight'] = 0\na[:3]\n\n\n\n\n\n\nLayer\nFrNd\nFrTm\nToNd\nToTm\nFrom\nTo\nWeight\n\n\n\n\n0\n0\nJ\n0\nJ\n1\nJ0\nJ1\n0.001\n\n\n1\n0\nA\n0\nA\n1\nA0\nA1\n0.001\n\n\n2\n0\nB\n0\nB\n1\nB0\nB1\n0.001\n\n\n\n\n\u5b9a\u5f0f\u5316\u3057\u3066\u89e3\u304f\n\npython3\nm = LpProblem()\nvs = addbinvars(4, 4) # DEHI \u306e offset\na['Var'] = addvars(len(a), upBound=1) # \u30d5\u30ed\u30fc\nm += lpDot(a.Weight, a.Var) # \u76ee\u7684\u95a2\u6570\nfor i in range(4):\n    m += lpSum(vs[i]) == 1 # offset\u306f\uff11\u3064\u306e\u307f\nfor v in a[a.FrNd=='_'].Var:\n    m += v == 1 # \u30ec\u30a4\u30e4\u30fc\u3054\u3068\u306b\u767a\u751f\nfor l in range(4):\n    b = a[a.Layer == l]\n    for nd in set(b.From.unique()) | set(b.To.unique()):\n        # \u5404\u30ec\u30a4\u30e4\u30fc\u3067\u5165\u3068\u51fa\u304c\u7b49\u3057\u3044\n        m += lpSum(b[b.From == nd].Var) == lpSum(b[b.To == nd].Var)\nfor t in range(T):\n    b = a[a.FrTm == t]\n    for i, s in enumerate(['DH', 'EI', 'HK', 'IL']):\n        c = b[b.FrNd==s[0]]\n        # \u4fe1\u53f7\u5236\u5fa1\n        m += lpSum(c[c.ToNd==s[1]].Var) <= vs[i][(t+0)%4]+vs[i][(t+1)%4]\n        m += lpSum(c[c.ToNd!=s[1]].Var) <= vs[i][(t+2)%4]+vs[i][(t+3)%4]\n%time m.solve()\nprint(LpStatus[m.status], value(m.objective))\nprint('\u30bf\u30a4\u30df\u30f3\u30b0', np.vectorize(value)(vs)@np.arange(4))\n>>>\nWall time: 79.5 ms\nOptimal 32.001000000000005\n\u30bf\u30a4\u30df\u30f3\u30b0 [ 1.  3.  2.  0.]\n\n\n\u4ee5\u4e0a\n# \u3053\u308c\u306a\u306b\n\n\u4fe1\u53f7\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u5909\u3048\u3066\u3001\u4fe1\u53f7\u5f85\u3061\u3092\u6e1b\u3089\u3057\u307e\u3059\u3002\n\n# \u554f\u984c\n\u4e0b\u56f3\u306e\u3088\u3046\u306a\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304c\u3042\u308a\u3001D, E, H, I \u306e4\u304b\u6240\u306b\u4fe1\u53f7\u304c\u3042\u308a\u307e\u3059\u3002\n![image](https://qiita-image-store.s3.amazonaws.com/0/13955/07430aea-a874-3157-9dd7-9b91b18badbe.png)\n\n4\u4eba\u306e\u30e6\u30fc\u30b6\u304c \u305d\u308c\u305e\u308c\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u79fb\u52d5\u3057\u307e\u3059\u3002\n\n- \u6642\u523b 0 \u306b\u3001A \u3092\u51fa\u767a\u3057 L \u306b\u5411\u304b\u3046\n- \u6642\u523b 2 \u306b\u3001B \u3092\u51fa\u767a\u3057 K \u306b\u5411\u304b\u3046\n- \u6642\u523b 1 \u306b\u3001C \u3092\u51fa\u767a\u3057 J \u306b\u5411\u304b\u3046\n- \u6642\u523b 2 \u306b\u3001G \u3092\u51fa\u767a\u3057 F \u306b\u5411\u304b\u3046\n\n\u4fe1\u53f7\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u306f\u30014\u30d1\u30bf\u30fc\u30f3\u3042\u308a\u3001\u4e0b\u8868\u306e\u3088\u3046\u306b\u52d5\u3051\u308b\u3068\u3057\u307e\u3059\u3002\n\n\u30d1\u30bf\u30fc\u30f3|T1|T2|T3|T4\n--:|--:|--:|--:|--:\n0|\u4e0a\u4e0b|\u5de6\u53f3|\u5de6\u53f3|\u4e0a\u4e0b\n1|\u4e0a\u4e0b|\u4e0a\u4e0b|\u5de6\u53f3|\u5de6\u53f3\n2|\u5de6\u53f3|\u4e0a\u4e0b|\u4e0a\u4e0b|\u5de6\u53f3\n3|\u5de6\u53f3|\u5de6\u53f3|\u4e0a\u4e0b|\u4e0a\u4e0b\n\n\u3053\u306e\u3068\u304d\u3001\u6700\u3082\u30b9\u30e0\u30fc\u30b9\u306b\u6d41\u308c\u308b\u3001\u4fe1\u53f7D, E, H, I \u306e\u30bf\u30a4\u30df\u30f3\u30b0\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u6c42\u3081\u307e\u3059\u3002\n\n# \u89e3\u3044\u3066\u307f\u308b\n## \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u4f5c\u6210\n\n```py3:python3\n%matplotlib inline\nimport networkx as nx, matplotlib.pyplot as plt\nfrom more_itertools import chunked\nplt.rcParams['figure.figsize'] = 4, 4\ng = nx.DiGraph()\nfor i, ar in enumerate(['ADBECDEFGHIJHKIL', '', 'DEDHEIHI']):\n    for fr, to in chunked(ar, 2):\n        g.add_edge(fr, to, weight=i+1)\n        if i == 2:\n            g.add_edge(to, fr, weight=i+1)\npos = {chr(i+65):(int(x),int(y)) for i, (x,y)\n    in enumerate(chunked('154504144454011141511040', 2))}\nnx.draw(g, pos, node_color='white')\nnx.draw_networkx_labels(g, pos);\n```\n![image](https://qiita-image-store.s3.amazonaws.com/0/13955/07430aea-a874-3157-9dd7-9b91b18badbe.png)\n\n\n## \u591a\u54c1\u7a2e\u6642\u7a7a\u9593\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u30d5\u30ed\u30fc\u306b\u5bfe\u5fdc\u3059\u308b\u8868\u3092\u4f5c\u6210\n\u30e6\u30fc\u30b6\u3054\u3068\u306b\u30ec\u30a4\u30e4\u3092\u308f\u3051\u307e\u3059\u3002\u30e6\u30fc\u30b6\u00d7\u6642\u00d7\u7a7a\u306e3\u6b21\u5143\u306b\u306a\u308a\u307e\u3059\u3002\n\n```py3:python3\nimport numpy as np, pandas as pd\nfrom pulp import *\nfrom ortoolpy import addvars, addbinvars\ndef make(g, T):\n    stnd, ednd, sttm = 'ABCG', 'LKJF', [0,2,1,2] # \u767a\u751f\u30e6\u30fc\u30b6\u306e\u59cb\u3068\u7d42\u3068\u6642\n    for la in range(4):\n        for t1 in range(T):\n            for nd in g.nodes():\n                yield la, nd, t1, nd, t1+1\n            for fr, dc in g.edge.items():\n                for to, atr in dc.items():\n                    t2 = t1 + atr['weight']\n                    if t2 <= T:\n                        yield la, fr, t1, to, t2\n    for l, c in enumerate(stnd):\n        yield l, '_', 0, c, sttm[l]\n    for l, c in enumerate(ednd):\n        for t in range(8,T):\n            t2 = t+sttm[l]\n            if t2 < T:\n                yield l, c, t2, '_', 0\nT = 13\na = pd.DataFrame(make(g, T), columns=['Layer', 'FrNd', 'FrTm', 'ToNd', 'ToTm'])\na['From'] = a.FrNd+a.FrTm.astype(str)\na['To'] = a.ToNd+a.ToTm.astype(str)\na['Weight'] = a.ToTm - a.FrTm\na.loc[a.FrNd == a.ToNd, 'Weight'] = 0.001\na.loc[(a.FrNd == '_') | (a.ToNd == '_'), 'Weight'] = 0\na[:3]\n```\n<table>\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Layer</th>\n      <th>FrNd</th>\n      <th>FrTm</th>\n      <th>ToNd</th>\n      <th>ToTm</th>\n      <th>From</th>\n      <th>To</th>\n      <th>Weight</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>J</td>\n      <td>0</td>\n      <td>J</td>\n      <td>1</td>\n      <td>J0</td>\n      <td>J1</td>\n      <td>0.001</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>A</td>\n      <td>0</td>\n      <td>A</td>\n      <td>1</td>\n      <td>A0</td>\n      <td>A1</td>\n      <td>0.001</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>B</td>\n      <td>0</td>\n      <td>B</td>\n      <td>1</td>\n      <td>B0</td>\n      <td>B1</td>\n      <td>0.001</td>\n    </tr>\n  </tbody>\n</table>\n\n## \u5b9a\u5f0f\u5316\u3057\u3066\u89e3\u304f\n\n```py3:python3\nm = LpProblem()\nvs = addbinvars(4, 4) # DEHI \u306e offset\na['Var'] = addvars(len(a), upBound=1) # \u30d5\u30ed\u30fc\nm += lpDot(a.Weight, a.Var) # \u76ee\u7684\u95a2\u6570\nfor i in range(4):\n    m += lpSum(vs[i]) == 1 # offset\u306f\uff11\u3064\u306e\u307f\nfor v in a[a.FrNd=='_'].Var:\n    m += v == 1 # \u30ec\u30a4\u30e4\u30fc\u3054\u3068\u306b\u767a\u751f\nfor l in range(4):\n    b = a[a.Layer == l]\n    for nd in set(b.From.unique()) | set(b.To.unique()):\n        # \u5404\u30ec\u30a4\u30e4\u30fc\u3067\u5165\u3068\u51fa\u304c\u7b49\u3057\u3044\n        m += lpSum(b[b.From == nd].Var) == lpSum(b[b.To == nd].Var)\nfor t in range(T):\n    b = a[a.FrTm == t]\n    for i, s in enumerate(['DH', 'EI', 'HK', 'IL']):\n        c = b[b.FrNd==s[0]]\n        # \u4fe1\u53f7\u5236\u5fa1\n        m += lpSum(c[c.ToNd==s[1]].Var) <= vs[i][(t+0)%4]+vs[i][(t+1)%4]\n        m += lpSum(c[c.ToNd!=s[1]].Var) <= vs[i][(t+2)%4]+vs[i][(t+3)%4]\n%time m.solve()\nprint(LpStatus[m.status], value(m.objective))\nprint('\u30bf\u30a4\u30df\u30f3\u30b0', np.vectorize(value)(vs)@np.arange(4))\n>>>\nWall time: 79.5 ms\nOptimal 32.001000000000005\n\u30bf\u30a4\u30df\u30f3\u30b0 [ 1.  3.  2.  0.]\n```\n\n\u4ee5\u4e0a\n", "tags": ["Python", "\u6700\u9069\u5316", "\u7d44\u5408\u305b\u6700\u9069\u5316", "\u6570\u5b66"]}