{"tags": ["JavaScript", "WebRTC"], "context": " More than 1 year has passed since last update.WebRTC\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9(\u30af\u30e9\u30a4\u30a2\u30f3\u30c8)\u306a\u3069\u3092\u8a66\u3057\u305f\u3044\u3068\u304d\u3001\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u30fc\u3092\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u5c11\u3005\u9762\u5012\u3067\u3059\u3002\n\u305d\u3053\u3067\u3001\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u30fc\u306e\u4ee3\u308f\u308a\u3092\u3084\u3063\u3066\u304f\u308c\u308b\u62e1\u5f35\u6a5f\u80fd\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\nChrome\u3067\u304b\u3064\u30bf\u30d6\u9593\u3067\u306e\u901a\u4fe1\u3068\u3044\u3046\u304b\u306a\u308a\u9650\u3089\u308c\u305f\u74b0\u5883\u7528\u3068\u306a\u308a\u307e\u3059\u304c\u3001\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u30fc\u3092\u7528\u610f\u3059\u308b\u624b\u9593\u304c\u7701\u3051\u307e\u3059\u3002\n(\u30eb\u30fc\u30e0\u6a5f\u80fd\u306a\u3069\u306f\u4e00\u5207\u3042\u308a\u307e\u305b\u3093\u3002)\n\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u30fc\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u30fc\n\n\u4f7f\u7528\u65b9\u6cd5\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u3001\u30b3\u30fc\u30c9\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\nvar SignalingChannelSim = function () {\n    var btnSender = document.createElement('input');\n    btnSender.type = 'button';\n    btnSender.style.display = 'none';\n    btnSender.id = 'btnRTCSender';\n    btnReceiver = document.createElement('input');\n    btnReceiver.type = 'button';\n    btnReceiver.style.display = 'none';\n    btnReceiver.id = 'btnRTCReceiver';\n    btnReceiver.onclick = (function () {\n        var evt = { data: btnReceiver.value };\n        this.onmessage && this.onmessage(evt);\n    }).bind(this);\n    document.body.appendChild(btnSender);\n    document.body.appendChild(btnReceiver);\n    this.send = function (message) {\n        btnSender.value = message;\n        btnSender.click();\n    }\n};\n\n\u30b3\u30fc\u30c9\u3092\u898b\u308b\u3068\u308f\u304b\u308b\u3068\u304a\u308a\u3001\u30dc\u30bf\u30f3\u3092\u4f7f\u3063\u3066\u62e1\u5f35\u6a5f\u80fd\u3092\u901a\u3057\u3066\u4ed6\u306e\u30bf\u30d6\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u3084\u308a\u53d6\u308a\u3092\u884c\u3046\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002\n\n\u4f7f\u7528\u4f8b\n<!DOCTYPE html>\n<html>\n<head>\n    <title>\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u30fc\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u30fc\u4f7f\u7528\u4f8b</title>\n    <meta charset=\"utf-8\" />\n</head>\n<body>\n    <video id=\"selfView\" autoplay></video>\n    <video id=\"remoteView\" autoplay></video>\n    <input type=\"button\" onclick=\"start()\" value=\"\u63a5\u7d9a\" />\n    <script>\n        var SignalingChannelSim = function () {\n            var btnSender = document.createElement('input');\n            btnSender.type = 'button';\n            btnSender.style.display = 'none';\n            btnSender.id = 'btnRTCSender';\n            btnReceiver = document.createElement('input');\n            btnReceiver.type = 'button';\n            btnReceiver.style.display = 'none';\n            btnReceiver.id = 'btnRTCReceiver';\n            btnReceiver.onclick = (function () {\n                var evt = { data: btnReceiver.value };\n                this.onmessage && this.onmessage(evt);\n            }).bind(this);\n            document.body.appendChild(btnSender);\n            document.body.appendChild(btnReceiver);\n            this.send = function (message) {\n                btnSender.value = message;\n                btnSender.click();\n            }\n        };\n    </script>\n    <script>\n        // WebRTC\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n        window.RTCPeerConnection = window.mozRTCPeerConnection || window.webkitRTCPeerConnection;\n        var signalingChannel = new SignalingChannelSim();\n        var configuration = { \"iceServers\": [{ \"url\": \"stun:stun.example.org\" }] };\n        var pc;\n\n        function start() {\n            pc = new RTCPeerConnection(configuration);\n            pc.onicecandidate = function (evt) {\n                evt.candidate && signalingChannel.send(JSON.stringify({ \"candidate\": evt.candidate }));\n            };\n            pc.onnegotiationneeded = function () {\n                pc.createOffer(localDescCreated, logError);\n            }\n            pc.onaddstream = function (evt) {\n                remoteView.src = URL.createObjectURL(evt.stream);\n            };\n            navigator.getUserMedia({ \"audio\": false, \"video\": true }, function (stream) {\n                selfView.src = URL.createObjectURL(stream);\n                pc.addStream(stream);\n            }, logError);\n        }\n\n        function localDescCreated(desc) {\n            pc.setLocalDescription(desc, function () {\n                signalingChannel.send(JSON.stringify({ \"sdp\": pc.localDescription }));\n            }, logError);\n        }\n\n        signalingChannel.onmessage = function (evt) {\n            !pc && start();\n            var message = JSON.parse(evt.data);\n            message.sdp && pc.setRemoteDescription(new RTCSessionDescription(message.sdp), function () {\n                (pc.remoteDescription.type == \"offer\") && pc.createAnswer(localDescCreated, logError);\n            }, logError);\n            message.candidate && pc.addIceCandidate(new RTCIceCandidate(message.candidate), function () { }, logError);\n        };\n\n        function logError(error) {\n            console.log(error);\n        }\n    </script>\n</body>\n</html>\n\nWebRTC\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9(\u30af\u30e9\u30a4\u30a2\u30f3\u30c8)\u306a\u3069\u3092\u8a66\u3057\u305f\u3044\u3068\u304d\u3001\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u30fc\u3092\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u5c11\u3005\u9762\u5012\u3067\u3059\u3002\n\u305d\u3053\u3067\u3001\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u30fc\u306e\u4ee3\u308f\u308a\u3092\u3084\u3063\u3066\u304f\u308c\u308b\u62e1\u5f35\u6a5f\u80fd\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\nChrome\u3067\u304b\u3064\u30bf\u30d6\u9593\u3067\u306e\u901a\u4fe1\u3068\u3044\u3046\u304b\u306a\u308a\u9650\u3089\u308c\u305f\u74b0\u5883\u7528\u3068\u306a\u308a\u307e\u3059\u304c\u3001\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u30fc\u3092\u7528\u610f\u3059\u308b\u624b\u9593\u304c\u7701\u3051\u307e\u3059\u3002\n(\u30eb\u30fc\u30e0\u6a5f\u80fd\u306a\u3069\u306f\u4e00\u5207\u3042\u308a\u307e\u305b\u3093\u3002)\n[\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u30fc\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u30fc](https://www.dropbox.com/s/w61p8jch7xpmrvm/SignalingServerSim.crx)\n\n##\u4f7f\u7528\u65b9\u6cd5\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u3001\u30b3\u30fc\u30c9\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n```js\nvar SignalingChannelSim = function () {\n    var btnSender = document.createElement('input');\n    btnSender.type = 'button';\n    btnSender.style.display = 'none';\n    btnSender.id = 'btnRTCSender';\n    btnReceiver = document.createElement('input');\n    btnReceiver.type = 'button';\n    btnReceiver.style.display = 'none';\n    btnReceiver.id = 'btnRTCReceiver';\n    btnReceiver.onclick = (function () {\n        var evt = { data: btnReceiver.value };\n        this.onmessage && this.onmessage(evt);\n    }).bind(this);\n    document.body.appendChild(btnSender);\n    document.body.appendChild(btnReceiver);\n    this.send = function (message) {\n        btnSender.value = message;\n        btnSender.click();\n    }\n};\n```\n\n\u30b3\u30fc\u30c9\u3092\u898b\u308b\u3068\u308f\u304b\u308b\u3068\u304a\u308a\u3001\u30dc\u30bf\u30f3\u3092\u4f7f\u3063\u3066\u62e1\u5f35\u6a5f\u80fd\u3092\u901a\u3057\u3066\u4ed6\u306e\u30bf\u30d6\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u3084\u308a\u53d6\u308a\u3092\u884c\u3046\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002\n\n##\u4f7f\u7528\u4f8b\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u30fc\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u30fc\u4f7f\u7528\u4f8b</title>\n    <meta charset=\"utf-8\" />\n</head>\n<body>\n    <video id=\"selfView\" autoplay></video>\n    <video id=\"remoteView\" autoplay></video>\n    <input type=\"button\" onclick=\"start()\" value=\"\u63a5\u7d9a\" />\n    <script>\n        var SignalingChannelSim = function () {\n            var btnSender = document.createElement('input');\n            btnSender.type = 'button';\n            btnSender.style.display = 'none';\n            btnSender.id = 'btnRTCSender';\n            btnReceiver = document.createElement('input');\n            btnReceiver.type = 'button';\n            btnReceiver.style.display = 'none';\n            btnReceiver.id = 'btnRTCReceiver';\n            btnReceiver.onclick = (function () {\n                var evt = { data: btnReceiver.value };\n                this.onmessage && this.onmessage(evt);\n            }).bind(this);\n            document.body.appendChild(btnSender);\n            document.body.appendChild(btnReceiver);\n            this.send = function (message) {\n                btnSender.value = message;\n                btnSender.click();\n            }\n        };\n    </script>\n    <script>\n        // WebRTC\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n        window.RTCPeerConnection = window.mozRTCPeerConnection || window.webkitRTCPeerConnection;\n        var signalingChannel = new SignalingChannelSim();\n        var configuration = { \"iceServers\": [{ \"url\": \"stun:stun.example.org\" }] };\n        var pc;\n\n        function start() {\n            pc = new RTCPeerConnection(configuration);\n            pc.onicecandidate = function (evt) {\n                evt.candidate && signalingChannel.send(JSON.stringify({ \"candidate\": evt.candidate }));\n            };\n            pc.onnegotiationneeded = function () {\n                pc.createOffer(localDescCreated, logError);\n            }\n            pc.onaddstream = function (evt) {\n                remoteView.src = URL.createObjectURL(evt.stream);\n            };\n            navigator.getUserMedia({ \"audio\": false, \"video\": true }, function (stream) {\n                selfView.src = URL.createObjectURL(stream);\n                pc.addStream(stream);\n            }, logError);\n        }\n\n        function localDescCreated(desc) {\n            pc.setLocalDescription(desc, function () {\n                signalingChannel.send(JSON.stringify({ \"sdp\": pc.localDescription }));\n            }, logError);\n        }\n\n        signalingChannel.onmessage = function (evt) {\n            !pc && start();\n            var message = JSON.parse(evt.data);\n            message.sdp && pc.setRemoteDescription(new RTCSessionDescription(message.sdp), function () {\n                (pc.remoteDescription.type == \"offer\") && pc.createAnswer(localDescCreated, logError);\n            }, logError);\n            message.candidate && pc.addIceCandidate(new RTCIceCandidate(message.candidate), function () { }, logError);\n        };\n\n        function logError(error) {\n            console.log(error);\n        }\n    </script>\n</body>\n</html>\n```\n"}