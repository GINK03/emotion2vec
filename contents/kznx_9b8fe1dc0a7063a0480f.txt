{"context": "\n\n\u306f\u3058\u3081\u306b\n\u6a5f\u68b0\u5b66\u7fd2\u306e\u4e2d\u3067\u3082Deep Learning\u306f\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6570\u304c\u591a\u304f\u3001\u7cbe\u5ea6\u3092\u9ad8\u3081\u308b\u305f\u3081\u306b\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u8abf\u6574\u306e\u8a66\u884c\u932f\u8aa4\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u6700\u9069\u306a\u30e2\u30c7\u30eb\u3092\u898b\u3064\u3051\u308b\u305f\u3081\u306e\u8a66\u884c\u932f\u8aa4\u3092\u3001\u81ea\u52d5\u5316\u3067\u304d\u306a\u3044\u304b\u3068\u601d\u3044\u8abf\u3079\u3066\u307f\u305f\u3068\u3053\u308d\u3001\u5927\u304d\u304f\u4e8c\u3064\u306e\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\uff1a\u7dcf\u5f53\u305f\u308a\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a2\u7d22\u3059\u308b\n\u30e9\u30f3\u30c0\u30e0\u30b5\u30fc\u30c1\uff1a\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u63a2\u7d22\u3059\u308b\n\n\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u306b\u3064\u3044\u3066\u306f\u3001\u4e0b\u8a18\u306e\u8a18\u4e8b\u306b\u8a73\u3057\u304f\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u306e\u3067\u3001\n\nKeras with GridSearchCV\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u6700\u9069\u5316\u81ea\u52d5\u5316 (http://qiita.com/cvusk/items/285e2b02b0950537b65e)\nScikit learn\u3088\u308a \u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u306b\u3088\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u6700\u9069\u5316 (http://qiita.com/SE96UoC5AfUt7uY/items/c81f7cea72a44a7bfd3a)\n\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001\u30e9\u30f3\u30c0\u30e0\u30b5\u30fc\u30c1\u306b\u3064\u3044\u3066\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u30e9\u30f3\u30c0\u30e0\u30b5\u30fc\u30c1\u81ea\u4f53\u306e\u89e3\u8aac\u306f\u3001\u300c\u30bc\u30ed\u304b\u3089\u4f5c\u308bDeep Learning\u300d\u306e 6.5.2\u7ae0\u306b\u308f\u304b\u308a\u3084\u3059\u304f\u8aac\u660e\u3055\u308c\u3066\u3044\u307e\u3059\u306e\u3067\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\n\u30e9\u30f3\u30c0\u30e0\u30b5\u30fc\u30c1\n\u65e5\u672c\u8a9e\u306e\u8a18\u4e8b\u304c\u3042\u307e\u308a\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nComparing randomized search and grid search for hyperparameter estimation\n(http://scikit-learn.org/stable/auto_examples/model_selection/randomized_search.html)\n\u57fa\u672c\u7684\u306b\u5b9f\u88c5\u65b9\u6cd5\u306f\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3068\u540c\u3058\u3067\u3059\u304c\u3001\u4f55\u30d1\u30bf\u30fc\u30f3\u307e\u3067\u8abf\u3079\u308b\u304b (n_iter_search) \u306e\u6307\u5b9a\u304c\u8ffd\u52a0\u306b\u306a\u308a\u307e\u3059\u3002\nfrom sklearn.model_selection import RandomizedSearchCV\n...\nmodel = KerasClassifier(build_fn=tr_model, verbose=0)\nparam_grid = dict(activation=activation, \n                  optimizer=optimizer, \n                  dout=dout,\n                  init_mode=init_mode,\n                  out_dim1=out_dim1, \n                  out_dim2=out_dim2, \n                  out_dim3=out_dim3, \n                  out_dim4=out_dim4, \n                  out_dim5=out_dim5, \n                  nb_epoch=nb_epoch, \n                  batch_size=batch_size) \nn_iter_search = 5\nrandom_search = RandomizedSearchCV(estimator=model, param_distributions=param_grid, \n                                   n_iter=n_iter_search, cv=4, n_jobs=1, verbose=2)\nrandom_result=random_search.fit(train_x, y_train)\n\n\u7d50\u679c\u306e\u8868\u793a\u306f\u3001scikit-learn\u306escore_report\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nfrom sklearn.metrics import classification_report\n...\nscore_report(random_search.cv_results_, 10)\n\nModel with rank: 1\nMean validation score: 0.701 (std: 0.011)\nParameters: {'dout': 0.1, 'out_dim4': 10, 'out_dim3': 30, 'nb_epoch': 10, 'out_dim5': 20, 'activation': 'tanh', 'init_mode': 'he_normal', 'batch_size': 500, 'out_dim1': 50, 'optimizer': 'Adagrad', 'out_dim2': 40}\n\nModel with rank: 2\nMean validation score: 0.701 (std: 0.015)\nParameters: {'dout': 0.1, 'out_dim4': 10, 'out_dim3': 30, 'nb_epoch': 10, 'out_dim5': 20, 'activation': 'tanh', 'init_mode': 'he_normal', 'batch_size': 500, 'out_dim1': 50, 'optimizer': 'Adam', 'out_dim2': 40}\n\nModel with rank: 3\nMean validation score: 0.677 (std: 0.039)\nParameters: {'dout': 0.1, 'out_dim4': 10, 'out_dim3': 30, 'nb_epoch': 10, 'out_dim5': 20, 'activation': 'tanh', 'init_mode': 'glorot_uniform', 'batch_size': 500, 'out_dim1': 50, 'optimizer': 'Adam', 'out_dim2': 40}\n\n....\n\n\n\u63a2\u7d22\u3057\u305f\u4e2d\u306e\u30d9\u30b9\u30c8\u306e\u30e2\u30c7\u30eb\u3067\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f7f\u3063\u305f\u7d50\u679c\u3082\u898b\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\ny_true, y_pred = test_y, random_search.predict(test_x)\nprint(classification_report(y_true, y_pred))\n\n             precision    recall  f1-score   support\n\n          0       0.81      0.97      0.88       102\n          1       0.95      0.99      0.97       109\n          2       0.92      0.95      0.93       217\n          3       0.54      0.38      0.45       193\n          4       0.48      0.85      0.61       214\n          5       0.99      0.97      0.98       202\n          6       1.00      0.96      0.98       180\n          7       0.00      0.00      0.00       196\n          8       0.49      1.00      0.66       186\n          9       1.00      0.99      0.99       208\n         10       0.93      0.99      0.96       184\n         11       0.76      0.38      0.51       204\n         12       0.78      0.66      0.72       205\n\navg / total       0.73      0.76      0.73      2400\n\n# \u306f\u3058\u3081\u306b\n\u6a5f\u68b0\u5b66\u7fd2\u306e\u4e2d\u3067\u3082Deep Learning\u306f\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6570\u304c\u591a\u304f\u3001\u7cbe\u5ea6\u3092\u9ad8\u3081\u308b\u305f\u3081\u306b\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u8abf\u6574\u306e\u8a66\u884c\u932f\u8aa4\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u6700\u9069\u306a\u30e2\u30c7\u30eb\u3092\u898b\u3064\u3051\u308b\u305f\u3081\u306e\u8a66\u884c\u932f\u8aa4\u3092\u3001\u81ea\u52d5\u5316\u3067\u304d\u306a\u3044\u304b\u3068\u601d\u3044\u8abf\u3079\u3066\u307f\u305f\u3068\u3053\u308d\u3001\u5927\u304d\u304f\u4e8c\u3064\u306e\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\n\n* \u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\uff1a\u7dcf\u5f53\u305f\u308a\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a2\u7d22\u3059\u308b\n* \u30e9\u30f3\u30c0\u30e0\u30b5\u30fc\u30c1\uff1a\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u63a2\u7d22\u3059\u308b\n\n\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u306b\u3064\u3044\u3066\u306f\u3001\u4e0b\u8a18\u306e\u8a18\u4e8b\u306b\u8a73\u3057\u304f\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u306e\u3067\u3001\n\n* Keras with GridSearchCV\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u6700\u9069\u5316\u81ea\u52d5\u5316 (http://qiita.com/cvusk/items/285e2b02b0950537b65e)\n* Scikit learn\u3088\u308a \u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u306b\u3088\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u6700\u9069\u5316 (http://qiita.com/SE96UoC5AfUt7uY/items/c81f7cea72a44a7bfd3a)\n\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001\u30e9\u30f3\u30c0\u30e0\u30b5\u30fc\u30c1\u306b\u3064\u3044\u3066\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u30e9\u30f3\u30c0\u30e0\u30b5\u30fc\u30c1\u81ea\u4f53\u306e\u89e3\u8aac\u306f\u3001\u300c\u30bc\u30ed\u304b\u3089\u4f5c\u308bDeep Learning\u300d\u306e 6.5.2\u7ae0\u306b\u308f\u304b\u308a\u3084\u3059\u304f\u8aac\u660e\u3055\u308c\u3066\u3044\u307e\u3059\u306e\u3067\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\n# \u30e9\u30f3\u30c0\u30e0\u30b5\u30fc\u30c1\n\u65e5\u672c\u8a9e\u306e\u8a18\u4e8b\u304c\u3042\u307e\u308a\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nComparing randomized search and grid search for hyperparameter estimation\n(http://scikit-learn.org/stable/auto_examples/model_selection/randomized_search.html)\n\n\u57fa\u672c\u7684\u306b\u5b9f\u88c5\u65b9\u6cd5\u306f\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3068\u540c\u3058\u3067\u3059\u304c\u3001\u4f55\u30d1\u30bf\u30fc\u30f3\u307e\u3067\u8abf\u3079\u308b\u304b (n_iter_search) \u306e\u6307\u5b9a\u304c\u8ffd\u52a0\u306b\u306a\u308a\u307e\u3059\u3002\n\n```\nfrom sklearn.model_selection import RandomizedSearchCV\n...\nmodel = KerasClassifier(build_fn=tr_model, verbose=0)\nparam_grid = dict(activation=activation, \n                  optimizer=optimizer, \n                  dout=dout,\n                  init_mode=init_mode,\n                  out_dim1=out_dim1, \n                  out_dim2=out_dim2, \n                  out_dim3=out_dim3, \n                  out_dim4=out_dim4, \n                  out_dim5=out_dim5, \n                  nb_epoch=nb_epoch, \n                  batch_size=batch_size) \nn_iter_search = 5\nrandom_search = RandomizedSearchCV(estimator=model, param_distributions=param_grid, \n                                   n_iter=n_iter_search, cv=4, n_jobs=1, verbose=2)\nrandom_result=random_search.fit(train_x, y_train)\n```\n\n\u7d50\u679c\u306e\u8868\u793a\u306f\u3001scikit-learn\u306escore_report\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n```\nfrom sklearn.metrics import classification_report\n...\nscore_report(random_search.cv_results_, 10)\n```\n\n```\nModel with rank: 1\nMean validation score: 0.701 (std: 0.011)\nParameters: {'dout': 0.1, 'out_dim4': 10, 'out_dim3': 30, 'nb_epoch': 10, 'out_dim5': 20, 'activation': 'tanh', 'init_mode': 'he_normal', 'batch_size': 500, 'out_dim1': 50, 'optimizer': 'Adagrad', 'out_dim2': 40}\n\nModel with rank: 2\nMean validation score: 0.701 (std: 0.015)\nParameters: {'dout': 0.1, 'out_dim4': 10, 'out_dim3': 30, 'nb_epoch': 10, 'out_dim5': 20, 'activation': 'tanh', 'init_mode': 'he_normal', 'batch_size': 500, 'out_dim1': 50, 'optimizer': 'Adam', 'out_dim2': 40}\n\nModel with rank: 3\nMean validation score: 0.677 (std: 0.039)\nParameters: {'dout': 0.1, 'out_dim4': 10, 'out_dim3': 30, 'nb_epoch': 10, 'out_dim5': 20, 'activation': 'tanh', 'init_mode': 'glorot_uniform', 'batch_size': 500, 'out_dim1': 50, 'optimizer': 'Adam', 'out_dim2': 40}\n\n....\n\n```\n\n\u63a2\u7d22\u3057\u305f\u4e2d\u306e\u30d9\u30b9\u30c8\u306e\u30e2\u30c7\u30eb\u3067\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f7f\u3063\u305f\u7d50\u679c\u3082\u898b\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n```\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\ny_true, y_pred = test_y, random_search.predict(test_x)\nprint(classification_report(y_true, y_pred))\n```\n\n```\n             precision    recall  f1-score   support\n\n          0       0.81      0.97      0.88       102\n          1       0.95      0.99      0.97       109\n          2       0.92      0.95      0.93       217\n          3       0.54      0.38      0.45       193\n          4       0.48      0.85      0.61       214\n          5       0.99      0.97      0.98       202\n          6       1.00      0.96      0.98       180\n          7       0.00      0.00      0.00       196\n          8       0.49      1.00      0.66       186\n          9       1.00      0.99      0.99       208\n         10       0.93      0.99      0.96       184\n         11       0.76      0.38      0.51       204\n         12       0.78      0.66      0.72       205\n\navg / total       0.73      0.76      0.73      2400\n```\n", "tags": ["Keras", "hyperparameter"]}