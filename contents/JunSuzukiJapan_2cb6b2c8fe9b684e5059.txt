{"context": " More than 1 year has passed since last update.\u524d\u56de\u304b\u3089\u306e\u6d41\u308c\u3067\u3001\n\u3064\u304e\u306f\u3001\u30e1\u30bd\u30c3\u30c9topStatSeq()\u306e\u4e2d\u3067\u547c\u3070\u308c\u3066\u3044\u308b\n\u30e1\u30bd\u30c3\u30c9topLevelTmplDef\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n    /** Hook for IDE, for top-level classes/objects. */\n    def topLevelTmplDef: Tree = {\n      val annots = annotations(skipNewLines = true)\n      val pos    = caseAwareTokenOffset\n      val mods   = modifiers() withAnnotations annots\n      tmplDef(pos, mods)\n    }\n\n\u3053\u308c\u306f\u3001\u300c\u6539\u884c\u3092\u30b9\u30ad\u30c3\u30d7\u3057\u305f\u308a\u300d\u3068\u304b\u306e\u591a\u5c11\u306e\u8a2d\u5b9a\u3092\u3057\u3066\u3001\n\u3059\u3050\u306b\u30e1\u30bd\u30c3\u30c9tmplDef()\u3092\u547c\u3073\u51fa\u3057\u3066\u308b\u3060\u3051\u3067\u3059\u306d\u3002\n\u3067\u306f\u3001tmplDef()\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n    /** {{{\n     *  TmplDef ::= [case] class ClassDef\n     *            |  [case] object ObjectDef\n     *            |  [override] trait TraitDef\n     *  }}}\n     */\n    def tmplDef(pos: Int, mods: Modifiers): Tree = {\n      if (mods.isLazy) syntaxError(\"classes cannot be lazy\", skipIt = false)\n      in.token match {\n        case TRAIT =>\n          classDef(pos, (mods | Flags.TRAIT | Flags.ABSTRACT) withPosition (Flags.TRAIT, tokenRange(in)))\n        case CLASS =>\n          classDef(pos, mods)\n        case CASECLASS =>\n          classDef(pos, (mods | Flags.CASE) withPosition (Flags.CASE, tokenRange(in.prev /*scanner skips on &#39;case&#39; to &#39;class&#39;, thus take prev*/)))\n        case OBJECT =>\n          objectDef(pos, mods)\n        case CASEOBJECT =>\n          objectDef(pos, (mods | Flags.CASE) withPosition (Flags.CASE, tokenRange(in.prev /*scanner skips on &#39;case&#39; to &#39;object&#39;, thus take prev*/)))\n        case _ =>\n          syntaxErrorOrIncompleteAnd(\"expected start of definition\", skipIt = true)(EmptyTree)\n      }\n    }\n\n\u3053\u3053\u3067\u3082\u30b3\u30e1\u30f3\u30c8\u306b\u751f\u6210\u898f\u5247\u304c\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\nclass\u5b9a\u7fa9\u3084\u3001object\u306e\u5b9a\u7fa9\u3001trait\u5b9a\u7fa9\u304c\u3055\u308c\u3066\u3044\u307e\u3059\uff08case class\u306a\u3069\u3082\u542b\u3080\uff09\u3002\n\u305d\u308c\u305e\u308c\u306e\u5834\u5408\u306b\u5fdc\u3058\u3066\u3001\u30e1\u30bd\u30c3\u30c9classDef()\u3084objectDef()\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\n\u8a66\u3057\u306bclassDef()\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n    /** {{{\n     *  ClassDef ::= Id [TypeParamClause] {Annotation}\n     *               [AccessModifier] ClassParamClauses RequiresTypeOpt ClassTemplateOpt\n     *  TraitDef ::= Id [TypeParamClause] RequiresTypeOpt TraitTemplateOpt\n     *  }}}\n     */\n    def classDef(start: Int, mods: Modifiers): ClassDef = {\n      in.nextToken()\n      val nameOffset = in.offset\n      val name = identForType()\n      atPos(start, if (name == tpnme.ERROR) start else nameOffset) {\n        savingClassContextBounds {\n          val contextBoundBuf = new ListBuffer[Tree]\n          val tparams = typeParamClauseOpt(name, contextBoundBuf)\n          classContextBounds = contextBoundBuf.toList\n          val tstart = (in.offset :: classContextBounds.map(_.pos.startOrPoint)).min\n          if (!classContextBounds.isEmpty && mods.isTrait) {\n            syntaxError(\"traits cannot have type parameters with context bounds `: ...&#39; nor view bounds `<% ...&#39;\", skipIt = false)\n            classContextBounds = List()\n          }\n          val constrAnnots = constructorAnnotations()\n          val (constrMods, vparamss) =\n            if (mods.isTrait) (Modifiers(Flags.TRAIT), List())\n            else (accessModifierOpt(), paramClauses(name, classContextBounds, ofCaseClass = mods.isCase))\n          var mods1 = mods\n          if (mods.isTrait) {\n            if (settings.YvirtClasses && in.token == SUBTYPE) mods1 |= Flags.DEFERRED\n          } else if (in.token == SUBTYPE) {\n            syntaxError(\"classes are not allowed to be virtual\", skipIt = false)\n          }\n          val template = templateOpt(mods1, name, constrMods withAnnotations constrAnnots, vparamss, tstart)\n          if (isInterface(mods1, template.body)) mods1 |= Flags.INTERFACE\n          val result = ClassDef(mods1, name, tparams, template)\n          // Context bounds generate implicit parameters (part of the template) with types\n          // from tparams: we need to ensure these don&#39;t overlap\n          if (!classContextBounds.isEmpty)\n            ensureNonOverlapping(template, tparams)\n          result\n        }\n      }\n    }\n\n\u3055\u3066\u3001\u3088\u3046\u3084\u304f\u5b9a\u7fa9\u3063\u307d\u3044\u5b9a\u7fa9\u304c\u3067\u3066\u304d\u307e\u3057\u305f\u306d\u3002\n\uff08\u5834\u5408\u5206\u3051\u306b\u5fdc\u3058\u305f\u30e1\u30bd\u30c3\u30c9\u306b\u98db\u3076\u3060\u3051\u3001\u306b\u306f\u98fd\u304d\u3066\u304d\u305f\u3068\u3053\u308d\u3067\u3059\u3002\uff09\ndef classDef\u306e\u3059\u3050\u6b21\u306e\u884c\u306e\n  in.nextToken()\n\n\u306f\u3001\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u4e2d\u306e\"class\"\u3068\u3044\u3046\u30c8\u30fc\u30af\u30f3\u3092\u8aad\u307f\u98db\u3070\u3057\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u3002\u3053\u3046\u3044\u3046\u51e6\u7406\u306f\u3001\u69cb\u6587\u89e3\u6790\u3067\u306f\u3088\u304f\u3042\u308b\u30d1\u30bf\u30fc\u30f3\u3067\u3059\u3002\n      val nameOffset = in.offset\n      val name = identForType()\n      atPos(start, if (name == tpnme.ERROR) start else nameOffset) {\n\n\u3042\u305f\u308a\u306f\u3001\u30af\u30e9\u30b9\u540d\u3092\u8aad\u307f\u8fbc\u3093\u3067\u308b\u3068\u3053\u308d\u3060\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n\u3067\u3001\u30af\u30e9\u30b9\u540d\u304ctpnme.ERROR\u3060\u3063\u305f\u3089\u3061\u3087\u3063\u3068\u51e6\u7406\u3092\u5909\u3048\u308b\u611f\u3058\u304b\u306a\u2026\u3002\n        savingClassContextBounds {\n          val contextBoundBuf = new ListBuffer[Tree]\n\n\u3053\u3053\u306f\u3001\u73fe\u5728\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u4fdd\u5b58\u3057\u3066\u304a\u3044\u3066\u3001\u65b0\u3057\u3044\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u4f5c\u6210\u3068\u3044\u3046\u611f\u3058\u3067\u3057\u3087\u3046\u3002\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304c\u5177\u4f53\u7684\u306b\u4f55\u304b\u306f\u308f\u304b\u308a\u307e\u305b\u3093\u304c\u3001\u5909\u6570\u306e\u30b9\u30b3\u30fc\u30d7\u3068\u304b\u306a\u3093\u3084\u304b\u3089\u3060\u3068\u63a8\u6e2c\u3002\n          val tstart = (in.offset :: classContextBounds.map(_.pos.startOrPoint)).min\n          if (!classContextBounds.isEmpty && mods.isTrait) {\n            syntaxError(\"traits cannot have type parameters with context bounds `: ...&#39; nor view bounds `<% ...&#39;\", skipIt = false)\n            classContextBounds = List()\n          }\n\n\u3053\u3053\u306f\u3001\u62e1\u5f35BNF\u3067\u3044\u3046\u3068\u3053\u308d\u306e[TypeParamClause] \u306e\u3042\u305f\u308a\u3067\u3057\u3087\u3046\u3002\n          val constrAnnots = constructorAnnotations()\n\n\u3053\u3053\u306f\u3001 {Annotation}\u3002\n          val (constrMods, vparamss) =\n            if (mods.isTrait) (Modifiers(Flags.TRAIT), List())\n            else (accessModifierOpt(), paramClauses(name, classContextBounds, ofCaseClass = mods.isCase))\n          var mods1 = mods\n          if (mods.isTrait) {\n            if (settings.YvirtClasses && in.token == SUBTYPE) mods1 |= Flags.DEFERRED\n          } else if (in.token == SUBTYPE) {\n            syntaxError(\"classes are not allowed to be virtual\", skipIt = false)\n          }\n\n\u3053\u306e\u8fba\u304c\u3001[AccessModifier]\u304b\u306a\u3002\n\u3068\u306a\u308b\u3068\u3001\n          val template = templateOpt(mods1, name, constrMods withAnnotations constrAnnots, vparamss, tstart)\n          if (isInterface(mods1, template.body)) mods1 |= Flags.INTERFACE\n          val result = ClassDef(mods1, name, tparams, template)\n\n\u3053\u306e\u3042\u305f\u308a\u304c\u3001ClassParamClauses RequiresTypeOpt ClassTemplateOpt\u3000\u306b\u3042\u305f\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u306d\u3002\n          val template = templateOpt(mods1, name, constrMods withAnnotations constrAnnots, vparamss, tstart)\n\n\u306e\uff11\u884c\u3067\u3001ClassParamClauses RequiresTypeOpt ClassTemplateOpt\u3000\u306e\uff13\u3064\u5206\u3063\u3066\u3053\u3068\u306b\u306a\u308b\u3051\u3069\u3001\u3042\u3063\u3066\u308b\u304b\u306a\u2026\u3002\n\u6b8b\u308a\u306e\u3001\n          // Context bounds generate implicit parameters (part of the template) with types\n          // from tparams: we need to ensure these don&#39;t overlap\n          if (!classContextBounds.isEmpty)\n            ensureNonOverlapping(template, tparams)\n          result\n\n\u306e\u3068\u3053\u308d\u306f\u3001\u65b0\u3057\u304f\u4f5c\u6210\u3057\u305f\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304c\u7a7a\u3067\u306a\u3051\u308c\u3070\u3001\u306a\u3093\u3089\u304b\u306e\u51e6\u7406\u3092\u3059\u308b\u3063\u307d\u3044\u3002\n\u3066\u306a\u611f\u3058\u3067\u8aad\u3093\u3067\u3044\u3051\u3070\u3001\u3060\u3044\u305f\u3044\u306e\u751f\u6210\u898f\u5247\u306f\u8aad\u3081\u305d\u3046\u3067\u3059\u306d\u3002\n\u3064\u304e\u306f\u3001\uff08\u79c1\u304c\u4eca\uff09\u5b9f\u88c5\u3057\u305f\u3044\u6587\u6cd5\u3092\u5b9f\u88c5\u3059\u308b\u65b9\u6cd5\u3092\u3069\u3046\u3084\u3063\u3066\u5b9f\u88c5\u3059\u308b\u304b\u3092\u8003\u3048\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\uff08\u3064\u3065\u304f\uff09\n[\u524d\u56de](http://qiita.com/JunSuzukiJapan@github/items/12f956875685ddec7cc0)\u304b\u3089\u306e\u6d41\u308c\u3067\u3001\n\u3064\u304e\u306f\u3001\u30e1\u30bd\u30c3\u30c9topStatSeq()\u306e\u4e2d\u3067\u547c\u3070\u308c\u3066\u3044\u308b\n\u30e1\u30bd\u30c3\u30c9topLevelTmplDef\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```scala:\n    /** Hook for IDE, for top-level classes/objects. */\n    def topLevelTmplDef: Tree = {\n      val annots = annotations(skipNewLines = true)\n      val pos    = caseAwareTokenOffset\n      val mods   = modifiers() withAnnotations annots\n      tmplDef(pos, mods)\n    }\n```\n\n\u3053\u308c\u306f\u3001\u300c\u6539\u884c\u3092\u30b9\u30ad\u30c3\u30d7\u3057\u305f\u308a\u300d\u3068\u304b\u306e\u591a\u5c11\u306e\u8a2d\u5b9a\u3092\u3057\u3066\u3001\n\u3059\u3050\u306b\u30e1\u30bd\u30c3\u30c9tmplDef()\u3092\u547c\u3073\u51fa\u3057\u3066\u308b\u3060\u3051\u3067\u3059\u306d\u3002\n\u3067\u306f\u3001tmplDef()\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```scala:\n    /** {{{\n     *  TmplDef ::= [case] class ClassDef\n     *            |  [case] object ObjectDef\n     *            |  [override] trait TraitDef\n     *  }}}\n     */\n    def tmplDef(pos: Int, mods: Modifiers): Tree = {\n      if (mods.isLazy) syntaxError(\"classes cannot be lazy\", skipIt = false)\n      in.token match {\n        case TRAIT =>\n          classDef(pos, (mods | Flags.TRAIT | Flags.ABSTRACT) withPosition (Flags.TRAIT, tokenRange(in)))\n        case CLASS =>\n          classDef(pos, mods)\n        case CASECLASS =>\n          classDef(pos, (mods | Flags.CASE) withPosition (Flags.CASE, tokenRange(in.prev /*scanner skips on &#39;case&#39; to &#39;class&#39;, thus take prev*/)))\n        case OBJECT =>\n          objectDef(pos, mods)\n        case CASEOBJECT =>\n          objectDef(pos, (mods | Flags.CASE) withPosition (Flags.CASE, tokenRange(in.prev /*scanner skips on &#39;case&#39; to &#39;object&#39;, thus take prev*/)))\n        case _ =>\n          syntaxErrorOrIncompleteAnd(\"expected start of definition\", skipIt = true)(EmptyTree)\n      }\n    }\n```\n\n\u3053\u3053\u3067\u3082\u30b3\u30e1\u30f3\u30c8\u306b\u751f\u6210\u898f\u5247\u304c\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\nclass\u5b9a\u7fa9\u3084\u3001object\u306e\u5b9a\u7fa9\u3001trait\u5b9a\u7fa9\u304c\u3055\u308c\u3066\u3044\u307e\u3059\uff08case class\u306a\u3069\u3082\u542b\u3080\uff09\u3002\n\n\u305d\u308c\u305e\u308c\u306e\u5834\u5408\u306b\u5fdc\u3058\u3066\u3001\u30e1\u30bd\u30c3\u30c9classDef()\u3084objectDef()\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u8a66\u3057\u306bclassDef()\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```scala:\n    /** {{{\n     *  ClassDef ::= Id [TypeParamClause] {Annotation}\n     *               [AccessModifier] ClassParamClauses RequiresTypeOpt ClassTemplateOpt\n     *  TraitDef ::= Id [TypeParamClause] RequiresTypeOpt TraitTemplateOpt\n     *  }}}\n     */\n    def classDef(start: Int, mods: Modifiers): ClassDef = {\n      in.nextToken()\n      val nameOffset = in.offset\n      val name = identForType()\n      atPos(start, if (name == tpnme.ERROR) start else nameOffset) {\n        savingClassContextBounds {\n          val contextBoundBuf = new ListBuffer[Tree]\n          val tparams = typeParamClauseOpt(name, contextBoundBuf)\n          classContextBounds = contextBoundBuf.toList\n          val tstart = (in.offset :: classContextBounds.map(_.pos.startOrPoint)).min\n          if (!classContextBounds.isEmpty && mods.isTrait) {\n            syntaxError(\"traits cannot have type parameters with context bounds `: ...&#39; nor view bounds `<% ...&#39;\", skipIt = false)\n            classContextBounds = List()\n          }\n          val constrAnnots = constructorAnnotations()\n          val (constrMods, vparamss) =\n            if (mods.isTrait) (Modifiers(Flags.TRAIT), List())\n            else (accessModifierOpt(), paramClauses(name, classContextBounds, ofCaseClass = mods.isCase))\n          var mods1 = mods\n          if (mods.isTrait) {\n            if (settings.YvirtClasses && in.token == SUBTYPE) mods1 |= Flags.DEFERRED\n          } else if (in.token == SUBTYPE) {\n            syntaxError(\"classes are not allowed to be virtual\", skipIt = false)\n          }\n          val template = templateOpt(mods1, name, constrMods withAnnotations constrAnnots, vparamss, tstart)\n          if (isInterface(mods1, template.body)) mods1 |= Flags.INTERFACE\n          val result = ClassDef(mods1, name, tparams, template)\n          // Context bounds generate implicit parameters (part of the template) with types\n          // from tparams: we need to ensure these don&#39;t overlap\n          if (!classContextBounds.isEmpty)\n            ensureNonOverlapping(template, tparams)\n          result\n        }\n      }\n    }\n```\n\n\u3055\u3066\u3001\u3088\u3046\u3084\u304f\u5b9a\u7fa9\u3063\u307d\u3044\u5b9a\u7fa9\u304c\u3067\u3066\u304d\u307e\u3057\u305f\u306d\u3002\n\uff08\u5834\u5408\u5206\u3051\u306b\u5fdc\u3058\u305f\u30e1\u30bd\u30c3\u30c9\u306b\u98db\u3076\u3060\u3051\u3001\u306b\u306f\u98fd\u304d\u3066\u304d\u305f\u3068\u3053\u308d\u3067\u3059\u3002\uff09\n\ndef classDef\u306e\u3059\u3050\u6b21\u306e\u884c\u306e\n\n```scala:\n  in.nextToken()\n```\n\n\u306f\u3001\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u4e2d\u306e\"class\"\u3068\u3044\u3046\u30c8\u30fc\u30af\u30f3\u3092\u8aad\u307f\u98db\u3070\u3057\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u3002\u3053\u3046\u3044\u3046\u51e6\u7406\u306f\u3001\u69cb\u6587\u89e3\u6790\u3067\u306f\u3088\u304f\u3042\u308b\u30d1\u30bf\u30fc\u30f3\u3067\u3059\u3002\n\n```scala:\n      val nameOffset = in.offset\n      val name = identForType()\n      atPos(start, if (name == tpnme.ERROR) start else nameOffset) {\n```\n\n\u3042\u305f\u308a\u306f\u3001\u30af\u30e9\u30b9\u540d\u3092\u8aad\u307f\u8fbc\u3093\u3067\u308b\u3068\u3053\u308d\u3060\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n\u3067\u3001\u30af\u30e9\u30b9\u540d\u304ctpnme.ERROR\u3060\u3063\u305f\u3089\u3061\u3087\u3063\u3068\u51e6\u7406\u3092\u5909\u3048\u308b\u611f\u3058\u304b\u306a\u2026\u3002\n\n```scala:\n        savingClassContextBounds {\n          val contextBoundBuf = new ListBuffer[Tree]\n```\n\n\u3053\u3053\u306f\u3001\u73fe\u5728\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u4fdd\u5b58\u3057\u3066\u304a\u3044\u3066\u3001\u65b0\u3057\u3044\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u4f5c\u6210\u3068\u3044\u3046\u611f\u3058\u3067\u3057\u3087\u3046\u3002\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304c\u5177\u4f53\u7684\u306b\u4f55\u304b\u306f\u308f\u304b\u308a\u307e\u305b\u3093\u304c\u3001\u5909\u6570\u306e\u30b9\u30b3\u30fc\u30d7\u3068\u304b\u306a\u3093\u3084\u304b\u3089\u3060\u3068\u63a8\u6e2c\u3002\n\n```scala:\n          val tstart = (in.offset :: classContextBounds.map(_.pos.startOrPoint)).min\n          if (!classContextBounds.isEmpty && mods.isTrait) {\n            syntaxError(\"traits cannot have type parameters with context bounds `: ...&#39; nor view bounds `<% ...&#39;\", skipIt = false)\n            classContextBounds = List()\n          }\n```\n\n\u3053\u3053\u306f\u3001\u62e1\u5f35BNF\u3067\u3044\u3046\u3068\u3053\u308d\u306e[TypeParamClause] \u306e\u3042\u305f\u308a\u3067\u3057\u3087\u3046\u3002\n\n```scala:\n          val constrAnnots = constructorAnnotations()\n```\n\n\u3053\u3053\u306f\u3001 {Annotation}\u3002\n\n```scala:\n          val (constrMods, vparamss) =\n            if (mods.isTrait) (Modifiers(Flags.TRAIT), List())\n            else (accessModifierOpt(), paramClauses(name, classContextBounds, ofCaseClass = mods.isCase))\n          var mods1 = mods\n          if (mods.isTrait) {\n            if (settings.YvirtClasses && in.token == SUBTYPE) mods1 |= Flags.DEFERRED\n          } else if (in.token == SUBTYPE) {\n            syntaxError(\"classes are not allowed to be virtual\", skipIt = false)\n          }\n```\n\n\u3053\u306e\u8fba\u304c\u3001[AccessModifier]\u304b\u306a\u3002\n\u3068\u306a\u308b\u3068\u3001\n\n```scala:\n          val template = templateOpt(mods1, name, constrMods withAnnotations constrAnnots, vparamss, tstart)\n          if (isInterface(mods1, template.body)) mods1 |= Flags.INTERFACE\n          val result = ClassDef(mods1, name, tparams, template)\n```\n\n\u3053\u306e\u3042\u305f\u308a\u304c\u3001ClassParamClauses RequiresTypeOpt ClassTemplateOpt\u3000\u306b\u3042\u305f\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u306d\u3002\n\n```scala:\n          val template = templateOpt(mods1, name, constrMods withAnnotations constrAnnots, vparamss, tstart)\n```\n\n\u306e\uff11\u884c\u3067\u3001ClassParamClauses RequiresTypeOpt ClassTemplateOpt\u3000\u306e\uff13\u3064\u5206\u3063\u3066\u3053\u3068\u306b\u306a\u308b\u3051\u3069\u3001\u3042\u3063\u3066\u308b\u304b\u306a\u2026\u3002\n\u6b8b\u308a\u306e\u3001\n\n```scala:\n          // Context bounds generate implicit parameters (part of the template) with types\n          // from tparams: we need to ensure these don&#39;t overlap\n          if (!classContextBounds.isEmpty)\n            ensureNonOverlapping(template, tparams)\n          result\n```\n\n\u306e\u3068\u3053\u308d\u306f\u3001\u65b0\u3057\u304f\u4f5c\u6210\u3057\u305f\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304c\u7a7a\u3067\u306a\u3051\u308c\u3070\u3001\u306a\u3093\u3089\u304b\u306e\u51e6\u7406\u3092\u3059\u308b\u3063\u307d\u3044\u3002\n\n\u3066\u306a\u611f\u3058\u3067\u8aad\u3093\u3067\u3044\u3051\u3070\u3001\u3060\u3044\u305f\u3044\u306e\u751f\u6210\u898f\u5247\u306f\u8aad\u3081\u305d\u3046\u3067\u3059\u306d\u3002\n\n\u3064\u304e\u306f\u3001\uff08\u79c1\u304c\u4eca\uff09\u5b9f\u88c5\u3057\u305f\u3044\u6587\u6cd5\u3092\u5b9f\u88c5\u3059\u308b\u65b9\u6cd5\u3092\u3069\u3046\u3084\u3063\u3066\u5b9f\u88c5\u3059\u308b\u304b\u3092\u8003\u3048\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\uff08\u3064\u3065\u304f\uff09\n\n", "tags": ["\u884c\u304d\u5f53\u305f\u308a\u3070\u3063\u305f\u308a", "\u69cb\u6587\u89e3\u6790", "Scala", "\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9"]}