{"tags": ["PHP", "\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7"], "context": "\n\nPPAP\u30c6\u30b9\u30c8\u3092PHP\u3067\n\n\u6982\u8981\n\nPPAP\u30c6\u30b9\u30c8\u3092 Web Audio API \u3067\n\u305d\u306e\u767a\u60f3\u306f\u306a\u304b\u3063\u305f\n\n\n\u74b0\u5883\n\nPHP 7.1.0RC5\n\n\n\u5b9f\u88c5\n\n\u4ee5\u524d\u5b9f\u88c5\u3057\u305f\u30cd\u30bf\u3068\u306f\u3067\u304d\u308b\u3060\u3051\u88ab\u3089\u306a\u3044\u3088\u3046\u306b\u3059\u308b\n\n\n\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7 with PHP\n\u5909\u6570\u3092\u4f7f\u308f\u305a\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7 with PHP\n\u3053\u3093\u306a\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7\u306f\u5acc\u3060 with PHP\n\u3053\u3093\u306a\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7\u306f\u5acc\u3060 with PHP \u305d\u306e\uff12\n\n\n\u8ffd\u8a18\uff1a\u9014\u4e2d\u304b\u3089\u672c\u7b4b\u3067\u306a\u304f\u7121\u7406\u77e2\u7406\u306a\u30eb\u30fc\u30d7\u306e\u5b9f\u73fe\u306b\u529b\u3092\u5165\u308c\u59cb\u3081\u305f :puke: \n\n\n\u30b7\u30f3\u30d7\u30eb\u306b\n<?php\n$ppap = [\n    '\u30da\u30f3',\n    '\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc',\n    '\u30a2\u30c3\u30dd\u30fc',\n    '\u30da\u30fc\u30f3',\n];\n\nwhile (true) {\n    shuffle($ppap);\n    $result = implode('', $ppap);\n    echo $result . PHP_EOL;;\n    if ($result === '\u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30fc\u30f3') {\n        break;\n    }\n}\necho '\uff3c(^o^)\uff0f\uff8b\uff9f\uff7a!' . PHP_EOL;\n\n\niterator\n<?php\nclass PPAP implements Iterator\n{\n    public $ppap = [\n        '\u30da\u30f3',\n        '\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc',\n        '\u30a2\u30c3\u30dd\u30fc',\n        '\u30da\u30fc\u30f3',\n    ];\n\n    public function current()\n    {\n        shuffle($this->ppap);                                                                                                                                   \n        return array_shift($this->ppap); \n    }\n\n    public function key()\n    {\n    }\n\n    public function next()\n    {\n    }\n\n    public function rewind()\n    {\n        $this->ppap = [\n            '\u30da\u30f3',\n            '\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc',\n            '\u30a2\u30c3\u30dd\u30fc',\n            '\u30da\u30fc\u30f3',\n        ];\n    }\n\n    public function valid()\n    {\n        return count($this->ppap);\n    }\n}\n\n$ppap = new PPAP();\nloop:\n$result = '';\nforeach ($ppap as $p) {\n    $result .= $p;\n}\necho $result . PHP_EOL;\nif ($result !== '\u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30fc\u30f3') {\n    $ppap->rewind();\n    goto loop;\n}\necho '\uff3c(^o^)\uff0f\uff8b\uff9f\uff7a!' . PHP_EOL;\n\n\ngenerator\n<?php\n$result = '';\nforeach ((function () {\n    $ppap = [\n        '\u30da\u30f3',\n        '\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc',\n        '\u30a2\u30c3\u30dd\u30fc',\n        '\u30da\u30fc\u30f3',\n    ];\n    shuffle($ppap);\n\n    foreach ($ppap as $p) {\n        yield $p;\n    }\n})() as $p) {\n    $result .= $p;\n}\n\necho $result . PHP_EOL;\nif ($result !== '\u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30fc\u30f3') {\n    require __FILE__;\n} else {\n    echo '\uff3c(^o^)\uff0f\uff8b\uff9f\uff7a!' . PHP_EOL;\n}\n\n\ngenerator (\u610f\u5730\u3067\u3082shuffle\u4f7f\u3044\u305f\u304f\u306a\u304b\u3063\u305f\u7248\uff09\n#!/usr/local/bin/php\n<?php\n$result = '';\nforeach ((function () {\n    $ppap = [\n        '\u30da\u30f3',\n        '\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc',\n        '\u30a2\u30c3\u30dd\u30fc',\n        '\u30da\u30fc\u30f3',\n    ];\n\n    $f = function ($ppap) {\n        $rand = array_rand($ppap);\n        $p = $ppap[$rand];\n        unset($ppap[$rand]);\n        $ppap = array_values($ppap);\n        return [$p, $ppap];\n    };\n\n    $count = count($ppap);  \n    for ($i = 0;$i < $count;$i++) {\n        list($p, $ppap) = $f($ppap);\n        yield $p;\n    }\n})() as $p) {\n    $result .= $p;\n}\n\necho $result . PHP_EOL;\nif ($result !== '\u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30fc\u30f3') {\n    system(__FILE__);\n} else {\n    echo '\uff3c(^o^)\uff0f\uff8b\uff9f\uff7a!' . PHP_EOL;\n}\n\n# PPAP\u30c6\u30b9\u30c8\u3092PHP\u3067\n## \u6982\u8981\n\n- [PPAP\u30c6\u30b9\u30c8\u3092 Web Audio API \u3067](http://qiita.com/kichiki/items/c0b760375fd9cdcd9065)\n- \u305d\u306e\u767a\u60f3\u306f\u306a\u304b\u3063\u305f\n\n## \u74b0\u5883\n\n- PHP 7.1.0RC5\n\n## \u5b9f\u88c5\n\n- \u4ee5\u524d\u5b9f\u88c5\u3057\u305f\u30cd\u30bf\u3068\u306f\u3067\u304d\u308b\u3060\u3051\u88ab\u3089\u306a\u3044\u3088\u3046\u306b\u3059\u308b\n - [\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7 with PHP](http://qiita.com/shinderuman@github/items/7c432e8cb7719d35342a)\n - [\u5909\u6570\u3092\u4f7f\u308f\u305a\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7 with PHP](http://qiita.com/shinderuman@github/items/fcf384a6fff319765615)\n - [\u3053\u3093\u306a\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7\u306f\u5acc\u3060 with PHP](http://qiita.com/shinderuman@github/items/15fe031ab9ff74ce8fb2)\n - [\u3053\u3093\u306a\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7\u306f\u5acc\u3060 with PHP \u305d\u306e\uff12](http://qiita.com/shinderuman@github/items/5d26a92331247f231fc7)\n- \u8ffd\u8a18\uff1a\u9014\u4e2d\u304b\u3089\u672c\u7b4b\u3067\u306a\u304f\u7121\u7406\u77e2\u7406\u306a\u30eb\u30fc\u30d7\u306e\u5b9f\u73fe\u306b\u529b\u3092\u5165\u308c\u59cb\u3081\u305f :puke: \n\n### \u30b7\u30f3\u30d7\u30eb\u306b\n\n```php\n<?php\n$ppap = [\n\t'\u30da\u30f3',\n\t'\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc',\n\t'\u30a2\u30c3\u30dd\u30fc',\n\t'\u30da\u30fc\u30f3',\n];\n\nwhile (true) {\n\tshuffle($ppap);\n\t$result = implode('', $ppap);\n\techo $result . PHP_EOL;;\n\tif ($result === '\u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30fc\u30f3') {\n\t\tbreak;\n\t}\n}\necho '\uff3c(^o^)\uff0f\uff8b\uff9f\uff7a!' . PHP_EOL;\n```\n\n### iterator\n\n```php\n<?php\nclass PPAP implements Iterator\n{\n    public $ppap = [\n        '\u30da\u30f3',\n        '\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc',\n        '\u30a2\u30c3\u30dd\u30fc',\n        '\u30da\u30fc\u30f3',\n    ];\n\n    public function current()\n    {\n        shuffle($this->ppap);                                                                                                                                   \n        return array_shift($this->ppap); \n    }\n\n    public function key()\n    {\n    }\n\n    public function next()\n    {\n    }\n\n    public function rewind()\n    {\n        $this->ppap = [\n            '\u30da\u30f3',\n            '\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc',\n            '\u30a2\u30c3\u30dd\u30fc',\n            '\u30da\u30fc\u30f3',\n        ];\n    }\n\n    public function valid()\n    {\n        return count($this->ppap);\n    }\n}\n\n$ppap = new PPAP();\nloop:\n$result = '';\nforeach ($ppap as $p) {\n    $result .= $p;\n}\necho $result . PHP_EOL;\nif ($result !== '\u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30fc\u30f3') {\n    $ppap->rewind();\n    goto loop;\n}\necho '\uff3c(^o^)\uff0f\uff8b\uff9f\uff7a!' . PHP_EOL;\n```\n\n### generator\n\n```php\n<?php\n$result = '';\nforeach ((function () {\n    $ppap = [\n        '\u30da\u30f3',\n        '\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc',\n        '\u30a2\u30c3\u30dd\u30fc',\n        '\u30da\u30fc\u30f3',\n    ];\n    shuffle($ppap);\n\n    foreach ($ppap as $p) {\n        yield $p;\n    }\n})() as $p) {\n    $result .= $p;\n}\n\necho $result . PHP_EOL;\nif ($result !== '\u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30fc\u30f3') {\n    require __FILE__;\n} else {\n    echo '\uff3c(^o^)\uff0f\uff8b\uff9f\uff7a!' . PHP_EOL;\n}\n```\n\n### generator (\u610f\u5730\u3067\u3082shuffle\u4f7f\u3044\u305f\u304f\u306a\u304b\u3063\u305f\u7248\uff09\n\n```php\n#!/usr/local/bin/php\n<?php\n$result = '';\nforeach ((function () {\n    $ppap = [\n        '\u30da\u30f3',\n        '\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc',\n        '\u30a2\u30c3\u30dd\u30fc',\n        '\u30da\u30fc\u30f3',\n    ];\n\n    $f = function ($ppap) {\n        $rand = array_rand($ppap);\n        $p = $ppap[$rand];\n        unset($ppap[$rand]);\n        $ppap = array_values($ppap);\n        return [$p, $ppap];\n    };\n\n    $count = count($ppap);  \n    for ($i = 0;$i < $count;$i++) {\n        list($p, $ppap) = $f($ppap);\n        yield $p;\n    }\n})() as $p) {\n    $result .= $p;\n}\n\necho $result . PHP_EOL;\nif ($result !== '\u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30fc\u30f3') {\n    system(__FILE__);\n} else {\n    echo '\uff3c(^o^)\uff0f\uff8b\uff9f\uff7a!' . PHP_EOL;\n}\n```\n"}