{"context": " More than 1 year has passed since last update.\u6ce8\u610f\uff01 \u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306b\u306f\u3001JVM\u3092\u66b4\u8d70\u3055\u305b\u308b\u6050\u308c\u306e\u3042\u308b\u30b3\u30fc\u30c9\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\n\u307e\u305a\u3001\u3053\u306e\u30b3\u30fc\u30c9\u3002\n\u5bfe\u8c61\u306e\u6587\u5b57\u5217\u304c\u9577\u304f\u306a\u308b\u3068\u3001\u305d\u306e\u5b9f\u884c\u6642\u9593\u306f\u7206\u767a\u7684\u306b\u5897\u3048\u307e\u3059\u3002\n\nhangup_regex.groovy\n@Grab(group='org.spockframework', module='spock-core', version='0.7-groovy-2.0')\n\nimport spock.lang.*\nimport java.util.regex.Matcher\nimport java.util.regex.Pattern\n\nclass SlowRegexTest extends Specification {\n\n  def stopWatch = {c->\n    def s = System.nanoTime()\n    c()\n    def w = System.nanoTime() - s\n    if(w <      1000000)\n        \"${w /  1000} [microsec]\"\n    else if(w < 1000000000)\n        \"${w /  1000000} [millsec]\"\n    else\n        \"${w /  1000000000} [sec]\"\n  }\n\n  def p = Pattern.compile(/(([0-9a-zA-Z]+[\\s.]*)+)$/)\n  def trim = { name ->  \n    def matcher = p.matcher(name)\n    println stopWatch { matcher.find() }\n    println matcher.start()\n    name.substring(0, matcher.start())\n  }\n\n  @Timeout(10)\n  def '\u672b\u5c3e\u306e\u30c8\u30ea\u30e0\u306b10\u79d2\u4ee5\u4e0a\u304b\u304b\u3089\u306a\u3044\u304b'(){\n    expect:\n    trim(target) == result\n\n    where:\n        target                                                |    result\n    \"******${\"A\"* 1}BC  DEF  GHI  JKL  MNO  PQR  STU_  VWX.\"  | \"******${\"A\"* 1}BC  DEF  GHI  JKL  MNO  PQR  STU_  \"\n    \"******${\"A\"* 3}BC  DEF  GHI  JKL  MNO  PQR  STU_  VWX.\"  | \"******${\"A\"* 3}BC  DEF  GHI  JKL  MNO  PQR  STU_  \"\n    \"******${\"A\"* 5}BC  DEF  GHI  JKL  MNO  PQR  STU_  VWX.\"  | \"******${\"A\"* 5}BC  DEF  GHI  JKL  MNO  PQR  STU_  \"\n    \"******${\"A\"* 7}BC  DEF  GHI  JKL  MNO  PQR  STU_  VWX.\"  | \"******${\"A\"* 7}BC  DEF  GHI  JKL  MNO  PQR  STU_  \"\n    \"******${\"A\"* 9}BC  DEF  GHI  JKL  MNO  PQR  STU_  VWX.\"  | \"******${\"A\"* 9}BC  DEF  GHI  JKL  MNO  PQR  STU_  \"\n    \"******${\"A\"*11}BC  DEF  GHI  JKL  MNO  PQR  STU_  VWX.\"  | \"******${\"A\"*11}BC  DEF  GHI  JKL  MNO  PQR  STU_  \"\n  }\n}\n\n\n\n\u3053\u306e\u539f\u56e0\u3082\u3001\u524d\u306b\u8a00\u3063\u305f\u901a\u308a\u7ffb\u3063\u3066\u691c\u7d22\u3057\u3066\u3057\u307e\u3046\u306e\u304c\u539f\u56e0\u3067\u3059\u3002\n\u305f\u3060\u3001\u3053\u306e\u7a0b\u5ea6\u3067\u66b4\u8d70\u72b6\u614b\u306b\u307e\u3067\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u306f\u4f55\u304b\u3057\u3089Java\u306e\u6b63\u898f\u8868\u73fe\u30a8\u30f3\u30b8\u30f3\u306e\u5b9f\u88c5\u306b\u306f\u554f\u984c\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u306d\u3002\u3002\u3002\n\u3053\u306e\u6b63\u898f\u8868\u73fe\u3092\u4fee\u6b63\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\nno_hungup.groovy\n  def p = Pattern.compile(/(([0-9a-zA-Z]++[\\s.]*)+)$/)\n\n\n\u9055\u3044\u306f\u3001\u82f1\u6570\u5b57\u306e\u30b0\u30eb\u30fc\u30d7\u306e\u9023\u7d9a\u3092\u63a2\u3059+\u304c++\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3002\n++\u306fJava\u306e\u6b63\u898f\u8868\u73fe\u3067\u306f\u8caa\u6b32\u30de\u30c3\u30c1\u3092\u884c\u3044\u307e\u3059\u3002\n\u8caa\u6b32\u30de\u30c3\u30c1\u306f\u3001\u5f8c\u308d\u306b\u7d9a\u304f\u30d1\u30bf\u30fc\u30f3\u304c\u51fa\u73fe\u3057\u3088\u3046\u304c\u3057\u307e\u3044\u304c\u30de\u30c3\u30c1\u3092\u7d9a\u3051\u308b\u6027\u8cea\u304c\u3042\u308a\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001\n\ngreedy.groovy\nassert  ('abcd' ==~ /.+d/)\nassert !('abcd' ==~ /.++d/)\n\n\n\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u5f8c\u8005\u3067\u306fd\u306f\u3001\u3059\u3067\u306b.++\u306b\u542b\u307e\u308c\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u305f\u3081\u8a55\u4fa1\u306ffalse\u3068\u306a\u308b\u306e\u3067\u3059\u3002\n\u8caa\u6b32\u30de\u30c3\u30c1\u3067\u306f\u5f8c\u308d\u306b\u7d9a\u304f\u8868\u73fe\u3092\u691c\u7d22\u3057\u306a\u3044\u305f\u3081\u3001\u6761\u4ef6\u306b\u3088\u3063\u3066\u306f\u6b63\u898f\u8868\u73fe\u3092\u975e\u5e38\u306b\u9ad8\u901f\u5316\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4eca\u56de\u4f8b\u793a\u3057\u305f\u30b1\u30fc\u30b9\u3067\u306f\u3001\u82f1\u6570\u5b57\u30d1\u30bf\u30fc\u30f3\u3068\u3001\u5f8c\u306b\u7d9a\u304f\u30d1\u30bf\u30fc\u30f3\u304c\u88ab\u3089\u306a\u3044\u305f\u3081\u3053\u306e\u3088\u3046\u306b\u4fee\u6b63\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\u3061\u306a\u307f\u306b\u3001\u4e00\u822c\u7684\u306b\n(\u30d1\u30bf\u30fc\u30f3+)+\n\n\u3068\u3044\u3046\u6b63\u898f\u8868\u73fe\u306f\u9045\u3044\u3067\u3059\u3002\u3059\u3050\u6b7b\u306b\u307e\u3059\u3002\n\u6ce8\u610f\uff01 \u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306b\u306f\u3001JVM\u3092\u66b4\u8d70\u3055\u305b\u308b\u6050\u308c\u306e\u3042\u308b\u30b3\u30fc\u30c9\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u307e\u305a\u3001\u3053\u306e\u30b3\u30fc\u30c9\u3002\n\u5bfe\u8c61\u306e\u6587\u5b57\u5217\u304c\u9577\u304f\u306a\u308b\u3068\u3001\u305d\u306e\u5b9f\u884c\u6642\u9593\u306f\u7206\u767a\u7684\u306b\u5897\u3048\u307e\u3059\u3002\n\n```groovy:hangup_regex.groovy\n@Grab(group='org.spockframework', module='spock-core', version='0.7-groovy-2.0')\n\nimport spock.lang.*\nimport java.util.regex.Matcher\nimport java.util.regex.Pattern\n\nclass SlowRegexTest extends Specification {\n\n  def stopWatch = {c->\n    def s = System.nanoTime()\n    c()\n    def w = System.nanoTime() - s\n    if(w <      1000000)\n        \"${w /  1000} [microsec]\"\n    else if(w < 1000000000)\n        \"${w /  1000000} [millsec]\"\n    else\n        \"${w /  1000000000} [sec]\"\n  }\n  \n  def p = Pattern.compile(/(([0-9a-zA-Z]+[\\s.]*)+)$/)\n  def trim = { name ->  \n    def matcher = p.matcher(name)\n    println stopWatch { matcher.find() }\n    println matcher.start()\n    name.substring(0, matcher.start())\n  }\n  \n  @Timeout(10)\n  def '\u672b\u5c3e\u306e\u30c8\u30ea\u30e0\u306b10\u79d2\u4ee5\u4e0a\u304b\u304b\u3089\u306a\u3044\u304b'(){\n    expect:\n    trim(target) == result\n    \n    where:\n        target                                                |    result\n    \"******${\"A\"* 1}BC  DEF  GHI  JKL  MNO  PQR  STU_  VWX.\"  | \"******${\"A\"* 1}BC  DEF  GHI  JKL  MNO  PQR  STU_  \"\n    \"******${\"A\"* 3}BC  DEF  GHI  JKL  MNO  PQR  STU_  VWX.\"  | \"******${\"A\"* 3}BC  DEF  GHI  JKL  MNO  PQR  STU_  \"\n    \"******${\"A\"* 5}BC  DEF  GHI  JKL  MNO  PQR  STU_  VWX.\"  | \"******${\"A\"* 5}BC  DEF  GHI  JKL  MNO  PQR  STU_  \"\n    \"******${\"A\"* 7}BC  DEF  GHI  JKL  MNO  PQR  STU_  VWX.\"  | \"******${\"A\"* 7}BC  DEF  GHI  JKL  MNO  PQR  STU_  \"\n    \"******${\"A\"* 9}BC  DEF  GHI  JKL  MNO  PQR  STU_  VWX.\"  | \"******${\"A\"* 9}BC  DEF  GHI  JKL  MNO  PQR  STU_  \"\n    \"******${\"A\"*11}BC  DEF  GHI  JKL  MNO  PQR  STU_  VWX.\"  | \"******${\"A\"*11}BC  DEF  GHI  JKL  MNO  PQR  STU_  \"\n  }\n}\n\n```\n\n\u3053\u306e\u539f\u56e0\u3082\u3001\u524d\u306b\u8a00\u3063\u305f\u901a\u308a\u7ffb\u3063\u3066\u691c\u7d22\u3057\u3066\u3057\u307e\u3046\u306e\u304c\u539f\u56e0\u3067\u3059\u3002\n\u305f\u3060\u3001\u3053\u306e\u7a0b\u5ea6\u3067\u66b4\u8d70\u72b6\u614b\u306b\u307e\u3067\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u306f\u4f55\u304b\u3057\u3089Java\u306e\u6b63\u898f\u8868\u73fe\u30a8\u30f3\u30b8\u30f3\u306e\u5b9f\u88c5\u306b\u306f\u554f\u984c\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u306d\u3002\u3002\u3002\n\n\u3053\u306e\u6b63\u898f\u8868\u73fe\u3092\u4fee\u6b63\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n```groovy:no_hungup.groovy\n  def p = Pattern.compile(/(([0-9a-zA-Z]++[\\s.]*)+)$/)\n```\n\n\u9055\u3044\u306f\u3001\u82f1\u6570\u5b57\u306e\u30b0\u30eb\u30fc\u30d7\u306e\u9023\u7d9a\u3092\u63a2\u3059+\u304c++\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3002\n\n++\u306fJava\u306e\u6b63\u898f\u8868\u73fe\u3067\u306f\u8caa\u6b32\u30de\u30c3\u30c1\u3092\u884c\u3044\u307e\u3059\u3002\n\n\u8caa\u6b32\u30de\u30c3\u30c1\u306f\u3001\u5f8c\u308d\u306b\u7d9a\u304f\u30d1\u30bf\u30fc\u30f3\u304c\u51fa\u73fe\u3057\u3088\u3046\u304c\u3057\u307e\u3044\u304c\u30de\u30c3\u30c1\u3092\u7d9a\u3051\u308b\u6027\u8cea\u304c\u3042\u308a\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001\n\n```groovy:greedy.groovy\nassert  ('abcd' ==~ /.+d/)\nassert !('abcd' ==~ /.++d/)\n```\n\n\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u5f8c\u8005\u3067\u306fd\u306f\u3001\u3059\u3067\u306b.++\u306b\u542b\u307e\u308c\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u305f\u3081\u8a55\u4fa1\u306ffalse\u3068\u306a\u308b\u306e\u3067\u3059\u3002\n\n\u8caa\u6b32\u30de\u30c3\u30c1\u3067\u306f\u5f8c\u308d\u306b\u7d9a\u304f\u8868\u73fe\u3092\u691c\u7d22\u3057\u306a\u3044\u305f\u3081\u3001\u6761\u4ef6\u306b\u3088\u3063\u3066\u306f\u6b63\u898f\u8868\u73fe\u3092\u975e\u5e38\u306b\u9ad8\u901f\u5316\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u4eca\u56de\u4f8b\u793a\u3057\u305f\u30b1\u30fc\u30b9\u3067\u306f\u3001\u82f1\u6570\u5b57\u30d1\u30bf\u30fc\u30f3\u3068\u3001\u5f8c\u306b\u7d9a\u304f\u30d1\u30bf\u30fc\u30f3\u304c\u88ab\u3089\u306a\u3044\u305f\u3081\u3053\u306e\u3088\u3046\u306b\u4fee\u6b63\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u3061\u306a\u307f\u306b\u3001\u4e00\u822c\u7684\u306b\n\n```\n(\u30d1\u30bf\u30fc\u30f3+)+\n```\n\n\u3068\u3044\u3046\u6b63\u898f\u8868\u73fe\u306f\u9045\u3044\u3067\u3059\u3002\u3059\u3050\u6b7b\u306b\u307e\u3059\u3002", "tags": ["Groovy", "\u6b63\u898f\u8868\u73fe"]}