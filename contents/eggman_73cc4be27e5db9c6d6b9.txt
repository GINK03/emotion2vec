{"context": "GCC tree\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u8aad\u3093\u3067\u307f\u307e\u3057\u305f\u3002\ntree\u306fgcc\u306efront end\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u6728\u69cb\u9020\u3092\u8868\u3059\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3059\u3002\ngcc\u306f\u30d1\u30fc\u30b5\u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092tree\u306b\u5909\u63db\u3057\u307e\u3059\u3002\ntree\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u306ftree.h\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u5bfe\u8c61: gcc 0.9 (\u79c1\u304cgcc 0.9 \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u3044\u308b\u306e\u3067\u2192http://gcc.shoutwiki.com/wiki/Main_Page)\n\ntree_node\n\ntree\u306ftree_node\u3092\u9023\u7d50\u3057\u305f\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3059\u3002\ntree_node\u306funion\u3068\u3057\u3066\u5b9a\u7fa9\n\nunion tree_node\n{\n  struct tree_shared shared;\n  struct tree_int_cst int_cst;\n  struct tree_real_cst real_cst;\n  struct tree_string string;\n  struct tree_complex complex;\n  struct tree_identifier identifier;\n  struct tree_decl decl;\n  struct tree_type type;\n  struct tree_exp exp;\n  struct tree_stmt stmt;\n  struct tree_if_stmt if_stmt;\n  struct tree_bind_stmt bind_stmt;\n  struct tree_case_stmt case_stmt;\n};\n\n\ntree_shared\n\ntree_node\u306e\u30e1\u30f3\u30d0\u306f\u3001\u5148\u982d\u306btree_shared\u69cb\u9020\u4f53\u3092\u6301\u3064\u3002\n\nstruct tree_shared\n{\n  int uid;\n  union tree_node *chain;\n  union tree_node *type;\n  enum tree_code code : 8;      /* Give it a byte only */\n\n/* the attributes: (special properties of node) */\n\n\ngcc 2.x\u3060\u3068tree_shared\u306ftree_common\u3068\u3044\u3046\u540d\u524d\u306b\u306a\u3063\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3059\u3002\n\u3088\u304f\u51fa\u3066\u304f\u308b \u30de\u30af\u30ed TREE_CODE(x)\u3067tree\u306ecode\u3092\u53d6\u5f97\u3059\u308b\u3002\n\n#define TREE_CODE(NODE) ((NODE)->shared.code)\n\n\n\ncode\u306ftree_node\u306e\u7a2e\u985e\u3092\u8868\u3059\u3002 code \u306e\u5024\u306f tree.def\u3067\u5b9a\u7fa9\u3002\n\n\u6574\u6570\u5b9a\u6570\u306a\u3089INTEGER_CST\u3001\u52a0\u7b97\u306e\u5f0f\u306a\u3089\u3001PLUS_EXPR\u3001if\u6587\u306a\u3089\u3001IF_STMT\u3001\u5909\u6570\u5ba3\u8a00\u306a\u3089\u3001VAR_DECL\u3001\u306a\u3069\u3067\u3059\u3002\n\n\ntype \u306f\u578b\u306etree_node\u3092\u6307\u3059\u3002\nchain \u306f\u6b21\u306etree_node\u3092\u6307\u3059\u3002 \nuid\u306ftree_node\u6bce\u306bunique\u306aid\u3092\u6301\u3064\u3002\n\n\ntree_int_cst\n\n\u6574\u6570\u5b9a\u6570\u306f \u4e0a\u4f4d\u3068\u4e0b\u4f4d\u3092long\u3092\u6301\u3064\u3002\n\u679d\u306f\u7121\u3044\u3002\n\nstruct tree_int_cst\n{\n  char shared[sizeof (struct tree_shared)];\n  long int_cst_low;\n  long int_cst_high;\n};\n\n\ntree_exp\n\n\u5f0f\u306f\u679d\u3068\u3057\u3066\u3001operands\u3092\u6301\u3064\n\u30aa\u30da\u30e9\u30f3\u30c9\u306e\u6570(\u679d\u306e\u6570)\u306f\u5f0f\u306e\u7a2e\u985e\u306b\u3088\u308a\u7570\u306a\u308b\u3002\n\nstruct tree_exp\n{\n  char shared[sizeof (struct tree_shared)];\n  union tree_node *operands[1];\n};\n\n\ntree_if_stmt\n\nif\u6587\u306f\u679d\u3068\u3057\u3066\u3001\u6761\u4ef6\u3001then\u90e8\u5206\u3001else\u90e8\u5206\u306e\uff13\u3064\u3092\u6301\u3064\u3002\nstmt\u306f\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u884c\u6570\u306e\u60c5\u5831\u3092\u6301\u3064\u3002\n\nstruct tree_if_stmt\n{\n  char shared[sizeof (struct tree_shared)];\n  char *filename;\n  int linenum;\n  union tree_node *cond, *thenpart, *elsepart;\n};\n\n\ntree_node\u306esize\n\ntree_node\u306e\u30b5\u30a4\u30ba\u306fcode\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u3002make_node()\u3092\u898b\u308b\u3068\u5206\u304b\u308b\u3002\ntype \u304c d or t \u306a\u3089\u56fa\u5b9a\u9577\n\u305d\u308c\u4ee5\u5916\u306a\u3089 tree.def\u3092\u4f7f\u3063\u3066\u5b9a\u7fa9\u3059\u308btree_code_length[]\u306e\u5024\u5206\u3092\u8ffd\u52a0\u3057\u3066\u78ba\u4fdd\u3059\u308b\u3002\n\n  switch (type)\n    {\n    case 'd':  /* A decl node */\n      length = sizeof (struct tree_decl);\n      break;\n\n    case 't':  /* a type node */\n      length = sizeof (struct tree_type);\n      break;\n\n    case 's':  /* a stmt node */\n      length = sizeof (struct tree_shared)\n        + 2 * sizeof (int)\n          + tree_code_length[(int) code] * sizeof (char *);\n      break;\n\n    default:   /* an expression or constant.  */\n      length = sizeof (struct tree_shared)\n        + tree_code_length[(int) code] * sizeof (char *);\n    }\n\n\n\u53c2\u8003\n\nw_o \u3055\u3093\u306e\u65e5\u8a18 \n\n\nhttp://int.main.jp/log/03_12.html\nhttp://web.archive.org/web/20040725032559/http://morihyphen.hp.infoseek.co.jp/log/03_12.html\n\n\nhttp://ja.gcc.wikia.com/wiki/Enum_tree_code\n\nGCC tree\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u8aad\u3093\u3067\u307f\u307e\u3057\u305f\u3002\n\ntree\u306fgcc\u306efront end\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u6728\u69cb\u9020\u3092\u8868\u3059\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3059\u3002\ngcc\u306f\u30d1\u30fc\u30b5\u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092tree\u306b\u5909\u63db\u3057\u307e\u3059\u3002\ntree\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u306ftree.h\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u5bfe\u8c61: gcc 0.9 (\u79c1\u304cgcc 0.9 \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u3044\u308b\u306e\u3067\u2192http://gcc.shoutwiki.com/wiki/Main_Page)\n\n# tree_node\n* tree\u306ftree_node\u3092\u9023\u7d50\u3057\u305f\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3059\u3002\n* tree_node\u306funion\u3068\u3057\u3066\u5b9a\u7fa9\n\n\n```c\nunion tree_node\n{\n  struct tree_shared shared;\n  struct tree_int_cst int_cst;\n  struct tree_real_cst real_cst;\n  struct tree_string string;\n  struct tree_complex complex;\n  struct tree_identifier identifier;\n  struct tree_decl decl;\n  struct tree_type type;\n  struct tree_exp exp;\n  struct tree_stmt stmt;\n  struct tree_if_stmt if_stmt;\n  struct tree_bind_stmt bind_stmt;\n  struct tree_case_stmt case_stmt;\n};\n```\n\n# tree_shared\n* tree_node\u306e\u30e1\u30f3\u30d0\u306f\u3001\u5148\u982d\u306btree_shared\u69cb\u9020\u4f53\u3092\u6301\u3064\u3002\n\n```c\nstruct tree_shared\n{\n  int uid;\n  union tree_node *chain;\n  union tree_node *type;\n  enum tree_code code : 8;      /* Give it a byte only */\n\n/* the attributes: (special properties of node) */\n```\n* gcc 2.x\u3060\u3068tree_shared\u306ftree_common\u3068\u3044\u3046\u540d\u524d\u306b\u306a\u3063\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3059\u3002\n\n* \u3088\u304f\u51fa\u3066\u304f\u308b \u30de\u30af\u30ed TREE_CODE(x)\u3067tree\u306ecode\u3092\u53d6\u5f97\u3059\u308b\u3002\n\n```c\n#define TREE_CODE(NODE) ((NODE)->shared.code)\n```\n\n* code\u306ftree_node\u306e\u7a2e\u985e\u3092\u8868\u3059\u3002 code \u306e\u5024\u306f tree.def\u3067\u5b9a\u7fa9\u3002\n * \u6574\u6570\u5b9a\u6570\u306a\u3089INTEGER_CST\u3001\u52a0\u7b97\u306e\u5f0f\u306a\u3089\u3001PLUS_EXPR\u3001if\u6587\u306a\u3089\u3001IF_STMT\u3001\u5909\u6570\u5ba3\u8a00\u306a\u3089\u3001VAR_DECL\u3001\u306a\u3069\u3067\u3059\u3002\n\n* type \u306f\u578b\u306etree_node\u3092\u6307\u3059\u3002\n* chain \u306f\u6b21\u306etree_node\u3092\u6307\u3059\u3002 \n* uid\u306ftree_node\u6bce\u306bunique\u306aid\u3092\u6301\u3064\u3002\n\n\n# tree_int_cst\n* \u6574\u6570\u5b9a\u6570\u306f \u4e0a\u4f4d\u3068\u4e0b\u4f4d\u3092long\u3092\u6301\u3064\u3002\n* \u679d\u306f\u7121\u3044\u3002\n\n```c\nstruct tree_int_cst\n{\n  char shared[sizeof (struct tree_shared)];\n  long int_cst_low;\n  long int_cst_high;\n};\n```\n\n# tree_exp\n* \u5f0f\u306f\u679d\u3068\u3057\u3066\u3001operands\u3092\u6301\u3064\n* \u30aa\u30da\u30e9\u30f3\u30c9\u306e\u6570(\u679d\u306e\u6570)\u306f\u5f0f\u306e\u7a2e\u985e\u306b\u3088\u308a\u7570\u306a\u308b\u3002\n\n```c\nstruct tree_exp\n{\n  char shared[sizeof (struct tree_shared)];\n  union tree_node *operands[1];\n};\n```\n\n# tree_if_stmt\n* if\u6587\u306f\u679d\u3068\u3057\u3066\u3001\u6761\u4ef6\u3001then\u90e8\u5206\u3001else\u90e8\u5206\u306e\uff13\u3064\u3092\u6301\u3064\u3002\n* stmt\u306f\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u884c\u6570\u306e\u60c5\u5831\u3092\u6301\u3064\u3002\n\n```c\nstruct tree_if_stmt\n{\n  char shared[sizeof (struct tree_shared)];\n  char *filename;\n  int linenum;\n  union tree_node *cond, *thenpart, *elsepart;\n};\n```\n\n# tree_node\u306esize\n* tree_node\u306e\u30b5\u30a4\u30ba\u306fcode\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u3002make_node()\u3092\u898b\u308b\u3068\u5206\u304b\u308b\u3002\n* type \u304c d or t \u306a\u3089\u56fa\u5b9a\u9577\n* \u305d\u308c\u4ee5\u5916\u306a\u3089 tree.def\u3092\u4f7f\u3063\u3066\u5b9a\u7fa9\u3059\u308btree_code_length[]\u306e\u5024\u5206\u3092\u8ffd\u52a0\u3057\u3066\u78ba\u4fdd\u3059\u308b\u3002\n\n```c\n  switch (type)\n    {\n    case 'd':  /* A decl node */\n      length = sizeof (struct tree_decl);\n      break;\n\n    case 't':  /* a type node */\n      length = sizeof (struct tree_type);\n      break;\n\n    case 's':  /* a stmt node */\n      length = sizeof (struct tree_shared)\n        + 2 * sizeof (int)\n          + tree_code_length[(int) code] * sizeof (char *);\n      break;\n\n    default:   /* an expression or constant.  */\n      length = sizeof (struct tree_shared)\n        + tree_code_length[(int) code] * sizeof (char *);\n    }\n```\n\n\n\n# \u53c2\u8003\n* w_o \u3055\u3093\u306e\u65e5\u8a18 \n * http://int.main.jp/log/03_12.html\n * http://web.archive.org/web/20040725032559/http://morihyphen.hp.infoseek.co.jp/log/03_12.html\n* http://ja.gcc.wikia.com/wiki/Enum_tree_code\n", "tags": ["C\u8a00\u8a9e", "GCC", "\u30c7\u30fc\u30bf\u69cb\u9020"]}