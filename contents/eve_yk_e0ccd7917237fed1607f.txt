{"context": " More than 1 year has passed since last update.\u306f\u3058\u3081\u307e\u3057\u3066\u3002\nLiaro\u3068\u3044\u3046\u30b9\u30bf\u30fc\u30c8\u30a2\u30c3\u30d7\u3067\u30a8\u30f3\u30b8\u30cb\u30a2\u30a4\u30f3\u30bf\u30fc\u30f3\u3092\u3057\u3066\u3044\u308b@eve_yk\u3068\u7533\u3057\u307e\u3059\u3002\n\u3053\u306e\u5ea6\u306fLiaro\u304c\u65e5\u3005\u5229\u7528\u3057\u3066\u3044\u308b\u6280\u8853\u306b\u3064\u3044\u3066\u3001\u7406\u89e3\u3092\u3088\u308a\u6df1\u3081\u308b\u3053\u3068\u3001\u7a4d\u6975\u7684\u306b\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u3092\u884c\u3044\u77e5\u898b\u3092\u5171\u6709\u3057\u3066\u3044\u304f\u3053\u3068\u3001\u3042\u308f\u3088\u304f\u3070\u305d\u306e\u9053\u306e\u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb\u306a\u65b9\u304b\u3089\u92ed\u3044\u30de\u30b5\u30ab\u30ea\u3092\u6295\u3052\u3066\u3082\u3089\u3046\u3053\u3068\u306a\u3069\u3001\u69d8\u3005\u306a\u76ee\u7684\u306e\u305f\u3081\u306b\u300c\u30d6\u30ed\u30b0\u3092\u66f8\u3044\u3066\u3044\u3053\u3046\u305c\uff01\u300d\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u66f8\u3051\u308b\u5185\u5bb9\u306f\u591a\u304f\u306f\u7121\u3044\u3067\u3059\u304c\u3001\u7cbe\u4e00\u676f\u66f8\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u3069\u3046\u305e\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3044\u305f\u3057\u307e\u3059\u301c\uff01\n\u4eca\u56de\u306f\u3001Convelutional Neural Network(CNN)\u3092\u7528\u3044\u3066\u9854\u753b\u50cf\u8b58\u5225\u5668\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u76ee\u7684\n\u9854\u5206\u985e\u3068\u3044\u3046\u30bf\u30b9\u30af\u306fFacebook\u306eDeepFace\u3084Google\u306eFaceNet\u306a\u3069\u304c\u4eba\u9593\u4e26\u307f(\u305d\u308c\u4ee5\u4e0a\uff1f)\u306e\u7cbe\u5ea6\u3092\u9054\u6210\u3057\u3066\u3044\u307e\u3059\u3002\n\u306a\u305c\u9854\u753b\u50cf\u306e\u8b58\u5225\u306b\u30c1\u30e3\u30ec\u30f3\u30b8\u3059\u308b\u306e\u304b\uff1f\n\u305d\u308c\u3092\u8aac\u660e\u3059\u308b\u305f\u3081\u306b\u3001\u6b21\u306e\u753b\u50cf\u3092\u307f\u3066\u3044\u305f\u3060\u304d\u305f\u3044\u3067\u3059\u3002\n\u306f\u3058\u3081\u306b\u3001\u79c1\u304cfacebook\u306b\u767b\u9332\u3057\u3066\u3044\u308b\u30a2\u30a4\u30b3\u30f3\u3067\u3059\u3002\n\n\u3044\u3044\u7b11\u9854\u3067\u3057\u3087\u3046\u3002\n\u6b21\u306b\u3001\u3053\u3061\u3089\u306f2015\u5e74\u306eM-1\u30b0\u30e9\u30f3\u30d7\u30ea\u306e\u30d5\u30a1\u30a4\u30ca\u30ea\u30b9\u30c8\u3001\u300c\u30b9\u30fc\u30d1\u30fc\u30de\u30e9\u30c9\u30fc\u30ca\u300d\u306e\u7530\u4e2d\u4e00\u5f66\u3055\u3093\u3067\u3059\u3002\n\n\uff01\uff1f\uff01\uff1f\uff01\uff1f\n\u8d85\u305d\u3063\u304f\u308a\uff01\uff01\uff01\n\u4eca\u307e\u3067\u8ab0\u304b\u306b\u4f3c\u3066\u3044\u308b\u3068\u8a00\u308f\u308c\u305f\u3053\u3068\u304c\u306a\u304b\u3063\u305f\u79c1\u306b\u3068\u3063\u3066\u975e\u5e38\u306b\u885d\u6483\u7684\u306a\u7d4c\u9a13\u3067\u3057\u305f\u3002\u3053\u308a\u3083\u3042\u3082\u3046\u81ea\u5206\u3068\u7530\u4e2d\u3055\u3093\u3092\u898b\u5206\u3051\u308b\u8b58\u5225\u5668\u3092\u4f5c\u308b\u3057\u304b\u7121\u3044\u3060\u308d\u3046\u3068\u3002\n\u304f\u3060\u3089\u306a\u3044\u7406\u7531\u3067\u3059\u3002\n\u203b\u4eca\u56de\u306f\u4e8c\u5024\u5206\u985e\u3067\u3042\u308a\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3082\u5927\u304d\u304f\u306a\u3044\u306e\u3067\u3064\u307e\u3089\u306a\u3044\u30bf\u30b9\u30af\u3067\u3059\u304c\u3001\u3054\u5bb9\u8d66\u304f\u3060\u3055\u3044\u3002\n\n0. \u958b\u767a\u74b0\u5883\u3092\u69cb\u7bc9\u3059\u308b\n\u4eca\u56de\u306f\u4ee5\u4e0b\u306e\u74b0\u5883\u3067\u30c6\u30b9\u30c8\u3057\u307e\u3057\u305f\u3002\n\npython 2.7.9\nnumpy 1.10\nopencv 2.4\nchainer 1.6.0\nProgressBar2 3.6.0\n\n\u74b0\u5883\u69cb\u7bc9\u306b\u306fpyenv\u3092\u4f7f\u3046\u3068\u30e9\u30af\u30c1\u30f3\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u30ea\u30f3\u30af\u306a\u3069\u3092\u53c2\u8003\u306b\u3059\u308b\u3068\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nPython\u3067\u6a5f\u68b0\u5b66\u7fd2\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u958b\u767a\u74b0\u5883\u3092\u69cb\u7bc9\u3059\u308b\nnumpy, opencv\u306fanaconda\u3067\u3001chainer\u3068ProgressBar2\u306fpip\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002\n\n1. \u5b66\u7fd2\u306b\u4f7f\u7528\u3059\u308b\u753b\u50cf\u3092\u53ce\u96c6\u3059\u308b\u3002\n\u6b21\u306b\u5b66\u7fd2\u306b\u4f7f\u7528\u3059\u308b\u753b\u50cf\u3092\u53ce\u96c6\u3057\u307e\u3059\u3002\n\u6a5f\u68b0\u5b66\u7fd2\u3092\u3084\u308b\u4e0a\u3067\u3001\u4f7f\u3046\u30c7\u30fc\u30bf\u3092\u96c6\u3081\u308b\u3053\u3068\u304c\u4e00\u756a\u5927\u5909\u3067\u3042\u308b\u3068\u8a00\u3063\u3066\u3082\u904e\u8a00\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u4eca\u56de\u306e\u5834\u5408\u306f \u76ee\u7684\u306b\u5bfe\u3059\u308b\u9700\u8981\u304c\u7121\u3055\u3059\u304e\u308b\u305f\u3081 \u7279\u306b\u5927\u5909\u3067\u3059\u3002\n\u9811\u5f35\u3063\u3066\u624b\u52d5\u3067\u96c6\u3081\u307e\u3059\u3002\n\u3072\u3068\u307e\u305a\u81ea\u5206\u306e\u753b\u50cf\u304c80\u679a\u3001\u7530\u4e2d\u3055\u3093\u306e\u753b\u50cf\u304c68\u679a\u96c6\u307e\u308a\u307e\u3057\u305f\u3002(\u81ea\u5206\u306e\u30b9\u30de\u30db\u3084PC\u3001facebook\u3092\u6f01\u3063\u3066\u3082\u3053\u308c\u3057\u304b\u96c6\u307e\u3089\u306a\u304b\u3063\u305f\u306e\u306b\u9a5a\u304d)\n\u3053\u306e\u4e2d\u304b\u3089\u305d\u308c\u305e\u308c5\u679a\u305a\u3064\u30c6\u30b9\u30c8\u7528\u753b\u50cf\u3068\u3057\u3066\u907f\u3051\u3066\u304a\u304d\u307e\u3059\u3002\u6b8b\u3063\u305f75,63\u679a\u306e\u753b\u50cf\u3092\u8a13\u7df4\u7528\u753b\u50cf\u3068\u3057\u3066\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u679a\u6570\u304c\u5c11\u306a\u3059\u304e\u307e\u3059\u304c\u3001\u4eca\u56de\u306f\u304a\u904a\u3073\u306a\u306e\u3067\u3053\u306e\u304f\u3089\u3044\u306b\u3057\u307e\u3057\u3087\u3046\u3002\n\n2. \u753b\u50cf\u306e\u524d\u51e6\u7406\u3092\u884c\u3046\n\u9854\u5206\u985e\u3092\u884c\u3046\u305f\u3081\u306b\u3001\u5c11\u3057\u3060\u3051\u753b\u50cf\u306e\u52a0\u5de5\u3092\u884c\u3044\u307e\u3059\u3002\u6b21\u306e4\u30b9\u30c6\u30c3\u30d7\u3067\u3059\u3002\n\n\u753b\u50cf\u306e\u9854\u90e8\u5206\u306e\u5207\u308a\u53d6\u308a\n\u30ea\u30b5\u30a4\u30ba\n\u30c7\u30fc\u30bf\u62e1\u5f35(\u53cd\u8ee2\u3001\u56de\u8ee2)\nnp.ndarray\u5f62\u5f0f\u306b\u5909\u63db\n\n\u306f\u3058\u3081\u306b\u753b\u50cf\u5185\u306e\u9854\u90e8\u5206\u306e\u9818\u57df\u3092\u5207\u308a\u53d6\u308a\u307e\u3059\u3002\u3053\u308c\u306b\u306fOpenCV\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308bHaar-Like\u7279\u5fb4\u91cf\u3092\u7528\u3044\u305f\u30ab\u30b9\u30b1\u30fc\u30c9\u578b\u5206\u985e\u5668\u3092\u4f7f\u3044\u307e\u3059\u3002\u5206\u985e\u5668\u306e\u5b66\u7fd2\u306a\u3069\u306f\u4eca\u56de\u306f\u3057\u307e\u305b\u3093\u3002\n\u6b21\u306b\u753b\u50cf\u306e\u30b5\u30a4\u30ba\u309264*64px\u306b\u30ea\u30b5\u30a4\u30ba\u3057\u307e\u3059\u3002chainer\u306b\u306f\u5165\u529b\u753b\u50cf\u306e\u30b5\u30a4\u30ba\u306b\u95a2\u308f\u3089\u305a\u4efb\u610f\u306e\u56fa\u5b9a\u9577\u30b5\u30a4\u30ba\u306e\u7279\u5fb4\u91cf\u3092\u8a08\u7b97\u3067\u304d\u308bSpatial Pyramid Pooling\u3082\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u4eca\u56de\u306f\u4f7f\u3063\u3066\u3044\u307e\u305b\u3093\u3002\n\u305d\u306e\u5f8c\u306b\u306f\u30c7\u30fc\u30bf\u306e\u62e1\u5f35\u3092\u884c\u3044\u307e\u3059\u3002\u753b\u50cf\u5206\u985e\u3092\u884c\u3046\u3068\u304d\u306f\u3001\u5143\u753b\u50cf\u306b\u5bfe\u3057\u3066\u53cd\u8ee2\u3001\u5e73\u884c\u79fb\u52d5\u3001\u56de\u8ee2\u3001\u8272\u8abf\u5909\u5316\u3001\u5e73\u6ed1\u5316\u306a\u3069\u306e\u51e6\u7406\u3067\u52a0\u5de5\u3057\u3001\u30c7\u30fc\u30bf\u91cf\u3092\u6c34\u5897\u3057\u3059\u308b\u3053\u3068\u3092\u3057\u307e\u3059\u3002\n\u4eca\u56de\u306f\u5143\u753b\u50cf\u3092\u53cd\u8ee2\u3001\u56de\u8ee2\u3055\u305b\u3066\u30c7\u30fc\u30bf\u91cf\u3092\u5897\u3084\u3057\u3066\u3044\u307e\u3059\u3002\n\u4e0a\u8a18\u306e\u51e6\u7406\u3092\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\nface_data_augmentation.py\n# coding:utf-8\n\n\"\"\"\n    \u6307\u5b9a\u30d5\u30a9\u30eb\u30c0\u5185\u306e\u753b\u50cf\u306b\u5b58\u5728\u3059\u308b\u9854\u9818\u57df\u3092\u62bd\u51fa\n    \u753b\u50cf\u306e\u53cd\u8ee2\u3068\u56de\u8ee2\u3055\u305b\u3066\u62e1\u5f35\n\"\"\"\n\nimport os\nimport glob\nimport argparse\nimport cv2\nimport numpy as np\n\nCASCADE_PATH = \"/path/to/haarcascade/haarcascade_frontalface_alt.xml\"\ncascade = cv2.CascadeClassifier(CASCADE_PATH)\n\ndef detectFace(image):\n    \"\"\"\n        \u9854\u753b\u50cf\u90e8\u5206\u3092\u62bd\u51fa\n    \"\"\"\n    image_gray = cv2.cvtColor(image, cv2.cv.CV_BGR2GRAY)\n    facerect = cascade.detectMultiScale(image_gray, scaleFactor=1.1, minNeighbors=3, minSize=(50, 50))\n\n    return facerect\n\ndef resize(image):\n    \"\"\"\n        \u753b\u50cf\u306e\u30ea\u30b5\u30a4\u30ba\n    \"\"\"\n    return cv2.resize(image, (64,64))\n\ndef rotate(image, r):\n    \"\"\"\n        \u753b\u50cf\u306e\u4e2d\u5fc3\u3092\u8ef8\u306b\u3092r\u5ea6\u56de\u8ee2\n    \"\"\"\n    h, w, ch = image.shape # \u753b\u50cf\u306e\u914d\u5217\u30b5\u30a4\u30ba\n    M = cv2.getRotationMatrix2D((w/2, h/2), r, 1) # \u753b\u50cf\u3092\u4e2d\u5fc3\u306b\u56de\u8ee2\u3055\u305b\u308b\u305f\u3081\u306e\u56de\u8ee2\u884c\u5217\n    rotated = cv2.warpAffine(image, M, (w, h))\n\n    return rotated\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description='clip face-image from imagefile and do data argumentation.')\n    parser.add_argument('-p', required=True, help='set files path.', metavar='imagefile_path')\n    args = parser.parse_args()\n\n    # \u51fa\u529b\u7528\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u306a\u3044\u5834\u5408\u306f\u4f5c\u6210\n    result_dir = args.p + \"_result\"\n    if not os.path.exists(result_dir):\n        os.makedirs(result_dir)\n\n    face_cnt = 0\n\n    # jpg\u30d5\u30a1\u30a4\u30eb\u53d6\u5f97\n    files = glob.glob(args.p+\"\\*.jpg\")\n    print args.p+\"\\*.jpg\"\n\n    for file_name in files:\n        # \u753b\u50cf\u306e\u30ed\u30fc\u30c9\n        image = cv2.imread(file_name)\n        if image is None:\n            # \u8aad\u307f\u8fbc\u307f\u5931\u6557\n            continue\n\n        # -12~12\u5ea6\u306e\u7bc4\u56f2\u30673\u5ea6\u305a\u3064\u56de\u8ee2\n        for r in xrange(-12,13,4):\n            image = rotate(image, r)\n\n            # \u9854\u753b\u50cf\u62bd\u51fa\n            facerect_list = detectFace(image)\n            if len(facerect_list) == 0: continue\n\n            for facerect in facerect_list:\n                # \u9854\u753b\u50cf\u90e8\u5206\u306e\u5207\u308a\u629c\u304d\n                croped = image[facerect[1]:facerect[1]+facerect[3],facerect[0]:facerect[0]+facerect[2]]\n\n                # \u51fa\u529b\n                cv2.imwrite(result_dir+\"/\"+str(face_cnt)+\".jpg\", resize(croped))\n                face_cnt += 1\n\n                # \u53cd\u8ee2\u753b\u50cf\u3082\u51fa\u529b\n                fliped = np.fliplr(croped)\n                cv2.imwrite(result_dir+\"/\"+str(face_cnt)+\".jpg\", resize(fliped))\n                face_cnt += 1\n\n\n\u3053\u306e\u30b3\u30fc\u30c9\u3067\u51fa\u529b\u3055\u308c\u308b\u753b\u50cf\u7fa4\u306b\u306f\u3001\u5199\u771f\u306b\u5199\u3063\u3066\u3044\u308b\u4ed6\u306e\u4eba\u306e\u9854\u753b\u50cf\u3084\u8aa4\u691c\u51fa\u3055\u308c\u305f\u753b\u50cf\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u307e\u305f\u307e\u305f\u624b\u52d5\u3067\u4e0d\u8981\u306a\u753b\u50cf\u3092\u3072\u3068\u3064\u305a\u3064\u53d6\u308a\u9664\u3044\u3066\u3044\u304d\u307e\u3059\u3002\n\u51fa\u6765\u4e0a\u304c\u3063\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u3053\u3061\u3089\u3067\u3059\u3002\n\n\u2026\u3002\n\u30ad\u30e2\u30c1\u30ef\u30eb\u30a4\u3067\u3059\u306d\u3002\n\u8a13\u7df4\u7528\u753b\u50cf\u3068\u3057\u3066\u3001\u81ea\u5206\u306e\u753b\u50cf\u304c393\u679a\u3001\u7530\u4e2d\u3055\u3093\u306e\u753b\u50cf\u304c187\u679a\u3067\u304d\u307e\u3057\u305f\u3002\n\u6700\u5f8c\u306b\u3001chainer\u3067\u6271\u3046\u305f\u3081\u306bnp.ndarray\u306e\u5f62\u5f0f\u306b\u5909\u63db\u3057\u305f\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\nchainer\u3067\u7528\u3044\u308bVariable\u30af\u30e9\u30b9\u3078\u306fnp.ndarray\u578b\u306e\u30c7\u30fc\u30bf\u304c\u5165\u529b\u3055\u308c\u308b\u3068\u60f3\u5b9a\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u4e8b\u524d\u306b\u305d\u306e\u5f62\u5f0f\u306b\u5909\u63db\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u3053\u306e\u6642\u3001Python\u306eOpenCV\u3067\u6271\u3046\u753b\u50cf\u306e\u5f62\u5f0f\u3068chainer\u306eCNN\u3067\u6271\u3046\u753b\u50cf\u306e\u5f62\u5f0f\u304c\u7570\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\nOpenCV => (height, width, channel)\nchainer  => (channel, height, width)\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u5909\u63db\u3057\u307e\u3059\u3002\n\nmake_dataset.py\n# coding:utf-8\n\nimport os\nimport sys\nimport argparse\nimport glob\nimport cv2\nimport numpy as np\n\n\"\"\"\nCNN\u3067\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\u3059\u308b\n\u753b\u50cf\u3092CNN\u306e\u5165\u529b\u5f62\u5f0f\u306b\u5909\u63db\u3059\u308b\n\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5f62\u5f0f\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3059\u308b\n    - dataset\n        - train\n            - [class_name_1]\n                - hogehoge.jpg\n                - foofoo.jpg\n                - ...\n            - [class_name_2]\n                - hogehoge.jpg\n                - ...\n            - ...\n        - test\n            - [class_name_1]\n                - hogehoge.jpg\n                - ...\n            - ...\n\n\"\"\"\n\ndef transpose_opencv2chainer(x):\n    \"\"\"\n        opencv\u306enpy\u5f62\u5f0f\u304b\u3089chainer\u306enpy\u5f62\u5f0f\u306b\u5909\u63db\n        opencv  => (height, width, channel)\n        chainer => (channel, height, width)\n    \"\"\"\n    return x.transpose(2,0,1)\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description='CNN\u7528\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u4f5c\u6210')\n    parser.add_argument('--input_path',   required=True, type=str)\n    parser.add_argument('--output_path',  required=True, type=str)\n    args = parser.parse_args()\n\n    # jpg\u30d5\u30a1\u30a4\u30eb\u4e00\u89a7\u53d6\u5f97\n    train_files = glob.glob(args.input_path+\"/train/*/*.jpg\")\n    test_files  = glob.glob(args.input_path+\"/test/*/*.jpg\")\n\n    # \u51fa\u529b\u7528\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u306a\u3044\u5834\u5408\u306f\u4f5c\u6210\n    if not os.path.exists(args.output_path):\n        os.makedirs(args.output_path)\n\n    train_data  = []\n    train_label = []\n    test_data   = []\n    test_label  = []\n    label_dict  = {}\n\n    # \u8a13\u7df4\u30c7\u30fc\u30bf\u4f5c\u6210\n    for file_name in train_files:\n        image = cv2.imread(file_name)\n        if image is None:\n            # \u8aad\u307f\u8fbc\u307f\u5931\u6557\n            continue\n\n        # \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u304b\u3089\u30af\u30e9\u30b9\u540d\u3092\u53d6\u5f97\n        class_name = file_name.replace(\"\\\\\", \"/\").split(\"/\")[-2]\n\n        # chainer\u7528\u5f62\u5f0f\u306b\u5909\u63db\n        image = transpose_opencv2chainer(image)\n        train_data.append(image)\n        train_label.append(label_dict.setdefault(class_name, len(label_dict.keys())))\n\n    # \u30c7\u30fc\u30bf\u4f5c\u6210\u30fb\u4fdd\u5b58\n    train_data  = np.array(train_data)\n    train_label = np.array(train_label)\n    np.save(args.output_path+\"/train_data.npy\" , train_data)\n    np.save(args.output_path+\"/train_label.npy\", train_label)\n\n    for file_name in test_files:\n        image = cv2.imread(file_name)\n        if image is None:\n            # \u8aad\u307f\u8fbc\u307f\u5931\u6557\n            continue\n\n        # \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u304b\u3089\u30af\u30e9\u30b9\u540d\u3092\u53d6\u5f97\n        class_name = file_name.replace(\"\\\\\", \"/\").split(\"/\")[-2]\n\n        # chainer\u7528\u5f62\u5f0f\u306b\u5909\u63db\n        image = transpose_opencv2chainer(image)\n        test_data.append(image)\n        test_label.append(label_dict.setdefault(class_name, len(label_dict.keys())))\n\n    # \u30c7\u30fc\u30bf\u4f5c\u6210\u30fb\u4fdd\u5b58\n    test_data   = np.array(test_data)\n    test_label  = np.array(test_label)\n    np.save(args.output_path+\"/test_data.npy\"  , test_data)\n    np.save(args.output_path+\"/test_label.npy\" , test_label)\n\n\n\n\u5c11\u3057\u77ed\u3044\u3067\u3059\u304c\u4eca\u56de\u306f\u3053\u3053\u307e\u3067\u306b\u3057\u307e\u3059\u3002\n\u6b21\u56de\u306f\u8b58\u5225\u5668\u306e\u30e2\u30c7\u30eb\u3092\u8a18\u8ff0\u3057\u3001\u5b9f\u969b\u306b\u9854\u5224\u5225\u306e\u5b66\u7fd2\u30fb\u8a55\u4fa1\u3092\u884c\u3044\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u304a\u697d\u3057\u307f\u306b\uff01\n\n\u53c2\u8003\nPython\u3067\u6a5f\u68b0\u5b66\u7fd2\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u958b\u767a\u74b0\u5883\u3092\u69cb\u7bc9\u3059\u308b - qiita\nhttps://github.com/mitmul/chainer-cifar10\nChainer\u3067CIFAR-10\u306e\u5206\u985e\u3092\u884c\u3063\u3066\u307f\u308b - \u306e\u3093\u3073\u308a\u3057\u3066\u3044\u308b\u30a8\u30f3\u30b8\u30cb\u30a2\u306e\u65e5\u8a18\n\u5409\u672c\u8208\u696d\u682a\u5f0f\u4f1a\u793e \u82b8\u4eba\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb | \u30b9\u30fc\u30d1\u30fc\u30de\u30e9\u30c9\u30fc\u30ca\n\u306f\u3058\u3081\u307e\u3057\u3066\u3002\n[Liaro](http://liaro.me/company)\u3068\u3044\u3046\u30b9\u30bf\u30fc\u30c8\u30a2\u30c3\u30d7\u3067\u30a8\u30f3\u30b8\u30cb\u30a2\u30a4\u30f3\u30bf\u30fc\u30f3\u3092\u3057\u3066\u3044\u308b@eve_yk\u3068\u7533\u3057\u307e\u3059\u3002\n\u3053\u306e\u5ea6\u306fLiaro\u304c\u65e5\u3005\u5229\u7528\u3057\u3066\u3044\u308b\u6280\u8853\u306b\u3064\u3044\u3066\u3001\u7406\u89e3\u3092\u3088\u308a\u6df1\u3081\u308b\u3053\u3068\u3001\u7a4d\u6975\u7684\u306b\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u3092\u884c\u3044\u77e5\u898b\u3092\u5171\u6709\u3057\u3066\u3044\u304f\u3053\u3068\u3001\u3042\u308f\u3088\u304f\u3070\u305d\u306e\u9053\u306e\u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb\u306a\u65b9\u304b\u3089\u92ed\u3044\u30de\u30b5\u30ab\u30ea\u3092\u6295\u3052\u3066\u3082\u3089\u3046\u3053\u3068\u306a\u3069\u3001\u69d8\u3005\u306a\u76ee\u7684\u306e\u305f\u3081\u306b\u300c\u30d6\u30ed\u30b0\u3092\u66f8\u3044\u3066\u3044\u3053\u3046\u305c\uff01\u300d\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u66f8\u3051\u308b\u5185\u5bb9\u306f\u591a\u304f\u306f\u7121\u3044\u3067\u3059\u304c\u3001\u7cbe\u4e00\u676f\u66f8\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u3069\u3046\u305e\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3044\u305f\u3057\u307e\u3059\u301c\uff01\n\n\u4eca\u56de\u306f\u3001Convelutional Neural Network(CNN)\u3092\u7528\u3044\u3066\u9854\u753b\u50cf\u8b58\u5225\u5668\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3059\u3002\n\n# \u76ee\u7684\n\u9854\u5206\u985e\u3068\u3044\u3046\u30bf\u30b9\u30af\u306fFacebook\u306e[DeepFace](http://www.cs.tau.ac.il/~wolf/papers/deepface.pdf)\u3084Google\u306e[FaceNet](http://arxiv.org/abs/1503.03832)\u306a\u3069\u304c\u4eba\u9593\u4e26\u307f(\u305d\u308c\u4ee5\u4e0a\uff1f)\u306e\u7cbe\u5ea6\u3092\u9054\u6210\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u306a\u305c\u9854\u753b\u50cf\u306e\u8b58\u5225\u306b\u30c1\u30e3\u30ec\u30f3\u30b8\u3059\u308b\u306e\u304b\uff1f\n\u305d\u308c\u3092\u8aac\u660e\u3059\u308b\u305f\u3081\u306b\u3001\u6b21\u306e\u753b\u50cf\u3092\u307f\u3066\u3044\u305f\u3060\u304d\u305f\u3044\u3067\u3059\u3002\n\n\u306f\u3058\u3081\u306b\u3001\u79c1\u304cfacebook\u306b\u767b\u9332\u3057\u3066\u3044\u308b\u30a2\u30a4\u30b3\u30f3\u3067\u3059\u3002\n\n![537059_256924114444730_821185260_n.jpg](https://qiita-image-store.s3.amazonaws.com/0/110468/1f8677a9-422c-79af-c249-d36166712a2a.jpeg)\n\n\u3044\u3044\u7b11\u9854\u3067\u3057\u3087\u3046\u3002\n\u6b21\u306b\u3001\u3053\u3061\u3089\u306f2015\u5e74\u306eM-1\u30b0\u30e9\u30f3\u30d7\u30ea\u306e\u30d5\u30a1\u30a4\u30ca\u30ea\u30b9\u30c8\u3001\u300c\u30b9\u30fc\u30d1\u30fc\u30de\u30e9\u30c9\u30fc\u30ca\u300d\u306e\u7530\u4e2d\u4e00\u5f66\u3055\u3093\u3067\u3059\u3002\n\n![tanaka.jpg](https://qiita-image-store.s3.amazonaws.com/0/110468/1fbec5d1-bb6c-4aec-1e1d-e1b4910bbdd0.jpeg)\n\n**\uff01\uff1f\uff01\uff1f\uff01\uff1f**\n\n\u8d85\u305d\u3063\u304f\u308a\uff01\uff01\uff01\n\u4eca\u307e\u3067\u8ab0\u304b\u306b\u4f3c\u3066\u3044\u308b\u3068\u8a00\u308f\u308c\u305f\u3053\u3068\u304c\u306a\u304b\u3063\u305f\u79c1\u306b\u3068\u3063\u3066\u975e\u5e38\u306b\u885d\u6483\u7684\u306a\u7d4c\u9a13\u3067\u3057\u305f\u3002\u3053\u308a\u3083\u3042\u3082\u3046\u81ea\u5206\u3068\u7530\u4e2d\u3055\u3093\u3092\u898b\u5206\u3051\u308b\u8b58\u5225\u5668\u3092\u4f5c\u308b\u3057\u304b\u7121\u3044\u3060\u308d\u3046\u3068\u3002\n\u304f\u3060\u3089\u306a\u3044\u7406\u7531\u3067\u3059\u3002\n\u203b\u4eca\u56de\u306f\u4e8c\u5024\u5206\u985e\u3067\u3042\u308a\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3082\u5927\u304d\u304f\u306a\u3044\u306e\u3067\u3064\u307e\u3089\u306a\u3044\u30bf\u30b9\u30af\u3067\u3059\u304c\u3001\u3054\u5bb9\u8d66\u304f\u3060\u3055\u3044\u3002\n\n## 0. \u958b\u767a\u74b0\u5883\u3092\u69cb\u7bc9\u3059\u308b\n\u4eca\u56de\u306f\u4ee5\u4e0b\u306e\u74b0\u5883\u3067\u30c6\u30b9\u30c8\u3057\u307e\u3057\u305f\u3002\n\n* python 2.7.9\n* numpy 1.10\n* opencv 2.4\n* chainer 1.6.0\n* ProgressBar2 3.6.0\n \n\u74b0\u5883\u69cb\u7bc9\u306b\u306fpyenv\u3092\u4f7f\u3046\u3068\u30e9\u30af\u30c1\u30f3\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u30ea\u30f3\u30af\u306a\u3069\u3092\u53c2\u8003\u306b\u3059\u308b\u3068\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n \n[Python\u3067\u6a5f\u68b0\u5b66\u7fd2\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u958b\u767a\u74b0\u5883\u3092\u69cb\u7bc9\u3059\u308b](http://qiita.com/icoxfog417/items/950b8af9100b64c0d8f9)\n \nnumpy, opencv\u306fanaconda\u3067\u3001chainer\u3068ProgressBar2\u306fpip\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002\n\n\n## 1. \u5b66\u7fd2\u306b\u4f7f\u7528\u3059\u308b\u753b\u50cf\u3092\u53ce\u96c6\u3059\u308b\u3002\n\u6b21\u306b\u5b66\u7fd2\u306b\u4f7f\u7528\u3059\u308b\u753b\u50cf\u3092\u53ce\u96c6\u3057\u307e\u3059\u3002\n\u6a5f\u68b0\u5b66\u7fd2\u3092\u3084\u308b\u4e0a\u3067\u3001\u4f7f\u3046\u30c7\u30fc\u30bf\u3092\u96c6\u3081\u308b\u3053\u3068\u304c\u4e00\u756a\u5927\u5909\u3067\u3042\u308b\u3068\u8a00\u3063\u3066\u3082\u904e\u8a00\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u4eca\u56de\u306e\u5834\u5408\u306f **\u76ee\u7684\u306b\u5bfe\u3059\u308b\u9700\u8981\u304c\u7121\u3055\u3059\u304e\u308b\u305f\u3081** \u7279\u306b\u5927\u5909\u3067\u3059\u3002\n\u9811\u5f35\u3063\u3066\u624b\u52d5\u3067\u96c6\u3081\u307e\u3059\u3002\n\n\u3072\u3068\u307e\u305a\u81ea\u5206\u306e\u753b\u50cf\u304c80\u679a\u3001\u7530\u4e2d\u3055\u3093\u306e\u753b\u50cf\u304c68\u679a\u96c6\u307e\u308a\u307e\u3057\u305f\u3002(\u81ea\u5206\u306e\u30b9\u30de\u30db\u3084PC\u3001facebook\u3092\u6f01\u3063\u3066\u3082\u3053\u308c\u3057\u304b\u96c6\u307e\u3089\u306a\u304b\u3063\u305f\u306e\u306b\u9a5a\u304d)\n\u3053\u306e\u4e2d\u304b\u3089\u305d\u308c\u305e\u308c5\u679a\u305a\u3064\u30c6\u30b9\u30c8\u7528\u753b\u50cf\u3068\u3057\u3066\u907f\u3051\u3066\u304a\u304d\u307e\u3059\u3002\u6b8b\u3063\u305f75,63\u679a\u306e\u753b\u50cf\u3092\u8a13\u7df4\u7528\u753b\u50cf\u3068\u3057\u3066\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u679a\u6570\u304c\u5c11\u306a\u3059\u304e\u307e\u3059\u304c\u3001\u4eca\u56de\u306f\u304a\u904a\u3073\u306a\u306e\u3067\u3053\u306e\u304f\u3089\u3044\u306b\u3057\u307e\u3057\u3087\u3046\u3002\n\n\n## 2. \u753b\u50cf\u306e\u524d\u51e6\u7406\u3092\u884c\u3046\n\u9854\u5206\u985e\u3092\u884c\u3046\u305f\u3081\u306b\u3001\u5c11\u3057\u3060\u3051\u753b\u50cf\u306e\u52a0\u5de5\u3092\u884c\u3044\u307e\u3059\u3002\u6b21\u306e4\u30b9\u30c6\u30c3\u30d7\u3067\u3059\u3002\n\n1. \u753b\u50cf\u306e\u9854\u90e8\u5206\u306e\u5207\u308a\u53d6\u308a\n2. \u30ea\u30b5\u30a4\u30ba\n3. \u30c7\u30fc\u30bf\u62e1\u5f35(\u53cd\u8ee2\u3001\u56de\u8ee2)\n4. np.ndarray\u5f62\u5f0f\u306b\u5909\u63db\n\n\u306f\u3058\u3081\u306b\u753b\u50cf\u5185\u306e\u9854\u90e8\u5206\u306e\u9818\u57df\u3092\u5207\u308a\u53d6\u308a\u307e\u3059\u3002\u3053\u308c\u306b\u306fOpenCV\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308bHaar-Like\u7279\u5fb4\u91cf\u3092\u7528\u3044\u305f\u30ab\u30b9\u30b1\u30fc\u30c9\u578b\u5206\u985e\u5668\u3092\u4f7f\u3044\u307e\u3059\u3002\u5206\u985e\u5668\u306e\u5b66\u7fd2\u306a\u3069\u306f\u4eca\u56de\u306f\u3057\u307e\u305b\u3093\u3002\n\u6b21\u306b\u753b\u50cf\u306e\u30b5\u30a4\u30ba\u309264*64px\u306b\u30ea\u30b5\u30a4\u30ba\u3057\u307e\u3059\u3002chainer\u306b\u306f\u5165\u529b\u753b\u50cf\u306e\u30b5\u30a4\u30ba\u306b\u95a2\u308f\u3089\u305a\u4efb\u610f\u306e\u56fa\u5b9a\u9577\u30b5\u30a4\u30ba\u306e\u7279\u5fb4\u91cf\u3092\u8a08\u7b97\u3067\u304d\u308b[Spatial Pyramid Pooling](http://docs.chainer.org/en/stable/reference/functions.html#chainer.functions.spatial_pyramid_pooling_2d)\u3082\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u4eca\u56de\u306f\u4f7f\u3063\u3066\u3044\u307e\u305b\u3093\u3002\n\u305d\u306e\u5f8c\u306b\u306f\u30c7\u30fc\u30bf\u306e\u62e1\u5f35\u3092\u884c\u3044\u307e\u3059\u3002\u753b\u50cf\u5206\u985e\u3092\u884c\u3046\u3068\u304d\u306f\u3001\u5143\u753b\u50cf\u306b\u5bfe\u3057\u3066\u53cd\u8ee2\u3001\u5e73\u884c\u79fb\u52d5\u3001\u56de\u8ee2\u3001\u8272\u8abf\u5909\u5316\u3001\u5e73\u6ed1\u5316\u306a\u3069\u306e\u51e6\u7406\u3067\u52a0\u5de5\u3057\u3001\u30c7\u30fc\u30bf\u91cf\u3092\u6c34\u5897\u3057\u3059\u308b\u3053\u3068\u3092\u3057\u307e\u3059\u3002\n\u4eca\u56de\u306f\u5143\u753b\u50cf\u3092\u53cd\u8ee2\u3001\u56de\u8ee2\u3055\u305b\u3066\u30c7\u30fc\u30bf\u91cf\u3092\u5897\u3084\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u4e0a\u8a18\u306e\u51e6\u7406\u3092\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\n```py:face_data_augmentation.py\n# coding:utf-8\n\n\"\"\"\n\t\u6307\u5b9a\u30d5\u30a9\u30eb\u30c0\u5185\u306e\u753b\u50cf\u306b\u5b58\u5728\u3059\u308b\u9854\u9818\u57df\u3092\u62bd\u51fa\n\t\u753b\u50cf\u306e\u53cd\u8ee2\u3068\u56de\u8ee2\u3055\u305b\u3066\u62e1\u5f35\n\"\"\"\n\nimport os\nimport glob\nimport argparse\nimport cv2\nimport numpy as np\n\nCASCADE_PATH = \"/path/to/haarcascade/haarcascade_frontalface_alt.xml\"\ncascade = cv2.CascadeClassifier(CASCADE_PATH)\n\ndef detectFace(image):\n\t\"\"\"\n\t\t\u9854\u753b\u50cf\u90e8\u5206\u3092\u62bd\u51fa\n\t\"\"\"\n\timage_gray = cv2.cvtColor(image, cv2.cv.CV_BGR2GRAY)\n\tfacerect = cascade.detectMultiScale(image_gray, scaleFactor=1.1, minNeighbors=3, minSize=(50, 50))\n \n\treturn facerect\n\ndef resize(image):\n\t\"\"\"\n\t\t\u753b\u50cf\u306e\u30ea\u30b5\u30a4\u30ba\n\t\"\"\"\n\treturn cv2.resize(image, (64,64))\n\ndef rotate(image, r):\n\t\"\"\"\n\t\t\u753b\u50cf\u306e\u4e2d\u5fc3\u3092\u8ef8\u306b\u3092r\u5ea6\u56de\u8ee2\n\t\"\"\"\n\th, w, ch = image.shape # \u753b\u50cf\u306e\u914d\u5217\u30b5\u30a4\u30ba\n\tM = cv2.getRotationMatrix2D((w/2, h/2), r, 1) # \u753b\u50cf\u3092\u4e2d\u5fc3\u306b\u56de\u8ee2\u3055\u305b\u308b\u305f\u3081\u306e\u56de\u8ee2\u884c\u5217\n\trotated = cv2.warpAffine(image, M, (w, h))\n\n\treturn rotated\n\nif __name__ == \"__main__\":\n\tparser = argparse.ArgumentParser(description='clip face-image from imagefile and do data argumentation.')\n\tparser.add_argument('-p', required=True, help='set files path.', metavar='imagefile_path')\n\targs = parser.parse_args()\n\n\t# \u51fa\u529b\u7528\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u306a\u3044\u5834\u5408\u306f\u4f5c\u6210\n\tresult_dir = args.p + \"_result\"\n\tif not os.path.exists(result_dir):\n\t\tos.makedirs(result_dir)\n\n\tface_cnt = 0\n\n\t# jpg\u30d5\u30a1\u30a4\u30eb\u53d6\u5f97\n\tfiles = glob.glob(args.p+\"\\*.jpg\")\n\tprint args.p+\"\\*.jpg\"\n\n\tfor file_name in files:\n\t\t# \u753b\u50cf\u306e\u30ed\u30fc\u30c9\n\t\timage = cv2.imread(file_name)\n\t\tif image is None:\n\t\t\t# \u8aad\u307f\u8fbc\u307f\u5931\u6557\n\t\t\tcontinue\n\n\t\t# -12~12\u5ea6\u306e\u7bc4\u56f2\u30673\u5ea6\u305a\u3064\u56de\u8ee2\n\t\tfor r in xrange(-12,13,4):\n\t\t\timage = rotate(image, r)\n\n\t\t\t# \u9854\u753b\u50cf\u62bd\u51fa\n\t\t\tfacerect_list = detectFace(image)\n\t\t\tif len(facerect_list) == 0: continue\n\n\t\t\tfor facerect in facerect_list:\n\t\t\t\t# \u9854\u753b\u50cf\u90e8\u5206\u306e\u5207\u308a\u629c\u304d\n\t\t\t\tcroped = image[facerect[1]:facerect[1]+facerect[3],facerect[0]:facerect[0]+facerect[2]]\n\n\t\t\t\t# \u51fa\u529b\n\t\t\t\tcv2.imwrite(result_dir+\"/\"+str(face_cnt)+\".jpg\", resize(croped))\n\t\t\t\tface_cnt += 1\n\n\t\t\t\t# \u53cd\u8ee2\u753b\u50cf\u3082\u51fa\u529b\n\t\t\t\tfliped = np.fliplr(croped)\n\t\t\t\tcv2.imwrite(result_dir+\"/\"+str(face_cnt)+\".jpg\", resize(fliped))\n\t\t\t\tface_cnt += 1\n```\n\n\u3053\u306e\u30b3\u30fc\u30c9\u3067\u51fa\u529b\u3055\u308c\u308b\u753b\u50cf\u7fa4\u306b\u306f\u3001\u5199\u771f\u306b\u5199\u3063\u3066\u3044\u308b\u4ed6\u306e\u4eba\u306e\u9854\u753b\u50cf\u3084\u8aa4\u691c\u51fa\u3055\u308c\u305f\u753b\u50cf\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u307e\u305f\u307e\u305f\u624b\u52d5\u3067\u4e0d\u8981\u306a\u753b\u50cf\u3092\u3072\u3068\u3064\u305a\u3064\u53d6\u308a\u9664\u3044\u3066\u3044\u304d\u307e\u3059\u3002\n\u51fa\u6765\u4e0a\u304c\u3063\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u3053\u3061\u3089\u3067\u3059\u3002\n\n![dataset.JPG](https://qiita-image-store.s3.amazonaws.com/0/110468/f994b657-b52a-6f3f-5f9c-90784e1c8c9f.jpeg)\n\n\u2026\u3002\n\u30ad\u30e2\u30c1\u30ef\u30eb\u30a4\u3067\u3059\u306d\u3002\n\u8a13\u7df4\u7528\u753b\u50cf\u3068\u3057\u3066\u3001\u81ea\u5206\u306e\u753b\u50cf\u304c393\u679a\u3001\u7530\u4e2d\u3055\u3093\u306e\u753b\u50cf\u304c187\u679a\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u6700\u5f8c\u306b\u3001chainer\u3067\u6271\u3046\u305f\u3081\u306bnp.ndarray\u306e\u5f62\u5f0f\u306b\u5909\u63db\u3057\u305f\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\nchainer\u3067\u7528\u3044\u308bVariable\u30af\u30e9\u30b9\u3078\u306fnp.ndarray\u578b\u306e\u30c7\u30fc\u30bf\u304c\u5165\u529b\u3055\u308c\u308b\u3068\u60f3\u5b9a\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u4e8b\u524d\u306b\u305d\u306e\u5f62\u5f0f\u306b\u5909\u63db\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u3053\u306e\u6642\u3001Python\u306eOpenCV\u3067\u6271\u3046\u753b\u50cf\u306e\u5f62\u5f0f\u3068chainer\u306eCNN\u3067\u6271\u3046\u753b\u50cf\u306e\u5f62\u5f0f\u304c\u7570\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\n\nOpenCV => (height, width, channel)\nchainer  => (channel, height, width)\n\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u5909\u63db\u3057\u307e\u3059\u3002\n\n```py:make_dataset.py\n# coding:utf-8\n\nimport os\nimport sys\nimport argparse\nimport glob\nimport cv2\nimport numpy as np\n\n\"\"\"\nCNN\u3067\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\u3059\u308b\n\u753b\u50cf\u3092CNN\u306e\u5165\u529b\u5f62\u5f0f\u306b\u5909\u63db\u3059\u308b\n\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5f62\u5f0f\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3059\u308b\n\t- dataset\n\t\t- train\n\t\t\t- [class_name_1]\n\t\t\t\t- hogehoge.jpg\n\t\t\t\t- foofoo.jpg\n\t\t\t\t- ...\n\t\t\t- [class_name_2]\n\t\t\t\t- hogehoge.jpg\n\t\t\t\t- ...\n\t\t\t- ...\n\t\t- test\n\t\t\t- [class_name_1]\n\t\t\t\t- hogehoge.jpg\n\t\t\t\t- ...\n\t\t\t- ...\n\n\"\"\"\n\ndef transpose_opencv2chainer(x):\n\t\"\"\"\n\t\topencv\u306enpy\u5f62\u5f0f\u304b\u3089chainer\u306enpy\u5f62\u5f0f\u306b\u5909\u63db\n\t\topencv  => (height, width, channel)\n\t\tchainer => (channel, height, width)\n\t\"\"\"\n\treturn x.transpose(2,0,1)\n\nif __name__ == \"__main__\":\n\tparser = argparse.ArgumentParser(description='CNN\u7528\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u4f5c\u6210')\n\tparser.add_argument('--input_path',   required=True, type=str)\n\tparser.add_argument('--output_path',  required=True, type=str)\n\targs = parser.parse_args()\n\n\t# jpg\u30d5\u30a1\u30a4\u30eb\u4e00\u89a7\u53d6\u5f97\n\ttrain_files = glob.glob(args.input_path+\"/train/*/*.jpg\")\n\ttest_files  = glob.glob(args.input_path+\"/test/*/*.jpg\")\n\n\t# \u51fa\u529b\u7528\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u306a\u3044\u5834\u5408\u306f\u4f5c\u6210\n\tif not os.path.exists(args.output_path):\n\t\tos.makedirs(args.output_path)\n\n\ttrain_data  = []\n\ttrain_label = []\n\ttest_data   = []\n\ttest_label  = []\n\tlabel_dict  = {}\n\n\t# \u8a13\u7df4\u30c7\u30fc\u30bf\u4f5c\u6210\n\tfor file_name in train_files:\n\t\timage = cv2.imread(file_name)\n\t\tif image is None:\n\t\t\t# \u8aad\u307f\u8fbc\u307f\u5931\u6557\n\t\t\tcontinue\n\n\t\t# \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u304b\u3089\u30af\u30e9\u30b9\u540d\u3092\u53d6\u5f97\n\t\tclass_name = file_name.replace(\"\\\\\", \"/\").split(\"/\")[-2]\n\t\t\n\t\t# chainer\u7528\u5f62\u5f0f\u306b\u5909\u63db\n\t\timage = transpose_opencv2chainer(image)\n\t\ttrain_data.append(image)\n\t\ttrain_label.append(label_dict.setdefault(class_name, len(label_dict.keys())))\n\n\t# \u30c7\u30fc\u30bf\u4f5c\u6210\u30fb\u4fdd\u5b58\n\ttrain_data  = np.array(train_data)\n\ttrain_label = np.array(train_label)\n\tnp.save(args.output_path+\"/train_data.npy\" , train_data)\n\tnp.save(args.output_path+\"/train_label.npy\", train_label)\n\n\tfor file_name in test_files:\n\t\timage = cv2.imread(file_name)\n\t\tif image is None:\n\t\t\t# \u8aad\u307f\u8fbc\u307f\u5931\u6557\n\t\t\tcontinue\n\n\t\t# \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u304b\u3089\u30af\u30e9\u30b9\u540d\u3092\u53d6\u5f97\n\t\tclass_name = file_name.replace(\"\\\\\", \"/\").split(\"/\")[-2]\n\t\t\n\t\t# chainer\u7528\u5f62\u5f0f\u306b\u5909\u63db\n\t\timage = transpose_opencv2chainer(image)\n\t\ttest_data.append(image)\n\t\ttest_label.append(label_dict.setdefault(class_name, len(label_dict.keys())))\n\n\t# \u30c7\u30fc\u30bf\u4f5c\u6210\u30fb\u4fdd\u5b58\n\ttest_data   = np.array(test_data)\n\ttest_label  = np.array(test_label)\n\tnp.save(args.output_path+\"/test_data.npy\"  , test_data)\n\tnp.save(args.output_path+\"/test_label.npy\" , test_label)\n\n```\n\n\u5c11\u3057\u77ed\u3044\u3067\u3059\u304c\u4eca\u56de\u306f\u3053\u3053\u307e\u3067\u306b\u3057\u307e\u3059\u3002\n\u6b21\u56de\u306f\u8b58\u5225\u5668\u306e\u30e2\u30c7\u30eb\u3092\u8a18\u8ff0\u3057\u3001\u5b9f\u969b\u306b\u9854\u5224\u5225\u306e\u5b66\u7fd2\u30fb\u8a55\u4fa1\u3092\u884c\u3044\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u304a\u697d\u3057\u307f\u306b\uff01\n\n## \u53c2\u8003\n[Python\u3067\u6a5f\u68b0\u5b66\u7fd2\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u958b\u767a\u74b0\u5883\u3092\u69cb\u7bc9\u3059\u308b - qiita](http://qiita.com/icoxfog417/items/950b8af9100b64c0d8f9)\n\n[https://github.com/mitmul/chainer-cifar10](https://github.com/mitmul/chainer-cifar10)\n\n[Chainer\u3067CIFAR-10\u306e\u5206\u985e\u3092\u884c\u3063\u3066\u307f\u308b - \u306e\u3093\u3073\u308a\u3057\u3066\u3044\u308b\u30a8\u30f3\u30b8\u30cb\u30a2\u306e\u65e5\u8a18](http://nonbiri-tereka.hatenablog.com/entry/2015/06/21/220506)\n\n[\u5409\u672c\u8208\u696d\u682a\u5f0f\u4f1a\u793e \u82b8\u4eba\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb | \u30b9\u30fc\u30d1\u30fc\u30de\u30e9\u30c9\u30fc\u30ca](http://search.yoshimoto.co.jp/talent_prf/?id=387)\n", "tags": ["DeepLearning", "\u4eba\u5de5\u77e5\u80fd", "\u753b\u50cf\u8a8d\u8b58", "Python", "Chainer"]}