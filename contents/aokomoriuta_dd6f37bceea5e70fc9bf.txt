{"context": " More than 1 year has passed since last update.C++11\u4f7f\u3048\u306a\u3044C++\u3068\u304b\u3082\u306f\u3084C++\u4f7f\u3046\u610f\u5473\u304c\u306a\u3044\u3053\u306e\u4e16\u306e\u4e2d\u3067\u3059\u304c\u3001\u3069\u3046\u3057\u3066\u3082C++11\u306b\u5bfe\u5fdc\u3057\u3066\u306a\u3044\u9177\u30b3\u30f3\u30d1\u30a4\u30e9\u69d8\uff08\u67d0\u3075\u3058\u306a\u3093\u3068\u304b\u793e\u88fd\uff09\u306e\u305f\u3081\u306bC++03\u306b\u623b\u3059\u304a\u4ed5\u4e8b\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\u3042\u307e\u308a\u306b\u3082\u8272\u3005\u3064\u3089\u3044\u306e\u3067\u3001\u3064\u3089\u304b\u3063\u305f\u3053\u3068\u3092\u307e\u3068\u3081\u3066\u304a\u3044\u305f\u3089\u3001\u5c11\u3057\u3067\u3082\u4f3c\u305f\u3088\u3046\u306a\u5883\u9047\u306e\u4eba\u306e\u6551\u3044\u306b\u306a\u308b\u304b\u306a\u3068\u601d\u3063\u3066\u307e\u3068\u3081\u3066\u307f\u307e\u3059\u3002\n\u307e\u3060\u4f5c\u696d\u4e2d\u3067\u3059\u306e\u3067\u3001\u5897\u3048\u305f\u3089\u5897\u3048\u305f\u6642\u306b\u66f8\u3044\u3066\u304d\u307e\u3059\u3002\n\nauto\u304c\u306a\u3044\n\u3072\u3068\u3064\u305a\u3064\u3084\u3063\u3066\u3044\u3051\u3070\u76f4\u305b\u308b\u3051\u3069\u5730\u5473\u306b\u30e1\u30f3\u30c9\u30a4\u3067\u3059\u306d\u3002\n\u7279\u306b\u30a4\u30c6\u30ec\u30fc\u30bf\u307e\u308f\u308a\u304c\u5927\u5909\u3067\u3059\u3002std::map< std::string, std::vector< std::pair<int, double> > >::iterator\u3068\u304b\u306a\u3093\u306a\u3093\u3067\u3057\u3087\u3046\u30fb\u30fb\u30fb\u3002\n\n\u30e9\u30e0\u30c0\u5f0f\u304c\u306a\u3044\n\u306a\u3093\u3068\u3044\u3063\u3066\u3082\u30b3\u30ec\u304c\u4e00\u756a\u304d\u3064\u304b\u3063\u305f\u3002\nC++11\u3067\u3053\u3093\u306a\u30b3\u30fc\u30c9\u304c\u3042\u308b\u3068\u3057\u307e\u3059\u3002\n#include<iostream>\n#include<vector>\n#include<numeric>\n#include<cmath>\n\nint main()\n{\n    constexpr double offset = 1.5;\n\n    const std::vector<double> values = {1.1, 1.2, 1.3, 1.4, 1.5};\n\n    // \u3053\u3093\u306a\u611f\u3058\u3067std::accumulate\u306a\u3069\u3067\u5916\u306e\u5909\u6570\uff08\u30af\u30ed\u30fc\u30b8\u30e3\uff09\u3092\u4f7f\u3044\u305f\u3044\n    const double result = std::accumulate(values.cbegin(), values.cend(), 0.0,\n        [&offset](const double sum, const double val)\n        {\n            return sum + std::sin(offset + val);\n        });\n\n    std::cout << result << std::endl;\n\n    return 0;\n}\n\nC++03\u3067\u306f\u5f53\u7136\u30e9\u30e0\u30c0\u5f0f\u304c\u4f7f\u3048\u307e\u305b\u3093\u3002\n\u3068\u306a\u308b\u3068\u30d5\u30a1\u30f3\u30af\u30bf\u306e\u51fa\u756a\u3067\u3059\u3002\n\uff08\u30af\u30ed\u30fc\u30b8\u30e3\u306e\u306a\u3044\u30e9\u30e0\u30c0\u5f0f\u306a\u3089\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u3067\u3082\u306a\u3093\u3068\u304b\u306a\u308a\u307e\u3059\u304c\uff09\n\u8a66\u884c\u932f\u8aa4\u3057\u305f\u7d50\u679cC++03\u3067\u306f\u3053\u3093\u306a\u98a8\u306b\u306a\u308a\u307e\u3057\u305f\n#include<iostream>\n#include<vector>\n#include<numeric>\n#include<cmath>\n\n// \u30af\u30ed\u30fc\u30b8\u30e3\u3042\u308a\u306e\u30e9\u30e0\u30c0\u5f0f\u3092\u30d5\u30a1\u30f3\u30af\u30bf\u306b\u3059\u308b\u5834\u5408\u3053\u3093\u306a\u98a8\u306b\u3059\u308b\u3057\u304b\u306a\u3044\n// \uff08\u3057\u304b\u3082C++03\u3067\u306f\u95a2\u6570\u30b9\u30b3\u30fc\u30d7\u5185\u306e\u30ed\u30fc\u30ab\u30eb\u578b\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306b\u4f7f\u3048\u306a\u3044\u304b\u3089\u3001\u5916\u306b\u51fa\u3055\u306a\u304d\u3083\u3044\u3051\u306a\u3044\uff09\nstruct Lambda\n{\n    // \u30e1\u30f3\u30d0\u30fc\u5909\u6570\u3067\u30b3\u30d4\u30fc\u8d70\u3089\u305b\u305f\u304f\u306a\u3044\u304b\u3089\u53c2\u7167\u306b\u3059\u308b\n    const double& offset;\n\n    // \u53c2\u7167\u3092\u6301\u3064\u30e1\u30f3\u30d0\u30fc\u5909\u6570\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u5fc5\u8981\uff08\u5f15\u6570\u3092\u53c2\u7167\u306b\u3059\u308b\u306e\u3092\u5fd8\u308c\u306a\u3044\u3053\u3068\uff01\uff09\n    Lambda(const double& offset) : offset(offset) {}\n\n    double operator()(const double sum, const double val)\n    {\n        return sum + std::sin(offset + val);\n    }\n};\n\nint main()\n{\n    const double offset = 1.5;\n\n    std::vector<double> values;\n    values.push_back(1.1);\n    values.push_back(1.2);\n    values.push_back(1.3);\n    values.push_back(1.4);\n    values.push_back(1.5);\n\n    const double result = std::accumulate(values.cbegin(), values.cend(), 0.0, Lambda(offset));\n\n    std::cout << result << std::endl;\n\n    return 0;\n}\n\n\u3064\u3089\u3044\u3067\u3059\u306d\u3002\nC++11\u4f7f\u3048\u306a\u3044C++\u3068\u304b\u3082\u306f\u3084C++\u4f7f\u3046\u610f\u5473\u304c\u306a\u3044\u3053\u306e\u4e16\u306e\u4e2d\u3067\u3059\u304c\u3001\u3069\u3046\u3057\u3066\u3082C++11\u306b\u5bfe\u5fdc\u3057\u3066\u306a\u3044\u9177\u30b3\u30f3\u30d1\u30a4\u30e9\u69d8\uff08\u67d0\u3075\u3058\u306a\u3093\u3068\u304b\u793e\u88fd\uff09\u306e\u305f\u3081\u306bC++03\u306b\u623b\u3059\u304a\u4ed5\u4e8b\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u3042\u307e\u308a\u306b\u3082\u8272\u3005\u3064\u3089\u3044\u306e\u3067\u3001\u3064\u3089\u304b\u3063\u305f\u3053\u3068\u3092\u307e\u3068\u3081\u3066\u304a\u3044\u305f\u3089\u3001\u5c11\u3057\u3067\u3082\u4f3c\u305f\u3088\u3046\u306a\u5883\u9047\u306e\u4eba\u306e\u6551\u3044\u306b\u306a\u308b\u304b\u306a\u3068\u601d\u3063\u3066\u307e\u3068\u3081\u3066\u307f\u307e\u3059\u3002\n\n\u307e\u3060\u4f5c\u696d\u4e2d\u3067\u3059\u306e\u3067\u3001\u5897\u3048\u305f\u3089\u5897\u3048\u305f\u6642\u306b\u66f8\u3044\u3066\u304d\u307e\u3059\u3002\n\n### auto\u304c\u306a\u3044\n\u3072\u3068\u3064\u305a\u3064\u3084\u3063\u3066\u3044\u3051\u3070\u76f4\u305b\u308b\u3051\u3069\u5730\u5473\u306b\u30e1\u30f3\u30c9\u30a4\u3067\u3059\u306d\u3002\n\u7279\u306b\u30a4\u30c6\u30ec\u30fc\u30bf\u307e\u308f\u308a\u304c\u5927\u5909\u3067\u3059\u3002``std::map< std::string, std::vector< std::pair<int, double> > >::iterator``\u3068\u304b\u306a\u3093\u306a\u3093\u3067\u3057\u3087\u3046\u30fb\u30fb\u30fb\u3002\n\n### \u30e9\u30e0\u30c0\u5f0f\u304c\u306a\u3044\n\n\u306a\u3093\u3068\u3044\u3063\u3066\u3082\u30b3\u30ec\u304c\u4e00\u756a\u304d\u3064\u304b\u3063\u305f\u3002\nC++11\u3067[\u3053\u3093\u306a\u30b3\u30fc\u30c9\u304c\u3042\u308b\u3068\u3057\u307e\u3059](http://melpon.org/wandbox/permlink/LB6C5VcGBdzKMrqd)\u3002\n\n```cpp:\n#include<iostream>\n#include<vector>\n#include<numeric>\n#include<cmath>\n\nint main()\n{\n    constexpr double offset = 1.5;\n    \n    const std::vector<double> values = {1.1, 1.2, 1.3, 1.4, 1.5};\n    \n    // \u3053\u3093\u306a\u611f\u3058\u3067std::accumulate\u306a\u3069\u3067\u5916\u306e\u5909\u6570\uff08\u30af\u30ed\u30fc\u30b8\u30e3\uff09\u3092\u4f7f\u3044\u305f\u3044\n    const double result = std::accumulate(values.cbegin(), values.cend(), 0.0,\n        [&offset](const double sum, const double val)\n        {\n            return sum + std::sin(offset + val);\n        });\n    \n    std::cout << result << std::endl;\n    \n    return 0;\n}\n```\n\nC++03\u3067\u306f\u5f53\u7136\u30e9\u30e0\u30c0\u5f0f\u304c\u4f7f\u3048\u307e\u305b\u3093\u3002\n\u3068\u306a\u308b\u3068\u30d5\u30a1\u30f3\u30af\u30bf\u306e\u51fa\u756a\u3067\u3059\u3002\n\uff08\u30af\u30ed\u30fc\u30b8\u30e3\u306e\u306a\u3044\u30e9\u30e0\u30c0\u5f0f\u306a\u3089\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u3067\u3082\u306a\u3093\u3068\u304b\u306a\u308a\u307e\u3059\u304c\uff09\n\n\u8a66\u884c\u932f\u8aa4\u3057\u305f\u7d50\u679c[C++03\u3067\u306f\u3053\u3093\u306a\u98a8\u306b\u306a\u308a\u307e\u3057\u305f](http://melpon.org/wandbox/permlink/zYH4oBRbMFuREv55)\n\n```cpp:\n#include<iostream>\n#include<vector>\n#include<numeric>\n#include<cmath>\n\n// \u30af\u30ed\u30fc\u30b8\u30e3\u3042\u308a\u306e\u30e9\u30e0\u30c0\u5f0f\u3092\u30d5\u30a1\u30f3\u30af\u30bf\u306b\u3059\u308b\u5834\u5408\u3053\u3093\u306a\u98a8\u306b\u3059\u308b\u3057\u304b\u306a\u3044\n// \uff08\u3057\u304b\u3082C++03\u3067\u306f\u95a2\u6570\u30b9\u30b3\u30fc\u30d7\u5185\u306e\u30ed\u30fc\u30ab\u30eb\u578b\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306b\u4f7f\u3048\u306a\u3044\u304b\u3089\u3001\u5916\u306b\u51fa\u3055\u306a\u304d\u3083\u3044\u3051\u306a\u3044\uff09\nstruct Lambda\n{\n    // \u30e1\u30f3\u30d0\u30fc\u5909\u6570\u3067\u30b3\u30d4\u30fc\u8d70\u3089\u305b\u305f\u304f\u306a\u3044\u304b\u3089\u53c2\u7167\u306b\u3059\u308b\n    const double& offset;\n        \n    // \u53c2\u7167\u3092\u6301\u3064\u30e1\u30f3\u30d0\u30fc\u5909\u6570\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u5fc5\u8981\uff08\u5f15\u6570\u3092\u53c2\u7167\u306b\u3059\u308b\u306e\u3092\u5fd8\u308c\u306a\u3044\u3053\u3068\uff01\uff09\n    Lambda(const double& offset) : offset(offset) {}\n        \n    double operator()(const double sum, const double val)\n    {\n        return sum + std::sin(offset + val);\n    }\n};\n\nint main()\n{\n    const double offset = 1.5;\n    \n    std::vector<double> values;\n    values.push_back(1.1);\n    values.push_back(1.2);\n    values.push_back(1.3);\n    values.push_back(1.4);\n    values.push_back(1.5);\n    \n    const double result = std::accumulate(values.cbegin(), values.cend(), 0.0, Lambda(offset));\n    \n    std::cout << result << std::endl;\n    \n    return 0;\n}\n```\n\n\u3064\u3089\u3044\u3067\u3059\u306d\u3002\n", "tags": ["C++11", "C++"]}