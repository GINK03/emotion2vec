{"context": "\n\n\u958b\u767a\u7528\u30d9\u30fc\u30b9\u30a4\u30e1\u30fc\u30b8\n\u958b\u767a\u74b0\u5883\u5171\u901a\u3067\u4f7f\u3048\u308b\u30d9\u30fc\u30b9\u30a4\u30e1\u30fc\u30b8\u3092\u4f5c\u6210\u3057\u3066\u3001Docker Hub\u3068\u304b\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u3002\nroothy/golang-1.6-development\n\nFROM: Golang\u516c\u5f0f\u30a4\u30e1\u30fc\u30b8\u3092\u30d9\u30fc\u30b9\u30a4\u30e1\u30fc\u30b8\u306b\u3059\u308b\n\u7ba1\u7406\u30c4\u30fc\u30eb\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n\n\ngo generate\u3067\u4f7f\u3046 go tool\n\n\nstringer: enum\u306e\u6587\u5b57\u5217\u8868\u73fe\u30b3\u30fc\u30c9\u3092\u81ea\u52d5\u751f\u6210\njsonenums: enum\u306ejson\u8868\u73fe\u30b3\u30fc\u30c9\u3092\u81ea\u52d5\u751f\u6210\n\n\n\u30d1\u30c3\u30b1\u30fc\u30b8\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406: gom\n\nTask runner: godo\n\n\n\n\nFROM golang:1.6\nMAINTAINER roothybrid7@gmail.com\n\n# Install tools\nRUN go get golang.org/x/tools/cmd/stringer \\\n        github.com/mattn/gom \\\n        gopkg.in/godo.v2/cmd/godo \\\n        github.com/campoy/jsonenums \\\n        github.com/pquerna/ffjson \\\n        github.com/k0kubun/pp\n\n\n\u30a2\u30d7\u30ea\u7528\u306b\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u305fDockerfile\n\u958b\u767a\u7528\u30d9\u30fc\u30b9\u30a4\u30e1\u30fc\u30b8\u3092\u57fa\u306b\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u3066\u3001\u30a2\u30d7\u30ea\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\u203b\u30ed\u30fc\u30ab\u30ebPC\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092Volume\u3068\u3057\u3066\u63a5\u7d9a\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001gom\u30b3\u30de\u30f3\u30c9\u306e\u5b9f\u884c\u306f\u4e0d\u8981\u3002\nFROM roothy/golang-1.6-development\nMAINTAINER roothybrid7@gmail.com\n\n# Setup project\n\nENV HOSTING=bitbucket.org \\\n    VCS_USER=team1 \\\n    PROJECT=go_app\n\nENV WORK_DIR=/go/src/${HOSTING}/${VCS_USER}/${PROJECT}\n\nWORKDIR $WORK_DIR\n\n# Workaround: cached go packages not affected by the file changes.\nADD Gomfile ${WORK_DIR}/Gomfile\nRUN gom update || echo \"gom install error: $?\"\nRUN gom build\n\nADD entrypoint.sh ${WORK_DIR}/entrypoint.sh\nADD . $WORK_DIR\n\n\nDocker\u30d7\u30ed\u30bb\u30b9\u3092\u8d77\u52d5\u3059\u308b\u305f\u3081\u306e\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\n\nON_WATCH\u3068\u3044\u3046\u74b0\u5883\u5909\u6570\u304c\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u308c\u3070\u3001Task runner\u3092\u4f7f\u3063\u3066\u8d77\u52d5\n\nGo\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\n\nentrypoint.sh\n#!/bin/bash - \nset -o nounset                              # Treat unset variables as an error\nset -x\n\nenv | grep ON_WATCH >/dev/null\nif [ $? -eq 0 ]; then\n  godo server --watch\nelse\n  go install\n  go_app\nfi\n\n\nGo Consumer\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3(Job-Worker)\n\nconsumer_entrypoint.sh\n#!/bin/bash - \nset -o nounset                              # Treat unset variables as an error\nset -x\n\nenv | grep ON_WATCH >/dev/null\nif [ $? -eq 0 ]; then\n  godo server --watch\nelse\n  go install\n  go_app runConsumer\nfi\n\n\n\nTask runner\n\nmain.go\npackage main\n\nimport (\n    do \"gopkg.in/godo.v2\"\n)\n\nfunc generateTasks(p *do.Project) {\n    p.Task(\"default\", do.P{\"scope\", \"runas\", \"errors\", \"uploadtype\", \"distrib\", \"cjob\", \"topic\"}, nil)\n\n    // API Scope types\n    p.Task(\"scope\", nil, func(c *do.Context) {\n        c.Run(`go generate`, do.M{\"$in\": \"app/scope\"})\n    }).Src(\"app/scope/*.go\", \"!app/scope/*_string.go\")\n\n    // Data fetching/manipulating authority types\n    p.Task(\"runas\", nil, func(c *do.Context) {\n        c.Run(`go generate`, do.M{\"$in\": \"app/runas\"})\n    }).Src(\"app/runas/*.go\", \"!app/runas/*_string.go\")\n\n    // Error codes\n    p.Task(\"errors\", nil, func(c *do.Context) {\n        c.Run(`go generate`, do.M{\"$in\": \"app/errors\"})\n    }).Src(\"app/errors/*.go\", \"!app/errors/*_string.go\", \"!app/errors/*_jsonenums.go\")\n\n    // File upload type\n    p.Task(\"uploadtype\", nil, func(c *do.Context) {\n        c.Run(`go generate`, do.M{\"$in\": \"app/uploadtype\"})\n    }).Src(\"app/uploadtype/*.go\", \"!app/uploadtype/*_string.go\")\n\n    // Distribution file storage type\n    p.Task(\"distrib\", nil, func(c *do.Context) {\n        c.Run(`go generate`, do.M{\"$in\": \"app/distrib\"})\n    }).Src(\"app/distrib/*.go\", \"!app/distrib/*_string.go\")\n\n    // Job type\n    p.Task(\"cjob\", nil, func(c *do.Context) {\n        c.Run(`go generate`, do.M{\"$in\": \"module/cjob/ctype\"})\n    }).Src(\"module/cjob/ctype/ctype.go\")\n\n    // Message queue topic names(NSQ)\n    p.Task(\"topic\", nil, func(c *do.Context) {\n        c.Run(`go generate`, do.M{\"$in\": \"app/topic\"})\n    }).Src(\"app/topic/*.go\", \"!app/topic/*_string.go\")\n}\n\nfunc tasks(p *do.Project) {\n    p.Use(\"generate\", generateTasks)\n\n    p.Task(\"generate\", do.S{\"generate:default\"}, nil)\n    p.Task(\"default\", do.S{\"server\"}, nil)\n\n    p.Task(\"server\", do.S{\"generate\"}, func(c *do.Context) {\n        c.Start(\"cli.go app.go consumer.go\", do.M{\"$in\": \"./\"})\n    }).Src(\"*.go\", \"**/*.go\", \"conf/*.toml\").Debounce(3000)\n\n    p.Task(\"dbInit\", nil, func(c *do.Context) {\n        c.Run(`go run cli.go app.go dbInit`, do.M{\"$in\": \"./\"})\n    })\n}\n\nfunc main() {\n    do.Godo(tasks)\n}\n\n\n## \u958b\u767a\u7528\u30d9\u30fc\u30b9\u30a4\u30e1\u30fc\u30b8\n\n\u958b\u767a\u74b0\u5883\u5171\u901a\u3067\u4f7f\u3048\u308b\u30d9\u30fc\u30b9\u30a4\u30e1\u30fc\u30b8\u3092\u4f5c\u6210\u3057\u3066\u3001Docker Hub\u3068\u304b\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u3002\n\n[roothy/golang-1.6-development](https://hub.docker.com/r/roothy/golang-1.6-development/)\n\n* FROM: Golang\u516c\u5f0f\u30a4\u30e1\u30fc\u30b8\u3092\u30d9\u30fc\u30b9\u30a4\u30e1\u30fc\u30b8\u306b\u3059\u308b\n* \u7ba1\u7406\u30c4\u30fc\u30eb\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\t* [go generate](https://blog.golang.org/generate)\u3067\u4f7f\u3046 go tool\n\t\t* stringer: enum\u306e\u6587\u5b57\u5217\u8868\u73fe\u30b3\u30fc\u30c9\u3092\u81ea\u52d5\u751f\u6210\n\t\t* jsonenums: enum\u306ejson\u8868\u73fe\u30b3\u30fc\u30c9\u3092\u81ea\u52d5\u751f\u6210\n\t* \u30d1\u30c3\u30b1\u30fc\u30b8\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406: [gom](https://github.com/mattn/gom)\n\t* Task runner: [godo](https://github.com/go-godo/godo)\n\n\n```Dockerfile\nFROM golang:1.6\nMAINTAINER roothybrid7@gmail.com\n\n# Install tools\nRUN go get golang.org/x/tools/cmd/stringer \\\n        github.com/mattn/gom \\\n        gopkg.in/godo.v2/cmd/godo \\\n        github.com/campoy/jsonenums \\\n        github.com/pquerna/ffjson \\\n        github.com/k0kubun/pp\n```\n\n## \u30a2\u30d7\u30ea\u7528\u306b\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u305fDockerfile\n\n\u958b\u767a\u7528\u30d9\u30fc\u30b9\u30a4\u30e1\u30fc\u30b8\u3092\u57fa\u306b\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u3066\u3001\u30a2\u30d7\u30ea\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\n\u203b\u30ed\u30fc\u30ab\u30ebPC\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092Volume\u3068\u3057\u3066\u63a5\u7d9a\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001gom\u30b3\u30de\u30f3\u30c9\u306e\u5b9f\u884c\u306f\u4e0d\u8981\u3002\n\n\n```Dockerfile\nFROM roothy/golang-1.6-development\nMAINTAINER roothybrid7@gmail.com\n\n# Setup project\n\nENV HOSTING=bitbucket.org \\\n    VCS_USER=team1 \\\n    PROJECT=go_app\n\nENV WORK_DIR=/go/src/${HOSTING}/${VCS_USER}/${PROJECT}\n\nWORKDIR $WORK_DIR\n\n# Workaround: cached go packages not affected by the file changes.\nADD Gomfile ${WORK_DIR}/Gomfile\nRUN gom update || echo \"gom install error: $?\"\nRUN gom build\n\nADD entrypoint.sh ${WORK_DIR}/entrypoint.sh\nADD . $WORK_DIR\n```\n\n## Docker\u30d7\u30ed\u30bb\u30b9\u3092\u8d77\u52d5\u3059\u308b\u305f\u3081\u306e\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\n\n* ON_WATCH\u3068\u3044\u3046\u74b0\u5883\u5909\u6570\u304c\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u308c\u3070\u3001Task runner\u3092\u4f7f\u3063\u3066\u8d77\u52d5\n\nGo\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\n\n```entrypoint.sh\n#!/bin/bash - \nset -o nounset                              # Treat unset variables as an error\nset -x\n\nenv | grep ON_WATCH >/dev/null\nif [ $? -eq 0 ]; then\n  godo server --watch\nelse\n  go install\n  go_app\nfi\n```\n\nGo Consumer\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3(Job-Worker)\n\n```consumer_entrypoint.sh\n#!/bin/bash - \nset -o nounset                              # Treat unset variables as an error\nset -x\n\nenv | grep ON_WATCH >/dev/null\nif [ $? -eq 0 ]; then\n  godo server --watch\nelse\n  go install\n  go_app runConsumer\nfi\n```\n\n## Task runner\n\n```main.go\npackage main\n\nimport (\n\tdo \"gopkg.in/godo.v2\"\n)\n\nfunc generateTasks(p *do.Project) {\n\tp.Task(\"default\", do.P{\"scope\", \"runas\", \"errors\", \"uploadtype\", \"distrib\", \"cjob\", \"topic\"}, nil)\n\n\t// API Scope types\n\tp.Task(\"scope\", nil, func(c *do.Context) {\n\t\tc.Run(`go generate`, do.M{\"$in\": \"app/scope\"})\n\t}).Src(\"app/scope/*.go\", \"!app/scope/*_string.go\")\n\n\t// Data fetching/manipulating authority types\n\tp.Task(\"runas\", nil, func(c *do.Context) {\n\t\tc.Run(`go generate`, do.M{\"$in\": \"app/runas\"})\n\t}).Src(\"app/runas/*.go\", \"!app/runas/*_string.go\")\n\n\t// Error codes\n\tp.Task(\"errors\", nil, func(c *do.Context) {\n\t\tc.Run(`go generate`, do.M{\"$in\": \"app/errors\"})\n\t}).Src(\"app/errors/*.go\", \"!app/errors/*_string.go\", \"!app/errors/*_jsonenums.go\")\n\n\t// File upload type\n\tp.Task(\"uploadtype\", nil, func(c *do.Context) {\n\t\tc.Run(`go generate`, do.M{\"$in\": \"app/uploadtype\"})\n\t}).Src(\"app/uploadtype/*.go\", \"!app/uploadtype/*_string.go\")\n\n\t// Distribution file storage type\n\tp.Task(\"distrib\", nil, func(c *do.Context) {\n\t\tc.Run(`go generate`, do.M{\"$in\": \"app/distrib\"})\n\t}).Src(\"app/distrib/*.go\", \"!app/distrib/*_string.go\")\n\n\t// Job type\n\tp.Task(\"cjob\", nil, func(c *do.Context) {\n\t\tc.Run(`go generate`, do.M{\"$in\": \"module/cjob/ctype\"})\n\t}).Src(\"module/cjob/ctype/ctype.go\")\n\n\t// Message queue topic names(NSQ)\n\tp.Task(\"topic\", nil, func(c *do.Context) {\n\t\tc.Run(`go generate`, do.M{\"$in\": \"app/topic\"})\n\t}).Src(\"app/topic/*.go\", \"!app/topic/*_string.go\")\n}\n\nfunc tasks(p *do.Project) {\n\tp.Use(\"generate\", generateTasks)\n\n\tp.Task(\"generate\", do.S{\"generate:default\"}, nil)\n\tp.Task(\"default\", do.S{\"server\"}, nil)\n\n\tp.Task(\"server\", do.S{\"generate\"}, func(c *do.Context) {\n\t\tc.Start(\"cli.go app.go consumer.go\", do.M{\"$in\": \"./\"})\n\t}).Src(\"*.go\", \"**/*.go\", \"conf/*.toml\").Debounce(3000)\n\n\tp.Task(\"dbInit\", nil, func(c *do.Context) {\n\t\tc.Run(`go run cli.go app.go dbInit`, do.M{\"$in\": \"./\"})\n\t})\n}\n\nfunc main() {\n\tdo.Godo(tasks)\n}\n```\n\n", "tags": ["docker", "development", "golang", "Go"]}