{"tags": ["Node.js", "aws-sdk"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002aws-sdk\u3067s3\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u6642\u3001\u30de\u30eb\u30c1\u30d1\u30fc\u30c8\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3060\u3068Etag\u304cmd5\u306b\u306a\u3089\u306a\u3044\u3002\n\u306a\u306e\u3067\u3001Transform\u7d4c\u7531\u3067\u6a2a\u53d6\u308a\u3057\u3066\u7b97\u51fa\u3059\u308b\u3002\n\ndigeststream.js\n'use strict';\n\nvar util = require('util');\nvar Transform = require('stream').Transform;\nvar createHash = require('crypto').createHash;\n\nfunction DigestStream(algorithm, opts) {\n  if (!(this instanceof DigestStream)) {\n    return new DigestStream(algorithm, opts);\n  }\n\n  opts = opts || {};\n  opts.objectMode = false;\n\n  Transform.call(this, opts);\n\n  this._hash = createHash(algorithm);\n}\nutil.inherits(DigestStream, Transform);\n\nDigestStream.prototype._transform = function(chunk, encoding, callback) {\n  this.push(chunk);\n  this._hash.update(chunk);\n\n  callback();\n};\n\nDigestStream.prototype._flush = function(callback) {\n  this.emit('digest', this._hash.digest('hex'));\n\n  callback();\n};\n\nmodule.exports = DigestStream;\n\n\n\n\u4f7f\u7528\u4f8b\n\napp.js\nvar fs = require('fs');\nvar zlib = require('zlib');\nvar AWS = require('aws-sdk');\nvar config = require('./config.json');\nvar s3 = new AWS.S3(config.s3);\nvar DigestStream = require('./digeststream.js');\n\nvar digestStream = new DigestStream('md5');\ndigestStream.on('digest', function(value) {\n  console.log(value);\n});\n\nvar stream = fs.createReadStream('./bigdata').pipe(zlib.createGzip()).pipe(digestStream);\n\nvar params = {\n  Bucket: 'bucket',\n  Key: 'key',\n  Body: stream\n};\n\ns3.upload(params, function(err, data) {\n  if (err) console.log(err, err.stack); // an error occurred\n  else     console.log(data);           // successful response\n});\n\n\naws-sdk\u3067s3\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u6642\u3001\u30de\u30eb\u30c1\u30d1\u30fc\u30c8\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3060\u3068Etag\u304cmd5\u306b\u306a\u3089\u306a\u3044\u3002\n\u306a\u306e\u3067\u3001Transform\u7d4c\u7531\u3067\u6a2a\u53d6\u308a\u3057\u3066\u7b97\u51fa\u3059\u308b\u3002\n\n```js:digeststream.js\n'use strict';\n\nvar util = require('util');\nvar Transform = require('stream').Transform;\nvar createHash = require('crypto').createHash;\n\nfunction DigestStream(algorithm, opts) {\n  if (!(this instanceof DigestStream)) {\n    return new DigestStream(algorithm, opts);\n  }\n\n  opts = opts || {};\n  opts.objectMode = false;\n\n  Transform.call(this, opts);\n\n  this._hash = createHash(algorithm);\n}\nutil.inherits(DigestStream, Transform);\n\nDigestStream.prototype._transform = function(chunk, encoding, callback) {\n  this.push(chunk);\n  this._hash.update(chunk);\n\n  callback();\n};\n\nDigestStream.prototype._flush = function(callback) {\n  this.emit('digest', this._hash.digest('hex'));\n\n  callback();\n};\n\nmodule.exports = DigestStream;\n```\n\n#\u4f7f\u7528\u4f8b\n\n```js:app.js\nvar fs = require('fs');\nvar zlib = require('zlib');\nvar AWS = require('aws-sdk');\nvar config = require('./config.json');\nvar s3 = new AWS.S3(config.s3);\nvar DigestStream = require('./digeststream.js');\n\nvar digestStream = new DigestStream('md5');\ndigestStream.on('digest', function(value) {\n  console.log(value);\n});\n\nvar stream = fs.createReadStream('./bigdata').pipe(zlib.createGzip()).pipe(digestStream);\n\nvar params = {\n  Bucket: 'bucket',\n  Key: 'key',\n  Body: stream\n};\n\ns3.upload(params, function(err, data) {\n  if (err) console.log(err, err.stack); // an error occurred\n  else     console.log(data);           // successful response\n});\n```\n"}