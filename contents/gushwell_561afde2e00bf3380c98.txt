{"context": "\n\n\u529b\u305a\u304f\u3067\u7d20\u56e0\u6570\u5206\u89e3\n\u307e\u305a\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f\u6570(long\u578b)\u3092\u529b\u305a\u304f\u3067\u5f37\u5f15\u306b\u7d20\u56e0\u6570\u5206\u89e3\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\nC#\u306e\u30b3\u30fc\u30c9 (Brute force\u7248)\n\nPrimeFactorBruteForce.cs\npublic class PrimeFactorBruteForce {\n    private List<long> _factors = new List<long>();\n    public IEnumerable<long> Enumerate(long num) {\n        _factors.Clear();\n        if (num == 1)\n            return new long[] { 1 };\n        var m = num;\n        long n = 2;\n        while (m > 1) {\n            // m \u3092 n\u3067\u5272\u308a\u7d9a\u3051\u308b\u3002\u305d\u306e\u7d50\u679c\u3092\u8fd4\u3059\u3002\n            // \u304b\u3064\u3001\u5272\u308a\u5207\u308c\u305f\u3089\u3001 _factors\u306bAdd\n            while (m % n == 0) {\n                _factors.Add(n);\n                m = m / n;\n            }\n            n++;\n        }\n        return _factors;\n    }\n}\n\n\nEnumerate\u3092\u547c\u3073\u51fa\u3059\u3068\u3001\u7d20\u56e0\u6570\u5206\u89e3\u3057\u305f\u7d50\u679c\u3067\u3042\u308b\u7d20\u56e0\u6570\u304c\u5217\u6319\u3067\u304d\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u3053\u306e\u30b3\u30fc\u30c9\u3001\u5927\u304d\u306a\u7d20\u6570\u3092\u4e0e\u3048\u305f\u5834\u5408\u3001\u3081\u3061\u3083\u304f\u3061\u3083\u9045\u3044\u3067\u3059\u3002\n\u305d\u3053\u3067\u3001\u5c11\u3057\u6539\u826f\u3057\u305f\u306e\u304c\u6b21\u306e\u30b3\u30fc\u30c9\n\nC#\u306e\u30b3\u30fc\u30c9 (Brute force\u6539\u826f\u7248)\n\nPrimeFactorBruteForce2.cs\npublic class PrimeFactorBruteForce {\n    private List<long> _factors = new List<long>();\n    public IEnumerable<long> Enumerate(long num) {\n        _factors.Clear();\n        if (num == 1)\n            return new long[] { 1 };\n        var n = DivideWith(num, 2);\n        n = DivideWith(n, 3);\n        n = DivideWith(n, 5);\n        long i = 0;\n        while (n > 1) {\n            int[] ps = { 7, 11, 13, 17, 19, 23, 29, 31 };\n            foreach (var p in ps) {\n                // 30m+2, 30m+3, 30m+4, 30m+5, 30m+6\u300130m+8... \u306f\u5272\u308b\u5fc5\u8981\u306f\u306a\u3044\u3002\n                n = DivideWith(n, i + p);\n                if (n == 1)\n                    break;\n            }\n            i += 30;\n        }\n        return _factors;\n    }\n\n    // m \u3092 n\u3067\u5272\u308a\u7d9a\u3051\u308b\u3002\u5272\u308a\u5207\u308c\u305f\u3089\u3001 _factors\u306bAdd\u3002\n    private long DivideWith(long m, long n) {\n        while (m % n == 0) {\n            _factors.Add(n);\n            m = m / n;\n        }\n        return m;\n    }\n}\n\n\n\u3059\u3053\u3057\u5de5\u592b\u3057\u3066\u3001\u5358\u306b\u30012,3,4,5,6,7...\u3068\u9806\u756a\u306b\u5272\u308a\u7b97\u3092\u3059\u308b\u3088\u308a\u306f\u52b9\u7387\u3088\u304f\u7d20\u56e0\u6570\u5206\u89e3\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u307e\u305a\u300131\u307e\u3067\u306e\u7d20\u6570\u3067\u5272\u308a\u3001\u305d\u308c\u4ee5\u964d\u306f\u300130m+7, 30m+11, 30m+13, 30m+17, 30m+19, 30m+23, 30m+29, 30m+31 \u306e\u6570\u3067\u5272\u3063\u3066\u3044\u307e\u3059\u3002m\u306f\u6574\u6570\u3067\u3059\u3002\n30m+2, 30m+3, ..., 30m+8, 30m+9, 30m+10, 30m+12 \u306a\u3069\u306f\u3001\u7d20\u6570\u3067\u306a\u3044\u3053\u3068\u304c\u660e\u3089\u304b\u306a\u306e\u3067\u5bfe\u8c61\u304b\u3089\u9664\u5916\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u7d20\u6570\u3067\u306a\u3044\u6570\u3067\u3082\u5272\u308b\u3053\u3068\u306b\u306f\u306a\u308a\u307e\u3059\u304c\u3001\u5358\u7d14\u306a\u30b3\u30fc\u30c9\u3088\u308a\u3082\u3059\u3053\u3057\u52b9\u7387\u826f\u304f\u7d20\u56e0\u6570\u5206\u89e3\u3067\u304d\u307e\u3059\u3002\n\u305f\u3060\u3001\u5927\u304d\u306a\u7d20\u6570\u304c\u542b\u307e\u308c\u308b\u6570\u306b\u5bfe\u3057\u3066\u306f\u3001\u7121\u610f\u5473\u306a\u8a66\u3057\u5272\u308a\u304c\u4f55\u3079\u3093\u3082\u884c\u308f\u308c\u308b\u305f\u3081\u3001\u307b\u3093\u306e\u308f\u305a\u304b\u306b\u901f\u5ea6\u5411\u4e0a\u3057\u305f\u3060\u3051\u3067\u3057\u305f\u3002\n\u3061\u306a\u307f\u306b\u3053\u306e\u30ed\u30b8\u30c3\u30af\u306f\u3001\u30df\u30e9\u30fc\u30fb\u30e9\u30d3\u30f3\u7d20\u6570\u5224\u5b9a\u6cd5\u306b\u3088\u308b\u7d20\u6570\u5224\u5b9a\u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u3067\u793a\u3057\u305f\u529b\u6280\u306e\u30e1\u30bd\u30c3\u30c9IsPrimeBruteforce\u3068\u540c\u3058\u8003\u3048\u3067\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\n\u30dd\u30e9\u30fc\u30c9\u30fb\u30ed\u30fc\u7d20\u56e0\u6570\u5206\u89e3\u6cd5\n\u3082\u3063\u3068\u3001\u901f\u304f\u3059\u308b\u65b9\u6cd5\u306f\u7121\u3044\u306e\u304b\u3068\u601d\u3063\u3066\u8abf\u3079\u305f\u3089\u3001\u30dd\u30e9\u30fc\u30c9\u30fb\u30ed\u30fc\u7d20\u56e0\u6570\u5206\u89e3\u6cd5\u3068\u3044\u3046\u306e\u304c\u3042\u308b\u3053\u3068\u3092\u77e5\u308a\u307e\u3057\u305f\u3002\n\u305d\u3053\u3067\u3001wikipedia\u306e\u30dd\u30e9\u30fc\u30c9\u30fb\u30ed\u30fc\u7d20\u56e0\u6570\u5206\u89e3\u6cd5 \u306e\u30da\u30fc\u30b8\u306b\u66f8\u3044\u3066\u3042\u308b\u901a\u308a\u306b\u66f8\u3044\u3066\u307f\u305f\u306e\u3067\u3059\u304c\u3001\u3069\u3046\u3082\u7d50\u679c\u304c\u6b63\u3057\u304f\u3042\u308a\u307e\u305b\u3093\u3002\n\u826f\u304f\u826f\u304f\u8aad\u3080\u3068\u3001\u4e0e\u3048\u308b\u5024\u306f\u7d20\u6570\u4ee5\u5916\u304c\u5927\u524d\u63d0\u3067\u3001\u7d20\u6570\u4ee5\u5916\u3092\u4e0e\u3048\u3066\u3082\u5931\u6557\u3059\u308b(\u7d20\u6570\u3067\u306a\u3044\u56e0\u6570\u3092\u898b\u3064\u3051\u3066\u3057\u307e\u3046)\u5834\u5408\u304c\u3042\u308b\u3068\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u305d\u306e\u3042\u305f\u308a\u3092\u6539\u5584\u3057\u305f\u30b3\u30fc\u30c9\u304c\u6b21\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\u524d\u306e\uff12\u3064\u306e\u65b9\u6cd5\u306b\u6bd4\u3079\u308b\u3068\u3001\u5727\u5012\u7684\u306a\u901f\u3055\u3067\u3059\u3002\n\nPrimeFactor.cs\npublic class PrimeFactor {\n\n    public IEnumerable<long> Enumerate(long n) {\n        while (n > 1) {\n            long factor = GetFactor(n);\n            yield return factor;\n            n = n / factor;\n        }\n    }\n\n    private long GetFactor(long n, int seed = 1) {\n        if (n % 2 == 0)\n            return 2;\n        if (IsPrime(n))\n            return n;\n        long x = 2;\n        long y = 2;\n        long d = 1;\n        long count = 0;\n        while (d == 1) {\n            count++;\n            x = f(x, n, seed);\n            y = f(f(y, n, seed), n, seed);\n            d = Gcd(Math.Abs(x - y), n);\n        }\n        if (d == n)\n            // \u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u3001\u4e71\u6570\u767a\u751f\u306e\u30b7\u30fc\u30c9\u3092\u5909\u3048\u3066\u518d\u6311\u6226\u3002\n            return GetFactor(n, seed+1);\n        // \u7d20\u6570\u3067\u306a\u3044\u53ef\u80fd\u6027\u3082\u3042\u308b\u306e\u3067\u3001\u518d\u5ea6\u547c\u3073\u51fa\u3059\n        return GetFactor(d);\n    }\n\n    private int[] seeds = new int[] { 3, 5, 7, 11, 13, 17 };\n    private long f(long x, long n, int seed) {\n        return (seeds[seed % 6] * x + seed) % n;\n    }\n\n    private static long Gcd(long a, long b) {\n        if (a < b)\n            return Gcd(b, a);  // \u5f15\u6570\u3092\u5165\u66ff\u3048\u3066\u81ea\u5206\u3092\u547c\u3073\u51fa\u3059\n        if (b == 0)\n            return a;\n        long d = 0;\n        do {\n            d = a % b;\n            a = b;\n            b = d;\n        } while (d != 0);\n        return a;\n    }\n\n    // \u52b9\u7387\u306f\u826f\u304f\u306a\u3044\u304c\u3001\u3053\u308c\u3067\u3082\u5341\u5206\u306a\u901f\u5ea6\u304c\u3067\u305f\u306e\u3067\u3001\u826f\u3057\u3068\u3059\u308b\u3002\n    private static bool IsPrime(long number) {\n        long boundary = (long)Math.Floor(Math.Sqrt(number));\n\n        if (number == 1)\n            return false;\n        if (number == 2)\n            return true;\n\n        for (long i = 2; i <= boundary; ++i) {\n            if (number % i == 0)\n                return false;\n        }\n\n        return true;\n    }\n}\n\n\nIsPrime\u30e1\u30bd\u30c3\u30c9\u3092\u3001\u30df\u30e9\u30fc\u30fb\u30e9\u30d3\u30f3\u7d20\u6570\u5224\u5b9a\u6cd5\u306b\u3088\u308b\u7d20\u6570\u5224\u5b9a\u30e1\u30bd\u30c3\u30c9\u3067\u793a\u3057\u305f\u6700\u7d42\u7248\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u7f6e\u304d\u63db\u3048\u308c\u3070\u3001\u3082\u3063\u3068\u901f\u304f\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u4f7f\u3044\u65b9\u306f\u3053\u3093\u306a\u611f\u3058\n    var primeFactor = new PrimeFactor();\n    var factors = primeFactor.Enumerate(54286473);\n    foreach (var n in factors)\n        Console.WriteLine(n);\n\n\n\u3053\u306e\u8a18\u4e8b\u306f\u3001Gushwell's C# Programming Page\u3067\u516c\u958b\u3057\u305f\u3082\u306e\u3092\u52a0\u7b46\u30fb\u4fee\u6b63\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\n\n## \u529b\u305a\u304f\u3067\u7d20\u56e0\u6570\u5206\u89e3\n\n\u307e\u305a\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f\u6570(long\u578b)\u3092\u529b\u305a\u304f\u3067\u5f37\u5f15\u306b\u7d20\u56e0\u6570\u5206\u89e3\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\n### C#\u306e\u30b3\u30fc\u30c9 (Brute force\u7248)\n\n```csharp:PrimeFactorBruteForce.cs\npublic class PrimeFactorBruteForce {\n    private List<long> _factors = new List<long>();\n    public IEnumerable<long> Enumerate(long num) {\n        _factors.Clear();\n        if (num == 1)\n            return new long[] { 1 };\n        var m = num;\n        long n = 2;\n        while (m > 1) {\n            // m \u3092 n\u3067\u5272\u308a\u7d9a\u3051\u308b\u3002\u305d\u306e\u7d50\u679c\u3092\u8fd4\u3059\u3002\n            // \u304b\u3064\u3001\u5272\u308a\u5207\u308c\u305f\u3089\u3001 _factors\u306bAdd\n            while (m % n == 0) {\n                _factors.Add(n);\n                m = m / n;\n            }\n            n++;\n        }\n        return _factors;\n    }\n}\n```\n\nEnumerate\u3092\u547c\u3073\u51fa\u3059\u3068\u3001\u7d20\u56e0\u6570\u5206\u89e3\u3057\u305f\u7d50\u679c\u3067\u3042\u308b\u7d20\u56e0\u6570\u304c\u5217\u6319\u3067\u304d\u307e\u3059\u3002\n\n\u3057\u304b\u3057\u3001\u3053\u306e\u30b3\u30fc\u30c9\u3001\u5927\u304d\u306a\u7d20\u6570\u3092\u4e0e\u3048\u305f\u5834\u5408\u3001\u3081\u3061\u3083\u304f\u3061\u3083\u9045\u3044\u3067\u3059\u3002\n\u305d\u3053\u3067\u3001\u5c11\u3057\u6539\u826f\u3057\u305f\u306e\u304c\u6b21\u306e\u30b3\u30fc\u30c9\n\n### C#\u306e\u30b3\u30fc\u30c9 (Brute force\u6539\u826f\u7248)\n\n```csharp:PrimeFactorBruteForce2.cs\npublic class PrimeFactorBruteForce {\n    private List<long> _factors = new List<long>();\n    public IEnumerable<long> Enumerate(long num) {\n        _factors.Clear();\n        if (num == 1)\n            return new long[] { 1 };\n        var n = DivideWith(num, 2);\n        n = DivideWith(n, 3);\n        n = DivideWith(n, 5);\n        long i = 0;\n        while (n > 1) {\n            int[] ps = { 7, 11, 13, 17, 19, 23, 29, 31 };\n            foreach (var p in ps) {\n                // 30m+2, 30m+3, 30m+4, 30m+5, 30m+6\u300130m+8... \u306f\u5272\u308b\u5fc5\u8981\u306f\u306a\u3044\u3002\n                n = DivideWith(n, i + p);\n                if (n == 1)\n                    break;\n            }\n            i += 30;\n        }\n        return _factors;\n    }\n\n    // m \u3092 n\u3067\u5272\u308a\u7d9a\u3051\u308b\u3002\u5272\u308a\u5207\u308c\u305f\u3089\u3001 _factors\u306bAdd\u3002\n    private long DivideWith(long m, long n) {\n        while (m % n == 0) {\n            _factors.Add(n);\n            m = m / n;\n        }\n        return m;\n    }\n}\n```\n\n\u3059\u3053\u3057\u5de5\u592b\u3057\u3066\u3001\u5358\u306b\u30012,3,4,5,6,7...\u3068\u9806\u756a\u306b\u5272\u308a\u7b97\u3092\u3059\u308b\u3088\u308a\u306f\u52b9\u7387\u3088\u304f\u7d20\u56e0\u6570\u5206\u89e3\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u307e\u305a\u300131\u307e\u3067\u306e\u7d20\u6570\u3067\u5272\u308a\u3001\u305d\u308c\u4ee5\u964d\u306f\u300130m+7, 30m+11, 30m+13, 30m+17, 30m+19, 30m+23, 30m+29, 30m+31 \u306e\u6570\u3067\u5272\u3063\u3066\u3044\u307e\u3059\u3002m\u306f\u6574\u6570\u3067\u3059\u3002\n\n30m+2, 30m+3, ..., 30m+8, 30m+9, 30m+10, 30m+12 \u306a\u3069\u306f\u3001\u7d20\u6570\u3067\u306a\u3044\u3053\u3068\u304c\u660e\u3089\u304b\u306a\u306e\u3067\u5bfe\u8c61\u304b\u3089\u9664\u5916\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u7d20\u6570\u3067\u306a\u3044\u6570\u3067\u3082\u5272\u308b\u3053\u3068\u306b\u306f\u306a\u308a\u307e\u3059\u304c\u3001\u5358\u7d14\u306a\u30b3\u30fc\u30c9\u3088\u308a\u3082\u3059\u3053\u3057\u52b9\u7387\u826f\u304f\u7d20\u56e0\u6570\u5206\u89e3\u3067\u304d\u307e\u3059\u3002\n\n\u305f\u3060\u3001\u5927\u304d\u306a\u7d20\u6570\u304c\u542b\u307e\u308c\u308b\u6570\u306b\u5bfe\u3057\u3066\u306f\u3001\u7121\u610f\u5473\u306a\u8a66\u3057\u5272\u308a\u304c\u4f55\u3079\u3093\u3082\u884c\u308f\u308c\u308b\u305f\u3081\u3001\u307b\u3093\u306e\u308f\u305a\u304b\u306b\u901f\u5ea6\u5411\u4e0a\u3057\u305f\u3060\u3051\u3067\u3057\u305f\u3002\n\n\u3061\u306a\u307f\u306b\u3053\u306e\u30ed\u30b8\u30c3\u30af\u306f\u3001[\u30df\u30e9\u30fc\u30fb\u30e9\u30d3\u30f3\u7d20\u6570\u5224\u5b9a\u6cd5\u306b\u3088\u308b\u7d20\u6570\u5224\u5b9a\u30e1\u30bd\u30c3\u30c9](http://qiita.com/gushwell/items/ff9ed83ba55350aaa369)\u306e\u4e2d\u3067\u793a\u3057\u305f\u529b\u6280\u306e\u30e1\u30bd\u30c3\u30c9IsPrimeBruteforce\u3068\u540c\u3058\u8003\u3048\u3067\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\n## \u30dd\u30e9\u30fc\u30c9\u30fb\u30ed\u30fc\u7d20\u56e0\u6570\u5206\u89e3\u6cd5\n\n\u3082\u3063\u3068\u3001\u901f\u304f\u3059\u308b\u65b9\u6cd5\u306f\u7121\u3044\u306e\u304b\u3068\u601d\u3063\u3066\u8abf\u3079\u305f\u3089\u3001\u30dd\u30e9\u30fc\u30c9\u30fb\u30ed\u30fc\u7d20\u56e0\u6570\u5206\u89e3\u6cd5\u3068\u3044\u3046\u306e\u304c\u3042\u308b\u3053\u3068\u3092\u77e5\u308a\u307e\u3057\u305f\u3002\n\n\u305d\u3053\u3067\u3001wikipedia\u306e[\u30dd\u30e9\u30fc\u30c9\u30fb\u30ed\u30fc\u7d20\u56e0\u6570\u5206\u89e3\u6cd5](https://ja.wikipedia.org/wiki/%E3%83%9D%E3%83%A9%E3%83%BC%E3%83%89%E3%83%BB%E3%83%AD%E3%83%BC%E7%B4%A0%E5%9B%A0%E6%95%B0%E5%88%86%E8%A7%A3%E6%B3%95) \u306e\u30da\u30fc\u30b8\u306b\u66f8\u3044\u3066\u3042\u308b\u901a\u308a\u306b\u66f8\u3044\u3066\u307f\u305f\u306e\u3067\u3059\u304c\u3001\u3069\u3046\u3082\u7d50\u679c\u304c\u6b63\u3057\u304f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u826f\u304f\u826f\u304f\u8aad\u3080\u3068\u3001\u4e0e\u3048\u308b\u5024\u306f\u7d20\u6570\u4ee5\u5916\u304c\u5927\u524d\u63d0\u3067\u3001\u7d20\u6570\u4ee5\u5916\u3092\u4e0e\u3048\u3066\u3082\u5931\u6557\u3059\u308b(\u7d20\u6570\u3067\u306a\u3044\u56e0\u6570\u3092\u898b\u3064\u3051\u3066\u3057\u307e\u3046)\u5834\u5408\u304c\u3042\u308b\u3068\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u305d\u306e\u3042\u305f\u308a\u3092\u6539\u5584\u3057\u305f\u30b3\u30fc\u30c9\u304c\u6b21\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\u524d\u306e\uff12\u3064\u306e\u65b9\u6cd5\u306b\u6bd4\u3079\u308b\u3068\u3001\u5727\u5012\u7684\u306a\u901f\u3055\u3067\u3059\u3002\n\n\n```csharp:PrimeFactor.cs\npublic class PrimeFactor {\n\n    public IEnumerable<long> Enumerate(long n) {\n        while (n > 1) {\n            long factor = GetFactor(n);\n            yield return factor;\n            n = n / factor;\n        }\n    }\n\n    private long GetFactor(long n, int seed = 1) {\n        if (n % 2 == 0)\n            return 2;\n        if (IsPrime(n))\n            return n;\n        long x = 2;\n        long y = 2;\n        long d = 1;\n        long count = 0;\n        while (d == 1) {\n            count++;\n            x = f(x, n, seed);\n            y = f(f(y, n, seed), n, seed);\n            d = Gcd(Math.Abs(x - y), n);\n        }\n        if (d == n)\n            // \u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u3001\u4e71\u6570\u767a\u751f\u306e\u30b7\u30fc\u30c9\u3092\u5909\u3048\u3066\u518d\u6311\u6226\u3002\n            return GetFactor(n, seed+1);\n        // \u7d20\u6570\u3067\u306a\u3044\u53ef\u80fd\u6027\u3082\u3042\u308b\u306e\u3067\u3001\u518d\u5ea6\u547c\u3073\u51fa\u3059\n        return GetFactor(d);\n    }\n\n    private int[] seeds = new int[] { 3, 5, 7, 11, 13, 17 };\n    private long f(long x, long n, int seed) {\n        return (seeds[seed % 6] * x + seed) % n;\n    }\n\n    private static long Gcd(long a, long b) {\n        if (a < b)\n            return Gcd(b, a);  // \u5f15\u6570\u3092\u5165\u66ff\u3048\u3066\u81ea\u5206\u3092\u547c\u3073\u51fa\u3059\n        if (b == 0)\n            return a;\n        long d = 0;\n        do {\n            d = a % b;\n            a = b;\n            b = d;\n        } while (d != 0);\n        return a;\n    }\n\n    // \u52b9\u7387\u306f\u826f\u304f\u306a\u3044\u304c\u3001\u3053\u308c\u3067\u3082\u5341\u5206\u306a\u901f\u5ea6\u304c\u3067\u305f\u306e\u3067\u3001\u826f\u3057\u3068\u3059\u308b\u3002\n    private static bool IsPrime(long number) {\n        long boundary = (long)Math.Floor(Math.Sqrt(number));\n\n        if (number == 1)\n            return false;\n        if (number == 2)\n            return true;\n\n        for (long i = 2; i <= boundary; ++i) {\n            if (number % i == 0)\n                return false;\n        }\n\n        return true;\n    }\n}\n```    \n\nIsPrime\u30e1\u30bd\u30c3\u30c9\u3092\u3001[\u30df\u30e9\u30fc\u30fb\u30e9\u30d3\u30f3\u7d20\u6570\u5224\u5b9a\u6cd5\u306b\u3088\u308b\u7d20\u6570\u5224\u5b9a\u30e1\u30bd\u30c3\u30c9](http://qiita.com/gushwell/items/ff9ed83ba55350aaa369)\u3067\u793a\u3057\u305f\u6700\u7d42\u7248\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u7f6e\u304d\u63db\u3048\u308c\u3070\u3001\u3082\u3063\u3068\u901f\u304f\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n\u4f7f\u3044\u65b9\u306f\u3053\u3093\u306a\u611f\u3058\n\n```csharp\n    var primeFactor = new PrimeFactor();\n    var factors = primeFactor.Enumerate(54286473);\n    foreach (var n in factors)\n        Console.WriteLine(n);\n```\n\n-------------------\n\u3053\u306e\u8a18\u4e8b\u306f\u3001Gushwell's C# Programming Page\u3067\u516c\u958b\u3057\u305f\u3082\u306e\u3092\u52a0\u7b46\u30fb\u4fee\u6b63\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\n", "tags": ["C#", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0", "C#\u5c0f\u54c1\u96c6\u30b7\u30ea\u30fc\u30b9"]}