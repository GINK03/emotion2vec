{"context": " More than 1 year has passed since last update.web\u30a2\u30d7\u30ea\u3067\u306a\u3044\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u3067\u306e\u3001python\u306e\u30c1\u30e3\u30c3\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u63a2\u305b\u3070\u3042\u308b\u3002\n\u3057\u304b\u3057\u3001\u3069\u308c\u3082(\u975e\u540c\u671f\u5165\u529b\u304c\u3067\u304d\u308b\u3082\u306e\u306f)Windows\u3067\u52d5\u304b\u306a\u3044\u3002\u4e00\u5fdc\u3001\u52d5\u304f\u3082\u306e\u304c\u3067\u304d\u305f\u306e\u3067\u516c\u958b\u3059\u308b\u3002\n\n\u30b5\u30fc\u30d0\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0\n\u300cpython server.py IP\u30a2\u30c9\u30ec\u30b9\u300d\u3068\u3057\u3066\u8d77\u52d5\n\nserver.py\nimport sys, socket, select\n\ndef broadcast(socklist, server_socket, sock, message):\n    print(message)\n    for socket in socklist:\n        if socket != server_socket and socket != sock :\n            try :\n                socket.send(message.encode())\n            except :\n                socket.close()\n                socklist.remove(socket)\n\nif __name__ == '__main__':\n    port, socklist, server = 5001, [], '127.0.0.1' if len(sys.argv) <= 1 else sys.argv[1]\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind((server, port))\n    server_socket.listen(10)\n    socklist.append(server_socket)\n    print('Start')\n    while True:\n        read_sockets, write_sockets, error_sockets = select.select(socklist, [], [])\n        for sock in read_sockets:\n            if sock == server_socket:\n                sockfd, addr = server_socket.accept()\n                socklist.append(sockfd)\n                broadcast(socklist, server_socket, sockfd, '[%s:%s] Enter' % addr)\n            else:\n                try:\n                    data = sock.recv(4096).decode()\n                    if data == '': raise Exception('Done')\n                    if data:\n                        broadcast(socklist, server_socket, sock, data)                \n                except Exception as e:\n                    print(e)\n                    broadcast(socklist, server_socket, sock, '[%s, %s] Exit' % addr)\n                    sock.close()\n                    socklist.remove(sock)\n\n\n\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\n\u300cpython client.py \u30e6\u30fc\u30b6\u30fc\u540d IP\u30a2\u30c9\u30ec\u30b9\u300d\u3068\u3057\u3066\u5b9f\u884c\n\nclient.py\nimport sys, socket, select, threading\n\ndef prompt(user) :\n    sys.stdout.write('%s> ' % user)\n    sys.stdout.flush()\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 3:\n        print('Usage : python %s user host' % sys.argv[0])\n        sys.exit()\n    (user, host), port = sys.argv[1:3], 5001\n    server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try :\n        server_sock.connect((host, port))\n    except :\n        print('Unable to connect')\n        sys.exit()\n    print('Start')\n    def listen():\n        while True:\n            read_sockets, write_sockets, error_sockets = select.select([server_sock], [], [])\n            try:\n                data = server_sock.recv(4096).decode()\n            except:\n                break\n            sys.stdout.write('\\r%s\\n' % data)\n            prompt(user)\n        print('\\rTerminated')\n    t = threading.Thread(target=listen)\n    t.start()\n    prompt(user)\n    while True:\n        msg = sys.stdin.readline().strip()\n        if not msg:\n            server_sock.close()\n            break\n        try:\n            server_sock.send(('%s| %s' % (user, msg)).encode())\n        except:\n            break\n        prompt(user)\n\n\nPython2\u7cfb\u3067\u306f\u3001ASCII\u306e\u307fOK\u3002\nweb\u30a2\u30d7\u30ea\u3067\u306a\u3044\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u3067\u306e\u3001python\u306e\u30c1\u30e3\u30c3\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u63a2\u305b\u3070\u3042\u308b\u3002\n\u3057\u304b\u3057\u3001\u3069\u308c\u3082(\u975e\u540c\u671f\u5165\u529b\u304c\u3067\u304d\u308b\u3082\u306e\u306f)Windows\u3067\u52d5\u304b\u306a\u3044\u3002\u4e00\u5fdc\u3001\u52d5\u304f\u3082\u306e\u304c\u3067\u304d\u305f\u306e\u3067\u516c\u958b\u3059\u308b\u3002\n\n#\u30b5\u30fc\u30d0\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0\n\u300cpython server.py IP\u30a2\u30c9\u30ec\u30b9\u300d\u3068\u3057\u3066\u8d77\u52d5\n\n```python:server.py\nimport sys, socket, select\n \ndef broadcast(socklist, server_socket, sock, message):\n    print(message)\n    for socket in socklist:\n        if socket != server_socket and socket != sock :\n            try :\n                socket.send(message.encode())\n            except :\n                socket.close()\n                socklist.remove(socket)\n \nif __name__ == '__main__':\n    port, socklist, server = 5001, [], '127.0.0.1' if len(sys.argv) <= 1 else sys.argv[1]\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind((server, port))\n    server_socket.listen(10)\n    socklist.append(server_socket)\n    print('Start')\n    while True:\n        read_sockets, write_sockets, error_sockets = select.select(socklist, [], [])\n        for sock in read_sockets:\n            if sock == server_socket:\n                sockfd, addr = server_socket.accept()\n                socklist.append(sockfd)\n                broadcast(socklist, server_socket, sockfd, '[%s:%s] Enter' % addr)\n            else:\n                try:\n                    data = sock.recv(4096).decode()\n                    if data == '': raise Exception('Done')\n                    if data:\n                        broadcast(socklist, server_socket, sock, data)                \n                except Exception as e:\n                    print(e)\n                    broadcast(socklist, server_socket, sock, '[%s, %s] Exit' % addr)\n                    sock.close()\n                    socklist.remove(sock)\n```\n\n#\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\n\u300cpython client.py \u30e6\u30fc\u30b6\u30fc\u540d IP\u30a2\u30c9\u30ec\u30b9\u300d\u3068\u3057\u3066\u5b9f\u884c\n\n```python:client.py\nimport sys, socket, select, threading\n \ndef prompt(user) :\n    sys.stdout.write('%s> ' % user)\n    sys.stdout.flush()\n \nif __name__ == \"__main__\":\n    if len(sys.argv) < 3:\n        print('Usage : python %s user host' % sys.argv[0])\n        sys.exit()\n    (user, host), port = sys.argv[1:3], 5001\n    server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try :\n        server_sock.connect((host, port))\n    except :\n        print('Unable to connect')\n        sys.exit()\n    print('Start')\n    def listen():\n        while True:\n            read_sockets, write_sockets, error_sockets = select.select([server_sock], [], [])\n            try:\n                data = server_sock.recv(4096).decode()\n            except:\n                break\n            sys.stdout.write('\\r%s\\n' % data)\n            prompt(user)\n        print('\\rTerminated')\n    t = threading.Thread(target=listen)\n    t.start()\n    prompt(user)\n    while True:\n        msg = sys.stdin.readline().strip()\n        if not msg:\n            server_sock.close()\n            break\n        try:\n            server_sock.send(('%s| %s' % (user, msg)).encode())\n        except:\n            break\n        prompt(user)\n```\nPython2\u7cfb\u3067\u306f\u3001ASCII\u306e\u307fOK\u3002\n", "tags": ["Python", "chat", "socket"]}