{"context": "\n\nC++\u306e\u3064\u307e\u305a\u304d\u30dd\u30a4\u30f3\u30c8\u3092\u7121\u99c4\u306b\u8a73\u8aac\n\u306f\u3058\u3081\u307e\u3057\u3066\uff08\uff1f\uff09\u3001\u3044\u306a\u3080\u5148\u751f\u3068\u7533\u3057\u307e\u3059\nC++\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc12\u65e5\u76ee\u306f\n\u30aa\u30f3\u30e9\u30a4\u30f3\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u300cC++\u306e\u4f1a\u300d\u3067\u306e\u8cea\u554f\u3084\n\u8aad\u66f8\u4f1a\u306e\u4f1a\u8a71\u3084\n\u81ea\u5206\u306e\u4f53\u9a13\u3092\u3082\u3068\u306b\nC++\u306e\u3064\u307e\u305a\u304d\u30dd\u30a4\u30f3\u30c8\u3092\u89e3\u8aac\u3057\u307e\u3059\uff08\u4f1a\u8a71\u306e\u713c\u304d\u307e\u3057\u3067\u3059\nTemplate\u5927\u597d\u304d\u306a\u4eba\u306a\u306e\u3067Template\u95a2\u9023\u304c\u591a\u3044\uff08\u3059\u3079\u3066\uff1f\n\nstd::array\u306euniform initialization\nC++11\u304b\u3089\u306funiform initialization\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u304c\nstd::array\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u304a\u3089\u305a\n\u7d44\u307f\u8fbc\u307f\u914d\u5217\u3068\u540c\u69d8\u306b\u521d\u671f\u5316\u30ea\u30b9\u30c8\u3067\u521d\u671f\u5316\u3059\u308b\u5024\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\n\u3067\u306f\u3055\u3063\u305d\u304f\u3001\nstd::array< int, 4 > a{ 1, 2, 3, 4 } ; // error!\n\n\u6b8b\u5ff5\u306a\u304c\u3089\u30a8\u30e9\u30fc\u3067\u3059\nstd::array\u306f\u30e1\u30f3\u30d0\u5909\u6570\u3068\u3057\u3066\u914d\u5217\u3092\u6301\u3064\u305f\u3081\u521d\u671f\u5316\u5b50\u304c\u914d\u5217\u3092\u521d\u671f\u5316\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\n\u914d\u5217\u306e\u521d\u671f\u5316\u306f\u30ea\u30b9\u30c8\u521d\u671f\u5316\u3067\u3059\n\u3064\u307e\u308a\u3001\u4e8c\u91cd\u306b\u6ce2\u30ab\u30c3\u30b3\u3092\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\n\u3082\u3057\u304f\u306f\u521d\u671f\u5316\u4ee3\u5165\u306b\u3059\u308b\u304b\u306e\u3069\u3061\u3089\u304b\u3067\u3059\nstd::array< int, 4 > a{ { 1, 2, 3, 4 } } ; // OK!\nstd::array< int, 4 > b = { 1, 2, 3, 4 } ; // OK!\n\nOK\u306a\u306e\u3067\u3059\u304c\u4e0b\u306e\u30b3\u30fc\u30c9\u306fclang\u3060\u3068warning\u306b\u306a\u308a\u6ce2\u30ab\u30c3\u30b3\u3092\u4e8c\u91cd\u306b\u3059\u308b\u3088\u3046\u4fc3\u3055\u308c\u308b\u3088\u3046\u3067\u3059\n\nauto\u306e\u6ce8\u610f\u70b9\nauto\u306f\u975e\u5e38\u306b\u4fbf\u5229\u3067\u3059\u304c\u3001\u5e7e\u3064\u304b\u77e5\u3063\u3066\u304a\u304f\u3079\u304d\u3053\u3068\u304c\u3042\u308a\u307e\u3059\n\nauto\u306e\u4e00\u610f\u6027\n\u4e00\u3064\u306eauto\u306f\u4e00\u3064\u306e\u578b\u3092\u8868\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\n\u4f8b\u3048\u3070\u3001\u6b21\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\nauto a=1,b=1.0; // error! a\u3068b\u306f\u540c\u3058\u578b\u306b\u63a8\u8ad6\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\n\nauto\u306f\u4e00\u610f\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u3067a\u304cint, b\u304cdouble\u306b\u63a8\u6e2c\u3055\u308c\u308b\u3053\u306e\u30b3\u30fc\u30c9\u306fill-formed\u306b\u306a\u308a\u307e\u3059\n\nauto\u3068template\u306e\u9055\u3044\nauto\u306f{}\u3067\u521d\u671f\u5316\u3057\u305f\u5834\u5408\u306b\u306f\u5fc5\u305astd::initializer_list\u3067\u3042\u308b\u3068\u63a8\u6e2c\u3057\u307e\u3059\n\u5bfe\u3057\u3066\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d1\u30e9\u30e1\u30fc\u30bfT\u306fstd::initializer_list\u3068\u306f\u63a8\u6e2c\u3057\u307e\u305b\u3093\ntemplate < typename T>\nvoid f( T ) {} ;\n\nauto x = { 1, 3, 5 } ; // x's type is std::initializer_list<int>\n\nf( { 1, 3, 5 } ) ; // can't deduce T\n\n\u3053\u306e\u95a2\u6570\u306e\u63a8\u6e2c\u306f\u3001\u5f15\u6570\u3092\u672a\u77e5\u306e\u578bT\u306einitializer_list\u3068\u3059\u308b\u3053\u3068\u3067\u89e3\u6c7a\u3067\u304d\u308b\ntemplate < typename T>\nvoid f( std::initializer_list<T> ) {} ;\n\nf( { 1, 3, 5 } ) ; // OK! T is int, and parameter type is initializer_list<int>\n\nC++14\u304b\u3089\u306f\u3001\u95a2\u6570\u306e\u623b\u308a\u5024\u3092auto\u306b\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\n\u3053\u3053\u3067\u6ce8\u610f\u3059\u3079\u304d\u306a\u306e\u306f\u623b\u308a\u5024\u3092auto\u306b\u3057\u305f\u95a2\u6570\u306e\u623b\u308a\u5024\u306e\u63a8\u8ad6\u306f\nauto\u306e\u898f\u5247\u3067\u306f\u306a\u304f\u3001template\u306e\u898f\u5247\u3067\u884c\u308f\u308c\u308b\u3068\u3044\u3046\u3053\u3068\u3060\n\u3064\u307e\u308a\u3001\u623b\u308a\u5024\u306b\u8a18\u8ff0\u3055\u308c\u305fbraced-init list( {}\u3067\u56f2\u307e\u308c\u305f\u30ea\u30b9\u30c8 )\u304cinitializer_list\u3068\u63a8\u8ad6\u3055\u308c\u306a\u3044\nauto f()\n{\n    return { 1, 3, 5 } ; // can't deduce !\n}\n\n\n\u30b3\u30f3\u30c6\u30ca\u306e\u9078\u3073\u65b9\n\u300c\u30b3\u30f3\u30c6\u30ca\u306e\u7a2e\u985e\u304c\u591a\u304f\u3066\u3001\u3069\u308c\u3092\u4f7f\u3048\u3070\u3044\u3044\u306e\u304b\u308f\u304b\u3089\u306a\u3044\u300d\n\u306a\u3093\u3066\u3053\u3068\u306f\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\n\u305f\u304f\u3055\u3093\u306e\u7a2e\u985e\u304c\u3042\u308a\u307e\u3059\u304c\n\u6700\u6709\u529b\u5019\u88dc\u306fvector\u3067\u3059\n\u5358\u7d14\u306a\u3086\u3048\u306b\u307b\u3068\u3093\u3069\u306e\u5834\u5408\u306b\u9ad8\u901f\u3067\u3059\n\u56fa\u5b9a\u9577\u306e\u914d\u5217\u3092\u7528\u3044\u305f\u3044\u3044\u305f\u3044\u5834\u5408\u306f\u914d\u5217\u578b\uff08int[5]\u306e\u3088\u3046\u306a\uff09\u3092\u7528\u3044\u308b\u3088\u308a\u3082\u9ad8\u6a5f\u80fd\u306aarray\u3092\u7528\u3044\u308b\u306e\u304c\u3088\u3044\u3067\u3059\n\u5024\u306e\u9ad8\u901f\u306a\u691c\u7d22\u3092\u5fc5\u8981\u3068\u3059\u308b\u5834\u5408\u306fmap\u3084unordered_map\u306e\u3088\u3046\u306a\u9023\u60f3\u30b3\u30f3\u30c6\u30ca\u3092\u4f7f\u7528\u3059\u308b\u3068\u3088\u3044\u3067\u3057\u3087\u3046\nmap\u3068\u540d\u306e\u3064\u3044\u305f\u30b3\u30f3\u30c6\u30ca\u306f\u56fa\u6709\u306e\u30e1\u30f3\u30d0\u95a2\u6570find()\u3092\u3082\u3061\u3001\u5185\u90e8\u69cb\u9020\u3092\u5229\u7528\u3057\u305f\u9ad8\u901f\u306a\u691c\u7d22\u3092\u63d0\u4f9b\u3057\u307e\u3059\n\u4ee5\u4e0b\u306b\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u63d0\u4f9b\u3055\u308c\u308b\u30b3\u30f3\u30c6\u30ca\u306e\u7a2e\u985e\u3068\u7279\u5fb4\u3092\u307e\u3068\u3081\u307e\u3057\u305f\n\n\n\n\u30b3\u30f3\u30c6\u30ca\u306e\u540d\u524d\n\u30b3\u30f3\u30c6\u30ca\u306e\u8aac\u660e\n\u30ab\u30c6\u30b4\u30ea\n\n\n\n\nvector\n\u52d5\u7684\u914d\u5217\n\u30b7\u30fc\u30b1\u30f3\u30b9\u30b3\u30f3\u30c6\u30ca\n\n\narray\n\u56fa\u5b9a\u9577\u914d\u5217\n\u30b7\u30fc\u30b1\u30f3\u30b9\u30b3\u30f3\u30c6\u30ca\n\n\nlist\n\u53cc\u65b9\u5411\u30ea\u30b9\u30c8. \u4efb\u610f\u4f4d\u7f6e\u8981\u7d20\u306e\u633f\u5165\u524a\u9664\u304c\u9ad8\u901f\n\u30b7\u30fc\u30b1\u30f3\u30b9\u30b3\u30f3\u30c6\u30ca\n\n\nforward_list\n\u5358\u65b9\u5411\u30ea\u30b9\u30c8\n\u30b7\u30fc\u30b1\u30f3\u30b9\u30b3\u30f3\u30c6\u30ca\n\n\ndeque\n\u4e21\u7aef\u30ad\u30e5\u30fc\n\u30b7\u30fc\u30b1\u30f3\u30b9\u30b3\u30f3\u30c6\u30ca\n\n\nqueue\n\u30ad\u30e5\u30fc\n\u30b3\u30f3\u30c6\u30ca\u30a2\u30c0\u30d7\u30bf\n\n\npriority_queue\n\u512a\u5148\u9806\u5e8f\u4ed8\u304d\u30ad\u30e5\u30fc\n\u30b3\u30f3\u30c6\u30ca\u30a2\u30c0\u30d7\u30bf\n\n\nstack\n\u30b9\u30bf\u30c3\u30af\n\u30b3\u30f3\u30c6\u30ca\u30a2\u30c0\u30d7\u30bf\n\n\nmap\n\u9023\u60f3\u914d\u5217. \u30ad\u30fc\u3068\u5024\u306e\u30da\u30a2\u3092\u4fdd\u6301\u3059\u308b. \u30ad\u30fc\u304b\u3089\u5024\u3092\u53d6\u308a\u51fa\u3059\u306e\u304c O(log N) \u3068\u9ad8\u901f\n\u9023\u60f3\u30b3\u30f3\u30c6\u30ca\n\n\nmultimap\n\u91cd\u8907\u53ef\u80fd\u306a\u9023\u60f3\u914d\u5217\n\u9023\u60f3\u30b3\u30f3\u30c6\u30ca\n\n\nunordered_map\n\u30cf\u30c3\u30b7\u30e5\u306b\u3088\u308b\u9023\u60f3\u914d\u5217\n\u975e\u9806\u5e8f\u9023\u60f3\u30b3\u30f3\u30c6\u30ca\n\n\nunordered_multimap\n\u30cf\u30c3\u30b7\u30e5\u306b\u3088\u308b\u91cd\u8907\u53ef\u80fd\u306a\u9023\u60f3\u914d\u5217\n\u975e\u9806\u5e8f\u9023\u60f3\u30b3\u30f3\u30c6\u30ca\n\n\nset\n\u9806\u5e8f\u4ed8\u96c6\u5408\n\u9023\u60f3\u30b3\u30f3\u30c6\u30ca\n\n\nmultiset\n\u91cd\u8907\u53ef\u80fd\u306a\u96c6\u5408\uff08\u591a\u91cd\u96c6\u5408\uff09\n\u9023\u60f3\u30b3\u30f3\u30c6\u30ca\n\n\nunordered_set\n\u30cf\u30c3\u30b7\u30e5\u306b\u3088\u308b\u96c6\u5408\n\u975e\u9806\u5e8f\u9023\u60f3\u30b3\u30f3\u30c6\u30ca\n\n\nunordered_multiset\n\u30cf\u30c3\u30b7\u30e5\u306b\u3088\u308b\u91cd\u8907\u53ef\u80fd\u306a\u96c6\u5408\uff08\u591a\u91cd\u96c6\u5408\uff09\n\u975e\u9806\u5e8f\u9023\u60f3\u30b3\u30f3\u30c6\u30ca\n\n\n\n\n\u30b7\u30fc\u30b1\u30f3\u30b9\u30b3\u30f3\u30c6\u30ca\n\u8981\u7d20\u306e\u9806\u5e8f\u304c\u7dad\u6301\u3055\u308c\u308b\u30b3\u30f3\u30c6\u30ca\n\u9023\u60f3\u30b3\u30f3\u30c6\u30ca\n\u8981\u7d20\u304c\u6574\u5217\u3055\u308c\u3066\u683c\u7d0d\u3055\u308c\u308b\u30b3\u30f3\u30c6\u30ca\n\u975e\u9806\u5e8f\u9023\u60f3\u30b3\u30f3\u30c6\u30ca\n\u8981\u7d20\u306b\u9806\u5e8f\u304c\u306a\u304f\u3001\u30cf\u30c3\u30b7\u30e5\u3092\u7528\u3044\u3066\u7ba1\u7406\u3055\u308c\u308b\u30b3\u30f3\u30c6\u30ca\n\u30b3\u30f3\u30c6\u30ca\u30a2\u30c0\u30d7\u30bf\n\u5b9f\u969b\u306b\u306f\u30b3\u30f3\u30c6\u30ca\u3067\u306f\u306a\u304f\u3001\u4ed6\u306e\u30b3\u30f3\u30c6\u30ca\u3078\u306e\u64cd\u4f5c\u3092\u4e00\u90e8\u5236\u9650\u3059\u308b\u5f62\u3067\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u8868\u73fe\u3059\u308b\u30b3\u30f3\u30c6\u30ca\n\n\n\u30b3\u30f3\u30c6\u30ca\u3068\u30a4\u30c6\u30ec\u30fc\u30bf\n\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u306f\u30b3\u30f3\u30c6\u30ca\u3068\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4ef2\u4ecb\u3059\u308b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3067\u3059\n1. operator*\u3067\u5024\u3092\u53d6\u308a\u51fa\u305b\u308b\n2. operator++\u3067\u6b21\u306e\u8981\u7d20\u3092\u3055\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u9032\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\u3092\u6e80\u305f\u3059\u3082\u306e\u3092\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u3057\u3066\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\n\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u5177\u4f53\u7684\u306a\u30b3\u30f3\u30c6\u30ca\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u64cd\u4f5c\u3059\u308b\u306e\u3067\u306f\u306a\u304f\n\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u3088\u308a\u6a2a\u65ad\u53ef\u80fd\u306a\u7bc4\u56f2\u3092\u64cd\u4f5c\u306e\u5bfe\u8c61\u3068\u3057\u307e\u3059\n\u3053\u306e\u3053\u3068\u306b\u3088\u308a\u3042\u3089\u3086\u308b\u30b3\u30f3\u30c6\u30ca\u306b\u5bfe\u3057\u3066\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u9069\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\n\u30b3\u30f3\u30c6\u30ca\u306b\u306f\u7570\u306a\u308b\u7a2e\u985e\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u53d6\u5f97\u3067\u304d\u308b\u30e1\u30f3\u30d0\u95a2\u6570\uff08\u30d5\u30ea\u30fc\u95a2\u6570\u3082\u3042\u308b\uff09\u304c\u3042\u308b\u306e\u3067\u76ee\u7684\u306b\u5408\u308f\u305b\u3066\u4f7f\u3044\u5206\u3051\u307e\u3057\u3087\u3046\nbegin(), end()   : \u3075\u3064\u3046\u306eiterator\n\u8981\u7d20\u3092\u5909\u66f4\u3059\u308b\u3068\u304d\u306b\u3069\u3046\u305e\nstd::vector<int> v{1,2,3,4,5} ;\n\nfor ( auto&& iter = v.begin(); iter != v.end(); ++iter)\n    *iter = 0;\n\ncbegin(), cend() : const_ierator\u3092\u53d6\u5f97\nconst\u30a4\u30c6\u30ec\u30fc\u30bf\u3001\u8981\u7d20\u3092\u5909\u66f4\u3057\u306a\u3044\u3068\u304d\u306b\u3069\u3046\u305e\nstd::vector<int> v{1,2,3,4,5} ;\n\nfor ( auto&& iter = v.cbegin(); iter != v.cend(); ++iter)\n    std::cout << *iter << std::endl;\n\nrbegin(), rend() : reverse_iterator\u3092\u53d6\u5f97\n\u9006\u9806\u30a4\u30c6\u30ec\u30fc\u30bf\u3001\u30b1\u30c4\u304b\u3089\u8d70\u67fb\u3057\u3066\u8981\u7d20\u3092\u5909\u66f4\u3057\u305f\u3044\u3068\u304d\u306b\u3069\u3046\u305e\n    std::vector<int> v1{1,2,3,4,5,6,7,8,9};\n    std::vector<int> v2{1,2,3,4,5};\n\n    for(auto&& iter1 = v1.rbegin(), iter2 = v2.rbegin(); iter2 != v2.rend(); ++iter1,++iter2)\n        *iter2 = *iter1;\n\ncrbegin(), crend() : const_reverse_iterator\u3092\u53d6\u5f97\nconst\u9006\u9806\u30a4\u30c6\u30ec\u30fc\u30bf\u3001\u30b1\u30c4\u304b\u3089\u8d70\u67fb\u3057\u3066\u8981\u7d20\u3092\u5909\u66f4\u3057\u306a\u3044\u3068\u304d\u306b\u3069\u3046\u305e\nstd::vector<int> v{1,2,3,4,5} ;\n\nfor ( auto&& iter = v.crbegin(); iter != v.crend(); ++iter)\n    std::cout << *iter << std::endl;\n\n\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u306f\u5e7e\u3064\u304b\u7a2e\u985e\u304c\u3042\u308a\u3001\u3067\u304d\u308b\u3053\u3068\u304c\u9055\u3044\u307e\u3059\n\n\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u5206\u985e\n\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u5b9a\u7fa9\u3055\u308c\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u5206\u985e\n\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u63d0\u4f9b\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u6b21\u306e\u3044\u305a\u308c\u304b\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5f15\u6570\u3068\u3057\u3066\u8981\u6c42\u3059\u308b\n\n\u5165\u529b\u30a4\u30c6\u30ec\u30fc\u30bf\uff08Input Iterator\uff09\n\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u524d\u9032\u3001\u8981\u7d20\u306e\u8aad\u307f\u51fa\u3057\u304c\u3067\u304d\u308b\uff08std::istream_iterator\uff09\n\u51fa\u529b\u30a4\u30c6\u30ec\u30fc\u30bf\uff08Output Iterator\uff09\n\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u524d\u9032\u3001\u8981\u7d20\u306e\u66f8\u304d\u8fbc\u307f\u304c\u3067\u304d\u308b\uff08std::ostream_iterator, insert_iterator\uff09\n\u524d\u65b9\u30a4\u30c6\u30ec\u30fc\u30bf\uff08Forward Iterator\uff09\n\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u524d\u9032\u3001\u8981\u7d20\u306e\u8aad\u307f\u51fa\u3057\u3001\u66f8\u304d\u8fbc\u307f\u304c\u3067\u304d\u308b\n\u524d\u9032\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u5165\u529b\u30a4\u30c6\u30ec\u30fc\u30bf\u3001\u51fa\u529b\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u8981\u6c42\u3055\u308c\u308b\u5834\u5408\u306b\u3082\u4f7f\u7528\u3067\u304d\u308b\n\uff08forward_list, unordered_map, unordered_set\u306b\u304a\u3051\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u306a\u3069\u304c\u8a72\u5f53\uff09\n\u53cc\u65b9\u5411\u30a4\u30c6\u30ec\u30fc\u30bf\uff08Bidirectional Iterator\uff09\n\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u524d\u9032\u3068\u5f8c\u9000\u3001\u8981\u7d20\u306e\u8aad\u307f\u51fa\u3057\u3001\u66f8\u304d\u8fbc\u307f\u304c\u3067\u304d\u308b\n\u53cc\u65b9\u5411\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u524d\u9032\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u8981\u6c42\u3055\u308c\u308b\u5834\u5408\u306b\u3082\u4f7f\u7528\u3067\u304d\u308b\n\uff08list, map, set\u306b\u304a\u3051\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u306a\u3069\u304c\u8a72\u5f53\uff09\n\u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9\u30a4\u30c6\u30ec\u30fc\u30bf\uff08Random Access Iterator\uff09\n\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u524d\u9032\u3068\u5f8c\u9000\u3001\u8981\u7d20\u306e\u66f8\u304d\u8fbc\u307f\u3001\u8aad\u307f\u51fa\u3057\u52a0\u3048\u3066\u3001\u4efb\u610f\u306e\u4f4d\u7f6e\u306b\u3042\u308b\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\n\u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u53cc\u65b9\u5411\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u8981\u6c42\u3055\u308c\u308b\u5834\u5408\u3067\u3082\u4f7f\u7528\u3067\u304d\u308b\n\uff08array, deque, vector\u306b\u304a\u3051\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u306a\u3069\u304c\u8a72\u5f53\uff09\n\u914d\u5217\u306e\u8981\u7d20\u3092\u3055\u3059\u30dd\u30a4\u30f3\u30bf\u3082\u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u3057\u3066\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u308b\n\n\niterator\u3068const_iterator\u3068const interator\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u304c\u3059\u3079\u3066\u3092\u8a9e\u3063\u3066\u304f\u308c\u308b\n\n    std::vector<int> v(4);\n    // normal iterator\n    std::vector<int>::iterator iter = a.begin();\n    // const_iterator\n    const std::vector<int>::iterator c_iter = v.begin();\n    // const interator\n    std::vector<int>::const_iterator const_iter = v.begin();\n\n    ++iter;         // OK\n    ++const_iter;   // OK\n    ++c_iter;       // c_iter\u306fconst\u306a\u306e\u3067\u5909\u66f4\u3067\u304d\u306a\u3044\n\n    *iter=3;        // OK\n    *citer=3;       // citr\u306fconst\u3060\u304c, *citr\u306fconst\u3067\u306f\u306a\u3044\u306e\u3067OK\n    *const_iter=3;  // \u3053\u308c\u306f\u30a8\u30e9\u30fc\n\n\n\u306f\u3063\u304d\u308a\u8a00\u3063\u3066\u3001\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3067\u304d\u306a\u3044const iterator\u306e\u51fa\u756a\u306f\u307b\u307c\u306a\u3044\n\u307e\u305f\u3001\u5f53\u305f\u308a\u524d\u3060\u304cconst\u306a\u8981\u7d20\u3092\u6301\u3064\u30b3\u30f3\u30c6\u30ca\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306fconst_iterator\u3068\u306a\u308b\u70b9\u306b\u306f\u7406\u89e3\u304c\u5fc5\u8981\n    const std::vector<int> v(4);\n\n    auto&& const_iter = v.begin();\n\n    ++const_iter ;\n    *const_iter=3;  // \u3053\u308c\u306f\u30a8\u30e9\u30fc\n\n\n\u30e9\u30e0\u30c0\u5f0f\u306e\u63a8\u6e2c\n\u95a2\u6570\u306e\u4e2d\u3067\u30e9\u30e0\u30c0\u5f0f\u306e\u623b\u308a\u5024\u3084\u5f15\u6570\u306e\u578b\u3092\u63a8\u6e2c\u3057\u305f\u3044\u306a\u3093\u3066\u3053\u3068\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\n\u578b\u63a8\u8ad6\u306fdecltype\u3092\u7528\u3044\u3066\ndecltype( x + y )\n\n\u306e\u3088\u3046\u306b\u66f8\u304f\u3068\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\n\u30e9\u30e0\u30c0\u5f0f\u3092decltype\u306e\u4e2d\u306b\u8a18\u8ff0\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\n\u307e\u305f\u3001\u30e9\u30e0\u30c0\u5f0f\u306f\u305d\u308c\u305e\u308c\u30e6\u30cb\u30fc\u30af\u306a\u578b\u3092\u6301\u3061\u307e\u3059\n\u305d\u3053\u3067\u3001\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306b\u5909\u63db\u3059\u308b\u3068\u578b\u63a8\u8ad6\u3067\u304d\u307e\u3059\n#include <vector>\n#include <iostream>\n#include <type_traits>\n#include <boost/type_index.hpp>\n\ntemplate<typename R, typename F, typename A>\nauto return_helper(R(F::*)(A) const) -> R;\n\ntemplate<typename R, typename F, typename A>\nauto arg_helper(R(F::*)(A) const) -> A;\n\ntemplate < typename F >\nvoid func(F){\n    using Return_t = decltype(return_helper(&F::operator()));\n    using Arg_t = decltype(arg_helper(&F::operator()));\n    std::cout << \"return type : \" << boost::typeindex::type_id_with_cvr<Return_t>().pretty_name() << std::endl;\n    std::cout << \"arg type    : \" << boost::typeindex::type_id_with_cvr<Arg_t>().pretty_name() << std::endl;\n}\n\nint main()\n{\n    func([](double&&){return std::vector<int>{1,2,3};});\n    return 0;\n}\n\n\u5b9f\u884c\u7d50\u679c\n\nreturn type : std::vector<int, std::allocator<int> >\narg type    : double&&\n\n\u4e00\u5fdc\u63a8\u8ad6\u3067\u304d\u3066\u3044\u307e\u3059\n\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u578b\u63a8\u8ad6\u898f\u5247\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306fC++\u306b\u6b20\u304b\u305b\u306a\u3044\u6a5f\u80fd\u3067\u3059\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u578b\u63a8\u8ad6\u898f\u5247\u3092\u77e5\u3089\u306a\u3044\u3068\u3088\u304f\u3064\u307e\u305a\u304d\u307e\u3059\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u578b\u63a8\u8ad6\u898f\u5247\u3067\u306fT&&\u3084auto&&\u306f\u30e6\u30cb\u30f4\u30a1\u30fc\u30b5\u30eb\u53c2\u7167\u3068\u547c\u3070\u308c\u7279\u5225\u6271\u3044\u3055\u308c\u307e\u3059\n\u300cEffective Modern C++\u300d\u306e\u7b2c1\u7ae0\u306b\u305d\u3063\u3066 \n\u95a2\u6570\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5ba3\u8a00\u306b\u5206\u3051\u3066\u89e3\u8aac\u3057\u307e\u3059\n\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u578b\u63a8\u8ad6\u305d\u306e\uff11\uff08\u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u304c\u53c2\u7167\u3082\u3057\u304f\u306f\u30dd\u30a4\u30f3\u30bf\u578b\uff09\n\ntemplate < typename T >\nvoid func( T& ) ;\n\nint x = 2 ;         // x \u306f int\nconst int cx= x ;   // cx \u306f const int\nconst int& rx = x ; // rx \u306f x \u3078\u306e const int \u53c2\u7167\n\nfunc(x) ;     // T \u306f int, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306f int&\nfunc(cx) ;    // T \u306f const int, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306f const int&\nfunc(rx) ;    // T \u306f const int, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306f const int&\n\n\nT&\u3092\u4eee\u5f15\u6570\u306b\u3068\u308b\u95a2\u6570\u306bconst\u4fee\u98fe\u3055\u308c\u305f\u578b\u3092\u6e21\u3059\u3068const\u306f\u578b\u306e\u4e00\u90e8\u3068\u3057\u3066\u6271\u308f\u308c\u307e\u3059\n\u53c2\u7167\u306f\u8aad\u307f\u98db\u3070\u3055\u308c\u307e\u3059\n\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u578b\u63a8\u8ad6\u305d\u306e\uff12\uff08\u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u304c\u30e6\u30cb\u30f4\u30a1\u30fc\u30b5\u30eb\u53c2\u7167\uff09\n\u30e6\u30cb\u30f4\u30a1\u30fc\u30b5\u30eb\u53c2\u7167\u3092\u4eee\u5f15\u6570\u306b\u3068\u308b\u5834\u5408\u306f\n\u5de6\u8fba\u5024\u304c\u6e21\u3055\u308c\u305f\u3068\u304d\u306b\u306fT\u306f\u5de6\u8fba\u5024\u53c2\u7167\u3067\u3042\u308b\u3068\u63a8\u8ad6\u3055\u308c\u307e\u3059\n\u53f3\u8fba\u5024\u304c\u6e21\u3055\u308c\u305f\u3068\u304d\u306f\u305d\u306e\uff11\u306e\u898f\u5247\u304c\u9069\u7528\u3055\u308c\u307e\u3059\n\ntemplate < typename T >\nvoid func( T&& ) ;\n\nint x = 2 ;         // x \u306f int\nconst int cx= x ;   // cx \u306f const int\nconst int& rx = x ; // rx \u306f x \u3078\u306e const int \u53c2\u7167\n\nfunc(x) ;     // x\u306f\u5de6\u8fba\u5024, \u3088\u3063\u3066 T \u306f int&, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306f int&\nfunc(cx) ;    // x\u306f\u5de6\u8fba\u5024, \u3088\u3063\u3066 T \u306f const int&, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306f const int&\nfunc(rx) ;    // x\u306f\u5de6\u8fba\u5024, \u3088\u3063\u3066 T \u306f const int&, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306f const int&\nfunc(2) ;     // x\u306f\u53f3\u8fba\u5024, \u3088\u3063\u3066 T \u306f int, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306f int&&\n\n\u7279\u5225\u306a\u898f\u5247\u3067\u53f3\u8fba\u5024\u3068\u5de6\u8fba\u5024\u304c\u533a\u5225\u3055\u308c\u308b\u3053\u3068\u3092\u77e5\u3063\u3066\u304a\u304b\u306a\u304f\u3066\u306f\u306a\u308a\u307e\u305b\u3093\n\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u578b\u63a8\u8ad6\u305d\u306e\uff13\uff08\u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u304c\u53c2\u7167\u3067\u3082\u30dd\u30a4\u30f3\u30bf\u3067\u3082\u306a\u3044\uff09\n\u4eee\u5f15\u6570\u304c\u53c2\u7167\u3067\u3082\u30dd\u30a4\u30f3\u30bf\u3067\u3082\u306a\u3044\u5834\u5408\u306f\u5024\u6e21\u3057\u306b\u306a\u308a\u3001\u305d\u306e\u5834\u5408\u306e\u898f\u5247\u306f\n1. cv\u4fee\u98fe\u306f\u7121\u8996\u3055\u308c\u308b\n2. \u53c2\u7167\u306f\u7121\u8996\u3055\u308c\u308b\n\u3068\u306a\u308a\u307e\u3059\n\ntemplate < typename T >\nvoid func( T ) ;\n\nint x = 2 ;         // x \u306f int\nconst int cx= x ;   // cx \u306f const int\nconst int& rx = x ; // rx \u306f x \u3078\u306e const int \u53c2\u7167\n\nfunc(x) ;     // T \u306f int, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306f int\nfunc(cx) ;    // T \u306f int, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306f int\nfunc(rx) ;    // T \u306f int, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306f int\n\n\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u578b\u63a8\u8ad6\uff1a\u86c7\u8db3\uff08\u4eee\u5f15\u6570\u304ccv\u4fee\u98fe\u3055\u308c\u3066\u3044\u308b\u5834\u5408\uff09\nN4140\u306e14.8.2.1 Deducing template arguments from a function call\u3092\u53c2\u7167\u3059\u308b\u3068\n\n3 If P is a cv-qualified type, the top level cv-qualifiers of P\u2019s type are ignored for type deduction. If P is a\nreference type, the type referred to by P is used for type deduction. If P is an rvalue reference to a cvunqualified\ntemplate parameter and the argument is an lvalue, the type \u201clvalue reference to A\u201d is used in\nplace of A for type deduction. [ Example:\ntemplate <class T> int f(T&&);\ntemplate <class T> int g(const T&&);\nint i;\nint n1 = f(i); // calls f<int&>(int&)\nint n2 = f(0); // calls f<int>(int&&)\nint n3 = g(i); // error: would call g<int>(const int&&), which\n// would bind an rvalue reference to an lvalue\n\n\u2014end example ]\n\n\u8981\u7d04\u3059\u308b\u3068\u3001\u4eee\u5f15\u6570\u304ccv\u4fee\u98fe\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306b\u306f\u63a8\u8ad6\u306e\u6bb5\u968e\u3067\u5f15\u6570\u306e\u578b\u306ecv\u4fee\u98fe\u306f\u7121\u8996\u3055\u308c\u307e\u3059\n\u305d\u306e\u5f8c\u3001\u53c2\u7167\u3082\u7121\u8996\u3055\u308c\u3066\u578b\u63a8\u8ad6\u3055\u308c\u307e\u3059\ntemplate < typename T >\nvoid f( T& ) ;\n\ntemplate < typename T>\nvoid g( const T& ) ;\n\nint x = 2 ;         // x \u306f int\nconst int cx= x ;   // cx \u306f const int\nconst int& rx = x ; // rx \u306f x \u3078\u306e const int \u53c2\u7167\n\nf(x) ;     // T \u306f int, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306f int&\nf(cx) ;    // T \u306f const int, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306f const int&\nf(rx) ;    // T \u306f const int, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306f const int&\n\ng(x) ;     // T \u306f int, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306f const int&\ng(cx) ;    // T \u306f int, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306f const int&\ng(rx) ;    // T \u306f int, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306f const int&\n\n\n\u3068\u306a\u308a\u307e\u3059\nT&\u3092\u4f7f\u3046\u3068const\u6027\u304c\u4f1d\u64ad\u3057\u307e\u3059\nconst T&\u3092\u4f7f\u3046\u3068const\u6027\u3092\u5f37\u5236\u3067\u304d\u307e\u3059\n\u307e\u305f\u3001const \u306a lvalue reference \u306frvalue\u3092\u675f\u7e1b\u3067\u304d\u308b\u306e\u3067\u53f3\u8fba\u5024\u3001\u5de6\u8fba\u5024\u306b\u3064\u3044\u3066const lvalue\u53c2\u7167\u3067\u304d\u307e\u3059\n\u4ee5\u4e0a\u304c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u578b\u63a8\u8ad6\u898f\u5247\u3067\u3059\n\n\u660e\u793a\u7684\u306a\u578b\u6307\u5b9a\n\u660e\u793a\u7684\u306b\u578b\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u3069\u3046\u3067\u3057\u3087\u3046\n\u660e\u793a\u7684\u306b\u578b\u3092\u308f\u305f\u3057\u3066\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u7528\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u306f\n\u578b\u63a8\u8ad6\u3068\u306f\u5225\u306e\u898f\u5247\u304c\u9069\u7528\u3055\u308c\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306f\u3069\u306e\u3088\u3046\u306b\u6271\u308f\u308c\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\ntemplate < typename T >\nvoid f( T&& ) ;\n\nint x = 2 ;\n\nf<const int>(x) ;\n\n\u7d50\u8ad6\u304b\u3089\u3044\u3046\u3068\u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\n\u9806\u3092\u304a\u3063\u3066\u8aac\u660e\u3059\u308b\u3068\n\u660e\u793a\u7684\u306b\u578b\u3092\u6307\u5b9a\u3059\u308b\u3068\u6307\u5b9a\u3055\u308c\u305f\u578b\u304c\u305d\u306e\u307e\u307eT\u306b\u9069\u7528\u3055\u308c\u307e\u3059\n\u3064\u307e\u308a\u3001T\u306fconst int\u3067\u3042\u308a\n\u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306fconst int&&\u3068\u306a\u308a\u307e\u3059\n\u53f3\u8fba\u5024\u53c2\u7167\u306f\u5de6\u8fba\u5024\u3092\u675f\u7e1b\u3067\u304d\u306a\u3044\u306e\u3067\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\n\u3053\u306e\u4f8b\u3067\u306f\u76f4\u611f\u7684\u306b\u306fT\u304cconst int\u306b\u306a\u308a, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u3092\u30e6\u30cb\u30f4\u30a1\u30fc\u30b5\u30eb\u53c2\u7167\u306e\u898f\u5247\u3067const int&\n\u3068\u3059\u308b\u3053\u3068\u3067const\u6027\u3092\u5f37\u5236\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u5931\u6557\u3057\u307e\u3059\n\u30e6\u30cb\u30f4\u30a1\u30fc\u30b5\u30eb\u53c2\u7167\u306e\u6700\u5927\u306e\u5229\u70b9\u306f\u30e0\u30fc\u30d6\u30fb\u30bb\u30de\u30f3\u30c6\u30a3\u30af\u30b9\u304c\u4f7f\u3048\u308b\u70b9\u3067\u3057\u3087\u3046\nconst\u6027\u3092\u5f37\u5236\u3059\u308b\u3068\u30e0\u30fc\u30d6\u30fb\u30bb\u30de\u30f3\u30c6\u30a3\u30af\u30b9\u304c\u4f7f\u3048\u306a\u3044\u305f\u3081const T&\u3092\u4f7f\u3046\u3079\u304d\u3067\u3059\n\u66f4\u306b\u5371\u967a\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\ntemplate < typename T >\nvoid f( const T& x ){\n    x = 0 ;\n}\n\nint x = 2 ;\nf< int& >( x ) ;\n\n\u3053\u306e\u30b3\u30fc\u30c9\u306fconst\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u306f\u305a\u306e\u5909\u6570x\u3092\u66f8\u304d\u304b\u3048\u3066\u3044\u307e\u3059\n\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u307b\u3057\u3044\u3067\u3059\n\u304c\uff01\n\u6b8b\u5ff5\u306a\u3053\u3068\u306b\uff08\uff1f\uff09\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u3001\u5909\u6570\u3092\u66f8\u304d\u304b\u3048\u308b\u3053\u3068\u306b\u6210\u529f\u3057\u307e\u3059\uff01\n\u53c2\u7167\u578b\u3092\u660e\u793a\u7684\u306b\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u308f\u305f\u3057\u305f\u3068\u304d\u306b\u306f\n\u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u30ec\u30d9\u30eb\u3067\u306ecv\u4fee\u98fe\u306f\u7121\u8996\u3055\u308c\u308c\u308b\u306e\u3067\u3059\n\u307e\u3042\u3001\u3053\u3093\u306a\u610f\u5473\u4e0d\u660e\u306a\u4f7f\u3044\u65b9\u3092\u3059\u308b\u4eba\u306f\u3044\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\n\n\u8dcb\u6587\n\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u3044\u3066\u3044\u308b\u9593\u306b\u3082\u3001\u3069\u3093\u3069\u3093\u8e93\u3044\u305f\u305f\u3081\n\u975e\u5e38\u306b\u9577\u3044\u8a18\u4e8b\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\n\u6700\u5f8c\u307e\u3067\u8aad\u3093\u3067\u304f\u3060\u3055\u3063\u305f\u65b9\u306f\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\n\u304a\u304b\u3057\u306a\u7b87\u6240\u304c\u3042\u308c\u3070\u3001\u3054\u6307\u6458\u304f\u3060\u3055\u3044\n\u660e\u65e5\u306f\u3001okdshin\u3055\u3093\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n\u53c2\u8003\u6587\u732e\n\u300e\u65b0\u6539\u8a02\u7248 C++\u30dd\u30b1\u30c3\u30c8\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u300f\n(\u9ad8\u6a4b\u6676\u3001\u5b89\u85e4\u654f\u5f66\u3001\u4e00\u6238\u512a\u4ecb\u3001\u6960\u7530\u76f4\u77e2\u3001\u9053\u5316\u5e2b\u3001\u6e6f\u671d\u525b\u4ecb\u3000\u8457\u3001\u682a\u5f0f\u4f1a\u793e\u6280\u8853\u8a55\u8ad6\u793e\u3001ISBN 978-4-7741-7408-2)\n\u300eEffective Modern C++ \u2015C++11/14\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u9032\u5316\u3055\u305b\u308b42\u9805\u76ee\u300f\n(Scott Meyers \u8457\u3001\u30aa\u30e9\u30a4\u30ea\u30fc\u30fb\u30b8\u30e3\u30d1\u30f3\u3001ISBN 978-4-87311-736-2)\nN3777\nN4140\n#C++\u306e\u3064\u307e\u305a\u304d\u30dd\u30a4\u30f3\u30c8\u3092\u7121\u99c4\u306b\u8a73\u8aac\n\u306f\u3058\u3081\u307e\u3057\u3066\uff08\uff1f\uff09\u3001\u3044\u306a\u3080\u5148\u751f\u3068\u7533\u3057\u307e\u3059\nC++\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc12\u65e5\u76ee\u306f\n\u30aa\u30f3\u30e9\u30a4\u30f3\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u300cC++\u306e\u4f1a\u300d\u3067\u306e\u8cea\u554f\u3084\n\u8aad\u66f8\u4f1a\u306e\u4f1a\u8a71\u3084\n\u81ea\u5206\u306e\u4f53\u9a13\u3092\u3082\u3068\u306b\nC++\u306e\u3064\u307e\u305a\u304d\u30dd\u30a4\u30f3\u30c8\u3092\u89e3\u8aac\u3057\u307e\u3059\uff08\u4f1a\u8a71\u306e\u713c\u304d\u307e\u3057\u3067\u3059\nTemplate\u5927\u597d\u304d\u306a\u4eba\u306a\u306e\u3067Template\u95a2\u9023\u304c\u591a\u3044\uff08\u3059\u3079\u3066\uff1f\n\n##std::array\u306euniform initialization\n\nC++11\u304b\u3089\u306funiform initialization\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u304c\n`std::array`\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u304a\u3089\u305a\n\u7d44\u307f\u8fbc\u307f\u914d\u5217\u3068\u540c\u69d8\u306b\u521d\u671f\u5316\u30ea\u30b9\u30c8\u3067\u521d\u671f\u5316\u3059\u308b\u5024\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\n\u3067\u306f\u3055\u3063\u305d\u304f\u3001\n\n```cpp\nstd::array< int, 4 > a{ 1, 2, 3, 4 } ; // error!\n```\n\n\u6b8b\u5ff5\u306a\u304c\u3089\u30a8\u30e9\u30fc\u3067\u3059\nstd::array\u306f\u30e1\u30f3\u30d0\u5909\u6570\u3068\u3057\u3066\u914d\u5217\u3092\u6301\u3064\u305f\u3081\u521d\u671f\u5316\u5b50\u304c\u914d\u5217\u3092\u521d\u671f\u5316\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\n\u914d\u5217\u306e\u521d\u671f\u5316\u306f\u30ea\u30b9\u30c8\u521d\u671f\u5316\u3067\u3059\n\u3064\u307e\u308a\u3001\u4e8c\u91cd\u306b\u6ce2\u30ab\u30c3\u30b3\u3092\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\n\u3082\u3057\u304f\u306f\u521d\u671f\u5316\u4ee3\u5165\u306b\u3059\u308b\u304b\u306e\u3069\u3061\u3089\u304b\u3067\u3059\n\n```cpp\nstd::array< int, 4 > a{ { 1, 2, 3, 4 } } ; // OK!\nstd::array< int, 4 > b = { 1, 2, 3, 4 } ; // OK!\n```\nOK\u306a\u306e\u3067\u3059\u304c\u4e0b\u306e\u30b3\u30fc\u30c9\u306fclang\u3060\u3068warning\u306b\u306a\u308a\u6ce2\u30ab\u30c3\u30b3\u3092\u4e8c\u91cd\u306b\u3059\u308b\u3088\u3046\u4fc3\u3055\u308c\u308b\u3088\u3046\u3067\u3059\n\n##auto\u306e\u6ce8\u610f\u70b9\n`auto`\u306f\u975e\u5e38\u306b\u4fbf\u5229\u3067\u3059\u304c\u3001\u5e7e\u3064\u304b\u77e5\u3063\u3066\u304a\u304f\u3079\u304d\u3053\u3068\u304c\u3042\u308a\u307e\u3059\n\n###auto\u306e\u4e00\u610f\u6027\n\u4e00\u3064\u306e`auto`\u306f\u4e00\u3064\u306e\u578b\u3092\u8868\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\n\u4f8b\u3048\u3070\u3001\u6b21\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\n\n```cpp\nauto a=1,b=1.0; // error! a\u3068b\u306f\u540c\u3058\u578b\u306b\u63a8\u8ad6\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\n```\n\n`auto`\u306f\u4e00\u610f\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u3067`a`\u304c`int`, `b`\u304c`double`\u306b\u63a8\u6e2c\u3055\u308c\u308b\u3053\u306e\u30b3\u30fc\u30c9\u306fill-formed\u306b\u306a\u308a\u307e\u3059\n\n###auto\u3068template\u306e\u9055\u3044\n`auto`\u306f`{}`\u3067\u521d\u671f\u5316\u3057\u305f\u5834\u5408\u306b\u306f\u5fc5\u305a`std::initializer_list`\u3067\u3042\u308b\u3068\u63a8\u6e2c\u3057\u307e\u3059\n\u5bfe\u3057\u3066\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf`T`\u306f`std::initializer_list`\u3068\u306f\u63a8\u6e2c\u3057\u307e\u305b\u3093\n\n```cpp\ntemplate < typename T>\nvoid f( T ) {} ;\n\nauto x = { 1, 3, 5 } ; // x's type is std::initializer_list<int>\n\nf( { 1, 3, 5 } ) ; // can't deduce T\n```\n\n\u3053\u306e\u95a2\u6570\u306e\u63a8\u6e2c\u306f\u3001\u5f15\u6570\u3092\u672a\u77e5\u306e\u578b`T`\u306e`initializer_list`\u3068\u3059\u308b\u3053\u3068\u3067\u89e3\u6c7a\u3067\u304d\u308b\n\n```cpp\ntemplate < typename T>\nvoid f( std::initializer_list<T> ) {} ;\n\nf( { 1, 3, 5 } ) ; // OK! T is int, and parameter type is initializer_list<int>\n```\n\nC++14\u304b\u3089\u306f\u3001\u95a2\u6570\u306e\u623b\u308a\u5024\u3092`auto`\u306b\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\n\u3053\u3053\u3067\u6ce8\u610f\u3059\u3079\u304d\u306a\u306e\u306f\u623b\u308a\u5024\u3092`auto`\u306b\u3057\u305f\u95a2\u6570\u306e\u623b\u308a\u5024\u306e\u63a8\u8ad6\u306f\nauto\u306e\u898f\u5247\u3067\u306f\u306a\u304f\u3001__template\u306e\u898f\u5247\u3067\u884c\u308f\u308c\u308b__\u3068\u3044\u3046\u3053\u3068\u3060\n\u3064\u307e\u308a\u3001\u623b\u308a\u5024\u306b\u8a18\u8ff0\u3055\u308c\u305f`braced-init list( {}\u3067\u56f2\u307e\u308c\u305f\u30ea\u30b9\u30c8 )`\u304c`initializer_list`\u3068\u63a8\u8ad6\u3055\u308c\u306a\u3044\n\n```cpp\nauto f()\n{\n    return { 1, 3, 5 } ; // can't deduce !\n}\n```\n\n\n##\u30b3\u30f3\u30c6\u30ca\u306e\u9078\u3073\u65b9\n\u300c\u30b3\u30f3\u30c6\u30ca\u306e\u7a2e\u985e\u304c\u591a\u304f\u3066\u3001\u3069\u308c\u3092\u4f7f\u3048\u3070\u3044\u3044\u306e\u304b\u308f\u304b\u3089\u306a\u3044\u300d\n\u306a\u3093\u3066\u3053\u3068\u306f\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\n\n\u305f\u304f\u3055\u3093\u306e\u7a2e\u985e\u304c\u3042\u308a\u307e\u3059\u304c\n\u6700\u6709\u529b\u5019\u88dc\u306f`vector`\u3067\u3059\n\u5358\u7d14\u306a\u3086\u3048\u306b\u307b\u3068\u3093\u3069\u306e\u5834\u5408\u306b\u9ad8\u901f\u3067\u3059\n\n\u56fa\u5b9a\u9577\u306e\u914d\u5217\u3092\u7528\u3044\u305f\u3044\u3044\u305f\u3044\u5834\u5408\u306f\u914d\u5217\u578b\uff08`int[5]`\u306e\u3088\u3046\u306a\uff09\u3092\u7528\u3044\u308b\u3088\u308a\u3082\u9ad8\u6a5f\u80fd\u306a`array`\u3092\u7528\u3044\u308b\u306e\u304c\u3088\u3044\u3067\u3059\n\n\u5024\u306e\u9ad8\u901f\u306a\u691c\u7d22\u3092\u5fc5\u8981\u3068\u3059\u308b\u5834\u5408\u306f`map`\u3084`unordered_map`\u306e\u3088\u3046\u306a\u9023\u60f3\u30b3\u30f3\u30c6\u30ca\u3092\u4f7f\u7528\u3059\u308b\u3068\u3088\u3044\u3067\u3057\u3087\u3046\nmap\u3068\u540d\u306e\u3064\u3044\u305f\u30b3\u30f3\u30c6\u30ca\u306f\u56fa\u6709\u306e\u30e1\u30f3\u30d0\u95a2\u6570`find()`\u3092\u3082\u3061\u3001\u5185\u90e8\u69cb\u9020\u3092\u5229\u7528\u3057\u305f\u9ad8\u901f\u306a\u691c\u7d22\u3092\u63d0\u4f9b\u3057\u307e\u3059\n\n\u4ee5\u4e0b\u306b\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u63d0\u4f9b\u3055\u308c\u308b\u30b3\u30f3\u30c6\u30ca\u306e\u7a2e\u985e\u3068\u7279\u5fb4\u3092\u307e\u3068\u3081\u307e\u3057\u305f\n\n| \u30b3\u30f3\u30c6\u30ca\u306e\u540d\u524d  | \u30b3\u30f3\u30c6\u30ca\u306e\u8aac\u660e | \u30ab\u30c6\u30b4\u30ea |\n|:------------|:------------|:-----------|\n| vector | \u52d5\u7684\u914d\u5217 | \u30b7\u30fc\u30b1\u30f3\u30b9\u30b3\u30f3\u30c6\u30ca |\n| array | \u56fa\u5b9a\u9577\u914d\u5217 | \u30b7\u30fc\u30b1\u30f3\u30b9\u30b3\u30f3\u30c6\u30ca |\n| list | \u53cc\u65b9\u5411\u30ea\u30b9\u30c8. \u4efb\u610f\u4f4d\u7f6e\u8981\u7d20\u306e\u633f\u5165\u524a\u9664\u304c\u9ad8\u901f | \u30b7\u30fc\u30b1\u30f3\u30b9\u30b3\u30f3\u30c6\u30ca |\n| forward_list | \u5358\u65b9\u5411\u30ea\u30b9\u30c8 | \u30b7\u30fc\u30b1\u30f3\u30b9\u30b3\u30f3\u30c6\u30ca |\n| deque | \u4e21\u7aef\u30ad\u30e5\u30fc | \u30b7\u30fc\u30b1\u30f3\u30b9\u30b3\u30f3\u30c6\u30ca |\n| queue | \u30ad\u30e5\u30fc | \u30b3\u30f3\u30c6\u30ca\u30a2\u30c0\u30d7\u30bf |\n| priority_queue | \u512a\u5148\u9806\u5e8f\u4ed8\u304d\u30ad\u30e5\u30fc | \u30b3\u30f3\u30c6\u30ca\u30a2\u30c0\u30d7\u30bf |\n| stack | \u30b9\u30bf\u30c3\u30af | \u30b3\u30f3\u30c6\u30ca\u30a2\u30c0\u30d7\u30bf |\n| map | \u9023\u60f3\u914d\u5217. \u30ad\u30fc\u3068\u5024\u306e\u30da\u30a2\u3092\u4fdd\u6301\u3059\u308b. \u30ad\u30fc\u304b\u3089\u5024\u3092\u53d6\u308a\u51fa\u3059\u306e\u304c O(log N) \u3068\u9ad8\u901f | \u9023\u60f3\u30b3\u30f3\u30c6\u30ca |\n| multimap | \u91cd\u8907\u53ef\u80fd\u306a\u9023\u60f3\u914d\u5217 | \u9023\u60f3\u30b3\u30f3\u30c6\u30ca |\n| unordered_map | \u30cf\u30c3\u30b7\u30e5\u306b\u3088\u308b\u9023\u60f3\u914d\u5217 | \u975e\u9806\u5e8f\u9023\u60f3\u30b3\u30f3\u30c6\u30ca |\n| unordered_multimap | \u30cf\u30c3\u30b7\u30e5\u306b\u3088\u308b\u91cd\u8907\u53ef\u80fd\u306a\u9023\u60f3\u914d\u5217 | \u975e\u9806\u5e8f\u9023\u60f3\u30b3\u30f3\u30c6\u30ca |\n| set | \u9806\u5e8f\u4ed8\u96c6\u5408 | \u9023\u60f3\u30b3\u30f3\u30c6\u30ca |\n| multiset | \u91cd\u8907\u53ef\u80fd\u306a\u96c6\u5408\uff08\u591a\u91cd\u96c6\u5408\uff09 | \u9023\u60f3\u30b3\u30f3\u30c6\u30ca |\n| unordered_set | \u30cf\u30c3\u30b7\u30e5\u306b\u3088\u308b\u96c6\u5408 | \u975e\u9806\u5e8f\u9023\u60f3\u30b3\u30f3\u30c6\u30ca |\n| unordered_multiset | \u30cf\u30c3\u30b7\u30e5\u306b\u3088\u308b\u91cd\u8907\u53ef\u80fd\u306a\u96c6\u5408\uff08\u591a\u91cd\u96c6\u5408\uff09 | \u975e\u9806\u5e8f\u9023\u60f3\u30b3\u30f3\u30c6\u30ca |\n\n<dl>\n  <dt>\u30b7\u30fc\u30b1\u30f3\u30b9\u30b3\u30f3\u30c6\u30ca</dt>\n  <dd>\u8981\u7d20\u306e\u9806\u5e8f\u304c\u7dad\u6301\u3055\u308c\u308b\u30b3\u30f3\u30c6\u30ca</dd>\n  <dt>\u9023\u60f3\u30b3\u30f3\u30c6\u30ca</dt>\n  <dd>\u8981\u7d20\u304c\u6574\u5217\u3055\u308c\u3066\u683c\u7d0d\u3055\u308c\u308b\u30b3\u30f3\u30c6\u30ca</dd>\n  <dt>\u975e\u9806\u5e8f\u9023\u60f3\u30b3\u30f3\u30c6\u30ca</dt>\n  <dd>\u8981\u7d20\u306b\u9806\u5e8f\u304c\u306a\u304f\u3001\u30cf\u30c3\u30b7\u30e5\u3092\u7528\u3044\u3066\u7ba1\u7406\u3055\u308c\u308b\u30b3\u30f3\u30c6\u30ca</dd>\n  <dt>\u30b3\u30f3\u30c6\u30ca\u30a2\u30c0\u30d7\u30bf</dt>\n  <dd>\u5b9f\u969b\u306b\u306f\u30b3\u30f3\u30c6\u30ca\u3067\u306f\u306a\u304f\u3001\u4ed6\u306e\u30b3\u30f3\u30c6\u30ca\u3078\u306e\u64cd\u4f5c\u3092\u4e00\u90e8\u5236\u9650\u3059\u308b\u5f62\u3067\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u8868\u73fe\u3059\u308b\u30b3\u30f3\u30c6\u30ca</dd>\n</dl>\n\n##\u30b3\u30f3\u30c6\u30ca\u3068\u30a4\u30c6\u30ec\u30fc\u30bf\n\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u306f\u30b3\u30f3\u30c6\u30ca\u3068\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4ef2\u4ecb\u3059\u308b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3067\u3059\n1. `operator*`\u3067\u5024\u3092\u53d6\u308a\u51fa\u305b\u308b\n2. `operator++`\u3067\u6b21\u306e\u8981\u7d20\u3092\u3055\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u9032\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\u3092\u6e80\u305f\u3059\u3082\u306e\u3092\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u3057\u3066\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\n\n\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u5177\u4f53\u7684\u306a\u30b3\u30f3\u30c6\u30ca\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u64cd\u4f5c\u3059\u308b\u306e\u3067\u306f\u306a\u304f\n\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u3088\u308a\u6a2a\u65ad\u53ef\u80fd\u306a\u7bc4\u56f2\u3092\u64cd\u4f5c\u306e\u5bfe\u8c61\u3068\u3057\u307e\u3059\n\u3053\u306e\u3053\u3068\u306b\u3088\u308a\u3042\u3089\u3086\u308b\u30b3\u30f3\u30c6\u30ca\u306b\u5bfe\u3057\u3066\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u9069\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\n\n\u30b3\u30f3\u30c6\u30ca\u306b\u306f\u7570\u306a\u308b\u7a2e\u985e\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u53d6\u5f97\u3067\u304d\u308b\u30e1\u30f3\u30d0\u95a2\u6570\uff08\u30d5\u30ea\u30fc\u95a2\u6570\u3082\u3042\u308b\uff09\u304c\u3042\u308b\u306e\u3067\u76ee\u7684\u306b\u5408\u308f\u305b\u3066\u4f7f\u3044\u5206\u3051\u307e\u3057\u3087\u3046\n`begin(), end()`   : \u3075\u3064\u3046\u306eiterator\n\u8981\u7d20\u3092\u5909\u66f4\u3059\u308b\u3068\u304d\u306b\u3069\u3046\u305e\n\n```cpp\nstd::vector<int> v{1,2,3,4,5} ;\n\nfor ( auto&& iter = v.begin(); iter != v.end(); ++iter)\n    *iter = 0;\n```\n\n`cbegin(), cend()` : const_ierator\u3092\u53d6\u5f97\nconst\u30a4\u30c6\u30ec\u30fc\u30bf\u3001\u8981\u7d20\u3092\u5909\u66f4\u3057\u306a\u3044\u3068\u304d\u306b\u3069\u3046\u305e\n\n```cpp\nstd::vector<int> v{1,2,3,4,5} ;\n\nfor ( auto&& iter = v.cbegin(); iter != v.cend(); ++iter)\n    std::cout << *iter << std::endl;\n```\n\n`rbegin(), rend()` : reverse_iterator\u3092\u53d6\u5f97\n\u9006\u9806\u30a4\u30c6\u30ec\u30fc\u30bf\u3001\u30b1\u30c4\u304b\u3089\u8d70\u67fb\u3057\u3066\u8981\u7d20\u3092\u5909\u66f4\u3057\u305f\u3044\u3068\u304d\u306b\u3069\u3046\u305e\n\n```cpp\n    std::vector<int> v1{1,2,3,4,5,6,7,8,9};\n    std::vector<int> v2{1,2,3,4,5};\n    \n    for(auto&& iter1 = v1.rbegin(), iter2 = v2.rbegin(); iter2 != v2.rend(); ++iter1,++iter2)\n        *iter2 = *iter1;\n```\n\n`crbegin(), crend()` : const_reverse_iterator\u3092\u53d6\u5f97\nconst\u9006\u9806\u30a4\u30c6\u30ec\u30fc\u30bf\u3001\u30b1\u30c4\u304b\u3089\u8d70\u67fb\u3057\u3066\u8981\u7d20\u3092\u5909\u66f4\u3057\u306a\u3044\u3068\u304d\u306b\u3069\u3046\u305e\n\n```cpp\nstd::vector<int> v{1,2,3,4,5} ;\n\nfor ( auto&& iter = v.crbegin(); iter != v.crend(); ++iter)\n    std::cout << *iter << std::endl;\n```\n\n\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u306f\u5e7e\u3064\u304b\u7a2e\u985e\u304c\u3042\u308a\u3001\u3067\u304d\u308b\u3053\u3068\u304c\u9055\u3044\u307e\u3059\n\n###\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u5206\u985e\n\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u5b9a\u7fa9\u3055\u308c\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u5206\u985e\n\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u63d0\u4f9b\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u6b21\u306e\u3044\u305a\u308c\u304b\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5f15\u6570\u3068\u3057\u3066\u8981\u6c42\u3059\u308b\n\n<dl>\n  <dt>\u5165\u529b\u30a4\u30c6\u30ec\u30fc\u30bf\uff08Input Iterator\uff09</dt>\n  <dd>\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u524d\u9032\u3001\u8981\u7d20\u306e\u8aad\u307f\u51fa\u3057\u304c\u3067\u304d\u308b\uff08std::istream_iterator\uff09</dd>\n  <dt>\u51fa\u529b\u30a4\u30c6\u30ec\u30fc\u30bf\uff08Output Iterator\uff09</dt>\n  <dd>\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u524d\u9032\u3001\u8981\u7d20\u306e\u66f8\u304d\u8fbc\u307f\u304c\u3067\u304d\u308b\uff08std::ostream_iterator, insert_iterator\uff09</dd>\n  <dt>\u524d\u65b9\u30a4\u30c6\u30ec\u30fc\u30bf\uff08Forward Iterator\uff09</dt>\n  <dd>\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u524d\u9032\u3001\u8981\u7d20\u306e\u8aad\u307f\u51fa\u3057\u3001\u66f8\u304d\u8fbc\u307f\u304c\u3067\u304d\u308b<br>\n\u524d\u9032\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u5165\u529b\u30a4\u30c6\u30ec\u30fc\u30bf\u3001\u51fa\u529b\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u8981\u6c42\u3055\u308c\u308b\u5834\u5408\u306b\u3082\u4f7f\u7528\u3067\u304d\u308b<br>\n\uff08forward_list, unordered_map, unordered_set\u306b\u304a\u3051\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u306a\u3069\u304c\u8a72\u5f53\uff09</dd>\n  <dt>\u53cc\u65b9\u5411\u30a4\u30c6\u30ec\u30fc\u30bf\uff08Bidirectional Iterator\uff09</dt>\n  <dd>\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u524d\u9032\u3068\u5f8c\u9000\u3001\u8981\u7d20\u306e\u8aad\u307f\u51fa\u3057\u3001\u66f8\u304d\u8fbc\u307f\u304c\u3067\u304d\u308b<br>\n\u53cc\u65b9\u5411\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u524d\u9032\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u8981\u6c42\u3055\u308c\u308b\u5834\u5408\u306b\u3082\u4f7f\u7528\u3067\u304d\u308b<br>\n\uff08list, map, set\u306b\u304a\u3051\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u306a\u3069\u304c\u8a72\u5f53\uff09</dd>\n  <dt>\u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9\u30a4\u30c6\u30ec\u30fc\u30bf\uff08Random Access Iterator\uff09</dt>\n  <dd>\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u524d\u9032\u3068\u5f8c\u9000\u3001\u8981\u7d20\u306e\u66f8\u304d\u8fbc\u307f\u3001\u8aad\u307f\u51fa\u3057\u52a0\u3048\u3066\u3001\u4efb\u610f\u306e\u4f4d\u7f6e\u306b\u3042\u308b\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b<br>\n\u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u53cc\u65b9\u5411\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u8981\u6c42\u3055\u308c\u308b\u5834\u5408\u3067\u3082\u4f7f\u7528\u3067\u304d\u308b<br>\n\uff08array, deque, vector\u306b\u304a\u3051\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u306a\u3069\u304c\u8a72\u5f53\uff09<br>\n\u914d\u5217\u306e\u8981\u7d20\u3092\u3055\u3059\u30dd\u30a4\u30f3\u30bf\u3082\u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u3057\u3066\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u308b</dd>\n</dl>\n\n\n\n\n###iterator\u3068const_iterator\u3068const interator\n\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u304c\u3059\u3079\u3066\u3092\u8a9e\u3063\u3066\u304f\u308c\u308b\n\n```cpp\n\n    std::vector<int> v(4);\n    // normal iterator\n    std::vector<int>::iterator iter = a.begin();\n    // const_iterator\n    const std::vector<int>::iterator c_iter = v.begin();\n    // const interator\n    std::vector<int>::const_iterator const_iter = v.begin();\n    \n    ++iter;         // OK\n    ++const_iter;   // OK\n    ++c_iter;       // c_iter\u306fconst\u306a\u306e\u3067\u5909\u66f4\u3067\u304d\u306a\u3044\n    \n    *iter=3;        // OK\n    *citer=3;       // citr\u306fconst\u3060\u304c, *citr\u306fconst\u3067\u306f\u306a\u3044\u306e\u3067OK\n    *const_iter=3;  // \u3053\u308c\u306f\u30a8\u30e9\u30fc\n\n```\n\n\n\u306f\u3063\u304d\u308a\u8a00\u3063\u3066\u3001\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3067\u304d\u306a\u3044`const iterator`\u306e\u51fa\u756a\u306f\u307b\u307c\u306a\u3044\n\n\u307e\u305f\u3001\u5f53\u305f\u308a\u524d\u3060\u304cconst\u306a\u8981\u7d20\u3092\u6301\u3064\u30b3\u30f3\u30c6\u30ca\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306f`const_iterator`\u3068\u306a\u308b\u70b9\u306b\u306f\u7406\u89e3\u304c\u5fc5\u8981\n\n```cpp\n    const std::vector<int> v(4);\n\n    auto&& const_iter = v.begin();\n    \n    ++const_iter ;\n    *const_iter=3;  // \u3053\u308c\u306f\u30a8\u30e9\u30fc\n```\n##\u30e9\u30e0\u30c0\u5f0f\u306e\u63a8\u6e2c\n\u95a2\u6570\u306e\u4e2d\u3067\u30e9\u30e0\u30c0\u5f0f\u306e\u623b\u308a\u5024\u3084\u5f15\u6570\u306e\u578b\u3092\u63a8\u6e2c\u3057\u305f\u3044\u306a\u3093\u3066\u3053\u3068\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\n\u578b\u63a8\u8ad6\u306f`decltype`\u3092\u7528\u3044\u3066\n\n```cpp\ndecltype( x + y )\n```\n\n\u306e\u3088\u3046\u306b\u66f8\u304f\u3068\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\n\u30e9\u30e0\u30c0\u5f0f\u3092`decltype`\u306e\u4e2d\u306b\u8a18\u8ff0\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\n\u307e\u305f\u3001\u30e9\u30e0\u30c0\u5f0f\u306f\u305d\u308c\u305e\u308c\u30e6\u30cb\u30fc\u30af\u306a\u578b\u3092\u6301\u3061\u307e\u3059\n\u305d\u3053\u3067\u3001\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306b\u5909\u63db\u3059\u308b\u3068\u578b\u63a8\u8ad6\u3067\u304d\u307e\u3059\n\n```cpp\n#include <vector>\n#include <iostream>\n#include <type_traits>\n#include <boost/type_index.hpp>\n\ntemplate<typename R, typename F, typename A>\nauto return_helper(R(F::*)(A) const) -> R;\n\ntemplate<typename R, typename F, typename A>\nauto arg_helper(R(F::*)(A) const) -> A;\n\ntemplate < typename F >\nvoid func(F){\n    using Return_t = decltype(return_helper(&F::operator()));\n    using Arg_t = decltype(arg_helper(&F::operator()));\n    std::cout << \"return type : \" << boost::typeindex::type_id_with_cvr<Return_t>().pretty_name() << std::endl;\n    std::cout << \"arg type    : \" << boost::typeindex::type_id_with_cvr<Arg_t>().pretty_name() << std::endl;\n}\n\nint main()\n{\n    func([](double&&){return std::vector<int>{1,2,3};});\n    return 0;\n}\n```\n\n\u5b9f\u884c\u7d50\u679c\n>return type : std::vector\\<int, std::allocator\\<int\\> \\>\narg type    : double&&\n\n\u4e00\u5fdc\u63a8\u8ad6\u3067\u304d\u3066\u3044\u307e\u3059\n\n##\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u578b\u63a8\u8ad6\u898f\u5247\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306fC++\u306b\u6b20\u304b\u305b\u306a\u3044\u6a5f\u80fd\u3067\u3059\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u578b\u63a8\u8ad6\u898f\u5247\u3092\u77e5\u3089\u306a\u3044\u3068\u3088\u304f\u3064\u307e\u305a\u304d\u307e\u3059\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u578b\u63a8\u8ad6\u898f\u5247\u3067\u306f`T&&`\u3084`auto&&`\u306f\u30e6\u30cb\u30f4\u30a1\u30fc\u30b5\u30eb\u53c2\u7167\u3068\u547c\u3070\u308c\u7279\u5225\u6271\u3044\u3055\u308c\u307e\u3059\n\n\u300cEffective Modern C++\u300d\u306e\u7b2c1\u7ae0\u306b\u305d\u3063\u3066 \n\u95a2\u6570\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5ba3\u8a00\u306b\u5206\u3051\u3066\u89e3\u8aac\u3057\u307e\u3059\n\n###\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u578b\u63a8\u8ad6\u305d\u306e\uff11\uff08\u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u304c\u53c2\u7167\u3082\u3057\u304f\u306f\u30dd\u30a4\u30f3\u30bf\u578b\uff09\n\n```cpp\n\ntemplate < typename T >\nvoid func( T& ) ;\n\nint x = 2 ;         // x \u306f int\nconst int cx= x ;   // cx \u306f const int\nconst int& rx = x ; // rx \u306f x \u3078\u306e const int \u53c2\u7167\n\nfunc(x) ;     // T \u306f int, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306f int&\nfunc(cx) ;    // T \u306f const int, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306f const int&\nfunc(rx) ;    // T \u306f const int, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306f const int&\n\n```\n\n`T&`\u3092\u4eee\u5f15\u6570\u306b\u3068\u308b\u95a2\u6570\u306bconst\u4fee\u98fe\u3055\u308c\u305f\u578b\u3092\u6e21\u3059\u3068const\u306f\u578b\u306e\u4e00\u90e8\u3068\u3057\u3066\u6271\u308f\u308c\u307e\u3059\n\u53c2\u7167\u306f\u8aad\u307f\u98db\u3070\u3055\u308c\u307e\u3059\n\n###\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u578b\u63a8\u8ad6\u305d\u306e\uff12\uff08\u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u304c\u30e6\u30cb\u30f4\u30a1\u30fc\u30b5\u30eb\u53c2\u7167\uff09\n\n\u30e6\u30cb\u30f4\u30a1\u30fc\u30b5\u30eb\u53c2\u7167\u3092\u4eee\u5f15\u6570\u306b\u3068\u308b\u5834\u5408\u306f\n\u5de6\u8fba\u5024\u304c\u6e21\u3055\u308c\u305f\u3068\u304d\u306b\u306f`T`\u306f\u5de6\u8fba\u5024\u53c2\u7167\u3067\u3042\u308b\u3068\u63a8\u8ad6\u3055\u308c\u307e\u3059\n\u53f3\u8fba\u5024\u304c\u6e21\u3055\u308c\u305f\u3068\u304d\u306f\u305d\u306e\uff11\u306e\u898f\u5247\u304c\u9069\u7528\u3055\u308c\u307e\u3059\n\n```cpp\n\ntemplate < typename T >\nvoid func( T&& ) ;\n\nint x = 2 ;         // x \u306f int\nconst int cx= x ;   // cx \u306f const int\nconst int& rx = x ; // rx \u306f x \u3078\u306e const int \u53c2\u7167\n\nfunc(x) ;     // x\u306f\u5de6\u8fba\u5024, \u3088\u3063\u3066 T \u306f int&, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306f int&\nfunc(cx) ;    // x\u306f\u5de6\u8fba\u5024, \u3088\u3063\u3066 T \u306f const int&, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306f const int&\nfunc(rx) ;    // x\u306f\u5de6\u8fba\u5024, \u3088\u3063\u3066 T \u306f const int&, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306f const int&\nfunc(2) ;     // x\u306f\u53f3\u8fba\u5024, \u3088\u3063\u3066 T \u306f int, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306f int&&\n```\n\n\u7279\u5225\u306a\u898f\u5247\u3067\u53f3\u8fba\u5024\u3068\u5de6\u8fba\u5024\u304c\u533a\u5225\u3055\u308c\u308b\u3053\u3068\u3092\u77e5\u3063\u3066\u304a\u304b\u306a\u304f\u3066\u306f\u306a\u308a\u307e\u305b\u3093\n\n###\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u578b\u63a8\u8ad6\u305d\u306e\uff13\uff08\u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u304c\u53c2\u7167\u3067\u3082\u30dd\u30a4\u30f3\u30bf\u3067\u3082\u306a\u3044\uff09\n\n\u4eee\u5f15\u6570\u304c\u53c2\u7167\u3067\u3082\u30dd\u30a4\u30f3\u30bf\u3067\u3082\u306a\u3044\u5834\u5408\u306f\u5024\u6e21\u3057\u306b\u306a\u308a\u3001\u305d\u306e\u5834\u5408\u306e\u898f\u5247\u306f\n1. cv\u4fee\u98fe\u306f\u7121\u8996\u3055\u308c\u308b\n2. \u53c2\u7167\u306f\u7121\u8996\u3055\u308c\u308b\n\u3068\u306a\u308a\u307e\u3059\n\n```cpp\n\ntemplate < typename T >\nvoid func( T ) ;\n\nint x = 2 ;         // x \u306f int\nconst int cx= x ;   // cx \u306f const int\nconst int& rx = x ; // rx \u306f x \u3078\u306e const int \u53c2\u7167\n\nfunc(x) ;     // T \u306f int, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306f int\nfunc(cx) ;    // T \u306f int, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306f int\nfunc(rx) ;    // T \u306f int, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306f int\n```\n\n###\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u578b\u63a8\u8ad6\uff1a\u86c7\u8db3\uff08\u4eee\u5f15\u6570\u304ccv\u4fee\u98fe\u3055\u308c\u3066\u3044\u308b\u5834\u5408\uff09\nN4140\u306e14.8.2.1 Deducing template arguments from a function call\u3092\u53c2\u7167\u3059\u308b\u3068\n\n>3 If P is a cv-qualified type, the top level cv-qualifiers of P\u2019s type are ignored for type deduction. If P is a\nreference type, the type referred to by P is used for type deduction. If P is an rvalue reference to a cvunqualified\ntemplate parameter and the argument is an lvalue, the type \u201clvalue reference to A\u201d is used in\nplace of A for type deduction. [ Example:\n\n>```cpp\ntemplate <class T> int f(T&&);\ntemplate <class T> int g(const T&&);\nint i;\nint n1 = f(i); // calls f<int&>(int&)\nint n2 = f(0); // calls f<int>(int&&)\nint n3 = g(i); // error: would call g<int>(const int&&), which\n// would bind an rvalue reference to an lvalue\n```\n>\u2014end example ]\n\n\u8981\u7d04\u3059\u308b\u3068\u3001\u4eee\u5f15\u6570\u304ccv\u4fee\u98fe\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306b\u306f\u63a8\u8ad6\u306e\u6bb5\u968e\u3067\u5f15\u6570\u306e\u578b\u306ecv\u4fee\u98fe\u306f\u7121\u8996\u3055\u308c\u307e\u3059\n\u305d\u306e\u5f8c\u3001\u53c2\u7167\u3082\u7121\u8996\u3055\u308c\u3066\u578b\u63a8\u8ad6\u3055\u308c\u307e\u3059\n\n```cpp\ntemplate < typename T >\nvoid f( T& ) ;\n\ntemplate < typename T>\nvoid g( const T& ) ;\n\nint x = 2 ;         // x \u306f int\nconst int cx= x ;   // cx \u306f const int\nconst int& rx = x ; // rx \u306f x \u3078\u306e const int \u53c2\u7167\n\nf(x) ;     // T \u306f int, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306f int&\nf(cx) ;    // T \u306f const int, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306f const int&\nf(rx) ;    // T \u306f const int, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306f const int&\n\ng(x) ;     // T \u306f int, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306f const int&\ng(cx) ;    // T \u306f int, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306f const int&\ng(rx) ;    // T \u306f int, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306f const int&\n\n```\n\n\u3068\u306a\u308a\u307e\u3059\n`T&`\u3092\u4f7f\u3046\u3068const\u6027\u304c\u4f1d\u64ad\u3057\u307e\u3059\n`const T&`\u3092\u4f7f\u3046\u3068const\u6027\u3092\u5f37\u5236\u3067\u304d\u307e\u3059\n\u307e\u305f\u3001const \u306a lvalue reference \u306frvalue\u3092\u675f\u7e1b\u3067\u304d\u308b\u306e\u3067\u53f3\u8fba\u5024\u3001\u5de6\u8fba\u5024\u306b\u3064\u3044\u3066const lvalue\u53c2\u7167\u3067\u304d\u307e\u3059\n\n\u4ee5\u4e0a\u304c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u578b\u63a8\u8ad6\u898f\u5247\u3067\u3059\n\n\n###\u660e\u793a\u7684\u306a\u578b\u6307\u5b9a\n\u660e\u793a\u7684\u306b\u578b\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u3069\u3046\u3067\u3057\u3087\u3046\n\u660e\u793a\u7684\u306b\u578b\u3092\u308f\u305f\u3057\u3066\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u7528\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u306f\n\u578b\u63a8\u8ad6\u3068\u306f\u5225\u306e\u898f\u5247\u304c\u9069\u7528\u3055\u308c\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306f\u3069\u306e\u3088\u3046\u306b\u6271\u308f\u308c\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\n\n```cpp\ntemplate < typename T >\nvoid f( T&& ) ;\n\nint x = 2 ;\n\nf<const int>(x) ;\n```\n\n\u7d50\u8ad6\u304b\u3089\u3044\u3046\u3068\u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\n\u9806\u3092\u304a\u3063\u3066\u8aac\u660e\u3059\u308b\u3068\n\u660e\u793a\u7684\u306b\u578b\u3092\u6307\u5b9a\u3059\u308b\u3068\u6307\u5b9a\u3055\u308c\u305f\u578b\u304c\u305d\u306e\u307e\u307e`T`\u306b\u9069\u7528\u3055\u308c\u307e\u3059\n\n\u3064\u307e\u308a\u3001T\u306f`const int`\u3067\u3042\u308a\n\u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u306f`const int&&`\u3068\u306a\u308a\u307e\u3059\n\u53f3\u8fba\u5024\u53c2\u7167\u306f\u5de6\u8fba\u5024\u3092\u675f\u7e1b\u3067\u304d\u306a\u3044\u306e\u3067\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\n\n\u3053\u306e\u4f8b\u3067\u306f\u76f4\u611f\u7684\u306b\u306f`T`\u304c`const int`\u306b\u306a\u308a, \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u3092\u30e6\u30cb\u30f4\u30a1\u30fc\u30b5\u30eb\u53c2\u7167\u306e\u898f\u5247\u3067`const int&`\n\u3068\u3059\u308b\u3053\u3068\u3067const\u6027\u3092\u5f37\u5236\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u5931\u6557\u3057\u307e\u3059\n\n\u30e6\u30cb\u30f4\u30a1\u30fc\u30b5\u30eb\u53c2\u7167\u306e\u6700\u5927\u306e\u5229\u70b9\u306f__\u30e0\u30fc\u30d6\u30fb\u30bb\u30de\u30f3\u30c6\u30a3\u30af\u30b9__\u304c\u4f7f\u3048\u308b\u70b9\u3067\u3057\u3087\u3046\nconst\u6027\u3092\u5f37\u5236\u3059\u308b\u3068\u30e0\u30fc\u30d6\u30fb\u30bb\u30de\u30f3\u30c6\u30a3\u30af\u30b9\u304c\u4f7f\u3048\u306a\u3044\u305f\u3081`const T&`\u3092\u4f7f\u3046\u3079\u304d\u3067\u3059\n\n\u66f4\u306b\u5371\u967a\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\n\n```cpp\ntemplate < typename T >\nvoid f( const T& x ){\n    x = 0 ;\n}\n\nint x = 2 ;\nf< int& >( x ) ;\n```\n\n\u3053\u306e\u30b3\u30fc\u30c9\u306fconst\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u306f\u305a\u306e\u5909\u6570`x`\u3092\u66f8\u304d\u304b\u3048\u3066\u3044\u307e\u3059\n\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u307b\u3057\u3044\u3067\u3059\n\u304c\uff01\n\u6b8b\u5ff5\u306a\u3053\u3068\u306b\uff08\uff1f\uff09\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u3001\u5909\u6570\u3092\u66f8\u304d\u304b\u3048\u308b\u3053\u3068\u306b\u6210\u529f\u3057\u307e\u3059\uff01\n\u53c2\u7167\u578b\u3092\u660e\u793a\u7684\u306b\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u308f\u305f\u3057\u305f\u3068\u304d\u306b\u306f\n\u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u30ec\u30d9\u30eb\u3067\u306ecv\u4fee\u98fe\u306f\u7121\u8996\u3055\u308c\u308c\u308b\u306e\u3067\u3059\n\n\u307e\u3042\u3001\u3053\u3093\u306a\u610f\u5473\u4e0d\u660e\u306a\u4f7f\u3044\u65b9\u3092\u3059\u308b\u4eba\u306f\u3044\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\n\n\n##\u8dcb\u6587\n\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u3044\u3066\u3044\u308b\u9593\u306b\u3082\u3001\u3069\u3093\u3069\u3093\u8e93\u3044\u305f\u305f\u3081\n\u975e\u5e38\u306b\u9577\u3044\u8a18\u4e8b\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\n\u6700\u5f8c\u307e\u3067\u8aad\u3093\u3067\u304f\u3060\u3055\u3063\u305f\u65b9\u306f\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\n\u304a\u304b\u3057\u306a\u7b87\u6240\u304c\u3042\u308c\u3070\u3001\u3054\u6307\u6458\u304f\u3060\u3055\u3044\n\u660e\u65e5\u306f\u3001okdshin\u3055\u3093\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n##\u53c2\u8003\u6587\u732e\n\u300e\u65b0\u6539\u8a02\u7248 C++\u30dd\u30b1\u30c3\u30c8\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u300f\n(\u9ad8\u6a4b\u6676\u3001\u5b89\u85e4\u654f\u5f66\u3001\u4e00\u6238\u512a\u4ecb\u3001\u6960\u7530\u76f4\u77e2\u3001\u9053\u5316\u5e2b\u3001\u6e6f\u671d\u525b\u4ecb\u3000\u8457\u3001\u682a\u5f0f\u4f1a\u793e\u6280\u8853\u8a55\u8ad6\u793e\u3001ISBN 978-4-7741-7408-2)\n\n\u300eEffective Modern C++ \u2015C++11/14\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u9032\u5316\u3055\u305b\u308b42\u9805\u76ee\u300f\n(Scott Meyers \u8457\u3001\u30aa\u30e9\u30a4\u30ea\u30fc\u30fb\u30b8\u30e3\u30d1\u30f3\u3001ISBN 978-4-87311-736-2)\n\n[N3777](https://github.com/cplusplus/draft/tree/master/papers)\n[N4140](https://github.com/cplusplus/draft/tree/master/papers)\n\n\n", "tags": ["C++11", "C++14"]}