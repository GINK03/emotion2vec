{"context": " More than 1 year has passed since last update.\u3061\u3087\u3063\u3068 kobito \u304b\u3089\u306e\u6295\u7a3f\u30c6\u30b9\u30c8\u3092\u517c\u306d\u3066\u3002\nEC2 \u306f EBS \u30dc\u30ea\u30e5\u30fc\u30e0\u306e snapshot \u53d6\u3063\u3066\u304a\u3051\u3070\u30d0\u30c3\u30af\u30a2\u30c3\u30d7\u306b\u306a\u308b\u306e\u3067\u4ee5\u524d\u66f8\u3044\u305f\u30b9\u30af\u30ea\u30d7\u30c8\u3002\nclass AWSBackuper(object):\n    def __init__(self, access_key, secret_key, region=\"ap-northeast-1\"):\n        self.access_key = access_key\n        self.secret_key = secret_key\n        self.region = region\n        self.set_ec2connection()\n\n    def set_ec2connection(self):\n        self.ec2connection = boto.ec2.connect_to_region(self.region, aws_access_key_id=self.access_key, aws_secret_access_key=self.secret_key)\n\n    def create_snapshot(self, volume_id, description=None):\n        self.ec2connection.create_snapshot(volume_id, description)\n\n    def rotate_snapshot(self, volume_id, num):\n        snapshot = {}\n        for x in self.ec2connection.get_all_snapshots():\n            if(x.volume_id == volume_id):\n                tmp = {x.id:x.start_time}\n                snapshot.update(tmp)\n\n        snapshot = sorted(snapshot.items(), key=lambda (k, v): (v, k), reverse=True)\n        for i in range(int(num), len(snapshot)):\n            try:\n                self.ec2connection.delete_snapshot(snapshot[i][0])\n            except:\n                continue\n\n    def add_tags_to_snapshot(self, volume_id):\n        tags = self.ec2connection.get_all_volumes(volume_id)[0].tags\n\n        for snapshot in self.ec2connection.get_all_snapshots():\n            if(snapshot.volume_id == volume_id):\n                for key, value in tags.items():\n                    snapshot.add_tag(key, value)\n\nif __name__ == '__main__':\n\n    execfile(sys.argv[1])\n    backuper = AWSBackuper(access_key, secret_key)\n\n    for volume_id in volume_ids:\n        backuper.create_snapshot(volume_id, 'auto backup')\n        print \"%s is backed up.\" % (volume_id)\n        backuper.rotate_snapshot(volume_id, generation_limit)\n        print \"%s is rotated snapshots.\" % (volume_id)\n        backuper.add_tags_to_snapshot(volume_id)\n        print \"%s is added tags.\" % (volume_id)\n\n\u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u306f config \u30d5\u30a1\u30a4\u30eb\u3068\u306a\u308b python \u30b9\u30af\u30ea\u30d7\u30c8\u3092\u6307\u5b9a\u3057\u3066\u8d77\u52d5\u3059\u308b\u3002\n# your volume_ids \naccess_key, secret_key = 'YOUR ACCESS KEY', 'YOUR SECRET KEY'\nvolume_ids = [\n    'vol-target-id1',\n    'vol-target-id2',\n    'vol-target-id3',\n]\ngeneration_limit = 7\n\n\u3042\u3068\u306f\u3053\u3093\u306a\u3075\u3046\u306b\u8d77\u52d5\u3059\u308b\u3060\u3051\npython ebs-backuper.py config.py\n\n\n\u3061\u3087\u3063\u3068 kobito \u304b\u3089\u306e\u6295\u7a3f\u30c6\u30b9\u30c8\u3092\u517c\u306d\u3066\u3002\nEC2 \u306f EBS \u30dc\u30ea\u30e5\u30fc\u30e0\u306e snapshot \u53d6\u3063\u3066\u304a\u3051\u3070\u30d0\u30c3\u30af\u30a2\u30c3\u30d7\u306b\u306a\u308b\u306e\u3067\u4ee5\u524d\u66f8\u3044\u305f\u30b9\u30af\u30ea\u30d7\u30c8\u3002\n\n    class AWSBackuper(object):\n        def __init__(self, access_key, secret_key, region=\"ap-northeast-1\"):\n            self.access_key = access_key\n            self.secret_key = secret_key\n            self.region = region\n            self.set_ec2connection()\n    \n        def set_ec2connection(self):\n            self.ec2connection = boto.ec2.connect_to_region(self.region, aws_access_key_id=self.access_key, aws_secret_access_key=self.secret_key)\n    \n        def create_snapshot(self, volume_id, description=None):\n            self.ec2connection.create_snapshot(volume_id, description)\n    \n        def rotate_snapshot(self, volume_id, num):\n            snapshot = {}\n            for x in self.ec2connection.get_all_snapshots():\n                if(x.volume_id == volume_id):\n                    tmp = {x.id:x.start_time}\n                    snapshot.update(tmp)\n    \n            snapshot = sorted(snapshot.items(), key=lambda (k, v): (v, k), reverse=True)\n            for i in range(int(num), len(snapshot)):\n                try:\n                    self.ec2connection.delete_snapshot(snapshot[i][0])\n                except:\n                    continue\n    \n        def add_tags_to_snapshot(self, volume_id):\n            tags = self.ec2connection.get_all_volumes(volume_id)[0].tags\n    \n            for snapshot in self.ec2connection.get_all_snapshots():\n                if(snapshot.volume_id == volume_id):\n                    for key, value in tags.items():\n                        snapshot.add_tag(key, value)\n    \n    if __name__ == '__main__':\n    \n        execfile(sys.argv[1])\n        backuper = AWSBackuper(access_key, secret_key)\n    \n        for volume_id in volume_ids:\n            backuper.create_snapshot(volume_id, 'auto backup')\n            print \"%s is backed up.\" % (volume_id)\n            backuper.rotate_snapshot(volume_id, generation_limit)\n            print \"%s is rotated snapshots.\" % (volume_id)\n            backuper.add_tags_to_snapshot(volume_id)\n            print \"%s is added tags.\" % (volume_id)\n\n\u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u306f config \u30d5\u30a1\u30a4\u30eb\u3068\u306a\u308b python \u30b9\u30af\u30ea\u30d7\u30c8\u3092\u6307\u5b9a\u3057\u3066\u8d77\u52d5\u3059\u308b\u3002\n\n    # your volume_ids \n    access_key, secret_key = 'YOUR ACCESS KEY', 'YOUR SECRET KEY'\n    volume_ids = [\n        'vol-target-id1',\n        'vol-target-id2',\n        'vol-target-id3',\n    ]\n    generation_limit = 7\n\n\u3042\u3068\u306f\u3053\u3093\u306a\u3075\u3046\u306b\u8d77\u52d5\u3059\u308b\u3060\u3051\n\n    python ebs-backuper.py config.py\n\n", "tags": ["AWS", "boto", "ebs", "Python", "EC2"]}