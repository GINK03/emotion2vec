{"context": " More than 1 year has passed since last update.\u4f55\u304b\u3068\u52d5\u304d\u306e\u591a\u3044Web\u306e\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u754c\u9688\u306b\u3088\u3046\u3084\u304f\u53ce\u675f\u3092\u3082\u305f\u3089\u3059\u306e\u3067\u306f\u3068\u671f\u5f85\u3055\u308c\u308bRedux\u3067\u3059\u304c\u3001\n\u3044\u3063\u305d\u306e\u3053\u3068Reducer\u3092WebSocket\u30b5\u30fc\u30d0\u30fc\u306b\u7f6e\u3044\u305f\u3089\u9762\u767d\u3044\u306e\u3067\u306f\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\n\u30e1\u30ea\u30c3\u30c8\n\n\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u30b5\u30fc\u30d0\u30fc\u3067\u8907\u6570\u306e\u30e6\u30fc\u30b6\u30fc\u306eState\u3092\u4e00\u5143\u7ba1\u7406\u3067\u304d\u308b\n\u300c\u3061\u3083\u3093\u3068\u3057\u305f\u300d\u95a2\u6570\u578b\u8a00\u8a9e\u3067Redux\u306e\u6839\u5e79\u90e8\u5206\u3092\u66f8\u3051\u308b\uff08JS\u30d5\u30a1\u30f3\u306e\u7686\u69d8\u3059\u3044\u307e\u305b\u3093\uff09\n\n\n\u30c7\u30e1\u30ea\u30c3\u30c8\n\n\u901a\u4fe1\u304c\u5207\u65ad\u3057\u305f\u5834\u5408\u306eFallback\u7528\u306e\u30b9\u30c6\u30fc\u30c8\u3060\u3051\u306fRedux\u5916\u3067\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3067\u72ec\u7acb\u3057\u3066\u6301\u305f\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\n\u901a\u4fe1\u56de\u6570\u304c\u591a\u304f\u306a\u308b\uff08WebSocket\u306a\u3089\u5927\u4e08\u592b\u3068\u671f\u5f85\uff09\n\n\u4eca\u56de\u306f\u672c\u5bb6\u306eRedux\u306f\u4e00\u5207\u4f7f\u308f\u305a\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u69cb\u6210\u3067Proof of concept\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n                      action, state\n+----------------+   -------------->    +------------------+\n| client (React) |                      | server (Phoenix) |\n+----------------+   <--------------    +------------------+\n                          state\n\n\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u306b\u516c\u958b\u3057\u3066\u307e\u3059\u3002\n\n\u30a2\u30d7\u30ea\u306e\u6982\u8981\nRedux\u672c\u5bb6\u306ecounter\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\nAction\u306b\u306f\u30ab\u30a6\u30f3\u30bf\u30fc\u30921\u305a\u3064\u5897\u52a0\u30fb\u4f4e\u4e0b\u3055\u305b\u308bincrement, decrement\u53ca\u3073\u30ab\u30a6\u30f3\u30bf\u30fc\u30921\u79d2\u5f8c\u306b\u5897\u52a0\u3055\u305b\u308basync\u304c\u3042\u308a\u307e\u3059\u3002\nState\u306f\u30ab\u30a6\u30f3\u30bf\u30fc\u306e\u5024\u306e\u307f\u3092\u4fdd\u6301\u3057\u307e\u3059\u3002\n\nClient\nWebSocket\u3092\u4ecb\u3057\u305fAction, State \u306e\u9001\u53d7\u4fe1\u306e\u305f\u3081\u306bReact\u306eWrapper\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u51fa\u8eab\u306a\u3089\u3068\u308a\u3042\u3048\u305aComposition\u3092\u3057\u305f\u304f\u306a\u308b\u3082\u306e\u3067\u3059\u304c\u3001JavaScript\u3067\u306eComposition\u306e\u65b9\u6cd5\u306f\u8272\u3005\u3042\u308a\u307e\u3059\u306d\u3002\n\u4eca\u56de\u306f\u3053\u306e\u8a18\u4e8b\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308bHigh-order Components\u3092\u4f7f\u3046\u3068\u3059\u3063\u304d\u308a\u66f8\u3051\u307e\u3057\u305f\u3002\n\nweb/static/js/app.js\nconst reduxConnector = (ReactComponent, initialState) => class extends React.Component {\n  constructor() {\n    super();\n    this.state = Object.assign({}, initialState, {user: Math.random()});\n    this.channel = socket.channel(\"redux:\", {})\n    this.channel.join()\n      .receive(\"ok\", resp => {\n        console.log(\"Joined successfully\", resp)\n      })\n      .receive(\"error\", resp => { console.log(\"Unable to join\", resp) })\n    this.channel.on(\"update\", msg => this.setState(msg));\n  }\n  takeAction(type) {\n    this.channel.push(type, this.state)\n      .receive(\"ok\", msg => {\n        this.setState(msg);\n      });\n  }\n  render() {\n    return (\n      <ReactComponent\n        takeAction={this.takeAction.bind(this)}\n        reduxState={this.state}\n      />\n    );\n  }\n}\n\nclass Counter extends React.Component {\n  render() {\n    return (\n      <div>\n        Clicked: {this.props.reduxState.count}\n        <button onClick={this.props.takeAction.bind(this, \"increment\")}>+</button>\n        <button onClick={this.props.takeAction.bind(this, \"decrement\")}>-</button>\n        <button onClick={this.props.takeAction.bind(this, \"async\")}>async</button>\n      </div>\n    );\n  }\n}\n\nconst ReduxAppliedComponent = reduxConnector(Counter, {count: 0});\n\n\n\nServer\nPhoenix\u306echannel\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002\n\nweb/channels/user_socket.ex\nchannel \"redux:*\", ReduxServer.ReduxReducer\n\n\nAction\u3092WebSocket\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3068\u3057\u3066\u3001State\u3092Payload\u3068\u3057\u3066\u53d7\u3051\u53d6\u308a\u307e\u3059\u3002\n\u4eca\u56de\u306e\u809d\u3068\u306a\u308bReducer\u306f\u4ee5\u4e0b\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\nweb/channels/redux_reducer.ex\ndef update_count(\"increment\") do\n  fn(count) -> count + 1 end\nend\ndef update_count(\"decrement\") do\n  fn(count) -> count - 1 end\nend\ndef reducer(action, state, socket) do\n  cond do\n    Enum.member?(~w(increment decrement), action) ->\n      Map.update(state, \"count\", 0, update_count(action))\n    action == \"async\" ->\n      state\n    true ->\n      state\n  end\nend\n\n\n\n\u540c\u671f\u7684\u306a\u8fd4\u7b54\n\u540c\u671f\u7684\u306a\u8fd4\u7b54\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306bPhoneix.Channel.handle_in/3\u5185\u3067Reducer\u306e\u8fd4\u308a\u5024\u3092\u66f4\u65b0\u3055\u308c\u305fState\u3068\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\n\nweb/channels/redux_reducer.ex\n{\n  :reply,\n  {:ok, reducer(action, payload, socket)},\n  socket\n}\n\n\n\n\u975e\u540c\u671f\u7684\u306a\u8fd4\u7b54\n\u975e\u540c\u671f\u7684\u306a\u8fd4\u7b54\u3067\u306fPhoenix.Channel.broadcast/3\u3092\u4f7f\u3044\u307e\u3059\u304c\u3001\n\u305d\u306e\u307e\u307e\u4f7f\u3046\u3068subscribe\u3057\u3066\u3044\u308b\u3059\u3079\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u9001\u4fe1\u3055\u308c\u3066\u3057\u307e\u3046\u305f\u3081\u3001\nclient\u6bce\u306b\u30e6\u30cb\u30fc\u30af\u306aid\u3092\u5272\u308a\u5f53\u3066\u3066\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u306b\u3001channel\u306e\u5b9a\u7fa9\u3067\n\nweb/channels/redux_reducer.ex\nintercept [\"update\"]\n\n\n\u3068\u3057\u3066update\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30d5\u30a3\u30eb\u30bf\u30fc\u5bfe\u8c61\u3068\u3057\u3066\u6307\u5b9a\u3057\u3001\n\nweb/channels/redux_reducer.ex\ndef handle_out(\"update\", msg, socket) do\n  if msg[\"user\"] == socket.assigns[\"user\"] do\n    push socket, \"update\", msg\n  end\n  {:noreply, socket}\nend\n\n\n\u306e\u3088\u3046\u306b\u30e6\u30fc\u30b6\u30fc\u306eid\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u30021\u79d2\u5f8c\u306eAction\u306e\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u306f\u4ee5\u4e0b\u306e\u95a2\u6570\u3067\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n\nweb/channels/redux_reducer.ex\ndef handle_action(action, socket, state) do\n  cond do\n    action == \"async\" ->\n      spawn fn ->\n        :timer.sleep(1000)\n        broadcast! socket, \"update\", %{\"count\" => 14, \"user\" => state[\"user\"]}\n      end\n      true ->\n  end\nend\n\n\n\n\u5b9f\u884c\u7d50\u679c\n\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3054\u3068\u306bWebSocket\u901a\u4fe1\u306b\u3088\u3063\u3066\u30ab\u30a6\u30f3\u30bf\u30fc\u304c\u66f4\u65b0\u3055\u308c\u307e\u3059\u3002\n\n\n\u307e\u3068\u3081\n\u4eca\u56de\u306f\u5358\u7d14\u306a\u4f8b\u3067\u3057\u305f\u304c\u3001\u3088\u308a\u8907\u96d1\u306a\u30a2\u30d7\u30ea\u306b\u306a\u3063\u305f\u5834\u5408\u306b\u307e\u3060\u898b\u3048\u3066\u3044\u306a\u3044\u8ab2\u984c\u306f\u3042\u308a\u305d\u3046\u3002\n\u3054\u610f\u898b\u3042\u308a\u307e\u3057\u305f\u3089\u30b3\u30e1\u30f3\u30c8\u304a\u5f85\u3061\u3057\u3066\u304a\u308a\u307e\u3059\u3002\n\u4f55\u304b\u3068\u52d5\u304d\u306e\u591a\u3044Web\u306e\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u754c\u9688\u306b\u3088\u3046\u3084\u304f\u53ce\u675f\u3092\u3082\u305f\u3089\u3059\u306e\u3067\u306f\u3068\u671f\u5f85\u3055\u308c\u308bRedux\u3067\u3059\u304c\u3001\n\u3044\u3063\u305d\u306e\u3053\u3068*Reducer*\u3092WebSocket\u30b5\u30fc\u30d0\u30fc\u306b\u7f6e\u3044\u305f\u3089\u9762\u767d\u3044\u306e\u3067\u306f\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\n### \u30e1\u30ea\u30c3\u30c8\n\n- \u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u30b5\u30fc\u30d0\u30fc\u3067\u8907\u6570\u306e\u30e6\u30fc\u30b6\u30fc\u306e*State*\u3092\u4e00\u5143\u7ba1\u7406\u3067\u304d\u308b\n- \u300c\u3061\u3083\u3093\u3068\u3057\u305f\u300d\u95a2\u6570\u578b\u8a00\u8a9e\u3067Redux\u306e\u6839\u5e79\u90e8\u5206\u3092\u66f8\u3051\u308b\uff08JS\u30d5\u30a1\u30f3\u306e\u7686\u69d8\u3059\u3044\u307e\u305b\u3093\uff09\n\n### \u30c7\u30e1\u30ea\u30c3\u30c8\n\n- \u901a\u4fe1\u304c\u5207\u65ad\u3057\u305f\u5834\u5408\u306eFallback\u7528\u306e\u30b9\u30c6\u30fc\u30c8\u3060\u3051\u306fRedux\u5916\u3067\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3067\u72ec\u7acb\u3057\u3066\u6301\u305f\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\n- \u901a\u4fe1\u56de\u6570\u304c\u591a\u304f\u306a\u308b\uff08WebSocket\u306a\u3089\u5927\u4e08\u592b\u3068\u671f\u5f85\uff09\n\n\n\u4eca\u56de\u306f\u672c\u5bb6\u306eRedux\u306f\u4e00\u5207\u4f7f\u308f\u305a\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u69cb\u6210\u3067Proof of concept\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n```txt\n                      action, state\n+----------------+   -------------->    +------------------+\n| client (React) |                      | server (Phoenix) |\n+----------------+   <--------------    +------------------+\n                          state\n```\n\n\u30b3\u30fc\u30c9\u306f[\u3053\u3061\u3089](https://github.com/sergeant-wizard/redux_server)\u306b\u516c\u958b\u3057\u3066\u307e\u3059\u3002\n\n# \u30a2\u30d7\u30ea\u306e\u6982\u8981\n[Redux\u672c\u5bb6](https://github.com/rackt/redux)\u306ecounter\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n*Action*\u306b\u306f\u30ab\u30a6\u30f3\u30bf\u30fc\u30921\u305a\u3064\u5897\u52a0\u30fb\u4f4e\u4e0b\u3055\u305b\u308b`increment`, `decrement`\u53ca\u3073\u30ab\u30a6\u30f3\u30bf\u30fc\u30921\u79d2\u5f8c\u306b\u5897\u52a0\u3055\u305b\u308b`async`\u304c\u3042\u308a\u307e\u3059\u3002\n*State*\u306f\u30ab\u30a6\u30f3\u30bf\u30fc\u306e\u5024\u306e\u307f\u3092\u4fdd\u6301\u3057\u307e\u3059\u3002\n\n# Client\n\nWebSocket\u3092\u4ecb\u3057\u305f*Action*, *State* \u306e\u9001\u53d7\u4fe1\u306e\u305f\u3081\u306bReact\u306eWrapper\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u51fa\u8eab\u306a\u3089\u3068\u308a\u3042\u3048\u305aComposition\u3092\u3057\u305f\u304f\u306a\u308b\u3082\u306e\u3067\u3059\u304c\u3001JavaScript\u3067\u306eComposition\u306e\u65b9\u6cd5\u306f\u8272\u3005\u3042\u308a\u307e\u3059\u306d\u3002\n\u4eca\u56de\u306f[\u3053\u306e\u8a18\u4e8b](https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750#.xdn9srtwg)\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b[High-order Components](https://gist.github.com/sebmarkbage/ef0bf1f338a7182b677])\u3092\u4f7f\u3046\u3068\u3059\u3063\u304d\u308a\u66f8\u3051\u307e\u3057\u305f\u3002\n\n```js:web/static/js/app.js\nconst reduxConnector = (ReactComponent, initialState) => class extends React.Component {\n  constructor() {\n    super();\n    this.state = Object.assign({}, initialState, {user: Math.random()});\n    this.channel = socket.channel(\"redux:\", {})\n    this.channel.join()\n      .receive(\"ok\", resp => {\n        console.log(\"Joined successfully\", resp)\n      })\n      .receive(\"error\", resp => { console.log(\"Unable to join\", resp) })\n    this.channel.on(\"update\", msg => this.setState(msg));\n  }\n  takeAction(type) {\n    this.channel.push(type, this.state)\n      .receive(\"ok\", msg => {\n        this.setState(msg);\n      });\n  }\n  render() {\n    return (\n      <ReactComponent\n        takeAction={this.takeAction.bind(this)}\n        reduxState={this.state}\n      />\n    );\n  }\n}\n\nclass Counter extends React.Component {\n  render() {\n    return (\n      <div>\n        Clicked: {this.props.reduxState.count}\n        <button onClick={this.props.takeAction.bind(this, \"increment\")}>+</button>\n        <button onClick={this.props.takeAction.bind(this, \"decrement\")}>-</button>\n        <button onClick={this.props.takeAction.bind(this, \"async\")}>async</button>\n      </div>\n    );\n  }\n}\n\nconst ReduxAppliedComponent = reduxConnector(Counter, {count: 0});\n```\n\n# Server\nPhoenix\u306echannel\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```ex:web/channels/user_socket.ex\nchannel \"redux:*\", ReduxServer.ReduxReducer\n```\n\n*Action*\u3092WebSocket\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3068\u3057\u3066\u3001*State*\u3092Payload\u3068\u3057\u3066\u53d7\u3051\u53d6\u308a\u307e\u3059\u3002\n\n\u4eca\u56de\u306e\u809d\u3068\u306a\u308b*Reducer*\u306f\u4ee5\u4e0b\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\n```ex:web/channels/redux_reducer.ex\ndef update_count(\"increment\") do\n  fn(count) -> count + 1 end\nend\ndef update_count(\"decrement\") do\n  fn(count) -> count - 1 end\nend\ndef reducer(action, state, socket) do\n  cond do\n    Enum.member?(~w(increment decrement), action) ->\n      Map.update(state, \"count\", 0, update_count(action))\n    action == \"async\" ->\n      state\n    true ->\n      state\n  end\nend\n```\n\n## \u540c\u671f\u7684\u306a\u8fd4\u7b54\n\u540c\u671f\u7684\u306a\u8fd4\u7b54\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b`Phoneix.Channel.handle_in/3`\u5185\u3067*Reducer*\u306e\u8fd4\u308a\u5024\u3092\u66f4\u65b0\u3055\u308c\u305f*State*\u3068\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\n\n```ex:web/channels/redux_reducer.ex\n{\n  :reply,\n  {:ok, reducer(action, payload, socket)},\n  socket\n}\n```\n\n## \u975e\u540c\u671f\u7684\u306a\u8fd4\u7b54\n\u975e\u540c\u671f\u7684\u306a\u8fd4\u7b54\u3067\u306f`Phoenix.Channel.broadcast/3`\u3092\u4f7f\u3044\u307e\u3059\u304c\u3001\n\u305d\u306e\u307e\u307e\u4f7f\u3046\u3068subscribe\u3057\u3066\u3044\u308b\u3059\u3079\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u9001\u4fe1\u3055\u308c\u3066\u3057\u307e\u3046\u305f\u3081\u3001\nclient\u6bce\u306b\u30e6\u30cb\u30fc\u30af\u306aid\u3092\u5272\u308a\u5f53\u3066\u3066\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u306b\u3001channel\u306e\u5b9a\u7fa9\u3067\n\n```ex:web/channels/redux_reducer.ex\nintercept [\"update\"]\n```\n\n\u3068\u3057\u3066`update`\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30d5\u30a3\u30eb\u30bf\u30fc\u5bfe\u8c61\u3068\u3057\u3066\u6307\u5b9a\u3057\u3001\n\n```ex:web/channels/redux_reducer.ex\ndef handle_out(\"update\", msg, socket) do\n  if msg[\"user\"] == socket.assigns[\"user\"] do\n    push socket, \"update\", msg\n  end\n  {:noreply, socket}\nend\n```  \n\n\u306e\u3088\u3046\u306b\u30e6\u30fc\u30b6\u30fc\u306eid\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u30021\u79d2\u5f8c\u306e*Action*\u306e\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u306f\u4ee5\u4e0b\u306e\u95a2\u6570\u3067\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n\n```ex:web/channels/redux_reducer.ex\ndef handle_action(action, socket, state) do\n  cond do\n    action == \"async\" ->\n      spawn fn ->\n        :timer.sleep(1000)\n        broadcast! socket, \"update\", %{\"count\" => 14, \"user\" => state[\"user\"]}\n      end\n      true ->\n  end\nend\n```\n\n# \u5b9f\u884c\u7d50\u679c\n\n\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3054\u3068\u306bWebSocket\u901a\u4fe1\u306b\u3088\u3063\u3066\u30ab\u30a6\u30f3\u30bf\u30fc\u304c\u66f4\u65b0\u3055\u308c\u307e\u3059\u3002\n![phoenix_redux.png](https://qiita-image-store.s3.amazonaws.com/0/67217/b5ac150b-a724-4ac5-e6d5-05c76d689410.png)\n\n# \u307e\u3068\u3081\n\n\u4eca\u56de\u306f\u5358\u7d14\u306a\u4f8b\u3067\u3057\u305f\u304c\u3001\u3088\u308a\u8907\u96d1\u306a\u30a2\u30d7\u30ea\u306b\u306a\u3063\u305f\u5834\u5408\u306b\u307e\u3060\u898b\u3048\u3066\u3044\u306a\u3044\u8ab2\u984c\u306f\u3042\u308a\u305d\u3046\u3002\n\u3054\u610f\u898b\u3042\u308a\u307e\u3057\u305f\u3089\u30b3\u30e1\u30f3\u30c8\u304a\u5f85\u3061\u3057\u3066\u304a\u308a\u307e\u3059\u3002\n", "tags": ["redux", "Phoenix", "Elixir", "reactjs", "websocket"]}