{"context": "Go\u3067AES\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0(CBC\u30e2\u30fc\u30c9)+PKCS7\u30d1\u30c7\u30a3\u30f3\u30b0+HMAC\u3092\u4f7f\u3063\u305f\u5b9f\u88c5\u3092\u3059\u308b\u306e\u7d9a\u304d\u3067\u3059\u3002\n\u3055\u3066\u3001\u524d\u56de\u306fAES+CBC+PKCS\u30d1\u30c7\u30a3\u30f3\u30b0\u3092\u4f7f\u3063\u305f\u5b9f\u88c5\u4f8b\u3092\u7d39\u4ecb\u3057\u305f\u3002\u30d1\u30c7\u30a3\u30f3\u30b0\u3092\u4f7f\u3063\u3066\u3001\u4efb\u610f\u306e\u5e73\u6587\u3092\u30d6\u30ed\u30c3\u30af\u578b\u6697\u53f7\u3067\u6697\u53f7\u5316\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u3063\u305f\u304c\u3001\u4e00\u65b9\u3067\u8106\u5f31\u6027\u304c\u3046\u307e\u308c\u3066\u3057\u307e\u3063\u305f\u3002\u6697\u53f7\u6587+\u30d1\u30c7\u30a3\u30f3\u30b0\u3092\u7e70\u308a\u8fd4\u3057\u9001\u308b\u3053\u3068\u3067\u5e73\u6587\u3092\u4e00\u90e8\u63a8\u6e2c\u3067\u304d\u3066\u3057\u307e\u3046\u3088\u3046\u306a\u8106\u5f31\u6027\u3060\u3002\u3053\u306e\u8106\u5f31\u6027\u306e\u6839\u672c\u539f\u56e0\u306f\u3001\u8ab0\u3082\u304c\u5fa9\u53f7\u3067\u304d\u3066\u3057\u307e\u3046\u90e8\u5206\u306b\u3042\u308b\u3002\u5f93\u3063\u3066\u3001\u5fa9\u53f7\u51e6\u7406\u306e\u305f\u3081\u306e\u6697\u53f7\u6587\u3092\u5165\u529b\u3059\u308b\u3082\u306e\u3092\u8a8d\u8a3c\u3059\u308b\u3053\u3068\u3067\u89e3\u6c7a\u3067\u304d\u308b\u3002\u305d\u306e\u4ed5\u7d44\u304cMAC(Message Authentication Code)\u3067\u3042\u308a\u3001\u4eca\u56de\u306fHMAC(keyed-hash MAC)\u3092\u4f7f\u3063\u305f\u5b9f\u88c5\u4f8b\u304c\u4eca\u56de\u306e\u3082\u306e\u306b\u306a\u308b\u3002\n\nAES\u6697\u53f7\u5316\u306b\u3088\u308bHMAC\u3068\u306f\n\u6697\u53f7\u6587\u3092HMAC\u7528\u306e\u5171\u6709\u9375\u3068\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u3067\u5c0e\u304d\u3060\u3055\u308c\u308b\u3082\u306e\u3002\u5fa9\u53f7\u3092\u3059\u308b\u307e\u3048\u306bHMAC\u3092\u691c\u8a3c\u3059\u308b\u3053\u3068\u3067\u3001\u5171\u6709\u9375\u3092\u6301\u3063\u3066\u3044\u308b\u30b5\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8a8d\u8a3c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\nGo\u306b\u304a\u3051\u308bHMAC\u306f\uff1f\n\u6a19\u6e96\u30d1\u30c3\u30b1\u30fc\u30b8\u5185\u306ecrypt/hmac\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u3002\u30d1\u30c7\u30a3\u30f3\u30b0\u306f\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u306e\u306b\u3001\u306a\u305c\u306a\u306e\u304b\u3002\u8b0e\u3067\u3042\u308b\u3002\u5b9f\u88c5\u81ea\u4f53\u306f\u30b7\u30f3\u30d7\u30eb\u306b\u306a\u308b\u3002\n\n\u6697\u53f7\u5316.go\nfunc EncryptByCBCMode(key []byte, plainText string) ([]byte, error) {\n    block, err := aes.NewCipher(key); if err != nil {\n        return nil, err\n    }\n\n    paddedPlaintext := PadByPkcs7([]byte(plainText))\n    cipherText := make([]byte, len(paddedPlaintext)) // cipher text must be larger than plaintext\n    iv := make([]byte, aes.BlockSize)// Unique iv is required\n    _, err = rand.Read(iv); if err != nil {\n        return nil, err\n    }\n\n    cbc := cipher.NewCBCEncrypter(block, iv)\n    cbc.CryptBlocks(cipherText, paddedPlaintext)\n    cipherText = append(iv, cipherText...)\n\n        // MAC\u4f5c\u6210\n    mac := hmac.New(sha256.New, []byte(\"12345678912345678912345678912345\")) // sha256\u306ehmac_key(32 byte)\n    mac.Write(cipherText)\n    cipherText = mac.Sum(cipherText)\n    return []byte(cipherText), nil\n\n\n\n\u5fa9\u53f7.go\nfunc DecryptByCBCMode(key []byte, cipherText []byte) (string, error) {\n    if len(cipherText) < aes.BlockSize + sha256.Size {\n        panic(\"cipher text must be longer than blocksize\")\n    } else if len(cipherText) % aes.BlockSize != 0 {\n        panic(\"cipher text must be multiple of blocksize(128bit)\")\n    }\n\n\u3000\u3000\u3000\u3000// mac\u306e\u53d6\u308a\u51fa\u3057\n    macSize := len(cipherText) - sha256.Size\n    macMessage := cipherText[macSize:]\n\n        // \u6697\u53f7\u6587\u304b\u3089\u60f3\u5b9amac\u3092\u8a08\u7b97\n    mac := hmac.New(sha256.New, []byte(\"12345678912345678912345678912345\")) // sha256\u306ehmac_key(32 byte)\n    mac.Write(cipherText[:macSize])\n    expectedMAC := mac.Sum(nil)\n\n        // MAC\u306b\u3088\u308b\u8a8d\u8a3c\n    if !hmac.Equal(macMessage, expectedMAC) {\n        return \"\", errors.New(\"Failed Decrypting\")\n    }\n\n    iv := cipherText[:aes.BlockSize]\n    plainText := make([]byte, len(cipherText[aes.BlockSize:macSize]))\n    block, err := aes.NewCipher(key); if err != nil {\n        return \"\", err\n    }\n    cbc := cipher.NewCBCDecrypter(block, iv)\n    cbc.CryptBlocks(plainText, cipherText[aes.BlockSize:macSize])\n\n    return string(UnPadByPkcs7(plainText)), nil\n}\n\n\n\n\n\u305d\u306e\u4ed6\nAES +CBC +\u30d1\u30c7\u30a3\u30f3\u30b0 + hmac\u3067\u305f\u3081\u3057\u305f\u304c\u3001 AES +GCM\u3067\u5168\u3066\u3084\u308a\u305f\u304b\u3063\u305f\u3053\u3068\u304c\u51fa\u6765\u308b\u307f\u305f\u3044\u306a\u306e\u3067\u3001\u6b21\u56de\u306f\u305d\u3061\u3089\u3092\u8a66\u3057\u3066\u307f\u308b.\n[Go\u3067AES\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0(CBC\u30e2\u30fc\u30c9)+PKCS7\u30d1\u30c7\u30a3\u30f3\u30b0+HMAC\u3092\u4f7f\u3063\u305f\u5b9f\u88c5\u3092\u3059\u308b](http://qiita.com/ken5scal/items/538febf69f9ac98ab292)\u306e\u7d9a\u304d\u3067\u3059\u3002\n\n\u3055\u3066\u3001\u524d\u56de\u306fAES+CBC+PKCS\u30d1\u30c7\u30a3\u30f3\u30b0\u3092\u4f7f\u3063\u305f\u5b9f\u88c5\u4f8b\u3092\u7d39\u4ecb\u3057\u305f\u3002\u30d1\u30c7\u30a3\u30f3\u30b0\u3092\u4f7f\u3063\u3066\u3001\u4efb\u610f\u306e\u5e73\u6587\u3092\u30d6\u30ed\u30c3\u30af\u578b\u6697\u53f7\u3067\u6697\u53f7\u5316\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u3063\u305f\u304c\u3001\u4e00\u65b9\u3067\u8106\u5f31\u6027\u304c\u3046\u307e\u308c\u3066\u3057\u307e\u3063\u305f\u3002\u6697\u53f7\u6587+\u30d1\u30c7\u30a3\u30f3\u30b0\u3092\u7e70\u308a\u8fd4\u3057\u9001\u308b\u3053\u3068\u3067\u5e73\u6587\u3092\u4e00\u90e8\u63a8\u6e2c\u3067\u304d\u3066\u3057\u307e\u3046\u3088\u3046\u306a\u8106\u5f31\u6027\u3060\u3002\u3053\u306e\u8106\u5f31\u6027\u306e\u6839\u672c\u539f\u56e0\u306f\u3001\u8ab0\u3082\u304c\u5fa9\u53f7\u3067\u304d\u3066\u3057\u307e\u3046\u90e8\u5206\u306b\u3042\u308b\u3002\u5f93\u3063\u3066\u3001\u5fa9\u53f7\u51e6\u7406\u306e\u305f\u3081\u306e\u6697\u53f7\u6587\u3092\u5165\u529b\u3059\u308b\u3082\u306e\u3092\u8a8d\u8a3c\u3059\u308b\u3053\u3068\u3067\u89e3\u6c7a\u3067\u304d\u308b\u3002\u305d\u306e\u4ed5\u7d44\u304cMAC(Message Authentication Code)\u3067\u3042\u308a\u3001\u4eca\u56de\u306fHMAC(keyed-hash MAC)\u3092\u4f7f\u3063\u305f\u5b9f\u88c5\u4f8b\u304c\u4eca\u56de\u306e\u3082\u306e\u306b\u306a\u308b\u3002\n\n# AES\u6697\u53f7\u5316\u306b\u3088\u308bHMAC\u3068\u306f\n\u6697\u53f7\u6587\u3092HMAC\u7528\u306e\u5171\u6709\u9375\u3068\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u3067\u5c0e\u304d\u3060\u3055\u308c\u308b\u3082\u306e\u3002\u5fa9\u53f7\u3092\u3059\u308b\u307e\u3048\u306bHMAC\u3092\u691c\u8a3c\u3059\u308b\u3053\u3068\u3067\u3001\u5171\u6709\u9375\u3092\u6301\u3063\u3066\u3044\u308b\u30b5\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8a8d\u8a3c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n# Go\u306b\u304a\u3051\u308bHMAC\u306f\uff1f\n\u6a19\u6e96\u30d1\u30c3\u30b1\u30fc\u30b8\u5185\u306ecrypt/hmac\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u3002\u30d1\u30c7\u30a3\u30f3\u30b0\u306f\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u306e\u306b\u3001\u306a\u305c\u306a\u306e\u304b\u3002\u8b0e\u3067\u3042\u308b\u3002\u5b9f\u88c5\u81ea\u4f53\u306f\u30b7\u30f3\u30d7\u30eb\u306b\u306a\u308b\u3002\n\n```\u6697\u53f7\u5316.go\nfunc EncryptByCBCMode(key []byte, plainText string) ([]byte, error) {\n\tblock, err := aes.NewCipher(key); if err != nil {\n\t\treturn nil, err\n\t}\n\n\tpaddedPlaintext := PadByPkcs7([]byte(plainText))\n\tcipherText := make([]byte, len(paddedPlaintext)) // cipher text must be larger than plaintext\n\tiv := make([]byte, aes.BlockSize)// Unique iv is required\n\t_, err = rand.Read(iv); if err != nil {\n\t\treturn nil, err\n\t}\n\n\tcbc := cipher.NewCBCEncrypter(block, iv)\n\tcbc.CryptBlocks(cipherText, paddedPlaintext)\n\tcipherText = append(iv, cipherText...)\n\n        // MAC\u4f5c\u6210\n\tmac := hmac.New(sha256.New, []byte(\"12345678912345678912345678912345\")) // sha256\u306ehmac_key(32 byte)\n\tmac.Write(cipherText)\n\tcipherText = mac.Sum(cipherText)\n\treturn []byte(cipherText), nil\n```\n\n```\u5fa9\u53f7.go\nfunc DecryptByCBCMode(key []byte, cipherText []byte) (string, error) {\n\tif len(cipherText) < aes.BlockSize + sha256.Size {\n\t\tpanic(\"cipher text must be longer than blocksize\")\n\t} else if len(cipherText) % aes.BlockSize != 0 {\n\t\tpanic(\"cipher text must be multiple of blocksize(128bit)\")\n\t}\n\n\u3000\u3000\u3000\u3000// mac\u306e\u53d6\u308a\u51fa\u3057\n\tmacSize := len(cipherText) - sha256.Size\n\tmacMessage := cipherText[macSize:]\n\n        // \u6697\u53f7\u6587\u304b\u3089\u60f3\u5b9amac\u3092\u8a08\u7b97\n\tmac := hmac.New(sha256.New, []byte(\"12345678912345678912345678912345\")) // sha256\u306ehmac_key(32 byte)\n\tmac.Write(cipherText[:macSize])\n\texpectedMAC := mac.Sum(nil)\n\n        // MAC\u306b\u3088\u308b\u8a8d\u8a3c\n\tif !hmac.Equal(macMessage, expectedMAC) {\n\t\treturn \"\", errors.New(\"Failed Decrypting\")\n\t}\n\n\tiv := cipherText[:aes.BlockSize]\n\tplainText := make([]byte, len(cipherText[aes.BlockSize:macSize]))\n\tblock, err := aes.NewCipher(key); if err != nil {\n\t\treturn \"\", err\n\t}\n\tcbc := cipher.NewCBCDecrypter(block, iv)\n\tcbc.CryptBlocks(plainText, cipherText[aes.BlockSize:macSize])\n\n\treturn string(UnPadByPkcs7(plainText)), nil\n}\n\n```\n\n# \u305d\u306e\u4ed6\nAES +CBC +\u30d1\u30c7\u30a3\u30f3\u30b0 + hmac\u3067\u305f\u3081\u3057\u305f\u304c\u3001 AES +GCM\u3067\u5168\u3066\u3084\u308a\u305f\u304b\u3063\u305f\u3053\u3068\u304c\u51fa\u6765\u308b\u307f\u305f\u3044\u306a\u306e\u3067\u3001\u6b21\u56de\u306f\u305d\u3061\u3089\u3092\u8a66\u3057\u3066\u307f\u308b.\n", "tags": ["Go1.7.1", "\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3", "\u6697\u53f7", "Security"]}