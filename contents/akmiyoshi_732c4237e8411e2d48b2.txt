{"tags": ["Julia", "Windows", "Mac", "Linux", "Python"], "context": " More than 1 year has passed since last update.\u300e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e Julia \u3067\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u300f \u3067\u3068\u308a\u3042\u3048\u305a\u30b5\u30f3\u30d7\u30eb\u3092\u52d5\u304b\u3059\u3053\u3068\u306b\u6210\u529f\u3057\u305f\u304c\u3001\u81ea\u5206\u306e(Julia\u8a00\u8a9e\u306e)\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f5c\u3063\u305f\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u306b\u306f\u3069\u3046\u3057\u305f\u3089\u826f\u3044\u304b\u3092\u8abf\u3079\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\u3046\uff5e\u3093\u30013D\u30b0\u30e9\u30d5(OpenGL)\u3068\u304b\u3082\u4f7f\u3063\u3066\u307f\u305f\u3044\u3057\u3001PyQtGraph \u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u5168\u90e8 Julia \u306b\u79fb\u690d\u3059\u308b\u306e\u3082\u5927\u5909\u305d\u3046\u3060\u306a\uff5e\u3066\u601d\u3063\u305f\u308a\u3057\u305f\u3002\n\u3088\u3063\u3057\u3001\u65b9\u91dd\u8ee2\u63db\u2026\u30b0\u30e9\u30d5\u306f\u5168\u90e8 Python \u306b\u4efb\u305b\u3088\u3046\uff01\n\u3066\u3053\u3068\u3067\u3001\u6587\u672b\u306e\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3068\u306a\u3063\u305f\u3002\n\n\nPlotting.jl (Julia \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9)\u306f\u3001Plotting.my_graph_set() \u3068\u3044\u3046\u95a2\u6570\u306b\u914d\u5217\u3092\u6e21\u3059\u3060\u3051(\u5b9f\u969b\u306b\u306f\u4e88\u3081\u914d\u5217\u3092\u8a08\u7b97\u7d50\u679c\u3068\u3057\u3066\u6c42\u3081\u308b\u306e\u3060\u304c)\u3002\u6e21\u3057\u305f\u3089\u3001Plotting.my_graph_run() \u3092\u547c\u3093\u3067\u30b0\u30e9\u30d5\u304c\u63cf\u753b\u3055\u308c\u308b\u3002\u30b0\u30e9\u30d5\u306e\u63cf\u753b\u306f Python \u306b\u304a\u4efb\u305b\u3002\nPlotting.py (Python \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9)\u3067\u306f\u3001plot_data_1 \u3068\u3044\u3046\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u306b\u3001Julia \u304b\u3089\u6e21\u3055\u308c\u308b\u914d\u5217\u3092\u683c\u7d0d\u3059\u308b\u3002my_graph_set() \u304c\u547c\u3070\u308c\u305f\u6642\u306b plot_data_1 \u3068\u3044\u3046\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u306b Julia \u304b\u3089\u6e21\u3055\u308c\u305f\u914d\u5217\u3092\u683c\u7d0d\u3057\u3066\u304a\u304f\u3002my_graph_run() \u304c\u547c\u3070\u308c\u305f\u3089 \u5de6\u4e0a\u306e\u30b0\u30e9\u30d5\u3060\u3051 \u3092 Julia \u304b\u3089\u6e21\u3055\u308c\u305f\u914d\u5217\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u63cf\u753b\u3059\u308b\u3002\nPyCall \u3092\u7528\u3044\u3066 Python \u306e\u30b3\u30fc\u30c9\u3092\u547c\u3073\u51fa\u3059\u969b\u306b\u306f\u3001C:\\julia-0.2.1-win32\\bin \u304c\u30ed\u30fc\u30c9\u30d1\u30b9\u306b\u542b\u307e\u308c\u308b\u306e\u3067\u3001Plotting.jl \u304a\u3088\u3073 Plotting.py \u306e\u4e21\u65b9\u5171\u3092 C:\\julia-0.2.1-win32\\bin \u914d\u4e0b\u306b(\u3068\u308a\u3042\u3048\u305a)\u4fdd\u5b58\u3057\u3066\u304a\u304f\u3053\u3068\u306b\u3057\u305f\u3002\n\n\u30b0\u30e9\u30d5\u306e\u51e6\u7406\u306f\u3001 Python \u306e\u30b3\u30fc\u30c9\u306b\u4efb\u305b\u3063\u304d\u308a \u306b\u3059\u308b\u3053\u3068\u3067\u3001\u958b\u767a\u304c\u8d85\u697d\u306b\u306a\u3063\u305f\u308f\uff5e\uff01\n\u5f8c\u306f\u3001Julia \u5074\u3067\u305d\u308c\u3089\u3057\u3044\u8a08\u7b97\u51e6\u7406\u3092\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u304c\u3067\u304d\u308c\u3070\u2026 \u305d\u306e\u6b21\u306f\u3001OpenGL \u3092\u4f7f\u3063\u305f 3D \u30b0\u30e9\u30d5\u3092\u3084\u3063\u3066\u307f\u3088\u3046\uff01\n\n\u6ce8\u8a18\uff1a\u74b0\u5883\u69cb\u7bc9\u306b\u3064\u3044\u3066\u306f\u3001\u300e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e Julia \u3067\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u300f \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u307e\u305b\u3002\n\n\nPlotting.jl(C\nusing PyCall\n\n@pyimport Plotting\nPlotting.my_graph_set([1, 2, 3, 4, 5, 10, 20, 5])\nPlotting.my_graph_run()\n\n\n\nPlotting.py(C\n# -*- coding: utf-8 -*-\n\"\"\"\nThis example demonstrates many of the 2D plotting capabilities\nin pyqtgraph. All of the plots may be panned/scaled by dragging with \nthe left/right mouse buttons. Right click on any plot to show a context menu.\n\"\"\"\n\nfrom pyqtgraph.Qt import QtGui, QtCore\nimport numpy as np\nimport pyqtgraph as pg\n\nplot_data_1 = []\n\ndef my_graph_set(plot_data):\n    global plot_data_1\n    plot_data_1 = plot_data\n\ndef my_graph_run():\n    global plot_data_1\n\n    app = QtGui.QApplication([])\n\n    win = pg.GraphicsWindow(title=\"Basic plotting examples\")\n    win.resize(800,600)\n    win.setWindowTitle('pyqtgraph example: Plotting')\n\n    # Enable antialiasing for prettier plots\n    pg.setConfigOptions(antialias=True)\n\n    p1 = win.addPlot(title=\"Basic array plotting\", y=plot_data_1)\n\n    p2 = win.addPlot(title=\"Multiple curves\")\n    p2.plot(np.random.normal(size=100), pen=(255,0,0))\n    p2.plot(np.random.normal(size=100)+5, pen=(0,255,0))\n    p2.plot(np.random.normal(size=100)+10, pen=(0,0,255))\n\n    p3 = win.addPlot(title=\"Drawing with points\")\n    p3.plot(np.random.normal(size=100), pen=(200,200,200), symbolBrush=(255,0,0), symbolPen='w')\n\n    win.nextRow()\n\n    p4 = win.addPlot(title=\"Parametric, grid enabled\")\n    x = np.cos(np.linspace(0, 2*np.pi, 1000))\n    y = np.sin(np.linspace(0, 4*np.pi, 1000))\n    p4.plot(x, y)\n    p4.showGrid(x=True, y=True)\n\n    p5 = win.addPlot(title=\"Scatter plot, axis labels, log scale\")\n    x = np.random.normal(size=1000) * 1e-5\n    y = x*1000 + 0.005 * np.random.normal(size=1000)\n    y -= y.min()-1.0\n    mask = x > 1e-15\n    x = x[mask]\n    y = y[mask]\n    p5.plot(x, y, pen=None, symbol='t', symbolPen=None, symbolSize=10, symbolBrush=(100, 100, 255, 50))\n    p5.setLabel('left', \"Y Axis\", units='A')\n    p5.setLabel('bottom', \"Y Axis\", units='s')\n    p5.setLogMode(x=True, y=False)\n\n    global curve, data, ptr, p6\n    p6 = win.addPlot(title=\"Updating plot\")\n    curve = p6.plot(pen='y')\n    data = np.random.normal(size=(10,1000))\n    ptr = 0\n    def update():\n        global curve, data, ptr, p6\n        curve.setData(data[ptr%10])\n        if ptr == 0:\n            p6.enableAutoRange('xy', False)  ## stop auto-scaling after the first data set is plotted\n        ptr += 1\n    timer = QtCore.QTimer()\n    timer.timeout.connect(update)\n    timer.start(50)\n\n    win.nextRow()\n\n    p7 = win.addPlot(title=\"Filled plot, axis disabled\")\n    y = np.sin(np.linspace(0, 10, 1000)) + np.random.normal(size=1000, scale=0.1)\n    p7.plot(y, fillLevel=-0.3, brush=(50,50,200,100))\n    p7.showAxis('bottom', False)\n\n    x2 = np.linspace(-100, 100, 1000)\n    data2 = np.sin(x2) / x2\n    p8 = win.addPlot(title=\"Region Selection\")\n    p8.plot(data2, pen=(255,255,255,200))\n    lr = pg.LinearRegionItem([400,700])\n    lr.setZValue(-10)\n    p8.addItem(lr)\n\n    p9 = win.addPlot(title=\"Zoom on selected region\")\n    p9.plot(data2)\n    def updatePlot():\n        p9.setXRange(*lr.getRegion(), padding=0)\n    def updateRegion():\n        lr.setRegion(p9.getViewBox().viewRange()[0])\n    lr.sigRegionChanged.connect(updatePlot)\n    p9.sigXRangeChanged.connect(updateRegion)\n    updatePlot()\n\n    QtGui.QApplication.instance().exec_()\n\n\n[\u300e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e Julia \u3067\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u300f](http://qiita.com/akmiyoshi/items/a2aca5369c8e3c11ae59) \u3067\u3068\u308a\u3042\u3048\u305a\u30b5\u30f3\u30d7\u30eb\u3092\u52d5\u304b\u3059\u3053\u3068\u306b\u6210\u529f\u3057\u305f\u304c\u3001\u81ea\u5206\u306e(Julia\u8a00\u8a9e\u306e)\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f5c\u3063\u305f\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u306b\u306f\u3069\u3046\u3057\u305f\u3089\u826f\u3044\u304b\u3092\u8abf\u3079\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\u3046\uff5e\u3093\u30013D\u30b0\u30e9\u30d5(OpenGL)\u3068\u304b\u3082\u4f7f\u3063\u3066\u307f\u305f\u3044\u3057\u3001PyQtGraph \u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u5168\u90e8 Julia \u306b\u79fb\u690d\u3059\u308b\u306e\u3082\u5927\u5909\u305d\u3046\u3060\u306a\uff5e\u3066\u601d\u3063\u305f\u308a\u3057\u305f\u3002\n**\u3088\u3063\u3057\u3001\u65b9\u91dd\u8ee2\u63db\u2026\u30b0\u30e9\u30d5\u306f\u5168\u90e8 Python \u306b\u4efb\u305b\u3088\u3046\uff01**\n\n\u3066\u3053\u3068\u3067\u3001\u6587\u672b\u306e\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3068\u306a\u3063\u305f\u3002\n\n![test3.gif](https://qiita-image-store.s3.amazonaws.com/0/32879/04dc1c6d-0a5c-5990-970d-dfff08d9e552.gif)\n\n* Plotting.jl (Julia \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9)\u306f\u3001Plotting.my_graph_set() \u3068\u3044\u3046\u95a2\u6570\u306b\u914d\u5217\u3092\u6e21\u3059\u3060\u3051(\u5b9f\u969b\u306b\u306f\u4e88\u3081\u914d\u5217\u3092\u8a08\u7b97\u7d50\u679c\u3068\u3057\u3066\u6c42\u3081\u308b\u306e\u3060\u304c)\u3002\u6e21\u3057\u305f\u3089\u3001Plotting.my_graph_run() \u3092\u547c\u3093\u3067\u30b0\u30e9\u30d5\u304c\u63cf\u753b\u3055\u308c\u308b\u3002\u30b0\u30e9\u30d5\u306e\u63cf\u753b\u306f Python \u306b\u304a\u4efb\u305b\u3002\n* Plotting.py (Python \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9)\u3067\u306f\u3001plot_data_1 \u3068\u3044\u3046\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u306b\u3001Julia \u304b\u3089\u6e21\u3055\u308c\u308b\u914d\u5217\u3092\u683c\u7d0d\u3059\u308b\u3002my_graph_set() \u304c\u547c\u3070\u308c\u305f\u6642\u306b plot_data_1 \u3068\u3044\u3046\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u306b Julia \u304b\u3089\u6e21\u3055\u308c\u305f\u914d\u5217\u3092\u683c\u7d0d\u3057\u3066\u304a\u304f\u3002my_graph_run() \u304c\u547c\u3070\u308c\u305f\u3089 **\u5de6\u4e0a\u306e\u30b0\u30e9\u30d5\u3060\u3051** \u3092 Julia \u304b\u3089\u6e21\u3055\u308c\u305f\u914d\u5217\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u63cf\u753b\u3059\u308b\u3002\n* PyCall \u3092\u7528\u3044\u3066 Python \u306e\u30b3\u30fc\u30c9\u3092\u547c\u3073\u51fa\u3059\u969b\u306b\u306f\u3001C:\\julia-0.2.1-win32\\bin \u304c\u30ed\u30fc\u30c9\u30d1\u30b9\u306b\u542b\u307e\u308c\u308b\u306e\u3067\u3001Plotting.jl \u304a\u3088\u3073 Plotting.py \u306e\u4e21\u65b9\u5171\u3092 C:\\julia-0.2.1-win32\\bin \u914d\u4e0b\u306b(\u3068\u308a\u3042\u3048\u305a)\u4fdd\u5b58\u3057\u3066\u304a\u304f\u3053\u3068\u306b\u3057\u305f\u3002\n\n\u30b0\u30e9\u30d5\u306e\u51e6\u7406\u306f\u3001 **Python \u306e\u30b3\u30fc\u30c9\u306b\u4efb\u305b\u3063\u304d\u308a** \u306b\u3059\u308b\u3053\u3068\u3067\u3001\u958b\u767a\u304c\u8d85\u697d\u306b\u306a\u3063\u305f\u308f\uff5e\uff01\n\u5f8c\u306f\u3001Julia \u5074\u3067\u305d\u308c\u3089\u3057\u3044\u8a08\u7b97\u51e6\u7406\u3092\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u304c\u3067\u304d\u308c\u3070\u2026 **\u305d\u306e\u6b21\u306f\u3001OpenGL \u3092\u4f7f\u3063\u305f 3D \u30b0\u30e9\u30d5\u3092\u3084\u3063\u3066\u307f\u3088\u3046\uff01**\n\n> \u6ce8\u8a18\uff1a\u74b0\u5883\u69cb\u7bc9\u306b\u3064\u3044\u3066\u306f\u3001[\u300e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e Julia \u3067\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u300f](http://qiita.com/akmiyoshi/items/a2aca5369c8e3c11ae59) \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u307e\u305b\u3002\n\n```text:Plotting.jl(C:\\julia-0.2.1-win32\\bin\u306b\u4fdd\u5b58\u3059\u308b\u3053\u3068)\nusing PyCall\n\n@pyimport Plotting\nPlotting.my_graph_set([1, 2, 3, 4, 5, 10, 20, 5])\nPlotting.my_graph_run()\n```\n\n```python:Plotting.py(C:\\julia-0.2.1-win32\\bin\u306b\u4fdd\u5b58\u3059\u308b\u3053\u3068)\n# -*- coding: utf-8 -*-\n\"\"\"\nThis example demonstrates many of the 2D plotting capabilities\nin pyqtgraph. All of the plots may be panned/scaled by dragging with \nthe left/right mouse buttons. Right click on any plot to show a context menu.\n\"\"\"\n\nfrom pyqtgraph.Qt import QtGui, QtCore\nimport numpy as np\nimport pyqtgraph as pg\n\nplot_data_1 = []\n\ndef my_graph_set(plot_data):\n\tglobal plot_data_1\n\tplot_data_1 = plot_data\n\ndef my_graph_run():\n\tglobal plot_data_1\n\n\tapp = QtGui.QApplication([])\n\n\twin = pg.GraphicsWindow(title=\"Basic plotting examples\")\n\twin.resize(800,600)\n\twin.setWindowTitle('pyqtgraph example: Plotting')\n\n\t# Enable antialiasing for prettier plots\n\tpg.setConfigOptions(antialias=True)\n\n\tp1 = win.addPlot(title=\"Basic array plotting\", y=plot_data_1)\n\n\tp2 = win.addPlot(title=\"Multiple curves\")\n\tp2.plot(np.random.normal(size=100), pen=(255,0,0))\n\tp2.plot(np.random.normal(size=100)+5, pen=(0,255,0))\n\tp2.plot(np.random.normal(size=100)+10, pen=(0,0,255))\n\n\tp3 = win.addPlot(title=\"Drawing with points\")\n\tp3.plot(np.random.normal(size=100), pen=(200,200,200), symbolBrush=(255,0,0), symbolPen='w')\n\n\twin.nextRow()\n\n\tp4 = win.addPlot(title=\"Parametric, grid enabled\")\n\tx = np.cos(np.linspace(0, 2*np.pi, 1000))\n\ty = np.sin(np.linspace(0, 4*np.pi, 1000))\n\tp4.plot(x, y)\n\tp4.showGrid(x=True, y=True)\n\n\tp5 = win.addPlot(title=\"Scatter plot, axis labels, log scale\")\n\tx = np.random.normal(size=1000) * 1e-5\n\ty = x*1000 + 0.005 * np.random.normal(size=1000)\n\ty -= y.min()-1.0\n\tmask = x > 1e-15\n\tx = x[mask]\n\ty = y[mask]\n\tp5.plot(x, y, pen=None, symbol='t', symbolPen=None, symbolSize=10, symbolBrush=(100, 100, 255, 50))\n\tp5.setLabel('left', \"Y Axis\", units='A')\n\tp5.setLabel('bottom', \"Y Axis\", units='s')\n\tp5.setLogMode(x=True, y=False)\n\n\tglobal curve, data, ptr, p6\n\tp6 = win.addPlot(title=\"Updating plot\")\n\tcurve = p6.plot(pen='y')\n\tdata = np.random.normal(size=(10,1000))\n\tptr = 0\n\tdef update():\n\t\tglobal curve, data, ptr, p6\n\t\tcurve.setData(data[ptr%10])\n\t\tif ptr == 0:\n\t\t\tp6.enableAutoRange('xy', False)  ## stop auto-scaling after the first data set is plotted\n\t\tptr += 1\n\ttimer = QtCore.QTimer()\n\ttimer.timeout.connect(update)\n\ttimer.start(50)\n\n\twin.nextRow()\n\n\tp7 = win.addPlot(title=\"Filled plot, axis disabled\")\n\ty = np.sin(np.linspace(0, 10, 1000)) + np.random.normal(size=1000, scale=0.1)\n\tp7.plot(y, fillLevel=-0.3, brush=(50,50,200,100))\n\tp7.showAxis('bottom', False)\n\n\tx2 = np.linspace(-100, 100, 1000)\n\tdata2 = np.sin(x2) / x2\n\tp8 = win.addPlot(title=\"Region Selection\")\n\tp8.plot(data2, pen=(255,255,255,200))\n\tlr = pg.LinearRegionItem([400,700])\n\tlr.setZValue(-10)\n\tp8.addItem(lr)\n\n\tp9 = win.addPlot(title=\"Zoom on selected region\")\n\tp9.plot(data2)\n\tdef updatePlot():\n\t    p9.setXRange(*lr.getRegion(), padding=0)\n\tdef updateRegion():\n\t    lr.setRegion(p9.getViewBox().viewRange()[0])\n\tlr.sigRegionChanged.connect(updatePlot)\n\tp9.sigXRangeChanged.connect(updateRegion)\n\tupdatePlot()\n\n\tQtGui.QApplication.instance().exec_()\n```\n"}