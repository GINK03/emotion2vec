{"tags": ["Swift", "playground", "Mandelbrot", "XCode7", "Swift2.0"], "context": " More than 1 year has passed since last update.\n\u4ee5\u524d https://developer.apple.com/swift/blog/?id=26 \u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u305f\n\u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u96c6\u5408\u304cXCode7\u3067\u52d5\u304b\u306a\u304f\u306a\u3063\u305f\u306e\u3067Swift\u306e\u52c9\u5f37\u304c\u3066\u3089\u306b\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\n\u4f5c\u308a\u65b9\n1.XCode7\u3092\u7acb\u3061\u4e0a\u3052\u3066Playground\u3092iOS\u306e\u8a2d\u5b9a\u3067\u4f5c\u6210\u3059\u308b\u3002\n2.Sources\u30d5\u30a9\u30eb\u30c0\u306bswift\u30d5\u30a1\u30a4\u30eb\u3092\u9069\u5f53\u306b\u4f5c\u6210\u3057\u3066\u4ee5\u4e0b\u3092\u8cbc\u308a\u4ed8\u3051\u308b\u3002\n\nmandelbrot.swift\nimport UIKit\n\nlet resolution = 400\nlet iteration = 300\n\nstruct vec2{\n  var x: Double\n  var y: Double\n\n  func length() -> Double{\n   return sqrt(pow(x,2)+pow(y,2))\n  }\n}\n\nfunc + (left:vec2,right:vec2) -> vec2{\n  return vec2(x:(left.x + right.x),y:(left.y + right.y))\n}\n\nstruct Result{\n  var div: Bool//\u767a\u6563\u3057\u305f\u304b\u3069\u3046\u304b\n  var elapsed: Int?//\u767a\u6563\u3057\u305f\u5834\u5408\u306e\u8a08\u7b97\u56de\u6570\n}\n\n/// \u7d50\u679c\u683c\u7d0d\u30af\u30e9\u30b9\npublic class ResultArray{\n  var array: [Result]\n  init(){\n    self.array = Array(\n      count:resolution * resolution,\n      repeatedValue:Result(div: false,elapsed: nil)\n    )\n  }\n\n  func indexIsValid(x:Int,y:Int)->Bool{\n    return x>=0 && x<resolution && y>=0 && y<resolution\n  }\n\n  subscript(x:Int,y:Int) -> Result{\n    get{\n      assert(indexIsValid(x, y:y))\n      return array[x * resolution + y]\n    }\n    set{\n      assert(indexIsValid(x, y:y))\n      array[x * resolution + y] = newValue\n    }\n  }\n}\n\n/// \u8907\u7d20\u6570\u5ea7\u6a19\u4e0a\u306e\u767a\u6563\u3092\u8a08\u7b97\n/// - parameter c :\u8907\u7d20\u6570\u5ea7\u6a19\n/// - returns: \u767a\u6563\u306e\u8a08\u7b97\u7d50\u679c\nfunc calcDiv(c:vec2) -> Result{\n  var result:Result = Result(div:false,elapsed:nil)\n  var z = vec2(x:0.0,y:0.0)\n  for i in 0..<iteration{\n    let nz = vec2(\n      x: pow(z.x,2.0) - pow(z.y,2.0),\n      y: 2.0 * z.x * z.y\n    )\n    z = nz + c\n    if z.length() > 2.0{\n      result = Result(div: true, elapsed: i)\n      break\n    }\n  }\n  return result\n}\n\n/// \u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u96c6\u5408\u306e\u8a08\u7b97\n/// - returns: \u8a08\u7b97\u7d50\u679c\npublic func calc() -> ResultArray{\n  let result=ResultArray()\n  for i in 0..<resolution{\n    for j in 0..<resolution{\n      let c = vec2(\n        x: Double(i)/Double(resolution)*4.0-2.0,\n        y: (Double(j)/Double(resolution)*4.0-2.0) * (-1)\n      )\n      result[i,j] = calcDiv(c)\n    }\n  }\n  return result\n}\n\n/// \u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u96c6\u5408\u306e\u63cf\u753b\n/// - parameters result: \u8a08\u7b97\u7d50\u679c\n/// - returns : \u63cf\u753b\u30c7\u30fc\u30bf\npublic func draw(result:ResultArray) -> UIView{\n  let size = CGSize(width: resolution, height: resolution)\n  let view = UIView(frame: CGRect(origin:CGPointZero, size: size))\n  view.backgroundColor=UIColor(white:0.9,alpha:1.0)\n  UIGraphicsBeginImageContextWithOptions(size, false,0)\n  for i in 0..<resolution{\n    for j in 0..<resolution{\n      let rect = CGRectMake(CGFloat(i * 1), CGFloat(j * 1), 1, 1)\n      let component: [CGFloat] = {\n        if(result[i,j].div){\n          let e: CGFloat = CGFloat(Float(result[i,j].elapsed!)*2.0/Float(iteration))\n          return [1.0,1.0-e,1.0-e,1.0]\n        }else{\n          return [0.0,0.0,0.0,1.0]\n        }\n      }()\n      let color = CGColorCreate(CGColorSpaceCreateDeviceRGB(), component)!\n      UIColor(CGColor: color).setFill()\n      UIRectFill(rect)\n    }\n  }\n  let image = UIGraphicsGetImageFromCurrentImageContext().CGImage\n  view.layer.contents = image\n  return view\n}\n\n\n3.Playground\u306e\u30bd\u30fc\u30b9\u306b\u4ee5\u4e0b\u3092\u8cbc\u308a\u4ed8\u3051\u308b\n\nContent.swift\n//: ## Mandelbrot Set\nlet result = calc()\ndraw(result)\n\n\n4.\u30a8\u30c7\u30a3\u30bf\u306e\u53f3\u306e\u4e8c\u91cd\u4e38\u3092\u62bc\u3057\u3066\u304b\u3089\u5c11\u3057\u5f85\u3064\u3068\u7d75\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\n![Screen Shot 2015-09-29 at 4.45.52 AM.png](https://qiita-image-store.s3.amazonaws.com/0/19541/06dca75f-cd17-421e-7cb8-b8b39fa80bb9.png)\n\u4ee5\u524d\b https://developer.apple.com/swift/blog/?id=26 \u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u305f\n\u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u96c6\u5408\u304cXCode7\u3067\u52d5\u304b\u306a\u304f\u306a\u3063\u305f\u306e\u3067Swift\u306e\u52c9\u5f37\u304c\u3066\u3089\u306b\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\n### \u4f5c\u308a\u65b9\n1.XCode7\u3092\u7acb\u3061\u4e0a\u3052\u3066Playground\u3092iOS\u306e\u8a2d\u5b9a\u3067\u4f5c\u6210\u3059\u308b\u3002\n2.Sources\u30d5\u30a9\u30eb\u30c0\u306bswift\u30d5\u30a1\u30a4\u30eb\u3092\u9069\u5f53\u306b\u4f5c\u6210\u3057\u3066\u4ee5\u4e0b\u3092\u8cbc\u308a\u4ed8\u3051\u308b\u3002\n\n```swift:mandelbrot.swift\nimport UIKit\n\nlet resolution = 400\nlet iteration = 300\n\nstruct vec2{\n  var x: Double\n  var y: Double\n \n  func length() -> Double{\n   return sqrt(pow(x,2)+pow(y,2))\n  }\n}\n\nfunc + (left:vec2,right:vec2) -> vec2{\n  return vec2(x:(left.x + right.x),y:(left.y + right.y))\n}\n\nstruct Result{\n  var div: Bool//\u767a\u6563\u3057\u305f\u304b\u3069\u3046\u304b\n  var elapsed: Int?//\u767a\u6563\u3057\u305f\u5834\u5408\u306e\u8a08\u7b97\u56de\u6570\n}\n\n/// \u7d50\u679c\u683c\u7d0d\u30af\u30e9\u30b9\npublic class ResultArray{\n  var array: [Result]\n  init(){\n    self.array = Array(\n      count:resolution * resolution,\n      repeatedValue:Result(div: false,elapsed: nil)\n    )\n  }\n \n  func indexIsValid(x:Int,y:Int)->Bool{\n    return x>=0 && x<resolution && y>=0 && y<resolution\n  }\n  \n  subscript(x:Int,y:Int) -> Result{\n    get{\n      assert(indexIsValid(x, y:y))\n      return array[x * resolution + y]\n    }\n    set{\n      assert(indexIsValid(x, y:y))\n      array[x * resolution + y] = newValue\n    }\n  }\n}\n\n/// \u8907\u7d20\u6570\u5ea7\u6a19\u4e0a\u306e\u767a\u6563\u3092\u8a08\u7b97\n/// - parameter c :\u8907\u7d20\u6570\u5ea7\u6a19\n/// - returns: \u767a\u6563\u306e\u8a08\u7b97\u7d50\u679c\nfunc calcDiv(c:vec2) -> Result{\n  var result:Result = Result(div:false,elapsed:nil)\n  var z = vec2(x:0.0,y:0.0)\n  for i in 0..<iteration{\n    let nz = vec2(\n      x: pow(z.x,2.0) - pow(z.y,2.0),\n      y: 2.0 * z.x * z.y\n    )\n    z = nz + c\n    if z.length() > 2.0{\n      result = Result(div: true, elapsed: i)\n      break\n    }\n  }\n  return result\n}\n\n/// \u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u96c6\u5408\u306e\u8a08\u7b97\n/// - returns: \u8a08\u7b97\u7d50\u679c\npublic func calc() -> ResultArray{\n  let result=ResultArray()\n  for i in 0..<resolution{\n    for j in 0..<resolution{\n      let c = vec2(\n        x: Double(i)/Double(resolution)*4.0-2.0,\n        y: (Double(j)/Double(resolution)*4.0-2.0) * (-1)\n      )\n      result[i,j] = calcDiv(c)\n    }\n  }\n  return result\n}\n\n/// \u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u96c6\u5408\u306e\u63cf\u753b\n/// - parameters result: \u8a08\u7b97\u7d50\u679c\n/// - returns : \u63cf\u753b\u30c7\u30fc\u30bf\npublic func draw(result:ResultArray) -> UIView{\n  let size = CGSize(width: resolution, height: resolution)\n  let view = UIView(frame: CGRect(origin:CGPointZero, size: size))\n  view.backgroundColor=UIColor(white:0.9,alpha:1.0)\n  UIGraphicsBeginImageContextWithOptions(size, false,0)\n  for i in 0..<resolution{\n    for j in 0..<resolution{\n      let rect = CGRectMake(CGFloat(i * 1), CGFloat(j * 1), 1, 1)\n      let component: [CGFloat] = {\n        if(result[i,j].div){\n          let e: CGFloat = CGFloat(Float(result[i,j].elapsed!)*2.0/Float(iteration))\n          return [1.0,1.0-e,1.0-e,1.0]\n        }else{\n          return [0.0,0.0,0.0,1.0]\n        }\n      }()\n      let color = CGColorCreate(CGColorSpaceCreateDeviceRGB(), component)!\n      UIColor(CGColor: color).setFill()\n      UIRectFill(rect)\n    }\n  }\n  let image = UIGraphicsGetImageFromCurrentImageContext().CGImage\n  view.layer.contents = image\n  return view\n}\n```\n3.Playground\u306e\u30bd\u30fc\u30b9\u306b\u4ee5\u4e0b\u3092\u8cbc\u308a\u4ed8\u3051\u308b\n\n```swift:Content.swift\n//: ## Mandelbrot Set\nlet result = calc()\ndraw(result)\n```\n\n4.\u30a8\u30c7\u30a3\u30bf\u306e\u53f3\u306e\u4e8c\u91cd\u4e38\u3092\u62bc\u3057\u3066\u304b\u3089\u5c11\u3057\u5f85\u3064\u3068\u7d75\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\n"}