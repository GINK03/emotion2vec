{"context": "(2014/09\u8ffd\u8a18)\nDeep Learning (\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u3001\u6df1\u5c64\u5b66\u7fd2) \u306e\u6280\u8853\u3092\u7528\u3044\u3066\u3001\u732b\u306e\u54c1\u7a2e\u3092\u8b58\u5225\u3059\u308b\u65b9\u6cd5\u306e\u8a18\u4e8b\u3082\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\u3082\u3057\u8208\u5473\u304c\u3042\u308c\u3070\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\nDeep Learning\u3067\u732b\u306e\u54c1\u7a2e\u8b58\u5225\n\n\nOpenCV\u3067\u732b\u691c\u51fa\n\n(\u30b7\u30e7\u30b3\u30e9 - \u5409\u7965\u5bfa \u304d\u3083\u308a\u3053)\n\u306d\u3053\u3068\u753b\u50cf\u51e6\u7406 part 1 \u2013 \u7d20\u6750\u96c6\u3081\u3067\u306f\u732b\u753b\u50cf\u306e\u96c6\u3081\u65b9\u306b\u3064\u3044\u3066\u6574\u7406\u3057\u307e\u3057\u305f\u304c\u3001\u3053\u3053\u3067\u306f\u305d\u306e\u96c6\u3081\u305f\u732b\u753b\u50cf\u3092\u4f7f\u3063\u3066\u732b\u691c\u51fa\u7528\u306e\u5b66\u7fd2\u30e2\u30c7\u30eb(\u5206\u985e\u5668)\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\u6280\u8853\u7684\u306a\u5185\u5bb9\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u30d6\u30ed\u30b0\u306e\u65b9\u306b\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u306e\u3067\u8208\u5473\u304c\u3042\u308c\u3070\u3002\u30e2\u30c7\u30eb\u914d\u5e03\u306b\u3064\u3044\u3066\u306f\u3053\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u306e\u5f8c\u534a\u3067\u8aac\u660e\u3057\u307e\u3059\u3002\n\n\u306d\u3053\u3068\u753b\u50cf\u51e6\u7406 part 2 \u2013 \u732b\u691c\u51fa\n\n\u5b66\u7fd2\u306f\u304a\u99b4\u67d3\u307f\u306eBoosting(\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u624b\u6cd5\u306e1\u3064)\u3067\u3002\u7279\u5fb4\u91cf\u306f\u30e2\u30c7\u30eb\u4f5c\u6210\u3068\u691c\u8a3c\u3092\u901f\u304f\u7e70\u308a\u8fd4\u3059\u3053\u3068\u304c\u3067\u304d\u308bLBP\u7279\u5fb4\u3092\u63a1\u7528\u3057\u307e\u3057\u305f\u3002\u307e\u305f\u3001\u7d047,000\u679a\u306e\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u306f\u30af\u30e9\u30a6\u30c9\u30bd\u30fc\u30b7\u30f3\u30b0\u3092\u6d3b\u7528\u3057\u3066\u96c6\u3081\u307e\u3057\u305f\u3002\n\n\u4f7f\u3044\u65b9\n\nC++\nC++\u304b\u3089\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f7f\u3044\u307e\u3059\u3002\n\n// objdetect.cpp\n#include <iostream>\n#include <vector>\n#include <opencv2/opencv.hpp>\n#include <opencv2/highgui/highgui.hpp>\n#include <opencv2/objdetect/objdetect.hpp>\n\nint main(int argc, char** argv) {\n  using namespace std;\n  if(argc != 3) {\n    cerr << \"./objdetect [image file] [cascade file]\" << endl;\n    exit(-1);\n  }\n  cv::Mat src_img = cv::imread(argv[1], 1);\n  if(src_img.empty()) {\n    cerr << \"cannot load image\" << endl;\n    exit(-1);\n  }\n  cv::Mat dst_img = src_img.clone();\n  string cascade_file = string(argv[2]);\n  cv::CascadeClassifier cascade;\n  cascade.load(cascade_file);\n  if(cascade.empty()) {\n    cerr << \"cannot load cascade file\" << endl;\n    exit(-1);\n  }\n  vector<cv::Rect> objects;\n  cascade.detectMultiScale(src_img, objects, 1.1, 3);\n  vector<cv::Rect>::const_iterator iter = objects.begin();\n  cout << \"count: \" << objects.size() << endl;\n  while(iter!=objects.end()) {\n    cout << \"(x, y, width, height) = (\" << iter->x << \", \" << iter->y << \", \"\n         << iter->width << \", \" << iter->height << \")\" << endl;\n    cv::rectangle(dst_img,\n                  cv::Rect(iter->x, iter->y, iter->width, iter->height),\n                  cv::Scalar(0, 0, 255), 2);\n    ++iter;\n  }\n  cv::imwrite(\"result.jpg\", dst_img);\n  return 0;\n}\n\n## \u30b3\u30f3\u30d1\u30a4\u30eb\u3001\u5b9f\u884c\n$ g++ -o objdetect objdetect.cpp -I/path/to/opencv/include -L/path/to/opencv/lib -lopencv_core -lopencv_highgui  -lopencv_objdetect\n$ ./objdetect cat.jpg cascade.xml\ncount: 1\n(x, y, width, height) = (278, 185, 65, 65)\n\n\u691c\u51fa\u6642\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3086\u308b\u3081\u306b\u6307\u5b9a(minNeighbors\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5c0f\u3055\u306a\u5024\u306b\u3059\u308b)\u3057\u3066\u304a\u304f\u3068\u4f53\u611f\u7684\u306b\u306f\u691c\u51fa\u7cbe\u5ea6\u306f\u4e0a\u304c\u308b\u3088\u3046\u3067\u3059\u3002\u5f53\u7136\u8aa4\u691c\u51fa\u3082\u5897\u3048\u307e\u3059\u304c\u3001\u691c\u51fa\u9818\u57df\u304c\u4e00\u5b9a\u306e\u30b5\u30a4\u30ba\u4ee5\u4e0b\u306e\u5834\u5408\u306f\u9664\u304f(minSize\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3059\u308b)\u3068\u3044\u3063\u305f\u51e6\u7406\u3092\u5165\u308c\u308c\u3070\u305d\u308c\u306a\u308a\u306e\u7cbe\u5ea6\u306b\u898b\u305b\u304b\u3051\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u3059\u3002\nCascadeClassifier::detectMultiScale - docs.opencv.org\n\nPython\nPython\u304b\u3089\u3082\u7c21\u5358\u306b\u4f7f\u3048\u307e\u3059\u3002\n#!/usr/local/bin/python\n# -*- coding: utf-8 -*-\n\nimport sys\nimport cv2 as cv\n\ndef detect(imagefilename, cascadefilename):\n    srcimg = cv.imread(imagefilename)\n    if srcimg is None:\n        print('cannot load image')\n        sys.exit(-1)\n    dstimg = srcimg.copy()\n    cascade = cv.CascadeClassifier(cascadefilename)\n    if cascade.empty():\n        print('cannnot load cascade file')\n        sys.exit(-1)\n    objects = cascade.detectMultiScale(srcimg, 1.1, 3)\n    for (x, y, w, h) in objects:\n        print(x, y, w, h)\n        cv.rectangle(dstimg, (x, y), (x + w, y + h), (0, 0, 255), 2)\n    return dstimg\n\nif __name__ == '__main__':\n    result = detect('cat.jpg', 'cascade.xml')\n    cv.imwrite('result.jpg', result)\n\n\n\u30e2\u30c7\u30eb\u914d\u5e03\n\u4eca\u56de\u4f5c\u3063\u305f\u30e2\u30c7\u30eb\u3092\u516c\u958b\u3057\u3066\u304a\u304d\u307e\u3059\u3002OpenCV\u3067\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u30ab\u30b9\u30b1\u30fc\u30c9\u30d5\u30a1\u30a4\u30eb(cascade.xml)\u3067\u3059\u3002\n\ncat detection cascade model - wellflat/cat-fancier\n\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u6559\u5e2b\u30c7\u30fc\u30bf\u304c\u65b0\u305f\u306b\u8ffd\u52a0\u3055\u308c\u305f\u306e\u3092\u691c\u77e5\u3057\u3066\u5b66\u7fd2\u3092\u8d70\u3089\u305b\u308b\u30d0\u30c3\u30c1\u51e6\u7406\u3092\u500b\u4eba\u30b5\u30fc\u30d0\u4e0a\u3067\u52d5\u304b\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u7d99\u7d9a\u7684\u306b\u3088\u308a\u7cbe\u5ea6\u306e\u9ad8\u3044\u30e2\u30c7\u30eb\u306b\u81ea\u52d5\u66f4\u65b0\u3055\u308c\u3066\u3044\u304f\u306f\u305a\u3067\u3059\u3002\n\u3068\u306f\u8a00\u3063\u3066\u3082\u4f55\u3082\u65bd\u7b56\u3092\u6253\u305f\u306a\u3044\u3068\u7cbe\u5ea6\u306f\u982d\u6253\u3061\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u306e\u3067\u3001\u5f8c\u306f\u3044\u308d\u3044\u308d\u524d\u5f8c\u51e6\u7406\u3092\u52a0\u3048\u305f\u308a\u3057\u3066\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u6539\u826f\u3092\u3057\u3066\u3044\u304f\u3053\u3068\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n\n\n\n\n\u306d\u3053\u3068\u753b\u50cf\u51e6\u7406 part 1 \u2013 \u7d20\u6750\u96c6\u3081\n\u306d\u3053\u3068\u753b\u50cf\u51e6\u7406 part 2 \u2013 \u732b\u691c\u51fa\n\n(2014/09\u8ffd\u8a18)\n\nDeep Learning (\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u3001\u6df1\u5c64\u5b66\u7fd2) \u306e\u6280\u8853\u3092\u7528\u3044\u3066\u3001\u732b\u306e\u54c1\u7a2e\u3092\u8b58\u5225\u3059\u308b\u65b9\u6cd5\u306e\u8a18\u4e8b\u3082\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\u3082\u3057\u8208\u5473\u304c\u3042\u308c\u3070\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\n* [Deep Learning\u3067\u732b\u306e\u54c1\u7a2e\u8b58\u5225](http://qiita.com/wellflat/items/0b6b859bb275fd4526ed)\n\n\n# OpenCV\u3067\u732b\u691c\u51fa\n![detect_chocolat2.jpg](https://qiita-image-store.s3.amazonaws.com/0/3215/b7afefec-c3f5-00eb-e138-8818f2a08867.jpeg)\n(\u30b7\u30e7\u30b3\u30e9 - \u5409\u7965\u5bfa \u304d\u3083\u308a\u3053)\n\n[\u306d\u3053\u3068\u753b\u50cf\u51e6\u7406 part 1 \u2013 \u7d20\u6750\u96c6\u3081](http://rest-term.com/archives/3111/)\u3067\u306f\u732b\u753b\u50cf\u306e\u96c6\u3081\u65b9\u306b\u3064\u3044\u3066\u6574\u7406\u3057\u307e\u3057\u305f\u304c\u3001\u3053\u3053\u3067\u306f\u305d\u306e\u96c6\u3081\u305f\u732b\u753b\u50cf\u3092\u4f7f\u3063\u3066\u732b\u691c\u51fa\u7528\u306e\u5b66\u7fd2\u30e2\u30c7\u30eb(\u5206\u985e\u5668)\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\n\u6280\u8853\u7684\u306a\u5185\u5bb9\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u30d6\u30ed\u30b0\u306e\u65b9\u306b\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u306e\u3067\u8208\u5473\u304c\u3042\u308c\u3070\u3002\u30e2\u30c7\u30eb\u914d\u5e03\u306b\u3064\u3044\u3066\u306f\u3053\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u306e\u5f8c\u534a\u3067\u8aac\u660e\u3057\u307e\u3059\u3002\n\n* [\u306d\u3053\u3068\u753b\u50cf\u51e6\u7406 part 2 \u2013 \u732b\u691c\u51fa](http://rest-term.com/archives/3131/)\n\n\u5b66\u7fd2\u306f\u304a\u99b4\u67d3\u307f\u306eBoosting(\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u624b\u6cd5\u306e1\u3064)\u3067\u3002\u7279\u5fb4\u91cf\u306f\u30e2\u30c7\u30eb\u4f5c\u6210\u3068\u691c\u8a3c\u3092\u901f\u304f\u7e70\u308a\u8fd4\u3059\u3053\u3068\u304c\u3067\u304d\u308b[LBP\u7279\u5fb4](http://en.wikipedia.org/wiki/Local_binary_patterns)\u3092\u63a1\u7528\u3057\u307e\u3057\u305f\u3002\u307e\u305f\u3001\u7d047,000\u679a\u306e\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u306f\u30af\u30e9\u30a6\u30c9\u30bd\u30fc\u30b7\u30f3\u30b0\u3092\u6d3b\u7528\u3057\u3066\u96c6\u3081\u307e\u3057\u305f\u3002\n\n## \u4f7f\u3044\u65b9\n### C++\nC++\u304b\u3089\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f7f\u3044\u307e\u3059\u3002\n\n```cpp\n\n// objdetect.cpp\n#include <iostream>\n#include <vector>\n#include <opencv2/opencv.hpp>\n#include <opencv2/highgui/highgui.hpp>\n#include <opencv2/objdetect/objdetect.hpp>\n\nint main(int argc, char** argv) {\n  using namespace std;\n  if(argc != 3) {\n    cerr << \"./objdetect [image file] [cascade file]\" << endl;\n    exit(-1);\n  }\n  cv::Mat src_img = cv::imread(argv[1], 1);\n  if(src_img.empty()) {\n    cerr << \"cannot load image\" << endl;\n    exit(-1);\n  }\n  cv::Mat dst_img = src_img.clone();\n  string cascade_file = string(argv[2]);\n  cv::CascadeClassifier cascade;\n  cascade.load(cascade_file);\n  if(cascade.empty()) {\n    cerr << \"cannot load cascade file\" << endl;\n    exit(-1);\n  }\n  vector<cv::Rect> objects;\n  cascade.detectMultiScale(src_img, objects, 1.1, 3);\n  vector<cv::Rect>::const_iterator iter = objects.begin();\n  cout << \"count: \" << objects.size() << endl;\n  while(iter!=objects.end()) {\n    cout << \"(x, y, width, height) = (\" << iter->x << \", \" << iter->y << \", \"\n         << iter->width << \", \" << iter->height << \")\" << endl;\n    cv::rectangle(dst_img,\n                  cv::Rect(iter->x, iter->y, iter->width, iter->height),\n                  cv::Scalar(0, 0, 255), 2);\n    ++iter;\n  }\n  cv::imwrite(\"result.jpg\", dst_img);\n  return 0;\n}\n```\n\n```bash\n## \u30b3\u30f3\u30d1\u30a4\u30eb\u3001\u5b9f\u884c\n$ g++ -o objdetect objdetect.cpp -I/path/to/opencv/include -L/path/to/opencv/lib -lopencv_core -lopencv_highgui  -lopencv_objdetect\n$ ./objdetect cat.jpg cascade.xml\ncount: 1\n(x, y, width, height) = (278, 185, 65, 65)\n```\n\n\u691c\u51fa\u6642\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3086\u308b\u3081\u306b\u6307\u5b9a(minNeighbors\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5c0f\u3055\u306a\u5024\u306b\u3059\u308b)\u3057\u3066\u304a\u304f\u3068\u4f53\u611f\u7684\u306b\u306f\u691c\u51fa\u7cbe\u5ea6\u306f\u4e0a\u304c\u308b\u3088\u3046\u3067\u3059\u3002\u5f53\u7136\u8aa4\u691c\u51fa\u3082\u5897\u3048\u307e\u3059\u304c\u3001\u691c\u51fa\u9818\u57df\u304c\u4e00\u5b9a\u306e\u30b5\u30a4\u30ba\u4ee5\u4e0b\u306e\u5834\u5408\u306f\u9664\u304f(minSize\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3059\u308b)\u3068\u3044\u3063\u305f\u51e6\u7406\u3092\u5165\u308c\u308c\u3070\u305d\u308c\u306a\u308a\u306e\u7cbe\u5ea6\u306b\u898b\u305b\u304b\u3051\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u3059\u3002\n\n[CascadeClassifier::detectMultiScale - docs.opencv.org](http://docs.opencv.org/modules/objdetect/doc/cascade_classification.html)\n\n### Python\nPython\u304b\u3089\u3082\u7c21\u5358\u306b\u4f7f\u3048\u307e\u3059\u3002\n\n```py\n#!/usr/local/bin/python\n# -*- coding: utf-8 -*-\n\nimport sys\nimport cv2 as cv\n\ndef detect(imagefilename, cascadefilename):\n    srcimg = cv.imread(imagefilename)\n    if srcimg is None:\n        print('cannot load image')\n        sys.exit(-1)\n    dstimg = srcimg.copy()\n    cascade = cv.CascadeClassifier(cascadefilename)\n    if cascade.empty():\n        print('cannnot load cascade file')\n        sys.exit(-1)\n    objects = cascade.detectMultiScale(srcimg, 1.1, 3)\n    for (x, y, w, h) in objects:\n        print(x, y, w, h)\n        cv.rectangle(dstimg, (x, y), (x + w, y + h), (0, 0, 255), 2)\n    return dstimg\n\nif __name__ == '__main__':\n    result = detect('cat.jpg', 'cascade.xml')\n    cv.imwrite('result.jpg', result)\n```\n\n## \u30e2\u30c7\u30eb\u914d\u5e03\n\u4eca\u56de\u4f5c\u3063\u305f\u30e2\u30c7\u30eb\u3092\u516c\u958b\u3057\u3066\u304a\u304d\u307e\u3059\u3002OpenCV\u3067\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u30ab\u30b9\u30b1\u30fc\u30c9\u30d5\u30a1\u30a4\u30eb(cascade.xml)\u3067\u3059\u3002\n\n* [cat detection cascade model - wellflat/cat-fancier](https://github.com/wellflat/cat-fancier/tree/master/detector/models/cat)\n\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u6559\u5e2b\u30c7\u30fc\u30bf\u304c\u65b0\u305f\u306b\u8ffd\u52a0\u3055\u308c\u305f\u306e\u3092\u691c\u77e5\u3057\u3066\u5b66\u7fd2\u3092\u8d70\u3089\u305b\u308b\u30d0\u30c3\u30c1\u51e6\u7406\u3092\u500b\u4eba\u30b5\u30fc\u30d0\u4e0a\u3067\u52d5\u304b\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u7d99\u7d9a\u7684\u306b\u3088\u308a\u7cbe\u5ea6\u306e\u9ad8\u3044\u30e2\u30c7\u30eb\u306b\u81ea\u52d5\u66f4\u65b0\u3055\u308c\u3066\u3044\u304f\u306f\u305a\u3067\u3059\u3002\n\n\u3068\u306f\u8a00\u3063\u3066\u3082\u4f55\u3082\u65bd\u7b56\u3092\u6253\u305f\u306a\u3044\u3068\u7cbe\u5ea6\u306f\u982d\u6253\u3061\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u306e\u3067\u3001\u5f8c\u306f\u3044\u308d\u3044\u308d\u524d\u5f8c\u51e6\u7406\u3092\u52a0\u3048\u305f\u308a\u3057\u3066\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u6539\u826f\u3092\u3057\u3066\u3044\u304f\u3053\u3068\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n![detect_edo1.jpg](https://qiita-image-store.s3.amazonaws.com/0/3215/67956533-9245-25c1-c575-d40d3b1369d0.jpeg)\n![detect_mimi1.jpg](https://qiita-image-store.s3.amazonaws.com/0/3215/d69f68e3-f1e8-000d-4050-0bd52b088196.jpeg)\n![detect_cat-nerima1.jpg](https://qiita-image-store.s3.amazonaws.com/0/3215/5da003b4-96fc-f721-bae4-80903aa34344.jpeg)\n![detect_5610691368_f59529e648_z.jpg](https://qiita-image-store.s3.amazonaws.com/0/3215/ea5295e8-9cd5-1add-e9c6-3238022e9a1e.jpeg)\n![detect_8854205418_cc97dbeaaa_z.jpg](https://qiita-image-store.s3.amazonaws.com/0/3215/54e51f3e-a373-7c5a-09b6-62879c558a74.jpeg)\n\n* [\u306d\u3053\u3068\u753b\u50cf\u51e6\u7406 part 1 \u2013 \u7d20\u6750\u96c6\u3081](http://rest-term.com/archives/3111/)\n* [\u306d\u3053\u3068\u753b\u50cf\u51e6\u7406 part 2 \u2013 \u732b\u691c\u51fa](http://rest-term.com/archives/3131/)\n", "tags": ["OpenCV2.4", "C++", "Python2.7", "\u6a5f\u68b0\u5b66\u7fd2", "\u753b\u50cf\u51e6\u7406"]}