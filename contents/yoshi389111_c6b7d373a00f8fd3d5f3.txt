{"context": " More than 1 year has passed since last update.\n\n\u76ee\u7684\n\nOptional \u3084 Stream \u306e map() \u306a\u3069\u3067\u3001\u30c1\u30a7\u30c3\u30af\u4f8b\u5916\u3092\u6295\u3052\u305f\u3044\u3053\u3068\u304c\u3042\u308b\uff08\u3088\u306d\uff1f\uff09\n\u3067\u3082\u6a19\u6e96\u306e\u4ed5\u69d8\u3060\u3068\u30c1\u30a7\u30c3\u30af\u4f8b\u5916\u3092\u6295\u3052\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\n\u3068\u308a\u3042\u3048\u305a\u3001\u304a\u8a66\u3057\u3067\u30c1\u30a7\u30c3\u30af\u4f8b\u5916\u3092\u6295\u3052\u3089\u308c\u308b Optional \u3082\u3069\u304d\u3068 Stream \u3082\u3069\u304d\u3092\u4f5c\u3063\u3066\u8a66\u3057\u3066\u307f\u3088\u3046\uff08\u7121\u610f\u5473\uff09\n\u3061\u306a\u307f\u306b\u30bf\u30b0\u3092\u898b\u3066\u3082\u3089\u3048\u3070\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u5b9f\u7528\u6027\u3082\u7686\u7121\u3060\u3068\u601d\u3044\u307e\u3059\n\n\u30102015-11-04 \u8ffd\u8a18\u3011\n\u7d50\u69cb\u66f8\u304d\u76f4\u3057\u307e\u3057\u305f\u3002\u30b5\u30f3\u30d7\u30eb\u30bd\u30fc\u30b9\u3082\u3064\u3051\u3066\u307f\u305f\u3002\n\nStream \u3082\u3069\u304d\n\u6a19\u6e96\u306e java.util.stream.Stream \u306f\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306a\u306e\u3067\u3001\u305d\u308c\u3092\u5b9f\u88c5\u3057\u3088\u3046\u3068\u601d\u3063\u305f\u3051\u3069\u3001\u5c11\u3057\u305a\u3064\u9055\u3046\u306e\u3067\u3088\u304f\u4f3c\u305f\u5225\u306e\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u307e\u305a\u306f\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u8ffd\u52a0\u3002\u4f8b\u5916\u3092\u6295\u3052\u308b\u3053\u3068\u306e\u3067\u304d\u308b Consumer \u3082\u3069\u304d\u3068 Function \u3082\u3069\u304d\u3002\n\nConsumer2.java\nimport java.util.function.Consumer;\n\n@FunctionalInterface\npublic interface Consumer2<T, E extends Exception> extends Consumer<T> {\n\n    @Override\n    default void accept(T t) {\n        try {\n            accept0(t);\n\n        } catch (Exception e) {\n            Stream2.sneakyThrows(e);\n        }\n    }\n\n    void accept0(T t) throws E;\n}\n\n\n\nFunction2.java\nimport java.util.function.Function;\n\n@FunctionalInterface\npublic interface Function2<T, R, E extends Exception> extends Function<T, R> {\n\n    @Override\n    default R apply(T t) {\n        try {\n            return apply0(t);\n\n        } catch (Exception e) {\n            Stream2.sneakyThrows(e);\n            // NOTREACHED\n            throw new AssertionError();\n        }\n    }\n\n    R apply0(T t) throws E;\n}\n\n\nStream \u3082\u3069\u304d\u3002\n\u30c1\u30a7\u30c3\u30af\u4f8b\u5916\u3092\u3046\u307e\u304f\u901a\u305b\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u304b\u306a\u308a\u5f37\u5f15\u306b\u30b9\u30ed\u30fc\u3057\u3066\u3044\u307e\u3059\u3002\n\nStream2.java\n// import \u6587\u306f\u7701\u7565\n\npublic class Stream2<E> implements AutoCloseable {\n    /** \u5143\u3068\u306a\u308b Stream */\n    private final Stream<E> base;\n\n    /** Stream \u304b\u3089 Stream2 \u3092\u751f\u6210 */\n    public static <E> Stream2<E> of(Stream<E> base) {\n        return new Stream2<E>(base);\n    }\n\n    /** \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf */\n    private Stream2(Stream<E> base) {\n        this.base = Objects.requireNonNull(base);\n    }\n\n    // ...\n\n    /** \u5909\u63db */\n    public <R, T extends Exception> Stream2<R> map(Function2<? super E, ? extends R, T> mapper) throws T {\n        return of(base.map(mapper));\n    }\n\n    /** \u51e6\u7406 */\n    public <T extends Exception> void forEach(Consumer2<? super E, T> action) throws T {\n        base.forEach(action);\n    }\n\n    /** \u7121\u7406\u3084\u308a\u4f8b\u5916\u3092\u6295\u3052\u308b */\n    public static <E extends Exception> void sneakyThrows(Exception exception) throws E {\n        @SuppressWarnings(\"unchecked\")\n        E e = (E) exception;\n        throw e;\n    }\n\n    // \uff08\u3042\u3068\u306f\u7701\u7565\u3002\u5b9f\u969b\u306b\u306f\u5b9f\u88c5\u3057\u3066\u307e\u3059\uff09\n}\n\n\n\nStream2Test.java\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Stream2Test {\n\n    public static void main(String[] args) {\n        List<String> names = Arrays.asList(\"Alfa\", \"Bravo\", \"Charlie\");\n\n        // \u30c1\u30a7\u30c3\u30af\u4f8b\u5916\u3092\u6295\u3052\u306a\u3044\u306a\u3089\u306f\u3001try - catch \u306f\u4e0d\u8981\n        Stream2<String> stream1 = Stream2.of(names.stream());\n        stream1.forEach(name -> {\n            System.out.println(name);\n        });\n\n        // \u30c1\u30a7\u30c3\u30af\u4f8b\u5916\u3092\u5916\u5074\u3067\u30ad\u30e3\u30c3\u30c1\n        try {\n            Stream2<String> stream2 = Stream2.of(names.stream());\n            stream2.forEach(name -> {\n                method(name);\n            });\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static String method(String name) throws IOException {\n        if (name.startsWith(\"C\")) {\n            throw new IOException(name);\n        } else {\n            System.out.println(name);\n            return name;\n        }\n    }\n}\n\n\n\u5b9f\u884c\u7d50\u679c\u3002\nAlfa\nBravo\nCharlie\nAlfa\nBravo\njava.io.IOException: Charlie\n    at Stream2Test.method(Stream2Test.java:30)\n    at Stream2Test.lambda$1(Stream2Test.java:20)\n    at Consumer2.accept(Consumer2.java:9)\n    at java.util.Spliterators$ArraySpliterator.forEachRemaining(Unknown Source)\n    at java.util.stream.ReferencePipeline$Head.forEach(Unknown Source)\n    at Stream2.forEach(Stream2.java:99)\n    at Stream2Test.main(Stream2Test.java:19)\n\n\nOptional \u3082\u3069\u304d\n\u6a19\u6e96\u306e java.util.Optional \u306f final \u30af\u30e9\u30b9\u3067\u7d99\u627f\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u30bd\u30fc\u30b9\u3092\u53c2\u8003\u306b\u3057\u3066\u3084\u306f\u308a\u65b0\u898f\u306b\u4f5c\u3063\u3066\u307f\u308b\u3002\n\nOptional2.java\nimport java.util.NoSuchElementException;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.function.Supplier;\n\n/** \u4f8b\u5916\u3092\u6295\u3052\u3089\u308c\u308b Optional \u3082\u3069\u304d */\npublic final class Optional2<T> {\n\n    /** \u7a7a\u306e Optional2 */\n    private static final Optional2<?> EMPTY = new Optional2<>(null);\n\n    /** \u5024 */\n    private final T value;\n\n    /** \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf */\n    private Optional2(T value) {\n        this.value = value;\n    }\n\n    /** null \u3067\u306a\u3044 Optional2 \u3092\u751f\u6210 */\n    public static <T> Optional2<T> of(T value) {\n        Objects.requireNonNull(value);\n        return new Optional2<>(value);\n    }\n\n    /** \u5024\u304c\u3042\u308b\u5834\u5408\u306b\u5909\u63db\u3092\u884c\u3046 */\n    public <U, E extends Exception> Optional2<U> map(Function2<? super T, ? extends U, E> mapper) throws E {\n        Objects.requireNonNull(mapper);\n        if (!isPresent()) {\n            return empty();\n        } else {\n            return Optional2.ofNullable(mapper.apply(value));\n        }\n    }\n\n    // \uff08\u3042\u3068\u306f\u7701\u7565\u3002\u5b9f\u969b\u306b\u306f\u5b9f\u88c5\u3057\u3066\u307e\u3059\uff09\n}\n\n\n\u547c\u3073\u51fa\u3057\u3066\u307f\u307e\u3059\u3002\n\nOptional2Test.java\nimport java.io.IOException;\n\npublic class Optional2Test {\n\n    public static void main(String[] args) {\n\n        // \u30c1\u30a7\u30c3\u30af\u4f8b\u5916\u3092\u6295\u3052\u306a\u3044\u306a\u3089\u306f\u3001try - catch \u306f\u4e0d\u8981\n        String s1 = Optional2.of(\"Charlie\")\n                .map(s -> s + s)\n                .orElse(\"null\");\n        System.out.println(s1);\n\n        // \u30c1\u30a7\u30c3\u30af\u4f8b\u5916\u3092\u5916\u5074\u3067\u30ad\u30e3\u30c3\u30c1\n        try {\n            Optional2<String> opt = Optional2.of(\"Charlie\");\n            String s2 = opt.map(Optional2Test::method)\n                    .orElse(\"null\");\n            System.out.println(s2);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    private static String method(String name) throws IOException {\n        if (name.startsWith(\"C\")) {\n            // \u30c1\u30a7\u30c3\u30af\u4f8b\u5916\u3092\u6295\u3052\u308b\n            throw new IOException(name);\n        } else {\n            System.out.println(name);\n            return name;\n        }\n    }\n}\n\n\n\u5b9f\u884c\u7d50\u679c\u3002\nCharlieCharlie\njava.io.IOException: Charlie\n    at Optional2Test.method(Optional2Test.java:29)\n    at Function2.apply(Function2.java:9)\n    at Optional2.map(Optional2.java:84)\n    at Optional2Test.main(Optional2Test.java:16)\n\n\n\u30b5\u30f3\u30d7\u30eb\ngist\uff1a\u30b5\u30f3\u30d7\u30eb\u30bd\u30fc\u30b9\n\n# \u76ee\u7684\n\n- Optional \u3084 Stream \u306e map() \u306a\u3069\u3067\u3001\u30c1\u30a7\u30c3\u30af\u4f8b\u5916\u3092\u6295\u3052\u305f\u3044\u3053\u3068\u304c\u3042\u308b\uff08\u3088\u306d\uff1f\uff09\n- \u3067\u3082\u6a19\u6e96\u306e\u4ed5\u69d8\u3060\u3068\u30c1\u30a7\u30c3\u30af\u4f8b\u5916\u3092\u6295\u3052\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\n- \u3068\u308a\u3042\u3048\u305a\u3001\u304a\u8a66\u3057\u3067\u30c1\u30a7\u30c3\u30af\u4f8b\u5916\u3092\u6295\u3052\u3089\u308c\u308b Optional \u3082\u3069\u304d\u3068 Stream \u3082\u3069\u304d\u3092\u4f5c\u3063\u3066\u8a66\u3057\u3066\u307f\u3088\u3046\uff08\u7121\u610f\u5473\uff09\n- \u3061\u306a\u307f\u306b\u30bf\u30b0\u3092\u898b\u3066\u3082\u3089\u3048\u3070\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u5b9f\u7528\u6027\u3082\u7686\u7121\u3060\u3068\u601d\u3044\u307e\u3059\n\n\u30102015-11-04 \u8ffd\u8a18\u3011\n\u7d50\u69cb\u66f8\u304d\u76f4\u3057\u307e\u3057\u305f\u3002\u30b5\u30f3\u30d7\u30eb\u30bd\u30fc\u30b9\u3082\u3064\u3051\u3066\u307f\u305f\u3002\n\n# Stream \u3082\u3069\u304d\n\n\u6a19\u6e96\u306e `java.util.stream.Stream` \u306f\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306a\u306e\u3067\u3001\u305d\u308c\u3092\u5b9f\u88c5\u3057\u3088\u3046\u3068\u601d\u3063\u305f\u3051\u3069\u3001\u5c11\u3057\u305a\u3064\u9055\u3046\u306e\u3067\u3088\u304f\u4f3c\u305f\u5225\u306e\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n\u307e\u305a\u306f\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u8ffd\u52a0\u3002\u4f8b\u5916\u3092\u6295\u3052\u308b\u3053\u3068\u306e\u3067\u304d\u308b Consumer \u3082\u3069\u304d\u3068 Function \u3082\u3069\u304d\u3002\n\n```java:Consumer2.java\nimport java.util.function.Consumer;\n\n@FunctionalInterface\npublic interface Consumer2<T, E extends Exception> extends Consumer<T> {\n\n\t@Override\n\tdefault void accept(T t) {\n\t\ttry {\n\t\t\taccept0(t);\n\n\t\t} catch (Exception e) {\n\t\t\tStream2.sneakyThrows(e);\n\t\t}\n\t}\n\n\tvoid accept0(T t) throws E;\n}\n```\n\n```java:Function2.java\nimport java.util.function.Function;\n\n@FunctionalInterface\npublic interface Function2<T, R, E extends Exception> extends Function<T, R> {\n\n\t@Override\n\tdefault R apply(T t) {\n\t\ttry {\n\t\t\treturn apply0(t);\n\n\t\t} catch (Exception e) {\n\t\t\tStream2.sneakyThrows(e);\n\t\t\t// NOTREACHED\n\t\t\tthrow new AssertionError();\n\t\t}\n\t}\n\n\tR apply0(T t) throws E;\n}\n```\n\nStream \u3082\u3069\u304d\u3002\n\u30c1\u30a7\u30c3\u30af\u4f8b\u5916\u3092\u3046\u307e\u304f\u901a\u305b\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u304b\u306a\u308a\u5f37\u5f15\u306b\u30b9\u30ed\u30fc\u3057\u3066\u3044\u307e\u3059\u3002\n\n```java:Stream2.java\n// import \u6587\u306f\u7701\u7565\n\npublic class Stream2<E> implements AutoCloseable {\n\t/** \u5143\u3068\u306a\u308b Stream */\n\tprivate final Stream<E> base;\n\n\t/** Stream \u304b\u3089 Stream2 \u3092\u751f\u6210 */\n\tpublic static <E> Stream2<E> of(Stream<E> base) {\n\t\treturn new Stream2<E>(base);\n\t}\n\n\t/** \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf */\n\tprivate Stream2(Stream<E> base) {\n\t\tthis.base = Objects.requireNonNull(base);\n\t}\n\n    // ...\n\n\t/** \u5909\u63db */\n\tpublic <R, T extends Exception> Stream2<R> map(Function2<? super E, ? extends R, T> mapper) throws T {\n\t\treturn of(base.map(mapper));\n\t}\n\n\t/** \u51e6\u7406 */\n\tpublic <T extends Exception> void forEach(Consumer2<? super E, T> action) throws T {\n\t\tbase.forEach(action);\n\t}\n\n\t/** \u7121\u7406\u3084\u308a\u4f8b\u5916\u3092\u6295\u3052\u308b */\n\tpublic static <E extends Exception> void sneakyThrows(Exception exception) throws E {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tE e = (E) exception;\n\t\tthrow e;\n\t}\n\n    // \uff08\u3042\u3068\u306f\u7701\u7565\u3002\u5b9f\u969b\u306b\u306f\u5b9f\u88c5\u3057\u3066\u307e\u3059\uff09\n}\n```\n\n```java:Stream2Test.java\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Stream2Test {\n\n\tpublic static void main(String[] args) {\n\t\tList<String> names = Arrays.asList(\"Alfa\", \"Bravo\", \"Charlie\");\n\n\t\t// \u30c1\u30a7\u30c3\u30af\u4f8b\u5916\u3092\u6295\u3052\u306a\u3044\u306a\u3089\u306f\u3001try - catch \u306f\u4e0d\u8981\n\t\tStream2<String> stream1 = Stream2.of(names.stream());\n\t\tstream1.forEach(name -> {\n\t\t\tSystem.out.println(name);\n\t\t});\n\n\t\t// \u30c1\u30a7\u30c3\u30af\u4f8b\u5916\u3092\u5916\u5074\u3067\u30ad\u30e3\u30c3\u30c1\n\t\ttry {\n\t\t\tStream2<String> stream2 = Stream2.of(names.stream());\n\t\t\tstream2.forEach(name -> {\n\t\t\t\tmethod(name);\n\t\t\t});\n\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tprivate static String method(String name) throws IOException {\n\t\tif (name.startsWith(\"C\")) {\n\t\t\tthrow new IOException(name);\n\t\t} else {\n\t\t\tSystem.out.println(name);\n\t\t\treturn name;\n\t\t}\n\t}\n}\n```\n\n\u5b9f\u884c\u7d50\u679c\u3002\n\n```\nAlfa\nBravo\nCharlie\nAlfa\nBravo\njava.io.IOException: Charlie\n\tat Stream2Test.method(Stream2Test.java:30)\n\tat Stream2Test.lambda$1(Stream2Test.java:20)\n\tat Consumer2.accept(Consumer2.java:9)\n\tat java.util.Spliterators$ArraySpliterator.forEachRemaining(Unknown Source)\n\tat java.util.stream.ReferencePipeline$Head.forEach(Unknown Source)\n\tat Stream2.forEach(Stream2.java:99)\n\tat Stream2Test.main(Stream2Test.java:19)\n```\n\n# Optional \u3082\u3069\u304d\n\n\u6a19\u6e96\u306e `java.util.Optional` \u306f final \u30af\u30e9\u30b9\u3067\u7d99\u627f\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u30bd\u30fc\u30b9\u3092\u53c2\u8003\u306b\u3057\u3066\u3084\u306f\u308a\u65b0\u898f\u306b\u4f5c\u3063\u3066\u307f\u308b\u3002\n\n```java:Optional2.java\nimport java.util.NoSuchElementException;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.function.Supplier;\n\n/** \u4f8b\u5916\u3092\u6295\u3052\u3089\u308c\u308b Optional \u3082\u3069\u304d */\npublic final class Optional2<T> {\n\n\t/** \u7a7a\u306e Optional2 */\n\tprivate static final Optional2<?> EMPTY = new Optional2<>(null);\n\n\t/** \u5024 */\n\tprivate final T value;\n\n\t/** \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf */\n\tprivate Optional2(T value) {\n\t\tthis.value = value;\n\t}\n\n\t/** null \u3067\u306a\u3044 Optional2 \u3092\u751f\u6210 */\n\tpublic static <T> Optional2<T> of(T value) {\n\t\tObjects.requireNonNull(value);\n\t\treturn new Optional2<>(value);\n\t}\n\n\t/** \u5024\u304c\u3042\u308b\u5834\u5408\u306b\u5909\u63db\u3092\u884c\u3046 */\n\tpublic <U, E extends Exception> Optional2<U> map(Function2<? super T, ? extends U, E> mapper) throws E {\n\t\tObjects.requireNonNull(mapper);\n\t\tif (!isPresent()) {\n\t\t\treturn empty();\n\t\t} else {\n\t\t\treturn Optional2.ofNullable(mapper.apply(value));\n\t\t}\n\t}\n\n    // \uff08\u3042\u3068\u306f\u7701\u7565\u3002\u5b9f\u969b\u306b\u306f\u5b9f\u88c5\u3057\u3066\u307e\u3059\uff09\n}\n```\n\n\u547c\u3073\u51fa\u3057\u3066\u307f\u307e\u3059\u3002\n\n```java:Optional2Test.java\nimport java.io.IOException;\n\npublic class Optional2Test {\n\n\tpublic static void main(String[] args) {\n\n\t\t// \u30c1\u30a7\u30c3\u30af\u4f8b\u5916\u3092\u6295\u3052\u306a\u3044\u306a\u3089\u306f\u3001try - catch \u306f\u4e0d\u8981\n\t\tString s1 = Optional2.of(\"Charlie\")\n\t\t\t\t.map(s -> s + s)\n\t\t\t\t.orElse(\"null\");\n\t\tSystem.out.println(s1);\n\n\t\t// \u30c1\u30a7\u30c3\u30af\u4f8b\u5916\u3092\u5916\u5074\u3067\u30ad\u30e3\u30c3\u30c1\n\t\ttry {\n\t\t\tOptional2<String> opt = Optional2.of(\"Charlie\");\n\t\t\tString s2 = opt.map(Optional2Test::method)\n\t\t\t\t\t.orElse(\"null\");\n\t\t\tSystem.out.println(s2);\n\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t}\n\n\tprivate static String method(String name) throws IOException {\n\t\tif (name.startsWith(\"C\")) {\n\t\t\t// \u30c1\u30a7\u30c3\u30af\u4f8b\u5916\u3092\u6295\u3052\u308b\n\t\t\tthrow new IOException(name);\n\t\t} else {\n\t\t\tSystem.out.println(name);\n\t\t\treturn name;\n\t\t}\n\t}\n}\n```\n\n\u5b9f\u884c\u7d50\u679c\u3002\n\n```\nCharlieCharlie\njava.io.IOException: Charlie\n\tat Optional2Test.method(Optional2Test.java:29)\n\tat Function2.apply(Function2.java:9)\n\tat Optional2.map(Optional2.java:84)\n\tat Optional2Test.main(Optional2Test.java:16)\n```\n\n# \u30b5\u30f3\u30d7\u30eb\n\ngist\uff1a[\u30b5\u30f3\u30d7\u30eb\u30bd\u30fc\u30b9](https://gist.github.com/yoshi389111/53dfab68d1a037fc85cf)\n", "tags": ["Java", "java8", "Stream", "\u99ac\u9e7f\u8a71"]}