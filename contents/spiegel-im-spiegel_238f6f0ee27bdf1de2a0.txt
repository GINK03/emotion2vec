{"tags": ["Go", "golang", "lint"], "context": "Go \u8a00\u8a9e\u7528\u306e lint \u30c4\u30fc\u30eb\u306f\u3044\u304f\u3064\u304b\u3042\u308b\u306e\u3060\u304c\uff0c\u3053\u308c\u3089\u3092\u7d71\u5408\u7684\u306b\u6271\u3048\u308b gometalinter \u3068\u3044\u3046\u306e\u304c\u3042\u308b\u3089\u3057\u3044\u3002\n\nalecthomas/gometalinter: Concurrently run Go lint tools and normalise their output\n\nGo \u8a00\u8a9e\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u306e\u3067\uff08Go \u8a00\u8a9e\u306e\u74b0\u5883\u304c\u3042\u308c\u3070\uff09\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u7c21\u5358\u3002\n$ go get -v github.com/alecthomas/gometalinter\n\ngometalinter \u3092\u3064\u304b\u3063\u3066\u5404\u7a2e lint \u304a\u3088\u3073\u30d5\u30a9\u30fc\u30de\u30c3\u30bf\u30fb\u30c4\u30fc\u30eb\u3092\u4e00\u6c17\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u308b\u3002\n$ gometalinter --install --update\nInstalling:\n  structcheck\n  interfacer\n  goconst\n  golint\n  goimports\n  dupl\n  errcheck\n  aligncheck\n  gocyclo\n  ineffassign\n  unconvert\n  gotype\n  varcheck\n  deadcode\n  lll\n\n\u3053\u308c\u3089\u306e\u30c4\u30fc\u30eb\u306f $GOPATH/bin \u30d5\u30a9\u30eb\u30c0\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u308b\u306e\u3067 PATH \u3092\u901a\u3057\u3066\u304a\u304f\u3053\u3068\u3002\n\u3067\u306f\u65e9\u901f\u8a66\u3057\u3066\u307f\u3088\u3046\u3002\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\uff0c\u3053\u306e\u307e\u3048\u624b\u904a\u3073\u3067\u4f5c\u3063\u305f github.com/spiegel-im-spiegel/zundoko \u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u304a\u3046\u3002\n$ go get -v github.com/spiegel-im-spiegel/zundoko\n\n\u3044\u304d\u306a\u308a lint \u3092\u304b\u3051\u3066\u307f\u308b\u3002\n$ gometalinter ./...\nWARNING: deadline exceeded by linter dupl on sample (try increasing --deadline)\nWARNING: deadline exceeded by linter unconvert on . (try increasing --deadline)\nWARNING: deadline exceeded by linter unconvert on sample (try increasing --deadline)\nWARNING: deadline exceeded by linter aligncheck on . (try increasing --deadline)\nWARNING: deadline exceeded by linter aligncheck on sample (try increasing --deadline)\nWARNING: deadline exceeded by linter interfacer on . (try increasing --deadline)\nWARNING: deadline exceeded by linter interfacer on sample (try increasing --deadline)\n\n\u3042\u308a\u3083\u308a\u3083\u3002\u51e6\u7406\u306b\u6642\u9593\u304c\u304b\u304b\u308a\u3059\u304e\u305f\uff1f \u3058\u3083\u3042 --fast \u30aa\u30d7\u30b7\u30e7\u30f31 \u3092\u4ed8\u3051\u3066\u3082\u3046\u4e00\u5ea6\u3002\n$ gometalinter --fast ./...\nWARNING: deadline exceeded by linter dupl on sample (try increasing --deadline)\n\n\u3046\uff5e\u3093\u3002\u5b9f\u306f\u79c1\u306e\u74b0\u5883\u3067\u306f gometalinter \u304c dupl \u306e\u7d42\u4e86\u3092\u8a8d\u8b58\u3057\u3066\u304f\u308c\u306a\u3044\u3088\u3046\u30602\u3002\u306a\u306e\u3067 dupl \u3092\u9664\u5916\u3057\u3066\u3084\u3063\u3066\u307f\u308b\u3002\n$ gometalinter --fast --disable=dupl ./...\n\n\u4eca\u5ea6\u306f\u30a8\u30e9\u30fc\u306f\u51fa\u306a\u304b\u3063\u305f\u3002\u306a\u304a --deadline=5s \u3068\u3044\u3063\u305f\u611f\u3058\u3067 deadline \u5024\u3092\u8abf\u6574\u3059\u308c\u3070 --fast \u30aa\u30d7\u30b7\u30e7\u30f3\u306a\u3057\u3067\u3082\u4e0a\u624b\u304f\u3044\u304f\u3002\n\u3067\u306f github.com/spiegel-im-spiegel/zundoko \u30d1\u30c3\u30b1\u30fc\u30b8\u306e zundoko.go \u30d5\u30a1\u30a4\u30eb\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5f04\u3063\u3066\u307f\u308b\u3002\npackage zundoko\n\nimport (\n    \"math/rand\"\n    \"time\"\n)\n\n// zundoko-choirs items\nconst (\n    Zun     = \"\u30ba\u30f3\"\n    Doko    = \"\u30c9\u30b3\"\n    Kiyoshi = \"\u30ad\u30fb\u30e8\u30fb\u30b7\uff01\"\n)\n\n//Choirs - zundoko-choirs list\ntype Choirs struct {\n    c     []string\n    dummy int\n}\n\n//Push is append choirs\nfunc (c *Choirs) Push(s string) {\n    c.c = append(c.c, s) //maybe panic if c is nil.\n}\n\n//CountZunDoko returns count of \"ZUN\" and \"DOKO\" choirs\nfunc (c *Choirs) CountZunDoko() (int, int) {\n    z := 0\n    d := 0\n    if c == nil {\n        return z, d\n    }\n    for _, s := range c.c {\n        switch s {\n        case Zun:\n            z++\n        case Doko:\n            d++\n        }\n    }\n    return z, d\n}\n\nfunc (c *Choirs) String() string {\n    if c == nil {\n        return \"\"\n    } else {\n        content := make([]byte, 0, 128)\n        for _, s := range c.c {\n            content = append(content, s...)\n        }\n        return string(content)\n    }\n    return \"\"\n}\n\nfunc generate() chan string {\n    ch := make(chan string)\n    go func() {\n        zd := [2]string{Zun, Doko}\n        rand.Seed(time.Now().UnixNano())\n        for {\n            ch <- zd[rand.Intn(2)]\n        }\n    }()\n    return ch\n}\n\n//Run zundoko-choirs\nfunc Run() *Choirs {\n    zd := generate()\n    c := &Choirs{c: make([]string, 0)}\n    zcount := 0\n    for {\n        s := <-zd\n        c.Push(s)\n        if s == Zun {\n            zcount++\n        } else if zcount >= 4 {\n            break\n        } else {\n            zcount = 0\n        }\n    }\n    c.Push(Kiyoshi)\n    return c\n}\n\n\u3069\u3053\u306b\u554f\u984c\u304c\u3042\u308b\u304b\u304a\u5206\u304b\u308a\u3060\u308d\u3046\u304b\u3002 lint \u3092\u304b\u3051\u308b\u3068\u4ee5\u4e0b\u306e\u7d50\u679c\u306b\u306a\u308b\u3002\n$ gometalinter --deadline=5s --disable=dupl ./...\nzundoko.go:72:32:error: too few values in struct literal (gotype)\nzundoko.go:54::error: unreachable code (vet)\nzundoko.go:47:9:warning: if block ends with a return statement, so drop this else and outdent its block (golint)\nzundoko.go:72:32:warning: too few values in struct literal (interfacer)\n\ngolint, gotype, interfacer, vet \u306e\u305d\u308c\u305e\u308c\u306e\u30a8\u30e9\u30fc\u30fb\u30ef\u30fc\u30cb\u30f3\u30b0\u304c\u96c6\u7d04\u3055\u308c\u3066\u51fa\u529b\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308b\u3068\u601d\u3046\u3002\u3061\u306a\u307f\u306b --json \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u308b\u3068\u51fa\u529b\u304c JSON \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u306a\u308b\u3002\n$ gometalinter --deadline=5s --disable=dupl --json ./...\n[\n  {\"linter\":\"golint\",\"severity\":\"warning\",\"path\":\"zundoko.go\",\"line\":47,\"col\":9,\"message\":\"if block ends with a return statement, so drop this else and outdent its block\"},\n  {\"linter\":\"gotype\",\"severity\":\"error\",\"path\":\"zundoko.go\",\"line\":72,\"col\":32,\"message\":\"too few values in struct literal\"},\n  {\"linter\":\"vet\",\"severity\":\"error\",\"path\":\"zundoko.go\",\"line\":54,\"col\":0,\"message\":\"unreachable code\"},\n  {\"linter\":\"interfacer\",\"severity\":\"warning\",\"path\":\"zundoko.go\",\"line\":72,\"col\":32,\"message\":\"too few values in struct literal\"}\n]\n\n\u307e\u305f --vendor \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u308b\u3068 Go \u8a00\u8a9e\u30d0\u30fc\u30b8\u30e7\u30f3 1.5 \u304b\u3089\u63a1\u7528\u3055\u308c\u305f Vendoring \u6a5f\u80fd\u306b\u5bfe\u5fdc\u3059\u308b\u3002\u305d\u306e\u4ed6\uff0c\u30aa\u30d7\u30b7\u30e7\u30f3\u7b49\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3002\n$ gometalinter --help\nusage: gometalinter.exe [<flags>] [<path>...]\n\nAggregate and normalise the output of a whole bunch of Go linters.\n\nDefault linters:\n\ndeadcode  (github.com/tsenart/deadcode)\n      deadcode .\n      ^deadcode: (?P<path>[^:]+):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.*)$\ngocyclo  (github.com/alecthomas/gocyclo)\n      gocyclo -over {mincyclo} .\n      ^(?P<cyclo>\\d+)\\s+\\S+\\s(?P<function>\\S+)\\s+(?P<path>[^:]+):(?P<line>\\d+):(\\d+)$\ngofmt\n      gofmt -l -s ./*.go\n      ^(?P<path>[^\\n]+)$\ngotype  (golang.org/x/tools/cmd/gotype)\n      gotype -e {tests=-a} .\n      ^(?P<path>[^\\s][^\\r\\n:]+?\\.go):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.*)$\nineffassign  (github.com/gordonklaus/ineffassign)\n      ineffassign -n .\n      ^(?P<path>[^\\s][^\\r\\n:]+?\\.go):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.*)$\nvetshadow\n      go tool vet --shadow ./*.go\n      ^(?P<path>[^\\s][^\\r\\n:]+?\\.go):(?P<line>\\d+):\\s*(?P<message>.*)$\nvarcheck  (github.com/opennota/check/cmd/varcheck)\n      varcheck .\n      ^(?:[^:]+: )?(?P<path>[^:]+):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>\\w+)$\nvet\n      go tool vet ./*.go\n      ^(?P<path>[^\\s][^\\r\\n:]+?\\.go):(?P<line>\\d+):\\s*(?P<message>.*)$\naligncheck  (github.com/opennota/check/cmd/aligncheck)\n      aligncheck .\n      ^(?:[^:]+: )?(?P<path>[^:]+):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.+)$\ndupl  (github.com/mibk/dupl)\n      dupl -plumbing -threshold {duplthreshold} ./*.go\n      ^(?P<path>[^\\s][^:]+?\\.go):(?P<line>\\d+)-\\d+:\\s*(?P<message>.*)$\ngolint  (github.com/golang/lint/golint)\n      golint -min_confidence {min_confidence} .\n      ^(?P<path>[^\\s][^\\r\\n:]+?\\.go):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.*)$\nlll  (github.com/walle/lll/cmd/lll)\n      lll -g -l {maxlinelength} ./*.go\n      ^(?P<path>[^\\s][^\\r\\n:]+?\\.go):(?P<line>\\d+):\\s*(?P<message>.*)$\nstructcheck  (github.com/opennota/check/cmd/structcheck)\n      structcheck {tests=-t} .\n      ^(?:[^:]+: )?(?P<path>[^:]+):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.+)$\ntestify\n      go test\n      Location:\\s+(?P<path>[^:]+):(?P<line>\\d+)$\\s+Error:\\s+(?P<message>[^\\n]+)\nerrcheck  (github.com/kisielk/errcheck)\n      errcheck -abspath .\n      ^(?P<path>[^:]+):(?P<line>\\d+):(?P<col>\\d+)\\t(?P<message>.*)$\ngoconst  (github.com/jgautheron/goconst/cmd/goconst)\n      goconst -min-occurrences {min_occurrences} .\n      ^(?P<path>[^\\s][^\\r\\n:]+?\\.go):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.*)$\ngoimports  (golang.org/x/tools/cmd/goimports)\n      goimports -l ./*.go\n      ^(?P<path>[^\\n]+)$\ninterfacer  (github.com/mvdan/interfacer/cmd/interfacer)\n      interfacer ./\n      ^(?P<path>[^\\s][^\\r\\n:]+?\\.go):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.*)$\ntest\n      go test\n      ^--- FAIL: .*$\\s+(?P<path>[^:]+):(?P<line>\\d+): (?P<message>.*)$\nunconvert  (github.com/mdempsky/unconvert)\n      unconvert .\n      ^(?P<path>[^\\s][^\\r\\n:]+?\\.go):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.*)$\n\nSeverity override map (default is \"warning\"):\n\ngotype -> error\ntest -> error\ntestify -> error\nvet -> error\n\nFlags:\n      --help                Show context-sensitive help (also try --help-long\n                            and --help-man).\n      --fast                Only run fast linters.\n  -i, --install             Attempt to install all known linters.\n  -u, --update              Pass -u to go tool when installing.\n  -f, --force               Pass -f to go tool when installing.\n  -d, --debug               Display messages for failed linters, etc.\n  -j, --concurrency=16      Number of concurrent linters to run.\n  -e, --exclude=REGEXP ...  Exclude messages matching these regular expressions.\n  -I, --include=REGEXP ...  Include messages matching these regular expressions.\n  -s, --skip=DIR... ...     Skip directories with this name when expanding\n                            '...'.\n      --vendor              Enable vendoring support (skips 'vendor' directories\n                            and sets GO15VENDOREXPERIMENT=1).\n      --cyclo-over=10       Report functions with cyclomatic complexity over N\n                            (using gocyclo).\n      --line-length=80      Report lines longer than N (using lll).\n      --min-confidence=.80  Minimum confidence interval to pass to golint.\n      --min-occurrences=3   Minimum occurrences to pass to goconst.\n      --dupl-threshold=50   Minimum token sequence as a clone for dupl.\n      --sort=none ...       Sort output by any of none, path, line, column,\n                            severity, message, linter.\n  -t, --tests               Include test files for linters that support this\n                            option\n      --deadline=5s         Cancel linters if they have not completed within\n                            this duration.\n      --errors              Only show errors.\n      --json                Generate structured JSON rather than standard\n                            line-based output.\n  -D, --disable=LINTER ...  List of linters to disable\n                            (testify,test,gofmt,goimports,lll).\n  -E, --enable=LINTER ...   Enable previously disabled linters.\n      --linter=NAME:COMMAND:PATTERN ...\n                            Specify a linter.\n      --message-overrides=LINTER:MESSAGE ...\n                            Override message from linter. {message} will be\n                            expanded to the original message.\n      --severity=LINTER:SEVERITY ...\n                            Map of linter severities.\n      --disable-all         Disable all linters.\n\nArgs:\n  [<path>]  Directory to lint. Defaults to \".\". <path>/... will recurse.\n\nVim, emacs, ATOM \u306a\u3069\u3067\u306f gometalinter \u3092\u4f7f\u3063\u305f\u30d7\u30e9\u30b0\u30a4\u30f3\u3084\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3060\u3002\n\n\u811a\u6ce8\n\n\n\n\n--fast \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u308b\u3068 deadcode, dupl, goconst, gocyclo, golint, gotype, vet \u3068\u3044\u3063\u305f\u51e6\u7406\u306e\u901f\u3044\u30c4\u30fc\u30eb\u306e\u307f\u3067\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\u3002\u00a0\u21a9\n\n\n\u624b\u52d5\u3067 dupl -plumbing -threshold 50 zundoko.go \u3068\u304b\u3084\u3063\u3066\u307f\u305f\u304c\u554f\u984c\u306a\u304f\u52d5\u4f5c\u3057\u3066\u3044\u308b\u306e\u3067 gometalinter \u5074\u306e\u554f\u984c\u3060\u308d\u3046\uff0c\u591a\u5206\u3002\u00a0\u21a9\n\n\n\n[Go \u8a00\u8a9e]\u7528\u306e lint \u30c4\u30fc\u30eb\u306f\u3044\u304f\u3064\u304b\u3042\u308b\u306e\u3060\u304c\uff0c\u3053\u308c\u3089\u3092\u7d71\u5408\u7684\u306b\u6271\u3048\u308b [gometalinter] \u3068\u3044\u3046\u306e\u304c\u3042\u308b\u3089\u3057\u3044\u3002\n\n- [alecthomas/gometalinter: Concurrently run Go lint tools and normalise their output](https://github.com/alecthomas/gometalinter)\n\n[Go \u8a00\u8a9e]\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u306e\u3067\uff08[Go \u8a00\u8a9e]\u306e\u74b0\u5883\u304c\u3042\u308c\u3070\uff09\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u7c21\u5358\u3002\n\n```\n$ go get -v github.com/alecthomas/gometalinter\n```\n\n[gometalinter] \u3092\u3064\u304b\u3063\u3066\u5404\u7a2e lint \u304a\u3088\u3073\u30d5\u30a9\u30fc\u30de\u30c3\u30bf\u30fb\u30c4\u30fc\u30eb\u3092\u4e00\u6c17\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u308b\u3002\n\n```\n$ gometalinter --install --update\nInstalling:\n  structcheck\n  interfacer\n  goconst\n  golint\n  goimports\n  dupl\n  errcheck\n  aligncheck\n  gocyclo\n  ineffassign\n  unconvert\n  gotype\n  varcheck\n  deadcode\n  lll\n```\n\n\u3053\u308c\u3089\u306e\u30c4\u30fc\u30eb\u306f `$GOPATH/bin` \u30d5\u30a9\u30eb\u30c0\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u308b\u306e\u3067 `PATH` \u3092\u901a\u3057\u3066\u304a\u304f\u3053\u3068\u3002\n\n\u3067\u306f\u65e9\u901f\u8a66\u3057\u3066\u307f\u3088\u3046\u3002\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\uff0c\u3053\u306e\u307e\u3048\u624b\u904a\u3073\u3067\u4f5c\u3063\u305f [`github.com/spiegel-im-spiegel/zundoko`] \u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u304a\u3046\u3002\n\n```\n$ go get -v github.com/spiegel-im-spiegel/zundoko\n```\n\n\u3044\u304d\u306a\u308a lint \u3092\u304b\u3051\u3066\u307f\u308b\u3002\n\n```\n$ gometalinter ./...\nWARNING: deadline exceeded by linter dupl on sample (try increasing --deadline)\nWARNING: deadline exceeded by linter unconvert on . (try increasing --deadline)\nWARNING: deadline exceeded by linter unconvert on sample (try increasing --deadline)\nWARNING: deadline exceeded by linter aligncheck on . (try increasing --deadline)\nWARNING: deadline exceeded by linter aligncheck on sample (try increasing --deadline)\nWARNING: deadline exceeded by linter interfacer on . (try increasing --deadline)\nWARNING: deadline exceeded by linter interfacer on sample (try increasing --deadline)\n```\n\n\u3042\u308a\u3083\u308a\u3083\u3002\u51e6\u7406\u306b\u6642\u9593\u304c\u304b\u304b\u308a\u3059\u304e\u305f\uff1f \u3058\u3083\u3042 `--fast` \u30aa\u30d7\u30b7\u30e7\u30f3[^fast] \u3092\u4ed8\u3051\u3066\u3082\u3046\u4e00\u5ea6\u3002\n\n[^fast]: `--fast` \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u308b\u3068 deadcode, dupl, goconst, gocyclo, golint, gotype, vet \u3068\u3044\u3063\u305f\u51e6\u7406\u306e\u901f\u3044\u30c4\u30fc\u30eb\u306e\u307f\u3067\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\u3002\n\n```\n$ gometalinter --fast ./...\nWARNING: deadline exceeded by linter dupl on sample (try increasing --deadline)\n```\n\n\u3046\uff5e\u3093\u3002\u5b9f\u306f\u79c1\u306e\u74b0\u5883\u3067\u306f [gometalinter] \u304c [dupl] \u306e\u7d42\u4e86\u3092\u8a8d\u8b58\u3057\u3066\u304f\u308c\u306a\u3044\u3088\u3046\u3060[^a]\u3002\u306a\u306e\u3067 [dupl] \u3092\u9664\u5916\u3057\u3066\u3084\u3063\u3066\u307f\u308b\u3002\n\n[^a]: \u624b\u52d5\u3067 `dupl -plumbing -threshold 50 zundoko.go` \u3068\u304b\u3084\u3063\u3066\u307f\u305f\u304c\u554f\u984c\u306a\u304f\u52d5\u4f5c\u3057\u3066\u3044\u308b\u306e\u3067 [gometalinter] \u5074\u306e\u554f\u984c\u3060\u308d\u3046\uff0c\u591a\u5206\u3002\n\n```\n$ gometalinter --fast --disable=dupl ./...\n```\n\n\u4eca\u5ea6\u306f\u30a8\u30e9\u30fc\u306f\u51fa\u306a\u304b\u3063\u305f\u3002\u306a\u304a `--deadline=5s` \u3068\u3044\u3063\u305f\u611f\u3058\u3067 deadline \u5024\u3092\u8abf\u6574\u3059\u308c\u3070 `--fast` \u30aa\u30d7\u30b7\u30e7\u30f3\u306a\u3057\u3067\u3082\u4e0a\u624b\u304f\u3044\u304f\u3002\n\n\u3067\u306f [`github.com/spiegel-im-spiegel/zundoko`] \u30d1\u30c3\u30b1\u30fc\u30b8\u306e `zundoko.go` \u30d5\u30a1\u30a4\u30eb\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5f04\u3063\u3066\u307f\u308b\u3002\n\n```go\npackage zundoko\n\nimport (\n\t\"math/rand\"\n\t\"time\"\n)\n\n// zundoko-choirs items\nconst (\n\tZun     = \"\u30ba\u30f3\"\n\tDoko    = \"\u30c9\u30b3\"\n\tKiyoshi = \"\u30ad\u30fb\u30e8\u30fb\u30b7\uff01\"\n)\n\n//Choirs - zundoko-choirs list\ntype Choirs struct {\n\tc     []string\n    dummy int\n}\n\n//Push is append choirs\nfunc (c *Choirs) Push(s string) {\n\tc.c = append(c.c, s) //maybe panic if c is nil.\n}\n\n//CountZunDoko returns count of \"ZUN\" and \"DOKO\" choirs\nfunc (c *Choirs) CountZunDoko() (int, int) {\n\tz := 0\n\td := 0\n\tif c == nil {\n\t\treturn z, d\n\t}\n\tfor _, s := range c.c {\n\t\tswitch s {\n\t\tcase Zun:\n\t\t\tz++\n\t\tcase Doko:\n\t\t\td++\n\t\t}\n\t}\n\treturn z, d\n}\n\nfunc (c *Choirs) String() string {\n\tif c == nil {\n\t\treturn \"\"\n\t} else {\n\t\tcontent := make([]byte, 0, 128)\n\t\tfor _, s := range c.c {\n\t\t\tcontent = append(content, s...)\n\t\t}\n\t\treturn string(content)\n\t}\n\treturn \"\"\n}\n\nfunc generate() chan string {\n\tch := make(chan string)\n\tgo func() {\n\t\tzd := [2]string{Zun, Doko}\n\t\trand.Seed(time.Now().UnixNano())\n\t\tfor {\n\t\t\tch <- zd[rand.Intn(2)]\n\t\t}\n\t}()\n\treturn ch\n}\n\n//Run zundoko-choirs\nfunc Run() *Choirs {\n\tzd := generate()\n\tc := &Choirs{c: make([]string, 0)}\n\tzcount := 0\n\tfor {\n\t\ts := <-zd\n\t\tc.Push(s)\n\t\tif s == Zun {\n\t\t\tzcount++\n\t\t} else if zcount >= 4 {\n\t\t\tbreak\n\t\t} else {\n\t\t\tzcount = 0\n\t\t}\n\t}\n\tc.Push(Kiyoshi)\n\treturn c\n}\n```\n\n\u3069\u3053\u306b\u554f\u984c\u304c\u3042\u308b\u304b\u304a\u5206\u304b\u308a\u3060\u308d\u3046\u304b\u3002 lint \u3092\u304b\u3051\u308b\u3068\u4ee5\u4e0b\u306e\u7d50\u679c\u306b\u306a\u308b\u3002\n\n```\n$ gometalinter --deadline=5s --disable=dupl ./...\nzundoko.go:72:32:error: too few values in struct literal (gotype)\nzundoko.go:54::error: unreachable code (vet)\nzundoko.go:47:9:warning: if block ends with a return statement, so drop this else and outdent its block (golint)\nzundoko.go:72:32:warning: too few values in struct literal (interfacer)\n```\n\ngolint, gotype, interfacer, vet \u306e\u305d\u308c\u305e\u308c\u306e\u30a8\u30e9\u30fc\u30fb\u30ef\u30fc\u30cb\u30f3\u30b0\u304c\u96c6\u7d04\u3055\u308c\u3066\u51fa\u529b\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308b\u3068\u601d\u3046\u3002\u3061\u306a\u307f\u306b `--json` \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u308b\u3068\u51fa\u529b\u304c JSON \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u306a\u308b\u3002\n\n```\n$ gometalinter --deadline=5s --disable=dupl --json ./...\n[\n  {\"linter\":\"golint\",\"severity\":\"warning\",\"path\":\"zundoko.go\",\"line\":47,\"col\":9,\"message\":\"if block ends with a return statement, so drop this else and outdent its block\"},\n  {\"linter\":\"gotype\",\"severity\":\"error\",\"path\":\"zundoko.go\",\"line\":72,\"col\":32,\"message\":\"too few values in struct literal\"},\n  {\"linter\":\"vet\",\"severity\":\"error\",\"path\":\"zundoko.go\",\"line\":54,\"col\":0,\"message\":\"unreachable code\"},\n  {\"linter\":\"interfacer\",\"severity\":\"warning\",\"path\":\"zundoko.go\",\"line\":72,\"col\":32,\"message\":\"too few values in struct literal\"}\n]\n```\n\n\u307e\u305f `--vendor` \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u308b\u3068 [Go \u8a00\u8a9e]\u30d0\u30fc\u30b8\u30e7\u30f3 1.5 \u304b\u3089\u63a1\u7528\u3055\u308c\u305f Vendoring \u6a5f\u80fd\u306b\u5bfe\u5fdc\u3059\u308b\u3002\u305d\u306e\u4ed6\uff0c\u30aa\u30d7\u30b7\u30e7\u30f3\u7b49\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3002\n\n```\n$ gometalinter --help\nusage: gometalinter.exe [<flags>] [<path>...]\n\nAggregate and normalise the output of a whole bunch of Go linters.\n\nDefault linters:\n\ndeadcode  (github.com/tsenart/deadcode)\n      deadcode .\n      ^deadcode: (?P<path>[^:]+):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.*)$\ngocyclo  (github.com/alecthomas/gocyclo)\n      gocyclo -over {mincyclo} .\n      ^(?P<cyclo>\\d+)\\s+\\S+\\s(?P<function>\\S+)\\s+(?P<path>[^:]+):(?P<line>\\d+):(\\d+)$\ngofmt\n      gofmt -l -s ./*.go\n      ^(?P<path>[^\\n]+)$\ngotype  (golang.org/x/tools/cmd/gotype)\n      gotype -e {tests=-a} .\n      ^(?P<path>[^\\s][^\\r\\n:]+?\\.go):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.*)$\nineffassign  (github.com/gordonklaus/ineffassign)\n      ineffassign -n .\n      ^(?P<path>[^\\s][^\\r\\n:]+?\\.go):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.*)$\nvetshadow\n      go tool vet --shadow ./*.go\n      ^(?P<path>[^\\s][^\\r\\n:]+?\\.go):(?P<line>\\d+):\\s*(?P<message>.*)$\nvarcheck  (github.com/opennota/check/cmd/varcheck)\n      varcheck .\n      ^(?:[^:]+: )?(?P<path>[^:]+):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>\\w+)$\nvet\n      go tool vet ./*.go\n      ^(?P<path>[^\\s][^\\r\\n:]+?\\.go):(?P<line>\\d+):\\s*(?P<message>.*)$\naligncheck  (github.com/opennota/check/cmd/aligncheck)\n      aligncheck .\n      ^(?:[^:]+: )?(?P<path>[^:]+):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.+)$\ndupl  (github.com/mibk/dupl)\n      dupl -plumbing -threshold {duplthreshold} ./*.go\n      ^(?P<path>[^\\s][^:]+?\\.go):(?P<line>\\d+)-\\d+:\\s*(?P<message>.*)$\ngolint  (github.com/golang/lint/golint)\n      golint -min_confidence {min_confidence} .\n      ^(?P<path>[^\\s][^\\r\\n:]+?\\.go):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.*)$\nlll  (github.com/walle/lll/cmd/lll)\n      lll -g -l {maxlinelength} ./*.go\n      ^(?P<path>[^\\s][^\\r\\n:]+?\\.go):(?P<line>\\d+):\\s*(?P<message>.*)$\nstructcheck  (github.com/opennota/check/cmd/structcheck)\n      structcheck {tests=-t} .\n      ^(?:[^:]+: )?(?P<path>[^:]+):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.+)$\ntestify\n      go test\n      Location:\\s+(?P<path>[^:]+):(?P<line>\\d+)$\\s+Error:\\s+(?P<message>[^\\n]+)\nerrcheck  (github.com/kisielk/errcheck)\n      errcheck -abspath .\n      ^(?P<path>[^:]+):(?P<line>\\d+):(?P<col>\\d+)\\t(?P<message>.*)$\ngoconst  (github.com/jgautheron/goconst/cmd/goconst)\n      goconst -min-occurrences {min_occurrences} .\n      ^(?P<path>[^\\s][^\\r\\n:]+?\\.go):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.*)$\ngoimports  (golang.org/x/tools/cmd/goimports)\n      goimports -l ./*.go\n      ^(?P<path>[^\\n]+)$\ninterfacer  (github.com/mvdan/interfacer/cmd/interfacer)\n      interfacer ./\n      ^(?P<path>[^\\s][^\\r\\n:]+?\\.go):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.*)$\ntest\n      go test\n      ^--- FAIL: .*$\\s+(?P<path>[^:]+):(?P<line>\\d+): (?P<message>.*)$\nunconvert  (github.com/mdempsky/unconvert)\n      unconvert .\n      ^(?P<path>[^\\s][^\\r\\n:]+?\\.go):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.*)$\n\nSeverity override map (default is \"warning\"):\n\ngotype -> error\ntest -> error\ntestify -> error\nvet -> error\n\nFlags:\n      --help                Show context-sensitive help (also try --help-long\n                            and --help-man).\n      --fast                Only run fast linters.\n  -i, --install             Attempt to install all known linters.\n  -u, --update              Pass -u to go tool when installing.\n  -f, --force               Pass -f to go tool when installing.\n  -d, --debug               Display messages for failed linters, etc.\n  -j, --concurrency=16      Number of concurrent linters to run.\n  -e, --exclude=REGEXP ...  Exclude messages matching these regular expressions.\n  -I, --include=REGEXP ...  Include messages matching these regular expressions.\n  -s, --skip=DIR... ...     Skip directories with this name when expanding\n                            '...'.\n      --vendor              Enable vendoring support (skips 'vendor' directories\n                            and sets GO15VENDOREXPERIMENT=1).\n      --cyclo-over=10       Report functions with cyclomatic complexity over N\n                            (using gocyclo).\n      --line-length=80      Report lines longer than N (using lll).\n      --min-confidence=.80  Minimum confidence interval to pass to golint.\n      --min-occurrences=3   Minimum occurrences to pass to goconst.\n      --dupl-threshold=50   Minimum token sequence as a clone for dupl.\n      --sort=none ...       Sort output by any of none, path, line, column,\n                            severity, message, linter.\n  -t, --tests               Include test files for linters that support this\n                            option\n      --deadline=5s         Cancel linters if they have not completed within\n                            this duration.\n      --errors              Only show errors.\n      --json                Generate structured JSON rather than standard\n                            line-based output.\n  -D, --disable=LINTER ...  List of linters to disable\n                            (testify,test,gofmt,goimports,lll).\n  -E, --enable=LINTER ...   Enable previously disabled linters.\n      --linter=NAME:COMMAND:PATTERN ...\n                            Specify a linter.\n      --message-overrides=LINTER:MESSAGE ...\n                            Override message from linter. {message} will be\n                            expanded to the original message.\n      --severity=LINTER:SEVERITY ...\n                            Map of linter severities.\n      --disable-all         Disable all linters.\n\nArgs:\n  [<path>]  Directory to lint. Defaults to \".\". <path>/... will recurse.\n```\n\nVim, emacs, ATOM \u306a\u3069\u3067\u306f [gometalinter] \u3092\u4f7f\u3063\u305f\u30d7\u30e9\u30b0\u30a4\u30f3\u3084\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3060\u3002\n\n[Go \u8a00\u8a9e]: https://golang.org/ \"The Go Programming Language\"\n[gometalinter]: https://github.com/alecthomas/gometalinter \"alecthomas/gometalinter: Concurrently run Go lint tools and normalise their output\"\n[`github.com/spiegel-im-spiegel/zundoko`]: https://github.com/spiegel-im-spiegel/zundoko \"spiegel-im-spiegel/zundoko: Zundoko-choirs\"\n[dupl]: https://github.com/mibk/dupl \"mibk/dupl: a tool for code clone detection\"\n\n## \u811a\u6ce8\n"}