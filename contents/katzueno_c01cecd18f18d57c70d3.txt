{"context": "\n\n\u30b5\u30fc\u30d0\u30fc\u4e0a\u306b\u4fdd\u5b58\u3055\u308c\u308b\u7269\u7406\u30d5\u30a1\u30a4\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u540d\n\n\u6700\u5927127\u6587\u5b57\u306e\u534a\u89d2\u82f1\u6570\u5b57\u3001\u4e0b\u7dda(_)\u3068\u30c9\u30c3\u30c8(.)\u306e\u307f\n\u30c9\u30a4\u30c4\u8a9e\u3001\u30ae\u30ea\u30b7\u30e3\u8a9e\u3001\u30c8\u30eb\u30b3\u8a9e\u3001\u30ed\u30b7\u30a2\u8a9e\u3001\u305d\u306e\u4ed6\u6771\u30e8\u30fc\u30ed\u30c3\u30d1\u7cfb\u8a00\u8a9e\u306e\u30e9\u30c6\u30f3\u7cfb\u6587\u5b57\u306e\u30a2\u30af\u30bb\u30f3\u30c8\u6587\u5b57\u306f\u534a\u89d2\u82f1\u5b57\u306e\u3082\u306e\u306b\u5909\u63db\u3055\u308c\u308b\n\u5168\u89d2\u65e5\u672c\u8a9e\u306e\u307f\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3067\u3042\u308c\u3070 md5 \u306e\u30e9\u30f3\u30c0\u30e0\u306a\u30cf\u30c3\u30b7\u30e5\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u306a\u308b\n\u6700\u521d\u3084\u6700\u5f8c\u306b _ (\u30a2\u30f3\u30c0\u30fc\u30b9\u30b3\u30a2\u30fc)\u304c\u3042\u308b\u5834\u5408\u306f\u524a\u9664\u3055\u308c\u308b\n\n\n\u30d5\u30a1\u30a4\u30eb\u5c5e\u6027\u300c\u30bf\u30a4\u30c8\u30eb\u300d\n\u65e5\u672c\u8a9e\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u305d\u306e\u307e\u307e\u5165\u308a\u307e\u3059\u3002\n\u30d7\u30ed\u30b0\u30e9\u30e0\u7684\u306a\u5236\u7d04\u306f\u306a\u3044\u306e\u3067\u3001\u4f7f\u7528\u3059\u308b OS \u306e\u65e5\u672c\u8a9e\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u5236\u7d04\u306b\u6e96\u3058\u307e\u3059\u3002\n\u53c2\u8003: Windows \u306e\u30d5\u30a1\u30a4\u30eb\u547d\u540d\u898f\u5247\nhttps://support.microsoft.com/ja-jp/help/879749\n- \u534a\u89d2\u3067 215 \u6587\u5b57\u3001\u5168\u89d2\u3067\u306f 107 \u6587\u5b57\u307e\u3067\u306e\u540d\u524d\u304c\u4ed8\u3051\u3089\u308c\u307e\u3059\u3002\n- \u30b9\u30e9\u30c3\u30b7\u30e5 (/)\u3001\u5186\u8a18\u53f7 ()\u3001\u4e0d\u7b49\u53f7\u8a18\u53f7 (<>)\u3001\u30a2\u30b9\u30bf\u30ea\u30b9\u30af (*)\u3001\u7591\u554f\u7b26 (?)\u3001\u30c0\u30d6\u30eb \u30af\u30a9\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3 (\")\u3001\u7e26\u68d2 (|)\u3001\u30b3\u30ed\u30f3 (:)\u3001\u30bb\u30df\u30b3\u30ed\u30f3 (;) \u3092\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u4e00\u90e8\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\u53c2\u8003: OS X\uff1a\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3092\u307e\u305f\u304c\u308b\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u304a\u3088\u3073\u547d\u540d\u898f\u5247\nhttps://support.apple.com/ja-jp/HT202808\n- 255 \u5b57\u307e\u3067 (\u534a\u89d2)\n\nconcrete5 \u3067\u51e6\u7406\u3092\u3057\u3066\u3044\u308b\u5834\u6240\u30e1\u30e2\n\u3053\u3053\u3067\u30d5\u30a1\u30a4\u30eb\u5165\u529b\u51e6\u7406\n/concrete/src/File/Importer.php\nconcrete5 V8 Git \u306e\u30b3\u30fc\u30c9\n    /**\n     * Imports a local file into the system. The file must be added to this path\n     * somehow. That's what happens in tools/files/importers/.\n     * If a $fr (FileRecord) object is passed, we assign the newly imported FileVersion\n     * object to that File. If not, we make a new filerecord.\n     *\n     * @param string $pointer path to file\n     * @param string|bool $filename\n     * @param File|FileFolder|bool $fr\n     *\n     * @return number Error Code | \\Concrete\\Core\\EntiFile\\Version\n     */\n    public function import($pointer, $filename = false, $fr = false)\n    {\n        if ($filename == false) {\n            // determine filename from $pointer\n            $filename = basename($pointer);\n        }\n\n        $fh = Loader::helper('validation/file');\n        $fi = Loader::helper('file');\n        $cf = Core::make('helper/concrete/file');\n        $sanitizedFilename = $fi->sanitize($filename);\n\n        // test if file is valid, else return FileImporter::E_FILE_INVALID\n        if (!$fh->file($pointer)) {\n            return self::E_FILE_INVALID;\n        }\n\n        if (!$fh->extension($filename)) {\n            return self::E_FILE_INVALID_EXTENSION;\n        }\n\n        if ($fr instanceof FileEntity) {\n            $fsl = $fr->getFileStorageLocationObject();\n        } else {\n            $fsl = StorageLocation::getDefault();\n        }\n        if (!($fsl instanceof \\Concrete\\Core\\Entity\\File\\StorageLocation\\StorageLocation)) {\n            return self::E_FILE_INVALID_STORAGE_LOCATION;\n        }\n\n        // store the file in the file storage location.\n        $filesystem = $fsl->getFileSystemObject();\n        $prefix = $this->generatePrefix();\n\n        try {\n            $src = fopen($pointer, 'rb');\n            $filesystem->writeStream($cf->prefix($prefix, $sanitizedFilename), $src, array(\n                'visibility' => AdapterInterface::VISIBILITY_PUBLIC,\n                'mimetype' => Core::make('helper/mime')->mimeFromExtension($fi->getExtension($sanitizedFilename)),\n            ));\n        } catch (\\Exception $e) {\n            return self::E_FILE_UNABLE_TO_STORE;\n        }\n\n        if (!($fr instanceof FileEntity)) {\n            // we have to create a new file object for this file version\n            $fv = File::add($sanitizedFilename, $prefix, array('fvTitle' => $filename), $fsl, $fr);\n\n            foreach ($this->importProcessors as $processor) {\n                if ($processor->shouldProcess($fv)) {\n                    $processor->process($fv);\n                }\n            }\n\n            $fv->refreshAttributes($this->rescanThumbnailsOnImport);\n        } else {\n            // We get a new version to modify\n            $fv = $fr->getVersionToModify(true);\n            $fv->updateFile($sanitizedFilename, $prefix);\n            $fv->refreshAttributes($this->rescanThumbnailsOnImport);\n        }\n\n        return $fv;\n    }\n\n/concrete/src/File/Service/File.php\n\u3053\u3053\u306e sanitize() \u3067\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u51e6\u7406\n    public function sanitize($file)\n    {\n        // Let's build an ASCII-only version of name, to avoid filesystem-specific encoding issues.\n        // Takes text and converts it to an ASCII-only string (characters with code between 32 and 127, plus \\t, \\n and \\r).\n        $asciiName = Core::make('helper/text')->asciify($file);\n        // Let's keep only letters, numbers, underscore and dots.\n        $asciiName = trim(preg_replace(array(\"/[\\\\s]/\", \"/[^0-9A-Z_a-z-.]/\"), array(\"_\", \"\"), $asciiName));\n        // Trim underscores at start and end\n        $asciiName = trim($asciiName, '_');\n        if (!strlen(str_replace('.', '', $asciiName))) {\n            // If the resulting name is empty (or we have only dots in it)\n            $asciiName = md5($file);\n        } elseif (preg_match('/^\\.\\w+$/', $asciiName)) {\n            // If the resulting name is only composed by the file extension\n            $asciiName = md5($file) . $asciiName;\n        }\n        return $asciiName;\n    }\n\n\n\u5ba3\u4f1d & \u30af\u30ec\u30b8\u30c3\u30c8\n\u3053\u306e\u8a18\u4e8b\u304c\u5f79\u306b\u7acb\u3063\u305f\u3089\u3001\u300c CMS \u306f concrete5 \u304c\u4e00\u756a\u300d\u3068\u982d\u306e\u4e2d\u306710\u56de\u5531\u3048\u3066\u304f\u3060\u3055\u3044\u3002\nCMS \u306f\u65ad\u7136 concrete5\u3067\u6c7a\u307e\u308a\u3002\u30b3\u30f3\u30af\u30ea\u30fc\u30c8\u30d5\u30a1\u30a4\u30d6\u30b8\u30e3\u30d1\u30f3\u682a\u5f0f\u4f1a\u793e\u304c\u30b5\u30dd\u30fc\u30c8\u3067\u304d\u307e\u3059\u3002\n\n## \u30b5\u30fc\u30d0\u30fc\u4e0a\u306b\u4fdd\u5b58\u3055\u308c\u308b\u7269\u7406\u30d5\u30a1\u30a4\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u540d\n\n- \u6700\u5927127\u6587\u5b57\u306e\u534a\u89d2\u82f1\u6570\u5b57\u3001\u4e0b\u7dda(_)\u3068\u30c9\u30c3\u30c8(.)\u306e\u307f\n- \u30c9\u30a4\u30c4\u8a9e\u3001\u30ae\u30ea\u30b7\u30e3\u8a9e\u3001\u30c8\u30eb\u30b3\u8a9e\u3001\u30ed\u30b7\u30a2\u8a9e\u3001\u305d\u306e\u4ed6\u6771\u30e8\u30fc\u30ed\u30c3\u30d1\u7cfb\u8a00\u8a9e\u306e\u30e9\u30c6\u30f3\u7cfb\u6587\u5b57\u306e\u30a2\u30af\u30bb\u30f3\u30c8\u6587\u5b57\u306f\u534a\u89d2\u82f1\u5b57\u306e\u3082\u306e\u306b\u5909\u63db\u3055\u308c\u308b\n- \u5168\u89d2\u65e5\u672c\u8a9e\u306e\u307f\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3067\u3042\u308c\u3070 md5 \u306e\u30e9\u30f3\u30c0\u30e0\u306a\u30cf\u30c3\u30b7\u30e5\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u306a\u308b\n- \u6700\u521d\u3084\u6700\u5f8c\u306b _ (\u30a2\u30f3\u30c0\u30fc\u30b9\u30b3\u30a2\u30fc)\u304c\u3042\u308b\u5834\u5408\u306f\u524a\u9664\u3055\u308c\u308b\n\n## \u30d5\u30a1\u30a4\u30eb\u5c5e\u6027\u300c\u30bf\u30a4\u30c8\u30eb\u300d\n\n\u65e5\u672c\u8a9e\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u305d\u306e\u307e\u307e\u5165\u308a\u307e\u3059\u3002\n\u30d7\u30ed\u30b0\u30e9\u30e0\u7684\u306a\u5236\u7d04\u306f\u306a\u3044\u306e\u3067\u3001\u4f7f\u7528\u3059\u308b OS \u306e\u65e5\u672c\u8a9e\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u5236\u7d04\u306b\u6e96\u3058\u307e\u3059\u3002\n\n\u53c2\u8003: Windows \u306e\u30d5\u30a1\u30a4\u30eb\u547d\u540d\u898f\u5247\nhttps://support.microsoft.com/ja-jp/help/879749\n- \u534a\u89d2\u3067 215 \u6587\u5b57\u3001\u5168\u89d2\u3067\u306f 107 \u6587\u5b57\u307e\u3067\u306e\u540d\u524d\u304c\u4ed8\u3051\u3089\u308c\u307e\u3059\u3002\n- \u30b9\u30e9\u30c3\u30b7\u30e5 (/)\u3001\u5186\u8a18\u53f7 (\\)\u3001\u4e0d\u7b49\u53f7\u8a18\u53f7 (<>)\u3001\u30a2\u30b9\u30bf\u30ea\u30b9\u30af (*)\u3001\u7591\u554f\u7b26 (?)\u3001\u30c0\u30d6\u30eb \u30af\u30a9\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3 (\")\u3001\u7e26\u68d2 (|)\u3001\u30b3\u30ed\u30f3 (:)\u3001\u30bb\u30df\u30b3\u30ed\u30f3 (;) \u3092\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u4e00\u90e8\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\n\u53c2\u8003: OS X\uff1a\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3092\u307e\u305f\u304c\u308b\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u304a\u3088\u3073\u547d\u540d\u898f\u5247\nhttps://support.apple.com/ja-jp/HT202808\n- 255 \u5b57\u307e\u3067 (\u534a\u89d2)\n\n\n## concrete5 \u3067\u51e6\u7406\u3092\u3057\u3066\u3044\u308b\u5834\u6240\u30e1\u30e2\n\n\u3053\u3053\u3067\u30d5\u30a1\u30a4\u30eb\u5165\u529b\u51e6\u7406\n/concrete/src/File/Importer.php\n\nconcrete5 V8 Git \u306e\u30b3\u30fc\u30c9\n\n```\n    /**\n     * Imports a local file into the system. The file must be added to this path\n     * somehow. That's what happens in tools/files/importers/.\n     * If a $fr (FileRecord) object is passed, we assign the newly imported FileVersion\n     * object to that File. If not, we make a new filerecord.\n     *\n     * @param string $pointer path to file\n     * @param string|bool $filename\n     * @param File|FileFolder|bool $fr\n     *\n     * @return number Error Code | \\Concrete\\Core\\EntiFile\\Version\n     */\n    public function import($pointer, $filename = false, $fr = false)\n    {\n        if ($filename == false) {\n            // determine filename from $pointer\n            $filename = basename($pointer);\n        }\n\n        $fh = Loader::helper('validation/file');\n        $fi = Loader::helper('file');\n        $cf = Core::make('helper/concrete/file');\n        $sanitizedFilename = $fi->sanitize($filename);\n\n        // test if file is valid, else return FileImporter::E_FILE_INVALID\n        if (!$fh->file($pointer)) {\n            return self::E_FILE_INVALID;\n        }\n\n        if (!$fh->extension($filename)) {\n            return self::E_FILE_INVALID_EXTENSION;\n        }\n\n        if ($fr instanceof FileEntity) {\n            $fsl = $fr->getFileStorageLocationObject();\n        } else {\n            $fsl = StorageLocation::getDefault();\n        }\n        if (!($fsl instanceof \\Concrete\\Core\\Entity\\File\\StorageLocation\\StorageLocation)) {\n            return self::E_FILE_INVALID_STORAGE_LOCATION;\n        }\n\n        // store the file in the file storage location.\n        $filesystem = $fsl->getFileSystemObject();\n        $prefix = $this->generatePrefix();\n\n        try {\n            $src = fopen($pointer, 'rb');\n            $filesystem->writeStream($cf->prefix($prefix, $sanitizedFilename), $src, array(\n                'visibility' => AdapterInterface::VISIBILITY_PUBLIC,\n                'mimetype' => Core::make('helper/mime')->mimeFromExtension($fi->getExtension($sanitizedFilename)),\n            ));\n        } catch (\\Exception $e) {\n            return self::E_FILE_UNABLE_TO_STORE;\n        }\n\n        if (!($fr instanceof FileEntity)) {\n            // we have to create a new file object for this file version\n            $fv = File::add($sanitizedFilename, $prefix, array('fvTitle' => $filename), $fsl, $fr);\n\n            foreach ($this->importProcessors as $processor) {\n                if ($processor->shouldProcess($fv)) {\n                    $processor->process($fv);\n                }\n            }\n\n            $fv->refreshAttributes($this->rescanThumbnailsOnImport);\n        } else {\n            // We get a new version to modify\n            $fv = $fr->getVersionToModify(true);\n            $fv->updateFile($sanitizedFilename, $prefix);\n            $fv->refreshAttributes($this->rescanThumbnailsOnImport);\n        }\n\n        return $fv;\n    }\n```\n\n/concrete/src/File/Service/File.php\n\u3053\u3053\u306e sanitize() \u3067\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u51e6\u7406\n\n\n```\n    public function sanitize($file)\n    {\n        // Let's build an ASCII-only version of name, to avoid filesystem-specific encoding issues.\n        // Takes text and converts it to an ASCII-only string (characters with code between 32 and 127, plus \\t, \\n and \\r).\n        $asciiName = Core::make('helper/text')->asciify($file);\n        // Let's keep only letters, numbers, underscore and dots.\n        $asciiName = trim(preg_replace(array(\"/[\\\\s]/\", \"/[^0-9A-Z_a-z-.]/\"), array(\"_\", \"\"), $asciiName));\n        // Trim underscores at start and end\n        $asciiName = trim($asciiName, '_');\n        if (!strlen(str_replace('.', '', $asciiName))) {\n            // If the resulting name is empty (or we have only dots in it)\n            $asciiName = md5($file);\n        } elseif (preg_match('/^\\.\\w+$/', $asciiName)) {\n            // If the resulting name is only composed by the file extension\n            $asciiName = md5($file) . $asciiName;\n        }\n        return $asciiName;\n    }\n```\n\n## \u5ba3\u4f1d & \u30af\u30ec\u30b8\u30c3\u30c8\n\n\u3053\u306e\u8a18\u4e8b\u304c\u5f79\u306b\u7acb\u3063\u305f\u3089\u3001\u300c **CMS \u306f concrete5 \u304c\u4e00\u756a**\u300d\u3068\u982d\u306e\u4e2d\u306710\u56de\u5531\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\nCMS \u306f\u65ad\u7136 [concrete5](https://concrete5-japan.org/)\u3067\u6c7a\u307e\u308a\u3002[\u30b3\u30f3\u30af\u30ea\u30fc\u30c8\u30d5\u30a1\u30a4\u30d6\u30b8\u30e3\u30d1\u30f3\u682a\u5f0f\u4f1a\u793e](https://concrete5.co.jp)\u304c\u30b5\u30dd\u30fc\u30c8\u3067\u304d\u307e\u3059\u3002\n", "tags": ["concrete5"]}