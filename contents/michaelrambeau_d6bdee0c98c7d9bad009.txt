{"tags": ["reactjs0.13", "JSX", "react.js0.13"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002\n\nConcepts\n\nstate VS. props\n\nState and Props are component data.\nA component can only change its own state, using this.setState() method, not its props.\nIf the state changes, the component and all children are automatically updated by React that runs the render() function.\n\n\nComponent example\nA simple component with one property (title) and one state (counter). The button updates the counter state using setState method. \nvar MyComponent = React.createClass({\n\n  getDefaultProps: function() {\n    return {\n      title: 'My defaut title'\n    };\n  },\n\n  getInitialState: function() {\n    return {\n      counter: 0 \n    };\n  },\n\n  onClick: function () {\n    this.setState({\n      counter: this.state.counter + 1\n    });\n  },\n\n  render: function() {\n    return (\n      <div>\n        { this.props.title }\n        { this.state.counter }\n        <button onClick={ this.onClick }>INCREMENT</button>\n      </div>\n    );\n  }\n\n});\n\n\nAdd a component to the HTML page\nThe following JavaScript code includes a component inside a DOM element, passing initial properties using the options variable.\nvar options = {\n  title: 'My component'\n};\nReact.render(\n  React.createElement(MyComponent, options),\n  document.getElementById('app')\n);\n\n\nNested components\nInside a component, sub-components can be used.\nAny type of data can be passed to a component: arrays, objects, functions... don't forget the curly brackets { } to pass data.\n<MySubComponent items={ ['A', 'B'] } onSave={ saveFunction } />\n\n\nJSX: tips and tricks\nJSX syntax is a mix of JavaScript and HTML. The JSX online compiler can be used to find compilation issues.\n\nAttributes\nHTML attributes use JS syntax (camelCase).\nFor example: use className=... instead of class=...\n<button className=\"btn btn-default\">\n\n\nIF\n{ term == 'yearly' && (\n  <p>10%\u5024\u5f15\u304d<p>\n) }\n\n\nIF ELSE\n{ term == 'monthly' ? (\n  <span>1\u30f6\u6708</span>\n) : (\n  <span>12\u30f6\u6708</span>\n)}\n\nCompact version\n<span>{ term == 'monthly' ? '1\u30f6\u6708' : '12\u30f6\u6708' }</span>\n\n\nLoops\nLoop through items of an array using the Array.map() function and a callback function\nrender: function() {\n  var menuItem = function(i) {\n    return(\n      <li>\n        <span>{'STEP' + i }</span>\n      </li>\n    );\n  };\n\n  return(\n\u3000  <ul>\n  \u3000  { [1, 2, 3].map(menuItem) }\n\u3000  </ul>\n  );\n}\n\n\nInline style\nStyle property uses JSON syntax.\nstyle={{ float: 'right', padding: 10 }}\n\n\nWorking with jQuery plugins.\nUse the componentDidMount event to initialise jQuery plugins.\ncomponentDidMount: function () {\n  var el = this.getDOMNode();\n  var $el = $(el);\n  var $form = $el.find('form');\n  $form.mySuperPlugin();\n}\n\n\nWhite spaces\nWhite spaces are stripped. Use {' '}to restore white spaces between tags like (between 2 buttons for example).\n<button>Cancel</button>\n{' '}\n<button>OK</button>\n\n\nTag syntax /JSX errors\n<body>\n  <br>\n  <MyApp>\n</body>\n\n=> Error \"Expected corresponding XJS closing tag for MyApp\"\n\nDon't forget to close all tags! (components and html tags, xhtml syntax)\n<body>\n  <br />\n  <MyApp />\n</body>\n\n=> OK!\n\n\nEvent handlers\n\n1. Normal pattern\n  onDeleteAll: function (event) {\n\n  },\n  render: function() {\n    return (\n     <button onClick={ this.onDeleteAll }>Delete All</button>\n    );\n  }\n\n\n2. How to pass extra data\nIn event handlers (onClick=...),  use .bind(null, myData) to pass data to the event handler. \n  onEmailAction: function (email, actionCode, event) {\n\n  },\n  render: function() {\n    return (\n      <button \n        onClick={ this.onEmailAction.bind(null, email, 'MARK_AS_READ') }>\n        Mark as read\n      </button>\n    );\n  }\n\n\nMixins\n\nCode can be shared between components using mixins.\nvar EmailFilterList = React.createClass({\n  mixins: [FilterListEventMixin],\n  render: function() {\n  ...\n\n\nNote about: in the JavsScript compiled file, mixins have to be loaded before the components that use the mixins.\n\nNamespaced components\n\nSub-components can be attributes of a main component.\nFor example, a section used to create an accordion has 2 sub-components: title and body:\nvar MySection = React.createClass({...});\nMySection.Title = React.createClass({...});\nMySection.Body = React.createClass({...});\n\n\n<MySection>\n  <MySection.Title>My title</MySection.Title>\n  <MySection.Body>\n    ...\n  </MySection.Body>\n</MySection>\n\n\nProperty validation\n\nUse propTypes to specify property types: array, function, string...\nReact.createClass({\n  propTypes: {\n    myOptionalArray: React.PropTypes.array\n  }\n  ...\n\nAdd .isRequired to make the property required.\n  myRequiredArray: React.PropTypes.array.isRequired\n\nAvailable types:\n\nReact.PropTypes.array\nReact.PropTypes.bool\nReact.PropTypes.func\nReact.PropTypes.object\nReact.PropTypes.number,\nReact.PropTypes.string\nReact.PropTypes.element (React component)\nReact.PropTypes.instanceOf(MyClass) (an instance of a class)\n...\n\n\nTools\nChrome React Extension => see the component tree!\nAtom JSX Package\n\nJSX linter\nshortcuts\nHTML to JSX converter\n\n\nBest practices\n\nUse state only in the top level and pass data to from parent to children using props.\nKeep business logic outside the component, using \"model\" (see TodoMCV example on Github)\nDocument component properties using propTypes.\n\n## Concepts\n\n### state VS. props\n\n* State and Props are component data.\n* A component can only change its own **state**, using `this.setState()` method, not its props.\n* If the state changes, the component and all children are automatically updated by React that runs the render() function.\n\n### Component example\n\nA simple component with one property (title) and one state (counter). The button updates the counter state using `setState` method. \n\n```\nvar MyComponent = React.createClass({\n  \n  getDefaultProps: function() {\n    return {\n      title: 'My defaut title'\n    };\n  },\n  \n  getInitialState: function() {\n    return {\n      counter: 0 \n    };\n  },\n  \n  onClick: function () {\n    this.setState({\n      counter: this.state.counter + 1\n    });\n  },\n\n  render: function() {\n    return (\n      <div>\n        { this.props.title }\n        { this.state.counter }\n        <button onClick={ this.onClick }>INCREMENT</button>\n      </div>\n    );\n  }\n\n});\n```\n\n### Add a component to the HTML page\n\nThe following JavaScript code includes a component inside a DOM element, passing initial properties using the options variable.\n\n```\nvar options = {\n  title: 'My component'\n};\nReact.render(\n  React.createElement(MyComponent, options),\n  document.getElementById('app')\n);\n```\n\n### Nested components\n\nInside a component, sub-components can be used.\nAny type of data can be passed to a component: arrays, objects, functions... don't forget the curly brackets `{ }` to pass data.\n\n```\n<MySubComponent items={ ['A', 'B'] } onSave={ saveFunction } />\n```\n\n## JSX: tips and tricks\n\nJSX syntax is a mix of JavaScript and HTML. The [JSX online compiler](https://facebook.github.io/react/jsx-compiler.html) can be used to find compilation issues.\n\n### Attributes\n\nHTML attributes use JS syntax (camelCase).\nFor example: use **className**=... instead of class=...\n\n```\n<button className=\"btn btn-default\">\n``` \n\n### IF\n\n```\n{ term == 'yearly' && (\n  <p>10%\u5024\u5f15\u304d<p>\n) }\n```\n\n### IF ELSE\n\n\n```\n{ term == 'monthly' ? (\n  <span>1\u30f6\u6708</span>\n) : (\n  <span>12\u30f6\u6708</span>\n)}\n```\n\nCompact version\n\n```\n<span>{ term == 'monthly' ? '1\u30f6\u6708' : '12\u30f6\u6708' }</span>\n```\n\n### Loops\n\nLoop through items of an array using the Array.map() function and a callback function\n\n```\nrender: function() {\n  var menuItem = function(i) {\n    return(\n      <li>\n        <span>{'STEP' + i }</span>\n      </li>\n    );\n  };\n\n  return(\n\u3000  <ul>\n  \u3000  { [1, 2, 3].map(menuItem) }\n\u3000  </ul>\n  );\n}\n```\n\n### Inline style\n\nStyle property uses JSON syntax.\n\n```\nstyle={{ float: 'right', padding: 10 }}\n```\n\n### Working with jQuery plugins.\nUse the componentDidMount event to initialise jQuery plugins.\n\n```\ncomponentDidMount: function () {\n  var el = this.getDOMNode();\n  var $el = $(el);\n  var $form = $el.find('form');\n  $form.mySuperPlugin();\n}\n```\n\n### White spaces\n\nWhite spaces are stripped. Use `{' '}`to restore white spaces between tags like (between 2 buttons for example).\n\n```\n<button>Cancel</button>\n{' '}\n<button>OK</button>\n```\n\n### Tag syntax /JSX errors\n\n```\n<body>\n  <br>\n  <MyApp>\n</body>\n\n=> Error \"Expected corresponding XJS closing tag for MyApp\"\n```\n\nDon't forget to close all tags! (components and html tags, xhtml syntax)\n\n```\n<body>\n  <br />\n  <MyApp />\n</body>\n\n=> OK!\n```\n\n### Event handlers\n\n#### 1. Normal pattern\n\n```\n  onDeleteAll: function (event) {\n\n  },\n  render: function() {\n    return (\n     <button onClick={ this.onDeleteAll }>Delete All</button>\n    );\n  }\n```\n\n#### 2. How to pass extra data \n\nIn event handlers (onClick=...),  use .bind(null, myData) to pass data to the event handler. \n\n```\n  onEmailAction: function (email, actionCode, event) {\n\n  },\n  render: function() {\n    return (\n      <button \n        onClick={ this.onEmailAction.bind(null, email, 'MARK_AS_READ') }>\n        Mark as read\n      </button>\n    );\n  }\n```\n\n\n\n### [Mixins](http://facebook.github.io/react/docs/reusable-components.html#mixins) \n\nCode can be shared between components using mixins.\n\n```\nvar EmailFilterList = React.createClass({\n  mixins: [FilterListEventMixin],\n  render: function() {\n  ...\n\n```\n\nNote about: in the JavsScript compiled file, mixins have to be loaded **before** the components that use the mixins.\n\n### [Namespaced components](http://facebook.github.io/react/docs/jsx-in-depth.html#namespaced-components)\n\nSub-components can be attributes of a main component.\nFor example, a section used to create an accordion has 2 sub-components: title and body:\n\n```\nvar MySection = React.createClass({...});\nMySection.Title = React.createClass({...});\nMySection.Body = React.createClass({...});\n\n```\n\n```\n<MySection>\n  <MySection.Title>My title</MySection.Title>\n  <MySection.Body>\n    ...\n  </MySection.Body>\n</MySection>\n```\n\n### [Property validation](http://facebook.github.io/react/docs/reusable-components.html#prop-validation)\n\nUse `propTypes` to specify property types: array, function, string...\n\n```\nReact.createClass({\n  propTypes: {\n    myOptionalArray: React.PropTypes.array\n  }\n  ...\n```\n\nAdd `.isRequired` to make the property required.\n\n```\n  myRequiredArray: React.PropTypes.array.isRequired\n```\n\nAvailable types:\n\n* React.PropTypes.array\n* React.PropTypes.bool\n* React.PropTypes.func\n* React.PropTypes.object\n* React.PropTypes.number,\n* React.PropTypes.string\n* React.PropTypes.element (React component)\n* React.PropTypes.instanceOf(MyClass) (an instance of a class)\n* ...\n\n \n## Tools\n\nChrome React Extension => see the component tree!\n\nAtom JSX Package\n\n* JSX linter\n* shortcuts\n* HTML to JSX converter\n\n## Best practices\n\n* Use state only in the top level and pass data to from parent to children using props.\n* Keep business logic outside the component, using \"model\" (see [TodoMCV example on Github](https://github.com/tastejs/todomvc/tree/gh-pages/examples/react))\n* Document component properties using propTypes.\n"}