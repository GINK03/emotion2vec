{"context": "\n\n\u306f\u3058\u3081\u306b\n\u524d\u56de\u6295\u7a3f\u3057\u305f\u300cLinux\u3067\u30e6\u30fc\u30b6\u30fc\u7a7a\u9593\u3067\u52d5\u4f5c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u304c\u30e1\u30e2\u30ea\u3092\u5171\u6709\u3059\u308b\u305f\u3081\u306e\u30c7\u30d0\u30a4\u30b9\u30c9\u30e9\u30a4\u30d0\u3067\u7d39\u4ecb\u3057\u305fudmabuf\u3092 NumPy(Python\u306e\u6570\u5024\u8a08\u7b97\u30e9\u30a4\u30d6\u30e9\u30ea)\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\u5177\u4f53\u7684\u306b\u306f\u3001udmabuf \u3067\u30ab\u30fc\u30cd\u30eb\u5185\u306b\u78ba\u4fdd\u3057\u305f\u30d0\u30c3\u30d5\u30a1\u9818\u57df\u3092 NumPy \u306e memmap \u3067\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u3066\u3001ndarray \u3068\u540c\u3058\u3088\u3046\u306a\u64cd\u4f5c\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001\u305d\u306e\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\n\nudmabuf \u306e\u66f4\u65b0\n\u6b8b\u5ff5\u306a\u304c\u3089 udmabuf \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c version 0.5.0(2016/4/24) \u4ee5\u524d\u3067\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\u3002\nshell# python\nPython 2.7.9 (default, Aug 13 2016, 17:56:53)\n[GCC 4.9.2] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import numpy as np\n>>> m = np.memmap('/dev/udmabuf0', dtype=np.uint8, mode='r+', shape=(100))\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/lib/python2.7/dist-packages/numpy/core/memmap.py\", line 217, in __new__\n    fid.seek(0, 2)\nIOError: [Errno 29] Illegal seek\n\n\u3053\u308c\u306f udmabuf \u304c lseek \u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u306e\u304c\u539f\u56e0\u3067\u3059\u3002\u3069\u3046\u3084\u3089 NumPy \u306e memmap \u306f seek(0,2) \u3092\u4f7f\u3063\u3066\u30d5\u30a1\u30a4\u30eb\u306e\u30b5\u30a4\u30ba\u3092\u5f97\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u304c\u3001\u79c1\u304c udmabuf \u306b lseek() \u3092\u5b9f\u88c5\u3059\u308b\u306e\u3092\u5fd8\u308c\u3066\u3044\u307e\u3057\u305f\u3002\nudmabuf version 0.6.0(2017/1/29) \u3067 lseek \u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f\u306e\u3067\u3001NumPy \u3067 udmabuf \u3092\u4f7f\u3046\u5834\u5408\u306f\u3001umdabuf version 0.6.0 \u4ee5\u964d\u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\nhttps://github.com/ikwzm/udmabuf/releases\n\n\n\u4f7f\u7528\u4f8b\n\nudmabuf \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u307e\u305a\u306f udmabuf \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\u5177\u4f53\u7684\u306a\u65b9\u6cd5\u306f\u3001\u300cLinux\u3067\u30e6\u30fc\u30b6\u30fc\u7a7a\u9593\u3067\u52d5\u4f5c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u304c\u30e1\u30e2\u30ea\u3092\u5171\u6709\u3059\u308b\u305f\u3081\u306e\u30c7\u30d0\u30a4\u30b9\u30c9\u30e9\u30a4\u30d0 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u6b21\u306e\u4f8b\u3067\u306f udmabuf.ko \u3092\u76f4\u63a5 insmod \u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u969b\u3001udmabuf0 \u3068\u3057\u3066 8MByte \u306e\u30d0\u30c3\u30d5\u30a1\u3092\u78ba\u4fdd\u3057\u3066\u3044\u307e\u3059\u3002\nshell# insmod udmabuf.ko udmabuf0=8388608\n[34654.590294] alloc_contig_range: [1f100, 1f900) PFNs busy\n[34654.596154] alloc_contig_range: [1f200, 1fa00) PFNs busy\n[34654.622746] udmabuf udmabuf0: driver installed\n[34654.627153] udmabuf udmabuf0: major number   = 237\n[34654.631889] udmabuf udmabuf0: minor number   = 0\n[34654.636685] udmabuf udmabuf0: phys address   = 0x1f300000\n[34654.642002] udmabuf udmabuf0: buffer size    = 8388608\n\n\nudmabuf_test.py\n\u6b21\u306b python+NumPy \u306b\u3088\u308b\u7c21\u5358\u306a\u30c6\u30b9\u30c8\u3092\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u793a\u3057\u307e\u3059\u3002\n\nudmabuf_test.py\nimport numpy as np\nimport time\n\nclass Udmabuf:\n    \"\"\"A simple udmabuf class\"\"\"\n\n    def __init__(self, name):\n        self.name        = name\n        self.device_name = '/dev/%s'               % self.name\n        self.class_path  = '/sys/class/udmabuf/%s' % self.name\n        for line in open(self.class_path + '/size'):\n            self.buf_size = int(line)\n            break\n\n    def memmap(self, dtype, shape):\n        self.item_size = np.dtype(dtype).itemsize\n        self.mem_map   = np.memmap(self.device_name, dtype=dtype, mode='r+', shape=shape)\n\ndef test_1(a):\n    for i in range (0,9):\n        a *= 0\n        a += 0x31\n\nif __name__ == '__main__':\n    udmabuf      = Udmabuf('udmabuf0')\n    test_dtype   = np.uint8\n    test_size    = udmabuf.buf_size/(np.dtype(test_dtype).itemsize)\n    udmabuf.memmap(dtype=test_dtype, shape=(test_size))\n    comparison   = np.zeros(test_size, dtype=test_dtype)\n    print (\"test_size  : %d\" % test_size)\n    start        = time.time()\n    test_1(udmabuf.mem_map)\n    elapsed_time = time.time() - start\n    print (\"udmabuf0   : elapsed_time:{0}\".format(elapsed_time)) + \"[sec]\"\n    start        = time.time()\n    test_1(comparison)\n    elapsed_time = time.time() - start\n    print (\"comparison : elapsed_time:{0}\".format(elapsed_time)) + \"[sec]\"\n    if np.array_equal(udmabuf.mem_map, comparison):\n        print (\"udmabuf0 == comparison : OK\")\n    else:\n        print (\"udmabuf0 != comparison : NG\")\n\n\n\n\u4e0a\u8a18\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u306f\u3001udmabuf \u3067\u30ab\u30fc\u30cd\u30eb\u5185\u306b\u78ba\u4fdd\u3057\u305f\u30d0\u30c3\u30d5\u30a1\u9818\u57df\u3092 numpy.memmap \u3067 python \u304b\u3089\u4f7f\u3048\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\nnumpy.memmap \u3067\u751f\u6210\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f numpy.ndarray \u3068\u540c\u69d8\u306e\u64cd\u4f5c\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u4e0a\u8a18\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u306f a *=0 \u3068 a += 0x31 \u309210\u56de\u7e70\u308a\u8fd4\u3057\u3066\u3001\u5b9f\u884c\u6642\u9593\u3092\u6e2c\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5b9f\u884c\u7d50\u679c\n\u524d\u7bc0\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306a\u7d50\u679c\u306b\u306a\u308a\u307e\u3057\u305f\u3002\nshell# python udmabuf_test.py\ntest_size  : 8388608\nudmabuf0   : elapsed_time:1.53304982185[sec]\ncomparison : elapsed_time:1.536673069[sec]\nudmabuf0 == comparison : OK\n\nudmabuf0(\u30ab\u30fc\u30cd\u30eb\u5185\u306b\u78ba\u4fdd\u3057\u305f\u30d0\u30c3\u30d5\u30a1\u9818\u57df)\u306b\u5bfe\u3059\u308b\u64cd\u4f5c\u3068\u3001ndarray \u3067\u540c\u3058\u64cd\u4f5c\u3092\u884c\u3063\u305f\u5834\u5408(comparison)\u306e\u5b9f\u884c\u6642\u9593\u306f\u307b\u307c\u540c\u3058\u3067\u3057\u305f\u3002\u3059\u306a\u308f\u3061 udmabuf0 \u3082 CPU \u30ad\u30e3\u30c3\u30b7\u30e5\u304c\u6709\u52b9\u306b\u50cd\u3044\u3066\u3044\u308b\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n\u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3057\u305f\u5f8c\u3067\u3001udmabuf0 \u306e\u5185\u5bb9\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\nshell# dd if=/dev/udmabuf0 of=udmabuf0.bin bs=8388608\n1+0 records in\n1+0 records out\n8388608 bytes (8.4 MB) copied, 0.151531 s, 55.4 MB/s\nshell# \nshell# od -t x1 udmabuf0.bin\n0000000 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31\n*\n40000000\n\n\u30b9\u30af\u30ea\u30d7\u30c8\u5b9f\u884c\u5f8c\u3082\u3001\u5b9f\u884c\u3057\u305f\u7d50\u679c\u304c\u30d0\u30c3\u30d5\u30a1\u306b\u6b8b\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002\n\u5ff5\u306e\u305f\u3081\u3001NumPy \u3067\u3082\u8aad\u3081\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002\nshell# python\nPython 2.7.9 (default, Aug 13 2016, 17:56:53)\n[GCC 4.9.2] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import numpy as np\n>>> a = np.memmap('/dev/udmabuf0', dtype=np.uint8, mode='r+', shape=(8388608))\n>>> a\nmemmap([49, 49, 49, ..., 49, 49, 49], dtype=uint8)\n>>> a.itemsize\n1\n>>> a.size\n8388608\n>>>\n\n\n\u307e\u3068\u3081\nudmabuf \u3092\u4f7f\u3063\u3066\u30ab\u30fc\u30cd\u30eb\u5185\u306b\u78ba\u4fdd\u3057\u305f\u30d0\u30c3\u30d5\u30a1\u9818\u57df\u3092 python \u306e NumPy \u3067\u64cd\u4f5c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3053\u308c\u306b\u3088\u308a C \u3067\u66f8\u304b\u308c\u305f\u30b3\u30fc\u30c9\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3046\u3053\u3068\u7121\u304f\u3001python \u3060\u3051\u3067 \u76f4\u63a5 FPGA \u306e PL(Programmable Logic)\u90e8\u3092\u6271\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nFPGA \u306e PL(Programmable Logic)\u90e8 \u304c NumPy \u5f62\u5f0f\u306b\u5bfe\u5fdc\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308c\u3070\u3001\u4eca\u3088\u308a\u3082\u3082\u3046\u5c11\u3057\u7c21\u5358\u306b CPU(Python+NumPy) \u3068 FPGA \u30a2\u30af\u30bb\u30e9\u30ec\u30fc\u30bf\u3068\u304c\u9023\u643a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002\n## \u306f\u3058\u3081\u306b\n\n\u524d\u56de\u6295\u7a3f\u3057\u305f[\u300cLinux\u3067\u30e6\u30fc\u30b6\u30fc\u7a7a\u9593\u3067\u52d5\u4f5c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u304c\u30e1\u30e2\u30ea\u3092\u5171\u6709\u3059\u308b\u305f\u3081\u306e\u30c7\u30d0\u30a4\u30b9\u30c9\u30e9\u30a4\u30d0](http://qiita.com/ikwzm/items/cc1bb33ff43a491440ea)\u3067\u7d39\u4ecb\u3057\u305f[udmabuf](https://github.com/ikwzm/udmabuf)\u3092 NumPy(Python\u306e\u6570\u5024\u8a08\u7b97\u30e9\u30a4\u30d6\u30e9\u30ea)\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\u5177\u4f53\u7684\u306b\u306f\u3001udmabuf \u3067\u30ab\u30fc\u30cd\u30eb\u5185\u306b\u78ba\u4fdd\u3057\u305f\u30d0\u30c3\u30d5\u30a1\u9818\u57df\u3092 NumPy \u306e memmap \u3067\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u3066\u3001ndarray \u3068\u540c\u3058\u3088\u3046\u306a\u64cd\u4f5c\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001\u305d\u306e\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\n\n## udmabuf \u306e\u66f4\u65b0\n\n\u6b8b\u5ff5\u306a\u304c\u3089 udmabuf \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c version 0.5.0(2016/4/24) \u4ee5\u524d\u3067\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\u3002\n\n```\nshell# python\nPython 2.7.9 (default, Aug 13 2016, 17:56:53)\n[GCC 4.9.2] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import numpy as np\n>>> m = np.memmap('/dev/udmabuf0', dtype=np.uint8, mode='r+', shape=(100))\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/lib/python2.7/dist-packages/numpy/core/memmap.py\", line 217, in __new__\n    fid.seek(0, 2)\nIOError: [Errno 29] Illegal seek\n```\n\n\u3053\u308c\u306f udmabuf \u304c lseek \u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u306e\u304c\u539f\u56e0\u3067\u3059\u3002\u3069\u3046\u3084\u3089 NumPy \u306e memmap \u306f seek(0,2) \u3092\u4f7f\u3063\u3066\u30d5\u30a1\u30a4\u30eb\u306e\u30b5\u30a4\u30ba\u3092\u5f97\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u304c\u3001\u79c1\u304c udmabuf \u306b lseek() \u3092\u5b9f\u88c5\u3059\u308b\u306e\u3092\u5fd8\u308c\u3066\u3044\u307e\u3057\u305f\u3002\nudmabuf version 0.6.0(2017/1/29) \u3067 lseek \u306b\u5bfe\u5fdc\u3057\u307e\u3057\u305f\u306e\u3067\u3001NumPy \u3067 udmabuf \u3092\u4f7f\u3046\u5834\u5408\u306f\u3001umdabuf version 0.6.0 \u4ee5\u964d\u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\n* [https://github.com/ikwzm/udmabuf/releases](https://github.com/ikwzm/udmabuf/releases)\n\n## \u4f7f\u7528\u4f8b\n\n### udmabuf \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n\u307e\u305a\u306f udmabuf \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\u5177\u4f53\u7684\u306a\u65b9\u6cd5\u306f\u3001[\u300cLinux\u3067\u30e6\u30fc\u30b6\u30fc\u7a7a\u9593\u3067\u52d5\u4f5c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u304c\u30e1\u30e2\u30ea\u3092\u5171\u6709\u3059\u308b\u305f\u3081\u306e\u30c7\u30d0\u30a4\u30b9\u30c9\u30e9\u30a4\u30d0](http://qiita.com/ikwzm/items/cc1bb33ff43a491440ea) \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u6b21\u306e\u4f8b\u3067\u306f udmabuf.ko \u3092\u76f4\u63a5 insmod \u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u969b\u3001udmabuf0 \u3068\u3057\u3066 8MByte \u306e\u30d0\u30c3\u30d5\u30a1\u3092\u78ba\u4fdd\u3057\u3066\u3044\u307e\u3059\u3002\n\n```\nshell# insmod udmabuf.ko udmabuf0=8388608\n[34654.590294] alloc_contig_range: [1f100, 1f900) PFNs busy\n[34654.596154] alloc_contig_range: [1f200, 1fa00) PFNs busy\n[34654.622746] udmabuf udmabuf0: driver installed\n[34654.627153] udmabuf udmabuf0: major number   = 237\n[34654.631889] udmabuf udmabuf0: minor number   = 0\n[34654.636685] udmabuf udmabuf0: phys address   = 0x1f300000\n[34654.642002] udmabuf udmabuf0: buffer size    = 8388608\n```\n\n### udmabuf_test.py\n\n\u6b21\u306b python+NumPy \u306b\u3088\u308b\u7c21\u5358\u306a\u30c6\u30b9\u30c8\u3092\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u793a\u3057\u307e\u3059\u3002\n\n```python:udmabuf_test.py\nimport numpy as np\nimport time\n\nclass Udmabuf:\n    \"\"\"A simple udmabuf class\"\"\"\n\n    def __init__(self, name):\n        self.name        = name\n        self.device_name = '/dev/%s'               % self.name\n        self.class_path  = '/sys/class/udmabuf/%s' % self.name\n        for line in open(self.class_path + '/size'):\n            self.buf_size = int(line)\n            break\n\n    def memmap(self, dtype, shape):\n        self.item_size = np.dtype(dtype).itemsize\n        self.mem_map   = np.memmap(self.device_name, dtype=dtype, mode='r+', shape=shape)\n\ndef test_1(a):\n    for i in range (0,9):\n        a *= 0\n        a += 0x31\n\nif __name__ == '__main__':\n    udmabuf      = Udmabuf('udmabuf0')\n    test_dtype   = np.uint8\n    test_size    = udmabuf.buf_size/(np.dtype(test_dtype).itemsize)\n    udmabuf.memmap(dtype=test_dtype, shape=(test_size))\n    comparison   = np.zeros(test_size, dtype=test_dtype)\n    print (\"test_size  : %d\" % test_size)\n    start        = time.time()\n    test_1(udmabuf.mem_map)\n    elapsed_time = time.time() - start\n    print (\"udmabuf0   : elapsed_time:{0}\".format(elapsed_time)) + \"[sec]\"\n    start        = time.time()\n    test_1(comparison)\n    elapsed_time = time.time() - start\n    print (\"comparison : elapsed_time:{0}\".format(elapsed_time)) + \"[sec]\"\n    if np.array_equal(udmabuf.mem_map, comparison):\n        print (\"udmabuf0 == comparison : OK\")\n    else:\n        print (\"udmabuf0 != comparison : NG\")\n    \n```\n\n\u4e0a\u8a18\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u306f\u3001udmabuf \u3067\u30ab\u30fc\u30cd\u30eb\u5185\u306b\u78ba\u4fdd\u3057\u305f\u30d0\u30c3\u30d5\u30a1\u9818\u57df\u3092 numpy.memmap \u3067 python \u304b\u3089\u4f7f\u3048\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\nnumpy.memmap \u3067\u751f\u6210\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f numpy.ndarray \u3068\u540c\u69d8\u306e\u64cd\u4f5c\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u4e0a\u8a18\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u306f a *=0 \u3068 a += 0x31 \u309210\u56de\u7e70\u308a\u8fd4\u3057\u3066\u3001\u5b9f\u884c\u6642\u9593\u3092\u6e2c\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n### \u5b9f\u884c\u7d50\u679c\n\n\u524d\u7bc0\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306a\u7d50\u679c\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n```\nshell# python udmabuf_test.py\ntest_size  : 8388608\nudmabuf0   : elapsed_time:1.53304982185[sec]\ncomparison : elapsed_time:1.536673069[sec]\nudmabuf0 == comparison : OK\n```\n\nudmabuf0(\u30ab\u30fc\u30cd\u30eb\u5185\u306b\u78ba\u4fdd\u3057\u305f\u30d0\u30c3\u30d5\u30a1\u9818\u57df)\u306b\u5bfe\u3059\u308b\u64cd\u4f5c\u3068\u3001ndarray \u3067\u540c\u3058\u64cd\u4f5c\u3092\u884c\u3063\u305f\u5834\u5408(comparison)\u306e\u5b9f\u884c\u6642\u9593\u306f\u307b\u307c\u540c\u3058\u3067\u3057\u305f\u3002\u3059\u306a\u308f\u3061 udmabuf0 \u3082 CPU \u30ad\u30e3\u30c3\u30b7\u30e5\u304c\u6709\u52b9\u306b\u50cd\u3044\u3066\u3044\u308b\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n\n\u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3057\u305f\u5f8c\u3067\u3001udmabuf0 \u306e\u5185\u5bb9\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\n```\nshell# dd if=/dev/udmabuf0 of=udmabuf0.bin bs=8388608\n1+0 records in\n1+0 records out\n8388608 bytes (8.4 MB) copied, 0.151531 s, 55.4 MB/s\nshell# \nshell# od -t x1 udmabuf0.bin\n0000000 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31\n*\n40000000\n```\n\n\u30b9\u30af\u30ea\u30d7\u30c8\u5b9f\u884c\u5f8c\u3082\u3001\u5b9f\u884c\u3057\u305f\u7d50\u679c\u304c\u30d0\u30c3\u30d5\u30a1\u306b\u6b8b\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002\n\u5ff5\u306e\u305f\u3081\u3001NumPy \u3067\u3082\u8aad\u3081\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002\n\n```\nshell# python\nPython 2.7.9 (default, Aug 13 2016, 17:56:53)\n[GCC 4.9.2] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import numpy as np\n>>> a = np.memmap('/dev/udmabuf0', dtype=np.uint8, mode='r+', shape=(8388608))\n>>> a\nmemmap([49, 49, 49, ..., 49, 49, 49], dtype=uint8)\n>>> a.itemsize\n1\n>>> a.size\n8388608\n>>>\n```\n\n\n## \u307e\u3068\u3081\n\nudmabuf \u3092\u4f7f\u3063\u3066\u30ab\u30fc\u30cd\u30eb\u5185\u306b\u78ba\u4fdd\u3057\u305f\u30d0\u30c3\u30d5\u30a1\u9818\u57df\u3092 python \u306e NumPy \u3067\u64cd\u4f5c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3053\u308c\u306b\u3088\u308a C \u3067\u66f8\u304b\u308c\u305f\u30b3\u30fc\u30c9\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3046\u3053\u3068\u7121\u304f\u3001python \u3060\u3051\u3067 \u76f4\u63a5 FPGA \u306e PL(Programmable Logic)\u90e8\u3092\u6271\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nFPGA \u306e PL(Programmable Logic)\u90e8 \u304c NumPy \u5f62\u5f0f\u306b\u5bfe\u5fdc\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308c\u3070\u3001\u4eca\u3088\u308a\u3082\u3082\u3046\u5c11\u3057\u7c21\u5358\u306b CPU(Python+NumPy) \u3068 FPGA \u30a2\u30af\u30bb\u30e9\u30ec\u30fc\u30bf\u3068\u304c\u9023\u643a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002\n\n\n\n", "tags": ["FPGA", "zynq", "Linux", "numpy", "Python"]}