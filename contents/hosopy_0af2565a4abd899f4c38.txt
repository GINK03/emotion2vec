{"context": "\n\nAbout\nJava\u3067HTTP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u30c6\u30b9\u30c8\u3092\u66f8\u3053\u3046\u3068\u3057\u3066\u3044\u305f\u3089\u3001okhttp/mockwebserver\u306a\u308b\u3082\u306e\u3092\u898b\u3064\u3051\u305f\u306e\u3067\u3059\u304c\u3001\u3053\u308c\u304c\u4fbf\u5229\u3060\u3063\u305f\u306e\u3067\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u4e00\u90e8\u306f\u3001GitHub\u306b\u3042\u308a\u307e\u3059\u3002\nhttps://github.com/hosopy/OkHttpMockSample\n\n\u984c\u6750\nRestAPI\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u5b9f\u88c5\u306bRetrofit\u3092\u5229\u7528\u3059\u308b\u72b6\u6cc1\u3092\u60f3\u5b9a\u3057\u3001\u30b5\u30f3\u30d7\u30eb\u984c\u6750\u3068\u3057\u3066GitHub API\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u8003\u3048\u307e\u3059\u3002\n\nGitHubService.java\npublic interface GitHubService {\n    /**\n     * \u6307\u5b9a\u3055\u308c\u305f\u30e6\u30fc\u30b6\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u30ea\u30b9\u30c8\u3092\u53d6\u5f97.\n     * \n     * @param user\n     * @reeturn Call<List<Repository>>\n     */\n    @GET(\"/users/{user}/repos\")\n    Call<List<Repository>> listRepos(@Path(\"user\") String user);\n}\n\n\nGitHubService\u306e\u4f7f\u3044\u65b9\u3068\u3057\u3066\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u5f53\u7136\u3067\u3059\u304c\u3001\u672c\u7269\u306eGitHub API\u306eURL\u3092Retrofit\u306ebaseUrl\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002\nfinal Retrofit retrofit = new Retrofit.Builder()\n                .baseUrl(\"https://api.github.com/\")\n                .addConverterFactory(GsonConverterFactory.create())\n                .build();\nfinal GitHubService service = retrofit.create(GitHubService.class);\nfinal Call<List<Repository>> listRepos = service.listRepos(\"hosopy\");\n\nlistRepos.enqueue(new Callback<List<Repository>>() {\n    @Override\n    public void onResponse(Response<List<Repository>> response, Retrofit retrofit) {\n    }\n\n    @Override\n    public void onFailure(Throwable throwable) {\n    }\n});\n\n\nGitHubService\u3092\u30c6\u30b9\u30c8\u3059\u308b\nJUnit\u3067GitHubService\u306e\u30c6\u30b9\u30c8\u3092\u66f8\u304d\u305f\u3044\u3068\u3057\u307e\u3059\u3002\n\u30c6\u30b9\u30c8\u306a\u306e\u3067\u3001\u672c\u7269\u306eGitHub API\u306b\u30a2\u30af\u30bb\u30b9\u3055\u305b\u308b\u3053\u3068\u306f\u907f\u3051\u305f\u3044\u306e\u3067\u3059\u304c\u3001MockWebServer\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001Web\u30b5\u30fc\u30d0\u306e\u30e2\u30c3\u30af\u3092\u7528\u610f\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\nMockWebServer\u3092\u5229\u7528\u3057\u3066\u3001GitHubService\u3092\u30c6\u30b9\u30c8\u3059\u308b\u30b3\u30fc\u30c9\u306f\u3053\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n(Matcher\u306bhamcrest-all\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059)\n\nGitHubServiceTest.java\n@RunWith(JUnit4.class)\npublic class GitHubServiceTest extends TestCase {\n\n    private static final int TIMEOUT = 10000;\n\n    @Test(timeout = TIMEOUT)\n    public void testListReposSuccess() throws IOException, InterruptedException {\n        final BlockingQueue<String> events = new LinkedBlockingQueue();\n\n        // MockWebServer\u3068MockResponse\u3092\u8a2d\u5b9a\n        final MockWebServer mockWebServer = new MockWebServer();\n        final MockResponse mockResponse = new MockResponse()\n                .setResponseCode(200)\n                .setHeader(\"Content-Type\", \"application/json\")\n                .setBody(\"[{\\\"name\\\":\\\"Bolts-iOS-Sample\\\", \\\"html_url\\\":\\\"https://github.com/hosopy/Bolts-iOS-Sample\\\"},\" +\n                        \"{\\\"name\\\":\\\"dotfiles\\\",\\\"html_url\\\":\\\"https://github.com/hosopy/dotfiles\\\"}]\");\n        mockWebServer.enqueue(mockResponse);\n        mockWebServer.start();\n\n        // baseUrl\u306bMockWebServer\u306eURL\u3092\u8a2d\u5b9a\n        final Retrofit retrofit = new Retrofit.Builder()\n                .baseUrl(mockWebServer.url(\"/\").toString())\n                .addConverterFactory(GsonConverterFactory.create())\n                .build();\n        final GitHubService service = retrofit.create(GitHubService.class);\n        final Call<List<Repository>> listRepos = service.listRepos(\"hosopy\");\n\n        // \u30c6\u30b9\u30c8\n        listRepos.enqueue(new Callback<List<Repository>>() {\n            @Override\n            public void onResponse(Response<List<Repository>> response, Retrofit retrofit) {\n                for (Repository repository : response.body()) {\n                    events.offer(repository.getName());\n                    events.offer(repository.getHtmlUrl());\n                }\n            }\n\n            @Override\n            public void onFailure(Throwable throwable) {\n            }\n        });\n\n        assertThat(events.take(), is(\"Bolts-iOS-Sample\"));\n        assertThat(events.take(), is(\"https://github.com/hosopy/Bolts-iOS-Sample\"));\n        assertThat(events.take(), is(\"dotfiles\"));\n        assertThat(events.take(), is(\"https://github.com/hosopy/dotfiles\"));\n\n        mockWebServer.shutdown();\n    }\n}\n\n\nMockWebServer\u306f\u4ed6\u306b\u3082\u8272\u3005\u306a\u4f7f\u3044\u65b9\u304c\u51fa\u6765\u308b\u3088\u3046\u306a\u306e\u3067\u3001GitHub\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u307f\u3066\u4e0b\u3055\u3044\u3002\n# About\n\nJava\u3067HTTP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u30c6\u30b9\u30c8\u3092\u66f8\u3053\u3046\u3068\u3057\u3066\u3044\u305f\u3089\u3001[okhttp/mockwebserver](https://github.com/square/okhttp/tree/master/mockwebserver)\u306a\u308b\u3082\u306e\u3092\u898b\u3064\u3051\u305f\u306e\u3067\u3059\u304c\u3001\u3053\u308c\u304c\u4fbf\u5229\u3060\u3063\u305f\u306e\u3067\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u4e00\u90e8\u306f\u3001GitHub\u306b\u3042\u308a\u307e\u3059\u3002\n\nhttps://github.com/hosopy/OkHttpMockSample\n\n# \u984c\u6750\n\nRestAPI\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u5b9f\u88c5\u306b[Retrofit](http://square.github.io/retrofit/)\u3092\u5229\u7528\u3059\u308b\u72b6\u6cc1\u3092\u60f3\u5b9a\u3057\u3001\u30b5\u30f3\u30d7\u30eb\u984c\u6750\u3068\u3057\u3066GitHub API\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u8003\u3048\u307e\u3059\u3002\n\n```java:GitHubService.java\npublic interface GitHubService {\n    /**\n     * \u6307\u5b9a\u3055\u308c\u305f\u30e6\u30fc\u30b6\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u30ea\u30b9\u30c8\u3092\u53d6\u5f97.\n     * \n     * @param user\n     * @reeturn Call<List<Repository>>\n     */\n    @GET(\"/users/{user}/repos\")\n    Call<List<Repository>> listRepos(@Path(\"user\") String user);\n}\n```\n\nGitHubService\u306e\u4f7f\u3044\u65b9\u3068\u3057\u3066\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u5f53\u7136\u3067\u3059\u304c\u3001\u672c\u7269\u306eGitHub API\u306eURL\u3092Retrofit\u306ebaseUrl\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n```java\nfinal Retrofit retrofit = new Retrofit.Builder()\n                .baseUrl(\"https://api.github.com/\")\n                .addConverterFactory(GsonConverterFactory.create())\n                .build();\nfinal GitHubService service = retrofit.create(GitHubService.class);\nfinal Call<List<Repository>> listRepos = service.listRepos(\"hosopy\");\n\nlistRepos.enqueue(new Callback<List<Repository>>() {\n    @Override\n    public void onResponse(Response<List<Repository>> response, Retrofit retrofit) {\n    }\n\n    @Override\n    public void onFailure(Throwable throwable) {\n    }\n});\n```\n\n# GitHubService\u3092\u30c6\u30b9\u30c8\u3059\u308b\n\nJUnit\u3067GitHubService\u306e\u30c6\u30b9\u30c8\u3092\u66f8\u304d\u305f\u3044\u3068\u3057\u307e\u3059\u3002\n\n\u30c6\u30b9\u30c8\u306a\u306e\u3067\u3001\u672c\u7269\u306eGitHub API\u306b\u30a2\u30af\u30bb\u30b9\u3055\u305b\u308b\u3053\u3068\u306f\u907f\u3051\u305f\u3044\u306e\u3067\u3059\u304c\u3001MockWebServer\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001Web\u30b5\u30fc\u30d0\u306e\u30e2\u30c3\u30af\u3092\u7528\u610f\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\nMockWebServer\u3092\u5229\u7528\u3057\u3066\u3001GitHubService\u3092\u30c6\u30b9\u30c8\u3059\u308b\u30b3\u30fc\u30c9\u306f\u3053\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n(Matcher\u306bhamcrest-all\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059)\n\n```java:GitHubServiceTest.java\n@RunWith(JUnit4.class)\npublic class GitHubServiceTest extends TestCase {\n\n    private static final int TIMEOUT = 10000;\n\n    @Test(timeout = TIMEOUT)\n    public void testListReposSuccess() throws IOException, InterruptedException {\n        final BlockingQueue<String> events = new LinkedBlockingQueue();\n\n        // MockWebServer\u3068MockResponse\u3092\u8a2d\u5b9a\n        final MockWebServer mockWebServer = new MockWebServer();\n        final MockResponse mockResponse = new MockResponse()\n                .setResponseCode(200)\n                .setHeader(\"Content-Type\", \"application/json\")\n                .setBody(\"[{\\\"name\\\":\\\"Bolts-iOS-Sample\\\", \\\"html_url\\\":\\\"https://github.com/hosopy/Bolts-iOS-Sample\\\"},\" +\n                        \"{\\\"name\\\":\\\"dotfiles\\\",\\\"html_url\\\":\\\"https://github.com/hosopy/dotfiles\\\"}]\");\n        mockWebServer.enqueue(mockResponse);\n        mockWebServer.start();\n\n        // baseUrl\u306bMockWebServer\u306eURL\u3092\u8a2d\u5b9a\n        final Retrofit retrofit = new Retrofit.Builder()\n                .baseUrl(mockWebServer.url(\"/\").toString())\n                .addConverterFactory(GsonConverterFactory.create())\n                .build();\n        final GitHubService service = retrofit.create(GitHubService.class);\n        final Call<List<Repository>> listRepos = service.listRepos(\"hosopy\");\n\n        // \u30c6\u30b9\u30c8\n        listRepos.enqueue(new Callback<List<Repository>>() {\n            @Override\n            public void onResponse(Response<List<Repository>> response, Retrofit retrofit) {\n                for (Repository repository : response.body()) {\n                    events.offer(repository.getName());\n                    events.offer(repository.getHtmlUrl());\n                }\n            }\n\n            @Override\n            public void onFailure(Throwable throwable) {\n            }\n        });\n\n        assertThat(events.take(), is(\"Bolts-iOS-Sample\"));\n        assertThat(events.take(), is(\"https://github.com/hosopy/Bolts-iOS-Sample\"));\n        assertThat(events.take(), is(\"dotfiles\"));\n        assertThat(events.take(), is(\"https://github.com/hosopy/dotfiles\"));\n\n        mockWebServer.shutdown();\n    }\n}\n```\n\nMockWebServer\u306f\u4ed6\u306b\u3082\u8272\u3005\u306a\u4f7f\u3044\u65b9\u304c\u51fa\u6765\u308b\u3088\u3046\u306a\u306e\u3067\u3001[GitHub\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](https://github.com/square/okhttp/tree/master/mockwebserver)\u3092\u53c2\u7167\u3057\u3066\u307f\u3066\u4e0b\u3055\u3044\u3002\n", "tags": ["Java", "OkHttp", "JUnit"]}