{"context": " More than 1 year has passed since last update.\u8aad\u307f\u8fbc\u307f(\u691c\u7d22)\u51e6\u7406\u306e\u65b9\u304c\u5727\u5012\u7684\u306b\u591a\u3044\u3068\u4e88\u60f3\u3055\u308c\u308b\u3088\u3046\u306aKVS\u7684\u306a\u30d7\u30ed\u30bb\u30b9\u3092\u3001Erlang/OTP\u3067\u3069\u3046\u3084\u3063\u3066\u52b9\u7387\u7684\u306b(\u30b9\u30b1\u30fc\u30eb\u30a2\u30c3\u30d7\u3059\u308b\u3088\u3046\u306b)\u5b9f\u88c5\u3059\u308b\u304b\u3002\n\u5c11\u3057\u524d\u306blocal\u3068\u3044\u3046\u3001\u540d\u524d\u306e\u30b9\u30b3\u30fc\u30d7\u3092\u9650\u5b9a\u53ef\u80fd\u306a\u30d7\u30ed\u30bb\u30b9\u540d\u7ba1\u7406\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5b9f\u88c5\u3057\u305f\u6642\u306b\u63a1\u7528\u3057\u305f\u65b9\u6cd5\u306e\u30e1\u30e2\u3002\n\n\u7d50\u8ad6\n\u7d50\u8ad6\u3092\u5148\u306b\u66f8\u3044\u3066\u3057\u307e\u3046\u3068\u540d\u524d\u4ed8\u304d\u306eETS\u3092\u4f7f\u3046\u306e\u304c\u826f\u3044\u3002\nETS\u3092\u540d\u524d\u4ed8\u304d(and access=protected)\u306b\u3057\u3066\u304a\u304f\u3053\u3068\u3067\u3001\u30c6\u30fc\u30d6\u30eb\u306e\u6240\u6709\u30d7\u30ed\u30bb\u30b9\u3092\u7d4c\u7531\u305b\u305a\u306b\u8aad\u307f\u8fbc\u307f\u51e6\u7406\u3092\u884c\u3046\u3053\u3068\u304c\u53ef\u80fd\u3068\u306a\u308b\u3002\n\u305d\u306e\u305f\u3081\u3001\u8907\u6570\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30d7\u30ed\u30bb\u30b9\u304b\u3089\u540c\u6642\u306b\u8981\u6c42\u304c\u6765\u305f\u5834\u5408\u3067\u3082\u3001\u305d\u308c\u3089\u304c(\u30e1\u30c3\u30bb\u30fc\u30b8\u30d1\u30c3\u30b7\u30f3\u30b0\u3092\u901a\u3057\u3066)\u76f4\u5217\u5316\u3055\u308c\u308b\u3053\u3068\u306a\u304f\u3001\u4e26\u5217\u7684\u306b\u51e6\u7406\u3055\u308c\u308b\u3053\u3068\u304c\u671f\u5f85\u3067\u304d\u308b\u3002\n\u5b9f\u969b\u306b\u3001\u4eca\u56de\u6e2c\u5b9a\u3057\u305f\u7bc4\u56f2\u3067\u306f\u3001ETS\u3092\u4f7f\u3046\u3053\u3068\u3067\u8aad\u307f\u8fbc\u307f\u51e6\u7406\u306f\u30b3\u30a2\u6570\u306b\u5bfe\u3057\u3066\u307b\u307c\u7dda\u5f62\u306b\u30b9\u30b1\u30fc\u30eb\u3057\u3066\u3044\u305f\u3002\n\n\u5b9f\u88c5\u4f8b\u3068\u6027\u80fd\u6bd4\u8f03\n\u4ee5\u964d\u306f\u3001\u5b9f\u969b\u306bETS\u3092\u4f7f\u3063\u305fKVS\u7684\u30d7\u30ed\u30bb\u30b9\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u3066\u3044\u304f\u3002\n\u307e\u305f\u3001\u6bd4\u8f03\u5bfe\u8c61\u3068\u3057\u3066dict\u3092\u7528\u3044\u305f\u7248\u306e\u5b9f\u88c5\u304a\u3088\u3073\u6027\u80fd\u6e2c\u5b9a\u7d50\u679c\u3082\u8a18\u8f09\u3059\u308b\u3002\n\n\u5b9f\u884c\u74b0\u5883\n\nEC2\u306ec3.8xlarge\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9(vCPU=32)\u3092\u4f7f\u7528\n\n\n16\u30b3\u30a2/32\u30b9\u30ec\u30c3\u30c9(\u304a\u305d\u3089\u304f)\n\n\nOS: CentOS6.4-64bit\nErlang/OTP: 17.3, rpm\n\n\n\n\u5358\u4f53\u6027\u80fd\n\u307e\u305a\u306fETS\u3068dict\u306e\u5358\u4f53\u6027\u80fd\u306e\u6bd4\u8f03\u304b\u3089\u59cb\u3081\u308b\u3002\nETS\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092dict\u306b\u5408\u308f\u305b\u308b\u305f\u3081\u306b\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30e9\u30c3\u30d1\u30fc\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u7528\u610f\u3002\n\nets_map.erl\n-module(ets_map).\n\n-export([new/0, store/3, find/2]). % dict\u306b\u5408\u308f\u305b\u305f\u516c\u958b\u95a2\u6570\n-export([new/1]). % \u540d\u524d\u4ed8\u304d\u30c6\u30fc\u30d6\u30eb\u751f\u6210\u7528\u95a2\u6570\n\n%% @doc \u540d\u524d\u306a\u3057\u30c6\u30fc\u30d6\u30eb\u3092\u751f\u6210\u3059\u308b (\u5358\u4f53\u6027\u80fd\u6e2c\u5b9a\u7528)\n-spec new() -> ets:tid().\nnew() ->\n    ets:new(?MODULE, [set, protected, {read_concurrency, true}]).\n\n%% @doc \u540d\u524d\u4ed8\u304d\u30bf\u30fc\u30d6\u30eb\u3092\u751f\u6210\u3059\u308b (\u30b5\u30fc\u30d0\u6027\u80fd\u6e2c\u5b9a\u7528)\n-spec new(Name::atom()) -> ets:tid().\nnew(Name) ->\n    ets:new(Name, [named_table, set, protected, {read_concurrency, true}]).\n\n-spec store(Key::term(), Value::term(), ets:tid()) -> ets:tid().\nstore(Key, Value, Map) ->\n    true = ets:insert(Map, {Key, Value}),\n    Map.\n\n-spec find(Key::term(), ets:tid()) -> {ok, Value::term()} | error.\nfind(Key, Map) ->\n    case ets:lookup(Map, Key) of\n        [{_, Value}] -> {ok, Value};\n        []           -> error\n    end.\n\n\n\u6e2c\u5b9a\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u7528\u3059\u308b\u3002\n\nbench_serial.erl\n-module(bench_serial).\n\n-export([bench/3]).\n-export([find_loop/4]). % \u5f8c\u3067\u53c2\u7167\u3057\u305f\u3044\u306e\u3067\u516c\u958b\u95a2\u6570\u306b\u3057\u3066\u304a\u304f\n\n%% @doc \u30d9\u30f3\u30c1\u30de\u30fc\u30af\u95a2\u6570\n%%\n%% \u4e00\u79d2\u9593\u306b\u4f55\u56de\u8aad\u307f\u8fbc\u307f(\u691c\u7d22)\u51e6\u7406\u3092\u884c\u3048\u308b\u304b\u3092\u8fd4\u3059\n-spec bench(module(), non_neg_integer(), non_neg_integer()) -> ReadsPerSecond::non_neg_integer().\nbench(Module, EntryCount, ReadCount) ->\n    %% \u6700\u521d\u306b\u8981\u7d20\u3092\u767b\u9332\u3057\u3066\u304a\u304f\n    Map =\n        lists:foldl(\n          fun (I, Acc) -> Module:store(I, I, Acc) end,\n          Module:new(),\n          lists:seq(0, EntryCount - 1)),\n\n    %% \u8aad\u307f\u8fbc\u307f\u6027\u80fd\u3092\u6e2c\u5b9a\u3059\u308b\n    {Elapsed, _} =\n        timer:tc(\n           fun () ->\n                  find_loop(ReadCount, Module, Map, EntryCount)\n           end),\n\n    (ReadCount * 1000 * 1000) div Elapsed.\n\n%% @doc \u8981\u7d20\u306e\u691c\u7d22\u51e6\u7406\u3092\u6307\u5b9a\u56de\u6570\u5206\u3060\u3051\u884c\u3046\n-spec find_loop(non_neg_integer(), module(), term(), non_neg_integer()) -> ok.\nfind_loop(0, _, _, _) ->\n    ok;\nfind_loop(Rest, Module, Map, Limit) ->\n    I = Rest rem Limit,\n    {ok, I} = Module:find(I, Map),\n    find_loop(Rest - 1, Module, Map, Limit).\n\n\n\u6e2c\u5b9a\u7d50\u679c:\n%% ets_map\n> bench_serial:bench(ets_map, 1000, 10000000). % NOTE: \u5b9f\u884c\u304c\u7d42\u308f\u3063\u3066\u3082\u751f\u6210\u3055\u308c\u305fETS\u30c6\u30fc\u30d6\u30eb\u306f\u81ea\u52d5\u3067\u306f\u56de\u53ce\u3055\u308c\u306a\u3044\n3377147 % 337\u4e07/sec\n\n%% dict\n> bench_serial:bench(dict, 1000, 10000000).\n2326308 % 232\u4e07/sec\n\n\u3053\u306e\u74b0\u5883\u3067\u306f\u3001ETS\u306e\u65b9\u304cdict\u3088\u308a\u30821.4\u500d\u7a0b\u5ea6\u306e\u6027\u80fd\u304c\u51fa\u3066\u3044\u305f\u3002\n\u305f\u3060\u3057\u3001EC2\u3067\u306f\u306a\u304f\u30ed\u30fc\u30ab\u30eb\u306eVM\u74b0\u5883\u3067\u8a66\u3057\u305f\u5834\u5408\u306b\u306f\u3001\u9006\u306bdict\u306e\u65b9\u304c\u82e5\u5e72\u6027\u80fd\u304c\u826f\u304b\u3063\u305f\u3002\n\u307e\u305f\u3001\u3053\u306e\u8fba\u308a\u306e\u6570\u5024\u306f\u6e2c\u5b9a\u65b9\u6cd5\u3084\u5404\u7a2e\u30aa\u30d7\u30b7\u30e7\u30f3(ex. dict\u3092hipe\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b)\u306b\u3088\u3063\u3066\u3082\u5909\u308f\u3063\u3066\u304f\u308b\u306f\u305a\u306a\u306e\u3067\u3001\u3053\u306e\u7d50\u679c\u306f\u300cETS\u306e\u65b9\u304c\u4e00\u822c\u306bdict\u3088\u308a\u3082\u6027\u80fd\u304c\u826f\u3044\u300d\u3068\u3057\u3066\u6349\u3048\u308b\u3088\u308a\u3082\u3001\u3042\u304f\u307e\u3067\u3082\u5f8c\u7d9a\u306e\u30d7\u30ed\u30bb\u30b9\u5316\u3057\u305f\u969b\u306e\u6027\u80fd\u6e2c\u5b9a\u306b\u5bfe\u3059\u308b\u57fa\u6e96\u70b9\u3068\u3057\u3066\u898b\u3066\u3082\u3089\u3063\u305f\u65b9\u304c\u826f\u3044\u3068\u601d\u308f\u308c\u308b\u3002\n\nKVS\u30d7\u30ed\u30bb\u30b9\u3068\u3057\u3066\u6027\u80fd\n\u6b21\u306fdict\u304a\u3088\u3073ETS\u3092KVS\u30d7\u30ed\u30bb\u30b9\u5316\u3057\u305f\u969b\u306e\u8aad\u307f\u8fbc\u307f\u6027\u80fd\u306e\u6bd4\u8f03\u3002\n\n\u5b9f\u88c5\n\u4ee5\u4e0b\u306b\u3001\u305d\u308c\u305e\u308c\u306e\u5b9f\u88c5\u3092\u8f09\u305b\u308b\u3002\n\ndict_kvs.erl\n%% dict\u3092\u4f7f\u3063\u305fKVS\u7684\u30b5\u30fc\u30d0\u30d7\u30ed\u30bb\u30b9 (\u5fc5\u8981\u6700\u4f4e\u9650\u306e\u5b9f\u88c5)\n-module(dict_kvs).\n\n-export([start_link/0, store/3, find/2]).\n\n-record(state, {map :: dict:dict()}).\n\n%%% external functions\n-spec start_link() -> {ok, pid()}.\nstart_link() ->\n    Pid = spawn_link(fun() -> loop(#state{map = dict:new()}) end),\n    true = register(?MODULE, Pid),  % \u30e2\u30b8\u30e5\u30fc\u30eb\u540d == \u30d7\u30ed\u30bb\u30b9\u540d\n    {ok, Pid}.\n\n-spec store(term(), term(), pid()|atom()) -> ok.\nstore(Key, Value, Server) ->\n    _ = Server ! {store, Key, Value},\n    ok.\n\n-spec find(term(), pid()|atom()) -> {ok, Value::term()} | error.\nfind(Key, Server) ->\n    % \u30e1\u30c3\u30bb\u30fc\u30b8\u30d1\u30c3\u30b7\u30f3\u30b0\u3092\u4f7f\u3063\u3066\u3001\u30b5\u30fc\u30d0\u306b\u5024\u3092\u554f\u3044\u5408\u308f\u305b\u308b\n    Ref = make_ref(),\n    _ = Server ! {find, self(), Ref, Key},\n    receive\n        {Ref, Result} -> Result\n    end.\n\n%%% internal functions\n-spec loop(#state{}) -> no_return().\nloop(State) ->\n    receive\n        {store, Key, Value} ->\n            Map = dict:store(Key, Value, State#state.map),\n            loop(State#state{map = Map});\n        {find, From, Ref, Key} ->\n            _ = From ! {Ref, dict:find(Key, State#state.map)},\n            loop(State)\n    end.\n\n\n\nets_kvs.erl\n%% \u540d\u524d\u4ed8\u304dETS\u3092\u4f7f\u3063\u305fKVS\u7684\u30b5\u30fc\u30d0\u30d7\u30ed\u30bb\u30b9 (\u5fc5\u8981\u6700\u4f4e\u9650\u306e\u5b9f\u88c5)\n-module(ets_kvs).\n\n-export([start_link/0, store/3, find/2]).\n\n-record(state, {map :: ets:tid()}).\n\n%%% external functions\n-spec start_link() -> {ok, pid()}.\nstart_link() ->\n    Pid = spawn_link(fun() -> loop(#state{map = ets_map:new(?MODULE)}) end),\n    true = register(?MODULE, Pid),  % \u30e2\u30b8\u30e5\u30fc\u30eb\u540d == \u30d7\u30ed\u30bb\u30b9\u540d\n    {ok, Pid}.\n\n-spec store(term(), term(), pid()|atom()) -> ok.\nstore(Key, Value, Server) ->\n    _ = Server ! {store, Key, Value},\n    ok.\n\n-spec find(term(), pid()|atom()) -> {ok, Value::term()} | error.\nfind(Key, _Server) ->\n    %% \u691c\u7d22\u6642\u306b\u306f\u30b5\u30fc\u30d0\u30d7\u30ed\u30bb\u30b9\u306b\u554f\u3044\u5408\u308f\u305b\u308b\u3053\u3068\u306a\u304f\u3001\u76f4\u63a5ETS\u30c6\u30fc\u30d6\u30eb\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\n    ets_map:find(Key, ?MODULE).\n\n%%% internal functions\n-spec loop(#state{}) -> no_return().\nloop(State) ->\n    receive\n        {store, Key, Value} ->\n            Map = ets_map:store(Key, Value, State#state.map),\n            loop(State#state{map = Map}) % dict_kvs\u306b\u5408\u308f\u305b\u3066map\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u66f4\u65b0\u3092\u884c\u3063\u3066\u3044\u308b(\u5b9f\u8cea\u7684\u306b\u306f\u610f\u5473\u306f\u306a\u3044)\n    end.\n\n\n\n\u6e2c\u5b9a\u30b3\u30fc\u30c9\nKVS\u7684\u30d7\u30ed\u30bb\u30b9\u306e\u8aad\u307f\u8fbc\u307f(\u691c\u7d22)\u6027\u80fd\u6e2c\u5b9a\u7528\u30b3\u30fc\u30c9\u3002\nCPU\u30b3\u30a2\u6570(\u30b9\u30ec\u30c3\u30c9\u6570)\u306b\u5bfe\u3059\u308b\u30b9\u30b1\u30fc\u30e9\u30d3\u30ea\u30c6\u30a3\u3092\u6e2c\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u3001\u540c\u6642\u30a2\u30af\u30bb\u30b9\u30af\u30e9\u30a4\u30a2\u30f3\u30c8(\u30d7\u30ed\u30bb\u30b9)\u6570\u304c\u6307\u5b9a\u53ef\u80fd\u3068\u306a\u3063\u3066\u3044\u308b\u3002\n\nbench_parallel.erl\n-module(bench_parallel).\n\n-export([bench/4]).\n\n%% @doc \u30d9\u30f3\u30c1\u30de\u30fc\u30af\u95a2\u6570\n%%\n%% \u4e00\u79d2\u9593\u306b\u4f55\u56de\u8aad\u307f\u8fbc\u307f(\u691c\u7d22)\u51e6\u7406\u3092\u884c\u3048\u308b\u304b\u3092\u8fd4\u3059\n-spec bench(module(), non_neg_integer(), non_neg_integer(), pos_integer()) -> ReadsPerSecond::non_neg_integer().\nbench(Module, EntryCount, ReadCount, ClientCount) ->\n    %% KVS\u30d7\u30ed\u30bb\u30b9\u306e\u8d77\u52d5\n    {ok, Pid} = Module:start_link(),\n\n    %% \u6700\u521d\u306b\u8981\u7d20\u3092\u767b\u9332\u3057\u3066\u304a\u304f\n    ok = lists:foreach(\n           fun (I) -> Module:store(I, I, Pid) end,\n           lists:seq(0, EntryCount - 1)),\n    _ = timer:sleep(10),\n\n    %% \u5404\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30d7\u30ed\u30bb\u30b9\u304c\u62c5\u5f53\u3059\u308b\u8aad\u307f\u8fbc\u307f\u51e6\u7406\u306e\u500b\u6570\u3092\u8a08\u7b97\u3059\u308b(\u7aef\u6570\u306e\u51e6\u7406\u306f\u3044\u3044\u52a0\u6e1b)\n    PerProcessReadCount = ReadCount div ClientCount,\n\n    %% \u8aad\u307f\u8fbc\u307f\u6027\u80fd\u3092\u6e2c\u5b9a\u3059\u308b\n    {Elapsed, _} =\n        timer:tc(\n          fun () ->\n                  %% \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30d7\u30ed\u30bb\u30b9\u3092\u8d77\u52d5\n                  ok = lists:foreach(\n                         fun (_) ->\n                                 spawn_monitor(bench_serial, find_loop,\n                                               [PerProcessReadCount, Module, Module, EntryCount])\n                         end,\n                         lists:seq(1, ClientCount)),\n\n                  %% \u5168\u3066\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u51e6\u7406\u304c\u7d42\u308f\u308b\u307e\u3067\u5f85\u6a5f\n                  wait_loop(ClientCount)\n          end),\n\n    %% KVS\u30d7\u30ed\u30bb\u30b9\u306e\u505c\u6b62\n    _ = unlink(Pid),\n    _ = exit(Pid, kill),\n\n    (ReadCount * 1000 * 1000) div Elapsed.\n\n-spec wait_loop(non_neg_integer()) -> ok.\nwait_loop(0) -> ok;\nwait_loop(N) ->\n    receive\n        {'DOWN', _, _, _, normal} -> wait_loop(N - 1)\n    end.\n\n\n\n\u6e2c\u5b9a\u7d50\u679c\n\u540c\u6642\u30a2\u30af\u30bb\u30b9\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u6570\u30921\u304b\u3089128\u307e\u3067\u5909\u52d5\u3055\u305b\u305f\u5834\u5408\u306e\u6e2c\u5b9a\u7d50\u679c:\n\n\n\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u6570\nets_kvs - \u79d2\u9593\u691c\u7d22\u6570\nets_key - \u30b9\u30b1\u30fc\u30eb\u7387\ndict_kvs - \u79d2\u9593\u691c\u7d22\u6570\ndict_kvs - \u30b9\u30b1\u30fc\u30eb\u7387\n\n\n\n\n1\n3,107,163/sec\n1.00\n433,303/sec\n1.00\n\n\n2\n6,203,665/sec\n2.00\n404,905/sec\n0.93\n\n\n4\n12,332,879/sec\n3.97\n518,766/sec\n1.20\n\n\n8\n24,465,091/sec\n7.87\n602,455/sec\n1.39\n\n\n16\n47,723,813/sec\n15.36\n614,692/sec\n1.42\n\n\n32\n61,272,132/sec\n19.72\n619,699/sec\n1.43\n\n\n64\n54,838,191/sec\n17.65\n626,231/sec\n1.45\n\n\n128\n57,763,401/sec\n18.59\n638,042/sec\n1.47\n\n\n\n\u30af\u30e9\u30b9\u30a2\u30f3\u30c8\u6570\u304c1\u306e\u5834\u5408\u306e\u7d50\u679c\u3092\u3001\u5358\u4f53\u6e2c\u5b9a\u6642\u306e\u305d\u308c\u3068\u6bd4\u8f03\u3057\u3066\u307f\u308b\u3068\u3001ets_kvs\u306e\u65b9\u306f\u307b\u3068\u3093\u3069\u5dee\u7570\u304c\u898b\u3089\u308c\u306a\u3044\u304c\u3001dict_kvs\u306f\u9593\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u30d1\u30c3\u30b7\u30f3\u30b0\u304c\u5165\u3063\u305f\u3053\u3068\u306b\u3088\u308a\u6027\u80fd\u304c\u4e94\u5206\u306e\u4e00\u7a0b\u5ea6\u306b\u843d\u3061\u3066\u3057\u307e\u3063\u3066\u3044\u305f\u3002\n\u307e\u305fets_kvs\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u6570\u306e\u5897\u52a0\u306b\u5fdc\u3058\u3066\u3001(CPU\u306e\u30b3\u30a2\u6570\u306e\u7bc4\u56f2\u3067)\u826f\u597d\u306b\u30b9\u30b1\u30fc\u30eb\u3057\u3066\u3044\u305f\u3002\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u304c\u4e8b\u524d\u306b\u30c6\u30fc\u30d6\u30eb\u306e\u540d\u524d\u3092\u77e5\u3063\u3066\u3044\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u7b49\u306e\u5236\u9650\u304c\u3042\u3063\u3066\u3001\u5fc5\u305a\u3057\u3082\u4f7f\u3044\u52dd\u624b\u306f\u826f\u304f\u306f\u306a\u3044\u304c\u3001\u4e0d\u7279\u5b9a\u591a\u6570\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u554f\u3044\u5408\u308f\u305b(READ\u304c\u591a\u6570)\u3092\u51e6\u7406\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3088\u3046\u306a\u30b5\u30fc\u30d0\u30d7\u30ed\u30bb\u30b9\u3067\u306f\u3001\u6027\u80fd\u5411\u4e0a\u306e\u305f\u3081\u306b\u540d\u524d\u4ed8\u304dETS\u306e\u4f7f\u7528\u3092\u691c\u8a0e\u3057\u3066\u307f\u308b\u306e\u306f\u60aa\u304f\u306f\u306a\u3055\u305d\u3046\u3002\n\u8aad\u307f\u8fbc\u307f(\u691c\u7d22)\u51e6\u7406\u306e\u65b9\u304c\u5727\u5012\u7684\u306b\u591a\u3044\u3068\u4e88\u60f3\u3055\u308c\u308b\u3088\u3046\u306aKVS\u7684\u306a\u30d7\u30ed\u30bb\u30b9\u3092\u3001Erlang/OTP\u3067\u3069\u3046\u3084\u3063\u3066\u52b9\u7387\u7684\u306b(\u30b9\u30b1\u30fc\u30eb\u30a2\u30c3\u30d7\u3059\u308b\u3088\u3046\u306b)\u5b9f\u88c5\u3059\u308b\u304b\u3002\n\u5c11\u3057\u524d\u306b[local](https://github.com/sile/local)\u3068\u3044\u3046\u3001\u540d\u524d\u306e\u30b9\u30b3\u30fc\u30d7\u3092\u9650\u5b9a\u53ef\u80fd\u306a\u30d7\u30ed\u30bb\u30b9\u540d\u7ba1\u7406\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5b9f\u88c5\u3057\u305f\u6642\u306b\u63a1\u7528\u3057\u305f\u65b9\u6cd5\u306e\u30e1\u30e2\u3002\n\n\u7d50\u8ad6\n====\n\n\u7d50\u8ad6\u3092\u5148\u306b\u66f8\u3044\u3066\u3057\u307e\u3046\u3068\u540d\u524d\u4ed8\u304d\u306e[ETS](http://www.erlang.org/doc/man/ets.html)\u3092\u4f7f\u3046\u306e\u304c\u826f\u3044\u3002\n\nETS\u3092\u540d\u524d\u4ed8\u304d(and access=protected)\u306b\u3057\u3066\u304a\u304f\u3053\u3068\u3067\u3001\u30c6\u30fc\u30d6\u30eb\u306e\u6240\u6709\u30d7\u30ed\u30bb\u30b9\u3092\u7d4c\u7531\u305b\u305a\u306b\u8aad\u307f\u8fbc\u307f\u51e6\u7406\u3092\u884c\u3046\u3053\u3068\u304c\u53ef\u80fd\u3068\u306a\u308b\u3002\n\u305d\u306e\u305f\u3081\u3001\u8907\u6570\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30d7\u30ed\u30bb\u30b9\u304b\u3089\u540c\u6642\u306b\u8981\u6c42\u304c\u6765\u305f\u5834\u5408\u3067\u3082\u3001\u305d\u308c\u3089\u304c(\u30e1\u30c3\u30bb\u30fc\u30b8\u30d1\u30c3\u30b7\u30f3\u30b0\u3092\u901a\u3057\u3066)\u76f4\u5217\u5316\u3055\u308c\u308b\u3053\u3068\u306a\u304f\u3001\u4e26\u5217\u7684\u306b\u51e6\u7406\u3055\u308c\u308b\u3053\u3068\u304c\u671f\u5f85\u3067\u304d\u308b\u3002\n\u5b9f\u969b\u306b\u3001\u4eca\u56de\u6e2c\u5b9a\u3057\u305f\u7bc4\u56f2\u3067\u306f\u3001ETS\u3092\u4f7f\u3046\u3053\u3068\u3067\u8aad\u307f\u8fbc\u307f\u51e6\u7406\u306f\u30b3\u30a2\u6570\u306b\u5bfe\u3057\u3066\u307b\u307c\u7dda\u5f62\u306b\u30b9\u30b1\u30fc\u30eb\u3057\u3066\u3044\u305f\u3002\n\n\u5b9f\u88c5\u4f8b\u3068\u6027\u80fd\u6bd4\u8f03\n====================\n\n\u4ee5\u964d\u306f\u3001\u5b9f\u969b\u306bETS\u3092\u4f7f\u3063\u305fKVS\u7684\u30d7\u30ed\u30bb\u30b9\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u3066\u3044\u304f\u3002\n\u307e\u305f\u3001\u6bd4\u8f03\u5bfe\u8c61\u3068\u3057\u3066[dict](http://www.erlang.org/doc/man/dict.html)\u3092\u7528\u3044\u305f\u7248\u306e\u5b9f\u88c5\u304a\u3088\u3073\u6027\u80fd\u6e2c\u5b9a\u7d50\u679c\u3082\u8a18\u8f09\u3059\u308b\u3002\n\n\u5b9f\u884c\u74b0\u5883\n-------\n\n- EC2\u306ec3.8xlarge\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9(vCPU=32)\u3092\u4f7f\u7528\n  - 16\u30b3\u30a2/32\u30b9\u30ec\u30c3\u30c9(\u304a\u305d\u3089\u304f)\n- OS: CentOS6.4-64bit\n- Erlang/OTP: 17.3, [rpm](http://packages.erlang-solutions.com/site/esl/esl-erlang/FLAVOUR_1_general/esl-erlang_17.3-1~centos~6_amd64.rpm)\n\n\u5358\u4f53\u6027\u80fd\n--------\n\n\u307e\u305a\u306fETS\u3068dict\u306e\u5358\u4f53\u6027\u80fd\u306e\u6bd4\u8f03\u304b\u3089\u59cb\u3081\u308b\u3002\n\nETS\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092dict\u306b\u5408\u308f\u305b\u308b\u305f\u3081\u306b\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30e9\u30c3\u30d1\u30fc\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u7528\u610f\u3002\n\n```erlang:ets_map.erl\n-module(ets_map).\n\n-export([new/0, store/3, find/2]). % dict\u306b\u5408\u308f\u305b\u305f\u516c\u958b\u95a2\u6570\n-export([new/1]). % \u540d\u524d\u4ed8\u304d\u30c6\u30fc\u30d6\u30eb\u751f\u6210\u7528\u95a2\u6570\n\n%% @doc \u540d\u524d\u306a\u3057\u30c6\u30fc\u30d6\u30eb\u3092\u751f\u6210\u3059\u308b (\u5358\u4f53\u6027\u80fd\u6e2c\u5b9a\u7528)\n-spec new() -> ets:tid().\nnew() ->\n    ets:new(?MODULE, [set, protected, {read_concurrency, true}]).\n\n%% @doc \u540d\u524d\u4ed8\u304d\u30bf\u30fc\u30d6\u30eb\u3092\u751f\u6210\u3059\u308b (\u30b5\u30fc\u30d0\u6027\u80fd\u6e2c\u5b9a\u7528)\n-spec new(Name::atom()) -> ets:tid().\nnew(Name) ->\n    ets:new(Name, [named_table, set, protected, {read_concurrency, true}]).\n\n-spec store(Key::term(), Value::term(), ets:tid()) -> ets:tid().\nstore(Key, Value, Map) ->\n    true = ets:insert(Map, {Key, Value}),\n    Map.\n\n-spec find(Key::term(), ets:tid()) -> {ok, Value::term()} | error.\nfind(Key, Map) ->\n    case ets:lookup(Map, Key) of\n        [{_, Value}] -> {ok, Value};\n        []           -> error\n    end.\n```\n\n\u6e2c\u5b9a\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u7528\u3059\u308b\u3002\n\n```erlang:bench_serial.erl\n-module(bench_serial).\n\n-export([bench/3]).\n-export([find_loop/4]). % \u5f8c\u3067\u53c2\u7167\u3057\u305f\u3044\u306e\u3067\u516c\u958b\u95a2\u6570\u306b\u3057\u3066\u304a\u304f\n\n%% @doc \u30d9\u30f3\u30c1\u30de\u30fc\u30af\u95a2\u6570\n%%\n%% \u4e00\u79d2\u9593\u306b\u4f55\u56de\u8aad\u307f\u8fbc\u307f(\u691c\u7d22)\u51e6\u7406\u3092\u884c\u3048\u308b\u304b\u3092\u8fd4\u3059\n-spec bench(module(), non_neg_integer(), non_neg_integer()) -> ReadsPerSecond::non_neg_integer().\nbench(Module, EntryCount, ReadCount) ->\n    %% \u6700\u521d\u306b\u8981\u7d20\u3092\u767b\u9332\u3057\u3066\u304a\u304f\n    Map =\n        lists:foldl(\n          fun (I, Acc) -> Module:store(I, I, Acc) end,\n          Module:new(),\n          lists:seq(0, EntryCount - 1)),\n\n    %% \u8aad\u307f\u8fbc\u307f\u6027\u80fd\u3092\u6e2c\u5b9a\u3059\u308b\n    {Elapsed, _} =\n        timer:tc(\n           fun () ->\n                  find_loop(ReadCount, Module, Map, EntryCount)\n           end),\n\n    (ReadCount * 1000 * 1000) div Elapsed.\n\n%% @doc \u8981\u7d20\u306e\u691c\u7d22\u51e6\u7406\u3092\u6307\u5b9a\u56de\u6570\u5206\u3060\u3051\u884c\u3046\n-spec find_loop(non_neg_integer(), module(), term(), non_neg_integer()) -> ok.\nfind_loop(0, _, _, _) ->\n    ok;\nfind_loop(Rest, Module, Map, Limit) ->\n    I = Rest rem Limit,\n    {ok, I} = Module:find(I, Map),\n    find_loop(Rest - 1, Module, Map, Limit).\n```\n\n\u6e2c\u5b9a\u7d50\u679c:\n\n```erlang\n%% ets_map\n> bench_serial:bench(ets_map, 1000, 10000000). % NOTE: \u5b9f\u884c\u304c\u7d42\u308f\u3063\u3066\u3082\u751f\u6210\u3055\u308c\u305fETS\u30c6\u30fc\u30d6\u30eb\u306f\u81ea\u52d5\u3067\u306f\u56de\u53ce\u3055\u308c\u306a\u3044\n3377147 % 337\u4e07/sec\n\n%% dict\n> bench_serial:bench(dict, 1000, 10000000).\n2326308 % 232\u4e07/sec\n```\n\u3053\u306e\u74b0\u5883\u3067\u306f\u3001ETS\u306e\u65b9\u304cdict\u3088\u308a\u30821.4\u500d\u7a0b\u5ea6\u306e\u6027\u80fd\u304c\u51fa\u3066\u3044\u305f\u3002\n\u305f\u3060\u3057\u3001EC2\u3067\u306f\u306a\u304f\u30ed\u30fc\u30ab\u30eb\u306eVM\u74b0\u5883\u3067\u8a66\u3057\u305f\u5834\u5408\u306b\u306f\u3001\u9006\u306bdict\u306e\u65b9\u304c\u82e5\u5e72\u6027\u80fd\u304c\u826f\u304b\u3063\u305f\u3002\n\u307e\u305f\u3001\u3053\u306e\u8fba\u308a\u306e\u6570\u5024\u306f\u6e2c\u5b9a\u65b9\u6cd5\u3084\u5404\u7a2e\u30aa\u30d7\u30b7\u30e7\u30f3(ex. dict\u3092hipe\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b)\u306b\u3088\u3063\u3066\u3082\u5909\u308f\u3063\u3066\u304f\u308b\u306f\u305a\u306a\u306e\u3067\u3001\u3053\u306e\u7d50\u679c\u306f\u300cETS\u306e\u65b9\u304c\u4e00\u822c\u306bdict\u3088\u308a\u3082\u6027\u80fd\u304c\u826f\u3044\u300d\u3068\u3057\u3066\u6349\u3048\u308b\u3088\u308a\u3082\u3001\u3042\u304f\u307e\u3067\u3082\u5f8c\u7d9a\u306e\u30d7\u30ed\u30bb\u30b9\u5316\u3057\u305f\u969b\u306e\u6027\u80fd\u6e2c\u5b9a\u306b\u5bfe\u3059\u308b\u57fa\u6e96\u70b9\u3068\u3057\u3066\u898b\u3066\u3082\u3089\u3063\u305f\u65b9\u304c\u826f\u3044\u3068\u601d\u308f\u308c\u308b\u3002\n\nKVS\u30d7\u30ed\u30bb\u30b9\u3068\u3057\u3066\u6027\u80fd\n-------------------\n\n\u6b21\u306fdict\u304a\u3088\u3073ETS\u3092KVS\u30d7\u30ed\u30bb\u30b9\u5316\u3057\u305f\u969b\u306e\u8aad\u307f\u8fbc\u307f\u6027\u80fd\u306e\u6bd4\u8f03\u3002\n\n### \u5b9f\u88c5\n\n\u4ee5\u4e0b\u306b\u3001\u305d\u308c\u305e\u308c\u306e\u5b9f\u88c5\u3092\u8f09\u305b\u308b\u3002\n\n```erlang:dict_kvs.erl\n%% dict\u3092\u4f7f\u3063\u305fKVS\u7684\u30b5\u30fc\u30d0\u30d7\u30ed\u30bb\u30b9 (\u5fc5\u8981\u6700\u4f4e\u9650\u306e\u5b9f\u88c5)\n-module(dict_kvs).\n\n-export([start_link/0, store/3, find/2]).\n\n-record(state, {map :: dict:dict()}).\n\n%%% external functions\n-spec start_link() -> {ok, pid()}.\nstart_link() ->\n    Pid = spawn_link(fun() -> loop(#state{map = dict:new()}) end),\n    true = register(?MODULE, Pid),  % \u30e2\u30b8\u30e5\u30fc\u30eb\u540d == \u30d7\u30ed\u30bb\u30b9\u540d\n    {ok, Pid}.\n\n-spec store(term(), term(), pid()|atom()) -> ok.\nstore(Key, Value, Server) ->\n    _ = Server ! {store, Key, Value},\n    ok.\n\n-spec find(term(), pid()|atom()) -> {ok, Value::term()} | error.\nfind(Key, Server) ->\n    % \u30e1\u30c3\u30bb\u30fc\u30b8\u30d1\u30c3\u30b7\u30f3\u30b0\u3092\u4f7f\u3063\u3066\u3001\u30b5\u30fc\u30d0\u306b\u5024\u3092\u554f\u3044\u5408\u308f\u305b\u308b\n    Ref = make_ref(),\n    _ = Server ! {find, self(), Ref, Key},\n    receive\n        {Ref, Result} -> Result\n    end.\n\n%%% internal functions\n-spec loop(#state{}) -> no_return().\nloop(State) ->\n    receive\n        {store, Key, Value} ->\n            Map = dict:store(Key, Value, State#state.map),\n            loop(State#state{map = Map});\n        {find, From, Ref, Key} ->\n            _ = From ! {Ref, dict:find(Key, State#state.map)},\n            loop(State)\n    end.\n```\n\n```erlang:ets_kvs.erl\n%% \u540d\u524d\u4ed8\u304dETS\u3092\u4f7f\u3063\u305fKVS\u7684\u30b5\u30fc\u30d0\u30d7\u30ed\u30bb\u30b9 (\u5fc5\u8981\u6700\u4f4e\u9650\u306e\u5b9f\u88c5)\n-module(ets_kvs).\n\n-export([start_link/0, store/3, find/2]).\n\n-record(state, {map :: ets:tid()}).\n\n%%% external functions\n-spec start_link() -> {ok, pid()}.\nstart_link() ->\n    Pid = spawn_link(fun() -> loop(#state{map = ets_map:new(?MODULE)}) end),\n    true = register(?MODULE, Pid),  % \u30e2\u30b8\u30e5\u30fc\u30eb\u540d == \u30d7\u30ed\u30bb\u30b9\u540d\n    {ok, Pid}.\n\n-spec store(term(), term(), pid()|atom()) -> ok.\nstore(Key, Value, Server) ->\n    _ = Server ! {store, Key, Value},\n    ok.\n\n-spec find(term(), pid()|atom()) -> {ok, Value::term()} | error.\nfind(Key, _Server) ->\n    %% \u691c\u7d22\u6642\u306b\u306f\u30b5\u30fc\u30d0\u30d7\u30ed\u30bb\u30b9\u306b\u554f\u3044\u5408\u308f\u305b\u308b\u3053\u3068\u306a\u304f\u3001\u76f4\u63a5ETS\u30c6\u30fc\u30d6\u30eb\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\n    ets_map:find(Key, ?MODULE).\n\n%%% internal functions\n-spec loop(#state{}) -> no_return().\nloop(State) ->\n    receive\n        {store, Key, Value} ->\n            Map = ets_map:store(Key, Value, State#state.map),\n            loop(State#state{map = Map}) % dict_kvs\u306b\u5408\u308f\u305b\u3066map\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u66f4\u65b0\u3092\u884c\u3063\u3066\u3044\u308b(\u5b9f\u8cea\u7684\u306b\u306f\u610f\u5473\u306f\u306a\u3044)\n    end.\n```\n\n### \u6e2c\u5b9a\u30b3\u30fc\u30c9\n\nKVS\u7684\u30d7\u30ed\u30bb\u30b9\u306e\u8aad\u307f\u8fbc\u307f(\u691c\u7d22)\u6027\u80fd\u6e2c\u5b9a\u7528\u30b3\u30fc\u30c9\u3002\nCPU\u30b3\u30a2\u6570(\u30b9\u30ec\u30c3\u30c9\u6570)\u306b\u5bfe\u3059\u308b\u30b9\u30b1\u30fc\u30e9\u30d3\u30ea\u30c6\u30a3\u3092\u6e2c\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u3001\u540c\u6642\u30a2\u30af\u30bb\u30b9\u30af\u30e9\u30a4\u30a2\u30f3\u30c8(\u30d7\u30ed\u30bb\u30b9)\u6570\u304c\u6307\u5b9a\u53ef\u80fd\u3068\u306a\u3063\u3066\u3044\u308b\u3002\n\n```erlang:bench_parallel.erl\n-module(bench_parallel).\n\n-export([bench/4]).\n\n%% @doc \u30d9\u30f3\u30c1\u30de\u30fc\u30af\u95a2\u6570\n%%\n%% \u4e00\u79d2\u9593\u306b\u4f55\u56de\u8aad\u307f\u8fbc\u307f(\u691c\u7d22)\u51e6\u7406\u3092\u884c\u3048\u308b\u304b\u3092\u8fd4\u3059\n-spec bench(module(), non_neg_integer(), non_neg_integer(), pos_integer()) -> ReadsPerSecond::non_neg_integer().\nbench(Module, EntryCount, ReadCount, ClientCount) ->\n    %% KVS\u30d7\u30ed\u30bb\u30b9\u306e\u8d77\u52d5\n    {ok, Pid} = Module:start_link(),\n\n    %% \u6700\u521d\u306b\u8981\u7d20\u3092\u767b\u9332\u3057\u3066\u304a\u304f\n    ok = lists:foreach(\n           fun (I) -> Module:store(I, I, Pid) end,\n           lists:seq(0, EntryCount - 1)),\n    _ = timer:sleep(10),\n\n    %% \u5404\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30d7\u30ed\u30bb\u30b9\u304c\u62c5\u5f53\u3059\u308b\u8aad\u307f\u8fbc\u307f\u51e6\u7406\u306e\u500b\u6570\u3092\u8a08\u7b97\u3059\u308b(\u7aef\u6570\u306e\u51e6\u7406\u306f\u3044\u3044\u52a0\u6e1b)\n    PerProcessReadCount = ReadCount div ClientCount,\n\n    %% \u8aad\u307f\u8fbc\u307f\u6027\u80fd\u3092\u6e2c\u5b9a\u3059\u308b\n    {Elapsed, _} =\n        timer:tc(\n          fun () ->\n                  %% \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30d7\u30ed\u30bb\u30b9\u3092\u8d77\u52d5\n                  ok = lists:foreach(\n                         fun (_) ->\n                                 spawn_monitor(bench_serial, find_loop,\n                                               [PerProcessReadCount, Module, Module, EntryCount])\n                         end,\n                         lists:seq(1, ClientCount)),\n\n                  %% \u5168\u3066\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u51e6\u7406\u304c\u7d42\u308f\u308b\u307e\u3067\u5f85\u6a5f\n                  wait_loop(ClientCount)\n          end),\n\n    %% KVS\u30d7\u30ed\u30bb\u30b9\u306e\u505c\u6b62\n    _ = unlink(Pid),\n    _ = exit(Pid, kill),\n\n    (ReadCount * 1000 * 1000) div Elapsed.\n\n-spec wait_loop(non_neg_integer()) -> ok.\nwait_loop(0) -> ok;\nwait_loop(N) ->\n    receive\n        {'DOWN', _, _, _, normal} -> wait_loop(N - 1)\n    end.\n```\n\n### \u6e2c\u5b9a\u7d50\u679c\n\n\u540c\u6642\u30a2\u30af\u30bb\u30b9\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u6570\u30921\u304b\u3089128\u307e\u3067\u5909\u52d5\u3055\u305b\u305f\u5834\u5408\u306e\u6e2c\u5b9a\u7d50\u679c:\n\n| \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u6570 | ets_kvs - \u79d2\u9593\u691c\u7d22\u6570 | ets_key - \u30b9\u30b1\u30fc\u30eb\u7387 | dict_kvs - \u79d2\u9593\u691c\u7d22\u6570 | dict_kvs - \u30b9\u30b1\u30fc\u30eb\u7387 |\n|-------------:|--------------------:|--------------------:|---------------------:|---------------------:|\n|            1 |       3,107,163/sec |                1.00 |          433,303/sec |                 1.00 |\n|            2 |       6,203,665/sec |                2.00 |          404,905/sec |                 0.93 |\n|            4 |      12,332,879/sec |                3.97 |          518,766/sec |                 1.20 |\n|            8 |      24,465,091/sec |                7.87 |          602,455/sec |                 1.39 |\n|           16 |      47,723,813/sec |               15.36 |          614,692/sec |                 1.42 |\n|           32 |      61,272,132/sec |               19.72 |          619,699/sec |                 1.43 |\n|           64 |      54,838,191/sec |               17.65 |          626,231/sec |                 1.45 |\n|          128 |      57,763,401/sec |               18.59 |          638,042/sec |                 1.47 |\n\n\u30af\u30e9\u30b9\u30a2\u30f3\u30c8\u6570\u304c`1`\u306e\u5834\u5408\u306e\u7d50\u679c\u3092\u3001\u5358\u4f53\u6e2c\u5b9a\u6642\u306e\u305d\u308c\u3068\u6bd4\u8f03\u3057\u3066\u307f\u308b\u3068\u3001ets_kvs\u306e\u65b9\u306f\u307b\u3068\u3093\u3069\u5dee\u7570\u304c\u898b\u3089\u308c\u306a\u3044\u304c\u3001dict_kvs\u306f\u9593\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u30d1\u30c3\u30b7\u30f3\u30b0\u304c\u5165\u3063\u305f\u3053\u3068\u306b\u3088\u308a\u6027\u80fd\u304c\u4e94\u5206\u306e\u4e00\u7a0b\u5ea6\u306b\u843d\u3061\u3066\u3057\u307e\u3063\u3066\u3044\u305f\u3002\n\n\u307e\u305fets_kvs\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u6570\u306e\u5897\u52a0\u306b\u5fdc\u3058\u3066\u3001(CPU\u306e\u30b3\u30a2\u6570\u306e\u7bc4\u56f2\u3067)\u826f\u597d\u306b\u30b9\u30b1\u30fc\u30eb\u3057\u3066\u3044\u305f\u3002\n\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u304c\u4e8b\u524d\u306b\u30c6\u30fc\u30d6\u30eb\u306e\u540d\u524d\u3092\u77e5\u3063\u3066\u3044\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u7b49\u306e\u5236\u9650\u304c\u3042\u3063\u3066\u3001\u5fc5\u305a\u3057\u3082\u4f7f\u3044\u52dd\u624b\u306f\u826f\u304f\u306f\u306a\u3044\u304c\u3001\u4e0d\u7279\u5b9a\u591a\u6570\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u554f\u3044\u5408\u308f\u305b(READ\u304c\u591a\u6570)\u3092\u51e6\u7406\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3088\u3046\u306a\u30b5\u30fc\u30d0\u30d7\u30ed\u30bb\u30b9\u3067\u306f\u3001\u6027\u80fd\u5411\u4e0a\u306e\u305f\u3081\u306b\u540d\u524d\u4ed8\u304dETS\u306e\u4f7f\u7528\u3092\u691c\u8a0e\u3057\u3066\u307f\u308b\u306e\u306f\u60aa\u304f\u306f\u306a\u3055\u305d\u3046\u3002\n", "tags": ["ErlangOTP17.3"]}