{"context": " More than 1 year has passed since last update.\n\n\u76ee\u7684\n\nJava \u3067 LRU\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u4f5c\u308b\nLRU \u306f Least Recently Used \u306e\u7565\u3067\u300c\u6368\u3066\u308b\u306e\u306f\u3001\u6700\u3082\u4f7f\u308f\u308c\u3066\u3044\u306a\u3044\u3082\u306e\u304b\u3089\u300d\u3068\u3044\u3046\u610f\u5473\n\n\u53c2\u8003: wikipedia: Least Recently Used\n\njava.util.LinkedHashMap\u30af\u30e9\u30b9\u3092\u6d3b\u7528\nLinkedHashMap\u30af\u30e9\u30b9\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u5b58\u5728\u3057\u307e\u3059\u3002\npublic LinkedHashMap(\n        int initialCapacity,\n        float loadFactor,\n        boolean accessOrder)\n\n\u524d\u306e\uff12\u3064\u306e\u5f15\u6570\u306f HashMap \u7cfb\u3067\u306f\u304a\u306a\u3058\u307f\u3067\u3059\u304c\u3001\uff13\u3064\u3081\u306e\u5f15\u6570\u304c\u7279\u5fb4\u7684\u306a\u3082\u306e\u3067\u300c\u9806\u5e8f\u4ed8\u3051\u30e2\u30fc\u30c9\u300d\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u3053\u306e\u300c\u9806\u5e8f\u4ed8\u3051\u30e2\u30fc\u30c9\u300d\u306f false \u3060\u3068\u300c\u633f\u5165\u9806\u300d\uff08\uff1d\u901a\u5e38\u306e LinkedHashMap \u3068\u540c\u3058\u52d5\u4f5c\uff09\u3001true \u3060\u3068\u300c\u30a2\u30af\u30bb\u30b9\u9806\u300d\u306b\u306a\u308a\u307e\u3059\u3002\n\u3064\u307e\u308a\u901a\u5e38\u306e LinkedHashMap \u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u633f\u5165\u3057\u305f\u9806\u756a\u306b\u8fd4\u3057\u307e\u3059\u304c\u3001\u3053\u308c\u3092 true \u306b\u3059\u308b\u3068\u3001\u30a2\u30af\u30bb\u30b9\u9806\uff08\u306e\u9006\u9806\uff09\u3067\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u3082\u3063\u3068\u7c21\u5358\u306b\u8a00\u3048\u3070\u300cget() \u3092\u3059\u308b\u3068\u8a72\u5f53\u306e\u8981\u7d20\u306f\u4e00\u756a\u5f8c\u308d\u306b\u79fb\u52d5\u3059\u308b\u300d\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\nMap<String, String> map = new LinkedHashMap<>(15, 0.75f, true);\n\nmap.put(\"one\", \"1st\");\nmap.put(\"two\", \"2nd\");\nmap.put(\"three\", \"3rd\");\nSystem.out.println(map);\n\nmap.get(\"one\");\nSystem.out.println(map);\n\nmap.get(\"two\");\nSystem.out.println(map);\n\n{one=1st, two=2nd, three=3rd}\n{two=2nd, three=3rd, one=1st}\n{three=3rd, one=1st, two=2nd}\n\n\u307e\u305f\u3001LinkedHashMap\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30e1\u30bd\u30c3\u30c9\u304c\u5b58\u5728\u3057\u307e\u3059\u3002\nprotected boolean removeEldestEntry(Map.Entry<K,V> eldest)\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u88c5\u3067\u306f false \u3092\u8fd4\u3057\u307e\u3059\u304c\u3001\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u304c true \u3092\u8fd4\u3059\u3068\u30de\u30c3\u30d7\u306e\u4e00\u756a\u53e4\u3044\u3082\u306e\uff08\u5148\u982d\u306e\u8981\u7d20\uff09\u304c\u524a\u9664\u3055\u308c\u307e\u3059\u3002\n\u3053\u306e\uff12\u3064\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u3001\u500b\u6570\u3092\u6307\u5b9a\u3057\u305fLRU\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\n/**\n * LRU\u30ad\u30e3\u30c3\u30b7\u30e5\u30de\u30c3\u30d7\n */\npublic class LruCacheMap<K, V> extends LinkedHashMap<K, V> {\n    /** \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u30d0\u30fc\u30b8\u30e7\u30f3 */\n    private static final long serialVersionUID = 1L;\n\n    /** \u30ad\u30e3\u30c3\u30b7\u30e5\u30a8\u30f3\u30c8\u30ea\u6700\u5927\u6570 */\n    private final int maxSize;\n\n    /**\n     * \u6307\u5b9a\u3055\u308c\u305f\u6700\u5927\u6570\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\n     * @param maxSize \u6700\u5927\u6570\n     */\n    public LruCacheMap(int maxSize) {\n        super(15, 0.75f, true);\n        this.maxSize = maxSize;\n    }\n\n    /** \u30a8\u30f3\u30c8\u30ea\u306e\u524a\u9664\u8981\u5426\u3092\u5224\u65ad */\n    @Override\n    protected boolean removeEldestEntry(Map.Entry<K, V> eldest) {\n        return size() > maxSize;\n    }\n}\n\ngist: LruCacheMap.java\n\uff08\u9806\u5e8f\u4ed8\u3051\u30e2\u30fc\u30c9\u3092 false \u306b\u3059\u308c\u3070\u3001\u767b\u9332\u304c\u53e4\u3044\u3082\u306e\u304b\u3089\u6368\u3066\u308b\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u306a\u308a\u307e\u3059\uff09\n\n\u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u306e\u53d6\u5f97\u6642\u306e\u6ce8\u610f\n\u3053\u306e LRU \u30ad\u30e3\u30c3\u30b7\u30e5\u3001\u3068\u3044\u3046\u304b\u300c\u9806\u5e8f\u4ed8\u3051\u30e2\u30fc\u30c9\u300d\u3092\u300c\u30a2\u30af\u30bb\u30b9\u9806\u300d\u306b\u3057\u305f LinkedHashMap \u306e\u5834\u5408\u306b\u306f\u3001get() \u3067\u30de\u30c3\u30d7\u69cb\u9020\u304c\u5909\u308f\u308b\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\u5177\u4f53\u7684\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a2\u30af\u30bb\u30b9\u3092\u3059\u308b\u3068 java.util.ConcurrentModificationException \u4f8b\u5916\u304c\u767a\u751f\u3057\u307e\u3059\u3002\nMap<String, String> map = new LruCacheMap<>(10);\nmap.put(\"one\", \"1st\");\nmap.put(\"two\", \"2nd\");\nmap.put(\"three\", \"3rd\");\n\nfor (String key : map.keySet()) {\n    System.out.println(key + \"=\" + map.get(key));\n    // \u2605 map.get() \u3067\u30de\u30c3\u30d7\u69cb\u9020\u304c\u5909\u308f\u308b\u306e\u3067\u3001\u6b21\u306e\u53d6\u5f97\u3067\u4f8b\u5916\u767a\u751f\uff01\n}\n\n\u4e00\u822c\u7684\u306b\u3001\u30de\u30c3\u30d7\u306e\u30ad\u30fc\u3068\u5024\u3092\u3042\u308f\u305b\u3066\u53d6\u5f97\u3059\u308b\u5834\u5408\u306b\u306f keySet() \u3067\u306f\u306a\u304f entrySet() \u3092\u4f7f\u3046\u306e\u304c\u6027\u80fd\u7684\u306b\u826f\u3044\u3068\u3055\u308c\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u300c\u9806\u5e8f\u4ed8\u3051\u30e2\u30fc\u30c9\u300d\u3092\u300c\u30a2\u30af\u30bb\u30b9\u9806\u300d\u306b\u3057\u305f\u3068\u304d\u306b\u306f\u6027\u80fd\u3046\u3093\u306c\u3093\u3067\u306f\u306a\u304f\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u3044\u308b\u9593\u306b get() \u3057\u305f\u3089\u4f8b\u5916\u304c\u767a\u751f\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u306f\u899a\u3048\u3066\u304a\u3044\u305f\u307b\u3046\u304c\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nMap<String, String> map = new LruCacheMap<>(10);\nmap.put(\"one\", \"1st\");\nmap.put(\"two\", \"2nd\");\nmap.put(\"three\", \"3rd\");\n\nfor (Map.Entry<String, String> entry : map.entrySet()) {\n    System.out.println(entry.getKey() + \"=\" + entry.getValue());\n    // \u3053\u308c\u306a\u3089 OK!\n}\n\n\n# \u76ee\u7684\n\n- Java \u3067 LRU\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u4f5c\u308b\n- LRU \u306f Least Recently Used \u306e\u7565\u3067\u300c\u6368\u3066\u308b\u306e\u306f\u3001\u6700\u3082\u4f7f\u308f\u308c\u3066\u3044\u306a\u3044\u3082\u306e\u304b\u3089\u300d\u3068\u3044\u3046\u610f\u5473\n\n\u53c2\u8003: [wikipedia: Least Recently Used](https://ja.wikipedia.org/wiki/Least_Recently_Used)\n\n# java.util.LinkedHashMap\u30af\u30e9\u30b9\u3092\u6d3b\u7528\n\nLinkedHashMap\u30af\u30e9\u30b9\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u5b58\u5728\u3057\u307e\u3059\u3002\n\n```java\npublic LinkedHashMap(\n        int initialCapacity,\n        float loadFactor,\n        boolean accessOrder)\n```\n\n\u524d\u306e\uff12\u3064\u306e\u5f15\u6570\u306f HashMap \u7cfb\u3067\u306f\u304a\u306a\u3058\u307f\u3067\u3059\u304c\u3001\uff13\u3064\u3081\u306e\u5f15\u6570\u304c\u7279\u5fb4\u7684\u306a\u3082\u306e\u3067\u300c\u9806\u5e8f\u4ed8\u3051\u30e2\u30fc\u30c9\u300d\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n\u3053\u306e\u300c\u9806\u5e8f\u4ed8\u3051\u30e2\u30fc\u30c9\u300d\u306f false \u3060\u3068\u300c\u633f\u5165\u9806\u300d\uff08\uff1d\u901a\u5e38\u306e LinkedHashMap \u3068\u540c\u3058\u52d5\u4f5c\uff09\u3001true \u3060\u3068\u300c\u30a2\u30af\u30bb\u30b9\u9806\u300d\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3064\u307e\u308a\u901a\u5e38\u306e LinkedHashMap \u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u633f\u5165\u3057\u305f\u9806\u756a\u306b\u8fd4\u3057\u307e\u3059\u304c\u3001\u3053\u308c\u3092 true \u306b\u3059\u308b\u3068\u3001\u30a2\u30af\u30bb\u30b9\u9806\uff08\u306e\u9006\u9806\uff09\u3067\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n\u3082\u3063\u3068\u7c21\u5358\u306b\u8a00\u3048\u3070\u300cget() \u3092\u3059\u308b\u3068\u8a72\u5f53\u306e\u8981\u7d20\u306f\u4e00\u756a\u5f8c\u308d\u306b\u79fb\u52d5\u3059\u308b\u300d\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\n```java\nMap<String, String> map = new LinkedHashMap<>(15, 0.75f, true);\n\nmap.put(\"one\", \"1st\");\nmap.put(\"two\", \"2nd\");\nmap.put(\"three\", \"3rd\");\nSystem.out.println(map);\n\nmap.get(\"one\");\nSystem.out.println(map);\n\nmap.get(\"two\");\nSystem.out.println(map);\n```\n\n```\n{one=1st, two=2nd, three=3rd}\n{two=2nd, three=3rd, one=1st}\n{three=3rd, one=1st, two=2nd}\n```\n\n\u307e\u305f\u3001LinkedHashMap\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30e1\u30bd\u30c3\u30c9\u304c\u5b58\u5728\u3057\u307e\u3059\u3002\n\n```java\nprotected boolean removeEldestEntry(Map.Entry<K,V> eldest)\n```\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u88c5\u3067\u306f false \u3092\u8fd4\u3057\u307e\u3059\u304c\u3001\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u304c true \u3092\u8fd4\u3059\u3068\u30de\u30c3\u30d7\u306e\u4e00\u756a\u53e4\u3044\u3082\u306e\uff08\u5148\u982d\u306e\u8981\u7d20\uff09\u304c\u524a\u9664\u3055\u308c\u307e\u3059\u3002\n\n\u3053\u306e\uff12\u3064\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u3001\u500b\u6570\u3092\u6307\u5b9a\u3057\u305fLRU\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```java\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\n/**\n * LRU\u30ad\u30e3\u30c3\u30b7\u30e5\u30de\u30c3\u30d7\n */\npublic class LruCacheMap<K, V> extends LinkedHashMap<K, V> {\n\t/** \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u30d0\u30fc\u30b8\u30e7\u30f3 */\n\tprivate static final long serialVersionUID = 1L;\n\n\t/** \u30ad\u30e3\u30c3\u30b7\u30e5\u30a8\u30f3\u30c8\u30ea\u6700\u5927\u6570 */\n\tprivate final int maxSize;\n\n\t/**\n\t * \u6307\u5b9a\u3055\u308c\u305f\u6700\u5927\u6570\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\n\t * @param maxSize \u6700\u5927\u6570\n\t */\n\tpublic LruCacheMap(int maxSize) {\n\t\tsuper(15, 0.75f, true);\n\t\tthis.maxSize = maxSize;\n\t}\n\n\t/** \u30a8\u30f3\u30c8\u30ea\u306e\u524a\u9664\u8981\u5426\u3092\u5224\u65ad */\n\t@Override\n\tprotected boolean removeEldestEntry(Map.Entry<K, V> eldest) {\n\t\treturn size() > maxSize;\n\t}\n}\n```\n\ngist: [LruCacheMap.java](https://gist.github.com/yoshi389111/ca0594f803d24103077a)\n\n\uff08\u9806\u5e8f\u4ed8\u3051\u30e2\u30fc\u30c9\u3092 false \u306b\u3059\u308c\u3070\u3001\u767b\u9332\u304c\u53e4\u3044\u3082\u306e\u304b\u3089\u6368\u3066\u308b\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u306a\u308a\u307e\u3059\uff09\n\n# \u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u306e\u53d6\u5f97\u6642\u306e\u6ce8\u610f\n\n\u3053\u306e LRU \u30ad\u30e3\u30c3\u30b7\u30e5\u3001\u3068\u3044\u3046\u304b\u300c\u9806\u5e8f\u4ed8\u3051\u30e2\u30fc\u30c9\u300d\u3092\u300c\u30a2\u30af\u30bb\u30b9\u9806\u300d\u306b\u3057\u305f LinkedHashMap \u306e\u5834\u5408\u306b\u306f\u3001get() \u3067\u30de\u30c3\u30d7\u69cb\u9020\u304c\u5909\u308f\u308b\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u5177\u4f53\u7684\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a2\u30af\u30bb\u30b9\u3092\u3059\u308b\u3068 java.util.ConcurrentModificationException \u4f8b\u5916\u304c\u767a\u751f\u3057\u307e\u3059\u3002\n\n```java\nMap<String, String> map = new LruCacheMap<>(10);\nmap.put(\"one\", \"1st\");\nmap.put(\"two\", \"2nd\");\nmap.put(\"three\", \"3rd\");\n\nfor (String key : map.keySet()) {\n    System.out.println(key + \"=\" + map.get(key));\n    // \u2605 map.get() \u3067\u30de\u30c3\u30d7\u69cb\u9020\u304c\u5909\u308f\u308b\u306e\u3067\u3001\u6b21\u306e\u53d6\u5f97\u3067\u4f8b\u5916\u767a\u751f\uff01\n}\n```\n\n\u4e00\u822c\u7684\u306b\u3001\u30de\u30c3\u30d7\u306e\u30ad\u30fc\u3068\u5024\u3092\u3042\u308f\u305b\u3066\u53d6\u5f97\u3059\u308b\u5834\u5408\u306b\u306f keySet() \u3067\u306f\u306a\u304f entrySet() \u3092\u4f7f\u3046\u306e\u304c\u6027\u80fd\u7684\u306b\u826f\u3044\u3068\u3055\u308c\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3057\u304b\u3057\u3001\u300c\u9806\u5e8f\u4ed8\u3051\u30e2\u30fc\u30c9\u300d\u3092\u300c\u30a2\u30af\u30bb\u30b9\u9806\u300d\u306b\u3057\u305f\u3068\u304d\u306b\u306f\u6027\u80fd\u3046\u3093\u306c\u3093\u3067\u306f\u306a\u304f\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u3044\u308b\u9593\u306b get() \u3057\u305f\u3089\u4f8b\u5916\u304c\u767a\u751f\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u306f\u899a\u3048\u3066\u304a\u3044\u305f\u307b\u3046\u304c\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n```java\nMap<String, String> map = new LruCacheMap<>(10);\nmap.put(\"one\", \"1st\");\nmap.put(\"two\", \"2nd\");\nmap.put(\"three\", \"3rd\");\n\nfor (Map.Entry<String, String> entry : map.entrySet()) {\n    System.out.println(entry.getKey() + \"=\" + entry.getValue());\n    // \u3053\u308c\u306a\u3089 OK!\n}\n```\n", "tags": ["Java", "map"]}