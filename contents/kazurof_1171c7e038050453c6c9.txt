{"context": " More than 1 year has passed since last update.mockito\u3068JMockit\u306b\u3064\u3044\u3066\u7c21\u5358\u306b\u307e\u3068\u3081\u307e\u3057\u305f\u3002\u4e21\u8005\u3068\u3082Java\u306e\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u5411\u3051\u30e2\u30c3\u30af\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306a\u306e\u3067\u3059\u304c\u3001\u4f7f\u3044\u65b9\u306f\u5168\u7136\u9055\u3044\u307e\u3059\u3002\u3055\u308f\u308a\u3092\u3061\u3087\u3063\u3068\u8abf\u3079\u305f\u3060\u3051\u3067\u3059\u3002\u6709\u8b58\u8005\u306e\u30b3\u30e1\u30f3\u30c8\u6b53\u8fce\u3057\u307e\u3059\u3002\n\n\u5bfe\u6bd4\n\n\n\n\nmockito\nJMockit\n\n\n\n\nURL\nhttp://mockito.org/\nhttp://jmockit.org/\n\n\n\u30d1\u30c3\u30b1\u30fc\u30b8\u540d\norg.mockito.*\nmockit.*\n\n\nAPI\nhttp://site.mockito.org/mockito/docs/current/org/mockito/Mockito.html\nhttp://jmockit.org/api1x/index.html\n\n\n\n\u30d7\u30ed\u30c0\u30af\u30c8\u540d\u3001\u30d1\u30c3\u30b1\u30fc\u30b8\u540d\u3068\u3082\u306b\u7d1b\u3089\u308f\u3057\u3044\u306e\u3067\u691c\u7d22\u3059\u308b\u3068\u304d\u306f\u6ce8\u610f\u3002\n\n\u30b3\u30fc\u30c9\u30b5\u30f3\u30d7\u30eb\nLogic.java\u304cCalc.java\u3092\u547c\u3093\u3067\u3044\u3066\u3001Calc\u3092\u30e2\u30c3\u30af\u3057\u3066Logic\u306e\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u305f\u3044\u3068\u3057\u307e\u3059\u3002\n\nmockito\u3067\u306e\u30b5\u30f3\u30d7\u30eb\n\nLogicTestInMockito.java\npackage org.example;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Mockito.anyInt;\nimport static org.mockito.Mockito.when;\n\npublic class LogicTestInMockito {\n\n  @Mock\n  Calc calc;\n\n  @InjectMocks\n  Logic logic;\n\n  @Before\n  public void before() {\n    MockitoAnnotations.initMocks(this);\n  }\n\n  @Test\n  public void testAsUsual() throws Exception {\n    logic.calc = new Calc();\n    int[] result = logic.getDivisibleNumbers();\n    assertTrue(result[0] % result[1] == 0);\n  }\n\n  @Test\n  public void testInMockito() throws Exception {\n    when(calc.remainder(anyInt(), anyInt())).thenAnswer(i -> {\n      // \u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f\u66f8\u3044\u3066\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u3053\u3053\u306f\u30e9\u30e0\u30c0\u304c\u4f7f\u3048\u307e\u3059\u3002\n      return ((Integer) i.getArguments()[1]) == 5 ? 0 : 1;\n    });\n    int[] result = logic.getDivisibleNumbers();\n    assertTrue(result[1] == 5);\n  }\n}\n\n\n\nJMockit\u3067\u306e\u30b5\u30f3\u30d7\u30eb\u3000\uff08Expectations API\u3067\u306e\u4f8b\uff09\n\nLogicTestInJMockit.java\npackage org.example;\n\nimport mockit.Expectations;\nimport mockit.Mocked;\nimport mockit.Verifications;\nimport mockit.integration.junit4.JMockit;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n\nimport static org.junit.Assert.assertTrue;\n\n@RunWith(JMockit.class)\npublic class LogicTestInJMockit {\n\n  @Test\n  public void testAsUsual() throws Exception {\n    Logic logic = new Logic(new Calc());\n    int[] result = logic.getDivisibleNumbers();\n    assertTrue(result[0] % result[1] == 0);\n  }\n\n\n  @Test\n  public void testInJMockit(@Mocked Calc calc) throws Exception {\n    new Expectations() {{\n      calc.remainder(anyInt, 5);\n      result = 0;\n      calc.remainder(anyInt, anyInt);\n      result = 1;\n    }};\n    Logic logic = new Logic(calc);\n    int[] result = logic.getDivisibleNumbers();\n    new Verifications() {{\n      calc.remainder(anyInt, 5);\n      minTimes = 1;\n    }};\n    assertTrue(result[1] == 5);\n  }\n}\n\n\n\nJMockit\u3067\u306e\u30b5\u30f3\u30d7\u30eb\u3000\uff08Mockups API\u3067\u306e\u4f8b\uff09\n\nLogicTestInJMockitMockups.java\npackage org.example;\n\nimport mockit.Mock;\nimport mockit.MockUp;\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertTrue;\n\npublic class LogicTestInJMockitMockups {\n\n  // \u3053\u306e\u30c6\u30b9\u30c8\u304c\u3001testInJMockitWithMockups() \u306e\u5f8c\u306b\u5b9f\u884c\u3055\u308c\u308b\u3068\n  // \u30e2\u30c3\u30af\u3057\u3066\u3044\u306a\u3044Calc\u3092\u4f7f\u3063\u3066\u3044\u308b\u3064\u3082\u308a\u304c\u30e2\u30c3\u30af\u3055\u308c\u305f\u3082\u306e\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u69d8\u5b50\u3002\n  @Test\n  public void testAsUsual() throws Exception {\n    Logic logic = new Logic(new Calc());\n    int[] result = logic.getDivisibleNumbers();\n    assertTrue(result[0] % result[1] == 0);\n  }\n\n\n  @Test\n  public void testInJMockitWithMockups() throws Exception {\n    new MockUp<Calc>() {\n      @Mock()\n      public int remainder(int dividend, int divisor) {\n        return divisor == 5 ? 0 : 1;\n      }\n    };\n    Logic logic = new Logic(new Calc());\n    int[] result = logic.getDivisibleNumbers();\n    assertTrue(result[1] == 5);\n  }\n}\n\n\n\n\u30e2\u30c3\u30af\u5bfe\u8c61\u306e\u30b3\u30fc\u30c9\n\nCalc.java\npackage org.example;\n\npublic class Calc {\n  int remainder(int dividend, int divisor) {\n    return dividend % divisor;\n  }\n}\n\n\n\n\u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30b3\u30fc\u30c9\n\nLogic.java\npackage org.example;\n\npublic class Logic {\n  Calc calc;\n\n  Logic(Calc calc) {\n    this.calc = calc;\n  }\n  /**\u5272\u308a\u5207\u308c\u308b\u6570\u5b57\u306e\u30da\u30a2\u3092\u30a2\u30c8\u30e9\u30f3\u30c0\u30e0\u306b\u8fd4\u3059\u3002*/\n  int[] getDivisibleNumbers() {\n    while (true) {\n      int candidate = (int) (Math.random() * 100) + 1;\n      int candidate2 = (int) (Math.random() * 10) + 1;\n      if (calc.remainder(candidate, candidate2) == 0) {\n        return new int[]{candidate, candidate2};\n      }\n    }\n  }\n}\n\n\n\n\u5bf8\u8a55\nmockito\u306f\u30e2\u30c3\u30af\u306e\u6319\u52d5\u3092\u3000when() doReturn() thenAnswer() \u3067\u6c7a\u3081\u3066\u3044\u304f\u30b9\u30bf\u30a4\u30eb\u3002 \u30c1\u30a7\u30fc\u30f3\u8868\u8a18\u304c\u7dba\u9e97\u3068\u3082\u7169\u304f\u306a\u308b\u3068\u3082\u8a00\u308f\u308c\u3066\u3044\u308b\u69d8\u5b50\u3002\u7d20\u6734\u3067\u3059\u304c\u305f\u304f\u3055\u3093\u3084\u308b\u3068\u9650\u754c\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\nJMockit\u306fAPI\u306b\u30af\u30bb\u304c\u3042\u308b\u304c\u3001\u6163\u308c\u308c\u3070OK\u3068\u3044\u3046\u8a18\u4e8b\u3092\u3061\u3089\u307b\u3089\u898b\u3064\u304b\u308a\u307e\u3059\u3002\uff08\u306a\u306b\u3052\u306a\u304f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u4f7f\u3063\u3066\u3066\u6163\u308c\u308b\u306e\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u3072\u3068\u306f\u3044\u305d\u3046\u3002\uff09\u500b\u4eba\u7684\u306b\u306f Mockups API\u306e\u5834\u5408\u3001\u30e2\u30c3\u30af\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u306b\u5bfe\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u30c1\u30a7\u30c3\u30af\u304c\u304b\u304b\u3089\u306a\u3044\u3053\u3068\u3084\u3001new MockUp<Calc>(){...}\u3057\u305f\u5f8c\u306f\u3001\u30e2\u30c3\u30af\u3057\u3066\u3044\u306a\u3044Calc\u304c\u4f7f\u3048\u306a\u304f\u306a\u308b\u306a\u3069\u3001\u5b66\u7fd2\u66f2\u7dda\u304c\u3061\u3087\u3063\u3068\u53b3\u3057\u3044\u3068\u601d\u308f\u308c\u307e\u3057\u305f\u3002\u5148\u306e\u4f8b\u3060\u3068LogicTestInJMockitMockups.java\u306f\u3001\u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u306e\u9806\u5e8f\u6b21\u7b2c\u3067testAsUsual()\u304c\u5931\u6557\u3057\u307e\u3059\u3002\u307e\u305f\u3001mockito\u3088\u308a\u3082\u547c\u3073\u51fa\u3057\u56de\u6570\u306e\u30c6\u30b9\u30c8\u3068\u304b\u5b9f\u5f15\u6570\u3092\u30e2\u30c3\u30af\u304c\u53d6\u5f97\u3067\u304d\u308b\u3068\u304b\u7d30\u304b\u3044\u6a5f\u80fd\u304c\u5145\u5b9f\u3057\u3066\u3044\u305d\u3046\u306a\u69d8\u5b50\u3067\u3059\u3002(mockit.Invocation mockit.Mock#invocations\u306a\u3069\u3002)\n\n\u79c1\u306e\u7d50\u8ad6\n\u5b66\u7fd2\u66f2\u7dda\u304c\u4f4e\u305d\u3046\u3002\u30e9\u30e0\u30c0\u304c\u4f7f\u3048\u3066\u5e78\u305b\u306a\u6c17\u6301\u3061\u306b\u306a\u308c\u305d\u3046\u3002\u30ed\u30b4\u306e\u30c7\u30b6\u30a4\u30f3\u304c\u826f\u3044\u3002\u306a\u3069\u3068\u3044\u3046\u8584\u3063\u307a\u3089\u3044\u7406\u7531\u3067\u3068\u308a\u3042\u3048\u305amockito\u3092\u4f7f\u3063\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\u9650\u754c\u3092\u611f\u3058\u305f\u3089 JMockit\u3082\u6df1\u8015\u3057\u3066\u307f\u3088\u3046\u304b\u306a\u3068\u3002\n\n\u53c2\u8003\u30ea\u30f3\u30af\n\nhttp://dontpanic.42.nl/2013/04/mockito-powermock-vs-jmockit.html\nhttp://stackoverflow.com/a/6439134\n\n\u898b\u3064\u304b\u3063\u305f\u6bd4\u8f03\u8a18\u4e8b\u306f\u4e21\u65b9\u3068\u3082 JMockit \u62bc\u3057\u3002\u305f\u3060\u30572013\u5e74\u3068\u304b\u3061\u3087\u3063\u3068\u53e4\u3044\u3002\u591a\u5206\u3053\u306e\u30cd\u30bf\u81ea\u4f53\u306f\u65e2\u306bhot\u3067\u306f\u306a\u304f\u3066\u3001\u4e21\u8005\u305d\u308c\u306a\u308a\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u60f3\u50cf\u3059\u308b\u6b21\u7b2c\u3002\n\n\u30d0\u30fc\u30b8\u30e7\u30f3\u756a\u53f7\u306a\u3069\n\nmockito 1.10.19\nJMockit 1.21\nJava 8\n\nmockito\u3068JMockit\u306b\u3064\u3044\u3066\u7c21\u5358\u306b\u307e\u3068\u3081\u307e\u3057\u305f\u3002\u4e21\u8005\u3068\u3082Java\u306e\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u5411\u3051\u30e2\u30c3\u30af\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306a\u306e\u3067\u3059\u304c\u3001\u4f7f\u3044\u65b9\u306f\u5168\u7136\u9055\u3044\u307e\u3059\u3002\u3055\u308f\u308a\u3092\u3061\u3087\u3063\u3068\u8abf\u3079\u305f\u3060\u3051\u3067\u3059\u3002\u6709\u8b58\u8005\u306e\u30b3\u30e1\u30f3\u30c8\u6b53\u8fce\u3057\u307e\u3059\u3002\n\n# \u5bfe\u6bd4\n\n|            | mockito              |  JMockit            | \n|-----------:|:--------------------:|:-------------------:|\n| URL        | http://mockito.org/  | http://jmockit.org/ |    \n| \u30d1\u30c3\u30b1\u30fc\u30b8\u540d| org.mockito.*        | mockit.*            |    \n| API        | http://site.mockito.org/mockito/docs/current/org/mockito/Mockito.html         |   http://jmockit.org/api1x/index.html |  \n\n\u30d7\u30ed\u30c0\u30af\u30c8\u540d\u3001\u30d1\u30c3\u30b1\u30fc\u30b8\u540d\u3068\u3082\u306b\u7d1b\u3089\u308f\u3057\u3044\u306e\u3067\u691c\u7d22\u3059\u308b\u3068\u304d\u306f\u6ce8\u610f\u3002\n\n# \u30b3\u30fc\u30c9\u30b5\u30f3\u30d7\u30eb\n\n `Logic.java`\u304c`Calc.java`\u3092\u547c\u3093\u3067\u3044\u3066\u3001Calc\u3092\u30e2\u30c3\u30af\u3057\u3066Logic\u306e\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u305f\u3044\u3068\u3057\u307e\u3059\u3002\n\n\n## mockito\u3067\u306e\u30b5\u30f3\u30d7\u30eb\n\n``` LogicTestInMockito.java\npackage org.example;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Mockito.anyInt;\nimport static org.mockito.Mockito.when;\n\npublic class LogicTestInMockito {\n\n  @Mock\n  Calc calc;\n\n  @InjectMocks\n  Logic logic;\n\n  @Before\n  public void before() {\n    MockitoAnnotations.initMocks(this);\n  }\n\n  @Test\n  public void testAsUsual() throws Exception {\n    logic.calc = new Calc();\n    int[] result = logic.getDivisibleNumbers();\n    assertTrue(result[0] % result[1] == 0);\n  }\n\n  @Test\n  public void testInMockito() throws Exception {\n    when(calc.remainder(anyInt(), anyInt())).thenAnswer(i -> {\n      // \u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f\u66f8\u3044\u3066\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u3053\u3053\u306f\u30e9\u30e0\u30c0\u304c\u4f7f\u3048\u307e\u3059\u3002\n      return ((Integer) i.getArguments()[1]) == 5 ? 0 : 1;\n    });\n    int[] result = logic.getDivisibleNumbers();\n    assertTrue(result[1] == 5);\n  }\n}\n```\n\n## JMockit\u3067\u306e\u30b5\u30f3\u30d7\u30eb\u3000\uff08Expectations API\u3067\u306e\u4f8b\uff09\n\n``` LogicTestInJMockit.java\npackage org.example;\n\nimport mockit.Expectations;\nimport mockit.Mocked;\nimport mockit.Verifications;\nimport mockit.integration.junit4.JMockit;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n\nimport static org.junit.Assert.assertTrue;\n\n@RunWith(JMockit.class)\npublic class LogicTestInJMockit {\n\n  @Test\n  public void testAsUsual() throws Exception {\n    Logic logic = new Logic(new Calc());\n    int[] result = logic.getDivisibleNumbers();\n    assertTrue(result[0] % result[1] == 0);\n  }\n\n\n  @Test\n  public void testInJMockit(@Mocked Calc calc) throws Exception {\n    new Expectations() {{\n      calc.remainder(anyInt, 5);\n      result = 0;\n      calc.remainder(anyInt, anyInt);\n      result = 1;\n    }};\n    Logic logic = new Logic(calc);\n    int[] result = logic.getDivisibleNumbers();\n    new Verifications() {{\n      calc.remainder(anyInt, 5);\n      minTimes = 1;\n    }};\n    assertTrue(result[1] == 5);\n  }\n}\n```\n\n## JMockit\u3067\u306e\u30b5\u30f3\u30d7\u30eb\u3000\uff08Mockups API\u3067\u306e\u4f8b\uff09\n\n\n``` LogicTestInJMockitMockups.java\npackage org.example;\n\nimport mockit.Mock;\nimport mockit.MockUp;\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertTrue;\n\npublic class LogicTestInJMockitMockups {\n\n  // \u3053\u306e\u30c6\u30b9\u30c8\u304c\u3001testInJMockitWithMockups() \u306e\u5f8c\u306b\u5b9f\u884c\u3055\u308c\u308b\u3068\n  // \u30e2\u30c3\u30af\u3057\u3066\u3044\u306a\u3044Calc\u3092\u4f7f\u3063\u3066\u3044\u308b\u3064\u3082\u308a\u304c\u30e2\u30c3\u30af\u3055\u308c\u305f\u3082\u306e\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u69d8\u5b50\u3002\n  @Test\n  public void testAsUsual() throws Exception {\n    Logic logic = new Logic(new Calc());\n    int[] result = logic.getDivisibleNumbers();\n    assertTrue(result[0] % result[1] == 0);\n  }\n\n\n  @Test\n  public void testInJMockitWithMockups() throws Exception {\n    new MockUp<Calc>() {\n      @Mock()\n      public int remainder(int dividend, int divisor) {\n        return divisor == 5 ? 0 : 1;\n      }\n    };\n    Logic logic = new Logic(new Calc());\n    int[] result = logic.getDivisibleNumbers();\n    assertTrue(result[1] == 5);\n  }\n}\n```\n\n## \u30e2\u30c3\u30af\u5bfe\u8c61\u306e\u30b3\u30fc\u30c9\n\n``` Calc.java \npackage org.example;\n\npublic class Calc {\n  int remainder(int dividend, int divisor) {\n    return dividend % divisor;\n  }\n}\n```\n\n## \u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30b3\u30fc\u30c9\n\n``` Logic.java\npackage org.example;\n\npublic class Logic {\n  Calc calc;\n\n  Logic(Calc calc) {\n    this.calc = calc;\n  }\n  /**\u5272\u308a\u5207\u308c\u308b\u6570\u5b57\u306e\u30da\u30a2\u3092\u30a2\u30c8\u30e9\u30f3\u30c0\u30e0\u306b\u8fd4\u3059\u3002*/\n  int[] getDivisibleNumbers() {\n    while (true) {\n      int candidate = (int) (Math.random() * 100) + 1;\n      int candidate2 = (int) (Math.random() * 10) + 1;\n      if (calc.remainder(candidate, candidate2) == 0) {\n        return new int[]{candidate, candidate2};\n      }\n    }\n  }\n}\n```\n\n\n# \u5bf8\u8a55\n\nmockito\u306f\u30e2\u30c3\u30af\u306e\u6319\u52d5\u3092\u3000`when()` `doReturn()` `thenAnswer()` \u3067\u6c7a\u3081\u3066\u3044\u304f\u30b9\u30bf\u30a4\u30eb\u3002 \u30c1\u30a7\u30fc\u30f3\u8868\u8a18\u304c\u7dba\u9e97\u3068\u3082\u7169\u304f\u306a\u308b\u3068\u3082\u8a00\u308f\u308c\u3066\u3044\u308b\u69d8\u5b50\u3002\u7d20\u6734\u3067\u3059\u304c\u305f\u304f\u3055\u3093\u3084\u308b\u3068\u9650\u754c\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\nJMockit\u306fAPI\u306b\u30af\u30bb\u304c\u3042\u308b\u304c\u3001\u6163\u308c\u308c\u3070OK\u3068\u3044\u3046\u8a18\u4e8b\u3092\u3061\u3089\u307b\u3089\u898b\u3064\u304b\u308a\u307e\u3059\u3002\uff08\u306a\u306b\u3052\u306a\u304f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u4f7f\u3063\u3066\u3066\u6163\u308c\u308b\u306e\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u3072\u3068\u306f\u3044\u305d\u3046\u3002\uff09\u500b\u4eba\u7684\u306b\u306f Mockups API\u306e\u5834\u5408\u3001\u30e2\u30c3\u30af\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u306b\u5bfe\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u30c1\u30a7\u30c3\u30af\u304c\u304b\u304b\u3089\u306a\u3044\u3053\u3068\u3084\u3001`new MockUp<Calc>(){...} `\u3057\u305f\u5f8c\u306f\u3001\u30e2\u30c3\u30af\u3057\u3066\u3044\u306a\u3044`Calc`\u304c\u4f7f\u3048\u306a\u304f\u306a\u308b\u306a\u3069\u3001\u5b66\u7fd2\u66f2\u7dda\u304c\u3061\u3087\u3063\u3068\u53b3\u3057\u3044\u3068\u601d\u308f\u308c\u307e\u3057\u305f\u3002\u5148\u306e\u4f8b\u3060\u3068`LogicTestInJMockitMockups.java`\u306f\u3001\u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u306e\u9806\u5e8f\u6b21\u7b2c\u3067`testAsUsual()`\u304c\u5931\u6557\u3057\u307e\u3059\u3002\u307e\u305f\u3001mockito\u3088\u308a\u3082\u547c\u3073\u51fa\u3057\u56de\u6570\u306e\u30c6\u30b9\u30c8\u3068\u304b\u5b9f\u5f15\u6570\u3092\u30e2\u30c3\u30af\u304c\u53d6\u5f97\u3067\u304d\u308b\u3068\u304b\u7d30\u304b\u3044\u6a5f\u80fd\u304c\u5145\u5b9f\u3057\u3066\u3044\u305d\u3046\u306a\u69d8\u5b50\u3067\u3059\u3002(`mockit.Invocation` `mockit.Mock#invocations`\u306a\u3069\u3002)\n\n# \u79c1\u306e\u7d50\u8ad6\n\n\u5b66\u7fd2\u66f2\u7dda\u304c\u4f4e\u305d\u3046\u3002\u30e9\u30e0\u30c0\u304c\u4f7f\u3048\u3066\u5e78\u305b\u306a\u6c17\u6301\u3061\u306b\u306a\u308c\u305d\u3046\u3002\u30ed\u30b4\u306e\u30c7\u30b6\u30a4\u30f3\u304c\u826f\u3044\u3002\u306a\u3069\u3068\u3044\u3046\u8584\u3063\u307a\u3089\u3044\u7406\u7531\u3067\u3068\u308a\u3042\u3048\u305amockito\u3092\u4f7f\u3063\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\u9650\u754c\u3092\u611f\u3058\u305f\u3089 JMockit\u3082\u6df1\u8015\u3057\u3066\u307f\u3088\u3046\u304b\u306a\u3068\u3002\n\n# \u53c2\u8003\u30ea\u30f3\u30af\n\n- http://dontpanic.42.nl/2013/04/mockito-powermock-vs-jmockit.html\n- http://stackoverflow.com/a/6439134\n\n\u898b\u3064\u304b\u3063\u305f\u6bd4\u8f03\u8a18\u4e8b\u306f\u4e21\u65b9\u3068\u3082 JMockit \u62bc\u3057\u3002\u305f\u3060\u30572013\u5e74\u3068\u304b\u3061\u3087\u3063\u3068\u53e4\u3044\u3002\u591a\u5206\u3053\u306e\u30cd\u30bf\u81ea\u4f53\u306f\u65e2\u306bhot\u3067\u306f\u306a\u304f\u3066\u3001\u4e21\u8005\u305d\u308c\u306a\u308a\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u60f3\u50cf\u3059\u308b\u6b21\u7b2c\u3002\n\n# \u30d0\u30fc\u30b8\u30e7\u30f3\u756a\u53f7\u306a\u3069\n\n- mockito 1.10.19\n- JMockit 1.21\n- Java 8\n", "tags": ["Java", "jMockit", "Mockito"]}