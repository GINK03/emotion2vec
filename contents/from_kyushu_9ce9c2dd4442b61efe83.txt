{"context": "\u6a2a\u6d5c\u3078\u306a\u3061\u3087\u3053\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u52c9\u5f37\u4f1a\u306b\u3066\u904e\u53bb\u306b\u51fa\u984c\u3055\u308c\u305f\u304f\u306d\u304f\u306d\u5897\u52a0\u5217\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n\u56de\u7b54\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306f50\u5206\u7a0b\u5ea6\u3002\n\u591a\u5206\u89e3\u6cd5\u3068\u3057\u3066\u306f\u3059\u3054\u304f\u611a\u76f4\u3060\u3068\u601d\u308f\u308c\u308b\u3002\nSnakeLine#longest\u306e\u4e2d\u3067break\u3092\u4f7f\u3046\u304b\u4f7f\u308f\u306a\u3044\u304b\u306f\u60a9\u3093\u3060\u306e\u3060\u304c\u3001\u7121\u99c4\u306b\u8a08\u7b97\u3059\u308b\u3053\u3068\u3082\u306a\u3044\u306a\u3068\u601d\u3063\u3066break\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u3002\nclass SnakeLine\n  def initialize input\n    @field = input.split(\"/\").map{|line|\n      line.chars.map &:to_i\n    }\n  end\n\n  def longest\n    (0..9).inject(0){|max, i|\n      break max if max > (10 - i)\n      detect_axis(i).each_with_object([max]){|(x, y), r|\n        r << longest_route_size(x, y)\n      }.max\n    }\n  end\n\n  private\n\n  def detect_axis i\n    @field.each_with_object([]).with_index{|(line, r), y|\n      line.each.with_index{|v, x|\n        r << [x, y] if v === i\n      }\n    }\n  end\n\n  def longest_route_size x, y\n    (move(x, y).map{|(xx, yy)|\n      longest_route_size(xx, yy)\n    }.max || 0) + 1\n  end\n\n  def move x, y\n    [\n      [x - 1, y],\n      [x + 1, y],\n      [x, y - 1],\n      [x, y + 1]\n    ].select{|(xx, yy)|\n      xx.between?(0, 4) and yy.between?(0, 4) and @field[yy][xx] > @field[y][x]\n    }\n  end\nend\n\ntest = <<_TEST\n/*0*/ test( \"01224/82925/69076/32298/21065\", \"6\" );    \n/*1*/ test( \"03478/12569/03478/12569/03478\", \"10\" );    \n/*2*/ test( \"09900/28127/87036/76545/87650\", \"10\" );    \n/*3*/ test( \"77777/77777/77777/77777/77777\", \"1\" );    \n/*4*/ test( \"00000/11111/22222/33333/44444\", \"5\" );    \n/*5*/ test( \"01234/12345/23456/34567/45678\", \"9\" );    \n/*6*/ test( \"10135/21245/43456/55567/77789\", \"8\" );    \n/*7*/ test( \"33333/33333/55555/55555/77777\", \"2\" );    \n/*8*/ test( \"01234/11234/22234/33334/44444\", \"5\" );    \n/*9*/ test( \"98765/88765/77765/66665/55555\", \"5\" );    \n/*10*/ test( \"01234/10325/23016/32107/45670\", \"8\" );    \n/*11*/ test( \"34343/43434/34343/43434/34343\", \"2\" );    \n/*12*/ test( \"14714/41177/71141/17414/47141\", \"3\" );    \n/*13*/ test( \"13891/31983/89138/98319/13891\", \"4\" );    \n/*14*/ test( \"01369/36901/90136/13690/69013\", \"5\" );    \n/*15*/ test( \"02468/24689/46898/68986/89864\", \"6\" );    \n/*16*/ test( \"86420/68642/46864/24686/02468\", \"5\" );    \n/*17*/ test( \"77777/75557/75357/75557/77777\", \"3\" );    \n/*18*/ test( \"53135/33133/11111/33133/53135\", \"3\" );    \n/*19*/ test( \"01356/23501/45024/61246/13461\", \"5\" );    \n/*20*/ test( \"46803/68025/91358/34792/78136\", \"4\" );    \n/*21*/ test( \"66788/56789/55799/43210/33211\", \"9\" );    \n/*22*/ test( \"40000/94321/96433/97644/98654\", \"9\" );    \n/*23*/ test( \"58950/01769/24524/24779/17069\", \"6\" );    \n/*24*/ test( \"97691/01883/98736/51934/81403\", \"4\" );    \n/*25*/ test( \"92049/27798/69377/45936/80277\", \"5\" );    \n/*26*/ test( \"97308/77113/08645/62578/44774\", \"5\" );    \n/*27*/ test( \"90207/17984/01982/31272/60926\", \"6\" );    \n/*28*/ test( \"62770/65146/06512/15407/89570\", \"4\" );    \n/*29*/ test( \"93914/46889/27554/58581/18703\", \"5\" );    \n/*30*/ test( \"42035/12430/60728/30842/90381\", \"5\" );    \n/*31*/ test( \"90347/53880/67954/95256/68777\", \"6\" );    \n/*32*/ test( \"05986/60473/01606/16425/46292\", \"5\" );    \n/*33*/ test( \"18053/90486/24320/04250/03853\", \"5\" );    \n/*34*/ test( \"36865/13263/67280/18600/12774\", \"5\" );    \n/*35*/ test( \"72456/72052/79971/14656/41151\", \"5\" );    \n/*36*/ test( \"94888/28649/05561/76571/97567\", \"5\" );    \n/*37*/ test( \"50214/94693/88718/78922/55359\", \"5\" );    \n/*38*/ test( \"76502/99325/17987/31737/93874\", \"7\" );    \n/*39*/ test( \"87142/14764/13014/00248/73105\", \"6\" );    \n/*40*/ test( \"24573/71679/48704/19786/91834\", \"7\" );    \n/*41*/ test( \"20347/61889/06074/61263/20519\", \"7\" );    \n/*42*/ test( \"74344/97459/97302/14439/35689\", \"6\" );    \n/*43*/ test( \"04794/52198/50294/09340/24160\", \"5\" );    \n/*44*/ test( \"41065/69344/64698/54167/43348\", \"7\" );    \n/*45*/ test( \"39947/15696/03482/19574/70235\", \"7\" );    \n/*46*/ test( \"92767/16790/84897/69765/75734\", \"7\" );    \n/*47*/ test( \"09654/79610/05070/23456/74687\", \"8\" );    \n/*48*/ test( \"73998/98799/98707/05633/23915\", \"8\" );    \n/*49*/ test( \"35661/17480/89723/64335/27217\", \"7\" );    \n/*50*/ test( \"02489/77571/84873/03879/84460\", \"7\" );\n_TEST\n\nrequire 'minitest/autorun'\n\ndescribe 'SnakeLine' do\n  test.split(\"\\n\").each do |line|\n    t, n, input, expect = line.match(/^\\/\\*(\\d+)\\*\\/\\s*test\\(\\s*\"([^\"]+)\",\\s*\"([^\"]+)\"\\s*\\);*\\s*$/).to_a\n    snake = SnakeLine.new input\n    it input do\n      assert_equal expect, snake.longest.to_s\n    end\n  end\nend\n\n\n[\u6a2a\u6d5c\u3078\u306a\u3061\u3087\u3053\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u52c9\u5f37\u4f1a](https://yhpg.doorkeeper.jp/)\u306b\u3066\u904e\u53bb\u306b\u51fa\u984c\u3055\u308c\u305f[\u304f\u306d\u304f\u306d\u5897\u52a0\u5217](http://nabetani.sakura.ne.jp/hena/ord23snakemoinc/)\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n\u56de\u7b54\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306f50\u5206\u7a0b\u5ea6\u3002\n\n\u591a\u5206\u89e3\u6cd5\u3068\u3057\u3066\u306f\u3059\u3054\u304f\u611a\u76f4\u3060\u3068\u601d\u308f\u308c\u308b\u3002\n`SnakeLine#longest`\u306e\u4e2d\u3067`break`\u3092\u4f7f\u3046\u304b\u4f7f\u308f\u306a\u3044\u304b\u306f\u60a9\u3093\u3060\u306e\u3060\u304c\u3001\u7121\u99c4\u306b\u8a08\u7b97\u3059\u308b\u3053\u3068\u3082\u306a\u3044\u306a\u3068\u601d\u3063\u3066`break`\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u3002\n\n```ruby\nclass SnakeLine\n  def initialize input\n    @field = input.split(\"/\").map{|line|\n      line.chars.map &:to_i\n    }\n  end\n\n  def longest\n    (0..9).inject(0){|max, i|\n      break max if max > (10 - i)\n      detect_axis(i).each_with_object([max]){|(x, y), r|\n        r << longest_route_size(x, y)\n      }.max\n    }\n  end\n\n  private\n\n  def detect_axis i\n    @field.each_with_object([]).with_index{|(line, r), y|\n      line.each.with_index{|v, x|\n        r << [x, y] if v === i\n      }\n    }\n  end\n\n  def longest_route_size x, y\n    (move(x, y).map{|(xx, yy)|\n      longest_route_size(xx, yy)\n    }.max || 0) + 1\n  end\n\n  def move x, y\n    [\n      [x - 1, y],\n      [x + 1, y],\n      [x, y - 1],\n      [x, y + 1]\n    ].select{|(xx, yy)|\n      xx.between?(0, 4) and yy.between?(0, 4) and @field[yy][xx] > @field[y][x]\n    }\n  end\nend\n\ntest = <<_TEST\n/*0*/ test( \"01224/82925/69076/32298/21065\", \"6\" );    \n/*1*/ test( \"03478/12569/03478/12569/03478\", \"10\" );    \n/*2*/ test( \"09900/28127/87036/76545/87650\", \"10\" );    \n/*3*/ test( \"77777/77777/77777/77777/77777\", \"1\" );    \n/*4*/ test( \"00000/11111/22222/33333/44444\", \"5\" );    \n/*5*/ test( \"01234/12345/23456/34567/45678\", \"9\" );    \n/*6*/ test( \"10135/21245/43456/55567/77789\", \"8\" );    \n/*7*/ test( \"33333/33333/55555/55555/77777\", \"2\" );    \n/*8*/ test( \"01234/11234/22234/33334/44444\", \"5\" );    \n/*9*/ test( \"98765/88765/77765/66665/55555\", \"5\" );    \n/*10*/ test( \"01234/10325/23016/32107/45670\", \"8\" );    \n/*11*/ test( \"34343/43434/34343/43434/34343\", \"2\" );    \n/*12*/ test( \"14714/41177/71141/17414/47141\", \"3\" );    \n/*13*/ test( \"13891/31983/89138/98319/13891\", \"4\" );    \n/*14*/ test( \"01369/36901/90136/13690/69013\", \"5\" );    \n/*15*/ test( \"02468/24689/46898/68986/89864\", \"6\" );    \n/*16*/ test( \"86420/68642/46864/24686/02468\", \"5\" );    \n/*17*/ test( \"77777/75557/75357/75557/77777\", \"3\" );    \n/*18*/ test( \"53135/33133/11111/33133/53135\", \"3\" );    \n/*19*/ test( \"01356/23501/45024/61246/13461\", \"5\" );    \n/*20*/ test( \"46803/68025/91358/34792/78136\", \"4\" );    \n/*21*/ test( \"66788/56789/55799/43210/33211\", \"9\" );    \n/*22*/ test( \"40000/94321/96433/97644/98654\", \"9\" );    \n/*23*/ test( \"58950/01769/24524/24779/17069\", \"6\" );    \n/*24*/ test( \"97691/01883/98736/51934/81403\", \"4\" );    \n/*25*/ test( \"92049/27798/69377/45936/80277\", \"5\" );    \n/*26*/ test( \"97308/77113/08645/62578/44774\", \"5\" );    \n/*27*/ test( \"90207/17984/01982/31272/60926\", \"6\" );    \n/*28*/ test( \"62770/65146/06512/15407/89570\", \"4\" );    \n/*29*/ test( \"93914/46889/27554/58581/18703\", \"5\" );    \n/*30*/ test( \"42035/12430/60728/30842/90381\", \"5\" );    \n/*31*/ test( \"90347/53880/67954/95256/68777\", \"6\" );    \n/*32*/ test( \"05986/60473/01606/16425/46292\", \"5\" );    \n/*33*/ test( \"18053/90486/24320/04250/03853\", \"5\" );    \n/*34*/ test( \"36865/13263/67280/18600/12774\", \"5\" );    \n/*35*/ test( \"72456/72052/79971/14656/41151\", \"5\" );    \n/*36*/ test( \"94888/28649/05561/76571/97567\", \"5\" );    \n/*37*/ test( \"50214/94693/88718/78922/55359\", \"5\" );    \n/*38*/ test( \"76502/99325/17987/31737/93874\", \"7\" );    \n/*39*/ test( \"87142/14764/13014/00248/73105\", \"6\" );    \n/*40*/ test( \"24573/71679/48704/19786/91834\", \"7\" );    \n/*41*/ test( \"20347/61889/06074/61263/20519\", \"7\" );    \n/*42*/ test( \"74344/97459/97302/14439/35689\", \"6\" );    \n/*43*/ test( \"04794/52198/50294/09340/24160\", \"5\" );    \n/*44*/ test( \"41065/69344/64698/54167/43348\", \"7\" );    \n/*45*/ test( \"39947/15696/03482/19574/70235\", \"7\" );    \n/*46*/ test( \"92767/16790/84897/69765/75734\", \"7\" );    \n/*47*/ test( \"09654/79610/05070/23456/74687\", \"8\" );    \n/*48*/ test( \"73998/98799/98707/05633/23915\", \"8\" );    \n/*49*/ test( \"35661/17480/89723/64335/27217\", \"7\" );    \n/*50*/ test( \"02489/77571/84873/03879/84460\", \"7\" );\n_TEST\n\nrequire 'minitest/autorun'\n\ndescribe 'SnakeLine' do\n  test.split(\"\\n\").each do |line|\n    t, n, input, expect = line.match(/^\\/\\*(\\d+)\\*\\/\\s*test\\(\\s*\"([^\"]+)\",\\s*\"([^\"]+)\"\\s*\\);*\\s*$/).to_a\n    snake = SnakeLine.new input\n    it input do\n      assert_equal expect, snake.longest.to_s\n    end\n  end\nend\n```\n", "tags": ["Ruby", "\u3069\u3046\u66f8\u304f", "yhpg"]}