{"context": " More than 1 year has passed since last update.\u203b\u3068\u308a\u3042\u3048\u305a\u8abf\u3079\u306a\u304c\u3089\u66f8\u7740\u59cb\u3081\u305f\u611f\u3058\u306a\u306e\u3067\u3042\u3068\u3067\u307e\u3068\u3081\u307e\u3059\u3002\n\u203b\u305f\u3076\u3093\u9593\u9055\u3044\u3092\u542b\u3093\u3067\u308b\u3068\u306f\u601d\u3046\n\nmemo\n\n\nevent queue \u3068 microtask queue \u304c\u3042\u308b\n\nevent queue contains many microtask queues \u306a\u8a8d\u8b58\nNode\u3067\u3044\u3046\u3068\u3053\u306esetTimeout()\u3068proess.nextTick()\u7684\u306a\u9055\u3044\nFuture\u304cFuture\u8fd4\u3059\u3068\u3001\u8fd4\u3055\u308c\u305fFuture\u304c\u4f55\u8fd4\u3059\u304b\u5f85\u3064\n\n\nevent queue \u3068 microtask queue\n\n\nAs the following figure shows, when main() exits, the event loop starts its work. First, it executes any microtasks, in FIFO order. Then it dequeues and handles the first item on the event queue. Then it repeats the cycle: execute all microtasks, and then handle the next item on the event queue. \n\n\u8d85\u610f\u8a33\u3002\u9593\u9055\u3063\u3066\u305f\u3089\u3054\u3081\u3093\u3066\u3078\u307a\u308d\n(\u6b21\u306e\u56f3\u304c\u793a\u3059\u3088\u3046\u306b\u3001\uff09 main() \u304c\u5b9f\u884c\u3055\u308c\u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u304c\u958b\u59cb\u3055\u308c\u307e\u3059\u3002\n\u307e\u305a\u6700\u521d\u306b\u3001\u5168\u3066\u306e microtask \u304c FIFO(First-In-First-Out) \u306e\u9806\u756a\u3067\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n\u305d\u3057\u3066\u4e00\u756a\u6700\u521d\u306eevent queue\u304c\u53d6\u308a\u51fa\u3055\u308c\u51e6\u7406\u3055\u308c\u307e\u3059\u3002\n\u305d\u3057\u3066\u3001\u3053\u308c\u3089(\u5168\u3066\u306emicrotask queue\u3092\u5b9f\u884c\u3057\u3001\u6b21\u306eevent queue\u306b\u79fb\u308b)\u304c\u7e70\u308a\u8fd4\u3055\u308c\u307e\u3059\u3002\n\n\u3064\u307e\u308a\u4f55\nimport \"dart:async\";\n\nvoid main() {\nprint('main #1');\n  new Future(()=> print('computation #1')).then((_) => print('then #1 - 1')).then((_)=> print('then #1 - 2'));\n  new Future.microtask(()=> print('comupataion #2')).then((_) => print('then #2 -1')).then((_)=> print('then #2 - 2'));\n  new Future(()=> print('computation #3')).then((_) => print('then #3 - 1')).then((_)=> print('then #3 - 2'));\n  print('main #2');\n}\n\n\u3053\u306e\u7d50\u679c\u304c\nmain #1\nmain #2\ncomupataion #2\nthen #2 -1\nthen #2 - 2\ncomputation #1\nthen #1 - 1\nthen #1 - 2\ncomputation #3\nthen #3 - 1\nthen #3 - 2\n\n\u306b\u306a\u308b\u3002\nmain #1\uff08#2)\u306b\u95a2\u3057\u3066\u306f\u6700\u521d\u306b\u51fa\u529b\u3055\u308c\u308b\u306e\u306f\u305d\u3093\u306a\u306b\u96e3\u3057\u304f\u306a\u3044\u3002\n\u6b21\u306b\u3001new Future() \u3067\u4f5c\u3063\u305f computation #1 \u3067\u306f\u306a\u304f\u3066\u3001\nnew Future.microtask() \u3067\u4f5c\u3063\u305f computaion #2 \u304c\u5148\u306b\u51fa\u529b\u3055\u308c\u3066\u308b\u306e\u304c\u30dd\u30a4\u30f3\u30c8\u3002\nnew Future() \u306f\u5185\u90e8\u3067\u306f Timer.run() \u3067\u767b\u9332\u3057\u3066\u3044\u3066\u3001\nNode\u3067\u3044\u3046setTimeout(hoge,0) \u7684\u306a\u52d5\u304d\u3092\u3059\u308b\u3002\nnew Future.microtask() \u306f\u5185\u90e8\u3067\u306f scheduleMicrotask \u3068\u3044\u3046\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u95a2\u6570\u3092\u53e9\u3044\u3066\u3066\u3001\nNode\u3067\u3044\u3046process.nextTick() \u7684\u306a\u52d5\u304d\u3092\u3059\u308b\u3002\nFIFO\u306a\u306e\u3067computation #1 -> computation #3 \u306e\u9806\u756a\u306b\u306a\u3063\u3066\u308b\u3002\n\n\nmain()\u306emicrotask(print/new Futuer**)\u3092\u5b9f\u884c\n\nFuture.microtask\u3067\u767b\u9332\u3055\u308c\u305f#computation #2\u3092\u3001\u540c\u3058event queue\u5185\u3067\u5b9f\u884c\n\u3084\u308b\u4e8b\u306a\u304f\u306a\u3063\u305f\u3093\u3067\u6b21\u306eevent queue\u3067\u3042\u308bcomputation #1\u306eFuture\u3092\u5b9f\u884c\n\u307e\u305f\u3084\u308b\u4e8b\u306a\u304f\u306a\u3063\u305f\u3093\u3067\u3001\u6b21\u306eevent queue\u3067\u3042\u308bcomputation #3\u306eFuture\u3092\u5b9f\u884c\n\n\u7684\u306a\u611f\u3058\u3060\u3068\u7406\u89e3\u3057\u3066\u308b\u306a\u3046\u3002\n\n\u53c2\u8003\u8cc7\u6599\n\nhttps://www.packtpub.com/web-development/mastering-dart\n\nhttps://www.dartlang.org/articles/event-loop/\n\n\u2191This is GOOD. So, this is GOD \u306a\u8cc7\u6599\n\n\n\n\n\u3042\u3068\u304c\u304d\n\n\u3044\u308d\u3044\u308d\u3042\u3068\u3067\u66f8\u3053\u3046\u3068\u3057\u3066\u307e\u3057\u305f\u304c The Event Loop and Dart \u306e\u7ffb\u8a33\u3092\u66f8\u3044\u305f \u3093\u3067\u3001\u305d\u3063\u3061\u898b\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n\u203b\u3068\u308a\u3042\u3048\u305a\u8abf\u3079\u306a\u304c\u3089\u66f8\u7740\u59cb\u3081\u305f\u611f\u3058\u306a\u306e\u3067\u3042\u3068\u3067\u307e\u3068\u3081\u307e\u3059\u3002\n\u203b\u305f\u3076\u3093\u9593\u9055\u3044\u3092\u542b\u3093\u3067\u308b\u3068\u306f\u601d\u3046\n\n## memo\n* `event queue` \u3068 `microtask queue` \u304c\u3042\u308b\n* `event queue` contains many `microtask queue`s \u306a\u8a8d\u8b58\n* Node\u3067\u3044\u3046\u3068\u3053\u306esetTimeout()\u3068proess.nextTick()\u7684\u306a\u9055\u3044\n* Future\u304cFuture\u8fd4\u3059\u3068\u3001\u8fd4\u3055\u308c\u305fFuture\u304c\u4f55\u8fd4\u3059\u304b\u5f85\u3064\n\n## `event queue` \u3068 `microtask queue`\n> As the following figure shows, when main() exits, the event loop starts its work. First, it executes any microtasks, in FIFO order. Then it dequeues and handles the first item on the event queue. Then it repeats the cycle: execute all microtasks, and then handle the next item on the event queue. \n\n\u8d85\u610f\u8a33\u3002\u9593\u9055\u3063\u3066\u305f\u3089\u3054\u3081\u3093\u3066\u3078\u307a\u308d\n\n(\u6b21\u306e\u56f3\u304c\u793a\u3059\u3088\u3046\u306b\u3001\uff09 `main()` \u304c\u5b9f\u884c\u3055\u308c\u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u304c\u958b\u59cb\u3055\u308c\u307e\u3059\u3002\n\u307e\u305a\u6700\u521d\u306b\u3001\u5168\u3066\u306e `microtask` \u304c `FIFO`(First-In-First-Out) \u306e\u9806\u756a\u3067\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n\u305d\u3057\u3066\u4e00\u756a\u6700\u521d\u306e`event queue`\u304c\u53d6\u308a\u51fa\u3055\u308c\u51e6\u7406\u3055\u308c\u307e\u3059\u3002\n\u305d\u3057\u3066\u3001\u3053\u308c\u3089(\u5168\u3066\u306e`microtask queue`\u3092\u5b9f\u884c\u3057\u3001\u6b21\u306e`event queue`\u306b\u79fb\u308b)\u304c\u7e70\u308a\u8fd4\u3055\u308c\u307e\u3059\u3002\n\n### \u3064\u307e\u308a\u4f55\n\n```dart\nimport \"dart:async\";\n\nvoid main() {\nprint('main #1');\n  new Future(()=> print('computation #1')).then((_) => print('then #1 - 1')).then((_)=> print('then #1 - 2'));\n  new Future.microtask(()=> print('comupataion #2')).then((_) => print('then #2 -1')).then((_)=> print('then #2 - 2'));\n  new Future(()=> print('computation #3')).then((_) => print('then #3 - 1')).then((_)=> print('then #3 - 2'));\n  print('main #2');\n}\n```\n\n\u3053\u306e\u7d50\u679c\u304c\n\n```\nmain #1\nmain #2\ncomupataion #2\nthen #2 -1\nthen #2 - 2\ncomputation #1\nthen #1 - 1\nthen #1 - 2\ncomputation #3\nthen #3 - 1\nthen #3 - 2\n```\n\n\u306b\u306a\u308b\u3002\n\n`main #1\uff08#2)`\u306b\u95a2\u3057\u3066\u306f\u6700\u521d\u306b\u51fa\u529b\u3055\u308c\u308b\u306e\u306f\u305d\u3093\u306a\u306b\u96e3\u3057\u304f\u306a\u3044\u3002\n\u6b21\u306b\u3001`new Future()` \u3067\u4f5c\u3063\u305f `computation #1` \u3067\u306f\u306a\u304f\u3066\u3001\n`new Future.microtask()` \u3067\u4f5c\u3063\u305f `computaion #2` \u304c\u5148\u306b\u51fa\u529b\u3055\u308c\u3066\u308b\u306e\u304c\u30dd\u30a4\u30f3\u30c8\u3002\n\n`new Future()` \u306f\u5185\u90e8\u3067\u306f `Timer.run()` \u3067\u767b\u9332\u3057\u3066\u3044\u3066\u3001\nNode\u3067\u3044\u3046`setTimeout(hoge,0)` \u7684\u306a\u52d5\u304d\u3092\u3059\u308b\u3002\n\n`new Future.microtask()` \u306f\u5185\u90e8\u3067\u306f `scheduleMicrotask` \u3068\u3044\u3046\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u95a2\u6570\u3092\u53e9\u3044\u3066\u3066\u3001\nNode\u3067\u3044\u3046`process.nextTick()` \u7684\u306a\u52d5\u304d\u3092\u3059\u308b\u3002\n\n`FIFO`\u306a\u306e\u3067`computation #1` -> `computation #3` \u306e\u9806\u756a\u306b\u306a\u3063\u3066\u308b\u3002\n\n\n1. `main()`\u306e`microtask`(print/new Futuer**)\u3092\u5b9f\u884c\n2. `Future.microtask`\u3067\u767b\u9332\u3055\u308c\u305f`#computation #2`\u3092\u3001\u540c\u3058`event queue`\u5185\u3067\u5b9f\u884c\n3. \u3084\u308b\u4e8b\u306a\u304f\u306a\u3063\u305f\u3093\u3067\u6b21\u306e`event queue`\u3067\u3042\u308b`computation #1`\u306e`Future`\u3092\u5b9f\u884c\n4. \u307e\u305f\u3084\u308b\u4e8b\u306a\u304f\u306a\u3063\u305f\u3093\u3067\u3001\u6b21\u306e`event queue`\u3067\u3042\u308b`computation #3`\u306e`Future`\u3092\u5b9f\u884c\n\n\u7684\u306a\u611f\u3058\u3060\u3068\u7406\u89e3\u3057\u3066\u308b\u306a\u3046\u3002\n\n\n## \u53c2\u8003\u8cc7\u6599\n* https://www.packtpub.com/web-development/mastering-dart\n* https://www.dartlang.org/articles/event-loop/\n\t* \u2191This is GOOD. So, this is GOD \u306a\u8cc7\u6599\n\n# \u3042\u3068\u304c\u304d\n\n* \u3044\u308d\u3044\u308d\u3042\u3068\u3067\u66f8\u3053\u3046\u3068\u3057\u3066\u307e\u3057\u305f\u304c [The Event Loop and Dart \u306e\u7ffb\u8a33\u3092\u66f8\u3044\u305f](http://qiita.com/takyam/items/6ad155678c95bba4047f) \u3093\u3067\u3001\u305d\u3063\u3061\u898b\u3066\u304f\u3060\u3055\u3044\u3002\n", "tags": ["Dart"]}