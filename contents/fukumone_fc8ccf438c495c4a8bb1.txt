{"context": " More than 1 year has passed since last update.\n\n\u4e8c\u5206\u63a2\u7d22\n\n\u8a08\u7b97\u91cf O(log_2n)\n\n\n\ndef binary_search(size, value)\n  arr = (1..size).to_a\n\n  left = 0\n  mid = 0 #=> \u4e2d\u592e\u306e\u5024\n  right = arr.last\n\n  loop do\n    mid = (left + right) / 2\n    if arr[mid] == value\n      return \"Found\"\n    elsif arr[mid] < value\n      left = mid\n    else #arr[mid] > value\n      right = mid\n    end\n  end\nend\n\n\n\n\u3057\u3083\u304f\u3068\u308a\u6cd5\n\n\u8a08\u7b97\u91cf O(n)\n\n\n\u9577\u3055n\u306e\u6570\u5217a0,a1,,,,an\u3068\u6574\u6570S\u304c\u4e0e\u3048\u308c\u3066\u3044\u307e\u3059\u3002\n\u9023\u7d9a\u3059\u308b\u90e8\u5206\u5217\u3067\u3001\u305d\u306e\u7dcf\u548c\u304cS\u4ee5\u4e0a\u3068\u306a\u308b\u3088\u3046\u306a\u3082\u306e\u306e\u3046\u3061\u3001\u6700\u5c0f\u306e\u9577\u3055\u3092\u6c42\u3081\u306a\u3055\u3044\u3002\n\u307e\u305f\u3001\u305d\u306e\u3068\u304d\u306e\u7dcf\u548cS\n\u3092\u6c42\u3081\u306a\u3055\u3044\u3002\n\u89e3\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\uff10\u3092\u51fa\u529b\u3057\u306a\u3055\u3044\u3002\n\nLENGTH = 5\nSUM = 11\nARRAY = [1,2,3,4,5]\n\ntotal = 0\nres = LENGTH\ngo = 0\nback = 0\n\narr = []\n\nloop do\n  while go < LENGTH && total < SUM\n    total += ARRAY[go]\n    go += 1\n  end\n  break if total < SUM\n  res = [res, go - back].min\n  arr << total\n  total -= ARRAY[back]\n  back += 1\nend\n\nif res > LENGTH\n  puts \"0\"\nelse\n  puts \"\u7dcf\u548c\u306f#{arr.min}, \u6700\u5c0f\u306e\u9577\u3055\u306f#{res}\"\nend\n\n\n\n\u6df1\u3055\u512a\u5148\u63a2\u7d22\n\n\u8a08\u7b97\u91cf O(2^n)\n\n\n\n\u6574\u6570a_1,a_2\u3001\u3001\u3001\u3001\u3001a_n\u304c\u4e0e\u3048\u3089\u308c\u305f\u6642\u3001\u305d\u306e\u4e2d\u304b\u3089\u3044\u304f\u3064\u304b\u9078\u3073\u3001\u305d\u306e\u548c\u3092K\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u304b\u5224\u5b9a\u3057\u306a\u3055\u3044\n\n\n\nN = 4\nALLAY_VALUE = [1,2,4,7]\nSUM = 13\n\ndef depth_first_search(val, total)\n  if val == N\n    total == SUM\n  elsif depth_first_search(val + 1, total)\n    true\n  elsif depth_first_search(val + 1, total + ALLAY_VALUE[val])\n    true\n  else\n    false\n  end\nend\n\nif depth_first_search(0, 0)\n  puts \"Yes\"\nelsif\n  puts \"No\"\nend\n\n\n\n\n\u52d5\u7684\u8a08\u753b\u6cd5\n\n\n# \u5024\u3092\u518d\u5229\u7528\u3057\u306a\u304c\u3089\u89e3\u3044\u3066\u3044\u304f\u3001\u52d5\u7684\u8a08\u753b\u6cd5\nM = gets.to_i\nN = gets.to_i\narr_key = Array.new(N)\narr_value = Array.new(N)\nmin_cost = 0\n\nN.times do |i|\n  key, value = gets.split(\" \").map(&:to_i)\n  arr_key[i] = key\n  arr_value[i] = value\n  min_cost += value\nend\n\ndp = Hash.new\ndp[0] = 0\n\nN.times do |ind|\n  dp_tmp = dp.clone\n  dp.each do |key, value|\n    total_key = key + arr_key[ind]\n    total_value = value + arr_value[ind]\n\n    unless dp_tmp.has_key?(total_key)\n      dp_tmp[total_key] = total_value\n    end\n\n    if total_key >= M && min_cost > total_value\n      min_cost = total_value\n    end\n  end\n\n  dp = dp_tmp\nend\n\np min_cost\n\n\n\n##\u4e8c\u5206\u63a2\u7d22\n\n\n```math\n\n\u8a08\u7b97\u91cf O(log_2n)\n\n```\n\n```rb\n\ndef binary_search(size, value)\n  arr = (1..size).to_a\n\n  left = 0\n  mid = 0 #=> \u4e2d\u592e\u306e\u5024\n  right = arr.last\n\n  loop do\n    mid = (left + right) / 2\n    if arr[mid] == value\n      return \"Found\"\n    elsif arr[mid] < value\n      left = mid\n    else #arr[mid] > value\n      right = mid\n    end\n  end\nend\n\n```\n\n##\u3057\u3083\u304f\u3068\u308a\u6cd5\n\n\n```math\n\n\u8a08\u7b97\u91cf O(n)\n\n```\n\n\u9577\u3055n\u306e\u6570\u5217a0,a1,,,,an\u3068\u6574\u6570S\u304c\u4e0e\u3048\u308c\u3066\u3044\u307e\u3059\u3002\n\u9023\u7d9a\u3059\u308b\u90e8\u5206\u5217\u3067\u3001\u305d\u306e\u7dcf\u548c\u304cS\u4ee5\u4e0a\u3068\u306a\u308b\u3088\u3046\u306a\u3082\u306e\u306e\u3046\u3061\u3001\u6700\u5c0f\u306e\u9577\u3055\u3092\u6c42\u3081\u306a\u3055\u3044\u3002\n\u307e\u305f\u3001\u305d\u306e\u3068\u304d\u306e\u7dcf\u548cS\n\u3092\u6c42\u3081\u306a\u3055\u3044\u3002\n\u89e3\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\uff10\u3092\u51fa\u529b\u3057\u306a\u3055\u3044\u3002\n\n\n```rb\n\nLENGTH = 5\nSUM = 11\nARRAY = [1,2,3,4,5]\n\ntotal = 0\nres = LENGTH\ngo = 0\nback = 0\n\narr = []\n\nloop do\n  while go < LENGTH && total < SUM\n    total += ARRAY[go]\n    go += 1\n  end\n  break if total < SUM\n  res = [res, go - back].min\n  arr << total\n  total -= ARRAY[back]\n  back += 1\nend\n\nif res > LENGTH\n  puts \"0\"\nelse\n  puts \"\u7dcf\u548c\u306f#{arr.min}, \u6700\u5c0f\u306e\u9577\u3055\u306f#{res}\"\nend\n\n```\n\n##\u6df1\u3055\u512a\u5148\u63a2\u7d22\n\n```math\n\n\u8a08\u7b97\u91cf O(2^n)\n\n```\n\n```math\n\n\u6574\u6570a_1,a_2\u3001\u3001\u3001\u3001\u3001a_n\u304c\u4e0e\u3048\u3089\u308c\u305f\u6642\u3001\u305d\u306e\u4e2d\u304b\u3089\u3044\u304f\u3064\u304b\u9078\u3073\u3001\u305d\u306e\u548c\u3092K\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u304b\u5224\u5b9a\u3057\u306a\u3055\u3044\n\n```\n\n```rb\n\nN = 4\nALLAY_VALUE = [1,2,4,7]\nSUM = 13\n\ndef depth_first_search(val, total)\n  if val == N\n    total == SUM\n  elsif depth_first_search(val + 1, total)\n    true\n  elsif depth_first_search(val + 1, total + ALLAY_VALUE[val])\n    true\n  else\n    false\n  end\nend\n\nif depth_first_search(0, 0)\n  puts \"Yes\"\nelsif\n  puts \"No\"\nend\n\n\n```\n\n##\u52d5\u7684\u8a08\u753b\u6cd5\n\n```rb\n\n\n# \u5024\u3092\u518d\u5229\u7528\u3057\u306a\u304c\u3089\u89e3\u3044\u3066\u3044\u304f\u3001\u52d5\u7684\u8a08\u753b\u6cd5\nM = gets.to_i\nN = gets.to_i\narr_key = Array.new(N)\narr_value = Array.new(N)\nmin_cost = 0\n\nN.times do |i|\n  key, value = gets.split(\" \").map(&:to_i)\n  arr_key[i] = key\n  arr_value[i] = value\n  min_cost += value\nend\n\ndp = Hash.new\ndp[0] = 0\n\nN.times do |ind|\n  dp_tmp = dp.clone\n  dp.each do |key, value|\n    total_key = key + arr_key[ind]\n    total_value = value + arr_value[ind]\n\n    unless dp_tmp.has_key?(total_key)\n      dp_tmp[total_key] = total_value\n    end\n\n    if total_key >= M && min_cost > total_value\n      min_cost = total_value\n    end\n  end\n\n  dp = dp_tmp\nend\n\np min_cost\n\n\n```\n", "tags": ["\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0", "Ruby"]}