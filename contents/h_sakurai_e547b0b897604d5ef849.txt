{"context": " More than 1 year has passed since last update.\u3053\u306e\u8a18\u4e8b\u306fAdvent Calender 2014 ML\u306e19\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\u4eca\u65e5\u306fPPX_Deriving\u3063\u3066\u3044\u3046PPX\u3092\u4f7f\u3063\u305f\u6a5f\u80fd\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3068\u3044\u3046\u8a71\u3067\u3059\u3002\nURL\u306f\u3053\u3061\u3089: https://github.com/whitequark/ppx_deriving\nopam\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u3066\nopam install ppx_deriving\n\nFor example, if you are using ocamlbuild, add the following to _tags to use the default deriving plugins:\n<src/*>: package(ppx_deriving.std)\n\nIf you are using another buildsystem, just make sure it passes -package ppx_deriving_whatever to ocamlfind.\n\u3060\u305d\u3046\u3067\u3059\u3002\u8a66\u3057\u3066\u306a\u3044\u306e\u3067\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\uff1c\u306a\u3093\u3068\u3044\u3046\u624b\u629c\u304d\u8a18\u4e8b\n\u305f\u3068\u3048\u3070\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304f\u3068\u3001Haskell\u3084Rust\u3067\u304a\u306a\u3058\u307f\u306ederiving show\u304c\u51fa\u6765\u307e\u3059\uff01\ntype point2d = float * float\n[@@deriving show]\n\n\u7d20\u6674\u3089\u3057\u3044ppx!\n\u8ffd\u8a18:\n\ntest.ml\ntype point2d = float * float\n[@@deriving show]\n\nlet _ =\n    Printf.printf \"%s\\n\" (show_point2d (1.1,2.2));\n\n\n\u3053\u306e\u3088\u3046\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u3044\u5834\u5408\n$ ocamlfind ocamlopt -package ppx_deriving.show test.ml -o test\n$ ./test\n(1.1, 2.2)\n\n\u3068\u3057\u307e\u3059\u3002ppx_deriving.show\u3068.show\u3092\u4ed8\u3051\u308b\u306e\u304c\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u3002\nOMakefile\u3092\u4f7f\u3046\u306a\u3089\n.PHONY: all install clean\n\nUSE_OCAMLFIND = true\nOCAMLPACKS[] =\n    ppx_deriving.show\nFILES[] =\n  test\nPROGRAM = test\n.DEFAULT: $(OCamlProgram $(PROGRAM), $(FILES))\n\n\u3068\u3057\u307e\u3059\u3002\n\n\u3053\u306e\u8a18\u4e8b\u306f[Advent Calender 2014 ML](http://qiita.com/advent-calendar/2014/ml)\u306e19\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n\u4eca\u65e5\u306fPPX_Deriving\u3063\u3066\u3044\u3046PPX\u3092\u4f7f\u3063\u305f\u6a5f\u80fd\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3068\u3044\u3046\u8a71\u3067\u3059\u3002\n\nURL\u306f\u3053\u3061\u3089: https://github.com/whitequark/ppx_deriving\n\nopam\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u3066\n\n\topam install ppx_deriving\n\n\nFor example, if you are using ocamlbuild, add the following to _tags to use the default deriving plugins:\n\n\t<src/*>: package(ppx_deriving.std)\n\nIf you are using another buildsystem, just make sure it passes -package ppx_deriving_whatever to ocamlfind.\n\n\n\u3060\u305d\u3046\u3067\u3059\u3002\u8a66\u3057\u3066\u306a\u3044\u306e\u3067\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\uff1c\u306a\u3093\u3068\u3044\u3046\u624b\u629c\u304d\u8a18\u4e8b\n\n\u305f\u3068\u3048\u3070\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304f\u3068\u3001Haskell\u3084Rust\u3067\u304a\u306a\u3058\u307f\u306ederiving show\u304c\u51fa\u6765\u307e\u3059\uff01\n\n\ttype point2d = float * float\n\t[@@deriving show]\n\n\u7d20\u6674\u3089\u3057\u3044ppx!\n\n\u8ffd\u8a18:\n\n```test.ml\ntype point2d = float * float\n[@@deriving show]\n\nlet _ =\n    Printf.printf \"%s\\n\" (show_point2d (1.1,2.2));\n```\n\n\u3053\u306e\u3088\u3046\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u3044\u5834\u5408\n\n```\n$ ocamlfind ocamlopt -package ppx_deriving.show test.ml -o test\n$ ./test\n(1.1, 2.2)\n```\n\n\u3068\u3057\u307e\u3059\u3002ppx_deriving.show\u3068__.show__\u3092\u4ed8\u3051\u308b\u306e\u304c\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u3002\n\nOMakefile\u3092\u4f7f\u3046\u306a\u3089\n\n```\n.PHONY: all install clean\n\nUSE_OCAMLFIND = true\nOCAMLPACKS[] =\n    ppx_deriving.show\nFILES[] =\n  test\nPROGRAM = test\n.DEFAULT: $(OCamlProgram $(PROGRAM), $(FILES))\n```\n\u3068\u3057\u307e\u3059\u3002\n", "tags": ["deriving", "OCaml"]}