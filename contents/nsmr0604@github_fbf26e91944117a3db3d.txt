{"context": "\n\n\u306f\u3058\u3081\u306b\n\u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u81ea\u5df1\u8cac\u4efb\u3067\u5b9f\u884c\u3057\u3001\u3044\u304b\u306a\u308b\u8cac\u4efb\u3082\u5f53\u65b9\u306f\u8ca0\u308f\u306a\u3044\u3053\u3068\u3092\u5ba3\u8a00\u3057\u307e\u3059\u3002\n\nMS\u306e\u5e83\u544a\u6226\u7565\u3068\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\nWindows7sp1\u3068Windows8.1update1\u3092\u4f7f\u3063\u3066\u3044\u308b\u65b9\u306b\u306f\u6628\u5e74\u3088\u308aWindows10\u3078\u306e\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u3092\u6848\u5185\u3059\u308b\u5e83\u544a\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u306f\u3054\u5b58\u77e5\u3060\u3068\u601d\u308f\u308c\u307e\u3059\u3002\u305d\u306e\u5c11\u3005\u5f37\u5f15\u3059\u304e\u308b\u624b\u6cd5\u306b\u3088\u308a\u4e00\u6642\u8a71\u984c\u306b\u3082\u306a\u308a\u307e\u3057\u305f\u3002\n\u307e\u305f\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u671f\u9593\u304c\uff17\u6708\u672b\u3068\u3044\u3046\u3053\u3068\u3067\u3044\u307e\u307e\u3067\u8868\u793a\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305fWindows7(sp\u306a\u3057)\u3084Windows8\u306b\u3082\u5168\u753b\u9762\u5e83\u544a\u304c\u8868\u793a\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u88c1\u5224\u3092\u7d4c\u3066\u3044\u308f\u3086\u308b\u300e\u5f37\u5236\u300f\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u306e\u6848\u5185\u306f\u53ce\u307e\u308a\u3064\u3064\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u5e83\u544a\u3092\u8868\u793a\u3057\u3066\u3044\u308bGWX\u53ca\u3073\u95a2\u9023\u3057\u305fWindowsUpdate\u3092\u30a2\u30f3\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u516c\u958b\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u3059\u3067\u306b\u540c\u69d8\u306e\u6a5f\u80fd\u306f\u5404\u7a2e\u30d5\u30ea\u30fc\u30bd\u30d5\u30c8\u3068\u3057\u3066\u914d\u5e03\u3055\u308c\u3066\u4f55\u756a\u714e\u3058\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u5206\u304b\u3089\u306a\u3044\u306e\u3067\u3059\u304c\u3002\u3002\u3002\n\n\u30b9\u30af\u30ea\u30d7\u30c8\n\u57fa\u672c\u306f\u30d0\u30c3\u30c1\u30d5\u30a1\u30a4\u30eb\u3067\u3001\u4e00\u90e8\u306bPowershell\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\u7ba1\u7406\u8005\u6a29\u9650\u3092\u8981\u6c42\u3057\u307e\u3059\u306e\u3067\u7ba1\u7406\u8005\u3068\u3057\u3066\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nDisableGWX.cmd\n@echo off && setlocal\nset \"cache=%temp%\\%~nx0\"\n\nCLS\nIF NOT EXIST \"%cache%\" (\nECHO.\nECHO ***********************************\nECHO Caching scripts\nECHO ***********************************\ncopy \"%~0\" \"%cache%\"\n) ELSE GOTO :is_cache\n\n:is_cache\nIF NOT \"%~0\"==\"%cache%\" (\nECHO.\nECHO ***********************************\nECHO Run script form cache\nECHO ***********************************\n@powershell -NoProfile -ExecutionPolicy unrestricted -Command \"Start-Process %cache%\"\nexit /b\n) ELSE goto :is_admin\n\n:is_admin\ndate %date% >nul 2>&1\nIF NOT '%errorlevel%' == '0' (\nECHO.\nECHO ***********************************\nECHO Invoking UAC to escalate privilege\nECHO ***********************************\n@powershell -NoProfile -ExecutionPolicy unrestricted -Command \"Start-Process %cache% -Verb runas\"\nexit /b\n) ELSE goto :main \n\n:main\nCLS\nECHO.\nECHO ***********************************\nECHO MAIN SCRIPT START.\nECHO ***********************************\ncd /d %temp%\n\nECHO.\nECHO ***********************************\nECHO Stop Windowns Update\nECHO ***********************************\nnet stop wuauserv\nnet stop cryptSvc\nnet stop bits\nnet stop msiserver\n\nECHO.\nECHO ***********************************\nECHO Killing GWX.exe and GWXUX.exe\nECHO ***********************************\ntaskkill /f /t /im gwx.exe\ntaskkill /f /t /im gwxux.exe\n\nECHO.\nECHO ***********************************\nECHO Disabling GWX and OSUpgrade\nECHO ***********************************\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Gwx\" /v \"DisableGwx\" /t REG_DWORD /d 00000001 /f\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v \"DisableOSUpgrade\" /t REG_DWORD /d 00000001 /f\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WindowsUpdate\\OSUpgrade\" /v \"AllowOSUpgrade\" /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WindowsUpdate\\OSUpgrade\" /v \"ReservationsAllowed\" /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\GWX.exe\" /v \"Debugger\" /t REG_SZ /d \"rundll32.exe\" /f\n\nECHO.\nECHO ***********************************\nECHO Removing GWX Downloading cache\nECHO ***********************************\nstart /wait takeown /F C:\\$Windows.~BT\\* /R /A /D Y\nstart /wait icacls C:\\$Windows.~BT\\*.* /T /grant administrators:F\nrmdir /S /Q C:\\$Windows.~BT\\\n\nstart /wait takeown /F C:\\$Windows.~WS\\* /R /A /D Y\nstart /wait icacls C:\\$Windows.~WS\\*.* /T /grant administrators:F\nrmdir /S /Q C:\\$Windows.~WS\\\n\nECHO.\nECHO ***********************************\nECHO Restart Windowns Update\nECHO ***********************************\nstart /wait net start wuauserv\n\nECHO.\nECHO ***********************************\nECHO Uninstall and Hide KBs\nECHO ***********************************\n@powershell \"$s=[scriptblock]::create((gc \\\"%~f0\\\"|?{$_.readcount -gt 93})-join\\\"`n\\\");&$s\" %*\nexit /b\n\nREM POWERSHELL SCRIPT BLOCK\n$KBNumbers = 2876229,2952664,2976978,2977759,2990214,3021917,3022345,3035583,3044374,3068708,3075249,3080149,3123862,3150513,3173040\n\n[Boolean]$ErrFound = $false\n$ComputerName = $env:COMPUTERNAME\n# Uninstall\n$hotfixes = Get-WmiObject -ComputerName $ComputerName -Class Win32_QuickFixEngineering | select hotfixid\nForeach ($KBNumber in $KBNumbers) {\n  Write-Host \"Checking whether update $KBNumber needs to be uninstalled\"\n  $KBID = \"KB\"+$KBNumber\n  if($hotfixes -match $KBID) {\n      Write-host \"Found update $KBNumber. Uninstalling.\"\n      $UninstallString = \"cmd.exe /c wusa.exe /uninstall /KB:$KBNumber /quiet /norestart\"\n      Write-Host \"Executing '($UninstallString)'\"\n      ([WMICLASS]\"\\\\$ComputerName\\ROOT\\CIMV2:win32_process\").Create($UninstallString) | out-null            \n      while (@(Get-Process wusa -computername $ComputerName -ErrorAction SilentlyContinue).Count -ne 0) {\n          Start-Sleep 3\n          Write-Host \"Waiting for update removal to finish ...\"\n      }\n    Write-Host \"Completed the uninstallation of update $KBNumber\"\n  }\n  else {            \n    Write-Host \"Update $KBNumber not installed so no uninstall needed\"\n  }            \n  Write-Host \"-----------\"\n} # Foreach $KBNumber\n# Hide (block) the update\ntry {\n  Write-Host \"Listing Windows Update List...\"\n  $UpdateSession = New-Object -ComObject Microsoft.Update.Session\n  $UpdateSearcher = $UpdateSession.CreateUpdateSearcher()\n  $UpdateSearcher.IncludePotentiallySupersededUpdates = $true\n  $SearchResult = $UpdateSearcher.Search(\"IsInstalled=0\")\n  Foreach ($KBNumber in $KBNumbers) {\n    Write-Host \"Checking whether update $KBNumber needs to be hidden\"\n    [Boolean]$KBListed = $false\n    Foreach ($Update in $SearchResult.updates) {\n      Foreach ($KBArticleID in $Update.KBArticleIDs) {\n        # Next line is for debugging\n        # Write-Host \"$KBArticleID, $($Update.IsHidden), $($Update.title)\"\n        if ($KBArticleID -eq $KBNumber) {\n          $KBListed = $true\n          if ($Update.IsHidden -eq $false) {\n            Write-Host \"Hiding update $KBNumber (UpdateID $($Update.Identity.UpdateID), deployed $($Update.LastDeploymentChangeTime.ToString('MM/dd/yyyy')))\"\n             $Update.IsHidden = $true     \n          } else {\n            Write-Host \"Update $KBNumber (UpdateID $($Update.Identity.UpdateID), deployed $($Update.LastDeploymentChangeTime.ToString('MM/dd/yyyy'))) is already hidden\"\n          } # if $Update.IsHidden\n        } # if $KBArticleID -eq $KBNumber\n      } # Foreach $KBArticleID\n    } # Foreach $Update\n\n    if ($KBListed -eq $false) {\n      Write-Host \"Update $KBNumber was not found searching Windows Update\"\n    }\n    Write-Host \"-----------\"\n  } # Foreach $KBNumber\n\n  Write-Host \"\"\n  $objAutoUpdateSettings = (New-Object -ComObject \"Microsoft.Update.AutoUpdate\").Settings\n  $objSysInfo = New-Object -ComObject \"Microsoft.Update.SystemInfo\"\n  if ($objSysInfo.RebootRequired) {\n    Write-Host \"A reboot is required to complete the process\"\n  } else {\n    Write-Host \"No reboot is required\"\n  }\n\n  Write-Host \"\"\n  Write-Host \"Script execution succeeded\"\n  $ExitCode = 0\n}\ncatch {\n  Write-Host \"\"\n  $error[0]\n  Write-Host \"\"\n  Write-Host \"Hiding update(s) failed\"\n  $ExitCode = 1001\n}\n\nWrite-Host \"Finished pathing...\"\n\n\n# \u306f\u3058\u3081\u306b\n\u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u81ea\u5df1\u8cac\u4efb\u3067\u5b9f\u884c\u3057\u3001\u3044\u304b\u306a\u308b\u8cac\u4efb\u3082\u5f53\u65b9\u306f\u8ca0\u308f\u306a\u3044\u3053\u3068\u3092\u5ba3\u8a00\u3057\u307e\u3059\u3002\n\n# MS\u306e\u5e83\u544a\u6226\u7565\u3068\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\nWindows7sp1\u3068Windows8.1update1\u3092\u4f7f\u3063\u3066\u3044\u308b\u65b9\u306b\u306f\u6628\u5e74\u3088\u308aWindows10\u3078\u306e\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u3092\u6848\u5185\u3059\u308b\u5e83\u544a\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u306f\u3054\u5b58\u77e5\u3060\u3068\u601d\u308f\u308c\u307e\u3059\u3002\u305d\u306e\u5c11\u3005\u5f37\u5f15\u3059\u304e\u308b\u624b\u6cd5\u306b\u3088\u308a\u4e00\u6642\u8a71\u984c\u306b\u3082\u306a\u308a\u307e\u3057\u305f\u3002\n\u307e\u305f\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u671f\u9593\u304c\uff17\u6708\u672b\u3068\u3044\u3046\u3053\u3068\u3067\u3044\u307e\u307e\u3067\u8868\u793a\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305fWindows7(sp\u306a\u3057)\u3084Windows8\u306b\u3082\u5168\u753b\u9762\u5e83\u544a\u304c\u8868\u793a\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u88c1\u5224\u3092\u7d4c\u3066\u3044\u308f\u3086\u308b\u300e\u5f37\u5236\u300f\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u306e\u6848\u5185\u306f\u53ce\u307e\u308a\u3064\u3064\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u5e83\u544a\u3092\u8868\u793a\u3057\u3066\u3044\u308bGWX\u53ca\u3073\u95a2\u9023\u3057\u305fWindowsUpdate\u3092\u30a2\u30f3\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u516c\u958b\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3059\u3067\u306b\u540c\u69d8\u306e\u6a5f\u80fd\u306f\u5404\u7a2e\u30d5\u30ea\u30fc\u30bd\u30d5\u30c8\u3068\u3057\u3066\u914d\u5e03\u3055\u308c\u3066\u4f55\u756a\u714e\u3058\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u5206\u304b\u3089\u306a\u3044\u306e\u3067\u3059\u304c\u3002\u3002\u3002\n\n# \u30b9\u30af\u30ea\u30d7\u30c8\n\u57fa\u672c\u306f\u30d0\u30c3\u30c1\u30d5\u30a1\u30a4\u30eb\u3067\u3001\u4e00\u90e8\u306bPowershell\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\u7ba1\u7406\u8005\u6a29\u9650\u3092\u8981\u6c42\u3057\u307e\u3059\u306e\u3067\u7ba1\u7406\u8005\u3068\u3057\u3066\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```bash:DisableGWX.cmd\n@echo off && setlocal\nset \"cache=%temp%\\%~nx0\"\n\nCLS\nIF NOT EXIST \"%cache%\" (\nECHO.\nECHO ***********************************\nECHO Caching scripts\nECHO ***********************************\ncopy \"%~0\" \"%cache%\"\n) ELSE GOTO :is_cache\n\n:is_cache\nIF NOT \"%~0\"==\"%cache%\" (\nECHO.\nECHO ***********************************\nECHO Run script form cache\nECHO ***********************************\n@powershell -NoProfile -ExecutionPolicy unrestricted -Command \"Start-Process %cache%\"\nexit /b\n) ELSE goto :is_admin\n\n:is_admin\ndate %date% >nul 2>&1\nIF NOT '%errorlevel%' == '0' (\nECHO.\nECHO ***********************************\nECHO Invoking UAC to escalate privilege\nECHO ***********************************\n@powershell -NoProfile -ExecutionPolicy unrestricted -Command \"Start-Process %cache% -Verb runas\"\nexit /b\n) ELSE goto :main \n\n:main\nCLS\nECHO.\nECHO ***********************************\nECHO MAIN SCRIPT START.\nECHO ***********************************\ncd /d %temp%\n\nECHO.\nECHO ***********************************\nECHO Stop Windowns Update\nECHO ***********************************\nnet stop wuauserv\nnet stop cryptSvc\nnet stop bits\nnet stop msiserver\n\nECHO.\nECHO ***********************************\nECHO Killing GWX.exe and GWXUX.exe\nECHO ***********************************\ntaskkill /f /t /im gwx.exe\ntaskkill /f /t /im gwxux.exe\n\nECHO.\nECHO ***********************************\nECHO Disabling GWX and OSUpgrade\nECHO ***********************************\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Gwx\" /v \"DisableGwx\" /t REG_DWORD /d 00000001 /f\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v \"DisableOSUpgrade\" /t REG_DWORD /d 00000001 /f\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WindowsUpdate\\OSUpgrade\" /v \"AllowOSUpgrade\" /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WindowsUpdate\\OSUpgrade\" /v \"ReservationsAllowed\" /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\GWX.exe\" /v \"Debugger\" /t REG_SZ /d \"rundll32.exe\" /f\n\nECHO.\nECHO ***********************************\nECHO Removing GWX Downloading cache\nECHO ***********************************\nstart /wait takeown /F C:\\$Windows.~BT\\* /R /A /D Y\nstart /wait icacls C:\\$Windows.~BT\\*.* /T /grant administrators:F\nrmdir /S /Q C:\\$Windows.~BT\\\n\nstart /wait takeown /F C:\\$Windows.~WS\\* /R /A /D Y\nstart /wait icacls C:\\$Windows.~WS\\*.* /T /grant administrators:F\nrmdir /S /Q C:\\$Windows.~WS\\\n\nECHO.\nECHO ***********************************\nECHO Restart Windowns Update\nECHO ***********************************\nstart /wait net start wuauserv\n\nECHO.\nECHO ***********************************\nECHO Uninstall and Hide KBs\nECHO ***********************************\n@powershell \"$s=[scriptblock]::create((gc \\\"%~f0\\\"|?{$_.readcount -gt 93})-join\\\"`n\\\");&$s\" %*\nexit /b\n\nREM POWERSHELL SCRIPT BLOCK\n$KBNumbers = 2876229,2952664,2976978,2977759,2990214,3021917,3022345,3035583,3044374,3068708,3075249,3080149,3123862,3150513,3173040\n\n[Boolean]$ErrFound = $false\n$ComputerName = $env:COMPUTERNAME\n# Uninstall\n$hotfixes = Get-WmiObject -ComputerName $ComputerName -Class Win32_QuickFixEngineering | select hotfixid\nForeach ($KBNumber in $KBNumbers) {\n  Write-Host \"Checking whether update $KBNumber needs to be uninstalled\"\n  $KBID = \"KB\"+$KBNumber\n  if($hotfixes -match $KBID) {\n      Write-host \"Found update $KBNumber. Uninstalling.\"\n      $UninstallString = \"cmd.exe /c wusa.exe /uninstall /KB:$KBNumber /quiet /norestart\"\n      Write-Host \"Executing '($UninstallString)'\"\n      ([WMICLASS]\"\\\\$ComputerName\\ROOT\\CIMV2:win32_process\").Create($UninstallString) | out-null            \n      while (@(Get-Process wusa -computername $ComputerName -ErrorAction SilentlyContinue).Count -ne 0) {\n          Start-Sleep 3\n          Write-Host \"Waiting for update removal to finish ...\"\n      }\n    Write-Host \"Completed the uninstallation of update $KBNumber\"\n  }\n  else {            \n    Write-Host \"Update $KBNumber not installed so no uninstall needed\"\n  }            \n  Write-Host \"-----------\"\n} # Foreach $KBNumber\n# Hide (block) the update\ntry {\n  Write-Host \"Listing Windows Update List...\"\n  $UpdateSession = New-Object -ComObject Microsoft.Update.Session\n  $UpdateSearcher = $UpdateSession.CreateUpdateSearcher()\n  $UpdateSearcher.IncludePotentiallySupersededUpdates = $true\n  $SearchResult = $UpdateSearcher.Search(\"IsInstalled=0\")\n  Foreach ($KBNumber in $KBNumbers) {\n    Write-Host \"Checking whether update $KBNumber needs to be hidden\"\n    [Boolean]$KBListed = $false\n    Foreach ($Update in $SearchResult.updates) {\n      Foreach ($KBArticleID in $Update.KBArticleIDs) {\n        # Next line is for debugging\n        # Write-Host \"$KBArticleID, $($Update.IsHidden), $($Update.title)\"\n        if ($KBArticleID -eq $KBNumber) {\n          $KBListed = $true\n          if ($Update.IsHidden -eq $false) {\n            Write-Host \"Hiding update $KBNumber (UpdateID $($Update.Identity.UpdateID), deployed $($Update.LastDeploymentChangeTime.ToString('MM/dd/yyyy')))\"\n             $Update.IsHidden = $true     \n          } else {\n            Write-Host \"Update $KBNumber (UpdateID $($Update.Identity.UpdateID), deployed $($Update.LastDeploymentChangeTime.ToString('MM/dd/yyyy'))) is already hidden\"\n          } # if $Update.IsHidden\n        } # if $KBArticleID -eq $KBNumber\n      } # Foreach $KBArticleID\n    } # Foreach $Update\n \n    if ($KBListed -eq $false) {\n      Write-Host \"Update $KBNumber was not found searching Windows Update\"\n    }\n    Write-Host \"-----------\"\n  } # Foreach $KBNumber\n \n  Write-Host \"\"\n  $objAutoUpdateSettings = (New-Object -ComObject \"Microsoft.Update.AutoUpdate\").Settings\n  $objSysInfo = New-Object -ComObject \"Microsoft.Update.SystemInfo\"\n  if ($objSysInfo.RebootRequired) {\n    Write-Host \"A reboot is required to complete the process\"\n  } else {\n    Write-Host \"No reboot is required\"\n  }\n \n  Write-Host \"\"\n  Write-Host \"Script execution succeeded\"\n  $ExitCode = 0\n}\ncatch {\n  Write-Host \"\"\n  $error[0]\n  Write-Host \"\"\n  Write-Host \"Hiding update(s) failed\"\n  $ExitCode = 1001\n}\n\nWrite-Host \"Finished pathing...\"\n```\n", "tags": ["PowerShell", "Windows10", "windows7", "Windows8.1", "cmd"]}