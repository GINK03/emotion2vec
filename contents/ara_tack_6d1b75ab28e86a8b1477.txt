{"context": "\n\n\u3053\u306e\u8a18\u4e8b\u306b\u3064\u3044\u3066\n\u6700\u8fd1\u3001SQLBrite\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u89e6\u308c\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u5909\u66f4\u304cObservable\u3068\u3057\u3066\u8cfc\u8aad\u3067\u304d\u308b\u3068\u3044\u3046\u3053\u3068\u306b\u611f\u52d5\u3057\u307e\u3057\u305f\u3002Github\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307f\u308b\u3068\u3001SQLBrite\u306f\u305f\u3063\u305f\u306e6\u30d5\u30a1\u30a4\u30eb\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u3053\u308c\u306a\u3089\u8aad\u3081\u308b\u3060\u308d\u3046\u3068\u601d\u3063\u305f\u306e\u3067\u3001\u3056\u3063\u3068\u76ee\u3092\u901a\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001SQLBrite\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u308f\u304b\u3063\u305fSQLBrite\u304c\u30c6\u30fc\u30d6\u30eb\u5909\u66f4\u3092\u901a\u77e5\u3059\u308b\u4ed5\u7d44\u307f\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\nSQLBrite\u3068\u306f\uff1f\n\u53c2\u8003:\n- Github\u30ea\u30dd\u30b8\u30c8\u30ea: https://github.com/square/sqlbrite\n- \u81ea\u5206\u304c\u66f8\u3044\u305f\u7d39\u4ecb\u8a18\u4e8b: http://tech.furyu.jp/blog/?p=5233\nSQLBrite\u3068\u306f\u3001SQLiteOpenHelper\u3068ContentResolver\u3092\u30e9\u30c3\u30d7\u3059\u308bSquare\u793e\u88fd\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002SQLiteOpenHelper\u3092\u30e9\u30c3\u30d7\u3057\u305fBriteDatabase\u3001ContentResolver\u3092\u30e9\u30c3\u30d7\u3057\u305fBriteContentResolver\u3092\u63d0\u4f9b\u3057\u3066\u304f\u308c\u307e\u3059\u3002\nBriteDatabase\u306f\u3001BriteDatabase#createQuery(String table, String query)\u306b\u3088\u3063\u3066\u3001QueryObservable extends Observable<Query>\u3068\u3044\u3046\u8cfc\u8aad\u3067\u304d\u308b\u30af\u30a8\u30ea\u3092\u8fd4\u3057\u307e\u3059\u3002\n\ncreateQuery\nObservable<Query> users = db.createQuery(\"users\", \"SELECT * FROM users\");\nusers.subscribe(new Action1<Query>() {\n  @Override public void call(Query query) {\n    Cursor cursor = query.run();\n    // TODO parse data...\n  }\n});\n\n\n\uff08https://github.com/square/sqlbrite#usage \u3088\u308a\u5f15\u7528\uff09\nINSERT, UPDATE, DELETE\u306a\u3069\u3067\u3001users\u30c6\u30fc\u30d6\u30eb\u306b\u5909\u66f4\u304c\u3042\u308b\u3068Action1#call(Query query)\u304c\u547c\u3070\u308c\u308b\u306e\u3067\u3001View\u306b\u53cd\u6620\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u307e\u305f\u3001QueryObservable#mapToList(Func1<Cursor, T> mapper)\u30e1\u30bd\u30c3\u30c9\u3067Cursor\u304b\u3089\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u30ea\u30b9\u30c8\u306b\u5909\u63db\u3067\u304d\u3001\n\nmapToList\ndb.createQuery(\"users\", \"SELECT * FROM users\")\n    .mapToList(new Func1<Cursor, User>() {\n        @Override\n        public User call(Cursor cursor) {\n            long id = cursor.getLong(cursor.getColumnIndexOrThrow(\"_id\"));\n            String name = cursor.getString(cursor.getColumnIndexOrThrow(\"name\"));\n            return new User(id, name);\n        }\n    }).subscribe(new Action1<List<User>>() {\n        @Override\n        public void call(List<User> users) {\n            // \u30e6\u30fc\u30b6\u30fc\u30ea\u30b9\u30c8\u306e\u8868\u793a\u306a\u3069\n        }\n    });\n\n\nQueryObservable#mapToOne(Func1<Cursor, T> mapper)\u30e1\u30bd\u30c3\u30c9\u3067Cursor\u304b\u3089\u5358\u4e00\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002\n\nmapToOne\ndb.createQuery(\"users\", \"SELECT count(*) user_count FROM users\")\n    .mapToOne(new Func1<Cursor, Long>() {\n        @Override\n        public Long call(Cursor cursor) {\n            long count = cursor.getLong(cursor.getColumnIndexOrThrow(\"user_count\"));\n            return count;\n        }\n    }).subscribe(new Action1<Long>() {\n        @Override\n        public void call(Long count) {\n            // \u30e6\u30fc\u30b6\u30fc\u6570\u306e\u8868\u793a\u306a\u3069\n        }\n    });\n\n\n\n\u30af\u30e9\u30b9\u306e\u69cb\u6210\nSQLBrite\u3092\u69cb\u6210\u3059\u308b\u4e3b\u306a\u30af\u30e9\u30b9\u3092\u5217\u6319\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u6570\u306f6\u3064\u3067\u3059\u304c\u3001\u5185\u90e8\u30af\u30e9\u30b9\u3082\u3042\u308b\u306e\u30676\u4ee5\u4e0a\u3042\u308a\u307e\u3059\u3002\n\n\n\n\u30af\u30e9\u30b9\u540d\n\u8aac\u660e\n\n\n\n\nSQLBrite\nBriteDatabase\u306e\u751f\u6210\u3002\n\n\nSQLBrite.Query\n\u5b9f\u884c\u53ef\u80fd\u306a\u30af\u30a8\u30ea\u306e\u62bd\u8c61\u30af\u30e9\u30b9\n\n\nBriteDatabase\nSQLiteOpenHelper\u3092\u30e9\u30c3\u30d7\u3057\u305f\u30af\u30e9\u30b9\u3002createQuery\u30e1\u30bd\u30c3\u30c9\u3067Observable\u3092\u751f\u6210\u3059\u308b\u3002insert\u3001delete\u3001update\u306a\u3069\u306e\u51e6\u7406\u3084\u3001\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306e\u7ba1\u7406\u3082\u884c\u3046\u3002\n\n\nBriteDatabase.DatabaseQuery\nQuery\u3092\u7d99\u627f\u3057\u305f\u5177\u8c61\u30af\u30e9\u30b9\n\n\nBriteContentResolver\nContentResolver\uff08\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u9593\u306e\u30c7\u30fc\u30bf\u5171\u6709\u306b\u4f7f\u308f\u308c\u308b\uff09\u3092\u30e9\u30c3\u30d7\u3057\u305f\u30af\u30e9\u30b9\u3002\u8cfc\u8aad\u3067\u304d\u308bQuery\u3092\u751f\u6210\u3059\u308b\u3002\n\n\nQueryObservable\nObservable\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3002mapToList\u30e1\u30bd\u30c3\u30c9\u3084mapToOne\u30e1\u30bd\u30c3\u30c9\u3092\u63d0\u4f9b\u3059\u308b\u3002\n\n\nQueryToListOperator\nQuery\u3092\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u30ea\u30b9\u30c8\u306b\u5909\u63db\u3059\u308bOperator\n\n\nQueryToOneOperator\nQuery\u3092\u5358\u4e00\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306b\u5909\u63db\u3059\u308bOperator\n\n\n\n\n\u30c6\u30fc\u30d6\u30eb\u5909\u66f4\u3092\u901a\u77e5\u3059\u308b\u4ed5\u7d44\u307f\n\u30c6\u30fc\u30d6\u30eb\u5909\u66f4\u3092\u901a\u77e5\u3059\u308b\u4ed5\u7d44\u307f\u306f\u3001BriteDatabase\u30af\u30e9\u30b9\u306b\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002private QueryObservable createQuery(Func1<Set<String>, Boolean>, String,\n    String...)\u30e1\u30bd\u30c3\u30c9\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n@CheckResult @NonNull\nprivate QueryObservable createQuery(Func1<Set<String>, Boolean> tableFilter, String sql,\n    String... args) {\n  if (transactions.get() != null) {\n    throw new IllegalStateException(\"Cannot create observable query in transaction. \"\n        + \"Use query() for a query inside a transaction.\");\n  }\n\n  DatabaseQuery query = new DatabaseQuery(tableFilter, sql, args);\n  final Observable<Query> queryObservable = triggers //\n      .filter(tableFilter) // Only trigger on tables we care about.\n      .map(query) // DatabaseQuery maps to itself to save an allocation.\n      .onBackpressureLatest() // Guard against uncontrollable frequency of upstream emissions.\n      .startWith(query) //\n      .observeOn(scheduler) //\n      .onBackpressureLatest() // Guard against uncontrollable frequency of scheduler executions.\n      .doOnSubscribe(ensureNotInTransaction);\n  // TODO switch to .extend when non-@Experimental\n  return new QueryObservable(new Observable.OnSubscribe<Query>() {\n    @Override public void call(Subscriber<? super Query> subscriber) {\n      queryObservable.unsafeSubscribe(subscriber);\n    }\n  });\n}\n\n\n\u901a\u77e5\u306e\u958b\u59cb\n\u8cfc\u8aad\u3055\u308c\u308bObservable\u306f\u4ee5\u4e0b\u306e\u7b87\u6240\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n  DatabaseQuery query = new DatabaseQuery(tableFilter, sql, args);\n  final Observable<Query> queryObservable = triggers //\n      .filter(tableFilter) // Only trigger on tables we care about.\n      .map(query) // DatabaseQuery maps to itself to save an allocation.\n      .onBackpressureLatest() // Guard against uncontrollable frequency of upstream emissions.\n      .startWith(query) //\n      .observeOn(scheduler) //\n      .onBackpressureLatest() // Guard against uncontrollable frequency of scheduler executions.\n      .doOnSubscribe(ensureNotInTransaction);\n\n\u3069\u3046\u3084\u3089\u3001triggers\u3068\u3044\u3046\u3082\u306e\u304cObservable\u306e\u6e90\u6d41\u3068\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u3067\u306f\u3001\u3053\u306etriggers\u306f\u4f55\u304b\u3068\u8a00\u3046\u3068\u3001BriteDatabase\u306e\u30e1\u30f3\u30d0\u5909\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nprivate final PublishSubject<Set<String>> triggers = PublishSubject.create();\n\n\u305f\u3060\u306e\u3001PublishSubject\u3067\u3059\u306d\u3002\u3068\u3044\u3046\u3053\u3068\u306f\u3001triggers.onNext\u304c\u547c\u3070\u308c\u308b\u3053\u3068\u3067\u30c6\u30fc\u30d6\u30eb\u5909\u66f4\u306e\u901a\u77e5\u304c\u958b\u59cb\u3059\u308b\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002triggers.onNext\u304c\u547c\u3070\u308c\u3066\u3044\u308b\u306e\u306f\u4ee5\u4e0b\u306e1\u7b87\u6240\u3067\u3059\u3002\nvoid sendTableTrigger(Set<String> tables) {\n  SqliteTransaction transaction = transactions.get();\n  if (transaction != null) {\n    transaction.addAll(tables);\n  } else {\n    if (logging) log(\"TRIGGER %s\", tables);\n    triggers.onNext(tables);\n  }\n}\n\nsendTableTrigger\u30e1\u30bd\u30c3\u30c9\u306f\u3001BriteDatabase\u306einsert, update, delete\u30e1\u30bd\u30c3\u30c9\u306a\u3069\u3067\u5229\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u3001\u4ee5\u4e0b\u306finsert\u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u8eab\u3067\u3059\u3002\npublic long insert(@NonNull String table, @NonNull ContentValues values,\n    @ConflictAlgorithm int conflictAlgorithm) {\n  SQLiteDatabase db = getWriteableDatabase();\n\n  if (logging) {\n    log(\"INSERT\\n  table: %s\\n  values: %s\\n  conflictAlgorithm: %s\", table, values,\n        conflictString(conflictAlgorithm));\n  }\n  long rowId = db.insertWithOnConflict(table, null, values, conflictAlgorithm);\n\n  if (logging) log(\"INSERT id: %s\", rowId);\n\n  if (rowId != -1) {\n    // Only send a table trigger if the insert was successful.\n    sendTableTrigger(Collections.singleton(table));\n  }\n  return rowId;\n}\n\nINSERT\u306b\u6210\u529f\u3057\u305f\u5834\u5408\u306b\u3001sendTableTrigger\u30e1\u30bd\u30c3\u30c9\u306bINSERT\u3057\u305f\u30c6\u30fc\u30d6\u30eb\u540d\u3092\u6e21\u3057\u3066\u3044\u307e\u3059\u306d\u3002\u540c\u69d8\u306bUPDATE\u3084DELETE\u306e\u6210\u529f\u6642\u306b\u3082sendTableTrigger\u304c\u547c\u3070\u308c\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u3063\u3066\u3001\u30c6\u30fc\u30d6\u30eb\u5909\u66f4\u304c\u3042\u3063\u305f\u6642\u306e\u901a\u77e5\u304c\u958b\u59cb\u3067\u304d\u308b\u308f\u3051\u3067\u3059\u306d\u3002\n\n\u901a\u77e5\u958b\u59cb\u5f8c\u306e\u51e6\u7406\n\u8cfc\u8aad\u3055\u308c\u308bObservable\u306e\u5b9a\u7fa9\u7b87\u6240\u306b\u623b\u308a\u307e\u3057\u3087\u3046\u3002\n  DatabaseQuery query = new DatabaseQuery(tableFilter, sql, args);\n  final Observable<Query> queryObservable = triggers //\n      .filter(tableFilter) // Only trigger on tables we care about.\n      .map(query) // DatabaseQuery maps to itself to save an allocation.\n      .onBackpressureLatest() // Guard against uncontrollable frequency of upstream emissions.\n      .startWith(query) //\n      .observeOn(scheduler) //\n      .onBackpressureLatest() // Guard against uncontrollable frequency of scheduler executions.\n      .doOnSubscribe(ensureNotInTransaction);\n\n\n\u30c6\u30fc\u30d6\u30eb\u306e\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\ntriggers\u304b\u3089\u306f\u5909\u66f4\u3055\u308c\u305f\u30c6\u30fc\u30d6\u30eb\u540d\u304cSet<String>\u3068\u3057\u3066\u6d41\u308c\u3066\u304d\u307e\u3059\u3002\u3053\u308c\u3092\u6b21\u306b\u51e6\u7406\u3059\u308b\u306e\u306f.filter(tableFilter)\u3067\u3059\u3002tableFilter\u306f\u3001public\u306acreateQuery\u30e1\u30bd\u30c3\u30c9\u3067\u751f\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n@CheckResult @NonNull\npublic QueryObservable createQuery(@NonNull final String table, @NonNull String sql,\n    @NonNull String... args) {\n  Func1<Set<String>, Boolean> tableFilter = new Func1<Set<String>, Boolean>() {\n    @Override public Boolean call(Set<String> triggers) {\n      return triggers.contains(table);\n    }\n\n    @Override public String toString() {\n      return table;\n    }\n  };\n  return createQuery(tableFilter, sql, args);\n}\n\ncreateQuery\u306e\u7b2c1\u5f15\u6570\u306b\u306f\u3001\u81ea\u5206\u304c\u901a\u77e5\u3092\u53d7\u3051\u305f\u3044\u30c6\u30fc\u30d6\u30eb\u540d\u3092\u6e21\u3057\u307e\u3059\u3002\u5909\u66f4\u3057\u305f\u30c6\u30fc\u30d6\u30eb\u306e\u4e00\u89a7\u306b\u901a\u77e5\u3092\u53d7\u3051\u305f\u3044\u30c6\u30fc\u30d6\u30eb\u304c\u542b\u307e\u308c\u3066\u3044\u308c\u3070\u3001\u6b21\u306e\u51e6\u7406\u304c\u3067\u304d\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\n\u30af\u30a8\u30ea\u306e\u518d\u5b9f\u884c\n\u3064\u3065\u3044\u3066\u3001.map(query)\u306e\u8aac\u660e\u3067\u3059\u3002query\u306f\u3001\nDatabaseQuery query = new DatabaseQuery(tableFilter, sql, args);\n\n\u3068\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002DatabaseQuery\u306fQuery\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3067\u3059\u3002Query#run\u306b\u3088\u3063\u3066\u3001SQL\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3066Cursor\u3092\u8fd4\u3057\u307e\u3059\u3002\n@Override public Cursor run() {\n  if (transactions.get() != null) {\n    throw new IllegalStateException(\"Cannot execute observable query in a transaction.\");\n  }\n\n  long startNanos = nanoTime();\n  Cursor cursor = getReadableDatabase().rawQuery(sql, args);\n\n  if (logging) {\n    long tookMillis = NANOSECONDS.toMillis(nanoTime() - startNanos);\n    log(\"QUERY (%sms)\\n  tables: %s\\n  sql: %s\\n  args: %s\", tookMillis, tableFilter,\n        indentSql(sql), Arrays.toString(args));\n  }\n\n  return cursor;\n}\n\n\u307e\u305f\u3001map\u306e\u4e2d\u306b\u5165\u308c\u3089\u308c\u3066\u3044\u308b\u306e\u3067\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001DatabaseQuery\u306fFunc1<Set<String>, Query>\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002Func1#call\u3067\u5358\u7d14\u306b\u5024\u304c\u6d41\u308c\u3066\u304d\u305f\u3089\u81ea\u5206\u81ea\u8eab\u3092\u8fd4\u3059\u3068\u3044\u3046\u5b9f\u88c5\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n@Override public Query call(Set<String> ignored) {\n  return this;\n}\n\n\u3053\u3053\u307e\u3067\u3067\u3001\u30c6\u30fc\u30d6\u30eb\u5909\u66f4\u306e\u30c8\u30ea\u30ac\u30fc\u767a\u706b\u2192\u901a\u77e5\u3092\u53d7\u3051\u305f\u3044\u30c6\u30fc\u30d6\u30eb\u3060\u3051\u6b21\u306e\u51e6\u7406\u3078\u2192Query\uff08\u5b9f\u4f53\u306fDatabaseQuery\uff09 \u304c\u6d41\u308c\u308b\u3001\u3068\u3044\u3046\u5909\u66f4\u901a\u77e5\u306e\u4ed5\u7d44\u307f\u304c\u8aac\u660e\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u521d\u56de\u8cfc\u8aad\u6642\u306e\u51e6\u7406\n\u30c6\u30fc\u30d6\u30eb\u5909\u66f4\u304c\u3042\u308b\u3068Query\u304c\u6d41\u308c\u3066\u304f\u308b\u3068\u3044\u3046\u8aac\u660e\u3092\u305a\u3063\u3068\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001Query\u304c\u6d41\u308c\u3066\u304d\u3066\u6b32\u3057\u3044\u30bf\u30a4\u30df\u30f3\u30b0\u3068\u3057\u3066\u5fd8\u308c\u3066\u306f\u3044\u3051\u306a\u3044\u306e\u304c\u3001\u6700\u521d\u306bsubscribe\u3057\u305f\u6642\u3067\u3059\u3002\u3053\u308c\u306b\u3064\u3044\u3066\u3082\u3001\u8cfc\u8aad\u3055\u308c\u308bObservable\u306e\u5b9a\u7fa9\u7b87\u6240\u3067\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\n  DatabaseQuery query = new DatabaseQuery(tableFilter, sql, args);\n  final Observable<Query> queryObservable = triggers\n      .filter(tableFilter)\n      .map(query)\n      .onBackpressureLatest()\n      .startWith(query) // \u2190\u3053\u3053\u3067\u3059\uff01\n      .observeOn(scheduler)\n      .onBackpressureLatest()\n      .doOnSubscribe(ensureNotInTransaction);\n\n.startWith(query)\u3067\u3001\u521d\u56de\u8cfc\u8aad\u6642\u306b\u306fquery\u3092\u305d\u306e\u307e\u307e\u6d41\u3059\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u307e\u3068\u3081\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001SQLBrite\u304c\u30c6\u30fc\u30d6\u30eb\u5909\u66f4\u3092\u901a\u77e5\u3059\u308b\u4ed5\u7d44\u307f\u3092\u8aac\u660e\u3057\u307e\u3057\u305f\u3002\u3056\u3063\u304f\u308a\u8a00\u3046\u3068\u3001\n\nINSERT, UPDATE, DELETE\u6642\u306a\u3069\u306b\u3001PublishSubject#onNext(Set<String>)\u3067\u5909\u66f4\u3057\u305f\u30c6\u30fc\u30d6\u30eb\u3092\u6d41\u3059\n\ntableFilter\u3067\u4eca\u898b\u3066\u3044\u308b\u30c6\u30fc\u30d6\u30eb\u3060\u3051\u306b\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3059\u308b\n\n.map(query)\u3067Query\u3092\u6d41\u3059\n\n.startWith(query)\u3067\u521d\u56de\u8cfc\u8aad\u6642\u3082Query\u3092\u6d41\u3059\n\n\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3067\u3057\u305f\u3002\n\n\u611f\u60f3\n\u4f55\u304b\u306e\u4ed5\u7d44\u307f\u306e\u8aac\u660e\u3092\u8a00\u8449\u3060\u3051\u3067\u66f8\u304f\u306e\u306f\u304b\u306a\u308a\u96e3\u3057\u3044\u3068\u611f\u3058\u307e\u3057\u305f\u3002\u3068\u304f\u306b\u3001RxJava\u306f\u753b\u50cf\u306a\u3069\u3092\u99c6\u4f7f\u3057\u3066\u8aac\u660e\u3057\u306a\u3044\u3068\u30a4\u30e1\u30fc\u30b8\u304c\u3064\u304b\u307f\u306b\u304f\u3044\u3067\u3059\u306d\u3002\u672c\u5f53\u306f\u3001mapToList, mapToOne\u30e1\u30bd\u30c3\u30c9\u306e\u4ed5\u7d44\u307f\u3084\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306e\u6271\u3044\u65b9\u306a\u3069\u3082\u8aac\u660e\u3057\u305f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u529b\u5c3d\u304d\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\u3057\u304b\u3057\u3001\u4ed6\u306e\u4eba\u306e\uff08\u3057\u304b\u3082Square\u793e\u306e\u4eba\u306e\uff09\u30b3\u30fc\u30c9\u3092\u3058\u3063\u304f\u308a\u8aad\u3093\u3060\u3053\u3068\u3067\u3001\u304b\u306a\u308a\u52c9\u5f37\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u81ea\u5206\u306e\u77e5\u3089\u306a\u304b\u3063\u305f\u3053\u3068\uff08startWith\u30e1\u30bd\u30c3\u30c9\u306a\u3069\uff09\u3092\u77e5\u308b\u3053\u3068\u304c\u3067\u304d\u3066\u826f\u304b\u3063\u305f\u3067\u3059\u3002\u7686\u3055\u3093\u3082\u6c17\u306b\u306a\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308c\u3070\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u307f\u3066\u306f\u3044\u304b\u304c\u3067\u3057\u3087\u3046\u304b\u3002\n\u4ee5\u4e0a\u3067\u3059\u3002\n# \u3053\u306e\u8a18\u4e8b\u306b\u3064\u3044\u3066\n\u6700\u8fd1\u3001SQLBrite\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u89e6\u308c\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u5909\u66f4\u304cObservable\u3068\u3057\u3066\u8cfc\u8aad\u3067\u304d\u308b\u3068\u3044\u3046\u3053\u3068\u306b\u611f\u52d5\u3057\u307e\u3057\u305f\u3002Github\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307f\u308b\u3068\u3001SQLBrite\u306f\u305f\u3063\u305f\u306e6\u30d5\u30a1\u30a4\u30eb\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u3053\u308c\u306a\u3089\u8aad\u3081\u308b\u3060\u308d\u3046\u3068\u601d\u3063\u305f\u306e\u3067\u3001\u3056\u3063\u3068\u76ee\u3092\u901a\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001SQLBrite\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u308f\u304b\u3063\u305fSQLBrite\u304c\u30c6\u30fc\u30d6\u30eb\u5909\u66f4\u3092\u901a\u77e5\u3059\u308b\u4ed5\u7d44\u307f\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\n# SQLBrite\u3068\u306f\uff1f\n\u53c2\u8003:\n- Github\u30ea\u30dd\u30b8\u30c8\u30ea: https://github.com/square/sqlbrite\n- \u81ea\u5206\u304c\u66f8\u3044\u305f\u7d39\u4ecb\u8a18\u4e8b: http://tech.furyu.jp/blog/?p=5233\n\nSQLBrite\u3068\u306f\u3001SQLiteOpenHelper\u3068ContentResolver\u3092\u30e9\u30c3\u30d7\u3059\u308bSquare\u793e\u88fd\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002SQLiteOpenHelper\u3092\u30e9\u30c3\u30d7\u3057\u305fBriteDatabase\u3001ContentResolver\u3092\u30e9\u30c3\u30d7\u3057\u305fBriteContentResolver\u3092\u63d0\u4f9b\u3057\u3066\u304f\u308c\u307e\u3059\u3002\nBriteDatabase\u306f\u3001`BriteDatabase#createQuery(String table, String query)`\u306b\u3088\u3063\u3066\u3001`QueryObservable extends Observable<Query>`\u3068\u3044\u3046\u8cfc\u8aad\u3067\u304d\u308b\u30af\u30a8\u30ea\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```java:createQuery\nObservable<Query> users = db.createQuery(\"users\", \"SELECT * FROM users\");\nusers.subscribe(new Action1<Query>() {\n  @Override public void call(Query query) {\n    Cursor cursor = query.run();\n    // TODO parse data...\n  }\n});\n```\n\uff08https://github.com/square/sqlbrite#usage \u3088\u308a\u5f15\u7528\uff09\n\nINSERT, UPDATE, DELETE\u306a\u3069\u3067\u3001users\u30c6\u30fc\u30d6\u30eb\u306b\u5909\u66f4\u304c\u3042\u308b\u3068`Action1#call(Query query)`\u304c\u547c\u3070\u308c\u308b\u306e\u3067\u3001View\u306b\u53cd\u6620\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u307e\u305f\u3001`QueryObservable#mapToList(Func1<Cursor, T> mapper)`\u30e1\u30bd\u30c3\u30c9\u3067`Cursor`\u304b\u3089\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u30ea\u30b9\u30c8\u306b\u5909\u63db\u3067\u304d\u3001\n\n```java:mapToList\ndb.createQuery(\"users\", \"SELECT * FROM users\")\n    .mapToList(new Func1<Cursor, User>() {\n        @Override\n        public User call(Cursor cursor) {\n            long id = cursor.getLong(cursor.getColumnIndexOrThrow(\"_id\"));\n            String name = cursor.getString(cursor.getColumnIndexOrThrow(\"name\"));\n            return new User(id, name);\n        }\n    }).subscribe(new Action1<List<User>>() {\n        @Override\n        public void call(List<User> users) {\n            // \u30e6\u30fc\u30b6\u30fc\u30ea\u30b9\u30c8\u306e\u8868\u793a\u306a\u3069\n        }\n    });\n```\n\n`QueryObservable#mapToOne(Func1<Cursor, T> mapper)`\u30e1\u30bd\u30c3\u30c9\u3067`Cursor`\u304b\u3089\u5358\u4e00\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002\n\n```java:mapToOne\ndb.createQuery(\"users\", \"SELECT count(*) user_count FROM users\")\n    .mapToOne(new Func1<Cursor, Long>() {\n        @Override\n        public Long call(Cursor cursor) {\n            long count = cursor.getLong(cursor.getColumnIndexOrThrow(\"user_count\"));\n            return count;\n        }\n    }).subscribe(new Action1<Long>() {\n        @Override\n        public void call(Long count) {\n            // \u30e6\u30fc\u30b6\u30fc\u6570\u306e\u8868\u793a\u306a\u3069\n        }\n    });\n```\n\n# \u30af\u30e9\u30b9\u306e\u69cb\u6210\nSQLBrite\u3092\u69cb\u6210\u3059\u308b\u4e3b\u306a\u30af\u30e9\u30b9\u3092\u5217\u6319\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u6570\u306f6\u3064\u3067\u3059\u304c\u3001\u5185\u90e8\u30af\u30e9\u30b9\u3082\u3042\u308b\u306e\u30676\u4ee5\u4e0a\u3042\u308a\u307e\u3059\u3002\n\n|\u30af\u30e9\u30b9\u540d|\u8aac\u660e|\n|---|---|\n|SQLBrite|BriteDatabase\u306e\u751f\u6210\u3002|\n|SQLBrite.Query|\u5b9f\u884c\u53ef\u80fd\u306a\u30af\u30a8\u30ea\u306e\u62bd\u8c61\u30af\u30e9\u30b9|\n|BriteDatabase|SQLiteOpenHelper\u3092\u30e9\u30c3\u30d7\u3057\u305f\u30af\u30e9\u30b9\u3002createQuery\u30e1\u30bd\u30c3\u30c9\u3067Observable<Query>\u3092\u751f\u6210\u3059\u308b\u3002insert\u3001delete\u3001update\u306a\u3069\u306e\u51e6\u7406\u3084\u3001\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306e\u7ba1\u7406\u3082\u884c\u3046\u3002|\n|BriteDatabase.DatabaseQuery|Query\u3092\u7d99\u627f\u3057\u305f\u5177\u8c61\u30af\u30e9\u30b9|\n|BriteContentResolver|ContentResolver\uff08\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u9593\u306e\u30c7\u30fc\u30bf\u5171\u6709\u306b\u4f7f\u308f\u308c\u308b\uff09\u3092\u30e9\u30c3\u30d7\u3057\u305f\u30af\u30e9\u30b9\u3002\u8cfc\u8aad\u3067\u304d\u308b`Query`\u3092\u751f\u6210\u3059\u308b\u3002|\n|QueryObservable|Observable<Query>\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3002mapToList\u30e1\u30bd\u30c3\u30c9\u3084mapToOne\u30e1\u30bd\u30c3\u30c9\u3092\u63d0\u4f9b\u3059\u308b\u3002|\n|QueryToListOperator|Query\u3092\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u30ea\u30b9\u30c8\u306b\u5909\u63db\u3059\u308bOperator|\n|QueryToOneOperator|Query\u3092\u5358\u4e00\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306b\u5909\u63db\u3059\u308bOperator|\n\n# \u30c6\u30fc\u30d6\u30eb\u5909\u66f4\u3092\u901a\u77e5\u3059\u308b\u4ed5\u7d44\u307f\n\u30c6\u30fc\u30d6\u30eb\u5909\u66f4\u3092\u901a\u77e5\u3059\u308b\u4ed5\u7d44\u307f\u306f\u3001BriteDatabase\u30af\u30e9\u30b9\u306b\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002`private QueryObservable createQuery(Func1<Set<String>, Boolean>, String,\n    String...)`\u30e1\u30bd\u30c3\u30c9\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```java\n@CheckResult @NonNull\nprivate QueryObservable createQuery(Func1<Set<String>, Boolean> tableFilter, String sql,\n    String... args) {\n  if (transactions.get() != null) {\n    throw new IllegalStateException(\"Cannot create observable query in transaction. \"\n        + \"Use query() for a query inside a transaction.\");\n  }\n\n  DatabaseQuery query = new DatabaseQuery(tableFilter, sql, args);\n  final Observable<Query> queryObservable = triggers //\n      .filter(tableFilter) // Only trigger on tables we care about.\n      .map(query) // DatabaseQuery maps to itself to save an allocation.\n      .onBackpressureLatest() // Guard against uncontrollable frequency of upstream emissions.\n      .startWith(query) //\n      .observeOn(scheduler) //\n      .onBackpressureLatest() // Guard against uncontrollable frequency of scheduler executions.\n      .doOnSubscribe(ensureNotInTransaction);\n  // TODO switch to .extend when non-@Experimental\n  return new QueryObservable(new Observable.OnSubscribe<Query>() {\n    @Override public void call(Subscriber<? super Query> subscriber) {\n      queryObservable.unsafeSubscribe(subscriber);\n    }\n  });\n}\n```\n\n## \u901a\u77e5\u306e\u958b\u59cb\n\u8cfc\u8aad\u3055\u308c\u308bObservable<Query>\u306f\u4ee5\u4e0b\u306e\u7b87\u6240\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```java\n  DatabaseQuery query = new DatabaseQuery(tableFilter, sql, args);\n  final Observable<Query> queryObservable = triggers //\n      .filter(tableFilter) // Only trigger on tables we care about.\n      .map(query) // DatabaseQuery maps to itself to save an allocation.\n      .onBackpressureLatest() // Guard against uncontrollable frequency of upstream emissions.\n      .startWith(query) //\n      .observeOn(scheduler) //\n      .onBackpressureLatest() // Guard against uncontrollable frequency of scheduler executions.\n      .doOnSubscribe(ensureNotInTransaction);\n```\n\n\u3069\u3046\u3084\u3089\u3001`triggers`\u3068\u3044\u3046\u3082\u306e\u304cObservable<Query>\u306e\u6e90\u6d41\u3068\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u3067\u306f\u3001\u3053\u306e`triggers`\u306f\u4f55\u304b\u3068\u8a00\u3046\u3068\u3001BriteDatabase\u306e\u30e1\u30f3\u30d0\u5909\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```java \nprivate final PublishSubject<Set<String>> triggers = PublishSubject.create();\n```\n\n\u305f\u3060\u306e\u3001PublishSubject\u3067\u3059\u306d\u3002\u3068\u3044\u3046\u3053\u3068\u306f\u3001`triggers.onNext`\u304c\u547c\u3070\u308c\u308b\u3053\u3068\u3067\u30c6\u30fc\u30d6\u30eb\u5909\u66f4\u306e\u901a\u77e5\u304c\u958b\u59cb\u3059\u308b\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002`triggers.onNext`\u304c\u547c\u3070\u308c\u3066\u3044\u308b\u306e\u306f\u4ee5\u4e0b\u306e1\u7b87\u6240\u3067\u3059\u3002\n\n```java \nvoid sendTableTrigger(Set<String> tables) {\n  SqliteTransaction transaction = transactions.get();\n  if (transaction != null) {\n    transaction.addAll(tables);\n  } else {\n    if (logging) log(\"TRIGGER %s\", tables);\n    triggers.onNext(tables);\n  }\n}\n```\n\nsendTableTrigger\u30e1\u30bd\u30c3\u30c9\u306f\u3001BriteDatabase\u306einsert, update, delete\u30e1\u30bd\u30c3\u30c9\u306a\u3069\u3067\u5229\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u3001\u4ee5\u4e0b\u306finsert\u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u8eab\u3067\u3059\u3002\n\n```java\npublic long insert(@NonNull String table, @NonNull ContentValues values,\n    @ConflictAlgorithm int conflictAlgorithm) {\n  SQLiteDatabase db = getWriteableDatabase();\n\n  if (logging) {\n    log(\"INSERT\\n  table: %s\\n  values: %s\\n  conflictAlgorithm: %s\", table, values,\n        conflictString(conflictAlgorithm));\n  }\n  long rowId = db.insertWithOnConflict(table, null, values, conflictAlgorithm);\n\n  if (logging) log(\"INSERT id: %s\", rowId);\n\n  if (rowId != -1) {\n    // Only send a table trigger if the insert was successful.\n    sendTableTrigger(Collections.singleton(table));\n  }\n  return rowId;\n}\n```\n\nINSERT\u306b\u6210\u529f\u3057\u305f\u5834\u5408\u306b\u3001sendTableTrigger\u30e1\u30bd\u30c3\u30c9\u306bINSERT\u3057\u305f\u30c6\u30fc\u30d6\u30eb\u540d\u3092\u6e21\u3057\u3066\u3044\u307e\u3059\u306d\u3002\u540c\u69d8\u306bUPDATE\u3084DELETE\u306e\u6210\u529f\u6642\u306b\u3082sendTableTrigger\u304c\u547c\u3070\u308c\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u3063\u3066\u3001\u30c6\u30fc\u30d6\u30eb\u5909\u66f4\u304c\u3042\u3063\u305f\u6642\u306e\u901a\u77e5\u304c\u958b\u59cb\u3067\u304d\u308b\u308f\u3051\u3067\u3059\u306d\u3002\n\n## \u901a\u77e5\u958b\u59cb\u5f8c\u306e\u51e6\u7406\n\u8cfc\u8aad\u3055\u308c\u308bObservable<Query>\u306e\u5b9a\u7fa9\u7b87\u6240\u306b\u623b\u308a\u307e\u3057\u3087\u3046\u3002\n\n```java\n  DatabaseQuery query = new DatabaseQuery(tableFilter, sql, args);\n  final Observable<Query> queryObservable = triggers //\n      .filter(tableFilter) // Only trigger on tables we care about.\n      .map(query) // DatabaseQuery maps to itself to save an allocation.\n      .onBackpressureLatest() // Guard against uncontrollable frequency of upstream emissions.\n      .startWith(query) //\n      .observeOn(scheduler) //\n      .onBackpressureLatest() // Guard against uncontrollable frequency of scheduler executions.\n      .doOnSubscribe(ensureNotInTransaction);\n```\n\n### \u30c6\u30fc\u30d6\u30eb\u306e\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\n`triggers`\u304b\u3089\u306f\u5909\u66f4\u3055\u308c\u305f\u30c6\u30fc\u30d6\u30eb\u540d\u304c`Set<String>`\u3068\u3057\u3066\u6d41\u308c\u3066\u304d\u307e\u3059\u3002\u3053\u308c\u3092\u6b21\u306b\u51e6\u7406\u3059\u308b\u306e\u306f`.filter(tableFilter)`\u3067\u3059\u3002`tableFilter`\u306f\u3001public\u306acreateQuery\u30e1\u30bd\u30c3\u30c9\u3067\u751f\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```java \n@CheckResult @NonNull\npublic QueryObservable createQuery(@NonNull final String table, @NonNull String sql,\n    @NonNull String... args) {\n  Func1<Set<String>, Boolean> tableFilter = new Func1<Set<String>, Boolean>() {\n    @Override public Boolean call(Set<String> triggers) {\n      return triggers.contains(table);\n    }\n\n    @Override public String toString() {\n      return table;\n    }\n  };\n  return createQuery(tableFilter, sql, args);\n}\n```\n\ncreateQuery\u306e\u7b2c1\u5f15\u6570\u306b\u306f\u3001\u81ea\u5206\u304c\u901a\u77e5\u3092\u53d7\u3051\u305f\u3044\u30c6\u30fc\u30d6\u30eb\u540d\u3092\u6e21\u3057\u307e\u3059\u3002\u5909\u66f4\u3057\u305f\u30c6\u30fc\u30d6\u30eb\u306e\u4e00\u89a7\u306b\u901a\u77e5\u3092\u53d7\u3051\u305f\u3044\u30c6\u30fc\u30d6\u30eb\u304c\u542b\u307e\u308c\u3066\u3044\u308c\u3070\u3001\u6b21\u306e\u51e6\u7406\u304c\u3067\u304d\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\n### \u30af\u30a8\u30ea\u306e\u518d\u5b9f\u884c\n\u3064\u3065\u3044\u3066\u3001`.map(query)`\u306e\u8aac\u660e\u3067\u3059\u3002`query`\u306f\u3001\n\n```java \nDatabaseQuery query = new DatabaseQuery(tableFilter, sql, args);\n```\n\n\u3068\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002DatabaseQuery\u306fQuery\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3067\u3059\u3002`Query#run`\u306b\u3088\u3063\u3066\u3001SQL\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3066Cursor\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```java\n@Override public Cursor run() {\n  if (transactions.get() != null) {\n    throw new IllegalStateException(\"Cannot execute observable query in a transaction.\");\n  }\n\n  long startNanos = nanoTime();\n  Cursor cursor = getReadableDatabase().rawQuery(sql, args);\n\n  if (logging) {\n    long tookMillis = NANOSECONDS.toMillis(nanoTime() - startNanos);\n    log(\"QUERY (%sms)\\n  tables: %s\\n  sql: %s\\n  args: %s\", tookMillis, tableFilter,\n        indentSql(sql), Arrays.toString(args));\n  }\n\n  return cursor;\n}\n```\n\n\u307e\u305f\u3001map\u306e\u4e2d\u306b\u5165\u308c\u3089\u308c\u3066\u3044\u308b\u306e\u3067\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001DatabaseQuery\u306f`Func1<Set<String>, Query>`\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002`Func1#call`\u3067\u5358\u7d14\u306b\u5024\u304c\u6d41\u308c\u3066\u304d\u305f\u3089\u81ea\u5206\u81ea\u8eab\u3092\u8fd4\u3059\u3068\u3044\u3046\u5b9f\u88c5\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\n```java \n@Override public Query call(Set<String> ignored) {\n  return this;\n}\n```\n\n\u3053\u3053\u307e\u3067\u3067\u3001\u30c6\u30fc\u30d6\u30eb\u5909\u66f4\u306e\u30c8\u30ea\u30ac\u30fc\u767a\u706b\u2192\u901a\u77e5\u3092\u53d7\u3051\u305f\u3044\u30c6\u30fc\u30d6\u30eb\u3060\u3051\u6b21\u306e\u51e6\u7406\u3078\u2192Query\uff08\u5b9f\u4f53\u306fDatabaseQuery\uff09 \u304c\u6d41\u308c\u308b\u3001\u3068\u3044\u3046\u5909\u66f4\u901a\u77e5\u306e\u4ed5\u7d44\u307f\u304c\u8aac\u660e\u3067\u304d\u307e\u3057\u305f\u3002\n\n### \u521d\u56de\u8cfc\u8aad\u6642\u306e\u51e6\u7406\n\u30c6\u30fc\u30d6\u30eb\u5909\u66f4\u304c\u3042\u308b\u3068Query\u304c\u6d41\u308c\u3066\u304f\u308b\u3068\u3044\u3046\u8aac\u660e\u3092\u305a\u3063\u3068\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001Query\u304c\u6d41\u308c\u3066\u304d\u3066\u6b32\u3057\u3044\u30bf\u30a4\u30df\u30f3\u30b0\u3068\u3057\u3066\u5fd8\u308c\u3066\u306f\u3044\u3051\u306a\u3044\u306e\u304c\u3001\u6700\u521d\u306bsubscribe\u3057\u305f\u6642\u3067\u3059\u3002\u3053\u308c\u306b\u3064\u3044\u3066\u3082\u3001\u8cfc\u8aad\u3055\u308c\u308bObservable\u306e\u5b9a\u7fa9\u7b87\u6240\u3067\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\n\n```java\n  DatabaseQuery query = new DatabaseQuery(tableFilter, sql, args);\n  final Observable<Query> queryObservable = triggers\n      .filter(tableFilter)\n      .map(query)\n      .onBackpressureLatest()\n      .startWith(query) // \u2190\u3053\u3053\u3067\u3059\uff01\n      .observeOn(scheduler)\n      .onBackpressureLatest()\n      .doOnSubscribe(ensureNotInTransaction);\n```\n\n`.startWith(query)`\u3067\u3001\u521d\u56de\u8cfc\u8aad\u6642\u306b\u306fquery\u3092\u305d\u306e\u307e\u307e\u6d41\u3059\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n# \u307e\u3068\u3081\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001SQLBrite\u304c\u30c6\u30fc\u30d6\u30eb\u5909\u66f4\u3092\u901a\u77e5\u3059\u308b\u4ed5\u7d44\u307f\u3092\u8aac\u660e\u3057\u307e\u3057\u305f\u3002\u3056\u3063\u304f\u308a\u8a00\u3046\u3068\u3001\n\n- INSERT, UPDATE, DELETE\u6642\u306a\u3069\u306b\u3001`PublishSubject#onNext(Set<String>)`\u3067\u5909\u66f4\u3057\u305f\u30c6\u30fc\u30d6\u30eb\u3092\u6d41\u3059\n- `tableFilter`\u3067\u4eca\u898b\u3066\u3044\u308b\u30c6\u30fc\u30d6\u30eb\u3060\u3051\u306b\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3059\u308b\n- `.map(query)`\u3067Query\u3092\u6d41\u3059\n- `.startWith(query)`\u3067\u521d\u56de\u8cfc\u8aad\u6642\u3082Query\u3092\u6d41\u3059\n\n\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3067\u3057\u305f\u3002\n\n# \u611f\u60f3\n\u4f55\u304b\u306e\u4ed5\u7d44\u307f\u306e\u8aac\u660e\u3092\u8a00\u8449\u3060\u3051\u3067\u66f8\u304f\u306e\u306f\u304b\u306a\u308a\u96e3\u3057\u3044\u3068\u611f\u3058\u307e\u3057\u305f\u3002\u3068\u304f\u306b\u3001RxJava\u306f\u753b\u50cf\u306a\u3069\u3092\u99c6\u4f7f\u3057\u3066\u8aac\u660e\u3057\u306a\u3044\u3068\u30a4\u30e1\u30fc\u30b8\u304c\u3064\u304b\u307f\u306b\u304f\u3044\u3067\u3059\u306d\u3002\u672c\u5f53\u306f\u3001mapToList, mapToOne\u30e1\u30bd\u30c3\u30c9\u306e\u4ed5\u7d44\u307f\u3084\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306e\u6271\u3044\u65b9\u306a\u3069\u3082\u8aac\u660e\u3057\u305f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u529b\u5c3d\u304d\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\n\u3057\u304b\u3057\u3001\u4ed6\u306e\u4eba\u306e\uff08\u3057\u304b\u3082Square\u793e\u306e\u4eba\u306e\uff09\u30b3\u30fc\u30c9\u3092\u3058\u3063\u304f\u308a\u8aad\u3093\u3060\u3053\u3068\u3067\u3001\u304b\u306a\u308a\u52c9\u5f37\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u81ea\u5206\u306e\u77e5\u3089\u306a\u304b\u3063\u305f\u3053\u3068\uff08startWith\u30e1\u30bd\u30c3\u30c9\u306a\u3069\uff09\u3092\u77e5\u308b\u3053\u3068\u304c\u3067\u304d\u3066\u826f\u304b\u3063\u305f\u3067\u3059\u3002\u7686\u3055\u3093\u3082\u6c17\u306b\u306a\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308c\u3070\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u307f\u3066\u306f\u3044\u304b\u304c\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u4ee5\u4e0a\u3067\u3059\u3002\n", "tags": ["Android", "RxJava", "sqlbrite"]}