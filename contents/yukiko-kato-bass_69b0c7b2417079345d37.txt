{"tags": ["jMockit", "Java"], "context": "Java8u74\u21928u102\u3050\u3089\u3044\u306b\u4e0a\u3052\u305f\u969b\u306b\u3001\u3069\u3046\u3084\u3089JMockit\u3082\u4e0a\u3052\u306a\u304d\u3083\u306a\u3089\u3093\u3063\u3066\u3053\u3068\u306b\u306a\u308a\u307e\u3057\u305f\u304c\u3001\n\u4f7f\u3063\u3066\u308bJMockit\u304c\u53e4\u3059\u304e\u3066\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3084\u3089\u3001\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3084\u3089\u308f\u308a\u3068\u3066\u3093\u3084\u308f\u3093\u3084\u3060\u3063\u305f\u306e\u3067\u3001\n\u5099\u5fd8\u9332\u3068\u3057\u3066\u307e\u3068\u3081\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\u203b\u968f\u6642\u66f4\u65b0\u4e2d\n\n\u74b0\u5883\nJava8u102(8u74\u3067\u3082\u305f\u3076\u3093\u52d5\u304f\u304b\u3068)\nmaven3\u7cfb\n\nchange log\n\u3060\u3044\u305f\u3044\u66f8\u3044\u3066\u3042\u308b\u3051\u3069\u3001\u5b9f\u969b\u306b\u3069\u3046\u66f8\u3051\u3070\u3044\u3044\u306e\u304b\u308f\u304b\u3089\u306a\u3044\u306e\u3082\u3042\u308a\u3064\u3064\nJMockit Development history\n\n\u4e3b\u306b\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u3044\u305f\u30b5\u30a4\u30c8\n\n\nJMockit\u4f7f\u3044\u65b9\u30e1\u30e2\n\u3060\u3044\u305f\u3044\u8f09\u3063\u3066\u3066\u3001\u3057\u304b\u3082\u3001\u8a73\u3057\u304f\u66f8\u304d\u65b9\u3082\u8f09\u3063\u3066\u3066\u30de\u30b8\u611f\u8b1d\u3067\u3059\u3002\n\n\n\u307e\u305a\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u30a2\u30c3\u30d7\n\nJMockit 1.4\n\npom.xml\n        <dependency>\n            <groupId>com.googlecode.jmockit</groupId>\n            <artifactId>jmockit</artifactId>\n            <version>1.4</version>\n            <scope>test</scope>\n        </dependency>\n\n\n\nJMockit 1.30\ngroup\u3059\u3089\u5909\u308f\u3063\u3066\u308b\u3053\u3068\u306b\u30d3\u30d3\u308a\u307e\u3059\u3002(\u3088\u304f\u3042\u308b\u3051\u3069\u3055\u30fb\u30fb\u30fb)\n\u203b\u8ffd\u8a18\uff1a\u3054\u6307\u6458\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\u6614\u304b\u30892\u3064\u30b0\u30eb\u30fc\u30d7\u304c\u3042\u3063\u305f\u3089\u3057\u3044\u3067\u3059\u3002\u304c\u3001\u7d71\u5408\u3055\u308c\u305f\u3093\u3067\u3059\u304b\u306d\uff1f\n\npom.xml\n        <dependency>\n            <groupId>org.jmockit</groupId>\n            <artifactId>jmockit</artifactId>\n            <version>1.30</version>\n            <scope>test</scope>\n        </dependency>\n\n\n\n1. \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3092\u89e3\u6d88\u3059\u308b\n\nNonStrictExpectations\u3092Expectations\u306b\u5909\u66f4\u3059\u308b\nVersion 1.23\u3067Deprecated\u3001Version 1.25\u3067\u524a\u9664\u306b\u306a\u3063\u3066\u307e\u3059\u3002\n\nVersion 1.23 (Apr 24, 2016):\nDeprecated the NonStrictExpectations class. Existing tests should use Expectations instead.\nVersion 1.25 (Jun 26, 2016):\nRemoved the NonStrictExpectations class, which was deprecated in version 1.23.\n\n\u3068\u308a\u3042\u3048\u305a\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3092\u306a\u3093\u3068\u304b\u3057\u305f\u3044\u306e\u3067\u3001\u76f2\u76ee\u7684\u306b\u5909\u3048\u3066\u3044\u304d\u307e\u3059\u3002\nNonStrictExpectations\u306e\u4f7f\u3044\u65b9\u306f\u4ee5\u4e0b\u306e\u30ea\u30f3\u30af\u3067\u307e\u3068\u3081\u3066\u304f\u3060\u3055\u3063\u3066\u307e\u3059(\u3082\u3046\u4f7f\u3048\u306a\u3044\u3051\u3069\u3002\u3002)\njMockit\u304c\u3044\u3044\u3088 Verification\u7de8\n\nNonStrictExpectations\u3068Expectations\u3068\u306e\u9055\u3044\u306f\n\nExpectations \u5b9f\u884c\u9806\u5e8f\u3001\u5b9f\u884c\u56de\u6570\u306a\u3069\u3059\u3079\u3066\u8a18\u9332\u3002\u304b\u306a\u308a\u53b3\u5bc6\u3002\nNonStrictExpectations \u3061\u3087\u3063\u3068\u3086\u308b\u3081\u3002\u5b9f\u884c\u3055\u308c\u3066\u3082\u3055\u308c\u306a\u304f\u3066\u3082\u30b9\u30eb\u30fc\u3055\u308c\u308b\u3002\n\n\u307f\u305f\u3044\u306a\u9055\u3044\u304c\u3042\u308b\u3089\u3057\u3044\u3067\u3059\u3002\u8a73\u3057\u304f\u306f\u4ee5\u4e0b\u306e\u30ea\u30f3\u30af\u3067\u308f\u304b\u308a\u3084\u3059\u304f\u307e\u3068\u3081\u3066\u304f\u3060\u3055\u3063\u3066\u307e\u3059\u3002\u611f\u8b1d\u3002\nJMockit\u4f7f\u3044\u65b9\u30e1\u30e2 NonStrictExpectations\n\u30c6\u30b9\u30c8\u5b9f\u884c\u6642\u306b\u843d\u3061\u308b\u306e\u3067\u3001\u3053\u308c\u306f\u5f8c\u307b\u3069\u4fee\u6b63\u3057\u307e\u3059\u3002\n\n@Mocked(methods=\"readLine\")\u3068\u304b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u5185\u306e\u5f15\u6570\u3092\u6307\u5b9a\u3057\u3066\u308b\u3084\u3064\nVersion 1.5\u3067Deprecated \u3001Version 1.6\u3067\u300emethods\u300f\u300einverse\u300f\u5c5e\u6027\u306f\u524a\u9664\u3055\u308c\u3066\u307e\u3059\u3002\n\nVersion 1.5 (Oct 20, 2013):\nDeprecated the \"methods\" and \"inverse\" attributes of @Mocked. Existing uses like @Mocked(methods = {\"method1\", \"method2\"}) should simply be rewritten as @Mocked({\"method1\", \"method2\"}) (using the default value attribute). As for the inverse attribute, specify what is to be mocked instead.\nVersion 1.6 (Dec 23, 2013):\nRemoved the \"methods\" and \"inverse\" attributes of the @Mocked annotation, which were deprecated in release 1.5. Tests still using \"@Mocked(methods = {...}) should instead use the default \"value\" attribute.\n\n\u4eca\u5ea6\u304b\u3089@Mocked(methods = {...})\u4f7f\u3063\u3066\u306d\u3001\u3068\u8a00\u3063\u3066\u308b\u308f\u308a\u306b\u306f\u3053\u306e\u65b9\u6cd5\u3082Version 1.19\u3067\u524a\u9664\u3055\u308c\u3061\u3083\u3044\u307e\u3059\u3002\u60b2\u3057\u3044\u3002\n\nVersion 1.19 (Aug 23, 2015):\nRemoved the \"value\" attribute of @Mocked, which was deprecated in release 1.17. Existing tests using \"@Mocked({\"someMethod\", \"anotherMethod\", ...})\" should simply omit the attribute, or use partial mocking as applied with new Expectations(objToPartiallyMock) { ... }, or apply a MockUp class.\n\nExpectations\u306e\u5f15\u6570\u3067\u66f8\u304f\u65b9\u6cd5\u306f\u3001\u305d\u306e\u5f8c\u3082\u3044\u308d\u3044\u308d\u30b4\u30cb\u30e7\u30b4\u30cb\u30e7\u3042\u3063\u3066\u3001\u4f7f\u3048\u308b\u3093\u3060\u304b\u4f7f\u3048\u306a\u3044\u3093\u3060\u304b\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u3001\n\u304a\u3068\u306a\u3057\u304fMockUp\u306b\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n\n\u4fee\u6b63\u524d.java\n@Test\npublic void test(@Mocked(methods=\"readLine\") final BufferedReader br) {\n        new NonStrictExpectations() {\n            {\n                br.readLine();\n                result = new IOException();\n            }\n        };\n}\n\n\n\n\u4fee\u6b63\u5f8c.java\n@Test\npublic void test() { // MockUp<T>\u3067\u5b9a\u7fa9\u3059\u308b\u306e\u3067\u3001\u5f15\u6570\u306f\u524a\u9664\u3059\u308b\u3002\u3042\u308b\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\n        new MockUp<BufferedReader>() {\n            @Mock\n            public String readLine() throws IOException{\n                throw new IOException();\n            }\n        };  \n}\n\n\n\u3061\u306a\u307f\u306b\u3001BufferedReader\u306e\u3053\u306e\u5834\u5408\u3060\u3068\u3001@Mocked\u3092@Injectable\u306b\u5909\u3048\u3066\u3082\u826f\u3055\u305d\u3046(\u3068\u3044\u3046\u304b\u3001\u3069\u3061\u3089\u3082\u540c\u3058\u7d50\u679c\u306b\u306a\u3063\u305f)\n\u3069\u3063\u3061\u304c\u3044\u3044\u306e\u304b\u306a\u3041\u3002\n\u8a73\u3057\u304f\u306f\u3053\u3061\u3089\u2192JMockit \u306f\u3058\u3081\u306e\u4e00\u6b69 @Injectable\n\nsetField, invoke\u306fDeencapsulation\u306estatic\u30e1\u30bd\u30c3\u30c9\u306b\u5909\u66f4\u3059\u308b\nsetField, invoke\u3068\u304bprivate\u306a\u3084\u3064\u3089\u306b\u5bfe\u3057\u3066\u64cd\u4f5c\u3092\u884c\u3046\u306e\u306f\u3001Invocations\u30af\u30e9\u30b9\u3060\u3063\u305f\u3088\u3046\u306a\u3093\u3067\u3059\u304c\u3001Version 1.6\u306b\u3066\u524a\u9664\u3055\u308c\u305f\u3088\u3046\u3067\u3059\u3002\n\nVersion 1.6 (Dec 23, 2013):\nRemoved all Reflection-based utility methods from the Invocations class (the base for Expectations and Verifications), in favor of using the static methods of identical signatures in the Deencapsulation class. This change in the API will not require any changes to test code, except that test classes using these methods should now include the following \"static import\": import static mockit.Deencapsulation.*;\n\n\n\u4fee\u6b63\u524d.java\nsetField(hoge, \"aaaa\", \"aaaa\");\ninvoke((hoge, \"privateMethod\");\n\n\n\n\u5909\u66f4\u5f8c.java\nDeencapsulation.setField(hoge, \"aaaa\", \"aaaa\");\nDeencapsulation.invoke((hoge, \"privateMethod\");\n\n\n\u3061\u306a\u307f\u306b\u3001private static final\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u30bb\u30c3\u30c8\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u3001Can not set static final\u3063\u3066\u6012\u3089\u308c\u308b\u5834\u5408\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u306e\u5834\u5408\u306f\u5f8c\u8ff0Deencapsulation.setField\u306e\u6319\u52d5\u304c\u5909\u308f\u3063\u305f\u3089\u3057\u3044\u3092\u53c2\u8003\u306b\u3002\n\n2. \u30c6\u30b9\u30c8\u3067\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3082\u306e\u3092\u4fee\u6b63\u3059\u308b\n\nMissing 1 invocation to: \uff5e Caused by: Missing invocations\n\u3053\u308c\u3067\u30b3\u30b1\u308b\u3084\u3064\u306fNonStrictExpectations\u3092Expectations\u306b\u5909\u66f4\u3059\u308b\u306e\u5f71\u97ff\u3067\u3059\u3002\n\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u547c\u3070\u308c\u3066\u306d\u30fc\u3088\uff01\u3063\u3066\u6012\u3063\u3066\u304a\u308a\u307e\u3059\u3002\u30b5\u30fc\u30bb\u30f3\u3002\n\u30e1\u30bd\u30c3\u30c9\u306e\u8a18\u9332\u304c\u53b3\u5bc6\u306b\u306a\u3063\u305f\u6545\u306e\u30a8\u30e9\u30fc\u3067\u3059\u306d\u3002\n\u56de\u907f\u7b56\u3068\u3057\u3066\u306f\u3001\u30e1\u30bd\u30c3\u30c9\u306e\u6700\u5c0f\u671f\u5f85\u5b9f\u884c\u56de\u6570\u30920\u306b\u3057\u3061\u3083\u3044\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001\u547c\u3070\u308c\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u660e\u793a\u7684\u306b\u793a\u3057\u305f\u3044\u5834\u5408\u306f\u3001maxTimes=0\u3067\u30c1\u30a7\u30c3\u30af\u3067\u3059\u308c\u3070\u826f\u3055\u305d\u3046\u3002\n\nHogeTest.java\n        new Expectations() {{\n            hoge.method(); minTimes=0;\n            hoge.method2(); maxTimes=0;\n        }};\n\n\n\n\u307e\u3042\u3001\u3053\u308c\u3092\u3064\u3051\u308b\u3068\u3001\u547c\u3070\u308c\u305f\u304b\u547c\u3070\u308c\u3066\u306a\u3044\u304b\u308f\u304b\u3089\u306a\u304f\u306a\u308b\u306e\u3067\u3001\u305d\u306e\u8fba\u306fVerifications\u3067\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u3089\u3044\u3044\u3093\u3058\u3083\u306a\u3044\u304b\u306a\u3068\u3002\n\u203b\u8ffd\u8a18\uff1amaxTimes=0;\u3067\u30c1\u30a7\u30c3\u30af\u3067\u304d\u308b\u3058\u3083\u3093\u3068\u6c17\u3065\u304d\u307e\u3057\u305f\u3002\n\nEnum\u306eMock\u306e\u66f8\u304d\u65b9\u304c\u5909\u308f\u3063\u305f\uff1f\n\u3053\u3093\u306a\u66f8\u304d\u65b9\u3057\u3066\u308b\u3084\u3064\u304c\u3001NullPointerException\u3067\u843d\u3061\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\n\u4fee\u6b63\u524d.java\n@Test\npublic void test(@Mocked final HogeEnum hogeEnum) {\n\n    new Expectations() {\n\n        @Mocked\n        HogeEnum hogeEnum;\n\n        {\n            hogeEnum.getHoge();\n            result = \"hogehoge\";\n        }\n    };\n\n\n\n\u3069\u3046\u3084\u3089MockUp\u306b\u66f8\u304d\u63db\u3048\u308c\u3070\u826f\u3044\u3089\u3057\u3044\u3002\nHow to mock this in an Enum class using jmockt?\n\n\u4fee\u6b63\u5f8c.java\n@Test\npublic void test() { // MockUp\u3067\u66f8\u304f\u306e\u3067\u3001\u5f15\u6570\u306f\u6d88\u3059\n    new MockUp<HogeEnum>() {\n        @Mock\n        public String getHoge() {\n            return \"/NOTHING/DATA.mf\";\n        }\n    };\n}\n\n\n\nNonStrictExpectations\u2192Expectations\u306b\u5909\u3048\u305f\u3053\u3068\u306b\u3088\u308bMock\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u6319\u52d5\u5909\u66f4\uff1f\n\u3053\u3093\u306a\u66f8\u304d\u65b9\u3057\u3066\u305f\u3084\u3064\u3092NonStrictExpectations\u2192Expectations\u306b\u5909\u3048\u305f\u3089\u3001fail\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u3002\n\n\u5909\u66f4\u524d.java\n    @Test\n    public void test() throws Exception {\n        final Hoge hoge1 = new Hoge(\"hogehoge\");\n        new NonStrictExpectations() {\n            {\n                test.getHoge(\"hogehoge\");\n                result = hoge1;\n            }\n        };\n\n        assertThat(test.getHoge(\"hogehoge\"), hoge1);\n\n        assertThat(test.getHoge(\"fugafuga\"), null);  // \u3053\u3053\u3067null\u306b\u306f\u306a\u3089\u306a\u3044\uff01\n    }\n\n\n\u30c7\u30d0\u30c3\u30af\u3057\u3066\u307f\u305f\u3089\u3001Hoge\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u81ea\u4f53\u306f\u4f5c\u3089\u308c\u3066\u3057\u307e\u3063\u3066\u305f\u3002(value\u3068\u304b\u306fnull\u306a\u3093\u3060\u3051\u3069)\n\u3053\u3053\u898b\u308b\u3068\u3001JMockit\u4f7f\u3044\u65b9\u30e1\u30e2 \u30e2\u30c3\u30af\u5316\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u8fd4\u3059\u5024 \u3068\u3042\u308b\u306e\u3067\u3001\u6319\u52d5\u901a\u308a\u3067\u306f\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u5f15\u6570\u306b\u3088\u3063\u3066\u8fd4\u3059\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5909\u3048\u305f\u3044\u3063\u3066\u3044\u3046\u304b\u3001\u3042\u308b\u5f15\u6570\u4ee5\u5916\u306e\u3068\u304d\u306fnull\u8fd4\u3057\u305f\u3044\u3093\u3067\u3059\u3088\u3002\n\u203b\u8ffd\u8a18\uff1anull\u3092\u8fd4\u3057\u305f\u3044\u5834\u5408\u306f\u660e\u793a\u7684\u306b\u6307\u5b9a\u3057\u306a\u3044\u3068\u3060\u3081\u3089\u3057\u3044\u3002\u3053\u3053\u306b\u66f8\u3044\u3066\u307e\u3057\u305f\u3002\u2192 JMockit\u4f7f\u3044\u65b9\u30e1\u30e2 \u30e2\u30c3\u30af\u304c\u8fd4\u3059\u5024\u3092 null \u306b\u3057\u305f\u3044\u5834\u5408\n\u203b2017/01/20\u8ffd\u8a18\uff1a7tsuno\u3055\u3093\u3088\u308a\u30b3\u30e1\u30f3\u30c8\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\u304d\u3063\u3061\u308a\u3084\u308b\u306a\u3089Delegate\u4f7f\u3046\u306e\u304c\u826f\u3044\u3067\u3059\u306d\u3002\u8a73\u3057\u304f\u306f\u2192Delegate\u3067\u306e\u30de\u30c3\u30c1\u30f3\u30b0\n\n\u4fee\u6b63\u65b9\u6cd5\n\u5f15\u6570\u9055\u3046\u5834\u5408\u306eresult\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\n\n\u4fee\u6b63\u6848.java\n    @Test\n    public void test() throws Exception {\n        final Hoge hoge1 = new Hoge(\"hogehoge\");\n        new Expectations() {\n            {\n                test.getHoge(\"hogehoge\");\n                result = hoge1;\n                test.getHoge(\"fugafuga\");\n                result = null;\n            }\n        };\n\n        assertThat(test.getHoge(\"hogehoge\"), hoge1);\n\n        assertThat(test.getHoge(\"fugafuga\"), null);\n    }\n\n\n\nDeencapsulation.setField\u306e\u6319\u52d5\u304c\u5909\u308f\u3063\u305f\u3089\u3057\u3044\nprivate static final \u306a\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u66f8\u304d\u63db\u3048\u304c1.4\u3067\u306f\u52d5\u3044\u3066\u305f\u3093\u3067\u3059\u304c\u3001\u3069\u3046\u3084\u3089\u6319\u52d5\u304c\u5909\u308f\u3063\u305f\u3089\u3057\u304f\u3001java.lang.RuntimeException: java.lang.IllegalAccessException: Can not set static final \uff5e\u3000\u304c\u767a\u751f\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002(\u30bb\u30c3\u30c8\u3059\u308b\u5bfe\u8c61\u306f\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u3067\u306f\u306a\u3044\u3067\u3059\u3002\u30bb\u30c3\u30c8\u3057\u305f\u306e\u306fMock\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002)\nDeencapsulation.setField() is broken for JDK8 after I upgrade to v1.24\n\nOk, I updated our tests to use a MockUp instead. This is cleaner anyway.\n\n\u3048\u3001MockUp \u4f7f\u3048\u3063\u3066\u3053\u3068\u3067\u3059\u304b\uff1f\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001static \u521d\u671f\u5316\u30d6\u30ed\u30c3\u30af\u3092\u30e2\u30c3\u30af\u5316\u3059\u308b\u3092\u53c2\u8003\u306b\u4f7f\u3063\u3066\u66f8\u304d\u76f4\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\nHoge.java\n// Application\u306f\u81ea\u4f5c\u30af\u30e9\u30b9\u3067\u3059\nprivate final static Application application = Application.getInstance();\n\n\n\n\u4fee\u6b63\u524d.java\nHoge hoge = new Hoge();\nDeencapsulation.setField(Hoge.class , application);\n\n\n\n\u4fee\u6b63\u5f8c.java\n        new MockUp<Hoge>() {\n            @Mock\n            void $clinit() {\n                Deencapsulation.setField(Hoge.class ,hoge);\n            }\n        };\n\n\nstatic\u30d6\u30ed\u30c3\u30af\u3067\u5ba3\u8a00\u3057\u3066\u306a\u304f\u3066\u3082$clinit()\u3067\u4ee3\u5165\u51fa\u6765\u308b\u306e\u304b\u3002\u8b0e\u3002\n\nDeencapsulation.invoke\u3082\u6319\u52d5\u304c\u5909\u308f\u3063\u305f\u307f\u305f\u3044\ninvoke\u3082\u4e00\u90e8\u99c4\u76ee\u3067\u3057\u305f\u3002\u52d5\u304f\u3084\u3064\u3068\u52d5\u304b\u306a\u3044\u5dee\u304c\u308f\u304b\u3089\u306a\u3044\u3002\u3002\n\u203bExpectations\u5185\u3067invoke\u3057\u3066\u308b\u3084\u3064\u306f\u3001MockUp\u3067\u66f8\u304b\u306a\u3044\u3068\u99c4\u76ee\u3063\u307d\u3044\u3067\u3059\u3002\u305f\u3060\u3044\u307e\u78ba\u8a8d\u4e2d\n\u3053\u308c\u3082MockUp\u4f7f\u3046\u3068\u52d5\u304d\u307e\u3057\u305f\u3002MockUp\u5f37\u3059\u304e\u3002\n\nPrivateHoge.java\n// \u3053\u3093\u306a\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u3063\u305f\u3068\u3059\u308b\nprivate Hoge getHoge() {\n  return hoge;\n}\n\n\n\n\u4fee\u6b63\u524d.java\nnew Expectations() {{\n  Deencapsulation.invoke(privateHoge, \"getHoge\");\n}};\n\n\nMockUp\u4f7f\u3063\u3066\u66f8\u304d\u76f4\u3057\n\n\u4fee\u6b63\u5f8c.java\n        new Expectations() {{\n            new MockUp<PrivateHoge>() {\n                @Mock\n                Hoge getHoge() {\n                    return hogehoge;\n                }\n            };\n        }};\n\n\nMockUp\u5185\u306eMock\u5316\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u306a\u3089\u3001Deencapsulation.invoke\u3082\u4f7f\u3048\u308b\u307f\u305f\u3044\u3067\u3059\u3002\nNullPointer\u3063\u3066\u8a00\u3063\u3066\u308b\u304b\u3089\u3001\u660e\u793a\u7684\u306b\u3057\u3066\u304b\u3089invoke\u3057\u308d\u3063\u3066\u3053\u3068\u306a\u306e\u304b\u306a\u3041\n\n\u4fee\u6b63\u6848\u305d\u306e2.java\n        new Expectations() {{\n            new MockUp<PrivateHoge>() {\n                @Mock\n                Hoge getHoge() {\n                    Deencapsulation.invoke(privateHoge, \"getHoge\");\n                }\n            };\n        }};\n\n\n\n\u52d5\u7684\u90e8\u5206\u30e2\u30c3\u30af\u5316\u306e\u66f8\u304d\u65b9\u304c\u5909\u308f\u3063\u305f\u6a21\u69d8\nExpectations\u5185\u3067@Mocked\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5ba3\u8a00\u3057\u3066\u305f\u3084\u3064\u3089\u304cnull\u3092\u8fd4\u3059\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u3061\u306a\u307f\u306b\u90e8\u5206\u30e2\u30c3\u30af\u306e\u3053\u3068\u3092Partial Mocking\u3068\u8a00\u3046\u3089\u3057\u3044\u3067\u3059\u3002\u3078\u3047\u30fc\njMockit Verifications \u90e8\u5206\u30e2\u30c3\u30ad\u30f3\u30b0\u3068\u304b\n\n\u52d5\u304b\u306a\u304f\u306a\u3063\u305f\u3084\u3064.java\n        new Expectations(patternManager) {\n            @Mocked Hoge hoge;\n            {\n                System.out.println(hoge);\n                System.out.println(hoge.hoge);\n\n\n\n\n\u4fee\u6b63\u6848\n\n\u5358\u4f53\u30c6\u30b9\u30c8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u5909\u3048\u308b\n\u5358\u4f53\u30c6\u30b9\u30c8\u306e\u5b9f\u884c\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u3067@Mocked\u4f7f\u3063\u3066\u5ba3\u8a00\u3059\u308b\u2192\n\u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u3067\u5b9a\u7fa9\u3059\u308b\n\n\n\u306e\u3069\u3061\u3089\u304b\u3067\u3002\n\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u623b\u308a\u5024\u306f\u8fd4\u305b\u306a\u304f\u306a\u3063\u305f\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u623b\u308a\u5024\u306f\u6307\u5b9a\u3067\u304d\u306a\u3044 \n\u3053\u308c\u304c\u7d50\u69cb\u96e3\u5100\u3067\u683c\u95d8\u4e2d\n\n\u4ee3\u66ff\u6848\u2460\nAccessing the invocation context \u306b\u3042\u308b\u3088\u3046\u306b$init\u30e1\u30bd\u30c3\u30c9\u3067\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u540c\u3058\u51e6\u7406\u304c\u51fa\u6765\u308b\u3063\u307d\u3044\u3002\u30b7\u30b0\u30cb\u30c1\u30e3\u5408\u308f\u305b\u308c\u3070\u3088\u3044\u3002\n\nHogeTest.java\nnew MockUp<File>() {\n      @Mock\n      void $init(File file, String path)\n      {\n        // new File(file, path) \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u30e2\u30c3\u30af\u5316\u51fa\u6765\u308b\n      }\n\n\n\u3061\u306a\u307f\u306b\u3001Invocation\u3092\u5148\u982d\u306e\u5f15\u6570\u306b\u52a0\u3048\u308b\u3068\u3001\u30e2\u30c3\u30af\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3082\u53d6\u308c\u308b\u3063\u307d\u3044\u3002\n\nSystem\u30af\u30e9\u30b9\u3068\u304b\u30cd\u30a4\u30c6\u30a3\u30d6\u30af\u30e9\u30b9\u3082MockUp\u3067\u66f8\u3051\u3070\u3044\u3044\u3089\u3057\u3044\n\n\u305d\u306e\u4ed6\u3001\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u3044\u305f\u30b5\u30a4\u30c8\u69d8\n\nJMockit \u306f\u3058\u3081\u306e\u4e00\u6b69\n\u3010JMockit1.30\u3011 Expectations\u3067\u306e\u5f15\u6570\u30de\u30c3\u30c1\u30f3\u30b0\u3092\u3055\u3089\u306b\u8a73\u3057\u304f\n\nJava8u74\u21928u102\u3050\u3089\u3044\u306b\u4e0a\u3052\u305f\u969b\u306b\u3001\u3069\u3046\u3084\u3089JMockit\u3082\u4e0a\u3052\u306a\u304d\u3083\u306a\u3089\u3093\u3063\u3066\u3053\u3068\u306b\u306a\u308a\u307e\u3057\u305f\u304c\u3001\n\u4f7f\u3063\u3066\u308bJMockit\u304c\u53e4\u3059\u304e\u3066\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3084\u3089\u3001\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3084\u3089\u308f\u308a\u3068\u3066\u3093\u3084\u308f\u3093\u3084\u3060\u3063\u305f\u306e\u3067\u3001\n\u5099\u5fd8\u9332\u3068\u3057\u3066\u307e\u3068\u3081\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\u203b\u968f\u6642\u66f4\u65b0\u4e2d\n\n## \u74b0\u5883\nJava8u102(8u74\u3067\u3082\u305f\u3076\u3093\u52d5\u304f\u304b\u3068)\nmaven3\u7cfb\n\n## change log\n\u3060\u3044\u305f\u3044\u66f8\u3044\u3066\u3042\u308b\u3051\u3069\u3001\u5b9f\u969b\u306b\u3069\u3046\u66f8\u3051\u3070\u3044\u3044\u306e\u304b\u308f\u304b\u3089\u306a\u3044\u306e\u3082\u3042\u308a\u3064\u3064\n[JMockit Development history](http://jmockit.org/changes.html)\n\n## \u4e3b\u306b\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u3044\u305f\u30b5\u30a4\u30c8\n- [JMockit\u4f7f\u3044\u65b9\u30e1\u30e2](http://qiita.com/opengl-8080/items/a49d4dae9067413ccdd6)\n\u3060\u3044\u305f\u3044\u8f09\u3063\u3066\u3066\u3001\u3057\u304b\u3082\u3001\u8a73\u3057\u304f\u66f8\u304d\u65b9\u3082\u8f09\u3063\u3066\u3066\u30de\u30b8\u611f\u8b1d\u3067\u3059\u3002\n\n## \u307e\u305a\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u30a2\u30c3\u30d7\n### JMockit 1.4\n\n```pom.xml\n\t\t<dependency>\n\t\t\t<groupId>com.googlecode.jmockit</groupId>\n\t\t\t<artifactId>jmockit</artifactId>\n\t\t\t<version>1.4</version>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n```\n\n### JMockit 1.30\ngroup\u3059\u3089\u5909\u308f\u3063\u3066\u308b\u3053\u3068\u306b\u30d3\u30d3\u308a\u307e\u3059\u3002(\u3088\u304f\u3042\u308b\u3051\u3069\u3055\u30fb\u30fb\u30fb)\n\u203b\u8ffd\u8a18\uff1a\u3054\u6307\u6458\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\u6614\u304b\u30892\u3064\u30b0\u30eb\u30fc\u30d7\u304c\u3042\u3063\u305f\u3089\u3057\u3044\u3067\u3059\u3002\u304c\u3001\u7d71\u5408\u3055\u308c\u305f\u3093\u3067\u3059\u304b\u306d\uff1f\n\n```pom.xml\n\t\t<dependency>\n\t\t\t<groupId>org.jmockit</groupId>\n\t\t\t<artifactId>jmockit</artifactId>\n\t\t\t<version>1.30</version>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n```\n\n## 1. \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3092\u89e3\u6d88\u3059\u308b\n###  NonStrictExpectations\u3092Expectations\u306b\u5909\u66f4\u3059\u308b\nVersion 1.23\u3067Deprecated\u3001Version 1.25\u3067\u524a\u9664\u306b\u306a\u3063\u3066\u307e\u3059\u3002\n> Version 1.23 (Apr 24, 2016):\nDeprecated the NonStrictExpectations class. Existing tests should use Expectations instead.\n\n> Version 1.25 (Jun 26, 2016):\nRemoved the NonStrictExpectations class, which was deprecated in version 1.23.\n\n\u3068\u308a\u3042\u3048\u305a\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3092\u306a\u3093\u3068\u304b\u3057\u305f\u3044\u306e\u3067\u3001\u76f2\u76ee\u7684\u306b\u5909\u3048\u3066\u3044\u304d\u307e\u3059\u3002\n\nNonStrictExpectations\u306e\u4f7f\u3044\u65b9\u306f\u4ee5\u4e0b\u306e\u30ea\u30f3\u30af\u3067\u307e\u3068\u3081\u3066\u304f\u3060\u3055\u3063\u3066\u307e\u3059(\u3082\u3046\u4f7f\u3048\u306a\u3044\u3051\u3069\u3002\u3002)\n[jMockit\u304c\u3044\u3044\u3088 Verification\u7de8](http://qiita.com/NewGyu/items/03f5ec400abf010d2b7b)\n#### NonStrictExpectations\u3068Expectations\u3068\u306e\u9055\u3044\u306f\n\n- Expectations \u5b9f\u884c\u9806\u5e8f\u3001\u5b9f\u884c\u56de\u6570\u306a\u3069\u3059\u3079\u3066\u8a18\u9332\u3002\u304b\u306a\u308a\u53b3\u5bc6\u3002\n- NonStrictExpectations \u3061\u3087\u3063\u3068\u3086\u308b\u3081\u3002\u5b9f\u884c\u3055\u308c\u3066\u3082\u3055\u308c\u306a\u304f\u3066\u3082\u30b9\u30eb\u30fc\u3055\u308c\u308b\u3002\n\n\u307f\u305f\u3044\u306a\u9055\u3044\u304c\u3042\u308b\u3089\u3057\u3044\u3067\u3059\u3002\u8a73\u3057\u304f\u306f\u4ee5\u4e0b\u306e\u30ea\u30f3\u30af\u3067\u308f\u304b\u308a\u3084\u3059\u304f\u307e\u3068\u3081\u3066\u304f\u3060\u3055\u3063\u3066\u307e\u3059\u3002\u611f\u8b1d\u3002\n[JMockit\u4f7f\u3044\u65b9\u30e1\u30e2 NonStrictExpectations](http://qiita.com/opengl-8080/items/a49d4dae9067413ccdd6#nonstrictexpectations)\n\u30c6\u30b9\u30c8\u5b9f\u884c\u6642\u306b\u843d\u3061\u308b\u306e\u3067\u3001\u3053\u308c\u306f\u5f8c\u307b\u3069\u4fee\u6b63\u3057\u307e\u3059\u3002\n\n### @Mocked(methods=\"readLine\")\u3068\u304b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u5185\u306e\u5f15\u6570\u3092\u6307\u5b9a\u3057\u3066\u308b\u3084\u3064\nVersion 1.5\u3067Deprecated \u3001Version 1.6\u3067\u300emethods\u300f\u300einverse\u300f\u5c5e\u6027\u306f\u524a\u9664\u3055\u308c\u3066\u307e\u3059\u3002\n> Version 1.5 (Oct 20, 2013):\nDeprecated the \"methods\" and \"inverse\" attributes of @Mocked. Existing uses like @Mocked(methods = {\"method1\", \"method2\"}) should simply be rewritten as @Mocked({\"method1\", \"method2\"}) (using the default value attribute). As for the inverse attribute, specify what is to be mocked instead.\n> Version 1.6 (Dec 23, 2013):\nRemoved the \"methods\" and \"inverse\" attributes of the @Mocked annotation, which were deprecated in release 1.5. Tests still using \"@Mocked(methods = {...}) should instead use the default \"value\" attribute.\n\n\u4eca\u5ea6\u304b\u3089@Mocked(methods = {...})\u4f7f\u3063\u3066\u306d\u3001\u3068\u8a00\u3063\u3066\u308b\u308f\u308a\u306b\u306f\u3053\u306e\u65b9\u6cd5\u3082Version 1.19\u3067\u524a\u9664\u3055\u308c\u3061\u3083\u3044\u307e\u3059\u3002\u60b2\u3057\u3044\u3002\n> Version 1.19 (Aug 23, 2015):\nRemoved the \"value\" attribute of @Mocked, which was deprecated in release 1.17. Existing tests using \"@Mocked({\"someMethod\", \"anotherMethod\", ...})\" should simply omit the attribute, or use partial mocking as applied with new Expectations(objToPartiallyMock) { ... }, or apply a MockUp<T> class.\n\nExpectations\u306e\u5f15\u6570\u3067\u66f8\u304f\u65b9\u6cd5\u306f\u3001\u305d\u306e\u5f8c\u3082\u3044\u308d\u3044\u308d\u30b4\u30cb\u30e7\u30b4\u30cb\u30e7\u3042\u3063\u3066\u3001\u4f7f\u3048\u308b\u3093\u3060\u304b\u4f7f\u3048\u306a\u3044\u3093\u3060\u304b\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u3001\n\u304a\u3068\u306a\u3057\u304fMockUp<T>\u306b\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n\n```\u4fee\u6b63\u524d.java\n@Test\npublic void test(@Mocked(methods=\"readLine\") final BufferedReader br) {\n\t\tnew NonStrictExpectations() {\n\t\t\t{\n\t\t\t\tbr.readLine();\n\t\t\t\tresult = new IOException();\n\t\t\t}\n\t\t};\n}\n```\n\n``` \u4fee\u6b63\u5f8c.java\n@Test\npublic void test() { // MockUp<T>\u3067\u5b9a\u7fa9\u3059\u308b\u306e\u3067\u3001\u5f15\u6570\u306f\u524a\u9664\u3059\u308b\u3002\u3042\u308b\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\n\t\tnew MockUp<BufferedReader>() {\n\t\t\t@Mock\n\t\t\tpublic String readLine() throws IOException{\n\t\t\t\tthrow new IOException();\n\t\t\t}\n\t\t};\t\n}\n```\n\n\u3061\u306a\u307f\u306b\u3001BufferedReader\u306e\u3053\u306e\u5834\u5408\u3060\u3068\u3001@Mocked\u3092@Injectable\u306b\u5909\u3048\u3066\u3082\u826f\u3055\u305d\u3046(\u3068\u3044\u3046\u304b\u3001\u3069\u3061\u3089\u3082\u540c\u3058\u7d50\u679c\u306b\u306a\u3063\u305f)\n\u3069\u3063\u3061\u304c\u3044\u3044\u306e\u304b\u306a\u3041\u3002\n\u8a73\u3057\u304f\u306f\u3053\u3061\u3089\u2192[JMockit \u306f\u3058\u3081\u306e\u4e00\u6b69 @Injectable](http://qiita.com/hitomatagi/items/95ba1bc6a630bac16f9e#injectable)\n\n### setField, invoke\u306fDeencapsulation\u306estatic\u30e1\u30bd\u30c3\u30c9\u306b\u5909\u66f4\u3059\u308b\nsetField, invoke\u3068\u304bprivate\u306a\u3084\u3064\u3089\u306b\u5bfe\u3057\u3066\u64cd\u4f5c\u3092\u884c\u3046\u306e\u306f\u3001Invocations\u30af\u30e9\u30b9\u3060\u3063\u305f\u3088\u3046\u306a\u3093\u3067\u3059\u304c\u3001Version 1.6\u306b\u3066\u524a\u9664\u3055\u308c\u305f\u3088\u3046\u3067\u3059\u3002\n> Version 1.6 (Dec 23, 2013):\nRemoved all Reflection-based utility methods from the Invocations class (the base for Expectations and Verifications), in favor of using the static methods of identical signatures in the Deencapsulation class. This change in the API will not require any changes to test code, except that test classes using these methods should now include the following \"static import\": import static mockit.Deencapsulation.*;\n\n```\u4fee\u6b63\u524d.java\nsetField(hoge, \"aaaa\", \"aaaa\");\ninvoke((hoge, \"privateMethod\");\n```\n\n```\u5909\u66f4\u5f8c.java\nDeencapsulation.setField(hoge, \"aaaa\", \"aaaa\");\nDeencapsulation.invoke((hoge, \"privateMethod\");\n```\n\n\u3061\u306a\u307f\u306b\u3001private static final\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u30bb\u30c3\u30c8\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u3001Can not set static final\u3063\u3066\u6012\u3089\u308c\u308b\u5834\u5408\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u306e\u5834\u5408\u306f\u5f8c\u8ff0[Deencapsulation.setField\u306e\u6319\u52d5\u304c\u5909\u308f\u3063\u305f\u3089\u3057\u3044](http://qiita.com/yukiko-kato-bass/items/69b0c7b2417079345d37#deencapsulationsetfield%E3%81%AE%E6%8C%99%E5%8B%95%E3%81%8C%E5%A4%89%E3%82%8F%E3%81%A3%E3%81%9F%E3%82%89%E3%81%97%E3%81%84)\u3092\u53c2\u8003\u306b\u3002\n\n## 2. \u30c6\u30b9\u30c8\u3067\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3082\u306e\u3092\u4fee\u6b63\u3059\u308b\n### Missing 1 invocation to: \uff5e Caused by: Missing invocations\n\u3053\u308c\u3067\u30b3\u30b1\u308b\u3084\u3064\u306f[NonStrictExpectations\u3092Expectations\u306b\u5909\u66f4\u3059\u308b](http://qiita.com/yukiko-kato-bass/items/69b0c7b2417079345d37#nonstrictexpectations%E3%82%92expectations%E3%81%AB%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B)\u306e\u5f71\u97ff\u3067\u3059\u3002\n\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u547c\u3070\u308c\u3066\u306d\u30fc\u3088\uff01\u3063\u3066\u6012\u3063\u3066\u304a\u308a\u307e\u3059\u3002\u30b5\u30fc\u30bb\u30f3\u3002\n\u30e1\u30bd\u30c3\u30c9\u306e\u8a18\u9332\u304c\u53b3\u5bc6\u306b\u306a\u3063\u305f\u6545\u306e\u30a8\u30e9\u30fc\u3067\u3059\u306d\u3002\n\u56de\u907f\u7b56\u3068\u3057\u3066\u306f\u3001\u30e1\u30bd\u30c3\u30c9\u306e\u6700\u5c0f\u671f\u5f85\u5b9f\u884c\u56de\u6570\u30920\u306b\u3057\u3061\u3083\u3044\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001\u547c\u3070\u308c\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u660e\u793a\u7684\u306b\u793a\u3057\u305f\u3044\u5834\u5408\u306f\u3001maxTimes=0\u3067\u30c1\u30a7\u30c3\u30af\u3067\u3059\u308c\u3070\u826f\u3055\u305d\u3046\u3002\n\n```HogeTest.java\n        new Expectations() {{\n            hoge.method(); minTimes=0;\n            hoge.method2(); maxTimes=0;\n        }};\n\n```\n\n~~\u307e\u3042\u3001\u3053\u308c\u3092\u3064\u3051\u308b\u3068\u3001\u547c\u3070\u308c\u305f\u304b\u547c\u3070\u308c\u3066\u306a\u3044\u304b\u308f\u304b\u3089\u306a\u304f\u306a\u308b\u306e\u3067\u3001\u305d\u306e\u8fba\u306fVerifications\u3067\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u3089\u3044\u3044\u3093\u3058\u3083\u306a\u3044\u304b\u306a\u3068\u3002~~\n\u203b\u8ffd\u8a18\uff1amaxTimes=0;\u3067\u30c1\u30a7\u30c3\u30af\u3067\u304d\u308b\u3058\u3083\u3093\u3068\u6c17\u3065\u304d\u307e\u3057\u305f\u3002\n\n\n### Enum\u306eMock\u306e\u66f8\u304d\u65b9\u304c\u5909\u308f\u3063\u305f\uff1f\n\u3053\u3093\u306a\u66f8\u304d\u65b9\u3057\u3066\u308b\u3084\u3064\u304c\u3001NullPointerException\u3067\u843d\u3061\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\n```\u4fee\u6b63\u524d.java\n@Test\npublic void test(@Mocked final HogeEnum hogeEnum) {\n\n\tnew Expectations() {\n\n\t\t@Mocked\n\t\tHogeEnum hogeEnum;\n\n\t\t{\n\t\t\thogeEnum.getHoge();\n\t\t\tresult = \"hogehoge\";\n\t\t}\n\t};\n\n```\n\n\u3069\u3046\u3084\u3089MockUp\u306b\u66f8\u304d\u63db\u3048\u308c\u3070\u826f\u3044\u3089\u3057\u3044\u3002\n[How to mock this in an Enum class using jmockt?](http://stackoverflow.com/questions/23188902/how-to-mock-this-in-an-enum-class-using-jmockt)\n\n```\u4fee\u6b63\u5f8c.java\n@Test\npublic void test() { // MockUp\u3067\u66f8\u304f\u306e\u3067\u3001\u5f15\u6570\u306f\u6d88\u3059\n\tnew MockUp<HogeEnum>() {\n\t\t@Mock\n\t\tpublic String getHoge() {\n\t\t\treturn \"/NOTHING/DATA.mf\";\n\t\t}\n\t};\n}\n```\n\n### NonStrictExpectations\u2192Expectations\u306b\u5909\u3048\u305f\u3053\u3068\u306b\u3088\u308bMock\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u6319\u52d5\u5909\u66f4\uff1f\n\u3053\u3093\u306a\u66f8\u304d\u65b9\u3057\u3066\u305f\u3084\u3064\u3092NonStrictExpectations\u2192Expectations\u306b\u5909\u3048\u305f\u3089\u3001fail\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u3002\n\n``` \u5909\u66f4\u524d.java\n    @Test\n    public void test() throws Exception {\n    \tfinal Hoge hoge1 = new Hoge(\"hogehoge\");\n\t\tnew NonStrictExpectations() {\n            {\n                test.getHoge(\"hogehoge\");\n                result = hoge1;\n            }\n        };\n        \n        assertThat(test.getHoge(\"hogehoge\"), hoge1);\n        \n        assertThat(test.getHoge(\"fugafuga\"), null);  // \u3053\u3053\u3067null\u306b\u306f\u306a\u3089\u306a\u3044\uff01\n    }\n```\n\n\u30c7\u30d0\u30c3\u30af\u3057\u3066\u307f\u305f\u3089\u3001Hoge\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u81ea\u4f53\u306f\u4f5c\u3089\u308c\u3066\u3057\u307e\u3063\u3066\u305f\u3002(value\u3068\u304b\u306fnull\u306a\u3093\u3060\u3051\u3069)\n\u3053\u3053\u898b\u308b\u3068\u3001[JMockit\u4f7f\u3044\u65b9\u30e1\u30e2 \u30e2\u30c3\u30af\u5316\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u8fd4\u3059\u5024](http://qiita.com/opengl-8080/items/a49d4dae9067413ccdd6#%E3%83%A2%E3%83%83%E3%82%AF%E5%8C%96%E3%81%95%E3%82%8C%E3%81%9F%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%8C%E8%BF%94%E3%81%99%E5%80%A4) \u3068\u3042\u308b\u306e\u3067\u3001\u6319\u52d5\u901a\u308a\u3067\u306f\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u5f15\u6570\u306b\u3088\u3063\u3066\u8fd4\u3059\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5909\u3048\u305f\u3044\u3063\u3066\u3044\u3046\u304b\u3001\u3042\u308b\u5f15\u6570\u4ee5\u5916\u306e\u3068\u304d\u306fnull\u8fd4\u3057\u305f\u3044\u3093\u3067\u3059\u3088\u3002\n\u203b\u8ffd\u8a18\uff1anull\u3092\u8fd4\u3057\u305f\u3044\u5834\u5408\u306f\u660e\u793a\u7684\u306b\u6307\u5b9a\u3057\u306a\u3044\u3068\u3060\u3081\u3089\u3057\u3044\u3002\u3053\u3053\u306b\u66f8\u3044\u3066\u307e\u3057\u305f\u3002\u2192 [JMockit\u4f7f\u3044\u65b9\u30e1\u30e2 \u30e2\u30c3\u30af\u304c\u8fd4\u3059\u5024\u3092 null \u306b\u3057\u305f\u3044\u5834\u5408](http://qiita.com/opengl-8080/items/a49d4dae9067413ccdd6#%E3%83%A2%E3%83%83%E3%82%AF%E3%81%8C%E8%BF%94%E3%81%99%E5%80%A4%E3%82%92-null-%E3%81%AB%E3%81%97%E3%81%9F%E3%81%84%E5%A0%B4%E5%90%88)\n\u203b2017/01/20\u8ffd\u8a18\uff1a[7tsuno\u3055\u3093](http://qiita.com/7tsuno)\u3088\u308a\u30b3\u30e1\u30f3\u30c8\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\u304d\u3063\u3061\u308a\u3084\u308b\u306a\u3089Delegate\u4f7f\u3046\u306e\u304c\u826f\u3044\u3067\u3059\u306d\u3002\u8a73\u3057\u304f\u306f\u2192[Delegate\u3067\u306e\u30de\u30c3\u30c1\u30f3\u30b0](http://qiita.com/7tsuno/items/2dcebe2fc1533fb68a4d#delegate%E3%81%A7%E3%81%AE%E3%83%9E%E3%83%83%E3%83%81%E3%83%B3%E3%82%B0)\n\n#### \u4fee\u6b63\u65b9\u6cd5\n\u5f15\u6570\u9055\u3046\u5834\u5408\u306eresult\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\n\n``` \u4fee\u6b63\u6848.java\n    @Test\n    public void test() throws Exception {\n    \tfinal Hoge hoge1 = new Hoge(\"hogehoge\");\n\t\tnew Expectations() {\n            {\n                test.getHoge(\"hogehoge\");\n                result = hoge1;\n                test.getHoge(\"fugafuga\");\n                result = null;\n            }\n        };\n        \n        assertThat(test.getHoge(\"hogehoge\"), hoge1);\n        \n        assertThat(test.getHoge(\"fugafuga\"), null);\n    }\n```\n\n### Deencapsulation.setField\u306e\u6319\u52d5\u304c\u5909\u308f\u3063\u305f\u3089\u3057\u3044\nprivate static final \u306a\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u66f8\u304d\u63db\u3048\u304c1.4\u3067\u306f\u52d5\u3044\u3066\u305f\u3093\u3067\u3059\u304c\u3001\u3069\u3046\u3084\u3089\u6319\u52d5\u304c\u5909\u308f\u3063\u305f\u3089\u3057\u304f\u3001java.lang.RuntimeException: java.lang.IllegalAccessException: Can not set static final \uff5e\u3000\u304c\u767a\u751f\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002(\u30bb\u30c3\u30c8\u3059\u308b\u5bfe\u8c61\u306f\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u3067\u306f\u306a\u3044\u3067\u3059\u3002\u30bb\u30c3\u30c8\u3057\u305f\u306e\u306fMock\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002)\n[Deencapsulation.setField() is broken for JDK8 after I upgrade to v1.24](https://github.com/jmockit/jmockit1/issues/281)\n> Ok, I updated our tests to use a MockUp instead. This is cleaner anyway.\n\n\u3048\u3001MockUp \u4f7f\u3048\u3063\u3066\u3053\u3068\u3067\u3059\u304b\uff1f\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001[static \u521d\u671f\u5316\u30d6\u30ed\u30c3\u30af\u3092\u30e2\u30c3\u30af\u5316\u3059\u308b](http://qiita.com/opengl-8080/items/a49d4dae9067413ccdd6#static-%E5%88%9D%E6%9C%9F%E5%8C%96%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%82%92%E3%83%A2%E3%83%83%E3%82%AF%E5%8C%96%E3%81%99%E3%82%8B)\u3092\u53c2\u8003\u306b\u4f7f\u3063\u3066\u66f8\u304d\u76f4\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n```Hoge.java\n// Application\u306f\u81ea\u4f5c\u30af\u30e9\u30b9\u3067\u3059\nprivate final static Application application = Application.getInstance();\n```\n\n``` \u4fee\u6b63\u524d.java\nHoge hoge = new Hoge();\nDeencapsulation.setField(Hoge.class , application);\n```\n\n``` \u4fee\u6b63\u5f8c.java\n\t\tnew MockUp<Hoge>() {\n\t\t\t@Mock\n\t\t\tvoid $clinit() {\n\t\t\t\tDeencapsulation.setField(Hoge.class ,hoge);\n\t\t\t}\n\t\t};\n```\n\nstatic\u30d6\u30ed\u30c3\u30af\u3067\u5ba3\u8a00\u3057\u3066\u306a\u304f\u3066\u3082$clinit()\u3067\u4ee3\u5165\u51fa\u6765\u308b\u306e\u304b\u3002\u8b0e\u3002\n\n### Deencapsulation.invoke\u3082\u6319\u52d5\u304c\u5909\u308f\u3063\u305f\u307f\u305f\u3044\ninvoke\u3082\u4e00\u90e8\u99c4\u76ee\u3067\u3057\u305f\u3002\u52d5\u304f\u3084\u3064\u3068\u52d5\u304b\u306a\u3044\u5dee\u304c\u308f\u304b\u3089\u306a\u3044\u3002\u3002\n\u203bExpectations\u5185\u3067invoke\u3057\u3066\u308b\u3084\u3064\u306f\u3001MockUp\u3067\u66f8\u304b\u306a\u3044\u3068\u99c4\u76ee\u3063\u307d\u3044\u3067\u3059\u3002\u305f\u3060\u3044\u307e\u78ba\u8a8d\u4e2d\n\u3053\u308c\u3082MockUp\u4f7f\u3046\u3068\u52d5\u304d\u307e\u3057\u305f\u3002MockUp\u5f37\u3059\u304e\u3002\n\n```PrivateHoge.java\n// \u3053\u3093\u306a\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u3063\u305f\u3068\u3059\u308b\nprivate Hoge getHoge() {\n  return hoge;\n}\n```\n\n```\u4fee\u6b63\u524d.java\nnew Expectations() {{\n  Deencapsulation.invoke(privateHoge, \"getHoge\");\n}};\n```\nMockUp\u4f7f\u3063\u3066\u66f8\u304d\u76f4\u3057\n\n```\u4fee\u6b63\u5f8c.java\n\t\tnew Expectations() {{\n\t\t\tnew MockUp<PrivateHoge>() {\n\t\t\t\t@Mock\n\t\t\t\tHoge getHoge() {\n\t\t\t\t\treturn hogehoge;\n\t\t\t\t}\n\t\t\t};\n\t\t}};\n```\n\nMockUp\u5185\u306eMock\u5316\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u306a\u3089\u3001Deencapsulation.invoke\u3082\u4f7f\u3048\u308b\u307f\u305f\u3044\u3067\u3059\u3002\nNullPointer\u3063\u3066\u8a00\u3063\u3066\u308b\u304b\u3089\u3001\u660e\u793a\u7684\u306b\u3057\u3066\u304b\u3089invoke\u3057\u308d\u3063\u3066\u3053\u3068\u306a\u306e\u304b\u306a\u3041\n\n```\u4fee\u6b63\u6848\u305d\u306e2.java\n\t\tnew Expectations() {{\n\t\t\tnew MockUp<PrivateHoge>() {\n\t\t\t\t@Mock\n\t\t\t\tHoge getHoge() {\n\t\t\t\t\tDeencapsulation.invoke(privateHoge, \"getHoge\");\n\t\t\t\t}\n\t\t\t};\n\t\t}};\n```\n\n### \u52d5\u7684\u90e8\u5206\u30e2\u30c3\u30af\u5316\u306e\u66f8\u304d\u65b9\u304c\u5909\u308f\u3063\u305f\u6a21\u69d8\nExpectations\u5185\u3067@Mocked\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5ba3\u8a00\u3057\u3066\u305f\u3084\u3064\u3089\u304cnull\u3092\u8fd4\u3059\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u3061\u306a\u307f\u306b\u90e8\u5206\u30e2\u30c3\u30af\u306e\u3053\u3068\u3092Partial Mocking\u3068\u8a00\u3046\u3089\u3057\u3044\u3067\u3059\u3002\u3078\u3047\u30fc\n[jMockit Verifications \u90e8\u5206\u30e2\u30c3\u30ad\u30f3\u30b0\u3068\u304b](http://qiita.com/NewGyu/items/57b4efe0c99f779ac066)\n\n```\u52d5\u304b\u306a\u304f\u306a\u3063\u305f\u3084\u3064.java\n\t\tnew Expectations(patternManager) {\n\t\t\t@Mocked Hoge hoge;\n\t\t\t{\n\t\t\t\tSystem.out.println(hoge);\n\t\t\t\tSystem.out.println(hoge.hoge);\n\n```\n\n#### \u4fee\u6b63\u6848\n1. \u5358\u4f53\u30c6\u30b9\u30c8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u5909\u3048\u308b\n2. \u5358\u4f53\u30c6\u30b9\u30c8\u306e\u5b9f\u884c\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u3067@Mocked\u4f7f\u3063\u3066\u5ba3\u8a00\u3059\u308b\u2192\n[\u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u3067\u5b9a\u7fa9\u3059\u308b](http://qiita.com/opengl-8080/items/a49d4dae9067413ccdd6#%E3%83%86%E3%82%B9%E3%83%88%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E5%BC%95%E6%95%B0%E3%81%A7%E5%AE%9A%E7%BE%A9%E3%81%99%E3%82%8B)\n\n\u306e\u3069\u3061\u3089\u304b\u3067\u3002\n\n### \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u623b\u308a\u5024\u306f\u8fd4\u305b\u306a\u304f\u306a\u3063\u305f\n[\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u623b\u308a\u5024\u306f\u6307\u5b9a\u3067\u304d\u306a\u3044](http://qiita.com/opengl-8080/items/a49d4dae9067413ccdd6#%E3%82%B3%E3%83%B3%E3%82%B9%E3%83%88%E3%83%A9%E3%82%AF%E3%82%BF%E3%81%AE%E6%88%BB%E3%82%8A%E5%80%A4%E3%81%AF%E6%8C%87%E5%AE%9A%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84) \n\n\u3053\u308c\u304c\u7d50\u69cb\u96e3\u5100\u3067\u683c\u95d8\u4e2d\n\n#### \u4ee3\u66ff\u6848\u2460\n[Accessing the invocation context](http://jmockit.org/tutorial/Faking.html#invocation) \u306b\u3042\u308b\u3088\u3046\u306b$init\u30e1\u30bd\u30c3\u30c9\u3067\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u540c\u3058\u51e6\u7406\u304c\u51fa\u6765\u308b\u3063\u307d\u3044\u3002\u30b7\u30b0\u30cb\u30c1\u30e3\u5408\u308f\u305b\u308c\u3070\u3088\u3044\u3002\n\n```HogeTest.java\nnew MockUp<File>() {\n      @Mock\n      void $init(File file, String path)\n      {\n        // new File(file, path) \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u30e2\u30c3\u30af\u5316\u51fa\u6765\u308b\n      }\n```\n\u3061\u306a\u307f\u306b\u3001Invocation\u3092\u5148\u982d\u306e\u5f15\u6570\u306b\u52a0\u3048\u308b\u3068\u3001\u30e2\u30c3\u30af\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3082\u53d6\u308c\u308b\u3063\u307d\u3044\u3002\n\n### System\u30af\u30e9\u30b9\u3068\u304b\u30cd\u30a4\u30c6\u30a3\u30d6\u30af\u30e9\u30b9\u3082MockUp\u3067\u66f8\u3051\u3070\u3044\u3044\u3089\u3057\u3044\n\n\n## \u305d\u306e\u4ed6\u3001\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u3044\u305f\u30b5\u30a4\u30c8\u69d8\n- [JMockit \u306f\u3058\u3081\u306e\u4e00\u6b69](http://qiita.com/hitomatagi/items/95ba1bc6a630bac16f9e)\n- [\u3010JMockit1.30\u3011 Expectations\u3067\u306e\u5f15\u6570\u30de\u30c3\u30c1\u30f3\u30b0\u3092\u3055\u3089\u306b\u8a73\u3057\u304f](http://qiita.com/7tsuno/items/2dcebe2fc1533fb68a4d)\n"}