{"context": "\nOAuth 2.0\u306b\u95a2\u3057\u3066\u306f\u3001\u3044\u308d\u3093\u306a\u89e3\u8aac\u3084\u5b9f\u88c5\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u7d50\u5c40\u3001http://tools.ietf.org/html/rfc6749 \u306b\u3042\u308bRFC\u306e\u4ed5\u69d8\u3092\u8aad\u3080\u306e\u304c\u4e00\u756a\u306a\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u601d\u3044\u3001\u305d\u308c\u3092\u8aad\u3080\u969b\u306b\u5fc5\u8981\u306a\u90e8\u5206\u3001\u8a70\u307e\u308a\u3084\u3059\u3044\u90e8\u5206\u3092\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u305f\u3002\nOAuth 2.0 \u306e\u516c\u5f0f\u30b5\u30a4\u30c8 (http://oauth.net/2/) \u3082RFC\u306f1\u884c\u3067\u8efd\u304f\u30ea\u30f3\u30af\u304c\u3042\u308b\u3060\u3051\u3067\u3001\u3069\u3046\u305b\u7686\u5404\u8a00\u8a9e\u3067\u5b9f\u88c5\u3057\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u77e5\u308a\u305f\u3044\u3093\u3067\u3057\u3087\u307f\u305f\u3044\u306a\u69cb\u6210\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u81ea\u793e\u3082API\u3092\u516c\u958b\u3057\u3088\u3046\u3068\u304b\u3001\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u3057\u3063\u304b\u308a\u69cb\u7bc9\u3057\u3088\u3046\u306a\u3069\u3068\u3044\u3046\u6642\u306b\u3001Resource Server\u5074\u306b\u306a\u308b\u3053\u3068\u3082\u6700\u8fd1\u306f\u3059\u3054\u3044\u73cd\u3057\u3044\u8a33\u3067\u3082\u7121\u3044\u306e\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u610f\u5916\u3068\u3061\u3083\u3093\u3068\u8a33\u3057\u3066\u304a\u3044\u305f\u307b\u3046\u304c\u826f\u3044\u82f1\u5358\u8a9e\n\u4f8b\u3048\u3070\u3001Authorization=\u8a8d\u8a3c\u307f\u305f\u3044\u306b\u601d\u3063\u3066\u3044\u308b\u3068\u610f\u5473\u3092\u8aa4\u89e3\u3057\u3084\u3059\u3044\u306e\u3067\u3001\u304d\u3061\u3093\u3068\u65e5\u672c\u8a9e\u8a33\u306e\u5bfe\u5fdc\u4ed8\u3051\u3092\u3057\u3066\u304a\u3044\u305f\u307b\u3046\u304c\u3044\u3044\u82f1\u5358\u8a9e\u306f\u307e\u3068\u3081\u3066\u304a\u304d\u307e\u3057\u305f\u3002\n\n\n\n\u82f1\u8a9e\n\u65e5\u672c\u8a9e\u8a33\n\n\n\n\nAuthorization\n\u6a29\u9650\u4ed8\u4e0e\u3001\u6a29\u9650\n\n\nGrant\n\u8a31\u53ef\u8a3c\u3001\u627f\u8a8d\n\n\nCredential\n\u6a29\u5a01\u306e\u8a3c\u660e\u8a3c\u3001\u8cc7\u683c\n\n\n\n\u7279\u306bAuthorization\u306f\u7b2c1\u7fa9\u304c\u300c\u6a29\u9650\u4ed8\u4e0e=\u6a29\u9650\u3092\u4e0e\u3048\u308b\u884c\u70ba\u300d\u306a\u3053\u3068\u306b\u6ce8\u610f\u3057\u307e\u3057\u3087\u3046\u3002\n\n\nthe act of authorizing\npermission or power granted by an authority; sanction.\n\nhttp://www.dictionary.com/browse/authorization\n\n\u3053\u308c\u306b\u5bfe\u3057\u3001Grant\u306f\u3001\u540d\u8a5e\u3068\u3057\u3066\u306e\u7b2c1\u7fa9\u304c\u300c\u8a31\u53ef\u8a3c=\u627f\u8a8d\u3055\u308c\u305f\u3082\u306e\u300d\u3067\u3001\u7b2c2\u7fa9\u304c\u300c\u627f\u8a8d=\u627f\u8a8d\u3059\u308b\u884c\u70ba\u300d\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\nsomething granted, as a privilege or right, a sum of money, or a tract of land\nthe act of granting.\n\nhttp://www.dictionary.com/browse/grant\n\n\n4\u3064\u306e\u5f79\u5272\nSection 1.1 Roles\u306e\u5185\u5bb9\n\n\n\n\u540d\u524d\n\u5f79\u5272\n\u4f8b\n\n\n\n\nResource Owner\n\u30ea\u30bd\u30fc\u30b9\u3078\u306e\u30a2\u30af\u30bb\u30b9\u6a29\u9650\u3092\u4e0e\u3048\u3089\u308c\u308b\u4eba\u307e\u305f\u306f\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\n\u30e6\u30fc\u30b6\u30fc\n\n\nResource Server\nAccess Token\u3092\u4f7f\u3063\u305f\u30ea\u30bd\u30fc\u30b9\u3078\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5fdc\u3048\u3089\u308c\u308b\u30b5\u30fc\u30d0\u30fc\nFacebook\u306eAPI\u30b5\u30fc\u30d0\u30fc\n\n\nClient\n\u6a29\u9650\u306b\u57fa\u3065\u304d\u3001Resource Owner\u306e\u4ee3\u7406\u3068\u3057\u3066\u30ea\u30bd\u30fc\u30b9\u3092\u8981\u6c42\u3059\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\uff08Web\u30a2\u30d7\u30ea\u3067\u3082\u3001PC/\u30e2\u30d0\u30a4\u30eb\u30a2\u30d7\u30ea\u3067\u3082\uff09\n\u30e6\u30fc\u30b6\u30fc\u304c\u4f7f\u3063\u3066\u3044\u308b\u30a2\u30d7\u30ea\u3084\u30b5\u30fc\u30d3\u30b9\n\n\nAuthorization Server\nResource Owner\u304c\u8a8d\u53ef\u3057\u6a29\u9650\u4ed8\u4e0e\u3057\u305f\u5f8c\u3001Client\u306b\u5bfe\u3057\u3001Access Token\u3092\u767a\u884c\u3059\u308b\u30b5\u30fc\u30d0\u30fc\nFacebook\u306e\u8a8d\u8a3c\u30b5\u30fc\u30d0\u30fc\n\n\n\n\n\u8a8d\u8a3c\u30d5\u30ed\u30fc\u5927\u67a0 - 4\u3064\u306e\u5f79\u5272\u306e\u95a2\u4fc2\u6027\nSection 1.2 Protocol Flow\u306e\u5185\u5bb9\u3002\nOAuth2\u306b\u304a\u3051\u308b\u6d41\u308c\u306e\u5927\u67a0\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\nAbstract_Protocol_Flow\n     +--------+                               +---------------+\n     |        |--(A)- Authorization Request ->|   Resource    |\n     |        |                               |     Owner     |\n     |        |<-(B)-- Authorization Grant ---|               |\n     |        |                               +---------------+\n     |        |\n     |        |                               +---------------+\n     |        |--(C)-- Authorization Grant -->| Authorization |\n     | Client |                               |     Server    |\n     |        |<-(D)----- Access Token -------|               |\n     |        |                               +---------------+\n     |        |\n     |        |                               +---------------+\n     |        |--(E)----- Access Token ------>|    Resource   |\n     |        |                               |     Server    |\n     |        |<-(F)--- Protected Resource ---|               |\n     +--------+                               +---------------+\n\n                     Figure 1: Abstract Protocol Flow\n\n\n\n\nA: Client\u306f\u3001Resource Owner\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u308b\u3002\n\n\n\u30ea\u30af\u30a8\u30b9\u30c8\u306f\u76f4\u63a5\u884c\u308f\u308c\u308b\u304b\u3001Authorization Server\u3092\u4ecb\u3057\u3066\u884c\u308f\u308c\u308b\n\n\nB: Client\u306f\u3001Authorization Grant\u3068\u3044\u3046Resource Owner\u304b\u3089\u306e\u8a3c\u660e\u8a3c\u3092\u5f97\u308b\u3002\n\n\nClient\u306e\u7a2e\u985e\u306b\u3088\u308a\u30014\u7a2e\u985e\u306e\u627f\u8a8d\u30d5\u30ed\u30fc\u306e\u3069\u308c\u306b\u3059\u308b\u304b\u3092\u4f7f\u3044\u5206\u3051\u308b\u5fc5\u8981\u304c\u3042\u308b\n4\u3064\u4ee5\u5916\u306b\u3082\u3001\u65b0\u3057\u3044\u627f\u8a8d\u30d5\u30ed\u30fc\u3092\u4ed5\u69d8\u306b\u5247\u3063\u3066\u4f5c\u6210\u3059\u308b\u4e8b\u3082\u3067\u304d\u308b\n\n\nC: Client\u306f\u3001Authorization Server\u306b\u3001Authorization Grant\u3092\u898b\u305b\u308b\u3053\u3068\u3067\u3001Access Token\u3092\u8981\u6c42\u3059\u308b\u3002\nD: Authorization Server\u306f\u3001Client\u3068Authorization Grant\u304c\u6b63\u3057\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3001\u6b63\u3057\u3044\u5834\u5408\u3001Access Token\u3092\u8fd4\u3059\u3002\nE: Client\u306f\u3001Resource Server\u306b\u3001Access Token\u3068\u3068\u3082\u306b\u30ea\u30bd\u30fc\u30b9\u3092\u8981\u6c42\u3059\u308b\u3002\nF: Resource Server\u306f\u3001Access Token\u3092\u691c\u8a3c\u3057\u3001\u6b63\u3057\u304b\u3063\u305f\u5834\u5408\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u7d50\u679c\u3092\u8fd4\u3059\u3002\n\n\n4\u3064\u306e\u627f\u8a8d\u30d5\u30ed\u30fc\nSection 1.3  Authorization Grant \u3068 Section 4 Obtaining Authorization\u306e\u5185\u5bb9\n\n\n\n\u540d\u524d\n\u3069\u3093\u306a\u6642\u306b\u4f7f\u3046\u304b\n\n\n\n\nAuthorization Code Grant\nRails\u306a\u3069\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u306e\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u3067OAuth\u3059\u308b\u6642\n\n\nImplicit Grant\nJavascript\u306a\u3069Web\u30d6\u30e9\u30a6\u30b6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30b5\u30a4\u30c9\u3067OAuth\u3059\u308b\u6642\n\n\nResource Owner Password Credentials Grant\nPC\u3084\u30e2\u30d0\u30a4\u30eb\u30a2\u30d7\u30ea\u306a\u3069\u3067\u3001\u4ed6\u306e\u65b9\u6cd5\u304c\u4f7f\u3048\u306a\u3044\u74b0\u5883\u3067OAuth\u3059\u308b\u6642\n\n\nClient Credentials Grant\n\u793e\u5185\u306eAPI\u30b5\u30fc\u30d0\u30fc\u7b49\u4fe1\u983c\u3067\u304d\u308b\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089OAuth\u3059\u308b\u6642\n\n\n\n\nAuthorization Code Grant\nhttps://tools.ietf.org/html/rfc6749#section-4.1\n\nAuthorization_Code_Flow\n\n     +----------+\n     | Resource |\n     |   Owner  |\n     |          |\n     +----------+\n          ^\n          |\n         (B)\n     +----|-----+          Client Identifier      +---------------+\n     |         -+----(A)-- & Redirection URI ---->|               |\n     |  User-   |                                 | Authorization |\n     |  Agent  -+----(B)-- User authenticates --->|     Server    |\n     |          |                                 |               |\n     |         -+----(C)-- Authorization Code ---<|               |\n     +-|----|---+                                 +---------------+\n       |    |                                         ^      v\n      (A)  (C)                                        |      |\n       |    |                                         |      |\n       ^    v                                         |      |\n     +---------+                                      |      |\n     |         |>---(D)-- Authorization Code ---------'      |\n     |  Client |          & Redirection URI                  |\n     |         |                                             |\n     |         |<---(E)----- Access Token -------------------'\n     +---------+       (w/ Optional Refresh Token)\n\n   Note: The lines illustrating steps (A), (B), and (C) are broken into\n   two parts as they pass through the user-agent.\n\n                     Figure 3: Authorization Code Flow\n\n\n The flow illustrated in Figure 3 includes the following steps:\n\n   (A)  The client initiates the flow by directing the resource owner's\n        user-agent to the authorization endpoint.  The client includes\n        its client identifier, requested scope, local state, and a\n        redirection URI to which the authorization server will send the\n        user-agent back once access is granted (or denied).\n\n   (B)  The authorization server authenticates the resource owner (via\n        the user-agent) and establishes whether the resource owner\n        grants or denies the client's access request.\n\n   (C)  Assuming the resource owner grants access, the authorization\n        server redirects the user-agent back to the client using the\n        redirection URI provided earlier (in the request or during\n        client registration).  The redirection URI includes an\n        authorization code and any local state provided by the client\n        earlier.\n\n   (D)  The client requests an access token from the authorization\n        server's token endpoint by including the authorization code\n        received in the previous step.  When making the request, the\n        client authenticates with the authorization server.  The client\n        includes the redirection URI used to obtain the authorization\n        code for verification.\n\n   (E)  The authorization server authenticates the client, validates the\n        authorization code, and ensures that the redirection URI\n        received matches the URI used to redirect the client in\n        step (C).  If valid, the authorization server responds back with\n        an access token and, optionally, a refresh token.\n\n\n\n\nImplecit Grant\n\nImplicit_Grant_Flow\n\n     +----------+\n     | Resource |\n     |  Owner   |\n     |          |\n     +----------+\n          ^\n          |\n         (B)\n     +----|-----+          Client Identifier     +---------------+\n     |         -+----(A)-- & Redirection URI --->|               |\n     |  User-   |                                | Authorization |\n     |  Agent  -|----(B)-- User authenticates -->|     Server    |\n     |          |                                |               |\n     |          |<---(C)--- Redirection URI ----<|               |\n     |          |          with Access Token     +---------------+\n     |          |            in Fragment\n     |          |                                +---------------+\n     |          |----(D)--- Redirection URI ---->|   Web-Hosted  |\n     |          |          without Fragment      |     Client    |\n     |          |                                |    Resource   |\n     |     (F)  |<---(E)------- Script ---------<|               |\n     |          |                                +---------------+\n     +-|--------+\n       |    |\n      (A)  (G) Access Token\n       |    |\n       ^    v\n     +---------+\n     |         |\n     |  Client |\n     |         |\n     +---------+\n\n   Note: The lines illustrating steps (A) and (B) are broken into two\n   parts as they pass through the user-agent.\n\n                       Figure 4: Implicit Grant Flow\n\n\n   The flow illustrated in Figure 4 includes the following steps:\n\n   (A)  The client initiates the flow by directing the resource owner's\n        user-agent to the authorization endpoint.  The client includes\n        its client identifier, requested scope, local state, and a\n        redirection URI to which the authorization server will send the\n        user-agent back once access is granted (or denied).\n\n   (B)  The authorization server authenticates the resource owner (via\n        the user-agent) and establishes whether the resource owner\n        grants or denies the client's access request.\n\n   (C)  Assuming the resource owner grants access, the authorization\n        server redirects the user-agent back to the client using the\n        redirection URI provided earlier.  The redirection URI includes\n        the access token in the URI fragment.\n\n   (D)  The user-agent follows the redirection instructions by making a\n        request to the web-hosted client resource (which does not\n        include the fragment per [RFC2616]).  The user-agent retains the\n        fragment information locally.\n\n   (E)  The web-hosted client resource returns a web page (typically an\n        HTML document with an embedded script) capable of accessing the\n        full redirection URI including the fragment retained by the\n        user-agent, and extracting the access token (and other\n        parameters) contained in the fragment.\n\n   (F)  The user-agent executes the script provided by the web-hosted\n        client resource locally, which extracts the access token.\n\n   (G)  The user-agent passes the access token to the client.\n\n\n\n\nResource Owner Password Credentials Grant\nhttp://tools.ietf.org/html/rfc6749#section-4.3\n\nResource_Owner_Password_Credentials_Flow\n     +----------+\n     | Resource |\n     |  Owner   |\n     |          |\n     +----------+\n          v\n          |    Resource Owner\n         (A) Password Credentials\n          |\n          v\n     +---------+                                  +---------------+\n     |         |>--(B)---- Resource Owner ------->|               |\n     |         |         Password Credentials     | Authorization |\n     | Client  |                                  |     Server    |\n     |         |<--(C)---- Access Token ---------<|               |\n     |         |    (w/ Optional Refresh Token)   |               |\n     +---------+                                  +---------------+\n\n            Figure 5: Resource Owner Password Credentials Flow\n\n\n   The flow illustrated in Figure 5 includes the following steps:\n\n   (A)  The resource owner provides the client with its username and\n        password.\n\n   (B)  The client requests an access token from the authorization\n        server's token endpoint by including the credentials received\n        from the resource owner.  When making the request, the client\n        authenticates with the authorization server.\n\n   (C)  The authorization server authenticates the client and validates\n        the resource owner credentials, and if valid, issues an access\n        token.\n\n\n\nClient Credentials Grant\nhttp://tools.ietf.org/html/rfc6749#section-4.4\n\nClient_Credentials_Flow\n     +---------+                                  +---------------+\n     |         |                                  |               |\n     |         |>--(A)- Client Authentication --->| Authorization |\n     | Client  |                                  |     Server    |\n     |         |<--(B)---- Access Token ---------<|               |\n     |         |                                  |               |\n     +---------+                                  +---------------+\n\n                     Figure 6: Client Credentials Flow\n\n\n   The flow illustrated in Figure 6 includes the following steps:\n\n   (A)  The client authenticates with the authorization server and\n        requests an access token from the token endpoint.\n\n   (B)  The authorization server authenticates the client, and if valid,\n        issues an access token.\n\n\n\nRefresh Token\nhttp://tools.ietf.org/html/rfc6749#section-1.5\n\nRefreshing_an_Expired_Access_Token\n\n  +--------+                                           +---------------+\n  |        |--(A)------- Authorization Grant --------->|               |\n  |        |                                           |               |\n  |        |<-(B)----------- Access Token -------------|               |\n  |        |               & Refresh Token             |               |\n  |        |                                           |               |\n  |        |                            +----------+   |               |\n  |        |--(C)---- Access Token ---->|          |   |               |\n  |        |                            |          |   |               |\n  |        |<-(D)- Protected Resource --| Resource |   | Authorization |\n  | Client |                            |  Server  |   |     Server    |\n  |        |--(E)---- Access Token ---->|          |   |               |\n  |        |                            |          |   |               |\n  |        |<-(F)- Invalid Token Error -|          |   |               |\n  |        |                            +----------+   |               |\n  |        |                                           |               |\n  |        |--(G)----------- Refresh Token ----------->|               |\n  |        |                                           |               |\n  |        |<-(H)----------- Access Token -------------|               |\n  +--------+           & Optional Refresh Token        +---------------+\n\n               Figure 2: Refreshing an Expired Access Token\n\n\n\n\n![oauth-2-sm.png](https://qiita-image-store.s3.amazonaws.com/0/6664/2b01df92-7db3-8242-221d-8f0b17b7b90e.png \"oauth-2-sm.png\")\n\n\nOAuth 2.0\u306b\u95a2\u3057\u3066\u306f\u3001\u3044\u308d\u3093\u306a\u89e3\u8aac\u3084\u5b9f\u88c5\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u7d50\u5c40\u3001http://tools.ietf.org/html/rfc6749 \u306b\u3042\u308bRFC\u306e\u4ed5\u69d8\u3092\u8aad\u3080\u306e\u304c\u4e00\u756a\u306a\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u601d\u3044\u3001\u305d\u308c\u3092\u8aad\u3080\u969b\u306b\u5fc5\u8981\u306a\u90e8\u5206\u3001\u8a70\u307e\u308a\u3084\u3059\u3044\u90e8\u5206\u3092\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u305f\u3002\n\nOAuth 2.0 \u306e\u516c\u5f0f\u30b5\u30a4\u30c8 (http://oauth.net/2/) \u3082RFC\u306f1\u884c\u3067\u8efd\u304f\u30ea\u30f3\u30af\u304c\u3042\u308b\u3060\u3051\u3067\u3001\u3069\u3046\u305b\u7686\u5404\u8a00\u8a9e\u3067\u5b9f\u88c5\u3057\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u77e5\u308a\u305f\u3044\u3093\u3067\u3057\u3087\u307f\u305f\u3044\u306a\u69cb\u6210\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u81ea\u793e\u3082API\u3092\u516c\u958b\u3057\u3088\u3046\u3068\u304b\u3001\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u3057\u3063\u304b\u308a\u69cb\u7bc9\u3057\u3088\u3046\u306a\u3069\u3068\u3044\u3046\u6642\u306b\u3001Resource Server\u5074\u306b\u306a\u308b\u3053\u3068\u3082\u6700\u8fd1\u306f\u3059\u3054\u3044\u73cd\u3057\u3044\u8a33\u3067\u3082\u7121\u3044\u306e\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\n\n## \u610f\u5916\u3068\u3061\u3083\u3093\u3068\u8a33\u3057\u3066\u304a\u3044\u305f\u307b\u3046\u304c\u826f\u3044\u82f1\u5358\u8a9e\n\n\u4f8b\u3048\u3070\u3001`Authorization=\u8a8d\u8a3c`\u307f\u305f\u3044\u306b\u601d\u3063\u3066\u3044\u308b\u3068\u610f\u5473\u3092\u8aa4\u89e3\u3057\u3084\u3059\u3044\u306e\u3067\u3001\u304d\u3061\u3093\u3068\u65e5\u672c\u8a9e\u8a33\u306e\u5bfe\u5fdc\u4ed8\u3051\u3092\u3057\u3066\u304a\u3044\u305f\u307b\u3046\u304c\u3044\u3044\u82f1\u5358\u8a9e\u306f\u307e\u3068\u3081\u3066\u304a\u304d\u307e\u3057\u305f\u3002\n\n| \u82f1\u8a9e | \u65e5\u672c\u8a9e\u8a33 |\n| --- | --- |\n| Authorization | \u6a29\u9650\u4ed8\u4e0e\u3001\u6a29\u9650 |\n| Grant | \u8a31\u53ef\u8a3c\u3001\u627f\u8a8d |\n| Credential | \u6a29\u5a01\u306e\u8a3c\u660e\u8a3c\u3001\u8cc7\u683c |\n\n\u7279\u306bAuthorization\u306f\u7b2c1\u7fa9\u304c\u300c\u6a29\u9650\u4ed8\u4e0e=\u6a29\u9650\u3092\u4e0e\u3048\u308b\u884c\u70ba\u300d\u306a\u3053\u3068\u306b\u6ce8\u610f\u3057\u307e\u3057\u3087\u3046\u3002\n\n> 1. the act of authorizing\n> 2. permission or power granted by an authority; sanction.\n> \n> http://www.dictionary.com/browse/authorization\n\n\u3053\u308c\u306b\u5bfe\u3057\u3001Grant\u306f\u3001\u540d\u8a5e\u3068\u3057\u3066\u306e\u7b2c1\u7fa9\u304c\u300c\u8a31\u53ef\u8a3c=\u627f\u8a8d\u3055\u308c\u305f\u3082\u306e\u300d\u3067\u3001\u7b2c2\u7fa9\u304c\u300c\u627f\u8a8d=\u627f\u8a8d\u3059\u308b\u884c\u70ba\u300d\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n> 1. something granted, as a privilege or right, a sum of money, or a tract of land\n> 2. the act of granting.\n>\n> http://www.dictionary.com/browse/grant\n\n## 4\u3064\u306e\u5f79\u5272\n\n[Section 1.1 Roles](http://tools.ietf.org/html/rfc6749#section-1.1)\u306e\u5185\u5bb9\n\n| \u540d\u524d | \u5f79\u5272 | \u4f8b |\n| --- | --- | --- |\n| Resource Owner | \u30ea\u30bd\u30fc\u30b9\u3078\u306e\u30a2\u30af\u30bb\u30b9\u6a29\u9650\u3092\u4e0e\u3048\u3089\u308c\u308b\u4eba\u307e\u305f\u306f\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3 | \u30e6\u30fc\u30b6\u30fc |\n| Resource Server | Access Token\u3092\u4f7f\u3063\u305f\u30ea\u30bd\u30fc\u30b9\u3078\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5fdc\u3048\u3089\u308c\u308b\u30b5\u30fc\u30d0\u30fc | Facebook\u306eAPI\u30b5\u30fc\u30d0\u30fc |\n| Client | \u6a29\u9650\u306b\u57fa\u3065\u304d\u3001Resource Owner\u306e\u4ee3\u7406\u3068\u3057\u3066\u30ea\u30bd\u30fc\u30b9\u3092\u8981\u6c42\u3059\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\uff08Web\u30a2\u30d7\u30ea\u3067\u3082\u3001PC/\u30e2\u30d0\u30a4\u30eb\u30a2\u30d7\u30ea\u3067\u3082\uff09 | \u30e6\u30fc\u30b6\u30fc\u304c\u4f7f\u3063\u3066\u3044\u308b\u30a2\u30d7\u30ea\u3084\u30b5\u30fc\u30d3\u30b9 |\n| Authorization Server | Resource Owner\u304c\u8a8d\u53ef\u3057\u6a29\u9650\u4ed8\u4e0e\u3057\u305f\u5f8c\u3001Client\u306b\u5bfe\u3057\u3001Access Token\u3092\u767a\u884c\u3059\u308b\u30b5\u30fc\u30d0\u30fc | Facebook\u306e\u8a8d\u8a3c\u30b5\u30fc\u30d0\u30fc |\n\n\n\n### \u8a8d\u8a3c\u30d5\u30ed\u30fc\u5927\u67a0 - 4\u3064\u306e\u5f79\u5272\u306e\u95a2\u4fc2\u6027\n\n[Section 1.2 Protocol Flow](http://tools.ietf.org/html/rfc6749#section-1.2)\u306e\u5185\u5bb9\u3002\n\n\nOAuth2\u306b\u304a\u3051\u308b\u6d41\u308c\u306e\u5927\u67a0\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n```python:Abstract_Protocol_Flow\n     +--------+                               +---------------+\n     |        |--(A)- Authorization Request ->|   Resource    |\n     |        |                               |     Owner     |\n     |        |<-(B)-- Authorization Grant ---|               |\n     |        |                               +---------------+\n     |        |\n     |        |                               +---------------+\n     |        |--(C)-- Authorization Grant -->| Authorization |\n     | Client |                               |     Server    |\n     |        |<-(D)----- Access Token -------|               |\n     |        |                               +---------------+\n     |        |\n     |        |                               +---------------+\n     |        |--(E)----- Access Token ------>|    Resource   |\n     |        |                               |     Server    |\n     |        |<-(F)--- Protected Resource ---|               |\n     +--------+                               +---------------+\n\n                     Figure 1: Abstract Protocol Flow\n\n```\n\n* A: Client\u306f\u3001Resource Owner\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u308b\u3002\n - \u30ea\u30af\u30a8\u30b9\u30c8\u306f\u76f4\u63a5\u884c\u308f\u308c\u308b\u304b\u3001Authorization Server\u3092\u4ecb\u3057\u3066\u884c\u308f\u308c\u308b\n* B: Client\u306f\u3001Authorization Grant\u3068\u3044\u3046Resource Owner\u304b\u3089\u306e\u8a3c\u660e\u8a3c\u3092\u5f97\u308b\u3002\n - Client\u306e\u7a2e\u985e\u306b\u3088\u308a\u30014\u7a2e\u985e\u306e\u627f\u8a8d\u30d5\u30ed\u30fc\u306e\u3069\u308c\u306b\u3059\u308b\u304b\u3092\u4f7f\u3044\u5206\u3051\u308b\u5fc5\u8981\u304c\u3042\u308b\n - 4\u3064\u4ee5\u5916\u306b\u3082\u3001\u65b0\u3057\u3044\u627f\u8a8d\u30d5\u30ed\u30fc\u3092\u4ed5\u69d8\u306b\u5247\u3063\u3066\u4f5c\u6210\u3059\u308b\u4e8b\u3082\u3067\u304d\u308b\n* C: Client\u306f\u3001Authorization Server\u306b\u3001Authorization Grant\u3092\u898b\u305b\u308b\u3053\u3068\u3067\u3001Access Token\u3092\u8981\u6c42\u3059\u308b\u3002\n* D: Authorization Server\u306f\u3001Client\u3068Authorization Grant\u304c\u6b63\u3057\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3001\u6b63\u3057\u3044\u5834\u5408\u3001Access Token\u3092\u8fd4\u3059\u3002\n* E: Client\u306f\u3001Resource Server\u306b\u3001Access Token\u3068\u3068\u3082\u306b\u30ea\u30bd\u30fc\u30b9\u3092\u8981\u6c42\u3059\u308b\u3002\n* F: Resource Server\u306f\u3001Access Token\u3092\u691c\u8a3c\u3057\u3001\u6b63\u3057\u304b\u3063\u305f\u5834\u5408\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u7d50\u679c\u3092\u8fd4\u3059\u3002\n\n\n\n## 4\u3064\u306e\u627f\u8a8d\u30d5\u30ed\u30fc\n\n[Section 1.3  Authorization Grant](http://tools.ietf.org/html/rfc6749#section-1.3) \u3068 [Section 4 Obtaining Authorization](http://tools.ietf.org/html/rfc6749#section-4)\u306e\u5185\u5bb9\n\n| \u540d\u524d | \u3069\u3093\u306a\u6642\u306b\u4f7f\u3046\u304b |\n| --- | --- |\n| [Authorization Code Grant](http://tools.ietf.org/html/rfc6749#section-4.1) | Rails\u306a\u3069\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u306e\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u3067OAuth\u3059\u308b\u6642 |\n| [Implicit Grant](http://tools.ietf.org/html/rfc6749#section-4.2) | Javascript\u306a\u3069Web\u30d6\u30e9\u30a6\u30b6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30b5\u30a4\u30c9\u3067OAuth\u3059\u308b\u6642 |\n| [Resource Owner Password Credentials Grant](http://tools.ietf.org/html/rfc6749#section-4.3) | PC\u3084\u30e2\u30d0\u30a4\u30eb\u30a2\u30d7\u30ea\u306a\u3069\u3067\u3001\u4ed6\u306e\u65b9\u6cd5\u304c\u4f7f\u3048\u306a\u3044\u74b0\u5883\u3067OAuth\u3059\u308b\u6642 |\n| [Client Credentials Grant](http://tools.ietf.org/html/rfc6749#section-4.4) | \u793e\u5185\u306eAPI\u30b5\u30fc\u30d0\u30fc\u7b49\u4fe1\u983c\u3067\u304d\u308b\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089OAuth\u3059\u308b\u6642 |\n\n### Authorization Code Grant\n\n\nhttps://tools.ietf.org/html/rfc6749#section-4.1\n\n```python:Authorization_Code_Flow\n\n     +----------+\n     | Resource |\n     |   Owner  |\n     |          |\n     +----------+\n          ^\n          |\n         (B)\n     +----|-----+          Client Identifier      +---------------+\n     |         -+----(A)-- & Redirection URI ---->|               |\n     |  User-   |                                 | Authorization |\n     |  Agent  -+----(B)-- User authenticates --->|     Server    |\n     |          |                                 |               |\n     |         -+----(C)-- Authorization Code ---<|               |\n     +-|----|---+                                 +---------------+\n       |    |                                         ^      v\n      (A)  (C)                                        |      |\n       |    |                                         |      |\n       ^    v                                         |      |\n     +---------+                                      |      |\n     |         |>---(D)-- Authorization Code ---------'      |\n     |  Client |          & Redirection URI                  |\n     |         |                                             |\n     |         |<---(E)----- Access Token -------------------'\n     +---------+       (w/ Optional Refresh Token)\n\n   Note: The lines illustrating steps (A), (B), and (C) are broken into\n   two parts as they pass through the user-agent.\n\n                     Figure 3: Authorization Code Flow\n\n\n The flow illustrated in Figure 3 includes the following steps:\n\n   (A)  The client initiates the flow by directing the resource owner's\n        user-agent to the authorization endpoint.  The client includes\n        its client identifier, requested scope, local state, and a\n        redirection URI to which the authorization server will send the\n        user-agent back once access is granted (or denied).\n\n   (B)  The authorization server authenticates the resource owner (via\n        the user-agent) and establishes whether the resource owner\n        grants or denies the client's access request.\n\n   (C)  Assuming the resource owner grants access, the authorization\n        server redirects the user-agent back to the client using the\n        redirection URI provided earlier (in the request or during\n        client registration).  The redirection URI includes an\n        authorization code and any local state provided by the client\n        earlier.\n\n   (D)  The client requests an access token from the authorization\n        server's token endpoint by including the authorization code\n        received in the previous step.  When making the request, the\n        client authenticates with the authorization server.  The client\n        includes the redirection URI used to obtain the authorization\n        code for verification.\n\n   (E)  The authorization server authenticates the client, validates the\n        authorization code, and ensures that the redirection URI\n        received matches the URI used to redirect the client in\n        step (C).  If valid, the authorization server responds back with\n        an access token and, optionally, a refresh token.\n\n```\n\n### Implecit Grant\n\n\n```python:Implicit_Grant_Flow\n\n     +----------+\n     | Resource |\n     |  Owner   |\n     |          |\n     +----------+\n          ^\n          |\n         (B)\n     +----|-----+          Client Identifier     +---------------+\n     |         -+----(A)-- & Redirection URI --->|               |\n     |  User-   |                                | Authorization |\n     |  Agent  -|----(B)-- User authenticates -->|     Server    |\n     |          |                                |               |\n     |          |<---(C)--- Redirection URI ----<|               |\n     |          |          with Access Token     +---------------+\n     |          |            in Fragment\n     |          |                                +---------------+\n     |          |----(D)--- Redirection URI ---->|   Web-Hosted  |\n     |          |          without Fragment      |     Client    |\n     |          |                                |    Resource   |\n     |     (F)  |<---(E)------- Script ---------<|               |\n     |          |                                +---------------+\n     +-|--------+\n       |    |\n      (A)  (G) Access Token\n       |    |\n       ^    v\n     +---------+\n     |         |\n     |  Client |\n     |         |\n     +---------+\n\n   Note: The lines illustrating steps (A) and (B) are broken into two\n   parts as they pass through the user-agent.\n\n                       Figure 4: Implicit Grant Flow\n\n\n   The flow illustrated in Figure 4 includes the following steps:\n\n   (A)  The client initiates the flow by directing the resource owner's\n        user-agent to the authorization endpoint.  The client includes\n        its client identifier, requested scope, local state, and a\n        redirection URI to which the authorization server will send the\n        user-agent back once access is granted (or denied).\n\n   (B)  The authorization server authenticates the resource owner (via\n        the user-agent) and establishes whether the resource owner\n        grants or denies the client's access request.\n\n   (C)  Assuming the resource owner grants access, the authorization\n        server redirects the user-agent back to the client using the\n        redirection URI provided earlier.  The redirection URI includes\n        the access token in the URI fragment.\n\n   (D)  The user-agent follows the redirection instructions by making a\n        request to the web-hosted client resource (which does not\n        include the fragment per [RFC2616]).  The user-agent retains the\n        fragment information locally.\n\n   (E)  The web-hosted client resource returns a web page (typically an\n        HTML document with an embedded script) capable of accessing the\n        full redirection URI including the fragment retained by the\n        user-agent, and extracting the access token (and other\n        parameters) contained in the fragment.\n\n   (F)  The user-agent executes the script provided by the web-hosted\n        client resource locally, which extracts the access token.\n\n   (G)  The user-agent passes the access token to the client.\n\n```\n\n### Resource Owner Password Credentials Grant\n\nhttp://tools.ietf.org/html/rfc6749#section-4.3\n\n\n```python:Resource_Owner_Password_Credentials_Flow\n     +----------+\n     | Resource |\n     |  Owner   |\n     |          |\n     +----------+\n          v\n          |    Resource Owner\n         (A) Password Credentials\n          |\n          v\n     +---------+                                  +---------------+\n     |         |>--(B)---- Resource Owner ------->|               |\n     |         |         Password Credentials     | Authorization |\n     | Client  |                                  |     Server    |\n     |         |<--(C)---- Access Token ---------<|               |\n     |         |    (w/ Optional Refresh Token)   |               |\n     +---------+                                  +---------------+\n\n            Figure 5: Resource Owner Password Credentials Flow\n\n\n   The flow illustrated in Figure 5 includes the following steps:\n\n   (A)  The resource owner provides the client with its username and\n        password.\n\n   (B)  The client requests an access token from the authorization\n        server's token endpoint by including the credentials received\n        from the resource owner.  When making the request, the client\n        authenticates with the authorization server.\n\n   (C)  The authorization server authenticates the client and validates\n        the resource owner credentials, and if valid, issues an access\n        token.\n```\n\n\n### Client Credentials Grant\n\nhttp://tools.ietf.org/html/rfc6749#section-4.4\n\n```python:Client_Credentials_Flow\n     +---------+                                  +---------------+\n     |         |                                  |               |\n     |         |>--(A)- Client Authentication --->| Authorization |\n     | Client  |                                  |     Server    |\n     |         |<--(B)---- Access Token ---------<|               |\n     |         |                                  |               |\n     +---------+                                  +---------------+\n\n                     Figure 6: Client Credentials Flow\n\n\n   The flow illustrated in Figure 6 includes the following steps:\n\n   (A)  The client authenticates with the authorization server and\n        requests an access token from the token endpoint.\n\n   (B)  The authorization server authenticates the client, and if valid,\n        issues an access token.\n```\n\n### Refresh Token\n\nhttp://tools.ietf.org/html/rfc6749#section-1.5\n\n```python:Refreshing_an_Expired_Access_Token\n\n  +--------+                                           +---------------+\n  |        |--(A)------- Authorization Grant --------->|               |\n  |        |                                           |               |\n  |        |<-(B)----------- Access Token -------------|               |\n  |        |               & Refresh Token             |               |\n  |        |                                           |               |\n  |        |                            +----------+   |               |\n  |        |--(C)---- Access Token ---->|          |   |               |\n  |        |                            |          |   |               |\n  |        |<-(D)- Protected Resource --| Resource |   | Authorization |\n  | Client |                            |  Server  |   |     Server    |\n  |        |--(E)---- Access Token ---->|          |   |               |\n  |        |                            |          |   |               |\n  |        |<-(F)- Invalid Token Error -|          |   |               |\n  |        |                            +----------+   |               |\n  |        |                                           |               |\n  |        |--(G)----------- Refresh Token ----------->|               |\n  |        |                                           |               |\n  |        |<-(H)----------- Access Token -------------|               |\n  +--------+           & Optional Refresh Token        +---------------+\n\n               Figure 2: Refreshing an Expired Access Token\n\n```\n", "tags": ["OAuth"]}