{"tags": ["Arduino", "led", "openFrameworks", "serial"], "context": " More than 1 year has passed since last update.HOLTEK\u793e\u88fd\u306eHT16K33\u3068\u3044\u3046LED Controller Driver\u3092openFramewokrs\u304b\u3089\u30b7\u30ea\u30a2\u30eb\u3067\u70b9\u706f\u3055\u305b\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u30c9\u30e9\u30a4\u30d0\u5358\u4f53\u3092\u305d\u306e\u307e\u307e\u52d5\u4f5c\u3055\u305b\u308b\u306e\u306f\u5927\u5909\u306a\u306e\u3067\u3001Adafruit\u304b\u3089\u51fa\u3066\u3044\u308bHT16K33 Breakout\u3092\u4f7f\u3046\u306e\u304c\u304a\u3059\u3059\u3081\u3067\u3059\u3002\n\n\u3053\u308c\u306fArduino\u306eI2C\u3067LED\u306e\u30de\u30c8\u30ea\u30af\u30b9\u3092\u5236\u5fa1\u51fa\u6765\u308b\u3068\u3044\u3046\u3082\u306e\u306a\u306e\u3067\u3059\u304c\u3001\u5236\u5fa1\u3067\u304d\u308b\u6570\u306f\u6700\u592716x8\u3067\u30017\u30bb\u30b0\u306a\u3069\u306eLED\u3082\u52d5\u304b\u305b\u307e\u3059\u3002\n\u540c\u6642\u306b3\u3064\u307b\u3069\u7e4b\u3052\u3066\u52d5\u4f5c\u3055\u305b\u3089\u308c\u308b\u306e\u3067\u30013\u3064\u4f7f\u3048\u307016x24\u306eLED\u30d1\u30cd\u30eb\u3068\u3057\u3066\u4f7f\u7528\u51fa\u6765\u307e\u3059\u3002\n\u307e\u305f\u3001Arduino\u304b\u3089\u70b9\u706f\u3092\u5236\u5fa1\u3059\u308b\u306b\u306f\u3001Adafruit\u88fd\u306e\"Adafruit_LEDBackpack.h\"\u3068\"Adafruit_GFX.h\"\u3092\u8aad\u307f\u3053\u3081\u3070\u6bd4\u8f03\u7684\u7c21\u5358\u306b\u52d5\u304b\u3059\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\nhttps://github.com/adafruit/Adafruit-LED-Backpack-Library\nhttps://github.com/adafruit/Adafruit-GFX-Library\n\u307e\u305f\u3001Breakout\u3068\u79cb\u6708\u3068\u304b\u306eLED\u30de\u30c8\u30ea\u30af\u30b9\u3092\u63a5\u7d9a\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u304c\u3001\u3053\u3053\u3089\u3078\u3093\u306e\u30c9\u30e9\u30a4\u30d0\u3068\u57fa\u677f\u3068LED\u304c\u30bb\u30c3\u30c8\u306b\u306a\u3063\u305f\u3082\u306e\u306e\u307b\u3046\u304c\u624b\u8efd\u306b\u4f7f\u3048\u307e\u3059\u3002\nhttps://www.adafruit.com/products/1853\nhttps://www.adafruit.com/products/2052\n\u7d44\u307f\u7acb\u3066\u65b9\u3084\u63a5\u7d9a\u65b9\u6cd5\u306a\u3069\u306f\u3053\u3061\u3089\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\nhttps://learn.adafruit.com/downloads/pdf/adafruit-led-backpack.pdf\n\u3061\u306a\u307f\u306b\u666e\u901a\u306eLED\u30de\u30c8\u30ea\u30af\u30b9\u3092\u63a5\u7d9a\u3057\u3066\u4f7f\u3046\u5834\u5408\u306f\u3053\u3061\u3089\u306e\u30d6\u30ed\u30b0\u3092\u53c2\u8003\u306b\u63a5\u7d9a\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\nHT16K33\u3092\uff12\u3064\u4f7f\u3063\u3066LED\u30c9\u30c3\u30c8\u30de\u30c8\u30ea\u30c3\u30af\u30b9\u3092\u5236\u5fa1\u3057\u3066\u307f\u305f\nhttp://nuneno.cocolog-nifty.com/blog/2015/01/ht16k33led-1282.html\n\u672c\u984c\u306b\u306f\u3044\u308a\u307e\u3059\u3002\n\u5148\u306b\u8a18\u3057\u305f\u3068\u304a\u308a\u3001Arduino\u304b\u3089\u30c9\u30e9\u30a4\u30d0\u3092\u5236\u5fa1\u3059\u308b\u306e\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3048\u3070\u7c21\u5358\u306b\u51fa\u6765\u307e\u3059\u3002\n\u305f\u3060\u3001openFrameworks\u304b\u3089\u5236\u5fa1\u3059\u308b\u306e\u304c\u7d50\u69cb\u5384\u4ecb\u3067\uff08\u4eca\u601d\u3046\u3068\u3001\u7d20\u76f4\u306bI2C\u3092firmata\u7d4c\u7531\u3067\u52d5\u304b\u3059\u306e\u304c\u826f\u3044\uff09\u3001\u50d5\u304c\u8a66\u3057\u305f\u306e\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306boF\u304b\u3089\u30b7\u30ea\u30a2\u30eb\u7d4c\u7531\u3067Arduino\u306b\u4fe1\u53f7\u3092\u9001\u308a\u3001\u70b9\u706f\u3055\u305b\u308b\u3068\u3044\u3046\u65b9\u6cd5\u3067\u3059\u3002\nopenFrameoworks \u2192 \u30b7\u30ea\u30a2\u30eb \u2192 Arduino UNO \u2192 HT16K33 \u2192 LED\u30de\u30c8\u30ea\u30af\u30b9\n\u3067\u3001Arduino\u5074\u306e\u30bd\u30fc\u30b9\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\u8a73\u3057\u304f\u306f\u30b3\u30e1\u30f3\u30c8\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\nHT16K33-SerialRead.ino\n#include <Wire.h>\n#include \"Adafruit_LEDBackpack.h\"\n#include \"Adafruit_GFX.h\"\n\n// 6x18\u306e\u5834\u5408\u306eLED\u306e\u500b\u6570\n#define LED_SIZE 128\n\n// HT16K33\u306e\u63a5\u7d9a\u53f0\u6570\nint enables[3] = {true, true, false};\n// \u305d\u308c\u305e\u308c\u306eID\nint drivers[3] = {0x70, 0x71, 0x72};\n// \u305d\u308c\u305e\u308c\u306e\u660e\u308b\u3055\nint brightnesses[3] = {0, 0, 0};\n\nint mode = 0;\nString numberString = \"\";\nint numbers[LED_SIZE*3] = {};\nint counter = -1;\n\n// Adafruit_LEDBackpack\u3092\u914d\u5217\u306b\u3059\u308b\nAdafruit_8x16matrix matrixes[3] = {\n  Adafruit_8x16matrix(),\n  Adafruit_8x16matrix(),\n  Adafruit_8x16matrix()\n};\n\nvoid setup() {\n  // \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3092\u958b\u59cb\n  Serial.begin(115200);\n\n  // \u305d\u308c\u305e\u308c\u306e\u30c9\u30e9\u30a4\u30d0\u30fc\u306einitialize\n  if(enables[0]){\n    matrixes[0].begin(drivers[0]);\n    matrixes[0].setBrightness(brightnesses[0]);\n  }\n\n  if(enables[1]){\n    matrixes[1].begin(drivers[1]);\n    matrixes[1].setBrightness(brightnesses[1]);\n  }\n\n  if(enables[2]){\n    matrixes[2].begin(drivers[2]);\n    matrixes[2].setBrightness(brightnesses[2]);\n  }\n}\n\nvoid loop() {\n  // \u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u306b\u30c7\u30fc\u30bf\u304c\u3042\u308b\u304b\n  if (Serial.available() > 0) {\n    // \u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u306b\u3042\u308b\u30c7\u30fc\u30bf\u306e\u5148\u982d1byte\u3092\u53d6\u5f97\n    char input = Serial.read();\n    int il = sizeof(input);\n\n    // \u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u306e\u5206\u3060\u3051\u30eb\u30fc\u30d7\n    for(int i = 0; i < il; i++){\n      char c = input;\n      // char\u3092int\u306b\u5909\u63db\n      int ctoi = input - '0';\n\n      // \u30b7\u30ea\u30a2\u30eb\u30c7\u30fc\u30bf\u306e\u63a5\u982d\u6587\u5b57\u304cH\u3060\u3063\u305f\u3089\n      if(c == 'H'){\n        mode = 11;\n        numbers[counter] += numberString.toInt() + 1;\n        numberString = \"\";\n        counter++;\n      }\n      // \u30b7\u30ea\u30a2\u30eb\u30c7\u30fc\u30bf\u306e\u63a5\u982d\u6587\u5b57\u304c\u30b9\u30e9\u30c3\u30b7\u30e5\u3060\u3063\u305f\u3089\n      else if(c == '/'){\n        mode = 19;\n        numbers[counter] += numberString.toInt() + 1;\n        numberString = \"\";\n      }\n      // \u30b7\u30ea\u30a2\u30eb\u30c7\u30fc\u30bf\u304c\u6570\u5024\u3060\u3063\u305f\u3089\uff08LED\u306e\u70b9\u706f\u5834\u6240\uff09\n      else if(int(ctoi) >= 0 && int(ctoi) <= 9){\n        // \u63a5\u982d\u6587\u5b57\u304cH\u306e\u6642\n        if(mode == 11){\n          // \u9023\u7d9a\u3057\u305f\u6570\u5024\u3092\u4fdd\u5b58\uff08\"2\",\"5\",\"6\"\u306e\u3088\u3046\u306b\u30d0\u30e9\u30d0\u30e9\u3067\u53d6\u5f97\u3057\u305f\u3082\u306e\u3092\"256\"\u3068\u3059\u308b\uff09\n          numberString += String(c);\n        }\n        // \u63a5\u982d\u6587\u5b57\u304c\u30b9\u30e9\u30c3\u30b7\u30e5\u306e\u6642\uff08\u30b7\u30ea\u30a2\u30eb\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\u5b8c\u4e86\u6642\uff09\n        else if(mode == 19){\n          // \u5909\u6570\u3092initialize\n          memset( numbers, 0, sizeof(numbers) );\n          counter = -1;\n          mode = 0;\n        }\n      }\n    }\n\n    // \u30b7\u30ea\u30a2\u30eb\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\u5b8c\u4e86\u6642\u306e\u51e6\u7406\uff08LED\u306e\u70b9\u706f\u51e6\u7406\uff09\n    if(mode == 19){\n      int nl = sizeof(numbers) / sizeof(numbers[0]);\n\n      if(enables[0]) matrixes[0].clear();\n      if(enables[1]) matrixes[1].clear();\n      if(enables[2]) matrixes[2].clear();\n\n      int numberCount = 0;\n      for(int i = 0; i < nl; i++){\n        int n = numbers[i];\n        if(n > 0){\n          n -= 1;\n          int y = 0;\n          int x = 0;\n\n          // \u9023\u756a\u3067\u6765\u305f\u6570\u5024\u3092x,y\u5ea7\u6a19\u306b\u623b\u3059\n          if(n < LED_SIZE){\n            y = floor(n / 8);\n            x = n - (floor(n / 8) * 8);\n            if(enables[0]) matrixes[0].drawPixel(x, y, LED_ON);\n          }\n          else if(n < LED_SIZE * 2){\n            n -= LED_SIZE;\n            y = floor(n / 8);\n            x = n - (floor(n / 8) * 8);\n            if(enables[1]) matrixes[1].drawPixel(x, y, LED_ON);\n          }\n          else if(n < LED_SIZE * 3){\n            n -= LED_SIZE * 2;\n            y = floor(n / 8);\n            x = n - (floor(n / 8) * 8);\n            if(enables[2]) matrixes[2].drawPixel(x, y, LED_ON);\n          }\n          numberCount++;\n        }\n      }\n\n      if(numberCount > 0){\n      }\n\n      // LED\u3092\u70b9\u706f\n      if(enables[0]) matrixes[0].writeDisplay();\n      if(enables[1]) matrixes[1].writeDisplay();\n      if(enables[2]) matrixes[2].writeDisplay();\n    }\n\n  }\n}\n\n\n\u3053\u306e\u30bd\u30fc\u30b9\u3092Arduino\u306b\u66f8\u304d\u8fbc\u3093\u3060\u5f8c\u3001HT16K33\u306eBreakout\u306a\u3069\u306b\u63a5\u7d9a\u3057\u307e\u3059\u3002\n\u305d\u3057\u3066openFrameworks\u5074\u3067\u306f\u3001\u30b7\u30ea\u30a2\u30eb\u306b\u63a5\u7d9a\u3057\u305f\u5f8c\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306a\u30eb\u30fc\u30eb\u3067\u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u306b\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002\n\"H\" \uff0b\uff08\u5de6\u4e0a\u304b\u3089\u306eLED\u306e\u9023\u756a\uff09... \u7e70\u308a\u8fd4\u3057... \"\\0\"\n\nopenFrameworks\nvoid ofApp::updateSerial(){\n  string writerSerial += \"H1H200H37H184/0\";\n  unsigned char* writeByte = (unsigned char*) writerSerial.c_str();\n  int result = serial.writeBytes(writeByte, writerSerial.length() + 1);\n}\n\n\n\u3053\u308c\u304c\u30b7\u30ea\u30a2\u30eb\u3067\u306e\u9001\u4fe1\u306e\u57fa\u672c\u3067\u3001\u3053\u308c\u3092\u3082\u3046\u3059\u3053\u3057\u4f7f\u3048\u308b\u611f\u3058\u306b\u3057\u305f\u3082\u306e\u306f\u3053\u3061\u3089\u3067\u3059\u3002\nhttps://github.com/hisahayashi/ofxHT16K33\n\n\u52d5\u4f5c\u30b5\u30f3\u30d7\u30eb\n\n\u203b openFrameworks\u5074\u306e\u9ed2\u3044\u4e38\u3068LED\u306e\u70b9\u706f\u304c\u9023\u52d5\u3057\u3066\u3044\u307e\u3059\nHOLTEK\u793e\u88fd\u306eHT16K33\u3068\u3044\u3046LED Controller Driver\u3092openFramewokrs\u304b\u3089\u30b7\u30ea\u30a2\u30eb\u3067\u70b9\u706f\u3055\u305b\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u30c9\u30e9\u30a4\u30d0\u5358\u4f53\u3092\u305d\u306e\u307e\u307e\u52d5\u4f5c\u3055\u305b\u308b\u306e\u306f\u5927\u5909\u306a\u306e\u3067\u3001Adafruit\u304b\u3089\u51fa\u3066\u3044\u308bHT16K33 Breakout\u3092\u4f7f\u3046\u306e\u304c\u304a\u3059\u3059\u3081\u3067\u3059\u3002\n\n![HT16K33 Breakout](https://qiita-image-store.s3.amazonaws.com/0/36929/be635365-5e86-9eff-4d04-ad35d130df36.png)\n\n\n\u3053\u308c\u306fArduino\u306eI2C\u3067LED\u306e\u30de\u30c8\u30ea\u30af\u30b9\u3092\u5236\u5fa1\u51fa\u6765\u308b\u3068\u3044\u3046\u3082\u306e\u306a\u306e\u3067\u3059\u304c\u3001\u5236\u5fa1\u3067\u304d\u308b\u6570\u306f\u6700\u592716x8\u3067\u30017\u30bb\u30b0\u306a\u3069\u306eLED\u3082\u52d5\u304b\u305b\u307e\u3059\u3002\n\u540c\u6642\u306b3\u3064\u307b\u3069\u7e4b\u3052\u3066\u52d5\u4f5c\u3055\u305b\u3089\u308c\u308b\u306e\u3067\u30013\u3064\u4f7f\u3048\u307016x24\u306eLED\u30d1\u30cd\u30eb\u3068\u3057\u3066\u4f7f\u7528\u51fa\u6765\u307e\u3059\u3002\n\n\u307e\u305f\u3001Arduino\u304b\u3089\u70b9\u706f\u3092\u5236\u5fa1\u3059\u308b\u306b\u306f\u3001Adafruit\u88fd\u306e\"Adafruit_LEDBackpack.h\"\u3068\"Adafruit_GFX.h\"\u3092\u8aad\u307f\u3053\u3081\u3070\u6bd4\u8f03\u7684\u7c21\u5358\u306b\u52d5\u304b\u3059\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\nhttps://github.com/adafruit/Adafruit-LED-Backpack-Library\nhttps://github.com/adafruit/Adafruit-GFX-Library\n\n\u307e\u305f\u3001Breakout\u3068\u79cb\u6708\u3068\u304b\u306eLED\u30de\u30c8\u30ea\u30af\u30b9\u3092\u63a5\u7d9a\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u304c\u3001\u3053\u3053\u3089\u3078\u3093\u306e\u30c9\u30e9\u30a4\u30d0\u3068\u57fa\u677f\u3068LED\u304c\u30bb\u30c3\u30c8\u306b\u306a\u3063\u305f\u3082\u306e\u306e\u307b\u3046\u304c\u624b\u8efd\u306b\u4f7f\u3048\u307e\u3059\u3002\nhttps://www.adafruit.com/products/1853\nhttps://www.adafruit.com/products/2052\n\n\u7d44\u307f\u7acb\u3066\u65b9\u3084\u63a5\u7d9a\u65b9\u6cd5\u306a\u3069\u306f\u3053\u3061\u3089\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\nhttps://learn.adafruit.com/downloads/pdf/adafruit-led-backpack.pdf\n\n\u3061\u306a\u307f\u306b\u666e\u901a\u306eLED\u30de\u30c8\u30ea\u30af\u30b9\u3092\u63a5\u7d9a\u3057\u3066\u4f7f\u3046\u5834\u5408\u306f\u3053\u3061\u3089\u306e\u30d6\u30ed\u30b0\u3092\u53c2\u8003\u306b\u63a5\u7d9a\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\nHT16K33\u3092\uff12\u3064\u4f7f\u3063\u3066LED\u30c9\u30c3\u30c8\u30de\u30c8\u30ea\u30c3\u30af\u30b9\u3092\u5236\u5fa1\u3057\u3066\u307f\u305f\nhttp://nuneno.cocolog-nifty.com/blog/2015/01/ht16k33led-1282.html\n\n\n\u672c\u984c\u306b\u306f\u3044\u308a\u307e\u3059\u3002\n\u5148\u306b\u8a18\u3057\u305f\u3068\u304a\u308a\u3001Arduino\u304b\u3089\u30c9\u30e9\u30a4\u30d0\u3092\u5236\u5fa1\u3059\u308b\u306e\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3048\u3070\u7c21\u5358\u306b\u51fa\u6765\u307e\u3059\u3002\n\u305f\u3060\u3001openFrameworks\u304b\u3089\u5236\u5fa1\u3059\u308b\u306e\u304c\u7d50\u69cb\u5384\u4ecb\u3067\uff08\u4eca\u601d\u3046\u3068\u3001\u7d20\u76f4\u306bI2C\u3092firmata\u7d4c\u7531\u3067\u52d5\u304b\u3059\u306e\u304c\u826f\u3044\uff09\u3001\u50d5\u304c\u8a66\u3057\u305f\u306e\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306boF\u304b\u3089\u30b7\u30ea\u30a2\u30eb\u7d4c\u7531\u3067Arduino\u306b\u4fe1\u53f7\u3092\u9001\u308a\u3001\u70b9\u706f\u3055\u305b\u308b\u3068\u3044\u3046\u65b9\u6cd5\u3067\u3059\u3002\n\nopenFrameoworks \u2192 \u30b7\u30ea\u30a2\u30eb \u2192 Arduino UNO \u2192 HT16K33 \u2192 LED\u30de\u30c8\u30ea\u30af\u30b9\n\n\u3067\u3001Arduino\u5074\u306e\u30bd\u30fc\u30b9\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\u8a73\u3057\u304f\u306f\u30b3\u30e1\u30f3\u30c8\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n```cpp:HT16K33-SerialRead.ino\n#include <Wire.h>\n#include \"Adafruit_LEDBackpack.h\"\n#include \"Adafruit_GFX.h\"\n\n// 6x18\u306e\u5834\u5408\u306eLED\u306e\u500b\u6570\n#define LED_SIZE 128\n\n// HT16K33\u306e\u63a5\u7d9a\u53f0\u6570\nint enables[3] = {true, true, false};\n// \u305d\u308c\u305e\u308c\u306eID\nint drivers[3] = {0x70, 0x71, 0x72};\n// \u305d\u308c\u305e\u308c\u306e\u660e\u308b\u3055\nint brightnesses[3] = {0, 0, 0};\n\nint mode = 0;\nString numberString = \"\";\nint numbers[LED_SIZE*3] = {};\nint counter = -1;\n\n// Adafruit_LEDBackpack\u3092\u914d\u5217\u306b\u3059\u308b\nAdafruit_8x16matrix matrixes[3] = {\n  Adafruit_8x16matrix(),\n  Adafruit_8x16matrix(),\n  Adafruit_8x16matrix()\n};\n\nvoid setup() {\n  // \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3092\u958b\u59cb\n  Serial.begin(115200);\n\n  // \u305d\u308c\u305e\u308c\u306e\u30c9\u30e9\u30a4\u30d0\u30fc\u306einitialize\n  if(enables[0]){\n    matrixes[0].begin(drivers[0]);\n    matrixes[0].setBrightness(brightnesses[0]);\n  }\n  \n  if(enables[1]){\n    matrixes[1].begin(drivers[1]);\n    matrixes[1].setBrightness(brightnesses[1]);\n  }\n  \n  if(enables[2]){\n    matrixes[2].begin(drivers[2]);\n    matrixes[2].setBrightness(brightnesses[2]);\n  }\n}\n\nvoid loop() {\n  // \u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u306b\u30c7\u30fc\u30bf\u304c\u3042\u308b\u304b\n  if (Serial.available() > 0) {\n    // \u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u306b\u3042\u308b\u30c7\u30fc\u30bf\u306e\u5148\u982d1byte\u3092\u53d6\u5f97\n    char input = Serial.read();\n    int il = sizeof(input);\n    \n    // \u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u306e\u5206\u3060\u3051\u30eb\u30fc\u30d7\n    for(int i = 0; i < il; i++){\n      char c = input;\n      // char\u3092int\u306b\u5909\u63db\n      int ctoi = input - '0';\n\n      // \u30b7\u30ea\u30a2\u30eb\u30c7\u30fc\u30bf\u306e\u63a5\u982d\u6587\u5b57\u304cH\u3060\u3063\u305f\u3089\n      if(c == 'H'){\n        mode = 11;\n        numbers[counter] += numberString.toInt() + 1;\n        numberString = \"\";\n        counter++;\n      }\n      // \u30b7\u30ea\u30a2\u30eb\u30c7\u30fc\u30bf\u306e\u63a5\u982d\u6587\u5b57\u304c\u30b9\u30e9\u30c3\u30b7\u30e5\u3060\u3063\u305f\u3089\n      else if(c == '/'){\n        mode = 19;\n        numbers[counter] += numberString.toInt() + 1;\n        numberString = \"\";\n      }\n      // \u30b7\u30ea\u30a2\u30eb\u30c7\u30fc\u30bf\u304c\u6570\u5024\u3060\u3063\u305f\u3089\uff08LED\u306e\u70b9\u706f\u5834\u6240\uff09\n      else if(int(ctoi) >= 0 && int(ctoi) <= 9){\n        // \u63a5\u982d\u6587\u5b57\u304cH\u306e\u6642\n        if(mode == 11){\n          // \u9023\u7d9a\u3057\u305f\u6570\u5024\u3092\u4fdd\u5b58\uff08\"2\",\"5\",\"6\"\u306e\u3088\u3046\u306b\u30d0\u30e9\u30d0\u30e9\u3067\u53d6\u5f97\u3057\u305f\u3082\u306e\u3092\"256\"\u3068\u3059\u308b\uff09\n          numberString += String(c);\n        }\n        // \u63a5\u982d\u6587\u5b57\u304c\u30b9\u30e9\u30c3\u30b7\u30e5\u306e\u6642\uff08\u30b7\u30ea\u30a2\u30eb\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\u5b8c\u4e86\u6642\uff09\n        else if(mode == 19){\n          // \u5909\u6570\u3092initialize\n          memset( numbers, 0, sizeof(numbers) );\n          counter = -1;\n          mode = 0;\n        }\n      }\n    }\n\n    // \u30b7\u30ea\u30a2\u30eb\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\u5b8c\u4e86\u6642\u306e\u51e6\u7406\uff08LED\u306e\u70b9\u706f\u51e6\u7406\uff09\n    if(mode == 19){\n      int nl = sizeof(numbers) / sizeof(numbers[0]);\n\n      if(enables[0]) matrixes[0].clear();\n      if(enables[1]) matrixes[1].clear();\n      if(enables[2]) matrixes[2].clear();\n\n      int numberCount = 0;\n      for(int i = 0; i < nl; i++){\n        int n = numbers[i];\n        if(n > 0){\n          n -= 1;\n          int y = 0;\n          int x = 0;\n          \n          // \u9023\u756a\u3067\u6765\u305f\u6570\u5024\u3092x,y\u5ea7\u6a19\u306b\u623b\u3059\n          if(n < LED_SIZE){\n            y = floor(n / 8);\n            x = n - (floor(n / 8) * 8);\n            if(enables[0]) matrixes[0].drawPixel(x, y, LED_ON);\n          }\n          else if(n < LED_SIZE * 2){\n            n -= LED_SIZE;\n            y = floor(n / 8);\n            x = n - (floor(n / 8) * 8);\n            if(enables[1]) matrixes[1].drawPixel(x, y, LED_ON);\n          }\n          else if(n < LED_SIZE * 3){\n            n -= LED_SIZE * 2;\n            y = floor(n / 8);\n            x = n - (floor(n / 8) * 8);\n            if(enables[2]) matrixes[2].drawPixel(x, y, LED_ON);\n          }\n          numberCount++;\n        }\n      }\n\n      if(numberCount > 0){\n      }\n      \n      // LED\u3092\u70b9\u706f\n      if(enables[0]) matrixes[0].writeDisplay();\n      if(enables[1]) matrixes[1].writeDisplay();\n      if(enables[2]) matrixes[2].writeDisplay();\n    }\n\n  }\n}\n```\n\n\u3053\u306e\u30bd\u30fc\u30b9\u3092Arduino\u306b\u66f8\u304d\u8fbc\u3093\u3060\u5f8c\u3001HT16K33\u306eBreakout\u306a\u3069\u306b\u63a5\u7d9a\u3057\u307e\u3059\u3002\n\u305d\u3057\u3066openFrameworks\u5074\u3067\u306f\u3001\u30b7\u30ea\u30a2\u30eb\u306b\u63a5\u7d9a\u3057\u305f\u5f8c\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306a\u30eb\u30fc\u30eb\u3067\u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u306b\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002\n\n\"H\" \uff0b\uff08\u5de6\u4e0a\u304b\u3089\u306eLED\u306e\u9023\u756a\uff09... \u7e70\u308a\u8fd4\u3057... \"\\0\"\n\n```cpp:openFrameworks\nvoid ofApp::updateSerial(){\n  string writerSerial += \"H1H200H37H184/0\";\n  unsigned char* writeByte = (unsigned char*) writerSerial.c_str();\n  int result = serial.writeBytes(writeByte, writerSerial.length() + 1);\n}\n```\n\n\u3053\u308c\u304c\u30b7\u30ea\u30a2\u30eb\u3067\u306e\u9001\u4fe1\u306e\u57fa\u672c\u3067\u3001\u3053\u308c\u3092\u3082\u3046\u3059\u3053\u3057\u4f7f\u3048\u308b\u611f\u3058\u306b\u3057\u305f\u3082\u306e\u306f\u3053\u3061\u3089\u3067\u3059\u3002\nhttps://github.com/hisahayashi/ofxHT16K33\n\n\n# \u52d5\u4f5c\u30b5\u30f3\u30d7\u30eb\n![\u3053\u3093\u306a\u611f\u3058](https://i.gyazo.com/cad0cd9833966bf75c46a3e4c44a4df3.gif)\n\u203b openFrameworks\u5074\u306e\u9ed2\u3044\u4e38\u3068LED\u306e\u70b9\u706f\u304c\u9023\u52d5\u3057\u3066\u3044\u307e\u3059\n"}