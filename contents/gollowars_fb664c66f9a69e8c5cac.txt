{"context": "\n\nOutline\n\n\u74b0\u5883\u3065\u304f\u308a\n\u753b\u50cf\u751f\u6210\n\u753b\u50cf\u8aad\u307f\u8fbc\u307f\n\u753b\u50cf\u306e\u8272\u306e\u5e73\u5747\u5024\u51fa\u3059\n\u753b\u7d20\u3092\u3044\u3058\u308b\n\u30c8\u30ea\u30df\u30f3\u30b0\n\u30ea\u30b5\u30a4\u30ba\n\u52a0\u7b97\n\u30a2\u30d5\u30a3\u30f3\u5909\u63db\n\u53cd\u8ee2\n\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5909\u63db\n\u63cf\u753b\u95a2\u6570\u306eCircle\u3092\u4f7f\u3046\u3002\n\u8272\u306e\u62bd\u51fa\n\u30ab\u30e9\u30fc\u30c1\u30a7\u30f3\u30cd\u30eb\u5165\u308c\u66ff\u3048\nalpha\u30c1\u30e3\u30f3\u30cd\u30eb\u306e\u64cd\u4f5c \u203b\u9014\u4e2d\n\n\n\u74b0\u5883\u3065\u304f\u308a\n\u306f\u3044\u3055\u3066\u3002\u753b\u50cf\u51e6\u7406\u307e\u3068\u3082\u306b\u52c9\u5f37\u305b\u3093\u3068\u306a\u3002\u3002\uff01\u305d\u3093\u306a\u3089openCV\u3060\u308d\uff01\u3068\u601d\u3063\u305f\u3068\u3053\u308d\u3067\u3001\nopenCV\u3092\u3044\u3058\u308b\u74b0\u5883\u3092\u6574\u3048\u308b\u306e\u304c\u4e00\u82e6\u52b4\u306a\u306e\u3067\u3059\u3002\u666e\u901a\u306e\u4eba\u306f\u3002\n\u3068\u308a\u3042\u3048\u305apython\u3067\u3044\u3058\u308d\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u69cb\u6210\u306f\n\npyenv-virtualenv\nanaconda\nopencv\n\n\uff08Mac OSX Yosemite 10.10.5,Python 2.7.11,opencv 2.4.12\uff09   \n\u3067\u3059\u3002\u4eca\u6642\u3058\u3083\u306a\u3044\u306e\u304c\u6094\u3057\u3044\u304c\u3002\u3002\npython2.7\u3067opencv2\u3067\u66f8\u304b\u308c\u3066\u308b\u60c5\u5831\u304c\u591a\u3044\u304b\u3089\u3068\u308a\u3042\u3048\u305a\u306e\u52c9\u5f37\u306f\u3053\u308c\u3067\u3088\u3044\u304b\u3082\u3002\n\u50d5\u306e\u5834\u5408pyenv-virtualenv\u306fhomebrew\u3067\u6614\u5165\u308c\u3066\u307e\u3057\u305f\u3002\u5225\u306b\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u3068\u304b\u3044\u3089\u306d\u3048\u3088\u3063\u3066\u65b9\u306f\u3054\u3081\u3093\u306a\u3055\u3044\u3002\nMac\u306eHomebrew\u3067pyenv-virtualenv\u74b0\u5883\u3092\u4f5c\u308b\n\u305f\u3076\u3093\u3053\u306e\u3078\u3093\u53c2\u8003\u306b\u3057\u305f\u3089\u3067\u304d\u307e\u3059\u3002\npyenv\u306e\u74b0\u5883\u304c\u3067\u304d\u305f\u3089\n\u52c9\u5f37\u3057\u305f\u3044\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u79fb\u52d5\ncd ~/study/st_opencv/\n\npyenv install anaconda-2.1.0\npyenv local anaconda-2.1.0\npyenv rehash\n\n~~\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5f8c\u306b\nconda install -c https://conda.binstar.org/jjhelmus opencv\n\n\u3069\u308a\u3083\u3002\u3053\u308c\u3067opencv\u3044\u3058\u308c\u307e\u3059\u3002\u7c21\u5358\u3059\u304e\n\u3042\u308a\u304c\u3068\u3046\u3053\u3053 \npython\u3067OpenCV\u3092\u4f7f\u3046\u4e00\u756a\u7c21\u5358\u306a\u65b9\u6cd5\n\n\u753b\u50cf\u751f\u6210\nimport numpy as np\nimport cv2\n\nr = 0\ng = 0\nb = 255\n\nwidth = 480\nheight = 360\npixel = np.array([b,g,r],np.uint8)\nwGrid = np.array([pixel]*width,np.uint8)\nnewImg = np.array([wGrid]*height,np.uint8)\n\ncv2.imshow('generate img',newImg)\ncv2.imwrite('createimg.png',newImg)\ncv2.waitKey(0)\n\n\n\n\n\u753b\u50cf\u8aad\u307f\u8fbc\u307f\n# -*- coding: utf-8 -*-\nimport cv2, matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimg = cv2.imread('sample.png')\n\ncv2.imshow('result',img)\ncv2.waitKey(0)\n\n\n\n\u753b\u50cf\u306e\u8272\u306e\u5e73\u5747\u5024\u51fa\u3059\n# -*- coding: utf-8 -*-\nimport cv2, matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimg = cv2.imread('sample.png')\n\naverage_color_per_row = np.average(img, axis=0)\naverage_color = np.average(average_color_per_row, axis=0)\naverage_color = np.uint8(average_color)\naverage_color_img = np.array([[average_color]*500]*500, np.uint8)\n\n\ncv2.imshow('average',average_color_img)\ncv2.imwrite('avarage.png',average_color_img)\ncv2.waitKey(0)\n\n\n\n\u753b\u7d20\u3092\u3044\u3058\u308b\n# -*- coding: utf-8 -*-\nimport cv2, matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n###\n# \u753b\u7d20\u3078\u306e\u30a2\u30af\u30bb\u30b9\n###\n\ncols = 640\nrows = 480\n\n#\u30a4\u30e1\u30fc\u30b8\u751f\u6210\nimage = cv2.imread('sample.png')\n\n# print image\nprint image[0,1]\n\nwidth = image.shape[0]\nheight = image.shape[1]\namount = 2.0\n\n# pixel\u3054\u3068\u3044\u3058\u308b\u3002\nfor x in xrange(0,width):\n  for y in xrange(0,height):\n    pixel = image[x,y]\n    b = pixel[0]\n    g = pixel[1]\n    r = pixel[2]\n\n    if x < width/2 and y < height/2:\n      color = np.array([b,g,r*amount],np.uint8)\n    elif x > width/2 and y < height/2:\n      color = np.array([b,g*amount,r],np.uint8)\n    elif x < width/2 and y > height/2:\n      color = np.array([b*amount,g,r],np.uint8)\n    else:\n      color = np.array([b*amount,g*amount,r*amount],np.uint8)\n\n    image[x,y] = color\n    # image[x,y] = color\n# image[0:150,0:110] = [0, 255, 128]\ncv2.imshow('image',image)\ncv2.imwrite('access_pixel.png',image)\n\ncv2.waitKey(0)\n\n\n\n\u30c8\u30ea\u30df\u30f3\u30b0\n# -*- coding: utf-8 -*-\nimport cv2, matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n###\n# \u753b\u7d20\u3078\u306e\u30a2\u30af\u30bb\u30b9\n###\n\n#\u30a4\u30e1\u30fc\u30b8\u751f\u6210\nimage = cv2.imread('sample.png')\n\nx = 200\ny = 180\nwidth = 150\nheight = 120\n\ndstImg = image[y:y+height,x:x+width]\n\ncv2.imshow('image',image)\ncv2.imshow('dst',dstImg)\n\ncv2.imwrite('trimming.png',dstImg)\ncv2.waitKey(0)\n\n\n\n\n\u30ea\u30b5\u30a4\u30ba\n# -*- coding: utf-8 -*-\nimport cv2, matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n###\n# \u753b\u7d20\u3078\u306e\u30a2\u30af\u30bb\u30b9\n###\n\n#\u30a4\u30e1\u30fc\u30b8\u751f\u6210\nimage = cv2.imread('sample.png')\n\nwidth = image.shape[0]\nheight = image.shape[1]\nresizeImg = cv2.resize(image,(height/2,width/2))\ncv2.imshow('original',image )\ncv2.imshow('resize',resizeImg)\ncv2.imwrite('resize.png',resizeImg)\ncv2.waitKey(0)\n\n\n\n\u52a0\u7b97\n# -*- coding: utf-8 -*-\nimport cv2, matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n###\n# \u753b\u7d20\u3078\u306e\u30a2\u30af\u30bb\u30b9\n###\n\n#\u30a4\u30e1\u30fc\u30b8\u751f\u6210\nsample1 = cv2.imread('addsample1.png')\nsample2 = cv2.imread('addsample2.png')\n\nwidth = 300\nheight = 300\n\naddImg = np.zeros((height,width,3),np.uint8)\n\nfor x in xrange(0,width):\n  for y in xrange(0,height):\n    addpixel = sample1[x,y] + sample2[x,y]\n    addImg[x,y] = addpixel\n\n\ncv2.imshow('add',addImg)\ncv2.imwrite('add.png',addImg)\ncv2.waitKey(0)\n\n\n\n\n\n\u30a2\u30d5\u30a3\u30f3\u5909\u63db\n# -*- coding: utf-8 -*-\nimport cv2\nimport numpy as np\n\nimg = cv2.imread('sample.png')\n\n# cv2.imshow('image',img)\n\nwidth = img.shape[1]\nheight = img.shape[0]\ncenter = tuple(np.array([width/2, height/2]))\nsize = tuple(np.array([width,height]))\n\n# \u56de\u8ee2\u8ef8\u3092\u6307\u5b9a\u3057\u306a\u3044afine\n# \u56de\u8ee2\u3055\u305b\u305f\u3044\u89d2\u5ea6\nrad = 45*np.pi/180\nmovX = 10\nmovY = 10\n\nmatrix = [\n  [np.cos(rad),-1*np.sin(rad),movX],\n  [np.sin(rad),np.cos(rad),movY]\n]\n\nafMat = np.float32(matrix)\n\n# \u56de\u8ee2\u8ef8\u3092\u6307\u5b9a\u3059\u308bafine\nangle = 45\nscale = 1.0\nrotMat = cv2.getRotationMatrix2D(center,angle,scale)\n\n# afnImg = cv2.warpAffine(img,afMat,size,flags=cv2.INTER_LINEAR)\nafnImg = cv2.warpAffine(img,rotMat,size,flags=cv2.INTER_CUBIC)\ncv2.imshow('affine image',afnImg)\ncv2.imwrite('affine.png',afnImg)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n\n\n\n\u53cd\u8ee2\n# -*- coding: utf-8 -*-\nimport cv2\nimport numpy as np\n\nimg = cv2.imread('sample.png')\nrimg = img.copy()\nfimg = img.copy()\nrimg = cv2.flip(img,1)\nfimg = cv2.flip(img,0)\n\ncv2.imshow('Original',img)\ncv2.imshow('Vertical',rimg)\ncv2.imshow('Horizontal',fimg)\n\ncv2.imwrite('flip-vertical.png',rimg)\ncv2.imwrite('flip-horizontal.png',fimg)\n\n\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n\n\u4e0a\u4e0b\u306b\u53cd\u8ee2\n \n\u5de6\u53f3\u306b\u53cd\u8ee2\n \n\n\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5909\u63db\n# -*- coding: utf-8 -*-\nimport cv2, matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimg = cv2.imread('sample.png')\n\ngray = cv2.cvtColor(img,cv2.COLOR_RGB2GRAY)\ncv2.imshow('result',gray)\ncv2.imwrite('grey.png',gray)\ncv2.waitKey(0)\n\n \n\n\u63cf\u753b\u95a2\u6570\u306eCircle\u3092\u4f7f\u3046\u3002\nimport cv2\nimport numpy as np\n\nimg = cv2.imread('sample.png')\nw = 400\nh = 300\n\nplane = np.zeros([300,500],np.uint8)\ncenter = tuple([plane.shape[1]/2,plane.shape[0]/2])\nradius = 100\ncolor = tuple([255,0,0])\nthickness = 2\ncv2.circle(plane,center,radius,color,thickness)\ncv2.imshow('plane',plane)\ncv2.imwrite('circle.png',plane)\ncv2.waitKey(0)\n\n \n\n\u8272\u306e\u62bd\u51fa\n# -*- coding: utf-8 -*-\nimport cv2\nimport numpy as np\noriginal = cv2.imread('sample.png', 1)\nimg = original.copy()\ndst = np.zeros(img.shape,np.uint8)\n\nhsv = cv2.cvtColor(img,cv2.COLOR_BGR2HSV)\n\ncolorRange = [0,10]\nthanSaturate = 0\nthanValue = 0\n\nfor x in xrange(0,img.shape[1]):\n  for y in xrange(0,img.shape[0]):\n    # HSV\n    if hsv[y,x][0] >= colorRange[0] and hsv[y,x][0] < colorRange[1] and hsv[y,x][1] > thanSaturate and hsv[y,x][2] > thanValue:\n      radius = 1\n      color = tuple([255,0,0])\n      thicness = 1\n      cv2.circle(img,tuple([x,y]),radius,color,thicness)\n\n      dst[y,x] = img[y,x]\n\ncv2.imshow('Original',original)\ncv2.imshow('Add',img)\ncv2.imshow('Diff',dst)\ncv2.imwrite('add.png',img)\ncv2.imwrite('diff.png',dst)\ncv2.waitKey(0)\n\n\nOriginal\n \n\nExtraction\n \n\nAdd\n \n\n\u30ab\u30e9\u30fc\u30c1\u30a7\u30f3\u30cd\u30eb\u5165\u308c\u66ff\u3048\nimport cv2\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\n\nimg = cv2.imread('sample.png')\nbgr = cv2.split(img)\n\nblue = bgr[0]\ngreen = bgr[1]\nred = bgr[2]\n\n# plt.add(blue)\n# plt.show(blue)\n\nchangeChannel = cv2.merge([red,green,blue])\n\ncv2.imshow('changeChannel',changeChannel)\ncv2.imwrite('changeChannel.png',changeChannel)\ncv2.waitKey(0)\n\n \n\nsource\u306f\u3053\u3061\u3089github\n\u52c9\u5f37\u3059\u308b\u3053\u3068\u7121\u9650\u306a\u306e\u3067\u305f\u3076\u3093\u7d9a\u7de8\u3042\u308a\u307e\u3059\u3002\n\u3042\u3068\u3044\u308d\u3093\u306a\u30b5\u30a4\u30c8\u53c2\u8003\u306b\u3057\u3066\u307e\u3059\u3002\u307f\u306a\u3055\u3093\u3042\u308a\u304c\u3068\u3046\u3067\u3059\u3002\n# Outline\n1. \u74b0\u5883\u3065\u304f\u308a\n- \u753b\u50cf\u751f\u6210\n- \u753b\u50cf\u8aad\u307f\u8fbc\u307f\n- \u753b\u50cf\u306e\u8272\u306e\u5e73\u5747\u5024\u51fa\u3059\n- \u753b\u7d20\u3092\u3044\u3058\u308b\n- \u30c8\u30ea\u30df\u30f3\u30b0\n- \u30ea\u30b5\u30a4\u30ba\n- \u52a0\u7b97\n- \u30a2\u30d5\u30a3\u30f3\u5909\u63db\n- \u53cd\u8ee2\n- \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5909\u63db\n- \u63cf\u753b\u95a2\u6570\u306eCircle\u3092\u4f7f\u3046\u3002\n- \u8272\u306e\u62bd\u51fa\n- \u30ab\u30e9\u30fc\u30c1\u30a7\u30f3\u30cd\u30eb\u5165\u308c\u66ff\u3048\n- alpha\u30c1\u30e3\u30f3\u30cd\u30eb\u306e\u64cd\u4f5c \u203b\u9014\u4e2d\n\n## \u74b0\u5883\u3065\u304f\u308a\n\u306f\u3044\u3055\u3066\u3002\u753b\u50cf\u51e6\u7406\u307e\u3068\u3082\u306b\u52c9\u5f37\u305b\u3093\u3068\u306a\u3002\u3002\uff01\u305d\u3093\u306a\u3089openCV\u3060\u308d\uff01\u3068\u601d\u3063\u305f\u3068\u3053\u308d\u3067\u3001\nopenCV\u3092\u3044\u3058\u308b\u74b0\u5883\u3092\u6574\u3048\u308b\u306e\u304c\u4e00\u82e6\u52b4\u306a\u306e\u3067\u3059\u3002\u666e\u901a\u306e\u4eba\u306f\u3002\n\u3068\u308a\u3042\u3048\u305apython\u3067\u3044\u3058\u308d\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u69cb\u6210\u306f\n\n - pyenv-virtualenv\n - anaconda\n - opencv\n\n\uff08Mac OSX Yosemite 10.10.5,Python 2.7.11,opencv 2.4.12\uff09   \n\n\u3067\u3059\u3002\u4eca\u6642\u3058\u3083\u306a\u3044\u306e\u304c\u6094\u3057\u3044\u304c\u3002\u3002\npython2.7\u3067opencv2\u3067\u66f8\u304b\u308c\u3066\u308b\u60c5\u5831\u304c\u591a\u3044\u304b\u3089\u3068\u308a\u3042\u3048\u305a\u306e\u52c9\u5f37\u306f\u3053\u308c\u3067\u3088\u3044\u304b\u3082\u3002\n\u50d5\u306e\u5834\u5408pyenv-virtualenv\u306fhomebrew\u3067\u6614\u5165\u308c\u3066\u307e\u3057\u305f\u3002\u5225\u306b\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u3068\u304b\u3044\u3089\u306d\u3048\u3088\u3063\u3066\u65b9\u306f\u3054\u3081\u3093\u306a\u3055\u3044\u3002\n[Mac\u306eHomebrew\u3067pyenv-virtualenv\u74b0\u5883\u3092\u4f5c\u308b](http://qiita.com/jjongs08/items/521eddea150795749711)\n\u305f\u3076\u3093\u3053\u306e\u3078\u3093\u53c2\u8003\u306b\u3057\u305f\u3089\u3067\u304d\u307e\u3059\u3002\n\npyenv\u306e\u74b0\u5883\u304c\u3067\u304d\u305f\u3089\n\u52c9\u5f37\u3057\u305f\u3044\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u79fb\u52d5\n\n```shell\ncd ~/study/st_opencv/\n\npyenv install anaconda-2.1.0\npyenv local anaconda-2.1.0\npyenv rehash\n\n~~\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5f8c\u306b\nconda install -c https://conda.binstar.org/jjhelmus opencv\n```\n\u3069\u308a\u3083\u3002\u3053\u308c\u3067opencv\u3044\u3058\u308c\u307e\u3059\u3002\u7c21\u5358\u3059\u304e\n\u3042\u308a\u304c\u3068\u3046\u3053\u3053 \n[python\u3067OpenCV\u3092\u4f7f\u3046\u4e00\u756a\u7c21\u5358\u306a\u65b9\u6cd5](http://qiita.com/ru_pe129/items/8a1a75cdf713d4fa6bc8)\n\n\n## \u753b\u50cf\u751f\u6210\n```python\nimport numpy as np\nimport cv2\n\nr = 0\ng = 0\nb = 255\n\nwidth = 480\nheight = 360\npixel = np.array([b,g,r],np.uint8)\nwGrid = np.array([pixel]*width,np.uint8)\nnewImg = np.array([wGrid]*height,np.uint8)\n\ncv2.imshow('generate img',newImg)\ncv2.imwrite('createimg.png',newImg)\ncv2.waitKey(0)\n\n```\n![\u753b\u50cf](https://raw.githubusercontent.com/gollowars/study-OpenCV/master/01_study/00_createImg/createimg.png)\n\n## \u753b\u50cf\u8aad\u307f\u8fbc\u307f\n\n```python\n# -*- coding: utf-8 -*-\nimport cv2, matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimg = cv2.imread('sample.png')\n\ncv2.imshow('result',img)\ncv2.waitKey(0)\n```\n![\u753b\u50cf](https://raw.githubusercontent.com/gollowars/study-OpenCV/master/01_study/01_readshow/sample.png)\n\n\n## \u753b\u50cf\u306e\u8272\u306e\u5e73\u5747\u5024\u51fa\u3059\n```python\n# -*- coding: utf-8 -*-\nimport cv2, matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimg = cv2.imread('sample.png')\n\naverage_color_per_row = np.average(img, axis=0)\naverage_color = np.average(average_color_per_row, axis=0)\naverage_color = np.uint8(average_color)\naverage_color_img = np.array([[average_color]*500]*500, np.uint8)\n\n\ncv2.imshow('average',average_color_img)\ncv2.imwrite('avarage.png',average_color_img)\ncv2.waitKey(0)\n```\n![\u753b\u50cf](https://raw.githubusercontent.com/gollowars/study-OpenCV/master/01_study/02_average/avarage.png)\n\n\n## \u753b\u7d20\u3092\u3044\u3058\u308b\n```python\n# -*- coding: utf-8 -*-\nimport cv2, matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n###\n# \u753b\u7d20\u3078\u306e\u30a2\u30af\u30bb\u30b9\n###\n\ncols = 640\nrows = 480\n\n#\u30a4\u30e1\u30fc\u30b8\u751f\u6210\nimage = cv2.imread('sample.png')\n\n# print image\nprint image[0,1]\n\nwidth = image.shape[0]\nheight = image.shape[1]\namount = 2.0\n\n# pixel\u3054\u3068\u3044\u3058\u308b\u3002\nfor x in xrange(0,width):\n  for y in xrange(0,height):\n    pixel = image[x,y]\n    b = pixel[0]\n    g = pixel[1]\n    r = pixel[2]\n\n    if x < width/2 and y < height/2:\n      color = np.array([b,g,r*amount],np.uint8)\n    elif x > width/2 and y < height/2:\n      color = np.array([b,g*amount,r],np.uint8)\n    elif x < width/2 and y > height/2:\n      color = np.array([b*amount,g,r],np.uint8)\n    else:\n      color = np.array([b*amount,g*amount,r*amount],np.uint8)\n\n    image[x,y] = color\n    # image[x,y] = color\n# image[0:150,0:110] = [0, 255, 128]\ncv2.imshow('image',image)\ncv2.imwrite('access_pixel.png',image)\n\ncv2.waitKey(0)\n```\n![\u753b\u50cf](https://raw.githubusercontent.com/gollowars/study-OpenCV/master/01_study/03_access_pixel/access_pixel.png)\n\n## \u30c8\u30ea\u30df\u30f3\u30b0\n```python\n# -*- coding: utf-8 -*-\nimport cv2, matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n###\n# \u753b\u7d20\u3078\u306e\u30a2\u30af\u30bb\u30b9\n###\n\n#\u30a4\u30e1\u30fc\u30b8\u751f\u6210\nimage = cv2.imread('sample.png')\n\nx = 200\ny = 180\nwidth = 150\nheight = 120\n\ndstImg = image[y:y+height,x:x+width]\n\ncv2.imshow('image',image)\ncv2.imshow('dst',dstImg)\n\ncv2.imwrite('trimming.png',dstImg)\ncv2.waitKey(0)\n\n```\n![\u753b\u50cf](https://raw.githubusercontent.com/gollowars/study-OpenCV/master/01_study/04_trimming/trimming.png)\n\n## \u30ea\u30b5\u30a4\u30ba\n```python\n# -*- coding: utf-8 -*-\nimport cv2, matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n###\n# \u753b\u7d20\u3078\u306e\u30a2\u30af\u30bb\u30b9\n###\n\n#\u30a4\u30e1\u30fc\u30b8\u751f\u6210\nimage = cv2.imread('sample.png')\n\nwidth = image.shape[0]\nheight = image.shape[1]\nresizeImg = cv2.resize(image,(height/2,width/2))\ncv2.imshow('original',image )\ncv2.imshow('resize',resizeImg)\ncv2.imwrite('resize.png',resizeImg)\ncv2.waitKey(0)\n```\n![\u753b\u50cf](https://raw.githubusercontent.com/gollowars/study-OpenCV/master/01_study/05_resize/resize.png)\n\n\n## \u52a0\u7b97\n```python\n# -*- coding: utf-8 -*-\nimport cv2, matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n###\n# \u753b\u7d20\u3078\u306e\u30a2\u30af\u30bb\u30b9\n###\n\n#\u30a4\u30e1\u30fc\u30b8\u751f\u6210\nsample1 = cv2.imread('addsample1.png')\nsample2 = cv2.imread('addsample2.png')\n\nwidth = 300\nheight = 300\n\naddImg = np.zeros((height,width,3),np.uint8)\n\nfor x in xrange(0,width):\n  for y in xrange(0,height):\n    addpixel = sample1[x,y] + sample2[x,y]\n    addImg[x,y] = addpixel\n\n\ncv2.imshow('add',addImg)\ncv2.imwrite('add.png',addImg)\ncv2.waitKey(0)\n```\n ![\u753b\u50cf](https://raw.githubusercontent.com/gollowars/study-OpenCV/master/01_study/06_add/addsample1.png)\n ![\u753b\u50cf](https://raw.githubusercontent.com/gollowars/study-OpenCV/master/01_study/06_add/addsample2.png)\n ![\u753b\u50cf](https://raw.githubusercontent.com/gollowars/study-OpenCV/master/01_study/06_add/add.png)\n\n\n## \u30a2\u30d5\u30a3\u30f3\u5909\u63db\n```python\n# -*- coding: utf-8 -*-\nimport cv2\nimport numpy as np\n\nimg = cv2.imread('sample.png')\n\n# cv2.imshow('image',img)\n\nwidth = img.shape[1]\nheight = img.shape[0]\ncenter = tuple(np.array([width/2, height/2]))\nsize = tuple(np.array([width,height]))\n\n# \u56de\u8ee2\u8ef8\u3092\u6307\u5b9a\u3057\u306a\u3044afine\n# \u56de\u8ee2\u3055\u305b\u305f\u3044\u89d2\u5ea6\nrad = 45*np.pi/180\nmovX = 10\nmovY = 10\n\nmatrix = [\n  [np.cos(rad),-1*np.sin(rad),movX],\n  [np.sin(rad),np.cos(rad),movY]\n]\n\nafMat = np.float32(matrix)\n\n# \u56de\u8ee2\u8ef8\u3092\u6307\u5b9a\u3059\u308bafine\nangle = 45\nscale = 1.0\nrotMat = cv2.getRotationMatrix2D(center,angle,scale)\n\n# afnImg = cv2.warpAffine(img,afMat,size,flags=cv2.INTER_LINEAR)\nafnImg = cv2.warpAffine(img,rotMat,size,flags=cv2.INTER_CUBIC)\ncv2.imshow('affine image',afnImg)\ncv2.imwrite('affine.png',afnImg)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n```\n![\u753b\u50cf](https://raw.githubusercontent.com/gollowars/study-OpenCV/master/01_study/07_affine/affine.png)\n\n\n## \u53cd\u8ee2\n```python\n# -*- coding: utf-8 -*-\nimport cv2\nimport numpy as np\n\nimg = cv2.imread('sample.png')\nrimg = img.copy()\nfimg = img.copy()\nrimg = cv2.flip(img,1)\nfimg = cv2.flip(img,0)\n\ncv2.imshow('Original',img)\ncv2.imshow('Vertical',rimg)\ncv2.imshow('Horizontal',fimg)\n\ncv2.imwrite('flip-vertical.png',rimg)\ncv2.imwrite('flip-horizontal.png',fimg)\n\n\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n```\n\u4e0a\u4e0b\u306b\u53cd\u8ee2   \n![\u753b\u50cf](https://raw.githubusercontent.com/gollowars/study-OpenCV/master/01_study/08_flip/flip-horizontal.png)   \n\n\n\u5de6\u53f3\u306b\u53cd\u8ee2   \n![\u753b\u50cf](https://raw.githubusercontent.com/gollowars/study-OpenCV/master/01_study/08_flip/flip-vertical.png)   \n\n\n## \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5909\u63db\n```python\n# -*- coding: utf-8 -*-\nimport cv2, matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimg = cv2.imread('sample.png')\n\ngray = cv2.cvtColor(img,cv2.COLOR_RGB2GRAY)\ncv2.imshow('result',gray)\ncv2.imwrite('grey.png',gray)\ncv2.waitKey(0)\n```\n![\u753b\u50cf](https://raw.githubusercontent.com/gollowars/study-OpenCV/master/01_study/09_grey/grey.png)   \n\n## \u63cf\u753b\u95a2\u6570\u306eCircle\u3092\u4f7f\u3046\u3002\n```python\nimport cv2\nimport numpy as np\n\nimg = cv2.imread('sample.png')\nw = 400\nh = 300\n\nplane = np.zeros([300,500],np.uint8)\ncenter = tuple([plane.shape[1]/2,plane.shape[0]/2])\nradius = 100\ncolor = tuple([255,0,0])\nthickness = 2\ncv2.circle(plane,center,radius,color,thickness)\ncv2.imshow('plane',plane)\ncv2.imwrite('circle.png',plane)\ncv2.waitKey(0)\n```\n![\u753b\u50cf](https://raw.githubusercontent.com/gollowars/study-OpenCV/master/01_study/10_circle/circle.png)   \n\n## \u8272\u306e\u62bd\u51fa\n```python\n# -*- coding: utf-8 -*-\nimport cv2\nimport numpy as np\noriginal = cv2.imread('sample.png', 1)\nimg = original.copy()\ndst = np.zeros(img.shape,np.uint8)\n\nhsv = cv2.cvtColor(img,cv2.COLOR_BGR2HSV)\n\ncolorRange = [0,10]\nthanSaturate = 0\nthanValue = 0\n\nfor x in xrange(0,img.shape[1]):\n  for y in xrange(0,img.shape[0]):\n    # HSV\n    if hsv[y,x][0] >= colorRange[0] and hsv[y,x][0] < colorRange[1] and hsv[y,x][1] > thanSaturate and hsv[y,x][2] > thanValue:\n      radius = 1\n      color = tuple([255,0,0])\n      thicness = 1\n      cv2.circle(img,tuple([x,y]),radius,color,thicness)\n\n      dst[y,x] = img[y,x]\n\ncv2.imshow('Original',original)\ncv2.imshow('Add',img)\ncv2.imshow('Diff',dst)\ncv2.imwrite('add.png',img)\ncv2.imwrite('diff.png',dst)\ncv2.waitKey(0)\n```\n#### Original\n![\u753b\u50cf](https://raw.githubusercontent.com/gollowars/study-OpenCV/master/01_study/11_color/sample.png)   \n#### Extraction\n![\u753b\u50cf](https://raw.githubusercontent.com/gollowars/study-OpenCV/master/01_study/11_color/diff.png)   \n#### Add\n![\u753b\u50cf](https://raw.githubusercontent.com/gollowars/study-OpenCV/master/01_study/11_color/add.png)   \n\n\n## \u30ab\u30e9\u30fc\u30c1\u30a7\u30f3\u30cd\u30eb\u5165\u308c\u66ff\u3048\n```python\nimport cv2\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\n\nimg = cv2.imread('sample.png')\nbgr = cv2.split(img)\n\nblue = bgr[0]\ngreen = bgr[1]\nred = bgr[2]\n\n# plt.add(blue)\n# plt.show(blue)\n\nchangeChannel = cv2.merge([red,green,blue])\n\ncv2.imshow('changeChannel',changeChannel)\ncv2.imwrite('changeChannel.png',changeChannel)\ncv2.waitKey(0)\n```\n![\u753b\u50cf](https://raw.githubusercontent.com/gollowars/study-OpenCV/master/01_study/12_channel/changeChannel.png)   \n\n\n<br/>\n\nsource\u306f\u3053\u3061\u3089[github](https://github.com/gollowars/study-OpenCV)     \n\u52c9\u5f37\u3059\u308b\u3053\u3068\u7121\u9650\u306a\u306e\u3067\u305f\u3076\u3093\u7d9a\u7de8\u3042\u308a\u307e\u3059\u3002   \n\u3042\u3068\u3044\u308d\u3093\u306a\u30b5\u30a4\u30c8\u53c2\u8003\u306b\u3057\u3066\u307e\u3059\u3002\u307f\u306a\u3055\u3093\u3042\u308a\u304c\u3068\u3046\u3067\u3059\u3002\n", "tags": ["Python", "\u753b\u50cf\u51e6\u7406", "OpenCV", "OpenCV-Python"]}