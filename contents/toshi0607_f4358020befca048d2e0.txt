{"context": "\n\n\u6982\u8981\n@hyuki \u5148\u751f\u8457\u306e\u300eJava\u3067\u5b66\u3076\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u5165\u9580\u300f\uff082004\u5e74\u3001SB Creative\uff09\u306e1\u7ae0\u305a\u3064\u3092\u30d9\u30fc\u30b9\u306b\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092C#\u3067\u7f6e\u304d\u63db\u3048\u306a\u304c\u3089\u52c9\u5f37\u3057\u3066\u3044\u304f\u8a18\u4e8b\u3067\u3059\u3002\n\u203b\u8457\u8005\u306e @hyuki \u5148\u751f\u306b\u306f\u9069\u5207\u306b\u66f8\u7c4d\u3078\u306e\u53c2\u7167\u3092\u5165\u308c\u308c\u3070\u554f\u984c\u306a\u3044\u65e8\u3054\u78ba\u8a8d\u3044\u305f\u3060\u3044\u3066\u3044\u307e\u3059\u3002\n\n\u672c\u984c\nPrototype\u30d1\u30bf\u30fc\u30f3\n\u7b2c6\u56de\u306fPrototype\u30d1\u30bf\u30fc\u30f3\u3067\u3059\u3002Prototype\u30d1\u30bf\u30fc\u30f3\u306f\u300c\u30af\u30e9\u30b9\u304b\u3089\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u306e\u3067\u306a\u304f\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304b\u3089\u5225\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u308a\u51fa\u3059\u300d\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u3067\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u65e9\u901f\u5177\u4f53\u7684\u306a\u4e8b\u4f8b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u300eJava\u3067\u5b66\u3076\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u5165\u9580\u300f\uff082004\u5e74\u3001SB Creative\uff09\u306b\u63b2\u8f09\u3055\u308c\u3066\u3044\u308b\u30b3\u30fc\u30c9\u3092C#\u3067\uff08\u5927\u4f53\uff09\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n\n// \u30b3\u30f3\u30bd\u30fc\u30eb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u5b9f\u884c\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace PrototypePattern\n{\n    using Framework;\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Manager manager = new Manager();\n            UnderlinePen upen = new UnderlinePen('~');\n            MessageBox mbox = new MessageBox('*');\n            MessageBox sbox = new MessageBox('/');\n            manager.Register(\"strong message\", upen);\n            manager.Register(\"warning box\", mbox);\n            manager.Register(\"slash box\", sbox);\n\n            Product p1 = manager.Create(\"strong message\");\n            p1.Use(\"Hello, world\");\n            Product p2 = manager.Create(\"warning box\");\n            p2.Use(\"Hello, world\");\n            Product p3 = manager.Create(\"slash box\");\n            p3.Use(\"Hello, world\");\n            // =>\n            //             \"Hello, world\"\n            //              ~~~~~~~~~~~~\n            //             ****************\n            //             *Hello, world *\n            //             ****************\n            //             ////////////////\n            //             / Hello, world /\n            //             ////////////////\n\n            // \u5b9f\u884c\u304c\u4e00\u77ac\u3067\u7d42\u308f\u3063\u3066\u78ba\u8a8d\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u30ad\u30fc\u306e\u5165\u529b\u3092\u5f85\u3061\u307e\u3059\n            Console.ReadLine();\n        }\n    }\n\n    // ConcretePrototype\n    public class MessageBox : Product\n    {\n        private char decochar;\n        public MessageBox(char decochar)\n        {\n            this.decochar = decochar;\n        }\n        public void Use(string s)\n        {\n            Encoding sjisEnc = Encoding.GetEncoding(\"Shift_JIS\");\n            int length  = sjisEnc.GetByteCount(s);\n            for (int i = 0; i < length + 4; i++)\n            {\n                Console.Write(decochar);\n            }\n            Console.WriteLine(\"\");\n            Console.WriteLine($\"{decochar} {s} {decochar}\");\n            for (int i = 0; i < length + 4; i++)\n            {\n                Console.Write(decochar);\n            }\n            Console.WriteLine(\"\");\n        }\n        public object Clone()\n        {\n            return this.MemberwiseClone();\n        }\n        public Product CreateClone()\n        {\n            return (Product)this.Clone();\n        }\n    }\n\n    // ConcretePrototype\n    public class UnderlinePen : Product\n    {\n        private char ulchar;\n        public UnderlinePen(char ulchar)\n        {\n            this.ulchar = ulchar;\n        }\n        public void Use(string s)\n        {\n            Encoding sjisEnc = Encoding.GetEncoding(\"Shift_JIS\");\n            int length = sjisEnc.GetByteCount(s);\n            Console.WriteLine($\"\\\"{s}\\\"\");\n            Console.Write(\" \");\n            for (int i = 0; i < length; i++)\n            {\n                Console.Write(ulchar);\n            }\n            Console.WriteLine(\"\");\n        }\n        public object Clone()\n        {\n            return this.MemberwiseClone();\n        }\n        public Product CreateClone()\n        {\n            return (Product)this.Clone();\n        }\n    }\n}\n\nnamespace Framework\n{\n    // Prototype\n    public interface Product : ICloneable\n    {\n        void Use(string s);\n        Product CreateClone();\n    }\n\n    // Client\n    public class Manager\n    {\n        private Dictionary<string, Product> showcase = new Dictionary<string, Product>();\n        public void Register(string name, Product proto)\n        {\n            showcase.Add(name, proto);\n        }\n        public Product Create(string protoname)\n        {\n            Product p = showcase[protoname];\n            return p.CreateClone();\n        }\n    }\n}\n\n\n\n\u52b9\u80fd\n\u6b21\u306e\u3088\u3046\u306a\u5834\u5408\u306b\u6709\u52b9\u3068\u306e\u3053\u3068\u3067\u3059\u3002\n\n\u7a2e\u985e\u304c\u591a\u3059\u304e\u3066\u30af\u30e9\u30b9\u306b\u307e\u3068\u3081\u3089\u308c\u306a\u3044\u5834\u5408\n\n\n\u30b5\u30f3\u30d7\u30eb\u3060\u3068showcase\u306b\u767b\u9332\u3057\u305f\u306e\u306f3\u30d1\u30bf\u30fc\u30f3\u3067\u3059\u304c\u3001\u3082\u3063\u3068\u5897\u3048\u308b\u3088\u3046\u306a\u4f7f\u3044\u65b9\u3092\u3059\u308b\u3068\u304d\u3001\u305d\u306e\u30af\u30e9\u30b9\u3092\u5168\u90e8\u4f5c\u308b\u3068\u7ba1\u7406\u5927\u5909...\u3068\u3044\u3046\u304a\u8a71\u3067\u3059\u3002\n\n\n\n\u30af\u30e9\u30b9\u304b\u3089\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u304c\u96e3\u3057\u3044\u5834\u5408\n\n\n\u3068\u3066\u3082\u3068\u3066\u3082\u8907\u96d1\u306a\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u540c\u3058\u3082\u306e\u3092\u4f5c\u308b\u3068\u304d\u3001\u3068\u3044\u3063\u3066\u3082\u306a\u304b\u306a\u304b\u5b9f\u611f\u306a\u3044\u3067\u3059\u304c\u305d\u3046\u3044\u3046\u5c40\u9762\u304c\u3042\u308b\u305d\u3046\u3067\u3059\u3002\n\n\n\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3068\u751f\u6210\u3059\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u5206\u3051\u305f\u3044\u5834\u5408\n\n\n\u30af\u30e9\u30b9\u540d\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u306a\u3044\u3053\u3068\u3067\u3001\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\uff08\u30b5\u30f3\u30d7\u30eb\u3067\u8a00\u3046Framework\uff09\u3092\u30af\u30e9\u30b9\u306b\u7e1b\u3089\u308c\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\n\n\n\u4f7f\u7528\u4e0a\u306e\u6ce8\u610f\n\n\u3053\u306e\u30d1\u30bf\u30fc\u30f3\u3068\u3044\u3046\u3088\u308a\u3001\u30b3\u30d4\u30fc\u3059\u308b\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u3069\u3046\u3044\u3046\u610f\u5473\u5408\u3044\u306e\u30b3\u30d4\u30fc\u304b\uff08shallow copy or deep copy\uff09\u3092\u628a\u63e1\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u3067\u4f7f\u7528\u3057\u3066\u3044\u308bMemberwiseClone()\u306fshallow copy\u3092\u884c\u3046\u3082\u306e\u3067\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u53c2\u7167\u578b\u3060\u3068\u53c2\u7167\u304c\u30b3\u30d4\u30fc\u3055\u308c\u3066\u3082\u4e2d\u8eab\u305d\u306e\u3082\u306e\u306f\u30b3\u30d4\u30fc\u3055\u308c\u307e\u305b\u3093\u3002\n\n\n\u95a2\u9023\u3057\u3066\u3044\u308b\u30d1\u30bf\u30fc\u30f3\n\nFlyweight\u30d1\u30bf\u30fc\u30f3\nMemento\u30d1\u30bf\u30fc\u30f3\nComposite\u30d1\u30bf\u30fc\u30f3\u304a\u3088\u3073Decorator\u30d1\u30bf\u30fc\u30f3\nCommand\u30d1\u30bf\u30fc\u30f3\n\n\n\u611f\u60f3\u3084\u7591\u554f\n\nnew\u3059\u308b\u306e\u304c\u9762\u5012\u306a\u30af\u30e9\u30b9\u3001\u5b9f\u969b\u3069\u3093\u306a\u3093\u3084\u308d\u3046...\n\u8abf\u3079\u3066\u308b\u3068IClonable\u306f\u30ec\u30ac\u30b7\u30fc\u3067\u975e\u63a8\u5968\u306a\u96f0\u56f2\u6c17\u304c\u3042\u308a\u307e\u3057\u305f\u3002\u30b3\u30d4\u30fc\u3092\u5b9f\u73fe\u3059\u308b\u5b9f\u88c5\u306f\u3051\u3063\u3053\u3046\u3044\u308d\u3044\u308d\u3042\u308a\u305d\u3046\u3067\u3059\u3002\n\n\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u8907\u88fd\nDeep cloning objects\n\n\n\u30b5\u30f3\u30d7\u30eb\u306eshowcase\u306e\u578b\u306fC#\u306a\u306e\u3067Dictionary<T>\u306b\u3057\u307e\u3057\u305f\u304c\u3001\u5143\u306fHashMap\u3067\u3057\u305f\u3002\n\n\n\nC# Java HashMap equivalent \n\n\n\n\nC#\u3067\u5b66\u3076\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u5165\u9580\n\u2460Iterator\n\u2461Adapter\n\u2462Template Method\n\u2463Factory Method\n\u2464Singleton\n\u2465Prototype\n\u2466Builder\n\u2467AbstractFactory\n\u2468Bridge\n\u2469Strategy\n\u246aComposite Pattern\n\u246bDecorator Pattern\n## \u6982\u8981\n@hyuki \u5148\u751f\u8457\u306e[\u300eJava\u3067\u5b66\u3076\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u5165\u9580\u300f\uff082004\u5e74\u3001SB Creative\uff09](http://www.hyuki.com/dp/)\u306e1\u7ae0\u305a\u3064\u3092\u30d9\u30fc\u30b9\u306b\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092C#\u3067\u7f6e\u304d\u63db\u3048\u306a\u304c\u3089\u52c9\u5f37\u3057\u3066\u3044\u304f\u8a18\u4e8b\u3067\u3059\u3002\n\n\u203b\u8457\u8005\u306e @hyuki \u5148\u751f\u306b\u306f\u9069\u5207\u306b\u66f8\u7c4d\u3078\u306e\u53c2\u7167\u3092\u5165\u308c\u308c\u3070\u554f\u984c\u306a\u3044\u65e8\u3054\u78ba\u8a8d\u3044\u305f\u3060\u3044\u3066\u3044\u307e\u3059\u3002\n\n\n## \u672c\u984c\n<b>Prototype\u30d1\u30bf\u30fc\u30f3</b>\n\u7b2c6\u56de\u306fPrototype\u30d1\u30bf\u30fc\u30f3\u3067\u3059\u3002Prototype\u30d1\u30bf\u30fc\u30f3\u306f\u300c\u30af\u30e9\u30b9\u304b\u3089\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u306e\u3067\u306a\u304f\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304b\u3089\u5225\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u308a\u51fa\u3059\u300d\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u3067\u3059\u3002\n\n### \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u65e9\u901f\u5177\u4f53\u7684\u306a\u4e8b\u4f8b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002[\u300eJava\u3067\u5b66\u3076\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u5165\u9580\u300f\uff082004\u5e74\u3001SB Creative\uff09](http://www.hyuki.com/dp/)\u306b\u63b2\u8f09\u3055\u308c\u3066\u3044\u308b\u30b3\u30fc\u30c9\u3092C#\u3067\uff08\u5927\u4f53\uff09\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n\n```C#\n\n// \u30b3\u30f3\u30bd\u30fc\u30eb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u5b9f\u884c\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace PrototypePattern\n{\n    using Framework;\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Manager manager = new Manager();\n            UnderlinePen upen = new UnderlinePen('~');\n            MessageBox mbox = new MessageBox('*');\n            MessageBox sbox = new MessageBox('/');\n            manager.Register(\"strong message\", upen);\n            manager.Register(\"warning box\", mbox);\n            manager.Register(\"slash box\", sbox);\n\n            Product p1 = manager.Create(\"strong message\");\n            p1.Use(\"Hello, world\");\n            Product p2 = manager.Create(\"warning box\");\n            p2.Use(\"Hello, world\");\n            Product p3 = manager.Create(\"slash box\");\n            p3.Use(\"Hello, world\");\n            // =>\n            //             \"Hello, world\"\n            //              ~~~~~~~~~~~~\n            //             ****************\n            //             *Hello, world *\n            //             ****************\n            //             ////////////////\n            //             / Hello, world /\n            //             ////////////////\n\n            // \u5b9f\u884c\u304c\u4e00\u77ac\u3067\u7d42\u308f\u3063\u3066\u78ba\u8a8d\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u30ad\u30fc\u306e\u5165\u529b\u3092\u5f85\u3061\u307e\u3059\n            Console.ReadLine();\n        }\n    }\n\n    // ConcretePrototype\n    public class MessageBox : Product\n    {\n        private char decochar;\n        public MessageBox(char decochar)\n        {\n            this.decochar = decochar;\n        }\n        public void Use(string s)\n        {\n            Encoding sjisEnc = Encoding.GetEncoding(\"Shift_JIS\");\n            int length  = sjisEnc.GetByteCount(s);\n            for (int i = 0; i < length + 4; i++)\n            {\n                Console.Write(decochar);\n            }\n            Console.WriteLine(\"\");\n            Console.WriteLine($\"{decochar} {s} {decochar}\");\n            for (int i = 0; i < length + 4; i++)\n            {\n                Console.Write(decochar);\n            }\n            Console.WriteLine(\"\");\n        }\n        public object Clone()\n        {\n            return this.MemberwiseClone();\n        }\n        public Product CreateClone()\n        {\n            return (Product)this.Clone();\n        }\n    }\n\n    // ConcretePrototype\n    public class UnderlinePen : Product\n    {\n        private char ulchar;\n        public UnderlinePen(char ulchar)\n        {\n            this.ulchar = ulchar;\n        }\n        public void Use(string s)\n        {\n            Encoding sjisEnc = Encoding.GetEncoding(\"Shift_JIS\");\n            int length = sjisEnc.GetByteCount(s);\n            Console.WriteLine($\"\\\"{s}\\\"\");\n            Console.Write(\" \");\n            for (int i = 0; i < length; i++)\n            {\n                Console.Write(ulchar);\n            }\n            Console.WriteLine(\"\");\n        }\n        public object Clone()\n        {\n            return this.MemberwiseClone();\n        }\n        public Product CreateClone()\n        {\n            return (Product)this.Clone();\n        }\n    }\n}\n\nnamespace Framework\n{\n    // Prototype\n    public interface Product : ICloneable\n    {\n        void Use(string s);\n        Product CreateClone();\n    }\n\n    // Client\n    public class Manager\n    {\n        private Dictionary<string, Product> showcase = new Dictionary<string, Product>();\n        public void Register(string name, Product proto)\n        {\n            showcase.Add(name, proto);\n        }\n        public Product Create(string protoname)\n        {\n            Product p = showcase[protoname];\n            return p.CreateClone();\n        }\n    }\n}\n\n```\n\n### \u52b9\u80fd\n\u6b21\u306e\u3088\u3046\u306a\u5834\u5408\u306b\u6709\u52b9\u3068\u306e\u3053\u3068\u3067\u3059\u3002\n\n1. \u7a2e\u985e\u304c\u591a\u3059\u304e\u3066\u30af\u30e9\u30b9\u306b\u307e\u3068\u3081\u3089\u308c\u306a\u3044\u5834\u5408\n * \u30b5\u30f3\u30d7\u30eb\u3060\u3068`showcase`\u306b\u767b\u9332\u3057\u305f\u306e\u306f3\u30d1\u30bf\u30fc\u30f3\u3067\u3059\u304c\u3001\u3082\u3063\u3068\u5897\u3048\u308b\u3088\u3046\u306a\u4f7f\u3044\u65b9\u3092\u3059\u308b\u3068\u304d\u3001\u305d\u306e\u30af\u30e9\u30b9\u3092\u5168\u90e8\u4f5c\u308b\u3068\u7ba1\u7406\u5927\u5909...\u3068\u3044\u3046\u304a\u8a71\u3067\u3059\u3002  \n2. \u30af\u30e9\u30b9\u304b\u3089\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u304c\u96e3\u3057\u3044\u5834\u5408\n * \u3068\u3066\u3082\u3068\u3066\u3082\u8907\u96d1\u306a\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u540c\u3058\u3082\u306e\u3092\u4f5c\u308b\u3068\u304d\u3001\u3068\u3044\u3063\u3066\u3082\u306a\u304b\u306a\u304b\u5b9f\u611f\u306a\u3044\u3067\u3059\u304c\u305d\u3046\u3044\u3046\u5c40\u9762\u304c\u3042\u308b\u305d\u3046\u3067\u3059\u3002\n3. \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3068\u751f\u6210\u3059\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u5206\u3051\u305f\u3044\u5834\u5408\n * \u30af\u30e9\u30b9\u540d\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u306a\u3044\u3053\u3068\u3067\u3001\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\uff08\u30b5\u30f3\u30d7\u30eb\u3067\u8a00\u3046Framework\uff09\u3092\u30af\u30e9\u30b9\u306b\u7e1b\u3089\u308c\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n### \u4f7f\u7528\u4e0a\u306e\u6ce8\u610f\n* \u3053\u306e\u30d1\u30bf\u30fc\u30f3\u3068\u3044\u3046\u3088\u308a\u3001\u30b3\u30d4\u30fc\u3059\u308b\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u3069\u3046\u3044\u3046\u610f\u5473\u5408\u3044\u306e\u30b3\u30d4\u30fc\u304b\uff08shallow copy or deep copy\uff09\u3092\u628a\u63e1\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u3067\u4f7f\u7528\u3057\u3066\u3044\u308b`MemberwiseClone()`\u306fshallow copy\u3092\u884c\u3046\u3082\u306e\u3067\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u53c2\u7167\u578b\u3060\u3068\u53c2\u7167\u304c\u30b3\u30d4\u30fc\u3055\u308c\u3066\u3082\u4e2d\u8eab\u305d\u306e\u3082\u306e\u306f\u30b3\u30d4\u30fc\u3055\u308c\u307e\u305b\u3093\u3002\n\n### \u95a2\u9023\u3057\u3066\u3044\u308b\u30d1\u30bf\u30fc\u30f3\n\n* Flyweight\u30d1\u30bf\u30fc\u30f3\n* Memento\u30d1\u30bf\u30fc\u30f3\n* Composite\u30d1\u30bf\u30fc\u30f3\u304a\u3088\u3073Decorator\u30d1\u30bf\u30fc\u30f3\n* Command\u30d1\u30bf\u30fc\u30f3\n\n### \u611f\u60f3\u3084\u7591\u554f\n* new\u3059\u308b\u306e\u304c\u9762\u5012\u306a\u30af\u30e9\u30b9\u3001\u5b9f\u969b\u3069\u3093\u306a\u3093\u3084\u308d\u3046...\n* \u8abf\u3079\u3066\u308b\u3068IClonable\u306f\u30ec\u30ac\u30b7\u30fc\u3067\u975e\u63a8\u5968\u306a\u96f0\u56f2\u6c17\u304c\u3042\u308a\u307e\u3057\u305f\u3002\u30b3\u30d4\u30fc\u3092\u5b9f\u73fe\u3059\u308b\u5b9f\u88c5\u306f\u3051\u3063\u3053\u3046\u3044\u308d\u3044\u308d\u3042\u308a\u305d\u3046\u3067\u3059\u3002\n * [\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u8907\u88fd](http://smdn.jp/programming/netfx/cloning/)\n * [Deep cloning objects](http://stackoverflow.com/questions/78536/deep-cloning-objects)\n* \u30b5\u30f3\u30d7\u30eb\u306eshowcase\u306e\u578b\u306fC#\u306a\u306e\u3067`Dictionary<T>`\u306b\u3057\u307e\u3057\u305f\u304c\u3001\u5143\u306fHashMap\u3067\u3057\u305f\u3002\n  * [C# Java HashMap equivalent](http://stackoverflow.com/questions/1273139/c-sharp-java-hashmap-equivalent) \n\n### C#\u3067\u5b66\u3076\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u5165\u9580\n[\u2460Iterator](http://qiita.com/toshi0607/items/cdc589c58f21c0fc513d)\n[\u2461Adapter](http://qiita.com/toshi0607/items/374373a8bd656f7188d4)\n[\u2462Template Method](http://qiita.com/toshi0607/items/cc8a87a3049bd7af52df)\n[\u2463Factory Method](http://qiita.com/toshi0607/items/d95bdd31da363e0f04a9)\n[\u2464Singleton](http://qiita.com/toshi0607/items/c172bb4478e72ae6ced7)\n[\u2465Prototype](http://qiita.com/toshi0607/items/f4358020befca048d2e0)\n[\u2466Builder](http://qiita.com/toshi0607/items/13e37d54e04b61bc69b5)\n[\u2467AbstractFactory](http://qiita.com/toshi0607/items/b8a19a4328849cdf1d99)\n[\u2468Bridge](http://qiita.com/toshi0607/items/580988e25f25fea9216e)\n[\u2469Strategy](http://qiita.com/toshi0607/items/72829d34ef9595f5b3b0)\n\u246aComposite Pattern\n[\u246bDecorator Pattern](http://qiita.com/toshi0607/items/a65d1abb95a97970ab8c)\n", "tags": ["C#", "\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3"]}