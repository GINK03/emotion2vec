{"tags": ["Java", "SSL\u8a3c\u660e\u66f8"], "context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nApache HttpComponents\u306b\u3088\u308a\u3001SSL\u901a\u4fe1\u3092\u884c\u3046\u969b\u306b\u306f\u5f53\u7136\u3067\u3059\u304c\u3001\u30db\u30b9\u30c8\u540d\u306e\u691c\u8a3c\u304c\u884c\u308f\u308c\u307e\u3059\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u4f8b\u3048\u3070https://google.com/\u306e\u4ee3\u308f\u308a\u306bhttps://216.58.220.227/\u306b\u63a5\u7d9a\u3057\u305f\u5834\u5408\u3001SSLException\u304c\u767a\u751f\u3057\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u74b0\u5883\u306e\u79fb\u884c\u6642\u7b49\u306b\u306fIP\u30a2\u30c9\u30ec\u30b9\u3067\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5fc5\u8981\u304c\u751f\u3058\u305f\u308a\u3059\u308b\u305f\u3081\u3001SSL\u8a3c\u660e\u66f8\u3092\u7121\u8996\u3059\u308b\u3053\u3068\u306a\u304f\u63a5\u7d9a\u3059\u308b\u65b9\u6cd5\u3092\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u7c21\u5358\u306b\n\u3053\u3053\u3067\u3001\u8a3c\u660e\u66f8\u306e\u30db\u30b9\u30c8\u540d\u3092\u7121\u8996\u3059\u308b\u3060\u3051\u3067\u3042\u308c\u3070\u3001SSLSocketFactory\u30af\u30e9\u30b9\u306esetHostnameVerifier\u30e1\u30bd\u30c3\u30c9\u306bALLOW_ALL_HOSTNAME_VERIFIER\u3092\u6e21\u305b\u3070\u3001\u4f8b\u5916\u306f\u751f\u3058\u306a\u304f\u306a\u308a\u307e\u3059\u3002\u6b21\u306bHttpClient\u306e\u751f\u6210\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\nHttpParams params = new BasicHttpParams();\nSchemeRegistry registry = new SchemeRegistry();\nregistry.register(new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\nSSLSocketFactory sslSocketFactory = SSLSocketFactory.getSocketFactory();\n// \u30db\u30b9\u30c8\u540d\u306e\u691c\u8a3c\u3092\u884c\u308f\u306a\u3044\u3002\nsslSocketFactory.setHostnameVerifier(ALLOW_ALL_HOSTNAME_VERIFIER);\nregistry.register(new Scheme(\"https\", sslSocketFactory, 443));\nThreadSafeClientConnManager clientConnManager = new ThreadSafeClientConnManager(params, registry);\nHttpClient httpClient = new DefaultHttpClient(clientConnManager , params);\n\n\n\u5b89\u5168\u306b\n\u524d\u8ff0\u306e\u65b9\u6cd5\u306b\u3088\u308b\u3068\u3001\u30db\u30b9\u30c8\u540d\u306e\u691c\u8a3c\u3092\u884c\u308f\u306a\u3044\u306e\u3067\u3001\u8a3c\u660e\u66f8\u304c\u30eb\u30fc\u30c8\u8a3c\u660e\u66f8\u304b\u3089\u6b63\u3057\u304f\u3064\u306a\u304c\u3063\u3066\u3044\u308c\u3070\u3001\u305d\u306e\u901a\u4fe1\u3092\u8a31\u53ef\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u3067\u3059\u304b\u3089\u3001\u5b9b\u5148\u30db\u30b9\u30c8\u4ee5\u5916\u306e\u4efb\u610f\u306e\u30c9\u30e1\u30a4\u30f3\u306b\u5c5e\u3059\u308bSSL\u8a3c\u660e\u66f8\u3092\u6301\u3063\u305f\u4eba\u9593\u3067\u3082\u3001\u901a\u4fe1\u3092\u508d\u53d7\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\n\u305d\u3053\u3067\u3001\u30db\u30b9\u30c8\u540d\u306e\u5909\u63db\u30c6\u30fc\u30d6\u30eb\u3092\u691c\u8a3c\u5668\u306b\u6301\u305f\u305b\u3001IP\u30a2\u30c9\u30ec\u30b9\u3067\u63a5\u7d9a\u3057\u305f\u3044\u30db\u30b9\u30c8\u3092\u5909\u63db\u30c6\u30fc\u30d6\u30eb\u306b\u767b\u9332\u3057\u3066\u304a\u304f\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u610f\u56f3\u3057\u305fSSL\u8a3c\u660e\u66f8\u3067\u306e\u307f\u3001\u30db\u30b9\u30c8\u540d\u306e\u554f\u984c\u3092\u7121\u8996\u3057\u3066\u901a\u4fe1\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u6b21\u306b\u3053\u306e\u5b9f\u88c5\u3092\u884c\u3063\u305f\u691c\u8a3c\u5668\u3001CustomHostnameVerifier\u30af\u30e9\u30b9\u3092\u793a\u3057\u307e\u3059\u3002\n\nCustomHostnameVerifier.java\npackage net.leak4mk0.util;\n\nimport org.apache.http.conn.ssl.BrowserCompatHostnameVerifier;\nimport org.apache.http.conn.ssl.X509HostnameVerifier;\n\nimport java.io.IOException;\nimport java.security.cert.X509Certificate;\nimport java.util.Map;\nimport javax.net.ssl.SSLException;\nimport javax.net.ssl.SSLSession;\nimport javax.net.ssl.SSLSocket;\n\npublic class CustomHostnameVerifier implements X509HostnameVerifier {\n    private BrowserCompatHostnameVerifier mHostnameVerifier;\n    private Map<String, String> mHostMap;\n\n    public CustomHostnameVerifier(Map<String, String> hostMap) {\n        mHostnameVerifier = new BrowserCompatHostnameVerifier();\n        mHostMap = hostMap;\n    }\n\n    @Override\n    public boolean verify(String host, SSLSession session) {\n        return mHostnameVerifier.verify(getCustomHost(host), session);\n    }\n\n    @Override\n    public void verify(String host, SSLSocket ssl) throws IOException {\n        mHostnameVerifier.verify(getCustomHost(host), ssl);\n    }\n\n    @Override\n    public void verify(String host, X509Certificate cert) throws SSLException {\n        mHostnameVerifier.verify(getCustomHost(host), cert);\n    }\n\n    @Override\n    public void verify(String host, String[] cns, String[] subjectAlts) throws SSLException {\n        mHostnameVerifier.verify(getCustomHost(host), cns, subjectAlts);\n    }\n\n    private String getCustomHost(String originalHost) {\n        if (!mHostMap.containsKey(originalHost)) {\n            return originalHost;\n        }\n\n        return mHostMap.get(originalHost);\n    }\n}\n\n\nX509HostnameVerifier\u3092\u5b9f\u88c5\u3057\u305fBrowserCompatHostnameVerifier\u30af\u30e9\u30b9\u3092\u5185\u90e8\u3067\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u7d99\u627f\u3059\u308b\u3064\u3082\u308a\u3067\u3057\u305f\u304c\u3001verify\u30e1\u30bd\u30c3\u30c9\u304cfinal\u3067\u3057\u305f\u306e\u3067\u3001\u3053\u306e\u3088\u3046\u306a\u5f62\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u30b3\u30fc\u30c9\u3092\u898b\u308c\u3070\u308f\u304b\u308b\u3053\u3068\u3067\u3059\u304c\u3001getCustomHost\u30e1\u30bd\u30c3\u30c9\u3067\u5909\u63db\u30c6\u30fc\u30d6\u30eb\u306b\u3042\u308c\u3070\u7f6e\u63db\u5f8c\u306e\u30db\u30b9\u30c8\u3092\u8fd4\u3057\u3001\u691c\u8a3c\u3092\u7d9a\u884c\u3057\u3066\u3044\u307e\u3059\u3002\n\u524d\u8ff0\u306esetHostnameVerifier\u30e1\u30bd\u30c3\u30c9\u3067\u5909\u63db\u30c6\u30fc\u30d6\u30eb\u3092\u6301\u3063\u305fCustomHostnameVerifier\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u6e21\u305b\u3070\u3001\u691c\u8a3c\u5668\u3092\u5909\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nMap<String, String> HOST_MAP =\n        new HashMap<String, String>() {{\n            put(\"216.58.220.227\", \"google.com\");\n        }};\n\nHttpParams params = new BasicHttpParams();\nSchemeRegistry registry = new SchemeRegistry();\nregistry.register(new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\nSSLSocketFactory sslSocketFactory = SSLSocketFactory.getSocketFactory();\n// \u30db\u30b9\u30c8\u540d\u306e\u5909\u63db\u30c6\u30fc\u30d6\u30eb\u3092\u6301\u3063\u305f\u691c\u8a3c\u5668\u3092\u5229\u7528\u3059\u308b\u3002\nsslSocketFactory.setHostnameVerifier(new CustomHostnameVerifier(HOST_MAP));\nregistry.register(new Scheme(\"https\", sslSocketFactory, 443));\nThreadSafeClientConnManager clientConnManager = new ThreadSafeClientConnManager(params, registry);\nHttpClient httpClient = new DefaultHttpClient(clientConnManager , params);\n\n\n\u3055\u3044\u3054\u306b\n\u79c1\u306f\u3001\u3053\u306e\u65b9\u6cd5\u3067\u5b89\u5168\u6027\u3092\u78ba\u4fdd\u3057\u305f\u307e\u307e\u3001\u30b5\u30fc\u30d0\u30fc\u79fb\u884c\u6642\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\u3053\u306e\u8a18\u4e8b\u3067\u793a\u3057\u305f\u30b3\u30fc\u30c9\u306f\u3054\u81ea\u7531\u306b\u4f7f\u3063\u3066\u3044\u305f\u3060\u3044\u3066\u5927\u4e08\u592b\u3067\u3059\u3002\u305f\u3060\u3057\u3001\u4e00\u5207\u306e\u8cac\u4efb\u3092\u53d6\u308a\u304b\u306d\u307e\u3059\u306e\u3067\u3054\u4e86\u627f\u304f\u3060\u3055\u3044\u3002\n#\u306f\u3058\u3081\u306b\nApache HttpComponents\u306b\u3088\u308a\u3001SSL\u901a\u4fe1\u3092\u884c\u3046\u969b\u306b\u306f\u5f53\u7136\u3067\u3059\u304c\u3001\u30db\u30b9\u30c8\u540d\u306e\u691c\u8a3c\u304c\u884c\u308f\u308c\u307e\u3059\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u4f8b\u3048\u3070`https://google.com/`\u306e\u4ee3\u308f\u308a\u306b`https://216.58.220.227/`\u306b\u63a5\u7d9a\u3057\u305f\u5834\u5408\u3001SSLException\u304c\u767a\u751f\u3057\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u74b0\u5883\u306e\u79fb\u884c\u6642\u7b49\u306b\u306fIP\u30a2\u30c9\u30ec\u30b9\u3067\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5fc5\u8981\u304c\u751f\u3058\u305f\u308a\u3059\u308b\u305f\u3081\u3001SSL\u8a3c\u660e\u66f8\u3092\u7121\u8996\u3059\u308b\u3053\u3068\u306a\u304f\u63a5\u7d9a\u3059\u308b\u65b9\u6cd5\u3092\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\n#\u7c21\u5358\u306b\n\u3053\u3053\u3067\u3001\u8a3c\u660e\u66f8\u306e\u30db\u30b9\u30c8\u540d\u3092\u7121\u8996\u3059\u308b\u3060\u3051\u3067\u3042\u308c\u3070\u3001`SSLSocketFactory`\u30af\u30e9\u30b9\u306e`setHostnameVerifier`\u30e1\u30bd\u30c3\u30c9\u306b`ALLOW_ALL_HOSTNAME_VERIFIER`\u3092\u6e21\u305b\u3070\u3001\u4f8b\u5916\u306f\u751f\u3058\u306a\u304f\u306a\u308a\u307e\u3059\u3002\u6b21\u306b`HttpClient`\u306e\u751f\u6210\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\n\n```java\nHttpParams params = new BasicHttpParams();\nSchemeRegistry registry = new SchemeRegistry();\nregistry.register(new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\nSSLSocketFactory sslSocketFactory = SSLSocketFactory.getSocketFactory();\n// \u30db\u30b9\u30c8\u540d\u306e\u691c\u8a3c\u3092\u884c\u308f\u306a\u3044\u3002\nsslSocketFactory.setHostnameVerifier(ALLOW_ALL_HOSTNAME_VERIFIER);\nregistry.register(new Scheme(\"https\", sslSocketFactory, 443));\nThreadSafeClientConnManager clientConnManager = new ThreadSafeClientConnManager(params, registry);\nHttpClient httpClient = new DefaultHttpClient(clientConnManager , params);\n```\n\n#\u5b89\u5168\u306b\n\u524d\u8ff0\u306e\u65b9\u6cd5\u306b\u3088\u308b\u3068\u3001\u30db\u30b9\u30c8\u540d\u306e\u691c\u8a3c\u3092\u884c\u308f\u306a\u3044\u306e\u3067\u3001\u8a3c\u660e\u66f8\u304c\u30eb\u30fc\u30c8\u8a3c\u660e\u66f8\u304b\u3089\u6b63\u3057\u304f\u3064\u306a\u304c\u3063\u3066\u3044\u308c\u3070\u3001\u305d\u306e\u901a\u4fe1\u3092\u8a31\u53ef\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u3067\u3059\u304b\u3089\u3001\u5b9b\u5148\u30db\u30b9\u30c8\u4ee5\u5916\u306e\u4efb\u610f\u306e\u30c9\u30e1\u30a4\u30f3\u306b\u5c5e\u3059\u308bSSL\u8a3c\u660e\u66f8\u3092\u6301\u3063\u305f\u4eba\u9593\u3067\u3082\u3001\u901a\u4fe1\u3092\u508d\u53d7\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u305d\u3053\u3067\u3001\u30db\u30b9\u30c8\u540d\u306e\u5909\u63db\u30c6\u30fc\u30d6\u30eb\u3092\u691c\u8a3c\u5668\u306b\u6301\u305f\u305b\u3001IP\u30a2\u30c9\u30ec\u30b9\u3067\u63a5\u7d9a\u3057\u305f\u3044\u30db\u30b9\u30c8\u3092\u5909\u63db\u30c6\u30fc\u30d6\u30eb\u306b\u767b\u9332\u3057\u3066\u304a\u304f\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u610f\u56f3\u3057\u305fSSL\u8a3c\u660e\u66f8\u3067\u306e\u307f\u3001\u30db\u30b9\u30c8\u540d\u306e\u554f\u984c\u3092\u7121\u8996\u3057\u3066\u901a\u4fe1\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u6b21\u306b\u3053\u306e\u5b9f\u88c5\u3092\u884c\u3063\u305f\u691c\u8a3c\u5668\u3001`CustomHostnameVerifier`\u30af\u30e9\u30b9\u3092\u793a\u3057\u307e\u3059\u3002\n\n```java:CustomHostnameVerifier.java\npackage net.leak4mk0.util;\n\nimport org.apache.http.conn.ssl.BrowserCompatHostnameVerifier;\nimport org.apache.http.conn.ssl.X509HostnameVerifier;\n\nimport java.io.IOException;\nimport java.security.cert.X509Certificate;\nimport java.util.Map;\nimport javax.net.ssl.SSLException;\nimport javax.net.ssl.SSLSession;\nimport javax.net.ssl.SSLSocket;\n\npublic class CustomHostnameVerifier implements X509HostnameVerifier {\n    private BrowserCompatHostnameVerifier mHostnameVerifier;\n    private Map<String, String> mHostMap;\n\n    public CustomHostnameVerifier(Map<String, String> hostMap) {\n        mHostnameVerifier = new BrowserCompatHostnameVerifier();\n        mHostMap = hostMap;\n    }\n\n    @Override\n    public boolean verify(String host, SSLSession session) {\n        return mHostnameVerifier.verify(getCustomHost(host), session);\n    }\n\n    @Override\n    public void verify(String host, SSLSocket ssl) throws IOException {\n        mHostnameVerifier.verify(getCustomHost(host), ssl);\n    }\n\n    @Override\n    public void verify(String host, X509Certificate cert) throws SSLException {\n        mHostnameVerifier.verify(getCustomHost(host), cert);\n    }\n\n    @Override\n    public void verify(String host, String[] cns, String[] subjectAlts) throws SSLException {\n        mHostnameVerifier.verify(getCustomHost(host), cns, subjectAlts);\n    }\n\n    private String getCustomHost(String originalHost) {\n        if (!mHostMap.containsKey(originalHost)) {\n            return originalHost;\n        }\n\n        return mHostMap.get(originalHost);\n    }\n}\n```\n\n`X509HostnameVerifier`\u3092\u5b9f\u88c5\u3057\u305f`BrowserCompatHostnameVerifier`\u30af\u30e9\u30b9\u3092\u5185\u90e8\u3067\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u7d99\u627f\u3059\u308b\u3064\u3082\u308a\u3067\u3057\u305f\u304c\u3001`verify`\u30e1\u30bd\u30c3\u30c9\u304c`final`\u3067\u3057\u305f\u306e\u3067\u3001\u3053\u306e\u3088\u3046\u306a\u5f62\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u30b3\u30fc\u30c9\u3092\u898b\u308c\u3070\u308f\u304b\u308b\u3053\u3068\u3067\u3059\u304c\u3001`getCustomHost`\u30e1\u30bd\u30c3\u30c9\u3067\u5909\u63db\u30c6\u30fc\u30d6\u30eb\u306b\u3042\u308c\u3070\u7f6e\u63db\u5f8c\u306e\u30db\u30b9\u30c8\u3092\u8fd4\u3057\u3001\u691c\u8a3c\u3092\u7d9a\u884c\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u524d\u8ff0\u306e`setHostnameVerifier`\u30e1\u30bd\u30c3\u30c9\u3067\u5909\u63db\u30c6\u30fc\u30d6\u30eb\u3092\u6301\u3063\u305f`CustomHostnameVerifier`\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u6e21\u305b\u3070\u3001\u691c\u8a3c\u5668\u3092\u5909\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```java\nMap<String, String> HOST_MAP =\n        new HashMap<String, String>() {{\n            put(\"216.58.220.227\", \"google.com\");\n        }};\n\nHttpParams params = new BasicHttpParams();\nSchemeRegistry registry = new SchemeRegistry();\nregistry.register(new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\nSSLSocketFactory sslSocketFactory = SSLSocketFactory.getSocketFactory();\n// \u30db\u30b9\u30c8\u540d\u306e\u5909\u63db\u30c6\u30fc\u30d6\u30eb\u3092\u6301\u3063\u305f\u691c\u8a3c\u5668\u3092\u5229\u7528\u3059\u308b\u3002\nsslSocketFactory.setHostnameVerifier(new CustomHostnameVerifier(HOST_MAP));\nregistry.register(new Scheme(\"https\", sslSocketFactory, 443));\nThreadSafeClientConnManager clientConnManager = new ThreadSafeClientConnManager(params, registry);\nHttpClient httpClient = new DefaultHttpClient(clientConnManager , params);\n```\n\n#\u3055\u3044\u3054\u306b\n\u79c1\u306f\u3001\u3053\u306e\u65b9\u6cd5\u3067\u5b89\u5168\u6027\u3092\u78ba\u4fdd\u3057\u305f\u307e\u307e\u3001\u30b5\u30fc\u30d0\u30fc\u79fb\u884c\u6642\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\u3053\u306e\u8a18\u4e8b\u3067\u793a\u3057\u305f\u30b3\u30fc\u30c9\u306f\u3054\u81ea\u7531\u306b\u4f7f\u3063\u3066\u3044\u305f\u3060\u3044\u3066\u5927\u4e08\u592b\u3067\u3059\u3002\u305f\u3060\u3057\u3001\u4e00\u5207\u306e\u8cac\u4efb\u3092\u53d6\u308a\u304b\u306d\u307e\u3059\u306e\u3067\u3054\u4e86\u627f\u304f\u3060\u3055\u3044\u3002\n"}