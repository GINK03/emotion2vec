{"context": " More than 1 year has passed since last update.\n\nscala-dddbase \u3067\u306f\u3069\u306e\u3088\u3046\u306a\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3068\u3057\u3066\u3044\u308b\u304b\uff1f\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u623b\u308a\u5024\u306f\u30e2\u30ca\u30c9\u306b\u30e9\u30c3\u30d7\u3057\u3066\u8fd4\u3059\u3053\u3068\u3092\u60f3\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u9ad8\u968e\u578b\u3068\u3057\u3066M\u578b\u3092\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\u4e00\u822c\u7684\u306bM\u306b\u306f\u3001\u540c\u671f\u578b\u30ea\u30dd\u30b8\u30c8\u30ea\u3068\u3057\u3066\u306fTry\u578b\u3001\u975e\u540c\u671f\u578b\u30ea\u30dd\u30b8\u30c8\u30ea\u3068\u3057\u3066\u306fFuture\u578b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u526f\u4f5c\u7528\u304c\u306a\u3044\u8aad\u307f\u8fbc\u307f\u7cfb\u30e1\u30bd\u30c3\u30c9\u306fM[E]\u3082\u3057\u304f\u306fM[Seq[E]]\u3067\u8fd4\u3057\u307e\u3059\u3002\u4e00\u65b9\u3001\u526f\u4f5c\u7528\u304c\u3042\u308b\u66f8\u304d\u8fbc\u307f\u7cfb\u30e1\u30bd\u30c3\u30c9\u306fM[Result],M[Results]\u3092\u8fd4\u3057\u307e\u3059(Result, Results\u306f\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u65b0\u3057\u3044\u72b6\u614b\u3068\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u542b\u3080\u578b\u3068\u3057\u3066\u3044\u307e\u3059\u3002\u30aa\u30f3\u30e1\u30e2\u30ea\u306a\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u5834\u5408\u306f\u65b0\u3057\u3044\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8fd4\u3059\u4e0d\u5909\u578b\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u5b9f\u88c5\u3057\u3001DB\u306a\u3069\u306e\u30b9\u30c8\u30ec\u30fc\u30b8\u306b\u5bfe\u5fdc\u3065\u304f\u5834\u5408\u306f\u53ef\u5909\u30ea\u30dd\u30b8\u30c8\u30ea\u3068\u3057\u3066this\u3092\u8fd4\u3059\u306b\u3088\u3046\u3057\u307e\u3059)\n\u30ea\u30dd\u30b8\u30c8\u30ea\u306f\u3042\u3089\u3086\u308b\u6c38\u7d9a\u5316\u6280\u8853\u304b\u3089\u4e2d\u7acb\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u304c\u3001\u73fe\u5b9f\u554f\u984c\u3068\u3057\u3066DBMS\u5b9f\u88c5\u306e\u5834\u5408\u306f\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3084\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7ba1\u7406\u306e\u305f\u3081\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3059\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u3001\u62bd\u8c61\u7684\u306a\u30c7\u30fc\u30bf\u578b\u3068\u3057\u3066Ctx\u578b\u3092\u6e21\u305b\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u5229\u7528\u3059\u308b\u969b\u306f\u5185\u90e8\u3067\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u3092\u3057\u3066\u5fc5\u8981\u306a\u60c5\u5831\u3092\u53d6\u308a\u51fa\u3059\u306a\u3069\u3092\u3084\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u8fba\u306f\u3082\u3063\u3068\u3044\u3044\u65b9\u6cd5(\u591a\u5206Reader\u30e2\u30ca\u30c9\u3067\u3044\u3051\u308b\u6c17\u304c\u3059\u308b)\u304c\u3042\u308a\u305d\u3046\u3060\u304c\u59a5\u5354\u3057\u3066\u3044\u307e\u3059\u3002\n\nEntityReader\n\ntrait EntityReader[ID <: Identifier[_], E <: Entity[ID], M[+  _]] extends EntityIO[M] {\n\n  /**\n   * \u8b58\u5225\u5b50\u304b\u3089\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u89e3\u6c7a\u3059\u308b\u3002\n   * \n   * @param identifier \u8b58\u5225\u5b50\n   * @return \u6b63\u5e38: \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\n   *         \u4f8b\u5916: EntityNotFoundException\u306f\u3001\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3002\n   */\n  def resolveBy(identifier: ID)(implicit ctx: Ctx): M[E]\n\n  /**\n   * \u8907\u6570\u306e\u8b58\u5225\u5b50\u304b\u3089\u8907\u6570\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u89e3\u6c7a\u3059\u308b\u3002\n   * \n   * @param identifier \u8b58\u5225\u5b50\n   * @return \u6b63\u5e38: \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u96c6\u5408\n   *         \u4f8b\u5916: RepositoryException\u306f\u3001\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u304b\u3063\u305f\u5834\u5408\u3002\n   */\n  def resolveByMulti(identifiers: ID*)(implicit ctx: Ctx): M[Seq[E]]\n\n}\n\n\nEntityWriter\n\ntrait EntityWriter[ID <: Identifier[_], E <: Entity[ID], M[+ _]] extends EntityIO[M] {\n\n  type This <: EntityWriter[ID, E, M]\n  type Result <: ResultWithEntity[This, ID, E, M]\n  type Results <: ResultWithEntities[This, ID, E, M]\n\n  /**\n   * \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u4fdd\u5b58\u3059\u308b\u3002\n   *\n   * @param entity \u4fdd\u5b58\u3059\u308b\u5bfe\u8c61\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\n   * @return \u6b63\u5e38: \u30ea\u30dd\u30b8\u30c8\u30ea\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u4fdd\u5b58\u3055\u308c\u305f\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\n   *         \u4f8b\u5916: RepositoryException\u306f\u3001\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u304b\u3063\u305f\u5834\u5408\u3002\n   */\n  def store(entity: E)(implicit ctx: Ctx): M[Result]\n\n  /**\n   * \u8907\u6570\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u4fdd\u5b58\u3059\u308b\u3002\n   *\n   * @param entity \u4fdd\u5b58\u3059\u308b\u5bfe\u8c61\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\n   * @return \u6b63\u5e38: \u30ea\u30dd\u30b8\u30c8\u30ea\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u4fdd\u5b58\u3055\u308c\u305f\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\n   *         \u4f8b\u5916: RepositoryException\u306f\u3001\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u304b\u3063\u305f\u5834\u5408\u3002\n   */\n  def storeMulti(entities: E*)(implicit ctx: Ctx): M[Results]\n\n}\n\n\nEntityIO\n\n/**\n * \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092IO\u3059\u308b\u305f\u3081\u306e\u30c8\u30ec\u30a4\u30c8\u3002\n */\ntrait EntityIO[M[+ _]] {\n\n  type Ctx = EntityIOContext[M]\n\n}\n\n\nResultWithEntity\n/**\n * [[org.sisioh.dddbase.core.lifecycle.EntityWriter]]\u306e\u65b0\u3057\u3044\u72b6\u614b\u3068\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u4fdd\u6301\u3059\u308b\u5024\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002\n *\n * @tparam EW [[org.sisioh.dddbase.core.lifecycle.EntityWriter]]\u306e\u578b\n * @tparam ID \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u8b58\u5225\u5b50\u306e\u578b\n * @tparam E \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u578b\n * @tparam M \u30e2\u30ca\u30c9\u306e\u578b\n */\ntrait ResultWithEntity[+EW <: EntityWriter[ID, E, M], ID <: Identifier[_], E <: Entity[ID], M[+A]] {\n\n  /**\n   * \u7d50\u679c\n   */\n  val result: EW\n\n  /**\n   * \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\n   */\n  val entity: E\n\n}\n\n\nResultWithEntities\n/**\n * [[org.sisioh.dddbase.core.lifecycle.EntityWriter]]\u306e\u65b0\u3057\u3044\u72b6\u614b\u3068\u8907\u6570\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u4fdd\u6301\u3059\u308b\u5024\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002\n *\n * @tparam EW [[org.sisioh.dddbase.core.lifecycle.EntityWriter]]\u306e\u578b\n * @tparam ID \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u8b58\u5225\u5b50\u306e\u578b\n * @tparam E \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u578b\n * @tparam M \u30e2\u30ca\u30c9\u306e\u578b\n */\ntrait ResultWithEntities[+EW <: EntityWriter[ID, E, M], ID <: Identifier[_], E <: Entity[ID], M[+A]] {\n\n  /**\n   * \u7d50\u679c\n   */\n  val result: EW\n\n  /**\n   * \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\n   */\n  val entities: Seq[E]\n\n}\n\n\n\u8003\u3048\u3089\u308c\u308bI/O\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\n\u4e0a\u8a18\u306e\u8a2d\u8a08\u306b\u81f3\u308b\u307e\u3067\u306b\u8003\u3048\u305f\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306b\u3064\u3044\u3066\u307e\u3068\u3081\u307e\u3059\u3002\n\n\u8aad\u307f\u8fbc\u307f\u7cfb\u306e\u30e1\u30bd\u30c3\u30c9\n\n\u623b\u308a\u5024\u3068\u3057\u3066\u5024\u3060\u3051\u8fd4\u3059\u65b9\u6cd5\n\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u623b\u308a\u5024\u3067\u8fd4\u3057\u3001\u5b58\u5728\u3057\u306a\u3044\u3068\u3044\u3046\u72b6\u6cc1\u3068\u3001\u305d\u306e\u4ed6\u306e\u4f8b\u5916\u72b6\u6cc1\u3092\u3001\u5b9f\u884c\u6642\u4f8b\u5916\u3067\u8fd4\u3059\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\ntrait Repository[ID, E] {\n  def resolveBy(id: ID)(implicit ctx: Ctx): E\n}\n\nval response = try {\n  val entity = repository.resolveBy(id)\n  Ok(entity.toJson)\n} catch {\n  case EntityNotFoundException(id) => BadRequest(id)\n  case ex: RepositoryException => InternalServerError(ex)\n}\n\n\nOption\u578b\u3067\u30e9\u30c3\u30d7\u3059\u308b\u65b9\u6cd5\n\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306fSome\u3067\u30e9\u30c3\u30d7\u3057\u3066\u8fd4\u3057\u3001\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306fNone\u304c\u8fd4\u3055\u308c\u307e\u3059\u3002\u305d\u308c\u4ee5\u5916\u306e\u4f8b\u5916\u72b6\u6cc1\u306f\u5b9f\u884c\u6642\u4f8b\u5916\u306b\u306a\u308a\u307e\u3059\u3002\ntrait Repository[ID, E] {\n  def resolveBy(id: ID)(implicit ctx: Ctx): Option[E]\n}\n\nval response = try {\n  repository.resolveBy(id).fold(NotFound(id)){ entity =>\n    Ok(entity.toJson)\n  }\n} catch {\n  case ex: Exception => InternalServerError(ex)\n}\n\n\n\nEither\u578b\u3067\u30e9\u30c3\u30d7\u3059\u308b\u65b9\u6cd5\n\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092Right\u3067\u30e9\u30c3\u30d7\u3057\u3066\u8fd4\u3057\u3001\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306fEntityNotFoundError\u3067\u8fd4\u3057\u3001\u305d\u308c\u4ee5\u5916\u306e\u4f8b\u5916\u72b6\u6cc1\u306f\u5bfe\u5fdc\u3059\u308bError\u3067\u8fd4\u3059\u3002\nsealed trait Error\ncase class EntityNotFoundError(id: Identifier) extends Error\ncase class RepositoryError(id: Identifier, throwable: Throwable) extends Error\n\ntrait Repository[ID, E] {\n  def resoleBy(id: ID)(implicit ctx: Ctx): Either[Error, E]\n}\n\nval response = repository.resolveBy(id).fold({\n  case EntityNotFoundError(id) => NotFound(id)\n  case RepositoryError(id, thr) => InternalServerError(id)\n}, {\n  entity =>\n    Ok(entity.toJson)\n})\n\nEither[Error, Option[E]]\u7248\u306e\u5834\u5408\u306f\u3001\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306fRigiht(None)\u3068\u3057\u3066\u8fd4\u3059\u3002\ntrait Repository[ID, E] {\n  def resoleBy(id: ID)(implicit ctx: Ctx): Either[Error, Option[E]]\n}\n\nval response = repository.resolveBy(id).fold({\n  case RepositoryError(id, thr) => InternalServerError(id)\n}, {\n  entityOpt =>\n    entityOpt.fold(NotFound(id)){ entity =>\n      Ok(entity.toJson)\n    }\n})\n\n\nTry\u578b\u3067\u30e9\u30c3\u30d7\u3059\u308b\u65b9\u6cd5\nEither\u578b\u3068\u307b\u307c\u5909\u308f\u308a\u307e\u305b\u3093\u304c\u3001\u4f8b\u5916\u72b6\u6cc1\u3068\u3057\u3066Failure\u306b\u306f\u3069\u3093\u306aException\u3082\u683c\u7d0d\u3067\u304d\u307e\u3059\u3002\ntrait Repository[ID, E] {\n  def resolveBy(id: ID)(implicit ctx: Ctx): Try[E]\n}\n\nval response = repository.resolveBy(id).map{ entity =>\n  Ok(entity.toJson)\n}.recover{\n  case EntityNotFoundException(id) => NotFound(id)\n  case ex: RepositoryException => InternalServerError\n}.getOrElse(InternalServerError)\n\n\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u304c\u5b58\u5728\u3057\u306a\u3044\u72b6\u6cc1\u3092None\u3067\u8868\u3059\u5834\u5408\u306f\u4ee5\u4e0b\u3002\ntrait Repository[ID, E] {\n  def resolveBy(id: ID)(implicit ctx: Ctx): Try[Option[E]]\n}\n\nval response = repository.resolveBy(id).map{ entityOpt =>\n  entityOpt.fold(NotFound(id)(_.toJson)\n}.recover{\n  case ex: RepositoryException => InternalServerError\n}.getOrElse(InternalServerError)\n\n\nFuture\u578b\u3067\u30e9\u30c3\u30d7\u3059\u308b\u65b9\u6cd5\n\u540c\u671f\u304b\u975e\u540c\u671f\u304b\u3068\u3044\u3046\u9055\u3044\u3067\u3059\u304c\u3001Try\u578b\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30a8\u30b9\u3068\u307b\u3068\u3093\u3069\u5909\u308f\u308a\u307e\u305b\u3093\u3002\ntrait Repository[ID, E] {\n  def resolveBy(id: ID)(implicit ctx: Ctx): Future[E]\n}\n\nval response = repository.resolveBy(id).map{ entity =>\n  Ok(entity.toJson)\n}.recover{\n  case EntityNotFoundException(id) => NotFound(id)\n  case ex: RepositoryException => InternalServerError\n}.getOrElse(InternalServerError)\n\ntrait Repository[ID, E, M[+_]] {\n  def resolveBy(id: ID)(implicit ctx: Ctx): Future[Option[E]]\n}\n\nval response = repository.resolveBy(id).map{ entityOpt =>\n  entityOpt.fold(NotFound(id)(_.toJson)\n}.recover{\n  case ex: RepositoryException => InternalServerError\n}.getOrElse(InternalServerError)\n\n\n\u66f8\u304d\u8fbc\u307f\u7cfb\u30e1\u30bd\u30c3\u30c9\n\n\u623b\u308a\u5024\u3092Unit\u3059\u308b\u65b9\u6cd5\n\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u4fdd\u5b58\u3067\u304d\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u4f8b\u5916\u304c\u30b9\u30ed\u30fc\u3055\u308c\u307e\u3059\u3002\u5f15\u6570\u306b\u6e21\u3057\u305f\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3068\u66f8\u304d\u8fbc\u3093\u3060\u7d50\u679c\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u304c\u7570\u306a\u308b\u5834\u5408\u306fresolveBy\u3067\u518d\u5ea6\u53d6\u5f97\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u526f\u4f5c\u7528\u3092\u8d77\u3053\u3059\u30e1\u30bd\u30c3\u30c9\u3067\u3042\u308a\u3001\u30c6\u30b9\u30bf\u30d3\u30ea\u30c6\u30a3\u304c\u4e0b\u304c\u308b\u306e\u304c\u96e3\u70b9\u3002\ntrait Repository[ID, E] {\n  def store(entity: E)(implicit ctx: Ctx): Unit\n}\n\nval response = try {\n  repository.store(entity)\n  Ok(repository.resolveBy(entity.id))\n} catch {\n  case ex: RepositoryException => InternalServerError\n}\n\n\n\u4fdd\u5b58\u3055\u308c\u305f\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u8fd4\u3059\u65b9\u6cd5\n\u5024\u3092\u8fd4\u3059\u304c\u4ee5\u524d\u3068\u3057\u3066\u3001\u526f\u4f5c\u7528\u3092\u8d77\u3053\u3059\u30e1\u30bd\u30c3\u30c9\u3067\u3042\u308a\u3001\u30c6\u30b9\u30bf\u30d3\u30ea\u30c6\u30a3\u304c\u4e0b\u304c\u308b\u3002\ntrait Repository[ID, E] {\n  def store(entity: E)(implicit ctx: Ctx): E\n}\n\nval response = try {\n  Ok(repository.store(entity).toJson)\n} catch {\n  case ex: RepositoryException => InternalServerError\n}\n\n\n\u65b0\u3057\u3044\u30ea\u30dd\u30b8\u30c8\u30ea\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u8fd4\u3059\u65b9\u6cd5\nState\u30e2\u30ca\u30c9\u306e\u5fdc\u7528\u4f8b\u3068\u3057\u3066\u3001\u65b0\u3057\u3044\u30ea\u30dd\u30b8\u30c8\u30ea\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u8fd4\u3059\u3053\u3068\u306b\u3088\u3063\u3066\u3001\u7d14\u7c8b\u95a2\u6570\u5316\u3057\u30c6\u30b9\u30bf\u30d3\u30ea\u30c6\u30a3\u3092\u5411\u4e0a\u3055\u305b\u308b\u65b9\u6cd5\u3002\u3053\u308c\u306b\u3088\u3063\u3066\u4e0d\u5909\u30ea\u30dd\u30b8\u30c8\u30ea\u304c\u5b9f\u88c5\u53ef\u80fd\u306b\u306a\u308b(DBMS\u306a\u3069\u4e0d\u5909\u3068\u306e\u76f8\u6027\u304c\u60aa\u3044\u5b9f\u88c5\u306e\u5834\u5408\u306f\u3001\u53ef\u5909\u30ea\u30dd\u30b8\u30c8\u30ea\u3068\u3057\u3066\u3001(this, storedEntity) \u3068\u3057\u3066Unit\u3092\u8fd4\u3059\u5909\u308f\u308a\u306bthis\u3092\u8fd4\u3059\u3068\u3088\u3044)\u3002\ntrait Repository[ID, E] {\n  def store(entity: E)(implicit ctx: Ctx): (Repository[ID, E], E)\n}\n\nval response = try {\n  val (newRepo, storedEntity) = repository.store(entity))\n  // \u5fc5\u8981\u306b\u5fdc\u3058\u3066 newRepository.store, resolveBy \u306a\u3069\n  Ok(storedEntity.toJson)\n} catch {\n  case ex: RepositoryException => InternalServerError\n}\n\n\nEtiher\u578b\u306b\u30e9\u30c3\u30d7\u3059\u308b\u65b9\u6cd5\ntrait Repository[ID, E] {\n  def store(entity: E)(implicit ctx: Ctx): Either[Error, (Repository[ID, E], E)]\n}\n\nrepository.store(entity).fold({\n  case ex: RepositoryException => InternalServerError\n},{ (newRepo, storedEntity) =>\n  // \u5fc5\u8981\u306b\u5fdc\u3058\u3066 newRepository.store, resolveBy \u306a\u3069\n  Ok(storedEntity.toJson)\n})\n\n\nTry\u578b\u306b\u30e9\u30c3\u30d7\u3059\u308b\u65b9\u6cd5\ntrait Repository[ID, E] {\n  def store(entity: E)(implicit ctx: Ctx): Try[(Repository[ID, E], E)]\n}\n\nrepository.store(entity).map{ (newRepo, storedEntity) =>\n  // \u5fc5\u8981\u306b\u5fdc\u3058\u3066 newRepository.store, resolveBy \u306a\u3069\n  Ok(storedEntity.toJson)\n}.recovery{\n  case ex: RepositoryException => InternalServerError\n}\n\n\nFuture\u578b\u3067\u30e9\u30c3\u30d7\u3059\u308b\u65b9\u6cd5\ntrait Repository[ID, E] {\n  def store(entity: E)(implicit ctx: Ctx): Future[(Repository[ID, E], E)]\n}\n\nrepository.store(entity).map{ (newRepo, storedEntity) =>\n  // \u5fc5\u8981\u306b\u5fdc\u3058\u3066 newRepository.store, resolveBy \u306a\u3069\n  Ok(storedEntity.toJson)\n}.recovery{\n  case ex: RepositoryException => InternalServerError\n}\n\n\u306a\u3069\u306a\u3069\u3001\u6319\u3052\u308c\u3070\u304d\u308a\u304c\u306a\u3044\u306e\u3067\u3059\u304c\u2026\u3002\n\nScalaz\nScalaz\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u304b\u306d\u3002\ntrait Repository[ID, E] {\n  def store(entity: E)(implicit ctx: Ctx): \\/[Error, State[Repository[ID, E], E]]\n}\n\n\n\u305d\u3057\u3066Free\u30e2\u30ca\u30c9\n\u3042\u3068\u306f\u3001Free\u30e2\u30ca\u30c9\u3092\u4f7f\u3046\u65b9\u6cd5\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u306d\u3002\u3053\u3063\u3061\u306e\u304c\u30e2\u30ca\u30c9\u304c\u968e\u5c64\u5316\u3057\u306a\u3044\u3088\u3046\u306b\u3067\u304d\u308b\u306e\u3067\u3088\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002\u5f53\u7136\u3001\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3092\u66f8\u304f\u624b\u9593\u306f\u3042\u308a\u307e\u3059\u304c\u3002\nhttps://gist.github.com/xuwei-k/469a2213c7773274272f\n\u3042\u3001Operational\u30e2\u30ca\u30c9\u306e\u65b9\u304c\u3088\u3044\u304b\u306a\uff1f\n\n\u307e\u3068\u3081\n\u3068\u306f\u3044\u3048\u3001\u73fe\u72b6 \u4ee5\u4e0b\u3092\u63a1\u7528\u3057\u3066\u3044\u307e\u3059\u3002\ntrait Repository[ID, E] {\n  def resolveBy(id: ID)(implicit ctx: Ctx): Try[E]\n  def resolveBy(id: ID)(implicit ctx: Ctx): Future[E]\n  def store(entity: E)(implicit ctx: Ctx): Try[(Repository[ID, E] , E)]\n  def store(entity: E)(implicit ctx: Ctx): Future[(Repository[ID, E] , E)]\n}\n\nval response = (for {\n  (newUserRepo, storedUser) <- userRepository.store(user)\n  (newGroupRepo, storedGroup) <- groupRepository.store(group)\n} yield {\n  Ok(toJson(storedUser, storedGroup))\n}).recover{\n  case ex: RepositoryException => InternalServerError\n}\n\n\u3084\u306f\u308a\u30e2\u30ca\u30c9\u304c\u5165\u308c\u5b50\u69cb\u9020\u306b\u306a\u308b\u3068for\u5f0f\u3084map\u306a\u3069\u304c\u66f8\u304d\u306b\u304f\u304f\u306a\u308b\u306e\u3067\u3001\u3067\u304d\u308b\u3060\u3051\u968e\u5c64\u5316\u3055\u305b\u306a\u3044\u3068\u3044\u3046\u306e\u3068\u3001Try/Future\u306f\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u304c\u4f3c\u3066\u3044\u308b\u306e\u3067\u3001\u540c\u671f\u3084\u975e\u540c\u671f\u306e\u30b3\u30fc\u30c9\u306e\u5207\u308a\u66ff\u3048\u304c\u3057\u3084\u3059\u3044\u304b\u3089\u3067\u3059\u3002\u307e\u3041\u3001\u4f8b\u5916\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3060\u3051\u8003\u3048\u308b\u3068Either\u3067\u3082\u3088\u3044\u304b\u3082\u3002\ndef resolveBy(id: ID)(implicit ctx: Ctx): Try[E] = Try {\n  sql\"select * from users where id = {id}\"\n    .bindByName('id -> id)\n    .map(convertToEntity)\n    .single\n    .apply()\n    .getOrElse(throw new EntityNotFoundException(id))\n}\n\ndef resolveBy(id: ID)(implicit ctx: Ctx): Future[E] = {\n  val executor = getExecutor(ctx)\n  future {\n    internalRepository.resolveBy(id).get\n  }\n}\n\n## [scala-dddbase](https://github.com/sisioh/scala-dddbase) \u3067\u306f\u3069\u306e\u3088\u3046\u306a\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3068\u3057\u3066\u3044\u308b\u304b\uff1f\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u623b\u308a\u5024\u306f\u30e2\u30ca\u30c9\u306b\u30e9\u30c3\u30d7\u3057\u3066\u8fd4\u3059\u3053\u3068\u3092\u60f3\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u9ad8\u968e\u578b\u3068\u3057\u3066M\u578b\u3092\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\u4e00\u822c\u7684\u306bM\u306b\u306f\u3001\u540c\u671f\u578b\u30ea\u30dd\u30b8\u30c8\u30ea\u3068\u3057\u3066\u306fTry\u578b\u3001\u975e\u540c\u671f\u578b\u30ea\u30dd\u30b8\u30c8\u30ea\u3068\u3057\u3066\u306fFuture\u578b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n\u526f\u4f5c\u7528\u304c\u306a\u3044\u8aad\u307f\u8fbc\u307f\u7cfb\u30e1\u30bd\u30c3\u30c9\u306fM[E]\u3082\u3057\u304f\u306fM[Seq[E]]\u3067\u8fd4\u3057\u307e\u3059\u3002\u4e00\u65b9\u3001\u526f\u4f5c\u7528\u304c\u3042\u308b\u66f8\u304d\u8fbc\u307f\u7cfb\u30e1\u30bd\u30c3\u30c9\u306fM[Result],M[Results]\u3092\u8fd4\u3057\u307e\u3059(Result, Results\u306f\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u65b0\u3057\u3044\u72b6\u614b\u3068\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u542b\u3080\u578b\u3068\u3057\u3066\u3044\u307e\u3059\u3002\u30aa\u30f3\u30e1\u30e2\u30ea\u306a\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u5834\u5408\u306f\u65b0\u3057\u3044\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8fd4\u3059\u4e0d\u5909\u578b\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u5b9f\u88c5\u3057\u3001DB\u306a\u3069\u306e\u30b9\u30c8\u30ec\u30fc\u30b8\u306b\u5bfe\u5fdc\u3065\u304f\u5834\u5408\u306f\u53ef\u5909\u30ea\u30dd\u30b8\u30c8\u30ea\u3068\u3057\u3066this\u3092\u8fd4\u3059\u306b\u3088\u3046\u3057\u307e\u3059)\n\n\u30ea\u30dd\u30b8\u30c8\u30ea\u306f\u3042\u3089\u3086\u308b\u6c38\u7d9a\u5316\u6280\u8853\u304b\u3089\u4e2d\u7acb\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u304c\u3001\u73fe\u5b9f\u554f\u984c\u3068\u3057\u3066DBMS\u5b9f\u88c5\u306e\u5834\u5408\u306f\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3084\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7ba1\u7406\u306e\u305f\u3081\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3059\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u3001\u62bd\u8c61\u7684\u306a\u30c7\u30fc\u30bf\u578b\u3068\u3057\u3066Ctx\u578b\u3092\u6e21\u305b\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u5229\u7528\u3059\u308b\u969b\u306f\u5185\u90e8\u3067\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u3092\u3057\u3066\u5fc5\u8981\u306a\u60c5\u5831\u3092\u53d6\u308a\u51fa\u3059\u306a\u3069\u3092\u3084\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u8fba\u306f\u3082\u3063\u3068\u3044\u3044\u65b9\u6cd5(\u591a\u5206Reader\u30e2\u30ca\u30c9\u3067\u3044\u3051\u308b\u6c17\u304c\u3059\u308b)\u304c\u3042\u308a\u305d\u3046\u3060\u304c\u59a5\u5354\u3057\u3066\u3044\u307e\u3059\u3002\n\n### [EntityReader](https://github.com/sisioh/scala-dddbase/blob/develop/scala-dddbase-core/src/main/scala/org/sisioh/dddbase/core/lifecycle/EntityReader.scala#L50)\n\n```scala\ntrait EntityReader[ID <: Identifier[_], E <: Entity[ID], M[+  _]] extends EntityIO[M] {\n  \n  /**\n   * \u8b58\u5225\u5b50\u304b\u3089\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u89e3\u6c7a\u3059\u308b\u3002\n   * \n   * @param identifier \u8b58\u5225\u5b50\n   * @return \u6b63\u5e38\b: \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\n   *         \u4f8b\u5916: EntityNotFoundException\u306f\u3001\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3002\n   */\n  def resolveBy(identifier: ID)(implicit ctx: Ctx): M[E]\n\n  /**\n   * \u8907\u6570\u306e\u8b58\u5225\u5b50\u304b\u3089\u8907\u6570\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u89e3\u6c7a\u3059\u308b\u3002\n   * \n   * @param identifier \u8b58\u5225\u5b50\n   * @return \u6b63\u5e38\b: \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u96c6\u5408\n   *         \u4f8b\u5916: RepositoryException\u306f\u3001\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u304b\u3063\u305f\u5834\u5408\u3002\n   */\n  def resolveByMulti(identifiers: ID*)(implicit ctx: Ctx): M[Seq[E]]\n\n}\n```\n\n### [EntityWriter](https://github.com/sisioh/scala-dddbase/blob/develop/scala-dddbase-core/src/main/scala/org/sisioh/dddbase/core/lifecycle/EntityWriter.scala#L50)\n\n```scala\ntrait EntityWriter[ID <: Identifier[_], E <: Entity[ID], M[+ _]] extends EntityIO[M] {\n\n  type This <: EntityWriter[ID, E, M]\n  type Result <: ResultWithEntity[This, ID, E, M]\n  type Results <: ResultWithEntities[This, ID, E, M]\n\n  /**\n   * \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u4fdd\u5b58\u3059\u308b\u3002\n   *\n   * @param entity \u4fdd\u5b58\u3059\u308b\u5bfe\u8c61\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\n   * @return \u6b63\u5e38\b: \u30ea\u30dd\u30b8\u30c8\u30ea\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u4fdd\u5b58\u3055\u308c\u305f\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\n   *         \u4f8b\u5916: RepositoryException\u306f\u3001\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u304b\u3063\u305f\u5834\u5408\u3002\n   */\n  def store(entity: E)(implicit ctx: Ctx): M[Result]\n\n  /**\n   * \u8907\u6570\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u4fdd\u5b58\u3059\u308b\u3002\n   *\n   * @param entity \u4fdd\u5b58\u3059\u308b\u5bfe\u8c61\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\n   * @return \u6b63\u5e38\b: \u30ea\u30dd\u30b8\u30c8\u30ea\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u4fdd\u5b58\u3055\u308c\u305f\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\n   *         \u4f8b\u5916: RepositoryException\u306f\u3001\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u304b\u3063\u305f\u5834\u5408\u3002\n   */\n  def storeMulti(entities: E*)(implicit ctx: Ctx): M[Results]\n\n}\n```\n\n### [EntityIO](https://github.com/sisioh/scala-dddbase/blob/develop/scala-dddbase-core/src/main/scala/org/sisioh/dddbase/core/lifecycle/EntityIO.scala#L23)\n\n```scala\n/**\n * \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092IO\u3059\u308b\u305f\u3081\u306e\u30c8\u30ec\u30a4\u30c8\u3002\n */\ntrait EntityIO[M[+ _]] {\n\n  type Ctx = EntityIOContext[M]\n\n}\n```\n\n### ResultWithEntity\n\n```scala\n/**\n * [[org.sisioh.dddbase.core.lifecycle.EntityWriter]]\u306e\u65b0\u3057\u3044\u72b6\u614b\u3068\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u4fdd\u6301\u3059\u308b\u5024\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002\n *\n * @tparam EW [[org.sisioh.dddbase.core.lifecycle.EntityWriter]]\u306e\u578b\n * @tparam ID \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u8b58\u5225\u5b50\u306e\u578b\n * @tparam E \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u578b\n * @tparam M \u30e2\u30ca\u30c9\u306e\u578b\n */\ntrait ResultWithEntity[+EW <: EntityWriter[ID, E, M], ID <: Identifier[_], E <: Entity[ID], M[+A]] {\n\n  /**\n   * \u7d50\u679c\n   */\n  val result: EW\n\n  /**\n   * \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\n   */\n  val entity: E\n\n}\n```\n\n### ResultWithEntities\n\n```scala\n/**\n * [[org.sisioh.dddbase.core.lifecycle.EntityWriter]]\u306e\u65b0\u3057\u3044\u72b6\u614b\u3068\u8907\u6570\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u4fdd\u6301\u3059\u308b\u5024\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002\n *\n * @tparam EW [[org.sisioh.dddbase.core.lifecycle.EntityWriter]]\u306e\u578b\n * @tparam ID \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u8b58\u5225\u5b50\u306e\u578b\n * @tparam E \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u578b\n * @tparam M \u30e2\u30ca\u30c9\u306e\u578b\n */\ntrait ResultWithEntities[+EW <: EntityWriter[ID, E, M], ID <: Identifier[_], E <: Entity[ID], M[+A]] {\n\n  /**\n   * \u7d50\u679c\n   */\n  val result: EW\n\n  /**\n   * \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\n   */\n  val entities: Seq[E]\n\n}\n```\n\n# \u8003\u3048\u3089\u308c\u308bI/O\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\n\n\u4e0a\u8a18\u306e\u8a2d\u8a08\u306b\u81f3\u308b\u307e\u3067\u306b\u8003\u3048\u305f\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306b\u3064\u3044\u3066\u307e\u3068\u3081\u307e\u3059\u3002\n\n## \u8aad\u307f\u8fbc\u307f\u7cfb\u306e\u30e1\u30bd\u30c3\u30c9\n\n### \u623b\u308a\u5024\u3068\u3057\u3066\u5024\u3060\u3051\u8fd4\u3059\u65b9\u6cd5\n\n\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u623b\u308a\u5024\u3067\u8fd4\u3057\u3001\u5b58\u5728\u3057\u306a\u3044\u3068\u3044\u3046\u72b6\u6cc1\u3068\u3001\u305d\u306e\u4ed6\u306e\u4f8b\u5916\u72b6\u6cc1\u3092\u3001\u5b9f\u884c\u6642\u4f8b\u5916\u3067\u8fd4\u3059\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n```scala\ntrait Repository[ID, E] {\n  def resolveBy(id: ID)(implicit ctx: Ctx): E\n}\n\nval response = try {\n  val entity = repository.resolveBy(id)\n  Ok(entity.toJson)\n} catch {\n  case EntityNotFoundException(id) => BadRequest(id)\n  case ex: RepositoryException => InternalServerError(ex)\n}\n```\n\n### Option\u578b\u3067\u30e9\u30c3\u30d7\u3059\u308b\u65b9\u6cd5\n\n\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306fSome\u3067\u30e9\u30c3\u30d7\u3057\u3066\u8fd4\u3057\u3001\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306fNone\u304c\u8fd4\u3055\u308c\u307e\u3059\u3002\u305d\u308c\u4ee5\u5916\u306e\u4f8b\u5916\u72b6\u6cc1\u306f\u5b9f\u884c\u6642\u4f8b\u5916\u306b\u306a\u308a\u307e\u3059\u3002\n\n```scala\ntrait Repository[ID, E] {\n  def resolveBy(id: ID)(implicit ctx: Ctx): Option[E]\n}\n\nval response = try {\n  repository.resolveBy(id).fold(NotFound(id)){ entity =>\n    Ok(entity.toJson)\n  }\n} catch {\n  case ex: Exception => InternalServerError(ex)\n}\n\n```\n\n### Either\u578b\u3067\u30e9\u30c3\u30d7\u3059\u308b\u65b9\u6cd5\n\n\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092Right\u3067\u30e9\u30c3\u30d7\u3057\u3066\u8fd4\u3057\u3001\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306fEntityNotFoundError\u3067\u8fd4\u3057\u3001\u305d\u308c\u4ee5\u5916\u306e\u4f8b\u5916\u72b6\u6cc1\u306f\u5bfe\u5fdc\u3059\u308bError\u3067\u8fd4\u3059\u3002\n\n```scala\nsealed trait Error\ncase class EntityNotFoundError(id: Identifier) extends Error\ncase class RepositoryError(id: Identifier, throwable: Throwable) extends Error\n\ntrait Repository[ID, E] {\n  def resoleBy(id: ID)(implicit ctx: Ctx): Either[Error, E]\n}\n\nval response = repository.resolveBy(id).fold({\n  case EntityNotFoundError(id) => NotFound(id)\n  case RepositoryError(id, thr) => InternalServerError(id)\n}, {\n  entity =>\n    Ok(entity.toJson)\n})\n```\n\n`Either[Error, Option[E]]`\u7248\u306e\u5834\u5408\u306f\u3001\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306fRigiht(None)\u3068\u3057\u3066\u8fd4\u3059\u3002\n\n```scala\ntrait Repository[ID, E] {\n  def resoleBy(id: ID)(implicit ctx: Ctx): Either[Error, Option[E]]\n}\n\nval response = repository.resolveBy(id).fold({\n  case RepositoryError(id, thr) => InternalServerError(id)\n}, {\n  entityOpt =>\n    entityOpt.fold(NotFound(id)){ entity =>\n      Ok(entity.toJson)\n    }\n})\n```\n\n### Try\u578b\u3067\u30e9\u30c3\u30d7\u3059\u308b\u65b9\u6cd5\n\nEither\u578b\u3068\u307b\u307c\u5909\u308f\u308a\u307e\u305b\u3093\u304c\u3001\u4f8b\u5916\u72b6\u6cc1\u3068\u3057\u3066Failure\u306b\u306f\u3069\u3093\u306aException\u3082\u683c\u7d0d\u3067\u304d\u307e\u3059\u3002\n\n```scala\ntrait Repository[ID, E] {\n  def resolveBy(id: ID)(implicit ctx: Ctx): Try[E]\n}\n\nval response = repository.resolveBy(id).map{ entity =>\n  Ok(entity.toJson)\n}.recover{\n  case EntityNotFoundException(id) => NotFound(id)\n  case ex: RepositoryException => InternalServerError\n}.getOrElse(InternalServerError)\n```\n\n\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u304c\u5b58\u5728\u3057\u306a\u3044\u72b6\u6cc1\u3092None\u3067\u8868\u3059\u5834\u5408\u306f\u4ee5\u4e0b\u3002\n\n```scala\ntrait Repository[ID, E] {\n  def resolveBy(id: ID)(implicit ctx: Ctx): Try[Option[E]]\n}\n\nval response = repository.resolveBy(id).map{ entityOpt =>\n  entityOpt.fold(NotFound(id)(_.toJson)\n}.recover{\n  case ex: RepositoryException => InternalServerError\n}.getOrElse(InternalServerError)\n```\n\n### Future\u578b\u3067\u30e9\u30c3\u30d7\u3059\u308b\u65b9\u6cd5\n\n\u540c\u671f\u304b\u975e\u540c\u671f\u304b\u3068\u3044\u3046\u9055\u3044\u3067\u3059\u304c\u3001Try\u578b\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30a8\u30b9\u3068\u307b\u3068\u3093\u3069\u5909\u308f\u308a\u307e\u305b\u3093\u3002\n\n\n```scala\ntrait Repository[ID, E] {\n  def resolveBy(id: ID)(implicit ctx: Ctx): Future[E]\n}\n\nval response = repository.resolveBy(id).map{ entity =>\n  Ok(entity.toJson)\n}.recover{\n  case EntityNotFoundException(id) => NotFound(id)\n  case ex: RepositoryException => InternalServerError\n}.getOrElse(InternalServerError)\n```\n\n```scala\ntrait Repository[ID, E, M[+_]] {\n  def resolveBy(id: ID)(implicit ctx: Ctx): Future[Option[E]]\n}\n\nval response = repository.resolveBy(id).map{ entityOpt =>\n  entityOpt.fold(NotFound(id)(_.toJson)\n}.recover{\n  case ex: RepositoryException => InternalServerError\n}.getOrElse(InternalServerError)\n```\n\n## \u66f8\u304d\u8fbc\u307f\u7cfb\u30e1\u30bd\u30c3\u30c9\n\n### \u623b\u308a\u5024\u3092Unit\u3059\u308b\u65b9\u6cd5\n\n\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u4fdd\u5b58\u3067\u304d\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u4f8b\u5916\u304c\u30b9\u30ed\u30fc\u3055\u308c\u307e\u3059\u3002\u5f15\u6570\u306b\u6e21\u3057\u305f\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3068\u66f8\u304d\u8fbc\u3093\u3060\u7d50\u679c\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u304c\u7570\u306a\u308b\u5834\u5408\u306fresolveBy\u3067\u518d\u5ea6\u53d6\u5f97\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u526f\u4f5c\u7528\u3092\u8d77\u3053\u3059\u30e1\u30bd\u30c3\u30c9\u3067\u3042\u308a\u3001\u30c6\u30b9\u30bf\u30d3\u30ea\u30c6\u30a3\u304c\u4e0b\u304c\u308b\u306e\u304c\u96e3\u70b9\u3002\n\n```scala\ntrait Repository[ID, E] {\n  def store(entity: E)(implicit ctx: Ctx): Unit\n}\n\nval response = try {\n  repository.store(entity)\n  Ok(repository.resolveBy(entity.id))\n} catch {\n  case ex: RepositoryException => InternalServerError\n}\n```\n\n## \u4fdd\u5b58\u3055\u308c\u305f\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u8fd4\u3059\u65b9\u6cd5\n\n\u5024\u3092\u8fd4\u3059\u304c\u4ee5\u524d\u3068\u3057\u3066\u3001\u526f\u4f5c\u7528\u3092\u8d77\u3053\u3059\u30e1\u30bd\u30c3\u30c9\u3067\u3042\u308a\u3001\u30c6\u30b9\u30bf\u30d3\u30ea\u30c6\u30a3\u304c\u4e0b\u304c\u308b\u3002\n\n```scala\ntrait Repository[ID, E] {\n  def store(entity: E)(implicit ctx: Ctx): E\n}\n\nval response = try {\n  Ok(repository.store(entity).toJson)\n} catch {\n  case ex: RepositoryException => InternalServerError\n}\n```\n\n## \u65b0\u3057\u3044\u30ea\u30dd\u30b8\u30c8\u30ea\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u8fd4\u3059\u65b9\u6cd5\n\nState\u30e2\u30ca\u30c9\u306e\u5fdc\u7528\u4f8b\u3068\u3057\u3066\u3001\u65b0\u3057\u3044\u30ea\u30dd\u30b8\u30c8\u30ea\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u8fd4\u3059\u3053\u3068\u306b\u3088\u3063\u3066\u3001\u7d14\u7c8b\u95a2\u6570\u5316\u3057\u30c6\u30b9\u30bf\u30d3\u30ea\u30c6\u30a3\u3092\u5411\u4e0a\u3055\u305b\u308b\u65b9\u6cd5\u3002\u3053\u308c\u306b\u3088\u3063\u3066\u4e0d\u5909\u30ea\u30dd\u30b8\u30c8\u30ea\u304c\u5b9f\u88c5\u53ef\u80fd\u306b\u306a\u308b(DBMS\u306a\u3069\u4e0d\u5909\u3068\u306e\u76f8\u6027\u304c\u60aa\u3044\u5b9f\u88c5\u306e\u5834\u5408\u306f\u3001\u53ef\u5909\u30ea\u30dd\u30b8\u30c8\u30ea\u3068\u3057\u3066\u3001(this, storedEntity) \u3068\u3057\u3066Unit\u3092\u8fd4\u3059\u5909\u308f\u308a\u306bthis\u3092\u8fd4\u3059\u3068\u3088\u3044)\u3002\n\n```scala\ntrait Repository[ID, E] {\n  def store(entity: E)(implicit ctx: Ctx): (Repository[ID, E], E)\n}\n\nval response = try {\n  val (newRepo, storedEntity) = repository.store(entity))\n  // \u5fc5\u8981\u306b\u5fdc\u3058\u3066 newRepository.store, resolveBy \u306a\u3069\n  Ok(storedEntity.toJson)\n} catch {\n  case ex: RepositoryException => InternalServerError\n}\n```\n\n## Etiher\u578b\u306b\u30e9\u30c3\u30d7\u3059\u308b\u65b9\u6cd5\n\n```scala\ntrait Repository[ID, E] {\n  def store(entity: E)(implicit ctx: Ctx): Either[Error, (Repository[ID, E], E)]\n}\n\nrepository.store(entity).fold({\n  case ex: RepositoryException => InternalServerError\n},{ (newRepo, storedEntity) =>\n  // \u5fc5\u8981\u306b\u5fdc\u3058\u3066 newRepository.store, resolveBy \u306a\u3069\n  Ok(storedEntity.toJson)\n})\n```\n\n## Try\u578b\u306b\u30e9\u30c3\u30d7\u3059\u308b\u65b9\u6cd5\n\n```scala\ntrait Repository[ID, E] {\n  def store(entity: E)(implicit ctx: Ctx): Try[(Repository[ID, E], E)]\n}\n\nrepository.store(entity).map{ (newRepo, storedEntity) =>\n  // \u5fc5\u8981\u306b\u5fdc\u3058\u3066 newRepository.store, resolveBy \u306a\u3069\n  Ok(storedEntity.toJson)\n}.recovery{\n  case ex: RepositoryException => InternalServerError\n}\n```\n\n## Future\u578b\u3067\u30e9\u30c3\u30d7\u3059\u308b\u65b9\u6cd5\n\n```scala\ntrait Repository[ID, E] {\n  def store(entity: E)(implicit ctx: Ctx): Future[(Repository[ID, E], E)]\n}\n\nrepository.store(entity).map{ (newRepo, storedEntity) =>\n  // \u5fc5\u8981\u306b\u5fdc\u3058\u3066 newRepository.store, resolveBy \u306a\u3069\n  Ok(storedEntity.toJson)\n}.recovery{\n  case ex: RepositoryException => InternalServerError\n}\n```\n\n\u306a\u3069\u306a\u3069\u3001\u6319\u3052\u308c\u3070\u304d\u308a\u304c\u306a\u3044\u306e\u3067\u3059\u304c\u2026\u3002\n\n## Scalaz\n\nScalaz\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u304b\u306d\u3002\n\n```scala\ntrait Repository[ID, E] {\n  def store(entity: E)(implicit ctx: Ctx): \\/[Error, State[Repository[ID, E], E]]\n}\n```\n\n### \u305d\u3057\u3066Free\u30e2\u30ca\u30c9\n\n\u3042\u3068\u306f\u3001Free\u30e2\u30ca\u30c9\u3092\u4f7f\u3046\u65b9\u6cd5\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u306d\u3002\u3053\u3063\u3061\u306e\u304c\u30e2\u30ca\u30c9\u304c\u968e\u5c64\u5316\u3057\u306a\u3044\u3088\u3046\u306b\u3067\u304d\u308b\u306e\u3067\u3088\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002\u5f53\u7136\u3001\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3092\u66f8\u304f\u624b\u9593\u306f\u3042\u308a\u307e\u3059\u304c\u3002\n\nhttps://gist.github.com/xuwei-k/469a2213c7773274272f\n\n\u3042\u3001Operational\u30e2\u30ca\u30c9\u306e\u65b9\u304c\u3088\u3044\u304b\u306a\uff1f\n\n# \u307e\u3068\u3081\n\n\u3068\u306f\u3044\u3048\u3001\u73fe\u72b6 \u4ee5\u4e0b\u3092\u63a1\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n```scala\ntrait Repository[ID, E] {\n  def resolveBy(id: ID)(implicit ctx: Ctx): Try[E]\n  def resolveBy(id: ID)(implicit ctx: Ctx): Future[E]\n  def store(entity: E)(implicit ctx: Ctx): Try[(Repository[ID, E] , E)]\n  def store(entity: E)(implicit ctx: Ctx): Future[(Repository[ID, E] , E)]\n}\n\nval response = (for {\n  (newUserRepo, storedUser) <- userRepository.store(user)\n  (newGroupRepo, storedGroup) <- groupRepository.store(group)\n} yield {\n  Ok(toJson(storedUser, storedGroup))\n}).recover{\n  case ex: RepositoryException => InternalServerError\n}\n```\n\n\u3084\u306f\u308a\u30e2\u30ca\u30c9\u304c\u5165\u308c\u5b50\u69cb\u9020\u306b\u306a\u308b\u3068for\u5f0f\u3084map\u306a\u3069\u304c\u66f8\u304d\u306b\u304f\u304f\u306a\u308b\u306e\u3067\u3001\u3067\u304d\u308b\u3060\u3051\u968e\u5c64\u5316\u3055\u305b\u306a\u3044\u3068\u3044\u3046\u306e\u3068\u3001Try/Future\u306f\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u304c\u4f3c\u3066\u3044\u308b\u306e\u3067\u3001\u540c\u671f\u3084\u975e\u540c\u671f\u306e\u30b3\u30fc\u30c9\u306e\u5207\u308a\u66ff\u3048\u304c\u3057\u3084\u3059\u3044\u304b\u3089\u3067\u3059\u3002\u307e\u3041\u3001\u4f8b\u5916\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3060\u3051\u8003\u3048\u308b\u3068Either\u3067\u3082\u3088\u3044\u304b\u3082\u3002\n\n```scala\ndef resolveBy(id: ID)(implicit ctx: Ctx): Try[E] = Try {\n  sql\"select * from users where id = {id}\"\n    .bindByName('id -> id)\n    .map(convertToEntity)\n    .single\n    .apply()\n    .getOrElse(throw new EntityNotFoundException(id))\n}\n\ndef resolveBy(id: ID)(implicit ctx: Ctx): Future[E] \b= {\n  val executor = getExecutor(ctx)\n  future {\n    internalRepository.resolveBy(id).get\n  }\n}\n```\n", "tags": ["DDD", "Scala"]}