{"context": "Qiita\u3067\u306f\u521d\u3081\u307e\u3057\u3066\u3002\nSwift\u3067PostgreSQL\u306b\u63a5\u7d9a\u3057\u3088\u3046\u3068\u3057\u3066\u82e6\u6226\u3057\u305f\u306e\u3067\u305d\u306e\u30e1\u30e2\u3092\u517c\u306d\u305f\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\n\n\u52d5\u4f5c\u78ba\u8a8d\u74b0\u5883\n\n\n\n\n\u30d0\u30fc\u30b8\u30e7\u30f3\n\n\n\n\nOS\nUbuntu 16.04.1 LTS\n\n\nSwift\nswift-3.0.1-RELEASE(\u516c\u5f0f\u306e\u30d3\u30eb\u30c9\u6e08\u307f\u30d5\u30a1\u30a4\u30eb\u3092\u4f7f\u7528)\n\n\nPostgreSQL\n9.5.5\n\n\n\n\n\n\n\n\u30d0\u30fc\u30b8\u30e7\u30f3\n\n\n\n\nIBM-Swift/Kitura\n1.2.2\n\n\nZewo/PostgreSQL\n0.14.3\n\n\n\n\n\u4e0b\u6e96\u5099\n\u6700\u4f4e\u9650\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u304a\u3044\u3066\u304f\u3060\u3055\u3044\u3002\nsudo apt-get install clang libicu-dev libcurl4-openssl-dev libssl-dev libpq-dev\nSwift\u3068PostgreSQL\u81ea\u4f53\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u306f\u7701\u7565\u3057\u307e\u3059\u304c\u3001\u4e0b\u8a18\u306e\u72b6\u614b\u3068\u60f3\u5b9a\u3057\u3066\u8a71\u3092\u3057\u307e\u3059\u3002\n\nPostgreSQL\n\n\n\u30ed\u30fc\u30eb(\u30e6\u30fc\u30b6\u30fc)\u540d\n\n\nswiftsample\n\n\n\u30d1\u30b9\u30ef\u30fc\u30c9\n\n\nswiftsample\n\n\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u540d\n\n\nswiftsample\n\n\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30b5\u30fc\u30d0\u30fc\u306eURL\n\n\nlocalhost\n\n\n\n\nSwift\n\n\nPATH\u8a2d\u5b9a\u6e08\u307f\n\n\n\n\u305d\u3057\u3066\u3001swiftsample\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u4e0a\u3067\u3001\u4ee5\u4e0b\u306e\u30af\u30a8\u30ea\u304c\u5b9f\u884c\u6e08\u307f\u306e\u72b6\u614b\u3067\u3059\u3002\nCREATE TABLE IF NOT EXISTS profiles (\n  user_id INT NOT NULL PRIMARY KEY,\n  name text NOT NULL\n);\nINSERT INTO profiles(user_id,name) VALUES\n(1,'Taro Tanaka'),\n(2,'Jiro Yamada'),\n(3,'Saburo Kato'),\n(4,'Shiro Sato'),\n(5,'Goro Watanabe');\n\n\n\u5b9f\u969b\u306b\u3084\u3063\u3066\u307f\u308b\nSwift Package Manager\u3092\u5229\u7528\u3059\u308b\u305f\u3081\u306b\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u305f\u3044\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3078\u79fb\u52d5\u6e08\u307f\u306e\u30bf\u30fc\u30df\u30ca\u30eb\u3067\nswift package init --type executable\n\u3092\u5b9f\u884c\u3002\n\u5b9f\u884c\u3057\u305f\u3089\u305d\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306bPackage.swift\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3084Source\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306a\u3069\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\nPackage.swift\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nPackage.swift\nimport PackageDescription\n\nlet package = Package(\n    name: \"your package name\",\n    dependencies: [\n        .Package(url: \"https://github.com/IBM-Swift/Kitura.git\", majorVersion: 1, minor: 2),\n        .Package(url: \"https://github.com/Zewo/PostgreSQL.git\", majorVersion: 0, minor: 14)\n    ]\n)\n\n\nSources\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u79fb\u52d5\u3057\u3066\u3001Data.swift\u3092\u4f5c\u6210\u3057\u3001\u6b21\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\nData.swift\nimport SQL\n\nimport Foundation\n\nenum SampleField: String, ModelField {\n  case userId = \"user_id\"\n  case name = \"name\"\n\n  static let tableName: String = \"profiles\"\n  static let primaryKey: SampleField = .userId\n}\n\nstruct Sample {\n  let userId:Int\n  let name:String\n}\n\nextension Sample: ModelProtocol {\n    typealias Field = SampleField\n    typealias PrimaryKey = Int\n\n    func serialize() -> [Field : ValueConvertible?] {\n        return [\n            .userId: userId,\n            .name: name\n        ]\n    }\n\n    init<Row: RowProtocol>(row: TableRow<Sample, Row>) throws {\n        userId = try row.value(.userId)\n        name = try row.value(.name)\n    }\n}\n\n\n\u6b21\u306b\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3042\u308bmain.swift\u3092\u6b21\u306e\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\nmain.swift\nimport Kitura\nimport SQL\nimport PostgreSQL\nimport SwiftyJSON\n\nimport Foundation\n\nlet user = \"swiftsample\"\nlet password = \"swiftsample\"\nlet dbUrl = \"localhost\"\nlet dbName = \"swiftsample\"\n\nenum SampleError: Error {\n  case urlNilError // URL\u304cnil\u3060\u3063\u305f\u3068\u304d\n}\n\ndo{\n  guard let url = URL(string: \"postgres://\\(user):\\(password)@\\(dbUrl):5432/\\(dbName)\") else {\n    throw SampleError.urlNilError\n  }\n  let db = try PostgreSQL.Connection(info: .init(url))\n  try db.open()\n  let getDatabase:((RouterRequest,RouterResponse)->()) = { request,response in\n    do{\n      let fetch:[PersistedEntity<Sample>]\n      if let id = request.parameters[\"id\"] {\n        fetch = try Entity<Sample>.fetch(where: SampleField.userId == id,connection: db)\n      }else{\n        fetch = try Entity<Sample>.fetchAll(connection: db)\n      }\n      var arr:[[String:Any]] = []\n      fetch.forEach{ entity in\n        let model = entity.model\n        let id = model.userId\n        let name = model.name\n        arr.append([\n          \"user_id\":id,\n          \"name\":name\n        ])\n      }\n      try response.send(json: JSON(arr)).end()\n    }catch(let e){\n      print(\"[\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u3088\uff01]\")\n      print(e)\n    }\n  }\n  let router = Router()\n  router.get(\"/:id(\\\\d+)\") { request, response, _ in\n    getDatabase(request,response)\n  }\n  router.get(\"/\") { request, response, _ in\n    getDatabase(request,response)\n  }\n  Kitura.addHTTPServer(onPort: 8090, with: router)\n  Kitura.run()\n}catch(let e){\n  print(\"[\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u3088\uff01]\")\n  print(e)\n}\n\n\n\u3042\u3068\u306f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30eb\u30fc\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea(Package.swift\u304c\u3042\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea)\u3067\u30d3\u30eb\u30c9\u30b3\u30de\u30f3\u30c9\u306e\nswift build -Xcc -I/usr/include/postgresql\n\u3092\u5b9f\u884c\u3057\u3066\u3001\u30a8\u30e9\u30fc\u304c\u306a\u304f\u3001\u6b63\u5e38\u306b\u30d3\u30eb\u30c9\u3055\u308c\u305f\u5834\u5408\u306f\n(\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30eb\u30fc\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea)/.build/debug/(\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d)\n\u3092\u5b9f\u884c\u3059\u308b\u3068HTTP\u30b5\u30fc\u30d0\u30fc\u304c8090\u756a\u30dd\u30fc\u30c8\u3067\u7acb\u3061\u4e0a\u304c\u308a\u307e\u3059\u3002\n\u5b9f\u969b\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u307f\u308b\u3068JSON\u304c\u5410\u304d\u51fa\u3055\u308c\u308b\u3063\u3066\u3044\u3046\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\u4ee5\u4e0a\u3067\u3059\u3002\n\n\u53c2\u8003\u306b\u3057\u305f\u30da\u30fc\u30b8\nZewo\u3092\u7528\u3044\u3066\u30b5\u30fc\u30d0\u30b5\u30a4\u30c9\u3067Swift\u3092\u5229\u7528\u3059\u308b\nQiita\u3067\u306f\u521d\u3081\u307e\u3057\u3066\u3002\nSwift\u3067PostgreSQL\u306b\u63a5\u7d9a\u3057\u3088\u3046\u3068\u3057\u3066\u82e6\u6226\u3057\u305f\u306e\u3067\u305d\u306e\u30e1\u30e2\u3092\u517c\u306d\u305f\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\n\n# \u52d5\u4f5c\u78ba\u8a8d\u74b0\u5883\n|  | \u30d0\u30fc\u30b8\u30e7\u30f3 |\n|:--|:--|\n|OS|Ubuntu 16.04.1 LTS|\n|Swift|swift-3.0.1-RELEASE(\u516c\u5f0f\u306e\u30d3\u30eb\u30c9\u6e08\u307f\u30d5\u30a1\u30a4\u30eb\u3092\u4f7f\u7528)|\n|PostgreSQL|9.5.5|\n\n|  | \u30d0\u30fc\u30b8\u30e7\u30f3 |\n|:--|:--|\n|IBM-Swift/Kitura|1.2.2|\n|Zewo/PostgreSQL|0.14.3|\n\n# \u4e0b\u6e96\u5099\n\u6700\u4f4e\u9650\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u304a\u3044\u3066\u304f\u3060\u3055\u3044\u3002\n```sudo apt-get install clang libicu-dev libcurl4-openssl-dev libssl-dev libpq-dev```\n\nSwift\u3068PostgreSQL\u81ea\u4f53\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u306f\u7701\u7565\u3057\u307e\u3059\u304c\u3001\u4e0b\u8a18\u306e\u72b6\u614b\u3068\u60f3\u5b9a\u3057\u3066\u8a71\u3092\u3057\u307e\u3059\u3002\n \n- PostgreSQL\n    - \u30ed\u30fc\u30eb(\u30e6\u30fc\u30b6\u30fc)\u540d\n        - swiftsample\n    - \u30d1\u30b9\u30ef\u30fc\u30c9\n        - swiftsample\n    - \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u540d\n        - swiftsample\n    - \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30b5\u30fc\u30d0\u30fc\u306eURL\n        - localhost\n- Swift\n    - PATH\u8a2d\u5b9a\u6e08\u307f\n\n\u305d\u3057\u3066\u3001swiftsample\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u4e0a\u3067\u3001\u4ee5\u4e0b\u306e\u30af\u30a8\u30ea\u304c\u5b9f\u884c\u6e08\u307f\u306e\u72b6\u614b\u3067\u3059\u3002\n\n```postgres\nCREATE TABLE IF NOT EXISTS profiles (\n  user_id INT NOT NULL PRIMARY KEY,\n  name text NOT NULL\n);\nINSERT INTO profiles(user_id,name) VALUES\n(1,'Taro Tanaka'),\n(2,'Jiro Yamada'),\n(3,'Saburo Kato'),\n(4,'Shiro Sato'),\n(5,'Goro Watanabe');\n```\n\n# \u5b9f\u969b\u306b\u3084\u3063\u3066\u307f\u308b\nSwift Package Manager\u3092\u5229\u7528\u3059\u308b\u305f\u3081\u306b\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u305f\u3044\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3078\u79fb\u52d5\u6e08\u307f\u306e\u30bf\u30fc\u30df\u30ca\u30eb\u3067\n```swift package init --type executable```\n\u3092\u5b9f\u884c\u3002\n\u5b9f\u884c\u3057\u305f\u3089\u305d\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306bPackage.swift\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3084Source\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306a\u3069\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\nPackage.swift\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```swift:Package.swift\nimport PackageDescription\n\nlet package = Package(\n    name: \"your package name\",\n    dependencies: [\n        .Package(url: \"https://github.com/IBM-Swift/Kitura.git\", majorVersion: 1, minor: 2),\n        .Package(url: \"https://github.com/Zewo/PostgreSQL.git\", majorVersion: 0, minor: 14)\n    ]\n)\n```\n\nSources\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u79fb\u52d5\u3057\u3066\u3001Data.swift\u3092\u4f5c\u6210\u3057\u3001\u6b21\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n```swift:Data.swift\nimport SQL\n\nimport Foundation\n\nenum SampleField: String, ModelField {\n  case userId = \"user_id\"\n  case name = \"name\"\n\n  static let tableName: String = \"profiles\"\n  static let primaryKey: SampleField = .userId\n}\n\nstruct Sample {\n  let userId:Int\n  let name:String\n}\n\nextension Sample: ModelProtocol {\n    typealias Field = SampleField\n    typealias PrimaryKey = Int\n\n    func serialize() -> [Field : ValueConvertible?] {\n        return [\n            .userId: userId,\n            .name: name\n        ]\n    }\n\n    init<Row: RowProtocol>(row: TableRow<Sample, Row>) throws {\n        userId = try row.value(.userId)\n        name = try row.value(.name)\n    }\n}\n```\n\n\u6b21\u306b\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3042\u308bmain.swift\u3092\u6b21\u306e\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n```swift:main.swift\nimport Kitura\nimport SQL\nimport PostgreSQL\nimport SwiftyJSON\n\nimport Foundation\n\nlet user = \"swiftsample\"\nlet password = \"swiftsample\"\nlet dbUrl = \"localhost\"\nlet dbName = \"swiftsample\"\n\nenum SampleError: Error {\n  case urlNilError // URL\u304cnil\u3060\u3063\u305f\u3068\u304d\n}\n\ndo{\n  guard let url = URL(string: \"postgres://\\(user):\\(password)@\\(dbUrl):5432/\\(dbName)\") else {\n    throw SampleError.urlNilError\n  }\n  let db = try PostgreSQL.Connection(info: .init(url))\n  try db.open()\n  let getDatabase:((RouterRequest,RouterResponse)->()) = { request,response in\n    do{\n      let fetch:[PersistedEntity<Sample>]\n      if let id = request.parameters[\"id\"] {\n        fetch = try Entity<Sample>.fetch(where: SampleField.userId == id,connection: db)\n      }else{\n        fetch = try Entity<Sample>.fetchAll(connection: db)\n      }\n      var arr:[[String:Any]] = []\n      fetch.forEach{ entity in\n        let model = entity.model\n        let id = model.userId\n        let name = model.name\n        arr.append([\n          \"user_id\":id,\n          \"name\":name\n        ])\n      }\n      try response.send(json: JSON(arr)).end()\n    }catch(let e){\n      print(\"[\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u3088\uff01]\")\n      print(e)\n    }\n  }\n  let router = Router()\n  router.get(\"/:id(\\\\d+)\") { request, response, _ in\n    getDatabase(request,response)\n  }\n  router.get(\"/\") { request, response, _ in\n    getDatabase(request,response)\n  }\n  Kitura.addHTTPServer(onPort: 8090, with: router)\n  Kitura.run()\n}catch(let e){\n  print(\"[\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u3088\uff01]\")\n  print(e)\n}\n```\n\n\u3042\u3068\u306f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30eb\u30fc\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea(Package.swift\u304c\u3042\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea)\u3067\u30d3\u30eb\u30c9\u30b3\u30de\u30f3\u30c9\u306e\n```swift build -Xcc -I/usr/include/postgresql```\n\u3092\u5b9f\u884c\u3057\u3066\u3001\u30a8\u30e9\u30fc\u304c\u306a\u304f\u3001\u6b63\u5e38\u306b\u30d3\u30eb\u30c9\u3055\u308c\u305f\u5834\u5408\u306f\n```(\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30eb\u30fc\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea)/.build/debug/(\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d)```\n\u3092\u5b9f\u884c\u3059\u308b\u3068HTTP\u30b5\u30fc\u30d0\u30fc\u304c8090\u756a\u30dd\u30fc\u30c8\u3067\u7acb\u3061\u4e0a\u304c\u308a\u307e\u3059\u3002\n\u5b9f\u969b\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u307f\u308b\u3068JSON\u304c\u5410\u304d\u51fa\u3055\u308c\u308b\u3063\u3066\u3044\u3046\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u4ee5\u4e0a\u3067\u3059\u3002\n\n#\u53c2\u8003\u306b\u3057\u305f\u30da\u30fc\u30b8\n[Zewo\u3092\u7528\u3044\u3066\u30b5\u30fc\u30d0\u30b5\u30a4\u30c9\u3067Swift\u3092\u5229\u7528\u3059\u308b](http://qiita.com/shingt/items/0e61962b10375fe28abc)\n", "tags": ["Swift", "Swift3.0", "PostgreSQL", "Kitura"]}