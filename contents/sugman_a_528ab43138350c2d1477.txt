{"context": "\u73fe\u5730\u3067\u7d42\u308f\u3089\u305a\u3001\u6301\u3061\u5e30\u3063\u3066\u89e3\u3044\u305f\u3002\n\u73fe\u5730\u3067\u306fL\u5b57\u30de\u30b9\u3092\u8003\u616e\u306b\u3044\u308c\u3066\u3044\u306a\u304f\u3066\u89e3\u3051\u306a\u304b\u3063\u305f\u3002\n\u3068\u308a\u3042\u3048\u305a\u3001\u73fe\u5730\u3067\u89e3\u3044\u3066\u3044\u305f\u6642\u306e\u5185\u5bb9\u3092\u3067\u304d\u308b\u3060\u3051\u5909\u3048\u306a\u3044\u3088\u3046\u306b\u3057\u306a\u304c\u3089L\u5b57\u306b\u3082\u5bfe\u5fdc\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3064\u3082\u308a\u3002\n\nYhpg.java\n\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class Yhpg {\n\n    public int[] solve(String input){\n\n        String[] data = input.split(\"/\");\n        for(int i = 0; i < data.length; i++){\n            //\uff18\u6587\u5b57\u306b\u306a\u308b\u3088\u3046\u306b\u30bc\u30ed\u3046\u3081\n            String zero = \"0000000\";\n            data[i] = zero + Integer.toBinaryString(Integer.parseInt(data[i],16));\n            data[i] = data[i].substring(data[i].length()-8, data[i].length());\n        }\n\n        //\u7e26\u691c\u7d22\u7528\u306e\u914d\u5217\u4f5c\u6210\n        String[] data2 = makeDataForTate(data);\n\n        int blackCount= 0;\n        int whiteCount = 0;\n\n        for( int y = 0; y < data.length; y++){\n            // \u6a2a\u5217\u306e\u6570\u3092\u30ab\u30a6\u30f3\u30c8\n            blackCount += searchBlack(y, data[y], data);\n            whiteCount += searchWhite(y, data[y], data);\n\n            // \u7e26\u5217\u306e\u6570\u3092\u30ab\u30a6\u30f3\u30c8\n            blackCount += searchBlack(y, data2[y], data2);\n            whiteCount += searchWhite(y, data2[y], data2);\n        }\n\n        System.out.println(whiteCount + \",\" + blackCount);\n        int result[] = {whiteCount,blackCount};\n        return result;\n    }\n\n    private int searchBlack(int y, String data, String[] allData){\n        // 1\u306e\u5024\u304c\u6a2a\u306b2\u500b\u3060\u3051\u4e26\u3093\u3067\u3044\u308b\u306e\u3092\u30ab\u30a6\u30f3\u30c8\n        int count = 0;;\n\n        // \u5148\u982d\u304c\u30de\u30c3\u30c1\u3059\u308b\u304b\n        String regex = \"^110\";\n        Pattern p = Pattern.compile(regex);\n        Matcher m = p.matcher(data);\n\n        if( m.find()){\n            if( (isSeparate(m.start(), y,  allData, '1') == true)  && (isSeparate(m.start()+1, y,  allData, '1') == true) ){\n                count++;\n            }\n        }\n\n        // \u672b\u5c3e\n        regex = \"011$\";\n        p = Pattern.compile(regex);\n        m = p.matcher(data);\n        if( m.find()){\n            if( (isSeparate(m.start()+1, y,  allData, '1') == true)  && (isSeparate(m.start()+2, y,  allData, '1') == true) ){\n                count++;\n            }\n        }\n\n        //\u3000\u4e2d\u9593\n        regex = \"0110\";\n        p = Pattern.compile(regex);\n        m = p.matcher(data);\n        for( int i = 0; i< data.length();i++){\n            if(m.find(i)){\n                if( (isSeparate(m.start()+1, y,  allData, '1') == true)  && (isSeparate(m.start()+2, y,  allData, '1') == true) ){\n                    count++;\n                    i+=m.start();\n                }\n            }\n        }\n\n        return count;\n\n    }\n    private int searchWhite(int y, String data,String[] allData){\n        // 0\u306e\u5024\u304c\u6a2a\u306b2\u500b\u3060\u3051\u4e26\u3093\u3067\u3044\u308b\u306e\u3092\u30ab\u30a6\u30f3\u30c8\n        int count = 0;;\n\n        // \u5148\u982d\u304c\u30de\u30c3\u30c1\u3059\u308b\u304b\n        String regex = \"^001\";\n        Pattern p = Pattern.compile(regex);\n        Matcher m = p.matcher(data);\n        if( m.find()){\n            if( (isSeparate(m.start(), y,  allData, '0') == true)  && (isSeparate(m.start()+1, y,  allData, '0') == true) ){\n                count++;\n            }\n        }\n\n        // \u672b\u5c3e\n        regex = \"100$\";\n        p = Pattern.compile(regex);\n        m = p.matcher(data);\n        if( m.find()){\n            if( (isSeparate(m.start()+1, y,  allData, '0') == true)  && (isSeparate(m.start()+2, y,  allData, '0') == true) ){\n                count++;\n            }\n        }\n\n        //\u3000\u4e2d\u9593\n        regex = \"1001\";\n        p = Pattern.compile(regex);\n        m = p.matcher(data);\n\n        for( int i = 0; i< data.length();i++){\n            if(m.find(i)){\n                if( (isSeparate(m.start()+1, y,  allData, '0') == true)  && (isSeparate(m.start()+2, y,  allData, '0') == true) ){\n                    count++;\n                    i+=m.start();\n                }\n            }\n        }\n        return count;\n    }\n\n    // \u6307\u5b9a\u3057\u305f\u30de\u30b9\u304c\u5b64\u7acb\u3057\u3066\u308b\u304b\u3069\u3046\u304b\u898b\u308b\n    // \uff12\u30de\u30b9\u3060\u3051\u4e26\u3093\u3067\u305f\u969b\u306e\u5de6\u5074\u306e\u4e0a\u4e0b\u304c\u5225\u306e\u8272\u306a\u3089true\n    // \u540c\u3058\u8272\u304c\u542b\u307e\u308c\u3066\u3044\u305f\u3089false\u3092\u8fd4\u3059\n    private boolean isSeparate(int x,int y, String[] data, char target){\n        // \u4e0a\u5074\u30c1\u30a7\u30c3\u30af\n        if( !(y == 0) ){    //\u6700\u4e0a\u90e8\u3060\u3063\u305f\u3089\u4e0a\u5074\u30c1\u30a7\u30c3\u30af\u306f\u30b9\u30eb\u30fc\n            if( (data[y-1].charAt(x) == target)){\n                return false;\n            }\n        }\n        // \u5de6\u5074\u53f3\u5074\u30c1\u30a7\u30c3\u30af\u306f\u6b63\u898f\u8868\u73fe\u3067\u540c\u3058\u8272\u306b\u306a\u3063\u3066\u308b\u3053\u3068\u306f\u306a\u3044\u306f\u305a\u306a\u306e\u3067\u3001\u3084\u3089\u306a\u3044\u3053\u3068\u306b\u3057\u305f\n        // \u4e0b\u5074\u30c1\u30a7\u30c3\u30af\n        if ( (y < data.length -1) ){    // \u6700\u4e0b\u90e8\u3060\u3063\u305f\u3089\u4e0b\u5074\u30c1\u30a7\u30c3\u30af\u306f\u30b9\u30eb\n            if( (data[y+1].charAt(x) == target)){\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private String[] makeDataForTate(String[] data){\n        String[] result = {\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"};\n        for( int y = 0; y < data.length; y++){\n            for(int x = 0; x < data[y].length(); x++){\n                result[y] += data[x].charAt(y);\n            }\n        }\n        return result;\n    }\n}\n\n\n\n\nYhpgTest.java\nimport static org.junit.Assert.*;\n\nimport org.junit.Test;\n\npublic class YhpgTest{\n\n    @Test\n    public void yhpgTest(){\n        Yhpg yhpg = new Yhpg();\n\n        assertArrayEquals(new int[]{2,3} , yhpg.solve(\"dc/bc/a7/59/03/d5/d4/ea\"));\n        assertArrayEquals(new int[]{0,0}, yhpg.solve(\"ff/ff/ff/ff/ff/ff/ff/ff\"));\n        assertArrayEquals(new int[]{0,0}, yhpg.solve(\"00/00/00/00/00/00/00/00\"));\n        assertArrayEquals(new int[]{16,16}, yhpg.solve(\"cc/33/cc/33/cc/33/cc/33\"));\n        assertArrayEquals(new int[]{16,16}, yhpg.solve(\"aa/aa/55/55/aa/aa/55/55\"));\n        assertArrayEquals(new int[]{8,8}, yhpg.solve(\"ac/a3/5c/53/ca/3a/c5/35\"));\n        assertArrayEquals(new int[]{0,13}, yhpg.solve(\"db/00/db/00/db/00/aa/aa\"));\n        assertArrayEquals(new int[]{0,12}, yhpg.solve(\"24/24/db/24/24/db/24/24\"));\n        assertArrayEquals(new int[]{3,2}, yhpg.solve(\"d7/d7/e9/f1/f7/de/60/56\"));\n        assertArrayEquals(new int[]{2,2}, yhpg.solve(\"17/7d/64/9b/a5/39/53/a6\"));\n        assertArrayEquals(new int[]{1,2}, yhpg.solve(\"bb/8f/18/fb/89/c2/c7/35\"));\n        assertArrayEquals(new int[]{2,2}, yhpg.solve(\"6d/63/20/08/54/cd/32/4f\"));\n        assertArrayEquals(new int[]{2,2}, yhpg.solve(\"a9/ca/cd/46/99/e6/f0/30\"));\n        assertArrayEquals(new int[]{1,2}, yhpg.solve(\"5b/70/fd/45/e2/a1/ab/9a\"));\n        assertArrayEquals(new int[]{2,1}, yhpg.solve(\"24/e4/a8/12/e1/a6/3f/f3\"));\n        assertArrayEquals(new int[]{2,2}, yhpg.solve(\"79/32/2e/07/d5/10/e7/9d\"));\n        assertArrayEquals(new int[]{4,2}, yhpg.solve(\"60/bc/ab/ec/1f/eb/63/2c\"));\n        assertArrayEquals(new int[]{6,1}, yhpg.solve(\"a5/dd/92/4e/67/c6/dc/34\"));\n        assertArrayEquals(new int[]{3,2}, yhpg.solve(\"aa/96/6d/67/d2/a8/ac/90\"));\n        assertArrayEquals(new int[]{4,0}, yhpg.solve(\"95/72/7d/5c/47/dc/ef/99\"));\n        assertArrayEquals(new int[]{2,1}, yhpg.solve(\"17/d6/6a/27/1f/25/26/b8\"));\n        assertArrayEquals(new int[]{1,2}, yhpg.solve(\"f0/f3/76/c5/31/ca/6b/ae\"));\n        assertArrayEquals(new int[]{1,4}, yhpg.solve(\"01/59/26/fa/8c/70/12/cd\"));\n        assertArrayEquals(new int[]{0,5}, yhpg.solve(\"1a/c3/1f/0b/83/b6/81/0d\"));\n        assertArrayEquals(new int[]{1,2}, yhpg.solve(\"4c/49/05/cf/54/bb/1f/da\"));\n        assertArrayEquals(new int[]{0,7}, yhpg.solve(\"eb/7c/d5/09/2a/c2/14/6b\"));\n        assertArrayEquals(new int[]{1,3}, yhpg.solve(\"b4/d3/4c/c4/ed/19/e8/63\"));\n        assertArrayEquals(new int[]{2,4}, yhpg.solve(\"bd/bc/6d/60/9b/00/9a/32\"));\n        assertArrayEquals(new int[]{2,2}, yhpg.solve(\"94/97/3f/e3/c7/06/15/c0\"));\n        assertArrayEquals(new int[]{2,2}, yhpg.solve(\"5f/1d/67/16/b8/f7/0a/2a\"));\n        assertArrayEquals(new int[]{3,0}, yhpg.solve(\"df/e6/f9/4f/59/e9/1f/ee\"));\n        assertArrayEquals(new int[]{3,2}, yhpg.solve(\"5a/53/9a/9a/73/b4/37/07\"));\n        assertArrayEquals(new int[]{2,3}, yhpg.solve(\"bd/87/7c/e7/c0/37/82/da\"));\n        assertArrayEquals(new int[]{2,2}, yhpg.solve(\"3d/c0/13/ac/57/3d/15/78\"));\n        assertArrayEquals(new int[]{0,3}, yhpg.solve(\"63/64/54/3a/40/28/4e/4e\"));\n        assertArrayEquals(new int[]{1,4}, yhpg.solve(\"f6/81/c9/15/00/4c/a0/a8\"));\n        assertArrayEquals(new int[]{4,2}, yhpg.solve(\"19/41/df/f8/e3/74/6b/9b\"));\n        assertArrayEquals(new int[]{1,5}, yhpg.solve(\"d5/0b/dd/35/3b/d2/0b/6b\"));\n        assertArrayEquals(new int[]{0,0}, yhpg.solve(\"08/b7/91/f3/6e/3c/74/a0\"));\n        assertArrayEquals(new int[]{0,0}, yhpg.solve(\"b8/a8/b4/a6/93/2c/94/3f\"));\n        assertArrayEquals(new int[]{0,0}, yhpg.solve(\"88/22/21/ee/dc/19/43/01\"));\n        assertArrayEquals(new int[]{0,0}, yhpg.solve(\"e1/ee/35/bc/fc/00/8e/fe\"));\n        assertArrayEquals(new int[]{0,0}, yhpg.solve(\"3c/42/63/5f/27/47/07/90\"));\n\n    }\n}\n\n\n\n\u73fe\u5730\u3067\u7d42\u308f\u3089\u305a\u3001\u6301\u3061\u5e30\u3063\u3066\u89e3\u3044\u305f\u3002\n\n\u73fe\u5730\u3067\u306fL\u5b57\u30de\u30b9\u3092\u8003\u616e\u306b\u3044\u308c\u3066\u3044\u306a\u304f\u3066\u89e3\u3051\u306a\u304b\u3063\u305f\u3002\n\u3068\u308a\u3042\u3048\u305a\u3001\u73fe\u5730\u3067\u89e3\u3044\u3066\u3044\u305f\u6642\u306e\u5185\u5bb9\u3092\u3067\u304d\u308b\u3060\u3051\u5909\u3048\u306a\u3044\u3088\u3046\u306b\u3057\u306a\u304c\u3089L\u5b57\u306b\u3082\u5bfe\u5fdc\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3064\u3082\u308a\u3002\n\n```java:Yhpg.java\n\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class Yhpg {\n\n\tpublic int[] solve(String input){\n\n\t\tString[] data = input.split(\"/\");\n\t\tfor(int i = 0; i < data.length; i++){\n\t\t\t//\uff18\u6587\u5b57\u306b\u306a\u308b\u3088\u3046\u306b\u30bc\u30ed\u3046\u3081\n\t\t\tString zero = \"0000000\";\n\t\t\tdata[i] = zero + Integer.toBinaryString(Integer.parseInt(data[i],16));\n\t\t\tdata[i] = data[i].substring(data[i].length()-8, data[i].length());\n\t\t}\n\n\t\t//\u7e26\u691c\u7d22\u7528\u306e\u914d\u5217\u4f5c\u6210\n\t\tString[] data2 = makeDataForTate(data);\n\n\t\tint blackCount= 0;\n\t\tint whiteCount = 0;\n\n\t\tfor( int y = 0; y < data.length; y++){\n\t\t\t// \u6a2a\u5217\u306e\u6570\u3092\u30ab\u30a6\u30f3\u30c8\n\t\t\tblackCount += searchBlack(y, data[y], data);\n\t\t\twhiteCount += searchWhite(y, data[y], data);\n\n\t\t\t// \u7e26\u5217\u306e\u6570\u3092\u30ab\u30a6\u30f3\u30c8\n\t\t\tblackCount += searchBlack(y, data2[y], data2);\n\t\t\twhiteCount += searchWhite(y, data2[y], data2);\n\t\t}\n\n\t\tSystem.out.println(whiteCount + \",\" + blackCount);\n\t\tint result[] = {whiteCount,blackCount};\n\t\treturn result;\n\t}\n\n\tprivate int searchBlack(int y, String data, String[] allData){\n\t\t// 1\u306e\u5024\u304c\u6a2a\u306b2\u500b\u3060\u3051\u4e26\u3093\u3067\u3044\u308b\u306e\u3092\u30ab\u30a6\u30f3\u30c8\n\t\tint count = 0;;\n\n\t\t// \u5148\u982d\u304c\u30de\u30c3\u30c1\u3059\u308b\u304b\n\t\tString regex = \"^110\";\n\t\tPattern p = Pattern.compile(regex);\n\t\tMatcher m = p.matcher(data);\n\n\t\tif( m.find()){\n\t\t\tif( (isSeparate(m.start(), y,  allData, '1') == true)  && (isSeparate(m.start()+1, y,  allData, '1') == true) ){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\n\t\t// \u672b\u5c3e\n\t\tregex = \"011$\";\n\t\tp = Pattern.compile(regex);\n\t\tm = p.matcher(data);\n\t\tif( m.find()){\n\t\t\tif( (isSeparate(m.start()+1, y,  allData, '1') == true)  && (isSeparate(m.start()+2, y,  allData, '1') == true) ){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\n\t\t//\u3000\u4e2d\u9593\n\t\tregex = \"0110\";\n\t\tp = Pattern.compile(regex);\n\t\tm = p.matcher(data);\n\t\tfor( int i = 0; i< data.length();i++){\n\t\t\tif(m.find(i)){\n\t\t\t\tif( (isSeparate(m.start()+1, y,  allData, '1') == true)  && (isSeparate(m.start()+2, y,  allData, '1') == true) ){\n\t\t\t\t\tcount++;\n\t\t\t\t\ti+=m.start();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn count;\n\n\t}\n\tprivate int searchWhite(int y, String data,String[] allData){\n\t\t// 0\u306e\u5024\u304c\u6a2a\u306b2\u500b\u3060\u3051\u4e26\u3093\u3067\u3044\u308b\u306e\u3092\u30ab\u30a6\u30f3\u30c8\n\t\tint count = 0;;\n\n\t\t// \u5148\u982d\u304c\u30de\u30c3\u30c1\u3059\u308b\u304b\n\t\tString regex = \"^001\";\n\t\tPattern p = Pattern.compile(regex);\n\t\tMatcher m = p.matcher(data);\n\t\tif( m.find()){\n\t\t\tif( (isSeparate(m.start(), y,  allData, '0') == true)  && (isSeparate(m.start()+1, y,  allData, '0') == true) ){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\n\t\t// \u672b\u5c3e\n\t\tregex = \"100$\";\n\t\tp = Pattern.compile(regex);\n\t\tm = p.matcher(data);\n\t\tif( m.find()){\n\t\t\tif( (isSeparate(m.start()+1, y,  allData, '0') == true)  && (isSeparate(m.start()+2, y,  allData, '0') == true) ){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\n\t\t//\u3000\u4e2d\u9593\n\t\tregex = \"1001\";\n\t\tp = Pattern.compile(regex);\n\t\tm = p.matcher(data);\n\n\t\tfor( int i = 0; i< data.length();i++){\n\t\t\tif(m.find(i)){\n\t\t\t\tif( (isSeparate(m.start()+1, y,  allData, '0') == true)  && (isSeparate(m.start()+2, y,  allData, '0') == true) ){\n\t\t\t\t\tcount++;\n\t\t\t\t\ti+=m.start();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n\t// \u6307\u5b9a\u3057\u305f\u30de\u30b9\u304c\u5b64\u7acb\u3057\u3066\u308b\u304b\u3069\u3046\u304b\u898b\u308b\n\t// \uff12\u30de\u30b9\u3060\u3051\u4e26\u3093\u3067\u305f\u969b\u306e\u5de6\u5074\u306e\u4e0a\u4e0b\u304c\u5225\u306e\u8272\u306a\u3089true\n\t// \u540c\u3058\u8272\u304c\u542b\u307e\u308c\u3066\u3044\u305f\u3089false\u3092\u8fd4\u3059\n\tprivate boolean isSeparate(int x,int y, String[] data, char target){\n\t\t// \u4e0a\u5074\u30c1\u30a7\u30c3\u30af\n\t\tif( !(y == 0) ){\t//\u6700\u4e0a\u90e8\u3060\u3063\u305f\u3089\u4e0a\u5074\u30c1\u30a7\u30c3\u30af\u306f\u30b9\u30eb\u30fc\n\t\t\tif( (data[y-1].charAt(x) == target)){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t// \u5de6\u5074\u53f3\u5074\u30c1\u30a7\u30c3\u30af\u306f\u6b63\u898f\u8868\u73fe\u3067\u540c\u3058\u8272\u306b\u306a\u3063\u3066\u308b\u3053\u3068\u306f\u306a\u3044\u306f\u305a\u306a\u306e\u3067\u3001\u3084\u3089\u306a\u3044\u3053\u3068\u306b\u3057\u305f\n\t\t// \u4e0b\u5074\u30c1\u30a7\u30c3\u30af\n\t\tif ( (y < data.length -1) ){\t// \u6700\u4e0b\u90e8\u3060\u3063\u305f\u3089\u4e0b\u5074\u30c1\u30a7\u30c3\u30af\u306f\u30b9\u30eb\n\t\t\tif( (data[y+1].charAt(x) == target)){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate String[] makeDataForTate(String[] data){\n\t\tString[] result = {\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"};\n\t\tfor( int y = 0; y < data.length; y++){\n\t\t\tfor(int x = 0; x < data[y].length(); x++){\n\t\t\t\tresult[y] += data[x].charAt(y);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n\n```\n\n```java:YhpgTest.java\nimport static org.junit.Assert.*;\n\nimport org.junit.Test;\n\npublic class YhpgTest{\n\n\t@Test\n\tpublic void yhpgTest(){\n\t\tYhpg yhpg = new Yhpg();\n\n\t\tassertArrayEquals(new int[]{2,3} , yhpg.solve(\"dc/bc/a7/59/03/d5/d4/ea\"));\n\t\tassertArrayEquals(new int[]{0,0}, yhpg.solve(\"ff/ff/ff/ff/ff/ff/ff/ff\"));\n\t\tassertArrayEquals(new int[]{0,0}, yhpg.solve(\"00/00/00/00/00/00/00/00\"));\n\t\tassertArrayEquals(new int[]{16,16}, yhpg.solve(\"cc/33/cc/33/cc/33/cc/33\"));\n\t\tassertArrayEquals(new int[]{16,16}, yhpg.solve(\"aa/aa/55/55/aa/aa/55/55\"));\n\t\tassertArrayEquals(new int[]{8,8}, yhpg.solve(\"ac/a3/5c/53/ca/3a/c5/35\"));\n\t\tassertArrayEquals(new int[]{0,13}, yhpg.solve(\"db/00/db/00/db/00/aa/aa\"));\n\t\tassertArrayEquals(new int[]{0,12}, yhpg.solve(\"24/24/db/24/24/db/24/24\"));\n\t\tassertArrayEquals(new int[]{3,2}, yhpg.solve(\"d7/d7/e9/f1/f7/de/60/56\"));\n\t\tassertArrayEquals(new int[]{2,2}, yhpg.solve(\"17/7d/64/9b/a5/39/53/a6\"));\n\t\tassertArrayEquals(new int[]{1,2}, yhpg.solve(\"bb/8f/18/fb/89/c2/c7/35\"));\n\t\tassertArrayEquals(new int[]{2,2}, yhpg.solve(\"6d/63/20/08/54/cd/32/4f\"));\n\t\tassertArrayEquals(new int[]{2,2}, yhpg.solve(\"a9/ca/cd/46/99/e6/f0/30\"));\n\t\tassertArrayEquals(new int[]{1,2}, yhpg.solve(\"5b/70/fd/45/e2/a1/ab/9a\"));\n\t\tassertArrayEquals(new int[]{2,1}, yhpg.solve(\"24/e4/a8/12/e1/a6/3f/f3\"));\n\t\tassertArrayEquals(new int[]{2,2}, yhpg.solve(\"79/32/2e/07/d5/10/e7/9d\"));\n\t\tassertArrayEquals(new int[]{4,2}, yhpg.solve(\"60/bc/ab/ec/1f/eb/63/2c\"));\n\t\tassertArrayEquals(new int[]{6,1}, yhpg.solve(\"a5/dd/92/4e/67/c6/dc/34\"));\n\t\tassertArrayEquals(new int[]{3,2}, yhpg.solve(\"aa/96/6d/67/d2/a8/ac/90\"));\n\t\tassertArrayEquals(new int[]{4,0}, yhpg.solve(\"95/72/7d/5c/47/dc/ef/99\"));\n\t\tassertArrayEquals(new int[]{2,1}, yhpg.solve(\"17/d6/6a/27/1f/25/26/b8\"));\n\t\tassertArrayEquals(new int[]{1,2}, yhpg.solve(\"f0/f3/76/c5/31/ca/6b/ae\"));\n\t\tassertArrayEquals(new int[]{1,4}, yhpg.solve(\"01/59/26/fa/8c/70/12/cd\"));\n\t\tassertArrayEquals(new int[]{0,5}, yhpg.solve(\"1a/c3/1f/0b/83/b6/81/0d\"));\n\t\tassertArrayEquals(new int[]{1,2}, yhpg.solve(\"4c/49/05/cf/54/bb/1f/da\"));\n\t\tassertArrayEquals(new int[]{0,7}, yhpg.solve(\"eb/7c/d5/09/2a/c2/14/6b\"));\n\t\tassertArrayEquals(new int[]{1,3}, yhpg.solve(\"b4/d3/4c/c4/ed/19/e8/63\"));\n\t\tassertArrayEquals(new int[]{2,4}, yhpg.solve(\"bd/bc/6d/60/9b/00/9a/32\"));\n\t\tassertArrayEquals(new int[]{2,2}, yhpg.solve(\"94/97/3f/e3/c7/06/15/c0\"));\n\t\tassertArrayEquals(new int[]{2,2}, yhpg.solve(\"5f/1d/67/16/b8/f7/0a/2a\"));\n\t\tassertArrayEquals(new int[]{3,0}, yhpg.solve(\"df/e6/f9/4f/59/e9/1f/ee\"));\n\t\tassertArrayEquals(new int[]{3,2}, yhpg.solve(\"5a/53/9a/9a/73/b4/37/07\"));\n\t\tassertArrayEquals(new int[]{2,3}, yhpg.solve(\"bd/87/7c/e7/c0/37/82/da\"));\n\t\tassertArrayEquals(new int[]{2,2}, yhpg.solve(\"3d/c0/13/ac/57/3d/15/78\"));\n\t\tassertArrayEquals(new int[]{0,3}, yhpg.solve(\"63/64/54/3a/40/28/4e/4e\"));\n\t\tassertArrayEquals(new int[]{1,4}, yhpg.solve(\"f6/81/c9/15/00/4c/a0/a8\"));\n\t\tassertArrayEquals(new int[]{4,2}, yhpg.solve(\"19/41/df/f8/e3/74/6b/9b\"));\n\t\tassertArrayEquals(new int[]{1,5}, yhpg.solve(\"d5/0b/dd/35/3b/d2/0b/6b\"));\n\t\tassertArrayEquals(new int[]{0,0}, yhpg.solve(\"08/b7/91/f3/6e/3c/74/a0\"));\n\t\tassertArrayEquals(new int[]{0,0}, yhpg.solve(\"b8/a8/b4/a6/93/2c/94/3f\"));\n\t\tassertArrayEquals(new int[]{0,0}, yhpg.solve(\"88/22/21/ee/dc/19/43/01\"));\n\t\tassertArrayEquals(new int[]{0,0}, yhpg.solve(\"e1/ee/35/bc/fc/00/8e/fe\"));\n\t\tassertArrayEquals(new int[]{0,0}, yhpg.solve(\"3c/42/63/5f/27/47/07/90\"));\n\n\t}\n}\n\n```\n", "tags": ["yhpg"]}