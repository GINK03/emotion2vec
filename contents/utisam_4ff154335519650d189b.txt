{"context": " More than 1 year has passed since last update.Windows API \u3067\u306f\u3001.Net\u306eAPI\u304b\u3089\u5927\u304d\u304f\u5909\u66f4\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002hibara\u3055\u3093\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3057\u3066\u307f\u305f\u306e\u3067\u3059\u304c\u3001AesManaged\u3092\u306f\u3058\u3081\u3068\u3057\u305f\u30af\u30e9\u30b9\u306f\u30e6\u30cb\u30d0\u30fc\u30b5\u30ebWindows\u30a2\u30d7\u30ea\u306e\u958b\u767a\u3067\u306f\u5229\u7528\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u305d\u3053\u3067\u3001\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u540c\u69d8\u306e\u3053\u3068\u3092Windows API\u3067\u884c\u3063\u3066\u307f\u307e\u3059\u3002\n\n\u6697\u53f7\u5316\nSymmetricAlgorithmNames.AesCbcPkcs7\u3067\u53d6\u5f97\u3057\u305fSymmetricKeyAlgorithmProvider\u3092\u7528\u3044\u308b\u3068\u3001CBC\u3067PKCS7\u306aAES\u6697\u53f7\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nprivate static readonly string ALGORITHM_NAME = SymmetricAlgorithmNames.AesCbcPkcs7;\n\nprivate IBuffer toEncryptedBuffer(IBuffer buffer, string rawPassword, out IBuffer salt, out IBuffer iv)\n{\n    // https://msdn.microsoft.com/en-us/library/windows/apps/windows.security.cryptography.core.symmetrickeyalgorithmprovider.aspx\n    SymmetricKeyAlgorithmProvider algorithm = SymmetricKeyAlgorithmProvider.OpenAlgorithm(ALGORITHM_NAME);\n\n    salt = CryptographicBuffer.GenerateRandom(32);\n    var derviedKey = createDerviedKey(algorithm, rawPassword, salt);\n\n    iv = CryptographicBuffer.GenerateRandom(algorithm.BlockLength);\n\n    return CryptographicEngine.Encrypt(derviedKey, buffer, iv);\n}\n\ncreateDerviedKey\u30e1\u30bd\u30c3\u30c9\u3067\u306f\u30ad\u30fc\u306e\u751f\u6210\u3092\u884c\u3044\u307e\u3059\u3002\u5143\u306e\u8a18\u4e8b\u3067\u306f Rfc2898DeriveBytes \u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u304c\u3001RFC2898\u3068PBKDF2\u306f\u540c\u3058\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u6307\u3057\u3066\u3044\u307e\u3059\u3002\nprivate const uint SALT_ITERATION_COUNT = 10000;\n\nprivate CryptographicKey createDerviedKey(SymmetricKeyAlgorithmProvider algorithm, string rawPassword, IBuffer salt)\n{\n    KeyDerivationAlgorithmProvider pbkdf2 = KeyDerivationAlgorithmProvider.OpenAlgorithm(KeyDerivationAlgorithmNames.Pbkdf2Sha256);\n    IBuffer passwordBuffer = CryptographicBuffer.ConvertStringToBinary(rawPassword, BinaryStringEncoding.Utf8);\n    CryptographicKey key = pbkdf2.CreateKey(passwordBuffer);\n\n    KeyDerivationParameters parameters = KeyDerivationParameters.BuildForPbkdf2(salt, SALT_ITERATION_COUNT);\n\n    IBuffer derviedKeyMaterial = CryptographicEngine.DeriveKeyMaterial(key, parameters, 32);\n    return algorithm.CreateSymmetricKey(derviedKeyMaterial);\n}\n\n\u6697\u53f7\u5316\u524d\u306b\u5727\u7e2e\u3092\u304b\u3051\u308b\u5b9a\u77f3\u306f\u3001\u3053\u308c\u307e\u3067\u901a\u308aDeflateStream\u304c\u4f7f\u3048\u307e\u3059\u3002\n\n\u8907\u5408\n\u5148\u307b\u3069\u306ecreateDerviedKey\u3092\u4f7f\u3063\u3066\u307b\u3068\u3093\u3069\u4f3c\u305f\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3067\u8907\u5408\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nprivate IBuffer toDecryptedBuffer(IBuffer buffer, string rawPassword, IBuffer salt, IBuffer iv)\n{\n    SymmetricKeyAlgorithmProvider algorithm = SymmetricKeyAlgorithmProvider.OpenAlgorithm(ALGORITHM_NAME);\n\n    var derviedKey = createDerviedKey(algorithm, rawPassword, salt);\n\n    return CryptographicEngine.Decrypt(derviedKey, buffer, iv);\n}\n\n\u89e3\u51cd\u306fIBuffer.AsStream()\u3092\u4f7f\u3063\u3066Stream\u306b\u3057\u305f\u5f8c\u306bDeflateStream\u306b\u901a\u3057\u307e\u3059\u3002\n\u3053\u3061\u3089\u3082\u8aa4\u3063\u305f\u30d1\u30b9\u30ef\u30fc\u30c9\u3067\u8907\u5408\u3057\u305f\u969b\u306e\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3063\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u3060\u3044\u305f\u3044\u306f\u89e3\u51cd\u6642\u306b\u304a\u304b\u3057\u304f\u306a\u3063\u3066\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3063\u307d\u3044\u3067\u3059\u3002\n\n\u5168\u4f53\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\n\u6697\u53f7\u5316\u3055\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u3092\u8aad\u307f\u66f8\u304d\u3067\u304d\u308b\u30c4\u30fc\u30eb\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\nhttps://github.com/utisam/encedit\nWindows API \u3067\u306f\u3001.Net\u306eAPI\u304b\u3089\u5927\u304d\u304f\u5909\u66f4\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002[hibara\u3055\u3093\u306e\u8a18\u4e8b](http://qiita.com/hibara/items/c9096376b1d7b5c8e2ae)\u3092\u53c2\u8003\u306b\u3057\u3066\u307f\u305f\u306e\u3067\u3059\u304c\u3001`AesManaged`\u3092\u306f\u3058\u3081\u3068\u3057\u305f\u30af\u30e9\u30b9\u306f\u30e6\u30cb\u30d0\u30fc\u30b5\u30ebWindows\u30a2\u30d7\u30ea\u306e\u958b\u767a\u3067\u306f\u5229\u7528\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n\u305d\u3053\u3067\u3001\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u540c\u69d8\u306e\u3053\u3068\u3092Windows API\u3067\u884c\u3063\u3066\u307f\u307e\u3059\u3002\n\n# \u6697\u53f7\u5316\n\n`SymmetricAlgorithmNames.AesCbcPkcs7`\u3067\u53d6\u5f97\u3057\u305f`SymmetricKeyAlgorithmProvider`\u3092\u7528\u3044\u308b\u3068\u3001CBC\u3067PKCS7\u306aAES\u6697\u53f7\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```csharp\nprivate static readonly string ALGORITHM_NAME = SymmetricAlgorithmNames.AesCbcPkcs7;\n\nprivate IBuffer toEncryptedBuffer(IBuffer buffer, string rawPassword, out IBuffer salt, out IBuffer iv)\n{\n\t// https://msdn.microsoft.com/en-us/library/windows/apps/windows.security.cryptography.core.symmetrickeyalgorithmprovider.aspx\n\tSymmetricKeyAlgorithmProvider algorithm = SymmetricKeyAlgorithmProvider.OpenAlgorithm(ALGORITHM_NAME);\n\n\tsalt = CryptographicBuffer.GenerateRandom(32);\n\tvar derviedKey = createDerviedKey(algorithm, rawPassword, salt);\n\n\tiv = CryptographicBuffer.GenerateRandom(algorithm.BlockLength);\n\n\treturn CryptographicEngine.Encrypt(derviedKey, buffer, iv);\n}\n```\n\n`createDerviedKey`\u30e1\u30bd\u30c3\u30c9\u3067\u306f\u30ad\u30fc\u306e\u751f\u6210\u3092\u884c\u3044\u307e\u3059\u3002\u5143\u306e\u8a18\u4e8b\u3067\u306f Rfc2898DeriveBytes \u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u304c\u3001[RFC2898\u3068PBKDF2\u306f\u540c\u3058\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u6307\u3057\u3066\u3044\u307e\u3059](https://msdn.microsoft.com/ja-jp/library/system.security.cryptography.rfc2898derivebytes(v=vs.110).aspx)\u3002\n\n```csharp\nprivate const uint SALT_ITERATION_COUNT = 10000;\n\nprivate CryptographicKey createDerviedKey(SymmetricKeyAlgorithmProvider algorithm, string rawPassword, IBuffer salt)\n{\n    KeyDerivationAlgorithmProvider pbkdf2 = KeyDerivationAlgorithmProvider.OpenAlgorithm(KeyDerivationAlgorithmNames.Pbkdf2Sha256);\n    IBuffer passwordBuffer = CryptographicBuffer.ConvertStringToBinary(rawPassword, BinaryStringEncoding.Utf8);\n    CryptographicKey key = pbkdf2.CreateKey(passwordBuffer);\n\n    KeyDerivationParameters parameters = KeyDerivationParameters.BuildForPbkdf2(salt, SALT_ITERATION_COUNT);\n\n    IBuffer derviedKeyMaterial = CryptographicEngine.DeriveKeyMaterial(key, parameters, 32);\n    return algorithm.CreateSymmetricKey(derviedKeyMaterial);\n}\n```\n\n\u6697\u53f7\u5316\u524d\u306b\u5727\u7e2e\u3092\u304b\u3051\u308b\u5b9a\u77f3\u306f\u3001\u3053\u308c\u307e\u3067\u901a\u308a`DeflateStream`\u304c\u4f7f\u3048\u307e\u3059\u3002\n\n# \u8907\u5408\n\n\u5148\u307b\u3069\u306e`createDerviedKey`\u3092\u4f7f\u3063\u3066\u307b\u3068\u3093\u3069\u4f3c\u305f\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3067\u8907\u5408\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```csharp\nprivate IBuffer toDecryptedBuffer(IBuffer buffer, string rawPassword, IBuffer salt, IBuffer iv)\n{\n    SymmetricKeyAlgorithmProvider algorithm = SymmetricKeyAlgorithmProvider.OpenAlgorithm(ALGORITHM_NAME);\n\n    var derviedKey = createDerviedKey(algorithm, rawPassword, salt);\n\n    return CryptographicEngine.Decrypt(derviedKey, buffer, iv);\n}\n```\n\n\u89e3\u51cd\u306f`IBuffer.AsStream()`\u3092\u4f7f\u3063\u3066Stream\u306b\u3057\u305f\u5f8c\u306b`DeflateStream`\u306b\u901a\u3057\u307e\u3059\u3002\n\n\u3053\u3061\u3089\u3082\u8aa4\u3063\u305f\u30d1\u30b9\u30ef\u30fc\u30c9\u3067\u8907\u5408\u3057\u305f\u969b\u306e\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3063\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u3060\u3044\u305f\u3044\u306f\u89e3\u51cd\u6642\u306b\u304a\u304b\u3057\u304f\u306a\u3063\u3066\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3063\u307d\u3044\u3067\u3059\u3002\n\n# \u5168\u4f53\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\n\n\u6697\u53f7\u5316\u3055\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u3092\u8aad\u307f\u66f8\u304d\u3067\u304d\u308b\u30c4\u30fc\u30eb\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\nhttps://github.com/utisam/encedit\n", "tags": ["C#", "VisualStudio", "aes", "WindowsAPI"]}