{"context": "GIF\u306eLZW\u5727\u7e2e\u306b\u3064\u3044\u3066\u3001\u5b9f\u88c5\u3092\u901a\u3057\u3066\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\u30b7\u30ea\u30fc\u30ba\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\nGIF\u306e\u30d0\u30a4\u30ca\u30ea\u3092\u8aad\u3093\u3067\u307f\u305f\nGIF\u306eLZW\u5727\u7e2e\u3092\u8abf\u3079\u3066\u307f\u305f \u2190 \u3053\u306e\u8a18\u4e8b\nGIF\u306eLZW\u3092\u5c55\u958b\u3057\u3066\u307f\u305f\n\n\n\u53c2\u8003\nWikipedia\u306b\u306f\u5727\u7e2e\u306e\u5177\u4f53\u4f8b\u304c\u8f09\u3063\u3066\u3044\u307e\u3059\u3002\n\nGIF - Wikipedia\n\n\u4e00\u8aad\u3057\u305f\u3060\u3051\u3067\u7406\u89e3\u3059\u308b\u306e\u306f\u306a\u304b\u306a\u304b\u96e3\u3057\u3044\u3067\u3059\u3002\u63b2\u8f09\u3055\u308c\u3066\u3044\u308b\u30ed\u30b0\u3068\u540c\u3058\u3088\u3046\u306b\u52d5\u4f5c\u3055\u305b\u308b\u306b\u306f\u3069\u3046\u3059\u308c\u3070\u826f\u3044\u304b\u3001\u3068\u3044\u3046\u3053\u3068\u3092\u8003\u3048\u306a\u304c\u3089\u5b9f\u88c5\u3057\u3066\u8abf\u3079\u307e\u3057\u305f\u3002\n\u203b LZW\u306f\u958b\u767a\u3055\u308c\u305f\u5f53\u6642\u306e\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u4e8b\u60c5\u306b\u5408\u308f\u305b\u3066\u3001\u5c11\u306a\u3044\u30ea\u30bd\u30fc\u30b9\u3067\u5727\u7e2e\u30fb\u5c55\u958b\u3059\u308b\u3053\u3068\u306b\u6ce8\u529b\u3057\u305f\u4ed5\u69d8\u3067\u3059\u3002\u4eca\u56de\u306f\u8abf\u67fb\u304c\u76ee\u7684\u306e\u305f\u3081\u30ea\u30bd\u30fc\u30b9\u52b9\u7387\u306a\u3069\u306f\u6c17\u306b\u305b\u305a\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5b9f\u88c5\n\u8a66\u884c\u932f\u8aa4\u306e\u904e\u7a0b\u3092\u63b2\u8f09\u3057\u3066\u3082\u3042\u307e\u308a\u53c2\u8003\u306b\u306f\u306a\u3089\u306a\u3044\u3068\u601d\u3046\u306e\u3067\u3001\u5b8c\u6210\u3057\u305f\u30b3\u30fc\u30c9\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\nLZWCompress.fsx\n\n\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u3092\u30ab\u30e9\u30fc\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u914d\u5217\u3067\u5b9a\u7fa9\u3057\u307e\u3059\u3002\nlet src = [|\n    0x28; 0xff; 0xff\n    0xff; 0x28; 0xff\n    0xff; 0xff; 0xff\n    0xff; 0xff; 0xff\n    0xff; 0xff; 0xff |]\n\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306f 0\uff5e0xff \u3067\u3059\u304c\u3001\u5f8c\u7d9a\u306e\u6570\u5b57\u306b\u7279\u6b8a\u30b3\u30fc\u30c9\u3092\u5272\u308a\u5f53\u3066\u307e\u3059\u3002\n\n0x100 clr \u30c6\u30fc\u30d6\u30eb\u521d\u671f\u5316\n0x101 end \u30c7\u30fc\u30bf\u7d42\u4e86\n0x102\uff5e \u30c6\u30fc\u30d6\u30eb\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\n\n\u203b \u5177\u4f53\u7684\u306a\u5024\u306f LZW Minimum Code Size \u306b\u4f9d\u5b58\u3057\u307e\u3059\u304c\u3001\u4eca\u56de\u306f\u6c7a\u3081\u6253\u3061\u3067\u9032\u3081\u307e\u3059\u3002\nclr \u306e\u307f\u5b9a\u7fa9\u3057\u3066\u3001\u305d\u306e\u4ed6\u306f\u8a08\u7b97\u3067\u6c42\u3081\u307e\u3059\u3002\nlet clr = 0x100\n\nWikipedia\u306e\u30ed\u30b0\u30924\u5217\u306b\u7c21\u7565\u5316\u3057\u3066\u6a21\u5023\u3057\u307e\u3059\u3002\n\n\u5165\u529b\n\u30c6\u30fc\u30d6\u30eb\u306b\u8ffd\u52a0\u3057\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u51fa\u529b\n\u5727\u7e2e\u7d50\u679c\u304c\u78ba\u5b9a\u3057\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30b3\u30fc\u30c9\u3092\u51fa\u529b\n\u8aac\u660e\n\nprintfn \"Input\\tTable\\tOutput\\tDesc.\"\nprintfn \"-----\\t-----\\t------\\t-----\"\n\n\u30ed\u30b0\u8868\u793a\u7528\u306b\u30d0\u30a4\u30ca\u30ea\u309216\u9032\u6570\u5316\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\nlet hex (bin:int seq) =\n    bin |> Seq.map (sprintf \"%02x\") |> String.concat \" \"\n\n\u5727\u7e2e\u7d50\u679c\u306e\u51fa\u529b\u5148\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u51fa\u529b\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30ed\u30b0\u3092\u51fa\u529b\u3059\u308b\u305f\u3081\u3001\u51fa\u529b\u7528\u306e\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\nlet data = System.Collections.Generic.List<int>()\nlet output v msg =\n    printfn \"\\t\\t0x%03x\\t%s\" v msg\n    data.Add v\n\n\u30c6\u30fc\u30d6\u30eb\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u30c6\u30fc\u30d6\u30eb\u306b\u8ffd\u52a0\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30ed\u30b0\u3092\u51fa\u529b\u3059\u308b\u305f\u3081\u3001\u30c6\u30fc\u30d6\u30eb\u8ffd\u52a0\u7528\u306e\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u30c6\u30fc\u30d6\u30eb\u306f\u4e0a\u9650\u304c\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u50240xfff\u306e\u305f\u3081\u3001\u8d85\u904e\u3057\u305f\u5834\u5408\u306f\u6d88\u53bb\u3057\u307e\u3059\u3002\nlet table = System.Collections.Generic.List<int[]>()\nlet add codes msg =\n    let n = clr + 2 + table.Count\n    printfn \"\\t0x%03x\\t\\t%s\" n msg\n    table.Add codes\n    if n >= 0xfff then\n        output clr \"Clear\"\n        table.Clear()\n\n\u6700\u521d\u306b\u30c6\u30fc\u30d6\u30eb\u521d\u671f\u5316\uff08clr\uff09\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\noutput clr \"Clear\"\n\n\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u306a\u304c\u3089\u3001\u7d50\u679c\u304c\u78ba\u5b9a\u3057\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u51fa\u529b\u3057\u307e\u3059\u3002\u672a\u78ba\u5b9a\u9818\u57df\u306e\u5148\u982d\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\nlet mutable j = 0\n\n\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u4e00\u81f4\u304c\u898b\u4ed8\u304b\u3063\u3066\u3082\u3001\u3082\u3063\u3068\u9577\u3044\u4e00\u81f4\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u3001\u78ba\u5b9a\u306f\u4fdd\u7559\u3057\u3066\u6b21\u306b\u9032\u3081\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u78ba\u5b9a\u5019\u88dc\u3092\u5909\u6570\u3067\u4fdd\u6301\u3057\u307e\u3059\u3002\nlet mutable prev = -1\n\n\u203b \u5e38\u306b1\u8981\u7d20\u5148\u8aad\u307f\u3059\u308b\u305f\u3081\u30011\u3064\u524d\u306e\u8981\u7d20\u3092\u4fdd\u6301\u3057\u3066\u3044\u308b\u3068\u89e3\u91c8\u3067\u304d\u307e\u3059\u3002\u69cb\u6587\u89e3\u6790\u3067\u3082\u3088\u304f\u4f7f\u3046\u624b\u6cd5\u3067\u3059\u3002\n\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u3092\u30eb\u30fc\u30d7\u3067\u8aad\u307f\u307e\u3059\u3002\nfor i = 0 to src.Length - 1 do\n\n\u672a\u78ba\u5b9a\u9818\u57df\u3068\u540c\u5185\u5bb9\u304c\u30c6\u30fc\u30d6\u30eb\u306b\u5b58\u5728\u3059\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002\u5b58\u5728\u3057\u3066\u3082\u3082\u3063\u3068\u9577\u304f\u4e00\u81f4\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081\u3001\u3059\u3050\u306b\u306f\u78ba\u5b9a\u305b\u305a\u306b\u5019\u88dc\u3068\u3057\u3066\u8a18\u61b6\u3057\u3066\u5148\u306b\u9032\u307f\u307e\u3059\u3002\n    let target = src.[j..i]\n    let h = hex target\n    printf \"0x%02x\\t\\t\\t'%s' \" src.[i] h\n    match table |> Seq.tryFindIndex ((=) target) with\n    | Some n ->\n        prev <- clr + 2 + n\n        printfn \"0x%03x found in table\" prev\n\n\u30c6\u30fc\u30d6\u30eb\u306b\u5b58\u5728\u3057\u306a\u3044\u3068\u304d\u306f\u3001\u30eb\u30fc\u30d7\u306e\u5148\u982d\u3067\u306a\u3051\u308c\u3070\u30c6\u30fc\u30d6\u30eb\u306b\u8ffd\u52a0\u3057\u3066\u3001\u5019\u88dc\u3092\u78ba\u5b9a\u3055\u305b\u307e\u3059\u3002Wikipedia\u306e\u4f8b\u3068\u306f\u52d5\u4f5c\u304c\u524d\u5f8c\u3057\u307e\u3059\u304c\u3001\u7d50\u679c\u306b\u306f\u5f71\u97ff\u3057\u307e\u305b\u3093\u3002\n    | _ ->\n        if i = 0 then\n            printfn \"1st pixel always to output\"\n        else\n            printfn \"not found in table\"\n            add target (sprintf \"- add '%s' to table\" h)\n            output prev \"- output code for previous string\"\n\n\u624b\u524d\u307e\u3067\u78ba\u5b9a\u3057\u305f\u305f\u3081\u3001\u73fe\u5728\u898b\u3066\u3044\u308b\u7b87\u6240\u3092\u672a\u78ba\u5b9a\u9818\u57df\u306e\u5148\u982d\u3068\u3057\u3066\u3001\u5024\u3092\u5019\u88dc\u3068\u3057\u307e\u3059\u3002\n        prev <- src.[i]\n        printfn \"\\t\\t\\t'%02x' initialize local string\" prev\n        j <- i\n\n\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u306e\u6700\u5f8c\u307e\u3067\u884c\u3051\u3070\u30eb\u30fc\u30d7\u304b\u3089\u629c\u3051\u3066\u3001\u672a\u78ba\u5b9a\u9818\u57df\u3092\u78ba\u5b9a\u3055\u305b\u3001\u7d42\u4e86\u30b3\u30fc\u30c9\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\nprintfn \"\\t\\t\\tNo more pixels\"\nif prev >= 0 then output prev \"- output code for last string\"\noutput (clr + 1) \"End\"\n\n\u5358\u7d14\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u304c\u3001\u305d\u3053\u305d\u3053\u5727\u7e2e\u3067\u304d\u307e\u3059\u3002\u6614\u306f\u3053\u308c\u304c\u7279\u8a31\u306b\u306a\u3063\u3066\u5927\u91d1\u304c\u52d5\u3044\u305f\u3068\u601d\u3046\u3068\u611f\u6168\u6df1\u3044\u3067\u3059\u3002\n\n\u52d5\u4f5c\u7d50\u679c\nWikipedia\u306e\u30ed\u30b0\u306f\u60c5\u5831\u304c\u591a\u904e\u304e\u3066\u5206\u304b\u308a\u306b\u304f\u304b\u3063\u305f\u305f\u3081\u6539\u826f\u3057\u305f\u3064\u3082\u308a\u3067\u3059\u3002\u3053\u308c\u3092\u773a\u3081\u3066\u3044\u308b\u3060\u3051\u3067\u3082\u52d5\u4f5c\u539f\u7406\u304c\u4f55\u3068\u306a\u304f\u4f1d\u308f\u308c\u3070\u826f\u3044\u306e\u3067\u3059\u304c\u3001\u3044\u304b\u304c\u3067\u3057\u3087\u3046\u304b\u3002\nInput   Table   Output  Desc.\n-----   -----   ------  -----\n                0x100   Clear\n0x28                    '28' 1st pixel always to output\n                        '28' initialize local string\n0xff                    '28 ff' not found in table\n        0x102           - add '28 ff' to table\n                0x028   - output code for previous string\n                        'ff' initialize local string\n0xff                    'ff ff' not found in table\n        0x103           - add 'ff ff' to table\n                0x0ff   - output code for previous string\n                        'ff' initialize local string\n0xff                    'ff ff' 0x103 found in table\n0x28                    'ff ff 28' not found in table\n        0x104           - add 'ff ff 28' to table\n                0x103   - output code for previous string\n                        '28' initialize local string\n0xff                    '28 ff' 0x102 found in table\n0xff                    '28 ff ff' not found in table\n        0x105           - add '28 ff ff' to table\n                0x102   - output code for previous string\n                        'ff' initialize local string\n0xff                    'ff ff' 0x103 found in table\n0xff                    'ff ff ff' not found in table\n        0x106           - add 'ff ff ff' to table\n                0x103   - output code for previous string\n                        'ff' initialize local string\n0xff                    'ff ff' 0x103 found in table\n0xff                    'ff ff ff' 0x106 found in table\n0xff                    'ff ff ff ff' not found in table\n        0x107           - add 'ff ff ff ff' to table\n                0x106   - output code for previous string\n                        'ff' initialize local string\n0xff                    'ff ff' 0x103 found in table\n0xff                    'ff ff ff' 0x106 found in table\n0xff                    'ff ff ff ff' 0x107 found in table\n                        No more pixels\n                0x107   - output code for last string\n                0x101   End\n\n\n\u30d3\u30c3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u3078\u306e\u683c\u7d0d\nGIF\u306b\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3059\u308b\u306b\u306f\u30b3\u30fc\u30c9\u5217\u3092\u30d3\u30c3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u683c\u7d0d\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u5b8c\u6210\u3057\u305f\u30b3\u30fc\u30c9\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\nLZWEncode.fsx\n\n\n\u66f8\u304d\u8fbc\u307f\n\u6307\u5b9a\u3057\u305f\u30d3\u30c3\u30c8\u9577\u3055\u3067\u5024\u3092\u30d3\u30c3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u66f8\u304d\u8fbc\u3080\u30af\u30e9\u30b9\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u306f255\u30d0\u30a4\u30c8\u3054\u3068\u306e\u30d6\u30ed\u30c3\u30af\u306b\u5206\u5272\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30d3\u30c3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306f\u30d3\u30c3\u30c8\u5358\u4f4d\u3067\u306e\u30ea\u30c8\u30eb\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u306e\u305f\u3081\u4e0b\u4f4d\u304b\u3089\u30d0\u30c3\u30d5\u30a1\u306b\u683c\u7d0d\u3057\u307e\u3059\u3002\u30d0\u30c3\u30d5\u30a1\u306e\u6700\u5927\u30b5\u30a4\u30ba\u307e\u3067\u5230\u9054\u3059\u308c\u3070\u3001\u30d6\u30ed\u30c3\u30af\u30b5\u30a4\u30ba\u3092\u6dfb\u3048\u3066\u30d0\u30a4\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u9589\u3058\u308c\u3070\u30d0\u30c3\u30d5\u30a1\u3092\u30d5\u30e9\u30c3\u30b7\u30e5\u3057\u3066\u30d6\u30ed\u30c3\u30af\u30b5\u30a4\u30ba0\u3092\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002\n\u203b \u30d3\u30c3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u4e2d\u306b\u30d6\u30ed\u30c3\u30af\u30b5\u30a4\u30ba\u304c\u5272\u308a\u8fbc\u3080\u5f62\u3068\u306a\u308a\u307e\u3059\u3002\ntype BitWriter(s:Stream) =\n    let buf = Array.zeroCreate<byte> 254\n    let mutable i, b = 0, 0\n    let flush() =\n        s.WriteByte(byte i)  // block size\n        s.Write(buf, 0, i)   // data bytes\n        Array.Clear(buf, 0, buf.Length)\n        i <- 0\n    interface IDisposable with\n        override x.Dispose() =\n            if b > 0 then i <- i + 1\n            flush()\n            flush()  // Block Terminator\n    member x.Write blen v =\n        let left = 8 - b\n        if i >= buf.Length then flush()\n        buf.[i] <- buf.[i] ||| byte (v <<< b)\n        if blen < left then b <- b + blen else\n        i <- i + 1\n        b <- 0\n        let blen = blen - left\n        if blen > 0 then x.Write blen (v >>> left)\n\n\n\u30c6\u30b9\u30c8\n\u7d50\u679c\u3092\u78ba\u8a8d\u3059\u308b\u305f\u308116\u9032\u6570\u3067\u30c0\u30f3\u30d7\u3059\u308b\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\nlet hexdump (bin:byte seq) =\n    bin |> Seq.iteri (fun i b ->\n        if i &&& 15 = 0 then\n            if i > 0 then printfn \"\"\n            printf \"%04x:\" i\n        printf \" %02x\" b)\n    printfn \"\"\n\nWikipedia\u306b\u63b2\u8f09\u3055\u308c\u3066\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u306e\u30b3\u30fc\u30c9\u5217\u3092\u30d3\u30c3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u683c\u7d0d\u3057\u3066\u307f\u307e\u3059\u3002\u30b3\u30fc\u30c9\u9577\u306f\u3059\u3079\u30669bit\u3060\u3068\u5206\u304b\u3063\u3066\u3044\u308b\u305f\u3081\u6c7a\u3081\u6253\u3061\u3057\u307e\u3059\u3002\nlet src1 = [| 0x100; 0x28; 0xff; 0x103; 0x102; 0x103; 0x106; 0x107; 0x101 |]\nlet dst1 =\n    use ms = new MemoryStream()\n    do  use bitw = new BitWriter(ms)\n        for v in src1 do bitw.Write 9 v\n    ms.ToArray()\nhexdump dst1\n\n\n\u5b9f\u884c\u7d50\u679c\n0000: 0b 00 51 fc 1b 28 70 a0 c1 83 01 01 00\n\n\n\u3046\u307e\u304f\u683c\u7d0d\u3067\u304d\u3066\u3044\u307e\u3059\u3002\n\n\u30d3\u30c3\u30c8\u30b5\u30a4\u30ba\n\u5024\u3092\u683c\u7d0d\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u30d3\u30c3\u30c8\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\u3059\u308b\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\nlet bitSize v =\n    let rec f i n =\n        if n > v then i else f (i + 1) (n <<< 1)\n    f 1 2\n\n\n\u683c\u7d0d\n\u30d3\u30c3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u3078\u683c\u7d0d\u3059\u308b\u969b\u306b\u30b3\u30fc\u30c9\u9577\u306f\u53ef\u5909\u3067\u3059\u3002\u51fa\u73fe\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u30b3\u30fc\u30c9\u3092\u3059\u3079\u3066\u683c\u7d0d\u3067\u304d\u308b\u3060\u3051\u306e\u30b5\u30a4\u30ba\u3068\u306a\u308b\u305f\u3081\u3001\u6700\u5927\u5024\u306f\u4eca\u304b\u3089\u8ffd\u52a0\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u30c6\u30fc\u30d6\u30eb\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u306a\u308a\u307e\u3059\u3002\u305f\u3060\u305712\u30d3\u30c3\u30c8\u306e\u5236\u9650\u304c\u3042\u308b\u305f\u3081\u3001\u6b63\u5e38\u306a\u30c7\u30fc\u30bf\u3067\u3042\u308c\u3070\u5236\u9650\u3092\u8d85\u3048\u305f\u6240\u3067clr\u3092\u767a\u884c\u3057\u3066\u30c6\u30fc\u30d6\u30eb\u3092\u30af\u30ea\u30a2\u3057\u307e\u3059\u3002\n\u5148\u306b\u5b9f\u88c5\u3057\u305f\u5727\u7e2e\u3092\u30d9\u30fc\u30b9\u306b\u3001BitWriter\u3092\u4f7f\u3046\u3088\u3046\u306b\u624b\u76f4\u3057\u3057\u305fencode\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u5909\u3048\u306a\u3044\u305f\u3081\u3001\u52d5\u4f5c\u3092\u4fe1\u7528\u3057\u3066\u30ed\u30b0\u51fa\u529b\u306f\u9664\u53bb\u3057\u307e\u3059\u3002\nlet encode (s:Stream) (src:byte[]) =\n    let lzwMin = max 2 (Array.max src |> int |> bitSize)\n    s.WriteByte(byte lzwMin)  // LZW Minimum Code Size\n    use bitw = new BitWriter(s)\n    let clr = 1 <<< lzwMin\n    let table = List<byte[]>()\n    let mutable blen, next, j, prev = lzwMin + 1, clr * 2, 0, -1\n    bitw.Write blen clr\n    for i = 0 to src.Length - 1 do\n        let target = src.[j..i]\n        match table |> Seq.tryFindIndex ((=) target) with\n        | Some n ->\n            prev <- clr + 2 + n\n        | _ ->\n            if prev >= 0 then\n                let n = clr + 2 + table.Count\n                bitw.Write blen prev\n                table.Add target\n                if n >= 0xfff then\n                    bitw.Write blen clr\n                    table.Clear()\n                    blen <- lzwMin + 1\n                    next <- clr * 2\n                    prev <- -1\n                elif n >= next then\n                    blen <- blen + 1\n                    next <- next * 2\n            prev <- int src.[i]\n            j <- i\n    if prev >= 0 then bitw.Write blen prev\n    bitw.Write blen (clr + 1)  // End\n\n\n\u30c6\u30b9\u30c8\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30c7\u30fc\u30bf\u3068\u671f\u5f85\u3055\u308c\u308b\u51fa\u529b\u3092\u6e21\u3057\u3066\u30c6\u30b9\u30c8\u3059\u308b\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\nlet test src expected =\n    use ms = new MemoryStream()\n    encode ms src\n    let dst = ms.ToArray()\n    printfn \"[%s]\" (if dst = expected then \"OK\" else \"NG\")\n    hexdump dst\n\nWikipedia\u306e\u30c7\u30fc\u30bf\u3067\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\u671f\u5f85\u3059\u308b\u7d50\u679c\u306e\u5148\u982d\u30d0\u30a4\u30c8\u306blzwMin\u3092\u4ed8\u52a0\u3057\u307e\u3059\u3002\u30c7\u30fc\u30bf\u306e\u7b26\u53f7\u9577\u306f\u3059\u3079\u30669bit\u306e\u305f\u3081\u3001\u7b26\u53f7\u9577\u3092\u6c7a\u3081\u6253\u3061\u3057\u305f\u30c6\u30b9\u30c8\u3068\u540c\u3058\u7d50\u679c\u3067\u3059\u3002\ntest (Array.map byte\n    [|  0x28; 0xff; 0xff\n        0xff; 0x28; 0xff\n        0xff; 0xff; 0xff\n        0xff; 0xff; 0xff\n        0xff; 0xff; 0xff |])\n    (Array.append [|8uy|] dst1)\n\n\n\u5b9f\u884c\u7d50\u679c\n[OK]\n0000: 08 0b 00 51 fc 1b 28 70 a0 c1 83 01 01 00\n\n\n\u4e00\u81f4\u3057\u307e\u3057\u305f\u3002\nGIF\u306e\u30d0\u30a4\u30ca\u30ea\u3092\u8aad\u3093\u3067\u307f\u305f\u3067\u4f7f\u7528\u3057\u305f\u753b\u50cf\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30c7\u30fc\u30bf\u3067\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\ntest (Array.map byte\n    [|  2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2\n        2;2;2;2;2;2;2;1;0;2;2;2;2;2;2;2\n        2;2;2;2;2;2;2;0;1;1;2;2;2;2;2;2\n        2;2;2;2;2;2;0;2;2;0;2;2;2;2;2;2\n        2;2;2;2;2;0;2;2;2;1;1;2;2;2;2;2\n        2;2;2;2;1;1;2;2;2;2;0;2;2;2;2;2\n        2;2;2;2;0;2;2;2;2;2;0;2;2;2;2;2\n        2;2;2;0;2;2;2;2;2;2;1;1;2;2;2;2\n        2;1;0;0;0;0;0;1;2;2;2;0;2;2;2;2\n        2;2;0;2;2;2;2;1;1;1;1;0;1;1;1;1\n        2;1;1;2;2;2;2;2;2;2;2;1;1;2;2;2\n        2;0;2;2;2;2;2;2;2;2;2;2;0;2;2;2\n        2;0;2;2;2;2;2;2;2;2;2;2;0;2;2;2\n        1;1;2;2;2;2;2;2;2;2;2;2;1;1;2;2\n        2;2;2;2;2;2;2;2;2;2;2;2;2;0;2;2\n        2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2 |])\n    [|  // 22. Table Based Image Data.\n        2uy     // LZW Minimum Code Size\n        0x2Buy  // block size\n                // data bytes\n        0x94uy; 0x8Fuy; 0xA9uy; 0x16uy; 0xB0uy; 0x0Buy; 0x42uy; 0x78uy\n        0xC8uy; 0x09uy; 0x4Buy; 0xB1uy; 0xA4uy; 0xFBuy; 0x60uy; 0xF5uy\n        0x5Duy; 0x4Fuy; 0x28uy; 0x74uy; 0x47uy; 0x03uy; 0xA4uy; 0x91uy\n        0x07uy; 0x22uy; 0x92uy; 0x14uy; 0xBDuy; 0xE5uy; 0xB4uy; 0x98uy\n        0x62uy; 0x56uy; 0x51uy; 0xF7uy; 0xACuy; 0xDBuy; 0xFAuy; 0xFEuy\n        0x43uy; 0x14uy; 0x00uy\n        0uy |]  // Block Terminator\n\n\n\u5b9f\u884c\u7d50\u679c\n[OK]\n0000: 02 2b 94 8f a9 16 b0 0b 42 78 c8 09 4b b1 a4 fb\n0010: 60 f5 5d 4f 28 74 47 03 a4 91 07 22 92 14 bd e5\n0020: b4 98 62 56 51 f7 ac db fa fe 43 14 00 00\n\n\nGIMP\u3067\u751f\u6210\u3057\u305f\u30d0\u30a4\u30c8\u5217\u3068\u4e00\u81f4\u3057\u307e\u3057\u305f\u3002\u3046\u307e\u304f\u683c\u7d0d\u3067\u304d\u3066\u3044\u307e\u3059\u3002\n\nGIF\u30d5\u30a1\u30a4\u30eb\u3078\u306e\u683c\u7d0d\n\u3044\u3088\u3044\u3088GIF\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\u5b8c\u6210\u3057\u305f\u30b3\u30fc\u30c9\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\nGIFEncode.fsx\n\n\nGIF\u30b3\u30f3\u30c6\u30ca\n\u30b5\u30a4\u30ba\u3068\u30ab\u30e9\u30fc\u30d1\u30ec\u30c3\u30c8\u3068\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u3092\u6e21\u3057\u3066GIF\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\nlet createGIF (s:Stream) width height (ctable:int[]) (pixels:byte[]) =\n    use bw = new BinaryWriter(s, Encoding.ASCII)\n\n    // 17. Header.\n    bw.Write(\"GIF87a\".ToCharArray())\n\n    // 18. Logical Screen Descriptor.\n    bw.Write(uint16 width )  // Logical Screen Width\n    bw.Write(uint16 height)  // Logical Screen Height\n    // <Packed Fields>\n    //   Global Color Table Flag\n    //   | Color Resolution\n    //   | |   Sort Flag\n    //   | |   | Size of Global Color Table\n    //   1 111 0 xxx\n    let ctsize = (ctable.Length - 1 |> bitSize) - 1\n    if ctsize > 7 then\n        failwith <| sprintf \"ctable.Length %d > 256\" ctable.Length\n    bw.Write(0b11110000 ||| ctsize |> byte)\n    bw.Write(0uy)  // Background Color Index\n    bw.Write(0uy)  // Pixel Aspect Ratio\n\n    // 19. Global Color Table.\n    for c in ctable do\n        bw.Write(c >>> 16 |> byte)  // R\n        bw.Write(c >>>  8 |> byte)  // G\n        bw.Write(c        |> byte)  // B\n    for i = 1 to (1 <<< (ctsize + 1)) - ctable.Length do\n        bw.Write [|0uy; 0uy; 0uy|]  // RGB (padding)\n\n    // 20. Image Descriptor.\n    bw.Write(0x2Cuy)         // Image Separator\n    bw.Write(0us)            // Image Left Position\n    bw.Write(0us)            // Image Top Position\n    bw.Write(uint16 width )  // Image Width\n    bw.Write(uint16 height)  // Image Height\n    bw.Write(0uy)            // <Packed Fields>\n                             //   Local Color Table Flag\n                             //   | Interlace Flag\n                             //   | | Sort Flag\n                             //   | | | Reserved\n                             //   | | | |  Size of Local Color Table\n                             //   0 0 0 00 000\n\n    // 22. Table Based Image Data.\n    encode bw pixels\n\n    // 27. Trailer.\n    bw.Write(0x3Buy)  // GIF Trailer\n\n\n\u30c6\u30b9\u30c8\nGIF\u306e\u30d0\u30a4\u30ca\u30ea\u3092\u8aad\u3093\u3067\u307f\u305f\u3067\u4f7f\u7528\u3057\u305f\u753b\u50cf\u3092\u751f\u6210\u3057\u3066\u307f\u307e\u3059\u3002\ndo  use fs = new FileStream(\"A.gif\", FileMode.Create)\n    createGIF fs 16 16\n        [|  0x000000     // RGB #0\n            0x808080     // RGB #1\n            0xFFFFFF     // RGB #2\n            0xFFFFFF |]  // RGB #3\n        (Array.map byte\n        [|  2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2\n            2;2;2;2;2;2;2;1;0;2;2;2;2;2;2;2\n            2;2;2;2;2;2;2;0;1;1;2;2;2;2;2;2\n            2;2;2;2;2;2;0;2;2;0;2;2;2;2;2;2\n            2;2;2;2;2;0;2;2;2;1;1;2;2;2;2;2\n            2;2;2;2;1;1;2;2;2;2;0;2;2;2;2;2\n            2;2;2;2;0;2;2;2;2;2;0;2;2;2;2;2\n            2;2;2;0;2;2;2;2;2;2;1;1;2;2;2;2\n            2;1;0;0;0;0;0;1;2;2;2;0;2;2;2;2\n            2;2;0;2;2;2;2;1;1;1;1;0;1;1;1;1\n            2;1;1;2;2;2;2;2;2;2;2;1;1;2;2;2\n            2;0;2;2;2;2;2;2;2;2;2;2;0;2;2;2\n            2;0;2;2;2;2;2;2;2;2;2;2;0;2;2;2\n            1;1;2;2;2;2;2;2;2;2;2;2;1;1;2;2\n            2;2;2;2;2;2;2;2;2;2;2;2;2;0;2;2\n            2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2 |])\n\n\u51fa\u529b\u7d50\u679c \n\u3046\u307e\u304f\u751f\u6210\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u306e\u53d6\u308a\u51fa\u3057\n\u3053\u3053\u307e\u3067\u306f\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u3092\u30cf\u30fc\u30c9\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u4eca\u5f8c\u306fBitmap\u3067\u51e6\u7406\u3057\u307e\u3059\u3002\nBitmap\u304b\u3089\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u3092\u914d\u5217\u3067\u53d6\u308a\u51fa\u3059\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\nlet getArgb (bmp:Bitmap) =\n    let w, h = bmp.Width, bmp.Height\n    let argb = Array.zeroCreate<int>(w * h)\n    let bd = bmp.LockBits(Rectangle(0, 0, w, h),\n                          ImageLockMode.ReadWrite, PixelFormat.Format32bppArgb)\n    Marshal.Copy(bd.Scan0, argb, 0, argb.Length)\n    bmp.UnlockBits bd\n    argb\n\n\n\u30ab\u30e9\u30fc\u30d1\u30ec\u30c3\u30c8\u306e\u751f\u6210\n\u4e0e\u3048\u3089\u308c\u305f\u753b\u50cf\u304b\u3089GIF\u306e\u751f\u6210\u3092\u5b9f\u88c5\u3059\u308b\u306b\u306f\u3001\u30ab\u30e9\u30fc\u30d1\u30ec\u30c3\u30c8\u306e\u751f\u6210\u304c\u5fc5\u8981\u3067\u3059\u3002\nGIF\u306e\u30ab\u30e9\u30fc\u30d1\u30ec\u30c3\u30c8\u306f256\u8272\u306b\u5236\u9650\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u203b \u8907\u6570\u306e\u753b\u50cf\u3092\u91cd\u306d\u308b\u3053\u3068\u3067256\u8272\u4ee5\u4e0a\u306e\u753b\u50cf\u3092\u6271\u3046\u624b\u6cd5\u3082\u3042\u308a\u3001\u30d5\u30eb\u30ab\u30e9\u30fcGIF\u3068\u547c\u3070\u308c\u3066\u3044\u307e\u3059\u3002\u8a73\u7d30\u306f\u6b21\u306e\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n\u30d5\u30eb\u30ab\u30e9\u30fc GIF \u4f5c\u6210 JavaScript \u306e\u8aac\u660e 2016.02.24\n\n\u4eca\u56de\u306f\u7c21\u5358\u306e\u305f\u3081\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306b\u5909\u63db\u3057\u307e\u3059\u3002RGB\u304b\u3089\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u6bd4\u7387\u306a\u3069\u306f\u6b21\u306e\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\nRGB\u5024\u306e\u5408\u8a08\u304c\u4e00\u5b9a\u306e\u753b\u50cf\u5909\u63db 2016.11.17\n\nlet gray c =\n    let r, g, b = c >>> 16 |> byte, c >>> 8 |> byte, c |> byte\n    float r * 0.299 + float g * 0.587 + float b * 0.114 |> int\n\n\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306e\u30ab\u30e9\u30fc\u30d1\u30ec\u30c3\u30c8\u3092\u751f\u6210\u3057\u307e\u3059\u3002\nlet grayTable = [| for i in 0..255 -> 0x010101 * i |]\n\n\n\u30c6\u30b9\u30c8\n\u6a19\u6e96\u753b\u50cfLenna\u3092\u8aad\u307f\u8fbc\u3093\u3067\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306eGIF\u306b\u5909\u63db\u3057\u307e\u3059\u3002\u6240\u8981\u6642\u9593\u3092\u8a08\u6e2c\u3057\u307e\u3059\u3002\ndo  use bmp = new Bitmap(\"Lenna.png\")\n    use fs = new FileStream(\"Lenna-gray.gif\", FileMode.Create)\n    let start = DateTime.Now\n    createGIF fs bmp.Width bmp.Height grayTable (getArgb bmp |> Array.map gray)\n    printfn \"%A\" (DateTime.Now - start)\n\n\n\u5b9f\u884c\u7d50\u679c\n00:00:18.8136330\n\n\n\n\n\n\u5143\u753b\u50cf\n\u5909\u63db\u5f8c\n\n\n\n\n\n\n\n\n\n\u3046\u307e\u304f\u5909\u63db\u3067\u304d\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u5727\u7e2e\u306b\u306f19\u79d2\u8fd1\u304f\u639b\u304b\u3063\u3066\u3044\u307e\u3059\uff08i5-3320M 2.6GHz\uff09\u3002\n\n\u30c6\u30fc\u30d6\u30eb\u53c2\u7167\u306e\u6700\u9069\u5316\n\u5727\u7e2e\u304c\u3042\u307e\u308a\u306b\u3082\u9045\u3044\u306e\u306f\u30c6\u30fc\u30d6\u30eb\u3092\u30ea\u30cb\u30a2\u30b5\u30fc\u30c1\u3057\u3066\u3044\u308b\u306e\u304c\u539f\u56e0\u3067\u3059\u3002\u30cf\u30c3\u30b7\u30e5\u3092\u4f7f\u7528\u3057\u305f\u6700\u9069\u5316\u3092\u8a66\u307f\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u306e\u9577\u3055\u3092\u521d\u671f\u5024\u3068\u3057\u3066\u3001\u5168\u30d0\u30a4\u30c8\u30928bit\u305a\u3064\u305a\u3089\u3057\u306a\u304c\u3089XOR\u3057\u3066\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\nlet hash (src:byte[]) start length =\n    let mutable ret = length\n    for i = 0 to length - 1 do\n        ret <- ret ^^^ (int src.[start + i] <<< ((i &&& 3) * 8))\n    ret\n\n\u203b \u5f53\u521d\u306f\u9577\u3055\u3068\u5148\u982d2\u30d0\u30a4\u30c8\u304b\u3089\u7b97\u51fa\u3059\u308b\u5358\u7d14\u306a\u30cf\u30c3\u30b7\u30e5\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u304c\u3001\u885d\u7a81\u304c\u591a\u767a\u3057\u307e\u3057\u305f\u3002\u5168\u30d0\u30a4\u30c8\u304b\u3089\u8a08\u7b97\u3059\u308b\u3068\u30b3\u30b9\u30c8\u306f\u639b\u304b\u308a\u307e\u3059\u304c\u3001\u885d\u7a81\u304c\u6e1b\u308b\u305f\u3081\u30c8\u30fc\u30bf\u30eb\u3067\u306f1.5\u500d\u7a0b\u5ea6\u9ad8\u901f\u5316\u3057\u307e\u3057\u305f\u3002\n\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u3092 Dictionary<int, List<int * int * int>> \u3067\u6271\u3044\u307e\u3059\u3002\u885d\u7a81\u3057\u305f\u3068\u304d\u306f\u30ea\u30cb\u30a2\u30b5\u30fc\u30c1\u3059\u308b\u305f\u3081\u30ea\u30b9\u30c8\u3092\u4f7f\u3044\u307e\u3059\u3002\u30ea\u30b9\u30c8\u5185\u306e\u30bf\u30d7\u30eb\u306f (\u958b\u59cb\u4f4d\u7f6e, \u9577\u3055, \u30a4\u30f3\u30c7\u30c3\u30af\u30b9) \u3067\u3059\u3002\ntype HashTable = Dictionary<int, List<int * int * int>>\n\n\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u3078\u306e\u8ffd\u52a0\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\nlet hashAdd (table:HashTable) src start length i =\n    let h = hash src start length\n    match table.TryGetValue h with\n    | false, _ ->\n        let list = List<int * int * int>()\n        list.Add(start, length, i)\n        table.[h] <- list\n    | true, list ->\n        list.Add(start, length, i)\n\n\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u30ea\u30cb\u30a2\u30b5\u30fc\u30c1\u3067\u5fc5\u8981\u3068\u306a\u308b\u914d\u5217\u306e\u6bd4\u8f03\u3082\u5b9f\u88c5\u3057\u307e\u3059\u3002\nlet arrayCmp (src:byte[]) s1 length (s2, len2, _) =\n    if length <> len2 then false else\n    if s1 = s2 then true else\n    seq {\n        for i = 0 to length - 1 do\n            if src.[s1 + i] <> src.[s2 + i] then yield false\n        yield true }\n    |> Seq.head\n\nlet hashGet (table:HashTable) src start length =\n    let h = hash src start length\n    match table.TryGetValue h with\n    | false, _ -> None\n    | true, list ->\n        match list |> Seq.tryFind (arrayCmp src start length) with\n        | Some (_, _, i) -> Some i\n        | _ -> None\n\n\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u3092\u4f7f\u3046\u3088\u3046\u306bencode\u3092\u4fee\u6b63\u3057\u307e\u3059\u3002\nlet encode (bw:BinaryWriter) (src:byte[]) =\n    let lzwMin = max 2 (Array.max src |> int |> bitSize)\n    bw.Write(byte lzwMin)  // LZW Minimum Code Size\n    use bitw = new BitWriter(bw)\n    let clr = 1 <<< lzwMin\n    let table = HashTable()\n    let mutable blen, next, j, prev = lzwMin + 1, clr * 2, 0, -1\n    let mutable cur = clr + 2\n    bitw.Write blen clr\n    for i = 0 to src.Length - 1 do\n        let length = (i + 1) - j\n        match hashGet table src j length with\n        | Some n ->\n            prev <- n\n        | _ ->\n            if prev >= 0 then\n                bitw.Write blen prev\n                hashAdd table src j length cur\n                cur <- cur + 1\n                if cur > 0xfff then\n                    bitw.Write blen clr\n                    table.Clear()\n                    blen <- lzwMin + 1\n                    next <- clr * 2\n                    prev <- -1\n                    cur  <- clr + 2\n                elif cur > next then\n                    blen <- blen + 1\n                    next <- next * 2\n            prev <- int src.[i]\n            j <- i\n    if prev >= 0 then bitw.Write blen prev\n    bitw.Write blen (clr + 1)  // End\n\n\n\u30c6\u30b9\u30c8\n\u5148\u307b\u3069\u3068\u540c\u3058\u6a19\u6e96\u753b\u50cfLenna\u306e\u5909\u63db\u3092\u8a66\u3057\u307e\u3059\u3002\u30b3\u30fc\u30c9\u306f\u540c\u3058\u306a\u306e\u3067\u7d50\u679c\u306e\u307f\u63b2\u8f09\u3057\u307e\u3059\u3002\u51fa\u529b\u3055\u308c\u308bGIF\u30d5\u30a1\u30a4\u30eb\u3082\u540c\u4e00\u3067\u3059\u3002\n\n\u5b9f\u884c\u7d50\u679c\n00:00:00.0312001\n\n\n\u5287\u7684\u306b\u9ad8\u901f\u5316\u3057\u307e\u3057\u305f\u3002\u307e\u3060\u5de5\u592b\u306e\u4f59\u5730\u306f\u3042\u308a\u305d\u3046\u3067\u3059\u304c\u3001\u5b9f\u7528\u4e0a\u306f\u3053\u308c\u3067\u5145\u5206\u3067\u3057\u3087\u3046\u3002\n\n\u53c2\u8003\n\u53c2\u8003\u307e\u3067\u306bGDI+\u3067\u306e\u4fdd\u5b58\u3082\u8a08\u6e2c\u3057\u3066\u307f\u307e\u3059\u3002\ndo  use bmp = new Bitmap(\"Lenna.png\")\n    let start = DateTime.Now\n    bmp.Save(\"Lenna.gif\", ImageFormat.Gif)\n    printfn \"%A\" (DateTime.Now - start)\n\n\n\u5b9f\u884c\u7d50\u679c\n00:00:00.0156001\n\n\n\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u3067\u306f\u306a\u304f\u6e1b\u8272\u3092\u884c\u3063\u3066\u3044\u308b\u305f\u3081\u5358\u7d14\u306a\u6bd4\u8f03\u306f\u3067\u304d\u307e\u305b\u3093\u304c\u3001\u305d\u308c\u3067\u3082\u5727\u5012\u7684\u306b\u901f\u3044\u3067\u3059\u3002\n\u6a5f\u4f1a\u304c\u3042\u308c\u3070\u6e1b\u8272\u3092\u5b9f\u88c5\u3057\u3066\u3001\u307e\u305f\u6bd4\u8f03\u3057\u3066\u307f\u305f\u3044\u3067\u3059\u3002\nGIF\u306eLZW\u5727\u7e2e\u306b\u3064\u3044\u3066\u3001\u5b9f\u88c5\u3092\u901a\u3057\u3066\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u30b7\u30ea\u30fc\u30ba\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n1. [GIF\u306e\u30d0\u30a4\u30ca\u30ea\u3092\u8aad\u3093\u3067\u307f\u305f](http://qiita.com/7shi/items/33117c6c369d37dc6cdd)\n1. GIF\u306eLZW\u5727\u7e2e\u3092\u8abf\u3079\u3066\u307f\u305f \u2190 \u3053\u306e\u8a18\u4e8b\n1. [GIF\u306eLZW\u3092\u5c55\u958b\u3057\u3066\u307f\u305f](http://qiita.com/7shi/items/778f58d4647b10f0f403)\n\n# \u53c2\u8003\n\nWikipedia\u306b\u306f\u5727\u7e2e\u306e\u5177\u4f53\u4f8b\u304c\u8f09\u3063\u3066\u3044\u307e\u3059\u3002\n\n* [GIF - Wikipedia](https://en.wikipedia.org/wiki/GIF)\n\n\u4e00\u8aad\u3057\u305f\u3060\u3051\u3067\u7406\u89e3\u3059\u308b\u306e\u306f\u306a\u304b\u306a\u304b\u96e3\u3057\u3044\u3067\u3059\u3002\u63b2\u8f09\u3055\u308c\u3066\u3044\u308b\u30ed\u30b0\u3068\u540c\u3058\u3088\u3046\u306b\u52d5\u4f5c\u3055\u305b\u308b\u306b\u306f\u3069\u3046\u3059\u308c\u3070\u826f\u3044\u304b\u3001\u3068\u3044\u3046\u3053\u3068\u3092\u8003\u3048\u306a\u304c\u3089\u5b9f\u88c5\u3057\u3066\u8abf\u3079\u307e\u3057\u305f\u3002\n\n\u203b LZW\u306f\u958b\u767a\u3055\u308c\u305f\u5f53\u6642\u306e\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u4e8b\u60c5\u306b\u5408\u308f\u305b\u3066\u3001\u5c11\u306a\u3044\u30ea\u30bd\u30fc\u30b9\u3067\u5727\u7e2e\u30fb\u5c55\u958b\u3059\u308b\u3053\u3068\u306b\u6ce8\u529b\u3057\u305f\u4ed5\u69d8\u3067\u3059\u3002\u4eca\u56de\u306f\u8abf\u67fb\u304c\u76ee\u7684\u306e\u305f\u3081\u30ea\u30bd\u30fc\u30b9\u52b9\u7387\u306a\u3069\u306f\u6c17\u306b\u305b\u305a\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\n\n# \u5b9f\u88c5\n\n\u8a66\u884c\u932f\u8aa4\u306e\u904e\u7a0b\u3092\u63b2\u8f09\u3057\u3066\u3082\u3042\u307e\u308a\u53c2\u8003\u306b\u306f\u306a\u3089\u306a\u3044\u3068\u601d\u3046\u306e\u3067\u3001\u5b8c\u6210\u3057\u305f\u30b3\u30fc\u30c9\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\n* [LZWCompress.fsx](https://bitbucket.org/snippets/7shi/gpBMo)\n\n\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u3092\u30ab\u30e9\u30fc\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u914d\u5217\u3067\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```fsharp\nlet src = [|\n    0x28; 0xff; 0xff\n    0xff; 0x28; 0xff\n    0xff; 0xff; 0xff\n    0xff; 0xff; 0xff\n    0xff; 0xff; 0xff |]\n```\n\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306f 0\uff5e0xff \u3067\u3059\u304c\u3001\u5f8c\u7d9a\u306e\u6570\u5b57\u306b\u7279\u6b8a\u30b3\u30fc\u30c9\u3092\u5272\u308a\u5f53\u3066\u307e\u3059\u3002\n\n* 0x100 clr \u30c6\u30fc\u30d6\u30eb\u521d\u671f\u5316\n* 0x101 end \u30c7\u30fc\u30bf\u7d42\u4e86\n* 0x102\uff5e \u30c6\u30fc\u30d6\u30eb\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\n\n\u203b \u5177\u4f53\u7684\u306a\u5024\u306f LZW Minimum Code Size \u306b\u4f9d\u5b58\u3057\u307e\u3059\u304c\u3001\u4eca\u56de\u306f\u6c7a\u3081\u6253\u3061\u3067\u9032\u3081\u307e\u3059\u3002\n\nclr \u306e\u307f\u5b9a\u7fa9\u3057\u3066\u3001\u305d\u306e\u4ed6\u306f\u8a08\u7b97\u3067\u6c42\u3081\u307e\u3059\u3002\n\n```fsharp\nlet clr = 0x100\n```\n\nWikipedia\u306e\u30ed\u30b0\u30924\u5217\u306b\u7c21\u7565\u5316\u3057\u3066\u6a21\u5023\u3057\u307e\u3059\u3002\n\n1. \u5165\u529b\n1. \u30c6\u30fc\u30d6\u30eb\u306b\u8ffd\u52a0\u3057\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u51fa\u529b\n1. \u5727\u7e2e\u7d50\u679c\u304c\u78ba\u5b9a\u3057\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30b3\u30fc\u30c9\u3092\u51fa\u529b\n1. \u8aac\u660e\n\n```fsharp\nprintfn \"Input\\tTable\\tOutput\\tDesc.\"\nprintfn \"-----\\t-----\\t------\\t-----\"\n```\n\n\u30ed\u30b0\u8868\u793a\u7528\u306b\u30d0\u30a4\u30ca\u30ea\u309216\u9032\u6570\u5316\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```fsharp\nlet hex (bin:int seq) =\n    bin |> Seq.map (sprintf \"%02x\") |> String.concat \" \"\n```\n\n\u5727\u7e2e\u7d50\u679c\u306e\u51fa\u529b\u5148\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u51fa\u529b\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30ed\u30b0\u3092\u51fa\u529b\u3059\u308b\u305f\u3081\u3001\u51fa\u529b\u7528\u306e\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```fsharp\nlet data = System.Collections.Generic.List<int>()\nlet output v msg =\n    printfn \"\\t\\t0x%03x\\t%s\" v msg\n    data.Add v\n```\n\n\u30c6\u30fc\u30d6\u30eb\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u30c6\u30fc\u30d6\u30eb\u306b\u8ffd\u52a0\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30ed\u30b0\u3092\u51fa\u529b\u3059\u308b\u305f\u3081\u3001\u30c6\u30fc\u30d6\u30eb\u8ffd\u52a0\u7528\u306e\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u30c6\u30fc\u30d6\u30eb\u306f\u4e0a\u9650\u304c\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5024`0xfff`\u306e\u305f\u3081\u3001\u8d85\u904e\u3057\u305f\u5834\u5408\u306f\u6d88\u53bb\u3057\u307e\u3059\u3002\n\n```fsharp\nlet table = System.Collections.Generic.List<int[]>()\nlet add codes msg =\n    let n = clr + 2 + table.Count\n    printfn \"\\t0x%03x\\t\\t%s\" n msg\n    table.Add codes\n    if n >= 0xfff then\n        output clr \"Clear\"\n        table.Clear()\n```\n\n\u6700\u521d\u306b\u30c6\u30fc\u30d6\u30eb\u521d\u671f\u5316\uff08`clr`\uff09\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\n\n```fsharp\noutput clr \"Clear\"\n```\n\n\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u306a\u304c\u3089\u3001\u7d50\u679c\u304c\u78ba\u5b9a\u3057\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u51fa\u529b\u3057\u307e\u3059\u3002\u672a\u78ba\u5b9a\u9818\u57df\u306e\u5148\u982d\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```fsharp\nlet mutable j = 0\n```\n\n\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u4e00\u81f4\u304c\u898b\u4ed8\u304b\u3063\u3066\u3082\u3001\u3082\u3063\u3068\u9577\u3044\u4e00\u81f4\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u3001\u78ba\u5b9a\u306f\u4fdd\u7559\u3057\u3066\u6b21\u306b\u9032\u3081\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u78ba\u5b9a\u5019\u88dc\u3092\u5909\u6570\u3067\u4fdd\u6301\u3057\u307e\u3059\u3002\n\n```fsharp\nlet mutable prev = -1\n```\n\n\u203b \u5e38\u306b1\u8981\u7d20\u5148\u8aad\u307f\u3059\u308b\u305f\u3081\u30011\u3064\u524d\u306e\u8981\u7d20\u3092\u4fdd\u6301\u3057\u3066\u3044\u308b\u3068\u89e3\u91c8\u3067\u304d\u307e\u3059\u3002\u69cb\u6587\u89e3\u6790\u3067\u3082\u3088\u304f\u4f7f\u3046\u624b\u6cd5\u3067\u3059\u3002\n\n\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u3092\u30eb\u30fc\u30d7\u3067\u8aad\u307f\u307e\u3059\u3002\n\n```fsharp\nfor i = 0 to src.Length - 1 do\n```\n\n\u672a\u78ba\u5b9a\u9818\u57df\u3068\u540c\u5185\u5bb9\u304c\u30c6\u30fc\u30d6\u30eb\u306b\u5b58\u5728\u3059\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002\u5b58\u5728\u3057\u3066\u3082\u3082\u3063\u3068\u9577\u304f\u4e00\u81f4\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081\u3001\u3059\u3050\u306b\u306f\u78ba\u5b9a\u305b\u305a\u306b\u5019\u88dc\u3068\u3057\u3066\u8a18\u61b6\u3057\u3066\u5148\u306b\u9032\u307f\u307e\u3059\u3002\n\n```fsharp\n    let target = src.[j..i]\n    let h = hex target\n    printf \"0x%02x\\t\\t\\t'%s' \" src.[i] h\n    match table |> Seq.tryFindIndex ((=) target) with\n    | Some n ->\n        prev <- clr + 2 + n\n        printfn \"0x%03x found in table\" prev\n```\n\n\u30c6\u30fc\u30d6\u30eb\u306b\u5b58\u5728\u3057\u306a\u3044\u3068\u304d\u306f\u3001\u30eb\u30fc\u30d7\u306e\u5148\u982d\u3067\u306a\u3051\u308c\u3070\u30c6\u30fc\u30d6\u30eb\u306b\u8ffd\u52a0\u3057\u3066\u3001\u5019\u88dc\u3092\u78ba\u5b9a\u3055\u305b\u307e\u3059\u3002Wikipedia\u306e\u4f8b\u3068\u306f\u52d5\u4f5c\u304c\u524d\u5f8c\u3057\u307e\u3059\u304c\u3001\u7d50\u679c\u306b\u306f\u5f71\u97ff\u3057\u307e\u305b\u3093\u3002\n\n```fsharp\n    | _ ->\n        if i = 0 then\n            printfn \"1st pixel always to output\"\n        else\n            printfn \"not found in table\"\n            add target (sprintf \"- add '%s' to table\" h)\n            output prev \"- output code for previous string\"\n```\n\n\u624b\u524d\u307e\u3067\u78ba\u5b9a\u3057\u305f\u305f\u3081\u3001\u73fe\u5728\u898b\u3066\u3044\u308b\u7b87\u6240\u3092\u672a\u78ba\u5b9a\u9818\u57df\u306e\u5148\u982d\u3068\u3057\u3066\u3001\u5024\u3092\u5019\u88dc\u3068\u3057\u307e\u3059\u3002\n\n```fsharp\n        prev <- src.[i]\n        printfn \"\\t\\t\\t'%02x' initialize local string\" prev\n        j <- i\n```\n\n\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u306e\u6700\u5f8c\u307e\u3067\u884c\u3051\u3070\u30eb\u30fc\u30d7\u304b\u3089\u629c\u3051\u3066\u3001\u672a\u78ba\u5b9a\u9818\u57df\u3092\u78ba\u5b9a\u3055\u305b\u3001\u7d42\u4e86\u30b3\u30fc\u30c9\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\n\n```fsharp\nprintfn \"\\t\\t\\tNo more pixels\"\nif prev >= 0 then output prev \"- output code for last string\"\noutput (clr + 1) \"End\"\n```\n\n\u5358\u7d14\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u304c\u3001\u305d\u3053\u305d\u3053\u5727\u7e2e\u3067\u304d\u307e\u3059\u3002\u6614\u306f\u3053\u308c\u304c\u7279\u8a31\u306b\u306a\u3063\u3066\u5927\u91d1\u304c\u52d5\u3044\u305f\u3068\u601d\u3046\u3068\u611f\u6168\u6df1\u3044\u3067\u3059\u3002\n\n## \u52d5\u4f5c\u7d50\u679c\n\nWikipedia\u306e\u30ed\u30b0\u306f\u60c5\u5831\u304c\u591a\u904e\u304e\u3066\u5206\u304b\u308a\u306b\u304f\u304b\u3063\u305f\u305f\u3081\u6539\u826f\u3057\u305f\u3064\u3082\u308a\u3067\u3059\u3002\u3053\u308c\u3092\u773a\u3081\u3066\u3044\u308b\u3060\u3051\u3067\u3082\u52d5\u4f5c\u539f\u7406\u304c\u4f55\u3068\u306a\u304f\u4f1d\u308f\u308c\u3070\u826f\u3044\u306e\u3067\u3059\u304c\u3001\u3044\u304b\u304c\u3067\u3057\u3087\u3046\u304b\u3002\n\n```text\nInput   Table   Output  Desc.\n-----   -----   ------  -----\n                0x100   Clear\n0x28                    '28' 1st pixel always to output\n                        '28' initialize local string\n0xff                    '28 ff' not found in table\n        0x102           - add '28 ff' to table\n                0x028   - output code for previous string\n                        'ff' initialize local string\n0xff                    'ff ff' not found in table\n        0x103           - add 'ff ff' to table\n                0x0ff   - output code for previous string\n                        'ff' initialize local string\n0xff                    'ff ff' 0x103 found in table\n0x28                    'ff ff 28' not found in table\n        0x104           - add 'ff ff 28' to table\n                0x103   - output code for previous string\n                        '28' initialize local string\n0xff                    '28 ff' 0x102 found in table\n0xff                    '28 ff ff' not found in table\n        0x105           - add '28 ff ff' to table\n                0x102   - output code for previous string\n                        'ff' initialize local string\n0xff                    'ff ff' 0x103 found in table\n0xff                    'ff ff ff' not found in table\n        0x106           - add 'ff ff ff' to table\n                0x103   - output code for previous string\n                        'ff' initialize local string\n0xff                    'ff ff' 0x103 found in table\n0xff                    'ff ff ff' 0x106 found in table\n0xff                    'ff ff ff ff' not found in table\n        0x107           - add 'ff ff ff ff' to table\n                0x106   - output code for previous string\n                        'ff' initialize local string\n0xff                    'ff ff' 0x103 found in table\n0xff                    'ff ff ff' 0x106 found in table\n0xff                    'ff ff ff ff' 0x107 found in table\n                        No more pixels\n                0x107   - output code for last string\n                0x101   End\n```\n\n# \u30d3\u30c3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u3078\u306e\u683c\u7d0d\n\nGIF\u306b\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3059\u308b\u306b\u306f\u30b3\u30fc\u30c9\u5217\u3092\u30d3\u30c3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u683c\u7d0d\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u5b8c\u6210\u3057\u305f\u30b3\u30fc\u30c9\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\n* [LZWEncode.fsx](https://bitbucket.org/snippets/7shi/BqaLo)\n\n## \u66f8\u304d\u8fbc\u307f\n\n\u6307\u5b9a\u3057\u305f\u30d3\u30c3\u30c8\u9577\u3055\u3067\u5024\u3092\u30d3\u30c3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u66f8\u304d\u8fbc\u3080\u30af\u30e9\u30b9\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n\u30c7\u30fc\u30bf\u306f255\u30d0\u30a4\u30c8\u3054\u3068\u306e\u30d6\u30ed\u30c3\u30af\u306b\u5206\u5272\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30d3\u30c3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306f\u30d3\u30c3\u30c8\u5358\u4f4d\u3067\u306e\u30ea\u30c8\u30eb\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u306e\u305f\u3081\u4e0b\u4f4d\u304b\u3089\u30d0\u30c3\u30d5\u30a1\u306b\u683c\u7d0d\u3057\u307e\u3059\u3002\u30d0\u30c3\u30d5\u30a1\u306e\u6700\u5927\u30b5\u30a4\u30ba\u307e\u3067\u5230\u9054\u3059\u308c\u3070\u3001\u30d6\u30ed\u30c3\u30af\u30b5\u30a4\u30ba\u3092\u6dfb\u3048\u3066\u30d0\u30a4\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u9589\u3058\u308c\u3070\u30d0\u30c3\u30d5\u30a1\u3092\u30d5\u30e9\u30c3\u30b7\u30e5\u3057\u3066\u30d6\u30ed\u30c3\u30af\u30b5\u30a4\u30ba0\u3092\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002\n\n\u203b \u30d3\u30c3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u4e2d\u306b\u30d6\u30ed\u30c3\u30af\u30b5\u30a4\u30ba\u304c\u5272\u308a\u8fbc\u3080\u5f62\u3068\u306a\u308a\u307e\u3059\u3002\n\n```fsharp\ntype BitWriter(s:Stream) =\n    let buf = Array.zeroCreate<byte> 254\n    let mutable i, b = 0, 0\n    let flush() =\n        s.WriteByte(byte i)  // block size\n        s.Write(buf, 0, i)   // data bytes\n        Array.Clear(buf, 0, buf.Length)\n        i <- 0\n    interface IDisposable with\n        override x.Dispose() =\n            if b > 0 then i <- i + 1\n            flush()\n            flush()  // Block Terminator\n    member x.Write blen v =\n        let left = 8 - b\n        if i >= buf.Length then flush()\n        buf.[i] <- buf.[i] ||| byte (v <<< b)\n        if blen < left then b <- b + blen else\n        i <- i + 1\n        b <- 0\n        let blen = blen - left\n        if blen > 0 then x.Write blen (v >>> left)\n```\n\n### \u30c6\u30b9\u30c8\n\n\u7d50\u679c\u3092\u78ba\u8a8d\u3059\u308b\u305f\u308116\u9032\u6570\u3067\u30c0\u30f3\u30d7\u3059\u308b\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n```fsharp\nlet hexdump (bin:byte seq) =\n    bin |> Seq.iteri (fun i b ->\n        if i &&& 15 = 0 then\n            if i > 0 then printfn \"\"\n            printf \"%04x:\" i\n        printf \" %02x\" b)\n    printfn \"\"\n```\n\nWikipedia\u306b\u63b2\u8f09\u3055\u308c\u3066\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u306e\u30b3\u30fc\u30c9\u5217\u3092\u30d3\u30c3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u683c\u7d0d\u3057\u3066\u307f\u307e\u3059\u3002\u30b3\u30fc\u30c9\u9577\u306f\u3059\u3079\u30669bit\u3060\u3068\u5206\u304b\u3063\u3066\u3044\u308b\u305f\u3081\u6c7a\u3081\u6253\u3061\u3057\u307e\u3059\u3002\n\n```fsharp\nlet src1 = [| 0x100; 0x28; 0xff; 0x103; 0x102; 0x103; 0x106; 0x107; 0x101 |]\nlet dst1 =\n    use ms = new MemoryStream()\n    do  use bitw = new BitWriter(ms)\n        for v in src1 do bitw.Write 9 v\n    ms.ToArray()\nhexdump dst1\n```\n```text:\u5b9f\u884c\u7d50\u679c\n0000: 0b 00 51 fc 1b 28 70 a0 c1 83 01 01 00\n```\n\n\u3046\u307e\u304f\u683c\u7d0d\u3067\u304d\u3066\u3044\u307e\u3059\u3002\n\n## \u30d3\u30c3\u30c8\u30b5\u30a4\u30ba\n\n\u5024\u3092\u683c\u7d0d\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u30d3\u30c3\u30c8\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\u3059\u308b\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n```fsharp\nlet bitSize v =\n    let rec f i n =\n        if n > v then i else f (i + 1) (n <<< 1)\n    f 1 2\n```\n\n## \u683c\u7d0d\n\n\u30d3\u30c3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u3078\u683c\u7d0d\u3059\u308b\u969b\u306b\u30b3\u30fc\u30c9\u9577\u306f\u53ef\u5909\u3067\u3059\u3002\u51fa\u73fe\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u30b3\u30fc\u30c9\u3092\u3059\u3079\u3066\u683c\u7d0d\u3067\u304d\u308b\u3060\u3051\u306e\u30b5\u30a4\u30ba\u3068\u306a\u308b\u305f\u3081\u3001\u6700\u5927\u5024\u306f\u4eca\u304b\u3089\u8ffd\u52a0\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u30c6\u30fc\u30d6\u30eb\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u306a\u308a\u307e\u3059\u3002\u305f\u3060\u305712\u30d3\u30c3\u30c8\u306e\u5236\u9650\u304c\u3042\u308b\u305f\u3081\u3001\u6b63\u5e38\u306a\u30c7\u30fc\u30bf\u3067\u3042\u308c\u3070\u5236\u9650\u3092\u8d85\u3048\u305f\u6240\u3067clr\u3092\u767a\u884c\u3057\u3066\u30c6\u30fc\u30d6\u30eb\u3092\u30af\u30ea\u30a2\u3057\u307e\u3059\u3002\n\n\u5148\u306b\u5b9f\u88c5\u3057\u305f\u5727\u7e2e\u3092\u30d9\u30fc\u30b9\u306b\u3001`BitWriter`\u3092\u4f7f\u3046\u3088\u3046\u306b\u624b\u76f4\u3057\u3057\u305f`encode`\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u5909\u3048\u306a\u3044\u305f\u3081\u3001\u52d5\u4f5c\u3092\u4fe1\u7528\u3057\u3066\u30ed\u30b0\u51fa\u529b\u306f\u9664\u53bb\u3057\u307e\u3059\u3002\n\n```fsharp\nlet encode (s:Stream) (src:byte[]) =\n    let lzwMin = max 2 (Array.max src |> int |> bitSize)\n    s.WriteByte(byte lzwMin)  // LZW Minimum Code Size\n    use bitw = new BitWriter(s)\n    let clr = 1 <<< lzwMin\n    let table = List<byte[]>()\n    let mutable blen, next, j, prev = lzwMin + 1, clr * 2, 0, -1\n    bitw.Write blen clr\n    for i = 0 to src.Length - 1 do\n        let target = src.[j..i]\n        match table |> Seq.tryFindIndex ((=) target) with\n        | Some n ->\n            prev <- clr + 2 + n\n        | _ ->\n            if prev >= 0 then\n                let n = clr + 2 + table.Count\n                bitw.Write blen prev\n                table.Add target\n                if n >= 0xfff then\n                    bitw.Write blen clr\n                    table.Clear()\n                    blen <- lzwMin + 1\n                    next <- clr * 2\n                    prev <- -1\n                elif n >= next then\n                    blen <- blen + 1\n                    next <- next * 2\n            prev <- int src.[i]\n            j <- i\n    if prev >= 0 then bitw.Write blen prev\n    bitw.Write blen (clr + 1)  // End\n```\n\n### \u30c6\u30b9\u30c8\n\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30c7\u30fc\u30bf\u3068\u671f\u5f85\u3055\u308c\u308b\u51fa\u529b\u3092\u6e21\u3057\u3066\u30c6\u30b9\u30c8\u3059\u308b\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n```fsharp\nlet test src expected =\n    use ms = new MemoryStream()\n    encode ms src\n    let dst = ms.ToArray()\n    printfn \"[%s]\" (if dst = expected then \"OK\" else \"NG\")\n    hexdump dst\n```\n\nWikipedia\u306e\u30c7\u30fc\u30bf\u3067\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\u671f\u5f85\u3059\u308b\u7d50\u679c\u306e\u5148\u982d\u30d0\u30a4\u30c8\u306b`lzwMin`\u3092\u4ed8\u52a0\u3057\u307e\u3059\u3002\u30c7\u30fc\u30bf\u306e\u7b26\u53f7\u9577\u306f\u3059\u3079\u30669bit\u306e\u305f\u3081\u3001\u7b26\u53f7\u9577\u3092\u6c7a\u3081\u6253\u3061\u3057\u305f\u30c6\u30b9\u30c8\u3068\u540c\u3058\u7d50\u679c\u3067\u3059\u3002\n\n```fsharp\ntest (Array.map byte\n    [|  0x28; 0xff; 0xff\n        0xff; 0x28; 0xff\n        0xff; 0xff; 0xff\n        0xff; 0xff; 0xff\n        0xff; 0xff; 0xff |])\n    (Array.append [|8uy|] dst1)\n```\n```text:\u5b9f\u884c\u7d50\u679c\n[OK]\n0000: 08 0b 00 51 fc 1b 28 70 a0 c1 83 01 01 00\n```\n\n\u4e00\u81f4\u3057\u307e\u3057\u305f\u3002\n\n[GIF\u306e\u30d0\u30a4\u30ca\u30ea\u3092\u8aad\u3093\u3067\u307f\u305f](http://qiita.com/7shi/items/33117c6c369d37dc6cdd)\u3067\u4f7f\u7528\u3057\u305f\u753b\u50cf\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30c7\u30fc\u30bf\u3067\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\n\n```fsharp\ntest (Array.map byte\n    [|  2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2\n        2;2;2;2;2;2;2;1;0;2;2;2;2;2;2;2\n        2;2;2;2;2;2;2;0;1;1;2;2;2;2;2;2\n        2;2;2;2;2;2;0;2;2;0;2;2;2;2;2;2\n        2;2;2;2;2;0;2;2;2;1;1;2;2;2;2;2\n        2;2;2;2;1;1;2;2;2;2;0;2;2;2;2;2\n        2;2;2;2;0;2;2;2;2;2;0;2;2;2;2;2\n        2;2;2;0;2;2;2;2;2;2;1;1;2;2;2;2\n        2;1;0;0;0;0;0;1;2;2;2;0;2;2;2;2\n        2;2;0;2;2;2;2;1;1;1;1;0;1;1;1;1\n        2;1;1;2;2;2;2;2;2;2;2;1;1;2;2;2\n        2;0;2;2;2;2;2;2;2;2;2;2;0;2;2;2\n        2;0;2;2;2;2;2;2;2;2;2;2;0;2;2;2\n        1;1;2;2;2;2;2;2;2;2;2;2;1;1;2;2\n        2;2;2;2;2;2;2;2;2;2;2;2;2;0;2;2\n        2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2 |])\n    [|  // 22. Table Based Image Data.\n        2uy     // LZW Minimum Code Size\n        0x2Buy  // block size\n                // data bytes\n        0x94uy; 0x8Fuy; 0xA9uy; 0x16uy; 0xB0uy; 0x0Buy; 0x42uy; 0x78uy\n        0xC8uy; 0x09uy; 0x4Buy; 0xB1uy; 0xA4uy; 0xFBuy; 0x60uy; 0xF5uy\n        0x5Duy; 0x4Fuy; 0x28uy; 0x74uy; 0x47uy; 0x03uy; 0xA4uy; 0x91uy\n        0x07uy; 0x22uy; 0x92uy; 0x14uy; 0xBDuy; 0xE5uy; 0xB4uy; 0x98uy\n        0x62uy; 0x56uy; 0x51uy; 0xF7uy; 0xACuy; 0xDBuy; 0xFAuy; 0xFEuy\n        0x43uy; 0x14uy; 0x00uy\n        0uy |]  // Block Terminator\n```\n```text:\u5b9f\u884c\u7d50\u679c\n[OK]\n0000: 02 2b 94 8f a9 16 b0 0b 42 78 c8 09 4b b1 a4 fb\n0010: 60 f5 5d 4f 28 74 47 03 a4 91 07 22 92 14 bd e5\n0020: b4 98 62 56 51 f7 ac db fa fe 43 14 00 00\n```\n\nGIMP\u3067\u751f\u6210\u3057\u305f\u30d0\u30a4\u30c8\u5217\u3068\u4e00\u81f4\u3057\u307e\u3057\u305f\u3002\u3046\u307e\u304f\u683c\u7d0d\u3067\u304d\u3066\u3044\u307e\u3059\u3002\n\n# GIF\u30d5\u30a1\u30a4\u30eb\u3078\u306e\u683c\u7d0d\n\n\u3044\u3088\u3044\u3088GIF\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n\u5b8c\u6210\u3057\u305f\u30b3\u30fc\u30c9\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\n* [GIFEncode.fsx](https://bitbucket.org/snippets/7shi/dB5Rz)\n\n## GIF\u30b3\u30f3\u30c6\u30ca\n\n\u30b5\u30a4\u30ba\u3068\u30ab\u30e9\u30fc\u30d1\u30ec\u30c3\u30c8\u3068\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u3092\u6e21\u3057\u3066GIF\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n```fsharp\nlet createGIF (s:Stream) width height (ctable:int[]) (pixels:byte[]) =\n    use bw = new BinaryWriter(s, Encoding.ASCII)\n\n    // 17. Header.\n    bw.Write(\"GIF87a\".ToCharArray())\n\n    // 18. Logical Screen Descriptor.\n    bw.Write(uint16 width )  // Logical Screen Width\n    bw.Write(uint16 height)  // Logical Screen Height\n    // <Packed Fields>\n    //   Global Color Table Flag\n    //   | Color Resolution\n    //   | |   Sort Flag\n    //   | |   | Size of Global Color Table\n    //   1 111 0 xxx\n    let ctsize = (ctable.Length - 1 |> bitSize) - 1\n    if ctsize > 7 then\n        failwith <| sprintf \"ctable.Length %d > 256\" ctable.Length\n    bw.Write(0b11110000 ||| ctsize |> byte)\n    bw.Write(0uy)  // Background Color Index\n    bw.Write(0uy)  // Pixel Aspect Ratio\n\n    // 19. Global Color Table.\n    for c in ctable do\n        bw.Write(c >>> 16 |> byte)  // R\n        bw.Write(c >>>  8 |> byte)  // G\n        bw.Write(c        |> byte)  // B\n    for i = 1 to (1 <<< (ctsize + 1)) - ctable.Length do\n        bw.Write [|0uy; 0uy; 0uy|]  // RGB (padding)\n\n    // 20. Image Descriptor.\n    bw.Write(0x2Cuy)         // Image Separator\n    bw.Write(0us)            // Image Left Position\n    bw.Write(0us)            // Image Top Position\n    bw.Write(uint16 width )  // Image Width\n    bw.Write(uint16 height)  // Image Height\n    bw.Write(0uy)            // <Packed Fields>\n                             //   Local Color Table Flag\n                             //   | Interlace Flag\n                             //   | | Sort Flag\n                             //   | | | Reserved\n                             //   | | | |  Size of Local Color Table\n                             //   0 0 0 00 000\n\n    // 22. Table Based Image Data.\n    encode bw pixels\n\n    // 27. Trailer.\n    bw.Write(0x3Buy)  // GIF Trailer\n```\n\n### \u30c6\u30b9\u30c8\n\n[GIF\u306e\u30d0\u30a4\u30ca\u30ea\u3092\u8aad\u3093\u3067\u307f\u305f](http://qiita.com/7shi/items/33117c6c369d37dc6cdd)\u3067\u4f7f\u7528\u3057\u305f\u753b\u50cf\u3092\u751f\u6210\u3057\u3066\u307f\u307e\u3059\u3002\n\n```fsharp\ndo  use fs = new FileStream(\"A.gif\", FileMode.Create)\n    createGIF fs 16 16\n        [|  0x000000     // RGB #0\n            0x808080     // RGB #1\n            0xFFFFFF     // RGB #2\n            0xFFFFFF |]  // RGB #3\n        (Array.map byte\n        [|  2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2\n            2;2;2;2;2;2;2;1;0;2;2;2;2;2;2;2\n            2;2;2;2;2;2;2;0;1;1;2;2;2;2;2;2\n            2;2;2;2;2;2;0;2;2;0;2;2;2;2;2;2\n            2;2;2;2;2;0;2;2;2;1;1;2;2;2;2;2\n            2;2;2;2;1;1;2;2;2;2;0;2;2;2;2;2\n            2;2;2;2;0;2;2;2;2;2;0;2;2;2;2;2\n            2;2;2;0;2;2;2;2;2;2;1;1;2;2;2;2\n            2;1;0;0;0;0;0;1;2;2;2;0;2;2;2;2\n            2;2;0;2;2;2;2;1;1;1;1;0;1;1;1;1\n            2;1;1;2;2;2;2;2;2;2;2;1;1;2;2;2\n            2;0;2;2;2;2;2;2;2;2;2;2;0;2;2;2\n            2;0;2;2;2;2;2;2;2;2;2;2;0;2;2;2\n            1;1;2;2;2;2;2;2;2;2;2;2;1;1;2;2\n            2;2;2;2;2;2;2;2;2;2;2;2;2;0;2;2\n            2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2 |])\n```\n\n\u51fa\u529b\u7d50\u679c ![A.gif](https://qiita-image-store.s3.amazonaws.com/0/32057/2f7db80e-9a12-fef7-753d-27ab3ddf86c0.gif)\n\n\u3046\u307e\u304f\u751f\u6210\u3067\u304d\u307e\u3057\u305f\u3002\n\n## \u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u306e\u53d6\u308a\u51fa\u3057\n\n\u3053\u3053\u307e\u3067\u306f\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u3092\u30cf\u30fc\u30c9\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u4eca\u5f8c\u306fBitmap\u3067\u51e6\u7406\u3057\u307e\u3059\u3002\n\nBitmap\u304b\u3089\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u3092\u914d\u5217\u3067\u53d6\u308a\u51fa\u3059\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n```fsharp\nlet getArgb (bmp:Bitmap) =\n    let w, h = bmp.Width, bmp.Height\n    let argb = Array.zeroCreate<int>(w * h)\n    let bd = bmp.LockBits(Rectangle(0, 0, w, h),\n                          ImageLockMode.ReadWrite, PixelFormat.Format32bppArgb)\n    Marshal.Copy(bd.Scan0, argb, 0, argb.Length)\n    bmp.UnlockBits bd\n    argb\n```\n\n## \u30ab\u30e9\u30fc\u30d1\u30ec\u30c3\u30c8\u306e\u751f\u6210\n\n\u4e0e\u3048\u3089\u308c\u305f\u753b\u50cf\u304b\u3089GIF\u306e\u751f\u6210\u3092\u5b9f\u88c5\u3059\u308b\u306b\u306f\u3001\u30ab\u30e9\u30fc\u30d1\u30ec\u30c3\u30c8\u306e\u751f\u6210\u304c\u5fc5\u8981\u3067\u3059\u3002\n\nGIF\u306e\u30ab\u30e9\u30fc\u30d1\u30ec\u30c3\u30c8\u306f256\u8272\u306b\u5236\u9650\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u203b \u8907\u6570\u306e\u753b\u50cf\u3092\u91cd\u306d\u308b\u3053\u3068\u3067256\u8272\u4ee5\u4e0a\u306e\u753b\u50cf\u3092\u6271\u3046\u624b\u6cd5\u3082\u3042\u308a\u3001\u30d5\u30eb\u30ab\u30e9\u30fcGIF\u3068\u547c\u3070\u308c\u3066\u3044\u307e\u3059\u3002\u8a73\u7d30\u306f\u6b21\u306e\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n* [\u30d5\u30eb\u30ab\u30e9\u30fc GIF \u4f5c\u6210 JavaScript \u306e\u8aac\u660e](http://www.kero2.org/fg_ex.cgi) 2016.02.24\n\n\u4eca\u56de\u306f\u7c21\u5358\u306e\u305f\u3081\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306b\u5909\u63db\u3057\u307e\u3059\u3002RGB\u304b\u3089\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u6bd4\u7387\u306a\u3069\u306f\u6b21\u306e\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n* [RGB\u5024\u306e\u5408\u8a08\u304c\u4e00\u5b9a\u306e\u753b\u50cf\u5909\u63db](http://qiita.com/7shi/items/d223e347d67cc399f70c) 2016.11.17\n\n```fsharp\nlet gray c =\n    let r, g, b = c >>> 16 |> byte, c >>> 8 |> byte, c |> byte\n    float r * 0.299 + float g * 0.587 + float b * 0.114 |> int\n```\n\n\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306e\u30ab\u30e9\u30fc\u30d1\u30ec\u30c3\u30c8\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n```fsharp\nlet grayTable = [| for i in 0..255 -> 0x010101 * i |]\n```\n\n### \u30c6\u30b9\u30c8\n\n\u6a19\u6e96\u753b\u50cfLenna\u3092\u8aad\u307f\u8fbc\u3093\u3067\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306eGIF\u306b\u5909\u63db\u3057\u307e\u3059\u3002\u6240\u8981\u6642\u9593\u3092\u8a08\u6e2c\u3057\u307e\u3059\u3002\n\n```fsharp\ndo  use bmp = new Bitmap(\"Lenna.png\")\n    use fs = new FileStream(\"Lenna-gray.gif\", FileMode.Create)\n    let start = DateTime.Now\n    createGIF fs bmp.Width bmp.Height grayTable (getArgb bmp |> Array.map gray)\n    printfn \"%A\" (DateTime.Now - start)\n```\n```text:\u5b9f\u884c\u7d50\u679c\n00:00:18.8136330\n```\n\n\u5143\u753b\u50cf|\u5909\u63db\u5f8c\n:--:|:--:\n![Lenna.png](https://qiita-image-store.s3.amazonaws.com/0/32057/6d695d1a-a9ce-e695-bc03-75e003fb653b.png)|![Lenna-gray.gif](https://qiita-image-store.s3.amazonaws.com/0/32057/aae22d44-45e1-d45e-e782-cbecd38ee421.gif)\n\n\u3046\u307e\u304f\u5909\u63db\u3067\u304d\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u5727\u7e2e\u306b\u306f19\u79d2\u8fd1\u304f\u639b\u304b\u3063\u3066\u3044\u307e\u3059\uff08i5-3320M 2.6GHz\uff09\u3002\n\n## \u30c6\u30fc\u30d6\u30eb\u53c2\u7167\u306e\u6700\u9069\u5316\n\n\u5727\u7e2e\u304c\u3042\u307e\u308a\u306b\u3082\u9045\u3044\u306e\u306f\u30c6\u30fc\u30d6\u30eb\u3092\u30ea\u30cb\u30a2\u30b5\u30fc\u30c1\u3057\u3066\u3044\u308b\u306e\u304c\u539f\u56e0\u3067\u3059\u3002\u30cf\u30c3\u30b7\u30e5\u3092\u4f7f\u7528\u3057\u305f\u6700\u9069\u5316\u3092\u8a66\u307f\u307e\u3059\u3002\n\n\u30c7\u30fc\u30bf\u306e\u9577\u3055\u3092\u521d\u671f\u5024\u3068\u3057\u3066\u3001\u5168\u30d0\u30a4\u30c8\u30928bit\u305a\u3064\u305a\u3089\u3057\u306a\u304c\u3089XOR\u3057\u3066\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\n\n```fsharp\nlet hash (src:byte[]) start length =\n    let mutable ret = length\n    for i = 0 to length - 1 do\n        ret <- ret ^^^ (int src.[start + i] <<< ((i &&& 3) * 8))\n    ret\n```\n\n\u203b \u5f53\u521d\u306f\u9577\u3055\u3068\u5148\u982d2\u30d0\u30a4\u30c8\u304b\u3089\u7b97\u51fa\u3059\u308b\u5358\u7d14\u306a\u30cf\u30c3\u30b7\u30e5\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u304c\u3001\u885d\u7a81\u304c\u591a\u767a\u3057\u307e\u3057\u305f\u3002\u5168\u30d0\u30a4\u30c8\u304b\u3089\u8a08\u7b97\u3059\u308b\u3068\u30b3\u30b9\u30c8\u306f\u639b\u304b\u308a\u307e\u3059\u304c\u3001\u885d\u7a81\u304c\u6e1b\u308b\u305f\u3081\u30c8\u30fc\u30bf\u30eb\u3067\u306f1.5\u500d\u7a0b\u5ea6\u9ad8\u901f\u5316\u3057\u307e\u3057\u305f\u3002\n\n\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u3092 `Dictionary<int, List<int * int * int>>` \u3067\u6271\u3044\u307e\u3059\u3002\u885d\u7a81\u3057\u305f\u3068\u304d\u306f\u30ea\u30cb\u30a2\u30b5\u30fc\u30c1\u3059\u308b\u305f\u3081\u30ea\u30b9\u30c8\u3092\u4f7f\u3044\u307e\u3059\u3002\u30ea\u30b9\u30c8\u5185\u306e\u30bf\u30d7\u30eb\u306f (\u958b\u59cb\u4f4d\u7f6e, \u9577\u3055, \u30a4\u30f3\u30c7\u30c3\u30af\u30b9) \u3067\u3059\u3002\n\n```fsharp\ntype HashTable = Dictionary<int, List<int * int * int>>\n```\n\n\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u3078\u306e\u8ffd\u52a0\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n```fsharp\nlet hashAdd (table:HashTable) src start length i =\n    let h = hash src start length\n    match table.TryGetValue h with\n    | false, _ ->\n        let list = List<int * int * int>()\n        list.Add(start, length, i)\n        table.[h] <- list\n    | true, list ->\n        list.Add(start, length, i)\n```\n\n\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u30ea\u30cb\u30a2\u30b5\u30fc\u30c1\u3067\u5fc5\u8981\u3068\u306a\u308b\u914d\u5217\u306e\u6bd4\u8f03\u3082\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n```fsharp\nlet arrayCmp (src:byte[]) s1 length (s2, len2, _) =\n    if length <> len2 then false else\n    if s1 = s2 then true else\n    seq {\n        for i = 0 to length - 1 do\n            if src.[s1 + i] <> src.[s2 + i] then yield false\n        yield true }\n    |> Seq.head\n\nlet hashGet (table:HashTable) src start length =\n    let h = hash src start length\n    match table.TryGetValue h with\n    | false, _ -> None\n    | true, list ->\n        match list |> Seq.tryFind (arrayCmp src start length) with\n        | Some (_, _, i) -> Some i\n        | _ -> None\n```\n\n\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u3092\u4f7f\u3046\u3088\u3046\u306b`encode`\u3092\u4fee\u6b63\u3057\u307e\u3059\u3002\n\n```fsharp\nlet encode (bw:BinaryWriter) (src:byte[]) =\n    let lzwMin = max 2 (Array.max src |> int |> bitSize)\n    bw.Write(byte lzwMin)  // LZW Minimum Code Size\n    use bitw = new BitWriter(bw)\n    let clr = 1 <<< lzwMin\n    let table = HashTable()\n    let mutable blen, next, j, prev = lzwMin + 1, clr * 2, 0, -1\n    let mutable cur = clr + 2\n    bitw.Write blen clr\n    for i = 0 to src.Length - 1 do\n        let length = (i + 1) - j\n        match hashGet table src j length with\n        | Some n ->\n            prev <- n\n        | _ ->\n            if prev >= 0 then\n                bitw.Write blen prev\n                hashAdd table src j length cur\n                cur <- cur + 1\n                if cur > 0xfff then\n                    bitw.Write blen clr\n                    table.Clear()\n                    blen <- lzwMin + 1\n                    next <- clr * 2\n                    prev <- -1\n                    cur  <- clr + 2\n                elif cur > next then\n                    blen <- blen + 1\n                    next <- next * 2\n            prev <- int src.[i]\n            j <- i\n    if prev >= 0 then bitw.Write blen prev\n    bitw.Write blen (clr + 1)  // End\n```\n\n### \u30c6\u30b9\u30c8\n\n\u5148\u307b\u3069\u3068\u540c\u3058\u6a19\u6e96\u753b\u50cfLenna\u306e\u5909\u63db\u3092\u8a66\u3057\u307e\u3059\u3002\u30b3\u30fc\u30c9\u306f\u540c\u3058\u306a\u306e\u3067\u7d50\u679c\u306e\u307f\u63b2\u8f09\u3057\u307e\u3059\u3002\u51fa\u529b\u3055\u308c\u308bGIF\u30d5\u30a1\u30a4\u30eb\u3082\u540c\u4e00\u3067\u3059\u3002\n\n```text:\u5b9f\u884c\u7d50\u679c\n00:00:00.0312001\n```\n\n\u5287\u7684\u306b\u9ad8\u901f\u5316\u3057\u307e\u3057\u305f\u3002\u307e\u3060\u5de5\u592b\u306e\u4f59\u5730\u306f\u3042\u308a\u305d\u3046\u3067\u3059\u304c\u3001\u5b9f\u7528\u4e0a\u306f\u3053\u308c\u3067\u5145\u5206\u3067\u3057\u3087\u3046\u3002\n\n### \u53c2\u8003\n\n\u53c2\u8003\u307e\u3067\u306bGDI+\u3067\u306e\u4fdd\u5b58\u3082\u8a08\u6e2c\u3057\u3066\u307f\u307e\u3059\u3002\n\n```fsharp\ndo  use bmp = new Bitmap(\"Lenna.png\")\n    let start = DateTime.Now\n    bmp.Save(\"Lenna.gif\", ImageFormat.Gif)\n    printfn \"%A\" (DateTime.Now - start)\n```\n```text:\u5b9f\u884c\u7d50\u679c\n00:00:00.0156001\n```\n\n\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u3067\u306f\u306a\u304f\u6e1b\u8272\u3092\u884c\u3063\u3066\u3044\u308b\u305f\u3081\u5358\u7d14\u306a\u6bd4\u8f03\u306f\u3067\u304d\u307e\u305b\u3093\u304c\u3001\u305d\u308c\u3067\u3082\u5727\u5012\u7684\u306b\u901f\u3044\u3067\u3059\u3002\n\n\u6a5f\u4f1a\u304c\u3042\u308c\u3070\u6e1b\u8272\u3092\u5b9f\u88c5\u3057\u3066\u3001\u307e\u305f\u6bd4\u8f03\u3057\u3066\u307f\u305f\u3044\u3067\u3059\u3002\n", "tags": ["gif", "F#"]}