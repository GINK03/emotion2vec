{"context": " More than 1 year has passed since last update.\u4ed5\u69d8: https://github.com/wycats/javascript-decorators\n\u30d7\u30ed\u30d1\u30c6\u30a3\u81ea\u4f53\u306b decorator \u306f\u4ed8\u304b\u7121\u3044\u306e\u3067\u3001\u3057\u304b\u305f\u306a\u304f setter \u3092\u4f5c\u3063\u305f\u3051\u3069\u3001\u306a\u3093\u304b\u3046\u307e\u304f\u3067\u304d\u306a\u3044\u3060\u308d\u3046\u304b\u3002\n(\u3053\u306e\u4f7f\u3044\u65b9\u81ea\u4f53\u304c\u7b4b\u60aa\u306a\u6c17\u3082\u3059\u308b\u304c\u3001 decorator \u3067\u3084\u308a\u305f\u3044\u306e\u3063\u3066\u3053\u3046\u3044\u3046\u306e\u306a\u6c17\u304c\u3059\u308b\u3002)\n// $ babel-node --optional es7.decorators index.js\nclass Assert {\n  private(target, name, descriptor) {\n    let value;\n    descriptor.set = (val) => {\n      value = val;\n    }\n    descriptor.get = () => {\n      return value;\n    }\n  }\n\n  required(target, name, descriptor) {\n    let original = descriptor.set;\n    descriptor.set = (val) => {\n      console.assert(val !== undefined, `${name} is required`);\n      original(val);\n    }\n  }\n\n  validate(target, name, descriptor) {\n    let original = descriptor.set;\n    descriptor.set = (val) => {\n      console.assert(val.method !== undefined, `${name}.val is required`);\n\n      let method_list = ['get', 'post', 'put', 'delete'];\n      console.assert(method_list.indexOf(val.method) > -1, `${name}.val should be one of ${method_list} but ${val.method}`);\n      original(val);\n    }\n  }\n}\n\nvar assert = new Assert();\n\nclass Fetcher {\n\n  @assert.required\n  @assert.private\n  set url(val) {}\n\n  @assert.validate\n  @assert.required\n  @assert.private\n  set option(val) {}\n\n  constructor(url, option) {\n    this.url = url;\n    this.option = option;\n  }\n}\n\nvar fetcher = new Fetcher('http://example.com', { method: 'get' });\nconsole.log(fetcher);         // {}\nconsole.log(fetcher.url);     // http://example.com\nconsole.log(fetcher.options); // { method: 'get' }\n\n\u8ffd\u8a18\n\u95a2\u6570\u306e\u5f15\u6570\u3092\u5148\u306b\u596a\u3063\u3066\u30d0\u30ea\u30c7\u30fc\u30c8\nclass Fetcher {\n\n  @assert.required\n  @assert.private\n  set url(val) {}\n\n  @assert.validate\n  @assert.required\n  @assert.private\n  set option(val) {}\n\n  constructor(url, option) {\n    this.url = url;\n    this.option = option;\n  }\n}\n\nvar fetcher = new Fetcher('http://example.com', { method: 'get' });\nconsole.log(fetcher);         // {}\nconsole.log(fetcher.url);     // http://example.com\nconsole.log(fetcher.options); // { method: 'get' }\n\n\u6c4e\u7528\u306e\u95a2\u6570 wrapper \u3092\u4f5c\u308b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u5225\u9014\u7528\u610f\u3002\nclass Fetcher {\n\n  @assert.required\n  @assert.private\n  set url(val) {}\n\n  @assert.validate\n  @assert.required\n  @assert.private\n  set option(val) {}\n\n  constructor(url, option) {\n    this.url = url;\n    this.option = option;\n  }\n}\n\nvar fetcher = new Fetcher('http://example.com', { method: 'get' });\nconsole.log(fetcher);         // {}\nconsole.log(fetcher.url);     // http://example.com\nconsole.log(fetcher.options); // { method: 'get' }\n\n\u4ed5\u69d8: https://github.com/wycats/javascript-decorators\n\n\u30d7\u30ed\u30d1\u30c6\u30a3\u81ea\u4f53\u306b decorator \u306f\u4ed8\u304b\u7121\u3044\u306e\u3067\u3001\u3057\u304b\u305f\u306a\u304f setter \u3092\u4f5c\u3063\u305f\u3051\u3069\u3001\u306a\u3093\u304b\u3046\u307e\u304f\u3067\u304d\u306a\u3044\u3060\u308d\u3046\u304b\u3002\n(\u3053\u306e\u4f7f\u3044\u65b9\u81ea\u4f53\u304c\u7b4b\u60aa\u306a\u6c17\u3082\u3059\u308b\u304c\u3001 decorator \u3067\u3084\u308a\u305f\u3044\u306e\u3063\u3066\u3053\u3046\u3044\u3046\u306e\u306a\u6c17\u304c\u3059\u308b\u3002)\n\n```js\n// $ babel-node --optional es7.decorators index.js\nclass Assert {\n  private(target, name, descriptor) {\n    let value;\n    descriptor.set = (val) => {\n      value = val;\n    }\n    descriptor.get = () => {\n      return value;\n    }\n  }\n\n  required(target, name, descriptor) {\n    let original = descriptor.set;\n    descriptor.set = (val) => {\n      console.assert(val !== undefined, `${name} is required`);\n      original(val);\n    }\n  }\n\n  validate(target, name, descriptor) {\n    let original = descriptor.set;\n    descriptor.set = (val) => {\n      console.assert(val.method !== undefined, `${name}.val is required`);\n\n      let method_list = ['get', 'post', 'put', 'delete'];\n      console.assert(method_list.indexOf(val.method) > -1, `${name}.val should be one of ${method_list} but ${val.method}`);\n      original(val);\n    }\n  }\n}\n\nvar assert = new Assert();\n\nclass Fetcher {\n\n  @assert.required\n  @assert.private\n  set url(val) {}\n\n  @assert.validate\n  @assert.required\n  @assert.private\n  set option(val) {}\n\n  constructor(url, option) {\n    this.url = url;\n    this.option = option;\n  }\n}\n\nvar fetcher = new Fetcher('http://example.com', { method: 'get' });\nconsole.log(fetcher);         // {}\nconsole.log(fetcher.url);     // http://example.com\nconsole.log(fetcher.options); // { method: 'get' }\n```\n\n\n\u8ffd\u8a18\n\n\u95a2\u6570\u306e\u5f15\u6570\u3092\u5148\u306b\u596a\u3063\u3066\u30d0\u30ea\u30c7\u30fc\u30c8\n\n```js\nclass Fetcher {\n\n  @assert.required\n  @assert.private\n  set url(val) {}\n\n  @assert.validate\n  @assert.required\n  @assert.private\n  set option(val) {}\n\n  constructor(url, option) {\n    this.url = url;\n    this.option = option;\n  }\n}\n\nvar fetcher = new Fetcher('http://example.com', { method: 'get' });\nconsole.log(fetcher);         // {}\nconsole.log(fetcher.url);     // http://example.com\nconsole.log(fetcher.options); // { method: 'get' }\n```\n\n\u6c4e\u7528\u306e\u95a2\u6570 wrapper \u3092\u4f5c\u308b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u5225\u9014\u7528\u610f\u3002\n\n```js\nclass Fetcher {\n\n  @assert.required\n  @assert.private\n  set url(val) {}\n\n  @assert.validate\n  @assert.required\n  @assert.private\n  set option(val) {}\n\n  constructor(url, option) {\n    this.url = url;\n    this.option = option;\n  }\n}\n\nvar fetcher = new Fetcher('http://example.com', { method: 'get' });\nconsole.log(fetcher);         // {}\nconsole.log(fetcher.url);     // http://example.com\nconsole.log(fetcher.options); // { method: 'get' }\n```\n", "tags": ["es7", "babel", "JavaScript"]}