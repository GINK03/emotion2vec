{"context": "gem\u306eoauth2\u3092\u4f7f\u3046\u6a5f\u4f1a\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u3056\u3063\u3068\u307f\u3066\u307f\u305f\u30e1\u30e2\u3002\noauth2\nhttps://github.com/intridea/oauth2\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\nrequire 'oauth2'\n\nclient = OAuth2::Client.new('client_id', 'client_secret', :site => 'https://example.org')\n\nclient.auth_code.authorize_url(:redirect_uri => 'http://localhost:8080/oauth2/callback')\n\ntoken = client.auth_code.get_token('authorization_code_value', :redirect_uri => 'http://localhost:8080/oauth2/callback', :headers => {'Authorization' => 'Basic some_password'})\n\nresponse = token.get('/api/resource', :params => { 'query_foo' => 'bar' })\n\n\n\n\n\u3069\u3046\u306a\u3063\u3066\u308b\u306e\u304bgem\u306e\u4e2d\u3092\u9664\u3044\u3066\u307f\u308b\n\nclient = OAuth2::Client.new('client_id', 'client_secret', :site => 'https://example.org')\n\nclient_id\u3001client_secret\u3001api\u306eurl\u3092\u30bb\u30c3\u30c8\n:site\u306f\u6307\u5b9a\u305b\u305a\u306b\u3001\u300c:authorize_url\u300d\u300c:token_url\u300d\u306e\u6307\u5b9a\u3067\u3082OK\u3063\u307d\u3044\n\n\nclient.auth_code.authorize_url(:redirect_uri => 'http://localhost:8080/oauth2/callback')\n\n\nauth_code.rb\n      def authorize_url(params = {})\n        @client.authorize_url(authorize_params.merge(params))\n      end\n\n      def authorize_params(params = {})\n        params.merge('response_type' => 'code', 'client_id' => @client.id)\n      end\n\n\n\nclient.rb\n    def authorize_url(params = nil)\n      connection.build_url(options[:authorize_url], params).to_s\n    end\n\n\n\u4ee5\u4e0b\u3092\u3064\u306a\u3052\u3066\u3044\u308b\u3060\u3051\n* options[:authorize_url]\uff1a\u300c:site\u300d\u306b/oauth/authorize\u3092\u8db3\u3057\u305f\u3082\u306e\n* response_type\n* client_id\n* \u6e21\u3057\u305f\u5f15\u6570\n\n\n\u751f\u6210\u3057\u305furl\u306bredirect\u3055\u305b\u308b\u3068\u3001\u5404\u30d7\u30ed\u30d0\u30a4\u30c0\uff08yahoo\u3068\u304b\uff09\u306e\u8a8d\u8a3c\u753b\u9762\u306b\u9077\u79fb\u3059\u308b\n\u8a8d\u8a3cOK\u306b\u306a\u308b\u3068\u6307\u5b9a\u3057\u305fredirect_url\u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3002code\u3082\u4ed8\u4e0e\u3055\u308c\u308b\n\n\n\ntoken = client.auth_code.get_token('authorization_code_value', :redirect_uri => 'http://localhost:8080/oauth2/callback', :headers => {'Authorization' => 'Basic some_password'})\n\n\nauth_code.rb\n      def get_token(code, params = {}, opts = {})\n        params = {'grant_type' => 'authorization_code', 'code' => code}.merge(client_params).merge(params)\n        @client.get_token(params, opts)\n      end\n\n\n\u4ee5\u4e0b\u3092merge\u3057\u3066\u308b\n* clint_params\uff1aclient_id\u3068client_secret\u306e\u914d\u5217\n* grant_type\n* code\uff1aredirect\u6642\u306b\u5e30\u3063\u3066\u304d\u305f\u5024\u3092\u6307\u5b9a\uff08\u8a8d\u8a3c\u304ccode\u306e\u5834\u5408\uff09\n\nclient.rb\n    def get_token(params, access_token_opts = {}, access_token_class = AccessToken) # rubocop:disable Metrics/AbcSize\n      opts = {:raise_errors => options[:raise_errors], :parse => params.delete(:parse)}\n      if options[:token_method] == :post\n        headers = params.delete(:headers)\n        opts[:body] = params\n        opts[:headers] = {'Content-Type' => 'application/x-www-form-urlencoded'}\n        opts[:headers].merge!(headers) if headers\n      else\n        opts[:params] = params\n      end\n      response = request(options[:token_method], token_url, opts)\n      error = Error.new(response)\n      raise(error) if options[:raise_errors] && !(response.parsed.is_a?(Hash) && response.parsed['access_token'])\n      access_token_class.from_hash(self, response.parsed.merge(access_token_opts))\n    end\n\n\npost\u306e\u5834\u5408\u3001:headers\u306e\u6307\u5b9a\u304c\u3042\u308c\u3070\u3001\u8a2d\u5b9a\u3057\u3066request\u306a\u3052\u308b\naccess_token\u3092\u53d6\u5f97\u3059\u308b\n\n\nresponse = token.get('/api/resource', :params => { 'query_foo' => 'bar' })\n\n\naccess_token.rb\n    def get(path, opts = {}, &block)\n      request(:get, path, opts, &block)\n    end\n    def request(verb, path, opts = {}, &block)\n      self.token = opts\n      @client.request(verb, path, opts, &block)\n    end\n\n\n\u7b2c1\u5f15\u6570\uff1a\u4f7f\u7528\u3059\u308bapi\u306epath\n\u7b2c2\u5f15\u6570\uff1aapi\u3092\u4f7f\u7528\u3059\u308b\u969b\u306b\u4f7f\u7528\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\uff08\u3042\u308c\u3070\uff09\nresponse\u306b\u30d7\u30ed\u30d0\u30a4\u30c0\u304b\u3089\u53d6\u5f97\u3057\u305f\u60c5\u5831\u304c\u683c\u7d0d\u3055\u308c\u308b\u3002\n\n\u95a2\u9023\u8a18\u4e8b\nruby\u306eoauth2(gem)\u306b\u3064\u3044\u30662_google\u8a8d\u8a3c\u3084\u3063\u3066\u307f\u308b\n\ngem\u306eoauth2\u3092\u4f7f\u3046\u6a5f\u4f1a\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u3056\u3063\u3068\u307f\u3066\u307f\u305f\u30e1\u30e2\u3002\n\noauth2\nhttps://github.com/intridea/oauth2\n\n\n```ruby:\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\nrequire 'oauth2'\n\nclient = OAuth2::Client.new('client_id', 'client_secret', :site => 'https://example.org')\n\nclient.auth_code.authorize_url(:redirect_uri => 'http://localhost:8080/oauth2/callback')\n\ntoken = client.auth_code.get_token('authorization_code_value', :redirect_uri => 'http://localhost:8080/oauth2/callback', :headers => {'Authorization' => 'Basic some_password'})\n\nresponse = token.get('/api/resource', :params => { 'query_foo' => 'bar' })\n\n```\n<br>\n\n\n\u3069\u3046\u306a\u3063\u3066\u308b\u306e\u304bgem\u306e\u4e2d\u3092\u9664\u3044\u3066\u307f\u308b\n\n> client = OAuth2::Client.new('client_id', 'client_secret', :site => 'https://example.org')\n\nclient_id\u3001client_secret\u3001api\u306eurl\u3092\u30bb\u30c3\u30c8\n:site\u306f\u6307\u5b9a\u305b\u305a\u306b\u3001\u300c:authorize_url\u300d\u300c:token_url\u300d\u306e\u6307\u5b9a\u3067\u3082OK\u3063\u307d\u3044\n<br>\n\n\n>client.auth_code.authorize_url(:redirect_uri => 'http://localhost:8080/oauth2/callback')\n\n```ruby:auth_code.rb\n      def authorize_url(params = {})\n        @client.authorize_url(authorize_params.merge(params))\n      end\n\n      def authorize_params(params = {})\n        params.merge('response_type' => 'code', 'client_id' => @client.id)\n      end\n```\n```ruby:client.rb\n    def authorize_url(params = nil)\n      connection.build_url(options[:authorize_url], params).to_s\n    end\n```\n\u4ee5\u4e0b\u3092\u3064\u306a\u3052\u3066\u3044\u308b\u3060\u3051\n* options[:authorize_url]\uff1a\u300c:site\u300d\u306b/oauth/authorize\u3092\u8db3\u3057\u305f\u3082\u306e\n* response_type\n* client_id\n* \u6e21\u3057\u305f\u5f15\u6570\n<br>\n\n1. \u751f\u6210\u3057\u305furl\u306bredirect\u3055\u305b\u308b\u3068\u3001\u5404\u30d7\u30ed\u30d0\u30a4\u30c0\uff08yahoo\u3068\u304b\uff09\u306e\u8a8d\u8a3c\u753b\u9762\u306b\u9077\u79fb\u3059\u308b\n2. \u8a8d\u8a3cOK\u306b\u306a\u308b\u3068\u6307\u5b9a\u3057\u305fredirect_url\u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3002code\u3082\u4ed8\u4e0e\u3055\u308c\u308b\n\n<br>\n>token = client.auth_code.get_token('authorization_code_value', :redirect_uri => 'http://localhost:8080/oauth2/callback', :headers => {'Authorization' => 'Basic some_password'})\n\n\n```ruby:auth_code.rb\n      def get_token(code, params = {}, opts = {})\n        params = {'grant_type' => 'authorization_code', 'code' => code}.merge(client_params).merge(params)\n        @client.get_token(params, opts)\n      end\n```\n\u4ee5\u4e0b\u3092merge\u3057\u3066\u308b\n* clint_params\uff1aclient_id\u3068client_secret\u306e\u914d\u5217\n* grant_type\n* code\uff1aredirect\u6642\u306b\u5e30\u3063\u3066\u304d\u305f\u5024\u3092\u6307\u5b9a\uff08\u8a8d\u8a3c\u304ccode\u306e\u5834\u5408\uff09\n\n```ruby:client.rb\n    def get_token(params, access_token_opts = {}, access_token_class = AccessToken) # rubocop:disable Metrics/AbcSize\n      opts = {:raise_errors => options[:raise_errors], :parse => params.delete(:parse)}\n      if options[:token_method] == :post\n        headers = params.delete(:headers)\n        opts[:body] = params\n        opts[:headers] = {'Content-Type' => 'application/x-www-form-urlencoded'}\n        opts[:headers].merge!(headers) if headers\n      else\n        opts[:params] = params\n      end\n      response = request(options[:token_method], token_url, opts)\n      error = Error.new(response)\n      raise(error) if options[:raise_errors] && !(response.parsed.is_a?(Hash) && response.parsed['access_token'])\n      access_token_class.from_hash(self, response.parsed.merge(access_token_opts))\n    end\n```\npost\u306e\u5834\u5408\u3001:headers\u306e\u6307\u5b9a\u304c\u3042\u308c\u3070\u3001\u8a2d\u5b9a\u3057\u3066request\u306a\u3052\u308b\naccess_token\u3092\u53d6\u5f97\u3059\u308b\n<br>\n\n\n>response = token.get('/api/resource', :params => { 'query_foo' => 'bar' })\n\n```ruby:access_token.rb\n    def get(path, opts = {}, &block)\n      request(:get, path, opts, &block)\n    end\n    def request(verb, path, opts = {}, &block)\n      self.token = opts\n      @client.request(verb, path, opts, &block)\n    end\n```\n\u7b2c1\u5f15\u6570\uff1a\u4f7f\u7528\u3059\u308bapi\u306epath\n\u7b2c2\u5f15\u6570\uff1aapi\u3092\u4f7f\u7528\u3059\u308b\u969b\u306b\u4f7f\u7528\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\uff08\u3042\u308c\u3070\uff09\n\nresponse\u306b\u30d7\u30ed\u30d0\u30a4\u30c0\u304b\u3089\u53d6\u5f97\u3057\u305f\u60c5\u5831\u304c\u683c\u7d0d\u3055\u308c\u308b\u3002\n\n\n# \u95a2\u9023\u8a18\u4e8b\n[ruby\u306eoauth2(gem)\u306b\u3064\u3044\u30662_google\u8a8d\u8a3c\u3084\u3063\u3066\u307f\u308b](http://qiita.com/mm31/items/ff317a523ec54db11f4e)\n\n<br>\n", "tags": ["oauth2"]}