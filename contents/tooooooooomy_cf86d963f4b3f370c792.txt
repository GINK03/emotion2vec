{"context": "\u4f55\u5e74\u304b\u3054\u3057\u306b\n\nMergeSort.php\n<?php\nnamespace Algo\\Sort;\n\nclass MergeSort\n{\n    public function run($n, &$data, $offset)\n    {\n        if ($n <= 1) {\n            return;\n        }\n        $m = (int) ($n / 2);\n\n        self::run($m, $data, $offset);\n        self::run($n - $m, $data, $offset + $m);\n\n        $buffer = [];\n        for ($i = 0;  $i < $m; $i++) {\n            $buffer[$i] = $data[$offset + $i];\n        }\n\n        $j = $m;\n        $i = $k = 0;\n\n        while ($i < $m && $j < $n) {\n            if ($buffer[$i] <= $data[$offset + $j]) {\n                $data[$offset + $k++] = $buffer[$i++];\n            } else {\n                $data[$offset + $k++] = $data[$offset + $j++];\n            }\n        }\n\n        while ($i < $m) {\n            $data[$offset + $k++] = $buffer[$i++];\n        }\n    }\n}\n\n\n\nMergeSortTest.php\n<?php\n\nclass MergeSortTest extends PHPUnit_Framework_TestCase\n{\n    public function test_mergeSort()\n    {\n        $n = 10;\n        $data = [];\n        for ($i = 0; $i < $n; $i++) {\n            $data[] = rand();\n        }\n        $expected = $data;\n        sort($expected);\n\n        $t = new \\Algo\\Sort\\MergeSort();\n        $t->run($n, $data, 0);\n\n        $this->assertEquals($expected, $data);\n    }\n}\n\n\n\u4f55\u5e74\u304b\u3054\u3057\u306b\n\n```php:MergeSort.php\n<?php\nnamespace Algo\\Sort;\n\nclass MergeSort\n{\n    public function run($n, &$data, $offset)\n    {\n        if ($n <= 1) {\n            return;\n        }\n        $m = (int) ($n / 2);\n\n        self::run($m, $data, $offset);\n        self::run($n - $m, $data, $offset + $m);\n\n        $buffer = [];\n        for ($i = 0;  $i < $m; $i++) {\n            $buffer[$i] = $data[$offset + $i];\n        }\n\n        $j = $m;\n        $i = $k = 0;\n\n        while ($i < $m && $j < $n) {\n            if ($buffer[$i] <= $data[$offset + $j]) {\n                $data[$offset + $k++] = $buffer[$i++];\n            } else {\n                $data[$offset + $k++] = $data[$offset + $j++];\n            }\n        }\n\n        while ($i < $m) {\n            $data[$offset + $k++] = $buffer[$i++];\n        }\n    }\n}\n```\n\n```php:MergeSortTest.php\n<?php\n\nclass MergeSortTest extends PHPUnit_Framework_TestCase\n{\n    public function test_mergeSort()\n    {\n        $n = 10;\n        $data = [];\n        for ($i = 0; $i < $n; $i++) {\n            $data[] = rand();\n        }\n        $expected = $data;\n        sort($expected);\n\n        $t = new \\Algo\\Sort\\MergeSort();\n        $t->run($n, $data, 0);\n\n        $this->assertEquals($expected, $data);\n    }\n}\n```\n", "tags": ["PHP", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"]}