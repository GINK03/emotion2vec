{"tags": ["C#", "encoding", "Combobox"], "context": " More than 1 year has passed since last update.\n\n\u4f7f\u7528\u4f8b\nComboBox.SelectedIndexChanged\u306bmethod\u3092\u767b\u9332\u3057\u3066\n\u305d\u3053\u3067\u51e6\u7406\u3092\u3059\u308c\u3070\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nprivate System.Windows.Forms.ComboBox encodings;\nprivate System.Windows.Forms.BindingSource encodingBindingSource;\n\nHogeEncodingList encodinglist = null;\n\npublic Test () {\n  InitializeComponent ();\n  encodinglist = new HogeEncodingList ();\n}\n\nprivate void Test_Load (Object sender, EventArgs e) {\n  encodinglist.HogeCreateList ();\n  encodings.DataSource = encodingBindingSource;\n  encodingBindingSource.DataSource = encodinglist;\n}\n\n\nBindingSource\u4f7f\u308f\u306a\u3044\u5834\u5408\nprivate void Test_Load (Object sender, EventArgs e) {\n  encodinglist.HogeCreateList ();\n  encodings.DataSource = encodinglist;\n}\n\n\n\u672c\u4f53\nusing System;\nusing System.Text;\nusing System.Collections.Generic;\nusing System.ComponentModel;\n\nnamespace Test {\n  public class HogeEncoding : IEquatable<HogeEncoding>, IComparable<HogeEncoding> {\n    public String Name;\n    public EncodingInfo EncodingInfo;\n    public Boolean BOM;\n    public String BOMName;\n\n    static public Boolean HogeHasBOM (Encoding enc) {\n      return enc.GetPreamble ().Length == 0 ? false : true;\n    }\n\n    static public Boolean HogeHasBOM (EncodingInfo info) {\n      return info.GetEncoding ().GetPreamble ().Length == 0 ? false : true;\n    }\n\n    static public Encoding HogeGetEncodings (Encoding enc, Boolean BOM) {\n      switch (enc.CodePage) {\n        case 1200: // utf-16\n          return new UnicodeEncoding (false, BOM, true);\n        case 1201: // utf-16 Big-Endian\n          return new UnicodeEncoding (true, BOM, true);\n        case 12000: // utf-32\n          return new UTF32Encoding (false, BOM, true);\n        case 12001: // utf-32 Big-Endian\n          return new UTF32Encoding (true, BOM, true);\n        case 65001: // utf-8\n          return new UTF8Encoding (BOM, true);\n        case 65000: // utf-7\n          return new UTF7Encoding (true);\n      }\n      return enc;\n    }\n\n    static public Encoding HogeGetEncoding (HogeEncoding e, Boolean BOM) {\n      return HogeGetEncoding (e.EncodingInfo.GetEncoding (), BOM);\n    }\n\n    static private Encoding HogeGetEncoding (Object p, Boolean bOM) {\n      throw new NotImplementedException ();\n    }\n\n    public Boolean Equals (HogeEncoding o) {\n      throw new NotImplementedException ();\n    }\n\n    public int CompareTo (HogeEncoding o) {\n      return BOMName.CompareTo (o.BOMName);\n    }\n\n    public override String ToString () {\n      return BOMName;\n    }\n  }\n\n  public class HogeEncodingList : BindingList<HogeEncoding>, INotifyPropertyChanged {\n    public event PropertyChangedEventHandler PropertyChanged = null;\n    private void NotifyPropertyChanged (String propertyName = \"\") {\n      if (PropertyChanged != null)\n        PropertyChanged (this, new PropertyChangedEventArgs (propertyName));\n    }\n\n    public void HogeCreateList () {\n      SortedSet<HogeEncoding> set = new SortedSet<HogeEncoding> ();\n      foreach (EncodingInfo info in Encoding.GetEncodings ()) {\n        Boolean bom = HogeEncoding.HogeHasBOM (info.GetEncoding ());\n        HogeEncoding e = new HogeEncoding ();\n        {\n          e.EncodingInfo = info;\n          e.Name = info.Name;\n          e.BOM = bom;\n          e.BOMName = info.Name + @\" \" + (bom ? @\"HAS-BOM\" : @\"NO-BOM\") + @\" (\" + info.CodePage + @\")\";\n        }\n        set.Add (e);\n      }\n      foreach (HogeEncoding o in set)\n        Add (o);\n    }\n\n    public HogeEncoding GetHogeEncodingFromEncodingInfo (EncodingInfo info) {\n      if (info != null) {\n        foreach (HogeEncoding s in this)\n          if (s.Name.Equals (info.Name))\n            return s;\n      }\n      throw new ArgumentException (info.Name);\n    }\n\n    public HogeEncoding GetHogeEncodingFromEncoding (Encoding enc) {\n      if (enc != null) {\n        foreach (HogeEncoding s in this)\n          if (s.EncodingInfo.GetEncoding ().Equals (enc))\n            return s;\n      }\n      throw new ArgumentException (enc.EncodingName);\n    }\n\n    public HogeEncoding GetHogeEncodingFromCodePage (int codepage) {\n      foreach (HogeEncoding s in this) {\n        if (s.EncodingInfo.GetEncoding ().CodePage.Equals (codepage))\n          return s;\n      }\n      throw new ArgumentException (codepage.ToString ());\n    }\n\n    public HogeEncoding GetHogeEncodingFromName (String name) {\n      foreach (HogeEncoding s in this) {\n        if (s.Name.Equals (name))\n          return s;\n      }\n      throw new ArgumentException (name);\n    }\n\n    public HogeEncoding GetHogeEncodingFromBOMName (String bom) {\n      foreach (HogeEncoding s in this) {\n        if (s.BOMName.Equals (bom))\n          return s;\n      }\n      throw new ArgumentException (bom);\n    }\n\n    public Boolean Equals (HogeEncoding o) {\n      throw new NotImplementedException ();\n    }\n\n    public Int32 CompareTo (HogeEncoding o) {\n      throw new NotImplementedException ();\n    }\n  }\n}\n\n#\u4f7f\u7528\u4f8b\nComboBox.SelectedIndexChanged\u306bmethod\u3092\u767b\u9332\u3057\u3066\n\u305d\u3053\u3067\u51e6\u7406\u3092\u3059\u308c\u3070\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n```\nprivate System.Windows.Forms.ComboBox encodings;\nprivate System.Windows.Forms.BindingSource encodingBindingSource;\n\nHogeEncodingList encodinglist = null;\n\npublic Test () {\n  InitializeComponent ();\n  encodinglist = new HogeEncodingList ();\n}\n\nprivate void Test_Load (Object sender, EventArgs e) {\n  encodinglist.HogeCreateList ();\n  encodings.DataSource = encodingBindingSource;\n  encodingBindingSource.DataSource = encodinglist;\n}\n```\n\n#BindingSource\u4f7f\u308f\u306a\u3044\u5834\u5408\n```\nprivate void Test_Load (Object sender, EventArgs e) {\n  encodinglist.HogeCreateList ();\n  encodings.DataSource = encodinglist;\n}\n```\n\n#\u672c\u4f53\n```\nusing System;\nusing System.Text;\nusing System.Collections.Generic;\nusing System.ComponentModel;\n\nnamespace Test {\n  public class HogeEncoding : IEquatable<HogeEncoding>, IComparable<HogeEncoding> {\n    public String Name;\n    public EncodingInfo EncodingInfo;\n    public Boolean BOM;\n    public String BOMName;\n\n    static public Boolean HogeHasBOM (Encoding enc) {\n      return enc.GetPreamble ().Length == 0 ? false : true;\n    }\n\n    static public Boolean HogeHasBOM (EncodingInfo info) {\n      return info.GetEncoding ().GetPreamble ().Length == 0 ? false : true;\n    }\n\n    static public Encoding HogeGetEncodings (Encoding enc, Boolean BOM) {\n      switch (enc.CodePage) {\n        case 1200: // utf-16\n          return new UnicodeEncoding (false, BOM, true);\n        case 1201: // utf-16 Big-Endian\n          return new UnicodeEncoding (true, BOM, true);\n        case 12000: // utf-32\n          return new UTF32Encoding (false, BOM, true);\n        case 12001: // utf-32 Big-Endian\n          return new UTF32Encoding (true, BOM, true);\n        case 65001: // utf-8\n          return new UTF8Encoding (BOM, true);\n        case 65000: // utf-7\n          return new UTF7Encoding (true);\n      }\n      return enc;\n    }\n\n    static public Encoding HogeGetEncoding (HogeEncoding e, Boolean BOM) {\n      return HogeGetEncoding (e.EncodingInfo.GetEncoding (), BOM);\n    }\n\n    static private Encoding HogeGetEncoding (Object p, Boolean bOM) {\n      throw new NotImplementedException ();\n    }\n\n    public Boolean Equals (HogeEncoding o) {\n      throw new NotImplementedException ();\n    }\n\n    public int CompareTo (HogeEncoding o) {\n      return BOMName.CompareTo (o.BOMName);\n    }\n\n    public override String ToString () {\n      return BOMName;\n    }\n  }\n\n  public class HogeEncodingList : BindingList<HogeEncoding>, INotifyPropertyChanged {\n    public event PropertyChangedEventHandler PropertyChanged = null;\n    private void NotifyPropertyChanged (String propertyName = \"\") {\n      if (PropertyChanged != null)\n        PropertyChanged (this, new PropertyChangedEventArgs (propertyName));\n    }\n\n    public void HogeCreateList () {\n      SortedSet<HogeEncoding> set = new SortedSet<HogeEncoding> ();\n      foreach (EncodingInfo info in Encoding.GetEncodings ()) {\n        Boolean bom = HogeEncoding.HogeHasBOM (info.GetEncoding ());\n        HogeEncoding e = new HogeEncoding ();\n        {\n          e.EncodingInfo = info;\n          e.Name = info.Name;\n          e.BOM = bom;\n          e.BOMName = info.Name + @\" \" + (bom ? @\"HAS-BOM\" : @\"NO-BOM\") + @\" (\" + info.CodePage + @\")\";\n        }\n        set.Add (e);\n      }\n      foreach (HogeEncoding o in set)\n        Add (o);\n    }\n\n    public HogeEncoding GetHogeEncodingFromEncodingInfo (EncodingInfo info) {\n      if (info != null) {\n        foreach (HogeEncoding s in this)\n          if (s.Name.Equals (info.Name))\n            return s;\n      }\n      throw new ArgumentException (info.Name);\n    }\n\n    public HogeEncoding GetHogeEncodingFromEncoding (Encoding enc) {\n      if (enc != null) {\n        foreach (HogeEncoding s in this)\n          if (s.EncodingInfo.GetEncoding ().Equals (enc))\n            return s;\n      }\n      throw new ArgumentException (enc.EncodingName);\n    }\n\n    public HogeEncoding GetHogeEncodingFromCodePage (int codepage) {\n      foreach (HogeEncoding s in this) {\n        if (s.EncodingInfo.GetEncoding ().CodePage.Equals (codepage))\n          return s;\n      }\n      throw new ArgumentException (codepage.ToString ());\n    }\n\n    public HogeEncoding GetHogeEncodingFromName (String name) {\n      foreach (HogeEncoding s in this) {\n        if (s.Name.Equals (name))\n          return s;\n      }\n      throw new ArgumentException (name);\n    }\n\n    public HogeEncoding GetHogeEncodingFromBOMName (String bom) {\n      foreach (HogeEncoding s in this) {\n        if (s.BOMName.Equals (bom))\n          return s;\n      }\n      throw new ArgumentException (bom);\n    }\n\n    public Boolean Equals (HogeEncoding o) {\n      throw new NotImplementedException ();\n    }\n\n    public Int32 CompareTo (HogeEncoding o) {\n      throw new NotImplementedException ();\n    }\n  }\n}\n```\n"}