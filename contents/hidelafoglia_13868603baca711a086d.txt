{"context": "\n\n\u30e2\u30c7\u30eb\u30af\u30e9\u30b9\u306b \u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u30c1\u30a7\u30c3\u30ab\u30fc\u3092\u5b9f\u88c5\nclass Event(models.Model):\n\n    def has_perm(self, user, perm):\n        # \u305f\u3068\u3048\u3070...\n        if self.org.has_perm(user, perm):\n            return True\n\n        if perm == \"events.browse_event\":\n            if self.is_private:\n                return user.has_perm(perm)\n            else:\n                return True\n\n\nbackends \u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u30c1\u30a7\u30c3\u30ab\u30fc\u3092\u8d77\u52d5\n\napp/backends.py\n\nclass PermissionBackend(object):\n    def has_perm(self, user_obj, perm, obj=None):\n        '''\n        :param user_obj: User instance\n        :param perm: permission code string (`auth.change_auth_user`)\n        :param obj: Model instance (optional)\n        '''\n        res = obj and hasattr(obj, 'has_perm') and obj.has_perm(user_obj, perm)\n        return res or False\n\n    def authenticate(self, username=None, password=None):\n        # required for Permission Backends\n        pass\n\n\napp/settings.py\n\nfrom django.conf import global_settings                                          \n\nAUTHENTICATION_BACKENDS = global_settings.AUTHENTICATION_BACKENDS + [            \n'app.backends.PermissionBackend',                                           \n]  \n\n\nviews.py\nfrom django.http import HttpResponseForbidden\n\ndef event_edit(request, id):\n    event = models.Event.objects.get(id=id)\n    if not request.user.has_perm('events.change_event', event):\n          return HttpResponseForbidden()\n    ...\n\n\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a3\u30eb\u30bf: has_perm\n\n@register.filter\ndef tup(src, arg):\n    if isinstance(src, tuple):\n        return src + (arg, )\n    return (src, arg, )\n\n\n@register.filter\ndef has_perm((obj, user), perm):\n    return user.has_perm(perm, obj)\n\n\ndetail.html\n\n\n{% if event|tup:user|has_perm:'events.change_event' %}\n  <a href=\"{% url 'events_event_edit' id=event.id %}\">{% trans 'Edit' %}</a>\n{% %}\n\n\naction \u540d\u304b\u3089\u30e2\u30c7\u30eb\u3078\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u30b3\u30fc\u30c9\u3092\u8fd4\u3059\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.contrib.auth import get_permission_codename\n\nclass BaseModel(object):\n\n    @classmethod\n    def perm_name(cls, action, model=None):\n        '''\u6307\u5b9a\u3055\u308c\u305f\u30a2\u30af\u30b7\u30e7\u30f3\u306b\u5bfe\u3059\u308b\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u540d'''\n        model = model or cls\n        return \"{}.{}\".format(\n            model._meta.app_label,\n            get_permission_codename(action, model._meta))\n\n\n\ndefault_permissions\nclass Event(models.Model):\n    ....\n    class Meta:\n        default_permissions = ('add', 'change', 'delete', 'browse')\n\n\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a3\u30eb\u30bf: can\n\n@register.filter                                                                 \ndef can((obj, user), action):                                                    \n    perm = models.BaseModel.perm_name(action, model=obj)                         \n    return user.has_perm(perm, obj)    \n\n{% if event|tup:user|can:'change' %}\n  <a href=\"{% url 'events_event_edit' id=event.id %}\">{% trans 'Edit' %}</a>\n{% %}\n\n\n\n## \u30e2\u30c7\u30eb\u30af\u30e9\u30b9\u306b \u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u30c1\u30a7\u30c3\u30ab\u30fc\u3092\u5b9f\u88c5\n\n~~~py\nclass Event(models.Model):\n\n    def has_perm(self, user, perm):\n        # \u305f\u3068\u3048\u3070...\n        if self.org.has_perm(user, perm):\n            return True\n\n        if perm == \"events.browse_event\":\n            if self.is_private:\n                return user.has_perm(perm)\n            else:\n                return True\n~~~\n\n## backends \u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u30c1\u30a7\u30c3\u30ab\u30fc\u3092\u8d77\u52d5\n\n- app/backends.py\n\n~~~py\nclass PermissionBackend(object):\n    def has_perm(self, user_obj, perm, obj=None):\n        '''\n        :param user_obj: User instance\n        :param perm: permission code string (`auth.change_auth_user`)\n        :param obj: Model instance (optional)\n        '''\n        res = obj and hasattr(obj, 'has_perm') and obj.has_perm(user_obj, perm)\n        return res or False\n\n    def authenticate(self, username=None, password=None):\n        # required for Permission Backends\n        pass\n~~~\n\n- app/settings.py\n\n~~~py\nfrom django.conf import global_settings                                          \n\nAUTHENTICATION_BACKENDS = global_settings.AUTHENTICATION_BACKENDS + [            \n'app.backends.PermissionBackend',                                           \n]  \n~~~\n\n\n## views.py\n\n~~~py\nfrom django.http import HttpResponseForbidden\n\ndef event_edit(request, id):\n    event = models.Event.objects.get(id=id)\n    if not request.user.has_perm('events.change_event', event):\n          return HttpResponseForbidden()\n    ...\n~~~    \n\n## \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a3\u30eb\u30bf: `has_perm`\n\n~~~py\n@register.filter\ndef tup(src, arg):\n    if isinstance(src, tuple):\n        return src + (arg, )\n    return (src, arg, )\n\n\n@register.filter\ndef has_perm((obj, user), perm):\n    return user.has_perm(perm, obj)\n~~~\n\n- detail.html  \n\n~~~py\n{% if event|tup:user|has_perm:'events.change_event' %}\n  <a href=\"{% url 'events_event_edit' id=event.id %}\">{% trans 'Edit' %}</a>\n{% %}\n~~~\n\n## action \u540d\u304b\u3089\u30e2\u30c7\u30eb\u3078\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u30b3\u30fc\u30c9\u3092\u8fd4\u3059\n\n~~~py\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.contrib.auth import get_permission_codename\n\nclass BaseModel(object):\n\n    @classmethod\n    def perm_name(cls, action, model=None):\n        '''\u6307\u5b9a\u3055\u308c\u305f\u30a2\u30af\u30b7\u30e7\u30f3\u306b\u5bfe\u3059\u308b\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u540d'''\n        model = model or cls\n        return \"{}.{}\".format(\n            model._meta.app_label,\n            get_permission_codename(action, model._meta))\n\n~~~\n\n## default_permissions\n\n~~~py\nclass Event(models.Model):\n    ....\n    class Meta:\n        default_permissions = ('add', 'change', 'delete', 'browse')\n~~~\n\n## \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a3\u30eb\u30bf: `can`\n\n~~~py\n@register.filter                                                                 \ndef can((obj, user), action):                                                    \n    perm = models.BaseModel.perm_name(action, model=obj)                         \n    return user.has_perm(perm, obj)    \n~~~\n\n~~~py\n{% if event|tup:user|can:'change' %}\n  <a href=\"{% url 'events_event_edit' id=event.id %}\">{% trans 'Edit' %}</a>\n{% %}\n~~~\n", "tags": ["Django"]}