{"context": " More than 1 year has passed since last update.\u524d\u56de\u306f\u5b66\u7fd2\u306b\u3088\u308b\u8b58\u5225\u5668\u751f\u6210\u306b\u3064\u3044\u3066\u89e3\u8aac\u3057\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306f\u305d\u306e\u8b58\u5225\u5668\u3092\u7528\u3044\u3066\u753b\u50cf\u8b58\u5225\u3092\u884c\u3044\u307e\u3059\u3002\n\n\u8b58\u5225\u30c4\u30fc\u30eb\u306e\u30b3\u30fc\u30c9\nWindows\u7248Caffe\u3067\u306f\u8b58\u5225\u30c4\u30fc\u30eb\u304c\u7528\u610f\u3055\u308c\u3066\u306a\u3044\u305f\u3081\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8b58\u5225\u306e\u30b3\u30fc\u30c9\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\nclassify_c_image.cpp\n//Copyright 2014 BVLC and contributors.\n\n//This is a simple script that allows one to classify a color scale image by the trained network model.\n//Mean image file is optional.\n//Usage:\n//   classify_c_image layer_prototxt classification_caffe_model cpu_gpu_mode target_image\n\n#include <cuda_runtime.h>\n#include <iostream>\n#include <cstring>\n\n#include \"caffe/caffe.hpp\"\n\nusing namespace caffe;  // NOLINT(build/namespaces)\n\nint main(int argc, char** argv) {\n  ::google::InitGoogleLogging(argv[0]);\n  ::google::SetLogDestination(0, \"../tmp/\");\n\n  //////////////// color image ver//////////////////\n  if (argc < 5 ) {\n    LOG(ERROR) << \"Usage: classify_c_image layer_prototxt classification_caffe_model cpu_gpu_mode target_image [mean_file] \";\n    return 1;\n  }\n\n  // \u5404\u7a2e\u5f15\u6570\u3092\u6e21\u3059\n  const string layer_deploy = argv[1];\n  const string caffe_model = argv[2];\n  const string cpu_gpu_mode = argv[3];\n  const string target_image = argv[4];\n\n  // CPU,GPU\u30e2\u30fc\u30c9\u9078\u629e\n  if(cpu_gpu_mode==\"GPU\")\n      Caffe::set_mode(Caffe::GPU);\n  else \n      Caffe::set_mode(Caffe::CPU);\n\n  //// \u30bd\u30eb\u30d0\u30d5\u30a1\u30a4\u30eb\u3067Net\u3092\u521d\u671f\u5316\n  Net<float> net(layer_deploy);\n  //// \u30e2\u30c7\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307f\n  net.CopyTrainedLayersFrom(caffe_model);\n\n  float* image_mean;\n  if (argc == 6)\n  {\n      const string mean_file = argv[5];\n      //// mean\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\n      BlobProto mean_blobproto;\n      ReadProtoFromBinaryFileOrDie(mean_file, &mean_blobproto);\n\n      Blob<float> data_mean;\n      data_mean.FromProto(mean_blobproto);\n\n      const float* mean = data_mean.cpu_data();\n\n      image_mean = new float[data_mean.count()];\n      for (int i = 0; i < data_mean.count(); ++i) {\n          image_mean[i] = mean[i];\n      }\n  }\n\n  //// \u30e2\u30c7\u30eb\u5bfe\u5fdc\u306e\u753b\u50cf\u30b5\u30a4\u30ba\u53d6\u5f97(input\u306f\u4e00\u3064\u3068\u3059\u308b)\n  vector<Blob<float>*> net_input_blobs = net.input_blobs();\n  int model_width = net_input_blobs[0]->width();\n  int model_height = net_input_blobs[0]->height();\n  int model_channels = net_input_blobs[0]->channels();\n  int model_num = net_input_blobs[0]->num();\n\n  //// \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u2192Datum\u2192Blob\n  Datum* input_image_datum = new Datum();\n  // BGR\n  ReadImageToDatum(target_image, 0, model_height, model_width, input_image_datum);\n\n\n  // \u6700\u65b0Caffe\u306e DataTransformer<Dtype>::Transform\u3092\u53c2\u8003\n  const string& data = input_image_datum->data();\n  const int channels = input_image_datum->channels();\n  const int height = input_image_datum->height();\n  const int width = input_image_datum->width();\n  const int size = input_image_datum->channels() * input_image_datum->height() * input_image_datum->width();\n\n  Blob<float> input_blob(1, channels, height, width);\n  float* input_blob_data = input_blob.mutable_cpu_data();\n\n  for (int j = 0; j < size; ++j) {\n      float datum_element = static_cast<float>(static_cast<uint8_t>(data[j]));\n      // mean file\u3042\u308a\n      if (argc == 6)\n      {\n          input_blob_data[j] = (datum_element - image_mean[j]);\n      }\n      // mean file\u306a\u3057\n      else\n      {\n          input_blob_data[j] = datum_element;\n      }\n  }\n\n  // Forward\u306e\u5f62\u5f0f\u4e0avector\u306b\u683c\u7d0d\n  vector<Blob<float>*> bottom;\n  float* loss = new float();\n  bottom.push_back(&input_blob);\n\n  // \u8b58\u5225(\u9806\u4f1d\u64ad)\n  net.Forward(bottom, loss);\n\n  // \u8b58\u5225\u7d50\u679c\u3002\u51fa\u529bBlob\u306f\u4e00\u3064\u3068\u3059\u308b\u3002\n  Blob<float> prediction_result;\n  vector<Blob<float>*> output_blobs_vec = net.output_blobs();\n\n  std::cout << \"prediction result:\" << std::endl;\n  for(int i = 0; i < output_blobs_vec[0]->channels(); i++)\n  {\n      // Blob->data_at \u4e8c\u756a\u76ee\u306e\u5f15\u6570\u304c\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3002\u4ed6\u306f\u5168\u30660\u3067\u56fa\u5b9a\u3002\n      std::cout << i <<\"\u30ab\u30c6\u30b4\u30ea = \" << output_blobs_vec[0]->data_at(0, i, 0, 0) << std::endl;\n  }\n\n  delete loss;\n  delete input_image_datum;\n\n  return 0;\n}\n\n\n\n\u8b58\u5225\u30c4\u30fc\u30eb\u306e\u30d3\u30eb\u30c9\n\n\u4e0a\u8a18\u306eclassify_c_image.cpp\u3092.\\tools\\\u306b\u914d\u7f6e\u3057\u307e\u3059\u3002\n\n.\\examples\\MainCaller.cpp\u306e\u4e2d\u8eab\u3092\n\n\nMainCaller.cpp\n#include \"../../tools/classify_c_image.cpp\"\n\n\n\u3068\u3057\u307e\u3059\u3002\n\n \u30d3\u30eb\u30c9\u3057\u3001./bin\u306b\u5410\u304b\u308c\u305fMainCaller.exe\u3092classify_c_image.exe\u306b\u30ea\u30cd\u30fc\u30e0\u3057\u307e\u3059\u3002\u672c\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u8b58\u5225\u30c4\u30fc\u30eb\u3068\u306a\u308a\u307e\u3059\u3002\n\n\n\u8b58\u5225\u30c4\u30fc\u30eb\u306e\u4f7f\u3044\u65b9\nclassify_c_image.exe [net file] [model file] [mode] [image file] [mean file]\n-[net file]\uff1a \u8b58\u5225\u7528\u306e\u30ec\u30a4\u30e4\u5b9a\u7fa9\u30d5\u30a1\u30a4\u30eb(.prototxt)\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n-[model file]\uff1a \u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n-[mode]\uff1a CPU\u304bGPU\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n-[image file]\uff1a \u8b58\u5225\u5bfe\u8c61\u753b\u50cf(.jpg\u7b49)\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n-[mean file]\uff1a \u5b66\u7fd2\u306b\u5e73\u5747\u753b\u50cf\u3092\u4f7f\u7528\u3057\u305f\u5834\u5408\u306f\u6307\u5b9a\u3057\u307e\u3059\u3002(\u7701\u7565\u53ef)\n\u524d\u56de\u5b66\u7fd2\u3057\u305fcifar10\u306e\u4f8b\u306a\u3089\nclassify_c_image.exe cifar10_full.prototxt cifar10_full_iter_60000 GPU test.jpg mean.binaryproto\n\u306e\u3088\u3046\u306b\u5b9f\u884c\u3057\u307e\u3059\u3002\n\u30ec\u30a4\u30e4\u5b9a\u7fa9\u30d5\u30a1\u30a4\u30eb\u3068\u306a\u308bcifar10_full.prototxt\u306f.\\examples\\cifar10\\\u306b\u7f6e\u3044\u3066\u3042\u308b\u3001\u8b58\u5225\u7528\u306e\u30ec\u30a4\u30e4\u5b9a\u7fa9\u30d5\u30a1\u30a4\u30eb\u3068\u306a\u308a\u307e\u3059\u3002\u5b66\u7fd2\u3001\u30c6\u30b9\u30c8\u306b\u4f7f\u7528\u3057\u305f\u3082\u306e\u3068\u6bd4\u3079\u3066\u3001\u30c7\u30fc\u30bf\u30ec\u30a4\u30e4\u3084\u521d\u671f\u5316\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u306a\u304f\u306a\u3063\u3066\u308b\u3060\u3051\u306e\u3082\u306e\u3067\u3059\u3002\n\n\u8b58\u5225\u30b3\u30fc\u30c9\u306e\u6982\u8981\n\u4ee5\u4e0b\u3067\u306f\u30b3\u30fc\u30c9\u306e\u5177\u4f53\u7684\u306a\u6982\u8981\u3092\u89e3\u8aac\u3057\u307e\u3059\u3002\u8b58\u5225\u30c4\u30fc\u30eb\u3092\u5404\u81ea\u304c\u4f7f\u3044\u3084\u3059\u304f\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u308b\u3088\u3046\u53c2\u8003\u306b\u306a\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n\n1. \u521d\u671f\u30d1\u30e9\u30e1\u30fc\u30bf\u8a2d\u5b9a\n\n\u30ec\u30a4\u30e4\u5b9a\u7fa9\u30d5\u30a1\u30a4\u30eb\u3067Net\u30af\u30e9\u30b9\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\n\u30ec\u30a4\u30e4\u5b9a\u7fa9\u30d5\u30a1\u30a4\u30eb\u306b\u8a18\u8f09\u3055\u308c\u305f\u30cd\u30c3\u30c8\u69cb\u6210\u304c\u8aad\u307f\u8fbc\u307e\u308c\u3001\u8b58\u5225\u3092\u884c\u3046\u30e1\u30a4\u30f3\u306e\u30af\u30e9\u30b9\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9Net\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\n  //// \u30bd\u30eb\u30d0\u30d5\u30a1\u30a4\u30eb\u3067Net\u3092\u521d\u671f\u5316\n  Net<float> net(layer_deploy);\n\n\n\u30e2\u30c7\u30eb\u30d5\u30a1\u30a4\u30eb\u3092Net::CopyTrainedLayersFrom\u3067\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\u3053\u308c\u3067Net\u30af\u30e9\u30b9\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u91cd\u307f\u304c\u30e2\u30c7\u30eb\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u66f8\u304d\u8fbc\u307e\u308c\u307e\u3059\u3002\n\n  //// \u30e2\u30c7\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307f\n  net.CopyTrainedLayersFrom(caffe_model);\n\n\n2. \u5e73\u5747\u753b\u50cf\u8aad\u307f\u8fbc\u307f\n\nbinaryproto\u30d5\u30a1\u30a4\u30eb\u304b\u3089BlobProto\u69cb\u9020\u4f53\u306b\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002Caffe\u306e\u95a2\u6570ReadProtoFromBinaryFileOrDie\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n  BlobProto mean_blobproto;\n  ReadProtoFromBinaryFileOrDie(mean_file, &mean_blobproto);\n\n\nBlob\u69cb\u9020\u4f53\u306e\u95a2\u6570FromProto\u3067BlobProto\u69cb\u9020\u4f53\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\n  Blob<float> data_mean;\n  data_mean.FromProto(mean_blobproto);\n\n\nBlog\u69cb\u9020\u4f53\u304b\u3089\u5e73\u5747\u753b\u50cf\u306e\u5b9f\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\n  const float* mean = data_mean.cpu_data();\n\n  image_mean = new float[data_mean.count()];\n  for (int i = 0; i < data_mean.count(); ++i) {\n       image_mean[i] = mean[i];\n  }\n\n\n3. \u8b58\u5225\u5bfe\u8c61\u753b\u50cf\u8aad\u307f\u8fbc\u307f\n\nDatum\u69cb\u9020\u4f53\u306b\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\u5148\u305aNet\u30af\u30e9\u30b9\u306einput_blobs\u95a2\u6570\u3067\u898f\u5b9a\u306e\u5165\u529b\u753b\u50cf\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\u3057\u3001Caffe\u95a2\u6570ReadImageToDatum\u3067\u8aad\u307f\u8fbc\u3093\u3060\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u898f\u5b9a\u30b5\u30a4\u30ba\u306b\u30ea\u30b5\u30a4\u30ba\u3057\u3066\u3001Datum\u69cb\u9020\u4f53\u306b\u683c\u7d0d\u3057\u307e\u3059\u3002\n\n  //// \u30e2\u30c7\u30eb\u5bfe\u5fdc\u306e\u753b\u50cf\u30b5\u30a4\u30ba\u53d6\u5f97(input\u306f\u4e00\u3064\u3068\u3059\u308b)\n  vector<Blob<float>*> net_input_blobs = net.input_blobs();\n  int model_width = net_input_blobs[0]->width();\n  int model_height = net_input_blobs[0]->height();\n\n  Datum* input_image_datum = new Datum();\n\n  ReadImageToDatum(target_image, 0, model_height, model_width, input_image_datum);\n\n\nDatum\u69cb\u9020\u4f53\u304b\u3089\u753b\u50cf\u30c7\u30fc\u30bf\u306b\u76f8\u5f53\u3059\u308b\u6587\u5b57\u5217\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\n  const string& data = input_image_datum->data();\n\n\n\u5165\u529b\u3068\u306a\u308bBlob\u306e\u5b9f\u30c7\u30fc\u30bf\u30e1\u30f3\u30d0\u306b\u3001\u5165\u529b\u753b\u50cf\u3068\u5e73\u5747\u753b\u50cf\u306e\u5dee\u5206\u5024\u3092\u683c\u7d0d\u3057\u307e\u3059\u3002\n\n  Blob<float> input_blob(1, channels, height, width);\n  float* input_blob_data = input_blob.mutable_cpu_data();\n\n  for (int j = 0; j < size; ++j) {\n      float datum_element = static_cast<float>(static_cast<uint8_t>(data[j]));\n      // mean file\u3042\u308a\n      if (argc == 6)\n      {\n          input_blob_data[j] = (datum_element - image_mean[j]);\n      }\n      // mean file\u306a\u3057\n      else\n      {\n          input_blob_data[j] = datum_element;\n      }\n  }\n\n\n4. \u8b58\u5225\u3001\u7d50\u679c\u8868\u793a\n\n\u5165\u529b\u753b\u50cf\u3092\u9806\u4f1d\u64ad\u3057\u307e\u3059\u3002Caffe\u3067\u306f\u8907\u6570\u306e\u5165\u529bBlob\u3082\u60f3\u5b9a\u3057\u3066\u3044\u308b\u305f\u3081\u3001Blob\u306evector\u914d\u5217\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u5165\u529b\u306f\u4e00\u3064\u3067\u3059\u304cvector\u914d\u5217\u306b\u5165\u529bBlob\u3092\u683c\u7d0d\u3057\u307e\u3059\u3002loss\u5909\u6570\u306f\u5b66\u7fd2\u6642\u306b\u4f7f\u7528\u3059\u308b\u3082\u306e\u306a\u306e\u3067\u3053\u3053\u3067\u306f\u95a2\u6570\u306e\u5f62\u5f0f\u4e0a\u5165\u308c\u3066\u304a\u304f\u3060\u3051\u3067\u3059\u3002\u3042\u3068\u306fNet\u30af\u30e9\u30b9\u306eFoward\u95a2\u6570\u3067\u9806\u4f1d\u64ad\u304c\u884c\u3048\u307e\u3059\u3002\n\n  // Forward\u306e\u5f62\u5f0f\u4e0avector\u306b\u683c\u7d0d\n  vector<Blob<float>*> bottom;\n  float* loss = new float();\n  bottom.push_back(&input_blob);\n\n  // \u8b58\u5225(\u9806\u4f1d\u64ad)\n  net.Forward(bottom, loss);\n\n\n\u51fa\u529bBlob\u914d\u5217\u3092\u53d6\u5f97\u3057\u3001\u5404\u30ab\u30c6\u30b4\u30ea\u306e\u8b58\u5225\u30b9\u30b3\u30a2\u3092\u8aad\u307f\u51fa\u3057\u307e\u3059\u3002\u51fa\u529b\u3082\u5165\u529b\u540c\u69d8\u306bBlob\u306evector\u914d\u5217\u3068\u306a\u3063\u3066\u304a\u308a\u3001\u51fa\u529bBlob\u3082\u4e00\u3064\u3060\u3051\u306a\u306e\u30670\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3057\u3066\u51fa\u529b\u3092\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002\u8b58\u5225\u30b9\u30b3\u30a2\u306fBlob\u306echannel\u6b21\u5143\uff08\u4e8c\u756a\u76ee\u306e\u6b21\u5143\uff09\u304b\u3089\u8aad\u307f\u51fa\u3057\u307e\u3059\u3002\u3064\u307e\u308a\u3001channel\u6570\u304c\u30ab\u30c6\u30b4\u30ea\u6570\u306b\u5272\u308a\u5f53\u305f\u308a\u307e\u3059\u3002\n\n // \u8b58\u5225\u7d50\u679c\u3002\u51fa\u529bBlob\u306f\u4e00\u3064\u3068\u3059\u308b\u3002\n  Blob<float> prediction_result;\n  vector<Blob<float>*> output_blobs_vec = net.output_blobs();\n\n  std::cout << \"prediction result:\" << std::endl;\n  for(int i = 0; i < output_blobs_vec[0]->channels(); i++)\n  {\n      // Blob->data_at \u4e8c\u756a\u76ee\u306e\u5f15\u6570\u304c\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3002\u4ed6\u306f\u5168\u30660\u3067\u56fa\u5b9a\u3002\n      std::cout << i <<\"\u30ab\u30c6\u30b4\u30ea = \" << output_blobs_vec[0]->data_at(0, i, 0, 0) << std::endl;\n  }\n\n\n\u4ee5\u4e0a\u3067\u3001\u8b58\u5225\u306e\u89e3\u8aac\u3092\u7d42\u308f\u308a\u307e\u3059\u3002\u3053\u308c\u3067\u3001Caffe\u306b\u95a2\u3059\u308b\u4e3b\u8981\u306a\u89e3\u8aac\u306f\u5b8c\u4e86\u3068\u306a\u308a\u307e\u3059\u3002\n\u6b21\u56de\u4ee5\u964d\u306f\u88dc\u8db3\u7684\u306a\u5185\u5bb9\u3092\u66f8\u3044\u3066\u3044\u3051\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n\u524d\u56de\u306f\u5b66\u7fd2\u306b\u3088\u308b\u8b58\u5225\u5668\u751f\u6210\u306b\u3064\u3044\u3066\u89e3\u8aac\u3057\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306f\u305d\u306e\u8b58\u5225\u5668\u3092\u7528\u3044\u3066\u753b\u50cf\u8b58\u5225\u3092\u884c\u3044\u307e\u3059\u3002\n\n#\u8b58\u5225\u30c4\u30fc\u30eb\u306e\u30b3\u30fc\u30c9\nWindows\u7248Caffe\u3067\u306f\u8b58\u5225\u30c4\u30fc\u30eb\u304c\u7528\u610f\u3055\u308c\u3066\u306a\u3044\u305f\u3081\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8b58\u5225\u306e\u30b3\u30fc\u30c9\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\n```lang:classify_c_image.cpp\n//Copyright 2014 BVLC and contributors.\n\n//This is a simple script that allows one to classify a color scale image by the trained network model.\n//Mean image file is optional.\n//Usage:\n//   classify_c_image layer_prototxt classification_caffe_model cpu_gpu_mode target_image\n\n#include <cuda_runtime.h>\n#include <iostream>\n#include <cstring>\n\n#include \"caffe/caffe.hpp\"\n\nusing namespace caffe;  // NOLINT(build/namespaces)\n\nint main(int argc, char** argv) {\n  ::google::InitGoogleLogging(argv[0]);\n  ::google::SetLogDestination(0, \"../tmp/\");\n\n  //////////////// color image ver//////////////////\n  if (argc < 5 ) {\n    LOG(ERROR) << \"Usage: classify_c_image layer_prototxt classification_caffe_model cpu_gpu_mode target_image [mean_file] \";\n    return 1;\n  }\n\n  // \u5404\u7a2e\u5f15\u6570\u3092\u6e21\u3059\n  const string layer_deploy = argv[1];\n  const string caffe_model = argv[2];\n  const string cpu_gpu_mode = argv[3];\n  const string target_image = argv[4];\n\n  // CPU,GPU\u30e2\u30fc\u30c9\u9078\u629e\n  if(cpu_gpu_mode==\"GPU\")\n\t  Caffe::set_mode(Caffe::GPU);\n  else \n\t  Caffe::set_mode(Caffe::CPU);\n\n  //// \u30bd\u30eb\u30d0\u30d5\u30a1\u30a4\u30eb\u3067Net\u3092\u521d\u671f\u5316\n  Net<float> net(layer_deploy);\n  //// \u30e2\u30c7\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307f\n  net.CopyTrainedLayersFrom(caffe_model);\n\n  float* image_mean;\n  if (argc == 6)\n  {\n\t  const string mean_file = argv[5];\n\t  //// mean\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\n\t  BlobProto mean_blobproto;\n\t  ReadProtoFromBinaryFileOrDie(mean_file, &mean_blobproto);\n\n\t  Blob<float> data_mean;\n\t  data_mean.FromProto(mean_blobproto);\n\n\t  const float* mean = data_mean.cpu_data();\n\n\t  image_mean = new float[data_mean.count()];\n\t  for (int i = 0; i < data_mean.count(); ++i) {\n\t\t  image_mean[i] = mean[i];\n\t  }\n  }\n\n  //// \u30e2\u30c7\u30eb\u5bfe\u5fdc\u306e\u753b\u50cf\u30b5\u30a4\u30ba\u53d6\u5f97(input\u306f\u4e00\u3064\u3068\u3059\u308b)\n  vector<Blob<float>*> net_input_blobs = net.input_blobs();\n  int model_width = net_input_blobs[0]->width();\n  int model_height = net_input_blobs[0]->height();\n  int model_channels = net_input_blobs[0]->channels();\n  int model_num = net_input_blobs[0]->num();\n\n  //// \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u2192Datum\u2192Blob\n  Datum* input_image_datum = new Datum();\n  // BGR\n  ReadImageToDatum(target_image, 0, model_height, model_width, input_image_datum);\n\n\n  // \u6700\u65b0Caffe\u306e DataTransformer<Dtype>::Transform\u3092\u53c2\u8003\n  const string& data = input_image_datum->data();\n  const int channels = input_image_datum->channels();\n  const int height = input_image_datum->height();\n  const int width = input_image_datum->width();\n  const int size = input_image_datum->channels() * input_image_datum->height() * input_image_datum->width();\n\n  Blob<float> input_blob(1, channels, height, width);\n  float* input_blob_data = input_blob.mutable_cpu_data();\n\n  for (int j = 0; j < size; ++j) {\n\t  float datum_element = static_cast<float>(static_cast<uint8_t>(data[j]));\n\t  // mean file\u3042\u308a\n\t  if (argc == 6)\n\t  {\n\t\t  input_blob_data[j] = (datum_element - image_mean[j]);\n\t  }\n\t  // mean file\u306a\u3057\n\t  else\n\t  {\n\t\t  input_blob_data[j] = datum_element;\n\t  }\n  }\n\n  // Forward\u306e\u5f62\u5f0f\u4e0avector\u306b\u683c\u7d0d\n  vector<Blob<float>*> bottom;\n  float* loss = new float();\n  bottom.push_back(&input_blob);\n  \n  // \u8b58\u5225(\u9806\u4f1d\u64ad)\n  net.Forward(bottom, loss);\n\n  // \u8b58\u5225\u7d50\u679c\u3002\u51fa\u529bBlob\u306f\u4e00\u3064\u3068\u3059\u308b\u3002\n  Blob<float> prediction_result;\n  vector<Blob<float>*> output_blobs_vec = net.output_blobs();\n\n  std::cout << \"prediction result:\" << std::endl;\n  for(int i = 0; i < output_blobs_vec[0]->channels(); i++)\n  {\n\t  // Blob->data_at \u4e8c\u756a\u76ee\u306e\u5f15\u6570\u304c\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3002\u4ed6\u306f\u5168\u30660\u3067\u56fa\u5b9a\u3002\n\t  std::cout << i <<\"\u30ab\u30c6\u30b4\u30ea = \" << output_blobs_vec[0]->data_at(0, i, 0, 0) << std::endl;\n  }\n\n  delete loss;\n  delete input_image_datum;\n\n  return 0;\n}\n```\n\n#\u8b58\u5225\u30c4\u30fc\u30eb\u306e\u30d3\u30eb\u30c9\n- \u4e0a\u8a18\u306e`classify_c_image.cpp`\u3092`.\\tools\\`\u306b\u914d\u7f6e\u3057\u307e\u3059\u3002\n- `.\\examples\\MainCaller.cpp`\u306e\u4e2d\u8eab\u3092\n\n```lang:MainCaller.cpp\n#include \"../../tools/classify_c_image.cpp\"\n```\n\n\u3068\u3057\u307e\u3059\u3002\n\n-  \u30d3\u30eb\u30c9\u3057\u3001`./bin`\u306b\u5410\u304b\u308c\u305fMainCaller.exe\u3092classify_c_image.exe\u306b\u30ea\u30cd\u30fc\u30e0\u3057\u307e\u3059\u3002\u672c\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u8b58\u5225\u30c4\u30fc\u30eb\u3068\u306a\u308a\u307e\u3059\u3002\n\n#\u8b58\u5225\u30c4\u30fc\u30eb\u306e\u4f7f\u3044\u65b9\n`classify_c_image.exe [net file] [model file] [mode] [image file] [mean file]`\n-[net file]\uff1a \u8b58\u5225\u7528\u306e\u30ec\u30a4\u30e4\u5b9a\u7fa9\u30d5\u30a1\u30a4\u30eb(.prototxt)\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n-[model file]\uff1a \u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n-[mode]\uff1a CPU\u304bGPU\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n-[image file]\uff1a \u8b58\u5225\u5bfe\u8c61\u753b\u50cf(.jpg\u7b49)\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n-[mean file]\uff1a \u5b66\u7fd2\u306b\u5e73\u5747\u753b\u50cf\u3092\u4f7f\u7528\u3057\u305f\u5834\u5408\u306f\u6307\u5b9a\u3057\u307e\u3059\u3002(\u7701\u7565\u53ef)\n\n\u524d\u56de\u5b66\u7fd2\u3057\u305fcifar10\u306e\u4f8b\u306a\u3089\n`classify_c_image.exe cifar10_full.prototxt cifar10_full_iter_60000 GPU test.jpg mean.binaryproto`\n\u306e\u3088\u3046\u306b\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n\u30ec\u30a4\u30e4\u5b9a\u7fa9\u30d5\u30a1\u30a4\u30eb\u3068\u306a\u308bcifar10_full.prototxt\u306f`.\\examples\\cifar10\\`\u306b\u7f6e\u3044\u3066\u3042\u308b\u3001\u8b58\u5225\u7528\u306e\u30ec\u30a4\u30e4\u5b9a\u7fa9\u30d5\u30a1\u30a4\u30eb\u3068\u306a\u308a\u307e\u3059\u3002\u5b66\u7fd2\u3001\u30c6\u30b9\u30c8\u306b\u4f7f\u7528\u3057\u305f\u3082\u306e\u3068\u6bd4\u3079\u3066\u3001\u30c7\u30fc\u30bf\u30ec\u30a4\u30e4\u3084\u521d\u671f\u5316\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u306a\u304f\u306a\u3063\u3066\u308b\u3060\u3051\u306e\u3082\u306e\u3067\u3059\u3002\n\n#\u8b58\u5225\u30b3\u30fc\u30c9\u306e\u6982\u8981\n\u4ee5\u4e0b\u3067\u306f\u30b3\u30fc\u30c9\u306e\u5177\u4f53\u7684\u306a\u6982\u8981\u3092\u89e3\u8aac\u3057\u307e\u3059\u3002\u8b58\u5225\u30c4\u30fc\u30eb\u3092\u5404\u81ea\u304c\u4f7f\u3044\u3084\u3059\u304f\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u308b\u3088\u3046\u53c2\u8003\u306b\u306a\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n##1. \u521d\u671f\u30d1\u30e9\u30e1\u30fc\u30bf\u8a2d\u5b9a\n\n- \u30ec\u30a4\u30e4\u5b9a\u7fa9\u30d5\u30a1\u30a4\u30eb\u3067Net\u30af\u30e9\u30b9\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\n\u30ec\u30a4\u30e4\u5b9a\u7fa9\u30d5\u30a1\u30a4\u30eb\u306b\u8a18\u8f09\u3055\u308c\u305f\u30cd\u30c3\u30c8\u69cb\u6210\u304c\u8aad\u307f\u8fbc\u307e\u308c\u3001\u8b58\u5225\u3092\u884c\u3046\u30e1\u30a4\u30f3\u306e\u30af\u30e9\u30b9\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9Net\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\n```\u3000\n  //// \u30bd\u30eb\u30d0\u30d5\u30a1\u30a4\u30eb\u3067Net\u3092\u521d\u671f\u5316\n  Net<float> net(layer_deploy);\n```\n- \u30e2\u30c7\u30eb\u30d5\u30a1\u30a4\u30eb\u3092Net::CopyTrainedLayersFrom\u3067\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\u3053\u308c\u3067Net\u30af\u30e9\u30b9\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u91cd\u307f\u304c\u30e2\u30c7\u30eb\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u66f8\u304d\u8fbc\u307e\u308c\u307e\u3059\u3002\n\n```  \n  //// \u30e2\u30c7\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307f\n  net.CopyTrainedLayersFrom(caffe_model);\n```\n\n##2. \u5e73\u5747\u753b\u50cf\u8aad\u307f\u8fbc\u307f\n- binaryproto\u30d5\u30a1\u30a4\u30eb\u304b\u3089BlobProto\u69cb\u9020\u4f53\u306b\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002Caffe\u306e\u95a2\u6570ReadProtoFromBinaryFileOrDie\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n```\n  BlobProto mean_blobproto;\n  ReadProtoFromBinaryFileOrDie(mean_file, &mean_blobproto);\n```\n\n- Blob\u69cb\u9020\u4f53\u306e\u95a2\u6570FromProto\u3067BlobProto\u69cb\u9020\u4f53\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\n```\n  Blob<float> data_mean;\n  data_mean.FromProto(mean_blobproto);\n```\n\n- Blog\u69cb\u9020\u4f53\u304b\u3089\u5e73\u5747\u753b\u50cf\u306e\u5b9f\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\n```\n  const float* mean = data_mean.cpu_data();\n\n  image_mean = new float[data_mean.count()];\n  for (int i = 0; i < data_mean.count(); ++i) {\n       image_mean[i] = mean[i];\n  }\n```\n##3. \u8b58\u5225\u5bfe\u8c61\u753b\u50cf\u8aad\u307f\u8fbc\u307f\n\n- Datum\u69cb\u9020\u4f53\u306b\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\u5148\u305aNet\u30af\u30e9\u30b9\u306einput_blobs\u95a2\u6570\u3067\u898f\u5b9a\u306e\u5165\u529b\u753b\u50cf\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\u3057\u3001Caffe\u95a2\u6570ReadImageToDatum\u3067\u8aad\u307f\u8fbc\u3093\u3060\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u898f\u5b9a\u30b5\u30a4\u30ba\u306b\u30ea\u30b5\u30a4\u30ba\u3057\u3066\u3001Datum\u69cb\u9020\u4f53\u306b\u683c\u7d0d\u3057\u307e\u3059\u3002\n\n\n```\n  //// \u30e2\u30c7\u30eb\u5bfe\u5fdc\u306e\u753b\u50cf\u30b5\u30a4\u30ba\u53d6\u5f97(input\u306f\u4e00\u3064\u3068\u3059\u308b)\n  vector<Blob<float>*> net_input_blobs = net.input_blobs();\n  int model_width = net_input_blobs[0]->width();\n  int model_height = net_input_blobs[0]->height();\n\n  Datum* input_image_datum = new Datum();\n\n  ReadImageToDatum(target_image, 0, model_height, model_width, input_image_datum);\n```\n\n- Datum\u69cb\u9020\u4f53\u304b\u3089\u753b\u50cf\u30c7\u30fc\u30bf\u306b\u76f8\u5f53\u3059\u308b\u6587\u5b57\u5217\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\n```\n  const string& data = input_image_datum->data();\n```\n\n- \u5165\u529b\u3068\u306a\u308bBlob\u306e\u5b9f\u30c7\u30fc\u30bf\u30e1\u30f3\u30d0\u306b\u3001\u5165\u529b\u753b\u50cf\u3068\u5e73\u5747\u753b\u50cf\u306e\u5dee\u5206\u5024\u3092\u683c\u7d0d\u3057\u307e\u3059\u3002\n\n```\n  Blob<float> input_blob(1, channels, height, width);\n  float* input_blob_data = input_blob.mutable_cpu_data();\n\n  for (int j = 0; j < size; ++j) {\n      float datum_element = static_cast<float>(static_cast<uint8_t>(data[j]));\n      // mean file\u3042\u308a\n      if (argc == 6)\n      {\n          input_blob_data[j] = (datum_element - image_mean[j]);\n      }\n      // mean file\u306a\u3057\n      else\n      {\n          input_blob_data[j] = datum_element;\n      }\n  }\n```\n\n##4. \u8b58\u5225\u3001\u7d50\u679c\u8868\u793a\n- \u5165\u529b\u753b\u50cf\u3092\u9806\u4f1d\u64ad\u3057\u307e\u3059\u3002Caffe\u3067\u306f\u8907\u6570\u306e\u5165\u529bBlob\u3082\u60f3\u5b9a\u3057\u3066\u3044\u308b\u305f\u3081\u3001Blob\u306evector\u914d\u5217\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u5165\u529b\u306f\u4e00\u3064\u3067\u3059\u304cvector\u914d\u5217\u306b\u5165\u529bBlob\u3092\u683c\u7d0d\u3057\u307e\u3059\u3002loss\u5909\u6570\u306f\u5b66\u7fd2\u6642\u306b\u4f7f\u7528\u3059\u308b\u3082\u306e\u306a\u306e\u3067\u3053\u3053\u3067\u306f\u95a2\u6570\u306e\u5f62\u5f0f\u4e0a\u5165\u308c\u3066\u304a\u304f\u3060\u3051\u3067\u3059\u3002\u3042\u3068\u306fNet\u30af\u30e9\u30b9\u306eFoward\u95a2\u6570\u3067\u9806\u4f1d\u64ad\u304c\u884c\u3048\u307e\u3059\u3002\n\n```\n  // Forward\u306e\u5f62\u5f0f\u4e0avector\u306b\u683c\u7d0d\n  vector<Blob<float>*> bottom;\n  float* loss = new float();\n  bottom.push_back(&input_blob);\n\n  // \u8b58\u5225(\u9806\u4f1d\u64ad)\n  net.Forward(bottom, loss);\n``` \n\n- \u51fa\u529bBlob\u914d\u5217\u3092\u53d6\u5f97\u3057\u3001\u5404\u30ab\u30c6\u30b4\u30ea\u306e\u8b58\u5225\u30b9\u30b3\u30a2\u3092\u8aad\u307f\u51fa\u3057\u307e\u3059\u3002\u51fa\u529b\u3082\u5165\u529b\u540c\u69d8\u306bBlob\u306evector\u914d\u5217\u3068\u306a\u3063\u3066\u304a\u308a\u3001\u51fa\u529bBlob\u3082\u4e00\u3064\u3060\u3051\u306a\u306e\u30670\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3057\u3066\u51fa\u529b\u3092\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002\u8b58\u5225\u30b9\u30b3\u30a2\u306fBlob\u306echannel\u6b21\u5143\uff08\u4e8c\u756a\u76ee\u306e\u6b21\u5143\uff09\u304b\u3089\u8aad\u307f\u51fa\u3057\u307e\u3059\u3002\u3064\u307e\u308a\u3001channel\u6570\u304c\u30ab\u30c6\u30b4\u30ea\u6570\u306b\u5272\u308a\u5f53\u305f\u308a\u307e\u3059\u3002\n\n```\n // \u8b58\u5225\u7d50\u679c\u3002\u51fa\u529bBlob\u306f\u4e00\u3064\u3068\u3059\u308b\u3002\n  Blob<float> prediction_result;\n  vector<Blob<float>*> output_blobs_vec = net.output_blobs();\n\n  std::cout << \"prediction result:\" << std::endl;\n  for(int i = 0; i < output_blobs_vec[0]->channels(); i++)\n  {\n      // Blob->data_at \u4e8c\u756a\u76ee\u306e\u5f15\u6570\u304c\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3002\u4ed6\u306f\u5168\u30660\u3067\u56fa\u5b9a\u3002\n      std::cout << i <<\"\u30ab\u30c6\u30b4\u30ea = \" << output_blobs_vec[0]->data_at(0, i, 0, 0) << std::endl;\n  }\n```\n\n***\n\u4ee5\u4e0a\u3067\u3001\u8b58\u5225\u306e\u89e3\u8aac\u3092\u7d42\u308f\u308a\u307e\u3059\u3002\u3053\u308c\u3067\u3001Caffe\u306b\u95a2\u3059\u308b\u4e3b\u8981\u306a\u89e3\u8aac\u306f\u5b8c\u4e86\u3068\u306a\u308a\u307e\u3059\u3002\n\n\u6b21\u56de\u4ee5\u964d\u306f\u88dc\u8db3\u7684\u306a\u5185\u5bb9\u3092\u66f8\u3044\u3066\u3044\u3051\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["DeepLearning", "Caffe"]}