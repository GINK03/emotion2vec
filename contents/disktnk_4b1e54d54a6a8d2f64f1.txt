{"tags": ["Java1.8", "java8"], "context": " More than 1 year has passed since last update.\u7d042\u5e74\u524d\u306b Java - Guava\u306eSupplier\u3067\u7c21\u5358\u30ad\u30e3\u30c3\u30b7\u30e5 \u3068\u3044\u3046\u30cd\u30bf\u3092\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u305d\u308c\u3092 Java8 \u3063\u307d\u304f\u66f8\u304d\u76f4\u3057\u3066\u307f\u3088\u3046\u3001\u3068\u3044\u3046\u8a71\u3067\u3059\u3002\n\n(\u304a\u3055\u3089\u3044) \u91cd\u3044\u51e6\u7406\u3060\u304b\u3089\u30ad\u30e3\u30c3\u30b7\u30e5\u5316\u3057\u305f\u3044\n\u4f8b\u3048\u3070\u5927\u91cf\u306e int \u306b\u5bfe\u3057\u3066\u5e73\u5747\u3092\u6c42\u3081\u305f\u3044\u3051\u3069\u3001\u8a08\u7b97\u304c\u91cd\u3044\u306e\u30671\u56de\u8a08\u7b97\u3057\u305f\u3089\u4f7f\u3044\u307e\u308f\u3057\u305f\u3044\u3001\u3068\u3044\u3063\u305f\u72b6\u6cc1\u3067\u3059\u3002\n\nLargetObject.java\nimport java.util.List;\n\npublic class LargeObject {\n\n    private List<Integer> seq;\n\n    public List<Integer> getSeq() {\n        return seq;\n    }\n\n    public void setSeq(List<Integer> seq) {\n        this.seq = seq;\n    }\n\n}\n\n\n\nSupplier \u3092\u4f7f\u3063\u3066\u898b\u308b\nJava8 \u3067\u8ffd\u52a0\u3055\u308c\u305f java.util.function.Supplier<T> \u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\u4eca\u56de\u306f\u5e73\u5747\u3092\u6c42\u3081\u305f\u3044\u3060\u3051\u306a\u306e\u3067 Supplier<Double> \u3067\u306f\u306a\u304f DoubleSupplier \u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\n\nAverageHelper.java\nimport java.util.List;\nimport java.util.function.DoubleSupplier;\n\npublic class AverageHelper {\n\n    private final DoubleSupplier averageSupplier;\n\n    public AverageHelper(final LargeObject largeObject) {\n        averageSupplier = new DoubleSupplier() {\n            private final double average = average(largeObject.getSeq());\n\n            @Override\n            public double getAsDouble() {\n                return average;\n            }\n\n            private double average(List<Integer> seq) {\n                System.out.println(\"calculating...\");\n                return seq.stream().mapToInt(x -> x).average().getAsDouble();\n            }\n        };\n    }\n\n    public double calcAverage() {\n        System.out.println(\"average calculation\");\n        return averageSupplier.getAsDouble();\n    }\n}\n\n\n\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n\nAverageHelperTest.java\nimport static org.junit.Assert.assertEquals;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.Test;\n\npublic class AverageHelperTest {\n\n    @Test\n    public void testCalcAverage() {\n        List<Integer> seq = Arrays.asList(20, 12, 12);\n        LargeObject largeObject = new LargeObject();\n        largeObject.setSeq(seq);\n\n        AverageHelper target = new AverageHelper(largeObject);\n        Double actual = target.calcAverage();\n        Double expected = 44.0 / 3.0;\n\n        assertEquals(expected, actual);\n        target.calcAverage();\n    }\n}\n\n\n\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\"calculating...\" \u3068\u3044\u3046\u6587\u5b57\u5217\u304c1\u56de\u3057\u304b\u51fa\u529b\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\ncalculating...\naverage calculation\naverage calculation\n\n\n\u6b32\u3057\u3044\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u8a08\u7b97\u3055\u305b\u308b\n\u4e0a\u8a18\u30ed\u30b0\u3092\u898b\u308b\u3068\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u5316\u306f\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u5b9f\u969b\u306b\u5e73\u5747\u304c\u6b32\u3057\u3044 target.calcAverage() \u3088\u308a\u3082\u524d\u306b\u5e73\u5747\u304c\u8a08\u7b97\u3055\u308c\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\u306a\u306e\u3067\u3001\u5b9f\u969b\u306b target.calcAverage() \u6539\u3081 target.getAverage() \u304c\u547c\u3070\u308c\u305f\u3089\u521d\u3081\u3066\u5e73\u5747\u3092\u8a08\u7b97\u3059\u308b\u3088\u3046\u306b\u4fee\u6b63\u3057\u307e\u3059\u3002\n\u5358\u7d14\u306b\u3001averageSupplier \u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3092 AverageHelper \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304b\u3089\u3001\u30e1\u30bd\u30c3\u30c9\u306b\u79fb\u305b\u3070\u3044\u3044\u3060\u3051\u3067\u3059\u3002\n\nAverageHelper2.java\nimport java.util.List;\nimport java.util.function.DoubleSupplier;\n\npublic class AverageHelper2 {\n\n    private final LargeObject largeObject;\n    private DoubleSupplier averageSupplier = () -> calculateAndCache();\n\n    public AverageHelper2(final LargeObject largeObject) {\n        this.largeObject = largeObject;\n    }\n\n    public double getAverage() {\n        System.out.println(\"get average\");\n        return averageSupplier.getAsDouble();\n    }\n\n    private double calculateAndCache() {\n        if (!AverageFactory.class.isInstance(averageSupplier)) {\n            averageSupplier = new AverageFactory();\n        }\n        return averageSupplier.getAsDouble();\n    }\n\n    private class AverageFactory implements DoubleSupplier {\n        private final double average = average(largeObject.getSeq());\n\n        @Override\n        public double getAsDouble() {\n            return average;\n        }\n\n        private double average(List<Integer> seq) {\n            System.out.println(\"calculating...\");\n            return seq.stream().mapToInt(x -> x).average().getAsDouble();\n        }\n    }\n}\n\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3082\u3061\u3087\u3063\u3068\u4fee\u6b63\u3057\u3066\u3001\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n\n    @Test\n    public void testCalcAverage2() {\n        List<Integer> seq = Arrays.asList(20, 12, 12);\n        LargeObject largeObject = new LargeObject();\n        largeObject.setSeq(seq);\n\n        AverageHelper2 target = new AverageHelper2(largeObject);\n        Double actual = target.getAverage();\n        Double expected = 44.0 / 3.0;\n\n        assertEquals(expected, actual);\n        target.getAverage();\n    }\n\nget average\ncalculating...\nget average\n\n\u4e0a\u8a18\u30ed\u30b0\u304b\u3089\u3001\u5e73\u5747\u304c\u6b32\u3057\u3044\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u8a08\u7b97\u3055\u308c\u3001\u304b\u3064\u30ad\u30e3\u30c3\u30b7\u30e5\u5316\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002!AverageFactory.class.isInstance(averageSupplier) \u304c\u30c0\u30b5\u3044\u611f\u3058\u3082\u3057\u307e\u3059\u304c\u3001\u307e\u3041\u3044\u3044\u3063\u3066\u3053\u3068\u3067\u3002\n\n\u53c2\u8003\u6587\u732e\nVenkat Subramaniam\u300eJava\u306b\u3088\u308b\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u300f\u306e6\u7ae0\u300e\u300c\u9045\u5ef6\u3055\u305b\u308b\u300d\u3068\u3044\u3046\u3053\u3068\u300f\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\u7d042\u5e74\u524d\u306b [Java - Guava\u306eSupplier\u3067\u7c21\u5358\u30ad\u30e3\u30c3\u30b7\u30e5](http://qiita.com/disktnk/items/f76dea4fa976d0e05526) \u3068\u3044\u3046\u30cd\u30bf\u3092\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u305d\u308c\u3092 Java8 \u3063\u307d\u304f\u66f8\u304d\u76f4\u3057\u3066\u307f\u3088\u3046\u3001\u3068\u3044\u3046\u8a71\u3067\u3059\u3002\n\n### (\u304a\u3055\u3089\u3044) \u91cd\u3044\u51e6\u7406\u3060\u304b\u3089\u30ad\u30e3\u30c3\u30b7\u30e5\u5316\u3057\u305f\u3044\n\n\u4f8b\u3048\u3070\u5927\u91cf\u306e `int` \u306b\u5bfe\u3057\u3066\u5e73\u5747\u3092\u6c42\u3081\u305f\u3044\u3051\u3069\u3001\u8a08\u7b97\u304c\u91cd\u3044\u306e\u30671\u56de\u8a08\u7b97\u3057\u305f\u3089\u4f7f\u3044\u307e\u308f\u3057\u305f\u3044\u3001\u3068\u3044\u3063\u305f\u72b6\u6cc1\u3067\u3059\u3002\n\n```LargetObject.java\nimport java.util.List;\n\npublic class LargeObject {\n\n    private List<Integer> seq;\n\n    public List<Integer> getSeq() {\n        return seq;\n    }\n\n    public void setSeq(List<Integer> seq) {\n        this.seq = seq;\n    }\n\n}\n```\n\n### Supplier \u3092\u4f7f\u3063\u3066\u898b\u308b\n\nJava8 \u3067\u8ffd\u52a0\u3055\u308c\u305f `java.util.function.Supplier<T>` \u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\u4eca\u56de\u306f\u5e73\u5747\u3092\u6c42\u3081\u305f\u3044\u3060\u3051\u306a\u306e\u3067 `Supplier<Double>` \u3067\u306f\u306a\u304f `DoubleSupplier` \u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\n\n```AverageHelper.java\nimport java.util.List;\nimport java.util.function.DoubleSupplier;\n\npublic class AverageHelper {\n\n    private final DoubleSupplier averageSupplier;\n\n    public AverageHelper(final LargeObject largeObject) {\n        averageSupplier = new DoubleSupplier() {\n            private final double average = average(largeObject.getSeq());\n\n            @Override\n            public double getAsDouble() {\n                return average;\n            }\n\n            private double average(List<Integer> seq) {\n                System.out.println(\"calculating...\");\n                return seq.stream().mapToInt(x -> x).average().getAsDouble();\n            }\n        };\n    }\n\n    public double calcAverage() {\n        System.out.println(\"average calculation\");\n        return averageSupplier.getAsDouble();\n    }\n}\n``` \n\n\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n\n```AverageHelperTest.java\nimport static org.junit.Assert.assertEquals;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.Test;\n\npublic class AverageHelperTest {\n\n    @Test\n    public void testCalcAverage() {\n        List<Integer> seq = Arrays.asList(20, 12, 12);\n        LargeObject largeObject = new LargeObject();\n        largeObject.setSeq(seq);\n\n        AverageHelper target = new AverageHelper(largeObject);\n        Double actual = target.calcAverage();\n        Double expected = 44.0 / 3.0;\n\n        assertEquals(expected, actual);\n        target.calcAverage();\n    }\n}\n```\n\n\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\"calculating...\" \u3068\u3044\u3046\u6587\u5b57\u5217\u304c1\u56de\u3057\u304b\u51fa\u529b\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\n\n```\ncalculating...\naverage calculation\naverage calculation\n```\n\n### \u6b32\u3057\u3044\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u8a08\u7b97\u3055\u305b\u308b\n\n\u4e0a\u8a18\u30ed\u30b0\u3092\u898b\u308b\u3068\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u5316\u306f\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u5b9f\u969b\u306b\u5e73\u5747\u304c\u6b32\u3057\u3044 `target.calcAverage()` \u3088\u308a\u3082\u524d\u306b\u5e73\u5747\u304c\u8a08\u7b97\u3055\u308c\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\u306a\u306e\u3067\u3001\u5b9f\u969b\u306b `target.calcAverage()` \u6539\u3081 `target.getAverage()` \u304c\u547c\u3070\u308c\u305f\u3089\u521d\u3081\u3066\u5e73\u5747\u3092\u8a08\u7b97\u3059\u308b\u3088\u3046\u306b\u4fee\u6b63\u3057\u307e\u3059\u3002\n\n\u5358\u7d14\u306b\u3001`averageSupplier` \u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3092 `AverageHelper` \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304b\u3089\u3001\u30e1\u30bd\u30c3\u30c9\u306b\u79fb\u305b\u3070\u3044\u3044\u3060\u3051\u3067\u3059\u3002\n\n```AverageHelper2.java\nimport java.util.List;\nimport java.util.function.DoubleSupplier;\n\npublic class AverageHelper2 {\n\n    private final LargeObject largeObject;\n    private DoubleSupplier averageSupplier = () -> calculateAndCache();\n\n    public AverageHelper2(final LargeObject largeObject) {\n        this.largeObject = largeObject;\n    }\n\n    public double getAverage() {\n        System.out.println(\"get average\");\n        return averageSupplier.getAsDouble();\n    }\n\n    private double calculateAndCache() {\n        if (!AverageFactory.class.isInstance(averageSupplier)) {\n            averageSupplier = new AverageFactory();\n        }\n        return averageSupplier.getAsDouble();\n    }\n\n    private class AverageFactory implements DoubleSupplier {\n        private final double average = average(largeObject.getSeq());\n\n        @Override\n        public double getAsDouble() {\n            return average;\n        }\n\n        private double average(List<Integer> seq) {\n            System.out.println(\"calculating...\");\n            return seq.stream().mapToInt(x -> x).average().getAsDouble();\n        }\n    }\n}\n```\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3082\u3061\u3087\u3063\u3068\u4fee\u6b63\u3057\u3066\u3001\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n\n```java\n\n    @Test\n    public void testCalcAverage2() {\n        List<Integer> seq = Arrays.asList(20, 12, 12);\n        LargeObject largeObject = new LargeObject();\n        largeObject.setSeq(seq);\n\n        AverageHelper2 target = new AverageHelper2(largeObject);\n        Double actual = target.getAverage();\n        Double expected = 44.0 / 3.0;\n\n        assertEquals(expected, actual);\n        target.getAverage();\n    }\n```\n\n```\nget average\ncalculating...\nget average\n```\n\n\u4e0a\u8a18\u30ed\u30b0\u304b\u3089\u3001\u5e73\u5747\u304c\u6b32\u3057\u3044\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u8a08\u7b97\u3055\u308c\u3001\u304b\u3064\u30ad\u30e3\u30c3\u30b7\u30e5\u5316\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002`!AverageFactory.class.isInstance(averageSupplier)` \u304c\u30c0\u30b5\u3044\u611f\u3058\u3082\u3057\u307e\u3059\u304c\u3001\u307e\u3041\u3044\u3044\u3063\u3066\u3053\u3068\u3067\u3002\n\n### \u53c2\u8003\u6587\u732e\n\nVenkat Subramaniam\u300e[Java\u306b\u3088\u308b\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0](http://www.oreilly.co.jp/books/9784873117041/)\u300f\u306e6\u7ae0\u300e\u300c\u9045\u5ef6\u3055\u305b\u308b\u300d\u3068\u3044\u3046\u3053\u3068\u300f\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\n"}