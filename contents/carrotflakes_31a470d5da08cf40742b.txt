{"context": "\u3053\u308c\u306f Nextremer Advent Calendar 2016 \u306e3\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\nHTML5 \u306b\u306f Web Audio API \u3068\u3044\u3046\u97f3\u58f0\u3092\u6271\u3046\u5f37\u529b\u306a API \u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u4f7f\u3063\u3066\u7c21\u5358\u306a\u81ea\u52d5\u4f5c\u66f2\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\nWeb Audio API \u3092\u3042\u308b\u7a0b\u5ea6\u77e5\u3063\u3066\u3044\u308b\u4eba\u5411\u3051\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\u30c7\u30e2\u306f Chrome \u3067\u958b\u304f\u3053\u3068\u3092\u63a8\u5968\u3057\u307e\u3059\u3002\n\n\u3068\u306b\u304b\u304f\u97f3\u3092\u9cf4\u3089\u3057\u3066\u307f\u308b\n\u3053\u3093\u306a HTML \u3092\u66f8\u304d\u307e\u3057\u305f\u3002play \u3092\u62bc\u3059\u3068\u97f3\u304c\u306a\u308b\u3060\u3051\u306e\u3082\u306e\u3067\u3059\u3002\nGain \u30922\u3064\u565b\u307e\u3057\u3066\u307e\u3059\u304c\u3001masterGain \u306f\u5168\u4f53\u306e\u97f3\u91cf\u3092\u8abf\u7bc0\u3057\u3001gain \u306f\u97f3\u6bce\u306e\u97f3\u91cf\u3092\u8abf\u7bc0\u3059\u308b\u3068\u3044\u3046\u5f79\u5272\u3067\u3059\u3002\nmasterGain \u306f\u7d4c\u9a13\u4e0a\u3001 0.1 \u3068\u304b\u5c0f\u3055\u3081\u306b\u3057\u306a\u3044\u3068\u3046\u308b\u3055\u3044\u3002\n<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n</head>\n<body>\n    <button onclick=\"play()\"> play</button>\n<script>\nconst AudioContext = window.AudioContext;\nconst ac = new AudioContext();\n\nconst masterGain = ac.createGain();\nmasterGain.gain.value = 0.1;\nmasterGain.connect(ac.destination);\n\nfunction play() {\n   const timeNow = ac.currentTime;\n   const gain = ac.createGain();\n   gain.gain.value = 1;\n   const osc = ac.createOscillator();\n   osc.type=\"square\";\n   osc.connect(gain);\n   gain.connect(masterGain);\n   osc.start(timeNow);\n   osc.stop(timeNow + 0.1);\n}\n</script>\n</body>\n</html>\n\n\u30c7\u30e21\n\n\u548c\u97f3\u3092\u9cf4\u3089\u3059\nchord \u95a2\u6570\u3067\u548c\u97f3\u3092\u9cf4\u3089\u305b\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nnote1 \u306f\u5358\u4f53\u306e\u97f3\u3092\u9cf4\u3089\u3059\u95a2\u6570\u3067\u3059\u3002\u4efb\u610f\u306e\u97f3\u9ad8\u3067\u9cf4\u3089\u305b\u307e\u3059\u3002MIDI \u306b\u5023\u3044\u3001 nn = 60 \u304c\u30c9\u306b\u5f53\u305f\u308a\u307e\u3059\u3002\n\u548c\u97f3\u306f\u3001\u30eb\u30fc\u30c8\u97f3(root)\u3068\u3001\u30b3\u30fc\u30c9\u306e\u30bf\u30a4\u30d7(type)\u304b\u3089\u4f5c\u3089\u308c\u307e\u3059\u3002type \u306f\u3068\u308a\u3042\u3048\u305a\u9577\u4e09\u548c\u97f3(major)\u3068\u77ed\u4e09\u548c\u97f3(minor)\u3092\u7528\u610f\u3057\u307e\u3057\u305f\u3002\nplay\u3092\u62bc\u3059\u3068 C-F-G \u3068\u30b3\u30fc\u30c9\u9032\u884c\u304c\u9cf4\u308a\u307e\u3059\u3002\n(\u306a\u3093\u304b\u521d\u3063\u7aef\u306e\u548c\u97f3\u3001\u4e00\u97f3\u3057\u304b\u9cf4\u3089\u306a\u3044\u3068\u304d\u304c\u3042\u308b\u6c17\u304c\u3059\u308b\u305e\u30fb\u30fb\u30fb)\nconst AudioContext = window.AudioContext;\nconst ac = new AudioContext();\n\nconst masterGain = ac.createGain();\nmasterGain.gain.value = 0.1;\nmasterGain.connect(ac.destination);\n\nfunction play() {\n        const timeNow = ac.currentTime;\n        chord(timeNow, 60, 'major', 1);\n        chord(timeNow + 1, 65, 'major', 1);\n        chord(timeNow + 2, 67, 'major', 1);\n}\n\nfunction note1(time, nn, dur) {\n        const gain = ac.createGain();\n        gain.gain.value = 1;\n        const osc = ac.createOscillator();\n        osc.type=\"square\";\n        const freq = 440 * Math.pow(2, (nn - 69) / 12);\n        osc.frequency.setValueAtTime(freq, time);\n        osc.connect(gain);\n        gain.connect(masterGain);\n        osc.start(time);\n        osc.stop(time + dur);\n}\n\nfunction chord(time, root, type, dur) {\n        const ds = {\n                'major': [0, 4, 7],\n                'minor': [0, 3, 7],\n        }[type];\n\n        for (const d of ds)\n                note1(time, root + d, dur);\n}\n\n\u30c7\u30e22\n\n\u7121\u9650\u306b\u6f14\u594f\u3059\u308b\nsetInterval \u3092\u4f7f\u3063\u3066\u7121\u9650\u306b\u6f14\u594f\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\njs \u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u304c\u3044\u3044\u611f\u3058\u306b\u30cf\u30de\u3063\u3066\u308b\u3068\u601d\u3046\u3002\nC-F-G-C-C-F-G-C-... \u3068\u3001\u30b3\u30fc\u30c9\u9032\u884c\u3092\u5ef6\u3005\u306b\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3002\nconst AudioContext = window.AudioContext;\nconst ac = new AudioContext();\n\nconst masterGain = ac.createGain();\nmasterGain.gain.value = 0.1;\nmasterGain.connect(ac.destination);\n\nconst barLength = 2; // \u4e00\u5c0f\u7bc0\u5f53\u305f\u308a\u306e\u79d2\u6570\n\nfunction play() {\n        let timeNext = ac.currentTime + 0.01;\n        let i = 0;\n\n        function* nextBar() {\n                while (1) {\n                        chord(timeNext, [60, 65, 67, 60][i], 'major', barLength);\n                        i = (i+1)%4;\n                        yield;\n                }\n        }\n\n        const barGen = nextBar();\n        setInterval(() => {\n                if (timeNext - barLength < ac.currentTime) {\n                        barGen.next();\n                        timeNext += barLength;\n                }\n        }, 500);\n}\n\nfunction note1(time, nn, dur) {\n        const freq = 440 * Math.pow(2, (nn - 69) / 12);\n        const gain = ac.createGain();\n        gain.gain.value = 1;\n        const osc = ac.createOscillator();\n        osc.type=\"square\";\n        osc.frequency.setValueAtTime(freq, time);\n        osc.connect(gain);\n        gain.connect(masterGain);\n        osc.start(time);\n        osc.stop(time + dur);\n}\n\nfunction chord(time, root, type, dur) {\n        const ds = {\n                'major': [0, 4, 7],\n                'minor': [0, 3, 7],\n        }[type];\n\n        for (const d of ds)\n                note1(time, root + d, dur);\n}\n\n\u30c7\u30e23\n\n\u30d0\u30b9\u30c9\u30e9\u3092\u8ffd\u52a0\n\u30ea\u30ba\u30e0\u304c\u7121\u3044\u3068\u5bc2\u3057\u3044\u306e\u3067\u30d0\u30b9\u30c9\u30e9\u3092\u8db3\u3057\u307e\u3059\u3002\nexponentialRampToValueAtTime \u3067\u5468\u6ce2\u6570\u3092\u4e0b\u3052\u308b\u3088\u3046\u306b\u4e09\u89d2\u6ce2\u3092\u9cf4\u3089\u3059\u3053\u3068\u3067\u3001\u96fb\u5b50\u7684\u306a\u30d0\u30b9\u30c9\u30e9\u306e\u97f3\u3092\u518d\u73fe\u3057\u307e\u3059\u3002\n\u30b9\u30cd\u30a2\u3082\u6b32\u3057\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u7c21\u5358\u306b\u97f3\u3092\u4f5c\u308b\u65b9\u6cd5\u304c\u601d\u3044\u3064\u304b\u306a\u304b\u3063\u305f\u3067\u3059\u3002\n\uff08\u30d0\u30b9\u30c9\u30e9\u306e\u97f3\u3001\u805e\u3053\u3048\u307e\u3059\u304b\u306d\uff1f\uff09\nconst AudioContext = window.AudioContext;\nconst ac = new AudioContext();\n\nconst masterGain = ac.createGain();\nmasterGain.gain.value = 0.1;\nmasterGain.connect(ac.destination);\n\nconst barLength = 2; // \u4e00\u5c0f\u7bc0\u5f53\u305f\u308a\u306e\u79d2\u6570\n\nfunction play() {\n        let timeNext = ac.currentTime + 0.5;\n        let i = 0;\n\n        function* nextBar() {\n                while (1) {\n                        const time = timeNext;\n\n                        // \u30b3\u30fc\u30c9\n                        chord(time, [60, 65, 67, 60][i], 'major', barLength);\n\n                        // \u30c9\u30e9\u30e0\n                        bassDrum(time + barLength * 0);\n                        bassDrum(time + barLength * 0.25);\n                        bassDrum(time + barLength * 0.5);\n                        bassDrum(time + barLength * 0.75);\n\n                        i = (i+1)%4;\n                        yield;\n                }\n        }\n\n        const barGen = nextBar();\n        setInterval(() => {\n                if (timeNext - barLength < ac.currentTime) {\n                        barGen.next();\n                        timeNext += barLength;\n                }\n        }, 500);\n}\n\nfunction note1(time, nn, dur) {\n        const freq = 440 * Math.pow(2, (nn - 69) / 12);\n        const gain = ac.createGain();\n        gain.gain.value = 1;\n        const osc = ac.createOscillator();\n        osc.type=\"square\";\n        osc.frequency.setValueAtTime(freq, time);\n        osc.connect(gain);\n        gain.connect(masterGain);\n        osc.start(time);\n        osc.stop(time + dur);\n}\n\nfunction chord(time, root, type, dur) {\n        const ds = {\n                'major': [0, 4, 7],\n                'minor': [0, 3, 7],\n        }[type];\n\n        for (const d of ds)\n                note1(time, root + d, dur);\n}\n\nfunction bassDrum(time) {\n        const dur = 0.2;\n        const gain = ac.createGain();\n        gain.gain.setValueAtTime(2, time);\n        gain.gain.setValueAtTime(2, time + dur * 0.5);\n        gain.gain.exponentialRampToValueAtTime(0.1, time + dur);\n        const osc = ac.createOscillator();\n        osc.type=\"triangle\";\n        osc.frequency.setValueAtTime(300, time);\n        osc.frequency.exponentialRampToValueAtTime(20, time + dur);\n        osc.connect(gain);\n        gain.connect(masterGain);\n        osc.start(time);\n        osc.stop(time + dur);\n}\n\n\u30c7\u30e24\n\n\u30e1\u30ed\u30c7\u30a3\u3092\u8ffd\u52a0\n\u30e1\u30ed\u30c7\u30a3\u306e(\u3088\u3046\u306a\u3082\u306e)\u3092\u8db3\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u4e00\u62cd\u3054\u3068\u306b\u3001\u548c\u97f3\u306e\u69cb\u6210\u97f3\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u4e00\u3064\u9cf4\u3089\u3059\u3060\u3051\u3068\u3044\u3046\u5b9f\u88c5\u3067\u3059\u3002\n\uff08\u66f2\u3063\u307d\u304f\u306a\u3063\u3066\u308b\uff1f\uff09\nconst AudioContext = window.AudioContext;\nconst ac = new AudioContext();\n\nconst masterGain = ac.createGain();\nmasterGain.gain.value = 0.1;\nmasterGain.connect(ac.destination);\n\nconst barLength = 2; // \u4e00\u5c0f\u7bc0\u5f53\u305f\u308a\u306e\u79d2\u6570\nconst beatLength = barLength / 4; // \u4e00\u62cd\u5f53\u305f\u308a\u306e\u79d2\u6570\n\nfunction play() {\n        let time = ac.currentTime + 0.5;\n\n        function* nextBar() {\n                let i = 0;\n\n                while (1) {\n                        const root = [60, 65, 67, 60][i];\n                        const type = 'major';\n\n                        // \u30e1\u30ed\u30c7\u30a3\n                        for (let j = 0; j < 4; ++j)\n                                note2(time + beatLength * j, randGet(chordNotes(root, type)) + 12, beatLength);\n\n                        // \u30b3\u30fc\u30c9\n                        chord(time, root, type, barLength);\n\n                        // \u30c9\u30e9\u30e0\n                        bassDrum(time + barLength * 0);\n                        bassDrum(time + barLength * 0.25);\n                        bassDrum(time + barLength * 0.5);\n                        bassDrum(time + barLength * 0.75);\n\n                        i = (i+1)%4;\n                        yield;\n                }\n        }\n\n        const barGen = nextBar();\n        setInterval(() => {\n                if (time - barLength < ac.currentTime) {\n                        barGen.next();\n                        time += barLength;\n                }\n        }, 500);\n}\n\nfunction note1(time, nn, dur) {\n        const freq = 440 * Math.pow(2, (nn - 69) / 12);\n        const gain = ac.createGain();\n        gain.gain.value = 0.5;\n        const osc = ac.createOscillator();\n        osc.type=\"square\";\n        osc.frequency.setValueAtTime(freq, time);\n        osc.connect(gain);\n        gain.connect(masterGain);\n        osc.start(time);\n        osc.stop(time + dur);\n}\n\nfunction note2(time, nn, dur) {\n        const freq = 440 * Math.pow(2, (nn - 69) / 12);\n        const gain = ac.createGain();\n        gain.gain.value = 1;\n        const osc = ac.createOscillator();\n        osc.type=\"sawtooth\";\n        osc.frequency.setValueAtTime(freq, time);\n        osc.connect(gain);\n        gain.connect(masterGain);\n        osc.start(time);\n        osc.stop(time + dur);\n}\n\nfunction chordNotes(root, type) {\n        const ds = {\n                'major': [0, 4, 7],\n                'minor': [0, 3, 7],\n        }[type];\n        return ds.map((x) => x + root);\n}\n\nfunction chord(time, root, type, dur) {\n        for (const nn of chordNotes(root, type))\n                note1(time, nn, dur);\n}\n\nfunction bassDrum(time) {\n        const dur = 0.2;\n        const gain = ac.createGain();\n        gain.gain.setValueAtTime(2, time);\n        gain.gain.setValueAtTime(2, time + dur * 0.5);\n        gain.gain.exponentialRampToValueAtTime(0.1, time + dur);\n        const osc = ac.createOscillator();\n        osc.type=\"triangle\";\n        osc.frequency.setValueAtTime(300, time);\n        osc.frequency.exponentialRampToValueAtTime(20, time + dur);\n        osc.connect(gain);\n        gain.connect(masterGain);\n        osc.start(time);\n        osc.stop(time + dur);\n}\n\nfunction randGet(arr) {\n        return arr[Math.random() * arr.length | 0];\n}\n\n\u30c7\u30e25\n\n\u30b3\u30fc\u30c9\u9032\u884c\u306b\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u3092\u3082\u305f\u305b\u308b\nhttp://supuhuri.sub.jp/tukurikata1.htm\n\u3053\u306e\u30da\u30fc\u30b8\u3092\u53c2\u8003\u306b5\u3064\u307b\u3069\u30b3\u30fc\u30c9\u9032\u884c\u3092\u7528\u610f\u3057\u3001\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\u3057\u3066\u6f14\u594f\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\u3064\u3044\u3067\u306b\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3057\u307e\u3057\u305f\u3002\n\u30e1\u30ed\u30c7\u30a3\u306e\u97f3\u304c\u9ad8\u304f\u306a\u308a\u3059\u304e\u306a\u3044\u3088\u3046\u306b\u97f3\u57df\u3092\u5236\u9650\u3057\u3088\u3046\u3068\u3057\u307e\u3057\u305f\u304c\u3001\u8074\u3044\u3066\u307f\u308b\u3068\u3057\u306a\u3044\u307b\u3046\u304c\u3044\u3044\u306a\u3068\u601d\u3063\u3066\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u3066\u3042\u308a\u307e\u3059\u3002\nconst AudioContext = window.AudioContext;\nconst ac = new AudioContext();\n\nconst masterGain = ac.createGain();\nmasterGain.gain.value = 0.1;\nmasterGain.connect(ac.destination);\n\nconst barLength = 2; // \u4e00\u5c0f\u7bc0\u5f53\u305f\u308a\u306e\u79d2\u6570\nconst beatLength = barLength / 4; // \u4e00\u62cd\u5f53\u305f\u308a\u306e\u79d2\u6570\n\nfunction play() {\n        const barGen = nextBar(ac.currentTime + 0.5);\n        let time = barGen.next().value;\n\n        setInterval(() => {\n                if (time - barLength < ac.currentTime) {\n                        time = barGen.next().value;\n                }\n        }, 500);\n}\n\nfunction* nextBar(time) {\n        const chordGen = nextChord();\n\n        while (1) {\n                const {root, type} = chordGen.next().value;\n\n                // \u30e1\u30ed\u30c7\u30a3\n                for (let j = 0; j < 4; ++j)\n                        note2(time + beatLength * j,\n                                    randGet(chordNotes(root, type)) + 12,\n                                    //clip(randGet(chordNotes(root, type)) + 12, 72, 84),\n                                    beatLength);\n\n                // \u30b3\u30fc\u30c9\n                chord(time, root, type, barLength);\n\n                // \u30c9\u30e9\u30e0\n                for (let i = 0; i < 4; ++i)\n                        bassDrum(time + beatLength * i);\n\n                time += barLength;\n                yield time;\n        }\n}\n\nfunction* nextChord() {\n        const rootTable = {\n                C: 60, D: 62, E: 64, F: 65, G: 67, A: 69, B: 71\n        };\n        const chordProgs = [\n                'Cmajor Eminor7 Fmajor G7',\n                'Fmajor G7 Eminor7 Aminor',\n                'Aminor Fmajor Gmajor Cmajor',\n                'Fmajor Eminor7 Dminor7 Cmajor',\n                'Cmajor Gmajor Aminor Eminor Fmajor Eminor Fmajor Gmajor',\n        ].map(x => x.split(' ').map(y => {\n                return {\n                        root: rootTable[y[0]],\n                        type: y.substr(1)\n                };\n        }));\n\n        while (1)\n                yield* randGet(chordProgs);\n}\n\n\nfunction note1(time, nn, dur) {\n        const freq = 440 * Math.pow(2, (nn - 69) / 12);\n        const gain = ac.createGain();\n        gain.gain.value = 0.5;\n        const osc = ac.createOscillator();\n        osc.type=\"square\";\n        osc.frequency.setValueAtTime(freq, time);\n        osc.connect(gain);\n        gain.connect(masterGain);\n        osc.start(time);\n        osc.stop(time + dur);\n}\n\nfunction note2(time, nn, dur) {\n        const freq = 440 * Math.pow(2, (nn - 69) / 12);\n        const gain = ac.createGain();\n        gain.gain.value = 1;\n        const osc = ac.createOscillator();\n        osc.type=\"sawtooth\";\n        osc.frequency.setValueAtTime(freq, time);\n        osc.connect(gain);\n        gain.connect(masterGain);\n        osc.start(time);\n        osc.stop(time + dur);\n}\n\nfunction chordNotes(root, type) {\n        const ds = {\n                'major':   [0, 4, 7],\n                'minor':   [0, 3, 7],\n                '7':       [0, 4, 7, 10],\n                'minor7':  [0, 3, 7, 10],\n        }[type];\n        return ds.map((x) => x + root);\n}\n\nfunction chord(time, root, type, dur) {\n        for (const nn of chordNotes(root, type))\n                note1(time, nn, dur);\n}\n\nfunction bassDrum(time) {\n        const dur = 0.2;\n        const gain = ac.createGain();\n        gain.gain.setValueAtTime(2, time);\n        gain.gain.setValueAtTime(2, time + dur * 0.5);\n        gain.gain.exponentialRampToValueAtTime(0.1, time + dur);\n        const osc = ac.createOscillator();\n        osc.type=\"triangle\";\n        osc.frequency.setValueAtTime(300, time);\n        osc.frequency.exponentialRampToValueAtTime(20, time + dur);\n        osc.connect(gain);\n        gain.connect(masterGain);\n        osc.start(time);\n        osc.stop(time + dur);\n}\n\nfunction randGet(arr) {\n        return arr[Math.random() * arr.length | 0];\n}\n\nfunction clip(nn, lower, upper) {\n        while (nn < lower)\n                nn += 12;\n        while (upper < nn)\n                nn -= 12;\n        return nn;\n}\n\n\u30c7\u30e26\n\n\u304a\u308f\u308a\n\u3044\u304b\u304c\u3067\u3057\u305f\u3067\u3057\u3087\u3046\u304b\u3002\n\u500b\u4eba\u7684\u306b\u306f\u5ef6\u3005\u6d41\u3057\u3066\u3089\u308c\u308b\u3088\u3046\u306a\u66f2\u304c\u751f\u6210\u3067\u304d\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u3042\u3068\u30d7\u30ed\u30b0\u30e9\u30e0\u81ea\u4f53\u66f8\u3044\u3066\u3066\u697d\u3057\u304b\u3063\u305f\u3067\u3059\u3002\n\u679c\u305f\u3057\u3066\u3053\u308c\u3092\u81ea\u52d5\u4f5c\u66f2\u3068\u3088\u3093\u3067\u3044\u3044\u306e\u304b\u308f\u304b\u308a\u307e\u305b\u3093\u304c\u7686\u3055\u3093\u3082\u305c\u3072\u81ea\u52d5\u4f5c\u66f2\u306b\u6311\u6226\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u3084\u308a\u6b8b\u3057\u305f\u3053\u3068\n\u3084\u308a\u305f\u304b\u3063\u305f\u3051\u3069\u3001\u6642\u9593\u304c\u306a\u304f\u3066\u65ad\u5ff5\u3057\u305f\u3053\u3068\u3092\u66f8\u304d\u7559\u3081\u3066\u304a\u304d\u307e\u3059\u3002\u3002\u3002\n\n\u5468\u6ce2\u6570\u5909\u8abf\n\u3082\u3046\u3061\u3087\u3063\u3068\u307e\u3068\u3082\u306a\u30e1\u30ed\u30c7\u30a3\u751f\u6210(n\u5206\u97f3\u7b26, \u4f11\u7b26, \u30b7\u30f3\u30b3\u30da\u30fc\u30b7\u30e7\u30f3, \u975e\u548c\u58f0\u97f3, etc)\n\u30de\u30eb\u30b3\u30d5\u9023\u9396\u306b\u3088\u308b\u30b3\u30fc\u30c9\u9032\u884c\u751f\u6210\n\u30a2\u30eb\u30da\u30b8\u30aa\u306e\u751f\u6210\n\u30d9\u30fc\u30b9\u3084\u30b9\u30cd\u30a2\u306a\u3069\u306e\u30c9\u30e9\u30e0\u968a\u306e\u5b9f\u88c5\n\n\u3053\u308c\u306f [Nextremer Advent Calendar 2016](http://qiita.com/advent-calendar/2016/nextremer) \u306e3\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\nHTML5 \u306b\u306f Web Audio API \u3068\u3044\u3046\u97f3\u58f0\u3092\u6271\u3046\u5f37\u529b\u306a API \u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u4f7f\u3063\u3066\u7c21\u5358\u306a\u81ea\u52d5\u4f5c\u66f2\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n\nWeb Audio API \u3092\u3042\u308b\u7a0b\u5ea6\u77e5\u3063\u3066\u3044\u308b\u4eba\u5411\u3051\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n\u30c7\u30e2\u306f Chrome \u3067\u958b\u304f\u3053\u3068\u3092\u63a8\u5968\u3057\u307e\u3059\u3002\n\n# \u3068\u306b\u304b\u304f\u97f3\u3092\u9cf4\u3089\u3057\u3066\u307f\u308b\n\u3053\u3093\u306a HTML \u3092\u66f8\u304d\u307e\u3057\u305f\u3002play \u3092\u62bc\u3059\u3068\u97f3\u304c\u306a\u308b\u3060\u3051\u306e\u3082\u306e\u3067\u3059\u3002\nGain \u30922\u3064\u565b\u307e\u3057\u3066\u307e\u3059\u304c\u3001`masterGain` \u306f\u5168\u4f53\u306e\u97f3\u91cf\u3092\u8abf\u7bc0\u3057\u3001`gain` \u306f\u97f3\u6bce\u306e\u97f3\u91cf\u3092\u8abf\u7bc0\u3059\u308b\u3068\u3044\u3046\u5f79\u5272\u3067\u3059\u3002\n`masterGain` \u306f\u7d4c\u9a13\u4e0a\u3001 `0.1` \u3068\u304b\u5c0f\u3055\u3081\u306b\u3057\u306a\u3044\u3068\u3046\u308b\u3055\u3044\u3002\n\n```html\n<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n</head>\n<body>\n\t<button onclick=\"play()\"> play</button>\n<script>\nconst AudioContext = window.AudioContext;\nconst ac = new AudioContext();\n\nconst masterGain = ac.createGain();\nmasterGain.gain.value = 0.1;\nmasterGain.connect(ac.destination);\n\nfunction play() {\n   const timeNow = ac.currentTime;\n   const gain = ac.createGain();\n   gain.gain.value = 1;\n   const osc = ac.createOscillator();\n   osc.type=\"square\";\n   osc.connect(gain);\n   gain.connect(masterGain);\n   osc.start(timeNow);\n   osc.stop(timeNow + 0.1);\n}\n</script>\n</body>\n</html>\n```\n\n[\u30c7\u30e21](https://carrotflakes.github.io/waa-music-generation/mugen1.html)\n\n# \u548c\u97f3\u3092\u9cf4\u3089\u3059\n`chord` \u95a2\u6570\u3067\u548c\u97f3\u3092\u9cf4\u3089\u305b\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n`note1` \u306f\u5358\u4f53\u306e\u97f3\u3092\u9cf4\u3089\u3059\u95a2\u6570\u3067\u3059\u3002\u4efb\u610f\u306e\u97f3\u9ad8\u3067\u9cf4\u3089\u305b\u307e\u3059\u3002MIDI \u306b\u5023\u3044\u3001 `nn = 60` \u304c\u30c9\u306b\u5f53\u305f\u308a\u307e\u3059\u3002\n\u548c\u97f3\u306f\u3001\u30eb\u30fc\u30c8\u97f3(`root`)\u3068\u3001\u30b3\u30fc\u30c9\u306e\u30bf\u30a4\u30d7(`type`)\u304b\u3089\u4f5c\u3089\u308c\u307e\u3059\u3002`type` \u306f\u3068\u308a\u3042\u3048\u305a\u9577\u4e09\u548c\u97f3(major)\u3068\u77ed\u4e09\u548c\u97f3(minor)\u3092\u7528\u610f\u3057\u307e\u3057\u305f\u3002\nplay\u3092\u62bc\u3059\u3068 C-F-G \u3068\u30b3\u30fc\u30c9\u9032\u884c\u304c\u9cf4\u308a\u307e\u3059\u3002\n(\u306a\u3093\u304b\u521d\u3063\u7aef\u306e\u548c\u97f3\u3001\u4e00\u97f3\u3057\u304b\u9cf4\u3089\u306a\u3044\u3068\u304d\u304c\u3042\u308b\u6c17\u304c\u3059\u308b\u305e\u30fb\u30fb\u30fb)\n\n```JavaScript\nconst AudioContext = window.AudioContext;\nconst ac = new AudioContext();\n\nconst masterGain = ac.createGain();\nmasterGain.gain.value = 0.1;\nmasterGain.connect(ac.destination);\n\nfunction play() {\n\t\tconst timeNow = ac.currentTime;\n\t\tchord(timeNow, 60, 'major', 1);\n\t\tchord(timeNow + 1, 65, 'major', 1);\n\t\tchord(timeNow + 2, 67, 'major', 1);\n}\n\nfunction note1(time, nn, dur) {\n\t\tconst gain = ac.createGain();\n\t\tgain.gain.value = 1;\n\t\tconst osc = ac.createOscillator();\n\t\tosc.type=\"square\";\n\t\tconst freq = 440 * Math.pow(2, (nn - 69) / 12);\n\t\tosc.frequency.setValueAtTime(freq, time);\n\t\tosc.connect(gain);\n\t\tgain.connect(masterGain);\n\t\tosc.start(time);\n\t\tosc.stop(time + dur);\n}\n\nfunction chord(time, root, type, dur) {\n\t\tconst ds = {\n\t\t\t\t'major': [0, 4, 7],\n\t\t\t\t'minor': [0, 3, 7],\n\t\t}[type];\n\n\t\tfor (const d of ds)\n\t\t\t\tnote1(time, root + d, dur);\n}\n```\n\n[\u30c7\u30e22](https://carrotflakes.github.io/waa-music-generation/mugen2.html)\n\n# \u7121\u9650\u306b\u6f14\u594f\u3059\u308b\n`setInterval` \u3092\u4f7f\u3063\u3066\u7121\u9650\u306b\u6f14\u594f\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\njs \u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u304c\u3044\u3044\u611f\u3058\u306b\u30cf\u30de\u3063\u3066\u308b\u3068\u601d\u3046\u3002\nC-F-G-C-C-F-G-C-... \u3068\u3001\u30b3\u30fc\u30c9\u9032\u884c\u3092\u5ef6\u3005\u306b\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3002\n\n```JavaScript\nconst AudioContext = window.AudioContext;\nconst ac = new AudioContext();\n\nconst masterGain = ac.createGain();\nmasterGain.gain.value = 0.1;\nmasterGain.connect(ac.destination);\n\nconst barLength = 2; // \u4e00\u5c0f\u7bc0\u5f53\u305f\u308a\u306e\u79d2\u6570\n\nfunction play() {\n\t\tlet timeNext = ac.currentTime + 0.01;\n\t\tlet i = 0;\n\n\t\tfunction* nextBar() {\n\t\t\t\twhile (1) {\n\t\t\t\t\t\tchord(timeNext, [60, 65, 67, 60][i], 'major', barLength);\n\t\t\t\t\t\ti = (i+1)%4;\n\t\t\t\t\t\tyield;\n\t\t\t\t}\n\t\t}\n\n\t\tconst barGen = nextBar();\n\t\tsetInterval(() => {\n\t\t\t\tif (timeNext - barLength < ac.currentTime) {\n\t\t\t\t\t\tbarGen.next();\n\t\t\t\t\t\ttimeNext += barLength;\n\t\t\t\t}\n\t\t}, 500);\n}\n\nfunction note1(time, nn, dur) {\n\t\tconst freq = 440 * Math.pow(2, (nn - 69) / 12);\n\t\tconst gain = ac.createGain();\n\t\tgain.gain.value = 1;\n\t\tconst osc = ac.createOscillator();\n\t\tosc.type=\"square\";\n\t\tosc.frequency.setValueAtTime(freq, time);\n\t\tosc.connect(gain);\n\t\tgain.connect(masterGain);\n\t\tosc.start(time);\n\t\tosc.stop(time + dur);\n}\n\nfunction chord(time, root, type, dur) {\n\t\tconst ds = {\n\t\t\t\t'major': [0, 4, 7],\n\t\t\t\t'minor': [0, 3, 7],\n\t\t}[type];\n\n\t\tfor (const d of ds)\n\t\t\t\tnote1(time, root + d, dur);\n}\n```\n\n[\u30c7\u30e23](https://carrotflakes.github.io/waa-music-generation/mugen3.html)\n\n# \u30d0\u30b9\u30c9\u30e9\u3092\u8ffd\u52a0\n\u30ea\u30ba\u30e0\u304c\u7121\u3044\u3068\u5bc2\u3057\u3044\u306e\u3067\u30d0\u30b9\u30c9\u30e9\u3092\u8db3\u3057\u307e\u3059\u3002\n`exponentialRampToValueAtTime` \u3067\u5468\u6ce2\u6570\u3092\u4e0b\u3052\u308b\u3088\u3046\u306b\u4e09\u89d2\u6ce2\u3092\u9cf4\u3089\u3059\u3053\u3068\u3067\u3001\u96fb\u5b50\u7684\u306a\u30d0\u30b9\u30c9\u30e9\u306e\u97f3\u3092\u518d\u73fe\u3057\u307e\u3059\u3002\n\u30b9\u30cd\u30a2\u3082\u6b32\u3057\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u7c21\u5358\u306b\u97f3\u3092\u4f5c\u308b\u65b9\u6cd5\u304c\u601d\u3044\u3064\u304b\u306a\u304b\u3063\u305f\u3067\u3059\u3002\n\n\uff08\u30d0\u30b9\u30c9\u30e9\u306e\u97f3\u3001\u805e\u3053\u3048\u307e\u3059\u304b\u306d\uff1f\uff09\n\n```JavaScript\nconst AudioContext = window.AudioContext;\nconst ac = new AudioContext();\n\nconst masterGain = ac.createGain();\nmasterGain.gain.value = 0.1;\nmasterGain.connect(ac.destination);\n\nconst barLength = 2; // \u4e00\u5c0f\u7bc0\u5f53\u305f\u308a\u306e\u79d2\u6570\n\nfunction play() {\n\t\tlet timeNext = ac.currentTime + 0.5;\n\t\tlet i = 0;\n\n\t\tfunction* nextBar() {\n\t\t\t\twhile (1) {\n\t\t\t\t\t\tconst time = timeNext;\n\n\t\t\t\t\t\t// \u30b3\u30fc\u30c9\n\t\t\t\t\t\tchord(time, [60, 65, 67, 60][i], 'major', barLength);\n\n\t\t\t\t\t\t// \u30c9\u30e9\u30e0\n\t\t\t\t\t\tbassDrum(time + barLength * 0);\n\t\t\t\t\t\tbassDrum(time + barLength * 0.25);\n\t\t\t\t\t\tbassDrum(time + barLength * 0.5);\n\t\t\t\t\t\tbassDrum(time + barLength * 0.75);\n\n\t\t\t\t\t\ti = (i+1)%4;\n\t\t\t\t\t\tyield;\n\t\t\t\t}\n\t\t}\n\n\t\tconst barGen = nextBar();\n\t\tsetInterval(() => {\n\t\t\t\tif (timeNext - barLength < ac.currentTime) {\n\t\t\t\t\t\tbarGen.next();\n\t\t\t\t\t\ttimeNext += barLength;\n\t\t\t\t}\n\t\t}, 500);\n}\n\nfunction note1(time, nn, dur) {\n\t\tconst freq = 440 * Math.pow(2, (nn - 69) / 12);\n\t\tconst gain = ac.createGain();\n\t\tgain.gain.value = 1;\n\t\tconst osc = ac.createOscillator();\n\t\tosc.type=\"square\";\n\t\tosc.frequency.setValueAtTime(freq, time);\n\t\tosc.connect(gain);\n\t\tgain.connect(masterGain);\n\t\tosc.start(time);\n\t\tosc.stop(time + dur);\n}\n\nfunction chord(time, root, type, dur) {\n\t\tconst ds = {\n\t\t\t\t'major': [0, 4, 7],\n\t\t\t\t'minor': [0, 3, 7],\n\t\t}[type];\n\n\t\tfor (const d of ds)\n\t\t\t\tnote1(time, root + d, dur);\n}\n\nfunction bassDrum(time) {\n\t\tconst dur = 0.2;\n\t\tconst gain = ac.createGain();\n\t\tgain.gain.setValueAtTime(2, time);\n\t\tgain.gain.setValueAtTime(2, time + dur * 0.5);\n\t\tgain.gain.exponentialRampToValueAtTime(0.1, time + dur);\n\t\tconst osc = ac.createOscillator();\n\t\tosc.type=\"triangle\";\n\t\tosc.frequency.setValueAtTime(300, time);\n\t\tosc.frequency.exponentialRampToValueAtTime(20, time + dur);\n\t\tosc.connect(gain);\n\t\tgain.connect(masterGain);\n\t\tosc.start(time);\n\t\tosc.stop(time + dur);\n}\n```\n\n[\u30c7\u30e24](https://carrotflakes.github.io/waa-music-generation/mugen4.html)\n\n# \u30e1\u30ed\u30c7\u30a3\u3092\u8ffd\u52a0\n\u30e1\u30ed\u30c7\u30a3\u306e(\u3088\u3046\u306a\u3082\u306e)\u3092\u8db3\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u4e00\u62cd\u3054\u3068\u306b\u3001\u548c\u97f3\u306e\u69cb\u6210\u97f3\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u4e00\u3064\u9cf4\u3089\u3059\u3060\u3051\u3068\u3044\u3046\u5b9f\u88c5\u3067\u3059\u3002\n\n\uff08\u66f2\u3063\u307d\u304f\u306a\u3063\u3066\u308b\uff1f\uff09\n\n```JavaScript\nconst AudioContext = window.AudioContext;\nconst ac = new AudioContext();\n\nconst masterGain = ac.createGain();\nmasterGain.gain.value = 0.1;\nmasterGain.connect(ac.destination);\n\nconst barLength = 2; // \u4e00\u5c0f\u7bc0\u5f53\u305f\u308a\u306e\u79d2\u6570\nconst beatLength = barLength / 4; // \u4e00\u62cd\u5f53\u305f\u308a\u306e\u79d2\u6570\n\nfunction play() {\n\t\tlet time = ac.currentTime + 0.5;\n\n\t\tfunction* nextBar() {\n\t\t\t\tlet i = 0;\n\n\t\t\t\twhile (1) {\n\t\t\t\t\t\tconst root = [60, 65, 67, 60][i];\n\t\t\t\t\t\tconst type = 'major';\n\n\t\t\t\t\t\t// \u30e1\u30ed\u30c7\u30a3\n\t\t\t\t\t\tfor (let j = 0; j < 4; ++j)\n\t\t\t\t\t\t\t\tnote2(time + beatLength * j, randGet(chordNotes(root, type)) + 12, beatLength);\n\n\t\t\t\t\t\t// \u30b3\u30fc\u30c9\n\t\t\t\t\t\tchord(time, root, type, barLength);\n\n\t\t\t\t\t\t// \u30c9\u30e9\u30e0\n\t\t\t\t\t\tbassDrum(time + barLength * 0);\n\t\t\t\t\t\tbassDrum(time + barLength * 0.25);\n\t\t\t\t\t\tbassDrum(time + barLength * 0.5);\n\t\t\t\t\t\tbassDrum(time + barLength * 0.75);\n\n\t\t\t\t\t\ti = (i+1)%4;\n\t\t\t\t\t\tyield;\n\t\t\t\t}\n\t\t}\n\n\t\tconst barGen = nextBar();\n\t\tsetInterval(() => {\n\t\t\t\tif (time - barLength < ac.currentTime) {\n\t\t\t\t\t\tbarGen.next();\n\t\t\t\t\t\ttime += barLength;\n\t\t\t\t}\n\t\t}, 500);\n}\n\nfunction note1(time, nn, dur) {\n\t\tconst freq = 440 * Math.pow(2, (nn - 69) / 12);\n\t\tconst gain = ac.createGain();\n\t\tgain.gain.value = 0.5;\n\t\tconst osc = ac.createOscillator();\n\t\tosc.type=\"square\";\n\t\tosc.frequency.setValueAtTime(freq, time);\n\t\tosc.connect(gain);\n\t\tgain.connect(masterGain);\n\t\tosc.start(time);\n\t\tosc.stop(time + dur);\n}\n\nfunction note2(time, nn, dur) {\n\t\tconst freq = 440 * Math.pow(2, (nn - 69) / 12);\n\t\tconst gain = ac.createGain();\n\t\tgain.gain.value = 1;\n\t\tconst osc = ac.createOscillator();\n\t\tosc.type=\"sawtooth\";\n\t\tosc.frequency.setValueAtTime(freq, time);\n\t\tosc.connect(gain);\n\t\tgain.connect(masterGain);\n\t\tosc.start(time);\n\t\tosc.stop(time + dur);\n}\n\nfunction chordNotes(root, type) {\n\t\tconst ds = {\n\t\t\t\t'major': [0, 4, 7],\n\t\t\t\t'minor': [0, 3, 7],\n\t\t}[type];\n\t\treturn ds.map((x) => x + root);\n}\n\nfunction chord(time, root, type, dur) {\n\t\tfor (const nn of chordNotes(root, type))\n\t\t\t\tnote1(time, nn, dur);\n}\n\nfunction bassDrum(time) {\n\t\tconst dur = 0.2;\n\t\tconst gain = ac.createGain();\n\t\tgain.gain.setValueAtTime(2, time);\n\t\tgain.gain.setValueAtTime(2, time + dur * 0.5);\n\t\tgain.gain.exponentialRampToValueAtTime(0.1, time + dur);\n\t\tconst osc = ac.createOscillator();\n\t\tosc.type=\"triangle\";\n\t\tosc.frequency.setValueAtTime(300, time);\n\t\tosc.frequency.exponentialRampToValueAtTime(20, time + dur);\n\t\tosc.connect(gain);\n\t\tgain.connect(masterGain);\n\t\tosc.start(time);\n\t\tosc.stop(time + dur);\n}\n\nfunction randGet(arr) {\n\t\treturn arr[Math.random() * arr.length | 0];\n}\n```\n\n[\u30c7\u30e25](https://carrotflakes.github.io/waa-music-generation/mugen5.html)\n\n# \u30b3\u30fc\u30c9\u9032\u884c\u306b\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u3092\u3082\u305f\u305b\u308b\nhttp://supuhuri.sub.jp/tukurikata1.htm\n\u3053\u306e\u30da\u30fc\u30b8\u3092\u53c2\u8003\u306b5\u3064\u307b\u3069\u30b3\u30fc\u30c9\u9032\u884c\u3092\u7528\u610f\u3057\u3001\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\u3057\u3066\u6f14\u594f\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\u3064\u3044\u3067\u306b\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3057\u307e\u3057\u305f\u3002\n\n\u30e1\u30ed\u30c7\u30a3\u306e\u97f3\u304c\u9ad8\u304f\u306a\u308a\u3059\u304e\u306a\u3044\u3088\u3046\u306b\u97f3\u57df\u3092\u5236\u9650\u3057\u3088\u3046\u3068\u3057\u307e\u3057\u305f\u304c\u3001\u8074\u3044\u3066\u307f\u308b\u3068\u3057\u306a\u3044\u307b\u3046\u304c\u3044\u3044\u306a\u3068\u601d\u3063\u3066\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\n```JavaScript\nconst AudioContext = window.AudioContext;\nconst ac = new AudioContext();\n\nconst masterGain = ac.createGain();\nmasterGain.gain.value = 0.1;\nmasterGain.connect(ac.destination);\n\nconst barLength = 2; // \u4e00\u5c0f\u7bc0\u5f53\u305f\u308a\u306e\u79d2\u6570\nconst beatLength = barLength / 4; // \u4e00\u62cd\u5f53\u305f\u308a\u306e\u79d2\u6570\n\nfunction play() {\n\t\tconst barGen = nextBar(ac.currentTime + 0.5);\n\t\tlet time = barGen.next().value;\n\n\t\tsetInterval(() => {\n\t\t\t\tif (time - barLength < ac.currentTime) {\n\t\t\t\t\t\ttime = barGen.next().value;\n\t\t\t\t}\n\t\t}, 500);\n}\n\nfunction* nextBar(time) {\n\t\tconst chordGen = nextChord();\n\n\t\twhile (1) {\n\t\t\t\tconst {root, type} = chordGen.next().value;\n\n\t\t\t\t// \u30e1\u30ed\u30c7\u30a3\n\t\t\t\tfor (let j = 0; j < 4; ++j)\n\t\t\t\t\t\tnote2(time + beatLength * j,\n\t\t\t\t\t\t\t\t\trandGet(chordNotes(root, type)) + 12,\n\t\t\t\t\t\t\t\t\t//clip(randGet(chordNotes(root, type)) + 12, 72, 84),\n\t\t\t\t\t\t\t\t\tbeatLength);\n\n\t\t\t\t// \u30b3\u30fc\u30c9\n\t\t\t\tchord(time, root, type, barLength);\n\n\t\t\t\t// \u30c9\u30e9\u30e0\n\t\t\t\tfor (let i = 0; i < 4; ++i)\n\t\t\t\t\t\tbassDrum(time + beatLength * i);\n\n\t\t\t\ttime += barLength;\n\t\t\t\tyield time;\n\t\t}\n}\n\nfunction* nextChord() {\n\t\tconst rootTable = {\n\t\t\t\tC: 60, D: 62, E: 64, F: 65, G: 67, A: 69, B: 71\n\t\t};\n\t\tconst chordProgs = [\n\t\t\t\t'Cmajor Eminor7 Fmajor G7',\n\t\t\t\t'Fmajor G7 Eminor7 Aminor',\n\t\t\t\t'Aminor Fmajor Gmajor Cmajor',\n\t\t\t\t'Fmajor Eminor7 Dminor7 Cmajor',\n\t\t\t\t'Cmajor Gmajor Aminor Eminor Fmajor Eminor Fmajor Gmajor',\n\t\t].map(x => x.split(' ').map(y => {\n\t\t\t\treturn {\n\t\t\t\t\t\troot: rootTable[y[0]],\n\t\t\t\t\t\ttype: y.substr(1)\n\t\t\t\t};\n\t\t}));\n\n\t\twhile (1)\n\t\t\t\tyield* randGet(chordProgs);\n}\n\n\nfunction note1(time, nn, dur) {\n\t\tconst freq = 440 * Math.pow(2, (nn - 69) / 12);\n\t\tconst gain = ac.createGain();\n\t\tgain.gain.value = 0.5;\n\t\tconst osc = ac.createOscillator();\n\t\tosc.type=\"square\";\n\t\tosc.frequency.setValueAtTime(freq, time);\n\t\tosc.connect(gain);\n\t\tgain.connect(masterGain);\n\t\tosc.start(time);\n\t\tosc.stop(time + dur);\n}\n\nfunction note2(time, nn, dur) {\n\t\tconst freq = 440 * Math.pow(2, (nn - 69) / 12);\n\t\tconst gain = ac.createGain();\n\t\tgain.gain.value = 1;\n\t\tconst osc = ac.createOscillator();\n\t\tosc.type=\"sawtooth\";\n\t\tosc.frequency.setValueAtTime(freq, time);\n\t\tosc.connect(gain);\n\t\tgain.connect(masterGain);\n\t\tosc.start(time);\n\t\tosc.stop(time + dur);\n}\n\nfunction chordNotes(root, type) {\n\t\tconst ds = {\n\t\t\t\t'major':   [0, 4, 7],\n\t\t\t\t'minor':   [0, 3, 7],\n\t\t\t\t'7':       [0, 4, 7, 10],\n\t\t\t\t'minor7':  [0, 3, 7, 10],\n\t\t}[type];\n\t\treturn ds.map((x) => x + root);\n}\n\nfunction chord(time, root, type, dur) {\n\t\tfor (const nn of chordNotes(root, type))\n\t\t\t\tnote1(time, nn, dur);\n}\n\nfunction bassDrum(time) {\n\t\tconst dur = 0.2;\n\t\tconst gain = ac.createGain();\n\t\tgain.gain.setValueAtTime(2, time);\n\t\tgain.gain.setValueAtTime(2, time + dur * 0.5);\n\t\tgain.gain.exponentialRampToValueAtTime(0.1, time + dur);\n\t\tconst osc = ac.createOscillator();\n\t\tosc.type=\"triangle\";\n\t\tosc.frequency.setValueAtTime(300, time);\n\t\tosc.frequency.exponentialRampToValueAtTime(20, time + dur);\n\t\tosc.connect(gain);\n\t\tgain.connect(masterGain);\n\t\tosc.start(time);\n\t\tosc.stop(time + dur);\n}\n\nfunction randGet(arr) {\n\t\treturn arr[Math.random() * arr.length | 0];\n}\n\nfunction clip(nn, lower, upper) {\n\t\twhile (nn < lower)\n\t\t\t\tnn += 12;\n\t\twhile (upper < nn)\n\t\t\t\tnn -= 12;\n\t\treturn nn;\n}\n```\n\n[\u30c7\u30e26](https://carrotflakes.github.io/waa-music-generation/mugen6.html)\n\n# \u304a\u308f\u308a\n\u3044\u304b\u304c\u3067\u3057\u305f\u3067\u3057\u3087\u3046\u304b\u3002\n\u500b\u4eba\u7684\u306b\u306f\u5ef6\u3005\u6d41\u3057\u3066\u3089\u308c\u308b\u3088\u3046\u306a\u66f2\u304c\u751f\u6210\u3067\u304d\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u3042\u3068\u30d7\u30ed\u30b0\u30e9\u30e0\u81ea\u4f53\u66f8\u3044\u3066\u3066\u697d\u3057\u304b\u3063\u305f\u3067\u3059\u3002\n~~\u679c\u305f\u3057\u3066\u3053\u308c\u3092\u81ea\u52d5\u4f5c\u66f2\u3068\u3088\u3093\u3067\u3044\u3044\u306e\u304b\u308f\u304b\u308a\u307e\u305b\u3093\u304c~~\u7686\u3055\u3093\u3082\u305c\u3072\u81ea\u52d5\u4f5c\u66f2\u306b\u6311\u6226\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n# \u3084\u308a\u6b8b\u3057\u305f\u3053\u3068\n\n\u3084\u308a\u305f\u304b\u3063\u305f\u3051\u3069\u3001\u6642\u9593\u304c\u306a\u304f\u3066\u65ad\u5ff5\u3057\u305f\u3053\u3068\u3092\u66f8\u304d\u7559\u3081\u3066\u304a\u304d\u307e\u3059\u3002\u3002\u3002\n\n- \u5468\u6ce2\u6570\u5909\u8abf\n- \u3082\u3046\u3061\u3087\u3063\u3068\u307e\u3068\u3082\u306a\u30e1\u30ed\u30c7\u30a3\u751f\u6210(n\u5206\u97f3\u7b26, \u4f11\u7b26, \u30b7\u30f3\u30b3\u30da\u30fc\u30b7\u30e7\u30f3, \u975e\u548c\u58f0\u97f3, etc)\n- \u30de\u30eb\u30b3\u30d5\u9023\u9396\u306b\u3088\u308b\u30b3\u30fc\u30c9\u9032\u884c\u751f\u6210\n- \u30a2\u30eb\u30da\u30b8\u30aa\u306e\u751f\u6210\n- \u30d9\u30fc\u30b9\u3084\u30b9\u30cd\u30a2\u306a\u3069\u306e\u30c9\u30e9\u30e0\u968a\u306e\u5b9f\u88c5\n", "tags": ["JavaScript", "WebAudioAPI"]}