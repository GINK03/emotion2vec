{"context": "\n\n\u907a\u4f1d\u5b50\u767a\u73fe\u30c7\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u305f\u6a5f\u68b0\u5b66\u7fd2\n(2017.02.02 OSX El Capitan)\n\u69d8\u3005\u306a\u30d2\u30c8\u7d44\u7e54\u304b\u3089\u53d6\u3089\u308c\u305f\u907a\u4f1d\u5b50\u767a\u73fe\u30c7\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u3066\u3001\u907a\u4f1d\u5b50\u767a\u73fe\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u3001\n\u5404\u3005\u306e\u30b5\u30f3\u30d7\u30eb\u304c\u3001\u3069\u306e\u30d2\u30c8\u7d44\u7e54\u7531\u6765\u3067\u3042\u308b\u304b\u3092\u5b66\u7fd2\uff06\u63a8\u8ad6\u3057\u3066\u307f\u307e\u3059\u3002\nPython \u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 \u3092\u53c2\u8003\u306b\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u6a5f\u68b0\u5b66\u7fd2\u7528\u907a\u4f1d\u5b50\u767a\u73fe\u30c7\u30fc\u30bf\u306e\u6e96\u5099\n\nGTEx Portal \u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\nGTEx Portal \u3067\u306f\u3001\u30d2\u30c8\u306e\u69d8\u3005\u306a\u7d44\u7e54\u7531\u6765\u306e\u907a\u4f1d\u5b50\u767a\u73fe\u30c7\u30fc\u30bf\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u6700\u65b0\u306e GTEx Analysis V6p Release \u3067\u306f\u300153 \u306e\u30d2\u30c8\u7d44\u7e54\u3001544 \u306e\u30c9\u30ca\u30fc\u304b\u3089\u3001\n\u5408\u8a08 8555 \u30b5\u30f3\u30d7\u30eb\u306e\u907a\u4f1d\u5b50\u767a\u73fe\u30c7\u30fc\u30bf\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\u30b5\u30a4\u30c8\u306b\u30a2\u30ab\u30a6\u30f3\u30c8\u767b\u9332\u3092\u3059\u308b\u3053\u3068\u3067\u3001\u907a\u4f1d\u5b50\u767a\u73fe\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u30b5\u30a4\u30c8\u306e\u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306e Datasets -> Download \u304b\u3089\u884c\u3051\u308b\u30da\u30fc\u30b8\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30ea\u30f3\u30af\u304c\u3042\u308a\u307e\u3059\u3002\nRPKM (Reads Per Kilobase of transcript per Million mapped reads) \u88dc\u6b63\u3055\u308c\u305f\n\u907a\u4f1d\u5b50\u767a\u73fe\u30c7\u30fc\u30bf\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u4ed8\u3051\u3089\u308c\u3066\u3044\u307e\u3059\u3002\n\nGTEx_Analysis_v6p_RNA-seq_RNA-SeQCv1.1.8_gene_rpkm.gct.gz\n\nGCT (Gene Cluster Text file format) \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u63d0\u4f9b\u3055\u308c\u3066\u304a\u308a\u3001\n\u5217\u304c\u30b5\u30f3\u30d7\u30eb\uff08\u5217\u540d\u304c\u30b5\u30f3\u30d7\u30eb\u540d\uff09\u3001\u884c\u304c\u7279\u5fb4\u91cf\uff08\u884c\u540d\u304c\u907a\u4f1d\u5b50\u540d\uff09\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u5404\u30b5\u30f3\u30d7\u30eb\u306e\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\uff08\u30e9\u30d9\u30eb\u60c5\u5831\uff09\u306f\u3001\nGTEx Analysis V6 Release \u3067\u63d0\u4f9b\u3055\u308c\u3066\u304a\u308a\u3001\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u4ed8\u3051\u3089\u308c\u3066\u3044\u307e\u3059\u3002\n\nGTEx_Data_V6_Annotations_SampleAttributesDS.txt\n\n1\u5217\u76ee\u306b\u30b5\u30f3\u30d7\u30ebID\u304c\u3042\u308a\u30016\u5217\u76ee\u3068 7\u5217\u76ee\u306b\u3069\u306e\u7d44\u7e54\u7531\u6765\u304b\u304c\u8a18\u8ff0\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nGTEx_Analysis_v6p_RNA-seq_RNA-SeQCv1.1.8_gene_rpkm.gct.gz \u3068 GTEx_Data_V6_Annotations_SampleAttributesDS.txt \n\u5404\u30d5\u30a1\u30a4\u30eb\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30ea\u30f3\u30af\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3092\u3057\u307e\u3059\u3002\n\u7d9a\u3044\u3066\u3001.gz \u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30d6\u30eb\u30af\u30ea\u30c3\u30af\u3057\u3066\u89e3\u51cd\u3057\u307e\u3059\u3002\n\nUnix / Linux \u30b3\u30de\u30f3\u30c9\u3067\u30c1\u30a7\u30c3\u30af\nLinux \u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u3001\u907a\u4f1d\u5b50\u767a\u73fe\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u306e\u6700\u521d\u306e 10\u884c\u30013\u5217\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\u5148\u982d 2\u884c\u3088\u308a\u300156238 \u907a\u4f1d\u5b50\u306e\u767a\u73fe\u91cf\uff08\u7279\u5fb4\u91cf\uff09\u30018555 \u30b5\u30f3\u30d7\u30eb\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u307e\u305f\u3001\uff11\u5217\u76ee\u306e\u907a\u4f1d\u5b50\u540d\u304b\u3089 Ensembl Gene ID \u304c\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u767a\u73fe\u91cf\u306e\u30c7\u30fc\u30bf\u81ea\u4f53\u306f\u30014\u884c\u76ee\u306e3\u5217\u76ee\u304b\u3089\u30b9\u30bf\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\ncut -f1,2,3 GTEx_Analysis_v6p_RNA-seq_RNA-SeQCv1.1.8_gene_rpkm.gct | head\n#1.2\n56238   8555\nName    Description GTEX-111CU-1826-SM-5GZYN\nENSG00000223972.4   DDX11L1 0\nENSG00000227232.4   WASH7P  6.50895977020264\nENSG00000243485.2   MIR1302-11  0\nENSG00000237613.2   FAM138A 0\nENSG00000268020.2   OR4G4P  0\nENSG00000240361.1   OR4G11P 0\nENSG00000186092.4   OR4F5   0\n\n\n\u907a\u4f1d\u5b50\u767a\u73fe\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\npython \u306e pandas \u30d1\u30c3\u30b1\u30fc\u30b8 read_csv \u3092\u4f7f\u7528\u3057\u3066\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\u30bf\u30d6\u533a\u5207\u308a\u306a\u306e\u3067\u3001sep='\\t'\u3001\u6700\u521d\u306e2\u884c\u3092 skip \u3057\u305f\u3044\u305f\u3081 skiprows=2 \u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\u6700\u521d\u306b\u8aad\u307f\u8fbc\u307e\u308c\u308b1\u884c\u76ee\u304c\u30d8\u30c3\u30c0\u30fc\uff08\u5217\u540d\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n2\u5217\u76ee\u306e Description \u3092\u9664\u3044\u3066\u30018555 \u30b5\u30f3\u30d7\u30eb\u306e\u30c7\u30fc\u30bf\uff088557\u5217\u76ee\u307e\u3067\uff09\u3092\u8aad\u307f\u8fbc\u307f\u305f\u3044\u305f\u3081\u3001\nusecols = [0] + list(range(2,8557)) \u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\u305d\u3057\u3066\u3001index_clo=0 \u3068\u3057\u3066\u30011\u5217\u76ee\u3092\u884c\u540d\u306b\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\nimport pandas as pd\n\nusecols = [0] + list(range(2,8557))\ndf1 = pd.read_csv('GTEx_Analysis_v6p_RNA-seq_RNA-SeQCv1.1.8_gene_rpkm.gct', sep='\\t', skiprows=2, usecols=usecols, index_col=0)\n\n>>> df1.index\nIndex(['ENSG00000223972.4', 'ENSG00000227232.4', 'ENSG00000243485.2',\n       'ENSG00000237613.2', 'ENSG00000268020.2', 'ENSG00000240361.1',\n       'ENSG00000186092.4', 'ENSG00000238009.2', 'ENSG00000233750.3',\n       'ENSG00000237683.5',\n       ...\n       'ENSG00000198886.2', 'ENSG00000210176.1', 'ENSG00000210184.1',\n       'ENSG00000210191.1', 'ENSG00000198786.2', 'ENSG00000198695.2',\n       'ENSG00000210194.1', 'ENSG00000198727.2', 'ENSG00000210195.2',\n       'ENSG00000210196.2'],\n      dtype='object', name='Name', length=56238)\n>>> df1.columns\nIndex(['GTEX-111CU-1826-SM-5GZYN', 'GTEX-111FC-0226-SM-5N9B8',\n       'GTEX-111VG-2326-SM-5N9BK', 'GTEX-111YS-2426-SM-5GZZQ',\n       'GTEX-1122O-2026-SM-5NQ91', 'GTEX-1128S-2126-SM-5H12U',\n       'GTEX-113IC-0226-SM-5HL5C', 'GTEX-117YX-2226-SM-5EGJJ',\n       'GTEX-11DXW-0326-SM-5H11W', 'GTEX-11DXX-2326-SM-5Q5A2',\n       ...\n       'GTEX-ZVE2-0006-SM-51MRW', 'GTEX-ZVP2-0005-SM-51MRK',\n       'GTEX-ZVT2-0005-SM-57WBW', 'GTEX-ZVT3-0006-SM-51MT9',\n       'GTEX-ZVT4-0006-SM-57WB8', 'GTEX-ZVTK-0006-SM-57WBK',\n       'GTEX-ZVZP-0006-SM-51MSW', 'GTEX-ZVZQ-0006-SM-51MR8',\n       'GTEX-ZXES-0005-SM-57WCB', 'GTEX-ZXG5-0005-SM-57WCN'],\n      dtype='object', length=8555)\n\n\nlog\u5909\u63db\u3001\u5bc6\u5ea6\u5206\u5e03\u306e\u30d7\u30ed\u30c3\u30c8\n\u8aad\u307f\u8fbc\u3093\u3060 \u907a\u4f1d\u5b50\u767a\u73fe\u91cf(RPKM) \u306b pseudo count 1 \u3092\u52a0\u3048\u3066 log2 \u5909\u63db\u3057\u307e\u3059\u3002\nimport numpy as np\n\ndf1pc = df1 + 1\ndf1log = np.log2(df1pc)\n\n\u30e9\u30f3\u30c0\u30e0\u306b 10 \u30b5\u30f3\u30d7\u30eb\u3092\u9078\u3093\u3067\u3001\u907a\u4f1d\u5b50\u767a\u73fe\u91cf\u306e\u5bc6\u5ea6\u5206\u5e03\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u307f\u307e\u3059\u3002\n\u30d7\u30ed\u30c3\u30c8\u306b\u306f\u3001pandas \u306e DataFrame.plot.density \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\nimport matplotlib.pyplot as plt\n\nrandom_cols = np.random.choice(8555, 10)\ndf1log.iloc[:, random_cols].plot.density(fontsize=10)\nplt.savefig('gtex_log_rpkm_density_random10sample.png', dpi=150)\nplt.show()\n\n\n\u30b5\u30f3\u30d7\u30eb\u3054\u3068\u306b\u5206\u5e03\u306b\u304b\u306a\u308a\u9055\u3044\u304c\u3042\u308b\u305f\u3081\u3001\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3068\u306a\u308b\u5206\u5e03\u3092\u6c42\u3081\u3066\nquantile \u88dc\u6b63\u306a\u3069\u3092\u884c\u3063\u305f\u65b9\u304c\u826f\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u306e\u7d44\u7e54\u60c5\u5831\uff08\u30af\u30e9\u30b9\u30e9\u30d9\u30eb\uff09\u306e\u8aad\u307f\u8fbc\u307f\n\u30b5\u30f3\u30d7\u30eb\u306e\u7d44\u7e54\u60c5\u5831\u304c\u8a18\u8f09\u3055\u308c\u305f GTEx_Data_V6_Annotations_SampleAttributesDS.txt \u304b\u3089\u3001\n1\u5217\u76ee\u306e\u30b5\u30f3\u30d7\u30ebID\u30017\u5217\u76ee\u306e\u7d44\u7e54\u60c5\u5831\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\nusecols = [0, 6]\ndf2 = pd.read_csv('GTEx_Data_V6_Annotations_SampleAttributesDS.txt', sep='\\t', usecols=usecols, index_col=0)\n\n\u907a\u4f1d\u5b50\u767a\u73fe\u30c7\u30fc\u30bf\u306e\u884c\u3068\u5217\u3092\u8ee2\u7f6e\u3057\u3066\u3001\u30b5\u30f3\u30d7\u30eb\u306e\u7d44\u7e54\u60c5\u5831\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3068\u7d50\u5408\u3059\u308b\u3053\u3068\u3067\u3001\n\u7d44\u7e54\u60c5\u5831\u3092\u4ed8\u4e0e\u3057\u307e\u3059\u3002pandas \u306e concat \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\ndf = pd.concat([df1log.T, df2], axis=1, join_axes=[df1log.T.index])\n\nPython \u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 4.2.2 (P99) \u3088\u308a\u3001\n\u7d44\u7e54\u60c5\u5831\u304c\u6587\u5b57\u5217\u306e\u307e\u307e\u3060\u3068\u6271\u3044\u3065\u3089\u3044\u305f\u3081\u3001\u6587\u5b57\u5217\u3092\u6574\u6570\u306b\u5909\u63db\u3057\u3066\u7f6e\u304d\u63db\u3048\u307e\u3059\u3002\n\u907a\u4f1d\u5b50\u767a\u73fe\u30c7\u30fc\u30bf\u3092\u8ee2\u7f6e\u3057\u3066\u7d50\u5408\u3057\u305f\u305f\u3081\u3001\u884c\u304c\u30b5\u30f3\u30d7\u30eb\u3001\u5217\u304c\u7279\u5fb4\u91cf\u3068\u7d44\u7e54\u60c5\u5831\u3068\u306a\u308a\u307e\u3059\u3002\nfrom sklearn.preprocessing import LabelEncoder\n\nclass_le = LabelEncoder()\nlabel = class_le.fit_transform(df['SMTSD'].values)\nlabel_r = class_le.inverse_transform(label)\ndf['SMTSD'] = label\n\n\n\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272\nPython \u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 4.3 (P102) \u3088\u308a\u3001\n\u30e9\u30d9\u30eb\u3092\u4ed8\u3051\u3057\u305f\u907a\u4f1d\u5b50\u767a\u73fe\u30c7\u30fc\u30bf\u3092\u7279\u5fb4\u91cf\uff08X\uff09\u3068\u30af\u30e9\u30b9\u30e9\u30d9\u30eb\uff08y\uff09\u306b\u5206\u5272\u3057\u307e\u3059\u3002\nsmtsd_index = len(df.columns) - 1\nX, y = df.iloc[:, :smtsd_index].values, df.iloc[:, smtsd_index].values\n\n\u7d9a\u3044\u3066\u3001\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272\u3057\u307e\u3059\u3002\nfrom sklearn.cross_validation import train_test_split\n\nX_train, X_test, y_train, y_test = \\\n   train_test_split(X, y, test_size=0.3, random_state=0)\n\n\n\u5b66\u7fd2\u3068\u63a8\u8ad6\nk\u8fd1\u508d\u6cd5 \u306b\u3088\u308b\u5b66\u7fd2\u3068\u63a8\u8ad6\u3092\u884c\u3063\u3066\u307f\u307e\u3059\u3002\nsklearn.neighbors.KNeighborsClassifier \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u305d\u308d\u305d\u308d\u4e0d\u8981\u306a\u5909\u6570\u3092\u524a\u9664\u3057\u3066\u3001\u30e1\u30e2\u30ea\u306b\u4f59\u88d5\u3092\u6301\u305f\u305b\u307e\u3059\u3002\ndel df\ndel df1\ndel df1pc\ndel df1log\ndel df2\n\nk = 3\u30014\u4e26\u5217\u3067\u5b9f\u884c\u3057\u307e\u3059\u30024GHz Intel Core i7 \u3067 10\u5206\u307b\u3069\u8a08\u7b97\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3057\u305f\u3002\nfrom sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors=3, n_jobs=4)\nknn.fit(X_train, y_train)\nprint('Training accuracy: ', knn.score(X_train, y_train))\nprint('Test accuracy: ', knn.score(X_test, y_test))\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u306e\u6b63\u89e3\u7387\u306f\u3001\u7d0491% \u3068\u306a\u308a\u307e\u3057\u305f\u3002\n>>> print('Training accuracy: ', knn.score(X_train, y_train))\nTraining accuracy: 0.95641282565130259\n>>> print('Test accuracy: ', knn.score(X_test, y_test))\nTest accuracy: 0.90962212699649392\n\n\n\u907a\u4f1d\u5b50\u767a\u73fe\u91cf\u306b\u3088\u308b\u7279\u5fb4\u91cf\u306e\u9078\u629e\n\u7279\u5fb4\u91cf\u306e\u9078\u629e\u3092\u884c\u3044\u307e\u3059\u3002\u907a\u4f1d\u5b50\u767a\u73fe\u91cf\u306e\u5408\u8a08\u304c 500 \u3092\u8d85\u3048\u306a\u3044\u907a\u4f1d\u5b50\u306f\u53d6\u308a\u9664\u3044\u3066\u3057\u307e\u3044\u307e\u3059\u3002\nPython \u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 4.5.2 (P113) \u306e\u9010\u6b21\uff08\u3061\u304f\u3058\uff09\u7279\u5fb4\u9078\u629e\u3084 \nscikit-learn \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 \u3092\u53c2\u8003\u306b\u3001\u7279\u5fb4\u9078\u629e\u3059\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\nfrom sklearn.base import TransformerMixin\nimport numpy as np\n\nclass GexSumFS(TransformerMixin):\n    \"\"\"\n    Feature selection based on the sum of gene expression values\n    \"\"\"\n\n    def __init__(self, sum):\n        self.sum = sum\n\n    def fit(self, X, y=None):\n        self.indices_ = np.where(np.sum(X, axis=0) > self.sum)[0]\n        return self\n\n    def transform(self, X, y=None):\n        return X[:, self.indices_]\n\n\u4e0a\u8a18\u306e\u30af\u30e9\u30b9\u3092\u5229\u7528\u3057\u3066\u3001\u767a\u73fe\u91cf\u306e\u5408\u8a08\u3067\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3092\u3057\u307e\u3059\u3002\nsumfs = GexSumFS(sum = 500)\nX_train_sumfs = sumfs.fit_transform(X_train)\nX_test_sumfs = sumfs.transform(X_test)\n\n\u907a\u4f1d\u5b50\u6570\uff08\u7279\u5fb4\u91cf\u6570\uff09\u304c 27754 \u307e\u3067\u6e1b\u5c11\u3057\u307e\u3057\u305f.\n>>> X_train_sumfs.shape[1]\n27754\n\n\u7279\u5fb4\u9078\u629e\u3057\u305f\u30c7\u30fc\u30bf\u3067\u5b66\u7fd2\uff06\u63a8\u8ad6\u3057\u3066\u307f\u307e\u3059\u3002\nknn.fit(X_train_sumfs, y_train)\nprint('Training accuracy: ', knn.score(X_train_sumfs, y_train))\nprint('Test accuracy: ', knn.score(X_test_sumfs, y_test))\n\n\u7279\u5fb4\u9078\u629e\u524d\u3068\u307b\u307c\u540c\u69d8\u3001\u7d0491% \u306e\u6b63\u89e3\u7387\u3068\u306a\u308a\u307e\u3057\u305f\u3002\n\u308f\u305a\u304b\u306b\u6b63\u89e3\u7387\u304c\u6e1b\u5c11\u3057\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\u3001\n\u7279\u5fb4\u9078\u629e\u306b\u3088\u308a\u3001\u8a08\u7b97\u6642\u9593\u304c\u5c11\u3057\u6e1b\u5c11\u3059\u308b\u3068\u3044\u3046\u30e1\u30ea\u30c3\u30c8\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n>>> print('Training accuracy: ', knn.score(X_train_sumfs, y_train))\nTraining accuracy:  0.955577822311\n>>> print('Test accuracy: ', knn.score(X_test_sumfs, y_test))\nTest accuracy:  0.908843007402\n\n\u907a\u4f1d\u5b50\u767a\u73fe\u91cf\u3092\u6a19\u6e96\u5316\uff08\u5e73\u57470\u3001\u5206\u65631\uff09\u3057\u305f\u5834\u5408\u3060\u3068\u3001\u767a\u73fe\u91cf\u306e\u4f4e\u3044\u907a\u4f1d\u5b50\u306f\u30ce\u30a4\u30ba\u3068\u306a\u308a\u3084\u3059\u3044\u305f\u3081\u3001\n\u767a\u73fe\u91cf\u306b\u3088\u308b\u7279\u5fb4\u9078\u629e\u304c\u3088\u308a\u52b9\u679c\u7684\u306b\u306a\u308b\u306f\u305a\u3067\u3059\u3002\n\nQuantile normalization\n\u5bc6\u5ea6\u5206\u5e03\u306e\u30d7\u30ed\u30c3\u30c8\u304b\u3089\u3001\u30b5\u30f3\u30d7\u30eb\u3054\u3068\u306b\u767a\u73fe\u91cf\u306e\u5206\u5e03\u304c\u304b\u306a\u308a\u7570\u306a\u3063\u3066\u3044\u305f\u305f\u3081\u3001\nquantile \u88dc\u6b63 \u3092\u884c\u3063\u3066\u304b\u3089\u5b66\u7fd2&\u63a8\u8ad6\u3092\u3057\u3066\u307f\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b quantile \u88dc\u6b63\u3092\u884c\u3046\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\nclass QuantileNormalization(TransformerMixin):\n    \"\"\"\n    Quantile normalization\n    \"\"\"\n\n    def __init__(self):\n        pass\n\n    def fit(self, X, y=None):\n        self.ref_dist_ = np.zeros(X.shape[1])\n        X_rank = pd.DataFrame(X).rank(axis=1, method='min').astype(int)\n        for i in range(X.shape[1]):\n            indices = np.where(X_rank == i+1)\n            if len(indices[0]) > 0:\n                self.ref_dist_[i] = np.mean(X[indices])\n            else:\n                self.ref_dist_[i] = self.ref_dist_[i-1]\n        return self\n\n    def transform(self, X, y=None):\n        X_norm = pd.DataFrame(X).rank(axis=1, method='min').values\n        for i in range(X.shape[1]):\n            X_norm[X_norm == i+1] = self.ref_dist_[i]\n        return X_norm\n\n\u4e0a\u8a18\u306e\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3057\u3066 quantile \u88dc\u6b63\u3092\u884c\u3044\u307e\u3059\u3002\n\u5b9f\u88c5\u65b9\u6cd5\u304c\u60aa\u304b\u3063\u305f\u305f\u3081\u304b\u3001\u8a08\u7b97\u306b\u4e38\u4e00\u65e5\u304b\u304b\u308a\u307e\u3057\u305f\u3002\nq_norm = QuantileNormalization()\nX_train_sumfs_qnorm = q_norm.fit_transform(X_train_sumfs)\nX_test_sumfs_qnorm = q_norm.transform(X_test_sumfs)\n\n\u88dc\u6b63\u5f8c\u306e\u907a\u4f1d\u5b50\u767a\u73fe\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e\u5bc6\u5ea6\u5206\u5e03\u3092\u898b\u3066\u3001\u5bc6\u5ea6\u5206\u5e03\u304c\u63c3\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\nrandom_rows = np.random.choice(range(X_train_sumfs_qnorm.shape[0]), 10)\npd.DataFrame(X_train_sumfs_qnorm[random_rows, :]).T.plot.density(fontsize=10)\nplt.savefig('gtex_qnorm_density_random10sample.png', dpi=150)\nplt.show()\n\n\nquantile \u88dc\u6b63\u3092\u3057\u305f\u30c7\u30fc\u30bf\u3067\u5b66\u7fd2\uff06\u63a8\u8ad6\u3057\u3066\u307f\u307e\u3059\u3002\nknn.fit(X_train_sumfs_qnorm, y_train)\nprint('Training accuracy: ', knn.score(X_train_sumfs_qnorm, y_train))\nprint('Test accuracy: ', knn.score(X_test_sumfs_qnorm, y_test))\n\n\u63a8\u8ad6\u306e\u6b63\u89e3\u7387\u304c\u30010.6% \u307b\u3069\u4e0a\u6607\u3057\u307e\u3057\u305f\u3002\n>>> print('Training accuracy: ', knn.score(X_train_sumfs_qnorm, y_train))\nTraining accuracy:  0.956078824315\n>>> print('Test accuracy: ', knn.score(X_test_sumfs_qnorm, y_test))\nTest accuracy:  0.915855083755\n\n\n\u6a19\u6e96\u5316\nQuantile \u88dc\u6b63\u306b\u3088\u308a\u5206\u5e03\u3092\u63c3\u3048\u305f\u30c7\u30fc\u30bf\u306e\u6a19\u6e96\u5316\u3092\u884c\u3063\u3066\u304b\u3089\u5b66\u7fd2\uff06\u63a8\u8ad6\u3092\u884c\u3063\u3066\u307f\u307e\u3059\u3002\nPython \u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 4.4 \u7279\u5fb4\u91cf\u306e\u5c3a\u5ea6\u3092\u63c3\u3048\u308b (P106) \u3092\u53c2\u8003\u306b\u3057\u307e\u3059\u3002\nfrom sklearn.preprocessing import StandardScaler\n\nstdsc = StandardScaler()\nX_train_sumfs_qnorm_std = stdsc.fit_transform(X_train_sumfs_qnorm)\nX_test_sumfs_qnorm_std = stdsc.transform(X_test_sumfs_qnorm)\n\nknn.fit(X_train_sumfs_qnorm_std, y_train)\nprint('Training accuracy: ', knn.score(X_train_sumfs_qnorm_std, y_train))\nprint('Test accuracy: ', knn.score(X_test_sumfs_qnorm_std, y_test))\n\n>>> print('Training accuracy: ', knn.score(X_train_sumfs_qnorm_std, y_train))\nTraining accuracy:  0.951736806947\n>>> print('Test accuracy: ', knn.score(X_test_sumfs_qnorm_std, y_test))\nTest accuracy:  0.906505648617\n\n\u4eca\u56de\u306e\u5834\u5408\u3001\u6a19\u6e96\u5316\u306f\u3001\u6b63\u89e3\u7387\u3092\u4e0b\u3052\u3066\u3057\u307e\u3046\u3088\u3046\u3067\u3057\u305f\u3002\n\u975e\u5e38\u306b\u5c0f\u3055\u3044\u5206\u6563\u3092\u6301\u3064\u907a\u4f1d\u5b50\u3092\u6a19\u6e96\u5316\u3092\u3059\u308b\u3068\u3001\u5927\u304d\u306a\u5024\u3068\u306a\u3063\u3066\u3057\u307e\u3046\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\n\u6b63\u89e3\u7387\u306e\u4f4e\u4e0b\u306f\u3001\u3053\u306e\u305f\u3081\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u6b63\u898f\u5316\n\u6a19\u6e96\u5316\u3067\u306f\u306a\u304f\u3001\u6b63\u898f\u5316\uff080\u301c1 \u306b\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\uff09\u3092\u884c\u3063\u3066\u304b\u3089\u5b66\u7fd2\uff06\u63a8\u8ad6\u3092\u884c\u3063\u3066\u307f\u307e\u3059\u3002\nPython \u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 4.4 \u7279\u5fb4\u91cf\u306e\u5c3a\u5ea6\u3092\u63c3\u3048\u308b (P105) \u3092\u53c2\u8003\u306b\u3057\u307e\u3059\u3002\nfrom sklearn.preprocessing import MinMaxScaler\n\nmms = MinMaxScaler()\nX_train_sumfs_qnorm_norm = mms.fit_transform(X_train_sumfs_qnorm)\nX_test_sumfs_qnorm_norm = mms.transform(X_test_sumfs_qnorm)\n\nknn.fit(X_train_sumfs_qnorm_norm, y_train)\nprint('Training accuracy: ', knn.score(X_train_sumfs_qnorm_norm, y_train))\nprint('Test accuracy: ', knn.score(X_test_sumfs_qnorm_norm, y_test))\n\n>>> print('Training accuracy: ', knn.score(X_train_sumfs_qnorm_norm, y_train))\nTraining accuracy:  0.952571810287\n>>> print('Test accuracy: ', knn.score(X_test_sumfs_qnorm_norm, y_test))\nTest accuracy:  0.910011686794\n\n\u4eca\u56de\u306e\u5834\u5408\u3001\u6b63\u898f\u5316\u3082\u6b63\u89e3\u7387\u3092\u4e0b\u3052\u3066\u3057\u307e\u3046\u3088\u3046\u3067\u3057\u305f\u3002\n\u6b63\u898f\u5316\u306b\u3088\u308a\u3001\u5909\u52d5\u306e\u5c11\u306a\u3044\u907a\u4f1d\u5b50\u306e\u5f71\u97ff\u304c\u5927\u304d\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u305f\u3081\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u5206\u6563\u306e\u5927\u304d\u3055\u306b\u3088\u308b\u7279\u5fb4\u9078\u629e\n\u5206\u6563\u306e\u5c11\u306a\u3044\u907a\u4f1d\u5b50\u3092\u4e8b\u524d\u306b\u53d6\u308a\u9664\u304f\u3053\u3068\u3067\u3001\u6a19\u6e96\u5316\u304c\u52b9\u679c\u7684\u306b\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5206\u6563\u306e\u5c0f\u3055\u3044\u7279\u5fb4\u91cf\u3092\u4e57\u308a\u9664\u304f\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\nfrom sklearn.base import TransformerMixin\nimport numpy as np\n\nclass GexVarFS(TransformerMixin):\n    \"\"\"\n    Feature selection based on the variance of gene expression values\n    \"\"\"\n\n    def __init__(self, var):\n        self.var = var\n\n    def fit(self, X, y=None):\n        self.indices_ = np.where(np.var(X, axis=0) > self.var)[0]\n        return self\n\n    def transform(self, X, y=None):\n        return X[:, self.indices_]\n\n\u4e0a\u8a18\u306e\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3057\u3066\u3001\u7279\u5fb4\u9078\u629e\uff08\u5206\u65631 \u4ee5\u4e0b\u306f\u524a\u9664\uff09\u3092\u3057\u305f\u5f8c\u306b\u5b66\u7fd2\uff06\u63a8\u8ad6\u3057\u3066\u307f\u307e\u3059\u3002\nvarfs = GexVarFS(var = 1)\nX_train_sumfs_qnorm_varfs = varfs.fit_transform(X_train_sumfs_qnorm)\nX_test_sumfs_qnorm_varfs = varfs.transform(X_test_sumfs_qnorm)\n\nknn.fit(X_train_sumfs_qnorm_varfs, y_train)\nprint('Training accuracy: ', knn.score(X_train_sumfs_qnorm_varfs, y_train))\nprint('Test accuracy: ', knn.score(X_test_sumfs_qnorm_varfs, y_test))\n\n\u907a\u4f1d\u5b50\u6570\u304c\u6e1b\u308a\u3001\u8a08\u7b97\u6642\u9593\u306f\u5927\u304d\u304f\u6e1b\u5c11\u3057\u307e\u3057\u305f\u304c\u3001\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u7279\u5fb4\u9078\u629e\u306b\u3088\u308a\u5c11\u3057\u3060\u3051\u6b63\u89e3\u7387\u304c\u4f4e\u4e0b\u3057\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n>>> print('Training accuracy: ', knn.score(X_train_sumfs_qnorm_varfs, y_train))\nTraining accuracy:  0.957915831663\n>>> print('Test accuracy: ', knn.score(X_test_sumfs_qnorm_varfs, y_test))\nTest accuracy:  0.913128165173\n\n\u7d9a\u3044\u3066\u3001\u5206\u6563\u306e\u5927\u304d\u3055\u3067\u7279\u5fb4\u9078\u629e\u3057\u305f\u30c7\u30fc\u30bf\u306e\u6a19\u6e96\u5316\u3092\u884c\u3044\u3001\u5b66\u7fd2\uff06\u63a8\u8ad6\u3057\u307e\u3059\u3002\nX_train_sumfs_qnorm_varfs_std = stdsc.fit_transform(X_train_sumfs_qnorm_varfs)\nX_test_sumfs_qnorm_varfs_std = stdsc.transform(X_test_sumfs_qnorm_varfs)\n\nknn.fit(X_train_sumfs_qnorm_varfs_std, y_train)\nprint('Training accuracy: ', knn.score(X_train_sumfs_qnorm_varfs_std, y_train))\nprint('Test accuracy: ', knn.score(X_test_sumfs_qnorm_varfs_std, y_test))\n\n\u4eca\u56de\u306e\u5834\u5408\u306f\u3001\u6a19\u6e96\u5316\u306b\u3088\u308a\u3001\u6b63\u89e3\u7387\u304c\u4e0a\u6607\u3057\u307e\u3057\u305f\u3002\n\u307e\u305f\u3001\u7279\u5fb4\u9078\u629e\u524d\u3068\u6bd4\u3079\u3066\u3082\u3001\u7279\u5fb4\u9078\u629e\uff06\u6a19\u6e96\u5316\u306b\u3088\u3063\u3066\u3001\u82e5\u5e72\u6b63\u89e3\u7387\u304c\u4e0a\u6607\u3057\u307e\u3057\u305f\u3002\n>>> print('Training accuracy: ', knn.score(X_train_sumfs_qnorm_varfs_std, y_train))\nTraining accuracy:  0.958750835003\n>>> print('Test accuracy: ', knn.score(X_test_sumfs_qnorm_varfs_std, y_test))\nTest accuracy:  0.918971562135\n\n\n\u307e\u3068\u3081\n\u6700\u7d42\u7684\u306b\u63a8\u8ad6\u306e\u6b63\u89e3\u7387\u306f \u7d0492% \u3068\u306a\u308a\u3001log\u5909\u63db\u3057\u305f RPKM\u5024\u3092\u305d\u306e\u307e\u307e\u4f7f\u7528\u3057\u305f\u5834\u5408\u306b\u6bd4\u3079\u3066 \n1% \u307b\u3069\u6539\u5584\u3055\u308c\u307e\u3057\u305f\u3002\u4e3b\u6210\u5206\u5206\u6790\u306b\u3088\u308b\u6b21\u5143\u524a\u6e1b\u3084\u3001\n\u6a5f\u68b0\u5b66\u7fd2\u306e\u624b\u6cd5\u3092 SVM \u306a\u3069\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u3067\u3001\u3088\u308a\u826f\u3044\u7d50\u679c\u304c\u5f97\u3089\u308c\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u6700\u5f8c\u306b\u7d44\u7e54\u3054\u3068\u306e\u6b63\u89e3\u7387\u3092\u8abf\u3079\u3066\u307f\u307e\u3059\u3002\ny_pred = knn.predict(X_test_sumfs_qnorm_varfs_std)\ninv_dict = dict(zip(y, class_le.inverse_transform(y)))\nfor i in np.unique(label):\n    accuracy_score = np.sum((y_pred[y_test == i] == i).astype(int)) / len(y_pred[y_test == i])\n    print(inv_dict[i] + ': ' + str(accuracy_score))\n\nAdipose - Subcutaneous: 1.0\nAdipose - Visceral (Omentum): 0.984126984127\nAdrenal Gland: 1.0\nArtery - Aorta: 0.985294117647\nArtery - Coronary: 0.911764705882\nArtery - Tibial: 0.988636363636\nBladder: 1.0\nBrain - Amygdala: 0.95\nBrain - Anterior cingulate cortex (BA24): 0.76\nBrain - Caudate (basal ganglia): 0.709677419355\nBrain - Cerebellar Hemisphere: 0.838709677419\nBrain - Cerebellum: 0.883720930233\nBrain - Cortex: 0.864864864865\nBrain - Frontal Cortex (BA9): 0.53125\nBrain - Hippocampus: 0.8\nBrain - Hypothalamus: 0.964285714286\nBrain - Nucleus accumbens (basal ganglia): 0.705882352941\nBrain - Putamen (basal ganglia): 0.344827586207\nBrain - Spinal cord (cervical c-1): 0.928571428571\nBrain - Substantia nigra: 0.666666666667\nBreast - Mammary Tissue: 0.823529411765\nCells - EBV-transformed lymphocytes: 1.0\nCells - Transformed fibroblasts: 1.0\nCervix - Ectocervix: 1.0\nCervix - Endocervix: 0.0\nColon - Sigmoid: 0.725\nColon - Transverse: 0.796875\nEsophagus - Gastroesophageal Junction: 0.509803921569\nEsophagus - Mucosa: 1.0\nEsophagus - Muscularis: 0.876543209877\nFallopian Tube: 0.5\nHeart - Atrial Appendage: 0.98275862069\nHeart - Left Ventricle: 1.0\nKidney - Cortex: 1.0\nLiver: 1.0\nLung: 1.0\nMinor Salivary Gland: 1.0\nMuscle - Skeletal: 1.0\nNerve - Tibial: 1.0\nOvary: 1.0\nPancreas: 1.0\nPituitary: 1.0\nProstate: 1.0\nSkin - Not Sun Exposed (Suprapubic): 0.807692307692\nSkin - Sun Exposed (Lower leg): 0.925619834711\nSmall Intestine - Terminal Ileum: 0.96\nSpleen: 1.0\nStomach: 0.903225806452\nTestis: 1.0\nThyroid: 1.0\nUterus: 0.95\nVagina: 0.909090909091\nWhole Blood: 1.0\n\n\n\u30b3\u30fc\u30c9\u307e\u3068\u3081\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.cross_validation import train_test_split\nfrom sklearn.base import TransformerMixin\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\n\n### read gene expression matrix\nusecols = [0] + list(range(2,8557))\ndf1 = pd.read_csv('GTEx_Analysis_v6p_RNA-seq_RNA-SeQCv1.1.8_gene_rpkm.gct', sep='\\t', skiprows=2, usecols=usecols, index_col=0)\ndf1pc = df1 + 1\ndf1log = np.log2(df1pc)\n\n### plot gene expression profiles\nrandom_cols = np.random.choice(8555, 10)\ndf1log.iloc[:, random_cols].plot.density(fontsize=10)\nplt.savefig('gtex_log_rpkm_density_random10sample.png', dpi=150)\n#plt.show()\n\n### read class labels\nusecols = [0, 6]\ndf2 = pd.read_csv('GTEx_Data_V6_Annotations_SampleAttributesDS.txt', sep='\\t', usecols=usecols, index_col=0)\n\n### attach class labels\ndf = pd.concat([df1log.T, df2], axis=1, join_axes=[df1log.T.index])\n\n### convert string labels\nclass_le = LabelEncoder()\nlabel = class_le.fit_transform(df['SMTSD'].values)\nlabel_r = class_le.inverse_transform(label)\ndf['SMTSD'] = label\n\n### split into training and test data\nsmtsd_index = len(df.columns) - 1\nX, y = df.iloc[:, :smtsd_index].values, df.iloc[:, smtsd_index].values\nX_train, X_test, y_train, y_test = \\\n   train_test_split(X, y, test_size=0.3, random_state=0)\n\n### save memory usage\ndel df\ndel df1\ndel df1pc\ndel df1log\ndel df2\n\n### feature selection based on gene expression values\nclass GexSumFS(TransformerMixin):\n    \"\"\"\n    Feature selection based on the sum of gene expression values\n    \"\"\"\n\n    def __init__(self, sum):\n        self.sum = sum\n\n    def fit(self, X, y=None):\n        self.indices_ = np.where(np.sum(X, axis=0) > self.sum)[0]\n        return self\n\n    def transform(self, X, y=None):\n        return X[:, self.indices_]\n\nsumfs = GexSumFS(sum = 500)\nX_train_sumfs = sumfs.fit_transform(X_train)\nX_test_sumfs = sumfs.transform(X_test)\n\n### quantile normalization\nclass QuantileNormalization(TransformerMixin):\n    \"\"\"\n    Quantile normalization\n    \"\"\"\n\n    def __init__(self):\n        pass\n\n    def fit(self, X, y=None):\n        self.ref_dist_ = np.zeros(X.shape[1])\n        X_rank = pd.DataFrame(X).rank(axis=1, method='min').astype(int)\n        for i in range(X.shape[1]):\n            indices = np.where(X_rank == i+1)\n            if len(indices[0]) > 0:\n                self.ref_dist_[i] = np.mean(X[indices])\n            else:\n                self.ref_dist_[i] = self.ref_dist_[i-1]\n        return self\n\n    def transform(self, X, y=None):\n        X_norm = pd.DataFrame(X).rank(axis=1, method='min').values\n        for i in range(X.shape[1]):\n            X_norm[X_norm == i+1] = self.ref_dist_[i]\n        return X_norm\n\nq_norm = QuantileNormalization()\nX_train_sumfs_qnorm = q_norm.fit_transform(X_train_sumfs)\nX_test_sumfs_qnorm = q_norm.transform(X_test_sumfs)\n\nrandom_rows = np.random.choice(range(X_train_sumfs_qnorm.shape[0]), 10)\npd.DataFrame(X_train_sumfs_qnorm[random_rows, :]).T.plot.density(fontsize=10)\nplt.savefig('gtex_qnorm_density_random10sample.png', dpi=150)\n#plt.show()\n\n### feature selection based on gene expression variance\nfrom sklearn.base import TransformerMixin\nimport numpy as np\n\nclass GexVarFS(TransformerMixin):\n    \"\"\"\n    Feature selection based on the variance of gene expression values\n    \"\"\"\n\n    def __init__(self, var):\n        self.var = var\n\n    def fit(self, X, y=None):\n        self.indices_ = np.where(np.var(X, axis=0) > self.var)[0]\n        return self\n\n    def transform(self, X, y=None):\n        return X[:, self.indices_]\n\nvarfs = GexVarFS(var = 1)\nX_train_sumfs_qnorm_varfs = varfs.fit_transform(X_train_sumfs_qnorm)\nX_test_sumfs_qnorm_varfs = varfs.transform(X_test_sumfs_qnorm)\n\n### standardization\nstdsc = StandardScaler()\nX_train_sumfs_qnorm_varfs_std = stdsc.fit_transform(X_train_sumfs_qnorm_varfs)\nX_test_sumfs_qnorm_varfs_std = stdsc.transform(X_test_sumfs_qnorm_varfs)\n\n### learning and prediction\nknn = KNeighborsClassifier(n_neighbors=3, n_jobs=4)\nknn.fit(X_train_sumfs_qnorm_varfs_std, y_train)\nprint('Training accuracy: ', knn.score(X_train_sumfs_qnorm_varfs_std, y_train))\nprint('Test accuracy: ', knn.score(X_test_sumfs_qnorm_varfs_std, y_test))\n\n### accuracy score for each class\ny_pred = knn.predict(X_test_sumfs_qnorm_varfs_std)\ninv_dict = dict(zip(y, class_le.inverse_transform(y)))\nfor i in np.unique(label):\n    accuracy_score = np.sum((y_pred[y_test == i] == i).astype(int)) / len(y_pred[y_test == i])\n    print(inv_dict[i] + ': ' + str(accuracy_score))\n\n# \u907a\u4f1d\u5b50\u767a\u73fe\u30c7\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u305f\u6a5f\u68b0\u5b66\u7fd2\n(2017.02.02 OSX El Capitan)\n\n\u69d8\u3005\u306a\u30d2\u30c8\u7d44\u7e54\u304b\u3089\u53d6\u3089\u308c\u305f\u907a\u4f1d\u5b50\u767a\u73fe\u30c7\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u3066\u3001\u907a\u4f1d\u5b50\u767a\u73fe\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u3001\n\u5404\u3005\u306e\u30b5\u30f3\u30d7\u30eb\u304c\u3001\u3069\u306e\u30d2\u30c8\u7d44\u7e54\u7531\u6765\u3067\u3042\u308b\u304b\u3092\u5b66\u7fd2\uff06\u63a8\u8ad6\u3057\u3066\u307f\u307e\u3059\u3002\n[Python \u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0](http://book.impress.co.jp/books/1115101122) \u3092\u53c2\u8003\u306b\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n## \u6a5f\u68b0\u5b66\u7fd2\u7528\u907a\u4f1d\u5b50\u767a\u73fe\u30c7\u30fc\u30bf\u306e\u6e96\u5099\n### GTEx Portal \u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\n\n[GTEx Portal](http://www.gtexportal.org/home/) \u3067\u306f\u3001\u30d2\u30c8\u306e\u69d8\u3005\u306a\u7d44\u7e54\u7531\u6765\u306e\u907a\u4f1d\u5b50\u767a\u73fe\u30c7\u30fc\u30bf\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u6700\u65b0\u306e GTEx Analysis V6p Release \u3067\u306f\u300153 \u306e\u30d2\u30c8\u7d44\u7e54\u3001544 \u306e\u30c9\u30ca\u30fc\u304b\u3089\u3001\n\u5408\u8a08 8555 \u30b5\u30f3\u30d7\u30eb\u306e\u907a\u4f1d\u5b50\u767a\u73fe\u30c7\u30fc\u30bf\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\n\u30b5\u30a4\u30c8\u306b\u30a2\u30ab\u30a6\u30f3\u30c8\u767b\u9332\u3092\u3059\u308b\u3053\u3068\u3067\u3001\u907a\u4f1d\u5b50\u767a\u73fe\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u30b5\u30a4\u30c8\u306e\u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306e `Datasets` -> `Download` \u304b\u3089\u884c\u3051\u308b\u30da\u30fc\u30b8\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30ea\u30f3\u30af\u304c\u3042\u308a\u307e\u3059\u3002\n\nRPKM (Reads Per Kilobase of transcript per Million mapped reads) \u88dc\u6b63\u3055\u308c\u305f\n\u907a\u4f1d\u5b50\u767a\u73fe\u30c7\u30fc\u30bf\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u4ed8\u3051\u3089\u308c\u3066\u3044\u307e\u3059\u3002\n\n- GTEx_Analysis_v6p_RNA-seq_RNA-SeQCv1.1.8_gene_rpkm.gct.gz\n\n[GCT (Gene Cluster Text file format)](http://software.broadinstitute.org/cancer/software/gsea/wiki/index.php/Data_formats) \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u63d0\u4f9b\u3055\u308c\u3066\u304a\u308a\u3001\n\u5217\u304c\u30b5\u30f3\u30d7\u30eb\uff08\u5217\u540d\u304c\u30b5\u30f3\u30d7\u30eb\u540d\uff09\u3001\u884c\u304c\u7279\u5fb4\u91cf\uff08\u884c\u540d\u304c\u907a\u4f1d\u5b50\u540d\uff09\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u5404\u30b5\u30f3\u30d7\u30eb\u306e\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\uff08\u30e9\u30d9\u30eb\u60c5\u5831\uff09\u306f\u3001\nGTEx Analysis V6 Release \u3067\u63d0\u4f9b\u3055\u308c\u3066\u304a\u308a\u3001\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u4ed8\u3051\u3089\u308c\u3066\u3044\u307e\u3059\u3002\n\n- GTEx_Data_V6_Annotations_SampleAttributesDS.txt\n\n1\u5217\u76ee\u306b\u30b5\u30f3\u30d7\u30ebID\u304c\u3042\u308a\u30016\u5217\u76ee\u3068 7\u5217\u76ee\u306b\u3069\u306e\u7d44\u7e54\u7531\u6765\u304b\u304c\u8a18\u8ff0\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nGTEx_Analysis_v6p_RNA-seq_RNA-SeQCv1.1.8_gene_rpkm.gct.gz \u3068 GTEx_Data_V6_Annotations_SampleAttributesDS.txt \n\u5404\u30d5\u30a1\u30a4\u30eb\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30ea\u30f3\u30af\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3092\u3057\u307e\u3059\u3002\n\u7d9a\u3044\u3066\u3001.gz \u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30d6\u30eb\u30af\u30ea\u30c3\u30af\u3057\u3066\u89e3\u51cd\u3057\u307e\u3059\u3002\n\n### Unix / Linux \u30b3\u30de\u30f3\u30c9\u3067\u30c1\u30a7\u30c3\u30af\n\nLinux \u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u3001\u907a\u4f1d\u5b50\u767a\u73fe\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u306e\u6700\u521d\u306e 10\u884c\u30013\u5217\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\u5148\u982d 2\u884c\u3088\u308a\u300156238 \u907a\u4f1d\u5b50\u306e\u767a\u73fe\u91cf\uff08\u7279\u5fb4\u91cf\uff09\u30018555 \u30b5\u30f3\u30d7\u30eb\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u307e\u305f\u3001\uff11\u5217\u76ee\u306e\u907a\u4f1d\u5b50\u540d\u304b\u3089 [Ensembl Gene ID](http://asia.ensembl.org/info/genome/genebuild/genome_annotation.html) \u304c\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u767a\u73fe\u91cf\u306e\u30c7\u30fc\u30bf\u81ea\u4f53\u306f\u30014\u884c\u76ee\u306e3\u5217\u76ee\u304b\u3089\u30b9\u30bf\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\n```\ncut -f1,2,3 GTEx_Analysis_v6p_RNA-seq_RNA-SeQCv1.1.8_gene_rpkm.gct | head\n#1.2\n56238\t8555\nName\tDescription\tGTEX-111CU-1826-SM-5GZYN\nENSG00000223972.4\tDDX11L1\t0\nENSG00000227232.4\tWASH7P\t6.50895977020264\nENSG00000243485.2\tMIR1302-11\t0\nENSG00000237613.2\tFAM138A\t0\nENSG00000268020.2\tOR4G4P\t0\nENSG00000240361.1\tOR4G11P\t0\nENSG00000186092.4\tOR4F5\t0\n```\n\n### \u907a\u4f1d\u5b50\u767a\u73fe\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\n\npython \u306e [pandas \u30d1\u30c3\u30b1\u30fc\u30b8 read_csv](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html) \u3092\u4f7f\u7528\u3057\u3066\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\n\u30bf\u30d6\u533a\u5207\u308a\u306a\u306e\u3067\u3001`sep='\\t'`\u3001\u6700\u521d\u306e2\u884c\u3092 skip \u3057\u305f\u3044\u305f\u3081 `skiprows=2` \u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\u6700\u521d\u306b\u8aad\u307f\u8fbc\u307e\u308c\u308b1\u884c\u76ee\u304c\u30d8\u30c3\u30c0\u30fc\uff08\u5217\u540d\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n\n2\u5217\u76ee\u306e Description \u3092\u9664\u3044\u3066\u30018555 \u30b5\u30f3\u30d7\u30eb\u306e\u30c7\u30fc\u30bf\uff088557\u5217\u76ee\u307e\u3067\uff09\u3092\u8aad\u307f\u8fbc\u307f\u305f\u3044\u305f\u3081\u3001\n`usecols = [0] + list(range(2,8557))` \u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\u305d\u3057\u3066\u3001`index_clo=0` \u3068\u3057\u3066\u30011\u5217\u76ee\u3092\u884c\u540d\u306b\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n```py\nimport pandas as pd\n\nusecols = [0] + list(range(2,8557))\ndf1 = pd.read_csv('GTEx_Analysis_v6p_RNA-seq_RNA-SeQCv1.1.8_gene_rpkm.gct', sep='\\t', skiprows=2, usecols=usecols, index_col=0)\n```\n\n```\n>>> df1.index\nIndex(['ENSG00000223972.4', 'ENSG00000227232.4', 'ENSG00000243485.2',\n       'ENSG00000237613.2', 'ENSG00000268020.2', 'ENSG00000240361.1',\n       'ENSG00000186092.4', 'ENSG00000238009.2', 'ENSG00000233750.3',\n       'ENSG00000237683.5',\n       ...\n       'ENSG00000198886.2', 'ENSG00000210176.1', 'ENSG00000210184.1',\n       'ENSG00000210191.1', 'ENSG00000198786.2', 'ENSG00000198695.2',\n       'ENSG00000210194.1', 'ENSG00000198727.2', 'ENSG00000210195.2',\n       'ENSG00000210196.2'],\n      dtype='object', name='Name', length=56238)\n>>> df1.columns\nIndex(['GTEX-111CU-1826-SM-5GZYN', 'GTEX-111FC-0226-SM-5N9B8',\n       'GTEX-111VG-2326-SM-5N9BK', 'GTEX-111YS-2426-SM-5GZZQ',\n       'GTEX-1122O-2026-SM-5NQ91', 'GTEX-1128S-2126-SM-5H12U',\n       'GTEX-113IC-0226-SM-5HL5C', 'GTEX-117YX-2226-SM-5EGJJ',\n       'GTEX-11DXW-0326-SM-5H11W', 'GTEX-11DXX-2326-SM-5Q5A2',\n       ...\n       'GTEX-ZVE2-0006-SM-51MRW', 'GTEX-ZVP2-0005-SM-51MRK',\n       'GTEX-ZVT2-0005-SM-57WBW', 'GTEX-ZVT3-0006-SM-51MT9',\n       'GTEX-ZVT4-0006-SM-57WB8', 'GTEX-ZVTK-0006-SM-57WBK',\n       'GTEX-ZVZP-0006-SM-51MSW', 'GTEX-ZVZQ-0006-SM-51MR8',\n       'GTEX-ZXES-0005-SM-57WCB', 'GTEX-ZXG5-0005-SM-57WCN'],\n      dtype='object', length=8555)\n```\n\n### log\u5909\u63db\u3001\u5bc6\u5ea6\u5206\u5e03\u306e\u30d7\u30ed\u30c3\u30c8\n\n\u8aad\u307f\u8fbc\u3093\u3060 \u907a\u4f1d\u5b50\u767a\u73fe\u91cf(RPKM) \u306b pseudo count 1 \u3092\u52a0\u3048\u3066 log2 \u5909\u63db\u3057\u307e\u3059\u3002\n\n```py\nimport numpy as np\n\ndf1pc = df1 + 1\ndf1log = np.log2(df1pc)\n```\n\n\u30e9\u30f3\u30c0\u30e0\u306b 10 \u30b5\u30f3\u30d7\u30eb\u3092\u9078\u3093\u3067\u3001\u907a\u4f1d\u5b50\u767a\u73fe\u91cf\u306e\u5bc6\u5ea6\u5206\u5e03\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u307f\u307e\u3059\u3002\n\u30d7\u30ed\u30c3\u30c8\u306b\u306f\u3001[pandas \u306e DataFrame.plot.density](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.plot.density.html) \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n```py\nimport matplotlib.pyplot as plt\n\nrandom_cols = np.random.choice(8555, 10)\ndf1log.iloc[:, random_cols].plot.density(fontsize=10)\nplt.savefig('gtex_log_rpkm_density_random10sample.png', dpi=150)\nplt.show()\n```\n\n![gtex_log_rpkm_density_random10sample.png](https://qiita-image-store.s3.amazonaws.com/0/96968/95a50f4f-56c3-8d06-1cc6-5520e0dd52e4.png)\n\n\u30b5\u30f3\u30d7\u30eb\u3054\u3068\u306b\u5206\u5e03\u306b\u304b\u306a\u308a\u9055\u3044\u304c\u3042\u308b\u305f\u3081\u3001\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3068\u306a\u308b\u5206\u5e03\u3092\u6c42\u3081\u3066\nquantile \u88dc\u6b63\u306a\u3069\u3092\u884c\u3063\u305f\u65b9\u304c\u826f\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n### \u30b5\u30f3\u30d7\u30eb\u306e\u7d44\u7e54\u60c5\u5831\uff08\u30af\u30e9\u30b9\u30e9\u30d9\u30eb\uff09\u306e\u8aad\u307f\u8fbc\u307f\n\n\u30b5\u30f3\u30d7\u30eb\u306e\u7d44\u7e54\u60c5\u5831\u304c\u8a18\u8f09\u3055\u308c\u305f GTEx_Data_V6_Annotations_SampleAttributesDS.txt \u304b\u3089\u3001\n1\u5217\u76ee\u306e\u30b5\u30f3\u30d7\u30ebID\u30017\u5217\u76ee\u306e\u7d44\u7e54\u60c5\u5831\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\n```py\nusecols = [0, 6]\ndf2 = pd.read_csv('GTEx_Data_V6_Annotations_SampleAttributesDS.txt', sep='\\t', usecols=usecols, index_col=0)\n```\n\n\u907a\u4f1d\u5b50\u767a\u73fe\u30c7\u30fc\u30bf\u306e\u884c\u3068\u5217\u3092\u8ee2\u7f6e\u3057\u3066\u3001\u30b5\u30f3\u30d7\u30eb\u306e\u7d44\u7e54\u60c5\u5831\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3068\u7d50\u5408\u3059\u308b\u3053\u3068\u3067\u3001\n\u7d44\u7e54\u60c5\u5831\u3092\u4ed8\u4e0e\u3057\u307e\u3059\u3002[pandas \u306e concat](http://pandas.pydata.org/pandas-docs/stable/merging.html) \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n```py\ndf = pd.concat([df1log.T, df2], axis=1, join_axes=[df1log.T.index])\n```\n\n[Python \u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0](http://book.impress.co.jp/books/1115101122) 4.2.2 (P99) \u3088\u308a\u3001\n\u7d44\u7e54\u60c5\u5831\u304c\u6587\u5b57\u5217\u306e\u307e\u307e\u3060\u3068\u6271\u3044\u3065\u3089\u3044\u305f\u3081\u3001\u6587\u5b57\u5217\u3092\u6574\u6570\u306b\u5909\u63db\u3057\u3066\u7f6e\u304d\u63db\u3048\u307e\u3059\u3002\n\u907a\u4f1d\u5b50\u767a\u73fe\u30c7\u30fc\u30bf\u3092\u8ee2\u7f6e\u3057\u3066\u7d50\u5408\u3057\u305f\u305f\u3081\u3001\u884c\u304c\u30b5\u30f3\u30d7\u30eb\u3001\u5217\u304c\u7279\u5fb4\u91cf\u3068\u7d44\u7e54\u60c5\u5831\u3068\u306a\u308a\u307e\u3059\u3002\n\n```py\nfrom sklearn.preprocessing import LabelEncoder\n\nclass_le = LabelEncoder()\nlabel = class_le.fit_transform(df['SMTSD'].values)\nlabel_r = class_le.inverse_transform(label)\ndf['SMTSD'] = label\n```\n\n### \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272\n\n[Python \u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0](http://book.impress.co.jp/books/1115101122) 4.3 (P102) \u3088\u308a\u3001\n\u30e9\u30d9\u30eb\u3092\u4ed8\u3051\u3057\u305f\u907a\u4f1d\u5b50\u767a\u73fe\u30c7\u30fc\u30bf\u3092\u7279\u5fb4\u91cf\uff08X\uff09\u3068\u30af\u30e9\u30b9\u30e9\u30d9\u30eb\uff08y\uff09\u306b\u5206\u5272\u3057\u307e\u3059\u3002\n\n```py\nsmtsd_index = len(df.columns) - 1\nX, y = df.iloc[:, :smtsd_index].values, df.iloc[:, smtsd_index].values\n```\n\n\u7d9a\u3044\u3066\u3001\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272\u3057\u307e\u3059\u3002\n\n```py\nfrom sklearn.cross_validation import train_test_split\n\nX_train, X_test, y_train, y_test = \\\n   train_test_split(X, y, test_size=0.3, random_state=0)\n```\n\n## \u5b66\u7fd2\u3068\u63a8\u8ad6\n\n[k\u8fd1\u508d\u6cd5](https://ja.wikipedia.org/wiki/K%E8%BF%91%E5%82%8D%E6%B3%95) \u306b\u3088\u308b\u5b66\u7fd2\u3068\u63a8\u8ad6\u3092\u884c\u3063\u3066\u307f\u307e\u3059\u3002\n[sklearn.neighbors.KNeighborsClassifier](http://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html) \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n\u305d\u308d\u305d\u308d\u4e0d\u8981\u306a\u5909\u6570\u3092\u524a\u9664\u3057\u3066\u3001\u30e1\u30e2\u30ea\u306b\u4f59\u88d5\u3092\u6301\u305f\u305b\u307e\u3059\u3002\n\n```py\ndel df\ndel df1\ndel df1pc\ndel df1log\ndel df2\n```\n\nk = 3\u30014\u4e26\u5217\u3067\u5b9f\u884c\u3057\u307e\u3059\u30024GHz Intel Core i7 \u3067 10\u5206\u307b\u3069\u8a08\u7b97\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3057\u305f\u3002\n\n```py\nfrom sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors=3, n_jobs=4)\nknn.fit(X_train, y_train)\nprint('Training accuracy: ', knn.score(X_train, y_train))\nprint('Test accuracy: ', knn.score(X_test, y_test))\n```\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u306e\u6b63\u89e3\u7387\u306f\u3001\u7d0491% \u3068\u306a\u308a\u307e\u3057\u305f\u3002\n\n```py\n>>> print('Training accuracy: ', knn.score(X_train, y_train))\nTraining accuracy: 0.95641282565130259\n>>> print('Test accuracy: ', knn.score(X_test, y_test))\nTest accuracy: 0.90962212699649392\n```\n\n### \u907a\u4f1d\u5b50\u767a\u73fe\u91cf\u306b\u3088\u308b\u7279\u5fb4\u91cf\u306e\u9078\u629e\n\n\u7279\u5fb4\u91cf\u306e\u9078\u629e\u3092\u884c\u3044\u307e\u3059\u3002\u907a\u4f1d\u5b50\u767a\u73fe\u91cf\u306e\u5408\u8a08\u304c 500 \u3092\u8d85\u3048\u306a\u3044\u907a\u4f1d\u5b50\u306f\u53d6\u308a\u9664\u3044\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n[Python \u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0](http://book.impress.co.jp/books/1115101122) 4.5.2 (P113) \u306e\u9010\u6b21\uff08\u3061\u304f\u3058\uff09\u7279\u5fb4\u9078\u629e\u3084 \n[scikit-learn \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9](https://github.com/scikit-learn/scikit-learn/tree/master/sklearn) \u3092\u53c2\u8003\u306b\u3001\u7279\u5fb4\u9078\u629e\u3059\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n```py\nfrom sklearn.base import TransformerMixin\nimport numpy as np\n\nclass GexSumFS(TransformerMixin):\n    \"\"\"\n    Feature selection based on the sum of gene expression values\n    \"\"\"\n    \n    def __init__(self, sum):\n        self.sum = sum\n    \n    def fit(self, X, y=None):\n        self.indices_ = np.where(np.sum(X, axis=0) > self.sum)[0]\n        return self\n    \n    def transform(self, X, y=None):\n        return X[:, self.indices_]\n```\n\n\u4e0a\u8a18\u306e\u30af\u30e9\u30b9\u3092\u5229\u7528\u3057\u3066\u3001\u767a\u73fe\u91cf\u306e\u5408\u8a08\u3067\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3092\u3057\u307e\u3059\u3002\n\n```py\nsumfs = GexSumFS(sum = 500)\nX_train_sumfs = sumfs.fit_transform(X_train)\nX_test_sumfs = sumfs.transform(X_test)\n```\n\n\u907a\u4f1d\u5b50\u6570\uff08\u7279\u5fb4\u91cf\u6570\uff09\u304c 27754 \u307e\u3067\u6e1b\u5c11\u3057\u307e\u3057\u305f.\n\n```py\n>>> X_train_sumfs.shape[1]\n27754\n```\n\n\u7279\u5fb4\u9078\u629e\u3057\u305f\u30c7\u30fc\u30bf\u3067\u5b66\u7fd2\uff06\u63a8\u8ad6\u3057\u3066\u307f\u307e\u3059\u3002\n\n```py\nknn.fit(X_train_sumfs, y_train)\nprint('Training accuracy: ', knn.score(X_train_sumfs, y_train))\nprint('Test accuracy: ', knn.score(X_test_sumfs, y_test))\n```\n\n\u7279\u5fb4\u9078\u629e\u524d\u3068\u307b\u307c\u540c\u69d8\u3001\u7d0491% \u306e\u6b63\u89e3\u7387\u3068\u306a\u308a\u307e\u3057\u305f\u3002\n\u308f\u305a\u304b\u306b\u6b63\u89e3\u7387\u304c\u6e1b\u5c11\u3057\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\u3001\n\u7279\u5fb4\u9078\u629e\u306b\u3088\u308a\u3001\u8a08\u7b97\u6642\u9593\u304c\u5c11\u3057\u6e1b\u5c11\u3059\u308b\u3068\u3044\u3046\u30e1\u30ea\u30c3\u30c8\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\n```py\n>>> print('Training accuracy: ', knn.score(X_train_sumfs, y_train))\nTraining accuracy:  0.955577822311\n>>> print('Test accuracy: ', knn.score(X_test_sumfs, y_test))\nTest accuracy:  0.908843007402\n```\n\n\u907a\u4f1d\u5b50\u767a\u73fe\u91cf\u3092\u6a19\u6e96\u5316\uff08\u5e73\u57470\u3001\u5206\u65631\uff09\u3057\u305f\u5834\u5408\u3060\u3068\u3001\u767a\u73fe\u91cf\u306e\u4f4e\u3044\u907a\u4f1d\u5b50\u306f\u30ce\u30a4\u30ba\u3068\u306a\u308a\u3084\u3059\u3044\u305f\u3081\u3001\n\u767a\u73fe\u91cf\u306b\u3088\u308b\u7279\u5fb4\u9078\u629e\u304c\u3088\u308a\u52b9\u679c\u7684\u306b\u306a\u308b\u306f\u305a\u3067\u3059\u3002\n\n### Quantile normalization\n\n\u5bc6\u5ea6\u5206\u5e03\u306e\u30d7\u30ed\u30c3\u30c8\u304b\u3089\u3001\u30b5\u30f3\u30d7\u30eb\u3054\u3068\u306b\u767a\u73fe\u91cf\u306e\u5206\u5e03\u304c\u304b\u306a\u308a\u7570\u306a\u3063\u3066\u3044\u305f\u305f\u3081\u3001\n[quantile \u88dc\u6b63](https://en.wikipedia.org/wiki/Quantile_normalization) \u3092\u884c\u3063\u3066\u304b\u3089\u5b66\u7fd2&\u63a8\u8ad6\u3092\u3057\u3066\u307f\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b quantile \u88dc\u6b63\u3092\u884c\u3046\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n```py\nclass QuantileNormalization(TransformerMixin):\n    \"\"\"\n    Quantile normalization\n    \"\"\"\n    \n    def __init__(self):\n        pass\n    \n    def fit(self, X, y=None):\n        self.ref_dist_ = np.zeros(X.shape[1])\n        X_rank = pd.DataFrame(X).rank(axis=1, method='min').astype(int)\n        for i in range(X.shape[1]):\n            indices = np.where(X_rank == i+1)\n            if len(indices[0]) > 0:\n                self.ref_dist_[i] = np.mean(X[indices])\n            else:\n                self.ref_dist_[i] = self.ref_dist_[i-1]\n        return self\n    \n    def transform(self, X, y=None):\n        X_norm = pd.DataFrame(X).rank(axis=1, method='min').values\n        for i in range(X.shape[1]):\n            X_norm[X_norm == i+1] = self.ref_dist_[i]\n        return X_norm\n```\n\n\u4e0a\u8a18\u306e\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3057\u3066 quantile \u88dc\u6b63\u3092\u884c\u3044\u307e\u3059\u3002\n\u5b9f\u88c5\u65b9\u6cd5\u304c\u60aa\u304b\u3063\u305f\u305f\u3081\u304b\u3001\u8a08\u7b97\u306b\u4e38\u4e00\u65e5\u304b\u304b\u308a\u307e\u3057\u305f\u3002\n\n```py\nq_norm = QuantileNormalization()\nX_train_sumfs_qnorm = q_norm.fit_transform(X_train_sumfs)\nX_test_sumfs_qnorm = q_norm.transform(X_test_sumfs)\n```\n\n\u88dc\u6b63\u5f8c\u306e\u907a\u4f1d\u5b50\u767a\u73fe\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e\u5bc6\u5ea6\u5206\u5e03\u3092\u898b\u3066\u3001\u5bc6\u5ea6\u5206\u5e03\u304c\u63c3\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\n```py\nrandom_rows = np.random.choice(range(X_train_sumfs_qnorm.shape[0]), 10)\npd.DataFrame(X_train_sumfs_qnorm[random_rows, :]).T.plot.density(fontsize=10)\nplt.savefig('gtex_qnorm_density_random10sample.png', dpi=150)\nplt.show()\n```\n\n![gtex_qnorm_density_random10sample.png](https://qiita-image-store.s3.amazonaws.com/0/96968/0d87f868-900f-fb53-de9c-6e31f5772d45.png)\n\nquantile \u88dc\u6b63\u3092\u3057\u305f\u30c7\u30fc\u30bf\u3067\u5b66\u7fd2\uff06\u63a8\u8ad6\u3057\u3066\u307f\u307e\u3059\u3002\n\n```py\nknn.fit(X_train_sumfs_qnorm, y_train)\nprint('Training accuracy: ', knn.score(X_train_sumfs_qnorm, y_train))\nprint('Test accuracy: ', knn.score(X_test_sumfs_qnorm, y_test))\n```\n\n\u63a8\u8ad6\u306e\u6b63\u89e3\u7387\u304c\u30010.6% \u307b\u3069\u4e0a\u6607\u3057\u307e\u3057\u305f\u3002\n\n```py\n>>> print('Training accuracy: ', knn.score(X_train_sumfs_qnorm, y_train))\nTraining accuracy:  0.956078824315\n>>> print('Test accuracy: ', knn.score(X_test_sumfs_qnorm, y_test))\nTest accuracy:  0.915855083755\n```\n\n### \u6a19\u6e96\u5316\n\nQuantile \u88dc\u6b63\u306b\u3088\u308a\u5206\u5e03\u3092\u63c3\u3048\u305f\u30c7\u30fc\u30bf\u306e\u6a19\u6e96\u5316\u3092\u884c\u3063\u3066\u304b\u3089\u5b66\u7fd2\uff06\u63a8\u8ad6\u3092\u884c\u3063\u3066\u307f\u307e\u3059\u3002\n[Python \u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0](http://book.impress.co.jp/books/1115101122) 4.4 \u7279\u5fb4\u91cf\u306e\u5c3a\u5ea6\u3092\u63c3\u3048\u308b (P106) \u3092\u53c2\u8003\u306b\u3057\u307e\u3059\u3002\n\n```py\nfrom sklearn.preprocessing import StandardScaler\n\nstdsc = StandardScaler()\nX_train_sumfs_qnorm_std = stdsc.fit_transform(X_train_sumfs_qnorm)\nX_test_sumfs_qnorm_std = stdsc.transform(X_test_sumfs_qnorm)\n\nknn.fit(X_train_sumfs_qnorm_std, y_train)\nprint('Training accuracy: ', knn.score(X_train_sumfs_qnorm_std, y_train))\nprint('Test accuracy: ', knn.score(X_test_sumfs_qnorm_std, y_test))\n```\n\n```py\n>>> print('Training accuracy: ', knn.score(X_train_sumfs_qnorm_std, y_train))\nTraining accuracy:  0.951736806947\n>>> print('Test accuracy: ', knn.score(X_test_sumfs_qnorm_std, y_test))\nTest accuracy:  0.906505648617\n```\n\n\u4eca\u56de\u306e\u5834\u5408\u3001\u6a19\u6e96\u5316\u306f\u3001\u6b63\u89e3\u7387\u3092\u4e0b\u3052\u3066\u3057\u307e\u3046\u3088\u3046\u3067\u3057\u305f\u3002\n\u975e\u5e38\u306b\u5c0f\u3055\u3044\u5206\u6563\u3092\u6301\u3064\u907a\u4f1d\u5b50\u3092\u6a19\u6e96\u5316\u3092\u3059\u308b\u3068\u3001\u5927\u304d\u306a\u5024\u3068\u306a\u3063\u3066\u3057\u307e\u3046\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\n\u6b63\u89e3\u7387\u306e\u4f4e\u4e0b\u306f\u3001\u3053\u306e\u305f\u3081\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n### \u6b63\u898f\u5316\n\n\u6a19\u6e96\u5316\u3067\u306f\u306a\u304f\u3001\u6b63\u898f\u5316\uff080\u301c1 \u306b\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\uff09\u3092\u884c\u3063\u3066\u304b\u3089\u5b66\u7fd2\uff06\u63a8\u8ad6\u3092\u884c\u3063\u3066\u307f\u307e\u3059\u3002\n[Python \u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0](http://book.impress.co.jp/books/1115101122) 4.4 \u7279\u5fb4\u91cf\u306e\u5c3a\u5ea6\u3092\u63c3\u3048\u308b (P105) \u3092\u53c2\u8003\u306b\u3057\u307e\u3059\u3002\n\n```py\nfrom sklearn.preprocessing import MinMaxScaler\n\nmms = MinMaxScaler()\nX_train_sumfs_qnorm_norm = mms.fit_transform(X_train_sumfs_qnorm)\nX_test_sumfs_qnorm_norm = mms.transform(X_test_sumfs_qnorm)\n\nknn.fit(X_train_sumfs_qnorm_norm, y_train)\nprint('Training accuracy: ', knn.score(X_train_sumfs_qnorm_norm, y_train))\nprint('Test accuracy: ', knn.score(X_test_sumfs_qnorm_norm, y_test))\n```\n\n```py\n>>> print('Training accuracy: ', knn.score(X_train_sumfs_qnorm_norm, y_train))\nTraining accuracy:  0.952571810287\n>>> print('Test accuracy: ', knn.score(X_test_sumfs_qnorm_norm, y_test))\nTest accuracy:  0.910011686794\n```\n\n\u4eca\u56de\u306e\u5834\u5408\u3001\u6b63\u898f\u5316\u3082\u6b63\u89e3\u7387\u3092\u4e0b\u3052\u3066\u3057\u307e\u3046\u3088\u3046\u3067\u3057\u305f\u3002\n\u6b63\u898f\u5316\u306b\u3088\u308a\u3001\u5909\u52d5\u306e\u5c11\u306a\u3044\u907a\u4f1d\u5b50\u306e\u5f71\u97ff\u304c\u5927\u304d\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u305f\u3081\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n### \u5206\u6563\u306e\u5927\u304d\u3055\u306b\u3088\u308b\u7279\u5fb4\u9078\u629e\n\n\u5206\u6563\u306e\u5c11\u306a\u3044\u907a\u4f1d\u5b50\u3092\u4e8b\u524d\u306b\u53d6\u308a\u9664\u304f\u3053\u3068\u3067\u3001\u6a19\u6e96\u5316\u304c\u52b9\u679c\u7684\u306b\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5206\u6563\u306e\u5c0f\u3055\u3044\u7279\u5fb4\u91cf\u3092\u4e57\u308a\u9664\u304f\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n```py\nfrom sklearn.base import TransformerMixin\nimport numpy as np\n\nclass GexVarFS(TransformerMixin):\n    \"\"\"\n    Feature selection based on the variance of gene expression values\n    \"\"\"\n    \n    def __init__(self, var):\n        self.var = var\n    \n    def fit(self, X, y=None):\n        self.indices_ = np.where(np.var(X, axis=0) > self.var)[0]\n        return self\n    \n    def transform(self, X, y=None):\n        return X[:, self.indices_]\n```\n\n\u4e0a\u8a18\u306e\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3057\u3066\u3001\u7279\u5fb4\u9078\u629e\uff08\u5206\u65631 \u4ee5\u4e0b\u306f\u524a\u9664\uff09\u3092\u3057\u305f\u5f8c\u306b\u5b66\u7fd2\uff06\u63a8\u8ad6\u3057\u3066\u307f\u307e\u3059\u3002\n\n```py\nvarfs = GexVarFS(var = 1)\nX_train_sumfs_qnorm_varfs = varfs.fit_transform(X_train_sumfs_qnorm)\nX_test_sumfs_qnorm_varfs = varfs.transform(X_test_sumfs_qnorm)\n\nknn.fit(X_train_sumfs_qnorm_varfs, y_train)\nprint('Training accuracy: ', knn.score(X_train_sumfs_qnorm_varfs, y_train))\nprint('Test accuracy: ', knn.score(X_test_sumfs_qnorm_varfs, y_test))\n```\n\n\u907a\u4f1d\u5b50\u6570\u304c\u6e1b\u308a\u3001\u8a08\u7b97\u6642\u9593\u306f\u5927\u304d\u304f\u6e1b\u5c11\u3057\u307e\u3057\u305f\u304c\u3001\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u7279\u5fb4\u9078\u629e\u306b\u3088\u308a\u5c11\u3057\u3060\u3051\u6b63\u89e3\u7387\u304c\u4f4e\u4e0b\u3057\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\n```py\n>>> print('Training accuracy: ', knn.score(X_train_sumfs_qnorm_varfs, y_train))\nTraining accuracy:  0.957915831663\n>>> print('Test accuracy: ', knn.score(X_test_sumfs_qnorm_varfs, y_test))\nTest accuracy:  0.913128165173\n```\n\n\u7d9a\u3044\u3066\u3001\u5206\u6563\u306e\u5927\u304d\u3055\u3067\u7279\u5fb4\u9078\u629e\u3057\u305f\u30c7\u30fc\u30bf\u306e\u6a19\u6e96\u5316\u3092\u884c\u3044\u3001\u5b66\u7fd2\uff06\u63a8\u8ad6\u3057\u307e\u3059\u3002\n\n```py\nX_train_sumfs_qnorm_varfs_std = stdsc.fit_transform(X_train_sumfs_qnorm_varfs)\nX_test_sumfs_qnorm_varfs_std = stdsc.transform(X_test_sumfs_qnorm_varfs)\n\nknn.fit(X_train_sumfs_qnorm_varfs_std, y_train)\nprint('Training accuracy: ', knn.score(X_train_sumfs_qnorm_varfs_std, y_train))\nprint('Test accuracy: ', knn.score(X_test_sumfs_qnorm_varfs_std, y_test))\n```\n\n\u4eca\u56de\u306e\u5834\u5408\u306f\u3001\u6a19\u6e96\u5316\u306b\u3088\u308a\u3001\u6b63\u89e3\u7387\u304c\u4e0a\u6607\u3057\u307e\u3057\u305f\u3002\n\u307e\u305f\u3001\u7279\u5fb4\u9078\u629e\u524d\u3068\u6bd4\u3079\u3066\u3082\u3001\u7279\u5fb4\u9078\u629e\uff06\u6a19\u6e96\u5316\u306b\u3088\u3063\u3066\u3001\u82e5\u5e72\u6b63\u89e3\u7387\u304c\u4e0a\u6607\u3057\u307e\u3057\u305f\u3002\n\n```py\n>>> print('Training accuracy: ', knn.score(X_train_sumfs_qnorm_varfs_std, y_train))\nTraining accuracy:  0.958750835003\n>>> print('Test accuracy: ', knn.score(X_test_sumfs_qnorm_varfs_std, y_test))\nTest accuracy:  0.918971562135\n```\n\n## \u307e\u3068\u3081\n\n\u6700\u7d42\u7684\u306b\u63a8\u8ad6\u306e\u6b63\u89e3\u7387\u306f \u7d0492% \u3068\u306a\u308a\u3001log\u5909\u63db\u3057\u305f RPKM\u5024\u3092\u305d\u306e\u307e\u307e\u4f7f\u7528\u3057\u305f\u5834\u5408\u306b\u6bd4\u3079\u3066 \n1% \u307b\u3069\u6539\u5584\u3055\u308c\u307e\u3057\u305f\u3002\u4e3b\u6210\u5206\u5206\u6790\u306b\u3088\u308b\u6b21\u5143\u524a\u6e1b\u3084\u3001\n\u6a5f\u68b0\u5b66\u7fd2\u306e\u624b\u6cd5\u3092 SVM \u306a\u3069\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u3067\u3001\u3088\u308a\u826f\u3044\u7d50\u679c\u304c\u5f97\u3089\u308c\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u6700\u5f8c\u306b\u7d44\u7e54\u3054\u3068\u306e\u6b63\u89e3\u7387\u3092\u8abf\u3079\u3066\u307f\u307e\u3059\u3002\n\n```py\ny_pred = knn.predict(X_test_sumfs_qnorm_varfs_std)\ninv_dict = dict(zip(y, class_le.inverse_transform(y)))\nfor i in np.unique(label):\n    accuracy_score = np.sum((y_pred[y_test == i] == i).astype(int)) / len(y_pred[y_test == i])\n    print(inv_dict[i] + ': ' + str(accuracy_score))\n```\n\n```\nAdipose - Subcutaneous: 1.0\nAdipose - Visceral (Omentum): 0.984126984127\nAdrenal Gland: 1.0\nArtery - Aorta: 0.985294117647\nArtery - Coronary: 0.911764705882\nArtery - Tibial: 0.988636363636\nBladder: 1.0\nBrain - Amygdala: 0.95\nBrain - Anterior cingulate cortex (BA24): 0.76\nBrain - Caudate (basal ganglia): 0.709677419355\nBrain - Cerebellar Hemisphere: 0.838709677419\nBrain - Cerebellum: 0.883720930233\nBrain - Cortex: 0.864864864865\nBrain - Frontal Cortex (BA9): 0.53125\nBrain - Hippocampus: 0.8\nBrain - Hypothalamus: 0.964285714286\nBrain - Nucleus accumbens (basal ganglia): 0.705882352941\nBrain - Putamen (basal ganglia): 0.344827586207\nBrain - Spinal cord (cervical c-1): 0.928571428571\nBrain - Substantia nigra: 0.666666666667\nBreast - Mammary Tissue: 0.823529411765\nCells - EBV-transformed lymphocytes: 1.0\nCells - Transformed fibroblasts: 1.0\nCervix - Ectocervix: 1.0\nCervix - Endocervix: 0.0\nColon - Sigmoid: 0.725\nColon - Transverse: 0.796875\nEsophagus - Gastroesophageal Junction: 0.509803921569\nEsophagus - Mucosa: 1.0\nEsophagus - Muscularis: 0.876543209877\nFallopian Tube: 0.5\nHeart - Atrial Appendage: 0.98275862069\nHeart - Left Ventricle: 1.0\nKidney - Cortex: 1.0\nLiver: 1.0\nLung: 1.0\nMinor Salivary Gland: 1.0\nMuscle - Skeletal: 1.0\nNerve - Tibial: 1.0\nOvary: 1.0\nPancreas: 1.0\nPituitary: 1.0\nProstate: 1.0\nSkin - Not Sun Exposed (Suprapubic): 0.807692307692\nSkin - Sun Exposed (Lower leg): 0.925619834711\nSmall Intestine - Terminal Ileum: 0.96\nSpleen: 1.0\nStomach: 0.903225806452\nTestis: 1.0\nThyroid: 1.0\nUterus: 0.95\nVagina: 0.909090909091\nWhole Blood: 1.0\n```\n\n## \u30b3\u30fc\u30c9\u307e\u3068\u3081\n\n```py\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.cross_validation import train_test_split\nfrom sklearn.base import TransformerMixin\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\n\n### read gene expression matrix\nusecols = [0] + list(range(2,8557))\ndf1 = pd.read_csv('GTEx_Analysis_v6p_RNA-seq_RNA-SeQCv1.1.8_gene_rpkm.gct', sep='\\t', skiprows=2, usecols=usecols, index_col=0)\ndf1pc = df1 + 1\ndf1log = np.log2(df1pc)\n\n### plot gene expression profiles\nrandom_cols = np.random.choice(8555, 10)\ndf1log.iloc[:, random_cols].plot.density(fontsize=10)\nplt.savefig('gtex_log_rpkm_density_random10sample.png', dpi=150)\n#plt.show()\n\n### read class labels\nusecols = [0, 6]\ndf2 = pd.read_csv('GTEx_Data_V6_Annotations_SampleAttributesDS.txt', sep='\\t', usecols=usecols, index_col=0)\n\n### attach class labels\ndf = pd.concat([df1log.T, df2], axis=1, join_axes=[df1log.T.index])\n\n### convert string labels\nclass_le = LabelEncoder()\nlabel = class_le.fit_transform(df['SMTSD'].values)\nlabel_r = class_le.inverse_transform(label)\ndf['SMTSD'] = label\n\n### split into training and test data\nsmtsd_index = len(df.columns) - 1\nX, y = df.iloc[:, :smtsd_index].values, df.iloc[:, smtsd_index].values\nX_train, X_test, y_train, y_test = \\\n   train_test_split(X, y, test_size=0.3, random_state=0)\n\n### save memory usage\ndel df\ndel df1\ndel df1pc\ndel df1log\ndel df2\n\n### feature selection based on gene expression values\nclass GexSumFS(TransformerMixin):\n    \"\"\"\n    Feature selection based on the sum of gene expression values\n    \"\"\"\n    \n    def __init__(self, sum):\n        self.sum = sum\n    \n    def fit(self, X, y=None):\n        self.indices_ = np.where(np.sum(X, axis=0) > self.sum)[0]\n        return self\n    \n    def transform(self, X, y=None):\n        return X[:, self.indices_]\n\nsumfs = GexSumFS(sum = 500)\nX_train_sumfs = sumfs.fit_transform(X_train)\nX_test_sumfs = sumfs.transform(X_test)\n\n### quantile normalization\nclass QuantileNormalization(TransformerMixin):\n    \"\"\"\n    Quantile normalization\n    \"\"\"\n    \n    def __init__(self):\n        pass\n    \n    def fit(self, X, y=None):\n        self.ref_dist_ = np.zeros(X.shape[1])\n        X_rank = pd.DataFrame(X).rank(axis=1, method='min').astype(int)\n        for i in range(X.shape[1]):\n            indices = np.where(X_rank == i+1)\n            if len(indices[0]) > 0:\n                self.ref_dist_[i] = np.mean(X[indices])\n            else:\n                self.ref_dist_[i] = self.ref_dist_[i-1]\n        return self\n    \n    def transform(self, X, y=None):\n        X_norm = pd.DataFrame(X).rank(axis=1, method='min').values\n        for i in range(X.shape[1]):\n            X_norm[X_norm == i+1] = self.ref_dist_[i]\n        return X_norm\n\nq_norm = QuantileNormalization()\nX_train_sumfs_qnorm = q_norm.fit_transform(X_train_sumfs)\nX_test_sumfs_qnorm = q_norm.transform(X_test_sumfs)\n\nrandom_rows = np.random.choice(range(X_train_sumfs_qnorm.shape[0]), 10)\npd.DataFrame(X_train_sumfs_qnorm[random_rows, :]).T.plot.density(fontsize=10)\nplt.savefig('gtex_qnorm_density_random10sample.png', dpi=150)\n#plt.show()\n\n### feature selection based on gene expression variance\nfrom sklearn.base import TransformerMixin\nimport numpy as np\n\nclass GexVarFS(TransformerMixin):\n    \"\"\"\n    Feature selection based on the variance of gene expression values\n    \"\"\"\n    \n    def __init__(self, var):\n        self.var = var\n    \n    def fit(self, X, y=None):\n        self.indices_ = np.where(np.var(X, axis=0) > self.var)[0]\n        return self\n    \n    def transform(self, X, y=None):\n        return X[:, self.indices_]\n\nvarfs = GexVarFS(var = 1)\nX_train_sumfs_qnorm_varfs = varfs.fit_transform(X_train_sumfs_qnorm)\nX_test_sumfs_qnorm_varfs = varfs.transform(X_test_sumfs_qnorm)\n\n### standardization\nstdsc = StandardScaler()\nX_train_sumfs_qnorm_varfs_std = stdsc.fit_transform(X_train_sumfs_qnorm_varfs)\nX_test_sumfs_qnorm_varfs_std = stdsc.transform(X_test_sumfs_qnorm_varfs)\n\n### learning and prediction\nknn = KNeighborsClassifier(n_neighbors=3, n_jobs=4)\nknn.fit(X_train_sumfs_qnorm_varfs_std, y_train)\nprint('Training accuracy: ', knn.score(X_train_sumfs_qnorm_varfs_std, y_train))\nprint('Test accuracy: ', knn.score(X_test_sumfs_qnorm_varfs_std, y_test))\n\n### accuracy score for each class\ny_pred = knn.predict(X_test_sumfs_qnorm_varfs_std)\ninv_dict = dict(zip(y, class_le.inverse_transform(y)))\nfor i in np.unique(label):\n    accuracy_score = np.sum((y_pred[y_test == i] == i).astype(int)) / len(y_pred[y_test == i])\n    print(inv_dict[i] + ': ' + str(accuracy_score))\n```\n", "tags": ["bioinformatics", "Python", "MachineLearning"]}