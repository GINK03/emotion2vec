{"context": " More than 1 year has passed since last update.\u81ea\u5206\u306e\u904e\u53bb\u30e1\u30e2(2014\u5e74\u3053\u308d\uff09\u3088\u308a\n\u30d7\u30ed\u30bb\u30b9\u9593\u306e\u901a\u4fe1\u624b\u6cd5 (\u30b9\u30ec\u30c3\u30c9\u9593\u901a\u4fe1\u306b\u4f7f\u3063\u3066\u3082\u3044\u3044\u3068\u306e\u3053\u3068) stackoverflow\n\nPipe\nFIFO (named pipe)\nSocket (Unix Domain Socket)\nMessage Queue\nSignal\nSemaphore\nShared memory\n\n\n\u305d\u308c\u305e\u308c\u306b\u3064\u3044\u3066\n\n\nPipe is useful only among processes related as parent/child. Call pipe(2) and fork(2). Unidirectional.\nTwo unrelated processes can use FIFO unlike plain pipe. Call mkfifo(3). Unidirectional.\nBidirectional. Meant for network communication, but can be used locally too. Can be used for different protocol. There's no message boundary for TCP. Call socket(2).\nMessage Queue. OS maintains discrete message. See sys/msg.h.\nSignal sends an integer to another process. Doesn't mesh well with multi-threads. Call kill(2).\nSemaphore is a synchronization mechanism for multi processes or threads, similar to a queue of people waiting for bathroom. See sys/sem.h.\nShared memory is a shared memory. Do your own concurrency control. Call shmget(2).\n\n\n\n\u81ea\u5206\u306e\u904e\u53bb\u30e1\u30e2(2014\u5e74\u3053\u308d\uff09\u3088\u308a\n\n\u30d7\u30ed\u30bb\u30b9\u9593\u306e\u901a\u4fe1\u624b\u6cd5 (\u30b9\u30ec\u30c3\u30c9\u9593\u901a\u4fe1\u306b\u4f7f\u3063\u3066\u3082\u3044\u3044\u3068\u306e\u3053\u3068) [stackoverflow](http://stackoverflow.com/questions/404604/comparing-unix-linux-ipc)\n\n1. Pipe\n2. FIFO (named pipe)\n3. Socket (Unix Domain Socket)\n4. Message Queue\n5. Signal\n6. Semaphore\n7. Shared memory\n\n- \u305d\u308c\u305e\u308c\u306b\u3064\u3044\u3066\n  - Pipe is useful only among processes related as parent/child. Call pipe(2) and fork(2). Unidirectional.\n  - Two unrelated processes can use FIFO unlike plain pipe. Call mkfifo(3). Unidirectional.\n  - Bidirectional. Meant for network communication, but can be used locally too. Can be used for different protocol. There's no message boundary for TCP. Call socket(2).\n  - Message Queue. OS maintains discrete message. See sys/msg.h.\n  - Signal sends an integer to another process. Doesn't mesh well with multi-threads. Call kill(2).\n  - Semaphore is a synchronization mechanism for multi processes or threads, similar to a queue of people waiting for bathroom. See sys/sem.h.\nShared memory is a shared memory. Do your own concurrency control. Call shmget(2).\n", "tags": ["petalinux", "microzed", "interProcessCommunication", "StackOverflow"]}