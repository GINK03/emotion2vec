{"context": "Azure\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u6301\u3063\u3066\u306a\u304b\u3063\u305f\u306e\u3067\u3001.NET\u7248Heroku\u306eAppHarbor\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\nVisual Studio 2015 Community\u3067Web API\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u3063\u3066\u3001\u30c7\u30d7\u30ed\u30a4\u3068\u3044\u3046\u611f\u3058\u3002\n\u3082\u3061\u308d\u3093\u7121\u6599\u3067\u4f5c\u308c\u307e\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u5358\u7d14\u306becho\u3059\u308bBot\u306f\u3068\u308a\u3042\u3048\u305aLINE BOT API\u3067\u30aa\u30a6\u30e0\u3092\u4f5c\u3063\u3066\u307f\u305f\u3092C#\u3067\u66f8\u3044\u305f\u3060\u3051\u3067\u3059\u304c\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u3002\nJson.NET\u3092NuGet\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Linq;\n\npublic class CallbackController : ApiController\n{\n    public async Task<string> Post(JToken token)\n    {\n        foreach (var msg in token[\"result\"])\n        {\n            var message = JsonConvert.SerializeObject(new\n                {\n                    to = new[] { msg[\"content\"][\"from\"] },\n                    toChannel = 1383378250,\n                    eventType = \"138311608800106203\",\n                    content = msg[\"content\"]\n                });\n\n            var uri = \"https://trialbot-api.line.me/v1/events\";\n\n            using (var client = new HttpClient())\n            {\n                client.DefaultRequestHeaders.TryAddWithoutValidation(\"Content-Type\", \"application/json; charset=UTF-8\");\n                client.DefaultRequestHeaders.Add(\"X-Line-ChannelID\", \"\");\n                client.DefaultRequestHeaders.Add(\"X-Line-ChannelSecret\", \"\");\n                client.DefaultRequestHeaders.Add(\"X-Line-Trusted-User-With-ACL\", \"\");\n\n                var content = new StringContent(message, Encoding.UTF8, \"application/json\");\n\n                var result = await client.PostAsync(uri, content);\n\n                if (!result.IsSuccessStatusCode)\n                {\n                    throw new LineRequestException(result);\n                }\n            }\n        }\n\n        return \"ok\";\n    }\n\n    public class LineRequestException : Exception\n    {\n        public override string Message { get; }\n\n        public LineRequestException(HttpResponseMessage response)\n        {\n            var statusCode = (int)response.StatusCode;\n            var reasonPhrase = response.ReasonPhrase;\n            var content = response.Content.ReadAsStringAsync().Result;\n\n            Message = string.Join(Environment.NewLine,\n                $\"StatusCode: {statusCode}\",\n                $\"ReasonPhrase: {reasonPhrase}\",\n                $\"Content: {content}\");\n        }\n    }\n}\n\n\nLineBot-Sample-for-DotNet\u3068\u3044\u3046\u306e\u3092\u4f5c\u3063\u3066\u3044\u308b\u65b9\u304c\u3044\u3066\u3001\u3053\u3061\u3089\u306fAzure\u306b\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u307f\u305f\u3044\u3067\u3059\u3002\nException\u3060\u3051\u4f7f\u308f\u3055\u305b\u3066\u3082\u3089\u3044\u307e\u3057\u305f\u3002\nLINE BOT API\u3067\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u98db\u3093\u3067\u3053\u306a\u3044\uff08SSL\u95a2\u4fc2\uff09\u3068\u3044\u3046\u3053\u3068\u3082\u3042\u308b\u3088\u3046\u3067\u3059\u304c\u3001AppHarbor\u3067\u306f\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\uff08Azure\u3082\u5e73\u6c17\u306a\u3088\u3046\u3067\u3059\u3002\uff09\n\u305f\u3060\u3001\u30b3\u30fc\u30eb\u30d0\u30c3\u30afURL\u3092\u8a2d\u5b9a\u3057\u3066\u304b\u3089\u534a\u65e5\u4ee5\u4e0a\u304b\u304b\u308b\u6c17\u304c\u3057\u307e\u3059\u3002\n\n\u4f5c\u3063\u305f\u3082\u306e\nYahoo\u306e\u30eb\u30d3\u632f\u308aAPI\u3067\u6f22\u5b57\u3092\u3075\u308a\u304c\u306a\u306b\u3057\u3066\u304f\u308c\u308bBot\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n\u3053\u308c\u3067\u30e4\u30f3\u30ad\u30fc\u8a00\u8449\u3082\u5b89\u5fc3\u3067\u3059\u3002\nAzure\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u6301\u3063\u3066\u306a\u304b\u3063\u305f\u306e\u3067\u3001.NET\u7248Heroku\u306e[AppHarbor](https://appharbor.com/)\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\nVisual Studio 2015 Community\u3067Web API\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u3063\u3066\u3001\u30c7\u30d7\u30ed\u30a4\u3068\u3044\u3046\u611f\u3058\u3002\n\u3082\u3061\u308d\u3093\u7121\u6599\u3067\u4f5c\u308c\u307e\u3059\u3002\n\n# \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n\u5358\u7d14\u306becho\u3059\u308bBot\u306f[\u3068\u308a\u3042\u3048\u305aLINE BOT API\u3067\u30aa\u30a6\u30e0\u3092\u4f5c\u3063\u3066\u307f\u305f](http://qiita.com/masuidrive/items/1042d93740a7a72242a3)\u3092C#\u3067\u66f8\u3044\u305f\u3060\u3051\u3067\u3059\u304c\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u3002\n\n[Json.NET](http://www.newtonsoft.com/json)\u3092NuGet\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```csharp\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Linq;\n\npublic class CallbackController : ApiController\n{\n    public async Task<string> Post(JToken token)\n    {\n        foreach (var msg in token[\"result\"])\n        {\n            var message = JsonConvert.SerializeObject(new\n                {\n                    to = new[] { msg[\"content\"][\"from\"] },\n                    toChannel = 1383378250,\n                    eventType = \"138311608800106203\",\n                    content = msg[\"content\"]\n                });\n\n            var uri = \"https://trialbot-api.line.me/v1/events\";\n\n            using (var client = new HttpClient())\n            {\n                client.DefaultRequestHeaders.TryAddWithoutValidation(\"Content-Type\", \"application/json; charset=UTF-8\");\n                client.DefaultRequestHeaders.Add(\"X-Line-ChannelID\", \"\");\n                client.DefaultRequestHeaders.Add(\"X-Line-ChannelSecret\", \"\");\n                client.DefaultRequestHeaders.Add(\"X-Line-Trusted-User-With-ACL\", \"\");\n\n                var content = new StringContent(message, Encoding.UTF8, \"application/json\");\n\n                var result = await client.PostAsync(uri, content);\n\n                if (!result.IsSuccessStatusCode)\n                {\n                    throw new LineRequestException(result);\n                }\n            }\n        }\n\n        return \"ok\";\n    }\n\n    public class LineRequestException : Exception\n    {\n        public override string Message { get; }\n\n        public LineRequestException(HttpResponseMessage response)\n        {\n            var statusCode = (int)response.StatusCode;\n            var reasonPhrase = response.ReasonPhrase;\n            var content = response.Content.ReadAsStringAsync().Result;\n\n            Message = string.Join(Environment.NewLine,\n                $\"StatusCode: {statusCode}\",\n                $\"ReasonPhrase: {reasonPhrase}\",\n                $\"Content: {content}\");\n        }\n    }\n}\n\n```\n\n[LineBot-Sample-for-DotNet](https://github.com/kiyoaki/LineBot-Sample-for-DotNet)\u3068\u3044\u3046\u306e\u3092\u4f5c\u3063\u3066\u3044\u308b\u65b9\u304c\u3044\u3066\u3001\u3053\u3061\u3089\u306fAzure\u306b\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u307f\u305f\u3044\u3067\u3059\u3002\nException\u3060\u3051\u4f7f\u308f\u3055\u305b\u3066\u3082\u3089\u3044\u307e\u3057\u305f\u3002\n\n[LINE BOT API\u3067\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u98db\u3093\u3067\u3053\u306a\u3044\uff08SSL\u95a2\u4fc2\uff09](http://qiita.com/git6_com/items/008404506836011af33b)\u3068\u3044\u3046\u3053\u3068\u3082\u3042\u308b\u3088\u3046\u3067\u3059\u304c\u3001AppHarbor\u3067\u306f\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\uff08Azure\u3082\u5e73\u6c17\u306a\u3088\u3046\u3067\u3059\u3002\uff09\n\u305f\u3060\u3001\u30b3\u30fc\u30eb\u30d0\u30c3\u30afURL\u3092\u8a2d\u5b9a\u3057\u3066\u304b\u3089\u534a\u65e5\u4ee5\u4e0a\u304b\u304b\u308b\u6c17\u304c\u3057\u307e\u3059\u3002\n\n# \u4f5c\u3063\u305f\u3082\u306e\n\nYahoo\u306e\u30eb\u30d3\u632f\u308aAPI\u3067\u6f22\u5b57\u3092\u3075\u308a\u304c\u306a\u306b\u3057\u3066\u304f\u308c\u308bBot\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-13 6.08.20.png](https://qiita-image-store.s3.amazonaws.com/0/5266/d4d384bf-6b4a-efd3-9949-abaf8b80effe.png)\n\n\u3053\u308c\u3067\u30e4\u30f3\u30ad\u30fc\u8a00\u8449\u3082\u5b89\u5fc3\u3067\u3059\u3002\n", "tags": ["linebot", "C#"]}