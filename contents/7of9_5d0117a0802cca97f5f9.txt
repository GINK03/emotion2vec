{"context": " More than 1 year has passed since last update.\n\u52d5\u4f5c\u78ba\u8a8d\nC++ Builder XE4\n\n\nPOP before SMTP\u3092\u4f7f\u3063\u3066\u304b\u3089\u30e1\u30fc\u30eb\u9001\u4fe1\u3092\u3059\u308b\u3002\n\u53c2\u80031: http://www.amunsnet.com/delphi/2847.html\n\u53c2\u80032: http://ht-deko.com/tech057.html\n\u53c2\u80031\u306e\u30b3\u30fc\u30c9\u3067\u5b9f\u884c\u3057\u305f\u6642\u3001\u4ee5\u4e0b\u306e\u30a8\u30e9\u30fc\u304c\u3067\u305f\u306e\u3067TLS\u306e\u5bfe\u5fdc\u3092\u3057\u305f\u3002\ncommand is not valid in this state\n\n\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n// \u30e1\u30fc\u30eb\u9001\u4fe1\u7528\n#include <Idglobal.hpp>\n#include <IdSMTP.hpp>\n#include <IdSSLOpenSSL.hpp>\n// POP before SMTP\n#include <IdPOP3.hpp>\n\n// \u30e1\u30fc\u30eb\u672c\u6587\u306e\u6587\u5b57\u5316\u3051\u306e\u5bfe\u5fdc\n#include <IdHeaderCoder2022JP.hpp>\n#pragma link \"IdHeaderCoder2022JP\"\n...\n\nvoid __fastcall TForm1::sendTestMailSMTP()\n{\n    // 1. POP before SMTP\n    TIdPOP3 *idPop3 = new TIdPOP3();\n    idPop3->Host = kPopServerAdr;\n    idPop3->Port = kPopPort; // int\n    idPop3->Username = kMyUserName;\n    idPop3->Password = kMyPassword;\n\n    // command is not valid in this state\n    TIdSSLIOHandlerSocketOpenSSL *idSSL = new TIdSSLIOHandlerSocketOpenSSL();\n    if (useTLS) {\n        idSSL->Host = kPopServerAdr;\n        idSSL->Port = kPopPort;\n        idSSL->Destination = idSSL->Host + L\":\" + IntToStr(kPopPort);\n        idPop3->IOHandler = idSSL;\n        idPop3->UseTLS = utUseImplicitTLS;\n    }\n\n    try {\n        idPop3->Connect();\n        idPop3->Disconnect();\n    } catch (const Exception &e) {\n        String msg = e.Message;\n        delete idPop3;\n        delete idSSL;\n        return; // fail\n    }\n    delete idSSL;\n    delete idPop3;\n\n    // 2. sending e-mail using SMTP\n\n    TIdSMTP* smtp = new TIdSMTP(NULL);\n    TIdSSLIOHandlerSocketOpenSSL * sslHandler = new TIdSSLIOHandlerSocketOpenSSL(NULL);\n\n    smtp->Host = kSmtpHost;\n//  sslHandler->Host = smtp->Host;\n//  sslHandler->Port = smtp->Port;\n//  sslHandler->Destination = sslHandler->Host + L\":\"\n//      + IntToStr(sslHandler->Port);\n    smtp->IOHandler = sslHandler;\n    smtp->Username = kMyUserName;\n    smtp->Password = kMyPassword;\n    smtp->Port = 587;\n    smtp->UseTLS = utUseExplicitTLS;\n\n    try {\n        smtp->Connect();\n    } catch (const Exception &e) {\n        String msg = e.Message;\n    }\n\n    TIdMessage* msg = new TIdMessage(NULL);\n    msg->OnInitializeISO = IdMessage1InitializeISO;\n    msg->ContentType = \"text/plain\";\n    msg->CharSet = \"ISO-2022-JP\";\n    msg->ContentTransferEncoding = \"BASE64\";\n    msg->From->Name = kFromName;\n    msg->From->Address = kFromAddr;\n    msg->Recipients->EMailAddresses = kRecipients;\n\n    // TODO: \u4ef6\u540d\u306f\u65e5\u672c\u8a9e\u3060\u3068\u6587\u5b57\u5316\u3051\u3059\u308b\n    msg->Subject = \"test mail from XE4 on \" + Now().FormatString(L\"hh:nn:ss\");\n\n    msg->Body->Text = \"\u30c6\u30b9\u30c8\u30e1\u30fc\u30eb\u306e\u672c\u6587\u3067\u3059\";\n\n    try {\n        smtp->Send(msg);\n    } catch (const Exception &e) {\n        String msg = e.Message;\n    }\n\n    smtp->Disconnect();\n    delete msg;\n    delete smtp;\n}\n\n\u307e\u305f\u3001\u4e0a\u8a18\u306b\u304a\u3044\u3066\u4ee5\u4e0b\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u5fc5\u8981\u3042\u308a\u3002\n\u305f\u3060\u3057\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u306b\u95a2\u3057\u3066\u306f\u30b3\u30fc\u30c9\u57cb\u3081\u8fbc\u307f\u3057\u306a\u3044\u3088\u3046\u306b\u3002\nString kMyUserName; // POP, SMTP\u63a5\u7d9a\u30e6\u30fc\u30b6\u540d\nString kSmtpHost; // SMTP\u30b5\u30fc\u30d0\u30fc\nString kPopServerAdr; // POP\u30b5\u30fc\u30d0\u30fc\nint kPopPort; // 995 or 110 or ?\nbool useTLS;\nString kFromName; // e.g. yamada\nString kFromAddr; // e.g. yamada@testmail.com\nString kRecipients; // \u9001\u4fe1\u5148\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\n\n```txt:\u52d5\u4f5c\u78ba\u8a8d\nC++ Builder XE4\n```\n\nPOP before SMTP\u3092\u4f7f\u3063\u3066\u304b\u3089\u30e1\u30fc\u30eb\u9001\u4fe1\u3092\u3059\u308b\u3002\n\n\u53c2\u80031: http://www.amunsnet.com/delphi/2847.html\n\u53c2\u80032: http://ht-deko.com/tech057.html\n\n\u53c2\u80031\u306e\u30b3\u30fc\u30c9\u3067\u5b9f\u884c\u3057\u305f\u6642\u3001\u4ee5\u4e0b\u306e\u30a8\u30e9\u30fc\u304c\u3067\u305f\u306e\u3067TLS\u306e\u5bfe\u5fdc\u3092\u3057\u305f\u3002\n\n```\ncommand is not valid in this state\n```\n\n\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\n```cpp\n// \u30e1\u30fc\u30eb\u9001\u4fe1\u7528\n#include <Idglobal.hpp>\n#include <IdSMTP.hpp>\n#include <IdSSLOpenSSL.hpp>\n// POP before SMTP\n#include <IdPOP3.hpp>\n\n// \u30e1\u30fc\u30eb\u672c\u6587\u306e\u6587\u5b57\u5316\u3051\u306e\u5bfe\u5fdc\n#include <IdHeaderCoder2022JP.hpp>\n#pragma link \"IdHeaderCoder2022JP\"\n...\n\nvoid __fastcall TForm1::sendTestMailSMTP()\n{\n\t// 1. POP before SMTP\n\tTIdPOP3 *idPop3 = new TIdPOP3();\n\tidPop3->Host = kPopServerAdr;\n\tidPop3->Port = kPopPort; // int\n\tidPop3->Username = kMyUserName;\n\tidPop3->Password = kMyPassword;\n\n\t// command is not valid in this state\n\tTIdSSLIOHandlerSocketOpenSSL *idSSL = new TIdSSLIOHandlerSocketOpenSSL();\n\tif (useTLS) {\n\t\tidSSL->Host = kPopServerAdr;\n\t\tidSSL->Port = kPopPort;\n\t\tidSSL->Destination = idSSL->Host + L\":\" + IntToStr(kPopPort);\n\t\tidPop3->IOHandler = idSSL;\n\t\tidPop3->UseTLS = utUseImplicitTLS;\n\t}\n\n\ttry {\n\t\tidPop3->Connect();\n\t\tidPop3->Disconnect();\n\t} catch (const Exception &e) {\n\t\tString msg = e.Message;\n\t\tdelete idPop3;\n\t\tdelete idSSL;\n\t\treturn; // fail\n\t}\n\tdelete idSSL;\n\tdelete idPop3;\n\n\t// 2. sending e-mail using SMTP\n\n\tTIdSMTP* smtp = new TIdSMTP(NULL);\n\tTIdSSLIOHandlerSocketOpenSSL * sslHandler = new TIdSSLIOHandlerSocketOpenSSL(NULL);\n\n    smtp->Host = kSmtpHost;\n//  sslHandler->Host = smtp->Host;\n//  sslHandler->Port = smtp->Port;\n//  sslHandler->Destination = sslHandler->Host + L\":\"\n//      + IntToStr(sslHandler->Port);\n    smtp->IOHandler = sslHandler;\n\tsmtp->Username = kMyUserName;\n\tsmtp->Password = kMyPassword;\n    smtp->Port = 587;\n    smtp->UseTLS = utUseExplicitTLS;\n\n    try {\n        smtp->Connect();\n\t} catch (const Exception &e) {\n\t\tString msg = e.Message;\n\t}\n\n    TIdMessage* msg = new TIdMessage(NULL);\n    msg->OnInitializeISO = IdMessage1InitializeISO;\n\tmsg->ContentType = \"text/plain\";\n    msg->CharSet = \"ISO-2022-JP\";\n    msg->ContentTransferEncoding = \"BASE64\";\n    msg->From->Name = kFromName;\n\tmsg->From->Address = kFromAddr;\n\tmsg->Recipients->EMailAddresses = kRecipients;\n\n\t// TODO: \u4ef6\u540d\u306f\u65e5\u672c\u8a9e\u3060\u3068\u6587\u5b57\u5316\u3051\u3059\u308b\n\tmsg->Subject = \"test mail from XE4 on \" + Now().FormatString(L\"hh:nn:ss\");\n\n\tmsg->Body->Text = \"\u30c6\u30b9\u30c8\u30e1\u30fc\u30eb\u306e\u672c\u6587\u3067\u3059\";\n\n    try {\n        smtp->Send(msg);\n    } catch (const Exception &e) {\n        String msg = e.Message;\n    }\n\n    smtp->Disconnect();\n    delete msg;\n    delete smtp;\n}\n```\n\n\u307e\u305f\u3001\u4e0a\u8a18\u306b\u304a\u3044\u3066\u4ee5\u4e0b\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u5fc5\u8981\u3042\u308a\u3002\n\u305f\u3060\u3057\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u306b\u95a2\u3057\u3066\u306f\u30b3\u30fc\u30c9\u57cb\u3081\u8fbc\u307f\u3057\u306a\u3044\u3088\u3046\u306b\u3002\n\n```\nString kMyUserName; // POP, SMTP\u63a5\u7d9a\u30e6\u30fc\u30b6\u540d\nString kSmtpHost; // SMTP\u30b5\u30fc\u30d0\u30fc\nString kPopServerAdr; // POP\u30b5\u30fc\u30d0\u30fc\nint kPopPort; // 995 or 110 or ?\nbool useTLS;\nString kFromName; // e.g. yamada\nString kFromAddr; // e.g. yamada@testmail.com\nString kRecipients; // \u9001\u4fe1\u5148\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\n```\n\n", "tags": ["cppBuilder", "pop3", "mail"]}