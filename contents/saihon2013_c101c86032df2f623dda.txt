{"context": " More than 1 year has passed since last update.\u554f\u984c\u306f\u3053\u3061\u3089\nhttp://nabetani.sakura.ne.jp/hena/ord19nebasec/\n\u4ed6\u306e\u89e3\u7b54\u4f8b\u306f\u3053\u3061\u3089\nhttp://qiita.com/Nabetani/items/9810b301648099028bf0\n\u2605\u4f5c\u6226\n\u6975\u5ea7\u6a19\u3092\u8003\u3048\u3066\u3001\u89d2\u5ea6\u306e\u7bc4\u56f2\u306e\u91cd\u306a\u308a\u3092\u8abf\u3079\u3066\u3001\u96a3\u63a5\u3057\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\n\u2605\u5883\u754c\u90e8\u5206\u306e\u51e6\u7406\uff08\u4f8b\u3000\u30bb\u30af\u30bf100\u3068107\u306a\u3069\uff09\n\u4f8b\u3048\u3070\u3001\u30bb\u30af\u30bf100\u304c\u4e0d\u826f\u3067\u3042\u308c\u3070\u3001\u30bb\u30af\u30bf108\uff08\u756a\u5175\uff09\u3092\u4e0d\u826f\u30bb\u30af\u30bf\u306b\u767b\u9332\u3057\u3066\u3044\u307e\u3059\u3002\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid str2ary(const char *str, int *bad_r, int *bad_th)\n{\n    int th_cnt[] = {0, 8, 16, 24, 32};\n    char *s1 = strdup(str);\n    char *code = strtok(s1, \",\");\n    for(int i = 0; code != NULL; i++)\n    {\n        int num = atoi(code);\n        bad_r[i] = num/100;\n        bad_th[i] = num%100;\n        if(bad_th[i] == 0)\n        {\n            i++;\n            bad_r[i] = bad_r[i-1];\n            bad_th[i] = th_cnt[bad_r[i-1]];\n        }\n        else if (bad_th[i] == th_cnt[bad_r[i]]-1)\n        {\n            i++;\n            bad_r[i] = bad_r[i-1];\n            bad_th[i] = -1;\n        }\n        code = strtok(NULL, \",\");\n    }\n    free(s1);\n}\n\nint check_th(int r1, int th1, int r2, int th2)\n{\n    int th_r[] = {0, 360000/8, 360000/16, 360000/24, 360000/32};\n    int check = (((th_r[r1]*th1) - th_r[r1]/2) <= ((th_r[r2]*th2) - th_r[r2]/2)\n            &&   ((th_r[r1]*th1) + th_r[r1]/2) >= ((th_r[r2]*th2) - th_r[r2]/2))\n            ||  (((th_r[r1]*th1) - th_r[r1]/2) <= ((th_r[r2]*th2) + th_r[r2]/2)\n            &&   ((th_r[r1]*th1) + th_r[r1]/2) >= ((th_r[r2]*th2) + th_r[r2]/2));\n    return check;\n}\n\nvoid solve(const char* str, char *res)\n{\n    int bad_r[30] = {0}, bad_th[30] = {0};\n    str2ary(str, bad_r, bad_th);\n\n    int th_cnt[] = {0, 8, 16, 24, 32};\n    for(int r = 1; r <= 4; r++)\n    {\n        for(int th = 0; th < th_cnt[r]; th++)\n        {\n            //printf(\"r,th\\t%d,%d\\n\", r, th);\n            int cnt = 0;\n            for(int j = 0; bad_r[j] != 0; j++)\n            {\n                int br = bad_r[j], bth = bad_th[j];\n                if(br == r+1)\n                {\n                    //printf(\"%d,%d\\n\", r, th);\n                    if(check_th(r, th, br, bth))\n                    {\n                        cnt++;\n                        //printf(\"br1,bth1\\t%d,%d\\n\", br, bth);\n                    }\n                }\n                else if(br == r-1)\n                {\n                    if(check_th(br, bth, r, th))\n                    {\n                        cnt++;\n                        //printf(\"br2,bth2\\t%d,%d\\n\", br, bth);\n                    }\n                }\n                else if ( br == r )\n                {\n                    if(bth == th+1 || bth == th-1)\n                    {\n                        //printf(\"%d,%d\\n\", br, bth);\n                        cnt++;\n                    }\n                }\n                if(cnt >= 2)\n                {\n                    int b_check = 0;\n                    for(int k = 0; bad_r[k] != 0; k++)\n                    {\n                        b_check |= (r == bad_r[k] && th == bad_th[k]);\n                    }\n                    if(b_check != 1)\n                    {\n                        char tmp[10] = {0};\n                        sprintf(tmp, \"%d,\", 100*r+th);\n                        strcat(res, tmp);\n                    }\n                    break;\n                }\n            }\n        }\n    }\n    //printf(\"%s\\n\", res);\n}\n\nvoid test(const char *str, const char *ans)\n{\n    static int n = 0;\n    char res[30] = {0};\n    solve(str, res);\n    if(strlen(res)==0)\n    {\n        strcat(res,\"none\");\n    }\n    printf(\"%d\\t%s\\t%s\\n\", n++, res, (strncmp(res, ans, strlen(ans)) == 0) ? \"OK\": \"***ng***\");\n}\n\nint main ()\n{\n    /*0*/ test( \"400,401,302\", \"300,301,402\" );\n    /*1*/ test( \"105,100,306,414\", \"none\" );\n    /*2*/ test( \"100\", \"none\" );\n    /*3*/ test( \"211\", \"none\" );\n    /*4*/ test( \"317\", \"none\" );\n    /*5*/ test( \"414\", \"none\" );\n    /*6*/ test( \"100,106\", \"107\" );\n    /*7*/ test( \"205,203\", \"102,204\" );\n    /*8*/ test( \"303,305\", \"304\" );\n    /*9*/ test( \"407,409\", \"306,408\" );\n    /*10*/ test( \"104,103\", \"207\" );\n    /*11*/ test( \"204,203\", \"102,305\" );\n    /*12*/ test( \"313,314\", \"209,418\" );\n    /*13*/ test( \"419,418\", \"314\" );\n    /*14*/ test( \"100,102,101\", \"201,203\" );\n    /*15*/ test( \"103,206,309\", \"205,207,308,310\" );\n    /*16*/ test( \"414,310,309\", \"206,311,413\" );\n    /*17*/ test( \"104,102,206,307,102,202\", \"101,103,203,204,205,207,308\" );\n    /*18*/ test( \"104,206,308,409,407\", \"103,205,207,306,307,309,408,410\" );\n    /*19*/ test( \"313,406,213,301,409,422,412,102,428\", \"none\" );\n    /*20*/ test( \"101,300,210,308,423,321,403,408,415\", \"none\" );\n    /*21*/ test( \"304,316,307,207,427,402,107,431,412,418,424\", \"none\" );\n    /*22*/ test( \"205,408,210,215,425,302,311,400,428,412\", \"none\" );\n    /*23*/ test( \"200,311,306,412,403,318,427,105,420\", \"none\" );\n    /*24*/ test( \"105,305,407,408,309,208,427\", \"104,209,306,406\" );\n    /*25*/ test( \"311,304,322,404,429,305,316\", \"203,303,321,405,406,430\" );\n    /*26*/ test( \"210,401,316,425,101\", \"211,315\" );\n    /*27*/ test( \"414,403,404,416,428,421\", \"303,415\" );\n    /*28*/ test( \"207,300,103,211,428\", \"104,206\" );\n    /*29*/ test( \"322,314,310\", \"none\" );\n    /*30*/ test( \"427,200,215\", \"100,323\" );\n    /*31*/ test( \"311,402,424,307,318,430,323,305,201\", \"200,204,301,302,306,322,423,425,431\" );\n    /*32*/ test( \"425,430,408\", \"none\" );\n    /*33*/ test( \"202,320,209,426\", \"319,427\" );\n    /*34*/ test( \"430,209,302,310,304,431,320\", \"202,303,323\" );\n    /*35*/ test( \"208,206,406,424,213,312\", \"207,311,313\" );\n    /*36*/ test( \"420,302,313,413,317,402\", \"301,403\" );\n    /*37*/ test( \"319,306,309,418,204,411\", \"305,307,308,412\" );\n    /*38*/ test( \"400,308,105,430,203,428,209\", \"104,210,429,431\" );\n    /*39*/ test( \"200,305,214\", \"215\" );\n    /*40*/ test( \"214,408,410,407,317,422\", \"306,316,409,423\" );\n    return 0;\n}\n\n\u554f\u984c\u306f\u3053\u3061\u3089\nhttp://nabetani.sakura.ne.jp/hena/ord19nebasec/\n\n\u4ed6\u306e\u89e3\u7b54\u4f8b\u306f\u3053\u3061\u3089\nhttp://qiita.com/Nabetani/items/9810b301648099028bf0\n\n\u2605\u4f5c\u6226\n\u6975\u5ea7\u6a19\u3092\u8003\u3048\u3066\u3001\u89d2\u5ea6\u306e\u7bc4\u56f2\u306e\u91cd\u306a\u308a\u3092\u8abf\u3079\u3066\u3001\u96a3\u63a5\u3057\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u2605\u5883\u754c\u90e8\u5206\u306e\u51e6\u7406\uff08\u4f8b\u3000\u30bb\u30af\u30bf100\u3068107\u306a\u3069\uff09\n\u4f8b\u3048\u3070\u3001\u30bb\u30af\u30bf100\u304c\u4e0d\u826f\u3067\u3042\u308c\u3070\u3001\u30bb\u30af\u30bf108\uff08\u756a\u5175\uff09\u3092\u4e0d\u826f\u30bb\u30af\u30bf\u306b\u767b\u9332\u3057\u3066\u3044\u307e\u3059\u3002\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid str2ary(const char *str, int *bad_r, int *bad_th)\n{\n\tint th_cnt[] = {0, 8, 16, 24, 32};\n\tchar *s1 = strdup(str);\n\tchar *code = strtok(s1, \",\");\n\tfor(int i = 0; code != NULL; i++)\n\t{\n\t\tint num = atoi(code);\n\t\tbad_r[i] = num/100;\n\t\tbad_th[i] = num%100;\n\t\tif(bad_th[i] == 0)\n\t\t{\n\t\t\ti++;\n\t\t\tbad_r[i] = bad_r[i-1];\n\t\t\tbad_th[i] = th_cnt[bad_r[i-1]];\n\t\t}\n\t\telse if (bad_th[i] == th_cnt[bad_r[i]]-1)\n\t\t{\n\t\t\ti++;\n\t\t\tbad_r[i] = bad_r[i-1];\n\t\t\tbad_th[i] = -1;\n\t\t}\n\t\tcode = strtok(NULL, \",\");\n\t}\n\tfree(s1);\n}\n\nint check_th(int r1, int th1, int r2, int th2)\n{\n\tint th_r[] = {0, 360000/8, 360000/16, 360000/24, 360000/32};\n\tint check = (((th_r[r1]*th1) - th_r[r1]/2) <= ((th_r[r2]*th2) - th_r[r2]/2)\n\t\t\t&&   ((th_r[r1]*th1) + th_r[r1]/2) >= ((th_r[r2]*th2) - th_r[r2]/2))\n\t\t\t||\t(((th_r[r1]*th1) - th_r[r1]/2) <= ((th_r[r2]*th2) + th_r[r2]/2)\n\t\t\t&&   ((th_r[r1]*th1) + th_r[r1]/2) >= ((th_r[r2]*th2) + th_r[r2]/2));\n\treturn check;\n}\n\nvoid solve(const char* str, char *res)\n{\n\tint bad_r[30] = {0}, bad_th[30] = {0};\n\tstr2ary(str, bad_r, bad_th);\n\n\tint th_cnt[] = {0, 8, 16, 24, 32};\n\tfor(int r = 1; r <= 4; r++)\n\t{\n\t\tfor(int th = 0; th < th_cnt[r]; th++)\n\t\t{\n\t\t\t//printf(\"r,th\\t%d,%d\\n\", r, th);\n\t\t\tint cnt = 0;\n\t\t\tfor(int j = 0; bad_r[j] != 0; j++)\n\t\t\t{\n\t\t\t\tint br = bad_r[j], bth = bad_th[j];\n\t\t\t\tif(br == r+1)\n\t\t\t\t{\n\t\t\t\t\t//printf(\"%d,%d\\n\", r, th);\n\t\t\t\t\tif(check_th(r, th, br, bth))\n\t\t\t\t\t{\n\t\t\t\t\t\tcnt++;\n\t\t\t\t\t\t//printf(\"br1,bth1\\t%d,%d\\n\", br, bth);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(br == r-1)\n\t\t\t\t{\n\t\t\t\t\tif(check_th(br, bth, r, th))\n\t\t\t\t\t{\n\t\t\t\t\t\tcnt++;\n\t\t\t\t\t\t//printf(\"br2,bth2\\t%d,%d\\n\", br, bth);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if ( br == r )\n\t\t\t\t{\n\t\t\t\t\tif(bth == th+1 || bth == th-1)\n\t\t\t\t\t{\n\t\t\t\t\t\t//printf(\"%d,%d\\n\", br, bth);\n\t\t\t\t\t\tcnt++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cnt >= 2)\n\t\t\t\t{\n\t\t\t\t\tint b_check = 0;\n\t\t\t\t\tfor(int k = 0; bad_r[k] != 0; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tb_check |= (r == bad_r[k] && th == bad_th[k]);\n\t\t\t\t\t}\n\t\t\t\t\tif(b_check != 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tchar tmp[10] = {0};\n\t\t\t\t\t\tsprintf(tmp, \"%d,\", 100*r+th);\n\t\t\t\t\t\tstrcat(res, tmp);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//printf(\"%s\\n\", res);\n}\n\nvoid test(const char *str, const char *ans)\n{\n\tstatic int n = 0;\n\tchar res[30] = {0};\n\tsolve(str, res);\n\tif(strlen(res)==0)\n\t{\n\t\tstrcat(res,\"none\");\n\t}\n\tprintf(\"%d\\t%s\\t%s\\n\", n++, res, (strncmp(res, ans, strlen(ans)) == 0) ? \"OK\": \"***ng***\");\n}\n\nint main ()\n{\n\t/*0*/ test( \"400,401,302\", \"300,301,402\" );\n\t/*1*/ test( \"105,100,306,414\", \"none\" );\n\t/*2*/ test( \"100\", \"none\" );\n\t/*3*/ test( \"211\", \"none\" );\n\t/*4*/ test( \"317\", \"none\" );\n\t/*5*/ test( \"414\", \"none\" );\n\t/*6*/ test( \"100,106\", \"107\" );\n\t/*7*/ test( \"205,203\", \"102,204\" );\n\t/*8*/ test( \"303,305\", \"304\" );\n\t/*9*/ test( \"407,409\", \"306,408\" );\n\t/*10*/ test( \"104,103\", \"207\" );\n\t/*11*/ test( \"204,203\", \"102,305\" );\n\t/*12*/ test( \"313,314\", \"209,418\" );\n\t/*13*/ test( \"419,418\", \"314\" );\n\t/*14*/ test( \"100,102,101\", \"201,203\" );\n\t/*15*/ test( \"103,206,309\", \"205,207,308,310\" );\n\t/*16*/ test( \"414,310,309\", \"206,311,413\" );\n\t/*17*/ test( \"104,102,206,307,102,202\", \"101,103,203,204,205,207,308\" );\n\t/*18*/ test( \"104,206,308,409,407\", \"103,205,207,306,307,309,408,410\" );\n\t/*19*/ test( \"313,406,213,301,409,422,412,102,428\", \"none\" );\n\t/*20*/ test( \"101,300,210,308,423,321,403,408,415\", \"none\" );\n\t/*21*/ test( \"304,316,307,207,427,402,107,431,412,418,424\", \"none\" );\n\t/*22*/ test( \"205,408,210,215,425,302,311,400,428,412\", \"none\" );\n\t/*23*/ test( \"200,311,306,412,403,318,427,105,420\", \"none\" );\n\t/*24*/ test( \"105,305,407,408,309,208,427\", \"104,209,306,406\" );\n\t/*25*/ test( \"311,304,322,404,429,305,316\", \"203,303,321,405,406,430\" );\n\t/*26*/ test( \"210,401,316,425,101\", \"211,315\" );\n\t/*27*/ test( \"414,403,404,416,428,421\", \"303,415\" );\n\t/*28*/ test( \"207,300,103,211,428\", \"104,206\" );\n\t/*29*/ test( \"322,314,310\", \"none\" );\n\t/*30*/ test( \"427,200,215\", \"100,323\" );\n\t/*31*/ test( \"311,402,424,307,318,430,323,305,201\", \"200,204,301,302,306,322,423,425,431\" );\n\t/*32*/ test( \"425,430,408\", \"none\" );\n\t/*33*/ test( \"202,320,209,426\", \"319,427\" );\n\t/*34*/ test( \"430,209,302,310,304,431,320\", \"202,303,323\" );\n\t/*35*/ test( \"208,206,406,424,213,312\", \"207,311,313\" );\n\t/*36*/ test( \"420,302,313,413,317,402\", \"301,403\" );\n\t/*37*/ test( \"319,306,309,418,204,411\", \"305,307,308,412\" );\n\t/*38*/ test( \"400,308,105,430,203,428,209\", \"104,210,429,431\" );\n\t/*39*/ test( \"200,305,214\", \"215\" );\n\t/*40*/ test( \"214,408,410,407,317,422\", \"306,316,409,423\" );\n\treturn 0;\n}\n```", "tags": ["C\u8a00\u8a9ec99", "\u3069\u3046\u66f8\u304f", "yhpg"]}