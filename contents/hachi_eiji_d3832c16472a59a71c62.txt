{"context": "\n\n\u30d0\u30fc\u30b8\u30e7\u30f3\n\nTerraform v0.7.0\nAWS\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f 2016/08/11\u6642\u70b9\n\n\n\u30b3\u30fc\u30c9\n\naws.tf\nvariable \"aws_access_key\" {}\nvariable \"aws_secret_key\" {}\nvariable \"aws_default_region\" {}\nvariable \"subnet_id\" {}\nvariable \"security_groups\" {}\nvariable \"key_name\" {}\n\nvariable \"const\" {\n  default = {\n    count = 2\n  }\n}\nprovider \"aws\" {\n  access_key    = \"${var.aws_access_key}\"\n  secret_key    = \"${var.aws_secret_key}\"\n  region        = \"${var.aws_default_region}\"\n}\n\n\nresource \"aws_instance\" \"web\" {\n  count         = \"${lookup(var.const, \"count\")}\"\n  ami           = \"ami-6869aa05\"\n  instance_type = \"m3.medium\"\n  subnet_id     = \"${var.subnet_id}\"\n  security_groups =  [\"${split(\",\", var.security_groups)}\"]\n  monitoring = true\n  key_name      = \"${var.key_name}\"\n  tags {\n    Name = \"${format(\"web%02d\", count.index + 1)}\"\n  }\n}\n\n# Cloud watch\n# 1\u5206\u3054\u3068\u306b2\u56de\u5931\u6557\u3059\u308b\u3068\u30ea\u30ab\u30d0\u30ea\u304c\u8d70\u308b\n# http://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/monitoring/UsingAlarmActions.html\n# namespace: https://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html\n# dimenstion: http://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/monitoring/ec2-metricscollected.html#ec2-metric-dimensions\nresource \"aws_cloudwatch_metric_alarm\" \"recovery\" {\n  alarm_name            = \"recovery ${format(\"web%02d\", count.index + 1)}\"\n  comparison_operator   = \"GreaterThanOrEqualToThreshold\"\n  evaluation_periods    = 1\n  metric_name           = \"StatusCheckFailed_System\"\n  namespace             = \"AWS/EC2\"\n  period                = 60\n  statistic             = \"Minimum\"\n  threshold             = 2\n  alarm_actions         = [\"arn:aws:automate:${var.aws_default_region}:ec2:recover\"]\n  dimensions = {\n    InstanceId = \"${element(aws_instance.web.*.id, count.index)}\"\n  }\n  count                 = \"${lookup(var.const, \"count\")}\"\n  # \u30c6\u30b9\u30c8\u7528\n  insufficient_data_actions = [\"arn:aws:automate:${var.aws_default_region}:ec2:recover\"]\n  # web\u306b\u4f9d\u5b58\u3055\u305b\u308b\n  depends_on            = [\"aws_instance.web\"]\n}\n\n\n\n\n## \u30d0\u30fc\u30b8\u30e7\u30f3\n- Terraform v0.7.0\n- AWS\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f 2016/08/11\u6642\u70b9\n\n## \u30b3\u30fc\u30c9\n\n``` aws.tf\nvariable \"aws_access_key\" {}\nvariable \"aws_secret_key\" {}\nvariable \"aws_default_region\" {}\nvariable \"subnet_id\" {}\nvariable \"security_groups\" {}\nvariable \"key_name\" {}\n\nvariable \"const\" {\n  default = {\n    count = 2\n  }\n}\nprovider \"aws\" {\n  access_key    = \"${var.aws_access_key}\"\n  secret_key    = \"${var.aws_secret_key}\"\n  region        = \"${var.aws_default_region}\"\n}\n\n\nresource \"aws_instance\" \"web\" {\n  count         = \"${lookup(var.const, \"count\")}\"\n  ami           = \"ami-6869aa05\"\n  instance_type = \"m3.medium\"\n  subnet_id     = \"${var.subnet_id}\"\n  security_groups =  [\"${split(\",\", var.security_groups)}\"]\n  monitoring = true\n  key_name      = \"${var.key_name}\"\n  tags {\n    Name = \"${format(\"web%02d\", count.index + 1)}\"\n  }\n}\n\n# Cloud watch\n# 1\u5206\u3054\u3068\u306b2\u56de\u5931\u6557\u3059\u308b\u3068\u30ea\u30ab\u30d0\u30ea\u304c\u8d70\u308b\n# http://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/monitoring/UsingAlarmActions.html\n# namespace: https://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html\n# dimenstion: http://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/monitoring/ec2-metricscollected.html#ec2-metric-dimensions\nresource \"aws_cloudwatch_metric_alarm\" \"recovery\" {\n  alarm_name            = \"recovery ${format(\"web%02d\", count.index + 1)}\"\n  comparison_operator   = \"GreaterThanOrEqualToThreshold\"\n  evaluation_periods    = 1\n  metric_name           = \"StatusCheckFailed_System\"\n  namespace             = \"AWS/EC2\"\n  period                = 60\n  statistic             = \"Minimum\"\n  threshold             = 2\n  alarm_actions         = [\"arn:aws:automate:${var.aws_default_region}:ec2:recover\"]\n  dimensions = {\n    InstanceId = \"${element(aws_instance.web.*.id, count.index)}\"\n  }\n  count                 = \"${lookup(var.const, \"count\")}\"\n  # \u30c6\u30b9\u30c8\u7528\n  insufficient_data_actions = [\"arn:aws:automate:${var.aws_default_region}:ec2:recover\"]\n  # web\u306b\u4f9d\u5b58\u3055\u305b\u308b\n  depends_on            = [\"aws_instance.web\"]\n}\n\n```\n", "tags": ["Terraform", "AWS"]}