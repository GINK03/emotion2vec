{"context": "\u6a2a\u6d5c\u3078\u306a\u3061\u3087\u3053\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u52c9\u5f37\u4f1a\u306b\u3066\u904e\u53bb\u306b\u51fa\u984c\u3055\u308c\u305fBit Tetris\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n\u56de\u7b54\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306f\u304a\u3088\u305d40\u5206\u524d\u5f8c\u3002\n\u89e3\u304d\u59cb\u3081\u3066\u3057\u3070\u3089\u304f\u5165\u529b\u5024\u304b\u3089\u56f3\u89e3\u306e\u72b6\u614b\u306b\u306a\u308b\u610f\u5473\u304c\u7406\u89e3\u3067\u304d\u305a\u3001\u6570\u5206\u9593\u554f\u984c\u6587\u3068\u306b\u3089\u3081\u3063\u3053\u3057\u3066\u3057\u307e\u3063\u305f\u3002\n\u7406\u89e3\u3067\u304d\u308c\u3070\u3042\u3068\u306f\u3059\u3093\u306a\u308a\u3068\u9032\u3093\u3060\u304c\u3001\u554f\u984c\u6587\u3092\u7406\u89e3\u3059\u308b\u306e\u306b\u6642\u9593\u3092\u304b\u3051\u3066\u3057\u307e\u3046\u306e\u306f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u4ee5\u524d\u306e\u554f\u984c\u3067\u3042\u308b...\u3002\nclass BitTetris\n  def initialize\n    @lines = []\n  end\n\n  def draw input\n    input.split(\"-\").each do |hex|\n      n = hex.hex\n      @lines.push 8.times.map{|i| n[i]}\n    end\n  end\n\n  def erase\n    7.downto(0) do |i|\n      if @lines.all?{|line| line[i] === 1}\n        @lines.size.times.each do |n|\n          @lines[n].delete_at i\n          @lines[n].push 0\n        end\n      end\n    end\n  end\n\n  def output\n    @lines.map{|line|\n      \"00#{line.reverse.join.to_i(2).to_s(16)}\"[-2..-1]\n    }.join(\"-\")\n  end\nend\n\ntest = <<_TEST\n/* 0*/ {\"ff-2f-23-f3-77-7f-3b\", \"1f-03-00-1c-0d-0f-06\" },\n/* 1*/ {\"01\", \"00\" },\n/* 2*/ {\"00\", \"00\" },\n/* 3*/ {\"7a-4e\", \"0c-02\" },\n/* 4*/ {\"56-b6\", \"08-14\" },\n/* 5*/ {\"12-12-12\", \"00-00-00\" },\n/* 6*/ {\"de-ff-7b\", \"0a-0f-05\" },\n/* 7*/ {\"95-be-d0\", \"05-1e-20\" },\n/* 8*/ {\"7c-b0-bb\", \"1c-20-2b\" },\n/* 9*/ {\"7a-b6-31-6a\", \"3a-56-11-2a\" },\n/*10*/ {\"32-0e-23-82\", \"18-06-11-40\" },\n/*11*/ {\"ff-7f-bf-df-ef\", \"0f-07-0b-0d-0e\" },\n/*12*/ {\"75-df-dc-6e-42\", \"35-5f-5c-2e-02\" },\n/*13*/ {\"62-51-ef-c7-f8\", \"22-11-6f-47-78\" },\n/*14*/ {\"0c-47-8e-dd-5d-17\", \"04-23-46-6d-2d-0b\" },\n/*15*/ {\"aa-58-5b-6d-9f-1f\", \"52-28-2b-35-4f-0f\" },\n/*16*/ {\"ff-55-d5-75-5d-57\", \"0f-00-08-04-02-01\" },\n/*17*/ {\"fe-fd-fb-f7-ef-df-bf\", \"7e-7d-7b-77-6f-5f-3f\" },\n/*18*/ {\"fd-fb-f7-ef-df-bf-7f\", \"7e-7d-7b-77-6f-5f-3f\" },\n/*19*/ {\"d9-15-b5-d7-1b-9f-de\", \"69-05-55-67-0b-4f-6e\" },\n/*20*/ {\"38-15-fd-50-10-96-ba\", \"18-05-7d-20-00-46-5a\" },\n/*21*/ {\"fe-fd-fb-f7-ef-df-bf-7f\", \"fe-fd-fb-f7-ef-df-bf-7f\" },\n_TEST\n\nrequire 'minitest/autorun'\n\ndescribe 'BitTetris' do\n  test.split(\"\\n\").each do |line|\n    t, n, input, expect = line.match(/^\\/\\*\\s*(\\d+)\\*\\/\\s{\"([^\"]+)\",\\s\"([^\"]+)\"\\s},$/).to_a\n    it input do\n      game = BitTetris.new\n      game.draw input\n      game.erase\n      assert_equal game.output, expect\n    end\n  end\nend\n\n\n[\u6a2a\u6d5c\u3078\u306a\u3061\u3087\u3053\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u52c9\u5f37\u4f1a](https://yhpg.doorkeeper.jp/)\u306b\u3066\u904e\u53bb\u306b\u51fa\u984c\u3055\u308c\u305f[Bit Tetris](http://nabetani.sakura.ne.jp/hena/ord2/)\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n\u56de\u7b54\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306f\u304a\u3088\u305d40\u5206\u524d\u5f8c\u3002\n\n\u89e3\u304d\u59cb\u3081\u3066\u3057\u3070\u3089\u304f\u5165\u529b\u5024\u304b\u3089\u56f3\u89e3\u306e\u72b6\u614b\u306b\u306a\u308b\u610f\u5473\u304c\u7406\u89e3\u3067\u304d\u305a\u3001\u6570\u5206\u9593\u554f\u984c\u6587\u3068\u306b\u3089\u3081\u3063\u3053\u3057\u3066\u3057\u307e\u3063\u305f\u3002\n\u7406\u89e3\u3067\u304d\u308c\u3070\u3042\u3068\u306f\u3059\u3093\u306a\u308a\u3068\u9032\u3093\u3060\u304c\u3001\u554f\u984c\u6587\u3092\u7406\u89e3\u3059\u308b\u306e\u306b\u6642\u9593\u3092\u304b\u3051\u3066\u3057\u307e\u3046\u306e\u306f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u4ee5\u524d\u306e\u554f\u984c\u3067\u3042\u308b...\u3002\n\n```ruby\nclass BitTetris\n  def initialize\n    @lines = []\n  end\n\n  def draw input\n    input.split(\"-\").each do |hex|\n      n = hex.hex\n      @lines.push 8.times.map{|i| n[i]}\n    end\n  end\n\n  def erase\n    7.downto(0) do |i|\n      if @lines.all?{|line| line[i] === 1}\n        @lines.size.times.each do |n|\n          @lines[n].delete_at i\n          @lines[n].push 0\n        end\n      end\n    end\n  end\n\n  def output\n    @lines.map{|line|\n      \"00#{line.reverse.join.to_i(2).to_s(16)}\"[-2..-1]\n    }.join(\"-\")\n  end\nend\n\ntest = <<_TEST\n/* 0*/ {\"ff-2f-23-f3-77-7f-3b\", \"1f-03-00-1c-0d-0f-06\" },\n/* 1*/ {\"01\", \"00\" },\n/* 2*/ {\"00\", \"00\" },\n/* 3*/ {\"7a-4e\", \"0c-02\" },\n/* 4*/ {\"56-b6\", \"08-14\" },\n/* 5*/ {\"12-12-12\", \"00-00-00\" },\n/* 6*/ {\"de-ff-7b\", \"0a-0f-05\" },\n/* 7*/ {\"95-be-d0\", \"05-1e-20\" },\n/* 8*/ {\"7c-b0-bb\", \"1c-20-2b\" },\n/* 9*/ {\"7a-b6-31-6a\", \"3a-56-11-2a\" },\n/*10*/ {\"32-0e-23-82\", \"18-06-11-40\" },\n/*11*/ {\"ff-7f-bf-df-ef\", \"0f-07-0b-0d-0e\" },\n/*12*/ {\"75-df-dc-6e-42\", \"35-5f-5c-2e-02\" },\n/*13*/ {\"62-51-ef-c7-f8\", \"22-11-6f-47-78\" },\n/*14*/ {\"0c-47-8e-dd-5d-17\", \"04-23-46-6d-2d-0b\" },\n/*15*/ {\"aa-58-5b-6d-9f-1f\", \"52-28-2b-35-4f-0f\" },\n/*16*/ {\"ff-55-d5-75-5d-57\", \"0f-00-08-04-02-01\" },\n/*17*/ {\"fe-fd-fb-f7-ef-df-bf\", \"7e-7d-7b-77-6f-5f-3f\" },\n/*18*/ {\"fd-fb-f7-ef-df-bf-7f\", \"7e-7d-7b-77-6f-5f-3f\" },\n/*19*/ {\"d9-15-b5-d7-1b-9f-de\", \"69-05-55-67-0b-4f-6e\" },\n/*20*/ {\"38-15-fd-50-10-96-ba\", \"18-05-7d-20-00-46-5a\" },\n/*21*/ {\"fe-fd-fb-f7-ef-df-bf-7f\", \"fe-fd-fb-f7-ef-df-bf-7f\" },\n_TEST\n\nrequire 'minitest/autorun'\n\ndescribe 'BitTetris' do\n  test.split(\"\\n\").each do |line|\n    t, n, input, expect = line.match(/^\\/\\*\\s*(\\d+)\\*\\/\\s{\"([^\"]+)\",\\s\"([^\"]+)\"\\s},$/).to_a\n    it input do\n      game = BitTetris.new\n      game.draw input\n      game.erase\n      assert_equal game.output, expect\n    end\n  end\nend\n```\n", "tags": ["Ruby", "\u3069\u3046\u66f8\u304f", "yhpg"]}