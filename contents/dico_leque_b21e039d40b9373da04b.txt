{"context": " More than 1 year has passed since last update.\u9045\u5ef6\u8a55\u4fa1\uff08\u307e\u305f\u306f\u5faa\u74b0\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\uff1f\uff09\u306e\u9762\u767d\u3055\u3092\u8aac\u660e\u3059\u308b\u4f8b\u3068\u3057\u3066 repMin \u304c\u3042\u308b\uff08Repmin Problem - Circular programming - Haskell\uff09\u3002\n\u8449\u3068\u3057\u3066\u6574\u6570\u5024\u3092\u6301\u3064\u6728\u304c\u3042\u308b\u3068\u304d\u3001\u3059\u3079\u3066\u306e\u8449\u3092\u8449\u306e\u6700\u5c0f\u5024\u3067\u7f6e\u304d\u63db\u3048\u308b\u3068\u3044\u3046\u554f\u984c\u3060\u3002\n\nrepMin.hs\ndata Tree\n    = Leaf Int\n    | Branch Tree Tree\n    deriving Show\n\n\n\u5358\u7d14\u306a\u89e3\u6cd5\u3067\u306f\u3001\u307e\u305a\u6728\u3092\u4e00\u5ea6\u8d70\u67fb\u3057\u3066\u8449\u306e\u6700\u5c0f\u5024\u3092\u898b\u3064\u3051\u51fa\u3057\u3001\u3082\u3046\u4e00\u5ea6\u8d70\u67fb\u3057\u3066\u3059\u3079\u3066\u306e\u8449\u3092\u305d\u306e\u5024\u3067\u7f6e\u304d\u63db\u3048\u308b\u3002\n\nrepMin.hs\nrepMin :: Tree -> Tree\nrepMin tree = repLeaf (findMin tree) tree\n  where\n    findMin (Leaf n) = n\n    findMin (Branch t1 t2) = findMin t1 `min` findMin t2\n    repLeaf n (Leaf _) = Leaf n\n    repLeaf n (Branch t1 t2) = Branch (repLeaf n t1) (repLeaf n t2)\n\n\n\u3057\u304b\u3057\u3001\u6b21\u306e\u3088\u3046\u306b\u3059\u308b\u3068\u6728\u306e\u8d70\u67fb\u3092\u4e00\u56de\u306b\u3067\u304d\u308b\u3002\n\nrepMin.hs\nrepMin' :: Tree -> Tree\nrepMin' tree = t\n  where\n    (m, t) = replace m tree\n    replace m (Leaf n) = (n, Leaf m)\n    replace m (Branch t1 t2) =\n      let\n        (m1, t1') = replace m t1\n        (m2, t2') = replace m t2\n      in (m1 `min` m2, Branch t1' t2')\n\n\n(m, t) = replace m tree \u306e\u4e21\u8fba\u306b m \u304c\u73fe\u308c\u3066\u3044\u308b\u306e\u304c\u30df\u30bd\u3060\u3002\u3053\u3053\u3067\u3001\u6700\u5c0f\u5024 m \u306f\u5b9f\u969b\u306b\u5024\u304c\u5fc5\u8981\u306b\u306a\u308b\u307e\u3067\u306f\u30b5\u30f3\u30af\uff08\u672a\u8a55\u4fa1\u306e\u5024\uff09\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\u6b63\u683c\u8a55\u4fa1\u306e\u8a00\u8a9e\u306e\u4f8b\u3068\u3057\u3066\u3001 OCaml \u3067\u3001\u9045\u5ef6\u8a55\u4fa1\u3092\u4f7f\u308f\u305a\u540c\u3058\u304f\u3072\u3068\u3064\u306e\u518d\u5e30\u95a2\u6570\u3067\u66f8\u3044\u3066\u307f\u308b\u3002\ntype tree\n  = Leaf of int\n  | Branch of tree * tree\n\nlet rep_min tree =\n  let rec replace = function\n    | Leaf n -> (n, fun m -> Leaf m)\n    | Branch (t1, t2) ->\n      let (m1, c1) = replace t1\n      and (m2, c2) = replace t2\n      in (min m1 m2, fun m -> Branch (c1 m, c2 m))\n  in\n  let (m, c) = replace tree in\n  c m\n\nHaskell \u7248\u3067\u300c\u6700\u5c0f\u5024\uff08\u3092\u8868\u3059\u30b5\u30f3\u30af\uff09\u300d\u3068\u300c\u8449\u3092\u6700\u5c0f\u5024\u3067\u7f6e\u304d\u63db\u3048\u305f\u6728\uff08\u3092\u8868\u3059\u30b5\u30f3\u30af\uff09\u300d\u3092\u8fd4\u3057\u3066\u3044\u305f\u306e\u3092\u3001\u300c\u6700\u5c0f\u5024\u300d\u3068\u300c\u5024\u3092\u53d7\u3051\u53d6\u308b\u3068\u5143\u306e\u6728\u306e\u8449\u3092\u305d\u306e\u5024\u3067\u7f6e\u304d\u63db\u3048\u305f\u6728\u3092\u8fd4\u3059\u95a2\u6570\u300d\u3092\u8fd4\u3059\u3088\u3046\u306b\u3059\u308b\u3002\u300c\u6700\u5c0f\u5024\u300d\u3092\u8a08\u7b97\u3057\u3064\u3064\u3001\u300e\u300c\u6700\u5c0f\u5024\u300d\u3092\u4f7f\u3046\u8a08\u7b97\u300f\u3092\u967d\u306b\u81ea\u5206\u3067\u7d44\u307f\u7acb\u3066\u3066\u3084\u308b\u3002\n\u9045\u5ef6\u8a55\u4fa1\uff08\u307e\u305f\u306f\u5faa\u74b0\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\uff1f\uff09\u306e\u9762\u767d\u3055\u3092\u0001\u8aac\u660e\u3059\u308b\u4f8b\u3068\u3057\u3066 `repMin` \u304c\u3042\u308b\uff08[Repmin Problem - Circular programming - Haskell](https://www.haskell.org/haskellwiki/Circular_programming#Repmin_problem)\uff09\u3002\n\n\u8449\u3068\u3057\u3066\u6574\u6570\u5024\u3092\u6301\u3064\u6728\u304c\u3042\u308b\u3068\u304d\u3001\u3059\u3079\u3066\u306e\u8449\u3092\u8449\u306e\u6700\u5c0f\u5024\u3067\u7f6e\u304d\u63db\u3048\u308b\u3068\u3044\u3046\u554f\u984c\u3060\u3002\n\n```haskell:repMin.hs\ndata Tree\n    = Leaf Int\n    | Branch Tree Tree\n    deriving Show\n````\n\n\u5358\u7d14\u306a\u89e3\u6cd5\u3067\u306f\u3001\u307e\u305a\u6728\u3092\u4e00\u5ea6\u8d70\u67fb\u3057\u3066\u8449\u306e\u6700\u5c0f\u5024\u3092\u898b\u3064\u3051\u51fa\u3057\u3001\u3082\u3046\u4e00\u5ea6\u8d70\u67fb\u3057\u3066\u3059\u3079\u3066\u306e\u8449\u3092\u305d\u306e\u5024\u3067\u7f6e\u304d\u63db\u3048\u308b\u3002\n\n```haskell:repMin.hs\nrepMin :: Tree -> Tree\nrepMin tree = repLeaf (findMin tree) tree\n  where\n    findMin (Leaf n) = n\n    findMin (Branch t1 t2) = findMin t1 `min` findMin t2\n    repLeaf n (Leaf _) = Leaf n\n    repLeaf n (Branch t1 t2) = Branch (repLeaf n t1) (repLeaf n t2)\n```\n\n\u3057\u304b\u3057\u3001\u6b21\u306e\u3088\u3046\u306b\u3059\u308b\u3068\u6728\u306e\u8d70\u67fb\u3092\u4e00\u56de\u306b\u3067\u304d\u308b\u3002\n\n```haskell:repMin.hs\nrepMin' :: Tree -> Tree\nrepMin' tree = t\n  where\n    (m, t) = replace m tree\n    replace m (Leaf n) = (n, Leaf m)\n    replace m (Branch t1 t2) =\n      let\n        (m1, t1') = replace m t1\n        (m2, t2') = replace m t2\n      in (m1 `min` m2, Branch t1' t2')\n```\n\n`(m, t) = replace m tree` \u306e\u4e21\u8fba\u306b `m` \u304c\u73fe\u308c\u3066\u3044\u308b\u306e\u304c\u30df\u30bd\u3060\u3002\u3053\u3053\u3067\u3001\u6700\u5c0f\u5024 `m` \u306f\u5b9f\u969b\u306b\u5024\u304c\u5fc5\u8981\u306b\u306a\u308b\u307e\u3067\u306f\u30b5\u30f3\u30af\uff08\u672a\u8a55\u4fa1\u306e\u5024\uff09\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n\u6b63\u683c\u8a55\u4fa1\u306e\u8a00\u8a9e\u306e\u4f8b\u3068\u3057\u3066\u3001 OCaml \u3067\u3001\u9045\u5ef6\u8a55\u4fa1\u3092\u4f7f\u308f\u305a\u540c\u3058\u304f\u3072\u3068\u3064\u306e\u518d\u5e30\u95a2\u6570\u3067\u66f8\u3044\u3066\u307f\u308b\u3002\n\n```ocaml:\ntype tree\n  = Leaf of int\n  | Branch of tree * tree\n\nlet rep_min tree =\n  let rec replace = function\n    | Leaf n -> (n, fun m -> Leaf m)\n    | Branch (t1, t2) ->\n      let (m1, c1) = replace t1\n      and (m2, c2) = replace t2\n      in (min m1 m2, fun m -> Branch (c1 m, c2 m))\n  in\n  let (m, c) = replace tree in\n  c m\n```\n\nHaskell \u7248\u3067\u300c\u6700\u5c0f\u5024\uff08\u3092\u8868\u3059\u30b5\u30f3\u30af\uff09\u300d\u3068\u300c\u8449\u3092\u6700\u5c0f\u5024\u3067\u7f6e\u304d\u63db\u3048\u305f\u0002\u6728\uff08\u3092\u8868\u3059\u30b5\u30f3\u30af\uff09\u300d\u3092\u8fd4\u3057\u3066\u3044\u305f\u306e\u3092\u3001\u300c\u6700\u5c0f\u5024\u300d\u3068\u300c\u5024\u3092\u53d7\u3051\u53d6\u308b\u3068\u5143\u306e\u6728\u306e\u8449\u3092\u305d\u306e\u5024\u3067\u7f6e\u304d\u63db\u3048\u305f\u6728\u3092\u8fd4\u3059\u95a2\u6570\u300d\u3092\u8fd4\u3059\u3088\u3046\u306b\u3059\u308b\u3002\u300c\u6700\u5c0f\u5024\u300d\u3092\u8a08\u7b97\u3057\u3064\u3064\u3001\u300e\u300c\u6700\u5c0f\u5024\u300d\u3092\u4f7f\u3046\u8a08\u7b97\u300f\u3092\u967d\u306b\u81ea\u5206\u3067\u7d44\u307f\u7acb\u3066\u3066\u3084\u308b\u3002\n", "tags": ["Haskell", "OCaml", "\u9045\u5ef6\u8a55\u4fa1"]}