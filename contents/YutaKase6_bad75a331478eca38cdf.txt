{"context": "\n\n\u6982\u8981\nAppleWatch\u3067\u5fc3\u62cd\u6570\u3092\u6e2c\u5b9a\u3059\u308b\u30a2\u30d7\u30ea\u3092\u3064\u304f\u308b\n\n\n\u6ce8\u610f\n\u3069\u3046\u3084\u3089\u73fe\u6642\u70b9\u3067\u3001\u76f4\u63a5\u5fc3\u62cd\u8a08\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u306f\u51fa\u6765\u306a\u3044\u3063\u307d\u3044\n\u3042\u304f\u307e\u3067\u5fc3\u62cd\u6570\u3092\u8a08\u6e2c\u3059\u308b\u306e\u306fapple\u306e\u516c\u5f0f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3001\u305d\u3053\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u3063\u3066\u3044\u3046\u6d41\u308c\u306b\u306a\u308b\n\n\n\u5927\u307e\u304b\u306a\u6d41\u308c\n\nHealthKit\u3078\u306e\u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u306e\u53d6\u5f97\nHealthKit\u3078\u5fc3\u62cd\u8a08\u6e2c\u30af\u30a8\u30ea\u3092\u5b9f\u884c\n\u8fd4\u5374\u5024\u3092\u753b\u9762\u306b\u8868\u793a\n\n\n\u6e96\u5099\nCapabilities\u306bHealthKit\u3092\u8ffd\u52a0\n\nWatchKitExtenssion\u306eCapabilities\u306b\u3082HealthKit\u3092\u8ffd\u52a0\n\n\n\u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u306e\u53d6\u5f97\nHealthKit\u3067\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u30af\u30e9\u30b9HKHealthStore\u306e\u95a2\u6570\u3092\u5229\u7528\u3057\u3066\u8a8d\u8a3c\u3092\u884c\u3046\n\u8a8d\u8a3c\u306e\u969b\u306b\u30a2\u30d7\u30ea\u3067\u5229\u7528\u3059\u308b\u30c7\u30fc\u30bf\u306e\u7a2e\u985e\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n\u4eca\u56de\u306f\u5fc3\u62cd\u6570\u3092\u5229\u7528\u3057\u305f\u3044\u306e\u3067HKQuantityTypeIdentifierHeartRate\u3092\u6307\u5b9a\n\nInterfaceController.swift\n\n// HealthKit\u3067\u6271\u3046\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3059\u308b\u30af\u30e9\u30b9(\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u66f8\u304d\u306b\u306f\u30e6\u30fc\u30b6\u306e\u8a31\u53ef\u304c\u5fc5\u8981)\nlet healthStore = HKHealthStore()\n\noverride func willActivate() {\n        // This method is called when watch view controller is about to be visible to user\n        super.willActivate()\n\n        // HealthKit\u304c\u30c7\u30d0\u30a4\u30b9\u4e0a\u3067\u5229\u7528\u3067\u304d\u308b\u304b\u78ba\u8a8d\n        guard HKHealthStore.isHealthDataAvailable() else {\n            self.label.setText(\"not available\")\n            return\n        }\n\n        // \u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u3092\u30e6\u30fc\u30b6\u306b\u6c42\u3081\u308b\n        let dataTypes = Set([HKQuantityType.quantityTypeForIdentifier(HKQuantityTypeIdentifierHeartRate)!])\n        self.healthStore.requestAuthorizationToShareTypes(nil, readTypes: dataTypes) { (success, error) -> Void in\n            guard success else {\n                self.label.setText(\"not allowed\")\n                return\n            }\n        }\n}\n\n\n\u3055\u3089\u306biOS\u5074\u306eAppDelegate.swift\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\n\nAppDelegate.swift\nimport UIKit\nimport HealthKit\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n    var window: UIWindow?\n    let healthStore = HKHealthStore()\n\n    func applicationShouldRequestHealthAuthorization(application: UIApplication) {\n        guard HKHealthStore.isHealthDataAvailable() else {\n            return\n        }\n\n        let dataTypes = Set([HKQuantityType.quantityTypeForIdentifier(HKQuantityTypeIdentifierHeartRate)!])\n        healthStore.requestAuthorizationToShareTypes(nil, readTypes: dataTypes, completion: { (result, error) -> Void in\n        })\n    }\n}\n\n\n\u5b9f\u884c\u3059\u308b\u3068AppleWatch\u4e0a\u3067HealthKit\u3078\u306e\u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u306e\u30c0\u30a4\u30a2\u30ed\u30b0\u304c\u8868\u793a\u3055\u308c\u3001iOS\u4e0a\u3067\u8a31\u53ef\u3059\u308b\u304b\u3069\u3046\u304b\u306e\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u308b\n\nHealthKit\u3078\u5fc3\u62cd\u6e2c\u5b9a\u306e\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3001\u753b\u9762\u8868\u793a\n\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u305f\u3089\u5fc3\u62cd\u6570\u306e\u6e2c\u5b9a\u3092\u59cb\u3081\u308b\u3088\u3046\u306b\u5b9f\u88c5\n\u30dc\u30bf\u30f3\u3068\u30e9\u30d9\u30eb\u3092\u9069\u5f53\u306b\u914d\u7f6e\u3057\u3066\u5b8c\u6210\n\nInterfaceController.swift\n    // \u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u306e\u5358\u4f4d\u3001\u4eca\u56de\u306fBPM\n    let heartRateUnit = HKUnit(fromString: \"count/min\")\n    // HealthStore\u3078\u306e\u30af\u30a8\u30ea\n    var heartRateQuery: HKQuery?\n\n    @IBAction func buttonTapped() {\n        if self.heartRateQuery == nil {\n            // start\n            // \u30af\u30a8\u30ea\u751f\u6210\n            self.heartRateQuery = self.createStreamingQuery()\n            // \u30af\u30a8\u30ea\u5b9f\u884c\n            self.healthStore.executeQuery(self.heartRateQuery!)\n            self.button.setTitle(\"Stop\")\n            self.messageLabel.setText(\"Measuring...\")\n        }\n        else {\n            // end\n            self.healthStore.stopQuery(self.heartRateQuery!)\n            self.heartRateQuery = nil\n            self.button.setTitle(\"Start\")\n            self.messageLabel.setText(\"\")\n        }\n    }\n\n    // healthStore\u3078\u306e\u30af\u30a8\u30ea\u751f\u6210\n    private func createStreamingQuery() -> HKQuery {\n        let predicate = HKQuery.predicateForSamplesWithStartDate(NSDate(), endDate: nil, options: .None)\n\n        // HKAnchoredObjectQuery\u3060\u3068\u4ed6\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u308b\u66f4\u65b0\u3092\u691c\u77e5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n        let query = HKAnchoredObjectQuery(type: heartRateType, predicate: predicate, anchor: nil, limit: Int(HKObjectQueryNoLimit)) { (query, samples, deletedObjects, anchor, error) -> Void in\n            self.addSamples(samples)\n        }\n        // Handler\u767b\u9332\u3001\u4e0a\u3067\u3084\u3063\u3066\u308b\u304b\u3089\u3044\u3089\u306a\u3044\u304b\u3082...\n        query.updateHandler = { (query, samples, deletedObjects, anchor, error) -> Void in\n            self.addSamples(samples)\n        }\n\n        return query\n    }\n\n    // \u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u3092Label\u306b\u8868\u793a\n    private func addSamples(samples: [HKSample]?) {\n        guard let samples = samples as? [HKQuantitySample] else {\n            return\n        }\n        guard let quantity = samples.last?.quantity else {\n            return\n        }\n        label.setText(\"\\(quantity.doubleValueForUnit(heartRateUnit))\")\n    }\n\n\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\nInterfaceController.swift\n\nimport WatchKit\nimport Foundation\nimport HealthKit\n\nclass InterfaceController: WKInterfaceController {\n\n    @IBOutlet var label: WKInterfaceLabel!\n    @IBOutlet var messageLabel: WKInterfaceLabel!\n    @IBOutlet var button: WKInterfaceButton!\n\n    // HealthKit\u3067\u6271\u3046\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3059\u308b\u30af\u30e9\u30b9(\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u66f8\u304d\u306b\u306f\u30e6\u30fc\u30b6\u306e\u8a31\u53ef\u304c\u5fc5\u8981)\n    let healthStore = HKHealthStore()\n    // \u53d6\u5f97\u3057\u305f\u3044\u30c7\u30fc\u30bf\u306e\u8b58\u5225\u5b50\u3001\u4eca\u56de\u306f\u5fc3\u62cd\u6570\n    let heartRateType = HKQuantityType.quantityTypeForIdentifier(HKQuantityTypeIdentifierHeartRate)!\n    // \u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u306e\u5358\u4f4d\u3001\u4eca\u56de\u306fBPM\n    let heartRateUnit = HKUnit(fromString: \"count/min\")\n    // HealthStore\u3078\u306e\u30af\u30a8\u30ea\n    var heartRateQuery: HKQuery?\n\n    override func awakeWithContext(context: AnyObject?) {\n        super.awakeWithContext(context)\n\n        // Configure interface objects here.\n    }\n\n    override func willActivate() {\n        // This method is called when watch view controller is about to be visible to user\n        super.willActivate()\n\n        // HealthKit\u304c\u30c7\u30d0\u30a4\u30b9\u4e0a\u3067\u5229\u7528\u3067\u304d\u308b\u304b\u78ba\u8a8d\n        guard HKHealthStore.isHealthDataAvailable() else {\n            self.label.setText(\"not available\")\n            return\n        }\n\n        // \u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u3092\u30e6\u30fc\u30b6\u306b\u6c42\u3081\u308b\n        let dataTypes = Set([self.heartRateType])\n        self.healthStore.requestAuthorizationToShareTypes(nil, readTypes: dataTypes) { (success, error) -> Void in\n            guard success else {\n                self.label.setText(\"not allowed\")\n                return\n            }\n        }\n    }\n\n    override func didDeactivate() {\n        // This method is called when watch view controller is no longer visible\n        super.didDeactivate()\n    }\n\n    @IBAction func buttonTapped() {\n        if self.heartRateQuery == nil {\n            // start\n            // \u30af\u30a8\u30ea\u751f\u6210\n            self.heartRateQuery = self.createStreamingQuery()\n            // \u30af\u30a8\u30ea\u5b9f\u884c\n            self.healthStore.executeQuery(self.heartRateQuery!)\n            self.button.setTitle(\"Stop\")\n            self.messageLabel.setText(\"Measuring...\")\n        }\n        else {\n            // end\n            self.healthStore.stopQuery(self.heartRateQuery!)\n            self.heartRateQuery = nil\n            self.button.setTitle(\"Start\")\n            self.messageLabel.setText(\"\")\n        }\n    }\n\n    // healthStore\u3078\u306e\u30af\u30a8\u30ea\u751f\u6210\n    private func createStreamingQuery() -> HKQuery {\n        let predicate = HKQuery.predicateForSamplesWithStartDate(NSDate(), endDate: nil, options: .None)\n\n        // HKAnchoredObjectQuery\u3060\u3068\u4ed6\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u308b\u66f4\u65b0\u3092\u691c\u77e5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n        let query = HKAnchoredObjectQuery(type: heartRateType, predicate: predicate, anchor: nil, limit: Int(HKObjectQueryNoLimit)) { (query, samples, deletedObjects, anchor, error) -> Void in\n            self.addSamples(samples)\n        }\n        // Handler\u767b\u9332\u3001\u4e0a\u3067\u3084\u3063\u3066\u308b\u304b\u3089\u3044\u3089\u306a\u3044\u304b\u3082...\n        query.updateHandler = { (query, samples, deletedObjects, anchor, error) -> Void in\n            self.addSamples(samples)\n        }\n\n        return query\n    }\n\n    // \u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u3092Label\u306b\u8868\u793a\n    private func addSamples(samples: [HKSample]?) {\n        guard let samples = samples as? [HKQuantitySample] else {\n            return\n        }\n        guard let quantity = samples.last?.quantity else {\n            return\n        }\n        label.setText(\"\\(quantity.doubleValueForUnit(heartRateUnit))\")\n    }\n}\n\n\n\nAppDelegate.swift\nimport UIKit\nimport HealthKit\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n    var window: UIWindow?\n    let healthStore = HKHealthStore()\n\n    func applicationShouldRequestHealthAuthorization(application: UIApplication) {\n        guard HKHealthStore.isHealthDataAvailable() else {\n            return\n        }\n\n        let dataTypes = Set([HKQuantityType.quantityTypeForIdentifier(HKQuantityTypeIdentifierHeartRate)!])\n        healthStore.requestAuthorizationToShareTypes(nil, readTypes: dataTypes, completion: { (result, error) -> Void in\n        })\n    }\n\n    func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool {\n        // Override point for customization after application launch.\n        return true\n    }\n\n    func applicationWillResignActive(application: UIApplication) {\n        // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.\n        // Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.\n    }\n\n    func applicationDidEnterBackground(application: UIApplication) {\n        // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.\n        // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.\n    }\n\n    func applicationWillEnterForeground(application: UIApplication) {\n        // Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background.\n    }\n\n    func applicationDidBecomeActive(application: UIApplication) {\n        // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.\n    }\n\n    func applicationWillTerminate(application: UIApplication) {\n        // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.\n    }\n\n\n}\n\n\n\n\n\n\u53c2\u8003\nwatchOS-2-Sampler\nHealthKit Framework Reference\n[iOS 8] HealthKit\u3092\u5b9f\u88c5\u3059\u308b(1) HealthKit\u7c21\u6613\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\nHealthkit\u304b\u3089\u8108\u62cd\u3092\u53d6\u5f97\u3059\u308bapple watch\u30a2\u30d7\u30ea\n# \u6982\u8981\nAppleWatch\u3067\u5fc3\u62cd\u6570\u3092\u6e2c\u5b9a\u3059\u308b\u30a2\u30d7\u30ea\u3092\u3064\u304f\u308b\n![IMG_3120.PNG](https://qiita-image-store.s3.amazonaws.com/0/90526/25bb2c51-4ff3-d9f8-63ca-4ccef51f0d15.png)\n\n# \u6ce8\u610f\n\u3069\u3046\u3084\u3089\u73fe\u6642\u70b9\u3067\u3001\u76f4\u63a5\u5fc3\u62cd\u8a08\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u306f\u51fa\u6765\u306a\u3044\u3063\u307d\u3044\n\n\u3042\u304f\u307e\u3067\u5fc3\u62cd\u6570\u3092\u8a08\u6e2c\u3059\u308b\u306e\u306fapple\u306e\u516c\u5f0f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3001\u305d\u3053\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u3063\u3066\u3044\u3046\u6d41\u308c\u306b\u306a\u308b\n\n![\u56f31.png](https://qiita-image-store.s3.amazonaws.com/0/90526/3d44bded-44a8-017f-f9d9-6781ade4247a.png)\n\n#\u5927\u307e\u304b\u306a\u6d41\u308c\n1. HealthKit\u3078\u306e\u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u306e\u53d6\u5f97\n2. HealthKit\u3078\u5fc3\u62cd\u8a08\u6e2c\u30af\u30a8\u30ea\u3092\u5b9f\u884c\n3. \u8fd4\u5374\u5024\u3092\u753b\u9762\u306b\u8868\u793a\n\n## \u6e96\u5099\nCapabilities\u306bHealthKit\u3092\u8ffd\u52a0\n<img width=\"1679\" alt=\"HeartRateTest_xcodeproj_\u3068_AppDelegate_swift.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/90526/e088e48f-94e1-7ce9-9ae6-6516af63dda6.png\">\n\nWatchKitExtenssion\u306eCapabilities\u306b\u3082HealthKit\u3092\u8ffd\u52a0\n<img width=\"1679\" alt=\"HeartRateTest_xcodeproj_\u3068_AppDelegate_swift-2.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/90526/ebd5db8e-3e1a-4e8d-c4bd-11191a7bc947.png\">\n\n\n\n## \u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u306e\u53d6\u5f97\nHealthKit\u3067\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u30af\u30e9\u30b9HKHealthStore\u306e\u95a2\u6570\u3092\u5229\u7528\u3057\u3066\u8a8d\u8a3c\u3092\u884c\u3046\n\u8a8d\u8a3c\u306e\u969b\u306b\u30a2\u30d7\u30ea\u3067\u5229\u7528\u3059\u308b\u30c7\u30fc\u30bf\u306e\u7a2e\u985e\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n\u4eca\u56de\u306f\u5fc3\u62cd\u6570\u3092\u5229\u7528\u3057\u305f\u3044\u306e\u3067HKQuantityTypeIdentifierHeartRate\u3092\u6307\u5b9a\n\n``` InterfaceController.swift\n\n// HealthKit\u3067\u6271\u3046\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3059\u308b\u30af\u30e9\u30b9(\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u66f8\u304d\u306b\u306f\u30e6\u30fc\u30b6\u306e\u8a31\u53ef\u304c\u5fc5\u8981)\nlet healthStore = HKHealthStore()\n\noverride func willActivate() {\n        // This method is called when watch view controller is about to be visible to user\n        super.willActivate()\n\n        // HealthKit\u304c\u30c7\u30d0\u30a4\u30b9\u4e0a\u3067\u5229\u7528\u3067\u304d\u308b\u304b\u78ba\u8a8d\n        guard HKHealthStore.isHealthDataAvailable() else {\n            self.label.setText(\"not available\")\n            return\n        }\n        \n        // \u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u3092\u30e6\u30fc\u30b6\u306b\u6c42\u3081\u308b\n        let dataTypes = Set([HKQuantityType.quantityTypeForIdentifier(HKQuantityTypeIdentifierHeartRate)!])\n        self.healthStore.requestAuthorizationToShareTypes(nil, readTypes: dataTypes) { (success, error) -> Void in\n            guard success else {\n                self.label.setText(\"not allowed\")\n                return\n            }\n        }\n}\n```\n\n\u3055\u3089\u306biOS\u5074\u306eAppDelegate.swift\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\n\n``` AppDelegate.swift\nimport UIKit\nimport HealthKit\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n    var window: UIWindow?\n    let healthStore = HKHealthStore()\n\n    func applicationShouldRequestHealthAuthorization(application: UIApplication) {\n        guard HKHealthStore.isHealthDataAvailable() else {\n            return\n        }\n        \n        let dataTypes = Set([HKQuantityType.quantityTypeForIdentifier(HKQuantityTypeIdentifierHeartRate)!])\n        healthStore.requestAuthorizationToShareTypes(nil, readTypes: dataTypes, completion: { (result, error) -> Void in\n        })\n    }\n}\n```\n\n\u5b9f\u884c\u3059\u308b\u3068AppleWatch\u4e0a\u3067HealthKit\u3078\u306e\u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u306e\u30c0\u30a4\u30a2\u30ed\u30b0\u304c\u8868\u793a\u3055\u308c\u3001iOS\u4e0a\u3067\u8a31\u53ef\u3059\u308b\u304b\u3069\u3046\u304b\u306e\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u308b\n\n## HealthKit\u3078\u5fc3\u62cd\u6e2c\u5b9a\u306e\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3001\u753b\u9762\u8868\u793a\n\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u305f\u3089\u5fc3\u62cd\u6570\u306e\u6e2c\u5b9a\u3092\u59cb\u3081\u308b\u3088\u3046\u306b\u5b9f\u88c5\n\u30dc\u30bf\u30f3\u3068\u30e9\u30d9\u30eb\u3092\u9069\u5f53\u306b\u914d\u7f6e\u3057\u3066\u5b8c\u6210\n\n```InterfaceController.swift\n    // \u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u306e\u5358\u4f4d\u3001\u4eca\u56de\u306fBPM\n    let heartRateUnit = HKUnit(fromString: \"count/min\")\n    // HealthStore\u3078\u306e\u30af\u30a8\u30ea\n    var heartRateQuery: HKQuery?\n\n    @IBAction func buttonTapped() {\n        if self.heartRateQuery == nil {\n            // start\n            // \u30af\u30a8\u30ea\u751f\u6210\n            self.heartRateQuery = self.createStreamingQuery()\n            // \u30af\u30a8\u30ea\u5b9f\u884c\n            self.healthStore.executeQuery(self.heartRateQuery!)\n            self.button.setTitle(\"Stop\")\n            self.messageLabel.setText(\"Measuring...\")\n        }\n        else {\n            // end\n            self.healthStore.stopQuery(self.heartRateQuery!)\n            self.heartRateQuery = nil\n            self.button.setTitle(\"Start\")\n            self.messageLabel.setText(\"\")\n        }\n    }\n    \n    // healthStore\u3078\u306e\u30af\u30a8\u30ea\u751f\u6210\n    private func createStreamingQuery() -> HKQuery {\n        let predicate = HKQuery.predicateForSamplesWithStartDate(NSDate(), endDate: nil, options: .None)\n        \n        // HKAnchoredObjectQuery\u3060\u3068\u4ed6\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u308b\u66f4\u65b0\u3092\u691c\u77e5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n        let query = HKAnchoredObjectQuery(type: heartRateType, predicate: predicate, anchor: nil, limit: Int(HKObjectQueryNoLimit)) { (query, samples, deletedObjects, anchor, error) -> Void in\n            self.addSamples(samples)\n        }\n        // Handler\u767b\u9332\u3001\u4e0a\u3067\u3084\u3063\u3066\u308b\u304b\u3089\u3044\u3089\u306a\u3044\u304b\u3082...\n        query.updateHandler = { (query, samples, deletedObjects, anchor, error) -> Void in\n            self.addSamples(samples)\n        }\n        \n        return query\n    }\n\n    // \u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u3092Label\u306b\u8868\u793a\n    private func addSamples(samples: [HKSample]?) {\n        guard let samples = samples as? [HKQuantitySample] else {\n            return\n        }\n        guard let quantity = samples.last?.quantity else {\n            return\n        }\n        label.setText(\"\\(quantity.doubleValueForUnit(heartRateUnit))\")\n    }\n```\n\n## \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n``` InterfaceController.swift\n\nimport WatchKit\nimport Foundation\nimport HealthKit\n\nclass InterfaceController: WKInterfaceController {\n    \n    @IBOutlet var label: WKInterfaceLabel!\n    @IBOutlet var messageLabel: WKInterfaceLabel!\n    @IBOutlet var button: WKInterfaceButton!\n    \n    // HealthKit\u3067\u6271\u3046\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3059\u308b\u30af\u30e9\u30b9(\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u66f8\u304d\u306b\u306f\u30e6\u30fc\u30b6\u306e\u8a31\u53ef\u304c\u5fc5\u8981)\n    let healthStore = HKHealthStore()\n    // \u53d6\u5f97\u3057\u305f\u3044\u30c7\u30fc\u30bf\u306e\u8b58\u5225\u5b50\u3001\u4eca\u56de\u306f\u5fc3\u62cd\u6570\n    let heartRateType = HKQuantityType.quantityTypeForIdentifier(HKQuantityTypeIdentifierHeartRate)!\n    // \u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u306e\u5358\u4f4d\u3001\u4eca\u56de\u306fBPM\n    let heartRateUnit = HKUnit(fromString: \"count/min\")\n    // HealthStore\u3078\u306e\u30af\u30a8\u30ea\n    var heartRateQuery: HKQuery?\n    \n    override func awakeWithContext(context: AnyObject?) {\n        super.awakeWithContext(context)\n        \n        // Configure interface objects here.\n    }\n\n    override func willActivate() {\n        // This method is called when watch view controller is about to be visible to user\n        super.willActivate()\n        \n        // HealthKit\u304c\u30c7\u30d0\u30a4\u30b9\u4e0a\u3067\u5229\u7528\u3067\u304d\u308b\u304b\u78ba\u8a8d\n        guard HKHealthStore.isHealthDataAvailable() else {\n            self.label.setText(\"not available\")\n            return\n        }\n        \n        // \u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u3092\u30e6\u30fc\u30b6\u306b\u6c42\u3081\u308b\n        let dataTypes = Set([self.heartRateType])\n        self.healthStore.requestAuthorizationToShareTypes(nil, readTypes: dataTypes) { (success, error) -> Void in\n            guard success else {\n                self.label.setText(\"not allowed\")\n                return\n            }\n        }\n    }\n\n    override func didDeactivate() {\n        // This method is called when watch view controller is no longer visible\n        super.didDeactivate()\n    }\n    \n    @IBAction func buttonTapped() {\n        if self.heartRateQuery == nil {\n            // start\n            // \u30af\u30a8\u30ea\u751f\u6210\n            self.heartRateQuery = self.createStreamingQuery()\n            // \u30af\u30a8\u30ea\u5b9f\u884c\n            self.healthStore.executeQuery(self.heartRateQuery!)\n            self.button.setTitle(\"Stop\")\n            self.messageLabel.setText(\"Measuring...\")\n        }\n        else {\n            // end\n            self.healthStore.stopQuery(self.heartRateQuery!)\n            self.heartRateQuery = nil\n            self.button.setTitle(\"Start\")\n            self.messageLabel.setText(\"\")\n        }\n    }\n    \n    // healthStore\u3078\u306e\u30af\u30a8\u30ea\u751f\u6210\n    private func createStreamingQuery() -> HKQuery {\n        let predicate = HKQuery.predicateForSamplesWithStartDate(NSDate(), endDate: nil, options: .None)\n        \n        // HKAnchoredObjectQuery\u3060\u3068\u4ed6\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u308b\u66f4\u65b0\u3092\u691c\u77e5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n        let query = HKAnchoredObjectQuery(type: heartRateType, predicate: predicate, anchor: nil, limit: Int(HKObjectQueryNoLimit)) { (query, samples, deletedObjects, anchor, error) -> Void in\n            self.addSamples(samples)\n        }\n        // Handler\u767b\u9332\u3001\u4e0a\u3067\u3084\u3063\u3066\u308b\u304b\u3089\u3044\u3089\u306a\u3044\u304b\u3082...\n        query.updateHandler = { (query, samples, deletedObjects, anchor, error) -> Void in\n            self.addSamples(samples)\n        }\n        \n        return query\n    }\n\n    // \u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u3092Label\u306b\u8868\u793a\n    private func addSamples(samples: [HKSample]?) {\n        guard let samples = samples as? [HKQuantitySample] else {\n            return\n        }\n        guard let quantity = samples.last?.quantity else {\n            return\n        }\n        label.setText(\"\\(quantity.doubleValueForUnit(heartRateUnit))\")\n    }\n}\n```\n\n``` AppDelegate.swift\nimport UIKit\nimport HealthKit\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n    var window: UIWindow?\n    let healthStore = HKHealthStore()\n\n    func applicationShouldRequestHealthAuthorization(application: UIApplication) {\n        guard HKHealthStore.isHealthDataAvailable() else {\n            return\n        }\n        \n        let dataTypes = Set([HKQuantityType.quantityTypeForIdentifier(HKQuantityTypeIdentifierHeartRate)!])\n        healthStore.requestAuthorizationToShareTypes(nil, readTypes: dataTypes, completion: { (result, error) -> Void in\n        })\n    }\n\n    func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool {\n        // Override point for customization after application launch.\n        return true\n    }\n\n    func applicationWillResignActive(application: UIApplication) {\n        // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.\n        // Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.\n    }\n\n    func applicationDidEnterBackground(application: UIApplication) {\n        // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.\n        // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.\n    }\n\n    func applicationWillEnterForeground(application: UIApplication) {\n        // Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background.\n    }\n\n    func applicationDidBecomeActive(application: UIApplication) {\n        // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.\n    }\n\n    func applicationWillTerminate(application: UIApplication) {\n        // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.\n    }\n\n\n}\n\n\n```\n\n# \u53c2\u8003\n[watchOS-2-Sampler](https://github.com/shu223/watchOS-2-Sampler)\n[HealthKit Framework Reference](https://developer.apple.com/library/ios/documentation/HealthKit/Reference/HealthKit_Framework/index.html#//apple_ref/doc/uid/TP40014707)\n[[iOS 8] HealthKit\u3092\u5b9f\u88c5\u3059\u308b(1) HealthKit\u7c21\u6613\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9](http://dev.classmethod.jp/references/ios-8-healthkit-app-1/)\n[Healthkit\u304b\u3089\u8108\u62cd\u3092\u53d6\u5f97\u3059\u308bapple watch\u30a2\u30d7\u30ea](http://qiita.com/TECHFUND/items/dddaeb8616b053d568be)\n", "tags": ["AppleWatch", "HealthKit", "WatchOS2", "Swift"]}