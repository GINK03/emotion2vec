{"context": "\n\n\u6982\u8981\njsdo\u3067webfont\u3067\u5b66\u7fd2\u3057\u305f\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u3001\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u624b\u66f8\u304d\u8a8d\u8b58\u3092\u3084\u3063\u3066\u307f\u305f\u3002\n\n\u5199\u771f\n\n\n\u5b9f\u969b\nhttp://jsdo.it/ohisama1/q8KV\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\nvar canvas = $(\"#canvas\").get(0);\nvar touchableDevice = ('ontouchstart' in window);\nif (canvas.getContext)\n{\n    var context = canvas.getContext('2d');\n    var drawing = false;\n    var prev = {};\n    canvas.width = 2 * $(\"#canvas\").width();\n    canvas.height = 2 * $(\"#canvas\").height();\n    context.scale(2.0, 2.0);\n    context.lineJoin = \"round\";\n    context.lineCap = \"round\";\n    context.lineWidth = 20;\n    context.strokeStyle = 'rgb(0, 0, 0)';\n    $(\"#canvas\").bind('touchstart mousedown', function(e) {\n        e.preventDefault();\n        prev = getPointOnCanvas(this, event, e);\n        drawing = true;\n    });\n    $(\"#canvas\").bind('touchmove mousemove', function(e) {\n        if (drawing == false) return;\n        e.preventDefault();\n        curr = getPointOnCanvas(this, event, e);\n        context.beginPath();\n        context.moveTo(prev.x, prev.y);\n        context.lineTo(curr.x, curr.y);\n        context.stroke();\n        prev = curr;\n    });\n    $(\"#canvas\").bind('touchend mouseup mouseleave', function(e) {\n        drawing = false;\n    });\n    var getPointOnCanvas = function(elem, windowEvent, touchEvent) {\n        return {\n            x : (touchableDevice ? windowEvent.changedTouches[0].clientX : touchEvent.clientX) - $(elem).offset().left,\n            y : (touchableDevice ? windowEvent.changedTouches[0].clientY : touchEvent.clientY) - $(elem).offset().top\n        };\n    };\n    $(\"#run_button\").click(function() {\n        test_predict();\n    });\n    $(\"#delete_button\").click(function() {\n        context.clearRect(0, 0, 280, 280);\n    });\n    var getImageBuffer = function(context, width, height) {\n        var tmpCanvas = $('<canvas>').get(0);\n        tmpCanvas.width = width;\n        tmpCanvas.height = height;\n        var tmpContext = tmpCanvas.getContext('2d');\n        tmpContext.drawImage(context.canvas, 0, 0, width, height);\n        var image = tmpContext.getImageData(0, 0, width, height);\n        var buffer = []\n        for (var i = 0; i < image.data.length; i += 4) \n        {\n            var sum = image.data[i + 0] + image.data[i + 1] + image.data[i + 2] + image.data[i + 3];\n            buffer.push(Math.min(sum, 255));\n        }\n        return buffer;\n    };\n}\nvar layer_defs,\n    net,\n    trainer;\nvar symbols = [\n    'a', 'A', 'b', 'B', 'Cc', 'd', 'D', 'e', 'E', 'f', 'F', 'g9', 'G6', 'h', 'H', \n    'iI1l', 'Jj', 'k', 'K', 'L', 'm', 'M', 'n', 'N', 'Oo0', 'Pp', 'q', 'Q', 'r',\n    'R', 'Ss5', 't', 'T', 'Uu', 'vV', 'Ww', 'Xx', 'Yy', 'Zz2', '3', '4', '7', '8',\n];\n/*\nlayer_defs = [];\nlayer_defs.push({\n    type: 'input', \n    out_sx: 28, \n    out_sy: 28, \n    out_depth: 1\n});\nlayer_defs.push({\n    type: 'conv', \n    sx: 5, \n    filters: 8, \n    stride: 1, \n    pad: 2, \n    activation: 'relu'\n});\nlayer_defs.push({\n    type: 'pool', \n    sx: 2, \n    stride: 2\n});\nlayer_defs.push({\n    type: 'conv', \n    sx: 5, \n    filters: 18, \n    stride: 1, \n    pad: 2, \n    activation: 'relu'\n});\nlayer_defs.push({\n    type: 'pool', \n    sx: 5, \n    stride: 2\n});\nlayer_defs.push({\n    type: 'softmax', \n    num_classes: \"+symbols.length+\"\n});\n*/\nvar load_from_json = function() {\n    $.getJSON(\"/assets/y/k/R/Z/ykRZc\", function(json) {\n        net = new convnetjs.Net();\n        net.fromJSON(json);\n        trainer = new convnetjs.SGDTrainer(net, {\n            method: 'adadelta', \n            batch_size: 20, \n            l2_decay: 0.001\n        });\n    });\n}\nvar maxmin = cnnutil.maxmin;\nvar f2t = cnnutil.f2t;\nvar draw_activations = function(elt, A, scale, grads) {\n    var s = scale || 2;\n    var draw_grads = false;\n    if (typeof(grads) !== 'undefined') draw_grads = grads;\n    var w = draw_grads ? A.dw : A.w;\n    var mm = maxmin(w);\n    for (var d = 0; d < A.depth; d++) \n    {\n        var canv = document.createElement('canvas');\n        canv.className = 'actmap';\n        var W = A.sx * s;\n        var H = A.sy * s;\n        canv.width = W;\n        canv.height = H;\n        var ctx = canv.getContext('2d');\n        var g = ctx.createImageData(W, H);\n        for (var x = 0; x < A.sx; x++) \n        {\n            for (var y = 0; y < A.sy; y++) \n            {\n                if (draw_grads)\n                {\n                    var dval = Math.floor((A.get_grad(x, y, d) - mm.minv) / mm.dv * 255);\n                } \n                else \n                {\n                    var dval = Math.floor((A.get(x, y, d) - mm.minv) / mm.dv * 255);  \n                }\n                for (var dx = 0; dx < s; dx++)\n                {\n                    for (var dy = 0; dy < s; dy++) \n                    {\n                        var pp = ((W * (y * s + dy)) + (dx + x * s)) * 4;\n                        for (var i = 0; i < 3; i++) \n                        { \n                            g.data[pp + i] = dval; \n                        } \n                        g.data[pp + 3] = 255; \n                    }\n                }\n            }\n        }\n        ctx.putImageData(g, 0, 0);\n        elt.appendChild(canv);\n    }  \n}\nvar visualize_activations = function(net, elt) {\n    elt.innerHTML = \"\";\n    var N = net.layers.length;\n    for (var i = 0; i < N; i++) \n    {\n        var L = net.layers[i];\n        var layer_div = document.createElement('div');\n        var activations_div = document.createElement('div');\n        activations_div.appendChild(document.createTextNode('Activations:'));\n        activations_div.appendChild(document.createElement('br'));\n        activations_div.className = 'layer_act';\n        var scale = 2;\n        if (L.layer_type === 'softmax' || L.layer_type==='fc') scale = 10;\n        draw_activations(activations_div, L.out_act, scale);\n        if (L.layer_type === 'conv') \n        {\n            var filters_div = document.createElement('div');\n            if (L.filters[0].sx > 3) \n            {\n                filters_div.appendChild(document.createTextNode('Weights:'));\n                filters_div.appendChild(document.createElement('br'));\n                for (var j = 0; j < L.filters.length; j++)\n                {\n                    draw_activations(filters_div, L.filters[j], 2);\n                }\n                filters_div.appendChild(document.createElement('br'));\n                filters_div.appendChild(document.createTextNode('Gradients:'));\n                filters_div.appendChild(document.createElement('br'));\n                for (var j = 0; j < L.filters.length; j++) \n                {\n                    draw_activations(filters_div, L.filters[j], 2, true);\n                }\n            }\n            else \n            {\n                filters_div.appendChild(document.createTextNode('Weights hidden, too small'));\n            }\n            activations_div.appendChild(filters_div);\n        }\n        layer_div.appendChild(activations_div);\n        layer_div.className = 'layer ' + 'lt' + L.layer_type;\n        var title_div = document.createElement('div');\n        title_div.className = 'ltitle'\n        var t = L.layer_type + ' (' + L.out_sx + 'x' + L.out_sy + 'x' + L.out_depth + ')';\n        title_div.appendChild(document.createTextNode(t));\n        layer_div.appendChild(title_div);\n        if (L.layer_type === 'conv') \n        {\n            var t = 'filter size ' + L.filters[0].sx + 'x' + L.filters[0].sy + 'x' + L.filters[0].depth + ', stride ' + L.stride;\n            layer_div.appendChild(document.createTextNode(t));\n            layer_div.appendChild(document.createElement('br'));\n        }\n        if (L.layer_type === 'pool')\n        {\n            var t = 'pooling size ' + L.sx + 'x' + L.sy + ', stride ' + L.stride;\n            layer_div.appendChild(document.createTextNode(t));\n            layer_div.appendChild(document.createElement('br'));\n        }\n        var mma = maxmin(L.out_act.w);\n        var t = 'max activation: ' + f2t(mma.maxv) + ', min: ' + f2t(mma.minv);\n        layer_div.appendChild(document.createTextNode(t));\n        layer_div.appendChild(document.createElement('br'));\n        if (L.layer_type === 'conv') \n        {\n            var tot_params = L.sx * L.sy * L.in_depth * L.filters.length + L.filters.length;\n            var t = 'parameters: ' + L.filters.length + 'x' + L.sx + 'x' + L.sy + 'x' + L.in_depth + '+' + L.filters.length + ' = ' + tot_params;\n            layer_div.appendChild(document.createTextNode(t));\n            layer_div.appendChild(document.createElement('br'));\n        }\n        if (L.layer_type === 'fc')\n        {\n            var tot_params = L.num_inputs * L.filters.length + L.filters.length;\n            var t = 'parameters: ' + L.filters.length + 'x' + L.num_inputs + '+' + L.filters.length + ' = ' + tot_params;\n            layer_div.appendChild(document.createTextNode(t));\n            layer_div.appendChild(document.createElement('br'));\n        }\n        var clear = document.createElement('div');\n        clear.className = 'clear';\n        layer_div.appendChild(clear);\n        elt.appendChild(layer_div);\n    }\n}\nfunction sample_test_instance() {    \n    var p = getImageBuffer(context, 32, 32);\n    var x = new convnetjs.Vol(32, 32, 1, 0.0);\n    var W = 32 * 32;\n    for (var i = 0; i < W; i++) \n    {\n        x.w[i] = p[i] / 255.0;\n    }\n    x = convnetjs.augment(x, 28);\n    return {\n        x: x, \n        label: 1, \n        isval: 1.0 > 0.9\n    };\n}\nvar test_predict = function() {\n    var num_classes = net.layers[net.layers.length - 1].out_depth;\n    document.getElementById('testset_acc').innerHTML = '';\n    for (num = 0; num < 1; num++) \n    {\n        var sample = sample_test_instance();\n        var y = sample.label;\n        var aavg = new convnetjs.Vol(1, 1, num_classes, 0.0);\n        var xs = [].concat(sample.x);\n        var n = xs.length;\n        for (var i = 0; i < n; i++) \n        {\n            var a = net.forward(xs[i]);\n            aavg.addFrom(a);\n        }\n        var preds = [];\n        for (var k = 0; k < aavg.w.length; k++) \n        {\n            preds.push({\n                k: k,\n                p: aavg.w[k]\n            }); \n        }\n        preds.sort(function(a, b) {\n            return a.p < b.p ? 1 : -1;\n        });\n        var div = document.createElement('div');\n        div.className = 'testdiv';\n        draw_activations(div, xs[0], 2);\n        var probsdiv = document.createElement('div');\n        div.className = 'probsdiv';\n        div.style.backgroundColor = (preds[0].k === y) ? 'rgba(85,187,85,0.5)' : 'rgba(187,85,85,0.5)';\n        var t = '';\n        for (var k = 0; k < Math.min(3, symbols.length); k++) \n        {\n            var col = preds[k].k === y ? 'rgb(85,187,85)' : 'rgb(187,85,85)';\n            t += '<div class=\\\"pp\\\" style=\\\"width:' + Math.floor(preds[k].p / n * 100) + 'px; margin-left: 60px; background-color:' + col + ';\\\">' + symbols[preds[k].k] + '</div>'\n        }\n        probsdiv.innerHTML = t;\n        div.appendChild(probsdiv);\n        $(\"#testset_acc\").append(div).fadeIn(1000);\n    }\n}    \nload_from_json();\n\n\n\n#\u6982\u8981\njsdo\u3067webfont\u3067\u5b66\u7fd2\u3057\u305f\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u3001\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u624b\u66f8\u304d\u8a8d\u8b58\u3092\u3084\u3063\u3066\u307f\u305f\u3002\n#\u5199\u771f\n![abc.jpg](https://qiita-image-store.s3.amazonaws.com/0/18104/59e9d6b1-9fb1-38fa-62e2-2c2fdbb603fb.jpeg)\n\n#\u5b9f\u969b\nhttp://jsdo.it/ohisama1/q8KV\n#\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n```\nvar canvas = $(\"#canvas\").get(0);\nvar touchableDevice = ('ontouchstart' in window);\nif (canvas.getContext)\n{\n    var context = canvas.getContext('2d');\n    var drawing = false;\n    var prev = {};\n    canvas.width = 2 * $(\"#canvas\").width();\n    canvas.height = 2 * $(\"#canvas\").height();\n    context.scale(2.0, 2.0);\n    context.lineJoin = \"round\";\n    context.lineCap = \"round\";\n    context.lineWidth = 20;\n    context.strokeStyle = 'rgb(0, 0, 0)';\n    $(\"#canvas\").bind('touchstart mousedown', function(e) {\n        e.preventDefault();\n        prev = getPointOnCanvas(this, event, e);\n        drawing = true;\n    });\n    $(\"#canvas\").bind('touchmove mousemove', function(e) {\n        if (drawing == false) return;\n        e.preventDefault();\n        curr = getPointOnCanvas(this, event, e);\n        context.beginPath();\n        context.moveTo(prev.x, prev.y);\n        context.lineTo(curr.x, curr.y);\n        context.stroke();\n        prev = curr;\n    });\n    $(\"#canvas\").bind('touchend mouseup mouseleave', function(e) {\n        drawing = false;\n    });\n    var getPointOnCanvas = function(elem, windowEvent, touchEvent) {\n        return {\n            x : (touchableDevice ? windowEvent.changedTouches[0].clientX : touchEvent.clientX) - $(elem).offset().left,\n            y : (touchableDevice ? windowEvent.changedTouches[0].clientY : touchEvent.clientY) - $(elem).offset().top\n        };\n    };\n    $(\"#run_button\").click(function() {\n        test_predict();\n    });\n    $(\"#delete_button\").click(function() {\n        context.clearRect(0, 0, 280, 280);\n    });\n    var getImageBuffer = function(context, width, height) {\n        var tmpCanvas = $('<canvas>').get(0);\n        tmpCanvas.width = width;\n        tmpCanvas.height = height;\n        var tmpContext = tmpCanvas.getContext('2d');\n        tmpContext.drawImage(context.canvas, 0, 0, width, height);\n        var image = tmpContext.getImageData(0, 0, width, height);\n        var buffer = []\n        for (var i = 0; i < image.data.length; i += 4) \n        {\n            var sum = image.data[i + 0] + image.data[i + 1] + image.data[i + 2] + image.data[i + 3];\n            buffer.push(Math.min(sum, 255));\n        }\n        return buffer;\n    };\n}\nvar layer_defs,\n    net,\n    trainer;\nvar symbols = [\n    'a', 'A', 'b', 'B', 'Cc', 'd', 'D', 'e', 'E', 'f', 'F', 'g9', 'G6', 'h', 'H', \n    'iI1l', 'Jj', 'k', 'K', 'L', 'm', 'M', 'n', 'N', 'Oo0', 'Pp', 'q', 'Q', 'r',\n    'R', 'Ss5', 't', 'T', 'Uu', 'vV', 'Ww', 'Xx', 'Yy', 'Zz2', '3', '4', '7', '8',\n];\n/*\nlayer_defs = [];\nlayer_defs.push({\n    type: 'input', \n    out_sx: 28, \n    out_sy: 28, \n    out_depth: 1\n});\nlayer_defs.push({\n    type: 'conv', \n    sx: 5, \n    filters: 8, \n    stride: 1, \n    pad: 2, \n    activation: 'relu'\n});\nlayer_defs.push({\n    type: 'pool', \n    sx: 2, \n    stride: 2\n});\nlayer_defs.push({\n    type: 'conv', \n    sx: 5, \n    filters: 18, \n    stride: 1, \n    pad: 2, \n    activation: 'relu'\n});\nlayer_defs.push({\n    type: 'pool', \n    sx: 5, \n    stride: 2\n});\nlayer_defs.push({\n    type: 'softmax', \n    num_classes: \"+symbols.length+\"\n});\n*/\nvar load_from_json = function() {\n    $.getJSON(\"/assets/y/k/R/Z/ykRZc\", function(json) {\n        net = new convnetjs.Net();\n        net.fromJSON(json);\n        trainer = new convnetjs.SGDTrainer(net, {\n            method: 'adadelta', \n            batch_size: 20, \n            l2_decay: 0.001\n        });\n    });\n}\nvar maxmin = cnnutil.maxmin;\nvar f2t = cnnutil.f2t;\nvar draw_activations = function(elt, A, scale, grads) {\n    var s = scale || 2;\n    var draw_grads = false;\n    if (typeof(grads) !== 'undefined') draw_grads = grads;\n    var w = draw_grads ? A.dw : A.w;\n    var mm = maxmin(w);\n    for (var d = 0; d < A.depth; d++) \n    {\n        var canv = document.createElement('canvas');\n        canv.className = 'actmap';\n        var W = A.sx * s;\n        var H = A.sy * s;\n        canv.width = W;\n        canv.height = H;\n        var ctx = canv.getContext('2d');\n        var g = ctx.createImageData(W, H);\n        for (var x = 0; x < A.sx; x++) \n        {\n            for (var y = 0; y < A.sy; y++) \n            {\n                if (draw_grads)\n                {\n                    var dval = Math.floor((A.get_grad(x, y, d) - mm.minv) / mm.dv * 255);\n                } \n                else \n                {\n                    var dval = Math.floor((A.get(x, y, d) - mm.minv) / mm.dv * 255);  \n                }\n                for (var dx = 0; dx < s; dx++)\n                {\n                    for (var dy = 0; dy < s; dy++) \n                    {\n                        var pp = ((W * (y * s + dy)) + (dx + x * s)) * 4;\n                        for (var i = 0; i < 3; i++) \n                        { \n                            g.data[pp + i] = dval; \n                        } \n                        g.data[pp + 3] = 255; \n                    }\n                }\n            }\n        }\n        ctx.putImageData(g, 0, 0);\n        elt.appendChild(canv);\n    }  \n}\nvar visualize_activations = function(net, elt) {\n    elt.innerHTML = \"\";\n    var N = net.layers.length;\n    for (var i = 0; i < N; i++) \n    {\n        var L = net.layers[i];\n        var layer_div = document.createElement('div');\n        var activations_div = document.createElement('div');\n        activations_div.appendChild(document.createTextNode('Activations:'));\n        activations_div.appendChild(document.createElement('br'));\n        activations_div.className = 'layer_act';\n        var scale = 2;\n        if (L.layer_type === 'softmax' || L.layer_type==='fc') scale = 10;\n        draw_activations(activations_div, L.out_act, scale);\n        if (L.layer_type === 'conv') \n        {\n            var filters_div = document.createElement('div');\n            if (L.filters[0].sx > 3) \n            {\n                filters_div.appendChild(document.createTextNode('Weights:'));\n                filters_div.appendChild(document.createElement('br'));\n                for (var j = 0; j < L.filters.length; j++)\n                {\n                    draw_activations(filters_div, L.filters[j], 2);\n                }\n                filters_div.appendChild(document.createElement('br'));\n                filters_div.appendChild(document.createTextNode('Gradients:'));\n                filters_div.appendChild(document.createElement('br'));\n                for (var j = 0; j < L.filters.length; j++) \n                {\n                    draw_activations(filters_div, L.filters[j], 2, true);\n                }\n            }\n            else \n            {\n                filters_div.appendChild(document.createTextNode('Weights hidden, too small'));\n            }\n            activations_div.appendChild(filters_div);\n        }\n        layer_div.appendChild(activations_div);\n        layer_div.className = 'layer ' + 'lt' + L.layer_type;\n        var title_div = document.createElement('div');\n        title_div.className = 'ltitle'\n        var t = L.layer_type + ' (' + L.out_sx + 'x' + L.out_sy + 'x' + L.out_depth + ')';\n        title_div.appendChild(document.createTextNode(t));\n        layer_div.appendChild(title_div);\n        if (L.layer_type === 'conv') \n        {\n            var t = 'filter size ' + L.filters[0].sx + 'x' + L.filters[0].sy + 'x' + L.filters[0].depth + ', stride ' + L.stride;\n            layer_div.appendChild(document.createTextNode(t));\n            layer_div.appendChild(document.createElement('br'));\n        }\n        if (L.layer_type === 'pool')\n        {\n            var t = 'pooling size ' + L.sx + 'x' + L.sy + ', stride ' + L.stride;\n            layer_div.appendChild(document.createTextNode(t));\n            layer_div.appendChild(document.createElement('br'));\n        }\n        var mma = maxmin(L.out_act.w);\n        var t = 'max activation: ' + f2t(mma.maxv) + ', min: ' + f2t(mma.minv);\n        layer_div.appendChild(document.createTextNode(t));\n        layer_div.appendChild(document.createElement('br'));\n        if (L.layer_type === 'conv') \n        {\n            var tot_params = L.sx * L.sy * L.in_depth * L.filters.length + L.filters.length;\n            var t = 'parameters: ' + L.filters.length + 'x' + L.sx + 'x' + L.sy + 'x' + L.in_depth + '+' + L.filters.length + ' = ' + tot_params;\n            layer_div.appendChild(document.createTextNode(t));\n            layer_div.appendChild(document.createElement('br'));\n        }\n        if (L.layer_type === 'fc')\n        {\n            var tot_params = L.num_inputs * L.filters.length + L.filters.length;\n            var t = 'parameters: ' + L.filters.length + 'x' + L.num_inputs + '+' + L.filters.length + ' = ' + tot_params;\n            layer_div.appendChild(document.createTextNode(t));\n            layer_div.appendChild(document.createElement('br'));\n        }\n        var clear = document.createElement('div');\n        clear.className = 'clear';\n        layer_div.appendChild(clear);\n        elt.appendChild(layer_div);\n    }\n}\nfunction sample_test_instance() {    \n    var p = getImageBuffer(context, 32, 32);\n    var x = new convnetjs.Vol(32, 32, 1, 0.0);\n    var W = 32 * 32;\n    for (var i = 0; i < W; i++) \n    {\n        x.w[i] = p[i] / 255.0;\n    }\n    x = convnetjs.augment(x, 28);\n    return {\n        x: x, \n        label: 1, \n        isval: 1.0 > 0.9\n    };\n}\nvar test_predict = function() {\n    var num_classes = net.layers[net.layers.length - 1].out_depth;\n    document.getElementById('testset_acc').innerHTML = '';\n    for (num = 0; num < 1; num++) \n    {\n        var sample = sample_test_instance();\n        var y = sample.label;\n        var aavg = new convnetjs.Vol(1, 1, num_classes, 0.0);\n        var xs = [].concat(sample.x);\n        var n = xs.length;\n        for (var i = 0; i < n; i++) \n        {\n            var a = net.forward(xs[i]);\n            aavg.addFrom(a);\n        }\n        var preds = [];\n        for (var k = 0; k < aavg.w.length; k++) \n        {\n            preds.push({\n                k: k,\n                p: aavg.w[k]\n            }); \n        }\n        preds.sort(function(a, b) {\n            return a.p < b.p ? 1 : -1;\n        });\n        var div = document.createElement('div');\n        div.className = 'testdiv';\n        draw_activations(div, xs[0], 2);\n        var probsdiv = document.createElement('div');\n        div.className = 'probsdiv';\n        div.style.backgroundColor = (preds[0].k === y) ? 'rgba(85,187,85,0.5)' : 'rgba(187,85,85,0.5)';\n        var t = '';\n        for (var k = 0; k < Math.min(3, symbols.length); k++) \n        {\n            var col = preds[k].k === y ? 'rgb(85,187,85)' : 'rgb(187,85,85)';\n            t += '<div class=\\\"pp\\\" style=\\\"width:' + Math.floor(preds[k].p / n * 100) + 'px; margin-left: 60px; background-color:' + col + ';\\\">' + symbols[preds[k].k] + '</div>'\n        }\n        probsdiv.innerHTML = t;\n        div.appendChild(probsdiv);\n        $(\"#testset_acc\").append(div).fadeIn(1000);\n    }\n}    \nload_from_json();\n\n\n```\n", "tags": ["DeepLearning", "jsdo", "convnetjs"]}