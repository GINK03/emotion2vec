{"context": " More than 1 year has passed since last update.\n\u8a3c\u660e\u66f8\u3092res/raw\u306b\u7f6e\u304f (\u3053\u306e\u4f8b\u3067\u306fself.cer\u3068\u3057\u307e\u3059)\n\u305d\u306e\u8a3c\u660e\u66f8\u3092\u5229\u7528\u3057\u3066TrustManager\u3092\u751f\u6210\u3057\uff0cSSLSocketFactory\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u5f97\u308b.\n\u53c2\u8003: http://developer.android.com/training/articles/security-ssl.html#UnknownCa (\u82f1\u8a9e)\nSSLSocketFactory\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304b\u3089\uff0cVolley\u306eBasicNetwork\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\uff0cRequestQueue\u306b\u6e21\u3059\uff0e\n\n\u6700\u7d42\u7684\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u306a\u308b\uff0e\npublic class MySSL {\n    public static SSLSocketFactory getSocketFactory(Context context) {\n        try {\n            CertificateFactory certificateFactory = CertificateFactory.getInstance(\"X.509\");\n            Certificate certificate = certificateFactory.generateCertificate(\n                    context.getResources().openRawResource(R.raw.self));\n            Log.d(\"ca=\" + ((X509Certificate) certificate).getSubjectDN());\n\n            String keyStoreType = KeyStore.getDefaultType();\n            KeyStore keyStore = KeyStore.getInstance(keyStoreType);\n            keyStore.load(null, null);\n            keyStore.setCertificateEntry(\"ca\", certificate);\n\n            TrustManagerFactory managerFactory = TrustManagerFactory.getInstance(\n                    TrustManagerFactory.getDefaultAlgorithm());\n            managerFactory.init(keyStore);\n\n            SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n            sslContext.init(null, managerFactory.getTrustManagers(), null);\n            return sslContext.getSocketFactory();\n        } catch (Exception e) {\n            // TODO: handle error\n        }\n        return null;\n    }\n}\n\n/*\n * \u81ea\u5df1\u7f72\u540d\u8a3c\u660e\u66f8\u306e\u305f\u3081\u306b\uff0c\u30ab\u30b9\u30bf\u30e0{@link SSLSocketFactory}\u3092\u5229\u7528\u3059\u308b{@link RequestQueue}.\n * Volley\u672c\u5bb6\u306e\u5b9f\u88c5\u3092\u6d41\u7528\n**/\npublic class MyRequestQueue extends RequestQueue {\n    private static final String DEFAULT_CACHE_DIR = \"volley\";\n    private final Context context;\n\n    public MyRequestQueue(final Context context) {\n        super(\n                new DiskBasedCache(new File(context.getCacheDir(), DEFAULT_CACHE_DIR)),\n                createNetwork(context));\n        this.context = context;\n    }\n\n    private static Network createNetwork(Context context) {\n        String userAgent = \"volley/0\";\n        try {\n            String packageName = context.getPackageName();\n            PackageInfo info = context.getPackageManager().getPackageInfo(packageName, 0);\n            userAgent = packageName + \"/\" + info.versionCode;\n        } catch (PackageManager.NameNotFoundException e) {\n        }\n        // Gingerbread\u4ee5\u524d\u306eHttpUrlConnection\u306b\u306f\u30d0\u30b0\u304c\u3042\u308b\u306e\u3067\u6ce8\u610f\u3068\u306e\u3053\u3068\uff0c\u4eca\u56de\u306f\u6c17\u306b\u3057\u306a\u3044\n        // See: http://android-developers.blogspot.com/2011/09/androids-http-clients.html\n        return new BasicNetwork(new HurlStack(null, MySSL.getSocketFactory(context)));\n    }\n}\n\n1. \u8a3c\u660e\u66f8\u3092res/raw\u306b\u7f6e\u304f (\u3053\u306e\u4f8b\u3067\u306fself.cer\u3068\u3057\u307e\u3059)\n2. \u305d\u306e\u8a3c\u660e\u66f8\u3092\u5229\u7528\u3057\u3066[TrustManager](http://developer.android.com/reference/javax/net/ssl/TrustManager.html)\u3092\u751f\u6210\u3057\uff0c[SSLSocketFactory](http://developer.android.com/reference/javax/net/ssl/SSLSocketFactory.html)\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u5f97\u308b.   \n\u53c2\u8003: http://developer.android.com/training/articles/security-ssl.html#UnknownCa (\u82f1\u8a9e)\n3. SSLSocketFactory\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304b\u3089\uff0cVolley\u306eBasicNetwork\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\uff0cRequestQueue\u306b\u6e21\u3059\uff0e\n\n\u6700\u7d42\u7684\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u306a\u308b\uff0e\n\n\n\n```java\npublic class MySSL {\n    public static SSLSocketFactory getSocketFactory(Context context) {\n        try {\n            CertificateFactory certificateFactory = CertificateFactory.getInstance(\"X.509\");\n            Certificate certificate = certificateFactory.generateCertificate(\n                    context.getResources().openRawResource(R.raw.self));\n            Log.d(\"ca=\" + ((X509Certificate) certificate).getSubjectDN());\n\n            String keyStoreType = KeyStore.getDefaultType();\n            KeyStore keyStore = KeyStore.getInstance(keyStoreType);\n            keyStore.load(null, null);\n            keyStore.setCertificateEntry(\"ca\", certificate);\n\n            TrustManagerFactory managerFactory = TrustManagerFactory.getInstance(\n                    TrustManagerFactory.getDefaultAlgorithm());\n            managerFactory.init(keyStore);\n\n            SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n            sslContext.init(null, managerFactory.getTrustManagers(), null);\n            return sslContext.getSocketFactory();\n        } catch (Exception e) {\n            // TODO: handle error\n        }\n        return null;\n    }\n}\n```\n\n```java\n/*\n * \u81ea\u5df1\u7f72\u540d\u8a3c\u660e\u66f8\u306e\u305f\u3081\u306b\uff0c\u30ab\u30b9\u30bf\u30e0{@link SSLSocketFactory}\u3092\u5229\u7528\u3059\u308b{@link RequestQueue}.\n * Volley\u672c\u5bb6\u306e\u5b9f\u88c5\u3092\u6d41\u7528\n**/\npublic class MyRequestQueue extends RequestQueue {\n    private static final String DEFAULT_CACHE_DIR = \"volley\";\n    private final Context context;\n\n    public MyRequestQueue(final Context context) {\n        super(\n                new DiskBasedCache(new File(context.getCacheDir(), DEFAULT_CACHE_DIR)),\n                createNetwork(context));\n        this.context = context;\n    }\n\n    private static Network createNetwork(Context context) {\n        String userAgent = \"volley/0\";\n        try {\n            String packageName = context.getPackageName();\n            PackageInfo info = context.getPackageManager().getPackageInfo(packageName, 0);\n            userAgent = packageName + \"/\" + info.versionCode;\n        } catch (PackageManager.NameNotFoundException e) {\n        }\n        // Gingerbread\u4ee5\u524d\u306eHttpUrlConnection\u306b\u306f\u30d0\u30b0\u304c\u3042\u308b\u306e\u3067\u6ce8\u610f\u3068\u306e\u3053\u3068\uff0c\u4eca\u56de\u306f\u6c17\u306b\u3057\u306a\u3044\n        // See: http://android-developers.blogspot.com/2011/09/androids-http-clients.html\n        return new BasicNetwork(new HurlStack(null, MySSL.getSocketFactory(context)));\n    }\n}\n```", "tags": ["Android", "Volley", "HTTPS"]}