{"context": " More than 1 year has passed since last update.template\u306b(\u30e9\u30e0\u30c0\u5f0f)\u3092\u6e21\u3059\u969b\u306b\u30cf\u30de\u3063\u305f\u306e\u3067\u30e1\u30e2\n\nmeta_function.h\n\n#include <type_traits>\nstruct result_of_type_impl\n{\n    // \u2460\u95a2\u6570\n    template < class Result, class ... Args >\n    static Result Func( Result( *)( Args ... ) );\n    // \u2461\u30e1\u30f3\u30d0\u95a2\u6570\u30dd\u30a4\u30f3\u30bf(\u975econst\u7248)\n    template < class T, class Result, class ... Args >\n    static Result Func( Result( T::* )( Args ... ) );\n    // \u2462\u30e1\u30f3\u30d0\u95a2\u6570\u30dd\u30a4\u30f3\u30bf(const\u7248)\n    template < class T, class Result, class ... Args >\n    static Result Func( Result( T::* )( Args ... ) const );\n    // \u2463\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n    template < class T, class FuncType = decltype( &T::operator() ) >\n    static decltype( Func( std::declval<FuncType>() ) ) Func( T* );\n};\n\ntemplate < class T > struct result_of\n{\n    using type = decltype( result_of_type_impl::Func( std::declval<std::remove_pointer_t<T>*>() ) );\n};\n\n\n\n\u4e0a\u8a18\u30e1\u30bf\u95a2\u6570\u3092\u4f7f\u3063\u3066\u95a2\u6570\u30fb\u30e1\u30f3\u30d0\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u30fb\u30e9\u30e0\u30c0\u5f0f\u306e\u623b\u308a\u5024\u306e\u578b\u304c\u53d6\u5f97\u51fa\u6765\u308b\n\u4e0b\u306f\u4f7f\u7528\u3059\u308b\u969b\u306e\u30b5\u30f3\u30d7\u30eb\n\ntest1.cpp\n\ntemplate< class Func, class Result = result_of<Func>::type >\nResult Test( Func&& func );\n\n\nint main()\n{\n    const auto func = [](){ return 0; };\n\n    Test( func );\n}\n\n\n\ntemplate\u306b(\u30e9\u30e0\u30c0\u5f0f)\u3092\u6e21\u3059\u969b\u306b\u30cf\u30de\u3063\u305f\u306e\u3067\u30e1\u30e2\n\n\n```cpp:meta_function.h\n\n#include <type_traits>\nstruct result_of_type_impl\n{\n    // \u2460\u95a2\u6570\n    template < class Result, class ... Args >\n    static Result Func( Result( *)( Args ... ) );\n    // \u2461\u30e1\u30f3\u30d0\u95a2\u6570\u30dd\u30a4\u30f3\u30bf(\u975econst\u7248)\n    template < class T, class Result, class ... Args >\n    static Result Func( Result( T::* )( Args ... ) );\n    // \u2462\u30e1\u30f3\u30d0\u95a2\u6570\u30dd\u30a4\u30f3\u30bf(const\u7248)\n    template < class T, class Result, class ... Args >\n    static Result Func( Result( T::* )( Args ... ) const );\n    // \u2463\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n    template < class T, class FuncType = decltype( &T::operator() ) >\n    static decltype( Func( std::declval<FuncType>() ) ) Func( T* );\n};\n\ntemplate < class T > struct result_of\n{\n    using type = decltype( result_of_type_impl::Func( std::declval<std::remove_pointer_t<T>*>() ) );\n};\n\n```\n\n\u4e0a\u8a18\u30e1\u30bf\u95a2\u6570\u3092\u4f7f\u3063\u3066\u95a2\u6570\u30fb\u30e1\u30f3\u30d0\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u30fb\u30e9\u30e0\u30c0\u5f0f\u306e\u623b\u308a\u5024\u306e\u578b\u304c\u53d6\u5f97\u51fa\u6765\u308b\n\u4e0b\u306f\u4f7f\u7528\u3059\u308b\u969b\u306e\u30b5\u30f3\u30d7\u30eb\n\n```cpp:test1.cpp\n\ntemplate< class Func, class Result = result_of<Func>::type >\nResult Test( Func&& func );\n\n\nint main()\n{\n    const auto func = [](){ return 0; };\n    \n    Test( func );\n}\n\n```\n\n", "tags": ["C++11"]}