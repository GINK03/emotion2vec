{"context": "\n\n\u306a\u305c\u3001\u4eca\u30b9\u30af\u30e9\u30c3\u30c1\u3067\u4f5c\u3063\u305f\u306e\u304b\uff1f\n\u3046\u3061\u306e\u5b66\u6821\u306e\u6587\u5316\u796d\u3067\u3001\u3068\u3042\u308b\u30b2\u30fc\u30e0\u3092\u4f5c\u308b\u3053\u3068\u306b\u306a\u3063\u305f\u306e\u3067\u3059\u304c\u3001LCD\u306b\u30b2\u30fc\u30e0\u306e\u72b6\u6cc1\u3092\u8868\u793a\u3057\u3088\u3046\u3068\u3057\u307e\u3057\u305f\u3002\nLCD\u306f\u305f\u304b\u304c\u30012\u521716\u884c\u3002\n\u6163\u308c\u3066\u3044\u306a\u3044\u4eba\u304c\u898b\u308b\u306b\u306f\u3001\u5c0f\u3055\u3059\u304e\u307e\u3059\u3002\n\u306a\u3089\u3070\u3001\u3001\u3001\n\u30b2\u30fc\u30e0\u3092\u5b9f\u884c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306bHTTP\u30b5\u30fc\u30d0\u30fc\u306e\u6a5f\u80fd\u3092\u52a0\u3048\u3066\u3001\u3082\u3046\u4e00\u53f0\u306e\u30d1\u30bd\u30b3\u30f3\u3067Web\u30d6\u30e9\u30a6\u30b6\u3092\u7acb\u3061\u4e0a\u3052\u3066\u3057\u307e\u3048\u3070\u3044\u3044\u3093\u3060\uff01\nJavascript\u3067\u5236\u5fa1\u3057\u3066\u3084\u308c\u3070\u3001\u4e00\u3064\u306e\u30da\u30fc\u30b8\u304c\u3061\u3083\u304b\u3061\u3083\u304b\u5909\u308f\u308b\u3088\u3046\u306b\u3082\u898b\u305b\u3089\u308c\u308b\u3057\u3001\u97f3\u3092\u304b\u3051\u308b\u3053\u3068\u3082\u3001\u52d5\u753b\u3092\u898b\u305b\u308b\u3053\u3068\u3082\u53ef\u80fd\u3058\u3083\u3093\uff01\n\u3067\u3082\u3001\u3001\u3001\n\n\u5b66\u6821\u306ePC\u306f\u5171\u6709\u306a\u306e\u3067\u3001\u81ea\u5206\u304c\u4f7f\u3048\u308b\u9818\u57df\u306f1GB\u3057\u304b\u306a\u3044\u305f\u3081\u3001Boost\u3059\u3089\u4f7f\u3048\u306a\u3044\u3002\n\u672c\u756a\u3069\u306e\u30d1\u30bd\u30b3\u30f3\u3092\u4f7f\u3046\u306e\u304b\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u3001\u306a\u308b\u3079\u304fLinux\u306e\u30c7\u30a3\u30b9\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3\u3067\u5dee\u7570\u304c\u306a\u3044\u3088\u3046\u306b\u3057\u306a\u304f\u3066\u306f\u884c\u3051\u306a\u3044\u3002\n\u30b2\u30fc\u30e0\u306e\u65b9\u3067\u3082\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3067\u51e6\u7406\u3092\u3055\u305b\u308b\u305f\u3081\u3001\u305d\u3093\u306a\u306b\u91cd\u304f\u306a\u3063\u3066\u3082\u3044\u3051\u306a\u3044\u3002\n10\u30c7\u30fc\u30bf\u309260\u66f4\u65b0/\u79d2\u306f\u3055\u305b\u305f\u3044\u306e\u3067\u3001600\u30ec\u30b9\u30dd\u30f3\u30b9/\u79d2\u306f\u3055\u305b\u305f\u3044\u3002\n\n\n\u5b9f\u884c\u74b0\u5883\nPC - MacBook Pro\nCPU - Intel Core i7 (2.8GHz)\nMemory - 16GB\n\u5b9f\u969b\u306e\u74b0\u5883\u3067\u306f\u306a\u3044\u3067\u3059\u3002\n\u3067\u3059\u304c\u3001\u81ea\u5b85\u3067\u958b\u767a\u3057\u3066\u308b\u305f\u3081\u3001\u4ed5\u65b9\u306a\u3044\u3068\u3044\u3048\u3070\u4ed5\u65b9\u306a\u3044\u3002\u3002\u3002\uff08\u5b66\u6821\u306ePC\u306f\u3001\u5f8c\u8ff0\u3059\u308bweighttp\u3067\u3059\u3089\u5165\u308c\u3089\u308c\u308b\u304b\u308f\u304b\u3089\u306a\u3044\u74b0\u5883\u306a\u306e\u3067\uff09\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\ngithub - SimpleHTTPServer\n\u3053\u3093\u306a\u3082\u306e\u3067\u3059\u304c\u3001Issue\u9001\u3063\u3066\u3082\u3089\u3063\u305f\u308a\u3057\u305f\u3053\u3068\u306a\u3044\u306e\u3067\u3001\u7d76\u8cdb\u52df\u96c6\u4e2d\u3067\u3059\u3002\n\u3082\u3061\u308d\u3093pull request\u3082\u53d7\u3051\u4ed8\u3051\u3066\u307e\u3059\uff01\n\n\u30d8\u30c3\u30c0\u30fc\u30d5\u30a1\u30a4\u30eb\n\nhttp_server.hpp\n#ifndef __HTTP_SERVER_HPP__\n#define __HTTP_SERVER_HPP__\n\n#include <thread>\n#include <atomic>\n#include <mutex>\n#include <map>\n#include <functional>\n\n#include \"http_request.hpp\"\n#include \"http_response.hpp\"\n\ntypedef std::function<void(HTTPRequest, HTTPResponse)> Router;\n\nclass HTTPServer {\nprivate:\n  std::thread server;\n  std::atomic<bool> finishFlag;\n  std::atomic<int> port;\n  std::atomic<int> sockfd;\n  std::atomic<int> nsockfd;\n  std::map<std::string, Router> routing;\n  std::function<void(HTTPRequest, HTTPResponse)> defaultRouter;\npublic:\n  HTTPServer(int port);\n  ~HTTPServer();\n  void run();\n  void addRouter(std::string path, Router router);\n  void setDefaultRouter(Router router);\n};\n\n#endif\n\n\n\nhttp_request.hpp\n#ifndef __HTTP_REQUEST_HPP__\n#define __HTTP_REQUEST_HPP__\n\n#include <string>\n#include <map>\n\nclass HTTPRequest {\nprivate:\n  std::string method;\n  std::string path;\n  std::string version;\n  std::map<std::string, std::string> params;\n\npublic:\n  HTTPRequest(std::string req);\n\n  std::string getMethod();\n  std::string getPath();\n  std::string getHTTPVersion();\n  std::map<std::string, std::string>& getParams();\n};\n\n#endif\n\n\n\nhttp_response.hpp\n#ifndef __HTTP_RESPONSE_HPP__\n#define __HTTP_RESPONSE_HPP__\n\n#include <string>\n\nenum STATUS_CODE {\n  OK,\n  ACCEPTED,\n  NOT_ACCEPTABLE,\n  BAD_REQUEST,\n  UNAUTHORIZED,\n  FORBIDDEN,\n  NOT_FOUND\n};\n\nenum CONTENT_TYPE {\n  TEXT_PLAIN,\n  TEXT_HTML,\n  TEXT_CSS\n};\n\nclass HTTPResponse {\nprivate:\n  int fd;\n\npublic:\n  HTTPResponse(int fd);\n\n  void sendStatusCode(enum STATUS_CODE code);\n  void sendContentType(enum CONTENT_TYPE code);\n\n  void sendBinary(unsigned char b);\n  void sendString(std::string msg);\n  void sendFile(std::string filename);\n};\n\n#endif\n\n\n\nhttp_resource.hpp\n#ifndef __HTTP_RESOURCE_HPP__\n#define __HTTP_RESOURCE_HPP__\n\n#include <string>\n#include <functional>\n\n#include \"http_request.hpp\"\n#include \"http_response.hpp\"\n\nclass HTTPResource {\nprivate:\n  std::string rootPath;\n\npublic:\n  HTTPResource(std::string path);\n\n  std::string getRootPath();\n  void setRootPath(std::string path);\n\n  std::function<void(HTTPRequest, HTTPResponse)>\n    getRouter(std::string path, enum STATUS_CODE sc, enum CONTENT_TYPE ct);\n};\n\n#endif\n\n\n\n\u4f7f\u3044\u65b9\n\nHTTPResource\u3092\u7528\u610f\u3059\u308b\u3002\nHTTPResourse resource(\"[Rootpath]\");\n\n\nHTTPServer\u3092\u7528\u610f\u3059\u308b\u3002\nHTTPServer server([port]);\n\n\nrouter\u3092\u8ffd\u52a0\u3059\u308b\u3002\nserver.setDefaultRouter(resource.getRouter(\"index.html\", OK, TEXT_HTML));\n\nserver.addRouter(\"/\", [](HTTPRequest req, HTTPResponse res){\n  res.sendStatusCode(OK);\n  res.sendContentType(TEXT_PLAIN);\n  res.sendString(\"\\r\\n\");\n  res.sendString(\"Hello world!\");\n});\n\n\nserver\u3092\u8d70\u3089\u305b\u308b\u3002\nserver.run();\n\n\n\u6027\u80fd\u3092\u6e2c\u3063\u3066\u307f\u308b\nweighttp\u3092\u5229\u7528\u3057\u3066\u3001\u6027\u80fd\u3092\u6e2c\u5b9a\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u8fd4\u3059\u30c7\u30fc\u30bf\u306f\u3053\u3061\u3089\u306b\u306a\u308a\u307e\u3059\u3002\n\nindex.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Document</title>\n</head>\n<body>\n  Hello world!\n</body>\n</html>\n\n\n$ weighttp -n 10000 localhost:1234\nweighttp 0.4 - a lightweight and simple webserver benchmarking tool\n\nstarting benchmark...\nspawning thread #1: 1 concurrent requests, 10000 total requests\nprogress:  10% done\nprogress:  20% done\nprogress:  30% done\nprogress:  40% done\nprogress:  50% done\nprogress:  60% done\nprogress:  70% done\nprogress:  80% done\nprogress:  90% done\nprogress: 100% done\n\nfinished in 2 sec, 72 millisec and 739 microsec, 4824 req/s, 655 kbyte/s\nrequests: 10000 total, 10000 started, 10000 done, 0 succeeded, 10000 failed, 0 errored\nstatus codes: 10000 2xx, 0 3xx, 0 4xx, 0 5xx\ntraffic: 1391646 bytes total, 1391646 bytes http, 0 bytes data\n\n\u307e\u3041\u307e\u3041\u306e\u6027\u80fd\u51fa\u3066\u307e\u3059\u306d\u3002\n\u307e\u3041\u4eca\u56de\u306f\u3053\u308c\u3067\u6e80\u8db3\u3067\u3059\uff01\n# \u306a\u305c\u3001\u4eca\u30b9\u30af\u30e9\u30c3\u30c1\u3067\u4f5c\u3063\u305f\u306e\u304b\uff1f\n\u3046\u3061\u306e\u5b66\u6821\u306e\u6587\u5316\u796d\u3067\u3001\u3068\u3042\u308b\u30b2\u30fc\u30e0\u3092\u4f5c\u308b\u3053\u3068\u306b\u306a\u3063\u305f\u306e\u3067\u3059\u304c\u3001LCD\u306b\u30b2\u30fc\u30e0\u306e\u72b6\u6cc1\u3092\u8868\u793a\u3057\u3088\u3046\u3068\u3057\u307e\u3057\u305f\u3002\n\nLCD\u306f\u305f\u304b\u304c\u30012\u521716\u884c\u3002\n\n\u6163\u308c\u3066\u3044\u306a\u3044\u4eba\u304c\u898b\u308b\u306b\u306f\u3001\u5c0f\u3055\u3059\u304e\u307e\u3059\u3002\n\n\u306a\u3089\u3070\u3001\u3001\u3001\n\n\u30b2\u30fc\u30e0\u3092\u5b9f\u884c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306bHTTP\u30b5\u30fc\u30d0\u30fc\u306e\u6a5f\u80fd\u3092\u52a0\u3048\u3066\u3001\u3082\u3046\u4e00\u53f0\u306e\u30d1\u30bd\u30b3\u30f3\u3067Web\u30d6\u30e9\u30a6\u30b6\u3092\u7acb\u3061\u4e0a\u3052\u3066\u3057\u307e\u3048\u3070\u3044\u3044\u3093\u3060\uff01\nJavascript\u3067\u5236\u5fa1\u3057\u3066\u3084\u308c\u3070\u3001\u4e00\u3064\u306e\u30da\u30fc\u30b8\u304c\u3061\u3083\u304b\u3061\u3083\u304b\u5909\u308f\u308b\u3088\u3046\u306b\u3082\u898b\u305b\u3089\u308c\u308b\u3057\u3001\u97f3\u3092\u304b\u3051\u308b\u3053\u3068\u3082\u3001\u52d5\u753b\u3092\u898b\u305b\u308b\u3053\u3068\u3082\u53ef\u80fd\u3058\u3083\u3093\uff01\n\n\u3067\u3082\u3001\u3001\u3001\n\n- \u5b66\u6821\u306ePC\u306f\u5171\u6709\u306a\u306e\u3067\u3001\u81ea\u5206\u304c\u4f7f\u3048\u308b\u9818\u57df\u306f1GB\u3057\u304b\u306a\u3044\u305f\u3081\u3001Boost\u3059\u3089\u4f7f\u3048\u306a\u3044\u3002\n- \u672c\u756a\u3069\u306e\u30d1\u30bd\u30b3\u30f3\u3092\u4f7f\u3046\u306e\u304b\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u3001\u306a\u308b\u3079\u304fLinux\u306e\u30c7\u30a3\u30b9\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3\u3067\u5dee\u7570\u304c\u306a\u3044\u3088\u3046\u306b\u3057\u306a\u304f\u3066\u306f\u884c\u3051\u306a\u3044\u3002\n- \u30b2\u30fc\u30e0\u306e\u65b9\u3067\u3082\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3067\u51e6\u7406\u3092\u3055\u305b\u308b\u305f\u3081\u3001\u305d\u3093\u306a\u306b\u91cd\u304f\u306a\u3063\u3066\u3082\u3044\u3051\u306a\u3044\u3002\n- 10\u30c7\u30fc\u30bf\u309260\u66f4\u65b0/\u79d2\u306f\u3055\u305b\u305f\u3044\u306e\u3067\u3001600\u30ec\u30b9\u30dd\u30f3\u30b9/\u79d2\u306f\u3055\u305b\u305f\u3044\u3002\n\n# \u5b9f\u884c\u74b0\u5883\nPC - MacBook Pro\nCPU - Intel Core i7 (2.8GHz)\nMemory - 16GB\n\n\u5b9f\u969b\u306e\u74b0\u5883\u3067\u306f\u306a\u3044\u3067\u3059\u3002\n\n\u3067\u3059\u304c\u3001\u81ea\u5b85\u3067\u958b\u767a\u3057\u3066\u308b\u305f\u3081\u3001\u4ed5\u65b9\u306a\u3044\u3068\u3044\u3048\u3070\u4ed5\u65b9\u306a\u3044\u3002\u3002\u3002\uff08\u5b66\u6821\u306ePC\u306f\u3001\u5f8c\u8ff0\u3059\u308bweighttp\u3067\u3059\u3089\u5165\u308c\u3089\u308c\u308b\u304b\u308f\u304b\u3089\u306a\u3044\u74b0\u5883\u306a\u306e\u3067\uff09\n\n# \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n[github - SimpleHTTPServer](https://github.com/ryogaelbtn/SimpleHTTPServer)\n\n\u3053\u3093\u306a\u3082\u306e\u3067\u3059\u304c\u3001Issue\u9001\u3063\u3066\u3082\u3089\u3063\u305f\u308a\u3057\u305f\u3053\u3068\u306a\u3044\u306e\u3067\u3001\u7d76\u8cdb\u52df\u96c6\u4e2d\u3067\u3059\u3002\n\u3082\u3061\u308d\u3093pull request\u3082\u53d7\u3051\u4ed8\u3051\u3066\u307e\u3059\uff01\n\n# \u30d8\u30c3\u30c0\u30fc\u30d5\u30a1\u30a4\u30eb\n```http_server.hpp\n#ifndef __HTTP_SERVER_HPP__\n#define __HTTP_SERVER_HPP__\n\n#include <thread>\n#include <atomic>\n#include <mutex>\n#include <map>\n#include <functional>\n\n#include \"http_request.hpp\"\n#include \"http_response.hpp\"\n\ntypedef std::function<void(HTTPRequest, HTTPResponse)> Router;\n\nclass HTTPServer {\nprivate:\n  std::thread server;\n  std::atomic<bool> finishFlag;\n  std::atomic<int> port;\n  std::atomic<int> sockfd;\n  std::atomic<int> nsockfd;\n  std::map<std::string, Router> routing;\n  std::function<void(HTTPRequest, HTTPResponse)> defaultRouter;\npublic:\n  HTTPServer(int port);\n  ~HTTPServer();\n  void run();\n  void addRouter(std::string path, Router router);\n  void setDefaultRouter(Router router);\n};\n\n#endif\n```\n\n```http_request.hpp\n#ifndef __HTTP_REQUEST_HPP__\n#define __HTTP_REQUEST_HPP__\n\n#include <string>\n#include <map>\n\nclass HTTPRequest {\nprivate:\n  std::string method;\n  std::string path;\n  std::string version;\n  std::map<std::string, std::string> params;\n\npublic:\n  HTTPRequest(std::string req);\n\n  std::string getMethod();\n  std::string getPath();\n  std::string getHTTPVersion();\n  std::map<std::string, std::string>& getParams();\n};\n\n#endif\n```\n\n```http_response.hpp\n#ifndef __HTTP_RESPONSE_HPP__\n#define __HTTP_RESPONSE_HPP__\n\n#include <string>\n\nenum STATUS_CODE {\n  OK,\n  ACCEPTED,\n  NOT_ACCEPTABLE,\n  BAD_REQUEST,\n  UNAUTHORIZED,\n  FORBIDDEN,\n  NOT_FOUND\n};\n\nenum CONTENT_TYPE {\n  TEXT_PLAIN,\n  TEXT_HTML,\n  TEXT_CSS\n};\n\nclass HTTPResponse {\nprivate:\n  int fd;\n\npublic:\n  HTTPResponse(int fd);\n\n  void sendStatusCode(enum STATUS_CODE code);\n  void sendContentType(enum CONTENT_TYPE code);\n\n  void sendBinary(unsigned char b);\n  void sendString(std::string msg);\n  void sendFile(std::string filename);\n};\n\n#endif\n```\n\n```http_resource.hpp\n#ifndef __HTTP_RESOURCE_HPP__\n#define __HTTP_RESOURCE_HPP__\n\n#include <string>\n#include <functional>\n\n#include \"http_request.hpp\"\n#include \"http_response.hpp\"\n\nclass HTTPResource {\nprivate:\n  std::string rootPath;\n\npublic:\n  HTTPResource(std::string path);\n\n  std::string getRootPath();\n  void setRootPath(std::string path);\n\n  std::function<void(HTTPRequest, HTTPResponse)>\n    getRouter(std::string path, enum STATUS_CODE sc, enum CONTENT_TYPE ct);\n};\n\n#endif\n```\n\n# \u4f7f\u3044\u65b9\n\n### HTTPResource\u3092\u7528\u610f\u3059\u308b\u3002\n```\nHTTPResourse resource(\"[Rootpath]\");\n```\n\n### HTTPServer\u3092\u7528\u610f\u3059\u308b\u3002\n```\nHTTPServer server([port]);\n```\n\n### router\u3092\u8ffd\u52a0\u3059\u308b\u3002\n```\nserver.setDefaultRouter(resource.getRouter(\"index.html\", OK, TEXT_HTML));\n\nserver.addRouter(\"/\", [](HTTPRequest req, HTTPResponse res){\n  res.sendStatusCode(OK);\n  res.sendContentType(TEXT_PLAIN);\n  res.sendString(\"\\r\\n\");\n  res.sendString(\"Hello world!\");\n});\n```\n\n### server\u3092\u8d70\u3089\u305b\u308b\u3002\n```\nserver.run();\n```\n\n# \u6027\u80fd\u3092\u6e2c\u3063\u3066\u307f\u308b\nweighttp\u3092\u5229\u7528\u3057\u3066\u3001\u6027\u80fd\u3092\u6e2c\u5b9a\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u8fd4\u3059\u30c7\u30fc\u30bf\u306f\u3053\u3061\u3089\u306b\u306a\u308a\u307e\u3059\u3002\n\n```index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Document</title>\n</head>\n<body>\n  Hello world!\n</body>\n</html>\n```\n\n```zsh\n$ weighttp -n 10000 localhost:1234\nweighttp 0.4 - a lightweight and simple webserver benchmarking tool\n\nstarting benchmark...\nspawning thread #1: 1 concurrent requests, 10000 total requests\nprogress:  10% done\nprogress:  20% done\nprogress:  30% done\nprogress:  40% done\nprogress:  50% done\nprogress:  60% done\nprogress:  70% done\nprogress:  80% done\nprogress:  90% done\nprogress: 100% done\n\nfinished in 2 sec, 72 millisec and 739 microsec, 4824 req/s, 655 kbyte/s\nrequests: 10000 total, 10000 started, 10000 done, 0 succeeded, 10000 failed, 0 errored\nstatus codes: 10000 2xx, 0 3xx, 0 4xx, 0 5xx\ntraffic: 1391646 bytes total, 1391646 bytes http, 0 bytes data\n```\n\n\u307e\u3041\u307e\u3041\u306e\u6027\u80fd\u51fa\u3066\u307e\u3059\u306d\u3002\n\n\u307e\u3041\u4eca\u56de\u306f\u3053\u308c\u3067\u6e80\u8db3\u3067\u3059\uff01\n", "tags": ["HTTP", "C++", "Linux"]}