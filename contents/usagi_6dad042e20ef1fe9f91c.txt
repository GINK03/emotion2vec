{"context": "\n\n\u76ee\u7684\nyieldable ( \u2248 generative \u2248 enumerable ) \u306a task ( \u2248 functors ) \u30b7\u30b9\u30c6\u30e0\u3092 C++14 \u3068 boost::coroutines \u3068 boost::signals2 \u3067\u7c21\u5358\u306b\u5b9f\u88c5\u3067\u304d\u3066\u4fbf\u5229\u306b\u4f7f\u3048\u308b\u306e\u3067\u7d39\u4ecb\u3057\u305f\u3044\u3002\n\n\u88dc\u52a9\u8aac\u660e\n\nyieldable: C# \u306e yield return \u306e\u3088\u3046\u306b\u95a2\u6570\u306e\u4e2d\u9593\u6bb5\u968e\u3067\u95a2\u6570\u306e\u5916\u306b\u7d50\u679c\u3092\u6e21\u305b\u308b\u4ed5\u7d44\u307f\u3002\u8868\u73fe\u3068\u3057\u3066 yield \u304b\u3089\u9023\u60f3\u3057\u3084\u3059\u3044\u4e8b\u304b\u3089\u3053\u306e\u8a18\u4e8b\u3067\u306f yieldable \u3068\u3057\u305f\u3002\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u4e00\u822c\u8ad6\u3068\u3057\u3066\u306f\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30fc\u3068\u547c\u3070\u308c\u308b\u4e8b\u3082\u3042\u308b\u6a5f\u80fd\u3002 boost::coroutines \u306b\u3088\u308a\u4f7f\u7528\u53ef\u80fd\u3002\ntask system: \u69d8\u3005\u306a\u51e6\u7406\u5185\u5bb9\u306b\u5bfe\u5fdc\u53ef\u80fd\u306a functor \u7fa4\u306e\u5b9f\u884c\u3092\u7ba1\u7406\u3057\u3066\u304f\u308c\u308b\u6a5f\u80fd\u3068\u3057\u3066\u3053\u306e\u8a18\u4e8b\u3067\u306f task system \u3068\u8868\u73fe\u3057\u305f\u3002 functor \u306f C++ \u306b\u304a\u3044\u3066\u306f lambda expression \u3084 operator() \u3092\u5b9f\u88c5\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u578b\u306b\u3088\u308b\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3001C\u30b9\u30bf\u30a4\u30eb\u306e\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u30fc\u306a\u3069\u95a2\u6570\u547c\u3073\u51fa\u3057\u3068\u3057\u3066\u632f\u308b\u821e\u3046\u4e8b\u306e\u3067\u304d\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u610f\u5473\u3002\nC++14: \u3053\u306e\u8a18\u4e8b\u3067\u7d39\u4ecb\u3059\u308b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f C++14 \u4ee5\u964d\u306e\u8a00\u8a9e\u898f\u683c\u306b\u5bfe\u5fdc\u3057\u305f\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u3092\u4f7f\u308f\u306a\u3044\u3068\u305d\u306e\u307e\u307e\u3067\u306f\u7ffb\u8a33\u3067\u304d\u306a\u3044\u3002C++14\u306e\u6069\u6075\u3068\u3057\u3066 lambda expression \u306e\u5f15\u6570\u3067\u306e auto \u306b\u3088\u308b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5316\u3001\u305d\u308c\u306b\u3088\u308b\u30b3\u30fc\u30c9\u306e\u8a18\u8ff0\u306e\u7c21\u7565\u5316\u306a\u3069\u306e\u6069\u6075\u3092\u53d7\u3051\u3066\u3044\u308b\u3002\nboost::signals2: C++ \u3067\u306f Qt \u306a\u3069\u3067\u304a\u99b4\u67d3\u307f\u306e signal/slot \u6a5f\u80fd\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306e boost \u306e\u5b9f\u88c5\u3002\u4eca\u56de\u306f\u8907\u6570\u306e task \u3092 slot \u3068\u3057\u3066 task system \u306e signal \u306b\u6301\u305f\u305b\u308b\u4e8b\u3067\u7c21\u5358\u306a task system \u306e\u5b9f\u88c5\u3068\u3057\u3066\u4f7f\u3063\u3066\u3044\u308b\u3002\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u306a\u70b9\u3082\u4fbf\u5229\u3067\u5b89\u5fc3\u3057\u3066\u4f7f\u3048\u308b\u3002\n\n\nyieldable task system\n\nyieldable_task_system.hxx:\n\n#include <boost/coroutine/all.hpp>\n#include <boost/signals2/signal.hpp>\n#include <memory>\n\nnamespace usagi\n{\n\nclass yieldable_task_system_type\n{\n  boost::signals2::signal< auto () -> void > signal;\npublic:\n  template < typename COROUTINE_TYPE >\n  auto push( COROUTINE_TYPE&& coroutine ) -> void\n  {\n    push( boost::coroutines::coroutine< void >::pull_type( std::move( coroutine ) ) );\n  }\n\n  auto push( boost::coroutines::coroutine< void >::pull_type&& coroutine ) -> void\n  {\n    auto shared_coroutine  = std::make_shared< boost::coroutines::coroutine< void >::pull_type >( std::move( coroutine ) );\n    auto shared_connection = std::make_shared< boost::signals2::connection >();\n    *shared_connection = signal.connect\n    ( [ = ]\n      {\n        if ( not (*shared_coroutine)() )\n          shared_connection->disconnect();\n      }\n    );\n  }\n\n  auto consume_one() -> bool\n  {\n    signal();\n    return not signal.empty();\n  }\n\n  auto consume_all() -> void\n  {\n    while ( consume_one() );\n  }\n\n  auto operator()() -> void\n  {\n    consume_all();\n  }\n};\n\n}\n\n\n\u4f7f\u7528\u4f8b\n\nmain.cxx:\n\n#include \"yieldable_task_system.hxx\"\n#include <chrono>\n#include <iostream>\n\nauto main() -> int\n{\n  using namespace std::chrono;\n\n  usagi::yieldable_task_system_type yieldable_task_system;\n\n  yieldable_task_system.push\n  ( [ t0 = high_resolution_clock::now() ]\n    ( auto& yield )\n    {\n      std::cout << 'a' << std::flush;\n      yield();\n\n      do\n      {\n        std::cout << 'b' << std::flush;\n        yield();\n      }\n      while ( high_resolution_clock::now() - t0 < microseconds( 512 ) );\n\n      std::cout << 'c' << std::flush;\n      yield();\n    }\n  );\n\n  yieldable_task_system.push\n  ( []\n    ( auto& yield )\n    {\n      for ( const auto value : { 'X', 'Y', 'Z' } )\n      {\n        std::cout << value << std::flush;\n        yield();\n      }\n    }\n  );\n\n  yieldable_task_system.push\n  ( []\n    ( auto& yield )\n    {\n      std::cout << '1' << std::flush;\n      yield();\n      std::cout << '2' << std::flush;\n      yield();\n    }\n  );\n\n  yieldable_task_system();\n}\n\n\n\u7d50\u679c\naX1bY2bZbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc\n\n\uff08\u8a3b: \u51e6\u7406\u4e2d\u306b\u7d4c\u904e\u6642\u9593\u3092\u89b3\u6e2c\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u5b9f\u884c\u3054\u3068\u306b\u7d50\u679c\u306e b \u306e\u51fa\u529b\u56de\u6570\u306f\u7570\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\uff09\n\nwandbox\n\nhttp://melpon.org/wandbox/permlink/MxUUIcUGT6hviyQC\n\n\nReference\n\nhttp://theboostcpplibraries.com/boost.coroutine\nhttp://www.boost.org/doc/libs/1_60_0/doc/html/boost/signals2/signal.html\nhttp://boostjp.github.io/tips/signals.html\n\n# \u76ee\u7684\n\nyieldable ( \u2248 generative \u2248 enumerable ) \u306a task ( \u2248 functors ) \u30b7\u30b9\u30c6\u30e0\u3092 C++14 \u3068 boost::coroutines \u3068 boost::signals2 \u3067\u7c21\u5358\u306b\u5b9f\u88c5\u3067\u304d\u3066\u4fbf\u5229\u306b\u4f7f\u3048\u308b\u306e\u3067\u7d39\u4ecb\u3057\u305f\u3044\u3002\n\n## \u88dc\u52a9\u8aac\u660e\n\n- yieldable: C# \u306e `yield return` \u306e\u3088\u3046\u306b\u95a2\u6570\u306e\u4e2d\u9593\u6bb5\u968e\u3067\u95a2\u6570\u306e\u5916\u306b\u7d50\u679c\u3092\u6e21\u305b\u308b\u4ed5\u7d44\u307f\u3002\u8868\u73fe\u3068\u3057\u3066 yield \u304b\u3089\u9023\u60f3\u3057\u3084\u3059\u3044\u4e8b\u304b\u3089\u3053\u306e\u8a18\u4e8b\u3067\u306f yieldable \u3068\u3057\u305f\u3002\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u4e00\u822c\u8ad6\u3068\u3057\u3066\u306f\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30fc\u3068\u547c\u3070\u308c\u308b\u4e8b\u3082\u3042\u308b\u6a5f\u80fd\u3002 boost::coroutines \u306b\u3088\u308a\u4f7f\u7528\u53ef\u80fd\u3002\n- task system: \u69d8\u3005\u306a\u51e6\u7406\u5185\u5bb9\u306b\u5bfe\u5fdc\u53ef\u80fd\u306a functor \u7fa4\u306e\u5b9f\u884c\u3092\u7ba1\u7406\u3057\u3066\u304f\u308c\u308b\u6a5f\u80fd\u3068\u3057\u3066\u3053\u306e\u8a18\u4e8b\u3067\u306f task system \u3068\u8868\u73fe\u3057\u305f\u3002 functor \u306f C++ \u306b\u304a\u3044\u3066\u306f lambda expression \u3084 operator() \u3092\u5b9f\u88c5\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u578b\u306b\u3088\u308b\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3001C\u30b9\u30bf\u30a4\u30eb\u306e\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u30fc\u306a\u3069\u95a2\u6570\u547c\u3073\u51fa\u3057\u3068\u3057\u3066\u632f\u308b\u821e\u3046\u4e8b\u306e\u3067\u304d\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u610f\u5473\u3002\n- C++14: \u3053\u306e\u8a18\u4e8b\u3067\u7d39\u4ecb\u3059\u308b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f C++14 \u4ee5\u964d\u306e\u8a00\u8a9e\u898f\u683c\u306b\u5bfe\u5fdc\u3057\u305f\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u3092\u4f7f\u308f\u306a\u3044\u3068\u305d\u306e\u307e\u307e\u3067\u306f\u7ffb\u8a33\u3067\u304d\u306a\u3044\u3002C++14\u306e\u6069\u6075\u3068\u3057\u3066 lambda expression \u306e\u5f15\u6570\u3067\u306e `auto` \u306b\u3088\u308b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5316\u3001\u305d\u308c\u306b\u3088\u308b\u30b3\u30fc\u30c9\u306e\u8a18\u8ff0\u306e\u7c21\u7565\u5316\u306a\u3069\u306e\u6069\u6075\u3092\u53d7\u3051\u3066\u3044\u308b\u3002\n- boost::signals2: C++ \u3067\u306f Qt \u306a\u3069\u3067\u304a\u99b4\u67d3\u307f\u306e signal/slot \u6a5f\u80fd\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306e boost \u306e\u5b9f\u88c5\u3002\u4eca\u56de\u306f\u8907\u6570\u306e task \u3092 slot \u3068\u3057\u3066 task system \u306e signal \u306b\u6301\u305f\u305b\u308b\u4e8b\u3067\u7c21\u5358\u306a task system \u306e\u5b9f\u88c5\u3068\u3057\u3066\u4f7f\u3063\u3066\u3044\u308b\u3002\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u306a\u70b9\u3082\u4fbf\u5229\u3067\u5b89\u5fc3\u3057\u3066\u4f7f\u3048\u308b\u3002\n\n# yieldable task system\n\n- yieldable_task_system.hxx:\n\n```cpp\n#include <boost/coroutine/all.hpp>\n#include <boost/signals2/signal.hpp>\n#include <memory>\n\nnamespace usagi\n{\n\nclass yieldable_task_system_type\n{\n  boost::signals2::signal< auto () -> void > signal;\npublic:\n  template < typename COROUTINE_TYPE >\n  auto push( COROUTINE_TYPE&& coroutine ) -> void\n  {\n    push( boost::coroutines::coroutine< void >::pull_type( std::move( coroutine ) ) );\n  }\n  \n  auto push( boost::coroutines::coroutine< void >::pull_type&& coroutine ) -> void\n  {\n    auto shared_coroutine  = std::make_shared< boost::coroutines::coroutine< void >::pull_type >( std::move( coroutine ) );\n    auto shared_connection = std::make_shared< boost::signals2::connection >();\n    *shared_connection = signal.connect\n    ( [ = ]\n      {\n        if ( not (*shared_coroutine)() )\n          shared_connection->disconnect();\n      }\n    );\n  }\n  \n  auto consume_one() -> bool\n  {\n    signal();\n    return not signal.empty();\n  }\n  \n  auto consume_all() -> void\n  {\n    while ( consume_one() );\n  }\n  \n  auto operator()() -> void\n  {\n    consume_all();\n  }\n};\n\n}\n```\n\n## \u4f7f\u7528\u4f8b\n\n- main.cxx:\n\n```cpp\n#include \"yieldable_task_system.hxx\"\n#include <chrono>\n#include <iostream>\n\nauto main() -> int\n{\n  using namespace std::chrono;\n  \n  usagi::yieldable_task_system_type yieldable_task_system;\n  \n  yieldable_task_system.push\n  ( [ t0 = high_resolution_clock::now() ]\n    ( auto& yield )\n    {\n      std::cout << 'a' << std::flush;\n      yield();\n      \n      do\n      {\n        std::cout << 'b' << std::flush;\n        yield();\n      }\n      while ( high_resolution_clock::now() - t0 < microseconds( 512 ) );\n      \n      std::cout << 'c' << std::flush;\n      yield();\n    }\n  );\n  \n  yieldable_task_system.push\n  ( []\n    ( auto& yield )\n    {\n      for ( const auto value : { 'X', 'Y', 'Z' } )\n      {\n        std::cout << value << std::flush;\n        yield();\n      }\n    }\n  );\n  \n  yieldable_task_system.push\n  ( []\n    ( auto& yield )\n    {\n      std::cout << '1' << std::flush;\n      yield();\n      std::cout << '2' << std::flush;\n      yield();\n    }\n  );\n  \n  yieldable_task_system();\n}\n```\n\n### \u7d50\u679c\n\n```cpp\naX1bY2bZbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc\n```\n\n\uff08\u8a3b: \u51e6\u7406\u4e2d\u306b\u7d4c\u904e\u6642\u9593\u3092\u89b3\u6e2c\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u5b9f\u884c\u3054\u3068\u306b\u7d50\u679c\u306e `b` \u306e\u51fa\u529b\u56de\u6570\u306f\u7570\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\uff09\n\n## wandbox\n\n- http://melpon.org/wandbox/permlink/MxUUIcUGT6hviyQC\n\n# Reference\n\n- http://theboostcpplibraries.com/boost.coroutine\n- http://www.boost.org/doc/libs/1_60_0/doc/html/boost/signals2/signal.html\n- http://boostjp.github.io/tips/signals.html\n", "tags": ["C++", "C++14", "Boost.Coroutines", "Boost.Signals2", "TaskSystem"]}