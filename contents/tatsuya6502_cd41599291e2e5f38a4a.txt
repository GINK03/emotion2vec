{"context": " More than 1 year has passed since last update.\n\n\u3053\u306e\u8a18\u4e8b\u306e\u6982\u8981\nOption<T> \u578b\u3084 Result<T, E> \u578b\u306e\u623b\u308a\u5024\u3092\u3001match \u5f0f\u3067\u5224\u5225\u3057\u3066\u3044\u308b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u3001\nfn double_arg(mut argv: env::Args) -> Result<i32, String> {\n    match argv.nth(1) {\n        None => Err(\"\u6570\u5b57\u3092\uff11\u3064\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\".to_owned()),\n        Some(arg1) => {\n            match arg1.parse::<i32>() {\n                Ok(n) => Ok(2 * n),\n                Err(err) => Err(err.to_string()),\n            }\n        }\n    }\n}\n\nRust \u306e\u6a19\u6e96\u7684\u306a\u90e8\u54c1\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\u3059\u3063\u304d\u308a\u8aad\u307f\u3084\u3059\u304f\u4ed5\u4e0a\u3052\u308b\u307e\u3067\u306e\u9053\u306e\u308a\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\nfn double_arg(mut argv: env::Args) -> Result<i32, CliError> {\n    let arg1 = try!(argv.nth(1).ok_or(CliError::NotEnoughArgs));\n    let n = try!(arg1.parse::<i32>());\n    Ok(2 * n)\n}\n\n\u306a\u304a\u3001\u3053\u306e\u8a18\u4e8b\u306f\u3001Rust \u306e\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u300cRust\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u300d\uff08\u65e5\u672c\u8a9e\u7ffb\u8a33\u7248\uff09\u306e \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0 \u306e\u7ae0\u3092\u53c2\u8003\u306b\u3057\u3066\u66f8\u304d\u307e\u3057\u305f\u3002\n\nRust \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\n\u3053\u306e\u8a18\u4e8b\u306e\u30b3\u30fc\u30c9\u306f\u30012016\u5e742\u6708\u73fe\u5728\u306e\u6700\u65b0\u306e\u5b89\u5b9a\u7248\u3067\u52d5\u4f5c\u78ba\u8a8d\u6e08\u307f\u3067\u3059\uff1a\n\nrustc 1.6.0\ncargo 0.8.0 (08da2f5 2015-12-21)\n\nrustc 1.0 \u4ee5\u964d\u306a\u3089\u3001\u3069\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u3082\u554f\u984c\u306a\u304f\u52d5\u304f\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u672c\u8a18\u4e8b\u3067\u7d39\u4ecb\u3059\u308b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3001GitHub \u306b\u7f6e\u3044\u3066\u3042\u308a\u307e\u3059\u3002\n\ntatsuya6502/rust-option-result-examples\n\nRust \u3068 Cargo \u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u305f\u74b0\u5883\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3059\u308c\u3070\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\n$ cd rust-option-result-examples\n$ cargo --bin main{1-7\u306e\u9023\u756a} -- \u30d7\u30ed\u30b0\u30e9\u30e0\u3078\u306e\u5f15\u6570\n\n\u4f8b\uff1a\n$ cargo --bin main7 -- 123\n   Compiling error-handling v0.1.0 (file:/// ... rust-option-result-examples)\n     Running `target/debug/main7 123`\n246\n\n\n\u57fa\u790e\u77e5\u8b58\uff1aOption<T> \u578b\u3068 Result<T, E> \u578b\n\nOption<T> \u578b\nRust \u306e Option<T> \u578b\u306f\u3001\u5024\u304c \u5b58\u5728\u3057\u306a\u3044 \u53ef\u80fd\u6027\u3092\u6697\u793a\u3059\u308b\u5217\u6319\u578b\u3067\u3059\u3002\u5b9a\u7fa9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\nenum Option<T> {\n    None,\n    Some(T),\n}\n\nT\u578b\u306e\u5024\u304c\u5b58\u5728\u3059\u308b\u6642\u306f\u3001Some \u3067\u5305\u307e\u308c\u3066\u3044\u307e\u3059\u3002\u5b58\u5728\u3057\u306a\u3044\u6642\u306f None \u306b\u306a\u308a\u307e\u3059\u3002\nOption \u578b\u306f\u3001\u4ed6\u306e\u8a00\u8a9e\u3067\u306f Maybe \u3084 Optional \u306a\u3069\u3068\u547c\u3070\u308c\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002\n\u4f8b\uff1a\nLinux \u306e Docker \u304c\u4f7f\u3048\u308b\u74b0\u5883\u3067 rusti \u3092\u5b9f\u884c\uff1a\n% sudo docker run -it --rm quay.io/tatsuya6502/rusti\n# cd ~/rusti\n# cargo run\nrusti=>\n\nSome(10) \u306f Option<i32> \u578b\u3067\u3059\u3002\nrusti=> Some(10)\nSome(10)\nrusti=> .type Some(10)\nSome(10) = core::option::Option<i32>\n\n\u6ce8\u610f\uff1a rusti \u3067\u578b\u3092\u898b\u308b\u3068 core \u30e9\u30a4\u30d6\u30e9\u30ea\u306e Option<T> \u578b\u304c\u512a\u5148\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u901a\u5e38\u306e Rust \u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f core \u30e9\u30a4\u30d6\u30e9\u30ea\u3092 use \u6307\u5b9a\u3057\u3066\u306a\u3044\u306e\u3067\u3001core \u3067\u306f\u306a\u304f\u3001std \u30e9\u30a4\u30d6\u30e9\u30ea\u306e std::option::Option<T> \u578b\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u3061\u3089\u306f Option<String> \u578b\u3067\u3059\u3002\nrusti=> Some(\"Hello, world!\".to_owned())\nSome(\"Hello, world!\")\nrusti=> .type Some(\"Hello, world!\".to_owned())\n...\u7701\u7565... = core::option::Option<collections::string::String>\n\nNone \u306f\u5358\u4f53\u3060\u3068 Option<T> \u306e T \u304c\u6c7a\u307e\u3089\u306a\u3044\u306e\u3067\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\nrusti=> None\n<anon>:13:20: 13:24 error: unable to infer enough type information about `_`; type annotations or generic parameter binding required [E0282]\n...\n\n\u30d2\u30f3\u30c8\u3092\u4e0e\u3048\u307e\u3057\u3087\u3046\u3002\nrusti=> None as Option<i32>\nNone\nrusti=> .type None as Option<i32>\n... = core::option::Option<i32>\n\nSome \u306b\u5305\u307e\u308c\u305f\u5024\u3092\u53d6\u308a\u51fa\u3059\u306b\u306f\u3001match \u5f0f\u306b\u3088\u308b\u5834\u5408\u5206\u3051\u3092\u3057\u307e\u3059\u3002\nrusti=> .block\nrusti+> let v = Some(10);\nrusti+> match v {\nrusti+>     Some(n) => n,\nrusti+>     None    => -1,\nrusti+> }\nrusti+> .\n10\n\nOption \u306b\u51fa\u4f1a\u3046\u5ea6\u306b\u5834\u5408\u5206\u3051\u3092\u3059\u308b\u306e\u306f\u9762\u5012\u306a\u306e\u3067\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u306f\u3001Option \u304b\u3089\u5024\u3092\u53d6\u308a\u51fa\u3057\u305f\u308a\u3001\u52a0\u5de5\u3057\u305f\u308a\u3059\u308b\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4f8b\u3048\u3070 unwrap() \u306f\u6700\u3082\u7d20\u6734\u306a\u30e1\u30bd\u30c3\u30c9\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5b9a\u7fa9\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff1a\n\nOption<T>\u306eunwrap()\u306e\u5b9a\u7fa9\nimpl<T> Option<T> {\n    fn unwrap(self) -> T {\n        match self {\n            Option::Some(val) => val,\n            Option::None =>\n              panic!(\"called `Option::unwrap()` on a `None` value\"),\n        }\n    }\n}\n\n\n\u3053\u306e\u3088\u3046\u306b Some<T> \u306b\u9069\u7528\u3059\u308b\u3068\u3001\u5024\u304c\u53d6\u308a\u51fa\u305b\u307e\u3059\u3002\nrusti=> Some(10).unwrap()\n10\n\n\u305d\u3057\u3066\u3001None \u306b\u9069\u7528\u3059\u308b\u3068\u3001\u30d1\u30cb\u30c3\u30af\u3057\u307e\u3059\u3002\nrusti=> (None as Option<i32>).unwrap()\nthread '<main>' panicked at 'called `Option::unwrap()` on a `None` value', ../src/libcore/option.rs:330\n\nmap() \u306f\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u5f15\u6570\u306b\u3068\u308a\u3001Some \u306e\u4e2d\u306e\u5024\u306b\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u9069\u7528\u3057\u3066\u3001\u7d50\u679c\u3092 Some \u3067\u5305\u307f\u76f4\u3057\u307e\u3059\u3002\u3082\u3057 None \u306b\u9069\u7528\u3059\u308b\u3068\u3001None \u3092\u8fd4\u3057\u307e\u3059\u3002\nrusti=> Some(10).map(|n| 2 * n)\nSome(20)\nrusti=> (None as Option<i32>).map(|n| 2 * n)\nNone\n\nand_then() \u306f map() \u306b\u4f3c\u3066\u3044\u307e\u3059\u304c\u3001\u9055\u3044\u306f Some<T> \u3060\u3051\u3067\u306a\u304f None \u3082\u8fd4\u305b\u308b\u3053\u3068\u3067\u3059\u3002\nrusti=> Some(10).and_then(|n| if n > 5 {Some(n)} else {None} )\nSome(10)\nrusti=> Some(5).and_then(|n| if n > 5 {Some(n)} else {None} )\nNone\nrusti=> (None as Option<i32>).and_then(|n| if n > 5 {Some(n)} else {None} )\nNone\n\nmap() \u3084 and_then() \u306f\u5165\u529b\u3068\u51fa\u529b\u306b Option<T> \u578b\u306e\u5024\u3092\uff11\u3064\u3060\u3051\u53d6\u308b\u306e\u3067\u3001\u6570\u73e0\u3064\u306a\u304e\u306b\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u6027\u8cea\u3092\u6301\u3064\u30e1\u30bd\u30c3\u30c9\u3092\u3001\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3068\u547c\u3073\u307e\u3059\u3002\nrusti=> Some(10).and_then(|n| if n > 5 {Some(n)} else {None}).map(|n| 2 * n)\nSome(20)\nrusti=> Some(5).and_then(|n| if n > 5 {Some(n)} else {None}).map(|n| 2 * n)\nNone\n\n\nResult<T, E> \u578b\nRust \u306e Result<T, E> \u578b\u306f \u30a8\u30e9\u30fc\u306b\u306a\u308b\u53ef\u80fd\u6027 \u3092\u6697\u793a\u3059\u308b\u5217\u6319\u578b\u3067\u3059\u3002\u5b9a\u7fa9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\nenum Result<T, E> {\n    Ok(T),\n    Err(E),\n}\n\n\u51e6\u7406\u304c\u6210\u529f\u3057\u305f\u6642\u306f\u5024\u3092 Ok \u3067\u5305\u307f\u307e\u3059\u3002\u5931\u6557\u3057\u305f\u6642\u306f\u30a8\u30e9\u30fc\u306e\u5024\u3092 Err \u3067\u5305\u307f\u307e\u3059\u3002\nResult \u578b\u306f\u3001\u4ed6\u306e\u8a00\u8a9e\u3067\u306f Either \u3068\u547c\u3070\u308c\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002\nrusti=> .type Ok(10) as Result<i32, ()>\n... = core::result::Result<i32, ()>\nrusti=> .type Ok(\"Success!\".to_owned()) as Result<String, ()>\n... = core::result::Result<collections::string::String, ()>\nrusti=> .type Err(\"Not found\".to_owned()) as Result<i32, String>\n... = core::result::Result<i32, collections::string::String>\n\nOption<T> \u3068\u540c\u3058\u3088\u3046\u306a\u30e1\u30bd\u30c3\u30c9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002unwrap() \u306f\u5024\u304c Err \u306e\u6642\u306f\u30d1\u30cb\u30c3\u30af\u3057\u307e\u3059\u3002\nrusti=> (Ok(10) as Result<i32, String>).unwrap()\n10\nrusti=> (Err(\"Not found\".to_owned()) as Result<i32, String>).unwrap()\nthread '<main>' panicked at 'called `Result::unwrap()` on an `Err` value: \"Not found\"', ../src/libcore/result.rs:746\n\nand_then() \u3084 map() \u306f\u3001\u5024\u304c Ok<T> \u306e\u3068\u304d\u306f\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u5b9f\u884c\u3057\u3001\u5024\u304c Err<E> \u306e\u3068\u304d\u307b\u5143\u306e\u5024\u3092\u672a\u52a0\u5de5\u3067\u8fd4\u3057\u307e\u3059\u3002\nrusti=> .block\nrusti+> (Ok(10) as Result<i32, String>)\nrusti+>   .and_then(|n| if n > 5 {Ok(n)} else {Err(\"Too small\".to_owned())})\nrusti+>   .map(|n| 2 * n)\nrusti+> .\nOk(20)\n\nrusti=> .block\nrusti+> (Ok(5) as Result<i32, String>)\nrusti+>   .and_then(|n| if n > 5 {Ok(n)} else {Err(\"Too small\".to_owned())})\nrusti+>   .map(|n| 2 * n)\nrusti+> .\nErr(\"Too small\")\n\n\u307e\u305f\u3001\u9006\u306b\u5024\u304c Err \u306e\u3068\u304d\u3060\u3051\u50cd\u304f\u30e1\u30bd\u30c3\u30c9\u3082\u3042\u308a\u307e\u3059\u3002\nrusti=> .block\nrusti+> (Err(\"Not found\".to_owned()) as Result<i32, String>)\nrusti+>   .map_err(|e| \"Error! \".to_owned() + &e)\nrusti+> .\nErr(\"Error! Not found\")\n\n\n\u660e\u793a\u7684\u306a\u5834\u5408\u5206\u3051\u304b\u3089\u3001try! \u30de\u30af\u30ed\u3068\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3078\n\u3067\u306f\u3001\u5192\u982d\u306b\u3042\u3052\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f8b\u306b\u3001Option<T> \u3084 Result<T, E> \u306e\u6271\u3044\u3092\u3001\u5c11\u3057\u305a\u3064\u6539\u5584\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u3057\u3066\u6574\u6570\u5024\u3092\u8868\u3059\u6587\u5b57\u5217\u3092\u53d7\u3051\u53d6\u308a\u3001\u305d\u308c\u3092\uff12\u500d\u3057\u305f\u5024\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n\u5f15\u6570\u3068\u3057\u3066 \"10\" \u3092\u4e0e\u3048\u305f\u6642\uff1a\n% cargo run --bin main1 -- 10\n     Running `target/debug/main1 10`\n20\n\n\nunwrap() \u3092\u4f7f\u3046\n\u307e\u305a\u6700\u521d\u306f\u3001\u30a8\u30e9\u30fc\u306e\u53ef\u80fd\u6027\u306f\u8003\u616e\u305b\u305a\u3001\u6b63\u3057\u3044\u5f15\u6570\u304c\u6e21\u3055\u308c\u305f\u3068\u304d\u306e\u6a5f\u80fd\u3060\u3051\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b double_arg() \u95a2\u6570\u306f\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306e\uff11\u756a\u76ee\u306e\u5024\u3092\u53d6\u5f97\u3057\u3066\u3001\u6574\u6570\u5024\u3068\u3057\u3066\u30d1\u30fc\u30b9\u3057\u3001\uff12\u500d\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\n\nsrc/main1.rs\nuse std::env;\n\nfn double_arg(mut argv: env::Args) -> i32 {\n    let arg1 = argv.nth(1).unwrap(); // \u30a8\u30e9\u30fc1\n    let n = arg1.parse::<i32>().unwrap(); // \u30a8\u30e9\u30fc2\n    2 * n\n}\n\n\n\u305d\u3057\u3066\u547c\u3073\u51fa\u3057\u5143\u3068\u306a\u308b main() \u95a2\u6570\u3067\u306f\u3001double_arg() \u3092\u547c\u3073\u51fa\u3057\u3066\u3001\u7d50\u679c\u3092\u8868\u793a\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\nsrc/main1.rs\nfn main() {\n    let n = double_arg(env::args());\n    println!(\"{}\", n);\n}\n\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u6b63\u3057\u3044\u5f15\u6570\u3092\u4e0e\u3048\u308c\u3070\u554f\u984c\u306a\u304f\u52d5\u304d\u307e\u3059\u3002\n% cargo run --bin main1 -- 42\n     Running `target/debug/main1 42`\n84\n\n\u3057\u304b\u3057\u5f53\u7136\u3001\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3068\u30d1\u30cb\u30c3\u30af\u3092\u8d77\u3053\u3057\u3066\u30af\u30e9\u30c3\u30b7\u30e5\u3057\u307e\u3059\u3002\n\u307e\u305a\u3001\u5f15\u6570\u3092\u6307\u5b9a\u3057\u306a\u3044\u3068\u3001\u5148\u307b\u3069\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u30a8\u30e9\u30fc\uff11\u306e\u884c\u3067\u30d1\u30cb\u30c3\u30af\u3057\u307e\u3059\u3002\n% cargo run --bin main1\n     Running `target/debug/main1`\nthread '<main>' panicked at 'called `Option::unwrap()` on a `None` value', src/libcore/option.rs:367\nProcess didn't exit successfully: `target/debug/main1` (exit code: 101)\n\n\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u610f\u5473\u306f\u3001None \u306b\u5bfe\u3057\u3066\u3001Option::unwrap() \u304c\u547c\u3070\u308c\u307e\u3057\u305f\u3001\u3067\u3059\u3002argv.nth(1) \u306f Option<String> \u578b\u306e\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\uff11\u306e\u6587\u5b57\u5217\u304c\u3042\u308c\u3070 Some \u304c\u8fd4\u3055\u308c\u3001\u306a\u3051\u308c\u3070 None \u3092\u8fd4\u3057\u307e\u3059\u3002\nrusti=> use std::env;\nrusti=> .type env::args().nth(1)\n... = core::option::Option<collections::string::String>\n\n\u307e\u305f\u3001\u5f15\u6570\u304c\u6574\u6570\u3068\u3057\u3066\u30d1\u30fc\u30b9\u3067\u304d\u306a\u3044\u3068\u304d\u3082\u3001\u30a8\u30e9\u30fc\uff12\u306e\u884c\u3067\u30d1\u30cb\u30c3\u30af\u3057\u307e\u3059\u3002\n% cargo run --bin main1 -- hoge\n     Running `target/debug/main1 hoge`\nthread '<main>' panicked at 'called `Result::unwrap()` on an `Err` value: ParseIntError { kind: InvalidDigit }', src/libcore/result.rs:741\nProcess didn't exit successfully: `target/debug/main1 hoge` (exit code: 101)\n\n\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u610f\u5473\u306f\u3001Err \u306b\u5bfe\u3057\u3066\u3001Result::unwrap() \u304c\u547c\u3070\u308c\u307e\u3057\u305f\u3001\u3067\u3059\u3002parse() \u306f\u3001\uff08\u3053\u306e\u5834\u5408\u306f i32 \u578b\u306e\u7d50\u679c\u304c\u671f\u5f85\u3055\u308c\u3066\u3044\u307e\u3059\u306e\u3067\uff09 Result<i32, std::num::ParseIntError> \u578b\u306e\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\u30d1\u30fc\u30b9\u3067\u304d\u308c\u3070 Ok<i32> \u3092\u3001\u3067\u304d\u306a\u3051\u308c\u3070 Err<std::num::ParseIntError> \u3092\u8fd4\u3057\u307e\u3059\u3002\nrusti=> .type \"10\".parse::<i32>()\n... = core::result::Result<i32, core::num::ParseIntError>\n\n\n\u660e\u793a\u7684\u306a\u5834\u5408\u5206\u3051\u3092\u3059\u308b\n\u3067\u306f\u3001\u3053\u306e\uff12\u3064\u306e\u30a8\u30e9\u30fc\u306b\u5bfe\u5fdc\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002double_arg() \u95a2\u6570\u306f unwrap() \u3067\u30d1\u30cb\u30c3\u30af\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001\u30a8\u30e9\u30fc\u304c\u8d77\u3053\u3063\u305f\u3053\u3068\u3092\u3001\u623b\u308a\u5024\u3092\u4f7f\u3063\u3066\u547c\u3073\u51fa\u3057\u5143\uff08main() \u95a2\u6570\uff09\u306b\u4f1d\u3048\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\u30ea\u30bf\u30fc\u30f3\u578b\u304c i32 \u306e\u307e\u307e\u3060\u3068\u30a8\u30e9\u30fc\u3092\u8868\u73fe\u3067\u304d\u306a\u3044\u306e\u3067\u3001Result<i32, String> \u306b\u5909\u66f4\u3057\u307e\u3059\u3002\u30a8\u30e9\u30fc\u306e\u5185\u5bb9\u306f String \u578b\u306e\u6587\u5b57\u5217\u3067\u6e21\u3057\u307e\u3059\u3002\n\u307e\u305a\u306f\u7d20\u6734\u306a\u3084\u308a\u65b9\u3068\u3057\u3066\u3001match \u5f0f\u306b\u3088\u308b\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u3001\u3064\u307e\u308a\u3001\u660e\u793a\u7684\u306a\u5834\u5408\u5206\u3051\u3092\u3057\u307e\u3057\u3087\u3046\u3002\n\nsrc/main2.rs\nuse std::env;\n\nfn double_arg(mut argv: env::Args) -> Result<i32, String> {\n    match argv.nth(1) {\n        None => Err(\"\u6570\u5b57\u3092\uff11\u3064\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\".to_owned()),\n        Some(arg1) => {\n            match arg1.parse::<i32>() {\n                Ok(n) => Ok(2 * n),\n                Err(err) => Err(err.to_string()),\n            }\n        }\n    }\n}\n\n\n\u3053\u306e\u3088\u3046\u306b\u3001\u3082\u3057 argv.nth(1) \u304c None \u3092\u8fd4\u3057\u305f\u3089\u3001\u300c\u6570\u5b57\u3092\uff11\u3064\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u300d\u3068\u3044\u3046 String \u578b\u306e\u6587\u5b57\u5217\u3092 Err() \u3067\u5305\u3093\u3067\u8fd4\u3057\u307e\u3059\u3002\n\u307e\u305f\u3082\u3057 parse::<i32>() \u304c Err<std::num::ParseIntError> \u3092\u8fd4\u3057\u305f\u3089\u3001ParseIntError \u3092 to_string() \u3067 String \u578b\u306e\u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u3066\u304b\u3089\u3001Err<String> \u3067\u5305\u3093\u3067\u8fd4\u3057\u307e\u3059\u3002\n\u30a8\u30e9\u30fc\u304c\u306a\u3051\u308c\u3070\u3001\u6570\u5024\u3092\uff12\u500d\u3057\u305f\u5024\u3092 Ok<i32> \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002\nmain() \u95a2\u6570\u306f double_arg() \u95a2\u6570\u304b\u3089\u306e\u623b\u308a\u5024\u306b\u5bfe\u3057\u3066 match \u5f0f\u3067\u5834\u5408\u5206\u3051\u3092\u3057\u3066\u3001\u5fc5\u8981\u306a\u3089\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n\nsrc/main2.rs\nfn main() {\n    match double_arg(env::args()) {\n        Ok(n) => println!(\"{}\", n),\n        Err(err) => println!(\"\u30a8\u30e9\u30fc\uff1a{}\", err),\n    }\n}\n\n\n\n\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u5f15\u6570\u3092\u5fd8\u308c\u305f\u6642\uff1a\n% cargo run --bin main2\n     Running `target/debug/main2`\n\u30a8\u30e9\u30fc\uff1a\u6570\u5b57\u3092\uff11\u3064\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u5f15\u6570\u304c\u6574\u6570\u3068\u3057\u3066\u30d1\u30fc\u30b9\u3067\u304d\u306a\u3044\u6642\uff1a\n% cargo run --bin main2 -- hoge\n     Running `target/debug/main2 hoge`\n\u30a8\u30e9\u30fc\uff1ainvalid digit found in string\n\n\u3069\u3061\u3089\u306e\u30b1\u30fc\u30b9\u3082\u30d1\u30cb\u30c3\u30af\u3057\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002\u5f8c\u8005\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u82f1\u8a9e\u3067\u3059\u304c\u3001\u671f\u5f85\u901a\u308a\u306b\u52d5\u3044\u3066\u307e\u3059\u3002\n\u3053\u306e\u65b9\u6cd5\u306e\u9577\u6240\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5185\u5bb9\u304c\u898b\u305f\u307e\u307e\u3067\u3001\u306a\u306b\u3082\u62bd\u8c61\u5316\u3055\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u521d\u5fc3\u8005\u306b\u3068\u3063\u3066\u308f\u304b\u308a\u3084\u3059\u3044\u3053\u3068\u3067\u3059\u3002\u77ed\u6240\u306f\u3001\u30a8\u30e9\u30fc\u30b1\u30fc\u30b9\u306e\u5834\u5408\u5206\u3051\u304c\u5897\u3048\u3066\u304f\u308b\u3068\u3001\u6b63\u5e38\u30b1\u30fc\u30b9\u306e\u30ed\u30b8\u30c3\u30af\u304c\u305d\u308c\u306b\u57cb\u3082\u308c\u3066\u3057\u307e\u3044\u3001\u5206\u304b\u308a\u306b\u304f\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u3053\u3068\u3067\u3059\u3002\n\u6700\u521d\u306f\u3053\u306e\u3088\u3046\u306a\u66f8\u304d\u65b9\u3067\u3082\u304b\u307e\u308f\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001Rust \u306b\u6163\u308c\u3066\u304d\u305f\u3089\u3001\u3053\u306e\u5f8c\u7d39\u4ecb\u3059\u308b\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3084 try! \u30de\u30af\u30ed\u3092\u4f7f\u3063\u305f\u65b9\u6cd5\u3078\u79fb\u884c\u3057\u3066\u3044\u304f\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002\n\n\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3092\u4f7f\u3046\n\u660e\u793a\u7684\u306a\u5834\u5408\u5206\u3051\u3092\u3001\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306b\u80a9\u4ee3\u308f\u308a\u3057\u3066\u3082\u3089\u3044\u307e\u3057\u3087\u3046\u3002\u3053\u306e\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u3089\u308c\u307e\u3059\u3002\n\nsrc/main3.rs\nuse std::env;\n\nfn double_arg(mut argv: env::Args) -> Result<i32, String> {\n    argv.nth(1)\n        .ok_or(\"\u6570\u5b57\u3092\uff11\u3064\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\".to_owned())\n        .and_then(|arg1| arg1.parse::<i32>().map_err(|err| err.to_string()))\n        .map(|n| 2 * n)\n}\n\nfn main() {\n  // main2.rs \u3068\u540c\u3058\u3002\u7701\u7565\n}\n\n\nOption<T> \u306e ok_or() \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306f\u3001argv.nth(1) \u304c\u8fd4\u3057\u305f Option<T> \u578b\u306e\u5024\u3092\u3001Result<T, E> \u578b\u306b\u5909\u63db\u3057\u3066\u304f\u308c\u307e\u3059\u3002\u3082\u3057\u5024\u304c Some<T> \u306a\u3089 Ok<T> \u3092\u4f5c\u308a\u307e\u3059\u3002\u3082\u3057\u5024\u304c None \u306a\u3089 Err<E> \u3092\u4f5c\u3063\u3066\u3001\u5f15\u6570\u3068\u3057\u3066\u6e21\u3057\u305f\u5024\uff08\u3053\u306e\u5834\u5408\u306f String \u578b\u306e \"\u6570\u5b57\u3092\uff11\u3064\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\"\uff09\u3092\u5305\u307f\u307e\u3059\u3002\nrusti=> Some(\"10\").ok_or(\"error!\".to_owned())\nOk(\"10\")\nrusti=> (None as Option<i32>).ok_or(\"error!\".to_owned())\nErr(\"error!\")\n\nResult<T, E> \u306e and_then()\u3001map_err()\u3001map() \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306f\u5148\u307b\u3069\u7d39\u4ecb\u3057\u305f\u901a\u308a\u3067\u3059\u3002\n\u6d41\u308c\u3092\u8ffd\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306b \"10\" \u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\uff1a\n\n\nargv.nth(1) \u304c Some(\"10\") \u3092\u8fd4\u3059\u3002\n\nok_or() \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u304c\u3001Ok(\"10\") \u306b\u5909\u63db\u3059\u308b\u3002\n\nand_then() \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u304c\u3001Ok<String> \u306e\u4e2d\u306e\u5024 \"10\" \u3092\u53d6\u308a\u51fa\u3057\u3001\u30af\u30ed\u30fc\u30b8\u30e3\u306b\u6e21\u3059\u3002\n\u30af\u30ed\u30fc\u30b8\u30e3\u306f \"10\" \u306b arg1.parse::<i32>() \u3092\u9069\u7528\u3057\u3066\u3001Ok(10) \u304c\u5f97\u3089\u308c\u308b\u3002\n\u540c\u30af\u30ed\u30fc\u30b8\u30e3\u306e map_err() \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306f\u4f55\u3082\u305b\u305a\u3001Ok(10) \u3092\u8fd4\u3059\u3002\n\nmap() \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306f Ok(10) \u306e\u4e2d\u306e\u5024 10 \u3092\u53d6\u308a\u51fa\u3057\u3066\u3001\u30af\u30ed\u30fc\u30b8\u30e3\u306b\u6e21\u3059\u3002\n\u30af\u30ed\u30fc\u30b8\u30e3\u306f\u305d\u308c\u3092\uff12\u500d\u3057\u3066 20 \u3092\u8fd4\u3059\u3002\n\nmap() \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306f\u3001\u305d\u308c\u3092\u5305\u307f\u76f4\u3057\u3066 Ok(20) \u3092\u8fd4\u3059\u3002\u3053\u306e\u5024\u304c double_arg() \u306e\u623b\u308a\u5024\u306b\u306a\u308b\u3002\n\n\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u304c\u4e0e\u3048\u3089\u308c\u306a\u304b\u3063\u305f\u3068\u304d\uff1a\n\n\nargv.nth(1) \u306f None \u3092\u8fd4\u3059\u3002\n\nok_or() \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306f Err<String> \u578b\u306e\u5024 Err(\"\u6570\u5b57\u3092\uff11\u3064...\") \u3092\u8fd4\u3059\u3002\n\u5f8c\u7d9a\u306e and_then() \u3068 map() \u306f\u4f55\u3082\u305b\u305a\u3001Err<String> \u5024\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\u3002\uff08double_arg() \u306e\u623b\u308a\u5024\uff09\n\n\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306b\u3001\u6570\u5024\u3068\u3057\u3066\u7121\u52b9\u306a\u5024 \"hoge\" \u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\uff1a\n\n\nand_then() \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306e\u30af\u30ed\u30fc\u30b8\u30e3\u3067 \"hoge\".parse::<i32>() \u304c\u5b9f\u884c\u3055\u308c Err<std::num::ParseIntError> \u578b\u306e\u5024\u304c\u8fd4\u308b\u3002\n\nmap_err() \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u304c\u30a8\u30e9\u30fc\u306e\u5024\u306b to_string() \u3092\u9069\u7528\u3057\u3066\u3001Err<String> \u578b\u306e\u5024\u304c\u4f5c\u3089\u308c\u308b\u3002\n\nmap() \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306f\u4f55\u3082\u305b\u305a\u3001Err<String> \u5024\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\u3002\uff08double_arg() \u306e\u623b\u308a\u5024\uff09\n\n\u3069\u3046\u3067\u3057\u3087\u3046\uff1f\u3000\u305f\u3057\u304b\u306b\u884c\u6570\u306f\u5c11\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3057\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u6587\u9762\u306f\u82f1\u8a9e\u306e\u6587\u7ae0\u3063\u307d\u304f\u306a\u308a\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u3001\u30af\u30ed\u30fc\u30b8\u30e3\u304c\u983b\u51fa\u3059\u308b\u306e\u3067\u500b\u4eba\u7684\u306b\u306f\u3001\u5c11\u3057\u8aad\u307f\u306b\u304f\u304f\u306a\u3063\u305f\u3088\u3046\u306b\u601d\u3048\u307e\u3059\u3002\u6163\u308c\u306e\u554f\u984c\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3002\n\u6b21\u306e try! \u30de\u30af\u30ed\u3068\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u65b9\u6cd5\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\ntry! \u30de\u30af\u30ed\u3068\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\nRust \u3089\u3057\u3044\u3084\u308a\u65b9\u306f\u3001try! \u30de\u30af\u30ed\u3068\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3092\u9069\u5ea6\u306b\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3059\u3002try!() \u30de\u30af\u30ed\u306f\u3001\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3068\u540c\u69d8\u306b\u5834\u5408\u5206\u3051\u3092\u80a9\u4ee3\u308f\u308a\u3057\u3066\u304f\u308c\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u305d\u308c\u3060\u3051\u3067\u306a\u304f\u300c\u65e9\u671f\u30ea\u30bf\u30fc\u30f3(early return)\u300d\u3068\u3044\u3046\u3001\u5236\u5fa1\u30d5\u30ed\u30fc\u306e\u62bd\u8c61\u5316\u3082\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\nsrc/main4.rs\n\nuse std::env;\n\nfn double_arg(mut argv: env::Args) -> Result<i32, String> {\n    let arg1 = try!(argv.nth(1).ok_or(\"\u6570\u5b57\u3092\uff11\u3064\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\".to_owned()));\n    let n = try!(arg1.parse::<i32>().map_err(|err| err.to_string()));\n    Ok(2 * n)\n}\n\nfn main() {\n  // main2.rs \u3068\u540c\u3058\u3002\u7701\u7565\n}\n\n\ntry!() \u30de\u30af\u30ed\u306f\u3001Result<T, E> \u578b\u306e\u5024\u3092\u8fd4\u3059\u5f0f\u3092\u53d6\u308a\u307e\u3059\u3002\u5f0f\u3092\u8a55\u4fa1\u3057\u3066 Ok<T> \u306e\u5024\u304c\u5f97\u3089\u308c\u305f\u6642\u306f\u3001unwrap() \u306e\u3088\u3046\u306b\u3001\u4e2d\u306e\u5024\u3092\u53d6\u308a\u51fa\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\u4e00\u65b9\u3001Err<E> \u306e\u5024\u304c\u5f97\u3089\u308c\u305f\u6642\u306f\u3001return \u6587\u3092\u4f7f\u3063\u3066 double_arg() \u95a2\u6570\u304b\u3089\u629c\u3051\u51fa\u3057\u3066\u3001\u547c\u3073\u51fa\u3057\u5143\uff08main()\uff09\u306b\u305d\u306e\u30a8\u30e9\u30fc\u306e\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u6d41\u308c\u3092\u8ffd\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u3057\u3066 \"10\" \u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\uff1a\n\n\nargv.nth(1) \u304c Some(\"10\") \u3092\u8fd4\u3059\u3002\n\nok_or() \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u304c\u3001Ok(\"10\") \u306b\u5909\u63db\u3059\u308b\u3002\n\ntry!() \u30de\u30af\u30ed\u304c\u4e2d\u306e\u5024 \"10\" \u3092\u53d6\u308a\u51fa\u3059\u3002\n\u5909\u6570 arg1 \u304c \"10\" \u306b\u675f\u7e1b\u3055\u308c\u308b\u3002\n\n\"10\" \u306b parse::<i32>() \u3092\u9069\u7528\u3059\u308b\u3068 Ok(10) \u304c\u5f97\u3089\u308c\u308b\u3002\n\nmap_err() \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306f\u3001Ok(10) \u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\u3002\n\ntry!() \u30de\u30af\u30ed\u306f Ok(10) \u306e\u4e2d\u306e\u5024 10 \u3092\u53d6\u308a\u51fa\u3059\u3002\n\u5909\u6570 n \u304c10 \u306b\u675f\u7e1b\u3055\u308c\u308b\u3002\n\n2 * n \u306e\u7d50\u679c\u3092 Ok<i32> \u306b\u683c\u7d0d\u3059\u308b\u3002\uff08double_arg() \u306e\u623b\u308a\u5024\uff09\n\n\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u304c\u4e0e\u3048\u3089\u308c\u306a\u304b\u3063\u305f\u3068\u304d\uff1a\n\n\nargv.nth(1) \u304c None \u3092\u8fd4\u3059\u3002\n\nok_or() \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306f Err<String> \u578b\u306e\u5024 Err(\"\u6570\u5b57\u3092\uff11\u3064...\") \u3092\u8fd4\u3059\u3002\n\ntry!() \u30de\u30af\u30ed\u306f return Err(\"\u6570\u5b57\u3092\uff11\u3064...\"); \u3092\u5b9f\u884c\u3057\u3001main() \u95a2\u6570\u3078\u65e9\u671f\u30ea\u30bf\u30fc\u30f3\u3059\u308b\u3002\n\n\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306b\u3001\u6570\u5024\u3068\u3057\u3066\u7121\u52b9\u306a\u5024 \"hoge\" \u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\uff1a\n\n\u5909\u6570 arg1 \u304c \"10\" \u306b\u675f\u7e1b\u3055\u308c\u308b\u3068\u3053\u308d\u307e\u3067\u306f\u3001\u6b63\u5e38\u7cfb\u3068\u540c\u3058\u3002\n\n\"hoge\".parse::<i32>() \u304c Err<std::num::ParseIntError> \u578b\u306e\u5024\u3092\u8fd4\u3059\u3002\n\nmap_err() \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u304c\u30a8\u30e9\u30fc\u306e\u5024\u306b to_string() \u3092\u9069\u7528\u3057\u3066\u3001Err<String> \u578b\u306e\u5024\u304c\u4f5c\u3089\u308c\u308b\u3002\n\ntry!() \u30de\u30af\u30ed\u304c return ... \u3092\u5b9f\u884c\u3057\u3001main() \u95a2\u6570\u3078\u65e9\u671f\u30ea\u30bf\u30fc\u30f3\u3059\u308b\u3002\n\n\u65e9\u671f\u30ea\u30bf\u30fc\u30f3\u3068\u3044\u3046\u624b\u6cd5\u304c\u52a0\u308f\u3063\u305f\u3053\u3068\u3067\u3001\u30b3\u30fc\u30c9\u304c\u3059\u3063\u304d\u308a\u3057\u305f\u3068\u601d\u3044\u307e\u305b\u3093\u304b\uff1f\u3000\u30a8\u30e9\u30fc\u51e6\u7406\u3092\u3057\u3066\u306a\u304b\u3063\u305f\u9803\u306e\u30b3\u30fc\u30c9\u3068\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u30a8\u30e9\u30fc\u51e6\u7406\u306a\u3057\n\nsrc/main1.rs\nfn double_arg(mut argv: env::Args) -> i32 {\n    let arg1 = argv.nth(1).unwrap(); // \u30a8\u30e9\u30fc1\n    let n = arg1.parse::<i32>().unwrap(); // \u30a8\u30e9\u30fc2\n    2 * n\n}\n\n\n\u30a8\u30e9\u30fc\u51e6\u7406\u3042\u308a\n\nsrc/main4.rs\nfn double_arg(mut argv: env::Args) -> Result<i32, String> {\n    let arg1 = try!(argv.nth(1).ok_or(\"\u6570\u5b57\u3092\uff11\u3064\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\".to_owned()));\n    let n = try!(arg1.parse::<i32>().map_err(|err| err.to_string()));\n    Ok(2 * n)\n}\n\n\n\u30a8\u30e9\u30fc\u51e6\u7406\u3092\u52a0\u3048\u305f\u5f8c\u3067\u3082\u3001\u30b3\u30fc\u30c9\u306e\u660e\u5feb\u3055\u306f\u5931\u308f\u308c\u3066\u307e\u305b\u3093\u3002\u6b63\u5e38\u30b1\u30fc\u30b9\u306e\u30ed\u30b8\u30c3\u30af\u304c\u306f\u3063\u304d\u308a\u3068\u308f\u304b\u308a\u307e\u3059\u3057\u3001\u305d\u306e\u4e00\u65b9\u3067\u3001\u3069\u3053\u3067\u30a8\u30e9\u30fc\u304c\u8d77\u3053\u308a\u3046\u308b\u304b\u3001\u307e\u305f\u3001\u30a8\u30e9\u30fc\u304c\u8d77\u3053\u3063\u305f\u3089\u3069\u3046\u3059\u308b\u306e\u304b\u3082\u308f\u304b\u308a\u307e\u3059\u3002\n\n\u30a8\u30e9\u30fc\u60c5\u5831\u3092\u6539\u5584\u3059\u308b\n\u3044\u307e\u307e\u3067 double_arg() \u3067\u306f\u30a8\u30e9\u30fc\u304c\u8d77\u3053\u3063\u305f\u6642\u306b Err<String> \u578b\u306e\u5024\u3092\u8fd4\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u3053\u308c\u306f\u624b\u8efd\u306a\u65b9\u6cd5\u3067\u3059\u3057\u3001\u4eca\u56de\u306e\u3088\u3046\u306a\u77ed\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u5341\u5206\u3001\u5b9f\u7528\u306b\u8010\u3048\u3089\u308c\u307e\u3059\u3002\u3067\u3082\u6b8b\u5ff5\u306a\u306e\u306f\u3001parse::<i32>() \u304c\u305b\u3063\u304b\u304f Err<std::num::ParseIntError> \u578b\u306e\u5024\u3092\u8fd4\u3057\u3066\u3044\u308b\u306e\u306b\u3001\u305d\u308c\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u3066\u304b\u3089\u8fd4\u3057\u3066\u3044\u308b\u3053\u3068\u3067\u3059\u3002\n\u3044\u3063\u305f\u3093\u30a8\u30e9\u30fc\u304c\u6587\u5b57\u5217\u306b\u5909\u63db\u3055\u308c\u3066\u3057\u307e\u3046\u3068\u3001\u547c\u3073\u51fa\u3057\u5143\u3067\u306f\u5834\u5408\u5206\u3051\u304c\u3057\u306b\u304f\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u4f8b\u3048\u3070\u547c\u3073\u51fa\u3057\u5143\u306e main() \u95a2\u6570\u3067\u3001\u5f15\u6570\u304c\u6307\u5b9a\u3055\u308c\u306a\u304b\u3063\u305f\u6642\u3068\u3001\u6570\u5024\u3068\u3057\u3066\u7121\u52b9\u306a\u5024\u304c\u4e0e\u3048\u3089\u308c\u305f\u6642\u3067\u3001\u5225\u306e\u52d5\u4f5c\u3092\u3055\u305b\u305f\u304f\u306a\u3063\u305f\u3089\u3069\u3046\u3057\u307e\u3059\u304b\uff1f\u307e\u305f\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u65e5\u672c\u8a9e\u306b\u30ed\u30fc\u30ab\u30e9\u30a4\u30ba\u3057\u305f\u3044\u6642\u3082\u3084\u308a\u306b\u304f\u3044\u3067\u3057\u3087\u3046\u3002\n\u3082\u3057 double_arg() \u304c Err<std::num::ParseIntError> \u306e\u3088\u3046\u306b\u30a8\u30e9\u30fc\u306e\u5024\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\u306a\u3089\u3001\u3053\u306e\u554f\u984c\u306f\u89e3\u6c7a\u3057\u307e\u3059\u3002\n\nBox<Error> \u578b\u3092\u8fd4\u3059\n\u30a8\u30e9\u30fc\u306e\u5024\u3092\u76f4\u63a5\u8fd4\u3057\u305f\u3044\u3068\u601d\u3063\u305f\u6642\u306b\u554f\u984c\u306b\u306a\u308b\u306e\u306f\u3001double_arg() \u3067\u306f\uff12\u7a2e\u985e\u306e\u30a8\u30e9\u30fc\u304c\u8d77\u3053\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3053\u3068\u3067\u3059\u3002\u4e00\u65b9\u306f Err<std::num::ParseIntError> \u3067\u3059\u304c\u3001\u3082\u3046\u4e00\u65b9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u304c\u306a\u304b\u3063\u305f\u6642\u306b None \u306b\u306a\u308b\u306e\u3067\u3001\u3044\u307e\u306f Err<String> \u578b\u306e\u5024\u3092\u4f5c\u3063\u3066\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u307e\u307e\u3067\u306f\u3001\u4e21\u8005\u3092\u4e00\u3064\u306b\u307e\u3068\u3081\u3089\u308c\u306a\u3044\u306a\u3044\u306e\u3067\u3001\u30ea\u30bf\u30fc\u30f3\u578b\u306e Result<i32, \u4f55\u304b\u306e\u30a8\u30e9\u30fc\u578b> \u306e \u4f55\u304b\u306e\u30a8\u30e9\u30fc\u578b \u306e\u90e8\u5206\u3092\u6c7a\u3081\u3089\u308c\u307e\u305b\u3093\u3002\nParseIntError \u306f\u3001std::error::Error \u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u3053\u3067\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u304c\u306a\u304b\u3063\u305f\u6642\u306e\u30a8\u30e9\u30fc\u578b\u3092\u65b0\u305f\u306b\u5b9a\u7fa9\u3057\u3066\u3001\u540c\u3058\u3088\u3046\u306b Error \u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3057\u307e\u3057\u3087\u3046\u3002\u3053\u3046\u3059\u308c\u3070\u3001\u4e21\u8005\u3092\u4e00\u3064\u306b\u307e\u3068\u3081\u3089\u308c\u307e\u3059\u3002\nNotEnoughArgsError \u3068\u3044\u3046\u69cb\u9020\u4f53\u3092\u4f5c\u308a\u307e\u3059\u3002\n\nsrc/main5.rs\nuse std::error;\nuse std::fmt;\n\n#[derive(Debug)]\nstruct NotEnoughArgError {}\n\n\n\u3053\u306e\u3088\u3046\u306b Debug \u30c8\u30ec\u30a4\u30c8\u306e\u5b9f\u88c5\u3092\u81ea\u52d5\u5c0e\u51fa\uff08derive\uff09\u3057\u3066\u3044\u307e\u3059\u3002Error \u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3059\u308b\u6642\u306f Debug \u30c8\u30ec\u30a4\u30c8\u306e\u5b9f\u88c5\u304c\u5fc5\u9808\u306a\u306e\u3067\u3001\u81ea\u52d5\u5c0e\u51fa\u3059\u308b\u306e\u304c\u3044\u3044\u3067\u3057\u3087\u3046\u3002\n\u3055\u3089\u306b\u3001std::fmt::Display \u30c8\u30ec\u30a4\u30c8\u304c\u8981\u6c42\u3059\u308b fmt() \u95a2\u6570\u306e\u5b9f\u88c5\u3082\u5fc5\u8981\u3067\u3059\u3002\n\nsrc/main5.rs\nimpl fmt::Display for NotEnoughArgError {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, \"\u5f15\u6570\u304c\u4e0d\u8db3\u3057\u3066\u3044\u307e\u3059\")\n    }\n}\n\n\n\u6700\u5f8c\u306b std::error::Error \u30c8\u30ec\u30a4\u30c8\u304c\u8981\u6c42\u3059\u308b description() \u95a2\u6570\u3068 cause \u95a2\u6570\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\nsrc/main4.rs\nimpl error::Error for NotEnoughArgError {\n    fn description(&self) -> &str {\n        \"\u5f15\u6570\u304c\u4e0d\u8db3\u3057\u3066\u3044\u307e\u3059\"\n    }\n\n    fn cause(&self) -> Option<&error::Error> {\n        None\n    }\n}\n\n\n\u3053\u308c\u3067 NotEnoughArgsError \u306e\u5b9f\u88c5\u306f OK \u3067\u3059\u3002\n\u3055\u3066\u3001double_arg() \u306e\u30ea\u30bf\u30fc\u30f3\u578b\u3092\u5909\u66f4\u3057\u3066 Result<i32, error::Error> \u306b\u3057\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u304c\u3001\u3053\u308c\u306f Rust \u3067\u306f\u3067\u304d\u307e\u305b\u3093\u3002Rust \u3067\u306f\u95a2\u6570\u306e\u623b\u308a\u5024\u306b\u3001\u30c8\u30ec\u30a4\u30c8\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u306e\u3067\u3059\u3002\n\u306a\u305c\u306a\u3089\u3001Rust\u306f\u95a2\u6570\u306e\u5f15\u6570\u3068\u623b\u308a\u5024\u3092\u30b3\u30fc\u30eb\u30b9\u30bf\u30c3\u30af\u306b\u76f4\u63a5\u7a4d\u307f\u307e\u3059\u304c\u3001\u305d\u306e\u305f\u3081\u306b\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u3001\u3053\u308c\u3089\u306e\u5024\u304c\u5fc5\u8981\u3068\u3059\u308b\u30e1\u30e2\u30ea\u306e\u30b5\u30a4\u30ba\u304c\u6c7a\u307e\u3063\u3066\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u306e\u3067\u3059\u3002\u578b\u3092 Error \u306b\u3057\u3066\u3057\u307e\u3046\u3068\u3001Error \u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u578b\u306a\u3089\u3069\u3093\u306a\u3082\u306e\u3067\u3082\u30b9\u30bf\u30c3\u30af\u306b\u7f6e\u3051\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u500b\u3005\u306e\u5177\u8c61\u578b\uff08\u5c06\u6765\u5b9f\u88c5\u3055\u308c\u308b\u3082\u306e\u3082\u542b\u3080\uff09\u306b\u3088\u3063\u3066\u3001\u5fc5\u8981\u3068\u3059\u308b\u30e1\u30e2\u30ea\u306e\u30b5\u30a4\u30ba\u304c\u7570\u306a\u308b\u306e\u3067\u3001\u305d\u308c\u3089\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5217\u6319\u3057\u3066\u3001\u30b5\u30a4\u30ba\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u306f\u4e0d\u53ef\u80fd\u3067\u3059\u3002\n\u3053\u308c\u3092\u89e3\u6c7a\u3059\u308b\u65b9\u6cd5\u306e\u3072\u3068\u3064\u306f\u30c8\u30ec\u30a4\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f7f\u3046\u3053\u3068\u3067\u3059\u3002\u3053\u308c\u306f\u3001\u5143\u306e\u30a8\u30e9\u30fc\u5024\u3092 Box \u3067\u5305\u3080\u3053\u3068\u3067\u4f5c\u308c\u307e\u3059\u3002\u5177\u4f53\u7684\u306b\u306f Box::new(\u30a8\u30e9\u30fc\u5024) \u3068\u3057\u307e\u3059\u3002\nrusti=> .type Box::new(\"hoge\".parse::<i32>().unwrap_err())\n... = Box<core::num::ParseIntError>\nrusti=> .type Box::new(\"hoge\".parse::<i32>().unwrap_err()) as Box<std::error::Error>\n... = Box<std::error::Error>\n\n\u5024\u3092 box \u5316\u3059\u308b\u3068\u3001\u305d\u306e\u5b9f\u4f53\u306f\u30b9\u30bf\u30c3\u30af\u3067\u306f\u306a\u304f\u3066\u3001\u30d2\u30fc\u30d7\u306b\u683c\u7d0d\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u305d\u3057\u3066\u30b9\u30bf\u30c3\u30af\u306b\u306f\u3001\u305d\u306e\u5b9f\u4f53\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u304c\u7a4d\u307e\u308c\u307e\u3059\u3002\u30dd\u30a4\u30f3\u30bf\u306a\u3089\u3001\u5fc5\u8981\u306a\u30e1\u30e2\u30ea\u30b5\u30a4\u30ba\u304c\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u6c7a\u307e\u308a\u307e\u3059\u306e\u3067\u5927\u4e08\u592b\u306a\u308f\u3051\u3067\u3059\u3002\ndouble_arg() \u306e\u30ea\u30bf\u30fc\u30f3\u578b\u3092 Result<i32, Box<error::Error>> \u306b\u5909\u66f4\u3057\u307e\u3059\u3002\n\nsrc/main5.rs\uff08\u7d9a\u304d\uff09\n\nuse std::env;\nuse std::error;\n\nfn double_arg(mut argv: env::Args) -> Result<i32, Box<error::Error>> {\n    let number_str = try!(argv.nth(1).ok_or(NotEnoughArgsError));\n    let n = try!(number_str.parse::<i32>());\n    Ok(2 * n)\n}\n\nfn main() {\n  // main2.rs \u3068\u540c\u3058\u3002\u7701\u7565\n}\n\n\n\u3053\u308c\u3067 OK \u3067\u3059\u3002\n\u3042\u308c\uff1f\u3067\u3082\u3001Err<NotEnoughArgError> \u3084 Err<num::ParseIntError> \u578b\u306e\u5024\u3092 try!() \u306b\u6e21\u3057\u3066\u3044\u308b\u306e\u306b\u3001\u30ea\u30bf\u30fc\u30f3\u578b\u3068\u3057\u3066 Result<i32, Box<error::Error>> \u3068\u66f8\u3051\u308b\u306e\u306f\u4e0d\u601d\u8b70\u306b\u601d\u3044\u307e\u305b\u3093\u304b\uff1f\u3055\u3063\u304d\u3001box \u5316\u3059\u308b\u306b\u306f Box::new(\u30a8\u30e9\u30fc\u5024) \u3068\u3059\u308b\u3068\u8a00\u3063\u305f\u3070\u304b\u308a\u3067\u3059\u3002\u306a\u305c\u3001\u305d\u308c\u304c\u306a\u304f\u3066\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u308b\u306e\u3067\u3057\u3087\u3046\u3002\n\u7a2e\u3092\u660e\u304b\u3059\u3068 try!() \u30de\u30af\u30ed\u304c\u30a8\u30e9\u30fc\u306e\u578b\u3092\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002try!() \u30de\u30af\u30ed\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nmacro_rules! try {\n    ($e:expr) => (match $e {\n        Ok(val) => val,\n        Err(err) => return Err(::std::convert::From::from(err)),\n    });\n}\n\n\u5358\u306b Err<\u306a\u306b\u304b\u306e\u578b> \u306e\u5024\u3092\u8fd4\u3059\u306e\u3067\u306f\u306a\u304f\u3001\u305d\u3053\u306b\u683c\u7d0d\u3055\u308c\u305f\u30a8\u30e9\u30fc\u306e\u5024\u306b std::convert::From \u30c8\u30ec\u30a4\u30c8\u306e from() \u3092\u9069\u7528\u3057\u3066\u304b\u3089\u3001Err<E> \u3067\u5305\u307f\u76f4\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e from() \u95a2\u6570\u306f\u3001\u3042\u308b\u578b\u306e\u5024\u3092\u3001\u5225\u306e\u578b\u306e\u5024\u3078\u5909\u63db\u3057\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a From \u5b9f\u88c5\u304c\u3042\u308a\u307e\u3059\u3002\nimpl<'a, E: Error + 'a> From<E> for Box<Error + 'a>\n\n\u3053\u306e\u5b9f\u88c5\u306b\u3088\u308a\u3001Error \u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3057\u305f\u5168\u3066\u306e\u578b\u306e\u5024\u306f\u3001\u30c8\u30ec\u30a4\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 Box<Error> \u3078\u5909\u63db\u3067\u304d\u308b\u306e\u3067\u3059\u3002\n\u3064\u307e\u308a try!() \u30de\u30af\u30ed\u306f\u3001\u4ee5\u4e0b\u306e\uff13\u3064\u3092\u62bd\u8c61\u5316\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5834\u5408\u5206\u3051\n\u5236\u5fa1\u30d5\u30ed\u30fc\n\u30a8\u30e9\u30fc\u5024\u306e\u578b\u5909\u63db\n\ndouble_arg() \u95a2\u6570\u306e\u30b3\u30fc\u30c9\u3092\u3001\u3082\u3046\u4e00\u5ea6\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u30a8\u30e9\u30fc\u51e6\u7406\u306a\u3057\uff08\u30a8\u30e9\u30fc\u6642\u306b\u30af\u30e9\u30c3\u30b7\u30e5\u3059\u308b\uff09\n\nsrc/main1.rs\nfn double_arg(mut argv: env::Args) -> i32 {\n    let arg1 = argv.nth(1).unwrap(); // \u30a8\u30e9\u30fc1\n    let n = arg1.parse::<i32>().unwrap(); // \u30a8\u30e9\u30fc2\n    2 * n\n}\n\n\n\u30a8\u30e9\u30fc\u51e6\u7406\u3042\u308a\n\nsrc/main5.rs\nfn double_arg(mut argv: env::Args) -> Result<i32, Box<error::Error>> {\n    let arg1 = try!(argv.nth(1).ok_or(NotEnoughArgsError));\n    let n = try!(arg1.parse::<i32>());\n    Ok(2 * n)\n}\n\n\ntry!() \u304c\u30a8\u30e9\u30fc\u3092\u5909\u63db\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u3001\u4ee5\u524d\u306e\u4f8b\u306b\u3042\u3063\u305f map() \u304c\u4e0d\u8981\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u30d5\u30eb\u6a5f\u80fd\u306e\u30a8\u30e9\u30fc\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u306e\u305f\u3081\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\uff08\u4ed8\u968f\u3059\u308b\u30b3\u30fc\u30c9\uff09\u306f\u3001\u307b\u3068\u3093\u3069\u3042\u308a\u307e\u305b\u3093\uff01\n\nBox<Error> \u306e\u4e9b\u7d30\u306a\u554f\u984c\n\u524d\u306e\u7bc0\u3067\u306f\u30c8\u30ec\u30a4\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 Box<Error> \u3092\u4f7f\u3044\u307e\u3057\u305f\u304c\u3001\u3053\u3053\u306b\u306f\u4e9b\u7d30\u306a\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002Box \u3067\u5305\u307e\u308c\u305f\u5024\u306f Error \u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u3053\u3068\u307e\u3067\u306f\u5206\u304b\u308b\u306e\u3067\u3059\u304c\u3001\u305d\u306e\u5177\u8c61\u578b\uff08NotEnoughArgError \u307e\u305f\u306f ParseIntError\uff09\u304c\u306a\u3093\u3067\u3042\u3063\u305f\u306e\u304b\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u306f\u308f\u304b\u3089\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u306e\u52d5\u4f5c\u3092\u3001\u578b\u6d88\u53bb(type erasure) \u3068\u547c\u3073\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u3001\u547c\u3073\u51fa\u3057\u5143\u306e main() \u95a2\u6570\u306e\u5074\u3067\u3001\u30a8\u30e9\u30fc\u306e\u7a2e\u985e\u306b\u5fdc\u3058\u3066\u51e6\u7406\u3092\u5206\u5c90\u3055\u305b\u305f\u304f\u3066\u3082\u3001\u5358\u7d14\u306a\u5834\u5408\u5206\u3051\u3067\u306f\u5224\u65ad\u3067\u304d\u306a\u304f\u306a\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308b\nfn main() {\n    match double_arg(env::args()) {\n        Ok(n) => println!(\"{}\", n),\n        Err(Box(num::ParseIntError(..))) => {\n            println!(\"\u4e0d\u6b63\u306a\u6570\u5b57\u3067\u3059 \\\"{}\\\"\", env::args().nth(1).unwrap())\n        },\n        Err(err) => println!(\"\u30a8\u30e9\u30fc\uff1a{}\", err),\n    }\n}\n\n\n\u65b9\u6cd5\u306f\u306a\u304f\u306f\u3042\u308a\u305b\u3093\u3002\u5b9f\u884c\u6642\u306e\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u3063\u3066\u3001\u5177\u8c61\u578b\u3078\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3059\u308b\u3053\u3068\u306f\u53ef\u80fd\u3067\u3059\u3002\n\nsrc/main6.rs\nfn main() {\n    match double_arg(env::args()) {\n        Ok(n) => println!(\"{}\", n),\n        Err(err) => {\n            match err.downcast_ref::<num::ParseIntError>() {\n                None => println!(\"\u30a8\u30e9\u30fc\uff1a{}\", err),\n                Some(..) => println!(\"\u4e0d\u6b63\u306a\u6570\u5b57\u3067\u3059 \\\"{}\\\"\", env::args().nth(1).unwrap()),\n            }\n        }\n    }\n}\n\n\n\u8d77\u3053\u308a\u3046\u308b\u30a8\u30e9\u30fc\u306e\u578b\u4e00\u3064\u4e00\u3064\u306b\u3064\u3044\u3066\u3001\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3067\u304d\u305f\u304b\u306e\u5834\u5408\u5206\u3051\u3092\u3057\u3066\u3044\u304f\u306e\u306f\u3001\u5c11\u3057\u5197\u9577\u3067\u3059\u3002\n\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3057\u306a\u304b\u3063\u305f\u3068\u3057\u3066\u3082\u3001String \u3092\u8fd4\u3059\u3088\u308a\u306f\u826f\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u306a\u305c\u306a\u3089\u3001Error \u30c8\u30ec\u30a4\u30c8\u306b\u7528\u610f\u3055\u308c\u305f\u3001description() \u30e1\u30bd\u30c3\u30c9\u3084 cause() \u30e1\u30bd\u30c3\u30c9\u3067\u3001\u30a8\u30e9\u30fc\u306b\u3064\u3044\u3066\u306e\u3001\u3088\u308a\u8a73\u7d30\u306a\u60c5\u5831\u3092\u53d6\u5f97\u3067\u304d\u308b\u304b\u3089\u3067\u3059\u3002\n\n\u5217\u6319\u578b\u3067\u72ec\u81ea\u306e\u30a8\u30e9\u30fc\u578b\u3092\u5b9a\u7fa9\u3059\u308b\n\u3053\u306e\u8a18\u4e8b\u306e\u7de0\u3081\u304f\u304f\u308a\u3068\u3057\u3066\u3001\u30c8\u30ec\u30a4\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f7f\u3063\u305f\u6642\u306e\u4e9b\u7d30\u306a\u554f\u984c\u3092\u89e3\u6c7a\u3057\u307e\u3057\u3087\u3046\u3002\uff12\u7a2e\u985e\u306e\u30a8\u30e9\u30fc\u306e\u5024\u3092\u5305\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u5217\u6319\u578b\u3092\u5b9a\u7fa9\u3057\u3066\u3001Error \u30c8\u30ec\u30a4\u30c8\u3068 From \u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3059\u308b\u306e\u3067\u3059\u3002\u5217\u6319\u578b\u306a\u3089\u3001\u30c8\u30ec\u30a4\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u9055\u3044\u3001\u578b\u6d88\u53bb\u304c\u8d77\u3053\u308a\u307e\u305b\u3093\u3002\n\u5217\u6319\u578b\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u3087\u3046\u3002\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\uff08CLI\uff09\u3067\u8d77\u3053\u308b\u30a8\u30e9\u30fc\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u540d\u524d\u306f CliError \u3068\u3057\u3066\u3044\u307e\u3059\u3002\u30d0\u30ea\u30a2\u30f3\u30c8\u3068\u3057\u3066\u3001NotEnoughArgs \u3068 Parse(num::ParseIntError) \u3092\u7528\u610f\u3057\u307e\u3059\u3002\n\nsrc/main7.rs\nuse std::error;\nuse std::fmt;\nuse std::num;\n\n#[derive(Debug)]\nenum CliError {\n    NotEnoughArgs,\n    Parse(num::ParseIntError),\n}\n\n\nDisplay \u30c8\u30ec\u30a4\u30c8\u3068\u3001Error \u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306b\u5024\u306b\u5fdc\u3058\u3066\u3001\u5358\u7d14\u306b\u51e6\u7406\u3092\u5207\u308a\u66ff\u3048\u308c\u3070 OK \u3067\u3059\u3002\n\nsrc/main7.rs\nimpl fmt::Display for CliError {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        match *self {\n            CliError::NotEnoughArgs => write!(f, \"\u5f15\u6570\u304c\u4e0d\u8db3\u3057\u3066\u3044\u307e\u3059\"),\n            CliError::Parse(ref err) => write!(f, \"Parse error: {}\", err),\n        }\n    }\n}\n\nimpl error::Error for CliError {\n    fn description(&self) -> &str {\n        match *self {\n            CliError::NotEnoughArgs => \"\u5f15\u6570\u304c\u4e0d\u8db3\u3057\u3066\u3044\u307e\u3059\",\n            CliError::Parse(ref err) => err.description(),\n        }\n    }\n\n    fn cause(&self) -> Option<&error::Error> {\n        match *self {\n            CliError::NotEnoughArgs => None,\n            CliError::Parse(ref err) => Some(err),\n        }\n    }\n}\n\n\n\u5f15\u6570\u304c\u306a\u304b\u3063\u305f\u6642\u306e\u30a8\u30e9\u30fc\u306f CliError \u3060\u3051\u3067\u5341\u5206\u8868\u73fe\u3067\u304d\u308b\u306e\u3067\u3001\u524d\u306e\u7bc0\u3067\u4f5c\u3063\u305f NotEnhoughArgsError \u306f\u3001\u3044\u3089\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\ndouble_arg() \u95a2\u6570\u3092\u4fee\u6b63\u3057\u307e\u3057\u3087\u3046\u3002\n\nsrc/main7.rs\nfn double_arg(mut argv: env::Args) -> Result<i32, CliError> {\n    let arg1 = try!(argv.nth(1).ok_or(CliError::NotEnoughArgs));\n    let n = try!(arg1.parse::<i32>().map_err(|e| CliError::Parse(e)));\n    Ok(2 * n)\n}\n\n\n\u3053\u306e\u3088\u3046\u306b\u3001\u623b\u308a\u5024\u3092 Result<i32, CliError> \u306b\u5909\u66f4\u3057\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u3001arg1.parse::<i32>() \u304c num::ParseIntError \u3092\u8fd4\u3057\u305f\u3068\u304d\u306e\u305f\u3081\u306b\u3001map_err() \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306b\u3088\u308b\u5909\u63db\u304c\u5fc5\u8981\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\u3053\u308c\u3092\u53d6\u308a\u9664\u304f\u306e\u306f\u7c21\u5358\u3067\u3059\u3002num::ParseIntError \u304b\u3089 CliError \u3078\u306e\u5909\u63db\u3092\u3059\u308b From \u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3059\u308c\u3070\u3044\u3044\u306e\u3067\u3059\u3002\n\nsrc/main7.rs\nimpl From<num::ParseIntError> for CliError {\n    fn from(err: num::ParseIntError) -> CliError {\n        CliError::Parse(err)\n    }\n}\n\n\ndouble_arg() \u95a2\u6570\u306f\u6700\u7d42\u7684\u306b\u3053\u3046\u306a\u308a\u307e\u3059\u3002\n\nsrc/main7.rs\nfn double_arg(mut argv: env::Args) -> Result<i32, CliError> {\n    let arg1 = try!(argv.nth(1).ok_or(CliError::NotEnoughArgs));\n    let n = try!(arg1.parse::<i32>());\n    Ok(2 * n)\n}\n\n\nmain() \u95a2\u6570\u306f\u4ee5\u524d\u306e\u307e\u307e\u3067\u3082\u52d5\u304d\u307e\u3059\u304c\u3001\u305b\u3063\u304b\u304f\u5217\u6319\u578b\u3092\u5c0e\u5165\u3057\u305f\u306e\u3067\u3001double_arg() \u95a2\u6570\u306e\u623b\u308a\u5024\u3092\u4f7f\u3063\u3066\u3001CliError::Parse() \u306e\u6642\u3082\u65e5\u672c\u8a9e\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u51fa\u3059\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002\n\nsrc/main7.rs\nfn main() {\n    match double_arg(env::args()) {\n        Ok(n) => println!(\"{}\", n),\n        Err(err @ CliError::NotEnoughArgs) => println!(\"\u30a8\u30e9\u30fc\uff1a{}\", err),\n        Err(CliError::Parse(..)) => {\n            println!(\"\u30a8\u30e9\u30fc\uff1a\u4e0d\u6b63\u306a\u6570\u5b57\u3067\u3059 \\\"{}\\\"\",\n                     env::args().nth(1).unwrap())\n        }\n    }\n}\n\n\n\u3053\u308c\u3067\u5b8c\u6210\u3067\u3059\uff01\n\n\u307e\u3068\u3081\n\n\nOption<T> \u3068 Result<T, E> \u306e\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306b\u3064\u3044\u3066\u3001\u3088\u304f\u5b66\u3093\u3067\u304a\u304d\u307e\u3057\u3087\u3046\u3002\u3053\u308c\u3089\u306e\u5024\u3092\u7c21\u6f54\u306b\u51e6\u7406\u3059\u308b\u305f\u3081\u306e\u9053\u5177\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u7279\u306b\u3088\u304f\u4f7f\u3046\u306e\u306f and_then()\u3001map()\u3001unwrap_or() \u3067\u3059\u3002\n\ntry!() \u30de\u30af\u30ed\u3092\u4f7f\u3044\u3053\u306a\u3057\u307e\u3057\u3087\u3046\u3002\u3053\u306e\u30de\u30af\u30ed\u306f\uff13\u3064\u306e\u3053\u3068\u3092\u62bd\u8c61\u5316\u3057\u3066\u304f\u308c\u307e\u3059\uff1a\n\n\n\u5834\u5408\u5206\u3051\n\u5236\u5fa1\u30d5\u30ed\u30fc\uff08\u65e9\u671f\u30ea\u30bf\u30fc\u30f3\uff09\n\u30a8\u30e9\u30fc\u5024\u306e\u578b\u5909\u63db\n\n\n\u30a8\u30e9\u30fc\u578b\u306b\u6587\u5b57\u5217\u3092\u4f7f\u3046\u306e\u306f\u907f\u3051\u3066\u3001Box<Error> \u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u3001\u69cb\u9020\u4f53\u306b\u3088\u308b\u30a8\u30e9\u30fc\u578b\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u3087\u3046\u3002\n\nBox<Error> \u306e\u578b\u6d88\u53bb\u304c\u554f\u984c\u306b\u306a\u308b\u5834\u5408\u306f\u3001\u5217\u6319\u578b\u3092\u5b9a\u7fa9\u3057\u3066\u30a8\u30e9\u30fc\u306e\u5024\u3092\u30e9\u30c3\u30d7\u3057\u307e\u3057\u3087\u3046\u3002\n\n\uff13\u3068\uff14\u306f\u5fc5\u9808\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u7c21\u5358\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u66f8\u3044\u3066\u3044\u308b\u6642\u306f\u3001Result<T, String> \u578b\u3067\u5341\u5206\u306a\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002\n\u3053\u306e\u8a18\u4e8b\u3067\u89e3\u8aac\u3057\u305f\u5185\u5bb9\u3092\u3001\u3082\u3063\u3068\u8a73\u3057\u304f\u77e5\u308a\u305f\u304f\u306a\u3063\u305f\u3089\u3001\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\uff08\u65e5\u672c\u8a9e\u7ffb\u8a33\u7248\uff09\u306e \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0 \u3092\u8aad\u3093\u3067\u304f\u3060\u3055\u3044\u3002\n\u3082\u3061\u308d\u3093\u3001\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u305d\u308c\u4ee5\u5916\u306e\u7ae0\u3082\u3001Rust \u3092\u4f7f\u3046\u4e0a\u3067\u7406\u89e3\u3057\u3066\u304a\u304f\u3079\u304d\u5185\u5bb9\u304c\u8a70\u307e\u3063\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u305c\u3072\u8aad\u3093\u3067\u3082\u3089\u3044\u305f\u3044\u3067\u3059\u3002\u7ffb\u8a33\u306e\u9032\u6357\u72b6\u6cc1\u3068\u3001\u7ffb\u8a33\u6e08\u307f\u30da\u30fc\u30b8\u30d8\u306e\u30ea\u30f3\u30af\u306f \u3053\u3053 \u306b\u3042\u308a\u307e\u3059\u3002\n## \u3053\u306e\u8a18\u4e8b\u306e\u6982\u8981\n\n`Option<T>` \u578b\u3084 `Result<T, E>` \u578b\u306e\u623b\u308a\u5024\u3092\u3001`match` \u5f0f\u3067\u5224\u5225\u3057\u3066\u3044\u308b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u3001\n\n```rust\nfn double_arg(mut argv: env::Args) -> Result<i32, String> {\n    match argv.nth(1) {\n        None => Err(\"\u6570\u5b57\u3092\uff11\u3064\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\".to_owned()),\n        Some(arg1) => {\n            match arg1.parse::<i32>() {\n                Ok(n) => Ok(2 * n),\n                Err(err) => Err(err.to_string()),\n            }\n        }\n    }\n}\n```\n\nRust \u306e\u6a19\u6e96\u7684\u306a\u90e8\u54c1\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\u3059\u3063\u304d\u308a\u8aad\u307f\u3084\u3059\u304f\u4ed5\u4e0a\u3052\u308b\u307e\u3067\u306e\u9053\u306e\u308a\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n```rust\nfn double_arg(mut argv: env::Args) -> Result<i32, CliError> {\n    let arg1 = try!(argv.nth(1).ok_or(CliError::NotEnoughArgs));\n    let n = try!(arg1.parse::<i32>());\n    Ok(2 * n)\n}\n```\n\n\u306a\u304a\u3001\u3053\u306e\u8a18\u4e8b\u306f\u3001Rust \u306e\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u300cRust\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u300d\uff08\u65e5\u672c\u8a9e\u7ffb\u8a33\u7248\uff09\u306e [\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0](https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/error-handling.html) \u306e\u7ae0\u3092\u53c2\u8003\u306b\u3057\u3066\u66f8\u304d\u307e\u3057\u305f\u3002\n\n\n### Rust \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\n\n\u3053\u306e\u8a18\u4e8b\u306e\u30b3\u30fc\u30c9\u306f\u30012016\u5e742\u6708\u73fe\u5728\u306e\u6700\u65b0\u306e\u5b89\u5b9a\u7248\u3067\u52d5\u4f5c\u78ba\u8a8d\u6e08\u307f\u3067\u3059\uff1a\n\n- rustc 1.6.0\n- cargo 0.8.0 (08da2f5 2015-12-21)\n\nrustc 1.0 \u4ee5\u964d\u306a\u3089\u3001\u3069\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u3082\u554f\u984c\u306a\u304f\u52d5\u304f\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n### \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n\u672c\u8a18\u4e8b\u3067\u7d39\u4ecb\u3059\u308b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3001GitHub \u306b\u7f6e\u3044\u3066\u3042\u308a\u307e\u3059\u3002\n\n- [tatsuya6502/rust-option-result-examples](https://github.com/tatsuya6502/rust-option-result-examples)\n\nRust \u3068 Cargo \u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u305f\u74b0\u5883\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3059\u308c\u3070\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\n\n```shell-session\n$ cd rust-option-result-examples\n$ cargo --bin main{1-7\u306e\u9023\u756a} -- \u30d7\u30ed\u30b0\u30e9\u30e0\u3078\u306e\u5f15\u6570\n```\n\n\u4f8b\uff1a\n\n```shell-session\n$ cargo --bin main7 -- 123\n   Compiling error-handling v0.1.0 (file:/// ... rust-option-result-examples)\n     Running `target/debug/main7 123`\n246\n```\n\n\n## \u57fa\u790e\u77e5\u8b58\uff1a`Option<T>` \u578b\u3068 `Result<T, E>` \u578b\n\n### `Option<T>` \u578b\n\nRust \u306e [`Option<T>` \u578b](https://doc.rust-lang.org/std/option/enum.Option.html)\u306f\u3001\u5024\u304c **\u5b58\u5728\u3057\u306a\u3044** \u53ef\u80fd\u6027\u3092\u6697\u793a\u3059\u308b\u5217\u6319\u578b\u3067\u3059\u3002\u5b9a\u7fa9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\n```rust\nenum Option<T> {\n    None,\n    Some(T),\n}\n```\n\nT\u578b\u306e\u5024\u304c\u5b58\u5728\u3059\u308b\u6642\u306f\u3001`Some` \u3067\u5305\u307e\u308c\u3066\u3044\u307e\u3059\u3002\u5b58\u5728\u3057\u306a\u3044\u6642\u306f `None` \u306b\u306a\u308a\u307e\u3059\u3002\n\n`Option` \u578b\u306f\u3001\u4ed6\u306e\u8a00\u8a9e\u3067\u306f `Maybe` \u3084 `Optional` \u306a\u3069\u3068\u547c\u3070\u308c\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002\n\n**\u4f8b\uff1a**\n\nLinux \u306e Docker \u304c\u4f7f\u3048\u308b\u74b0\u5883\u3067 [rusti](http://qiita.com/tatsuya6502/items/61af3f4d6c52e472f899) \u3092\u5b9f\u884c\uff1a\n\n```shell-session\n% sudo docker run -it --rm quay.io/tatsuya6502/rusti\n# cd ~/rusti\n# cargo run\nrusti=>\n```\n\n`Some(10)` \u306f `Option<i32>` \u578b\u3067\u3059\u3002\n\n```rust\nrusti=> Some(10)\nSome(10)\nrusti=> .type Some(10)\nSome(10) = core::option::Option<i32>\n```\n\n\u6ce8\u610f\uff1a rusti \u3067\u578b\u3092\u898b\u308b\u3068 `core` \u30e9\u30a4\u30d6\u30e9\u30ea\u306e `Option<T>` \u578b\u304c\u512a\u5148\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u901a\u5e38\u306e Rust \u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f `core` \u30e9\u30a4\u30d6\u30e9\u30ea\u3092 `use` \u6307\u5b9a\u3057\u3066\u306a\u3044\u306e\u3067\u3001`core` \u3067\u306f\u306a\u304f\u3001`std` \u30e9\u30a4\u30d6\u30e9\u30ea\u306e `std::option::Option<T>` \u578b\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3053\u3061\u3089\u306f `Option<String>` \u578b\u3067\u3059\u3002\n\n```rust\nrusti=> Some(\"Hello, world!\".to_owned())\nSome(\"Hello, world!\")\nrusti=> .type Some(\"Hello, world!\".to_owned())\n...\u7701\u7565... = core::option::Option<collections::string::String>\n```\n\n`None` \u306f\u5358\u4f53\u3060\u3068 `Option<T>` \u306e `T` \u304c\u6c7a\u307e\u3089\u306a\u3044\u306e\u3067\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\n\n```rust\nrusti=> None\n<anon>:13:20: 13:24 error: unable to infer enough type information about `_`; type annotations or generic parameter binding required [E0282]\n...\n```\n\n\u30d2\u30f3\u30c8\u3092\u4e0e\u3048\u307e\u3057\u3087\u3046\u3002\n\n```rust\nrusti=> None as Option<i32>\nNone\nrusti=> .type None as Option<i32>\n... = core::option::Option<i32>\n```\n\n`Some` \u306b\u5305\u307e\u308c\u305f\u5024\u3092\u53d6\u308a\u51fa\u3059\u306b\u306f\u3001`match` \u5f0f\u306b\u3088\u308b\u5834\u5408\u5206\u3051\u3092\u3057\u307e\u3059\u3002\n\n```rust\nrusti=> .block\nrusti+> let v = Some(10);\nrusti+> match v {\nrusti+>     Some(n) => n,\nrusti+>     None    => -1,\nrusti+> }\nrusti+> .\n10\n```\n\n`Option` \u306b\u51fa\u4f1a\u3046\u5ea6\u306b\u5834\u5408\u5206\u3051\u3092\u3059\u308b\u306e\u306f\u9762\u5012\u306a\u306e\u3067\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u306f\u3001`Option` \u304b\u3089\u5024\u3092\u53d6\u308a\u51fa\u3057\u305f\u308a\u3001\u52a0\u5de5\u3057\u305f\u308a\u3059\u308b\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4f8b\u3048\u3070 `unwrap()` \u306f\u6700\u3082\u7d20\u6734\u306a\u30e1\u30bd\u30c3\u30c9\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5b9a\u7fa9\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff1a\n\n```rust:Option&lt;T&gt;\u306eunwrap()\u306e\u5b9a\u7fa9\nimpl<T> Option<T> {\n    fn unwrap(self) -> T {\n        match self {\n            Option::Some(val) => val,\n            Option::None =>\n              panic!(\"called `Option::unwrap()` on a `None` value\"),\n        }\n    }\n}\n```\n\n\u3053\u306e\u3088\u3046\u306b `Some<T>` \u306b\u9069\u7528\u3059\u308b\u3068\u3001\u5024\u304c\u53d6\u308a\u51fa\u305b\u307e\u3059\u3002\n\n```rust\nrusti=> Some(10).unwrap()\n10\n```\n\n\u305d\u3057\u3066\u3001`None` \u306b\u9069\u7528\u3059\u308b\u3068\u3001\u30d1\u30cb\u30c3\u30af\u3057\u307e\u3059\u3002\n\n```rust\nrusti=> (None as Option<i32>).unwrap()\nthread '<main>' panicked at 'called `Option::unwrap()` on a `None` value', ../src/libcore/option.rs:330\n```\n\n`map()` \u306f\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u5f15\u6570\u306b\u3068\u308a\u3001`Some` \u306e\u4e2d\u306e\u5024\u306b\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u9069\u7528\u3057\u3066\u3001\u7d50\u679c\u3092 `Some` \u3067\u5305\u307f\u76f4\u3057\u307e\u3059\u3002\u3082\u3057 `None` \u306b\u9069\u7528\u3059\u308b\u3068\u3001`None` \u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```rust\nrusti=> Some(10).map(|n| 2 * n)\nSome(20)\nrusti=> (None as Option<i32>).map(|n| 2 * n)\nNone\n```\n\n`and_then()` \u306f `map()` \u306b\u4f3c\u3066\u3044\u307e\u3059\u304c\u3001\u9055\u3044\u306f `Some<T>` \u3060\u3051\u3067\u306a\u304f `None` \u3082\u8fd4\u305b\u308b\u3053\u3068\u3067\u3059\u3002\n\n```rust\nrusti=> Some(10).and_then(|n| if n > 5 {Some(n)} else {None} )\nSome(10)\nrusti=> Some(5).and_then(|n| if n > 5 {Some(n)} else {None} )\nNone\nrusti=> (None as Option<i32>).and_then(|n| if n > 5 {Some(n)} else {None} )\nNone\n```\n\n`map()` \u3084 `and_then()` \u306f\u5165\u529b\u3068\u51fa\u529b\u306b `Option<T>` \u578b\u306e\u5024\u3092\uff11\u3064\u3060\u3051\u53d6\u308b\u306e\u3067\u3001\u6570\u73e0\u3064\u306a\u304e\u306b\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u6027\u8cea\u3092\u6301\u3064\u30e1\u30bd\u30c3\u30c9\u3092\u3001\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3068\u547c\u3073\u307e\u3059\u3002\n\n```rust\nrusti=> Some(10).and_then(|n| if n > 5 {Some(n)} else {None}).map(|n| 2 * n)\nSome(20)\nrusti=> Some(5).and_then(|n| if n > 5 {Some(n)} else {None}).map(|n| 2 * n)\nNone\n```\n\n\n### `Result<T, E>` \u578b\n\nRust \u306e [`Result<T, E>` \u578b](https://doc.rust-lang.org/std/result/enum.Result.html)\u306f **\u30a8\u30e9\u30fc\u306b\u306a\u308b\u53ef\u80fd\u6027** \u3092\u6697\u793a\u3059\u308b\u5217\u6319\u578b\u3067\u3059\u3002\u5b9a\u7fa9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\n```rust\nenum Result<T, E> {\n    Ok(T),\n    Err(E),\n}\n```\n\n\u51e6\u7406\u304c\u6210\u529f\u3057\u305f\u6642\u306f\u5024\u3092 `Ok` \u3067\u5305\u307f\u307e\u3059\u3002\u5931\u6557\u3057\u305f\u6642\u306f\u30a8\u30e9\u30fc\u306e\u5024\u3092 `Err` \u3067\u5305\u307f\u307e\u3059\u3002\n\n`Result` \u578b\u306f\u3001\u4ed6\u306e\u8a00\u8a9e\u3067\u306f `Either` \u3068\u547c\u3070\u308c\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002\n\n```rust\nrusti=> .type Ok(10) as Result<i32, ()>\n... = core::result::Result<i32, ()>\nrusti=> .type Ok(\"Success!\".to_owned()) as Result<String, ()>\n... = core::result::Result<collections::string::String, ()>\nrusti=> .type Err(\"Not found\".to_owned()) as Result<i32, String>\n... = core::result::Result<i32, collections::string::String>\n```\n\n`Option<T>` \u3068\u540c\u3058\u3088\u3046\u306a\u30e1\u30bd\u30c3\u30c9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002`unwrap()` \u306f\u5024\u304c `Err` \u306e\u6642\u306f\u30d1\u30cb\u30c3\u30af\u3057\u307e\u3059\u3002\n\n```rust\nrusti=> (Ok(10) as Result<i32, String>).unwrap()\n10\nrusti=> (Err(\"Not found\".to_owned()) as Result<i32, String>).unwrap()\nthread '<main>' panicked at 'called `Result::unwrap()` on an `Err` value: \"Not found\"', ../src/libcore/result.rs:746\n```\n\n`and_then()` \u3084 `map()` \u306f\u3001\u5024\u304c `Ok<T>` \u306e\u3068\u304d\u306f\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u5b9f\u884c\u3057\u3001\u5024\u304c `Err<E>` \u306e\u3068\u304d\u307b\u5143\u306e\u5024\u3092\u672a\u52a0\u5de5\u3067\u8fd4\u3057\u307e\u3059\u3002\n\n```rust\nrusti=> .block\nrusti+> (Ok(10) as Result<i32, String>)\nrusti+>   .and_then(|n| if n > 5 {Ok(n)} else {Err(\"Too small\".to_owned())})\nrusti+>   .map(|n| 2 * n)\nrusti+> .\nOk(20)\n```\n\n```rust\nrusti=> .block\nrusti+> (Ok(5) as Result<i32, String>)\nrusti+>   .and_then(|n| if n > 5 {Ok(n)} else {Err(\"Too small\".to_owned())})\nrusti+>   .map(|n| 2 * n)\nrusti+> .\nErr(\"Too small\")\n```\n\n\u307e\u305f\u3001\u9006\u306b\u5024\u304c `Err` \u306e\u3068\u304d\u3060\u3051\u50cd\u304f\u30e1\u30bd\u30c3\u30c9\u3082\u3042\u308a\u307e\u3059\u3002\n\n```rust\nrusti=> .block\nrusti+> (Err(\"Not found\".to_owned()) as Result<i32, String>)\nrusti+>   .map_err(|e| \"Error! \".to_owned() + &e)\nrusti+> .\nErr(\"Error! Not found\")\n```\n\n\n## \u660e\u793a\u7684\u306a\u5834\u5408\u5206\u3051\u304b\u3089\u3001`try!` \u30de\u30af\u30ed\u3068\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3078\n\n\u3067\u306f\u3001\u5192\u982d\u306b\u3042\u3052\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f8b\u306b\u3001`Option<T>` \u3084 `Result<T, E>` \u306e\u6271\u3044\u3092\u3001\u5c11\u3057\u305a\u3064\u6539\u5584\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u3057\u3066\u6574\u6570\u5024\u3092\u8868\u3059\u6587\u5b57\u5217\u3092\u53d7\u3051\u53d6\u308a\u3001\u305d\u308c\u3092\uff12\u500d\u3057\u305f\u5024\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n\n**\u5f15\u6570\u3068\u3057\u3066 `\"10\"` \u3092\u4e0e\u3048\u305f\u6642\uff1a**\n\n```shell-session\n% cargo run --bin main1 -- 10\n     Running `target/debug/main1 10`\n20\n```\n\n\n### `unwrap()` \u3092\u4f7f\u3046\n\n\u307e\u305a\u6700\u521d\u306f\u3001\u30a8\u30e9\u30fc\u306e\u53ef\u80fd\u6027\u306f\u8003\u616e\u305b\u305a\u3001\u6b63\u3057\u3044\u5f15\u6570\u304c\u6e21\u3055\u308c\u305f\u3068\u304d\u306e\u6a5f\u80fd\u3060\u3051\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b `double_arg()` \u95a2\u6570\u306f\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306e\uff11\u756a\u76ee\u306e\u5024\u3092\u53d6\u5f97\u3057\u3066\u3001\u6574\u6570\u5024\u3068\u3057\u3066\u30d1\u30fc\u30b9\u3057\u3001\uff12\u500d\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\n\n```rust:src/main1.rs\nuse std::env;\n\nfn double_arg(mut argv: env::Args) -> i32 {\n    let arg1 = argv.nth(1).unwrap(); // \u30a8\u30e9\u30fc1\n    let n = arg1.parse::<i32>().unwrap(); // \u30a8\u30e9\u30fc2\n    2 * n\n}\n```\n\n\u305d\u3057\u3066\u547c\u3073\u51fa\u3057\u5143\u3068\u306a\u308b `main()` \u95a2\u6570\u3067\u306f\u3001`double_arg()` \u3092\u547c\u3073\u51fa\u3057\u3066\u3001\u7d50\u679c\u3092\u8868\u793a\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\n```rust:src/main1.rs\nfn main() {\n    let n = double_arg(env::args());\n    println!(\"{}\", n);\n}\n```\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u6b63\u3057\u3044\u5f15\u6570\u3092\u4e0e\u3048\u308c\u3070\u554f\u984c\u306a\u304f\u52d5\u304d\u307e\u3059\u3002\n\n```shell-session\n% cargo run --bin main1 -- 42\n     Running `target/debug/main1 42`\n84\n```\n\n\u3057\u304b\u3057\u5f53\u7136\u3001\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3068\u30d1\u30cb\u30c3\u30af\u3092\u8d77\u3053\u3057\u3066\u30af\u30e9\u30c3\u30b7\u30e5\u3057\u307e\u3059\u3002\n\n\u307e\u305a\u3001\u5f15\u6570\u3092\u6307\u5b9a\u3057\u306a\u3044\u3068\u3001\u5148\u307b\u3069\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u30a8\u30e9\u30fc\uff11\u306e\u884c\u3067\u30d1\u30cb\u30c3\u30af\u3057\u307e\u3059\u3002\n\n```shell-session\n% cargo run --bin main1\n     Running `target/debug/main1`\nthread '<main>' panicked at 'called `Option::unwrap()` on a `None` value', src/libcore/option.rs:367\nProcess didn't exit successfully: `target/debug/main1` (exit code: 101)\n```\n\n\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u610f\u5473\u306f\u3001`None` \u306b\u5bfe\u3057\u3066\u3001`Option::unwrap()` \u304c\u547c\u3070\u308c\u307e\u3057\u305f\u3001\u3067\u3059\u3002`argv.nth(1)` \u306f `Option<String>` \u578b\u306e\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\uff11\u306e\u6587\u5b57\u5217\u304c\u3042\u308c\u3070 `Some` \u304c\u8fd4\u3055\u308c\u3001\u306a\u3051\u308c\u3070 `None` \u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```rust\nrusti=> use std::env;\nrusti=> .type env::args().nth(1)\n... = core::option::Option<collections::string::String>\n```\n\n\u307e\u305f\u3001\u5f15\u6570\u304c\u6574\u6570\u3068\u3057\u3066\u30d1\u30fc\u30b9\u3067\u304d\u306a\u3044\u3068\u304d\u3082\u3001\u30a8\u30e9\u30fc\uff12\u306e\u884c\u3067\u30d1\u30cb\u30c3\u30af\u3057\u307e\u3059\u3002\n\n```shell-session\n% cargo run --bin main1 -- hoge\n     Running `target/debug/main1 hoge`\nthread '<main>' panicked at 'called `Result::unwrap()` on an `Err` value: ParseIntError { kind: InvalidDigit }', src/libcore/result.rs:741\nProcess didn't exit successfully: `target/debug/main1 hoge` (exit code: 101)\n```\n\n\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u610f\u5473\u306f\u3001`Err` \u306b\u5bfe\u3057\u3066\u3001`Result::unwrap()` \u304c\u547c\u3070\u308c\u307e\u3057\u305f\u3001\u3067\u3059\u3002`parse()` \u306f\u3001\uff08\u3053\u306e\u5834\u5408\u306f `i32` \u578b\u306e\u7d50\u679c\u304c\u671f\u5f85\u3055\u308c\u3066\u3044\u307e\u3059\u306e\u3067\uff09 `Result<i32, std::num::ParseIntError>` \u578b\u306e\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\u30d1\u30fc\u30b9\u3067\u304d\u308c\u3070 `Ok<i32>` \u3092\u3001\u3067\u304d\u306a\u3051\u308c\u3070 `Err<std::num::ParseIntError>` \u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```rust\nrusti=> .type \"10\".parse::<i32>()\n... = core::result::Result<i32, core::num::ParseIntError>\n```\n\n\n### \u660e\u793a\u7684\u306a\u5834\u5408\u5206\u3051\u3092\u3059\u308b\n\n\u3067\u306f\u3001\u3053\u306e\uff12\u3064\u306e\u30a8\u30e9\u30fc\u306b\u5bfe\u5fdc\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002`double_arg()` \u95a2\u6570\u306f `unwrap()` \u3067\u30d1\u30cb\u30c3\u30af\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001\u30a8\u30e9\u30fc\u304c\u8d77\u3053\u3063\u305f\u3053\u3068\u3092\u3001\u623b\u308a\u5024\u3092\u4f7f\u3063\u3066\u547c\u3073\u51fa\u3057\u5143\uff08`main()` \u95a2\u6570\uff09\u306b\u4f1d\u3048\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\u30ea\u30bf\u30fc\u30f3\u578b\u304c `i32` \u306e\u307e\u307e\u3060\u3068\u30a8\u30e9\u30fc\u3092\u8868\u73fe\u3067\u304d\u306a\u3044\u306e\u3067\u3001`Result<i32, String>` \u306b\u5909\u66f4\u3057\u307e\u3059\u3002\u30a8\u30e9\u30fc\u306e\u5185\u5bb9\u306f `String` \u578b\u306e\u6587\u5b57\u5217\u3067\u6e21\u3057\u307e\u3059\u3002\n\n\u307e\u305a\u306f\u7d20\u6734\u306a\u3084\u308a\u65b9\u3068\u3057\u3066\u3001`match` \u5f0f\u306b\u3088\u308b\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u3001\u3064\u307e\u308a\u3001\u660e\u793a\u7684\u306a\u5834\u5408\u5206\u3051\u3092\u3057\u307e\u3057\u3087\u3046\u3002\n\n```rust:src/main2.rs\nuse std::env;\n\nfn double_arg(mut argv: env::Args) -> Result<i32, String> {\n    match argv.nth(1) {\n        None => Err(\"\u6570\u5b57\u3092\uff11\u3064\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\".to_owned()),\n        Some(arg1) => {\n            match arg1.parse::<i32>() {\n                Ok(n) => Ok(2 * n),\n                Err(err) => Err(err.to_string()),\n            }\n        }\n    }\n}\n```\n\n\u3053\u306e\u3088\u3046\u306b\u3001\u3082\u3057 `argv.nth(1)` \u304c `None` \u3092\u8fd4\u3057\u305f\u3089\u3001\u300c\u6570\u5b57\u3092\uff11\u3064\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u300d\u3068\u3044\u3046 `String` \u578b\u306e\u6587\u5b57\u5217\u3092 `Err()` \u3067\u5305\u3093\u3067\u8fd4\u3057\u307e\u3059\u3002\n\n\u307e\u305f\u3082\u3057 `parse::<i32>()` \u304c `Err<std::num::ParseIntError>` \u3092\u8fd4\u3057\u305f\u3089\u3001`ParseIntError` \u3092 `to_string()` \u3067 `String` \u578b\u306e\u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u3066\u304b\u3089\u3001`Err<String>` \u3067\u5305\u3093\u3067\u8fd4\u3057\u307e\u3059\u3002\n\n\u30a8\u30e9\u30fc\u304c\u306a\u3051\u308c\u3070\u3001\u6570\u5024\u3092\uff12\u500d\u3057\u305f\u5024\u3092 `Ok<i32>` \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002\n\n`main()` \u95a2\u6570\u306f `double_arg()` \u95a2\u6570\u304b\u3089\u306e\u623b\u308a\u5024\u306b\u5bfe\u3057\u3066 `match` \u5f0f\u3067\u5834\u5408\u5206\u3051\u3092\u3057\u3066\u3001\u5fc5\u8981\u306a\u3089\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n\n```rust:src/main2.rs\nfn main() {\n    match double_arg(env::args()) {\n        Ok(n) => println!(\"{}\", n),\n        Err(err) => println!(\"\u30a8\u30e9\u30fc\uff1a{}\", err),\n    }\n}\n\n```\n\n\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n**\u5f15\u6570\u3092\u5fd8\u308c\u305f\u6642\uff1a**\n\n```shell-sesison\n% cargo run --bin main2\n     Running `target/debug/main2`\n\u30a8\u30e9\u30fc\uff1a\u6570\u5b57\u3092\uff11\u3064\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n```\n\n**\u5f15\u6570\u304c\u6574\u6570\u3068\u3057\u3066\u30d1\u30fc\u30b9\u3067\u304d\u306a\u3044\u6642\uff1a**\n\n```\n% cargo run --bin main2 -- hoge\n     Running `target/debug/main2 hoge`\n\u30a8\u30e9\u30fc\uff1ainvalid digit found in string\n```\n\n\u3069\u3061\u3089\u306e\u30b1\u30fc\u30b9\u3082\u30d1\u30cb\u30c3\u30af\u3057\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002\u5f8c\u8005\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u82f1\u8a9e\u3067\u3059\u304c\u3001\u671f\u5f85\u901a\u308a\u306b\u52d5\u3044\u3066\u307e\u3059\u3002\n\n\u3053\u306e\u65b9\u6cd5\u306e\u9577\u6240\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5185\u5bb9\u304c\u898b\u305f\u307e\u307e\u3067\u3001\u306a\u306b\u3082\u62bd\u8c61\u5316\u3055\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u521d\u5fc3\u8005\u306b\u3068\u3063\u3066\u308f\u304b\u308a\u3084\u3059\u3044\u3053\u3068\u3067\u3059\u3002\u77ed\u6240\u306f\u3001\u30a8\u30e9\u30fc\u30b1\u30fc\u30b9\u306e\u5834\u5408\u5206\u3051\u304c\u5897\u3048\u3066\u304f\u308b\u3068\u3001\u6b63\u5e38\u30b1\u30fc\u30b9\u306e\u30ed\u30b8\u30c3\u30af\u304c\u305d\u308c\u306b\u57cb\u3082\u308c\u3066\u3057\u307e\u3044\u3001\u5206\u304b\u308a\u306b\u304f\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u3053\u3068\u3067\u3059\u3002\n\n\u6700\u521d\u306f\u3053\u306e\u3088\u3046\u306a\u66f8\u304d\u65b9\u3067\u3082\u304b\u307e\u308f\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001Rust \u306b\u6163\u308c\u3066\u304d\u305f\u3089\u3001\u3053\u306e\u5f8c\u7d39\u4ecb\u3059\u308b\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3084 `try!` \u30de\u30af\u30ed\u3092\u4f7f\u3063\u305f\u65b9\u6cd5\u3078\u79fb\u884c\u3057\u3066\u3044\u304f\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002\n\n\n### \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3092\u4f7f\u3046\n\n\u660e\u793a\u7684\u306a\u5834\u5408\u5206\u3051\u3092\u3001\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306b\u80a9\u4ee3\u308f\u308a\u3057\u3066\u3082\u3089\u3044\u307e\u3057\u3087\u3046\u3002\u3053\u306e\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u3089\u308c\u307e\u3059\u3002\n\n```rust:src/main3.rs\nuse std::env;\n\nfn double_arg(mut argv: env::Args) -> Result<i32, String> {\n    argv.nth(1)\n        .ok_or(\"\u6570\u5b57\u3092\uff11\u3064\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\".to_owned())\n        .and_then(|arg1| arg1.parse::<i32>().map_err(|err| err.to_string()))\n        .map(|n| 2 * n)\n}\n\nfn main() {\n  // main2.rs \u3068\u540c\u3058\u3002\u7701\u7565\n}\n```\n\n`Option<T>` \u306e `ok_or()` \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306f\u3001`argv.nth(1)` \u304c\u8fd4\u3057\u305f `Option<T>` \u578b\u306e\u5024\u3092\u3001`Result<T, E>` \u578b\u306b\u5909\u63db\u3057\u3066\u304f\u308c\u307e\u3059\u3002\u3082\u3057\u5024\u304c `Some<T>` \u306a\u3089 `Ok<T>` \u3092\u4f5c\u308a\u307e\u3059\u3002\u3082\u3057\u5024\u304c `None` \u306a\u3089 `Err<E>` \u3092\u4f5c\u3063\u3066\u3001\u5f15\u6570\u3068\u3057\u3066\u6e21\u3057\u305f\u5024\uff08\u3053\u306e\u5834\u5408\u306f `String` \u578b\u306e `\"\u6570\u5b57\u3092\uff11\u3064\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\"`\uff09\u3092\u5305\u307f\u307e\u3059\u3002\n\n```rust\nrusti=> Some(\"10\").ok_or(\"error!\".to_owned())\nOk(\"10\")\nrusti=> (None as Option<i32>).ok_or(\"error!\".to_owned())\nErr(\"error!\")\n```\n\n`Result<T, E>` \u306e `and_then()`\u3001`map_err()`\u3001`map()` \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306f\u5148\u307b\u3069\u7d39\u4ecb\u3057\u305f\u901a\u308a\u3067\u3059\u3002\n\n\u6d41\u308c\u3092\u8ffd\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n**\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306b `\"10\"` \u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\uff1a**\n\n0. `argv.nth(1)` \u304c `Some(\"10\")` \u3092\u8fd4\u3059\u3002\n0. `ok_or()` \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u304c\u3001`Ok(\"10\")` \u306b\u5909\u63db\u3059\u308b\u3002\n0. `and_then()` \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u304c\u3001`Ok<String>` \u306e\u4e2d\u306e\u5024 `\"10\"` \u3092\u53d6\u308a\u51fa\u3057\u3001\u30af\u30ed\u30fc\u30b8\u30e3\u306b\u6e21\u3059\u3002\n0. \u30af\u30ed\u30fc\u30b8\u30e3\u306f `\"10\"` \u306b `arg1.parse::<i32>()` \u3092\u9069\u7528\u3057\u3066\u3001`Ok(10)` \u304c\u5f97\u3089\u308c\u308b\u3002\n0. \u540c\u30af\u30ed\u30fc\u30b8\u30e3\u306e `map_err()` \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306f\u4f55\u3082\u305b\u305a\u3001`Ok(10)` \u3092\u8fd4\u3059\u3002\n0. `map()` \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306f `Ok(10)` \u306e\u4e2d\u306e\u5024 `10` \u3092\u53d6\u308a\u51fa\u3057\u3066\u3001\u30af\u30ed\u30fc\u30b8\u30e3\u306b\u6e21\u3059\u3002\n0. \u30af\u30ed\u30fc\u30b8\u30e3\u306f\u305d\u308c\u3092\uff12\u500d\u3057\u3066 `20` \u3092\u8fd4\u3059\u3002\n0. `map()` \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306f\u3001\u305d\u308c\u3092\u5305\u307f\u76f4\u3057\u3066 `Ok(20)` \u3092\u8fd4\u3059\u3002\u3053\u306e\u5024\u304c `double_arg()` \u306e\u623b\u308a\u5024\u306b\u306a\u308b\u3002\n\n**\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u304c\u4e0e\u3048\u3089\u308c\u306a\u304b\u3063\u305f\u3068\u304d\uff1a**\n\n0. `argv.nth(1)` \u306f `None` \u3092\u8fd4\u3059\u3002\n0. `ok_or()` \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306f `Err<String>` \u578b\u306e\u5024 `Err(\"\u6570\u5b57\u3092\uff11\u3064...\")` \u3092\u8fd4\u3059\u3002\n0. \u5f8c\u7d9a\u306e `and_then()` \u3068 `map()` \u306f\u4f55\u3082\u305b\u305a\u3001`Err<String>` \u5024\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\u3002\uff08`double_arg()` \u306e\u623b\u308a\u5024\uff09\n\n**\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306b\u3001\u6570\u5024\u3068\u3057\u3066\u7121\u52b9\u306a\u5024 `\"hoge\"` \u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\uff1a**\n\n0. `and_then()` \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306e\u30af\u30ed\u30fc\u30b8\u30e3\u3067 `\"hoge\".parse::<i32>()` \u304c\u5b9f\u884c\u3055\u308c `Err<std::num::ParseIntError>` \u578b\u306e\u5024\u304c\u8fd4\u308b\u3002\n0. `map_err()` \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u304c\u30a8\u30e9\u30fc\u306e\u5024\u306b `to_string()` \u3092\u9069\u7528\u3057\u3066\u3001`Err<String>` \u578b\u306e\u5024\u304c\u4f5c\u3089\u308c\u308b\u3002\n0. `map()` \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306f\u4f55\u3082\u305b\u305a\u3001`Err<String>` \u5024\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\u3002\uff08`double_arg()` \u306e\u623b\u308a\u5024\uff09\n\n\u3069\u3046\u3067\u3057\u3087\u3046\uff1f\u3000\u305f\u3057\u304b\u306b\u884c\u6570\u306f\u5c11\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3057\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u6587\u9762\u306f\u82f1\u8a9e\u306e\u6587\u7ae0\u3063\u307d\u304f\u306a\u308a\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u3001\u30af\u30ed\u30fc\u30b8\u30e3\u304c\u983b\u51fa\u3059\u308b\u306e\u3067\u500b\u4eba\u7684\u306b\u306f\u3001\u5c11\u3057\u8aad\u307f\u306b\u304f\u304f\u306a\u3063\u305f\u3088\u3046\u306b\u601d\u3048\u307e\u3059\u3002\u6163\u308c\u306e\u554f\u984c\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3002\n\n\u6b21\u306e `try!` \u30de\u30af\u30ed\u3068\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u65b9\u6cd5\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n\n### `try!` \u30de\u30af\u30ed\u3068\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\n\nRust \u3089\u3057\u3044\u3084\u308a\u65b9\u306f\u3001`try!` \u30de\u30af\u30ed\u3068\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3092\u9069\u5ea6\u306b\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3059\u3002`try!()` \u30de\u30af\u30ed\u306f\u3001\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3068\u540c\u69d8\u306b\u5834\u5408\u5206\u3051\u3092\u80a9\u4ee3\u308f\u308a\u3057\u3066\u304f\u308c\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u305d\u308c\u3060\u3051\u3067\u306a\u304f\u300c\u65e9\u671f\u30ea\u30bf\u30fc\u30f3(early return)\u300d\u3068\u3044\u3046\u3001\u5236\u5fa1\u30d5\u30ed\u30fc\u306e\u62bd\u8c61\u5316\u3082\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n```rust:src/main4.rs\n\nuse std::env;\n\nfn double_arg(mut argv: env::Args) -> Result<i32, String> {\n    let arg1 = try!(argv.nth(1).ok_or(\"\u6570\u5b57\u3092\uff11\u3064\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\".to_owned()));\n    let n = try!(arg1.parse::<i32>().map_err(|err| err.to_string()));\n    Ok(2 * n)\n}\n\nfn main() {\n  // main2.rs \u3068\u540c\u3058\u3002\u7701\u7565\n}\n```\n\n`try!()` \u30de\u30af\u30ed\u306f\u3001`Result<T, E>` \u578b\u306e\u5024\u3092\u8fd4\u3059\u5f0f\u3092\u53d6\u308a\u307e\u3059\u3002\u5f0f\u3092\u8a55\u4fa1\u3057\u3066 `Ok<T>` \u306e\u5024\u304c\u5f97\u3089\u308c\u305f\u6642\u306f\u3001`unwrap()` \u306e\u3088\u3046\u306b\u3001\u4e2d\u306e\u5024\u3092\u53d6\u308a\u51fa\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\u4e00\u65b9\u3001`Err<E>` \u306e\u5024\u304c\u5f97\u3089\u308c\u305f\u6642\u306f\u3001`return` \u6587\u3092\u4f7f\u3063\u3066 `double_arg()` \u95a2\u6570\u304b\u3089\u629c\u3051\u51fa\u3057\u3066\u3001\u547c\u3073\u51fa\u3057\u5143\uff08`main()`\uff09\u306b\u305d\u306e\u30a8\u30e9\u30fc\u306e\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n\u6d41\u308c\u3092\u8ffd\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n**\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u3057\u3066 `\"10\"` \u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\uff1a**\n\n0. `argv.nth(1)` \u304c `Some(\"10\")` \u3092\u8fd4\u3059\u3002\n0. `ok_or()` \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u304c\u3001`Ok(\"10\")` \u306b\u5909\u63db\u3059\u308b\u3002\n0. `try!()` \u30de\u30af\u30ed\u304c\u4e2d\u306e\u5024 `\"10\"` \u3092\u53d6\u308a\u51fa\u3059\u3002\n0. \u5909\u6570 `arg1` \u304c `\"10\"` \u306b\u675f\u7e1b\u3055\u308c\u308b\u3002\n0. `\"10\"` \u306b `parse::<i32>()` \u3092\u9069\u7528\u3059\u308b\u3068 `Ok(10)` \u304c\u5f97\u3089\u308c\u308b\u3002\n0. `map_err()` \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306f\u3001`Ok(10)` \u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\u3002\n0. `try!()` \u30de\u30af\u30ed\u306f `Ok(10)` \u306e\u4e2d\u306e\u5024 `10` \u3092\u53d6\u308a\u51fa\u3059\u3002\n0. \u5909\u6570 `n` \u304c`10` \u306b\u675f\u7e1b\u3055\u308c\u308b\u3002\n0. `2 * n` \u306e\u7d50\u679c\u3092 `Ok<i32>` \u306b\u683c\u7d0d\u3059\u308b\u3002\uff08`double_arg()` \u306e\u623b\u308a\u5024\uff09\n\n**\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u304c\u4e0e\u3048\u3089\u308c\u306a\u304b\u3063\u305f\u3068\u304d\uff1a**\n\n0. `argv.nth(1)` \u304c `None` \u3092\u8fd4\u3059\u3002\n0. `ok_or()` \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306f `Err<String>` \u578b\u306e\u5024 `Err(\"\u6570\u5b57\u3092\uff11\u3064...\")` \u3092\u8fd4\u3059\u3002\n0. `try!()` \u30de\u30af\u30ed\u306f `return Err(\"\u6570\u5b57\u3092\uff11\u3064...\");` \u3092\u5b9f\u884c\u3057\u3001`main()` \u95a2\u6570\u3078\u65e9\u671f\u30ea\u30bf\u30fc\u30f3\u3059\u308b\u3002\n\n**\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306b\u3001\u6570\u5024\u3068\u3057\u3066\u7121\u52b9\u306a\u5024 `\"hoge\"` \u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\uff1a**\n\n0. \u5909\u6570 `arg1` \u304c `\"10\"` \u306b\u675f\u7e1b\u3055\u308c\u308b\u3068\u3053\u308d\u307e\u3067\u306f\u3001\u6b63\u5e38\u7cfb\u3068\u540c\u3058\u3002\n0. `\"hoge\".parse::<i32>()` \u304c `Err<std::num::ParseIntError>` \u578b\u306e\u5024\u3092\u8fd4\u3059\u3002\n0. `map_err()` \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u304c\u30a8\u30e9\u30fc\u306e\u5024\u306b `to_string()` \u3092\u9069\u7528\u3057\u3066\u3001`Err<String>` \u578b\u306e\u5024\u304c\u4f5c\u3089\u308c\u308b\u3002\n0. `try!()` \u30de\u30af\u30ed\u304c `return ...` \u3092\u5b9f\u884c\u3057\u3001`main()` \u95a2\u6570\u3078\u65e9\u671f\u30ea\u30bf\u30fc\u30f3\u3059\u308b\u3002\n\n\u65e9\u671f\u30ea\u30bf\u30fc\u30f3\u3068\u3044\u3046\u624b\u6cd5\u304c\u52a0\u308f\u3063\u305f\u3053\u3068\u3067\u3001\u30b3\u30fc\u30c9\u304c\u3059\u3063\u304d\u308a\u3057\u305f\u3068\u601d\u3044\u307e\u305b\u3093\u304b\uff1f\u3000\u30a8\u30e9\u30fc\u51e6\u7406\u3092\u3057\u3066\u306a\u304b\u3063\u305f\u9803\u306e\u30b3\u30fc\u30c9\u3068\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n**\u30a8\u30e9\u30fc\u51e6\u7406\u306a\u3057**\n\n```rust:src/main1.rs\nfn double_arg(mut argv: env::Args) -> i32 {\n    let arg1 = argv.nth(1).unwrap(); // \u30a8\u30e9\u30fc1\n    let n = arg1.parse::<i32>().unwrap(); // \u30a8\u30e9\u30fc2\n    2 * n\n}\n```\n\n**\u30a8\u30e9\u30fc\u51e6\u7406\u3042\u308a**\n\n```rust:src/main4.rs\nfn double_arg(mut argv: env::Args) -> Result<i32, String> {\n    let arg1 = try!(argv.nth(1).ok_or(\"\u6570\u5b57\u3092\uff11\u3064\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\".to_owned()));\n    let n = try!(arg1.parse::<i32>().map_err(|err| err.to_string()));\n    Ok(2 * n)\n}\n```\n\n\u30a8\u30e9\u30fc\u51e6\u7406\u3092\u52a0\u3048\u305f\u5f8c\u3067\u3082\u3001\u30b3\u30fc\u30c9\u306e\u660e\u5feb\u3055\u306f\u5931\u308f\u308c\u3066\u307e\u305b\u3093\u3002\u6b63\u5e38\u30b1\u30fc\u30b9\u306e\u30ed\u30b8\u30c3\u30af\u304c\u306f\u3063\u304d\u308a\u3068\u308f\u304b\u308a\u307e\u3059\u3057\u3001\u305d\u306e\u4e00\u65b9\u3067\u3001\u3069\u3053\u3067\u30a8\u30e9\u30fc\u304c\u8d77\u3053\u308a\u3046\u308b\u304b\u3001\u307e\u305f\u3001\u30a8\u30e9\u30fc\u304c\u8d77\u3053\u3063\u305f\u3089\u3069\u3046\u3059\u308b\u306e\u304b\u3082\u308f\u304b\u308a\u307e\u3059\u3002\n\n\n## \u30a8\u30e9\u30fc\u60c5\u5831\u3092\u6539\u5584\u3059\u308b\n\n\u3044\u307e\u307e\u3067 `double_arg()` \u3067\u306f\u30a8\u30e9\u30fc\u304c\u8d77\u3053\u3063\u305f\u6642\u306b `Err<String>` \u578b\u306e\u5024\u3092\u8fd4\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u3053\u308c\u306f\u624b\u8efd\u306a\u65b9\u6cd5\u3067\u3059\u3057\u3001\u4eca\u56de\u306e\u3088\u3046\u306a\u77ed\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u5341\u5206\u3001\u5b9f\u7528\u306b\u8010\u3048\u3089\u308c\u307e\u3059\u3002\u3067\u3082\u6b8b\u5ff5\u306a\u306e\u306f\u3001`parse::<i32>()` \u304c\u305b\u3063\u304b\u304f `Err<std::num::ParseIntError>` \u578b\u306e\u5024\u3092\u8fd4\u3057\u3066\u3044\u308b\u306e\u306b\u3001\u305d\u308c\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u3066\u304b\u3089\u8fd4\u3057\u3066\u3044\u308b\u3053\u3068\u3067\u3059\u3002\n\n\u3044\u3063\u305f\u3093\u30a8\u30e9\u30fc\u304c\u6587\u5b57\u5217\u306b\u5909\u63db\u3055\u308c\u3066\u3057\u307e\u3046\u3068\u3001\u547c\u3073\u51fa\u3057\u5143\u3067\u306f\u5834\u5408\u5206\u3051\u304c\u3057\u306b\u304f\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u4f8b\u3048\u3070\u547c\u3073\u51fa\u3057\u5143\u306e `main()` \u95a2\u6570\u3067\u3001\u5f15\u6570\u304c\u6307\u5b9a\u3055\u308c\u306a\u304b\u3063\u305f\u6642\u3068\u3001\u6570\u5024\u3068\u3057\u3066\u7121\u52b9\u306a\u5024\u304c\u4e0e\u3048\u3089\u308c\u305f\u6642\u3067\u3001\u5225\u306e\u52d5\u4f5c\u3092\u3055\u305b\u305f\u304f\u306a\u3063\u305f\u3089\u3069\u3046\u3057\u307e\u3059\u304b\uff1f\u307e\u305f\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u65e5\u672c\u8a9e\u306b\u30ed\u30fc\u30ab\u30e9\u30a4\u30ba\u3057\u305f\u3044\u6642\u3082\u3084\u308a\u306b\u304f\u3044\u3067\u3057\u3087\u3046\u3002\n\n\u3082\u3057 `double_arg()` \u304c `Err<std::num::ParseIntError>` \u306e\u3088\u3046\u306b\u30a8\u30e9\u30fc\u306e\u5024\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\u306a\u3089\u3001\u3053\u306e\u554f\u984c\u306f\u89e3\u6c7a\u3057\u307e\u3059\u3002\n\n\n### `Box<Error>` \u578b\u3092\u8fd4\u3059\n\n\u30a8\u30e9\u30fc\u306e\u5024\u3092\u76f4\u63a5\u8fd4\u3057\u305f\u3044\u3068\u601d\u3063\u305f\u6642\u306b\u554f\u984c\u306b\u306a\u308b\u306e\u306f\u3001`double_arg()` \u3067\u306f\uff12\u7a2e\u985e\u306e\u30a8\u30e9\u30fc\u304c\u8d77\u3053\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3053\u3068\u3067\u3059\u3002\u4e00\u65b9\u306f `Err<std::num::ParseIntError>` \u3067\u3059\u304c\u3001\u3082\u3046\u4e00\u65b9\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u304c\u306a\u304b\u3063\u305f\u6642\u306b `None` \u306b\u306a\u308b\u306e\u3067\u3001\u3044\u307e\u306f `Err<String>` \u578b\u306e\u5024\u3092\u4f5c\u3063\u3066\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u307e\u307e\u3067\u306f\u3001\u4e21\u8005\u3092\u4e00\u3064\u306b\u307e\u3068\u3081\u3089\u308c\u306a\u3044\u306a\u3044\u306e\u3067\u3001\u30ea\u30bf\u30fc\u30f3\u578b\u306e `Result<i32, \u4f55\u304b\u306e\u30a8\u30e9\u30fc\u578b>` \u306e `\u4f55\u304b\u306e\u30a8\u30e9\u30fc\u578b` \u306e\u90e8\u5206\u3092\u6c7a\u3081\u3089\u308c\u307e\u305b\u3093\u3002\n\n`ParseIntError` \u306f\u3001`std::error::Error` \u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u3053\u3067\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u304c\u306a\u304b\u3063\u305f\u6642\u306e\u30a8\u30e9\u30fc\u578b\u3092\u65b0\u305f\u306b\u5b9a\u7fa9\u3057\u3066\u3001\u540c\u3058\u3088\u3046\u306b `Error` \u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3057\u307e\u3057\u3087\u3046\u3002\u3053\u3046\u3059\u308c\u3070\u3001\u4e21\u8005\u3092\u4e00\u3064\u306b\u307e\u3068\u3081\u3089\u308c\u307e\u3059\u3002\n\n`NotEnoughArgsError` \u3068\u3044\u3046\u69cb\u9020\u4f53\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n```rust:src/main5.rs\nuse std::error;\nuse std::fmt;\n\n#[derive(Debug)]\nstruct NotEnoughArgError {}\n```\n\n\u3053\u306e\u3088\u3046\u306b `Debug` \u30c8\u30ec\u30a4\u30c8\u306e\u5b9f\u88c5\u3092\u81ea\u52d5\u5c0e\u51fa\uff08derive\uff09\u3057\u3066\u3044\u307e\u3059\u3002`Error` \u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3059\u308b\u6642\u306f `Debug` \u30c8\u30ec\u30a4\u30c8\u306e\u5b9f\u88c5\u304c\u5fc5\u9808\u306a\u306e\u3067\u3001\u81ea\u52d5\u5c0e\u51fa\u3059\u308b\u306e\u304c\u3044\u3044\u3067\u3057\u3087\u3046\u3002\n\n\u3055\u3089\u306b\u3001`std::fmt::Display` \u30c8\u30ec\u30a4\u30c8\u304c\u8981\u6c42\u3059\u308b `fmt()` \u95a2\u6570\u306e\u5b9f\u88c5\u3082\u5fc5\u8981\u3067\u3059\u3002\n\n```rust:src/main5.rs\nimpl fmt::Display for NotEnoughArgError {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, \"\u5f15\u6570\u304c\u4e0d\u8db3\u3057\u3066\u3044\u307e\u3059\")\n    }\n}\n```\n\n\u6700\u5f8c\u306b `std::error::Error` \u30c8\u30ec\u30a4\u30c8\u304c\u8981\u6c42\u3059\u308b `description()` \u95a2\u6570\u3068 `cause` \u95a2\u6570\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n```rust:src/main4.rs\nimpl error::Error for NotEnoughArgError {\n    fn description(&self) -> &str {\n        \"\u5f15\u6570\u304c\u4e0d\u8db3\u3057\u3066\u3044\u307e\u3059\"\n    }\n\n    fn cause(&self) -> Option<&error::Error> {\n        None\n    }\n}\n```\n\n\u3053\u308c\u3067 `NotEnoughArgsError` \u306e\u5b9f\u88c5\u306f OK \u3067\u3059\u3002\n\n\u3055\u3066\u3001`double_arg()` \u306e\u30ea\u30bf\u30fc\u30f3\u578b\u3092\u5909\u66f4\u3057\u3066 `Result<i32, error::Error>` \u306b\u3057\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u304c\u3001\u3053\u308c\u306f Rust \u3067\u306f\u3067\u304d\u307e\u305b\u3093\u3002Rust \u3067\u306f\u95a2\u6570\u306e\u623b\u308a\u5024\u306b\u3001\u30c8\u30ec\u30a4\u30c8\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u306e\u3067\u3059\u3002\n\n\u306a\u305c\u306a\u3089\u3001Rust\u306f\u95a2\u6570\u306e\u5f15\u6570\u3068\u623b\u308a\u5024\u3092\u30b3\u30fc\u30eb\u30b9\u30bf\u30c3\u30af\u306b\u76f4\u63a5\u7a4d\u307f\u307e\u3059\u304c\u3001\u305d\u306e\u305f\u3081\u306b\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u3001\u3053\u308c\u3089\u306e\u5024\u304c\u5fc5\u8981\u3068\u3059\u308b\u30e1\u30e2\u30ea\u306e\u30b5\u30a4\u30ba\u304c\u6c7a\u307e\u3063\u3066\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u306e\u3067\u3059\u3002\u578b\u3092 `Error` \u306b\u3057\u3066\u3057\u307e\u3046\u3068\u3001`Error` \u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u578b\u306a\u3089\u3069\u3093\u306a\u3082\u306e\u3067\u3082\u30b9\u30bf\u30c3\u30af\u306b\u7f6e\u3051\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u500b\u3005\u306e\u5177\u8c61\u578b\uff08\u5c06\u6765\u5b9f\u88c5\u3055\u308c\u308b\u3082\u306e\u3082\u542b\u3080\uff09\u306b\u3088\u3063\u3066\u3001\u5fc5\u8981\u3068\u3059\u308b\u30e1\u30e2\u30ea\u306e\u30b5\u30a4\u30ba\u304c\u7570\u306a\u308b\u306e\u3067\u3001\u305d\u308c\u3089\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5217\u6319\u3057\u3066\u3001\u30b5\u30a4\u30ba\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u306f\u4e0d\u53ef\u80fd\u3067\u3059\u3002\n\n\u3053\u308c\u3092\u89e3\u6c7a\u3059\u308b\u65b9\u6cd5\u306e\u3072\u3068\u3064\u306f\u30c8\u30ec\u30a4\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f7f\u3046\u3053\u3068\u3067\u3059\u3002\u3053\u308c\u306f\u3001\u5143\u306e\u30a8\u30e9\u30fc\u5024\u3092 `Box` \u3067\u5305\u3080\u3053\u3068\u3067\u4f5c\u308c\u307e\u3059\u3002\u5177\u4f53\u7684\u306b\u306f `Box::new(\u30a8\u30e9\u30fc\u5024)` \u3068\u3057\u307e\u3059\u3002\n\n```rust\nrusti=> .type Box::new(\"hoge\".parse::<i32>().unwrap_err())\n... = Box<core::num::ParseIntError>\nrusti=> .type Box::new(\"hoge\".parse::<i32>().unwrap_err()) as Box<std::error::Error>\n... = Box<std::error::Error>\n```\n\n\u5024\u3092 box \u5316\u3059\u308b\u3068\u3001\u305d\u306e\u5b9f\u4f53\u306f\u30b9\u30bf\u30c3\u30af\u3067\u306f\u306a\u304f\u3066\u3001\u30d2\u30fc\u30d7\u306b\u683c\u7d0d\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u305d\u3057\u3066\u30b9\u30bf\u30c3\u30af\u306b\u306f\u3001\u305d\u306e\u5b9f\u4f53\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u304c\u7a4d\u307e\u308c\u307e\u3059\u3002\u30dd\u30a4\u30f3\u30bf\u306a\u3089\u3001\u5fc5\u8981\u306a\u30e1\u30e2\u30ea\u30b5\u30a4\u30ba\u304c\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u6c7a\u307e\u308a\u307e\u3059\u306e\u3067\u5927\u4e08\u592b\u306a\u308f\u3051\u3067\u3059\u3002\n\n`double_arg()` \u306e\u30ea\u30bf\u30fc\u30f3\u578b\u3092 `Result<i32, Box<error::Error>>` \u306b\u5909\u66f4\u3057\u307e\u3059\u3002\n\n```rust:src/main5.rs\uff08\u7d9a\u304d\uff09\n\nuse std::env;\nuse std::error;\n\nfn double_arg(mut argv: env::Args) -> Result<i32, Box<error::Error>> {\n    let number_str = try!(argv.nth(1).ok_or(NotEnoughArgsError));\n    let n = try!(number_str.parse::<i32>());\n    Ok(2 * n)\n}\n\nfn main() {\n  // main2.rs \u3068\u540c\u3058\u3002\u7701\u7565\n}\n```\n\n\u3053\u308c\u3067 OK \u3067\u3059\u3002\n\n\u3042\u308c\uff1f\u3067\u3082\u3001`Err<NotEnoughArgError>` \u3084 `Err<num::ParseIntError>` \u578b\u306e\u5024\u3092 `try!()` \u306b\u6e21\u3057\u3066\u3044\u308b\u306e\u306b\u3001\u30ea\u30bf\u30fc\u30f3\u578b\u3068\u3057\u3066 `Result<i32, Box<error::Error>>` \u3068\u66f8\u3051\u308b\u306e\u306f\u4e0d\u601d\u8b70\u306b\u601d\u3044\u307e\u305b\u3093\u304b\uff1f\u3055\u3063\u304d\u3001box \u5316\u3059\u308b\u306b\u306f `Box::new(\u30a8\u30e9\u30fc\u5024)` \u3068\u3059\u308b\u3068\u8a00\u3063\u305f\u3070\u304b\u308a\u3067\u3059\u3002\u306a\u305c\u3001\u305d\u308c\u304c\u306a\u304f\u3066\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u308b\u306e\u3067\u3057\u3087\u3046\u3002\n\n\u7a2e\u3092\u660e\u304b\u3059\u3068 `try!()` \u30de\u30af\u30ed\u304c\u30a8\u30e9\u30fc\u306e\u578b\u3092\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002`try!()` \u30de\u30af\u30ed\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```rust\nmacro_rules! try {\n    ($e:expr) => (match $e {\n        Ok(val) => val,\n        Err(err) => return Err(::std::convert::From::from(err)),\n    });\n}\n```\n\n\u5358\u306b `Err<\u306a\u306b\u304b\u306e\u578b>` \u306e\u5024\u3092\u8fd4\u3059\u306e\u3067\u306f\u306a\u304f\u3001\u305d\u3053\u306b\u683c\u7d0d\u3055\u308c\u305f\u30a8\u30e9\u30fc\u306e\u5024\u306b `std::convert::From` \u30c8\u30ec\u30a4\u30c8\u306e `from()` \u3092\u9069\u7528\u3057\u3066\u304b\u3089\u3001`Err<E>` \u3067\u5305\u307f\u76f4\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e `from()` \u95a2\u6570\u306f\u3001\u3042\u308b\u578b\u306e\u5024\u3092\u3001\u5225\u306e\u578b\u306e\u5024\u3078\u5909\u63db\u3057\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a `From` \u5b9f\u88c5\u304c\u3042\u308a\u307e\u3059\u3002\n\n```rust\nimpl<'a, E: Error + 'a> From<E> for Box<Error + 'a>\n```\n\n\u3053\u306e\u5b9f\u88c5\u306b\u3088\u308a\u3001`Error` \u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3057\u305f\u5168\u3066\u306e\u578b\u306e\u5024\u306f\u3001\u30c8\u30ec\u30a4\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 `Box<Error>` \u3078\u5909\u63db\u3067\u304d\u308b\u306e\u3067\u3059\u3002\n\n\u3064\u307e\u308a `try!()` \u30de\u30af\u30ed\u306f\u3001\u4ee5\u4e0b\u306e\uff13\u3064\u3092\u62bd\u8c61\u5316\u3057\u3066\u3044\u307e\u3059\u3002\n\n1. \u5834\u5408\u5206\u3051\n2. \u5236\u5fa1\u30d5\u30ed\u30fc\n3. \u30a8\u30e9\u30fc\u5024\u306e\u578b\u5909\u63db\n\n`double_arg()` \u95a2\u6570\u306e\u30b3\u30fc\u30c9\u3092\u3001\u3082\u3046\u4e00\u5ea6\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n**\u30a8\u30e9\u30fc\u51e6\u7406\u306a\u3057\uff08\u30a8\u30e9\u30fc\u6642\u306b\u30af\u30e9\u30c3\u30b7\u30e5\u3059\u308b\uff09**\n\n```rust:src/main1.rs\nfn double_arg(mut argv: env::Args) -> i32 {\n    let arg1 = argv.nth(1).unwrap(); // \u30a8\u30e9\u30fc1\n    let n = arg1.parse::<i32>().unwrap(); // \u30a8\u30e9\u30fc2\n    2 * n\n}\n```\n\n**\u30a8\u30e9\u30fc\u51e6\u7406\u3042\u308a**\n\n```rust:src/main5.rs\nfn double_arg(mut argv: env::Args) -> Result<i32, Box<error::Error>> {\n    let arg1 = try!(argv.nth(1).ok_or(NotEnoughArgsError));\n    let n = try!(arg1.parse::<i32>());\n    Ok(2 * n)\n}\n```\n\n`try!()` \u304c\u30a8\u30e9\u30fc\u3092\u5909\u63db\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u3001\u4ee5\u524d\u306e\u4f8b\u306b\u3042\u3063\u305f `map()` \u304c\u4e0d\u8981\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u30d5\u30eb\u6a5f\u80fd\u306e\u30a8\u30e9\u30fc\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u306e\u305f\u3081\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\uff08\u4ed8\u968f\u3059\u308b\u30b3\u30fc\u30c9\uff09\u306f\u3001\u307b\u3068\u3093\u3069\u3042\u308a\u307e\u305b\u3093\uff01\n\n\n### `Box<Error>` \u306e\u4e9b\u7d30\u306a\u554f\u984c\n\n\u524d\u306e\u7bc0\u3067\u306f\u30c8\u30ec\u30a4\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 `Box<Error>` \u3092\u4f7f\u3044\u307e\u3057\u305f\u304c\u3001\u3053\u3053\u306b\u306f\u4e9b\u7d30\u306a\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002`Box` \u3067\u5305\u307e\u308c\u305f\u5024\u306f `Error` \u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u3053\u3068\u307e\u3067\u306f\u5206\u304b\u308b\u306e\u3067\u3059\u304c\u3001\u305d\u306e\u5177\u8c61\u578b\uff08`NotEnoughArgError` \u307e\u305f\u306f `ParseIntError`\uff09\u304c\u306a\u3093\u3067\u3042\u3063\u305f\u306e\u304b\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u306f\u308f\u304b\u3089\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u306e\u52d5\u4f5c\u3092\u3001\u578b\u6d88\u53bb(type erasure) \u3068\u547c\u3073\u307e\u3059\u3002\n\n\u4f8b\u3048\u3070\u3001\u547c\u3073\u51fa\u3057\u5143\u306e `main()` \u95a2\u6570\u306e\u5074\u3067\u3001\u30a8\u30e9\u30fc\u306e\u7a2e\u985e\u306b\u5fdc\u3058\u3066\u51e6\u7406\u3092\u5206\u5c90\u3055\u305b\u305f\u304f\u3066\u3082\u3001\u5358\u7d14\u306a\u5834\u5408\u5206\u3051\u3067\u306f\u5224\u65ad\u3067\u304d\u306a\u304f\u306a\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\n```rust:\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308b\nfn main() {\n    match double_arg(env::args()) {\n        Ok(n) => println!(\"{}\", n),\n        Err(Box(num::ParseIntError(..))) => {\n            println!(\"\u4e0d\u6b63\u306a\u6570\u5b57\u3067\u3059 \\\"{}\\\"\", env::args().nth(1).unwrap())\n        },\n        Err(err) => println!(\"\u30a8\u30e9\u30fc\uff1a{}\", err),\n    }\n}\n```\n\n\u65b9\u6cd5\u306f\u306a\u304f\u306f\u3042\u308a\u305b\u3093\u3002\u5b9f\u884c\u6642\u306e\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u3063\u3066\u3001\u5177\u8c61\u578b\u3078\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3059\u308b\u3053\u3068\u306f\u53ef\u80fd\u3067\u3059\u3002\n\n```rust:src/main6.rs\nfn main() {\n    match double_arg(env::args()) {\n        Ok(n) => println!(\"{}\", n),\n        Err(err) => {\n            match err.downcast_ref::<num::ParseIntError>() {\n                None => println!(\"\u30a8\u30e9\u30fc\uff1a{}\", err),\n                Some(..) => println!(\"\u4e0d\u6b63\u306a\u6570\u5b57\u3067\u3059 \\\"{}\\\"\", env::args().nth(1).unwrap()),\n            }\n        }\n    }\n}\n```\n\n\u8d77\u3053\u308a\u3046\u308b\u30a8\u30e9\u30fc\u306e\u578b\u4e00\u3064\u4e00\u3064\u306b\u3064\u3044\u3066\u3001\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3067\u304d\u305f\u304b\u306e\u5834\u5408\u5206\u3051\u3092\u3057\u3066\u3044\u304f\u306e\u306f\u3001\u5c11\u3057\u5197\u9577\u3067\u3059\u3002\n\n\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3057\u306a\u304b\u3063\u305f\u3068\u3057\u3066\u3082\u3001`String` \u3092\u8fd4\u3059\u3088\u308a\u306f\u826f\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u306a\u305c\u306a\u3089\u3001`Error` \u30c8\u30ec\u30a4\u30c8\u306b\u7528\u610f\u3055\u308c\u305f\u3001`description()` \u30e1\u30bd\u30c3\u30c9\u3084 `cause()` \u30e1\u30bd\u30c3\u30c9\u3067\u3001\u30a8\u30e9\u30fc\u306b\u3064\u3044\u3066\u306e\u3001\u3088\u308a\u8a73\u7d30\u306a\u60c5\u5831\u3092\u53d6\u5f97\u3067\u304d\u308b\u304b\u3089\u3067\u3059\u3002\n\n\n### \u5217\u6319\u578b\u3067\u72ec\u81ea\u306e\u30a8\u30e9\u30fc\u578b\u3092\u5b9a\u7fa9\u3059\u308b\n\n\u3053\u306e\u8a18\u4e8b\u306e\u7de0\u3081\u304f\u304f\u308a\u3068\u3057\u3066\u3001\u30c8\u30ec\u30a4\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f7f\u3063\u305f\u6642\u306e\u4e9b\u7d30\u306a\u554f\u984c\u3092\u89e3\u6c7a\u3057\u307e\u3057\u3087\u3046\u3002\uff12\u7a2e\u985e\u306e\u30a8\u30e9\u30fc\u306e\u5024\u3092\u5305\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u5217\u6319\u578b\u3092\u5b9a\u7fa9\u3057\u3066\u3001`Error` \u30c8\u30ec\u30a4\u30c8\u3068 `From` \u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3059\u308b\u306e\u3067\u3059\u3002\u5217\u6319\u578b\u306a\u3089\u3001\u30c8\u30ec\u30a4\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u9055\u3044\u3001\u578b\u6d88\u53bb\u304c\u8d77\u3053\u308a\u307e\u305b\u3093\u3002\n\n\u5217\u6319\u578b\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u3087\u3046\u3002\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\uff08CLI\uff09\u3067\u8d77\u3053\u308b\u30a8\u30e9\u30fc\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u540d\u524d\u306f `CliError` \u3068\u3057\u3066\u3044\u307e\u3059\u3002\u30d0\u30ea\u30a2\u30f3\u30c8\u3068\u3057\u3066\u3001`NotEnoughArgs` \u3068 `Parse(num::ParseIntError)` \u3092\u7528\u610f\u3057\u307e\u3059\u3002\n\n```rust:src/main7.rs\nuse std::error;\nuse std::fmt;\nuse std::num;\n\n#[derive(Debug)]\nenum CliError {\n    NotEnoughArgs,\n    Parse(num::ParseIntError),\n}\n```\n\n`Display` \u30c8\u30ec\u30a4\u30c8\u3068\u3001`Error` \u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306b\u5024\u306b\u5fdc\u3058\u3066\u3001\u5358\u7d14\u306b\u51e6\u7406\u3092\u5207\u308a\u66ff\u3048\u308c\u3070 OK \u3067\u3059\u3002\n\n```rust:src/main7.rs\nimpl fmt::Display for CliError {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        match *self {\n            CliError::NotEnoughArgs => write!(f, \"\u5f15\u6570\u304c\u4e0d\u8db3\u3057\u3066\u3044\u307e\u3059\"),\n            CliError::Parse(ref err) => write!(f, \"Parse error: {}\", err),\n        }\n    }\n}\n\nimpl error::Error for CliError {\n    fn description(&self) -> &str {\n        match *self {\n            CliError::NotEnoughArgs => \"\u5f15\u6570\u304c\u4e0d\u8db3\u3057\u3066\u3044\u307e\u3059\",\n            CliError::Parse(ref err) => err.description(),\n        }\n    }\n\n    fn cause(&self) -> Option<&error::Error> {\n        match *self {\n            CliError::NotEnoughArgs => None,\n            CliError::Parse(ref err) => Some(err),\n        }\n    }\n}\n```\n\n\u5f15\u6570\u304c\u306a\u304b\u3063\u305f\u6642\u306e\u30a8\u30e9\u30fc\u306f `CliError` \u3060\u3051\u3067\u5341\u5206\u8868\u73fe\u3067\u304d\u308b\u306e\u3067\u3001\u524d\u306e\u7bc0\u3067\u4f5c\u3063\u305f `NotEnhoughArgsError` \u306f\u3001\u3044\u3089\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\n`double_arg()` \u95a2\u6570\u3092\u4fee\u6b63\u3057\u307e\u3057\u3087\u3046\u3002\n\n```rust:src/main7.rs\nfn double_arg(mut argv: env::Args) -> Result<i32, CliError> {\n    let arg1 = try!(argv.nth(1).ok_or(CliError::NotEnoughArgs));\n    let n = try!(arg1.parse::<i32>().map_err(|e| CliError::Parse(e)));\n    Ok(2 * n)\n}\n```\n\n\u3053\u306e\u3088\u3046\u306b\u3001\u623b\u308a\u5024\u3092 `Result<i32, CliError>` \u306b\u5909\u66f4\u3057\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u3001`arg1.parse::<i32>()` \u304c `num::ParseIntError` \u3092\u8fd4\u3057\u305f\u3068\u304d\u306e\u305f\u3081\u306b\u3001`map_err()` \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306b\u3088\u308b\u5909\u63db\u304c\u5fc5\u8981\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\n\u3053\u308c\u3092\u53d6\u308a\u9664\u304f\u306e\u306f\u7c21\u5358\u3067\u3059\u3002`num::ParseIntError` \u304b\u3089 `CliError` \u3078\u306e\u5909\u63db\u3092\u3059\u308b `From` \u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3059\u308c\u3070\u3044\u3044\u306e\u3067\u3059\u3002\n\n```rust:src/main7.rs\nimpl From<num::ParseIntError> for CliError {\n    fn from(err: num::ParseIntError) -> CliError {\n        CliError::Parse(err)\n    }\n}\n```\n\n`double_arg()` \u95a2\u6570\u306f\u6700\u7d42\u7684\u306b\u3053\u3046\u306a\u308a\u307e\u3059\u3002\n\n```rust:src/main7.rs\nfn double_arg(mut argv: env::Args) -> Result<i32, CliError> {\n    let arg1 = try!(argv.nth(1).ok_or(CliError::NotEnoughArgs));\n    let n = try!(arg1.parse::<i32>());\n    Ok(2 * n)\n}\n```\n\n`main()` \u95a2\u6570\u306f\u4ee5\u524d\u306e\u307e\u307e\u3067\u3082\u52d5\u304d\u307e\u3059\u304c\u3001\u305b\u3063\u304b\u304f\u5217\u6319\u578b\u3092\u5c0e\u5165\u3057\u305f\u306e\u3067\u3001`double_arg()` \u95a2\u6570\u306e\u623b\u308a\u5024\u3092\u4f7f\u3063\u3066\u3001`CliError::Parse()` \u306e\u6642\u3082\u65e5\u672c\u8a9e\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u51fa\u3059\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002\n\n```rust:src/main7.rs\nfn main() {\n    match double_arg(env::args()) {\n        Ok(n) => println!(\"{}\", n),\n        Err(err @ CliError::NotEnoughArgs) => println!(\"\u30a8\u30e9\u30fc\uff1a{}\", err),\n        Err(CliError::Parse(..)) => {\n            println!(\"\u30a8\u30e9\u30fc\uff1a\u4e0d\u6b63\u306a\u6570\u5b57\u3067\u3059 \\\"{}\\\"\",\n                     env::args().nth(1).unwrap())\n        }\n    }\n}\n```\n\n\u3053\u308c\u3067\u5b8c\u6210\u3067\u3059\uff01\n\n\n## \u307e\u3068\u3081\n\n1. `Option<T>` \u3068 `Result<T, E>` \u306e\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306b\u3064\u3044\u3066\u3001\u3088\u304f\u5b66\u3093\u3067\u304a\u304d\u307e\u3057\u3087\u3046\u3002\u3053\u308c\u3089\u306e\u5024\u3092\u7c21\u6f54\u306b\u51e6\u7406\u3059\u308b\u305f\u3081\u306e\u9053\u5177\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u7279\u306b\u3088\u304f\u4f7f\u3046\u306e\u306f `and_then()`\u3001`map()`\u3001`unwrap_or()` \u3067\u3059\u3002\n2. `try!()` \u30de\u30af\u30ed\u3092\u4f7f\u3044\u3053\u306a\u3057\u307e\u3057\u3087\u3046\u3002\u3053\u306e\u30de\u30af\u30ed\u306f\uff13\u3064\u306e\u3053\u3068\u3092\u62bd\u8c61\u5316\u3057\u3066\u304f\u308c\u307e\u3059\uff1a\n   * \u5834\u5408\u5206\u3051\n   * \u5236\u5fa1\u30d5\u30ed\u30fc\uff08\u65e9\u671f\u30ea\u30bf\u30fc\u30f3\uff09\n   * \u30a8\u30e9\u30fc\u5024\u306e\u578b\u5909\u63db\n3. \u30a8\u30e9\u30fc\u578b\u306b\u6587\u5b57\u5217\u3092\u4f7f\u3046\u306e\u306f\u907f\u3051\u3066\u3001`Box<Error>` \u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u3001\u69cb\u9020\u4f53\u306b\u3088\u308b\u30a8\u30e9\u30fc\u578b\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u3087\u3046\u3002\n4. `Box<Error>` \u306e\u578b\u6d88\u53bb\u304c\u554f\u984c\u306b\u306a\u308b\u5834\u5408\u306f\u3001\u5217\u6319\u578b\u3092\u5b9a\u7fa9\u3057\u3066\u30a8\u30e9\u30fc\u306e\u5024\u3092\u30e9\u30c3\u30d7\u3057\u307e\u3057\u3087\u3046\u3002\n\n\uff13\u3068\uff14\u306f\u5fc5\u9808\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u7c21\u5358\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u66f8\u3044\u3066\u3044\u308b\u6642\u306f\u3001`Result<T, String>` \u578b\u3067\u5341\u5206\u306a\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002\n\n\u3053\u306e\u8a18\u4e8b\u3067\u89e3\u8aac\u3057\u305f\u5185\u5bb9\u3092\u3001\u3082\u3063\u3068\u8a73\u3057\u304f\u77e5\u308a\u305f\u304f\u306a\u3063\u305f\u3089\u3001\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\uff08\u65e5\u672c\u8a9e\u7ffb\u8a33\u7248\uff09\u306e [\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0](https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/error-handling.html) \u3092\u8aad\u3093\u3067\u304f\u3060\u3055\u3044\u3002\n\n\u3082\u3061\u308d\u3093\u3001\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u305d\u308c\u4ee5\u5916\u306e\u7ae0\u3082\u3001Rust \u3092\u4f7f\u3046\u4e0a\u3067\u7406\u89e3\u3057\u3066\u304a\u304f\u3079\u304d\u5185\u5bb9\u304c\u8a70\u307e\u3063\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u305c\u3072\u8aad\u3093\u3067\u3082\u3089\u3044\u305f\u3044\u3067\u3059\u3002\u7ffb\u8a33\u306e\u9032\u6357\u72b6\u6cc1\u3068\u3001\u7ffb\u8a33\u6e08\u307f\u30da\u30fc\u30b8\u30d8\u306e\u30ea\u30f3\u30af\u306f [\u3053\u3053](https://github.com/rust-lang-ja/the-rust-programming-language-ja/wiki/%E7%BF%BB%E8%A8%B3%E9%80%B2%E8%A1%8C%E7%8A%B6%E6%B3%81%E7%AE%A1%E7%90%86%E8%A1%A8) \u306b\u3042\u308a\u307e\u3059\u3002\n", "tags": ["rust"]}