{"context": " More than 1 year has passed since last update.\n\nTL;DR\n\n\u30bb\u30f3\u30b5\u5024\u306b\u30d5\u30a3\u30eb\u30bf\u304b\u3051\u305f\u3044\n\u305d\u308c\uff0cRxJava\u3067\u3082\u540c\u3058\u3053\u3068\u3067\u304d\u308b\u3088\n\nrx.Observable\u304b\u3089\u5024\u3092\u53d6\u308a\u51fa\u3059\u3053\u3068\u306b\u306a\u308b\u306e\u3067\uff0cflatMap\u3067\u8272\u3093\u306a\u51e6\u7406\u306b\u7e4b\u3052\u3089\u308c\u3066\u4fbf\u5229\n\n\nFilter\nAndroid\u3067\u52a0\u901f\u5ea6\u3092\u53d6\u5f97\u3059\u308b\u3068\u304d\uff0c\u5927\u91cf\u306b\u30ce\u30a4\u30ba\u62fe\u3063\u3066\u3059\u3054\u3044\u30ae\u30b6\u30ae\u30b6\u3057\u305f\u30b0\u30e9\u30d5\u306b\u306a\u3063 \u305f\u308a\u3059\u308b\uff0e\u305d\u3053\u3067\uff0c\u666e\u901a\u306f\u30bb\u30f3\u30b5\u5024\u306b\u30d5\u30a3\u30eb\u30bf\u304b\u3051\u3066\u30ce\u30a4\u30ba\u3092\u9664\u53bb\u3059\u308b\uff0e\u3088\u304f\u3042\u308b\u306e\u306fMedian Filter\uff0cLow Pass Filter\uff0cHigh Pass Filter\u306a\u3069\uff08\u53c2\u8003: SensorEvent | Android Developers\uff09\uff0e\n\nMedian Filter\n\u8907\u6570\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u305f\u30c7\u30fc\u30bf\u306e\u3046\u3061\uff0c\u4e2d\u592e\u5024\uff08median\uff09\u3092\u63a1\u7528\u3059\u308b\uff0e\u30b9\u30d1\u30a4\u30af\u30ce\u30a4\u30ba\u306b\u5f37\u3044\uff0e\n\nLow Pass Filter\n\u30c7\u30fc\u30bf\u304b\u3089\u9ad8\u5468\u6ce2\u6210\u5206\u3092\u53d6\u308a\u9664\u304d\uff0c\u5e73\u6ed1\u5316\u3059\u308b\uff0e\u3053\u307e\u304b\u3044\u30ae\u30b6\u30ae\u30b6\u3057\u305f\u30ce\u30a4\u30ba\u3092\u9664\u53bb\u3067\u304d\u308b\uff0e\n\nHigh Pass Filter\n\u30c7\u30fc\u30bf\u304b\u3089\u4f4e\u5468\u6ce2\u6210\u5206\u3092\u53d6\u308a\u9664\u304f\uff0e\u52a0\u901f\u5ea6\u306a\u3089\u91cd\u529b\u306e\u5f71\u97ff\u3092\u9664\u53bb\u3067\u304d\u308b\uff0e\n\nNaive implementation\n\u666e\u901a\u306b\u3084\u308b\u3068\u3053\u3093\u306a\u611f\u3058\uff08Low Pass Filter + Median Filter\uff09\uff0e\nprivate final List<Vector3d> samples = new ArrayList<>();\nprivate Vector3d acc;\n\npublic void onSensorChanged(SensorEvent event) {\n    samples.add(new Vector3d(event.values.clone());\n\n    if (samples.size() == SAMPLE_COUNT) {\n        final List<Float> xSamples = new ArrayList<>();\n        final List<Float> ySamples = new ArrayList<>();\n        final List<Float> zSamples = new ArrayList<>();\n\n        for (Vector3d sample : samples) {\n            xSamples.add(sample.x);\n            ySamples.add(sample.y);\n            zSamples.add(sample.z);\n        }\n\n        Collections.sort(xSamples);\n        Collections.sort(ySamples);\n        Collections.sort(zSamples);\n\n        float x = ALPHA * acc.x + xSamples.get(SAMPLE_COUNT / 2);\n        float y = ALPHA * acc.y + ySamples.get(SAMPLE_COUNT / 2);\n        float z = ALPHA * acc.z + zSamples.get(SAMPLE_COUNT / 2);\n\n        acc = new Vector3d(x, y, z);\n\n        samples.remove(0);\n    }\n}\n\npublic Vector3d getAcceleration() {\n    return acc;\n}\n\n\u5171\u901a\u306e\u30af\u30e9\u30b9\u3068\u304b\u5b9a\u6570\u306f\u4ee5\u4e0b:\nclass Vector3d {\n    private final float x, y, z;\n\n    public Vector3d(float[] values) {\n        this(values[0], values[1], values[2]);\n    }\n\n    public Vector3d(float x, float y, float z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public float getX() {\n        return x;\n    }\n\n    public float getY() {\n        return y;\n    }\n\n    public float getZ() {\n        return z;\n    }\n}\n\nprivate final float ALPHA = 0.8;\nprivate final int SAMPLE_COUNT = 10;\n\n\nImplementation with RxJava\nRxJava\u3067\u540c\u3058\u3053\u3068\u3092\u3084\u3063\u3066\u307f\u308b\uff0e\npublic Observable<Vector3d> observe() {\n    return getObservable()\n            .takeLast(SAMPLE_COUNT)\n            .toList()\n            .filter(vectors -> vectors.size() == SAMPLE_COUNT)\n            .map(vectors -> new Vector3d(\n                    getMedian(vectors, Vector3d::getX),\n                    getMedian(vectors, Vector3d::getY),\n                    getMedian(vectors, Vector3d::getZ)\n            ))\n            .scan((current, next) -> new Vector3d(\n                    lpf(current, next, Vector3d::getX),\n                    lpf(current, next, Vector3d::getY),\n                    lpf(current, next, Vector3d::getZ)\n            ));\n}\n\nprivate <T, R> R getMedian(List<T> list, Func1<T, R> func) {\n    return Observable.from(list).map(func).toSortedList()\n            .map(values -> values.get(SAMPLE_COUNT / 2)).toBlocking().single();\n}\n\nprivate <T, R extends Number> float lpf(T current, T next, Func1<T, R> func) {\n    return ALPHA * func.call(current).floatValue() + (1 - ALPHA) * func.call(next).floatValue();\n}\n\n// \u4ee5\u4e0b\uff0c\u30bb\u30f3\u30b5\u5024\u3092observable\u306b\u5909\u63db\u3059\u308b\u51e6\u7406\n\nprivate final List<Listener> listeners = new ArrayList();\n\nprivate Observable<Vector3d> getObservable() {\n    final PublishSubject<Vector3d> subject = PublishSubject.create();\n    final Listener listener = event -> subject.onNext(new Vector3d(event.values.clone()));\n    subject.doOnUnsubscribe(() -> listeners.remove(listener));\n    listeners.add(listener);\n    return subject;\n}\n\n@Override\npublic void onSensorChanged(SensorEvent event) {\n    for (Listener listener : mListeners) {\n        listener.onSensorChanged(event);\n    }\n}\n\nprivate interface Listener {\n    void onSensorChanged(SensorEvent event);\n}\n\n\u3042\u308c\uff0c\u3082\u3068\u3088\u308a\u8907\u96d1\u306b\u306a\u3063\u3066\u308b\uff1f \u30b3\u30fc\u30c9\u306e\u597d\u307f\u306f\u4eba\u305d\u308c\u305e\u308c\u304b\u3082\u3057\u308c\u306a\u3044\uff0e\n\u3082\u3046\u3061\u3087\u3044\u7dba\u9e97\u306b\u66f8\u304f\u65b9\u6cd5\u3042\u308b\u304b\u3082\uff1f\n\nRxJava\u3067\u5b9f\u88c5\u3059\u308b\u3053\u3068\u306b\u3088\u308b\u30e1\u30ea\u30c3\u30c8\nrx.Observable\u304c\u8fd4\u308b\u306e\u3067\uff0c\u305f\u3068\u3048\u3070\u672b\u5c3e\u306bmap\u3068\u304b\u30c1\u30a7\u30a4\u30f3\u3057\u3066\uff0c\u5024\u3092\u4fdd\u5b58\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u4e0a\u3067notifyPropertyChanged()\u3068\u304b\u547c\u3079\u3070Data Binding\u306b\u7e4b\u3052\u308b\u3053\u3068\u3082\u53ef\u80fd\uff0e\u3042\u3068\u306fRxAndroid\u306eobserveOn(AndroidSchedulers.mainThread())\u3092\u7e4b\u3052\u3066UI\u306b\u53cd\u6620\u3055\u305b\u305f\u308a\u3068\u304b\uff0e\n\u3053\u306erx.Observable\u304c\u8fd4\u308b\u3068\u3044\u3046\u306e\u304c\u30dd\u30a4\u30f3\u30c8\u3067\uff0crx.Observable\u3092\u4e16\u754c\u6a19\u6e96\u5171\u901a\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3068\u3057\u3066\u6271\u3046\u3053\u3068\u304c\u51fa\u6765\u308c\u3070\u3069\u3093\u306a\u51e6\u7406\u3067\u3082flatMap\u3067\u30c1\u30a7\u30a4\u30f3\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308b\uff0e\u305f\u3068\u3048\u3070\uff0cRetrofit\u3067API\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u4f5c\u3063\u3066\u304a\u3051\u3070\uff0c\u9069\u5f53\u306b\u6e9c\u3081\u8fbc\u3093\u3060\u30bb\u30f3\u30b5\u5024\u3092\u30b5\u30fc\u30d0\u306b\u9001\u308a\u3064\u3051\u308b \u307f\u305f\u3044\u306a\u306e\u3082\u3055\u304f\u3063\u3068\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u4fbf\u5229\uff0e\n// `client`\u306fRetrofit\u3067\u3044\u3044\u30ab\u30f3\u30b8\u306b\u5b9f\u88c5\u3057\u305fAPI\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\nobserve().buffer(100).flatMap(client::post);\n\n\nReferences\n\nSensorEvent | Android Developers\nReactiveX/RxJava\nReactiveX/RxAndroid\nData Binding Guide | Android Developers\nRetrofit\n\n## TL;DR\n\n* \u30bb\u30f3\u30b5\u5024\u306b\u30d5\u30a3\u30eb\u30bf\u304b\u3051\u305f\u3044\n* \u305d\u308c\uff0c[RxJava][rxjava]\u3067\u3082\u540c\u3058\u3053\u3068\u3067\u304d\u308b\u3088\n* `rx.Observable`\u304b\u3089\u5024\u3092\u53d6\u308a\u51fa\u3059\u3053\u3068\u306b\u306a\u308b\u306e\u3067\uff0c`flatMap`\u3067\u8272\u3093\u306a\u51e6\u7406\u306b\u7e4b\u3052\u3089\u308c\u3066\u4fbf\u5229\n\n## Filter\nAndroid\u3067\u52a0\u901f\u5ea6\u3092\u53d6\u5f97\u3059\u308b\u3068\u304d\uff0c\u5927\u91cf\u306b\u30ce\u30a4\u30ba\u62fe\u3063\u3066\u3059\u3054\u3044\u30ae\u30b6\u30ae\u30b6\u3057\u305f\u30b0\u30e9\u30d5\u306b\u306a\u3063 \u305f\u308a\u3059\u308b\uff0e\u305d\u3053\u3067\uff0c\u666e\u901a\u306f\u30bb\u30f3\u30b5\u5024\u306b\u30d5\u30a3\u30eb\u30bf\u304b\u3051\u3066\u30ce\u30a4\u30ba\u3092\u9664\u53bb\u3059\u308b\uff0e\u3088\u304f\u3042\u308b\u306e\u306fMedian Filter\uff0cLow Pass Filter\uff0cHigh Pass Filter\u306a\u3069\uff08\u53c2\u8003: [SensorEvent | Android Developers][sensorevent]\uff09\uff0e\n\n### Median Filter\n\u8907\u6570\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u305f\u30c7\u30fc\u30bf\u306e\u3046\u3061\uff0c\u4e2d\u592e\u5024\uff08median\uff09\u3092\u63a1\u7528\u3059\u308b\uff0e\u30b9\u30d1\u30a4\u30af\u30ce\u30a4\u30ba\u306b\u5f37\u3044\uff0e\n\n### Low Pass Filter\n\u30c7\u30fc\u30bf\u304b\u3089\u9ad8\u5468\u6ce2\u6210\u5206\u3092\u53d6\u308a\u9664\u304d\uff0c\u5e73\u6ed1\u5316\u3059\u308b\uff0e\u3053\u307e\u304b\u3044\u30ae\u30b6\u30ae\u30b6\u3057\u305f\u30ce\u30a4\u30ba\u3092\u9664\u53bb\u3067\u304d\u308b\uff0e\n\n### High Pass Filter\n\u30c7\u30fc\u30bf\u304b\u3089\u4f4e\u5468\u6ce2\u6210\u5206\u3092\u53d6\u308a\u9664\u304f\uff0e\u52a0\u901f\u5ea6\u306a\u3089\u91cd\u529b\u306e\u5f71\u97ff\u3092\u9664\u53bb\u3067\u304d\u308b\uff0e\n\n## Naive implementation\n\n\u666e\u901a\u306b\u3084\u308b\u3068\u3053\u3093\u306a\u611f\u3058\uff08Low Pass Filter + Median Filter\uff09\uff0e\n\n```java\nprivate final List<Vector3d> samples = new ArrayList<>();\nprivate Vector3d acc;\n\npublic void onSensorChanged(SensorEvent event) {\n    samples.add(new Vector3d(event.values.clone());\n\n    if (samples.size() == SAMPLE_COUNT) {\n        final List<Float> xSamples = new ArrayList<>();\n        final List<Float> ySamples = new ArrayList<>();\n        final List<Float> zSamples = new ArrayList<>();\n\n        for (Vector3d sample : samples) {\n            xSamples.add(sample.x);\n            ySamples.add(sample.y);\n            zSamples.add(sample.z);\n        }\n\n        Collections.sort(xSamples);\n        Collections.sort(ySamples);\n        Collections.sort(zSamples);\n\n        float x = ALPHA * acc.x + xSamples.get(SAMPLE_COUNT / 2);\n        float y = ALPHA * acc.y + ySamples.get(SAMPLE_COUNT / 2);\n        float z = ALPHA * acc.z + zSamples.get(SAMPLE_COUNT / 2);\n\n        acc = new Vector3d(x, y, z);\n\n        samples.remove(0);\n    }\n}\n\npublic Vector3d getAcceleration() {\n    return acc;\n}\n```\n\n\u5171\u901a\u306e\u30af\u30e9\u30b9\u3068\u304b\u5b9a\u6570\u306f\u4ee5\u4e0b:\n\n\n```java\nclass Vector3d {\n    private final float x, y, z;\n\n    public Vector3d(float[] values) {\n        this(values[0], values[1], values[2]);\n    }\n\n    public Vector3d(float x, float y, float z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public float getX() {\n        return x;\n    }\n\n    public float getY() {\n        return y;\n    }\n\n    public float getZ() {\n        return z;\n    }\n}\n\nprivate final float ALPHA = 0.8;\nprivate final int SAMPLE_COUNT = 10;\n```\n\n## Implementation with RxJava\n\n[**RxJava**][rxjava]\u3067\u540c\u3058\u3053\u3068\u3092\u3084\u3063\u3066\u307f\u308b\uff0e\n\n```java\npublic Observable<Vector3d> observe() {\n    return getObservable()\n            .takeLast(SAMPLE_COUNT)\n            .toList()\n            .filter(vectors -> vectors.size() == SAMPLE_COUNT)\n            .map(vectors -> new Vector3d(\n                    getMedian(vectors, Vector3d::getX),\n                    getMedian(vectors, Vector3d::getY),\n                    getMedian(vectors, Vector3d::getZ)\n            ))\n            .scan((current, next) -> new Vector3d(\n                    lpf(current, next, Vector3d::getX),\n                    lpf(current, next, Vector3d::getY),\n                    lpf(current, next, Vector3d::getZ)\n            ));\n}\n\nprivate <T, R> R getMedian(List<T> list, Func1<T, R> func) {\n    return Observable.from(list).map(func).toSortedList()\n            .map(values -> values.get(SAMPLE_COUNT / 2)).toBlocking().single();\n}\n\nprivate <T, R extends Number> float lpf(T current, T next, Func1<T, R> func) {\n    return ALPHA * func.call(current).floatValue() + (1 - ALPHA) * func.call(next).floatValue();\n}\n\n// \u4ee5\u4e0b\uff0c\u30bb\u30f3\u30b5\u5024\u3092observable\u306b\u5909\u63db\u3059\u308b\u51e6\u7406\n\nprivate final List<Listener> listeners = new ArrayList();\n\nprivate Observable<Vector3d> getObservable() {\n    final PublishSubject<Vector3d> subject = PublishSubject.create();\n    final Listener listener = event -> subject.onNext(new Vector3d(event.values.clone()));\n    subject.doOnUnsubscribe(() -> listeners.remove(listener));\n    listeners.add(listener);\n    return subject;\n}\n\n@Override\npublic void onSensorChanged(SensorEvent event) {\n    for (Listener listener : mListeners) {\n        listener.onSensorChanged(event);\n    }\n}\n\nprivate interface Listener {\n    void onSensorChanged(SensorEvent event);\n}\n```\n\n~~\u3042\u308c\uff0c\u3082\u3068\u3088\u308a\u8907\u96d1\u306b\u306a\u3063\u3066\u308b\uff1f~~ \u30b3\u30fc\u30c9\u306e\u597d\u307f\u306f\u4eba\u305d\u308c\u305e\u308c\u304b\u3082\u3057\u308c\u306a\u3044\uff0e\n\n\u3082\u3046\u3061\u3087\u3044\u7dba\u9e97\u306b\u66f8\u304f\u65b9\u6cd5\u3042\u308b\u304b\u3082\uff1f\n\n## RxJava\u3067\u5b9f\u88c5\u3059\u308b\u3053\u3068\u306b\u3088\u308b\u30e1\u30ea\u30c3\u30c8\n`rx.Observable`\u304c\u8fd4\u308b\u306e\u3067\uff0c\u305f\u3068\u3048\u3070\u672b\u5c3e\u306b`map`\u3068\u304b\u30c1\u30a7\u30a4\u30f3\u3057\u3066\uff0c\u5024\u3092\u4fdd\u5b58\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u4e0a\u3067`notifyPropertyChanged()`\u3068\u304b\u547c\u3079\u3070[Data Binding][databinding]\u306b\u7e4b\u3052\u308b\u3053\u3068\u3082\u53ef\u80fd\uff0e\u3042\u3068\u306f[**RxAndroid**][rxandroid]\u306e`observeOn(AndroidSchedulers.mainThread())`\u3092\u7e4b\u3052\u3066UI\u306b\u53cd\u6620\u3055\u305b\u305f\u308a\u3068\u304b\uff0e\n\n\u3053\u306e**`rx.Observable`\u304c\u8fd4\u308b**\u3068\u3044\u3046\u306e\u304c\u30dd\u30a4\u30f3\u30c8\u3067\uff0c`rx.Observable`\u3092\u4e16\u754c\u6a19\u6e96\u5171\u901a\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3068\u3057\u3066\u6271\u3046\u3053\u3068\u304c\u51fa\u6765\u308c\u3070\u3069\u3093\u306a\u51e6\u7406\u3067\u3082`flatMap`\u3067\u30c1\u30a7\u30a4\u30f3\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308b\uff0e\u305f\u3068\u3048\u3070\uff0c[Retrofit][retrofit]\u3067API\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u4f5c\u3063\u3066\u304a\u3051\u3070\uff0c\u9069\u5f53\u306b\u6e9c\u3081\u8fbc\u3093\u3060\u30bb\u30f3\u30b5\u5024\u3092\u30b5\u30fc\u30d0\u306b\u9001\u308a\u3064\u3051\u308b \u307f\u305f\u3044\u306a\u306e\u3082\u3055\u304f\u3063\u3068\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u4fbf\u5229\uff0e\n\n```java\n// `client`\u306fRetrofit\u3067\u3044\u3044\u30ab\u30f3\u30b8\u306b\u5b9f\u88c5\u3057\u305fAPI\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\nobserve().buffer(100).flatMap(client::post);\n```\n\n## References\n\n* [SensorEvent | Android Developers][sensorevent]\n* [ReactiveX/RxJava][rxjava]\n* [ReactiveX/RxAndroid][rxandroid]\n* [Data Binding Guide | Android Developers][databinding]\n* [Retrofit][retrofit]\n\n[sensorevent]: http://developer.android.com/reference/android/hardware/SensorEvent.html\n[rxjava]: https://github.com/ReactiveX/RxJava\n[rxandroid]: https://github.com/ReactiveX/RxAndroid\n[databinding]: http://developer.android.com/tools/data-binding/guide.html\n[retrofit]: http://square.github.io/retrofit/\n", "tags": ["Android", "RxJava"]}