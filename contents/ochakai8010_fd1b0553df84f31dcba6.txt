{"tags": ["yhpg1.0"], "context": " More than 1 year has passed since last update.\nSource.cpp\n#include \"Header.h\"\n\nstruct PlaceList{\n    std::string nowPlace;\n    std::string oldPlace;\n    std::string leftPlace;\n    std::string rightPlace;\n};\n\nPlaceList placeList[PLACEPATERN] = {\n    {\"A\",\"B\",\"D\",\"C\",},\n    {\"B\",\"C\",\"E\",\"A\",},\n    {\"C\",\"A\",\"F\",\"B\",},\n    {\"A\",\"C\",\"B\",\"D\",},\n    {\"C\",\"B\",\"A\",\"F\",},\n    {\"B\",\"A\",\"C\",\"E\",},\n\n    {\"A\",\"D\",\"C\",\"B\",},\n    {\"B\",\"E\",\"A\",\"C\",},\n    {\"C\",\"F\",\"B\",\"A\",},\n    {\"D\",\"A\",\"E\",\"F\",},\n    {\"E\",\"B\",\"F\",\"D\",},\n    {\"F\",\"C\",\"D\",\"E\",},\n\n    {\"D\",\"E\",\"F\",\"A\",},\n    {\"E\",\"F\",\"D\",\"B\",},\n    {\"F\",\"D\",\"E\",\"C\",},\n    {\"D\",\"F\",\"A\",\"E\",},\n    {\"F\",\"E\",\"C\",\"D\",},\n    {\"E\",\"D\",\"B\",\"F\",},\n};\n\nvoid Yjiro::initPlaceInfo()\n{\n    m_nowPlace = \"A\";\n    m_oldPlace = \"B\";\n}\n\nvoid Yjiro::moveBack()\n{\n    std::swap(m_oldPlace, m_nowPlace);\n}\n\nvoid Yjiro::moveLeft(const unsigned int& placeInfoNumber)\n{\n    m_oldPlace = m_nowPlace;\n    m_nowPlace = placeList[placeInfoNumber].leftPlace;\n}\n\nvoid Yjiro::moveRight(const unsigned int& placeInfoNumber)\n{\n    m_oldPlace = m_nowPlace;\n    m_nowPlace = placeList[placeInfoNumber].rightPlace;\n}\n\nconst unsigned int Yjiro::getPlaceInfoNumber()\n{\n    for(int i=0; i<PLACEPATERN; i++){\n        if((placeList[i].nowPlace == m_nowPlace) && placeList[i].oldPlace == m_oldPlace)\n            return i;\n    }\n}\n\nvoid Yjiro::move(const char& input)\n{\n    if(input == 'b'){\n        moveBack();\n        return;\n    }\n    const unsigned int placeInfoNumber = getPlaceInfoNumber();\n    input == 'r' ? moveRight(placeInfoNumber) : moveLeft(placeInfoNumber);\n}\n\nconst std::string Yjiro::solve(const std::string& input)\n{\n    initPlaceInfo();\n    std::string result = m_nowPlace;\n    for(int i=0; i<input.size(); i++){\n        move(input.at(i));\n        result += m_nowPlace; \n    }\n    return result;\n}\n\nvoid Yjiro::test(const std::string& input, const std::string& output)\n{\n    std::string result = solve(input);\n    std::cout << output << \":\" << result << std::endl;\n    if(result == output){\n        std::cout << \"test is OK!\" << std::endl;\n    }else{\n        std::cout << \"test is NG!\" << std::endl;\n    }\n}\n\nint main()\n{\n    Yjiro yjiro;\n    yjiro.test(\"b\", \"AB\");\n    yjiro.test(\"l\", \"AD\");\n    yjiro.test(\"r\", \"AC\");\n    yjiro.test(\"bbb\", \"ABAB\");\n    yjiro.test(\"rrr\", \"ACBA\");\n    yjiro.test(\"blll\", \"ABCAB\");\n    yjiro.test(\"llll\", \"ADEBA\");\n    yjiro.test(\"rbrl\", \"ACADE\");\n    yjiro.test(\"brrrr\", \"ABEDAB\");\n    yjiro.test(\"llrrr\", \"ADEFDE\");\n    yjiro.test(\"lrlll\", \"ADFEDF\");\n    yjiro.test(\"lrrrr\", \"ADFCAD\");\n    yjiro.test(\"rllll\", \"ACFDAC\");\n    yjiro.test(\"blrrrr\", \"ABCFEBC\");\n    yjiro.test(\"brllll\", \"ABEFCBE\");\n    yjiro.test(\"bbrllrrr\", \"ABACFDEFD\");\n    yjiro.test(\"rrrrblll\", \"ACBACABCA\");\n    yjiro.test(\"llrlrrbrb\", \"ADEFCADABA\");\n    yjiro.test(\"rrrbrllrr\", \"ACBABEFCAD\");\n    yjiro.test(\"llrllblrll\", \"ADEFCBCADEB\");\n    yjiro.test(\"lrrlllrbrl\", \"ADFCBEFDFCB\");\n    yjiro.test(\"lllrbrrlbrl\", \"ADEBCBACFCAB\");\n    yjiro.test(\"rrrrrrlrbrl\", \"ACBACBADFDEB\");\n    yjiro.test(\"lbrbbrbrbbrr\", \"ADABABEBCBCFE\");\n    yjiro.test(\"rrrrlbrblllr\", \"ACBACFCACFDAB\");\n    yjiro.test(\"lbbrblrlrlbll\", \"ADADFDABCFDFED\");\n    yjiro.test(\"rrbbrlrlrblrl\", \"ACBCBADFEBEFDA\");\n    yjiro.test(\"blrllblbrrrrll\", \"ABCFDADEDABEDFE\");\n    yjiro.test(\"blrllrlbllrrbr\", \"ABCFDABCBEFDEDA\");\n    yjiro.test(\"lbrbbrllllrblrr\", \"ADABABEFCBEDEBCF\");\n    yjiro.test(\"rrrrbllrlrbrbrr\", \"ACBACABCFDEDADFC\");\n    return 0;\n}\n\n\n\n\nHeader.h\n#ifndef _HEADER_H\n#define _HEADER_H\n\n#include <string>\n#include <iostream>\n\n#define PLACEPATERN 18\n\nclass Yjiro\n{\npublic:\n    void test(const std::string& input, const std::string& output);\nprivate:\n    const std::string solve(const std::string& input);\n    void initPlaceInfo();\n    const unsigned int getPlaceInfoNumber();\n    void move(const char& input);\n    void moveBack();\n    void moveLeft(const unsigned int& placeInfoNumber);\n    void moveRight(const unsigned int& placeInfoNumber);\n    std::string m_nowPlace;\n    std::string m_oldPlace;\n};\n\n#endif\n\n\n\n```Source.cpp\n#include \"Header.h\"\n\nstruct PlaceList{\n\tstd::string nowPlace;\n\tstd::string oldPlace;\n\tstd::string leftPlace;\n\tstd::string rightPlace;\n};\n\nPlaceList placeList[PLACEPATERN] = {\n\t{\"A\",\"B\",\"D\",\"C\",},\n\t{\"B\",\"C\",\"E\",\"A\",},\n\t{\"C\",\"A\",\"F\",\"B\",},\n\t{\"A\",\"C\",\"B\",\"D\",},\n\t{\"C\",\"B\",\"A\",\"F\",},\n\t{\"B\",\"A\",\"C\",\"E\",},\n\n\t{\"A\",\"D\",\"C\",\"B\",},\n\t{\"B\",\"E\",\"A\",\"C\",},\n\t{\"C\",\"F\",\"B\",\"A\",},\n\t{\"D\",\"A\",\"E\",\"F\",},\n\t{\"E\",\"B\",\"F\",\"D\",},\n\t{\"F\",\"C\",\"D\",\"E\",},\n\n\t{\"D\",\"E\",\"F\",\"A\",},\n\t{\"E\",\"F\",\"D\",\"B\",},\n\t{\"F\",\"D\",\"E\",\"C\",},\n\t{\"D\",\"F\",\"A\",\"E\",},\n\t{\"F\",\"E\",\"C\",\"D\",},\n\t{\"E\",\"D\",\"B\",\"F\",},\n};\n\nvoid Yjiro::initPlaceInfo()\n{\n\tm_nowPlace = \"A\";\n\tm_oldPlace = \"B\";\n}\n\nvoid Yjiro::moveBack()\n{\n\tstd::swap(m_oldPlace, m_nowPlace);\n}\n\nvoid Yjiro::moveLeft(const unsigned int& placeInfoNumber)\n{\n\tm_oldPlace = m_nowPlace;\n\tm_nowPlace = placeList[placeInfoNumber].leftPlace;\n}\n\nvoid Yjiro::moveRight(const unsigned int& placeInfoNumber)\n{\n\tm_oldPlace = m_nowPlace;\n\tm_nowPlace = placeList[placeInfoNumber].rightPlace;\n}\n\nconst unsigned int Yjiro::getPlaceInfoNumber()\n{\n\tfor(int i=0; i<PLACEPATERN; i++){\n\t\tif((placeList[i].nowPlace == m_nowPlace) && placeList[i].oldPlace == m_oldPlace)\n\t\t\treturn i;\n\t}\n}\n\nvoid Yjiro::move(const char& input)\n{\n\tif(input == 'b'){\n\t\tmoveBack();\n\t\treturn;\n\t}\n\tconst unsigned int placeInfoNumber = getPlaceInfoNumber();\n\tinput == 'r' ? moveRight(placeInfoNumber) : moveLeft(placeInfoNumber);\n}\n\nconst std::string Yjiro::solve(const std::string& input)\n{\n\tinitPlaceInfo();\n\tstd::string result = m_nowPlace;\n\tfor(int i=0; i<input.size(); i++){\n\t\tmove(input.at(i));\n\t\tresult += m_nowPlace; \n\t}\n\treturn result;\n}\n\nvoid Yjiro::test(const std::string& input, const std::string& output)\n{\n\tstd::string result = solve(input);\n\tstd::cout << output << \":\" << result << std::endl;\n\tif(result == output){\n\t\tstd::cout << \"test is OK!\" << std::endl;\n\t}else{\n\t\tstd::cout << \"test is NG!\" << std::endl;\n\t}\n}\n\nint main()\n{\n\tYjiro yjiro;\n\tyjiro.test(\"b\", \"AB\");\n\tyjiro.test(\"l\", \"AD\");\n\tyjiro.test(\"r\", \"AC\");\n\tyjiro.test(\"bbb\", \"ABAB\");\n\tyjiro.test(\"rrr\", \"ACBA\");\n\tyjiro.test(\"blll\", \"ABCAB\");\n\tyjiro.test(\"llll\", \"ADEBA\");\n\tyjiro.test(\"rbrl\", \"ACADE\");\n\tyjiro.test(\"brrrr\", \"ABEDAB\");\n\tyjiro.test(\"llrrr\", \"ADEFDE\");\n\tyjiro.test(\"lrlll\", \"ADFEDF\");\n\tyjiro.test(\"lrrrr\", \"ADFCAD\");\n\tyjiro.test(\"rllll\", \"ACFDAC\");\n\tyjiro.test(\"blrrrr\", \"ABCFEBC\");\n\tyjiro.test(\"brllll\", \"ABEFCBE\");\n\tyjiro.test(\"bbrllrrr\", \"ABACFDEFD\");\n\tyjiro.test(\"rrrrblll\", \"ACBACABCA\");\n\tyjiro.test(\"llrlrrbrb\", \"ADEFCADABA\");\n\tyjiro.test(\"rrrbrllrr\", \"ACBABEFCAD\");\n\tyjiro.test(\"llrllblrll\", \"ADEFCBCADEB\");\n\tyjiro.test(\"lrrlllrbrl\", \"ADFCBEFDFCB\");\n\tyjiro.test(\"lllrbrrlbrl\", \"ADEBCBACFCAB\");\n\tyjiro.test(\"rrrrrrlrbrl\", \"ACBACBADFDEB\");\n\tyjiro.test(\"lbrbbrbrbbrr\", \"ADABABEBCBCFE\");\n\tyjiro.test(\"rrrrlbrblllr\", \"ACBACFCACFDAB\");\n\tyjiro.test(\"lbbrblrlrlbll\", \"ADADFDABCFDFED\");\n\tyjiro.test(\"rrbbrlrlrblrl\", \"ACBCBADFEBEFDA\");\n\tyjiro.test(\"blrllblbrrrrll\", \"ABCFDADEDABEDFE\");\n\tyjiro.test(\"blrllrlbllrrbr\", \"ABCFDABCBEFDEDA\");\n\tyjiro.test(\"lbrbbrllllrblrr\", \"ADABABEFCBEDEBCF\");\n\tyjiro.test(\"rrrrbllrlrbrbrr\", \"ACBACABCFDEDADFC\");\n\treturn 0;\n}\n\n```\n\n```Header.h\n#ifndef _HEADER_H\n#define _HEADER_H\n\n#include <string>\n#include <iostream>\n\n#define PLACEPATERN 18\n\nclass Yjiro\n{\npublic:\n\tvoid test(const std::string& input, const std::string& output);\nprivate:\n\tconst std::string solve(const std::string& input);\n\tvoid initPlaceInfo();\n\tconst unsigned int getPlaceInfoNumber();\n\tvoid move(const char& input);\n\tvoid moveBack();\n\tvoid moveLeft(const unsigned int& placeInfoNumber);\n\tvoid moveRight(const unsigned int& placeInfoNumber);\n\tstd::string m_nowPlace;\n\tstd::string m_oldPlace;\n};\n\n#endif\n```\n"}