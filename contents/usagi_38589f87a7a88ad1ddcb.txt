{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\n\u300c\u305b\u3093\u3071\u3044\uff01 FLIF \u3063\u3066\u3044\u3046\u306e\u3059\u3054\u3044\u3089\u3057\u3044\u3067\u3059\u306d\uff01\uff01\uff01\uff01\u3046\u3061\u3067\u4f5c\u3063\u3066\u308b\u30a2\u30d7\u30ea\u3067\u6271\u3063\u3066\u3044\u308b PNG \u3084 JPG \u306e\u5185\u90e8\u30ad\u30e3\u30c3\u30b7\u30e5\u3082\u3053\u306e FLIF \u5f62\u5f0f\u306b\u30c8\u30e9\u30f3\u30b9\u30b3\u30fc\u30c9\u3057\u305f\u3089\u30fb\u30fb\u30fb\u300d\n\u3063\u300eLGPLv3\u300f\n\u305d\u306e\u30d7\u30ed\u30c0\u30af\u30c8\u3067\u306f LGPLv3 \u30e9\u30a4\u30bb\u30f3\u30b9\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3092\u4f7f\u3063\u3061\u3083\u3046\u3068\u3044\u308d\u3044\u308d\u3068\u554f\u984c\u304c\u8d77\u304d\u308b\u304b\u3089\u3060\u3081\u30fc\u3001\u3067\u3082 webp \u306a\u3089\u4f7f\u3063\u3066\u307f\u3066\u3082\u30a4\u30a4\u30e8\u30fd(\u00b4\u30fc\uff40)\u30ce\n\u305d\u3046\u3044\u3046\u308f\u3051\u3067\u305b\u3093\u3071\u3044\u306f\u4eca\u65e5\u3082\u3053\u305d\u3053\u305d\u5b9a\u6642\u9000\u793eDAY\u3067\u30aa\u30b7\u30b4\u30c8\u3092\u7d42\u308f\u3063\u305f\u5f8c\u306b\u3053\u3063\u305d\u308a\u3068 Qiita \u306b\u8a18\u4e8b\u3092\u66f8\u304f\u306e\u3067\u3042\u3063\u305f\u3002\uff08\u20200\uff09\n\nCMake \u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092 libwebp \u306b ExternalProject \u3067\u5bfe\u5fdc\u3057\u3088\u3046\n\u3055\u3063\u305d\u304f\u2193\u3053\u3093\u306a\u306e\u3092\u66f8\u3044\u3066 CMakeLists.txt \u304b\u3089 include \u3057\u3066 ExternalProject \u3067\u7ba1\u7406\u3057\u3066\u307f\u3088\u3046:\n\nlibwebp.cmake\n\ncmake_minimum_required( VERSION 3.2 )\n\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR}/include)\nlink_directories(${CMAKE_CURRENT_BINARY_DIR}/lib)\n\ninclude( ExternalProject )\n\nExternalProject_Add( external_libwebp\n  # https://github.com/webmproject/libwebp\n  # http://www.webmproject.org/\n  GIT_REPOSITORY    git@github.com:webmproject/libwebp.git\n  # v0.5.0 \u30bf\u30b0\u306a\u3069\u306b\u306f cmake \u304c\u7121\u304f\u3066\u5c11\u3057\u624b\u9593\u304c\u5897\u3048\u308b\u306e\u3067\u3068\u308a\u3042\u3048\u305a master\n  GIT_TAG           master\n  # WEBP \u7cfb\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f webp \u30ea\u30dd\u30b8\u30c8\u30ea\u30fc\u306e CMakeLists.txt \u5192\u982d\u306b\u308f\u304b\u308a\u3084\u3059\u304f\u6574\u7406\u3055\u308c\u3066\u3044\u308b\u3088\n  # \u304a\u307e\u3051\u30c4\u30fc\u30eb\u306e cwebp, dwebp \u30b3\u30de\u30f3\u30c9\u306e\u30d3\u30eb\u30c9\u3092 on \u306b\u3059\u308b\u5834\u5408\u306f libjpeg \u304c\u5fc5\u8981\u306b\u306a\u308b\u306e\u3067\u3068\u308a\u3042\u3048\u305a off \u306b\u3057\u3066\u304a\u304f\u3088\n  CMAKE_ARGS        -DWEBP_BUILD_CWEBP=off\n                    -DWEBP_BUILD_DWEBP=off\n                    -DWEBP_EXPERIMENTAL_FEATURES=on\n                    -DWEBP_FORCE_ALIGNED=on\n                    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}\n                    -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}\n                    -DCMAKE_COMPILER_IS_GNUCXX=${CMAKE_COMPILER_IS_GNUCXX}\n                    -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}\n                    -DCMAKE_C_FLAGS=${GL_BINDING_C_FLAGS}\n  # cmake -> ninja -> install \u30bf\u30fc\u30b2\u30c3\u30c8\u306a\u3069\u3057\u305f\u3044\u3068\u3053\u308d\u3060\u3051\u3069\u30ab\u30b9\u30bf\u30e0\u30d7\u30ea\u30d5\u30a3\u30c3\u30af\u30b9\u306e\u6319\u52d5\u304c\u304a\u304b\u3057\u3044\u3088\u3046\u306a\u306e\u3067 install \u3060\u3051\u3054\u308a\u3054\u308a\u66f8\u3044\u3066\u304a\u304f\n  INSTALL_COMMAND\n    COMMAND ${CMAKE_COMMAND} -E copy_directory    ${CMAKE_CURRENT_BINARY_DIR}/external/libwebp/src/external_libwebp/src/webp ${CMAKE_CURRENT_BINARY_DIR}/include/webp\n    COMMAND ${CMAKE_COMMAND} -E copy_directory    ${CMAKE_CURRENT_BINARY_DIR}/external/libwebp/src/external_libwebp-build/include ${CMAKE_CURRENT_BINARY_DIR}/include\n    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_CURRENT_BINARY_DIR}/external/libwebp/src/external_libwebp-build/libwebp.a ${CMAKE_CURRENT_BINARY_DIR}/lib/libwebp.a\n    # cwebp, dwebp \u3082\u30d3\u30eb\u30c9\u3059\u308b\u6642\u306f\u4ed8\u3051\u308b\n    #COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_CURRENT_BINARY_DIR}/external/libwebp/src/external_libwebp-build/cwebp.exe ${CMAKE_CURRENT_BINARY_DIR}/bin/cwebp.exe\n    #COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_CURRENT_BINARY_DIR}/external/libwebp/src/external_libwebp-build/dwebp.exe ${CMAKE_CURRENT_BINARY_DIR}/bin/dwebp.exe\n)\n\n\u3042\u3068\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3092\u4f7f\u3044\u305f\u3044\u30a2\u30d7\u30ea\u306e add_dependencies \u306b external_libwebp \u3001 target_link_libraries \u306b webp \u3092\u8ffd\u52a0\u3059\u308c\u3070OK\u3002\n\nwebp \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u3092 C++ \u30bd\u30fc\u30b9\u306e\u30a2\u30d7\u30ea\u3067\u751f\u6210\u3057\u3066\u307f\u308b\n#include <webp/decode.h>\n#include <webp/encode.h>\n#include <webp/types.h>\n\n#include <cstdint>\n#include <iostream>\n#include <fstream>\n#include <vector>\n\nauto main() -> int\n{\n  // \u30e1\u30e2\u30ea\u30fc\u306b 256 pixels * 256 pixels * 4 elements \u306a\u5909\u63db\u5143\u306e\u5165\u529b\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u9069\u5f53\u306b\u4f5c\u308b\u3088\n  constexpr auto in_width = 256;\n  constexpr auto in_height = 256;\n  constexpr auto in_elements = 4;\n  std::vector< std::uint8_t > in( in_width * in_height * in_elements );\n\n  for ( int y = 0 ; y < in_height; ++y )\n    for ( int x = 0 ; x < in_width; ++x )\n    {\n      in[ y * in_width * in_elements + x * in_elements + 0] = x;\n      in[ y * in_width * in_elements + x * in_elements + 1] = 0;\n      in[ y * in_width * in_elements + x * in_elements + 2] = y;\n      in[ y * in_width * in_elements + x * in_elements + 3] = 255;\n    }\n\n  // webp \u5f62\u5f0f\u306b\u5909\u63db\u3057\u305f\u7d50\u679c\u3092\u3053\u308c\u306b\u5165\u308c\u308b\u3088\n  std::uint8_t* out_data = nullptr;\n  auto out_size = 0ull;\n\n  constexpr auto in_stride = in_width * in_elements;\n\n  const auto write_file = [&]( const auto& filename )\n  {\n    std::ofstream o( filename, std::ios::binary );\n    o.write( reinterpret_cast< const char* >( out_data ), out_size );\n    if ( o.bad() )\n      return EXIT_FAILURE;\n  };\n\n#ifndef LOSSLESS\n\n  // \u30ed\u30c3\u30b7\u30fc\u3067\u6700\u9ad8\u54c1\u8cea\u306e webp \u306b\u5909\u63db\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\u3057\u3066\u307f\u308b\n  {\n    constexpr auto out_quality_factor = 100.0f;\n    out_size = WebPEncodeRGBA\n    ( in.data(), in_width, in_height, in_stride\n    , out_quality_factor\n    , &out_data\n    );\n    write_file( \"lossy-100.webp\" );\n  }\n\n#else\n\n  // \u30ed\u30b9\u30ec\u30b9\u3067\u6700\u9ad8\u54c1\u8cea\u306e webp \u306b\u5909\u63db\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\u3057\u3066\u307f\u308b\n  {\n    out_size = WebPEncodeLosslessRGBA\n    ( in.data(), in_width, in_height, in_stride\n    , &out_data\n    );\n    write_file( \"lossless.webp\" );\n  }\n\n#endif\n\n}\n\n\nwebp \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u3092 C++ \u30a2\u30d7\u30ea\u3067\u8aad\u307f\u51fa\u3057\u3066\u307f\u308b\n#include <webp/decode.h>\n#include <webp/encode.h>\n#include <webp/types.h>\n\n#include <cstdint>\n#include <iostream>\n#include <fstream>\n#include <vector>\n\nauto main() -> int\n{\n  std::ifstream i( \"hoge.lossless.webp\", std::ios::binary );\n  std::vector< std::uint8_t > in\n  ( ( std::istreambuf_iterator< char >( i ) )\n  , ( std::istreambuf_iterator< char >(   ) )\n  );\n\n  // \u5bfe\u8c61\u306e\u30d0\u30a4\u30ca\u30ea\u30fc\u30c7\u30fc\u30bf\u304c webp \u5f62\u5f0f\u304b\u78ba\u8a8d\uff08\u20201\uff09\n  if ( WebPGetInfo( in.data(), in.size(), nullptr, nullptr ) == 0 )\n    return EXIT_FAILURE;\n\n  int width    = 0;\n  int height   = 0;\n\n  const auto deleter = []( auto* p ){ free( p ); };\n  const std::unique_ptr< std::uint8_t, decltype( deleter ) > decoded_data\n  ( WebPDecodeRGBA( in.data(), in.size(), &width, &height )\n  , deleter\n  );\n);\n\n  /* \u8aad\u307f\u3060\u3057\u305f\u753b\u50cf\u3067\u304a\u597d\u307f\u306e\u51e6\u7406\u3092\u3069\u3046\u305e */\n}\n\n\n\u3060\u305d\u304f\nlibwebp \u306f\u4ed6\u306b\u3082\u6271\u3044\u6613\u3044 API \u304c\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u697d\u3067\u3088\u3044\u3067\u3059\u3002\uff08\u2020Reference\uff09\n\u3061\u306a\u307f\u306b\u3001\u4eca\u56de\u751f\u6210\u3057\u305f webp \u5f62\u5f0f\u306e\u753b\u50cf\u306e\u5143\u306b\u3057\u305f\u30c7\u30fc\u30bf\u3068\u540c\u3058\u3082\u306e\u3092 paint.net \u3067\u751f\u6210\u3057\u3066\u307f\u305f\u3068\u3053\u308d\u3001\u4ee5\u4e0b\u306e\u69d8\u306a\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u306e\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u3057\u305f\u3002\n\n\n\ntype\nbits/elem.\nquality\nfile size[KB]\n\n\n\n\nBMP\n32\nn/a\n193\n\n\nBMP\n8\nn/a\n66\n\n\nPNG\n32\nn/a\n42\n\n\nPNG\n24\nn/a\n40\n\n\nPNG\n8\nn/a\n20\n\n\nJPG\n24\n100\n15\n\n\nDDS\n\nDXT1\n33\n\n\nWEBP\n32\n100\n3\n\n\nWEBP\n32\nLossless\n1\n\n\n\nwebp \u3055\u3093\u512a\u79c0\u30fd(\u00b4\u30fc\uff40)\u30ce\n\n\u8a3b\n\n\u20200 : \u8a18\u4e8b\u5192\u982d\u306e\u6982\u8981\u672c\u6587\u4e2d\u306e\u3069\u3046\u3067\u3082\u3088\u3055\u305d\u3046\u306a\u8868\u73fe\u306f\u30d5\u30a3\u30af\u30b7\u30e7\u30f3\u3067\u3059\u3002\n\u20201 : WebPGetInfo \u306f\u5fc5\u8981\u6700\u5c0f\u9650\u306e\u30d8\u30c3\u30c0\u30fc\u90e8\u5206\u3057\u304b\u898b\u3066\u3044\u306a\u304f\u3066\u3001\u30d5\u30a1\u30a4\u30eb\u69cb\u9020\u306e\u30d8\u30c3\u30c0\u30fc\u90e8\u306e \"RIFF\" \u3084 \"WEBPVP8L\" \u3092\u6539\u5909\u3059\u308b\u3068 0 \u3092\u8fd4\u3059\u3051\u308c\u3069\u3001\u30d8\u30c3\u30c0\u30fc\u69cb\u9020\u4e0a null \u3067\u3042\u308b\u3079\u304d\u5834\u6240\u304c 1 \u3060\u3063\u305f\u308a\u3068\u304b\u306e\u7a0b\u5ea6\u3067\u306f\u30c7\u30fc\u30bf\u7570\u5e38\u3068\u306f\u691c\u51fa\u3057\u306a\u3044\u307f\u305f\u3044\u3002\u30d0\u30a4\u30ca\u30ea\u30fc\u30a8\u30c7\u30a3\u30bf\u30fc\u3067\u904a\u3093\u3067\u898b\u308b\u3068\u3088\u3044\u3002\n\n\nReference\n\nWebP API Documentation\n\n# \u6982\u8981\n\n\u300c\u305b\u3093\u3071\u3044\uff01 [FLIF](http://flif.info/) \u3063\u3066\u3044\u3046\u306e\u3059\u3054\u3044\u3089\u3057\u3044\u3067\u3059\u306d\uff01\uff01\uff01\uff01\u3046\u3061\u3067\u4f5c\u3063\u3066\u308b\u30a2\u30d7\u30ea\u3067\u6271\u3063\u3066\u3044\u308b PNG \u3084 JPG \u306e\u5185\u90e8\u30ad\u30e3\u30c3\u30b7\u30e5\u3082\u3053\u306e FLIF \u5f62\u5f0f\u306b\u30c8\u30e9\u30f3\u30b9\u30b3\u30fc\u30c9\u3057\u305f\u3089\u30fb\u30fb\u30fb\u300d\n\n\u3063\u300eLGPLv3\u300f\n\n\u305d\u306e\u30d7\u30ed\u30c0\u30af\u30c8\u3067\u306f LGPLv3 \u30e9\u30a4\u30bb\u30f3\u30b9\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3092\u4f7f\u3063\u3061\u3083\u3046\u3068\u3044\u308d\u3044\u308d\u3068\u554f\u984c\u304c\u8d77\u304d\u308b\u304b\u3089\u3060\u3081\u30fc\u3001\u3067\u3082 [webp](https://developers.google.com/speed/webp/) \u306a\u3089\u4f7f\u3063\u3066\u307f\u3066\u3082\u30a4\u30a4\u30e8\u30fd(\u00b4\u30fc\uff40)\u30ce\n\n\u305d\u3046\u3044\u3046\u308f\u3051\u3067\u305b\u3093\u3071\u3044\u306f\u4eca\u65e5\u3082\u3053\u305d\u3053\u305d\u5b9a\u6642\u9000\u793eDAY\u3067\u30aa\u30b7\u30b4\u30c8\u3092\u7d42\u308f\u3063\u305f\u5f8c\u306b\u3053\u3063\u305d\u308a\u3068 Qiita \u306b\u8a18\u4e8b\u3092\u66f8\u304f\u306e\u3067\u3042\u3063\u305f\u3002\uff08\u20200\uff09\n\n# CMake \u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092 libwebp \u306b ExternalProject \u3067\u5bfe\u5fdc\u3057\u3088\u3046\n\n\u3055\u3063\u305d\u304f\u2193\u3053\u3093\u306a\u306e\u3092\u66f8\u3044\u3066 `CMakeLists.txt` \u304b\u3089 `include` \u3057\u3066 `ExternalProject` \u3067\u7ba1\u7406\u3057\u3066\u307f\u3088\u3046:\n\n- `libwebp.cmake`\n\n```cmake\ncmake_minimum_required( VERSION 3.2 )\n\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR}/include)\nlink_directories(${CMAKE_CURRENT_BINARY_DIR}/lib)\n\ninclude( ExternalProject )\n\nExternalProject_Add( external_libwebp\n  # https://github.com/webmproject/libwebp\n  # http://www.webmproject.org/\n  GIT_REPOSITORY    git@github.com:webmproject/libwebp.git\n  # v0.5.0 \u30bf\u30b0\u306a\u3069\u306b\u306f cmake \u304c\u7121\u304f\u3066\u5c11\u3057\u624b\u9593\u304c\u5897\u3048\u308b\u306e\u3067\u3068\u308a\u3042\u3048\u305a master\n  GIT_TAG           master\n  # WEBP \u7cfb\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f webp \u30ea\u30dd\u30b8\u30c8\u30ea\u30fc\u306e CMakeLists.txt \u5192\u982d\u306b\u308f\u304b\u308a\u3084\u3059\u304f\u6574\u7406\u3055\u308c\u3066\u3044\u308b\u3088\n  # \u304a\u307e\u3051\u30c4\u30fc\u30eb\u306e cwebp, dwebp \u30b3\u30de\u30f3\u30c9\u306e\u30d3\u30eb\u30c9\u3092 on \u306b\u3059\u308b\u5834\u5408\u306f libjpeg \u304c\u5fc5\u8981\u306b\u306a\u308b\u306e\u3067\u3068\u308a\u3042\u3048\u305a off \u306b\u3057\u3066\u304a\u304f\u3088\n  CMAKE_ARGS        -DWEBP_BUILD_CWEBP=off\n                    -DWEBP_BUILD_DWEBP=off\n                    -DWEBP_EXPERIMENTAL_FEATURES=on\n                    -DWEBP_FORCE_ALIGNED=on\n                    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}\n                    -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}\n                    -DCMAKE_COMPILER_IS_GNUCXX=${CMAKE_COMPILER_IS_GNUCXX}\n                    -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}\n                    -DCMAKE_C_FLAGS=${GL_BINDING_C_FLAGS}\n  # cmake -> ninja -> install \u30bf\u30fc\u30b2\u30c3\u30c8\u306a\u3069\u3057\u305f\u3044\u3068\u3053\u308d\u3060\u3051\u3069\u30ab\u30b9\u30bf\u30e0\u30d7\u30ea\u30d5\u30a3\u30c3\u30af\u30b9\u306e\u6319\u52d5\u304c\u304a\u304b\u3057\u3044\u3088\u3046\u306a\u306e\u3067 install \u3060\u3051\u3054\u308a\u3054\u308a\u66f8\u3044\u3066\u304a\u304f\n  INSTALL_COMMAND\n    COMMAND ${CMAKE_COMMAND} -E copy_directory    ${CMAKE_CURRENT_BINARY_DIR}/external/libwebp/src/external_libwebp/src/webp ${CMAKE_CURRENT_BINARY_DIR}/include/webp\n    COMMAND ${CMAKE_COMMAND} -E copy_directory    ${CMAKE_CURRENT_BINARY_DIR}/external/libwebp/src/external_libwebp-build/include ${CMAKE_CURRENT_BINARY_DIR}/include\n    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_CURRENT_BINARY_DIR}/external/libwebp/src/external_libwebp-build/libwebp.a ${CMAKE_CURRENT_BINARY_DIR}/lib/libwebp.a\n    # cwebp, dwebp \u3082\u30d3\u30eb\u30c9\u3059\u308b\u6642\u306f\u4ed8\u3051\u308b\n    #COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_CURRENT_BINARY_DIR}/external/libwebp/src/external_libwebp-build/cwebp.exe ${CMAKE_CURRENT_BINARY_DIR}/bin/cwebp.exe\n    #COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_CURRENT_BINARY_DIR}/external/libwebp/src/external_libwebp-build/dwebp.exe ${CMAKE_CURRENT_BINARY_DIR}/bin/dwebp.exe\n)\n```\n\n\u3042\u3068\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3092\u4f7f\u3044\u305f\u3044\u30a2\u30d7\u30ea\u306e `add_dependencies` \u306b `external_libwebp` \u3001 `target_link_libraries` \u306b `webp` \u3092\u8ffd\u52a0\u3059\u308c\u3070OK\u3002\n\n# webp \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u3092 C++ \u30bd\u30fc\u30b9\u306e\u30a2\u30d7\u30ea\u3067\u751f\u6210\u3057\u3066\u307f\u308b\n\n```cpp\n#include <webp/decode.h>\n#include <webp/encode.h>\n#include <webp/types.h>\n\n#include <cstdint>\n#include <iostream>\n#include <fstream>\n#include <vector>\n\nauto main() -> int\n{\n  // \u30e1\u30e2\u30ea\u30fc\u306b 256 pixels * 256 pixels * 4 elements \u306a\u5909\u63db\u5143\u306e\u5165\u529b\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u9069\u5f53\u306b\u4f5c\u308b\u3088\n  constexpr auto in_width = 256;\n  constexpr auto in_height = 256;\n  constexpr auto in_elements = 4;\n  std::vector< std::uint8_t > in( in_width * in_height * in_elements );\n  \n  for ( int y = 0 ; y < in_height; ++y )\n    for ( int x = 0 ; x < in_width; ++x )\n    {\n      in[ y * in_width * in_elements + x * in_elements + 0] = x;\n      in[ y * in_width * in_elements + x * in_elements + 1] = 0;\n      in[ y * in_width * in_elements + x * in_elements + 2] = y;\n      in[ y * in_width * in_elements + x * in_elements + 3] = 255;\n    }\n\n  // webp \u5f62\u5f0f\u306b\u5909\u63db\u3057\u305f\u7d50\u679c\u3092\u3053\u308c\u306b\u5165\u308c\u308b\u3088\n  std::uint8_t* out_data = nullptr;\n  auto out_size = 0ull;\n\n  constexpr auto in_stride = in_width * in_elements;\n\n  const auto write_file = [&]( const auto& filename )\n  {\n    std::ofstream o( filename, std::ios::binary );\n    o.write( reinterpret_cast< const char* >( out_data ), out_size );\n    if ( o.bad() )\n      return EXIT_FAILURE;\n  };\n\n#ifndef LOSSLESS\n\n  // \u30ed\u30c3\u30b7\u30fc\u3067\u6700\u9ad8\u54c1\u8cea\u306e webp \u306b\u5909\u63db\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\u3057\u3066\u307f\u308b\n  {\n    constexpr auto out_quality_factor = 100.0f;\n    out_size = WebPEncodeRGBA\n    ( in.data(), in_width, in_height, in_stride\n    , out_quality_factor\n    , &out_data\n    );\n    write_file( \"lossy-100.webp\" );\n  }\n\n#else\n\n  // \u30ed\u30b9\u30ec\u30b9\u3067\u6700\u9ad8\u54c1\u8cea\u306e webp \u306b\u5909\u63db\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\u3057\u3066\u307f\u308b\n  {\n    out_size = WebPEncodeLosslessRGBA\n    ( in.data(), in_width, in_height, in_stride\n    , &out_data\n    );\n    write_file( \"lossless.webp\" );\n  }\n\n#endif\n\n}\n```\n\n# webp \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u3092 C++ \u30a2\u30d7\u30ea\u3067\u8aad\u307f\u51fa\u3057\u3066\u307f\u308b\n\n```cpp\n#include <webp/decode.h>\n#include <webp/encode.h>\n#include <webp/types.h>\n\n#include <cstdint>\n#include <iostream>\n#include <fstream>\n#include <vector>\n\nauto main() -> int\n{\n  std::ifstream i( \"hoge.lossless.webp\", std::ios::binary );\n  std::vector< std::uint8_t > in\n  ( ( std::istreambuf_iterator< char >( i ) )\n  , ( std::istreambuf_iterator< char >(   ) )\n  );\n\n  // \u5bfe\u8c61\u306e\u30d0\u30a4\u30ca\u30ea\u30fc\u30c7\u30fc\u30bf\u304c webp \u5f62\u5f0f\u304b\u78ba\u8a8d\uff08\u20201\uff09\n  if ( WebPGetInfo( in.data(), in.size(), nullptr, nullptr ) == 0 )\n    return EXIT_FAILURE;\n\n  int width    = 0;\n  int height   = 0;\n  \n  const auto deleter = []( auto* p ){ free( p ); };\n  const std::unique_ptr< std::uint8_t, decltype( deleter ) > decoded_data\n  ( WebPDecodeRGBA( in.data(), in.size(), &width, &height )\n  , deleter\n  );\n);\n\n  /* \u8aad\u307f\u3060\u3057\u305f\u753b\u50cf\u3067\u304a\u597d\u307f\u306e\u51e6\u7406\u3092\u3069\u3046\u305e */\n}\n```\n\n# \u3060\u305d\u304f\n\nlibwebp \u306f\u4ed6\u306b\u3082\u6271\u3044\u6613\u3044 API \u304c\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u697d\u3067\u3088\u3044\u3067\u3059\u3002\uff08\u2020Reference\uff09\n\n\u3061\u306a\u307f\u306b\u3001\u4eca\u56de\u751f\u6210\u3057\u305f webp \u5f62\u5f0f\u306e\u753b\u50cf\u306e\u5143\u306b\u3057\u305f\u30c7\u30fc\u30bf\u3068\u540c\u3058\u3082\u306e\u3092 [paint.net](http://www.forest.impress.co.jp/library/software/paintdotnet/) \u3067\u751f\u6210\u3057\u3066\u307f\u305f\u3068\u3053\u308d\u3001\u4ee5\u4e0b\u306e\u69d8\u306a\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u306e\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u3057\u305f\u3002\n\n| type | bits/elem. | quality | file size[KB] |\n|------------|---------|---------------|-----|\n| BMP        | 32      | n/a           | 193 |\n| BMP        | 8       | n/a           | 66  |\n| PNG        | 32      | n/a           | 42  |\n| PNG        | 24      | n/a           | 40  |\n| PNG        | 8       | n/a           | 20  |\n| JPG        | 24      | 100           | 15  |\n| DDS        |         | DXT1          | 33  |\n| WEBP       | 32      | 100           | 3   |\n| WEBP       | 32      | Lossless      | 1   |\n\nwebp \u3055\u3093\u512a\u79c0\u30fd(\u00b4\u30fc\uff40)\u30ce\n\n# \u8a3b\n\n- \u20200 : \u8a18\u4e8b\u5192\u982d\u306e\u6982\u8981\u672c\u6587\u4e2d\u306e\u3069\u3046\u3067\u3082\u3088\u3055\u305d\u3046\u306a\u8868\u73fe\u306f\u30d5\u30a3\u30af\u30b7\u30e7\u30f3\u3067\u3059\u3002\n- \u20201 : `WebPGetInfo` \u306f\u5fc5\u8981\u6700\u5c0f\u9650\u306e\u30d8\u30c3\u30c0\u30fc\u90e8\u5206\u3057\u304b\u898b\u3066\u3044\u306a\u304f\u3066\u3001\u30d5\u30a1\u30a4\u30eb\u69cb\u9020\u306e\u30d8\u30c3\u30c0\u30fc\u90e8\u306e `\"RIFF\"` \u3084 `\"WEBPVP8L\"` \u3092\u6539\u5909\u3059\u308b\u3068 `0` \u3092\u8fd4\u3059\u3051\u308c\u3069\u3001\u30d8\u30c3\u30c0\u30fc\u69cb\u9020\u4e0a null \u3067\u3042\u308b\u3079\u304d\u5834\u6240\u304c 1 \u3060\u3063\u305f\u308a\u3068\u304b\u306e\u7a0b\u5ea6\u3067\u306f\u30c7\u30fc\u30bf\u7570\u5e38\u3068\u306f\u691c\u51fa\u3057\u306a\u3044\u307f\u305f\u3044\u3002\u30d0\u30a4\u30ca\u30ea\u30fc\u30a8\u30c7\u30a3\u30bf\u30fc\u3067\u904a\u3093\u3067\u898b\u308b\u3068\u3088\u3044\u3002\n\n# Reference\n\n- [WebP API Documentation](https://developers.google.com/speed/webp/docs/api)\n", "tags": ["C++", "WebP", "libwebp", "image", "CMake"]}