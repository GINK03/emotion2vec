{"context": "Theano\u3067CNN\u3092\u69cb\u7bc9\u3059\u308b\u305f\u3081\u306b\u3001Theano\u306e2\u6b21\u5143\u306e\u7573\u307f\u8fbc\u307f\u95a2\u6570theano.tensor.nnet.conv()\u306b\u3064\u3044\u3066\u4f55\u70b9\u304b\u8abf\u67fb\u3057\u307e\u3057\u305f\u3002\u4fe1\u53f7\u51e6\u7406\u3067\u304a\u305d\u3089\u304f\u3088\u304f\u4f7f\u308f\u308c\u3066\u3044\u308b\u3067\u3042\u308d\u3046N\u6b21\u5143\u306e\u7573\u307f\u8fbc\u307f\u95a2\u6570scipy.signal.fftconvolve()\u3068\u6bd4\u8f03\u3057\u307e\u3057\u305f\u3002\n\n2\u6b21\u5143\u914d\u5217\u540c\u58eb\u306e\u7573\u307f\u8fbc\u307f\n\u307e\u305a\u306f\u5358\u7d14\u306a2\u6b21\u5143\u914d\u5217\u540c\u58eb\u3067\u7573\u307f\u8fbc\u307f\u3092\u3057\u3066\u307f\u307e\u3059\u3002\nimport theano\nimport theano.tensor as T\nimport theano.tensor.signal as signal \nimport scipy.signal as s\n\nm = T.matrix()\nw = T.matrix()\n\n#\u30e9\u30f3\u30af4\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\no_full = nnet.conv.conv2d(m[None,None,:,:], w[None, None,:,:],\n                          border_mode='full')\no_valid = nnet.conv.conv2d(m[None,None,:,:], w[None, None,:,:],\n                          border_mode='valid')\n\nm_arr = arange(25.).reshape((5,5)).astype(float32)\nw_arr = ones((3,3)).astype(float32)\nprint(\"m_arr =\")\nprint(m_arr)\nprint(\"w_arr =\")\nprint(w_arr)\n\nprint(\"Output for Theano.\")\nprint(\"full:\")\nprint(o_full.eval({m:m_arr, w:w_arr}).round().astype(int))\nprint(\"valid:\")\nprint(o_valid.eval({m:m_arr, w:w_arr}).round().astype(int))\n\nprint(\"Output for scipy.\")\nprint(\"full:\")\nprint(s.fftconvolve(m_arr, w_arr, \"full\").round().astype(int))\nprint(\"valid:\")\nprint(s.fftconvolve(m_arr, w_arr, \"valid\").round().astype(int))\n\n\u7573\u307f\u8fbc\u307e\u308c\u308b\u914d\u5217m_arr\u3068\u7573\u307f\u8fbc\u3080\u7a93\u95a2\u6570(or\u30ab\u30fc\u30cd\u30ebor\u30d5\u30a3\u30eb\u30bf)w_arr\u3092theano.tensor.nnet.conv.conv2d()\u3068scipy.signal.fftconvolve()```\n\u306b\u305d\u308c\u305e\u308c\u6d41\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u3053\u3067\u3001\n#\u30e9\u30f3\u30af4\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\no_full = nnet.conv.conv2d(m[None,None,:,:], w[None, None,:,:],\n                          border_mode='full')\no_valid = nnet.conv.conv2d(m[None,None,:,:], w[None, None,:,:],\n                          border_mode='valid')\n\n\u306e\u3088\u3046\u306b\u3001m[None,None,:,:], w[None, None,:,:]\u3068\u3057\u3066\u3044\u308b\u306e\u306f\u3001\u5165\u529b\u3068\u30ab\u30fc\u30cd\u30eb\u306e\u914d\u5217\u306e\u5f62\u5f0f\u304c[\u753b\u50cf\u679a\u6570\u3001\u30c1\u30e3\u30f3\u30cd\u30eb\u6570\u3001\u9ad8\u3055\u3001\u5e45]\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u3089\u3067\u3059\u3002m,w\u306f\u30e9\u30f3\u30af2\u306eT.matrix()\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u305f\u306e\u3067\u3001[None, None,:,:]\u306e\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067\u3001\u4e0a\u4f4d\u30e9\u30f3\u30af\u30922\u3064\u5897\u3084\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u306fNumpy\u306e\u305d\u308c\u3068\u540c\u3058\u306a\u306e\u3067\u500b\u4eba\u7684\u306b\u3068\u3066\u3082\u4f7f\u3044\u3084\u3059\u3044\u3067\u3059\u3002\n\u51fa\u529b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nm_arr =\n[[  0.   1.   2.   3.   4.]\n [  5.   6.   7.   8.   9.]\n [ 10.  11.  12.  13.  14.]\n [ 15.  16.  17.  18.  19.]\n [ 20.  21.  22.  23.  24.]]\nw_arr =\n[[ 1.  1.  1.]\n [ 1.  1.  1.]\n [ 1.  1.  1.]]\nOutput for Theano.\nfull:\n[[[[  0   1   3   6   9   7   4]\n   [  5  12  21  27  33  24  13]\n   [ 15  33  54  63  72  51  27]\n   [ 30  63  99 108 117  81  42]\n   [ 45  93 144 153 162 111  57]\n   [ 35  72 111 117 123  84  43]\n   [ 20  41  63  66  69  47  24]]]]\nvalid:\n[[[[ 54  63  72]\n   [ 99 108 117]\n   [144 153 162]]]]\nOutput for scipy.\nfull:\n[[  0   1   3   6   9   7   4]\n [  5  12  21  27  33  24  13]\n [ 15  33  54  63  72  51  27]\n [ 30  63  99 108 117  81  42]\n [ 45  93 144 153 162 111  57]\n [ 35  72 111 117 123  84  43]\n [ 20  41  63  66  69  47  24]]\nvalid:\n[[ 54  63  72]\n [ 99 108 117]\n [144 153 162]]\n\n\u7573\u307f\u8fbc\u307f\u306e\u51fa\u529b\u306f\u898b\u3084\u3059\u3044\u3088\u3046\u306b\u56db\u6368\u4e94\u5165\u3057\u305f\u5f8cint\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\ntheano.tensor.nnet.conv()\u3067\u306fborder_mode\u3068\u3044\u3046\u5f15\u6570\u304c\u3042\u308a\u307e\u3057\u305f\u3002\u3053\u308c\u306b\u306ffull\u3068valid\u304c\u9078\u629e\u53ef\u80fd\u3067\u3059\u3002\u7573\u307f\u8fbc\u307f\u306f\u753b\u50cf\u306b\u5bfe\u3057\u30d5\u30a3\u30eb\u30bf\u3092\u52d5\u304b\u3057\u306a\u304c\u3089\u639b\u3051\u7b97\u3057\u3066\u7dcf\u548c\u3092\u53d6\u308b\u306e\u3067\u3059\u304c\u3001full\u306f\u753b\u50cf\u306b\u5bfe\u3057\u30d5\u30a3\u30eb\u30bf\u304c\u306f\u307f\u51fa\u3057\u3066\u3044\u3066\u3082\u3001\u8981\u7d20\u306e\u6700\u4f4e\u4e00\u3064\u304c\u91cd\u306a\u3063\u3066\u3044\u308b\u72b6\u614b\u306e\u7d50\u679c\u3092\u51fa\u529b\u306b\u542b\u3080\u30e2\u30fc\u30c9\u3001valid\u306f\u753b\u50cf\u306b\u5bfe\u3057\u30d5\u30a3\u30eb\u30bf\u304c\u306f\u307f\u51fa\u3057\u3066\u3044\u306a\u3044\u72b6\u614b\u306e\u7d50\u679c\u306e\u307f\u51fa\u529b\u3068\u3059\u308b\u30e2\u30fc\u30c9\u3067\u3059\u3002\u3042\u308b\u8ef8\u306e\u753b\u50cf\u3068\u30d5\u30a3\u30eb\u30bf\u306e\u30b5\u30a4\u30ba\u304c\u305d\u308c\u305e\u308c$M,m$\u306e\u6642\u3001\u51fa\u529b\u3055\u308c\u308b\u914d\u5217\u306e\u3042\u308b\u8ef8\u306e\u30b5\u30a4\u30ba\u306ffull\u3067\u306f$M+(m-1)$\u3001valid\u3067\u306f$M-(m-1)$\u306b\u306a\u308a\u307e\u3059\u3002\u4e0a\u306e\u4f8b\u3067\u306f\u9ad8\u3055(or\u5e45)\u304c$M=5,m=3$\u306a\u306e\u3067\u3001full\u306e\u66427\u3001valid\u306e\u66423\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u51fa\u529b\u3092\u78ba\u8a8d\u3059\u308b\u3068\u3001theano.tensor.nnet.conv()\u3068scipy.signal.fftconvolve()\u3067(\u914d\u5217\u306e\u30e9\u30f3\u30af\u3092\u9664\u3044\u3066)\u7b49\u3057\u3044\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\u305f\u3060\u3057\u4e21\u8005\u306e\u51fa\u529b\u306f\u610f\u5473\u5408\u3044\u304c\u7570\u306a\u3063\u3066\u3044\u307e\u3059\u3002scipy.signal.fftconvolve()\u304c\u7d14\u7c8b\u306aN\u6b21\u5143\u306e\u7573\u307f\u8fbc\u307f\u306e\u7d50\u679c\u3092\u8fd4\u3059\u306e\u306b\u5bfe\u3057\u3066\u3001theano.tensor.nnet.conv()\u306f\u753b\u50cf\u679a\u6570\u6bce\u3001\u30d5\u30a3\u30eb\u30bf\u6bce\u306e\u7573\u307f\u8fbc\u307f\u306e\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002\u51fa\u529b\u914d\u5217\u306f[\u753b\u50cf\u679a\u6570\u3001\u30d5\u30a1\u30a4\u30eb\u679a\u6570\u3001\u9ad8\u3055\u3001\u5e45]\u3067\u3059\u3002\u307e\u305f\u3001\u5f8c\u8ff0\u3057\u307e\u3059\u304ctheano.tensor.nnet.conv()\u306f\u30c1\u30e3\u30cd\u30eb\u6570\u304c\u753b\u50cf\u3068\u30d5\u30a3\u30eb\u30bf\u3068\u3067\u7b49\u3057\u304f\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002\n\n\u753b\u50cf\u679a\u6570\u3001\u30c1\u30e3\u30cd\u30eb\u6570\u306e\u6b21\u5143\u3092\u52a0\u3048\u305f\u5834\u5408\u306e\u30b3\u30f3\u30dc\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\n\u6b21\u306f\u753b\u50cf\u679a\u6570\u3068\u30c1\u30e3\u30cd\u30eb\u6570\u306e\u6b21\u5143\u3092\u52a0\u3048\u305f\u30b3\u30f3\u30dc\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3044\u307e\u3059\u3002\u753b\u50cf\u679a\u65702\u679a\u3001\u30c1\u30e3\u30cd\u30eb\u65703\u30675x5\u306e\u753b\u50cf\u306b\u5bfe\u3057\u3001\u753b\u50cf\u679a\u65701\u3001\u30c1\u30e3\u30cd\u30eb\u65703\u30673x3\u306e\u30d5\u30a3\u30eb\u30bf\u3092\u7573\u307f\u8fbc\u307f\u307e\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nm = T.tensor4()\nw = T.tensor4()\n\n#\u30e9\u30f3\u30af4\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\no_full = nnet.conv.conv2d(m, w,\n                          border_mode='full')\no_valid = nnet.conv.conv2d(m, w,\n                          border_mode='valid')\n\nm_arr = arange(2*3*5*5).reshape((2, 3, 5, 5)).astype(float32)\nw_arr = ones((1,3,3,3)).astype(float32)\nprint(\"m_arr =\")\nprint(m_arr)\nprint(\"w_arr =\")\nprint(w_arr)\n\nprint(\"Output for Theano.\")\nprint(\"full:\")\nprint(o_full.eval({m:m_arr, w:w_arr}).round().astype(int))\nprint(\"valid:\")\nprint(o_valid.eval({m:m_arr, w:w_arr}).round().astype(int))\n\nprint(\"Output for scipy.\")\nprint(\"full:\")\nprint(s.fftconvolve(m_arr, w_arr, \"full\").round().astype(int))\nprint(\"valid:\")\nprint(s.fftconvolve(m_arr, w_arr, \"valid\").round().astype(int))\n\n\u30e9\u30f3\u30af4\u306e\u30c6\u30f3\u30bd\u30eb\u3092\u8a2d\u5b9a\u3059\u308b\u305f\u3081\u306bm\u3068w\u306bT.tensor4()\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\nm_arr =\n[[[[   0.    1.    2.    3.    4.]\n   [   5.    6.    7.    8.    9.]\n   [  10.   11.   12.   13.   14.]\n   [  15.   16.   17.   18.   19.]\n   [  20.   21.   22.   23.   24.]]\n\n  [[  25.   26.   27.   28.   29.]\n   [  30.   31.   32.   33.   34.]\n   [  35.   36.   37.   38.   39.]\n   [  40.   41.   42.   43.   44.]\n   [  45.   46.   47.   48.   49.]]\n\n  [[  50.   51.   52.   53.   54.]\n   [  55.   56.   57.   58.   59.]\n   [  60.   61.   62.   63.   64.]\n   [  65.   66.   67.   68.   69.]\n   [  70.   71.   72.   73.   74.]]]\n\n\n [[[  75.   76.   77.   78.   79.]\n   [  80.   81.   82.   83.   84.]\n   [  85.   86.   87.   88.   89.]\n   [  90.   91.   92.   93.   94.]\n   [  95.   96.   97.   98.   99.]]\n\n  [[ 100.  101.  102.  103.  104.]\n   [ 105.  106.  107.  108.  109.]\n   [ 110.  111.  112.  113.  114.]\n   [ 115.  116.  117.  118.  119.]\n   [ 120.  121.  122.  123.  124.]]\n\n  [[ 125.  126.  127.  128.  129.]\n   [ 130.  131.  132.  133.  134.]\n   [ 135.  136.  137.  138.  139.]\n   [ 140.  141.  142.  143.  144.]\n   [ 145.  146.  147.  148.  149.]]]]\nw_arr =\n[[[[ 1.  1.  1.]\n   [ 1.  1.  1.]\n   [ 1.  1.  1.]]\n\n  [[ 1.  1.  1.]\n   [ 1.  1.  1.]\n   [ 1.  1.  1.]]\n\n  [[ 1.  1.  1.]\n   [ 1.  1.  1.]\n   [ 1.  1.  1.]]]]\nOutput for Theano.\nfull:\n[[[[  75  153  234  243  252  171   87]\n   [ 165  336  513  531  549  372  189]\n   [ 270  549  837  864  891  603  306]\n   [ 315  639  972  999 1026  693  351]\n   [ 360  729 1107 1134 1161  783  396]\n   [ 255  516  783  801  819  552  279]\n   [ 135  273  414  423  432  291  147]]]\n\n\n [[[ 300  603  909  918  927  621  312]\n   [ 615 1236 1863 1881 1899 1272  639]\n   [ 945 1899 2862 2889 2916 1953  981]\n   [ 990 1989 2997 3024 3051 2043 1026]\n   [1035 2079 3132 3159 3186 2133 1071]\n   [ 705 1416 2133 2151 2169 1452  729]\n   [ 360  723 1089 1098 1107  741  372]]]]\nvalid:\n[[[[ 837  864  891]\n   [ 972  999 1026]\n   [1107 1134 1161]]]\n\n\n [[[2862 2889 2916]\n   [2997 3024 3051]\n   [3132 3159 3186]]]]\nOutput for scipy.\nfull:\n[[[[   0    1    3    6    9    7    4]\n   [   5   12   21   27   33   24   13]\n   [  15   33   54   63   72   51   27]\n   [  30   63   99  108  117   81   42]\n   [  45   93  144  153  162  111   57]\n   [  35   72  111  117  123   84   43]\n   [  20   41   63   66   69   47   24]]\n\n  [[  25   52   81   87   93   64   33]\n   [  60  124  192  204  216  148   76]\n   [ 105  216  333  351  369  252  129]\n   [ 135  276  423  441  459  312  159]\n   [ 165  336  513  531  549  372  189]\n   [ 120  244  372  384  396  268  136]\n   [  65  132  201  207  213  144   73]]\n\n  [[  75  153  234  243  252  171   87]\n   [ 165  336  513  531  549  372  189]\n   [ 270  549  837  864  891  603  306]\n   [ 315  639  972  999 1026  693  351]\n   [ 360  729 1107 1134 1161  783  396]\n   [ 255  516  783  801  819  552  279]\n   [ 135  273  414  423  432  291  147]]\n\n  [[  75  152  231  237  243  164   83]\n   [ 160  324  492  504  516  348  176]\n   [ 255  516  783  801  819  552  279]\n   [ 285  576  873  891  909  612  309]\n   [ 315  636  963  981  999  672  339]\n   [ 220  444  672  684  696  468  236]\n   [ 115  232  351  357  363  244  123]]\n\n  [[  50  101  153  156  159  107   54]\n   [ 105  212  321  327  333  224  113]\n   [ 165  333  504  513  522  351  177]\n   [ 180  363  549  558  567  381  192]\n   [ 195  393  594  603  612  411  207]\n   [ 135  272  411  417  423  284  143]\n   [  70  141  213  216  219  147   74]]]\n\n\n [[[  75  151  228  231  234  157   79]\n   [ 155  312  471  477  483  324  163]\n   [ 240  483  729  738  747  501  252]\n   [ 255  513  774  783  792  531  267]\n   [ 270  543  819  828  837  561  282]\n   [ 185  372  561  567  573  384  193]\n   [  95  191  288  291  294  197   99]]\n\n  [[ 175  352  531  537  543  364  183]\n   [ 360  724 1092 1104 1116  748  376]\n   [ 555 1116 1683 1701 1719 1152  579]\n   [ 585 1176 1773 1791 1809 1212  609]\n   [ 615 1236 1863 1881 1899 1272  639]\n   [ 420  844 1272 1284 1296  868  436]\n   [ 215  432  651  657  663  444  223]]\n\n  [[ 300  603  909  918  927  621  312]\n   [ 615 1236 1863 1881 1899 1272  639]\n   [ 945 1899 2862 2889 2916 1953  981]\n   [ 990 1989 2997 3024 3051 2043 1026]\n   [1035 2079 3132 3159 3186 2133 1071]\n   [ 705 1416 2133 2151 2169 1452  729]\n   [ 360  723 1089 1098 1107  741  372]]\n\n  [[ 225  452  681  687  693  464  233]\n   [ 460  924 1392 1404 1416  948  476]\n   [ 705 1416 2133 2151 2169 1452  729]\n   [ 735 1476 2223 2241 2259 1512  759]\n   [ 765 1536 2313 2331 2349 1572  789]\n   [ 520 1044 1572 1584 1596 1068  536]\n   [ 265  532  801  807  813  544  273]]\n\n  [[ 125  251  378  381  384  257  129]\n   [ 255  512  771  777  783  524  263]\n   [ 390  783 1179 1188 1197  801  402]\n   [ 405  813 1224 1233 1242  831  417]\n   [ 420  843 1269 1278 1287  861  432]\n   [ 285  572  861  867  873  584  293]\n   [ 145  291  438  441  444  297  149]]]]\nvalid:\n[[[[ 837  864  891]\n   [ 972  999 1026]\n   [1107 1134 1161]]]\n\n\n [[[2862 2889 2916]\n   [2997 3024 3051]\n   [3132 3159 3186]]]]\n\n\u9577\u304f\u3066\u6bd4\u8f03\u3057\u3065\u3089\u3044\u306e\u3067\u3059\u304c\u3001valid\u306f\u540c\u3058\u3067\u3059\u304c\u3001full\u306f\u4e21\u8005\u3067\u7d50\u679c\u304c\u7570\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u305d\u3053\u3067\u3001\u51fa\u529b\u5f8c\u306e\u914d\u5217\u306eshape\u3092\u898b\u3066\u307f\u307e\u3059\u3002\nprint(\"Output for Theano.\")\nprint(\"full:\")\nprint(o_full.eval({m:m_arr, w:w_arr}).round().astype(int).shape)\nprint(\"valid:\")\nprint(o_valid.eval({m:m_arr, w:w_arr}).round().astype(int).shape)\n\nprint(\"Output for scipy.\")\nprint(\"full:\")\nprint(s.fftconvolve(m_arr, w_arr, \"full\").round().astype(int).shape)\nprint(\"valid:\")\nprint(s.fftconvolve(m_arr, w_arr, \"valid\").round().astype(int).shape)\n\nOutput for Theano.\nfull:\n(2, 1, 7, 7)\nvalid:\n(2, 1, 3, 3)\nOutput for scipy.\nfull:\n(2, 5, 7, 7)\nvalid:\n(2, 1, 3, 3)\n\n\u3053\u308c\u306f\u3001scipy.signal.fftconvolve()\u304c\u7573\u307f\u8fbc\u307f\u64cd\u4f5c\u3092\u753b\u50cf\u679a\u6570\u53ca\u3073\u30c1\u30e3\u30cd\u30eb\u6570\u306e\u8ef8\u306b\u95a2\u3057\u3066\u3082\u884c\u3063\u3066\u3044\u308b\u306e\u306b\u5bfe\u3057\u3066\u3001theano.tensor.nnet.conv()\u3067\u306f\u753b\u50cf\u306e\u5e45\u3001\u9ad8\u3055\u306e\u6b21\u5143\u3067\u3057\u304b\u884c\u308f\u305a\u3001\u753b\u50cf\u679a\u6570\u3068\u30c1\u30e3\u30cd\u30eb\u6570\u306b\u5bfe\u3057\u3066\u306f\u72ec\u7acb\u306b\u51e6\u7406\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u8d77\u56e0\u3057\u307e\u3059\u3002\u305d\u3057\u3066\u3001theano.tensor.nnet.conv()\u306e\u51fa\u529b\u306f[\u753b\u50cf\u679a\u6570\u3001\u30d5\u30a3\u30eb\u30bf\u679a\u6570\u3001\u9ad8\u3055\u3001\u5e45]\u306a\u306e\u3067\u3001shape\u306e2\u756a\u76ee\u306f1\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u307e\u305f\u3001theano.tensor.nnet.conv()\u306f\u4e0a\u8ff0\u306e\u69d8\u306b\u30c1\u30e3\u30cd\u30eb\u6570\u3092\u753b\u50cf\u3068\u30d5\u30a3\u30eb\u30bf\u3068\u3067\u5408\u308f\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\nm_arr = arange(2*3*5*5).reshape((2, 3, 5, 5)).astype(float32)\nw_arr = ones((1,1,3,3)).astype(float32)\n\n\u306e\u3088\u3046\u306b\u753b\u50cf\u306e\u30c1\u30e3\u30cd\u30eb\u6570\u304c3\u306b\u5bfe\u3057\u3066\u3001\u30d5\u30a3\u30eb\u30bf\u306e\u30c1\u30e3\u30cd\u30eb\u6570\u304c1\u306e\u5834\u5408\u306ftheano.tensor.nnet.conv()\u3067\u306f\u4ee5\u4e0b\u306e\u30a8\u30e9\u30fc\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\nValueError: GpuDnnConv images and kernel must have the same stack size\n\n\u305f\u3060\u3057\u3001scipy.signal.fftconvolve()\u3067\u306f\u914d\u5217\u306eshape\u304c\nOutput for scipy.\nfull:\n(2, 3, 7, 7)\nvalid:\n(2, 3, 3, 3)\n\n\u306e\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002full\u3067\u306f$M+(m-1)$\u3001valid\u3067\u306f$M-(m-1)$\u306e\u3068\u304a\u308a\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u6700\u5f8c\u306b\u3001\u753b\u50cf\u679a\u65702\u3001\u30d5\u30a3\u30eb\u30bf\u679a\u65703\u3001\u30c1\u30e3\u30cd\u30eb\u65701\u3067\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\u307e\u305f\u3001\u914d\u5217\u306e\u8981\u7d20\u6570\u3092\u6e1b\u3089\u3057\u307e\u3057\u305f\u3002\nm = T.tensor4()\nw = T.tensor4()\n\n#\u30e9\u30f3\u30af4\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\no_full = nnet.conv.conv2d(m, w,\n                          border_mode='full')\no_valid = nnet.conv.conv2d(m, w,\n                          border_mode='valid')\n\nm_arr = arange(2*1*3*3).reshape((2, 1, 3, 3)).astype(float32)\nw_arr = ones((3,1,1,1)).astype(float32)\nprint(\"m_arr =\")\nprint(m_arr)\nprint(\"w_arr =\")\nprint(w_arr)\n\nprint(\"Output for Theano.\")\nprint(\"full:\")\nprint(o_full.eval({m:m_arr, w:w_arr}).round().astype(int))\nprint(\"valid:\")\nprint(o_valid.eval({m:m_arr, w:w_arr}).round().astype(int))\n\nprint(\"Output for scipy.\")\nprint(\"full:\")\nprint(s.fftconvolve(m_arr, w_arr, \"full\").round().astype(int))\nprint(\"valid:\")\nprint(s.fftconvolve(m_arr, w_arr, \"valid\").round().astype(int))\n\nm_arr =\n[[[[  0.   1.   2.]\n   [  3.   4.   5.]\n   [  6.   7.   8.]]]\n\n\n [[[  9.  10.  11.]\n   [ 12.  13.  14.]\n   [ 15.  16.  17.]]]]\nw_arr =\n[[[[ 1.]]]\n\n\n [[[ 1.]]]\n\n\n [[[ 1.]]]]\nOutput for Theano.\nfull:\n[[[[ 0  1  2]\n   [ 3  4  5]\n   [ 6  7  8]]\n\n  [[ 0  1  2]\n   [ 3  4  5]\n   [ 6  7  8]]\n\n  [[ 0  1  2]\n   [ 3  4  5]\n   [ 6  7  8]]]\n\n\n [[[ 9 10 11]\n   [12 13 14]\n   [15 16 17]]\n\n  [[ 9 10 11]\n   [12 13 14]\n   [15 16 17]]\n\n  [[ 9 10 11]\n   [12 13 14]\n   [15 16 17]]]]\nvalid:\n[[[[ 0  1  2]\n   [ 3  4  5]\n   [ 6  7  8]]\n\n  [[ 0  1  2]\n   [ 3  4  5]\n   [ 6  7  8]]\n\n  [[ 0  1  2]\n   [ 3  4  5]\n   [ 6  7  8]]]\n\n\n [[[ 9 10 11]\n   [12 13 14]\n   [15 16 17]]\n\n  [[ 9 10 11]\n   [12 13 14]\n   [15 16 17]]\n\n  [[ 9 10 11]\n   [12 13 14]\n   [15 16 17]]]]\nOutput for scipy.\nfull:\n[[[[ 0  1  2]\n   [ 3  4  5]\n   [ 6  7  8]]]\n\n\n [[[ 9 11 13]\n   [15 17 19]\n   [21 23 25]]]\n\n\n [[[ 9 11 13]\n   [15 17 19]\n   [21 23 25]]]\n\n\n [[[ 9 10 11]\n   [12 13 14]\n   [15 16 17]]]]\nvalid:\nValueError: For 'valid' mode, one must be at least as large as the other in every dimension\n\nscipy.signal.fftconvolve()\u306evalid\u304c\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002valid\u306e\u5834\u5408\u3001\u753b\u50cf\u3068\u30d5\u30a3\u30eb\u30bf\u306e\u3044\u305a\u308c\u304b\u304c\u7247\u65b9\u3088\u308a\u3082\u3059\u3079\u3066\u306e\u6b21\u5143\u3067\u5927\u304d\u304f\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3088\u3046\u3067\u3059\u3002\n\u914d\u5217\u306eshape\u306f\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\nOutput for Theano.\nfull:\n(2, 3, 3, 3)\nvalid:\n(2, 3, 3, 3)\nOutput for scipy.\nfull:\n(4, 1, 3, 3)\nvalid:\n\n\u3000theano.tensor.nnet.conv()\u306fshape\u306e1,2\u756a\u76ee\u304c\u305d\u308c\u305e\u308c\u753b\u50cf\u679a\u6570\u3001\u30d5\u30a3\u30eb\u30bf\u679a\u6570\u3067\u3001\u6b8b\u308a\u304cfull\u3067\u306f$M+(m-1)$\u3001valid\u3067\u306f$M-(m-1)$\u306b\u306a\u3063\u3066\u304a\u308a\u3001scipy.signal.fftconvolve()\u306f\u3059\u3079\u3066\u306e\u8ef8\u306b\u5bfe\u3057\u3066full\u3067\u306f$M+(m-1)$\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n\u30b9\u30c8\u30e9\u30a4\u30c9\nTheano\u3067CNN\u3092\u69cb\u7bc9\u3059\u308b\u305f\u3081\u306b\u3001Theano\u306e2\u6b21\u5143\u306e\u7573\u307f\u8fbc\u307f\u95a2\u6570```theano.tensor.nnet.conv()```\u306b\u3064\u3044\u3066\u4f55\u70b9\u304b\u8abf\u67fb\u3057\u307e\u3057\u305f\u3002\u4fe1\u53f7\u51e6\u7406\u3067\u304a\u305d\u3089\u304f\u3088\u304f\u4f7f\u308f\u308c\u3066\u3044\u308b\u3067\u3042\u308d\u3046N\u6b21\u5143\u306e\u7573\u307f\u8fbc\u307f\u95a2\u6570```scipy.signal.fftconvolve()```\u3068\u6bd4\u8f03\u3057\u307e\u3057\u305f\u3002\n\n# 2\u6b21\u5143\u914d\u5217\u540c\u58eb\u306e\u7573\u307f\u8fbc\u307f\n\u307e\u305a\u306f\u5358\u7d14\u306a2\u6b21\u5143\u914d\u5217\u540c\u58eb\u3067\u7573\u307f\u8fbc\u307f\u3092\u3057\u3066\u307f\u307e\u3059\u3002\n\n```python\nimport theano\nimport theano.tensor as T\nimport theano.tensor.signal as signal \nimport scipy.signal as s\n\nm = T.matrix()\nw = T.matrix()\n\n#\u30e9\u30f3\u30af4\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\no_full = nnet.conv.conv2d(m[None,None,:,:], w[None, None,:,:],\n                          border_mode='full')\no_valid = nnet.conv.conv2d(m[None,None,:,:], w[None, None,:,:],\n                          border_mode='valid')\n\nm_arr = arange(25.).reshape((5,5)).astype(float32)\nw_arr = ones((3,3)).astype(float32)\nprint(\"m_arr =\")\nprint(m_arr)\nprint(\"w_arr =\")\nprint(w_arr)\n\nprint(\"Output for Theano.\")\nprint(\"full:\")\nprint(o_full.eval({m:m_arr, w:w_arr}).round().astype(int))\nprint(\"valid:\")\nprint(o_valid.eval({m:m_arr, w:w_arr}).round().astype(int))\n\nprint(\"Output for scipy.\")\nprint(\"full:\")\nprint(s.fftconvolve(m_arr, w_arr, \"full\").round().astype(int))\nprint(\"valid:\")\nprint(s.fftconvolve(m_arr, w_arr, \"valid\").round().astype(int))\n```\n\u7573\u307f\u8fbc\u307e\u308c\u308b\u914d\u5217```m_arr```\u3068\u7573\u307f\u8fbc\u3080\u7a93\u95a2\u6570(or\u30ab\u30fc\u30cd\u30ebor\u30d5\u30a3\u30eb\u30bf)```w_arr```\u3092```theano.tensor.nnet.conv.conv2d()\u3068```scipy.signal.fftconvolve()```\n\u306b\u305d\u308c\u305e\u308c\u6d41\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u3053\u3067\u3001\n\n```python\n#\u30e9\u30f3\u30af4\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\no_full = nnet.conv.conv2d(m[None,None,:,:], w[None, None,:,:],\n                          border_mode='full')\no_valid = nnet.conv.conv2d(m[None,None,:,:], w[None, None,:,:],\n                          border_mode='valid')\n```\n\n\u306e\u3088\u3046\u306b\u3001```m[None,None,:,:], w[None, None,:,:]```\u3068\u3057\u3066\u3044\u308b\u306e\u306f\u3001\u5165\u529b\u3068\u30ab\u30fc\u30cd\u30eb\u306e\u914d\u5217\u306e\u5f62\u5f0f\u304c```[\u753b\u50cf\u679a\u6570\u3001\u30c1\u30e3\u30f3\u30cd\u30eb\u6570\u3001\u9ad8\u3055\u3001\u5e45]```\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u3089\u3067\u3059\u3002```m,w```\u306f\u30e9\u30f3\u30af2\u306e```T.matrix()```\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u305f\u306e\u3067\u3001```[None, None,:,:]```\u306e\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067\u3001\u4e0a\u4f4d\u30e9\u30f3\u30af\u30922\u3064\u5897\u3084\u3057\u3066\u3044\u307e\u3059\u3002[\u3053\u306e\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u306fNumpy\u306e\u305d\u308c\u3068\u540c\u3058](http://deeplearning.net/software/theano/library/tensor/basic.html)\u306a\u306e\u3067\u500b\u4eba\u7684\u306b\u3068\u3066\u3082\u4f7f\u3044\u3084\u3059\u3044\u3067\u3059\u3002\n\n\u51fa\u529b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```txt\nm_arr =\n[[  0.   1.   2.   3.   4.]\n [  5.   6.   7.   8.   9.]\n [ 10.  11.  12.  13.  14.]\n [ 15.  16.  17.  18.  19.]\n [ 20.  21.  22.  23.  24.]]\nw_arr =\n[[ 1.  1.  1.]\n [ 1.  1.  1.]\n [ 1.  1.  1.]]\nOutput for Theano.\nfull:\n[[[[  0   1   3   6   9   7   4]\n   [  5  12  21  27  33  24  13]\n   [ 15  33  54  63  72  51  27]\n   [ 30  63  99 108 117  81  42]\n   [ 45  93 144 153 162 111  57]\n   [ 35  72 111 117 123  84  43]\n   [ 20  41  63  66  69  47  24]]]]\nvalid:\n[[[[ 54  63  72]\n   [ 99 108 117]\n   [144 153 162]]]]\nOutput for scipy.\nfull:\n[[  0   1   3   6   9   7   4]\n [  5  12  21  27  33  24  13]\n [ 15  33  54  63  72  51  27]\n [ 30  63  99 108 117  81  42]\n [ 45  93 144 153 162 111  57]\n [ 35  72 111 117 123  84  43]\n [ 20  41  63  66  69  47  24]]\nvalid:\n[[ 54  63  72]\n [ 99 108 117]\n [144 153 162]]\n```\n\n\u7573\u307f\u8fbc\u307f\u306e\u51fa\u529b\u306f\u898b\u3084\u3059\u3044\u3088\u3046\u306b\u56db\u6368\u4e94\u5165\u3057\u305f\u5f8cint\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\n```theano.tensor.nnet.conv()```\u3067\u306f```border_mode```\u3068\u3044\u3046\u5f15\u6570\u304c\u3042\u308a\u307e\u3057\u305f\u3002\u3053\u308c\u306b\u306f```full```\u3068```valid```\u304c\u9078\u629e\u53ef\u80fd\u3067\u3059\u3002\u7573\u307f\u8fbc\u307f\u306f\u753b\u50cf\u306b\u5bfe\u3057\u30d5\u30a3\u30eb\u30bf\u3092\u52d5\u304b\u3057\u306a\u304c\u3089\u639b\u3051\u7b97\u3057\u3066\u7dcf\u548c\u3092\u53d6\u308b\u306e\u3067\u3059\u304c\u3001```full```\u306f\u753b\u50cf\u306b\u5bfe\u3057\u30d5\u30a3\u30eb\u30bf\u304c\u306f\u307f\u51fa\u3057\u3066\u3044\u3066\u3082\u3001\u8981\u7d20\u306e\u6700\u4f4e\u4e00\u3064\u304c\u91cd\u306a\u3063\u3066\u3044\u308b\u72b6\u614b\u306e\u7d50\u679c\u3092\u51fa\u529b\u306b\u542b\u3080\u30e2\u30fc\u30c9\u3001```valid```\u306f\u753b\u50cf\u306b\u5bfe\u3057\u30d5\u30a3\u30eb\u30bf\u304c\u306f\u307f\u51fa\u3057\u3066\u3044\u306a\u3044\u72b6\u614b\u306e\u7d50\u679c\u306e\u307f\u51fa\u529b\u3068\u3059\u308b\u30e2\u30fc\u30c9\u3067\u3059\u3002\u3042\u308b\u8ef8\u306e\u753b\u50cf\u3068\u30d5\u30a3\u30eb\u30bf\u306e\u30b5\u30a4\u30ba\u304c\u305d\u308c\u305e\u308c$M,m$\u306e\u6642\u3001\u51fa\u529b\u3055\u308c\u308b\u914d\u5217\u306e\u3042\u308b\u8ef8\u306e\u30b5\u30a4\u30ba\u306f```full```\u3067\u306f$M+(m-1)$\u3001```valid```\u3067\u306f$M-(m-1)$\u306b\u306a\u308a\u307e\u3059\u3002\u4e0a\u306e\u4f8b\u3067\u306f\u9ad8\u3055(or\u5e45)\u304c$M=5,m=3$\u306a\u306e\u3067\u3001```full```\u306e\u66427\u3001```valid```\u306e\u66423\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u51fa\u529b\u3092\u78ba\u8a8d\u3059\u308b\u3068\u3001```theano.tensor.nnet.conv()```\u3068```scipy.signal.fftconvolve()```\u3067(\u914d\u5217\u306e\u30e9\u30f3\u30af\u3092\u9664\u3044\u3066)\u7b49\u3057\u3044\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n\u305f\u3060\u3057\u4e21\u8005\u306e\u51fa\u529b\u306f\u610f\u5473\u5408\u3044\u304c\u7570\u306a\u3063\u3066\u3044\u307e\u3059\u3002```scipy.signal.fftconvolve()```\u304c\u7d14\u7c8b\u306aN\u6b21\u5143\u306e\u7573\u307f\u8fbc\u307f\u306e\u7d50\u679c\u3092\u8fd4\u3059\u306e\u306b\u5bfe\u3057\u3066\u3001```theano.tensor.nnet.conv()```\u306f\u753b\u50cf\u679a\u6570\u6bce\u3001\u30d5\u30a3\u30eb\u30bf\u6bce\u306e\u7573\u307f\u8fbc\u307f\u306e\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002\u51fa\u529b\u914d\u5217\u306f```[\u753b\u50cf\u679a\u6570\u3001\u30d5\u30a1\u30a4\u30eb\u679a\u6570\u3001\u9ad8\u3055\u3001\u5e45]```\u3067\u3059\u3002\u307e\u305f\u3001\u5f8c\u8ff0\u3057\u307e\u3059\u304c```theano.tensor.nnet.conv()```\u306f\u30c1\u30e3\u30cd\u30eb\u6570\u304c\u753b\u50cf\u3068\u30d5\u30a3\u30eb\u30bf\u3068\u3067\u7b49\u3057\u304f\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002\n\n# \u753b\u50cf\u679a\u6570\u3001\u30c1\u30e3\u30cd\u30eb\u6570\u306e\u6b21\u5143\u3092\u52a0\u3048\u305f\u5834\u5408\u306e\u30b3\u30f3\u30dc\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\n\n\u6b21\u306f\u753b\u50cf\u679a\u6570\u3068\u30c1\u30e3\u30cd\u30eb\u6570\u306e\u6b21\u5143\u3092\u52a0\u3048\u305f\u30b3\u30f3\u30dc\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3044\u307e\u3059\u3002\u753b\u50cf\u679a\u65702\u679a\u3001\u30c1\u30e3\u30cd\u30eb\u65703\u30675x5\u306e\u753b\u50cf\u306b\u5bfe\u3057\u3001\u753b\u50cf\u679a\u65701\u3001\u30c1\u30e3\u30cd\u30eb\u65703\u30673x3\u306e\u30d5\u30a3\u30eb\u30bf\u3092\u7573\u307f\u8fbc\u307f\u307e\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```python\nm = T.tensor4()\nw = T.tensor4()\n\n#\u30e9\u30f3\u30af4\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\no_full = nnet.conv.conv2d(m, w,\n                          border_mode='full')\no_valid = nnet.conv.conv2d(m, w,\n                          border_mode='valid')\n\nm_arr = arange(2*3*5*5).reshape((2, 3, 5, 5)).astype(float32)\nw_arr = ones((1,3,3,3)).astype(float32)\nprint(\"m_arr =\")\nprint(m_arr)\nprint(\"w_arr =\")\nprint(w_arr)\n\nprint(\"Output for Theano.\")\nprint(\"full:\")\nprint(o_full.eval({m:m_arr, w:w_arr}).round().astype(int))\nprint(\"valid:\")\nprint(o_valid.eval({m:m_arr, w:w_arr}).round().astype(int))\n\nprint(\"Output for scipy.\")\nprint(\"full:\")\nprint(s.fftconvolve(m_arr, w_arr, \"full\").round().astype(int))\nprint(\"valid:\")\nprint(s.fftconvolve(m_arr, w_arr, \"valid\").round().astype(int))\n```\n\n\u30e9\u30f3\u30af4\u306e\u30c6\u30f3\u30bd\u30eb\u3092\u8a2d\u5b9a\u3059\u308b\u305f\u3081\u306b```m```\u3068```w```\u306b```T.tensor4()```\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n```txt\nm_arr =\n[[[[   0.    1.    2.    3.    4.]\n   [   5.    6.    7.    8.    9.]\n   [  10.   11.   12.   13.   14.]\n   [  15.   16.   17.   18.   19.]\n   [  20.   21.   22.   23.   24.]]\n\n  [[  25.   26.   27.   28.   29.]\n   [  30.   31.   32.   33.   34.]\n   [  35.   36.   37.   38.   39.]\n   [  40.   41.   42.   43.   44.]\n   [  45.   46.   47.   48.   49.]]\n\n  [[  50.   51.   52.   53.   54.]\n   [  55.   56.   57.   58.   59.]\n   [  60.   61.   62.   63.   64.]\n   [  65.   66.   67.   68.   69.]\n   [  70.   71.   72.   73.   74.]]]\n\n\n [[[  75.   76.   77.   78.   79.]\n   [  80.   81.   82.   83.   84.]\n   [  85.   86.   87.   88.   89.]\n   [  90.   91.   92.   93.   94.]\n   [  95.   96.   97.   98.   99.]]\n\n  [[ 100.  101.  102.  103.  104.]\n   [ 105.  106.  107.  108.  109.]\n   [ 110.  111.  112.  113.  114.]\n   [ 115.  116.  117.  118.  119.]\n   [ 120.  121.  122.  123.  124.]]\n\n  [[ 125.  126.  127.  128.  129.]\n   [ 130.  131.  132.  133.  134.]\n   [ 135.  136.  137.  138.  139.]\n   [ 140.  141.  142.  143.  144.]\n   [ 145.  146.  147.  148.  149.]]]]\nw_arr =\n[[[[ 1.  1.  1.]\n   [ 1.  1.  1.]\n   [ 1.  1.  1.]]\n\n  [[ 1.  1.  1.]\n   [ 1.  1.  1.]\n   [ 1.  1.  1.]]\n\n  [[ 1.  1.  1.]\n   [ 1.  1.  1.]\n   [ 1.  1.  1.]]]]\nOutput for Theano.\nfull:\n[[[[  75  153  234  243  252  171   87]\n   [ 165  336  513  531  549  372  189]\n   [ 270  549  837  864  891  603  306]\n   [ 315  639  972  999 1026  693  351]\n   [ 360  729 1107 1134 1161  783  396]\n   [ 255  516  783  801  819  552  279]\n   [ 135  273  414  423  432  291  147]]]\n\n\n [[[ 300  603  909  918  927  621  312]\n   [ 615 1236 1863 1881 1899 1272  639]\n   [ 945 1899 2862 2889 2916 1953  981]\n   [ 990 1989 2997 3024 3051 2043 1026]\n   [1035 2079 3132 3159 3186 2133 1071]\n   [ 705 1416 2133 2151 2169 1452  729]\n   [ 360  723 1089 1098 1107  741  372]]]]\nvalid:\n[[[[ 837  864  891]\n   [ 972  999 1026]\n   [1107 1134 1161]]]\n\n\n [[[2862 2889 2916]\n   [2997 3024 3051]\n   [3132 3159 3186]]]]\nOutput for scipy.\nfull:\n[[[[   0    1    3    6    9    7    4]\n   [   5   12   21   27   33   24   13]\n   [  15   33   54   63   72   51   27]\n   [  30   63   99  108  117   81   42]\n   [  45   93  144  153  162  111   57]\n   [  35   72  111  117  123   84   43]\n   [  20   41   63   66   69   47   24]]\n\n  [[  25   52   81   87   93   64   33]\n   [  60  124  192  204  216  148   76]\n   [ 105  216  333  351  369  252  129]\n   [ 135  276  423  441  459  312  159]\n   [ 165  336  513  531  549  372  189]\n   [ 120  244  372  384  396  268  136]\n   [  65  132  201  207  213  144   73]]\n\n  [[  75  153  234  243  252  171   87]\n   [ 165  336  513  531  549  372  189]\n   [ 270  549  837  864  891  603  306]\n   [ 315  639  972  999 1026  693  351]\n   [ 360  729 1107 1134 1161  783  396]\n   [ 255  516  783  801  819  552  279]\n   [ 135  273  414  423  432  291  147]]\n\n  [[  75  152  231  237  243  164   83]\n   [ 160  324  492  504  516  348  176]\n   [ 255  516  783  801  819  552  279]\n   [ 285  576  873  891  909  612  309]\n   [ 315  636  963  981  999  672  339]\n   [ 220  444  672  684  696  468  236]\n   [ 115  232  351  357  363  244  123]]\n\n  [[  50  101  153  156  159  107   54]\n   [ 105  212  321  327  333  224  113]\n   [ 165  333  504  513  522  351  177]\n   [ 180  363  549  558  567  381  192]\n   [ 195  393  594  603  612  411  207]\n   [ 135  272  411  417  423  284  143]\n   [  70  141  213  216  219  147   74]]]\n\n\n [[[  75  151  228  231  234  157   79]\n   [ 155  312  471  477  483  324  163]\n   [ 240  483  729  738  747  501  252]\n   [ 255  513  774  783  792  531  267]\n   [ 270  543  819  828  837  561  282]\n   [ 185  372  561  567  573  384  193]\n   [  95  191  288  291  294  197   99]]\n\n  [[ 175  352  531  537  543  364  183]\n   [ 360  724 1092 1104 1116  748  376]\n   [ 555 1116 1683 1701 1719 1152  579]\n   [ 585 1176 1773 1791 1809 1212  609]\n   [ 615 1236 1863 1881 1899 1272  639]\n   [ 420  844 1272 1284 1296  868  436]\n   [ 215  432  651  657  663  444  223]]\n\n  [[ 300  603  909  918  927  621  312]\n   [ 615 1236 1863 1881 1899 1272  639]\n   [ 945 1899 2862 2889 2916 1953  981]\n   [ 990 1989 2997 3024 3051 2043 1026]\n   [1035 2079 3132 3159 3186 2133 1071]\n   [ 705 1416 2133 2151 2169 1452  729]\n   [ 360  723 1089 1098 1107  741  372]]\n\n  [[ 225  452  681  687  693  464  233]\n   [ 460  924 1392 1404 1416  948  476]\n   [ 705 1416 2133 2151 2169 1452  729]\n   [ 735 1476 2223 2241 2259 1512  759]\n   [ 765 1536 2313 2331 2349 1572  789]\n   [ 520 1044 1572 1584 1596 1068  536]\n   [ 265  532  801  807  813  544  273]]\n\n  [[ 125  251  378  381  384  257  129]\n   [ 255  512  771  777  783  524  263]\n   [ 390  783 1179 1188 1197  801  402]\n   [ 405  813 1224 1233 1242  831  417]\n   [ 420  843 1269 1278 1287  861  432]\n   [ 285  572  861  867  873  584  293]\n   [ 145  291  438  441  444  297  149]]]]\nvalid:\n[[[[ 837  864  891]\n   [ 972  999 1026]\n   [1107 1134 1161]]]\n\n\n [[[2862 2889 2916]\n   [2997 3024 3051]\n   [3132 3159 3186]]]]\n```\n\n\u9577\u304f\u3066\u6bd4\u8f03\u3057\u3065\u3089\u3044\u306e\u3067\u3059\u304c\u3001```valid```\u306f\u540c\u3058\u3067\u3059\u304c\u3001```full```\u306f\u4e21\u8005\u3067\u7d50\u679c\u304c\u7570\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u305d\u3053\u3067\u3001\u51fa\u529b\u5f8c\u306e\u914d\u5217\u306eshape\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\n```python\nprint(\"Output for Theano.\")\nprint(\"full:\")\nprint(o_full.eval({m:m_arr, w:w_arr}).round().astype(int).shape)\nprint(\"valid:\")\nprint(o_valid.eval({m:m_arr, w:w_arr}).round().astype(int).shape)\n\nprint(\"Output for scipy.\")\nprint(\"full:\")\nprint(s.fftconvolve(m_arr, w_arr, \"full\").round().astype(int).shape)\nprint(\"valid:\")\nprint(s.fftconvolve(m_arr, w_arr, \"valid\").round().astype(int).shape)\n```\n\n```txt\nOutput for Theano.\nfull:\n(2, 1, 7, 7)\nvalid:\n(2, 1, 3, 3)\nOutput for scipy.\nfull:\n(2, 5, 7, 7)\nvalid:\n(2, 1, 3, 3)\n```\n\n\u3053\u308c\u306f\u3001```scipy.signal.fftconvolve()```\u304c\u7573\u307f\u8fbc\u307f\u64cd\u4f5c\u3092\u753b\u50cf\u679a\u6570\u53ca\u3073\u30c1\u30e3\u30cd\u30eb\u6570\u306e\u8ef8\u306b\u95a2\u3057\u3066\u3082\u884c\u3063\u3066\u3044\u308b\u306e\u306b\u5bfe\u3057\u3066\u3001```theano.tensor.nnet.conv()```\u3067\u306f\u753b\u50cf\u306e\u5e45\u3001\u9ad8\u3055\u306e\u6b21\u5143\u3067\u3057\u304b\u884c\u308f\u305a\u3001\u753b\u50cf\u679a\u6570\u3068\u30c1\u30e3\u30cd\u30eb\u6570\u306b\u5bfe\u3057\u3066\u306f\u72ec\u7acb\u306b\u51e6\u7406\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u8d77\u56e0\u3057\u307e\u3059\u3002\u305d\u3057\u3066\u3001```theano.tensor.nnet.conv()```\u306e\u51fa\u529b\u306f```[\u753b\u50cf\u679a\u6570\u3001\u30d5\u30a3\u30eb\u30bf\u679a\u6570\u3001\u9ad8\u3055\u3001\u5e45]```\u306a\u306e\u3067\u3001shape\u306e2\u756a\u76ee\u306f1\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u307e\u305f\u3001```theano.tensor.nnet.conv()```\u306f\u4e0a\u8ff0\u306e\u69d8\u306b\u30c1\u30e3\u30cd\u30eb\u6570\u3092\u753b\u50cf\u3068\u30d5\u30a3\u30eb\u30bf\u3068\u3067\u5408\u308f\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\n\n```python\nm_arr = arange(2*3*5*5).reshape((2, 3, 5, 5)).astype(float32)\nw_arr = ones((1,1,3,3)).astype(float32)\n```\n\n\u306e\u3088\u3046\u306b\u753b\u50cf\u306e\u30c1\u30e3\u30cd\u30eb\u6570\u304c3\u306b\u5bfe\u3057\u3066\u3001\u30d5\u30a3\u30eb\u30bf\u306e\u30c1\u30e3\u30cd\u30eb\u6570\u304c1\u306e\u5834\u5408\u306f```theano.tensor.nnet.conv()```\u3067\u306f\u4ee5\u4e0b\u306e\u30a8\u30e9\u30fc\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\n\n```python\nValueError: GpuDnnConv images and kernel must have the same stack size\n```\n\n\u305f\u3060\u3057\u3001```scipy.signal.fftconvolve()```\u3067\u306f\u914d\u5217\u306eshape\u304c\n\n```txt\nOutput for scipy.\nfull:\n(2, 3, 7, 7)\nvalid:\n(2, 3, 3, 3)\n```\n\n\u306e\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002```full```\u3067\u306f$M+(m-1)$\u3001```valid```\u3067\u306f$M-(m-1)$\u306e\u3068\u304a\u308a\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u6700\u5f8c\u306b\u3001\u753b\u50cf\u679a\u65702\u3001\u30d5\u30a3\u30eb\u30bf\u679a\u65703\u3001\u30c1\u30e3\u30cd\u30eb\u65701\u3067\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\u307e\u305f\u3001\u914d\u5217\u306e\u8981\u7d20\u6570\u3092\u6e1b\u3089\u3057\u307e\u3057\u305f\u3002\n\n```python\nm = T.tensor4()\nw = T.tensor4()\n\n#\u30e9\u30f3\u30af4\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\no_full = nnet.conv.conv2d(m, w,\n                          border_mode='full')\no_valid = nnet.conv.conv2d(m, w,\n                          border_mode='valid')\n\nm_arr = arange(2*1*3*3).reshape((2, 1, 3, 3)).astype(float32)\nw_arr = ones((3,1,1,1)).astype(float32)\nprint(\"m_arr =\")\nprint(m_arr)\nprint(\"w_arr =\")\nprint(w_arr)\n\nprint(\"Output for Theano.\")\nprint(\"full:\")\nprint(o_full.eval({m:m_arr, w:w_arr}).round().astype(int))\nprint(\"valid:\")\nprint(o_valid.eval({m:m_arr, w:w_arr}).round().astype(int))\n\nprint(\"Output for scipy.\")\nprint(\"full:\")\nprint(s.fftconvolve(m_arr, w_arr, \"full\").round().astype(int))\nprint(\"valid:\")\nprint(s.fftconvolve(m_arr, w_arr, \"valid\").round().astype(int))\n```\n\n```txt\nm_arr =\n[[[[  0.   1.   2.]\n   [  3.   4.   5.]\n   [  6.   7.   8.]]]\n\n\n [[[  9.  10.  11.]\n   [ 12.  13.  14.]\n   [ 15.  16.  17.]]]]\nw_arr =\n[[[[ 1.]]]\n\n\n [[[ 1.]]]\n\n\n [[[ 1.]]]]\nOutput for Theano.\nfull:\n[[[[ 0  1  2]\n   [ 3  4  5]\n   [ 6  7  8]]\n\n  [[ 0  1  2]\n   [ 3  4  5]\n   [ 6  7  8]]\n\n  [[ 0  1  2]\n   [ 3  4  5]\n   [ 6  7  8]]]\n\n\n [[[ 9 10 11]\n   [12 13 14]\n   [15 16 17]]\n\n  [[ 9 10 11]\n   [12 13 14]\n   [15 16 17]]\n\n  [[ 9 10 11]\n   [12 13 14]\n   [15 16 17]]]]\nvalid:\n[[[[ 0  1  2]\n   [ 3  4  5]\n   [ 6  7  8]]\n\n  [[ 0  1  2]\n   [ 3  4  5]\n   [ 6  7  8]]\n\n  [[ 0  1  2]\n   [ 3  4  5]\n   [ 6  7  8]]]\n\n\n [[[ 9 10 11]\n   [12 13 14]\n   [15 16 17]]\n\n  [[ 9 10 11]\n   [12 13 14]\n   [15 16 17]]\n\n  [[ 9 10 11]\n   [12 13 14]\n   [15 16 17]]]]\nOutput for scipy.\nfull:\n[[[[ 0  1  2]\n   [ 3  4  5]\n   [ 6  7  8]]]\n\n\n [[[ 9 11 13]\n   [15 17 19]\n   [21 23 25]]]\n\n\n [[[ 9 11 13]\n   [15 17 19]\n   [21 23 25]]]\n\n\n [[[ 9 10 11]\n   [12 13 14]\n   [15 16 17]]]]\nvalid:\nValueError: For 'valid' mode, one must be at least as large as the other in every dimension\n```\n\nscipy.signal.fftconvolve()\u306e```valid```\u304c\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002```valid```\u306e\u5834\u5408\u3001\u753b\u50cf\u3068\u30d5\u30a3\u30eb\u30bf\u306e\u3044\u305a\u308c\u304b\u304c\u7247\u65b9\u3088\u308a\u3082\u3059\u3079\u3066\u306e\u6b21\u5143\u3067\u5927\u304d\u304f\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3088\u3046\u3067\u3059\u3002\n\n\u914d\u5217\u306eshape\u306f\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\n\n```txt\nOutput for Theano.\nfull:\n(2, 3, 3, 3)\nvalid:\n(2, 3, 3, 3)\nOutput for scipy.\nfull:\n(4, 1, 3, 3)\nvalid:\n```\n\n\u3000```theano.tensor.nnet.conv()```\u306fshape\u306e1,2\u756a\u76ee\u304c\u305d\u308c\u305e\u308c\u753b\u50cf\u679a\u6570\u3001\u30d5\u30a3\u30eb\u30bf\u679a\u6570\u3067\u3001\u6b8b\u308a\u304c```full```\u3067\u306f$M+(m-1)$\u3001```valid```\u3067\u306f$M-(m-1)$\u306b\u306a\u3063\u3066\u304a\u308a\u3001```scipy.signal.fftconvolve()```\u306f\u3059\u3079\u3066\u306e\u8ef8\u306b\u5bfe\u3057\u3066```full```\u3067\u306f$M+(m-1)$\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n#\u30b9\u30c8\u30e9\u30a4\u30c9\n\n\n\n\n", "tags": ["Theano", "ConvolutionalNeuralNetworks", "convolution", "DeepLearning", "Python"]}