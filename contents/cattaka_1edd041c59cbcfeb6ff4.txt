{"context": " More than 1 year has passed since last update.\n\n\u9762\u5012\u81ed\u3044\u3092\u7c21\u5358\u306b\u3059\u308b\nAndroid\u3067SQLiteDatabase\u3092\u4f7f\u3046\u3068\u304d\u3001\u3044\u308d\u3044\u308d\u3068\u9762\u5012\u81ed\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\n\u7279\u306b\u6a19\u6e96\u3067O/R\u30de\u30c3\u30d1\u30fc\u7121\u3044\u306e\u3067\u81ea\u5206\u3067\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\u5df7\u306b\u3044\u308d\u3044\u308d\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3069\u308c\u3082\u91cd\u91cf\u7d1a\u3067\u3001\n\u3061\u3087\u3063\u3068\u6a5f\u80fd\u3092\u4f7f\u3044\u305f\u3044\u3060\u3051\u3067\u3082\u3044\u308d\u3044\u308d\u3084\u3089\u306a\u3044\u3068\u884c\u3051\u306a\u3044\u3067\u3059\u3002\nSELECT\u3001INSERT\u3001UPDATE\u3001DELETE\u306e\u305d\u308c\u305e\u308c\u306e\u5c0f\u3055\u3044\u30b3\u30fc\u30c9\u3092\nAPT(Annotation Processing Tool)\u3067\u81ea\u52d5\u751f\u6210\u3059\u308b\u30c4\u30fc\u30eb\u3001CatHandsGendroid\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n\u516c\u5f0fURL\nWiki\n[\u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea] https://github.com/cattaka/FastCheckList\n\n\n\n\u3069\u3046\u7c21\u5358\u3057\u305f\u3044\u304b\n\u4f8b\u3048\u3070\u3001\u6b21\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u304c\u3042\u308b\u3068\u3057\u307e\u3059\u3002\npublic class UserModel {\n    public enum Role {\n        PROGRAMMER, DESIGNNER, MANAGER\n    }\n    public enum Authority {\n        USER, ADMIN\n    }\n    private Long id;\n    private String username;\n    private String nickname;\n    private String team;\n    private Role role;\n    private Date createdAt;\n    private List<String> tags;\n\n    /* Getter\u3068Setter\u306f\u7701\u7565 */\n}\n\n\u3053\u306e\u30e2\u30c7\u30eb\u30af\u30e9\u30b9\u306b\u306f\u6b21\u306e\u3088\u3046\u306a\u5b9a\u7fa9\u3084\u30e1\u30bd\u30c3\u30c9\u304c\u6b32\u3057\u304f\u306a\u308a\u307e\u3059\u3088\u306d\u3002\n    /** CREATE\u6587\u306eSQL */\n    public static final String SQL_CREATE_TABLE = \"CREATE TABLE userModel(id INTEGER PRIMARY KEY AUTOINCREMENT,username TEXT,nickname TEXT,team TEXT,role TEXT,createdAt INTEGER,tags BLOB,authority INTEGER,blob BLOB,booleanData INTEGER,byteData INTEGER,charData INTEGER)\";\n    /** id\u6307\u5b9a\u3067Cursor\u3092\u53d6\u5f97\u3059\u308b\u30e1\u30bd\u30c3\u30c9 */\n    public static Cursor findCursorById(SQLiteDatabase db, java.lang.Long id) {\n        String selection = \"id=?\";\n        String[] selectionArgs = new String[]{Accessor.toString(id)};\n        return db.query(TABLE_NAME, COLUMNS_ARRAY, selection, selectionArgs, null, null, null);\n    }\n    /** id\u6307\u5b9a\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\u3059\u308b\u30e1\u30bd\u30c3\u30c9 */\n    public static UserModel findById(SQLiteDatabase db, java.lang.Long id) {\n        Cursor cursor = findCursorById(db, id);\n        UserModel model = (cursor.moveToNext()) ? readCursorByIndex(cursor) : null;\n        cursor.close();\n        return model;\n    }\n    /** UserModel\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u308a\u3001Cursor\u304b\u3089\u306e\u5024\u3092\u8a2d\u5b9a\u3057\u3066\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9 */\n    public static UserModel readCursorByIndex(Cursor cursor) {\n        UserModel result = new UserModel();\n        readCursorByIndex(cursor, result);\n        return result;\n    }\n    /** Cursor\u304b\u3089UserModel\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u5024\u3092\u8aad\u307f\u51fa\u3059\u5024\u3092\u8a2d\u5b9a\u3057\u3066\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9 */\n    public static void readCursorByIndex(Cursor cursor, UserModel dest) {\n        dest.setId(ACCESSOR_ID.readFromCursor(cursor, 0));\n        dest.setUsername(ACCESSOR_USERNAME.readFromCursor(cursor, 1));\n        dest.setNickname(ACCESSOR_NICKNAME.readFromCursor(cursor, 2));\n        dest.setTeam(ACCESSOR_TEAM.readFromCursor(cursor, 3));\n        dest.setRole(ACCESSOR_ROLE.readFromCursor(cursor, 4));\n        dest.setCreatedAt(ACCESSOR_CREATED_AT.readFromCursor(cursor, 5));\n        dest.setTags(ACCESSOR_TAGS.readFromCursor(cursor, 6));\n        dest.setAuthority(ACCESSOR_AUTHORITY.readFromCursor(cursor, 7));\n        dest.setBlob(ACCESSOR_BLOB.readFromCursor(cursor, 8));\n        dest.setBooleanData(ACCESSOR_BOOLEAN_DATA.readFromCursor(cursor, 9));\n        dest.setByteData(ACCESSOR_BYTE_DATA.readFromCursor(cursor, 10));\n        dest.setCharData(ACCESSOR_CHAR_DATA.readFromCursor(cursor, 11));\n    }\n    /** \u30e2\u30c7\u30eb\u30af\u30e9\u30b9\u306e\u5024\u3092ContentValues\u306b\u8a2d\u5b9a\u3059\u308b\u30e1\u30bd\u30c3\u30c9 */\n    public static void putToContentValues(ContentValues dest, UserModel model,\n            boolean withPrimaryKey) {\n        if (withPrimaryKey) {\n            ACCESSOR_ID.putToContentValues(dest, \"id\", model.getId());\n        }\n\n        ACCESSOR_USERNAME.putToContentValues(dest, \"username\", model.getUsername());\n        ACCESSOR_NICKNAME.putToContentValues(dest, \"nickname\", model.getNickname());\n        ACCESSOR_TEAM.putToContentValues(dest, \"team\", model.getTeam());\n        ACCESSOR_ROLE.putToContentValues(dest, \"role\", model.getRole());\n        ACCESSOR_CREATED_AT.putToContentValues(dest, \"createdAt\", model.getCreatedAt());\n        ACCESSOR_TAGS.putToContentValues(dest, \"tags\", model.getTags());\n        ACCESSOR_AUTHORITY.putToContentValues(dest, \"authority\", model.getAuthority());\n        ACCESSOR_BLOB.putToContentValues(dest, \"blob\", model.getBlob());\n        ACCESSOR_BOOLEAN_DATA.putToContentValues(dest, \"booleanData\", model.getBooleanData());\n        ACCESSOR_BYTE_DATA.putToContentValues(dest, \"byteData\", model.getByteData());\n        ACCESSOR_CHAR_DATA.putToContentValues(dest, \"charData\", model.getCharData());\n    }\n    /** INSERT\u3059\u308b\u30e1\u30bd\u30c3\u30c9 */\n    public static long insert(SQLiteDatabase db, UserModel model) {\n        ContentValues values = new ContentValues();\n        putToContentValues(values, model, false);\n        long key = db.insert(TABLE_NAME, null, values);\n        model.setId((long)key);\n        return key;\n    }\n\n    /** UPDATE\u3059\u308b\u30e1\u30bd\u30c3\u30c9 */\n    public static int update(SQLiteDatabase db, UserModel model) {\n        ContentValues values = new ContentValues();\n        String whereClause = \"id=?\";\n        String[] whereArgs = new String[] {\n            ACCESSOR_ID.stringValue(model.getId())\n        };\n        putToContentValues(values, model, false);\n        return db.update(TABLE_NAME, values, whereClause, whereArgs);\n    }\n\n    /** DELETE\u3059\u308b\u30e1\u30bd\u30c3\u30c9 */\n    public static int delete(SQLiteDatabase db, Long key) {\n        String whereClause = \"id=?\";\n        String[] whereArgs = new String[] {\n            ACCESSOR_ID.stringValue(key)\n        };\n        return db.delete(TABLE_NAME, whereClause, whereArgs);\n    }\n\n\u3061\u3087\u3063\u3068\u5c0f\u51fa\u3057\u306b\u3057\u305f\u306e\u3067\u6570\u304c\u5897\u3048\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\u3001\n\u7c21\u5358\u306b\u306fSELECT\u3001INSERT\u3001UPGRADE\u3001DELETE\u306e\u305d\u308c\u305e\u308c\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u6b32\u3057\u304f\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\nCatHandsGendroid\u3067\u306f\u3001\u3053\u308c\u3089\u3092\u5168\u3066APT\u306b\u3088\u308a\u81ea\u52d5\u751f\u6210\u3057\u3066\u304f\u308c\u307e\u3059\u3002\nAPT\u306b\u3088\u308b\u751f\u6210\u3067\u3042\u308b\u305f\u3081\u3001\u751f\u6210\u3055\u308c\u305f\u30b3\u30fc\u30c9\u3092\u898b\u308c\u3070\u3069\u3046\u3044\u3063\u305f\u52d5\u304d\u3092\u3057\u3066\u3044\u308b\u306e\u304b\u3082\u76f4\u3050\u306b\u308f\u304b\u308a\u307e\u3059\u3002\n\n\u4f7f\u3044\u65b9\uff1aAPT\u306e\u8a2d\u5b9a\u7de8\n\u307e\u305aAPT\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u3001\u305d\u308c\u7528\u306e\u8a2d\u5b9a\u3092build.gradle\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\n[\u30eb\u30fc\u30c8]/build.gradle\u306ebuildscript\u306e\u30d6\u30ed\u30c3\u30af\u306b\"classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'\"\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:0.12.2'\n        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'\n    }\n}\n\n\u6b21\u306b[\u30eb\u30fc\u30c8]/[app]/build.gradle\u306b\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nresourcePackageName\u306e\u90e8\u5206\u306f\u9069\u5b9c\u3001\u81ea\u5206\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u5408\u308f\u305b\u3066\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\napply plugin: 'com.neenbedankt.android-apt'\napt {\n    arguments {\n        androidManifestFile variant.processResources.manifestFile\n        resourcePackageName 'com.myproject.package'\n    }\n}\n\n\u3053\u3053\u307e\u3067\u3067APT\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u6700\u5f8c\u306bCatHandsGendroid\u3092dependancies\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\ndependencies {\n    apt 'net.cattaka:cathandsgendroid-apt:0.4.4'\n    compile 'net.cattaka:cathandsgendroid-core:0.4.4'\n}\n\n\u6700\u65b0\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f http://mvnrepository.com/artifact/net.cattaka/ \u306b\u3066\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4ee5\u4e0a\u3067CatHandsGendroid\u3092\u4f7f\u3046\u8a2d\u5b9a\u304c\u5b8c\u4e86\u3067\u3059\u3002\n\n\u4f7f\u3044\u65b9\uff1a\u30e2\u30c7\u30eb\u30af\u30e9\u30b9\u306e\u4f5c\u6210\u7de8\n\u4f7f\u3044\u65b9\u306f\u7c21\u5358\u3001\u76ee\u7684\u3067\u3042\u308b\u30e2\u30c7\u30eb\u30af\u30e9\u30b9\u306b@DataModel\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u3001\u4e3b\u30ad\u30fc\u3092\u6307\u5b9a\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n@DataModel\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306b\u306f\u3001find\u5c5e\u6027\u306b\u691c\u7d22\u306b\u4f7f\u3046\u9805\u76ee\u3092\u6307\u5b9a\u3057\u305f\u308a\u3001unique\u3067\u3042\u308b\u3079\u304d\u9805\u76ee\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4e3b\u30ad\u30fc\u3068\u3059\u308b\u9805\u76ee\u306b\u306f@DataModelAttrs(primaryKey = true)\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4ed8\u4e0e\u3057\u307e\u3059\u3002\n@DataModel(find = {\n        \"id\", \"username\", \"team:role+,id\", \"team:id-\", \":id\", \"authority:id+\"\n}, unique = {\n    \"username\"\n})\npublic class UserModel {\n    public enum Role {\n        PROGRAMMER, DESIGNNER, MANAGER\n    }\n    public enum Authority {\n        USER, ADMIN\n    }\n    @DataModelAttrs(primaryKey = true)\n    private Long id;\n    private String username;\n    private String nickname;\n    private String team;\n    private Role role;\n    private Date createdAt;\n    private List<String> tags;\n\n    /* Getter\u3068Setter\u306f\u7701\u7565 */\n}\n\n\u3053\u306e\u72b6\u614b\u3067\u30d3\u30eb\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001APT\u304c\u5b9f\u884c\u3055\u308c\u6b21\u306e\u3088\u3046\u306aSQLiteDatabase\u3092\u4f7f\u3046\u306e\u306b\u4fbf\u5229\u306a\u30af\u30e9\u30b9\u304c\u81ea\u52d5\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\u81ea\u52d5\u751f\u6210\u3055\u308c\u308b\u30af\u30e9\u30b9\u306e\u540d\u524d\u306f<\u30e2\u30c7\u30eb\u30af\u30e9\u30b9\u540d>+CatHands\u3067\u3059\u3002\n@DataModel\u306efind\u5c5e\u6027\u3067\u6307\u5b9a\u3057\u305f\u7d44\u307f\u5408\u308f\u305b\u304c\u3001unique\u5c5e\u6027\u306e\u3082\u306e\u3092\u5168\u3066\u542b\u3080\u5834\u5408\u306f\u623b\u308a\u5024\u304c\u5358\u4e00\u53d6\u5f97\u306b\u3001\n\u542b\u307e\u306a\u3044\u5834\u5408\u306f\u8907\u6570\u53d6\u5f97\u3068\u3057\u3066\u623b\u308a\u5024\u304cList\u306b\u306a\u308b\u306a\u3069\u3001\u30a2\u30d7\u30ea\u4f5c\u6210\u304c\u697d\u306b\u306a\u308b\u3088\u3046\u306b\u3082\u5de5\u592b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\npublic class UserModelCatHands {\n    public static final IAccessor<Long> ACCESSOR_ID;\n    public static final IAccessor<String> ACCESSOR_USERNAME;\n    public static final IAccessor<String> ACCESSOR_NICKNAME;\n    public static final IAccessor<String> ACCESSOR_TEAM;\n    public static final IAccessor<net.cattaka.util.cathandsgendroid.test.model.UserModel.Role> ACCESSOR_ROLE;\n    public static final IAccessor<java.util.Date> ACCESSOR_CREATED_AT;\n    public static final IAccessor<java.util.List<String>> ACCESSOR_TAGS;\n    public static final IAccessor<net.cattaka.util.cathandsgendroid.test.model.UserModel.Authority> ACCESSOR_AUTHORITY;\n    public static final IAccessor<byte[]> ACCESSOR_BLOB;\n    public static final IAccessor<Boolean> ACCESSOR_BOOLEAN_DATA;\n    public static final IAccessor<Byte> ACCESSOR_BYTE_DATA;\n    public static final IAccessor<Character> ACCESSOR_CHAR_DATA;\n    static {\n        ACCESSOR_ID = Accessors.LongAccessor.createAccessor(Long.class);\n        ACCESSOR_USERNAME = Accessors.StringAccessor.createAccessor(String.class);\n        ACCESSOR_NICKNAME = Accessors.StringAccessor.createAccessor(String.class);\n        ACCESSOR_TEAM = Accessors.StringAccessor.createAccessor(String.class);\n        ACCESSOR_ROLE = net.cattaka.util.cathandsgendroid.accessor.EnumNameAccessor\n                .createAccessor(net.cattaka.util.cathandsgendroid.test.model.UserModel.Role.class);\n        ACCESSOR_CREATED_AT = Accessors.DateAccessor.createAccessor(java.util.Date.class);\n        ACCESSOR_TAGS = Accessors.createListAccessor(Accessors.StringAccessor\n                .createAccessor(String.class));\n        ACCESSOR_AUTHORITY = net.cattaka.util.cathandsgendroid.accessor.EnumOrderAccessor\n                .createAccessor(net.cattaka.util.cathandsgendroid.test.model.UserModel.Authority.class);\n        ACCESSOR_BLOB = Accessors.BlobAccessor.createAccessor(byte[].class);\n        ACCESSOR_BOOLEAN_DATA = Accessors.BooleanAccessor.createAccessor(Boolean.class);\n        ACCESSOR_BYTE_DATA = Accessors.ByteAccessor.createAccessor(Byte.class);\n        ACCESSOR_CHAR_DATA = Accessors.CharacterAccessor.createAccessor(Character.class);\n    }\n    public static final String SQL_CREATE_TABLE = \"CREATE TABLE userModel(id INTEGER PRIMARY KEY AUTOINCREMENT,username TEXT,nickname TEXT,team TEXT,role TEXT,createdAt INTEGER,tags BLOB,authority INTEGER,blob BLOB,booleanData INTEGER,byteData INTEGER,charData INTEGER)\";\n    public static final String[] SQL_ALTER_TABLE_1_TO_2 = new String[] {\n            \"ALTER TABLE userModel ADD COLUMN nickname TEXT\",\n            \"ALTER TABLE userModel ADD COLUMN team TEXT\",\n    };\n    public static final String[] SQL_ALTER_TABLE_2_TO_3 = new String[] {\n        \"ALTER TABLE userModel ADD COLUMN authority INTEGER\",\n    };\n    public static void upgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n        if (oldVersion < 2) {\n            for (String sql : SQL_ALTER_TABLE_1_TO_2) {\n                db.execSQL(sql);\n            }\n        }\n        if (oldVersion < 3) {\n            for (String sql : SQL_ALTER_TABLE_2_TO_3) {\n                db.execSQL(sql);\n            }\n        }\n    };\n    public static final String TABLE_NAME = \"userModel\";\n    public static final String COLUMNS = \"id,username,nickname,team,role,createdAt,tags,authority,blob,booleanData,byteData,charData\";\n    public static final String[] COLUMNS_ARRAY = new String[] {\n            \"id\", \"username\", \"nickname\", \"team\", \"role\", \"createdAt\", \"tags\", \"authority\", \"blob\",\n            \"booleanData\", \"byteData\", \"charData\"\n    };\n    public static final int COL_INDEX_ID = 0;\n    public static final int COL_INDEX_USERNAME = 1;\n    public static final int COL_INDEX_NICKNAME = 2;\n    public static final int COL_INDEX_TEAM = 3;\n    public static final int COL_INDEX_ROLE = 4;\n    public static final int COL_INDEX_CREATED_AT = 5;\n    public static final int COL_INDEX_TAGS = 6;\n    public static final int COL_INDEX_AUTHORITY = 7;\n    public static final int COL_INDEX_BLOB = 8;\n    public static final int COL_INDEX_BOOLEAN_DATA = 9;\n    public static final int COL_INDEX_BYTE_DATA = 10;\n    public static final int COL_INDEX_CHAR_DATA = 11;\n    public static final String COL_NAME_ID = \"id\";\n    public static final String COL_NAME_USERNAME = \"username\";\n    public static final String COL_NAME_NICKNAME = \"nickname\";\n    public static final String COL_NAME_TEAM = \"team\";\n    public static final String COL_NAME_ROLE = \"role\";\n    public static final String COL_NAME_CREATED_AT = \"createdAt\";\n    public static final String COL_NAME_TAGS = \"tags\";\n    public static final String COL_NAME_AUTHORITY = \"authority\";\n    public static final String COL_NAME_BLOB = \"blob\";\n    public static final String COL_NAME_BOOLEAN_DATA = \"booleanData\";\n    public static final String COL_NAME_BYTE_DATA = \"byteData\";\n    public static final String COL_NAME_CHAR_DATA = \"charData\";\n\n    public static void readCursorByIndex(Cursor cursor, UserModel dest) {\n\n        dest.setId(ACCESSOR_ID.readFromCursor(cursor, 0));\n        dest.setUsername(ACCESSOR_USERNAME.readFromCursor(cursor, 1));\n        dest.setNickname(ACCESSOR_NICKNAME.readFromCursor(cursor, 2));\n        dest.setTeam(ACCESSOR_TEAM.readFromCursor(cursor, 3));\n        dest.setRole(ACCESSOR_ROLE.readFromCursor(cursor, 4));\n        dest.setCreatedAt(ACCESSOR_CREATED_AT.readFromCursor(cursor, 5));\n        dest.setTags(ACCESSOR_TAGS.readFromCursor(cursor, 6));\n        dest.setAuthority(ACCESSOR_AUTHORITY.readFromCursor(cursor, 7));\n        dest.setBlob(ACCESSOR_BLOB.readFromCursor(cursor, 8));\n        dest.setBooleanData(ACCESSOR_BOOLEAN_DATA.readFromCursor(cursor, 9));\n        dest.setByteData(ACCESSOR_BYTE_DATA.readFromCursor(cursor, 10));\n        dest.setCharData(ACCESSOR_CHAR_DATA.readFromCursor(cursor, 11));\n    }\n\n    public static UserModel readCursorByIndex(Cursor cursor) {\n        UserModel result = new UserModel();\n        readCursorByIndex(cursor, result);\n        return result;\n    }\n\n    public static void readCursorByName(Cursor cursor, UserModel dest) {\n        int idx;\n\n        idx = cursor.getColumnIndex(\"id\");\n        dest.setId(ACCESSOR_ID.readFromCursor(cursor, idx));\n        idx = cursor.getColumnIndex(\"username\");\n        dest.setUsername(ACCESSOR_USERNAME.readFromCursor(cursor, idx));\n        idx = cursor.getColumnIndex(\"nickname\");\n        dest.setNickname(ACCESSOR_NICKNAME.readFromCursor(cursor, idx));\n        idx = cursor.getColumnIndex(\"team\");\n        dest.setTeam(ACCESSOR_TEAM.readFromCursor(cursor, idx));\n        idx = cursor.getColumnIndex(\"role\");\n        dest.setRole(ACCESSOR_ROLE.readFromCursor(cursor, idx));\n        idx = cursor.getColumnIndex(\"createdAt\");\n        dest.setCreatedAt(ACCESSOR_CREATED_AT.readFromCursor(cursor, idx));\n        idx = cursor.getColumnIndex(\"tags\");\n        dest.setTags(ACCESSOR_TAGS.readFromCursor(cursor, idx));\n        idx = cursor.getColumnIndex(\"authority\");\n        dest.setAuthority(ACCESSOR_AUTHORITY.readFromCursor(cursor, idx));\n        idx = cursor.getColumnIndex(\"blob\");\n        dest.setBlob(ACCESSOR_BLOB.readFromCursor(cursor, idx));\n        idx = cursor.getColumnIndex(\"booleanData\");\n        dest.setBooleanData(ACCESSOR_BOOLEAN_DATA.readFromCursor(cursor, idx));\n        idx = cursor.getColumnIndex(\"byteData\");\n        dest.setByteData(ACCESSOR_BYTE_DATA.readFromCursor(cursor, idx));\n        idx = cursor.getColumnIndex(\"charData\");\n        dest.setCharData(ACCESSOR_CHAR_DATA.readFromCursor(cursor, idx));\n    }\n\n    public static UserModel readCursorByName(Cursor cursor) {\n        UserModel result = new UserModel();\n        readCursorByName(cursor, result);\n        return result;\n    }\n\n    public static void putToContentValues(ContentValues dest, UserModel model,\n            boolean withPrimaryKey) {\n        if (withPrimaryKey) {\n            ACCESSOR_ID.putToContentValues(dest, \"id\", model.getId());\n        }\n\n        ACCESSOR_USERNAME.putToContentValues(dest, \"username\", model.getUsername());\n        ACCESSOR_NICKNAME.putToContentValues(dest, \"nickname\", model.getNickname());\n        ACCESSOR_TEAM.putToContentValues(dest, \"team\", model.getTeam());\n        ACCESSOR_ROLE.putToContentValues(dest, \"role\", model.getRole());\n        ACCESSOR_CREATED_AT.putToContentValues(dest, \"createdAt\", model.getCreatedAt());\n        ACCESSOR_TAGS.putToContentValues(dest, \"tags\", model.getTags());\n        ACCESSOR_AUTHORITY.putToContentValues(dest, \"authority\", model.getAuthority());\n        ACCESSOR_BLOB.putToContentValues(dest, \"blob\", model.getBlob());\n        ACCESSOR_BOOLEAN_DATA.putToContentValues(dest, \"booleanData\", model.getBooleanData());\n        ACCESSOR_BYTE_DATA.putToContentValues(dest, \"byteData\", model.getByteData());\n        ACCESSOR_CHAR_DATA.putToContentValues(dest, \"charData\", model.getCharData());\n    }\n\n    public static long insert(SQLiteDatabase db, UserModel model) {\n        ContentValues values = new ContentValues();\n        putToContentValues(values, model, false);\n        long key = db.insert(TABLE_NAME, null, values);\n        model.setId((long)key);\n        return key;\n    }\n\n    public static int update(SQLiteDatabase db, UserModel model) {\n        ContentValues values = new ContentValues();\n        String whereClause = \"id=?\";\n        String[] whereArgs = new String[] {\n            ACCESSOR_ID.stringValue(model.getId())\n        };\n        putToContentValues(values, model, false);\n        return db.update(TABLE_NAME, values, whereClause, whereArgs);\n    }\n\n    public static int delete(SQLiteDatabase db, Long key) {\n        String whereClause = \"id=?\";\n        String[] whereArgs = new String[] {\n            ACCESSOR_ID.stringValue(key)\n        };\n        return db.delete(TABLE_NAME, whereClause, whereArgs);\n    }\n\n    public static UserModel findById(SQLiteDatabase db, Long id) {\n        Cursor cursor = findCursorById(db, id);\n        UserModel model = (cursor.moveToNext()) ? readCursorByIndex(cursor) : null;\n        cursor.close();\n        return model;\n    }\n\n    public static Cursor findCursorById(SQLiteDatabase db, Long id) {\n        String selection = \"id=?\";\n        String[] selectionArgs = new String[] {\n\n            ACCESSOR_ID.stringValue(id),\n        };\n        return db.query(TABLE_NAME, COLUMNS_ARRAY, selection, selectionArgs, null, null, null);\n    }\n\n    public static UserModel findByUsername(SQLiteDatabase db, String username) {\n        Cursor cursor = findCursorByUsername(db, username);\n        UserModel model = (cursor.moveToNext()) ? readCursorByIndex(cursor) : null;\n        cursor.close();\n        return model;\n    }\n\n    public static Cursor findCursorByUsername(SQLiteDatabase db, String username) {\n        String selection = \"username=?\";\n        String[] selectionArgs = new String[] {\n\n            ACCESSOR_USERNAME.stringValue(username),\n        };\n        return db.query(TABLE_NAME, COLUMNS_ARRAY, selection, selectionArgs, null, null, null);\n    }\n\n    public static java.util.List<UserModel> findByTeamOrderByRoleAscAndIdAsc(SQLiteDatabase db,\n            int limit, String team) {\n        Cursor cursor = findCursorByTeamOrderByRoleAscAndIdAsc(db, limit, team);\n        java.util.List<UserModel> result = new java.util.ArrayList<UserModel>();\n        while (cursor.moveToNext()) {\n            result.add(readCursorByIndex(cursor));\n        }\n        cursor.close();\n        return result;\n    }\n\n    public static Cursor findCursorByTeamOrderByRoleAscAndIdAsc(SQLiteDatabase db, int limit,\n            String team) {\n        String selection = \"team=?\";\n        String[] selectionArgs = new String[] {\n\n            ACCESSOR_TEAM.stringValue(team),\n        };\n        String limitStr = (limit > 0) ? String.valueOf(limit) : null;\n\n        String orderBy = \"role asc,id asc\";\n        return db.query(TABLE_NAME, COLUMNS_ARRAY, selection, selectionArgs, null, null, orderBy,\n                limitStr);\n\n    }\n\n    public static java.util.List<UserModel> findByTeamOrderByIdDesc(SQLiteDatabase db, int limit,\n            String team) {\n        Cursor cursor = findCursorByTeamOrderByIdDesc(db, limit, team);\n        java.util.List<UserModel> result = new java.util.ArrayList<UserModel>();\n        while (cursor.moveToNext()) {\n            result.add(readCursorByIndex(cursor));\n        }\n        cursor.close();\n        return result;\n    }\n\n    public static Cursor findCursorByTeamOrderByIdDesc(SQLiteDatabase db, int limit, String team) {\n        String selection = \"team=?\";\n        String[] selectionArgs = new String[] {\n\n            ACCESSOR_TEAM.stringValue(team),\n        };\n        String limitStr = (limit > 0) ? String.valueOf(limit) : null;\n\n        String orderBy = \"id desc\";\n        return db.query(TABLE_NAME, COLUMNS_ARRAY, selection, selectionArgs, null, null, orderBy,\n                limitStr);\n\n    }\n\n    public static java.util.List<UserModel> findOrderByIdAsc(SQLiteDatabase db, int limit) {\n        Cursor cursor = findCursorOrderByIdAsc(db, limit);\n        java.util.List<UserModel> result = new java.util.ArrayList<UserModel>();\n        while (cursor.moveToNext()) {\n            result.add(readCursorByIndex(cursor));\n        }\n        cursor.close();\n        return result;\n    }\n\n    public static Cursor findCursorOrderByIdAsc(SQLiteDatabase db, int limit) {\n        String selection = \"\";\n        String[] selectionArgs = new String[] {\n\n        };\n        String limitStr = (limit > 0) ? String.valueOf(limit) : null;\n\n        String orderBy = \"id asc\";\n        return db.query(TABLE_NAME, COLUMNS_ARRAY, selection, selectionArgs, null, null, orderBy,\n                limitStr);\n\n    }\n\n    public static java.util.List<UserModel> findByAuthorityOrderByIdAsc(SQLiteDatabase db,\n            int limit, net.cattaka.util.cathandsgendroid.test.model.UserModel.Authority authority) {\n        Cursor cursor = findCursorByAuthorityOrderByIdAsc(db, limit, authority);\n        java.util.List<UserModel> result = new java.util.ArrayList<UserModel>();\n        while (cursor.moveToNext()) {\n            result.add(readCursorByIndex(cursor));\n        }\n        cursor.close();\n        return result;\n    }\n\n    public static Cursor findCursorByAuthorityOrderByIdAsc(SQLiteDatabase db, int limit,\n            net.cattaka.util.cathandsgendroid.test.model.UserModel.Authority authority) {\n        String selection = \"authority=?\";\n        String[] selectionArgs = new String[] {\n\n            ACCESSOR_AUTHORITY.stringValue(authority),\n        };\n        String limitStr = (limit > 0) ? String.valueOf(limit) : null;\n\n        String orderBy = \"id asc\";\n        return db.query(TABLE_NAME, COLUMNS_ARRAY, selection, selectionArgs, null, null, orderBy,\n                limitStr);\n\n    }\n}\n\n\n\u4f7f\u3044\u65b9\uff1a\u751f\u6210\u3055\u308c\u305f\u30b3\u30fc\u30c9\u306e\u4f7f\u3044\u65b9\n\u4f7f\u3046\u3068\u304d\u306f\u7c21\u5358\u306b\u305d\u308c\u305e\u308c\u306e\u5834\u5408\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u547c\u3073\u51fa\u305b\u3070\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n    // Unique\u306a\u9805\u76ee\u3067\u691c\u7d22\u3059\u308b\u5834\u5408\u3001\u623b\u308a\u5024\u306fUserModel\u306b\u306a\u308a\u307e\u3059\u3002\n    UserModel model = UserModelCatHands.findByUsername(db, \"taro\");\n\n    // \u975eUnique\u306a\u9805\u76ee\u3067\u691c\u7d22\u3059\u308b\u5834\u5408\u3001\u623b\u308a\u5024\u306fList<UserModel>\u306b\u306a\u308a\u307e\u3059\u3002\n    List<UserModel> models = UserModelCatHands.findByTeamOrderByRoleAscAndIdAsc(db, 0, \"A\");\n\n    // INSERT\u3092\u5b9f\u884c\u3059\u308b\u5834\u5408\u3001\u5f15\u6570\u306b\u8ffd\u52a0\u3057\u305f\u3044\u30e2\u30c7\u30eb\u3092\u4e0e\u3048\u308b\u3002\n    UserModelCatHands.insert(db, model);\n\n    // UPDATE\u3092\u5b9f\u884c\u3059\u308b\u5834\u5408\u3001\u5f15\u6570\u306b\u66f4\u65b0\u3057\u305f\u3044\u30e2\u30c7\u30eb\u3092\u4e0e\u3048\u308b\u3002\n    UserModelCatHands.update(db, model);\n\n    // DELETE\u3092\u5b9f\u884c\u3059\u308b\u5834\u5408\u3001\u5f15\u6570\u306b\u524a\u9664\u3057\u305f\u3044\u30e2\u30c7\u30eb\u306eid\u3092\u4e0e\u3048\u308b\u3002\n    UserModelCatHands.delete(db, model.getId());\n\n\n\u307e\u3068\u3081\n\u3044\u304b\u304c\u3060\u3063\u305f\u3067\u3057\u3087\u3046\u304b\u3002\n\u4eca\u56de\u7d39\u4ecb\u3057\u305f\u6a5f\u80fd\u306f\u3054\u304f\u4e00\u90e8\u3067\u3001Cursor\u3092\u53d6\u5f97\u3059\u308b\u3082\u306e\u3084\u3001\nSQL\u304b\u3089\u30e2\u30c7\u30eb\u30af\u30e9\u30b9\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u6a5f\u80fd\u306a\u3069\u3001\u6a5f\u80fd\u306f\u4ed6\u306b\u3082\u307e\u3060\u307e\u3060\u3042\u308a\u307e\u3059\u3002\n\u4e0a\u306e\u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30b3\u30fc\u30c9\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4e00\u3064\u305a\u3064\u898b\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u4ed6\u306b\u3082\u7406\u89e3\u304c\u65e9\u3044\u304b\u3082\u77e5\u308c\u307e\u305b\u3093\u3002\n\u307e\u305fAPT\u3067\u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30b3\u30fc\u30c9\u306a\u306e\u3067\u3001\u3082\u3057\u7d30\u304b\u306a\u4ed5\u69d8\u304c\u6cbf\u308f\u306a\u3044\u3068\u304d\u3001\n\u3053\u308c\u3089\u306e\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30fc\uff06\u30da\u30fc\u30b9\u30c8\u3057\u3066\u5fc5\u8981\u306a\u3068\u3053\u308d\u3060\u3051\u66f8\u304d\u63db\u3048\u3066\u5bfe\u5fdc\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3082\u5229\u70b9\u3067\u3059\u3002\n\u6b21\u56de\u4ee5\u964d\u306f\u4ed6\u306b\u3082\u3042\u308b\u6a5f\u80fd\u306b\u3064\u3044\u3066\u3054\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n## \u9762\u5012\u81ed\u3044\u3092\u7c21\u5358\u306b\u3059\u308b\n\nAndroid\u3067SQLiteDatabase\u3092\u4f7f\u3046\u3068\u304d\u3001\u3044\u308d\u3044\u308d\u3068\u9762\u5012\u81ed\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\n\u7279\u306b\u6a19\u6e96\u3067O/R\u30de\u30c3\u30d1\u30fc\u7121\u3044\u306e\u3067\u81ea\u5206\u3067\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\u5df7\u306b\u3044\u308d\u3044\u308d\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3069\u308c\u3082\u91cd\u91cf\u7d1a\u3067\u3001\n\u3061\u3087\u3063\u3068\u6a5f\u80fd\u3092\u4f7f\u3044\u305f\u3044\u3060\u3051\u3067\u3082\u3044\u308d\u3044\u308d\u3084\u3089\u306a\u3044\u3068\u884c\u3051\u306a\u3044\u3067\u3059\u3002\nSELECT\u3001INSERT\u3001UPDATE\u3001DELETE\u306e\u305d\u308c\u305e\u308c\u306e\u5c0f\u3055\u3044\u30b3\u30fc\u30c9\u3092\nAPT(Annotation Processing Tool)\u3067\u81ea\u52d5\u751f\u6210\u3059\u308b\u30c4\u30fc\u30eb\u3001[CatHandsGendroid](https://github.com/cattaka/CatHandsGendroid)\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n* [\u516c\u5f0fURL](https://github.com/cattaka/CatHandsGendroid)\n* [Wiki](https://github.com/cattaka/CatHandsGendroid/wiki)\n* [\u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea] https://github.com/cattaka/FastCheckList\n\n## \u3069\u3046\u7c21\u5358\u3057\u305f\u3044\u304b\n\n\u4f8b\u3048\u3070\u3001\u6b21\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u304c\u3042\u308b\u3068\u3057\u307e\u3059\u3002\n\n```Java\npublic class UserModel {\n    public enum Role {\n        PROGRAMMER, DESIGNNER, MANAGER\n    }\n    public enum Authority {\n        USER, ADMIN\n    }\n    private Long id;\n    private String username;\n    private String nickname;\n    private String team;\n    private Role role;\n    private Date createdAt;\n    private List<String> tags;\n\n    /* Getter\u3068Setter\u306f\u7701\u7565 */\n}\n```\n\n\u3053\u306e\u30e2\u30c7\u30eb\u30af\u30e9\u30b9\u306b\u306f\u6b21\u306e\u3088\u3046\u306a\u5b9a\u7fa9\u3084\u30e1\u30bd\u30c3\u30c9\u304c\u6b32\u3057\u304f\u306a\u308a\u307e\u3059\u3088\u306d\u3002\n\n```java\n    /** CREATE\u6587\u306eSQL */\n    public static final String SQL_CREATE_TABLE = \"CREATE TABLE userModel(id INTEGER PRIMARY KEY AUTOINCREMENT,username TEXT,nickname TEXT,team TEXT,role TEXT,createdAt INTEGER,tags BLOB,authority INTEGER,blob BLOB,booleanData INTEGER,byteData INTEGER,charData INTEGER)\";\n    /** id\u6307\u5b9a\u3067Cursor\u3092\u53d6\u5f97\u3059\u308b\u30e1\u30bd\u30c3\u30c9 */\n    public static Cursor findCursorById(SQLiteDatabase db, java.lang.Long id) {\n        String selection = \"id=?\";\n        String[] selectionArgs = new String[]{Accessor.toString(id)};\n        return db.query(TABLE_NAME, COLUMNS_ARRAY, selection, selectionArgs, null, null, null);\n    }\n    /** id\u6307\u5b9a\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\u3059\u308b\u30e1\u30bd\u30c3\u30c9 */\n    public static UserModel findById(SQLiteDatabase db, java.lang.Long id) {\n        Cursor cursor = findCursorById(db, id);\n        UserModel model = (cursor.moveToNext()) ? readCursorByIndex(cursor) : null;\n        cursor.close();\n        return model;\n    }\n    /** UserModel\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u308a\u3001Cursor\u304b\u3089\u306e\u5024\u3092\u8a2d\u5b9a\u3057\u3066\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9 */\n    public static UserModel readCursorByIndex(Cursor cursor) {\n        UserModel result = new UserModel();\n        readCursorByIndex(cursor, result);\n        return result;\n    }\n    /** Cursor\u304b\u3089UserModel\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u5024\u3092\u8aad\u307f\u51fa\u3059\u5024\u3092\u8a2d\u5b9a\u3057\u3066\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9 */\n    public static void readCursorByIndex(Cursor cursor, UserModel dest) {\n        dest.setId(ACCESSOR_ID.readFromCursor(cursor, 0));\n        dest.setUsername(ACCESSOR_USERNAME.readFromCursor(cursor, 1));\n        dest.setNickname(ACCESSOR_NICKNAME.readFromCursor(cursor, 2));\n        dest.setTeam(ACCESSOR_TEAM.readFromCursor(cursor, 3));\n        dest.setRole(ACCESSOR_ROLE.readFromCursor(cursor, 4));\n        dest.setCreatedAt(ACCESSOR_CREATED_AT.readFromCursor(cursor, 5));\n        dest.setTags(ACCESSOR_TAGS.readFromCursor(cursor, 6));\n        dest.setAuthority(ACCESSOR_AUTHORITY.readFromCursor(cursor, 7));\n        dest.setBlob(ACCESSOR_BLOB.readFromCursor(cursor, 8));\n        dest.setBooleanData(ACCESSOR_BOOLEAN_DATA.readFromCursor(cursor, 9));\n        dest.setByteData(ACCESSOR_BYTE_DATA.readFromCursor(cursor, 10));\n        dest.setCharData(ACCESSOR_CHAR_DATA.readFromCursor(cursor, 11));\n    }\n    /** \u30e2\u30c7\u30eb\u30af\u30e9\u30b9\u306e\u5024\u3092ContentValues\u306b\u8a2d\u5b9a\u3059\u308b\u30e1\u30bd\u30c3\u30c9 */\n    public static void putToContentValues(ContentValues dest, UserModel model,\n            boolean withPrimaryKey) {\n        if (withPrimaryKey) {\n            ACCESSOR_ID.putToContentValues(dest, \"id\", model.getId());\n        }\n\n        ACCESSOR_USERNAME.putToContentValues(dest, \"username\", model.getUsername());\n        ACCESSOR_NICKNAME.putToContentValues(dest, \"nickname\", model.getNickname());\n        ACCESSOR_TEAM.putToContentValues(dest, \"team\", model.getTeam());\n        ACCESSOR_ROLE.putToContentValues(dest, \"role\", model.getRole());\n        ACCESSOR_CREATED_AT.putToContentValues(dest, \"createdAt\", model.getCreatedAt());\n        ACCESSOR_TAGS.putToContentValues(dest, \"tags\", model.getTags());\n        ACCESSOR_AUTHORITY.putToContentValues(dest, \"authority\", model.getAuthority());\n        ACCESSOR_BLOB.putToContentValues(dest, \"blob\", model.getBlob());\n        ACCESSOR_BOOLEAN_DATA.putToContentValues(dest, \"booleanData\", model.getBooleanData());\n        ACCESSOR_BYTE_DATA.putToContentValues(dest, \"byteData\", model.getByteData());\n        ACCESSOR_CHAR_DATA.putToContentValues(dest, \"charData\", model.getCharData());\n    }\n    /** INSERT\u3059\u308b\u30e1\u30bd\u30c3\u30c9 */\n    public static long insert(SQLiteDatabase db, UserModel model) {\n        ContentValues values = new ContentValues();\n        putToContentValues(values, model, false);\n        long key = db.insert(TABLE_NAME, null, values);\n        model.setId((long)key);\n        return key;\n    }\n\n    /** UPDATE\u3059\u308b\u30e1\u30bd\u30c3\u30c9 */\n    public static int update(SQLiteDatabase db, UserModel model) {\n        ContentValues values = new ContentValues();\n        String whereClause = \"id=?\";\n        String[] whereArgs = new String[] {\n            ACCESSOR_ID.stringValue(model.getId())\n        };\n        putToContentValues(values, model, false);\n        return db.update(TABLE_NAME, values, whereClause, whereArgs);\n    }\n\n    /** DELETE\u3059\u308b\u30e1\u30bd\u30c3\u30c9 */\n    public static int delete(SQLiteDatabase db, Long key) {\n        String whereClause = \"id=?\";\n        String[] whereArgs = new String[] {\n            ACCESSOR_ID.stringValue(key)\n        };\n        return db.delete(TABLE_NAME, whereClause, whereArgs);\n    }\n```\n\n\u3061\u3087\u3063\u3068\u5c0f\u51fa\u3057\u306b\u3057\u305f\u306e\u3067\u6570\u304c\u5897\u3048\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\u3001\n\u7c21\u5358\u306b\u306fSELECT\u3001INSERT\u3001UPGRADE\u3001DELETE\u306e\u305d\u308c\u305e\u308c\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u6b32\u3057\u304f\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\nCatHandsGendroid\u3067\u306f\u3001\u3053\u308c\u3089\u3092\u5168\u3066APT\u306b\u3088\u308a\u81ea\u52d5\u751f\u6210\u3057\u3066\u304f\u308c\u307e\u3059\u3002\nAPT\u306b\u3088\u308b\u751f\u6210\u3067\u3042\u308b\u305f\u3081\u3001\u751f\u6210\u3055\u308c\u305f\u30b3\u30fc\u30c9\u3092\u898b\u308c\u3070\u3069\u3046\u3044\u3063\u305f\u52d5\u304d\u3092\u3057\u3066\u3044\u308b\u306e\u304b\u3082\u76f4\u3050\u306b\u308f\u304b\u308a\u307e\u3059\u3002\n\n## \u4f7f\u3044\u65b9\uff1aAPT\u306e\u8a2d\u5b9a\u7de8\n\n\u307e\u305aAPT\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u3001\u305d\u308c\u7528\u306e\u8a2d\u5b9a\u3092build.gradle\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\n[\u30eb\u30fc\u30c8]/build.gradle\u306ebuildscript\u306e\u30d6\u30ed\u30c3\u30af\u306b\"classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'\"\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```groovy\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:0.12.2'\n        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'\n    }\n}\n```\n\n\u6b21\u306b[\u30eb\u30fc\u30c8]/[app]/build.gradle\u306b\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nresourcePackageName\u306e\u90e8\u5206\u306f\u9069\u5b9c\u3001\u81ea\u5206\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u5408\u308f\u305b\u3066\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```groovy\napply plugin: 'com.neenbedankt.android-apt'\napt {\n    arguments {\n        androidManifestFile variant.processResources.manifestFile\n        resourcePackageName 'com.myproject.package'\n    }\n}\n```\n\n\u3053\u3053\u307e\u3067\u3067APT\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u6700\u5f8c\u306bCatHandsGendroid\u3092dependancies\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n```groovy\ndependencies {\n    apt 'net.cattaka:cathandsgendroid-apt:0.4.4'\n    compile 'net.cattaka:cathandsgendroid-core:0.4.4'\n}\n```\n\n\u6700\u65b0\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f http://mvnrepository.com/artifact/net.cattaka/ \u306b\u3066\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4ee5\u4e0a\u3067CatHandsGendroid\u3092\u4f7f\u3046\u8a2d\u5b9a\u304c\u5b8c\u4e86\u3067\u3059\u3002\n\n## \u4f7f\u3044\u65b9\uff1a\u30e2\u30c7\u30eb\u30af\u30e9\u30b9\u306e\u4f5c\u6210\u7de8\n\n\u4f7f\u3044\u65b9\u306f\u7c21\u5358\u3001\u76ee\u7684\u3067\u3042\u308b\u30e2\u30c7\u30eb\u30af\u30e9\u30b9\u306b@DataModel\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u3001\u4e3b\u30ad\u30fc\u3092\u6307\u5b9a\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n@DataModel\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306b\u306f\u3001find\u5c5e\u6027\u306b\u691c\u7d22\u306b\u4f7f\u3046\u9805\u76ee\u3092\u6307\u5b9a\u3057\u305f\u308a\u3001unique\u3067\u3042\u308b\u3079\u304d\u9805\u76ee\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4e3b\u30ad\u30fc\u3068\u3059\u308b\u9805\u76ee\u306b\u306f@DataModelAttrs(primaryKey = true)\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4ed8\u4e0e\u3057\u307e\u3059\u3002\n\n```java\n@DataModel(find = {\n        \"id\", \"username\", \"team:role+,id\", \"team:id-\", \":id\", \"authority:id+\"\n}, unique = {\n    \"username\"\n})\npublic class UserModel {\n    public enum Role {\n        PROGRAMMER, DESIGNNER, MANAGER\n    }\n    public enum Authority {\n        USER, ADMIN\n    }\n    @DataModelAttrs(primaryKey = true)\n    private Long id;\n    private String username;\n    private String nickname;\n    private String team;\n    private Role role;\n    private Date createdAt;\n    private List<String> tags;\n\n    /* Getter\u3068Setter\u306f\u7701\u7565 */\n}\n```\n\n\u3053\u306e\u72b6\u614b\u3067\u30d3\u30eb\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001APT\u304c\u5b9f\u884c\u3055\u308c\u6b21\u306e\u3088\u3046\u306aSQLiteDatabase\u3092\u4f7f\u3046\u306e\u306b\u4fbf\u5229\u306a\u30af\u30e9\u30b9\u304c\u81ea\u52d5\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\u81ea\u52d5\u751f\u6210\u3055\u308c\u308b\u30af\u30e9\u30b9\u306e\u540d\u524d\u306f<\u30e2\u30c7\u30eb\u30af\u30e9\u30b9\u540d>+CatHands\u3067\u3059\u3002\n@DataModel\u306efind\u5c5e\u6027\u3067\u6307\u5b9a\u3057\u305f\u7d44\u307f\u5408\u308f\u305b\u304c\u3001unique\u5c5e\u6027\u306e\u3082\u306e\u3092\u5168\u3066\u542b\u3080\u5834\u5408\u306f\u623b\u308a\u5024\u304c\u5358\u4e00\u53d6\u5f97\u306b\u3001\n\u542b\u307e\u306a\u3044\u5834\u5408\u306f\u8907\u6570\u53d6\u5f97\u3068\u3057\u3066\u623b\u308a\u5024\u304cList<UserModel>\u306b\u306a\u308b\u306a\u3069\u3001\u30a2\u30d7\u30ea\u4f5c\u6210\u304c\u697d\u306b\u306a\u308b\u3088\u3046\u306b\u3082\u5de5\u592b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```java\npublic class UserModelCatHands {\n    public static final IAccessor<Long> ACCESSOR_ID;\n    public static final IAccessor<String> ACCESSOR_USERNAME;\n    public static final IAccessor<String> ACCESSOR_NICKNAME;\n    public static final IAccessor<String> ACCESSOR_TEAM;\n    public static final IAccessor<net.cattaka.util.cathandsgendroid.test.model.UserModel.Role> ACCESSOR_ROLE;\n    public static final IAccessor<java.util.Date> ACCESSOR_CREATED_AT;\n    public static final IAccessor<java.util.List<String>> ACCESSOR_TAGS;\n    public static final IAccessor<net.cattaka.util.cathandsgendroid.test.model.UserModel.Authority> ACCESSOR_AUTHORITY;\n    public static final IAccessor<byte[]> ACCESSOR_BLOB;\n    public static final IAccessor<Boolean> ACCESSOR_BOOLEAN_DATA;\n    public static final IAccessor<Byte> ACCESSOR_BYTE_DATA;\n    public static final IAccessor<Character> ACCESSOR_CHAR_DATA;\n    static {\n        ACCESSOR_ID = Accessors.LongAccessor.createAccessor(Long.class);\n        ACCESSOR_USERNAME = Accessors.StringAccessor.createAccessor(String.class);\n        ACCESSOR_NICKNAME = Accessors.StringAccessor.createAccessor(String.class);\n        ACCESSOR_TEAM = Accessors.StringAccessor.createAccessor(String.class);\n        ACCESSOR_ROLE = net.cattaka.util.cathandsgendroid.accessor.EnumNameAccessor\n                .createAccessor(net.cattaka.util.cathandsgendroid.test.model.UserModel.Role.class);\n        ACCESSOR_CREATED_AT = Accessors.DateAccessor.createAccessor(java.util.Date.class);\n        ACCESSOR_TAGS = Accessors.createListAccessor(Accessors.StringAccessor\n                .createAccessor(String.class));\n        ACCESSOR_AUTHORITY = net.cattaka.util.cathandsgendroid.accessor.EnumOrderAccessor\n                .createAccessor(net.cattaka.util.cathandsgendroid.test.model.UserModel.Authority.class);\n        ACCESSOR_BLOB = Accessors.BlobAccessor.createAccessor(byte[].class);\n        ACCESSOR_BOOLEAN_DATA = Accessors.BooleanAccessor.createAccessor(Boolean.class);\n        ACCESSOR_BYTE_DATA = Accessors.ByteAccessor.createAccessor(Byte.class);\n        ACCESSOR_CHAR_DATA = Accessors.CharacterAccessor.createAccessor(Character.class);\n    }\n    public static final String SQL_CREATE_TABLE = \"CREATE TABLE userModel(id INTEGER PRIMARY KEY AUTOINCREMENT,username TEXT,nickname TEXT,team TEXT,role TEXT,createdAt INTEGER,tags BLOB,authority INTEGER,blob BLOB,booleanData INTEGER,byteData INTEGER,charData INTEGER)\";\n    public static final String[] SQL_ALTER_TABLE_1_TO_2 = new String[] {\n            \"ALTER TABLE userModel ADD COLUMN nickname TEXT\",\n            \"ALTER TABLE userModel ADD COLUMN team TEXT\",\n    };\n    public static final String[] SQL_ALTER_TABLE_2_TO_3 = new String[] {\n        \"ALTER TABLE userModel ADD COLUMN authority INTEGER\",\n    };\n    public static void upgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n        if (oldVersion < 2) {\n            for (String sql : SQL_ALTER_TABLE_1_TO_2) {\n                db.execSQL(sql);\n            }\n        }\n        if (oldVersion < 3) {\n            for (String sql : SQL_ALTER_TABLE_2_TO_3) {\n                db.execSQL(sql);\n            }\n        }\n    };\n    public static final String TABLE_NAME = \"userModel\";\n    public static final String COLUMNS = \"id,username,nickname,team,role,createdAt,tags,authority,blob,booleanData,byteData,charData\";\n    public static final String[] COLUMNS_ARRAY = new String[] {\n            \"id\", \"username\", \"nickname\", \"team\", \"role\", \"createdAt\", \"tags\", \"authority\", \"blob\",\n            \"booleanData\", \"byteData\", \"charData\"\n    };\n    public static final int COL_INDEX_ID = 0;\n    public static final int COL_INDEX_USERNAME = 1;\n    public static final int COL_INDEX_NICKNAME = 2;\n    public static final int COL_INDEX_TEAM = 3;\n    public static final int COL_INDEX_ROLE = 4;\n    public static final int COL_INDEX_CREATED_AT = 5;\n    public static final int COL_INDEX_TAGS = 6;\n    public static final int COL_INDEX_AUTHORITY = 7;\n    public static final int COL_INDEX_BLOB = 8;\n    public static final int COL_INDEX_BOOLEAN_DATA = 9;\n    public static final int COL_INDEX_BYTE_DATA = 10;\n    public static final int COL_INDEX_CHAR_DATA = 11;\n    public static final String COL_NAME_ID = \"id\";\n    public static final String COL_NAME_USERNAME = \"username\";\n    public static final String COL_NAME_NICKNAME = \"nickname\";\n    public static final String COL_NAME_TEAM = \"team\";\n    public static final String COL_NAME_ROLE = \"role\";\n    public static final String COL_NAME_CREATED_AT = \"createdAt\";\n    public static final String COL_NAME_TAGS = \"tags\";\n    public static final String COL_NAME_AUTHORITY = \"authority\";\n    public static final String COL_NAME_BLOB = \"blob\";\n    public static final String COL_NAME_BOOLEAN_DATA = \"booleanData\";\n    public static final String COL_NAME_BYTE_DATA = \"byteData\";\n    public static final String COL_NAME_CHAR_DATA = \"charData\";\n\n    public static void readCursorByIndex(Cursor cursor, UserModel dest) {\n\n        dest.setId(ACCESSOR_ID.readFromCursor(cursor, 0));\n        dest.setUsername(ACCESSOR_USERNAME.readFromCursor(cursor, 1));\n        dest.setNickname(ACCESSOR_NICKNAME.readFromCursor(cursor, 2));\n        dest.setTeam(ACCESSOR_TEAM.readFromCursor(cursor, 3));\n        dest.setRole(ACCESSOR_ROLE.readFromCursor(cursor, 4));\n        dest.setCreatedAt(ACCESSOR_CREATED_AT.readFromCursor(cursor, 5));\n        dest.setTags(ACCESSOR_TAGS.readFromCursor(cursor, 6));\n        dest.setAuthority(ACCESSOR_AUTHORITY.readFromCursor(cursor, 7));\n        dest.setBlob(ACCESSOR_BLOB.readFromCursor(cursor, 8));\n        dest.setBooleanData(ACCESSOR_BOOLEAN_DATA.readFromCursor(cursor, 9));\n        dest.setByteData(ACCESSOR_BYTE_DATA.readFromCursor(cursor, 10));\n        dest.setCharData(ACCESSOR_CHAR_DATA.readFromCursor(cursor, 11));\n    }\n\n    public static UserModel readCursorByIndex(Cursor cursor) {\n        UserModel result = new UserModel();\n        readCursorByIndex(cursor, result);\n        return result;\n    }\n\n    public static void readCursorByName(Cursor cursor, UserModel dest) {\n        int idx;\n\n        idx = cursor.getColumnIndex(\"id\");\n        dest.setId(ACCESSOR_ID.readFromCursor(cursor, idx));\n        idx = cursor.getColumnIndex(\"username\");\n        dest.setUsername(ACCESSOR_USERNAME.readFromCursor(cursor, idx));\n        idx = cursor.getColumnIndex(\"nickname\");\n        dest.setNickname(ACCESSOR_NICKNAME.readFromCursor(cursor, idx));\n        idx = cursor.getColumnIndex(\"team\");\n        dest.setTeam(ACCESSOR_TEAM.readFromCursor(cursor, idx));\n        idx = cursor.getColumnIndex(\"role\");\n        dest.setRole(ACCESSOR_ROLE.readFromCursor(cursor, idx));\n        idx = cursor.getColumnIndex(\"createdAt\");\n        dest.setCreatedAt(ACCESSOR_CREATED_AT.readFromCursor(cursor, idx));\n        idx = cursor.getColumnIndex(\"tags\");\n        dest.setTags(ACCESSOR_TAGS.readFromCursor(cursor, idx));\n        idx = cursor.getColumnIndex(\"authority\");\n        dest.setAuthority(ACCESSOR_AUTHORITY.readFromCursor(cursor, idx));\n        idx = cursor.getColumnIndex(\"blob\");\n        dest.setBlob(ACCESSOR_BLOB.readFromCursor(cursor, idx));\n        idx = cursor.getColumnIndex(\"booleanData\");\n        dest.setBooleanData(ACCESSOR_BOOLEAN_DATA.readFromCursor(cursor, idx));\n        idx = cursor.getColumnIndex(\"byteData\");\n        dest.setByteData(ACCESSOR_BYTE_DATA.readFromCursor(cursor, idx));\n        idx = cursor.getColumnIndex(\"charData\");\n        dest.setCharData(ACCESSOR_CHAR_DATA.readFromCursor(cursor, idx));\n    }\n\n    public static UserModel readCursorByName(Cursor cursor) {\n        UserModel result = new UserModel();\n        readCursorByName(cursor, result);\n        return result;\n    }\n\n    public static void putToContentValues(ContentValues dest, UserModel model,\n            boolean withPrimaryKey) {\n        if (withPrimaryKey) {\n            ACCESSOR_ID.putToContentValues(dest, \"id\", model.getId());\n        }\n\n        ACCESSOR_USERNAME.putToContentValues(dest, \"username\", model.getUsername());\n        ACCESSOR_NICKNAME.putToContentValues(dest, \"nickname\", model.getNickname());\n        ACCESSOR_TEAM.putToContentValues(dest, \"team\", model.getTeam());\n        ACCESSOR_ROLE.putToContentValues(dest, \"role\", model.getRole());\n        ACCESSOR_CREATED_AT.putToContentValues(dest, \"createdAt\", model.getCreatedAt());\n        ACCESSOR_TAGS.putToContentValues(dest, \"tags\", model.getTags());\n        ACCESSOR_AUTHORITY.putToContentValues(dest, \"authority\", model.getAuthority());\n        ACCESSOR_BLOB.putToContentValues(dest, \"blob\", model.getBlob());\n        ACCESSOR_BOOLEAN_DATA.putToContentValues(dest, \"booleanData\", model.getBooleanData());\n        ACCESSOR_BYTE_DATA.putToContentValues(dest, \"byteData\", model.getByteData());\n        ACCESSOR_CHAR_DATA.putToContentValues(dest, \"charData\", model.getCharData());\n    }\n\n    public static long insert(SQLiteDatabase db, UserModel model) {\n        ContentValues values = new ContentValues();\n        putToContentValues(values, model, false);\n        long key = db.insert(TABLE_NAME, null, values);\n        model.setId((long)key);\n        return key;\n    }\n\n    public static int update(SQLiteDatabase db, UserModel model) {\n        ContentValues values = new ContentValues();\n        String whereClause = \"id=?\";\n        String[] whereArgs = new String[] {\n            ACCESSOR_ID.stringValue(model.getId())\n        };\n        putToContentValues(values, model, false);\n        return db.update(TABLE_NAME, values, whereClause, whereArgs);\n    }\n\n    public static int delete(SQLiteDatabase db, Long key) {\n        String whereClause = \"id=?\";\n        String[] whereArgs = new String[] {\n            ACCESSOR_ID.stringValue(key)\n        };\n        return db.delete(TABLE_NAME, whereClause, whereArgs);\n    }\n\n    public static UserModel findById(SQLiteDatabase db, Long id) {\n        Cursor cursor = findCursorById(db, id);\n        UserModel model = (cursor.moveToNext()) ? readCursorByIndex(cursor) : null;\n        cursor.close();\n        return model;\n    }\n\n    public static Cursor findCursorById(SQLiteDatabase db, Long id) {\n        String selection = \"id=?\";\n        String[] selectionArgs = new String[] {\n\n            ACCESSOR_ID.stringValue(id),\n        };\n        return db.query(TABLE_NAME, COLUMNS_ARRAY, selection, selectionArgs, null, null, null);\n    }\n\n    public static UserModel findByUsername(SQLiteDatabase db, String username) {\n        Cursor cursor = findCursorByUsername(db, username);\n        UserModel model = (cursor.moveToNext()) ? readCursorByIndex(cursor) : null;\n        cursor.close();\n        return model;\n    }\n\n    public static Cursor findCursorByUsername(SQLiteDatabase db, String username) {\n        String selection = \"username=?\";\n        String[] selectionArgs = new String[] {\n\n            ACCESSOR_USERNAME.stringValue(username),\n        };\n        return db.query(TABLE_NAME, COLUMNS_ARRAY, selection, selectionArgs, null, null, null);\n    }\n\n    public static java.util.List<UserModel> findByTeamOrderByRoleAscAndIdAsc(SQLiteDatabase db,\n            int limit, String team) {\n        Cursor cursor = findCursorByTeamOrderByRoleAscAndIdAsc(db, limit, team);\n        java.util.List<UserModel> result = new java.util.ArrayList<UserModel>();\n        while (cursor.moveToNext()) {\n            result.add(readCursorByIndex(cursor));\n        }\n        cursor.close();\n        return result;\n    }\n\n    public static Cursor findCursorByTeamOrderByRoleAscAndIdAsc(SQLiteDatabase db, int limit,\n            String team) {\n        String selection = \"team=?\";\n        String[] selectionArgs = new String[] {\n\n            ACCESSOR_TEAM.stringValue(team),\n        };\n        String limitStr = (limit > 0) ? String.valueOf(limit) : null;\n\n        String orderBy = \"role asc,id asc\";\n        return db.query(TABLE_NAME, COLUMNS_ARRAY, selection, selectionArgs, null, null, orderBy,\n                limitStr);\n\n    }\n\n    public static java.util.List<UserModel> findByTeamOrderByIdDesc(SQLiteDatabase db, int limit,\n            String team) {\n        Cursor cursor = findCursorByTeamOrderByIdDesc(db, limit, team);\n        java.util.List<UserModel> result = new java.util.ArrayList<UserModel>();\n        while (cursor.moveToNext()) {\n            result.add(readCursorByIndex(cursor));\n        }\n        cursor.close();\n        return result;\n    }\n\n    public static Cursor findCursorByTeamOrderByIdDesc(SQLiteDatabase db, int limit, String team) {\n        String selection = \"team=?\";\n        String[] selectionArgs = new String[] {\n\n            ACCESSOR_TEAM.stringValue(team),\n        };\n        String limitStr = (limit > 0) ? String.valueOf(limit) : null;\n\n        String orderBy = \"id desc\";\n        return db.query(TABLE_NAME, COLUMNS_ARRAY, selection, selectionArgs, null, null, orderBy,\n                limitStr);\n\n    }\n\n    public static java.util.List<UserModel> findOrderByIdAsc(SQLiteDatabase db, int limit) {\n        Cursor cursor = findCursorOrderByIdAsc(db, limit);\n        java.util.List<UserModel> result = new java.util.ArrayList<UserModel>();\n        while (cursor.moveToNext()) {\n            result.add(readCursorByIndex(cursor));\n        }\n        cursor.close();\n        return result;\n    }\n\n    public static Cursor findCursorOrderByIdAsc(SQLiteDatabase db, int limit) {\n        String selection = \"\";\n        String[] selectionArgs = new String[] {\n\n        };\n        String limitStr = (limit > 0) ? String.valueOf(limit) : null;\n\n        String orderBy = \"id asc\";\n        return db.query(TABLE_NAME, COLUMNS_ARRAY, selection, selectionArgs, null, null, orderBy,\n                limitStr);\n\n    }\n\n    public static java.util.List<UserModel> findByAuthorityOrderByIdAsc(SQLiteDatabase db,\n            int limit, net.cattaka.util.cathandsgendroid.test.model.UserModel.Authority authority) {\n        Cursor cursor = findCursorByAuthorityOrderByIdAsc(db, limit, authority);\n        java.util.List<UserModel> result = new java.util.ArrayList<UserModel>();\n        while (cursor.moveToNext()) {\n            result.add(readCursorByIndex(cursor));\n        }\n        cursor.close();\n        return result;\n    }\n\n    public static Cursor findCursorByAuthorityOrderByIdAsc(SQLiteDatabase db, int limit,\n            net.cattaka.util.cathandsgendroid.test.model.UserModel.Authority authority) {\n        String selection = \"authority=?\";\n        String[] selectionArgs = new String[] {\n\n            ACCESSOR_AUTHORITY.stringValue(authority),\n        };\n        String limitStr = (limit > 0) ? String.valueOf(limit) : null;\n\n        String orderBy = \"id asc\";\n        return db.query(TABLE_NAME, COLUMNS_ARRAY, selection, selectionArgs, null, null, orderBy,\n                limitStr);\n\n    }\n}\n```\n\n## \u4f7f\u3044\u65b9\uff1a\u751f\u6210\u3055\u308c\u305f\u30b3\u30fc\u30c9\u306e\u4f7f\u3044\u65b9\n\n\u4f7f\u3046\u3068\u304d\u306f\u7c21\u5358\u306b\u305d\u308c\u305e\u308c\u306e\u5834\u5408\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u547c\u3073\u51fa\u305b\u3070\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n\n```java\n    // Unique\u306a\u9805\u76ee\u3067\u691c\u7d22\u3059\u308b\u5834\u5408\u3001\u623b\u308a\u5024\u306fUserModel\u306b\u306a\u308a\u307e\u3059\u3002\n    UserModel model = UserModelCatHands.findByUsername(db, \"taro\");\n\n    // \u975eUnique\u306a\u9805\u76ee\u3067\u691c\u7d22\u3059\u308b\u5834\u5408\u3001\u623b\u308a\u5024\u306fList<UserModel>\u306b\u306a\u308a\u307e\u3059\u3002\n    List<UserModel> models = UserModelCatHands.findByTeamOrderByRoleAscAndIdAsc(db, 0, \"A\");\n\n    // INSERT\u3092\u5b9f\u884c\u3059\u308b\u5834\u5408\u3001\u5f15\u6570\u306b\u8ffd\u52a0\u3057\u305f\u3044\u30e2\u30c7\u30eb\u3092\u4e0e\u3048\u308b\u3002\n    UserModelCatHands.insert(db, model);\n\n    // UPDATE\u3092\u5b9f\u884c\u3059\u308b\u5834\u5408\u3001\u5f15\u6570\u306b\u66f4\u65b0\u3057\u305f\u3044\u30e2\u30c7\u30eb\u3092\u4e0e\u3048\u308b\u3002\n    UserModelCatHands.update(db, model);\n\n    // DELETE\u3092\u5b9f\u884c\u3059\u308b\u5834\u5408\u3001\u5f15\u6570\u306b\u524a\u9664\u3057\u305f\u3044\u30e2\u30c7\u30eb\u306eid\u3092\u4e0e\u3048\u308b\u3002\n    UserModelCatHands.delete(db, model.getId());\n```\n\n## \u307e\u3068\u3081\n\n\u3044\u304b\u304c\u3060\u3063\u305f\u3067\u3057\u3087\u3046\u304b\u3002\n\u4eca\u56de\u7d39\u4ecb\u3057\u305f\u6a5f\u80fd\u306f\u3054\u304f\u4e00\u90e8\u3067\u3001Cursor\u3092\u53d6\u5f97\u3059\u308b\u3082\u306e\u3084\u3001\nSQL\u304b\u3089\u30e2\u30c7\u30eb\u30af\u30e9\u30b9\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u6a5f\u80fd\u306a\u3069\u3001\u6a5f\u80fd\u306f\u4ed6\u306b\u3082\u307e\u3060\u307e\u3060\u3042\u308a\u307e\u3059\u3002\n\n\u4e0a\u306e\u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30b3\u30fc\u30c9\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4e00\u3064\u305a\u3064\u898b\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u4ed6\u306b\u3082\u7406\u89e3\u304c\u65e9\u3044\u304b\u3082\u77e5\u308c\u307e\u305b\u3093\u3002\n\u307e\u305fAPT\u3067\u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30b3\u30fc\u30c9\u306a\u306e\u3067\u3001\u3082\u3057\u7d30\u304b\u306a\u4ed5\u69d8\u304c\u6cbf\u308f\u306a\u3044\u3068\u304d\u3001\n\u3053\u308c\u3089\u306e\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30fc\uff06\u30da\u30fc\u30b9\u30c8\u3057\u3066\u5fc5\u8981\u306a\u3068\u3053\u308d\u3060\u3051\u66f8\u304d\u63db\u3048\u3066\u5bfe\u5fdc\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3082\u5229\u70b9\u3067\u3059\u3002\n\n\u6b21\u56de\u4ee5\u964d\u306f\u4ed6\u306b\u3082\u3042\u308b\u6a5f\u80fd\u306b\u3064\u3044\u3066\u3054\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n", "tags": ["Android1", "\u30e9\u30a4\u30d6\u30e9\u30ea", "sqlite", "Database"]}