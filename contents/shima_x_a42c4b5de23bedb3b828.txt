{"context": " More than 1 year has passed since last update.\n\n\u52d5\u6a5f\n\u4ed5\u4e8b\u3067\u5909\u5316\u70b9\u691c\u77e5\u3092\u3059\u308b\u6a5f\u4f1a\u304c\u3042\u308a\u307e\u3057\u305f\u3002\u305d\u306e\u6642\u306f\u6642\u9593\u304c\u306a\u304b\u3063\u305f\u4e8b\u3082\u3042\u308a\u3001yokkuns\u3055\u3093\u304c\u3084\u3089\u308c\u3066\u3044\u305fARIMA\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u4f5c\u308a\u307e\u3057\u305f\u3002\u305f\u3060\u3001ARIMA\u30e2\u30c7\u30eb\u3060\u3068\u8272\u3005\u3068\u9762\u5012\u306a\u3068\u3053\u308d\u304c\u3042\u3063\u305f\u306e\u3067kalman filter\u3067\u66f8\u304d\u63db\u3048\u3092\u8a66\u307f\u305f\u6b21\u7b2c\u3067\u3059\u3002\n\nARIMA\u30e2\u30c7\u30eb\u306e\u554f\u984c\u70b9\n\n\u30d1\u30e9\u30e1\u30bf\u8abf\u6574\u304c\u9762\u5012\n\u5bfe\u8c61\u3068\u3059\u308bwindow\u4ee5\u4e0a\u306e\u30c7\u30fc\u30bf\u304c\u6e9c\u307e\u308b\u307e\u3067\u89e3\u6790\u3067\u304d\u306a\u3044\nwindow\u5185\u306b\u540c\u4e00\u30c7\u30fc\u30bf\u306e\u307f\u304c\u4e26\u3093\u3060\u30d9\u30af\u30c8\u30eb\u3068\u306a\u3063\u305f\u5834\u5408\u3001\u9006\u884c\u5217\u304c\u8a08\u7b97\u51fa\u6765\u306a\u3044\n\n\n\u53c2\u8003\u6587\u732e\n\n\u30c7\u30fc\u30bf\u30de\u30a4\u30cb\u30f3\u30b0\u306b\u3088\u308b\u7570\u5e38\u691c\u77e5\n\u30d9\u30a4\u30ba\u7d71\u8a08\u30c7\u30fc\u30bf\u89e3\u6790 (R\u3067\u5b66\u3076\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9 3)\n\n\u4e3b\u306b\u53c2\u8003\u306b\u3057\u305f\u306e\u306f\u3001\u307f\u3093\u306a\u5927\u597d\u304d\u300c\u30c7\u30fc\u30bf\u30de\u30a4\u30cb\u30f3\u30b0\u306b\u3088\u308b\u7570\u5e38\u691c\u77e5\u300d\u3067\u3059\u3002\n\n\u6982\u8981\n\u8a08\u7b97\u30b9\u30c6\u30c3\u30d7\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\u8a08\u7b97\u306f\u5927\u304d\u304f\u5206\u3051\u3066\u3001\u5b66\u7fd2\u30b9\u30c6\u30c3\u30d7\u3068\u30b9\u30b3\u30a2\u8a08\u7b97\u30b9\u30c6\u30c3\u30d7\u306b\u5206\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u5b66\u7fd2\u30b9\u30c6\u30c3\u30d7\n\u3053\u3061\u3089\u306f\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u304f\u308b\u524d\u306b\u8a08\u7b97\u3057\u3066\u304a\u304f\u30b9\u30c6\u30c3\u30d7\u3067\u3059\u3002\n\n\u3042\u308btime window\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u3001\u5f53\u8a72\u30c7\u30fc\u30bf\u306bfit\u3059\u308b\u6642\u7cfb\u5217\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\ntime window\u306e\u30c7\u30fc\u30bf\u3068\u306e\u6b8b\u5dee\u3092\u8a08\u7b97\n\u6b21\u306e\u6642\u70b9\u306e\u30c7\u30fc\u30bf\u3092\u4e88\u6e2c\n\n\n\u30b9\u30b3\u30a2\u8a08\u7b97\u30b9\u30c6\u30c3\u30d7\n\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u304d\u305f\u6642\u306b\u8a08\u7b97\u3092\u884c\u3046\u30b9\u30c6\u30c3\u30d7\u3067\u3059\u3002\n\n\u5b66\u7fd2\u30b9\u30c6\u30c3\u30d7\u3067\u8a08\u7b97\u3057\u305f\u6b8b\u5dee\u3068\u4e88\u6e2c\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u5909\u5316\u70b9\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\n\u30b9\u30b3\u30a2\u306e\u5e73\u6ed1\u5316\n\n\u5909\u5316\u70b9\u30b9\u30b3\u30a2\u8a08\u7b97\u306e\u6982\u8981\u306f\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u6b8b\u5dee\u30d9\u30af\u30c8\u30eb\u3092\u6b63\u898f\u5206\u5e03\u304b\u3089\u30b5\u30f3\u30d7\u30eb\u30ea\u30f3\u30b0\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3068\u307f\u306a\u3059\n\u6b8b\u5dee\u30d9\u30af\u30c8\u30eb\u304b\u3089\u6b63\u898f\u5206\u5e03\u306e\u4ee3\u8868\u5024\uff08\u5e73\u5747\u3001\u6a19\u6e96\u504f\u5dee\uff09\u3092\u8a08\u7b97\n\u904e\u53bb\u306e\u30c7\u30fc\u30bf\u306e\u50be\u5411\u304b\u3089\u306e\u4e88\u6e2c\u5024\u3068\u89b3\u6e2c\u5024\u306e\u5dee\u304c\u4eca\u307e\u3067\u306e\u30c7\u30fc\u30bf\u304b\u3089\u307f\u3066\u7570\u5e38\u306a\u5024\u304b\u3069\u3046\u304b\u306e\u691c\u5b9a\u3092\u884c\u3046\uff08\u78ba\u7387\u3092\u898b\u308b\uff09\n\u78ba\u7387\u3092\u30b9\u30b3\u30a2\u306b\u5909\u63db\u3059\u308b\n\n\u7c21\u5358\u3067\u3059\u304c\u8aac\u660e\u306f\u4ee5\u4e0a\u3067\u3059\u3002\n\u3067\u306f\u3001\u4ee5\u4e0b\u306b\u30b3\u30fc\u30c9\u3092\u8a18\u8f09\u3057\u307e\u3059\u3002\n\n\u53c2\u8003\u30b3\u30fc\u30c9\n\nkalman filter\u306b\u3064\u3044\u3066\u306e\u30b3\u30fc\u30c9\n\nKF.py\n# coding: utf8\n\nfrom numpy.oldnumeric.linear_algebra import inverse\nfrom scipy import linalg\nimport numpy as np\nfrom math import log\n\nclass KalmanFiltering:\n    limy = 1e20 # \u6b20\u6e2c\u3068\u307f\u306a\u3059\u6570\u5024\u306e\u5883\u754c\n    GSIG2 = 1\n    L = 1\n    R = np.identity(L)\n    NSUM = 0.0\n    SIG2 = 0.0\n    LDET = 0.0\n\n    def __init__(self, k, p, q, term=10, w=10):\n        self.k = k # \u968e\u5dee\n        self.p = p # \u5b63\u7bc0\u6027\u5faa\u74b0\n        self.q = q # AR\u6210\u5206\n        self.m, self.F, self.G, \\\n            self.H, self.Q = self.FGHset(0,k,p,q,w)\n        self.term = term\n        self.strg_trm = term\n\n        self.resid = np.zeros(self.term)\n        self.pred = 0.0\n\n        # matrix for storage predicted value\n        self.XPS = np.zeros((term,self.m), dtype=np.float)\n        self.VPS = np.array([np.eye(self.m, dtype=np.float)]*term)\n        # matrix for storage predicted value\n        self.XFS = np.zeros((term,self.m), dtype=np.float)\n        self.VFS = np.array([np.eye(self.m, dtype=np.float)]*term)\n        # matrix for storage smoothed value\n        self.XSS = np.zeros((term,self.m), dtype=np.float)\n        self.VSS = np.array([np.eye(self.m, dtype=np.float)]*term)\n\n    def forward_backward(self, new_data, smoothing=0):\n        self.NSUM += 1 \n        if self.NSUM < self.strg_trm:\n            self.term = int(self.NSUM)\n        else:\n            self.term = self.strg_trm\n        # forward\n        self.forward(new_data)\n        # smoothing\n        self.SMO()\n        if smoothing==1:\n            return np.mean( self.XSS[:self.term,0] )\n\n        return self.predict()[0]\n\n    def forward(self, y):\n        XF = self.XFS[self.term-1]\n        VF = self.VFS[self.term-1]     \n\n        # 1span predicting\n        XP, VP = self.forward_predicting(VF, XF)\n        XF, VF = self.filtering(y, XP, VP)\n        self.storage_params(XP, XF, VP, VF)\n#         sig2 = self.SIG2 / self.NSUM\n#         FF = -0.5 * (self.NSUM * (log(2 * np.pi * sig2) + 1) + self.LDET)\n#         return {'LLF':FF, 'Ovar':sig2}\n\n    def storage_params(self, XP, XF, VP, VF):\n        if self.NSUM>self.term:\n            self.XPS[:self.term-1] = self.XPS[1:self.term] \n            self.XFS[:self.term-1] = self.XFS[1:self.term]\n            self.VPS[:self.term-1] = self.VPS[1:self.term]\n            self.VFS[:self.term-1] = self.VFS[1:self.term]\n            self.normal_storage(XP, XF, VP, VF)\n        else:\n            self.normal_storage(XP, XF, VP, VF)\n\n    def normal_storage(self, XP, XF, VP, VF):\n        self.XPS[self.term-1] = XP \n        self.XFS[self.term-1] = XF\n        self.VPS[self.term-1] = VP\n        self.VFS[self.term-1] = VF\n\n    def forward_predicting(self, VF, XF):\n        \"\"\"1span predicting\"\"\"\n        XP = np.ndarray.flatten( np.dot(self.F, XF.T) ) #2\u9031\u76ee\u304b\u3089\u7e26\u30d9\u30af\u30c8\u30eb\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u5e38\u306b\u6a2a\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\n        VP = self.F.dot(VF).dot(self.F.T) +  self.G.dot(self.Q).dot(self.G.T)\n        return XP, VP\n\n    def filtering(self, y, XP, VP):\n        if y < self.limy: \n            B = np.dot( np.dot(self.H, VP), self.H.T)  + self.R  # H\u306f\u6570\u5b66\u7684\u306b\u306f\u6a2a\u30d9\u30af\u30c8\u30eb\n            B1 = inverse(B)\n            K = np.matrix(np.dot(VP, self.H.T)) * np.matrix(B1) # K\u306f\u7e26\u30d9\u30af\u30c8\u30eb\u306b\u306a\u308b(matrix)\n            e = np.array(y).T - np.dot(self.H, XP.T)            \n            XF = np.array(XP) + np.array( K * np.matrix(e) ).T # \u6a2a\u30d9\u30af\u30c8\u30eb\n            VF = np.array(VP) - np.array( K* np.matrix(self.H) * VP)           \n            self.SIG2 += np.ndarray.flatten(np.array( np.matrix(e) * np.matrix(B1) * np.matrix(e).T ))[0] # 1\u6b21\u5143\u3067\u3082\u8a08\u7b97\u3067\u304d\u308b\u3088\u3046\u306bmatrix\u306b\u3059\u308b\n            self.LDET += log(linalg.det(B))\n        else:\n            XF = XP; VF = VP\n        return XF, VF\n\n    def SMO(self):\n        \"\"\"fixed-interval smoothing\"\"\"\n        XS1 = self.XFS[self.term-1]\n        VS1 = self.VFS[self.term-1]\n        self.XSS[self.term-1] = XS1\n        self.VSS[self.term-1] = VS1\n        for n1 in xrange(self.term):        \n            n = (self.term-1) - n1; XP = self.XPS[n]; XF = self.XFS[n-1]\n            VP = self.VPS[n]; VF = self.VFS[n-1]; VPI = inverse(VP)\n            A = np.dot( np.dot(VF, self.F.T), VPI)\n            XS2 = XF + np.dot(A, (XS1 - XP))\n            VS2 = VF + np.dot( np.dot(A, (VS1 - VP)), A.T )\n            XS1 = XS2; VS1 = VS2\n            self.XSS[n-1] = XS1\n            self.VSS[n-1] = VS1\n\n    # TAU2x\u306e\u5bfe\u6570\u5c24\u5ea6\u95a2\u6570\u306e\u5b9a\u7fa9 \n    def LogL(self, parm, *args):\n        y=args[0]\n        LLF = self.forward(y)\n        LL = LLF['LLF']\n        return -LL # optimeze\u304c\u6700\u5c0f\u5316\u95a2\u6570\u306a\u306e\u3067\u3001\u5bfe\u6570\u5c24\u5ea6\u306b\u30de\u30a4\u30ca\u30b9\u3092\u304b\u3051\u305f\u3082\u306e\u3092\u8fd4\u3059\n\n    def predict(self, forward_time=1):\n        \"\"\"pridint average value\"\"\"\n        y = np.zeros(forward_time, dtype=np.float)\n        XFp=self.XFS[-1] #\u76f4\u8fd1\u306e\u30c7\u30fc\u30bf\u884c\u5217\u306e\u307f\u53d6\u5f97\n        #VFp=VF[XF.shape[0]-1,:]\n\n        for n in xrange(forward_time):\n            XP = np.ndarray.flatten( np.dot(self.F, XFp.T) )\n            #VP = np.dot( np.dot(F, VF), F.T ) +  np.dot( np.dot(G, Q), G.T )\n            y[n] = np.dot(self.H, XP) # \u671f\u5f85\u5024\u3092\u53d6\u308b\u306e\u3067\u30ce\u30a4\u30ba\u306f\u5165\u308c\u306a\u3044\n            XFp=XP\n        return y\n\n    def FGHset(self, al, k, p, q, w=10):\n        \"\"\"\u5b63\u7bc0\u8abf\u6574\u30e2\u30c7\u30eb\u306e\u72b6\u614b\u7a7a\u9593\u8868\u73fe\u306e\u884c\u5217\u8a2d\u5b9a\n        al\uff1aAR\u30e2\u30c7\u30eb\u306e\u03b1\u30d9\u30af\u30c8\u30eb\n        k,p,q\uff1a\u968e\u5dee\u3001\u5b63\u7bc0\u6027\u5468\u671f\u3001AR\u30d1\u30e9\u30e1\u30bf\u6570\uff08\u4e88\u6e2c\u3059\u308b\u5834\u5408\u306fk>=2\u3068\u3059\u308b\uff09\n        w:\u30b7\u30b9\u30c6\u30e0\u8aa4\u5dee\u306e\u5206\u6563\uff08\u5909\u5316\u70b9\u691c\u51fa\u3067\u306f\u5c0f\u3055\u3081\u306b\u6c7a\u3081\u6253\u3061\u3067\u8a2d\u5b9a\u3057\u3066\u304a\u3051\u3070\u826f\u3044\uff09\n        \"\"\"\n        m = k + p + q -1\n\n        if q>0: G = np.zeros((m,3), dtype=np.float) # \u72b6\u614b\u30e2\u30c7\u30eb\u3067\u30c8\u30ec\u30f3\u30c9\u3001\u5b63\u7bc0\u3001AR\u306e3\u3064\u3092\u542b\u3080\u5834\u5408\n        elif p>0: G = np.zeros((m,2), dtype=np.float) #AR\u6210\u5206\u3092\u542b\u307e\u306a\u3044\u5834\u5408(q=0)\n        else: m=k; G = np.zeros((m,1), dtype=np.float)\n        F = np.zeros((m,m), dtype=np.float)\n        H = np.zeros((1,m), dtype=np.float)\n\n        ns = 0; ls =0\n        # \u30c8\u30ec\u30f3\u30c9\u30e2\u30c7\u30eb\u306e\u30d6\u30ed\u30c3\u30af\u884c\u5217\u306e\u69cb\u7bc9\n        if k>0:\n            ns +=1\n            G[0,0] = 1; H[0,0] = 1\n            if k==1: F[0,0] = 1\n            if k==2: F[0,0] = 2; F[0,1] = -1; F[1,0] = 1\n            if k==3: F[0,0] = 3; F[0,1] = -3; F[0,2] = 1; F[1,0] = 1; F[2,1] = 1\n            ls += k\n\n        # \u5b63\u7bc0\u8abf\u6574\u6210\u5206\u30d6\u30ed\u30c3\u30af\u884c\u5217\u306e\u69cb\u7bc9\n        if p>0:\n            ns +=1\n            G[ls, ns-1] = 1\n            H[0,ls] = 1\n            for i in xrange(p-1): F[ls, ls+i] = -1\n            for i in xrange(p-2): F[ls+i+1, ls+i] = 1\n            ls +=p-1\n\n        # AR\u6210\u5206\u30d6\u30ed\u30c3\u30af\u884c\u5217\u306e\u69cb\u7bc9\n        if q>0:\n            ns +=1\n            G[ls, ns-1] = 1\n            H[0,ls] = 1\n            for i in xrange(q): F[ls, ls+i-1] = al[i]\n            if q>1:\n                for i in xrange(q-1): F[ls+i, ls+i-1] = 1\n\n        # \u30b7\u30b9\u30e0\u30e2\u30c7\u30eb\u306e\u5206\u6563\u5171\u5206\u6563\u884c\u5217Q\u306e\u67a0\u306e\u7b97\u51fa\n        Q = np.eye(ns,dtype=np.float)*w\n\n        return m, F, G, H, Q\n\n\n\n\u5909\u5316\u70b9\u691c\u77e5\u306b\u3064\u3044\u3066\u306e\u30b3\u30fc\u30c9\n\nKF_AnomalyDetection.py\n# coding: utf-8\nfrom math import log, ceil\nimport numpy as np\nfrom scipy.stats import norm, t\nimport matplotlib.pyplot as plt\nimport KF\n\nclass KFAnomalyDetection:\n    datalist = []\n    outlier_score_list = []\n    change_score_list = []\n    outlier_score_smooth = []\n    change_score_smooth = []\n    outlier_resid = None\n    change_resid = None\n    outlier_pred = None\n    change_pred = None\n\n    def __init__(self, term, smooth, k=2, p=0, q=0, w=10):\n        self.kf_outlier_score = KF.KalmanFiltering(k,p,q,term=term, w=w)\n        self.kf_first_smooth_score = KF.KalmanFiltering(k,p,q,term=smooth, w=w)\n        self.kf_change_score = KF.KalmanFiltering(k,p,q,term=term, w=w)\n        self.kf_second_smooth_score = KF.KalmanFiltering(k,p,q,term=smooth, w=w)\n        self.term = term\n\n    def forward_step(self, new_data):\n        # add new_data to datalist\n        if len(self.datalist)>=self.term:\n            self.datalist.pop(0)\n            self.datalist.append(new_data)\n        else:\n            self.datalist.append(new_data)\n\n        # compute score\n        if self.outlier_pred is None:\n            self.first_step(new_data)\n        else:\n            self.calculate_score_step(new_data)\n            self.learn_step(new_data)\n\n    def conversion_score(self, train, var):\n        \"\"\"convert score to log loss\"\"\"\n        m = np.mean(train)\n        s = np.std(train)\n        try:\n            if s < 1: s=1\n            px = norm.pdf(var, m, s) if norm.pdf(var, m, s)!=0.0 else 1e-308\n            res = -log(px)\n            return res\n        except:\n            return 0\n\n    def first_step(self, new_data):\n        # learn outlier model\n        self.outlier_resid, self.outlier_pred = \\\n                self.learn_KF(self.kf_outlier_score, new_data)\n        # calculate outlier score\n        self.calculate_score(self.kf_first_smooth_score, self.outlier_resid,\n                    self.outlier_pred, new_data, self.outlier_score_list,\n                    self.outlier_score_smooth)\n        # learn cnage model\n        self.change_resid, self.change_pred = \\\n                self.learn_KF(self.kf_change_score, self.outlier_score_smooth[-1])\n        # calculate change score\n        self.calculate_score(self.kf_second_smooth_score, self.change_resid,\n                    self.change_pred, self.outlier_score_smooth[-1],\n                    self.change_score_list, self.change_score_smooth)\n\n    def learn_step(self, data):\n        self.outlier_resid, self.outlier_pred = \\\n                self.learn_KF(self.kf_outlier_score, data)\n        self.change_resid, self.change_pred = \\\n                self.learn_KF(self.kf_change_score, self.outlier_score_smooth[-1])\n\n    def learn_KF(self, func, data):\n        \"\"\"leaning KF from new data\"\"\"\n        pred = func.forward_backward(data)\n        resid = np.abs( func.XSS[:func.term,0] - np.array(self.datalist) ) # residuals\n        return resid, pred\n\n    def calculate_score_step(self, new_data):\n        # calculate outlier score\n        self.calculate_score(self.kf_first_smooth_score, self.outlier_resid,\n                    self.outlier_pred, new_data, self.outlier_score_list,\n                    self.outlier_score_smooth)\n        # calculate change score\n        self.calculate_score(self.kf_second_smooth_score, self.change_resid,\n                    self.change_pred, self.outlier_score_smooth[-1],\n                    self.change_score_list, self.change_score_smooth)\n\n    def calculate_score(self, func, resid, pred, new_data, storage_score_list, storage_smooth_list):\n        score = self.conversion_score( resid, abs(float(pred) - float(new_data)) )\n        print 'got score', score\n        storage_score_list.append(score)\n        print 'smoothing score'\n        storage_smooth_list.append( func.forward_backward(score, smoothing=1) )\n\nif __name__=='__main__':\n    fname = 'test'\n    term = 3 # time window of training\n    smooth = 1\n    kfad = KFAnomalyDetection(term,smooth,2,0,0,20)\n    datalist = []\n    of = open('score_out.txt','w')    \n    dlist = np.hstack( (np.random.normal(0,1,100),np.random.normal(10,0.2,20),np.random.normal(0,1,100)) )\n    for data in dlist:\n        kfad.forward_step(data)\n        of.write( str(kfad.change_score_smooth[-1])+'\\n' )\n    of.close()\n\n    rng = range( len(dlist.tolist()) )\n    plt.plot(rng,dlist,label=u\"data\")\n    plt.show()\n    plt.plot(rng,kfad.change_score_smooth,label=u\"score\")\n    plt.show()\n\n\n\u76f8\u5909\u308f\u3089\u305a\u6c5a\u3044\u30b3\u30fc\u30c9\u3067\u7533\u3057\u8a33\u3042\u308a\u307e\u305b\u3093\u3002\u30ab\u30eb\u30de\u30f3\u30d5\u30a3\u30eb\u30bf\u306e\u30b3\u30fc\u30c9\u306f1\u5e74\u4ee5\u4e0a\u524d\u306b\u66f8\u3044\u305f\u3093\u3067\u3059\u304c\u3001\u4eca\u898b\u308b\u3068\u300c\u8ab0\u3060\u3088\u3053\u3093\u306a\u30a6\u30f3\u30b3\u30fc\u30c9\u66f8\u3044\u305f\u5974\u306f\u300d\u3063\u3066\u601d\u3044\u307e\u3059\u306d\u3002\u3002\u3002\n\u3093\u307e\u30011\u5e74\u524d\u3088\u308a\u306f\u6210\u9577\u3057\u3066\u3044\u308b\u3068\u524d\u5411\u304d\u306b\u6349\u3048\u3066\u304a\u304f\u3053\u3068\u306b\u3057\u307e\u3059\uff57\n\u30b9\u30b3\u30a2\u7b97\u51fa\u306e\u969b\u306b\u6a19\u6e96\u504f\u5dee\u306e\u5024\u304c\u5c0f\u3055\u3044\u3068\u7570\u5e38\u5024\u3068\u5224\u5b9a\u3055\u308c\u308b\u30dd\u30a4\u30f3\u30c8\u304c\u591a\u304f\u306a\u308b\u305f\u3081\u3001\u6a19\u6e96\u504f\u5dee\u306e\u6700\u5c0f\u5024\u30921\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\uff08\u30ab\u30a6\u30f3\u30c8\u30c7\u30fc\u30bf\u306a\u3089\u8a31\u5bb9\u3055\u308c\u308b\u304b\u306a\u3001\u304f\u3089\u3044\u306a\u611f\u3058\u3067\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\uff09\n\u307e\u305f\u3001\u7570\u5e38\u904e\u304e\u308b\u5024\u304c\u5165\u529b\u3055\u308c\u305f\u5834\u5408\u306b\u3001\u78ba\u7387\u304c\u30bc\u30ed\u3068\u307f\u306a\u3055\u308c\uff08\u30bc\u30ed\u5024\u304c\u8fd4\u3063\u3066\u304f\u308b\uff09\u3001log\u306e\u6f14\u7b97\u304c\u51fa\u6765\u306a\u304f\u306a\u308b\u305f\u3081\u3001float\u306e\u6700\u5c0f\u30aa\u30fc\u30c0\u30fc\u306b\u7f6e\u304d\u63db\u3048\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e\u8fba\u308a\u306f\u88fe\u306e\u539a\u3044\u5206\u5e03\u3092\u4f7f\u7528\u3059\u308c\u3070\u89e3\u6c7a\u51fa\u6765\u308b\u53ef\u80fd\u6027\u3082\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u5b9f\u9a13\u7d50\u679c\n\u4e0a\u306e\u30b3\u30fc\u30c9\u3067\u5b9f\u884c\u3057\u305f\u7d50\u679c\u3092\u4ee5\u4e0b\u306b\u8cbc\u308a\u4ed8\u3051\u307e\u3059\u3002\n\n\u5143\u30c7\u30fc\u30bf\n\n\n\u5909\u5316\u70b9\u30b9\u30b3\u30a2\u30c7\u30fc\u30bf\n\n\n\u30b3\u30e1\u30f3\u30c8\n\u5272\u308a\u3068\u4e0a\u624b\u304f\u30b9\u30b3\u30a2\u691c\u51fa\u51fa\u6765\u3066\u307e\u3059\u306d\u3002\u3053\u308c\u3060\u3051\u660e\u78ba\u306a\u30c7\u30fc\u30bf\u3060\u3068\u691c\u51fa\u51fa\u6765\u3066\u5f53\u305f\u308a\u524d\u3067\u3059\u304c\u3002\u3002\u3002\n\u30d1\u30e9\u30e1\u30bf\u306b\u3064\u3044\u3066\u306f\u3001\u307b\u3068\u3093\u3069term\uff08time window\uff09\u3057\u304b\u5909\u66f4\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002smooth\u306ewindow\u306b\u3064\u3044\u3066\u30821\u3067\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002\u3064\u307e\u308a\u4e0a\u306e\u30b3\u30fc\u30c9\u306esmooth\u90e8\u5206\u306f\u305f\u3060\u305f\u3060\u7121\u99c4\u306b\u8a08\u7b97\u3057\u3066\u3044\u308b\u3060\u3051\u3001\u3068\u3044\u3046\u4e8b\u306b\u306a\u308a\u307e\u3059\u306d...orz\n\u305d\u308c\u3068\u3001\u5206\u6563\u3082\u6c7a\u3081\u6253\u3061\u3067\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3057\u3001\u5927\u304d\u306a\u5909\u5316\u306b\u5bfe\u5fdc\u3055\u305b\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u306e\u3067\u3001\u30b9\u30b1\u30fc\u30eb\u306b\u3082\u3088\u308a\u307e\u3059\u304c10\uff5e20\u304f\u3089\u3044\u3067\u3044\u3044\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u307e\u3068\u3081\nARIMA\u30e2\u30c7\u30eb\u3088\u308a\u3082\u30ab\u30eb\u30de\u30f3\u30d5\u30a3\u30eb\u30bf\u306e\u65b9\u304c\u5229\u70b9\u304c\u591a\u3044\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u601d\u3063\u3066\u4f5c\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u7d50\u679c\u306f\u601d\u3063\u305f\u307b\u3069\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u3002\n\u6539\u5584\u51fa\u6765\u305d\u3046\u306a\u3068\u3053\u308d\u3092\u4eca\u5f8c\u3082\u63a2\u3057\u3066\u3044\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u304a\u624b\u6570\u3067\u3059\u304c\u9593\u9055\u3044\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u307e\u3059\u3068\u52a9\u304b\u308a\u307e\u3059\u3002\n# \u52d5\u6a5f\n\u4ed5\u4e8b\u3067\u5909\u5316\u70b9\u691c\u77e5\u3092\u3059\u308b\u6a5f\u4f1a\u304c\u3042\u308a\u307e\u3057\u305f\u3002\u305d\u306e\u6642\u306f\u6642\u9593\u304c\u306a\u304b\u3063\u305f\u4e8b\u3082\u3042\u308a\u3001[yokkuns\u3055\u3093\u304c\u3084\u3089\u308c\u3066\u3044\u305fARIMA\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0](http://d.hatena.ne.jp/yokkuns/20120930/1348978641)\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u4f5c\u308a\u307e\u3057\u305f\u3002\u305f\u3060\u3001ARIMA\u30e2\u30c7\u30eb\u3060\u3068\u8272\u3005\u3068\u9762\u5012\u306a\u3068\u3053\u308d\u304c\u3042\u3063\u305f\u306e\u3067kalman filter\u3067\u66f8\u304d\u63db\u3048\u3092\u8a66\u307f\u305f\u6b21\u7b2c\u3067\u3059\u3002\n\n# ARIMA\u30e2\u30c7\u30eb\u306e\u554f\u984c\u70b9\n\n* \u30d1\u30e9\u30e1\u30bf\u8abf\u6574\u304c\u9762\u5012\n* \u5bfe\u8c61\u3068\u3059\u308bwindow\u4ee5\u4e0a\u306e\u30c7\u30fc\u30bf\u304c\u6e9c\u307e\u308b\u307e\u3067\u89e3\u6790\u3067\u304d\u306a\u3044\n* window\u5185\u306b\u540c\u4e00\u30c7\u30fc\u30bf\u306e\u307f\u304c\u4e26\u3093\u3060\u30d9\u30af\u30c8\u30eb\u3068\u306a\u3063\u305f\u5834\u5408\u3001\u9006\u884c\u5217\u304c\u8a08\u7b97\u51fa\u6765\u306a\u3044\n\n# \u53c2\u8003\u6587\u732e\n\n* [\u30c7\u30fc\u30bf\u30de\u30a4\u30cb\u30f3\u30b0\u306b\u3088\u308b\u7570\u5e38\u691c\u77e5](http://www.amazon.co.jp/gp/product/4320018826/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4320018826&linkCode=as2&tag=shimashimao06-22)\n* [\u30d9\u30a4\u30ba\u7d71\u8a08\u30c7\u30fc\u30bf\u89e3\u6790 (R\u3067\u5b66\u3076\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9 3)](http://www.amazon.co.jp/gp/product/4320019237/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4320019237&linkCode=as2&tag=shimashimao06-22)\n\n\u4e3b\u306b\u53c2\u8003\u306b\u3057\u305f\u306e\u306f\u3001\u307f\u3093\u306a\u5927\u597d\u304d\u300c\u30c7\u30fc\u30bf\u30de\u30a4\u30cb\u30f3\u30b0\u306b\u3088\u308b\u7570\u5e38\u691c\u77e5\u300d\u3067\u3059\u3002\n\n# \u6982\u8981\n\u8a08\u7b97\u30b9\u30c6\u30c3\u30d7\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\u8a08\u7b97\u306f\u5927\u304d\u304f\u5206\u3051\u3066\u3001\u5b66\u7fd2\u30b9\u30c6\u30c3\u30d7\u3068\u30b9\u30b3\u30a2\u8a08\u7b97\u30b9\u30c6\u30c3\u30d7\u306b\u5206\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n## \u5b66\u7fd2\u30b9\u30c6\u30c3\u30d7\n\u3053\u3061\u3089\u306f\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u304f\u308b\u524d\u306b\u8a08\u7b97\u3057\u3066\u304a\u304f\u30b9\u30c6\u30c3\u30d7\u3067\u3059\u3002\n\n* \u3042\u308btime window\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u3001\u5f53\u8a72\u30c7\u30fc\u30bf\u306bfit\u3059\u308b\u6642\u7cfb\u5217\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\n* time window\u306e\u30c7\u30fc\u30bf\u3068\u306e\u6b8b\u5dee\u3092\u8a08\u7b97\n* \u6b21\u306e\u6642\u70b9\u306e\u30c7\u30fc\u30bf\u3092\u4e88\u6e2c\n\n## \u30b9\u30b3\u30a2\u8a08\u7b97\u30b9\u30c6\u30c3\u30d7\n\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u304d\u305f\u6642\u306b\u8a08\u7b97\u3092\u884c\u3046\u30b9\u30c6\u30c3\u30d7\u3067\u3059\u3002\n\n* \u5b66\u7fd2\u30b9\u30c6\u30c3\u30d7\u3067\u8a08\u7b97\u3057\u305f\u6b8b\u5dee\u3068\u4e88\u6e2c\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u5909\u5316\u70b9\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\n* \u30b9\u30b3\u30a2\u306e\u5e73\u6ed1\u5316\n\n\u5909\u5316\u70b9\u30b9\u30b3\u30a2\u8a08\u7b97\u306e\u6982\u8981\u306f\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\n\n* \u6b8b\u5dee\u30d9\u30af\u30c8\u30eb\u3092\u6b63\u898f\u5206\u5e03\u304b\u3089\u30b5\u30f3\u30d7\u30eb\u30ea\u30f3\u30b0\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3068\u307f\u306a\u3059\n* \u6b8b\u5dee\u30d9\u30af\u30c8\u30eb\u304b\u3089\u6b63\u898f\u5206\u5e03\u306e\u4ee3\u8868\u5024\uff08\u5e73\u5747\u3001\u6a19\u6e96\u504f\u5dee\uff09\u3092\u8a08\u7b97\n* \u904e\u53bb\u306e\u30c7\u30fc\u30bf\u306e\u50be\u5411\u304b\u3089\u306e\u4e88\u6e2c\u5024\u3068\u89b3\u6e2c\u5024\u306e\u5dee\u304c\u4eca\u307e\u3067\u306e\u30c7\u30fc\u30bf\u304b\u3089\u307f\u3066\u7570\u5e38\u306a\u5024\u304b\u3069\u3046\u304b\u306e\u691c\u5b9a\u3092\u884c\u3046\uff08\u78ba\u7387\u3092\u898b\u308b\uff09\n* \u78ba\u7387\u3092\u30b9\u30b3\u30a2\u306b\u5909\u63db\u3059\u308b\n\n\u7c21\u5358\u3067\u3059\u304c\u8aac\u660e\u306f\u4ee5\u4e0a\u3067\u3059\u3002\n\u3067\u306f\u3001\u4ee5\u4e0b\u306b\u30b3\u30fc\u30c9\u3092\u8a18\u8f09\u3057\u307e\u3059\u3002\n\n# \u53c2\u8003\u30b3\u30fc\u30c9\n## kalman filter\u306b\u3064\u3044\u3066\u306e\u30b3\u30fc\u30c9\n\n```py:KF.py\n# coding: utf8\n\nfrom numpy.oldnumeric.linear_algebra import inverse\nfrom scipy import linalg\nimport numpy as np\nfrom math import log\n\nclass KalmanFiltering:\n    limy = 1e20 # \u6b20\u6e2c\u3068\u307f\u306a\u3059\u6570\u5024\u306e\u5883\u754c\n    GSIG2 = 1\n    L = 1\n    R = np.identity(L)\n    NSUM = 0.0\n    SIG2 = 0.0\n    LDET = 0.0\n    \n    def __init__(self, k, p, q, term=10, w=10):\n        self.k = k # \u968e\u5dee\n        self.p = p # \u5b63\u7bc0\u6027\u5faa\u74b0\n        self.q = q # AR\u6210\u5206\n        self.m, self.F, self.G, \\\n            self.H, self.Q = self.FGHset(0,k,p,q,w)\n        self.term = term\n        self.strg_trm = term\n        \n        self.resid = np.zeros(self.term)\n        self.pred = 0.0\n        \n        # matrix for storage predicted value\n        self.XPS = np.zeros((term,self.m), dtype=np.float)\n        self.VPS = np.array([np.eye(self.m, dtype=np.float)]*term)\n        # matrix for storage predicted value\n        self.XFS = np.zeros((term,self.m), dtype=np.float)\n        self.VFS = np.array([np.eye(self.m, dtype=np.float)]*term)\n        # matrix for storage smoothed value\n        self.XSS = np.zeros((term,self.m), dtype=np.float)\n        self.VSS = np.array([np.eye(self.m, dtype=np.float)]*term)\n\n    def forward_backward(self, new_data, smoothing=0):\n        self.NSUM += 1 \n        if self.NSUM < self.strg_trm:\n            self.term = int(self.NSUM)\n        else:\n            self.term = self.strg_trm\n        # forward\n        self.forward(new_data)\n        # smoothing\n        self.SMO()\n        if smoothing==1:\n            return np.mean( self.XSS[:self.term,0] )\n                    \n        return self.predict()[0]\n    \n    def forward(self, y):\n        XF = self.XFS[self.term-1]\n        VF = self.VFS[self.term-1]     \n\n        # 1span predicting\n        XP, VP = self.forward_predicting(VF, XF)\n        XF, VF = self.filtering(y, XP, VP)\n        self.storage_params(XP, XF, VP, VF)\n#         sig2 = self.SIG2 / self.NSUM\n#         FF = -0.5 * (self.NSUM * (log(2 * np.pi * sig2) + 1) + self.LDET)\n#         return {'LLF':FF, 'Ovar':sig2}\n    \n    def storage_params(self, XP, XF, VP, VF):\n        if self.NSUM>self.term:\n            self.XPS[:self.term-1] = self.XPS[1:self.term] \n            self.XFS[:self.term-1] = self.XFS[1:self.term]\n            self.VPS[:self.term-1] = self.VPS[1:self.term]\n            self.VFS[:self.term-1] = self.VFS[1:self.term]\n            self.normal_storage(XP, XF, VP, VF)\n        else:\n            self.normal_storage(XP, XF, VP, VF)\n                \n    def normal_storage(self, XP, XF, VP, VF):\n        self.XPS[self.term-1] = XP \n        self.XFS[self.term-1] = XF\n        self.VPS[self.term-1] = VP\n        self.VFS[self.term-1] = VF\n    \n    def forward_predicting(self, VF, XF):\n        \"\"\"1span predicting\"\"\"\n        XP = np.ndarray.flatten( np.dot(self.F, XF.T) ) #2\u9031\u76ee\u304b\u3089\u7e26\u30d9\u30af\u30c8\u30eb\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u5e38\u306b\u6a2a\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\n        VP = self.F.dot(VF).dot(self.F.T) +  self.G.dot(self.Q).dot(self.G.T)\n        return XP, VP\n    \n    def filtering(self, y, XP, VP):\n        if y < self.limy: \n            B = np.dot( np.dot(self.H, VP), self.H.T)  + self.R  # H\u306f\u6570\u5b66\u7684\u306b\u306f\u6a2a\u30d9\u30af\u30c8\u30eb\n            B1 = inverse(B)\n            K = np.matrix(np.dot(VP, self.H.T)) * np.matrix(B1) # K\u306f\u7e26\u30d9\u30af\u30c8\u30eb\u306b\u306a\u308b(matrix)\n            e = np.array(y).T - np.dot(self.H, XP.T)            \n            XF = np.array(XP) + np.array( K * np.matrix(e) ).T # \u6a2a\u30d9\u30af\u30c8\u30eb\n            VF = np.array(VP) - np.array( K* np.matrix(self.H) * VP)           \n            self.SIG2 += np.ndarray.flatten(np.array( np.matrix(e) * np.matrix(B1) * np.matrix(e).T ))[0] # 1\u6b21\u5143\u3067\u3082\u8a08\u7b97\u3067\u304d\u308b\u3088\u3046\u306bmatrix\u306b\u3059\u308b\n            self.LDET += log(linalg.det(B))\n        else:\n            XF = XP; VF = VP\n        return XF, VF\n        \n    def SMO(self):\n        \"\"\"fixed-interval smoothing\"\"\"\n        XS1 = self.XFS[self.term-1]\n        VS1 = self.VFS[self.term-1]\n        self.XSS[self.term-1] = XS1\n        self.VSS[self.term-1] = VS1\n        for n1 in xrange(self.term):        \n            n = (self.term-1) - n1; XP = self.XPS[n]; XF = self.XFS[n-1]\n            VP = self.VPS[n]; VF = self.VFS[n-1]; VPI = inverse(VP)\n            A = np.dot( np.dot(VF, self.F.T), VPI)\n            XS2 = XF + np.dot(A, (XS1 - XP))\n            VS2 = VF + np.dot( np.dot(A, (VS1 - VP)), A.T )\n            XS1 = XS2; VS1 = VS2\n            self.XSS[n-1] = XS1\n            self.VSS[n-1] = VS1\n                \n    # TAU2x\u306e\u5bfe\u6570\u5c24\u5ea6\u95a2\u6570\u306e\u5b9a\u7fa9 \n    def LogL(self, parm, *args):\n        y=args[0]\n        LLF = self.forward(y)\n        LL = LLF['LLF']\n        return -LL # optimeze\u304c\u6700\u5c0f\u5316\u95a2\u6570\u306a\u306e\u3067\u3001\u5bfe\u6570\u5c24\u5ea6\u306b\u30de\u30a4\u30ca\u30b9\u3092\u304b\u3051\u305f\u3082\u306e\u3092\u8fd4\u3059\n    \n    def predict(self, forward_time=1):\n        \"\"\"pridint average value\"\"\"\n        y = np.zeros(forward_time, dtype=np.float)\n        XFp=self.XFS[-1] #\u76f4\u8fd1\u306e\u30c7\u30fc\u30bf\u884c\u5217\u306e\u307f\u53d6\u5f97\n        #VFp=VF[XF.shape[0]-1,:]\n        \n        for n in xrange(forward_time):\n            XP = np.ndarray.flatten( np.dot(self.F, XFp.T) )\n            #VP = np.dot( np.dot(F, VF), F.T ) +  np.dot( np.dot(G, Q), G.T )\n            y[n] = np.dot(self.H, XP) # \u671f\u5f85\u5024\u3092\u53d6\u308b\u306e\u3067\u30ce\u30a4\u30ba\u306f\u5165\u308c\u306a\u3044\n            XFp=XP\n        return y\n\n    def FGHset(self, al, k, p, q, w=10):\n        \"\"\"\u5b63\u7bc0\u8abf\u6574\u30e2\u30c7\u30eb\u306e\u72b6\u614b\u7a7a\u9593\u8868\u73fe\u306e\u884c\u5217\u8a2d\u5b9a\n        al\uff1aAR\u30e2\u30c7\u30eb\u306e\u03b1\u30d9\u30af\u30c8\u30eb\n        k,p,q\uff1a\u968e\u5dee\u3001\u5b63\u7bc0\u6027\u5468\u671f\u3001AR\u30d1\u30e9\u30e1\u30bf\u6570\uff08\u4e88\u6e2c\u3059\u308b\u5834\u5408\u306fk>=2\u3068\u3059\u308b\uff09\n        w:\u30b7\u30b9\u30c6\u30e0\u8aa4\u5dee\u306e\u5206\u6563\uff08\u5909\u5316\u70b9\u691c\u51fa\u3067\u306f\u5c0f\u3055\u3081\u306b\u6c7a\u3081\u6253\u3061\u3067\u8a2d\u5b9a\u3057\u3066\u304a\u3051\u3070\u826f\u3044\uff09\n        \"\"\"\n        m = k + p + q -1\n    \n        if q>0: G = np.zeros((m,3), dtype=np.float) # \u72b6\u614b\u30e2\u30c7\u30eb\u3067\u30c8\u30ec\u30f3\u30c9\u3001\u5b63\u7bc0\u3001AR\u306e3\u3064\u3092\u542b\u3080\u5834\u5408\n        elif p>0: G = np.zeros((m,2), dtype=np.float) #AR\u6210\u5206\u3092\u542b\u307e\u306a\u3044\u5834\u5408(q=0)\n        else: m=k; G = np.zeros((m,1), dtype=np.float)\n        F = np.zeros((m,m), dtype=np.float)\n        H = np.zeros((1,m), dtype=np.float)\n      \n        ns = 0; ls =0\n        # \u30c8\u30ec\u30f3\u30c9\u30e2\u30c7\u30eb\u306e\u30d6\u30ed\u30c3\u30af\u884c\u5217\u306e\u69cb\u7bc9\n        if k>0:\n            ns +=1\n            G[0,0] = 1; H[0,0] = 1\n            if k==1: F[0,0] = 1\n            if k==2: F[0,0] = 2; F[0,1] = -1; F[1,0] = 1\n            if k==3: F[0,0] = 3; F[0,1] = -3; F[0,2] = 1; F[1,0] = 1; F[2,1] = 1\n            ls += k\n      \n        # \u5b63\u7bc0\u8abf\u6574\u6210\u5206\u30d6\u30ed\u30c3\u30af\u884c\u5217\u306e\u69cb\u7bc9\n        if p>0:\n            ns +=1\n            G[ls, ns-1] = 1\n            H[0,ls] = 1\n            for i in xrange(p-1): F[ls, ls+i] = -1\n            for i in xrange(p-2): F[ls+i+1, ls+i] = 1\n            ls +=p-1\n      \n        # AR\u6210\u5206\u30d6\u30ed\u30c3\u30af\u884c\u5217\u306e\u69cb\u7bc9\n        if q>0:\n            ns +=1\n            G[ls, ns-1] = 1\n            H[0,ls] = 1\n            for i in xrange(q): F[ls, ls+i-1] = al[i]\n            if q>1:\n                for i in xrange(q-1): F[ls+i, ls+i-1] = 1\n      \n        # \u30b7\u30b9\u30e0\u30e2\u30c7\u30eb\u306e\u5206\u6563\u5171\u5206\u6563\u884c\u5217Q\u306e\u67a0\u306e\u7b97\u51fa\n        Q = np.eye(ns,dtype=np.float)*w\n      \n        return m, F, G, H, Q\n```\n\n## \u5909\u5316\u70b9\u691c\u77e5\u306b\u3064\u3044\u3066\u306e\u30b3\u30fc\u30c9\n\n```py:KF_AnomalyDetection.py\n# coding: utf-8\nfrom math import log, ceil\nimport numpy as np\nfrom scipy.stats import norm, t\nimport matplotlib.pyplot as plt\nimport KF\n\nclass KFAnomalyDetection:\n    datalist = []\n    outlier_score_list = []\n    change_score_list = []\n    outlier_score_smooth = []\n    change_score_smooth = []\n    outlier_resid = None\n    change_resid = None\n    outlier_pred = None\n    change_pred = None\n    \n    def __init__(self, term, smooth, k=2, p=0, q=0, w=10):\n        self.kf_outlier_score = KF.KalmanFiltering(k,p,q,term=term, w=w)\n        self.kf_first_smooth_score = KF.KalmanFiltering(k,p,q,term=smooth, w=w)\n        self.kf_change_score = KF.KalmanFiltering(k,p,q,term=term, w=w)\n        self.kf_second_smooth_score = KF.KalmanFiltering(k,p,q,term=smooth, w=w)\n        self.term = term\n    \n    def forward_step(self, new_data):\n        # add new_data to datalist\n        if len(self.datalist)>=self.term:\n            self.datalist.pop(0)\n            self.datalist.append(new_data)\n        else:\n            self.datalist.append(new_data)\n\n        # compute score\n        if self.outlier_pred is None:\n            self.first_step(new_data)\n        else:\n            self.calculate_score_step(new_data)\n            self.learn_step(new_data)\n    \n    def conversion_score(self, train, var):\n        \"\"\"convert score to log loss\"\"\"\n        m = np.mean(train)\n        s = np.std(train)\n        try:\n            if s < 1: s=1\n            px = norm.pdf(var, m, s) if norm.pdf(var, m, s)!=0.0 else 1e-308\n            res = -log(px)\n            return res\n        except:\n            return 0\n\n    def first_step(self, new_data):\n        # learn outlier model\n        self.outlier_resid, self.outlier_pred = \\\n                self.learn_KF(self.kf_outlier_score, new_data)\n        # calculate outlier score\n        self.calculate_score(self.kf_first_smooth_score, self.outlier_resid,\n                    self.outlier_pred, new_data, self.outlier_score_list,\n                    self.outlier_score_smooth)\n        # learn cnage model\n        self.change_resid, self.change_pred = \\\n                self.learn_KF(self.kf_change_score, self.outlier_score_smooth[-1])\n        # calculate change score\n        self.calculate_score(self.kf_second_smooth_score, self.change_resid,\n                    self.change_pred, self.outlier_score_smooth[-1],\n                    self.change_score_list, self.change_score_smooth)\n\n    def learn_step(self, data):\n        self.outlier_resid, self.outlier_pred = \\\n                self.learn_KF(self.kf_outlier_score, data)\n        self.change_resid, self.change_pred = \\\n                self.learn_KF(self.kf_change_score, self.outlier_score_smooth[-1])\n    \n    def learn_KF(self, func, data):\n        \"\"\"leaning KF from new data\"\"\"\n        pred = func.forward_backward(data)\n        resid = np.abs( func.XSS[:func.term,0] - np.array(self.datalist) ) # residuals\n        return resid, pred\n         \n    def calculate_score_step(self, new_data):\n        # calculate outlier score\n        self.calculate_score(self.kf_first_smooth_score, self.outlier_resid,\n                    self.outlier_pred, new_data, self.outlier_score_list,\n                    self.outlier_score_smooth)\n        # calculate change score\n        self.calculate_score(self.kf_second_smooth_score, self.change_resid,\n                    self.change_pred, self.outlier_score_smooth[-1],\n                    self.change_score_list, self.change_score_smooth)\n\n    def calculate_score(self, func, resid, pred, new_data, storage_score_list, storage_smooth_list):\n        score = self.conversion_score( resid, abs(float(pred) - float(new_data)) )\n        print 'got score', score\n        storage_score_list.append(score)\n        print 'smoothing score'\n        storage_smooth_list.append( func.forward_backward(score, smoothing=1) )\n         \nif __name__=='__main__':\n    fname = 'test'\n    term = 3 # time window of training\n    smooth = 1\n    kfad = KFAnomalyDetection(term,smooth,2,0,0,20)\n    datalist = []\n    of = open('score_out.txt','w')    \n    dlist = np.hstack( (np.random.normal(0,1,100),np.random.normal(10,0.2,20),np.random.normal(0,1,100)) )\n    for data in dlist:\n        kfad.forward_step(data)\n        of.write( str(kfad.change_score_smooth[-1])+'\\n' )\n    of.close()\n    \n    rng = range( len(dlist.tolist()) )\n    plt.plot(rng,dlist,label=u\"data\")\n    plt.show()\n    plt.plot(rng,kfad.change_score_smooth,label=u\"score\")\n    plt.show()\n```\n\n\u76f8\u5909\u308f\u3089\u305a\u6c5a\u3044\u30b3\u30fc\u30c9\u3067\u7533\u3057\u8a33\u3042\u308a\u307e\u305b\u3093\u3002\u30ab\u30eb\u30de\u30f3\u30d5\u30a3\u30eb\u30bf\u306e\u30b3\u30fc\u30c9\u306f1\u5e74\u4ee5\u4e0a\u524d\u306b\u66f8\u3044\u305f\u3093\u3067\u3059\u304c\u3001\u4eca\u898b\u308b\u3068\u300c\u8ab0\u3060\u3088\u3053\u3093\u306a\u30a6\u30f3\u30b3\u30fc\u30c9\u66f8\u3044\u305f\u5974\u306f\u300d\u3063\u3066\u601d\u3044\u307e\u3059\u306d\u3002\u3002\u3002\n\u3093\u307e\u30011\u5e74\u524d\u3088\u308a\u306f\u6210\u9577\u3057\u3066\u3044\u308b\u3068\u524d\u5411\u304d\u306b\u6349\u3048\u3066\u304a\u304f\u3053\u3068\u306b\u3057\u307e\u3059\uff57\n\n\u30b9\u30b3\u30a2\u7b97\u51fa\u306e\u969b\u306b\u6a19\u6e96\u504f\u5dee\u306e\u5024\u304c\u5c0f\u3055\u3044\u3068\u7570\u5e38\u5024\u3068\u5224\u5b9a\u3055\u308c\u308b\u30dd\u30a4\u30f3\u30c8\u304c\u591a\u304f\u306a\u308b\u305f\u3081\u3001\u6a19\u6e96\u504f\u5dee\u306e\u6700\u5c0f\u5024\u30921\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\uff08\u30ab\u30a6\u30f3\u30c8\u30c7\u30fc\u30bf\u306a\u3089\u8a31\u5bb9\u3055\u308c\u308b\u304b\u306a\u3001\u304f\u3089\u3044\u306a\u611f\u3058\u3067\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\uff09\n\u307e\u305f\u3001\u7570\u5e38\u904e\u304e\u308b\u5024\u304c\u5165\u529b\u3055\u308c\u305f\u5834\u5408\u306b\u3001\u78ba\u7387\u304c\u30bc\u30ed\u3068\u307f\u306a\u3055\u308c\uff08\u30bc\u30ed\u5024\u304c\u8fd4\u3063\u3066\u304f\u308b\uff09\u3001log\u306e\u6f14\u7b97\u304c\u51fa\u6765\u306a\u304f\u306a\u308b\u305f\u3081\u3001float\u306e\u6700\u5c0f\u30aa\u30fc\u30c0\u30fc\u306b\u7f6e\u304d\u63db\u3048\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e\u8fba\u308a\u306f\u88fe\u306e\u539a\u3044\u5206\u5e03\u3092\u4f7f\u7528\u3059\u308c\u3070\u89e3\u6c7a\u51fa\u6765\u308b\u53ef\u80fd\u6027\u3082\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u5b9f\u9a13\u7d50\u679c\n\u4e0a\u306e\u30b3\u30fc\u30c9\u3067\u5b9f\u884c\u3057\u305f\u7d50\u679c\u3092\u4ee5\u4e0b\u306b\u8cbc\u308a\u4ed8\u3051\u307e\u3059\u3002\n\n## \u5143\u30c7\u30fc\u30bf\n![data.png](https://qiita-image-store.s3.amazonaws.com/0/12767/89aad927-ccd2-ad81-4bda-d92423def9fb.png)\n\n## \u5909\u5316\u70b9\u30b9\u30b3\u30a2\u30c7\u30fc\u30bf\n![score.png](https://qiita-image-store.s3.amazonaws.com/0/12767/528ae199-63a6-5413-b104-660416ef10bd.png)\n\n## \u30b3\u30e1\u30f3\u30c8\n\u5272\u308a\u3068\u4e0a\u624b\u304f\u30b9\u30b3\u30a2\u691c\u51fa\u51fa\u6765\u3066\u307e\u3059\u306d\u3002\u3053\u308c\u3060\u3051\u660e\u78ba\u306a\u30c7\u30fc\u30bf\u3060\u3068\u691c\u51fa\u51fa\u6765\u3066\u5f53\u305f\u308a\u524d\u3067\u3059\u304c\u3002\u3002\u3002\n\n\u30d1\u30e9\u30e1\u30bf\u306b\u3064\u3044\u3066\u306f\u3001\u307b\u3068\u3093\u3069term\uff08time window\uff09\u3057\u304b\u5909\u66f4\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002smooth\u306ewindow\u306b\u3064\u3044\u3066\u30821\u3067\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002\u3064\u307e\u308a\u4e0a\u306e\u30b3\u30fc\u30c9\u306esmooth\u90e8\u5206\u306f\u305f\u3060\u305f\u3060\u7121\u99c4\u306b\u8a08\u7b97\u3057\u3066\u3044\u308b\u3060\u3051\u3001\u3068\u3044\u3046\u4e8b\u306b\u306a\u308a\u307e\u3059\u306d...orz\n\u305d\u308c\u3068\u3001\u5206\u6563\u3082\u6c7a\u3081\u6253\u3061\u3067\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3057\u3001\u5927\u304d\u306a\u5909\u5316\u306b\u5bfe\u5fdc\u3055\u305b\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u306e\u3067\u3001\u30b9\u30b1\u30fc\u30eb\u306b\u3082\u3088\u308a\u307e\u3059\u304c10\uff5e20\u304f\u3089\u3044\u3067\u3044\u3044\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u307e\u3068\u3081\nARIMA\u30e2\u30c7\u30eb\u3088\u308a\u3082\u30ab\u30eb\u30de\u30f3\u30d5\u30a3\u30eb\u30bf\u306e\u65b9\u304c\u5229\u70b9\u304c\u591a\u3044\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u601d\u3063\u3066\u4f5c\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u7d50\u679c\u306f\u601d\u3063\u305f\u307b\u3069\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u3002\n\u6539\u5584\u51fa\u6765\u305d\u3046\u306a\u3068\u3053\u308d\u3092\u4eca\u5f8c\u3082\u63a2\u3057\u3066\u3044\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u304a\u624b\u6570\u3067\u3059\u304c\u9593\u9055\u3044\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u307e\u3059\u3068\u52a9\u304b\u308a\u307e\u3059\u3002", "tags": ["Python2.7", "\u6642\u7cfb\u5217\u89e3\u6790", "\u6a5f\u68b0\u5b66\u7fd2"]}