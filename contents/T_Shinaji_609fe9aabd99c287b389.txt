{"tags": ["numpy", "SOM", "Python", "\u6a5f\u68b0\u5b66\u7fd2"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002Python\u3067\u81ea\u5df1\u7d44\u7e54\u5316\u30de\u30c3\u30d7(SOM)\u3092\u4f7f\u304a\u3046\u3068\u3057\u305f\u3089\uff0c\nnumpy\u3067\u4f5c\u308a\u3053\u307e\u308c\u305f\u9ad8\u901f\u306a\u5b9f\u88c5\u304c\u898b\u5f53\u305f\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u4f5c\u308a\u307e\u3057\u305f\uff0e\n\u3042\u308b\u7a0b\u5ea6\u307e\u3067numpy\u3067\u4f5c\u3089\u308c\u305f\u5b9f\u88c5(1,2)\u304c\u3042\u3063\u305f\u306e\u3067\uff0c\n\u3053\u308c\u3092\u57fa\u306bnumpy\u3067\u4ed5\u4e0a\u3052\u3066\u307e\u3059\uff0e\nipython notebook\u3067\u5b9f\u884c\u4f8b\u3092\u516c\u958b\uff0e\n\u3053\u306e\u3088\u3046\u306aMAP\u3067\u304d\u307e\u3059\n\n\n\u30b3\u30fc\u30c9\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nclass SOM():\n\n    def __init__(self, teachers, N, seed=None):\n        self.teachers = np.array(teachers)\n        self.n_teacher = self.teachers.shape[0]\n        self.N = N\n        if not seed is None:\n            np.random.seed(seed)\n\n        x, y = np.meshgrid(range(self.N), range(self.N))\n        self.c = np.hstack((x.flatten()[:, np.newaxis],\n                            y.flatten()[:, np.newaxis]))\n        self.nodes = np.random.rand(self.N*self.N,\n                                    self.teachers.shape[1])\n\n    def train(self):\n        for i, teacher in enumerate(self.teachers):\n            bmu = self._best_matching_unit(teacher)\n            d = np.linalg.norm(self.c - bmu, axis=1)\n            L = self._learning_ratio(i)\n            S = self._learning_radius(i, d)\n            self.nodes += L * S[:, np.newaxis] * (teacher - self.nodes)\n        return self.nodes\n\n    def _best_matching_unit(self, teacher):\n        #compute all norms (square)\n        norms = np.linalg.norm(self.nodes - teacher, axis=1)\n        bmu = np.argmin(norms) #argment with minimum element \n        return np.unravel_index(bmu,(self.N, self.N))\n\n    def _neighbourhood(self, t):#neighbourhood radious\n        halflife = float(self.n_teacher/4) #for testing\n        initial  = float(self.N/2)\n        return initial*np.exp(-t/halflife)\n\n    def _learning_ratio(self, t):\n        halflife = float(self.n_teacher/4) #for testing\n        initial  = 0.1\n        return initial*np.exp(-t/halflife)\n\n    def _learning_radius(self, t, d):\n        # d is distance from BMU\n        s = self._neighbourhood(t)\n        return np.exp(-d**2/(2*s**2))\n\n\nN = 20        \nteachers = np.random.rand(10000, 3)\nsom = SOM(teachers, N=N, seed=10)\n\n# Initial map\nplt.imshow(som.nodes.reshape((N, N, 3)),\n           interpolation='none')\nplt.show()\n\n# Train\nsom.train()\n\n# Trained MAP\nplt.imshow(som.nodes.reshape((N, N, 3)),\n           interpolation='none')\nplt.show()      \n\n\n\u53c2\u8003\u6587\u732e\n\nKohonen\u306e\u81ea\u5df1\u7d44\u7e54\u5316\u30de\u30c3\u30d7\u3092python\u3067\u5b9f\u88c5\n\n\nPython\u3067\u81ea\u5df1\u7d44\u7e54\u5316\u30de\u30c3\u30d7(SOM)\u3092\u4f7f\u304a\u3046\u3068\u3057\u305f\u3089\uff0c\nnumpy\u3067\u4f5c\u308a\u3053\u307e\u308c\u305f\u9ad8\u901f\u306a\u5b9f\u88c5\u304c\u898b\u5f53\u305f\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u4f5c\u308a\u307e\u3057\u305f\uff0e\n\n\u3042\u308b\u7a0b\u5ea6\u307e\u3067numpy\u3067\u4f5c\u3089\u308c\u305f\u5b9f\u88c5([1],[2])\u304c\u3042\u3063\u305f\u306e\u3067\uff0c\n\u3053\u308c\u3092\u57fa\u306bnumpy\u3067\u4ed5\u4e0a\u3052\u3066\u307e\u3059\uff0e\n\n[ipython notebook](http://nbviewer.jupyter.org/urls/bitbucket.org/Shinaji/public_ipython/raw/6cae2a01652ba73964a847291d5654d80df86d2e/Self%20Organizing%20Map.ipynb)\u3067\u5b9f\u884c\u4f8b\u3092\u516c\u958b\uff0e\n\n\u3053\u306e\u3088\u3046\u306aMAP\u3067\u304d\u307e\u3059\n![Screen Shot 2016-01-20 at 8.29.10 PM.png](https://qiita-image-store.s3.amazonaws.com/0/65106/69bbfea0-9c9e-13c9-8621-1d2ad0a1a75b.png \"Screen Shot 2016-01-20 at 8.29.10 PM.png\")\n\n\u30b3\u30fc\u30c9\n-------\n```py:\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nclass SOM():\n    \n    def __init__(self, teachers, N, seed=None):\n        self.teachers = np.array(teachers)\n        self.n_teacher = self.teachers.shape[0]\n        self.N = N\n        if not seed is None:\n            np.random.seed(seed)\n            \n        x, y = np.meshgrid(range(self.N), range(self.N))\n        self.c = np.hstack((x.flatten()[:, np.newaxis],\n                            y.flatten()[:, np.newaxis]))\n        self.nodes = np.random.rand(self.N*self.N,\n                                    self.teachers.shape[1])\n    \n    def train(self):\n        for i, teacher in enumerate(self.teachers):\n            bmu = self._best_matching_unit(teacher)\n            d = np.linalg.norm(self.c - bmu, axis=1)\n            L = self._learning_ratio(i)\n            S = self._learning_radius(i, d)\n            self.nodes += L * S[:, np.newaxis] * (teacher - self.nodes)\n        return self.nodes\n\n    def _best_matching_unit(self, teacher):\n        #compute all norms (square)\n        norms = np.linalg.norm(self.nodes - teacher, axis=1)\n        bmu = np.argmin(norms) #argment with minimum element \n        return np.unravel_index(bmu,(self.N, self.N))\n\n    def _neighbourhood(self, t):#neighbourhood radious\n        halflife = float(self.n_teacher/4) #for testing\n        initial  = float(self.N/2)\n        return initial*np.exp(-t/halflife)\n\n    def _learning_ratio(self, t):\n        halflife = float(self.n_teacher/4) #for testing\n        initial  = 0.1\n        return initial*np.exp(-t/halflife)\n\n    def _learning_radius(self, t, d):\n        # d is distance from BMU\n        s = self._neighbourhood(t)\n        return np.exp(-d**2/(2*s**2))\n        \n        \nN = 20        \nteachers = np.random.rand(10000, 3)\nsom = SOM(teachers, N=N, seed=10)\n\n# Initial map\nplt.imshow(som.nodes.reshape((N, N, 3)),\n           interpolation='none')\nplt.show()\n\n# Train\nsom.train()\n\n# Trained MAP\nplt.imshow(som.nodes.reshape((N, N, 3)),\n           interpolation='none')\nplt.show()      \n```\n\n\n\u53c2\u8003\u6587\u732e\n---------\n * [Kohonen\u306e\u81ea\u5df1\u7d44\u7e54\u5316\u30de\u30c3\u30d7\u3092python\u3067\u5b9f\u88c5](http://technocrat.hatenablog.com/entry/2015/02/12/014557)\n\n[1]: http://technocrat.hatenablog.com/entry/2015/02/12/014557\n\n[2]: https://github.com/latboy/som-in-python\n"}