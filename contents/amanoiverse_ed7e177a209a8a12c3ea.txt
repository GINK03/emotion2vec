{"context": "\n\njava8 + spring-boot \u3067 facebook messenger bot \u3092\u66f8\u304d\u307e\u3057\u305f\nhttp://qiita.com/amanoiverse/items/742a963be069e1902269 \u306e fb messenger \u7248\n\ncallback \u306f https://...:443/fbmessengerbot \u306b\n\u5fc5\u8981\u60c5\u5831\u306f\u74b0\u5883\u5909\u6570\u3067\njackson, httpclient, lombok \u4f7f\u7528\ntry catch \u306f\u30ce\u30fc\u30dd\u30ea\u30b7\u30fc + \u904e\u5270\u306a\u4f8b\u5916\u56de\u907f\n\n\ncontroller\n@RestController\n@val\npublic class FBMessengerBotController {\n    @Autowired\n    FBMessengerBotService botService;\n\n    @RequestMapping(value = \"/fbmessengerbot\", method = RequestMethod.GET)\n    String verify(HttpServletRequest request) throws RuntimeException {\n        return botService.verify(request);\n    }\n    @RequestMapping(value = \"/fbmessengerbot\", method = RequestMethod.POST)\n    String message(HttpServletRequest request) throws RuntimeException {\n        return botService.sentToMessenger(request);\n    }\n}\n\n\nmodel\n@Data\npublic class FBMessengerBotWebhook {\n    String object;\n    List<FBMessengerBotWebhookEntry> entry;\n}\n@Data\npublic class FBMessengerBotWebhookEntry {\n    BigDecimal id;\n    BigDecimal time;\n    List<FBMessengerBotWebhookEntryMessaging> messaging;\n}\n@Data\npublic class FBMessengerBotWebhookEntryMessaging {\n    Map<String, BigDecimal> sender;\n    Map<String, BigDecimal> recipient;\n    BigDecimal timestamp;\n    FBMessengerBotWebhookEntryMessagingMessage message;\n}\n@Data\npublic class FBMessengerBotWebhookEntryMessagingMessage {\n    String mid;\n    BigDecimal seq;\n    String text;\n}\n\n@Data\npublic class FBMessengerBotWebhookRecipient {\n    Map<String, BigDecimal> recipient;\n    Map<String, String> message;\n\n}\n\n\nservice\n@val\n@Slf4j\n@Service\npublic class FBMessengerBotService {\n    final String FBMESSENGERBOT_VERIFY_TOKEN = System.getenv(\"FBMESSENGERBOT_VERIFY_TOKEN\");\n    final String FBMESSENGERBOT_ACCESS_TOKEN = System.getenv(\"FBMESSENGERBOT_ACCESS_TOKEN\");\n    final String FBMESSENGERBOT_ENDPOINT = \"https://graph.facebook.com/v2.6/me/messages\";\n\n    public String verify(HttpServletRequest request) {\n        try {\n            val paramMap = request.getParameterMap();\n\n            // debug\n            val mapStream = paramMap.entrySet().stream();\n            mapStream.forEach(e -> log.info(String.format(\"%s:%s\", e.getKey(), String.join(\"\", e.getValue()))));\n\n            if (paramMap.get(\"hub.mode\")[0].equals(\"subscribe\")\n                    && paramMap.get(\"hub.verify_token\")[0].equals(FBMESSENGERBOT_VERIFY_TOKEN)) {\n                return String.join(\"\", paramMap.get(\"hub.challenge\"));\n            }\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n        return \"failed\";\n    }\n\n    public String sentToMessenger(HttpServletRequest request) {\n        try {\n            val jb = new StringBuffer();\n            request.getReader().lines().forEach(jb::append);\n            log.info(jb.toString());\n\n            val mapper = new ObjectMapper();\n            val botResponse = mapper.readValue(jb.toString(), FBMessengerBotWebhook.class);\n            log.error(\"!!!\" + ToStringBuilder.reflectionToString(botResponse));\n            botResponse.getEntry().forEach(e -> e.getMessaging().stream().forEach(this::sendMessage));\n        } catch (UnrecognizedPropertyException ex) {\n            ;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return \"ok\";\n    }\n\n    void sendMessage(FBMessengerBotWebhookEntryMessaging messaging) {\n        try {\n            val message = messaging.getMessage();\n            val text = message.getText();\n            log.info(text);\n            Stream<String> stream = Arrays.stream(text.split(\"\"));\n            val builder = new URIBuilder(FBMESSENGERBOT_ENDPOINT);\n            builder.setParameter(\"access_token\", FBMESSENGERBOT_ACCESS_TOKEN);\n            val recipient = new FBMessengerBotWebhookRecipient();\n            recipient.setRecipient(messaging.getSender());\n            val post = new HttpPost(builder.build());\n            post.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n            try (val httpclient = HttpClients.createDefault()) {\n                stream.forEach(e -> sendOneRequest(httpclient, post, recipient, e));\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (URISyntaxException e) {\n            e.printStackTrace();\n        }\n    }\n\n    void sendOneRequest(CloseableHttpClient client, HttpPost post, FBMessengerBotWebhookRecipient recipient,\n            String oneString) {\n        try {\n            Map<String, String> message = new HashMap<>();\n            message.put(\"text\", oneString);\n            recipient.setMessage(message);\n\n            val mapper = new ObjectMapper();\n            val json = mapper.writeValueAsString(recipient);\n            log.info(json);\n\n            post.setEntity(new StringEntity(json, StandardCharsets.UTF_8));\n            val res = client.execute(post);\n\n            Arrays.stream(res.getAllHeaders()).forEach(e -> log.info(e.toString()));\n            try (val br = new BufferedReader(\n                    new InputStreamReader(res.getEntity().getContent(), StandardCharsets.UTF_8))) {\n                br.lines().forEach(e -> log.info(e.toString()));\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            log.info(\"JSON:\" + json);\n            log.info(\"STATUSLINE:\" + res.getStatusLine().toString());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n\nbuild.gradle\ndependencies {\n    compileOnly('org.projectlombok:lombok')\n    compile('org.springframework.boot:spring-boot-starter-web')\n    compile('com.fasterxml.jackson.core:jackson-databind:2.7.0')\n    compile('com.fasterxml.jackson.core:jackson-annotations:2.7.0')\n    compile('com.fasterxml.jackson.core:jackson-core:2.7.0')\n    compile('org.apache.httpcomponents:httpasyncclient:4.1.1')\n    compile('org.apache.httpcomponents:httpcore-nio:4.4.4')\n}\n\ntask wrapper(type: Wrapper) {\n    gradleVersion = '2.12'\n}\n\n\n\u306a\u3093\u304b\u3001bot\u81ea\u8eab\u306e\u767a\u8a00\u3067\u3082 callback \u304c\u6765\u308b\u306e\u3067\u3001 json \u30d1\u30fc\u30b9\u30a8\u30e9\u30fc\u3092 catch \u3057\u3066\u63e1\u308a\u3064\u3076\u3059\u3002\nOrganize Import \u3059\u308b\u3068\u3001Unexpected error in organize imports. See log for details AST must not be null \u3063\u3066\u3044\u308f\u308c\u308b(\u3053\u3053\u304c\u4e00\u756a\u306f\u307e\u3063\u305f)\u3002\u56de\u907f\u3059\u308b\u306b\u306f val \u3092\u5168\u90e8\u3042\u304d\u3089\u3081\u308b\u3002Organize Import \u306a\u3044\u3068\u751f\u304d\u3066\u3044\u3051\u306a\u3044\u3002\n\n\nlombok version \u306f 1.6.8 \u304b\u306a\u3002\u3002\u3002\u3002\u904e\u53bb\u306e changelog \u3067 AST... \u306b\u3064\u3044\u3066\u306e\u4fee\u6b63\u7684\u306a\u306e\u304c\u66f8\u3044\u3066\u3042\u308b\u304c\u3001\u6700\u65b0\u3067\u3082\u3060\u3081\u3060\u3063\u305f\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u4eca\u5f8c\u306f val \u5168\u9762\u7684\u306b\u3084\u3081\u3088\u3046\u3068\u601d\u3046\u3002\n\n\n\n# java8 + spring-boot \u3067 facebook messenger bot \u3092\u66f8\u304d\u307e\u3057\u305f\n\nhttp://qiita.com/amanoiverse/items/742a963be069e1902269 \u306e fb messenger \u7248\n\n- callback \u306f https://...:443/fbmessengerbot \u306b\n- \u5fc5\u8981\u60c5\u5831\u306f\u74b0\u5883\u5909\u6570\u3067\n- jackson, httpclient, lombok \u4f7f\u7528\n- try catch \u306f\u30ce\u30fc\u30dd\u30ea\u30b7\u30fc + \u904e\u5270\u306a\u4f8b\u5916\u56de\u907f\n\n## controller\n\n```java\n@RestController\n@val\npublic class FBMessengerBotController {\n\t@Autowired\n\tFBMessengerBotService botService;\n\n\t@RequestMapping(value = \"/fbmessengerbot\", method = RequestMethod.GET)\n\tString verify(HttpServletRequest request) throws RuntimeException {\n\t\treturn botService.verify(request);\n\t}\n\t@RequestMapping(value = \"/fbmessengerbot\", method = RequestMethod.POST)\n\tString message(HttpServletRequest request) throws RuntimeException {\n\t\treturn botService.sentToMessenger(request);\n\t}\n}\n```\n\n## model\n\n```java\n@Data\npublic class FBMessengerBotWebhook {\n\tString object;\n\tList<FBMessengerBotWebhookEntry> entry;\n}\n@Data\npublic class FBMessengerBotWebhookEntry {\n\tBigDecimal id;\n\tBigDecimal time;\n\tList<FBMessengerBotWebhookEntryMessaging> messaging;\n}\n@Data\npublic class FBMessengerBotWebhookEntryMessaging {\n\tMap<String, BigDecimal> sender;\n\tMap<String, BigDecimal> recipient;\n\tBigDecimal timestamp;\n\tFBMessengerBotWebhookEntryMessagingMessage message;\n}\n@Data\npublic class FBMessengerBotWebhookEntryMessagingMessage {\n\tString mid;\n\tBigDecimal seq;\n\tString text;\n}\n\n@Data\npublic class FBMessengerBotWebhookRecipient {\n\tMap<String, BigDecimal> recipient;\n\tMap<String, String> message;\n\n}\n```\n\n## service\n\n```java\n@val\n@Slf4j\n@Service\npublic class FBMessengerBotService {\n\tfinal String FBMESSENGERBOT_VERIFY_TOKEN = System.getenv(\"FBMESSENGERBOT_VERIFY_TOKEN\");\n\tfinal String FBMESSENGERBOT_ACCESS_TOKEN = System.getenv(\"FBMESSENGERBOT_ACCESS_TOKEN\");\n\tfinal String FBMESSENGERBOT_ENDPOINT = \"https://graph.facebook.com/v2.6/me/messages\";\n\n\tpublic String verify(HttpServletRequest request) {\n\t\ttry {\n\t\t\tval paramMap = request.getParameterMap();\n\n\t\t\t// debug\n\t\t\tval mapStream = paramMap.entrySet().stream();\n\t\t\tmapStream.forEach(e -> log.info(String.format(\"%s:%s\", e.getKey(), String.join(\"\", e.getValue()))));\n\n\t\t\tif (paramMap.get(\"hub.mode\")[0].equals(\"subscribe\")\n\t\t\t\t\t&& paramMap.get(\"hub.verify_token\")[0].equals(FBMESSENGERBOT_VERIFY_TOKEN)) {\n\t\t\t\treturn String.join(\"\", paramMap.get(\"hub.challenge\"));\n\t\t\t}\n\t\t} catch (Exception ex) {\n\t\t\tex.printStackTrace();\n\t\t}\n\t\treturn \"failed\";\n\t}\n\n\tpublic String sentToMessenger(HttpServletRequest request) {\n\t\ttry {\n\t\t\tval jb = new StringBuffer();\n\t\t\trequest.getReader().lines().forEach(jb::append);\n\t\t\tlog.info(jb.toString());\n\n\t\t\tval mapper = new ObjectMapper();\n\t\t\tval botResponse = mapper.readValue(jb.toString(), FBMessengerBotWebhook.class);\n\t\t\tlog.error(\"!!!\" + ToStringBuilder.reflectionToString(botResponse));\n\t\t\tbotResponse.getEntry().forEach(e -> e.getMessaging().stream().forEach(this::sendMessage));\n\t\t} catch (UnrecognizedPropertyException ex) {\n\t\t\t;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn \"ok\";\n\t}\n\n\tvoid sendMessage(FBMessengerBotWebhookEntryMessaging messaging) {\n\t\ttry {\n\t\t\tval message = messaging.getMessage();\n\t\t\tval text = message.getText();\n\t\t\tlog.info(text);\n\t\t\tStream<String> stream = Arrays.stream(text.split(\"\"));\n\t\t\tval builder = new URIBuilder(FBMESSENGERBOT_ENDPOINT);\n\t\t\tbuilder.setParameter(\"access_token\", FBMESSENGERBOT_ACCESS_TOKEN);\n\t\t\tval recipient = new FBMessengerBotWebhookRecipient();\n\t\t\trecipient.setRecipient(messaging.getSender());\n\t\t\tval post = new HttpPost(builder.build());\n\t\t\tpost.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n\t\t\ttry (val httpclient = HttpClients.createDefault()) {\n\t\t\t\tstream.forEach(e -> sendOneRequest(httpclient, post, recipient, e));\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (URISyntaxException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tvoid sendOneRequest(CloseableHttpClient client, HttpPost post, FBMessengerBotWebhookRecipient recipient,\n\t\t\tString oneString) {\n\t\ttry {\n\t\t\tMap<String, String> message = new HashMap<>();\n\t\t\tmessage.put(\"text\", oneString);\n\t\t\trecipient.setMessage(message);\n\n\t\t\tval mapper = new ObjectMapper();\n\t\t\tval json = mapper.writeValueAsString(recipient);\n\t\t\tlog.info(json);\n\n\t\t\tpost.setEntity(new StringEntity(json, StandardCharsets.UTF_8));\n\t\t\tval res = client.execute(post);\n\n\t\t\tArrays.stream(res.getAllHeaders()).forEach(e -> log.info(e.toString()));\n\t\t\ttry (val br = new BufferedReader(\n\t\t\t\t\tnew InputStreamReader(res.getEntity().getContent(), StandardCharsets.UTF_8))) {\n\t\t\t\tbr.lines().forEach(e -> log.info(e.toString()));\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tlog.info(\"JSON:\" + json);\n\t\t\tlog.info(\"STATUSLINE:\" + res.getStatusLine().toString());\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n```\n\n\n## build.gradle\n\n```groovy\ndependencies {\n\tcompileOnly('org.projectlombok:lombok')\n\tcompile('org.springframework.boot:spring-boot-starter-web')\n\tcompile('com.fasterxml.jackson.core:jackson-databind:2.7.0')\n\tcompile('com.fasterxml.jackson.core:jackson-annotations:2.7.0')\n\tcompile('com.fasterxml.jackson.core:jackson-core:2.7.0')\n\tcompile('org.apache.httpcomponents:httpasyncclient:4.1.1')\n\tcompile('org.apache.httpcomponents:httpcore-nio:4.4.4')\n}\n\ntask wrapper(type: Wrapper) {\n\tgradleVersion = '2.12'\n}\n```\n\n\n- \u306a\u3093\u304b\u3001bot\u81ea\u8eab\u306e\u767a\u8a00\u3067\u3082 callback \u304c\u6765\u308b\u306e\u3067\u3001 json \u30d1\u30fc\u30b9\u30a8\u30e9\u30fc\u3092 catch \u3057\u3066\u63e1\u308a\u3064\u3076\u3059\u3002\n- Organize Import \u3059\u308b\u3068\u3001`Unexpected error in organize imports. See log for details AST must not be null` \u3063\u3066\u3044\u308f\u308c\u308b(\u3053\u3053\u304c\u4e00\u756a\u306f\u307e\u3063\u305f)\u3002**\u56de\u907f\u3059\u308b\u306b\u306f val \u3092\u5168\u90e8\u3042\u304d\u3089\u3081\u308b\u3002**Organize Import \u306a\u3044\u3068\u751f\u304d\u3066\u3044\u3051\u306a\u3044\u3002\n    - lombok version \u306f 1.6.8 \u304b\u306a\u3002\u3002\u3002\u3002\u904e\u53bb\u306e changelog \u3067 AST... \u306b\u3064\u3044\u3066\u306e\u4fee\u6b63\u7684\u306a\u306e\u304c\u66f8\u3044\u3066\u3042\u308b\u304c\u3001\u6700\u65b0\u3067\u3082\u3060\u3081\u3060\u3063\u305f\u3002\n    - \u3068\u3044\u3046\u3053\u3068\u3067\u3001\u4eca\u5f8c\u306f val \u5168\u9762\u7684\u306b\u3084\u3081\u3088\u3046\u3068\u601d\u3046\u3002\n\n", "tags": ["java8", "spring-boot", "Facebook", "bot", "Java"]}