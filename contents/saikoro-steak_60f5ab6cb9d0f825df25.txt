{"context": " More than 1 year has passed since last update.\n\n\u524d\u56de\n\u74b0\u5883\u69cb\u7bc9\u304b\u3089start_kernel()\u3092\u8868\u793a\n\n\u4eca\u56de\n\u3084\u306f\u308astart_kernel()\u3088\u308a\u4ee5\u524d\u306e\u51e6\u7406\u3082\u81ea\u5206\u304c\u6c17\u306b\u306a\u308b\u7b87\u6240\u3060\u3051\u3092\u30d4\u30c3\u30af\u30a2\u30c3\u30d7\u3057\u3066\u307f\u305f\uff01\n\n0x07cc\u306f\u4ffa\u306e\u5ac1\u301cstart_kernel()\u307e\u3067\u301c\n\u3056\u3063\u304f\u308a\n1. \u96fb\u6e90ON\n2. BIOS\u8d77\u52d5(0x07c00\u306bMBR\u3092\u30ed\u30fc\u30c9) 16bit\u306e\u30ea\u30a2\u30eb\u30e2\u30fc\u30c9\n3. MBR\u304b\u3089\u30d6\u30fc\u30c8\u30ed\u30fc\u30c0\u30fc\u8d77\u52d5 \n4. \u30ea\u30a2\u30eb\u30e2\u30fc\u30c9\u304b\u308932bit\u30d7\u30ed\u30c6\u30af\u30c8\u30e2\u30fc\u30c9\u3078\n5. 0x1000000\u306b\u5727\u7e2e\u3055\u308c\u305f\u307e\u307e\u306e\u30ab\u30fc\u30cd\u30eb(vmlinuz)\u3092\u30ed\u30fc\u30c9&\u89e3\u51cd(\u89e3\u51cd\u5148\u30820x1000000)\n6. 64bit\u30e2\u30fc\u30c9\u79fb\u884c\n7. jmp *%rbp(\u30ab\u30fc\u30cd\u30eb\u306e\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u306b\u30b8\u30e3\u30f3\u30d70x1000000)\n\u305d\u306e\u4ed6\uff1a0x1000000\u306f\u30ab\u30fc\u30cd\u30eb\u30d8\u30c3\u30c0\u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u3002\n\u4e0b\u306fvmlinuz\u3092\u30d8\u30ad\u30b5\u30c0\u30f3\u30d7\u3057\u305f\u7d50\u679c\u30020x258\u304b\u3089\u304c\u30ab\u30fc\u30cd\u30eb\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u306e0x1000000\u306b\u306a\u3063\u3066\u308b\u3002\u30d6\u30fc\u30c8\u30ed\u30fc\u30c0\u30fc\u306f\u3053\u3053\u304b\u3089\u5024\u3092\u3068\u3063\u3066\u304d\u3066\u308b\u3002\n\n8.0x1000000\u306b\u3042\u308b\u306e\u306fstart_64\u3002\u3053\u3053\u3067GDT\u3084\u3089\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u3084\u3089\u30ec\u30b8\u30b9\u30bf\u306e\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u3002\u3053\u3053\u3067\u306f\u30b9\u30bf\u30c3\u30af\u306e\u8a2d\u5b9a\u306b\u6ce8\u76ee\u3057\u3066\u307f\u305f\u3002\n\u305d\u306e\u4ed6\uff1a\u3053\u3053\u3067\u4eee\u60f3\u30e1\u30e2\u30ea\u3068\u7269\u7406\u30e1\u30e2\u30ea\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u3059\u308b\u300264bitCPU\u306f\u30a2\u30c9\u30ec\u30b9\u30d0\u30b9\u3068\u304b\u304c64\u30d3\u30c3\u30c8\u3042\u308b\u306e\u3067\u30e1\u30e2\u30ea\u3092\u3081\u3061\u3083\u304f\u3061\u3083\u591a\u304f\u4f7f\u3048\u308b\u3002\u30e6\u30fc\u30b6\u30fc\u30d7\u30ed\u30bb\u30b9\u9818\u57df\u306a\u3093\u304b\u306f128TB\uff01\uff01\u4eee\u60f3\u306a\u306e\u3067\u3059\u304c\u3002\n9.\u30b9\u30bf\u30c3\u30af\u306e\u8a2d\u5b9a\narch/x86/kernel/head_64.S\n200         /* Setup a boot time stack */\n201         movq stack_start(%rip),%rsp\n\n266         ENTRY(stack_start)\n267         .quad  init_thread_union+THREAD_SIZE-8\n268         .word  0\n269         __FINITDATA\n\nhttp://lxr.free-electrons.com/source/arch/x86/include/asm/thread_info.h#L67\n\n67 #define INIT_THREAD_INFO(tsk)                   \\\n  68 {                                               \\\n 69         .task           = &tsk,                 \\\n 70         .flags          = 0,                    \\\n 71         .cpu            = 0,                    \\\n 72         .saved_preempt_count = INIT_PREEMPT_COUNT,      \\\n 73         .addr_limit     = KERNEL_DS,            \\\n 74 }\n\n\u305d\u306e\u4ed6\uff1aENTRY()\u306f\u30de\u30af\u30ed\u3002\u2193\u307f\u305f\u3044\u306a\u611f\u3058\u306b\u306a\u308b\u3002\u5916\u90e8\u304b\u3089name\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3002\n#define ENTRY(name)\n.global name;\nALIGN;\nname:\n\n\n201\u884c\u306e\u7b87\u6240\u3067266\u884c\u304b\u3089\u306e\u9818\u57df\u3092\u30b9\u30bf\u30c3\u30af\u30dd\u30a4\u30f3\u30bf\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u304c\u6700\u521d\u306b\u4f7f\u3046\u30ab\u30fc\u30cd\u30eb\u30b9\u30bf\u30c3\u30af\u306e\u5b9f\u4f53\u3002\u6700\u521d\u306e\u30d7\u30ed\u30bb\u30b9\u306e\u30b9\u30bf\u30c3\u30af\u306f\u76f4\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u3002init\u30d7\u30ed\u30bb\u30b9\u7528\u307f\u305f\u3044\u3002\u3002\n\u30ac\u3001\u30b7\u30ab\u30b7\uff01\u3053\u308c\u306f\u4eca\u306e\u51e6\u7406(swapper)\u304c\u4f7f\u3046\u30b9\u30bf\u30c3\u30af\u3060\u3063\u305f\u3088\u3046\u306a\u30fc\uff1f\uff1f\u5f8c\u3067\u5168\u4f53\u898b\u3066\u78ba\u8a8d\u3057\u3088\u3046\u3002\u3002 \n#define INIT_THREAD_INFO(tsk)\u306f\u5f8c\u3067\u8abf\u3079\u3088\u3046\u3002\u3002movq stack_start(%rip),%rsp\u3067\u30b9\u30bf\u30c3\u30af\u30dd\u30a4\u30f3\u30bf\u306e\u8a2d\u5b9a\u3092\u3057\u3066\u3044\u308b\u306e\u3067\u3053\u308c\u304c\u30b9\u30bf\u30c3\u30af\u9818\u57df\u3067\u3042\u308b\u3053\u3068\u306f\u9593\u9055\u3044\u306a\u3044\uff01\uff01\n\n10.start_kernel()\u547c\u51fa\n252         movq    initial_code(%rip),%rax\n253         pushq   $0              # fake return address to stop unwinder\n254         pushq   $__KERNEL_CS    # set correct cs\n255         pushq   %rax            # target address in negative space\n256         lretq\n\n261         ENTRY(initial_code)\n262         .quad   x86_64_start_kernel\n\n\n\u304a\u308f\u308a\n\u3068\u308a\u3042\u3048\u305a\u30a2\u30bb\u30f3\u30d6\u30e9\u306e\u7b87\u6240\u306fvi\u3067ctags\u4f7f\u3063\u305f\u65b9\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u304b\u3082\u3002\n### \u524d\u56de\n[\u74b0\u5883\u69cb\u7bc9\u304b\u3089start_kernel()\u3092\u8868\u793a](http://qiita.com/saikoro-steak/items/6ab4d80f8f6b213eaf3f)\n\n### \u4eca\u56de\n\u3084\u306f\u308astart_kernel()\u3088\u308a\u4ee5\u524d\u306e\u51e6\u7406\u3082\u81ea\u5206\u304c\u6c17\u306b\u306a\u308b\u7b87\u6240\u3060\u3051\u3092\u30d4\u30c3\u30af\u30a2\u30c3\u30d7\u3057\u3066\u307f\u305f\uff01\n\n### 0x07cc\u306f\u4ffa\u306e\u5ac1\u301cstart_kernel()\u307e\u3067\u301c\n\u3056\u3063\u304f\u308a\n1. \u96fb\u6e90ON\n2. BIOS\u8d77\u52d5(0x07c00\u306bMBR\u3092\u30ed\u30fc\u30c9) 16bit\u306e\u30ea\u30a2\u30eb\u30e2\u30fc\u30c9\n3. MBR\u304b\u3089\u30d6\u30fc\u30c8\u30ed\u30fc\u30c0\u30fc\u8d77\u52d5 \n4. \u30ea\u30a2\u30eb\u30e2\u30fc\u30c9\u304b\u308932bit\u30d7\u30ed\u30c6\u30af\u30c8\u30e2\u30fc\u30c9\u3078\n5. 0x1000000\u306b\u5727\u7e2e\u3055\u308c\u305f\u307e\u307e\u306e\u30ab\u30fc\u30cd\u30eb(vmlinuz)\u3092\u30ed\u30fc\u30c9&\u89e3\u51cd(\u89e3\u51cd\u5148\u30820x1000000)\n6. 64bit\u30e2\u30fc\u30c9\u79fb\u884c\n7. jmp *%rbp(\u30ab\u30fc\u30cd\u30eb\u306e\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u306b\u30b8\u30e3\u30f3\u30d70x1000000)\n\n\u305d\u306e\u4ed6\uff1a0x1000000\u306f\u30ab\u30fc\u30cd\u30eb\u30d8\u30c3\u30c0\u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u3002\n\u4e0b\u306fvmlinuz\u3092\u30d8\u30ad\u30b5\u30c0\u30f3\u30d7\u3057\u305f\u7d50\u679c\u30020x258\u304b\u3089\u304c\u30ab\u30fc\u30cd\u30eb\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u306e0x1000000\u306b\u306a\u3063\u3066\u308b\u3002\u30d6\u30fc\u30c8\u30ed\u30fc\u30c0\u30fc\u306f\u3053\u3053\u304b\u3089\u5024\u3092\u3068\u3063\u3066\u304d\u3066\u308b\u3002\n![\u30ab\u30fc\u30cd\u30eb\u30d8\u30c3\u30c0\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8.png](https://qiita-image-store.s3.amazonaws.com/0/91729/f0380d0f-ca03-1b66-910b-a8526543d643.png)\n\n8.0x1000000\u306b\u3042\u308b\u306e\u306fstart_64\u3002\u3053\u3053\u3067GDT\u3084\u3089\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u3084\u3089\u30ec\u30b8\u30b9\u30bf\u306e\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u3002\u3053\u3053\u3067\u306f\u30b9\u30bf\u30c3\u30af\u306e\u8a2d\u5b9a\u306b\u6ce8\u76ee\u3057\u3066\u307f\u305f\u3002\n\n\u305d\u306e\u4ed6\uff1a\u3053\u3053\u3067\u4eee\u60f3\u30e1\u30e2\u30ea\u3068\u7269\u7406\u30e1\u30e2\u30ea\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u3059\u308b\u300264bitCPU\u306f\u30a2\u30c9\u30ec\u30b9\u30d0\u30b9\u3068\u304b\u304c64\u30d3\u30c3\u30c8\u3042\u308b\u306e\u3067\u30e1\u30e2\u30ea\u3092\u3081\u3061\u3083\u304f\u3061\u3083\u591a\u304f\u4f7f\u3048\u308b\u3002\u30e6\u30fc\u30b6\u30fc\u30d7\u30ed\u30bb\u30b9\u9818\u57df\u306a\u3093\u304b\u306f128TB\uff01\uff01\u4eee\u60f3\u306a\u306e\u3067\u3059\u304c\u3002\n\n9.\u30b9\u30bf\u30c3\u30af\u306e\u8a2d\u5b9a\n\narch/x86/kernel/head_64.S\n\n```asm\n200         /* Setup a boot time stack */\n201         movq stack_start(%rip),%rsp\n\n266         ENTRY(stack_start)\n267         .quad  init_thread_union+THREAD_SIZE-8\n268         .word  0\n269         __FINITDATA\n```\nhttp://lxr.free-electrons.com/source/arch/x86/include/asm/thread_info.h#L67\n > 67 #define INIT_THREAD_INFO(tsk)                   \\\n  68 {                                               \\\n 69         .task           = &tsk,                 \\\n 70         .flags          = 0,                    \\\n 71         .cpu            = 0,                    \\\n 72         .saved_preempt_count = INIT_PREEMPT_COUNT,      \\\n 73         .addr_limit     = KERNEL_DS,            \\\n 74 }\n\n\n\n\u305d\u306e\u4ed6\uff1aENTRY()\u306f\u30de\u30af\u30ed\u3002\u2193\u307f\u305f\u3044\u306a\u611f\u3058\u306b\u306a\u308b\u3002\u5916\u90e8\u304b\u3089name\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3002\n\n```\n#define ENTRY(name)\n.global name;\nALIGN;\nname:\n```\n* 201\u884c\u306e\u7b87\u6240\u3067266\u884c\u304b\u3089\u306e\u9818\u57df\u3092\u30b9\u30bf\u30c3\u30af\u30dd\u30a4\u30f3\u30bf\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u304c\u6700\u521d\u306b\u4f7f\u3046\u30ab\u30fc\u30cd\u30eb\u30b9\u30bf\u30c3\u30af\u306e\u5b9f\u4f53\u3002\u6700\u521d\u306e\u30d7\u30ed\u30bb\u30b9\u306e\u30b9\u30bf\u30c3\u30af\u306f\u76f4\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u3002init\u30d7\u30ed\u30bb\u30b9\u7528\u307f\u305f\u3044\u3002\u3002\n* \u30ac\u3001\u30b7\u30ab\u30b7\uff01\u3053\u308c\u306f\u4eca\u306e\u51e6\u7406(swapper)\u304c\u4f7f\u3046\u30b9\u30bf\u30c3\u30af\u3060\u3063\u305f\u3088\u3046\u306a\u30fc\uff1f\uff1f\u5f8c\u3067\u5168\u4f53\u898b\u3066\u78ba\u8a8d\u3057\u3088\u3046\u3002\u3002 \n* #define INIT_THREAD_INFO(tsk)\u306f\u5f8c\u3067\u8abf\u3079\u3088\u3046\u3002\u3002movq stack_start(%rip),%rsp\u3067\u30b9\u30bf\u30c3\u30af\u30dd\u30a4\u30f3\u30bf\u306e\u8a2d\u5b9a\u3092\u3057\u3066\u3044\u308b\u306e\u3067\u3053\u308c\u304c\u30b9\u30bf\u30c3\u30af\u9818\u57df\u3067\u3042\u308b\u3053\u3068\u306f\u9593\u9055\u3044\u306a\u3044\uff01\uff01\n\n10.start_kernel()\u547c\u51fa\n\n```asm\n252         movq    initial_code(%rip),%rax\n253         pushq   $0              # fake return address to stop unwinder\n254         pushq   $__KERNEL_CS    # set correct cs\n255         pushq   %rax            # target address in negative space\n256         lretq\n\n261         ENTRY(initial_code)\n262         .quad   x86_64_start_kernel\n```\n\n### \u304a\u308f\u308a\n\u3068\u308a\u3042\u3048\u305a\u30a2\u30bb\u30f3\u30d6\u30e9\u306e\u7b87\u6240\u306fvi\u3067ctags\u4f7f\u3063\u305f\u65b9\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u304b\u3082\u3002\n", "tags": ["Linux", "kernel", "CentOS"]}