{"context": "\n\n\u4ee3\u6570\u7684\u30c7\u30fc\u30bf\u578b\n\nKoka\ntype color {\n  Red\n  Green\n  Blue\n  Rgb( r : int, g : int, b: int )\n}\n\n\u307e\u305f\u306f\ntype color {\n  Red; Green; Blue; Rgb( r : int, g : int, b: int )\n}\n\n\nRust\nenum Color {\n Red,\n Green,\n Blue,\n Rgb { r: u8, g: u8, b: u8 }\n}\n\n\nHaxe\nenum Color {\n  Red;\n  Green;\n  Blue;\n  Rgb(r: Int, g: Int, b: Int);\n}\n\n\nSwift\nenum Color {\n  case Red, Green, Blue, Rgb(r: Int, g: Int, b: Int)\n}\n\n\nElm\ntype Color = Red | Green | Blue | Rgb { r: Int, g: Int, b: Int }\n\n\nHaskell\ndata Color = Red | Green | Blue | Rgb {r :: Int, g :: Int, b :: Int}\n\n\nOCaml\ntype rgb = { r: int; g: int; b: int }\ntype color = Red | Green | Blue | Rgb of rgb\n\n\nKotlin\nsealed class Color {\n    object Red: Color()\n    object Green: Color()\n    object Blue: Color()\n    class Rgb(val r: Int,val  g: Int,val  b: Int): Color()\n}\n\n\nScala\nsealed trait Color\n\nfinal case object Red extends Color\nfinal case object Green extends Color\nfinal case object Blue extends Color\nfinal case class Rgb(r: Int, g: Int, b: Int) extends Color\n\n\nRuby\nmodule Color\n  Red = 1\n  Green = 2\n  Blue = 3\n  Rgb = Struct.new(:r, :g, :b)\nend\n\n\n\u611f\u60f3\n\n\u8a18\u6cd5\n\nKoka, Rust, Haxe, Elm: \u3068\u3066\u3082\u826f\u3044\nSwift, Haskell, OCaml: \u826f\u3044\nRuby: \u666e\u901a\nKotlin: \u66f8\u304d\u306b\u304f\u3044\nScala: \u3068\u3066\u3082\u66f8\u304d\u306b\u304f\u3044\n\n\n\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\n\nKoka\nmatch(color) {\n  Red   -> \"#FF0000\"\n  Green -> \"#00FF00\"\n  Blue  -> \"#0000FF\"\n  Rgb(r,g,b) -> \"#\" + showHex(r,2) + showHex(g,2) + showHex(b,2)\n}\n\nview code\n\nRust\nmatch color {\n    Color::Red   => \"#FF0000\".to_string(),\n    Color::Green => \"#00FF00\".to_string(),\n    Color::Blue  => \"#0000FF\".to_string(),\n    Color::Rgb{r, g, b} => format!(\"#{:02X}{:02X}{:02X}\", r, g, b),\n}\n\nview code\n\nHaxe\nswitch( color ) {\n  case Red:   \"#FF0000\";\n  case Green: \"#00FF00\";\n  case Blue:  \"#0000FF\";\n  case Rgb(r, g, b): \"#\"+ StringTools.hex(r,2) + StringTools.hex(g,2) + StringTools.hex(b,2);\n}\n\n\nview code\nview code\n\n\nSwift\nswitch color {\n  case .Red:\n    return \"#FF0000\"\n  case .Green:\n    return \"#00FF00\"\n  case .Blue:\n    return \"#0000FF\"\n  case let .Rgb(r, g, b):\n    return String(format:\"#%02X%02X%02X\", r, g, b)\n}\n\nview code\n\nElm\ncase color of\n    Red   -> \"#FF0000\"\n    Green -> \"#00FF00\"\n    Blue  -> \"#0000FF\"\n    Rgb {r, g, b} -> String.concat [\"#\", (toHex r), (toHex g), (toHex b)]\n\n\nview code\nview code\n\n\nHaskell\ncase color of\n    Red   -> \"#FF0000\"\n    Green -> \"#00FF00\"\n    Blue  -> \"#0000FF\"\n    Rgb r g b -> printf \"#%02X%02X%02X\" r g b\n\nview code\n\nOCaml\nmatch color with\n      Red   -> \"#FF0000\"\n    | Green -> \"#00FF00\"\n    | Blue  -> \"#0000FF\"\n    | Rgb {r; g; b} -> Printf.sprintf \"#%02X%02X%02X\" r g b;;\n\nview code\n\nKotlin\nwhen ( color ) {\n  Color.Red   -> \"#FF0000\"\n  Color.Green -> \"#00FF00\"\n  Color.Blue  -> \"#0000FF\"\n  is Color.Rgb -> \"#%02X%02X%02X\".format(color.r, color.g, color.b)\n}\n\nview code\n\nScala\ncolor match {\n  case Red   =>\"#FF0000\"\n  case Green =>\"#00FF00\"\n  case Blue  =>\"#0000FF\"\n  case Rgb(r, g, b) => \"#%02X%02X%02X\".format(r, g, b)\n}\n\nview code\n\nRuby\ncase color\nwhen Color::Red; \"#FF000\"\nwhen Color::Green; \"#00FF00\"\nwhen Color::Blue; \"#0000FF\"\nwhen Color::Rgb; \"#%02X%02X%02X\" % [color.r, color.g, color.b]\nend\n\nview code\n\n\u611f\u60f3\n\n\u8a18\u6cd5\n\nKoka, Rust, Elm, Haskell: \u3068\u3066\u3082\u826f\u3044\nOCaml, Kotlin: \u826f\u3044\nHaxe, Scala, Ruby: \u666e\u901a\nSwift: \u66f8\u304d\u306b\u304f\u3044\n\n\n\u30b3\u30f3\u30d1\u30a4\u30e9\u30c7\u30d5\u30a9\u30eb\u30c8\u52d5\u4f5c\n\nRust, Haxe, Swift, Kotlin, Elm: \u30d1\u30bf\u30fc\u30f3\u3092\u7db2\u7f85\u3057\u3066\u3044\u306a\u3044\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308b\nScala, OCaml: \u30d1\u30bf\u30fc\u30f3\u3092\u7db2\u7f85\u3057\u3066\u3044\u306a\u304f\u3066\u3082\u8b66\u544a\u3059\u308b\u3060\u3051\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u901a\u3063\u3066\u3057\u307e\u3046\nKoka, Haskell: \u30d1\u30bf\u30fc\u30f3\u3092\u7db2\u7f85\u3057\u3066\u3044\u306a\u304f\u3066\u3082\u8b66\u544a\u306a\u3057\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u901a\u3063\u3066\u3057\u307e\u3046\nRuby: \u8ad6\u5916\n\n## \u4ee3\u6570\u7684\u30c7\u30fc\u30bf\u578b\n\n### Koka\n```koka\ntype color {\n  Red\n  Green\n  Blue\n  Rgb( r : int, g : int, b: int )\n}\n```\n\n\u307e\u305f\u306f\n\n```koka\ntype color {\n  Red; Green; Blue; Rgb( r : int, g : int, b: int )\n}\n```\n\n### Rust\n```rust\nenum Color {\n Red,\n Green,\n Blue,\n Rgb { r: u8, g: u8, b: u8 }\n}\n```\n\n### Haxe\n```hx\nenum Color {\n  Red;\n  Green;\n  Blue;\n  Rgb(r: Int, g: Int, b: Int);\n}\n```\n\n### Swift\n```swift\nenum Color {\n  case Red, Green, Blue, Rgb(r: Int, g: Int, b: Int)\n}\n```\n### Elm\n```elm\ntype Color = Red | Green | Blue | Rgb { r: Int, g: Int, b: Int }\n```\n\n### Haskell\n```hs\ndata Color = Red | Green | Blue | Rgb {r :: Int, g :: Int, b :: Int}\n```\n\n### OCaml\n```ocaml\ntype rgb = { r: int; g: int; b: int }\ntype color = Red | Green | Blue | Rgb of rgb\n```\n\n### Kotlin\n```kotlin\nsealed class Color {\n    object Red: Color()\n    object Green: Color()\n    object Blue: Color()\n    class Rgb(val r: Int,val  g: Int,val  b: Int): Color()\n}\n```\n\n### Scala\n```scala\nsealed trait Color\n\nfinal case object Red extends Color\nfinal case object Green extends Color\nfinal case object Blue extends Color\nfinal case class Rgb(r: Int, g: Int, b: Int) extends Color\n```\n\n### Ruby\n```rb\nmodule Color\n  Red = 1\n  Green = 2\n  Blue = 3\n  Rgb = Struct.new(:r, :g, :b)\nend\n```\n\n### \u611f\u60f3\n#### \u8a18\u6cd5\n1. Koka, Rust, Haxe, Elm: \u3068\u3066\u3082\u826f\u3044\n2. Swift, Haskell, OCaml: \u826f\u3044\n3. Ruby: \u666e\u901a\n4. Kotlin: \u66f8\u304d\u306b\u304f\u3044\n5. Scala: \u3068\u3066\u3082\u66f8\u304d\u306b\u304f\u3044\n\n## \u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\n\n### Koka\n```koka\nmatch(color) {\n  Red   -> \"#FF0000\"\n  Green -> \"#00FF00\"\n  Blue  -> \"#0000FF\"\n  Rgb(r,g,b) -> \"#\" + showHex(r,2) + showHex(g,2) + showHex(b,2)\n}\n```\n[view code](https://gist.github.com/xmeta/2f1e9ca0e945aaa59f3326eadbdece84#file-color-kk)\n### Rust\n```rust\nmatch color {\n    Color::Red   => \"#FF0000\".to_string(),\n    Color::Green => \"#00FF00\".to_string(),\n    Color::Blue  => \"#0000FF\".to_string(),\n    Color::Rgb{r, g, b} => format!(\"#{:02X}{:02X}{:02X}\", r, g, b),\n}\n```\n[view code](http://ideone.com/UPBv5v)\n\n### Haxe\n```hx\nswitch( color ) {\n  case Red:   \"#FF0000\";\n  case Green: \"#00FF00\";\n  case Blue:  \"#0000FF\";\n  case Rgb(r, g, b): \"#\"+ StringTools.hex(r,2) + StringTools.hex(g,2) + StringTools.hex(b,2);\n}\n```\n- [view code](http://try.haxe.org/#6e52E)\n- [view code](http://try.haxe.org/#d5e66)\n\n### Swift\n```swift\nswitch color {\n  case .Red:\n    return \"#FF0000\"\n  case .Green:\n    return \"#00FF00\"\n  case .Blue:\n    return \"#0000FF\"\n  case let .Rgb(r, g, b):\n    return String(format:\"#%02X%02X%02X\", r, g, b)\n}\n```\n[view code](http://swiftlang.ng.bluemix.net/#/repl/57c9ac198836ca0c17d17ba8)\n\n### Elm\n```elm\ncase color of\n    Red   -> \"#FF0000\"\n    Green -> \"#00FF00\"\n    Blue  -> \"#0000FF\"\n    Rgb {r, g, b} -> String.concat [\"#\", (toHex r), (toHex g), (toHex b)]\n```\n* [view code](https://glot.io/snippets/eeigh13sgt)\n* [view code](https://gist.github.com/xmeta/2f1e9ca0e945aaa59f3326eadbdece84)\n\n### Haskell\n```hs\ncase color of\n    Red   -> \"#FF0000\"\n    Green -> \"#00FF00\"\n    Blue  -> \"#0000FF\"\n    Rgb r g b -> printf \"#%02X%02X%02X\" r g b\n```\n[view code](http://ideone.com/wYlJaI)\n\n### OCaml\n```ocaml\nmatch color with\n      Red   -> \"#FF0000\"\n    | Green -> \"#00FF00\"\n    | Blue  -> \"#0000FF\"\n    | Rgb {r; g; b} -> Printf.sprintf \"#%02X%02X%02X\" r g b;;\n```\n[view code](http://ideone.com/YjJZ7M)\n\n### Kotlin\n```kotlin\nwhen ( color ) {\n  Color.Red   -> \"#FF0000\"\n  Color.Green -> \"#00FF00\"\n  Color.Blue  -> \"#0000FF\"\n  is Color.Rgb -> \"#%02X%02X%02X\".format(color.r, color.g, color.b)\n}\n```\n[view code](https://gist.github.com/xmeta/70e07b542a7e5d2b9c4c98428b07596e)\n\n### Scala\n```scala\ncolor match {\n  case Red   =>\"#FF0000\"\n  case Green =>\"#00FF00\"\n  case Blue  =>\"#0000FF\"\n  case Rgb(r, g, b) => \"#%02X%02X%02X\".format(r, g, b)\n}\n```\n[view code](http://ideone.com/YbswFA)\n\n### Ruby\n```rb\ncase color\nwhen Color::Red; \"#FF000\"\nwhen Color::Green; \"#00FF00\"\nwhen Color::Blue; \"#0000FF\"\nwhen Color::Rgb; \"#%02X%02X%02X\" % [color.r, color.g, color.b]\nend\n```\n[view code](http://ideone.com/YFHGYT)\n\n### \u611f\u60f3\n#### \u8a18\u6cd5\n1. Koka, Rust, Elm, Haskell: \u3068\u3066\u3082\u826f\u3044\n2. OCaml, Kotlin: \u826f\u3044\n3. Haxe, Scala, Ruby: \u666e\u901a\n4. Swift: \u66f8\u304d\u306b\u304f\u3044\n\n#### \u30b3\u30f3\u30d1\u30a4\u30e9\u30c7\u30d5\u30a9\u30eb\u30c8\u52d5\u4f5c\n1. Rust, Haxe, Swift, Kotlin, Elm: \u30d1\u30bf\u30fc\u30f3\u3092\u7db2\u7f85\u3057\u3066\u3044\u306a\u3044\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308b\n2. Scala, OCaml: \u30d1\u30bf\u30fc\u30f3\u3092\u7db2\u7f85\u3057\u3066\u3044\u306a\u304f\u3066\u3082\u8b66\u544a\u3059\u308b\u3060\u3051\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u901a\u3063\u3066\u3057\u307e\u3046\n3. Koka, Haskell: \u30d1\u30bf\u30fc\u30f3\u3092\u7db2\u7f85\u3057\u3066\u3044\u306a\u304f\u3066\u3082\u8b66\u544a\u306a\u3057\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u901a\u3063\u3066\u3057\u307e\u3046\n4. Ruby: \u8ad6\u5916\n", "tags": ["rust", "Haxe", "Kotlin", "Scala", "Swift"]}