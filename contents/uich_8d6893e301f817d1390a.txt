{"context": "\n\n\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\n\u3042\u308b\uff11\u3064\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u304c\u3042\u3063\u305f\u3068\u3057\u3066\u3001\u3053\u306eREST-API\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u306eContent\u2212Type\u3092\u62e1\u5f35\u5b50\u3067\u5207\u308a\u66ff\u3048\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u671f\u5f85\u3059\u308b\u7d50\u679c\n\n\u30c7\u30d5\u30a9\u30eb\u30c8 or JSON\nRequest\nGET /items or /items.json\n---\nResponse\nContent-Tyep: application/json;charset=UTF-8\n\n\nYaml\nRequest\nGET /items.yaml\n---\nResponse\nContent-Tyep: application/yaml;charset=UTF-8\n\n\nCSV\nRequest\nGET /items.csv\n---\nResponse\nContent-Tyep: text/csv;charset=UTF-8\n\n\n\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\n\u7528\u610f\u3059\u308b\u306e\u306f\u3053\u306e\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\uff11\u3064\u3002\nREST-API\u306e\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3068\u3057\u3066\u306f\u4f55\u306e\u30ea\u30bd\u30fc\u30b9\u3092\u8fd4\u3059\u304b\u3060\u3051\u306e\u554f\u984c\u306a\u306e\u3067\u3001\u3053\u308c\u3067\u5341\u5206\u306a\u306f\u305a\u3002\nContent-Type\u306b\u5408\u308f\u305b\u3066\u3069\u3046\u5909\u63db\u3059\u308b\u304b\u306fSpring-MVC\u306b\u65bc\u3044\u3066\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u4ed5\u4e8b\u3058\u3083\u306a\u3044\u306f\u305a\u3002\n@GetMapping(\"/items\")\npublic List<Item> getItems(HttpServletResponse response) {\nreturn Collections.singletonList(Item.builder()\n  .id(1234L)\n  .name(\"\u624b\u63d0\u3052\u30d0\u30c3\u30b0\")\n  .category(Category.builder()\n    .id(345)\n    .name(\"\u5c0f\u7269\")\n    .parent(Category.builder()\n      .id(345)\n      .name(\"\u30d0\u30c3\u30b0\")\n      .build())\n    .build())\n  .build());\n\n\nYaml\u3092\u8ffd\u52a0\u3057\u3066\u307f\u308b\nSpringBoot\u4f7f\u3063\u3066\u305f\u3089\u3001\u3053\u306e\u307e\u307e\u3067\u3082JSON\u3060\u3051\u306a\u3089\u8fd4\u308b\u3002\n$ curl -i http://localhost:8080/items \nHTTP/1.1 200\nContent-Type: application/json;charset=UTF-8\n\n[ {\n  \"id\" : 1234,\n  \"name\" : \"\u624b\u63d0\u3052\u30d0\u30c3\u30b0\",\n  \"category\" : {\n    \"id\" : 345,\n    \"name\" : \"\u5c0f\u7269\",\n    \"parent\" : {\n      \"id\" : 345,\n      \"name\" : \"\u30d0\u30c3\u30b0\",\n      \"parent\" : null\n    }\n  }\n} ]\n\n\u3053\u308c\u306bYaml\u3067\u8fd4\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3092\u8ffd\u52a0\u3057\u3066\u307f\u308b\u3002\n\napplication.yaml\nspring:\n  mvc:\n    media-types:\n      json: application/json\n      yaml: application/yaml\n\n\n\u3053\u308c\u3067\u62e1\u5f35\u5b50\u304c.json\u306a\u3089application/json\u306b\u3002\n.yaml\u306a\u3089application/yaml\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u306eContent-Type\u304c\u5909\u308f\u308b\u306f\u305a\u3002\nCharset\u306f\u30c7\u30d5\u30a9\u30eb\u30c8UTF-8\u306a\u306e\u3067\u6c17\u306b\u3057\u306a\u3044\u3002\n\u3067\u3082\u3053\u308c\u3060\u3051\u3060\u3068Content-Type\u304capplication/yaml\u306b\u5909\u308f\u308b\u3060\u3051\u3067\u3001\u5b9f\u969b\u306bYaml\u5f62\u5f0f\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u306f\u5909\u63db\u3057\u3066\u304f\u308c\u306a\u3044\u3002\n\u306a\u306e\u3067\u3001Yaml\u7528\u306eHttpMessageConverter\u3092\u8ffd\u52a0\u3057\u3066\u307f\u308b\u3002\npom.xml\u306bjackson-dataformat-yaml\u3092\u8ffd\u52a0\u3059\u308b\u3002\n\npom.xml\n<dependency>\n  <groupId>com.fasterxml.jackson.dataformat</groupId>\n  <artifactId>jackson-dataformat-yaml</artifactId>\n</dependency>\n\n\n\u30d0\u30fc\u30b8\u30e7\u30f3\u306fspring-boot-starter-parent\u306b\u4efb\u305b\u308b\u306e\u3067\u6307\u5b9a\u4e0d\u8981\u3002\n\u6b21\u306bBean\u8a2d\u5b9a\u3002\nJSON\u3067\u4f7f\u308f\u308c\u3066\u3044\u308bMappingJackson2HttpMessageConverter\u306eObjectMappper\u306bYamlFactory\u3092\u6307\u5b9a\u3059\u308b\u3060\u3051\u3002\u7c21\u5358\u3002\n\nConfig.java\n@Bean\npublic MappingJackson2HttpMessageConverter yamlConverter() {\nMappingJackson2HttpMessageConverter yamlConverter = new MappingJackson2HttpMessageConverter(\n  new ObjectMapper(new YAMLFactory()));\nyamlConverter.setSupportedMediaTypes(Collections.singletonList(MediaType.parseMediaType(\"application/yaml\")));\nreturn yamlConverter;\n}\n\n\n\n\u7d50\u679c\n$ curl -i http://localhost:8080/items.yaml\nHTTP/1.1 200\nContent-Type: application/yaml;charset=UTF-8\n\n---\n- id: 1234\n  name: \"\u624b\u63d0\u3052\u30d0\u30c3\u30b0\"\n  category:\n    id: 345\n    name: \"\u5c0f\u7269\"\n    parent:\n      id: 345\n      name: \"\u30d0\u30c3\u30b0\"\n      parent: null\n\nJSON\u3067\u3082\u554f\u984c\u306a\u3044\uff1f\n$ curl -i http://localhost:8080/items\nContent-Type: application/json;charset=UTF-8\nTransfer-Encoding: chunked\n\n[ {\n  \"id\" : 1234,\n  \"name\" : \"\u624b\u63d0\u3052\u30d0\u30c3\u30b0\",\n  \"category\" : {\n    \"id\" : 345,\n    \"name\" : \"\u5c0f\u7269\",\n    \"parent\" : {\n      \"id\" : 345,\n      \"name\" : \"\u30d0\u30c3\u30b0\",\n      \"parent\" : null\n    }\n  }\n} ]\n\n\u554f\u984c\u306a\u3044\u3002\n\nCSV\u3092\u8ffd\u52a0\u3057\u3066\u307f\u308b\n\u307e\u305a\u306fContentNegotiation\u306e\u8a2d\u5b9a\u3002\n\napplication.yaml\nspring:\n  mvc:\n    media-types:\n      json: application/json\n      yaml: application/yaml\n      csv:  text/csv\n\n\n\u6b21\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u8ffd\u52a0\u3002\n\u3053\u308c\u3082Yaml\u3068\u540c\u3058\u3088\u3046\u306bJackson\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u7121\u3044\u304b\u63a2\u3057\u3066\u307f\u308b\u3002\n\u3042\u3063\u305f\u3002\njackson-dataformat-csv\npom.xml\u306b\u8ffd\u52a0\u3059\u308b\u3002\n\npom.xml\n<dependency>\n  <groupId>com.fasterxml.jackson.dataformat</groupId>\n  <artifactId>jackson-dataformat-csv</artifactId>\n</dependency>\n\n\n\u3053\u308c\u3082Yaml\u540c\u69d8spring-boot-starter-parent\u306b\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u306f\u4efb\u305b\u308b\u3002\n\u6b21\u306bHttpMessageConverter\u306e\u8a2d\u5b9a\u3002\n\u3053\u308c\u3082CsvFactory\u3092\u8a2d\u5b9a\u3057\u3066\u30fb\u30fb\u30fb\u30a8\u30e9\u30fc\u306b\u306a\u3063\u305f\u3002\u3002\n\u305d\u3046\u3060\u3088\u3002\u305d\u3093\u306a\u7c21\u5358\u306a\u306f\u305a\u7121\u3044\u3093\u3060\u3088\u3002\nCSV\u306a\u3093\u30661\u884c\u30c7\u30fc\u30bf\u3067\u305d\u3082\u305d\u3082\u30cd\u30b9\u30c8\u968e\u5c64\u306e\u30c7\u30fc\u30bf\u306a\u3093\u3066\u8868\u73fe\u3067\u304d\u306a\u3044\u3093\u3060\u304b\u3089\u3002\n\u3060\u304b\u3089\u3001\u307e\u305a\u306f\u30cd\u30b9\u30c8\u968e\u5c64\u306e\u30c7\u30fc\u30bf\u3092\u3069\u30461\u884c\u30c7\u30fc\u30bf\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u304b\u3092\u8003\u3048\u306a\u304d\u3083\u3044\u3051\u306a\u3044\u3002\nHttpMessageConverter\u306e\u8a2d\u5b9a\u307e\u3067\u306e\u9053\u306e\u308a\u306f\u9060\u3044\u3002\n\nCSV\u30de\u30c3\u30d4\u30f3\u30b0\u306e\u30eb\u30fc\u30eb\u5b9a\u7fa9\n\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u304c\u8fd4\u3059List<Item>\u306eItem\u306f\u3053\u3093\u306a\u69cb\u9020\u3002\n\nItem.java\n@Data\n@Builder\npublic class Item {\n  private Long id;\n  private String name;\n  private Category category;\n}\n\n\n\u30cd\u30b9\u30c8\u968e\u5c64\u306e\u30c7\u30fc\u30bf\u3082\u6301\u3064\u3088\u3046\u306bCategory\u3092\u5165\u308c\u3066\u3044\u308b\u3002\n\nCategory.java\n@Data\n@Builder\npublic class Category {\n  private Integer id;\n  private String name;\n\n  @Nullable\n  private Category parent;\n}\n\n\nCategory\u306f\u30cd\u30b9\u30c8\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u3066\u3001\u5e38\u306b\u300c\u89aa\u300d\u30ab\u30c6\u30b4\u30ea\u3092\u77e5\u3063\u3066\u3044\u308b\u72b6\u614b\u3002\n\u89aa\u304c\u3044\u306a\u3051\u308c\u3070\u30c8\u30c3\u30d7\u968e\u5c64\u306e\u30ab\u30c6\u30b4\u30ea\u3068\u3044\u3063\u305f\u5177\u5408\u3002\n\u5b9f\u969b\u3053\u3093\u306a\u69cb\u9020\u306e\u30c7\u30fc\u30bf\u306f\u307e\u3041\u6700\u8fd1\u306f\u898b\u304b\u3051\u306a\u3044\u304c\u3001\u4eca\u56de\u306e\u691c\u8a3c\u7528\u3002\n\u3053\u308c\u3092\u3053\u3093\u306a\u5f62\u306eCSV\u306b\u3057\u3088\u3046\u3068\u601d\u3046\u3002\n\n\n\n\u5546\u54c1ID\n\u5546\u54c1\u540d\n\u5927\u30ab\u30c6\u30b4\u30ea\n\u4e2d\u30ab\u30c6\u30b4\u30ea\n\n\n\n\n1234\n\u624b\u63d0\u3052\u30d0\u30c3\u30b0\n\u5c0f\u7269\n\u30d0\u30c3\u30b0\n\n\n\n\u3058\u3083\u3042\u3001\u7406\u60f3\u306e\u5f62\u3092Jackson\u306eMix-In\u3067\u8868\u73fe\u3057\u3066\u307f\u308b\u3002\n@JsonProperty(\"\u5546\u54c1ID\")\nprivate Long id;\n\n@JsonProperty(\"\u5546\u54c1\u540d\")\nprivate String name;\n\n@JsonProperty(\"\u5927\u30ab\u30c6\u30b4\u30ea\")\nprivate String largeCategoryName;\n\n@JsonProperty(\"\u4e2d\u30ab\u30c6\u30b4\u30ea\")\nprivate String middleCategoryName;\n\n\u3067\u3082\u3001\u3053\u306eMix-In\u3092Item\u306eMix-In\u3068\u3057\u3066\u767b\u9332\u3057\u3066\u3082largeCategoryName\u306a\u3093\u304b\u7121\u3047\u3088\u3063\u3066\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\n\u3058\u3083\u3042\u3001Item\u3092\u3053\u306e\u7406\u60f3\u306e\u5f62\u306b\u5909\u63db\u3057\u3066\u304b\u3089Jackson\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u3082\u3089\u3048\u308c\u3070\u30a8\u30e9\u30fc\u306b\u306a\u3089\u306a\u3044\u306f\u305a\u3002\n\u305d\u3053\u3067\u3001\u81ea\u524d\u306e\u5909\u63db\u30ed\u30b8\u30c3\u30af\u3092ObjectMapper\u306b\u8a2d\u5b9a\u3057\u3066\u5909\u63db\u3057\u3066\u307f\u308b\u3002\n\u307e\u305a\u306f\u72ec\u81ea\u306e\u5909\u63db\u30eb\u30fc\u30eb\u7528\u306b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u8ffd\u52a0\u3002\n\nItemFlatMixin.java\n@Data\n@JsonPropertyOrder({ \"\u5546\u54c1ID\", \"\u5546\u54c1\u540d\", \"\u5927\u30ab\u30c6\u30b4\u30ea\", \"\u4e2d\u30ab\u30c6\u30b4\u30ea\" })\n// \u30cd\u30b9\u30c8\u968e\u5c64\u3092\u8868\u73fe\u3067\u304d\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30d5\u30e9\u30c3\u30c8\u306b\u3059\u308b\u305f\u3081\u306e\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\n@JsonFlatMixinFor(Item.class)\npublic class ItemFlatMixin {\n  @JsonProperty(\"\u5546\u54c1ID\")\n  private Long id;\n\n  @JsonProperty(\"\u5546\u54c1\u540d\")\n  private String name;\n\n  @JsonProperty(\"\u5927\u30ab\u30c6\u30b4\u30ea\")\n  // \u30d5\u30e9\u30c3\u30c8\u306b\u3059\u308b\u969b\u306b\u5143\u306e\u578b\u306e\u5024\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306e\u30d1\u30b9\n  @JsonMixinProperty(\"category.parent.name\")\n  private String largeCategoryName;\n\n  @JsonProperty(\"\u4e2d\u30ab\u30c6\u30b4\u30ea\")\n  @JsonMixinProperty(\"category.name\")\n  private String middleCategoryName;\n}\n\n\nMix-In\u306a\u306e\u306b\u4f55\u3067\u5177\u8c61\u30af\u30e9\u30b9\u306a\u3093\u3060\u3063\u3066\u3044\u3046\u30c4\u30c3\u30b3\u30df\u306f\u3061\u3087\u3063\u3068\u5f85\u3063\u3066\u4e0b\u3055\u3044\u3002\n\u6b21\u306fSerializer\u3002\n\nFlatSerializer.java\n@RequiredArgsConstructor\npublic class FlatSerializer extends JsonSerializer<Object> {\n\n  private final Class<?> flatType;\n\n  @Override\n  public void serialize(Object value, JsonGenerator gen, SerializerProvider serializers)\n    throws IOException, JsonProcessingException {\n    BeanWrapper targetWrapper = this.wrap(value);\n    BeanWrapper mixinWrapper = this.wrap(BeanUtils.instantiateClass(this.flatType));\n\n    // ItemFlatMixin\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30b0\u30eb\u30c3\u3068\u56de\u3057\u3066\u5bfe\u5fdc\u3059\u308b\u5024\u3092Item\u304b\u3089\u53d6\u5f97\u3057\u3066\u81ea\u8eab\u306b\u30bb\u30c3\u30c8\u3059\u308b\n    ReflectionUtils.doWithFields(this.flatType, field -> {\n      String targetPath = this.targetPath(field);\n      if (targetWrapper.isReadableProperty(targetPath) == false) {\n        return;\n      }\n      if (mixinWrapper.isWritableProperty(field.getName()) == false) {\n        return;\n      }\n      mixinWrapper.setPropertyValue(field.getName(), targetWrapper.getPropertyValue(targetPath));\n    });\n    gen.writeObject(mixinWrapper.getWrappedInstance());\n  }\n\n  private BeanWrapper wrap(Object obj) {\n    BeanWrapper wrapper = PropertyAccessorFactory.forBeanPropertyAccess(obj);\n    // JsonMixinProperty#value\u306e\u5024\u306f\u3053\u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u305f\u3081\u3002\n    wrapper.setAutoGrowNestedPaths(true);\n    return wrapper;\n  }\n\n  private String targetPath(Field field) {\n    JsonMixinProperty property = field.getAnnotation(JsonMixinProperty.class);\n    if (property == null) {\n      return field.getName();\n    }\n    return property.value();\n  }\n\n}\n\n\n\u3053\u306eSerializer\u3092\u3069\u3046\u3059\u308b\u3093\u3060\uff1fflatType\u306b\u306f\u3069\u3046\u3084\u3063\u3066\u5024\u3092\u30bb\u30c3\u30c8\u3059\u3093\u3060\uff1f\n\u3067\u3001SimpleSerializers\u3092\u4f7f\u3046\u3002\n\nSampleSerializers.java\n@RequiredArgsConstructor\npublic class SampleSerializers extends SimpleSerializers {\n\n  // \u5168\u3066\u306ePOJO\u3068\u30d5\u30e9\u30c3\u30c8\u306a\u578b\u3078\u306e\u5909\u63db\u30de\u30c3\u30d4\u30f3\u30b0\n  private final Map<Class<?>, Class<?>> flatterMap;\n\n  // \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6642\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u3092\u63a2\u3059\u51e6\u7406\u304c\u8d70\u308b\u306e\u3067\u3001\u305d\u306e\u969b\u306b\u5bfe\u8c61\u306e\u578b\u304b\u3089\u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u3092\u52d5\u7684\u751f\u6210\u3059\u308b\n  @Override\n  public JsonSerializer<?> findSerializer(SerializationConfig config, JavaType type, BeanDescription beanDesc) {\n    Class<?> rawClass = type.getRawClass();\n    Class<?> flatClass = this.flatterMap.entrySet().stream()\n      .filter(entry -> entry.getKey().isAssignableFrom(rawClass))\n      .findFirst()\n      .map(Entry::getValue)\n      .orElse(null);\n\n    if (flatClass != null) {\n      return new FlatSerializer(flatClass);\n    }\n\n    return super.findSerializer(config, type, beanDesc);\n  }\n}\n\n\n\u30b9\u30fc\u30d1\u30fc\u30af\u30e9\u30b9\u306e\u5b9f\u88c5\u306f\u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u306e\u3042\u305f\u308a\u306f\u672c\u5b9f\u88c5\u3059\u308b\u969b\u306f\u3088\u3057\u306a\u306b\u5b9f\u88c5\u3059\u308b\u3002\n\u30ad\u30e3\u30c3\u30b7\u30e5\u306f\u4f7f\u3063\u305f\u65b9\u304c\u826f\u3044\u3002\n\u305d\u3057\u3066\u3001\u3053\u306eSimpleSerializers\u3092ObjectMapper\u306b\u767b\u9332\u3059\u308b\u3002\nCSV\u306e\u5834\u5408\u306fObjectMapper\u3067\u306f\u306a\u304fCsvMapper\u3002\n\nConfig.java\n@Bean\npublic CsvMapper csvMapper() {\nCsvMapper csvMapper = new CsvMapper();\ncsvMapper.registerModule(new SimpleModule() {\n  @Override\n  public void setupModule(SetupContext context) {\n    context.addSerializers(new SampleSerializers(Config.this.flatterMap()));\n  }\n});\n\nreturn csvMapper;\n}\n\nprivate Map<Class<?>, Class<?>> flatterMap() {\nreturn new Reflections(\"jp.uich.databind.mixin\")\n  .getTypesAnnotatedWith(JsonFlatMixinFor.class)\n  .stream()\n  .collect(Collectors.toMap(\n    type -> type.getAnnotation(JsonFlatMixinFor.class).value(), Function.identity()));\n}\n\n\n\u3053\u3053\u3067\u4f7f\u3063\u3066\u3044\u308bReflections\u306forg.reflections\u306ereflections\u3002\nSpringBoot\u306e\u7279\u5b9a\u30d0\u30fc\u30b8\u30e7\u30f3\u4ee5\u4e0a\u306e\u5834\u5408\u3001Guava\u3067\u30d1\u30c3\u30b1\u30fc\u30b8\u30b9\u30ad\u30e3\u30f3\u3059\u308b\u3068ExecutableJar\u306b\u3057\u305f\u969b\u306b\u3046\u307e\u304f\u3044\u304d\u307e\u305b\u3093\u3002\n\u3053\u308c\u306f\u672c\u984c\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u7406\u7531\u306f\u5272\u611b\u3057\u307e\u3059\u3002\n\u6b21\u306f HttpMessageConverter \u306e\u8a2d\u5b9a\u3002\n\nConfig.java\n@Bean\npublic MappingJackson2HttpMessageConverter csvConverter() {\n  MappingJackson2HttpMessageConverter csvConverter = new MappingJackson2HttpMessageConverter(this.csvMapper());\n  csvConverter.setSupportedMediaTypes(Collections.singletonList(MediaType.parseMediaType(\"text/csv\")));\n  return csvConverter;\n}\n\n\n\u3068\u3057\u3066\u7d42\u308f\u308c\u3070\u826f\u3044\u3093\u3060\u3051\u3069\u3001\u305d\u3046\u306f\u3044\u304b\u306a\u3044\u3002\nCsvSchema \u306e\u8a2d\u5b9a\u3092\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002\n\u3053\u308c\u3070\u304b\u308a\u306fCsvMapper\u5074\u3067\u3069\u3046\u9811\u5f35\u3063\u3066\u3082\u89e3\u6c7a\u3067\u304d\u306a\u3044\u306e\u3067HttpMessageConverter\u306b\u624b\u3092\u5165\u308c\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001AbstractJackson2HttpMessageConverter\u3092\u7d99\u627f\u3057\u3066\u5b9f\u88c5\u3057\u3066\u307f\u308b\u3002\n\nMappingJackson2CsvHttpMessageConverter.java\n@Override\nprotected void writeInternal(Object object, Type type, HttpOutputMessage outputMessage)\nthrows IOException, HttpMessageNotWritableException {\nCsvMapper csvMapper = (CsvMapper) this.getObjectMapper();\n\n// \u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u6587\u5b57\u30b3\u30fc\u30c9\n// #getJsonEncoding(MediaType)\u306f\u4f7f\u308f\u306a\u3044\u3002Shift_JIS\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u304b\u3089\u3002\nCharset actualCharset = Optional.ofNullable(outputMessage.getHeaders().getContentType())\n  // \u30ec\u30b9\u30dd\u30f3\u30b9\u30d8\u30c3\u30c0\u306b\u6307\u5b9a\u3055\u308c\u3066\u3044\u305f\u3089\u305d\u308c\u3092\u4f7f\u7528\u3059\u308b\n  .map(contentType -> contentType.getCharset())\n  // \u305d\u3046\u3067\u306a\u3051\u308c\u3070\u30c7\u30d5\u30a9\u30eb\u30c8\u306eCharset\n  .orElseGet(this::getDefaultCharset);\n\nJsonGenerator generator = csvMapper.getFactory().createGenerator(\n  new OutputStreamWriter(outputMessage.getBody(), actualCharset));\n\ntry {\n  // CSV\u306e\u30b9\u30ad\u30fc\u30de(1\u884c\u76ee\u306e\u30d8\u30c3\u30c0\u30fc)\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b\u578b\u3092\u7279\u5b9a\u3059\u308b\n  // \u578b \u2192 \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u30eb\u30fc\u30eb\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u578b \u2192 ItemFlatMixin.java\n  ObjectWriter objectWriter = Optional.ofNullable(type)\n    .map(csvMapper::schemaFor)\n    .map(CsvSchema::withHeader)\n    .map(csvMapper::writer)\n    .orElseGet(csvMapper::writer);\n\n  objectWriter.writeValue(generator, object);\n  generator.flush();\n\n} catch (JsonProcessingException ex) {\n  throw new HttpMessageNotWritableException(\"Could not write content: \" + ex.getMessage(), ex);\n}\n\n\n\u3053\u308c\u3067OK\uff01\u3068\u601d\u3063\u3066\u5b9f\u884c\u3057\u3066\u307f\u305f\u3089\u30a8\u30e9\u30fc\u3002\n\u305d\u3089\u305d\u3046\u3060\u3002\u30b9\u30ad\u30fc\u30de\u3092\u7279\u5b9a\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u578b\u306fItem\u3002\nCsvMapper\u306fItem\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u30eb\u30fc\u30eb\u306bItemFlatMixin\u304c\u4f7f\u308f\u308c\u308b\u3053\u3068\u3092\u77e5\u3089\u306a\u3044\u3002\n\u306a\u306e\u3067\u3001Mix-In\u3068\u3057\u3066\u767b\u9332\u3057\u3066\u307f\u308b\u3002\n\nConfig.java\n@Bean\nCsvMapper csvMapper() {\nCsvMapper csvMapper = new CsvMapper();\n// \u3053\u308c\u3092\u8ffd\u52a0\ncsvMapper.setMixIns(this.flatterMap());\n\ncsvMapper.registerModule(new SimpleModule() {\n  @Override\n  public void setupModule(SetupContext context) {\n    context.addSerializers(new SampleSerializers(Config.this.flatterMap()));\n  }\n});\n\nreturn csvMapper;\n}\n\n\n\u3068\u3084\u3063\u3066\u307f\u305f\u304c\u3001\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\n\u307e\u3041\u3001\u3053\u308c\u3082\u305d\u3046\u306a\u3093\u3060\u3088\u3002 Item\u3068ItemFlatMixin\u306f\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u5185\u5bb9\u304c\u9055\u3046\u304b\u3089ObjectMapper\u306f\u30b9\u30ad\u30fc\u30de\u5224\u5b9a\u3059\u308b\u969b\u306b\nItem\uff1f -> ItemFlatMixin\u4f7f\u304a\u3046 -> \u3093\uff1f\u4f55\u304b\u30d5\u30a3\u30fc\u30eb\u30c9\u9055\u308f\u306a\u3044\u304b\uff1f -> \u30a8\u30e9\u30fc!!!!\n\n\u3063\u3066\u306a\u308b\u3002\n\u306a\u306e\u3067\u3001\u30b9\u30ad\u30fc\u30de\u306e\u578b\u3092\u7279\u5b9a\u3059\u308b\u3068\u3053\u308d\u306b\u5c11\u3057\u624b\u3092\u52a0\u3048\u3066\u307f\u308b\u3002\n\nMappingJackson2CsvHttpMessageConverter.java\nprivate Class<?> getSchemaType(Type type) {\n  if (type == null) {\n    return null;\n  }\n  JavaType javaType = this.getJavaType(type, null);\n  Class<?> rowClass;\n\n  if (javaType.isCollectionLikeType()) {\n    rowClass = Optional.ofNullable(javaType.getContentType())\n      .map(JavaType::getRawClass)\n      .orElse(null);\n\n    if (rowClass == null) {\n      return javaType.getRawClass();\n    }\n  } else {\n    rowClass = javaType.getRawClass();\n  }\n\n  // Item -> ItemFlatMixin\u306b\u5909\u63db\n  Class<?> classForSchema = this.getObjectMapper().findMixInClassFor(rowClass);\n  if (classForSchema == null) {\n    return rowClass;\n  }\n\n  return classForSchema;\n}\n\n\n\u3067\u3001\u3055\u3063\u304d\u306eMappingJackson2CsvHttpMessageConverter\u306e\u8a72\u5f53\u884c\u3092\u6b21\u306e\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u308b\u3002\n\nMappingJackson2CsvHttpMessageConverter.java\nObjectWriter objectWriter = Optional.ofNullable(this.getSchemaType(type))\n  .map(csvMapper::schemaFor)\n  .map(CsvSchema::withHeader)\n  .map(csvMapper::writer)\n  .orElseGet(csvMapper::writer);\n\n\n\u3053\u306egetSchemaType\u304b\u3089\u8fd4\u308b\u578b\u306fItemFlatMixin\u3068\u306a\u308a\u3001\u3053\u306e\u30af\u30e9\u30b9\u306f\u3053\u306e\u307e\u307e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6642\u306e\u30eb\u30fc\u30eb\u3092\u6301\u3063\u3066\u3044\u308b\u306e\u3067ObjectMapper\u306fMix-In\u3092\u63a2\u3055\u305a\u306b\uff08\u63a2\u3059\u3068\u306f\u601d\u3046\u304c\u898b\u3064\u304b\u3089\u306a\u3044\uff09\u305d\u306e\u307e\u307eItemFlatMixin\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u30eb\u30fc\u30eb\u306b\u5247\u308a\u30b9\u30ad\u30fc\u30de\u3092\u51fa\u529b\u3059\u308b\u3002\n\u3053\u308c\u3067MappingJackson2CsvHttpMessageConverter\u3092Bean\u767b\u9332\u3059\u308c\u3070\u6e96\u5099\u5b8c\u4e86\u3002\n\nConfig.java\n@Bean\nMappingJackson2CsvHttpMessageConverter csvConverter() {\n  MappingJackson2CsvHttpMessageConverter converter = new MappingJackson2CsvHttpMessageConverter(this.csvMapper());\n  converter.setSupportedMediaTypes(Collections.singletonList(MediaType.parseMediaType(\"text/csv\")));\n  return converter;\n}\n\n\n\n\u7d50\u679c\u78ba\u8a8d\n$ curl -i http://localhost:8080/items.csv\nHTTP/1.1 200\nContent-Type: text/csv;charset=UTF-8\n\n\u5546\u54c1ID,\u5546\u54c1\u540d,\u5927\u30ab\u30c6\u30b4\u30ea,\u4e2d\u30ab\u30c6\u30b4\u30ea\n1234,\u624b\u63d0\u3052\u30d0\u30c3\u30b0,\u30d0\u30c3\u30b0,\u5c0f\u7269\n\nOK\u3002\nJSON\u3084Yaml\u3082\u554f\u984c\u306a\u3044\uff1f\n$ curl -i http://localhost:8080/items.json\nHTTP/1.1 200\nContent-Type: application/json;charset=UTF-8\n\n[ {\n  \"id\" : 1234,\n  \"name\" : \"\u624b\u63d0\u3052\u30d0\u30c3\u30b0\",\n  \"category\" : {\n    \"id\" : 345,\n    \"name\" : \"\u5c0f\u7269\",\n    \"parent\" : {\n      \"id\" : 345,\n      \"name\" : \"\u30d0\u30c3\u30b0\",\n      \"parent\" : null\n    }\n  }\n} ]\n\n$ curl -i http://localhost:8080/items.yaml\nHTTP/1.1 200\nContent-Type: application/yaml;charset=UTF-8\n\n---\n- id: 1234\n  name: \"\u624b\u63d0\u3052\u30d0\u30c3\u30b0\"\n  category:\n    id: 345\n    name: \"\u5c0f\u7269\"\n    parent:\n      id: 345\n      name: \"\u30d0\u30c3\u30b0\"\n      parent: null\n\n$ curl -i http://localhost:8080/items\nHTTP/1.1 200\nContent-Type: text/csv;charset=UTF-8\n\n\u5546\u54c1ID,\u5546\u54c1\u540d,\u5927\u30ab\u30c6\u30b4\u30ea,\u4e2d\u30ab\u30c6\u30b4\u30ea\n1234,\u624b\u63d0\u3052\u30d0\u30c3\u30b0,\u30d0\u30c3\u30b0,\u5c0f\u7269\n\n\u3042\u3089\uff1f\u30c7\u30d5\u30a9\u30eb\u30c8\u304cCSV\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306fJSON\u306e\u307e\u307e\u306b\u3057\u305f\u3044\u3002\nHttpMessageConverter\u306b@Order\u3067\u8abf\u6574\u3057\u3066\u307f\u305f\u3051\u3069\u30c0\u30e1\u3060\u3063\u305f\u3002\n\u3067\u7d50\u5c40\u89e3\u6c7a\u3057\u305f\u306e\u306f\u3053\u308c\u2193\n\nConfig.java\n@Bean\nHttpMessageConverters converters() {\n  return new HttpMessageConverters(false, Arrays.asList(\n    this.jsonConverter(),\n    this.yamlConverter(),\n    this.csvConverter()));\n}\n\n\n\n\u307e\u3068\u3081\n\n\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u51e6\u7406\u306fJackson\u3067\u4e00\u672c\u5316\u53ef\u80fd\n\u4eca\u56de\u306e\u691c\u8a3c\u3067\u306eMixin\u306e\u4f7f\u3044\u65b9\u306f\u6c17\u6301\u3061\u60aa\u3044\u3002\u30d5\u30e9\u30c3\u30c8\u306b\u3059\u308b\u65b9\u3068Jackson\u3067\u4f7f\u7528\u3059\u308bMix-In\u306f\u5206\u3051\u305f\u65b9\u304c\u826f\u3044\u304b\u3082\n\n\u4eca\u56de\u306e\u30b3\u30fc\u30c9\u3082GitHub\u306b\u30a2\u30c3\u30d7\u3057\u3066\u307e\u3059\u3002\nCSV\u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u969b\u306b\u6587\u5b57\u30b3\u30fc\u30c9\u3092Shift_JIS\u306b\u5909\u66f4\u3059\u308b\u51e6\u7406\u3082\u5165\u308c\u3066\u3044\u305f\u308a\u3057\u307e\u3059\u306e\u3067\u8208\u5473\u306e\u3042\u308b\u65b9\u306f\u3069\u3046\u305e\u3002\n# \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\n\n\u3042\u308b\uff11\u3064\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u304c\u3042\u3063\u305f\u3068\u3057\u3066\u3001\u3053\u306eREST-API\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u306eContent\u2212Type\u3092\u62e1\u5f35\u5b50\u3067\u5207\u308a\u66ff\u3048\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n## \u671f\u5f85\u3059\u308b\u7d50\u679c\n\n### \u30c7\u30d5\u30a9\u30eb\u30c8 or JSON\n\n```\nRequest\nGET /items or /items.json\n---\nResponse\nContent-Tyep: application/json;charset=UTF-8\n```\n\n### Yaml\n\n```\nRequest\nGET /items.yaml\n---\nResponse\nContent-Tyep: application/yaml;charset=UTF-8\n```\n\n### CSV\n\n```\nRequest\nGET /items.csv\n---\nResponse\nContent-Tyep: text/csv;charset=UTF-8\n```\n\n## \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\n\n\u7528\u610f\u3059\u308b\u306e\u306f\u3053\u306e\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\uff11\u3064\u3002\nREST-API\u306e\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3068\u3057\u3066\u306f\u4f55\u306e\u30ea\u30bd\u30fc\u30b9\u3092\u8fd4\u3059\u304b\u3060\u3051\u306e\u554f\u984c\u306a\u306e\u3067\u3001\u3053\u308c\u3067\u5341\u5206\u306a\u306f\u305a\u3002\nContent-Type\u306b\u5408\u308f\u305b\u3066\u3069\u3046\u5909\u63db\u3059\u308b\u304b\u306fSpring-MVC\u306b\u65bc\u3044\u3066\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u4ed5\u4e8b\u3058\u3083\u306a\u3044\u306f\u305a\u3002\n\n```java\n@GetMapping(\"/items\")\npublic List<Item> getItems(HttpServletResponse response) {\nreturn Collections.singletonList(Item.builder()\n  .id(1234L)\n  .name(\"\u624b\u63d0\u3052\u30d0\u30c3\u30b0\")\n  .category(Category.builder()\n    .id(345)\n    .name(\"\u5c0f\u7269\")\n    .parent(Category.builder()\n      .id(345)\n      .name(\"\u30d0\u30c3\u30b0\")\n      .build())\n    .build())\n  .build());\n```\n\n# Yaml\u3092\u8ffd\u52a0\u3057\u3066\u307f\u308b\n\nSpringBoot\u4f7f\u3063\u3066\u305f\u3089\u3001\u3053\u306e\u307e\u307e\u3067\u3082JSON\u3060\u3051\u306a\u3089\u8fd4\u308b\u3002\n\n```bash\n$ curl -i http://localhost:8080/items \nHTTP/1.1 200\nContent-Type: application/json;charset=UTF-8\n```\n```json\n[ {\n  \"id\" : 1234,\n  \"name\" : \"\u624b\u63d0\u3052\u30d0\u30c3\u30b0\",\n  \"category\" : {\n    \"id\" : 345,\n    \"name\" : \"\u5c0f\u7269\",\n    \"parent\" : {\n      \"id\" : 345,\n      \"name\" : \"\u30d0\u30c3\u30b0\",\n      \"parent\" : null\n    }\n  }\n} ]\n```\n\n\u3053\u308c\u306bYaml\u3067\u8fd4\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3092\u8ffd\u52a0\u3057\u3066\u307f\u308b\u3002\n\n```application.yaml\nspring:\n  mvc:\n    media-types:\n      json: application/json\n      yaml: application/yaml\n```\n\n\u3053\u308c\u3067\u62e1\u5f35\u5b50\u304c`.json`\u306a\u3089`application/json`\u306b\u3002\n`.yaml`\u306a\u3089`application/yaml`\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u306eContent-Type\u304c\u5909\u308f\u308b\u306f\u305a\u3002\nCharset\u306f\u30c7\u30d5\u30a9\u30eb\u30c8UTF-8\u306a\u306e\u3067\u6c17\u306b\u3057\u306a\u3044\u3002\n\n\u3067\u3082\u3053\u308c\u3060\u3051\u3060\u3068Content-Type\u304c`application/yaml`\u306b\u5909\u308f\u308b\u3060\u3051\u3067\u3001\u5b9f\u969b\u306bYaml\u5f62\u5f0f\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u306f\u5909\u63db\u3057\u3066\u304f\u308c\u306a\u3044\u3002\n\n\u306a\u306e\u3067\u3001Yaml\u7528\u306e`HttpMessageConverter`\u3092\u8ffd\u52a0\u3057\u3066\u307f\u308b\u3002\n\npom.xml\u306b`jackson-dataformat-yaml`\u3092\u8ffd\u52a0\u3059\u308b\u3002\n\n```xml:pom.xml\n<dependency>\n  <groupId>com.fasterxml.jackson.dataformat</groupId>\n  <artifactId>jackson-dataformat-yaml</artifactId>\n</dependency>\n```\n\n\u30d0\u30fc\u30b8\u30e7\u30f3\u306f`spring-boot-starter-parent`\u306b\u4efb\u305b\u308b\u306e\u3067\u6307\u5b9a\u4e0d\u8981\u3002\n\n\u6b21\u306bBean\u8a2d\u5b9a\u3002\nJSON\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b`MappingJackson2HttpMessageConverter`\u306e`ObjectMappper`\u306b`YamlFactory`\u3092\u6307\u5b9a\u3059\u308b\u3060\u3051\u3002\u7c21\u5358\u3002\n\n```java:Config.java\n@Bean\npublic MappingJackson2HttpMessageConverter yamlConverter() {\nMappingJackson2HttpMessageConverter yamlConverter = new MappingJackson2HttpMessageConverter(\n  new ObjectMapper(new YAMLFactory()));\nyamlConverter.setSupportedMediaTypes(Collections.singletonList(MediaType.parseMediaType(\"application/yaml\")));\nreturn yamlConverter;\n}\n```\n\n## \u7d50\u679c\n\n```bash\n$ curl -i http://localhost:8080/items.yaml\nHTTP/1.1 200\nContent-Type: application/yaml;charset=UTF-8\n```\n```yaml\n---\n- id: 1234\n  name: \"\u624b\u63d0\u3052\u30d0\u30c3\u30b0\"\n  category:\n    id: 345\n    name: \"\u5c0f\u7269\"\n    parent:\n      id: 345\n      name: \"\u30d0\u30c3\u30b0\"\n      parent: null\n```\n\nJSON\u3067\u3082\u554f\u984c\u306a\u3044\uff1f\n\n```bash\n$ curl -i http://localhost:8080/items\nContent-Type: application/json;charset=UTF-8\nTransfer-Encoding: chunked\n```\n```json\n[ {\n  \"id\" : 1234,\n  \"name\" : \"\u624b\u63d0\u3052\u30d0\u30c3\u30b0\",\n  \"category\" : {\n    \"id\" : 345,\n    \"name\" : \"\u5c0f\u7269\",\n    \"parent\" : {\n      \"id\" : 345,\n      \"name\" : \"\u30d0\u30c3\u30b0\",\n      \"parent\" : null\n    }\n  }\n} ]\n```\n\n\u554f\u984c\u306a\u3044\u3002\n\n# CSV\u3092\u8ffd\u52a0\u3057\u3066\u307f\u308b\n\n\u307e\u305a\u306fContentNegotiation\u306e\u8a2d\u5b9a\u3002\n\n```yaml:application.yaml\nspring:\n  mvc:\n    media-types:\n      json: application/json\n      yaml: application/yaml\n      csv:  text/csv\n```\n\n\u6b21\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u8ffd\u52a0\u3002\n\u3053\u308c\u3082Yaml\u3068\u540c\u3058\u3088\u3046\u306bJackson\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u7121\u3044\u304b\u63a2\u3057\u3066\u307f\u308b\u3002\n\n\u3042\u3063\u305f\u3002\n\n`jackson-dataformat-csv`\n\npom.xml\u306b\u8ffd\u52a0\u3059\u308b\u3002\n\n```xml:pom.xml\n<dependency>\n  <groupId>com.fasterxml.jackson.dataformat</groupId>\n  <artifactId>jackson-dataformat-csv</artifactId>\n</dependency>\n```\n\n\u3053\u308c\u3082Yaml\u540c\u69d8`spring-boot-starter-parent`\u306b\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u306f\u4efb\u305b\u308b\u3002\n\n\u6b21\u306b`HttpMessageConverter`\u306e\u8a2d\u5b9a\u3002\n\u3053\u308c\u3082`CsvFactory`\u3092\u8a2d\u5b9a\u3057\u3066\u30fb\u30fb\u30fb\u30a8\u30e9\u30fc\u306b\u306a\u3063\u305f\u3002\u3002\n\n\u305d\u3046\u3060\u3088\u3002\u305d\u3093\u306a\u7c21\u5358\u306a\u306f\u305a\u7121\u3044\u3093\u3060\u3088\u3002\nCSV\u306a\u3093\u30661\u884c\u30c7\u30fc\u30bf\u3067\u305d\u3082\u305d\u3082\u30cd\u30b9\u30c8\u968e\u5c64\u306e\u30c7\u30fc\u30bf\u306a\u3093\u3066\u8868\u73fe\u3067\u304d\u306a\u3044\u3093\u3060\u304b\u3089\u3002\n\n\u3060\u304b\u3089\u3001\u307e\u305a\u306f\u30cd\u30b9\u30c8\u968e\u5c64\u306e\u30c7\u30fc\u30bf\u3092\u3069\u30461\u884c\u30c7\u30fc\u30bf\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u304b\u3092\u8003\u3048\u306a\u304d\u3083\u3044\u3051\u306a\u3044\u3002\n`HttpMessageConverter`\u306e\u8a2d\u5b9a\u307e\u3067\u306e\u9053\u306e\u308a\u306f\u9060\u3044\u3002\n\n### CSV\u30de\u30c3\u30d4\u30f3\u30b0\u306e\u30eb\u30fc\u30eb\u5b9a\u7fa9\n\n\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u304c\u8fd4\u3059`List<Item>`\u306e`Item`\u306f\u3053\u3093\u306a\u69cb\u9020\u3002\n\n```java:Item.java\n@Data\n@Builder\npublic class Item {\n  private Long id;\n  private String name;\n  private Category category;\n}\n```\n\n\u30cd\u30b9\u30c8\u968e\u5c64\u306e\u30c7\u30fc\u30bf\u3082\u6301\u3064\u3088\u3046\u306b`Category`\u3092\u5165\u308c\u3066\u3044\u308b\u3002\n\n```java:Category.java\n@Data\n@Builder\npublic class Category {\n  private Integer id;\n  private String name;\n\n  @Nullable\n  private Category parent;\n}\n```\n\n`Category`\u306f\u30cd\u30b9\u30c8\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u3066\u3001\u5e38\u306b\u300c\u89aa\u300d\u30ab\u30c6\u30b4\u30ea\u3092\u77e5\u3063\u3066\u3044\u308b\u72b6\u614b\u3002\n\u89aa\u304c\u3044\u306a\u3051\u308c\u3070\u30c8\u30c3\u30d7\u968e\u5c64\u306e\u30ab\u30c6\u30b4\u30ea\u3068\u3044\u3063\u305f\u5177\u5408\u3002\n\u5b9f\u969b\u3053\u3093\u306a\u69cb\u9020\u306e\u30c7\u30fc\u30bf\u306f\u307e\u3041\u6700\u8fd1\u306f\u898b\u304b\u3051\u306a\u3044\u304c\u3001\u4eca\u56de\u306e\u691c\u8a3c\u7528\u3002\n\n\u3053\u308c\u3092\u3053\u3093\u306a\u5f62\u306eCSV\u306b\u3057\u3088\u3046\u3068\u601d\u3046\u3002\n\n| \u5546\u54c1ID | \u5546\u54c1\u540d | \u5927\u30ab\u30c6\u30b4\u30ea | \u4e2d\u30ab\u30c6\u30b4\u30ea |\n|:------:|:------------:|:----------:|:----------:|\n| 1234 | \u624b\u63d0\u3052\u30d0\u30c3\u30b0 | \u5c0f\u7269 | \u30d0\u30c3\u30b0 |\n\n\u3058\u3083\u3042\u3001\u7406\u60f3\u306e\u5f62\u3092Jackson\u306eMix-In\u3067\u8868\u73fe\u3057\u3066\u307f\u308b\u3002\n\n```java\n@JsonProperty(\"\u5546\u54c1ID\")\nprivate Long id;\n\n@JsonProperty(\"\u5546\u54c1\u540d\")\nprivate String name;\n\n@JsonProperty(\"\u5927\u30ab\u30c6\u30b4\u30ea\")\nprivate String largeCategoryName;\n\n@JsonProperty(\"\u4e2d\u30ab\u30c6\u30b4\u30ea\")\nprivate String middleCategoryName;\n```\n\n\u3067\u3082\u3001\u3053\u306eMix-In\u3092`Item`\u306eMix-In\u3068\u3057\u3066\u767b\u9332\u3057\u3066\u3082`largeCategoryName`\u306a\u3093\u304b\u7121\u3047\u3088\u3063\u3066\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\n\n\u3058\u3083\u3042\u3001`Item`\u3092\u3053\u306e\u7406\u60f3\u306e\u5f62\u306b\u5909\u63db\u3057\u3066\u304b\u3089Jackson\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u3082\u3089\u3048\u308c\u3070\u30a8\u30e9\u30fc\u306b\u306a\u3089\u306a\u3044\u306f\u305a\u3002\n\n\u305d\u3053\u3067\u3001\u81ea\u524d\u306e\u5909\u63db\u30ed\u30b8\u30c3\u30af\u3092`ObjectMapper`\u306b\u8a2d\u5b9a\u3057\u3066\u5909\u63db\u3057\u3066\u307f\u308b\u3002\n\n\u307e\u305a\u306f\u72ec\u81ea\u306e\u5909\u63db\u30eb\u30fc\u30eb\u7528\u306b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u8ffd\u52a0\u3002\n\n```java:ItemFlatMixin.java\n@Data\n@JsonPropertyOrder({ \"\u5546\u54c1ID\", \"\u5546\u54c1\u540d\", \"\u5927\u30ab\u30c6\u30b4\u30ea\", \"\u4e2d\u30ab\u30c6\u30b4\u30ea\" })\n// \u30cd\u30b9\u30c8\u968e\u5c64\u3092\u8868\u73fe\u3067\u304d\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30d5\u30e9\u30c3\u30c8\u306b\u3059\u308b\u305f\u3081\u306e\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\n@JsonFlatMixinFor(Item.class)\npublic class ItemFlatMixin {\n  @JsonProperty(\"\u5546\u54c1ID\")\n  private Long id;\n\n  @JsonProperty(\"\u5546\u54c1\u540d\")\n  private String name;\n\n  @JsonProperty(\"\u5927\u30ab\u30c6\u30b4\u30ea\")\n  // \u30d5\u30e9\u30c3\u30c8\u306b\u3059\u308b\u969b\u306b\u5143\u306e\u578b\u306e\u5024\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306e\u30d1\u30b9\n  @JsonMixinProperty(\"category.parent.name\")\n  private String largeCategoryName;\n\n  @JsonProperty(\"\u4e2d\u30ab\u30c6\u30b4\u30ea\")\n  @JsonMixinProperty(\"category.name\")\n  private String middleCategoryName;\n}\n```\n\nMix-In\u306a\u306e\u306b\u4f55\u3067\u5177\u8c61\u30af\u30e9\u30b9\u306a\u3093\u3060\u3063\u3066\u3044\u3046\u30c4\u30c3\u30b3\u30df\u306f\u3061\u3087\u3063\u3068\u5f85\u3063\u3066\u4e0b\u3055\u3044\u3002\n\n\u6b21\u306f`Serializer`\u3002\n\n```java:FlatSerializer.java\n@RequiredArgsConstructor\npublic class FlatSerializer extends JsonSerializer<Object> {\n\n  private final Class<?> flatType;\n\n  @Override\n  public void serialize(Object value, JsonGenerator gen, SerializerProvider serializers)\n    throws IOException, JsonProcessingException {\n    BeanWrapper targetWrapper = this.wrap(value);\n    BeanWrapper mixinWrapper = this.wrap(BeanUtils.instantiateClass(this.flatType));\n\n    // ItemFlatMixin\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30b0\u30eb\u30c3\u3068\u56de\u3057\u3066\u5bfe\u5fdc\u3059\u308b\u5024\u3092Item\u304b\u3089\u53d6\u5f97\u3057\u3066\u81ea\u8eab\u306b\u30bb\u30c3\u30c8\u3059\u308b\n    ReflectionUtils.doWithFields(this.flatType, field -> {\n      String targetPath = this.targetPath(field);\n      if (targetWrapper.isReadableProperty(targetPath) == false) {\n        return;\n      }\n      if (mixinWrapper.isWritableProperty(field.getName()) == false) {\n        return;\n      }\n      mixinWrapper.setPropertyValue(field.getName(), targetWrapper.getPropertyValue(targetPath));\n    });\n    gen.writeObject(mixinWrapper.getWrappedInstance());\n  }\n\n  private BeanWrapper wrap(Object obj) {\n    BeanWrapper wrapper = PropertyAccessorFactory.forBeanPropertyAccess(obj);\n    // JsonMixinProperty#value\u306e\u5024\u306f\u3053\u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u305f\u3081\u3002\n    wrapper.setAutoGrowNestedPaths(true);\n    return wrapper;\n  }\n\n  private String targetPath(Field field) {\n    JsonMixinProperty property = field.getAnnotation(JsonMixinProperty.class);\n    if (property == null) {\n      return field.getName();\n    }\n    return property.value();\n  }\n\n}\n```\n\n\u3053\u306e`Serializer`\u3092\u3069\u3046\u3059\u308b\u3093\u3060\uff1f`flatType`\u306b\u306f\u3069\u3046\u3084\u3063\u3066\u5024\u3092\u30bb\u30c3\u30c8\u3059\u3093\u3060\uff1f\n\u3067\u3001`SimpleSerializers`\u3092\u4f7f\u3046\u3002\n\n```java:SampleSerializers.java\n@RequiredArgsConstructor\npublic class SampleSerializers extends SimpleSerializers {\n\n  // \u5168\u3066\u306ePOJO\u3068\u30d5\u30e9\u30c3\u30c8\u306a\u578b\u3078\u306e\u5909\u63db\u30de\u30c3\u30d4\u30f3\u30b0\n  private final Map<Class<?>, Class<?>> flatterMap;\n\n  // \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6642\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u3092\u63a2\u3059\u51e6\u7406\u304c\u8d70\u308b\u306e\u3067\u3001\u305d\u306e\u969b\u306b\u5bfe\u8c61\u306e\u578b\u304b\u3089\u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u3092\u52d5\u7684\u751f\u6210\u3059\u308b\n  @Override\n  public JsonSerializer<?> findSerializer(SerializationConfig config, JavaType type, BeanDescription beanDesc) {\n    Class<?> rawClass = type.getRawClass();\n    Class<?> flatClass = this.flatterMap.entrySet().stream()\n      .filter(entry -> entry.getKey().isAssignableFrom(rawClass))\n      .findFirst()\n      .map(Entry::getValue)\n      .orElse(null);\n\n    if (flatClass != null) {\n      return new FlatSerializer(flatClass);\n    }\n\n    return super.findSerializer(config, type, beanDesc);\n  }\n}\n```\n\n\u30b9\u30fc\u30d1\u30fc\u30af\u30e9\u30b9\u306e\u5b9f\u88c5\u306f\u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u306e\u3042\u305f\u308a\u306f\u672c\u5b9f\u88c5\u3059\u308b\u969b\u306f\u3088\u3057\u306a\u306b\u5b9f\u88c5\u3059\u308b\u3002\n\u30ad\u30e3\u30c3\u30b7\u30e5\u306f\u4f7f\u3063\u305f\u65b9\u304c\u826f\u3044\u3002\n\n\u305d\u3057\u3066\u3001\u3053\u306e`SimpleSerializers`\u3092`ObjectMapper`\u306b\u767b\u9332\u3059\u308b\u3002\nCSV\u306e\u5834\u5408\u306f`ObjectMapper`\u3067\u306f\u306a\u304f`CsvMapper`\u3002\n\n```java:Config.java\n@Bean\npublic CsvMapper csvMapper() {\nCsvMapper csvMapper = new CsvMapper();\ncsvMapper.registerModule(new SimpleModule() {\n  @Override\n  public void setupModule(SetupContext context) {\n    context.addSerializers(new SampleSerializers(Config.this.flatterMap()));\n  }\n});\n\nreturn csvMapper;\n}\n\nprivate Map<Class<?>, Class<?>> flatterMap() {\nreturn new Reflections(\"jp.uich.databind.mixin\")\n  .getTypesAnnotatedWith(JsonFlatMixinFor.class)\n  .stream()\n  .collect(Collectors.toMap(\n    type -> type.getAnnotation(JsonFlatMixinFor.class).value(), Function.identity()));\n}\n```\n\n\u3053\u3053\u3067\u4f7f\u3063\u3066\u3044\u308b`Reflections`\u306f`org.reflections`\u306e`reflections`\u3002\nSpringBoot\u306e\u7279\u5b9a\u30d0\u30fc\u30b8\u30e7\u30f3\u4ee5\u4e0a\u306e\u5834\u5408\u3001`Guava`\u3067\u30d1\u30c3\u30b1\u30fc\u30b8\u30b9\u30ad\u30e3\u30f3\u3059\u308b\u3068ExecutableJar\u306b\u3057\u305f\u969b\u306b\u3046\u307e\u304f\u3044\u304d\u307e\u305b\u3093\u3002\n\u3053\u308c\u306f\u672c\u984c\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u7406\u7531\u306f\u5272\u611b\u3057\u307e\u3059\u3002\n\n\u6b21\u306f `HttpMessageConverter` \u306e\u8a2d\u5b9a\u3002\n\n```java:Config.java\n@Bean\npublic MappingJackson2HttpMessageConverter csvConverter() {\n  MappingJackson2HttpMessageConverter csvConverter = new MappingJackson2HttpMessageConverter(this.csvMapper());\n  csvConverter.setSupportedMediaTypes(Collections.singletonList(MediaType.parseMediaType(\"text/csv\")));\n  return csvConverter;\n}\n```\n\n\u3068\u3057\u3066\u7d42\u308f\u308c\u3070\u826f\u3044\u3093\u3060\u3051\u3069\u3001\u305d\u3046\u306f\u3044\u304b\u306a\u3044\u3002\n`CsvSchema` \u306e\u8a2d\u5b9a\u3092\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002\n\u3053\u308c\u3070\u304b\u308a\u306f`CsvMapper`\u5074\u3067\u3069\u3046\u9811\u5f35\u3063\u3066\u3082\u89e3\u6c7a\u3067\u304d\u306a\u3044\u306e\u3067`HttpMessageConverter`\u306b\u624b\u3092\u5165\u308c\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001`AbstractJackson2HttpMessageConverter`\u3092\u7d99\u627f\u3057\u3066\u5b9f\u88c5\u3057\u3066\u307f\u308b\u3002\n\n```java:MappingJackson2CsvHttpMessageConverter.java\n@Override\nprotected void writeInternal(Object object, Type type, HttpOutputMessage outputMessage)\nthrows IOException, HttpMessageNotWritableException {\nCsvMapper csvMapper = (CsvMapper) this.getObjectMapper();\n\n// \u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u6587\u5b57\u30b3\u30fc\u30c9\n// #getJsonEncoding(MediaType)\u306f\u4f7f\u308f\u306a\u3044\u3002Shift_JIS\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u304b\u3089\u3002\nCharset actualCharset = Optional.ofNullable(outputMessage.getHeaders().getContentType())\n  // \u30ec\u30b9\u30dd\u30f3\u30b9\u30d8\u30c3\u30c0\u306b\u6307\u5b9a\u3055\u308c\u3066\u3044\u305f\u3089\u305d\u308c\u3092\u4f7f\u7528\u3059\u308b\n  .map(contentType -> contentType.getCharset())\n  // \u305d\u3046\u3067\u306a\u3051\u308c\u3070\u30c7\u30d5\u30a9\u30eb\u30c8\u306eCharset\n  .orElseGet(this::getDefaultCharset);\n\nJsonGenerator generator = csvMapper.getFactory().createGenerator(\n  new OutputStreamWriter(outputMessage.getBody(), actualCharset));\n\ntry {\n  // CSV\u306e\u30b9\u30ad\u30fc\u30de(1\u884c\u76ee\u306e\u30d8\u30c3\u30c0\u30fc)\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b\u578b\u3092\u7279\u5b9a\u3059\u308b\n  // \u578b \u2192 \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u30eb\u30fc\u30eb\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u578b \u2192 ItemFlatMixin.java\n  ObjectWriter objectWriter = Optional.ofNullable(type)\n    .map(csvMapper::schemaFor)\n    .map(CsvSchema::withHeader)\n    .map(csvMapper::writer)\n    .orElseGet(csvMapper::writer);\n\n  objectWriter.writeValue(generator, object);\n  generator.flush();\n\n} catch (JsonProcessingException ex) {\n  throw new HttpMessageNotWritableException(\"Could not write content: \" + ex.getMessage(), ex);\n}\n```\n\n\u3053\u308c\u3067OK\uff01\u3068\u601d\u3063\u3066\u5b9f\u884c\u3057\u3066\u307f\u305f\u3089\u30a8\u30e9\u30fc\u3002\n\u305d\u3089\u305d\u3046\u3060\u3002\u30b9\u30ad\u30fc\u30de\u3092\u7279\u5b9a\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u578b\u306f`Item`\u3002\n`CsvMapper`\u306f`Item`\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u30eb\u30fc\u30eb\u306b`ItemFlatMixin`\u304c\u4f7f\u308f\u308c\u308b\u3053\u3068\u3092\u77e5\u3089\u306a\u3044\u3002\n\n\u306a\u306e\u3067\u3001Mix-In\u3068\u3057\u3066\u767b\u9332\u3057\u3066\u307f\u308b\u3002\n\n```java:Config.java\n@Bean\nCsvMapper csvMapper() {\nCsvMapper csvMapper = new CsvMapper();\n// \u3053\u308c\u3092\u8ffd\u52a0\ncsvMapper.setMixIns(this.flatterMap());\n\ncsvMapper.registerModule(new SimpleModule() {\n  @Override\n  public void setupModule(SetupContext context) {\n    context.addSerializers(new SampleSerializers(Config.this.flatterMap()));\n  }\n});\n\nreturn csvMapper;\n}\n```\n\n\u3068\u3084\u3063\u3066\u307f\u305f\u304c\u3001\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\n\u307e\u3041\u3001\u3053\u308c\u3082\u305d\u3046\u306a\u3093\u3060\u3088\u3002 `Item`\u3068`ItemFlatMixin`\u306f\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u5185\u5bb9\u304c\u9055\u3046\u304b\u3089`ObjectMapper`\u306f\u30b9\u30ad\u30fc\u30de\u5224\u5b9a\u3059\u308b\u969b\u306b\n\n```\nItem\uff1f -> ItemFlatMixin\u4f7f\u304a\u3046 -> \u3093\uff1f\u4f55\u304b\u30d5\u30a3\u30fc\u30eb\u30c9\u9055\u308f\u306a\u3044\u304b\uff1f -> \u30a8\u30e9\u30fc!!!!\n```\n\n\u3063\u3066\u306a\u308b\u3002\n\u306a\u306e\u3067\u3001\u30b9\u30ad\u30fc\u30de\u306e\u578b\u3092\u7279\u5b9a\u3059\u308b\u3068\u3053\u308d\u306b\u5c11\u3057\u624b\u3092\u52a0\u3048\u3066\u307f\u308b\u3002\n\n```java:MappingJackson2CsvHttpMessageConverter.java\nprivate Class<?> getSchemaType(Type type) {\n  if (type == null) {\n    return null;\n  }\n  JavaType javaType = this.getJavaType(type, null);\n  Class<?> rowClass;\n\n  if (javaType.isCollectionLikeType()) {\n    rowClass = Optional.ofNullable(javaType.getContentType())\n      .map(JavaType::getRawClass)\n      .orElse(null);\n\n    if (rowClass == null) {\n      return javaType.getRawClass();\n    }\n  } else {\n    rowClass = javaType.getRawClass();\n  }\n\n  // Item -> ItemFlatMixin\u306b\u5909\u63db\n  Class<?> classForSchema = this.getObjectMapper().findMixInClassFor(rowClass);\n  if (classForSchema == null) {\n    return rowClass;\n  }\n\n  return classForSchema;\n}\n```\n\n\u3067\u3001\u3055\u3063\u304d\u306e`MappingJackson2CsvHttpMessageConverter`\u306e\u8a72\u5f53\u884c\u3092\u6b21\u306e\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u308b\u3002\n\n```java:MappingJackson2CsvHttpMessageConverter.java\nObjectWriter objectWriter = Optional.ofNullable(this.getSchemaType(type))\n  .map(csvMapper::schemaFor)\n  .map(CsvSchema::withHeader)\n  .map(csvMapper::writer)\n  .orElseGet(csvMapper::writer);\n```\n\n\u3053\u306e`getSchemaType`\u304b\u3089\u8fd4\u308b\u578b\u306f`ItemFlatMixin`\u3068\u306a\u308a\u3001\u3053\u306e\u30af\u30e9\u30b9\u306f\u3053\u306e\u307e\u307e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6642\u306e\u30eb\u30fc\u30eb\u3092\u6301\u3063\u3066\u3044\u308b\u306e\u3067`ObjectMapper`\u306fMix-In\u3092\u63a2\u3055\u305a\u306b\uff08\u63a2\u3059\u3068\u306f\u601d\u3046\u304c\u898b\u3064\u304b\u3089\u306a\u3044\uff09\u305d\u306e\u307e\u307e`ItemFlatMixin`\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u30eb\u30fc\u30eb\u306b\u5247\u308a\u30b9\u30ad\u30fc\u30de\u3092\u51fa\u529b\u3059\u308b\u3002\n\n\u3053\u308c\u3067`MappingJackson2CsvHttpMessageConverter`\u3092Bean\u767b\u9332\u3059\u308c\u3070\u6e96\u5099\u5b8c\u4e86\u3002\n\n```java:Config.java\n@Bean\nMappingJackson2CsvHttpMessageConverter csvConverter() {\n  MappingJackson2CsvHttpMessageConverter converter = new MappingJackson2CsvHttpMessageConverter(this.csvMapper());\n  converter.setSupportedMediaTypes(Collections.singletonList(MediaType.parseMediaType(\"text/csv\")));\n  return converter;\n}\n```\n\n## \u7d50\u679c\u78ba\u8a8d\n\n```bash\n$ curl -i http://localhost:8080/items.csv\nHTTP/1.1 200\nContent-Type: text/csv;charset=UTF-8\n```\n```\n\u5546\u54c1ID,\u5546\u54c1\u540d,\u5927\u30ab\u30c6\u30b4\u30ea,\u4e2d\u30ab\u30c6\u30b4\u30ea\n1234,\u624b\u63d0\u3052\u30d0\u30c3\u30b0,\u30d0\u30c3\u30b0,\u5c0f\u7269\n```\n\nOK\u3002\n\nJSON\u3084Yaml\u3082\u554f\u984c\u306a\u3044\uff1f\n\n```bash\n$ curl -i http://localhost:8080/items.json\nHTTP/1.1 200\nContent-Type: application/json;charset=UTF-8\n```\n```json\n[ {\n  \"id\" : 1234,\n  \"name\" : \"\u624b\u63d0\u3052\u30d0\u30c3\u30b0\",\n  \"category\" : {\n    \"id\" : 345,\n    \"name\" : \"\u5c0f\u7269\",\n    \"parent\" : {\n      \"id\" : 345,\n      \"name\" : \"\u30d0\u30c3\u30b0\",\n      \"parent\" : null\n    }\n  }\n} ]\n```\n```bash\n$ curl -i http://localhost:8080/items.yaml\nHTTP/1.1 200\nContent-Type: application/yaml;charset=UTF-8\n```\n```\n---\n- id: 1234\n  name: \"\u624b\u63d0\u3052\u30d0\u30c3\u30b0\"\n  category:\n    id: 345\n    name: \"\u5c0f\u7269\"\n    parent:\n      id: 345\n      name: \"\u30d0\u30c3\u30b0\"\n      parent: null\n```\n```bash\n$ curl -i http://localhost:8080/items\nHTTP/1.1 200\nContent-Type: text/csv;charset=UTF-8\n```\n```\n\u5546\u54c1ID,\u5546\u54c1\u540d,\u5927\u30ab\u30c6\u30b4\u30ea,\u4e2d\u30ab\u30c6\u30b4\u30ea\n1234,\u624b\u63d0\u3052\u30d0\u30c3\u30b0,\u30d0\u30c3\u30b0,\u5c0f\u7269\n```\n\n\u3042\u3089\uff1f\u30c7\u30d5\u30a9\u30eb\u30c8\u304cCSV\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306fJSON\u306e\u307e\u307e\u306b\u3057\u305f\u3044\u3002\n\n`HttpMessageConverter`\u306b`@Order`\u3067\u8abf\u6574\u3057\u3066\u307f\u305f\u3051\u3069\u30c0\u30e1\u3060\u3063\u305f\u3002\n\u3067\u7d50\u5c40\u89e3\u6c7a\u3057\u305f\u306e\u306f\u3053\u308c\u2193\n\n```java:Config.java\n@Bean\nHttpMessageConverters converters() {\n  return new HttpMessageConverters(false, Arrays.asList(\n    this.jsonConverter(),\n    this.yamlConverter(),\n    this.csvConverter()));\n}\n```\n\n# \u307e\u3068\u3081\n\n- \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u51e6\u7406\u306fJackson\u3067\u4e00\u672c\u5316\u53ef\u80fd\n- \u4eca\u56de\u306e\u691c\u8a3c\u3067\u306eMixin\u306e\u4f7f\u3044\u65b9\u306f\u6c17\u6301\u3061\u60aa\u3044\u3002\u30d5\u30e9\u30c3\u30c8\u306b\u3059\u308b\u65b9\u3068Jackson\u3067\u4f7f\u7528\u3059\u308bMix-In\u306f\u5206\u3051\u305f\u65b9\u304c\u826f\u3044\u304b\u3082\n\n\u4eca\u56de\u306e\u30b3\u30fc\u30c9\u3082[GitHub](https://github.com/uich/demo-jackson-csv-web)\u306b\u30a2\u30c3\u30d7\u3057\u3066\u307e\u3059\u3002\nCSV\u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u969b\u306b\u6587\u5b57\u30b3\u30fc\u30c9\u3092`Shift_JIS`\u306b\u5909\u66f4\u3059\u308b\u51e6\u7406\u3082\u5165\u308c\u3066\u3044\u305f\u308a\u3057\u307e\u3059\u306e\u3067\u8208\u5473\u306e\u3042\u308b\u65b9\u306f\u3069\u3046\u305e\u3002\n", "tags": ["spring-mvc4.3.6", "spring-boot1.5.1", "Jackson2.8.6", "spring"]}