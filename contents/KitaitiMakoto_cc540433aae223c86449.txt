{"context": " More than 1 year has passed since last update.\u4eca\u66f4\u611f\u304c\u5f37\u3044\u3067\u3059\u304c\u5b9f\u969b\u30ed\u30b0\u3092LTSV\u306b\u3059\u308b\u3068\u6271\u3044\u3084\u3059\u3044\u5834\u9762\u306b\u6700\u8fd1\u906d\u9047\u3057\u305f\u306e\u3067\u3002\n\nltsv_formatter.rb\nrequire 'logger'\n\nclass Logger\n  class FreeFormatter < Formatter\n    Format = \"%{label}, [%{time}#%{pid}] %<severity>5s -- %{progname}: %{message}\\n\"\n\n    attr_accessor :format\n\n    def initialize(format=self.class::Format)\n      @format = format || Format\n      super()\n    end\n\n    def call(severity, time, progname, msg)\n      @format % {\n        :label => severity[0..0],\n        :time => format_datetime(time),\n        :pid => $$,\n        :severity => severity,\n        :progname => progname,\n        :message => msg2str(msg)\n      }\n    end\n  end\n\n  class LTSVFormatter < FreeFormatter\n    Format = %w[severity time progname pid message].map {|field|\n      \"#{field}:%{#{field}}\"\n    }.join(\"\\t\") + \"\\n\"\n\n    private\n\n    def format_datetime(time)\n      if @datetime_format.nil?\n        time.strftime(\"%Y-%m-%dT%H:%M:%S.\") << \"%06d\" % time.usec\n      else\n        super\n      end\n    end\n  end\nend\n\nif __FILE__ == $0\n  logger = Logger.new($stderr)\n  logger.formatter = Logger::FreeFormatter.new\n  logger.debug 'hello'\n  logger.info 'world'\n  logger.formatter = Logger::LTSVFormatter.new\n  logger.warn 'hi'\n  logger.error 'again'\nend\n\n\n\nltsv_logger.ru\nclass LTSVLogger < Rack::CommonLogger\n  FORMAT = %w[host user time method path query version status size].map {|field| \"#{field}:%{#{field}}\"}.join(\"\\t\") + \"\\truntime:%<runtime>0.4f\\n\"\n\n  def log(env, status, header, began_at)\n    now = Time.now\n    length = extract_content_length(header)\n\n    logger = @logger || env['rack.errors']\n    logger.write FORMAT % {\n      host:    env['HTTP_X_FORWARDED_FOR'] || env[\"REMOTE_ADDR\"] || \"-\",\n      user:    env[\"REMOTE_USER\"] || \"-\",\n      time:    now.strftime(\"%d/%b/%Y %H:%M:%S\"),\n      method:  env[\"REQUEST_METHOD\"],\n      path:    env[\"PATH_INFO\"],\n      query:   env[\"QUERY_STRING\"].empty? ? \"\" : \"?\"+env[\"QUERY_STRING\"],\n      version: env[\"HTTP_VERSION\"],\n      status:  status.to_s[0..3],\n      size:    length,\n      runtime: now - began_at }\n  end\nend\n\nuse LTSVLogger\nrun lambda {|env|\n  [200, {'Content-Type' => 'text/plain'}, ['Hello, LTSV']]\n}\n\n\n\u4eca\u66f4\u611f\u304c\u5f37\u3044\u3067\u3059\u304c\u5b9f\u969b\u30ed\u30b0\u3092LTSV\u306b\u3059\u308b\u3068\u6271\u3044\u3084\u3059\u3044\u5834\u9762\u306b\u6700\u8fd1\u906d\u9047\u3057\u305f\u306e\u3067\u3002\n\n```ruby:ltsv_formatter.rb\nrequire 'logger'\n\nclass Logger\n  class FreeFormatter < Formatter\n    Format = \"%{label}, [%{time}#%{pid}] %<severity>5s -- %{progname}: %{message}\\n\"\n\n    attr_accessor :format\n\n    def initialize(format=self.class::Format)\n      @format = format || Format\n      super()\n    end\n\n    def call(severity, time, progname, msg)\n      @format % {\n        :label => severity[0..0],\n        :time => format_datetime(time),\n        :pid => $$,\n        :severity => severity,\n        :progname => progname,\n        :message => msg2str(msg)\n      }\n    end\n  end\n\n  class LTSVFormatter < FreeFormatter\n    Format = %w[severity time progname pid message].map {|field|\n      \"#{field}:%{#{field}}\"\n    }.join(\"\\t\") + \"\\n\"\n\n    private\n\n    def format_datetime(time)\n      if @datetime_format.nil?\n        time.strftime(\"%Y-%m-%dT%H:%M:%S.\") << \"%06d\" % time.usec\n      else\n        super\n      end\n    end\n  end\nend\n\nif __FILE__ == $0\n  logger = Logger.new($stderr)\n  logger.formatter = Logger::FreeFormatter.new\n  logger.debug 'hello'\n  logger.info 'world'\n  logger.formatter = Logger::LTSVFormatter.new\n  logger.warn 'hi'\n  logger.error 'again'\nend\n```\n\n```ruby:ltsv_logger.ru\nclass LTSVLogger < Rack::CommonLogger\n  FORMAT = %w[host user time method path query version status size].map {|field| \"#{field}:%{#{field}}\"}.join(\"\\t\") + \"\\truntime:%<runtime>0.4f\\n\"\n\n  def log(env, status, header, began_at)\n    now = Time.now\n    length = extract_content_length(header)\n\n    logger = @logger || env['rack.errors']\n    logger.write FORMAT % {\n      host:    env['HTTP_X_FORWARDED_FOR'] || env[\"REMOTE_ADDR\"] || \"-\",\n      user:    env[\"REMOTE_USER\"] || \"-\",\n      time:    now.strftime(\"%d/%b/%Y %H:%M:%S\"),\n      method:  env[\"REQUEST_METHOD\"],\n      path:    env[\"PATH_INFO\"],\n      query:   env[\"QUERY_STRING\"].empty? ? \"\" : \"?\"+env[\"QUERY_STRING\"],\n      version: env[\"HTTP_VERSION\"],\n      status:  status.to_s[0..3],\n      size:    length,\n      runtime: now - began_at }\n  end\nend\n\nuse LTSVLogger\nrun lambda {|env|\n  [200, {'Content-Type' => 'text/plain'}, ['Hello, LTSV']]\n}\n```", "tags": ["Ruby", "LTSV"]}