{"context": "\n\n\u3053\u306e\u8a18\u4e8b\u306b\u3064\u3044\u3066\n\u3053\u306e\u8a18\u4e8b\u306fRust\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u6574\u5f62\u3059\u308brustfmt\u306e\u5404\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066\u306e\u89e3\u8aac\u8a18\u4e8b\u3067\u3059\u3001rustfmt\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3068\u5b9f\u969b\u306b\u52d5\u4f5c\u3055\u305b\u306a\u304c\u3089\u306e\u8abf\u67fb\u306e\u70ba\u3001\u89e3\u8aac\u306b\u898b\u843d\u3068\u3057\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u4e8b\u3092\u3054\u4e86\u627f\u4e0b\u3055\u3044\u3002\n\u8abf\u67fb\u6642\u306eRust\u3068rustfmt\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\nRust(rustc 1.8.0)\nrustfmt 0.4.1\n\n\nconfig options\u65e9\u898b\u8868\nconfig\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304f\u3053\u3068\u304c\u51fa\u6765\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066\u3067\u3059\u3001config\u30d5\u30a1\u30a4\u30eb\u306f--config-path\u3067\u6307\u5b9a\u3082\u51fa\u6765\u307e\u3059\u304c\u3001\u7701\u7565\u6642\u306f\u5bfe\u8c61\u30bd\u30fc\u30b9\u3068\u540c\u30d1\u30b9\u306b\u3042\u308brustfmt.toml\u304c\u4f7f\u308f\u308c\u307e\u3059\u3002\n\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u4e00\u89a7\u306f--config-help\u6307\u5b9a\u3067\u78ba\u8a8d\u51fa\u6765\u307e\u3059\u3002\n\u307e\u305f\u3001\u4e00\u90e8rustfmt\u306b\u76f4\u63a5\u6307\u5b9a\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u88ab\u3063\u3066\u3044\u307e\u3059\u304c\u3001--verbose\u3068--skip-children\u306f\u76f4\u63a5\u6307\u5b9a\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3078\u3001config\u30d5\u30a1\u30a4\u30eb\u306b\u8a18\u8f09\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u6a19\u6e96\u5165\u529b\u304b\u3089\u6e21\u3055\u308c\u305f\u30bd\u30fc\u30b9\u6587\u5b57\u5217\u306b\u6a5f\u80fd\u3059\u308b\u306e\u3092\u78ba\u8a8d\u51fa\u6765\u307e\u3057\u305f\u3002\n(\u4f8b\u3048\u3070\u3001hoge.rs\u3092\u5bfe\u8c61\u306b\u3001\u4ed6\u306eimport\u3055\u308c\u305f\u30bd\u30fc\u30b9\u3092\u9664\u5916\u3057\u305f\u3044\u5834\u5408\u306f\u3001\n$ rustfmt hoge.rs --skip-children\n\n\u3068\u76f4\u63a5\u6307\u5b9a\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u5229\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059)\n\n\n\noption\u540d\n\u8a2d\u5b9a\u5024\n\u539f\u6587\n\u8abf\u67fb\u7d50\u679c\n\n\n\n\nverbose\n<boolean>Default: false\nUse verbose output\n\n\u6a19\u6e96\u5165\u529b\u304b\u3089\u30b3\u30fc\u30c9\u3092\u6e21\u3057\u305f\u6642\u306e\u307f\u78ba\u8a8d\u3001\u9032\u6357\u3092\u8868\u793aex)Formatting stdin\n\n\nskip_children\n<boolean>Default: false\nDon't reformat out of line modules\n\n\u6a19\u6e96\u5165\u529b\u304b\u3089\u30b3\u30fc\u30c9\u3092\u6e21\u3057\u305f\u6642\u306e\u307f\u78ba\u8a8d\u3001\u4ed6\u306eimport\u3057\u305f\u30bd\u30fc\u30b9\u306e\u6574\u5f62\u3092skip\u3059\u308b\n\n\nmax_width\n<unsigned integer>Default: 100\nMaximum width of each line\n\u6700\u5927\u5e45\u3001\u884c\u306e\u30b3\u30fc\u30c9\u5e45\u3092\u3053\u306e\u5e45\u4ee5\u5185\u306b\u53ce\u3081\u3088\u3046\u3068\u3059\u308b\n\n\nideal_width\n<unsigned integer>Default: 80\nIdeal width of each line\n\u7406\u60f3\u7684\u306a\u5e45\u3001\u305f\u3060\u3001\u3053\u306e\u8a2d\u5b9a\u306e\u5177\u4f53\u7684\u306a\u52d5\u4f5c\u3092\u78ba\u8a8d\u51fa\u6765\u307e\u305b\u3093\u3067\u3057\u305f\u3001\u3053\u306eissue\u306b\u3088\u308b\u3068ideal_width\u306f\u30b3\u30e1\u30f3\u30c8\u30fb\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u306b\u6a5f\u80fd\u3059\u308b\u304c\u3001\u554f\u984c\u304c\u5224\u660e\u3057\u3001\u8a2d\u5b9a\u3092\u653e\u68c4\u3057\u305f\u3068\u306e\u3053\u3068\u3067\u3059\n\n\n\ntab_spaces\n<unsigned integer>Default: 4\nNumber of spaces per tab\n\u30a4\u30f3\u30c7\u30f3\u30c8\u306e\u30b9\u30da\u30fc\u30b9\u6570\n\n\nfn_call_width\n<unsigned integer>Default: 60\nMaximum width of the args of a function call before falling back to vertical formatting\n\u95a2\u6570\u306e\u5f15\u6570\u5e45\u3001\u3053\u308c\u3088\u308a\u5927\u304d\u3044\u3068\u7e26\u306b\u4e26\u3079\u308b\n\n\nstruct_lit_width\n<unsigned integer>Default: 16\nMaximum width in the body of a struct lit before falling back to vertical formatting\nstruct\u306e\u30ea\u30c6\u30e9\u30eb\u5e45\u3001\u3053\u308c\u3088\u308a\u5927\u304d\u3044\u3068\u7e26\u306b\u4e26\u3079\u308b\n\n\nnewline_style\n[Windows|Unix|Native] Default: Unix\nUnix or Windows line endings\n\u6539\u884c\u30b3\u30fc\u30c9\u3002Windows:CRLF\u3001Unix:LF\u3001Native:OS\u306b\u3088\u308a\u81ea\u52d5\u5224\u5b9a\n\n\nfn_brace_style\n[AlwaysNextLine|PreferSameLine|SameLineWhere] Default: SameLineWhere\nBrace style for functions\n\u95a2\u6570\u306e\u30d6\u30e9\u30b1\u30c3\u30c8\u306e\u4f4d\u7f6e\u3002AlwaysNextLine: \u6539\u884c\u3092\u5e38\u306b\u631f\u3080\u3001PreferSameLine: \u5e38\u306b\u540c\u3058\u884c\u3001SameLineWhere:\u5834\u5408\u306b\u3088\u308a\u6539\u884c\u3092\u631f\u3080(\u4f8b\u3048\u3070\u3001template\u4f7f\u7528\u6642\u306b\u898f\u7a0b\u3092\u66f8\u3044\u305f\u5834\u5408\u306f\u6539\u884c\u3055\u308c\u308b)\n\n\nitem_brace_style\n[AlwaysNextLine|PreferSameLine|SameLineWhere] Default: SameLineWhere\nBrace style for structs and enums\nfn_brace_style\u306estructs\u30fbenums\u7248\n\n\nimpl_empty_single_line\n<boolean>Default: true\nPut empty-body implementations on a single line\nimpl\u306e\u5b9f\u88c5\u304c\u7a7a\u306e\u6642\u3001\u4e00\u884c\u306b\u3059\u308b\n\n\nfn_empty_single_line\n<boolean>Default: true\nPut empty-body functions on a single line\n\u95a2\u6570\u306e\u5b9f\u88c5\u304c\u7a7a\u306e\u6642\u3001\u4e00\u884c\u306b\u3059\u308bfn_brace_style\u3092AlwaysNextLine\u306b\u3059\u308b\u3068\u3001\u305d\u3061\u3089\u304c\u512a\u5148\u3055\u308c\u308b\n\n\n\nfn_single_line\n<boolean>Default: false\nPut single-expression functions on a single line\n\u4e00\u884c\u51e6\u7406\u306e\u95a2\u6570\u3092\u4e00\u884c\u306b\u3059\u308b\n\n\nfn_return_indent\n[WithArgs|WithWhereClause] Default: WithArgs\nLocation of return type in function declaration\n\u95a2\u6570\u306e\u623b\u308a\u5024\u306e\u578b\u306e\u30a4\u30f3\u30c7\u30f3\u30c8\u4f4d\u7f6e\u3002WithArgs: \u5f15\u6570\u3068\u540c\u3058\u4f4d\u7f6e\u3001WithWhereClause: where\u53e5\u3068\u540c\u3058\u4f4d\u7f6e\u623b\u308a\u5024\u306e\u578b\u304c\u6539\u884c\u3055\u308c\u308b\u72b6\u6cc1\u306b\u306a\u3089\u306a\u3044\u3068\u52b9\u679c\u3092\u767a\u63ee\u3057\u306a\u3044(max_width < \u95a2\u6570\u5b9a\u7fa9\u306e\u6587\u5b57\u6570\u306e\u6642\u306a\u3069)\n\n\n\nfn_args_paren_newline\n<boolean>Default: true\nIf function argument parenthesis goes on a newline\n\u95a2\u6570\u306e\u9577\u3055\u304cmax_width\u3088\u308a\u77ed\u3044\u6642\u3001\u5f15\u6570\u90e8\u5206\u304c\u6539\u884c\u3055\u308c\u308b\u304c\u3001\u305d\u306e\u6642\u306b\u59cb\u307e\u308a\u306e\u62ec\u5f27\u3082\u6539\u884c\u3059\u308b\u304b\n\n\nfn_args_density\n[Compressed|Tall|CompressedIfEmpty|Vertical] Default: Tall\nArgument density in functions\n\u95a2\u6570\u306e\u5f15\u6570\u306e\u5bc6\u5ea6\u3002Compressed: \u51fa\u6765\u308b\u3060\u3051max_width\u4ee5\u5185\u306b\u8a70\u3081\u8fbc\u3080\u3001 Tall: \u5341\u5206\u306amax_width\u304c\u3042\u308b\u306a\u3089\u4e00\u884c\u3067\u3001\u8db3\u308a\u306a\u3044\u306a\u3089\u8907\u6570\u884c\u306b\u3059\u308b\u3001CompressedIfEmpty: Tall\u3068\u540c\u3058\u3001Vertical: \u5e38\u306b\u8907\u6570\u884c\u306b\u3059\u308b\n\n\nfn_args_layout\n[Visual|Block|BlockAlways] Default: Visual\nLayout of function arguments\n\u95a2\u6570\u306e\u5f15\u6570\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3002Visual: max_width\u304c\u8db3\u308a\u306a\u3044\u6642\u3001\u5404\u5f15\u6570\u30fb\u623b\u308a\u5024\u306e\u578b\u306e\u6539\u884c\u6642\u306eindent\u3092\u4e26\u3079\u308b Block: max_width\u304c\u8db3\u308a\u306a\u3044\u6642\u3001Block\u30ec\u30a4\u30a2\u30a6\u30c8\u3078\u3001BlockAlways: \u5e38\u306bBlockBlock\u306e\u6642\u306ffn_return_indent\u306f\u7121\u8996\u3055\u308c\u308b\n\n\n\nfn_arg_indent\n[Inherit|Tabbed|Visual] Default: Visual\nIndent on function arguments\n\u95a2\u6570\u306e\u5f15\u6570\u306eindent\u3002Inherit: \u4e8c\u3064\u76ee\u4ee5\u964d\u3092\u95a2\u6570\u5b9a\u7fa9\u3068\u540c\u3058indent\u3078\u3001Tabbed: \u4e8c\u3064\u76ee\u4ee5\u964d\u3092\u95a2\u6570\u5b9a\u7fa9\u304b\u3089indent\u3001Visual: \u4e8c\u3064\u76ee\u4ee5\u964d\u3092\u4e00\u3064\u76ee\u3068\u540c\u3058indent\u3078fn_args_layout\u3092Block\u306b\u3057\u3066\u308b\u3068\u3001Tabbed\u306e\u52b9\u679c\u304c\u306a\u3044(Visual\u3068\u540c\u3058)\n\n\n\ntype_punctuation_density\n[Compressed|Wide] Default: Wide\nDetermines if '+' or '=' are wrapped in spaces in the punctuation of types\nstruct\u30fbenum\u7b49\u3078\u306eGenerics\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u578b\u3084builtin trait\u6307\u5b9a\u6642\u306e\u300c=\u300d\u3084\u300c+\u300d\u306e\u7a7a\u767d\u306b\u3064\u3044\u3066\u3002Compressed: \u7a7a\u767d\u306a\u3057\u3001Wide: \u7a7a\u767d\u3042\u308a\n\n\nwhere_density\n[Compressed|Tall|CompressedIfEmpty|Vertical] Default: CompressedIfEmpty\nDensity of a where clause\nfn_args_density\u306ewhere\u53e5\u7248\u3001\u305f\u3060\u3057\u6319\u52d5\u304c\u9055\u3046\u3002Compressed: max_width\u30fbideal_width\u4ee5\u5185\u306b\u53ce\u307e\u308b\u306a\u3089\u4e00\u884c\u3067\u3001\u8db3\u308a\u306a\u3044\u306a\u3089\u6539\u884c\u3001CompressedIfEmpty: Compressed\u306b\u52a0\u3048\u3001\u95a2\u6570\u306e\u5b9f\u88c5\u304c\u306a\u3044\u306a\u3089\u4e00\u884c\u3067\u3001\u3042\u308b\u306a\u3089\u6539\u884c\u3001Tall: Vertical\u3068\u540c\u3058\u3002Vertical: \u5e38\u306b\u6539\u884c\n\n\nwhere_indent\n[Inherit|Tabbed|Visual] Default: Tabbed\nIndentation of a where clause\nwhere\u53e5\u306eindent\u3002Inherit: \u95a2\u6570\u5b9a\u7fa9\u3068\u540c\u3058indent\u3078\u3001Tabbed: Visual\u3068\u540c\u3058\u3001 Visual: indent\u3059\u308bwhere_density\u304cCompressed\u3067\u6539\u884c\u3055\u308c\u3066\u3044\u306a\u3044\u6642\u306f\u52b9\u679c\u304c\u306a\u3044\n\n\n\nwhere_layout\n[Vertical|Horizontal|HorizontalVertical|Mixed] Default: Vertical\nElement layout inside a where clause\nwhere\u53e5\u3067\u30ab\u30f3\u30de\u533a\u5207\u308a\u3067\u8907\u6570\u6307\u5b9a\u3057\u305f\u969b\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3002Vertical: \u5e38\u306b\u6539\u884c\u3059\u308b\u3001HorizontalVertical: \u5341\u5206\u306amax_width\u304c\u3042\u308b\u306a\u3089\u4e00\u884c\u3067\u3001\u8db3\u308a\u306a\u3044\u306a\u3089\u8907\u6570\u884c\u306b\u3059\u308b\u3001Mixed: \u51fa\u6765\u308b\u3060\u3051max_width\u4ee5\u5185\u306b\u8a70\u3081\u8fbc\u3080\u3001Horizontal: \u5e38\u306b\u4e00\u884c\u3067\n\n\nwhere_pred_indent\n[Inherit|Tabbed|Visual] Default: Visual\nIndentation style of a where predicate\nwhere\u53e5\u306e\u4e8c\u3064\u76ee\u4ee5\u964d\u306eindent\u3002Inherit: where\u53e5\u3068\u540c\u3058indent\u3078\u3001Tabbed: indent\u3001Visual: \u4e00\u3064\u76ee\u3068\u540c\u3058indent\u3078\n\n\nwhere_trailing_comma\n<boolean>Default: false\nPut a trailing comma on where clauses\nwhere\u53e5\u306e\u6700\u5f8c\u306e\u30ab\u30f3\u30de\u3092\u4ed8\u3051\u308b\u304b\n\n\ngenerics_indent\n[Inherit|Tabbed|Visual] Default: Visual\nIndentation of generics\n\u305d\u306e\u4ed6(where\u53e5\u3084\u95a2\u6570\u306e\u5f15\u6570\u4ee5\u5916\u3001struct\u3084trait\u306etype parameter\u7b49)\u306eindent\u3002Inherit: \u5b9a\u7fa9\u3068\u540c\u3058indent\u3001Tabbed: indent, Visual: \u4e00\u3064\u76ee\u3068\u540c\u3058indent\u3078\n\n\nstruct_trailing_comma\n[Always|Never|Vertical] Default: Vertical\nIf there is a trailing comma on structs\nstruct\u5b9a\u7fa9\u306e\u6700\u5f8c\u306e\u30ab\u30f3\u30de\u3002Always: \u5e38\u306b\u4ed8\u3051\u308b\u3001Never: \u5e38\u306b\u4ed8\u3051\u306a\u3044\u3001Vertical: \u4e0d\u660e\u3001struct\u306e\u5b9a\u7fa9\u3092Horizontal\u306b\u4e26\u3079\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u7121\u3044\u70ba\u3001Always\u3068\u540c\u3058\u3067\u3042\u3063\u305f\n\n\n\nstruct_lit_trailing_comma\n[Always|Never|Vertical] Default: Vertical\nIf there is a trailing comma on literal structs\nstruct\u30ea\u30c6\u30e9\u30eb\u306e\u6700\u5f8c\u306e\u30ab\u30f3\u30de\u3002Always: \u5e38\u306b\u4ed8\u3051\u308b\u3001Never: \u5e38\u306b\u4ed8\u3051\u306a\u3044\u3001Vertical: \u5404\u30ea\u30c6\u30e9\u30eb\u3092\u6539\u884c\u3059\u308b\u6642\u306b\u4ed8\u3051\u308b\n\n\nstruct_lit_style\n[Visual|Block] Default: Block\nStyle of struct definition\nstruct\u30ea\u30c6\u30e9\u30eb\u306e\u30b9\u30bf\u30a4\u30eb\u3002Visual: struct_lit_width\u5e45\u304c\u8db3\u308a\u306a\u3044\u6642\u3001\u5404\u30ea\u30c6\u30e9\u30eb\u306e\u6539\u884c\u6642\u306eindent\u3092\u4e26\u3079\u308b\u3001Block: struct_lit_width\u5e45\u304c\u8db3\u308a\u306a\u3044\u6642\u3001Block\u30b9\u30bf\u30a4\u30eb\u3078\n\n\nstruct_lit_multiline_style\n[PreferSingle|ForceMulti] Default: PreferSingle\nMultiline style on literal structs\nstruct\u30ea\u30c6\u30e9\u30eb\u306e\u8907\u6570\u884c\u30b9\u30bf\u30a4\u30eb\u3002PreferSingle: \u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u4e00\u3064\u304b\u3001\u30ea\u30c6\u30e9\u30eb\u304cstruct_lit_width\u5e45\u4ee5\u5185\u306a\u3089\u4e00\u884c\u3067\u3001\u8db3\u308a\u306a\u3044\u306a\u3089\u8907\u6570\u884c\u306b\u3059\u308b\u3001ForceMulti: \u5e38\u306b\u8907\u6570\u884c\u30b9\u30bf\u30a4\u30eb\n\n\nenum_trailing_comma\n<boolean>Default: true\nPut a trailing comma on enum declarations\nenum\u53e5\u306e\u6700\u5f8c\u306e\u30ab\u30f3\u30de\u3092\u4ed8\u3051\u308b\u304b\n\n\nreport_todo\n[Always|Unnumbered|Never] Default: Never\nReport all, none or unnumbered occurrences of TODO in source file comments\n\u30bd\u30fc\u30b9\u4e2d\u306eTODO\u30b3\u30e1\u30f3\u30c8\u4e00\u89a7\u3092\u8868\u793a\u3059\u308b\u3002Always: \u3059\u3079\u3066\u3001Unnumbered: issue\u756a\u53f7\u304c\u632f\u3089\u308c\u3066\u3044\u306a\u3044\u3082\u306e\u3060\u3051\u3001Never: \u7121\u8996\u3059\u308b\n\n\nreport_fixme\n[Always|Unnumbered|Never] Default: Never\nReport all, none or unnumbered occurrences of FIXME in source file comments\n\u30bd\u30fc\u30b9\u4e2d\u306eFIXME\u30b3\u30e1\u30f3\u30c8\u4e00\u89a7\u3092\u8868\u793a\u3059\u308b\u3002Always: \u3059\u3079\u3066\u3001Unnumbered: issue\u756a\u53f7\u304c\u632f\u3089\u308c\u3066\u3044\u306a\u3044\u3082\u306e\u3060\u3051\u3001Nerver: \u7121\u8996\u3059\u308b\n\n\nchain_base_indent\n[Inherit|Tabbed|Visual] Default: Visual\nIndent on chain base\n\u30e1\u30bd\u30c3\u30c9\u3084\u30d5\u30a3\u30fc\u30eb\u30c9\u30fbstruct\u30ea\u30c6\u30e9\u30eb\u30c1\u30a7\u30fc\u30f3\u306e\u6700\u521d\u306eindent\u3002Inherit: \u5b9a\u7fa9\u958b\u59cb\u884c\u306b\u5408\u308f\u305b\u305findent\u3001Tabbed: \u4e00\u6bb5indent\u3001Visual: \u30e1\u30bd\u30c3\u30c9\u3084\u30d5\u30a3\u30fc\u30eb\u30c9\u30fbstruct\u30ea\u30c6\u30e9\u30eb\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u5408\u308f\u305b\u305findent\n\n\nchain_indent\n[Inherit|Tabbed|Visual] Default: Visual\nIndentation of chain\n\u30e1\u30bd\u30c3\u30c9\u3084\u30d5\u30a3\u30fc\u30eb\u30c9\u30fbstruct\u30ea\u30c6\u30e9\u30eb\u30c1\u30a7\u30fc\u30f3\u306e\u4e8c\u3064\u76ee\u4ee5\u964d\u306eindent\u3002Inherit: \u5b9a\u7fa9\u958b\u59cb\u884c\u306b\u5408\u308f\u305b\u305findent\u3001Tabbed: \u4e00\u6bb5indent\u3001Visual: \u30e1\u30bd\u30c3\u30c9\u3084\u30d5\u30a3\u30fc\u30eb\u30c9\u30fbstruct\u30ea\u30c6\u30e9\u30eb\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u5408\u308f\u305b\u305findent\n\n\nreorder_imports\n<boolean>Default: false\nReorder import statements alphabetically\nuse {YYY, XXX};\u306e\u9806\u756a\u3092\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u9806\u306b\u3059\u308b\u304b\u3001\u5927\u6587\u5b57\u304c\u512a\u5148\n\n\nsingle_line_if_else\n<boolean>Default: false\nPut else on same line as closing brace for if statements\nreturn\u5f0f\u3060\u3051\u304c\u66f8\u304b\u308c\u305fif - else\u3092\u4e00\u884c\u306b\u307e\u3068\u3081\u308b\u304b\n\n\nformat_strings\n<boolean>Default: true\nFormat string literals where necessary\nmax_width\u5e45\u304c\u8db3\u308a\u306a\u3044\u6642\u3001string\u30ea\u30c6\u30e9\u30eb\u3092\u6574\u5f62\u3059\u308b\n\n\nforce_format_strings\n<boolean>Default: false\nAlways format string literals\nstring\u30ea\u30c6\u30e9\u30eb\u3092\u6574\u5f62\u3059\u308b\n\n\nchains_overflow_last\n<boolean>Default: true\nAllow last call in method chain to break the line\n\u958b\u59cb\u3068\u7d42\u4e86\u306eindent\u304c\u5408\u308f\u306a\u3044\u3088\u3046\u306a\u30c1\u30a7\u30fc\u30f3\u6574\u5f62\u3092\u3059\u308b\u304b\n\n\ntake_source_hints\n<boolean>Default: true\nRetain some formatting characteristics from the source code\n\u30b3\u30fc\u30c9\u306e\u66f8\u304d\u65b9\u306b\u5408\u308f\u305b\u305f\u878d\u901a\u306e\u5229\u304f\u6574\u5f62\u3092\u3059\u308b\u304b\n\n\nhard_tabs\n<boolean>Default: false\nUse tab characters for indentation, spaces for alignment\nindent\u306b\u30bf\u30d6\u3092\u4f7f\u3046\u304b\n\n\nwrap_comments\n<boolean>Default: false\nBreak comments to fit on the line\n\u30b3\u30e1\u30f3\u30c8\u3092max_width\u30fbideal_width\u5e45\u4ee5\u5185\u306b\u53ce\u3081\u308b\u304b\n\n\nnormalise_comments\n<boolean>Default: true\nConvert /* */ comments to // comments where possible\n/* */\u30b3\u30e1\u30f3\u30c8\u3092//\u30b3\u30e1\u30f3\u30c8\u306b\u3059\u308b\u304b\n\n\nwrap_match_arms\n<boolean>Default: true\nWrap multiline match arms in blocks\nmatch\u53e5\u3067\u4e00\u884c\u5f0f\u306e\u6642\u306b\u5197\u9577\u306ablocks\u3092\u53d6\u308a\u9664\u304f\u304b\n\n\nmatch_block_trailing_comma\n<boolean>Default: false\nPut a trailing comma after a block based match arm (non-block arms are not affected)\nmatch\u53e5\u3067block\u306b\u5e38\u306b\u30ab\u30f3\u30de\u3092\u4ed8\u3051\u308b\u304b\n\n\nmatch_wildcard_trailing_comma\n<boolean>Default: true\nPut a trailing comma after a wildcard arm\nmatch\u53e5\u3067wildcard\u6307\u5b9a(_)\u306b\u5e38\u306b\u30ab\u30f3\u30de\u3092\u4ed8\u3051\u308b\u304b\n\n\nwrite_mode\n[Replace|Overwrite|Display|Diff|Coverage|Plain|Checkstyle] Default: Replace\nWhat Write Mode to use when none is supplied: Replace, Overwrite, Display, Diff, Coverage\n\u7d50\u679c\u3092\u3069\u3046\u3059\u308b\u304b\u3002Replace: \u30bd\u30fc\u30b9\u3092\u7f6e\u304d\u63db\u3048\u308b\u3001\u53e4\u3044\u30bd\u30fc\u30b9\u306f.bk\u3068\u4ed8\u3051\u3066\u9000\u907f\u3055\u308c\u308b\u3001Overwrite: \u30bd\u30fc\u30b9\u3092\u7f6e\u304d\u63db\u3048\u308b\u3001Display: \u7d50\u679c\u306b\u5404\u5bfe\u8c61\u30bd\u30fc\u30b9\u540d\u3084report_todo\u30fbreport_fixme\u7d50\u679c\u3092\u4ed8\u4e0e\u3057\u3066\u6a19\u6e96\u51fa\u529b\u3078\u51fa\u529b\u3059\u308b\u3001Diff: \u7d50\u679c\u306e\u5dee\u5206\u3092\u6a19\u6e96\u51fa\u529b\u3078\u51fa\u529b\u3059\u308b\u3001Plain: \u7d50\u679c\u3092\u305d\u306e\u307e\u307e\u6a19\u6e96\u51fa\u529b\u3078\u51fa\u529b\u3059\u308b\u3001Coverage: \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30b3\u30e1\u30f3\u30c8\u3092\u6b8b\u3057\u3001\u901a\u5e38\u30b3\u30e1\u30f3\u30c8\u3084println!\u7b49\u306e\u30de\u30af\u30ed\u306b\u4ed8\u3051\u3066\u308b\u30bb\u30df\u30b3\u30ed\u30f3\u7b49\u3092X\u306b\u5909\u63db\u3059\u308b\u3001\u30de\u30af\u30ed\u306e\u30bb\u30df\u30b3\u30ed\u30f3\u304c\u5bfe\u8c61\u306b\u306a\u308b\u306e\u304c\u7406\u7531\u4e0d\u660e\n\n\n\n\n\u9069\u7528\u30b3\u30fc\u30c9\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u4e00\u89a7\n\u30b3\u30fc\u30c9\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3068\u95a2\u4fc2\u306e\u3042\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u9069\u7528\u4f8b\u3067\u3059\u3001\u9069\u7528\u30aa\u30d7\u30b7\u30e7\u30f3\u4ee5\u5916\u306fDefault\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\nmax_width\n// max_width = 100\nfn f(aaaaaa: i32, bbbbb: i32) -> i32\n    where T: Foo\n{\n    3\n}\n\n// max_width = 50\nfn f(aaaaaa: i32,\n     bbbbb: i32)\n     -> i32\n    where T: Foo\n{\n    3\n}\n\n\n\ntab_spaces\n// tab_spaces = 4\nfn main() {\n    let x = 3;\n}\n\n// tab_spaced = 2\nfn main() {\n  let x = 3;\n}\n\n\nfn_call_width\n// fn_call_width = 21\nfn main() {\n    foo(\"fn\", \"call\", \"width\");\n}\n\n// fn_call_width = 20\nfn main() {\n    foo(\"fn\",\n        \"call\",\n        \"width\");\n}\n\n\nstruct_lit_width\n// struct_lit_width = 16\nfn main() {\n    Hoge { a: \"hoge\", b: 12 };\n}\n\n// struct_lit_width = 15\nfn main() {\n    Hoge {\n        a: \"hoge\",\n        b: 12,\n    };\n}\n\n\nfn_brace_style\n// fn_brace_style = \"AlwaysNextLine\"\nfn f()\n{\n    3;\n}\nfn f2<T>()\n    where T: Foo\n{\n    3;\n}\n\n// fn_brace_style = \"PreferSameLine\"\nfn f() {\n    3;\n}\nfn f<T>()\n    where T: Foo {\n    3;\n}\n\n// fn_brace_style = \"SameLineWhere\"\nfn f() {\n    3;\n}\nfn f<T>()\n    where T: Foo\n{\n    3;\n}\n\n\nitem_brace_style\n// item_brace_style = \"AlwaysNextLine\"\ntrait Trait\n{\n    fn f(&self) {}\n}\ntrait Trait<T>\n    where T: Foo\n{\n    fn f(&self) {}\n}\n\n// item_brace_style = \"PreferSameLine\"\ntrait Trait {\n    fn f(&self) {}\n}\ntrait Trait<T>\n    where T: Foo {\n    fn f(&self) {}\n}\n\n// item_brace_style = \"SameLineWhere\"\ntrait Trait {\n    fn f(&self) {}\n}\ntrait Trait<T>\n    where T: Foo\n{\n    fn f(&self) {}\n}\n\n\nimpl_empty_single_line\n// impl_empty_single_line = true\nimpl Trait {}\nimpl Trait<T> where T: Foo {}\n\n// impl_empty_single_line = false\nimpl Trait {\n}\nimpl Trait<T>\n    where T: Foo\n{\n}\n\n\nfn_empty_single_line\n// fn_empty_single_line = true\nfn f() {}\nfn f<T>() where T: Foo {}\n\n// fn_empty_single_line = false\nfn f() {\n}\nfn f<T>()\n    where T: Foo\n{\n}\n\n\nfn_single_line\n// fn_single_line = false\nfn f() {\n    foo();\n}\n\n// fn_single_line = true\nfn f() { foo(); }\n\n\nfn_return_indent\n// max_width = 40\n// fn_return_indent = \"WithArgs\"\nfn f<T>(aaa: T,\n        bbb: i32,\n        ccc: i32)\n        -> i32\n    where T: Foo\n{\n    3;\n}\n\n// max_width = 40\n// fn_return_indent = \"WithWhereClause\"\nfn f<T>(aaa: T,\n        bbb: i32,\n        ccc: i32)\n    -> i32\n    where T: Foo\n{\n    3;\n}\n\n\nfn_args_paren_newline\n// max_width = 18\n// fn_args_paren_newline = true\nfn long_long_func\n    (aaa: i32,\n     bbb: i32) {\n    3;\n}\n\n// max_width = 18\n// fn_args_paren_newline = false\nfn long_long_func(\n    aaa: i32,\n    bbb: i32) {\n    3;\n}\n\n\nfn_args_density\n// max_width = 39\n// fn_args_density = \"Compressed\"\nfn long_long_func(a: i32, b: i32,\n                  c: i32) {\n    3;\n}\nfn long_func(a: i32, b: i32, c: i32) {\n    3;\n}\n\n// max_width = 39\n// fn_args_density = \"Tall\" # same \"CompressedIfEmpty\"\nfn long_long_func(a: i32,\n                  b: i32,\n                  c: i32) {\n    3;\n}\nfn long_func(a: i32, b: i32, c: i32) {\n    3;\n}\n\n// max_width = 39\n// fn_args_density = \"Vertical\"\nfn long_long_func(a: i32,\n                  b: i32,\n                  c: i32) {\n    3;\n}\nfn long_func(a: i32,\n             b: i32,\n             c: i32) {\n    3;\n}\n\n\nfn_args_layout\n// max_width = 39\n// fn_args_layout = \"Visual\"\nfn long_long_func(a: i32,\n                  b: i32,\n                  c: i32) {\n    3;\n}\nfn long_func(a: i32, b: i32, c: i32) {\n    3;\n}\n\n// max_width = 39\n// fn_args_layout = \"Block\"\nfn long_long_func(\n    a: i32,\n    b: i32,\n    c: i32\n) {\n    3;\n}\nfn long_func(a: i32, b: i32, c: i32) {\n    3;\n}\n\n// max_width = 39\n// fn_args_layout = \"BlockAlways\"\nfn long_long_func(\n    a: i32,\n    b: i32,\n    c: i32\n) {\n    3;\n}\nfn long_func(\n    a: i32, b: i32, c: i32\n) {\n    3;\n}\n\n\nfn_arg_indent\n// max_width = 39\n// fn_arg_indent = \"Inherit\"\nfn long_long_func(a: i32,\nb: i32,\nc: i32) {\n    3;\n}\n\n// max_width = 39\n// fn_arg_indent = \"Tabbed\"\nfn long_long_func(a: i32,\n    b: i32,\n    c: i32) {\n    3;\n}\n\n// max_width = 39\n// fn_arg_indent = \"Visual\"\nfn long_long_func(a: i32,\n                  b: i32,\n                  c: i32) {\n    3;\n}\n\n\ntype_punctuation_density\n// type_punctuation_density = \"Compressed\"\nstruct Hoge<T=Foo+std::marker::Copy> {\n    x: T,\n}\n\n// type_punctuation_density = \"Wide\"\nstruct Hoge<T = Foo + std::marker::Copy> {\n    x: T,\n}\n\n\nwhere_density\n// max_width = 39\n// where_density = \"Compressed\"\ntrait LongLongTrait<T> where T: Foo {}\ntrait LongLongTrait<T> where T: Foo\n{\n    fn f(&self);\n}\ntrait LongLongLongLongTrait<T>\n    where T: Foo\n{\n}\ntrait LongLongLongLongTrait<T>\n    where T: Foo\n{\n    fn f(&self);\n}\n\n// max_width = 39\n// where_density = \"Tall\" # same \"Vertical\"\ntrait LongLongTrait<T>\n    where T: Foo\n{\n}\ntrait LongLongTrait<T>\n    where T: Foo\n{\n    fn f(&self);\n}\ntrait LongLongLongLongTrait<T>\n    where T: Foo\n{\n}\ntrait LongLongLongLongTrait<T>\n    where T: Foo\n{\n    fn f(&self);\n}\n\n// max_width = 39\n// where_density = \"CompressedIfEmpty\"\ntrait LongLongTrait<T> where T: Foo {}\ntrait LongLongTrait<T>\n    where T: Foo\n{\n    fn f(&self);\n}\ntrait LongLongLongLongTrait<T>\n    where T: Foo\n{\n}\ntrait LongLongLongLongTrait<T>\n    where T: Foo\n{\n    fn f(&self);\n}\n\n\nwhere_indent\n// where_indent = \"Inherit\"\ntrait Trait<T>\nwhere T: Foo\n{\n    fn f(&self);\n}\n\n// where_indent = \"Tabbed\"\ntrait Trait<T>\n    where T: Foo\n{\n    fn f(&self);\n}\n\n// where_indent = \"Visual\"\ntrait Trait<T>\n    where T: Foo\n{\n    fn f(&self);\n}\n\n\nwhere_layout\n// max_width = 60\n// where_layout = \"Vertical\"\nfn f<TTT, UUU, VVV>(a: TTT, b: UUU, c: VVV)\n    where TTT: Foo,\n          UUU: Hoge,\n          VVV: Piyo\n{\n    3;\n}\nfn f<TTTTTTTTTT, UUUUUUUUUU, VVVVVVVVVV>(a: TTTTTTTTTT,\n                                         b: UUUUUUUUUU,\n                                         c: VVVVVVVVVV)\n    where TTTTTTTTTT: Foo,\n          UUUUUUUUUU: Hoge,\n          VVVVVVVVVV: Piyo\n{\n    3;\n}\n\n// max_width = 60\n// where_layout = \"HorizontalVertical\"\nfn f<TTT, UUU, VVV>(a: TTT, b: UUU, c: VVV)\n    where TTT: Foo, UUU: Hoge, VVV: Piyo\n{\n    3;\n}\nfn f<TTTTTTTTTT, UUUUUUUUUU, VVVVVVVVVV>(a: TTTTTTTTTT,\n                                         b: UUUUUUUUUU,\n                                         c: VVVVVVVVVV)\n    where TTTTTTTTTT: Foo,\n          UUUUUUUUUU: Hoge,\n          VVVVVVVVVV: Piyo\n{\n    3;\n}\n\n// max_width = 60\n// where_layout = \"Mixed\"\nfn f<TTT, UUU, VVV>(a: TTT, b: UUU, c: VVV)\n    where TTT: Foo, UUU: Hoge, VVV: Piyo\n{\n    3;\n}\nfn f<TTTTTTTTTT, UUUUUUUUUU, VVVVVVVVVV>(a: TTTTTTTTTT,\n                                         b: UUUUUUUUUU,\n                                         c: VVVVVVVVVV)\n    where TTTTTTTTTT: Foo, UUUUUUUUUU: Hoge,\n          VVVVVVVVVV: Piyo\n{\n    3;\n}\n\n// max_width = 60\n// where_layout = \"Horizontal\"\nfn f<TTT, UUU, VVV>(a: TTT, b: UUU, c: VVV)\n    where TTT: Foo, UUU: Hoge, VVV: Piyo\n{\n    3;\n}\nfn f<TTTTTTTTTT, UUUUUUUUUU, VVVVVVVVVV>(a: TTTTTTTTTT,\n                                         b: UUUUUUUUUU,\n                                         c: VVVVVVVVVV)\n    where TTTTTTTTTT: Foo, UUUUUUUUUU: Hoge, VVVVVVVVVV: Piyo\n{\n    3;\n}\n\n\nwhere_pred_indent\n// where_pred_indent = \"Inherit\"\nfn f<T, U, V>(a: T, b: U, c: V)\n    where T: Foo,\n    U: Hoge,\n    V: Piyo\n{\n    3;\n}\n\n// where_pred_indent = \"Tabbed\"\nfn f<T, U, V>(a: T, b: U, c: V)\n    where T: Foo,\n        U: Hoge,\n        V: Piyo\n{\n    3;\n}\n\n// where_pred_indent = \"Visual\"\nfn f<T, U, V>(a: T, b: U, c: V)\n    where T: Foo,\n          U: Hoge,\n          V: Piyo\n{\n    3;\n}\n\n\nwhere_trailing_comma\n// where_trailing_comma = false\nfn f<T, U, V>(a: T, b: U, c: V)\n    where T: Foo,\n          U: Hoge,\n          V: Piyo\n{\n    3;\n}\n\n// where_trailing_comma = true\nfn f<T, U, V>(a: T, b: U, c: V)\n    where T: Foo,\n          U: Hoge,\n          V: Piyo,\n{\n    3;\n}\n\n\ngenerics_indent\n// max_width = 18\n// generics_indent = \"Inherit\"\ntrait Trait<T,\nU,\nD>\n    where T: Foo\n{\n}\n\n// max_width = 18\n// generics_indent = \"Tabbed\"\ntrait Trait<T,\n    U,\n    D>\n    where T: Foo\n{\n}\n\n// max_width = 18\n// generics_indent = \"Visual\"\ntrait Trait<T,\n            U,\n            D>\n    where T: Foo\n{\n}\n\n\nstruct_trailing_comma\n// struct_trailing_comma = \"Always\"  # same \"Vertical\"\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\n// struct_trailing_comma = \"Never\"\nstruct Point {\n    x: i32,\n    y: i32\n}\n\n\nstruct_lit_trailing_comma\n// struct_lit_trailing_comma = \"Always\"\nfn main() {\n    Hoge { a: \"hoge\", b: 12, };\n    Hoge {\n        long_a: \"hoge\",\n        long_b: 12,\n    };\n}\n\n// struct_lit_trailing_comma = \"Never\"\nfn main() {\n    Hoge { a: \"hoge\", b: 12 };\n    Hoge {\n        long_a: \"hoge\",\n        long_b: 12\n    };\n}\n\n// struct_lit_trailing_comma = \"Vertical\"\nfn main() {\n    Hoge { a: \"hoge\", b: 12 };\n    Hoge {\n        long_a: \"hoge\",\n        long_b: 12,\n    };\n}\n\n\nstruct_lit_style\n// struct_lit_style = \"Visual\"\nfn main() {\n    Hoge { a: \"hoge\", b: 12 };\n    Hoge { long_a: \"hoge\",\n           long_b: 12, };\n}\n\n// struct_lit_style = \"Block\"\nfn main() {\n    Hoge { a: \"hoge\", b: 12 };\n    Hoge {\n        long_a: \"hoge\",\n        long_b: 12,\n    };\n}\n\n\nstruct_lit_multiline_style\n// struct_lit_multiline_style = \"PreferSingle\"\nfn main() {\n    Hoge { a: \"hoge\", b: 12 };\n    Hoge {\n        long_a: \"hoge\",\n        long_b: 12,\n    };\n}\n\n// struct_lit_multiline_style = \"ForceMulti\"\nfn main() {\n    Hoge {\n        a: \"hoge\",\n        b: 12,\n    };\n    Hoge {\n        long_a: \"hoge\",\n        long_b: 12,\n    };\n}\n\n\nenum_trailing_comma\n// enum_trailing_comma = true\nenum Hoge {\n    Foo,\n    Piyo,\n}\n\n// enum_trailing_comma = false\nenum Hoge {\n    Foo,\n    Piyo\n}\n\n\nchain_base_indent\n// chain_base_indent = \"Inherit\"\nfn main() {\n    let z = Foo {\n        field1: val1,\n        field2: val2,\n    };\n\n    let x = Foo {\n        field1: val1,\n        field2: val2,\n    }\n    .method_call()\n    .method_call();\n\n    let y = if cond {\n        x\n    } else {\n        val2\n    }\n    .method_call();\n}\n\n// chain_base_indent = \"Tabbed\"\nfn main() {\n    let z = Foo {\n        field1: val1,\n        field2: val2,\n    };\n\n    let x = Foo {\n            field1: val1,\n            field2: val2,\n        }\n        .method_call()\n        .method_call();\n\n    let y = if cond {\n            x\n        } else {\n            val2\n        }\n        .method_call();\n}\n\n// chain_base_indent = \"Visual\"\nfn main() {\n    let z = Foo {\n        field1: val1,\n        field2: val2,\n    };\n\n    let x = Foo {\n                field1: val1,\n                field2: val2,\n            }\n            .method_call()\n            .method_call();\n\n    let y = if cond {\n                x\n            } else {\n                val2\n            }\n            .method_call();\n}\n\n\nchain_indent\n// chain_indent = \"Inherit\"\nfn main() {\n    let x = f().my_long_function()\n               .my_even_longer_function()\n               .do_it();\n\n    let y = my_long_function()\n    .my_even_longer_function()\n    .do_it();\n}\n\n// chain_indent = \"Tabbed\"\nfn main() {\n    let x = f().my_long_function()\n               .my_even_longer_function()\n               .do_it();\n\n    let y = my_long_function()\n        .my_even_longer_function()\n        .do_it();\n}\n\n// chain_indent = \"Visual\"\nfn main() {\n    let x = f().my_long_function()\n               .my_even_longer_function()\n               .do_it();\n\n    let y = my_long_function()\n                .my_even_longer_function()\n                .do_it();\n}\n\n\nreorder_imports\n// reorder_imports = false\nuse {aa, ab, ac, b, Ab, Z};\n\n// reorder_imports = true\nuse {Ab, Z, aa, ab, ac, b};\n\n\nsingle_line_if_else\n// single_line_if_else = false\nfn main() {\n    let x = if 3 == 3 {\n        \"hoge\"\n    } else {\n        \"fuga\"\n    };\n}\n\n// single_line_if_else = true\nfn main() {\n    let x = if 3 == 3 { \"hoge\" } else { \"fuga\" };\n}\n\n\nformat_strings\n// max_width = 18\n// format_strings = false\nmod m {\n    fn f() {\n        let s = \"aasa aasaa\";\n    }\n\n    mod m2 {\n        fn f() {\n            let s = \"aasa aasaa\";\n        }\n    }\n}\n\nfn main() {\n    let s1 = \"AAAA AAAAaAA AAA\";\n    let s2 = \"AAAAAAAAAAAAAAaA\";\n}\n\n\n// max_width = 18\n// format_strings = true\nmod m {\n    fn f() {\n        let s =\n            \"aasa \\\n             aasaa\";\n    }\n\n    mod m2 {\n        fn f() {\n            let s = \"aasa aasaa\";\n        }\n    }\n}\n\nfn main() {\n    let s1 = \"AAAA \\\n              AAAAaAA \\\n              AAA\";\n    let s2 = \"AAAAAAAAAAAAAAaA\";\n}\n\n\nforce_format_strings\n// force_format_strings = false\nfn main() {\n    let expected = \"\n        ; Function Attrs: nounwind\n        declare void @llvm.memset.p0i8.i32(i8* nocapture, i8, i32, i32, i1) #0\n        declare i32 @write(i32, i8*, i32)\n        declare i32 @putchar(i32)\n        declare i32 @getchar()\n        define i32 @main() {\n            entry:\n              ret i32 0\n        }\n        attributes #0 = { nounwind }\n    \";\n}\n\n// force_format_strings = true\nfn main() {\n    let expected = \"\n        ; Function Attrs: nounwind\n        declare void \\\n                    @llvm.memset.p0i8.i32(i8* nocapture, i8, i32, i32, i1) #0\n        declare i32 \\\n                    @write(i32, i8*, i32)\n        declare i32 @putchar(i32)\n        declare i32 \\\n                    @getchar()\n        define i32 @main() {\n            entry:\n              ret \\\n                    i32 0\n        }\n        attributes #0 = { nounwind }\n    \";\n}\n\n\nchains_overflow_last\n// chains_overflow_last = true\nfn main() {\n    x().y(|| match cond() {\n        true => (),\n        false => (),\n    });\n\n    loong_func().quux(move || if true {\n        1\n    } else {\n        2\n    });\n\n    fffffffffffffffffff(a, {\n        SCRIPT_TASK_ROOT.with(|root| {\n            *root.borrow_mut() = Some(&script_task);\n        });\n    });\n}\n\n// chains_overflow_last = false\nfn main() {\n    x().y(|| match cond() {\n           true => (),\n           false => (),\n       });\n\n    loong_func()\n        .quux(move || if true {\n            1\n        } else {\n            2\n        });\n\n    fffffffffffffffffff(a,\n                        {\n                            SCRIPT_TASK_ROOT.with(|root| {\n                                                *root.borrow_mut() = Some(&script_task);\n                                            });\n                        });\n}\n\n\ntake_source_hints\n// take_source_hints = true\nfn main() {\n    // \u6539\u884c\u3057\u3066\u308b\u306a\u3089\u305d\u308c\u3092\u7dad\u6301\n    a.b\n     .c\n     .d();\n    a.b.c.d();\n}\n\n// take_source_hints = false\nfn main() {\n    a.b.c.d();\n    a.b.c.d();\n}\n\n\nhard_tabs\n// hard_tabs = false\nfn main() {\n    // indent\u304c\u30b9\u30da\u30fc\u30b9\n    3;\n}\n\n// hard_tabs = true\nfn main() {\n    // indent\u304c\u30bf\u30d6\n    3;\n}\n\n\nwrap_comments\n// max_width = 30\n// wrap_comments = false\nfn main() {\n    // looooooooooooooooooooooooooong comment\n}\n\n// max_width = 30\n// wrap_comments = true\nfn main() {\n    // looooooooooooooooooooooooooong\n    // comment\n}\n\n\nnormalise_comments\n// normalise_comments = false\nfn main() {\n    /* normal comment\n     * abc\n     * def\n     * */\n}\n\n// normalise_comments = true\nfn main() {\n    // normal comment\n    // abc\n    // def\n    //\n}\n\n\nwrap_match_arms\n// wrap_match_arms = false\nfn main() {\n    match x {\n        a => {\n            \"line1\"\n        }\n        _ => {\n            \"other\"\n        }\n    }\n}\n\n// wrap_match_arms = true\nfn main() {\n    match x {\n        a => \"line1\",\n        _ => \"other\",\n    }\n}\n\n\nmatch_block_trailing_comma\n// wrap_match_arms = false\n// match_block_trailing_comma = false\nfn main() {\n    match x {\n        a => {\n            \"line1\"\n        }\n        _ => {\n            \"other\"\n        }\n    }\n}\n\n// wrap_match_arms = false\n// match_block_trailing_comma = true\nfn main() {\n    match x {\n        a => {\n            \"line1\"\n        },\n        _ => {\n            \"other\"\n        },\n    }\n}\n\n\nmatch_wildcard_trailing_comma\n// match_wildcard_trailing_comma = false\nfn main() {\n    match x {\n        a => \"line1\",\n        _ => \"other\"\n    }\n}\n\n// match_wildcard_trailing_comma = true\nfn main() {\n    match x {\n        a => \"line1\",\n        _ => \"other\",\n    }\n}\n\n\n\u53c2\u8003\n\n\nrustfmt\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n\n# \u3053\u306e\u8a18\u4e8b\u306b\u3064\u3044\u3066\n\n\u3053\u306e\u8a18\u4e8b\u306fRust\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u6574\u5f62\u3059\u308b[rustfmt](https://github.com/rust-lang-nursery/rustfmt)\u306e\u5404\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066\u306e\u89e3\u8aac\u8a18\u4e8b\u3067\u3059\u3001rustfmt\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3068\u5b9f\u969b\u306b\u52d5\u4f5c\u3055\u305b\u306a\u304c\u3089\u306e\u8abf\u67fb\u306e\u70ba\u3001\u89e3\u8aac\u306b\u898b\u843d\u3068\u3057\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u4e8b\u3092\u3054\u4e86\u627f\u4e0b\u3055\u3044\u3002\n\u8abf\u67fb\u6642\u306eRust\u3068rustfmt\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\n- Rust(rustc 1.8.0)\n- rustfmt 0.4.1\n\n\n# config options\u65e9\u898b\u8868\n\nconfig\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304f\u3053\u3068\u304c\u51fa\u6765\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066\u3067\u3059\u3001config\u30d5\u30a1\u30a4\u30eb\u306f--config-path\u3067\u6307\u5b9a\u3082\u51fa\u6765\u307e\u3059\u304c\u3001\u7701\u7565\u6642\u306f\u5bfe\u8c61\u30bd\u30fc\u30b9\u3068\u540c\u30d1\u30b9\u306b\u3042\u308brustfmt.toml\u304c\u4f7f\u308f\u308c\u307e\u3059\u3002\n\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u4e00\u89a7\u306f--config-help\u6307\u5b9a\u3067\u78ba\u8a8d\u51fa\u6765\u307e\u3059\u3002\n\n\u307e\u305f\u3001\u4e00\u90e8rustfmt\u306b\u76f4\u63a5\u6307\u5b9a\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u88ab\u3063\u3066\u3044\u307e\u3059\u304c\u3001--verbose\u3068--skip-children\u306f\u76f4\u63a5\u6307\u5b9a\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3078\u3001config\u30d5\u30a1\u30a4\u30eb\u306b\u8a18\u8f09\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u6a19\u6e96\u5165\u529b\u304b\u3089\u6e21\u3055\u308c\u305f\u30bd\u30fc\u30b9\u6587\u5b57\u5217\u306b\u6a5f\u80fd\u3059\u308b\u306e\u3092\u78ba\u8a8d\u51fa\u6765\u307e\u3057\u305f\u3002\n(\u4f8b\u3048\u3070\u3001hoge.rs\u3092\u5bfe\u8c61\u306b\u3001\u4ed6\u306eimport\u3055\u308c\u305f\u30bd\u30fc\u30b9\u3092\u9664\u5916\u3057\u305f\u3044\u5834\u5408\u306f\u3001\n\n```\n$ rustfmt hoge.rs --skip-children\n```\n\n\u3068\u76f4\u63a5\u6307\u5b9a\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u5229\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059)\n\n|option\u540d|\u8a2d\u5b9a\u5024|\u539f\u6587|\u8abf\u67fb\u7d50\u679c|\n|--:|:--|:--|:--|\n| verbose | \\<boolean\\><br>Default: false | Use verbose output|**\u6a19\u6e96\u5165\u529b\u304b\u3089\u30b3\u30fc\u30c9\u3092\u6e21\u3057\u305f\u6642\u306e\u307f\u78ba\u8a8d**\u3001\u9032\u6357\u3092\u8868\u793a<br>ex)Formatting stdin\n| skip_children | \\<boolean\\><br>Default: false | Don't reformat out of line modules|**\u6a19\u6e96\u5165\u529b\u304b\u3089\u30b3\u30fc\u30c9\u3092\u6e21\u3057\u305f\u6642\u306e\u307f\u78ba\u8a8d**\u3001\u4ed6\u306eimport\u3057\u305f\u30bd\u30fc\u30b9\u306e\u6574\u5f62\u3092skip\u3059\u308b\n| [max_width](#max_width) | \\<unsigned integer\\><br>Default: 100 | Maximum width of each line|\u6700\u5927\u5e45\u3001\u884c\u306e\u30b3\u30fc\u30c9\u5e45\u3092\u3053\u306e\u5e45\u4ee5\u5185\u306b\u53ce\u3081\u3088\u3046\u3068\u3059\u308b\n| ideal_width | \\<unsigned integer\\><br>Default: 80 | Ideal width of each line|\u7406\u60f3\u7684\u306a\u5e45\u3001**\u305f\u3060\u3001\u3053\u306e\u8a2d\u5b9a\u306e\u5177\u4f53\u7684\u306a\u52d5\u4f5c\u3092\u78ba\u8a8d\u51fa\u6765\u307e\u305b\u3093\u3067\u3057\u305f\u3001[\u3053\u306eissue](https://github.com/rust-lang-nursery/rustfmt/issues/861)\u306b\u3088\u308b\u3068ideal_width\u306f\u30b3\u30e1\u30f3\u30c8\u30fb\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u306b\u6a5f\u80fd\u3059\u308b\u304c\u3001\u554f\u984c\u304c\u5224\u660e\u3057\u3001\u8a2d\u5b9a\u3092\u653e\u68c4\u3057\u305f\u3068\u306e\u3053\u3068\u3067\u3059**\n| [tab_spaces](#tab_spaces) | \\<unsigned integer\\><br>Default: 4 | Number of spaces per tab|\u30a4\u30f3\u30c7\u30f3\u30c8\u306e\u30b9\u30da\u30fc\u30b9\u6570\n| [fn_call_width](#fn_call_width) | \\<unsigned integer\\><br>Default: 60 | Maximum width of the args of a function call before falling back to vertical formatting|\u95a2\u6570\u306e\u5f15\u6570\u5e45\u3001\u3053\u308c\u3088\u308a\u5927\u304d\u3044\u3068\u7e26\u306b\u4e26\u3079\u308b\n| [struct_lit_width](#struct_lit_width) | \\<unsigned integer\\><br>Default: 16 | Maximum width in the body of a struct lit before falling back to vertical formatting|struct\u306e\u30ea\u30c6\u30e9\u30eb\u5e45\u3001\u3053\u308c\u3088\u308a\u5927\u304d\u3044\u3068\u7e26\u306b\u4e26\u3079\u308b\n| newline_style | [Windows&#124;<br>Unix&#124;<br>Native] <br>Default: Unix | Unix or Windows line endings|\u6539\u884c\u30b3\u30fc\u30c9\u3002Windows:CRLF\u3001Unix:LF\u3001Native:OS\u306b\u3088\u308a\u81ea\u52d5\u5224\u5b9a\n| [fn_brace_style](#fn_brace_style) | [AlwaysNextLine&#124;<br>PreferSameLine&#124;<br>SameLineWhere] <br>Default: SameLineWhere | Brace style for functions|\u95a2\u6570\u306e\u30d6\u30e9\u30b1\u30c3\u30c8\u306e\u4f4d\u7f6e\u3002AlwaysNextLine: \u6539\u884c\u3092\u5e38\u306b\u631f\u3080\u3001PreferSameLine: \u5e38\u306b\u540c\u3058\u884c\u3001SameLineWhere:\u5834\u5408\u306b\u3088\u308a\u6539\u884c\u3092\u631f\u3080(\u4f8b\u3048\u3070\u3001template\u4f7f\u7528\u6642\u306b\u898f\u7a0b\u3092\u66f8\u3044\u305f\u5834\u5408\u306f\u6539\u884c\u3055\u308c\u308b)\n| [item_brace_style](#item_brace_style) | [AlwaysNextLine&#124;<br>PreferSameLine&#124;<br>SameLineWhere] <br>Default: SameLineWhere | Brace style for structs and enums|fn_brace_style\u306estructs\u30fbenums\u7248\n| [impl_empty_single_line](#impl_empty_single_line) | \\<boolean\\><br>Default: true | Put empty-body implementations on a single line|impl\u306e\u5b9f\u88c5\u304c\u7a7a\u306e\u6642\u3001\u4e00\u884c\u306b\u3059\u308b\n| [fn_empty_single_line](#fn_empty_single_line) | \\<boolean\\><br>Default: true | Put empty-body functions on a single line|\u95a2\u6570\u306e\u5b9f\u88c5\u304c\u7a7a\u306e\u6642\u3001\u4e00\u884c\u306b\u3059\u308b<br>**fn_brace_style\u3092AlwaysNextLine\u306b\u3059\u308b\u3068\u3001\u305d\u3061\u3089\u304c\u512a\u5148\u3055\u308c\u308b**\n| [fn_single_line](#fn_single_line) | \\<boolean\\><br>Default: false | Put single-expression functions on a single line|\u4e00\u884c\u51e6\u7406\u306e\u95a2\u6570\u3092\u4e00\u884c\u306b\u3059\u308b\n| [fn_return_indent](#fn_return_indent) | [WithArgs&#124;<br>WithWhereClause] <br>Default: WithArgs | Location of return type in function declaration|\u95a2\u6570\u306e\u623b\u308a\u5024\u306e\u578b\u306e\u30a4\u30f3\u30c7\u30f3\u30c8\u4f4d\u7f6e\u3002WithArgs: \u5f15\u6570\u3068\u540c\u3058\u4f4d\u7f6e\u3001WithWhereClause: where\u53e5\u3068\u540c\u3058\u4f4d\u7f6e<br>**\u623b\u308a\u5024\u306e\u578b\u304c\u6539\u884c\u3055\u308c\u308b\u72b6\u6cc1\u306b\u306a\u3089\u306a\u3044\u3068\u52b9\u679c\u3092\u767a\u63ee\u3057\u306a\u3044(max_width < \u95a2\u6570\u5b9a\u7fa9\u306e\u6587\u5b57\u6570\u306e\u6642\u306a\u3069)**\n| [fn_args_paren_newline](#fn_args_paren_newline) | \\<boolean\\><br>Default: true | If function argument parenthesis goes on a newline|\u95a2\u6570\u306e\u9577\u3055\u304cmax_width\u3088\u308a\u77ed\u3044\u6642\u3001\u5f15\u6570\u90e8\u5206\u304c\u6539\u884c\u3055\u308c\u308b\u304c\u3001\u305d\u306e\u6642\u306b\u59cb\u307e\u308a\u306e\u62ec\u5f27\u3082\u6539\u884c\u3059\u308b\u304b\n| [fn_args_density](#fn_args_density) | [Compressed&#124;<br>Tall&#124;<br>CompressedIfEmpty&#124;<br>Vertical] <br>Default: Tall | Argument density in functions|\u95a2\u6570\u306e\u5f15\u6570\u306e\u5bc6\u5ea6\u3002Compressed: \u51fa\u6765\u308b\u3060\u3051max_width\u4ee5\u5185\u306b\u8a70\u3081\u8fbc\u3080\u3001 Tall: \u5341\u5206\u306amax_width\u304c\u3042\u308b\u306a\u3089\u4e00\u884c\u3067\u3001\u8db3\u308a\u306a\u3044\u306a\u3089\u8907\u6570\u884c\u306b\u3059\u308b\u3001CompressedIfEmpty: Tall\u3068\u540c\u3058\u3001Vertical: \u5e38\u306b\u8907\u6570\u884c\u306b\u3059\u308b\n| [fn_args_layout](#fn_args_layout) | [Visual&#124;<br>Block&#124;<br>BlockAlways] <br>Default: Visual | Layout of function arguments|\u95a2\u6570\u306e\u5f15\u6570\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3002Visual: max_width\u304c\u8db3\u308a\u306a\u3044\u6642\u3001\u5404\u5f15\u6570\u30fb\u623b\u308a\u5024\u306e\u578b\u306e\u6539\u884c\u6642\u306eindent\u3092\u4e26\u3079\u308b Block: max_width\u304c\u8db3\u308a\u306a\u3044\u6642\u3001Block\u30ec\u30a4\u30a2\u30a6\u30c8\u3078\u3001BlockAlways: \u5e38\u306bBlock<br>**Block\u306e\u6642\u306ffn_return_indent\u306f\u7121\u8996\u3055\u308c\u308b**\n| [fn_arg_indent](#fn_arg_indent) | [Inherit&#124;<br>Tabbed&#124;<br>Visual] <br>Default: Visual |Indent on function arguments|\u95a2\u6570\u306e\u5f15\u6570\u306eindent\u3002Inherit: \u4e8c\u3064\u76ee\u4ee5\u964d\u3092\u95a2\u6570\u5b9a\u7fa9\u3068\u540c\u3058indent\u3078\u3001Tabbed: \u4e8c\u3064\u76ee\u4ee5\u964d\u3092\u95a2\u6570\u5b9a\u7fa9\u304b\u3089indent\u3001Visual: \u4e8c\u3064\u76ee\u4ee5\u964d\u3092\u4e00\u3064\u76ee\u3068\u540c\u3058indent\u3078<br>**fn_args_layout\u3092Block\u306b\u3057\u3066\u308b\u3068\u3001Tabbed\u306e\u52b9\u679c\u304c\u306a\u3044(Visual\u3068\u540c\u3058)**\n| [type_punctuation_density](#type_punctuation_density) | [Compressed&#124;<br>Wide] <br>Default: Wide | Determines if '+' or '=' are wrapped in spaces in the punctuation of types|struct\u30fbenum\u7b49\u3078\u306eGenerics\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u578b\u3084builtin trait\u6307\u5b9a\u6642\u306e\u300c=\u300d\u3084\u300c+\u300d\u306e\u7a7a\u767d\u306b\u3064\u3044\u3066\u3002Compressed: \u7a7a\u767d\u306a\u3057\u3001Wide: \u7a7a\u767d\u3042\u308a\n| [where_density](#where_density) | [Compressed&#124;<br>Tall&#124;<br>CompressedIfEmpty&#124;<br>Vertical] <br>Default: CompressedIfEmpty | Density of a where clause|fn_args_density\u306ewhere\u53e5\u7248\u3001**\u305f\u3060\u3057\u6319\u52d5\u304c\u9055\u3046**\u3002Compressed: max_width\u30fbideal_width\u4ee5\u5185\u306b\u53ce\u307e\u308b\u306a\u3089\u4e00\u884c\u3067\u3001\u8db3\u308a\u306a\u3044\u306a\u3089\u6539\u884c\u3001CompressedIfEmpty: Compressed\u306b\u52a0\u3048\u3001\u95a2\u6570\u306e\u5b9f\u88c5\u304c\u306a\u3044\u306a\u3089\u4e00\u884c\u3067\u3001\u3042\u308b\u306a\u3089\u6539\u884c\u3001Tall: Vertical\u3068\u540c\u3058\u3002Vertical: \u5e38\u306b\u6539\u884c\n| [where_indent](#where_indent) | [Inherit&#124;<br>Tabbed&#124;<br>Visual] <br>Default: Tabbed | Indentation of a where clause|where\u53e5\u306eindent\u3002Inherit: \u95a2\u6570\u5b9a\u7fa9\u3068\u540c\u3058indent\u3078\u3001Tabbed: Visual\u3068\u540c\u3058\u3001 Visual: indent\u3059\u308b<br>**where_density\u304cCompressed\u3067\u6539\u884c\u3055\u308c\u3066\u3044\u306a\u3044\u6642\u306f\u52b9\u679c\u304c\u306a\u3044**\n| [where_layout](#where_layout) | [Vertical&#124;<br>Horizontal&#124;<br>HorizontalVertical&#124;<br>Mixed] <br>Default: Vertical | Element layout inside a where clause|where\u53e5\u3067\u30ab\u30f3\u30de\u533a\u5207\u308a\u3067\u8907\u6570\u6307\u5b9a\u3057\u305f\u969b\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3002Vertical: \u5e38\u306b\u6539\u884c\u3059\u308b\u3001HorizontalVertical: \u5341\u5206\u306amax_width\u304c\u3042\u308b\u306a\u3089\u4e00\u884c\u3067\u3001\u8db3\u308a\u306a\u3044\u306a\u3089\u8907\u6570\u884c\u306b\u3059\u308b\u3001Mixed: \u51fa\u6765\u308b\u3060\u3051max_width\u4ee5\u5185\u306b\u8a70\u3081\u8fbc\u3080\u3001Horizontal: \u5e38\u306b\u4e00\u884c\u3067\n| [where_pred_indent](#where_pred_indent) | [Inherit&#124;<br>Tabbed&#124;<br>Visual] <br>Default: Visual | Indentation style of a where predicate|where\u53e5\u306e\u4e8c\u3064\u76ee\u4ee5\u964d\u306eindent\u3002Inherit: where\u53e5\u3068\u540c\u3058indent\u3078\u3001Tabbed: indent\u3001Visual: \u4e00\u3064\u76ee\u3068\u540c\u3058indent\u3078\n| [where_trailing_comma](#where_trailing_comma) | \\<boolean\\><br>Default: false | Put a trailing comma on where clauses|where\u53e5\u306e\u6700\u5f8c\u306e\u30ab\u30f3\u30de\u3092\u4ed8\u3051\u308b\u304b\n| [generics_indent](#generics_indent) | [Inherit&#124;<br>Tabbed&#124;<br>Visual] <br>Default: Visual | Indentation of generics|\u305d\u306e\u4ed6(where\u53e5\u3084\u95a2\u6570\u306e\u5f15\u6570\u4ee5\u5916\u3001struct\u3084trait\u306etype parameter\u7b49)\u306eindent\u3002Inherit: \u5b9a\u7fa9\u3068\u540c\u3058indent\u3001Tabbed: indent, Visual: \u4e00\u3064\u76ee\u3068\u540c\u3058indent\u3078\n| [struct_trailing_comma](#struct_trailing_comma) | [Always&#124;<br>Never&#124;<br>Vertical] <br>Default: Vertical | If there is a trailing comma on structs|struct\u5b9a\u7fa9\u306e\u6700\u5f8c\u306e\u30ab\u30f3\u30de\u3002Always: \u5e38\u306b\u4ed8\u3051\u308b\u3001Never: \u5e38\u306b\u4ed8\u3051\u306a\u3044\u3001Vertical: **\u4e0d\u660e\u3001struct\u306e\u5b9a\u7fa9\u3092Horizontal\u306b\u4e26\u3079\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u7121\u3044\u70ba\u3001Always\u3068\u540c\u3058\u3067\u3042\u3063\u305f**\n| [struct_lit_trailing_comma](#struct_lit_trailing_comma) | [Always&#124;<br>Never&#124;<br>Vertical] <br>Default: Vertical | If there is a trailing comma on literal structs|struct\u30ea\u30c6\u30e9\u30eb\u306e\u6700\u5f8c\u306e\u30ab\u30f3\u30de\u3002Always: \u5e38\u306b\u4ed8\u3051\u308b\u3001Never: \u5e38\u306b\u4ed8\u3051\u306a\u3044\u3001Vertical: \u5404\u30ea\u30c6\u30e9\u30eb\u3092\u6539\u884c\u3059\u308b\u6642\u306b\u4ed8\u3051\u308b\n| [struct_lit_style](#struct_lit_style) | [Visual&#124;<br>Block] <br>Default: Block | Style of struct definition|struct\u30ea\u30c6\u30e9\u30eb\u306e\u30b9\u30bf\u30a4\u30eb\u3002Visual: struct_lit_width\u5e45\u304c\u8db3\u308a\u306a\u3044\u6642\u3001\u5404\u30ea\u30c6\u30e9\u30eb\u306e\u6539\u884c\u6642\u306eindent\u3092\u4e26\u3079\u308b\u3001Block: struct_lit_width\u5e45\u304c\u8db3\u308a\u306a\u3044\u6642\u3001Block\u30b9\u30bf\u30a4\u30eb\u3078\n| [struct_lit_multiline_style](#struct_lit_multiline_style) | [PreferSingle&#124;<br>ForceMulti] <br>Default: PreferSingle | Multiline style on literal structs|struct\u30ea\u30c6\u30e9\u30eb\u306e\u8907\u6570\u884c\u30b9\u30bf\u30a4\u30eb\u3002PreferSingle: \u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u4e00\u3064\u304b\u3001\u30ea\u30c6\u30e9\u30eb\u304cstruct_lit_width\u5e45\u4ee5\u5185\u306a\u3089\u4e00\u884c\u3067\u3001\u8db3\u308a\u306a\u3044\u306a\u3089\u8907\u6570\u884c\u306b\u3059\u308b\u3001ForceMulti: \u5e38\u306b\u8907\u6570\u884c\u30b9\u30bf\u30a4\u30eb\n| [enum_trailing_comma](#enum_trailing_comma) | \\<boolean\\><br>Default: true | Put a trailing comma on enum declarations|enum\u53e5\u306e\u6700\u5f8c\u306e\u30ab\u30f3\u30de\u3092\u4ed8\u3051\u308b\u304b\n| report_todo | [Always&#124;<br>Unnumbered&#124;<br>Never] <br>Default: Never | Report all, none or unnumbered occurrences of TODO in source file comments|\u30bd\u30fc\u30b9\u4e2d\u306eTODO\u30b3\u30e1\u30f3\u30c8\u4e00\u89a7\u3092\u8868\u793a\u3059\u308b\u3002Always: \u3059\u3079\u3066\u3001Unnumbered: issue\u756a\u53f7\u304c\u632f\u3089\u308c\u3066\u3044\u306a\u3044\u3082\u306e\u3060\u3051\u3001Never: \u7121\u8996\u3059\u308b\n| report_fixme | [Always&#124;<br>Unnumbered&#124;<br>Never] <br>Default: Never | Report all, none or unnumbered occurrences of FIXME in source file comments|\u30bd\u30fc\u30b9\u4e2d\u306eFIXME\u30b3\u30e1\u30f3\u30c8\u4e00\u89a7\u3092\u8868\u793a\u3059\u308b\u3002Always: \u3059\u3079\u3066\u3001Unnumbered: issue\u756a\u53f7\u304c\u632f\u3089\u308c\u3066\u3044\u306a\u3044\u3082\u306e\u3060\u3051\u3001Nerver: \u7121\u8996\u3059\u308b\n| [chain_base_indent](#chain_base_indent) | [Inherit&#124;<br>Tabbed&#124;<br>Visual] <br>Default: Visual | Indent on chain base|\u30e1\u30bd\u30c3\u30c9\u3084\u30d5\u30a3\u30fc\u30eb\u30c9\u30fbstruct\u30ea\u30c6\u30e9\u30eb\u30c1\u30a7\u30fc\u30f3\u306e\u6700\u521d\u306eindent\u3002Inherit: \u5b9a\u7fa9\u958b\u59cb\u884c\u306b\u5408\u308f\u305b\u305findent\u3001Tabbed: \u4e00\u6bb5indent\u3001Visual: \u30e1\u30bd\u30c3\u30c9\u3084\u30d5\u30a3\u30fc\u30eb\u30c9\u30fbstruct\u30ea\u30c6\u30e9\u30eb\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u5408\u308f\u305b\u305findent\n| [chain_indent](#chain_indent) | [Inherit&#124;<br>Tabbed&#124;<br>Visual] <br>Default: Visual | Indentation of chain|\u30e1\u30bd\u30c3\u30c9\u3084\u30d5\u30a3\u30fc\u30eb\u30c9\u30fbstruct\u30ea\u30c6\u30e9\u30eb\u30c1\u30a7\u30fc\u30f3\u306e\u4e8c\u3064\u76ee\u4ee5\u964d\u306eindent\u3002Inherit: \u5b9a\u7fa9\u958b\u59cb\u884c\u306b\u5408\u308f\u305b\u305findent\u3001Tabbed: \u4e00\u6bb5indent\u3001Visual: \u30e1\u30bd\u30c3\u30c9\u3084\u30d5\u30a3\u30fc\u30eb\u30c9\u30fbstruct\u30ea\u30c6\u30e9\u30eb\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u5408\u308f\u305b\u305findent\n| [reorder_imports](#reorder_imports) | \\<boolean\\><br>Default: false | Reorder import statements alphabetically| use {YYY, XXX};\u306e\u9806\u756a\u3092\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u9806\u306b\u3059\u308b\u304b\u3001\u5927\u6587\u5b57\u304c\u512a\u5148\n| [single_line_if_else](#single_line_if_else) | \\<boolean\\><br>Default: false | Put else on same line as closing brace for if statements|return\u5f0f\u3060\u3051\u304c\u66f8\u304b\u308c\u305fif - else\u3092\u4e00\u884c\u306b\u307e\u3068\u3081\u308b\u304b\n| [format_strings](#format_strings) | \\<boolean\\><br>Default: true | Format string literals where necessary|max_width\u5e45\u304c\u8db3\u308a\u306a\u3044\u6642\u3001string\u30ea\u30c6\u30e9\u30eb\u3092\u6574\u5f62\u3059\u308b\n| [force_format_strings](#force_format_strings) | \\<boolean\\><br>Default: false | Always format string literals|string\u30ea\u30c6\u30e9\u30eb\u3092\u6574\u5f62\u3059\u308b\n| [chains_overflow_last](#chains_overflow_last) | \\<boolean\\><br>Default: true | Allow last call in method chain to break the line|\u958b\u59cb\u3068\u7d42\u4e86\u306eindent\u304c\u5408\u308f\u306a\u3044\u3088\u3046\u306a\u30c1\u30a7\u30fc\u30f3\u6574\u5f62\u3092\u3059\u308b\u304b\n| [take_source_hints](#take_source_hints) | \\<boolean\\><br>Default: true | Retain some formatting characteristics from the source code|\u30b3\u30fc\u30c9\u306e\u66f8\u304d\u65b9\u306b\u5408\u308f\u305b\u305f\u878d\u901a\u306e\u5229\u304f\u6574\u5f62\u3092\u3059\u308b\u304b\n| [hard_tabs](#hard_tabs) | \\<boolean\\><br>Default: false | Use tab characters for indentation, spaces for alignment|indent\u306b\u30bf\u30d6\u3092\u4f7f\u3046\u304b\n| [wrap_comments](#wrap_comments) | \\<boolean\\><br>Default: false | Break comments to fit on the line|\u30b3\u30e1\u30f3\u30c8\u3092max_width\u30fbideal_width\u5e45\u4ee5\u5185\u306b\u53ce\u3081\u308b\u304b\n| [normalise_comments](#normalise_comments) | \\<boolean\\><br>Default: true |Convert /* */ comments to // comments where possible|/* */\u30b3\u30e1\u30f3\u30c8\u3092//\u30b3\u30e1\u30f3\u30c8\u306b\u3059\u308b\u304b\n| [wrap_match_arms](#wrap_match_arms) | \\<boolean\\><br>Default: true | Wrap multiline match arms in blocks|match\u53e5\u3067\u4e00\u884c\u5f0f\u306e\u6642\u306b\u5197\u9577\u306ablocks\u3092\u53d6\u308a\u9664\u304f\u304b\n| [match_block_trailing_comma](#match_block_trailing_comma) | \\<boolean\\><br>Default: false | Put a trailing comma after a block based match arm (non-block arms are not affected)|match\u53e5\u3067block\u306b\u5e38\u306b\u30ab\u30f3\u30de\u3092\u4ed8\u3051\u308b\u304b\n| [match_wildcard_trailing_comma](#match_wildcard_trailing_comma) | \\<boolean\\><br>Default: true | Put a trailing comma after a wildcard arm|match\u53e5\u3067wildcard\u6307\u5b9a(_)\u306b\u5e38\u306b\u30ab\u30f3\u30de\u3092\u4ed8\u3051\u308b\u304b\n| write_mode | [Replace&#124;<br>Overwrite&#124;<br>Display&#124;<br>Diff&#124;<br>Coverage&#124;<br>Plain&#124;<br>Checkstyle] <br>Default: Replace | What Write Mode to use when none is supplied: Replace, Overwrite, Display, Diff, Coverage|\u7d50\u679c\u3092\u3069\u3046\u3059\u308b\u304b\u3002Replace: \u30bd\u30fc\u30b9\u3092\u7f6e\u304d\u63db\u3048\u308b\u3001\u53e4\u3044\u30bd\u30fc\u30b9\u306f.bk\u3068\u4ed8\u3051\u3066\u9000\u907f\u3055\u308c\u308b\u3001Overwrite: \u30bd\u30fc\u30b9\u3092\u7f6e\u304d\u63db\u3048\u308b\u3001Display: \u7d50\u679c\u306b\u5404\u5bfe\u8c61\u30bd\u30fc\u30b9\u540d\u3084report_todo\u30fbreport_fixme\u7d50\u679c\u3092\u4ed8\u4e0e\u3057\u3066\u6a19\u6e96\u51fa\u529b\u3078\u51fa\u529b\u3059\u308b\u3001Diff: \u7d50\u679c\u306e\u5dee\u5206\u3092\u6a19\u6e96\u51fa\u529b\u3078\u51fa\u529b\u3059\u308b\u3001Plain: \u7d50\u679c\u3092\u305d\u306e\u307e\u307e\u6a19\u6e96\u51fa\u529b\u3078\u51fa\u529b\u3059\u308b\u3001Coverage: \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30b3\u30e1\u30f3\u30c8\u3092\u6b8b\u3057\u3001\u901a\u5e38\u30b3\u30e1\u30f3\u30c8\u3084println!\u7b49\u306e\u30de\u30af\u30ed\u306b\u4ed8\u3051\u3066\u308b\u30bb\u30df\u30b3\u30ed\u30f3\u7b49\u3092X\u306b\u5909\u63db\u3059\u308b\u3001\u30de\u30af\u30ed\u306e\u30bb\u30df\u30b3\u30ed\u30f3\u304c\u5bfe\u8c61\u306b\u306a\u308b\u306e\u304c\u7406\u7531\u4e0d\u660e\n\n\n# \u9069\u7528\u30b3\u30fc\u30c9\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u4e00\u89a7\n\n\u30b3\u30fc\u30c9\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3068\u95a2\u4fc2\u306e\u3042\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u9069\u7528\u4f8b\u3067\u3059\u3001\u9069\u7528\u30aa\u30d7\u30b7\u30e7\u30f3\u4ee5\u5916\u306fDefault\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n## max_width\n\n```rust\n// max_width = 100\nfn f(aaaaaa: i32, bbbbb: i32) -> i32\n    where T: Foo\n{\n    3\n}\n\n// max_width = 50\nfn f(aaaaaa: i32,\n     bbbbb: i32)\n     -> i32\n    where T: Foo\n{\n    3\n}\n\n```\n\n\n## tab_spaces\n\n```rust\n// tab_spaces = 4\nfn main() {\n    let x = 3;\n}\n\n// tab_spaced = 2\nfn main() {\n  let x = 3;\n}\n```\n\n\n## fn_call_width\n\n```rust\n// fn_call_width = 21\nfn main() {\n    foo(\"fn\", \"call\", \"width\");\n}\n\n// fn_call_width = 20\nfn main() {\n    foo(\"fn\",\n        \"call\",\n        \"width\");\n}\n```\n\n\n## struct_lit_width\n\n```rust\n// struct_lit_width = 16\nfn main() {\n    Hoge { a: \"hoge\", b: 12 };\n}\n\n// struct_lit_width = 15\nfn main() {\n    Hoge {\n        a: \"hoge\",\n        b: 12,\n    };\n}\n```\n\n\n## fn_brace_style\n\n```rust\n// fn_brace_style = \"AlwaysNextLine\"\nfn f()\n{\n    3;\n}\nfn f2<T>()\n    where T: Foo\n{\n    3;\n}\n\n// fn_brace_style = \"PreferSameLine\"\nfn f() {\n    3;\n}\nfn f<T>()\n    where T: Foo {\n    3;\n}\n\n// fn_brace_style = \"SameLineWhere\"\nfn f() {\n    3;\n}\nfn f<T>()\n    where T: Foo\n{\n    3;\n}\n```\n\n\n## item_brace_style\n\n```rust\n// item_brace_style = \"AlwaysNextLine\"\ntrait Trait\n{\n    fn f(&self) {}\n}\ntrait Trait<T>\n    where T: Foo\n{\n    fn f(&self) {}\n}\n\n// item_brace_style = \"PreferSameLine\"\ntrait Trait {\n    fn f(&self) {}\n}\ntrait Trait<T>\n    where T: Foo {\n    fn f(&self) {}\n}\n\n// item_brace_style = \"SameLineWhere\"\ntrait Trait {\n    fn f(&self) {}\n}\ntrait Trait<T>\n    where T: Foo\n{\n    fn f(&self) {}\n}\n```\n\n\n## impl_empty_single_line\n\n```rust\n// impl_empty_single_line = true\nimpl Trait {}\nimpl Trait<T> where T: Foo {}\n\n// impl_empty_single_line = false\nimpl Trait {\n}\nimpl Trait<T>\n    where T: Foo\n{\n}\n```\n\n## fn_empty_single_line\n\n```rust\n// fn_empty_single_line = true\nfn f() {}\nfn f<T>() where T: Foo {}\n\n// fn_empty_single_line = false\nfn f() {\n}\nfn f<T>()\n    where T: Foo\n{\n}\n```\n\n\n## fn_single_line\n\n```rust\n// fn_single_line = false\nfn f() {\n    foo();\n}\n\n// fn_single_line = true\nfn f() { foo(); }\n```\n\n\n## fn_return_indent\n\n```rust\n// max_width = 40\n// fn_return_indent = \"WithArgs\"\nfn f<T>(aaa: T,\n        bbb: i32,\n        ccc: i32)\n        -> i32\n    where T: Foo\n{\n    3;\n}\n\n// max_width = 40\n// fn_return_indent = \"WithWhereClause\"\nfn f<T>(aaa: T,\n        bbb: i32,\n        ccc: i32)\n    -> i32\n    where T: Foo\n{\n    3;\n}\n```\n\n\n## fn_args_paren_newline\n\n```rust\n// max_width = 18\n// fn_args_paren_newline = true\nfn long_long_func\n    (aaa: i32,\n     bbb: i32) {\n    3;\n}\n\n// max_width = 18\n// fn_args_paren_newline = false\nfn long_long_func(\n    aaa: i32,\n    bbb: i32) {\n    3;\n}\n```\n\n## fn_args_density\n\n```rust\n// max_width = 39\n// fn_args_density = \"Compressed\"\nfn long_long_func(a: i32, b: i32,\n                  c: i32) {\n    3;\n}\nfn long_func(a: i32, b: i32, c: i32) {\n    3;\n}\n\n// max_width = 39\n// fn_args_density = \"Tall\" # same \"CompressedIfEmpty\"\nfn long_long_func(a: i32,\n                  b: i32,\n                  c: i32) {\n    3;\n}\nfn long_func(a: i32, b: i32, c: i32) {\n    3;\n}\n\n// max_width = 39\n// fn_args_density = \"Vertical\"\nfn long_long_func(a: i32,\n                  b: i32,\n                  c: i32) {\n    3;\n}\nfn long_func(a: i32,\n             b: i32,\n             c: i32) {\n    3;\n}\n```\n\n\n## fn_args_layout\n\n```rust\n// max_width = 39\n// fn_args_layout = \"Visual\"\nfn long_long_func(a: i32,\n                  b: i32,\n                  c: i32) {\n    3;\n}\nfn long_func(a: i32, b: i32, c: i32) {\n    3;\n}\n\n// max_width = 39\n// fn_args_layout = \"Block\"\nfn long_long_func(\n    a: i32,\n    b: i32,\n    c: i32\n) {\n    3;\n}\nfn long_func(a: i32, b: i32, c: i32) {\n    3;\n}\n\n// max_width = 39\n// fn_args_layout = \"BlockAlways\"\nfn long_long_func(\n    a: i32,\n    b: i32,\n    c: i32\n) {\n    3;\n}\nfn long_func(\n    a: i32, b: i32, c: i32\n) {\n    3;\n}\n```\n\n\n## fn_arg_indent\n\n```rust\n// max_width = 39\n// fn_arg_indent = \"Inherit\"\nfn long_long_func(a: i32,\nb: i32,\nc: i32) {\n    3;\n}\n\n// max_width = 39\n// fn_arg_indent = \"Tabbed\"\nfn long_long_func(a: i32,\n    b: i32,\n    c: i32) {\n    3;\n}\n\n// max_width = 39\n// fn_arg_indent = \"Visual\"\nfn long_long_func(a: i32,\n                  b: i32,\n                  c: i32) {\n    3;\n}\n```\n\n\n## type_punctuation_density\n\n```rust\n// type_punctuation_density = \"Compressed\"\nstruct Hoge<T=Foo+std::marker::Copy> {\n    x: T,\n}\n\n// type_punctuation_density = \"Wide\"\nstruct Hoge<T = Foo + std::marker::Copy> {\n    x: T,\n}\n```\n\n\n## where_density\n\n```rust\n// max_width = 39\n// where_density = \"Compressed\"\ntrait LongLongTrait<T> where T: Foo {}\ntrait LongLongTrait<T> where T: Foo\n{\n    fn f(&self);\n}\ntrait LongLongLongLongTrait<T>\n    where T: Foo\n{\n}\ntrait LongLongLongLongTrait<T>\n    where T: Foo\n{\n    fn f(&self);\n}\n\n// max_width = 39\n// where_density = \"Tall\" # same \"Vertical\"\ntrait LongLongTrait<T>\n    where T: Foo\n{\n}\ntrait LongLongTrait<T>\n    where T: Foo\n{\n    fn f(&self);\n}\ntrait LongLongLongLongTrait<T>\n    where T: Foo\n{\n}\ntrait LongLongLongLongTrait<T>\n    where T: Foo\n{\n    fn f(&self);\n}\n\n// max_width = 39\n// where_density = \"CompressedIfEmpty\"\ntrait LongLongTrait<T> where T: Foo {}\ntrait LongLongTrait<T>\n    where T: Foo\n{\n    fn f(&self);\n}\ntrait LongLongLongLongTrait<T>\n    where T: Foo\n{\n}\ntrait LongLongLongLongTrait<T>\n    where T: Foo\n{\n    fn f(&self);\n}\n```\n\n\n## where_indent\n\n```rust\n// where_indent = \"Inherit\"\ntrait Trait<T>\nwhere T: Foo\n{\n    fn f(&self);\n}\n\n// where_indent = \"Tabbed\"\ntrait Trait<T>\n    where T: Foo\n{\n    fn f(&self);\n}\n\n// where_indent = \"Visual\"\ntrait Trait<T>\n    where T: Foo\n{\n    fn f(&self);\n}\n```\n\n\n## where_layout\n\n```rust\n// max_width = 60\n// where_layout = \"Vertical\"\nfn f<TTT, UUU, VVV>(a: TTT, b: UUU, c: VVV)\n    where TTT: Foo,\n          UUU: Hoge,\n          VVV: Piyo\n{\n    3;\n}\nfn f<TTTTTTTTTT, UUUUUUUUUU, VVVVVVVVVV>(a: TTTTTTTTTT,\n                                         b: UUUUUUUUUU,\n                                         c: VVVVVVVVVV)\n    where TTTTTTTTTT: Foo,\n          UUUUUUUUUU: Hoge,\n          VVVVVVVVVV: Piyo\n{\n    3;\n}\n\n// max_width = 60\n// where_layout = \"HorizontalVertical\"\nfn f<TTT, UUU, VVV>(a: TTT, b: UUU, c: VVV)\n    where TTT: Foo, UUU: Hoge, VVV: Piyo\n{\n    3;\n}\nfn f<TTTTTTTTTT, UUUUUUUUUU, VVVVVVVVVV>(a: TTTTTTTTTT,\n                                         b: UUUUUUUUUU,\n                                         c: VVVVVVVVVV)\n    where TTTTTTTTTT: Foo,\n          UUUUUUUUUU: Hoge,\n          VVVVVVVVVV: Piyo\n{\n    3;\n}\n\n// max_width = 60\n// where_layout = \"Mixed\"\nfn f<TTT, UUU, VVV>(a: TTT, b: UUU, c: VVV)\n    where TTT: Foo, UUU: Hoge, VVV: Piyo\n{\n    3;\n}\nfn f<TTTTTTTTTT, UUUUUUUUUU, VVVVVVVVVV>(a: TTTTTTTTTT,\n                                         b: UUUUUUUUUU,\n                                         c: VVVVVVVVVV)\n    where TTTTTTTTTT: Foo, UUUUUUUUUU: Hoge,\n          VVVVVVVVVV: Piyo\n{\n    3;\n}\n\n// max_width = 60\n// where_layout = \"Horizontal\"\nfn f<TTT, UUU, VVV>(a: TTT, b: UUU, c: VVV)\n    where TTT: Foo, UUU: Hoge, VVV: Piyo\n{\n    3;\n}\nfn f<TTTTTTTTTT, UUUUUUUUUU, VVVVVVVVVV>(a: TTTTTTTTTT,\n                                         b: UUUUUUUUUU,\n                                         c: VVVVVVVVVV)\n    where TTTTTTTTTT: Foo, UUUUUUUUUU: Hoge, VVVVVVVVVV: Piyo\n{\n    3;\n}\n```\n\n\n## where_pred_indent\n\n```rust\n// where_pred_indent = \"Inherit\"\nfn f<T, U, V>(a: T, b: U, c: V)\n    where T: Foo,\n    U: Hoge,\n    V: Piyo\n{\n    3;\n}\n\n// where_pred_indent = \"Tabbed\"\nfn f<T, U, V>(a: T, b: U, c: V)\n    where T: Foo,\n        U: Hoge,\n        V: Piyo\n{\n    3;\n}\n\n// where_pred_indent = \"Visual\"\nfn f<T, U, V>(a: T, b: U, c: V)\n    where T: Foo,\n          U: Hoge,\n          V: Piyo\n{\n    3;\n}\n```\n\n\n## where_trailing_comma\n\n```rust\n// where_trailing_comma = false\nfn f<T, U, V>(a: T, b: U, c: V)\n    where T: Foo,\n          U: Hoge,\n          V: Piyo\n{\n    3;\n}\n\n// where_trailing_comma = true\nfn f<T, U, V>(a: T, b: U, c: V)\n    where T: Foo,\n          U: Hoge,\n          V: Piyo,\n{\n    3;\n}\n```\n\n## generics_indent\n\n```rust\n// max_width = 18\n// generics_indent = \"Inherit\"\ntrait Trait<T,\nU,\nD>\n    where T: Foo\n{\n}\n\n// max_width = 18\n// generics_indent = \"Tabbed\"\ntrait Trait<T,\n    U,\n    D>\n    where T: Foo\n{\n}\n\n// max_width = 18\n// generics_indent = \"Visual\"\ntrait Trait<T,\n            U,\n            D>\n    where T: Foo\n{\n}\n```\n\n\n## struct_trailing_comma\n\n```rust\n// struct_trailing_comma = \"Always\"  # same \"Vertical\"\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\n// struct_trailing_comma = \"Never\"\nstruct Point {\n    x: i32,\n    y: i32\n}\n```\n\n## struct_lit_trailing_comma\n\n```rust\n// struct_lit_trailing_comma = \"Always\"\nfn main() {\n    Hoge { a: \"hoge\", b: 12, };\n    Hoge {\n        long_a: \"hoge\",\n        long_b: 12,\n    };\n}\n\n// struct_lit_trailing_comma = \"Never\"\nfn main() {\n    Hoge { a: \"hoge\", b: 12 };\n    Hoge {\n        long_a: \"hoge\",\n        long_b: 12\n    };\n}\n\n// struct_lit_trailing_comma = \"Vertical\"\nfn main() {\n    Hoge { a: \"hoge\", b: 12 };\n    Hoge {\n        long_a: \"hoge\",\n        long_b: 12,\n    };\n}\n```\n\n## struct_lit_style\n\n```rust\n// struct_lit_style = \"Visual\"\nfn main() {\n    Hoge { a: \"hoge\", b: 12 };\n    Hoge { long_a: \"hoge\",\n           long_b: 12, };\n}\n\n// struct_lit_style = \"Block\"\nfn main() {\n    Hoge { a: \"hoge\", b: 12 };\n    Hoge {\n        long_a: \"hoge\",\n        long_b: 12,\n    };\n}\n```\n\n\n## struct_lit_multiline_style\n\n```rust\n// struct_lit_multiline_style = \"PreferSingle\"\nfn main() {\n    Hoge { a: \"hoge\", b: 12 };\n    Hoge {\n        long_a: \"hoge\",\n        long_b: 12,\n    };\n}\n\n// struct_lit_multiline_style = \"ForceMulti\"\nfn main() {\n    Hoge {\n        a: \"hoge\",\n        b: 12,\n    };\n    Hoge {\n        long_a: \"hoge\",\n        long_b: 12,\n    };\n}\n```\n\n\n## enum_trailing_comma\n\n```rust\n// enum_trailing_comma = true\nenum Hoge {\n    Foo,\n    Piyo,\n}\n\n// enum_trailing_comma = false\nenum Hoge {\n    Foo,\n    Piyo\n}\n```\n\n## chain_base_indent\n\n```rust\n// chain_base_indent = \"Inherit\"\nfn main() {\n    let z = Foo {\n        field1: val1,\n        field2: val2,\n    };\n\n    let x = Foo {\n        field1: val1,\n        field2: val2,\n    }\n    .method_call()\n    .method_call();\n\n    let y = if cond {\n        x\n    } else {\n        val2\n    }\n    .method_call();\n}\n\n// chain_base_indent = \"Tabbed\"\nfn main() {\n    let z = Foo {\n        field1: val1,\n        field2: val2,\n    };\n\n    let x = Foo {\n            field1: val1,\n            field2: val2,\n        }\n        .method_call()\n        .method_call();\n\n    let y = if cond {\n            x\n        } else {\n            val2\n        }\n        .method_call();\n}\n\n// chain_base_indent = \"Visual\"\nfn main() {\n    let z = Foo {\n        field1: val1,\n        field2: val2,\n    };\n\n    let x = Foo {\n                field1: val1,\n                field2: val2,\n            }\n            .method_call()\n            .method_call();\n\n    let y = if cond {\n                x\n            } else {\n                val2\n            }\n            .method_call();\n}\n```\n\n\n## chain_indent\n\n```rust\n// chain_indent = \"Inherit\"\nfn main() {\n    let x = f().my_long_function()\n               .my_even_longer_function()\n               .do_it();\n\n    let y = my_long_function()\n    .my_even_longer_function()\n    .do_it();\n}\n\n// chain_indent = \"Tabbed\"\nfn main() {\n    let x = f().my_long_function()\n               .my_even_longer_function()\n               .do_it();\n\n    let y = my_long_function()\n        .my_even_longer_function()\n        .do_it();\n}\n\n// chain_indent = \"Visual\"\nfn main() {\n    let x = f().my_long_function()\n               .my_even_longer_function()\n               .do_it();\n\n    let y = my_long_function()\n                .my_even_longer_function()\n                .do_it();\n}\n```\n\n\n## reorder_imports\n\n```rust\n// reorder_imports = false\nuse {aa, ab, ac, b, Ab, Z};\n\n// reorder_imports = true\nuse {Ab, Z, aa, ab, ac, b};\n```\n\n\n## single_line_if_else\n\n```rust\n// single_line_if_else = false\nfn main() {\n    let x = if 3 == 3 {\n        \"hoge\"\n    } else {\n        \"fuga\"\n    };\n}\n\n// single_line_if_else = true\nfn main() {\n    let x = if 3 == 3 { \"hoge\" } else { \"fuga\" };\n}\n```\n\n\n## format_strings\n\n```rust\n// max_width = 18\n// format_strings = false\nmod m {\n    fn f() {\n        let s = \"aasa aasaa\";\n    }\n\n    mod m2 {\n        fn f() {\n            let s = \"aasa aasaa\";\n        }\n    }\n}\n\nfn main() {\n    let s1 = \"AAAA AAAAaAA AAA\";\n    let s2 = \"AAAAAAAAAAAAAAaA\";\n}\n\n\n// max_width = 18\n// format_strings = true\nmod m {\n    fn f() {\n        let s =\n            \"aasa \\\n             aasaa\";\n    }\n\n    mod m2 {\n        fn f() {\n            let s = \"aasa aasaa\";\n        }\n    }\n}\n\nfn main() {\n    let s1 = \"AAAA \\\n              AAAAaAA \\\n              AAA\";\n    let s2 = \"AAAAAAAAAAAAAAaA\";\n}\n```\n\n\n## force_format_strings\n\n```rust\n// force_format_strings = false\nfn main() {\n    let expected = \"\n        ; Function Attrs: nounwind\n        declare void @llvm.memset.p0i8.i32(i8* nocapture, i8, i32, i32, i1) #0\n        declare i32 @write(i32, i8*, i32)\n        declare i32 @putchar(i32)\n        declare i32 @getchar()\n        define i32 @main() {\n            entry:\n              ret i32 0\n        }\n        attributes #0 = { nounwind }\n    \";\n}\n\n// force_format_strings = true\nfn main() {\n    let expected = \"\n        ; Function Attrs: nounwind\n        declare void \\\n                    @llvm.memset.p0i8.i32(i8* nocapture, i8, i32, i32, i1) #0\n        declare i32 \\\n                    @write(i32, i8*, i32)\n        declare i32 @putchar(i32)\n        declare i32 \\\n                    @getchar()\n        define i32 @main() {\n            entry:\n              ret \\\n                    i32 0\n        }\n        attributes #0 = { nounwind }\n    \";\n}\n```\n\n\n## chains_overflow_last\n\n```rust\n// chains_overflow_last = true\nfn main() {\n    x().y(|| match cond() {\n        true => (),\n        false => (),\n    });\n\n    loong_func().quux(move || if true {\n        1\n    } else {\n        2\n    });\n\n    fffffffffffffffffff(a, {\n        SCRIPT_TASK_ROOT.with(|root| {\n            *root.borrow_mut() = Some(&script_task);\n        });\n    });\n}\n\n// chains_overflow_last = false\nfn main() {\n    x().y(|| match cond() {\n           true => (),\n           false => (),\n       });\n\n    loong_func()\n        .quux(move || if true {\n            1\n        } else {\n            2\n        });\n\n    fffffffffffffffffff(a,\n                        {\n                            SCRIPT_TASK_ROOT.with(|root| {\n                                                *root.borrow_mut() = Some(&script_task);\n                                            });\n                        });\n}\n```\n\n\n## take_source_hints\n\n```rust\n// take_source_hints = true\nfn main() {\n    // \u6539\u884c\u3057\u3066\u308b\u306a\u3089\u305d\u308c\u3092\u7dad\u6301\n    a.b\n     .c\n     .d();\n    a.b.c.d();\n}\n\n// take_source_hints = false\nfn main() {\n    a.b.c.d();\n    a.b.c.d();\n}\n```\n\n\n## hard_tabs\n\n```rust\n// hard_tabs = false\nfn main() {\n    // indent\u304c\u30b9\u30da\u30fc\u30b9\n    3;\n}\n\n// hard_tabs = true\nfn main() {\n\t// indent\u304c\u30bf\u30d6\n\t3;\n}\n```\n\n\n## wrap_comments\n\n```rust\n// max_width = 30\n// wrap_comments = false\nfn main() {\n    // looooooooooooooooooooooooooong comment\n}\n\n// max_width = 30\n// wrap_comments = true\nfn main() {\n    // looooooooooooooooooooooooooong\n    // comment\n}\n```\n\n\n## normalise_comments\n\n```rust\n// normalise_comments = false\nfn main() {\n    /* normal comment\n     * abc\n     * def\n     * */\n}\n\n// normalise_comments = true\nfn main() {\n    // normal comment\n    // abc\n    // def\n    //\n}\n```\n\n\n## wrap_match_arms\n\n```rust\n// wrap_match_arms = false\nfn main() {\n    match x {\n        a => {\n            \"line1\"\n        }\n        _ => {\n            \"other\"\n        }\n    }\n}\n\n// wrap_match_arms = true\nfn main() {\n    match x {\n        a => \"line1\",\n        _ => \"other\",\n    }\n}\n```\n\n\n## match_block_trailing_comma\n\n```rust\n// wrap_match_arms = false\n// match_block_trailing_comma = false\nfn main() {\n    match x {\n        a => {\n            \"line1\"\n        }\n        _ => {\n            \"other\"\n        }\n    }\n}\n\n// wrap_match_arms = false\n// match_block_trailing_comma = true\nfn main() {\n    match x {\n        a => {\n            \"line1\"\n        },\n        _ => {\n            \"other\"\n        },\n    }\n}\n```\n\n\n## match_wildcard_trailing_comma\n\n```rust\n// match_wildcard_trailing_comma = false\nfn main() {\n    match x {\n        a => \"line1\",\n        _ => \"other\"\n    }\n}\n\n// match_wildcard_trailing_comma = true\nfn main() {\n    match x {\n        a => \"line1\",\n        _ => \"other\",\n    }\n}\n```\n\n\n# \u53c2\u8003\n\n* [rustfmt](https://github.com/rust-lang-nursery/rustfmt)\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n", "tags": ["rust"]}