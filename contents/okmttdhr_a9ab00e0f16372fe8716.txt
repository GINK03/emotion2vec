{"context": " More than 1 year has passed since last update.\n\nKnockoutJs Tutorial\uff5cLoading and saving data\n\nknockout.js tutorial\uff15\u3053\u3081http://learn.knockoutjs.com/#/?tutorial=collections ajax\u3067\u53d7\u4fe1\u3068\u9001\u4fe1\u3092\u3057\u307e\u3059\u3002\u65e5\u672c\u8a9e\u3067\u8efd\u304f\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u5165\u308c\u307e\u3057\u305f\u3002\n\nHTML\n\n<h3>Tasks</h3>\n\n<form data-bind=\"submit: addTask\">\n    Add task: <input data-bind=\"value: newTaskText\" placeholder=\"What needs to be done?\" />\n    <button type=\"submit\">Add</button>\n</form>\n\n<ul data-bind=\"foreach: tasks, visible: tasks().length > 0\">\n    <li>\n        <input type=\"checkbox\" data-bind=\"checked: isDone\" />\n        <input data-bind=\"value: title, disable: isDone\" />\n        <a href=\"#\" data-bind=\"click: $parent.removeTask\">Delete</a>\n    </li> \n</ul>\n\nYou have <b data-bind=\"text: incompleteTasks().length\">&nbsp;</b> incomplete task(s)\n<span data-bind=\"visible: incompleteTasks().length == 0\"> - it's beer time!</span>\n\n\n<!-- HTML \u306e <form> \u3067 post \u3059\u308b\u65b9\u6cd5\u3067\u3059\u3002\u3053\u308c\u3060\u3051\u3067\u3067\u304d\u3066\u3057\u307e\u3046\u3002 -->\n<form action=\"/tasks/saveform\" method=\"post\">\n    <!-- input \u3068 textarea \u306f\u3001hidden\u304b\u305d\u3046\u3067\u306a\u3044\u304b\u306e\u9055\u3044 -->\n    <textarea name=\"tasks\" data-bind=\"value: ko.toJSON(tasks)\"></textarea>\n    <input type=\"hidden\" name=\"tasks\" data-bind=\"value: ko.toJSON(tasks)\"/>\n    <button type=\"submit\">Save</button>\n</form>\n\n<!-- ajax \u3067 post \u3059\u308b\u5834\u5408\u306f\u30e1\u30bd\u30c3\u30c9\u3092\u66f8\u304f -->\n<button data-bind=\"click: save\">Save</button>\n\n\nJS\n\nfunction Task(data) {\n    this.title = ko.observable(data.title);\n    this.isDone = ko.observable(data.isDone);\n}\n\nfunction TaskListViewModel() {\n    // Data\n    var self = this;\n    self.tasks = ko.observableArray([]);\n    self.newTaskText = ko.observable();\n    self.incompleteTasks = ko.computed(function() {\n        return ko.utils.arrayFilter(self.tasks(), function(task) { return !task.isDone() && !task._destroy });\n    });\n\n    // Operations\n    self.addTask = function() {\n        self.tasks.push(new Task({ title: this.newTaskText() }));\n        self.newTaskText(\"\");\n    };\n    self.removeTask = function(task) { self.tasks.destroy(task) };\n\n    // \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306a\u3069\u304b\u3089\u5024\u3092\u53d6\u5f97\u3057\u3066\u304a\u304f\u7528\n    $.getJSON(\"/tasks\", function(allData) {\n        var mappedTasks = $.map(allData, function(item) { return new Task(item) });\n        self.tasks(mappedTasks);\n    });\n\n    // \u4fdd\u5b58\u51e6\u7406\n    self.save = function() {\n        $.ajax(\"/tasks\", {\n            data: ko.toJSON({ tasks: self.tasks }),\n            type: \"post\", contentType: \"application/json\",\n            success: function(result) { alert(result) }\n        });\n    }; \n}\n\nko.applyBindings(new TaskListViewModel());\n\n\n\n# **KnockoutJs Tutorial\uff5cLoading and saving data**\n\nknockout.js tutorial\uff15\u3053\u3081http://learn.knockoutjs.com/#/?tutorial=collections ajax\u3067\u53d7\u4fe1\u3068\u9001\u4fe1\u3092\u3057\u307e\u3059\u3002\u65e5\u672c\u8a9e\u3067\u8efd\u304f\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u5165\u308c\u307e\u3057\u305f\u3002\n\n# **HTML**\n\n```\n<h3>Tasks</h3>\n\n<form data-bind=\"submit: addTask\">\n    Add task: <input data-bind=\"value: newTaskText\" placeholder=\"What needs to be done?\" />\n    <button type=\"submit\">Add</button>\n</form>\n\n<ul data-bind=\"foreach: tasks, visible: tasks().length > 0\">\n    <li>\n        <input type=\"checkbox\" data-bind=\"checked: isDone\" />\n        <input data-bind=\"value: title, disable: isDone\" />\n        <a href=\"#\" data-bind=\"click: $parent.removeTask\">Delete</a>\n    </li> \n</ul>\n\nYou have <b data-bind=\"text: incompleteTasks().length\">&nbsp;</b> incomplete task(s)\n<span data-bind=\"visible: incompleteTasks().length == 0\"> - it's beer time!</span>\n\n\n<!-- HTML \u306e <form> \u3067 post \u3059\u308b\u65b9\u6cd5\u3067\u3059\u3002\u3053\u308c\u3060\u3051\u3067\u3067\u304d\u3066\u3057\u307e\u3046\u3002 -->\n<form action=\"/tasks/saveform\" method=\"post\">\n    <!-- input \u3068 textarea \u306f\u3001hidden\u304b\u305d\u3046\u3067\u306a\u3044\u304b\u306e\u9055\u3044 -->\n    <textarea name=\"tasks\" data-bind=\"value: ko.toJSON(tasks)\"></textarea>\n    <input type=\"hidden\" name=\"tasks\" data-bind=\"value: ko.toJSON(tasks)\"/>\n    <button type=\"submit\">Save</button>\n</form>\n\n<!-- ajax \u3067 post \u3059\u308b\u5834\u5408\u306f\u30e1\u30bd\u30c3\u30c9\u3092\u66f8\u304f -->\n<button data-bind=\"click: save\">Save</button>\n```\n\n\n# **JS**\n\n```\nfunction Task(data) {\n    this.title = ko.observable(data.title);\n    this.isDone = ko.observable(data.isDone);\n}\n\nfunction TaskListViewModel() {\n    // Data\n    var self = this;\n    self.tasks = ko.observableArray([]);\n    self.newTaskText = ko.observable();\n    self.incompleteTasks = ko.computed(function() {\n        return ko.utils.arrayFilter(self.tasks(), function(task) { return !task.isDone() && !task._destroy });\n    });\n\n    // Operations\n    self.addTask = function() {\n        self.tasks.push(new Task({ title: this.newTaskText() }));\n        self.newTaskText(\"\");\n    };\n    self.removeTask = function(task) { self.tasks.destroy(task) };\n    \n    // \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306a\u3069\u304b\u3089\u5024\u3092\u53d6\u5f97\u3057\u3066\u304a\u304f\u7528\n    $.getJSON(\"/tasks\", function(allData) {\n        var mappedTasks = $.map(allData, function(item) { return new Task(item) });\n        self.tasks(mappedTasks);\n    });\n    \n    // \u4fdd\u5b58\u51e6\u7406\n    self.save = function() {\n        $.ajax(\"/tasks\", {\n            data: ko.toJSON({ tasks: self.tasks }),\n            type: \"post\", contentType: \"application/json\",\n            success: function(result) { alert(result) }\n        });\n    }; \n}\n\nko.applyBindings(new TaskListViewModel());\n```\n", "tags": ["knockoutjs", "JavaScript"]}