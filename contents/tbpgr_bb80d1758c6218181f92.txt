{"tags": ["Brainf*ck", "Ruby", "codeiq"], "context": " More than 1 year has passed since last update.\n\nBrainf*ck | Ruby\u3067Brainf*ck\u306e\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3059\u308b\n\n\u6982\u8981\nRuby\u3067Brainf*ck\u306e\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\u5fc5\u8981\u306b\u99c6\u3089\u308c\u305f\u306e\u3067\u4f5c\u308a\u307e\u3057\u305f\u3002\n\uff1d\uff1e\u5fc5\u8981\u306b\u306a\u3063\u305f\u8981\u56e0\uff08https://codeiq.jp/ace/tbpgr/q943\uff09\n\n\u5099\u8003\n\u4f7f\u3044\u6368\u3066\u306e\u30b3\u30fc\u30c9\u306a\u306e\u3067\u7f8e\u3057\u304f\u3057\u3088\u3046\u3068\u304b\u3001\u6c4e\u7528\u7684\u306b\u3057\u3088\u3046\u3068\u304b\u601d\u3063\u3066\u4f5c\u3063\u3066\u307e\u305b\u3093\n\n\u611a\u76f4\u7248\u751f\u6210\u5668\n\nbrainf__k_foolish.rb\nclass BrainF__k\n  class << self\n    def increment(count = 1)\n      '+' * count\n    end\n\n    def decrement(count = 1)\n      '-' * count\n    end\n\n    def next_pointer(count = 1)\n      '>' * count\n    end\n\n    def previous_pointer(count = 1)\n      '<' * count\n    end\n\n    def output(count = 1)\n      '.' * count\n    end\n\n    def comment(message)\n      \"; #{message}\"\n    end\n  end\nend\n\ntext = ARGV.first\ncodes = text.split('').map(&:ord).reduce('') do |codes, char|\n  codes += BrainF__k.increment(char)\n  codes += BrainF__k.output(1)\n  codes += BrainF__k.next_pointer(1)\n  codes += BrainF__k.comment(\"output #{char.chr}\\n\")\n  codes\nend\n\nprint codes\n\n\n\u547c\u3073\u51fa\u3057\u30b5\u30f3\u30d7\u30eb\n$ ruby brainf__k_foolish.rb 'brainf__k now'\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.>; output b\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.>; output r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.>; output a\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.>; output i\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.>; output n\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.>; output f\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.>; output _\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.>; output _\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.>; output k\n++++++++++++++++++++++++++++++++.>; output\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.>; output n\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.>; output o\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.>; output w\n\n\n\u5dee\u5206\u7248\u751f\u6210\u5668\n\nbrainf__k.rb\nclass BrainF__k\n  attr_reader :tables, :init_codes, :pointer\n  TEN_INCREMENT = '+' * 10\n\n  def initialize(char, comment = '')\n    comment = \";#{comment}\" if comment\n    char_code = char.ord\n    repeat = char_code / 10\n    rest = char_code % 10\n    @tables = []\n    @pointer = 0\n    @init_codes = \"#{TEN_INCREMENT}[>#{increment(repeat)}<-]>\\n#{increment(rest)}#{comment}\\n\"\n    @tables[@pointer] = char_code\n  end\n\n  def increment(count = 1)\n    @tables[@pointer] = 0 unless @tables[@pointer]\n    @tables[@pointer] += count\n    '+' * count\n  end\n\n  def decrement(count = 1)\n    @tables[@pointer] -= count\n    '-' * count\n  end\n\n  def diff(char_code)\n    diff_of_code = char_code - @tables[@pointer]\n    return '' if diff_of_code.zero?\n    @tables[@pointer] += diff_of_code\n    diff_of_code > 0 ? ('+' * diff_of_code) : ('-' * diff_of_code.abs)\n  end\n\n  def next_pointer(count = 1)\n    @pointer += count\n    '>' * count\n  end\n\n  def previous_pointer(count = 1)\n    @pointer -= count\n    '<' * count\n  end\n\n  def output(count = 1)\n    '.' * count\n  end\n\n  def comment(message)\n    \"; #{message}\"\n  end\nend\n\ntext = ARGV.first\nfirst_word = text[0]\nbf = BrainF__k.new(first_word, \"init by #{first_word}\")\ncodes = text.split('').map(&:ord).reduce(bf.init_codes) do |codes, char|\n  codes += bf.diff(char)\n  codes += bf.output(1)\n  codes += bf.comment(\"output #{char.chr}\\n\")\n  codes\nend\n\nprint codes\n\n\n\u547c\u3073\u51fa\u3057\u30b5\u30f3\u30d7\u30eb\n$ ruby brainf__k.rb 'hello brainf__k'\n++++++++++[>++++++++++<-]>\n++++;init by h\n.; output h\n---.; output e\n+++++++.; output l\n.; output l\n+++.; output o\n-------------------------------------------------------------------------------.; output\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.; output b\n++++++++++++++++.; output r\n-----------------.; output a\n++++++++.; output i\n+++++.; output n\n--------.; output f\n-------.; output _\n.; output _\n++++++++++++.; output k\n\n\n\u53c2\u7167\nGitHub\u306b\u7f6e\u304d\u307e\u3057\u305f\nhttps://github.com/tbpgr/brainf__k_generator\n# Brainf*ck | Ruby\u3067Brainf*ck\u306e\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3059\u308b\n\n## \u6982\u8981\nRuby\u3067Brainf*ck\u306e\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\u5fc5\u8981\u306b\u99c6\u3089\u308c\u305f\u306e\u3067\u4f5c\u308a\u307e\u3057\u305f\u3002\n\uff1d\uff1e\u5fc5\u8981\u306b\u306a\u3063\u305f\u8981\u56e0\uff08https://codeiq.jp/ace/tbpgr/q943\uff09\n\n## \u5099\u8003\n\u4f7f\u3044\u6368\u3066\u306e\u30b3\u30fc\u30c9\u306a\u306e\u3067\u7f8e\u3057\u304f\u3057\u3088\u3046\u3068\u304b\u3001\u6c4e\u7528\u7684\u306b\u3057\u3088\u3046\u3068\u304b\u601d\u3063\u3066\u4f5c\u3063\u3066\u307e\u305b\u3093\n\n## \u611a\u76f4\u7248\u751f\u6210\u5668\n\n~~~ruby:brainf__k_foolish.rb\nclass BrainF__k\n  class << self\n    def increment(count = 1)\n      '+' * count\n    end\n\n    def decrement(count = 1)\n      '-' * count\n    end\n\n    def next_pointer(count = 1)\n      '>' * count\n    end\n\n    def previous_pointer(count = 1)\n      '<' * count\n    end\n\n    def output(count = 1)\n      '.' * count\n    end\n\n    def comment(message)\n      \"; #{message}\"\n    end\n  end\nend\n\ntext = ARGV.first\ncodes = text.split('').map(&:ord).reduce('') do |codes, char|\n  codes += BrainF__k.increment(char)\n  codes += BrainF__k.output(1)\n  codes += BrainF__k.next_pointer(1)\n  codes += BrainF__k.comment(\"output #{char.chr}\\n\")\n  codes\nend\n\nprint codes\n~~~\n\n\u547c\u3073\u51fa\u3057\u30b5\u30f3\u30d7\u30eb\n\n~~~bash\n$ ruby brainf__k_foolish.rb 'brainf__k now'\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.>; output b\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.>; output r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.>; output a\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.>; output i\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.>; output n\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.>; output f\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.>; output _\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.>; output _\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.>; output k\n++++++++++++++++++++++++++++++++.>; output\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.>; output n\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.>; output o\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.>; output w\n~~~\n\n## \u5dee\u5206\u7248\u751f\u6210\u5668\n\n~~~ruby:brainf__k.rb\nclass BrainF__k\n  attr_reader :tables, :init_codes, :pointer\n  TEN_INCREMENT = '+' * 10\n\n  def initialize(char, comment = '')\n    comment = \";#{comment}\" if comment\n    char_code = char.ord\n    repeat = char_code / 10\n    rest = char_code % 10\n    @tables = []\n    @pointer = 0\n    @init_codes = \"#{TEN_INCREMENT}[>#{increment(repeat)}<-]>\\n#{increment(rest)}#{comment}\\n\"\n    @tables[@pointer] = char_code\n  end\n\n  def increment(count = 1)\n    @tables[@pointer] = 0 unless @tables[@pointer]\n    @tables[@pointer] += count\n    '+' * count\n  end\n\n  def decrement(count = 1)\n    @tables[@pointer] -= count\n    '-' * count\n  end\n\n  def diff(char_code)\n    diff_of_code = char_code - @tables[@pointer]\n    return '' if diff_of_code.zero?\n    @tables[@pointer] += diff_of_code\n    diff_of_code > 0 ? ('+' * diff_of_code) : ('-' * diff_of_code.abs)\n  end\n\n  def next_pointer(count = 1)\n    @pointer += count\n    '>' * count\n  end\n\n  def previous_pointer(count = 1)\n    @pointer -= count\n    '<' * count\n  end\n\n  def output(count = 1)\n    '.' * count\n  end\n\n  def comment(message)\n    \"; #{message}\"\n  end\nend\n\ntext = ARGV.first\nfirst_word = text[0]\nbf = BrainF__k.new(first_word, \"init by #{first_word}\")\ncodes = text.split('').map(&:ord).reduce(bf.init_codes) do |codes, char|\n  codes += bf.diff(char)\n  codes += bf.output(1)\n  codes += bf.comment(\"output #{char.chr}\\n\")\n  codes\nend\n\nprint codes\n~~~\n\n\u547c\u3073\u51fa\u3057\u30b5\u30f3\u30d7\u30eb\n\n~~~bash\n$ ruby brainf__k.rb 'hello brainf__k'\n++++++++++[>++++++++++<-]>\n++++;init by h\n.; output h\n---.; output e\n+++++++.; output l\n.; output l\n+++.; output o\n-------------------------------------------------------------------------------.; output\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.; output b\n++++++++++++++++.; output r\n-----------------.; output a\n++++++++.; output i\n+++++.; output n\n--------.; output f\n-------.; output _\n.; output _\n++++++++++++.; output k\n~~~\n\n## \u53c2\u7167\nGitHub\u306b\u7f6e\u304d\u307e\u3057\u305f\n\nhttps://github.com/tbpgr/brainf__k_generator\n"}