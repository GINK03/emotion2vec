{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\u4eca\u56de\u306f MQTT \u306e Subscriber \u5074\u306e\u30dc\u30c3\u30af\u30b9\u3092\u4f5c\u308a\u3001Pepper \u541b\u3067\u52d5\u4f5c\u3055\u305b\u3066\u307f\u307e\u3057\u305f\u3002\nPublisher \u5074\u3067\u52d5\u4f5c\u3055\u305b\u3066\u307f\u305f\u5185\u5bb9\u306f\u3053\u3061\u3089\u3002\n\nMQTT Publisher \u30dc\u30c3\u30af\u30b9\u3092\u4f5c\u308b\nMQTT Publisher \u30dc\u30c3\u30af\u30b9\u3092\u4f5c\u308b \u305d\u306e2\n\n\u307e\u3060\u307e\u3060\u3001MQTT \u52c9\u5f37\u4e2d\u3067\u3059\u3002\n\nMQTT Subscriber \u30dc\u30c3\u30af\u30b9\nMQTT \u306e Python \u7528\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\nPaho - Open Source messaging for M2M\n\n\n\u8a2d\u5b9a\u9805\u76ee\nMQTT \u306e\u30d6\u30ed\u30fc\u30ab\u306e\u60c5\u5831\u3068\u3001\u53d6\u5f97\u3059\u308b\u30c8\u30d4\u30c3\u30af\u306e\u60c5\u5831\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n\nPython \u30b3\u30fc\u30c9\nMQTT \u30d6\u30ed\u30fc\u30ab\u306b\u63a5\u7d9a\u3057\u3001\u30c8\u30d4\u30c3\u30af\u3092 Subscribe \u3057\u307e\u3059\u3002\u305d\u306e\u5f8c\u3001loop_forever \u3067\u53d7\u4fe1\u5f85\u6a5f\u72b6\u614b\u306b\u3002\n\u30d7\u30ed\u30b0\u30e9\u30e0\u7d42\u4e86\u6642\u306b\u306f\u30c8\u30d4\u30c3\u30af\u3092\u3000Unsubscribe \u3057\u307e\u3059\u3002\n\u30dc\u30c3\u30af\u30b9\u5185\u3067\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f7f\u7528\u65b9\u6cd5\u306f\u3001\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u9802\u304d\u307e\u3057\u305f\u3002\n\nPepper\u7528Tweet\u30dc\u30c3\u30af\u30b9\u3092\u3064\u304f\u308b\n\n(\u306a\u3093\u304b\u898b\u76f4\u3057\u3066\u305f\u3089\u3001\u30b3\u30fc\u30c9\u3092\u76f4\u3057\u305f\u304f\u306a\u3063\u3066\u304d\u305f)\nclass MyClass(GeneratedClass):\n    def __init__(self):\n        GeneratedClass.__init__(self)\n\n    def onLoad(self):\n        self.framemanager = ALProxy(\"ALFrameManager\")\n        self.folderName = None\n\n    def onUnload(self):\n        import sys\n\n        self.mqttc.unsubscribe(self.topic)\n\n        if self.folderName and self.folderName in sys.path:\n            sys.path.remove(self.folderName)\n        self.folderName = None\n\n    def onInput_onStart(self, payload):\n        import sys, os\n\n        self.folderName = os.path.join(\n            self.framemanager.getBehaviorPath(self.behaviorId), \"../lib\")\n        if self.folderName not in sys.path:\n            sys.path.append(self.folderName)\n\n        import paho.mqtt.client as paho\n\n        self.host       = self.getParameter(\"Broker Host\")\n        self.port       = self.getParameter(\"Broker Port\")\n        self.keep_alive = self.getParameter(\"KeepAlive\")\n        self.topic      = self.getParameter(\"Topic\")\n        self.qos        = self.getParameter(\"Qos\")\n\n        self.mqttc = paho.Client()\n        self.mqttc.on_message = self.onMessage\n        self.mqttc.connect(self.host, self.port, self.keep_alive)\n        self.mqttc.subscribe(self.topic, self.qos)\n\n        self.mqttc.loop_forever()\n\n    def onMessage(self, mqttc, obj, msg):\n        self.logger.info(\"topic: \" + msg.topic + \", payload: \" + str(msg.payload) + \", qos: \" + str(msg.qos) + \", retain: \" + str(msg.retain))\n\n    def onInput_onStop(self):\n        self.onUnload()\n        self.onStopped()\n\n\nChoregraphe \u3067\u63a5\u7d9a\n\n\nPublisher \u5074\nMQTT \u30d6\u30ed\u30fc\u30ab\u306b \"hello world\" \u3092\u98db\u3070\u3059\u3060\u3051\u3067\u3059\u3002\n\npub.py\n# coding=utf8\n\nimport paho.mqtt.client as paho\n\nmqttc = paho.Client()\n\nmqttc.connect(\"test.mosquitto.org\", 1883, 60)\nmqttc.publish(\"my/topic/pepper5\", \"hello world\", 1)\n\n\n\n\u52d5\u4f5c\u78ba\u8a8d\n\nSubscriber \u3092\u5b9f\u884c\nChoregraphe \u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u53d7\u4fe1\u5f85\u6a5f\u72b6\u614b\u306b\u306a\u308a\u307e\u3059\u3002\n\nPublisher \u3092\u5b9f\u884c\n\u30bf\u30fc\u30df\u30ca\u30eb\u304b\u3089 Publisher \u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n$ python pub.py\n\n\n\u7d50\u679c\u8868\u793a\nPublisher -> Broker -> Subscriber \u3068\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u4f1d\u308f\u308a\u3001Subscriber \u5074\u3067\u3042\u308b Choregraphe \u306e\u30ed\u30b0\u30d3\u30e5\u30fc\u30a2\u306b\u5185\u5bb9\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n\n\u52d5\u4f5c\u78ba\u8a8d2\n\u8a66\u3057\u306b Subscriber \u5074\u3067\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u53d7\u4fe1\u6642\u306e\u51e6\u7406\u3092\u4e0b\u306e\u5f62\u306b\u5909\u3048\u3066\u307f\u308b\u3068\u3001Pepper \u541b\u304c\u3057\u3083\u3079\u3063\u3066\u304f\u308c\u307e\u3059\u3002\n    def onMessage(self, mqttc, obj, msg):\n        tts = ALProxy(\"ALTextToSpeech\")\n        tts.say(msg.payload)\n\n\n\u611f\u60f3\n\nPublisher / Subscriber \u3068\u4e21\u65b9\u3084\u308a\u307e\u3057\u305f\u304c\u3001Publisher \u5074\u3068\u3057\u3066\u306f\u5404\u7a2e\u60c5\u5831\u3092\u5b9a\u671f\u7684\u306b\u98db\u3070\u3059\u3001Subscriber \u5074\u3068\u3057\u3066\u306f\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3057\u3066\u51e6\u7406\u3092\u5909\u3048\u308b\u3001\u3068\u3044\u3046\u611f\u3058\u304c\u3000Pepper \u541b\u3067\u306f\u4f7f\u3044\u3084\u3059\u305d\u3046\u304b\u306a\u3002\n\u4eca\u56de\u306f\u8a66\u3057\u3066\u3044\u306a\u3044\u3067\u3059\u304c\u3001\u4e00\u5bfe\u591a\u3001\u591a\u5bfe\u4e00\u3068\u3044\u3046\u4f7f\u3044\u65b9\u3082\u9762\u767d\u305d\u3046\u3067\u3059\u306d\u3002\n\n\n## \u306f\u3058\u3081\u306b\n\n\u4eca\u56de\u306f MQTT \u306e Subscriber \u5074\u306e\u30dc\u30c3\u30af\u30b9\u3092\u4f5c\u308a\u3001Pepper \u541b\u3067\u52d5\u4f5c\u3055\u305b\u3066\u307f\u307e\u3057\u305f\u3002\n\nPublisher \u5074\u3067\u52d5\u4f5c\u3055\u305b\u3066\u307f\u305f\u5185\u5bb9\u306f\u3053\u3061\u3089\u3002\n\n* [MQTT Publisher \u30dc\u30c3\u30af\u30b9\u3092\u4f5c\u308b](http://qiita.com/Suna/items/26dc236606f27dfafa16)\n* [MQTT Publisher \u30dc\u30c3\u30af\u30b9\u3092\u4f5c\u308b \u305d\u306e2](http://qiita.com/Suna/items/f0d0b1d24d24e5a172a2)\n\n\u307e\u3060\u307e\u3060\u3001MQTT \u52c9\u5f37\u4e2d\u3067\u3059\u3002\n\n\n## MQTT Subscriber \u30dc\u30c3\u30af\u30b9\n\nMQTT \u306e Python \u7528\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n* [Paho - Open Source messaging for M2M](https://eclipse.org/paho/)\n\n\n### \u8a2d\u5b9a\u9805\u76ee\n\nMQTT \u306e\u30d6\u30ed\u30fc\u30ab\u306e\u60c5\u5831\u3068\u3001\u53d6\u5f97\u3059\u308b\u30c8\u30d4\u30c3\u30af\u306e\u60c5\u5831\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n![2015040401.png](https://qiita-image-store.s3.amazonaws.com/0/20418/2d9a1ef3-ca3f-111a-41fa-f23e7c388818.png \"2015040401.png\")\n\n\n### Python \u30b3\u30fc\u30c9\n\nMQTT \u30d6\u30ed\u30fc\u30ab\u306b\u63a5\u7d9a\u3057\u3001\u30c8\u30d4\u30c3\u30af\u3092 Subscribe \u3057\u307e\u3059\u3002\u305d\u306e\u5f8c\u3001loop_forever \u3067\u53d7\u4fe1\u5f85\u6a5f\u72b6\u614b\u306b\u3002\n\u30d7\u30ed\u30b0\u30e9\u30e0\u7d42\u4e86\u6642\u306b\u306f\u30c8\u30d4\u30c3\u30af\u3092\u3000Unsubscribe \u3057\u307e\u3059\u3002\n\n\u30dc\u30c3\u30af\u30b9\u5185\u3067\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f7f\u7528\u65b9\u6cd5\u306f\u3001\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u9802\u304d\u307e\u3057\u305f\u3002\n\n* [Pepper\u7528Tweet\u30dc\u30c3\u30af\u30b9\u3092\u3064\u304f\u308b](http://qiita.com/yacchin1205/items/3422b5066dcbfca63def)\n\n(\u306a\u3093\u304b\u898b\u76f4\u3057\u3066\u305f\u3089\u3001\u30b3\u30fc\u30c9\u3092\u76f4\u3057\u305f\u304f\u306a\u3063\u3066\u304d\u305f)\n\n```python\nclass MyClass(GeneratedClass):\n    def __init__(self):\n        GeneratedClass.__init__(self)\n\n    def onLoad(self):\n        self.framemanager = ALProxy(\"ALFrameManager\")\n        self.folderName = None\n\n    def onUnload(self):\n        import sys\n\n        self.mqttc.unsubscribe(self.topic)\n\n        if self.folderName and self.folderName in sys.path:\n            sys.path.remove(self.folderName)\n        self.folderName = None\n\n    def onInput_onStart(self, payload):\n        import sys, os\n\n        self.folderName = os.path.join(\n            self.framemanager.getBehaviorPath(self.behaviorId), \"../lib\")\n        if self.folderName not in sys.path:\n            sys.path.append(self.folderName)\n\n        import paho.mqtt.client as paho\n\n        self.host       = self.getParameter(\"Broker Host\")\n        self.port       = self.getParameter(\"Broker Port\")\n        self.keep_alive = self.getParameter(\"KeepAlive\")\n        self.topic      = self.getParameter(\"Topic\")\n        self.qos        = self.getParameter(\"Qos\")\n\n        self.mqttc = paho.Client()\n        self.mqttc.on_message = self.onMessage\n        self.mqttc.connect(self.host, self.port, self.keep_alive)\n        self.mqttc.subscribe(self.topic, self.qos)\n\n        self.mqttc.loop_forever()\n\n    def onMessage(self, mqttc, obj, msg):\n        self.logger.info(\"topic: \" + msg.topic + \", payload: \" + str(msg.payload) + \", qos: \" + str(msg.qos) + \", retain: \" + str(msg.retain))\n\n    def onInput_onStop(self):\n        self.onUnload()\n        self.onStopped()\n```\n\n\n### Choregraphe \u3067\u63a5\u7d9a\n\n![2015040402.png](https://qiita-image-store.s3.amazonaws.com/0/20418/6192fd09-8441-3774-20d6-78516d915af7.png \"2015040402.png\")\n\n\n## Publisher \u5074\n\nMQTT \u30d6\u30ed\u30fc\u30ab\u306b \"hello world\" \u3092\u98db\u3070\u3059\u3060\u3051\u3067\u3059\u3002\n\n```pub.py\n# coding=utf8\n\nimport paho.mqtt.client as paho\n\nmqttc = paho.Client()\n\nmqttc.connect(\"test.mosquitto.org\", 1883, 60)\nmqttc.publish(\"my/topic/pepper5\", \"hello world\", 1)\n```\n\n\n## \u52d5\u4f5c\u78ba\u8a8d\n\n### Subscriber \u3092\u5b9f\u884c\n\nChoregraphe \u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u53d7\u4fe1\u5f85\u6a5f\u72b6\u614b\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n### Publisher \u3092\u5b9f\u884c\n\n\u30bf\u30fc\u30df\u30ca\u30eb\u304b\u3089 Publisher \u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n```bash\n$ python pub.py\n```\n\n\n### \u7d50\u679c\u8868\u793a\n\nPublisher -> Broker -> Subscriber \u3068\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u4f1d\u308f\u308a\u3001Subscriber \u5074\u3067\u3042\u308b Choregraphe \u306e\u30ed\u30b0\u30d3\u30e5\u30fc\u30a2\u306b\u5185\u5bb9\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n![2015040403.png](https://qiita-image-store.s3.amazonaws.com/0/20418/f74e7fe0-9851-18a7-388d-e86726b76e74.png \"2015040403.png\")\n\n\n## \u52d5\u4f5c\u78ba\u8a8d2\n\n\u8a66\u3057\u306b Subscriber \u5074\u3067\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u53d7\u4fe1\u6642\u306e\u51e6\u7406\u3092\u4e0b\u306e\u5f62\u306b\u5909\u3048\u3066\u307f\u308b\u3068\u3001Pepper \u541b\u304c\u3057\u3083\u3079\u3063\u3066\u304f\u308c\u307e\u3059\u3002\n\n```python\n    def onMessage(self, mqttc, obj, msg):\n        tts = ALProxy(\"ALTextToSpeech\")\n        tts.say(msg.payload)\n```\n\n\n## \u611f\u60f3\n\n* Publisher / Subscriber \u3068\u4e21\u65b9\u3084\u308a\u307e\u3057\u305f\u304c\u3001Publisher \u5074\u3068\u3057\u3066\u306f\u5404\u7a2e\u60c5\u5831\u3092\u5b9a\u671f\u7684\u306b\u98db\u3070\u3059\u3001Subscriber \u5074\u3068\u3057\u3066\u306f\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3057\u3066\u51e6\u7406\u3092\u5909\u3048\u308b\u3001\u3068\u3044\u3046\u611f\u3058\u304c\u3000Pepper \u541b\u3067\u306f\u4f7f\u3044\u3084\u3059\u305d\u3046\u304b\u306a\u3002\n* \u4eca\u56de\u306f\u8a66\u3057\u3066\u3044\u306a\u3044\u3067\u3059\u304c\u3001\u4e00\u5bfe\u591a\u3001\u591a\u5bfe\u4e00\u3068\u3044\u3046\u4f7f\u3044\u65b9\u3082\u9762\u767d\u305d\u3046\u3067\u3059\u306d\u3002\n", "tags": ["Python", "Pepper", "Choregraphe", "mqtt"]}