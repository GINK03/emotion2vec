{"context": " More than 1 year has passed since last update.\u81ea\u5206\u7528\u306eBottle\u7528\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3002\nBitbucket\u3001Github\u306eHook\u7528API\u306f\u3001pull\u3057\u305f\u5f8c\u3001Upstart\u306b\u767b\u9332\u3057\u3066\u308bAPI\u30b5\u30fc\u30d0\u30fc\uff08gunicorn\uff09\u3092\u518d\u8d77\u52d5\u3057\u3066\u308b\u3002\nGit\u30ec\u30dd\u30b8\u30c8\u30ea\u306e\u64cd\u4f5c\u7528\u306b\u3001GitPython\u3092\u5165\u308c\u3066\u308b\u3002\n\u6642\u9593\u5468\u308a\u306e\u51e6\u7406\u3067\u3001arrow\u3082\u5165\u308c\u3066\u308b\u3002\n\nserver.py\n# -*- coding: utf-8 -*-\n\nimport commands\nimport os.path\nimport traceback\nfrom decorator import decorator\nimport logging\nimport subprocess\nimport getpass\n\nfrom bottle import get, post, put, delete, run, default_app, request, response, HTTPError, redirect, local, abort \nfrom bottle import static_file, route\n\nimport arrow\n\nfrom git import Repo\n\n\n# Decorator\n\n@decorator\ndef check_db_connection(func, *args, **kwargs):\n    \"\"\"\n    Peewee\u7528\u3002db\u306f\u3001Peewee\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3002\n    \"\"\"\n\n    try:\n        db.get_conn().ping(True)\n    except:\n        logging.error(traceback.format_exc())\n\n    return func(*args, **kwargs)\n\n@decorator\ndef check_login(func, *args, **kwargs):\n    \"\"\"\n    \u8a8d\u8a3c\u51e6\u7406\u3092\u66f8\u3044\u3066\u3001\u30ed\u30b0\u30a4\u30f3\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092local.me\u3068\u304b\u306b\u5165\u308c\u3068\u304f\u3002\n    \"\"\"\n\n    response_json = func(*args, **kwargs)\n    return response_json\n\n@decorator\ndef error_handling(func, *args, **kwargs):\n    \"\"\"\n    \u30a8\u30e9\u30fc\u3092JSON\u5f62\u5f0f\u3067\u8fd4\u3059\u3002\u30c7\u30d0\u30c3\u30b0\u7528\u3002\u672c\u516c\u958b\u306e\u6642\u306f\u3001error_class\u3068\u304berror_trace\u306f\u6d88\u3059\u3002\n    \"\"\"\n\n    try:\n        return func(*args, **kwargs)\n    except Exception as exception:\n        if issubclass(exception.__class__, HTTPError):\n            raise exception\n        else:\n            logging.error(traceback.format_exc())\n\n            return {\n                \"error_class\": type(exception).__name__,\n                \"error_trace\": traceback.format_exc(),\n            }\n\n@decorator\ndef measurement(func, *args, **kwargs):\n    \"\"\"\n    API\u306e\u51e6\u7406\u6642\u9593\u3092\u8a08\u6e2c\u3059\u308b\u3002\n    \"\"\"\n\n    start_time = arrow.now()\n\n    result = func(*args, **kwargs)\n\n    print \"Transaction time: {0} secs\".format(arrow.now().float_timestamp - start_time.float_timestamp)\n\n    return result\n\n\n# API\n\n\n# Static files\n\n@route('/')\n@route('/<filepath:path>')\ndef server_static(filepath = None):\n    if filepath is None:\n        filepath = 'index.html'\n\n    root_path = u\"Web\u306e\u30eb\u30fc\u30c8\u30d1\u30b9\"\n\n    response = static_file(filepath, root = root_path)\n    return response\n\n\n# Pull from Bitbucket\n\n@post('/__pull_from_bitbucket')\n@error_handling\ndef pull_from_bitbucket():\n    \"\"\"\n    Bitbucket\u9023\u643a\u7528\u3002\n    IP\u3067\u3001\u3053\u306eAPI\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3092Bitbucket\u304b\u3089\u3060\u3051\u306b\u7d5e\u3063\u3068\u304f\u3002\n    \"\"\"\n\n    repository_path = \"{0}/../../..\".format(os.path.dirname(__file__))\n    repository = Repo(repository_path)\n\n    payload = request.json\n\n    logging.info(\"payload: {0}\".format(payload))\n    branch = payload['push']['changes'][0]['new']['name']\n\n    logging.info(\"Pull from Bitbucket: {0}: {1}\".format(\n        branch, repository.active_branch.path))\n\n    if repository.active_branch.path.endswith(branch):\n        repository.remotes[0].pull()\n\n        reboot_gunicorn_command = [\"/usr/bin/sudo\", \"/sbin/restart\", \"api-server\"]\n        output = subprocess.check_output(reboot_gunicorn_command)\n        logging.info(\"Reboot API server: {0}: {1}\".format(\n            reboot_gunicorn_command, output))\n\n    return {\n    }\n\n\n# Pull from GitHub\n\nGITHUB_HOOK_SECRET = os.environ.get('GITHUB_HOOK_SECRET')\n\n@post('/__pull_from_github')\n@error_handling\ndef pull_from_github():\n    \"\"\"\n    GitHub\u9023\u643a\u7528\u3002\n    GitHub Hook\u306e\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u30ad\u30fc\u3092\u3001\u74b0\u5883\u5909\u6570\u306b\u5165\u308c\u3068\u304f\u3002\n    \"\"\"\n\n    sent_signature = request.headers.get('X-Hub-Signature')[5:]\n    raw_payload = request.body.read()\n    generated_signature = hmac.new(GITHUB_HOOK_SECRET, raw_payload, hashlib.sha1).hexdigest()\n\n    if sent_signature == generated_signature:\n\n        repository_path = \"{0}/../../..\".format(os.path.dirname(__file__))\n        repository = Repo(repository_path)\n\n        payload = request.json\n\n        if payload['ref'] == repository.active_branch.path:\n            logging.info(\"Pull from GitHub: {0}: {1}\".format(payload['ref'], payload['head_commit']['id']))\n            repository.remotes[0].pull()\n\n            reboot_gunicorn_command = [\"/bin/sudo\", \"/usr/bin/systemctl\", \"restart\", \"api_server\"]\n\n            logging.info(\"Reboot API server: {0}\".format(reboot_gunicorn_command))\n            return_code = subprocess.call(reboot_gunicorn_command)\n\n    return {\n    }\n\n\n\n\napplication = default_app()\nif __name__ == '__main__':\n    run(host = 'localhost', port = 8000, debug = True)\n\n\n\u81ea\u5206\u7528\u306e[Bottle](http://bottlepy.org/)\u7528\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3002\n\nBitbucket\u3001Github\u306eHook\u7528API\u306f\u3001pull\u3057\u305f\u5f8c\u3001[Upstart](https://ja.wikipedia.org/wiki/Upstart)\u306b\u767b\u9332\u3057\u3066\u308bAPI\u30b5\u30fc\u30d0\u30fc\uff08[gunicorn](http://gunicorn.org/)\uff09\u3092\u518d\u8d77\u52d5\u3057\u3066\u308b\u3002\n\nGit\u30ec\u30dd\u30b8\u30c8\u30ea\u306e\u64cd\u4f5c\u7528\u306b\u3001[GitPython](https://github.com/gitpython-developers/GitPython)\u3092\u5165\u308c\u3066\u308b\u3002\n\n\u6642\u9593\u5468\u308a\u306e\u51e6\u7406\u3067\u3001[arrow](http://crsmithdev.com/arrow/)\u3082\u5165\u308c\u3066\u308b\u3002\n\n```py:server.py\n# -*- coding: utf-8 -*-\n\nimport commands\nimport os.path\nimport traceback\nfrom decorator import decorator\nimport logging\nimport subprocess\nimport getpass\n\nfrom bottle import get, post, put, delete, run, default_app, request, response, HTTPError, redirect, local, abort \nfrom bottle import static_file, route\n\nimport arrow\n\nfrom git import Repo\n\n\n# Decorator\n\n@decorator\ndef check_db_connection(func, *args, **kwargs):\n    \"\"\"\n    Peewee\u7528\u3002db\u306f\u3001Peewee\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3002\n    \"\"\"\n\n    try:\n        db.get_conn().ping(True)\n    except:\n        logging.error(traceback.format_exc())\n    \n    return func(*args, **kwargs)\n\n@decorator\ndef check_login(func, *args, **kwargs):\n    \"\"\"\n    \u8a8d\u8a3c\u51e6\u7406\u3092\u66f8\u3044\u3066\u3001\u30ed\u30b0\u30a4\u30f3\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092local.me\u3068\u304b\u306b\u5165\u308c\u3068\u304f\u3002\n    \"\"\"\n\n    response_json = func(*args, **kwargs)\n    return response_json\n\n@decorator\ndef error_handling(func, *args, **kwargs):\n    \"\"\"\n    \u30a8\u30e9\u30fc\u3092JSON\u5f62\u5f0f\u3067\u8fd4\u3059\u3002\u30c7\u30d0\u30c3\u30b0\u7528\u3002\u672c\u516c\u958b\u306e\u6642\u306f\u3001error_class\u3068\u304berror_trace\u306f\u6d88\u3059\u3002\n    \"\"\"\n\n    try:\n        return func(*args, **kwargs)\n    except Exception as exception:\n        if issubclass(exception.__class__, HTTPError):\n            raise exception\n        else:\n            logging.error(traceback.format_exc())\n\n            return {\n                \"error_class\": type(exception).__name__,\n                \"error_trace\": traceback.format_exc(),\n            }\n\n@decorator\ndef measurement(func, *args, **kwargs):\n    \"\"\"\n    API\u306e\u51e6\u7406\u6642\u9593\u3092\u8a08\u6e2c\u3059\u308b\u3002\n    \"\"\"\n\n    start_time = arrow.now()\n\n    result = func(*args, **kwargs)\n\n    print \"Transaction time: {0} secs\".format(arrow.now().float_timestamp - start_time.float_timestamp)\n\n    return result\n\n\n# API\n\n\n# Static files\n\n@route('/')\n@route('/<filepath:path>')\ndef server_static(filepath = None):\n    if filepath is None:\n        filepath = 'index.html'\n\n    root_path = u\"Web\u306e\u30eb\u30fc\u30c8\u30d1\u30b9\"\n\n    response = static_file(filepath, root = root_path)\n    return response\n\n\n# Pull from Bitbucket\n\n@post('/__pull_from_bitbucket')\n@error_handling\ndef pull_from_bitbucket():\n    \"\"\"\n    Bitbucket\u9023\u643a\u7528\u3002\n    IP\u3067\u3001\u3053\u306eAPI\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3092Bitbucket\u304b\u3089\u3060\u3051\u306b\u7d5e\u3063\u3068\u304f\u3002\n    \"\"\"\n\n    repository_path = \"{0}/../../..\".format(os.path.dirname(__file__))\n    repository = Repo(repository_path)\n\n    payload = request.json\n\n    logging.info(\"payload: {0}\".format(payload))\n    branch = payload['push']['changes'][0]['new']['name']\n\n    logging.info(\"Pull from Bitbucket: {0}: {1}\".format(\n        branch, repository.active_branch.path))\n\n    if repository.active_branch.path.endswith(branch):\n        repository.remotes[0].pull()\n\n        reboot_gunicorn_command = [\"/usr/bin/sudo\", \"/sbin/restart\", \"api-server\"]\n        output = subprocess.check_output(reboot_gunicorn_command)\n        logging.info(\"Reboot API server: {0}: {1}\".format(\n            reboot_gunicorn_command, output))\n\n    return {\n    }\n\n\n# Pull from GitHub\n\nGITHUB_HOOK_SECRET = os.environ.get('GITHUB_HOOK_SECRET')\n\n@post('/__pull_from_github')\n@error_handling\ndef pull_from_github():\n    \"\"\"\n    GitHub\u9023\u643a\u7528\u3002\n    GitHub Hook\u306e\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u30ad\u30fc\u3092\u3001\u74b0\u5883\u5909\u6570\u306b\u5165\u308c\u3068\u304f\u3002\n    \"\"\"\n\n    sent_signature = request.headers.get('X-Hub-Signature')[5:]\n    raw_payload = request.body.read()\n    generated_signature = hmac.new(GITHUB_HOOK_SECRET, raw_payload, hashlib.sha1).hexdigest()\n\n    if sent_signature == generated_signature:\n\n        repository_path = \"{0}/../../..\".format(os.path.dirname(__file__))\n        repository = Repo(repository_path)\n    \n        payload = request.json\n    \n        if payload['ref'] == repository.active_branch.path:\n            logging.info(\"Pull from GitHub: {0}: {1}\".format(payload['ref'], payload['head_commit']['id']))\n            repository.remotes[0].pull()\n    \n            reboot_gunicorn_command = [\"/bin/sudo\", \"/usr/bin/systemctl\", \"restart\", \"api_server\"]\n    \n            logging.info(\"Reboot API server: {0}\".format(reboot_gunicorn_command))\n            return_code = subprocess.call(reboot_gunicorn_command)\n\n    return {\n    }\n\n\n\n\napplication = default_app()\nif __name__ == '__main__':\n    run(host = 'localhost', port = 8000, debug = True)\n```\n", "tags": ["Python", "bottle", "GitHub", "bitbucket"]}