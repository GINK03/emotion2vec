{"context": "\n\nstd::process::Command::spawn (UNIX)\nRust\u3067\u30d7\u30ed\u30bb\u30b9\u8d77\u52d5\u3092\u884c\u3044\u305f\u3044\u5834\u5408\u3001std::process::Command \u3092\u4f7f\u3046\u3053\u3068\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\nuse std::process::Command;\n\nlet output = Command::new(\"sh\")\n                     .arg(\"-c\")\n                     .arg(\"echo hello\")\n                     .output()\n                     .expect(\"failed to execute proces\");\n\nlet hello = output.stdout;\n\n\u305d\u306e\u51e6\u7406\u306e\u4e2d\u3067\u4e2d\u6838\u3068\u306a\u308b spawn \u95a2\u6570\u3092\u8ffd\u3063\u3066\u307f\u307e\u3059\u3002UNIX\u5074\u306e\u51e6\u7406\u3057\u304b\u8ffd\u3063\u3066\u3044\u307e\u305b\u3093\u3002\n\u5bfe\u8c61\u3068\u306a\u308b\u90e8\u5206\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f \u3053\u3061\u3089 \u3067\u3059\u3002\n\u307e\u305a setup_io \u95a2\u6570\u306e\u51e6\u7406\u304c\u76ee\u306b\u5165\u308a\u307e\u3059\u3002\u3053\u3053\u306f\u6a19\u6e96\u5165\u51fa\u529b\u306eredirect\u306e\u6307\u5b9a\u3092\u884c\u3044\u307e\u3059\u3002\u3053\u306e\u6642\u5f15\u6570\u306b needs_stdin \u3068\u3044\u3046\u30d5\u30e9\u30b0\u304c\u3042\u308a\u3001\u3053\u3053\u304ctrue\u306e\u5834\u5408\u306f\u6a19\u6e96\u5165\u529b\u306eredirect\u5148\u3092 /dev/null \u306b\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\u6b21\u306b\u3001 anon_pipe \u95a2\u6570\u3067\u30d1\u30a4\u30d7\u4f5c\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30d1\u30a4\u30d7\u306f\u5b50\u5074\u3067 execvp(3) \u3067\u5931\u6557\u3057\u305f\u5834\u5408\u306b\u89aa\u5074\u306b\u30d7\u30ed\u30bb\u30b9\u9593\u901a\u4fe1\u3067\u5931\u6557\u3057\u305f\u7406\u7531(\u304a\u3088\u3073CLOEXEC\u306evalidation)\u3092\u9001\u3063\u3066\u308b\u306e\u3067\u305d\u306e\u305f\u3081\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\u3053\u3053\u306fLinux\u306e\u5834\u5408\u53ef\u80fd\u306a\u3089 pipe2(2) \u3092\u4f7f\u3046\u3068\u3044\u3063\u305f\u3053\u3068\u3092\u884c\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u53e4\u3044Linux\u30ab\u30fc\u30cd\u30eb\u3067\u3082\u52d5\u304b\u305b\u308b\u3088\u3046\u306bweak!\u30de\u30af\u30ed\u3092\u7528\u3044\u305fHack\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002weak!\u30de\u30af\u30ed\u306f dlsym(3) \u3067\u30b7\u30f3\u30dc\u30eb\u306e\u5b58\u5728\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3044\u3001\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u5834\u5408\u306b\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u884c\u3046\u3001\u3068\u3044\u3046\u30de\u30af\u30ed\u3067\u3059\u3002\nweak!\u30de\u30af\u30ed\u306e\u5168\u4f53\u306e\u5b9f\u88c5\u306f \u3053\u306e\u3088\u3046\u306b \u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u4f59\u8ac7\u3067\u3059\u304c\u3001Rust\u306fI/O\u30c7\u30b6\u30a4\u30f3\u3068\u3057\u30663\u756a\u4ee5\u964d\u306e\u3059\u3079\u3066\u306efd\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u3067CLOEXEC\u3092\u8a2d\u5b9a\u3057\u3066fd\u7d99\u627f\u3092\u907f\u3051\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f ulrich drepper\u3082\u8a00\u3063\u3066\u3044\u308b\u3088\u3046\u306b \u30ea\u30bd\u30fc\u30b9\u6d88\u8cbb\u3068\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30ea\u30b9\u30af\u306e\u554f\u984c\u304b\u3089\u3067\u3057\u3087\u3046\u3002\nfork(2) \u5f8c\u306e\u51e6\u7406\u3092\u89aa\u5074\u3001\u5b50\u5074\u3067\u307f\u3066\u3044\u304d\u307e\u3059\u3002\n\u89aa\u5074\u3092\u307f\u308b\u3068\u3001\u5f53\u305f\u308a\u524d\u3067\u3059\u304cpipe fd\u306e\u3044\u3089\u306a\u3044\u307b\u3046\u3092close\u3059\u308b\u51e6\u7406\u304c\u3042\u308a\u307e\u3059\u3002\n\u305d\u306e\u5f8cinput\u5074\u3092read\u3057\u3066\u7d42\u4e86\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u307f\u308b\u51e6\u7406\u304c\u3042\u308a\u307e\u3059\u3002\n        // loop to handle EINTR\n        loop {\n            match input.read(&mut bytes) {\n                Ok(0) => return Ok((p, ours)),\n                Ok(8) => {\n                    assert!(combine(CLOEXEC_MSG_FOOTER) == combine(&bytes[4.. 8]),\n                            \"Validation on the CLOEXEC pipe failed: {:?}\", bytes);\n                    let errno = combine(&bytes[0.. 4]);\n                    assert!(p.wait().is_ok(),\n                            \"wait() should either return Ok or panic\");\n                    return Err(Error::from_raw_os_error(errno))\n                }\n                Err(ref e) if e.kind() == ErrorKind::Interrupted => {}\n                Err(e) => {\n                    assert!(p.wait().is_ok(),\n                            \"wait() should either return Ok or panic\");\n                    panic!(\"the CLOEXEC pipe failed: {:?}\", e)\n                },\n                Ok(..) => { // pipe I/O up to PIPE_BUF bytes should be atomic\n                    assert!(p.wait().is_ok(),\n                            \"wait() should either return Ok or panic\");\n                    panic!(\"short read on the CLOEXEC pipe\")\n                }\n            }\n        }\n\n\u6210\u529f\u3057\u305f\u5834\u5408\u306f\u305d\u306e\u307e\u307e\u5b50\u306epid\u3068\u7d42\u4e86\u30b9\u30c6\u30fc\u30bf\u30b9\u306e\u7d44\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u5931\u6557\u3057\u305f\u5834\u5408\u3001\u6761\u4ef6\u306f\u3054\u306b\u3087\u3054\u306b\u3087\u3042\u308b\u306e\u3067\u3059\u304cwait\u306b\u3088\u308b\u5f85\u3061\u3092\u89aa\u304c\u884c\u3063\u3066\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u305f\u308a\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u3067\u3059\u3002\u30a8\u30e9\u30fc\u51e6\u7406\u306e\u4e2d\u3067\u306f\u524d\u8ff0\u3057\u305fpipe\u306eCLOEXEC\u306evalidation\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\u30b3\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\n\u6210\u529f\u3057\u305f\u3068\u304d\u306b read(2) \u3067\u30d6\u30ed\u30c3\u30af\u3057\u305d\u3046\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u5b50\u3067write\u5074\u306efd\u304c execvp(3) \u304c\u6210\u529f\u3057\u305f\u3068\u304d\u306bCLOEXEC\u3055\u308c\u308b\u305f\u3081\u306b\u89aa\u306e read(2) \u5074\u3067\u306fEOF\u3092\u691c\u77e5\u3057\u30660\u3092\u8fd4\u3059\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3053\u3053\u3067\u30d6\u30ed\u30c3\u30af\u3059\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u5b50\u5074\u3082\u307f\u3066\u307f\u307e\u3059\u3002\ndo_exec \u95a2\u6570\u5185\u3067\u6a19\u6e96\u5165\u51fa\u529b\u3092\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u305d\u308c\u305e\u308c0,1,2\u756a\u306b\u8907\u88fd\u3057\u3001 execvp(3) \u3092\u547c\u3093\u3067\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\u3002\n\u5931\u6557\u3057\u305f\u3089errno\u3068CLOEXEC validation\u3092\u30d1\u30a4\u30d7\u3092\u7528\u3044\u3066\u89aa\u306b\u6e21\u3057\u3066 _exit(2) \u3067\u5373\u6642\u7d42\u4e86\u3057\u307e\u3059\u3002\n\n\u6ce8\u91c8\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u5f15\u7528\u306f\u4ee5\u4e0b\u306e\u6761\u6587\u306b\u57fa\u3065\u304d\u884c\u308f\u308c\u307e\u3059\u3002\nhttps://github.com/rust-lang/rust/blob/master/COPYRIGHT\n# std::process::Command::spawn (UNIX)\n\nRust\u3067\u30d7\u30ed\u30bb\u30b9\u8d77\u52d5\u3092\u884c\u3044\u305f\u3044\u5834\u5408\u3001`std::process::Command` \u3092\u4f7f\u3046\u3053\u3068\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n```rust\nuse std::process::Command;\n\nlet output = Command::new(\"sh\")\n                     .arg(\"-c\")\n                     .arg(\"echo hello\")\n                     .output()\n                     .expect(\"failed to execute proces\");\n\nlet hello = output.stdout;\n```\n\n\u305d\u306e\u51e6\u7406\u306e\u4e2d\u3067\u4e2d\u6838\u3068\u306a\u308b `spawn` \u95a2\u6570\u3092\u8ffd\u3063\u3066\u307f\u307e\u3059\u3002UNIX\u5074\u306e\u51e6\u7406\u3057\u304b\u8ffd\u3063\u3066\u3044\u307e\u305b\u3093\u3002\n\n\u5bfe\u8c61\u3068\u306a\u308b\u90e8\u5206\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f [\u3053\u3061\u3089](https://github.com/rust-lang/rust/blob/master/src/libstd/sys/unix/process.rs) \u3067\u3059\u3002\n\n\u307e\u305a `setup_io` \u95a2\u6570\u306e\u51e6\u7406\u304c\u76ee\u306b\u5165\u308a\u307e\u3059\u3002\u3053\u3053\u306f\u6a19\u6e96\u5165\u51fa\u529b\u306eredirect\u306e\u6307\u5b9a\u3092\u884c\u3044\u307e\u3059\u3002\u3053\u306e\u6642\u5f15\u6570\u306b `needs_stdin` \u3068\u3044\u3046\u30d5\u30e9\u30b0\u304c\u3042\u308a\u3001\u3053\u3053\u304ctrue\u306e\u5834\u5408\u306f\u6a19\u6e96\u5165\u529b\u306eredirect\u5148\u3092 `/dev/null` \u306b\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u6b21\u306b\u3001 `anon_pipe` \u95a2\u6570\u3067\u30d1\u30a4\u30d7\u4f5c\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30d1\u30a4\u30d7\u306f\u5b50\u5074\u3067 `execvp(3)` \u3067\u5931\u6557\u3057\u305f\u5834\u5408\u306b\u89aa\u5074\u306b\u30d7\u30ed\u30bb\u30b9\u9593\u901a\u4fe1\u3067\u5931\u6557\u3057\u305f\u7406\u7531(\u304a\u3088\u3073CLOEXEC\u306evalidation)\u3092\u9001\u3063\u3066\u308b\u306e\u3067\u305d\u306e\u305f\u3081\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u3053\u3053\u306fLinux\u306e\u5834\u5408\u53ef\u80fd\u306a\u3089 `pipe2(2)` \u3092\u4f7f\u3046\u3068\u3044\u3063\u305f\u3053\u3068\u3092\u884c\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u53e4\u3044Linux\u30ab\u30fc\u30cd\u30eb\u3067\u3082\u52d5\u304b\u305b\u308b\u3088\u3046\u306bweak!\u30de\u30af\u30ed\u3092\u7528\u3044\u305fHack\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002weak!\u30de\u30af\u30ed\u306f `dlsym(3)` \u3067\u30b7\u30f3\u30dc\u30eb\u306e\u5b58\u5728\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3044\u3001\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u5834\u5408\u306b\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u884c\u3046\u3001\u3068\u3044\u3046\u30de\u30af\u30ed\u3067\u3059\u3002\n\nweak!\u30de\u30af\u30ed\u306e\u5168\u4f53\u306e\u5b9f\u88c5\u306f [\u3053\u306e\u3088\u3046\u306b](https://github.com/rust-lang/rust/blob/master/src/libstd/sys/unix/weak.rs) \u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u4f59\u8ac7\u3067\u3059\u304c\u3001Rust\u306fI/O\u30c7\u30b6\u30a4\u30f3\u3068\u3057\u30663\u756a\u4ee5\u964d\u306e\u3059\u3079\u3066\u306efd\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u3067CLOEXEC\u3092\u8a2d\u5b9a\u3057\u3066fd\u7d99\u627f\u3092\u907f\u3051\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f [ulrich drepper\u3082\u8a00\u3063\u3066\u3044\u308b\u3088\u3046\u306b](http://udrepper.livejournal.com/20407.html) \u30ea\u30bd\u30fc\u30b9\u6d88\u8cbb\u3068\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30ea\u30b9\u30af\u306e\u554f\u984c\u304b\u3089\u3067\u3057\u3087\u3046\u3002\n\n`fork(2)` \u5f8c\u306e\u51e6\u7406\u3092\u89aa\u5074\u3001\u5b50\u5074\u3067\u307f\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u89aa\u5074\u3092\u307f\u308b\u3068\u3001\u5f53\u305f\u308a\u524d\u3067\u3059\u304cpipe fd\u306e\u3044\u3089\u306a\u3044\u307b\u3046\u3092close\u3059\u308b\u51e6\u7406\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u305d\u306e\u5f8cinput\u5074\u3092read\u3057\u3066\u7d42\u4e86\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u307f\u308b\u51e6\u7406\u304c\u3042\u308a\u307e\u3059\u3002\n\n```rust\n        // loop to handle EINTR\n        loop {\n            match input.read(&mut bytes) {\n                Ok(0) => return Ok((p, ours)),\n                Ok(8) => {\n                    assert!(combine(CLOEXEC_MSG_FOOTER) == combine(&bytes[4.. 8]),\n                            \"Validation on the CLOEXEC pipe failed: {:?}\", bytes);\n                    let errno = combine(&bytes[0.. 4]);\n                    assert!(p.wait().is_ok(),\n                            \"wait() should either return Ok or panic\");\n                    return Err(Error::from_raw_os_error(errno))\n                }\n                Err(ref e) if e.kind() == ErrorKind::Interrupted => {}\n                Err(e) => {\n                    assert!(p.wait().is_ok(),\n                            \"wait() should either return Ok or panic\");\n                    panic!(\"the CLOEXEC pipe failed: {:?}\", e)\n                },\n                Ok(..) => { // pipe I/O up to PIPE_BUF bytes should be atomic\n                    assert!(p.wait().is_ok(),\n                            \"wait() should either return Ok or panic\");\n                    panic!(\"short read on the CLOEXEC pipe\")\n                }\n            }\n        }\n```        \n\n\u6210\u529f\u3057\u305f\u5834\u5408\u306f\u305d\u306e\u307e\u307e\u5b50\u306epid\u3068\u7d42\u4e86\u30b9\u30c6\u30fc\u30bf\u30b9\u306e\u7d44\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u5931\u6557\u3057\u305f\u5834\u5408\u3001\u6761\u4ef6\u306f\u3054\u306b\u3087\u3054\u306b\u3087\u3042\u308b\u306e\u3067\u3059\u304cwait\u306b\u3088\u308b\u5f85\u3061\u3092\u89aa\u304c\u884c\u3063\u3066\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u305f\u308a\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u3067\u3059\u3002\u30a8\u30e9\u30fc\u51e6\u7406\u306e\u4e2d\u3067\u306f\u524d\u8ff0\u3057\u305fpipe\u306eCLOEXEC\u306evalidation\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\u30b3\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u6210\u529f\u3057\u305f\u3068\u304d\u306b `read(2)` \u3067\u30d6\u30ed\u30c3\u30af\u3057\u305d\u3046\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u5b50\u3067write\u5074\u306efd\u304c `execvp(3)` \u304c\u6210\u529f\u3057\u305f\u3068\u304d\u306bCLOEXEC\u3055\u308c\u308b\u305f\u3081\u306b\u89aa\u306e `read(2)` \u5074\u3067\u306fEOF\u3092\u691c\u77e5\u3057\u30660\u3092\u8fd4\u3059\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3053\u3053\u3067\u30d6\u30ed\u30c3\u30af\u3059\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u5b50\u5074\u3082\u307f\u3066\u307f\u307e\u3059\u3002\n\n`do_exec` \u95a2\u6570\u5185\u3067\u6a19\u6e96\u5165\u51fa\u529b\u3092\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u305d\u308c\u305e\u308c0,1,2\u756a\u306b\u8907\u88fd\u3057\u3001 `execvp(3)` \u3092\u547c\u3093\u3067\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5931\u6557\u3057\u305f\u3089errno\u3068CLOEXEC validation\u3092\u30d1\u30a4\u30d7\u3092\u7528\u3044\u3066\u89aa\u306b\u6e21\u3057\u3066 `_exit(2)` \u3067\u5373\u6642\u7d42\u4e86\u3057\u307e\u3059\u3002\n\n## \u6ce8\u91c8\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u5f15\u7528\u306f\u4ee5\u4e0b\u306e\u6761\u6587\u306b\u57fa\u3065\u304d\u884c\u308f\u308c\u307e\u3059\u3002\n\nhttps://github.com/rust-lang/rust/blob/master/COPYRIGHT\n", "tags": ["rust"]}