{"context": "\n\u52d5\u4f5c\u74b0\u5883\nC++ Builder XE4\n\n\nString line1 = L\"A,B,C,D\";\nString line2 = L\"1,2,3,4\";\n\n\u4e0a\u8a18\u306e\u6587\u5b57\u5217\u3092\u4e0e\u3048\u3089\u308c\u305f\u6642\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306bdstPtr(:TStringList)\u306b\u53d6\u5f97\u3057\u305f\u3044\u3002\nA,1\nB,2\nC,3\nD,4\n\n#include <memory>\u3092\u8ffd\u52a0\u3057\u3066\u3001\u4ee5\u4e0b\u3092\u8db3\u3059\u3002\n//---------------------------------------------------------------------------\n// \u30d5\u30a1\u30a4\u30eb\u30b9\u30b3\u30fc\u30d7static\u95a2\u6570\n//\nstatic void __fastcall matrixTranspose(String srcStr1, String srcStr2, TStringList *dstPtr)\n{\n    // \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u63db\u3059\u308b\n    //\n    // \u5165\u529b\u4f8b\n    //   srcStr1: A,B,C,D\n    //   srcStr2: 1,2,3,4\n    // \u51fa\u529b\u4f8b (dstPtr)\n    //  A,1\n    //  B,2\n    //  C,3\n    //  D,4\n\n    if (dstPtr == NULL) {\n        return; // error\n    }\n    if (srcStr1.Length() == 0 || srcStr2.Length() == 0) {\n        return; // error\n    }\n\n    std::unique_ptr<TStringList> srcSL1(new TStringList);\n    srcSL1->StrictDelimiter = true;\n    srcSL1->Delimiter = L',';\n    srcSL1->DelimitedText = srcStr1;\n\n    std::unique_ptr<TStringList> srcSL2(new TStringList);\n    srcSL2->StrictDelimiter = true;\n    srcSL2->Delimiter = L',';\n    srcSL2->DelimitedText = srcStr2;\n\n    if (srcSL1->Count != srcSL2->Count) {\n        return; // error\n    }\n\n    String line;\n    for(int idx=0; idx < srcSL1->Count; idx++) {\n        line = srcSL1->Strings[idx] + L\",\" + srcSL2->Strings[idx];\n        dstPtr->Add(line);\n    }\n}\n\n**\u6ce8\u610f: \u7dba\u9e97\u306a\u5b9f\u88c5\u3067\u306f\u306a\u3044\u3002\n```txt:\u52d5\u4f5c\u74b0\u5883\nC++ Builder XE4\n```\n\n```\nString line1 = L\"A,B,C,D\";\nString line2 = L\"1,2,3,4\";\n```\n\n\u4e0a\u8a18\u306e\u6587\u5b57\u5217\u3092\u4e0e\u3048\u3089\u308c\u305f\u6642\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306bdstPtr(:TStringList)\u306b\u53d6\u5f97\u3057\u305f\u3044\u3002\n\n```\nA,1\nB,2\nC,3\nD,4\n```\n\n`#include <memory>`\u3092\u8ffd\u52a0\u3057\u3066\u3001\u4ee5\u4e0b\u3092\u8db3\u3059\u3002\n\n```cpp\n//---------------------------------------------------------------------------\n// \u30d5\u30a1\u30a4\u30eb\u30b9\u30b3\u30fc\u30d7static\u95a2\u6570\n//\nstatic void __fastcall matrixTranspose(String srcStr1, String srcStr2, TStringList *dstPtr)\n{\n\t// \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u63db\u3059\u308b\n\t//\n\t// \u5165\u529b\u4f8b\n\t//   srcStr1: A,B,C,D\n\t//   srcStr2: 1,2,3,4\n\t// \u51fa\u529b\u4f8b (dstPtr)\n\t//  A,1\n\t//  B,2\n\t//  C,3\n\t//  D,4\n\n\tif (dstPtr == NULL) {\n\t\treturn; // error\n\t}\n\tif (srcStr1.Length() == 0 || srcStr2.Length() == 0) {\n\t\treturn; // error\n\t}\n\n\tstd::unique_ptr<TStringList> srcSL1(new TStringList);\n\tsrcSL1->StrictDelimiter = true;\n\tsrcSL1->Delimiter = L',';\n\tsrcSL1->DelimitedText = srcStr1;\n\n\tstd::unique_ptr<TStringList> srcSL2(new TStringList);\n\tsrcSL2->StrictDelimiter = true;\n\tsrcSL2->Delimiter = L',';\n\tsrcSL2->DelimitedText = srcStr2;\n\n\tif (srcSL1->Count != srcSL2->Count) {\n\t\treturn; // error\n\t}\n\n\tString line;\n\tfor(int idx=0; idx < srcSL1->Count; idx++) {\n\t\tline = srcSL1->Strings[idx] + L\",\" + srcSL2->Strings[idx];\n\t\tdstPtr->Add(line);\n\t}\n}\n```\n\n**\u6ce8\u610f: \u7dba\u9e97\u306a\u5b9f\u88c5\u3067\u306f\u306a\u3044\u3002\n", "tags": ["cppBuilder", "CSV", "stringOperation", "listOperation"]}