{"context": " More than 1 year has passed since last update.(2016/3/7)\n\u3053\u306e\u95a2\u6570\u306fHaskell_6_iterator.bas \u306e\u5ec3\u6b62\u3068 vh_stdvec.cls \u306e\u8ffd\u52a0\u306b\u4f34\u3044\u3001\u5b9f\u88c5\u3092\u66f8\u304d\u63db\u3048\u305f\u3002\u307b\u3068\u3093\u3069\u5f62\u3092\u5909\u3048\u305a\u306b\u540c\u3058\u6a5f\u80fd\u304c\u5b9f\u73fe\u3067\u304d\u305f\u3002\n\nVBA\u306f\u524d\u65b9\u5ba3\u8a00\u306a\u3057\u3067\u95a2\u6570\u3092\u547c\u3079\u308b\u305f\u3081\u3001\u5c11\u3057\u5947\u5999\u306b\u898b\u3048\u308b\u518d\u5e30\u547c\u3073\u51fa\u3057\u304c\u3067\u304d\u308b\u3002\n\n\u4f8b\u984c\n\u30b8\u30e3\u30b0\u914d\u5217\u3001\u305f\u3068\u3048\u3070 Array(1, Array(2, Array(3, Array(4, Array(5), 6))), 7) \u3092\u30d5\u30e9\u30c3\u30c8\u306a\u914d\u5217Array(1, 2, 3, 4, 5, 6, 7) \u306b\u5c55\u958b\u3059\u308b\u3002\n\n\u65b9\u91dd\n\u6b21\u306e\u3088\u3046\u306a\u95a2\u6570curiouslyRecursive \u3092\u4f5c\u308b\u3002\n\n\u51fa\u529b\u7528\u306e\u914d\u5217\uff08\u5b9f\u969b\u306b\u306f\u30a4\u30c6\u30ec\u30fc\u30bf1\uff09 \u3092\u53d7\u3051\u53d6\u308a\u3001\u305d\u306e\u672b\u5c3e\u306b\u5bfe\u8c61\u914d\u5217\u306e\u5404\u8981\u7d20\u3092\u9806\u306b\u8ffd\u8a18\u3057\u3066\u3044\u304f\u3002\u8981\u7d20\u81ea\u8eab\u304c\u914d\u5217\u3067\u3042\u308b\u6642\u306f\u518d\u5e30\u7684\u306b\u51e6\u7406\u3059\u308b\u3002\n\u4e0a\u8a18\u306e\u7e70\u308a\u8fd4\u3057\u51e6\u7406\u306f\u7573\u307f\u8fbc\u307f\u95a2\u6570foldl\u3067\u8868\u73fe\u3059\u308b\u3002accumulator\u306f\u51fa\u529b\u7528\u914d\u5217\u3002\n\u3053\u306e\u95a2\u6570\u81ea\u4f53\u3092foldl\u306e\u5f15\u6570\u306b\u6e21\u3057\u3066\u518d\u5e30\u3059\u308b\n\n\n\u30b3\u30fc\u30c9\n' \u5c11\u3057\u3060\u3051\u5947\u5999\u306a\u518d\u5e30\nFunction curiouslyRecursive(ByRef it As Variant, ByRef x As Variant) As Variant\n    If IsArray(x) Then  ' \u914d\u5217\u306e\u5834\u5408\n        curiouslyRecursive = foldl(p_curiouslyRecursive, it, x)  ' \u2190 \u3053\u3053\n    Else  ' \u5358\u4e00\u5909\u6570\u306e\u5834\u5408\n        curiouslyRecursive = iterator_push_ex(it, x)     ' \u5358\u7d14\u306b\u672b\u5c3e\u306b\u8ffd\u52a0\n    End If\nEnd Function\n\n    ' \u3053\u306e\u95a2\u6570\u3092\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u5316\u3057\u305f\u3082\u306e\n    Function p_curiouslyRecursive(Optional ByRef firstParam As Variant, Optional ByRef secondParam As Variant) As Variant\n        p_curiouslyRecursive = make_funPointer(AddressOf curiouslyRecursive, firstParam, secondParam)\n    End Function\n\n' \u30c6\u30b9\u30c8\u95a2\u6570\nSub curiouslyRecursiveTest()\n    Dim arr As Variant\n    arr = Array(1, Array(2, Array(3, Array(4, Array(5), 6))), 7) ' \u30b8\u30e3\u30b0\u914d\u5217\n    Dim ret As Variant: ret = Array()    ' \u7d50\u679c\u51fa\u529b\u7528\u914d\u5217\n    Dim it As Variant:  it = make_iterator(ret)\n    it = curiouslyRecursive(it, arr)\n    ret = release_iterator(it)\n    ReDim Preserve ret(0 To iterator_pos(it))\n    printS ret  ' \u30b5\u30a4\u30ba\u8868\u793a\n    printM ret  ' \u914d\u5217\u306e\u5185\u5bb9\u8868\u793a\nEnd Sub\n\n\u300c\u3053\u3053\u300d\u3068\u30b3\u30e1\u30f3\u30c8\u3057\u305f\u7b87\u6240\u3067\u3001\u81ea\u5206\u81ea\u8eab\u3092foldl\u306e\u5f15\u6570\u306b\u6e21\u3057\u3066\u3044\u308b\u3002\u914d\u5217\u3067\u306f\u306a\u3044\u5358\u4e00\u306e\u5909\u6570\u306b\u5230\u9054\u3059\u308b\u307e\u3067\u518d\u5e30\u7684\u306b\u547c\u3073\u51fa\u3055\u308c\u3001\u5358\u4e00\u5909\u6570\u306b\u306a\u3063\u305f\u3089\u305d\u308c\u3092\u672b\u5c3e\u306b\u8ffd\u52a0\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u3002\n\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u65b0\u898f\u306b\u5c0e\u5165\u3057\u305f\u95a2\u6570\uff09\n\u914d\u5217\u306e\u672b\u5c3e\u306b\u8ffd\u8a18\u3059\u308b\u3068\u304d\u306f\u30b5\u30a4\u30ba\u3092\u62e1\u5f35\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u3067\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u51e6\u7406\u52b9\u7387\u3092\u8003\u616e\u3057\u305f\u65b0\u3057\u3044\u95a2\u6570iterator_push_ex\u3092\u8ffd\u52a0\u3057\u305f\u3002\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u6307\u3059\u4f4d\u7f6e\u304c\u914d\u5217\u306eUBound\u3092\u8d85\u3048\u3066\u3044\u305f\u3089\u30b5\u30a4\u30ba\u30922\u500d\u306b\u3059\u308b\u3002\n' \u7bc4\u56f2\u62e1\u5f35\u3057\u306a\u304c\u3089iterator_push\nFunction iterator_push_ex(ByRef it As Variant, ByRef x As Variant) As Variant\n    Dim m As Long: m = max_fun(it(1), 2 * UBound(it(0)) - LBound(it(0)) + 1)\n    If UBound(it(0)) < it(1) Then\n        Dim tmp As Variant\n        swapVariant tmp, it(0)\n        ReDim Preserve tmp(LBound(tmp) To m)\n        swapVariant tmp, it(0)\n    End If\n    iterator_push_ex = iterator_push(it, x)\nEnd Function\n\n\n\u30e2\u30b8\u30e5\u30fc\u30eb\n\u30a4\u30c6\u30ec\u30fc\u30bf \u2192 Haskell_6_iterator.bas\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9 \u2192 test_module.bas\n\nVBAHaskell\u306e\u7d39\u4ecb \u305d\u306e22\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\uff09\nVBAHaskell\u306e\u7d39\u4ecb \u305d\u306e1\uff08\u6700\u521d\u306fmapF\uff09\n\n\n\n\nVBAHaskell\u306e\u7d39\u4ecb \u305d\u306e22\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\uff09\u00a0\u21a9\n\n\n\n(2016/3/7)\n\u3053\u306e\u95a2\u6570\u306fHaskell_6_iterator.bas \u306e\u5ec3\u6b62\u3068 vh_stdvec.cls \u306e\u8ffd\u52a0\u306b\u4f34\u3044\u3001\u5b9f\u88c5\u3092\u66f8\u304d\u63db\u3048\u305f\u3002\u307b\u3068\u3093\u3069\u5f62\u3092\u5909\u3048\u305a\u306b\u540c\u3058\u6a5f\u80fd\u304c\u5b9f\u73fe\u3067\u304d\u305f\u3002\n\n* * *\n\nVBA\u306f\u524d\u65b9\u5ba3\u8a00\u306a\u3057\u3067\u95a2\u6570\u3092\u547c\u3079\u308b\u305f\u3081\u3001\u5c11\u3057\u5947\u5999\u306b\u898b\u3048\u308b\u518d\u5e30\u547c\u3073\u51fa\u3057\u304c\u3067\u304d\u308b\u3002\n\n#\u4f8b\u984c\n\u30b8\u30e3\u30b0\u914d\u5217\u3001\u305f\u3068\u3048\u3070 `Array(1, Array(2, Array(3, Array(4, Array(5), 6))), 7)` \u3092\u30d5\u30e9\u30c3\u30c8\u306a\u914d\u5217`Array(1, 2, 3, 4, 5, 6, 7)` \u306b\u5c55\u958b\u3059\u308b\u3002\n\n#\u65b9\u91dd\n\u6b21\u306e\u3088\u3046\u306a\u95a2\u6570`curiouslyRecursive` \u3092\u4f5c\u308b\u3002\n\n1. \u51fa\u529b\u7528\u306e\u914d\u5217\uff08\u5b9f\u969b\u306b\u306f\u30a4\u30c6\u30ec\u30fc\u30bf[^1]\uff09 \u3092\u53d7\u3051\u53d6\u308a\u3001\u305d\u306e\u672b\u5c3e\u306b\u5bfe\u8c61\u914d\u5217\u306e\u5404\u8981\u7d20\u3092\u9806\u306b\u8ffd\u8a18\u3057\u3066\u3044\u304f\u3002\u8981\u7d20\u81ea\u8eab\u304c\u914d\u5217\u3067\u3042\u308b\u6642\u306f\u518d\u5e30\u7684\u306b\u51e6\u7406\u3059\u308b\u3002\n2. \u4e0a\u8a18\u306e\u7e70\u308a\u8fd4\u3057\u51e6\u7406\u306f\u7573\u307f\u8fbc\u307f\u95a2\u6570`foldl`\u3067\u8868\u73fe\u3059\u308b\u3002accumulator\u306f\u51fa\u529b\u7528\u914d\u5217\u3002\n3. **\u3053\u306e\u95a2\u6570\u81ea\u4f53\u3092`foldl`\u306e\u5f15\u6570\u306b\u6e21\u3057\u3066\u518d\u5e30\u3059\u308b**\n\n#\u30b3\u30fc\u30c9\n```vbnet\n' \u5c11\u3057\u3060\u3051\u5947\u5999\u306a\u518d\u5e30\nFunction curiouslyRecursive(ByRef it As Variant, ByRef x As Variant) As Variant\n    If IsArray(x) Then  ' \u914d\u5217\u306e\u5834\u5408\n        curiouslyRecursive = foldl(p_curiouslyRecursive, it, x)  ' \u2190 \u3053\u3053\n    Else  ' \u5358\u4e00\u5909\u6570\u306e\u5834\u5408\n        curiouslyRecursive = iterator_push_ex(it, x)     ' \u5358\u7d14\u306b\u672b\u5c3e\u306b\u8ffd\u52a0\n    End If\nEnd Function\n\n    ' \u3053\u306e\u95a2\u6570\u3092\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u5316\u3057\u305f\u3082\u306e\n    Function p_curiouslyRecursive(Optional ByRef firstParam As Variant, Optional ByRef secondParam As Variant) As Variant\n        p_curiouslyRecursive = make_funPointer(AddressOf curiouslyRecursive, firstParam, secondParam)\n    End Function\n\n' \u30c6\u30b9\u30c8\u95a2\u6570\nSub curiouslyRecursiveTest()\n    Dim arr As Variant\n    arr = Array(1, Array(2, Array(3, Array(4, Array(5), 6))), 7) ' \u30b8\u30e3\u30b0\u914d\u5217\n    Dim ret As Variant: ret = Array()    ' \u7d50\u679c\u51fa\u529b\u7528\u914d\u5217\n    Dim it As Variant:  it = make_iterator(ret)\n    it = curiouslyRecursive(it, arr)\n    ret = release_iterator(it)\n    ReDim Preserve ret(0 To iterator_pos(it))\n    printS ret  ' \u30b5\u30a4\u30ba\u8868\u793a\n    printM ret  ' \u914d\u5217\u306e\u5185\u5bb9\u8868\u793a\nEnd Sub\n```\n**\u300c\u3053\u3053\u300d**\u3068\u30b3\u30e1\u30f3\u30c8\u3057\u305f\u7b87\u6240\u3067\u3001\u81ea\u5206\u81ea\u8eab\u3092`foldl`\u306e\u5f15\u6570\u306b\u6e21\u3057\u3066\u3044\u308b\u3002\u914d\u5217\u3067\u306f\u306a\u3044\u5358\u4e00\u306e\u5909\u6570\u306b\u5230\u9054\u3059\u308b\u307e\u3067\u518d\u5e30\u7684\u306b\u547c\u3073\u51fa\u3055\u308c\u3001\u5358\u4e00\u5909\u6570\u306b\u306a\u3063\u305f\u3089\u305d\u308c\u3092\u672b\u5c3e\u306b\u8ffd\u52a0\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u3002\n\n\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u65b0\u898f\u306b\u5c0e\u5165\u3057\u305f\u95a2\u6570\uff09\n\u914d\u5217\u306e\u672b\u5c3e\u306b\u8ffd\u8a18\u3059\u308b\u3068\u304d\u306f\u30b5\u30a4\u30ba\u3092\u62e1\u5f35\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u3067\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u51e6\u7406\u52b9\u7387\u3092\u8003\u616e\u3057\u305f\u65b0\u3057\u3044\u95a2\u6570`iterator_push_ex`\u3092\u8ffd\u52a0\u3057\u305f\u3002\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u6307\u3059\u4f4d\u7f6e\u304c\u914d\u5217\u306e`UBound`\u3092\u8d85\u3048\u3066\u3044\u305f\u3089\u30b5\u30a4\u30ba\u30922\u500d\u306b\u3059\u308b\u3002\n\n```vbnet\n' \u7bc4\u56f2\u62e1\u5f35\u3057\u306a\u304c\u3089iterator_push\nFunction iterator_push_ex(ByRef it As Variant, ByRef x As Variant) As Variant\n    Dim m As Long: m = max_fun(it(1), 2 * UBound(it(0)) - LBound(it(0)) + 1)\n    If UBound(it(0)) < it(1) Then\n        Dim tmp As Variant\n        swapVariant tmp, it(0)\n        ReDim Preserve tmp(LBound(tmp) To m)\n        swapVariant tmp, it(0)\n    End If\n    iterator_push_ex = iterator_push(it, x)\nEnd Function\n```\n#\u30e2\u30b8\u30e5\u30fc\u30eb\n\u30a4\u30c6\u30ec\u30fc\u30bf \u2192 [Haskell_6_iterator.bas](https://github.com/mYmd/VBA/blob/master/Haskell_6_iterator.bas)\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9 \u2192 [test_module.bas](https://github.com/mYmd/VBA/blob/master/test_module.bas)\n* * *\n[VBAHaskell\u306e\u7d39\u4ecb \u305d\u306e22\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\uff09](http://qiita.com/mmYYmmdd/items/e0a7313c1cc680905f19)\n[VBAHaskell\u306e\u7d39\u4ecb \u305d\u306e1\uff08\u6700\u521d\u306fmapF\uff09](http://qiita.com/mmYYmmdd/items/c731edf943acc0a0ebe9)\n\n[^1]: [VBAHaskell\u306e\u7d39\u4ecb \u305d\u306e22\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\uff09](http://qiita.com/mmYYmmdd/items/e0a7313c1cc680905f19)\n", "tags": ["VBA"]}