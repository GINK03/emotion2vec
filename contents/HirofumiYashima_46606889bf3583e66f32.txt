{"tags": ["SQL", "R", "\u30c7\u30fc\u30bf\u5206\u6790", "\u7d71\u8a08\u5b66", "statistics"], "context": " More than 1 year has passed since last update.\n\n\u4f8b\u984c\u8a2d\u5b9a\n\n\u3010\u6b63\u89e3\u30c7\u30fc\u30bf\u3011\u203b L\u56de\u5e30\u306e\u76ee\u7684\u5909\u6570\n30\u65e5\u5f8c\u306e DAILY_ACTIVE_FLAG \u30ab\u30e9\u30e0\u306e\u5024 (1 or 0)\n\n\u3010\u8aac\u660e\u5909\u6570\u3011\n\u203b\u5404\u7a2e\u8abf\u67fb\u306e\u7d50\u679c\u3001\u624b\u6301\u3061\u306e\u4eee\u8aac\u306f\u4ee5\u4e0b\u3067\u3042\u308b\u3002\n\u300e\u65e5\u3005\u3001\u3069\u308c\u3060\u3051\u4ed6\u30e6\u30fc\u30b6\u3068\u30b3\u30df\u30e5\u30cb\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u697d\u3057\u3093\u3060\u304b\u304c\u3001\u30b2\u30fc\u30e0\u7d99\u7d9a\u7387\u3092\u6c7a\u3081\u308b\u300f\n\u5177\u4f53\u7684\u306a\u6570\u5024\u3068\u3057\u3066\u3001\uff11\u65e5\u3001\uff13\u56de\u4ee5\u4e0a\u3001\u4ed6\u30e6\u30fc\u30b6\u3068\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u3042\u3063\u305f\u304b\u3069\u3046\u304b\u3001\u304c\u95be\u5024\u306b\u306a\u308b\u3068\u3001\u524d\u6bb5\u306e\u96c6\u8a08\u3084\u5206\u6790\u304b\u3089\u3001\u660e\u3089\u304b\u306b\u306a\u3063\u305f\n( FRIEND_ACTION_COUNT >= 3 )\n\u4e0a\u8a18\u306e\u7d50\u679c\u3068\u3057\u3066\u3001\u5f8c\u304b\u3089\u3064\u3044\u3066\u304f\u308b\u5909\u6570\u3067\u306f\u3042\u308b\u304c\u3001\u4ed6\u306b\u91cd\u8981\u306aKPI\u306f\u3001\u4ee5\u4e0b\u306e\uff12\u70b9\u3068\u8003\u3048\u3089\u308c\u308b\u3002\n(1) \u3042\u308b\u65e5\u306e\u30ab\u30fc\u30c9\u30fb\u30ac\u30c1\u30e3\u5f15\u3044\u305f\u5408\u8a08\u56de\u6570\uff08\u6709\u511f\u3001\u7121\u511f\u5408\u8a08\uff09CARD_GACHA_COUNT\n(2) \u3042\u308b\u65e5\u306e\u81ea\u5df1\u30b9\u30c6\u30fc\u30bf\u30b9\uff08\u4f53\u529b\u3001\u30e6\u30fc\u30b6\u4e2d\u306e\u76f8\u5bfe\u9806\u4f4d\u3001\u6240\u5c5e\u540c\u76df\u30fb\u9023\u5408\u30c1\u30fc\u30e0\u5168\u4f53\u306e\u72b6\u6cc1\u3001\u4fdd\u6709\u30ab\u30fc\u30c9\u6570\u306a\u3069\uff09\u95b2\u89a7\u753b\u9762\u30a2\u30af\u30bb\u30b9\u56de\u6570 STATUS_CHECK_COUNT\n\u305d\u3053\u3067\u300130\u65e5\u5f8c\u3001DAILY ACTIVE\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3059\u308b\u305f\u3081\u306e\u8aac\u660e\u5909\u6570\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u306e\uff13\u5909\u6570\u3092\u9078\u629e\u3057\u305f\n(1) CARD_GACHA_COUNT\n(2) STATUS_CHECK_COUNT\n(3) SCORE\n   \u3010 \u5b9a\u7fa9 \u3011\n   \u904e\u53bb14\u65e5\u9593\u306e (\u6628\u65e5\uff5e14\u65e5\u524d\u307e\u3067\uff09FRIEND_ACTION_COUNT \u306e\u5b9f\u7e3e\n  \u203b \u5404\u65e5\u306e\u91cd\u307f\u3065\u3051\u306f\u3001FRIEND_ACTION_COUNT \u306e\u81ea\u5df1\u76f8\u95a2\u5206\u6790\uff08R\u8a00\u8a9e\u306eacf()\u95a2\u6570\uff09\u3082\u3057\u304f\u306f ARIMA\u30e2\u30c7\u30eb\u3067\u63a8\u8a08\u3057\u305f\u504f\u81ea\u5df1\u56de\u5e30\u4fc2\u6570 \u3092SQL\u5185\u306b\u30d9\u30bf\u6253\u3061\n\n\nSQL\n\n\n1. \u300c\u6b63\u89e3\u30c7\u30fc\u30bf\u300d\u306e30\u65e5\u524d\u306e\u6642\u70b9\u306b\u3001\u30e2\u30c7\u30eb\u306f\u63a8\u8a08\u3055\u308c\u308b\u3002\u30e2\u30c7\u30eb\u5b66\u7fd2\u7528\uff08\u53ca\u3073 \u30c6\u30b9\u30c8\u6642\u306b\u30e2\u30c7\u30eb\u306b\u4e0e\u3048\u308b\u8aac\u660e\u5909\u6570\u7528\uff09\u306e\u30c7\u30fc\u30bf\u3068\u3057\u3066\u3001\u300c\u6b63\u89e3\u30c7\u30fc\u30bf\u300d\u306e30\u65e5\u524d\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\n\n\n2. lag()\u309214\u671f\u9593\u3068\u308b\u305f\u3081\u306b\u30011\u30e6\u30fc\u30b6\u306b\u3064\u304d\u3001\uff08\u30c7\u30fc\u30bf\u304c\u3042\u308b\uff09\u6628\u65e5\uff5e14\u65e5\u524d\u307e\u3067\uff08\u203b\u65e5\u4ed8\u6b20\u843d\u30ec\u30b3\u30fc\u30c9\u3042\u308b\u5834\u5408\u306f\u3001\u30c7\u30fc\u30bf\u306e\u3042\u308b\u76f4\u8fd1 14\u65e5\u5206\uff09\u306e\u30ec\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3059\u308b\n\n\nSQL\nwhere create_time between current_date + interval '-45 day' and current_date + interval '-31 day'\n\n\n\n3.\u6700\u7d42\u7684\u306b\u6b32\u3057\u3044\u306e\u306f\u3001\uff11\u30e6\u30fc\u30b6\u306b\u3064\u304d\uff11\u30ec\u30b3\u30fc\u30c9\uff08lag\u30ab\u30e9\u30e0\u3059\u3079\u3066NULL\u3067\u306a\u304f\u3001\u904e\u53bb\u65e5\u30ec\u30b3\u30fc\u30c9\u304b\u3089\u305a\u3089\u3057\u3066\u5024\u304c\u683c\u7d0d\u3055\u308c\u305f\u30ec\u30b3\u30fc\u30c9\uff11\u884c\u306e\u307f\uff09\u306b\u7d5e\u308b\n\n\npostgreSQL(Redshift)\nWith prediction_target_day_tbl AS (\nSELECT create_time\n       , USER_ID\n       , DAILY_ACTIVE_FLAG AS SEIKAI\nFROM USER_ACTION_LOG    \nWHERE create_time = CURRENT_DATE + INTERVAL '-1 DAY'   --\u2606\u2606 DB\u306b\u30c7\u30fc\u30bf\u306e\u3042\u308b\u518d\u76f4\u8fd1\u65e5\u306e\u30c7\u30fc\u30bf\u3092\u3001\u30e2\u30c7\u30eb\u304c\u8a00\u3044\u5f53\u3066\u308b\u3079\u304d\u300c\u6b63\u89e3\u30c7\u30fc\u30bf\u300d\uff08\u5b9f\u73fe\u5024\uff09\u3068\u3057\u3066\u300c\u6559\u5e2b\u7528\u30c7\u30fc\u30bf\u300d\u3068\u3057\u3066\u4f7f\u3046\u305f\u3081\u306b\u53d6\u5f97 \u2606\u2606\n), temp AS (select        prediction_target_day_tbl.create_time AS PREDICTION_TARGET_DATE,  prediction_target_day_tbl.SEIKAI,\nprediction_target_day_tbl.USER_ID,\n          estimation_day_tbl.CARD_GACHA_COUNT,\n          estimation_day_tbl.STATUS_CHECK_COUNT\n          (case when estimation_day_tbl.FRIEND_ACTION_COUNT >= 3 then 1 else 0 end) as FRIEND_ACTION_COUNT ,\n          lag(case when estimation_day_tbl.FRIEND_ACTION_COUNT >= 3 then 1 else 0 end, 1) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.create_time) as FRIEND_ACTION_COUNT_1_AGO,\n          lag(case when estimation_day_tbl.FRIEND_ACTION_COUNT >= 3 then 1 else 0 end, 2) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.create_time) as FRIEND_ACTION_COUNT_2_AGO,\n          lag(case when estimation_day_tbl.FRIEND_ACTION_COUNT >= 3 then 1 else 0 end, 3) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.create_time) as FRIEND_ACTION_COUNT_3_AGO,\n          lag(case when estimation_day_tbl.FRIEND_ACTION_COUNT >= 3 then 1 else 0 end, 4) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.create_time) as FRIEND_ACTION_COUNT_4_AGO,\n          lag(case when estimation_day_tbl.FRIEND_ACTION_COUNT >= 3 then 1 else 0 end, 5) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.create_time) as FRIEND_ACTION_COUNT_5_AGO,\n          lag(case when estimation_day_tbl.FRIEND_ACTION_COUNT >= 3 then 1 else 0 end, 6) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.create_time) as FRIEND_ACTION_COUNT_6_AGO,\n          lag(case when estimation_day_tbl.FRIEND_ACTION_COUNT >= 3 then 1 else 0 end, 7) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.create_time) as FRIEND_ACTION_COUNT_7_AGO,\n          lag(case when estimation_day_tbl.FRIEND_ACTION_COUNT >= 3 then 1 else 0 end, 8) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.create_time) as FRIEND_ACTION_COUNT_8_AGO,\n          lag(case when estimation_day_tbl.FRIEND_ACTION_COUNT >= 3 then 1 else 0 end, 9) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.create_time) as FRIEND_ACTION_COUNT_9_AGO,\n          lag(case when estimation_day_tbl.FRIEND_ACTION_COUNT >= 3 then 1 else 0 end, 10) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.create_time) as FRIEND_ACTION_COUNT_10_AGO,\n          lag(case when estimation_day_tbl.FRIEND_ACTION_COUNT >= 3 then 1 else 0 end, 11) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.create_time) as FRIEND_ACTION_COUNT_11_AGO,\n          lag(case when estimation_day_tbl.FRIEND_ACTION_COUNT >= 3 then 1 else 0 end, 12) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.create_time) as FRIEND_ACTION_COUNT_12_AGO,\n          lag(case when estimation_day_tbl.FRIEND_ACTION_COUNT >= 3 then 1 else 0 end, 13) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.create_time) as FRIEND_ACTION_COUNT_13_AGO,\n          lag(case when estimation_day_tbl.FRIEND_ACTION_COUNT >= 3 then 1 else 0 end, 14) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.create_time) as FRIEND_ACTION_COUNT_14_AGO,\nfrom prediction_target_day_tbl  JOIN USER_ACTION_LOG AS estimation_day_tbl\nON prediction_target_day_tbl.USER_ID = estimation_day_tbl.USER_ID\nwhere estimation_day_tbl.create_time between current_date + interval '-45 day' and current_date + interval '-31 day'\nlimit 10000\n) select *,   (10.5*FRIEND_ACTION_COUNT_1_AGO + 3.2*FRIEND_ACTION_COUNT_2_AGO + 2.1*FRIEND_ACTION_COUNT_3_AGO  + 0.5*FRIEND_ACTION_COUNT_4_AGO + 0.3*FRIEND_ACTION_COUNT_5_AGO\n           + 0.2*FRIEND_ACTION_COUNT_6_AGO + 12.3*FRIEND_ACTION_COUNT_7_AGO + 20.4*FRIEND_ACTION_COUNT_8_AGO + 2.9*FRIEND_ACTION_COUNT_9_AGO + 1.2*FRIEND_ACTION_COUNT_10_AGO\n           + 0.01*FRIEND_ACTION_COUNT_11_AGO + 0.35*FRIEND_ACTION_COUNT_12_AGO + 0.22*FRIEND_ACTION_COUNT_13_AGO + 12.3*FRIEND_ACTION_COUNT_14_AGO) as score\n  from temp\n  where create_time = current_date + interval '-31 day'  --\u2606\u2606 lag\u30ab\u30e9\u30e0\u304c\u3059\u3079\u3066\u5024 \u683c\u7d0d\u3055\u308c\u305f 1\u30e6\u30fc\u30b6 1\u30ec\u30b3\u30fc\u30c9\u306b\u7d5e\u308b \u2606\u2606\n  order by USER_ID, create_time\n;\n\n\n\n\nR\u8a00\u8a9e\u3067\u306e\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u63a8\u8a08\n\n\nR\n\nsetwd('C:/HirofumiYashima/Desktop/Logistic_regression_model')\n# list.files()\n\ndata <- read.csv(\"data.csv\"), header=T)\n\n# class(data)\n# nrow(data); ncol(data)\n# colnames(data)\n\n# head(data)\n\ndata.train <- data[sample(nrow(data), (nrow(data)/2)), ]\n\n# head(data.train)\n# nrow(data.train)\n\ndata.test <- data[sample(nrow(data), (nrow(data)/2)),]\n# head(data.test)\n# nrow(data.test)\n\nmodel <- glm(seikai~CARD_GACHA_COUNT + STATUS_CHECK_COUNT + SCORE, data=data.train, family=binomial)\nsummary(model)\n\nmodel.predict <- predict(model, data.test, type=\"response\")\n\n# summary(model.predict)\n\nresult <- data.frame(seikai = data.test$seikai, predicted_values = model.predict)\n\n# L\u56de\u5e30\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u5024 (predicted_values) \u304c 0.7\u4ee5\u4e0a\u3067\u3042\u308c\u3070\u3001Daily Active \u3060\u3063\u305f\u3068\u5b9a\u7fa9\nresult$predicted_values[result$predicted_values >= 0.7] <- 1\nresult$predicted_values[result$predicted_values < 0.7] <- 0\n# head(result)\n\n# \uff13\uff10\u65e5\u5f8c Daily Active\u3060\u3063\u305f\u304b\u5426\u304b\u306e\u5b9f\u73fe\u5024\uff09\u3068\u3001\n# \uff13\uff10\u65e5\u5f8c Daily Active\u8a72\u5426\u306e\u4e88\u6e2c\u5024 \u3092\u7a81\u304d\u5408\u305b\u3066\u3001\u8a72\u5f53\uff08\uff11\uff09\u3001\u975e\u8a72\u5f53\uff08\uff10\uff09\uff12\u884c\uff12\u5217\u306e\u8868\u306b\u3057\u3066\u4e88\u6e2c\u6b63\u89e3\u7387 \u3092\u96c6\u8a08 \uff08\u5bfe\u89d2\u6210\u5206\u306e\u4ef6\u6570\u304c\u3001\u6b63\u89e3\u4ef6\u6570\uff09\n\ntable(result$seikai, result$predicted_values)\n\n# \u5b9f\u73fe\u5024\u304cDaily Active \u3067\u3001\u4e88\u6e2c\u7387\u3082Daily Active\u3068\u8a00\u3044\u5f53\u3066\u3066\u3044\u305f\u4ef6\u6570\n# head(subset(result (seikai==1 & predicted_values ==1)))\n\n# \u5b9f\u73fe\u5024\u304c\u975eDaily Active\u3067\u3001\u4e88\u6e2c\u7387\u3082\u975eDaily Active\u3068\u8a00\u3044\u5f53\u3066\u3066\u3044\u305f\u4ef6\u6570\n# head(subset(result, (seikai==0 & predicted_values ==0)))\n\n# nrow(subset(result, (seikai==1 & predicted_values ==1)))\n# nrow(subset(result, (seikai==0 & predicted_values ==0)))\n\nCV_prediction_success_count <- nrow(subset(result, (seikai==1 & predicted_values ==1))) \nNonCV_prediction_success_count <- nrow(subset(result, (seikai==0 & predicted_values ==0))) \nnrow_test_dataset <- nrow(data.test)\n\nprediction_success_ratio <-  (CV_prediction_success_count + NonCV_prediction_success_count)/nrow_test_dataset\nmessage = paste(\"\u6b63\u89e3\u7387:\", (round(prediction_success_ratio, 4)*100), \"%\")\nprint(message)\n\n\n\n## __\u4f8b\u984c\u8a2d\u5b9a__\n\n\u3010\u6b63\u89e3\u30c7\u30fc\u30bf\u3011\u203b L\u56de\u5e30\u306e\u76ee\u7684\u5909\u6570\n\n30\u65e5\u5f8c\u306e DAILY_ACTIVE_FLAG \u30ab\u30e9\u30e0\u306e\u5024 (1 or 0)\n___\n\n\u3010\u8aac\u660e\u5909\u6570\u3011\n\n\u203b\u5404\u7a2e\u8abf\u67fb\u306e\u7d50\u679c\u3001\u624b\u6301\u3061\u306e\u4eee\u8aac\u306f\u4ee5\u4e0b\u3067\u3042\u308b\u3002\n\n\u300e\u65e5\u3005\u3001\u3069\u308c\u3060\u3051\u4ed6\u30e6\u30fc\u30b6\u3068\u30b3\u30df\u30e5\u30cb\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u697d\u3057\u3093\u3060\u304b\u304c\u3001\u30b2\u30fc\u30e0\u7d99\u7d9a\u7387\u3092\u6c7a\u3081\u308b\u300f\n\n\u5177\u4f53\u7684\u306a\u6570\u5024\u3068\u3057\u3066\u3001\uff11\u65e5\u3001\uff13\u56de\u4ee5\u4e0a\u3001\u4ed6\u30e6\u30fc\u30b6\u3068\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u3042\u3063\u305f\u304b\u3069\u3046\u304b\u3001\u304c\u95be\u5024\u306b\u306a\u308b\u3068\u3001\u524d\u6bb5\u306e\u96c6\u8a08\u3084\u5206\u6790\u304b\u3089\u3001\u660e\u3089\u304b\u306b\u306a\u3063\u305f\n( FRIEND_ACTION_COUNT >= 3 )\n\n\n\u4e0a\u8a18\u306e\u7d50\u679c\u3068\u3057\u3066\u3001\u5f8c\u304b\u3089\u3064\u3044\u3066\u304f\u308b\u5909\u6570\u3067\u306f\u3042\u308b\u304c\u3001\u4ed6\u306b\u91cd\u8981\u306aKPI\u306f\u3001\u4ee5\u4e0b\u306e\uff12\u70b9\u3068\u8003\u3048\u3089\u308c\u308b\u3002\n\n(1) \u3042\u308b\u65e5\u306e\u30ab\u30fc\u30c9\u30fb\u30ac\u30c1\u30e3\u5f15\u3044\u305f\u5408\u8a08\u56de\u6570\uff08\u6709\u511f\u3001\u7121\u511f\u5408\u8a08\uff09CARD_GACHA_COUNT\n(2) \u3042\u308b\u65e5\u306e\u81ea\u5df1\u30b9\u30c6\u30fc\u30bf\u30b9\uff08\u4f53\u529b\u3001\u30e6\u30fc\u30b6\u4e2d\u306e\u76f8\u5bfe\u9806\u4f4d\u3001\u6240\u5c5e\u540c\u76df\u30fb\u9023\u5408\u30c1\u30fc\u30e0\u5168\u4f53\u306e\u72b6\u6cc1\u3001\u4fdd\u6709\u30ab\u30fc\u30c9\u6570\u306a\u3069\uff09\u95b2\u89a7\u753b\u9762\u30a2\u30af\u30bb\u30b9\u56de\u6570 STATUS_CHECK_COUNT\n\n\u305d\u3053\u3067\u300130\u65e5\u5f8c\u3001DAILY ACTIVE\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3059\u308b\u305f\u3081\u306e\u8aac\u660e\u5909\u6570\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u306e\uff13\u5909\u6570\u3092\u9078\u629e\u3057\u305f\n\n(1) CARD_GACHA_COUNT\n(2) STATUS_CHECK_COUNT\n(3) SCORE\n   \u3010 \u5b9a\u7fa9 \u3011\n   \u904e\u53bb14\u65e5\u9593\u306e (\u6628\u65e5\uff5e14\u65e5\u524d\u307e\u3067\uff09FRIEND_ACTION_COUNT \u306e\u5b9f\u7e3e\n  \u203b \u5404\u65e5\u306e\u91cd\u307f\u3065\u3051\u306f\u3001FRIEND_ACTION_COUNT \u306e\u81ea\u5df1\u76f8\u95a2\u5206\u6790\uff08R\u8a00\u8a9e\u306eacf()\u95a2\u6570\uff09\u3082\u3057\u304f\u306f ARIMA\u30e2\u30c7\u30eb\u3067\u63a8\u8a08\u3057\u305f\u504f\u81ea\u5df1\u56de\u5e30\u4fc2\u6570 \u3092SQL\u5185\u306b\u30d9\u30bf\u6253\u3061\n\n___\n\n\n## __SQL__\n\n#### __1. \u300c\u6b63\u89e3\u30c7\u30fc\u30bf\u300d\u306e30\u65e5\u524d\u306e\u6642\u70b9\u306b\u3001\u30e2\u30c7\u30eb\u306f\u63a8\u8a08\u3055\u308c\u308b\u3002\u30e2\u30c7\u30eb\u5b66\u7fd2\u7528\uff08\u53ca\u3073 \u30c6\u30b9\u30c8\u6642\u306b\u30e2\u30c7\u30eb\u306b\u4e0e\u3048\u308b\u8aac\u660e\u5909\u6570\u7528\uff09\u306e\u30c7\u30fc\u30bf\u3068\u3057\u3066\u3001\u300c\u6b63\u89e3\u30c7\u30fc\u30bf\u300d\u306e30\u65e5\u524d\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97__\n\n#### __2. lag()\u309214\u671f\u9593\u3068\u308b\u305f\u3081\u306b\u30011\u30e6\u30fc\u30b6\u306b\u3064\u304d\u3001\uff08\u30c7\u30fc\u30bf\u304c\u3042\u308b\uff09\u6628\u65e5\uff5e14\u65e5\u524d\u307e\u3067\uff08\u203b\u65e5\u4ed8\u6b20\u843d\u30ec\u30b3\u30fc\u30c9\u3042\u308b\u5834\u5408\u306f\u3001\u30c7\u30fc\u30bf\u306e\u3042\u308b\u76f4\u8fd1 14\u65e5\u5206\uff09\u306e\u30ec\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3059\u308b__\n\n```{SQL:SQL}\nwhere create_time between current_date + interval '-45 day' and current_date + interval '-31 day'\n```\n\n#### __3.\u6700\u7d42\u7684\u306b\u6b32\u3057\u3044\u306e\u306f\u3001\uff11\u30e6\u30fc\u30b6\u306b\u3064\u304d\uff11\u30ec\u30b3\u30fc\u30c9\uff08lag\u30ab\u30e9\u30e0\u3059\u3079\u3066NULL\u3067\u306a\u304f\u3001\u904e\u53bb\u65e5\u30ec\u30b3\u30fc\u30c9\u304b\u3089\u305a\u3089\u3057\u3066\u5024\u304c\u683c\u7d0d\u3055\u308c\u305f\u30ec\u30b3\u30fc\u30c9\uff11\u884c\u306e\u307f\uff09\u306b\u7d5e\u308b__\n\n\n\n```{sql:postgreSQL(Redshift)}\nWith prediction_target_day_tbl AS (\nSELECT create_time\n       , USER_ID\n       , DAILY_ACTIVE_FLAG AS SEIKAI\nFROM USER_ACTION_LOG    \nWHERE create_time = CURRENT_DATE + INTERVAL '-1 DAY'   --\u2606\u2606 DB\u306b\u30c7\u30fc\u30bf\u306e\u3042\u308b\u518d\u76f4\u8fd1\u65e5\u306e\u30c7\u30fc\u30bf\u3092\u3001\u30e2\u30c7\u30eb\u304c\u8a00\u3044\u5f53\u3066\u308b\u3079\u304d\u300c\u6b63\u89e3\u30c7\u30fc\u30bf\u300d\uff08\u5b9f\u73fe\u5024\uff09\u3068\u3057\u3066\u300c\u6559\u5e2b\u7528\u30c7\u30fc\u30bf\u300d\u3068\u3057\u3066\u4f7f\u3046\u305f\u3081\u306b\u53d6\u5f97 \u2606\u2606\n), temp AS (select \t      prediction_target_day_tbl.create_time AS PREDICTION_TARGET_DATE,  prediction_target_day_tbl.SEIKAI,\nprediction_target_day_tbl.USER_ID,\n          estimation_day_tbl.CARD_GACHA_COUNT,\n          estimation_day_tbl.STATUS_CHECK_COUNT\n          (case when estimation_day_tbl.FRIEND_ACTION_COUNT >= 3 then 1 else 0 end) as FRIEND_ACTION_COUNT ,\n\t      lag(case when estimation_day_tbl.FRIEND_ACTION_COUNT >= 3 then 1 else 0 end, 1) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.create_time) as FRIEND_ACTION_COUNT_1_AGO,\n          lag(case when estimation_day_tbl.FRIEND_ACTION_COUNT >= 3 then 1 else 0 end, 2) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.create_time) as FRIEND_ACTION_COUNT_2_AGO,\n          lag(case when estimation_day_tbl.FRIEND_ACTION_COUNT >= 3 then 1 else 0 end, 3) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.create_time) as FRIEND_ACTION_COUNT_3_AGO,\n          lag(case when estimation_day_tbl.FRIEND_ACTION_COUNT >= 3 then 1 else 0 end, 4) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.create_time) as FRIEND_ACTION_COUNT_4_AGO,\n          lag(case when estimation_day_tbl.FRIEND_ACTION_COUNT >= 3 then 1 else 0 end, 5) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.create_time) as FRIEND_ACTION_COUNT_5_AGO,\n          lag(case when estimation_day_tbl.FRIEND_ACTION_COUNT >= 3 then 1 else 0 end, 6) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.create_time) as FRIEND_ACTION_COUNT_6_AGO,\n          lag(case when estimation_day_tbl.FRIEND_ACTION_COUNT >= 3 then 1 else 0 end, 7) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.create_time) as FRIEND_ACTION_COUNT_7_AGO,\n          lag(case when estimation_day_tbl.FRIEND_ACTION_COUNT >= 3 then 1 else 0 end, 8) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.create_time) as FRIEND_ACTION_COUNT_8_AGO,\n          lag(case when estimation_day_tbl.FRIEND_ACTION_COUNT >= 3 then 1 else 0 end, 9) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.create_time) as FRIEND_ACTION_COUNT_9_AGO,\n          lag(case when estimation_day_tbl.FRIEND_ACTION_COUNT >= 3 then 1 else 0 end, 10) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.create_time) as FRIEND_ACTION_COUNT_10_AGO,\n          lag(case when estimation_day_tbl.FRIEND_ACTION_COUNT >= 3 then 1 else 0 end, 11) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.create_time) as FRIEND_ACTION_COUNT_11_AGO,\n          lag(case when estimation_day_tbl.FRIEND_ACTION_COUNT >= 3 then 1 else 0 end, 12) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.create_time) as FRIEND_ACTION_COUNT_12_AGO,\n          lag(case when estimation_day_tbl.FRIEND_ACTION_COUNT >= 3 then 1 else 0 end, 13) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.create_time) as FRIEND_ACTION_COUNT_13_AGO,\n          lag(case when estimation_day_tbl.FRIEND_ACTION_COUNT >= 3 then 1 else 0 end, 14) OVER (PARTITION BY estimation_day_tbl.USER_ID ORDER BY estimation_day_tbl.create_time) as FRIEND_ACTION_COUNT_14_AGO,\nfrom prediction_target_day_tbl  JOIN USER_ACTION_LOG AS estimation_day_tbl\nON prediction_target_day_tbl.USER_ID = estimation_day_tbl.USER_ID\nwhere estimation_day_tbl.create_time between current_date + interval '-45 day' and current_date + interval '-31 day'\nlimit 10000\n) select *,   (10.5*FRIEND_ACTION_COUNT_1_AGO + 3.2*FRIEND_ACTION_COUNT_2_AGO + 2.1*FRIEND_ACTION_COUNT_3_AGO  + 0.5*FRIEND_ACTION_COUNT_4_AGO + 0.3*FRIEND_ACTION_COUNT_5_AGO\n           + 0.2*FRIEND_ACTION_COUNT_6_AGO + 12.3*FRIEND_ACTION_COUNT_7_AGO + 20.4*FRIEND_ACTION_COUNT_8_AGO + 2.9*FRIEND_ACTION_COUNT_9_AGO + 1.2*FRIEND_ACTION_COUNT_10_AGO\n           + 0.01*FRIEND_ACTION_COUNT_11_AGO + 0.35*FRIEND_ACTION_COUNT_12_AGO + 0.22*FRIEND_ACTION_COUNT_13_AGO + 12.3*FRIEND_ACTION_COUNT_14_AGO) as score\n  from temp\n  where create_time = current_date + interval '-31 day'  --\u2606\u2606 lag\u30ab\u30e9\u30e0\u304c\u3059\u3079\u3066\u5024 \u683c\u7d0d\u3055\u308c\u305f 1\u30e6\u30fc\u30b6 1\u30ec\u30b3\u30fc\u30c9\u306b\u7d5e\u308b \u2606\u2606\n  order by USER_ID, create_time\n;\n```\n\n\n___\n\n\n## __R\u8a00\u8a9e\u3067\u306e\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u63a8\u8a08__\n\n\n```{R:R}\n\nsetwd('C:/HirofumiYashima/Desktop/Logistic_regression_model')\n# list.files()\n\ndata <- read.csv(\"data.csv\"), header=T)\n\n# class(data)\n# nrow(data); ncol(data)\n# colnames(data)\n\n# head(data)\n\ndata.train <- data[sample(nrow(data), (nrow(data)/2)), ]\n\n# head(data.train)\n# nrow(data.train)\n\ndata.test <- data[sample(nrow(data), (nrow(data)/2)),]\n# head(data.test)\n# nrow(data.test)\n\nmodel <- glm(seikai~CARD_GACHA_COUNT + STATUS_CHECK_COUNT + SCORE, data=data.train, family=binomial)\nsummary(model)\n\nmodel.predict <- predict(model, data.test, type=\"response\")\n\n# summary(model.predict)\n\nresult <- data.frame(seikai = data.test$seikai, predicted_values = model.predict)\n\n# L\u56de\u5e30\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u5024 (predicted_values) \u304c 0.7\u4ee5\u4e0a\u3067\u3042\u308c\u3070\u3001Daily Active \u3060\u3063\u305f\u3068\u5b9a\u7fa9\nresult$predicted_values[result$predicted_values >= 0.7] <- 1\nresult$predicted_values[result$predicted_values < 0.7] <- 0\n# head(result)\n\n# \uff13\uff10\u65e5\u5f8c Daily Active\u3060\u3063\u305f\u304b\u5426\u304b\u306e\u5b9f\u73fe\u5024\uff09\u3068\u3001\n# \uff13\uff10\u65e5\u5f8c Daily Active\u8a72\u5426\u306e\u4e88\u6e2c\u5024 \u3092\u7a81\u304d\u5408\u305b\u3066\u3001\u8a72\u5f53\uff08\uff11\uff09\u3001\u975e\u8a72\u5f53\uff08\uff10\uff09\uff12\u884c\uff12\u5217\u306e\u8868\u306b\u3057\u3066\u4e88\u6e2c\u6b63\u89e3\u7387 \u3092\u96c6\u8a08 \uff08\u5bfe\u89d2\u6210\u5206\u306e\u4ef6\u6570\u304c\u3001\u6b63\u89e3\u4ef6\u6570\uff09\n\ntable(result$seikai, result$predicted_values)\n\n# \u5b9f\u73fe\u5024\u304cDaily Active \u3067\u3001\u4e88\u6e2c\u7387\u3082Daily Active\u3068\u8a00\u3044\u5f53\u3066\u3066\u3044\u305f\u4ef6\u6570\n# head(subset(result (seikai==1 & predicted_values ==1)))\n\n# \u5b9f\u73fe\u5024\u304c\u975eDaily Active\u3067\u3001\u4e88\u6e2c\u7387\u3082\u975eDaily Active\u3068\u8a00\u3044\u5f53\u3066\u3066\u3044\u305f\u4ef6\u6570\n# head(subset(result, (seikai==0 & predicted_values ==0)))\n\n# nrow(subset(result, (seikai==1 & predicted_values ==1)))\n# nrow(subset(result, (seikai==0 & predicted_values ==0)))\n\nCV_prediction_success_count <- nrow(subset(result, (seikai==1 & predicted_values ==1))) \nNonCV_prediction_success_count <- nrow(subset(result, (seikai==0 & predicted_values ==0))) \nnrow_test_dataset <- nrow(data.test)\n\nprediction_success_ratio <-  (CV_prediction_success_count + NonCV_prediction_success_count)/nrow_test_dataset\nmessage = paste(\"\u6b63\u89e3\u7387:\", (round(prediction_success_ratio, 4)*100), \"%\")\nprint(message)\n```\n"}