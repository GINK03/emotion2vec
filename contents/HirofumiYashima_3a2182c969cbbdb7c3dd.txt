{"context": "2014\u5e747\u6708\u306b\u3001R\u8a00\u8a9e \u3067 \u8a08\u91cf\u30de\u30af\u30ed\u30e2\u30c7\u30eb\u3092\u300c\u540c\u6642\u65b9\u7a0b\u5f0f\u4f53\u7cfb\u300d(SUR , Seemingly Unrelated regressions \uff09\u3092\u7528\u3044\u3066\u89e3\u6790\u3059\u308b\u305f\u3081\u306e \u30e9\u30a4\u30d6\u30e9\u30ea systemfit \u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u3064\u3044\u3066\u3001\u8a18\u4e8b\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n\n\u3010R\u8a00\u8a9e\u3011\u540c\u6642\u65b9\u7a0b\u5f0f\u30e2\u30c7\u30eb\uff08\u30de\u30af\u30ed\u30e2\u30c7\u30eb\uff09\u3067\u3001\u300c\u9d8f\u3068\u5375\u300d\u306e\u95a2\u4fc2\u306b\u3042\u308b\u8907\u6570\u5909\u6570\u3069\u3046\u3057\u306e\u95a2\u4fc2\u3092\u91cd\u56de\u5e30\u5206\u6790\n\n\nPython \u306b\u306f\u3001scikits.statsmodels\u306e\u4e0b\u306b\u3001sandbox.sysreg.SUR \u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9 \u304c\u3042\u308a\u3001\u300c\u540c\u6642\u65b9\u7a0b\u5f0f\u30e2\u30c7\u30eb\u300d\u3092\u63a8\u8a08\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u3001\u300c2\u6bb5\u968e\u6700\u5c0f\u4e8c\u4e57\u6cd5\u300d\u3084\u300c\u64cd\u4f5c\u5909\u6570\u6cd5\u300d\u3092\u884c\u3048\u308b\u3088\u3046\u3067\u3059\u3002 \n\u4e0a\u8a18 \u30e1\u30bd\u30c3\u30c9\u306b\u3064\u3044\u3066\u306f\u3001\u82f1\u6587\u30de\u30cb\u30e5\u30a2\u30eb\u4ee5\u5916\u306b\u3001\u7b2c3\u8005\u304c\u89e3\u6790\u5b9f\u4f8b\u306e\u306a\u304b\u3067\u4f7f\u7528\u3057\u305f\u30b3\u30fc\u30c9\u304c\u898b\u5f53\u305f\u308a\u307e\u305b\u3093\u3002\u305d\u3053\u3067 \u9014\u4e2d\u5831\u544a\u3068\u3057\u3066\u3001\u82f1\u6587\u30de\u30cb\u30e5\u30a2\u30eb\u4e2d\u306b\u63b2\u8f09\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u306e\u30bd\u30fc\u30b9\u30fb\u30b3\u30fc\u30c9\u3084\u3001\u30b5\u30f3\u30d7\u30eb\u30fb\u30b3\u30fc\u30c9\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\nGitHub statsmodels/statsmodels/sandbox/\n \uff08 \u4e0a\u8a18 examples \uff09 \nGitHub statsmodels/statsmodels/sandbox/examples/examplesysreg.py_\n\n\n\uff08 \u4e0a\u8a18 GitHub \u304b\u3089\u8ee2\u8f09 \uff09\n\n\nexample_sysreg.py\n\"\"\"Example: statsmodels.sandbox.sysreg\n\"\"\"\n#TODO: this is going to change significantly once we have a panel data structure\nfrom statsmodels.compat.python import lmap, asbytes\nimport numpy as np\nimport statsmodels.api as sm\nfrom statsmodels.sandbox.sysreg import *\n\n#for Python 3 compatibility\n\n# Seemingly Unrelated Regressions (SUR) Model\n\n# This example uses the subset of the Grunfeld data in Greene's Econometric\n# Analysis Chapter 14 (5th Edition)\n\ngrun_data = sm.datasets.grunfeld.load()\n\nfirms = ['General Motors', 'Chrysler', 'General Electric', 'Westinghouse',\n        'US Steel']\n#for Python 3 compatibility\nfirms = lmap(asbytes, firms)\n\ngrun_exog = grun_data.exog\ngrun_endog = grun_data.endog\n\n# Right now takes SUR takes a list of arrays\n# The array alternates between the LHS of an equation and RHS side of an\n# equation\n# This is very likely to change\ngrun_sys = []\nfor i in firms:\n    index = grun_exog['firm'] == i\n    grun_sys.append(grun_endog[index])\n    exog = grun_exog[index][['value','capital']].view(float).reshape(-1,2)\n    exog = sm.add_constant(exog, prepend=True)\n    grun_sys.append(exog)\n\n# Note that the results in Greene (5th edition) uses a slightly different\n# version of the Grunfeld data. To reproduce Table 14.1 the following changes\n# are necessary.\ngrun_sys[-2][5] = 261.6\ngrun_sys[-2][-3] = 645.2\ngrun_sys[-1][11,2] = 232.6\n\ngrun_mod = SUR(grun_sys)\ngrun_res = grun_mod.fit()\nprint(\"Results for the 2-step GLS\")\nprint(\"Compare to Greene Table 14.1, 5th edition\")\nprint(grun_res.params)\n# or you can do an iterative fit\n# you have to define a new model though this will be fixed\n# TODO: note the above\nprint(\"Results for iterative GLS (equivalent to MLE)\")\nprint(\"Compare to Greene Table 14.3\")\n#TODO: these are slightly off, could be a convergence issue\n# or might use a different default DOF correction?\ngrun_imod = SUR(grun_sys)\ngrun_ires = grun_imod.fit(igls=True)\nprint(grun_ires.params)\n\n# Two-Stage Least Squares for Simultaneous Equations\n#TODO: we are going to need *some kind* of formula framework\n\n# This follows the simple macroeconomic model given in\n# Greene Example 15.1 (5th Edition)\n# The data however is from statsmodels and is not the same as\n# Greene's\n\n# The model is\n# consumption: c_{t} = \\alpha_{0} + \\alpha_{1}y_{t} + \\alpha_{2}c_{t-1} + \\epsilon_{t1}\n# investment: i_{t} = \\beta_{0} + \\beta_{1}r_{t} + \\beta_{2}\\left(y_{t}-y_{t-1}\\right) + \\epsilon_{t2}\n# demand: y_{t} = c_{t} + I_{t} + g_{t}\n\n# See Greene's Econometric Analysis for more information\n\n# Load the data\nmacrodata = sm.datasets.macrodata.load().data\n\n# Not needed, but make sure the data is sorted\nmacrodata = np.sort(macrodata, order=['year','quarter'])\n\n# Impose the demand restriction\ny = macrodata['realcons'] + macrodata['realinv'] + macrodata['realgovt']\n\n# Build the system\nmacro_sys = []\n# First equation LHS\nmacro_sys.append(macrodata['realcons'][1:]) # leave off first date\n# First equation RHS\nexog1 = np.column_stack((y[1:],macrodata['realcons'][:-1]))\n#TODO: it might be nice to have \"lag\" and \"lead\" functions\nexog1 = sm.add_constant(exog1, prepend=True)\nmacro_sys.append(exog1)\n# Second equation LHS\nmacro_sys.append(macrodata['realinv'][1:])\n# Second equation RHS\nexog2 = np.column_stack((macrodata['tbilrate'][1:], np.diff(y)))\nexog2 = sm.add_constant(exog2, prepend=True)\nmacro_sys.append(exog2)\n\n# We need to say that y_{t} in the RHS of equation 1 is an endogenous regressor\n# We will call these independent endogenous variables\n# Right now, we use a dictionary to declare these\nindep_endog = {0 : [1]}\n\n# We also need to create a design of our instruments\n# This will be done automatically in the future\ninstruments = np.column_stack((macrodata[['realgovt',\n    'tbilrate']][1:].view(float).reshape(-1,2),macrodata['realcons'][:-1],\n    y[:-1]))\ninstruments = sm.add_constant(instruments, prepend=True)\nmacro_mod = Sem2SLS(macro_sys, indep_endog=indep_endog, instruments=instruments)\n# Right now this only returns parameters\nmacro_params = macro_mod.fit()\nprint(\"The parameters for the first equation are correct.\")\nprint(\"The parameters for the second equation are not.\")\nprint(macro_params)\n\n#TODO: Note that the above is incorrect, because we have no way of telling the\n# model that *part* of the y_{t} - y_{t-1} is an independent endogenous variable\n# To correct for this we would have to do the following\ny_instrumented = macro_mod.wexog[0][:,1]\nwhitened_ydiff = y_instrumented - y[:-1]\nwexog = np.column_stack((macrodata['tbilrate'][1:],whitened_ydiff))\nwexog = sm.add_constant(wexog, prepend=True)\ncorrect_params = sm.GLS(macrodata['realinv'][1:], wexog).fit().params\n\nprint(\"If we correctly instrument everything, then these are the parameters\")\nprint(\"for the second equation\")\nprint(correct_params)\nprint(\"Compare to output of R script statsmodels/sandbox/tests/macrodata.s\")\n\nprint('\\nUsing IV2SLS')\nfrom statsmodels.sandbox.regression.gmm import IV2SLS\nmiv = IV2SLS(macro_sys[0], macro_sys[1], instruments)\nresiv = miv.fit()\nprint(\"equation 1\")\nprint(resiv.params)\nmiv2 = IV2SLS(macro_sys[2], macro_sys[3], instruments)\nresiv2 = miv2.fit()\nprint(\"equation 2\")\nprint(resiv2.params)\n\n### Below is the same example using Greene's data ###\n\nrun_greene = 0\nif run_greene:\n    try:\n        data3 = np.genfromtxt('/home/skipper/school/MetricsII/Greene \\\nTableF5-1.txt', names=True)\n    except:\n        raise ValueError(\"Based on Greene TableF5-1.  You should download it \"\n                         \"from his web site and edit this script accordingly.\")\n\n    # Example 15.1 in Greene 5th Edition\n# c_t = constant + y_t + c_t-1\n# i_t = constant + r_t + (y_t - y_t-1)\n# y_t = c_t + i_t + g_t\n    sys3 = []\n    sys3.append(data3['realcons'][1:])  # have to leave off a beg. date\n# impose 3rd equation on y\n    y = data3['realcons'] + data3['realinvs'] + data3['realgovt']\n\n    exog1 = np.column_stack((y[1:],data3['realcons'][:-1]))\n    exog1 = sm.add_constant(exog1, prepend=False)\n    sys3.append(exog1)\n    sys3.append(data3['realinvs'][1:])\n    exog2 = np.column_stack((data3['tbilrate'][1:],\n        np.diff(y)))\n    # realint is missing 1st observation\n    exog2 = sm.add_constant(exog2, prepend=False)\n    sys3.append(exog2)\n    indep_endog = {0 : [0]} # need to be able to say that y_1 is an instrument..\n    instruments = np.column_stack((data3[['realgovt',\n        'tbilrate']][1:].view(float).reshape(-1,2),data3['realcons'][:-1],\n        y[:-1]))\n    instruments = sm.add_constant(instruments, prepend=False)\n    sem_mod = Sem2SLS(sys3, indep_endog = indep_endog, instruments=instruments)\n    sem_params = sem_mod.fit() # first equation is right, but not second?\n                               # should y_t in the diff be instrumented?\n                               # how would R know this in the script?\n    # well, let's check...\n    y_instr = sem_mod.wexog[0][:,0]\n    wyd = y_instr - y[:-1]\n    wexog = np.column_stack((data3['tbilrate'][1:],wyd))\n    wexog = sm.add_constant(wexog, prepend=False)\n    params = sm.GLS(data3['realinvs'][1:], wexog).fit().params\n\n    print(\"These are the simultaneous equation estimates for Greene's \\\nexample 13-1 (Also application 13-1 in 6th edition.\")\n    print(sem_params)\n    print(\"The first set of parameters is correct.  The second set is not.\")\n    print(\"Compare to the solution manual at \\\nhttp://pages.stern.nyu.edu/~wgreene/Text/econometricanalysis.htm\")\n    print(\"The reason is the restriction on (y_t - y_1)\")\n    print(\"Compare to R script GreeneEx15_1.s\")\n    print(\"Somehow R carries y.1 in yd to know that it needs to be \\\ninstrumented\")\n    print(\"If we replace our estimate with the instrumented one\")\n    print(params)\n    print(\"We get the right estimate\")\n    print(\"Without a formula framework we have to be able to do restrictions.\")\n# yep!, but how in the world does R know this when we just fed it yd??\n# must be implicit in the formula framework...\n# we are going to need to keep the two equations separate and use\n# a restrictions matrix.  Ugh, is a formula framework really, necessary to get\n# around this?\n\n\n\nPython Package Index > scikits.statsmodels > 0.3.1\n\n\n\n\nSM StatsModels Statistics in Python, scikits.statsmodels.sandbox.sysreg.SUR\n\n\nclass scikits.statsmodels.sandbox.sysreg.SUR(sys, sigma=None, dfk=None)\nSeemingly Unrelated Regression\nParameters :   \nsys : list\n[endog1, exog1, endog2, exog2,...] It will be of length 2 x M, where M is the number of equations endog = exog.\nsigma : array-like\nM x M array where sigma[i,j] is the covariance between equation i and j\ndfk : None, \u2018dfk1\u2019, or \u2018dfk2\u2019\nDefault is None. Correction for the degrees of freedom should be specified for small samples. See the notes for more information.\n\n\nPyDoc.net , scikits.statsmodels v0.3.1, scikits.statsmodels.sandbox.sysreg\n\n\nfrom scikits.statsmodels.regression.linear_model import GLS\nimport numpy as np\nimport scikits.statsmodels.tools.tools as tools\nfrom scikits.statsmodels.base.model import LikelihoodModelResults\nfrom scipy import sparse\nall = ['SUR', 'Sem2SLS']\nprobably should have a SystemModel superclass\nTODO: does it make sense of SUR equations to have\nindependent endogenous regressors?  If so, then\nchange docs to LHS = RHS\nTODO: make a dictionary that holds equation specific information\nrather than these cryptic lists?  Slower to get a dict value?\nTODO: refine sigma definition\nclass SUR(object):\n   \"\"\"\n   Seemingly Unrelated Regression\nParameters\n----------\nsys : list\n    [endog1, exog1, endog2, exog2,...] It will be of length 2 x M,\n    where M is the number of equations endog = exog.\nsigma : array-like\n    M x M array where sigma[i,j] is the covariance between equation i and j\ndfk : None, 'dfk1', or 'dfk2'\n    Default is None.  Correction for the degrees of freedom\n    should be specified for small samples.  See the notes for more\n    information.\n\nAttributes\n    ----------\n    cholsigmainv : array\n        The transpose of the Cholesky decomposition of pinv_wexog\n    df_model : array\n        Model degrees of freedom of each equation. p_{m} - 1 where p is\n        the number of regressors for each equation m and one is subtracted\n        for the constant.\n    df_resid : array\n\n\nSM StatsModels Statistics in Python , Source code for statsmodels.sandbox.sysreg \nSM StatsModels Statistics in Python, scikits.statsmodels.sandbox.sysreg.Sem2SLS\npythonxy, Source path:  hg/  src/ python/ statsmodels/ PLATLIB/ statsmodels/ sandbox/ sysreg.py\n\n\n\n\u540c\u6642\u65b9\u7a0b\u5f0f\u30e2\u30c7\u30eb \u3068\u306f\n\n\u305f\u3068\u3048\u3070\u3001\u7d4c\u6e08\u5b66\u306e\u6559\u79d1\u66f8\u306b\u51fa\u3066\u304f\u308b\u300c\u9700\u8981\u300d\u3068\u300c\u4f9b\u7d66\u300d\u306e\u95a2\u4fc2\u3002\n\n\u3082\u306e\u306e\u5024\u6bb5\uff08\u4fa1\u683c\uff09\u3068\u6d88\u8cbb\u91cf\uff08\u58f2\u4e0a\uff09\u306f\u3001\u300c\u9700\u8981\u300d\u3068\u300c\u4f9b\u7d66\u300d\u304c\u4ea4\u308f\u308a\u3001\u4e00\u81f4\u3059\u308b\u3068\u3053\u308d\uff08\u4fa1\u683c\u3068\u91cf\uff09\u3067\u6c7a\u307e\u308a\u307e\u3059\u3002\n\n\u3053\u3053\u3067\u3001\u300c\u9700\u8981\u300d\u3092\u76ee\u7684\u5909\u6570\uff08\u88ab\u8aac\u660e\u5909\u6570\uff09\u306b\u3068\u308a\u3001\u300c\u9700\u8981\u300d\u3092\u6c7a\u5b9a\u3059\u308b\u8aac\u660e\u5909\u6570\u3092\u8907\u6570\u306a\u3089\u3079\u305f\u91cd\u56de\u5e30\u5f0f\u3068\u3001\u304a\u306a\u3058\u3088\u3046\u306b\u3001\u300c\u4f9b\u7d66\u300d\u3092\u76ee\u7684\u5909\u6570\u306b\u3068\u308a\u3001\u8907\u6570\u306e\u300c\u4f9b\u7d66\u300d\u6c7a\u5b9a\u8981\u56e0\u3092\u8aac\u660e\u5909\u6570\u306b\u3068\u3063\u305f\u91cd\u56de\u5e30\u5f0f\u3092\uff12\u672c\u7528\u610f\u3057\u307e\u3059\u304c\u3001\u7247\u65b9\u306e\u91cd\u56de\u5e30\u5f0f\u306e\u8aac\u660e\u5909\u6570\u306b\u3001\u3082\u3046\u7247\u65b9\u306e\u91cd\u56de\u5e30\u5f0f\u306e\u76ee\u7684\u5909\u6570\u3092\u4e92\u3044\u306b\u542b\u3093\u3067\u3044\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u3053\u306e\u5834\u5408\u3001\u3069\u3061\u3089\u306e\u91cd\u56de\u5e30\u5f0f\u3082\u3001\u65b9\u7a0b\u5f0f\u306e \u8aa4\u5dee\u9805 \u3068 \u3042\u308b\u8aac\u660e\u5909\u6570 = \u3082\u3046\u7247\u65b9\u306e\u91cd\u56de\u5e30\u5f0f\u306e\u76ee\u7684\u5909\u6570 \u3068\u306e\u9593\u306b\u76f8\u95a2\u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u591a\u91cd\u56de\u5e30\u5206\u6790\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n \uff08\u53c2\u8003\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u3078\u306e\u30ea\u30f3\u30af\uff09\u300c\u540c\u6642\u65b9\u7a0b\u5f0f\u3068\u5e83\u544a\u3068Instrumental Variable Method\u300d \n\n\n\n\u64cd\u4f5c\u5909\u6570\u6cd5 \u306b\u3088\u308b\u89e3\u6c7a\n\n\u3053\u306e\u5834\u5408\u3001\u8aa4\u5dee\u9805 \u3068 \u76f8\u95a2\u3057\u306a\u3044\u4f55\u3089\u304b\u306e\u5909\u6570 \u3092\u4eee\u5b9a\u7684\u306b\u53d6\u308a\u5165\u308c\u3066\u3001\u91cd\u56de\u5e30\u5206\u6790\u3092\u884c\u3044\u307e\u3059\u3002\n\n\u3053\u308c\u3067\u3001\u300c\u9700\u8981\u300d\u3068\u300c\u4f9b\u7d66\u300d\u306e\u95a2\u4fc2\u306e\u3088\u3046\u306a\u3001\u5165\u308c\u5b50\u306b\u306a\u3063\u305f\u9023\u7acb\u65b9\u7a0b\u5f0f\u30e2\u30c7\u30eb\u3092\u89e3\u3044\u3066\u3001\u300c\u4fa1\u683c\u300d\u3068\u300c\u8ca9\u58f2\u91cf\u300d\uff08\u751f\u7523\u91cf\uff09\u3092\u63a8\u8a08\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\n\n\u7406\u8ad6\u7684\u306a\u8a71\u306f\u3001\u4e0b\u8a18\u306e\u53c2\u8003\u8cc7\u6599\u304c\u76f4\u611f\u7684\u306b\u308f\u304b\u308a\u3084\u3059\u304f\u307e\u3068\u307e\u3063\u3066\u3044\u307e\u3059\n\n \uff08\u53c2\u8003\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\uff09\u300c\u540c\u6642\u65b9\u7a0b\u5f0f\u3068\u5e83\u544a\u3068Instrumental Variable Method\u300d \n\n\n \uff08\u6176\u61c9\u7fa9\u587e\u5927\u5b66\u6cd5\u5b66\u90e8\u8b1b\u7fa9\u8cc7\u6599 \u300c\u64cd\u4f5c\u5909\u6570\u6cd5\u300d\u3078\u306e\u30ea\u30f3\u30af\uff09\n\n\n\nWikipedia, Seemingly unrelated regressions\n\n\n_\u540c\u6642\u65b9\u7a0b\u5f0f \u306e \u6570\u5b66\uff08\u884c\u5217\u6f14\u7b97\uff09\u89e3\u6cd5 _\n\n\nM.Shimura \u300c\u540c\u6642\u65b9\u7a0b\u5f0f\u30e2\u30c7\u30eb\u306e\u884c\u5217\u306b\u3088\u308b\u89e3\u6cd5\u300d\n\n\nR \u8a00\u8a9e systemfit\u95a2\u6570\u306b\u3088\u308b\u30b3\u30fc\u30c9\u4f8b\n\n\n\n\u79cb\u5c71\u88d5\u300eR\u306b\u3088\u308b\u8a08\u91cf\u7d4c\u6e08\u5b66\u300f\u300c\u7b2c10\u7ae0 \u540c\u6642\u65b9\u7a0b\u5f0f\u4f53\u7cfb\u300d\nGoogle e\u30d6\u30c3\u30af\u30b9 \u79cb\u5c71\u88d5\u300eR\u306b\u3088\u308b\u8a08\u91cf\u7d4c\u6e08\u5b66\u300f\nPukiWiki \u4e00\u822c\u5316\u6700\u5c0f\u4e8c\u4e57\u6cd5\u3068\u8b58\u5225\u554f\u984c\u300c2\u6bb5\u968e\u6700\u5c0f\u4e8c\u4e57\u6cd5\u306e\u5b9f\u8df5\u300d\nArne Henningsen (University of Copenhagen), Jeff D. Hamann(Forest Informatics, Inc.), systemfit: A Package for Estimating Systems of Simultaneous Equations in R\n\n\n\n\n\u3010 2016/4/13 \u8ffd\u8a18 \u3011\n\n\u4ee5\u4e0b\u306e\u30a6\u30a7\u30d6\u30da\u30fc\u30b8\u3092\u898b\u3064\u3051\u307e\u3057\u305f\u3002\n\n\u672a\u660e\u306e\u5148\u3078 \uff082015/11/11\uff09\u300cPython\u306b\u3088\u308b\u8a08\u91cf\u7d4c\u6e08\u5b66\u300d\n\n\n\u79cb\u5c71\u88d5\u300eR\u306b\u3088\u308b\u8a08\u91cf\u7d4c\u6e08\u5b66\u300f(2009, \u30aa\u30fc\u30e0\u793e)  \n\u3053\u306e\u672c\u306f\u8a08\u91cf\u7d4c\u6e08\u5b66\u306e\u57fa\u672c\u7684\u306a\u8003\u3048\u65b9\u3068\u3068\u3082\u306b\u3001R\u3084Excel\u3092\u4f7f\u3063\u3066\u5b9f\u969b\u306b\u3069\u3046\u5206\u6790\u3067\u304d\u308b\u306e\u304b\u3068\u3044\u3046\u8a08\u91cf\u7d4c\u6e08\u306e\u4f7f\u3044\u65b9\u307e\u3067\u8a73\u3057\u304f\u89e6\u308c\u3089\u308c\u3066\u3044\u3066\u3001\u8a08\u91cf\u7d4c\u6e08\u5b66\u306b\u3064\u3044\u3066\u4f55\u3082\u77e5\u3089\u306a\u3044\u4eba\u306b\u3082\u8aad\u307f\u3084\u3059\u3044\u30aa\u30b9\u30b9\u30e1\u306a\u5165\u9580\u66f8\u3067\u3059\u3002\n\u4eca\u56de\u306f\u672c\u66f8\u306eR\u30b3\u30fc\u30c9\u3092\u3082\u3068\u306bPython\u30b3\u30fc\u30c9\u3092\u4f5c\u3063\u305f\u3002\n\n\u4e0a\u8a18\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u304b\u3089\u8cbc\u3089\u308c\u3066\u3044\u308b\u4ee5\u4e0b\u306e\u30ea\u30f3\u30af\uff08\u4e0a\u8a18\u30b5\u30a4\u30c8\u904b\u55b6\u8005\u306eGitHub)\u304b\u3089\u3001\u3055\u3089\u306b\u30ea\u30f3\u30af\u8cbc\u3089\u308c\u3066\u3044\u308b\n\nGitHub ogaway/Econometrics\n\n\u4ee5\u4e0b\u306e\u30a6\u30a7\u30d6\u30da\u30fc\u30b8\u306b\u3001\u540c\u6642\u65b9\u7a0b\u5f0f\u4f53\u7cfb \u3092 Python\u30b3\u30fc\u30c9\u306b\u843d\u3068\u3057\u8fbc\u3093\u3060\u30b9\u30af\u30ea\u30d7\u30c8\u304c\u63b2\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nJupyter\n\n\n\u540c\u6642\u65b9\u7a0b\u5f0f\u4f53\u7cfb\n\u300eR\u306b\u3088\u308b\u8a08\u91cf\u7d4c\u6e08\u5b66\u300f\u7b2c10\u7ae0\u300c\u540c\u6642\u65b9\u7a0b\u5f0f\u4f53\u7cfb\u300d\u3092Python\u3067\u5b9f\u884c\u3059\u308b\u3002\n\u30c6\u30ad\u30b9\u30c8\u4ed8\u5c5e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8(\u300ck1001.csv\u300d\u7b49)\u306b\u3064\u3044\u3066\u306f\u51fa\u7248\u793e\u30b5\u30a4\u30c8\u3088\u308a\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u307e\u305f\u3001\u4ee5\u4e0b\u306e\u8aac\u660e\u306f\u672c\u66f8\u306e\u4e00\u90e8\u3092\u8981\u7d04\u3057\u305f\u3082\u306e\u3067\u3059\u306e\u3067\u3001\u3088\u308a\u8a73\u3057\u3044\u8aac\u660e\u306f\u672c\u66f8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u4f8b\u984c10.1\n\u6b21\u306e\u3088\u3046\u306a\u4f9b\u7d66\u95a2\u6570\u3068\u9700\u8981\u95a2\u6570\u3092\u63a8\u5b9a\u3059\u308b\u3002\nQt=\u03b10+\u03b11Pt+\u03b12Et+utQt=\u03b10+\u03b11Pt+\u03b12Et+ut\nQt=\u03b20+\u03b21Pt+\u03b22At+vtQt=\u03b20+\u03b21Pt+\u03b22At+vt\n\u305f\u3060\u3057\u3001QtQt \u306f\u6570\u91cf\u3001PtPt \u306f\u4fa1\u683c\u3001EtEt \u306f\u4f9b\u7d66\u95a2\u6570\u30b7\u30d5\u30c8\u8981\u56e0\u3001AtAt \u306f\u9700\u8981\u95a2\u6570\u30b7\u30d5\u30c8\u8981\u56e0\u3068\u3059\u308b\u3002\n\n__2014\u5e747\u6708\u306b\u3001R\u8a00\u8a9e \u3067 \u8a08\u91cf\u30de\u30af\u30ed\u30e2\u30c7\u30eb\u3092\u300c\u540c\u6642\u65b9\u7a0b\u5f0f\u4f53\u7cfb\u300d(_SUR_ , _Seemingly Unrelated regressions_ \uff09\u3092\u7528\u3044\u3066\u89e3\u6790\u3059\u308b\u305f\u3081\u306e \u30e9\u30a4\u30d6\u30e9\u30ea _systemfit_ \u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u3064\u3044\u3066\u3001\u8a18\u4e8b\u3092\u66f8\u304d\u307e\u3057\u305f\u3002__\n\n* __[\u3010R\u8a00\u8a9e\u3011\u540c\u6642\u65b9\u7a0b\u5f0f\u30e2\u30c7\u30eb\uff08\u30de\u30af\u30ed\u30e2\u30c7\u30eb\uff09\u3067\u3001\u300c\u9d8f\u3068\u5375\u300d\u306e\u95a2\u4fc2\u306b\u3042\u308b\u8907\u6570\u5909\u6570\u3069\u3046\u3057\u306e\u95a2\u4fc2\u3092\u91cd\u56de\u5e30\u5206\u6790](http://qiita.com/HirofumiYashima/items/efebd377e358e8195b66)__\n\n___\n\n__Python \u306b\u306f\u3001scikits.statsmodels\u306e\u4e0b\u306b\u3001sandbox.sysreg.SUR \u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9 \u304c\u3042\u308a\u3001\u300c\u540c\u6642\u65b9\u7a0b\u5f0f\u30e2\u30c7\u30eb\u300d\u3092\u63a8\u8a08\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u3001\u300c2\u6bb5\u968e\u6700\u5c0f\u4e8c\u4e57\u6cd5\u300d\u3084\u300c\u64cd\u4f5c\u5909\u6570\u6cd5\u300d\u3092\u884c\u3048\u308b\u3088\u3046\u3067\u3059\u3002__  \n\n__\u4e0a\u8a18 \u30e1\u30bd\u30c3\u30c9\u306b\u3064\u3044\u3066\u306f\u3001\u82f1\u6587\u30de\u30cb\u30e5\u30a2\u30eb\u4ee5\u5916\u306b\u3001\u7b2c3\u8005\u304c\u89e3\u6790\u5b9f\u4f8b\u306e\u306a\u304b\u3067\u4f7f\u7528\u3057\u305f\u30b3\u30fc\u30c9\u304c\u898b\u5f53\u305f\u308a\u307e\u305b\u3093\u3002\u305d\u3053\u3067 \u9014\u4e2d\u5831\u544a\u3068\u3057\u3066\u3001\u82f1\u6587\u30de\u30cb\u30e5\u30a2\u30eb\u4e2d\u306b\u63b2\u8f09\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u306e\u30bd\u30fc\u30b9\u30fb\u30b3\u30fc\u30c9\u3084\u3001\u30b5\u30f3\u30d7\u30eb\u30fb\u30b3\u30fc\u30c9\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002__\n\n* __[GitHub _statsmodels/statsmodels/sandbox/_](https://github.com/statsmodels/statsmodels/tree/master/statsmodels/sandbox)__\n\n* __[ \uff08 \u4e0a\u8a18 examples \uff09 ](https://github.com/statsmodels/statsmodels/tree/master/statsmodels/sandbox/examples)__\n\n* __[GitHub _statsmodels/statsmodels/sandbox/examples/example_sysreg.py_](https://github.com/statsmodels/statsmodels/blob/master/statsmodels/sandbox/examples/example_sysreg.py)__\n\n##### __\uff08 \u4e0a\u8a18 GitHub \u304b\u3089\u8ee2\u8f09 \uff09__\n\n```{Python:example_sysreg.py}\n\"\"\"Example: statsmodels.sandbox.sysreg\n\"\"\"\n#TODO: this is going to change significantly once we have a panel data structure\nfrom statsmodels.compat.python import lmap, asbytes\nimport numpy as np\nimport statsmodels.api as sm\nfrom statsmodels.sandbox.sysreg import *\n\n#for Python 3 compatibility\n\n# Seemingly Unrelated Regressions (SUR) Model\n\n# This example uses the subset of the Grunfeld data in Greene's Econometric\n# Analysis Chapter 14 (5th Edition)\n\ngrun_data = sm.datasets.grunfeld.load()\n\nfirms = ['General Motors', 'Chrysler', 'General Electric', 'Westinghouse',\n        'US Steel']\n#for Python 3 compatibility\nfirms = lmap(asbytes, firms)\n\ngrun_exog = grun_data.exog\ngrun_endog = grun_data.endog\n\n# Right now takes SUR takes a list of arrays\n# The array alternates between the LHS of an equation and RHS side of an\n# equation\n# This is very likely to change\ngrun_sys = []\nfor i in firms:\n    index = grun_exog['firm'] == i\n    grun_sys.append(grun_endog[index])\n    exog = grun_exog[index][['value','capital']].view(float).reshape(-1,2)\n    exog = sm.add_constant(exog, prepend=True)\n    grun_sys.append(exog)\n\n# Note that the results in Greene (5th edition) uses a slightly different\n# version of the Grunfeld data. To reproduce Table 14.1 the following changes\n# are necessary.\ngrun_sys[-2][5] = 261.6\ngrun_sys[-2][-3] = 645.2\ngrun_sys[-1][11,2] = 232.6\n\ngrun_mod = SUR(grun_sys)\ngrun_res = grun_mod.fit()\nprint(\"Results for the 2-step GLS\")\nprint(\"Compare to Greene Table 14.1, 5th edition\")\nprint(grun_res.params)\n# or you can do an iterative fit\n# you have to define a new model though this will be fixed\n# TODO: note the above\nprint(\"Results for iterative GLS (equivalent to MLE)\")\nprint(\"Compare to Greene Table 14.3\")\n#TODO: these are slightly off, could be a convergence issue\n# or might use a different default DOF correction?\ngrun_imod = SUR(grun_sys)\ngrun_ires = grun_imod.fit(igls=True)\nprint(grun_ires.params)\n\n# Two-Stage Least Squares for Simultaneous Equations\n#TODO: we are going to need *some kind* of formula framework\n\n# This follows the simple macroeconomic model given in\n# Greene Example 15.1 (5th Edition)\n# The data however is from statsmodels and is not the same as\n# Greene's\n\n# The model is\n# consumption: c_{t} = \\alpha_{0} + \\alpha_{1}y_{t} + \\alpha_{2}c_{t-1} + \\epsilon_{t1}\n# investment: i_{t} = \\beta_{0} + \\beta_{1}r_{t} + \\beta_{2}\\left(y_{t}-y_{t-1}\\right) + \\epsilon_{t2}\n# demand: y_{t} = c_{t} + I_{t} + g_{t}\n\n# See Greene's Econometric Analysis for more information\n\n# Load the data\nmacrodata = sm.datasets.macrodata.load().data\n\n# Not needed, but make sure the data is sorted\nmacrodata = np.sort(macrodata, order=['year','quarter'])\n\n# Impose the demand restriction\ny = macrodata['realcons'] + macrodata['realinv'] + macrodata['realgovt']\n\n# Build the system\nmacro_sys = []\n# First equation LHS\nmacro_sys.append(macrodata['realcons'][1:]) # leave off first date\n# First equation RHS\nexog1 = np.column_stack((y[1:],macrodata['realcons'][:-1]))\n#TODO: it might be nice to have \"lag\" and \"lead\" functions\nexog1 = sm.add_constant(exog1, prepend=True)\nmacro_sys.append(exog1)\n# Second equation LHS\nmacro_sys.append(macrodata['realinv'][1:])\n# Second equation RHS\nexog2 = np.column_stack((macrodata['tbilrate'][1:], np.diff(y)))\nexog2 = sm.add_constant(exog2, prepend=True)\nmacro_sys.append(exog2)\n\n# We need to say that y_{t} in the RHS of equation 1 is an endogenous regressor\n# We will call these independent endogenous variables\n# Right now, we use a dictionary to declare these\nindep_endog = {0 : [1]}\n\n# We also need to create a design of our instruments\n# This will be done automatically in the future\ninstruments = np.column_stack((macrodata[['realgovt',\n    'tbilrate']][1:].view(float).reshape(-1,2),macrodata['realcons'][:-1],\n    y[:-1]))\ninstruments = sm.add_constant(instruments, prepend=True)\nmacro_mod = Sem2SLS(macro_sys, indep_endog=indep_endog, instruments=instruments)\n# Right now this only returns parameters\nmacro_params = macro_mod.fit()\nprint(\"The parameters for the first equation are correct.\")\nprint(\"The parameters for the second equation are not.\")\nprint(macro_params)\n\n#TODO: Note that the above is incorrect, because we have no way of telling the\n# model that *part* of the y_{t} - y_{t-1} is an independent endogenous variable\n# To correct for this we would have to do the following\ny_instrumented = macro_mod.wexog[0][:,1]\nwhitened_ydiff = y_instrumented - y[:-1]\nwexog = np.column_stack((macrodata['tbilrate'][1:],whitened_ydiff))\nwexog = sm.add_constant(wexog, prepend=True)\ncorrect_params = sm.GLS(macrodata['realinv'][1:], wexog).fit().params\n\nprint(\"If we correctly instrument everything, then these are the parameters\")\nprint(\"for the second equation\")\nprint(correct_params)\nprint(\"Compare to output of R script statsmodels/sandbox/tests/macrodata.s\")\n\nprint('\\nUsing IV2SLS')\nfrom statsmodels.sandbox.regression.gmm import IV2SLS\nmiv = IV2SLS(macro_sys[0], macro_sys[1], instruments)\nresiv = miv.fit()\nprint(\"equation 1\")\nprint(resiv.params)\nmiv2 = IV2SLS(macro_sys[2], macro_sys[3], instruments)\nresiv2 = miv2.fit()\nprint(\"equation 2\")\nprint(resiv2.params)\n\n### Below is the same example using Greene's data ###\n\nrun_greene = 0\nif run_greene:\n    try:\n        data3 = np.genfromtxt('/home/skipper/school/MetricsII/Greene \\\nTableF5-1.txt', names=True)\n    except:\n        raise ValueError(\"Based on Greene TableF5-1.  You should download it \"\n                         \"from his web site and edit this script accordingly.\")\n\n    # Example 15.1 in Greene 5th Edition\n# c_t = constant + y_t + c_t-1\n# i_t = constant + r_t + (y_t - y_t-1)\n# y_t = c_t + i_t + g_t\n    sys3 = []\n    sys3.append(data3['realcons'][1:])  # have to leave off a beg. date\n# impose 3rd equation on y\n    y = data3['realcons'] + data3['realinvs'] + data3['realgovt']\n\n    exog1 = np.column_stack((y[1:],data3['realcons'][:-1]))\n    exog1 = sm.add_constant(exog1, prepend=False)\n    sys3.append(exog1)\n    sys3.append(data3['realinvs'][1:])\n    exog2 = np.column_stack((data3['tbilrate'][1:],\n        np.diff(y)))\n    # realint is missing 1st observation\n    exog2 = sm.add_constant(exog2, prepend=False)\n    sys3.append(exog2)\n    indep_endog = {0 : [0]} # need to be able to say that y_1 is an instrument..\n    instruments = np.column_stack((data3[['realgovt',\n        'tbilrate']][1:].view(float).reshape(-1,2),data3['realcons'][:-1],\n        y[:-1]))\n    instruments = sm.add_constant(instruments, prepend=False)\n    sem_mod = Sem2SLS(sys3, indep_endog = indep_endog, instruments=instruments)\n    sem_params = sem_mod.fit() # first equation is right, but not second?\n                               # should y_t in the diff be instrumented?\n                               # how would R know this in the script?\n    # well, let's check...\n    y_instr = sem_mod.wexog[0][:,0]\n    wyd = y_instr - y[:-1]\n    wexog = np.column_stack((data3['tbilrate'][1:],wyd))\n    wexog = sm.add_constant(wexog, prepend=False)\n    params = sm.GLS(data3['realinvs'][1:], wexog).fit().params\n\n    print(\"These are the simultaneous equation estimates for Greene's \\\nexample 13-1 (Also application 13-1 in 6th edition.\")\n    print(sem_params)\n    print(\"The first set of parameters is correct.  The second set is not.\")\n    print(\"Compare to the solution manual at \\\nhttp://pages.stern.nyu.edu/~wgreene/Text/econometricanalysis.htm\")\n    print(\"The reason is the restriction on (y_t - y_1)\")\n    print(\"Compare to R script GreeneEx15_1.s\")\n    print(\"Somehow R carries y.1 in yd to know that it needs to be \\\ninstrumented\")\n    print(\"If we replace our estimate with the instrumented one\")\n    print(params)\n    print(\"We get the right estimate\")\n    print(\"Without a formula framework we have to be able to do restrictions.\")\n# yep!, but how in the world does R know this when we just fed it yd??\n# must be implicit in the formula framework...\n# we are going to need to keep the two equations separate and use\n# a restrictions matrix.  Ugh, is a formula framework really, necessary to get\n# around this?\n```\n\n* __[Python Package Index > scikits.statsmodels > 0.3.1](https://pypi.python.org/pypi/scikits.statsmodels)__\n\n![pic_1.png](https://qiita-image-store.s3.amazonaws.com/0/43487/2f988b04-42f4-8a57-6408-d88177083387.png)\n\n![pic_2.png](https://qiita-image-store.s3.amazonaws.com/0/43487/c27db3c6-dd74-8c0c-c972-d6ed07e3981b.png)\n\n* __[SM StatsModels Statistics in Python, scikits.statsmodels.sandbox.sysreg.SUR](http://statsmodels.sourceforge.net/ipdirective/generated/scikits.statsmodels.sandbox.sysreg.SUR.html)__\n\n> __class scikits.statsmodels.sandbox.sysreg.SUR(sys, sigma=None, dfk=None)__\n>\n> Seemingly Unrelated Regression\n>\n>Parameters :\t\n>\n>sys : list\n[endog1, exog1, endog2, exog2,...] It will be of length 2 x M, where M is the number of equations endog = exog.\nsigma : array-like\n>\n>M x M array where sigma[i,j] is the covariance between equation i and j\ndfk : None, \u2018dfk1\u2019, or \u2018dfk2\u2019\nDefault is None. Correction for the degrees of freedom should be specified for small samples. See the notes for more information.\n\n* __[PyDoc.net , scikits.statsmodels v0.3.1, scikits.statsmodels.sandbox.sysreg](http://pydoc.net/Python/scikits.statsmodels/0.3.1/scikits.statsmodels.sandbox.sysreg/)__\n\n>from scikits.statsmodels.regression.linear_model import GLS\n>import numpy as np\n>import scikits.statsmodels.tools.tools as tools\n>from scikits.statsmodels.base.model import LikelihoodModelResults\n>from scipy import sparse\n>\n>__all__ = ['SUR', 'Sem2SLS']\n>\n>probably should have a SystemModel superclass\n>TODO: does it make sense of SUR equations to have\n>independent endogenous regressors?  If so, then\n>change docs to LHS = RHS\n>TODO: make a dictionary that holds equation specific information\n>rather than these cryptic lists?  Slower to get a dict value?\n>\n>TODO: refine sigma definition\n>\n>class SUR(object):\n>    \"\"\"\n>    Seemingly Unrelated Regression\n>\n    Parameters\n    ----------\n    sys : list\n        [endog1, exog1, endog2, exog2,...] It will be of length 2 x M,\n        where M is the number of equations endog = exog.\n    sigma : array-like\n        M x M array where sigma[i,j] is the covariance between equation i and j\n    dfk : None, 'dfk1', or 'dfk2'\n        Default is None.  Correction for the degrees of freedom\n        should be specified for small samples.  See the notes for more\n        information.\n\n>\n>    Attributes\n    ----------\n    cholsigmainv : array\n        The transpose of the Cholesky decomposition of `pinv_wexog`\n    df_model : array\n        Model degrees of freedom of each equation. p_{m} - 1 where p is\n        the number of regressors for each equation m and one is subtracted\n        for the constant.\n    df_resid : array\n\n* __[SM StatsModels Statistics in Python , _Source code for statsmodels.sandbox.sysreg_ ](http://statsmodels.sourceforge.net/notebooks/_modules/statsmodels/sandbox/sysreg.html)__\n\n* __[SM StatsModels Statistics in Python, _scikits.statsmodels.sandbox.sysreg.Sem2SLS_](http://statsmodels.sourceforge.net/ipdirective/generated/scikits.statsmodels.sandbox.sysreg.Sem2SLS.html)__\n\n* __[pythonxy, _Source path:  hg/  src/ python/ statsmodels/ PLATLIB/ statsmodels/ sandbox/ sysreg.py_](https://code.google.com/p/pythonxy/source/browse/src/python/statsmodels/PLATLIB/statsmodels/sandbox/sysreg.py?repo=xy-27&r=a601f90388251dd3e8a858be0460dc7a5d7c5736)__\n\n___\n\n#### **\u540c\u6642\u65b9\u7a0b\u5f0f\u30e2\u30c7\u30eb** \u3068\u306f\n##### \u305f\u3068\u3048\u3070\u3001\u7d4c\u6e08\u5b66\u306e\u6559\u79d1\u66f8\u306b\u51fa\u3066\u304f\u308b\u300c\u9700\u8981\u300d\u3068\u300c\u4f9b\u7d66\u300d\u306e\u95a2\u4fc2\u3002\n##### \u3082\u306e\u306e\u5024\u6bb5\uff08\u4fa1\u683c\uff09\u3068\u6d88\u8cbb\u91cf\uff08\u58f2\u4e0a\uff09\u306f\u3001\u300c\u9700\u8981\u300d\u3068\u300c\u4f9b\u7d66\u300d\u304c\u4ea4\u308f\u308a\u3001\u4e00\u81f4\u3059\u308b\u3068\u3053\u308d\uff08\u4fa1\u683c\u3068\u91cf\uff09\u3067\u6c7a\u307e\u308a\u307e\u3059\u3002\n##### \u3053\u3053\u3067\u3001\u300c\u9700\u8981\u300d\u3092\u76ee\u7684\u5909\u6570\uff08\u88ab\u8aac\u660e\u5909\u6570\uff09\u306b\u3068\u308a\u3001\u300c\u9700\u8981\u300d\u3092\u6c7a\u5b9a\u3059\u308b\u8aac\u660e\u5909\u6570\u3092\u8907\u6570\u306a\u3089\u3079\u305f\u91cd\u56de\u5e30\u5f0f\u3068\u3001\u304a\u306a\u3058\u3088\u3046\u306b\u3001\u300c\u4f9b\u7d66\u300d\u3092\u76ee\u7684\u5909\u6570\u306b\u3068\u308a\u3001\u8907\u6570\u306e\u300c\u4f9b\u7d66\u300d\u6c7a\u5b9a\u8981\u56e0\u3092\u8aac\u660e\u5909\u6570\u306b\u3068\u3063\u305f\u91cd\u56de\u5e30\u5f0f\u3092\uff12\u672c\u7528\u610f\u3057\u307e\u3059\u304c\u3001\u7247\u65b9\u306e\u91cd\u56de\u5e30\u5f0f\u306e\u8aac\u660e\u5909\u6570\u306b\u3001\u3082\u3046\u7247\u65b9\u306e\u91cd\u56de\u5e30\u5f0f\u306e\u76ee\u7684\u5909\u6570\u3092\u4e92\u3044\u306b\u542b\u3093\u3067\u3044\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n\n##### \u3053\u306e\u5834\u5408\u3001\u3069\u3061\u3089\u306e\u91cd\u56de\u5e30\u5f0f\u3082\u3001\u65b9\u7a0b\u5f0f\u306e **\u8aa4\u5dee\u9805** \u3068 **\u3042\u308b\u8aac\u660e\u5909\u6570 = \u3082\u3046\u7247\u65b9\u306e\u91cd\u56de\u5e30\u5f0f\u306e\u76ee\u7684\u5909\u6570** \u3068\u306e\u9593\u306b\u76f8\u95a2\u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u591a\u91cd\u56de\u5e30\u5206\u6790\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n#### [ \uff08\u53c2\u8003\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u3078\u306e\u30ea\u30f3\u30af\uff09\u300c\u540c\u6642\u65b9\u7a0b\u5f0f\u3068\u5e83\u544a\u3068Instrumental Variable Method\u300d ](http://ameblo.jp/cyberanalyst/entry-11645894886.html)\n\n![C.png](https://qiita-image-store.s3.amazonaws.com/0/43487/a93c5fc7-aef0-d854-b5a8-4e0277991c7d.png)\n\n\n#### **\u64cd\u4f5c\u5909\u6570\u6cd5** \u306b\u3088\u308b\u89e3\u6c7a\n\n##### \u3053\u306e\u5834\u5408\u3001**\u8aa4\u5dee\u9805** \u3068 **\u76f8\u95a2\u3057\u306a\u3044\u4f55\u3089\u304b\u306e\u5909\u6570** \u3092\u4eee\u5b9a\u7684\u306b\u53d6\u308a\u5165\u308c\u3066\u3001\u91cd\u56de\u5e30\u5206\u6790\u3092\u884c\u3044\u307e\u3059\u3002\n\n##### \u3053\u308c\u3067\u3001\u300c\u9700\u8981\u300d\u3068\u300c\u4f9b\u7d66\u300d\u306e\u95a2\u4fc2\u306e\u3088\u3046\u306a\u3001\u5165\u308c\u5b50\u306b\u306a\u3063\u305f\u9023\u7acb\u65b9\u7a0b\u5f0f\u30e2\u30c7\u30eb\u3092\u89e3\u3044\u3066\u3001\u300c\u4fa1\u683c\u300d\u3068\u300c\u8ca9\u58f2\u91cf\u300d\uff08\u751f\u7523\u91cf\uff09\u3092\u63a8\u8a08\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\n\n## \u7406\u8ad6\u7684\u306a\u8a71\u306f\u3001\u4e0b\u8a18\u306e\u53c2\u8003\u8cc7\u6599\u304c\u76f4\u611f\u7684\u306b\u308f\u304b\u308a\u3084\u3059\u304f\u307e\u3068\u307e\u3063\u3066\u3044\u307e\u3059\n\n#### [ \uff08\u53c2\u8003\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\uff09\u300c\u540c\u6642\u65b9\u7a0b\u5f0f\u3068\u5e83\u544a\u3068Instrumental Variable Method\u300d ](http://ameblo.jp/cyberanalyst/entry-11645894886.html)\n\n#### [ \uff08\u6176\u61c9\u7fa9\u587e\u5927\u5b66\u6cd5\u5b66\u90e8\u8b1b\u7fa9\u8cc7\u6599 \u300c\u64cd\u4f5c\u5909\u6570\u6cd5\u300d\u3078\u306e\u30ea\u30f3\u30af\uff09](https://www.google.co.jp/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=0CB4QFjAA&url=http%3A%2F%2Ffs1.law.keio.ac.jp%2F~aso%2Fecnm%2Fpp%2Fiv.pptx&ei=hD3GU7L4I4T-8QXsgIGIDw&usg=AFQjCNHh3lIR02vn_EsQuHhR8g3aNfkuVw&bvm=bv.71126742,d.dGc)\n![D.png](https://qiita-image-store.s3.amazonaws.com/0/43487/052fd252-f42c-d3b2-103d-2fc905ed640a.png)\n\n* __[Wikipedia, _Seemingly unrelated regressions_](http://en.wikipedia.org/wiki/Seemingly_unrelated_regressions)__\n\n### __\u540c\u6642\u65b9\u7a0b\u5f0f \u306e \u6570\u5b66\uff08\u884c\u5217\u6f14\u7b97\uff09\u89e3\u6cd5 __\n\n* __[M.Shimura \u300c\u540c\u6642\u65b9\u7a0b\u5f0f\u30e2\u30c7\u30eb\u306e\u884c\u5217\u306b\u3088\u308b\u89e3\u6cd5\u300d](http://japla.sakura.ne.jp/workshop/workshop/2006/simal0.pdf)__\n\n### __R \u8a00\u8a9e systemfit\u95a2\u6570\u306b\u3088\u308b\u30b3\u30fc\u30c9\u4f8b__\n\n![book.jpg](https://qiita-image-store.s3.amazonaws.com/0/43487/651520e1-11da-582c-0f49-11506c4df4cf.jpeg)\n\n* __[\u79cb\u5c71\u88d5\u300eR\u306b\u3088\u308b\u8a08\u91cf\u7d4c\u6e08\u5b66\u300f\u300c\u7b2c10\u7ae0 \u540c\u6642\u65b9\u7a0b\u5f0f\u4f53\u7cfb\u300d](http://shop.ohmsha.co.jp/shop/shopbrand.html?search=978-4-274-06748-8)__\n\n* __[_Google e\u30d6\u30c3\u30af\u30b9_ \u79cb\u5c71\u88d5\u300eR\u306b\u3088\u308b\u8a08\u91cf\u7d4c\u6e08\u5b66\u300f](http://books.google.co.jp/books/about/R%E3%81%AB%E3%82%88%E3%82%8B%E8%A8%88%E9%87%8F%E7%B5%8C%E6%B8%88%E5%AD%A6.html?id=3AHwwkvPlDgC&redir_esc=y)__\n\n* __[PukiWiki \u4e00\u822c\u5316\u6700\u5c0f\u4e8c\u4e57\u6cd5\u3068\u8b58\u5225\u554f\u984c\u300c2\u6bb5\u968e\u6700\u5c0f\u4e8c\u4e57\u6cd5\u306e\u5b9f\u8df5\u300d](http://hnami.or.tv/d/index.php?%B0%EC%C8%CC%B2%BD%BA%C7%BE%AE%C6%F3%BE%E8%CB%A1%A4%C8%BC%B1%CA%CC%CC%E4%C2%EA)__\n\n* __[Arne Henningsen (University of Copenhagen), Jeff D. Hamann(Forest Informatics, Inc.), _systemfit: A Package for Estimating Systems of Simultaneous Equations in R_](http://cran.r-project.org/web/packages/systemfit/vignettes/systemfit.pdf)__\n\n___\n\n___\n\n###__\u3010 2016/4/13 \u8ffd\u8a18 \u3011__\n\n\u4ee5\u4e0b\u306e\u30a6\u30a7\u30d6\u30da\u30fc\u30b8\u3092\u898b\u3064\u3051\u307e\u3057\u305f\u3002\n\n* [\u672a\u660e\u306e\u5148\u3078 \uff082015/11/11\uff09\u300cPython\u306b\u3088\u308b\u8a08\u91cf\u7d4c\u6e08\u5b66\u300d](http://y-ogawa.blog.jp/archives/1294028.html)\n\n> \u79cb\u5c71\u88d5\u300eR\u306b\u3088\u308b\u8a08\u91cf\u7d4c\u6e08\u5b66\u300f(2009, \u30aa\u30fc\u30e0\u793e)  \n>\n>\u3053\u306e\u672c\u306f\u8a08\u91cf\u7d4c\u6e08\u5b66\u306e\u57fa\u672c\u7684\u306a\u8003\u3048\u65b9\u3068\u3068\u3082\u306b\u3001R\u3084Excel\u3092\u4f7f\u3063\u3066\u5b9f\u969b\u306b\u3069\u3046\u5206\u6790\u3067\u304d\u308b\u306e\u304b\u3068\u3044\u3046\u8a08\u91cf\u7d4c\u6e08\u306e\u4f7f\u3044\u65b9\u307e\u3067\u8a73\u3057\u304f\u89e6\u308c\u3089\u308c\u3066\u3044\u3066\u3001\u8a08\u91cf\u7d4c\u6e08\u5b66\u306b\u3064\u3044\u3066\u4f55\u3082\u77e5\u3089\u306a\u3044\u4eba\u306b\u3082\u8aad\u307f\u3084\u3059\u3044\u30aa\u30b9\u30b9\u30e1\u306a\u5165\u9580\u66f8\u3067\u3059\u3002\n>\n> \u4eca\u56de\u306f\u672c\u66f8\u306eR\u30b3\u30fc\u30c9\u3092\u3082\u3068\u306bPython\u30b3\u30fc\u30c9\u3092\u4f5c\u3063\u305f\u3002\n\n\u4e0a\u8a18\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u304b\u3089\u8cbc\u3089\u308c\u3066\u3044\u308b\u4ee5\u4e0b\u306e\u30ea\u30f3\u30af\uff08\u4e0a\u8a18\u30b5\u30a4\u30c8\u904b\u55b6\u8005\u306eGitHub)\u304b\u3089\u3001\u3055\u3089\u306b\u30ea\u30f3\u30af\u8cbc\u3089\u308c\u3066\u3044\u308b\n\n* [GitHub ogaway/Econometrics](https://github.com/ogaway/Econometrics)\n\n\u4ee5\u4e0b\u306e\u30a6\u30a7\u30d6\u30da\u30fc\u30b8\u306b\u3001\u540c\u6642\u65b9\u7a0b\u5f0f\u4f53\u7cfb \u3092 Python\u30b3\u30fc\u30c9\u306b\u843d\u3068\u3057\u8fbc\u3093\u3060\u30b9\u30af\u30ea\u30d7\u30c8\u304c\u63b2\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n* [Jupyter](http://nbviewer.jupyter.org/github/ogaway/Econometrics/blob/master/SimultaneousEquation.ipynb)\n\n>\u540c\u6642\u65b9\u7a0b\u5f0f\u4f53\u7cfb\n>\u300eR\u306b\u3088\u308b\u8a08\u91cf\u7d4c\u6e08\u5b66\u300f\u7b2c10\u7ae0\u300c\u540c\u6642\u65b9\u7a0b\u5f0f\u4f53\u7cfb\u300d\u3092Python\u3067\u5b9f\u884c\u3059\u308b\u3002\n\u30c6\u30ad\u30b9\u30c8\u4ed8\u5c5e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8(\u300ck1001.csv\u300d\u7b49)\u306b\u3064\u3044\u3066\u306f\u51fa\u7248\u793e\u30b5\u30a4\u30c8\u3088\u308a\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n>\u307e\u305f\u3001\u4ee5\u4e0b\u306e\u8aac\u660e\u306f\u672c\u66f8\u306e\u4e00\u90e8\u3092\u8981\u7d04\u3057\u305f\u3082\u306e\u3067\u3059\u306e\u3067\u3001\u3088\u308a\u8a73\u3057\u3044\u8aac\u660e\u306f\u672c\u66f8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n>\n>\u4f8b\u984c10.1\n>\u6b21\u306e\u3088\u3046\u306a\u4f9b\u7d66\u95a2\u6570\u3068\u9700\u8981\u95a2\u6570\u3092\u63a8\u5b9a\u3059\u308b\u3002\n>\n>Qt=\u03b10+\u03b11Pt+\u03b12Et+utQt=\u03b10+\u03b11Pt+\u03b12Et+ut\n>Qt=\u03b20+\u03b21Pt+\u03b22At+vtQt=\u03b20+\u03b21Pt+\u03b22At+vt\n>\n>\u305f\u3060\u3057\u3001QtQt \u306f\u6570\u91cf\u3001PtPt \u306f\u4fa1\u683c\u3001EtEt \u306f\u4f9b\u7d66\u95a2\u6570\u30b7\u30d5\u30c8\u8981\u56e0\u3001AtAt \u306f\u9700\u8981\u95a2\u6570\u30b7\u30d5\u30c8\u8981\u56e0\u3068\u3059\u308b\u3002\n\n", "tags": ["Python", "Econometrics", "\u6642\u7cfb\u5217\u89e3\u6790", "\u7d71\u8a08\u5b66", "statistics"]}