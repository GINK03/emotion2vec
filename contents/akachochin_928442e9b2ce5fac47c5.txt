{"context": " More than 1 year has passed since last update.\n\n\u4eca\u56de\u306ffreeze\u3092\u8abf\u3079\u3066\u307f\u307e\u3059\n\u524d\u56de\u306fLinux\u306ePower Management\u306e\u5c0e\u5165\u90e8\u5206\u3092\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306f\u3001\n\nDocumentation/power/states.txt\nstate:      Suspend-To-Idle\nACPI state: S0\nLabel:      \"freeze\"\n\n\n\u306b\u3064\u3044\u3066\u8abf\u3079\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002(7\u6708\u306e\u3082\u304f\u3082\u304f\u4f1a\u306e\u30cd\u30bf\u3092\u653e\u7f6e\u3057\u3066\u3044\u305f\u30fb\u30fb\u30fb)\n\n\u305d\u3082\u305d\u3082freeze\u3063\u3066\u306a\u3093\u3060\u3002\nDocumentation/power/freezing-of-tasks.txt \u306b\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\n\u6b63\u5f0f\u306a\u540d\u524d(?)\u306ffreezing of tasks\u3089\u3057\u3044\u3067\u3059\u3002\n\u4ee5\u4e0bfreezing-of-tasks.txt\u306e\u524d\u534a2/3\u306e\u8981\u7d04\u3092\u66f8\u304d\u307e\u3059\u3002\n\u5f8c\u534a1/3\u3082\u9762\u767d\u3044\u3051\u3069\u3001freezing of tasks\u306e\u5b9f\u88c5\u542b\u3081\u305f\u6982\u8981\u3092\u77e5\u308b\u305f\u3081\u306b\u306f\u3068\u308a\u3042\u3048\u305a\u524d\u534a2/3\u3067\u5341\u5206\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\nfreezing of tasks\u3068\u306f\u3001\u30b7\u30b9\u30c6\u30e0\u306ePower state\u304chibernation\u3082\u3057\u304f\u306fsystem-wide suspend\u306e\u5834\u5408\u306b\u5b9f\u65bd\u3055\u308c\u308b\u3001\u30e6\u30fc\u30b6\u30d7\u30ed\u30bb\u30b9\u3084\u3044\u304f\u3064\u304b\u306e\u30ab\u30fc\u30cd\u30eb\u30b9\u30ec\u30c3\u30c9\u3092freeze\u72b6\u614b\u306b\u3059\u308b\u4ed5\u7d44\u307f\u3067\u3059\u3002\nfreeze\u72b6\u614b\u3092\u5236\u5fa1\u3059\u308b\u305f\u3081\u306b\u3001\u30d7\u30ed\u30bb\u30b9\u69cb\u9020\u4f53\u5185\u306e\u30d5\u30e9\u30b0\u306b\u30bb\u30c3\u30c8\u3067\u304d\u308b3\u3064\u306e\u30d5\u30e9\u30b0\u30d3\u30c3\u30c8\u304c\u3042\u308a\u307e\u3059\u3002include/linux/sched.h\u306b\u4ee5\u4e0b3\u3064\u306e\u5b9a\u7fa9\u304c\u3042\u308a\u307e\u3059\u3002\n\n\n\n\n\u5b9a\u7fa9\u540d\n\u610f\u5473\n\n\n\n\nPF_NOFREEZE\n\u30b7\u30b9\u30c6\u30e0\u306ePower mode\u304csuspend\u307e\u305f\u306fhibernation\u306e\u969b\u306b\u8a72\u5f53\u30d7\u30ed\u30bb\u30b9\u3092freeze\u72b6\u614b\u306b\u3057\u306a\u3044\n\n\nPF_FROZEN\n\u3053\u306e\u30d7\u30ed\u30bb\u30b9\u306f\u65e2\u306bfreeze\u72b6\u614b\n\n\nPF_FREEZER_SKIP\n\u8a72\u5f53\u30d7\u30ed\u30bb\u30b9\u3092freeze\u72b6\u614b\u306b\u3057\u306a\u3044\u3002PF_NOFREEZE\u3068\u306e\u9055\u3044\u306f\u4eca\u306e\u3068\u3053\u308d\u4e0d\u660e...\n\n\n\n\nsystem_freezing_cnt\u3068\u3044\u3046\u5909\u6570\u3082\u3042\u308a\u3001\u3053\u308c\u3067freeze\u79fb\u884c\u306e\u53ef\u5426\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002\u3053\u306e\u5024\u306ffreeze_processes()\u3068\u3044\u3046\u95a2\u6570\u7d4c\u7531\u3067\u300cfreeze\u3057\u305f\u3044\u300d\u610f\u601d\u8868\u793a\u3092\u3057\u3066\u5909\u3048\u307e\u3059\u3002\nfreeze\u79fb\u884c\u306e\u610f\u601d\u8868\u793a\u3092\u3057\u305f\u5834\u5408\u3001try_to_freeze_tasks()\u3068\u3044\u3046\u95a2\u6570\u304c\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u3063\u3066\u3001\u5168\u30e6\u30fc\u30b6\u7a7a\u9593\u30d7\u30ed\u30bb\u30b9\u306b\u64ec\u4f3c\u30b7\u30b0\u30ca\u30eb(fake signal)\u304c\u9001\u51fa\u3055\u308c\u307e\u3059\u3002\u307e\u305f\u3001\u3053\u306e\u3068\u304d\u30ab\u30fc\u30cd\u30eb\u30b9\u30ec\u30c3\u30c9\u3092\u5168\u3066\u8d77\u3053\u3057\u307e\u3059(wake up)\u3002\n\u3053\u306e\u64ec\u4f3c\u30b7\u30b0\u30ca\u30eb\u3092\u53d7\u3051\u305ffreeze\u53ef\u80fd\u306a\u30e6\u30fc\u30b6\u7a7a\u9593\u30d7\u30ed\u30bb\u30b9\u306f\u3001try_to_freeze()\u547c\u3073\u51fa\u3057\u306b\u3088\u308a\u5fdc\u7b54(react)\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u307e\u305b\u3093\u3002\u3053\u306e\u5fdc\u7b54\u306b\u3088\u3063\u3066\u3001\u8a72\u5f53\u30d7\u30ed\u30bb\u30b9\u306ffreeze\u72b6\u614b\u306b\u9077\u79fb\u3057\u307e\u3059\u3002\n\u30e6\u30fc\u30b6\u30b9\u30ec\u30c3\u30c9\u81ea\u4fe1\u306ftry_to_freeze()\u547c\u3073\u51fa\u3057\u306b\u3064\u3044\u3066\u7279\u306b\u610f\u8b58\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3057\u304b\u3057\u3001\u30ab\u30fc\u30cd\u30eb\u30b9\u30ec\u30c3\u30c9\u306e\u5834\u5408\u3001\u5fc5\u8981\u3067\u3042\u308c\u3070\u5404\u30b9\u30ec\u30c3\u30c9\u3054\u3068\u306b\u660e\u793a\u7684\u306bfreeze\u72b6\u614b\u9077\u79fb\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nfreeze\u72b6\u614b\u3092\u8a2d\u3051\u305f\u76ee\u7684\u306f\u3001\u300chibernation\u3084\u308b\u3068\u304d\u306b\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306b\u30a2\u30af\u30bb\u30b9\u3055\u308c\u305f\u304f\u306a\u3044\u300d\u300chibernation\u7d50\u69cbRAM\u4f7f\u3046\u306e\u3067\u3001\u90aa\u9b54\u306a\u306e\u3069\u3044\u3066\u304f\u308c\u300d\u300c\u30ab\u30fc\u30cd\u30eb\u30b9\u30ec\u30c3\u30c9\u3084\u30c7\u30d0\u30a4\u30b9\u30c9\u30e9\u30a4\u30d0\u304c\u3001suspend\u9014\u4e2d\u3082\u3057\u304f\u306fsuspend\u5f8c\u306e\u30c9\u30e9\u30a4\u30d0\u306b\u5e72\u6e09\u3057\u3066\u307b\u3057\u304f\u306a\u3044\u300d\u3068\u3044\u3063\u305f\u3068\u3053\u308d\u3067\u3059\u3002(1\u756a\u76ee\u30683\u756a\u76ee\u306f\u7d50\u69cb\u30b7\u30d3\u30a2\u3067\u3059\u3002)\n\n\u4f55\u3068\u306a\u304f\u5b9f\u88c5\u306e\u30a4\u30e1\u30fc\u30b8\u304c\u3064\u304b\u3081\u305f\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u307e\u305a\u306f\u3001main.c\u306efreeze\u7cfb\u306e\u51e6\u7406\u3092\u307f\u308b\n\u8981\u7d04\u306b\u66f8\u304b\u308c\u3066\u3044\u308btry_to_freeze_tasks()\u95a2\u6570\u3092\u898b\u307e\u3059\u3002\n\u5c11\u3057\u9577\u3044\u306e\u3067\u3001\u307e\u305a\u524d\u534a\u3092\u898b\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nkernel/power/process.c\n/* \n * Timeout for stopping processes\n */\nunsigned int __read_mostly freeze_timeout_msecs = 20 * MSEC_PER_SEC;\n\nstatic int try_to_freeze_tasks(bool user_only)\n{\n    struct task_struct *g, *p;\n    unsigned long end_time;\n    unsigned int todo;\n    bool wq_busy = false;\n    struct timeval start, end;\n    u64 elapsed_msecs64;\n    unsigned int elapsed_msecs;\n    bool wakeup = false;\n    int sleep_usecs = USEC_PER_MSEC;\n\n    do_gettimeofday(&start);\n\n    end_time = jiffies + msecs_to_jiffies(freeze_timeout_msecs);\n\n    if (!user_only)\n        freeze_workqueues_begin();\n\n    while (true) {\n        todo = 0;\n        read_lock(&tasklist_lock);\n        for_each_process_thread(g, p) {\n            if (p == current || !freeze_task(p))\n                continue;\n\n            if (!freezer_should_skip(p))\n                todo++;\n        }\n        read_unlock(&tasklist_lock);\n/* \u7565 */\n\n\n\n\u30b9\u30ec\u30c3\u30c9\u3054\u3068\u306eforeach\u3067\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u308bfreeze_task()\u304c\u91cd\u8981\u306a\u5f79\u5272\u3092\u62c5\u3063\u3066\u3044\u305d\u3046\u3067\u3059\u3002freeze_task()\u3092\u898b\u307e\u3057\u3087\u3046\u3002\n\nkernel/freezer.c\nbool freeze_task(struct task_struct *p) \n{\n    unsigned long flags;\n\n    /*  \n     * This check can race with freezer_do_not_count, but worst case that\n     * will result in an extra wakeup being sent to the task.  It does not \n     * race with freezer_count(), the barriers in freezer_count() and \n     * freezer_should_skip() ensure that either freezer_count() sees\n     * freezing == true in try_to_freeze() and freezes, or\n     * freezer_should_skip() sees !PF_FREEZE_SKIP and freezes the task\n     * normally.\n     */  \n    if (freezer_should_skip(p))\n        return false;\n\n    spin_lock_irqsave(&freezer_lock, flags);\n    if (!freezing(p) || frozen(p)) {\n        spin_unlock_irqrestore(&freezer_lock, flags);\n        return false;\n    }   \n\n    if (!(p->flags & PF_KTHREAD))\n        fake_signal_wake_up(p);\n    else\n        wake_up_state(p, TASK_INTERRUPTIBLE);\n\n    spin_unlock_irqrestore(&freezer_lock, flags);\n    return true;\n}\n\n\n\u9014\u4e2d\u3067\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u308bfreezing()\u3068frozen()\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u306e\u5b9f\u88c5\u3067\u3059\u3002\nfrozen()\u306e\u4e2d\u3067\u3001\u30bf\u30b9\u30af\u69cb\u9020\u4f53\u306e\u30d5\u30e9\u30b0\u306bPF_FROZEN\u304c\u7acb\u3063\u3066\u3044\u308b\u304b\u8abf\u3079\u3066\u3044\u308b\u3053\u3068\u3092\u62bc\u3055\u3048\u3066\u304f\u3060\u3055\u3044\u3002\u3064\u307e\u308a\u3001\u30bf\u30b9\u30af\u69cb\u9020\u4f53\u306e\u30d5\u30e9\u30b0\u306bPF_FROZEN\u304c\u7acb\u3063\u3066\u3044\u308b\u5834\u5408\u3001\u305d\u306e\u30bf\u30b9\u30af\u306ffreezing\u72b6\u614b\u3067\u3042\u308b\u3068\u8a00\u3048\u307e\u3059\u3002\n\ninclude/linux/freezer.h\n/*\n * Check if a process has been frozen\n */\nstatic inline bool frozen(struct task_struct *p) \n{\n    return p->flags & PF_FROZEN;\n}\n\nextern bool freezing_slow_path(struct task_struct *p);\n\n/*\n * Check if there is a request to freeze a process\n */\nstatic inline bool freezing(struct task_struct *p) \n{\n    if (likely(!atomic_read(&system_freezing_cnt)))\n        return false;\n    return freezing_slow_path(p);\n}\n\n\n\u7d9a\u3044\u3066\u3001freezing\u306e\u5bfe\u8c61\u304c\u30ab\u30fc\u30cd\u30eb\u30b9\u30ec\u30c3\u30c9\u306e\u5834\u5408\u3068\u30e6\u30fc\u30b6\u30b9\u30ec\u30c3\u30c9\u306e\u5834\u5408\u3068\u3067\u51e6\u7406\u3092\u5206\u3051\u3066\u3044\u308b\u7b87\u6240\u304c\u3042\u308a\u307e\u3059\u3002\u5148\u307b\u3069\u306eDocumentation\u8981\u7d04\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\u30e6\u30fc\u30b6\u30b9\u30ec\u30c3\u30c9\u306e\u5834\u5408\u3067\u306f\u3001fake_signal_wake_up()\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\nkernel/freezer.c\nstatic void fake_signal_wake_up(struct task_struct *p) \n{\n    unsigned long flags;\n\n    if (lock_task_sighand(p, &flags)) {\n        signal_wake_up(p, 0); \n        unlock_task_sighand(p, &flags);\n    }   \n}\n\n\n\u307e\u305f\u3001signal_wake_up()\u306e\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\ninclude/linux/sched.h\nstatic inline void signal_wake_up(struct task_struct *t, bool resume)\n{      \n    signal_wake_up_state(t, resume ? TASK_WAKEKILL : 0);\n}\n\n\n\u66f4\u306b\u7d9a\u3044\u3066signal_wake_up_state()\u3092\u898b\u307e\u3057\u3087\u3046\u3002\n\nkernel/signal.c\n/*\n * Tell a process that it has a new active signal..\n *\n * NOTE! we rely on the previous spin_lock to\n * lock interrupts for us! We can only be called with\n * \"siglock\" held, and the local interrupt must\n * have been disabled when that got acquired!\n *\n * No need to set need_resched since signal event passing\n * goes through ->blocked\n */\nvoid signal_wake_up_state(struct task_struct *t, unsigned int state)\n{\n    set_tsk_thread_flag(t, TIF_SIGPENDING);\n\n\n\u5b9f\u306f\u3001\u3053\u3053\u304c\u5f8c\u306b\u91cd\u8981\u306b\u306a\u308a\u307e\u3059\u3002\u30b7\u30b0\u30ca\u30eb\u3092\u9001\u51fa\u3057\u3066\u306f\u3044\u307e\u305b\u3093\u304c\u3001\u30bf\u30b9\u30af\u69cb\u9020\u4f53\u306b\u300c\u30da\u30f3\u30c7\u30a3\u30f3\u30b0\u3055\u308c\u3066\u3044\u308b\u30b7\u30b0\u30ca\u30eb\u304c\u3042\u308b\u300d\u3068\u3044\u3046\u5370\u3092\u3064\u3051\u3066\u304a\u304d\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001TIF_SIGPENDING\u306e\u300cTIF\u300d\u306fThread InFormation\u300d\u306e\u7565\u3089\u3057\u3044\u3067\u3059\u3002\u3053\u306e\u5024\u306fCPU\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u4f9d\u5b58(arch)\u306e\u4e0b\u306b\u5b9a\u7fa9\u304c\u3042\u308b\u304c\u3001\u540d\u524d\u306e\u901a\u308a\u300cSignal Pending\u300d\u306e\u3088\u3046\u3067\u3059\u3002\nsignal_wake_up_state()\u306e\u7d9a\u304d\u3092\u8aad\u307f\u307e\u3059\u3002\n\nkernel/signal.c\n    /*\n     * TASK_WAKEKILL also means wake it up in the stopped/traced/killable\n     * case. We don't check t->state here because there is a race with it\n     * executing another processor and just now entering stopped state.\n     * By using wake_up_state, we ensure the process will wake up and\n     * handle its death signal.\n     */\n    if (!wake_up_state(t, state | TASK_INTERRUPTIBLE))\n        kick_process(t);\n}\n\n\nwake_up_state()\u306e\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\u5358\u306btry_to_wake_up()\u3092\u547c\u3093\u3067\u3044\u307e\u3059\u3002\n\nkernel/sched/core.c\nint wake_up_state(struct task_struct *p, unsigned int state)\n{\n    return try_to_wake_up(p, state, 0);\n}\n\n\n\u3053\u3053\u307e\u3067\u306e\u3068\u3053\u308d\u3067\u3001state\u306b\u6e21\u3055\u308c\u308b\u5024\u306fTASK_INTERRUPTIBLE\u3067\u3059\u3002\n\u4ee5\u4e0b\u306e\u5b9f\u88c5\u3092\u8aad\u307f\u307e\u3059\u304c\u3001\u5358\u306b\u30b9\u30ec\u30c3\u30c9\u3092\u8d77\u3053\u3059(\u30b9\u30ec\u30c3\u30c9\u3092\u5b9f\u884c\u53ef\u80fd\u72b6\u614b\u306b\u3059\u308b)\u3088\u3046\u306a\u5b9f\u88c5\u306b\u898b\u3048\u307e\u3059\u3002\u3053\u3053\u307e\u3067\u306e\u3068\u3053\u308d\u3067\u8ab0\u3082freezing\u306b\u3057\u3066\u3044\u306a\u3044\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002\n\nkernel/sched/core.c\n/**\n * try_to_wake_up - wake up a thread\n * @p: the thread to be awakened\n * @state: the mask of task states that can be woken\n * @wake_flags: wake modifier flags (WF_*)\n *\n * Put it on the run-queue if it's not already there. The \"current\"\n * thread is always on the run-queue (except when the actual\n * re-schedule is in progress), and as such you're allowed to do\n * the simpler \"current->state = TASK_RUNNING\" to mark yourself\n * runnable without the overhead of this.\n *\n * Return: %true if @p was woken up, %false if it was already running.\n * or @state didn't match @p's state.\n */\nstatic int\ntry_to_wake_up(struct task_struct *p, unsigned int state, int wake_flags)\n{\n/* \u7565 */\n    cpu = task_cpu(p);\n\n    if (p->on_rq && ttwu_remote(p, wake_flags))\n        goto stat;\n\n/* \u7565 */\n\n    ttwu_queue(p, cpu);\nstat:\n    ttwu_stat(p, cpu, wake_flags);\nout:\n    raw_spin_unlock_irqrestore(&p->pi_lock, flags);\n\n    return success;\n}\n\n\n\u4e00\u4f53\u8ab0\u304c\u30b9\u30ec\u30c3\u30c9\u3092freezing\u306b\u3057\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\u3002\n\u305d\u308c\u306f\u6b21\u56de\u3002\n## \u4eca\u56de\u306ffreeze\u3092\u8abf\u3079\u3066\u307f\u307e\u3059\n[\u524d\u56de](http://qiita.com/akachochin/items/af9380af00746f5ee5b9)\u306fLinux\u306ePower Management\u306e\u5c0e\u5165\u90e8\u5206\u3092\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306f\u3001\n\n```Documentation/power/states.txt\nstate:      Suspend-To-Idle\nACPI state: S0\nLabel:      \"freeze\"\n```\n\n\u306b\u3064\u3044\u3066\u8abf\u3079\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002(7\u6708\u306e\u3082\u304f\u3082\u304f\u4f1a\u306e\u30cd\u30bf\u3092\u653e\u7f6e\u3057\u3066\u3044\u305f\u30fb\u30fb\u30fb)\n\n## \u305d\u3082\u305d\u3082freeze\u3063\u3066\u306a\u3093\u3060\u3002\n\nDocumentation/power/freezing-of-tasks.txt \u306b\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\n\u6b63\u5f0f\u306a\u540d\u524d(?)\u306ffreezing of tasks\u3089\u3057\u3044\u3067\u3059\u3002\n\n\u4ee5\u4e0bfreezing-of-tasks.txt\u306e\u524d\u534a2/3\u306e\u8981\u7d04\u3092\u66f8\u304d\u307e\u3059\u3002\n\u5f8c\u534a1/3\u3082\u9762\u767d\u3044\u3051\u3069\u3001freezing of tasks\u306e\u5b9f\u88c5\u542b\u3081\u305f\u6982\u8981\u3092\u77e5\u308b\u305f\u3081\u306b\u306f\u3068\u308a\u3042\u3048\u305a\u524d\u534a2/3\u3067\u5341\u5206\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n - freezing of tasks\u3068\u306f\u3001\u30b7\u30b9\u30c6\u30e0\u306ePower state\u304chibernation\u3082\u3057\u304f\u306fsystem-wide suspend\u306e\u5834\u5408\u306b\u5b9f\u65bd\u3055\u308c\u308b\u3001\u30e6\u30fc\u30b6\u30d7\u30ed\u30bb\u30b9\u3084\u3044\u304f\u3064\u304b\u306e\u30ab\u30fc\u30cd\u30eb\u30b9\u30ec\u30c3\u30c9\u3092freeze\u72b6\u614b\u306b\u3059\u308b\u4ed5\u7d44\u307f\u3067\u3059\u3002\n\n - freeze\u72b6\u614b\u3092\u5236\u5fa1\u3059\u308b\u305f\u3081\u306b\u3001\u30d7\u30ed\u30bb\u30b9\u69cb\u9020\u4f53\u5185\u306e\u30d5\u30e9\u30b0\u306b\u30bb\u30c3\u30c8\u3067\u304d\u308b3\u3064\u306e\u30d5\u30e9\u30b0\u30d3\u30c3\u30c8\u304c\u3042\u308a\u307e\u3059\u3002include/linux/sched.h\u306b\u4ee5\u4e0b3\u3064\u306e\u5b9a\u7fa9\u304c\u3042\u308a\u307e\u3059\u3002\n\n| \u5b9a\u7fa9\u540d | \u610f\u5473 |\n|:------------|:------------|\n| PF_NOFREEZE | \u30b7\u30b9\u30c6\u30e0\u306ePower mode\u304csuspend\u307e\u305f\u306fhibernation\u306e\u969b\u306b\u8a72\u5f53\u30d7\u30ed\u30bb\u30b9\u3092freeze\u72b6\u614b\u306b\u3057\u306a\u3044 |\n| PF_FROZEN | \u3053\u306e\u30d7\u30ed\u30bb\u30b9\u306f\u65e2\u306bfreeze\u72b6\u614b |\n| PF_FREEZER_SKIP | \u8a72\u5f53\u30d7\u30ed\u30bb\u30b9\u3092freeze\u72b6\u614b\u306b\u3057\u306a\u3044\u3002PF_NOFREEZE\u3068\u306e\u9055\u3044\u306f\u4eca\u306e\u3068\u3053\u308d\u4e0d\u660e... |\n\n - system_freezing_cnt\u3068\u3044\u3046\u5909\u6570\u3082\u3042\u308a\u3001\u3053\u308c\u3067freeze\u79fb\u884c\u306e\u53ef\u5426\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002\u3053\u306e\u5024\u306ffreeze_processes()\u3068\u3044\u3046\u95a2\u6570\u7d4c\u7531\u3067\u300cfreeze\u3057\u305f\u3044\u300d\u610f\u601d\u8868\u793a\u3092\u3057\u3066\u5909\u3048\u307e\u3059\u3002\n\n - freeze\u79fb\u884c\u306e\u610f\u601d\u8868\u793a\u3092\u3057\u305f\u5834\u5408\u3001try_to_freeze_tasks()\u3068\u3044\u3046\u95a2\u6570\u304c\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u3063\u3066\u3001\u5168\u30e6\u30fc\u30b6\u7a7a\u9593\u30d7\u30ed\u30bb\u30b9\u306b\u64ec\u4f3c\u30b7\u30b0\u30ca\u30eb(fake signal)\u304c\u9001\u51fa\u3055\u308c\u307e\u3059\u3002\u307e\u305f\u3001\u3053\u306e\u3068\u304d\u30ab\u30fc\u30cd\u30eb\u30b9\u30ec\u30c3\u30c9\u3092\u5168\u3066\u8d77\u3053\u3057\u307e\u3059(wake up)\u3002\n\n - \u3053\u306e\u64ec\u4f3c\u30b7\u30b0\u30ca\u30eb\u3092\u53d7\u3051\u305ffreeze\u53ef\u80fd\u306a\u30e6\u30fc\u30b6\u7a7a\u9593\u30d7\u30ed\u30bb\u30b9\u306f\u3001try_to_freeze()\u547c\u3073\u51fa\u3057\u306b\u3088\u308a\u5fdc\u7b54(react)\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u307e\u305b\u3093\u3002\u3053\u306e\u5fdc\u7b54\u306b\u3088\u3063\u3066\u3001\u8a72\u5f53\u30d7\u30ed\u30bb\u30b9\u306ffreeze\u72b6\u614b\u306b\u9077\u79fb\u3057\u307e\u3059\u3002\n\n - \u30e6\u30fc\u30b6\u30b9\u30ec\u30c3\u30c9\u81ea\u4fe1\u306ftry_to_freeze()\u547c\u3073\u51fa\u3057\u306b\u3064\u3044\u3066\u7279\u306b\u610f\u8b58\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3057\u304b\u3057\u3001\u30ab\u30fc\u30cd\u30eb\u30b9\u30ec\u30c3\u30c9\u306e\u5834\u5408\u3001\u5fc5\u8981\u3067\u3042\u308c\u3070\u5404\u30b9\u30ec\u30c3\u30c9\u3054\u3068\u306b\u660e\u793a\u7684\u306bfreeze\u72b6\u614b\u9077\u79fb\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n - freeze\u72b6\u614b\u3092\u8a2d\u3051\u305f\u76ee\u7684\u306f\u3001\u300chibernation\u3084\u308b\u3068\u304d\u306b\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306b\u30a2\u30af\u30bb\u30b9\u3055\u308c\u305f\u304f\u306a\u3044\u300d\u300chibernation\u7d50\u69cbRAM\u4f7f\u3046\u306e\u3067\u3001\u90aa\u9b54\u306a\u306e\u3069\u3044\u3066\u304f\u308c\u300d\u300c\u30ab\u30fc\u30cd\u30eb\u30b9\u30ec\u30c3\u30c9\u3084\u30c7\u30d0\u30a4\u30b9\u30c9\u30e9\u30a4\u30d0\u304c\u3001suspend\u9014\u4e2d\u3082\u3057\u304f\u306fsuspend\u5f8c\u306e\u30c9\u30e9\u30a4\u30d0\u306b\u5e72\u6e09\u3057\u3066\u307b\u3057\u304f\u306a\u3044\u300d\u3068\u3044\u3063\u305f\u3068\u3053\u308d\u3067\u3059\u3002(1\u756a\u76ee\u30683\u756a\u76ee\u306f\u7d50\u69cb\u30b7\u30d3\u30a2\u3067\u3059\u3002)\n\n\u4f55\u3068\u306a\u304f\u5b9f\u88c5\u306e\u30a4\u30e1\u30fc\u30b8\u304c\u3064\u304b\u3081\u305f\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\n## \u307e\u305a\u306f\u3001main.c\u306efreeze\u7cfb\u306e\u51e6\u7406\u3092\u307f\u308b\n\n\u8981\u7d04\u306b\u66f8\u304b\u308c\u3066\u3044\u308btry_to_freeze_tasks()\u95a2\u6570\u3092\u898b\u307e\u3059\u3002\n\u5c11\u3057\u9577\u3044\u306e\u3067\u3001\u307e\u305a\u524d\u534a\u3092\u898b\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n```c:kernel/power/process.c\n/* \n * Timeout for stopping processes\n */\nunsigned int __read_mostly freeze_timeout_msecs = 20 * MSEC_PER_SEC;\n    \nstatic int try_to_freeze_tasks(bool user_only)\n{\n    struct task_struct *g, *p;\n    unsigned long end_time;\n    unsigned int todo;\n    bool wq_busy = false;\n    struct timeval start, end;\n    u64 elapsed_msecs64;\n    unsigned int elapsed_msecs;\n    bool wakeup = false;\n    int sleep_usecs = USEC_PER_MSEC;\n\n    do_gettimeofday(&start);\n\n    end_time = jiffies + msecs_to_jiffies(freeze_timeout_msecs);\n\n    if (!user_only)\n        freeze_workqueues_begin();\n\n    while (true) {\n        todo = 0;\n        read_lock(&tasklist_lock);\n        for_each_process_thread(g, p) {\n            if (p == current || !freeze_task(p))\n                continue;\n\n            if (!freezer_should_skip(p))\n                todo++;\n        }\n        read_unlock(&tasklist_lock);\n/* \u7565 */\n\n```\n\n\u30b9\u30ec\u30c3\u30c9\u3054\u3068\u306eforeach\u3067\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u308bfreeze_task()\u304c\u91cd\u8981\u306a\u5f79\u5272\u3092\u62c5\u3063\u3066\u3044\u305d\u3046\u3067\u3059\u3002freeze_task()\u3092\u898b\u307e\u3057\u3087\u3046\u3002\n\n```c:kernel/freezer.c\nbool freeze_task(struct task_struct *p) \n{\n    unsigned long flags;\n\n    /*  \n     * This check can race with freezer_do_not_count, but worst case that\n     * will result in an extra wakeup being sent to the task.  It does not \n     * race with freezer_count(), the barriers in freezer_count() and \n     * freezer_should_skip() ensure that either freezer_count() sees\n     * freezing == true in try_to_freeze() and freezes, or\n     * freezer_should_skip() sees !PF_FREEZE_SKIP and freezes the task\n     * normally.\n     */  \n    if (freezer_should_skip(p))\n        return false;\n\n    spin_lock_irqsave(&freezer_lock, flags);\n    if (!freezing(p) || frozen(p)) {\n        spin_unlock_irqrestore(&freezer_lock, flags);\n        return false;\n    }   \n\n    if (!(p->flags & PF_KTHREAD))\n        fake_signal_wake_up(p);\n    else\n        wake_up_state(p, TASK_INTERRUPTIBLE);\n\n    spin_unlock_irqrestore(&freezer_lock, flags);\n    return true;\n}\n```\n\n\u9014\u4e2d\u3067\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u308bfreezing()\u3068frozen()\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u306e\u5b9f\u88c5\u3067\u3059\u3002\nfrozen()\u306e\u4e2d\u3067\u3001\u30bf\u30b9\u30af\u69cb\u9020\u4f53\u306e\u30d5\u30e9\u30b0\u306bPF_FROZEN\u304c\u7acb\u3063\u3066\u3044\u308b\u304b\u8abf\u3079\u3066\u3044\u308b\u3053\u3068\u3092\u62bc\u3055\u3048\u3066\u304f\u3060\u3055\u3044\u3002**\u3064\u307e\u308a\u3001\u30bf\u30b9\u30af\u69cb\u9020\u4f53\u306e\u30d5\u30e9\u30b0\u306bPF_FROZEN\u304c\u7acb\u3063\u3066\u3044\u308b\u5834\u5408\u3001\u305d\u306e\u30bf\u30b9\u30af\u306ffreezing\u72b6\u614b\u3067\u3042\u308b**\u3068\u8a00\u3048\u307e\u3059\u3002\n\n```c:include/linux/freezer.h\n/*\n * Check if a process has been frozen\n */\nstatic inline bool frozen(struct task_struct *p) \n{\n    return p->flags & PF_FROZEN;\n}\n\nextern bool freezing_slow_path(struct task_struct *p);\n\n/*\n * Check if there is a request to freeze a process\n */\nstatic inline bool freezing(struct task_struct *p) \n{\n    if (likely(!atomic_read(&system_freezing_cnt)))\n        return false;\n    return freezing_slow_path(p);\n}\n```\n\n\u7d9a\u3044\u3066\u3001freezing\u306e\u5bfe\u8c61\u304c\u30ab\u30fc\u30cd\u30eb\u30b9\u30ec\u30c3\u30c9\u306e\u5834\u5408\u3068\u30e6\u30fc\u30b6\u30b9\u30ec\u30c3\u30c9\u306e\u5834\u5408\u3068\u3067\u51e6\u7406\u3092\u5206\u3051\u3066\u3044\u308b\u7b87\u6240\u304c\u3042\u308a\u307e\u3059\u3002\u5148\u307b\u3069\u306eDocumentation\u8981\u7d04\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\u30e6\u30fc\u30b6\u30b9\u30ec\u30c3\u30c9\u306e\u5834\u5408\u3067\u306f\u3001fake_signal_wake_up()\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n```c:kernel/freezer.c\nstatic void fake_signal_wake_up(struct task_struct *p) \n{\n    unsigned long flags;\n\n    if (lock_task_sighand(p, &flags)) {\n        signal_wake_up(p, 0); \n        unlock_task_sighand(p, &flags);\n    }   \n}\n```\n\n\u307e\u305f\u3001signal_wake_up()\u306e\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n```c:include/linux/sched.h\nstatic inline void signal_wake_up(struct task_struct *t, bool resume)\n{      \n    signal_wake_up_state(t, resume ? TASK_WAKEKILL : 0);\n}\n```\n\n\u66f4\u306b\u7d9a\u3044\u3066signal_wake_up_state()\u3092\u898b\u307e\u3057\u3087\u3046\u3002\n\n```c:kernel/signal.c\n/*\n * Tell a process that it has a new active signal..\n *\n * NOTE! we rely on the previous spin_lock to\n * lock interrupts for us! We can only be called with\n * \"siglock\" held, and the local interrupt must\n * have been disabled when that got acquired!\n *\n * No need to set need_resched since signal event passing\n * goes through ->blocked\n */\nvoid signal_wake_up_state(struct task_struct *t, unsigned int state)\n{\n    set_tsk_thread_flag(t, TIF_SIGPENDING);\n```\n\n\u5b9f\u306f\u3001\u3053\u3053\u304c\u5f8c\u306b\u91cd\u8981\u306b\u306a\u308a\u307e\u3059\u3002**\u30b7\u30b0\u30ca\u30eb\u3092\u9001\u51fa\u3057\u3066\u306f\u3044\u307e\u305b\u3093\u304c\u3001\u30bf\u30b9\u30af\u69cb\u9020\u4f53\u306b\u300c\u30da\u30f3\u30c7\u30a3\u30f3\u30b0\u3055\u308c\u3066\u3044\u308b\u30b7\u30b0\u30ca\u30eb\u304c\u3042\u308b\u300d\u3068\u3044\u3046\u5370\u3092\u3064\u3051\u3066\u304a\u304d\u307e\u3059\u3002**\n\u3061\u306a\u307f\u306b\u3001TIF_SIGPENDING\u306e\u300cTIF\u300d\u306fThread InFormation\u300d\u306e\u7565\u3089\u3057\u3044\u3067\u3059\u3002\u3053\u306e\u5024\u306fCPU\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u4f9d\u5b58(arch)\u306e\u4e0b\u306b\u5b9a\u7fa9\u304c\u3042\u308b\u304c\u3001\u540d\u524d\u306e\u901a\u308a\u300cSignal Pending\u300d\u306e\u3088\u3046\u3067\u3059\u3002\nsignal_wake_up_state()\u306e\u7d9a\u304d\u3092\u8aad\u307f\u307e\u3059\u3002\n\n```c:kernel/signal.c\n    /*\n     * TASK_WAKEKILL also means wake it up in the stopped/traced/killable\n     * case. We don't check t->state here because there is a race with it\n     * executing another processor and just now entering stopped state.\n     * By using wake_up_state, we ensure the process will wake up and\n     * handle its death signal.\n     */\n    if (!wake_up_state(t, state | TASK_INTERRUPTIBLE))\n        kick_process(t);\n}\n```\n\nwake_up_state()\u306e\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\u5358\u306btry_to_wake_up()\u3092\u547c\u3093\u3067\u3044\u307e\u3059\u3002\n\n```c:kernel/sched/core.c\nint wake_up_state(struct task_struct *p, unsigned int state)\n{\n    return try_to_wake_up(p, state, 0);\n}\n```\n\n\u3053\u3053\u307e\u3067\u306e\u3068\u3053\u308d\u3067\u3001state\u306b\u6e21\u3055\u308c\u308b\u5024\u306fTASK_INTERRUPTIBLE\u3067\u3059\u3002\n\u4ee5\u4e0b\u306e\u5b9f\u88c5\u3092\u8aad\u307f\u307e\u3059\u304c\u3001\u5358\u306b\u30b9\u30ec\u30c3\u30c9\u3092\u8d77\u3053\u3059(\u30b9\u30ec\u30c3\u30c9\u3092\u5b9f\u884c\u53ef\u80fd\u72b6\u614b\u306b\u3059\u308b)\u3088\u3046\u306a\u5b9f\u88c5\u306b\u898b\u3048\u307e\u3059\u3002\u3053\u3053\u307e\u3067\u306e\u3068\u3053\u308d\u3067\u8ab0\u3082freezing\u306b\u3057\u3066\u3044\u306a\u3044\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002\n\n```c:kernel/sched/core.c\n/**\n * try_to_wake_up - wake up a thread\n * @p: the thread to be awakened\n * @state: the mask of task states that can be woken\n * @wake_flags: wake modifier flags (WF_*)\n *\n * Put it on the run-queue if it's not already there. The \"current\"\n * thread is always on the run-queue (except when the actual\n * re-schedule is in progress), and as such you're allowed to do\n * the simpler \"current->state = TASK_RUNNING\" to mark yourself\n * runnable without the overhead of this.\n *\n * Return: %true if @p was woken up, %false if it was already running.\n * or @state didn't match @p's state.\n */\nstatic int\ntry_to_wake_up(struct task_struct *p, unsigned int state, int wake_flags)\n{\n/* \u7565 */\n    cpu = task_cpu(p);\n\n    if (p->on_rq && ttwu_remote(p, wake_flags))\n        goto stat;\n\n/* \u7565 */\n\n    ttwu_queue(p, cpu);\nstat:\n    ttwu_stat(p, cpu, wake_flags);\nout:\n    raw_spin_unlock_irqrestore(&p->pi_lock, flags);\n\n    return success;\n}\n```\n\n\u4e00\u4f53\u8ab0\u304c\u30b9\u30ec\u30c3\u30c9\u3092freezing\u306b\u3057\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\u3002\n\u305d\u308c\u306f\u6b21\u56de\u3002\n\n\n", "tags": ["Linux", "kernel", "kernelvm"]}