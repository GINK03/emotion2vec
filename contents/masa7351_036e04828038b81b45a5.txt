{"tags": ["Swift", "redux", "RxSwift"], "context": "\n\n\u80cc\u666f\n\u6700\u8fd1\u500b\u4eba\u7684\u306a\u8208\u5473\u672c\u4f4d\u3067\u306b\u3001React+Redux\u306e\u5b66\u7fd2\u3092\u306f\u3058\u3081\u3066\u3044\u307e\u3057\u305f\u3002\nSwift\u3082Rx\u5316\u306e\u6ce2\u304c\u672c\u683c\u8972\u6765\u3057\u3066\u305d\u3046\u306a\uff08\u3057\u305f\uff1f\uff09\u611f\u899a\u3092\u808c\u3067\u611f\u3058\u305f\u306e\u3067\u304a\u52c9\u5f37\u3092\u958b\u59cb\u3057\u307e\u3057\u305f\u3002\n\u305d\u306e\u4e2d\u3067\u3001Rx\u306f\u96e3\u3057\u3044\u306e\u3060\u3051\u3069\u3082Redux\u7d4c\u9a13\u8005\u306b\u308f\u304b\u308a\u3084\u3059\u3044sample\u30bd\u30fc\u30b9\u3092\u898b\u3064\u3051\u305f\u3068\u3044\u3046\u304a\u8a71\u3067\u3059\u3002\n\u30e1\u30e2\u66f8\u304d\u3068\u3057\u3066\u6b8b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u30e2\u30c1\u30d9\u30fc\u30b7\u30e7\u30f3\nrx\u306e\u52c9\u5f37\u306e\u305f\u3081\u3001\u81ea\u5206\u306e\u7406\u89e3\u3092\u9ad8\u3081\u308b\u70ba\u306b\u8a18\u4e8b\u306b\u307e\u3068\u3081\u308b\u3002\n\u3084\u3063\u305f\u3053\u3068\u3092\u5fd8\u308c\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u3002\n\nRedux\u306e\u8a2d\u8a08\u3092\u3056\u3063\u304f\u308a\u6574\u7406\u3057\u3066\u307f\u308b\n\nstate\u3068\u3044\u3046\u72b6\u614b\u3092\u4e2d\u5fc3\u306b\u3057\u305f\u8a2d\u8a08\u3067\u3042\u308b\nstate\u306fAction\u3068\u524dstate(preState\u3068\u547c\u3076\uff09\u306b\u3088\u308astate\u3092\u9069\u5207\u306a\u3082\u306e\u306b\u5909\u66f4\u3059\u308b\u2190\u3053\u308c\u304cReducer\u306e\u5f79\u5272\ncomponent\uff08\u753b\u9762\u306e\u30d1\u30fc\u30c4\uff09\u304cstate\u306e\u4e2d\u306e\u8981\u7d20\u3092\u53c2\u7167\u3057\u3066\u3044\u3066\u3001\u305d\u306e\u5024\u304c\u66f8\u304d\u63db\u308f\u3063\u305f\u3089\u52dd\u624b\u306b\uff08\uff1f\uff09Virtual Dom\u306e\u5185\u5bb9\u3092\u66f8\u304d\u63db\u3048\u308b\n\n\u500b\u4eba\u7684\u306b\u306f\u3053\u306estate\u3068action\u306e\u95a2\u4fc2\uff06state\u3092\u53c2\u7167\u3059\u308bcomponent\u306e\u3064\u306a\u304c\u308a\u304c\u3001\u3059\u3054\u304f\u30cf\u30de\u308a\u307e\u3057\u305f\u3002\n\u307e\u305f\u3001state\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u5fc5\u305aaction\u3092\u4ecb\u3055\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u306e\u3067\u3001\u305d\u308c\u3082\u30b7\u30f3\u30d7\u30eb\u3067\u3059\u3054\u304f\u30af\u30ea\u30a2\u3067\u3057\u305f\u3002\n\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3067\u3044\u305f\u308b\u3068\u3053\u308d\u3067\u66f8\u304d\u63db\u3048\u3089\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u30ab\u30aa\u30b9\u308a\u305d\u3046\u3067\u3001\nReducer\u3092\u898b\u308c\u3070\u4f55\u304c\u539f\u56e0\u3067State\u304c\u5909\u308f\u3063\u305f\u304b\u304c\u306f\u3063\u304d\u308a\u3059\u308b\u306e\u3067\u8ffd\u3044\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nRx\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u8aad\u307f\u89e3\u304f\n\n\u3056\u3063\u304f\u308a\u69cb\u6210\n3/14\u73fe\u5728\u3001Calculator\u3068\u3044\u3046\u30b5\u30f3\u30d7\u30eb\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u96fb\u5353\u30a2\u30d7\u30ea\u3092\u984c\u6750\u306b\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\n\nCalculatorViewController\u3000\uff1a\u30e1\u30a4\u30f3\u306e\u51e6\u7406\u90e8\u5206\u3067\u3059\u3002\nCalculatorState\u3000\uff1aRedux\u306estate\u306b\u5f53\u305f\u308b\u90e8\u5206\u3067\u3059\u3002\nCalculatorAction\u3000\uff1aRedux\u306eAction\u306b\u5f53\u305f\u308b\u90e8\u5206\u3067\u3059\u3002\nOperator\u3000\uff1a Action\u3067\u5229\u7528\u3055\u308c\u308b\u3082\u306e\uff08Action\u306e\u51e6\u7406\u3092\u4e00\u90e8\u5171\u901a\u5316\u3057\u305f\u3044\u305f\u3081\u306b\u7528\u610f\u3057\u305f\u3082\u306e\uff09\n\n\nCalculatorState\nRedux\u3067\u8a00\u3046\u3068\u3053\u308d\u306eReducer\u306e\u90e8\u5206\n// redux\u306estate\u306e\u30c7\u30fc\u30bf\u5ba3\u8a00\u90e8\u5206\u3067\u3059\u306d\u3002\n// state\u306f\u3053\u306e\u69cb\u9020\u4f53\u3068\u3057\u3066\u4fdd\u6301\u3057\u307e\u3059\u3002\nstruct CalculatorState {\n    // \u521d\u671f\u6642\u3001\u96fb\u5353\u30ea\u30bb\u30c3\u30c8\u6642\u306b\u5229\u7528\u3002\n    static let CLEAR_STATE = CalculatorState(previousNumber: nil, action: .clear, currentNumber: \"0\", inScreen: \"0\", replace: true)\n\n    let previousNumber: String!\n    let action: Action\n    let currentNumber: String!\n    let inScreen: String\n    let replace: Bool\n}\n\n// Redux\u306eReducer\u90e8\u5206\u3067\u3059\u306d\u3002\n// redux\u306ereducer\u306fstate\u3068action\u3092\u5f15\u6570\u306b\u51e6\u7406\u3057\u307e\u3059\u304c\n// \u3053\u3061\u3089\u306fstruct\u306efunction\u306a\u306e\u3067state\u306f\u4fdd\u6301\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u5f15\u6570\u6e21\u3057\u3057\u3066\u304a\u308a\u307e\u305b\u3093\u3002\nextension CalculatorState {\n    // action\u3092\u5f15\u6570\u306b\u3001pre state\u3068action\u3067state\uff08CalculatorState)\u3092\u8fd4\u5374\n    func tranformState(_ x: Action) -> CalculatorState {\n        switch x {\n        case .clear:\n            return CalculatorState.CLEAR_STATE\n        case .addNumber(let c):\n            return addNumber(c)\n        case .addDot:\n            return self.addDot()\n        case .changeSign:\n            let d = \"\\(-Double(self.inScreen)!)\"\n            return CalculatorState(previousNumber: previousNumber, action: action, currentNumber: d, inScreen: d, replace: true)\n        case .percent:\n            let d = \"\\(Double(self.inScreen)!/100)\"\n            return CalculatorState(previousNumber: previousNumber, action: action, currentNumber: d, inScreen: d, replace: true)\n        case .operation(let o):\n            return performOperation(o)\n        case .equal:\n            return performEqual()\n        }\n    }\n\n    // \u6570\u5b57\u3092\u5165\u529b\u3057\u305f\u3068\u304d\u306b\u547c\u3070\u308c\u308b\u51e6\u7406\n    func addNumber(_ char: Character) -> CalculatorState {\n        let cn = currentNumber == nil || replace ? String(char) : inScreen + String(char)\n        // \u69cb\u9020\u4f53\u306e\u518d\u69cb\u7bc9\u3057\u3066\u307e\u3059\u306d\u3002\u69cb\u9020\u4f53\u306e\u4e2d\u306b\u3042\u308bfunction\u3060\u304b\u3089\u3001\n        // \u5909\u66f4\u3057\u306a\u3044state\u306f\u3001previousNumber\u3084\u3001action\u306f\u305d\u306e\u307e\u307e\u8a2d\u5b9a\u3057\u3066\u3001\n        // cn\u306a\u3069\u306f\u3001\u4e0a\u3067\u51e6\u7406\u3057\u305f\u3082\u306e\u3092\u8a2d\u5b9a\n        // \u30c7\u30fc\u30bf\u304c\u69cb\u9020\u4f53\u3067\u3042\u3063\u3066\u4f5c\u308a\u76f4\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3067\u3001\n        // preState\u3068currentState\u304c\u5225\u7269\u306a\u306e\u3082redux\u307d\u3044\u3067\u3059\u306d\n        return CalculatorState(previousNumber: previousNumber, action: action, currentNumber: cn, inScreen: cn, replace: false)\n    }\n\n    (\u7701\u7565\uff09\n\n\n\nAction\nredux\u306eAction\u3082\u3059\u3054\u304f\u30b7\u30f3\u30d7\u30eb\u3067\u3057\u305f\u304c\u3001\u305d\u308c\u306b\u8f2a\u3092\u304b\u3051\u3066\u3053\u3061\u3089\u306f\u7c21\u7d20\u3067\u3059\u306d\u3002\n\u3069\u3093\u306aAction\uff08\u5b9f\u4f53\u306f\u306a\u3044\uff09\u3092\u3084\u308b\u304b\u3060\u3051\u66f8\u3044\u3066\u3044\u308b\u306e\u306f\u3059\u3054\u304f\u308f\u304b\u308a\u3084\u3059\u3044\u3002\n\u96fb\u5353\u306f\u3082\u3063\u3068\u30dc\u30bf\u30f3\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3001\ncase operation(Operator)\n\u3067(+, -, \u00d7, / )\u306e\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u5171\u901a\u5316\u3057\u3066\u3044\u308b\u306e\u3067\u3001Action\u3068\u3057\u3066\u306f\u3053\u308c\u3060\u3051\u3067\u3059\u3002\nenum Action {\n    case clear\n    case changeSign\n    case percent\n    case operation(Operator)\n    case equal\n    case addNumber(Character)\n    case addDot\n}\n\nenum Operator {\n    case addition\n    case subtraction\n    case multiplication\n    case division\n}\n\nextension Operator {\n    var sign: String {\n        switch self {\n        case .addition:         return \"+\"\n        case .subtraction:      return \"-\"\n        case .multiplication:   return \"\u00d7\"\n        case .division:         return \"/\"\n        }\n    }\n\n    var perform: (Double, Double) -> Double {\n        switch self {\n        case .addition:         return (+)\n        case .subtraction:      return (-)\n        case .multiplication:   return (*)\n        case .division:         return (/)\n        }\n    }\n}\n\n\nCalculatorViewController\nRedux\u306e\u6a5f\u69cb\u3092\u69cb\u7bc9\u3057\u3066\u3044\u308b\u30e1\u30a4\u30f3\u90e8\u5206\u3067\u3059\u3002\n    override func viewDidLoad() {\n        let commands:[Observable<Action>] = [\n            allClearButton.rx.tap.map { _ in .clear },\n\n            changeSignButton.rx.tap.map { _ in .changeSign },\n            percentButton.rx.tap.map { _ in .percent },\n\n            divideButton.rx.tap.map { _ in .operation(.division) },\n            multiplyButton.rx.tap.map { _ in .operation(.multiplication) },\n            minusButton.rx.tap.map { _ in .operation(.subtraction) },\n            plusButton.rx.tap.map { _ in .operation(.addition) },\n\n            equalButton.rx.tap.map { _ in .equal },\n\n            dotButton.rx.tap.map { _ in  .addDot },\n\n            zeroButton.rx.tap.map { _ in .addNumber(\"0\") },\n            oneButton.rx.tap.map { _ in .addNumber(\"1\") },\n            twoButton.rx.tap.map { _ in .addNumber(\"2\") },\n            threeButton.rx.tap.map { _ in .addNumber(\"3\") },\n            fourButton.rx.tap.map { _ in .addNumber(\"4\") },\n            fiveButton.rx.tap.map { _ in .addNumber(\"5\") },\n            sixButton.rx.tap.map { _ in .addNumber(\"6\") },\n            sevenButton.rx.tap.map { _ in .addNumber(\"7\") },\n            eightButton.rx.tap.map { _ in .addNumber(\"8\") },\n            nineButton.rx.tap.map { _ in .addNumber(\"9\") }\n        ]\n\n        Observable.from(commands)\n            .merge()\n            .scan(CalculatorState.CLEAR_STATE) { previous, action in\n                previous.tranformState(action)\n            }\n            .debug(\"calculator state\")\n            .subscribe(onNext: { [weak self] calState in\n                self?.resultLabel.text = self?.formatResult(calState.inScreen)\n\n                if case let .operation(operation) = calState.action {\n                    self?.lastSignLabel.text = operation.sign\n                } else {\n                    self?.lastSignLabel.text = \"\"\n                }\n            })\n            .disposed(by: disposeBag)\n    }\n\n    func formatResult(_ result: String) -> String {\n        if result.hasSuffix(\".0\") {\n            return result.substring(to: result.index(result.endIndex, offsetBy: -2))\n        } else {\n            return result\n        }\n    }\n\n\u9577\u3044\u306e\u3067\u5206\u5272\u3057\u306a\u304c\u3089\u307e\u3068\u3081\u3066\u307f\u307e\u3059\n\nDispatch\uff08Action\uff09\u90e8\u5206\nredux\u3067\u8a00\u3046\u3068\u3053\u308d\u306e\u3001onClick\u304b\u3089dispatch(Action)\u3092\u547c\u3073\u51fa\u3059\u90e8\u5206\n\u3092\u307e\u3068\u3081\u3066\u5ba3\u8a00\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u3067\u3059\u304b\u306d\u3002\nswift\u3067\u306f\u3001@IBOutlet\u306eAction\u3092\u307e\u3068\u3081\u3066\u4e00\u7b87\u6240\u3067\u66f8\u3051\u308b\u306e\u306f\u3059\u3054\u304f\u3059\u3063\u304d\u308a\u3067\u308f\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002\nredux\u3082\u3053\u306e\u3088\u3046\u306b\u66f8\u3051\u308b\u3068\u7d20\u6575\u3060\u306a\u3002\uff08\u4f59\u8ac7\uff09\n\u96fb\u5353\u306e\u5404\u30dc\u30bf\u30f3\u3092\u62bc\u4e0b\u3057\u305f\u3068\u304d\u306e\u30a4\u30d9\u30f3\u30c8\u3092Action\u306b\u7f6e\u304d\u63db\u3048\u3066\u3044\u308b\u90e8\u5206\u3067\u3059\u306d\u3002\nmap\u95a2\u6570\u304c\u305d\u308c\u305e\u308c\u306e\u30dc\u30bf\u30f3(rx.tap)\u3092Action\u306b\u5909\u63db\u3057\u3066\u307e\u3059\u3002\n   let commands:[Observable<Action>] = [\n            allClearButton.rx.tap.map { _ in .clear },\n\n            changeSignButton.rx.tap.map { _ in .changeSign },\n            percentButton.rx.tap.map { _ in .percent },\n\n            divideButton.rx.tap.map { _ in .operation(.division) },\n            multiplyButton.rx.tap.map { _ in .operation(.multiplication) },\n            minusButton.rx.tap.map { _ in .operation(.subtraction) },\n            plusButton.rx.tap.map { _ in .operation(.addition) },\n\n            equalButton.rx.tap.map { _ in .equal },\n\n            dotButton.rx.tap.map { _ in  .addDot },\n\n            zeroButton.rx.tap.map { _ in .addNumber(\"0\") },\n            oneButton.rx.tap.map { _ in .addNumber(\"1\") },\n            twoButton.rx.tap.map { _ in .addNumber(\"2\") },\n            threeButton.rx.tap.map { _ in .addNumber(\"3\") },\n            fourButton.rx.tap.map { _ in .addNumber(\"4\") },\n            fiveButton.rx.tap.map { _ in .addNumber(\"5\") },\n            sixButton.rx.tap.map { _ in .addNumber(\"6\") },\n            sevenButton.rx.tap.map { _ in .addNumber(\"7\") },\n            eightButton.rx.tap.map { _ in .addNumber(\"8\") },\n            nineButton.rx.tap.map { _ in .addNumber(\"9\") }\n        ]\n\n\n\n\u5358\u4e00\u306eObservable\u306b\u3057\u3066\u3044\u308b\n\n        // \u4e0a\u306f\u914d\u5217\u306a\u306e\u3067\u3001\u914d\u5217\u3092Observable\u3068\u3057\u3066\u53d7\u3051\u53d6\u308b\u306e\u306b.from(commands)\n        // \u5358\u4e00\u9805\u76ee\u306a\u3089just\u3001\u8907\u6570\u8981\u7d20\u306a\u3089of\u3067\u3059\u306d\u3002\n        Observable.from(commands)\n            // merge\u3092\u4f7f\u3063\u3066\u307e\u3059\u306d\u3002\u3053\u308c\u306f\u3001\u30aa\u30d5\u30a3\u30b7\u30e3\u30eb\u3092\u307f\u308b\u3068\u8907\u6570\u306eObserbale sequences\u3053\u3053\u3067\u306f\u914d\u5217\u306e\u8981\u7d20\u3092Single Obaservable\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\n            .merge()\n\n\u3061\u306a\u307f\u306bmerge\u3067\u5358\u4e00\u306eObservable\u306b\u3057\u3066\u3044\u308b\u306e\u306f\u3001\u4f55\u6545\u3060\u308d\u3046\u3068\u8003\u3048\u307e\u3057\u305f\u304c\u3001\u500b\u4eba\u7684\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u7406\u89e3\u3057\u307e\u3057\u305f\u3002\n\n\u96fb\u5353\u306f\u540c\u6642\u62bc\u3057\u304c\u306a\u3044\u3002\uff08\u305d\u306e\u3088\u3046\u306b\u6271\u3044\u305f\u3044\u305f\u3081\uff1f\uff09\nstate\u306e\u72b6\u614b\u3092\u4e00\u5143\u5316\u3059\u308b\u70ba\n\u4e00\u3064\u306estream\u3067\u8a18\u8ff0\u3057\u305f\u304b\u3063\u305f\u70ba\n\n\nRedux\u306e\u6a5f\u69cb\u3092\u4f5c\u308a\u51fa\u3057\u3066\u3044\u308b\u90e8\u5206\uff08Scan\uff09\n\u4eca\u56de\u8a18\u4e8b\u3068\u3057\u3066\u307e\u3068\u3081\u308b\u304d\u3063\u304b\u3051\u306b\u306a\u3063\u305f\u51e6\u7406\u90e8\u5206\u3002\nscan\u3066\u306a\u3093\u3060\u308d\u3046\u3068\u8abf\u3079\u3066\u3044\u305f\u3089\u3001playground\u306b\u308f\u304b\u308a\u3084\u3059\u3044\u30b5\u30f3\u30d7\u30eb\u304c\u3042\u308a\u307e\u3057\u305f\u306e\u3067\n\u4ee5\u4e0b\u306b\u8a18\u8f09\u3057\u307e\u3059\u3002\n           .scan(CalculatorState.CLEAR_STATE) { previous, action in\n                previous.tranformState(action)\n            }\n\n\n\nScan (Playground\u3088\u308a\u8ee2\u6a5f\uff09\n\u30aa\u30d5\u30a3\u30b7\u30e3\u30eb\u3092\u8aad\u3080\u3068\u3001\u521d\u671f\u5024\u3092\u4f34\u3063\u3066\u3001\n\u5404Sequence\uff0810,100,1000\uff09\u3092\u5b9f\u884c\u3057\u3066\u3044\u304f\n\u30dd\u30a4\u30f3\u30c8\u306f\u3001\u524d\u306e\u7d50\u679c\u3092\u5f15\u304d\u7d99\u3044\u3067\u3001\u6b21\u306eSequece\u3092\u653e\u51fa(emit\uff09\u3059\u308b\u3002\n\u3060\u304b\u3089\u3001\n10 + 1 = 11 \u3092emit\n100 + 11(\u524d\u56de\u5024) = 111 \u3092emit\n1000 + 111 = 1111 \u3092emit\nObservable.of(10, 100, 1000)\n        // \u524d\u56deemit\u3057\u305f\u5024\u3053\u3053\u3067\u306f\u3001aggregateValue\u304c\u6b21\u306esequence\u3092emit\u3059\u308b\u3068\u304d\u306b\u6e21\u3055\u308c\u308b\n        .scan(1) { aggregateValue, newValue in\n            aggregateValue + newValue\n        }\n        .subscribe(onNext: { print($0) })\n        .disposed(by: disposeBag)\n\n// output\n11\n111\n1111\n\n\n\u5143\u306e\u30b5\u30f3\u30d7\u30eb\u306b\u623b\u308b\u3068\u3001\u306a\u308b\u307b\u3069scan\u306femit\u3059\u308b\u3060\u3051\u3067\u306f\u306a\u304f\n\u524d\u306e\u72b6\u614b\u3092\u5f15\u304d\u7d99\u304e\u6b21\u56de\u306eemit\u3059\u308b\u6027\u8cea\u304c\u3042\u308b\u304b\u3089\u3001\nredux\u306epreState\u3092\u4fdd\u6301\u3059\u308b\u4ed5\u7d44\u307f\u3092\u4f5c\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u308f\u3051\u306a\u3093\u3067\u3059\u306d\u3002\nplayground\u306escan\u3092\u898b\u305f\u3060\u3051\u3067\u306f\u3001\u305d\u3053\u307e\u3067\u306e\u6d3b\u7528\u65b9\u6cd5\u304c\u898b\u3044\u3060\u305b\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001\ncalculator\u306e\u30b5\u30f3\u30d7\u30eb\u306f\u3059\u3054\u304f\u6d3b\u7528\u65b9\u6cd5\u3092\u30a4\u30e1\u30fc\u30b8\u3055\u305b\u308b\u3082\u306e\u3067\u3057\u305f\u3002\n\nredux\u3067\u8a00\u3046\u3068\u3053\u308d\u306e\u3001component\u3068state\u3092\u95a2\u9023\u4ed8\u3051\u3057\u3066\u3044\u308b\u90e8\u5206\nscan\u304b\u3089emit\u3055\u308c\u305f\u3001calState\uff08state\uff09\u304c\u6e21\u3055\u308c\u3066\uff08\u8cfc\u8aad\u3055\u308c\uff09\u3066\u3001\n\u96fb\u5353\u306e\u8868\u793a\u306b\u53cd\u6620\u3055\u308c\u3066\u3044\u308b\u3002\nredux\u3067\u306fmapStateToProps\u3067state\u304b\u3089\u30c7\u30fc\u30bf\u3092\u629c\u304d\u51fa\u3057\u3066\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u6e21\u3057\u3057\u3066\u3001\nrender()\u306a\u308a\u3067\u7d50\u3073\u3064\u3051\u3066\u3044\u308b\u306e\u3092swift\u3060\u3068\u4e00\u7b87\u6240\u306b\u66f8\u3051\u308b\u306e\u306f\u697d\u3060\u306a\u3068\u5b9f\u611f\u3057\u307e\u3057\u305f\u3002\n            .subscribe(onNext: { [weak self] calState in\n                self?.resultLabel.text = self?.formatResult(calState.inScreen)\n\n                if case let .operation(operation) = calState.action {\n                    self?.lastSignLabel.text = operation.sign\n                } else {\n                    self?.lastSignLabel.text = \"\"\n                }\n            })\n            .disposed(by: disposeBag)\n\n\n\u6700\u5f8c\u306b\nredux\u3068\u304b\u5168\u7136\u95a2\u4fc2\u306a\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u8a00\u8a9e\u306e\u601d\u60f3\u304cRxSwift\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u3082\u898b\u3064\u3051\u3089\u308c\u305f\u306e\u3067\u3001\n\u6539\u3081\u3066\u3064\u306a\u304c\u3063\u3066\u308b\u306a\u3068\u5b9f\u611f\u3057\u307e\u3057\u305f\u3002\n\u52c9\u5f37\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n#\u80cc\u666f\n\n\u6700\u8fd1\u500b\u4eba\u7684\u306a\u8208\u5473\u672c\u4f4d\u3067\u306b\u3001React+Redux\u306e\u5b66\u7fd2\u3092\u306f\u3058\u3081\u3066\u3044\u307e\u3057\u305f\u3002\n\nSwift\u3082Rx\u5316\u306e\u6ce2\u304c\u672c\u683c\u8972\u6765\u3057\u3066\u305d\u3046\u306a\uff08\u3057\u305f\uff1f\uff09\u611f\u899a\u3092\u808c\u3067\u611f\u3058\u305f\u306e\u3067\u304a\u52c9\u5f37\u3092\u958b\u59cb\u3057\u307e\u3057\u305f\u3002\n\u305d\u306e\u4e2d\u3067\u3001Rx\u306f\u96e3\u3057\u3044\u306e\u3060\u3051\u3069\u3082Redux\u7d4c\u9a13\u8005\u306b\u308f\u304b\u308a\u3084\u3059\u3044sample\u30bd\u30fc\u30b9\u3092\u898b\u3064\u3051\u305f\u3068\u3044\u3046\u304a\u8a71\u3067\u3059\u3002\n\n\u30e1\u30e2\u66f8\u304d\u3068\u3057\u3066\u6b8b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n# \u30e2\u30c1\u30d9\u30fc\u30b7\u30e7\u30f3\n\nrx\u306e\u52c9\u5f37\u306e\u305f\u3081\u3001\u81ea\u5206\u306e\u7406\u89e3\u3092\u9ad8\u3081\u308b\u70ba\u306b\u8a18\u4e8b\u306b\u307e\u3068\u3081\u308b\u3002\n\u3084\u3063\u305f\u3053\u3068\u3092\u5fd8\u308c\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u3002\n\n# Redux\u306e\u8a2d\u8a08\u3092\u3056\u3063\u304f\u308a\u6574\u7406\u3057\u3066\u307f\u308b\n\n- state\u3068\u3044\u3046\u72b6\u614b\u3092\u4e2d\u5fc3\u306b\u3057\u305f\u8a2d\u8a08\u3067\u3042\u308b\n- state\u306fAction\u3068\u524dstate(preState\u3068\u547c\u3076\uff09\u306b\u3088\u308astate\u3092\u9069\u5207\u306a\u3082\u306e\u306b\u5909\u66f4\u3059\u308b\u2190\u3053\u308c\u304cReducer\u306e\u5f79\u5272\n- component\uff08\u753b\u9762\u306e\u30d1\u30fc\u30c4\uff09\u304cstate\u306e\u4e2d\u306e\u8981\u7d20\u3092\u53c2\u7167\u3057\u3066\u3044\u3066\u3001\u305d\u306e\u5024\u304c\u66f8\u304d\u63db\u308f\u3063\u305f\u3089\u52dd\u624b\u306b\uff08\uff1f\uff09Virtual Dom\u306e\u5185\u5bb9\u3092\u66f8\u304d\u63db\u3048\u308b\n\n\u500b\u4eba\u7684\u306b\u306f\u3053\u306estate\u3068action\u306e\u95a2\u4fc2\uff06state\u3092\u53c2\u7167\u3059\u308bcomponent\u306e\u3064\u306a\u304c\u308a\u304c\u3001\u3059\u3054\u304f\u30cf\u30de\u308a\u307e\u3057\u305f\u3002\n\n\u307e\u305f\u3001state\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u5fc5\u305aaction\u3092\u4ecb\u3055\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u306e\u3067\u3001\u305d\u308c\u3082\u30b7\u30f3\u30d7\u30eb\u3067\u3059\u3054\u304f\u30af\u30ea\u30a2\u3067\u3057\u305f\u3002\n\n\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3067\u3044\u305f\u308b\u3068\u3053\u308d\u3067\u66f8\u304d\u63db\u3048\u3089\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u30ab\u30aa\u30b9\u308a\u305d\u3046\u3067\u3001\nReducer\u3092\u898b\u308c\u3070\u4f55\u304c\u539f\u56e0\u3067State\u304c\u5909\u308f\u3063\u305f\u304b\u304c\u306f\u3063\u304d\u308a\u3059\u308b\u306e\u3067\u8ffd\u3044\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n# Rx\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u8aad\u307f\u89e3\u304f\n\n## \u3056\u3063\u304f\u308a\u69cb\u6210\n\n3/14\u73fe\u5728\u3001Calculator\u3068\u3044\u3046\u30b5\u30f3\u30d7\u30eb\u304c\u3042\u308a\u307e\u3059\u3002\n\n<img width=\"487\" alt=\"Calculator.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/45426/eb175704-a246-ad7d-79e5-e9dbfb1ea7d0.png\">\n\n\u96fb\u5353\u30a2\u30d7\u30ea\u3092\u984c\u6750\u306b\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\n\n- CalculatorViewController\u3000\uff1a\u30e1\u30a4\u30f3\u306e\u51e6\u7406\u90e8\u5206\u3067\u3059\u3002\n- CalculatorState\u3000\uff1aRedux\u306estate\u306b\u5f53\u305f\u308b\u90e8\u5206\u3067\u3059\u3002\n- CalculatorAction\u3000\uff1aRedux\u306eAction\u306b\u5f53\u305f\u308b\u90e8\u5206\u3067\u3059\u3002\n- Operator\u3000\uff1a Action\u3067\u5229\u7528\u3055\u308c\u308b\u3082\u306e\uff08Action\u306e\u51e6\u7406\u3092\u4e00\u90e8\u5171\u901a\u5316\u3057\u305f\u3044\u305f\u3081\u306b\u7528\u610f\u3057\u305f\u3082\u306e\uff09\n\n## CalculatorState\n\nRedux\u3067\u8a00\u3046\u3068\u3053\u308d\u306eReducer\u306e\u90e8\u5206\n\n```swift\n// redux\u306estate\u306e\u30c7\u30fc\u30bf\u5ba3\u8a00\u90e8\u5206\u3067\u3059\u306d\u3002\n// state\u306f\u3053\u306e\u69cb\u9020\u4f53\u3068\u3057\u3066\u4fdd\u6301\u3057\u307e\u3059\u3002\nstruct CalculatorState {\n    // \u521d\u671f\u6642\u3001\u96fb\u5353\u30ea\u30bb\u30c3\u30c8\u6642\u306b\u5229\u7528\u3002\n    static let CLEAR_STATE = CalculatorState(previousNumber: nil, action: .clear, currentNumber: \"0\", inScreen: \"0\", replace: true)\n\n    let previousNumber: String!\n    let action: Action\n    let currentNumber: String!\n    let inScreen: String\n    let replace: Bool\n}\n\n// Redux\u306eReducer\u90e8\u5206\u3067\u3059\u306d\u3002\n// redux\u306ereducer\u306fstate\u3068action\u3092\u5f15\u6570\u306b\u51e6\u7406\u3057\u307e\u3059\u304c\n// \u3053\u3061\u3089\u306fstruct\u306efunction\u306a\u306e\u3067state\u306f\u4fdd\u6301\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u5f15\u6570\u6e21\u3057\u3057\u3066\u304a\u308a\u307e\u305b\u3093\u3002\nextension CalculatorState {\n    // action\u3092\u5f15\u6570\u306b\u3001pre state\u3068action\u3067state\uff08CalculatorState)\u3092\u8fd4\u5374\n    func tranformState(_ x: Action) -> CalculatorState {\n        switch x {\n        case .clear:\n            return CalculatorState.CLEAR_STATE\n        case .addNumber(let c):\n            return addNumber(c)\n        case .addDot:\n            return self.addDot()\n        case .changeSign:\n            let d = \"\\(-Double(self.inScreen)!)\"\n            return CalculatorState(previousNumber: previousNumber, action: action, currentNumber: d, inScreen: d, replace: true)\n        case .percent:\n            let d = \"\\(Double(self.inScreen)!/100)\"\n            return CalculatorState(previousNumber: previousNumber, action: action, currentNumber: d, inScreen: d, replace: true)\n        case .operation(let o):\n            return performOperation(o)\n        case .equal:\n            return performEqual()\n        }\n    }\n\n    // \u6570\u5b57\u3092\u5165\u529b\u3057\u305f\u3068\u304d\u306b\u547c\u3070\u308c\u308b\u51e6\u7406\n    func addNumber(_ char: Character) -> CalculatorState {\n        let cn = currentNumber == nil || replace ? String(char) : inScreen + String(char)\n        // \u69cb\u9020\u4f53\u306e\u518d\u69cb\u7bc9\u3057\u3066\u307e\u3059\u306d\u3002\u69cb\u9020\u4f53\u306e\u4e2d\u306b\u3042\u308bfunction\u3060\u304b\u3089\u3001\n        // \u5909\u66f4\u3057\u306a\u3044state\u306f\u3001previousNumber\u3084\u3001action\u306f\u305d\u306e\u307e\u307e\u8a2d\u5b9a\u3057\u3066\u3001\n        // cn\u306a\u3069\u306f\u3001\u4e0a\u3067\u51e6\u7406\u3057\u305f\u3082\u306e\u3092\u8a2d\u5b9a\n        // \u30c7\u30fc\u30bf\u304c\u69cb\u9020\u4f53\u3067\u3042\u3063\u3066\u4f5c\u308a\u76f4\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3067\u3001\n        // preState\u3068currentState\u304c\u5225\u7269\u306a\u306e\u3082redux\u307d\u3044\u3067\u3059\u306d\n        return CalculatorState(previousNumber: previousNumber, action: action, currentNumber: cn, inScreen: cn, replace: false)\n    }\n\n    (\u7701\u7565\uff09\n\n```\n\n## Action\n\nredux\u306eAction\u3082\u3059\u3054\u304f\u30b7\u30f3\u30d7\u30eb\u3067\u3057\u305f\u304c\u3001\u305d\u308c\u306b\u8f2a\u3092\u304b\u3051\u3066\u3053\u3061\u3089\u306f\u7c21\u7d20\u3067\u3059\u306d\u3002\n\u3069\u3093\u306aAction\uff08\u5b9f\u4f53\u306f\u306a\u3044\uff09\u3092\u3084\u308b\u304b\u3060\u3051\u66f8\u3044\u3066\u3044\u308b\u306e\u306f\u3059\u3054\u304f\u308f\u304b\u308a\u3084\u3059\u3044\u3002\n\u96fb\u5353\u306f\u3082\u3063\u3068\u30dc\u30bf\u30f3\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3001\ncase operation(Operator)\n\u3067(+, -, \u00d7, / )\u306e\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u5171\u901a\u5316\u3057\u3066\u3044\u308b\u306e\u3067\u3001Action\u3068\u3057\u3066\u306f\u3053\u308c\u3060\u3051\u3067\u3059\u3002\n\n```swift\nenum Action {\n    case clear\n    case changeSign\n    case percent\n    case operation(Operator)\n    case equal\n    case addNumber(Character)\n    case addDot\n}\n```\n\n```swift\nenum Operator {\n    case addition\n    case subtraction\n    case multiplication\n    case division\n}\n\nextension Operator {\n    var sign: String {\n        switch self {\n        case .addition:         return \"+\"\n        case .subtraction:      return \"-\"\n        case .multiplication:   return \"\u00d7\"\n        case .division:         return \"/\"\n        }\n    }\n    \n    var perform: (Double, Double) -> Double {\n        switch self {\n        case .addition:         return (+)\n        case .subtraction:      return (-)\n        case .multiplication:   return (*)\n        case .division:         return (/)\n        }\n    }\n}\n```\n\n# CalculatorViewController\n\nRedux\u306e\u6a5f\u69cb\u3092\u69cb\u7bc9\u3057\u3066\u3044\u308b\u30e1\u30a4\u30f3\u90e8\u5206\u3067\u3059\u3002\n\n```swift\n    override func viewDidLoad() {\n        let commands:[Observable<Action>] = [\n            allClearButton.rx.tap.map { _ in .clear },\n            \n            changeSignButton.rx.tap.map { _ in .changeSign },\n            percentButton.rx.tap.map { _ in .percent },\n            \n            divideButton.rx.tap.map { _ in .operation(.division) },\n            multiplyButton.rx.tap.map { _ in .operation(.multiplication) },\n            minusButton.rx.tap.map { _ in .operation(.subtraction) },\n            plusButton.rx.tap.map { _ in .operation(.addition) },\n            \n            equalButton.rx.tap.map { _ in .equal },\n            \n            dotButton.rx.tap.map { _ in  .addDot },\n            \n            zeroButton.rx.tap.map { _ in .addNumber(\"0\") },\n            oneButton.rx.tap.map { _ in .addNumber(\"1\") },\n            twoButton.rx.tap.map { _ in .addNumber(\"2\") },\n            threeButton.rx.tap.map { _ in .addNumber(\"3\") },\n            fourButton.rx.tap.map { _ in .addNumber(\"4\") },\n            fiveButton.rx.tap.map { _ in .addNumber(\"5\") },\n            sixButton.rx.tap.map { _ in .addNumber(\"6\") },\n            sevenButton.rx.tap.map { _ in .addNumber(\"7\") },\n            eightButton.rx.tap.map { _ in .addNumber(\"8\") },\n            nineButton.rx.tap.map { _ in .addNumber(\"9\") }\n        ]\n        \n        Observable.from(commands)\n            .merge()\n            .scan(CalculatorState.CLEAR_STATE) { previous, action in\n                previous.tranformState(action)\n            }\n            .debug(\"calculator state\")\n            .subscribe(onNext: { [weak self] calState in\n                self?.resultLabel.text = self?.formatResult(calState.inScreen)\n                \n                if case let .operation(operation) = calState.action {\n                    self?.lastSignLabel.text = operation.sign\n                } else {\n                    self?.lastSignLabel.text = \"\"\n                }\n            })\n            .disposed(by: disposeBag)\n    }\n\n    func formatResult(_ result: String) -> String {\n        if result.hasSuffix(\".0\") {\n            return result.substring(to: result.index(result.endIndex, offsetBy: -2))\n        } else {\n            return result\n        }\n    }\n```\n\n\u9577\u3044\u306e\u3067\u5206\u5272\u3057\u306a\u304c\u3089\u307e\u3068\u3081\u3066\u307f\u307e\u3059\n\n### Dispatch\uff08Action\uff09\u90e8\u5206\n\nredux\u3067\u8a00\u3046\u3068\u3053\u308d\u306e\u3001onClick\u304b\u3089dispatch(Action)\u3092\u547c\u3073\u51fa\u3059\u90e8\u5206\n\u3092\u307e\u3068\u3081\u3066\u5ba3\u8a00\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u3067\u3059\u304b\u306d\u3002\nswift\u3067\u306f\u3001@IBOutlet\u306eAction\u3092\u307e\u3068\u3081\u3066\u4e00\u7b87\u6240\u3067\u66f8\u3051\u308b\u306e\u306f\u3059\u3054\u304f\u3059\u3063\u304d\u308a\u3067\u308f\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002\nredux\u3082\u3053\u306e\u3088\u3046\u306b\u66f8\u3051\u308b\u3068\u7d20\u6575\u3060\u306a\u3002\uff08\u4f59\u8ac7\uff09\n\n\u96fb\u5353\u306e\u5404\u30dc\u30bf\u30f3\u3092\u62bc\u4e0b\u3057\u305f\u3068\u304d\u306e\u30a4\u30d9\u30f3\u30c8\u3092Action\u306b\u7f6e\u304d\u63db\u3048\u3066\u3044\u308b\u90e8\u5206\u3067\u3059\u306d\u3002\nmap\u95a2\u6570\u304c\u305d\u308c\u305e\u308c\u306e\u30dc\u30bf\u30f3(rx.tap)\u3092Action\u306b\u5909\u63db\u3057\u3066\u307e\u3059\u3002\n\n```swift\n   let commands:[Observable<Action>] = [\n            allClearButton.rx.tap.map { _ in .clear },\n            \n            changeSignButton.rx.tap.map { _ in .changeSign },\n            percentButton.rx.tap.map { _ in .percent },\n            \n            divideButton.rx.tap.map { _ in .operation(.division) },\n            multiplyButton.rx.tap.map { _ in .operation(.multiplication) },\n            minusButton.rx.tap.map { _ in .operation(.subtraction) },\n            plusButton.rx.tap.map { _ in .operation(.addition) },\n            \n            equalButton.rx.tap.map { _ in .equal },\n            \n            dotButton.rx.tap.map { _ in  .addDot },\n            \n            zeroButton.rx.tap.map { _ in .addNumber(\"0\") },\n            oneButton.rx.tap.map { _ in .addNumber(\"1\") },\n            twoButton.rx.tap.map { _ in .addNumber(\"2\") },\n            threeButton.rx.tap.map { _ in .addNumber(\"3\") },\n            fourButton.rx.tap.map { _ in .addNumber(\"4\") },\n            fiveButton.rx.tap.map { _ in .addNumber(\"5\") },\n            sixButton.rx.tap.map { _ in .addNumber(\"6\") },\n            sevenButton.rx.tap.map { _ in .addNumber(\"7\") },\n            eightButton.rx.tap.map { _ in .addNumber(\"8\") },\n            nineButton.rx.tap.map { _ in .addNumber(\"9\") }\n        ]\n\n```\n\n### \u5358\u4e00\u306eObservable\u306b\u3057\u3066\u3044\u308b\n\n```swift\n\n        // \u4e0a\u306f\u914d\u5217\u306a\u306e\u3067\u3001\u914d\u5217\u3092Observable\u3068\u3057\u3066\u53d7\u3051\u53d6\u308b\u306e\u306b.from(commands)\n        // \u5358\u4e00\u9805\u76ee\u306a\u3089just\u3001\u8907\u6570\u8981\u7d20\u306a\u3089of\u3067\u3059\u306d\u3002\n        Observable.from(commands)\n            // merge\u3092\u4f7f\u3063\u3066\u307e\u3059\u306d\u3002\u3053\u308c\u306f\u3001\u30aa\u30d5\u30a3\u30b7\u30e3\u30eb\u3092\u307f\u308b\u3068\u8907\u6570\u306eObserbale sequences\u3053\u3053\u3067\u306f\u914d\u5217\u306e\u8981\u7d20\u3092Single Obaservable\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\n            .merge()\n```\n\n\u3061\u306a\u307f\u306bmerge\u3067\u5358\u4e00\u306eObservable\u306b\u3057\u3066\u3044\u308b\u306e\u306f\u3001\u4f55\u6545\u3060\u308d\u3046\u3068\u8003\u3048\u307e\u3057\u305f\u304c\u3001\u500b\u4eba\u7684\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u7406\u89e3\u3057\u307e\u3057\u305f\u3002\n\n- \u96fb\u5353\u306f\u540c\u6642\u62bc\u3057\u304c\u306a\u3044\u3002\uff08\u305d\u306e\u3088\u3046\u306b\u6271\u3044\u305f\u3044\u305f\u3081\uff1f\uff09\n- state\u306e\u72b6\u614b\u3092\u4e00\u5143\u5316\u3059\u308b\u70ba\n- \u4e00\u3064\u306estream\u3067\u8a18\u8ff0\u3057\u305f\u304b\u3063\u305f\u70ba\n\n### Redux\u306e\u6a5f\u69cb\u3092\u4f5c\u308a\u51fa\u3057\u3066\u3044\u308b\u90e8\u5206\uff08Scan\uff09\n\n\u4eca\u56de\u8a18\u4e8b\u3068\u3057\u3066\u307e\u3068\u3081\u308b\u304d\u3063\u304b\u3051\u306b\u306a\u3063\u305f\u51e6\u7406\u90e8\u5206\u3002\nscan\u3066\u306a\u3093\u3060\u308d\u3046\u3068\u8abf\u3079\u3066\u3044\u305f\u3089\u3001playground\u306b\u308f\u304b\u308a\u3084\u3059\u3044\u30b5\u30f3\u30d7\u30eb\u304c\u3042\u308a\u307e\u3057\u305f\u306e\u3067\n\u4ee5\u4e0b\u306b\u8a18\u8f09\u3057\u307e\u3059\u3002\n\n```swift\n           .scan(CalculatorState.CLEAR_STATE) { previous, action in\n                previous.tranformState(action)\n            }\n \n```\n\n### Scan (Playground\u3088\u308a\u8ee2\u6a5f\uff09\n\n\u30aa\u30d5\u30a3\u30b7\u30e3\u30eb\u3092\u8aad\u3080\u3068\u3001\u521d\u671f\u5024\u3092\u4f34\u3063\u3066\u3001\n\u5404Sequence\uff0810,100,1000\uff09\u3092\u5b9f\u884c\u3057\u3066\u3044\u304f\n\n\u30dd\u30a4\u30f3\u30c8\u306f\u3001\u524d\u306e\u7d50\u679c\u3092\u5f15\u304d\u7d99\u3044\u3067\u3001\u6b21\u306eSequece\u3092\u653e\u51fa(emit\uff09\u3059\u308b\u3002\n\n\u3060\u304b\u3089\u3001\n10 + 1 = 11 \u3092emit\n100 + 11(\u524d\u56de\u5024) = 111 \u3092emit\n1000 + 111 = 1111 \u3092emit\n\n```swift\nObservable.of(10, 100, 1000)\n        // \u524d\u56deemit\u3057\u305f\u5024\u3053\u3053\u3067\u306f\u3001aggregateValue\u304c\u6b21\u306esequence\u3092emit\u3059\u308b\u3068\u304d\u306b\u6e21\u3055\u308c\u308b\n        .scan(1) { aggregateValue, newValue in\n            aggregateValue + newValue\n        }\n        .subscribe(onNext: { print($0) })\n        .disposed(by: disposeBag)\n\n// output\n11\n111\n1111\n\n```\n\n\u5143\u306e\u30b5\u30f3\u30d7\u30eb\u306b\u623b\u308b\u3068\u3001\u306a\u308b\u307b\u3069scan\u306femit\u3059\u308b\u3060\u3051\u3067\u306f\u306a\u304f\n**\u524d\u306e\u72b6\u614b\u3092\u5f15\u304d\u7d99\u304e\u6b21\u56de\u306eemit\u3059\u308b\u6027\u8cea\u304c\u3042\u308b\u304b\u3089\u3001\nredux\u306epreState\u3092\u4fdd\u6301\u3059\u308b\u4ed5\u7d44\u307f\u3092\u4f5c\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u308f\u3051\u306a\u3093\u3067\u3059\u306d\u3002**\n\nplayground\u306escan\u3092\u898b\u305f\u3060\u3051\u3067\u306f\u3001\u305d\u3053\u307e\u3067\u306e\u6d3b\u7528\u65b9\u6cd5\u304c\u898b\u3044\u3060\u305b\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001\ncalculator\u306e\u30b5\u30f3\u30d7\u30eb\u306f\u3059\u3054\u304f\u6d3b\u7528\u65b9\u6cd5\u3092\u30a4\u30e1\u30fc\u30b8\u3055\u305b\u308b\u3082\u306e\u3067\u3057\u305f\u3002\n\n### redux\u3067\u8a00\u3046\u3068\u3053\u308d\u306e\u3001component\u3068state\u3092\u95a2\u9023\u4ed8\u3051\u3057\u3066\u3044\u308b\u90e8\u5206\n\nscan\u304b\u3089emit\u3055\u308c\u305f\u3001calState\uff08state\uff09\u304c\u6e21\u3055\u308c\u3066\uff08\u8cfc\u8aad\u3055\u308c\uff09\u3066\u3001\n\u96fb\u5353\u306e\u8868\u793a\u306b\u53cd\u6620\u3055\u308c\u3066\u3044\u308b\u3002\n\nredux\u3067\u306fmapStateToProps\u3067state\u304b\u3089\u30c7\u30fc\u30bf\u3092\u629c\u304d\u51fa\u3057\u3066\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u6e21\u3057\u3057\u3066\u3001\nrender()\u306a\u308a\u3067\u7d50\u3073\u3064\u3051\u3066\u3044\u308b\u306e\u3092swift\u3060\u3068\u4e00\u7b87\u6240\u306b\u66f8\u3051\u308b\u306e\u306f\u697d\u3060\u306a\u3068\u5b9f\u611f\u3057\u307e\u3057\u305f\u3002\n\n```\n            .subscribe(onNext: { [weak self] calState in\n                self?.resultLabel.text = self?.formatResult(calState.inScreen)\n                \n                if case let .operation(operation) = calState.action {\n                    self?.lastSignLabel.text = operation.sign\n                } else {\n                    self?.lastSignLabel.text = \"\"\n                }\n            })\n            .disposed(by: disposeBag)\n```\n\n### \u6700\u5f8c\u306b\n\nredux\u3068\u304b\u5168\u7136\u95a2\u4fc2\u306a\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u8a00\u8a9e\u306e\u601d\u60f3\u304cRxSwift\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u3082\u898b\u3064\u3051\u3089\u308c\u305f\u306e\u3067\u3001\n\u6539\u3081\u3066\u3064\u306a\u304c\u3063\u3066\u308b\u306a\u3068\u5b9f\u611f\u3057\u307e\u3057\u305f\u3002\n\u52c9\u5f37\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n"}