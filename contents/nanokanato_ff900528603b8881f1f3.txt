{"context": "\n\n\u306f\u3058\u3081\u306b\nGoogleVR\u306e\u30b5\u30f3\u30d7\u30eb\u306e\u30ab\u30fc\u30bd\u30eb(\u7126\u70b9)\u306e\u8272\u3092\u5909\u66f4\u304b\u3089\u59cb\u307e\u308bVR\u3067\u753b\u9762\u4e2d\u592e\u306b\u8868\u793a\u3055\u308c\u308b\u30ab\u30fc\u30bd\u30eb(Reticle)\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u3066\u3044\u304f\u30b7\u30ea\u30fc\u30ba?\u3067\u3059\u3002\n\u6700\u7d42\u7684\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u306b\u3057\u305f\u3044\u2026\n\n\u2191\u53c2\u8003\u30a4\u30e1\u30fc\u30b8\uff08HanGame,\u30c1\u30e7\u30b3\u30c3\u30c8\u30e9\u30f3\u30c9\u3088\u308a\uff09\n\u524d\u56de\u3001\u3068\u308a\u3042\u3048\u305a\u30ab\u30fc\u30bd\u30eb\u3092\u8868\u793a\u3057\u3066\u3044\u308bGameObject\u3068Script\u3092\u7279\u5b9a\u3057\u8272\u306e\u5909\u66f4\u3060\u3051\u884c\u3044\u307e\u3057\u305f\u306e\u3067\u3001\u4eca\u56de\u306fScript\u306e\u4e2d\u8eab\u3092\u628a\u63e1\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30b3\u30e1\u30f3\u30c8\u3092\u8d85\u8ffd\u52a0\nReticle\u306b\u8ffd\u52a0\u3055\u308c\u3066\u3044\u308bScript\u3001CvrReticle.cs\u306b\u3066\u8868\u793a\u306e\u4ed5\u7d44\u307f\u304c\u66f8\u304b\u308c\u3066\u3044\u308b\u3002\n\u3059\u3054\u3044\u4eba\u306f\u7d76\u5bfe\u3084\u3089\u306a\u3044\u3060\u308d\u3046\u304c\u30bd\u30fc\u30b9\u306b\u81ea\u5206\u306f\u30b3\u30e1\u30f3\u30c8\u3092\u66f8\u304d\u307e\u304f\u308b\u2193\n\u3053\u308c\u3067\u7406\u89e3\u3057\u305f\u6c17\u5206\u306b\u306a\u3063\u3066\u3044\u308b\u3046\u3061\u306b\u3044\u3064\u306e\u9593\u306b\u304b\u7406\u89e3\u3057\u3066\u305f\u308a\u5b9f\u884c\u3057\u3066\u305f\u3089\u52d8\u9055\u3044\u3057\u3066\u305f\u3053\u3068\u306b\u6c17\u4ed8\u304f\u2026\n\uff08\u4ee5\u4e0b\u30b3\u30fc\u30c9\u306fGoogleVR\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5165\u3063\u3066\u3044\u308bGoogle\u306e\u30bd\u30fc\u30b9\u3067\u3059\u3002\uff09\n\nGvrReticle.cs\n    using UnityEngine;\n\n    //\u30e6\u30fc\u30b6\u30fc\u304c\u6ce8\u76ee\u3057\u3066\u3044\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5186\u5f62\u306e\u7126\u70b9\u3092\u63cf\u753b\u3057\u307e\u3059\u3002\n    /// Draws a circular reticle in front of any object that the user gazes at.\n    //\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u9078\u629e\u53ef\u80fd\u3067\u3042\u308c\u3070\u5186\u304c\u62e1\u5f35\u3057\u307e\u3059\u3002\n    /// The circle dilates if the object is clickable.\n    [AddComponentMenu(\"GoogleVR/UI/GvrReticle\")]\n    [RequireComponent(typeof(Renderer))]\n\n    /************************************************\n     * GvrReticle : \u30ab\u30fc\u30bd\u30eb\u306e\u7126\u70b9\u30af\u30e9\u30b9\n     ************************************************/\n    public class GvrReticle : MonoBehaviour, IGvrGazePointer {\n        //\u7126\u70b9\u306e\u5186\u3092\u4f5c\u308b\u30bb\u30b0\u30e1\u30f3\u30c8(\u8981\u7d20?)\u6570\u3000\u203b\u591a\u5206\u3053\u308c\u304c\u591a\u3044\u65b9\u304c\u9ad8\u753b\u8cea?\n        /// Number of segments making the reticle circle.\n        public int reticleSegments = 20;\n\n        //\u7126\u70b9\u304c\u5927\u304d\u304f\u306a\u308b\u901f\u5ea6(\u5927\u304d\u3044\u307b\u3069\u65e9\u304f,\u5c0f\u3055\u3044\u307b\u3069\u9045\u304f\u306a\u308b)\n        /// Growth speed multiplier for the reticle.\n        public float reticleGrowthSpeed = 8.0f;\n\n        /// Private members\n        private Material materialComp; //\u7126\u70b9\u3068\u3057\u3066\u8868\u793a\u3059\u308b\u30de\u30c6\u30ea\u30a2\u30eb\n        private GameObject targetObj; //\u7126\u70b9\u3092\u5408\u308f\u305b\u3066\u3044\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\n        //\u7126\u70b9\u306e\u73fe\u5728\u306e\u5185\u89d2(\u89d2\u5ea6)\n        /// Current inner angle of the reticle (in degrees).\n        private float reticleInnerAngle = 0.0f;\n        //\u7126\u70b9\u306e\u73fe\u5728\u306e\u5916\u89d2(\u89d2\u5ea6)\n        // Current outer angle of the reticle (in degrees).\n        private float reticleOuterAngle = 0.5f;\n        //\u7126\u70b9\u306e\u73fe\u5728\u306e\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\n        /// Current distance of the reticle (in meters).\n        private float reticleDistanceInMeters = 10.0f;\n\n        //\u7126\u70b9\u306e\u6700\u5c0f\u5185\u89d2(\u89d2\u5ea6)\n        /// Minimum inner angle of the reticle (in degrees).\n        private const float kReticleMinInnerAngle = 0.0f;\n        //\u7126\u70b9\u306e\u6700\u5c0f\u5916\u89d2(\u89d2\u5ea6)\n        /// Minimum outer angle of the reticle (in degrees).\n        private const float kReticleMinOuterAngle = 0.5f;\n        //\u9078\u629e\u53ef\u80fd\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u4ea4\u5dee\u3059\u308b\u6642\u3001\u7126\u70b9\u3092\u62e1\u5927\u3059\u308b\u89d2\u5ea6\u3002\n        /// Angle at which to expand the reticle when intersecting with an object.\n        private const float kReticleGrowthAngle = 1.5f;\n\n        //\u7126\u70b9\u306e\u6700\u5c0f\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\n        /// Minimum distance of the reticle (in meters).\n        private const float kReticleDistanceMin = 0.45f;\n        //\u7126\u70b9\u306e\u6700\u5927\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\n        /// Maximum distance of the reticle (in meters).\n        private const float kReticleDistanceMax = 10.0f;\n\n        //\u73fe\u5728\u306e\u8ddd\u96e2\u306e\u4e57\u7b97\u3067\u4f7f\u3046\u5185\u5f84\u3068\u5916\u5f84\uff08\u5185\u5f84\u2026\u5185\u5074\u306e\u76f4\u5f84,\u5916\u5f84\u2026\u5916\u5074\u306e\u76f4\u5f84\uff09\n        /// Current inner and outer diameters of the reticle, before distance multiplication.\n        private float reticleInnerDiameter = 0.0f;\n        private float reticleOuterDiameter = 0.0f;\n\n        /*------------------------------------------*\n         * Start : \u30af\u30e9\u30b9\u304c\u751f\u6210\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b\n         *------------------------------------------*/\n        void Start () {\n            //\u7126\u70b9\u306b\u30ab\u30fc\u30bd\u30eb\u3092\u751f\u6210\n            CreateReticleVertices();\n            //\u7126\u70b9\u3068\u3057\u3066\u8868\u793a\u3059\u308b\u30de\u30c6\u30ea\u30a2\u30eb\u3092\u8aad\u307f\u8fbc\u307f\n            materialComp = gameObject.GetComponent<Renderer>().material;\n        }\n\n        /*------------------------------------------*\n         * OnEnable : \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u6709\u52b9\u306b\u306a\u3063\u305f\u6642\n         *------------------------------------------*/\n        void OnEnable() {\n            //\u7126\u70b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u81ea\u8eab\u3092\u767b\u9332?\n            GazeInputModule.gazePointer = this;\n        }\n\n        /*------------------------------------------*\n         * OnDisable : \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u7121\u52b9\u306b\u306a\u3063\u305f\u6642\n         *------------------------------------------*/\n        void OnDisable() {\n            //\u7126\u70b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u81ea\u8eab\u306e\u6642\u3001\u767b\u9332\u3092\u89e3\u9664?\n            if (GazeInputModule.gazePointer == this) {\n                GazeInputModule.gazePointer = null;\n            }\n        }\n\n        /*------------------------------------------*\n         * Update : \u30d5\u30ec\u30fc\u30e0\u6bce\u306b\u547c\u3070\u308c\u308b\n         *------------------------------------------*/\n        void Update() {\n            //\u7126\u70b9\u30ab\u30fc\u30bd\u30eb\u306e\u5186\u306e\u5909\u66f4\n            UpdateDiameters();\n        }\n\n        //\u300cBaseInputModule\u300d\u30b7\u30b9\u30c6\u30e0\u3092\u6709\u52b9\u306b\u306a\u3063\u305f\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\n        /// This is called when the 'BaseInputModule' system should be enabled.\n        /*------------------------------------------*\n         * OnGazeEnabled : BaseInputModule\u304c\u6709\u52b9\u306b\u306a\u3063\u305f\u6642\n         *------------------------------------------*/\n        public void OnGazeEnabled() {\n\n        }\n\n        //\u300cBaseInputModule\u300d\u30b7\u30b9\u30c6\u30e0\u3092\u7121\u52b9\u306b\u306a\u3063\u305f\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\n        /// This is called when the 'BaseInputModule' system should be disabled.\n        /*------------------------------------------*\n         * OnGazeDisabled : BaseInputModule\u304c\u7121\u52b9\u306b\u306a\u3063\u305f\u6642\n         *------------------------------------------*/\n        public void OnGazeDisabled() {\n\n        }\n\n        //\u30e6\u30fc\u30b6\u30fc\u304c3D\u3084UI\u8981\u7d20\u3067\u9078\u629e\u53ef\u80fd\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u767a\u898b\u3057\u305f\u6642\u306b\u547c\u3070\u308c\u307e\u3059\u3002\n        /// Called when the user is looking on a valid GameObject. This can be a 3D or UI element.\n        //camera\u306f\u30a4\u30d9\u30f3\u30c8\u30ab\u30e1\u30e9\u3067\u3059\u3001targetObject\u306f\u30e6\u30fc\u30b6\u30fc\u304c\u898b\u3066\u3044\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3001\u305d\u3057\u3066intersectionPosition\u304c\u30ab\u30e1\u30e9\u306e\u8996\u70b9\u3068\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4ea4\u5dee\u70b9\u306e\u5ea7\u6a19\u3067\u3059\u3002\n        /// The camera is the event camera, the target is the object the user is looking at, and the intersectionPosition is the intersection point of the ray sent from the camera on the object.\n        /*------------------------------------------*\n         * OnGazeStart : \u9078\u629e\u53ef\u80fd\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u9078\u629e\u958b\u59cb\n         *------------------------------------------*/\n        public void OnGazeStart(Camera camera, GameObject targetObject, Vector3 intersectionPosition, bool isInteractive) {\n            //\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u306e\u4f4d\u7f6e\u3067\u30ab\u30fc\u30bd\u30eb\u306e\u8868\u793a\u3092\u5909\u3048\u308b\n            SetGazeTarget(intersectionPosition, isInteractive);\n        }\n\n        //\u30e6\u30fc\u30b6\u30fc\u304c3D\u3084UI\u8981\u7d20\u3067\u9078\u629e\u53ef\u80fd\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u898b\u7d9a\u3051\u3066\u3044\u308b\u9650\u308a\u6bce\u30d5\u30ec\u30fc\u30e0\u547c\u3070\u308c\u307e\u3059\u3002\n        /// Called every frame the user is still looking at a valid GameObject. This can be a 3D or UI element.\n        //camera\u306f\u30a4\u30d9\u30f3\u30c8\u30ab\u30e1\u30e9\u3067\u3059\u3001targetObject\u306f\u30e6\u30fc\u30b6\u30fc\u304c\u898b\u3066\u3044\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3001\u305d\u3057\u3066intersectionPosition\u304c\u30ab\u30e1\u30e9\u306e\u8996\u70b9\u3068\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4ea4\u5dee\u70b9\u306e\u5ea7\u6a19\u3067\u3059\u3002\n        /// The camera is the event camera, the target is the object the user is looking at, and the intersectionPosition is the intersection point of the ray sent from the camera on the object.\n        /*------------------------------------------*\n         * OnGazeStay : \u9078\u629e\u53ef\u80fd\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u9078\u629e\u4e2d\n         *------------------------------------------*/\n        public void OnGazeStay(Camera camera, GameObject targetObject, Vector3 intersectionPosition, bool isInteractive) {\n            //\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u306e\u4f4d\u7f6e\u3067\u30ab\u30fc\u30bd\u30eb\u306e\u8868\u793a\u3092\u5909\u3048\u308b\n            SetGazeTarget(intersectionPosition, isInteractive);\n        }\n\n        //\u30e6\u30fc\u30b6\u30fc\u304c\u4ee5\u524d\u898b\u3066\u3044\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u76ee\u3092\u96e2\u3057\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u3002\n        /// Called when the user's look no longer intersects an object previously intersected with a ray projected from the camera.\n        //\u3053\u308c\u306fOnGazeDisabled\u306e\u524d\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3001\u305d\u3057\u3066null\u5024\u3067\u3042\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n        /// This is also called just before **OnGazeDisabled** and may have have any of the values set as **null**.\n        //camera\u306f\u30a4\u30d9\u30f3\u30c8\u30ab\u30e1\u30e9\u3067targetObject\u306f\u4ee5\u524d\u898b\u3066\u3044\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002\n        /// The camera is the event camera and the target is the object the user previously looked at.\n        /*------------------------------------------*\n         * OnGazeExit : \u9078\u629e\u53ef\u80fd\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u9078\u629e\u89e3\u9664\n         *------------------------------------------*/\n        public void OnGazeExit(Camera camera, GameObject targetObject) {\n            //\u7126\u70b9\u60c5\u5831\u3092\u623b\u3059\n            reticleDistanceInMeters = kReticleDistanceMax;\n            reticleInnerAngle = kReticleMinInnerAngle;\n            reticleOuterAngle = kReticleMinOuterAngle;\n        }\n\n        //\u9078\u629e\u6642\u306e\u30a4\u30d9\u30f3\u30c8\u767a\u751f\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\n        /// Called when a trigger event is initiated.\n        //\u30e6\u30fc\u30b6\u30fc\u304c\u9078\u629e\u3057\u5b9f\u884c\u3059\u308b\u76f4\u524d\u3067\u3059\u3002\n        /// This is practically when the user begins pressing the trigger.\n        /*------------------------------------------*\n         * OnGazeTriggerStart : \u9078\u629e\u3067\u306e\u30a4\u30d9\u30f3\u30c8\u958b\u59cb\u6642\n         *------------------------------------------*/\n        public void OnGazeTriggerStart(Camera camera) {\n            //\u3053\u3053\u306b\u3042\u306a\u305f\u306e\u7126\u70b9\u306e\u9078\u629e\u958b\u59cb\u6642\u306e\u51e6\u7406\u3092\u3044\u308c\u3066\u306d(^^)\n            // Put your reticle trigger start logic here :)\n        }\n\n        //\u9078\u629e\u6642\u306e\u30a4\u30d9\u30f3\u30c8\u7d42\u4e86\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\n        /// Called when a trigger event is finished.\n        //\u30e6\u30fc\u30b6\u30fc\u304c\u9078\u629e\u3057\u5b9f\u884c\u304b\u3089\u89e3\u653e\u3055\u308c\u305f\u6642\u3067\u3059\u3002\n        /// This is practically when the user releases the trigger.\n        /*------------------------------------------*\n         * OnGazeTriggerEnd : \u9078\u629e\u3067\u306e\u30a4\u30d9\u30f3\u30c8\u7d42\u4e86\u6642\n         *------------------------------------------*/\n        public void OnGazeTriggerEnd(Camera camera) {\n            //\u3053\u3053\u306b\u3042\u306a\u305f\u306e\u7126\u70b9\u306e\u9078\u629e\u7d42\u4e86\u6642\u306e\u51e6\u7406\u3092\u3044\u308c\u3066\u306d(^^)\n            // Put your reticle trigger end logic here :)\n        }\n\n        /*------------------------------------------*\n         * GetPointerRadius : \u5185\u5074\u306e\u534a\u5f84\u3068\u5916\u5074\u306e\u534a\u5f84\u3092\u53d6\u5f97??\n         *------------------------------------------*/\n        public void GetPointerRadius(out float innerRadius, out float outerRadius) {\n            float min_inner_angle_radians = Mathf.Deg2Rad * kReticleMinInnerAngle;\n            float max_inner_angle_radians = Mathf.Deg2Rad * (kReticleMinInnerAngle + kReticleGrowthAngle);\n\n            innerRadius = 2.0f * Mathf.Tan(min_inner_angle_radians);\n            outerRadius = 2.0f * Mathf.Tan(max_inner_angle_radians);\n        }\n\n        /*------------------------------------------*\n         * CreateReticleVertices : \u7126\u70b9\u306b\u8868\u793a\u3059\u308b\u30ab\u30fc\u30bd\u30eb\u306e\u9802\u70b9\u3092\u751f\u6210\n         *------------------------------------------*/\n        private void CreateReticleVertices() {\n            //Mesh(\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6210\u5f62\u3059\u308b\u9802\u70b9\u3001\u8fba\u3001\u9762\u306e\u96c6\u5408)\u306e\u4f5c\u6210\n            Mesh mesh = new Mesh();\n            gameObject.AddComponent<MeshFilter>();\n            GetComponent<MeshFilter>().mesh = mesh;\n\n            //Mesh\u3092\u69cb\u6210\u3059\u308b\u30bb\u30b0\u30e1\u30f3\u30c8(\u8981\u7d20?)\u6570\n            int segments_count = reticleSegments;\n            int vertex_count = (segments_count+1)*2;\n\n            #region Vertices\n            /*---\u4ee5\u4e0b\u3001\u5186\u306e\u9802\u70b9\u3092\u6307\u5b9a\u3057\u3066Mesh\u306b\u30ab\u30fc\u30bd\u30eb\u3092\u751f\u6210\u3057\u3066\u3044\u308b\u3063\u307d\u3044(\u5b8c\u5168\u306b\u628a\u63e1\u3067\u304d\u3066\u3044\u306a\u3044)---*/\n\n            //\u9802\u70b9\u5ea7\u6a19\u914d\u5217\n            Vector3[] vertices = new Vector3[vertex_count];\n            //\u5186\u5468\u7387\u00d72\n            /*\n             * Mathf.PI\n             * \u5186\u5468\u7387\n             */\n            const float kTwoPi = Mathf.PI * 2.0f;\n            //\u914d\u5217\u306e\u8ffd\u52a0\u7b87\u6240\n            int vi = 0;\n            for (int si = 0; si <= segments_count; ++si) {\n                //\u3059\u3079\u3066\u306e\u5186\u30bb\u30b0\u30e1\u30f3\u30c8\u306e\u305f\u3081\u306e2\u3064\u306e\u9802\u70b9\u3092\u8ffd\u52a0\u3057\u307e\u3059\uff1a\n                // Add two vertices for every circle segment:\n                //\u89d2\u67f1\u306e\u958b\u59cb\u6642\u306b1\u3001\n                // one at the beginning of the prism,\n                //\u89d2\u67f1\u306e\u7d42\u308f\u308a\u306b1\u3002\n                // and one at the end of the prism.\n                //\u8981\u7d20\u6570\u3092360\u5ea6\u5186\u72b6\u306b\u6577\u304d\u8a70\u3081\u308b\u6642\u306esi\u756a\u76ee\u306e\u89d2\u5ea6\n                float angle = (float)si / (float)(segments_count) * kTwoPi;\n                //Sin,Cos\u3067\u5186\u304c\u3067\u304d\u308b\uff1f\n                /*\n                 * Mathf.Sin(a)\n                 * a\u306e\u89d2\u5ea6\u306e\u30b5\u30a4\u30f3(\u4e09\u89d2\u6bd4)\u3092\u8fd4\u3059\n                 */\n                float x = Mathf.Sin(angle);\n                /*\n                 * Mathf.Cos(a)\n                 * a\u306e\u89d2\u5ea6\u306e\u30b3\u30b5\u30a4\u30f3(\u4e09\u89d2\u6bd4)\u3092\u8fd4\u3059\n                 */\n                float y = Mathf.Cos(angle);\n\n                //1px\u306e\u539a\u307f\u3092\u6301\u305f\u305b\u3066\u5186\u306e\u5916\u5074\u3068\u5185\u5074\u306e\u5ea7\u6a19\u3092\u8ffd\u52a0\n                vertices[vi++] = new Vector3(x, y, 0.0f); // Outer vertex.\n                vertices[vi++] = new Vector3(x, y, 1.0f); // Inner vertex.\n            }\n            #endregion\n\n            #region Triangles\n            /*---\u4ee5\u4e0b\u3001\u4e09\u89d2\u5f62\u306e\u9802\u70b9\u3092\u6307\u5b9a\u3057\u3066Mesh\u306b\u30ab\u30fc\u30bd\u30eb\u3092\u751f\u6210\u3057\u3066\u3044\u308b\u3063\u307d\u3044(\u5b8c\u5168\u306b\u628a\u63e1\u3067\u304d\u3066\u3044\u306a\u3044)---*/\n            int indices_count = (segments_count+1)*3*2;\n            int[] indices = new int[indices_count];\n\n            int vert = 0;\n            int idx = 0;\n            for (int si = 0; si < segments_count; ++si) {\n                indices[idx++] = vert+1;\n                indices[idx++] = vert;\n                indices[idx++] = vert+2;\n\n                indices[idx++] = vert+1;\n                indices[idx++] = vert+2;\n                indices[idx++] = vert+3;\n\n                vert += 2;\n            }\n            #endregion\n\n            //Mesh\u306b\u30ab\u30fc\u30bd\u30eb\u3092\u6210\u5f62\u3059\u308b\u60c5\u5831\u3092\u4e0e\u3048\u308b\n            mesh.vertices = vertices;//Mesh\u3092\u69cb\u6210\u3059\u308b\u5186\u60c5\u5831\u306e\u5ea7\u6a19\u3092\u4e0e\u3048\u308b\n            mesh.triangles = indices;//Mesh\u3092\u69cb\u6210\u3059\u308b\u4e09\u89d2\u5f62\u60c5\u5831\u306e\u5ea7\u6a19\u3092\u4e0e\u3048\u308b\n            mesh.RecalculateBounds();//\u9802\u70b9\u306e\u30d0\u30a6\u30f3\u30c7\u30a3\u30f3\u30b0\u30dc\u30ea\u30e5\u30fc\u30e0\u3092\u518d\u8a08\u7b97\u3068\u66f8\u3044\u3066\u3042\u3063\u305f\u304c\u306a\u3093\u306e\u3053\u3063\u3061\u3083\n            mesh.Optimize();//Mesh\u306e\u9762\u3068\u9802\u70b9\u306e\u9806\u756a\u5909\u66f4\u3092\u5236\u5fa1\u3057\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u6700\u9069\u5316\u3057\u3066\u51fa\u529b\u30e1\u30c3\u30b7\u30e5\u3092\u751f\u6210\u3089\u3057\u3044(\u3068\u308a\u3042\u3048\u305a\u63cf\u753b)\n        }\n\n        /*------------------------------------------*\n         * UpdateDiameters : \u7126\u70b9\u30ab\u30fc\u30bd\u30eb\u306e\u76f4\u5f84\u306e\u66f4\u65b0\n         *------------------------------------------*/\n        private void UpdateDiameters() {\n            /*\n             * Mathf.Clamp(a,b,c)\n             * a\u306e\u5024\u3092b\u4ee5\u4e0ac\u4ee5\u4e0b\u306e\u5024\u306b\u3057\u3066\u8fd4\u3057\u3066\u304f\u308c\u308b\n             */\n\n            //\u7126\u70b9\u306e\u73fe\u5728\u306e\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\u3092\u8abf\u6574\n            reticleDistanceInMeters = Mathf.Clamp(reticleDistanceInMeters, kReticleDistanceMin, kReticleDistanceMax);\n\n            //\u7126\u70b9\u306e\u73fe\u5728\u306e\u5185\u89d2(\u89d2\u5ea6)\u3092\u6700\u5c0f\u5024\u4ee5\u4e0b\u306b\u5408\u308f\u305b\u308b\n            if (reticleInnerAngle < kReticleMinInnerAngle) {\n                reticleInnerAngle = kReticleMinInnerAngle;\n            }\n            //\u7126\u70b9\u306e\u73fe\u5728\u306e\u5916\u89d2(\u89d2\u5ea6)\u3092\u6700\u5c0f\u5024\u4ee5\u4e0b\u306b\u5408\u308f\u305b\u308b\n            if (reticleOuterAngle < kReticleMinOuterAngle) {\n                reticleOuterAngle = kReticleMinOuterAngle;\n            }\n\n            /*\n             * Mathf.Deg2Rad\n             * \u5024\u3092\u5ea6\u6570\u6cd5\u3068\u5f27\u5ea6\u6cd5\u3067\u5909\u63db\n             */\n            //\u5ea6\u6570\u6cd5(Angle)\u304b\u3089\u5f27\u5ea6\u6cd5(Radian)\u306b\u5909\u63db\n            float inner_half_angle_radians = Mathf.Deg2Rad * reticleInnerAngle * 0.5f;\n            float outer_half_angle_radians = Mathf.Deg2Rad * reticleOuterAngle * 0.5f;\n\n            /*\n             * Mathf.Tan(a)\n             * a\u306e\u89d2\u5ea6\u306e\u30bf\u30f3\u30b8\u30a7\u30f3\u30c8(\u4e09\u89d2\u6bd4)\u3092\u8fd4\u3059\n             */\n            //\u76f4\u5f84\u306e\u5916\u5074,\u5185\u5074\u3092\u51fa\u3059?\n            float inner_diameter = 2.0f * Mathf.Tan(inner_half_angle_radians);\n            float outer_diameter = 2.0f * Mathf.Tan(outer_half_angle_radians);\n\n            /*\n             * Mathf.Lerp(a,b,c)\n             * c\u304c0\u306a\u3089a\u306e\u5024\u304c,1\u306a\u3089b\u306e\u5024\u304c,0.5\u3068\u4e2d\u9593\u306a\u3089a\u3068b\u306e\u4e2d\u9593\u306e\u5024\u304c\u8fd4\u308b\n             */\n            //\u73fe\u5728\u306e\u8ddd\u96e2\u306e\u5185\u5f84\u3068\u5916\u5f84\n            reticleInnerDiameter = Mathf.Lerp(reticleInnerDiameter, inner_diameter, Time.deltaTime * reticleGrowthSpeed);\n            reticleOuterDiameter = Mathf.Lerp(reticleOuterDiameter, outer_diameter, Time.deltaTime * reticleGrowthSpeed);\n\n            //\u30de\u30c6\u30ea\u30a2\u30eb\u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u3067\u7126\u70b9\u30ab\u30fc\u30bd\u30eb\u306e\u5186\u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3059\u308b\n            materialComp.SetFloat(\"_InnerDiameter\", reticleInnerDiameter * reticleDistanceInMeters);\n            materialComp.SetFloat(\"_OuterDiameter\", reticleOuterDiameter * reticleDistanceInMeters);\n            materialComp.SetFloat(\"_DistanceInMeters\", reticleDistanceInMeters);\n        }\n\n        /*------------------------------------------*\n         * SetGazeTarget : \u7126\u70b9\u3092\u5408\u308f\u305b\u3066\u3044\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u306e\u8ddd\u96e2\n         *------------------------------------------*/\n        private void SetGazeTarget(Vector3 target, bool interactive) {\n            //\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5ea7\u6a19\u53d6\u5f97\n            Vector3 targetLocalPosition = transform.InverseTransformPoint(target);\n            //\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u306e\u4f4d\u7f6e\u53d6\u5f97\n            reticleDistanceInMeters = Mathf.Clamp(targetLocalPosition.z, kReticleDistanceMin, kReticleDistanceMax);\n\n            //\u73fe\u5728\u306e\u5185\u89d2,\u5916\u89d2\u306e\u53d6\u5f97\n            if (interactive) {\n                reticleInnerAngle = kReticleMinInnerAngle + kReticleGrowthAngle;\n                reticleOuterAngle = kReticleMinOuterAngle + kReticleGrowthAngle;\n            } else {\n                reticleInnerAngle = kReticleMinInnerAngle;\n                reticleOuterAngle = kReticleMinOuterAngle;\n            }\n        }\n    }\n\n\n\u3068\u3066\u3082\u982d\u306e\u60aa\u305d\u3046\u306a\u30bd\u30fc\u30b9\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u304c\u6559\u79d1\u66f8\u307f\u305f\u3044\u306b\u4e00\u56de\u3057\u3066\u307f\u305f\u3002\n\u6163\u308c\u305f\u30bd\u30fc\u30b9\u3060\u3068\u30b3\u30e1\u30f3\u30c8\u7121\u3044\u307b\u3046\u304c\u3044\u3044\u304c\u6700\u521d\u306f\u3053\u3046\u3057\u3066\u3057\u307e\u3046\u2026\n\n\u51e6\u7406\u90e8\u5206\u306e\u30bd\u30fc\u30b9\u8981\u7d04\n\u4e0a\u306e\u30bd\u30fc\u30b9\u3060\u3068\u7406\u89e3\u3057\u8f9b\u3044\u304b\u3068\u601d\u3046\u306e\u3067\u8981\u70b9\u3060\u3051\u307e\u3068\u3081\u307e\u3059\u3002\nfloat reticleGrowthSpeed\n\u30fb\u30ab\u30fc\u30bd\u30eb\u306e\u70b9\u304c\u5186\u306b\u5909\u308f\u308b\u901f\u5ea6(\u5c11\u306a\u3044\u307b\u3069\u9045\u3044)\n\u30fbpublic\u306a\u306e\u3067Unity\u306eInspector\u304b\u3089\u3082\u7de8\u96c6\u53ef\u80fd\nvoid CreateReticleVertices()\n\u30fbStart()\u306e\u521d\u671f\u5316\u51e6\u7406\u3067\u547c\u3070\u308c\u308b\n\u30fb\u3053\u3053\u3067\u5186\u306eMesh(\u30ab\u30fc\u30bd\u30eb)\u3092\u751f\u6210\u3059\u308b\nvoid UpdateDiameters()\uff1a\u3053\u3053\u3067\u30ab\u30fc\u30bd\u30eb\u306e\u5186\u306e\u5927\u304d\u3055\u3092\u66f4\u65b0\n\u30fbMesh\u306e\u5186\u306e\u30b5\u30a4\u30ba\u3092\u66f4\u65b0\u3059\u308b\n\u30fb\u901a\u5e38\u306f\u9078\u629e\u3057\u3066\u3044\u306a\u3044\u6642\u306f\u5186\u304c\u5c0f\u3055\u3044\u306e\u3067\u70b9\u306b\u898b\u3048\u308b\n3D\u306e\u77e5\u8b58\u306e\u306a\u3044\u79c1\u304b\u3089\u3057\u3066\u307f\u305f\u3089Mesh\u3092\u5186\u304b\u3089\u5225\u306e\u5f62\u306b\u81ea\u7531\u306b\u5909\u3048\u3066\u751f\u6210\u3059\u308b\u306e\u306f\u96e3\u3057\u3044\u3002\n\u306a\u306e\u3067\u30ab\u30fc\u30bd\u30eb\u306b\u306a\u308bGameObject\u306f\u30bd\u30fc\u30b9\u5185\u3067\u751f\u6210\u3067\u306f\u306a\u304f\u3042\u3089\u304b\u3058\u3081\u751f\u6210\u3057\u3066\u304a\u304f\u3002\n\u4f4d\u7f6e\u3084\u30b5\u30a4\u30ba\u306b\u95a2\u3057\u3066\u306f\u30b3\u30fc\u30c9\u304b\u3089\u64cd\u4f5c\u3057\u3066\u307f\u308b\u3002(3D\u3067Mesh\u751f\u6210\u3067\u3084\u308c\u308b\u4eba\u306f\u9811\u5f35\u3063\u3066\u307f\u3066\u2026\u305d\u3057\u3066\u6559\u3048\u3066\u2026)\n\u6b21\u56de\u306f\u3053\u306e\u30b3\u30fc\u30c9\u306b\u624b\u3092\u52a0\u3048\u3066\u81ea\u7531\u306a\u5f62\u306e\u30ab\u30fc\u30bd\u30eb\u3092\u8868\u793a\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n#\u306f\u3058\u3081\u306b\n[GoogleVR\u306e\u30b5\u30f3\u30d7\u30eb\u306e\u30ab\u30fc\u30bd\u30eb(\u7126\u70b9)\u306e\u8272\u3092\u5909\u66f4](http://qiita.com/nanoka____/items/183eaa5c1cb568a56af9)\u304b\u3089\u59cb\u307e\u308bVR\u3067\u753b\u9762\u4e2d\u592e\u306b\u8868\u793a\u3055\u308c\u308b\u30ab\u30fc\u30bd\u30eb(Reticle)\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u3066\u3044\u304f\u30b7\u30ea\u30fc\u30ba?\u3067\u3059\u3002\n\u6700\u7d42\u7684\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u306b\u3057\u305f\u3044\u2026\n![\u53c2\u8003\u30a4\u30e1\u30fc\u30b8](https://qiita-image-store.s3.amazonaws.com/0/82938/ed07decf-a3b3-c591-be67-bd1cc688392c.png)\n\u2191\u53c2\u8003\u30a4\u30e1\u30fc\u30b8\uff08HanGame,\u30c1\u30e7\u30b3\u30c3\u30c8\u30e9\u30f3\u30c9\u3088\u308a\uff09\n\n\u524d\u56de\u3001\u3068\u308a\u3042\u3048\u305a\u30ab\u30fc\u30bd\u30eb\u3092\u8868\u793a\u3057\u3066\u3044\u308bGameObject\u3068Script\u3092\u7279\u5b9a\u3057\u8272\u306e\u5909\u66f4\u3060\u3051\u884c\u3044\u307e\u3057\u305f\u306e\u3067\u3001\u4eca\u56de\u306fScript\u306e\u4e2d\u8eab\u3092\u628a\u63e1\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n#\u30b3\u30e1\u30f3\u30c8\u3092\u8d85\u8ffd\u52a0\nReticle\u306b\u8ffd\u52a0\u3055\u308c\u3066\u3044\u308bScript\u3001CvrReticle.cs\u306b\u3066\u8868\u793a\u306e\u4ed5\u7d44\u307f\u304c\u66f8\u304b\u308c\u3066\u3044\u308b\u3002\n\u3059\u3054\u3044\u4eba\u306f\u7d76\u5bfe\u3084\u3089\u306a\u3044\u3060\u308d\u3046\u304c\u30bd\u30fc\u30b9\u306b\u81ea\u5206\u306f\u30b3\u30e1\u30f3\u30c8\u3092\u66f8\u304d\u307e\u304f\u308b\u2193\n\u3053\u308c\u3067\u7406\u89e3\u3057\u305f\u6c17\u5206\u306b\u306a\u3063\u3066\u3044\u308b\u3046\u3061\u306b\u3044\u3064\u306e\u9593\u306b\u304b\u7406\u89e3\u3057\u3066\u305f\u308a\u5b9f\u884c\u3057\u3066\u305f\u3089\u52d8\u9055\u3044\u3057\u3066\u305f\u3053\u3068\u306b\u6c17\u4ed8\u304f\u2026\n\uff08\u4ee5\u4e0b\u30b3\u30fc\u30c9\u306fGoogleVR\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5165\u3063\u3066\u3044\u308bGoogle\u306e\u30bd\u30fc\u30b9\u3067\u3059\u3002\uff09\n\n```sharp:GvrReticle.cs\n\tusing UnityEngine;\n\n\t//\u30e6\u30fc\u30b6\u30fc\u304c\u6ce8\u76ee\u3057\u3066\u3044\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5186\u5f62\u306e\u7126\u70b9\u3092\u63cf\u753b\u3057\u307e\u3059\u3002\n\t/// Draws a circular reticle in front of any object that the user gazes at.\n\t//\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u9078\u629e\u53ef\u80fd\u3067\u3042\u308c\u3070\u5186\u304c\u62e1\u5f35\u3057\u307e\u3059\u3002\n\t/// The circle dilates if the object is clickable.\n\t[AddComponentMenu(\"GoogleVR/UI/GvrReticle\")]\n\t[RequireComponent(typeof(Renderer))]\n\n\t/************************************************\n\t * GvrReticle : \u30ab\u30fc\u30bd\u30eb\u306e\u7126\u70b9\u30af\u30e9\u30b9\n\t ************************************************/\n\tpublic class GvrReticle : MonoBehaviour, IGvrGazePointer {\n\t\t//\u7126\u70b9\u306e\u5186\u3092\u4f5c\u308b\u30bb\u30b0\u30e1\u30f3\u30c8(\u8981\u7d20?)\u6570\u3000\u203b\u591a\u5206\u3053\u308c\u304c\u591a\u3044\u65b9\u304c\u9ad8\u753b\u8cea?\n\t\t/// Number of segments making the reticle circle.\n\t\tpublic int reticleSegments = 20;\n\n\t\t//\u7126\u70b9\u304c\u5927\u304d\u304f\u306a\u308b\u901f\u5ea6(\u5927\u304d\u3044\u307b\u3069\u65e9\u304f,\u5c0f\u3055\u3044\u307b\u3069\u9045\u304f\u306a\u308b)\n\t\t/// Growth speed multiplier for the reticle.\n\t\tpublic float reticleGrowthSpeed = 8.0f;\n\n\t\t/// Private members\n\t\tprivate Material materialComp; //\u7126\u70b9\u3068\u3057\u3066\u8868\u793a\u3059\u308b\u30de\u30c6\u30ea\u30a2\u30eb\n\t\tprivate GameObject targetObj; //\u7126\u70b9\u3092\u5408\u308f\u305b\u3066\u3044\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\n\t\t//\u7126\u70b9\u306e\u73fe\u5728\u306e\u5185\u89d2(\u89d2\u5ea6)\n\t\t/// Current inner angle of the reticle (in degrees).\n\t\tprivate float reticleInnerAngle = 0.0f;\n\t\t//\u7126\u70b9\u306e\u73fe\u5728\u306e\u5916\u89d2(\u89d2\u5ea6)\n\t\t// Current outer angle of the reticle (in degrees).\n\t\tprivate float reticleOuterAngle = 0.5f;\n\t\t//\u7126\u70b9\u306e\u73fe\u5728\u306e\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\n\t\t/// Current distance of the reticle (in meters).\n\t\tprivate float reticleDistanceInMeters = 10.0f;\n\n\t\t//\u7126\u70b9\u306e\u6700\u5c0f\u5185\u89d2(\u89d2\u5ea6)\n\t\t/// Minimum inner angle of the reticle (in degrees).\n\t\tprivate const float kReticleMinInnerAngle = 0.0f;\n\t\t//\u7126\u70b9\u306e\u6700\u5c0f\u5916\u89d2(\u89d2\u5ea6)\n\t\t/// Minimum outer angle of the reticle (in degrees).\n\t\tprivate const float kReticleMinOuterAngle = 0.5f;\n\t\t//\u9078\u629e\u53ef\u80fd\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u4ea4\u5dee\u3059\u308b\u6642\u3001\u7126\u70b9\u3092\u62e1\u5927\u3059\u308b\u89d2\u5ea6\u3002\n\t\t/// Angle at which to expand the reticle when intersecting with an object.\n\t\tprivate const float kReticleGrowthAngle = 1.5f;\n\n\t\t//\u7126\u70b9\u306e\u6700\u5c0f\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\n\t\t/// Minimum distance of the reticle (in meters).\n\t\tprivate const float kReticleDistanceMin = 0.45f;\n\t\t//\u7126\u70b9\u306e\u6700\u5927\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\n\t\t/// Maximum distance of the reticle (in meters).\n\t\tprivate const float kReticleDistanceMax = 10.0f;\n\n\t\t//\u73fe\u5728\u306e\u8ddd\u96e2\u306e\u4e57\u7b97\u3067\u4f7f\u3046\u5185\u5f84\u3068\u5916\u5f84\uff08\u5185\u5f84\u2026\u5185\u5074\u306e\u76f4\u5f84,\u5916\u5f84\u2026\u5916\u5074\u306e\u76f4\u5f84\uff09\n\t\t/// Current inner and outer diameters of the reticle, before distance multiplication.\n\t\tprivate float reticleInnerDiameter = 0.0f;\n\t\tprivate float reticleOuterDiameter = 0.0f;\n\n\t\t/*------------------------------------------*\n\t\t * Start : \u30af\u30e9\u30b9\u304c\u751f\u6210\u3055\u308c\u305f\u6642\u306b\u547c\u3070\u308c\u308b\n\t\t *------------------------------------------*/\n\t\tvoid Start () {\n\t\t\t//\u7126\u70b9\u306b\u30ab\u30fc\u30bd\u30eb\u3092\u751f\u6210\n\t\t\tCreateReticleVertices();\n\t\t\t//\u7126\u70b9\u3068\u3057\u3066\u8868\u793a\u3059\u308b\u30de\u30c6\u30ea\u30a2\u30eb\u3092\u8aad\u307f\u8fbc\u307f\n\t\t\tmaterialComp = gameObject.GetComponent<Renderer>().material;\n\t\t}\n\n\t\t/*------------------------------------------*\n\t\t * OnEnable : \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u6709\u52b9\u306b\u306a\u3063\u305f\u6642\n\t\t *------------------------------------------*/\n\t\tvoid OnEnable() {\n\t\t\t//\u7126\u70b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u81ea\u8eab\u3092\u767b\u9332?\n\t\t\tGazeInputModule.gazePointer = this;\n\t\t}\n\n\t\t/*------------------------------------------*\n\t\t * OnDisable : \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u7121\u52b9\u306b\u306a\u3063\u305f\u6642\n\t\t *------------------------------------------*/\n\t\tvoid OnDisable() {\n\t\t\t//\u7126\u70b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u81ea\u8eab\u306e\u6642\u3001\u767b\u9332\u3092\u89e3\u9664?\n\t\t\tif (GazeInputModule.gazePointer == this) {\n\t\t\t\tGazeInputModule.gazePointer = null;\n\t\t\t}\n\t\t}\n\n\t\t/*------------------------------------------*\n\t\t * Update : \u30d5\u30ec\u30fc\u30e0\u6bce\u306b\u547c\u3070\u308c\u308b\n\t\t *------------------------------------------*/\n\t\tvoid Update() {\n\t\t\t//\u7126\u70b9\u30ab\u30fc\u30bd\u30eb\u306e\u5186\u306e\u5909\u66f4\n\t\t\tUpdateDiameters();\n\t\t}\n\n\t\t//\u300cBaseInputModule\u300d\u30b7\u30b9\u30c6\u30e0\u3092\u6709\u52b9\u306b\u306a\u3063\u305f\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\n\t\t/// This is called when the 'BaseInputModule' system should be enabled.\n\t\t/*------------------------------------------*\n\t\t * OnGazeEnabled : BaseInputModule\u304c\u6709\u52b9\u306b\u306a\u3063\u305f\u6642\n\t\t *------------------------------------------*/\n\t\tpublic void OnGazeEnabled() {\n\n\t\t}\n\n\t\t//\u300cBaseInputModule\u300d\u30b7\u30b9\u30c6\u30e0\u3092\u7121\u52b9\u306b\u306a\u3063\u305f\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\n\t\t/// This is called when the 'BaseInputModule' system should be disabled.\n\t\t/*------------------------------------------*\n\t\t * OnGazeDisabled : BaseInputModule\u304c\u7121\u52b9\u306b\u306a\u3063\u305f\u6642\n\t\t *------------------------------------------*/\n\t\tpublic void OnGazeDisabled() {\n\t\t\n\t\t}\n\n\t\t//\u30e6\u30fc\u30b6\u30fc\u304c3D\u3084UI\u8981\u7d20\u3067\u9078\u629e\u53ef\u80fd\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u767a\u898b\u3057\u305f\u6642\u306b\u547c\u3070\u308c\u307e\u3059\u3002\n\t\t/// Called when the user is looking on a valid GameObject. This can be a 3D or UI element.\n\t\t//camera\u306f\u30a4\u30d9\u30f3\u30c8\u30ab\u30e1\u30e9\u3067\u3059\u3001targetObject\u306f\u30e6\u30fc\u30b6\u30fc\u304c\u898b\u3066\u3044\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3001\u305d\u3057\u3066intersectionPosition\u304c\u30ab\u30e1\u30e9\u306e\u8996\u70b9\u3068\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4ea4\u5dee\u70b9\u306e\u5ea7\u6a19\u3067\u3059\u3002\n\t\t/// The camera is the event camera, the target is the object the user is looking at, and the intersectionPosition is the intersection point of the ray sent from the camera on the object.\n\t\t/*------------------------------------------*\n\t\t * OnGazeStart : \u9078\u629e\u53ef\u80fd\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u9078\u629e\u958b\u59cb\n\t\t *------------------------------------------*/\n\t\tpublic void OnGazeStart(Camera camera, GameObject targetObject, Vector3 intersectionPosition, bool isInteractive) {\n\t\t\t//\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u306e\u4f4d\u7f6e\u3067\u30ab\u30fc\u30bd\u30eb\u306e\u8868\u793a\u3092\u5909\u3048\u308b\n\t\t\tSetGazeTarget(intersectionPosition, isInteractive);\n\t\t}\n\n\t\t//\u30e6\u30fc\u30b6\u30fc\u304c3D\u3084UI\u8981\u7d20\u3067\u9078\u629e\u53ef\u80fd\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u898b\u7d9a\u3051\u3066\u3044\u308b\u9650\u308a\u6bce\u30d5\u30ec\u30fc\u30e0\u547c\u3070\u308c\u307e\u3059\u3002\n\t\t/// Called every frame the user is still looking at a valid GameObject. This can be a 3D or UI element.\n\t\t//camera\u306f\u30a4\u30d9\u30f3\u30c8\u30ab\u30e1\u30e9\u3067\u3059\u3001targetObject\u306f\u30e6\u30fc\u30b6\u30fc\u304c\u898b\u3066\u3044\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3001\u305d\u3057\u3066intersectionPosition\u304c\u30ab\u30e1\u30e9\u306e\u8996\u70b9\u3068\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4ea4\u5dee\u70b9\u306e\u5ea7\u6a19\u3067\u3059\u3002\n\t\t/// The camera is the event camera, the target is the object the user is looking at, and the intersectionPosition is the intersection point of the ray sent from the camera on the object.\n\t\t/*------------------------------------------*\n\t\t * OnGazeStay : \u9078\u629e\u53ef\u80fd\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u9078\u629e\u4e2d\n\t\t *------------------------------------------*/\n\t\tpublic void OnGazeStay(Camera camera, GameObject targetObject, Vector3 intersectionPosition, bool isInteractive) {\n\t\t\t//\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u306e\u4f4d\u7f6e\u3067\u30ab\u30fc\u30bd\u30eb\u306e\u8868\u793a\u3092\u5909\u3048\u308b\n\t\t\tSetGazeTarget(intersectionPosition, isInteractive);\n\t\t}\n\n\t\t//\u30e6\u30fc\u30b6\u30fc\u304c\u4ee5\u524d\u898b\u3066\u3044\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u76ee\u3092\u96e2\u3057\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u3002\n\t\t/// Called when the user's look no longer intersects an object previously intersected with a ray projected from the camera.\n\t\t//\u3053\u308c\u306fOnGazeDisabled\u306e\u524d\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3001\u305d\u3057\u3066null\u5024\u3067\u3042\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n\t\t/// This is also called just before **OnGazeDisabled** and may have have any of the values set as **null**.\n\t\t//camera\u306f\u30a4\u30d9\u30f3\u30c8\u30ab\u30e1\u30e9\u3067targetObject\u306f\u4ee5\u524d\u898b\u3066\u3044\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002\n\t\t/// The camera is the event camera and the target is the object the user previously looked at.\n\t\t/*------------------------------------------*\n\t\t * OnGazeExit : \u9078\u629e\u53ef\u80fd\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u9078\u629e\u89e3\u9664\n\t\t *------------------------------------------*/\n\t\tpublic void OnGazeExit(Camera camera, GameObject targetObject) {\n\t\t\t//\u7126\u70b9\u60c5\u5831\u3092\u623b\u3059\n\t\t\treticleDistanceInMeters = kReticleDistanceMax;\n\t\t\treticleInnerAngle = kReticleMinInnerAngle;\n\t\t\treticleOuterAngle = kReticleMinOuterAngle;\n\t\t}\n\n\t\t//\u9078\u629e\u6642\u306e\u30a4\u30d9\u30f3\u30c8\u767a\u751f\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\n\t\t/// Called when a trigger event is initiated.\n\t\t//\u30e6\u30fc\u30b6\u30fc\u304c\u9078\u629e\u3057\u5b9f\u884c\u3059\u308b\u76f4\u524d\u3067\u3059\u3002\n\t\t/// This is practically when the user begins pressing the trigger.\n\t\t/*------------------------------------------*\n\t\t * OnGazeTriggerStart : \u9078\u629e\u3067\u306e\u30a4\u30d9\u30f3\u30c8\u958b\u59cb\u6642\n\t\t *------------------------------------------*/\n\t\tpublic void OnGazeTriggerStart(Camera camera) {\n\t\t\t//\u3053\u3053\u306b\u3042\u306a\u305f\u306e\u7126\u70b9\u306e\u9078\u629e\u958b\u59cb\u6642\u306e\u51e6\u7406\u3092\u3044\u308c\u3066\u306d(^^)\n\t\t\t// Put your reticle trigger start logic here :)\n\t\t}\n\n\t\t//\u9078\u629e\u6642\u306e\u30a4\u30d9\u30f3\u30c8\u7d42\u4e86\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\n\t\t/// Called when a trigger event is finished.\n\t\t//\u30e6\u30fc\u30b6\u30fc\u304c\u9078\u629e\u3057\u5b9f\u884c\u304b\u3089\u89e3\u653e\u3055\u308c\u305f\u6642\u3067\u3059\u3002\n\t\t/// This is practically when the user releases the trigger.\n\t\t/*------------------------------------------*\n\t\t * OnGazeTriggerEnd : \u9078\u629e\u3067\u306e\u30a4\u30d9\u30f3\u30c8\u7d42\u4e86\u6642\n\t\t *------------------------------------------*/\n\t\tpublic void OnGazeTriggerEnd(Camera camera) {\n\t\t\t//\u3053\u3053\u306b\u3042\u306a\u305f\u306e\u7126\u70b9\u306e\u9078\u629e\u7d42\u4e86\u6642\u306e\u51e6\u7406\u3092\u3044\u308c\u3066\u306d(^^)\n\t\t\t// Put your reticle trigger end logic here :)\n\t\t}\n\t\t\t\n\t\t/*------------------------------------------*\n\t\t * GetPointerRadius : \u5185\u5074\u306e\u534a\u5f84\u3068\u5916\u5074\u306e\u534a\u5f84\u3092\u53d6\u5f97??\n\t\t *------------------------------------------*/\n\t\tpublic void GetPointerRadius(out float innerRadius, out float outerRadius) {\n\t\t\tfloat min_inner_angle_radians = Mathf.Deg2Rad * kReticleMinInnerAngle;\n\t\t\tfloat max_inner_angle_radians = Mathf.Deg2Rad * (kReticleMinInnerAngle + kReticleGrowthAngle);\n\n\t\t\tinnerRadius = 2.0f * Mathf.Tan(min_inner_angle_radians);\n\t\t\touterRadius = 2.0f * Mathf.Tan(max_inner_angle_radians);\n\t\t}\n\n\t\t/*------------------------------------------*\n\t\t * CreateReticleVertices : \u7126\u70b9\u306b\u8868\u793a\u3059\u308b\u30ab\u30fc\u30bd\u30eb\u306e\u9802\u70b9\u3092\u751f\u6210\n\t\t *------------------------------------------*/\n\t\tprivate void CreateReticleVertices() {\n\t\t\t//Mesh(\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6210\u5f62\u3059\u308b\u9802\u70b9\u3001\u8fba\u3001\u9762\u306e\u96c6\u5408)\u306e\u4f5c\u6210\n\t\t\tMesh mesh = new Mesh();\n\t\t\tgameObject.AddComponent<MeshFilter>();\n\t\t\tGetComponent<MeshFilter>().mesh = mesh;\n\n\t\t\t//Mesh\u3092\u69cb\u6210\u3059\u308b\u30bb\u30b0\u30e1\u30f3\u30c8(\u8981\u7d20?)\u6570\n\t\t\tint segments_count = reticleSegments;\n\t\t\tint vertex_count = (segments_count+1)*2;\n\n\t\t\t#region Vertices\n\t\t\t/*---\u4ee5\u4e0b\u3001\u5186\u306e\u9802\u70b9\u3092\u6307\u5b9a\u3057\u3066Mesh\u306b\u30ab\u30fc\u30bd\u30eb\u3092\u751f\u6210\u3057\u3066\u3044\u308b\u3063\u307d\u3044(\u5b8c\u5168\u306b\u628a\u63e1\u3067\u304d\u3066\u3044\u306a\u3044)---*/\n\n\t\t\t//\u9802\u70b9\u5ea7\u6a19\u914d\u5217\n\t\t\tVector3[] vertices = new Vector3[vertex_count];\n\t\t\t//\u5186\u5468\u7387\u00d72\n\t\t\t/*\n\t\t\t * Mathf.PI\n\t\t\t * \u5186\u5468\u7387\n\t\t\t */\n\t\t\tconst float kTwoPi = Mathf.PI * 2.0f;\n\t\t\t//\u914d\u5217\u306e\u8ffd\u52a0\u7b87\u6240\n\t\t\tint vi = 0;\n\t\t\tfor (int si = 0; si <= segments_count; ++si) {\n\t\t\t\t//\u3059\u3079\u3066\u306e\u5186\u30bb\u30b0\u30e1\u30f3\u30c8\u306e\u305f\u3081\u306e2\u3064\u306e\u9802\u70b9\u3092\u8ffd\u52a0\u3057\u307e\u3059\uff1a\n\t\t\t\t// Add two vertices for every circle segment:\n\t\t\t\t//\u89d2\u67f1\u306e\u958b\u59cb\u6642\u306b1\u3001\n\t\t\t\t// one at the beginning of the prism,\n\t\t\t\t//\u89d2\u67f1\u306e\u7d42\u308f\u308a\u306b1\u3002\n\t\t\t\t// and one at the end of the prism.\n\t\t\t\t//\u8981\u7d20\u6570\u3092360\u5ea6\u5186\u72b6\u306b\u6577\u304d\u8a70\u3081\u308b\u6642\u306esi\u756a\u76ee\u306e\u89d2\u5ea6\n\t\t\t\tfloat angle = (float)si / (float)(segments_count) * kTwoPi;\n\t\t\t\t//Sin,Cos\u3067\u5186\u304c\u3067\u304d\u308b\uff1f\n\t\t\t\t/*\n\t\t\t\t * Mathf.Sin(a)\n\t\t\t\t * a\u306e\u89d2\u5ea6\u306e\u30b5\u30a4\u30f3(\u4e09\u89d2\u6bd4)\u3092\u8fd4\u3059\n\t\t\t\t */\n\t\t\t\tfloat x = Mathf.Sin(angle);\n\t\t\t\t/*\n\t\t\t\t * Mathf.Cos(a)\n\t\t\t\t * a\u306e\u89d2\u5ea6\u306e\u30b3\u30b5\u30a4\u30f3(\u4e09\u89d2\u6bd4)\u3092\u8fd4\u3059\n\t\t\t\t */\n\t\t\t\tfloat y = Mathf.Cos(angle);\n\n\t\t\t\t//1px\u306e\u539a\u307f\u3092\u6301\u305f\u305b\u3066\u5186\u306e\u5916\u5074\u3068\u5185\u5074\u306e\u5ea7\u6a19\u3092\u8ffd\u52a0\n\t\t\t\tvertices[vi++] = new Vector3(x, y, 0.0f); // Outer vertex.\n\t\t\t\tvertices[vi++] = new Vector3(x, y, 1.0f); // Inner vertex.\n\t\t\t}\n\t\t\t#endregion\n\n\t\t\t#region Triangles\n\t\t\t/*---\u4ee5\u4e0b\u3001\u4e09\u89d2\u5f62\u306e\u9802\u70b9\u3092\u6307\u5b9a\u3057\u3066Mesh\u306b\u30ab\u30fc\u30bd\u30eb\u3092\u751f\u6210\u3057\u3066\u3044\u308b\u3063\u307d\u3044(\u5b8c\u5168\u306b\u628a\u63e1\u3067\u304d\u3066\u3044\u306a\u3044)---*/\n\t\t\tint indices_count = (segments_count+1)*3*2;\n\t\t\tint[] indices = new int[indices_count];\n\n\t\t\tint vert = 0;\n\t\t\tint idx = 0;\n\t\t\tfor (int si = 0; si < segments_count; ++si) {\n\t\t\t\tindices[idx++] = vert+1;\n\t\t\t\tindices[idx++] = vert;\n\t\t\t\tindices[idx++] = vert+2;\n\n\t\t\t\tindices[idx++] = vert+1;\n\t\t\t\tindices[idx++] = vert+2;\n\t\t\t\tindices[idx++] = vert+3;\n\n\t\t\t\tvert += 2;\n\t\t\t}\n\t\t\t#endregion\n\n\t\t\t//Mesh\u306b\u30ab\u30fc\u30bd\u30eb\u3092\u6210\u5f62\u3059\u308b\u60c5\u5831\u3092\u4e0e\u3048\u308b\n\t\t\tmesh.vertices = vertices;//Mesh\u3092\u69cb\u6210\u3059\u308b\u5186\u60c5\u5831\u306e\u5ea7\u6a19\u3092\u4e0e\u3048\u308b\n\t\t\tmesh.triangles = indices;//Mesh\u3092\u69cb\u6210\u3059\u308b\u4e09\u89d2\u5f62\u60c5\u5831\u306e\u5ea7\u6a19\u3092\u4e0e\u3048\u308b\n\t\t\tmesh.RecalculateBounds();//\u9802\u70b9\u306e\u30d0\u30a6\u30f3\u30c7\u30a3\u30f3\u30b0\u30dc\u30ea\u30e5\u30fc\u30e0\u3092\u518d\u8a08\u7b97\u3068\u66f8\u3044\u3066\u3042\u3063\u305f\u304c\u306a\u3093\u306e\u3053\u3063\u3061\u3083\n\t\t\tmesh.Optimize();//Mesh\u306e\u9762\u3068\u9802\u70b9\u306e\u9806\u756a\u5909\u66f4\u3092\u5236\u5fa1\u3057\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u6700\u9069\u5316\u3057\u3066\u51fa\u529b\u30e1\u30c3\u30b7\u30e5\u3092\u751f\u6210\u3089\u3057\u3044(\u3068\u308a\u3042\u3048\u305a\u63cf\u753b)\n\t\t}\n\n\t\t/*------------------------------------------*\n\t\t * UpdateDiameters : \u7126\u70b9\u30ab\u30fc\u30bd\u30eb\u306e\u76f4\u5f84\u306e\u66f4\u65b0\n\t\t *------------------------------------------*/\n\t\tprivate void UpdateDiameters() {\n\t\t\t/*\n\t\t\t * Mathf.Clamp(a,b,c)\n\t\t\t * a\u306e\u5024\u3092b\u4ee5\u4e0ac\u4ee5\u4e0b\u306e\u5024\u306b\u3057\u3066\u8fd4\u3057\u3066\u304f\u308c\u308b\n\t\t\t */\n\n\t\t\t//\u7126\u70b9\u306e\u73fe\u5728\u306e\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\u3092\u8abf\u6574\n\t\t\treticleDistanceInMeters = Mathf.Clamp(reticleDistanceInMeters, kReticleDistanceMin, kReticleDistanceMax);\n\n\t\t\t//\u7126\u70b9\u306e\u73fe\u5728\u306e\u5185\u89d2(\u89d2\u5ea6)\u3092\u6700\u5c0f\u5024\u4ee5\u4e0b\u306b\u5408\u308f\u305b\u308b\n\t\t\tif (reticleInnerAngle < kReticleMinInnerAngle) {\n\t\t\t\treticleInnerAngle = kReticleMinInnerAngle;\n\t\t\t}\n\t\t\t//\u7126\u70b9\u306e\u73fe\u5728\u306e\u5916\u89d2(\u89d2\u5ea6)\u3092\u6700\u5c0f\u5024\u4ee5\u4e0b\u306b\u5408\u308f\u305b\u308b\n\t\t\tif (reticleOuterAngle < kReticleMinOuterAngle) {\n\t\t\t\treticleOuterAngle = kReticleMinOuterAngle;\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Mathf.Deg2Rad\n\t\t\t * \u5024\u3092\u5ea6\u6570\u6cd5\u3068\u5f27\u5ea6\u6cd5\u3067\u5909\u63db\n\t\t\t */\n\t\t\t//\u5ea6\u6570\u6cd5(Angle)\u304b\u3089\u5f27\u5ea6\u6cd5(Radian)\u306b\u5909\u63db\n\t\t\tfloat inner_half_angle_radians = Mathf.Deg2Rad * reticleInnerAngle * 0.5f;\n\t\t\tfloat outer_half_angle_radians = Mathf.Deg2Rad * reticleOuterAngle * 0.5f;\n\n\t\t\t/*\n\t\t\t * Mathf.Tan(a)\n\t\t\t * a\u306e\u89d2\u5ea6\u306e\u30bf\u30f3\u30b8\u30a7\u30f3\u30c8(\u4e09\u89d2\u6bd4)\u3092\u8fd4\u3059\n\t\t\t */\n\t\t\t//\u76f4\u5f84\u306e\u5916\u5074,\u5185\u5074\u3092\u51fa\u3059?\n\t\t\tfloat inner_diameter = 2.0f * Mathf.Tan(inner_half_angle_radians);\n\t\t\tfloat outer_diameter = 2.0f * Mathf.Tan(outer_half_angle_radians);\n\n\t\t\t/*\n\t\t\t * Mathf.Lerp(a,b,c)\n\t\t\t * c\u304c0\u306a\u3089a\u306e\u5024\u304c,1\u306a\u3089b\u306e\u5024\u304c,0.5\u3068\u4e2d\u9593\u306a\u3089a\u3068b\u306e\u4e2d\u9593\u306e\u5024\u304c\u8fd4\u308b\n\t\t\t */\n\t\t\t//\u73fe\u5728\u306e\u8ddd\u96e2\u306e\u5185\u5f84\u3068\u5916\u5f84\n\t\t\treticleInnerDiameter = Mathf.Lerp(reticleInnerDiameter, inner_diameter, Time.deltaTime * reticleGrowthSpeed);\n\t\t\treticleOuterDiameter = Mathf.Lerp(reticleOuterDiameter, outer_diameter, Time.deltaTime * reticleGrowthSpeed);\n\n\t\t\t//\u30de\u30c6\u30ea\u30a2\u30eb\u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u3067\u7126\u70b9\u30ab\u30fc\u30bd\u30eb\u306e\u5186\u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3059\u308b\n\t\t\tmaterialComp.SetFloat(\"_InnerDiameter\", reticleInnerDiameter * reticleDistanceInMeters);\n\t\t\tmaterialComp.SetFloat(\"_OuterDiameter\", reticleOuterDiameter * reticleDistanceInMeters);\n\t\t\tmaterialComp.SetFloat(\"_DistanceInMeters\", reticleDistanceInMeters);\n\t\t}\n\n\t\t/*------------------------------------------*\n\t\t * SetGazeTarget : \u7126\u70b9\u3092\u5408\u308f\u305b\u3066\u3044\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u306e\u8ddd\u96e2\n\t\t *------------------------------------------*/\n\t\tprivate void SetGazeTarget(Vector3 target, bool interactive) {\n\t\t\t//\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5ea7\u6a19\u53d6\u5f97\n\t\t\tVector3 targetLocalPosition = transform.InverseTransformPoint(target);\n\t\t\t//\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u306e\u4f4d\u7f6e\u53d6\u5f97\n\t\t\treticleDistanceInMeters = Mathf.Clamp(targetLocalPosition.z, kReticleDistanceMin, kReticleDistanceMax);\n\n\t\t\t//\u73fe\u5728\u306e\u5185\u89d2,\u5916\u89d2\u306e\u53d6\u5f97\n\t\t\tif (interactive) {\n\t\t\t\treticleInnerAngle = kReticleMinInnerAngle + kReticleGrowthAngle;\n\t\t\t\treticleOuterAngle = kReticleMinOuterAngle + kReticleGrowthAngle;\n\t\t\t} else {\n\t\t\t\treticleInnerAngle = kReticleMinInnerAngle;\n\t\t\t\treticleOuterAngle = kReticleMinOuterAngle;\n\t\t\t}\n\t\t}\n\t}\n```\n\n\u3068\u3066\u3082\u982d\u306e\u60aa\u305d\u3046\u306a\u30bd\u30fc\u30b9\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u304c\u6559\u79d1\u66f8\u307f\u305f\u3044\u306b\u4e00\u56de\u3057\u3066\u307f\u305f\u3002\n\u6163\u308c\u305f\u30bd\u30fc\u30b9\u3060\u3068\u30b3\u30e1\u30f3\u30c8\u7121\u3044\u307b\u3046\u304c\u3044\u3044\u304c\u6700\u521d\u306f\u3053\u3046\u3057\u3066\u3057\u307e\u3046\u2026\n\n#\u51e6\u7406\u90e8\u5206\u306e\u30bd\u30fc\u30b9\u8981\u7d04\n\u4e0a\u306e\u30bd\u30fc\u30b9\u3060\u3068\u7406\u89e3\u3057\u8f9b\u3044\u304b\u3068\u601d\u3046\u306e\u3067\u8981\u70b9\u3060\u3051\u307e\u3068\u3081\u307e\u3059\u3002\n\nfloat reticleGrowthSpeed\n\u30fb\u30ab\u30fc\u30bd\u30eb\u306e\u70b9\u304c\u5186\u306b\u5909\u308f\u308b\u901f\u5ea6(\u5c11\u306a\u3044\u307b\u3069\u9045\u3044)\n\u30fbpublic\u306a\u306e\u3067Unity\u306eInspector\u304b\u3089\u3082\u7de8\u96c6\u53ef\u80fd\n\nvoid CreateReticleVertices()\n\u30fbStart()\u306e\u521d\u671f\u5316\u51e6\u7406\u3067\u547c\u3070\u308c\u308b\n\u30fb\u3053\u3053\u3067\u5186\u306eMesh(\u30ab\u30fc\u30bd\u30eb)\u3092\u751f\u6210\u3059\u308b\n\nvoid UpdateDiameters()\uff1a\u3053\u3053\u3067\u30ab\u30fc\u30bd\u30eb\u306e\u5186\u306e\u5927\u304d\u3055\u3092\u66f4\u65b0\n\u30fbMesh\u306e\u5186\u306e\u30b5\u30a4\u30ba\u3092\u66f4\u65b0\u3059\u308b\n\u30fb\u901a\u5e38\u306f\u9078\u629e\u3057\u3066\u3044\u306a\u3044\u6642\u306f\u5186\u304c\u5c0f\u3055\u3044\u306e\u3067\u70b9\u306b\u898b\u3048\u308b\n\n3D\u306e\u77e5\u8b58\u306e\u306a\u3044\u79c1\u304b\u3089\u3057\u3066\u307f\u305f\u3089Mesh\u3092\u5186\u304b\u3089\u5225\u306e\u5f62\u306b\u81ea\u7531\u306b\u5909\u3048\u3066\u751f\u6210\u3059\u308b\u306e\u306f\u96e3\u3057\u3044\u3002\n\u306a\u306e\u3067\u30ab\u30fc\u30bd\u30eb\u306b\u306a\u308bGameObject\u306f\u30bd\u30fc\u30b9\u5185\u3067\u751f\u6210\u3067\u306f\u306a\u304f\u3042\u3089\u304b\u3058\u3081\u751f\u6210\u3057\u3066\u304a\u304f\u3002\n\u4f4d\u7f6e\u3084\u30b5\u30a4\u30ba\u306b\u95a2\u3057\u3066\u306f\u30b3\u30fc\u30c9\u304b\u3089\u64cd\u4f5c\u3057\u3066\u307f\u308b\u3002(3D\u3067Mesh\u751f\u6210\u3067\u3084\u308c\u308b\u4eba\u306f\u9811\u5f35\u3063\u3066\u307f\u3066\u2026\u305d\u3057\u3066\u6559\u3048\u3066\u2026)\n\n\u6b21\u56de\u306f\u3053\u306e\u30b3\u30fc\u30c9\u306b\u624b\u3092\u52a0\u3048\u3066\u81ea\u7531\u306a\u5f62\u306e\u30ab\u30fc\u30bd\u30eb\u3092\u8868\u793a\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["GoogleVR", "Unity", "VR"]}