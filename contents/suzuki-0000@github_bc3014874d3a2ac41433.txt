{"tags": ["Objective-C", "Swift", "\u7ffb\u8a33", "FRP", "ReactiveCocoa"], "context": " More than 1 year has passed since last update.ReactiveCocoa\u306e\u4e00\u90e8\u7ffb\u8a33\u3067\u3059\u3002\n\u672c\u5bb6\u306f\u3053\u3061\u3089\n\u7ffb\u8a33\u3057\u305f\u3053\u306e\u6587\u7ae0\u306f\u5b89\u5b9a\u7248\u3067\u306f\u306a\u3044\u305f\u3081\u3001\u3059\u3050\u53e4\u304f\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n\u53c2\u8003\u306b\u3059\u308b\u969b\u306f\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3002\n\n\n\u57fa\u672c\u6f14\u7b97\u5b50\n\u3053\u3053\u3067\u306f\u3001ReactiveCocoa\u306b\u304a\u3044\u3066\u6700\u3082\u4e00\u822c\u7684\u306a\u30aa\u30da\u30ec\u30fc\u30bf\u306e\u3046\u3061\u306e\u3044\u304f\u3064\u3092\u4f7f\u3044\u3001\u305d\u308c\u3089\u306e\u4f7f\u7528\u3092\u793a\u3057\u3066\u3044\u308b\u4f8b\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u8aac\u660e\u3059\u308b\u30aa\u30da\u30ec\u30fc\u30bf\u306fSignal\u304a\u3088\u3073SignalProducer\u3092\u5909\u63db\u3059\u308b\u6a5f\u80fd\u3067\u3059\u3002Swift\u306e\u30ab\u30b9\u30bf\u30e0\u30aa\u30da\u30ec\u30fc\u30bf\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u3059\u306a\u308f\u3061\u3001\u3053\u308c\u3089\u306fReactiveCocoa\u304c\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u63d0\u4f9b\u3059\u308b\u305f\u3081\u306b\u5185\u5305\u3055\u308c\u305f\u30aa\u30da\u30ec\u30fc\u30bf\u3067\u3059\u3002\n\u3053\u3053\u3067\u306fSignal/SignalProducer\u3068\u3082\u306b\u3001\u540c\u3058\u300c\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u300d\u3068\u3057\u3066\u6271\u3044\u307e\u3059\u3002\n\u3082\u3057\u533a\u5225\u304c\u5fc5\u8981\u306a\u5834\u5408\u3001\u540d\u524d\u306b\u3088\u3063\u3066\u533a\u5225\u3057\u307e\u3059\u3002\n\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u52b9\u7528\u306b\u3064\u3044\u3066\n\nObservation\nInjecting effects\n\n\u30aa\u30da\u30ec\u30fc\u30bf\u306e\u69cb\u9020\n\nLifting\n\n\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u5909\u63db\n\nMapping\nFiltering\nAggregating\n\n\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u7d50\u5408\n\nCombining latest values\nZipping\n\nProducer\u306e\u5e73\u5766\u5316\n\nConcatenating\nMerging\nSwitching to the latest\n\n\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n\nCatching errors\nMapping errors\nRetrying\n\n\n\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u52b9\u7528\u306b\u3064\u3044\u3066\n\nObservation\nSignal\u306fObserve function\u3092\u7528\u3044\u3066\u76e3\u8996\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nSignal\u306f\u3069\u306e\u3088\u3046\u306a\u30a4\u30d9\u30f3\u30c8\u304c\u9001\u4fe1\u3055\u308c\u305f\u5834\u5408\u3067\u3082Observer\u3092\u5f15\u6570\u3068\u3057\u3066\u53d7\u3051\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nsignal.observe(Signal.Observer { event in\n    switch event {\n    case let .Next(next):\n        println(\"Next: \\(next)\")\n    case let .Error(error):\n        println(\"Error: \\(error)\")\n    case .Completed:\n        println(\"Completed\")\n    case .Interrupted:\n        println(\"Interrupted\")\n    }\n})\n\n\u3042\u308b\u3044\u306f\u3001 Next\u3001ERROR\u3001Completed\u3001Interrupted\u30a4\u30d9\u30f3\u30c8\u304c\u3001\u30a4\u30d9\u30f3\u30c8\u304c\u5fdc\u7b54\u3057\u305f\u3068\u304d\u306b\u53d7\u3051\u53d6\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\nsignal.observeNext { next in \n  print(\"Next: \\(next)\") \n}\nsignal.observeFailed { error in\n  print(\"Failed: \\(error)\")\n}\nsignal.observeCompleted { \n  print(\"Completed\") \n}\nsignal.observeInterrupted { \n  print(\"Interrupted\")\n}\n\n\u3059\u3079\u3066\u306f\u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u3067\u3042\u308b\u305f\u3081\u3001\uff14\u3064\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3059\u3079\u3066\u3092\u63d0\u4f9b\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u5fc5\u8981\u306a\u3082\u306e\u3060\u3051\u3092\u4f7f\u3048\u3070\u3088\u3044\u306e\u3067\u3059\u3002\n\nInjecting effects\nSignalProducer\u3068\u3057\u3066\u6ce8\u5165\u3067\u304d\u307e\u3059\u3002\u30aa\u30da\u30ec\u30fc\u30bf\u306fon\u3092\u4f7f\u3046\u3053\u3068\u3067\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u751f\u6210\u3092\u884c\u3044\u307e\u3059\u3002\nlet producer = signalProducer\n    .on(started: {\n        print(\"Started\")\n    }, event: { event in\n        print(\"Event: \\(event)\")\n    }, failed: { error in\n        print(\"Failed: \\(error)\")\n    }, completed: {\n        print(\"Completed\")\n    }, interrupted: {\n        print(\"Interrupted\")\n    }, terminated: {\n        print(\"Terminated\")\n    }, disposed: {\n        print(\"Disposed\")\n    }, next: { value in\n        print(\"Next: \\(value)\")\n    })\n\nobserve\u3068\u4f3c\u3066\u3044\u3066\u3001\u5168\u3066\u306f\u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u3067\u3059\u3002\u5fc5\u8981\u306a\u3082\u306e\u3060\u3051\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\nProducer\u3092\u30b9\u30bf\u30fc\u30c8\u3055\u305b\u306a\u3044\u3068\u3001\u306a\u306b\u3082\u30d7\u30ea\u30f3\u30c8\u3055\u308c\u306a\u3044\u306e\u3067\u6c17\u3092\u3064\u3051\u3066\u304f\u3060\u3055\u3044\u306d\u3002\n\n\u30aa\u30da\u30ec\u30fc\u30bf\u306e\u69cb\u9020\n\nLifting\nSignal\u6f14\u7b97\u5b50\u306flift\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3053\u3068\u3067SignalProducer\u4e0a\u306b\u50cd\u304d\u304b\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nlift\u3092\u4e0e\u3048\u3089\u308c\u305f\u305d\u308c\u305e\u308c\u306eSignal\u306f\u65b0\u305f\u306bSignalProducer\u3092\u751f\u6210\u3057\u307e\u3059\u3002 \n\n\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u5909\u63db\n\u3053\u308c\u304b\u3089\u8aac\u660e\u3059\u308b\u30aa\u30da\u30ec\u30fc\u30bf\u306f\u3001\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u65b0\u3057\u3044\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u5909\u63db\u3057\u307e\u3059\u3002 \n\nMapping\nmap\u306f\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u5185\u306e\u5024\u306e\u5909\u63db\u306b\u4f7f\u308f\u308c\u3001\u65b0\u3057\u3044\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u5909\u63db\u7d50\u679c\u3068\u3068\u3082\u306b\u8fd4\u3057\u307e\u3059\u3002\nlet (signal, observer) = Signal<String, NoError>.pipe()\n\nsignal\n    .map { string in string.uppercaseString }\n    .observeNext { next in print(next) }\n\nobserver.sendNext(\"a\")     // Prints A\nobserver.sendNext(\"b\")     // Prints B\nobserver.sendNext(\"c\")     // Prints C\n\nmap\u306e\u3088\u304f\u308f\u304b\u308b\u56f3\u5f0f\n\nFiltering\nfilter\u306f\u5ba3\u8a00\u3055\u308c\u305fFunction\u3092\u6e80\u305f\u3057\u305f\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u5185\u306e\u5024\u306e\u307f\u3092\u5909\u63db\u3057\u307e\u3059\u3002\nlet (signal, observer) = Signal<Int, NoError>.pipe()\n\nsignal\n    .filter { number in number % 2 == 0 }\n    .observeNext { next in print(next) }\n\nobserver.sendNext(1)     // Not printed\nobserver.sendNext(2)     // Prints 2\nobserver.sendNext(3)     // Not printed\nobserver.sendNext(4)     // prints 4\n\nfilter\u306e\u3088\u304f\u308f\u304b\u308b\u56f3\u5f0f\n\nAggregating\nreduce\u306f\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u5185\u306e\u5024\u3092\u96c6\u8a08\u3057\u3001\uff11\u3064\u306e\u5024\u3068\u3057\u307e\u3059\u3002\n\u5909\u63db\u3057\u305f\u3001\u6700\u5f8c\u306e\u5024\u306e\u307f\u304c\u9001\u4fe1\u3055\u308c\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\nlet (signal, observer) = Signal<Int, NoError>.pipe()\n\nsignal\n    .reduce(1) { $0 * $1 }\n    .observeNext { next in print(next) }\n\nobserver.sendNext(1)     // nothing printed\nobserver.sendNext(2)     // nothing printed\nobserver.sendNext(3)     // nothing printed\nobserver.sendCompleted()   // prints 6\n\ncollect\u306f\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u5185\u306e\u5024\u3092\u96c6\u8a08\u3057\u3001\u914d\u5217\u3068\u3057\u3066\u5909\u63db\u3057\u307e\u3059\u3002\n\u5909\u63db\u3057\u305f\u3001\u6700\u5f8c\u306e\u5024\u306e\u307f\u304c\u9001\u4fe1\u3055\u308c\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\nlet (signal, observer) = Signal<Int, NoError>.pipe()\n\nsignal\n    .collect()\n    .observeNext { next in print(next) }\n\nobserver.sendNext(1)     // nothing printed\nobserver.sendNext(2)     // nothing printed\nobserver.sendNext(3)     // nothing printed\nobserver.sendCompleted()   // prints [1, 2, 3]\n\nreduce\u306e\u3088\u304f\u308f\u304b\u308b\u56f3\u5f0f\n\n\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u7d50\u5408\n\u8907\u6570\u306e\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u7d50\u5408\u3057\u3001\uff11\u3064\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u3057\u307e\u3059\u3002\n\nCombining latest values\ncombineLatest\u306f\u30012\u3064\uff08\u307e\u305f\u306f\u305d\u308c\u4ee5\u4e0a\uff09\u306e\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u6700\u65b0\u306e\u5024\u3092\u7d44\u307f\u5408\u308f\u305b\u307e\u3059\u3002\n\u5404\u5165\u529b\u3067\u9001\u4fe1\u3055\u308c\u305f\u5f8c\u3001\u5f97\u3089\u308c\u305f\u6700\u65b0\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u307f\u304c\u5024\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002\n\u305d\u306e\u5f8c\u3001\u306a\u306b\u304b\u5165\u529b\u304c\u3042\u308b\u305f\u3073\u306b\u305d\u308c\u304c\u65b0\u3057\u3044\u5024\u306b\u306a\u308a\u307e\u3059\u3002\nlet (numbersSignal, numbersObserver) = Signal<Int, NoError>.pipe()\nlet (lettersSignal, lettersObserver) = Signal<String, NoError>.pipe()\n\nlet signal = combineLatest(numbersSignal, lettersSignal)\nsignal.observeNext { next in print(\"Next: \\(next)\") }\nsignal.observeCompleted { print(\"Completed\") }\n\nnumbersObserver.sendNext(0)      // nothing printed\nnumbersObserver.sendNext(1)      // nothing printed\nlettersObserver.sendNext(\"A\")    // prints (1, A)\nnumbersObserver.sendNext(2)      // prints (2, A)\nnumbersObserver.sendCompleted()  // nothing printed\nlettersObserver.sendNext(\"B\")    // prints (2, B)\nlettersObserver.sendNext(\"C\")    // prints (2, C)\nlettersObserver.sendCompleted()  // prints \"Completed\"\n\ncombineLatestWith\u306f\u30aa\u30da\u30ec\u30fc\u30bf\u3067\u3042\u308b\u3053\u3068\u3092\u9664\u3044\u3066\u540c\u3058\u3088\u3046\u306b\u52d5\u4f5c\u3057\u307e\u3059\u3002\ncombineLatest\u306e\u3088\u304f\u308f\u304b\u308b\u56f3\u5f0f\n\nZipping\nzip\u306f\u30012\u3064\uff08\u307e\u305f\u306f\u305d\u308c\u4ee5\u4e0a\uff09\u306e\u5024\u3092\u7d50\u5408\u3057\u307e\u3059\u3002\n\u305d\u308c\u305e\u308cN\u756a\u76ee\u306e\u30bf\u30d7\u30eb\u306e\u8981\u7d20\u306f\u3001\u5165\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306eN\u756a\u76ee\u306e\u8981\u7d20\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n\u3059\u306a\u308f\u3061\u3001\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306eN\u756a\u76ee\u306e\u5024\u304c\u305d\u308c\u305e\u308c\u5165\u529b\u3055\u308c\u308b\u307e\u3067\u9001\u4fe1\u3067\u304d\u306a\u3044\uff08\u3057\u306a\u3044\uff09\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\nlet (numbersSignal, numbersObserver) = Signal<Int, NoError>.pipe()\nlet (lettersSignal, lettersObserver) = Signal<String, NoError>.pipe()\n\nlet signal = zip(numbersSignal, lettersSignal)\nsignal.observeNext { next in print(\"Next: \\(next)\") }\nsignal.observeCompleted { print(\"Completed\") }\n\nnumbersObserver.sendNext(0)      // nothing printed\nnumbersObserver.sendNext(1)      // nothing printed\nlettersObserver.sendNext(\"A\")    // prints (0, A)\nnumbersObserver.sendNext(2)      // nothing printed\nnumbersObserver.sendCompleted()  // nothing printed\nlettersObserver.sendNext(\"B\")    // prints (1, B)\nlettersObserver.sendNext(\"C\")    // prints (2, C) & \"Completed\"\n\n\nzipWith\u306f\u30aa\u30da\u30ec\u30fc\u30bf\u3067\u3042\u308b\u3053\u3068\u3092\u9664\u3044\u3066\u540c\u3058\u3088\u3046\u306b\u52d5\u4f5c\u3057\u307e\u3059\u3002\nzip\u306e\u3088\u304f\u308f\u304b\u308b\u56f3\u5f0f\n\nProducer\u306e\u5e73\u5766\u5316\nflatten\u306f\u3001SignalProducer\u3068SignalProducer\u3092\u4e00\u3064\u306eSignalProducer\u3078\u3068\u5909\u63db\u3057\u307e\u3059\u3002\n\u305d\u306e\u5024\u306fFlattenSterategy\u306b\u3057\u305f\u304c\u3063\u3066\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002\n\u3069\u306e\u3088\u3046\u306asterategy\u304c\u5b58\u5728\u3059\u308b\u304b\u306f\u3001\u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u53c2\u8003\u306b\u3059\u308b\u3053\u3068\u3067\u3001\u6642\u9593\u306a\u3069\u306e\u5217\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u60f3\u50cf\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\nlet values = [\n// imagine column offset as time\n[ 1,    2,      3 ],\n   [ 4,      5,     6 ],\n         [ 7,     8 ],\n]\n\nlet merge =\n[ 1, 4, 2, 7,5, 3,8,6 ]\n\nlet concat = \n[ 1,    2,      3,4,      5,     6,7,     8]\n\nlet latest =\n[ 1, 4,    7,     8 ]\n\n\u3069\u306e\u3088\u3046\u306b\u5024\u304c\u30a4\u30f3\u30bf\u30fc\u30ea\u30fc\u30d6\u3057\u3066\u3044\u308b\u304b\u3001\u307e\u305f\u3001\u3069\u306e\u3088\u3046\u306a\u5024\u304c\u7d50\u679c\u306e\u914d\u5217\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u304b\u3001\u6ce8\u610f\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\nMerging\nmerge\u306finnerSignalProducer\u306e\u5024\u3092\u3059\u3050\u306bouterSignalProducer\u3078\u3068\u9001\u4fe1\u3057\u307e\u3059\u3002\n\u3044\u305a\u308c\u304b\u306eproducer\u3067\u4f55\u304b\u3057\u3089\u306e\u30a8\u30e9\u30fc\u304c\u9001\u4fe1\u3055\u308c\u305f\u5834\u5408\u3001\u3059\u3050\u306bflatten\u3055\u308c\u305fSignalProducer\u3078\u3068\u5909\u63db\u3055\u308c\u3001\u5207\u65ad\u3055\u308c\u307e\u3059\u3002\nlet (producerA, lettersObserver) = SignalProducer<String, NoError>.buffer(5)\nlet (producerB, numbersObserver) = SignalProducer<String, NoError>.buffer(5)\nlet (signal, observer) = SignalProducer<SignalProducer<String, NoError>, NoError>.buffer(5)\n\nsignal.flatten(.Merge).startWithNext { next in print(next) }\n\nobserver.sendNext(producerA)\nobserver.sendNext(producerB)\nobserver.sendCompleted()\n\nlettersObserver.sendNext(\"a\")    // prints \"a\"\nnumbersObserver.sendNext(\"1\")    // prints \"1\"\nlettersObserver.sendNext(\"b\")    // prints \"b\"\nnumbersObserver.sendNext(\"2\")    // prints \"2\"\nlettersObserver.sendNext(\"c\")    // prints \"c\"\nnumbersObserver.sendNext(\"3\")    // prints \"3\"\n\nmerge\u306e\u3088\u304f\u308f\u304b\u308b\u56f3\u5f0f\n\nConcatenating\nConcat\u306finnerSignalProducer\u306e\u76f4\u5217\u5316\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002outerSignalProducer\u306f\u3059\u3050\u306b\u30b9\u30bf\u30fc\u30c8\u3057\u307e\u3059\u3002\n\u305d\u308c\u305e\u308c\u306eproducer\u306f\u3001\u73fe\u5728\u51e6\u7406\u3055\u308c\u3066\u3044\u308bproducer\u304ccomplete\u3059\u308b\u307e\u3067\u30b9\u30bf\u30fc\u30c8\u3057\u307e\u305b\u3093\u3002\n\u30a8\u30e9\u30fc\u306e\u5834\u5408\u3001\u3059\u3050\u306bflatten\u3055\u308c\u305fproducer\u3078\u3068\u9001\u4fe1\u3055\u308c\u307e\u3059\u3002\nlet (producerA, lettersObserver) = SignalProducer<String, NoError>.buffer(5)\nlet (producerB, numbersObserver) = SignalProducer<String, NoError>.buffer(5)\nlet (signal, observer) = SignalProducer<SignalProducer<String, NoError>, NoError>.buffer(5)\n\nsignal.flatten(.Concat).startWithNext { next in print(next) }\n\nobserver.sendNext(producerA)\nobserver.sendNext(producerB)\nobserver.sendCompleted()\n\nnumbersObserver.sendNext(\"1\")    // nothing printed\nlettersObserver.sendNext(\"a\")    // prints \"a\"\nlettersObserver.sendNext(\"b\")    // prints \"b\"\nnumbersObserver.sendNext(\"2\")    // nothing printed\nlettersObserver.sendNext(\"c\")    // prints \"c\"\nlettersObserver.sendCompleted()    // prints \"1\", \"2\"\nnumbersObserver.sendNext(\"3\")    // prints \"3\"\nnumbersObserver.sendCompleted()\n\nConcat\u306e\u3088\u304f\u308f\u304b\u308b\u56f3\u5f0f\n\nSwitching to the latest\nLatest\u306f\u6700\u65b0\u306einput\u306e\u307f\u3092\u9001\u4fe1\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\nlet (producerA, observerA) = SignalProducer<String, NoError>.buffer(5)\nlet (producerB, observerB) = SignalProducer<String, NoError>.buffer(5)\nlet (producerC, observerC) = SignalProducer<String, NoError>.buffer(5)\nlet (signal, observer) = SignalProducer<SignalProducer<String, NoError>, NoError>.buffer(5)\n\nsignal.flatten(.Latest).startWithNext { next in print(next) }\n\nobserver.sendNext(producerA)   // nothing printed\nobserverC.sendNext(\"X\")        // nothing printed\nobserverA.sendNext(\"a\")        // prints \"a\"\nobserverB.sendNext(\"1\")        // nothing printed\nobserver.sendNext(producerB)   // prints \"1\"\nobserverA.sendNext(\"b\")        // nothing printed\nobserverB.sendNext(\"2\")        // prints \"2\"\nobserverC.sendNext(\"Y\")        // nothing printed\nobserverA.sendNext(\"c\")        // nothing printed\nobserver.sendNext(producerC)   // prints \"X\", \"Y\"\nobserverB.sendNext(\"3\")        // nothing printed\nobserverC.sendNext(\"Z\")        // prints \"Z\"\n\n\n\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n\u3053\u308c\u304b\u3089\u8aac\u660e\u3059\u308b\u6f14\u7b97\u5b50\u306f\u30a8\u30e9\u30fc\u304c\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u5185\u3067\u767a\u751f\u3057\u305f\u969b\u306b\u4f7f\u7528\u3059\u308b\u3082\u306e\u3067\u3059\u3002\n\nCatching errors\nflatMapError\u306f\u767a\u751f\u3057\u305f\u30a8\u30e9\u30fc\u3092SignalProducer\u3067\u53d7\u3051\u53d6\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\ncatch\u306e\u5f8c\u306b\u3001\u65b0\u3057\u3044SignalProducer\u304c\u30b9\u30bf\u30fc\u30c8\u3057\u307e\u3059\u3002\nlet (producer, observer) = SignalProducer<String, NSError>.buffer(5)\nlet error = NSError(domain: \"domain\", code: 0, userInfo: nil)\n\nproducer\n    .flatMapError { _ in SignalProducer<String, NoError>(value: \"Default\") }\n    .startWithNext { next in print(next) }\n\n\nobserver.sendNext(\"First\")     // prints \"First\"\nobserver.sendNext(\"Second\")    // prints \"Second\"\nobserver.sendFailed(error)     // prints \"Default\"\n\n\nRetrying\nretry\u306f\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u969b\u306b\u30aa\u30ea\u30b8\u30ca\u30eb\u306eSignalProducer\u3092\u5fc5\u8981\u306a\u6570\u3060\u3051\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3002\nvar tries = 0\nlet limit = 2\nlet error = NSError(domain: \"domain\", code: 0, userInfo: nil)\nlet producer = SignalProducer<String, NSError> { (observer, _) in\n    if tries++ < limit {\n        observer.sendFailed(error)\n    } else {\n        observer.sendNext(\"Success\")\n        observer.sendCompleted()\n    }\n}\n\nproducer\n    .on(failed: {e in print(\"Failure\")})    // prints \"Failure\" twice\n    .retry(2)\n    .start { event in\n        switch event {\n        case let .Next(next):\n            print(next)                     // prints \"Success\"\n        case let .Failed(error):\n            print(\"Failed: \\(error)\")\n        case .Completed:\n            print(\"Completed\")\n        case .Interrupted:\n            print(\"Interrupted\")\n        }\n    }\n\n\u3082\u3057SignalProducer\u304c\u5fc5\u8981\u306aretry\u5206\u3067\u6210\u529f\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u3001fail\u3057\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u4e0a\u8a18\u306e\u5834\u5408\u3001retry(1)\u3092\u4f7f\u3063\u305f\u5834\u5408\u3001\"Success\"\u306e\u4ee3\u308f\u308a\u306b\"Signal Failure\"\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\nMapping errors\nmapError\u306f\u30b9\u30c8\u30ea\u30fc\u30e0\u5185\u3067\u767a\u751f\u3057\u305f\u4f55\u304b\u3057\u3089\u306e\u30a8\u30e9\u30fc\u3092\u65b0\u3057\u3044\u30a8\u30e9\u30fc\u3078\u3068\u5909\u63db\u3057\u307e\u3059\u3002\nenum CustomError: String, ErrorType {\n    case Foo = \"Foo\"\n    case Bar = \"Bar\"\n    case Other = \"Other\"\n\n    var nsError: NSError {\n        return NSError(domain: \"CustomError.\\(rawValue)\", code: 0, userInfo: nil)\n    }\n\n    var description: String {\n        return \"\\(rawValue) Error\"\n    }\n}\n\nlet (signal, observer) = Signal<String, NSError>.pipe()\n\nsignal\n    .mapError { (error: NSError) -> CustomError in\n        switch error.domain {\n        case \"com.example.foo\":\n            return .Foo\n        case \"com.example.bar\":\n            return .Bar\n        default:\n            return .Other\n        }\n    }\n    .observeFailed { error in\n        print(error)\n    }\n\nobserver.sendFailed(NSError(domain: \"com.example.foo\", code: 42, userInfo: nil))    // prints \"Foo Error\"\n\n\nPromote\npromoteErrors\u306f\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u304c\u30a8\u30e9\u30fc\u3092\u751f\u6210\u3067\u304d\u306a\u3044\u3082\u306e\u3092\u4e00\u3064\u306e\u30a8\u30e9\u30fc\u3078\u3068\u6607\u683c\u3055\u305b\u307e\u3059\u3002\nlet (numbersSignal, numbersObserver) = Signal<Int, NoError>.pipe()\nlet (lettersSignal, lettersObserver) = Signal<String, NSError>.pipe()\n\nnumbersSignal\n    .promoteErrors(NSError)\n    .combineLatestWith(lettersSignal)\n\n\u3053\u308c\u3089\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u306f\u5b9f\u969b\u306b\u306f\u30a8\u30e9\u30fc\u3092\u751f\u6210\u3057\u307e\u305b\u3093\u304c\u3001\u3053\u308c\u306f\u3044\u304f\u3064\u304b\u306e\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u7d50\u5408\u6f14\u7b97\u5b50\uff08\u306a\u306b\u304b\u306e\u30a8\u30e9\u30fc\u3092\u5fc5\u8981\u3068\u3059\u308b\uff09\u306b\u304a\u3044\u3066\u6709\u7528\u3067\u3059\u3002  \nReactiveCocoa\u306e\u4e00\u90e8\u7ffb\u8a33\u3067\u3059\u3002\n\n\u672c\u5bb6\u306f[\u3053\u3061\u3089](https://github.com/ReactiveCocoa/ReactiveCocoa/tree/master/Documentation)\n\n\u7ffb\u8a33\u3057\u305f\u3053\u306e\u6587\u7ae0\u306f\u5b89\u5b9a\u7248\u3067\u306f\u306a\u3044\u305f\u3081\u3001\u3059\u3050\u53e4\u304f\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n\u53c2\u8003\u306b\u3059\u308b\u969b\u306f\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3002\n\n\n---\n\n\n# \u57fa\u672c\u6f14\u7b97\u5b50\n\n\u3053\u3053\u3067\u306f\u3001ReactiveCocoa\u306b\u304a\u3044\u3066\u6700\u3082\u4e00\u822c\u7684\u306a\u30aa\u30da\u30ec\u30fc\u30bf\u306e\u3046\u3061\u306e\u3044\u304f\u3064\u3092\u4f7f\u3044\u3001\u305d\u308c\u3089\u306e\u4f7f\u7528\u3092\u793a\u3057\u3066\u3044\u308b\u4f8b\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\n\u3053\u3053\u3067\u8aac\u660e\u3059\u308b\u30aa\u30da\u30ec\u30fc\u30bf\u306fSignal\u304a\u3088\u3073SignalProducer\u3092\u5909\u63db\u3059\u308b\u6a5f\u80fd\u3067\u3059\u3002Swift\u306e\u30ab\u30b9\u30bf\u30e0\u30aa\u30da\u30ec\u30fc\u30bf\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u3059\u306a\u308f\u3061\u3001\u3053\u308c\u3089\u306fReactiveCocoa\u304c\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u63d0\u4f9b\u3059\u308b\u305f\u3081\u306b\u5185\u5305\u3055\u308c\u305f\u30aa\u30da\u30ec\u30fc\u30bf\u3067\u3059\u3002\n\n\u3053\u3053\u3067\u306fSignal/SignalProducer\u3068\u3082\u306b\u3001\u540c\u3058\u300c\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u300d\u3068\u3057\u3066\u6271\u3044\u307e\u3059\u3002\n\u3082\u3057\u533a\u5225\u304c\u5fc5\u8981\u306a\u5834\u5408\u3001\u540d\u524d\u306b\u3088\u3063\u3066\u533a\u5225\u3057\u307e\u3059\u3002\n\n**[\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u52b9\u7528\u306b\u3064\u3044\u3066](#\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u52b9\u7528\u306b\u3064\u3044\u3066)**\n\n  1. [Observation](#observation)\n  1. [Injecting effects](#injecting-effects)\n\n**[\u30aa\u30da\u30ec\u30fc\u30bf\u306e\u69cb\u9020](#\u30aa\u30da\u30ec\u30fc\u30bf\u306e\u69cb\u9020)**\n\n  1. [Lifting](#lifting)\n\n**[\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u5909\u63db](#\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u5909\u63db)**\n\n  1. [Mapping](#mapping)\n  1. [Filtering](#filtering)\n  1. [Aggregating](#aggregating)\n\n**[\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u7d50\u5408](#\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u7d50\u5408)**\n\n  1. [Combining latest values](#combining-latest-values)\n  1. [Zipping](#zipping)\n\n**[Producer\u306e\u5e73\u5766\u5316](#producer\u306e\u5e73\u5766\u5316)**\n\n  1. [Concatenating](#concatenating)\n  1. [Merging](#merging)\n  1. [Switching to the latest](#switching-to-the-latest)\n\n**[\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0](#\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0)**\n\n  1. [Catching errors](#catch)\n  1. [Mapping errors](#mapping-error)\n  1. [Retrying](#retrying)\n\n## \u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u52b9\u7528\u306b\u3064\u3044\u3066\n\n### Observation\n\n`Signal`\u306f`Observe` function\u3092\u7528\u3044\u3066\u76e3\u8996\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nSignal\u306f\u3069\u306e\u3088\u3046\u306a\u30a4\u30d9\u30f3\u30c8\u304c\u9001\u4fe1\u3055\u308c\u305f\u5834\u5408\u3067\u3082`Observer`\u3092\u5f15\u6570\u3068\u3057\u3066\u53d7\u3051\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```Swift\nsignal.observe(Signal.Observer { event in\n    switch event {\n    case let .Next(next):\n        println(\"Next: \\(next)\")\n    case let .Error(error):\n        println(\"Error: \\(error)\")\n    case .Completed:\n        println(\"Completed\")\n    case .Interrupted:\n        println(\"Interrupted\")\n    }\n})\n```\n\n\u3042\u308b\u3044\u306f\u3001 ` Next`\u3001` ERROR`\u3001`Completed`\u3001` Interrupted`\u30a4\u30d9\u30f3\u30c8\u304c\u3001\u30a4\u30d9\u30f3\u30c8\u304c\u5fdc\u7b54\u3057\u305f\u3068\u304d\u306b\u53d7\u3051\u53d6\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n```Swift\nsignal.observeNext { next in \n  print(\"Next: \\(next)\") \n}\nsignal.observeFailed { error in\n  print(\"Failed: \\(error)\")\n}\nsignal.observeCompleted { \n  print(\"Completed\") \n}\nsignal.observeInterrupted { \n  print(\"Interrupted\")\n}\n```\n\n\u3059\u3079\u3066\u306f\u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u3067\u3042\u308b\u305f\u3081\u3001\uff14\u3064\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3059\u3079\u3066\u3092\u63d0\u4f9b\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u5fc5\u8981\u306a\u3082\u306e\u3060\u3051\u3092\u4f7f\u3048\u3070\u3088\u3044\u306e\u3067\u3059\u3002\n\n### Injecting effects\n\n`SignalProducer`\u3068\u3057\u3066\u6ce8\u5165\u3067\u304d\u307e\u3059\u3002\u30aa\u30da\u30ec\u30fc\u30bf\u306f`on`\u3092\u4f7f\u3046\u3053\u3068\u3067\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u751f\u6210\u3092\u884c\u3044\u307e\u3059\u3002\n\n```Swift\nlet producer = signalProducer\n    .on(started: {\n        print(\"Started\")\n    }, event: { event in\n        print(\"Event: \\(event)\")\n    }, failed: { error in\n        print(\"Failed: \\(error)\")\n    }, completed: {\n        print(\"Completed\")\n    }, interrupted: {\n        print(\"Interrupted\")\n    }, terminated: {\n        print(\"Terminated\")\n    }, disposed: {\n        print(\"Disposed\")\n    }, next: { value in\n        print(\"Next: \\(value)\")\n    })\n```\n\n`observe`\u3068\u4f3c\u3066\u3044\u3066\u3001\u5168\u3066\u306f\u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u3067\u3059\u3002\u5fc5\u8981\u306a\u3082\u306e\u3060\u3051\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\nProducer\u3092\u30b9\u30bf\u30fc\u30c8\u3055\u305b\u306a\u3044\u3068\u3001\u306a\u306b\u3082\u30d7\u30ea\u30f3\u30c8\u3055\u308c\u306a\u3044\u306e\u3067\u6c17\u3092\u3064\u3051\u3066\u304f\u3060\u3055\u3044\u306d\u3002\n\n## \u30aa\u30da\u30ec\u30fc\u30bf\u306e\u69cb\u9020\n\n### Lifting\n\n`Signal`\u6f14\u7b97\u5b50\u306f`lift`\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3053\u3068\u3067`SignalProducer`\u4e0a\u306b\u50cd\u304d\u304b\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n`lift`\u3092\u4e0e\u3048\u3089\u308c\u305f\u305d\u308c\u305e\u308c\u306eSignal\u306f\u65b0\u305f\u306bSignalProducer\u3092\u751f\u6210\u3057\u307e\u3059\u3002 \n\n\n## \u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u5909\u63db\n\n\u3053\u308c\u304b\u3089\u8aac\u660e\u3059\u308b\u30aa\u30da\u30ec\u30fc\u30bf\u306f\u3001\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u65b0\u3057\u3044\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u5909\u63db\u3057\u307e\u3059\u3002 \n\n### Mapping\n\n`map`\u306f\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u5185\u306e\u5024\u306e\u5909\u63db\u306b\u4f7f\u308f\u308c\u3001\u65b0\u3057\u3044\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u5909\u63db\u7d50\u679c\u3068\u3068\u3082\u306b\u8fd4\u3057\u307e\u3059\u3002\n\n```Swift\nlet (signal, observer) = Signal<String, NoError>.pipe()\n\nsignal\n    .map { string in string.uppercaseString }\n    .observeNext { next in print(next) }\n\nobserver.sendNext(\"a\")     // Prints A\nobserver.sendNext(\"b\")     // Prints B\nobserver.sendNext(\"c\")     // Prints C\n```\n\n[map\u306e\u3088\u304f\u308f\u304b\u308b\u56f3\u5f0f](http://neilpa.me/rac-marbles/#map)\n\n### Filtering\n\n`filter`\u306f\u5ba3\u8a00\u3055\u308c\u305fFunction\u3092\u6e80\u305f\u3057\u305f\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u5185\u306e\u5024\u306e\u307f\u3092\u5909\u63db\u3057\u307e\u3059\u3002\n\n```Swift\nlet (signal, observer) = Signal<Int, NoError>.pipe()\n\nsignal\n    .filter { number in number % 2 == 0 }\n    .observeNext { next in print(next) }\n\nobserver.sendNext(1)     // Not printed\nobserver.sendNext(2)     // Prints 2\nobserver.sendNext(3)     // Not printed\nobserver.sendNext(4)     // prints 4\n```\n\n[filter\u306e\u3088\u304f\u308f\u304b\u308b\u56f3\u5f0f](http://neilpa.me/rac-marbles/#filter)\n\n### Aggregating\n\n`reduce`\u306f\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u5185\u306e\u5024\u3092\u96c6\u8a08\u3057\u3001\uff11\u3064\u306e\u5024\u3068\u3057\u307e\u3059\u3002\n\u5909\u63db\u3057\u305f\u3001\u6700\u5f8c\u306e\u5024\u306e\u307f\u304c\u9001\u4fe1\u3055\u308c\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\n\n```Swift\nlet (signal, observer) = Signal<Int, NoError>.pipe()\n\nsignal\n    .reduce(1) { $0 * $1 }\n    .observeNext { next in print(next) }\n\nobserver.sendNext(1)     // nothing printed\nobserver.sendNext(2)     // nothing printed\nobserver.sendNext(3)     // nothing printed\nobserver.sendCompleted()   // prints 6\n```\n\n\n`collect`\u306f\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u5185\u306e\u5024\u3092\u96c6\u8a08\u3057\u3001\u914d\u5217\u3068\u3057\u3066\u5909\u63db\u3057\u307e\u3059\u3002\n\u5909\u63db\u3057\u305f\u3001\u6700\u5f8c\u306e\u5024\u306e\u307f\u304c\u9001\u4fe1\u3055\u308c\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\n\n```Swift\nlet (signal, observer) = Signal<Int, NoError>.pipe()\n\nsignal\n    .collect()\n    .observeNext { next in print(next) }\n\nobserver.sendNext(1)     // nothing printed\nobserver.sendNext(2)     // nothing printed\nobserver.sendNext(3)     // nothing printed\nobserver.sendCompleted()   // prints [1, 2, 3]\n```\n\n[reduce\u306e\u3088\u304f\u308f\u304b\u308b\u56f3\u5f0f](http://neilpa.me/rac-marbles/#reduce)\n\n## \u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u7d50\u5408\n\n\u8907\u6570\u306e\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u7d50\u5408\u3057\u3001\uff11\u3064\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u3057\u307e\u3059\u3002\n\n### Combining latest values\n\n`combineLatest`\u306f\u30012\u3064\uff08\u307e\u305f\u306f\u305d\u308c\u4ee5\u4e0a\uff09\u306e\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u6700\u65b0\u306e\u5024\u3092\u7d44\u307f\u5408\u308f\u305b\u307e\u3059\u3002\n\n\u5404\u5165\u529b\u3067\u9001\u4fe1\u3055\u308c\u305f\u5f8c\u3001\u5f97\u3089\u308c\u305f\u6700\u65b0\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u307f\u304c\u5024\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002\n\u305d\u306e\u5f8c\u3001\u306a\u306b\u304b\u5165\u529b\u304c\u3042\u308b\u305f\u3073\u306b\u305d\u308c\u304c\u65b0\u3057\u3044\u5024\u306b\u306a\u308a\u307e\u3059\u3002\n\n```Swift\nlet (numbersSignal, numbersObserver) = Signal<Int, NoError>.pipe()\nlet (lettersSignal, lettersObserver) = Signal<String, NoError>.pipe()\n\nlet signal = combineLatest(numbersSignal, lettersSignal)\nsignal.observeNext { next in print(\"Next: \\(next)\") }\nsignal.observeCompleted { print(\"Completed\") }\n\nnumbersObserver.sendNext(0)      // nothing printed\nnumbersObserver.sendNext(1)      // nothing printed\nlettersObserver.sendNext(\"A\")    // prints (1, A)\nnumbersObserver.sendNext(2)      // prints (2, A)\nnumbersObserver.sendCompleted()  // nothing printed\nlettersObserver.sendNext(\"B\")    // prints (2, B)\nlettersObserver.sendNext(\"C\")    // prints (2, C)\nlettersObserver.sendCompleted()  // prints \"Completed\"\n```\n\n`combineLatestWith`\u306f\u30aa\u30da\u30ec\u30fc\u30bf\u3067\u3042\u308b\u3053\u3068\u3092\u9664\u3044\u3066\u540c\u3058\u3088\u3046\u306b\u52d5\u4f5c\u3057\u307e\u3059\u3002\n\n[combineLatest\u306e\u3088\u304f\u308f\u304b\u308b\u56f3\u5f0f](http://neilpa.me/rac-marbles/#combineLatest)\n\n### Zipping\n\n`zip`\u306f\u30012\u3064\uff08\u307e\u305f\u306f\u305d\u308c\u4ee5\u4e0a\uff09\u306e\u5024\u3092\u7d50\u5408\u3057\u307e\u3059\u3002\n\u305d\u308c\u305e\u308cN\u756a\u76ee\u306e\u30bf\u30d7\u30eb\u306e\u8981\u7d20\u306f\u3001\u5165\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306eN\u756a\u76ee\u306e\u8981\u7d20\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n\n\u3059\u306a\u308f\u3061\u3001\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306eN\u756a\u76ee\u306e\u5024\u304c\u305d\u308c\u305e\u308c\u5165\u529b\u3055\u308c\u308b\u307e\u3067\u9001\u4fe1\u3067\u304d\u306a\u3044\uff08\u3057\u306a\u3044\uff09\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\n\n```Swift\nlet (numbersSignal, numbersObserver) = Signal<Int, NoError>.pipe()\nlet (lettersSignal, lettersObserver) = Signal<String, NoError>.pipe()\n\nlet signal = zip(numbersSignal, lettersSignal)\nsignal.observeNext { next in print(\"Next: \\(next)\") }\nsignal.observeCompleted { print(\"Completed\") }\n\nnumbersObserver.sendNext(0)      // nothing printed\nnumbersObserver.sendNext(1)      // nothing printed\nlettersObserver.sendNext(\"A\")    // prints (0, A)\nnumbersObserver.sendNext(2)      // nothing printed\nnumbersObserver.sendCompleted()  // nothing printed\nlettersObserver.sendNext(\"B\")    // prints (1, B)\nlettersObserver.sendNext(\"C\")    // prints (2, C) & \"Completed\"\n\n```\n\n`zipWith`\u306f\u30aa\u30da\u30ec\u30fc\u30bf\u3067\u3042\u308b\u3053\u3068\u3092\u9664\u3044\u3066\u540c\u3058\u3088\u3046\u306b\u52d5\u4f5c\u3057\u307e\u3059\u3002\n[zip\u306e\u3088\u304f\u308f\u304b\u308b\u56f3\u5f0f](http://neilpa.me/rac-marbles/#zip)\n\n\n## Producer\u306e\u5e73\u5766\u5316\n\n`flatten`\u306f\u3001SignalProducer\u3068SignalProducer\u3092\u4e00\u3064\u306eSignalProducer\u3078\u3068\u5909\u63db\u3057\u307e\u3059\u3002\n\u305d\u306e\u5024\u306f`FlattenSterategy`\u306b\u3057\u305f\u304c\u3063\u3066\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002\n\n\u3069\u306e\u3088\u3046\u306asterategy\u304c\u5b58\u5728\u3059\u308b\u304b\u306f\u3001\u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u53c2\u8003\u306b\u3059\u308b\u3053\u3068\u3067\u3001\u6642\u9593\u306a\u3069\u306e\u5217\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u60f3\u50cf\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n```Swift\nlet values = [\n// imagine column offset as time\n[ 1,    2,      3 ],\n   [ 4,      5,     6 ],\n         [ 7,     8 ],\n]\n\nlet merge =\n[ 1, 4, 2, 7,5, 3,8,6 ]\n\nlet concat = \n[ 1,    2,      3,4,      5,     6,7,     8]\n\nlet latest =\n[ 1, 4,    7,     8 ]\n```\n\n\u3069\u306e\u3088\u3046\u306b\u5024\u304c\u30a4\u30f3\u30bf\u30fc\u30ea\u30fc\u30d6\u3057\u3066\u3044\u308b\u304b\u3001\u307e\u305f\u3001\u3069\u306e\u3088\u3046\u306a\u5024\u304c\u7d50\u679c\u306e\u914d\u5217\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u304b\u3001\u6ce8\u610f\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n### Merging\n\n`merge`\u306finner`SignalProducer`\u306e\u5024\u3092\u3059\u3050\u306bouter`SignalProducer`\u3078\u3068\u9001\u4fe1\u3057\u307e\u3059\u3002\n\u3044\u305a\u308c\u304b\u306eproducer\u3067\u4f55\u304b\u3057\u3089\u306e\u30a8\u30e9\u30fc\u304c\u9001\u4fe1\u3055\u308c\u305f\u5834\u5408\u3001\u3059\u3050\u306bflatten\u3055\u308c\u305fSignalProducer\u3078\u3068\u5909\u63db\u3055\u308c\u3001\u5207\u65ad\u3055\u308c\u307e\u3059\u3002\n\n```Swift\nlet (producerA, lettersObserver) = SignalProducer<String, NoError>.buffer(5)\nlet (producerB, numbersObserver) = SignalProducer<String, NoError>.buffer(5)\nlet (signal, observer) = SignalProducer<SignalProducer<String, NoError>, NoError>.buffer(5)\n\nsignal.flatten(.Merge).startWithNext { next in print(next) }\n\nobserver.sendNext(producerA)\nobserver.sendNext(producerB)\nobserver.sendCompleted()\n\nlettersObserver.sendNext(\"a\")    // prints \"a\"\nnumbersObserver.sendNext(\"1\")    // prints \"1\"\nlettersObserver.sendNext(\"b\")    // prints \"b\"\nnumbersObserver.sendNext(\"2\")    // prints \"2\"\nlettersObserver.sendNext(\"c\")    // prints \"c\"\nnumbersObserver.sendNext(\"3\")    // prints \"3\"\n```\n\n[merge\u306e\u3088\u304f\u308f\u304b\u308b\u56f3\u5f0f](http://neilpa.me/rac-marbles/#merge)\n\n### Concatenating\n\n`Concat`\u306finner`SignalProducer`\u306e\u76f4\u5217\u5316\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002outer`SignalProducer`\u306f\u3059\u3050\u306b\u30b9\u30bf\u30fc\u30c8\u3057\u307e\u3059\u3002\n\u305d\u308c\u305e\u308c\u306eproducer\u306f\u3001\u73fe\u5728\u51e6\u7406\u3055\u308c\u3066\u3044\u308bproducer\u304ccomplete\u3059\u308b\u307e\u3067\u30b9\u30bf\u30fc\u30c8\u3057\u307e\u305b\u3093\u3002\n\u30a8\u30e9\u30fc\u306e\u5834\u5408\u3001\u3059\u3050\u306bflatten\u3055\u308c\u305fproducer\u3078\u3068\u9001\u4fe1\u3055\u308c\u307e\u3059\u3002\n\n\n```Swift\nlet (producerA, lettersObserver) = SignalProducer<String, NoError>.buffer(5)\nlet (producerB, numbersObserver) = SignalProducer<String, NoError>.buffer(5)\nlet (signal, observer) = SignalProducer<SignalProducer<String, NoError>, NoError>.buffer(5)\n\nsignal.flatten(.Concat).startWithNext { next in print(next) }\n\nobserver.sendNext(producerA)\nobserver.sendNext(producerB)\nobserver.sendCompleted()\n\nnumbersObserver.sendNext(\"1\")    // nothing printed\nlettersObserver.sendNext(\"a\")    // prints \"a\"\nlettersObserver.sendNext(\"b\")    // prints \"b\"\nnumbersObserver.sendNext(\"2\")    // nothing printed\nlettersObserver.sendNext(\"c\")    // prints \"c\"\nlettersObserver.sendCompleted()    // prints \"1\", \"2\"\nnumbersObserver.sendNext(\"3\")    // prints \"3\"\nnumbersObserver.sendCompleted()\n```\n\n[Concat\u306e\u3088\u304f\u308f\u304b\u308b\u56f3\u5f0f](http://neilpa.me/rac-marbles/#concat)\n\n### Switching to the latest\n\n`Latest`\u306f\u6700\u65b0\u306einput\u306e\u307f\u3092\u9001\u4fe1\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\n\n```Swift\nlet (producerA, observerA) = SignalProducer<String, NoError>.buffer(5)\nlet (producerB, observerB) = SignalProducer<String, NoError>.buffer(5)\nlet (producerC, observerC) = SignalProducer<String, NoError>.buffer(5)\nlet (signal, observer) = SignalProducer<SignalProducer<String, NoError>, NoError>.buffer(5)\n\nsignal.flatten(.Latest).startWithNext { next in print(next) }\n\nobserver.sendNext(producerA)   // nothing printed\nobserverC.sendNext(\"X\")        // nothing printed\nobserverA.sendNext(\"a\")        // prints \"a\"\nobserverB.sendNext(\"1\")        // nothing printed\nobserver.sendNext(producerB)   // prints \"1\"\nobserverA.sendNext(\"b\")        // nothing printed\nobserverB.sendNext(\"2\")        // prints \"2\"\nobserverC.sendNext(\"Y\")        // nothing printed\nobserverA.sendNext(\"c\")        // nothing printed\nobserver.sendNext(producerC)   // prints \"X\", \"Y\"\nobserverB.sendNext(\"3\")        // nothing printed\nobserverC.sendNext(\"Z\")        // prints \"Z\"\n```\n\n## \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n\n\u3053\u308c\u304b\u3089\u8aac\u660e\u3059\u308b\u6f14\u7b97\u5b50\u306f\u30a8\u30e9\u30fc\u304c\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u5185\u3067\u767a\u751f\u3057\u305f\u969b\u306b\u4f7f\u7528\u3059\u308b\u3082\u306e\u3067\u3059\u3002\n\n### Catching errors\n\n`flatMapError`\u306f\u767a\u751f\u3057\u305f\u30a8\u30e9\u30fc\u3092`SignalProducer`\u3067\u53d7\u3051\u53d6\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\ncatch\u306e\u5f8c\u306b\u3001\u65b0\u3057\u3044SignalProducer\u304c\u30b9\u30bf\u30fc\u30c8\u3057\u307e\u3059\u3002\n\n\n```Swift\nlet (producer, observer) = SignalProducer<String, NSError>.buffer(5)\nlet error = NSError(domain: \"domain\", code: 0, userInfo: nil)\n\nproducer\n    .flatMapError { _ in SignalProducer<String, NoError>(value: \"Default\") }\n    .startWithNext { next in print(next) }\n\n\nobserver.sendNext(\"First\")     // prints \"First\"\nobserver.sendNext(\"Second\")    // prints \"Second\"\nobserver.sendFailed(error)     // prints \"Default\"\n```\n\n### Retrying\n\n`retry`\u306f\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u969b\u306b\u30aa\u30ea\u30b8\u30ca\u30eb\u306eSignalProducer\u3092\u5fc5\u8981\u306a\u6570\u3060\u3051\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3002\n\n```Swift\nvar tries = 0\nlet limit = 2\nlet error = NSError(domain: \"domain\", code: 0, userInfo: nil)\nlet producer = SignalProducer<String, NSError> { (observer, _) in\n    if tries++ < limit {\n        observer.sendFailed(error)\n    } else {\n        observer.sendNext(\"Success\")\n        observer.sendCompleted()\n    }\n}\n\nproducer\n    .on(failed: {e in print(\"Failure\")})    // prints \"Failure\" twice\n    .retry(2)\n    .start { event in\n        switch event {\n        case let .Next(next):\n            print(next)                     // prints \"Success\"\n        case let .Failed(error):\n            print(\"Failed: \\(error)\")\n        case .Completed:\n            print(\"Completed\")\n        case .Interrupted:\n            print(\"Interrupted\")\n        }\n    }\n```\n\n\u3082\u3057`SignalProducer`\u304c\u5fc5\u8981\u306aretry\u5206\u3067\u6210\u529f\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u3001fail\u3057\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u4e0a\u8a18\u306e\u5834\u5408\u3001`retry(1)`\u3092\u4f7f\u3063\u305f\u5834\u5408\u3001`\"Success\"`\u306e\u4ee3\u308f\u308a\u306b`\"Signal Failure\"`\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\n### Mapping errors\n\n`mapError`\u306f\u30b9\u30c8\u30ea\u30fc\u30e0\u5185\u3067\u767a\u751f\u3057\u305f\u4f55\u304b\u3057\u3089\u306e\u30a8\u30e9\u30fc\u3092\u65b0\u3057\u3044\u30a8\u30e9\u30fc\u3078\u3068\u5909\u63db\u3057\u307e\u3059\u3002\n\n```Swift\nenum CustomError: String, ErrorType {\n    case Foo = \"Foo\"\n    case Bar = \"Bar\"\n    case Other = \"Other\"\n    \n    var nsError: NSError {\n        return NSError(domain: \"CustomError.\\(rawValue)\", code: 0, userInfo: nil)\n    }\n    \n    var description: String {\n        return \"\\(rawValue) Error\"\n    }\n}\n\nlet (signal, observer) = Signal<String, NSError>.pipe()\n\nsignal\n    .mapError { (error: NSError) -> CustomError in\n        switch error.domain {\n        case \"com.example.foo\":\n            return .Foo\n        case \"com.example.bar\":\n            return .Bar\n        default:\n            return .Other\n        }\n    }\n    .observeFailed { error in\n        print(error)\n    }\n\nobserver.sendFailed(NSError(domain: \"com.example.foo\", code: 42, userInfo: nil))    // prints \"Foo Error\"\n```\n\n### Promote\n\n`promoteErrors`\u306f\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u304c\u30a8\u30e9\u30fc\u3092\u751f\u6210\u3067\u304d\u306a\u3044\u3082\u306e\u3092\u4e00\u3064\u306e\u30a8\u30e9\u30fc\u3078\u3068\u6607\u683c\u3055\u305b\u307e\u3059\u3002\n\n```Swift\nlet (numbersSignal, numbersObserver) = Signal<Int, NoError>.pipe()\nlet (lettersSignal, lettersObserver) = Signal<String, NSError>.pipe()\n\nnumbersSignal\n    .promoteErrors(NSError)\n    .combineLatestWith(lettersSignal)\n```\n\n\u3053\u308c\u3089\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u306f\u5b9f\u969b\u306b\u306f\u30a8\u30e9\u30fc\u3092\u751f\u6210\u3057\u307e\u305b\u3093\u304c\u3001\u3053\u308c\u306f\u3044\u304f\u3064\u304b\u306e\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u7d50\u5408\u6f14\u7b97\u5b50\uff08\u306a\u306b\u304b\u306e\u30a8\u30e9\u30fc\u3092\u5fc5\u8981\u3068\u3059\u308b\uff09\u306b\u304a\u3044\u3066\u6709\u7528\u3067\u3059\u3002  \n\n\n\n"}