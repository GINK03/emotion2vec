{"context": " More than 1 year has passed since last update.\n\n\u524d\u7f6e\u304d\n\u30b0\u30e9\u30d5\u4e0a\u306e\u30ce\u30fc\u30c9\u306e\u30e9\u30d9\u30eb\u3092\u63a8\u5b9a\u3059\u308b\u624b\u6cd5\u3002\nlp.py\u306f\u3053\u3053\u3092\u53c2\u8003\u306b\u3057\u3066\u5b9f\u88c5\u3057\u305f\u3002\u3068\u3044\u3046\u304b\u307b\u3068\u3093\u3069\u305d\u306e\u307e\u307e\u3002\nlp_original.py\u306f\u8ad6\u6587\u306e\uff12\u7ae0\u3092\u53c2\u8003\u306b\u3057\u3066\u5b9f\u88c5\u3057\u305f\u3002\nlp_original.py\u3067\u306f\u9023\u7acb\u65b9\u7a0b\u5f0f\u3092\u89e3\u304b\u306a\u3044\u3067\u7e70\u308a\u8fd4\u3057\u7e70\u308a\u8fd4\u3057\u884c\u5217\u7a4d\u3092\u8a08\u7b97\u3057\u3066\u3044\u304f\u65b9\u6cd5\u3082\u5b9f\u88c5\u3057\u305f\uff08lp_iter\uff09\u3002\n\n\u5b9f\u88c5\n\nlp.py\n# -*- coding: utf-8 -*-\nimport sys\nfrom scipy.sparse import *\nfrom scipy.sparse.linalg import spsolve\n\ndef load_adjucency(filename,n):\n    W = lil_matrix((n,n))\n    for line in open(filename, 'r'):\n        entries = line.rstrip().split(' ')\n        src = int(entries[0])\n        dst = int(entries[1])\n        W[src,dst] = 1\n    return W\n\ndef load_labels(filename,n):\n    y = lil_matrix((1,n))\n    for line in open(filename, 'r'):\n        entries = line.rstrip().split(' ')\n        nid = int(entries[0])\n        label = int(entries[1])\n        y[0,nid] = label\n    return y\n\nn = int(sys.argv[1])\nW = load_adjucency(sys.argv[2],n)\ny = load_labels(sys.argv[3],n)\n\nD = dia_matrix((W.sum(0),[0]), W.shape)\nL = D - W\n\nI = identity(W.shape[0])\n\nlam = 1\nf = spsolve((I + lam * L), y)\nprint f\n\n\n\nlp_original.py\n# -*- coding: utf-8 -*-\nimport sys\nfrom scipy.sparse import *\nfrom scipy.sparse.linalg import spsolve\nfrom sklearn.preprocessing import normalize\n\ndef load_matrix(filename,n,m):\n    W = lil_matrix((n+m,n+m))\n    for line in open(filename, 'r'):\n        entries = line.rstrip().split(' ')\n        src = int(entries[0])\n        dst = int(entries[1])\n        W[src,dst] = 1\n    W = normalize(W,norm='l1',axis=1)\n    Wul = W[n:n+m,0:n]\n    Wuu = W[n:n+m,n:n+m]\n    return (Wuu,Wul)\n\ndef load_labels(filename,n):\n    y = lil_matrix((n,1))\n    i = 0\n    for line in open(filename, 'r'):\n        label = int(line.rstrip())\n        y[i,0] = label\n        i += 1\n    return y\n\ndef lp_solve(Wuu,Wul,y):\n    return spsolve((identity(m) + Wuu), Wul*y)\n\ndef lp_iter(Wuu,Wul,y,t=10):\n    i = 0\n    f = lil_matrix((Wuu.shape[0],1))\n    while True:\n        f = Wuu * f + Wul * y\n        if i > t:\n            break\n        i += 1\n    return f\n\n\"\"\" # of labeled nodes \"\"\"\nn = int(sys.argv[1])\n\"\"\" # of unlabeled nodes \"\"\"\nm = int(sys.argv[2])\n\"\"\" propagation matrix (row normalized) \"\"\"\nWuu,Wul = load_matrix(sys.argv[3],n,m)\n\"\"\" labels of labeled nodes \"\"\"\ny = load_labels(sys.argv[4],n)\n\n\nprint lp_solve(Wuu,Wul,y)\nprint '============='\nprint lp_iter(Wuu,Wul,y)\n\n\n\n\u4f7f\u3044\u65b9\nlp.py\u306f\u30ce\u30fc\u30c9\u6570\u3001\u30a8\u30c3\u30b8\u30ea\u30b9\u30c8\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3001\u30ce\u30fc\u30c9\u30e9\u30d9\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306e\u9806\u3067\u6e21\u3057\u3066\u5b9f\u884c\u3059\u308b\u3002\n\u4f7f\u3063\u3066\u308b\u30c7\u30fc\u30bf\u306f\u53c2\u8003\u306b\u3057\u305f\u30d6\u30ed\u30b0\u3068\u540c\u3058\u3082\u306e\u3002\n\nlp.py\u306e\u5b9f\u884c\u4f8b\n$ cat edge_list\n0 2\n2 0\n0 4\n4 0\n0 9\n9 0\n1 2\n2 1\n2 3\n3 2\n3 4\n4 3\n3 6\n6 3\n5 9\n9 5\n6 7\n7 6\n6 8\n8 6\n7 9\n9 7\n$ cat labels\n0 1\n2 1\n4 1\n5 -1\n6 -1\n7 -1\n$ python lp.py 10 edge_list labels\n[ 0.45966011  0.23023256  0.46046512  0.1519678   0.5372093  -0.57951699\n -0.38980322 -0.51627907 -0.19490161 -0.15903399]\n\n\n\nlp_original.py\u306f\u30e9\u30d9\u30eb\u4ed8\u304d\u30ce\u30fc\u30c9\u6570n\u3001\u30e9\u30d9\u30eb\u7121\u3057\u30ce\u30fc\u30c9\u6570m\u3001\u30a8\u30c3\u30b8\u30ea\u30b9\u30c8\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3001\u30a8\u30c3\u30b8\u30ea\u30b9\u30c8\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306e\u9806\u3067\u6e21\u3057\u3066\u5b9f\u884c\u3059\u308b\u3002\n\u305f\u3060\u3057\u3001\u30ce\u30fc\u30c9\u756a\u53f7\u306f0\u304b\u3089n-1\u304c\u30e9\u30d9\u30eb\u4ed8\u304d\u30ce\u30fc\u30c9\u3001n\u304b\u3089n+m\u304c\u30e9\u30d9\u30eb\u7121\u3057\u30ce\u30fc\u30c9\u306b\u3057\u306a\u304f\u3061\u3083\u3044\u3051\u306a\u3044\u3002\n\u4eca\u56de\u306e\u4f8b\u3067lp.py\u306b\u6e21\u3059\u30ce\u30fc\u30c9\u756a\u53f7\u3068lp_original.py\u306b\u6e21\u3059\u30ce\u30fc\u30c9\u756a\u53f7\u306e\u5bfe\u5fdc\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\nlp.py [0,1,2,3,4,5,6,7,8,9]\nlp_original.py [0,6,1,7,2,3,4,5,8,9]\n\u306a\u306e\u3067\u3001\u30e9\u30d9\u30eb\u30d5\u30a1\u30a4\u30eb\u306e\u5404\u884c\u306b\u306f0\u304b\u3089n\u306e\u30e9\u30d9\u30eb\u4ed8\u304d\u30ce\u30fc\u30c9\u306e\u30e9\u30d9\u30eb\u304c\u66f8\u304b\u308c\u3066\u3044\u308b\u3002\n\u3053\u306e\u5b9f\u88c5\u306e\u5834\u5408\u3001\u30e9\u30d9\u30eb\u7121\u3057\u30ce\u30fc\u30c9\u304b\u3089\u30e9\u30d9\u30eb\u4ed8\u304d\u30ce\u30fc\u30c9\u3078\u306e\u30a8\u30c3\u30b8\u3068\u3001\u30e9\u30d9\u30eb\u7121\u3057\u30ce\u30fc\u30c9\u304b\u3089\u30e9\u30d9\u30eb\u7121\u3057\u30ce\u30fc\u30c9\u3078\u306e\u30a8\u30c3\u30b8\u3057\u304b\u4f7f\u308f\u305a\u306b\u6e08\u3080\u3002\n\nlp_original.py\u306e\u5b9f\u884c\u4f8b\n$ cat edge_list_for_original\n9 0\n6 1\n7 1\n7 2\n7 4\n9 3\n8 4\n9 5\n$ cat labels_for_original\n1\n1\n1\n-1\n-1\n-1\n$ python lp_original.py 6 4 edge_list_for_original labels_for_original\n[ 1.          0.33333333 -1.         -0.33333333]\n=============\n  (0, 0)    1.0\n  (1, 0)    0.333333333333\n  (2, 0)    -1.0\n  (3, 0)    -0.333333333333\n\n\n\u7d50\u679c\u306flp.py\u3068\u9055\u3046\u3051\u3069\u3001\u50be\u5411\u306f\u540c\u3058\u3002\n\n##\u524d\u7f6e\u304d\n\n\u30b0\u30e9\u30d5\u4e0a\u306e\u30ce\u30fc\u30c9\u306e\u30e9\u30d9\u30eb\u3092\u63a8\u5b9a\u3059\u308b\u624b\u6cd5\u3002\n\n`lp.py`\u306f[\u3053\u3053](http://satomacoto.blogspot.com/2012/07/python.html)\u3092\u53c2\u8003\u306b\u3057\u3066\u5b9f\u88c5\u3057\u305f\u3002\u3068\u3044\u3046\u304b\u307b\u3068\u3093\u3069\u305d\u306e\u307e\u307e\u3002\n\n`lp_original.py`\u306f[\u8ad6\u6587](http://pages.cs.wisc.edu/~jerryzhu/pub/thesis.pdf)\u306e\uff12\u7ae0\u3092\u53c2\u8003\u306b\u3057\u3066\u5b9f\u88c5\u3057\u305f\u3002\n\n`lp_original.py`\u3067\u306f\u9023\u7acb\u65b9\u7a0b\u5f0f\u3092\u89e3\u304b\u306a\u3044\u3067\u7e70\u308a\u8fd4\u3057\u7e70\u308a\u8fd4\u3057\u884c\u5217\u7a4d\u3092\u8a08\u7b97\u3057\u3066\u3044\u304f\u65b9\u6cd5\u3082\u5b9f\u88c5\u3057\u305f\uff08`lp_iter`\uff09\u3002\n\n##\u5b9f\u88c5\n```lp.py\n# -*- coding: utf-8 -*-\nimport sys\nfrom scipy.sparse import *\nfrom scipy.sparse.linalg import spsolve\n\ndef load_adjucency(filename,n):\n    W = lil_matrix((n,n))\n    for line in open(filename, 'r'):\n        entries = line.rstrip().split(' ')\n        src = int(entries[0])\n        dst = int(entries[1])\n        W[src,dst] = 1\n    return W\n\ndef load_labels(filename,n):\n    y = lil_matrix((1,n))\n    for line in open(filename, 'r'):\n        entries = line.rstrip().split(' ')\n        nid = int(entries[0])\n        label = int(entries[1])\n        y[0,nid] = label\n    return y\n\nn = int(sys.argv[1])\nW = load_adjucency(sys.argv[2],n)\ny = load_labels(sys.argv[3],n)\n\nD = dia_matrix((W.sum(0),[0]), W.shape)\nL = D - W\n\nI = identity(W.shape[0])\n\nlam = 1\nf = spsolve((I + lam * L), y)\nprint f\n```\n\n```lp_original.py\n# -*- coding: utf-8 -*-\nimport sys\nfrom scipy.sparse import *\nfrom scipy.sparse.linalg import spsolve\nfrom sklearn.preprocessing import normalize\n\ndef load_matrix(filename,n,m):\n    W = lil_matrix((n+m,n+m))\n    for line in open(filename, 'r'):\n        entries = line.rstrip().split(' ')\n        src = int(entries[0])\n        dst = int(entries[1])\n        W[src,dst] = 1\n    W = normalize(W,norm='l1',axis=1)\n    Wul = W[n:n+m,0:n]\n    Wuu = W[n:n+m,n:n+m]\n    return (Wuu,Wul)\n\ndef load_labels(filename,n):\n    y = lil_matrix((n,1))\n    i = 0\n    for line in open(filename, 'r'):\n        label = int(line.rstrip())\n        y[i,0] = label\n        i += 1\n    return y\n\ndef lp_solve(Wuu,Wul,y):\n    return spsolve((identity(m) + Wuu), Wul*y)\n\ndef lp_iter(Wuu,Wul,y,t=10):\n    i = 0\n    f = lil_matrix((Wuu.shape[0],1))\n    while True:\n        f = Wuu * f + Wul * y\n        if i > t:\n            break\n        i += 1\n    return f\n\n\"\"\" # of labeled nodes \"\"\"\nn = int(sys.argv[1])\n\"\"\" # of unlabeled nodes \"\"\"\nm = int(sys.argv[2])\n\"\"\" propagation matrix (row normalized) \"\"\"\nWuu,Wul = load_matrix(sys.argv[3],n,m)\n\"\"\" labels of labeled nodes \"\"\"\ny = load_labels(sys.argv[4],n)\n\n\nprint lp_solve(Wuu,Wul,y)\nprint '============='\nprint lp_iter(Wuu,Wul,y)\n```\n\n##\u4f7f\u3044\u65b9\n\n`lp.py`\u306f\u30ce\u30fc\u30c9\u6570\u3001\u30a8\u30c3\u30b8\u30ea\u30b9\u30c8\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3001\u30ce\u30fc\u30c9\u30e9\u30d9\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306e\u9806\u3067\u6e21\u3057\u3066\u5b9f\u884c\u3059\u308b\u3002\n\u4f7f\u3063\u3066\u308b\u30c7\u30fc\u30bf\u306f\u53c2\u8003\u306b\u3057\u305f\u30d6\u30ed\u30b0\u3068\u540c\u3058\u3082\u306e\u3002\n\n```lp.py\u306e\u5b9f\u884c\u4f8b\n$ cat edge_list\n0 2\n2 0\n0 4\n4 0\n0 9\n9 0\n1 2\n2 1\n2 3\n3 2\n3 4\n4 3\n3 6\n6 3\n5 9\n9 5\n6 7\n7 6\n6 8\n8 6\n7 9\n9 7\n$ cat labels\n0 1\n2 1\n4 1\n5 -1\n6 -1\n7 -1\n$ python lp.py 10 edge_list labels\n[ 0.45966011  0.23023256  0.46046512  0.1519678   0.5372093  -0.57951699\n -0.38980322 -0.51627907 -0.19490161 -0.15903399]\n```\n\n---\n\n\n`lp_original.py`\u306f\u30e9\u30d9\u30eb\u4ed8\u304d\u30ce\u30fc\u30c9\u6570`n`\u3001\u30e9\u30d9\u30eb\u7121\u3057\u30ce\u30fc\u30c9\u6570`m`\u3001\u30a8\u30c3\u30b8\u30ea\u30b9\u30c8\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3001\u30a8\u30c3\u30b8\u30ea\u30b9\u30c8\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306e\u9806\u3067\u6e21\u3057\u3066\u5b9f\u884c\u3059\u308b\u3002\n\n\u305f\u3060\u3057\u3001\u30ce\u30fc\u30c9\u756a\u53f7\u306f`0`\u304b\u3089`n-1`\u304c\u30e9\u30d9\u30eb\u4ed8\u304d\u30ce\u30fc\u30c9\u3001`n`\u304b\u3089`n+m`\u304c\u30e9\u30d9\u30eb\u7121\u3057\u30ce\u30fc\u30c9\u306b\u3057\u306a\u304f\u3061\u3083\u3044\u3051\u306a\u3044\u3002\n\n\u4eca\u56de\u306e\u4f8b\u3067`lp.py`\u306b\u6e21\u3059\u30ce\u30fc\u30c9\u756a\u53f7\u3068`lp_original.py`\u306b\u6e21\u3059\u30ce\u30fc\u30c9\u756a\u53f7\u306e\u5bfe\u5fdc\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n`lp.py` [0,1,2,3,4,5,6,7,8,9]\n`lp_original.py` [0,6,1,7,2,3,4,5,8,9]\n\n\n\n\u306a\u306e\u3067\u3001\u30e9\u30d9\u30eb\u30d5\u30a1\u30a4\u30eb\u306e\u5404\u884c\u306b\u306f`0`\u304b\u3089`n`\u306e\u30e9\u30d9\u30eb\u4ed8\u304d\u30ce\u30fc\u30c9\u306e\u30e9\u30d9\u30eb\u304c\u66f8\u304b\u308c\u3066\u3044\u308b\u3002\n\n\u3053\u306e\u5b9f\u88c5\u306e\u5834\u5408\u3001\u30e9\u30d9\u30eb\u7121\u3057\u30ce\u30fc\u30c9\u304b\u3089\u30e9\u30d9\u30eb\u4ed8\u304d\u30ce\u30fc\u30c9\u3078\u306e\u30a8\u30c3\u30b8\u3068\u3001\u30e9\u30d9\u30eb\u7121\u3057\u30ce\u30fc\u30c9\u304b\u3089\u30e9\u30d9\u30eb\u7121\u3057\u30ce\u30fc\u30c9\u3078\u306e\u30a8\u30c3\u30b8\u3057\u304b\u4f7f\u308f\u305a\u306b\u6e08\u3080\u3002\n\n```lp_original.py\u306e\u5b9f\u884c\u4f8b\n$ cat edge_list_for_original\n9 0\n6 1\n7 1\n7 2\n7 4\n9 3\n8 4\n9 5\n$ cat labels_for_original\n1\n1\n1\n-1\n-1\n-1\n$ python lp_original.py 6 4 edge_list_for_original labels_for_original\n[ 1.          0.33333333 -1.         -0.33333333]\n=============\n  (0, 0)\t1.0\n  (1, 0)\t0.333333333333\n  (2, 0)\t-1.0\n  (3, 0)\t-0.333333333333\n```\n\n\u7d50\u679c\u306f`lp.py`\u3068\u9055\u3046\u3051\u3069\u3001\u50be\u5411\u306f\u540c\u3058\u3002\n", "tags": ["Python", "numpy", "\u6a5f\u68b0\u5b66\u7fd2", "scipy"]}