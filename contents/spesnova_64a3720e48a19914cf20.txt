{"tags": ["docker", "systemd", "log", "CoreOS"], "context": " More than 1 year has passed since last update.\n\n\u6982\u8981\nCoreOS \u4e0a\u306e\u5168\u3066\u306e\u30ed\u30b0\u3092\u30ea\u30e2\u30fc\u30c8\u30b5\u30fc\u30d0\u3078\u9001\u308b \u3092\u5fdc\u7528\u3057\u3001systemd \u3067\u8d77\u52d5\u3057\u305f Docker \u30b3\u30f3\u30c6\u30ca\u306e\u30ed\u30b0\u3092\u30ea\u30e2\u30fc\u30c8\u30b5\u30fc\u30d0\u3078\u9001\u308b\u3002 systemd \u3067 Docker \u30b3\u30f3\u30c6\u30ca\u3092\u8d77\u52d5\u3057\u3066\u304a\u3051\u3070 journalctl \u3067\u30ed\u30b0\u304c\u53d6\u5f97\u3067\u304d\u3001\u3055\u3089\u306b systemd \u306e unit \u306e\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\uff08bind\uff09\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u30ed\u30b0\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u30d7\u30ed\u30bb\u30b9\u3092\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u3002\u3053\u308c\u306f \"coprocess\" \u3084 \"sidekick\" \u3068\u3044\u3046\u3089\u3057\u3044\u3002\n\n\u30ed\u30b0\u306e\u53ce\u96c6\n\u30b3\u30f3\u30c6\u30ca\u306e\u30ed\u30b0\u53ce\u96c6\u306f systemctl \u3092\u4f7f\u3063\u3066\u30b3\u30f3\u30c6\u30ca\u3092\u8d77\u52d5\u3059\u308b\u3060\u3051\u3067\u3088\u3044\u3002\u305d\u3046\u3059\u308c\u3070 journalctl \u3067\u30ed\u30b0\u3092\u898b\u308b\u4e8b\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308b\n# /etc/systemd/system/hello.service\n[Unit]\nDescription=Hello\nAfter=hello.service\nRequires=docker.service\n\n[Service]\nTimeoutStartSec=0\nExecStartPre=-/usr/bin/docker kill hello\nExecStartPre=-/usr/bin/docker rm hello\nExecStartPre=/usr/bin/docker pull busybox\nExecStart=/usr/bin/docker run -name hello busybox /bin/sh -c \"while true; do echo hello world; sleep 1; done\"\n\n[Install]\nWantedBy=multi-user.target\n\n\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3066\u306f -d \u3092\u4ed8\u3051\u305a\u306b docker run \u30b3\u30de\u30f3\u30c9\u306e\u6a19\u6e96\u51fa\u529b\u306b\u30b3\u30f3\u30c6\u30ca\u306e\u30ed\u30b0\u3092\u51fa\u529b\u3055\u305b\u308b\u3053\u3068\ncore@core-01 ~ $ sudo systemctl enable /etc/systemd/system/hello.service\nCreated symlink from /etc/systemd/system/multi-user.target.wants/hello.service to /etc/systemd/system/hello.service.\ncore@core-01 ~ $ sudo systemctl start hello.service\n\ndocker logs \u30b3\u30de\u30f3\u30c9\u3067\u30ed\u30b0\u3092\u898b\u3066\u307f\u308b\ncore@core-01 ~ $ docker logs -f hello\nhello world\nhello world\nhello world\nhello world\nhello world\n\njournalctl \u3067\u30ed\u30b0\u3092\u898b\u3066\u307f\u308b\uff08hello world \u3057\u304b\u51fa\u3066\u306a\u3044\u304c\u3001\u3053\u3053\u306f CoreOS \u4e0a\u306e\u5168\u3066\u306e\u30ed\u30b0\u304c\u51fa\u3066\u304f\u308b\uff09\ncore@core-01 ~ $ journalctl -f\n-- Logs begin at Mon 2014-09-08 15:37:51 JST. --\nSep 08 21:31:59 core-01 docker[2164]: hello world\nSep 08 21:32:00 core-01 docker[2164]: hello world\nSep 08 21:32:01 core-01 docker[2164]: hello world\nSep 08 21:32:02 core-01 docker[2164]: hello world\nSep 08 21:32:03 core-01 docker[2164]: hello world\nSep 08 21:32:04 core-01 docker[2164]: hello world\n\n\u3042\u3089\u3086\u308b\u30ed\u30b0\u304c\u51fa\u308b\u306e\u3067\u6f0f\u308c\u306f\u306a\u3044\u306e\u3060\u304c\u3001\u3069\u306e\u30ed\u30b0\u304c\u3069\u306e\u30b3\u30f3\u30c6\u30ca\u306e\u3082\u306e\u304b\u3001\u3068\u3044\u3046\u306e\u304c\u975e\u5e38\u306b\u5206\u304b\u308a\u306b\u304f\u3044\u3002 hello.service \u306e\u30ed\u30b0\u3060\u3051\u898b\u3066\u307f\u308b\ncore@core-01 ~ $ journalctl -f -u hello.service\n-- Logs begin at Mon 2014-09-08 15:37:51 JST. --\nSep 08 21:24:04 core-01 docker[2164]: hello world\nSep 08 21:24:05 core-01 docker[2164]: hello world\nSep 08 21:24:06 core-01 docker[2164]: hello world\nSep 08 21:24:07 core-01 docker[2164]: hello world\nSep 08 21:24:08 core-01 docker[2164]: hello world\nSep 08 21:24:09 core-01 docker[2164]: hello world\nSep 08 21:24:10 core-01 docker[2164]: hello world\n\n\n\u96c6\u7d04\u3057\u305f\u30ed\u30b0\u306e\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\nCoreOS \u4e0a\u306e\u5168\u3066\u306e\u30ed\u30b0\u3092\u30ea\u30e2\u30fc\u30c8\u30b5\u30fc\u30d0\u3078\u9001\u308b \u3092\u5fdc\u7528\u3057\u3001 Docker \u30b3\u30f3\u30c6\u30ca\u306e\u30ed\u30b0\u3092\u30ea\u30e2\u30fc\u30c8\u30b5\u30fc\u30d0\u3078\u9001\u308b\u3002\n\n\u8d77\u52d5\u3057\u305f\u3044\u30b3\u30f3\u30c6\u30ca hello.service\n\n\n\u306b\u52a0\u3048\n\n\u30ed\u30b0\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u7528 unit hello.journal-router.service \n\n\u3092\u8d77\u52d5\u3059\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3059\u308b\u3002\n# /etc/systemd/system/hello.service\n[Unit]\nDescription=Hello\nRequires=docker.service\nAfter=docker.service\nWants=hello.journal-router.service\nBefore=hello.journal-router.service\n\n[Service]\nTimeoutStartSec=0\nExecStartPre=-/usr/bin/docker kill hello\nExecStartPre=-/usr/bin/docker rm hello\nExecStartPre=/usr/bin/docker pull busybox\nExecStart=/usr/bin/docker run -name hello busybox /bin/sh -c \"while true; do echo hello world; sleep 1; done\"\n\n[Install]\nWantedBy=multi-user.target\n\n# /etc/systemd/system/hello.journal-router.service\n[Unit]\nDescription=Journal Router for Hello\nRequires=hello.service\nAfter=hello.service\nBindsTo=hello.service\n\n[Service]\nTimeoutStartSec=0\nExecStart=/bin/sh -c '/usr/bin/journalctl -o short -u hello.service -f | sed \\\"s/^/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx \\\\0/g\\\" | ncat data.logentries.com 10000'\n\n[Install]\nWantedBy=multi-user.target\n\n\u30dd\u30a4\u30f3\u30c8\n\n\nhello.service \u306f hello.journal-router.service \u3092\u30ed\u30b0\u30eb\u30fc\u30bf\u30fc\u5f79\u3068\u3057\u3066\u5fc5\u8981\u3068\u3057\u3066\u3044\u308b\u306e\u3067 Wants=hello.journal-router.service \u3068\u3057\u3066\u3044\u308b\n\nhello.service \u3092 hello.journal-router.service \u304c\u8d77\u52d5\u3059\u308b\u524d\u306b\u8d77\u52d5\u3057\u305f\u3044\u306e\u3067 Before=hello.journal-router.service \u3068\u3057\u3066\u3044\u308b\n\nhello.journal-router.service \u306f hello.service \u306e\u305f\u3081\u306b\u8d77\u52d5\u3057\u3066\u3044\u308b\u306e\u3067 hello.service \u304c\u7d42\u4e86\u3057\u305f\u3068\u304d\u306f\u4e00\u7dd2\u306b\u7d42\u4e86\u3057\u305f\u3044\u306e\u3067\u3001 BindsTo=hello.service \u3068\u3057\u3066\u3044\u308b\n\nhello.service unit \u3092\u8d77\u52d5\u3057\u3066\u307f\u308b\ncore@core-02 ~ $ sudo systemctl enable /etc/systemd/system/hello.service\ncore@core-02 ~ $ sudo systemctl enable /etc/systemd/system/hello.journal-router.service\ncore@core-02 ~ $ sudo systemctl start hello.service\n\n\u3059\u308b\u3068\u3001hello.service \u8d77\u52d5\u5f8c\u306b hello.journal-router.service \u3082 systemd \u306b\u3088\u3063\u3066\u8d77\u52d5\u3055\u308c\u308b\u3002\u307e\u305f hello.service \u3092\u6b62\u3081\u308b\u3068 hello.journal-router.service \u3082\u6b62\u307e\u308b\u3002\n\n\u3053\u306e\u3084\u308a\u65b9\u306e\u554f\u984c\u70b9\n\u65b0\u898f\u306b\u8ffd\u52a0\u3057\u305f\u3044\u30b3\u30f3\u30c6\u30ca\u306e unit file \u3092\u66f8\u304f\u969b\u306b\u30ed\u30b0\u53ce\u96c6\u7528 unit \u306b\u3064\u3044\u3066\u3082\u6c17\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u3002\u30b3\u30f3\u30c6\u30ca\u3092\u8d77\u52d5\u3059\u308c\u3070\u52dd\u624b\u306b\u30ed\u30b0\u306b\u3064\u3044\u3066\u306f\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3057\u3066\u304f\u308c\u3066\u3044\u308b\u65b9\u304c\u697d\u3060\u3002\u3053\u306e\u8a71\u306f Automatic Docker Service Announcement with Registrator \u306e \"The Problem with a Coprocess for Registering\" \u306e\u6bb5\u843d\u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u3002\n\u305f\u3060\u3001 journalctl \u3092 json \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u51fa\u529b\u3059\u308b\u3068\u3001\u3053\u306e\u30ed\u30b0\u304c\u3069\u306e\u30b3\u30f3\u30c6\u30ca\u306e\u3082\u306e\u304b\u308f\u304b\u308b\u306e\u3067\u3001json \u3092 human readable \u306b\u76f4\u3057\u3066\u9001\u308b\u306a\u3089\u3070\u3001CoreOS \u4e0a\u306e\u5168\u3066\u306e\u30ed\u30b0\u3092\u30ea\u30e2\u30fc\u30c8\u30b5\u30fc\u30d0\u3078\u9001\u308b \u306e\u3088\u3046\u306b\u3059\u308b\u3060\u3051\u3067 Docker \u306e\u30ed\u30b0\u7ba1\u7406\u306f\u5b8c\u7d50\u3059\u308b\u3002\n\njson output \u3092 jq \u3067\u6574\u5f62\u3057\u305f\u306e\u3061\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3059\u308b\n\n\u3069\u306e\u30b3\u30f3\u30c6\u30ca\u306e\u30ed\u30b0\nhuman readable \u306a\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n\u8d77\u52d5\u3057\u305f\u3044\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b3\u30f3\u30c6\u30ca\u306f\u30ed\u30b0\u306e\u3053\u3068\u306f\u6c17\u306b\u3057\u306a\u304f\u3066\u3088\u3044\uff08\"sidekick\" \u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u53d6\u3089\u306a\u3044\n\n\u3092\u5b9f\u73fe\u3057\u305f\u3044\u3002journalctl \u306e json output \u304b\u3089\u306f\n{\n    \"__CURSOR\" : \"s=78035e49faa2491e8dedcb38fc1b5c5e;i=4eb;b=a48ed2e1bee74f18a171e8ac4b8dea9e;m=13e50316;t=502b24b3c9e12;x=96f3d2082539aec9\",\n    \"__REALTIME_TIMESTAMP\" : \"1410339673251346\",\n    \"__MONOTONIC_TIMESTAMP\" : \"333775638\",\n    \"_BOOT_ID\" : \"a48ed2e1bee74f18a171e8ac4b8dea9e\",\n    \"PRIORITY\" : \"6\",\n    \"_UID\" : \"0\",\n    \"_GID\" : \"0\",\n    \"_SYSTEMD_SLICE\" : \"system.slice\",\n    \"SYSLOG_FACILITY\" : \"3\",\n    \"_CAP_EFFECTIVE\" : \"1fffffffff\",\n    \"_TRANSPORT\" : \"stdout\",\n    \"_MACHINE_ID\" : \"ce5fac63ce624124a15ea8a52e838b17\",\n    \"_HOSTNAME\" : \"core-02\",\n    \"SYSLOG_IDENTIFIER\" : \"docker\",\n    \"_COMM\" : \"docker\",\n    \"_EXE\" : \"/usr/bin/docker\",\n    \"_SYSTEMD_UNIT\" : \"dd-agent.service\",\n    \"_PID\" : \"1075\",\n    \"_CMDLINE\" : \"/usr/bin/docker run --privileged --name dd-agent -h core-02 -v /var/run/docker.sock:/var/run/docker.sock -v /proc/mounts:/host/proc/mounts:ro -v /sys/fs/cgroup/:/host/sys/fs/cgroup:ro -e API_KEY=xxxxxxxxxxxxxxxxx datadog/docker-dd-agent\",\n    \"_SYSTEMD_CGROUP\" : \"/system.slice/dd-agent.service\",\n    \"MESSAGE\" : \"2014-09-10 09:01:13,250 CRIT Server 'unix_http_server' running without any HTTP authentication checking\"\n}\n\n\u306e\u3088\u3046\u306b\u3001\n\n\u30ed\u30b0\u30e1\u30c3\u30bb\u30fc\u30b8\n\u30db\u30b9\u30c8\n\u30b3\u30f3\u30c6\u30ca\uff08unit\uff09\n\n\u304c\u53d6\u5f97\u3067\u304d\u308b\u306e\u3067\u3001\u3042\u307e\u308a\u7dba\u9e97\u3067\u306f\u306a\u3044\u304c\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b jq \u3092\u4f7f\u3063\u3066\u5fc5\u8981\u306a\u60c5\u5831\u3060\u3051\u629c\u304d\u51fa\u3057\u305f\u5f8c\u306b\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3059\u308b\u3053\u3068\u3067\u3044\u3051\u308b\u3002\ncore@core-01 ~ $ journalctl -f -l -o json | \\\n  jq '._HOSTNAME + \" \" + ._SYSTEMD_UNIT + \": \" + .MESSAGE' -c | \\\n  sed -e \"s/^\\\"*\\\"$/\\0/\" | \\\n  sed -e \"s/^/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx \\0/g\" | \\\n  ncat data.logentries.com 10000\n\n\u3053\u308c\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30ed\u30b0\u3092\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3067\u304d\u308b\u3002(xxxxxxxx \u307f\u305f\u3044\u306a\u90e8\u5206\u306f token\uff09\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx core-01 registry.service: 2014-09-12 06:54:28,697 INFO: Boto based storage initialized\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx core-01 registry.service: 2014-09-12 06:54:29 [1] [INFO] Starting gunicorn 18.0\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx core-01 registry.service: 2014-09-12 06:54:29 [1] [INFO] Listening at: http://0.0.0.0:5000 (1)\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx core-01 registry.service: 2014-09-12 06:54:29 [1] [INFO] Using worker: gevent\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx core-01 registry.service: 2014-09-12 06:54:29 [22] [INFO] Booting worker with pid: 22\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx core-01 registry.service: 2014-09-12 06:54:29 [23] [INFO] Booting worker with pid: 23\n\n\n\u30e1\u30e2\u3068\u611f\u60f3\n\nREF\n\nUsing systemd with CoreOS\nsystemd.unit \u2014 Unit configuration\nsystemd (\u65e5\u672c\u8a9e)\n\n\n## \u6982\u8981\n[CoreOS \u4e0a\u306e\u5168\u3066\u306e\u30ed\u30b0\u3092\u30ea\u30e2\u30fc\u30c8\u30b5\u30fc\u30d0\u3078\u9001\u308b](http://qiita.com/spesnova/items/631ffb5c13e1d0da258b) \u3092\u5fdc\u7528\u3057\u3001systemd \u3067\u8d77\u52d5\u3057\u305f Docker \u30b3\u30f3\u30c6\u30ca\u306e\u30ed\u30b0\u3092\u30ea\u30e2\u30fc\u30c8\u30b5\u30fc\u30d0\u3078\u9001\u308b\u3002 systemd \u3067 Docker \u30b3\u30f3\u30c6\u30ca\u3092\u8d77\u52d5\u3057\u3066\u304a\u3051\u3070 journalctl \u3067\u30ed\u30b0\u304c\u53d6\u5f97\u3067\u304d\u3001\u3055\u3089\u306b systemd \u306e unit \u306e\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\uff08bind\uff09\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u30ed\u30b0\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u30d7\u30ed\u30bb\u30b9\u3092\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u3002\u3053\u308c\u306f \"coprocess\" \u3084 \"sidekick\" \u3068\u3044\u3046\u3089\u3057\u3044\u3002\n\n## \u30ed\u30b0\u306e\u53ce\u96c6\n\u30b3\u30f3\u30c6\u30ca\u306e\u30ed\u30b0\u53ce\u96c6\u306f systemctl \u3092\u4f7f\u3063\u3066\u30b3\u30f3\u30c6\u30ca\u3092\u8d77\u52d5\u3059\u308b\u3060\u3051\u3067\u3088\u3044\u3002\u305d\u3046\u3059\u308c\u3070 `journalctl` \u3067\u30ed\u30b0\u3092\u898b\u308b\u4e8b\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308b\n\n```\n# /etc/systemd/system/hello.service\n[Unit]\nDescription=Hello\nAfter=hello.service\nRequires=docker.service\n\n[Service]\nTimeoutStartSec=0\nExecStartPre=-/usr/bin/docker kill hello\nExecStartPre=-/usr/bin/docker rm hello\nExecStartPre=/usr/bin/docker pull busybox\nExecStart=/usr/bin/docker run -name hello busybox /bin/sh -c \"while true; do echo hello world; sleep 1; done\"\n\n[Install]\nWantedBy=multi-user.target\n```\n\n\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3066\u306f `-d` \u3092\u4ed8\u3051\u305a\u306b `docker run` \u30b3\u30de\u30f3\u30c9\u306e\u6a19\u6e96\u51fa\u529b\u306b\u30b3\u30f3\u30c6\u30ca\u306e\u30ed\u30b0\u3092\u51fa\u529b\u3055\u305b\u308b\u3053\u3068\n\n```bash\ncore@core-01 ~ $ sudo systemctl enable /etc/systemd/system/hello.service\nCreated symlink from /etc/systemd/system/multi-user.target.wants/hello.service to /etc/systemd/system/hello.service.\ncore@core-01 ~ $ sudo systemctl start hello.service\n```\n\n`docker logs` \u30b3\u30de\u30f3\u30c9\u3067\u30ed\u30b0\u3092\u898b\u3066\u307f\u308b\n\n```bash\ncore@core-01 ~ $ docker logs -f hello\nhello world\nhello world\nhello world\nhello world\nhello world\n```\n\n`journalctl` \u3067\u30ed\u30b0\u3092\u898b\u3066\u307f\u308b\uff08hello world \u3057\u304b\u51fa\u3066\u306a\u3044\u304c\u3001\u3053\u3053\u306f CoreOS \u4e0a\u306e\u5168\u3066\u306e\u30ed\u30b0\u304c\u51fa\u3066\u304f\u308b\uff09\n\n\n```bash\ncore@core-01 ~ $ journalctl -f\n-- Logs begin at Mon 2014-09-08 15:37:51 JST. --\nSep 08 21:31:59 core-01 docker[2164]: hello world\nSep 08 21:32:00 core-01 docker[2164]: hello world\nSep 08 21:32:01 core-01 docker[2164]: hello world\nSep 08 21:32:02 core-01 docker[2164]: hello world\nSep 08 21:32:03 core-01 docker[2164]: hello world\nSep 08 21:32:04 core-01 docker[2164]: hello world\n```\n\n\u3042\u3089\u3086\u308b\u30ed\u30b0\u304c\u51fa\u308b\u306e\u3067\u6f0f\u308c\u306f\u306a\u3044\u306e\u3060\u304c\u3001\u3069\u306e\u30ed\u30b0\u304c\u3069\u306e\u30b3\u30f3\u30c6\u30ca\u306e\u3082\u306e\u304b\u3001\u3068\u3044\u3046\u306e\u304c\u975e\u5e38\u306b\u5206\u304b\u308a\u306b\u304f\u3044\u3002 hello.service \u306e\u30ed\u30b0\u3060\u3051\u898b\u3066\u307f\u308b\n\n\n```bash\ncore@core-01 ~ $ journalctl -f -u hello.service\n-- Logs begin at Mon 2014-09-08 15:37:51 JST. --\nSep 08 21:24:04 core-01 docker[2164]: hello world\nSep 08 21:24:05 core-01 docker[2164]: hello world\nSep 08 21:24:06 core-01 docker[2164]: hello world\nSep 08 21:24:07 core-01 docker[2164]: hello world\nSep 08 21:24:08 core-01 docker[2164]: hello world\nSep 08 21:24:09 core-01 docker[2164]: hello world\nSep 08 21:24:10 core-01 docker[2164]: hello world\n```\n\n## \u96c6\u7d04\u3057\u305f\u30ed\u30b0\u306e\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\n[CoreOS \u4e0a\u306e\u5168\u3066\u306e\u30ed\u30b0\u3092\u30ea\u30e2\u30fc\u30c8\u30b5\u30fc\u30d0\u3078\u9001\u308b](http://qiita.com/spesnova/items/631ffb5c13e1d0da258b) \u3092\u5fdc\u7528\u3057\u3001 Docker \u30b3\u30f3\u30c6\u30ca\u306e\u30ed\u30b0\u3092\u30ea\u30e2\u30fc\u30c8\u30b5\u30fc\u30d0\u3078\u9001\u308b\u3002\n\n* \u8d77\u52d5\u3057\u305f\u3044\u30b3\u30f3\u30c6\u30ca `hello.service`\n\n\u306b\u52a0\u3048\n\n* \u30ed\u30b0\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u7528 unit `hello.journal-router.service` \n\n\u3092\u8d77\u52d5\u3059\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3059\u308b\u3002\n\n```\n# /etc/systemd/system/hello.service\n[Unit]\nDescription=Hello\nRequires=docker.service\nAfter=docker.service\nWants=hello.journal-router.service\nBefore=hello.journal-router.service\n\n[Service]\nTimeoutStartSec=0\nExecStartPre=-/usr/bin/docker kill hello\nExecStartPre=-/usr/bin/docker rm hello\nExecStartPre=/usr/bin/docker pull busybox\nExecStart=/usr/bin/docker run -name hello busybox /bin/sh -c \"while true; do echo hello world; sleep 1; done\"\n\n[Install]\nWantedBy=multi-user.target\n```\n\n```\n# /etc/systemd/system/hello.journal-router.service\n[Unit]\nDescription=Journal Router for Hello\nRequires=hello.service\nAfter=hello.service\nBindsTo=hello.service\n\n[Service]\nTimeoutStartSec=0\nExecStart=/bin/sh -c '/usr/bin/journalctl -o short -u hello.service -f | sed \\\"s/^/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx \\\\0/g\\\" | ncat data.logentries.com 10000'\n\n[Install]\nWantedBy=multi-user.target\n```\n\n\u30dd\u30a4\u30f3\u30c8\n\n* `hello.service` \u306f `hello.journal-router.service` \u3092\u30ed\u30b0\u30eb\u30fc\u30bf\u30fc\u5f79\u3068\u3057\u3066\u5fc5\u8981\u3068\u3057\u3066\u3044\u308b\u306e\u3067 `Wants=hello.journal-router.service` \u3068\u3057\u3066\u3044\u308b\n* `hello.service` \u3092 `hello.journal-router.service` \u304c\u8d77\u52d5\u3059\u308b\u524d\u306b\u8d77\u52d5\u3057\u305f\u3044\u306e\u3067 `Before=hello.journal-router.service` \u3068\u3057\u3066\u3044\u308b\n* `hello.journal-router.service` \u306f `hello.service` \u306e\u305f\u3081\u306b\u8d77\u52d5\u3057\u3066\u3044\u308b\u306e\u3067 `hello.service` \u304c\u7d42\u4e86\u3057\u305f\u3068\u304d\u306f\u4e00\u7dd2\u306b\u7d42\u4e86\u3057\u305f\u3044\u306e\u3067\u3001 `BindsTo=hello.service` \u3068\u3057\u3066\u3044\u308b\n\n`hello.service` unit \u3092\u8d77\u52d5\u3057\u3066\u307f\u308b\n\n```bash\ncore@core-02 ~ $ sudo systemctl enable /etc/systemd/system/hello.service\ncore@core-02 ~ $ sudo systemctl enable /etc/systemd/system/hello.journal-router.service\ncore@core-02 ~ $ sudo systemctl start hello.service\n```\n\n\u3059\u308b\u3068\u3001`hello.service` \u8d77\u52d5\u5f8c\u306b `hello.journal-router.service` \u3082 systemd \u306b\u3088\u3063\u3066\u8d77\u52d5\u3055\u308c\u308b\u3002\u307e\u305f `hello.service` \u3092\u6b62\u3081\u308b\u3068 `hello.journal-router.service` \u3082\u6b62\u307e\u308b\u3002\n\n#### \u3053\u306e\u3084\u308a\u65b9\u306e\u554f\u984c\u70b9\n\u65b0\u898f\u306b\u8ffd\u52a0\u3057\u305f\u3044\u30b3\u30f3\u30c6\u30ca\u306e unit file \u3092\u66f8\u304f\u969b\u306b\u30ed\u30b0\u53ce\u96c6\u7528 unit \u306b\u3064\u3044\u3066\u3082\u6c17\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u3002\u30b3\u30f3\u30c6\u30ca\u3092\u8d77\u52d5\u3059\u308c\u3070\u52dd\u624b\u306b\u30ed\u30b0\u306b\u3064\u3044\u3066\u306f\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3057\u3066\u304f\u308c\u3066\u3044\u308b\u65b9\u304c\u697d\u3060\u3002\u3053\u306e\u8a71\u306f [Automatic Docker Service Announcement with Registrator](http://progrium.com/blog/2014/09/10/automatic-docker-service-announcement-with-registrator/) \u306e \"The Problem with a Coprocess for Registering\" \u306e\u6bb5\u843d\u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u3002\n\n\u305f\u3060\u3001 journalctl \u3092 json \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u51fa\u529b\u3059\u308b\u3068\u3001\u3053\u306e\u30ed\u30b0\u304c\u3069\u306e\u30b3\u30f3\u30c6\u30ca\u306e\u3082\u306e\u304b\u308f\u304b\u308b\u306e\u3067\u3001json \u3092 human readable \u306b\u76f4\u3057\u3066\u9001\u308b\u306a\u3089\u3070\u3001[CoreOS \u4e0a\u306e\u5168\u3066\u306e\u30ed\u30b0\u3092\u30ea\u30e2\u30fc\u30c8\u30b5\u30fc\u30d0\u3078\u9001\u308b](http://qiita.com/spesnova/items/631ffb5c13e1d0da258b) \u306e\u3088\u3046\u306b\u3059\u308b\u3060\u3051\u3067 Docker \u306e\u30ed\u30b0\u7ba1\u7406\u306f\u5b8c\u7d50\u3059\u308b\u3002\n\n### json output \u3092 jq \u3067\u6574\u5f62\u3057\u305f\u306e\u3061\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3059\u308b\n\n* \u3069\u306e\u30b3\u30f3\u30c6\u30ca\u306e\u30ed\u30b0\n* human readable \u306a\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n* \u8d77\u52d5\u3057\u305f\u3044\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b3\u30f3\u30c6\u30ca\u306f\u30ed\u30b0\u306e\u3053\u3068\u306f\u6c17\u306b\u3057\u306a\u304f\u3066\u3088\u3044\uff08\"sidekick\" \u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u53d6\u3089\u306a\u3044\n\n\u3092\u5b9f\u73fe\u3057\u305f\u3044\u3002`journalctl` \u306e json output \u304b\u3089\u306f\n\n```json\n{\n\t\"__CURSOR\" : \"s=78035e49faa2491e8dedcb38fc1b5c5e;i=4eb;b=a48ed2e1bee74f18a171e8ac4b8dea9e;m=13e50316;t=502b24b3c9e12;x=96f3d2082539aec9\",\n\t\"__REALTIME_TIMESTAMP\" : \"1410339673251346\",\n\t\"__MONOTONIC_TIMESTAMP\" : \"333775638\",\n\t\"_BOOT_ID\" : \"a48ed2e1bee74f18a171e8ac4b8dea9e\",\n\t\"PRIORITY\" : \"6\",\n\t\"_UID\" : \"0\",\n\t\"_GID\" : \"0\",\n\t\"_SYSTEMD_SLICE\" : \"system.slice\",\n\t\"SYSLOG_FACILITY\" : \"3\",\n\t\"_CAP_EFFECTIVE\" : \"1fffffffff\",\n\t\"_TRANSPORT\" : \"stdout\",\n\t\"_MACHINE_ID\" : \"ce5fac63ce624124a15ea8a52e838b17\",\n\t\"_HOSTNAME\" : \"core-02\",\n\t\"SYSLOG_IDENTIFIER\" : \"docker\",\n\t\"_COMM\" : \"docker\",\n\t\"_EXE\" : \"/usr/bin/docker\",\n\t\"_SYSTEMD_UNIT\" : \"dd-agent.service\",\n\t\"_PID\" : \"1075\",\n\t\"_CMDLINE\" : \"/usr/bin/docker run --privileged --name dd-agent -h core-02 -v /var/run/docker.sock:/var/run/docker.sock -v /proc/mounts:/host/proc/mounts:ro -v /sys/fs/cgroup/:/host/sys/fs/cgroup:ro -e API_KEY=xxxxxxxxxxxxxxxxx datadog/docker-dd-agent\",\n\t\"_SYSTEMD_CGROUP\" : \"/system.slice/dd-agent.service\",\n\t\"MESSAGE\" : \"2014-09-10 09:01:13,250 CRIT Server 'unix_http_server' running without any HTTP authentication checking\"\n}\n```\n\n\u306e\u3088\u3046\u306b\u3001\n\n* \u30ed\u30b0\u30e1\u30c3\u30bb\u30fc\u30b8\n* \u30db\u30b9\u30c8\n* \u30b3\u30f3\u30c6\u30ca\uff08unit\uff09\n\n\u304c\u53d6\u5f97\u3067\u304d\u308b\u306e\u3067\u3001\u3042\u307e\u308a\u7dba\u9e97\u3067\u306f\u306a\u3044\u304c\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b jq \u3092\u4f7f\u3063\u3066\u5fc5\u8981\u306a\u60c5\u5831\u3060\u3051\u629c\u304d\u51fa\u3057\u305f\u5f8c\u306b\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3059\u308b\u3053\u3068\u3067\u3044\u3051\u308b\u3002\n\n```bash\ncore@core-01 ~ $ journalctl -f -l -o json | \\\n  jq '._HOSTNAME + \" \" + ._SYSTEMD_UNIT + \": \" + .MESSAGE' -c | \\\n  sed -e \"s/^\\\"*\\\"$/\\0/\" | \\\n  sed -e \"s/^/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx \\0/g\" | \\\n  ncat data.logentries.com 10000\n```\n\n\u3053\u308c\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30ed\u30b0\u3092\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3067\u304d\u308b\u3002(`xxxxxxxx` \u307f\u305f\u3044\u306a\u90e8\u5206\u306f token\uff09\n\n```bash\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx core-01 registry.service: 2014-09-12 06:54:28,697 INFO: Boto based storage initialized\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx core-01 registry.service: 2014-09-12 06:54:29 [1] [INFO] Starting gunicorn 18.0\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx core-01 registry.service: 2014-09-12 06:54:29 [1] [INFO] Listening at: http://0.0.0.0:5000 (1)\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx core-01 registry.service: 2014-09-12 06:54:29 [1] [INFO] Using worker: gevent\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx core-01 registry.service: 2014-09-12 06:54:29 [22] [INFO] Booting worker with pid: 22\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx core-01 registry.service: 2014-09-12 06:54:29 [23] [INFO] Booting worker with pid: 23\n```\n\n\n## \u30e1\u30e2\u3068\u611f\u60f3\n\n\n## REF\n\n* [Using systemd with CoreOS](https://coreos.com/using-coreos/systemd/)\n* [systemd.unit \u2014 Unit configuration](http://www.freedesktop.org/software/systemd/man/systemd.unit.html)\n* [systemd (\u65e5\u672c\u8a9e)](https://wiki.archlinux.org/index.php/Systemd_(%E6%97%A5%E6%9C%AC%E8%AA%9E))\n"}