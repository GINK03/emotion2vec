{"context": "Swift3\u304c\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u3066\u304b\u3089\u3001\u7d04\u4e00\u9031\u9593\u304c\u904e\u304e\u307e\u3057\u305f\u3002\u3059\u3067\u306b\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fc\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u3069\u306f\u3001Swift2.3/3\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u3082\u306e\u3082\u5897\u3048\u3066\u304d\u307e\u3057\u305f\u3002\n\u3053\u3053\u3067\u306f\u3001\u500b\u4eba\u7684\u306a\u8a18\u9332\u3068\u3057\u3066\u73fe\u6642\u70b9\u3067\u306eSwift\u306e\u5909\u66f4\u70b9\u3092\u6319\u3052\u3066\u304a\u304d\u307e\u3059\u3002\u3059\u3067\u306b\u77e5\u3063\u3066\u308b\u65b9\u306f\u30b9\u30eb\u30fc\u3057\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n\u3067\u306f\u3001\u4ee5\u4e0b\u304c2016/09/21\u6642\u70b9\u3067accept\u3055\u308c\u305f\u306eSwift Evolution\u3068\u306a\u308a\u307e\u3059\u3002\n\nSwift Evolution\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\n\nActive reviews\nSE-0143\nConditional conformances\n\nUpcoming reviews\n(none)\n\nProposals awaiting scheduling\n(none)\n\nAccepted (awaiting implementation)\nThis is the list of proposals which have been accepted for inclusion into Swift, but they are not implemented yet, and may not have anyone signed up to implement them. If they are not implemented in time for Swift 3, they will roll into a subsequent release.\nSE-0042\nFlattening the function type of unapplied method references\nSE-0068\nExpanding Swift Self to class members and value types\nSE-0075\nAdding a Build Configuration Import Test\nSE-0080\nFailable Numeric Conversion Initializers\nSE-0082\nPackage Manager Editable Packages\nSE-0104\nProtocol-oriented integers\nSE-0110\nDistinguish between single-tuple and multiple-argument function types\nSE-0138\nUnsafeRawBufferPointer\nSE-0139\nBridge Numeric Types to NSNumber and Cocoa Structs to NSValue\nSE-0141\nAvailability by Swift version\nSE-0142\nPermit where clauses to constrain associated types\n\nImplemented (Swift 4)\n(none)\n\nImplemented (Swift 3.1)\nSE-0045\nAdd prefix(while:) and drop(while:) to the stdlib\n\nImplemented (Swift 3.0.1)\nSE-0140\nBridge Optional As Its Payload Or NSNull\n\nImplemented (Swift 3)\nSE-0002\nRemoving currying func declaration syntax\nSE-0003\nRemoving var from Function Parameters\nSE-0004\nRemove the ++ and -- operators\nSE-0005\nBetter Translation of Objective-C APIs Into Swift\nSE-0006\nApply API Guidelines to the Standard Library\nSE-0007\nRemove C-style for-loops with conditions and incrementers\nSE-0008\nAdd a Lazy flatMap for Sequences of Optionals\nSE-0016\nAdding initializers to Int and UInt to convert from UnsafePointer and UnsafeMutablePointer\nSE-0017\nChange Unmanaged to use UnsafePointer\nSE-0019\nSwift Testing\nSE-0023\nAPI Design Guidelines\nSE-0025\nScoped Access Level\nSE-0029\nRemove implicit tuple splat behavior from function applications\nSE-0031\nAdjusting inout Declarations for Type Decoration\nSE-0032\nAdd first(where:) method to SequenceType\nSE-0033\nImport Objective-C Constants as Swift Types\nSE-0034\nDisambiguating Line Control Statements from Debugging Identifiers\nSE-0035\nLimiting inout capture to @noescape contexts\nSE-0036\nRequiring Leading Dot Prefixes for Enum Instance Member Implementations\nSE-0037\nClarify interaction between comments & operators\nSE-0038\nPackage Manager C Language Target Support\nSE-0039\nModernizing Playground Literals\nSE-0040\nReplacing Equal Signs with Colons For Attribute Arguments\nSE-0043\nDeclare variables in 'case' labels with multiple patterns\nSE-0044\nImport as Member\nSE-0046\nEstablish consistent label behavior across all parameters including first labels\nSE-0047\nDefaulting non-Void functions so they warn on unused results\nSE-0048\nGeneric Type Aliases\nSE-0049\nMove @noescape and @autoclosure to be type attributes\nSE-0052\nChange IteratorType post-nil guarantee\nSE-0053\nRemove explicit use of let from Function Parameters\nSE-0054\nAbolish ImplicitlyUnwrappedOptional type\nSE-0055\nMake unsafe pointer nullability explicit using Optional\nSE-0057\nImporting Objective-C Lightweight Generics\nSE-0059\nUpdate API Naming Guidelines and Rewrite Set APIs Accordingly\nSE-0060\nEnforcing order of defaulted parameters\nSE-0061\nAdd Generic Result and Error Handling to autoreleasepool()\nSE-0062\nReferencing Objective-C key-paths\nSE-0063\nSwiftPM System Module Search Paths\nSE-0064\nReferencing the Objective-C selector of property getters and setters\nSE-0065\nA New Model For Collections and Indices\nSE-0066\nStandardize function type argument syntax to require parentheses\nSE-0067\nEnhanced Floating Point Protocols\nSE-0069\nMutability and Foundation Value Types\nSE-0070\nMake Optional Requirements Objective-C-only\nSE-0071\nAllow (most) keywords in member references\nSE-0072\nFully eliminate implicit bridging conversions from Swift\nSE-0076\nAdd overrides taking an UnsafePointer source to non-destructive copying methods on UnsafeMutablePointer\nSE-0077\nImproved operator declarations\nSE-0081\nMove where clause to end of declaration\nSE-0085\nPackage Manager Command Names\nSE-0086\nDrop NS Prefix in Swift Foundation\nSE-0088\nModernize libdispatch for Swift 3 naming conventions\nSE-0089\nRenaming String.init(_: T)\nSE-0091\nImproving operator requirements in protocols\nSE-0092\nTypealiases in protocols and protocol extensions\nSE-0093\nAdding a public base property to slices\nSE-0094\nAdd sequence(first:next:) and sequence(state:next:) to the stdlib\nSE-0095\nReplace protocol syntax with P1 & P2 syntax\nSE-0096\nConverting dynamicType from a property to an operator\nSE-0099\nRestructuring Condition Clauses\nSE-0101\nReconfiguring sizeof and related functions into a unified MemoryLayout struct\nSE-0102\nRemove @noreturn attribute and introduce an empty Never type\nSE-0103\nMake non-escaping closures the default\nSE-0106\nAdd a macOS Alias for the OSX Platform Configuration Test\nSE-0107\nUnsafeRawPointer API\nSE-0109\nRemove the Boolean protocol\nSE-0111\nRemove type system significance of function argument labels\nSE-0112\nImproved NSError Bridging\nSE-0113\nAdd integral rounding functions to FloatingPoint\nSE-0114\nUpdating Buffer \"Value\" Names to \"Header\" Names\nSE-0115\nRename Literal Syntax Protocols\nSE-0116\nImport Objective-C id as Swift Any type\nSE-0117\nAllow distinguishing between public access and public overridability\nSE-0118\nClosure Parameter Names and Labels\nSE-0120\nRevise partition Method Signature\nSE-0121\nRemove Optional Comparison Operators\nSE-0124\nInt.init(ObjectIdentifier) and UInt.init(ObjectIdentifier) should have a bitPattern: label\nSE-0125\nRemove NonObjectiveCBase and isUniquelyReferenced\nSE-0127\nCleaning up stdlib Pointer and Buffer Routines\nSE-0128\nChange failable UnicodeScalar initializers to failable\nSE-0129\nPackage Manager Test Naming Conventions\nSE-0130\nReplace repeating Character and UnicodeScalar forms of String.init\nSE-0131\nAdd AnyHashable to the standard library\nSE-0133\nRename flatten() to joined()\nSE-0134\nRename two UTF8-related properties on String\nSE-0135\nPackage Manager Support for Differentiating Packages by Swift version\nSE-0136\nMemory Layout of Values\nSE-0137\nAvoiding Lock-In to Legacy Protocol Designs\n\nImplemented (Swift 2.2)\nSE-0001\nAllow (most) keywords as argument labels\nSE-0011\nReplace typealias keyword with associatedtype for associated type declarations\nSE-0014\nConstraining AnySequence.init\nSE-0015\nTuple comparison operators\nSE-0020\nSwift Language Version Build Configuration\nSE-0021\nNaming Functions with Argument Labels\nSE-0022\nReferencing the Objective-C selector of a method\nSE-0028\nModernizing Swift's Debugging Identifiers (FILE, etc)\n\n\u500b\u4eba\u7684\u898b\u89e3\n\u3053\u308c\u3089\u306f\u3001Swift Programming Language Evolution: Proposal Status\u304b\u3089\u5f15\u3063\u5f35\u3063\u3066\u304d\u305f\u3082\u306e\u3067\u3059\u3002\u307e\u305f\u3001\u5225\u9014\u53c2\u8003\u8cc7\u6599\u3068\u3057\u3066\u5c0f\u91ce \u5c06\u4e4b\uff08\u304a\u306e \u307e\u3055\u3086\u304d\uff09\u6c0f\u306eBuild insider\u306e\u8a18\u4e8b\u304c\u3001Swift\u306e\u3053\u308c\u307e\u3067\u306e\u904d\u6b74\u3084\u3001Swift3\u306e\u30c8\u30d4\u30c3\u30af\u3001Swift4\u3078\u306e\u8003\u5bdf\u304c\u8a73\u3057\u304f\u307e\u3068\u308c\u3089\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u307e\u3060\u8aad\u3093\u3067\u3044\u306a\u3044\u65b9\u306f\u3001\u662f\u975e\u4e00\u8aad\u3059\u308b\u4e8b\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002\n\u672c\u5f53\u306b\u3001\u4e0a\u8a18\u306e\u8a18\u4e8b\u304c\u7d20\u6674\u3089\u3057\u3044\u306e\u3067\u8a00\u3046\u4e8b\u306f\u7121\u3044\u306e\u3067\u3059\u304c\u3001Swift\u3092\u8ffd\u3044\u304b\u3051\u308b\u306b\u306f\u82f1\u8a9e\u3067\u3084\u308a\u3068\u308a\u3055\u308c\u308b\u30e1\u30fc\u30ea\u30f3\u30b0\u30ea\u30b9\u30c8\u3092\u6bce\u65e5\u773a\u3081\u3001Phantom Type\u306a\u3069\u3001\u4ed6\u306e\u8a00\u8a9e\u4ed5\u69d8\u306b\u3075\u308c\u3001IPv6\u3084AST\u306a\u3069\u306e\u6280\u8853\u7684\u306a\u4e8b\u306a\u3069\u3001\u52c9\u5f37\u3059\u308b\u4e8b\u30fb\u51fa\u6765\u308b\u4e8b\u304c\u5c71\u306e\u3088\u3046\u306b\u51fa\u3066\u304d\u307e\u3059\u3002Swift2 -> 3\u3078\u306f\u305d\u3053\u307e\u3067\u7834\u58ca\u7684\u306a\u5909\u66f4\uff08\u30af\u30e9\u30b9\u304b\u3089\u69cb\u9020\u4f53\u306b\u306a\u3063\u305f\u3082\u306e\u306a\u3069\u306f\u5225\u3068\u3057\u3066\uff09\u306f\u3001\u5927\u4eba\u3057\u3044\u5370\u8c61\u3067\u3059\u304c\u3001Swift4\u3078\u306fABI\uff08Application Binary Interface\uff09\u306a\u3069\u306e\u5909\u66f4\u3082\u3042\u308a\u3001\u4eca\u306e\u5185\u306b\u81ea\u5206\u306e\u4e2d\u3067\u30ad\u30e3\u30c3\u30c1\u30a2\u30c3\u30d7\u3067\u304d\u3066\u3044\u306a\u3044\u90e8\u5206\u3092\u8ffd\u3044\u304b\u3051\u308b\u3001\u30c1\u30e3\u30f3\u30b9\u304b\u306a\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\u304a\u305d\u3089\u304f\u3001\u5e74\u672b\u307e\u3067\u306b\u306f\u6052\u4f8b\u306eSwift3\u5bfe\u5fdc\u3068\u3001ATS\u306e\u5bfe\u5fdc\u304c\u3042\u308a\u5fd9\u3057\u3044\u3068\u306f\u601d\u3044\u307e\u3059\u304c\u3001Haskell\u672c\u306a\u3069\u3092\u8aad\u3093\u3067\u5225\u306e\u89d2\u5ea6\u304b\u3089\u3001Swift\u3092\u697d\u3057\u3081\u308c\u3070\u306a\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\n\u8b1d\u8f9e\n\nSwift Programming Language Evolution\nSwift Programming Language Evolution: Proposal Status\nlists.swift.org Mailing Lists\nSwift 3\u306e\u30ea\u30ea\u30fc\u30b9\u524d\u306b\u3001\u3053\u308c\u307e\u3067\u306e\u9032\u5316\u306e\u5909\u9077\u3092\u306a\u305e\u308b\nSwift\u306f3.0\u3067\u5b89\u5b9a\u3059\u308b\u306e\u304b\uff1f \u30ea\u30ea\u30fc\u30b9\u4e88\u5b9a\u65e5\u3068\u65b0\u6a5f\u80fd\u30ea\u30b9\u30c8\nSwift\u306e\u958b\u767a\u4f53\u5236\u3001swift.org\uff0fSwift Evolution\u30ea\u30dd\u30b8\u30c8\u30ea\u3068\u306f\uff1f\nSwift 3.0\u3067\u306a\u305c\u300cC\u30b9\u30bf\u30a4\u30eb\u306efor\u30eb\u30fc\u30d7\u300d\u300c++\uff0f--\u6f14\u7b97\u5b50\u300d\u306a\u3069\u306e\u4ed5\u69d8\u304c\u5ec3\u6b62\u3055\u308c\u305f\u306e\u304b\nSwift 3.0 \u3092\u3044\u307e\u304b\u3089\u5b66\u3076 Swift Evolution \u30a6\u30a9\u30c3\u30c1\u30f3\u30b0\n\n\nSwift3\u304c\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u3066\u304b\u3089\u3001\u7d04\u4e00\u9031\u9593\u304c\u904e\u304e\u307e\u3057\u305f\u3002\u3059\u3067\u306b\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fc\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u3069\u306f\u3001Swift2.3/3\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u3082\u306e\u3082\u5897\u3048\u3066\u304d\u307e\u3057\u305f\u3002\n\u3053\u3053\u3067\u306f\u3001\u500b\u4eba\u7684\u306a\u8a18\u9332\u3068\u3057\u3066\u73fe\u6642\u70b9\u3067\u306eSwift\u306e\u5909\u66f4\u70b9\u3092\u6319\u3052\u3066\u304a\u304d\u307e\u3059\u3002\u3059\u3067\u306b\u77e5\u3063\u3066\u308b\u65b9\u306f\u30b9\u30eb\u30fc\u3057\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3067\u306f\u3001\u4ee5\u4e0b\u304c2016/09/21\u6642\u70b9\u3067accept\u3055\u308c\u305f\u306eSwift Evolution\u3068\u306a\u308a\u307e\u3059\u3002\n\n# Swift Evolution\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\n\n### Active reviews\n\nSE-0143\n[Conditional conformances](https://github.com/apple/swift-evolution/blob/master/proposals/0143-conditional-conformances.md)\n\n### Upcoming reviews\n(none)\n\n### Proposals awaiting scheduling\n(none)\n\n### Accepted (awaiting implementation)\nThis is the list of proposals which have been accepted for inclusion into Swift, but they are not implemented yet, and may not have anyone signed up to implement them. If they are not implemented in time for Swift 3, they will roll into a subsequent release.\n\nSE-0042\n[Flattening the function type of unapplied method references](https://github.com/apple/swift-evolution/blob/master/proposals/0042-flatten-method-types.md)\nSE-0068\n[Expanding Swift Self to class members and value types](https://github.com/apple/swift-evolution/blob/master/proposals/0068-universal-self.md)\nSE-0075\n[Adding a Build Configuration Import Test](https://github.com/apple/swift-evolution/blob/master/proposals/0075-import-test.md)\nSE-0080\n[Failable Numeric Conversion Initializers](https://github.com/apple/swift-evolution/blob/master/proposals/0080-failable-numeric-initializers.md)\nSE-0082\n[Package Manager Editable Packages](https://github.com/apple/swift-evolution/blob/master/proposals/0082-swiftpm-package-edit.md)\nSE-0104\n[Protocol-oriented integers](https://github.com/apple/swift-evolution/blob/master/proposals/0104-improved-integers.md)\nSE-0110\n[Distinguish between single-tuple and multiple-argument function types](https://github.com/apple/swift-evolution/blob/master/proposals/0110-distingish-single-tuple-arg.md)\nSE-0138\n[UnsafeRawBufferPointer](https://github.com/apple/swift-evolution/blob/master/proposals/0138-unsaferawbufferpointer.md)\nSE-0139\n[Bridge Numeric Types to NSNumber and Cocoa Structs to NSValue](https://github.com/apple/swift-evolution/blob/master/proposals/0139-bridge-nsnumber-and-nsvalue.md)\nSE-0141\n[Availability by Swift version](https://github.com/apple/swift-evolution/blob/master/proposals/0141-available-by-swift-version.md)\nSE-0142\n[Permit where clauses to constrain associated types](https://github.com/apple/swift-evolution/blob/master/proposals/0142-associated-types-constraints.md)\n\n### Implemented (Swift 4)\n(none)\n\n### Implemented (Swift 3.1)\nSE-0045\n[Add prefix(while:) and drop(while:) to the stdlib](https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md)\n\n### Implemented (Swift 3.0.1)\nSE-0140\n[Bridge Optional As Its Payload Or NSNull](https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md)\n\n### Implemented (Swift 3)\nSE-0002\n[Removing currying func declaration syntax](https://github.com/apple/swift-evolution/blob/master/proposals/0002-remove-currying.md)\nSE-0003\n[Removing var from Function Parameters](https://github.com/apple/swift-evolution/blob/master/proposals/0003-remove-var-parameters.md)\nSE-0004\n[Remove the ++ and -- operators](https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md)\nSE-0005\n[Better Translation of Objective-C APIs Into Swift](https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md)\nSE-0006\n[Apply API Guidelines to the Standard Library](https://github.com/apple/swift-evolution/blob/master/proposals/0006-apply-api-guidelines-to-the-standard-library.md)\nSE-0007\n[Remove C-style for-loops with conditions and incrementers](https://github.com/apple/swift-evolution/blob/master/proposals/0007-remove-c-style-for-loops.md)\nSE-0008\n[Add a Lazy flatMap for Sequences of Optionals](https://github.com/apple/swift-evolution/blob/master/proposals/0008-lazy-flatmap-for-optionals.md)\nSE-0016\n[Adding initializers to Int and UInt to convert from UnsafePointer and UnsafeMutablePointer](https://github.com/apple/swift-evolution/blob/master/proposals/0016-initializers-for-converting-unsafe-pointers-to-ints.md)\nSE-0017\n[Change Unmanaged to use UnsafePointer](https://github.com/apple/swift-evolution/blob/master/proposals/0017-convert-unmanaged-to-use-unsafepointer.md)\nSE-0019\n[Swift Testing](https://github.com/apple/swift-evolution/blob/master/proposals/0019-package-manager-testing.md)\nSE-0023\n[API Design Guidelines](https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md)\nSE-0025\n[Scoped Access Level](https://github.com/apple/swift-evolution/blob/master/proposals/0025-scoped-access-level.md)\nSE-0029\n[Remove implicit tuple splat behavior from function applications](https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md)\nSE-0031\n[Adjusting inout Declarations for Type Decoration](https://github.com/apple/swift-evolution/blob/master/proposals/0031-adjusting-inout-declarations.md)\nSE-0032\n[Add first(where:) method to SequenceType](https://github.com/apple/swift-evolution/blob/master/proposals/0032-sequencetype-find.md)\nSE-0033\n[Import Objective-C Constants as Swift Types](https://github.com/apple/swift-evolution/blob/master/proposals/0033-import-objc-constants.md)\nSE-0034\n[Disambiguating Line Control Statements from Debugging Identifiers](https://github.com/apple/swift-evolution/blob/master/proposals/0034-disambiguating-line.md)\nSE-0035\n[Limiting inout capture to @noescape contexts](https://github.com/apple/swift-evolution/blob/master/proposals/0035-limit-inout-capture.md)\nSE-0036\n[Requiring Leading Dot Prefixes for Enum Instance Member Implementations](https://github.com/apple/swift-evolution/blob/master/proposals/0036-enum-dot.md)\nSE-0037\n[Clarify interaction between comments & operators](https://github.com/apple/swift-evolution/blob/master/proposals/0037-clarify-comments-and-operators.md)\nSE-0038\n[Package Manager C Language Target Support](https://github.com/apple/swift-evolution/blob/master/proposals/0038-swiftpm-c-language-targets.md)\nSE-0039\n[Modernizing Playground Literals](https://github.com/apple/swift-evolution/blob/master/proposals/0039-playgroundliterals.md)\nSE-0040\n[Replacing Equal Signs with Colons For Attribute Arguments](https://github.com/apple/swift-evolution/blob/master/proposals/0040-attributecolons.md)\nSE-0043\n[Declare variables in 'case' labels with multiple patterns](https://github.com/apple/swift-evolution/blob/master/proposals/0043-declare-variables-in-case-labels-with-multiple-patterns.md)\nSE-0044\n[Import as Member](https://github.com/apple/swift-evolution/blob/master/proposals/0044-import-as-member.md)\nSE-0046\n[Establish consistent label behavior across all parameters including first labels](https://github.com/apple/swift-evolution/blob/master/proposals/0046-first-label.md)\nSE-0047\n[Defaulting non-Void functions so they warn on unused results](https://github.com/apple/swift-evolution/blob/master/proposals/0047-nonvoid-warn.md)\nSE-0048\n[Generic Type Aliases](https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md)\nSE-0049\n[Move @noescape and @autoclosure to be type attributes](https://github.com/apple/swift-evolution/blob/master/proposals/0049-noescape-autoclosure-type-attrs.md)\nSE-0052\n[Change IteratorType post-nil guarantee](https://github.com/apple/swift-evolution/blob/master/proposals/0052-iterator-post-nil-guarantee.md)\nSE-0053\n[Remove explicit use of let from Function Parameters](https://github.com/apple/swift-evolution/blob/master/proposals/0053-remove-let-from-function-parameters.md)\nSE-0054\n[Abolish ImplicitlyUnwrappedOptional type](https://github.com/apple/swift-evolution/blob/master/proposals/0054-abolish-iuo.md)\nSE-0055\n[Make unsafe pointer nullability explicit using Optional](https://github.com/apple/swift-evolution/blob/master/proposals/0055-optional-unsafe-pointers.md)\nSE-0057\n[Importing Objective-C Lightweight Generics](https://github.com/apple/swift-evolution/blob/master/proposals/0057-importing-objc-generics.md)\nSE-0059\n[Update API Naming Guidelines and Rewrite Set APIs Accordingly](https://github.com/apple/swift-evolution/blob/master/proposals/0059-updated-set-apis.md)\nSE-0060\n[Enforcing order of defaulted parameters](https://github.com/apple/swift-evolution/blob/master/proposals/0060-defaulted-parameter-order.md)\nSE-0061\n[Add Generic Result and Error Handling to autoreleasepool()](https://github.com/apple/swift-evolution/blob/master/proposals/0061-autoreleasepool-signature.md)\nSE-0062\n[Referencing Objective-C key-paths](https://github.com/apple/swift-evolution/blob/master/proposals/0062-objc-keypaths.md)\nSE-0063\n[SwiftPM System Module Search Paths](https://github.com/apple/swift-evolution/blob/master/proposals/0063-swiftpm-system-module-search-paths.md)\nSE-0064\n[Referencing the Objective-C selector of property getters and setters](https://github.com/apple/swift-evolution/blob/master/proposals/0064-property-selectors.md)\nSE-0065\n[A New Model For Collections and Indices](https://github.com/apple/swift-evolution/blob/master/proposals/0065-collections-move-indices.md)\nSE-0066\n[Standardize function type argument syntax to require parentheses](https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md)\nSE-0067\n[Enhanced Floating Point Protocols](https://github.com/apple/swift-evolution/blob/master/proposals/0067-floating-point-protocols.md)\nSE-0069\n[Mutability and Foundation Value Types](https://github.com/apple/swift-evolution/blob/master/proposals/0069-swift-mutability-for-foundation.md)\nSE-0070\n[Make Optional Requirements Objective-C-only](https://github.com/apple/swift-evolution/blob/master/proposals/0070-optional-requirements.md)\nSE-0071\n[Allow (most) keywords in member references](https://github.com/apple/swift-evolution/blob/master/proposals/0071-member-keywords.md)\nSE-0072\n[Fully eliminate implicit bridging conversions from Swift](https://github.com/apple/swift-evolution/blob/master/proposals/0072-eliminate-implicit-bridging-conversions.md)\nSE-0076\n[Add overrides taking an UnsafePointer source to non-destructive copying methods on UnsafeMutablePointer](https://github.com/apple/swift-evolution/blob/master/proposals/0076-copying-to-unsafe-mutable-pointer-with-unsafe-pointer-source.md)\nSE-0077\n[Improved operator declarations](https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md)\nSE-0081\n[Move where clause to end of declaration](https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md)\nSE-0085\n[Package Manager Command Names](https://github.com/apple/swift-evolution/blob/master/proposals/0085-package-manager-command-name.md)\nSE-0086\n[Drop NS Prefix in Swift Foundation](https://github.com/apple/swift-evolution/blob/master/proposals/0086-drop-foundation-ns.md)\nSE-0088\n[Modernize libdispatch for Swift 3 naming conventions](https://github.com/apple/swift-evolution/blob/master/proposals/0088-libdispatch-for-swift3.md)\nSE-0089\n[Renaming String.init<T>(_: T)](https://github.com/apple/swift-evolution/blob/master/proposals/0089-rename-string-reflection-init.md)\nSE-0091\n[Improving operator requirements in protocols](https://github.com/apple/swift-evolution/blob/master/proposals/0091-improving-operators-in-protocols.md)\nSE-0092\n[Typealiases in protocols and protocol extensions](https://github.com/apple/swift-evolution/blob/master/proposals/0092-typealiases-in-protocols.md)\nSE-0093\n[Adding a public base property to slices](https://github.com/apple/swift-evolution/blob/master/proposals/0093-slice-base.md)\nSE-0094\n[Add sequence(first:next:) and sequence(state:next:) to the stdlib](https://github.com/apple/swift-evolution/blob/master/proposals/0094-sequence-function.md)\nSE-0095\n[Replace protocol<P1,P2> syntax with P1 & P2 syntax](https://github.com/apple/swift-evolution/blob/master/proposals/0095-any-as-existential.md)\nSE-0096\n[Converting dynamicType from a property to an operator](https://github.com/apple/swift-evolution/blob/master/proposals/0096-dynamictype.md)\nSE-0099\n[Restructuring Condition Clauses](https://github.com/apple/swift-evolution/blob/master/proposals/0099-conditionclauses.md)\nSE-0101\n[Reconfiguring sizeof and related functions into a unified MemoryLayout struct](https://github.com/apple/swift-evolution/blob/master/proposals/0101-standardizing-sizeof-naming.md)\nSE-0102\n[Remove @noreturn attribute and introduce an empty Never type](https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md)\nSE-0103\n[Make non-escaping closures the default](https://github.com/apple/swift-evolution/blob/master/proposals/0103-make-noescape-default.md)\nSE-0106\n[Add a macOS Alias for the OSX Platform Configuration Test](https://github.com/apple/swift-evolution/blob/master/proposals/0106-rename-osx-to-macos.md)\nSE-0107\n[UnsafeRawPointer API](https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md)\nSE-0109\n[Remove the Boolean protocol](https://github.com/apple/swift-evolution/blob/master/proposals/0109-remove-boolean.md)\nSE-0111\n[Remove type system significance of function argument labels](https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md)\nSE-0112\n[Improved NSError Bridging](https://github.com/apple/swift-evolution/blob/master/proposals/0112-nserror-bridging.md)\nSE-0113\n[Add integral rounding functions to FloatingPoint](https://github.com/apple/swift-evolution/blob/master/proposals/0113-rounding-functions-on-floatingpoint.md)\nSE-0114\n[Updating Buffer \"Value\" Names to \"Header\" Names](https://github.com/apple/swift-evolution/blob/master/proposals/0114-buffer-naming.md)\nSE-0115\n[Rename Literal Syntax Protocols](https://github.com/apple/swift-evolution/blob/master/proposals/0115-literal-syntax-protocols.md)\nSE-0116\n[Import Objective-C id as Swift Any type](https://github.com/apple/swift-evolution/blob/master/proposals/0116-id-as-any.md)\nSE-0117\n[Allow distinguishing between public access and public overridability](https://github.com/apple/swift-evolution/blob/master/proposals/0117-non-public-subclassable-by-default.md)\nSE-0118\n[Closure Parameter Names and Labels](https://github.com/apple/swift-evolution/blob/master/proposals/0118-closure-parameter-names-and-labels.md)\nSE-0120\n[Revise partition Method Signature](https://github.com/apple/swift-evolution/blob/master/proposals/0120-revise-partition-method.md)\nSE-0121\n[Remove Optional Comparison Operators](https://github.com/apple/swift-evolution/blob/master/proposals/0121-remove-optional-comparison-operators.md)\nSE-0124\n[Int.init(ObjectIdentifier) and UInt.init(ObjectIdentifier) should have a bitPattern: label](https://github.com/apple/swift-evolution/blob/master/proposals/0124-bitpattern-label-for-int-initializer-objectidentfier.md)\nSE-0125\n[Remove NonObjectiveCBase and isUniquelyReferenced](https://github.com/apple/swift-evolution/blob/master/proposals/0125-remove-nonobjectivecbase.md)\nSE-0127\n[Cleaning up stdlib Pointer and Buffer Routines](https://github.com/apple/swift-evolution/blob/master/proposals/0127-cleaning-up-stdlib-ptr-buffer.md)\nSE-0128\n[Change failable UnicodeScalar initializers to failable](https://github.com/apple/swift-evolution/blob/master/proposals/0128-unicodescalar-failable-initializer.md)\nSE-0129\n[Package Manager Test Naming Conventions](https://github.com/apple/swift-evolution/blob/master/proposals/0129-package-manager-test-naming-conventions.md)\nSE-0130\n[Replace repeating Character and UnicodeScalar forms of String.init](https://github.com/apple/swift-evolution/blob/master/proposals/0130-string-initializers-cleanup.md)\nSE-0131\n[Add AnyHashable to the standard library](https://github.com/apple/swift-evolution/blob/master/proposals/0131-anyhashable.md)\nSE-0133\n[Rename flatten() to joined()](https://github.com/apple/swift-evolution/blob/master/proposals/0133-rename-flatten-to-joined.md)\nSE-0134\n[Rename two UTF8-related properties on String](https://github.com/apple/swift-evolution/blob/master/proposals/0134-rename-string-properties.md)\nSE-0135\n[Package Manager Support for Differentiating Packages by Swift version](https://github.com/apple/swift-evolution/blob/master/proposals/0135-package-manager-support-for-differentiating-packages-by-swift-version.md)\nSE-0136\n[Memory Layout of Values](https://github.com/apple/swift-evolution/blob/master/proposals/0136-memory-layout-of-values.md)\nSE-0137\n[Avoiding Lock-In to Legacy Protocol Designs](https://github.com/apple/swift-evolution/blob/master/proposals/0137-avoiding-lock-in.md)\n\n### Implemented (Swift 2.2)\nSE-0001\n[Allow (most) keywords as argument labels](https://github.com/apple/swift-evolution/blob/master/proposals/0001-keywords-as-argument-labels.md)\nSE-0011\n[Replace typealias keyword with associatedtype for associated type declarations](https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md)\nSE-0014\n[Constraining AnySequence.init](https://github.com/apple/swift-evolution/blob/master/proposals/0014-constrained-AnySequence.md)\nSE-0015\n[Tuple comparison operators](https://github.com/apple/swift-evolution/blob/master/proposals/0015-tuple-comparison-operators.md)\nSE-0020\n[Swift Language Version Build Configuration](https://github.com/apple/swift-evolution/blob/master/proposals/0020-if-swift-version.md)\nSE-0021\n[Naming Functions with Argument Labels](https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md)\nSE-0022\n[Referencing the Objective-C selector of a method](https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md)\nSE-0028\n[Modernizing Swift's Debugging Identifiers (__FILE__, etc)](https://github.com/apple/swift-evolution/blob/master/proposals/0028-modernizing-debug-identifiers.md)\n\n## \u500b\u4eba\u7684\u898b\u89e3\n\n\u3053\u308c\u3089\u306f\u3001Swift Programming Language Evolution: Proposal Status\u304b\u3089\u5f15\u3063\u5f35\u3063\u3066\u304d\u305f\u3082\u306e\u3067\u3059\u3002\u307e\u305f\u3001\u5225\u9014\u53c2\u8003\u8cc7\u6599\u3068\u3057\u3066[\u5c0f\u91ce \u5c06\u4e4b\uff08\u304a\u306e \u307e\u3055\u3086\u304d\uff09\u6c0f](http://qiita.com/mono0926)\u306e[Build insider](http://www.buildinsider.net/column/ono-masayuki/)\u306e\u8a18\u4e8b\u304c\u3001Swift\u306e\u3053\u308c\u307e\u3067\u306e\u904d\u6b74\u3084\u3001Swift3\u306e\u30c8\u30d4\u30c3\u30af\u3001Swift4\u3078\u306e\u8003\u5bdf\u304c\u8a73\u3057\u304f\u307e\u3068\u308c\u3089\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u307e\u3060\u8aad\u3093\u3067\u3044\u306a\u3044\u65b9\u306f\u3001\u662f\u975e\u4e00\u8aad\u3059\u308b\u4e8b\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002\n\n\u672c\u5f53\u306b\u3001\u4e0a\u8a18\u306e\u8a18\u4e8b\u304c\u7d20\u6674\u3089\u3057\u3044\u306e\u3067\u8a00\u3046\u4e8b\u306f\u7121\u3044\u306e\u3067\u3059\u304c\u3001Swift\u3092\u8ffd\u3044\u304b\u3051\u308b\u306b\u306f\u82f1\u8a9e\u3067\u3084\u308a\u3068\u308a\u3055\u308c\u308b\u30e1\u30fc\u30ea\u30f3\u30b0\u30ea\u30b9\u30c8\u3092\u6bce\u65e5\u773a\u3081\u3001```Phantom Type```\u306a\u3069\u3001\u4ed6\u306e\u8a00\u8a9e\u4ed5\u69d8\u306b\u3075\u308c\u3001IPv6\u3084AST\u306a\u3069\u306e\u6280\u8853\u7684\u306a\u4e8b\u306a\u3069\u3001\u52c9\u5f37\u3059\u308b\u4e8b\u30fb\u51fa\u6765\u308b\u4e8b\u304c\u5c71\u306e\u3088\u3046\u306b\u51fa\u3066\u304d\u307e\u3059\u3002Swift2 -> 3\u3078\u306f\u305d\u3053\u307e\u3067\u7834\u58ca\u7684\u306a\u5909\u66f4\uff08\u30af\u30e9\u30b9\u304b\u3089\u69cb\u9020\u4f53\u306b\u306a\u3063\u305f\u3082\u306e\u306a\u3069\u306f\u5225\u3068\u3057\u3066\uff09\u306f\u3001\u5927\u4eba\u3057\u3044\u5370\u8c61\u3067\u3059\u304c\u3001Swift4\u3078\u306fABI\uff08Application Binary Interface\uff09\u306a\u3069\u306e\u5909\u66f4\u3082\u3042\u308a\u3001\u4eca\u306e\u5185\u306b\u81ea\u5206\u306e\u4e2d\u3067\u30ad\u30e3\u30c3\u30c1\u30a2\u30c3\u30d7\u3067\u304d\u3066\u3044\u306a\u3044\u90e8\u5206\u3092\u8ffd\u3044\u304b\u3051\u308b\u3001\u30c1\u30e3\u30f3\u30b9\u304b\u306a\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u304a\u305d\u3089\u304f\u3001\u5e74\u672b\u307e\u3067\u306b\u306f\u6052\u4f8b\u306eSwift3\u5bfe\u5fdc\u3068\u3001ATS\u306e\u5bfe\u5fdc\u304c\u3042\u308a\u5fd9\u3057\u3044\u3068\u306f\u601d\u3044\u307e\u3059\u304c\u3001Haskell\u672c\u306a\u3069\u3092\u8aad\u3093\u3067\u5225\u306e\u89d2\u5ea6\u304b\u3089\u3001Swift\u3092\u697d\u3057\u3081\u308c\u3070\u306a\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\n# \u8b1d\u8f9e\n\n- [Swift Programming Language Evolution](https://github.com/apple/swift-evolution)\n\n- [Swift Programming Language Evolution: Proposal Status](http://apple.github.io/swift-evolution/)\n\n- [lists.swift.org Mailing Lists](https://lists.swift.org/mailman/listinfo)\n\n- [Swift 3\u306e\u30ea\u30ea\u30fc\u30b9\u524d\u306b\u3001\u3053\u308c\u307e\u3067\u306e\u9032\u5316\u306e\u5909\u9077\u3092\u306a\u305e\u308b](http://www.buildinsider.net/column/ono-masayuki/001)\n\n- [Swift\u306f3.0\u3067\u5b89\u5b9a\u3059\u308b\u306e\u304b\uff1f \u30ea\u30ea\u30fc\u30b9\u4e88\u5b9a\u65e5\u3068\u65b0\u6a5f\u80fd\u30ea\u30b9\u30c8](http://www.buildinsider.net/column/ono-masayuki/002)\n\n- [Swift\u306e\u958b\u767a\u4f53\u5236\u3001swift.org\uff0fSwift Evolution\u30ea\u30dd\u30b8\u30c8\u30ea\u3068\u306f\uff1f](http://www.buildinsider.net/column/ono-masayuki/003)\n\n- [Swift 3.0\u3067\u306a\u305c\u300cC\u30b9\u30bf\u30a4\u30eb\u306efor\u30eb\u30fc\u30d7\u300d\u300c++\uff0f--\u6f14\u7b97\u5b50\u300d\u306a\u3069\u306e\u4ed5\u69d8\u304c\u5ec3\u6b62\u3055\u308c\u305f\u306e\u304b](http://www.buildinsider.net/column/ono-masayuki/004)\n\n- [Swift 3.0 \u3092\u3044\u307e\u304b\u3089\u5b66\u3076 Swift Evolution \u30a6\u30a9\u30c3\u30c1\u30f3\u30b0](http://developer.hatenastaff.com/entry/learn-about-swift-3-point-0-from-swift-evolution)\n\n\n", "tags": ["swift3", "Swift"]}