{"context": "\u5c02\u7528\u56de\u7dda\u5f15\u3044\u3066\u308b\u304f\u305b\u306b\u3001\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u3092\u91cd\u8996\u3057\u3066SSL\u3067\u901a\u4fe1\u3057\u3066\u4e0b\u3055\u3044\u3068\u8a00\u308f\u308c\u305f\u3002\n\u3067\u3082\u3001\u306a\u305c\u304b\u8a3c\u660e\u66f8\u306f\u30aa\u30ec\u30aa\u30ec\u8a3c\u660e\u3067\u30fb\u30fb\u30fb\u30fb\u30fb\u306a\u3093\u304bSSL\u306e\u610f\u5473\u304c\u306a\u3044\u3088\u3046\u306a\u30fb\u30fb\u30fb\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u30cd\u30c3\u30c8\u306b\u6bd4\u8f03\u7684\u65b0\u3057\u3044\u5b9f\u88c5\u4f8b\u304c\u306a\u304b\u3063\u305f\u306e\u3067\u3053\u3053\u306b\u5099\u5fd8\u9332\u3068\u3057\u3066\u6b8b\u3057\u3066\u304a\u304f\u3002\npublic RestTemplate restTemplate(){\n\n        //httpclient    : '4.5.2\n\n        final String keyStoreType = \"PKCS12\";\n        final String keyStorePath = \"../../keyStore.p12\";\n        final String keyStorePassWord = \"password\";\n        final String sslProtoCol = \"TLSv1.2\";\n\n\n        HttpClientBuilder httpClientBuilder = HttpClientBuilder.create();\n\n        // keyStore\u306e\u30ed\u30fc\u30c9\n        KeyStore keyStore = KeyStore.getInstance(keyStoreType);\n        keyStore.load(new FileInputStream(keyStorePath), keyStorePassWord.toCharArray());\n\n        // KeyManager\u306e\u8a2d\u5b9a\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n        kmf.init(keyStore, keyStorePassWord.toCharArray());\n\n        // SSLContext\u306e\u751f\u6210\n        SSLContext sslContext = SSLContext.getInstance(sslProtoCol);\n        sslContext.init(kmf.getKeyManagers(),\n                new X509TrustManager[]{ new LooseTrustManger()},\n                new SecureRandom());\n\n        httpClientBuilder.setSSLContext(sslContext);\n\n        // \u8a3c\u660e\u66f8\u306e\u30db\u30b9\u30c8\u306e\u691c\u8a3c\u3092\u7121\u8996\u3059\u308b\n        httpClientBuilder.setSSLHostnameVerifier(new LooseHostnameVerrifer());\n\n        HttpComponentsClientHttpRequestFactory factory = new HttpComponentsClientHttpRequestFactory();\n        factory.setHttpClient(httpClientBuilder.build());\n\n        return new RestTemplate(factory);\n\n    }\n\npublic class LooseTrustManger implements X509TrustManager{\n\n    /**\n     * \u691c\u8a3c\u3092\u4f55\u3082\u3057\u306a\u3044\n     */\n    @Override\n    public void checkClientTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {}\n\n    /**\n     * \u691c\u8a3c\u3092\u4f55\u3082\u3057\u306a\u3044\n     */\n    @Override\n    public void checkServerTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {}\n\n    /**\n     * \u8a3c\u660e\u66f8\u3092\u8fd4\u5374\u3057\u306a\u3044\n     */\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {return null;}\n\n}\n\npublic class LooseHostnameVerrifer implements HostnameVerifier{\n\n    @Override\n    public boolean verify(String arg0, SSLSession arg1) {return true;}\n\n}\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3001java\u306ekeytool\u3067\u4f5c\u6210\u3057\u305f\u30aa\u30ec\u30aa\u30ec\u8a3c\u660e\u66f8\u3067\u901a\u4fe1\u3067\u304d\u307e\u3057\u305f\u3002\nfindbagus\u306b\u304b\u3051\u305f\u3089\u8b66\u544a\u304c\u3067\u3061\u3083\u3044\u307e\u3059\u304c\u6c17\u306b\u3057\u306a\u3044\u3002\n\u5c02\u7528\u56de\u7dda\u5f15\u3044\u3066\u308b\u304f\u305b\u306b\u3001\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u3092\u91cd\u8996\u3057\u3066SSL\u3067\u901a\u4fe1\u3057\u3066\u4e0b\u3055\u3044\u3068\u8a00\u308f\u308c\u305f\u3002  \n\u3067\u3082\u3001\u306a\u305c\u304b\u8a3c\u660e\u66f8\u306f\u30aa\u30ec\u30aa\u30ec\u8a3c\u660e\u3067\u30fb\u30fb\u30fb\u30fb\u30fb\u306a\u3093\u304bSSL\u306e\u610f\u5473\u304c\u306a\u3044\u3088\u3046\u306a\u30fb\u30fb\u30fb\u3002  \n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u30cd\u30c3\u30c8\u306b\u6bd4\u8f03\u7684\u65b0\u3057\u3044\u5b9f\u88c5\u4f8b\u304c\u306a\u304b\u3063\u305f\u306e\u3067\u3053\u3053\u306b\u5099\u5fd8\u9332\u3068\u3057\u3066\u6b8b\u3057\u3066\u304a\u304f\u3002\n\n```java\npublic RestTemplate restTemplate(){\n\n\t\t//httpclient\t: '4.5.2\n\n\t\tfinal String keyStoreType = \"PKCS12\";\n\t\tfinal String keyStorePath = \"../../keyStore.p12\";\n\t\tfinal String keyStorePassWord = \"password\";\n\t\tfinal String sslProtoCol = \"TLSv1.2\";\n\n\n\t\tHttpClientBuilder httpClientBuilder = HttpClientBuilder.create();\n\n\t\t// keyStore\u306e\u30ed\u30fc\u30c9\n\t\tKeyStore keyStore = KeyStore.getInstance(keyStoreType);\n\t\tkeyStore.load(new FileInputStream(keyStorePath), keyStorePassWord.toCharArray());\n\n\t\t// KeyManager\u306e\u8a2d\u5b9a\n\t\tKeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n\t\tkmf.init(keyStore, keyStorePassWord.toCharArray());\n\n\t\t// SSLContext\u306e\u751f\u6210\n\t\tSSLContext sslContext = SSLContext.getInstance(sslProtoCol);\n\t\tsslContext.init(kmf.getKeyManagers(),\n\t\t\t\tnew X509TrustManager[]{ new LooseTrustManger()},\n\t\t\t\tnew SecureRandom());\n\n\t\thttpClientBuilder.setSSLContext(sslContext);\n\n\t\t// \u8a3c\u660e\u66f8\u306e\u30db\u30b9\u30c8\u306e\u691c\u8a3c\u3092\u7121\u8996\u3059\u308b\n\t\thttpClientBuilder.setSSLHostnameVerifier(new LooseHostnameVerrifer());\n\n\t\tHttpComponentsClientHttpRequestFactory factory = new HttpComponentsClientHttpRequestFactory();\n\t\tfactory.setHttpClient(httpClientBuilder.build());\n\n\t\treturn new RestTemplate(factory);\n\n\t}\n\npublic class LooseTrustManger implements X509TrustManager{\n\n\t/**\n\t * \u691c\u8a3c\u3092\u4f55\u3082\u3057\u306a\u3044\n\t */\n\t@Override\n\tpublic void checkClientTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {}\n\n\t/**\n\t * \u691c\u8a3c\u3092\u4f55\u3082\u3057\u306a\u3044\n\t */\n\t@Override\n\tpublic void checkServerTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {}\n\n\t/**\n\t * \u8a3c\u660e\u66f8\u3092\u8fd4\u5374\u3057\u306a\u3044\n\t */\n\t@Override\n\tpublic X509Certificate[] getAcceptedIssuers() {return null;}\n\n}\n\npublic class LooseHostnameVerrifer implements HostnameVerifier{\n\n\t@Override\n\tpublic boolean verify(String arg0, SSLSession arg1) {return true;}\n\n}\n```\n\u3053\u3093\u306a\u611f\u3058\u3067\u3001java\u306ekeytool\u3067\u4f5c\u6210\u3057\u305f\u30aa\u30ec\u30aa\u30ec\u8a3c\u660e\u66f8\u3067\u901a\u4fe1\u3067\u304d\u307e\u3057\u305f\u3002\nfindbagus\u306b\u304b\u3051\u305f\u3089\u8b66\u544a\u304c\u3067\u3061\u3083\u3044\u307e\u3059\u304c\u6c17\u306b\u3057\u306a\u3044\u3002\n", "tags": ["Java", "spring", "REST-API"]}