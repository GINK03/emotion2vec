{"tags": ["F#"], "context": " More than 1 year has passed since last update.\u3053\u3061\u3089\u306e\u30b3\u30fc\u30c9\u3092F#\u306b\u76f4\u3057\u3066\u66f8\u3044\u3066\u307f\u305f\u3002\n\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306b\u3057\u305f\u3044\u306e\u306b\u578b\u5236\u7d04\u304c\u3046\u307e\u304f\u304b\u3051\u306a\u304f\u3066\u60b2\u3057\u304b\u3063\u305f\n\ntype BIT(size) =\n    let size = size\n    let data : int array = Array.zeroCreate size\n\n    member x.Item\n        with get(i) =\n            match i < size with\n            |true ->\n                let idx = ref i\n                seq{\n                    while !idx > 0 do\n                        yield data.[!idx]\n                        idx := !idx &&& (!idx - 1)\n                }\n                |> Seq.sum \n            |false ->\n                failwith \"index overflow\"\n\n    member x.update(i, value) =\n        let idx = ref i\n        while !idx < size do\n            data.[!idx] <- data.[!idx] + value \n            idx := !idx + (!idx &&& (- !idx))\n        ()\n\n\n[<EntryPoint>]\nlet main argv = \n    let k = BIT(16)\n    k.update(1, 10)\n    k.update(2, 1)\n    k.update(5, 1)\n    printfn \"%A\" (k.[1], k.[2], k.[5])\n    0\n\n\n[\u3053\u3061\u3089](http://d.hatena.ne.jp/naoya/20090606/1244284915)\u306e\u30b3\u30fc\u30c9\u3092F#\u306b\u76f4\u3057\u3066\u66f8\u3044\u3066\u307f\u305f\u3002\n\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306b\u3057\u305f\u3044\u306e\u306b\u578b\u5236\u7d04\u304c\u3046\u307e\u304f\u304b\u3051\u306a\u304f\u3066\u60b2\u3057\u304b\u3063\u305f\n\n```fsharp\n\ntype BIT(size) =\n    let size = size\n    let data : int array = Array.zeroCreate size\n    \n    member x.Item\n        with get(i) =\n            match i < size with\n            |true ->\n                let idx = ref i\n                seq{\n                    while !idx > 0 do\n                        yield data.[!idx]\n                        idx := !idx &&& (!idx - 1)\n                }\n                |> Seq.sum \n            |false ->\n                failwith \"index overflow\"\n                \n    member x.update(i, value) =\n        let idx = ref i\n        while !idx < size do\n            data.[!idx] <- data.[!idx] + value \n            idx := !idx + (!idx &&& (- !idx))\n        ()\n            \n\n[<EntryPoint>]\nlet main argv = \n    let k = BIT(16)\n    k.update(1, 10)\n    k.update(2, 1)\n    k.update(5, 1)\n    printfn \"%A\" (k.[1], k.[2], k.[5])\n    0\n\n```"}