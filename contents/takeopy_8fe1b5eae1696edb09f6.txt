{"context": "Blender\u306f\u57fa\u672c\u7684\u306b\u306f\u5165\u529b\u306b\u5fdc\u3058\u3066\u753b\u9762\u304c\u66f4\u65b0\u3055\u308c\u308b\u3093\u3067\u3059\u304c\u3001\u4f55\u3082\u5165\u529b\u3057\u306a\u304f\u3068\u3082\u81ea\u52d5\u3067\u753b\u9762\u3092\u66f4\u65b0\u3057\u3066\u3082\u3089\u3044\u305f\u3044\u6642\u3082\u3042\u308a\u307e\u3059\u3088\u306d\u3002\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u3093\u306a\u6642\u306b\u306f\u30a4\u30d9\u30f3\u30c8\u30bf\u30a4\u30de\u30fc\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\n\u305f\u3060\u753b\u9762\u3092\u66f4\u65b0\u3059\u308b\u3060\u3051\u3067\u306f\u5206\u304b\u308a\u8f9b\u3044\u306e\u3067\u3001\u753b\u50cf\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u79fb\u52d5\u3055\u305b\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u30b5\u30f3\u30d7\u30eb\n\ngl_benchmark.py\n# ##### BEGIN GPL LICENSE BLOCK #####\n#\n#  This program is free software; you can redistribute it and/or\n#  modify it under the terms of the GNU General Public License\n#  as published by the Free Software Foundation; either version 2\n#  of the License, or (at your option) any later version.\n#\n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#  You should have received a copy of the GNU General Public License\n#  along with this program; if not, write to the Free Software Foundation,\n#  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n#\n# ##### END GPL LICENSE BLOCK #####\n\n# Blender2.77a\n\nimport time\nimport random\n\nimport bpy\nimport bgl\nimport blf\n\n\nimage_file_path = \"C:/Works/blender_rogo.png\"\n\nclass GL_Texture():\n    def __init__(self, file_path):\n        self.image = None\n        self.width = 0\n        self.height = 0\n\n        self.load_image(file_path)\n\n    def load_image(self, file_path):\n        try:\n            self.image = bpy.data.images.load(file_path)\n        except Exception as e:\n            print(e)\n\n        if self.image:\n            self.width, self.height = self.image.size\n            self.image.gl_load(0, bgl.GL_NEAREST, bgl.GL_NEAREST)\n\n    def remove(self):\n        if self.image:\n            try:\n                self.image.user_clear()\n                self.image.gl_free()\n                self.image.buffers_free()\n                bpy.data.images.remove(self.image)\n            except Exception as e:\n                print(e)\n\n    def bind(self):\n        if self.image.bindcode[0]:\n            bgl.glBindTexture(bgl.GL_TEXTURE_2D, self.image.bindcode[0])\n        else:\n            self.image.gl_load(0, bgl.GL_NEAREST, bgl.GL_NEAREST)\n            print(\"reload gl texture\")\n\n\nclass Sprite():\n    def __init__(self, x, y, move_x, move_y):\n        self.x = x\n        self.y = y\n        self.move_x = move_x\n        self.move_y = move_y\n\n\nclass GL_BenchMark():\n    def __init__(self):\n        self.texture = GL_Texture(image_file_path)\n\n        self.fps = 0\n        self.fps_count = 0\n        self.fps_time = time.time()\n        self.fps_one_second = self.fps_time\n\n        self.view3d_width = 100.0\n        self.view3d_height = 100.0\n\n        self.sprite_list = []\n        self.sprite_add(100)\n\n    def draw(self, context):\n        for region in context.area.regions:\n            if region.type == \"WINDOW\":\n                self.view3d_width = region.width\n                self.view3d_height = region.height\n\n        # calc\n        self.fps_time = time.time()\n        self.fps_count += 1\n        if (self.fps_time-self.fps_one_second) >= 1.0:\n            self.fps = self.fps_count\n            self.fps_count = 0\n            self.fps_one_second = self.fps_time\n\n        for sp in self.sprite_list:\n            sp.x += sp.move_x\n            if sp.x < 0.0 or self.view3d_width < sp.x:\n                sp.move_x *= -1\n                sp.x += sp.move_x\n\n            sp.y += sp.move_y\n            if sp.y < 0.0 or self.view3d_height < sp.y:\n                sp.move_y *= -1\n                sp.y += sp.move_y\n\n        # draw\n        bgl.glColor4f(1.0, 1.0, 1.0, 1.0)\n        bgl.glEnable(bgl.GL_BLEND)\n        bgl.glEnable(bgl.GL_TEXTURE_2D)\n\n        self.texture.bind()\n        for sp in self.sprite_list:\n            w = self.texture.width\n            h = self.texture.height\n            bgl.glBegin(bgl.GL_QUADS)\n            bgl.glTexCoord2f(0.0, 0.0)\n            bgl.glVertex2f(sp.x, sp.y)\n            bgl.glTexCoord2f(1.0, 0.0)\n            bgl.glVertex2f(sp.x+w, sp.y)\n            bgl.glTexCoord2f(1.0, 1.0)\n            bgl.glVertex2f(sp.x+w, sp.y+h)\n            bgl.glTexCoord2f(0.0, 1.0)\n            bgl.glVertex2f(sp.x, sp.y+h)\n            bgl.glEnd()\n\n        bgl.glDisable(bgl.GL_TEXTURE_2D)\n        bgl.glDisable(bgl.GL_BLEND)\n\n        # text draw\n        font_id = 0\n        blf.enable(font_id, blf.SHADOW)\n        blf.shadow(font_id, 5, 0.0, 0.0, 0.0, 1.0)\n\n        blf.position(font_id, 5, 5, 0)\n        blf.size(font_id, 25, 72)\n        blf.draw(font_id, \"FPS:{}\".format(self.fps))\n\n        blf.position(font_id, 5, 30, 0)\n        blf.size(font_id, 25, 72)\n        blf.draw(font_id, \"count:{}\".format(len(self.sprite_list)))\n\n        blf.disable(font_id, blf.SHADOW)\n\n    def remove(self):\n        self.texture.remove()\n\n    def sprite_add(self, count):\n        for i in range(count):\n            x = random.uniform(1.0, self.view3d_width-1.0)\n            y = random.uniform(1.0, self.view3d_height-1.0)\n            vx = random.uniform(-2.0, 2.0)\n            vy = random.uniform(-2.0, 2.0)\n\n            self.sprite_list.append(Sprite(x, y, vx, vy))\n\n    def sprite_remove(self, count):\n        if len(self.sprite_list) > count:\n            for i in range(count):\n                self.sprite_list.pop()\n\n    def event(self, context, event):\n        if event.type == 'UP_ARROW' and event.value == 'PRESS':\n            self.sprite_add(100)\n            return {'RUNNING_MODAL'}\n\n        if event.type == 'DOWN_ARROW' and event.value == 'PRESS':\n            self.sprite_remove(100)\n            return {'RUNNING_MODAL'}\n\n        return {'PASS_THROUGH'}\n\n\nclass GL_BenchMark_Operator(bpy.types.Operator):\n    bl_idname = \"view3d.gl_bechmark_operator\"\n    bl_label = \"View3D OpenGL Bechmark\"\n\n    _handle_draw = None\n    is_enabled = False\n    _timer = None\n    _gl_benchmark = None\n\n    @staticmethod\n    def draw_callback_px(self, context):\n        GL_BenchMark_Operator._gl_benchmark.draw(context)\n\n    @staticmethod\n    def handle_add(self, context):\n        GL_BenchMark_Operator._handle_draw = bpy.types.SpaceView3D.draw_handler_add(\n                self.draw_callback_px, (self, context), 'WINDOW', 'POST_PIXEL')\n        GL_BenchMark_Operator._timer = context.window_manager.event_timer_add(\n                1.0/60.0, context.window)\n\n    @staticmethod\n    def handle_remove(context):\n        if GL_BenchMark_Operator._handle_draw is not None:\n            context.window_manager.event_timer_remove(GL_BenchMark_Operator._timer)\n            bpy.types.SpaceView3D.draw_handler_remove(GL_BenchMark_Operator._handle_draw, 'WINDOW')\n            GL_BenchMark_Operator._timer = None\n            GL_BenchMark_Operator._handle_draw = None\n            GL_BenchMark_Operator.is_enabled = False\n\n    @classmethod\n    def poll(cls, context):\n        return context.area.type == 'VIEW_3D'\n\n    def modal(self, context, event):\n        if context.area:\n            context.area.tag_redraw()\n\n        if GL_BenchMark_Operator.is_enabled == False:\n            return {'CANCELLED'}\n\n        if event.type == 'TIMER':\n            return {'PASS_THROUGH'}\n\n        return GL_BenchMark_Operator._gl_benchmark.event(context, event)\n\n    def invoke(self, context, event):\n        if context.area.type == 'VIEW_3D':\n            if GL_BenchMark_Operator.is_enabled:\n                self.cancel(context)\n                return {'FINISHED'}\n            else:\n                GL_BenchMark_Operator._gl_benchmark = GL_BenchMark()\n                GL_BenchMark_Operator.handle_add(self, context)\n                GL_BenchMark_Operator.is_enabled = True\n\n                context.area.tag_redraw()\n                context.window_manager.modal_handler_add(self)\n                return {'RUNNING_MODAL'}\n        else:\n            self.report({'WARNING'}, \"View3D not found, cannot run operator\")\n            return {'CANCELLED'}\n\n    def cancel(self, context):\n        GL_BenchMark_Operator.handle_remove(context)\n\n        if GL_BenchMark_Operator._gl_benchmark is not None:\n            GL_BenchMark_Operator._gl_benchmark.remove()\n            GL_BenchMark_Operator._gl_benchmark = None\n\n\nclass GL_Benchmark_panel(bpy.types.Panel):\n    bl_label = \"GL Benchmark\"\n    bl_space_type = \"VIEW_3D\"\n    bl_region_type = \"UI\"\n\n    def draw(self, context):\n        layout = self.layout\n        if GL_BenchMark_Operator.is_enabled:\n            layout.operator(\"view3d.gl_bechmark_operator\", \"Stop\", icon=\"PAUSE\")\n        else:\n            layout.operator(\"view3d.gl_bechmark_operator\", \"Start\", icon=\"PLAY\")\n\n\ndef register():\n    bpy.utils.register_class(GL_BenchMark_Operator)\n    bpy.utils.register_class(GL_Benchmark_panel)\n\ndef unregister():\n    bpy.utils.unregister_class(GL_Benchmark_panel)\n    bpy.utils.unregister_class(GL_BenchMark_Operator)\n\nif __name__ == \"__main__\":\n    register()\n\n\nBlender\u306e\u30c6\u30ad\u30b9\u30c8\u30a8\u30c7\u30a3\u30bf\u306b\u30b3\u30d4\u30da\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u4eca\u56de\u3082\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306f\u3053\u308c\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u624b\u5143\u306b\u9069\u5f53\u306a\u753b\u50cf\u304c\u306a\u3051\u308c\u3070\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u4e00\u756a\u4e0a\u306eimage_file_path\u306f\u5b9f\u969b\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u66f8\u3044\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u5b9f\u884c\u7d50\u679c\n\u307e\u305a3DView\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u30d1\u30cd\u30eb\u306b\u30dc\u30bf\u30f3\u304c\u51fa\u308b\u306e\u3067\u62bc\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u3059\u308b\u3068\u3053\u3046\u306a\u308a\u307e\u3059\u3002\n\ncount\u304c\u8868\u793a\u3057\u3066\u3044\u308b\u753b\u50cf\u306e\u6570\u3002\n\u305d\u308c\u3068FPS\u8868\u793a\u3082\u3057\u3066\u3044\u307e\u3059\u3002\n\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u4e0a\u30ad\u30fc\u3001\u4e0b\u30ad\u30fc\u3067\u8868\u793a\u3059\u308b\u753b\u50cf\u306e\u6570\u3092\u5897\u6e1b\u3055\u305b\u3089\u308c\u307e\u3059\u3002\n\u7c21\u6613\u7684\u306a\u30d9\u30f3\u30c1\u30fc\u30de\u30fc\u30af\u3068\u3057\u3066\u4f7f\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u8aac\u660e\n    GL_BenchMark_Operator._timer = context.window_manager.event_timer_add(\n            1.0/60.0, context.window)\n\n\u30a4\u30d9\u30f3\u30c8\u30bf\u30a4\u30de\u30fc\u3092\u8a2d\u5b9a\u3057\u3066\u307e\u3059\u3002\n\u79d2\u3067\u6307\u5b9a\u3059\u308b\u3088\u3046\u306a\u306e\u306760\u5272\u308b1\u79d2\u3092\u8a2d\u5b9a\u3002\n\u3053\u306e\u9593\u9694\u3067\u30a4\u30d9\u30f3\u30c8\u3092\u9001\u3063\u3066\u304f\u308c\u308b\u3088\u3046\u3067\u3059\u3002\n\u3042\u3068\u306f\u307b\u3068\u3093\u3069\u524d\u56de\u306e\u4f7f\u3044\u56de\u3057\u3067\u3059\u306d\u3002\n\n\u6700\u5f8c\u306b\n\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u7684\u306a\u611f\u3058\u3067\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u304c\u3069\u3046\u3067\u3057\u3087\u3046\u304b\u3002\n\u81ea\u5206\u306e\u74b0\u5883\u3067\u306f\u5b89\u5b9a\u3057\u306660FPS\u304c\u51fa\u305b\u308b\u306e\u306f2600\u500b\u3050\u3089\u3044\u307e\u3067\u3067\u3057\u305f\u306d\u3002\n\u3053\u308c\u3092\u5229\u7528\u3057\u3066\u30b2\u30fc\u30e0\u7684\u306a\u7269\u3092\u4f5c\u3063\u3066\u307f\u308b\u306e\u3082\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u306d\u3002\n\u3061\u306a\u307f\u306b\u30b5\u30a6\u30f3\u30c9\u95a2\u4fc2\u306faud\u304b\u3089\u4f7f\u3048\u307e\u3059\u3002\nBlender\u306f\u57fa\u672c\u7684\u306b\u306f\u5165\u529b\u306b\u5fdc\u3058\u3066\u753b\u9762\u304c\u66f4\u65b0\u3055\u308c\u308b\u3093\u3067\u3059\u304c\u3001\u4f55\u3082\u5165\u529b\u3057\u306a\u304f\u3068\u3082\u81ea\u52d5\u3067\u753b\u9762\u3092\u66f4\u65b0\u3057\u3066\u3082\u3089\u3044\u305f\u3044\u6642\u3082\u3042\u308a\u307e\u3059\u3088\u306d\u3002\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u3093\u306a\u6642\u306b\u306f\u30a4\u30d9\u30f3\u30c8\u30bf\u30a4\u30de\u30fc\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\n\n\u305f\u3060\u753b\u9762\u3092\u66f4\u65b0\u3059\u308b\u3060\u3051\u3067\u306f\u5206\u304b\u308a\u8f9b\u3044\u306e\u3067\u3001\u753b\u50cf\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u79fb\u52d5\u3055\u305b\u3066\u307f\u307e\u3057\u305f\u3002\n\n# \u30b5\u30f3\u30d7\u30eb\n```py:gl_benchmark.py\n# ##### BEGIN GPL LICENSE BLOCK #####\n#\n#  This program is free software; you can redistribute it and/or\n#  modify it under the terms of the GNU General Public License\n#  as published by the Free Software Foundation; either version 2\n#  of the License, or (at your option) any later version.\n#\n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#  You should have received a copy of the GNU General Public License\n#  along with this program; if not, write to the Free Software Foundation,\n#  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n#\n# ##### END GPL LICENSE BLOCK #####\n\n# Blender2.77a\n\nimport time\nimport random\n\nimport bpy\nimport bgl\nimport blf\n\n\nimage_file_path = \"C:/Works/blender_rogo.png\"\n\nclass GL_Texture():\n    def __init__(self, file_path):\n        self.image = None\n        self.width = 0\n        self.height = 0\n        \n        self.load_image(file_path)\n    \n    def load_image(self, file_path):\n        try:\n            self.image = bpy.data.images.load(file_path)\n        except Exception as e:\n            print(e)\n        \n        if self.image:\n            self.width, self.height = self.image.size\n            self.image.gl_load(0, bgl.GL_NEAREST, bgl.GL_NEAREST)\n    \n    def remove(self):\n        if self.image:\n            try:\n                self.image.user_clear()\n                self.image.gl_free()\n                self.image.buffers_free()\n                bpy.data.images.remove(self.image)\n            except Exception as e:\n                print(e)\n    \n    def bind(self):\n        if self.image.bindcode[0]:\n            bgl.glBindTexture(bgl.GL_TEXTURE_2D, self.image.bindcode[0])\n        else:\n            self.image.gl_load(0, bgl.GL_NEAREST, bgl.GL_NEAREST)\n            print(\"reload gl texture\")\n\n\nclass Sprite():\n    def __init__(self, x, y, move_x, move_y):\n        self.x = x\n        self.y = y\n        self.move_x = move_x\n        self.move_y = move_y\n\n\nclass GL_BenchMark():\n    def __init__(self):\n        self.texture = GL_Texture(image_file_path)\n        \n        self.fps = 0\n        self.fps_count = 0\n        self.fps_time = time.time()\n        self.fps_one_second = self.fps_time\n        \n        self.view3d_width = 100.0\n        self.view3d_height = 100.0\n        \n        self.sprite_list = []\n        self.sprite_add(100)\n    \n    def draw(self, context):\n        for region in context.area.regions:\n            if region.type == \"WINDOW\":\n                self.view3d_width = region.width\n                self.view3d_height = region.height\n            \n        # calc\n        self.fps_time = time.time()\n        self.fps_count += 1\n        if (self.fps_time-self.fps_one_second) >= 1.0:\n            self.fps = self.fps_count\n            self.fps_count = 0\n            self.fps_one_second = self.fps_time\n        \n        for sp in self.sprite_list:\n            sp.x += sp.move_x\n            if sp.x < 0.0 or self.view3d_width < sp.x:\n                sp.move_x *= -1\n                sp.x += sp.move_x\n        \n            sp.y += sp.move_y\n            if sp.y < 0.0 or self.view3d_height < sp.y:\n                sp.move_y *= -1\n                sp.y += sp.move_y\n        \n        # draw\n        bgl.glColor4f(1.0, 1.0, 1.0, 1.0)\n        bgl.glEnable(bgl.GL_BLEND)\n        bgl.glEnable(bgl.GL_TEXTURE_2D)\n        \n        self.texture.bind()\n        for sp in self.sprite_list:\n            w = self.texture.width\n            h = self.texture.height\n            bgl.glBegin(bgl.GL_QUADS)\n            bgl.glTexCoord2f(0.0, 0.0)\n            bgl.glVertex2f(sp.x, sp.y)\n            bgl.glTexCoord2f(1.0, 0.0)\n            bgl.glVertex2f(sp.x+w, sp.y)\n            bgl.glTexCoord2f(1.0, 1.0)\n            bgl.glVertex2f(sp.x+w, sp.y+h)\n            bgl.glTexCoord2f(0.0, 1.0)\n            bgl.glVertex2f(sp.x, sp.y+h)\n            bgl.glEnd()\n        \n        bgl.glDisable(bgl.GL_TEXTURE_2D)\n        bgl.glDisable(bgl.GL_BLEND)\n        \n        # text draw\n        font_id = 0\n        blf.enable(font_id, blf.SHADOW)\n        blf.shadow(font_id, 5, 0.0, 0.0, 0.0, 1.0)\n        \n        blf.position(font_id, 5, 5, 0)\n        blf.size(font_id, 25, 72)\n        blf.draw(font_id, \"FPS:{}\".format(self.fps))\n        \n        blf.position(font_id, 5, 30, 0)\n        blf.size(font_id, 25, 72)\n        blf.draw(font_id, \"count:{}\".format(len(self.sprite_list)))\n        \n        blf.disable(font_id, blf.SHADOW)\n    \n    def remove(self):\n        self.texture.remove()\n    \n    def sprite_add(self, count):\n        for i in range(count):\n            x = random.uniform(1.0, self.view3d_width-1.0)\n            y = random.uniform(1.0, self.view3d_height-1.0)\n            vx = random.uniform(-2.0, 2.0)\n            vy = random.uniform(-2.0, 2.0)\n            \n            self.sprite_list.append(Sprite(x, y, vx, vy))\n    \n    def sprite_remove(self, count):\n        if len(self.sprite_list) > count:\n            for i in range(count):\n                self.sprite_list.pop()\n    \n    def event(self, context, event):\n        if event.type == 'UP_ARROW' and event.value == 'PRESS':\n            self.sprite_add(100)\n            return {'RUNNING_MODAL'}\n            \n        if event.type == 'DOWN_ARROW' and event.value == 'PRESS':\n            self.sprite_remove(100)\n            return {'RUNNING_MODAL'}\n        \n        return {'PASS_THROUGH'}\n\n\nclass GL_BenchMark_Operator(bpy.types.Operator):\n    bl_idname = \"view3d.gl_bechmark_operator\"\n    bl_label = \"View3D OpenGL Bechmark\"\n    \n    _handle_draw = None\n    is_enabled = False\n    _timer = None\n    _gl_benchmark = None\n    \n    @staticmethod\n    def draw_callback_px(self, context):\n        GL_BenchMark_Operator._gl_benchmark.draw(context)\n    \n    @staticmethod\n    def handle_add(self, context):\n        GL_BenchMark_Operator._handle_draw = bpy.types.SpaceView3D.draw_handler_add(\n                self.draw_callback_px, (self, context), 'WINDOW', 'POST_PIXEL')\n        GL_BenchMark_Operator._timer = context.window_manager.event_timer_add(\n                1.0/60.0, context.window)\n    \n    @staticmethod\n    def handle_remove(context):\n        if GL_BenchMark_Operator._handle_draw is not None:\n            context.window_manager.event_timer_remove(GL_BenchMark_Operator._timer)\n            bpy.types.SpaceView3D.draw_handler_remove(GL_BenchMark_Operator._handle_draw, 'WINDOW')\n            GL_BenchMark_Operator._timer = None\n            GL_BenchMark_Operator._handle_draw = None\n            GL_BenchMark_Operator.is_enabled = False\n    \n    @classmethod\n    def poll(cls, context):\n        return context.area.type == 'VIEW_3D'\n    \n    def modal(self, context, event):\n        if context.area:\n            context.area.tag_redraw()\n        \n        if GL_BenchMark_Operator.is_enabled == False:\n            return {'CANCELLED'}\n        \n        if event.type == 'TIMER':\n            return {'PASS_THROUGH'}\n        \n        return GL_BenchMark_Operator._gl_benchmark.event(context, event)\n    \n    def invoke(self, context, event):\n        if context.area.type == 'VIEW_3D':\n            if GL_BenchMark_Operator.is_enabled:\n                self.cancel(context)\n                return {'FINISHED'}\n            else:\n                GL_BenchMark_Operator._gl_benchmark = GL_BenchMark()\n                GL_BenchMark_Operator.handle_add(self, context)\n                GL_BenchMark_Operator.is_enabled = True\n                \n                context.area.tag_redraw()\n                context.window_manager.modal_handler_add(self)\n                return {'RUNNING_MODAL'}\n        else:\n            self.report({'WARNING'}, \"View3D not found, cannot run operator\")\n            return {'CANCELLED'}\n    \n    def cancel(self, context):\n        GL_BenchMark_Operator.handle_remove(context)\n        \n        if GL_BenchMark_Operator._gl_benchmark is not None:\n            GL_BenchMark_Operator._gl_benchmark.remove()\n            GL_BenchMark_Operator._gl_benchmark = None\n\n\nclass GL_Benchmark_panel(bpy.types.Panel):\n    bl_label = \"GL Benchmark\"\n    bl_space_type = \"VIEW_3D\"\n    bl_region_type = \"UI\"\n    \n    def draw(self, context):\n        layout = self.layout\n        if GL_BenchMark_Operator.is_enabled:\n            layout.operator(\"view3d.gl_bechmark_operator\", \"Stop\", icon=\"PAUSE\")\n        else:\n            layout.operator(\"view3d.gl_bechmark_operator\", \"Start\", icon=\"PLAY\")\n\n\ndef register():\n    bpy.utils.register_class(GL_BenchMark_Operator)\n    bpy.utils.register_class(GL_Benchmark_panel)\n\ndef unregister():\n    bpy.utils.unregister_class(GL_Benchmark_panel)\n    bpy.utils.unregister_class(GL_BenchMark_Operator)\n\nif __name__ == \"__main__\":\n    register()\n```\nBlender\u306e\u30c6\u30ad\u30b9\u30c8\u30a8\u30c7\u30a3\u30bf\u306b\u30b3\u30d4\u30da\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u4eca\u56de\u3082\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306f\u3053\u308c\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u624b\u5143\u306b\u9069\u5f53\u306a\u753b\u50cf\u304c\u306a\u3051\u308c\u3070\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n![blender_rogo.png](https://qiita-image-store.s3.amazonaws.com/0/122429/121eede3-c77a-0363-c563-70cf72ba88dc.png)\n\n\u4e00\u756a\u4e0a\u306e`image_file_path`\u306f\u5b9f\u969b\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u66f8\u3044\u3066\u304f\u3060\u3055\u3044\u3002\n\n# \u5b9f\u884c\u7d50\u679c\n\u307e\u305a3DView\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u30d1\u30cd\u30eb\u306b\u30dc\u30bf\u30f3\u304c\u51fa\u308b\u306e\u3067\u62bc\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n![2016-05-04_19h51_33.png](https://qiita-image-store.s3.amazonaws.com/0/122429/1483b9d5-4191-bdfd-1eda-3fd7802f91f1.png)\n\n\u3059\u308b\u3068\u3053\u3046\u306a\u308a\u307e\u3059\u3002\n![2016-05-04_19h55_01.png](https://qiita-image-store.s3.amazonaws.com/0/122429/3c6c2c13-7ef3-5c26-8b8e-a535b1d342a3.png)\ncount\u304c\u8868\u793a\u3057\u3066\u3044\u308b\u753b\u50cf\u306e\u6570\u3002\n\u305d\u308c\u3068FPS\u8868\u793a\u3082\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u4e0a\u30ad\u30fc\u3001\u4e0b\u30ad\u30fc\u3067\u8868\u793a\u3059\u308b\u753b\u50cf\u306e\u6570\u3092\u5897\u6e1b\u3055\u305b\u3089\u308c\u307e\u3059\u3002\n\u7c21\u6613\u7684\u306a\u30d9\u30f3\u30c1\u30fc\u30de\u30fc\u30af\u3068\u3057\u3066\u4f7f\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n# \u8aac\u660e\n        GL_BenchMark_Operator._timer = context.window_manager.event_timer_add(\n                1.0/60.0, context.window)\n\u30a4\u30d9\u30f3\u30c8\u30bf\u30a4\u30de\u30fc\u3092\u8a2d\u5b9a\u3057\u3066\u307e\u3059\u3002\n\u79d2\u3067\u6307\u5b9a\u3059\u308b\u3088\u3046\u306a\u306e\u306760\u5272\u308b1\u79d2\u3092\u8a2d\u5b9a\u3002\n\u3053\u306e\u9593\u9694\u3067\u30a4\u30d9\u30f3\u30c8\u3092\u9001\u3063\u3066\u304f\u308c\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u3042\u3068\u306f\u307b\u3068\u3093\u3069\u524d\u56de\u306e\u4f7f\u3044\u56de\u3057\u3067\u3059\u306d\u3002\n\n# \u6700\u5f8c\u306b\n\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u7684\u306a\u611f\u3058\u3067\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u304c\u3069\u3046\u3067\u3057\u3087\u3046\u304b\u3002\n\u81ea\u5206\u306e\u74b0\u5883\u3067\u306f\u5b89\u5b9a\u3057\u306660FPS\u304c\u51fa\u305b\u308b\u306e\u306f2600\u500b\u3050\u3089\u3044\u307e\u3067\u3067\u3057\u305f\u306d\u3002\n\n\u3053\u308c\u3092\u5229\u7528\u3057\u3066\u30b2\u30fc\u30e0\u7684\u306a\u7269\u3092\u4f5c\u3063\u3066\u307f\u308b\u306e\u3082\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u306d\u3002\n\u3061\u306a\u307f\u306b\u30b5\u30a6\u30f3\u30c9\u95a2\u4fc2\u306f`aud`\u304b\u3089\u4f7f\u3048\u307e\u3059\u3002\n", "tags": ["Blender", "Python"]}