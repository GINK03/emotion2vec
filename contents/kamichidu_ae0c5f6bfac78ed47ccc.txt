{"context": " More than 1 year has passed since last update.\u66f4\u306b\u7c21\u5358\u306aFizzBuzz\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u3067\u3059\u3002\npackage classloader;\n\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\n\nimport static java.util.Collections.addAll;\n\npublic class FizzBuzz\n{\n    public static void main(String[] args)\n        throws Exception\n    {\n        final ClassLoader loader= new ClassLoader(){\n            private final Map<String, Class<?>> defined= new HashMap<>();\n\n            @Override\n            protected Class<?> findClass(String name)\n                throws ClassNotFoundException\n            {\n                final int i= Integer.parseInt(name);\n                final String cname;\n                if(i % 15 == 0)\n                {\n                    cname= \"FizzBuzz\";\n                }\n                else if(i % 3 == 0)\n                {\n                    cname= \"Fizz\";\n                }\n                else if(i % 5 == 0)\n                {\n                    cname= \"Buzz\";\n                }\n                else\n                {\n                    cname= \"\" + i;\n                }\n\n                if(this.defined.containsKey(cname))\n                {\n                    return this.defined.get(cname);\n                }\n\n                final byte[] bytes= this.makeClass(cname);\n                final Class<?> clazz= this.defineClass(cname, bytes, 0, bytes.length);\n\n                this.defined.put(cname, clazz);\n\n                return clazz;\n            }\n\n            private byte[] makeClass(CharSequence name)\n            {\n                final List<Integer> bytes= new LinkedList<>();\n\n                // magic\n                addAll(bytes, 0xca, 0xfe, 0xba, 0xbe);\n                // minor version\n                addAll(bytes, 0x00, 0x00);\n                // major version\n                addAll(bytes, 0x00, 0x34);\n                // constant pool count\n                addAll(bytes, 0x00, 0x05);\n                // constant pool\n                // CONSTANT_Class_info\n                addAll(bytes, 0x07);\n                addAll(bytes, 0x00, 0x02);\n                // CONSTANT_Utf8_info\n                addAll(bytes, 0x01);\n                addAll(bytes, 0x00, name.length());\n                name.chars().forEach(bytes::add);\n                // CONSTANT_Class_info\n                addAll(bytes, 0x07);\n                addAll(bytes, 0x00, 0x04);\n                // CONSTANT_Utf8_info\n                addAll(bytes, 0x01);\n                {\n                    final String superclazz= \"java/lang/Object\";\n                    addAll(bytes, 0x00, superclazz.length());\n                    superclazz.chars().forEach(bytes::add);\n                }\n                // access flags\n                addAll(bytes, 0x00, 0x21);\n                // this class\n                addAll(bytes, 0x00, 0x01);\n                // super class\n                addAll(bytes, 0x00, 0x03);\n                // interfaces count\n                addAll(bytes, 0x00, 0x00);\n                // fields count\n                addAll(bytes, 0x00, 0x00);\n                // methods count\n                addAll(bytes, 0x00, 0x00);\n                // attributes count\n                addAll(bytes, 0x00, 0x00);\n\n                final byte[] transformed= new byte[bytes.size()];\n                for(int i= 0; i < bytes.size(); ++i)\n                {\n                    transformed[i]= bytes.get(i).byteValue();\n                }\n                return transformed;\n            }\n        };\n\n        for(int i= 1; i <= 100; ++i)\n        {\n            System.out.println(loader.loadClass(\"\" + i).getSimpleName());\n        }\n    }\n}\n\nClassLoader#loadClass()\u3067\u6307\u5b9a\u306e\u540d\u524d\u306e\u30af\u30e9\u30b9\u3092\u30ed\u30fc\u30c9\u3057\u3001\u8aad\u307f\u8fbc\u3093\u3060\u30af\u30e9\u30b9\u306e\u5358\u7d14\u540d\u3092\u8868\u793a\u3059\u308b\u3053\u3068\u3067FizzBuzz\u3063\u3066\u3044\u307e\u3059\u3002\n\u3055\u3066\u3001\u672c\u6765\u3067\u3042\u308c\u30701\u30842\u306e\u3088\u3046\u306a\u6570\u5b57\u304b\u3089\u306e\u307f\u306a\u308b\u30af\u30e9\u30b9\u540d\u306fjava\u8a00\u8a9e\u4ed5\u69d8\u3067\u4e0d\u6b63\u3068\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u308c\u3092\u5b9f\u73fe\u3057\u3066\u3044\u308b\u306e\u304cClassLoader\u306e\u5b9f\u88c5\u3067\u3059{*1}\u3002\nloadClass()\u3067\u6307\u5b9a\u3057\u305f\u540d\u524d\u306e\u30af\u30e9\u30b9\u304c\u307e\u3060\u30ed\u30fc\u30c9\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001findClass()\u304c\u547c\u3070\u308c\u307e\u3059\u3002\nfindClass()\u3067\u8a72\u5f53\u3059\u308b\u30af\u30e9\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u5374\u3059\u308b\u304b\u3001ClassNotFoundException\u3092\u30b9\u30ed\u30fc\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u4eca\u56de\u306f\u3053\u3053\u3067\u52d5\u7684\u306b\u30af\u30e9\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067\u3001java\u4e0a\u4e0d\u6b63\u306a\u30af\u30e9\u30b9{*2}\u3092\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u307e\u305f\u672c\u6765\u3067\u3042\u308c\u3070\u3001findClass()\u304c\u547c\u3070\u308c\u308b\u306e\u306f\u672a\u30ed\u30fc\u30c9\u306e\u30af\u30e9\u30b9\u306b\u5bfe\u3057\u3066\u3060\u3051\u306a\u306e\u3067\u3059\u304c\u3001\u4f8b\u3048\u30703\u30846\u3068\u3044\u3046\u30af\u30e9\u30b9\u540d\u304b\u3089Fizz\u3068\u3044\u3046\u30af\u30e9\u30b9\u3092\u8aad\u307f\u8fbc\u307e\u305b\u3066\u3044\u308b\u305f\u3081\u3001Fizz\u3068\u3044\u3046\u30af\u30e9\u30b9\u540d\u306b\u3064\u3044\u3066\u306f\u8907\u6570\u56dedefineClass()\u304c\u5b9f\u884c\u3055\u308c\u3066\u3057\u307e\u3044\u3001\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u3068\u306a\u308a\u307e\u3059\u3002\n\u3053\u308c\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306bMap\u306b\u5b9a\u7fa9\u6e08\u306e\u30af\u30e9\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6301\u3064\u3053\u3068\u3067\u3001\u8907\u6570\u56dedefineClass()\u3092\u5b9f\u884c\u3057\u306a\u3044\u3088\u3046\u306b\u5236\u5fa1\u3057\u3066\u3044\u307e\u3059\u3002\nJava\u3067\u3082\u7c21\u5358\u306aFizzBuzz\u304c\u66f8\u3051\u305f\u3088\uff01\n\u3068\u3044\u3046\u3053\u3068\u3067github\u306b\u3082\u4e0a\u3052\u3066\u3042\u308a\u307e\u3059\u3002\n\u3053\u3061\u3089\u304b\u3089\u3069\u3046\u305e\u3002\n{*1} ClassLoader\u306ejavadoc\u306b\u3082\u3001loadClass()\u306a\u3069\u306b\u6e21\u3059\u540d\u524d\u306fjava\u8a00\u8a9e\u4ed5\u69d8\u3067valid\u3068\u3055\u308c\u308b\u540d\u524d\u3057\u304b\u6e21\u3057\u3061\u3083\u3044\u3084\u3093\u3001\u3068\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\u4eca\u56de\u306e\u5b9f\u88c5\u306f\u5b8c\u5168\u306b\u9ed2\u306b\u8fd1\u3044\u30b0\u30ec\u30fc\u306e\u305f\u3081\u3001\u826f\u3044\u5b50\u306f\u771f\u4f3c\u3057\u3061\u3083\u3044\u3084\u30fc\u3088\n{*2} \u4eca\u56de\u306f\u9762\u5012\u3060\u3063\u305f\u305f\u3081\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\n\u30af\u30e9\u30b9\u540d\u304c\u6570\u5b57\u306e\u307f\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6301\u305f\u306a\u3044(\u3064\u307e\u308a\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u4e0d\u53ef\u80fd)\n\n\u66f4\u306b\u7c21\u5358\u306aFizzBuzz\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u3067\u3059\u3002\n\n```java\npackage classloader;\n\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\n\nimport static java.util.Collections.addAll;\n\npublic class FizzBuzz\n{\n    public static void main(String[] args)\n        throws Exception\n    {\n        final ClassLoader loader= new ClassLoader(){\n            private final Map<String, Class<?>> defined= new HashMap<>();\n\n            @Override\n            protected Class<?> findClass(String name)\n                throws ClassNotFoundException\n            {\n                final int i= Integer.parseInt(name);\n                final String cname;\n                if(i % 15 == 0)\n                {\n                    cname= \"FizzBuzz\";\n                }\n                else if(i % 3 == 0)\n                {\n                    cname= \"Fizz\";\n                }\n                else if(i % 5 == 0)\n                {\n                    cname= \"Buzz\";\n                }\n                else\n                {\n                    cname= \"\" + i;\n                }\n\n                if(this.defined.containsKey(cname))\n                {\n                    return this.defined.get(cname);\n                }\n\n                final byte[] bytes= this.makeClass(cname);\n                final Class<?> clazz= this.defineClass(cname, bytes, 0, bytes.length);\n\n                this.defined.put(cname, clazz);\n\n                return clazz;\n            }\n\n            private byte[] makeClass(CharSequence name)\n            {\n                final List<Integer> bytes= new LinkedList<>();\n\n                // magic\n                addAll(bytes, 0xca, 0xfe, 0xba, 0xbe);\n                // minor version\n                addAll(bytes, 0x00, 0x00);\n                // major version\n                addAll(bytes, 0x00, 0x34);\n                // constant pool count\n                addAll(bytes, 0x00, 0x05);\n                // constant pool\n                // CONSTANT_Class_info\n                addAll(bytes, 0x07);\n                addAll(bytes, 0x00, 0x02);\n                // CONSTANT_Utf8_info\n                addAll(bytes, 0x01);\n                addAll(bytes, 0x00, name.length());\n                name.chars().forEach(bytes::add);\n                // CONSTANT_Class_info\n                addAll(bytes, 0x07);\n                addAll(bytes, 0x00, 0x04);\n                // CONSTANT_Utf8_info\n                addAll(bytes, 0x01);\n                {\n                    final String superclazz= \"java/lang/Object\";\n                    addAll(bytes, 0x00, superclazz.length());\n                    superclazz.chars().forEach(bytes::add);\n                }\n                // access flags\n                addAll(bytes, 0x00, 0x21);\n                // this class\n                addAll(bytes, 0x00, 0x01);\n                // super class\n                addAll(bytes, 0x00, 0x03);\n                // interfaces count\n                addAll(bytes, 0x00, 0x00);\n                // fields count\n                addAll(bytes, 0x00, 0x00);\n                // methods count\n                addAll(bytes, 0x00, 0x00);\n                // attributes count\n                addAll(bytes, 0x00, 0x00);\n\n                final byte[] transformed= new byte[bytes.size()];\n                for(int i= 0; i < bytes.size(); ++i)\n                {\n                    transformed[i]= bytes.get(i).byteValue();\n                }\n                return transformed;\n            }\n        };\n\n        for(int i= 1; i <= 100; ++i)\n        {\n            System.out.println(loader.loadClass(\"\" + i).getSimpleName());\n        }\n    }\n}\n```\n\nClassLoader\\#loadClass()\u3067\u6307\u5b9a\u306e\u540d\u524d\u306e\u30af\u30e9\u30b9\u3092\u30ed\u30fc\u30c9\u3057\u3001\u8aad\u307f\u8fbc\u3093\u3060\u30af\u30e9\u30b9\u306e\u5358\u7d14\u540d\u3092\u8868\u793a\u3059\u308b\u3053\u3068\u3067FizzBuzz\u3063\u3066\u3044\u307e\u3059\u3002\n\u3055\u3066\u3001\u672c\u6765\u3067\u3042\u308c\u30701\u30842\u306e\u3088\u3046\u306a\u6570\u5b57\u304b\u3089\u306e\u307f\u306a\u308b\u30af\u30e9\u30b9\u540d\u306fjava\u8a00\u8a9e\u4ed5\u69d8\u3067\u4e0d\u6b63\u3068\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u308c\u3092\u5b9f\u73fe\u3057\u3066\u3044\u308b\u306e\u304cClassLoader\u306e\u5b9f\u88c5\u3067\u3059{\\*1}\u3002\nloadClass()\u3067\u6307\u5b9a\u3057\u305f\u540d\u524d\u306e\u30af\u30e9\u30b9\u304c\u307e\u3060\u30ed\u30fc\u30c9\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001findClass()\u304c\u547c\u3070\u308c\u307e\u3059\u3002\nfindClass()\u3067\u8a72\u5f53\u3059\u308b\u30af\u30e9\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u5374\u3059\u308b\u304b\u3001ClassNotFoundException\u3092\u30b9\u30ed\u30fc\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u4eca\u56de\u306f\u3053\u3053\u3067\u52d5\u7684\u306b\u30af\u30e9\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067\u3001java\u4e0a\u4e0d\u6b63\u306a\u30af\u30e9\u30b9{\\*2}\u3092\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u307e\u305f\u672c\u6765\u3067\u3042\u308c\u3070\u3001findClass()\u304c\u547c\u3070\u308c\u308b\u306e\u306f\u672a\u30ed\u30fc\u30c9\u306e\u30af\u30e9\u30b9\u306b\u5bfe\u3057\u3066\u3060\u3051\u306a\u306e\u3067\u3059\u304c\u3001\u4f8b\u3048\u30703\u30846\u3068\u3044\u3046\u30af\u30e9\u30b9\u540d\u304b\u3089Fizz\u3068\u3044\u3046\u30af\u30e9\u30b9\u3092\u8aad\u307f\u8fbc\u307e\u305b\u3066\u3044\u308b\u305f\u3081\u3001Fizz\u3068\u3044\u3046\u30af\u30e9\u30b9\u540d\u306b\u3064\u3044\u3066\u306f\u8907\u6570\u56dedefineClass()\u304c\u5b9f\u884c\u3055\u308c\u3066\u3057\u307e\u3044\u3001\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u3068\u306a\u308a\u307e\u3059\u3002\n\u3053\u308c\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306bMap\u306b\u5b9a\u7fa9\u6e08\u306e\u30af\u30e9\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6301\u3064\u3053\u3068\u3067\u3001\u8907\u6570\u56dedefineClass()\u3092\u5b9f\u884c\u3057\u306a\u3044\u3088\u3046\u306b\u5236\u5fa1\u3057\u3066\u3044\u307e\u3059\u3002\n\nJava\u3067\u3082\u7c21\u5358\u306aFizzBuzz\u304c\u66f8\u3051\u305f\u3088\uff01\n\n\u3068\u3044\u3046\u3053\u3068\u3067github\u306b\u3082\u4e0a\u3052\u3066\u3042\u308a\u307e\u3059\u3002\n[\u3053\u3061\u3089](https://github.com/kamichidu/java-fizzbuzz/blob/master/src/main/java/classloader/FizzBuzz.java)\u304b\u3089\u3069\u3046\u305e\u3002\n\n{\\*1} ClassLoader\u306ejavadoc\u306b\u3082\u3001loadClass()\u306a\u3069\u306b\u6e21\u3059\u540d\u524d\u306fjava\u8a00\u8a9e\u4ed5\u69d8\u3067valid\u3068\u3055\u308c\u308b\u540d\u524d\u3057\u304b\u6e21\u3057\u3061\u3083\u3044\u3084\u3093\u3001\u3068\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\u4eca\u56de\u306e\u5b9f\u88c5\u306f\u5b8c\u5168\u306b\u9ed2\u306b\u8fd1\u3044\u30b0\u30ec\u30fc\u306e\u305f\u3081\u3001\u826f\u3044\u5b50\u306f\u771f\u4f3c\u3057\u3061\u3083\u3044\u3084\u30fc\u3088\n{\\*2} \u4eca\u56de\u306f\u9762\u5012\u3060\u3063\u305f\u305f\u3081\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\n1. \u30af\u30e9\u30b9\u540d\u304c\u6570\u5b57\u306e\u307f\n1. \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6301\u305f\u306a\u3044(\u3064\u307e\u308a\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u4e0d\u53ef\u80fd)\n", "tags": ["Java", "FizzBuzz"]}