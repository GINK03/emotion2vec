{"context": "\n\n\u306f\u3058\u3081\u306b\nMySQL\u304b\u3089\u306e\u79fb\u884c\u8005\u3082\u5f90\u3005\u306b\u5897\u3048\u59cb\u3081mariaDB\u3002\nMariaDB10.1\u3092\u30bd\u30fc\u30b9\u304b\u3089\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u65b9\u6cd5\u3092\u30e1\u30e2\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n2017\u5e742\u6708\u73fe\u5728\u3001\u300c10.1.21\u300d\u304c\u6700\u65b0\u7248\u3067\u3059\u3002\n\n\u5b9f\u8df5\u74b0\u5883\u30d0\u30fc\u30b8\u30e7\u30f3\u60c5\u5831\n\n\n\n\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\n\u30d0\u30fc\u30b8\u30e7\u30f3\n\n\n\n\nCMake\n3.7.2\n\n\nMariDB\n10.1.21\n\n\nOS\nCentOS 7.2\n\n\n\n\n\u6ce8\u610f\u4e8b\u9805\nOpenSSL1.1\u306b\u306f\u3001\u672a\u5bfe\u5fdc\u306a\u306e\u3067OpenSSL1.0.x\u3092\u3042\u3089\u304b\u3058\u3081\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\nhttps://jira.mariadb.org/browse/MDEV-10332\n\n\u6e96\u5099\n\u7a3c\u50cd\u7528\u306e\u30e6\u30fc\u30b6\u30fc\u3092\u4f5c\u6210\u3059\u308b\nuseradd mysql\n\n\nCmake\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\ncd /usr/local/src\nwget https://cmake.org/files/v3.7/cmake-3.7.2.tar.gz\ntar xvzf cmake-3.7.2.tar.gz\ncd cmake-3.7.2\n./configure\ngmake\nmake install\n\n\u3082\u3057\u30a8\u30e9\u30fc\u306b\u306a\u3063\u305f\u5834\u5408\nrm CMakeCache.txt\n\n\u3092\u5b9f\u884c\u3057\u3066\u518d\u5ea6\u884c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\n\nncruse\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\nbash\ncd /usr/local/src\nwget http://ftp.gnu.org/gnu/ncurses/ncurses-6.0.tar.gz\ntar xvzf ncurses-6.0.tar.gz\ncd ncurses-6.0\n./configure --with-shared\nmake\nmake install\n\n\n\nMariaDB\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\ncd /usr/local/src\nwget --trust-server-names https://downloads.mariadb.org/f/mariadb-10.1.21/source/mariadb-10.1.21.tar.gz/from/http%3A//ftp.yz.yamagata-u.ac.jp/pub/dbms/mariadb/?serve\ntar xvzf mariadb-10.1.21.tar.gz\ncd mariadb-10.1.21\nBUILD/autorun.sh\n\nexport OPENSSL_ROOT_DIR=/usr/local/ssl\nexport OPENSSL_INCLUDE_DIR=/usr/local/ssl/include\nexport OPENSSL_LIBRARIES=/usr/local/ssl/lib/\nexport OPENSSL_ROOT_DIR=/usr/local/ssl\n\n/usr/local/bin/cmake \\\n-DPLUGIN_TOKUDB=NO \\\n-OPENSSL_ROOT_DIR=/usr/local/ssl \\\n-OPENSSL_INCLUDE_DIR=/usr/local/ssl/include \\\n-OPENSSL_LIBRARIES=/usr/local/ssl/lib \\\n-DDEFAULT_CHARSET=utf8 \\\n-DDEFAULT_COLLATION=utf8_general_ci\n\nmake install\n\n#\u30aa\u30fc\u30ca\u30fc\u3092\u8a2d\u5b9a\nchown mysql:mysql -R /usr/local/mysql/\n\n#\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30d4\u30fc\u3059\u308b\ncp support-files/my-large.cnf /etc/my.cnf\nscripts/mysql_install_db --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data\n\n\n\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u610f\u3059\u308b\nCentOS\u306erpm\u304b\u3089\u3001\u8d77\u52d5\u30b9\u30af\u30ea\u30d7\u30c8\u4e00\u5f0f\u3092\u6301\u3063\u3066\u304d\u307e\u3059\u3002\n\u305d\u306e\u307e\u307e\u3067\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u304c\u7570\u306a\u308b\u305f\u3081\u3001\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u5909\u66f4\u3057\u305f\u3082\u306e\u3092\u8a18\u8f09\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u3053\u308c\u3092\u305d\u306e\u307e\u307e\u30b3\u30d4\u30fc\u3059\u308c\u3070OK\u3067\u3059\u3002\n\nmariadb.service\nvi /usr/lib/systemd/system/mariadb.service\n\n\nmariadb.service\n# It's not recommended to modify this file in-place, because it will be\n# overwritten during package upgrades.  If you want to customize, the\n# best way is to create a file \"/etc/systemd/system/mariadb.service\",\n# containing\n#   .include /lib/systemd/system/mariadb.service\n#   ...make your changes here...\n# or create a file \"/etc/systemd/system/mariadb.service.d/foo.conf\",\n# which doesn't need to include \".include\" call and which will be parsed\n# after the file mariadb.service itself is parsed.\n#\n# For more info about custom unit files, see systemd.unit(5) or\n# http://fedoraproject.org/wiki/Systemd#How_do_I_customize_a_unit_file.2F_add_a_custom_unit_file.3F\n\n# For example, if you want to increase mariadb's open-files-limit to 10000,\n# you need to increase systemd's LimitNOFILE setting, so create a file named\n# \"/etc/systemd/system/mariadb.service.d/limits.conf\" containing:\n#   [Service]\n#   LimitNOFILE=10000\n\n# Note: /usr/lib/... is recommended in the .include line though /lib/... \n# still works.\n# Don't forget to reload systemd daemon after you change unit configuration:\n# root> systemctl --system daemon-reload\n\n[Unit]\nDescription=MariaDB database server\nAfter=syslog.target\nAfter=network.target\n\n[Service]\nType=simple\nUser=mysql\nGroup=mysql\n\nExecStartPre=/usr/libexec/mariadb-prepare-db-dir %n\n# Note: we set --basedir to prevent probes that might trigger SELinux alarms,\n# per bug #547485\nExecStart=/usr/local/mysql/bin/mysqld_safe --basedir=/usr\nExecStartPost=/usr/libexec/mariadb-wait-ready $MAINPID\n\n# Give a reasonable amount of time for the server to start up/shut down\nTimeoutSec=300\n\n# Place temp files in a secure directory, not /tmp\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\n\n\n\nmariadb-wait-ready\nvi /usr/libexec/mariadb-wait-ready\n\n#!/bin/sh\n\n# This script waits for mysqld to be ready to accept connections\n# (which can be many seconds or even minutes after launch, if there's\n# a lot of crash-recovery work to do).\n# Running this as ExecStartPost is useful so that services declared as\n# \"After mysqld\" won't be started until the database is really ready.\n\n# Service file passes us the daemon's PID (actually, mysqld_safe's PID)\ndaemon_pid=\"$1\"\n\n# extract value of a MySQL option from config files\n# Usage: get_mysql_option SECTION VARNAME DEFAULT\n# result is returned in $result\n# We use my_print_defaults which prints all options from multiple files,\n# with the more specific ones later; hence take the last match.\nget_mysql_option(){\n    result=`/usr/local/mysql/bin/my_print_defaults \"$1\" | sed -n \"s/^--$2=//p\" | tail -n 1`\n    if [ -z \"$result\" ]; then\n        # not found, use default\n        result=\"$3\"\n    fi\n}\n\n# Defaults here had better match what mysqld_safe will default to\nget_mysql_option mysqld datadir \"/usr/local/mysql/data\"\ndatadir=\"$result\"\nget_mysql_option mysqld socket \"/usr/local/mysql/data/mysql.sock\"\nsocketfile=\"$result\"\n\n# Wait for the server to come up or for the mysqld process to disappear\nret=0\nwhile /bin/true; do\n    if ! [ -d \"/proc/$daemon_pid\" ] ; then\n            ret=1\n            break\n    fi\n    RESPONSE=`/usr/local/mysql/bin/mysqladmin --no-defaults --socket=\"$socketfile\" --user=UNKNOWN_MYSQL_USER ping 2>&1`\n    mret=$?\n    if [ $mret -eq 0 ]; then\n        break\n    fi\n    # exit codes 1, 11 (EXIT_CANNOT_CONNECT_TO_SERVICE) are expected,\n    # anything else suggests a configuration error\n    if [ $mret -ne 1 -a $mret -ne 11 ]; then\n        ret=1\n        break\n    fi\n    # \"Access denied\" also means the server is alive\n    echo \"$RESPONSE\" | grep -q \"Access denied for user\" && break\n\n    sleep 1\ndone\n\nexit $ret\n\n\nmariadb-prepare-db-dir\nvi /usr/libexec/mariadb-prepare-db-dir\n\n\nmariadb-prepare-db-dir\n#!/bin/sh\n\n# This script creates the mysql data directory during first service start.\n# In subsequent starts, it does nothing much.\n\n# extract value of a MySQL option from config files\n# Usage: get_mysql_option SECTION VARNAME DEFAULT\n# result is returned in $result\n# We use my_print_defaults which prints all options from multiple files,\n# with the more specific ones later; hence take the last match.\nget_mysql_option(){\n        result=`/usr/local/mysql/bin/my_print_defaults \"$1\" | sed -n \"s/^--$2=//p\" | tail -n 1`\n        if [ -z \"$result\" ]; then\n            # not found, use default\n            result=\"$3\"\n        fi\n}\n\n# Defaults here had better match what mysqld_safe will default to\nget_mysql_option mysqld datadir \"/usr/local/mysql/data\"\ndatadir=\"$result\"\nget_mysql_option mysqld_safe log-error \"/usr/local/mysql/data/mariadb.log\"\nerrlogfile=\"$result\"\nget_mysql_option mysqld socket \"$datadir/mysql.sock\"\nsocketfile=\"$result\"\n\n# Absorb configuration settings from the specified systemd service file,\n# or the default \"mysqld\" service if not specified\nSERVICE_NAME=\"$1\"\nif [ x\"$SERVICE_NAME\" = x ]\nthen\n    SERVICE_NAME=mysqld.service\nfi\n\nmyuser=`systemctl show -p User \"${SERVICE_NAME}\" |\n  sed 's/^User=//'`\nif [ x\"$myuser\" = x ]\nthen\n    myuser=mysql\nfi\n\nmygroup=`systemctl show -p Group \"${SERVICE_NAME}\" |\n  sed 's/^Group=//'`\nif [ x\"$mygroup\" = x ]\nthen\n    mygroup=mysql\nfi\n\n# Set up the errlogfile with appropriate permissions\ntouch \"$errlogfile\"\nchown \"$myuser:$mygroup\" \"$errlogfile\"\nchmod 0640 \"$errlogfile\"\n[ -x /sbin/restorecon ] && /sbin/restorecon \"$errlogfile\"\n\n# We check if there is already a process using the socket file,\n# since otherwise this systemd service file could report false\n# positive result when starting and mysqld_safe could remove\n# a socket file, which actually uses a different daemon.\nif fuser \"$socketfile\" &>/dev/null ; then\n    echo \"Socket file $socketfile exists.\" >&2\n    echo \"Is another MySQL daemon already running with the same unix socket?\" >&2\n    exit 1\nfi\n\n# Make the data directory\nif [ ! -d \"$datadir/mysql\" ] ; then\n    # First, make sure $datadir is there with correct permissions\n    # (note: if it's not, and we're not root, this'll fail ...)\n    if [ ! -e \"$datadir\" -a ! -h \"$datadir\" ]\n    then\n        mkdir -p \"$datadir\" || exit 1\n    fi\n    chown \"$myuser:$mygroup\" \"$datadir\"\n    chmod 0755 \"$datadir\"\n    [ -x /sbin/restorecon ] && /sbin/restorecon \"$datadir\"\n\n    # Now create the database\n    echo \"Initializing MySQL database\"\n    /usr/local/mysql/scripts/mysql_install_db --datadir=\"$datadir\" --user=\"$myuser\"\n    ret=$?\n    if [ $ret -ne 0 ] ; then\n        echo \"Initialization of MySQL database failed.\" >&2\n        echo \"Perhaps /etc/my.cnf is misconfigured.\" >&2\n        # Clean up any partially-created database files\n        if [ ! -e \"$datadir/mysql/user.frm\" ] ; then\n            rm -rf \"$datadir\"/*\n        fi\n        exit $ret\n    fi\n    # In case we're running as root, make sure files are owned properly\n    chown -R \"$myuser:$mygroup\" \"$datadir\"\nfi\n\nexit 0\n\n\n\nmysql_install_db\nvi /usr/libexec/mysql_install_db\n\n\nmysql_install_db\n#!/bin/sh\n# Copyright (c) 2000, 2013, Oracle and/or its affiliates.\n# Copyright (c) 2009, 2013, Monty Program Ab\n# \n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; version 2 of the License.\n# \n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n# \n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n# This scripts creates the MariaDB Server system tables\n#\n# All unrecognized arguments to this script are passed to mysqld.\n\nbasedir=\"/usr/local/mysql\"\nbuilddir=\"\"\nldata=\"/usr/local/mysql/data\"\nlangdir=\"\"\nsrcdir=\"\"\n\nargs=\"\"\ndefaults=\"\"\nmysqld_opt=\"\"\nuser=\"\"\n\nforce=0\nin_rpm=0\nip_only=0\ncross_bootstrap=0\n\nusage()\n{\n  cat <<EOF\nUsage: $0 [OPTIONS]\n  --basedir=path       The path to the MariaDB installation directory.\n  --builddir=path      If using --srcdir with out-of-directory builds, you\n                       will need to set this to the location of the build\n                       directory where built files reside.\n  --cross-bootstrap    For internal use.  Used when building the MariaDB system\n                       tables on a different host than the target.\n  --datadir=path       The path to the MariaDB data directory.\n  --defaults-extra-file=name\n                       Read this file after the global files are read.\n  --defaults-file=name Only read default options from the given file name.\n  --force              Causes mysql_install_db to run even if DNS does not\n                       work.  In that case, grant table entries that\n                       normally use hostnames will use IP addresses.\n  --help               Display this help and exit.                     \n  --ldata=path         The path to the MariaDB data directory. Same as\n                       --datadir.\n  --no-defaults        Don't read default options from any option file.\n  --defaults-file=path Read only this configuration file.\n  --rpm                For internal use.  This option is used by RPM files\n                       during the MariaDB installation process.\n  --skip-name-resolve  Use IP addresses rather than hostnames when creating\n                       grant table entries.  This option can be useful if\n                       your DNS does not work.\n  --srcdir=path        The path to the MariaDB source directory.  This option\n                       uses the compiled binaries and support files within the\n                       source tree, useful for if you don't want to install\n                       MariaDB yet and just want to create the system tables.\n  --user=user_name     The login username to use for running mysqld.  Files\n                       and directories created by mysqld will be owned by this\n                       user.  You must be root to use this option.  By default\n                       mysqld runs using your current login name and files and\n                       directories that it creates will be owned by you.\n\nAll other options are passed to the mysqld program\n\nEOF\n  exit 1\n}\n\ns_echo()\n{\n  if test \"$in_rpm\" -eq 0 -a \"$cross_bootstrap\" -eq 0\n  then\n    echo \"$1\"\n  fi\n}\n\nlink_to_help()\n{\n  echo\n  echo \"The latest information about mysql_install_db is available at\"\n  echo \"https://mariadb.com/kb/en/installing-system-tables-mysql_install_db\"\n}\n\nparse_arg()\n{\n  echo \"$1\" | sed -e 's/^[^=]*=//'\n}\n\nparse_arguments()\n{\n  # We only need to pass arguments through to the server if we don't\n  # handle them here.  So, we collect unrecognized options (passed on\n  # the command line) into the args variable.\n  pick_args=\n  if test \"$1\" = PICK-ARGS-FROM-ARGV\n  then\n    pick_args=1\n    shift\n  fi\n\n  for arg\n  do\n    case \"$arg\" in\n      --force) force=1 ;;\n      --basedir=*) basedir=`parse_arg \"$arg\"` ;;\n      --builddir=*) builddir=`parse_arg \"$arg\"` ;;\n      --srcdir=*)  srcdir=`parse_arg \"$arg\"` ;;\n      --ldata=*|--datadir=*|--data=*) ldata=`parse_arg \"$arg\"` ;;\n      --user=*)\n        # Note that the user will be passed to mysqld so that it runs\n        # as 'user' (crucial e.g. if log-bin=/some_other_path/\n        # where a chown of datadir won't help)\n        user=`parse_arg \"$arg\"` ;;\n      --skip-name-resolve) ip_only=1 ;;\n      --verbose) verbose=1 ;; # Obsolete\n      --rpm) in_rpm=1 ;;\n      --help) usage ;;\n      --no-defaults|--defaults-file=*|--defaults-extra-file=*)\n        defaults=\"$arg\" ;;\n\n      --cross-bootstrap|--windows)\n        # Used when building the MariaDB system tables on a different host than\n        # the target. The platform-independent files that are created in\n        # --datadir on the host can be copied to the target system.\n        #\n        # The most common use for this feature is in the Windows installer\n        # which will take the files from datadir and include them as part of\n        # the install package.  See top-level 'dist-hook' make target.\n        #\n        # --windows is a deprecated alias\n        cross_bootstrap=1 ;;\n\n      *)\n        if test -n \"$pick_args\"\n        then\n          # This sed command makes sure that any special chars are quoted,\n          # so the arg gets passed exactly to the server.\n          # XXX: This is broken; true fix requires using eval and proper\n          # quoting of every single arg ($basedir, $ldata, etc.)\n          #args=\"$args \"`echo \"$arg\" | sed -e 's,\\([^a-zA-Z0-9_.-]\\),\\\\\\\\\\1,g'`\n          args=\"$args $arg\"\n        fi\n        ;;\n    esac\n  done\n}\n\n# Try to find a specific file within --basedir which can either be a binary\n# release or installed source directory and return the path.\nfind_in_basedir()\n{\n  case \"$1\" in\n    --dir)\n      return_dir=1; shift\n      ;;\n  esac\n\n  file=$1; shift\n\n  for dir in \"$@\"\n  do\n    if test -f \"$basedir/$dir/$file\"\n    then\n      if test -n \"$return_dir\"\n      then\n        echo \"$basedir/$dir\"\n      else\n        echo \"$basedir/$dir/$file\"\n      fi\n      break\n    fi\n  done\n}\n\ncannot_find_file()\n{\n  echo\n  echo \"FATAL ERROR: Could not find $1\"\n\n  shift\n  if test $# -ne 0\n  then\n    echo\n    echo \"The following directories were searched:\"\n    echo\n    for dir in \"$@\"\n    do\n      echo \"    $dir\"\n    done\n  fi\n\n  echo\n  echo \"If you compiled from source, you need to run 'make install' to\"\n  echo \"copy the software into the correct location ready for operation.\"\n  echo\n  echo \"If you are using a binary release, you must either be at the top\"\n  echo \"level of the extracted archive, or pass the --basedir option\"\n  echo \"pointing to that location.\"\n  link_to_help\n}\n\n# Ok, let's go.  We first need to parse arguments which are required by\n# my_print_defaults so that we can execute it first, then later re-parse\n# the command line to add any extra bits that we need.\nparse_arguments PICK-ARGS-FROM-ARGV \"$@\"\n\n#\n# We can now find my_print_defaults.  This script supports:\n#\n#   --srcdir=path pointing to compiled source tree\n#   --basedir=path pointing to installed binary location\n#\n# or default to compiled-in locations.\n#\nif test -n \"$srcdir\" && test -n \"$basedir\"\nthen\n  echo \"ERROR: Specify either --basedir or --srcdir, not both.\"\n  link_to_help\n  exit 1\nfi\nif test -n \"$srcdir\"\nthen\n  if test -z \"$builddir\"\n  then\n    builddir=\"$srcdir\"\n  fi\n  print_defaults=\"$builddir/extra/my_print_defaults\"\nelif test -n \"$basedir\"\nthen\n  print_defaults=`find_in_basedir my_print_defaults bin extra`\n  if test -z \"$print_defaults\"\n  then\n    cannot_find_file my_print_defaults $basedir/bin $basedir/extra\n    exit 1\n  fi\nelse\n  print_defaults=\"/usr/local/mysql/bin/my_print_defaults\"\nfi\n\nif test ! -x \"$print_defaults\"\nthen\n  cannot_find_file \"$print_defaults\"\n  exit 1\nfi\n\n# Now we can get arguments from the groups [mysqld] and [mysql_install_db]\n# in the my.cfg file, then re-run to merge with command line arguments.\nparse_arguments `\"$print_defaults\" $defaults --mysqld mysql_install_db`\nparse_arguments PICK-ARGS-FROM-ARGV \"$@\"\n\n# Configure paths to support files\nif test -n \"$srcdir\"\nthen\n  basedir=\"$builddir\"\n  bindir=\"$basedir/client\"\n  extra_bindir=\"$basedir/extra\"\n  mysqld=\"$basedir/sql/mysqld\"\n  langdir=\"$basedir/sql/share/english\"\n  pkgdatadir=\"$srcdir/scripts\"\n  scriptdir=\"$srcdir/scripts\"\nelif test -n \"$basedir\"\nthen\n  bindir=\"$basedir/bin\"\n  extra_bindir=\"$bindir\"\n  mysqld=`find_in_basedir mysqld libexec sbin bin`\n  if test -z \"$mysqld\"\n  then\n    cannot_find_file mysqld $basedir/libexec $basedir/sbin $basedir/bin\n    exit 1\n  fi\n  langdir=`find_in_basedir --dir errmsg.sys share/english share/mysql/english`\n  if test -z \"$langdir\"\n  then\n    cannot_find_file errmsg.sys $basedir/share/english $basedir/share/mysql/english\n    exit 1\n  fi\n  pkgdatadir=`find_in_basedir --dir fill_help_tables.sql share share/mysql`\n  if test -z \"$pkgdatadir\"\n  then\n    cannot_find_file fill_help_tables.sql $basedir/share $basedir/share/mysql\n    exit 1\n  fi\n  scriptdir=\"$basedir/scripts\"\nelse\n  basedir=\"/usr\"\n  bindir=\"/usr/bin\"\n  extra_bindir=\"$bindir\"\n  mysqld=\"/usr/libexec/mysqld\"\n  pkgdatadir=\"/usr/share/mysql\"\n  scriptdir=\"/usr/bin\"\nfi\n\n# Set up paths to SQL scripts required for bootstrap\nfill_help_tables=\"$pkgdatadir/fill_help_tables.sql\"\ncreate_system_tables=\"$pkgdatadir/mysql_system_tables.sql\"\ncreate_system_tables2=\"$pkgdatadir/mysql_performance_tables.sql\"\nfill_system_tables=\"$pkgdatadir/mysql_system_tables_data.sql\"\n\nfor f in \"$fill_help_tables\" \"$create_system_tables\" \"$create_system_tables2\" \"$fill_system_tables\"\ndo\n  if test ! -f \"$f\"\n  then\n    cannot_find_file \"$f\"\n    exit 1\n  fi\ndone\n\nif test ! -x \"$mysqld\"\nthen\n  cannot_find_file \"$mysqld\"\n  exit 1\nfi\n\nif test -n \"$langdir\"\nthen\n  if test ! -f \"$langdir/errmsg.sys\"\n  then\n    cannot_find_file \"$langdir/errmsg.sys\"\n    exit 1\n  fi\n  mysqld_opt=\"--lc-messages-dir=$langdir/..\"\nelse\n  mysqld_opt=\"--lc-messages=en_US\"\nfi\n\n\n# Try to determine the hostname\nhostname=`hostname`\n\n# Check if hostname is valid\nif test \"$cross_bootstrap\" -eq 0 -a \"$in_rpm\" -eq 0 -a \"$force\" -eq 0\nthen\n  resolved=`\"$extra_bindir/resolveip\" $hostname 2>&1`\n  if test $? -ne 0\n  then\n    resolved=`\"$extra_bindir/resolveip\" localhost 2>&1`\n    if test $? -ne 0\n    then\n      echo \"Neither host '$hostname' nor 'localhost' could be looked up with\"\n      echo \"'$extra_bindir/resolveip'\"\n      echo \"Please configure the 'hostname' command to return a correct\"\n      echo \"hostname.\"\n      echo \"If you want to solve this at a later stage, restart this script\"\n      echo \"with the --force option\"\n      link_to_help\n      exit 1\n    fi\n    echo \"WARNING: The host '$hostname' could not be looked up with resolveip.\"\n    echo \"This probably means that your libc libraries are not 100 % compatible\"\n    echo \"with this binary MariaDB version. The MariaDB daemon, mysqld, should work\"\n    echo \"normally with the exception that host name resolving will not work.\"\n    echo \"This means that you should use IP addresses instead of hostnames\"\n    echo \"when specifying MariaDB privileges !\"\n  fi\nfi\n\nif test \"$ip_only\" -eq 1\nthen\n  hostname=`echo \"$resolved\" | awk '/ /{print $6}'`\nfi\n\n# Create database directories\nfor dir in \"$ldata\" \"$ldata/mysql\" \"$ldata/test\"\ndo\n  if test ! -d \"$dir\"\n  then\n    if ! `mkdir -p \"$dir\"`\n    then\n      echo \"Fatal error Can't create database directory '$dir'\"\n      link_to_help\n      exit 1\n    fi\n    chmod 700 \"$dir\"\n  fi\n  if test -n \"$user\"\n  then\n    chown $user \"$dir\"\n    if test $? -ne 0\n    then\n      echo \"Cannot change ownership of the database directories to the '$user'\"\n      echo \"user.  Check that you have the necessary permissions and try again.\"\n      exit 1\n    fi\n  fi\ndone\n\nif test -n \"$user\"\nthen\n  args=\"$args --user=$user\"\nfi\n\n# When doing a \"cross bootstrap\" install, no reference to the current\n# host should be added to the system tables.  So we filter out any\n# lines which contain the current host name.\nif test $cross_bootstrap -eq 1\nthen\n  filter_cmd_line=\"sed -e '/@current_hostname/d'\"\nelse\n  filter_cmd_line=\"cat\"\nfi\n\n# Configure mysqld command line\nmysqld_bootstrap=\"${MYSQLD_BOOTSTRAP-$mysqld}\"\nmysqld_install_cmd_line()\n{\n  \"$mysqld_bootstrap\" $defaults \"$mysqld_opt\" --bootstrap \\\n  \"--basedir=$basedir\" \"--datadir=$ldata\" --log-warnings=0 --loose-skip-innodb \\\n  --loose-skip-ndbcluster $args --max_allowed_packet=8M \\\n  --default-storage-engine=myisam \\\n  --net_buffer_length=16K\n}\n\n\n# Create the system and help tables by passing them to \"mysqld --bootstrap\"\ns_echo \"Installing MariaDB/MySQL system tables in '$ldata' ...\"\nif { echo \"use mysql;\"; cat \"$create_system_tables\" \"$create_system_tables2\" \"$fill_system_tables\"; } | eval \"$filter_cmd_line\" | mysqld_install_cmd_line > /dev/null\nthen\n  s_echo \"OK\"\nelse\n  echo\n  echo \"Installation of system tables failed!  Examine the logs in\"\n  echo \"$ldata for more information.\"\n  echo\n  echo \"The problem could be conflicting information in an external\"\n  echo \"my.cnf files. You can ignore these by doing:\"\n  echo\n  echo \"    shell> $scriptdir/scripts/mysql_install_db --defaults-file=~/.my.cnf\"\n  echo\n  echo \"You can also try to start the mysqld daemon with:\"\n  echo\n  echo \"    shell> $mysqld --skip-grant --general-log &\"\n  echo\n  echo \"and use the command line tool $bindir/mysql\"\n  echo \"to connect to the mysql database and look at the grant tables:\"\n  echo\n  echo \"    shell> $bindir/mysql -u root mysql\"\n  echo \"    mysql> show tables;\"\n  echo\n  echo \"Try 'mysqld --help' if you have problems with paths.  Using\"\n  echo \"--general-log gives you a log in $ldata that may be helpful.\"\n  link_to_help\n  echo \"MariaDB is hosted on launchpad; You can find the latest source and\"\n  echo \"email lists at http://launchpad.net/maria\"\n  echo\n  echo \"Please check all of the above before submitting a bug report\"\n  echo \"at http://mariadb.org/jira\"\n  echo\n  exit 1\nfi\n\ns_echo \"Filling help tables...\"\nif { echo \"use mysql;\"; cat \"$fill_help_tables\"; } | mysqld_install_cmd_line > /dev/null\nthen\n  s_echo \"OK\"\nelse\n  echo\n  echo \"WARNING: HELP FILES ARE NOT COMPLETELY INSTALLED!\"\n  echo \"The \\\"HELP\\\" command might not work properly.\"\nfi\n\n# Don't output verbose information if running inside bootstrap or using\n# --srcdir for testing.  In such cases, there's no end user looking at\n# the screen.\nif test \"$cross_bootstrap\" -eq 0 && test -z \"$srcdir\"\nthen\n  s_echo\n  s_echo \"To start mysqld at boot time you have to copy\"\n  s_echo \"support-files/mysql.server to the right place for your system\"\n\n  echo\n  echo \"PLEASE REMEMBER TO SET A PASSWORD FOR THE MariaDB root USER !\"\n  echo \"To do so, start the server, then issue the following commands:\"\n  echo\n  echo \"'$bindir/mysqladmin' -u root password 'new-password'\"\n  echo \"'$bindir/mysqladmin' -u root -h $hostname password 'new-password'\"\n  echo\n  echo \"Alternatively you can run:\"\n  echo \"'$bindir/mysql_secure_installation'\"\n  echo\n  echo \"which will also give you the option of removing the test\"\n  echo \"databases and anonymous user created by default.  This is\"\n  echo \"strongly recommended for production servers.\"\n  echo\n  echo \"See the MariaDB Knowledgebase at http://mariadb.com/kb or the\"\n  echo \"MySQL manual for more instructions.\"\n\n  if test \"$in_rpm\" -eq 0\n  then\n    echo\n    echo \"You can start the MariaDB daemon with:\"\n    echo \"cd '$basedir' ; $bindir/mysqld_safe --datadir='$ldata'\"\n    echo\n    echo \"You can test the MariaDB daemon with mysql-test-run.pl\"\n    echo \"cd '$basedir/mysql-test' ; perl mysql-test-run.pl\"\n  fi\n\n  echo\n  echo \"Please report any problems at http://mariadb.org/jira\"\n  echo\n  echo \"The latest information about MariaDB is available at http://mariadb.org/.\"\n  echo \"You can find additional information about the MySQL part at:\"\n  echo \"http://dev.mysql.com\"\n  echo \"Support MariaDB development by buying support/new features from MariaDB\"\n  echo \"Corporation Ab. You can contact us about this at sales@mariadb.com.\"\n  echo \"Alternatively consider joining our community based development effort:\"\n  echo \"http://mariadb.com/kb/en/contributing-to-the-mariadb-project/\"\n  echo\nfi\n\nexit 0\n\n\n\n\u6a29\u9650\u8a2d\u5b9a\u3092\u884c\u3046\nchmod +x /usr/libexec/mariadb-wait-ready\nchmod +x /usr/libexec/mariadb-prepare-db-dir\nchmod +x /usr/libexec/mysql_install_db\n\n\n\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u8ffd\u52a0\nCan't find messagefile '/usr/share/errmsg.sys'\n\u3068\u8a00\u308f\u308c\u305f\u6642\u306e\u5bfe\u5fdc\n\nbash\nvi /etc/my.cnf\n\n\n[mysqld]\u306e\u76f4\u4e0b\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\n[mysqld]\nlc_messages_dir = /usr/local/mysql/share\n...\n\n\n\u30b5\u30fc\u30d3\u30b9\u306e\u8a2d\u5b9a\n\u30b5\u30fc\u30d3\u30b9\u306e\u8d77\u52d5\u3068\u81ea\u52d5\u8d77\u52d5\u767b\u9332\nsystemctl start mariadb\nsystemctl enable mariadb\n\n## \u306f\u3058\u3081\u306b\nMySQL\u304b\u3089\u306e\u79fb\u884c\u8005\u3082\u5f90\u3005\u306b\u5897\u3048\u59cb\u3081mariaDB\u3002\nMariaDB10.1\u3092\u30bd\u30fc\u30b9\u304b\u3089\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u65b9\u6cd5\u3092\u30e1\u30e2\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n2017\u5e742\u6708\u73fe\u5728\u3001\u300c10.1.21\u300d\u304c\u6700\u65b0\u7248\u3067\u3059\u3002\n\n## \u5b9f\u8df5\u74b0\u5883\u30d0\u30fc\u30b8\u30e7\u30f3\u60c5\u5831\n| \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2 | \u30d0\u30fc\u30b8\u30e7\u30f3 |\n|:-:|:-:|\n| CMake | 3.7.2 |\n|  MariDB | 10.1.21  |\n|  OS | CentOS 7.2  |\n\n\n## \u6ce8\u610f\u4e8b\u9805\nOpenSSL1.1\u306b\u306f\u3001\u672a\u5bfe\u5fdc\u306a\u306e\u3067OpenSSL1.0.x\u3092\u3042\u3089\u304b\u3058\u3081\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\nhttps://jira.mariadb.org/browse/MDEV-10332\n\n\n## \u6e96\u5099\n\n\u7a3c\u50cd\u7528\u306e\u30e6\u30fc\u30b6\u30fc\u3092\u4f5c\u6210\u3059\u308b\n\n```bash:\nuseradd mysql\n```\n\n\n## Cmake\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\n\n```\ncd /usr/local/src\nwget https://cmake.org/files/v3.7/cmake-3.7.2.tar.gz\ntar xvzf cmake-3.7.2.tar.gz\ncd cmake-3.7.2\n./configure\ngmake\nmake install\n```\n\n\u3082\u3057\u30a8\u30e9\u30fc\u306b\u306a\u3063\u305f\u5834\u5408\n\n```bash:\nrm CMakeCache.txt\n```\n\u3092\u5b9f\u884c\u3057\u3066\u518d\u5ea6\u884c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\n\n## ncruse\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n```:bash:\ncd /usr/local/src\nwget http://ftp.gnu.org/gnu/ncurses/ncurses-6.0.tar.gz\ntar xvzf ncurses-6.0.tar.gz\ncd ncurses-6.0\n./configure --with-shared\nmake\nmake install\n```\n\n##MariaDB\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\n```bash:\ncd /usr/local/src\nwget --trust-server-names https://downloads.mariadb.org/f/mariadb-10.1.21/source/mariadb-10.1.21.tar.gz/from/http%3A//ftp.yz.yamagata-u.ac.jp/pub/dbms/mariadb/?serve\ntar xvzf mariadb-10.1.21.tar.gz\ncd mariadb-10.1.21\nBUILD/autorun.sh\n\nexport OPENSSL_ROOT_DIR=/usr/local/ssl\nexport OPENSSL_INCLUDE_DIR=/usr/local/ssl/include\nexport OPENSSL_LIBRARIES=/usr/local/ssl/lib/\nexport OPENSSL_ROOT_DIR=/usr/local/ssl\n\n/usr/local/bin/cmake \\\n-DPLUGIN_TOKUDB=NO \\\n-OPENSSL_ROOT_DIR=/usr/local/ssl \\\n-OPENSSL_INCLUDE_DIR=/usr/local/ssl/include \\\n-OPENSSL_LIBRARIES=/usr/local/ssl/lib \\\n-DDEFAULT_CHARSET=utf8 \\\n-DDEFAULT_COLLATION=utf8_general_ci\n\nmake install\n\n#\u30aa\u30fc\u30ca\u30fc\u3092\u8a2d\u5b9a\nchown mysql:mysql -R /usr/local/mysql/\n\n#\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30d4\u30fc\u3059\u308b\ncp support-files/my-large.cnf /etc/my.cnf\nscripts/mysql_install_db --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data\n```\n\n##\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u610f\u3059\u308b\n\nCentOS\u306erpm\u304b\u3089\u3001\u8d77\u52d5\u30b9\u30af\u30ea\u30d7\u30c8\u4e00\u5f0f\u3092\u6301\u3063\u3066\u304d\u307e\u3059\u3002\n\u305d\u306e\u307e\u307e\u3067\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u304c\u7570\u306a\u308b\u305f\u3081\u3001\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u5909\u66f4\u3057\u305f\u3082\u306e\u3092\u8a18\u8f09\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u3053\u308c\u3092\u305d\u306e\u307e\u307e\u30b3\u30d4\u30fc\u3059\u308c\u3070OK\u3067\u3059\u3002\n\n###mariadb.service\n\n```bash:\nvi /usr/lib/systemd/system/mariadb.service\n```\n\n```bash:mariadb.service\n# It's not recommended to modify this file in-place, because it will be\n# overwritten during package upgrades.  If you want to customize, the\n# best way is to create a file \"/etc/systemd/system/mariadb.service\",\n# containing\n#\t.include /lib/systemd/system/mariadb.service\n#\t...make your changes here...\n# or create a file \"/etc/systemd/system/mariadb.service.d/foo.conf\",\n# which doesn't need to include \".include\" call and which will be parsed\n# after the file mariadb.service itself is parsed.\n#\n# For more info about custom unit files, see systemd.unit(5) or\n# http://fedoraproject.org/wiki/Systemd#How_do_I_customize_a_unit_file.2F_add_a_custom_unit_file.3F\n\n# For example, if you want to increase mariadb's open-files-limit to 10000,\n# you need to increase systemd's LimitNOFILE setting, so create a file named\n# \"/etc/systemd/system/mariadb.service.d/limits.conf\" containing:\n#\t[Service]\n#\tLimitNOFILE=10000\n\n# Note: /usr/lib/... is recommended in the .include line though /lib/... \n# still works.\n# Don't forget to reload systemd daemon after you change unit configuration:\n# root> systemctl --system daemon-reload\n\n[Unit]\nDescription=MariaDB database server\nAfter=syslog.target\nAfter=network.target\n\n[Service]\nType=simple\nUser=mysql\nGroup=mysql\n\nExecStartPre=/usr/libexec/mariadb-prepare-db-dir %n\n# Note: we set --basedir to prevent probes that might trigger SELinux alarms,\n# per bug #547485\nExecStart=/usr/local/mysql/bin/mysqld_safe --basedir=/usr\nExecStartPost=/usr/libexec/mariadb-wait-ready $MAINPID\n\n# Give a reasonable amount of time for the server to start up/shut down\nTimeoutSec=300\n\n# Place temp files in a secure directory, not /tmp\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\n```\n\n### mariadb-wait-ready\n\n```bash:\nvi /usr/libexec/mariadb-wait-ready\n```\n\n```bash:\n#!/bin/sh\n\n# This script waits for mysqld to be ready to accept connections\n# (which can be many seconds or even minutes after launch, if there's\n# a lot of crash-recovery work to do).\n# Running this as ExecStartPost is useful so that services declared as\n# \"After mysqld\" won't be started until the database is really ready.\n\n# Service file passes us the daemon's PID (actually, mysqld_safe's PID)\ndaemon_pid=\"$1\"\n\n# extract value of a MySQL option from config files\n# Usage: get_mysql_option SECTION VARNAME DEFAULT\n# result is returned in $result\n# We use my_print_defaults which prints all options from multiple files,\n# with the more specific ones later; hence take the last match.\nget_mysql_option(){\n\tresult=`/usr/local/mysql/bin/my_print_defaults \"$1\" | sed -n \"s/^--$2=//p\" | tail -n 1`\n\tif [ -z \"$result\" ]; then\n\t    # not found, use default\n\t    result=\"$3\"\n\tfi\n}\n\n# Defaults here had better match what mysqld_safe will default to\nget_mysql_option mysqld datadir \"/usr/local/mysql/data\"\ndatadir=\"$result\"\nget_mysql_option mysqld socket \"/usr/local/mysql/data/mysql.sock\"\nsocketfile=\"$result\"\n\n# Wait for the server to come up or for the mysqld process to disappear\nret=0\nwhile /bin/true; do\n\tif ! [ -d \"/proc/$daemon_pid\" ] ; then\n            ret=1\n            break\n\tfi\n\tRESPONSE=`/usr/local/mysql/bin/mysqladmin --no-defaults --socket=\"$socketfile\" --user=UNKNOWN_MYSQL_USER ping 2>&1`\n\tmret=$?\n\tif [ $mret -eq 0 ]; then\n\t    break\n\tfi\n\t# exit codes 1, 11 (EXIT_CANNOT_CONNECT_TO_SERVICE) are expected,\n\t# anything else suggests a configuration error\n\tif [ $mret -ne 1 -a $mret -ne 11 ]; then\n\t    ret=1\n\t    break\n\tfi\n\t# \"Access denied\" also means the server is alive\n\techo \"$RESPONSE\" | grep -q \"Access denied for user\" && break\n\n\tsleep 1\ndone\n\nexit $ret\n```\n\n### mariadb-prepare-db-dir\n\n```bash:\nvi /usr/libexec/mariadb-prepare-db-dir\n```\n\n```bash:mariadb-prepare-db-dir\n#!/bin/sh\n\n# This script creates the mysql data directory during first service start.\n# In subsequent starts, it does nothing much.\n\n# extract value of a MySQL option from config files\n# Usage: get_mysql_option SECTION VARNAME DEFAULT\n# result is returned in $result\n# We use my_print_defaults which prints all options from multiple files,\n# with the more specific ones later; hence take the last match.\nget_mysql_option(){\n        result=`/usr/local/mysql/bin/my_print_defaults \"$1\" | sed -n \"s/^--$2=//p\" | tail -n 1`\n        if [ -z \"$result\" ]; then\n            # not found, use default\n            result=\"$3\"\n        fi\n}\n\n# Defaults here had better match what mysqld_safe will default to\nget_mysql_option mysqld datadir \"/usr/local/mysql/data\"\ndatadir=\"$result\"\nget_mysql_option mysqld_safe log-error \"/usr/local/mysql/data/mariadb.log\"\nerrlogfile=\"$result\"\nget_mysql_option mysqld socket \"$datadir/mysql.sock\"\nsocketfile=\"$result\"\n\n# Absorb configuration settings from the specified systemd service file,\n# or the default \"mysqld\" service if not specified\nSERVICE_NAME=\"$1\"\nif [ x\"$SERVICE_NAME\" = x ]\nthen\n    SERVICE_NAME=mysqld.service\nfi\n\nmyuser=`systemctl show -p User \"${SERVICE_NAME}\" |\n  sed 's/^User=//'`\nif [ x\"$myuser\" = x ]\nthen\n    myuser=mysql\nfi\n\nmygroup=`systemctl show -p Group \"${SERVICE_NAME}\" |\n  sed 's/^Group=//'`\nif [ x\"$mygroup\" = x ]\nthen\n    mygroup=mysql\nfi\n\n# Set up the errlogfile with appropriate permissions\ntouch \"$errlogfile\"\nchown \"$myuser:$mygroup\" \"$errlogfile\"\nchmod 0640 \"$errlogfile\"\n[ -x /sbin/restorecon ] && /sbin/restorecon \"$errlogfile\"\n\n# We check if there is already a process using the socket file,\n# since otherwise this systemd service file could report false\n# positive result when starting and mysqld_safe could remove\n# a socket file, which actually uses a different daemon.\nif fuser \"$socketfile\" &>/dev/null ; then\n    echo \"Socket file $socketfile exists.\" >&2\n    echo \"Is another MySQL daemon already running with the same unix socket?\" >&2\n    exit 1\nfi\n\n# Make the data directory\nif [ ! -d \"$datadir/mysql\" ] ; then\n    # First, make sure $datadir is there with correct permissions\n    # (note: if it's not, and we're not root, this'll fail ...)\n    if [ ! -e \"$datadir\" -a ! -h \"$datadir\" ]\n    then\n        mkdir -p \"$datadir\" || exit 1\n    fi\n    chown \"$myuser:$mygroup\" \"$datadir\"\n    chmod 0755 \"$datadir\"\n    [ -x /sbin/restorecon ] && /sbin/restorecon \"$datadir\"\n\n    # Now create the database\n    echo \"Initializing MySQL database\"\n    /usr/local/mysql/scripts/mysql_install_db --datadir=\"$datadir\" --user=\"$myuser\"\n    ret=$?\n    if [ $ret -ne 0 ] ; then\n        echo \"Initialization of MySQL database failed.\" >&2\n        echo \"Perhaps /etc/my.cnf is misconfigured.\" >&2\n        # Clean up any partially-created database files\n        if [ ! -e \"$datadir/mysql/user.frm\" ] ; then\n            rm -rf \"$datadir\"/*\n        fi\n        exit $ret\n    fi\n    # In case we're running as root, make sure files are owned properly\n    chown -R \"$myuser:$mygroup\" \"$datadir\"\nfi\n\nexit 0\n```\n### mysql_install_db\n\n```bash:\nvi /usr/libexec/mysql_install_db\n```\n\n```bash:mysql_install_db\n#!/bin/sh\n# Copyright (c) 2000, 2013, Oracle and/or its affiliates.\n# Copyright (c) 2009, 2013, Monty Program Ab\n# \n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; version 2 of the License.\n# \n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n# \n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n# This scripts creates the MariaDB Server system tables\n#\n# All unrecognized arguments to this script are passed to mysqld.\n\nbasedir=\"/usr/local/mysql\"\nbuilddir=\"\"\nldata=\"/usr/local/mysql/data\"\nlangdir=\"\"\nsrcdir=\"\"\n\nargs=\"\"\ndefaults=\"\"\nmysqld_opt=\"\"\nuser=\"\"\n\nforce=0\nin_rpm=0\nip_only=0\ncross_bootstrap=0\n\nusage()\n{\n  cat <<EOF\nUsage: $0 [OPTIONS]\n  --basedir=path       The path to the MariaDB installation directory.\n  --builddir=path      If using --srcdir with out-of-directory builds, you\n                       will need to set this to the location of the build\n                       directory where built files reside.\n  --cross-bootstrap    For internal use.  Used when building the MariaDB system\n                       tables on a different host than the target.\n  --datadir=path       The path to the MariaDB data directory.\n  --defaults-extra-file=name\n                       Read this file after the global files are read.\n  --defaults-file=name Only read default options from the given file name.\n  --force              Causes mysql_install_db to run even if DNS does not\n                       work.  In that case, grant table entries that\n                       normally use hostnames will use IP addresses.\n  --help               Display this help and exit.                     \n  --ldata=path         The path to the MariaDB data directory. Same as\n                       --datadir.\n  --no-defaults        Don't read default options from any option file.\n  --defaults-file=path Read only this configuration file.\n  --rpm                For internal use.  This option is used by RPM files\n                       during the MariaDB installation process.\n  --skip-name-resolve  Use IP addresses rather than hostnames when creating\n                       grant table entries.  This option can be useful if\n                       your DNS does not work.\n  --srcdir=path        The path to the MariaDB source directory.  This option\n                       uses the compiled binaries and support files within the\n                       source tree, useful for if you don't want to install\n                       MariaDB yet and just want to create the system tables.\n  --user=user_name     The login username to use for running mysqld.  Files\n                       and directories created by mysqld will be owned by this\n                       user.  You must be root to use this option.  By default\n                       mysqld runs using your current login name and files and\n                       directories that it creates will be owned by you.\n\nAll other options are passed to the mysqld program\n\nEOF\n  exit 1\n}\n\ns_echo()\n{\n  if test \"$in_rpm\" -eq 0 -a \"$cross_bootstrap\" -eq 0\n  then\n    echo \"$1\"\n  fi\n}\n\nlink_to_help()\n{\n  echo\n  echo \"The latest information about mysql_install_db is available at\"\n  echo \"https://mariadb.com/kb/en/installing-system-tables-mysql_install_db\"\n}\n\nparse_arg()\n{\n  echo \"$1\" | sed -e 's/^[^=]*=//'\n}\n\nparse_arguments()\n{\n  # We only need to pass arguments through to the server if we don't\n  # handle them here.  So, we collect unrecognized options (passed on\n  # the command line) into the args variable.\n  pick_args=\n  if test \"$1\" = PICK-ARGS-FROM-ARGV\n  then\n    pick_args=1\n    shift\n  fi\n\n  for arg\n  do\n    case \"$arg\" in\n      --force) force=1 ;;\n      --basedir=*) basedir=`parse_arg \"$arg\"` ;;\n      --builddir=*) builddir=`parse_arg \"$arg\"` ;;\n      --srcdir=*)  srcdir=`parse_arg \"$arg\"` ;;\n      --ldata=*|--datadir=*|--data=*) ldata=`parse_arg \"$arg\"` ;;\n      --user=*)\n        # Note that the user will be passed to mysqld so that it runs\n        # as 'user' (crucial e.g. if log-bin=/some_other_path/\n        # where a chown of datadir won't help)\n        user=`parse_arg \"$arg\"` ;;\n      --skip-name-resolve) ip_only=1 ;;\n      --verbose) verbose=1 ;; # Obsolete\n      --rpm) in_rpm=1 ;;\n      --help) usage ;;\n      --no-defaults|--defaults-file=*|--defaults-extra-file=*)\n        defaults=\"$arg\" ;;\n\n      --cross-bootstrap|--windows)\n        # Used when building the MariaDB system tables on a different host than\n        # the target. The platform-independent files that are created in\n        # --datadir on the host can be copied to the target system.\n        #\n        # The most common use for this feature is in the Windows installer\n        # which will take the files from datadir and include them as part of\n        # the install package.  See top-level 'dist-hook' make target.\n        #\n        # --windows is a deprecated alias\n        cross_bootstrap=1 ;;\n\n      *)\n        if test -n \"$pick_args\"\n        then\n          # This sed command makes sure that any special chars are quoted,\n          # so the arg gets passed exactly to the server.\n          # XXX: This is broken; true fix requires using eval and proper\n          # quoting of every single arg ($basedir, $ldata, etc.)\n          #args=\"$args \"`echo \"$arg\" | sed -e 's,\\([^a-zA-Z0-9_.-]\\),\\\\\\\\\\1,g'`\n          args=\"$args $arg\"\n        fi\n        ;;\n    esac\n  done\n}\n\n# Try to find a specific file within --basedir which can either be a binary\n# release or installed source directory and return the path.\nfind_in_basedir()\n{\n  case \"$1\" in\n    --dir)\n      return_dir=1; shift\n      ;;\n  esac\n\n  file=$1; shift\n\n  for dir in \"$@\"\n  do\n    if test -f \"$basedir/$dir/$file\"\n    then\n      if test -n \"$return_dir\"\n      then\n        echo \"$basedir/$dir\"\n      else\n        echo \"$basedir/$dir/$file\"\n      fi\n      break\n    fi\n  done\n}\n\ncannot_find_file()\n{\n  echo\n  echo \"FATAL ERROR: Could not find $1\"\n\n  shift\n  if test $# -ne 0\n  then\n    echo\n    echo \"The following directories were searched:\"\n    echo\n    for dir in \"$@\"\n    do\n      echo \"    $dir\"\n    done\n  fi\n\n  echo\n  echo \"If you compiled from source, you need to run 'make install' to\"\n  echo \"copy the software into the correct location ready for operation.\"\n  echo\n  echo \"If you are using a binary release, you must either be at the top\"\n  echo \"level of the extracted archive, or pass the --basedir option\"\n  echo \"pointing to that location.\"\n  link_to_help\n}\n\n# Ok, let's go.  We first need to parse arguments which are required by\n# my_print_defaults so that we can execute it first, then later re-parse\n# the command line to add any extra bits that we need.\nparse_arguments PICK-ARGS-FROM-ARGV \"$@\"\n\n#\n# We can now find my_print_defaults.  This script supports:\n#\n#   --srcdir=path pointing to compiled source tree\n#   --basedir=path pointing to installed binary location\n#\n# or default to compiled-in locations.\n#\nif test -n \"$srcdir\" && test -n \"$basedir\"\nthen\n  echo \"ERROR: Specify either --basedir or --srcdir, not both.\"\n  link_to_help\n  exit 1\nfi\nif test -n \"$srcdir\"\nthen\n  if test -z \"$builddir\"\n  then\n    builddir=\"$srcdir\"\n  fi\n  print_defaults=\"$builddir/extra/my_print_defaults\"\nelif test -n \"$basedir\"\nthen\n  print_defaults=`find_in_basedir my_print_defaults bin extra`\n  if test -z \"$print_defaults\"\n  then\n    cannot_find_file my_print_defaults $basedir/bin $basedir/extra\n    exit 1\n  fi\nelse\n  print_defaults=\"/usr/local/mysql/bin/my_print_defaults\"\nfi\n\nif test ! -x \"$print_defaults\"\nthen\n  cannot_find_file \"$print_defaults\"\n  exit 1\nfi\n\n# Now we can get arguments from the groups [mysqld] and [mysql_install_db]\n# in the my.cfg file, then re-run to merge with command line arguments.\nparse_arguments `\"$print_defaults\" $defaults --mysqld mysql_install_db`\nparse_arguments PICK-ARGS-FROM-ARGV \"$@\"\n\n# Configure paths to support files\nif test -n \"$srcdir\"\nthen\n  basedir=\"$builddir\"\n  bindir=\"$basedir/client\"\n  extra_bindir=\"$basedir/extra\"\n  mysqld=\"$basedir/sql/mysqld\"\n  langdir=\"$basedir/sql/share/english\"\n  pkgdatadir=\"$srcdir/scripts\"\n  scriptdir=\"$srcdir/scripts\"\nelif test -n \"$basedir\"\nthen\n  bindir=\"$basedir/bin\"\n  extra_bindir=\"$bindir\"\n  mysqld=`find_in_basedir mysqld libexec sbin bin`\n  if test -z \"$mysqld\"\n  then\n    cannot_find_file mysqld $basedir/libexec $basedir/sbin $basedir/bin\n    exit 1\n  fi\n  langdir=`find_in_basedir --dir errmsg.sys share/english share/mysql/english`\n  if test -z \"$langdir\"\n  then\n    cannot_find_file errmsg.sys $basedir/share/english $basedir/share/mysql/english\n    exit 1\n  fi\n  pkgdatadir=`find_in_basedir --dir fill_help_tables.sql share share/mysql`\n  if test -z \"$pkgdatadir\"\n  then\n    cannot_find_file fill_help_tables.sql $basedir/share $basedir/share/mysql\n    exit 1\n  fi\n  scriptdir=\"$basedir/scripts\"\nelse\n  basedir=\"/usr\"\n  bindir=\"/usr/bin\"\n  extra_bindir=\"$bindir\"\n  mysqld=\"/usr/libexec/mysqld\"\n  pkgdatadir=\"/usr/share/mysql\"\n  scriptdir=\"/usr/bin\"\nfi\n\n# Set up paths to SQL scripts required for bootstrap\nfill_help_tables=\"$pkgdatadir/fill_help_tables.sql\"\ncreate_system_tables=\"$pkgdatadir/mysql_system_tables.sql\"\ncreate_system_tables2=\"$pkgdatadir/mysql_performance_tables.sql\"\nfill_system_tables=\"$pkgdatadir/mysql_system_tables_data.sql\"\n\nfor f in \"$fill_help_tables\" \"$create_system_tables\" \"$create_system_tables2\" \"$fill_system_tables\"\ndo\n  if test ! -f \"$f\"\n  then\n    cannot_find_file \"$f\"\n    exit 1\n  fi\ndone\n\nif test ! -x \"$mysqld\"\nthen\n  cannot_find_file \"$mysqld\"\n  exit 1\nfi\n\nif test -n \"$langdir\"\nthen\n  if test ! -f \"$langdir/errmsg.sys\"\n  then\n    cannot_find_file \"$langdir/errmsg.sys\"\n    exit 1\n  fi\n  mysqld_opt=\"--lc-messages-dir=$langdir/..\"\nelse\n  mysqld_opt=\"--lc-messages=en_US\"\nfi\n\n\n# Try to determine the hostname\nhostname=`hostname`\n\n# Check if hostname is valid\nif test \"$cross_bootstrap\" -eq 0 -a \"$in_rpm\" -eq 0 -a \"$force\" -eq 0\nthen\n  resolved=`\"$extra_bindir/resolveip\" $hostname 2>&1`\n  if test $? -ne 0\n  then\n    resolved=`\"$extra_bindir/resolveip\" localhost 2>&1`\n    if test $? -ne 0\n    then\n      echo \"Neither host '$hostname' nor 'localhost' could be looked up with\"\n      echo \"'$extra_bindir/resolveip'\"\n      echo \"Please configure the 'hostname' command to return a correct\"\n      echo \"hostname.\"\n      echo \"If you want to solve this at a later stage, restart this script\"\n      echo \"with the --force option\"\n      link_to_help\n      exit 1\n    fi\n    echo \"WARNING: The host '$hostname' could not be looked up with resolveip.\"\n    echo \"This probably means that your libc libraries are not 100 % compatible\"\n    echo \"with this binary MariaDB version. The MariaDB daemon, mysqld, should work\"\n    echo \"normally with the exception that host name resolving will not work.\"\n    echo \"This means that you should use IP addresses instead of hostnames\"\n    echo \"when specifying MariaDB privileges !\"\n  fi\nfi\n\nif test \"$ip_only\" -eq 1\nthen\n  hostname=`echo \"$resolved\" | awk '/ /{print $6}'`\nfi\n\n# Create database directories\nfor dir in \"$ldata\" \"$ldata/mysql\" \"$ldata/test\"\ndo\n  if test ! -d \"$dir\"\n  then\n    if ! `mkdir -p \"$dir\"`\n    then\n      echo \"Fatal error Can't create database directory '$dir'\"\n      link_to_help\n      exit 1\n    fi\n    chmod 700 \"$dir\"\n  fi\n  if test -n \"$user\"\n  then\n    chown $user \"$dir\"\n    if test $? -ne 0\n    then\n      echo \"Cannot change ownership of the database directories to the '$user'\"\n      echo \"user.  Check that you have the necessary permissions and try again.\"\n      exit 1\n    fi\n  fi\ndone\n\nif test -n \"$user\"\nthen\n  args=\"$args --user=$user\"\nfi\n\n# When doing a \"cross bootstrap\" install, no reference to the current\n# host should be added to the system tables.  So we filter out any\n# lines which contain the current host name.\nif test $cross_bootstrap -eq 1\nthen\n  filter_cmd_line=\"sed -e '/@current_hostname/d'\"\nelse\n  filter_cmd_line=\"cat\"\nfi\n\n# Configure mysqld command line\nmysqld_bootstrap=\"${MYSQLD_BOOTSTRAP-$mysqld}\"\nmysqld_install_cmd_line()\n{\n  \"$mysqld_bootstrap\" $defaults \"$mysqld_opt\" --bootstrap \\\n  \"--basedir=$basedir\" \"--datadir=$ldata\" --log-warnings=0 --loose-skip-innodb \\\n  --loose-skip-ndbcluster $args --max_allowed_packet=8M \\\n  --default-storage-engine=myisam \\\n  --net_buffer_length=16K\n}\n\n\n# Create the system and help tables by passing them to \"mysqld --bootstrap\"\ns_echo \"Installing MariaDB/MySQL system tables in '$ldata' ...\"\nif { echo \"use mysql;\"; cat \"$create_system_tables\" \"$create_system_tables2\" \"$fill_system_tables\"; } | eval \"$filter_cmd_line\" | mysqld_install_cmd_line > /dev/null\nthen\n  s_echo \"OK\"\nelse\n  echo\n  echo \"Installation of system tables failed!  Examine the logs in\"\n  echo \"$ldata for more information.\"\n  echo\n  echo \"The problem could be conflicting information in an external\"\n  echo \"my.cnf files. You can ignore these by doing:\"\n  echo\n  echo \"    shell> $scriptdir/scripts/mysql_install_db --defaults-file=~/.my.cnf\"\n  echo\n  echo \"You can also try to start the mysqld daemon with:\"\n  echo\n  echo \"    shell> $mysqld --skip-grant --general-log &\"\n  echo\n  echo \"and use the command line tool $bindir/mysql\"\n  echo \"to connect to the mysql database and look at the grant tables:\"\n  echo\n  echo \"    shell> $bindir/mysql -u root mysql\"\n  echo \"    mysql> show tables;\"\n  echo\n  echo \"Try 'mysqld --help' if you have problems with paths.  Using\"\n  echo \"--general-log gives you a log in $ldata that may be helpful.\"\n  link_to_help\n  echo \"MariaDB is hosted on launchpad; You can find the latest source and\"\n  echo \"email lists at http://launchpad.net/maria\"\n  echo\n  echo \"Please check all of the above before submitting a bug report\"\n  echo \"at http://mariadb.org/jira\"\n  echo\n  exit 1\nfi\n\ns_echo \"Filling help tables...\"\nif { echo \"use mysql;\"; cat \"$fill_help_tables\"; } | mysqld_install_cmd_line > /dev/null\nthen\n  s_echo \"OK\"\nelse\n  echo\n  echo \"WARNING: HELP FILES ARE NOT COMPLETELY INSTALLED!\"\n  echo \"The \\\"HELP\\\" command might not work properly.\"\nfi\n\n# Don't output verbose information if running inside bootstrap or using\n# --srcdir for testing.  In such cases, there's no end user looking at\n# the screen.\nif test \"$cross_bootstrap\" -eq 0 && test -z \"$srcdir\"\nthen\n  s_echo\n  s_echo \"To start mysqld at boot time you have to copy\"\n  s_echo \"support-files/mysql.server to the right place for your system\"\n\n  echo\n  echo \"PLEASE REMEMBER TO SET A PASSWORD FOR THE MariaDB root USER !\"\n  echo \"To do so, start the server, then issue the following commands:\"\n  echo\n  echo \"'$bindir/mysqladmin' -u root password 'new-password'\"\n  echo \"'$bindir/mysqladmin' -u root -h $hostname password 'new-password'\"\n  echo\n  echo \"Alternatively you can run:\"\n  echo \"'$bindir/mysql_secure_installation'\"\n  echo\n  echo \"which will also give you the option of removing the test\"\n  echo \"databases and anonymous user created by default.  This is\"\n  echo \"strongly recommended for production servers.\"\n  echo\n  echo \"See the MariaDB Knowledgebase at http://mariadb.com/kb or the\"\n  echo \"MySQL manual for more instructions.\"\n\n  if test \"$in_rpm\" -eq 0\n  then\n    echo\n    echo \"You can start the MariaDB daemon with:\"\n    echo \"cd '$basedir' ; $bindir/mysqld_safe --datadir='$ldata'\"\n    echo\n    echo \"You can test the MariaDB daemon with mysql-test-run.pl\"\n    echo \"cd '$basedir/mysql-test' ; perl mysql-test-run.pl\"\n  fi\n\n  echo\n  echo \"Please report any problems at http://mariadb.org/jira\"\n  echo\n  echo \"The latest information about MariaDB is available at http://mariadb.org/.\"\n  echo \"You can find additional information about the MySQL part at:\"\n  echo \"http://dev.mysql.com\"\n  echo \"Support MariaDB development by buying support/new features from MariaDB\"\n  echo \"Corporation Ab. You can contact us about this at sales@mariadb.com.\"\n  echo \"Alternatively consider joining our community based development effort:\"\n  echo \"http://mariadb.com/kb/en/contributing-to-the-mariadb-project/\"\n  echo\nfi\n\nexit 0\n```\n\n### \u6a29\u9650\u8a2d\u5b9a\u3092\u884c\u3046\n\n```\nchmod +x /usr/libexec/mariadb-wait-ready\nchmod +x /usr/libexec/mariadb-prepare-db-dir\nchmod +x /usr/libexec/mysql_install_db\n```\n\n### \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u8ffd\u52a0\nCan't find messagefile '/usr/share/errmsg.sys'\n\u3068\u8a00\u308f\u308c\u305f\u6642\u306e\u5bfe\u5fdc\n\n```:bash\nvi /etc/my.cnf\n```\n\n[mysqld]\u306e\u76f4\u4e0b\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\n\n```\n[mysqld]\nlc_messages_dir = /usr/local/mysql/share\n...\n```\n\n\n## \u30b5\u30fc\u30d3\u30b9\u306e\u8a2d\u5b9a\n\u30b5\u30fc\u30d3\u30b9\u306e\u8d77\u52d5\u3068\u81ea\u52d5\u8d77\u52d5\u767b\u9332\n\n```\nsystemctl start mariadb\nsystemctl enable mariadb\n```\n\n", "tags": ["mariadb", "MariaDB10", "centos7", "CentOS"]}