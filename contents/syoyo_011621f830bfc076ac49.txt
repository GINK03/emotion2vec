{"context": " More than 1 year has passed since last update.https://github.com/google/benchmark\nhttp://google-opensource.blogspot.jp/2014/01/introducing-benchmark.html\n\n\u95a2\u6570\u3068\u304b\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u304f\u308c\u308b\u30e9\u30a4\u30d6\u30e9\u30ea.\nC++11 \u6a5f\u80fd(\u3088\u308a\u6b63\u78ba\u306b\u306f -std=c++0x)\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u65b0\u3057\u3081\u306e C++ \u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u306a\u3044\u3068\u52d5\u304d\u307e\u305b\u3093.\n\u4f7f\u3044\u65b9\u306f\u81f3\u3063\u3066\u7c21\u5358\u3067, \u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u306e\u3088\u3046\u306b, \u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3067\u8a08\u6e2c\u3057\u305f\u3044\u95a2\u6570\u3092\u9069\u5f53\u306b benchmark::State \u3092\u5f15\u6570\u306b\u53d6\u308b\u3088\u3046\u306b\u3057\u3066, \u30de\u30af\u30ed\u3067\u547c\u3073\u51fa\u3057\u306e\u6307\u793a\u3092\u4e0e\u3048\u307e\u3059.\n#include \"benchmark/benchmark.h\"\n\nstatic void BM_LongTest(benchmark::State& state) {\n  double tracker = 0.0;\n  while (state.KeepRunning())\n  for (int i = 0; i < state.range_x(); ++i)\n    tracker += i;\n  CHECK(tracker != 0.0);\n}\nBENCHMARK(BM_LongTest)->Range(1<<16,1<<28);\n\nint\nmain(\n  int argc,\n  const char** argv)\n{\n  benchmark::Initialize(&argc, argv);\n\n  benchmark::RunSpecifiedBenchmarks();\n  return EXIT_SUCCESS;\n\n}\n\n\u3053\u308c\u3060\u3068 Range \u306b\u3088\u308a, 2^16 ~ 2^28 \u306e\u9593\u3067\u3088\u308d\u3057\u304f\u5024\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u632f\u3063\u3066 MB_LongTest \u3092\u547c\u3073\u51fa\u3057\u3066\u304f\u308c\u307e\u3059.\n\u51fa\u529b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u3053\u308c\u3082\u3088\u308d\u3057\u304f\u30ec\u30dd\u30fc\u30c8\u3057\u3066\u304f\u308c\u307e\u3059.\nReading /proc/self/cputime_ns failed. Using getrusage().\nBenchmarking on 1 X 2297.19 MHz CPU\n2014/02/05-03:06:36\nDEBUG: Benchmark          Time(ns)    CPU(ns) Iterations\n--------------------------------------------------------\nDEBUG: BM_LongTest/64k      219496     221310       2268                                  \nDEBUG: BM_LongTest/256k     871541     880878        574                                  \nDEBUG: BM_LongTest/2M      7076118    7158361         72                                  \nDEBUG: BM_LongTest/16M    62749889   63467500          8                                  \nDEBUG: BM_LongTest/128M  894819972  902404000          1                                  \nDEBUG: BM_LongTest/256M 1793205019 1809572000          1  \n\n\u7279\u5b9a\u306e\u5024\u3092\u6307\u5b9a\u3057\u3066\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u305f\u308a(Arg), \u30b9\u30ec\u30c3\u30c9\u306e\u6570\u3092\u6307\u5b9a\u3057\u3066\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u305f\u308a(Threads)\u3068\u51fa\u6765\u3066, \u5927\u4f53\u306e\u3053\u3068\u306f\u3067\u304d\u307e\u3059\u306d. \u30b9\u30c8\u30ec\u30b9\u30c6\u30b9\u30c8\u3084\u30e9\u30f3\u30c0\u30e0\u30c6\u30b9\u30c8\u306b\u3082\u4f7f\u3048\u305d\u3046\u3067\u3059!\n\n\u540d\u524d\u304c\u3088\u304f\u306a\u3044\n\u3057\u304b\u3057\u30cd\u30fc\u30df\u30f3\u30b0\u30bb\u30f3\u30b9\u306f\u6b8b\u5ff5\u3067\u3059\u306d\u2026 \u3053\u308c\u3060\u3068\u6df7\u4e71\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3057\u691c\u7d22\u3067\u3082\u306a\u304b\u306a\u304b\u5f15\u3063\u304b\u304b\u3089\u306a\u3044\u3067\u3059\u306d.\n\nhttps://github.com/google/benchmark\n\nhttp://google-opensource.blogspot.jp/2014/01/introducing-benchmark.html\n\n![benchmark-screenshot](http://1.bp.blogspot.com/-wk7hsdYodo8/UtS75FZag6I/AAAAAAAAAks/cQFiCXPbtwk/s1600/image00.png)\n\n\n\u95a2\u6570\u3068\u304b\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u304f\u308c\u308b\u30e9\u30a4\u30d6\u30e9\u30ea.\n\nC++11 \u6a5f\u80fd(\u3088\u308a\u6b63\u78ba\u306b\u306f -std=c++0x)\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u65b0\u3057\u3081\u306e C++ \u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u306a\u3044\u3068\u52d5\u304d\u307e\u305b\u3093.\n\n\u4f7f\u3044\u65b9\u306f\u81f3\u3063\u3066\u7c21\u5358\u3067, \u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u306e\u3088\u3046\u306b, \u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3067\u8a08\u6e2c\u3057\u305f\u3044\u95a2\u6570\u3092\u9069\u5f53\u306b benchmark::State \u3092\u5f15\u6570\u306b\u53d6\u308b\u3088\u3046\u306b\u3057\u3066, \u30de\u30af\u30ed\u3067\u547c\u3073\u51fa\u3057\u306e\u6307\u793a\u3092\u4e0e\u3048\u307e\u3059.\n\n```\n#include \"benchmark/benchmark.h\"\n\nstatic void BM_LongTest(benchmark::State& state) {\n  double tracker = 0.0;\n  while (state.KeepRunning())\n  for (int i = 0; i < state.range_x(); ++i)\n    tracker += i;\n  CHECK(tracker != 0.0);\n}\nBENCHMARK(BM_LongTest)->Range(1<<16,1<<28);\n\nint\nmain(\n  int argc,\n  const char** argv)\n{\n  benchmark::Initialize(&argc, argv);\n\n  benchmark::RunSpecifiedBenchmarks();\n  return EXIT_SUCCESS;\n\n}\n```\n\n\u3053\u308c\u3060\u3068 Range \u306b\u3088\u308a, 2^16 ~ 2^28 \u306e\u9593\u3067\u3088\u308d\u3057\u304f\u5024\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u632f\u3063\u3066 MB_LongTest \u3092\u547c\u3073\u51fa\u3057\u3066\u304f\u308c\u307e\u3059.\n\n\u51fa\u529b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u3053\u308c\u3082\u3088\u308d\u3057\u304f\u30ec\u30dd\u30fc\u30c8\u3057\u3066\u304f\u308c\u307e\u3059.\n\n```\nReading /proc/self/cputime_ns failed. Using getrusage().\nBenchmarking on 1 X 2297.19 MHz CPU\n2014/02/05-03:06:36\nDEBUG: Benchmark          Time(ns)    CPU(ns) Iterations\n--------------------------------------------------------\nDEBUG: BM_LongTest/64k      219496     221310       2268                                  \nDEBUG: BM_LongTest/256k     871541     880878        574                                  \nDEBUG: BM_LongTest/2M      7076118    7158361         72                                  \nDEBUG: BM_LongTest/16M    62749889   63467500          8                                  \nDEBUG: BM_LongTest/128M  894819972  902404000          1                                  \nDEBUG: BM_LongTest/256M 1793205019 1809572000          1  \n```\n\n\u7279\u5b9a\u306e\u5024\u3092\u6307\u5b9a\u3057\u3066\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u305f\u308a(Arg), \u30b9\u30ec\u30c3\u30c9\u306e\u6570\u3092\u6307\u5b9a\u3057\u3066\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u305f\u308a(Threads)\u3068\u51fa\u6765\u3066, \u5927\u4f53\u306e\u3053\u3068\u306f\u3067\u304d\u307e\u3059\u306d. \u30b9\u30c8\u30ec\u30b9\u30c6\u30b9\u30c8\u3084\u30e9\u30f3\u30c0\u30e0\u30c6\u30b9\u30c8\u306b\u3082\u4f7f\u3048\u305d\u3046\u3067\u3059!\n\n## \u540d\u524d\u304c\u3088\u304f\u306a\u3044\n\n\u3057\u304b\u3057\u30cd\u30fc\u30df\u30f3\u30b0\u30bb\u30f3\u30b9\u306f\u6b8b\u5ff5\u3067\u3059\u306d\u2026 \u3053\u308c\u3060\u3068\u6df7\u4e71\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3057\u691c\u7d22\u3067\u3082\u306a\u304b\u306a\u304b\u5f15\u3063\u304b\u304b\u3089\u306a\u3044\u3067\u3059\u306d.\n", "tags": ["C++", "benchmark"]}