{"context": "\n\n\u6982\u8981\n\uff08play2-auth\u306e\u524d\u6e96\u5099\u3068\u3057\u3066\u306e\u8a18\u4e8b\u306b\u306a\u308a\u307e\u3059\uff09\nstackable-controller\u3068\u306f\u3001Play2\u3067\u8a8d\u8a3c\u7cfb\u3092\u62c5\u3046play2-auth\u3092\u88cf\u3067\u652f\u3048\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n\uff08\u3061\u306a\u307f\u306b\u3001\u50d5\u306f\u4ed6\u3067\u3069\u3046\u4f7f\u3048\u308b\u306e\u304b\u306f\u3088\u304f\u308f\u304b\u3063\u3066\u306a\u3044\u3067\u3059\u3002\u3002logging\u51e6\u7406\u3092\u631f\u307f\u305f\u3044\u306a\u3089filter\u3067\u3044\u3051\u305d\u3046\u3067\u3059\u3057\u3001DB\u306e\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7ba1\u7406\u306fService\u5c64\u3067DI\u3067\u89e3\u6c7a\u51fa\u6765\u305d\u3046\u306a\u306e\u3067\u3002\uff09\n\n\u74b0\u5883\n\nPlay2.5\nstackable-controller 0.6.0\n\n\nElement\u3092\u7528\u610f\u3059\u308b\n\u307e\u305a\u306fStack\u306e\u5bfe\u8c61\u3068\u3059\u308bElement\u3092\u4f5c\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u30011/2\u306e\u78ba\u7387\u3067long\u5024\u3092\u751f\u6210\u3057\u3066\u8fd4\u3059\u3068\u3044\u3046\u51e6\u7406\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n\nMyStackLongElement.scala\nimport akka.actor.ActorSystem\nimport jp.t2v.lab.play2.stackc.{RequestAttributeKey, RequestWithAttributes, StackableController}\nimport play.api.mvc.{Controller, Result}\n\nimport scala.concurrent.Future\nimport scala.util.Random\n\ntrait MyStackLongElement extends StackableController {\n  self: Controller =>\n\n  val actorSystem: ActorSystem\n  val random: Random\n\n  private case object LongKey extends RequestAttributeKey[Long]\n\n  override def proceed[A](req: RequestWithAttributes[A])(f: RequestWithAttributes[A] => Future[Result]): Future[Result] = {\n    implicit val ctx = actorSystem.dispatcher\n    val long = random.nextLong()\n    val isFail = random.nextBoolean()\n    if(isFail) return Future{ BadRequest }\n\n    super.proceed(req.set(LongKey, long))(f)\n  }\n\n  def getStackedLong()(implicit req: RequestWithAttributes[_]): Long = req.get(LongKey).get\n}\n\n\n\u3053\u306eElement\u306f\u3001proceed\u306e\u4e2d\u3067req.set(LongKey, long)\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\u306a\u3093\u3089\u304b\u306e\u51e6\u7406\u7d50\u679c\u3092\u3053\u3053\u3067set\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u3059\u306d\u3002\n\uff08\u3061\u306a\u307f\u306b\u3001\u6761\u4ef6\u304c\u5408\u308f\u306a\u3044\u5834\u5408\u306f\u305d\u306e\u307e\u307eBadRequest\u306a\u3069\u306eResult\u3092\u8fd4\u3059\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\uff09\n\u5024\u3092set\u3057\u305f\u3053\u3068\u306b\u3088\u3063\u3066\u3001\u3053\u306eElement\u3092\u5b9f\u88c5\u3057\u305fcontroller\u306e\u4e2d\u3067\u306f\u3001getStackedLong\u3092\u901a\u3058\u3066req.get(LongKey).get\u3092\u884c\u3044\u5024\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nController\u3092\u5b9f\u88c5\u3059\u308b\n\nStackController.scala\nimport javax.inject.{Inject, Singleton}\n\nimport akka.actor.ActorSystem\nimport play.api.mvc.Controller\n\nimport scala.concurrent.{ExecutionContext, Future}\nimport scala.util.Random\n\n@Singleton\nclass StackController @Inject() (\n  override val actorSystem: ActorSystem,\n  override val random:Random = new Random\n) extends Controller with MyStackLongElement {\n\n  implicit val myExecutionContext: ExecutionContext = actorSystem.dispatcher\n\n  def message = AsyncStack { implicit req =>\n    Future{\n      val long = getStackedLong()\n      Ok(long.toString)\n    }\n  }\n}\n\n\n\u5148\u307b\u3069\u7528\u610f\u3057\u305fMyStackLongElement\u3092extends\u3057\u3066\u3001\u4efb\u610f\u306e\u5834\u6240\u3067getStackedLong\u3092\u547c\u3076\u3060\u3051\u3067\u3059\u3002\n\uff08\u306a\u304a\u3001\u3053\u3053\u3067\u306fRandom\u306f\u30c6\u30b9\u30c8\u3057\u3084\u3059\u3044\u3088\u3046\u306bDI\u3059\u308b\u5f62\u306b\u3057\u307e\u3057\u305f\u3002\uff09\nstackable-controller\u306e\u5f79\u5272\u306f\u3053\u308c\u3067\u307b\u307c\u5168\u90e8\u3068\u8a8d\u8b58\u3057\u3066\u3044\u307e\u3059\u3002\n\uff08cleanupOnSucceeded \u3042\u305f\u308a\u306ffilter\u306b\u5438\u53ce\u3055\u308c\u305d\u3046\u3002\u3002\u3002\u3002\uff09\n\n\u30c6\u30b9\u30c8\u3092\u66f8\u304f\nstackable-controller\u3092\u7528\u3044\u3066\u3044\u3066\u3082\u3001\u666e\u901a\u306eController\u3068\u540c\u3058\u3088\u3046\u306b\u30c6\u30b9\u30c8\u3092\u884c\u3048\u307e\u3059\u3002\n\nStackControllerTest.scala\nimport java.util.concurrent.TimeUnit\n\nimport akka.actor.ActorSystem\nimport akka.util.Timeout\nimport org.mockito.Mockito._\nimport org.scalatest.mock.MockitoSugar\nimport org.scalatest.{FunSpec, MustMatchers}\nimport play.api.mvc.Result\nimport play.api.test.{FakeRequest, Helpers}\n\nimport scala.concurrent.Future\nimport scala.util.Random\n\nclass StackControllerTest extends FunSpec with MustMatchers with MockitoSugar  {\n\n  describe(\"StackControllerTest\") {\n\n    implicit val timeout = Timeout(5000, TimeUnit.MILLISECONDS)\n\n    it(\"StackController success\"){\n      val randomMock = mock[Random]\n      when(randomMock.nextLong()) thenReturn 100L\n      when(randomMock.nextBoolean()) thenReturn false\n      val actorSystem = ActorSystem.apply()\n      val controller = new StackController(actorSystem, randomMock)\n\n      val result: Future[Result] = controller.message().apply(FakeRequest())\n      Helpers.contentAsString(result) mustBe \"100\"\n      Helpers.status(result) mustBe 200\n    }\n\n    it(\"StackController fail\"){\n      val randomMock = mock[Random]\n      when(randomMock.nextLong()) thenReturn 100L\n      when(randomMock.nextBoolean()) thenReturn true\n      val actorSystem = ActorSystem.apply()\n      val controller = new StackController(actorSystem, randomMock)\n\n      val result: Future[Result] = controller.message().apply(FakeRequest())\n      Helpers.status(result) mustBe 400\n      Helpers.contentAsString(result) mustBe \"\"\n    }\n  }\n}\n\n\nMyStackLongElement\u306f\u3001random\u30671/2\u3067\u5931\u6557\u3059\u308b\u3088\u3046\u306b\u4f5c\u3063\u3066\u3044\u307e\u3059\u3002\n\u306a\u306e\u3067\u30c6\u30b9\u30c8\u6642\u306b\u306fMock\u3092\u4f7f\u3063\u3066\u6210\u529f\u30fb\u5931\u6557\u3092\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3057\u3066\u52d5\u4f5c\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u306a\u308b\u3079\u304f\u30b0\u30ed\u30fc\u30d0\u30eb\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3088\u3046\u306b\u4f5c\u308c\u3070\u3001\u3053\u306e\u3088\u3046\u306b\u30c6\u30b9\u30c8\u3082\u5bb9\u6613\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u307e\u3068\u3081\n\u3053\u308c\u3060\u3051\u3060\u3068\u3042\u307e\u308a\u5b09\u3057\u3055\u304c\u308f\u304b\u3089\u306a\u3044\u3068\u601d\u3046\u306e\u3067\u3001play2-auth\u306e\u8a18\u4e8b\u3092\u5f85\u3064\u3079\u3057\u3002\n\n## \u6982\u8981\n\n\uff08play2-auth\u306e\u524d\u6e96\u5099\u3068\u3057\u3066\u306e\u8a18\u4e8b\u306b\u306a\u308a\u307e\u3059\uff09\n\nstackable-controller\u3068\u306f\u3001Play2\u3067\u8a8d\u8a3c\u7cfb\u3092\u62c5\u3046play2-auth\u3092\u88cf\u3067\u652f\u3048\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n\n\uff08\u3061\u306a\u307f\u306b\u3001\u50d5\u306f\u4ed6\u3067\u3069\u3046\u4f7f\u3048\u308b\u306e\u304b\u306f\u3088\u304f\u308f\u304b\u3063\u3066\u306a\u3044\u3067\u3059\u3002\u3002logging\u51e6\u7406\u3092\u631f\u307f\u305f\u3044\u306a\u3089filter\u3067\u3044\u3051\u305d\u3046\u3067\u3059\u3057\u3001DB\u306e\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7ba1\u7406\u306fService\u5c64\u3067DI\u3067\u89e3\u6c7a\u51fa\u6765\u305d\u3046\u306a\u306e\u3067\u3002\uff09\n\n## \u74b0\u5883\n\n- Play2.5\n- stackable-controller 0.6.0\n\n## Element\u3092\u7528\u610f\u3059\u308b\n\n\u307e\u305a\u306fStack\u306e\u5bfe\u8c61\u3068\u3059\u308bElement\u3092\u4f5c\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u30011/2\u306e\u78ba\u7387\u3067long\u5024\u3092\u751f\u6210\u3057\u3066\u8fd4\u3059\u3068\u3044\u3046\u51e6\u7406\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n\n```scala:MyStackLongElement.scala\nimport akka.actor.ActorSystem\nimport jp.t2v.lab.play2.stackc.{RequestAttributeKey, RequestWithAttributes, StackableController}\nimport play.api.mvc.{Controller, Result}\n\nimport scala.concurrent.Future\nimport scala.util.Random\n\ntrait MyStackLongElement extends StackableController {\n  self: Controller =>\n\n  val actorSystem: ActorSystem\n  val random: Random\n\n  private case object LongKey extends RequestAttributeKey[Long]\n\n  override def proceed[A](req: RequestWithAttributes[A])(f: RequestWithAttributes[A] => Future[Result]): Future[Result] = {\n    implicit val ctx = actorSystem.dispatcher\n    val long = random.nextLong()\n    val isFail = random.nextBoolean()\n    if(isFail) return Future{ BadRequest }\n\n    super.proceed(req.set(LongKey, long))(f)\n  }\n\n  def getStackedLong()(implicit req: RequestWithAttributes[_]): Long = req.get(LongKey).get\n}\n```\n\n\u3053\u306eElement\u306f\u3001proceed\u306e\u4e2d\u3067`req.set(LongKey, long)`\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\u306a\u3093\u3089\u304b\u306e\u51e6\u7406\u7d50\u679c\u3092\u3053\u3053\u3067set\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u3059\u306d\u3002\n\uff08\u3061\u306a\u307f\u306b\u3001\u6761\u4ef6\u304c\u5408\u308f\u306a\u3044\u5834\u5408\u306f\u305d\u306e\u307e\u307eBadRequest\u306a\u3069\u306eResult\u3092\u8fd4\u3059\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\uff09\n\n\u5024\u3092set\u3057\u305f\u3053\u3068\u306b\u3088\u3063\u3066\u3001\u3053\u306eElement\u3092\u5b9f\u88c5\u3057\u305fcontroller\u306e\u4e2d\u3067\u306f\u3001getStackedLong\u3092\u901a\u3058\u3066`req.get(LongKey).get`\u3092\u884c\u3044\u5024\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n## Controller\u3092\u5b9f\u88c5\u3059\u308b\n\n```scala:StackController.scala\nimport javax.inject.{Inject, Singleton}\n\nimport akka.actor.ActorSystem\nimport play.api.mvc.Controller\n\nimport scala.concurrent.{ExecutionContext, Future}\nimport scala.util.Random\n\n@Singleton\nclass StackController @Inject() (\n  override val actorSystem: ActorSystem,\n  override val random:Random = new Random\n) extends Controller with MyStackLongElement {\n\n  implicit val myExecutionContext: ExecutionContext = actorSystem.dispatcher\n\n  def message = AsyncStack { implicit req =>\n    Future{\n      val long = getStackedLong()\n      Ok(long.toString)\n    }\n  }\n}\n```\n\n\u5148\u307b\u3069\u7528\u610f\u3057\u305fMyStackLongElement\u3092extends\u3057\u3066\u3001\u4efb\u610f\u306e\u5834\u6240\u3067getStackedLong\u3092\u547c\u3076\u3060\u3051\u3067\u3059\u3002\n\uff08\u306a\u304a\u3001\u3053\u3053\u3067\u306fRandom\u306f\u30c6\u30b9\u30c8\u3057\u3084\u3059\u3044\u3088\u3046\u306bDI\u3059\u308b\u5f62\u306b\u3057\u307e\u3057\u305f\u3002\uff09\n\nstackable-controller\u306e\u5f79\u5272\u306f\u3053\u308c\u3067\u307b\u307c\u5168\u90e8\u3068\u8a8d\u8b58\u3057\u3066\u3044\u307e\u3059\u3002\n\uff08`cleanupOnSucceeded` \u3042\u305f\u308a\u306ffilter\u306b\u5438\u53ce\u3055\u308c\u305d\u3046\u3002\u3002\u3002\u3002\uff09\n\n## \u30c6\u30b9\u30c8\u3092\u66f8\u304f\n\nstackable-controller\u3092\u7528\u3044\u3066\u3044\u3066\u3082\u3001\u666e\u901a\u306eController\u3068\u540c\u3058\u3088\u3046\u306b\u30c6\u30b9\u30c8\u3092\u884c\u3048\u307e\u3059\u3002\n\n```scala:StackControllerTest.scala\nimport java.util.concurrent.TimeUnit\n\nimport akka.actor.ActorSystem\nimport akka.util.Timeout\nimport org.mockito.Mockito._\nimport org.scalatest.mock.MockitoSugar\nimport org.scalatest.{FunSpec, MustMatchers}\nimport play.api.mvc.Result\nimport play.api.test.{FakeRequest, Helpers}\n\nimport scala.concurrent.Future\nimport scala.util.Random\n\nclass StackControllerTest extends FunSpec with MustMatchers with MockitoSugar  {\n\n  describe(\"StackControllerTest\") {\n\n    implicit val timeout = Timeout(5000, TimeUnit.MILLISECONDS)\n\n    it(\"StackController success\"){\n      val randomMock = mock[Random]\n      when(randomMock.nextLong()) thenReturn 100L\n      when(randomMock.nextBoolean()) thenReturn false\n      val actorSystem = ActorSystem.apply()\n      val controller = new StackController(actorSystem, randomMock)\n\n      val result: Future[Result] = controller.message().apply(FakeRequest())\n      Helpers.contentAsString(result) mustBe \"100\"\n      Helpers.status(result) mustBe 200\n    }\n\n    it(\"StackController fail\"){\n      val randomMock = mock[Random]\n      when(randomMock.nextLong()) thenReturn 100L\n      when(randomMock.nextBoolean()) thenReturn true\n      val actorSystem = ActorSystem.apply()\n      val controller = new StackController(actorSystem, randomMock)\n\n      val result: Future[Result] = controller.message().apply(FakeRequest())\n      Helpers.status(result) mustBe 400\n      Helpers.contentAsString(result) mustBe \"\"\n    }\n  }\n}\n```\n\nMyStackLongElement\u306f\u3001random\u30671/2\u3067\u5931\u6557\u3059\u308b\u3088\u3046\u306b\u4f5c\u3063\u3066\u3044\u307e\u3059\u3002\n\u306a\u306e\u3067\u30c6\u30b9\u30c8\u6642\u306b\u306fMock\u3092\u4f7f\u3063\u3066\u6210\u529f\u30fb\u5931\u6557\u3092\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3057\u3066\u52d5\u4f5c\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u306a\u308b\u3079\u304f\u30b0\u30ed\u30fc\u30d0\u30eb\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3088\u3046\u306b\u4f5c\u308c\u3070\u3001\u3053\u306e\u3088\u3046\u306b\u30c6\u30b9\u30c8\u3082\u5bb9\u6613\u306b\u306a\u308a\u307e\u3059\u3002\n\n## \u307e\u3068\u3081\n\n\u3053\u308c\u3060\u3051\u3060\u3068\u3042\u307e\u308a\u5b09\u3057\u3055\u304c\u308f\u304b\u3089\u306a\u3044\u3068\u601d\u3046\u306e\u3067\u3001play2-auth\u306e\u8a18\u4e8b\u3092\u5f85\u3064\u3079\u3057\u3002\n", "tags": ["PlayFramework", "stackable-controller"]}