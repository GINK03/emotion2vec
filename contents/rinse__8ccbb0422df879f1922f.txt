{"context": " More than 1 year has passed since last update.\u3053\u3093\u3070\u3093\u306f\u3002\n\u4eca\u65e5\u306f\u30e1\u30bf\u8ff0\u8a9e\u95a2\u6570\u3092\u8ad6\u7406\u64cd\u4f5c\u3059\u308b\u30e1\u30bf\u95a2\u6570\u3092\u4f5c\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\u3067\u3059\u304c\u3001\u5185\u5bb9\u7684\u306b\u306f\u524d\u56de\u3068\u4f3c\u305f\u611f\u3058\u3067\u3001\u30e1\u30bf\u95a2\u6570\u3092\u751f\u6210\u3059\u308b\u30e1\u30bf\u95a2\u6570\u3092\u4f5c\u308b\u5f62\u306b\u306a\u308a\u307e\u3059\u3002\n\u306a\u304a\u3001\u30a8\u30a4\u30ea\u30a2\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3044\u308d\u3044\u308d\u3002\u3067\u7d39\u4ecb\u3057\u305f\u30e1\u30bf\u95a2\u6570\u304c\u767b\u5834\u3057\u307e\u3059\u306e\u3067\u3001\u305c\u3072\u4f75\u305b\u3066\u304a\u8aad\u307f\u3044\u305f\u3060\u3051\u308b\u3068\u5b09\u3057\u3044\u3067\u3059\u3002\n\uff0a\uff0a\uff0a\n\n\u3064\u307e\u308a\u306a\u3093\u3058\u3083\u3089\u307b\u3044\uff1f\n\n\u30e1\u30bf\u8ff0\u8a9e\u95a2\u6570\u3068\u3044\u3046\u306e\u306f\u30e1\u30bf\u95a2\u6570\u306e\u8ff0\u8a9e\u95a2\u6570\u3067\u3059\u3002\ntemplate < \n  template < class > class Pred,\n  class... Args >\nstruct meta_count_if;\n\n// std::is_void\u3092\u8ff0\u8a9e\u95a2\u6570\u3068\u3057\u3066\u4f7f\u3046\nmeta_count_if< std::is_void, int, char >::value; // 0\nmeta_count_if < std::is_void, int, void, char, void >::value; // 2\n\nstl\u3067\u3082\u6bd4\u8f03\u7684\u3088\u304f\u304a\u4e16\u8a71\u306b\u306a\u308bcount_if\u306e\u30e1\u30bf\u95a2\u6570\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n(stl\u306e\u3082\u306e\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u6307\u5b9a\u3059\u308b\u306e\u3067\u578b\u30ea\u30b9\u30c8\u3068\u3057\u3066std::tuple\u3092\u4f7f\u3063\u305f\u65b9\u304c\u826f\u3044\u304b\u3068\u3082\u601d\u3044\u307e\u3057\u305f\u304c\u2026\u2026)\n\u3053\u306ePred\u306b\u7a81\u3063\u8fbc\u3080\u30e1\u30bf\u95a2\u6570\u304c\u30e1\u30bf\u8ff0\u8a9e\u95a2\u6570\u3067\u3059\u3002\u3061\u306a\u307f\u306bcount_if\u307f\u305f\u3044\u306a\u8ff0\u8a9e\u3092\u53d6\u308b\u95a2\u6570\u3092\u9ad8\u968e\u95a2\u6570\u3068\u3044\u3044\u307e\u3059\u3002\u306a\u306e\u3067\u3001\u3053\u3053\u3067\u306f\u4fbf\u5b9c\u7684\u306bmeta_count_if\u307f\u305f\u3044\u306a\u30e1\u30bf\u95a2\u6570\u3092\u30e1\u30bf\u9ad8\u968e\u95a2\u6570\u3068\u547c\u3076\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\uff0a\uff0a\uff0a\n\n\u3064\u307e\u308a\u306a\u3093\u3058\u3083\u3089\u307b\u3044\uff1f\n\n\u30e1\u30bf\u8ff0\u8a9e\u95a2\u6570\u3092\u8ad6\u7406\u64cd\u4f5c\u3068\u3044\u3046\u306e\u306f\u3001\u3064\u307e\u308a\u3001\u8ff0\u8a9e\u95a2\u6570\u306e\u5410\u304f\u5024\u3092\u64cd\u4f5c\u3057\u3066\u65b0\u3057\u3044\u8ff0\u8a9e\u95a2\u6570\u3092\u4f5c\u3063\u3066\u3084\u308d\u3046\u3058\u3083\u306a\u3044\u306e\u3001\u3068\u3044\u3046\u8da3\u65e8\u306e\u3082\u306e\u3067\u3059\u3002\u4f8b\u3048\u3070\u3001std::is_integral\u3092\u5426\u5b9a\u3057\u305f\u30e1\u30bf\u95a2\u6570\u306fis_not_integral\u3067\u3059\u3002\ntemplate < class Ty >\nusing is_not_integral = typename pred_not < std::is_integral >::template type < Ty >;\n\n\u3053\u3093\u306a\u5f62\u306b\u3057\u307e\u3059\u3002\n\u7c21\u5358\u306a\u306e\u3067\u30b5\u30af\u30c3\u3068pred_not\u3092\u4f5c\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u3087\u3046\u3002\n//\n// meta-predicate-not\ntemplate <\n  template < class > class Pred >\nstruct pred_not\n{\n  template < class Ty >\n  using type = meta_not < Pred < Ty > >;\n};\n\n\u306f\u3044\u3002\nmeta_not\u306f\u30a8\u30a4\u30ea\u30a2\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3044\u308d\u3044\u308d\u3002\u3067\u7d39\u4ecb\u3057\u305f\u95a2\u6570\u3067\u3001\u8ad6\u7406\u5426\u5b9a\u3092\u3059\u308b\u9ad8\u968e\u30e1\u30bf\u95a2\u6570\u3067\u3059\u3002std::true_type\u304bstd::false_type\u3092\u53d7\u3051\u53d6\u3063\u3066\u53cd\u8ee2\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\u540c\u69d8\u306b\u3001pred_or\u3068pred_and\u3082\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\u308f\u305f\u3057\u306e\u529b\u4e0d\u8db3\u3067\u5c11\u3057\u9577\u3063\u305f\u3089\u3057\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u306e\u3067\u3001\u5c11\u3057\u3046\u3093\u3056\u308a\u3057\u3061\u3083\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n// c++14\u306estd::conditional_t\u3068\u306f\u9055\u3046\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\ntemplate < class Ty, class Then, class Else >\nusing conditional_t = typename std::conditional < Ty::value, Then, Else >::type;\n\n//\n// meta-predicate-or\ntemplate <\n  template < class > class Head,\n  template < class > class... Body >\nstruct pred_or\n{\n  template < class Ty >\n  using type =\n    conditional_t <\n      Head < Ty >,\n      std::true_type,\n      typename pred_or < Body... >::template type < Ty >\n    >;\n};\ntemplate <\n  template < class > class Head >\nstruct pred_or < Head >\n{\n  template < class Ty >\n  using type = Head < Ty >;\n};\n\n//\n// meta-predicate-and\ntemplate <\n  template < class > class Head,\n  template < class > class... Body >\nstruct pred_and\n{\n  //\n  // pred_or\u3092\u5229\u7528\u3057\u3066\u66f8\u304d\u305f\u304b\u3063\u305f\u3051\u3069\u632b\u6298\u3057\u3066\u30b3\u30d4\u30da\u3057\u305f\u75d5\u8de1\n  template < class Ty >\n  using type =\n    conditional_t <\n      meta_not < Head < Ty > >,\n      meta_not < std::true_type >,\n      typename pred_and < Body... >::template type < Ty >\n    >;\n};\ntemplate <\n  template < class > class Head >\nstruct pred_and < Head >\n{\n  template < class Ty >\n  using type = Head < Ty >;\n};\n\n\u3053\u308c\u3067pred_or\u3068pred_and\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\u3053\u308c\u3092\u4f7f\u3048\u3070\u3001\u4f8b\u3048\u3070\ntemplate < class Ty >\nusing is_const_integral = typename pred_and < std::is_const, std::is_integral >::template type < Ty >;\n\n\u306e\u3088\u3046\u306a\u8a18\u8ff0\u3067const\u304b\u3064integral\u306e\u3082\u306e\u306e\u307f\u304c\u30de\u30c3\u30c1\u3059\u308b\u30e1\u30bf\u95a2\u6570\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u6ec5\u591a\u306b\u4f7f\u3046\u3053\u3068\u306f\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u2026\u2026\u3002\n\u4f59\u8ac7\u3067\u3059\u304c\u3001\u3053\u3046\u3044\u3046\u3082\u306e\u3092\u4f5c\u308b\u3068\u304d\u306b\u610f\u5916\u306b\u306f\u307e\u308a\u304c\u3061\u306a\u306e\u304ccv\u4fee\u98fe\u5b50\u3068\u53c2\u7167\u3067\u3059\u3002\n\u308f\u305f\u3057\u306f\u57fa\u672c\u7684\u306b\u306fremove_rcv\u3068\u3044\u3046\u30e1\u30bf\u95a2\u6570(\u53c2\u7167\u3068cv\u4fee\u98fe\u5b50\u3092\u53d6\u3063\u6255\u3044\u307e\u3059)\u3092\u4f5c\u3063\u3066\u53d6\u3063\u6255\u3044\u307e\u3059\u304c\u3001const\u3060\u3063\u305f\u308a\u53c2\u7167\u3060\u3063\u305f\u308a\u3092\u6761\u4ef6\u306b\u7d44\u307f\u8fbc\u3080\u5834\u5408\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u306d\u3002\n\u3053\u3093\u3070\u3093\u306f\u3002\n\n\n\u4eca\u65e5\u306f\u30e1\u30bf\u8ff0\u8a9e\u95a2\u6570\u3092\u8ad6\u7406\u64cd\u4f5c\u3059\u308b\u30e1\u30bf\u95a2\u6570\u3092\u4f5c\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\u3067\u3059\u304c\u3001\u5185\u5bb9\u7684\u306b\u306f[\u524d\u56de](http://qiita.com/rinse_/items/12b0ac8951e6778c7abb)\u3068\u4f3c\u305f\u611f\u3058\u3067\u3001\u30e1\u30bf\u95a2\u6570\u3092\u751f\u6210\u3059\u308b\u30e1\u30bf\u95a2\u6570\u3092\u4f5c\u308b\u5f62\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u306a\u304a\u3001[\u30a8\u30a4\u30ea\u30a2\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3044\u308d\u3044\u308d\u3002](http://qiita.com/rinse_/items/1fb1ddcc14bf8d530625)\u3067\u7d39\u4ecb\u3057\u305f\u30e1\u30bf\u95a2\u6570\u304c\u767b\u5834\u3057\u307e\u3059\u306e\u3067\u3001\u305c\u3072\u4f75\u305b\u3066\u304a\u8aad\u307f\u3044\u305f\u3060\u3051\u308b\u3068\u5b09\u3057\u3044\u3067\u3059\u3002\n\n\uff0a\uff0a\uff0a\n\n* \u3064\u307e\u308a\u306a\u3093\u3058\u3083\u3089\u307b\u3044\uff1f\n\n\u30e1\u30bf\u8ff0\u8a9e\u95a2\u6570\u3068\u3044\u3046\u306e\u306f\u30e1\u30bf\u95a2\u6570\u306e\u8ff0\u8a9e\u95a2\u6570\u3067\u3059\u3002\n\n```\ntemplate < \n  template < class > class Pred,\n  class... Args >\nstruct meta_count_if;\n\n// std::is_void\u3092\u8ff0\u8a9e\u95a2\u6570\u3068\u3057\u3066\u4f7f\u3046\nmeta_count_if< std::is_void, int, char >::value; // 0\nmeta_count_if < std::is_void, int, void, char, void >::value; // 2\n```\n\nstl\u3067\u3082\u6bd4\u8f03\u7684\u3088\u304f\u304a\u4e16\u8a71\u306b\u306a\u308bcount_if\u306e\u30e1\u30bf\u95a2\u6570\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n(stl\u306e\u3082\u306e\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u6307\u5b9a\u3059\u308b\u306e\u3067\u578b\u30ea\u30b9\u30c8\u3068\u3057\u3066std::tuple\u3092\u4f7f\u3063\u305f\u65b9\u304c\u826f\u3044\u304b\u3068\u3082\u601d\u3044\u307e\u3057\u305f\u304c\u2026\u2026)\n\u3053\u306ePred\u306b\u7a81\u3063\u8fbc\u3080\u30e1\u30bf\u95a2\u6570\u304c\u30e1\u30bf\u8ff0\u8a9e\u95a2\u6570\u3067\u3059\u3002\u3061\u306a\u307f\u306bcount_if\u307f\u305f\u3044\u306a\u8ff0\u8a9e\u3092\u53d6\u308b\u95a2\u6570\u3092\u9ad8\u968e\u95a2\u6570\u3068\u3044\u3044\u307e\u3059\u3002\u306a\u306e\u3067\u3001\u3053\u3053\u3067\u306f\u4fbf\u5b9c\u7684\u306bmeta_count_if\u307f\u305f\u3044\u306a\u30e1\u30bf\u95a2\u6570\u3092\u30e1\u30bf\u9ad8\u968e\u95a2\u6570\u3068\u547c\u3076\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n\uff0a\uff0a\uff0a\n\n* \u3064\u307e\u308a\u306a\u3093\u3058\u3083\u3089\u307b\u3044\uff1f\n\n\u30e1\u30bf\u8ff0\u8a9e\u95a2\u6570\u3092\u8ad6\u7406\u64cd\u4f5c\u3068\u3044\u3046\u306e\u306f\u3001\u3064\u307e\u308a\u3001\u8ff0\u8a9e\u95a2\u6570\u306e\u5410\u304f\u5024\u3092\u64cd\u4f5c\u3057\u3066\u65b0\u3057\u3044\u8ff0\u8a9e\u95a2\u6570\u3092\u4f5c\u3063\u3066\u3084\u308d\u3046\u3058\u3083\u306a\u3044\u306e\u3001\u3068\u3044\u3046\u8da3\u65e8\u306e\u3082\u306e\u3067\u3059\u3002\u4f8b\u3048\u3070\u3001std::is_integral\u3092\u5426\u5b9a\u3057\u305f\u30e1\u30bf\u95a2\u6570\u306fis_not_integral\u3067\u3059\u3002\n\n```\ntemplate < class Ty >\nusing is_not_integral = typename pred_not < std::is_integral >::template type < Ty >;\n```\n\n\u3053\u3093\u306a\u5f62\u306b\u3057\u307e\u3059\u3002\n\u7c21\u5358\u306a\u306e\u3067\u30b5\u30af\u30c3\u3068pred_not\u3092\u4f5c\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u3087\u3046\u3002\n\n```\n//\n// meta-predicate-not\ntemplate <\n  template < class > class Pred >\nstruct pred_not\n{\n  template < class Ty >\n  using type = meta_not < Pred < Ty > >;\n};\n```\n\n\u306f\u3044\u3002\nmeta_not\u306f[\u30a8\u30a4\u30ea\u30a2\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3044\u308d\u3044\u308d\u3002](http://qiita.com/rinse_/items/1fb1ddcc14bf8d530625)\u3067\u7d39\u4ecb\u3057\u305f\u95a2\u6570\u3067\u3001\u8ad6\u7406\u5426\u5b9a\u3092\u3059\u308b\u9ad8\u968e\u30e1\u30bf\u95a2\u6570\u3067\u3059\u3002std::true_type\u304bstd::false_type\u3092\u53d7\u3051\u53d6\u3063\u3066\u53cd\u8ee2\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n\u540c\u69d8\u306b\u3001pred_or\u3068pred_and\u3082\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\u308f\u305f\u3057\u306e\u529b\u4e0d\u8db3\u3067\u5c11\u3057\u9577\u3063\u305f\u3089\u3057\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u306e\u3067\u3001\u5c11\u3057\u3046\u3093\u3056\u308a\u3057\u3061\u3083\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n```\n// c++14\u306estd::conditional_t\u3068\u306f\u9055\u3046\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\ntemplate < class Ty, class Then, class Else >\nusing conditional_t = typename std::conditional < Ty::value, Then, Else >::type;\n\n//\n// meta-predicate-or\ntemplate <\n  template < class > class Head,\n  template < class > class... Body >\nstruct pred_or\n{\n  template < class Ty >\n  using type =\n    conditional_t <\n      Head < Ty >,\n      std::true_type,\n      typename pred_or < Body... >::template type < Ty >\n    >;\n};\ntemplate <\n  template < class > class Head >\nstruct pred_or < Head >\n{\n  template < class Ty >\n  using type = Head < Ty >;\n};\n\n//\n// meta-predicate-and\ntemplate <\n  template < class > class Head,\n  template < class > class... Body >\nstruct pred_and\n{\n  //\n  // pred_or\u3092\u5229\u7528\u3057\u3066\u66f8\u304d\u305f\u304b\u3063\u305f\u3051\u3069\u632b\u6298\u3057\u3066\u30b3\u30d4\u30da\u3057\u305f\u75d5\u8de1\n  template < class Ty >\n  using type =\n    conditional_t <\n      meta_not < Head < Ty > >,\n      meta_not < std::true_type >,\n      typename pred_and < Body... >::template type < Ty >\n    >;\n};\ntemplate <\n  template < class > class Head >\nstruct pred_and < Head >\n{\n  template < class Ty >\n  using type = Head < Ty >;\n};\n```\n\n\u3053\u308c\u3067pred_or\u3068pred_and\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\u3053\u308c\u3092\u4f7f\u3048\u3070\u3001\u4f8b\u3048\u3070\n\n```\ntemplate < class Ty >\nusing is_const_integral = typename pred_and < std::is_const, std::is_integral >::template type < Ty >;\n```\n\n\u306e\u3088\u3046\u306a\u8a18\u8ff0\u3067const\u304b\u3064integral\u306e\u3082\u306e\u306e\u307f\u304c\u30de\u30c3\u30c1\u3059\u308b\u30e1\u30bf\u95a2\u6570\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u6ec5\u591a\u306b\u4f7f\u3046\u3053\u3068\u306f\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u2026\u2026\u3002\n\n\u4f59\u8ac7\u3067\u3059\u304c\u3001\u3053\u3046\u3044\u3046\u3082\u306e\u3092\u4f5c\u308b\u3068\u304d\u306b\u610f\u5916\u306b\u306f\u307e\u308a\u304c\u3061\u306a\u306e\u304ccv\u4fee\u98fe\u5b50\u3068\u53c2\u7167\u3067\u3059\u3002\n\u308f\u305f\u3057\u306f\u57fa\u672c\u7684\u306b\u306fremove_rcv\u3068\u3044\u3046\u30e1\u30bf\u95a2\u6570(\u53c2\u7167\u3068cv\u4fee\u98fe\u5b50\u3092\u53d6\u3063\u6255\u3044\u307e\u3059)\u3092\u4f5c\u3063\u3066\u53d6\u3063\u6255\u3044\u307e\u3059\u304c\u3001const\u3060\u3063\u305f\u308a\u53c2\u7167\u3060\u3063\u305f\u308a\u3092\u6761\u4ef6\u306b\u7d44\u307f\u8fbc\u3080\u5834\u5408\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u306d\u3002\n", "tags": ["C++11", "C++"]}