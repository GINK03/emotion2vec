{"context": "\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u95a2\u6570\u5185\u3067\u6587\u5b57\u3084\u6587\u5b57\u5217\u3092\u6253\u3061\u305f\u3044\u3068\u304d\u3068\u304b\u306b\u3064\u304b\u3046\u3002\u3069\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u3082\u5927\u4f530\uff5e127\u306fascii\u306b\u6e96\u3058\u3066\u3044\u308b\u306e\u3067\u3053\u306e\u7bc4\u56f2\u3067\u306f\u6c4e\u7528\u6027\u306f\u72ed\u304f\u306a\u3044\u306f\u305a\u3002\n\u6587\u5b57\u5217\u306e\u6271\u3044\u3082\u3082\u3046\u5c11\u3057\u3046\u307e\u3044\u3084\u308a\u65b9\u304c\u3042\u308a\u305d\u3046\u3060\u3051\u3069\u601d\u3044\u3064\u304b\u306a\u304b\u3063\u305f\u3002\ntemplate<class Char, class Traits>\nstd::basic_ostream<Char, Traits>& operator<<(\n    std::basic_ostream<Char, Traits>& os, my_manip)\n{\n  // return os << \"manip\";\n  return os\n    << ascii_traits<Char>::m << ascii_traits<Char>::a\n    << ascii_traits<Char>::n << ascii_traits<Char>::i\n    << ascii_traits<Char>::p;\n}\n\n\u9811\u5f35\u3063\u3066\u8ee2\u5199\u3057\u305f\u7f8e\u3057\u3055\u306e\u304b\u3051\u3089\u3082\u306a\u3044\u5b9f\u88c5\u3002\u30b9\u30da\u30eb\u30df\u30b9\u304c\u3042\u3063\u305f\u3089\u3054\u3081\u3093\u306a\u3055\u3044\u3002\n\u8a18\u53f7\u306b\u3064\u3044\u3066\u81ea\u5206\u3067\u3064\u3051\u305f\u3044\u540d\u524d\u304c\u3042\u308c\u3070\u3053\u306e\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3059\u308b\u3068\u697d\u306b\u4f5c\u308c\u308b\u3002\ntemplate<class Char>\nstruct ascii_traits\n{\npublic:\n  using char_type = Char;\n  using int_type = typename std::char_traits<char_type>::int_type;\n  static constexpr char_type\n    // ascii control characters\n    // small\n    nul = 0, soh = 1, stx = 2, etx = 3,\n    eot = 4, enq = 5, ack = 6, bel = 7,\n    bs = 8, ht = 9, lf = 10, vt = 11,\n    ff = 12, ct = 13, so = 14, si = 15,\n    dle = 16, dc1 = 17, dc2 = 18, dc3 = 19,\n    dc4 = 20, nak = 21, syn = 22, etb = 23,\n    can = 24, em = 25, sub = 26, esc = 27,\n    fs = 28, gs = 29, rs = 30, us = 31,\n\n    // captal\n    NUL = 0, SOH = 1, STX = 2, ETX = 3,\n    EOT = 4, ENQ = 5, ACK = 6, BEL = 7,\n    BS = 8, HT = 9, LF = 10, VT = 11,\n    FF = 12, CT = 13, SO = 14, SI = 15,\n    DLE = 16, DC1 = 17, DC2 = 18, DC3 = 19,\n    DC4 = 20, NAK = 21, SYN = 22, ETB = 23,\n    CAN = 24, EM = 25, SUB = 26, ESC = 27,\n    FS = 28, GS = 29, RS = 30, US = 31,\n\n    // ascii printable characters\n    space = 32, exclamation_mark = 33, double_quotes = 34, number = 35,\n    dollar = 36, procenttecken = 37, ampersand = 38, single_quote = 39,\n    open_bracket = 40, open_parenthesis = open_bracket,\n    close_bracket = 41, close_parenthesis = close_bracket,\n    asterick = 42, plus = 43, comma = 44, hyphen = 45,\n    period = 46, dot = period, full_stop = period,\n    slash = 47, divide = slash,\n    zero = 48, one = 49, two = 50, three = 51,\n    four = 52, five = 53, six = 54, seven = 55,\n    eight = 56, nine = 57, colon = 58, semicolon = 59,\n    less_than = 60, open_angled_bracket = less_than, equals = 61,\n    greater_than = 62, close_angled_bracket = greater_than,\n    question_mark = 63, at_symbol = 64,\n    A = 65, B = 66, C = 67, D = 68,\n    E = 69, F = 70, G = 71, H = 72,\n    I = 73, J = 74, K = 75, L = 76,\n    M = 77, N = 78, O = 79, P = 80,\n    Q = 81, R = 82, S = 83, T = 84,\n    U = 85, V = 86, W = 87, X = 88, Y = 89, Z = 90,\n    opening_bracket = 91, backslash = 92, closing_bracket = 93,\n    caret = 94, circumflex = caret, underscore = 95, grave_accent = 96,\n    a = 97, b = 98, c = 99, d = 100,\n    e = 101, f = 102, g = 103, h = 104,\n    i = 105, j = 106, k = 107, l = 108,\n    m = 109, n = 110, o = 111, p = 112,\n    q = 113, r = 114, s = 115, t = 116,\n    u = 117, v = 118, w = 119, x = 120, y = 121, z = 122,\n    opening_brace = 123, virtical_bar = 124, closing_brace = 125,\n    equivalency_sign = 126, tilde = equivalency_sign,\n    _delete = 127;\n};\n\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u95a2\u6570\u5185\u3067\u6587\u5b57\u3084\u6587\u5b57\u5217\u3092\u6253\u3061\u305f\u3044\u3068\u304d\u3068\u304b\u306b\u3064\u304b\u3046\u3002\u3069\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u3082\u5927\u4f530\uff5e127\u306fascii\u306b\u6e96\u3058\u3066\u3044\u308b\u306e\u3067\u3053\u306e\u7bc4\u56f2\u3067\u306f\u6c4e\u7528\u6027\u306f\u72ed\u304f\u306a\u3044\u306f\u305a\u3002\n\u6587\u5b57\u5217\u306e\u6271\u3044\u3082\u3082\u3046\u5c11\u3057\u3046\u307e\u3044\u3084\u308a\u65b9\u304c\u3042\u308a\u305d\u3046\u3060\u3051\u3069\u601d\u3044\u3064\u304b\u306a\u304b\u3063\u305f\u3002\n\n```cpp\ntemplate<class Char, class Traits>\nstd::basic_ostream<Char, Traits>& operator<<(\n    std::basic_ostream<Char, Traits>& os, my_manip)\n{\n  // return os << \"manip\";\n  return os\n    << ascii_traits<Char>::m << ascii_traits<Char>::a\n    << ascii_traits<Char>::n << ascii_traits<Char>::i\n    << ascii_traits<Char>::p;\n}\n```\n\n\u9811\u5f35\u3063\u3066\u8ee2\u5199\u3057\u305f\u7f8e\u3057\u3055\u306e\u304b\u3051\u3089\u3082\u306a\u3044\u5b9f\u88c5\u3002\u30b9\u30da\u30eb\u30df\u30b9\u304c\u3042\u3063\u305f\u3089\u3054\u3081\u3093\u306a\u3055\u3044\u3002\n\u8a18\u53f7\u306b\u3064\u3044\u3066\u81ea\u5206\u3067\u3064\u3051\u305f\u3044\u540d\u524d\u304c\u3042\u308c\u3070\u3053\u306e\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3059\u308b\u3068\u697d\u306b\u4f5c\u308c\u308b\u3002\n\n```cpp\ntemplate<class Char>\nstruct ascii_traits\n{\npublic:\n  using char_type = Char;\n  using int_type = typename std::char_traits<char_type>::int_type;\n  static constexpr char_type\n    // ascii control characters\n    // small\n    nul = 0, soh = 1, stx = 2, etx = 3,\n    eot = 4, enq = 5, ack = 6, bel = 7,\n    bs = 8, ht = 9, lf = 10, vt = 11,\n    ff = 12, ct = 13, so = 14, si = 15,\n    dle = 16, dc1 = 17, dc2 = 18, dc3 = 19,\n    dc4 = 20, nak = 21, syn = 22, etb = 23,\n    can = 24, em = 25, sub = 26, esc = 27,\n    fs = 28, gs = 29, rs = 30, us = 31,\n\n    // captal\n    NUL = 0, SOH = 1, STX = 2, ETX = 3,\n    EOT = 4, ENQ = 5, ACK = 6, BEL = 7,\n    BS = 8, HT = 9, LF = 10, VT = 11,\n    FF = 12, CT = 13, SO = 14, SI = 15,\n    DLE = 16, DC1 = 17, DC2 = 18, DC3 = 19,\n    DC4 = 20, NAK = 21, SYN = 22, ETB = 23,\n    CAN = 24, EM = 25, SUB = 26, ESC = 27,\n    FS = 28, GS = 29, RS = 30, US = 31,\n\n    // ascii printable characters\n    space = 32, exclamation_mark = 33, double_quotes = 34, number = 35,\n    dollar = 36, procenttecken = 37, ampersand = 38, single_quote = 39,\n    open_bracket = 40, open_parenthesis = open_bracket,\n    close_bracket = 41, close_parenthesis = close_bracket,\n    asterick = 42, plus = 43, comma = 44, hyphen = 45,\n    period = 46, dot = period, full_stop = period,\n    slash = 47, divide = slash,\n    zero = 48, one = 49, two = 50, three = 51,\n    four = 52, five = 53, six = 54, seven = 55,\n    eight = 56, nine = 57, colon = 58, semicolon = 59,\n    less_than = 60, open_angled_bracket = less_than, equals = 61,\n    greater_than = 62, close_angled_bracket = greater_than,\n    question_mark = 63, at_symbol = 64,\n    A = 65, B = 66, C = 67, D = 68,\n    E = 69, F = 70, G = 71, H = 72,\n    I = 73, J = 74, K = 75, L = 76,\n    M = 77, N = 78, O = 79, P = 80,\n    Q = 81, R = 82, S = 83, T = 84,\n    U = 85, V = 86, W = 87, X = 88, Y = 89, Z = 90,\n    opening_bracket = 91, backslash = 92, closing_bracket = 93,\n    caret = 94, circumflex = caret, underscore = 95, grave_accent = 96,\n    a = 97, b = 98, c = 99, d = 100,\n    e = 101, f = 102, g = 103, h = 104,\n    i = 105, j = 106, k = 107, l = 108,\n    m = 109, n = 110, o = 111, p = 112,\n    q = 113, r = 114, s = 115, t = 116,\n    u = 117, v = 118, w = 119, x = 120, y = 121, z = 122,\n    opening_brace = 123, virtical_bar = 124, closing_brace = 125,\n    equivalency_sign = 126, tilde = equivalency_sign,\n    _delete = 127;\n};\n```\n\n", "tags": ["C++", "C++11"]}