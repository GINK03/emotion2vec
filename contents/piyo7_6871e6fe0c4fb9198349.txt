{"tags": ["C++11", "boost", "\u30e2\u30ca\u30c9", "Monad"], "context": " More than 1 year has passed since last update.C++\u306eboost::optional\u3092\u3001Haskell\u306eMaybe\u30e2\u30ca\u30c9\u307f\u305f\u3044\u306b\u4f7f\u3044\u968a\u3002\n#include <iostream>\n#include <type_traits>\n#include <boost/optional.hpp> \n\ntemplate <\n  typename Input,\n  typename Functor,\n  typename OptionalOutput = typename std::result_of<Functor(Input)>::type\n>\nOptionalOutput operator >>= (\n  const boost::optional<Input>& a,\n  Functor f\n) {\n  if (a) return f(*a);\n  return boost::none;\n} \n\ntemplate<typename T>\nstd::ostream& operator<<(std::ostream& os, const boost::optional<T>& a) {\n  if (a) return os << *a;\n  else   return os << \"none\";\n}\n\nint main() {\n  auto f = [](bool b){ return b ? boost::optional<int>(42) : boost::none; };;\n  std::cout << (boost::optional<bool>(true)  >>= f) << std::endl; // 42\n  std::cout << (boost::optional<bool>(false) >>= f) << std::endl; // none\n  std::cout << (boost::optional<bool>()      >>= f) << std::endl; // none\n//std::cout << (boost::none                  >>= f) << std::endl; // boost::none\u4f7f\u3046\u3068\u578b\u63a8\u8ad6\u3067\u304d\u306a\u304f\u3066\u6b8b\u5ff5\n\n  return 0;\n}\n\n\u5b9f\u884c\u7d50\u679c\uff1a[Wandbox]\u4e09\u3078( \u3078\u055e\u0a0a \u055e)\u3078 \uff8a\uff6f\uff8a\uff6f\nC++\u306eboost::optional\u3092\u3001Haskell\u306eMaybe\u30e2\u30ca\u30c9\u307f\u305f\u3044\u306b\u4f7f\u3044\u968a\u3002\n\n```cpp\n#include <iostream>\n#include <type_traits>\n#include <boost/optional.hpp> \n\ntemplate <\n  typename Input,\n  typename Functor,\n  typename OptionalOutput = typename std::result_of<Functor(Input)>::type\n>\nOptionalOutput operator >>= (\n  const boost::optional<Input>& a,\n  Functor f\n) {\n  if (a) return f(*a);\n  return boost::none;\n} \n\ntemplate<typename T>\nstd::ostream& operator<<(std::ostream& os, const boost::optional<T>& a) {\n  if (a) return os << *a;\n  else   return os << \"none\";\n}\n\nint main() {\n  auto f = [](bool b){ return b ? boost::optional<int>(42) : boost::none; };;\n  std::cout << (boost::optional<bool>(true)  >>= f) << std::endl; // 42\n  std::cout << (boost::optional<bool>(false) >>= f) << std::endl; // none\n  std::cout << (boost::optional<bool>()      >>= f) << std::endl; // none\n//std::cout << (boost::none                  >>= f) << std::endl; // boost::none\u4f7f\u3046\u3068\u578b\u63a8\u8ad6\u3067\u304d\u306a\u304f\u3066\u6b8b\u5ff5\n    \n  return 0;\n}\n```\n\u5b9f\u884c\u7d50\u679c\uff1a[[Wandbox]\u4e09\u3078( \u3078\u055e\u0a0a \u055e)\u3078 \uff8a\uff6f\uff8a\uff6f](http://melpon.org/wandbox/permlink/FMCze1oJU2PXQjOf)\n"}