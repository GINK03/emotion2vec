{"context": "\u65b0\u3057\u3044\u306e\u66f8\u304d\u307e\u3057\u305f\n\u30a2\u30ed\u30b1\u30fc\u30bf\u3092\u6307\u5b9a\u3067\u304d\u3066\u53c2\u7167\u304c\u306a\u304f\u306a\u3063\u305f\u6642\u70b9\u3067\u7834\u68c4\u3055\u308c\u308bSingleton\n\n\u53c2\u7167\u304c0\u306b\u306a\u3063\u305f\u6642\u70b9\u3067\u7834\u68c4\u3055\u308c\u308bsingleton\n\u666e\u6bb5\u79c1\u304c\u4f7f\u3063\u3066\u3044\u308bsingleton\u3092\u4ed6\u3067\u898b\u308b\u3053\u3068\u304c\u306a\u3044\u306e\u3067\u66f8\u304d\u6b8b\u3057\u3066\u304a\u304f\n\n\u5b9f\u88c5\n\u30b3\u30d4\u30fc\u7981\u6b62\u306e\u51e6\u7406\u3068\u304b\u66f8\u304f\u306e\u5fd8\u308c\u3066\u307e\u3057\u305f\u3002\n\u9069\u5f53\u306b\u88dc\u5b8c\u3057\u3066\u304a\u3044\u3066\u304f\u3060\u3055\u3044\u3002\n\u30b3\u30fc\u30c9\u66f8\u304d\u63db\u3048\u305f\u3064\u3044\u3067\u306b\u66f8\u304d\u307e\u3057\u305f\u3002\n#include <memory>\n\ntemplate <typename T> class singleton\n{\nprotected:\n  singleton() {}\npublic:\n  virtual ~singleton() {}\n\n  singleton( singleton const& ) = delete;\n  singleton& operator=( singleton const& ) = delete;\n\npublic:\n  static std::shared_ptr<T> get_instance()\n  {\n    auto ret_ptr = instance_.lock();\n    if( !ret_ptr )\n    {\n      ret_ptr   = std::shared_ptr<T>( new T{} );\n      instance_ = std::weak_ptr<T>( ret_ptr );\n      return ret_ptr;\n    }\n\n    return instance_.lock();\n  }\n\nprivate:\n  using allocator = typename singleton_allocator<T>::type;\n  static std::weak_ptr<T> instance_;\n}; // class singleton\n\n\ntemplate <typename T> std::weak_ptr<T>  singleton<T>::instance_;\n\n\n\u4f7f\u3044\u65b9\nclass A : public singleton<A>\n{\nprivate:\n  frinend class singleton<A>;\n  A() {} // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092private\u306b\n};\n\nint main()\n{\n  std::shared_ptr<A> a1 = A::get_instance(); // \u3053\u3053\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u751f\u6210\u3055\u308c\u308b\n} // \u30b9\u30b3\u30fc\u30d7\u3092\u629c\u3051\u3066\u53c2\u7167\u304c0\u306b\u306a\u3063\u305f\u6642\u70b9\u3067\u7834\u68c4\u3055\u308c\u308b\n\n\n\u6ce8\u610f\u70b9\u306a\u3069\ncreate\u3084destroy\u3092\u547c\u3076\u5fc5\u8981\u304c\u7121\u3044\u306e\u306f\u826f\u3044\u3067\u3059\u304c\u4ed6\u3068\u6bd4\u3079\u308b\u3068\u308f\u304b\u308a\u3065\u3089\u3044\u6c17\u3082\u3057\u307e\u3059\u3002  \n\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u751f\u6210\u3055\u308c\u3066\u306a\u3044\u30bf\u30a4\u30df\u30f3\u30b0\u3067\nA::get_instance();\n\n\u3060\u3051\u3092\u66f8\u304f\u3068\u751f\u6210\u3057\u305f\u77ac\u9593\u306b\u7834\u68c4\u3055\u308c\u307e\u3059\u3002\nauto a = A::get_instance();\n\n\u3053\u306e\u3088\u3046\u306b\u3001\u5fc5\u305a\u53c2\u7167\u3059\u308b\u5909\u6570\u3092\u4fdd\u6301\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u65b0\u3057\u3044\u306e\u66f8\u304d\u307e\u3057\u305f\n[\u30a2\u30ed\u30b1\u30fc\u30bf\u3092\u6307\u5b9a\u3067\u304d\u3066\u53c2\u7167\u304c\u306a\u304f\u306a\u3063\u305f\u6642\u70b9\u3067\u7834\u68c4\u3055\u308c\u308bSingleton](http://qiita.com/block/items/a076c9b57c11faa1facc)\n\n\n# \u53c2\u7167\u304c0\u306b\u306a\u3063\u305f\u6642\u70b9\u3067\u7834\u68c4\u3055\u308c\u308bsingleton\n\u666e\u6bb5\u79c1\u304c\u4f7f\u3063\u3066\u3044\u308bsingleton\u3092\u4ed6\u3067\u898b\u308b\u3053\u3068\u304c\u306a\u3044\u306e\u3067\u66f8\u304d\u6b8b\u3057\u3066\u304a\u304f\n\n## \u5b9f\u88c5\n\n~~\u30b3\u30d4\u30fc\u7981\u6b62\u306e\u51e6\u7406\u3068\u304b\u66f8\u304f\u306e\u5fd8\u308c\u3066\u307e\u3057\u305f\u3002\n\u9069\u5f53\u306b\u88dc\u5b8c\u3057\u3066\u304a\u3044\u3066\u304f\u3060\u3055\u3044\u3002~~\n\u30b3\u30fc\u30c9\u66f8\u304d\u63db\u3048\u305f\u3064\u3044\u3067\u306b\u66f8\u304d\u307e\u3057\u305f\u3002\n\n\n```cpp\n#include <memory>\n\ntemplate <typename T> class singleton\n{\nprotected:\n  singleton() {}\npublic:\n  virtual ~singleton() {}\n\n  singleton( singleton const& ) = delete;\n  singleton& operator=( singleton const& ) = delete;\n\npublic:\n  static std::shared_ptr<T> get_instance()\n  {\n    auto ret_ptr = instance_.lock();\n    if( !ret_ptr )\n    {\n      ret_ptr   = std::shared_ptr<T>( new T{} );\n      instance_ = std::weak_ptr<T>( ret_ptr );\n      return ret_ptr;\n    }\n\n    return instance_.lock();\n  }\n\nprivate:\n  using allocator = typename singleton_allocator<T>::type;\n  static std::weak_ptr<T> instance_;\n}; // class singleton\n\n\ntemplate <typename T> std::weak_ptr<T>  singleton<T>::instance_;\n```\n\n## \u4f7f\u3044\u65b9\n```cpp\nclass A : public singleton<A>\n{\nprivate:\n  frinend class singleton<A>;\n  A() {} // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092private\u306b\n};\n\nint main()\n{\n  std::shared_ptr<A> a1 = A::get_instance(); // \u3053\u3053\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u751f\u6210\u3055\u308c\u308b\n} // \u30b9\u30b3\u30fc\u30d7\u3092\u629c\u3051\u3066\u53c2\u7167\u304c0\u306b\u306a\u3063\u305f\u6642\u70b9\u3067\u7834\u68c4\u3055\u308c\u308b\n```\n\n## \u6ce8\u610f\u70b9\u306a\u3069\ncreate\u3084destroy\u3092\u547c\u3076\u5fc5\u8981\u304c\u7121\u3044\u306e\u306f\u826f\u3044\u3067\u3059\u304c\u4ed6\u3068\u6bd4\u3079\u308b\u3068\u308f\u304b\u308a\u3065\u3089\u3044\u6c17\u3082\u3057\u307e\u3059\u3002  \n\n\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u751f\u6210\u3055\u308c\u3066\u306a\u3044\u30bf\u30a4\u30df\u30f3\u30b0\u3067\n\n```cpp\nA::get_instance();\n```\n\n\u3060\u3051\u3092\u66f8\u304f\u3068\u751f\u6210\u3057\u305f\u77ac\u9593\u306b\u7834\u68c4\u3055\u308c\u307e\u3059\u3002\n\n```cpp\nauto a = A::get_instance();\n```\n\n\u3053\u306e\u3088\u3046\u306b\u3001\u5fc5\u305a\u53c2\u7167\u3059\u308b\u5909\u6570\u3092\u4fdd\u6301\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n", "tags": ["C++", "singleton"]}