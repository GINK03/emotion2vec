{"context": " More than 1 year has passed since last update.\u4e00\u5bfe\u4e00\u3057\u304b\u8003\u3048\u3066\u307e\u305b\u3093\u304c\u306a\u3002\u5236\u5fa1\u7cfb\u306e\u3084\u3064\u3089\u306a\u3089\u5927\u4f53\u3053\u308c\u304c\u3042\u308c\u3070\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306f\u3069\u3046\u306b\u304b\u306a\u308b\u3002\u30b5\u30fc\u30d0\u30fc\u5074\u306e\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u5316\u306f\u305d\u306e\u3046\u3061\u3059\u308b\u304b\u3082\u3057\u3093\u307e\u3044\u3002\n\u30b9\u30ea\u30fc\u30d7\u306e\u5165\u308c\u65b9\u304c\u30c0\u30b5\u3044\u3067\u3059\u304c\u3001\u77e5\u3089\u3093\u308f\u3002\n\n\u30b5\u30fc\u30d0\u30fc\nrequire \"socket\"\n\nCONNECTPORT = ARGV[0].to_i\nputs CONNECTPORT\n# \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u63a5\u7d9a\u3092\u5f85\u3064\u30bd\u30b1\u30c3\u30c8\ns0 = TCPServer.open(CONNECTPORT)\n\n# \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u63a5\u7d9a\u3092accept\u3059\u308b\nsock = s0.accept\n\n# \u5e38\u306b\u7e70\u308a\u8fd4\u3059\nwhile true\n\n  begin\n    sock.puts(\"fff\")\n    # \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u30c7\u30fc\u30bf\u3092\u5168\u3066\u53d7\u3051\u53d6\u308b\n    buff,sp = sock.recvfrom(100)\n    puts \"--d #{buff}\" if buff.length != 0\n  rescue Exception => e\n    puts \"\u4f8b\u5916\u3067\u305f\u3088\"\n    sock = s0.accept\n  end\n\nend\n\n# \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u63a5\u7d9a\u3092\u5f85\u3064\u30bd\u30b1\u30c3\u30c8\u3092\u9589\u3058\u308b\n# \u305f\u3060\u3057\u3001\u3053\u3053\u306b\u5230\u9054\u3059\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\ns0.close\n\n\n\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\nrequire \"socket\"\nexit if ARGV.size != 2\n\nIPADDRES = ARGV[0]\nCONNECTPORT = ARGV[1].to_i\nputs IPADDRES\nputs CONNECTPORT\n\nsock = nil\n#\u30d8\u30eb\u30b9\u306e\u30d5\u30a1\u30a4\u30eb\nsendque = Queue.new\n\n#\u3000\u53d7\u4fe1\u51e6\u7406\nThread.fork do\n  while true\n    begin\n      if sock == nil\n        # \u30bd\u30b1\u30c3\u30c8\u63a5\u7d9a\n        sock = TCPSocket.open(IPADDRES, CONNECTPORT)\n      elsif false == sock.closed?\n        rev,buff = sock.recvfrom(100)\n        text = rev.chomp\n        if text.length != 0\n          puts \"return message:\" + text.unpack('C*').map{ |b| \"0x%02X\" % b }.join(' ')\n        end\n      else\n        sock = TCPSocket.open(IPADDRES, CONNECTPORT)\n      end\n    rescue Exception => e\n      sleep(1)\n      puts \"\u4f8b\u5916dana\"\n    end\n    sleep(1)\n  end\nend\n\n#\u4ead\u5468\u671f\u9001\u4fe1\u60c5\u5831\nThread.fork do\n  health =  File.open(\"health.dat\").read\n  while true\n    begin\n      sendque.enq health\n    rescue\n      puts \"\u4f8b\u5916\u3067\u305f\u3088\"\n    end\n    sleep(3)\n  end\nend\n\n#\u3000\u9001\u4fe1\u51e6\u7406\nThread.fork do\n  sleep(1)\n  begin\n    if sock == nil\n    elsif false == sock.closed?\n      while req = sendque.pop\n        print(\"you writed:\", req.unpack('C*').map{ |b| \"0x%02X\" % b }.join(' '),\"\\n\")\n        sock.write(req)\n      end\n    end\n  rescue\n    puts \"\u307e\u3041\u3001\u4f8b\u5916\u3067\u305f\u3088\"\n  end\nend\n\n# \u30b7\u30e7\u30c3\u30c8\nwhile file_name = STDIN.gets.chomp\n  msg = file_name\n  if File.exist?(file_name)\n    File.open(file_name) do |f|\n      msg = f.read\n      f.close\n    end\n  end\n  sendque.enq msg\nend\n# \u9001\u4fe1\u304c\u7d42\u308f\u3063\u305f\u3089\u30bd\u30b1\u30c3\u30c8\u3092\u9589\u3058\u308b\nsock.close\n\n\n##\n\u4e00\u5bfe\u4e00\u3057\u304b\u8003\u3048\u3066\u307e\u305b\u3093\u304c\u306a\u3002\u5236\u5fa1\u7cfb\u306e\u3084\u3064\u3089\u306a\u3089\u5927\u4f53\u3053\u308c\u304c\u3042\u308c\u3070\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306f\u3069\u3046\u306b\u304b\u306a\u308b\u3002\u30b5\u30fc\u30d0\u30fc\u5074\u306e\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u5316\u306f\u305d\u306e\u3046\u3061\u3059\u308b\u304b\u3082\u3057\u3093\u307e\u3044\u3002\n\u30b9\u30ea\u30fc\u30d7\u306e\u5165\u308c\u65b9\u304c\u30c0\u30b5\u3044\u3067\u3059\u304c\u3001\u77e5\u3089\u3093\u308f\u3002\n\n##\u30b5\u30fc\u30d0\u30fc\n\n```\nrequire \"socket\"\n\nCONNECTPORT = ARGV[0].to_i\nputs CONNECTPORT\n# \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u63a5\u7d9a\u3092\u5f85\u3064\u30bd\u30b1\u30c3\u30c8\ns0 = TCPServer.open(CONNECTPORT)\n\n# \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u63a5\u7d9a\u3092accept\u3059\u308b\nsock = s0.accept\n\n# \u5e38\u306b\u7e70\u308a\u8fd4\u3059\nwhile true\n\n  begin\n    sock.puts(\"fff\")\n    # \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u30c7\u30fc\u30bf\u3092\u5168\u3066\u53d7\u3051\u53d6\u308b\n    buff,sp = sock.recvfrom(100)\n    puts \"--d #{buff}\" if buff.length != 0\n  rescue Exception => e\n    puts \"\u4f8b\u5916\u3067\u305f\u3088\"\n    sock = s0.accept\n  end\n\nend\n\n# \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u63a5\u7d9a\u3092\u5f85\u3064\u30bd\u30b1\u30c3\u30c8\u3092\u9589\u3058\u308b\n# \u305f\u3060\u3057\u3001\u3053\u3053\u306b\u5230\u9054\u3059\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\ns0.close\n\n```\n##\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\n\n```\nrequire \"socket\"\nexit if ARGV.size != 2\n\nIPADDRES = ARGV[0]\nCONNECTPORT = ARGV[1].to_i\nputs IPADDRES\nputs CONNECTPORT\n\nsock = nil\n#\u30d8\u30eb\u30b9\u306e\u30d5\u30a1\u30a4\u30eb\nsendque = Queue.new\n\n#\u3000\u53d7\u4fe1\u51e6\u7406\nThread.fork do\n  while true\n    begin\n      if sock == nil\n        # \u30bd\u30b1\u30c3\u30c8\u63a5\u7d9a\n        sock = TCPSocket.open(IPADDRES, CONNECTPORT)\n      elsif false == sock.closed?\n        rev,buff = sock.recvfrom(100)\n        text = rev.chomp\n        if text.length != 0\n          puts \"return message:\" + text.unpack('C*').map{ |b| \"0x%02X\" % b }.join(' ')\n        end\n      else\n        sock = TCPSocket.open(IPADDRES, CONNECTPORT)\n      end\n    rescue Exception => e\n      sleep(1)\n      puts \"\u4f8b\u5916dana\"\n    end\n    sleep(1)\n  end\nend\n\n#\u4ead\u5468\u671f\u9001\u4fe1\u60c5\u5831\nThread.fork do\n  health =  File.open(\"health.dat\").read\n  while true\n    begin\n      sendque.enq health\n    rescue\n      puts \"\u4f8b\u5916\u3067\u305f\u3088\"\n    end\n    sleep(3)\n  end\nend\n\n#\u3000\u9001\u4fe1\u51e6\u7406\nThread.fork do\n  sleep(1)\n  begin\n    if sock == nil\n    elsif false == sock.closed?\n      while req = sendque.pop\n        print(\"you writed:\", req.unpack('C*').map{ |b| \"0x%02X\" % b }.join(' '),\"\\n\")\n        sock.write(req)\n      end\n    end\n  rescue\n    puts \"\u307e\u3041\u3001\u4f8b\u5916\u3067\u305f\u3088\"\n  end\nend\n\n# \u30b7\u30e7\u30c3\u30c8\nwhile file_name = STDIN.gets.chomp\n  msg = file_name\n  if File.exist?(file_name)\n    File.open(file_name) do |f|\n      msg = f.read\n      f.close\n    end\n  end\n  sendque.enq msg\nend\n# \u9001\u4fe1\u304c\u7d42\u308f\u3063\u305f\u3089\u30bd\u30b1\u30c3\u30c8\u3092\u9589\u3058\u308b\nsock.close\n\n```\n", "tags": ["TCP", "Ruby"]}