{"context": " More than 1 year has passed since last update.\u97f3\u968e\u304c\u898b\u3048\u308b\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30b6\u30fc\u3067\u3059\n\u3010\u30cb\u30b3\u30cb\u30b3\u52d5\u753b\u3011\u97f3\u968e\u304c\u898b\u3048\u308b\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30b6\u30fc\u3092\u4f5c\u3063\u3066\u307f\u305f[Siv3D]\n\nMain.cpp\n//\u306f\u3080\u304f\u3093 \u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30b6\u30fc \u8a66\u4f5c\n# include <Siv3D.hpp>\n\nclass SoundPlayer\n{\nprivate:\n\n    GUI m_gui;\n\n    Sound m_sound;\n\n    const Font m_font;\n\n    const Vec2 m_centerPos;\n\n    static const double m_freq[];\n\n    static const bool m_isWhite[];\n\n    static const String m_name[];\n\n    bool m_isRecording;\npublic:\n\n    SoundPlayer()\n        : m_gui{ GUISkin::Default({ 0, 0, 0 }) }, m_font(10), m_centerPos(320, 190), m_isRecording(false)\n    {\n        m_gui.addButton(L\"PlayButton\", { L\"Play\" });\n\n        m_gui.addButton(L\"PauseButton\", { L\"Pause\" });\n\n        m_gui.addButton(L\"OpenButton\", { L\"Open\" });\n\n        m_gui.addButton(L\"UseMic\", { L\"Mic\" });\n\n        m_gui.addNewLine();\n\n        m_gui.addSlider(L\"Slider\", { 0.0, 1.0, 0.0, 500 });\n\n        m_gui.setPos((Window::Width() - m_gui.rect.w) / 2, 380);\n\n\n    }\n\n    void update()\n    {\n        m_gui.button(L\"PlayButton\").setEnabled(m_sound && !m_sound.isPlaying);\n\n        m_gui.button(L\"PauseButton\").setEnabled(m_sound.isPlaying);\n\n        m_gui.button(L\"UseMic\").setEnabled(!m_isRecording );\n\n        m_gui.slider(L\"Slider\").setEnabled(!m_isRecording);\n\n        if (m_gui.button(L\"PlayButton\").pushed)\n        {\n            m_sound.play();\n\n            m_isRecording = false;\n\n            Recorder::Stop();\n        }\n        else if (m_gui.button(L\"PauseButton\").pushed)\n        {\n            m_sound.pause();\n\n            m_isRecording = false;\n\n            Recorder::Stop();\n        }\n        else if (m_gui.button(L\"OpenButton\").pushed)\n        {\n            m_sound.pause();\n\n            m_isRecording = false;\n\n            Recorder::Stop();\n\n            m_sound = Dialog::OpenSound();\n        }\n\n        if (m_gui.slider(L\"Slider\").hasChanged)\n        {\n            m_sound.setPosSec(m_sound.lengthSec*m_gui.slider(L\"Slider\").value);\n        }\n\n        m_gui.slider(L\"Slider\").setValue(m_sound.posSec / m_sound.lengthSec);\n\n        if (m_gui.button(L\"UseMic\").pushed)\n        {\n            if (!Recorder::Start()){\n\n            }\n            else\n            {\n                m_isRecording = true;\n\n                m_sound.pause();\n            }\n        }\n\n    }\n\n    void drawVisualizer() \n    {\n\n        if (m_isRecording)\n        {\n            Waving::FFT(Recorder::GetWave(), Recorder::GetPos());\n        }\n        else\n        {\n            if (m_sound.isPlaying)Waving::FFT(m_sound);\n        }\n\n\n        const float* p = Waving::FFTBuffer();\n\n        for (int i = 0; i < 12; ++i)\n        {\n            const double startRad = getRad((m_freq[i] + m_freq[i + 1]) / 2.0) + 0.01;\n\n            const double angle = getRad((m_freq[i + 1] + m_freq[i + 2]) / 2.0) - startRad;\n\n            const Vec2 pos = getPosFromRad( getRad(m_freq[i])) * (160.0) + m_centerPos;\n\n            if (m_isWhite[i])\n            { \n                Circle(m_centerPos, 180).drawPie(startRad, angle, Color(50));\n            }\n            else\n            {\n                Circle(m_centerPos, 180).drawPie(startRad, angle, Color(20));\n            }\n\n            m_font.drawCenter(m_name[i], pos,Color(70));\n        }\n\n        for (int i = 0; i<1760; ++i)\n        {\n            const double di = i;\n\n            const double radian = getRad(di);\n\n            const double radius = 0.0;\n\n            const double radiusOuter = 180.0;\n\n            const double width = Min(radiusOuter * ((radian)- getRad(di-1)), 50.0);\n\n            const double size = Pow(p[i], 0.6f) * 800 * Log(di)/Log(10.0);\n\n            const double strength = Pow(size , 2.0) * Log( di ) / 1000000.0;\n\n            const Vec2 pos = getPosFromRad(radian) * (radius + size / 2.0) + m_centerPos;\n\n            RectF(width, size).setCenter(pos).rotate(radian).draw(HSV(240 - Log( di ) * 100,1.0,strength));\n        }\n\n\n\n        if (m_isRecording && Recorder::IsEnd()) // \u9332\u97f3\u304c\u7d42\u4e86\n        {\n            Recorder::Restart();\n        }\n\n\n    }\n\n    double getRad(double freq) \n    {\n        return 2 * Pi * Log(freq) / Log(2.0) + 2.42;\n    }\n\n    Vec2 getPosFromRad(double rad)\n    {\n        return Vec2(Sin(rad), -Cos(rad));\n    }\n};\n\nconst double SoundPlayer::m_freq[] = {\n    440.000000,\n    466.163762,\n    493.883301,\n    523.251131,\n    554.365262,\n    587.329536,\n    622.253967,\n    659.255114,\n    698.456463,\n    739.988845,\n    783.990872,\n    830.609395,\n    880.000000,\n    932.328\n};\n\nconst bool SoundPlayer::m_isWhite[] = {\n    false, true, true, false, true, false, true, false, true, true, false, true\n};\n\nconst String SoundPlayer::m_name[] = {\n    L\"D\", L\"D#\", L\"E\", L\"F\", L\"F#\", L\"G\", L\"G#\", L\"A\", L\"A#\", L\"B\", L\"C\", L\"C#\"\n};\n\nvoid Main()\n{\n    SoundPlayer soundPlayer;\n\n    Graphics::Set2DBlendState(BlendState::Additive());\n\n    while (System::Update())\n    {\n        soundPlayer.update();\n\n        soundPlayer.drawVisualizer();       \n    }\n}\n\n\n\u97f3\u968e\u304c\u898b\u3048\u308b\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30b6\u30fc\u3067\u3059\n<iframe width=\"312\" height=\"176\" src=\"http://ext.nicovideo.jp/thumb/sm22450052\" scrolling=\"no\" style=\"border:solid 1px #CCC;\" frameborder=\"0\"><a href=\"http://www.nicovideo.jp/watch/sm22450052\">\u3010\u30cb\u30b3\u30cb\u30b3\u52d5\u753b\u3011\u97f3\u968e\u304c\u898b\u3048\u308b\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30b6\u30fc\u3092\u4f5c\u3063\u3066\u307f\u305f[Siv3D]</a></iframe>\n\n```ruby:Main.cpp\n//\u306f\u3080\u304f\u3093 \u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30b6\u30fc \u8a66\u4f5c\n# include <Siv3D.hpp>\n\nclass SoundPlayer\n{\nprivate:\n\n\tGUI m_gui;\n\n\tSound m_sound;\n\n\tconst Font m_font;\n\n\tconst Vec2 m_centerPos;\n\n\tstatic const double m_freq[];\n\n\tstatic const bool m_isWhite[];\n\n\tstatic const String m_name[];\n\n\tbool m_isRecording;\npublic:\n\n\tSoundPlayer()\n\t\t: m_gui{ GUISkin::Default({ 0, 0, 0 }) }, m_font(10), m_centerPos(320, 190), m_isRecording(false)\n\t{\n\t\tm_gui.addButton(L\"PlayButton\", { L\"Play\" });\n\n\t\tm_gui.addButton(L\"PauseButton\", { L\"Pause\" });\n\n\t\tm_gui.addButton(L\"OpenButton\", { L\"Open\" });\n\n\t\tm_gui.addButton(L\"UseMic\", { L\"Mic\" });\n\n\t\tm_gui.addNewLine();\n\n\t\tm_gui.addSlider(L\"Slider\", { 0.0, 1.0, 0.0, 500 });\n\n\t\tm_gui.setPos((Window::Width() - m_gui.rect.w) / 2, 380);\n\n\t\t\n\t}\n\n\tvoid update()\n\t{\n\t\tm_gui.button(L\"PlayButton\").setEnabled(m_sound && !m_sound.isPlaying);\n\n\t\tm_gui.button(L\"PauseButton\").setEnabled(m_sound.isPlaying);\n\n\t\tm_gui.button(L\"UseMic\").setEnabled(!m_isRecording );\n\n\t\tm_gui.slider(L\"Slider\").setEnabled(!m_isRecording);\n\n\t\tif (m_gui.button(L\"PlayButton\").pushed)\n\t\t{\n\t\t\tm_sound.play();\n\n\t\t\tm_isRecording = false;\n\n\t\t\tRecorder::Stop();\n\t\t}\n\t\telse if (m_gui.button(L\"PauseButton\").pushed)\n\t\t{\n\t\t\tm_sound.pause();\n\n\t\t\tm_isRecording = false;\n\n\t\t\tRecorder::Stop();\n\t\t}\n\t\telse if (m_gui.button(L\"OpenButton\").pushed)\n\t\t{\n\t\t\tm_sound.pause();\n\n\t\t\tm_isRecording = false;\n\n\t\t\tRecorder::Stop();\n\n\t\t\tm_sound = Dialog::OpenSound();\n\t\t}\n\n\t\tif (m_gui.slider(L\"Slider\").hasChanged)\n\t\t{\n\t\t\tm_sound.setPosSec(m_sound.lengthSec*m_gui.slider(L\"Slider\").value);\n\t\t}\n\n\t\tm_gui.slider(L\"Slider\").setValue(m_sound.posSec / m_sound.lengthSec);\n\n\t\tif (m_gui.button(L\"UseMic\").pushed)\n\t\t{\n\t\t\tif (!Recorder::Start()){\n\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tm_isRecording = true;\n\n\t\t\t\tm_sound.pause();\n\t\t\t}\n\t\t}\n\n\t}\n\n\tvoid drawVisualizer() \n\t{\n\t\t\n\t\tif (m_isRecording)\n\t\t{\n\t\t\tWaving::FFT(Recorder::GetWave(), Recorder::GetPos());\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (m_sound.isPlaying)Waving::FFT(m_sound);\n\t\t}\n\t\t\n\n\t\tconst float* p = Waving::FFTBuffer();\n\n\t\tfor (int i = 0; i < 12; ++i)\n\t\t{\n\t\t\tconst double startRad = getRad((m_freq[i] + m_freq[i + 1]) / 2.0) + 0.01;\n\n\t\t\tconst double angle = getRad((m_freq[i + 1] + m_freq[i + 2]) / 2.0) - startRad;\n\n\t\t\tconst Vec2 pos = getPosFromRad( getRad(m_freq[i])) * (160.0) + m_centerPos;\n\n\t\t\tif (m_isWhite[i])\n\t\t\t{ \n\t\t\t\tCircle(m_centerPos, 180).drawPie(startRad, angle, Color(50));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tCircle(m_centerPos, 180).drawPie(startRad, angle, Color(20));\n\t\t\t}\n\n\t\t\tm_font.drawCenter(m_name[i], pos,Color(70));\n\t\t}\n\n\t\tfor (int i = 0; i<1760; ++i)\n\t\t{\n\t\t\tconst double di = i;\n\n\t\t\tconst double radian = getRad(di);\n\n\t\t\tconst double radius = 0.0;\n\n\t\t\tconst double radiusOuter = 180.0;\n\n\t\t\tconst double width = Min(radiusOuter * ((radian)- getRad(di-1)), 50.0);\n\n\t\t\tconst double size = Pow(p[i], 0.6f) * 800 * Log(di)/Log(10.0);\n\n\t\t\tconst double strength = Pow(size , 2.0) * Log( di ) / 1000000.0;\n\n\t\t\tconst Vec2 pos = getPosFromRad(radian) * (radius + size / 2.0) + m_centerPos;\n\n\t\t\tRectF(width, size).setCenter(pos).rotate(radian).draw(HSV(240 - Log( di ) * 100,1.0,strength));\n\t\t}\n\n\n\t\t\n\t\tif (m_isRecording && Recorder::IsEnd()) // \u9332\u97f3\u304c\u7d42\u4e86\n\t\t{\n\t\t\tRecorder::Restart();\n\t\t}\n\t\t\n\t\t\n\t}\n\n\tdouble getRad(double freq) \n\t{\n\t\treturn 2 * Pi * Log(freq) / Log(2.0) + 2.42;\n\t}\n\n\tVec2 getPosFromRad(double rad)\n\t{\n\t\treturn Vec2(Sin(rad), -Cos(rad));\n\t}\n};\n\nconst double SoundPlayer::m_freq[] = {\n\t440.000000,\n\t466.163762,\n\t493.883301,\n\t523.251131,\n\t554.365262,\n\t587.329536,\n\t622.253967,\n\t659.255114,\n\t698.456463,\n\t739.988845,\n\t783.990872,\n\t830.609395,\n\t880.000000,\n\t932.328\n};\n\nconst bool SoundPlayer::m_isWhite[] = {\n\tfalse, true, true, false, true, false, true, false, true, true, false, true\n};\n\nconst String SoundPlayer::m_name[] = {\n\tL\"D\", L\"D#\", L\"E\", L\"F\", L\"F#\", L\"G\", L\"G#\", L\"A\", L\"A#\", L\"B\", L\"C\", L\"C#\"\n};\n\nvoid Main()\n{\n\tSoundPlayer soundPlayer;\n\n\tGraphics::Set2DBlendState(BlendState::Additive());\n\t\t\n\twhile (System::Update())\n\t{\n\t\tsoundPlayer.update();\n\n\t\tsoundPlayer.drawVisualizer();\t\t\n\t}\n}\n```", "tags": ["Siv3D"]}