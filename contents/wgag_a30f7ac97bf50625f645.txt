{"context": "\u3053\u306e\u8a18\u4e8b\u306f F# Advent Calendar 2016 \u306e20\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\u4eca\u5e74\u767a\u8868\u3055\u308c\u305f PLDI 2016 \u306e\u8ad6\u6587 \"Types from data: Making structured data first-class citizens in F#\" [1] \u3068\u5b9f\u969b\u306e F# Data \u306e\u5b9f\u88c5 [2] \u3092\u53c2\u7167\u3057\u3001F# Data \u306e\u63d0\u4f9b\u3059\u308b\u578b\u30d7\u30ed\u30d0\u30a4\u30c0\uff08JsonProvider \u306a\u3069\uff09\u304c\u6a19\u672c\u6587\u66f8\u304b\u3089\u306e\u578b\u306e\u63a8\u6e2c\u3092\u5185\u90e8\u3067\u3069\u306e\u3088\u3046\u306b\u884c\u3063\u3066\u3044\u308b\u304b\u3092\u8aad\u307f\u89e3\u304d\u307e\u3059\u3002\n\n\u7c21\u5358\u306a\u4f8b\n\u6b21\u306e\u30b3\u30fc\u30c9\u306f\u3001JSON\u6587\u66f8\u7528\u306e\u578b\u30d7\u30ed\u30d0\u30a4\u30c0 JsonProvider \u306e\u6319\u52d5\u3092\u8868\u3059\u7c21\u5358\u306a\u4f8b\u3067\u3059\u3002\n\nScript1.fsx\n#r \"path/to/FSharp.Data.dll\"\n\n[<Literal>]\nlet samples = \"\"\" \n  [\n    { \"name\": \"alice\", \"age\": 22 }, \n    { \"name\": \"bob, \"age\": 25 }\n  ]    \n\"\"\"\n// \u6a19\u672c1:  { \"name\": \"alice\", \"age\": 22 }\n// \u6a19\u672c2:  { \"name\": \"bob\", \"age\": 25 }\n\ntype Person = FSharp.Data.JsonProvider<samples, SampleIsList = true>\n// \u6a19\u672c1\u304b\u3089\u63a8\u6e2c\u3055\u308c\u308b\u578b:  { Name: string, Age: int }\n// \u6a19\u672c2\u304b\u3089\u63a8\u6e2c\u3055\u308c\u308b\u578b:  { Name: string, Age: int }\n// \u6a19\u672c1, \u6a19\u672c2\u304b\u3089\u63a8\u6e2c\u3055\u308c\u308b\u578b:  { Name: string, Age: int }\n\nlet person = Person.Parse(System.Console.ReadLine ())\n// person \u306f\u30e1\u30f3\u30d0 Name: string \u3068 Age: int \u3092\u6301\u3064\n\nprintfn \"name: %s, age: %d\" person.Name person.age\n\n\n\u578b\u30d7\u30ed\u30d0\u30a4\u30c0\u306f\u3001\u3053\u306e\u4f8b\u3067\u4e0e\u3048\u3066\u3044\u308b2\u3064\u306e\u6a19\u672c\u306e \"\u578b\"\uff08\u30b9\u30ad\u30fc\u30de\uff09\u3092\u3069\u3061\u3089\u3082 { Name: string, Age: int } \u3068\u63a8\u6e2c\u3057\u30012\u3064\u306e\u30d7\u30ed\u30d1\u30c6\u30a3 Name: string \u3068 Age: int \u3092\u3082\u3064\u76ee\u7684\u306e\u578b\uff08\u3053\u3053\u3067\u306f Person\uff09\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u3053\u306e\u4e00\u9023\u306e\u51e6\u7406\u306f\u3001\u6b21\u306e\u8868\u306b\u793a\u3059\u3088\u3046\u306a\u6f14\u7b97\u306b\u3088\u3063\u3066\u5b9f\u73fe\u3055\u308c\u307e\u3059\u3002\n\n\n\n[1] \u3067\u306e\u5b9a\u5f0f\u5316\n\u30e9\u30a4\u30d6\u30e9\u30ea\u5185\u306e\u95a2\u6570\n\u8aac\u660e\n\n\n\n\nSSS\ninferType\n\u6a19\u672c\u304b\u3089\u578b\u3092\u63a8\u6e2c\u3059\u308b\n\n\n[[\u00a0\u22c5\u00a0]][[\u00a0\u22c5\u00a0]][\\kern-.5em[ \\ \\cdot \\  ]\\kern-.5em]\ngenerateJsonType\n\u63a8\u6e2c\u3055\u308c\u305f\u578b\u304b\u3089\u76ee\u7684\u306e\u578b\u3092\u751f\u6210\u3059\u308b\n\n\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\u5185\u306e\u95a2\u6570\u3068\u3057\u3066\u793a\u3057\u305f\u3082\u306e\u306f\u3001SSS \u3084 [[\u00a0\u22c5\u00a0]][[\u00a0\u22c5\u00a0]][\\kern-.5em[ \\ \\cdot \\  ]\\kern-.5em] \u306b\u8fd1\u3044\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u308b\u3068\u601d\u308f\u308c\u308b\u3082\u306e\u3092\u7b46\u8005\u304c\u52dd\u624b\u306b\u30c1\u30e7\u30a4\u30b9\u3057\u3066\u304d\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306e\u4f8b\u3067\u884c\u304f\u3068\u3001\u6a19\u672c\u304b\u3089\u306e\u578b\u306e\u63a8\u6e2c\u306f\u6b21\u306e\u3088\u3046\u306b\u884c\u308f\u308c\u307e\u3059\u3002\nS(\"alice\")S(22)S({Name:\"alice\",\u00a0Age:22})=string=int={Name:string,\u00a0Age:int}S(\"alice\")=stringS(22)=intS({Name:\"alice\",\u00a0Age:22})={Name:string,\u00a0Age:int}{\\begin{align}\nS(\\textsf{\"alice\"}) & = \\mathsf{string} \\\\\nS(\\mathsf{22}) & = \\mathsf{int} \\\\\nS(\\{ \\textsf{Name}: \\textsf{\"alice\"},\\ \\textsf{Age}: \\textsf{22} \\}) & = \\{ \\textsf{Name}: \\textsf{string},\\ \\textsf{Age}: \\textsf{int} \\} \\\\\n\\end{align}\n}\n\u307e\u305f\u3001[[\u00a0{Name:string,\u00a0Age:int}\u00a0]][[\u00a0{Name:string,\u00a0Age:int}\u00a0]][\\kern-.5em[ \\ \\lbrace \\textsf{Name}: \\textsf{string},\\ \\textsf{Age}: \\textsf{int} \\rbrace \\ ]\\kern-.5em] \u306e\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\uff08\u8a73\u7d30\u306e\u8aac\u660e\u306f\u7701\u7565\u3057\u307e\u3059\u3002\uff09\ntype\u00a0Person(x1:Data)=member\u00a0Name:string=convField(Person,Name,x1,\u03bbx2\u2192convPrim(string,x2))member\u00a0Age:int=convField(Person,Age,x1,\u03bbx2\u2192convPrim(int,x2))type\u00a0Person(x1:Data)=member\u00a0Name:string=convField(Person,Name,x1,\u03bbx2\u2192convPrim(string,x2))member\u00a0Age:int=convField(Person,Age,x1,\u03bbx2\u2192convPrim(int,x2)){\\begin{array}{l}\n\\mathsf{type}\\ \\mathsf{Person}(x_1 : \\mathsf{Data}) = \\\\\n\\quad \\mathsf{member}\\ \\mathsf{Name} : \\mathsf{string} = \\\\\n\\quad \\quad \\mathsf{convField}(\\mathsf{Person}, \\mathsf{Name}, x_1, \\lambda x_2 \\to \\mathsf{convPrim}(\\mathsf{string}, x_2)) \\\\\n\\quad \\mathsf{member}\\ \\mathsf{Age} : \\mathsf{int} = \\\\\n\\quad \\quad \\mathsf{convField}(\\mathsf{Person}, \\mathsf{Age}, x_1, \\lambda x_2 \\to \\mathsf{convPrim}(\\mathsf{int}, x_2)) \\\\\n\\end{array}\n}\n\n\u5c11\u3057\u8907\u96d1\u306a\u4f8b\n\u3057\u304b\u3057\u73fe\u5b9f\u306e\u4e16\u754c\u306f\u3082\u3046\u5c11\u3057\u8907\u96d1\u3067\u3001\u6b21\u306e\u30b3\u30fc\u30c9\u306b\u3042\u308b\u3088\u3046\u306b\u3001\u6a19\u672c\u306b\u3088\u3063\u3066\u578b\u304c\u307e\u3061\u307e\u3061\u3060\u3063\u305f\u308a\u3057\u307e\u3059\u3002[1] \u306b\u3082\u985e\u4f3c\u306e\u4f8b\u304c\u3042\u308a\u307e\u3059\u3002\n\nScript2.fsx\n#r \"path/to/FSharp.Data.dll\"\n\n[<Literal>]\nlet samples = \"\"\" \n  [\n    { \"name\": \"alice\", \"age\": 22 }, \n    { \"name\": \"bob, \"age\": 25.5\" }, \n    { \"name\": \"carol\" }\n  ]    \n\"\"\"\n// \u6a19\u672c1:  { \"name\": \"alice\", \"age\": 22 }\n// \u6a19\u672c2:  { \"name\": \"bob\", \"age\": 25.5 }\n// \u6a19\u672c3:  { \"name\": \"carol\" }\n\ntype Person = FSharp.Data.JsonProvider<samples, SampleIsList = true>\n// \u6a19\u672c1\u304b\u3089\u63a8\u6e2c\u3055\u308c\u308b\u578b:  { Name: string, Age: int }\n// \u6a19\u672c2\u304b\u3089\u63a8\u6e2c\u3055\u308c\u308b\u578b:  { Name: string, Age: decimal }\n// \u6a19\u672c3\u304b\u3089\u63a8\u6e2c\u3055\u308c\u308b\u578b:  { Name: string }\n// \u6a19\u672c1-\u6a19\u672c3\u304b\u3089\u63a8\u6e2c\u3055\u308c\u308b\u578b:  { Name: string, Age: option<decimal> }\n\nlet person = Person.Parse(System.Console.ReadLine ())\n// person \u306f\u30e1\u30f3\u30d0 Name: string \u3068 Age: option<decimal> \u3092\u6301\u3064\n\nmatch person.Age with\n| Some age -> printfn \"name: %s, age: %M\" person.Name age\n| None -> printfn \"name: %s\" person.Name\n\n\n\u3053\u306e\u3088\u3046\u306a\u5834\u5408\u3001\u578b\u30d7\u30ed\u30d0\u30a4\u30c0\u306f\u3001\u5168\u3066\u306e\u6a19\u672c\u3092\u30ab\u30d0\u30fc\u3057\u3064\u3064\u3082\u3067\u304d\u308b\u3060\u3051\u5c0f\u3055\u3044\u578b\u3092\u63a8\u6e2c\u3057\u3088\u3046\u3068\u3057\u307e\u3059\u3002\u305d\u306e\u7d50\u679c\u3068\u3057\u3066\u3001\u3053\u306e\u4f8b\u306e\u5834\u5408\u3001\u578b\u30d7\u30ed\u30d0\u30a4\u30c0\u306b\u3088\u308a\u63d0\u4f9b\u3055\u308c\u308b\u578b Person \u306e\u30d7\u30ed\u30d1\u30c6\u30a3 Age \u306f\u578b option<decimal> \u3092\u6301\u3064\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u3046\u3057\u305f\u8907\u6570\u306e\u6a19\u672c\u304b\u3089\u306e\u578b\u306e\u63a8\u6e2c\u306f\u3001\u6b21\u306b\u793a\u3059\u6f14\u7b97\u306b\u3088\u3063\u3066\u5b9f\u73fe\u3055\u308c\u307e\u3059\u3002\n\n\n\n[1] \u3067\u306e\u5b9a\u5f0f\u5316\n\u30e9\u30a4\u30d6\u30e9\u30ea\u5185\u306e\u95a2\u6570\n\u8aac\u660e\n\n\n\n\ncshcsh\\mathsf{csh}\nsubtypeInfered\n\u8907\u6570\u306e\u578b\u306e\u5171\u901a\u90e8\u5206\u578b\u3092\u6c42\u3081\u308b\n\n\n\n\u3053\u306e\u6f14\u7b97\u306f\u3001\u5024\u306e\u5b58\u5728\u6027\u3092\u8003\u616e\u3057\u305f\u4e0a\u3067\u3001\u90e8\u5206\u578b\u95a2\u4fc2 <:<:<: \u306b\u95a2\u3059\u308b\u4e0a\u9650\u3092\u6c42\u3081\u308b\u6f14\u7b97\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001int<:decimalint<:decimal\\mathsf{int} <: \\mathsf{decimal} \u3067\u3042\u308b\u3053\u3068\u3088\u308a\u3001 csh(int,decimal)=decimalcsh(int,decimal)=decimal\\mathsf{csh}(\\mathsf{int}, \\mathsf{decimal}) = \\mathsf{decimal} \u3067\u3059\u3002\u307e\u305f\u3001 csh(decimal,null)=nullable\u27e8decimal\u27e9csh(decimal,null)=nullable\u27e8decimal\u27e9\\mathsf{csh}(\\mathsf{decimal}, \\mathsf{null}) = \\mathsf{nullable}\\langle \\mathsf{decimal} \\rangle \u3067\u30591\u3002\u306a\u304a\u3001[1] \u3067\u306f\u90e8\u5206\u578b\u95a2\u4fc2\u306b\u76f8\u5f53\u3059\u308b shape preference relation \u3068\u3044\u3046\u95a2\u4fc2 \u2291\u2291\\sqsubseteq \u3092\u5b9a\u7fa9\u3057\u3001\u5b9f\u969b\u306b\u306f\u3053\u306e\u95a2\u4fc2\u306b\u57fa\u3065\u3044\u3066 cshcsh\\mathsf{csh} \u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n\u5b9f\u306f [1] \u3067\u306f\u6570\u5024\u578b\u3068\u3057\u3066 intint\\mathsf{int} \u3068 floatfloat\\mathsf{float} \u3057\u304b\u6271\u3063\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u5b9f\u969b\u306e F# Data \u306e\u5b9f\u88c5\u3067\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u591a\u69d8\u306a\u6570\u5024\u578b\u3092\u6271\u3063\u3066\u3044\u307e\u3059\u3002\u5b9f\u88c5\u3067\u306f\u3001\u6a19\u672c\u306e 00\\mathsf{0} \u3084 11\\mathsf{1} \u3068\u3044\u3046\u5024\u304b\u3089\u6574\u6570\u578b\u3060\u3051\u3067\u306a\u304f\u30d6\u30fc\u30eb\u578b\u3082\u63a8\u8ad6\u53ef\u80fd\u306a\u3088\u3046\u3001\u5de5\u592b\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\nfloat:>decimal:>int64:>int:>bit:>bit0float:>decimal:>int64:>int:>bit:>bit1bool:>bit:>bit0bool:>bit:>bit1float:>decimal:>int64:>int:>bit:>bit0float:>decimal:>int64:>int:>bit:>bit1bool:>bit:>bit0bool:>bit:>bit1{\\begin{align*}\n& \\mathsf{float} :> \\mathsf{decimal} :> \\mathsf{int64} :> \\mathsf{int} :> \\mathsf{bit} :> \\mathsf{bit0} \\\\\n& \\mathsf{float} :> \\mathsf{decimal} :> \\mathsf{int64} :> \\mathsf{int} :> \\mathsf{bit} :> \\mathsf{bit1} \\\\\n& \\mathsf{bool} :> \\mathsf{bit} :> \\mathsf{bit0} \\\\\n& \\mathsf{bool} :> \\mathsf{bit} :> \\mathsf{bit1} \\\\\n\\end{align*}\n}\n\n\u53c2\u8003\u6587\u732e\n\nT. Petricek, G. Guerra, and D. Syme. Types from data: Making structured data first-class citizens in F#. In Proc. PLDI 2016, pp. 477-490. ACM, 2016.\nGithub: fsharp/FSharp.Data\nF# Data: \u30c7\u30fc\u30bf\u30a2\u30af\u30bb\u30b9\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\n\n\n\n\n\nnullable\u27e8\u22ef\u27e9nullable\u27e8\u22ef\u27e9\\mathsf{nullable}\\langle \\cdots \\rangle \u306f\u6700\u7d42\u7684\u306b\u306f option\u27e8\u22ef\u27e9option\u27e8\u22ef\u27e9\\mathsf{option}\\langle \\cdots \\rangle \u3068\u89e3\u91c8\u3055\u308c\u307e\u3059\u3002\u00a0\u21a9\n\n\n\n\u3053\u306e\u8a18\u4e8b\u306f [F# Advent Calendar 2016](http://qiita.com/advent-calendar/2016/fsharp) \u306e20\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n\u4eca\u5e74\u767a\u8868\u3055\u308c\u305f [PLDI 2016](http://pldi16.sigplan.org/home) \u306e\u8ad6\u6587 [\"Types from data: Making structured data first-class citizens in F#\"](http://pldi16.sigplan.org/event/pldi-2016-papers-types-from-data-making-structured-data-first-class-citizens-in-f-) [1] \u3068\u5b9f\u969b\u306e F# Data \u306e\u5b9f\u88c5 [2] \u3092\u53c2\u7167\u3057\u3001F# Data \u306e\u63d0\u4f9b\u3059\u308b\u578b\u30d7\u30ed\u30d0\u30a4\u30c0\uff08``JsonProvider`` \u306a\u3069\uff09\u304c\u6a19\u672c\u6587\u66f8\u304b\u3089\u306e\u578b\u306e\u63a8\u6e2c\u3092\u5185\u90e8\u3067\u3069\u306e\u3088\u3046\u306b\u884c\u3063\u3066\u3044\u308b\u304b\u3092\u8aad\u307f\u89e3\u304d\u307e\u3059\u3002\n\n## \u7c21\u5358\u306a\u4f8b\n\n\u6b21\u306e\u30b3\u30fc\u30c9\u306f\u3001JSON\u6587\u66f8\u7528\u306e\u578b\u30d7\u30ed\u30d0\u30a4\u30c0 ``JsonProvider`` \u306e\u6319\u52d5\u3092\u8868\u3059\u7c21\u5358\u306a\u4f8b\u3067\u3059\u3002\n\n```fsharp:Script1.fsx\n#r \"path/to/FSharp.Data.dll\"\n\n[<Literal>]\nlet samples = \"\"\" \n  [\n    { \"name\": \"alice\", \"age\": 22 }, \n    { \"name\": \"bob, \"age\": 25 }\n  ]    \n\"\"\"\n// \u6a19\u672c1:  { \"name\": \"alice\", \"age\": 22 }\n// \u6a19\u672c2:  { \"name\": \"bob\", \"age\": 25 }\n\ntype Person = FSharp.Data.JsonProvider<samples, SampleIsList = true>\n// \u6a19\u672c1\u304b\u3089\u63a8\u6e2c\u3055\u308c\u308b\u578b:  { Name: string, Age: int }\n// \u6a19\u672c2\u304b\u3089\u63a8\u6e2c\u3055\u308c\u308b\u578b:  { Name: string, Age: int }\n// \u6a19\u672c1, \u6a19\u672c2\u304b\u3089\u63a8\u6e2c\u3055\u308c\u308b\u578b:  { Name: string, Age: int }\n\nlet person = Person.Parse(System.Console.ReadLine ())\n// person \u306f\u30e1\u30f3\u30d0 Name: string \u3068 Age: int \u3092\u6301\u3064\n\nprintfn \"name: %s, age: %d\" person.Name person.age\n```\n\n\u578b\u30d7\u30ed\u30d0\u30a4\u30c0\u306f\u3001\u3053\u306e\u4f8b\u3067\u4e0e\u3048\u3066\u3044\u308b2\u3064\u306e\u6a19\u672c\u306e \"\u578b\"\uff08\u30b9\u30ad\u30fc\u30de\uff09\u3092\u3069\u3061\u3089\u3082 ``{ Name: string, Age: int }`` \u3068\u63a8\u6e2c\u3057\u30012\u3064\u306e\u30d7\u30ed\u30d1\u30c6\u30a3 ``Name: string`` \u3068 ``Age: int`` \u3092\u3082\u3064\u76ee\u7684\u306e\u578b\uff08\u3053\u3053\u3067\u306f ``Person``\uff09\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u3053\u306e\u4e00\u9023\u306e\u51e6\u7406\u306f\u3001\u6b21\u306e\u8868\u306b\u793a\u3059\u3088\u3046\u306a\u6f14\u7b97\u306b\u3088\u3063\u3066\u5b9f\u73fe\u3055\u308c\u307e\u3059\u3002\n\n| [1] \u3067\u306e\u5b9a\u5f0f\u5316 | \u30e9\u30a4\u30d6\u30e9\u30ea\u5185\u306e\u95a2\u6570 | \u8aac\u660e |\n|:---:|:---:|:---|\n| $S$ | [``inferType``](https://github.com/fsharp/FSharp.Data/blob/master/src/Json/JsonInference.fs) | \u6a19\u672c\u304b\u3089\u578b\u3092\u63a8\u6e2c\u3059\u308b |\n| $[\\kern-.5em[ \\ \\cdot \\  ]\\kern-.5em]$ | [``generateJsonType``](https://github.com/fsharp/FSharp.Data/blob/master/src/Json/JsonGenerator.fs) | \u63a8\u6e2c\u3055\u308c\u305f\u578b\u304b\u3089\u76ee\u7684\u306e\u578b\u3092\u751f\u6210\u3059\u308b |\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\u5185\u306e\u95a2\u6570\u3068\u3057\u3066\u793a\u3057\u305f\u3082\u306e\u306f\u3001$S$ \u3084 $[\\kern-.5em[ \\ \\cdot \\  ]\\kern-.5em]$ \u306b\u8fd1\u3044\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u308b\u3068\u601d\u308f\u308c\u308b\u3082\u306e\u3092\u7b46\u8005\u304c\u52dd\u624b\u306b\u30c1\u30e7\u30a4\u30b9\u3057\u3066\u304d\u307e\u3057\u305f\u3002\n\n\u4eca\u56de\u306e\u4f8b\u3067\u884c\u304f\u3068\u3001\u6a19\u672c\u304b\u3089\u306e\u578b\u306e\u63a8\u6e2c\u306f\u6b21\u306e\u3088\u3046\u306b\u884c\u308f\u308c\u307e\u3059\u3002\n\n```math\n\\begin{align}\nS(\\textsf{\"alice\"}) & = \\mathsf{string} \\\\\nS(\\mathsf{22}) & = \\mathsf{int} \\\\\nS(\\{ \\textsf{Name}: \\textsf{\"alice\"},\\ \\textsf{Age}: \\textsf{22} \\}) & = \\{ \\textsf{Name}: \\textsf{string},\\ \\textsf{Age}: \\textsf{int} \\} \\\\\n\\end{align}\n```\n\n\u307e\u305f\u3001$[\\kern-.5em[ \\ \\lbrace \\textsf{Name}: \\textsf{string},\\ \\textsf{Age}: \\textsf{int} \\rbrace \\ ]\\kern-.5em]$ \u306e\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\uff08\u8a73\u7d30\u306e\u8aac\u660e\u306f\u7701\u7565\u3057\u307e\u3059\u3002\uff09\n\n```math\n\\begin{array}{l}\n\\mathsf{type}\\ \\mathsf{Person}(x_1 : \\mathsf{Data}) = \\\\\n\\quad \\mathsf{member}\\ \\mathsf{Name} : \\mathsf{string} = \\\\\n\\quad \\quad \\mathsf{convField}(\\mathsf{Person}, \\mathsf{Name}, x_1, \\lambda x_2 \\to \\mathsf{convPrim}(\\mathsf{string}, x_2)) \\\\\n\\quad \\mathsf{member}\\ \\mathsf{Age} : \\mathsf{int} = \\\\\n\\quad \\quad \\mathsf{convField}(\\mathsf{Person}, \\mathsf{Age}, x_1, \\lambda x_2 \\to \\mathsf{convPrim}(\\mathsf{int}, x_2)) \\\\\n\\end{array}\n```\n\n## \u5c11\u3057\u8907\u96d1\u306a\u4f8b\n\n\u3057\u304b\u3057\u73fe\u5b9f\u306e\u4e16\u754c\u306f\u3082\u3046\u5c11\u3057\u8907\u96d1\u3067\u3001\u6b21\u306e\u30b3\u30fc\u30c9\u306b\u3042\u308b\u3088\u3046\u306b\u3001\u6a19\u672c\u306b\u3088\u3063\u3066\u578b\u304c\u307e\u3061\u307e\u3061\u3060\u3063\u305f\u308a\u3057\u307e\u3059\u3002[1] \u306b\u3082\u985e\u4f3c\u306e\u4f8b\u304c\u3042\u308a\u307e\u3059\u3002\n\n```fsharp:Script2.fsx\n#r \"path/to/FSharp.Data.dll\"\n\n[<Literal>]\nlet samples = \"\"\" \n  [\n    { \"name\": \"alice\", \"age\": 22 }, \n    { \"name\": \"bob, \"age\": 25.5\" }, \n    { \"name\": \"carol\" }\n  ]    \n\"\"\"\n// \u6a19\u672c1:  { \"name\": \"alice\", \"age\": 22 }\n// \u6a19\u672c2:  { \"name\": \"bob\", \"age\": 25.5 }\n// \u6a19\u672c3:  { \"name\": \"carol\" }\n\ntype Person = FSharp.Data.JsonProvider<samples, SampleIsList = true>\n// \u6a19\u672c1\u304b\u3089\u63a8\u6e2c\u3055\u308c\u308b\u578b:  { Name: string, Age: int }\n// \u6a19\u672c2\u304b\u3089\u63a8\u6e2c\u3055\u308c\u308b\u578b:  { Name: string, Age: decimal }\n// \u6a19\u672c3\u304b\u3089\u63a8\u6e2c\u3055\u308c\u308b\u578b:  { Name: string }\n// \u6a19\u672c1-\u6a19\u672c3\u304b\u3089\u63a8\u6e2c\u3055\u308c\u308b\u578b:  { Name: string, Age: option<decimal> }\n\nlet person = Person.Parse(System.Console.ReadLine ())\n// person \u306f\u30e1\u30f3\u30d0 Name: string \u3068 Age: option<decimal> \u3092\u6301\u3064\n\nmatch person.Age with\n| Some age -> printfn \"name: %s, age: %M\" person.Name age\n| None -> printfn \"name: %s\" person.Name\n```\n\n\u3053\u306e\u3088\u3046\u306a\u5834\u5408\u3001\u578b\u30d7\u30ed\u30d0\u30a4\u30c0\u306f\u3001\u5168\u3066\u306e\u6a19\u672c\u3092\u30ab\u30d0\u30fc\u3057\u3064\u3064\u3082\u3067\u304d\u308b\u3060\u3051\u5c0f\u3055\u3044\u578b\u3092\u63a8\u6e2c\u3057\u3088\u3046\u3068\u3057\u307e\u3059\u3002\u305d\u306e\u7d50\u679c\u3068\u3057\u3066\u3001\u3053\u306e\u4f8b\u306e\u5834\u5408\u3001\u578b\u30d7\u30ed\u30d0\u30a4\u30c0\u306b\u3088\u308a\u63d0\u4f9b\u3055\u308c\u308b\u578b Person \u306e\u30d7\u30ed\u30d1\u30c6\u30a3 ``Age`` \u306f\u578b ``option<decimal>`` \u3092\u6301\u3064\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u3046\u3057\u305f\u8907\u6570\u306e\u6a19\u672c\u304b\u3089\u306e\u578b\u306e\u63a8\u6e2c\u306f\u3001\u6b21\u306b\u793a\u3059\u6f14\u7b97\u306b\u3088\u3063\u3066\u5b9f\u73fe\u3055\u308c\u307e\u3059\u3002\n\n| [1] \u3067\u306e\u5b9a\u5f0f\u5316 | \u30e9\u30a4\u30d6\u30e9\u30ea\u5185\u306e\u95a2\u6570 | \u8aac\u660e |\n|:---:|:---:|:---|\n| $\\mathsf{csh}$ | [``subtypeInfered``](https://github.com/fsharp/FSharp.Data/blob/master/src/CommonRuntime/StructuralInference.fs) | \u8907\u6570\u306e\u578b\u306e\u5171\u901a\u90e8\u5206\u578b\u3092\u6c42\u3081\u308b |\n\n\u3053\u306e\u6f14\u7b97\u306f\u3001\u5024\u306e\u5b58\u5728\u6027\u3092\u8003\u616e\u3057\u305f\u4e0a\u3067\u3001\u90e8\u5206\u578b\u95a2\u4fc2 $<:$ \u306b\u95a2\u3059\u308b\u4e0a\u9650\u3092\u6c42\u3081\u308b\u6f14\u7b97\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001$\\mathsf{int} <: \\mathsf{decimal}$ \u3067\u3042\u308b\u3053\u3068\u3088\u308a\u3001 $\\mathsf{csh}(\\mathsf{int}, \\mathsf{decimal}) = \\mathsf{decimal}$ \u3067\u3059\u3002\u307e\u305f\u3001 $\\mathsf{csh}(\\mathsf{decimal}, \\mathsf{null}) = \\mathsf{nullable}\\langle \\mathsf{decimal} \\rangle$ \u3067\u3059[^nullable]\u3002\u306a\u304a\u3001[1] \u3067\u306f\u90e8\u5206\u578b\u95a2\u4fc2\u306b\u76f8\u5f53\u3059\u308b shape preference relation \u3068\u3044\u3046\u95a2\u4fc2 $\\sqsubseteq$ \u3092\u5b9a\u7fa9\u3057\u3001\u5b9f\u969b\u306b\u306f\u3053\u306e\u95a2\u4fc2\u306b\u57fa\u3065\u3044\u3066 $\\mathsf{csh}$ \u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n\n[^nullable]: $\\mathsf{nullable}\\langle \\cdots \\rangle$ \u306f\u6700\u7d42\u7684\u306b\u306f $\\mathsf{option}\\langle \\cdots \\rangle$ \u3068\u89e3\u91c8\u3055\u308c\u307e\u3059\u3002\n\n\u5b9f\u306f [1] \u3067\u306f\u6570\u5024\u578b\u3068\u3057\u3066 $\\mathsf{int}$ \u3068 $\\mathsf{float}$ \u3057\u304b\u6271\u3063\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u5b9f\u969b\u306e F# Data \u306e[\u5b9f\u88c5](https://github.com/fsharp/FSharp.Data/blob/master/src/CommonRuntime/StructuralInference.fs)\u3067\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u591a\u69d8\u306a\u6570\u5024\u578b\u3092\u6271\u3063\u3066\u3044\u307e\u3059\u3002\u5b9f\u88c5\u3067\u306f\u3001\u6a19\u672c\u306e $\\mathsf{0}$ \u3084 $\\mathsf{1}$ \u3068\u3044\u3046\u5024\u304b\u3089\u6574\u6570\u578b\u3060\u3051\u3067\u306a\u304f\u30d6\u30fc\u30eb\u578b\u3082\u63a8\u8ad6\u53ef\u80fd\u306a\u3088\u3046\u3001\u5de5\u592b\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n```math\n\\begin{align*}\n& \\mathsf{float} :> \\mathsf{decimal} :> \\mathsf{int64} :> \\mathsf{int} :> \\mathsf{bit} :> \\mathsf{bit0} \\\\\n& \\mathsf{float} :> \\mathsf{decimal} :> \\mathsf{int64} :> \\mathsf{int} :> \\mathsf{bit} :> \\mathsf{bit1} \\\\\n& \\mathsf{bool} :> \\mathsf{bit} :> \\mathsf{bit0} \\\\\n& \\mathsf{bool} :> \\mathsf{bit} :> \\mathsf{bit1} \\\\\n\\end{align*}\n```\n\n## \u53c2\u8003\u6587\u732e\n\n1. T. Petricek, G. Guerra, and D. Syme. Types from data: Making structured data first-class citizens in F#. In Proc. PLDI 2016, pp. 477-490. ACM, 2016.\n2. [Github: fsharp/FSharp.Data](https://github.com/fsharp/FSharp.Data)\n3. [F# Data: \u30c7\u30fc\u30bf\u30a2\u30af\u30bb\u30b9\u7528\u30e9\u30a4\u30d6\u30e9\u30ea](https://fsharp.github.io/FSharp.Data/ja/)\n", "tags": ["F#"]}