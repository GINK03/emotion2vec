{"context": " More than 1 year has passed since last update.\n\nAkka-Stream\u5b66\u7fd2\u30b7\u30ea\u30fc\u30ba\n\n\u89e6\u3063\u3066\u307f\u305f\nMat\u3063\u3066\u4f55\uff1f\n\n\n\u306f\u3058\u3081\u306b\n\u6982\u8981\u7684\u306b\u90e8\u54c1\u7fa4\u3092\u8272\u3005\u3068\u3055\u308f\u308d\u3046\u3068\u601d\u3063\u305f\u3051\u308c\u3069\u3082\u3001\u3044\u304b\u3093\u305b\u3093\u6570\u304c\u591a\u3044\u306e\u3067\u3068\u308a\u3042\u3048\u305a\u91cd\u8981\u3063\u307d\u3044\u3082\u306e\u306e\u4f7f\u3044\u65b9\u3092\u3055\u3089\u3063\u3068\u78ba\u8a8d\u3002\n\nAkka-Stream\u3067\u306e\u51e6\u7406\u5b9f\u884c\u306e\u78ba\u8a8d\n\n\u901a\u5e38\u306emap\u95a2\u6570\u306e\u632f\u308b\u821e\u3044\n\u4ee5\u4e0b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\n(1 to 3)\n  .map{ i => println(s\"A: $i\"); i }\n  .map{ i => println(s\"B: $i\"); i }\n  .map{ i => println(s\"C: $i\"); i }\n\n\u3053\u3046\u306a\u308b\u3002\nA: 1\nA: 2\nA: 3\nB: 1\nB: 2\nB: 3\nC: 1\nC: 2\nC: 3\n\n\nAkka-Stream\u3067\u306emap\u95a2\u6570\u306e\u632f\u308b\u821e\u3044\nSource(1 to 3)\n  .map{ i => println(s\"A: $i\"); i }\n  .map{ i => println(s\"B: $i\"); i }\n  .map{ i => println(s\"C: $i\"); i }\n  .runWith(Sink.ignore)\n\n\u3053\u3046\u306a\u308b\u3002\nA: 1\nA: 2\nB: 1\nA: 3\nB: 2\nC: 1\nB: 3\nC: 2\nC: 3\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u4f8b\u306f\u3053\u3061\u3089\u304b\u3089\u5f15\u7528\n\nThe next element is processed by a stage as soon as it is emitted the previous one.\n\n\u901a\u5e38\u306eCollection\u7cfb\u306emap\u306e\u632f\u308b\u821e\u3044\u3068\u306f\u7570\u306a\u308a\u7d42\u308f\u3063\u305f\u3082\u306e\u304b\u3089\u3069\u3093\u3069\u3093\u6b21\u306e\u30b9\u30c6\u30fc\u30b8\u306b\u51e6\u7406\u304c\u9001\u3089\u308c\u308b\u3068\u3044\u3046\u632f\u308b\u821e\u3044\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u305f(filter\u7b49\u3082\u540c\u69d8\u306e\u632f\u308b\u821e\u3044\u3092\u3059\u308b)\u3002\n\u5b9f\u884c\u57fa\u76e4\u3068\u3057\u3066Actor\u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u8003\u3048\u308b\u3068\u3001\u3053\u306e\u52d5\u304d\u306f\u307e\u3055\u306b\uff11\u3064\uff11\u3064\u306e\u8981\u7d20\u304c\u30e1\u30c3\u30bb\u30fc\u30b8\u3068\u3057\u3066Actor\u9593\u3092\u99c6\u3051\u5de1\u3063\u3066\u3044\u308b\u611f\u3058\u3067\u3059\u306d\u3002\n\n\u767b\u5834\u4eba\u7269\u306e\u6574\u7406\n\nSource,Flow,Sink,RunnableGraph\n\u4ee3\u8868\u7684\u306a\u3082\u306e\u306fSource\u3001Flow\u3001Sink\u3002\u305d\u308c\u3089\u3092\u7d50\u5408\u3057\u3066\u51fa\u6765\u308bRunnableGraph\u3002\n\u306a\u304a\u30aa\u30d5\u30a3\u30b7\u30e3\u30eb\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306e\u7528\u8a9e\u306e\u89e3\u8aac\u306f\u3053\u3061\u3089\u3092\u53c2\u7167\nimport akka.actor.ActorSystem\nimport akka.stream.ActorMaterializer\nimport akka.stream.scaladsl._\n\nimport scala.concurrent.Future\n\nobject Main extends App {\n  implicit val system = ActorSystem(\"toyo-sample\")\n  implicit val materializer = ActorMaterializer()\n\n  val source: Source[Int, Unit] = Source(1 to 10)\n  val flow1: Flow[Int, Int, Unit] = Flow[Int].filter(_ % 3 == 0)\n  val flow2: Flow[Int, Int, Unit] = Flow[Int].map(_ * 2)\n  val sink: Sink[Int, Future[Unit]] = Sink.foreach(println)\n\n  val g: RunnableGraph[Unit] = source.via(flow1).via(flow2).to(sink)\n\n  g.run()\n\n  Thread.sleep(1000)\n  system.shutdown()\n  system.awaitTermination()\n}\n\n\u30d1\u30fc\u30c4\u3092\u5206\u3051\u3066\u5ba3\u8a00\u3057\u306a\u304f\u3066\u3082\u30c1\u30a7\u30fc\u30f3\u3055\u305b\u3066\u3053\u3046\u66f8\u304f\u3053\u3068\u3082\u51fa\u6765\u308b\u3002\nSource(1 to 10)\n  .filter(_ % 3 == 0)\n  .map(_ * 2)\n  .runForeach(println)\n\n\u306a\u304a\u3053\u306e\u5834\u5408 runForeach \u304b\u3089\u306f\u623b\u308a\u5024 Future[Unit] \u304c\u8fd4\u3063\u3066\u304f\u308b\u306e\u3067\u3001Future\u3092\u4f7f\u3063\u3066ActorSystem\u306e\u7d42\u4e86\u51e6\u7406\u3082\u307e\u3068\u3081\u3061\u3083\u3046\u3002\nSource(1 to 10)\n  .filter(_ % 3 == 0)\n  .map(_ * 2)\n  .runForeach(println)\n  .andThen { case _ =>\n    system.shutdown()\n    system.awaitTermination()  \n  }     \n\n\nFlowGraph\nFlowGraph\u3092\u4f7f\u3046\u3068\u4e0a\u8a18\u3068\u540c\u69d8\u306e\u30b3\u30fc\u30c9\u3092\u4ee5\u4e0b\u306e\u69d8\u306b\u3082\u66f8\u3051\u308b\u3002\nval g: RunnableGraph[Unit] = FlowGraph.closed() { implicit builder =>\n  import FlowGraph.Implicits._\n  source ~> flow1 ~> flow2 ~> sink\n}\n\ng.run()\n\n\u6b63\u76f4\u3001\u3053\u308c\u3060\u3051\u3060\u3068\u3061\u3087\u3063\u3068\u5fae\u5999\u306a\u306e\u3060\u304c\u30aa\u30d5\u30a3\u30b7\u30e3\u30eb\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306ebroadcast\u3084merge\u3092\u4f7f\u3063\u305f\u4f8b\u306f\u30b0\u30e9\u30d5\u3092\u76f4\u611f\u7684\u306b\u8868\u73fe\u3067\u304d\u3066\u304a\u308aDSL\u304c\u30a4\u30b1\u3066\u3044\u308b\u3068\u611f\u3058\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u3002\n\nStage\nStage\u3068\u547c\u3070\u308c\u308b\u3082\u306e\u306f\u8272\u3093\u306a\u7a2e\u985e\u5b58\u5728\u3059\u308b\u304c\u3001\u3053\u3053\u3067\u306f\u4e00\u756a\u57fa\u672c\u306b\u306a\u308a\u305d\u3046\u306aPushPullStage\u3067\u305d\u306e\u632f\u308b\u821e\u3044\u3092\u78ba\u8a8d\u3059\u308b\u3002\nStage\u306f\u3001Source\u3084Flow\u3067\u7528\u610f\u3055\u308c\u3066\u3044\u308bmap\u3084filter\u3084fold\u3068\u3044\u3063\u305f\u95a2\u6570\u3067\u306f\u8868\u73fe\u3067\u304d\u306a\u3044\u3088\u3046\u306a\u51e6\u7406\u3092\u66f8\u304f\u3068\u304d\u306b\u91cd\u5b9d\u3059\u308b\u3002\n\u4f8b\u3068\u3057\u30661\u304b\u30899\u306e\u8981\u7d20\u3092\u6301\u3064Source\u304b\u3089\u4e0b\u6d41\u306b\u5bfe\u3057\u3066\u305d\u306e\u307e\u307e\u6d41\u3059\u306e\u3067\u306f\u306a\u304f2\u8981\u7d20\u306e\u548c\u3092\u6c42\u3081\u305f\u4e0a\u3067\u6b21\u3078\u6d41\u3059\u3068\u3044\u3046\u4e8b\u3092\u3084\u3063\u3066\u307f\u3088\u3046\u3068\u601d\u3046\u3002\n\u671f\u5f85\u3059\u308b\u7d50\u679c\u306f\u3053\u3046\u3044\u3046\u51fa\u529b\u3002\n3\n7\n11\n15\n9 // \u8981\u7d20\u6570\u304c\u5947\u6570\u3067\u30da\u30a2\u304c\u3067\u304d\u306a\u304b\u3063\u305f\u3082\u306e\u306b\u3064\u3044\u3066\u306f\u305d\u306e\u307e\u307e\u51fa\u529b\n\n\u30b3\u30fc\u30c9\u4f8b\u3002\nSource(1 to 9)\n  .transform(() => new PushPullStage[Int, Int] {\n    var cache: Option[Int] = None\n    override def onPush(elem: Int, ctx: Context[Int]): SyncDirective = cache match {\n      case Some(n) =>\n        cache = None\n        ctx.push(n + elem) // \u6b21(Downstream)\u306b\u9001\u51fa\uff01\n      case None =>\n        cache = Some(elem)\n        ctx.pull() // \u6b21\u306e\u5024\u3092\u304f\u308c\u3068(Upstream\u306b)\u8981\u6c42\uff01\n    }\n\n    override def onPull(ctx: Context[Int]): SyncDirective = {\n      if (ctx.isFinishing && cache.isDefined) ctx.pushAndFinish(cache.get)  // \u6700\u5f8c\u306e\u8981\u7d20\u3092\u9001\u51fa\n      else ctx.pull()\n    }\n\n    override def onUpstreamFinish(ctx: Context[Int]): TerminationDirective = {\n      // If the stream is finished, we need to emit the last element in the onPull block.\n      // It is not allowed to directly emit elements from a termination block\n      // (onUpstreamFinish or onUpstreamFailure)\n      ctx.absorbTermination()\n    }\n  })\n  .runForeach(println)\n\n\u53c2\u8003\u30b3\u30fc\u30c9\n\u306a\u304a\u3001\u4f5c\u3063\u305f\u5f8c\u306b\u6c17\u3065\u3044\u305f\u304c\u4eca\u56de\u306e\u30b5\u30f3\u30d7\u30eb\u306f\u65e2\u5b58\u306e\u95a2\u6570\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u5b9f\u73fe\u53ef\u80fd\u3060\u3063\u305f\u3002\u3002\nSource(1 to 9)\n  .grouped(2)\n  .map(_.sum)\n  .runForeach(println)\n\n\u3061\u306a\u307f\u306b map \u3084 filter \u306b\u6e21\u3057\u305f\u95a2\u6570\u306f akka.stream.impl.fusing.Ops.scala \u3067\u5b9a\u7fa9\u3055\u308c\u305fMap\u3084Filter\u3068\u3044\u3063\u305fcase class\u3067\u4fdd\u6301\u3055\u308c\u3001\u5b9f\u884c\u3055\u308c\u308b\u3002\n\u3067\u3001\u3053\u308c\u3089\u306ecase class\u306fPushStage\u3092\u7d99\u627f\u3057\u3066\u3044\u308b\u3002\n\nakka.stream.impl.fusing.Ops.scala\nprivate[akka] final case class Map[In, Out](f: In \u21d2 Out, decider: Supervision.Decider) extends PushStage[In, Out] {\n  override def onPush(elem: In, ctx: Context[Out]): SyncDirective = ctx.push(f(elem))\n\n  override def decide(t: Throwable): Supervision.Directive = decider(t)\n}\n\nprivate[akka] final case class Filter[T](p: T \u21d2 Boolean, decider: Supervision.Decider) extends PushStage[T, T] {\n  override def onPush(elem: T, ctx: Context[T]): SyncDirective =\n    if (p(elem)) ctx.push(elem)\n    else ctx.pull()\n\n  override def decide(t: Throwable): Supervision.Directive = decider(t)\n}\n\n\n# Akka-Stream\u5b66\u7fd2\u30b7\u30ea\u30fc\u30ba\n- [\u89e6\u3063\u3066\u307f\u305f](http://qiita.com/mtoyoshi/items/52d0d87d0115be7741e9)\n- [Mat\u3063\u3066\u4f55\uff1f](http://qiita.com/mtoyoshi/items/d3a1dfac273a0ab98bc1)\n\n# \u306f\u3058\u3081\u306b\n\u6982\u8981\u7684\u306b\u90e8\u54c1\u7fa4\u3092\u8272\u3005\u3068\u3055\u308f\u308d\u3046\u3068\u601d\u3063\u305f\u3051\u308c\u3069\u3082\u3001\u3044\u304b\u3093\u305b\u3093\u6570\u304c\u591a\u3044\u306e\u3067\u3068\u308a\u3042\u3048\u305a\u91cd\u8981\u3063\u307d\u3044\u3082\u306e\u306e\u4f7f\u3044\u65b9\u3092\u3055\u3089\u3063\u3068\u78ba\u8a8d\u3002\n\n# Akka-Stream\u3067\u306e\u51e6\u7406\u5b9f\u884c\u306e\u78ba\u8a8d\n## \u901a\u5e38\u306emap\u95a2\u6570\u306e\u632f\u308b\u821e\u3044\n\u4ee5\u4e0b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\n\n```scala\n(1 to 3)\n  .map{ i => println(s\"A: $i\"); i }\n  .map{ i => println(s\"B: $i\"); i }\n  .map{ i => println(s\"C: $i\"); i }\n```\n\n\u3053\u3046\u306a\u308b\u3002\n\n```\nA: 1\nA: 2\nA: 3\nB: 1\nB: 2\nB: 3\nC: 1\nC: 2\nC: 3\n```\n\n## Akka-Stream\u3067\u306emap\u95a2\u6570\u306e\u632f\u308b\u821e\u3044\n\n```scala\nSource(1 to 3)\n  .map{ i => println(s\"A: $i\"); i }\n  .map{ i => println(s\"B: $i\"); i }\n  .map{ i => println(s\"C: $i\"); i }\n  .runWith(Sink.ignore)\n```\n\n\u3053\u3046\u306a\u308b\u3002\n\n```\nA: 1\nA: 2\nB: 1\nA: 3\nB: 2\nC: 1\nB: 3\nC: 2\nC: 3\n```\n\n[\u30d7\u30ed\u30b0\u30e9\u30e0\u4f8b\u306f\u3053\u3061\u3089\u304b\u3089\u5f15\u7528](http://doc.akka.io/docs/akka-stream-and-http-experimental/1.0/scala/stream-rate.html)\n\n> The next element is processed by a stage as soon as it is emitted the previous one.\n\n\u901a\u5e38\u306eCollection\u7cfb\u306emap\u306e\u632f\u308b\u821e\u3044\u3068\u306f\u7570\u306a\u308a\u7d42\u308f\u3063\u305f\u3082\u306e\u304b\u3089\u3069\u3093\u3069\u3093\u6b21\u306e\u30b9\u30c6\u30fc\u30b8\u306b\u51e6\u7406\u304c\u9001\u3089\u308c\u308b\u3068\u3044\u3046\u632f\u308b\u821e\u3044\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u305f(filter\u7b49\u3082\u540c\u69d8\u306e\u632f\u308b\u821e\u3044\u3092\u3059\u308b)\u3002\n\u5b9f\u884c\u57fa\u76e4\u3068\u3057\u3066Actor\u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u8003\u3048\u308b\u3068\u3001\u3053\u306e\u52d5\u304d\u306f\u307e\u3055\u306b\uff11\u3064\uff11\u3064\u306e\u8981\u7d20\u304c\u30e1\u30c3\u30bb\u30fc\u30b8\u3068\u3057\u3066Actor\u9593\u3092\u99c6\u3051\u5de1\u3063\u3066\u3044\u308b\u611f\u3058\u3067\u3059\u306d\u3002\n\n# \u767b\u5834\u4eba\u7269\u306e\u6574\u7406\n## Source,Flow,Sink,RunnableGraph\n\u4ee3\u8868\u7684\u306a\u3082\u306e\u306fSource\u3001Flow\u3001Sink\u3002\u305d\u308c\u3089\u3092\u7d50\u5408\u3057\u3066\u51fa\u6765\u308bRunnableGraph\u3002\n\u306a\u304a\u30aa\u30d5\u30a3\u30b7\u30e3\u30eb\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306e\u7528\u8a9e\u306e\u89e3\u8aac\u306f[\u3053\u3061\u3089\u3092\u53c2\u7167](http://doc.akka.io/docs/akka-stream-and-http-experimental/1.0/scala/stream-flows-and-basics.html#Core_concepts)\n\n```scala\nimport akka.actor.ActorSystem\nimport akka.stream.ActorMaterializer\nimport akka.stream.scaladsl._\n\nimport scala.concurrent.Future\n\nobject Main extends App {\n  implicit val system = ActorSystem(\"toyo-sample\")\n  implicit val materializer = ActorMaterializer()\n\n  val source: Source[Int, Unit] = Source(1 to 10)\n  val flow1: Flow[Int, Int, Unit] = Flow[Int].filter(_ % 3 == 0)\n  val flow2: Flow[Int, Int, Unit] = Flow[Int].map(_ * 2)\n  val sink: Sink[Int, Future[Unit]] = Sink.foreach(println)\n\n  val g: RunnableGraph[Unit] = source.via(flow1).via(flow2).to(sink)\n\n  g.run()\n\n  Thread.sleep(1000)\n  system.shutdown()\n  system.awaitTermination()\n}\n```\n\n\u30d1\u30fc\u30c4\u3092\u5206\u3051\u3066\u5ba3\u8a00\u3057\u306a\u304f\u3066\u3082\u30c1\u30a7\u30fc\u30f3\u3055\u305b\u3066\u3053\u3046\u66f8\u304f\u3053\u3068\u3082\u51fa\u6765\u308b\u3002\n\n```scala\nSource(1 to 10)\n  .filter(_ % 3 == 0)\n  .map(_ * 2)\n  .runForeach(println)\n```\n\n\u306a\u304a\u3053\u306e\u5834\u5408 ```runForeach``` \u304b\u3089\u306f\u623b\u308a\u5024 ```Future[Unit]``` \u304c\u8fd4\u3063\u3066\u304f\u308b\u306e\u3067\u3001Future\u3092\u4f7f\u3063\u3066ActorSystem\u306e\u7d42\u4e86\u51e6\u7406\u3082\u307e\u3068\u3081\u3061\u3083\u3046\u3002\n\n```scala\nSource(1 to 10)\n  .filter(_ % 3 == 0)\n  .map(_ * 2)\n  .runForeach(println)\n  .andThen { case _ =>\n    system.shutdown()\n    system.awaitTermination()  \n  }     \n```\n\n## FlowGraph\nFlowGraph\u3092\u4f7f\u3046\u3068\u4e0a\u8a18\u3068\u540c\u69d8\u306e\u30b3\u30fc\u30c9\u3092\u4ee5\u4e0b\u306e\u69d8\u306b\u3082\u66f8\u3051\u308b\u3002\n\n```scala\nval g: RunnableGraph[Unit] = FlowGraph.closed() { implicit builder =>\n  import FlowGraph.Implicits._\n  source ~> flow1 ~> flow2 ~> sink\n}\n\ng.run()\n```\n\n\u6b63\u76f4\u3001\u3053\u308c\u3060\u3051\u3060\u3068\u3061\u3087\u3063\u3068\u5fae\u5999\u306a\u306e\u3060\u304c[\u30aa\u30d5\u30a3\u30b7\u30e3\u30eb\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://doc.akka.io/docs/akka-stream-and-http-experimental/1.0/scala/stream-graphs.html)\u3067\u306ebroadcast\u3084merge\u3092\u4f7f\u3063\u305f\u4f8b\u306f\u30b0\u30e9\u30d5\u3092\u76f4\u611f\u7684\u306b\u8868\u73fe\u3067\u304d\u3066\u304a\u308aDSL\u304c\u30a4\u30b1\u3066\u3044\u308b\u3068\u611f\u3058\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u3002\n\n## Stage\nStage\u3068\u547c\u3070\u308c\u308b\u3082\u306e\u306f[\u8272\u3093\u306a\u7a2e\u985e\u5b58\u5728\u3059\u308b](http://doc.akka.io/api/akka-stream-and-http-experimental/1.0/?_ga=1.78938259.640177791.1413100595#akka.stream.stage.package)\u304c\u3001\u3053\u3053\u3067\u306f\u4e00\u756a\u57fa\u672c\u306b\u306a\u308a\u305d\u3046\u306aPushPullStage\u3067\u305d\u306e\u632f\u308b\u821e\u3044\u3092\u78ba\u8a8d\u3059\u308b\u3002\nStage\u306f\u3001Source\u3084Flow\u3067\u7528\u610f\u3055\u308c\u3066\u3044\u308bmap\u3084filter\u3084fold\u3068\u3044\u3063\u305f\u95a2\u6570\u3067\u306f\u8868\u73fe\u3067\u304d\u306a\u3044\u3088\u3046\u306a\u51e6\u7406\u3092\u66f8\u304f\u3068\u304d\u306b\u91cd\u5b9d\u3059\u308b\u3002\n\n\u4f8b\u3068\u3057\u30661\u304b\u30899\u306e\u8981\u7d20\u3092\u6301\u3064Source\u304b\u3089\u4e0b\u6d41\u306b\u5bfe\u3057\u3066\u305d\u306e\u307e\u307e\u6d41\u3059\u306e\u3067\u306f\u306a\u304f2\u8981\u7d20\u306e\u548c\u3092\u6c42\u3081\u305f\u4e0a\u3067\u6b21\u3078\u6d41\u3059\u3068\u3044\u3046\u4e8b\u3092\u3084\u3063\u3066\u307f\u3088\u3046\u3068\u601d\u3046\u3002\n\u671f\u5f85\u3059\u308b\u7d50\u679c\u306f\u3053\u3046\u3044\u3046\u51fa\u529b\u3002\n\n```\n3\n7\n11\n15\n9 // \u8981\u7d20\u6570\u304c\u5947\u6570\u3067\u30da\u30a2\u304c\u3067\u304d\u306a\u304b\u3063\u305f\u3082\u306e\u306b\u3064\u3044\u3066\u306f\u305d\u306e\u307e\u307e\u51fa\u529b\n```\n\n\u30b3\u30fc\u30c9\u4f8b\u3002\n\n```scala\nSource(1 to 9)\n  .transform(() => new PushPullStage[Int, Int] {\n    var cache: Option[Int] = None\n    override def onPush(elem: Int, ctx: Context[Int]): SyncDirective = cache match {\n      case Some(n) =>\n        cache = None\n        ctx.push(n + elem) // \u6b21(Downstream)\u306b\u9001\u51fa\uff01\n      case None =>\n        cache = Some(elem)\n        ctx.pull() // \u6b21\u306e\u5024\u3092\u304f\u308c\u3068(Upstream\u306b)\u8981\u6c42\uff01\n    }\n\n    override def onPull(ctx: Context[Int]): SyncDirective = {\n      if (ctx.isFinishing && cache.isDefined) ctx.pushAndFinish(cache.get)  // \u6700\u5f8c\u306e\u8981\u7d20\u3092\u9001\u51fa\n      else ctx.pull()\n    }\n\n    override def onUpstreamFinish(ctx: Context[Int]): TerminationDirective = {\n      // If the stream is finished, we need to emit the last element in the onPull block.\n      // It is not allowed to directly emit elements from a termination block\n      // (onUpstreamFinish or onUpstreamFailure)\n      ctx.absorbTermination()\n    }\n  })\n  .runForeach(println)\n```\n\n[\u53c2\u8003\u30b3\u30fc\u30c9](http://doc.akka.io/docs/akka-stream-and-http-experimental/1.0/scala/stream-cookbook.html#Calculating_the_digest_of_a_ByteString_stream)\n\n\u306a\u304a\u3001\u4f5c\u3063\u305f\u5f8c\u306b\u6c17\u3065\u3044\u305f\u304c\u4eca\u56de\u306e\u30b5\u30f3\u30d7\u30eb\u306f\u65e2\u5b58\u306e\u95a2\u6570\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u5b9f\u73fe\u53ef\u80fd\u3060\u3063\u305f\u3002\u3002\n\n```scala\nSource(1 to 9)\n  .grouped(2)\n  .map(_.sum)\n  .runForeach(println)\n```\n\n\u3061\u306a\u307f\u306b ```map``` \u3084 ```filter``` \u306b\u6e21\u3057\u305f\u95a2\u6570\u306f [akka.stream.impl.fusing.Ops.scala](https://github.com/akka/akka/blob/release-2.3-dev/akka-stream/src/main/scala/akka/stream/impl/fusing/Ops.scala) \u3067\u5b9a\u7fa9\u3055\u308c\u305fMap\u3084Filter\u3068\u3044\u3063\u305fcase class\u3067\u4fdd\u6301\u3055\u308c\u3001\u5b9f\u884c\u3055\u308c\u308b\u3002\n\u3067\u3001\u3053\u308c\u3089\u306ecase class\u306fPushStage\u3092\u7d99\u627f\u3057\u3066\u3044\u308b\u3002\n\n```scala:akka.stream.impl.fusing.Ops.scala\nprivate[akka] final case class Map[In, Out](f: In \u21d2 Out, decider: Supervision.Decider) extends PushStage[In, Out] {\n  override def onPush(elem: In, ctx: Context[Out]): SyncDirective = ctx.push(f(elem))\n\n  override def decide(t: Throwable): Supervision.Directive = decider(t)\n}\n\nprivate[akka] final case class Filter[T](p: T \u21d2 Boolean, decider: Supervision.Decider) extends PushStage[T, T] {\n  override def onPush(elem: T, ctx: Context[T]): SyncDirective =\n    if (p(elem)) ctx.push(elem)\n    else ctx.pull()\n\n  override def decide(t: Throwable): Supervision.Directive = decider(t)\n}\n```\n", "tags": ["Scala", "Akka", "Akka-Stream"]}