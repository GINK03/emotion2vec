{"context": " More than 1 year has passed since last update.\u6a19\u6e96\u554f\u984c\u3068\u5b9f\u884c\u65b9\u6cd5\n\n\u6700\u5c0f\u8cbb\u7528\u6d41\u554f\u984c\n\u6709\u5411\u30b0\u30e9\u30d5G=(V,E)G=(V,E)G=(V,E)\u306b\u304a\u3044\u3066\u3001\u5404\u8fba\u306e\u5bb9\u91cf\u3068\u91cd\u307f\u3055\u3089\u306b\u7bc0\u70b9\u306e\u9700\u8981\u91cf\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u5404\u8fba\u306e\u5bb9\u91cf\u3092\u8d85\u904e\u305b\u305a\u306b\u5404\u8fba\u306e\u6d41\u91cf\u306b\u5bfe\u3059\u308b\u91cd\u307f\u306e\u7dcf\u548c\u304c\u304c\u6700\u5c0f\u3068\u306a\u308b\u30d5\u30ed\u30fc\u3092\u6c42\u3081\u3088\u3002\n- \u5404\u7bc0\u70b9\u306b\u304a\u3044\u3066\u3001\u300c\u6d41\u5165\u91cf - \u6d41\u51fa\u91cf\u300d\u306f\u3001\u9700\u8981\u91cf\u3068\u7b49\u3057\u3044\u3002\n- \u9700\u8981\u91cf\u304c\u8ca0\u306e\u5834\u5408\u3001\u4f9b\u7d66\u91cf\u3092\u8868\u3059\u3002\n- \u5168\u3066\u306e\u7bc0\u70b9\u306e\u9700\u8981\u91cf\u306e\u548c\u306f0\u3067\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u3002\n\n\u5b9f\u884c\u65b9\u6cd5\n\nusage\nSignature: nx.min_cost_flow(G, demand='demand', capacity='capacity', weight='weight')\nDocstring:\nReturn a minimum cost flow satisfying all demands in digraph G.\n\nG is a digraph with edge costs and capacities and in which nodes\nhave demand, i.e., they want to send or receive some amount of\nflow. A negative demand means that the node wants to send flow, a\npositive demand means that the node want to receive flow. A flow on\nthe digraph G satisfies all demand if the net flow into each node\nis equal to the demand of that node.\n\n\n\npython\n# CSV\u30c7\u30fc\u30bf\nimport pandas as pd, networkx as nx\nfrom ortoolpy import graph_from_table, networkx_draw\ntbn = pd.read_csv('data/node0.csv')\ntbe = pd.read_csv('data/edge0.csv')\ng = graph_from_table(tbn, tbe, directed=True)\nresult = nx.min_cost_flow(g)\nfor i, d in result.items():\n    for j, f in d.items():\n        if f: print((i, j), f)\n\n\n\n\u7d50\u679c\n(0, 1) 1\n(0, 3) 1\n(0, 4) 2\n(4, 5) 1\n\n\n\npython\n# \u4e71\u6570\u30c7\u30fc\u30bf\nimport networkx as nx\ng = nx.fast_gnp_random_graph(8, 0.2, 1, True)\ng.node[1]['demand'] = -2 # \u4f9b\u7d66\ng.node[7]['demand'] = 2 # \u9700\u8981\ng.adj[2][7]['capacity'] = 1 # \u5bb9\u91cf\nresult = nx.min_cost_flow(g)\nfor i, d in result.items():\n    for j, f in d.items():\n        if f: print((i, j), f)\n\n\n\n\u7d50\u679c\n(1, 2) 2\n(2, 3) 1\n(2, 7) 1\n(3, 7) 1\n\n\n\n\u30c7\u30fc\u30bf\n\ndata/node0.csv\ndata/edge0.csv\n\n[\u6a19\u6e96\u554f\u984c\u3068\u5b9f\u884c\u65b9\u6cd5](0f6c1a4415d196e64314)\n##\u6700\u5c0f\u8cbb\u7528\u6d41\u554f\u984c\n\u6709\u5411\u30b0\u30e9\u30d5$G=(V,E)$\u306b\u304a\u3044\u3066\u3001\u5404\u8fba\u306e\u5bb9\u91cf\u3068\u91cd\u307f\u3055\u3089\u306b\u7bc0\u70b9\u306e\u9700\u8981\u91cf\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u5404\u8fba\u306e\u5bb9\u91cf\u3092\u8d85\u904e\u305b\u305a\u306b\u5404\u8fba\u306e\u6d41\u91cf\u306b\u5bfe\u3059\u308b\u91cd\u307f\u306e\u7dcf\u548c\u304c\u304c\u6700\u5c0f\u3068\u306a\u308b\u30d5\u30ed\u30fc\u3092\u6c42\u3081\u3088\u3002\n- \u5404\u7bc0\u70b9\u306b\u304a\u3044\u3066\u3001\u300c\u6d41\u5165\u91cf - \u6d41\u51fa\u91cf\u300d\u306f\u3001\u9700\u8981\u91cf\u3068\u7b49\u3057\u3044\u3002\n- \u9700\u8981\u91cf\u304c\u8ca0\u306e\u5834\u5408\u3001\u4f9b\u7d66\u91cf\u3092\u8868\u3059\u3002\n- \u5168\u3066\u306e\u7bc0\u70b9\u306e\u9700\u8981\u91cf\u306e\u548c\u306f0\u3067\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u3002\n\n##\u5b9f\u884c\u65b9\u6cd5\n```text:usage\nSignature: nx.min_cost_flow(G, demand='demand', capacity='capacity', weight='weight')\nDocstring:\nReturn a minimum cost flow satisfying all demands in digraph G.\n\nG is a digraph with edge costs and capacities and in which nodes\nhave demand, i.e., they want to send or receive some amount of\nflow. A negative demand means that the node wants to send flow, a\npositive demand means that the node want to receive flow. A flow on\nthe digraph G satisfies all demand if the net flow into each node\nis equal to the demand of that node.\n```\n```python:python\n# CSV\u30c7\u30fc\u30bf\nimport pandas as pd, networkx as nx\nfrom ortoolpy import graph_from_table, networkx_draw\ntbn = pd.read_csv('data/node0.csv')\ntbe = pd.read_csv('data/edge0.csv')\ng = graph_from_table(tbn, tbe, directed=True)\nresult = nx.min_cost_flow(g)\nfor i, d in result.items():\n    for j, f in d.items():\n        if f: print((i, j), f)\n```\n```text:\u7d50\u679c\n(0, 1) 1\n(0, 3) 1\n(0, 4) 2\n(4, 5) 1\n```\n\n```python:python\n# \u4e71\u6570\u30c7\u30fc\u30bf\nimport networkx as nx\ng = nx.fast_gnp_random_graph(8, 0.2, 1, True)\ng.node[1]['demand'] = -2 # \u4f9b\u7d66\ng.node[7]['demand'] = 2 # \u9700\u8981\ng.adj[2][7]['capacity'] = 1 # \u5bb9\u91cf\nresult = nx.min_cost_flow(g)\nfor i, d in result.items():\n    for j, f in d.items():\n        if f: print((i, j), f)\n```\n```text:\u7d50\u679c\n(1, 2) 2\n(2, 3) 1\n(2, 7) 1\n(3, 7) 1\n```\n\n##\u30c7\u30fc\u30bf\n- [data/node0.csv](https://dl.dropboxusercontent.com/u/35689878/data/node0.csv)\n- [data/edge0.csv](https://dl.dropboxusercontent.com/u/35689878/data/edge0.csv)\n", "tags": ["\u6700\u9069\u5316", "Python"]}