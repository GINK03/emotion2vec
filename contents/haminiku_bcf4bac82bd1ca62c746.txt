{"context": " More than 1 year has passed since last update.pip install\u53ef\u80fd\u306aPython\u3067\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u3092\u691c\u8a3c\u3059\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u3059\u3002ruby\u7248\u30681\u4e07\u4ef6\u306e\u30af\u30ed\u30b9\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b\u306e\u8a18\u4e8b\u304c\u7d20\u6674\u3089\u3057\u304b\u3063\u305f\u306e\u3067\u53c2\u8003\u306b\u3057\u3066Python\u7248\u3092\u4f5c\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3057\u305f\u3002\n\ninstall\n\ninstall\npip install mynumber\n\n\nhttps://pypi.python.org/pypi/mynumber\n\nsample code\n\ninstall\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\nfrom mynumber import MyNumber\n\n# \u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u691c\u8a3c\nmy_number = 123456789018\nprint MyNumber.validate(my_number)\n\n# \u3082\u3063\u3068\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u691c\u8a3c\nfor my_number in MyNumber.gets(1000):\n    assert MyNumber.validate(my_number)\n\n# \u3082\u3063\u3068\u3082\u3063\u3068\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u691c\u8a3c by iterator:\u91cd\u8907\u3042\u308a\nfor my_number in MyNumber():\n    assert MyNumber.validate(my_number)\n\n\n\n\u6839\u62e0\u3068\u306a\u308b\u6cd5\u4ee4\n\u25cb\u7dcf\u52d9\u7701\u4ee4\u7b2c\u516b\u5341\u4e94\u53f7\n\n\u7b2c\u4e94\u6761\u4ee4\u7b2c\u516b\u6761\u306e\u7dcf\u52d9\u7701\u4ee4\u3067\u5b9a\u3081\u308b\u7b97\u5f0f\u306f\u3001\u6b21\u306b\u63b2\u3052\u308b\u7b97\u5f0f\u3068\u3059\u308b\u3002\n\n\u7b97\u5f0f\n$11 - \\Bigl( \\displaystyle\\sum_{n=1}^{11} P_n \\times Q_n \\Bigr) \\% 11$\n\u305f\u3060\u3057\u3001 $\\Bigl( \\displaystyle\\sum_{n=1}^{11} P_n \\times Q_n \\Bigr) \\% 11 \u2266\uff11 $\u306e\u5834\u5408\u306f\u3001$0$\u3068\u3059\u308b\n\n\u7b97\u5f0f\u306e\u7b26\u53f7\n$Pn$ : \u500b\u4eba\u756a\u53f7\u3092\u69cb\u6210\u3059\u308b\u691c\u67fb\u7528\u6570\u5b57\u4ee5\u5916\u306e\u5341\u4e00\u6841\u306e\u756a\u53f7\u306e\u6700\u4e0b\u4f4d\u306e\u6841\u3092 $1$ \u6841\u76ee\u3068\u3057\u305f\u3068\u304d\u306e $n$ \u6841\u76ee\u306e\u6570\u5b57\n$Qn$ : $1\u2266n\u22666$ \u306e\u3068\u304d $n+1$\u3001 $7\u2266n\u226611$ \u306e\u3068\u304d $n-5$\n\u539f\u6587\u3068\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b\u306e\u8a18\u4e8b\u306e\u6570\u5f0f\u3092\u5f15\u7528\u3055\u305b\u3066\u9802\u304d\u307e\u3057\u305f\u3002\n\n\u4ed6\u8a00\u8a9e\u7248\u306e\u3054\u7d39\u4ecb\n\nRuby - \u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b\nC++\u3067\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b\n\n\nRuby\u7248\u3067\u691c\u8a3c\n\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b\u306e\u8a18\u4e8b\u306e\u30b3\u30fc\u30c9\u3067\u30af\u30ed\u30b9\u30c1\u30a7\u30c3\u30af\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\nruby_mynumber_validate.rb\n#!/usr/bin/env ruby\ndef validate_my_number(mynumber)\n  # \u6574\u6570\u5217\u5316\n  digits = mynumber.to_s.chars.map(&:to_i)\n  # 12\u6841\u3057\u304b\u8a8d\u3081\u306a\u3044\n  return false unless digits.length == 12\n  # \u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u5206\u96e2\u3057\u307e\u3059\n  check_digit = digits.pop\n\n  # \u6b8b\u3063\u305f\u6570\u5b57\u3092\u5c0f\u3055\u3044\u65b9\u304b\u3089\u8abf\u3079\u307e\u3059\n  digits.reverse!\n\n  # \u6570\u5217\u306e\u548c\u309211\u3067\u5272\u3063\u305f\u4f59\u308a\u3092\u8a08\u7b97\u3057\u307e\u3059\n  remainder =  (1..11).inject(0) {|sum, i|\n    p = digits[i-1]\n    q = (i <= 6) ? i+1 : i-5\n    sum + p*q\n  } % 11\n\n  case remainder\n    when 0,1\n      check_digit === 0\n    else\n      check_digit === (11 - remainder)\n  end\nend\n\nmy_numbers = [\n    xxxxx,\n    xxxxx,\n    xxxxx,\n    xxxxx,\n]\n\nmy_numbers.each do |num|\n  r = validate_my_number(num)\n  if r == false then\n    p num\n  end\nend\n\n\n\n\n\n\npip install\u53ef\u80fd\u306aPython\u3067\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u3092\u691c\u8a3c\u3059\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u3059\u3002ruby\u7248\u30681\u4e07\u4ef6\u306e\u30af\u30ed\u30b9\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002[\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b](http://qiita.com/qube81/items/fa6ef94d3c8615b0ce64)\u306e\u8a18\u4e8b\u304c\u7d20\u6674\u3089\u3057\u304b\u3063\u305f\u306e\u3067\u53c2\u8003\u306b\u3057\u3066Python\u7248\u3092\u4f5c\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3057\u305f\u3002\n\n\n# install\n```py:install\npip install mynumber\n```\nhttps://pypi.python.org/pypi/mynumber\n\n# sample code\n```py:install\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\nfrom mynumber import MyNumber\n\n# \u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u691c\u8a3c\nmy_number = 123456789018\nprint MyNumber.validate(my_number)\n\n# \u3082\u3063\u3068\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u691c\u8a3c\nfor my_number in MyNumber.gets(1000):\n    assert MyNumber.validate(my_number)\n\n# \u3082\u3063\u3068\u3082\u3063\u3068\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u691c\u8a3c by iterator:\u91cd\u8907\u3042\u308a\nfor my_number in MyNumber():\n    assert MyNumber.validate(my_number)\n```\n\n# \u6839\u62e0\u3068\u306a\u308b\u6cd5\u4ee4\n[\u25cb\u7dcf\u52d9\u7701\u4ee4\u7b2c\u516b\u5341\u4e94\u53f7](http://www.soumu.go.jp/main_content/000327387.pdf)\n\n## \u7b2c\u4e94\u6761\u4ee4\u7b2c\u516b\u6761\u306e\u7dcf\u52d9\u7701\u4ee4\u3067\u5b9a\u3081\u308b\u7b97\u5f0f\u306f\u3001\u6b21\u306b\u63b2\u3052\u308b\u7b97\u5f0f\u3068\u3059\u308b\u3002\n\n###\u7b97\u5f0f\n$11 - \\Bigl( \\displaystyle\\sum_{n=1}^{11} P_n \\times Q_n \\Bigr) \\% 11$\n\u305f\u3060\u3057\u3001 $\\Bigl( \\displaystyle\\sum_{n=1}^{11} P_n \\times Q_n \\Bigr) \\% 11 \u2266\uff11 $\u306e\u5834\u5408\u306f\u3001$0$\u3068\u3059\u308b\n\n###\u7b97\u5f0f\u306e\u7b26\u53f7\n$Pn$ : \u500b\u4eba\u756a\u53f7\u3092\u69cb\u6210\u3059\u308b\u691c\u67fb\u7528\u6570\u5b57\u4ee5\u5916\u306e\u5341\u4e00\u6841\u306e\u756a\u53f7\u306e\u6700\u4e0b\u4f4d\u306e\u6841\u3092 $1$ \u6841\u76ee\u3068\u3057\u305f\u3068\u304d\u306e $n$ \u6841\u76ee\u306e\u6570\u5b57\n$Qn$ : $1\u2266n\u22666$ \u306e\u3068\u304d $n+1$\u3001 $7\u2266n\u226611$ \u306e\u3068\u304d $n-5$\n\n[\u539f\u6587](http://www.soumu.go.jp/main_content/000327387.pdf)\u3068[\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b](http://qiita.com/qube81/items/fa6ef94d3c8615b0ce64)\u306e\u8a18\u4e8b\u306e\u6570\u5f0f\u3092\u5f15\u7528\u3055\u305b\u3066\u9802\u304d\u307e\u3057\u305f\u3002\n\n\n# \u4ed6\u8a00\u8a9e\u7248\u306e\u3054\u7d39\u4ecb\n- [Ruby - \u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b](http://qiita.com/qube81/items/fa6ef94d3c8615b0ce64)\n- [C++\u3067\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b](http://qiita.com/yumetodo/items/600ca0df422010cbc4c1)\n\n\n# Ruby\u7248\u3067\u691c\u8a3c\n[\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b](http://qiita.com/qube81/items/fa6ef94d3c8615b0ce64)\u306e\u8a18\u4e8b\u306e\u30b3\u30fc\u30c9\u3067\u30af\u30ed\u30b9\u30c1\u30a7\u30c3\u30af\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n```rb:ruby_mynumber_validate.rb\n#!/usr/bin/env ruby\ndef validate_my_number(mynumber)\n  # \u6574\u6570\u5217\u5316\n  digits = mynumber.to_s.chars.map(&:to_i)\n  # 12\u6841\u3057\u304b\u8a8d\u3081\u306a\u3044\n  return false unless digits.length == 12\n  # \u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u5206\u96e2\u3057\u307e\u3059\n  check_digit = digits.pop\n\n  # \u6b8b\u3063\u305f\u6570\u5b57\u3092\u5c0f\u3055\u3044\u65b9\u304b\u3089\u8abf\u3079\u307e\u3059\n  digits.reverse!\n\n  # \u6570\u5217\u306e\u548c\u309211\u3067\u5272\u3063\u305f\u4f59\u308a\u3092\u8a08\u7b97\u3057\u307e\u3059\n  remainder =  (1..11).inject(0) {|sum, i|\n    p = digits[i-1]\n    q = (i <= 6) ? i+1 : i-5\n    sum + p*q\n  } % 11\n\n  case remainder\n    when 0,1\n      check_digit === 0\n    else\n      check_digit === (11 - remainder)\n  end\nend\n\nmy_numbers = [\n    xxxxx,\n    xxxxx,\n    xxxxx,\n    xxxxx,\n]\n\nmy_numbers.each do |num|\n  r = validate_my_number(num)\n  if r == false then\n    p num\n  end\nend\n\n\n\n\n```\n\n", "tags": ["Python", "PyPI"]}