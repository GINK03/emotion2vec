{"context": "\u5404\u30ad\u30fc\u3054\u3068\u306b\u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u3068\u306a\u308b\u30ad\u30e3\u30b7\u30e5\u3092\u4fdd\u6301\u3059\u308b\u30de\u30c3\u30d7\u306e\u5b9f\u88c5\n\nTODO\n\n\n\u8aac\u660e\u3092\u66f8\u304f\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u66f8\u304f\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u5b9f\u884c\u7d50\u679c\u3092\u8cbc\u308b\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u66f8\u304f\n\n\n\u53c2\u8003\nhttps://www.amazon.co.jp/dp/4873117046\n\n\u30b3\u30fc\u30c9\n\nCacheMap.java\npackage heignamerican.mt;\n\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.function.Supplier;\n\npublic class CacheMap {\n    /**\n     * \u30ad\u30fc\u3054\u3068\u306b\u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u3067\u3042\u308b\u5024\u3092\u751f\u6210\u3057\u3066\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u8fd4\u3059\u3002 \u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\n     *\n     * @param key\n     *            \u30ad\u30fc\n     * @param other\n     *            SingleHolder \u304c {@code key} \u4ee5\u5916\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4fdd\u3064\u5834\u5408\u306e\u4f8b\u793a\n     * @return\n     *            \u30ad\u30fc\u3054\u3068\u306e\u5024\n     */\n    public static Heavy get(final String key, final String other) {\n        // XXX \u3053\u3053\u306f\u3001computeIfAbsent \u3059\u308b\u304b putIfAbsent \u2192 get \u3059\u308b\u304b\u3067\u3061\u3087\u3063\u3068\u3060\u3051\u6027\u80fd\u7279\u6027\u304c\u7570\u306a\u308b\n        return cacheMap.computeIfAbsent(key, (_key) -> new SingleHolder(key, other)).get();\n    }\n\n    private static final ConcurrentMap<String, SingleHolder> cacheMap = new ConcurrentHashMap<>();\n\n    /**\n     * <p>\n     * Singleton \u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u4e00\u5ea6\u3060\u3051\u751f\u6210\u3057\u3066\u8fd4\u3059\u3002\n     *\n     * <p>\n     * {@link Heavy} \u5c02\u7528\u3067\u3001\u3053\u306e\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9 1 \u306b\u5bfe\u3057\u3066\u3001{@link Heavy} \u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u3092 1 \u4ef6\u3060\u3051\u6301\u3064\u3002<br>\n     * \u4ea4\u63db\u53ef\u80fd\u306b\u3059\u308b\u306e\u306f\u3061\u3087\u3063\u3068\u3081\u3093\u3069\u305d\u3046\u3002 \u7279\u306b\u300c\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570 > \u4e00\u610f\u6027\u3092\u8868\u73fe\u3059\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u7fa4\u300d \u306e\u5834\u5408\u3002<br>\n     *\n     */\n    private static class SingleHolder {\n        private final String key;\n        private final String other;\n\n        private SingleHolder(final String key, final String other) {\n            this.key = key;\n            this.other = other;\n        }\n\n        private Heavy get() {\n            return innerSupplier.get();\n        }\n\n        private Supplier<Heavy> innerSupplier = () -> createAndCache();\n\n        private synchronized Heavy createAndCache() {\n            class HeavyFactory implements Supplier<Heavy> {\n                private final Heavy instance = new Heavy(key, other);\n\n                @Override\n                public Heavy get() {\n                    return instance;\n                }\n            }\n\n            if (!HeavyFactory.class.isInstance(innerSupplier)) {\n                innerSupplier = new HeavyFactory();\n            }\n\n            return innerSupplier.get();\n        }\n    }\n}\n\n\n\nHeavy.java\npackage heignamerican.mt;\n\n/**\n * {@link #key} \u306b\u5bfe\u3057\u3066\u552f\u4e00\u306e\u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u3057\u3066\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u305f\u3044\u30af\u30e9\u30b9\u306e\u4f8b\u3002\n */\npublic class Heavy {\n    private final String key;\n    private final String other;\n\n    public Heavy(final String key, final String other) {\n        this.key = key;\n        this.other = other;\n    }\n\n    @Override\n    public String toString() {\n        return \"Heavy [key=\" + key + \", other=\" + other + \"]\";\n    }\n}\n\n\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3068\u8aac\u660e\nMT \u5b9f\u884c\u3067\u306e\u6319\u52d5\u78ba\u8a8d\u306e\u305f\u3081\u3001\u4f59\u8a08\u306a\u30b3\u30fc\u30c9\u3092\u52a0\u3048\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\nCacheMap \u306e\u4ee5\u4e0b\u306e2\u7b87\u6240\u3092\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u3067\u3001\u6027\u80fd\u7279\u6027\u306e\u9055\u3044\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n\u203b1 computeIfAbsent \u3059\u308b\u304b\u3001putIfAbsent \u3057\u3066 get \u3059\u308b\u304b\n\u203b2 SingleHolder\u521d\u671f\u5316\u6642\u306e\u9045\u5ef6\u306e\u6709\u7121\n\n\u3056\u3063\u304f\u308a\u8a00\u3046\u3068\u3001computeIfAbsent \u306f\u521d\u56de\u751f\u6210\u6642\u306e\u307f synchronized \u306b\u8fd1\u3044\u6319\u52d5\u3067\u5b8c\u5168\u306b\u30d6\u30ed\u30c3\u30af\u3057\u307e\u3059\u3002\n\u540c\u4e00\u306e key(name) \u306b\u5bfe\u3057\u3066\u306e\u307f\u30d6\u30ed\u30c3\u30af\u3057\u3066\u304f\u308c\u305f\u3089\u6700\u9069\u3060\u3063\u305f\u306e\u3067\u3059\u304c\n\u305d\u3046\u90fd\u5408\u3088\u3044\u3082\u306e\u3067\u306f\u306a\u3044\u3088\u3046\u3067\u3059\u3002\nputIfAbsent \u306e\u65b9\u306f\u3001SingleHolder \u3092\u305f\u304f\u3055\u3093\u4f5c\u3063\u3066\u6368\u3066\u308b(\u53ef\u80fd\u6027\u304c\u3042\u308b)\u306e\u3067\u3059\u304c\u3001\u30d6\u30ed\u30c3\u30af\u306f\u77ed\u304f\u306a\u308a\u307e\u3059\u3002\n(\u307e\u3042 SingleHolder \u306b\u3088\u308b Heavy \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u9045\u5ef6\u304c\u3042\u308b\u306e\u3067\u5927\u3057\u305f\u5dee\u306f\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u2026)\n\u203b2 \u306f \u203b1 \u306e\u9055\u3044\u3092\u660e\u78ba\u306b\u51fa\u3059\u305f\u3081\u306e\u66f8\u304d\u63db\u3048\u3067\u3001\u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\u3067\u306e\u9078\u629e\u80a2\u306f \u203b1 \u306e\u5dee\u7570\u3060\u3051\u3067\u3059\u3002\n\n\u4ee5\u4e0b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\nCacheMap.java\npackage heignamerican.mt.poc;\n\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.function.Supplier;\n\nimport heignamerican.mt.poc.Heavy.Key;\n\npublic class CacheMap {\n    public static Heavy get(final Key key, final AutoCloseable connection) {\n        // \u203b1\n        //cacheMap.putIfAbsent(key.name, new SingleHolder(key, connection));\n        //return cacheMap.get(key.name).get();\n        return cacheMap.computeIfAbsent(key.name, (_key) -> new SingleHolder(key, connection)).get();\n    }\n\n    private static final ConcurrentMap<String, SingleHolder> cacheMap = new ConcurrentHashMap<>();\n\n    private static class SingleHolder {\n        private final Key key;\n        private AutoCloseable connection;\n\n        public SingleHolder(final Key key, final AutoCloseable connection) {\n            this.key = key;\n            this.connection = connection;\n            // \u203b2\n            //SampleProgram.log(key, \"waiting for SingletonHolder\");\n            //SampleProgram.sleeping(1);\n            SampleProgram.log(key, \"SingleHolder created.\");\n        }\n\n        private Heavy get() {\n            return innerSupplier.get();\n        }\n\n        private Supplier<Heavy> innerSupplier = () -> createAndCache();\n\n        private synchronized Heavy createAndCache() {\n            class HeavyFactory implements Supplier<Heavy> {\n                private final Heavy instance = new Heavy(key, connection);\n\n                @Override\n                public Heavy get() {\n                    return instance;\n                }\n            }\n\n            if (!HeavyFactory.class.isInstance(innerSupplier)) {\n                innerSupplier = new HeavyFactory();\n            } else {\n                SampleProgram.log(key, \"Heavy already exists.\");\n            }\n            connection = null;\n\n            return innerSupplier.get();\n        }\n    }\n}\n\n\n\nHeavy.java\npackage heignamerican.mt.poc;\n\npublic class Heavy {\n    /*\n     * \u5225\u306b\u30ad\u30fc\u306f String \u3067\u3082\u826f\u3044\u306e\u3067\u3059\u304c\u3001\u3053\u3053\u3067\u306f MT \u3067\u306e\u6319\u52d5\u78ba\u8a8d\u306e\u305f\u3081\u756a\u53f7\u3082\u4ed8\u3051\u3066\u3044\u307e\u3059\n     */\n    public final Key key;\n\n    public Heavy(final Key key, final AutoCloseable connection) {\n        this.key = key;\n        Sample.log(key, \"waiting for Heavy\");\n        Sample.sleeping(2);\n        // connection \u304b\u3089\u30c7\u30fc\u30bf\u3092\u5927\u91cf\u306b\u53d6\u5f97\u3057\u3001\u30e1\u30e2\u30ea\u3092\u3075\u3093\u3060\u3093\u306b\u4f7f\u7528\u3059\u308b\u985e\u306e\u3084\u3064\n        Sample.log(key, \"Heavy created.\");\n    }\n\n    public static class Key {\n        public final int number;\n        public final String name;\n\n        public Key(int number, String name) {\n            this.number = number;\n            this.name = name;\n        }\n\n        @Override\n        public String toString() {\n            return \"Key[\" + number + \",\" + name + \"]\";\n        }\n    }\n}\n\n\n\nSampleProgram.java\npackage heignamerican.mt.poc;\n\nimport java.util.List;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\nimport heignamerican.mt.poc.Heavy.Key;\n\npublic class SampleProgram {\n    public static void main(String[] args) {\n        final List<Key> keys = withIndexPlus(\"aa\", \"aa\", \"aa\", \"aa\", \"bb\", \"bb\", \"cc\", \"cc\", \"aa\", \"bb\", \"cc\");\n        System.out.println(keys);\n        System.out.println(\"\u2704====================\u2704\");\n\n        final ExecutorService service = Executors.newFixedThreadPool(8);\n        for (Key key : keys) {\n            service.execute(() -> {\n                log(key, \"start.\");\n                CacheMap.get(key, null);\n            });\n        }\n        service.shutdown();\n    }\n\n    private static List<Key> withIndexPlus(final String... names) {\n        return IntStream.range(0, names.length)\n                .mapToObj(i -> new Key(i + 1, names[i]))\n                .collect(Collectors.toList());\n    }\n\n    private static final long start = System.currentTimeMillis();\n\n    public static void log(Key key, String message) {\n        System.out.printf(\"%5d(ms) %s [%2d,%s] ... %s%n\",\n                System.currentTimeMillis() - start, // \u7d4c\u904e\u30df\u30ea\u79d2\n                Thread.currentThread().getName(), // \u5b9f\u884c\u30b9\u30ec\u30c3\u30c9\u540d\n                key.number, key.name, // \u3053\u306e\u51e6\u7406\u3067\u4f7f\u7528\u3057\u305f key\n                message);\n    }\n\n    public static void sleeping(int sec) {\n        try {\n            Thread.sleep(sec * 1000);\n        } catch (InterruptedException e) {\n        }\n    }\n}\n\n\n\u5404\u30ad\u30fc\u3054\u3068\u306b\u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u3068\u306a\u308b\u30ad\u30e3\u30b7\u30e5\u3092\u4fdd\u6301\u3059\u308b\u30de\u30c3\u30d7\u306e\u5b9f\u88c5\n\n## TODO\n- [ ] \u8aac\u660e\u3092\u66f8\u304f\n- [x] \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u66f8\u304f\n- [ ] \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u5b9f\u884c\u7d50\u679c\u3092\u8cbc\u308b\n- [ ] \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u66f8\u304f\n\n## \u53c2\u8003\nhttps://www.amazon.co.jp/dp/4873117046\n\n# \u30b3\u30fc\u30c9\n\n```CacheMap.java\npackage heignamerican.mt;\n\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.function.Supplier;\n\npublic class CacheMap {\n    /**\n     * \u30ad\u30fc\u3054\u3068\u306b\u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u3067\u3042\u308b\u5024\u3092\u751f\u6210\u3057\u3066\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u8fd4\u3059\u3002 \u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\n     *\n     * @param key\n     *            \u30ad\u30fc\n     * @param other\n     *            SingleHolder \u304c {@code key} \u4ee5\u5916\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4fdd\u3064\u5834\u5408\u306e\u4f8b\u793a\n     * @return\n     *            \u30ad\u30fc\u3054\u3068\u306e\u5024\n     */\n    public static Heavy get(final String key, final String other) {\n        // XXX \u3053\u3053\u306f\u3001computeIfAbsent \u3059\u308b\u304b putIfAbsent \u2192 get \u3059\u308b\u304b\u3067\u3061\u3087\u3063\u3068\u3060\u3051\u6027\u80fd\u7279\u6027\u304c\u7570\u306a\u308b\n        return cacheMap.computeIfAbsent(key, (_key) -> new SingleHolder(key, other)).get();\n    }\n\n    private static final ConcurrentMap<String, SingleHolder> cacheMap = new ConcurrentHashMap<>();\n\n    /**\n     * <p>\n     * Singleton \u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u4e00\u5ea6\u3060\u3051\u751f\u6210\u3057\u3066\u8fd4\u3059\u3002\n     *\n     * <p>\n     * {@link Heavy} \u5c02\u7528\u3067\u3001\u3053\u306e\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9 1 \u306b\u5bfe\u3057\u3066\u3001{@link Heavy} \u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u3092 1 \u4ef6\u3060\u3051\u6301\u3064\u3002<br>\n     * \u4ea4\u63db\u53ef\u80fd\u306b\u3059\u308b\u306e\u306f\u3061\u3087\u3063\u3068\u3081\u3093\u3069\u305d\u3046\u3002 \u7279\u306b\u300c\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570 > \u4e00\u610f\u6027\u3092\u8868\u73fe\u3059\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u7fa4\u300d \u306e\u5834\u5408\u3002<br>\n     *\n     */\n    private static class SingleHolder {\n        private final String key;\n        private final String other;\n\n        private SingleHolder(final String key, final String other) {\n            this.key = key;\n            this.other = other;\n        }\n\n        private Heavy get() {\n            return innerSupplier.get();\n        }\n\n        private Supplier<Heavy> innerSupplier = () -> createAndCache();\n\n        private synchronized Heavy createAndCache() {\n            class HeavyFactory implements Supplier<Heavy> {\n                private final Heavy instance = new Heavy(key, other);\n\n                @Override\n                public Heavy get() {\n                    return instance;\n                }\n            }\n\n            if (!HeavyFactory.class.isInstance(innerSupplier)) {\n                innerSupplier = new HeavyFactory();\n            }\n\n            return innerSupplier.get();\n        }\n    }\n}\n```\n\n\n```Heavy.java\npackage heignamerican.mt;\n\n/**\n * {@link #key} \u306b\u5bfe\u3057\u3066\u552f\u4e00\u306e\u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u3057\u3066\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u305f\u3044\u30af\u30e9\u30b9\u306e\u4f8b\u3002\n */\npublic class Heavy {\n\tprivate final String key;\n\tprivate final String other;\n\n\tpublic Heavy(final String key, final String other) {\n\t\tthis.key = key;\n\t\tthis.other = other;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Heavy [key=\" + key + \", other=\" + other + \"]\";\n\t}\n}\n```\n\n\n# \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3068\u8aac\u660e\nMT \u5b9f\u884c\u3067\u306e\u6319\u52d5\u78ba\u8a8d\u306e\u305f\u3081\u3001\u4f59\u8a08\u306a\u30b3\u30fc\u30c9\u3092\u52a0\u3048\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\n\n\nCacheMap \u306e\u4ee5\u4e0b\u306e2\u7b87\u6240\u3092\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u3067\u3001\u6027\u80fd\u7279\u6027\u306e\u9055\u3044\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n * \u203b1 computeIfAbsent \u3059\u308b\u304b\u3001putIfAbsent \u3057\u3066 get \u3059\u308b\u304b\n * \u203b2 SingleHolder\u521d\u671f\u5316\u6642\u306e\u9045\u5ef6\u306e\u6709\u7121\n\n\u3056\u3063\u304f\u308a\u8a00\u3046\u3068\u3001computeIfAbsent \u306f\u521d\u56de\u751f\u6210\u6642\u306e\u307f synchronized \u306b\u8fd1\u3044\u6319\u52d5\u3067\u5b8c\u5168\u306b\u30d6\u30ed\u30c3\u30af\u3057\u307e\u3059\u3002\n\u540c\u4e00\u306e key(name) \u306b\u5bfe\u3057\u3066\u306e\u307f\u30d6\u30ed\u30c3\u30af\u3057\u3066\u304f\u308c\u305f\u3089\u6700\u9069\u3060\u3063\u305f\u306e\u3067\u3059\u304c\n\u305d\u3046\u90fd\u5408\u3088\u3044\u3082\u306e\u3067\u306f\u306a\u3044\u3088\u3046\u3067\u3059\u3002\n\nputIfAbsent \u306e\u65b9\u306f\u3001SingleHolder \u3092\u305f\u304f\u3055\u3093\u4f5c\u3063\u3066\u6368\u3066\u308b(\u53ef\u80fd\u6027\u304c\u3042\u308b)\u306e\u3067\u3059\u304c\u3001\u30d6\u30ed\u30c3\u30af\u306f\u77ed\u304f\u306a\u308a\u307e\u3059\u3002\n(\u307e\u3042 SingleHolder \u306b\u3088\u308b Heavy \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u9045\u5ef6\u304c\u3042\u308b\u306e\u3067\u5927\u3057\u305f\u5dee\u306f\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u2026)\n\n\u203b2 \u306f \u203b1 \u306e\u9055\u3044\u3092\u660e\u78ba\u306b\u51fa\u3059\u305f\u3081\u306e\u66f8\u304d\u63db\u3048\u3067\u3001\u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\u3067\u306e\u9078\u629e\u80a2\u306f \u203b1 \u306e\u5dee\u7570\u3060\u3051\u3067\u3059\u3002\n\n\n## \u4ee5\u4e0b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n```CacheMap.java\npackage heignamerican.mt.poc;\n\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.function.Supplier;\n\nimport heignamerican.mt.poc.Heavy.Key;\n\npublic class CacheMap {\n    public static Heavy get(final Key key, final AutoCloseable connection) {\n        // \u203b1\n        //cacheMap.putIfAbsent(key.name, new SingleHolder(key, connection));\n        //return cacheMap.get(key.name).get();\n        return cacheMap.computeIfAbsent(key.name, (_key) -> new SingleHolder(key, connection)).get();\n    }\n\n    private static final ConcurrentMap<String, SingleHolder> cacheMap = new ConcurrentHashMap<>();\n\n    private static class SingleHolder {\n        private final Key key;\n        private AutoCloseable connection;\n\n        public SingleHolder(final Key key, final AutoCloseable connection) {\n            this.key = key;\n            this.connection = connection;\n            // \u203b2\n            //SampleProgram.log(key, \"waiting for SingletonHolder\");\n            //SampleProgram.sleeping(1);\n            SampleProgram.log(key, \"SingleHolder created.\");\n        }\n\n        private Heavy get() {\n            return innerSupplier.get();\n        }\n\n        private Supplier<Heavy> innerSupplier = () -> createAndCache();\n\n        private synchronized Heavy createAndCache() {\n            class HeavyFactory implements Supplier<Heavy> {\n                private final Heavy instance = new Heavy(key, connection);\n\n                @Override\n                public Heavy get() {\n                    return instance;\n                }\n            }\n\n            if (!HeavyFactory.class.isInstance(innerSupplier)) {\n                innerSupplier = new HeavyFactory();\n            } else {\n                SampleProgram.log(key, \"Heavy already exists.\");\n            }\n            connection = null;\n\n            return innerSupplier.get();\n        }\n    }\n}\n```\n\n\n```Heavy.java\npackage heignamerican.mt.poc;\n\npublic class Heavy {\n    /*\n     * \u5225\u306b\u30ad\u30fc\u306f String \u3067\u3082\u826f\u3044\u306e\u3067\u3059\u304c\u3001\u3053\u3053\u3067\u306f MT \u3067\u306e\u6319\u52d5\u78ba\u8a8d\u306e\u305f\u3081\u756a\u53f7\u3082\u4ed8\u3051\u3066\u3044\u307e\u3059\n     */\n    public final Key key;\n\n    public Heavy(final Key key, final AutoCloseable connection) {\n        this.key = key;\n        Sample.log(key, \"waiting for Heavy\");\n        Sample.sleeping(2);\n        // connection \u304b\u3089\u30c7\u30fc\u30bf\u3092\u5927\u91cf\u306b\u53d6\u5f97\u3057\u3001\u30e1\u30e2\u30ea\u3092\u3075\u3093\u3060\u3093\u306b\u4f7f\u7528\u3059\u308b\u985e\u306e\u3084\u3064\n        Sample.log(key, \"Heavy created.\");\n    }\n\n    public static class Key {\n        public final int number;\n        public final String name;\n\n        public Key(int number, String name) {\n            this.number = number;\n            this.name = name;\n        }\n\n        @Override\n        public String toString() {\n            return \"Key[\" + number + \",\" + name + \"]\";\n        }\n    }\n}\n```\n\n\n```SampleProgram.java\npackage heignamerican.mt.poc;\n\nimport java.util.List;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\nimport heignamerican.mt.poc.Heavy.Key;\n\npublic class SampleProgram {\n    public static void main(String[] args) {\n        final List<Key> keys = withIndexPlus(\"aa\", \"aa\", \"aa\", \"aa\", \"bb\", \"bb\", \"cc\", \"cc\", \"aa\", \"bb\", \"cc\");\n        System.out.println(keys);\n        System.out.println(\"\u2704====================\u2704\");\n\n        final ExecutorService service = Executors.newFixedThreadPool(8);\n        for (Key key : keys) {\n            service.execute(() -> {\n                log(key, \"start.\");\n                CacheMap.get(key, null);\n            });\n        }\n        service.shutdown();\n    }\n\n    private static List<Key> withIndexPlus(final String... names) {\n        return IntStream.range(0, names.length)\n                .mapToObj(i -> new Key(i + 1, names[i]))\n                .collect(Collectors.toList());\n    }\n\n    private static final long start = System.currentTimeMillis();\n\n    public static void log(Key key, String message) {\n        System.out.printf(\"%5d(ms) %s [%2d,%s] ... %s%n\",\n                System.currentTimeMillis() - start, // \u7d4c\u904e\u30df\u30ea\u79d2\n                Thread.currentThread().getName(), // \u5b9f\u884c\u30b9\u30ec\u30c3\u30c9\u540d\n                key.number, key.name, // \u3053\u306e\u51e6\u7406\u3067\u4f7f\u7528\u3057\u305f key\n                message);\n    }\n\n    public static void sleeping(int sec) {\n        try {\n            Thread.sleep(sec * 1000);\n        } catch (InterruptedException e) {\n        }\n    }\n}\n```\n", "tags": ["Java", "java8"]}