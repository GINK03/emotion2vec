{"context": " More than 1 year has passed since last update.\n\n\u3053\u308c\u4f55\uff1f\n\u30bd\u30b1\u30c3\u30c8\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u3059\u308b\u305f\u3081\u306b\u3001ByteArray\u306e\u62e1\u5f35\u95a2\u6570\u3092\u4f5c\u3089\u306a\u304d\u3083\u2192\n\u9069\u5f53\u306b\u4f5c\u3063\u305f\u2192\n\u3042\u30014bit\u5e45\u306e\u6570\u5024\u3068\u304b\u3001\u5fae\u5999\u306a\u3084\u3064\u3069\u3046\u3084\u3063\u305f\u3089\u3044\u3044\u304b\u306a\u3002\u3002\u3002\u2192\nBitSet\u3092\u62e1\u5f35\u3057\u305f\u65b9\u304c\u3044\u3044\u306e\u3067\u306f\uff1f\u2190\u4eca\u30b3\u30b3\n\u305d\u3082\u305d\u3082\u52d5\u304f\u304b\u3069\u3046\u304b\u3082\u5206\u304b\u3089\u306a\u3044\u3051\u3069\u3001\u6298\u89d2\uff08\u9069\u5f53\u306b\uff09\u4f5c\u3063\u305f\u306e\u3067\u4f9b\u990a\u3002\nimport java.util.*\n\nfun ByteArray.setShort(fromIndex: Int, value: Short) {\n    require(fromIndex + 1 <= this.lastIndex)\n\n    val intValue = value.toInt()\n    this[fromIndex] = (intValue ushr 8).toByte()\n    this[fromIndex + 1] = (intValue and 0xFF).toByte()\n}\n\nfun ByteArray.getShort(fromIndex: Int): Short {\n    require(fromIndex + 1 <= this.lastIndex)\n\n    val firstByteIntValue = this[fromIndex].toInt()\n    val secondByteIntValue = this[fromIndex + 1].toInt()\n    val intValue = firstByteIntValue shl 8 + secondByteIntValue\n    return intValue.toShort()\n}\n\nfun ByteArray.setInt(fromIndex: Int, value: Int) {\n    require(fromIndex + 3 <= this.lastIndex)\n\n    this[fromIndex] = (value ushr 24).toByte()\n    this[fromIndex + 1] = (value ushr 16 and 0xFF).toByte()\n    this[fromIndex + 2] = (value ushr 8 and 0xFF).toByte()\n    this[fromIndex + 3] = (value and 0xFF).toByte()\n}\n\nfun ByteArray.getInt(fromIndex: Int): Int {\n    require(fromIndex + 3 <= this.lastIndex)\n\n    val firstByteIntValue = this[fromIndex].toInt()\n    val secondByteIntValue = this[fromIndex + 1].toInt()\n    val thirdByteIntValue = this[fromIndex + 2].toInt()\n    val fourthByteIntValue = this[fromIndex + 3].toInt()\n\n    return firstByteIntValue shl 24 + secondByteIntValue shl 16 +\n            thirdByteIntValue shl 8 + fourthByteIntValue\n}\n\nprivate fun isASCII(char: Char): Boolean {\n    return when (char.toInt()) {\n        in 0x20..0x7E, /* \u5370\u5b57\u53ef\u80fd\u6587\u5b57 */\n        in 0x09..0x0A, /* 0x09 = tab, 0x0A = LF */\n        0x0D /* CR */\n        -> true\n        else -> false\n    }\n}\n\nfun ByteArray.setASCII(index: Int, value: Char) {\n    require(index <= this.lastIndex)\n\n    /* ASCII\u6587\u5b57\u304b\u3069\u3046\u304b\u5224\u5b9a */\n    require(isASCII(value))\n\n    this[index] = value.toByte()\n}\n\nfun ByteArray.getASCII(index: Int): Char {\n    require(index <= this.lastIndex)\n    check(isASCII(this[index].toChar()))\n\n    return this[index].toChar()\n}\n\n/**\n * [asciiString]\u3092[ByteArray]\u306b\u683c\u7d0d\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3002\n * [fromIndex]\u4f4d\u7f6e\u3092\u542b\u3081\u3066\u5024\u3092\u66f8\u304d\u8fbc\u307f\u3001\u66f8\u304d\u8fbc\u307f\u7d42\u4e86\u4f4d\u7f6e\u3092\u8fd4\u3059\u3002\n *\n *\n@param[fromIndex] ByteArray\u5185\u306e\u958b\u59cb\u4f4d\u7f6e\n@param[asciiString] ByteArray\u306b\u683c\u7d0d\u3059\u308bASCII\u6587\u5b57\u5217\n@return \u66f8\u304d\u8fbc\u307f\u7d42\u4e86\u4f4d\u7f6e +1 \u3002\u7d9a\u3051\u3066ByteArray\u306b\u66f8\u304d\u8fbc\u3080\u306a\u3089\u3001\u3053\u306e\u4f4d\u7f6e\u304b\u3089\u7d9a\u3051\u308c\u3070\u826f\u3044\u3002\n */\nfun ByteArray.setASCIIString(fromIndex: Int, asciiString: String): Int {\n    if (asciiString.equals(\"\")) return fromIndex\n\n    /* ASCII\u6587\u5b57\u304b\u3069\u3046\u304b\u5224\u5b9a */\n    require(asciiString.all {\n        when (it.toInt()) {\n            in 0x20..0x7E, /* \u5370\u5b57\u53ef\u80fd\u6587\u5b57 */\n            in 0x09..0x0A, /* 0x09 = tab, 0x0A = LF */\n            0x0D /* CR */\n            -> true\n            else -> false\n        }\n    })\n\n    /*\n     ASCII\u6587\u5b57\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\u3088\u308a\u5148\u306b\u7f6e\u3044\u3066\u306f\u3044\u3051\u306a\u3044\u3002\n     \u5883\u754c\u30c1\u30a7\u30c3\u30af\u3092\u3057\u3066\u3044\u308b\u304c\u3001\u5148\u306bASCII\u6587\u5b57\u5224\u5b9a\u3092\u3057\u3066\u304a\u304b\u306a\u3044\u3068\u3001\n     \u6587\u5b57\u5217\u306e\u30b5\u30a4\u30ba\u3092\u5c0e\u3051\u306a\u3044\u3002\uff08\u5168\u3066\u306e\u6587\u5b57\u304c1\u30d0\u30a4\u30c8\u3067\u3042\u308b\u524d\u63d0\u3067\u8a08\u7b97\u3057\u3066\u3044\u308b\u3002\uff09\n    */\n    require(fromIndex + asciiString.length <= this.lastIndex)\n\n    var counter = 0\n    for (c in asciiString) {\n        this[fromIndex + counter] = c.toByte()\n        counter++\n    }\n\n    return fromIndex + counter\n}\n\nfun ByteArray.getASCIIString(fromIndex: Int, toIndex: Int): String {\n    require(fromIndex < toIndex)\n    require(toIndex <= this.lastIndex)\n\n    val strBuilder = StringBuilder()\n\n    this.slice(fromIndex..(toIndex - 1))\n            .forEach {\n                check(isASCII(it.toChar()))\n                strBuilder.append(it.toChar())\n            }\n\n    return strBuilder.toString()\n}\n\n# \u3053\u308c\u4f55\uff1f\n\u30bd\u30b1\u30c3\u30c8\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u3059\u308b\u305f\u3081\u306b\u3001ByteArray\u306e\u62e1\u5f35\u95a2\u6570\u3092\u4f5c\u3089\u306a\u304d\u3083\u2192\n\u9069\u5f53\u306b\u4f5c\u3063\u305f\u2192\n\u3042\u30014bit\u5e45\u306e\u6570\u5024\u3068\u304b\u3001\u5fae\u5999\u306a\u3084\u3064\u3069\u3046\u3084\u3063\u305f\u3089\u3044\u3044\u304b\u306a\u3002\u3002\u3002\u2192\nBitSet\u3092\u62e1\u5f35\u3057\u305f\u65b9\u304c\u3044\u3044\u306e\u3067\u306f\uff1f\u2190\u4eca\u30b3\u30b3\n\n\u305d\u3082\u305d\u3082\u52d5\u304f\u304b\u3069\u3046\u304b\u3082\u5206\u304b\u3089\u306a\u3044\u3051\u3069\u3001\u6298\u89d2\uff08\u9069\u5f53\u306b\uff09\u4f5c\u3063\u305f\u306e\u3067\u4f9b\u990a\u3002\n\n```kotlin\nimport java.util.*\n\nfun ByteArray.setShort(fromIndex: Int, value: Short) {\n    require(fromIndex + 1 <= this.lastIndex)\n\n    val intValue = value.toInt()\n    this[fromIndex] = (intValue ushr 8).toByte()\n    this[fromIndex + 1] = (intValue and 0xFF).toByte()\n}\n\nfun ByteArray.getShort(fromIndex: Int): Short {\n    require(fromIndex + 1 <= this.lastIndex)\n\n    val firstByteIntValue = this[fromIndex].toInt()\n    val secondByteIntValue = this[fromIndex + 1].toInt()\n    val intValue = firstByteIntValue shl 8 + secondByteIntValue\n    return intValue.toShort()\n}\n\nfun ByteArray.setInt(fromIndex: Int, value: Int) {\n    require(fromIndex + 3 <= this.lastIndex)\n\n    this[fromIndex] = (value ushr 24).toByte()\n    this[fromIndex + 1] = (value ushr 16 and 0xFF).toByte()\n    this[fromIndex + 2] = (value ushr 8 and 0xFF).toByte()\n    this[fromIndex + 3] = (value and 0xFF).toByte()\n}\n\nfun ByteArray.getInt(fromIndex: Int): Int {\n    require(fromIndex + 3 <= this.lastIndex)\n\n    val firstByteIntValue = this[fromIndex].toInt()\n    val secondByteIntValue = this[fromIndex + 1].toInt()\n    val thirdByteIntValue = this[fromIndex + 2].toInt()\n    val fourthByteIntValue = this[fromIndex + 3].toInt()\n\n    return firstByteIntValue shl 24 + secondByteIntValue shl 16 +\n            thirdByteIntValue shl 8 + fourthByteIntValue\n}\n\nprivate fun isASCII(char: Char): Boolean {\n    return when (char.toInt()) {\n        in 0x20..0x7E, /* \u5370\u5b57\u53ef\u80fd\u6587\u5b57 */\n        in 0x09..0x0A, /* 0x09 = tab, 0x0A = LF */\n        0x0D /* CR */\n        -> true\n        else -> false\n    }\n}\n\nfun ByteArray.setASCII(index: Int, value: Char) {\n    require(index <= this.lastIndex)\n\n    /* ASCII\u6587\u5b57\u304b\u3069\u3046\u304b\u5224\u5b9a */\n    require(isASCII(value))\n\n    this[index] = value.toByte()\n}\n\nfun ByteArray.getASCII(index: Int): Char {\n    require(index <= this.lastIndex)\n    check(isASCII(this[index].toChar()))\n\n    return this[index].toChar()\n}\n\n/**\n * [asciiString]\u3092[ByteArray]\u306b\u683c\u7d0d\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3002\n * [fromIndex]\u4f4d\u7f6e\u3092\u542b\u3081\u3066\u5024\u3092\u66f8\u304d\u8fbc\u307f\u3001\u66f8\u304d\u8fbc\u307f\u7d42\u4e86\u4f4d\u7f6e\u3092\u8fd4\u3059\u3002\n *\n *\n@param[fromIndex] ByteArray\u5185\u306e\u958b\u59cb\u4f4d\u7f6e\n@param[asciiString] ByteArray\u306b\u683c\u7d0d\u3059\u308bASCII\u6587\u5b57\u5217\n@return \u66f8\u304d\u8fbc\u307f\u7d42\u4e86\u4f4d\u7f6e +1 \u3002\u7d9a\u3051\u3066ByteArray\u306b\u66f8\u304d\u8fbc\u3080\u306a\u3089\u3001\u3053\u306e\u4f4d\u7f6e\u304b\u3089\u7d9a\u3051\u308c\u3070\u826f\u3044\u3002\n */\nfun ByteArray.setASCIIString(fromIndex: Int, asciiString: String): Int {\n    if (asciiString.equals(\"\")) return fromIndex\n\n    /* ASCII\u6587\u5b57\u304b\u3069\u3046\u304b\u5224\u5b9a */\n    require(asciiString.all {\n        when (it.toInt()) {\n            in 0x20..0x7E, /* \u5370\u5b57\u53ef\u80fd\u6587\u5b57 */\n            in 0x09..0x0A, /* 0x09 = tab, 0x0A = LF */\n            0x0D /* CR */\n            -> true\n            else -> false\n        }\n    })\n\n    /*\n     ASCII\u6587\u5b57\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\u3088\u308a\u5148\u306b\u7f6e\u3044\u3066\u306f\u3044\u3051\u306a\u3044\u3002\n     \u5883\u754c\u30c1\u30a7\u30c3\u30af\u3092\u3057\u3066\u3044\u308b\u304c\u3001\u5148\u306bASCII\u6587\u5b57\u5224\u5b9a\u3092\u3057\u3066\u304a\u304b\u306a\u3044\u3068\u3001\n     \u6587\u5b57\u5217\u306e\u30b5\u30a4\u30ba\u3092\u5c0e\u3051\u306a\u3044\u3002\uff08\u5168\u3066\u306e\u6587\u5b57\u304c1\u30d0\u30a4\u30c8\u3067\u3042\u308b\u524d\u63d0\u3067\u8a08\u7b97\u3057\u3066\u3044\u308b\u3002\uff09\n    */\n    require(fromIndex + asciiString.length <= this.lastIndex)\n\n    var counter = 0\n    for (c in asciiString) {\n        this[fromIndex + counter] = c.toByte()\n        counter++\n    }\n\n    return fromIndex + counter\n}\n\nfun ByteArray.getASCIIString(fromIndex: Int, toIndex: Int): String {\n    require(fromIndex < toIndex)\n    require(toIndex <= this.lastIndex)\n\n    val strBuilder = StringBuilder()\n\n    this.slice(fromIndex..(toIndex - 1))\n            .forEach {\n                check(isASCII(it.toChar()))\n                strBuilder.append(it.toChar())\n            }\n\n    return strBuilder.toString()\n}\n```\n", "tags": ["Kotlin"]}