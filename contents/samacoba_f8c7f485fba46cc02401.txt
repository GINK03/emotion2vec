{"context": "Batch Normalization\u306f\u3069\u3093\u306a\u8a08\u7b97\u3092\u3057\u3066\u3044\u308b\u304b\u3088\u304f\u308f\u304b\u3089\u305a\u4f7f\u3063\u3066\u3044\u307e\u3057\u305f\u306e\u3067\u3001Chainer\u3067\u5c11\u3057\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u6570\u5f0f\u306a\u3069\u89e3\u8aac\u306f\n\u591a\u5c64\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u3067Batch Normalization\u306e\u691c\u8a3c\n\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306fChainer Playground \u03b2\u3067\u3082\u30b3\u30d4\u30da\u3059\u308c\u3070\u52d5\u4f5c\u3057\u307e\u3057\u305f\u3002\n\u3056\u3063\u304f\u308a\u3044\u3046\u3068\u3001channel\u6bce\u306b\u5e73\u5747\u3068\u6a19\u6e96\u504f\u5dee\u304c\u6c42\u3081\u3089\u308c\u3001\u540c\u3058channel\u306b\u5c5e\u3059\u308b\u30c7\u30fc\u30bf\u306f\u5168\u90e8\u540c\u3058\u306e\u5e73\u5747\u3068\u6a19\u6e96\u504f\u5dee\u3067\u6b63\u898f\u5316\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3057\u305f\u3002\n\nimport\nimport chainer.links as L\nimport numpy as np\n\n\nbatch=8\u679a,1ch\u30c7\u30fc\u30bf\na = np.asarray(range(0,8),dtype=np.float32)\na = a.reshape((8,1))\nprint(a.shape)\nprint(a)\nbn = L.BatchNormalization(1)\nc = bn(a)\nprint(c.data)\n\n\n    (8, 1)\n    [[ 0.]\n     [ 1.]\n     [ 2.]\n     [ 3.]\n     [ 4.]\n     [ 5.]\n     [ 6.]\n     [ 7.]]\n    [[-1.52752233]\n     [-1.09108734]\n     [-0.65465242]\n     [-0.21821748]\n     [ 0.21821748]\n     [ 0.65465242]\n     [ 1.09108734]\n     [ 1.52752233]]\n\n\nbatch=8\u679a, 2ch\u30c7\u30fc\u30bf\na1 = np.asarray(range(0,8),dtype=np.float32)\na2 = np.asarray(range(8,16),dtype=np.float32)\na1 = a1.reshape((8,1))\na2 = a2.reshape((8,1))\na = np.concatenate((a1,a2),axis = 1)\nprint(a.shape)\nprint(a)\nbn = L.BatchNormalization(2)\nc = bn(a)\nprint(c.data)\n\n\n    (8, 2)\n    [[  0.   8.]\n     [  1.   9.]\n     [  2.  10.]\n     [  3.  11.]\n     [  4.  12.]\n     [  5.  13.]\n     [  6.  14.]\n     [  7.  15.]]\n    [[-1.52752233 -1.52752233]\n     [-1.09108734 -1.09108734]\n     [-0.65465242 -0.65465242]\n     [-0.21821748 -0.21821748]\n     [ 0.21821748  0.21821748]\n     [ 0.65465242  0.65465242]\n     [ 1.09108734  1.09108734]\n     [ 1.52752233  1.52752233]]\n\n\n\nbatch=1\u679a,1ch 2*4\u30c7\u30fc\u30bf\na = np.asarray(range(0,8),dtype=np.float32)\na = a.reshape((1,1,2,4))\nprint(a.shape)\nprint(a)\nbn = L.BatchNormalization(1)\nc=bn(a)\nprint(c.data)\n\n\n    (1, 1, 2, 4)\n    [[[[ 0.  1.  2.  3.]\n       [ 4.  5.  6.  7.]]]]\n    [[[[-1.52752233 -1.09108734 -0.65465242 -0.21821748]\n       [ 0.21821748  0.65465242  1.09108734  1.52752233]]]]\n\n\nbatch=1\u679a, 2ch, 2*4\u30c7\u30fc\u30bf\na1 = np.asarray(range(0,8),dtype=np.float32)\na2 = np.asarray(range(8,16),dtype=np.float32)\na1 = a1.reshape((1,1,2,4))\na2 = a2.reshape((1,1,2,4))\na = np.concatenate((a1,a2),axis = 1)\nprint(a.shape)\nprint(a)\nbn = L.BatchNormalization(2)\nc=bn(a)\nprint(c.data)\n\n\n    (1, 2, 2, 4)\n    [[[[  0.   1.   2.   3.]\n       [  4.   5.   6.   7.]]\n\n      [[  8.   9.  10.  11.]\n       [ 12.  13.  14.  15.]]]]\n    [[[[-1.52752233 -1.09108734 -0.65465242 -0.21821748]\n       [ 0.21821748  0.65465242  1.09108734  1.52752233]]\n\n      [[-1.52752233 -1.09108734 -0.65465242 -0.21821748]\n       [ 0.21821748  0.65465242  1.09108734  1.52752233]]]]\n\n\nbatch=2\u679a, 1ch, 2*4\u30c7\u30fc\u30bf\na1 = np.asarray(range(0,8),dtype=np.float32)\na2 = np.asarray(range(8,16),dtype=np.float32)\na1 = a1.reshape((1,1,2,4))\na2 = a2.reshape((1,1,2,4))\na = np.concatenate((a1,a2),axis = 0)\nprint(a.shape)\nprint(a)\nbn = L.BatchNormalization(1)\nc=bn(a)\nprint(c.data)\n\n\n    (2, 1, 2, 4)\n    [[[[  0.   1.   2.   3.]\n       [  4.   5.   6.   7.]]]\n\n\n     [[[  8.   9.  10.  11.]\n       [ 12.  13.  14.  15.]]]]\n    [[[[-1.6269778  -1.41004741 -1.19311702 -0.97618663]\n       [-0.7592563  -0.54232591 -0.32539555 -0.10846519]]]\n\n\n     [[[ 0.10846519  0.32539555  0.54232591  0.7592563 ]\n       [ 0.97618663  1.19311702  1.41004741  1.6269778 ]]]]\n\n\u3002\n\nBatch Normalization\u306f\u3069\u3093\u306a\u8a08\u7b97\u3092\u3057\u3066\u3044\u308b\u304b\u3088\u304f\u308f\u304b\u3089\u305a\u4f7f\u3063\u3066\u3044\u307e\u3057\u305f\u306e\u3067\u3001Chainer\u3067\u5c11\u3057\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u6570\u5f0f\u306a\u3069\u89e3\u8aac\u306f\n[\u591a\u5c64\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u3067Batch Normalization\u306e\u691c\u8a3c](http://qiita.com/hogefugabar/items/4f6e3702947f7ef8f1bf)\n\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n\n\u4ee5\u4e0b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f[Chainer Playground \u03b2](https://play.chainer.org/)\u3067\u3082\u30b3\u30d4\u30da\u3059\u308c\u3070\u52d5\u4f5c\u3057\u307e\u3057\u305f\u3002\n\n\u3056\u3063\u304f\u308a\u3044\u3046\u3068\u3001channel\u6bce\u306b\u5e73\u5747\u3068\u6a19\u6e96\u504f\u5dee\u304c\u6c42\u3081\u3089\u308c\u3001\u540c\u3058channel\u306b\u5c5e\u3059\u308b\u30c7\u30fc\u30bf\u306f\u5168\u90e8\u540c\u3058\u306e\u5e73\u5747\u3068\u6a19\u6e96\u504f\u5dee\u3067\u6b63\u898f\u5316\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3057\u305f\u3002\n\n##import\n\n```python\nimport chainer.links as L\nimport numpy as np\n```\n\n\n\n## batch=8\u679a,1ch\u30c7\u30fc\u30bf\n```python\na = np.asarray(range(0,8),dtype=np.float32)\na = a.reshape((8,1))\nprint(a.shape)\nprint(a)\nbn = L.BatchNormalization(1)\nc = bn(a)\nprint(c.data)\n\n\n    (8, 1)\n    [[ 0.]\n     [ 1.]\n     [ 2.]\n     [ 3.]\n     [ 4.]\n     [ 5.]\n     [ 6.]\n     [ 7.]]\n    [[-1.52752233]\n     [-1.09108734]\n     [-0.65465242]\n     [-0.21821748]\n     [ 0.21821748]\n     [ 0.65465242]\n     [ 1.09108734]\n     [ 1.52752233]]\n```    \n\n## batch=8\u679a, 2ch\u30c7\u30fc\u30bf\n```python\na1 = np.asarray(range(0,8),dtype=np.float32)\na2 = np.asarray(range(8,16),dtype=np.float32)\na1 = a1.reshape((8,1))\na2 = a2.reshape((8,1))\na = np.concatenate((a1,a2),axis = 1)\nprint(a.shape)\nprint(a)\nbn = L.BatchNormalization(2)\nc = bn(a)\nprint(c.data)\n\n\n    (8, 2)\n    [[  0.   8.]\n     [  1.   9.]\n     [  2.  10.]\n     [  3.  11.]\n     [  4.  12.]\n     [  5.  13.]\n     [  6.  14.]\n     [  7.  15.]]\n    [[-1.52752233 -1.52752233]\n     [-1.09108734 -1.09108734]\n     [-0.65465242 -0.65465242]\n     [-0.21821748 -0.21821748]\n     [ 0.21821748  0.21821748]\n     [ 0.65465242  0.65465242]\n     [ 1.09108734  1.09108734]\n     [ 1.52752233  1.52752233]]\n    \n```\n\n## batch=1\u679a,1ch 2*4\u30c7\u30fc\u30bf\n```python\na = np.asarray(range(0,8),dtype=np.float32)\na = a.reshape((1,1,2,4))\nprint(a.shape)\nprint(a)\nbn = L.BatchNormalization(1)\nc=bn(a)\nprint(c.data)\n\n\n    (1, 1, 2, 4)\n    [[[[ 0.  1.  2.  3.]\n       [ 4.  5.  6.  7.]]]]\n    [[[[-1.52752233 -1.09108734 -0.65465242 -0.21821748]\n       [ 0.21821748  0.65465242  1.09108734  1.52752233]]]]\n```    \n\n## batch=1\u679a, 2ch, 2*4\u30c7\u30fc\u30bf\n```python\na1 = np.asarray(range(0,8),dtype=np.float32)\na2 = np.asarray(range(8,16),dtype=np.float32)\na1 = a1.reshape((1,1,2,4))\na2 = a2.reshape((1,1,2,4))\na = np.concatenate((a1,a2),axis = 1)\nprint(a.shape)\nprint(a)\nbn = L.BatchNormalization(2)\nc=bn(a)\nprint(c.data)\n\n\n    (1, 2, 2, 4)\n    [[[[  0.   1.   2.   3.]\n       [  4.   5.   6.   7.]]\n    \n      [[  8.   9.  10.  11.]\n       [ 12.  13.  14.  15.]]]]\n    [[[[-1.52752233 -1.09108734 -0.65465242 -0.21821748]\n       [ 0.21821748  0.65465242  1.09108734  1.52752233]]\n    \n      [[-1.52752233 -1.09108734 -0.65465242 -0.21821748]\n       [ 0.21821748  0.65465242  1.09108734  1.52752233]]]]\n```    \n\n## batch=2\u679a, 1ch, 2*4\u30c7\u30fc\u30bf\n```python\na1 = np.asarray(range(0,8),dtype=np.float32)\na2 = np.asarray(range(8,16),dtype=np.float32)\na1 = a1.reshape((1,1,2,4))\na2 = a2.reshape((1,1,2,4))\na = np.concatenate((a1,a2),axis = 0)\nprint(a.shape)\nprint(a)\nbn = L.BatchNormalization(1)\nc=bn(a)\nprint(c.data)\n\n\n    (2, 1, 2, 4)\n    [[[[  0.   1.   2.   3.]\n       [  4.   5.   6.   7.]]]\n    \n    \n     [[[  8.   9.  10.  11.]\n       [ 12.  13.  14.  15.]]]]\n    [[[[-1.6269778  -1.41004741 -1.19311702 -0.97618663]\n       [-0.7592563  -0.54232591 -0.32539555 -0.10846519]]]\n    \n    \n     [[[ 0.10846519  0.32539555  0.54232591  0.7592563 ]\n       [ 0.97618663  1.19311702  1.41004741  1.6269778 ]]]]\n```    \n\n\u3002\n", "tags": ["Chainer"]}