{"tags": ["\u6570\u5024\u8a08\u7b97"], "context": "fastersin\u3068\u3044\u3046sin\u95a2\u6570\u306e\u9ad8\u901f\u7248\u304c\u3042\u308b\u306e\u3092\u77e5\u308a\u3001\u9762\u767d\u305d\u3046\u3060\u3063\u305f\u306e\u3067\u3061\u3087\u3063\u3068\u624b\u3092\u52a0\u3048\u3066\u30a2\u30ec\u30f3\u30b8\u3057\u307e\u3057\u305f\u3002\n\nfastapprox\nfastapprox\u306f\u4e09\u89d2\u95a2\u6570\u3084\u6307\u6570\u95a2\u6570\u306a\u3069\u3092\u9ad8\u901f\u3067\u8a08\u7b97\u3059\u308b\u305f\u3081\u306eC\u8a00\u8a9e\u3067\u66f8\u304b\u308c\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u4f8b\u3048\u3070fastersin\u3068\u3044\u3046sin\u95a2\u6570\u306e\u9ad8\u901f\u7248\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\nfastonebigheader.h(\u629c\u7c8b)\nstatic inline float\nfastersin (float x)\n{\n  static const float fouroverpi = 1.2732395447351627f;\n  static const float fouroverpisq = 0.40528473456935109f;\n  static const float q = 0.77633023248007499f;\n  union { float f; uint32_t i; } p = { 0.22308510060189463f };\n\n  union { float f; uint32_t i; } vx = { x };\n  uint32_t sign = vx.i & 0x80000000;\n  vx.i &= 0x7FFFFFFF;\n\n  float qpprox = fouroverpi * x - fouroverpisq * x * vx.f;\n\n  p.i |= sign;\n\n  return qpprox * (q + p.f * qpprox);\n}\n\n\n\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306esinf\u95a2\u6570\u3088\u308a\uff12\u301c\uff13\u500d\u901f\u3044\u304b\u306a\u3068\u3044\u3063\u305f\u611f\u3058\u3067\u3059\u3002\u95a2\u6570\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u307e\u3059\u3002\n\n\u5f15\u6570\u306f[\u2212\u03c0,\u03c0][\u2212\u03c0,\u03c0][-\\pi, \\pi]\u306e\u7bc4\u56f2\u3067\u6e21\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002[0,\u03c0][0,\u03c0][0,\\pi]\u3067\u306e\u8aa4\u5dee\u3082\u30d7\u30ed\u30c3\u30c8\u3057\u307e\u3059\u3002\n\n\u3053\u306e\u30b0\u30e9\u30d5\u3092\u898b\u305f\u3068\u304d\u3001\u3082\u3046\u5c11\u3057\u9811\u5f35\u308c\u308b\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3057\u305f\u3002\u4eca\u56de\u306f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5909\u3048\u308b\u3053\u3068\u306a\u304f\u5148\u982d\u3067\u5ba3\u8a00\u3055\u308c\u3066\u3044\u308b4\u3064\u306e\u5b9a\u6570\u3092\u8abf\u6574\u3059\u308b\u3053\u3068\u3067\u8aa4\u5dee\u3092\u6e1b\u3089\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u6700\u826f\u8fd1\u4f3c\u591a\u9805\u5f0f\nf(x)f(x)f(x)\u306f\u533a\u9593[t0,t1][t0,t1][t_0,t_1]\u3067\u9023\u7d9a\u306a\u95a2\u6570\u3067\u305d\u308c\u3092\u8fd1\u4f3c\u3059\u308bnnn\u6b21\u591a\u9805\u5f0f\u3092\nfn(x)=\u2211k=0nakxkfn(x)=\u2211k=0nakxk{f_n(x)=\\sum_{k=0}^n a_k x^k\n}\n\u3068\u3057\u307e\u3059\u3002nnn\u3092\u56fa\u5b9a\u3057\u305f\u3068\u304d\u306b\nmaxt0<x<t1|f(x)\u2212fn(x)|maxt0<x<t1|f(x)\u2212fn(x)|{ \\max_{t_0<x<t_1} |f(x)-f_n(x)|\n}\n\u3092\u6700\u5c0f\u306b\u3059\u308b\u3088\u3046\u306a\u591a\u9805\u5f0f\u3092\u6700\u826f\u8fd1\u4f3c\u591a\u9805\u5f0f\u3068\u3044\u3044\u307e\u3059\u3002\u6700\u826f\u8fd1\u4f3c\u591a\u9805\u5f0f\u306f\u6b21\u306e\u3088\u3046\u306a\u6027\u8cea\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\n\nfn(x)fn(x)f_n(x)\u304c\u6700\u826f\u8fd1\u4f3c\u591a\u9805\u5f0f\u3067\u3042\u308b\u305f\u3081\u306e\u5fc5\u8981\u5341\u5206\u6761\u4ef6\u306f\u3001\u8aa4\u5dee\u95a2\u6570\u03f5(x)\u03f5(x)\\epsilon(x)\u3092\n\u03f5(x)=f(x)\u2212fn(x)\u03f5(x)=f(x)\u2212fn(x){\\epsilon(x) = f(x)-f_n(x)\n}\n\u3068\u7f6e\u3044\u305f\u3068\u304d\u3001|\u03f5(x)||\u03f5(x)||\\epsilon(x)|\u304c\u533a\u9593[t0,t1][t0,t1][t_0,t_1]\u3067\u5c11\u306a\u304f\u3068\u3082n+2n+2n+2\u70b9\u3067\u7b49\u3057\u3044\u6700\u5927\u5024\u3092\u3068\u308a\u3001\u6700\u5927\u5024\u306b\u304a\u3051\u308b\u03f5(x)\u03f5(x)\\epsilon(x)\u306e\u7b26\u53f7\u304c\u4ea4\u4e92\u306b\u4e26\u3093\u3067\u3044\u308b\u3053\u3068\u3067\u3042\u308b\u3002\n\nfastersin\u306f\u7d76\u5bfe\u5024\u6700\u5927\u8aa4\u5dee\u7684\u306b\u3082\u3046\u5c11\u3057\u9811\u5f35\u308c\u308b\u6c17\u304c\u3057\u307e\u3059\u306d\u3002\n\nRemez algorithm\nRemez algorithm\u3092\u7528\u3044\u3066sin\u95a2\u6570\u3092\u591a\u9805\u5f0f\u3067\u8fd1\u4f3c\u3057\u307e\u3059\u3002\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\nstep1. \u3042\u308b\u533a\u9593\u4e0a\u306bn+2n+2n+2\u500b\u306e\u691c\u67fb\u70b9x0,\u22efxn+1x0,\u22efxn+1x_0, \\cdots x_{n+1}\u3092\u9069\u5f53\u306b\u7528\u610f\u3059\u308b\nstep2. \u691c\u67fb\u70b9\u3067\u306e\u8aa4\u5dee\u95a2\u6570\u03f5(x)\u03f5(x)\\epsilon(x)\u306e\u7d76\u5bfe\u5024\u304c\u7b49\u3057\u304f\u304b\u3064\u8aa4\u5dee\u306e\u7b26\u53f7\u304c\u4ea4\u4e92\u306b\u4e26\u3076\u3088\u3046\u306a\u591a\u9805\u5f0ffn(x)fn(x)f_n(x)\u306e\u4fc2\u6570a0,\u22ef,ana0,\u22ef,ana_0, \\cdots, a_n\u3068\u8aa4\u5deeddd\u3092\u6c42\u3081\u3001\u591a\u9805\u5f0f\u3092\u66f4\u65b0\u3059\u308b\nstep3. \u8aa4\u5dee\u95a2\u6570\u03f5(x)\u03f5(x)\\epsilon(x)\u306e\u7d76\u5bfe\u5024\u304c\u6700\u5927\u3068\u306a\u308bn+2n+2n+2\u500b\u306e\u70b9x0,\u22efxn+1x0,\u22efxn+1x_0, \\cdots x_{n+1}\u3092\u6c42\u3081\u3001\u691c\u67fb\u70b9\u3092\u66f4\u65b0\u3059\u308b\nstep4. \u691c\u67fb\u70b9\u3067\u306e\u8aa4\u5dee\u95a2\u6570\u03f5(x)\u03f5(x)\\epsilon(x)\u306e\u7d76\u5bfe\u5024\u304c\u7b49\u3057\u304f\u304b\u3064\u8aa4\u5dee\u306e\u7b26\u53f7\u304c\u4ea4\u4e92\u306b\u4e26\u3093\u3067\u3044\u308c\u3070\u7d42\u4e86\u3057\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070step2\u3078\u623b\u308b\n\n\n\u8a08\u7b97\n\u5b9f\u969b\u306b\u6700\u826f\u8fd1\u4f3c\u591a\u9805\u5f0f\u306e\u4fc2\u6570\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\u8a00\u8a9e\u306fPython\u3067\u30e9\u30a4\u30d6\u30e9\u30ea\u306fSympy\u3068mpmath\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n\u6e96\u5099\n\u30aa\u30ea\u30b8\u30ca\u30ebfastersin\u3092xxx\u306e\u591a\u9805\u5f0f\u306b\u5c55\u958b\u3057\u307e\u3059\u3002\n\nexpand.py\n# -*- coding: utf-8 -*-\nimport sympy\n\nif __name__ == '__main__':\n    qpprox = sympy.sympify('s0 * x - s1 * x * x')\n    fastersin = sympy.sympify('qpprox * (s2 + s3 * qpprox)').subs({'qpprox':qpprox}).expand()\n    print(fastersin)\n\n    expr = {'s0': 1.2732395447351627,  # fouroverpi\n            's1': 0.40528473456935109, # fouroverpisq\n            's2': 0.77633023248007499, # p\n            's3': 0.22308510060189463} # q\n    print(fastersin.subs(expr))\n\n\n\n\u7d50\u679c\ns0**2*s3*x**2 - 2*s0*s1*s3*x**3 + s0*s2*x + s1**2*s3*x**4 - s1*s2*x**2\n0.0366430029450163*x**4 - 0.230234777715065*x**3 + 0.0470171509264136*x**2 + 0.988454351767074*x\n\n\n\u3053\u306e\u591a\u9805\u5f0f\u306e\u4fc2\u6570\u306fRemez algorithm\u306e\u521d\u671f\u5024\u3068\u3057\u3066\u4f7f\u7528\u3057\u307e\u3059\u3002\u5b9f\u306f\u3053\u3053\u3067\u554f\u984c\u304c\u3042\u308a\u307e\u3057\u3066\u30014\u3064\u306e\u5909\u6570fouroverpi,fouroverpisq,p,q\u3092\u9811\u5f35\u3063\u3066\u8abf\u6574\u3057\u3066\u3082\u5b9a\u6570\u9805\u306f0\u306b\u3057\u304b\u306a\u308a\u307e\u305b\u3093\u3002\n\nRemez\n\u5b9a\u6570\u9805\u304c0\u3068\u3044\u3046\u7e1b\u308a\u304c\u3042\u308a\u307e\u3059\u304cRemez algorithm\u3067\u6700\u826f\u8fd1\u4f3c\u591a\u9805\u5f0f\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u7121\u3044\u304b\u63a2\u3057\u307e\u3057\u305f\u304c\u3001\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u8ae6\u3081\u3066\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\nremez.py\n# -*- coding: utf-8 -*-\nimport math, numpy, mpmath\n\n# Remez algorithm --main--\ndef remez(poly):\n    # Remez algorithm --step1--\n    check_points = update_maximum_error_points(poly)\n\n    for iteration in range(1, 100):\n        # Remez algorithm --step2--\n        poly, d = update_polynomial_coefficients(check_points)\n\n        # Remez algorithm --step3--\n        check_points = update_maximum_error_points(poly)\n\n        # Remez algorithm --step4--\n        if check_convergence(poly, check_points):\n            return poly, d, iteration\n    else:\n        raise Exception('[ERROR]Remez algorithm failed')\n\n# Remez algorithm --step2--\ndef update_polynomial_coefficients(check_points):\n    assert len(check_points) == 4+2\n\n    # \u691c\u67fb\u70b9x[0]=0\u3067\u306f\u8aa4\u5dee\u304c0\u3001\u305d\u308c\u4ee5\u5916\u306e\u691c\u67fb\u70b9\u3067\u306f\u8aa4\u5deed\u304c\u4ea4\u4e92\u306b\u53cd\u8ee2\u3059\u308b\u3088\u3046\u306a\u6761\u4ef6\u3092\u8ab2\u3059\n    mat_A = [[x**4,x**3,x**2,x,1, (0 if k==0 else (-1)**k)] for k,x in enumerate(check_points)]\n    vec_b = [mpmath.sin(x) for x in check_points]\n\n    # \u9023\u7acb\u65b9\u7a0b\u5f0f\u3092\u89e3\u3044\u3066\u591a\u9805\u5f0f\u3092\u66f4\u65b0\u3059\u308b\n    u = mpmath.lu_solve(mat_A, vec_b)\n\n    return u[:5], mpmath.fabs(u[5])\n\n# Remez algorithm --step3--\ndef update_maximum_error_points(poly):\n    # \u8aa4\u5dee\u95a2\u6570\u3092\u5fae\u5206\u3057\u305f\u3082\u306e\n    df = lambda x:mpmath.polyval(poly, x, derivative=True)[1] - mpmath.cos(x)\n\n    # \u30a8\u30ec\u30ac\u30f3\u30c8\u306a\u65b9\u6cd5\u3067\u306f\u306a\u3044\u304c\u6975\u5024\u70b9\u304c\u3042\u308a\u305d\u3046\u306a\u3068\u3053\u308d\u306b\u8fba\u308a\u3092\u3064\u3051\u308b\n    intervals = numpy.linspace(0.0, math.pi, 100)\n    coarse_roots = [p0 for p0, p1 in zip(intervals, intervals[1:]) if df(p0)*df(p1) <= 0.0]\n\n    # \u5168\u3066\u306e\u6975\u5024\u70b9\u3092\u8a08\u7b97\u3059\u308b\n    extreme_points = [mpmath.findroot(df, x) for x in coarse_roots]\n    assert len(extreme_points) == 5\n\n    # \u6975\u5024\u70b9\u3060\u3051\u3067\u306f\u8db3\u3089\u306a\u3044\u306e\u3067x=0\u3082\u691c\u67fb\u70b9\u3068\u3057\u3066\u8ffd\u52a0\u3059\u308b\n    return [mpmath.mpf(0.0)] + extreme_points\n\n# Remez algorithm --step4--\ndef check_convergence(poly, check_points):\n    # \u8aa4\u5dee\u95a2\u6570\n    ef = lambda x:mpmath.polyval(poly, x) - mpmath.sin(x)\n\n    # x[0]=0\u3092\u9664\u304f\u691c\u67fb\u70b9\u306e\u8aa4\u5dee\u304c\u4ea4\u4e92\u306b\u53cd\u8ee2\u3057\u3066\u3044\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\n    err = numpy.var([ef(x)*(-1)**k for k,x in enumerate(check_points[1:])])\n    return err < 1.0e-20\n\nif __name__ == '__main__':\n    print('Remez algorithm... ', end='')\n\n    # \u521d\u671f\u5024\u3068\u3057\u3066\u30aa\u30ea\u30b8\u30ca\u30ebfastersin\u306e\u591a\u9805\u5f0f\u3092\u5229\u7528\u3059\u308b\n    init_poly = [0.0366430029450163, # a4\n                 -0.230234777715065, # a3\n                 0.0470171509264136, # a2\n                 0.988454351767074,  # a1\n                 0.0]                # a0\n\n    # Remez algorithm\u3067\u6700\u826f\u8fd1\u4f3c\u591a\u9805\u5f0f\u3092\u8a08\u7b97\u3059\u308b\n    poly, d, iteration= remez(init_poly)\n    print('success')\n\n    # \u53cd\u5fa9\u56de\u6570\n    print('iteration:', iteration)\n\n    # \u6700\u826f\u8fd1\u4f3c\u591a\u9805\u5f0f\u306e\u4fc2\u6570\n    for k,a in enumerate(reversed(poly)):\n        print('a%d:'% k, a)\n\n    # \u8aa4\u5deed\n    print('d :', d)\n\n\n\n\u7d50\u679c\nRemez algorithm... success\niteration: 3\na0: 0.0\na1: 0.989715113217385\na2: 0.0447710993902034\na3: -0.229060380582229\na4: 0.0364560918361726\nd : 0.000732394766512533\n\n\n\n\u6700\u9069\u5316\n\u6700\u5f8c\u306b\u30aa\u30ea\u30b8\u30ca\u30ebfastersin\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u9069\u7528\u51fa\u6765\u308b\u3088\u3046\u306b\u5c55\u958b\u3057\u305f\u5f0f\u3092\u5143\u306b\u623b\u3057\u307e\u3059\u30024\u3064\u306e\u5909\u6570\u3092\u672a\u77e5\u3068\u3059\u308b\u975e\u7dda\u5f62\u306e\u65b9\u7a0b\u5f0f\u3092\u4f5c\u6210\u3057\u3066\u8fd1\u4f3c\u89e3\u3092\u6c42\u3081\u307e\u3059\u3002\n\noptimize.py\n# -*- coding: utf-8 -*-\nimport mpmath\n\nif __name__ == '__main__':\n    print('optimize... ', end='')\n\n    # \u8aa4\u5dee\u95a2\u6570\n    f = lambda s0,s1,s2,s3: \\\n        [s0*s2            - 0.989715113217385,  # a1\n         s0**2*s3 - s1*s2 - 0.0447710993902034, # a2\n         -2*s0*s1*s3      + 0.229060380582229,  # a3\n         s1**2*s3         - 0.0364560918361726] # a4\n\n    # \u521d\u671f\u5024\u3068\u3057\u3066\u30aa\u30ea\u30b8\u30ca\u30ebfastersin\u306e\u5b9a\u6570\u3092\u5229\u7528\u3059\u308b\n    initial = [1.2732395447351627,  # fouroverpi\n               0.40528473456935109, # fouroverpisq\n               0.77633023248007499, # p\n               0.22308510060189463] # q\n\n    ss = mpmath.findroot(f, initial, tol=1.0e-18)\n\n    print('success')\n    for k,s in enumerate(ss):\n        print('s%d:' % k, s)\n\n\n\n\u7d50\u679c\noptimize... success\ns0: 1.2732572472526\ns1: 0.405290369455662\ns2: 0.777309624389905\ns3: 0.221941001052417\n\n\n\n\u6539\u826f\u7248fastersin\n4\u3064\u306e\u5b9a\u6570\u3092\u7f6e\u304d\u63db\u3048\u305f\u3089\u5b8c\u6210\u3067\u3059\u3002\n\nremez_sin.c\nstatic inline float\nremez_sin (float x)\n{\n  static const float s0 = 1.2732572472526f;\n  static const float s1 = 0.405290369455662f;\n  static const float s2 = 0.777309624389905f;\n  union { float f; uint32_t i; } s3 = { 0.221941001052417f };\n\n  union { float f; uint32_t i; } vx = { x };\n  uint32_t sign = vx.i & 0x80000000;\n  vx.i &= 0x7FFFFFFF;\n\n  float qpprox = s0 * x - s1 * x * vx.f;\n\n  s3.i |= sign;\n\n  return qpprox * (s2 + s3.f * qpprox);\n}\n\n\n\n\u7d76\u5bfe\u5024\u6700\u5927\u8aa4\u5dee\u306f\u5c0f\u3055\u304f\u306a\u308a\u307e\u3057\u305f\u304c\u3001\u4e8c\u4e57\u5e73\u5747\u8aa4\u5dee\u7684\u306b\u306f\u30aa\u30ea\u30b8\u30ca\u30ebfastersin\u306b\u8ca0\u3051\u3066\u308b\u6c17\u304c\u3057\u307e\u3059\u3002\n\nhttps://github.com/fukuroder/remez_approx\n\nfastersin\u3068\u3044\u3046sin\u95a2\u6570\u306e\u9ad8\u901f\u7248\u304c\u3042\u308b\u306e\u3092\u77e5\u308a\u3001\u9762\u767d\u305d\u3046\u3060\u3063\u305f\u306e\u3067\u3061\u3087\u3063\u3068\u624b\u3092\u52a0\u3048\u3066\u30a2\u30ec\u30f3\u30b8\u3057\u307e\u3057\u305f\u3002\n\n# fastapprox\n\n[fastapprox](https://code.google.com/archive/p/fastapprox/)\u306f\u4e09\u89d2\u95a2\u6570\u3084\u6307\u6570\u95a2\u6570\u306a\u3069\u3092\u9ad8\u901f\u3067\u8a08\u7b97\u3059\u308b\u305f\u3081\u306eC\u8a00\u8a9e\u3067\u66f8\u304b\u308c\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u4f8b\u3048\u3070fastersin\u3068\u3044\u3046sin\u95a2\u6570\u306e\u9ad8\u901f\u7248\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```c:fastonebigheader.h(\u629c\u7c8b)\nstatic inline float\nfastersin (float x)\n{\n  static const float fouroverpi = 1.2732395447351627f;\n  static const float fouroverpisq = 0.40528473456935109f;\n  static const float q = 0.77633023248007499f;\n  union { float f; uint32_t i; } p = { 0.22308510060189463f };\n\n  union { float f; uint32_t i; } vx = { x };\n  uint32_t sign = vx.i & 0x80000000;\n  vx.i &= 0x7FFFFFFF;\n\n  float qpprox = fouroverpi * x - fouroverpisq * x * vx.f;\n\n  p.i |= sign;\n\n  return qpprox * (q + p.f * qpprox);\n}\n```\n\n\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306esinf\u95a2\u6570\u3088\u308a\uff12\u301c\uff13\u500d\u901f\u3044\u304b\u306a\u3068\u3044\u3063\u305f\u611f\u3058\u3067\u3059\u3002\u95a2\u6570\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u307e\u3059\u3002\n\n![faster_plot.png](https://qiita-image-store.s3.amazonaws.com/0/42791/d1ecc1af-b621-fd1b-e840-05140455b139.png)\n\n\u5f15\u6570\u306f$[-\\pi, \\pi]$\u306e\u7bc4\u56f2\u3067\u6e21\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002$[0,\\pi]$\u3067\u306e\u8aa4\u5dee\u3082\u30d7\u30ed\u30c3\u30c8\u3057\u307e\u3059\u3002\n\n![faster_error.png](https://qiita-image-store.s3.amazonaws.com/0/42791/1edc72ad-677c-6017-c3be-7bf3e18c0e05.png)\n\n\u3053\u306e\u30b0\u30e9\u30d5\u3092\u898b\u305f\u3068\u304d\u3001\u3082\u3046\u5c11\u3057\u9811\u5f35\u308c\u308b\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3057\u305f\u3002\u4eca\u56de\u306f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5909\u3048\u308b\u3053\u3068\u306a\u304f\u5148\u982d\u3067\u5ba3\u8a00\u3055\u308c\u3066\u3044\u308b4\u3064\u306e\u5b9a\u6570\u3092\u8abf\u6574\u3059\u308b\u3053\u3068\u3067\u8aa4\u5dee\u3092\u6e1b\u3089\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n# \u6700\u826f\u8fd1\u4f3c\u591a\u9805\u5f0f\n\n$f(x)$\u306f\u533a\u9593$[t_0,t_1]$\u3067\u9023\u7d9a\u306a\u95a2\u6570\u3067\u305d\u308c\u3092\u8fd1\u4f3c\u3059\u308b$n$\u6b21\u591a\u9805\u5f0f\u3092\n\n```math\nf_n(x)=\\sum_{k=0}^n a_k x^k\n```\n\n\u3068\u3057\u307e\u3059\u3002$n$\u3092\u56fa\u5b9a\u3057\u305f\u3068\u304d\u306b\n\n```math\n \\max_{t_0<x<t_1} |f(x)-f_n(x)|\n```\n\n\u3092\u6700\u5c0f\u306b\u3059\u308b\u3088\u3046\u306a\u591a\u9805\u5f0f\u3092**\u6700\u826f\u8fd1\u4f3c\u591a\u9805\u5f0f**\u3068\u3044\u3044\u307e\u3059\u3002\u6700\u826f\u8fd1\u4f3c\u591a\u9805\u5f0f\u306f\u6b21\u306e\u3088\u3046\u306a\u6027\u8cea\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\n\n> $f_n(x)$\u304c\u6700\u826f\u8fd1\u4f3c\u591a\u9805\u5f0f\u3067\u3042\u308b\u305f\u3081\u306e\u5fc5\u8981\u5341\u5206\u6761\u4ef6\u306f\u3001\u8aa4\u5dee\u95a2\u6570$\\epsilon(x)$\u3092\n>\n> ```math\n> \\epsilon(x) = f(x)-f_n(x)\n> ```\n>\n>\u3068\u7f6e\u3044\u305f\u3068\u304d\u3001$|\\epsilon(x)|$\u304c\u533a\u9593$[t_0,t_1]$\u3067\u5c11\u306a\u304f\u3068\u3082$n+2$\u70b9\u3067\u7b49\u3057\u3044\u6700\u5927\u5024\u3092\u3068\u308a\u3001\u6700\u5927\u5024\u306b\u304a\u3051\u308b$\\epsilon(x)$\u306e\u7b26\u53f7\u304c\u4ea4\u4e92\u306b\u4e26\u3093\u3067\u3044\u308b\u3053\u3068\u3067\u3042\u308b\u3002\n\nfastersin\u306f\u7d76\u5bfe\u5024\u6700\u5927\u8aa4\u5dee\u7684\u306b\u3082\u3046\u5c11\u3057\u9811\u5f35\u308c\u308b\u6c17\u304c\u3057\u307e\u3059\u306d\u3002\n\n\n# Remez algorithm\n\n[Remez algorithm](https://en.wikipedia.org/wiki/Remez_algorithm)\u3092\u7528\u3044\u3066sin\u95a2\u6570\u3092\u591a\u9805\u5f0f\u3067\u8fd1\u4f3c\u3057\u307e\u3059\u3002\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n> step1. \u3042\u308b\u533a\u9593\u4e0a\u306b$n+2$\u500b\u306e\u691c\u67fb\u70b9$x_0, \\cdots x_{n+1}$\u3092\u9069\u5f53\u306b\u7528\u610f\u3059\u308b\n> step2. \u691c\u67fb\u70b9\u3067\u306e\u8aa4\u5dee\u95a2\u6570$\\epsilon(x)$\u306e\u7d76\u5bfe\u5024\u304c\u7b49\u3057\u304f\u304b\u3064\u8aa4\u5dee\u306e\u7b26\u53f7\u304c\u4ea4\u4e92\u306b\u4e26\u3076\u3088\u3046\u306a\u591a\u9805\u5f0f$f_n(x)$\u306e\u4fc2\u6570$a_0, \\cdots, a_n$\u3068\u8aa4\u5dee$d$\u3092\u6c42\u3081\u3001\u591a\u9805\u5f0f\u3092\u66f4\u65b0\u3059\u308b\n> step3. \u8aa4\u5dee\u95a2\u6570$\\epsilon(x)$\u306e\u7d76\u5bfe\u5024\u304c\u6700\u5927\u3068\u306a\u308b$n+2$\u500b\u306e\u70b9$x_0, \\cdots x_{n+1}$\u3092\u6c42\u3081\u3001\u691c\u67fb\u70b9\u3092\u66f4\u65b0\u3059\u308b\n> step4. \u691c\u67fb\u70b9\u3067\u306e\u8aa4\u5dee\u95a2\u6570$\\epsilon(x)$\u306e\u7d76\u5bfe\u5024\u304c\u7b49\u3057\u304f\u304b\u3064\u8aa4\u5dee\u306e\u7b26\u53f7\u304c\u4ea4\u4e92\u306b\u4e26\u3093\u3067\u3044\u308c\u3070\u7d42\u4e86\u3057\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070step2\u3078\u623b\u308b\n\n# \u8a08\u7b97\n\n\u5b9f\u969b\u306b\u6700\u826f\u8fd1\u4f3c\u591a\u9805\u5f0f\u306e\u4fc2\u6570\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\u8a00\u8a9e\u306fPython\u3067\u30e9\u30a4\u30d6\u30e9\u30ea\u306fSympy\u3068mpmath\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n## \u6e96\u5099\n\n\u30aa\u30ea\u30b8\u30ca\u30ebfastersin\u3092$x$\u306e\u591a\u9805\u5f0f\u306b\u5c55\u958b\u3057\u307e\u3059\u3002\n\n```py3:expand.py\n# -*- coding: utf-8 -*-\nimport sympy\n\nif __name__ == '__main__':\n    qpprox = sympy.sympify('s0 * x - s1 * x * x')\n    fastersin = sympy.sympify('qpprox * (s2 + s3 * qpprox)').subs({'qpprox':qpprox}).expand()\n    print(fastersin)\n\n    expr = {'s0': 1.2732395447351627,  # fouroverpi\n            's1': 0.40528473456935109, # fouroverpisq\n            's2': 0.77633023248007499, # p\n            's3': 0.22308510060189463} # q\n    print(fastersin.subs(expr))\n```\n\n```console:\u7d50\u679c\ns0**2*s3*x**2 - 2*s0*s1*s3*x**3 + s0*s2*x + s1**2*s3*x**4 - s1*s2*x**2\n0.0366430029450163*x**4 - 0.230234777715065*x**3 + 0.0470171509264136*x**2 + 0.988454351767074*x\n```\n\n\u3053\u306e\u591a\u9805\u5f0f\u306e\u4fc2\u6570\u306fRemez algorithm\u306e\u521d\u671f\u5024\u3068\u3057\u3066\u4f7f\u7528\u3057\u307e\u3059\u3002\u5b9f\u306f\u3053\u3053\u3067\u554f\u984c\u304c\u3042\u308a\u307e\u3057\u3066\u30014\u3064\u306e\u5909\u6570`fouroverpi`,`fouroverpisq`,`p`,`q`\u3092\u9811\u5f35\u3063\u3066\u8abf\u6574\u3057\u3066\u3082\u5b9a\u6570\u9805\u306f0\u306b\u3057\u304b\u306a\u308a\u307e\u305b\u3093\u3002\n\n## Remez\n\n\u5b9a\u6570\u9805\u304c0\u3068\u3044\u3046\u7e1b\u308a\u304c\u3042\u308a\u307e\u3059\u304cRemez algorithm\u3067\u6700\u826f\u8fd1\u4f3c\u591a\u9805\u5f0f\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u7121\u3044\u304b\u63a2\u3057\u307e\u3057\u305f\u304c\u3001\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u8ae6\u3081\u3066\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n```py3:remez.py\n# -*- coding: utf-8 -*-\nimport math, numpy, mpmath\n\n# Remez algorithm --main--\ndef remez(poly):\n    # Remez algorithm --step1--\n    check_points = update_maximum_error_points(poly)\n\n    for iteration in range(1, 100):\n        # Remez algorithm --step2--\n        poly, d = update_polynomial_coefficients(check_points)\n\n        # Remez algorithm --step3--\n        check_points = update_maximum_error_points(poly)\n\n        # Remez algorithm --step4--\n        if check_convergence(poly, check_points):\n            return poly, d, iteration\n    else:\n        raise Exception('[ERROR]Remez algorithm failed')\n\n# Remez algorithm --step2--\ndef update_polynomial_coefficients(check_points):\n    assert len(check_points) == 4+2\n\n    # \u691c\u67fb\u70b9x[0]=0\u3067\u306f\u8aa4\u5dee\u304c0\u3001\u305d\u308c\u4ee5\u5916\u306e\u691c\u67fb\u70b9\u3067\u306f\u8aa4\u5deed\u304c\u4ea4\u4e92\u306b\u53cd\u8ee2\u3059\u308b\u3088\u3046\u306a\u6761\u4ef6\u3092\u8ab2\u3059\n    mat_A = [[x**4,x**3,x**2,x,1, (0 if k==0 else (-1)**k)] for k,x in enumerate(check_points)]\n    vec_b = [mpmath.sin(x) for x in check_points]\n\n    # \u9023\u7acb\u65b9\u7a0b\u5f0f\u3092\u89e3\u3044\u3066\u591a\u9805\u5f0f\u3092\u66f4\u65b0\u3059\u308b\n    u = mpmath.lu_solve(mat_A, vec_b)\n\n    return u[:5], mpmath.fabs(u[5])\n\n# Remez algorithm --step3--\ndef update_maximum_error_points(poly):\n    # \u8aa4\u5dee\u95a2\u6570\u3092\u5fae\u5206\u3057\u305f\u3082\u306e\n    df = lambda x:mpmath.polyval(poly, x, derivative=True)[1] - mpmath.cos(x)\n\n    # \u30a8\u30ec\u30ac\u30f3\u30c8\u306a\u65b9\u6cd5\u3067\u306f\u306a\u3044\u304c\u6975\u5024\u70b9\u304c\u3042\u308a\u305d\u3046\u306a\u3068\u3053\u308d\u306b\u8fba\u308a\u3092\u3064\u3051\u308b\n    intervals = numpy.linspace(0.0, math.pi, 100)\n    coarse_roots = [p0 for p0, p1 in zip(intervals, intervals[1:]) if df(p0)*df(p1) <= 0.0]\n\n    # \u5168\u3066\u306e\u6975\u5024\u70b9\u3092\u8a08\u7b97\u3059\u308b\n    extreme_points = [mpmath.findroot(df, x) for x in coarse_roots]\n    assert len(extreme_points) == 5\n\n    # \u6975\u5024\u70b9\u3060\u3051\u3067\u306f\u8db3\u3089\u306a\u3044\u306e\u3067x=0\u3082\u691c\u67fb\u70b9\u3068\u3057\u3066\u8ffd\u52a0\u3059\u308b\n    return [mpmath.mpf(0.0)] + extreme_points\n\n# Remez algorithm --step4--\ndef check_convergence(poly, check_points):\n    # \u8aa4\u5dee\u95a2\u6570\n    ef = lambda x:mpmath.polyval(poly, x) - mpmath.sin(x)\n\n    # x[0]=0\u3092\u9664\u304f\u691c\u67fb\u70b9\u306e\u8aa4\u5dee\u304c\u4ea4\u4e92\u306b\u53cd\u8ee2\u3057\u3066\u3044\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\n    err = numpy.var([ef(x)*(-1)**k for k,x in enumerate(check_points[1:])])\n    return err < 1.0e-20\n\nif __name__ == '__main__':\n    print('Remez algorithm... ', end='')\n\n    # \u521d\u671f\u5024\u3068\u3057\u3066\u30aa\u30ea\u30b8\u30ca\u30ebfastersin\u306e\u591a\u9805\u5f0f\u3092\u5229\u7528\u3059\u308b\n    init_poly = [0.0366430029450163, # a4\n                 -0.230234777715065, # a3\n                 0.0470171509264136, # a2\n                 0.988454351767074,  # a1\n                 0.0]                # a0\n\n    # Remez algorithm\u3067\u6700\u826f\u8fd1\u4f3c\u591a\u9805\u5f0f\u3092\u8a08\u7b97\u3059\u308b\n    poly, d, iteration= remez(init_poly)\n    print('success')\n\n    # \u53cd\u5fa9\u56de\u6570\n    print('iteration:', iteration)\n\n    # \u6700\u826f\u8fd1\u4f3c\u591a\u9805\u5f0f\u306e\u4fc2\u6570\n    for k,a in enumerate(reversed(poly)):\n        print('a%d:'% k, a)\n\n    # \u8aa4\u5deed\n    print('d :', d)\n```\n\n```console:\u7d50\u679c\nRemez algorithm... success\niteration: 3\na0: 0.0\na1: 0.989715113217385\na2: 0.0447710993902034\na3: -0.229060380582229\na4: 0.0364560918361726\nd : 0.000732394766512533\n```\n## \u6700\u9069\u5316\n\n\u6700\u5f8c\u306b\u30aa\u30ea\u30b8\u30ca\u30ebfastersin\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u9069\u7528\u51fa\u6765\u308b\u3088\u3046\u306b\u5c55\u958b\u3057\u305f\u5f0f\u3092\u5143\u306b\u623b\u3057\u307e\u3059\u30024\u3064\u306e\u5909\u6570\u3092\u672a\u77e5\u3068\u3059\u308b\u975e\u7dda\u5f62\u306e\u65b9\u7a0b\u5f0f\u3092\u4f5c\u6210\u3057\u3066\u8fd1\u4f3c\u89e3\u3092\u6c42\u3081\u307e\u3059\u3002\n\n```py3:optimize.py\n# -*- coding: utf-8 -*-\nimport mpmath\n\nif __name__ == '__main__':\n    print('optimize... ', end='')\n\n    # \u8aa4\u5dee\u95a2\u6570\n    f = lambda s0,s1,s2,s3: \\\n        [s0*s2            - 0.989715113217385,  # a1\n         s0**2*s3 - s1*s2 - 0.0447710993902034, # a2\n         -2*s0*s1*s3      + 0.229060380582229,  # a3\n         s1**2*s3         - 0.0364560918361726] # a4\n\n    # \u521d\u671f\u5024\u3068\u3057\u3066\u30aa\u30ea\u30b8\u30ca\u30ebfastersin\u306e\u5b9a\u6570\u3092\u5229\u7528\u3059\u308b\n    initial = [1.2732395447351627,  # fouroverpi\n               0.40528473456935109, # fouroverpisq\n               0.77633023248007499, # p\n               0.22308510060189463] # q\n\n    ss = mpmath.findroot(f, initial, tol=1.0e-18)\n\n    print('success')\n    for k,s in enumerate(ss):\n        print('s%d:' % k, s)\n```\n\n```console:\u7d50\u679c\noptimize... success\ns0: 1.2732572472526\ns1: 0.405290369455662\ns2: 0.777309624389905\ns3: 0.221941001052417\n```\n# \u6539\u826f\u7248fastersin\n\n4\u3064\u306e\u5b9a\u6570\u3092\u7f6e\u304d\u63db\u3048\u305f\u3089\u5b8c\u6210\u3067\u3059\u3002\n\n```c:remez_sin.c\nstatic inline float\nremez_sin (float x)\n{\n  static const float s0 = 1.2732572472526f;\n  static const float s1 = 0.405290369455662f;\n  static const float s2 = 0.777309624389905f;\n  union { float f; uint32_t i; } s3 = { 0.221941001052417f };\n\n  union { float f; uint32_t i; } vx = { x };\n  uint32_t sign = vx.i & 0x80000000;\n  vx.i &= 0x7FFFFFFF;\n\n  float qpprox = s0 * x - s1 * x * vx.f;\n\n  s3.i |= sign;\n\n  return qpprox * (s2 + s3.f * qpprox);\n}\n```\n\n![remez_error.png](https://qiita-image-store.s3.amazonaws.com/0/42791/a18fd053-93db-2053-8a2a-0a75190dfb28.png)\n\n\n\u7d76\u5bfe\u5024\u6700\u5927\u8aa4\u5dee\u306f\u5c0f\u3055\u304f\u306a\u308a\u307e\u3057\u305f\u304c\u3001\u4e8c\u4e57\u5e73\u5747\u8aa4\u5dee\u7684\u306b\u306f\u30aa\u30ea\u30b8\u30ca\u30ebfastersin\u306b\u8ca0\u3051\u3066\u308b\u6c17\u304c\u3057\u307e\u3059\u3002\n\n- https://github.com/fukuroder/remez_approx\n"}