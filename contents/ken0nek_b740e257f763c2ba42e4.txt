{"context": " More than 1 year has passed since last update.\n\n\u3053\u306e\u8a18\u4e8b\u306b\u3064\u3044\u3066\nPython\u306b\u3042\u308b\u3088\u3046\u306a\u3001all, any\u3092Swift\u3067\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u30b3\u30fc\u30c9\n\u30dd\u30a4\u30f3\u30c8\u306fSelf.Generator.Element : BooleanType\u3068\u3057\u305f\u3053\u3068\u3067\u3059\u3002\uff08Self.Generator.Element == Bool\u3067\u306f\u306a\u3044\u3002\uff09\n\nextension SequenceType where Self.Generator.Element : BooleanType {\n    var any: Bool {\n        return reduce(false) { $0 || $1 }\n    }\n\n    var all: Bool {\n        return reduce(true) { $0 && $1 }\n    }\n\n\n    // -- \u53c2\u8003\u8a18\u4e8b\u3068\u306e\u6bd4\u8f03\u3068\u3057\u3066\n\n    var one: Bool {\n        return filter { $0.boolValue }.count == 1\n    }\n\n    var none: Bool {\n        return !any\n    }\n}\n\nfunc\u7248\n\nextension SequenceType where Self.Generator.Element : BooleanType {\n    func any() -> Bool {\n        return reduce(false) { $0 || $1 }\n    }\n\n    func all() -> Bool {\n        return reduce(true) { $0 && $1 }\n    }\n\n\n    // -- \u53c2\u8003\u8a18\u4e8b\u3068\u306e\u6bd4\u8f03\u3068\u3057\u3066\n\n    func one() -> Bool {\n        return filter { $0.boolValue }.count == 1\n    }\n\n    func none() -> Bool {\n        return !any()\n    }\n}\n\n\n\u4f7f\u3044\u65b9\n\n\nlet boolArray = [true, false, false]\nlet boolArray2 = [true, true, true]\n\n\nprint(boolArray.any) // true\nprint(boolArray.all) // false\n\nprint(boolArray2.any) // true\nprint(boolArray2.all) // true\n\n\n\u5b9f\u9a13\nstruct BoolTest\u3092\u5ba3\u8a00\u3057\u3001BooleanType\u3092\u7d99\u627f\u3055\u305b\u307e\u3059\u3002\nnum\u304c\u5076\u6570\u306e\u6642\u306btrue\u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\nstruct BoolTest: BooleanType {\n    let num: Int\n\n    var boolValue: Bool {\n        return num % 2 == 0\n    }\n}\n\nlet testArray = [\n    BoolTest(num: 1),\n    BoolTest(num: 2),\n    BoolTest(num: 3),\n    BoolTest(num: 4),\n    BoolTest(num: 5),\n]\n// [Int](1...5).map(BoolTest.init)\n// [Int](1...5).map { BoolTest(num: $0) }\n\nprint(testArray.any) // true\nprint(testArray.all) // false\n\n\u3068\u671f\u5f85\u3057\u305f\u901a\u308a\u306e\u6319\u52d5\u3092\u3057\u307e\u3057\u305f\u3002\n\n\u53c2\u8003\nSwift\u306ereduce\u3067\u96c6\u5408\u306e\u6761\u4ef6\u78ba\u8a8d\u7528\u95a2\u6570\u3092\u66f8\u3044\u305f\nFunctional Snippet #5: Reduce \u00b7 objc.io\n#\u3053\u306e\u8a18\u4e8b\u306b\u3064\u3044\u3066\nPython\u306b\u3042\u308b\u3088\u3046\u306a\u3001```all```, ```any```\u3092Swift\u3067\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n# \u30b3\u30fc\u30c9\n\n\u30dd\u30a4\u30f3\u30c8\u306f```Self.Generator.Element : BooleanType```\u3068\u3057\u305f\u3053\u3068\u3067\u3059\u3002\uff08```Self.Generator.Element == Bool```\u3067\u306f\u306a\u3044\u3002\uff09\n\n```swift\n\nextension SequenceType where Self.Generator.Element : BooleanType {\n    var any: Bool {\n        return reduce(false) { $0 || $1 }\n    }\n    \n    var all: Bool {\n        return reduce(true) { $0 && $1 }\n    }\n    \n    \n    // -- \u53c2\u8003\u8a18\u4e8b\u3068\u306e\u6bd4\u8f03\u3068\u3057\u3066\n    \n    var one: Bool {\n        return filter { $0.boolValue }.count == 1\n    }\n    \n    var none: Bool {\n        return !any\n    }\n}\n```\n\n`func`\u7248\n\n```swift\n\nextension SequenceType where Self.Generator.Element : BooleanType {\n    func any() -> Bool {\n        return reduce(false) { $0 || $1 }\n    }\n\n    func all() -> Bool {\n        return reduce(true) { $0 && $1 }\n    }\n\n\n    // -- \u53c2\u8003\u8a18\u4e8b\u3068\u306e\u6bd4\u8f03\u3068\u3057\u3066\n\n    func one() -> Bool {\n        return filter { $0.boolValue }.count == 1\n    }\n\n    func none() -> Bool {\n        return !any()\n    }\n}\n```\n\n#\u4f7f\u3044\u65b9\n\n```swift\n\n\nlet boolArray = [true, false, false]\nlet boolArray2 = [true, true, true]\n\n\nprint(boolArray.any) // true\nprint(boolArray.all) // false\n\nprint(boolArray2.any) // true\nprint(boolArray2.all) // true\n```\n\n#\u5b9f\u9a13\n\n```struct BoolTest```\u3092\u5ba3\u8a00\u3057\u3001```BooleanType```\u3092\u7d99\u627f\u3055\u305b\u307e\u3059\u3002\n```num```\u304c\u5076\u6570\u306e\u6642\u306b```true```\u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n```swift\n\nstruct BoolTest: BooleanType {\n    let num: Int\n    \n    var boolValue: Bool {\n        return num % 2 == 0\n    }\n}\n\nlet testArray = [\n    BoolTest(num: 1),\n    BoolTest(num: 2),\n    BoolTest(num: 3),\n    BoolTest(num: 4),\n    BoolTest(num: 5),\n]\n// [Int](1...5).map(BoolTest.init)\n// [Int](1...5).map { BoolTest(num: $0) }\n\nprint(testArray.any) // true\nprint(testArray.all) // false\n```\n\n\u3068\u671f\u5f85\u3057\u305f\u901a\u308a\u306e\u6319\u52d5\u3092\u3057\u307e\u3057\u305f\u3002\n\n\n# \u53c2\u8003\n\n[Swift\u306ereduce\u3067\u96c6\u5408\u306e\u6761\u4ef6\u78ba\u8a8d\u7528\u95a2\u6570\u3092\u66f8\u3044\u305f](http://qiita.com/to4iki/items/f7beaf55262be6e8d27f)\n[Functional Snippet #5: Reduce \u00b7 objc.io](https://www.objc.io/blog/2014/11/03/functional-snippet-5-reduce/)\n", "tags": ["Swift", "Swift2.0", "Swift2"]}