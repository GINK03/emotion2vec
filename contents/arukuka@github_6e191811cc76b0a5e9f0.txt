{"context": " More than 1 year has passed since last update.\n\n\u524d\u7f6e\u304d\n\u5b66\u6821\u306e\u8ab2\u984c\u3067\u3088\u304f\u3042\u308b\uff0c\u57fa\u672c\u7684\u306a\u884c\u5217\u6f14\u7b97\u3092Java\u306e\u30af\u30e9\u30b9\u3067\u5b9f\u88c5\u3059\u308b\u30a2\u30ec\u306b\u51fa\u4f1a\u3044\u307e\u3057\u305f\u3002\u4f55\u56de\u3084\u308c\u3070\u3044\u3044\u3093\u3060\u3002\n\u6700\u521d\uff0c\u606f\u3092\u5438\u3046\u3088\u3046\u306bdouble[][]\u3092\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u306b\u3068\u3063\u3066\u3044\u305f\u306e\u3067\u3059\u304c\uff0c\n\u305b\u3063\u304b\u304f\u3060\u304b\u3089BigDecimal[][]\u306b\u3057\u305f\u3044\u306a\u3042\uff0c\u3068\u601d\u3044\u7acb\u3063\u305f\u77e2\u5148\u30a8\u30e9\u30fc\n\nWA\n// double[][] \u3092\u5f15\u6570\u306b\u53d6\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304b\u3089\u30ef\u30f3\u30e9\u30a4\u30f3\u3067this(BigDecimal[][])\u306b\u6e21\u3057\u305f\u3044\nBigDecimal[][] mat = Stream.of(new double[][]{\n    { 2, 4, -3, 4 },\n    { -5, 2, 1, 5 },\n    { -3, 4, 2, -1 },\n    { 4, 6, -7, -2 }\n}).map(a -> Stream.of(a)\n        .map(BigDecimal::new) // Cannot resolve constructor BigDecimal\n        .toArray(BigDecimal[]::new)\n).toArray(BigDecimal[][]::new);\n\n\n\u3093\u306a\u30d0\u30ab\u306a\u3002\n\u66f8\u304d\u76f4\u3057\u3066\u307f\u305f\u3068\u3053\u308d\uff0c.map(v -> new BigDecimal(v)) // Connot resolve constructor 'BigDecimal(double[])'\uff0c\n\u3069\u3046\u3084\u3089v\u306e\u578b\u304cdouble[]\u307f\u305f\u3044\u3002\u3093\u306a\u30d0\u30ab\u306a\u3002\n\u3042\u307e\u308a\uff0cStream\u306e\u3053\u3068\u306b\u3064\u3044\u3066\u52c9\u5f37\u3057\u306a\u304b\u3063\u305f\u306e\u304c\u60aa\u3044\u306e\u3067\u3059\u304c\uff0c\nprimitive\u578b\u306f\u6271\u3044\u304c\u7279\u6b8a\u306b\u306a\u308b\u306e\u3067\uff0cDoubleStream\u3092\u4f7f\u308f\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u307f\u305f\u3044\u3067\u3059\u306d\u3002\n\u306a\u3093\u3067\u5206\u304b\u308c\u3066\u3044\u308b\u3093\u3060\u308d\u3046\u3068\u601d\u3063\u305f\u3089\uff0c\u305d\u306e\u305f\u3081\u304b\u3002\n\u3068\uff0c\u3044\u3046\u308f\u3051\u3067DoubleStream\u306b\u76f4\u305b\u3070OK\uff08map\u3082DoubleStream\u5bfe\u5fdc\u306emapToObj\u306b\u5909\u3048\u308b\uff09\u3002\n\nAccepted Code\n\nAC\nBigDecimal[][] mat = Stream.of(new double[][]{\n    { 2, 4, -3, 4 },\n    { -5, 2, 1, 5 },\n    { -3, 4, 2, -1 },\n    { 4, 6, -7, -2 }\n}).map(a -> DoubleStream.of(a) // \u30b3\u30b3\n        .mapToObj(BigDecimal::new) // \u30b3\u30b3\n        .toArray(BigDecimal[]::new)\n).toArray(BigDecimal[][]::new);\n\n\n...\u30b3\u30f3\u30d1\u30a4\u30eb\u306f\u901a\u3063\u305f\u304c\u3002\u691c\u8a3c\u30b3\u30fc\u30c9\n\nTester\nSystem.out.println(Stream.of(mat)\n        .map(a -> Stream.of(a)\n                .collect(Collectors.mapping(b -> b.toString(),\n                        Collectors.joining(\", \", \"\\t{ \", \" }\"))\n                )\n        ).collect(Collectors.joining(\",\\n\", \"{\\n\", \"\\n}\"))\n);\n\n\n\noutput\n{\n    { 2, 4, -3, 4 },\n    { -5, 2, 1, 5 },\n    { -3, 4, 2, -1 },\n    { 4, 6, -7, -2 }\n}\n\n\n\n\u3084\u3063\u305f\u305c\n\n\u606f\u3092\u5438\u3046\u3088\u3046\u306bStream\u304c\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u305f\u3044\u3067\u3059\n\uff082\u6b21\u5143\u914d\u5217\u306b\u306a\u308b\u3068\u3059\u3054\u304f\u982d\u304c\u3053\u3093\u304c\u3089\u304c\u308b\uff09\u3002\n\u3042\u3068\u65e9\u304f\u3053\u3093\u306a\u5b66\u751f\u6c17\u5206\u672a\u6e80\u306e\u30b3\u30fc\u30c9\u751f\u6210\u304b\u3089\u304a\u3055\u3089\u3070\u3057\u305f\u3044\u3002\n\n\u524d\u7f6e\u304d\n----\n\u5b66\u6821\u306e\u8ab2\u984c\u3067\u3088\u304f\u3042\u308b\uff0c\u57fa\u672c\u7684\u306a\u884c\u5217\u6f14\u7b97\u3092Java\u306e\u30af\u30e9\u30b9\u3067\u5b9f\u88c5\u3059\u308b\u30a2\u30ec\u306b\u51fa\u4f1a\u3044\u307e\u3057\u305f\u3002\u4f55\u56de\u3084\u308c\u3070\u3044\u3044\u3093\u3060\u3002\n\n\u6700\u521d\uff0c\u606f\u3092\u5438\u3046\u3088\u3046\u306bdouble[][]\u3092\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u306b\u3068\u3063\u3066\u3044\u305f\u306e\u3067\u3059\u304c\uff0c\n\u305b\u3063\u304b\u304f\u3060\u304b\u3089BigDecimal[][]\u306b\u3057\u305f\u3044\u306a\u3042\uff0c\u3068\u601d\u3044\u7acb\u3063\u305f\u77e2\u5148\u30a8\u30e9\u30fc\n\n```java:WA\n// double[][] \u3092\u5f15\u6570\u306b\u53d6\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304b\u3089\u30ef\u30f3\u30e9\u30a4\u30f3\u3067this(BigDecimal[][])\u306b\u6e21\u3057\u305f\u3044\nBigDecimal[][] mat = Stream.of(new double[][]{\n    { 2, 4, -3, 4 },\n    { -5, 2, 1, 5 },\n    { -3, 4, 2, -1 },\n    { 4, 6, -7, -2 }\n}).map(a -> Stream.of(a)\n        .map(BigDecimal::new) // Cannot resolve constructor BigDecimal\n        .toArray(BigDecimal[]::new)\n).toArray(BigDecimal[][]::new);\n```\n\n\u3093\u306a\u30d0\u30ab\u306a\u3002\n\u66f8\u304d\u76f4\u3057\u3066\u307f\u305f\u3068\u3053\u308d\uff0c`.map(v -> new BigDecimal(v)) // Connot resolve constructor 'BigDecimal(double[])'`\uff0c\n\u3069\u3046\u3084\u3089v\u306e\u578b\u304cdouble[]\u307f\u305f\u3044\u3002\u3093\u306a\u30d0\u30ab\u306a\u3002\n\n\u3042\u307e\u308a\uff0cStream\u306e\u3053\u3068\u306b\u3064\u3044\u3066\u52c9\u5f37\u3057\u306a\u304b\u3063\u305f\u306e\u304c\u60aa\u3044\u306e\u3067\u3059\u304c\uff0c\nprimitive\u578b\u306f\u6271\u3044\u304c\u7279\u6b8a\u306b\u306a\u308b\u306e\u3067\uff0cDoubleStream\u3092\u4f7f\u308f\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u307f\u305f\u3044\u3067\u3059\u306d\u3002\n\u306a\u3093\u3067\u5206\u304b\u308c\u3066\u3044\u308b\u3093\u3060\u308d\u3046\u3068\u601d\u3063\u305f\u3089\uff0c\u305d\u306e\u305f\u3081\u304b\u3002\n\n\u3068\uff0c\u3044\u3046\u308f\u3051\u3067DoubleStream\u306b\u76f4\u305b\u3070OK\uff08map\u3082DoubleStream\u5bfe\u5fdc\u306emapToObj\u306b\u5909\u3048\u308b\uff09\u3002\n\nAccepted Code\n----\n```java:AC\nBigDecimal[][] mat = Stream.of(new double[][]{\n    { 2, 4, -3, 4 },\n    { -5, 2, 1, 5 },\n    { -3, 4, 2, -1 },\n    { 4, 6, -7, -2 }\n}).map(a -> DoubleStream.of(a) // \u30b3\u30b3\n        .mapToObj(BigDecimal::new) // \u30b3\u30b3\n        .toArray(BigDecimal[]::new)\n).toArray(BigDecimal[][]::new);\n```\n\n...\u30b3\u30f3\u30d1\u30a4\u30eb\u306f\u901a\u3063\u305f\u304c\u3002\u691c\u8a3c\u30b3\u30fc\u30c9\n\n```java:Tester\nSystem.out.println(Stream.of(mat)\n        .map(a -> Stream.of(a)\n                .collect(Collectors.mapping(b -> b.toString(),\n                        Collectors.joining(\", \", \"\\t{ \", \" }\"))\n                )\n        ).collect(Collectors.joining(\",\\n\", \"{\\n\", \"\\n}\"))\n);\n```\n\n```text:output\n{\n\t{ 2, 4, -3, 4 },\n\t{ -5, 2, 1, 5 },\n\t{ -3, 4, 2, -1 },\n\t{ 4, 6, -7, -2 }\n}\n```\n\n\u3084\u3063\u305f\u305c:punch:\n----\n\u606f\u3092\u5438\u3046\u3088\u3046\u306bStream\u304c\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u305f\u3044\u3067\u3059\n\uff082\u6b21\u5143\u914d\u5217\u306b\u306a\u308b\u3068\u3059\u3054\u304f\u982d\u304c\u3053\u3093\u304c\u3089\u304c\u308b\uff09\u3002\n\u3042\u3068\u65e9\u304f\u3053\u3093\u306a\u5b66\u751f\u6c17\u5206\u672a\u6e80\u306e\u30b3\u30fc\u30c9\u751f\u6210\u304b\u3089\u304a\u3055\u3089\u3070\u3057\u305f\u3044\u3002\n", "tags": ["Java", "java8"]}