{"context": " More than 1 year has passed since last update.\n\n8\u65e5\u76ee\npAp\u3068pBinop\u306e\u5b9f\u88c5\u3092\u3057\u305f.pBinop\u306f\u5b9f\u969b\u306fpExpr1\u3067,\u3081\u3063\u3061\u3083\u9762\u5012\u304f\u3055\u304b\u3063\u305f.\nFigure 1.3 \u306eexpr4\u306e\u6e1b\u7b97\u3068expr5\u306e\u9664\u7b97\u306e\u53f3\u8fba\u304c\u4e0a\u306e\u3084\u3064\u3068\u3061\u3087\u3063\u3068\u9055\u3046\u306e\u306f\u3044\u3044\u3093\u3060\u308d\u3046\u304b.\n\u3042\u30fc,\u3044\u3044\u306e\u304b.\u7c21\u5358\u306e\u305f\u3081\u306b1-2-3\u30843/2/1\u3063\u3066\u3044\u3046\u5f0f\u306f\u4f5c\u308c\u306a\u3044\u3088\u3046\u306b\u3057\u305f\u3093\u3060\u3063\u3051.\n\u3067\u3082\u3053\u308c\u5168\u90e8\u53f3\u7d50\u5408\u3058\u3083\u306a\u3044\u304b\u306a\u3042.\n\u307e\u3042\u7d50\u5408\u6027(associativity)\u3092\u6e80\u305f\u3059\u6f14\u7b97\u5b50,(+,*,&,|)\u306b\u5bfe\u3057\u3066\u3057\u304b\u6f14\u7b97\u5b50\u306e\u9023\u7d9a\u3092\u8a8d\u3081\u3066\u306a\u3044\u304b\u3089\u554f\u984c\u306a\u3044\u3093\u3060\u3051\u3069.\n\u534a\u7fa4\u30d0\u30f3\u30b6\u30a4!\n--- corelang.hs 2016-03-01 19:02:54.603333356 +0900\n+++ corelang1.hs        2016-03-01 19:02:54.616666690 +0900\n@@ -241,16 +241,15 @@\n     where mk_sc name arg _ expr = (name, arg, expr)\n\n pExpr :: Parser CoreExpr\n-pExpr =     --pThen mk_ap pExpr pAexpr\n-    --`pAlt`  pThen3 mk_binop pExpr (pApply pBinop EVar) pExpr\n-    --`pAlt`\n-    pThen4 mk_let (pLit \"let\") pDefns (pLit \"in\") pExpr\n+pExpr =     pApply (pOneOrMore pAexpr) mk_ap\n+    `pAlt`  pExpr1\n+    `pAlt`  pThen4 mk_let (pLit \"let\") pDefns (pLit \"in\") pExpr\n     `pAlt`  pThen4 mk_letrec (pLit \"letrec\") pDefns (pLit \"in\") pExpr\n     `pAlt`  pThen4 mk_case (pLit \"case\") pExpr (pLit \"of\") pAlts\n     `pAlt`  pThen4 mk_lam (pLit \"\\\\\") (pOneOrMore pVar) (pLit \".\") pExpr\n     `pAlt`  pAexpr\n     where\n-    mk_ap e a = EAp e a\n+    mk_ap e = foldl1 EAp e\n     mk_binop exp1 op exp2 = EAp (EAp op exp1) exp2\n     mk_let _ defns _ e = ELet nonRecursive  defns  e\n     mk_letrec _ defns _ e = ELet nonRecursive defns e\n@@ -284,18 +283,9 @@\n         mk_tag _ n _ = n\n         mk_alter n v _ e = (n, v, e)\n\n-pBinop :: Parser String\n-pBinop = pArithop `pAlt` pRelop `pAlt` pBoolop\n-\n-pArithop :: Parser String\n-pArithop = (pLit \"+\") `pAlt` (pLit \"-\") `pAlt` (pLit \"*\") `pAlt` (pLit \"//\")\n-\n pRelop :: Parser String\n pRelop = (pLit \"<\") `pAlt` (pLit \"<=\") `pAlt` (pLit \"==\") `pAlt` (pLit \"~=\") `pAlt` (pLit \">=\") `pAlt` (pLit \">\")\n\n-pBoolop :: Parser String\n-pBoolop = (pLit \"&\") `pAlt` (pLit \"|\")\n-\n syntax :: [Token] -> CoreProgram\n syntax = take_first_parse . pProgram\n     where\n@@ -306,9 +296,49 @@\n parse :: String -> CoreProgram\n parse = syntax . clex 1\n\n+data PartialExpr = NoOp | FoundOp Name CoreExpr\n+\n+pExpr1c :: Parser PartialExpr\n+pExpr1c = (pThen FoundOp (pLit \"|\") pExpr1) `pAlt` (pEmpty NoOp)\n+\n+pExpr1 :: Parser CoreExpr\n+pExpr1 = pThen assembleOp pExpr2 pExpr1c\n+\n+pExpr2c :: Parser PartialExpr\n+pExpr2c = (pThen FoundOp (pLit \"&\") pExpr2) `pAlt` (pEmpty NoOp)\n+\n+pExpr2 :: Parser CoreExpr\n+pExpr2 = pThen assembleOp pExpr3 pExpr2c\n+\n+pExpr3c :: Parser PartialExpr\n+pExpr3c = (pThen FoundOp pRelop pExpr4) `pAlt` (pEmpty NoOp)\n+\n+pExpr3 :: Parser CoreExpr\n+pExpr3 = pThen assembleOp pExpr4 pExpr3c\n+\n+pExpr4c :: Parser PartialExpr\n+pExpr4c = (pThen FoundOp (pLit \"-\") pExpr5) `pAlt` (pThen FoundOp (pLit \"+\") pExpr4) `pAlt` (pEmpty NoOp)\n+\n+pExpr4 :: Parser CoreExpr\n+pExpr4 = pThen assembleOp pExpr5 pExpr4c\n+\n+pExpr5c :: Parser PartialExpr\n+pExpr5c = (pThen FoundOp (pLit \"/\") pExpr6) `pAlt` (pThen FoundOp (pLit \"*\") pExpr5) `pAlt` (pEmpty NoOp)\n+\n+pExpr5 :: Parser CoreExpr\n+pExpr5 = pThen assembleOp pExpr6 pExpr5c\n+\n+pExpr6 :: Parser CoreExpr\n+pExpr6 = pApply (pOneOrMore pAexpr) (foldl1 EAp)\n+\n+assembleOp :: CoreExpr -> PartialExpr -> CoreExpr\n+assembleOp e1 NoOp = e1\n+assembleOp e1 (FoundOp op e2) = EAp (EAp (EVar op) e1) e2\n+\n main :: IO ()\n --main = putStrLn $ iDisplay $ pprExpr (ELet nonRecursive [(\"att\", ENum 2)] (EAp (EAp (EVar \"+\") (EVar \"att\")) (EVar \"1\")))\n-main = putStrLn( pprint $ parse  \"f=3;\\ng x y = let z = x in z ;\\nh x = case (let y = x in y) of\\n<1> -> 2 ;\\n<2> -> 5\")\n+main = putStrLn( pprint $ parse  \"f=3;\\ng x y = let z = x in z ;\\nh x = case (let y = x in y) of\\n<1> -> 2 ;\\n<2> -> 5;\\n i = g (1 + 2 * 3) (5 - 1 / 2)\")\n --main = putStrLn $ show $ pOneOrMoreWithSep (pLit \"x\") (pLit \";\") [(1,\"x\"),(1,\";\"),(1,\"x\") ,(1,\";\"),(2,\"x\"),(2,\";\"),(2,\"x\"),(2,\";\"),(2,\"x\") ]\n --main = putStrLn $ show $ pExpr [(2,\"let\"),(2,\"z\"),(2,\"=\"),(2,\"x\"),(2,\"in\"),(2,\"z\")]\n --main = putStrLn $ pprint $ syntax [(1,\"f\"),(1,\"=\"),(1,\"3\") ,(1,\";\"),(2,\"g\"),(2,\"x\"),(2,\"y\"),(2,\"=\"), (2,\"let\"),(2,\"z\"),(2,\"=\"),(2,\"x\"),(2,\"in\"),(2,\"z\"),(2,\";\"),(3,\"h\"),(3,\"x\"),(3,\"=\"),(3,\"case\"),(3,\"(\"),(3,\"let\"),(3,\"y\"),(3,\"=\"),(3,\"x\"),(3,\"in\"),(3,\"y\"),(3,\")\"),(3,\"of\"),(4,\"<\"),(4,\"1\"),(4,\">\"),(4,\"->\"),(4,\"2\"),(4,\";\"),(5,\"<\"),(5,\"2\"),(5,\">\"),(5,\"->\"),(5,\"5\")]\n+\n\n> module Template where\n> import Language\n> import Utils\n\n\u3053\u308c\u3069\u3046\u3044\u3046\u610f\u5473\u304c\u3042\u308b\u306e\u304b\u308f\u304b\u3089\u3093\n\u30c1\u30e3\u30d7\u30bf\u30fc1\u304c\u7d42\u308f\u3063\u305f!!!\n# 8\u65e5\u76ee\n\npAp\u3068pBinop\u306e\u5b9f\u88c5\u3092\u3057\u305f.pBinop\u306f\u5b9f\u969b\u306fpExpr1\u3067,\u3081\u3063\u3061\u3083\u9762\u5012\u304f\u3055\u304b\u3063\u305f.\nFigure 1.3 \u306eexpr4\u306e\u6e1b\u7b97\u3068expr5\u306e\u9664\u7b97\u306e\u53f3\u8fba\u304c\u4e0a\u306e\u3084\u3064\u3068\u3061\u3087\u3063\u3068\u9055\u3046\u306e\u306f\u3044\u3044\u3093\u3060\u308d\u3046\u304b.\n\u3042\u30fc,\u3044\u3044\u306e\u304b.\u7c21\u5358\u306e\u305f\u3081\u306b1-2-3\u30843/2/1\u3063\u3066\u3044\u3046\u5f0f\u306f\u4f5c\u308c\u306a\u3044\u3088\u3046\u306b\u3057\u305f\u3093\u3060\u3063\u3051.\n\u3067\u3082\u3053\u308c\u5168\u90e8\u53f3\u7d50\u5408\u3058\u3083\u306a\u3044\u304b\u306a\u3042.\n\u307e\u3042\u7d50\u5408\u6027(associativity)\u3092\u6e80\u305f\u3059\u6f14\u7b97\u5b50,(+,*,&,|)\u306b\u5bfe\u3057\u3066\u3057\u304b\u6f14\u7b97\u5b50\u306e\u9023\u7d9a\u3092\u8a8d\u3081\u3066\u306a\u3044\u304b\u3089\u554f\u984c\u306a\u3044\u3093\u3060\u3051\u3069.\n\u534a\u7fa4\u30d0\u30f3\u30b6\u30a4!\n\n```\n--- corelang.hs 2016-03-01 19:02:54.603333356 +0900\n+++ corelang1.hs        2016-03-01 19:02:54.616666690 +0900\n@@ -241,16 +241,15 @@\n     where mk_sc name arg _ expr = (name, arg, expr)\n \n pExpr :: Parser CoreExpr\n-pExpr =     --pThen mk_ap pExpr pAexpr\n-    --`pAlt`  pThen3 mk_binop pExpr (pApply pBinop EVar) pExpr\n-    --`pAlt`\n-    pThen4 mk_let (pLit \"let\") pDefns (pLit \"in\") pExpr\n+pExpr =     pApply (pOneOrMore pAexpr) mk_ap\n+    `pAlt`  pExpr1\n+    `pAlt`  pThen4 mk_let (pLit \"let\") pDefns (pLit \"in\") pExpr\n     `pAlt`  pThen4 mk_letrec (pLit \"letrec\") pDefns (pLit \"in\") pExpr\n     `pAlt`  pThen4 mk_case (pLit \"case\") pExpr (pLit \"of\") pAlts\n     `pAlt`  pThen4 mk_lam (pLit \"\\\\\") (pOneOrMore pVar) (pLit \".\") pExpr\n     `pAlt`  pAexpr\n     where\n-    mk_ap e a = EAp e a\n+    mk_ap e = foldl1 EAp e\n     mk_binop exp1 op exp2 = EAp (EAp op exp1) exp2\n     mk_let _ defns _ e = ELet nonRecursive  defns  e\n     mk_letrec _ defns _ e = ELet nonRecursive defns e\n@@ -284,18 +283,9 @@\n         mk_tag _ n _ = n\n         mk_alter n v _ e = (n, v, e)\n \n-pBinop :: Parser String\n-pBinop = pArithop `pAlt` pRelop `pAlt` pBoolop\n-\n-pArithop :: Parser String\n-pArithop = (pLit \"+\") `pAlt` (pLit \"-\") `pAlt` (pLit \"*\") `pAlt` (pLit \"//\")\n-\n pRelop :: Parser String\n pRelop = (pLit \"<\") `pAlt` (pLit \"<=\") `pAlt` (pLit \"==\") `pAlt` (pLit \"~=\") `pAlt` (pLit \">=\") `pAlt` (pLit \">\")\n \n-pBoolop :: Parser String\n-pBoolop = (pLit \"&\") `pAlt` (pLit \"|\")\n-\n syntax :: [Token] -> CoreProgram\n syntax = take_first_parse . pProgram\n     where\n@@ -306,9 +296,49 @@\n parse :: String -> CoreProgram\n parse = syntax . clex 1\n \n+data PartialExpr = NoOp | FoundOp Name CoreExpr\n+\n+pExpr1c :: Parser PartialExpr\n+pExpr1c = (pThen FoundOp (pLit \"|\") pExpr1) `pAlt` (pEmpty NoOp)\n+\n+pExpr1 :: Parser CoreExpr\n+pExpr1 = pThen assembleOp pExpr2 pExpr1c\n+\n+pExpr2c :: Parser PartialExpr\n+pExpr2c = (pThen FoundOp (pLit \"&\") pExpr2) `pAlt` (pEmpty NoOp)\n+\n+pExpr2 :: Parser CoreExpr\n+pExpr2 = pThen assembleOp pExpr3 pExpr2c\n+\n+pExpr3c :: Parser PartialExpr\n+pExpr3c = (pThen FoundOp pRelop pExpr4) `pAlt` (pEmpty NoOp)\n+\n+pExpr3 :: Parser CoreExpr\n+pExpr3 = pThen assembleOp pExpr4 pExpr3c\n+\n+pExpr4c :: Parser PartialExpr\n+pExpr4c = (pThen FoundOp (pLit \"-\") pExpr5) `pAlt` (pThen FoundOp (pLit \"+\") pExpr4) `pAlt` (pEmpty NoOp)\n+\n+pExpr4 :: Parser CoreExpr\n+pExpr4 = pThen assembleOp pExpr5 pExpr4c\n+\n+pExpr5c :: Parser PartialExpr\n+pExpr5c = (pThen FoundOp (pLit \"/\") pExpr6) `pAlt` (pThen FoundOp (pLit \"*\") pExpr5) `pAlt` (pEmpty NoOp)\n+\n+pExpr5 :: Parser CoreExpr\n+pExpr5 = pThen assembleOp pExpr6 pExpr5c\n+\n+pExpr6 :: Parser CoreExpr\n+pExpr6 = pApply (pOneOrMore pAexpr) (foldl1 EAp)\n+\n+assembleOp :: CoreExpr -> PartialExpr -> CoreExpr\n+assembleOp e1 NoOp = e1\n+assembleOp e1 (FoundOp op e2) = EAp (EAp (EVar op) e1) e2\n+\n main :: IO ()\n --main = putStrLn $ iDisplay $ pprExpr (ELet nonRecursive [(\"att\", ENum 2)] (EAp (EAp (EVar \"+\") (EVar \"att\")) (EVar \"1\")))\n-main = putStrLn( pprint $ parse  \"f=3;\\ng x y = let z = x in z ;\\nh x = case (let y = x in y) of\\n<1> -> 2 ;\\n<2> -> 5\")\n+main = putStrLn( pprint $ parse  \"f=3;\\ng x y = let z = x in z ;\\nh x = case (let y = x in y) of\\n<1> -> 2 ;\\n<2> -> 5;\\n i = g (1 + 2 * 3) (5 - 1 / 2)\")\n --main = putStrLn $ show $ pOneOrMoreWithSep (pLit \"x\") (pLit \";\") [(1,\"x\"),(1,\";\"),(1,\"x\") ,(1,\";\"),(2,\"x\"),(2,\";\"),(2,\"x\"),(2,\";\"),(2,\"x\") ]\n --main = putStrLn $ show $ pExpr [(2,\"let\"),(2,\"z\"),(2,\"=\"),(2,\"x\"),(2,\"in\"),(2,\"z\")]\n --main = putStrLn $ pprint $ syntax [(1,\"f\"),(1,\"=\"),(1,\"3\") ,(1,\";\"),(2,\"g\"),(2,\"x\"),(2,\"y\"),(2,\"=\"), (2,\"let\"),(2,\"z\"),(2,\"=\"),(2,\"x\"),(2,\"in\"),(2,\"z\"),(2,\";\"),(3,\"h\"),(3,\"x\"),(3,\"=\"),(3,\"case\"),(3,\"(\"),(3,\"let\"),(3,\"y\"),(3,\"=\"),(3,\"x\"),(3,\"in\"),(3,\"y\"),(3,\")\"),(3,\"of\"),(4,\"<\"),(4,\"1\"),(4,\">\"),(4,\"->\"),(4,\"2\"),(4,\";\"),(5,\"<\"),(5,\"2\"),(5,\">\"),(5,\"->\"),(5,\"5\")]\n+\n```\n\n```\n> module Template where\n> import Language\n> import Utils\n```\n\n\u3053\u308c\u3069\u3046\u3044\u3046\u610f\u5473\u304c\u3042\u308b\u306e\u304b\u308f\u304b\u3089\u3093\n\n\n**\u30c1\u30e3\u30d7\u30bf\u30fc1\u304c\u7d42\u308f\u3063\u305f!!!**\n", "tags": ["\u30a4\u30f3\u30d7\u30ea\u30e1\u30f3\u30c6\u30a3\u30f3\u30b0\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30ca\u30eb\u30e9\u30f3\u30b2\u30fc\u30b8\u30ba"]}