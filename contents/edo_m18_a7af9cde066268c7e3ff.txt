{"tags": ["Unity", "GLSL", "Shader", "OpenGL", "3D"], "context": " More than 1 year has passed since last update.\u307e\u3060\u7d30\u304b\u3044\u66f8\u5f0f\u306b\u3064\u3044\u3066\u628a\u63e1\u3057\u304d\u308c\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3059\u308b\u3068\u534a\u900f\u660e\u306b\u306a\u308a\u307e\u3059\u3002\n\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3053\u3061\u3089\u306e\u8a18\u4e8b\uff08GLSL Programming/Unity/Transparency\uff09\u3092\u53c2\u8003\u306b\u3002\nShader \"Custom/Transparency\" {\n    SubShader {\n        Tags { \"Queue\" = \"Transparent\" }\n        Pass {\n            //\u6700\u521d\u306e\u30d1\u30b9\u306f\u80cc\u9762\u306e\u307f\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3002\u3064\u307e\u308a\u5185\u5074\u3002\n            Cull Front\n\n            //\u4ed6\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u306f\u3058\u304b\u306a\u3044\u3088\u3046\u306b\u6df1\u5ea6\u30d0\u30c3\u30d5\u30a1\u306e\u66f8\u304d\u8fbc\u307f\u3092\u3057\u306a\u3044\n            ZWrite Off\n\n            //\u30a2\u30eb\u30d5\u30a1\u30d6\u30ec\u30f3\u30c7\u30a3\u30f3\u30b0\u3092\u4f7f\u3046\n            Blend SrcAlpha OneMinusSrcAlpha         \n            GLSLPROGRAM\n\n            #ifdef VERTEX\n\n            void main()\n            {\n                gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;\n            }\n\n            #endif\n\n            #ifdef FRAGMENT\n\n            void main()\n            {\n                //4\u756a\u76ee\u306e\u30a2\u30eb\u30d5\u30a1\u6210\u5206\u304c\u91cd\u8981\u3002\n                //\u4e0b\u8a18\u306f\u534a\u900f\u660e\u306e\u30b0\u30ea\u30fc\u30f3\u3002\n                gl_FragColor = vec4(0.0, 1.0, 0.0, 0.3);\n            }\n\n            #endif\n\n            ENDGLSL\n        }\n\n        Pass {\n            //\u4e8c\u56de\u76ee\u306e\u30d1\u30b9\u306f\u8868\u306e\u307f\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\n            Cull Back\n\n            ZWrite Off\n\n            Blend SrcAlpha OneMinusSrcAlpha\n\n            GLSLPROGRAM\n\n            #ifdef VERTEX\n\n            void main()\n            {\n                gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;\n            }\n\n            #endif\n\n            #ifdef FRAGMENT\n\n            void main()\n            {\n                gl_FragColor = vec4(0.0, 1.0, 0.0, 0.3);\n            }\n\n            #endif\n\n            ENDGLSL\n        }\n    }\n}\n\n\u30dd\u30a4\u30f3\u30c8\u306f3\u70b9\u3002\n\u5192\u982d\u306eTags { \"Queue\" = \"Transparent\" }\u3068\u3001Blend SrcAlpha OneMinuesSrcAlpha\u306e\u90e8\u5206\u3067\u3059\u3002\nTags\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u3002\n\u3053\u3053\u306eTags\u3067\u6307\u5b9a\u3057\u3066\u3044\u308bQueue\u306f\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u306e\u9806\u5e8f\u3092\u6307\u5b9a\u3059\u308b\u3082\u306e\u306e\u3088\u3046\u3067\u3059\u3002\n\u3064\u307e\u308a\u3001Queue = Transparet\u3068\u30bf\u30b0\u304c\u4ed8\u3051\u3089\u308c\u305f\u30b7\u30a7\u30fc\u30c0\u3092\u6301\u3064\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u9806\uff08\u30ad\u30e5\u30fc\uff09\u304c\u6700\u5f8c\u306e\u65b9\u306b\u56de\u3055\u308c\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u3057\u3087\u3046\u3002\uff08\u305d\u3046\u3057\u306a\u3044\u3068\u534a\u900f\u660e\u306b\u306a\u3089\u306a\u3044\uff09\n\u539f\u6587\u3067\u306f\n\nthis render queue is rendered after Geometry and AlphaTest, in back-to-front order. Anything alpha-blended (i.e. shaders that don't write to depth buffer) should go here (glass, particle effects).\n\n\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nBlend\u306e\u65b9\u306f\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u306b\u3042\u308b\u5143\u306e\u8272\u3068\u65b0\u3057\u3044\u8272\u3068\u3092\u3069\u3046\u5408\u6210\u3059\u308b\u304b\u306e\u6307\u5b9a\u3067\u3059\u3002\n\u3064\u307e\u308a\u3001\u73fe\u5728\u8a08\u7b97\u4e2d\u306e\u30bd\u30fc\u30b9\u30ab\u30e9\u30fc\u3068\u547c\u3070\u308c\u308b\u8272\u3068\u3001\u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u306b\u66f8\u304d\u8fbc\u307e\u308c\u3066\u3044\u308b\u30c7\u30a3\u30b9\u30c6\u30a3\u30cd\u30fc\u30b7\u30e7\u30f3\u30ab\u30e9\u30fc\u3068\u306e\u5408\u6210\u6bd4\u7387\u3092\u6307\u5b9a\u3059\u308b\u3082\u306e\u3067\u3059\u3002\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u539f\u6587\u306f\n\nOne of the operations is the blending stage, which combines the color of the fragment (as specified in gl_FragColor), which is called the \u201csource color\u201d, with the color of the corresponding pixel that is already in the framebuffer, which is called the \u201cdestination color\u201d (because the \u201cdestination\u201d of the resulting blended color is the framebuffer).\n\n\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u30b5\u30f3\u30d7\u30eb\u306e\u5408\u6210\u65b9\u6cd5\u3092\u8a08\u7b97\u5f0f\u306b\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\nvec4 result = vec4(gl_FragColor.a) * gl_FragColor + vec4(1.0 - gl_FragColor.a) * pixel_color;\n\n\u3053\u308c\u3067\u534a\u900f\u660e\u3092\u5b9f\u73fe\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u3059\u306d\u3002\uff08\u30bd\u30fc\u30b9\u30ab\u30e9\u30fc\u306e\u30a2\u30eb\u30d5\u30a1\u5024\u304c1\u306a\u3089\u534a\u900f\u660e\u306b\u306a\u3089\u306a\u304f\u306a\u308b\uff09\n\u3055\u3066\u3001\u6700\u5f8c\u306e\u30dd\u30a4\u30f3\u30c8\u304cPass { \u2026 }\u3092\u3075\u305f\u3064\u66f8\u3044\u3066\u3044\u308b\u70b9\u3067\u3059\u3002\n\u3053\u308c\u306f\u8868\u306e\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3068\u88cf\u306e\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3092\u5206\u3051\u3066\u3044\u308b\u90e8\u5206\u3067\u3059\u3002\n\u666e\u901a\u3001\u8ca0\u8377\u8efd\u6e1b\u306e\u305f\u3081\u306b\u88cf\u9762\u306e\u30dd\u30ea\u30b4\u30f3\u306f\u63cf\u304b\u308c\u307e\u305b\u3093\u3002\n\u30b2\u30fc\u30e0\u3068\u304b\u3057\u3066\u30ab\u30e1\u30e9\u304c\u5909\u306a\u6240\u306b\u5165\u308b\u3068\u30dd\u30ea\u30b4\u30f3\u304c\u6d88\u3048\u305f\u308a\u3059\u308b\u3042\u308c\u3067\u3059\u3002\n\u3057\u304b\u3057\u534a\u900f\u660e\u3068\u3044\u3046\u3053\u3068\u306f\u88cf\u9762\u3082\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3055\u308c\u306a\u3044\u3068\u304a\u304b\u3057\u306a\u3053\u3068\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u305d\u3053\u3067Pass\u3092\u3075\u305f\u3064\u8a2d\u5b9a\u3057\u3001\u305d\u308c\u305e\u308c\u8868\u3068\u88cf\u3092\u4e21\u65b9\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3057\u3066\u3044\u308b\u3001\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u3002\n\u3061\u306a\u307f\u306b\u4e0a\u8a18\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u9069\u7528\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u3068\u88cf\u3067\u9055\u3046\u8272\u306b\u306a\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n\u307e\u3060\u7d30\u304b\u3044\u66f8\u5f0f\u306b\u3064\u3044\u3066\u628a\u63e1\u3057\u304d\u308c\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3059\u308b\u3068\u534a\u900f\u660e\u306b\u306a\u308a\u307e\u3059\u3002\n\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3053\u3061\u3089\u306e\u8a18\u4e8b\uff08[GLSL Programming/Unity/Transparency](http://en.wikibooks.org/wiki/GLSL_Programming/Unity/Transparency)\uff09\u3092\u53c2\u8003\u306b\u3002\n\n```glsl\nShader \"Custom/Transparency\" {\n\tSubShader {\n\t\tTags { \"Queue\" = \"Transparent\" }\n\t\tPass {\n\t\t\t//\u6700\u521d\u306e\u30d1\u30b9\u306f\u80cc\u9762\u306e\u307f\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3002\u3064\u307e\u308a\u5185\u5074\u3002\n\t\t\tCull Front\n\n\t\t\t//\u4ed6\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u306f\u3058\u304b\u306a\u3044\u3088\u3046\u306b\u6df1\u5ea6\u30d0\u30c3\u30d5\u30a1\u306e\u66f8\u304d\u8fbc\u307f\u3092\u3057\u306a\u3044\n\t\t\tZWrite Off\n\t\t\n\t\t\t//\u30a2\u30eb\u30d5\u30a1\u30d6\u30ec\u30f3\u30c7\u30a3\u30f3\u30b0\u3092\u4f7f\u3046\n\t\t\tBlend SrcAlpha OneMinusSrcAlpha\t\t\t\n\t\t\tGLSLPROGRAM\n\t\t\t\n\t\t\t#ifdef VERTEX\n\t\t\t\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\tgl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;\n\t\t\t}\n\t\t\t\n\t\t\t#endif\n\t\t\t\n\t\t\t#ifdef FRAGMENT\n\t\t\t\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\t//4\u756a\u76ee\u306e\u30a2\u30eb\u30d5\u30a1\u6210\u5206\u304c\u91cd\u8981\u3002\n\t\t\t\t//\u4e0b\u8a18\u306f\u534a\u900f\u660e\u306e\u30b0\u30ea\u30fc\u30f3\u3002\n\t\t\t\tgl_FragColor = vec4(0.0, 1.0, 0.0, 0.3);\n\t\t\t}\n\t\t\t\n\t\t\t#endif\n\t\t\t\n\t\t\tENDGLSL\n\t\t}\n\n\t\tPass {\n\t\t\t//\u4e8c\u56de\u76ee\u306e\u30d1\u30b9\u306f\u8868\u306e\u307f\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\n\t\t\tCull Back\n\t\t\t\n\t\t\tZWrite Off\n\t\t\t\n\t\t\tBlend SrcAlpha OneMinusSrcAlpha\n\t\t\t\n\t\t\tGLSLPROGRAM\n\t\t\t\n\t\t\t#ifdef VERTEX\n\t\t\t\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\tgl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;\n\t\t\t}\n\t\t\t\n\t\t\t#endif\n\t\t\t\n\t\t\t#ifdef FRAGMENT\n\t\t\t\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\tgl_FragColor = vec4(0.0, 1.0, 0.0, 0.3);\n\t\t\t}\n\t\t\t\n\t\t\t#endif\n\t\t\t\n\t\t\tENDGLSL\n\t\t}\n\t}\n}\n```\n\n\u30dd\u30a4\u30f3\u30c8\u306f3\u70b9\u3002\n\u5192\u982d\u306e`Tags { \"Queue\" = \"Transparent\" }`\u3068\u3001`Blend SrcAlpha OneMinuesSrcAlpha`\u306e\u90e8\u5206\u3067\u3059\u3002\nTags\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f[\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://docs.unity3d.com/Documentation/Components/SL-SubshaderTags.html)\u3092\u3002\n\n\u3053\u3053\u306eTags\u3067\u6307\u5b9a\u3057\u3066\u3044\u308bQueue\u306f\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u306e\u9806\u5e8f\u3092\u6307\u5b9a\u3059\u308b\u3082\u306e\u306e\u3088\u3046\u3067\u3059\u3002\n\u3064\u307e\u308a\u3001Queue = Transparet\u3068\u30bf\u30b0\u304c\u4ed8\u3051\u3089\u308c\u305f\u30b7\u30a7\u30fc\u30c0\u3092\u6301\u3064\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u9806\uff08\u30ad\u30e5\u30fc\uff09\u304c\u6700\u5f8c\u306e\u65b9\u306b\u56de\u3055\u308c\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u3057\u3087\u3046\u3002\uff08\u305d\u3046\u3057\u306a\u3044\u3068\u534a\u900f\u660e\u306b\u306a\u3089\u306a\u3044\uff09\n\n\u539f\u6587\u3067\u306f\n\n> this render queue is rendered after Geometry and AlphaTest, in back-to-front order. Anything alpha-blended (i.e. shaders that don't write to depth buffer) should go here (glass, particle effects).\n\n\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\nBlend\u306e\u65b9\u306f\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u306b\u3042\u308b\u5143\u306e\u8272\u3068\u65b0\u3057\u3044\u8272\u3068\u3092\u3069\u3046\u5408\u6210\u3059\u308b\u304b\u306e\u6307\u5b9a\u3067\u3059\u3002\n\u3064\u307e\u308a\u3001\u73fe\u5728\u8a08\u7b97\u4e2d\u306e\u30bd\u30fc\u30b9\u30ab\u30e9\u30fc\u3068\u547c\u3070\u308c\u308b\u8272\u3068\u3001\u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u306b\u66f8\u304d\u8fbc\u307e\u308c\u3066\u3044\u308b\u30c7\u30a3\u30b9\u30c6\u30a3\u30cd\u30fc\u30b7\u30e7\u30f3\u30ab\u30e9\u30fc\u3068\u306e\u5408\u6210\u6bd4\u7387\u3092\u6307\u5b9a\u3059\u308b\u3082\u306e\u3067\u3059\u3002\n\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u539f\u6587\u306f\n\n>One of the operations is the blending stage, which combines the color of the fragment (as specified in gl_FragColor), which is called the \u201csource color\u201d, with the color of the corresponding pixel that is already in the framebuffer, which is called the \u201cdestination color\u201d (because the \u201cdestination\u201d of the resulting blended color is the framebuffer).\n\n\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u30b5\u30f3\u30d7\u30eb\u306e\u5408\u6210\u65b9\u6cd5\u3092\u8a08\u7b97\u5f0f\u306b\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\n\n```glsl\nvec4 result = vec4(gl_FragColor.a) * gl_FragColor + vec4(1.0 - gl_FragColor.a) * pixel_color;\n```\n\n\u3053\u308c\u3067\u534a\u900f\u660e\u3092\u5b9f\u73fe\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u3059\u306d\u3002\uff08\u30bd\u30fc\u30b9\u30ab\u30e9\u30fc\u306e\u30a2\u30eb\u30d5\u30a1\u5024\u304c1\u306a\u3089\u534a\u900f\u660e\u306b\u306a\u3089\u306a\u304f\u306a\u308b\uff09\n\n\n\u3055\u3066\u3001\u6700\u5f8c\u306e\u30dd\u30a4\u30f3\u30c8\u304c`Pass { \u2026 }`\u3092\u3075\u305f\u3064\u66f8\u3044\u3066\u3044\u308b\u70b9\u3067\u3059\u3002\n\u3053\u308c\u306f\u8868\u306e\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3068\u88cf\u306e\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3092\u5206\u3051\u3066\u3044\u308b\u90e8\u5206\u3067\u3059\u3002\n\u666e\u901a\u3001\u8ca0\u8377\u8efd\u6e1b\u306e\u305f\u3081\u306b\u88cf\u9762\u306e\u30dd\u30ea\u30b4\u30f3\u306f\u63cf\u304b\u308c\u307e\u305b\u3093\u3002\n\u30b2\u30fc\u30e0\u3068\u304b\u3057\u3066\u30ab\u30e1\u30e9\u304c\u5909\u306a\u6240\u306b\u5165\u308b\u3068\u30dd\u30ea\u30b4\u30f3\u304c\u6d88\u3048\u305f\u308a\u3059\u308b\u3042\u308c\u3067\u3059\u3002\n\n\u3057\u304b\u3057\u534a\u900f\u660e\u3068\u3044\u3046\u3053\u3068\u306f\u88cf\u9762\u3082\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3055\u308c\u306a\u3044\u3068\u304a\u304b\u3057\u306a\u3053\u3068\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u305d\u3053\u3067Pass\u3092\u3075\u305f\u3064\u8a2d\u5b9a\u3057\u3001\u305d\u308c\u305e\u308c\u8868\u3068\u88cf\u3092\u4e21\u65b9\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3057\u3066\u3044\u308b\u3001\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u3002\n\n\u3061\u306a\u307f\u306b\u4e0a\u8a18\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u9069\u7528\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u3068\u88cf\u3067\u9055\u3046\u8272\u306b\u306a\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n![front-back-facing.jpg](https://qiita-image-store.s3.amazonaws.com/0/5616/beda8a8d-66b4-68de-e0af-7671a50a9190.jpeg \"front-back-facing.jpg\")\n"}