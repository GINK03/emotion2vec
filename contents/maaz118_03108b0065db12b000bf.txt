{"context": "https://github.com/zeit/next.js/wiki/Redux-example \u306eGoogle\u7ffb\u8a33\u307b\u307c\u305d\u306e\u307e\u307e\u3067\u3059  \n\nUsually splitting your app state into pages feels natural but sometimes you'll want to have global state for your app. This is an example on how you can use redux that also works with our universal rendering approach. This is just a way you can do it but it's not the only one.\n\n\u901a\u5e38\u3001\u30a2\u30d7\u30ea\u306e\u72b6\u614b\u3092\u30da\u30fc\u30b8\u306b\u5206\u5272\u3059\u308b\u306e\u306f\u5f53\u7136\u3067\u3059\u304c\u3001\u30a2\u30d7\u30ea\u306e\u30b0\u30ed\u30fc\u30d0\u30eb\u306a\u72b6\u614b\u3092\u6301\u3061\u305f\u3044\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002 \u3053\u308c\u306f\u3001\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3067\u3082\u6a5f\u80fd\u3059\u308bredux\u3092\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u306e\u4f8b\u3067\u3059\u3002 \u3053\u308c\u304c\u552f\u4e00\u306e\u65b9\u6cd5\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u304f\u3001\u3053\u306e\u4ee5\u5916\u306b\u3082\u3084\u308a\u65b9\u306f\u3042\u308a\u307e\u3059\u3002\n\nIn this example we are going to display a digital clock that updates every second. The first render is happening in the server and then the browser will take over. To illustrate this, the server rendered clock will have a different background color than the client one.\n\n\u3053\u306e\u4f8b\u3067\u306f\u30011\u79d2\u3054\u3068\u306b\u66f4\u65b0\u3055\u308c\u308b\u30c7\u30b8\u30bf\u30eb\u6642\u8a08\u3092\u8868\u793a\u3057\u307e\u3059\u3002 \u6700\u521d\u306e\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u304c\u30b5\u30fc\u30d0\u30fc\u3067\u884c\u308f\u308c\u3001\u30d6\u30e9\u30a6\u30b6\u304c\u5f15\u304d\u7d99\u304e\u307e\u3059\u3002 \u3053\u308c\u3092\u8aac\u660e\u3059\u308b\u305f\u3081\u306b\u3001\u30b5\u30fc\u30d0\u3067\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3055\u308c\u305f\u6642\u8a08\u306f\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u3082\u306e\u3068\u306f\u7570\u306a\u308b\u80cc\u666f\u8272\u306b\u3057\u307e\u3059\u3002\n\n\nOur page is located at pages/index.js so it will map the route /. To get the initial data for rendering we are implementing the static method getInitialProps, initializing the redux store and dispatching the required actions until we are ready to return the initial state to be rendered.\n\n\u79c1\u305f\u3061\u306e\u30da\u30fc\u30b8\u306f pages / index.js \u306b\u3042\u308a\u307e\u3059\u306e\u3067\u3001 / \u3092\u30de\u30c3\u30d7\u3057\u307e\u3059\u3002 \u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u306e\u305f\u3081\u306e\u521d\u671f\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u306b\u306f\u3001\u9759\u7684\u30e1\u30bd\u30c3\u30c9getInitialProps\u3092\u5b9f\u88c5\u3057\u3066\u3001redux\u30b9\u30c8\u30a2\u3092\u521d\u671f\u5316\u3057\u3001\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3055\u308c\u308b\u521d\u671f\u72b6\u614b\u3092\u8fd4\u3059\u6e96\u5099\u304c\u3067\u304d\u308b\u307e\u3067\u5fc5\u8981\u306a\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u3057\u307e\u3059\u3002\n\nThe root component for the render method is the react-redux Provider that allows us to send the store down to children components so they can access to the state when required.\n\nrender\u30e1\u30bd\u30c3\u30c9\u306e\u30eb\u30fc\u30c8\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306freact-redux Provider\u3067\u3001\u5b50\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306b\u30b9\u30c8\u30a2\u3092\u9001\u4fe1\u3057\u3066\u3001\u5fc5\u8981\u306a\u3068\u304d\u306b\u72b6\u614b\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\nTo pass the initial state from the server to the client we pass it as a prop called initialState so then it's available when the client takes over.\n\n\u521d\u671f\u72b6\u614b\u3092\u30b5\u30fc\u30d0\u30fc\u304b\u3089\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u6e21\u3059\u305f\u3081\u306b\u3001 initialState \u3068\u3044\u3046\u540d\u524d\u306eprop\u3092\u6e21\u3057\u307e\u3059\u3002\u305d\u3046\u3059\u308c\u3070\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u5f15\u304d\u7d99\u3050\u3068\u304d\u306b\u5229\u7528\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\n// pages/index.js\n\nimport React from 'react'\nimport { Provider } from 'react-redux'\nimport { reducer, initStore, startClock } from '../store'\nimport Clock from '../components/Clock'\n\nexport default class Counter extends React.Component {\n  static getInitialProps ({ req }) {\n    const isServer = !!req\n    const store = initStore(reducer, null, isServer)\n    store.dispatch({ type: 'TICK', ts: Date.now() })\n    return  { initialState: store.getState(), isServer }\n  }\n\n  constructor (props) {\n    super(props)\n    this.store = initStore(reducer, props.initialState, props.isServer)\n  }\n\n  componentDidMount () {\n    this.timer = this.store.dispatch(startClock())\n  }\n\n  componentWillUnmount () {\n    clearInterval(this.timer)\n  }\n\n  render () {\n    return (\n      <Provider store={this.store}>\n        <Clock />\n      </Provider>\n    )\n  }\n}\n\n\nThe trick here for supporting universal redux is to separate the cases for the client and the server. When we are on the server we want to create a new store every time, otherwise different users data will be mixed up. If we are in the client we want to use always the same store.\n\nuniversal redux\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u305f\u3081\u306e\u3053\u3053\u306e\u30c8\u30ea\u30c3\u30af\u306f\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3068\u30b5\u30fc\u30d0\u30fc\u306e\u30b1\u30fc\u30b9\u3092\u5206\u96e2\u3059\u308b\u3053\u3068\u3067\u3059\u3002 \u30b5\u30fc\u30d0\u30fc\u4e0a\u306b\u3044\u308b\u3068\u304d\u306b\u6bce\u56de\u65b0\u3057\u3044\u30b9\u30c8\u30a2\u3092\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u3046\u3057\u306a\u3044\u3068\u3001\u7570\u306a\u308b\u30e6\u30fc\u30b6\u30fc\u30c7\u30fc\u30bf\u304c\u6df7\u5728\u3057\u307e\u3059\u3002 \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u3044\u308b\u5834\u5408\u306f\u3001\u5e38\u306b\u540c\u3058\u30b9\u30c8\u30a2\u3092\u4f7f\u7528\u3057\u305f\u3044\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002\n// store.js\n\nimport { createStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\n\nexport const reducer = (state = { lastUpdate: 0, light: false }, action) => {\n  switch (action.type) {\n    case 'TICK': return { lastUpdate: action.ts, light: !!action.light }\n    default: return state\n  }\n}\n\nexport const startClock = () => dispatch => {\n  setInterval(() => dispatch({ type: 'TICK', light: true, ts: Date.now() }), 800)\n}\n\nexport const initStore = (reducer, initialState, isServer) => {\n  if (isServer && typeof window === 'undefined') {\n    return createStore(reducer, initialState, applyMiddleware(thunkMiddleware))\n  } else {\n    if (!window.store) {\n      window.store = createStore(reducer, initialState, applyMiddleware(thunkMiddleware))\n    }\n    return window.store\n  } \n}\n\n\nThe clock has access to the state using the connect function from react-redux. In this case Clock is a direct child from the page but it could be deep down the render tree.\n\n\u30af\u30ed\u30c3\u30af\u306f\u3001react-redux\u306econnect\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u72b6\u614b\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002 \u3053\u306e\u5834\u5408\u3001Clock\u306f\u30da\u30fc\u30b8\u304b\u3089\u306e\u76f4\u63a5\u306e\u5b50\u3067\u3059\u304c\u3001\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u30c4\u30ea\u30fc\u306e\u6df1\u304f\u306b\u3042\u3063\u3066\u3082\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002\n// components/Clock.js\n\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport { style, merge } from 'next/css'\n\nexport default connect(state => state)(({ lastUpdate, light }) => {\n  return (\n    <div className={merge(styles, style({ backgroundColor: light ? '#999' : '#000' }))}>\n      {format(new Date(lastUpdate))}\n    </div>\n  )\n})\n\nconst format = t => `${pad(t.getHours())}:${pad(t.getMinutes())}:${pad(t.getSeconds())}`\n\nconst pad = n => n < 10 ? `0${n}` : n\n\nconst styles = style({\n  padding: '15px',\n  display: 'inline-block',\n  color: '#82FA58',\n  font: '50px menlo, monaco, monospace'\n})\n\nhttps://github.com/zeit/next.js/wiki/Redux-example \u306eGoogle\u7ffb\u8a33\u307b\u307c\u305d\u306e\u307e\u307e\u3067\u3059 :joy: \n\n> Usually splitting your app state into pages feels natural but sometimes you'll want to have global state for your app. This is an example on how you can use redux that also works with our universal rendering approach. This is just a way you can do it but it's not the only one.\n\n\u901a\u5e38\u3001\u30a2\u30d7\u30ea\u306e\u72b6\u614b\u3092\u30da\u30fc\u30b8\u306b\u5206\u5272\u3059\u308b\u306e\u306f\u5f53\u7136\u3067\u3059\u304c\u3001\u30a2\u30d7\u30ea\u306e\u30b0\u30ed\u30fc\u30d0\u30eb\u306a\u72b6\u614b\u3092\u6301\u3061\u305f\u3044\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002 \u3053\u308c\u306f\u3001\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3067\u3082\u6a5f\u80fd\u3059\u308bredux\u3092\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u306e\u4f8b\u3067\u3059\u3002 \u3053\u308c\u304c\u552f\u4e00\u306e\u65b9\u6cd5\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u304f\u3001\u3053\u306e\u4ee5\u5916\u306b\u3082\u3084\u308a\u65b9\u306f\u3042\u308a\u307e\u3059\u3002\n\n> In this example we are going to display a digital clock that updates every second. The first render is happening in the server and then the browser will take over. To illustrate this, the server rendered clock will have a different background color than the client one.\n\n\u3053\u306e\u4f8b\u3067\u306f\u30011\u79d2\u3054\u3068\u306b\u66f4\u65b0\u3055\u308c\u308b\u30c7\u30b8\u30bf\u30eb\u6642\u8a08\u3092\u8868\u793a\u3057\u307e\u3059\u3002 \u6700\u521d\u306e\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u304c\u30b5\u30fc\u30d0\u30fc\u3067\u884c\u308f\u308c\u3001\u30d6\u30e9\u30a6\u30b6\u304c\u5f15\u304d\u7d99\u304e\u307e\u3059\u3002 \u3053\u308c\u3092\u8aac\u660e\u3059\u308b\u305f\u3081\u306b\u3001\u30b5\u30fc\u30d0\u3067\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3055\u308c\u305f\u6642\u8a08\u306f\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u3082\u306e\u3068\u306f\u7570\u306a\u308b\u80cc\u666f\u8272\u306b\u3057\u307e\u3059\u3002\n\n![clock](https://camo.githubusercontent.com/fd3098028e16b48d006f96b875119c228d5f4b82/687474703a2f2f692e696d6775722e636f6d2f4a43787457536a2e676966)\n\n> Our page is located at pages/index.js so it will map the route /. To get the initial data for rendering we are implementing the static method getInitialProps, initializing the redux store and dispatching the required actions until we are ready to return the initial state to be rendered.\n\n\u79c1\u305f\u3061\u306e\u30da\u30fc\u30b8\u306f `pages / index.js` \u306b\u3042\u308a\u307e\u3059\u306e\u3067\u3001 `/` \u3092\u30de\u30c3\u30d7\u3057\u307e\u3059\u3002 \u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u306e\u305f\u3081\u306e\u521d\u671f\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u306b\u306f\u3001\u9759\u7684\u30e1\u30bd\u30c3\u30c9getInitialProps\u3092\u5b9f\u88c5\u3057\u3066\u3001redux\u30b9\u30c8\u30a2\u3092\u521d\u671f\u5316\u3057\u3001\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3055\u308c\u308b\u521d\u671f\u72b6\u614b\u3092\u8fd4\u3059\u6e96\u5099\u304c\u3067\u304d\u308b\u307e\u3067\u5fc5\u8981\u306a\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u3057\u307e\u3059\u3002\n\n> The root component for the render method is the react-redux Provider that allows us to send the store down to children components so they can access to the state when required.\n\nrender\u30e1\u30bd\u30c3\u30c9\u306e\u30eb\u30fc\u30c8\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306freact-redux Provider\u3067\u3001\u5b50\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306b\u30b9\u30c8\u30a2\u3092\u9001\u4fe1\u3057\u3066\u3001\u5fc5\u8981\u306a\u3068\u304d\u306b\u72b6\u614b\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n> To pass the initial state from the server to the client we pass it as a prop called initialState so then it's available when the client takes over.\n\n\u521d\u671f\u72b6\u614b\u3092\u30b5\u30fc\u30d0\u30fc\u304b\u3089\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u6e21\u3059\u305f\u3081\u306b\u3001 `initialState` \u3068\u3044\u3046\u540d\u524d\u306eprop\u3092\u6e21\u3057\u307e\u3059\u3002\u305d\u3046\u3059\u308c\u3070\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u5f15\u304d\u7d99\u3050\u3068\u304d\u306b\u5229\u7528\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\n\n```js\n// pages/index.js\n\nimport React from 'react'\nimport { Provider } from 'react-redux'\nimport { reducer, initStore, startClock } from '../store'\nimport Clock from '../components/Clock'\n\nexport default class Counter extends React.Component {\n  static getInitialProps ({ req }) {\n    const isServer = !!req\n    const store = initStore(reducer, null, isServer)\n    store.dispatch({ type: 'TICK', ts: Date.now() })\n    return  { initialState: store.getState(), isServer }\n  }\n\n  constructor (props) {\n    super(props)\n    this.store = initStore(reducer, props.initialState, props.isServer)\n  }\n\n  componentDidMount () {\n    this.timer = this.store.dispatch(startClock())\n  }\n\n  componentWillUnmount () {\n    clearInterval(this.timer)\n  }\n\n  render () {\n    return (\n      <Provider store={this.store}>\n        <Clock />\n      </Provider>\n    )\n  }\n}\n```\n\n> The trick here for supporting universal redux is to separate the cases for the client and the server. When we are on the server we want to create a new store every time, otherwise different users data will be mixed up. If we are in the client we want to use always the same store.\n\nuniversal redux\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u305f\u3081\u306e\u3053\u3053\u306e\u30c8\u30ea\u30c3\u30af\u306f\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3068\u30b5\u30fc\u30d0\u30fc\u306e\u30b1\u30fc\u30b9\u3092\u5206\u96e2\u3059\u308b\u3053\u3068\u3067\u3059\u3002 \u30b5\u30fc\u30d0\u30fc\u4e0a\u306b\u3044\u308b\u3068\u304d\u306b\u6bce\u56de\u65b0\u3057\u3044\u30b9\u30c8\u30a2\u3092\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u3046\u3057\u306a\u3044\u3068\u3001\u7570\u306a\u308b\u30e6\u30fc\u30b6\u30fc\u30c7\u30fc\u30bf\u304c\u6df7\u5728\u3057\u307e\u3059\u3002 \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u3044\u308b\u5834\u5408\u306f\u3001\u5e38\u306b\u540c\u3058\u30b9\u30c8\u30a2\u3092\u4f7f\u7528\u3057\u305f\u3044\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002\n\n```js\n// store.js\n\nimport { createStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\n\nexport const reducer = (state = { lastUpdate: 0, light: false }, action) => {\n  switch (action.type) {\n    case 'TICK': return { lastUpdate: action.ts, light: !!action.light }\n    default: return state\n  }\n}\n\nexport const startClock = () => dispatch => {\n  setInterval(() => dispatch({ type: 'TICK', light: true, ts: Date.now() }), 800)\n}\n\nexport const initStore = (reducer, initialState, isServer) => {\n  if (isServer && typeof window === 'undefined') {\n    return createStore(reducer, initialState, applyMiddleware(thunkMiddleware))\n  } else {\n    if (!window.store) {\n      window.store = createStore(reducer, initialState, applyMiddleware(thunkMiddleware))\n    }\n    return window.store\n  } \n}\n```\n\n> The clock has access to the state using the connect function from react-redux. In this case Clock is a direct child from the page but it could be deep down the render tree.\n\n\u30af\u30ed\u30c3\u30af\u306f\u3001react-redux\u306econnect\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u72b6\u614b\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002 \u3053\u306e\u5834\u5408\u3001Clock\u306f\u30da\u30fc\u30b8\u304b\u3089\u306e\u76f4\u63a5\u306e\u5b50\u3067\u3059\u304c\u3001\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u30c4\u30ea\u30fc\u306e\u6df1\u304f\u306b\u3042\u3063\u3066\u3082\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002\n\n```js\n// components/Clock.js\n\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport { style, merge } from 'next/css'\n\nexport default connect(state => state)(({ lastUpdate, light }) => {\n  return (\n    <div className={merge(styles, style({ backgroundColor: light ? '#999' : '#000' }))}>\n      {format(new Date(lastUpdate))}\n    </div>\n  )\n})\n\nconst format = t => `${pad(t.getHours())}:${pad(t.getMinutes())}:${pad(t.getSeconds())}`\n\nconst pad = n => n < 10 ? `0${n}` : n\n\nconst styles = style({\n  padding: '15px',\n  display: 'inline-block',\n  color: '#82FA58',\n  font: '50px menlo, monaco, monospace'\n})\n```\n", "tags": ["React", "redux", "next.js"]}