{"tags": ["\u6a5f\u68b0\u5b66\u7fd2", "3DCG", "C++", "\u6570\u5024\u8a08\u7b97"], "context": "\u53c2\u8003\u6587\u732e [1] \u306b \u4e8c\u91cd\u6570 \u3067\u81ea\u52d5\u5fae\u5206 (automatic differentiation) \u3059\u308b\u65b9\u6cd5\u304c\u8f09\u3063\u3066\u3044\u305f\u306e\u3067\u8a66\u3057\u3066\u307f\u305f\u3002\n\n\u4e8c\u91cd\u6570\n\u4e8c\u91cd\u6570 (dual number) \u306f\u3001\u8907\u7d20\u6570\u306e\u3088\u3046\u306b\u5b9f\u6570\u3092\u62e1\u5f35\u3057\u305f\u6570\u3067\na + b \\epsilon\na+b\u03f5{a + b \\epsilon\n}\n\u3068\u8a18\u8ff0\u3059\u308b\u6570\u3067\u3042\u308b\u3002\u3053\u3053\u3067\u3001\u03f5\\epsilon \u304c\u8907\u7d20\u6570\u306e ii \u306b\u3042\u305f\u308b\u3082\u306e\u3067\u3001\u03f52=0\\epsilon^2 = 0 \u3068\u3044\u3046\u6027\u8cea\u3092\u6301\u3064\u3082\u306e\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\n\u52a0\u6e1b\u4e57\u9664\u3082\u8907\u7d20\u6570\u3068\u540c\u69d8\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3001C++ \u3067\u5b9f\u88c5\u3059\u308b\u3068\u3001\n\ndn.hpp\n#pragma once\n\n#include <ostream>\n\nnamespace math {\n\n  // \u4e8c\u91cd\u6570 a + b \u03b5\n  template <typename T = double>\n  class dual_number {\n  public:\n    using this_type = dual_number<T>;\n\n  public:\n    inline dual_number(T a, T b = T(0)) : a_(a), b_(b) {}\n\n    inline this_type operator - () const {\n      return this_type(-a_, -b_);\n    }\n\n    inline this_type& operator += (this_type const& rhs) {\n      a_ += rhs.a_;\n      b_ += rhs.b_;\n      return *this;\n    }\n\n    inline this_type& operator -= (this_type const& rhs) {\n      a_ -= rhs.a_;\n      b_ -= rhs.b_;\n      return *this;\n    }\n\n    inline this_type& operator *= (this_type const& rhs) {\n      b_ = (b_ * rhs.a_ + a_ * rhs.b_);\n      a_ *= rhs.a_;\n      return *this;\n    }\n\n    inline this_type& operator /= (this_type const& rhs) {\n      b_ = (b_ * rhs.a_ - a_ * rhs.b_) / (rhs.a_ * rhs.a_);\n      a_ /= rhs.a_;\n      return *this;\n    }\n\n    inline this_type operator + (this_type const& rhs) const {\n      return this_type(*this) += rhs;\n    }\n\n    inline this_type operator - (this_type const& rhs) const {\n      return this_type(*this) -= rhs;\n    }\n\n    inline this_type operator * (this_type const& rhs) const {\n      return this_type(*this) *= rhs;\n    }\n\n    inline this_type operator / (this_type const& rhs) const {\n      return this_type(*this) /= rhs;\n    }\n\n    inline friend std::ostream& operator << (std::ostream& out, this_type const& rhs) {\n      return out << '[' << rhs.a_ << ',' << rhs.b_ << ']';\n    }\n\n  private:\n    T a_;\n    T b_;\n  };\n}\n\n\n\u307f\u305f\u3044\u306b\u306a\u308b\u3002\n\n\u81ea\u52d5\u5fae\u5206\n\u95a2\u6570 f(x)f(x) \u306e\u30c6\u30a4\u30e9\u30fc\u5c55\u958b\u306f\nf(x + \\delta) = f(x) + \\left( \\frac{d}{dx} f(x) \\right) \\delta + O(\\delta^{2})\nf(x+\u03b4)=f(x)+(ddxf(x))\u03b4+O(\u03b42){f(x + \\delta) = f(x) + \\left( \\frac{d}{dx} f(x) \\right) \\delta + O(\\delta^{2})\n}\n\u3067\u3042\u308b\u3002\n\u3053\u3053\u3067 \u03b4\\delta \u3092 \u03f5\\epsilon \u3068\u304a\u3044\u3066 x+\u03f5x + \\epsilon \u3092\u4e8c\u91cd\u6570\u3068\u307f\u306a\u3059\u3068\u3001 \u03f5n\\epsilon^{n} \u306e nn \u304c 22 \u4ee5\u4e0a\u306e\u9805\u306f 00 \u3068\u306a\u308a\nf(x + \\epsilon) = f(x) + \\left( \\frac{d}{dx} f(x) \\right) \\epsilon\nf(x+\u03f5)=f(x)+(ddxf(x))\u03f5{f(x + \\epsilon) = f(x) + \\left( \\frac{d}{dx} f(x) \\right) \\epsilon\n}\n\u304c\u5f97\u3089\u308c\u308b\u3002\n\u3053\u308c\u306f\u3001\u95a2\u6570 f(x+\u03f5)f(x + \\epsilon) \u3092\u8a08\u7b97\u3059\u308b\u3068\u3001\u5b9f\u6570\u90e8\u3068\u3057\u3066 f(x)f(x) \u304c\u3001\u03f5\\epsilon \u306e\u4fc2\u6570\u3068\u3057\u3066 \u5fae\u5206\u5024 ddxf(x)\\frac{d}{dx} f(x) \u304c\u5f97\u308c\u308b\u3053\u3068\u3092\u793a\u3057\u3066\u3044\u308b\u3002\n\n\u5b9f\u884c\u7d50\u679c\n\\begin{align}\nf(x) &= 4 x^2 + 3 x + 2 \\\\\n\\frac{d}{dx} f(x) &= 8 x + 3\n\\end{align}\nf(x)=4x2+3x+2ddxf(x)=8x+3{\\begin{align}\nf(x) &= 4 x^2 + 3 x + 2 \\\\\n\\frac{d}{dx} f(x) &= 8 x + 3\n\\end{align}\n}\n\u3092\u8a08\u7b97\u3057\u3066\u307f\u308b\u3002\n\nmain.cpp\n\n#include <iostream>\n#include \"dn.hpp\"\n\ntemplate <typename T>\nT f(T x) {\n  return (T(4) * x + T(3)) * x + T(2);\n}\n\ntemplate <typename T>\nT df(T x) {\n  return T(8) * x + T(3);\n}\n\nint main() {\n  // \u624b\u8a08\u7b97\u306e\u7d50\u679c (\u78ba\u8a8d\u7528)\n  std::cout << '[' << f(2.0) << ',' << df(2.0) << ']' << std::endl;\n\n  // \u81ea\u52d5\u5fae\u5206\u306e\u7d50\u679c\n  std::cout << f(math::dual_number<>(2.0, 1.0)) << std::endl;\n\n  return 0;\n}\n\n\n\n\u51fa\u529b\u7d50\u679c\n$ ./a.out\n[24,19]\n[24,19]\n\n\n\u305f\u3057\u304b\u306b\u5408\u3063\u3066\u308b\u3002\n\n\u5099\u8003\n\u3068\u3053\u308d\u3067\nf(a + b \\epsilon) = f(a) + \\left(\\frac{d}{dx} f(x) \\right) b \\epsilon\nf(a+b\u03f5)=f(a)+(ddxf(x))b\u03f5{f(a + b \\epsilon) = f(a) + \\left(\\frac{d}{dx} f(x) \\right) b \\epsilon\n}\n\u3068\u3044\u3046\u3053\u3068\u306b\u6c17\u304c\u3064\u304f\u3068\u3001\u4efb\u610f\u306e\u5b9f\u6570\u95a2\u6570 f(x)f(x) \u306b\u3064\u3044\u3066\u4e8c\u91cd\u6570\u306e\u95a2\u6570\u3092\u6c42\u3081\u3089\u308c\u308b\u3002\n\n\n\n\u5b9f\u6570\u306e\u95a2\u6570\n\u4e8c\u91cd\u6570\u306e\u95a2\u6570\n\n\n\n\nsin(x)\\sin(x)\nsin(a+b\u03f5)=sin(x)+cos(x)b\u03f5\\sin(a + b \\epsilon) = \\sin(x) + \\cos(x) b \\epsilon\n\n\ncos(x)\\cos(x)\ncos(a+b\u03f5)=cos(x)\u2212sin(x)b\u03f5\\cos(a + b \\epsilon) = \\cos(x) - \\sin(x) b \\epsilon\n\n\nexp(x)\\exp(x)\nexp(a+b\u03f5)=exp(x)(1+b\u03f5)\\exp(a + b \\epsilon) = \\exp(x) (1 + b \\epsilon)\n\n\nlog(x)\\log(x)\nlog(a+b\u03f5)=log(x)+bx\u03f5\\log(a + b \\epsilon) = \\log(x) + \\frac{b}{x} \\epsilon\n\n\n\n\u3082\u3061\u308d\u3093\u3001\u3053\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u8907\u96d1\u306a\u95a2\u6570\u306e\u5fae\u5206\u5024\u3082\u8a08\u7b97\u3067\u304d\u308b\u3002\n\nmain.cpp\n#include <iostream>\n#include <cmath>\n#include \"dn.hpp\"\n\ntemplate <typename T>\ninline math::dual_number<T> exp(math::dual_number<T> x) {\n  T const a = std::exp(x.a());\n  return math::dual_number<T>(a, a * x.b());\n}\n\n// \u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\ntemplate <typename T>\nT f(T x) {\n  using namespace std;\n  return T(1) / (T(1) + exp(-x));\n}\n\n// \u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u306e\u5c0e\u95a2\u6570\ntemplate <typename T>\nT df(T x) {\n  using namespace std;\n  T const s = f(x);\n  return s * (T(1) - s);\n}\n\nint main() {\n  // \u624b\u8a08\u7b97\u306e\u7d50\u679c (\u78ba\u8a8d\u7528)\n  std::cout << '[' << f(2.0) << ',' << df(2.0) << ']' << std::endl;\n\n  // \u81ea\u52d5\u5fae\u5206\u306e\u7d50\u679c\n  std::cout << f(math::dual_number<>(2.0, 1.0)) << std::endl;\n\n  return 0;\n}\n\n\n\n\u5b9f\u884c\u7d50\u679c\n$ ./a.out\n[0.880797,0.104994]\n[0.880797,0.104994]\n\n\n\n\u53c2\u8003\u6587\u732e\n\n\u30b2\u30fc\u30e0\u30a2\u30d7\u30ea\u306e\u6570\u5b66 Unity\u3067\u5b66\u3076\u57fa\u790e\u304b\u3089\u30b7\u30a7\u30fc\u30c0\u30fc\u307e\u3067\n\n\u53c2\u8003\u6587\u732e [1] \u306b [\u4e8c\u91cd\u6570](https://ja.wikipedia.org/wiki/%E4%BA%8C%E9%87%8D%E6%95%B0) \u3067\u81ea\u52d5\u5fae\u5206 (automatic differentiation) \u3059\u308b\u65b9\u6cd5\u304c\u8f09\u3063\u3066\u3044\u305f\u306e\u3067\u8a66\u3057\u3066\u307f\u305f\u3002\n\n# \u4e8c\u91cd\u6570\n\n\u4e8c\u91cd\u6570 (dual number) \u306f\u3001\u8907\u7d20\u6570\u306e\u3088\u3046\u306b\u5b9f\u6570\u3092\u62e1\u5f35\u3057\u305f\u6570\u3067\n\n```math\na + b \\epsilon\n```\n\n\u3068\u8a18\u8ff0\u3059\u308b\u6570\u3067\u3042\u308b\u3002\u3053\u3053\u3067\u3001$\\epsilon$ \u304c\u8907\u7d20\u6570\u306e $i$ \u306b\u3042\u305f\u308b\u3082\u306e\u3067\u3001$\\epsilon^2 = 0$ \u3068\u3044\u3046\u6027\u8cea\u3092\u6301\u3064\u3082\u306e\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\n\n\u52a0\u6e1b\u4e57\u9664\u3082\u8907\u7d20\u6570\u3068\u540c\u69d8\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3001C++ \u3067\u5b9f\u88c5\u3059\u308b\u3068\u3001\n\n```cpp:dn.hpp\n#pragma once\n\n#include <ostream>\n\nnamespace math {\n\n  // \u4e8c\u91cd\u6570 a + b \u03b5\n  template <typename T = double>\n  class dual_number {\n  public:\n    using this_type = dual_number<T>;\n\n  public:\n    inline dual_number(T a, T b = T(0)) : a_(a), b_(b) {}\n\n    inline this_type operator - () const {\n      return this_type(-a_, -b_);\n    }\n\n    inline this_type& operator += (this_type const& rhs) {\n      a_ += rhs.a_;\n      b_ += rhs.b_;\n      return *this;\n    }\n\n    inline this_type& operator -= (this_type const& rhs) {\n      a_ -= rhs.a_;\n      b_ -= rhs.b_;\n      return *this;\n    }\n\n    inline this_type& operator *= (this_type const& rhs) {\n      b_ = (b_ * rhs.a_ + a_ * rhs.b_);\n      a_ *= rhs.a_;\n      return *this;\n    }\n\n    inline this_type& operator /= (this_type const& rhs) {\n      b_ = (b_ * rhs.a_ - a_ * rhs.b_) / (rhs.a_ * rhs.a_);\n      a_ /= rhs.a_;\n      return *this;\n    }\n\n    inline this_type operator + (this_type const& rhs) const {\n      return this_type(*this) += rhs;\n    }\n\n    inline this_type operator - (this_type const& rhs) const {\n      return this_type(*this) -= rhs;\n    }\n\n    inline this_type operator * (this_type const& rhs) const {\n      return this_type(*this) *= rhs;\n    }\n\n    inline this_type operator / (this_type const& rhs) const {\n      return this_type(*this) /= rhs;\n    }\n\n    inline friend std::ostream& operator << (std::ostream& out, this_type const& rhs) {\n      return out << '[' << rhs.a_ << ',' << rhs.b_ << ']';\n    }\n\n  private:\n    T a_;\n    T b_;\n  };\n}\n```\n\n\u307f\u305f\u3044\u306b\u306a\u308b\u3002\n\n# \u81ea\u52d5\u5fae\u5206\n\n\u95a2\u6570 $f(x)$ \u306e\u30c6\u30a4\u30e9\u30fc\u5c55\u958b\u306f\n\n```math\nf(x + \\delta) = f(x) + \\left( \\frac{d}{dx} f(x) \\right) \\delta + O(\\delta^{2})\n```\n\n\u3067\u3042\u308b\u3002\n\n\u3053\u3053\u3067 $\\delta$ \u3092 $\\epsilon$ \u3068\u304a\u3044\u3066 $x + \\epsilon$ \u3092\u4e8c\u91cd\u6570\u3068\u307f\u306a\u3059\u3068\u3001 $\\epsilon^{n}$ \u306e $n$ \u304c $2$ \u4ee5\u4e0a\u306e\u9805\u306f $0$ \u3068\u306a\u308a\n\n```math\nf(x + \\epsilon) = f(x) + \\left( \\frac{d}{dx} f(x) \\right) \\epsilon\n```\n\n\u304c\u5f97\u3089\u308c\u308b\u3002\n\n\u3053\u308c\u306f\u3001\u95a2\u6570 $f(x + \\epsilon)$ \u3092\u8a08\u7b97\u3059\u308b\u3068\u3001\u5b9f\u6570\u90e8\u3068\u3057\u3066 $f(x)$ \u304c\u3001$\\epsilon$ \u306e\u4fc2\u6570\u3068\u3057\u3066 \u5fae\u5206\u5024 $\\frac{d}{dx} f(x)$ \u304c\u5f97\u308c\u308b\u3053\u3068\u3092\u793a\u3057\u3066\u3044\u308b\u3002\n\n## \u5b9f\u884c\u7d50\u679c\n\n```math\n\\begin{align}\nf(x) &= 4 x^2 + 3 x + 2 \\\\\n\\frac{d}{dx} f(x) &= 8 x + 3\n\\end{align}\n```\n\n\u3092\u8a08\u7b97\u3057\u3066\u307f\u308b\u3002\n\n```cpp:main.cpp\n\n#include <iostream>\n#include \"dn.hpp\"\n\ntemplate <typename T>\nT f(T x) {\n  return (T(4) * x + T(3)) * x + T(2);\n}\n\ntemplate <typename T>\nT df(T x) {\n  return T(8) * x + T(3);\n}\n\nint main() {\n  // \u624b\u8a08\u7b97\u306e\u7d50\u679c (\u78ba\u8a8d\u7528)\n  std::cout << '[' << f(2.0) << ',' << df(2.0) << ']' << std::endl;\n\n  // \u81ea\u52d5\u5fae\u5206\u306e\u7d50\u679c\n  std::cout << f(math::dual_number<>(2.0, 1.0)) << std::endl;\n\n  return 0;\n}\n```\n\n```sh:\u51fa\u529b\u7d50\u679c\n$ ./a.out\n[24,19]\n[24,19]\n```\n\n\u305f\u3057\u304b\u306b\u5408\u3063\u3066\u308b\u3002\n\n# \u5099\u8003\n\n\u3068\u3053\u308d\u3067\n\n```math\nf(a + b \\epsilon) = f(a) + \\left(\\frac{d}{dx} f(x) \\right) b \\epsilon\n```\n\n\u3068\u3044\u3046\u3053\u3068\u306b\u6c17\u304c\u3064\u304f\u3068\u3001\u4efb\u610f\u306e\u5b9f\u6570\u95a2\u6570 $f(x)$ \u306b\u3064\u3044\u3066\u4e8c\u91cd\u6570\u306e\u95a2\u6570\u3092\u6c42\u3081\u3089\u308c\u308b\u3002\n\n| \u5b9f\u6570\u306e\u95a2\u6570 | \u4e8c\u91cd\u6570\u306e\u95a2\u6570 |\n| :-: | :-- |\n| $\\sin(x)$ | $\\sin(a + b \\epsilon) = \\sin(x) + \\cos(x) b \\epsilon$ |\n| $\\cos(x)$ | $\\cos(a + b \\epsilon) = \\cos(x) - \\sin(x) b \\epsilon$ |\n| $\\exp(x)$ | $\\exp(a + b \\epsilon) = \\exp(x) (1 + b \\epsilon)$ |\n| $\\log(x)$ | $\\log(a + b \\epsilon) = \\log(x) + \\frac{b}{x} \\epsilon$ |\n\n\u3082\u3061\u308d\u3093\u3001\u3053\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u8907\u96d1\u306a\u95a2\u6570\u306e\u5fae\u5206\u5024\u3082\u8a08\u7b97\u3067\u304d\u308b\u3002\n\n```cpp:main.cpp\n#include <iostream>\n#include <cmath>\n#include \"dn.hpp\"\n\ntemplate <typename T>\ninline math::dual_number<T> exp(math::dual_number<T> x) {\n  T const a = std::exp(x.a());\n  return math::dual_number<T>(a, a * x.b());\n}\n\n// \u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\ntemplate <typename T>\nT f(T x) {\n  using namespace std;\n  return T(1) / (T(1) + exp(-x));\n}\n\n// \u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u306e\u5c0e\u95a2\u6570\ntemplate <typename T>\nT df(T x) {\n  using namespace std;\n  T const s = f(x);\n  return s * (T(1) - s);\n}\n\nint main() {\n  // \u624b\u8a08\u7b97\u306e\u7d50\u679c (\u78ba\u8a8d\u7528)\n  std::cout << '[' << f(2.0) << ',' << df(2.0) << ']' << std::endl;\n\n  // \u81ea\u52d5\u5fae\u5206\u306e\u7d50\u679c\n  std::cout << f(math::dual_number<>(2.0, 1.0)) << std::endl;\n\n  return 0;\n}\n```\n\n```sh:\u5b9f\u884c\u7d50\u679c\n$ ./a.out\n[0.880797,0.104994]\n[0.880797,0.104994]\n```\n\n# \u53c2\u8003\u6587\u732e\n\n0. [\u30b2\u30fc\u30e0\u30a2\u30d7\u30ea\u306e\u6570\u5b66 Unity\u3067\u5b66\u3076\u57fa\u790e\u304b\u3089\u30b7\u30a7\u30fc\u30c0\u30fc\u307e\u3067](http://www.amazon.co.jp/dp/4797384263?tag=skitaoka-22)\n"}