{"tags": ["CommonLisp", "common-lisp"], "context": " More than 1 year has passed since last update.\n\n\u6982\u8981\nCommon Lisp\u3067iterator\u3082\u3069\u304d\u3092\u3064\u304f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\u3061\u306a\u307f\u306b\u79c1\u306fiterator\u3068\u306f\u4f55\u304b\u3092\u3042\u307e\u308a\u308f\u304b\u3063\u3066\u306a\u3044\u3067\u3059\u304c\u3001\u305d\u308c\u306b\u3082\u95a2\u308f\u3089\u305a\u66f8\u3044\u3066\u307e\u3059\u3002\u5206\u304b\u3063\u305f\u3089\u305d\u306e\u3046\u3061\u66f8\u304d\u76f4\u3059\u3068\u601d\u3044\u307e\u3059\u3002\n\u8ffd\u8a18 (2015/02/01): LISP\u754c\u9688(?)\u3067\u306fgenerator\u3068\u8a00\u3046\u3089\u3057\u3044\u3067\u3059\u3002\n\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306f\u3001mapcar\u306b\u3059\u308b\u3068\u91cd\u304f\u3001\u3055\u3089\u306b\u9014\u4e2d\u3067\u4e2d\u65ad\u3059\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u304b\u3089\u30ea\u30b9\u30c8\u5168\u4f53\u3092mapcar\u3059\u308b\u306e\u306f\u7121\u99c4\u3068\u3044\u3046\u5272\u3068\u30cb\u30c3\u30c1\u306a\u5834\u9762\u306a\u3093\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30b3\u30fc\u30c9\n;; iterator\u306fhas-next\u3068get\u3092\u6301\u3063\u305f\u69cb\u9020\u4f53\n(defstruct iter has-next get)\n\n(defmacro each-iter ((var iter) &body body)\n  `(loop while (funcall (iter-has-next ,iter)) do\n     (let ((,var (funcall (iter-get ,iter)))) ,@body)))\n\n\n;; \u4f8b\n(defun primep (num)\n  (loop for i from 2 to (sqrt num)\n    when (= (rem num i) 0) do (return-from primep nil))\n  t)\n\n(defun get-next-prime (start)\n  (loop for i from start\n    when (primep i) do (return i)))\n\n(defun make-prime-iter (start end)\n  (let ((next-prime (1- start)))\n    (make-iter\n     :has-next\n      (lambda ()\n        (setq next-prime (get-next-prime (1+ next-prime)))\n        (<= next-prime end))\n     :get\n      (lambda ()\n        next-prime))))\n\n(let ((count 0)\n      (iter (make-prime-iter 1000 2000)))\n  (each-iter (prime iter)\n    (print prime)\n    (incf count)\n    (when (<= 10 count)\n      (return))))\n\n1000\u304b\u30892000\u307e\u3067\u306e\u7d20\u6570\u3092\u4e00\u5ea6\u306b\u5217\u6319\u3057\u3066\u30ea\u30b9\u30c8\u51e6\u7406\u3059\u308b\u306e\u306f\u3055\u3059\u304c\u306b\u91cd\u3044\u306e\u3067\u9010\u6b21\u51e6\u7406\u306b\u306a\u3063\u3066\u307e\u3059\u3002\u6700\u521d\u306e10\u500b\u3067\u3044\u3044\u3084\u3001\u307f\u305f\u3044\u306a\u6642\u3067\u3082return\u3067\u304d\u307e\u3059\u3002\n\u898b\u3066\u306e\u901a\u308a\u30af\u30ed\u30fc\u30b8\u30e3\u306e\u5a01\u529b\u304c\u767a\u63ee\u3055\u308c\u3066\u307e\u3059\u3002\n\n\u6700\u5f8c\u306b\n\u30de\u30af\u30ed\u3067\u5305\u307e\u308c\u3066\u3044\u308b\u3068\u306f\u3044\u3048\u3001\u660e\u793a\u7684\u306bfuncall\u3059\u308b\u306e\u306f\u306a\u3093\u3068\u304b\u3057\u305f\u3044\u3067\u3059\u306d\u3002defstruct\u3092\u5de5\u592b\u3059\u308c\u3070\u5927\u4e08\u592b\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\u3053\u308c\u3063\u3066\u3042\u308b\u7a2e\u306e\u9045\u5ef6\u8a55\u4fa1\u306a\u3093\u3067\u3057\u3087\u3046\u304b\u306d\uff1f\n# \u6982\u8981\nCommon Lisp\u3067iterator\u3082\u3069\u304d\u3092\u3064\u304f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\u3061\u306a\u307f\u306b\u79c1\u306fiterator\u3068\u306f\u4f55\u304b\u3092\u3042\u307e\u308a\u308f\u304b\u3063\u3066\u306a\u3044\u3067\u3059\u304c\u3001\u305d\u308c\u306b\u3082\u95a2\u308f\u3089\u305a\u66f8\u3044\u3066\u307e\u3059\u3002\u5206\u304b\u3063\u305f\u3089\u305d\u306e\u3046\u3061\u66f8\u304d\u76f4\u3059\u3068\u601d\u3044\u307e\u3059\u3002\n\u8ffd\u8a18 (2015/02/01): LISP\u754c\u9688(?)\u3067\u306fgenerator\u3068\u8a00\u3046\u3089\u3057\u3044\u3067\u3059\u3002\n\n\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306f\u3001`mapcar`\u306b\u3059\u308b\u3068\u91cd\u304f\u3001\u3055\u3089\u306b\u9014\u4e2d\u3067\u4e2d\u65ad\u3059\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u304b\u3089\u30ea\u30b9\u30c8\u5168\u4f53\u3092`mapcar`\u3059\u308b\u306e\u306f\u7121\u99c4\u3068\u3044\u3046\u5272\u3068\u30cb\u30c3\u30c1\u306a\u5834\u9762\u306a\u3093\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u30b3\u30fc\u30c9\n\n```cl\n;; iterator\u306fhas-next\u3068get\u3092\u6301\u3063\u305f\u69cb\u9020\u4f53\n(defstruct iter has-next get)\n\n(defmacro each-iter ((var iter) &body body)\n  `(loop while (funcall (iter-has-next ,iter)) do\n     (let ((,var (funcall (iter-get ,iter)))) ,@body)))\n\n\n;; \u4f8b\n(defun primep (num)\n  (loop for i from 2 to (sqrt num)\n    when (= (rem num i) 0) do (return-from primep nil))\n  t)\n\n(defun get-next-prime (start)\n  (loop for i from start\n    when (primep i) do (return i)))\n\n(defun make-prime-iter (start end)\n  (let ((next-prime (1- start)))\n    (make-iter\n     :has-next\n      (lambda ()\n        (setq next-prime (get-next-prime (1+ next-prime)))\n        (<= next-prime end))\n     :get\n      (lambda ()\n        next-prime))))\n\n(let ((count 0)\n      (iter (make-prime-iter 1000 2000)))\n  (each-iter (prime iter)\n    (print prime)\n    (incf count)\n    (when (<= 10 count)\n      (return))))\n```\n\n1000\u304b\u30892000\u307e\u3067\u306e\u7d20\u6570\u3092\u4e00\u5ea6\u306b\u5217\u6319\u3057\u3066\u30ea\u30b9\u30c8\u51e6\u7406\u3059\u308b\u306e\u306f\u3055\u3059\u304c\u306b\u91cd\u3044\u306e\u3067\u9010\u6b21\u51e6\u7406\u306b\u306a\u3063\u3066\u307e\u3059\u3002\u6700\u521d\u306e10\u500b\u3067\u3044\u3044\u3084\u3001\u307f\u305f\u3044\u306a\u6642\u3067\u3082return\u3067\u304d\u307e\u3059\u3002\n\n\u898b\u3066\u306e\u901a\u308a\u30af\u30ed\u30fc\u30b8\u30e3\u306e\u5a01\u529b\u304c\u767a\u63ee\u3055\u308c\u3066\u307e\u3059\u3002\n\n# \u6700\u5f8c\u306b\n\u30de\u30af\u30ed\u3067\u5305\u307e\u308c\u3066\u3044\u308b\u3068\u306f\u3044\u3048\u3001\u660e\u793a\u7684\u306b`funcall`\u3059\u308b\u306e\u306f\u306a\u3093\u3068\u304b\u3057\u305f\u3044\u3067\u3059\u306d\u3002`defstruct`\u3092\u5de5\u592b\u3059\u308c\u3070\u5927\u4e08\u592b\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3053\u308c\u3063\u3066\u3042\u308b\u7a2e\u306e\u9045\u5ef6\u8a55\u4fa1\u306a\u3093\u3067\u3057\u3087\u3046\u304b\u306d\uff1f\n"}