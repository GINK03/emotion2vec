{"tags": ["ProtocolBuffers", "google", "Binary", "serialize"], "context": " More than 1 year has passed since last update.\n\nProtocol Buffers\u306e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u4ed5\u69d8\nhttps://developers.google.com/protocol-buffers/docs/encoding\n\u203bv2,v3\u306e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u4ed5\u69d8\u306f\u540c\u3058\u6a21\u69d8\n\n\u307e\u305a\u306f\u5177\u4f53\u4f8b\n$ cat test.proto \nsyntax = 'proto3';\n\nmessage Hoge {\n  message Foo {\n    int32 aa = 1;\n    int32 bb = 2;\n  }\n  int32 a = 1;\n  int32 b = 2;\n  string c = 3;\n  repeated int32 d = 4;\n  repeated Foo e = 5;\n}\n$ protoc --ruby_out=./ test.proto \n$ cat test.rb \n# Generated by the protocol buffer compiler.  DO NOT EDIT!\n# source: test.proto\n\nrequire 'google/protobuf'\n\nGoogle::Protobuf::DescriptorPool.generated_pool.build do\n  add_message \"Hoge\" do\n    optional :a, :int32, 1\n    optional :b, :int32, 2\n    optional :c, :string, 3\n    repeated :d, :int32, 4\n    repeated :e, :message, 5, \"Hoge.Foo\"\n  end\n  add_message \"Hoge.Foo\" do\n    optional :aa, :int32, 1\n    optional :bb, :int32, 2\n  end\nend\n\nHoge = Google::Protobuf::DescriptorPool.generated_pool.lookup(\"Hoge\").msgclass\nHoge::Foo = Google::Protobuf::DescriptorPool.generated_pool.lookup(\"Hoge.Foo\").msgclass\n$ irb\nirb(main):001:0> require './test.rb'\n=> true\nirb(main):002:0> foo1 = Hoge::Foo.new(aa: 1, bb: 2)\n=> <Hoge::Foo: aa: 1, bb: 2>\nirb(main):003:0> foo2 = Hoge::Foo.new(aa: 3, bb: 4)\n=> <Hoge::Foo: aa: 3, bb: 4>\nirb(main):004:0> hoge = Hoge.new(a: 1, b: 2, c: 'abc', d: [3, 270, 86942], e: [foo1, foo2])\n=> <Hoge: a: 1, b: 2, c: \"abc\", d: [3, 270, 86942], e: [<Hoge::Foo: aa: 1, bb: 2>, <Hoge::Foo: aa: 3, bb: 4>]>\nirb(main):005:0> File.open(\"test.pb\", \"wb\") do |f| f.write(hoge.to_proto); end\n=> 30\nirb(main):006:0>exit\n$ hexdump test.pb\n0000000 08 01 10 02 1a 03 61 62 63 20 03 20 8e 02 20 9e\n0000010 a7 05 2a 04 08 01 10 02 2a 04 08 03 10 04      \n000001e\n\n\n\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u306e\u89e3\u8aac\n\u57fa\u672c\u7684\u306bkey-value\u30da\u30a2\u3067\u69cb\u6210\u3055\u308c\u308b\u3002\nkey = \u30bf\u30b0\u30ca\u30f3\u30d0\u30fc * 8 + \u30bf\u30a4\u30d7\u5024\n\u30bf\u30a4\u30d7\u5024\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\n\n\n\nType\nMeaning\nUsed For\n\n\n\n\n0\nvarint\nint32, int64, uint32, uint64, sint32, sing64, bool, enum\n\n\n1\n64-bit\nfixed64, sfixed64, double\n\n\n2\nLength-delimited\nstring, bytes, embedded messages, packed repeated fields\n\n\n3\n\ndeprecated\n\n\n4\n\ndeprecated\n\n\n5\n32-bit\nfixed32, sfix3d32, float\n\n\n\n08             # key: 1 * 8 + 0 = \\x08\n    01         # value: 1\n\n10             # key: 2 * 8 + 0 = \\x10\n    02         # value: 2\n\n1a             # key: 3 * 8 + 2 = \\x1a\n    03         # length: 3 bytes\n        61     # value: 'a'\n        62     # value: 'b'\n        63     # value: 'c'\n\n20             # 4 * 8 + 0 = \\x20\n    03         # 3\n20             # 4 * 8 + 0 = \\x20\n    8e 02      # 270\n20             # 4 * 8 + 0 = \\x20\n    9e a7 05   # 86942\n\n2a             # 5 * 8 + 2 = \\x2a\n    04         # 4 bytes follows\n        08     # 1 * 8 + 0 = \\x08\n            01 # 1\n        10     # 2 * 8 + 0 = \\x10\n            02 # 2\n2a             # 5 * 8 + 2 = \\x2a\n    04         # 4 bytes follows\n        08     # 1 * 8 + 0 = \\x08\n            03 # 3\n        10     # 2 * 8 + 0 = \\x10\n            04 # 4\n\n\nrepeated\u306f\u5358\u306b\u30ad\u30fc\u540d\u3092\u91cd\u8907\u3055\u305b\u3066\u8907\u6570\u500b\u914d\u7f6e\u3057\u3066\u3044\u308b\n\n\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u540d\u3001\u30ad\u30fc\u540d\u306e\u60c5\u5831\u306f\u306a\u3044\uff08\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba\u5c0f\u3055\u304f\u306a\u308b\uff09\n\n\u30c7\u30b3\u30fc\u30c9\u6642\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u5b9a\u7fa9\u3092\u5143\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u540d\u3001\u30ad\u30fc\u540d\u3092\u5fa9\u5143\u3059\u308b\n\u4f8b\u3048\u3070\u3001\u4ee5\u4e0b\u306e2\u3064\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u5b9a\u7fa9\u306f\u751f\u6210\u3055\u308c\u308b\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u306f\u540c\u4e00\u3067\u3042\u308a\u3001\u4e92\u63db\u6027\u304c\u3042\u308b\u3002\n\n\nmessage Hoge { int32 aaa = 1; }\nmessage Foo { int32 bbb = 1; }\n\n\n\n\n\n\u5404key-value\u306e\u9806\u756a\u306f\u4efb\u610f\n\n\u4ee5\u4e0b\u306e2\u3064\u306e\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u306f\u540c\u7b49\u306b\u6271\u3048\u308b\n\n\n\n08 01 10 02, 10 02 08 01 (Hoge\u306ea,b)\n\n\n\nrepeated\u3058\u3083\u306a\u3044\u30ad\u30fc\u304c\u91cd\u8907\u3057\u305f\u3089\u5f8c\u65b9\u512a\u5148\uff08\u30de\u30fc\u30b8\u306b\u5bfe\u5fdc\u3067\u304d\u308b\uff09\nHoge.decode(\"\\b\\x01\")\n=> <Hoge: a: 1, b: 0, c: \"\", d: [], e: []>\nHoge.decode(\"\\b\\x01\\b\\x02\")\n=> <Hoge: a: 2, b: 0, c: \"\", d: [], e: []>\nHoge.decode(\"\\b\\x01\\b\\x02\\b\\x01\")\n=> <Hoge: a: 1, b: 0, c: \"\", d: [], e: []>\n\n\n\n\n\n\u898b\u77e5\u3089\u306c\u30ad\u30fc\u306f\u7121\u8996\u3059\u308b\nHoge.decode(\"\\b\\x01\\30\\x01\").to_proto # \\30 = 6th * 8 + 0; Hoge\u306b6\u756a\u306ekey-value\u306f\u306a\u3044\u3002\n=> \"\\b\\x01\"\n\n\n\n\nvarint\u306e\u5185\u90e8\u8868\u73fe\nmsb\u3092\u7d42\u70b9\u30d0\u30a4\u30c8\u3092\u8868\u3059\u305f\u3081\u306b\u4f7f\u7528\u3059\u308b\u3002\n\u307e\u305a\u306f\u5177\u4f53\u4f8b\n1     = 0000-0001\n2     = 0000-0002\n127   = 0111-1111\n128   = 1000-0000 0000-0001\n129   = 1000-0001 0000-0001\n130   = 1000-0002 0000-0001\n255   = 1111-1111 0000-0001\n256   = 1000-0000 0000-0002\n257   = 1000-0001 0000-0002\n16383 = 1111-1111 0111-1111\n16384 = 1000-0000 1000-0000 0000-0001\n16385 = 1000-0001 1000-0000 0000-0001\n\n\n\u5909\u63db\u65b9\u6cd5\n1010-1100 0000-0010\u3092\u6570\u5024\u306b\u5909\u63db\u3059\u308b\n\nmsg\u3092\u30ab\u30c3\u30c8: 010-1100 000-0010\n\u9806\u756a\u3092\u9006\u306b\u3059\u308b: 000-0010 010-1100\n\u8a08\u7b97\u3059\u308b: 00000100101100 = 1 * 256 + 2 * 16 + 12 * 1 = 256 + 32 + 12 = 300\n\n# Protocol Buffers\u306e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u4ed5\u69d8\nhttps://developers.google.com/protocol-buffers/docs/encoding\n\n\u203bv2,v3\u306e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u4ed5\u69d8\u306f\u540c\u3058\u6a21\u69d8\n\n# \u307e\u305a\u306f\u5177\u4f53\u4f8b\n\n``` \n$ cat test.proto \nsyntax = 'proto3';\n\nmessage Hoge {\n  message Foo {\n    int32 aa = 1;\n    int32 bb = 2;\n  }\n  int32 a = 1;\n  int32 b = 2;\n  string c = 3;\n  repeated int32 d = 4;\n  repeated Foo e = 5;\n}\n$ protoc --ruby_out=./ test.proto \n$ cat test.rb \n# Generated by the protocol buffer compiler.  DO NOT EDIT!\n# source: test.proto\n\nrequire 'google/protobuf'\n\nGoogle::Protobuf::DescriptorPool.generated_pool.build do\n  add_message \"Hoge\" do\n    optional :a, :int32, 1\n    optional :b, :int32, 2\n    optional :c, :string, 3\n    repeated :d, :int32, 4\n    repeated :e, :message, 5, \"Hoge.Foo\"\n  end\n  add_message \"Hoge.Foo\" do\n    optional :aa, :int32, 1\n    optional :bb, :int32, 2\n  end\nend\n\nHoge = Google::Protobuf::DescriptorPool.generated_pool.lookup(\"Hoge\").msgclass\nHoge::Foo = Google::Protobuf::DescriptorPool.generated_pool.lookup(\"Hoge.Foo\").msgclass\n$ irb\nirb(main):001:0> require './test.rb'\n=> true\nirb(main):002:0> foo1 = Hoge::Foo.new(aa: 1, bb: 2)\n=> <Hoge::Foo: aa: 1, bb: 2>\nirb(main):003:0> foo2 = Hoge::Foo.new(aa: 3, bb: 4)\n=> <Hoge::Foo: aa: 3, bb: 4>\nirb(main):004:0> hoge = Hoge.new(a: 1, b: 2, c: 'abc', d: [3, 270, 86942], e: [foo1, foo2])\n=> <Hoge: a: 1, b: 2, c: \"abc\", d: [3, 270, 86942], e: [<Hoge::Foo: aa: 1, bb: 2>, <Hoge::Foo: aa: 3, bb: 4>]>\nirb(main):005:0> File.open(\"test.pb\", \"wb\") do |f| f.write(hoge.to_proto); end\n=> 30\nirb(main):006:0>exit\n$ hexdump test.pb\n0000000 08 01 10 02 1a 03 61 62 63 20 03 20 8e 02 20 9e\n0000010 a7 05 2a 04 08 01 10 02 2a 04 08 03 10 04      \n000001e\n```\n\n# \u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u306e\u89e3\u8aac\n\n\u57fa\u672c\u7684\u306bkey-value\u30da\u30a2\u3067\u69cb\u6210\u3055\u308c\u308b\u3002\n\nkey = \u30bf\u30b0\u30ca\u30f3\u30d0\u30fc * 8 + \u30bf\u30a4\u30d7\u5024\n\n\u30bf\u30a4\u30d7\u5024\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\n\n| Type | Meaning | Used For |\n|------|---------|----------|\n| 0 | varint | int32, int64, uint32, uint64, sint32, sing64, bool, enum |\n| 1 | 64-bit | fixed64, sfixed64, double |\n| 2 | Length-delimited | string, bytes, embedded messages, packed repeated fields |\n| 3 |  | deprecated\n| 4 |  | deprecated\n| 5 | 32-bit | fixed32, sfix3d32, float\n\n```\n08             # key: 1 * 8 + 0 = \\x08\n    01         # value: 1\n\n10             # key: 2 * 8 + 0 = \\x10\n    02         # value: 2\n\n1a             # key: 3 * 8 + 2 = \\x1a\n    03         # length: 3 bytes\n        61     # value: 'a'\n        62     # value: 'b'\n        63     # value: 'c'\n\n20             # 4 * 8 + 0 = \\x20\n    03         # 3\n20             # 4 * 8 + 0 = \\x20\n    8e 02      # 270\n20             # 4 * 8 + 0 = \\x20\n    9e a7 05   # 86942\n\n2a             # 5 * 8 + 2 = \\x2a\n    04         # 4 bytes follows\n        08     # 1 * 8 + 0 = \\x08\n            01 # 1\n        10     # 2 * 8 + 0 = \\x10\n            02 # 2\n2a             # 5 * 8 + 2 = \\x2a\n    04         # 4 bytes follows\n        08     # 1 * 8 + 0 = \\x08\n            03 # 3\n        10     # 2 * 8 + 0 = \\x10\n            04 # 4\n```\n\n- repeated\u306f\u5358\u306b\u30ad\u30fc\u540d\u3092\u91cd\u8907\u3055\u305b\u3066\u8907\u6570\u500b\u914d\u7f6e\u3057\u3066\u3044\u308b\n\n- \u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u540d\u3001\u30ad\u30fc\u540d\u306e\u60c5\u5831\u306f\u306a\u3044\uff08\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba\u5c0f\u3055\u304f\u306a\u308b\uff09\n    - \u30c7\u30b3\u30fc\u30c9\u6642\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u5b9a\u7fa9\u3092\u5143\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u540d\u3001\u30ad\u30fc\u540d\u3092\u5fa9\u5143\u3059\u308b\n    - \u4f8b\u3048\u3070\u3001\u4ee5\u4e0b\u306e2\u3064\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u5b9a\u7fa9\u306f\u751f\u6210\u3055\u308c\u308b\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u306f\u540c\u4e00\u3067\u3042\u308a\u3001\u4e92\u63db\u6027\u304c\u3042\u308b\u3002\n        - message Hoge { int32 aaa = 1; }\n        - message Foo { int32 bbb = 1; }\n\n- \u5404key-value\u306e\u9806\u756a\u306f\u4efb\u610f\n    - \u4ee5\u4e0b\u306e2\u3064\u306e\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u306f\u540c\u7b49\u306b\u6271\u3048\u308b\n        - `08 01 10 02`, `10 02 08 01` (Hoge\u306ea,b)\n    - repeated\u3058\u3083\u306a\u3044\u30ad\u30fc\u304c\u91cd\u8907\u3057\u305f\u3089\u5f8c\u65b9\u512a\u5148\uff08\u30de\u30fc\u30b8\u306b\u5bfe\u5fdc\u3067\u304d\u308b\uff09\n\n        ```\n        Hoge.decode(\"\\b\\x01\")\n        => <Hoge: a: 1, b: 0, c: \"\", d: [], e: []>\n        Hoge.decode(\"\\b\\x01\\b\\x02\")\n        => <Hoge: a: 2, b: 0, c: \"\", d: [], e: []>\n        Hoge.decode(\"\\b\\x01\\b\\x02\\b\\x01\")\n        => <Hoge: a: 1, b: 0, c: \"\", d: [], e: []>\n        ```\n- \u898b\u77e5\u3089\u306c\u30ad\u30fc\u306f\u7121\u8996\u3059\u308b\n\n    ```\n    Hoge.decode(\"\\b\\x01\\30\\x01\").to_proto # \\30 = 6th * 8 + 0; Hoge\u306b6\u756a\u306ekey-value\u306f\u306a\u3044\u3002\n    => \"\\b\\x01\"\n    ```\n\n# varint\u306e\u5185\u90e8\u8868\u73fe\n\nmsb\u3092\u7d42\u70b9\u30d0\u30a4\u30c8\u3092\u8868\u3059\u305f\u3081\u306b\u4f7f\u7528\u3059\u308b\u3002\n\u307e\u305a\u306f\u5177\u4f53\u4f8b\n\n```\n1     = 0000-0001\n2     = 0000-0002\n127   = 0111-1111\n128   = 1000-0000 0000-0001\n129   = 1000-0001 0000-0001\n130   = 1000-0002 0000-0001\n255   = 1111-1111 0000-0001\n256   = 1000-0000 0000-0002\n257   = 1000-0001 0000-0002\n16383 = 1111-1111 0111-1111\n16384 = 1000-0000 1000-0000 0000-0001\n16385 = 1000-0001 1000-0000 0000-0001\n```\n\n## \u5909\u63db\u65b9\u6cd5\n\n1010-1100 0000-0010\u3092\u6570\u5024\u306b\u5909\u63db\u3059\u308b\n\n1. msg\u3092\u30ab\u30c3\u30c8: 010-1100 000-0010\n2. \u9806\u756a\u3092\u9006\u306b\u3059\u308b: 000-0010 010-1100\n3. \u8a08\u7b97\u3059\u308b: 00000100101100 = 1 * 256 + 2 * 16 + 12 * 1 = 256 + 32 + 12 = 300\n"}