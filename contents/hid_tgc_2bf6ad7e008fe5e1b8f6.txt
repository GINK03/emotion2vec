{"context": " More than 1 year has passed since last update.\u666e\u6bb5\u30a4\u30f3\u30e9\u30a4\u30f3\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u4e2d\u8eab\u3092\u8abf\u3079\u3066\u305fELB\u306e\u30a2\u30af\u30bb\u30b9\u30ed\u30b0\u3092\u3001Java8\u306eStream\u3092\u4f7f\u3063\u3066\u898b\u3066\u307f\u305f\u3089\u610f\u5916\u306b\u4f7f\u3044\u52dd\u624b\u304c\u826f\u304b\u3063\u305f\u306e\u3067\u30e1\u30e2\u3002\n\u30d1\u30c3\u30b1\u30fc\u30b8\u540d\u306f\u9069\u5f53\u306b\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u30b3\u30fc\u30c9\u306f\u4e0b\u306b\u8cbc\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\n\n\u30ed\u30b0\u306e\u500b\u6570\u3092\u8abf\u3079\u308b\nSystem.out.println(parser.getLogs().size());\n\n\nBackend Processing Time\u306e\u6700\u5927\u5024\u30fb\u6700\u5c0f\u5024\u30fb\u5e73\u5747\u3092\u8abf\u3079\u308b\nOptionalDouble max = parser.getLogs().stream()\n  .mapToDouble(l -> { return l.backendProcessingTime; })\n  .max();\nOptionalDouble min = parser.getLogs().stream()\n    .mapToDouble(l -> { return l.backendProcessingTime; })\n    .min();\nOptionalDouble avg = parser.getLogs().stream()\n    .mapToDouble(l -> { return l.backendProcessingTime; })\n    .average();\n\nSystem.out.println(String.format(\"Max/Min/Avg = %s/%s/%s\", max.getAsDouble(), min.getAsDouble(), avg.getAsDouble()));\n\n\nBackend Status Code\u306e\u7a2e\u985e\u3068\u6570\u3092\u8abf\u3079\u308b\nparser.getLogs().stream()\n  .map(l -> { return l.backendStatusCode; })\n  .collect(Collectors.groupingBy(l -> l, Collectors.counting()))\n  .forEach((k, v) -> System.out.println(k + \":\" + v));\n\n\nBackend Processing\u306b1\u79d2\u4ee5\u4e0a\u639b\u304b\u3063\u3066\u308bURL\u3068Method\u3092\u8abf\u3079\u308b\nparser.getLogs().stream()\n  .filter(l -> { return l.backendProcessingTime > 1.0; })\n  .map(l -> { return String.format(\"%s %s\\t%s\", l.requestMethod, l.requestURL, l.backendProcessingTime); } )\n  .forEach(System.out::println);\n\n\nELBLogParser.java\n\u6b63\u898f\u8868\u73fe\u304c\u304b\u306a\u308a\u9069\u5f53\u3060\u3051\u3069\u3053\u3093\u306a\u611f\u3058\u306e\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u304a\u304f\u3002\npackage com.makeitsmartjp.java;\n\nimport java.io.BufferedReader;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.charset.Charset;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nclass ElbLog {\n    public String timestamp;\n    public String elb;\n    public String clientWithPort;\n    public String backendWithPort;\n    public double requestProcessingTime;\n    public double backendProcessingTime;\n    public double responseProcessingTime;\n    public int elbStatusCode;\n    public int backendStatusCode;\n    public int receivedBytes;\n    public int sentBytes;\n    public String requestMethod;\n    public String requestURL;\n    public String requestHTTPVersion;\n\n    @Override\n    public String toString() {\n        return String.format(\"timestamp:%s\\telb:%s\\tclientWithPort:%s\\tbackendWithPort:%s\\trequetProcessingTime:%s\\tbackendProcessingTime:%s\\tresponseProcessingTime:%s\\telbStatusCode:%s\\tbackendStatusCode:%s\\treceivedBytes:%s\\tsentBytes:%s\\trequestMethod:%s\\trequestURL:%s\\trequestHTTPVersion:%s\",\n                timestamp, elb, clientWithPort, backendWithPort,\n                requestProcessingTime, backendProcessingTime, responseProcessingTime,\n                elbStatusCode, backendStatusCode, receivedBytes, sentBytes,\n                requestMethod, requestURL, requestHTTPVersion\n                );\n    }\n}\n\npublic class ELBLogParser {\n    protected final String patternString = \"^(.[^ ]+) (.[^ ]+) (.[^ ]+) (.[^ ]+) (.[^ ]+) (.[^ ]+) (.[^ ]+) (.[^ ]+) (.[^ ]+) (\\\\d+) (\\\\d+) \\\"(\\\\w+) (.[^ ]+) (.[^ ]+)\\\"\";\n    private final Pattern elblogPattern;\n    private List<ElbLog> logs;\n\n    public ELBLogParser() {\n        logs = new ArrayList<ElbLog>();\n        elblogPattern = Pattern.compile(patternString);\n    }\n\n    public void parse(String filePath) {\n        try (\n            InputStream in = new FileInputStream(filePath);\n            InputStreamReader isr = new InputStreamReader(in, Charset.forName(\"UTF-8\"));\n            BufferedReader br = new BufferedReader(isr);\n        ) {\n            br.lines().forEach(log -> {\n                ElbLog buff = parseLine(log);\n                if (buff != null) {\n                    logs.add(buff);\n                }\n            });\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public List<ElbLog> getLogs() {\n        return logs;\n    }\n\n    protected ElbLog parseLine(String log) {\n        Matcher m = elblogPattern.matcher(log);\n        if (!m.find()) {\n            return null;\n        } else if (m.groupCount() < 14) {\n            return null;\n        }\n        ElbLog elbLog = new ElbLog();\n        elbLog.timestamp = m.group(1);\n        elbLog.elb = m.group(2);\n        elbLog.clientWithPort = m.group(3);\n        elbLog.backendWithPort = m.group(4);\n        elbLog.requestProcessingTime = Double.valueOf(m.group(5));\n        elbLog.backendProcessingTime = Double.valueOf(m.group(6));\n        elbLog.responseProcessingTime = Double.valueOf(m.group(7));\n        elbLog.elbStatusCode = Integer.valueOf(m.group(8));\n        elbLog.backendStatusCode = Integer.valueOf(m.group(9));\n        elbLog.receivedBytes = Integer.valueOf(m.group(10));\n        elbLog.sentBytes = Integer.valueOf(m.group(11));\n        elbLog.requestMethod = m.group(12);\n        elbLog.requestURL = m.group(13);\n        elbLog.requestHTTPVersion = m.group(14);\n\n        return elbLog;\n    }\n}\n\n\nMain.java\nMain\u3067\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307e\u305b\u308b\u3002\npackage com.makeitsmartjp.java;\n\n\npublic class Main {\n\n    public static void main(String[] args) {\n        String path = \"/path/to/elb.log\";\n        ELBLogParser parser = new ELBLogParser();\n        parser.parse(path);\n\n    // \u4ee5\u4e0b\u306b\u8abf\u3079\u305f\u3044\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u304f\n    }\n}\n\n\u666e\u6bb5\u30a4\u30f3\u30e9\u30a4\u30f3\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u4e2d\u8eab\u3092\u8abf\u3079\u3066\u305fELB\u306e\u30a2\u30af\u30bb\u30b9\u30ed\u30b0\u3092\u3001Java8\u306eStream\u3092\u4f7f\u3063\u3066\u898b\u3066\u307f\u305f\u3089\u610f\u5916\u306b\u4f7f\u3044\u52dd\u624b\u304c\u826f\u304b\u3063\u305f\u306e\u3067\u30e1\u30e2\u3002\n\u30d1\u30c3\u30b1\u30fc\u30b8\u540d\u306f\u9069\u5f53\u306b\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u30b3\u30fc\u30c9\u306f\u4e0b\u306b\u8cbc\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n\n## \u30b5\u30f3\u30d7\u30eb\n\n### \u30ed\u30b0\u306e\u500b\u6570\u3092\u8abf\u3079\u308b\n\n```java\nSystem.out.println(parser.getLogs().size());\n```\n\n### Backend Processing Time\u306e\u6700\u5927\u5024\u30fb\u6700\u5c0f\u5024\u30fb\u5e73\u5747\u3092\u8abf\u3079\u308b\n\n```java\nOptionalDouble max = parser.getLogs().stream()\n  .mapToDouble(l -> { return l.backendProcessingTime; })\n  .max();\nOptionalDouble min = parser.getLogs().stream()\n    .mapToDouble(l -> { return l.backendProcessingTime; })\n    .min();\nOptionalDouble avg = parser.getLogs().stream()\n    .mapToDouble(l -> { return l.backendProcessingTime; })\n    .average();\n\nSystem.out.println(String.format(\"Max/Min/Avg = %s/%s/%s\", max.getAsDouble(), min.getAsDouble(), avg.getAsDouble()));\n```\n\n### Backend Status Code\u306e\u7a2e\u985e\u3068\u6570\u3092\u8abf\u3079\u308b\n\n```java\nparser.getLogs().stream()\n  .map(l -> { return l.backendStatusCode; })\n  .collect(Collectors.groupingBy(l -> l, Collectors.counting()))\n  .forEach((k, v) -> System.out.println(k + \":\" + v));\n```\n\n### Backend Processing\u306b1\u79d2\u4ee5\u4e0a\u639b\u304b\u3063\u3066\u308bURL\u3068Method\u3092\u8abf\u3079\u308b\n\n```java\nparser.getLogs().stream()\n  .filter(l -> { return l.backendProcessingTime > 1.0; })\n  .map(l -> { return String.format(\"%s %s\\t%s\", l.requestMethod, l.requestURL, l.backendProcessingTime); } )\n  .forEach(System.out::println);\n```\n\n## ELBLogParser.java\n\n\u6b63\u898f\u8868\u73fe\u304c\u304b\u306a\u308a\u9069\u5f53\u3060\u3051\u3069\u3053\u3093\u306a\u611f\u3058\u306e\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u304a\u304f\u3002\n\n```java\npackage com.makeitsmartjp.java;\n\nimport java.io.BufferedReader;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.charset.Charset;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nclass ElbLog {\n\tpublic String timestamp;\n\tpublic String elb;\n\tpublic String clientWithPort;\n\tpublic String backendWithPort;\n\tpublic double requestProcessingTime;\n\tpublic double backendProcessingTime;\n\tpublic double responseProcessingTime;\n\tpublic int elbStatusCode;\n\tpublic int backendStatusCode;\n\tpublic int receivedBytes;\n\tpublic int sentBytes;\n\tpublic String requestMethod;\n\tpublic String requestURL;\n\tpublic String requestHTTPVersion;\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn String.format(\"timestamp:%s\\telb:%s\\tclientWithPort:%s\\tbackendWithPort:%s\\trequetProcessingTime:%s\\tbackendProcessingTime:%s\\tresponseProcessingTime:%s\\telbStatusCode:%s\\tbackendStatusCode:%s\\treceivedBytes:%s\\tsentBytes:%s\\trequestMethod:%s\\trequestURL:%s\\trequestHTTPVersion:%s\",\n\t\t\t\ttimestamp, elb, clientWithPort, backendWithPort,\n\t\t\t\trequestProcessingTime, backendProcessingTime, responseProcessingTime,\n\t\t\t\telbStatusCode, backendStatusCode, receivedBytes, sentBytes,\n\t\t\t\trequestMethod, requestURL, requestHTTPVersion\n\t\t\t\t);\n\t}\n}\n\npublic class ELBLogParser {\n\tprotected final String patternString = \"^(.[^ ]+) (.[^ ]+) (.[^ ]+) (.[^ ]+) (.[^ ]+) (.[^ ]+) (.[^ ]+) (.[^ ]+) (.[^ ]+) (\\\\d+) (\\\\d+) \\\"(\\\\w+) (.[^ ]+) (.[^ ]+)\\\"\";\n\tprivate final Pattern elblogPattern;\n\tprivate List<ElbLog> logs;\n\t\n\tpublic ELBLogParser() {\n\t\tlogs = new ArrayList<ElbLog>();\n\t\telblogPattern = Pattern.compile(patternString);\n\t}\n\t\n\tpublic void parse(String filePath) {\n\t\ttry (\n\t\t\tInputStream in = new FileInputStream(filePath);\n\t\t\tInputStreamReader isr = new InputStreamReader(in, Charset.forName(\"UTF-8\"));\n\t\t\tBufferedReader br = new BufferedReader(isr);\n\t\t) {\n\t\t\tbr.lines().forEach(log -> {\n\t\t\t\tElbLog buff = parseLine(log);\n\t\t\t\tif (buff != null) {\n\t\t\t\t\tlogs.add(buff);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t\n\tpublic List<ElbLog> getLogs() {\n\t\treturn logs;\n\t}\n\t\n\tprotected ElbLog parseLine(String log) {\n\t\tMatcher m = elblogPattern.matcher(log);\n\t\tif (!m.find()) {\n\t\t\treturn null;\n\t\t} else if (m.groupCount() < 14) {\n\t\t\treturn null;\n\t\t}\n\t\tElbLog elbLog = new ElbLog();\n\t\telbLog.timestamp = m.group(1);\n\t\telbLog.elb = m.group(2);\n\t\telbLog.clientWithPort = m.group(3);\n\t\telbLog.backendWithPort = m.group(4);\n\t\telbLog.requestProcessingTime = Double.valueOf(m.group(5));\n\t\telbLog.backendProcessingTime = Double.valueOf(m.group(6));\n\t\telbLog.responseProcessingTime = Double.valueOf(m.group(7));\n\t\telbLog.elbStatusCode = Integer.valueOf(m.group(8));\n\t\telbLog.backendStatusCode = Integer.valueOf(m.group(9));\n\t\telbLog.receivedBytes = Integer.valueOf(m.group(10));\n\t\telbLog.sentBytes = Integer.valueOf(m.group(11));\n\t\telbLog.requestMethod = m.group(12);\n\t\telbLog.requestURL = m.group(13);\n\t\telbLog.requestHTTPVersion = m.group(14);\n\n\t\treturn elbLog;\n\t}\n}\n```\n\n## Main.java\nMain\u3067\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307e\u305b\u308b\u3002\n\n```java\npackage com.makeitsmartjp.java;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tString path = \"/path/to/elb.log\";\n\t\tELBLogParser parser = new ELBLogParser();\n\t\tparser.parse(path);\n\n    // \u4ee5\u4e0b\u306b\u8abf\u3079\u305f\u3044\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u304f\n\t}\n}\n```\n", "tags": ["java8", "elb", "AWS"]}