{"tags": ["Java", "commons-net", "guava", "IP\u30a2\u30c9\u30ec\u30b9"], "context": " More than 1 year has passed since last update.commons-net\u306eSubnetUtils\u3092\u4f7f\u3063\u3066\u3001\u30b5\u30d6\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304b\u3089\u6b32\u3057\u3044IP\u30a2\u30c9\u30ec\u30b9\u3092\u62bd\u51fa\u3059\u308b\u3084\u308a\u65b9\u3002\n\u4f8b\u3048\u3070\u3001\u300c\u30b5\u30d6\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5148\u982d5\u500b\u300d\u300c\u30b5\u30d6\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u3046\u3061\u3001\u307e\u3060\u4f7f\u7528\u3055\u308c\u3066\u3044\u306a\u3044\u3082\u306e\u306e\u5148\u982d1\u500b\u300d\u3068\u3044\u3046\u30b1\u30fc\u30b9\u3092\u60f3\u5b9a\u3002\n\n0. CIDR\u8868\u8a18\u304b\u3089\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\njavadoc\u304c\u4e0b\u8a18\u306e\u901a\u308a\u3001\u4e01\u5be7\u306b\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002\npublic SubnetUtils(String cidrNotation)\nConstructor that takes a CIDR-notation string, e.g. \"192.168.0.1/16\"\n\nParameters:\ncidrNotation - A CIDR-notation string, e.g. \"192.168.0.1/16\"\n\nThrows:\nIllegalArgumentException - if the parameter is invalid, i.e. does not match n.n.n.n/m where n=1-3 decimal digits, m = 1-3 decimal digits in range 1-32\n\n\u3064\u307e\u308a\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3057\u3066\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u751f\u6210\u3067\u304d\u308b\u3068\u3044\u3046\u3053\u3068\u3002\nSubnetUtils subnet = new SubnetUtils(\"192.168.0.0/24\");\n\nsubnet.getInfo() \u306e\u623b\u308a\u5024\u306eSubnetUtils.SubnetInfo \u304b\u3089\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u60c5\u5831\u3092\u5f15\u304d\u51fa\u305b\u307e\u3059\u3002\n\n1. \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a2\u30c9\u30ec\u30b9\ngetNetworkAddress()\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\nSubnetUtils subnet = new SubnetUtils(\"192.168.0.0/24\");\nString networkAddress = subnet.getInfo().getNetworkAddress();\nSystem.out.println(networkAddress);\n\n192.168.0.0\n\n\n2. \u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u30a2\u30c9\u30ec\u30b9\ngetBroadcastAddress()\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\nSubnetUtils subnet = new SubnetUtils(\"192.168.0.0/24\");\nString broadcastAddress= subnet.getInfo().getBroadcastAddress();\nSystem.out.println(broadcastAddress);\n\n192.168.0.255\n\n\n3. \u305d\u306e\u4ed6\u306e\u30a2\u30c9\u30ec\u30b9\ngetAllAddresses()\u3067\u3001\u4f7f\u7528\u3067\u304d\u308b\u30a2\u30c9\u30ec\u30b9\u3092\u914d\u5217\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\nSubnetUtils subnet = new SubnetUtils(\"192.168.0.0/30\");\nList<String> allAddresses= Arrays.asList(subnet.getInfo().getAllAddresses());\nSystem.out.println(addAddresses);\n\n[192.168.0.1,192.168.0.2]\n\n\n4. \u30a2\u30c9\u30ec\u30b9\u306e\u62bd\u51fa\n\n\u4f8b1  \u30b5\u30d6\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5148\u982d5\u500b\ngetAllAddresses()\u3068subList\u3092\u7d44\u307f\u5408\u308f\u305b\u307e\u3059\u3002\nSubnetUtils subnet = new SubnetUtils(\"192.168.0.0/24\");\nList<String> addresses= Arrays.asList(subnet.getInfo().getAllAddresses()).subList(0, 5);\nSystem.out.println(addresses);\n\n\n\u4f8b2 \u30b5\u30d6\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u3046\u3061\u3001\u307e\u3060\u4f7f\u7528\u3055\u308c\u3066\u3044\u306a\u3044\u3082\u306e\u306e\u5148\u982d1\u500b\n\u4f7f\u7528\u6e08\u307f\u306eIP\u30a2\u30c9\u30ec\u30b9\u306fDB\u304b\u3089\u53d6\u5f97\u3067\u304d\u308b\u3082\u306e\u3068\u3057\u307e\u3059\u3002\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u64cd\u4f5c\u306e\u305f\u3081\u306bGuava \u3092\u4f7f\u3044\u307e\u3059\u3002\uff08java7\u306e\u4ed5\u4e8b\u306e\u3068\u304d\u306b\u7de8\u307f\u51fa\u3057\u305f\u306e\u3067\uff09\nfinal List<String> usedAddresses = ...; //DB\u306a\u3069\u304b\u3089\u53d6\u5f97\nList<String> allAddresses= Arrays.asList(subnet.getInfo().getAllAddresses());\n\nPredicate<String> isUnused = new Predicate<String>() {\n   public boolean apply(String address) {\n          return !usedAddresses.contains(address);\n   }\n};\n\nString unusedAddress = Iterables.find(allAddresses, isUnused, \"\");\n\n\n\n\u307e\u3068\u3081\n\u30b5\u30d6\u30cd\u30c3\u30c8\u306e\u30a2\u30c9\u30ec\u30b9\u5168\u4f53\u3092\u914d\u5217\u3067\u53d6\u5f97\u3067\u304d\u308b\u306e\u3067\u3001\u9664\u5916\u3057\u305f\u3044\u3082\u306e\u3092\u30ea\u30b9\u30c8\u3067\u53d6\u5f97\u3067\u304d\u308c\u3070\u3001\u5927\u62b5\u306e\u62bd\u51fa\u306f\u3067\u304d\u305d\u3046\u3002\n\u8eca\u8f2a\u306e\u518d\u767a\u660e\u3059\u308b\u6c17\u304c\u306a\u3044\u306a\u3089\u3001\u3053\u306e\u3042\u305f\u308a\u3092\u4f7f\u3046\u3068\u697d\u3002\njava8\u306a\u3089\u3001stream\u3068lambda\u5f0f\u3067\u3082\u3046\u5c11\u3057\u3059\u3063\u304d\u308a\u66f8\u3051\u308b\u306f\u305a\u3002\ncommons-net\u306e[SubnetUtils](https://commons.apache.org/proper/commons-net/apidocs/org/apache/commons/net/util/SubnetUtils.html)\u3092\u4f7f\u3063\u3066\u3001\u30b5\u30d6\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304b\u3089\u6b32\u3057\u3044IP\u30a2\u30c9\u30ec\u30b9\u3092\u62bd\u51fa\u3059\u308b\u3084\u308a\u65b9\u3002\n\n\u4f8b\u3048\u3070\u3001\u300c\u30b5\u30d6\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5148\u982d5\u500b\u300d\u300c\u30b5\u30d6\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u3046\u3061\u3001\u307e\u3060\u4f7f\u7528\u3055\u308c\u3066\u3044\u306a\u3044\u3082\u306e\u306e\u5148\u982d1\u500b\u300d\u3068\u3044\u3046\u30b1\u30fc\u30b9\u3092\u60f3\u5b9a\u3002\n\n### 0. CIDR\u8868\u8a18\u304b\u3089\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\n\n[javadoc](https://commons.apache.org/proper/commons-net/apidocs/org/apache/commons/net/util/SubnetUtils.html#SubnetUtils(java.lang.String))\u304c\u4e0b\u8a18\u306e\u901a\u308a\u3001\u4e01\u5be7\u306b\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002\n\n```\npublic SubnetUtils(String cidrNotation)\nConstructor that takes a CIDR-notation string, e.g. \"192.168.0.1/16\"\n\nParameters:\ncidrNotation - A CIDR-notation string, e.g. \"192.168.0.1/16\"\n\nThrows:\nIllegalArgumentException - if the parameter is invalid, i.e. does not match n.n.n.n/m where n=1-3 decimal digits, m = 1-3 decimal digits in range 1-32\n```\n\n\u3064\u307e\u308a\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3057\u3066\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u751f\u6210\u3067\u304d\u308b\u3068\u3044\u3046\u3053\u3068\u3002\n\n```\nSubnetUtils subnet = new SubnetUtils(\"192.168.0.0/24\");\n```\n\n`subnet.getInfo()` \u306e\u623b\u308a\u5024\u306e[SubnetUtils.SubnetInfo](https://commons.apache.org/proper/commons-net/apidocs/org/apache/commons/net/util/SubnetUtils.SubnetInfo.html) \u304b\u3089\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u60c5\u5831\u3092\u5f15\u304d\u51fa\u305b\u307e\u3059\u3002\n\n\n\n### 1. \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a2\u30c9\u30ec\u30b9\n\n`getNetworkAddress()`\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\n```\nSubnetUtils subnet = new SubnetUtils(\"192.168.0.0/24\");\nString networkAddress = subnet.getInfo().getNetworkAddress();\nSystem.out.println(networkAddress);\n```\n```\n192.168.0.0\n```\n\n### 2. \u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u30a2\u30c9\u30ec\u30b9\n\n`getBroadcastAddress()`\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\n```\nSubnetUtils subnet = new SubnetUtils(\"192.168.0.0/24\");\nString broadcastAddress= subnet.getInfo().getBroadcastAddress();\nSystem.out.println(broadcastAddress);\n```\n```\n192.168.0.255\n```\n\n### 3. \u305d\u306e\u4ed6\u306e\u30a2\u30c9\u30ec\u30b9\n\n`getAllAddresses()`\u3067\u3001\u4f7f\u7528\u3067\u304d\u308b\u30a2\u30c9\u30ec\u30b9\u3092\u914d\u5217\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\n```\nSubnetUtils subnet = new SubnetUtils(\"192.168.0.0/30\");\nList<String> allAddresses= Arrays.asList(subnet.getInfo().getAllAddresses());\nSystem.out.println(addAddresses);\n```\n```\n[192.168.0.1,192.168.0.2]\n```\n### 4. \u30a2\u30c9\u30ec\u30b9\u306e\u62bd\u51fa\n\n#### \u4f8b1  \u30b5\u30d6\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5148\u982d5\u500b\n\ngetAllAddresses()\u3068subList\u3092\u7d44\u307f\u5408\u308f\u305b\u307e\u3059\u3002\n\n```\nSubnetUtils subnet = new SubnetUtils(\"192.168.0.0/24\");\nList<String> addresses= Arrays.asList(subnet.getInfo().getAllAddresses()).subList(0, 5);\nSystem.out.println(addresses);\n```\n\n#### \u4f8b2 \u30b5\u30d6\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u3046\u3061\u3001\u307e\u3060\u4f7f\u7528\u3055\u308c\u3066\u3044\u306a\u3044\u3082\u306e\u306e\u5148\u982d1\u500b\n\n\u4f7f\u7528\u6e08\u307f\u306eIP\u30a2\u30c9\u30ec\u30b9\u306fDB\u304b\u3089\u53d6\u5f97\u3067\u304d\u308b\u3082\u306e\u3068\u3057\u307e\u3059\u3002\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u64cd\u4f5c\u306e\u305f\u3081\u306b[Guava](https://github.com/google/guava) \u3092\u4f7f\u3044\u307e\u3059\u3002\uff08java7\u306e\u4ed5\u4e8b\u306e\u3068\u304d\u306b\u7de8\u307f\u51fa\u3057\u305f\u306e\u3067\uff09\n\n```\nfinal List<String> usedAddresses = ...; //DB\u306a\u3069\u304b\u3089\u53d6\u5f97\nList<String> allAddresses= Arrays.asList(subnet.getInfo().getAllAddresses());\n\nPredicate<String> isUnused = new Predicate<String>() {\n   public boolean apply(String address) {\n          return !usedAddresses.contains(address);\n   }\n};\n\nString unusedAddress = Iterables.find(allAddresses, isUnused, \"\");\n\n```\n\n### \u307e\u3068\u3081\n\n\u30b5\u30d6\u30cd\u30c3\u30c8\u306e\u30a2\u30c9\u30ec\u30b9\u5168\u4f53\u3092\u914d\u5217\u3067\u53d6\u5f97\u3067\u304d\u308b\u306e\u3067\u3001\u9664\u5916\u3057\u305f\u3044\u3082\u306e\u3092\u30ea\u30b9\u30c8\u3067\u53d6\u5f97\u3067\u304d\u308c\u3070\u3001\u5927\u62b5\u306e\u62bd\u51fa\u306f\u3067\u304d\u305d\u3046\u3002\n\u8eca\u8f2a\u306e\u518d\u767a\u660e\u3059\u308b\u6c17\u304c\u306a\u3044\u306a\u3089\u3001\u3053\u306e\u3042\u305f\u308a\u3092\u4f7f\u3046\u3068\u697d\u3002\n\njava8\u306a\u3089\u3001stream\u3068lambda\u5f0f\u3067\u3082\u3046\u5c11\u3057\u3059\u3063\u304d\u308a\u66f8\u3051\u308b\u306f\u305a\u3002\n"}