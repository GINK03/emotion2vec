{"context": "\n\n\u5404\u30d0\u30fc\u30b8\u30e7\u30f3\n\u8a33\u3042\u3063\u3066Spring\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c3.2.8.RELEASE\u3067\u3059\u304c\u30014\u7cfb\u306e\u6700\u65b0\u7248\u3067\u3082\u554f\u984c\u306a\u3044\u3067\u3059\u3002\n\u305d\u306e\u5834\u5408\u3001Spring Test DBUnit\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u30011.3.0\u304c\u826f\u3044\u3067\u3059\u3002\n\nJava\n1.8.0 update 92\nSpring Framework\n3.2.8.RELEASE\nSpring Test DBUnit\n1.0.1\nDbUnit\n2.5.2\nH2 Database\n1.4.191\nJUnit\n4.12\n\n\n\u80cc\u666f\nSpring + DbUnit + Spring Test DBUnit \u3092\u4f7f\u3063\u3066DB\u95a2\u9023\u30af\u30e9\u30b9\u306e\u5358\u4f53\u30c6\u30b9\u30c8\u3092\u884c\u3046\u5834\u5408\u306b\u3001\n\u5404\u958b\u767a\u8005\u306e\u74b0\u5883\u3084CI\u74b0\u5883\u306b\u304a\u3044\u3066\u305d\u308c\u305e\u308c\u306e\u74b0\u5883\u3067DB\u3092\u7528\u610f\u3059\u308b\u306e\u306f\u5927\u5909\u306a\u306e\u3067\u3001\n\u30a4\u30f3\u30e1\u30e2\u30ea\u306aH2 Database\u3092\u63a1\u7528\u3059\u308b\u3053\u3068\u306f\u5c11\u306a\u304f\u306a\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\napplication.xml\n    <bean id=\"dataSource\"\n          class=\"org.h2.jdbcx.JdbcDataSource\">\n        <property name=\"URL\" value=\"jdbc:h2:mem:sample;MODE=MySQL\"/>\n        <property name=\"user\" value=\"user\"/>\n        <property name=\"password\" value=\"password\"/>\n    </bean>\n\n    <jdbc:initialize-database data-source=\"dataSource\" ignore-failures=\"DROPS\">\n        <jdbc:script location=\"classpath:schema.sql\" />\n    </jdbc:initialize-database>\n\n\n\nSampleTest.java\npackage jp.ijufumi.test;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\nimport jp.ijufumi.test.support.DatabaseInitTestExecutionListener;\n\nimport com.github.springtestdbunit.DbUnitTestExecutionListener;\nimport com.github.springtestdbunit.annotation.DbUnitConfiguration;\nimport org.junit.runner.RunWith;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.TestExecutionListeners;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.support.DependencyInjectionTestExecutionListener;\nimport org.springframework.test.context.support.DirtiesContextTestExecutionListener;\nimport org.springframework.test.context.transaction.TransactionConfiguration;\nimport org.springframework.test.context.transaction.TransactionalTestExecutionListener;\nimport org.springframework.transaction.annotation.Transactional;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(\"classpath*:META-INF/spring/applicationContext*.xml\")\n@Transactional\n@TransactionConfiguration\n@TestExecutionListeners({ DependencyInjectionTestExecutionListener.class,\n        DirtiesContextTestExecutionListener.class,\n        TransactionalTestExecutionListener.class,\n        DbUnitTestExecutionListener.class})\npublic class SampleTest {\n   @Test\n   public void test001() {\n   }\n\n   @Test\n   public void test002() {\n   }\n}\n\n\n\u305d\u306e\u969b\u306b\u3001\u4e0a\u8a18\u306e\u3088\u3046\u306a\u8a2d\u5b9a\u306b\u306a\u308b\u3053\u3068\u591a\u304f\u3066\u3001\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u305f\u3073\u306b\u5168\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3057\u3066\u3057\u307e\u3044\u3001\n\u3042\u307e\u308a\u52b9\u7387\u7684\u3067\u306f\u306a\u3044\u3067\u3059\u3002\n\n\u5b9f\u73fe\u65b9\u6cd5\n\u305d\u3053\u3067\u3001\u6b21\u306e\u3088\u3046\u306a\u30af\u30e9\u30b9\u3001\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067\u3001\u30c6\u30b9\u30c8\u6bce\u306b\u5fc5\u8981\u306a\u30c6\u30fc\u30d6\u30eb\u306e\u307f\u7528\u610f\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\napplication.xml\n    <bean id=\"dataSource\"\n          class=\"org.h2.jdbcx.JdbcDataSource\">\n        <property name=\"URL\" value=\"jdbc:h2:mem:sample;MODE=MySQL\"/>\n        <property name=\"user\" value=\"user\"/>\n        <property name=\"password\" value=\"password\"/>\n    </bean>\n\n\n\nDatabaseInitTestExecutionListener.java\npackage jp.ijufumi.test.support;\n\nimport javax.sql.DataSource;\n\nimport jp.ijufumi.test.annotation.DbSchemes;\n\nimport com.github.springtestdbunit.annotation.DbUnitConfiguration;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.jdbc.datasource.init.DatabasePopulatorUtils;\nimport org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;\nimport org.springframework.test.context.TestContext;\nimport org.springframework.test.context.support.AbstractTestExecutionListener;\n\npublic class DatabaseInitTestExecutionListener extends AbstractTestExecutionListener {\n    private Logger logger = LoggerFactory.getLogger(getClass());\n\n    private static final String BASE_PATH = \"data/db/schema/\";\n\n    private static final String FILE_SUFFIX = \".sql\";\n\n    @Override\n    public void beforeTestMethod(TestContext testContext) throws Exception {\n        logger.debug(\"DB Schema setup for {}\", testContext.getTestMethod().getName());\n        DbSchemes dbSchemes = testContext.getTestMethod().getAnnotation(DbSchemes.class);\n        if (dbSchemes == null) {\n            logger.debug(\"@DbSchemes is not exists.\");\n            return;\n        }\n\n        String dataSourceName = \"dataSource\";\n        DbUnitConfiguration configuration = testContext.getTestClass().getAnnotation(DbUnitConfiguration.class);\n        if (configuration != null && StringUtils.isNotEmpty(configuration.databaseConnection()))\n        {\n            dataSourceName = configuration.databaseConnection();\n        }\n\n        DataSource dataSource = (DataSource) testContext.getApplicationContext().getBean(dataSourceName);\n        ResourceDatabasePopulator databasePopulator = new ResourceDatabasePopulator();\n\n        for (String s : dbSchemes.value())\n        {\n            logger.debug(\"Create table : {}\", s);\n            databasePopulator.addScript(new ClassPathResource(BASE_PATH + s + FILE_SUFFIX));\n        }\n        DatabasePopulatorUtils.execute(databasePopulator, dataSource);\n    }\n}\n\n\n\nDbSchemas.java\npackage jp.ijufumi.test.annotation;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Inherited;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\n@Inherited\n@Documented\npublic @interface DbSchemes {\n    String[] value();\n}\n\n\n\n\nSampleTest.java\npackage jp.ijufumi.test;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\nimport jp.ijufumi.test.support.DatabaseInitTestExecutionListener;\n\nimport com.github.springtestdbunit.DbUnitTestExecutionListener;\nimport com.github.springtestdbunit.annotation.DbUnitConfiguration;\nimport org.junit.runner.RunWith;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.TestExecutionListeners;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.support.DependencyInjectionTestExecutionListener;\nimport org.springframework.test.context.support.DirtiesContextTestExecutionListener;\nimport org.springframework.test.context.transaction.TransactionConfiguration;\nimport org.springframework.test.context.transaction.TransactionalTestExecutionListener;\nimport org.springframework.transaction.annotation.Transactional;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(\"classpath*:META-INF/spring/applicationContext*.xml\")\n@Transactional\n@TransactionConfiguration\n@TestExecutionListeners({ DependencyInjectionTestExecutionListener.class,\n        DirtiesContextTestExecutionListener.class,\n        TransactionalTestExecutionListener.class,\n        DatabaseInitTestExecutionListener.class,\n        DbUnitTestExecutionListener.class})\npublic class SampleTest {\n   @Test\n   @DbSchemas(\"table1\")\n   public void test001() {\n   }\n\n   @Test\n   @DbSchemas({\"table1\", \"table2\"})\n   public void test002() {\n   }\n}\n\n\n\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306aDDL\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n\u683c\u7d0d\u5834\u6240\u306f\u3001{project.dir}/src/test/resources/data/db/schema/SampleTest\u3067\u3001\u62e1\u5f35\u5b50\u306f.sql\u3067\u3059\u3002\n\u3053\u306e\u8fba\u306f\u3001DatabaseInitTestExecutionListener\u306e\u5b9a\u6570\u3067\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u4f7f\u3046\u4eba\u306b\u3088\u3063\u3066\u5909\u66f4\u3057\u3066\u3044\u3051\u3070\u3044\u3044\u306e\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\ntable1.sql\ncreate table if not exists table1 (\n   id varchar(10) not null,\n   name varchar(100),\n   create_date datetime,\n   primary key (id)\n);\n\n\n\ntable2.sql\ncreate table if not exists table1 (\n   id varchar(10) not null,\n   name varchar(100),\n   category varchar(3),\n   create_date datetime,\n   primary key (id)\n);\n\n\n\n\u6240\u611f\n\u4eca\u56de\u306f\u3001\u5fc5\u8981\u306a\u30c6\u30fc\u30d6\u30eb\u3092\u7528\u610f\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u304c\u76ee\u7684\u3067\u3057\u305f\u304c\u3001\nSpring Test\u306eExecutionListener\u306e\u4ed5\u7d44\u307f\u306f\u3059\u3054\u304f\u4fbf\u5229\u3067\n\u4eca\u5f8c\u8272\u3005\u4f7f\u3063\u3066\u3044\u304d\u305f\u3044\u306a\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\n\u304a\u9858\u3044\n\u3082\u3057\u3001\u79c1\u306e\u3084\u308a\u65b9\u3088\u308a\u3082\u3063\u3068\u52b9\u7387\u306e\u3044\u3044\u3084\u308a\u65b9\u3042\u3063\u305f\u3089\u30b3\u30e1\u30f3\u30c8\u4e0b\u3055\u3044\u3002\n\u30b3\u30e1\u30f3\u30c8\u3044\u305f\u3060\u3051\u305f\u3089\u968f\u6642\u53cd\u6620\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\n## \u5404\u30d0\u30fc\u30b8\u30e7\u30f3\n\u8a33\u3042\u3063\u3066`Spring`\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c`3.2.8.RELEASE`\u3067\u3059\u304c\u30014\u7cfb\u306e\u6700\u65b0\u7248\u3067\u3082\u554f\u984c\u306a\u3044\u3067\u3059\u3002\n\n\u305d\u306e\u5834\u5408\u3001Spring Test DBUnit\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u3001`1.3.0`\u304c\u826f\u3044\u3067\u3059\u3002\n\n * Java\n 1.8.0 update 92\n \n * Spring Framework\n 3.2.8.RELEASE\n  \n * [Spring Test DBUnit](https://springtestdbunit.github.io/spring-test-dbunit/)\n 1.0.1\n\n * DbUnit\n 2.5.2\n\n * H2 Database\n 1.4.191\n\n * JUnit\n 4.12\n \n## \u80cc\u666f\n`Spring` + `DbUnit` + `Spring Test DBUnit` \u3092\u4f7f\u3063\u3066DB\u95a2\u9023\u30af\u30e9\u30b9\u306e\u5358\u4f53\u30c6\u30b9\u30c8\u3092\u884c\u3046\u5834\u5408\u306b\u3001\n\u5404\u958b\u767a\u8005\u306e\u74b0\u5883\u3084CI\u74b0\u5883\u306b\u304a\u3044\u3066\u305d\u308c\u305e\u308c\u306e\u74b0\u5883\u3067DB\u3092\u7528\u610f\u3059\u308b\u306e\u306f\u5927\u5909\u306a\u306e\u3067\u3001\n\u30a4\u30f3\u30e1\u30e2\u30ea\u306a`H2 Database`\u3092\u63a1\u7528\u3059\u308b\u3053\u3068\u306f\u5c11\u306a\u304f\u306a\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\n``` xml:application.xml\n    <bean id=\"dataSource\"\n          class=\"org.h2.jdbcx.JdbcDataSource\">\n        <property name=\"URL\" value=\"jdbc:h2:mem:sample;MODE=MySQL\"/>\n        <property name=\"user\" value=\"user\"/>\n        <property name=\"password\" value=\"password\"/>\n    </bean>\n\n    <jdbc:initialize-database data-source=\"dataSource\" ignore-failures=\"DROPS\">\n        <jdbc:script location=\"classpath:schema.sql\" />\n    </jdbc:initialize-database>\n```\n\n``` java:SampleTest.java\npackage jp.ijufumi.test;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\nimport jp.ijufumi.test.support.DatabaseInitTestExecutionListener;\n\nimport com.github.springtestdbunit.DbUnitTestExecutionListener;\nimport com.github.springtestdbunit.annotation.DbUnitConfiguration;\nimport org.junit.runner.RunWith;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.TestExecutionListeners;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.support.DependencyInjectionTestExecutionListener;\nimport org.springframework.test.context.support.DirtiesContextTestExecutionListener;\nimport org.springframework.test.context.transaction.TransactionConfiguration;\nimport org.springframework.test.context.transaction.TransactionalTestExecutionListener;\nimport org.springframework.transaction.annotation.Transactional;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(\"classpath*:META-INF/spring/applicationContext*.xml\")\n@Transactional\n@TransactionConfiguration\n@TestExecutionListeners({ DependencyInjectionTestExecutionListener.class,\n        DirtiesContextTestExecutionListener.class,\n        TransactionalTestExecutionListener.class,\n        DbUnitTestExecutionListener.class})\npublic class SampleTest {\n   @Test\n   public void test001() {\n   }\n\n   @Test\n   public void test002() {\n   }\n}\n```\n\n\u305d\u306e\u969b\u306b\u3001\u4e0a\u8a18\u306e\u3088\u3046\u306a\u8a2d\u5b9a\u306b\u306a\u308b\u3053\u3068\u591a\u304f\u3066\u3001\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u305f\u3073\u306b\u5168\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3057\u3066\u3057\u307e\u3044\u3001\n\u3042\u307e\u308a\u52b9\u7387\u7684\u3067\u306f\u306a\u3044\u3067\u3059\u3002\n\n## \u5b9f\u73fe\u65b9\u6cd5\n\u305d\u3053\u3067\u3001\u6b21\u306e\u3088\u3046\u306a\u30af\u30e9\u30b9\u3001\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067\u3001\u30c6\u30b9\u30c8\u6bce\u306b\u5fc5\u8981\u306a\u30c6\u30fc\u30d6\u30eb\u306e\u307f\u7528\u610f\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n``` xml:application.xml\n    <bean id=\"dataSource\"\n          class=\"org.h2.jdbcx.JdbcDataSource\">\n        <property name=\"URL\" value=\"jdbc:h2:mem:sample;MODE=MySQL\"/>\n        <property name=\"user\" value=\"user\"/>\n        <property name=\"password\" value=\"password\"/>\n    </bean>\n```\n\n``` java:DatabaseInitTestExecutionListener.java\npackage jp.ijufumi.test.support;\n\nimport javax.sql.DataSource;\n\nimport jp.ijufumi.test.annotation.DbSchemes;\n\nimport com.github.springtestdbunit.annotation.DbUnitConfiguration;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.jdbc.datasource.init.DatabasePopulatorUtils;\nimport org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;\nimport org.springframework.test.context.TestContext;\nimport org.springframework.test.context.support.AbstractTestExecutionListener;\n\npublic class DatabaseInitTestExecutionListener extends AbstractTestExecutionListener {\n    private Logger logger = LoggerFactory.getLogger(getClass());\n\n    private static final String BASE_PATH = \"data/db/schema/\";\n\n    private static final String FILE_SUFFIX = \".sql\";\n\n    @Override\n    public void beforeTestMethod(TestContext testContext) throws Exception {\n        logger.debug(\"DB Schema setup for {}\", testContext.getTestMethod().getName());\n        DbSchemes dbSchemes = testContext.getTestMethod().getAnnotation(DbSchemes.class);\n        if (dbSchemes == null) {\n            logger.debug(\"@DbSchemes is not exists.\");\n            return;\n        }\n\n        String dataSourceName = \"dataSource\";\n        DbUnitConfiguration configuration = testContext.getTestClass().getAnnotation(DbUnitConfiguration.class);\n        if (configuration != null && StringUtils.isNotEmpty(configuration.databaseConnection()))\n        {\n            dataSourceName = configuration.databaseConnection();\n        }\n\n        DataSource dataSource = (DataSource) testContext.getApplicationContext().getBean(dataSourceName);\n        ResourceDatabasePopulator databasePopulator = new ResourceDatabasePopulator();\n\n        for (String s : dbSchemes.value())\n        {\n            logger.debug(\"Create table : {}\", s);\n            databasePopulator.addScript(new ClassPathResource(BASE_PATH + s + FILE_SUFFIX));\n        }\n        DatabasePopulatorUtils.execute(databasePopulator, dataSource);\n    }\n}\n```\n\n``` java:DbSchemas.java\npackage jp.ijufumi.test.annotation;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Inherited;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\n@Inherited\n@Documented\npublic @interface DbSchemes {\n    String[] value();\n}\n\n```\n\n``` java:SampleTest.java\npackage jp.ijufumi.test;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\nimport jp.ijufumi.test.support.DatabaseInitTestExecutionListener;\n\nimport com.github.springtestdbunit.DbUnitTestExecutionListener;\nimport com.github.springtestdbunit.annotation.DbUnitConfiguration;\nimport org.junit.runner.RunWith;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.TestExecutionListeners;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.support.DependencyInjectionTestExecutionListener;\nimport org.springframework.test.context.support.DirtiesContextTestExecutionListener;\nimport org.springframework.test.context.transaction.TransactionConfiguration;\nimport org.springframework.test.context.transaction.TransactionalTestExecutionListener;\nimport org.springframework.transaction.annotation.Transactional;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(\"classpath*:META-INF/spring/applicationContext*.xml\")\n@Transactional\n@TransactionConfiguration\n@TestExecutionListeners({ DependencyInjectionTestExecutionListener.class,\n        DirtiesContextTestExecutionListener.class,\n        TransactionalTestExecutionListener.class,\n        DatabaseInitTestExecutionListener.class,\n        DbUnitTestExecutionListener.class})\npublic class SampleTest {\n   @Test\n   @DbSchemas(\"table1\")\n   public void test001() {\n   }\n\n   @Test\n   @DbSchemas({\"table1\", \"table2\"})\n   public void test002() {\n   }\n}\n```\n\n\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306aDDL\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n\u683c\u7d0d\u5834\u6240\u306f\u3001`{project.dir}/src/test/resources/data/db/schema/SampleTest`\u3067\u3001\u62e1\u5f35\u5b50\u306f`.sql`\u3067\u3059\u3002\n\u3053\u306e\u8fba\u306f\u3001`DatabaseInitTestExecutionListener`\u306e\u5b9a\u6570\u3067\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u4f7f\u3046\u4eba\u306b\u3088\u3063\u3066\u5909\u66f4\u3057\u3066\u3044\u3051\u3070\u3044\u3044\u306e\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n``` sql:table1.sql\ncreate table if not exists table1 (\n   id varchar(10) not null,\n   name varchar(100),\n   create_date datetime,\n   primary key (id)\n);\n```\n\n``` sql:table2.sql\ncreate table if not exists table1 (\n   id varchar(10) not null,\n   name varchar(100),\n   category varchar(3),\n   create_date datetime,\n   primary key (id)\n);\n```\n\n## \u6240\u611f\n\u4eca\u56de\u306f\u3001\u5fc5\u8981\u306a\u30c6\u30fc\u30d6\u30eb\u3092\u7528\u610f\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u304c\u76ee\u7684\u3067\u3057\u305f\u304c\u3001\n`Spring Test`\u306e`ExecutionListener`\u306e\u4ed5\u7d44\u307f\u306f\u3059\u3054\u304f\u4fbf\u5229\u3067\n\u4eca\u5f8c\u8272\u3005\u4f7f\u3063\u3066\u3044\u304d\u305f\u3044\u306a\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\n## \u304a\u9858\u3044\n\u3082\u3057\u3001\u79c1\u306e\u3084\u308a\u65b9\u3088\u308a\u3082\u3063\u3068\u52b9\u7387\u306e\u3044\u3044\u3084\u308a\u65b9\u3042\u3063\u305f\u3089\u30b3\u30e1\u30f3\u30c8\u4e0b\u3055\u3044\u3002\n\u30b3\u30e1\u30f3\u30c8\u3044\u305f\u3060\u3051\u305f\u3089\u968f\u6642\u53cd\u6620\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n", "tags": ["h2", "JUnit", "spring", "DBUnit", "Java"]}