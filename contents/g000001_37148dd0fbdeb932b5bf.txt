{"context": " More than 1 year has passed since last update.(and (foo? obj) (foo-x obj))\n\u307f\u305f\u3044\u306a\u3082\u306e\u3092\u81ea\u52d5\u3067\u5b9a\u7fa9\u3067\u304d\u306a\u3044\u304b\u8003\u3048\u3066\u307f\u307e\u3057\u305f ignore-errors \u3067\u56f2\u3080\u3068\u3044\u3046\u624b\u3082\u3042\u308a\u307e\u3059\u304c\u2026\n\u3061\u306a\u307f\u306b\u95a2\u6570\u3067\u3082\u826f\u3044\u3093\u3067\u3059\u304c\u3001\u5b9f\u884c\u6642\u306b\u5f15\u6570\u3092\u8abf\u3079\u308b\u306e\u304c\u5acc\u304b\u306a\u3068\u601d\u3044\u307e\u3057\u3066\u2026\u3002\n(defun function-type (function-name)\n  #+sbcl (sb-introspect:function-type function-name)\n  #-sbcl :not-implemented)\n\n(defmacro disarm (fname)\n  ;; 1\u5f15\u6570\u306e\u95a2\u6570\u3060\u3051\u306b\u6709\u52b9\n  (destructuring-bind (_function (type) &rest _rest)\n                      (function-type fname)\n    (declare (cl:ignore _function _rest))\n    (let ((arg (gensym \"arg-\")))\n      `(lambda (,arg)\n         (and (typep ,arg ',type) (,fname (the ,type ,arg)))))))\n\n;;; \u4f7f\u3044\u65b9\n(setf (fdefinition 'car-safe) (disarm car))\n\n(car-safe '(8))\n;=>  8\n\n(car-safe 88)\n;=>  NIL\n\n(and (foo? obj) (foo-x obj))\n\u307f\u305f\u3044\u306a\u3082\u306e\u3092\u81ea\u52d5\u3067\u5b9a\u7fa9\u3067\u304d\u306a\u3044\u304b\u8003\u3048\u3066\u307f\u307e\u3057\u305f ignore-errors \u3067\u56f2\u3080\u3068\u3044\u3046\u624b\u3082\u3042\u308a\u307e\u3059\u304c\u2026\n\u3061\u306a\u307f\u306b\u95a2\u6570\u3067\u3082\u826f\u3044\u3093\u3067\u3059\u304c\u3001\u5b9f\u884c\u6642\u306b\u5f15\u6570\u3092\u8abf\u3079\u308b\u306e\u304c\u5acc\u304b\u306a\u3068\u601d\u3044\u307e\u3057\u3066\u2026\u3002\n\n```cl\n(defun function-type (function-name)\n  #+sbcl (sb-introspect:function-type function-name)\n  #-sbcl :not-implemented)\n\n(defmacro disarm (fname)\n  ;; 1\u5f15\u6570\u306e\u95a2\u6570\u3060\u3051\u306b\u6709\u52b9\n  (destructuring-bind (_function (type) &rest _rest)\n                      (function-type fname)\n    (declare (cl:ignore _function _rest))\n    (let ((arg (gensym \"arg-\")))\n      `(lambda (,arg)\n         (and (typep ,arg ',type) (,fname (the ,type ,arg)))))))\n```\n\n```cl\n;;; \u4f7f\u3044\u65b9\n(setf (fdefinition 'car-safe) (disarm car))\n\n(car-safe '(8))\n;=>  8\n\n(car-safe 88)\n;=>  NIL\n```\n", "tags": ["common-lisp"]}