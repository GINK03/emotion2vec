{"context": " More than 1 year has passed since last update.TDD(\u30c6\u30b9\u30c8\u99c6\u52d5\u958b\u767a)\u304c\u63d0\u5531\u3055\u308c\u3066\u4e45\u3057\u3044\u3067\u3059\u304c\u3001\u30c6\u30b9\u30c8\u30d5\u30a1\u30fc\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u306e\u306f\u3001\u306a\u304b\u306a\u304b\u96e3\u3057\u3044\u3082\u306e\u3067\u3059\u3002\n\u30c6\u30b9\u30c8\u30d5\u30a1\u30fc\u30b9\u30c8\u3067\u306f\u3001\u6700\u521d\u306b\u30c6\u30b9\u30c8\u3092\u66f8\u304d\u3001\u30c6\u30b9\u30c8\u304c\u5931\u6557\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3001\u5b9f\u88c5\u2192\u30c6\u30b9\u30c8\u3068\u3044\u3046\u30b5\u30a4\u30af\u30eb\u3092\u56de\u3057\u307e\u3059\u304c\u3001\u9762\u5012\u81ed\u304f\u306a\u3063\u3066\u9014\u4e2d\u3067\u6b62\u3081\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u7a81\u7136\u6b7b\u958b\u767a\u3067\u306f\u3001\n\uff3f\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\uff3f\n\uff1e\u9762\u5012\u81ed\u304f\u306a\u3063\u3066\u9014\u4e2d\u3067\u6b62\u3081\u308b \uff1d\u3000\u6b7b\uff1c\n\uffe3Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y\uffe3\n\u3068\u3044\u3046\u7cbe\u795e\u3067\u958b\u767a\u306b\u81e8\u3080\u3053\u3068\u3067\u751f\u5b58\u672c\u80fd\u306b\u8a34\u3048\u30af\u30aa\u30ea\u30c6\u30a3\u306e\u9ad8\u3044\u30b3\u30fc\u30c9\u306e\u5b9f\u73fe\u3092\u76ee\u6307\u3057\u307e\u3059\u3002\n\nSLIME\u3092\u4f7f\u3063\u305f\u958b\u767a\u306e\u4f8b\n\u307e\u305a\u3001TDD\u3067\u306e\u30c6\u30b9\u30c8\u30d5\u30a1\u30fc\u30b9\u30c8\u306e\u3088\u3046\u306b\u3001\u95a2\u6570\u306e\u5b9a\u7fa9\u306e\u524d\u306b\u30a2\u30b5\u30fc\u30c8\u3092\u66f8\u304d\u307e\u3059\u3002\n\u3053\u308c\u3092\u66f8\u3044\u3066\u5b9f\u884c\u3057\u305f\u3089\u3001\u6210\u529f\u3059\u308b\u304b \u51e6\u7406\u7cfb\u304c\u843d\u3061\u308b \uff1d \u6b7b \u304b\u306e\u4e00\u767a\u52dd\u8ca0\u306b\u306a\u308a\u307e\u3059\u306e\u3067\u3001\u6c17\u5408\u3044\u3092\u5165\u308c\u3066\u66f8\u304d\u307e\u3057\u3087\u3046\u3002\n(progn\n  (assert (= 0 (fib 0)))\n  (assert (= 1 (fib 1)))\n  (assert (= 55 (fib 10))))\n\n\u5b9f\u884c\u3057\u307e\u3059\nThe function COMMON-LISP-USER::FIB is undefined.\n   [Condition of type UNDEFINED-FUNCTION]\n\n\u3078(^o^)\u3078\n\u3000 \u3000|\u3078\n\u3000\u3000/\n\nRestarts:\n 0: [RETRY] Retry SLIME interactive evaluation request.\n 1: [*ABORT] Return to SLIME's top level.\n 2: [ABORT] Abort thread (#<THREAD \"worker\" RUNNING {101E84E383}>)\n\nBacktrace:\n  0: (\"undefined function\")\n  1: ((LAMBDA ()))\n  2: (SB-INT:SIMPLE-EVAL-IN-LEXENV (ASSERT (= 0 (FIB 0))) #<NULL-LEXENV>)\n  3: (SB-IMPL::SIMPLE-EVAL-PROGN-BODY ((ASSERT (= 0 #)) (ASSERT (= 1 #)) (ASSERT (= 55 #))) #<NULL-LEXENV>)\n  4: (SB-INT:SIMPLE-EVAL-IN-LEXENV (PROGN (ASSERT (= 0 #)) (ASSERT (= 1 #)) (ASSERT (= 55 #))) #<NULL-LEXENV>)\n  5: (EVAL (PROGN (ASSERT (= 0 #)) (ASSERT (= 1 #)) (ASSERT (= 55 #))))\n  6: ((LAMBDA () :IN SWANK:INTERACTIVE-EVAL))\n --more--\n\n\u30c7\u30d0\u30c3\u30ac\u304c\u8d77\u52d5\u3057\u307e\u3059\u3002\n\u5f53\u7136\u306a\u304c\u3089fib\u95a2\u6570\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u3068\u8a00\u308f\u308c\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u304a\u3082\u3080\u308d\u306b\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n(defun fib (n)\n  (fib-iter n 1 0))\n\n\u3092\u5b9a\u7fa9\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3002\n0: [RETRY] \u3092\u9078\u629e\u3057\u307e\u3059\u3002\nThe function COMMON-LISP-USER::FIB-ITER is undefined.\n   [Condition of type UNDEFINED-FUNCTION]\n\n\uff3c(^o^ )\u3078\n\u3000 \uff3c|\n\u3000\u3000\u3000\uff1e\n\nRestarts:\n 0: [RETRY] Retry SLIME interactive evaluation request.\n 1: [*ABORT] Return to SLIME's top level.\n 2: [ABORT] Abort thread (#<THREAD \"worker\" RUNNING {101E84E383}>)\n\nBacktrace:\n  0: (\"undefined function\")\n  1: (FIB 0)\n  2: ((LAMBDA ()))\n  3: (SB-INT:SIMPLE-EVAL-IN-LEXENV (ASSERT (= 0 (FIB 0))) #<NULL-LEXENV>)\n  4: (SB-IMPL::SIMPLE-EVAL-PROGN-BODY ((ASSERT (= 0 #)) (ASSERT (= 1 #)) (ASSERT (= 55 #))) #<NULL-LEXENV>)\n  5: (SB-INT:SIMPLE-EVAL-IN-LEXENV (PROGN (ASSERT (= 0 #)) (ASSERT (= 1 #)) (ASSERT (= 55 #))) #<NULL-LEXENV>)\n  6: (EVAL (PROGN (ASSERT (= 0 #)) (ASSERT (= 1 #)) (ASSERT (= 55 #))))\n  7: ((LAMBDA () :IN SWANK:INTERACTIVE-EVAL))\n --more--\n\n\u4eca\u5ea6\u306f\u3001\u5f53\u7136\u306a\u304c\u3089\u4e0b\u8acb\u3051\u306b\u4f7f\u3046fib-iter\u304c\u7121\u3044\u3068\u8a00\u308f\u308c\u3066\u3044\u307e\u3059\u3002\n(defun fib-iter (n a1 a2)\n  (if (< n 2)\n      a1\n      (fib-iter (1- n) (+ a1 a2) a1)))\n\n\u3092\u5b9a\u7fa9\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3002\n0: [RETRY] \u3092\u9078\u629e\u3057\u307e\u3059\u3002\nThe assertion (= 0 (FIB 0)) failed.\n   [Condition of type SIMPLE-ERROR]\n\n\uff1c( ^o^)\uff1e\n\u3000\u4e09) )\u4e09\n\uff1c\uffe3\uffe3\uff1e\n\nRestarts:\n 0: [CONTINUE] Retry assertion.\n 1: [RETRY] Retry SLIME interactive evaluation request.\n 2: [*ABORT] Return to SLIME's top level.\n 3: [ABORT] Abort thread (#<THREAD \"worker\" RUNNING {101E84E383}>)\n\nBacktrace:\n  0: (SB-KERNEL:ASSERT-ERROR (= 0 (FIB 0)) NIL NIL)\n  1: ((LAMBDA ()))\n  2: (SB-INT:SIMPLE-EVAL-IN-LEXENV (ASSERT (= 0 (FIB 0))) #<NULL-LEXENV>)\n  3: (SB-IMPL::SIMPLE-EVAL-PROGN-BODY ((ASSERT (= 0 #)) (ASSERT (= 1 #)) (ASSERT (= 55 #))) #<NULL-LEXENV>)\n  4: (SB-INT:SIMPLE-EVAL-IN-LEXENV (PROGN (ASSERT (= 0 #)) (ASSERT (= 1 #)) (ASSERT (= 55 #))) #<NULL-LEXENV>)\n  5: (EVAL (PROGN (ASSERT (= 0 #)) (ASSERT (= 1 #)) (ASSERT (= 55 #))))\n  6: ((LAMBDA () :IN SWANK:INTERACTIVE-EVAL))\n --more--\n\n\u4eca\u5ea6\u306f\u3001(fib 0)\u306e\u5024\u304c\u5ba3\u8a00\u3068\u9055\u3046\u3068\u8a00\u308f\u308c\u3066\u3044\u307e\u3059\u3002\n\u5b9f\u88c5\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u306e\u3067\u76f4\u3057\u307e\u3059\u3002\n(defun fib-iter (n a1 a2)\n  (cond ((= 0 n) 0)\n        ((= 1 n) 1)\n        (T (fib-iter (1- n) (+ a1 a2) a1))))\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066 [c]ontinue\u3067\u30ea\u30b9\u30bf\u30fc\u30c8\nThe assertion (= 55 (FIB 10)) failed.\n   [Condition of type SIMPLE-ERROR]\n\n\u3078(^o^)\u3078\n\u3000 \u3000|\u3078\n\u3000\u3000/\n\nRestarts:\n 0: [CONTINUE] Retry assertion.\n 1: [RETRY] Retry SLIME interactive evaluation request.\n 2: [*ABORT] Return to SLIME's top level.\n 3: [ABORT] Abort thread (#<THREAD \"worker\" RUNNING {101E84E383}>)\n\nBacktrace:\n  0: (SB-KERNEL:ASSERT-ERROR (= 55 (FIB 10)) NIL NIL)\n  1: ((LAMBDA ()))\n  2: (SB-INT:SIMPLE-EVAL-IN-LEXENV (ASSERT (= 55 (FIB 10))) #<NULL-LEXENV>)\n  3: (SB-INT:SIMPLE-EVAL-IN-LEXENV (PROGN (ASSERT (= 0 #)) (ASSERT (= 1 #)) (ASSERT (= 55 #))) #<NULL-LEXENV>)\n  4: (EVAL (PROGN (ASSERT (= 0 #)) (ASSERT (= 1 #)) (ASSERT (= 55 #))))\n  5: ((LAMBDA () :IN SWANK:INTERACTIVE-EVAL))\n --more--\n\n\u3042\u3001\u9055\u3046\u308f\u3001a1\u3092\u8fd4\u3055\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3093\u3060\u308f\u2026\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u518d\u5b9a\u7fa9\u3057\u3066\n(defun fib-iter (n a1 a2)\n  (cond ((= 0 n) a2)\n        ((= 1 n) a1)\n        (T (fib-iter (1- n) (+ a1 a2) a1))))\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066 [c]ontinue\u3067\u30ea\u30b9\u30bf\u30fc\u30c8\nassert\u304b\u3089\u629c\u3051\u305f\u3088\u3046\u3067\u3059\u3002\u7121\u4e8bfib\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\u3061\u306a\u307f\u306b\u3001[q]uit\u3067\u30c7\u30d0\u30c3\u30ac\u304b\u3089\u629c\u3051\u308b\u3068\nCL-USER> \n\uff3f\u4eba\u4eba\u4eba\u4eba\uff3f\n\uff1e\u7a81\u7136\u306e\u6b7b\uff1c\n\uffe3Y^Y^Y^Y\n\n\u3068REPL\u306b\u51fa\u529b\u3057\u3001\u51e6\u7406\u7cfb\u304c\u843d\u3061\u307e\u3059\u3002\n\nslime-sdd.el\nslime\u306e\u6a19\u6e96\u95a2\u6570\u3092\u4e0a\u66f8\u304d\u3057\u307e\u3059\u3002\n(defun slime-repl-sudden-death ()\n  (slime-repl-write-string\n   \"\n\uff3f\u4eba\u4eba\u4eba\u4eba\uff3f\n\uff1e\u7a81\u7136\u306e\u6b7b\uff1c\n\uffe3Y^Y^Y^Y\uffe3\"))\n\n\n(defun sldb-heiki ()\n  (nth (random 3)\n       '(\"\u3078(^o^)\u3078\n\u3000 \u3000|\u3078\n\u3000\u3000/\"\n\n         \"\uff3c(^o^ )\u3078\n\u3000 \uff3c|\n\u3000\u3000\u3000\uff1e\"\n\n\n         \"\uff1c( ^o^)\uff1e\n\u3000\u4e09) )\u4e09\n\uff1c\uffe3\uffe3\uff1e\")))\n\n\n(defun sldb-quit ()\n  \"Quit to toplevel.\"\n  (interactive)\n  (assert sldb-restarts () \"sldb-quit called outside of sldb buffer\")\n  (slime-rex () ('(swank:throw-to-toplevel))\n    ((:ok x) (error \"sldb-quit returned [%s]\" x))\n    ((:abort _) \n     (slime-repl-sudden-death)\n     (slime-quit-lisp)\n     )))\n\n\n(defun sldb-setup (thread level condition restarts frames conts)\n  \"Setup a new SLDB buffer.\nCONDITION is a string describing the condition to debug.\nRESTARTS is a list of strings (NAME DESCRIPTION) for each available restart.\nFRAMES is a list (NUMBER DESCRIPTION &optional PLIST) describing the initial\nportion of the backtrace. Frames are numbered from 0.\nCONTS is a list of pending Emacs continuations.\"\n  (with-current-buffer (sldb-get-buffer thread)\n    (unless (equal sldb-level level)\n      (setq buffer-read-only nil)\n      (slime-save-local-variables (slime-popup-restore-data)\n        (sldb-mode))\n      (setq slime-current-thread thread)\n      (setq sldb-level level)\n      (setq mode-name (format \"sldb[%d]\" sldb-level))\n      (setq sldb-condition condition)\n      (setq sldb-restarts restarts)\n      (setq sldb-continuations conts)\n      (sldb-insert-condition condition)\n      (insert \"\\n\\n\" \n              (sldb-heiki)\n              \"\\n\\n\"\n              (in-sldb-face section \"Restarts:\") \"\\n\")\n      (setq sldb-restart-list-start-marker (point-marker))\n      (sldb-insert-restarts restarts 0 sldb-initial-restart-limit)\n      (insert \"\\n\" (in-sldb-face section \"Backtrace:\") \"\\n\")\n      (setq sldb-backtrace-start-marker (point-marker))\n      (save-excursion\n        (if frames \n            (sldb-insert-frames (sldb-prune-initial-frames frames) t)\n          (insert \"[No backtrace]\")))\n      (run-hooks 'sldb-hook)\n      (set-syntax-table lisp-mode-syntax-table))\n    (slime-display-popup-buffer t)\n    (sldb-recenter-region (point-min) (point))\n    (setq buffer-read-only t)\n    (when (and slime-stack-eval-tags\n               ;; (y-or-n-p \"Enter recursive edit? \")\n               )\n      (message \"Entering recursive edit..\")\n      (recursive-edit))))\n\nTDD(\u30c6\u30b9\u30c8\u99c6\u52d5\u958b\u767a)\u304c\u63d0\u5531\u3055\u308c\u3066\u4e45\u3057\u3044\u3067\u3059\u304c\u3001\u30c6\u30b9\u30c8\u30d5\u30a1\u30fc\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u306e\u306f\u3001\u306a\u304b\u306a\u304b\u96e3\u3057\u3044\u3082\u306e\u3067\u3059\u3002\n\n\u30c6\u30b9\u30c8\u30d5\u30a1\u30fc\u30b9\u30c8\u3067\u306f\u3001\u6700\u521d\u306b\u30c6\u30b9\u30c8\u3092\u66f8\u304d\u3001\u30c6\u30b9\u30c8\u304c\u5931\u6557\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3001\u5b9f\u88c5\u2192\u30c6\u30b9\u30c8\u3068\u3044\u3046\u30b5\u30a4\u30af\u30eb\u3092\u56de\u3057\u307e\u3059\u304c\u3001\u9762\u5012\u81ed\u304f\u306a\u3063\u3066\u9014\u4e2d\u3067\u6b62\u3081\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\u7a81\u7136\u6b7b\u958b\u767a\u3067\u306f\u3001\n\uff3f\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\uff3f\n\uff1e\u9762\u5012\u81ed\u304f\u306a\u3063\u3066\u9014\u4e2d\u3067\u6b62\u3081\u308b \uff1d\u3000\u6b7b\uff1c\n\uffe3Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y\uffe3\n\u3068\u3044\u3046\u7cbe\u795e\u3067\u958b\u767a\u306b\u81e8\u3080\u3053\u3068\u3067\u751f\u5b58\u672c\u80fd\u306b\u8a34\u3048\u30af\u30aa\u30ea\u30c6\u30a3\u306e\u9ad8\u3044\u30b3\u30fc\u30c9\u306e\u5b9f\u73fe\u3092\u76ee\u6307\u3057\u307e\u3059\u3002\n\n# SLIME\u3092\u4f7f\u3063\u305f\u958b\u767a\u306e\u4f8b\n\n\u307e\u305a\u3001TDD\u3067\u306e\u30c6\u30b9\u30c8\u30d5\u30a1\u30fc\u30b9\u30c8\u306e\u3088\u3046\u306b\u3001\u95a2\u6570\u306e\u5b9a\u7fa9\u306e\u524d\u306b\u30a2\u30b5\u30fc\u30c8\u3092\u66f8\u304d\u307e\u3059\u3002\n\u3053\u308c\u3092\u66f8\u3044\u3066\u5b9f\u884c\u3057\u305f\u3089\u3001\u6210\u529f\u3059\u308b\u304b \u51e6\u7406\u7cfb\u304c\u843d\u3061\u308b \uff1d \u6b7b \u304b\u306e\u4e00\u767a\u52dd\u8ca0\u306b\u306a\u308a\u307e\u3059\u306e\u3067\u3001\u6c17\u5408\u3044\u3092\u5165\u308c\u3066\u66f8\u304d\u307e\u3057\u3087\u3046\u3002\n\n```cl\n(progn\n  (assert (= 0 (fib 0)))\n  (assert (= 1 (fib 1)))\n  (assert (= 55 (fib 10))))\n```\n\u5b9f\u884c\u3057\u307e\u3059\n\n```\nThe function COMMON-LISP-USER::FIB is undefined.\n   [Condition of type UNDEFINED-FUNCTION]\n\n\u3078(^o^)\u3078\n\u3000 \u3000|\u3078\n\u3000\u3000/\n\nRestarts:\n 0: [RETRY] Retry SLIME interactive evaluation request.\n 1: [*ABORT] Return to SLIME's top level.\n 2: [ABORT] Abort thread (#<THREAD \"worker\" RUNNING {101E84E383}>)\n\nBacktrace:\n  0: (\"undefined function\")\n  1: ((LAMBDA ()))\n  2: (SB-INT:SIMPLE-EVAL-IN-LEXENV (ASSERT (= 0 (FIB 0))) #<NULL-LEXENV>)\n  3: (SB-IMPL::SIMPLE-EVAL-PROGN-BODY ((ASSERT (= 0 #)) (ASSERT (= 1 #)) (ASSERT (= 55 #))) #<NULL-LEXENV>)\n  4: (SB-INT:SIMPLE-EVAL-IN-LEXENV (PROGN (ASSERT (= 0 #)) (ASSERT (= 1 #)) (ASSERT (= 55 #))) #<NULL-LEXENV>)\n  5: (EVAL (PROGN (ASSERT (= 0 #)) (ASSERT (= 1 #)) (ASSERT (= 55 #))))\n  6: ((LAMBDA () :IN SWANK:INTERACTIVE-EVAL))\n --more--\n```\n\u30c7\u30d0\u30c3\u30ac\u304c\u8d77\u52d5\u3057\u307e\u3059\u3002\n\u5f53\u7136\u306a\u304c\u3089fib\u95a2\u6570\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u3068\u8a00\u308f\u308c\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u304a\u3082\u3080\u308d\u306b\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n\n```cl\n(defun fib (n)\n  (fib-iter n 1 0))\n```\n\u3092\u5b9a\u7fa9\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3002\n0: [RETRY] \u3092\u9078\u629e\u3057\u307e\u3059\u3002\n\n```\nThe function COMMON-LISP-USER::FIB-ITER is undefined.\n   [Condition of type UNDEFINED-FUNCTION]\n\n\uff3c(^o^ )\u3078\n\u3000 \uff3c|\n\u3000\u3000\u3000\uff1e\n\nRestarts:\n 0: [RETRY] Retry SLIME interactive evaluation request.\n 1: [*ABORT] Return to SLIME's top level.\n 2: [ABORT] Abort thread (#<THREAD \"worker\" RUNNING {101E84E383}>)\n\nBacktrace:\n  0: (\"undefined function\")\n  1: (FIB 0)\n  2: ((LAMBDA ()))\n  3: (SB-INT:SIMPLE-EVAL-IN-LEXENV (ASSERT (= 0 (FIB 0))) #<NULL-LEXENV>)\n  4: (SB-IMPL::SIMPLE-EVAL-PROGN-BODY ((ASSERT (= 0 #)) (ASSERT (= 1 #)) (ASSERT (= 55 #))) #<NULL-LEXENV>)\n  5: (SB-INT:SIMPLE-EVAL-IN-LEXENV (PROGN (ASSERT (= 0 #)) (ASSERT (= 1 #)) (ASSERT (= 55 #))) #<NULL-LEXENV>)\n  6: (EVAL (PROGN (ASSERT (= 0 #)) (ASSERT (= 1 #)) (ASSERT (= 55 #))))\n  7: ((LAMBDA () :IN SWANK:INTERACTIVE-EVAL))\n --more--\n```\n\u4eca\u5ea6\u306f\u3001\u5f53\u7136\u306a\u304c\u3089\u4e0b\u8acb\u3051\u306b\u4f7f\u3046fib-iter\u304c\u7121\u3044\u3068\u8a00\u308f\u308c\u3066\u3044\u307e\u3059\u3002\n\n\n```cl\n(defun fib-iter (n a1 a2)\n  (if (< n 2)\n      a1\n      (fib-iter (1- n) (+ a1 a2) a1)))\n```\n\u3092\u5b9a\u7fa9\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3002\n0: [RETRY] \u3092\u9078\u629e\u3057\u307e\u3059\u3002\n\n```\nThe assertion (= 0 (FIB 0)) failed.\n   [Condition of type SIMPLE-ERROR]\n\n\uff1c( ^o^)\uff1e\n\u3000\u4e09) )\u4e09\n\uff1c\uffe3\uffe3\uff1e\n\nRestarts:\n 0: [CONTINUE] Retry assertion.\n 1: [RETRY] Retry SLIME interactive evaluation request.\n 2: [*ABORT] Return to SLIME's top level.\n 3: [ABORT] Abort thread (#<THREAD \"worker\" RUNNING {101E84E383}>)\n\nBacktrace:\n  0: (SB-KERNEL:ASSERT-ERROR (= 0 (FIB 0)) NIL NIL)\n  1: ((LAMBDA ()))\n  2: (SB-INT:SIMPLE-EVAL-IN-LEXENV (ASSERT (= 0 (FIB 0))) #<NULL-LEXENV>)\n  3: (SB-IMPL::SIMPLE-EVAL-PROGN-BODY ((ASSERT (= 0 #)) (ASSERT (= 1 #)) (ASSERT (= 55 #))) #<NULL-LEXENV>)\n  4: (SB-INT:SIMPLE-EVAL-IN-LEXENV (PROGN (ASSERT (= 0 #)) (ASSERT (= 1 #)) (ASSERT (= 55 #))) #<NULL-LEXENV>)\n  5: (EVAL (PROGN (ASSERT (= 0 #)) (ASSERT (= 1 #)) (ASSERT (= 55 #))))\n  6: ((LAMBDA () :IN SWANK:INTERACTIVE-EVAL))\n --more--\n```\n\u4eca\u5ea6\u306f\u3001(fib 0)\u306e\u5024\u304c\u5ba3\u8a00\u3068\u9055\u3046\u3068\u8a00\u308f\u308c\u3066\u3044\u307e\u3059\u3002\n\u5b9f\u88c5\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u306e\u3067\u76f4\u3057\u307e\u3059\u3002\n\n```cl\n(defun fib-iter (n a1 a2)\n  (cond ((= 0 n) 0)\n        ((= 1 n) 1)\n        (T (fib-iter (1- n) (+ a1 a2) a1))))\n```\n\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066 [c]ontinue\u3067\u30ea\u30b9\u30bf\u30fc\u30c8\n\n```\nThe assertion (= 55 (FIB 10)) failed.\n   [Condition of type SIMPLE-ERROR]\n\n\u3078(^o^)\u3078\n\u3000 \u3000|\u3078\n\u3000\u3000/\n\nRestarts:\n 0: [CONTINUE] Retry assertion.\n 1: [RETRY] Retry SLIME interactive evaluation request.\n 2: [*ABORT] Return to SLIME's top level.\n 3: [ABORT] Abort thread (#<THREAD \"worker\" RUNNING {101E84E383}>)\n\nBacktrace:\n  0: (SB-KERNEL:ASSERT-ERROR (= 55 (FIB 10)) NIL NIL)\n  1: ((LAMBDA ()))\n  2: (SB-INT:SIMPLE-EVAL-IN-LEXENV (ASSERT (= 55 (FIB 10))) #<NULL-LEXENV>)\n  3: (SB-INT:SIMPLE-EVAL-IN-LEXENV (PROGN (ASSERT (= 0 #)) (ASSERT (= 1 #)) (ASSERT (= 55 #))) #<NULL-LEXENV>)\n  4: (EVAL (PROGN (ASSERT (= 0 #)) (ASSERT (= 1 #)) (ASSERT (= 55 #))))\n  5: ((LAMBDA () :IN SWANK:INTERACTIVE-EVAL))\n --more--\n```\n\u3042\u3001\u9055\u3046\u308f\u3001a1\u3092\u8fd4\u3055\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3093\u3060\u308f\u2026\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u518d\u5b9a\u7fa9\u3057\u3066\n\n```cl\n(defun fib-iter (n a1 a2)\n  (cond ((= 0 n) a2)\n        ((= 1 n) a1)\n        (T (fib-iter (1- n) (+ a1 a2) a1))))\n```\n\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066 [c]ontinue\u3067\u30ea\u30b9\u30bf\u30fc\u30c8\nassert\u304b\u3089\u629c\u3051\u305f\u3088\u3046\u3067\u3059\u3002\u7121\u4e8bfib\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u3061\u306a\u307f\u306b\u3001[q]uit\u3067\u30c7\u30d0\u30c3\u30ac\u304b\u3089\u629c\u3051\u308b\u3068\n\n```\nCL-USER> \n\uff3f\u4eba\u4eba\u4eba\u4eba\uff3f\n\uff1e\u7a81\u7136\u306e\u6b7b\uff1c\n\uffe3Y^Y^Y^Y\n````\n\u3068REPL\u306b\u51fa\u529b\u3057\u3001\u51e6\u7406\u7cfb\u304c\u843d\u3061\u307e\u3059\u3002\n\n\n\n### slime-sdd.el\nslime\u306e\u6a19\u6e96\u95a2\u6570\u3092\u4e0a\u66f8\u304d\u3057\u307e\u3059\u3002\n\n```cl\n(defun slime-repl-sudden-death ()\n  (slime-repl-write-string\n   \"\n\uff3f\u4eba\u4eba\u4eba\u4eba\uff3f\n\uff1e\u7a81\u7136\u306e\u6b7b\uff1c\n\uffe3Y^Y^Y^Y\uffe3\"))\n\n\n(defun sldb-heiki ()\n  (nth (random 3)\n       '(\"\u3078(^o^)\u3078\n\u3000 \u3000|\u3078\n\u3000\u3000/\"\n         \n         \"\uff3c(^o^ )\u3078\n\u3000 \uff3c|\n\u3000\u3000\u3000\uff1e\"\n         \n         \n         \"\uff1c( ^o^)\uff1e\n\u3000\u4e09) )\u4e09\n\uff1c\uffe3\uffe3\uff1e\")))\n\n\n(defun sldb-quit ()\n  \"Quit to toplevel.\"\n  (interactive)\n  (assert sldb-restarts () \"sldb-quit called outside of sldb buffer\")\n  (slime-rex () ('(swank:throw-to-toplevel))\n    ((:ok x) (error \"sldb-quit returned [%s]\" x))\n    ((:abort _) \n     (slime-repl-sudden-death)\n     (slime-quit-lisp)\n     )))\n\n\n(defun sldb-setup (thread level condition restarts frames conts)\n  \"Setup a new SLDB buffer.\nCONDITION is a string describing the condition to debug.\nRESTARTS is a list of strings (NAME DESCRIPTION) for each available restart.\nFRAMES is a list (NUMBER DESCRIPTION &optional PLIST) describing the initial\nportion of the backtrace. Frames are numbered from 0.\nCONTS is a list of pending Emacs continuations.\"\n  (with-current-buffer (sldb-get-buffer thread)\n    (unless (equal sldb-level level)\n      (setq buffer-read-only nil)\n      (slime-save-local-variables (slime-popup-restore-data)\n        (sldb-mode))\n      (setq slime-current-thread thread)\n      (setq sldb-level level)\n      (setq mode-name (format \"sldb[%d]\" sldb-level))\n      (setq sldb-condition condition)\n      (setq sldb-restarts restarts)\n      (setq sldb-continuations conts)\n      (sldb-insert-condition condition)\n      (insert \"\\n\\n\" \n              (sldb-heiki)\n              \"\\n\\n\"\n              (in-sldb-face section \"Restarts:\") \"\\n\")\n      (setq sldb-restart-list-start-marker (point-marker))\n      (sldb-insert-restarts restarts 0 sldb-initial-restart-limit)\n      (insert \"\\n\" (in-sldb-face section \"Backtrace:\") \"\\n\")\n      (setq sldb-backtrace-start-marker (point-marker))\n      (save-excursion\n        (if frames \n            (sldb-insert-frames (sldb-prune-initial-frames frames) t)\n          (insert \"[No backtrace]\")))\n      (run-hooks 'sldb-hook)\n      (set-syntax-table lisp-mode-syntax-table))\n    (slime-display-popup-buffer t)\n    (sldb-recenter-region (point-min) (point))\n    (setq buffer-read-only t)\n    (when (and slime-stack-eval-tags\n               ;; (y-or-n-p \"Enter recursive edit? \")\n               )\n      (message \"Entering recursive edit..\")\n      (recursive-edit))))\n```\n", "tags": ["slime", "common-lisp"]}