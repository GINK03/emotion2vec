{"context": " More than 1 year has passed since last update.systemd\u306b\u306fassert_return\u3068\u3044\u3046\u30de\u30af\u30ed\u304c\u3042\u308b\u3002assert\u306b\u5931\u6557\u3057\u305f\u3089\u3001\u6307\u5b9a\u30a8\u30e9\u30fc\u5024\u3067return\u3059\u308b\u3060\u3051\u306a\u306e\u3060\u304c\u3001\u3053\u3046\u3044\u3046\u306e\u304c\u3042\u308b\u3068\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30b9\u30bf\u30a4\u30eb\u304c\u7d71\u4e00\u3055\u308c\u3066\u826f\u3044\u3068\u601d\u3046\u3002\n\u4f7f\u3044\u65b9\u306f\u3053\u3093\u306a\u611f\u3058\uff1a\n\nsrc/journal/journal-send.c\n_public_ int sd_journal_printv(int priority, const char *format, va_list ap) {\n\n        /* FIXME: Instead of limiting things to LINE_MAX we could do a\n           C99 variable-length array on the stack here in a loop. */\n\n        char buffer[8 + LINE_MAX], p[11]; struct iovec iov[2];\n\n        assert_return(priority >= 0, -EINVAL);\n        assert_return(priority <= 7, -EINVAL);\n        assert_return(format, -EINVAL);\n\n\n\nCODING_STYLE\u306b\u66f8\u3044\u3066\u3042\u308b\u304c\u3001\u516c\u958bAPI\u3067\u306f\u5f15\u6570\u30c1\u30a7\u30c3\u30af\u304c\u7fa9\u52d9\u4ed8\u3051\u3089\u308c\u3066\u3044\u3066\u3001assert_return\u306f\u305d\u306e\u9053\u5177\u306e\u4e00\u3064\u3089\u3057\u3044\u3002\n\u5b9a\u7fa9\u306f\u3053\u3093\u306a\u611f\u3058\uff1a\n\nsrc/shared/macro.h\n#define assert_return(expr, r)                                          \\\n        do {                                                            \\\n                if (_unlikely_(!(expr))) {                              \\\n                        log_assert_failed_return(#expr, __FILE__, __LINE__, __PRETTY_FUNCTION__); \\\n                        return (r);                                     \\\n                }                                                       \\\n        } while (false)\n\n\n_unlikely_\u306fLinux\u3067\u306f\u304a\u99b4\u67d3\u307f\u306e\u3042\u308c\u3002__PRETTY_FUNCTION__\u306f__FUNCTION__\u3088\u308a\u60c5\u5831\u91cf\u306e\u3042\u308b\u540d\u524d\u3092\u8fd4\u3057\u3066\u304f\u308c\u308b\u3089\u3057\u3044\u3002\n\u8a66\u3057\u306b\u4f7f\u3063\u3066\u307f\u308b\u3068\u3053\u3093\u306a\u611f\u3058\uff1a\n$ cat pretty_function.c\n#include <stdio.h>\n\nint main(void)\n{\n  printf(\"%s\\n\", __FUNCTION__);\n  printf(\"%s\\n\", __PRETTY_FUNCTION__);\n  return 0;\n}\n$ ./a.out              \nmain\nint main()\n\n6.45 Function Names as Strings \u3092\u8aad\u3080\u611f\u3058\u3060\u3068\u3001C++\u306e\u65b9\u3067\u529b\u3092\u767a\u63ee\u3057\u305d\u3046\u3067\u3059\u306d\u3002\nsystemd\u306b\u306f`assert_return`\u3068\u3044\u3046\u30de\u30af\u30ed\u304c\u3042\u308b\u3002assert\u306b\u5931\u6557\u3057\u305f\u3089\u3001\u6307\u5b9a\u30a8\u30e9\u30fc\u5024\u3067return\u3059\u308b\u3060\u3051\u306a\u306e\u3060\u304c\u3001\u3053\u3046\u3044\u3046\u306e\u304c\u3042\u308b\u3068\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30b9\u30bf\u30a4\u30eb\u304c\u7d71\u4e00\u3055\u308c\u3066\u826f\u3044\u3068\u601d\u3046\u3002\n\n\u4f7f\u3044\u65b9\u306f\u3053\u3093\u306a\u611f\u3058\uff1a\n\n```c:src/journal/journal-send.c\n_public_ int sd_journal_printv(int priority, const char *format, va_list ap) {\n\n        /* FIXME: Instead of limiting things to LINE_MAX we could do a\n           C99 variable-length array on the stack here in a loop. */\n\n        char buffer[8 + LINE_MAX], p[11]; struct iovec iov[2];\n\n        assert_return(priority >= 0, -EINVAL);\n        assert_return(priority <= 7, -EINVAL);\n        assert_return(format, -EINVAL);\n\n```\n\n`CODING_STYLE`\u306b\u66f8\u3044\u3066\u3042\u308b\u304c\u3001\u516c\u958bAPI\u3067\u306f\u5f15\u6570\u30c1\u30a7\u30c3\u30af\u304c\u7fa9\u52d9\u4ed8\u3051\u3089\u308c\u3066\u3044\u3066\u3001`assert_return`\u306f\u305d\u306e\u9053\u5177\u306e\u4e00\u3064\u3089\u3057\u3044\u3002\n\n\u5b9a\u7fa9\u306f\u3053\u3093\u306a\u611f\u3058\uff1a\n\n```c:src/shared/macro.h\n#define assert_return(expr, r)                                          \\\n        do {                                                            \\\n                if (_unlikely_(!(expr))) {                              \\\n                        log_assert_failed_return(#expr, __FILE__, __LINE__, __PRETTY_FUNCTION__); \\\n                        return (r);                                     \\\n                }                                                       \\\n        } while (false)\n```\n\n`_unlikely_`\u306fLinux\u3067\u306f\u304a\u99b4\u67d3\u307f\u306e\u3042\u308c\u3002`__PRETTY_FUNCTION__`\u306f`__FUNCTION__`\u3088\u308a\u60c5\u5831\u91cf\u306e\u3042\u308b\u540d\u524d\u3092\u8fd4\u3057\u3066\u304f\u308c\u308b\u3089\u3057\u3044\u3002\n\n\u8a66\u3057\u306b\u4f7f\u3063\u3066\u307f\u308b\u3068\u3053\u3093\u306a\u611f\u3058\uff1a\n\n```shell-session\n$ cat pretty_function.c\n#include <stdio.h>\n\nint main(void)\n{\n  printf(\"%s\\n\", __FUNCTION__);\n  printf(\"%s\\n\", __PRETTY_FUNCTION__);\n  return 0;\n}\n$ ./a.out              \nmain\nint main()\n```\n\n[6.45 Function Names as Strings](https://gcc.gnu.org/onlinedocs/gcc/Function-Names.html) \u3092\u8aad\u3080\u611f\u3058\u3060\u3068\u3001C++\u306e\u65b9\u3067\u529b\u3092\u767a\u63ee\u3057\u305d\u3046\u3067\u3059\u306d\u3002\n", "tags": ["systemd", "C"]}