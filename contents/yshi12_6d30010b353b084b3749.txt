{"context": "\n\n\u6c7a\u5b9a\u6728\u3068\u306f\n\u76ee\u7684\u5909\u6570\u306b\u5c5e\u3059\u308b\u78ba\u7387\u3092\u8907\u6570\u306e\u8aac\u660e\u5909\u6570\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u7b97\u51fa\u3059\u308b\u65b9\u6cd5\u3002\n\u30a4\u30e1\u30fc\u30b8\u306f\u4ee5\u4e0b\u3067\u3001Yes/No\u306a\u3069\u306e\u6761\u4ef6\u306b\u5c5e\u3059\u308b\u304b\u3069\u3046\u304b\u3067\u78ba\u7387\u3092\u7b97\u51fa\u3059\u308b\u3002\n\n\n\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3068\u306f\n\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306f\u3001\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u6cd5(\u8907\u6570\u306e\u5206\u985e\u5668\u3092\u96c6\u3081\u3066\u69cb\u6210\u3055\u308c\u308b\u5206\u985e\u5668)\u306e\u4e00\u3064\u3002\n\u6c7a\u5b9a\u6728\u3092\u8907\u6570\u96c6\u3081\u3066\u4f7f\u3046\u306e\u3067\u3001\u6728\u304c\u96c6\u307e\u3063\u3066\u30d5\u30a9\u30ec\u30b9\u30c8\uff08\u68ee\uff09\u3068\u3057\u3066\u4f7f\u3046\u3002\n\n\u3084\u3063\u3066\u307f\u308b(sklearn\u3067\u306e\u6c7a\u5b9a\u6728)\n\n\u30c7\u30fc\u30bf\u7528\u610f\n\u30e9\u30f3\u30c0\u30e0\u306b\u4f5c\u3063\u305f\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3059\u308b\u3002\n\nget_dummy_dataset.py\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn\n%matplotlib inline\n\nfrom sklearn.datasets import make_blobs # \u30c0\u30df\u30fc\u30c7\u30fc\u30bf\u306e\u751f\u6210\u7528\nX, y = make_blobs(n_samples=500, centers=4, random_state=8, cluster_std=2.4)\n# n_samples:\u30b5\u30f3\u30d7\u30eb\u6570 centers:\u4e2d\u5fc3\u70b9\u306e\u6570 random_state:seed\u5024 cluster_std: \u3070\u3089\u3064\u304d\u5ea6\u5408\u3044\n\n\n\u30c7\u30fc\u30bf\u306e\u6982\u8981\n\ndisplay_dummy_dataset.py\nplt.figure(figsize =(10,10))\nplt.scatter(X[:, 0], X[:, 1], c=y, s=50, cmap='jet')\n\n\n\n4\u3064\u306e\u4e2d\u5fc3\u70b9\u304b\u3089\u767a\u751f\u3055\u308c\u305f500\u500b\u306e\u30c7\u30fc\u30bf\u306e\u5206\u5e03\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\n\u6c7a\u5b9a\u6728\u3092\u3084\u3063\u3066\u307f\u308b\nvisualize_tree\u306e\u30b3\u30fc\u30c9\u306f\u4e00\u756a\u4e0b\u306b\u66f8\u3044\u3066\u304a\u304d\u307e\u3059\u3002\n\ndo_decision_tree.py\nfrom sklearn.tree import DecisionTreeClassifier             # \u6c7a\u5b9a\u6728\u7528\nclf = DecisionTreeClassifier(max_depth=2, random_state = 0) # \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4f5c\u6210 max_depth:\u6728\u306e\u6df1\u3055\nvisualize_tree(clf, X, y)    # \u63cf\u753b\u5b9f\u884c\n\n\n\n\u76f4\u7dda\u3092\u4f7f\u3063\u3066\u30014\u3064\u306b\u5206\u985e\u3067\u304d\u3066\u3044\u308b\u69d8\u5b50\u304c\u308f\u304b\u308b\u3002\n\u6c7a\u5b9a\u6728\u306e\u6df1\u3055(max_depth)\u306e\u6570\u3067\u3001\u7cbe\u5ea6\u304c\u5909\u308f\u308b\u306e\u3067\u3001max_depth\u30924\u306b\u3057\u3066\u3084\u3063\u3066\u307f\u308b\u3068\u3001\u4ee5\u4e0b\u306b\u306a\u3063\u305f\u3002\n\n\u6df1\u30552\u3088\u308a\u3001\u7d30\u304b\u3044\u5206\u985e\u3092\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u69d8\u5b50\u304c\u898b\u3066\u53d6\u308c\u308b\u3002\n\u3057\u304b\u3057\u3001\u6df1\u3055\u3092\u591a\u304f\u3059\u308c\u3070\u3059\u308b\u307b\u3069\u3001\u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u7cbe\u5ea6\u304c\u9ad8\u304f\u306a\u308b\u304c\u3001\u904e\u5b66\u7fd2\u3057\u3084\u3059\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u3002\n\u3053\u308c\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306b\u3001\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u3066\u307f\u308b\u3002\n\n\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3092\u3084\u3063\u3066\u307f\u308b\n\ndo_random_forest.py\nfrom sklearn.ensemble import RandomForestClassifier # \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u7528\nclf = RandomForestClassifier(n_estimators=100, random_state=0) # \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4f5c\u6210\u3000n_estimators:\u4f5c\u308b\u6c7a\u5b9a\u6728\u306e\u6570\u306e\u6307\u5b9a\nvisualize_tree(clf, X, y, boundaries=False)\n\n\n\n\u5206\u985e\u304c\u5358\u7d14\u306a\u76f4\u7dda\u3067\u306f\u306a\u304f\u3001\u6c7a\u5b9a\u67281\u500b\u3088\u308a\u306f\u7cbe\u5ea6\u304c\u305f\u304b\u305d\u3046\u306a\u69d8\u5b50\u304c\u308f\u304b\u308b\u3002\n\u3061\u306a\u307f\u306b\u3001\u3053\u308c\u3092\u3084\u308c\u3070\u5fc5\u305a\u904e\u5b66\u7fd2\u304c\u9632\u3052\u308b\u308f\u3051\u3067\u306f\u306a\u304f\u3001\u4f8b\u3048\u3070\u4e0a\u306e\u56f3\u306e\u53f3\u4e0b\u306e\u8d64\u4e38\u306f\u5916\u308c\u5024\u7684\u306a\u6c17\u304c\u3059\u308b\u3051\u3069\u3001\u3053\u308c\u3092\u8d64\u3068\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u3066\u3044\u308b\u3002\n\u7d50\u679c\u3092\u53ef\u8996\u5316\u3059\u308b\u95a2\u6570\u3002\n\nvisualize_tree.py\n# \u6c7a\u5b9a\u6728\u3092\u63cf\u753b\u3057\u3066\u307f\u308b\ndef visualize_tree(classifier, X, y, boundaries=True,xlim=None, ylim=None):\n    \"\"\"\u6c7a\u5b9a\u6728\u306e\u53ef\u8996\u5316\u95a2\u6570\u3002\n    INPUTS: \u5206\u985e\u30e2\u30c7\u30eb, X, y, optional x/y limits.\n    OUTPUTS: Meshgrid\u3092\u4f7f\u3063\u305f\u6c7a\u5b9a\u6728\u306e\u53ef\u8996\u5316\n    \"\"\"\n    # fit\u3092\u4f7f\u3063\u305f\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9\n    classifier.fit(X, y)\n\n    # \u8ef8\u3092\u81ea\u52d5\u8abf\u6574\n    if xlim is None:\n        xlim = (X[:, 0].min() - 0.1, X[:, 0].max() + 0.1)\n    if ylim is None:\n        ylim = (X[:, 1].min() - 0.1, X[:, 1].max() + 0.1)\n\n    x_min, x_max = xlim\n    y_min, y_max = ylim\n\n\n    # meshgrid\u3092\u3064\u304f\u308b\u3002\n    xx, yy = np.meshgrid(np.linspace(x_min, x_max, 100),np.linspace(y_min, y_max, 100))\n\n    # \u5206\u985e\u5668\u306e\u4e88\u6e2c\u3092\u5b9f\u884c\n    Z = classifier.predict(np.c_[xx.ravel(), yy.ravel()])\n\n    # meshgrid\u3092\u4f7f\u3063\u3066\u6574\u5f62\u3002\n    Z = Z.reshape(xx.shape)\n\n    # \u5206\u985e\u3054\u3068\u306b\u8272\u4ed8\u3051\u3002\n    plt.figure(figsize=(10,10))\n    plt.pcolormesh(xx, yy, Z, alpha=0.2, cmap='jet')\n\n    # \u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u63cf\u753b\u3002\n    plt.scatter(X[:, 0], X[:, 1], c=y, s=50, cmap='jet')\n\n    plt.xlim(x_min, x_max)\n    plt.ylim(y_min, y_max)        \n\n    def plot_boundaries(i, xlim, ylim):\n        '''\n        \u5883\u754c\u7dda\u3092\u63cf\u304d\u8fbc\u307f\u307e\u3059\u3002\n        '''\n        if i < 0:\n            return\n\n        tree = classifier.tree_\n\n        # \u5883\u754c\u3092\u63cf\u753b\u3059\u308b\u305f\u3081\u306b\u3001\u518d\u5e30\u7684\u306b\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n        if tree.feature[i] == 0:\n            plt.plot([tree.threshold[i], tree.threshold[i]], ylim, '-k')\n            plot_boundaries(tree.children_left[i], [xlim[0], tree.threshold[i]], ylim)\n            plot_boundaries(tree.children_right[i], [tree.threshold[i], xlim[1]], ylim)\n\n        elif tree.feature[i] == 1:\n            plt.plot(xlim, [tree.threshold[i], tree.threshold[i]], '-k')\n            plot_boundaries(tree.children_left[i], xlim,\n                            [ylim[0], tree.threshold[i]])\n            plot_boundaries(tree.children_right[i], xlim,\n                            [tree.threshold[i], ylim[1]])\n\n    if boundaries:\n        plot_boundaries(0, plt.xlim(), plt.ylim())\n\n\n\n\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3067\u56de\u5e30\u3092\u3084\u3063\u3066\u307f\u308b\n\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306f\u56de\u5e30\u3082\u3067\u304d\u308b\u3002\nsin\u3092\u4f7f\u3063\u3066\u3001\u5927\u304d\u306a\u6ce2\u306e\u4e2d\u3067\u5c0f\u3055\u306a\u6ce2\u304c\u52d5\u3044\u3066\u308b\u3088\u3046\u306a\u30c7\u30fc\u30bf\u3092\u7528\u610f\n\nget_dummy_malti_sin_dataset.py\nfrom sklearn.ensemble import RandomForestRegressor\n\nx = 10 * np.random.rand(100)\n\ndef sin_model(x, sigma=0.2):\n    \"\"\"\u5927\u304d\u306a\u6ce2\uff0b\u5c0f\u3055\u306a\u6ce2\uff0b\u30ce\u30a4\u30ba\u304b\u3089\u306a\u308b\u30c0\u30df\u30fc\u30c7\u30fc\u30bf\u3002\"\"\"\n    noise = sigma * np.random.randn(len(x))\n\n    return np.sin(5 * x) + np.sin(0.5 * x) + noise\n\n# x\u304b\u3089y\u3092\u8a08\u7b97\ny = sin_model(x)\n\n# Plot\u3057\u3066\u307f\u308b\u3002\nplt.figure(figsize=(16,8))\nplt.errorbar(x, y, 0.1, fmt='o')\n\n\n\n\u6ce2\u3063\u307d\u3044\u30c0\u30df\u30fc\u30c7\u30fc\u30bf\u3002\u3061\u3087\u3063\u3068\u305a\u3064\u5c0f\u3055\u304f\u306a\u3063\u3066\u304f\u3002\n\nsklearn\u3067\u5b9f\u884c\n\ndo_random_forest_regression.py\nfrom sklearn.ensemble import RandomForestRegressor # \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u56de\u5e30\u7528\n\n# \u78ba\u8a8d\u7528\u306b0\u301c10\u306e1000\u500b\u306e\u30c7\u30fc\u30bf\u3092\u7528\u610f\nxfit = np.linspace(0, 10, 1000)       #0\u301c10\u307e\u30671000\u500b\n\n# \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u5b9f\u884c\nrfr = RandomForestRegressor(100)  # \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u751f\u6210\u3000\u6728\u306e\u6570\u3092100\u500b\u306b\u6307\u5b9a\nrfr.fit(x[:, None], y)            # \u5b66\u7fd2\u5b9f\u884c\nyfit = rfr.predict(xfit[:, None]) # \u4e88\u6e2c\u5b9f\u884c\n\n# \u7d50\u679c\u6bd4\u8f03\u7528\u306b\u5b9f\u969b\u306e\u5024\u3092\u53d6\u5f97\u3002\nytrue = sin_model(xfit,0) # xfit\u3092\u6ce2\u767a\u751f\u95a2\u6570\u306b\u98df\u308f\u305b\u3066\u3001\u305d\u306e\u7d50\u679c\u3092\u53d6\u5f97\n\n# \u7d50\u679c\u78ba\u8a8d\nplt.figure(figsize = (16,8))\nplt.errorbar(x, y, 0.1, fmt='o')\nplt.plot(xfit, yfit, '-r')                # \u4e88\u6e2c\u5024\u306eplot\nplt.plot(xfit, ytrue, '-k', alpha = 0.5)  # \u6b63\u89e3\u5024\u306eplot\n\n\n\n\u8d64\u7dda\u304c\u4e88\u6e2c\u306e\u56de\u5e30\u7dda\u3067\u3001\u305d\u3053\u305d\u3053\u826f\u3055\u305d\u3046\u306a\u7d50\u679c\u306b\u306a\u3063\u3066\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3002\n## \u6c7a\u5b9a\u6728\u3068\u306f\n\u76ee\u7684\u5909\u6570\u306b\u5c5e\u3059\u308b\u78ba\u7387\u3092\u8907\u6570\u306e\u8aac\u660e\u5909\u6570\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u7b97\u51fa\u3059\u308b\u65b9\u6cd5\u3002\n\u30a4\u30e1\u30fc\u30b8\u306f\u4ee5\u4e0b\u3067\u3001Yes/No\u306a\u3069\u306e\u6761\u4ef6\u306b\u5c5e\u3059\u308b\u304b\u3069\u3046\u304b\u3067\u78ba\u7387\u3092\u7b97\u51fa\u3059\u308b\u3002\n\n<img width=\"494\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-05-05 16.43.44.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/40159/5540a1b3-0f3c-82e4-f615-b8ae182044df.png\">\n\n\n## \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3068\u306f\n\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306f\u3001\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u6cd5(\u8907\u6570\u306e\u5206\u985e\u5668\u3092\u96c6\u3081\u3066\u69cb\u6210\u3055\u308c\u308b\u5206\u985e\u5668)\u306e\u4e00\u3064\u3002\n\u6c7a\u5b9a\u6728\u3092\u8907\u6570\u96c6\u3081\u3066\u4f7f\u3046\u306e\u3067\u3001\u6728\u304c\u96c6\u307e\u3063\u3066\u30d5\u30a9\u30ec\u30b9\u30c8\uff08\u68ee\uff09\u3068\u3057\u3066\u4f7f\u3046\u3002\n\n## \u3084\u3063\u3066\u307f\u308b(sklearn\u3067\u306e\u6c7a\u5b9a\u6728)\n### \u30c7\u30fc\b\u30bf\u7528\u610f\n\u30e9\u30f3\u30c0\u30e0\u306b\u4f5c\u3063\u305f\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3059\u308b\u3002\n\n```{get_dummy_dataset.py}\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn\n%matplotlib inline\n\nfrom sklearn.datasets import make_blobs # \u30c0\u30df\u30fc\u30c7\u30fc\u30bf\u306e\u751f\u6210\u7528\nX, y = make_blobs(n_samples=500, centers=4, random_state=8, cluster_std=2.4)\n# n_samples:\u30b5\u30f3\u30d7\u30eb\u6570 centers:\u4e2d\u5fc3\u70b9\u306e\u6570 random_state:seed\u5024 cluster_std: \u3070\u3089\u3064\u304d\u5ea6\u5408\u3044\n```\n\n\u30c7\u30fc\u30bf\u306e\u6982\u8981\n\n```{display_dummy_dataset.py}\nplt.figure(figsize =(10,10))\nplt.scatter(X[:, 0], X[:, 1], c=y, s=50, cmap='jet')\n```\n\n<img width=\"592\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-05-05 17.20.23.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/40159/6c4af7fe-e21c-bd8b-ae8e-928cd8d003de.png\">\n\n4\u3064\u306e\u4e2d\u5fc3\u70b9\u304b\u3089\u767a\u751f\u3055\u308c\u305f500\u500b\u306e\u30c7\u30fc\u30bf\u306e\u5206\u5e03\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\n### \u6c7a\u5b9a\u6728\u3092\u3084\u3063\u3066\u307f\u308b\nvisualize_tree\u306e\u30b3\u30fc\u30c9\u306f\u4e00\u756a\u4e0b\u306b\u66f8\u3044\u3066\u304a\u304d\u307e\u3059\u3002\n\n```{do_decision_tree.py}\nfrom sklearn.tree import DecisionTreeClassifier             # \u6c7a\u5b9a\u6728\u7528\nclf = DecisionTreeClassifier(max_depth=2, random_state = 0) # \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4f5c\u6210 max_depth:\u6728\u306e\u6df1\u3055\nvisualize_tree(clf, X, y)    # \u63cf\u753b\u5b9f\u884c\n```\n\n<img width=\"588\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-05-05 17.24.32.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/40159/c6258fe9-7656-5599-cd78-e08b522a2550.png\">\n\n\u76f4\u7dda\u3092\u4f7f\u3063\u3066\u30014\u3064\u306b\u5206\u985e\u3067\u304d\u3066\u3044\u308b\u69d8\u5b50\u304c\u308f\u304b\u308b\u3002\n\u6c7a\u5b9a\u6728\u306e\u6df1\u3055(max_depth)\u306e\u6570\u3067\u3001\u7cbe\u5ea6\u304c\u5909\u308f\u308b\u306e\u3067\u3001max_depth\u30924\u306b\u3057\u3066\u3084\u3063\u3066\u307f\u308b\u3068\u3001\u4ee5\u4e0b\u306b\u306a\u3063\u305f\u3002\n\n<img width=\"593\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-05-05 17.26.17.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/40159/a0c9478a-37e8-9990-ad1a-cc372d5f0653.png\">\n\n\u6df1\u30552\u3088\u308a\u3001\u7d30\u304b\u3044\u5206\u985e\u3092\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u69d8\u5b50\u304c\u898b\u3066\u53d6\u308c\u308b\u3002\n\n\u3057\u304b\u3057\u3001\u6df1\u3055\u3092\u591a\u304f\u3059\u308c\u3070\u3059\u308b\u307b\u3069\u3001\u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u7cbe\u5ea6\u304c\u9ad8\u304f\u306a\u308b\u304c\u3001\u904e\u5b66\u7fd2\u3057\u3084\u3059\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u3002\n\u3053\u308c\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306b\u3001\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u3066\u307f\u308b\u3002\n\n### \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3092\u3084\u3063\u3066\u307f\u308b\n```{do_random_forest.py}\nfrom sklearn.ensemble import RandomForestClassifier # \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u7528\nclf = RandomForestClassifier(n_estimators=100, random_state=0) # \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4f5c\u6210\u3000n_estimators:\u4f5c\u308b\u6c7a\u5b9a\u6728\u306e\u6570\u306e\u6307\u5b9a\nvisualize_tree(clf, X, y, boundaries=False)\n```\n\n<img width=\"581\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-05-05 17.30.03.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/40159/995d1322-cd16-ff6a-b0e6-7e12ad07c36d.png\">\n\n\u5206\u985e\u304c\u5358\u7d14\u306a\u76f4\u7dda\u3067\u306f\u306a\u304f\u3001\u6c7a\u5b9a\u67281\u500b\u3088\u308a\u306f\u7cbe\u5ea6\u304c\u305f\u304b\u305d\u3046\u306a\u69d8\u5b50\u304c\u308f\u304b\u308b\u3002\n\u3061\u306a\u307f\u306b\u3001\u3053\u308c\u3092\u3084\u308c\u3070\u5fc5\u305a\u904e\u5b66\u7fd2\u304c\u9632\u3052\u308b\u308f\u3051\u3067\u306f\u306a\u304f\u3001\u4f8b\u3048\u3070\u4e0a\u306e\u56f3\u306e\u53f3\u4e0b\u306e\u8d64\u4e38\u306f\u5916\u308c\u5024\u7684\u306a\u6c17\u304c\u3059\u308b\u3051\u3069\u3001\u3053\u308c\u3092\u8d64\u3068\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u3066\u3044\u308b\u3002\n\n\n\n\u7d50\u679c\u3092\u53ef\u8996\u5316\u3059\u308b\u95a2\u6570\u3002\n\n```{visualize_tree.py}\n# \u6c7a\u5b9a\u6728\u3092\u63cf\u753b\u3057\u3066\u307f\u308b\ndef visualize_tree(classifier, X, y, boundaries=True,xlim=None, ylim=None):\n    \"\"\"\u6c7a\u5b9a\u6728\u306e\u53ef\u8996\u5316\u95a2\u6570\u3002\n    INPUTS: \u5206\u985e\u30e2\u30c7\u30eb, X, y, optional x/y limits.\n    OUTPUTS: Meshgrid\u3092\u4f7f\u3063\u305f\u6c7a\u5b9a\u6728\u306e\u53ef\u8996\u5316\n    \"\"\"\n    # fit\u3092\u4f7f\u3063\u305f\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9\n    classifier.fit(X, y)\n    \n    # \u8ef8\u3092\u81ea\u52d5\u8abf\u6574\n    if xlim is None:\n        xlim = (X[:, 0].min() - 0.1, X[:, 0].max() + 0.1)\n    if ylim is None:\n        ylim = (X[:, 1].min() - 0.1, X[:, 1].max() + 0.1)\n\n    x_min, x_max = xlim\n    y_min, y_max = ylim\n    \n    \n    # meshgrid\u3092\u3064\u304f\u308b\u3002\n    xx, yy = np.meshgrid(np.linspace(x_min, x_max, 100),np.linspace(y_min, y_max, 100))\n    \n    # \u5206\u985e\u5668\u306e\u4e88\u6e2c\u3092\u5b9f\u884c\n    Z = classifier.predict(np.c_[xx.ravel(), yy.ravel()])\n\n    # meshgrid\u3092\u4f7f\u3063\u3066\u6574\u5f62\u3002\n    Z = Z.reshape(xx.shape)\n    \n    # \u5206\u985e\u3054\u3068\u306b\u8272\u4ed8\u3051\u3002\n    plt.figure(figsize=(10,10))\n    plt.pcolormesh(xx, yy, Z, alpha=0.2, cmap='jet')\n    \n    # \u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u63cf\u753b\u3002\n    plt.scatter(X[:, 0], X[:, 1], c=y, s=50, cmap='jet')\n    \n    plt.xlim(x_min, x_max)\n    plt.ylim(y_min, y_max)        \n    \n    def plot_boundaries(i, xlim, ylim):\n        '''\n        \u5883\u754c\u7dda\u3092\u63cf\u304d\u8fbc\u307f\u307e\u3059\u3002\n        '''\n        if i < 0:\n            return\n\n        tree = classifier.tree_\n        \n        # \u5883\u754c\u3092\u63cf\u753b\u3059\u308b\u305f\u3081\u306b\u3001\u518d\u5e30\u7684\u306b\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n        if tree.feature[i] == 0:\n            plt.plot([tree.threshold[i], tree.threshold[i]], ylim, '-k')\n            plot_boundaries(tree.children_left[i], [xlim[0], tree.threshold[i]], ylim)\n            plot_boundaries(tree.children_right[i], [tree.threshold[i], xlim[1]], ylim)\n        \n        elif tree.feature[i] == 1:\n            plt.plot(xlim, [tree.threshold[i], tree.threshold[i]], '-k')\n            plot_boundaries(tree.children_left[i], xlim,\n                            [ylim[0], tree.threshold[i]])\n            plot_boundaries(tree.children_right[i], xlim,\n                            [tree.threshold[i], ylim[1]])\n    \n    if boundaries:\n        plot_boundaries(0, plt.xlim(), plt.ylim())\n```\n\n## \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3067\u56de\u5e30\u3092\u3084\u3063\u3066\u307f\u308b\n\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306f\u56de\u5e30\u3082\u3067\u304d\u308b\u3002\n\nsin\u3092\u4f7f\u3063\u3066\u3001\u5927\u304d\u306a\u6ce2\u306e\u4e2d\u3067\u5c0f\u3055\u306a\u6ce2\u304c\u52d5\u3044\u3066\u308b\u3088\u3046\u306a\u30c7\u30fc\u30bf\u3092\u7528\u610f\n\n```{get_dummy_malti_sin_dataset.py}\nfrom sklearn.ensemble import RandomForestRegressor\n\nx = 10 * np.random.rand(100)\n\ndef sin_model(x, sigma=0.2):\n    \"\"\"\u5927\u304d\u306a\u6ce2\uff0b\u5c0f\u3055\u306a\u6ce2\uff0b\u30ce\u30a4\u30ba\u304b\u3089\u306a\u308b\u30c0\u30df\u30fc\u30c7\u30fc\u30bf\u3002\"\"\"\n    noise = sigma * np.random.randn(len(x))\n\n    return np.sin(5 * x) + np.sin(0.5 * x) + noise\n\n# x\u304b\u3089y\u3092\u8a08\u7b97\ny = sin_model(x)\n\n# Plot\u3057\u3066\u307f\u308b\u3002\nplt.figure(figsize=(16,8))\nplt.errorbar(x, y, 0.1, fmt='o')\n```\n\n<img width=\"937\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-05-05 17.44.22.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/40159/c7f42e13-4ce2-55fb-75e4-18c80c3a245a.png\">\n\n\u6ce2\u3063\u307d\u3044\u30c0\u30df\u30fc\u30c7\u30fc\u30bf\u3002\u3061\u3087\u3063\u3068\u305a\u3064\u5c0f\u3055\u304f\u306a\u3063\u3066\u304f\u3002\n\n### sklearn\u3067\u5b9f\u884c\n```{do_random_forest_regression.py}\nfrom sklearn.ensemble import RandomForestRegressor # \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u56de\u5e30\u7528\n\n# \u78ba\u8a8d\u7528\u306b0\u301c10\u306e1000\u500b\u306e\u30c7\u30fc\u30bf\u3092\u7528\u610f\nxfit = np.linspace(0, 10, 1000)       #0\u301c10\u307e\u30671000\u500b\n\n# \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u5b9f\u884c\nrfr = RandomForestRegressor(100)  # \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u751f\u6210\u3000\u6728\u306e\u6570\u3092100\u500b\u306b\u6307\u5b9a\nrfr.fit(x[:, None], y)            # \u5b66\u7fd2\u5b9f\u884c\nyfit = rfr.predict(xfit[:, None]) # \u4e88\u6e2c\u5b9f\u884c\n\n# \u7d50\u679c\u6bd4\u8f03\u7528\u306b\u5b9f\u969b\u306e\u5024\u3092\u53d6\u5f97\u3002\nytrue = sin_model(xfit,0) # xfit\u3092\u6ce2\u767a\u751f\u95a2\u6570\u306b\u98df\u308f\u305b\u3066\u3001\u305d\u306e\u7d50\u679c\u3092\u53d6\u5f97\n\n# \u7d50\u679c\u78ba\u8a8d\nplt.figure(figsize = (16,8))\nplt.errorbar(x, y, 0.1, fmt='o')\nplt.plot(xfit, yfit, '-r')                # \u4e88\u6e2c\u5024\u306eplot\nplt.plot(xfit, ytrue, '-k', alpha = 0.5)  # \u6b63\u89e3\u5024\u306eplot\n```\n\n<img width=\"939\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-05-05 17.53.01.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/40159/e7294426-7997-a279-d1ad-eb7419856982.png\">\n\n\u8d64\u7dda\u304c\u4e88\u6e2c\u306e\u56de\u5e30\u7dda\u3067\u3001\u305d\u3053\u305d\u3053\u826f\u3055\u305d\u3046\u306a\u7d50\u679c\u306b\u306a\u3063\u3066\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3002\n", "tags": ["Python", "sklearn"]}