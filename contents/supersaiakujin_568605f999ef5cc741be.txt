{"context": "keras\u306fTheano/Tensorflow\u306ewrapper library\u3067\u3001keras\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001Theano/Tensorflow\u3067\u30d9\u30bf\u3067\u66f8\u304f\u3088\u308a\u3082\u5c11\u306a\u3044\u30b3\u30fc\u30c9\u91cf\u3067\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nkeras\u306b\u95a2\u3057\u3066\u306f\u3001\u3059\u3067\u306b\u8aac\u660e\u3057\u3066\u3044\u308b\u30da\u30fc\u30b8\u3082\u3042\u308b\u306e\u3067\u305d\u3061\u3089\u306b\u8b72\u308b\u3068\u3057\u3066\u3001keras\u304b\u3089Tensorboard\u3092\u4f7f\u3046\u65b9\u6cd5\u3092\u8abf\u3079\u305f\u306e\u3067\u7c21\u5358\u306b\u8aac\u660e\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nTensorboard\u7528\u306elog\u3092\u51fa\u529b\u3059\u308b\u3068\u304d\u306fCallback\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u767b\u9332\u3057\u305fCallback\u306f\u6c7a\u307e\u3063\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u547c\u3070\u308c\u307e\u3059\u3002Call\u3055\u308c\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u306f\u3001Callback\u306e\u7a2e\u985e\u306b\u3088\u308a\u7570\u306a\u308a\u307e\u3059\u304c\u3001Tensorboard\u7528\u306eCallback\u306f\u5b66\u7fd2\u306e\u76f4\u524d\u3068\u6bceepoch\u306e\u7d42\u4e86\u6642\u306bCall\u3055\u308c\u307e\u3059\u3002\n\u5b66\u7fd2\u306e\u76f4\u524d\u3067\u306f\u3001tf.merge_all_summaries\u3068tf.train.SummaryWriter\u304c\u547c\u3070\u308c\u307e\u3059\u3002\n\u6bceepoch\u306e\u7d42\u308f\u308a\u306b\u3001add_summary\u304c\u547c\u3070\u308c\u3066log\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\u307e\u305f\u3001\u6bceepoch\u3067\u306f\u591a\u3059\u304e\u308b\u3068\u3044\u3046\u3088\u3046\u306a\u5834\u5408\u306b\u306f\u3001callback\u3092\u547c\u3076\u983b\u5ea6\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\nTensorflow\u7528\u306eCallback\u306f\u3001keras.callbacks.TensorBoard\u3067\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u4f5c\u6210\u3057\u305fCallback\u306ffit\u306b\u6e21\u3057\u307e\u3059\u3002\nhistogram_freq\u306b\u306f\u3001Tensorboard\u306ehistogram\u7528\u30c7\u30fc\u30bf\u3092\u51fa\u529b\u3059\u308b\u983b\u5ea6\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\nhistogram_freq=1\u3060\u3068\u3001\u6bceepoch\u30c7\u30fc\u30bf\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\npython\n    tb_cb = keras.callbacks.TensorBoard(log_dir=log_filepath, histogram_freq=1)\n    cbks = [tb_cb]\n\n    history = model.fit(X_train, Y_train, batch_size=batch_size, nb_epoch = nb_epoch, verbose=1, callbacks=cbks, validation_data=(X_test, Y_test))\n\n\n\nDropout\u306e\u3088\u3046\u306bTraining\u3068Test\u3067\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u9020\u304c\u5909\u308f\u308b\u5834\u5408\u306f\u3001Model\u69cb\u7bc9\u524d\u306b\u4e0b\u8a18\u306e\u8a18\u8ff0\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\u8a18\u8ff0\u3057\u306a\u3044\u3068Model\u69cb\u7bc9\u6642\u306b\u6b7b\u306b\u307e\u3059\u3002\n\npython\n    KTF.set_learning_phase(1)\n\n\nlearning_phase\u306fTraining\u3068Test\u3067\u52d5\u4f5c\u304c\u7570\u306a\u308b\u5834\u5408\u306b\u4f7f\u3044\u307e\u3059\u3002Training\u3068Test\u3067\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304c\u5909\u308f\u3089\u306a\u3044\u5834\u5408\u306f\u5165\u308a\u307e\u305b\u3093\u3002\nlearning_phase\u306f\u3001Training\u6642\u306b\uff11\u306b\u30bb\u30c3\u30c8\u3055\u308c\u3001Test\u6642\u306b\u306f\uff10\u306b\u30bb\u30c3\u30c8\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u5024\u306b\u3088\u308a\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u5207\u308a\u66ff\u3048\u3066\u3044\u307e\u3059\u3002\u5024\u306e\u5165\u529b\u306fkeras\u304c\u81ea\u52d5\u3067\u884c\u3063\u3066\u3044\u308b\u306e\u3067\u4f55\u3082\u3057\u306a\u304f\u3066\u3088\u3044\u3067\u3059\u3002\u4f8b\u3048\u3070Validation\u306e\u6642\u306f0\u304c\u8a2d\u5b9a\u3055\u308c\u307e\u3059\u3002\n\n\u7c21\u5358\u306a\u4f8b\n\u7c21\u5358\u306aMaltilayer Neural Network\u306e\u4f8b\u306f\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\npython\nimport numpy as np\nfrom keras.datasets import mnist\nfrom keras.models import Sequential\nfrom keras.layers.core import Dense, Dropout, Activation\nfrom keras.optimizers import SGD\nfrom keras.utils import np_utils\nimport keras.callbacks\nimport keras.backend.tensorflow_backend as KTF\nimport tensorflow as tf\n\nbatch_size = 128\nnb_classes = 10\nnb_epoch   = 20\nnb_data    = 28*28\nlog_filepath = './log'\n\n# load data\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n\n# reshape\nX_train = X_train.reshape(X_train.shape[0], X_train.shape[1]*X_train.shape[2])\nX_test = X_test.reshape(X_test.shape[0], X_test.shape[1]*X_test.shape[2])\n\n# rescale\nX_train = X_train.astype(np.float32)\nX_test  = X_test.astype(np.float32)\nX_train /= 255\nX_test  /= 255\n\n# convert class vectors to binary class matrices (one hot vectors)\nY_train = np_utils.to_categorical(y_train, nb_classes)\nY_test = np_utils.to_categorical(y_test, nb_classes)\n\nold_session = KTF.get_session()\n\nwith tf.Graph().as_default():\n    session = tf.Session('')\n    KTF.set_session(session)\n    KTF.set_learning_phase(1)\n    # build model\n    model = Sequential()\n    model.add(Dense(512, input_shape=(nb_data,), init='normal',name='dense1'))\n    model.add(Activation('relu', name='relu1'))\n    model.add(Dropout(0.2, name='dropout1'))\n    model.add(Dense(512, init='normal', name='dense2'))\n    model.add(Activation('relu', name='relu2'))\n    model.add(Dropout(0.2, name='dropout2'))\n    model.add(Dense(10, init='normal', name='dense3'))\n    model.add(Activation('softmax', name='softmax1'))       \n    model.summary()\n\n    model.compile(loss='categorical_crossentropy', optimizer=SGD(lr=0.01), metrics=['accuracy'])\n\n    tb_cb = keras.callbacks.TensorBoard(log_dir=log_filepath, histogram_freq=1)\n    cbks = [tb_cb]\n\n    history = model.fit(X_train, Y_train, batch_size=batch_size, nb_epoch = nb_epoch, verbose=1, callbacks=cbks, validation_data=(X_test, Y_test))\n\n    score = model.evaluate(X_test, Y_test, verbose=0)\n    print('Test score:', score[0])\n    print('Test accuracy;', score[1])\n\nKTF.set_session(old_session)\n\n\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068Keras\u306e\u5b9f\u884c\u6642\u306e\u30ed\u30b0\u304c\u6a19\u6e96\u51fa\u529b\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\nLayer (type)                       Output Shape        Param #     Connected to                     \n====================================================================================================\ndense1 (Dense)                     (None, 512)         401920      dense_input_1[0][0]              \n____________________________________________________________________________________________________\nrelu1 (Activation)                 (None, 512)         0           dense1[0][0]                     \n____________________________________________________________________________________________________\ndropout1 (Dropout)                 (None, 512)         0           relu1[0][0]                      \n____________________________________________________________________________________________________\ndense2 (Dense)                     (None, 512)         262656      dropout1[0][0]                   \n____________________________________________________________________________________________________\nrelu2 (Activation)                 (None, 512)         0           dense2[0][0]                     \n____________________________________________________________________________________________________\ndropout2 (Dropout)                 (None, 512)         0           relu2[0][0]                      \n____________________________________________________________________________________________________\ndense3 (Dense)                     (None, 10)          5130        dropout2[0][0]                   \n____________________________________________________________________________________________________\nsoftmax1 (Activation)              (None, 10)          0           dense3[0][0]                     \n====================================================================================================\nTotal params: 669706\n____________________________________________________________________________________________________\nTrain on 60000 samples, validate on 10000 samples\nEpoch 1/20\n60000/60000 [==============================] - 5s - loss: 1.2522 - acc: 0.6646 - val_loss: 0.5603 - val_acc: 0.8695\nEpoch 2/20\n60000/60000 [==============================] - 5s - loss: 0.5533 - acc: 0.8445 - val_loss: 0.3862 - val_acc: 0.8962\nEpoch 3/20\n60000/60000 [==============================] - 5s - loss: 0.4381 - acc: 0.8728 - val_loss: 0.3291 - val_acc: 0.9084\nEpoch 4/20\n60000/60000 [==============================] - 5s - loss: 0.3879 - acc: 0.8867 - val_loss: 0.2963 - val_acc: 0.9147\nEpoch 5/20\n60000/60000 [==============================] - 6s - loss: 0.3536 - acc: 0.8975 - val_loss: 0.2753 - val_acc: 0.9198\nEpoch 6/20\n60000/60000 [==============================] - 5s - loss: 0.3271 - acc: 0.9047 - val_loss: 0.2575 - val_acc: 0.9268\nEpoch 7/20\n60000/60000 [==============================] - 5s - loss: 0.3059 - acc: 0.9113 - val_loss: 0.2421 - val_acc: 0.9301\nEpoch 8/20\n60000/60000 [==============================] - 5s - loss: 0.2873 - acc: 0.9168 - val_loss: 0.2302 - val_acc: 0.9331\nEpoch 9/20\n60000/60000 [==============================] - 5s - loss: 0.2751 - acc: 0.9199 - val_loss: 0.2198 - val_acc: 0.9359\nEpoch 10/20\n60000/60000 [==============================] - 5s - loss: 0.2612 - acc: 0.9246 - val_loss: 0.2092 - val_acc: 0.9386\nEpoch 11/20\n60000/60000 [==============================] - 5s - loss: 0.2507 - acc: 0.9274 - val_loss: 0.1998 - val_acc: 0.9416\nEpoch 12/20\n60000/60000 [==============================] - 6s - loss: 0.2383 - acc: 0.9311 - val_loss: 0.1930 - val_acc: 0.9437\nEpoch 13/20\n60000/60000 [==============================] - 5s - loss: 0.2288 - acc: 0.9340 - val_loss: 0.1859 - val_acc: 0.9461\nEpoch 14/20\n60000/60000 [==============================] - 5s - loss: 0.2195 - acc: 0.9367 - val_loss: 0.1776 - val_acc: 0.9492\nEpoch 15/20\n60000/60000 [==============================] - 5s - loss: 0.2107 - acc: 0.9391 - val_loss: 0.1715 - val_acc: 0.9511\nEpoch 16/20\n60000/60000 [==============================] - 5s - loss: 0.2040 - acc: 0.9405 - val_loss: 0.1658 - val_acc: 0.9514\nEpoch 17/20\n60000/60000 [==============================] - 5s - loss: 0.1969 - acc: 0.9423 - val_loss: 0.1607 - val_acc: 0.9533\nEpoch 18/20\n60000/60000 [==============================] - 5s - loss: 0.1922 - acc: 0.9442 - val_loss: 0.1559 - val_acc: 0.9554\nEpoch 19/20\n60000/60000 [==============================] - 5s - loss: 0.1853 - acc: 0.9454 - val_loss: 0.1518 - val_acc: 0.9558\nEpoch 20/20\n60000/60000 [==============================] - 6s - loss: 0.1813 - acc: 0.9470 - val_loss: 0.1472 - val_acc: 0.9568\n('Test score:', 0.1472099754229188)\n('Test accuracy;', 0.95679999999999998)\n\nTensorboard\u3067\u51fa\u529b\u3055\u308c\u305flog\u3092\u898b\u308b\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nWeight\u3001Bias\u3001Activation\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\nHistogram\u306eTag\u304c\u3061\u3087\u3063\u3068\u3042\u308c\u3067\u3059\u3001\u4eca\u306e\u3068\u3053\u308d\u540d\u524d\u306f\u4f7f\u7528\u3055\u308c\u306a\u3044\u307f\u305f\u3044\u3067\u3059\u3002\n\nGraph\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\nKeras\u4e0a\u304b\u3089\u7c21\u5358\u306bTensorboard\u306e\u30ed\u30b0\u304c\u51fa\u529b\u51fa\u6765\u307e\u3057\u305f\u3002\nKeras\u306f\u51fa\u3067\u304d\u305f\u3070\u304b\u308a\u3067\u6539\u5584\u306e\u4f59\u5730\u306f\u307e\u3060\u307e\u3060\u3042\u308a\u307e\u3059\u304c\u65e5\u3005\u66f4\u65b0\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\nTensorflow\u3092\u30d9\u30bf\u3067\u66f8\u304f\u3088\u308a\u306f\u8a18\u8ff0\u3082\u30b9\u30c3\u30ad\u30ea\u3057\u308b\u306e\u3067\u3001\n\u3061\u3087\u3063\u3068\u8a66\u3057\u305f\u3044\u3068\u304d\u306b\u306f\u3068\u3066\u3082\u4fbf\u5229\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n[keras](https://github.com/fchollet/keras)\u306f**Theano/Tensorflow**\u306ewrapper library\u3067\u3001**keras**\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001Theano/Tensorflow\u3067\u30d9\u30bf\u3067\u66f8\u304f\u3088\u308a\u3082\u5c11\u306a\u3044\u30b3\u30fc\u30c9\u91cf\u3067\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nkeras\u306b\u95a2\u3057\u3066\u306f\u3001\u3059\u3067\u306b\u8aac\u660e\u3057\u3066\u3044\u308b\u30da\u30fc\u30b8\u3082\u3042\u308b\u306e\u3067\u305d\u3061\u3089\u306b\u8b72\u308b\u3068\u3057\u3066\u3001keras\u304b\u3089Tensorboard\u3092\u4f7f\u3046\u65b9\u6cd5\u3092\u8abf\u3079\u305f\u306e\u3067\u7c21\u5358\u306b\u8aac\u660e\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n**Tensorboard**\u7528\u306elog\u3092\u51fa\u529b\u3059\u308b\u3068\u304d\u306f**Callback**\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u767b\u9332\u3057\u305f**Callback**\u306f\u6c7a\u307e\u3063\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u547c\u3070\u308c\u307e\u3059\u3002Call\u3055\u308c\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u306f\u3001**Callback**\u306e\u7a2e\u985e\u306b\u3088\u308a\u7570\u306a\u308a\u307e\u3059\u304c\u3001**Tensorboard**\u7528\u306e**Callback**\u306f**\u5b66\u7fd2\u306e\u76f4\u524d**\u3068**\u6bceepoch\u306e\u7d42\u4e86\u6642**\u306bCall\u3055\u308c\u307e\u3059\u3002\n\n\u5b66\u7fd2\u306e\u76f4\u524d\u3067\u306f\u3001**tf.merge_all_summaries**\u3068**tf.train.SummaryWriter**\u304c\u547c\u3070\u308c\u307e\u3059\u3002\n\u6bceepoch\u306e\u7d42\u308f\u308a\u306b\u3001**add_summary**\u304c\u547c\u3070\u308c\u3066log\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\u307e\u305f\u3001\u6bceepoch\u3067\u306f\u591a\u3059\u304e\u308b\u3068\u3044\u3046\u3088\u3046\u306a\u5834\u5408\u306b\u306f\u3001callback\u3092\u547c\u3076\u983b\u5ea6\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n**Tensorflow**\u7528\u306e**Callback**\u306f\u3001**keras.callbacks.TensorBoard**\u3067\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u4f5c\u6210\u3057\u305fCallback\u306ffit\u306b\u6e21\u3057\u307e\u3059\u3002\n**histogram_freq**\u306b\u306f\u3001**Tensorboard**\u306ehistogram\u7528\u30c7\u30fc\u30bf\u3092\u51fa\u529b\u3059\u308b\u983b\u5ea6\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\nhistogram_freq=1\u3060\u3068\u3001\u6bceepoch\u30c7\u30fc\u30bf\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\n```lang:python\n    tb_cb = keras.callbacks.TensorBoard(log_dir=log_filepath, histogram_freq=1)\n    cbks = [tb_cb]\n            \n    history = model.fit(X_train, Y_train, batch_size=batch_size, nb_epoch = nb_epoch, verbose=1, callbacks=cbks, validation_data=(X_test, Y_test))\n\n```\n\n**Dropout**\u306e\u3088\u3046\u306b**Training**\u3068**Test**\u3067\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u9020\u304c\u5909\u308f\u308b\u5834\u5408\u306f\u3001Model\u69cb\u7bc9\u524d\u306b\u4e0b\u8a18\u306e\u8a18\u8ff0\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\u8a18\u8ff0\u3057\u306a\u3044\u3068Model\u69cb\u7bc9\u6642\u306b\u6b7b\u306b\u307e\u3059\u3002\n\n```lang:python\n    KTF.set_learning_phase(1)\n```\n\n**learning_phase**\u306f**Training**\u3068**Test**\u3067\u52d5\u4f5c\u304c\u7570\u306a\u308b\u5834\u5408\u306b\u4f7f\u3044\u307e\u3059\u3002**Training**\u3068**Test**\u3067\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304c\u5909\u308f\u3089\u306a\u3044\u5834\u5408\u306f\u5165\u308a\u307e\u305b\u3093\u3002\n\n**learning_phase**\u306f\u3001**Training**\u6642\u306b**\uff11**\u306b\u30bb\u30c3\u30c8\u3055\u308c\u3001**Test**\u6642\u306b\u306f**\uff10**\u306b\u30bb\u30c3\u30c8\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u5024\u306b\u3088\u308a\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u5207\u308a\u66ff\u3048\u3066\u3044\u307e\u3059\u3002\u5024\u306e\u5165\u529b\u306f**keras**\u304c\u81ea\u52d5\u3067\u884c\u3063\u3066\u3044\u308b\u306e\u3067\u4f55\u3082\u3057\u306a\u304f\u3066\u3088\u3044\u3067\u3059\u3002\u4f8b\u3048\u3070**Validation**\u306e\u6642\u306f**0**\u304c\u8a2d\u5b9a\u3055\u308c\u307e\u3059\u3002\n\n# \u7c21\u5358\u306a\u4f8b\n\n\u7c21\u5358\u306a**Maltilayer Neural Network**\u306e\u4f8b\u306f\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\n```lang:python\nimport numpy as np\nfrom keras.datasets import mnist\nfrom keras.models import Sequential\nfrom keras.layers.core import Dense, Dropout, Activation\nfrom keras.optimizers import SGD\nfrom keras.utils import np_utils\nimport keras.callbacks\nimport keras.backend.tensorflow_backend as KTF\nimport tensorflow as tf\n\nbatch_size = 128\nnb_classes = 10\nnb_epoch   = 20\nnb_data    = 28*28\nlog_filepath = './log'\n\n# load data\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n\n# reshape\nX_train = X_train.reshape(X_train.shape[0], X_train.shape[1]*X_train.shape[2])\nX_test = X_test.reshape(X_test.shape[0], X_test.shape[1]*X_test.shape[2])\n\n# rescale\nX_train = X_train.astype(np.float32)\nX_test  = X_test.astype(np.float32)\nX_train /= 255\nX_test  /= 255\n\n# convert class vectors to binary class matrices (one hot vectors)\nY_train = np_utils.to_categorical(y_train, nb_classes)\nY_test = np_utils.to_categorical(y_test, nb_classes)\n\nold_session = KTF.get_session()\n\nwith tf.Graph().as_default():\n    session = tf.Session('')\n    KTF.set_session(session)\n    KTF.set_learning_phase(1)\n    # build model\n    model = Sequential()\n    model.add(Dense(512, input_shape=(nb_data,), init='normal',name='dense1'))\n    model.add(Activation('relu', name='relu1'))\n    model.add(Dropout(0.2, name='dropout1'))\n    model.add(Dense(512, init='normal', name='dense2'))\n    model.add(Activation('relu', name='relu2'))\n    model.add(Dropout(0.2, name='dropout2'))\n    model.add(Dense(10, init='normal', name='dense3'))\n    model.add(Activation('softmax', name='softmax1'))       \n    model.summary()\n\n    model.compile(loss='categorical_crossentropy', optimizer=SGD(lr=0.01), metrics=['accuracy'])\n\n    tb_cb = keras.callbacks.TensorBoard(log_dir=log_filepath, histogram_freq=1)\n    cbks = [tb_cb]\n            \n    history = model.fit(X_train, Y_train, batch_size=batch_size, nb_epoch = nb_epoch, verbose=1, callbacks=cbks, validation_data=(X_test, Y_test))\n\n    score = model.evaluate(X_test, Y_test, verbose=0)\n    print('Test score:', score[0])\n    print('Test accuracy;', score[1])\n\nKTF.set_session(old_session)\n```\n\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068**Keras**\u306e\u5b9f\u884c\u6642\u306e\u30ed\u30b0\u304c\u6a19\u6e96\u51fa\u529b\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\n```\nLayer (type)                       Output Shape        Param #     Connected to                     \n====================================================================================================\ndense1 (Dense)                     (None, 512)         401920      dense_input_1[0][0]              \n____________________________________________________________________________________________________\nrelu1 (Activation)                 (None, 512)         0           dense1[0][0]                     \n____________________________________________________________________________________________________\ndropout1 (Dropout)                 (None, 512)         0           relu1[0][0]                      \n____________________________________________________________________________________________________\ndense2 (Dense)                     (None, 512)         262656      dropout1[0][0]                   \n____________________________________________________________________________________________________\nrelu2 (Activation)                 (None, 512)         0           dense2[0][0]                     \n____________________________________________________________________________________________________\ndropout2 (Dropout)                 (None, 512)         0           relu2[0][0]                      \n____________________________________________________________________________________________________\ndense3 (Dense)                     (None, 10)          5130        dropout2[0][0]                   \n____________________________________________________________________________________________________\nsoftmax1 (Activation)              (None, 10)          0           dense3[0][0]                     \n====================================================================================================\nTotal params: 669706\n____________________________________________________________________________________________________\nTrain on 60000 samples, validate on 10000 samples\nEpoch 1/20\n60000/60000 [==============================] - 5s - loss: 1.2522 - acc: 0.6646 - val_loss: 0.5603 - val_acc: 0.8695\nEpoch 2/20\n60000/60000 [==============================] - 5s - loss: 0.5533 - acc: 0.8445 - val_loss: 0.3862 - val_acc: 0.8962\nEpoch 3/20\n60000/60000 [==============================] - 5s - loss: 0.4381 - acc: 0.8728 - val_loss: 0.3291 - val_acc: 0.9084\nEpoch 4/20\n60000/60000 [==============================] - 5s - loss: 0.3879 - acc: 0.8867 - val_loss: 0.2963 - val_acc: 0.9147\nEpoch 5/20\n60000/60000 [==============================] - 6s - loss: 0.3536 - acc: 0.8975 - val_loss: 0.2753 - val_acc: 0.9198\nEpoch 6/20\n60000/60000 [==============================] - 5s - loss: 0.3271 - acc: 0.9047 - val_loss: 0.2575 - val_acc: 0.9268\nEpoch 7/20\n60000/60000 [==============================] - 5s - loss: 0.3059 - acc: 0.9113 - val_loss: 0.2421 - val_acc: 0.9301\nEpoch 8/20\n60000/60000 [==============================] - 5s - loss: 0.2873 - acc: 0.9168 - val_loss: 0.2302 - val_acc: 0.9331\nEpoch 9/20\n60000/60000 [==============================] - 5s - loss: 0.2751 - acc: 0.9199 - val_loss: 0.2198 - val_acc: 0.9359\nEpoch 10/20\n60000/60000 [==============================] - 5s - loss: 0.2612 - acc: 0.9246 - val_loss: 0.2092 - val_acc: 0.9386\nEpoch 11/20\n60000/60000 [==============================] - 5s - loss: 0.2507 - acc: 0.9274 - val_loss: 0.1998 - val_acc: 0.9416\nEpoch 12/20\n60000/60000 [==============================] - 6s - loss: 0.2383 - acc: 0.9311 - val_loss: 0.1930 - val_acc: 0.9437\nEpoch 13/20\n60000/60000 [==============================] - 5s - loss: 0.2288 - acc: 0.9340 - val_loss: 0.1859 - val_acc: 0.9461\nEpoch 14/20\n60000/60000 [==============================] - 5s - loss: 0.2195 - acc: 0.9367 - val_loss: 0.1776 - val_acc: 0.9492\nEpoch 15/20\n60000/60000 [==============================] - 5s - loss: 0.2107 - acc: 0.9391 - val_loss: 0.1715 - val_acc: 0.9511\nEpoch 16/20\n60000/60000 [==============================] - 5s - loss: 0.2040 - acc: 0.9405 - val_loss: 0.1658 - val_acc: 0.9514\nEpoch 17/20\n60000/60000 [==============================] - 5s - loss: 0.1969 - acc: 0.9423 - val_loss: 0.1607 - val_acc: 0.9533\nEpoch 18/20\n60000/60000 [==============================] - 5s - loss: 0.1922 - acc: 0.9442 - val_loss: 0.1559 - val_acc: 0.9554\nEpoch 19/20\n60000/60000 [==============================] - 5s - loss: 0.1853 - acc: 0.9454 - val_loss: 0.1518 - val_acc: 0.9558\nEpoch 20/20\n60000/60000 [==============================] - 6s - loss: 0.1813 - acc: 0.9470 - val_loss: 0.1472 - val_acc: 0.9568\n('Test score:', 0.1472099754229188)\n('Test accuracy;', 0.95679999999999998)\n```\n\n**Tensorboard**\u3067\u51fa\u529b\u3055\u308c\u305flog\u3092\u898b\u308b\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/100523/3db34bbd-da20-9ad0-4da5-0849993b3185.png)\n\n**Weight**\u3001**Bias**\u3001**Activation**\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\nHistogram\u306eTag\u304c\u3061\u3087\u3063\u3068\u3042\u308c\u3067\u3059\u3001\u4eca\u306e\u3068\u3053\u308d\u540d\u524d\u306f\u4f7f\u7528\u3055\u308c\u306a\u3044\u307f\u305f\u3044\u3067\u3059\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/100523/3e5337a5-ad05-e597-6adc-5d013dd9abd1.png)\n\nGraph\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/100523/10321bae-80fb-457c-85cb-576606a3dc1c.png)\n\n**Keras**\u4e0a\u304b\u3089\u7c21\u5358\u306b**Tensorboard**\u306e\u30ed\u30b0\u304c\u51fa\u529b\u51fa\u6765\u307e\u3057\u305f\u3002\n**Keras**\u306f\u51fa\u3067\u304d\u305f\u3070\u304b\u308a\u3067\u6539\u5584\u306e\u4f59\u5730\u306f\u307e\u3060\u307e\u3060\u3042\u308a\u307e\u3059\u304c\u65e5\u3005\u66f4\u65b0\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n**Tensorflow**\u3092\u30d9\u30bf\u3067\u66f8\u304f\u3088\u308a\u306f\u8a18\u8ff0\u3082\u30b9\u30c3\u30ad\u30ea\u3057\u308b\u306e\u3067\u3001\n\u3061\u3087\u3063\u3068\u8a66\u3057\u305f\u3044\u3068\u304d\u306b\u306f\u3068\u3066\u3082\u4fbf\u5229\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["TensorFlow", "Keras", "Python"]}