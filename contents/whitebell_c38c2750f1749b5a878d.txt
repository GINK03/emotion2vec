{"context": " More than 1 year has passed since last update.using System;\n\nnamespace IEquatableTAndEqualOpOverload\n{\n    class Klass : IEquatable<Klass>\n    {\n        public override int GetHashCode()\n        {\n            return \u306a\u306b\u304b\u9069\u5207\u306a\u5b9f\u88c5;\n        }\n\n        public override bool Equals(object obj)\n        {\n            var m = obj as Klass;\n            if (m == null)\n                return false;\n            return Equals(m);\n        }\n\n        public bool Equals(Klass other) => this == other;\n\n        public static bool operator ==(Klass lhs, Klass rhs)\n        {\n            if (ReferenceEquals(lhs, rhs)) // 1. lhs and rhs are same obj, or 2. Both lhs and rhs are null.\n                return true;\n            if ((lhs as object) == null || (rhs as object) == null)\n                return false;\n\n            return \u306a\u306b\u304b\u9069\u5207\u306a\u5b9f\u88c5;\n        }\n\n        public static bool operator !=(Klass lhs, Klass rhs) => !(lhs == rhs);\n    }\n}\n\n```csharp\nusing System;\n\nnamespace IEquatableTAndEqualOpOverload\n{\n    class Klass : IEquatable<Klass>\n    {\n        public override int GetHashCode()\n        {\n            return \u306a\u306b\u304b\u9069\u5207\u306a\u5b9f\u88c5;\n        }\n\n        public override bool Equals(object obj)\n        {\n            var m = obj as Klass;\n            if (m == null)\n                return false;\n            return Equals(m);\n        }\n\n        public bool Equals(Klass other) => this == other;\n\n        public static bool operator ==(Klass lhs, Klass rhs)\n        {\n            if (ReferenceEquals(lhs, rhs)) // 1. lhs and rhs are same obj, or 2. Both lhs and rhs are null.\n                return true;\n            if ((lhs as object) == null || (rhs as object) == null)\n                return false;\n\n            return \u306a\u306b\u304b\u9069\u5207\u306a\u5b9f\u88c5;\n        }\n\n        public static bool operator !=(Klass lhs, Klass rhs) => !(lhs == rhs);\n    }\n}\n```\n", "tags": ["C#", "\u30e1\u30e2"]}