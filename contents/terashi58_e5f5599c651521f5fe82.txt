{"context": " More than 1 year has passed since last update.\u3053\u3093\u306b\u3061\u306f\u3001freee \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30a8\u30f3\u30b8\u30cb\u30a2 @terashi58 \u3067\u3059\u3002\n\u3053\u306e\u8a18\u4e8b\u306f freee Engineers Advent Calendar 2015 7\u65e5\u76ee\u3067\u3059\u3002\n\nActiveRecord \u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\nRails \u306e ActiveRecord \u4fbf\u5229\u3067\u3059\u3088\u306d\u3002\n\u79c1\u306f\u307e\u3060 Rails \u4e00\u5e74\u751f\u3067\u3059\u304c\u3001\u65e5\u3005\u304a\u4e16\u8a71\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u500b\u4eba\u7684\u306b\u306f has_many \u3068\u304b\u306e Relation \u3068 where \u306b\u59cb\u307e\u308b QueryMethods \u304c\u7279\u306b\u3044\u3044\u611f\u3058\u3067\u3059\u3002\n\u3057\u304b\u3057\u3053\u306e ActiveRecord\u3001\u4fbf\u5229\u6a5f\u80fd\u6e80\u8f09\u306e\u305f\u3081\u304b\u975e\u5e38\u306b\u9045\u3044\u3053\u3068\u304c\u3057\u3070\u3057\u3070\u3002\n\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u53d6\u308b\u3068\u3001\u305f\u3044\u3066\u3044\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u547c\u3073\u51fa\u3057\u304c\u91cd\u3044\u3067\u3059\u3002\n\u7279\u306b index \u51e6\u7406\u3067\u306f\u5927\u91cf\u306e AR \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u306b\u306a\u308a\u307e\u3059\u3002\nindex (show) \u51e6\u7406\u3001\u7279\u306b\u51fa\u529b\u304cJSON\u306e\u5834\u5408\u306f\u3001DB \u306e\u5024\u3092\u307b\u3068\u3093\u3069\u305d\u306e\u307e\u307e\u683c\u7d0d\u3059\u308b\u3053\u3068\u304c\u591a\u304f\u3001\u305d\u306e\u5834\u5408\u306f AR \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u307e\u3067\u306f\u5fc5\u8981\u3068\u3057\u306a\u3044\u3053\u3068\u304c\u3088\u304f\u3042\u308a\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001\u30af\u30a8\u30ea\u751f\u6210\u307e\u3067 QueryMethods \u3067\u884c\u3044\u3001to_sql \u3092 ActiveRecord::Base.connection.select_all \u306a\u3069\u3067 Hash \u306b\u683c\u7d0d\u3057\u3066\u3057\u307e\u3046\u306e\u304c\u6709\u52b9\u3067\u3059\u3002\n@hotchpotch \u3055\u3093\u306e activerecord-row-data gem \u304c\u305d\u306e\u8fba\u3092\u3088\u304b\u308c\u3068\u3084\u3063\u3066\u304f\u308c\u307e\u3059\u3002\n\nHash \u3060\u3051\u3067\u306f\u8db3\u308a\u306a\u3044\n\u30b7\u30f3\u30d7\u30eb\u306a REST API \u306a\u3069\u3067\u306f\u3053\u308c\u3067\u5341\u5206\u306a\u306e\u3067\u3059\u304c\u3001\u8907\u96d1\u306a\u30e2\u30c7\u30eb\u69cb\u9020\u3092\u4e00\u5ea6\u306b\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u306b\u306f\u3001\u4f9d\u7136 Active Record \u306e Relation \u3084\u3001\u30e2\u30c7\u30eb\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u6d41\u7528\u3057\u305f\u304f\u306a\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\nfreee \u306e\u5834\u5408\u3001\u53d6\u5f15\u306e\u4e00\u89a7\u8868\u793a\u306a\u3069\u3067\u306f\u8efd\u304f 10 \u4ee5\u4e0a\u306e\u30e2\u30c7\u30eb\u304c\u518d\u5e30\u7684\u306b\u95a2\u4e0e\u3057\u3001\u305d\u3046\u306a\u308b\u3068\u3055\u3059\u304c\u306b Hash \u3092\u30b4\u30ea\u30b4\u30ea\u3059\u308b\u306e\u306f\u3064\u3089\u3044\u3067\u3059\u3002\n\u307e\u305f\u3001\u73fe\u5728\u4f7f\u3063\u3066\u3044\u308b jbuilder \u3084 ActiveRecord::Serializer \u3092\u305d\u306e\u307e\u307e\u6d41\u7528\u3057\u305f\u3044\u3068\u3044\u3046\u306e\u3082\u3042\u308a\u307e\u3059\u3002\u65e2\u306b AR \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u3042\u308c\u3070\u305d\u306e\u307e\u307e\u6e21\u3057\u305f\u3044\u3067\u3059\u3057\u3001\u306a\u306b\u3088\u308a\u79fb\u884c\u306b\u3088\u308b\u30a8\u30f3\u30d0\u30b0\u304c\u6016\u3044\u3067\u3059\u3002\n\nPseudoRecord: ActiveRecord \u306e\u3088\u3046\u306b\u632f\u308b\u821e\u3046\u3082\u306e\n\u305d\u3053\u3067 Hash \u3092\u30e9\u30c3\u30d7\u3057\u3066 ActiveRecord \u306e\u3088\u3046\u306b\u632f\u308b\u821e\u308f\u305b\u308b PseudoRecord \u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\nRuby \u3067\u306f\u72ac\u306e\u3088\u3046\u306b\u632f\u308b\u821e\u3046\u3082\u306e\u306f\u72ac\uff08\u3068\u3057\u3066\u6271\u3063\u3066\u3044\u3044\u306e\uff09\u3067\u3059\u3002\n\u4f8b\u3048\u3070\u3001\u3053\u3093\u306a\u611f\u3058\u3067\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\npseudo/models.rb\nPseudoRecord.define Article do\n  attributes :id, :title, :content \n  belongs_to :user\n  has_many :comments\nend\n\nPseudoRecord.define User do\n  import :display_name  # User#display_name\u3092\u53d6\u308a\u8fbc\u3080\n\n  attributes :id, :first_name, :last_name, :email\nend\n\nPseudoRecord.define Comment do\n  attributes :id, :article_id, :title, :content\n  has_many :replies\nend\n\nPseudoRecord.define Reply do\n  attributes :id, :comment_id, :content\nend\n\n\nActiveModel::Serializer \u3092\u5229\u7528\u3059\u308b\u5834\u5408\u3053\u3093\u306a\u611f\u3058\u3067\u4f7f\u3044\u307e\u3059\u3002\n  records = Article.where(conditions)\n  render json: PseudoRecord::Article.build_from(records), each_serializer: ArticleSerializer\n\nrecords \u3092\u6e21\u3059\u3068\u3053\u308d\u3092\u4e00\u3064\u30e9\u30c3\u30d7\u3059\u308b\u3060\u3051\u3067\u3059\u3002\nSerializer \u306e\u30b3\u30fc\u30c9\u306f\u7701\u7565\u3057\u307e\u3059\u304c\u901a\u5e38\u3068\u306a\u306b\u3082\u5909\u66f4\u305b\u305a\u306b\u3001Article \u306b\u95a2\u9023\u3059\u308b\u5024\u3092\u307e\u3068\u3081\u3066\u53d6\u3063\u3066\u3053\u308c\u307e\u3059\u3002\n\nRuby \u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3001\u305d\u308c\u306f\u81ea\u5206\u306e\u8db3\u3092\u6253\u3061\u629c\u3051\u308b\u9053\u5177\n\u3071\u3063\u3068\u898b\u3067\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001PseudoRecord \u306e\u4e2d\u306f\u30d0\u30ea\u30d0\u30ea\u306e\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u3059\u3002Rails \u7a0b\u3067\u306f\u306a\u3044\u3067\u3059\u304c\u3002\n\u3067\u306f\u3001\u4e00\u3064\u305a\u3064\u4e2d\u8eab\u3092\u89e3\u8aac\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\nAttributes\nattributes \u306f OpenStruct \u306e\u3088\u3046\u306b\u5358\u7d14\u306b\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u308b\u306e\u3068\u3001SELECT\u5bfe\u8c61\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\npseudo_record/core.rb\n  # ActiveModel::Serializer\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306fread_attribute_for_serialization\u3067\n  # attributes\u306e\u5024\u3092\u53d6\u5f97\u3059\u308b\n  def read_attribute_for_serialization(name)\n    public_send(name)\n  end\n\n  module ClassMethods\n    def attributes(*attrs)\n      @attributes ||= []\n      attrs.each do |name|\n        next if @attributes.include? name\n        @attributes << name\n        if block_given?\n          yield name\n        else\n          define_method name do\n            @hash[name]\n          end\n        end\n      end\n    end\n  end\n\n\n\u3061\u3087\u3063\u3068\u30c8\u30ea\u30c3\u30ad\u30fc\u306a\u306e\u306f\u30e1\u30bd\u30c3\u30c9\u5b9a\u7fa9\u3092\u5916\u304b\u3089\u4e0e\u3048\u3089\u308c\u308b\u70b9\u3067\u3059\u3002\n\u3053\u308c\u306b\u3088\u308a Time \u578b\u3092 TimeWithZone \u306b\u3059\u308b\u305f\u3081\u306e time_attributes \u3084 enumerize \u3092 Value \u578b\u306b\u3059\u308b\u305f\u3081\u306e enum_attributes \u306e\u3088\u3046\u306a\u62e1\u5f35\u3092\u5bb9\u6613\u306b\u3067\u304d\u307e\u3059\u3002\n\u307e\u305f\u3001\u624b\u52d5\u3067\u30a2\u30af\u30bb\u30b5\u30e1\u30bd\u30c3\u30c9\u3092\u3044\u304f\u3089\u3067\u3082\u4e0a\u66f8\u304d\u53ef\u80fd\u3067\u3059\u3002\n\nRelation\nRelation \u306e\u4f5c\u6210\u306f\u30b5\u30d6\u30e2\u30c7\u30eb\u306e\u30ed\u30fc\u30c9\u3068\u30bb\u30c3\u30c8\u306b\u306a\u308a\u307e\u3059\u3002\n\npseudo_record/core.rb\n  module ClassMethods\n    def belongs_to(name, opts = {})\n      add_relation(name, opts, id_key: :\"#{name}_id\", foreign_key: :id, ...)\n    end\n    def has_one(name, opts = {})\n      add_relation(name, opts, id_key: :id, foreign_key: :\"#{self.name.foreign_key}\", ...)\n    end\n    def has_many(name, opts = {})\n      add_relation(name, opts, id_key: :id, ..., to_array: true)\n    end\n\n    # relation\u306e\u5171\u901a\u5b9f\u88c5\n    def add_relation(name, opts, params)\n      updator = :\"update_#{name}\"\n      id_key = params[:id_key]\n      foreign_key = params[:foreign_key]\n      model_class = params[:model_class]\n      pseudo_class = params[:pseudo_class]\n      to_array = params[:to_array] || false\n\n      attributes id_key\n      define_method name do\n        @hash[name]\n      end\n      define_method updator do |id_map|\n        @hash[name] = id_map[@hash[id_key]]\n      end\n      add_preloader do |models|\n        ids = models.map{|model| model.hash[id_key]}.uniq\n        next if ids.blank?\n        sub_models = pseudo_class.select_by(model_class.where(foreign_key => ids), opts)\n        if to_array\n          id_map = ids.map{|id| [id, []]}.to_h\n          sub_models.each{|model| id_map[model.public_send(foreign_key)] << model}\n        else\n          id_map = sub_models.map{|model| [model.public_send(foreign_key), model]}.to_h\n        end\n        models.each{|model| model.public_send(updator, id_map)}\n        pseudo_class.preload(sub_models) unless opts[:shallow]\n      end\n    end\n\n     # \u64ec\u4f3c\u30e2\u30c7\u30eb\u5217\u306e\u751f\u6210\u6642\u306b\u884c\u3046\u521d\u671f\u5316\u51e6\u7406\u3092\u767b\u9332\u3059\u308b\n     def add_preloader(&proc)\n      @preloaders ||= []\n      @preloaders << proc\n    end\n\n    # \u767b\u9332\u3055\u308c\u305f\u521d\u671f\u5316\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\n    def preload(models)\n      return unless @preloaders\n      @preloaders.each{|proc| proc.call(models)}\n    end\n  end\n\n\n\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4e00\u756a\u306e\u30b3\u30a2\u90e8\u5206\u3002\u518d\u5e30\u7684\u306b\u4f9d\u5b58\u95a2\u4fc2\u3092 N+1 \u3092\u56de\u907f\u3057\u3064\u3064\u89e3\u6c7a\u3057\u3001\u30a2\u30af\u30bb\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n\u9577\u3044\u3093\u3067\u7701\u7565\u3057\u307e\u3057\u305f\u304c\u3001belongs_to\u3001has_one\u3001has_many \u306f ActiveSupport::Inflector \u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u9069\u5207\u306a\u5024\u3092 add_relation \u306b\u6e21\u3057\u307e\u3059\u3002\n\nModel\u306e\u30e1\u30bd\u30c3\u30c9\u8ffd\u52a0\n\npseudo_record.rb\nmodule PseudoRecord\n  # \u64ec\u4f3c\u30e2\u30c7\u30eb\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\n  def self.define(base_class,  &block)\n    c = Class.new\n    c.extend Capture\n    c.class_eval(&block)\n    if c.imported_methods.present?\n      p = Class.new(base_class)\n      import(p, base_class, c.imported_methods)\n    else\n      p = Class.new\n    end\n    const_set(class_name, p)\n    p.include PseudoModels::Core\n    p.class_eval(&block)\n    p\n  end\n\n  private\n\n  # \u30d6\u30ed\u30c3\u30af\u3092\u30b9\u30ad\u30e3\u30f3\u3057\u3001import\u5185\u5bb9\u3092\u53d6\u5f97\u3059\u308b\u3060\u3051\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\n  module Capture\n    attr_reader :imported_methods\n    def import(*args)\n      @imported_methods = args\n    end\n    def method_missing(name, *args)\n    end\n  end\n\n  # \u89aa\u30af\u30e9\u30b9\u306e\u6307\u5b9a\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u306e\u307f\u3092\u53d6\u308a\u8fbc\u3080\n  def self.import(pseudo_class, base_class, methods)\n    (base_class.instance_methods - PseudoModels::Core.instance_methods -\n     Object.instance_methods - methods).each do |name|\n      # private\u306aundef_method\u3092\u7121\u7406\u3084\u308a\u547c\u3076\n      pseudo_class.send(:undef_method, name)\n    end\n  end\nend\n\n\n\u30e1\u30bd\u30c3\u30c9\u306e\u53d6\u308a\u8fbc\u307f\u306f\u7d99\u627f\u3067\u884c\u3044\u3001\u4e0d\u8981\u306a\u30e1\u30bd\u30c3\u30c9\u3092 undef_method \u3057\u307e\u3059\u3002\n\u5143\u3005\u306f UnboundMethod#bind \u3067\u306a\u3093\u3068\u304b\u306a\u3089\u306a\u3044\u304b\u3068\u9811\u5f35\u3063\u3066\u307f\u305f\u3082\u306e\u306e\u3001C \u30b3\u30fc\u30c9\u306e\u65b9\u3067\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u308b\u306e\u3067\u3069\u3046\u3057\u3088\u3046\u3082\u306a\u304b\u3063\u305f\u306e\u3067\u3059\u3002\n\uff08Ruby \u306f\u9ed2\u9b54\u8853\u3057\u653e\u984c\u3068\u601d\u3063\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u610f\u5916\u3068\u767d\u304b\u3063\u305f\u3002\uff09\nfreee \u306e\u4eca\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3053\u306e undef \u306e\u624b\u6cd5\u306f\u4f7f\u308f\u305a\u3001\u5358\u7d14\u306b\u7d99\u627f\u3060\u3051\u3057\u3066\u4f7f\u3063\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5206\u304b\u308a\u306b\u304f\u3044\uff08#[] \u3067\u843d\u3061\u305f\u3068\u304b\u8a00\u308f\u308c\u3066\u3082\u3069\u308c\u3084\u306d\u3093\u3068\u3044\u3046\uff09\u306e\u3067\u3001\u660e\u793a\u7684\u306b\u8a31\u53ef\u3057\u305f\u3082\u306e\u306e\u307f\u306b\u3059\u308b\u3053\u3068\u306b\u3057\u3066\u3001\u73fe\u5728\u30ec\u30d3\u30e5\u30fc\u7533\u8acb\u4e2d\u3002\n\u306a\u3093\u3067 const_set \u3092\u308f\u3056\u308f\u3056\u3057\u3066\u3044\u308b\u306e\u304b\u3068\u3044\u3046\u3068\u3001\u76f8\u4e92\u4f9d\u5b58\u3057\u305f\u5834\u5408\u306b\u5b9a\u6570\u306e\u53c2\u7167\u304c\u30eb\u30fc\u30d7\u3059\u308b\u304b\u3089\u3067\u3059\u3002\nPseudo::User = PseudoRecord.define do\n  import User, :display_name\n  ...\nend\n\n\u307f\u305f\u3044\u306a\u65b9\u304c\u3001git grep \u3067\u63a2\u3057\u3084\u3059\u3044\u304b\u3068\u601d\u3063\u305f\u306e\u3067\u3059\u304c\u7121\u7406\u3067\u3057\u305f\u3002\n\u4ed5\u65b9\u306a\u3044\u306e\u3067\u30b3\u30e1\u30f3\u30c8\u3067\u66f8\u3044\u3066\u304a\u304f\u3053\u3068\u306b\u3002\n\u307e\u305f\u3001\u4ed6\u306e\u65b9\u6cd5\u3068\u3057\u3066\u306f\u3001\u5fc5\u8981\u306a\u30e1\u30bd\u30c3\u30c9\u3092\u5168\u3066 Concern \u306b\u3057\u3066\u30e2\u30b8\u30e5\u30fc\u30eb\u306e include \u306b\u3059\u308b\u3068\u3044\u3046\u306e\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u3061\u3089\u306e\u65b9\u304c\u5b89\u5168\u3067\u7dba\u9e97\u306a\u306e\u3067\u3059\u304c\u3001\u554f\u984c\u306f\u5143\u306e\u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9\u306b\u624b\u3092\u5165\u308c\u308b\u5fc5\u8981\u304c\u3042\u308b\u70b9\u3067\u3059\u3002\n\u305f\u3044\u3066\u3044\u306e\u4f7f\u3044\u305f\u3044\u30e1\u30bd\u30c3\u30c9\u306f\u305d\u306e\u30e2\u30c7\u30eb\u306e\u6975\u3081\u3066\u57fa\u672c\u7684\u306a\u30e1\u30bd\u30c3\u30c9\u3067\u3001\u901a\u5e38\u30e2\u30c7\u30eb\u30af\u30e9\u30b9\u306b\u76f4\u66f8\u304d\u3059\u308b\u3088\u3046\u306a\u3082\u306e\u304c\u307b\u3068\u3093\u3069\u3067\u3059\u3002\n\u591a\u304f\u306e\u4eba\u304c\u898b\u308b\u30b3\u30fc\u30c9\u306e\u53ef\u8aad\u6027\u3092\u9ad8\u901f\u5316\u306e\u305f\u3081\u306b\u4e0b\u3052\u308b\u306e\u306f\u907f\u3051\u305f\u3044\u306e\u3067\u3001\u3061\u3087\u3063\u3068\u5f37\u5f15\u3067\u3059\u304c\u30e9\u30a4\u30d6\u30e9\u30ea\u5074\u304c\u9811\u5f35\u308b\u65b9\u5411\u306b\u3057\u307e\u3057\u305f\u3002\n\nConstruction\n\u6700\u5f8c\u306b\u751f\u6210\u90e8\u5206\u3067\u3059\u3002\n\npseudo_record/core.rb\n  # opts\u306foverride\u7528\n  def initialize(hash, opts = {})\n    @hash = hash.symbolize_keys\n  end\n\n  module ClassMethods\n    # ActiveRecord\u306fnew\u3067\u4f59\u8a08\u306a\u51e6\u7406\u3092\u631f\u3080\u306e\u3067\u3001\u7d20\u306enew\u306e\u52d5\u4f5c\u306b\u623b\u3059\n    def new(*args, &block)\n      obj = allocate\n      obj.send(:initialize, *args, &block)\n      obj\n    end\n\n    # Polymorphic Model\u3092\u7d99\u627f\u3057\u305f\u5834\u5408\u306btype\u691c\u7d22\u306bPseudoRecord\u3092\u542b\u3081\u306a\u3044\u3088\u3046\u306b\u3059\u308b\n    def sti_name\n      superclass.sti_name\n    end\n\n    # Model\u306escope\u306a\u3069\u304b\u3089\u64ec\u4f3c\u30e2\u30c7\u30eb\u306e\u914d\u5217\u3092\u4f5c\u6210\u3059\u308b\n    def build_from(relation)\n      models = select_by(relation)\n      preload(models)\n      models\n    end\n\n    # Model\u306escope\u306a\u3069\u304b\u3089\u64ec\u4f3c\u30e2\u30c7\u30eb\u306e\u914d\u5217\u3092\u4f5c\u6210\u3059\u308b\n    # \u305f\u3060\u3057\u3001\u95a2\u9023\u3059\u308b\u30e2\u30c7\u30eb\u306f\u8aad\u307f\u8fbc\u307e\u306a\u3044\n    def select_by(relation, opts = {})\n      ActiveRecord::Base.connection.select_all(relation.select(@attributes).to_sql).map{|hash| self.new(hash, opts)}\n    end\n  end  \n\n\n\u5730\u5473\u306b\u5384\u4ecb\u3060\u3063\u305f\u306e\u304c ActiveRecord \u306e new \u304c\u7d50\u69cb\u3044\u308d\u3044\u308d\u306a\u51e6\u7406\u3092\u3057\u3066\u3044\u3066\u7d99\u627f\u3059\u308b\u3060\u3051\u3067\u9045\u304f\u306a\u308b\u3053\u3068\u3067\u3057\u305f\u3002\n\u30b3\u30fc\u30c9\u3092\u8ffd\u3063\u3066\u3082\u56de\u907f\u3059\u308b\u624b\u6bb5\u304c\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u8d85\u5f37\u5f15\u3060\u3051\u3069 new \u3092\u4e0a\u66f8\u304d\u3057\u3001super \u3092\u547c\u3070\u305a\u306b allocate\u3001initialize \u3067\u6e08\u307e\u305b\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\nsti_name \u306e\u65b9\u306f where \u53e5\u3067\u7121\u99c4\u306a\u691c\u7d22\u3092\u3055\u305b\u306a\u3044\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\n\u305f\u3060\u3001Public API \u3067\u306f\u306a\u3044\u306e\u3067\u3001Rails \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u4e0a\u304c\u308b\u3068\u624b\u3092\u5165\u308c\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u304c\u96e3\u70b9\u3067\u3059\u304c\u3002\n\nTest, Test Test\n\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u4f7f\u3046\u306e\u306f\u7c21\u5358\u3060\u3051\u3069\u3001\u3061\u3087\u3063\u3068\u8a18\u8ff0\u304c\u629c\u3051\u3066\u3044\u308b\u3068\u3042\u3063\u3055\u308a\u843d\u3061\u307e\u3059\u3002\n\u3053\u306e\u305f\u3081\u30c6\u30b9\u30c8\u3092\u304d\u3061\u3093\u3068\u66f8\u3044\u3066\u304a\u304f\u306e\u304c\u5fc5\u9808\u3067\u3059\u3002\n\u5e78\u3044 ActiveRecord \u3068\u6bd4\u8f03\u3057\u3066\u540c\u3058\u306a\u3089\u3044\u3044\u306e\u3067\u3001\u95a2\u9023\u3059\u308b\u30ec\u30b3\u30fc\u30c9\u3092\u5168\u90e8\u4f5c\u3063\u3066\u3001ActiveRecord \u7248JSON\u3068 PseudoRecord \u7248JSON\u306e\u6587\u5b57\u5217\u4e00\u81f4\u3092\u884c\u3046 spec \u3092\u5fc5\u305a\u7528\u610f\u3059\u308b\u3053\u3068\u3067\u5b89\u5fc3\u3057\u3066\u958b\u767a\u3067\u304d\u3066\u3044\u307e\u3059\u3002\uff08\u305d\u3057\u3066\u3088\u304f\u304d\u3061\u3093\u3068\u843d\u3061\u3066\u304f\u308c\u307e\u3059\uff09\n\n\u3069\u308c\u3060\u3051\u65e9\u304f\u306a\u3063\u305f\u306e\u304b\n\u958b\u767a\u74b0\u5883\u3067\u5927\u304d\u306a\u30ea\u30af\u30a8\u30b9\u30c8\u3067\u306f process time \u3067 3.5 \u500d\u304f\u3089\u3044\u65e9\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\u3082\u3063\u3068\u3082\u3001\u30d7\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u3060\u3068\u4ed6\u306e\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u3084 index \u5bfe\u8c61\u304c\u5c11\u306a\u3044\u30b1\u30fc\u30b9\u3082\u3042\u3063\u305f\u305f\u3081\u3001\u5e73\u5747\u3067 20% \u7a0b\u5ea6\u3067\u3057\u305f\u304c\u3002\n\u4eca\u5f8c\u3001\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4ed6\u306e\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u306b\u3082\u9069\u7528\u3057\u3066\u3044\u304f\u4e88\u5b9a\u3067\u3059\u3002\n\n\u4eca\u5f8c\u3084\u308a\u305f\u3044\u3053\u3068\n\n\u53c2\u7167\u5143\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u30d0\u30c3\u30af\u30ea\u30f3\u30af\uff08has_many \u5148\u306e belongs_to\uff09\n\u660e\u793a\u7684\u306a preload\n\n\n\u3044\u307e\u306f Relation \u304c\u3042\u308b\u3068\u5fc5\u305a\u30ed\u30fc\u30c9\u3059\u308b\u305f\u3081\u3001\u76f8\u4e92\u53c2\u7167\u3092\u8a18\u8ff0\u3067\u304d\u306a\u3044\npreload \u307f\u305f\u3044\u306b\u6307\u5b9a\u3057\u305f\u3082\u306e\u3060\u3051\u30ed\u30fc\u30c9\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u3044\n\n\nJSON\u751f\u6210\u4ee5\u5916\u3078\u306e\u5fdc\u7528\n\u4ed6\u306e\u30ec\u30dd\u30b8\u30c8\u30ea\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b gem \u5316\n\n\u307e\u305f\u3001gem \u5316\u306b\u3068\u3082\u306a\u3044\u3001\u4ed6\u3067\u3082\u4f7f\u3048\u305d\u3046\u306a\u3089\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306b\u3067\u304d\u306a\u3044\u304b\u306a\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002\n\u4e00\u5fdc\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u5316\u306b\u5099\u3048\u3066\u3001\u3053\u306e\u8a18\u4e8b\u5185\u306e\u30b3\u30fc\u30c9\u306fMIT License\u3068\u660e\u793a\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\uff08LICENSE.txt \u304c\u5fc5\u8981\u306a\u306e\u304b\u306a\u3002\u3068\u3063\u3068\u3068\u4f7f\u3044\u305f\u3044\u304b\u3089\u30e9\u30a4\u30bb\u30f3\u30b9\u304d\u3061\u3093\u3068\u3057\u308d\u3084\u3001\u3068\u3044\u3046\u65b9\u306f\u30b3\u30e1\u30f3\u30c8\u306a\u308a\u3067\u58f0\u3092\u304b\u3051\u3066\u304f\u3060\u3055\u3044\u3002\uff09\n\n\u5ba3\u4f1d\nfreee \u3067\u306f\u30d3\u30b8\u30cd\u30b9\u5411\u3051\u30a2\u30d7\u30ea\u306e UX \u304b\u3089\u30b5\u30fc\u30d0\u306e CPU \u307e\u3067\u306e\u3042\u3089\u3086\u308b\u30ec\u30a4\u30e4\u3092\u653b\u3081\u308b*\u30a8\u30f3\u30b8\u30cb\u30a2\u3092\u52df\u96c6\u3057\u3066\u3044\u307e\u3059\u3002\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\u660e\u65e5\u306f freee \u306e\u4e16\u754c\u907a\u7523\u3001\u30df\u30b1\u30e9\u30f3\u30b8\u30a7\u30ed\u304c\u5f6b\u3063\u305f\u30e2\u30a2\u30a4\u3053\u3068 @ryosukeYamazaki \u3088\u308b MQ \u306b\u3064\u3044\u3066\u3067\u3059\u3002\u304a\u697d\u3057\u307f\u306b\u3002\n\u3053\u3093\u306b\u3061\u306f\u3001freee \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30a8\u30f3\u30b8\u30cb\u30a2 @terashi58 \u3067\u3059\u3002\n\u3053\u306e\u8a18\u4e8b\u306f [freee Engineers Advent Calendar 2015](http://qiita.com/advent-calendar/2015/freee) 7\u65e5\u76ee\u3067\u3059\u3002\n\n# ActiveRecord \u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\nRails \u306e ActiveRecord \u4fbf\u5229\u3067\u3059\u3088\u306d\u3002\n\u79c1\u306f\u307e\u3060 Rails \u4e00\u5e74\u751f\u3067\u3059\u304c\u3001\u65e5\u3005\u304a\u4e16\u8a71\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u500b\u4eba\u7684\u306b\u306f `has_many` \u3068\u304b\u306e Relation \u3068 `where` \u306b\u59cb\u307e\u308b QueryMethods \u304c\u7279\u306b\u3044\u3044\u611f\u3058\u3067\u3059\u3002\n\n\u3057\u304b\u3057\u3053\u306e ActiveRecord\u3001\u4fbf\u5229\u6a5f\u80fd\u6e80\u8f09\u306e\u305f\u3081\u304b\u975e\u5e38\u306b\u9045\u3044\u3053\u3068\u304c\u3057\u3070\u3057\u3070\u3002\n\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u53d6\u308b\u3068\u3001\u305f\u3044\u3066\u3044\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u547c\u3073\u51fa\u3057\u304c\u91cd\u3044\u3067\u3059\u3002\n\u7279\u306b index \u51e6\u7406\u3067\u306f\u5927\u91cf\u306e AR \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u306b\u306a\u308a\u307e\u3059\u3002\n\nindex (show) \u51e6\u7406\u3001\u7279\u306b\u51fa\u529b\u304cJSON\u306e\u5834\u5408\u306f\u3001DB \u306e\u5024\u3092\u307b\u3068\u3093\u3069\u305d\u306e\u307e\u307e\u683c\u7d0d\u3059\u308b\u3053\u3068\u304c\u591a\u304f\u3001\u305d\u306e\u5834\u5408\u306f AR \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u307e\u3067\u306f\u5fc5\u8981\u3068\u3057\u306a\u3044\u3053\u3068\u304c\u3088\u304f\u3042\u308a\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001\u30af\u30a8\u30ea\u751f\u6210\u307e\u3067 QueryMethods \u3067\u884c\u3044\u3001`to_sql` \u3092 `ActiveRecord::Base.connection.select_all` \u306a\u3069\u3067 Hash \u306b\u683c\u7d0d\u3057\u3066\u3057\u307e\u3046\u306e\u304c\u6709\u52b9\u3067\u3059\u3002\n\n@hotchpotch \u3055\u3093\u306e [activerecord-row-data](https://github.com/hotchpotch/activerecord-raw-data) gem \u304c\u305d\u306e\u8fba\u3092\u3088\u304b\u308c\u3068\u3084\u3063\u3066\u304f\u308c\u307e\u3059\u3002\n\n# Hash \u3060\u3051\u3067\u306f\u8db3\u308a\u306a\u3044\n\u30b7\u30f3\u30d7\u30eb\u306a REST API \u306a\u3069\u3067\u306f\u3053\u308c\u3067\u5341\u5206\u306a\u306e\u3067\u3059\u304c\u3001\u8907\u96d1\u306a\u30e2\u30c7\u30eb\u69cb\u9020\u3092\u4e00\u5ea6\u306b\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u306b\u306f\u3001\u4f9d\u7136 Active Record \u306e Relation \u3084\u3001\u30e2\u30c7\u30eb\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u6d41\u7528\u3057\u305f\u304f\u306a\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\nfreee \u306e\u5834\u5408\u3001\u53d6\u5f15\u306e\u4e00\u89a7\u8868\u793a\u306a\u3069\u3067\u306f\u8efd\u304f 10 \u4ee5\u4e0a\u306e\u30e2\u30c7\u30eb\u304c\u518d\u5e30\u7684\u306b\u95a2\u4e0e\u3057\u3001\u305d\u3046\u306a\u308b\u3068\u3055\u3059\u304c\u306b Hash \u3092\u30b4\u30ea\u30b4\u30ea\u3059\u308b\u306e\u306f\u3064\u3089\u3044\u3067\u3059\u3002\n\n\u307e\u305f\u3001\u73fe\u5728\u4f7f\u3063\u3066\u3044\u308b jbuilder \u3084 ActiveRecord::Serializer \u3092\u305d\u306e\u307e\u307e\u6d41\u7528\u3057\u305f\u3044\u3068\u3044\u3046\u306e\u3082\u3042\u308a\u307e\u3059\u3002\u65e2\u306b AR \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u3042\u308c\u3070\u305d\u306e\u307e\u307e\u6e21\u3057\u305f\u3044\u3067\u3059\u3057\u3001\u306a\u306b\u3088\u308a\u79fb\u884c\u306b\u3088\u308b\u30a8\u30f3\u30d0\u30b0\u304c\u6016\u3044\u3067\u3059\u3002\n\n# PseudoRecord: ActiveRecord \u306e\u3088\u3046\u306b\u632f\u308b\u821e\u3046\u3082\u306e\n\u305d\u3053\u3067 Hash \u3092\u30e9\u30c3\u30d7\u3057\u3066 ActiveRecord \u306e\u3088\u3046\u306b\u632f\u308b\u821e\u308f\u305b\u308b PseudoRecord \u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\nRuby \u3067\u306f\u72ac\u306e\u3088\u3046\u306b\u632f\u308b\u821e\u3046\u3082\u306e\u306f\u72ac\uff08\u3068\u3057\u3066\u6271\u3063\u3066\u3044\u3044\u306e\uff09\u3067\u3059\u3002\n\n\u4f8b\u3048\u3070\u3001\u3053\u3093\u306a\u611f\u3058\u3067\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\n```pseudo/models.rb\nPseudoRecord.define Article do\n  attributes :id, :title, :content \n  belongs_to :user\n  has_many :comments\nend\n\nPseudoRecord.define User do\n  import :display_name  # User#display_name\u3092\u53d6\u308a\u8fbc\u3080\n\n  attributes :id, :first_name, :last_name, :email\nend\n\nPseudoRecord.define Comment do\n  attributes :id, :article_id, :title, :content\n  has_many :replies\nend\n\nPseudoRecord.define Reply do\n  attributes :id, :comment_id, :content\nend\n```\n\nActiveModel::Serializer \u3092\u5229\u7528\u3059\u308b\u5834\u5408\u3053\u3093\u306a\u611f\u3058\u3067\u4f7f\u3044\u307e\u3059\u3002\n\n```.rb\n  records = Article.where(conditions)\n  render json: PseudoRecord::Article.build_from(records), each_serializer: ArticleSerializer\n```\n\n`records` \u3092\u6e21\u3059\u3068\u3053\u308d\u3092\u4e00\u3064\u30e9\u30c3\u30d7\u3059\u308b\u3060\u3051\u3067\u3059\u3002\nSerializer \u306e\u30b3\u30fc\u30c9\u306f\u7701\u7565\u3057\u307e\u3059\u304c\u901a\u5e38\u3068\u306a\u306b\u3082\u5909\u66f4\u305b\u305a\u306b\u3001Article \u306b\u95a2\u9023\u3059\u308b\u5024\u3092\u307e\u3068\u3081\u3066\u53d6\u3063\u3066\u3053\u308c\u307e\u3059\u3002\n\n# Ruby \u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3001\u305d\u308c\u306f\u81ea\u5206\u306e\u8db3\u3092\u6253\u3061\u629c\u3051\u308b\u9053\u5177\n\u3071\u3063\u3068\u898b\u3067\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001PseudoRecord \u306e\u4e2d\u306f\u30d0\u30ea\u30d0\u30ea\u306e\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u3059\u3002Rails \u7a0b\u3067\u306f\u306a\u3044\u3067\u3059\u304c\u3002\n\n\u3067\u306f\u3001\u4e00\u3064\u305a\u3064\u4e2d\u8eab\u3092\u89e3\u8aac\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n## Attributes\n`attributes` \u306f OpenStruct \u306e\u3088\u3046\u306b\u5358\u7d14\u306b\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u308b\u306e\u3068\u3001SELECT\u5bfe\u8c61\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n```pseudo_record/core.rb\n  # ActiveModel::Serializer\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306fread_attribute_for_serialization\u3067\n  # attributes\u306e\u5024\u3092\u53d6\u5f97\u3059\u308b\n  def read_attribute_for_serialization(name)\n    public_send(name)\n  end\n\n  module ClassMethods\n    def attributes(*attrs)\n      @attributes ||= []\n      attrs.each do |name|\n        next if @attributes.include? name\n        @attributes << name\n        if block_given?\n          yield name\n        else\n          define_method name do\n            @hash[name]\n          end\n        end\n      end\n    end\n  end\n```\n\n\u3061\u3087\u3063\u3068\u30c8\u30ea\u30c3\u30ad\u30fc\u306a\u306e\u306f\u30e1\u30bd\u30c3\u30c9\u5b9a\u7fa9\u3092\u5916\u304b\u3089\u4e0e\u3048\u3089\u308c\u308b\u70b9\u3067\u3059\u3002\n\u3053\u308c\u306b\u3088\u308a Time \u578b\u3092 TimeWithZone \u306b\u3059\u308b\u305f\u3081\u306e `time_attributes` \u3084 enumerize \u3092 Value \u578b\u306b\u3059\u308b\u305f\u3081\u306e `enum_attributes` \u306e\u3088\u3046\u306a\u62e1\u5f35\u3092\u5bb9\u6613\u306b\u3067\u304d\u307e\u3059\u3002\n\u307e\u305f\u3001\u624b\u52d5\u3067\u30a2\u30af\u30bb\u30b5\u30e1\u30bd\u30c3\u30c9\u3092\u3044\u304f\u3089\u3067\u3082\u4e0a\u66f8\u304d\u53ef\u80fd\u3067\u3059\u3002\n\n## Relation\nRelation \u306e\u4f5c\u6210\u306f\u30b5\u30d6\u30e2\u30c7\u30eb\u306e\u30ed\u30fc\u30c9\u3068\u30bb\u30c3\u30c8\u306b\u306a\u308a\u307e\u3059\u3002\n\n```pseudo_record/core.rb\n  module ClassMethods\n    def belongs_to(name, opts = {})\n      add_relation(name, opts, id_key: :\"#{name}_id\", foreign_key: :id, ...)\n    end\n    def has_one(name, opts = {})\n      add_relation(name, opts, id_key: :id, foreign_key: :\"#{self.name.foreign_key}\", ...)\n    end\n    def has_many(name, opts = {})\n      add_relation(name, opts, id_key: :id, ..., to_array: true)\n    end\n\n    # relation\u306e\u5171\u901a\u5b9f\u88c5\n    def add_relation(name, opts, params)\n      updator = :\"update_#{name}\"\n      id_key = params[:id_key]\n      foreign_key = params[:foreign_key]\n      model_class = params[:model_class]\n      pseudo_class = params[:pseudo_class]\n      to_array = params[:to_array] || false\n\n      attributes id_key\n      define_method name do\n        @hash[name]\n      end\n      define_method updator do |id_map|\n        @hash[name] = id_map[@hash[id_key]]\n      end\n      add_preloader do |models|\n        ids = models.map{|model| model.hash[id_key]}.uniq\n        next if ids.blank?\n        sub_models = pseudo_class.select_by(model_class.where(foreign_key => ids), opts)\n        if to_array\n          id_map = ids.map{|id| [id, []]}.to_h\n          sub_models.each{|model| id_map[model.public_send(foreign_key)] << model}\n        else\n          id_map = sub_models.map{|model| [model.public_send(foreign_key), model]}.to_h\n        end\n        models.each{|model| model.public_send(updator, id_map)}\n        pseudo_class.preload(sub_models) unless opts[:shallow]\n      end\n    end\n\n     # \u64ec\u4f3c\u30e2\u30c7\u30eb\u5217\u306e\u751f\u6210\u6642\u306b\u884c\u3046\u521d\u671f\u5316\u51e6\u7406\u3092\u767b\u9332\u3059\u308b\n     def add_preloader(&proc)\n      @preloaders ||= []\n      @preloaders << proc\n    end\n\n    # \u767b\u9332\u3055\u308c\u305f\u521d\u671f\u5316\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\n    def preload(models)\n      return unless @preloaders\n      @preloaders.each{|proc| proc.call(models)}\n    end\n  end\n```\n\n\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4e00\u756a\u306e\u30b3\u30a2\u90e8\u5206\u3002\u518d\u5e30\u7684\u306b\u4f9d\u5b58\u95a2\u4fc2\u3092 N+1 \u3092\u56de\u907f\u3057\u3064\u3064\u89e3\u6c7a\u3057\u3001\u30a2\u30af\u30bb\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n\u9577\u3044\u3093\u3067\u7701\u7565\u3057\u307e\u3057\u305f\u304c\u3001`belongs_to`\u3001`has_one`\u3001`has_many` \u306f ActiveSupport::Inflector \u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u9069\u5207\u306a\u5024\u3092 `add_relation` \u306b\u6e21\u3057\u307e\u3059\u3002\n\n## Model\u306e\u30e1\u30bd\u30c3\u30c9\u8ffd\u52a0\n```pseudo_record.rb\nmodule PseudoRecord\n  # \u64ec\u4f3c\u30e2\u30c7\u30eb\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\n  def self.define(base_class,  &block)\n    c = Class.new\n    c.extend Capture\n    c.class_eval(&block)\n    if c.imported_methods.present?\n      p = Class.new(base_class)\n      import(p, base_class, c.imported_methods)\n    else\n      p = Class.new\n    end\n    const_set(class_name, p)\n    p.include PseudoModels::Core\n    p.class_eval(&block)\n    p\n  end\n\n  private\n\n  # \u30d6\u30ed\u30c3\u30af\u3092\u30b9\u30ad\u30e3\u30f3\u3057\u3001import\u5185\u5bb9\u3092\u53d6\u5f97\u3059\u308b\u3060\u3051\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\n  module Capture\n    attr_reader :imported_methods\n    def import(*args)\n      @imported_methods = args\n    end\n    def method_missing(name, *args)\n    end\n  end\n\n  # \u89aa\u30af\u30e9\u30b9\u306e\u6307\u5b9a\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u306e\u307f\u3092\u53d6\u308a\u8fbc\u3080\n  def self.import(pseudo_class, base_class, methods)\n    (base_class.instance_methods - PseudoModels::Core.instance_methods -\n     Object.instance_methods - methods).each do |name|\n      # private\u306aundef_method\u3092\u7121\u7406\u3084\u308a\u547c\u3076\n      pseudo_class.send(:undef_method, name)\n    end\n  end\nend\n```\n\n\u30e1\u30bd\u30c3\u30c9\u306e\u53d6\u308a\u8fbc\u307f\u306f\u7d99\u627f\u3067\u884c\u3044\u3001\u4e0d\u8981\u306a\u30e1\u30bd\u30c3\u30c9\u3092 `undef_method` \u3057\u307e\u3059\u3002\n\n\u5143\u3005\u306f `UnboundMethod#bind` \u3067\u306a\u3093\u3068\u304b\u306a\u3089\u306a\u3044\u304b\u3068\u9811\u5f35\u3063\u3066\u307f\u305f\u3082\u306e\u306e\u3001[C \u30b3\u30fc\u30c9](https://github.com/ruby/ruby/blob/ruby_2_2/proc.c)\u306e\u65b9\u3067\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u308b\u306e\u3067\u3069\u3046\u3057\u3088\u3046\u3082\u306a\u304b\u3063\u305f\u306e\u3067\u3059\u3002\n\uff08Ruby \u306f\u9ed2\u9b54\u8853\u3057\u653e\u984c\u3068\u601d\u3063\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u610f\u5916\u3068\u767d\u304b\u3063\u305f\u3002\uff09\n\nfreee \u306e\u4eca\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3053\u306e `undef` \u306e\u624b\u6cd5\u306f\u4f7f\u308f\u305a\u3001\u5358\u7d14\u306b\u7d99\u627f\u3060\u3051\u3057\u3066\u4f7f\u3063\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5206\u304b\u308a\u306b\u304f\u3044\uff08`#[]` \u3067\u843d\u3061\u305f\u3068\u304b\u8a00\u308f\u308c\u3066\u3082\u3069\u308c\u3084\u306d\u3093\u3068\u3044\u3046\uff09\u306e\u3067\u3001\u660e\u793a\u7684\u306b\u8a31\u53ef\u3057\u305f\u3082\u306e\u306e\u307f\u306b\u3059\u308b\u3053\u3068\u306b\u3057\u3066\u3001\u73fe\u5728\u30ec\u30d3\u30e5\u30fc\u7533\u8acb\u4e2d\u3002\n\n\u306a\u3093\u3067 `const_set` \u3092\u308f\u3056\u308f\u3056\u3057\u3066\u3044\u308b\u306e\u304b\u3068\u3044\u3046\u3068\u3001\u76f8\u4e92\u4f9d\u5b58\u3057\u305f\u5834\u5408\u306b\u5b9a\u6570\u306e\u53c2\u7167\u304c\u30eb\u30fc\u30d7\u3059\u308b\u304b\u3089\u3067\u3059\u3002\n\n```.rb\nPseudo::User = PseudoRecord.define do\n  import User, :display_name\n  ...\nend\n```\n\n\u307f\u305f\u3044\u306a\u65b9\u304c\u3001git grep \u3067\u63a2\u3057\u3084\u3059\u3044\u304b\u3068\u601d\u3063\u305f\u306e\u3067\u3059\u304c\u7121\u7406\u3067\u3057\u305f\u3002\n\u4ed5\u65b9\u306a\u3044\u306e\u3067\u30b3\u30e1\u30f3\u30c8\u3067\u66f8\u3044\u3066\u304a\u304f\u3053\u3068\u306b\u3002\n\n\u307e\u305f\u3001\u4ed6\u306e\u65b9\u6cd5\u3068\u3057\u3066\u306f\u3001\u5fc5\u8981\u306a\u30e1\u30bd\u30c3\u30c9\u3092\u5168\u3066 Concern \u306b\u3057\u3066\u30e2\u30b8\u30e5\u30fc\u30eb\u306e `include` \u306b\u3059\u308b\u3068\u3044\u3046\u306e\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u3061\u3089\u306e\u65b9\u304c\u5b89\u5168\u3067\u7dba\u9e97\u306a\u306e\u3067\u3059\u304c\u3001\u554f\u984c\u306f\u5143\u306e\u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9\u306b\u624b\u3092\u5165\u308c\u308b\u5fc5\u8981\u304c\u3042\u308b\u70b9\u3067\u3059\u3002\n\u305f\u3044\u3066\u3044\u306e\u4f7f\u3044\u305f\u3044\u30e1\u30bd\u30c3\u30c9\u306f\u305d\u306e\u30e2\u30c7\u30eb\u306e\u6975\u3081\u3066\u57fa\u672c\u7684\u306a\u30e1\u30bd\u30c3\u30c9\u3067\u3001\u901a\u5e38\u30e2\u30c7\u30eb\u30af\u30e9\u30b9\u306b\u76f4\u66f8\u304d\u3059\u308b\u3088\u3046\u306a\u3082\u306e\u304c\u307b\u3068\u3093\u3069\u3067\u3059\u3002\n\u591a\u304f\u306e\u4eba\u304c\u898b\u308b\u30b3\u30fc\u30c9\u306e\u53ef\u8aad\u6027\u3092\u9ad8\u901f\u5316\u306e\u305f\u3081\u306b\u4e0b\u3052\u308b\u306e\u306f\u907f\u3051\u305f\u3044\u306e\u3067\u3001\u3061\u3087\u3063\u3068\u5f37\u5f15\u3067\u3059\u304c\u30e9\u30a4\u30d6\u30e9\u30ea\u5074\u304c\u9811\u5f35\u308b\u65b9\u5411\u306b\u3057\u307e\u3057\u305f\u3002\n\n## Construction\n\u6700\u5f8c\u306b\u751f\u6210\u90e8\u5206\u3067\u3059\u3002\n\n```pseudo_record/core.rb\n  # opts\u306foverride\u7528\n  def initialize(hash, opts = {})\n    @hash = hash.symbolize_keys\n  end\n\n  module ClassMethods\n    # ActiveRecord\u306fnew\u3067\u4f59\u8a08\u306a\u51e6\u7406\u3092\u631f\u3080\u306e\u3067\u3001\u7d20\u306enew\u306e\u52d5\u4f5c\u306b\u623b\u3059\n    def new(*args, &block)\n      obj = allocate\n      obj.send(:initialize, *args, &block)\n      obj\n    end\n\n    # Polymorphic Model\u3092\u7d99\u627f\u3057\u305f\u5834\u5408\u306btype\u691c\u7d22\u306bPseudoRecord\u3092\u542b\u3081\u306a\u3044\u3088\u3046\u306b\u3059\u308b\n    def sti_name\n      superclass.sti_name\n    end\n\n    # Model\u306escope\u306a\u3069\u304b\u3089\u64ec\u4f3c\u30e2\u30c7\u30eb\u306e\u914d\u5217\u3092\u4f5c\u6210\u3059\u308b\n    def build_from(relation)\n      models = select_by(relation)\n      preload(models)\n      models\n    end\n\n    # Model\u306escope\u306a\u3069\u304b\u3089\u64ec\u4f3c\u30e2\u30c7\u30eb\u306e\u914d\u5217\u3092\u4f5c\u6210\u3059\u308b\n    # \u305f\u3060\u3057\u3001\u95a2\u9023\u3059\u308b\u30e2\u30c7\u30eb\u306f\u8aad\u307f\u8fbc\u307e\u306a\u3044\n    def select_by(relation, opts = {})\n      ActiveRecord::Base.connection.select_all(relation.select(@attributes).to_sql).map{|hash| self.new(hash, opts)}\n    end\n  end  \n```\n\n\u5730\u5473\u306b\u5384\u4ecb\u3060\u3063\u305f\u306e\u304c ActiveRecord \u306e `new` \u304c\u7d50\u69cb\u3044\u308d\u3044\u308d\u306a\u51e6\u7406\u3092\u3057\u3066\u3044\u3066\u7d99\u627f\u3059\u308b\u3060\u3051\u3067\u9045\u304f\u306a\u308b\u3053\u3068\u3067\u3057\u305f\u3002\n\u30b3\u30fc\u30c9\u3092\u8ffd\u3063\u3066\u3082\u56de\u907f\u3059\u308b\u624b\u6bb5\u304c\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u8d85\u5f37\u5f15\u3060\u3051\u3069 `new` \u3092\u4e0a\u66f8\u304d\u3057\u3001`super` \u3092\u547c\u3070\u305a\u306b `allocate`\u3001`initialize` \u3067\u6e08\u307e\u305b\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\n`sti_name` \u306e\u65b9\u306f `where` \u53e5\u3067\u7121\u99c4\u306a\u691c\u7d22\u3092\u3055\u305b\u306a\u3044\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\n\u305f\u3060\u3001Public API \u3067\u306f\u306a\u3044\u306e\u3067\u3001Rails \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u4e0a\u304c\u308b\u3068\u624b\u3092\u5165\u308c\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u304c\u96e3\u70b9\u3067\u3059\u304c\u3002\n\n# Test, Test Test\n\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u4f7f\u3046\u306e\u306f\u7c21\u5358\u3060\u3051\u3069\u3001\u3061\u3087\u3063\u3068\u8a18\u8ff0\u304c\u629c\u3051\u3066\u3044\u308b\u3068\u3042\u3063\u3055\u308a\u843d\u3061\u307e\u3059\u3002\n\u3053\u306e\u305f\u3081\u30c6\u30b9\u30c8\u3092\u304d\u3061\u3093\u3068\u66f8\u3044\u3066\u304a\u304f\u306e\u304c\u5fc5\u9808\u3067\u3059\u3002\n\n\u5e78\u3044 ActiveRecord \u3068\u6bd4\u8f03\u3057\u3066\u540c\u3058\u306a\u3089\u3044\u3044\u306e\u3067\u3001\u95a2\u9023\u3059\u308b\u30ec\u30b3\u30fc\u30c9\u3092\u5168\u90e8\u4f5c\u3063\u3066\u3001ActiveRecord \u7248JSON\u3068 PseudoRecord \u7248JSON\u306e\u6587\u5b57\u5217\u4e00\u81f4\u3092\u884c\u3046 spec \u3092\u5fc5\u305a\u7528\u610f\u3059\u308b\u3053\u3068\u3067\u5b89\u5fc3\u3057\u3066\u958b\u767a\u3067\u304d\u3066\u3044\u307e\u3059\u3002\uff08\u305d\u3057\u3066\u3088\u304f\u304d\u3061\u3093\u3068\u843d\u3061\u3066\u304f\u308c\u307e\u3059\uff09\n\n# \u3069\u308c\u3060\u3051\u65e9\u304f\u306a\u3063\u305f\u306e\u304b\n\u958b\u767a\u74b0\u5883\u3067\u5927\u304d\u306a\u30ea\u30af\u30a8\u30b9\u30c8\u3067\u306f process time \u3067 3.5 \u500d\u304f\u3089\u3044\u65e9\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\u3082\u3063\u3068\u3082\u3001\u30d7\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u3060\u3068\u4ed6\u306e\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u3084 index \u5bfe\u8c61\u304c\u5c11\u306a\u3044\u30b1\u30fc\u30b9\u3082\u3042\u3063\u305f\u305f\u3081\u3001\u5e73\u5747\u3067 20% \u7a0b\u5ea6\u3067\u3057\u305f\u304c\u3002\n\u4eca\u5f8c\u3001\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4ed6\u306e\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u306b\u3082\u9069\u7528\u3057\u3066\u3044\u304f\u4e88\u5b9a\u3067\u3059\u3002\n\n# \u4eca\u5f8c\u3084\u308a\u305f\u3044\u3053\u3068\n* \u53c2\u7167\u5143\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u30d0\u30c3\u30af\u30ea\u30f3\u30af\uff08has_many \u5148\u306e belongs_to\uff09\n* \u660e\u793a\u7684\u306a preload\n    * \u3044\u307e\u306f Relation \u304c\u3042\u308b\u3068\u5fc5\u305a\u30ed\u30fc\u30c9\u3059\u308b\u305f\u3081\u3001\u76f8\u4e92\u53c2\u7167\u3092\u8a18\u8ff0\u3067\u304d\u306a\u3044\n    * preload \u307f\u305f\u3044\u306b\u6307\u5b9a\u3057\u305f\u3082\u306e\u3060\u3051\u30ed\u30fc\u30c9\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u3044\n* JSON\u751f\u6210\u4ee5\u5916\u3078\u306e\u5fdc\u7528\n* \u4ed6\u306e\u30ec\u30dd\u30b8\u30c8\u30ea\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b gem \u5316\n\n\u307e\u305f\u3001gem \u5316\u306b\u3068\u3082\u306a\u3044\u3001\u4ed6\u3067\u3082\u4f7f\u3048\u305d\u3046\u306a\u3089\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306b\u3067\u304d\u306a\u3044\u304b\u306a\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002\n\u4e00\u5fdc\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u5316\u306b\u5099\u3048\u3066\u3001\u3053\u306e\u8a18\u4e8b\u5185\u306e\u30b3\u30fc\u30c9\u306fMIT License\u3068\u660e\u793a\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\uff08LICENSE.txt \u304c\u5fc5\u8981\u306a\u306e\u304b\u306a\u3002\u3068\u3063\u3068\u3068\u4f7f\u3044\u305f\u3044\u304b\u3089\u30e9\u30a4\u30bb\u30f3\u30b9\u304d\u3061\u3093\u3068\u3057\u308d\u3084\u3001\u3068\u3044\u3046\u65b9\u306f\u30b3\u30e1\u30f3\u30c8\u306a\u308a\u3067\u58f0\u3092\u304b\u3051\u3066\u304f\u3060\u3055\u3044\u3002\uff09\n\n# \u5ba3\u4f1d\nfreee \u3067\u306f\u30d3\u30b8\u30cd\u30b9\u5411\u3051\u30a2\u30d7\u30ea\u306e UX \u304b\u3089\u30b5\u30fc\u30d0\u306e CPU \u307e\u3067\u306e\u3042\u3089\u3086\u308b\u30ec\u30a4\u30e4\u3092\u653b\u3081\u308b[*\u30a8\u30f3\u30b8\u30cb\u30a2\u3092\u52df\u96c6](http://jobs.jobvite.com/freee/jobs)\u3057\u3066\u3044\u307e\u3059\u3002\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\n\u660e\u65e5\u306f freee \u306e\u4e16\u754c\u907a\u7523\u3001\u30df\u30b1\u30e9\u30f3\u30b8\u30a7\u30ed\u304c\u5f6b\u3063\u305f\u30e2\u30a2\u30a4\u3053\u3068 @ryosukeYamazaki \u3088\u308b MQ \u306b\u3064\u3044\u3066\u3067\u3059\u3002\u304a\u697d\u3057\u307f\u306b\u3002\n", "tags": ["Ruby", "Rails", "ActiveRecord", "\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0"]}