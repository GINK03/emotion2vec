{"context": " More than 1 year has passed since last update.Go \u3067 msgpack \u3092\u6271\u3046\u306b\u306f github.com/ugorji/go/codec \u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u6700\u8fd1 github.com/vmihailenco/msgpack \u3092\u898b\u3064\u3051\u3066\u3061\u3087\u3063\u3068\u3088\u3055\u305d\u3046\u3060\u3063\u305f\u306e\u3067\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3092\u53d6\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u30b3\u30fc\u30c9\npackage main\n\nimport (\n    \"bytes\"\n    \"os\"\n    \"testing\"\n    \"time\"\n\n    \"github.com/ugorji/go/codec\"\n    \"github.com/vmihailenco/msgpack\"\n)\n\ntype Event struct {\n    Tag    string    `codec:\"tag\" msgpack:\"tag\"`\n    Time   time.Time `codec:\"time\" msgpack:\"time\"`\n    Record map[string]interface{}\n}\n\nvar (\n    mh    = &codec.MsgpackHandle{RawToString: true}\n    event *Event\n)\n\nfunc init() {\n    event = &Event{\n        Tag:  \"sysstat.process\",\n        Time: time.Now(),\n        Record: map[string]interface{}{\n            \"pid\":      12353,\n            \"name\":     \"fluxion\",\n            \"cmd\":      \"fluxion -c fluxion.toml\",\n            \"rss\":      3563520,\n            \"vms\":      11005952,\n            \"shared\":   2666496,\n            \"cpu_time\": 80,\n        },\n    }\n}\n\nfunc BenchmarkCodecEncode(b *testing.B) {\n    buf := &bytes.Buffer{}\n    enc := codec.NewEncoder(buf, mh)\n    for i := 0; i < b.N; i++ {\n        enc.Encode(event)\n        buf.Reset()\n    }\n}\n\nfunc BenchmarkCodecDecode(b *testing.B) {\n    buf := &bytes.Buffer{}\n    codec.NewEncoder(buf, mh).Encode(event)\n    r := bytes.NewReader(buf.Bytes())\n    b.ResetTimer()\n\n    var ev Event\n    dec := codec.NewDecoder(r, mh)\n    for i := 0; i < b.N; i++ {\n        dec.Decode(&ev)\n        r.Seek(0, os.SEEK_SET)\n    }\n}\n\nfunc BenchmarkMsgpackEncode(b *testing.B) {\n    buf := &bytes.Buffer{}\n    enc := msgpack.NewEncoder(buf)\n    for i := 0; i < b.N; i++ {\n        enc.Encode(event)\n        buf.Reset()\n    }\n}\n\nfunc BenchmarkMsgpackDecode(b *testing.B) {\n    buf := &bytes.Buffer{}\n    msgpack.NewEncoder(buf).Encode(event)\n    r := bytes.NewReader(buf.Bytes())\n    b.ResetTimer()\n\n    var ev Event\n    dec := msgpack.NewDecoder(r)\n    for i := 0; i < b.N; i++ {\n        dec.Decode(&ev)\n        r.Seek(0, os.SEEK_SET)\n    }\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n$ go test -bench .\ntesting: warning: no tests to run\nPASS\nBenchmarkCodecEncode     1000000              1970 ns/op\nBenchmarkCodecDecode     1000000              2543 ns/op\nBenchmarkMsgpackEncode    500000              5274 ns/op\nBenchmarkMsgpackDecode    500000              6793 ns/op\nok      _/Users/yoshihisa/junk/msgpack  10.761s\n\ngithub.com/ugorji/go/codec \u306e\u65b9\u304c\u3060\u3044\u3076\u901f\u3044\u3067\u3059\u306d\u3002\n\n\u307e\u3068\u3081\n\ngithub.com/ugorji/go/codec\n\n\n\u901f\u3044\next type \u3092\u4f7f\u308f\u305a\u306b Go \u306e type \u3068 binary \u3092\u5909\u63db\u3059\u308b\u4ed5\u7d44\u307f\u304c\u3042\u308b \u203b\u8ffd\u8a18\u53c2\u7167\next type \u5bfe\u5fdc\nomitempty \u5bfe\u5fdc\nanonymous field \u306e\u30a4\u30f3\u30e9\u30a4\u30f3\u5316\u5bfe\u5fdc\n\n\ngithub.com/vmihailenco/msgpack\n\n\n\u30b3\u30fc\u30c9\u304c\u8aad\u307f\u3084\u3059\u3044\next type \u3092\u4f7f\u308f\u305a\u306b Go \u306e type \u3068 binary \u3092\u5909\u63db\u3059\u308b\u4ed5\u7d44\u307f\u304c\u3042\u308b\next type \u975e\u5bfe\u5fdc\nomitempty \u975e\u5bfe\u5fdc\nanonymous field \u306e\u30a4\u30f3\u30e9\u30a4\u30f3\u5316\u975e\u5bfe\u5fdc\n\n\n\n\u57fa\u672c\u7684\u306b\u306f github.com/ugorji/go/codec \u3092\u4f7f\u3046\u306e\u304c\u826f\u3055\u305d\u3046\u3067\u3059\u3002\ngithub.com/vmihailenco/msgpack \u306e\u65b9\u306f\u3001\u4f8b\u3048\u3070 time.Time \u3092 int64 \u578b\u3067\u8868\u73fe\u3057\u305f\u3044\u3051\u3069 ext type \u3092\u5b9a\u7fa9\u3057\u305f\u304f\u306a\u3044\u6642\u3068\u304b\u306b\u4f7f\u3048\u305d\u3046\u3067\u3059\u306d\u3002\u305f\u3060\u3057 decode \u3059\u308b\u6642\u306b\u578b\u306e\u30ac\u30a4\u30c9\u304c\u5fc5\u8981\u306b\u306a\u308b\u306e\u3067\u3001interface{} \u578b\u306b\u306f decode \u3067\u304d\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u304c\u3002\n\n\u8ffd\u8a18\next type \u3092\u4f7f\u308f\u305a\u306b Go \u306e type \u3068 binary \u3092\u76f8\u4e92\u5909\u63db\u3059\u308b\u4ed5\u7d44\u307f\u306f github.com/ugorji/go/codec \u306b\u306f\u7121\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u3088\u304f\u898b\u305f\u3089\u3042\u308a\u307e\u3057\u305f\u3002\u4ee5\u4e0b\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3057\u3066\u304a\u3051\u3070\u3044\u3044\u3088\u3046\u3067\u3059\u3002\ntype binaryUnmarshaler interface {\n    UnmarshalBinary(data []byte) error\n}\n\ntype binaryMarshaler interface {\n    MarshalBinary() (data []byte, err error)\n}\n\ntime.Time \u306f\u3053\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u306e\u3067\uff08\u305d\u308c\u306b\u5408\u308f\u305b\u3066\u5b9a\u7fa9\u3057\u305f\uff1f\uff09\u4f55\u3082\u3057\u306a\u304f\u3066\u3082 Go \u540c\u58eb\u3060\u3068\u3088\u3057\u306a\u306b\u6271\u3048\u308b\u3088\u3046\u3067\u3059\u3002\n\u306a\u304a\u3001github.com/vmihailenco/msgpack \u306e\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\ntype encoder interface {\n    EncodeMsgpack(io.Writer) error\n}\n\ntype decoder interface {\n    DecodeMsgpack(io.Reader) error\n}\n\n\nGo \u3067 msgpack \u3092\u6271\u3046\u306b\u306f github.com/ugorji/go/codec \u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u6700\u8fd1 github.com/vmihailenco/msgpack \u3092\u898b\u3064\u3051\u3066\u3061\u3087\u3063\u3068\u3088\u3055\u305d\u3046\u3060\u3063\u305f\u306e\u3067\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3092\u53d6\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n## \u30b3\u30fc\u30c9\n```go\npackage main\n\nimport (\n\t\"bytes\"\n\t\"os\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/ugorji/go/codec\"\n\t\"github.com/vmihailenco/msgpack\"\n)\n\ntype Event struct {\n\tTag    string    `codec:\"tag\" msgpack:\"tag\"`\n\tTime   time.Time `codec:\"time\" msgpack:\"time\"`\n\tRecord map[string]interface{}\n}\n\nvar (\n\tmh    = &codec.MsgpackHandle{RawToString: true}\n\tevent *Event\n)\n\nfunc init() {\n\tevent = &Event{\n\t\tTag:  \"sysstat.process\",\n\t\tTime: time.Now(),\n\t\tRecord: map[string]interface{}{\n\t\t\t\"pid\":      12353,\n\t\t\t\"name\":     \"fluxion\",\n\t\t\t\"cmd\":      \"fluxion -c fluxion.toml\",\n\t\t\t\"rss\":      3563520,\n\t\t\t\"vms\":      11005952,\n\t\t\t\"shared\":   2666496,\n\t\t\t\"cpu_time\": 80,\n\t\t},\n\t}\n}\n\nfunc BenchmarkCodecEncode(b *testing.B) {\n\tbuf := &bytes.Buffer{}\n\tenc := codec.NewEncoder(buf, mh)\n\tfor i := 0; i < b.N; i++ {\n\t\tenc.Encode(event)\n\t\tbuf.Reset()\n\t}\n}\n\nfunc BenchmarkCodecDecode(b *testing.B) {\n\tbuf := &bytes.Buffer{}\n\tcodec.NewEncoder(buf, mh).Encode(event)\n\tr := bytes.NewReader(buf.Bytes())\n\tb.ResetTimer()\n\n\tvar ev Event\n\tdec := codec.NewDecoder(r, mh)\n\tfor i := 0; i < b.N; i++ {\n\t\tdec.Decode(&ev)\n\t\tr.Seek(0, os.SEEK_SET)\n\t}\n}\n\nfunc BenchmarkMsgpackEncode(b *testing.B) {\n\tbuf := &bytes.Buffer{}\n\tenc := msgpack.NewEncoder(buf)\n\tfor i := 0; i < b.N; i++ {\n\t\tenc.Encode(event)\n\t\tbuf.Reset()\n\t}\n}\n\nfunc BenchmarkMsgpackDecode(b *testing.B) {\n\tbuf := &bytes.Buffer{}\n\tmsgpack.NewEncoder(buf).Encode(event)\n\tr := bytes.NewReader(buf.Bytes())\n\tb.ResetTimer()\n\n\tvar ev Event\n\tdec := msgpack.NewDecoder(r)\n\tfor i := 0; i < b.N; i++ {\n\t\tdec.Decode(&ev)\n\t\tr.Seek(0, os.SEEK_SET)\n\t}\n}\n```\n\n## \u5b9f\u884c\u7d50\u679c\n```\n$ go test -bench .\ntesting: warning: no tests to run\nPASS\nBenchmarkCodecEncode     1000000              1970 ns/op\nBenchmarkCodecDecode     1000000              2543 ns/op\nBenchmarkMsgpackEncode    500000              5274 ns/op\nBenchmarkMsgpackDecode    500000              6793 ns/op\nok      _/Users/yoshihisa/junk/msgpack  10.761s\n```\n\ngithub.com/ugorji/go/codec \u306e\u65b9\u304c\u3060\u3044\u3076\u901f\u3044\u3067\u3059\u306d\u3002\n\n## \u307e\u3068\u3081\n* github.com/ugorji/go/codec\n    * \u901f\u3044\n    * ext type \u3092\u4f7f\u308f\u305a\u306b Go \u306e type \u3068 binary \u3092\u5909\u63db\u3059\u308b\u4ed5\u7d44\u307f\u304c\u3042\u308b \u203b\u8ffd\u8a18\u53c2\u7167\n    * ext type \u5bfe\u5fdc\n    * omitempty \u5bfe\u5fdc\n    * anonymous field \u306e\u30a4\u30f3\u30e9\u30a4\u30f3\u5316\u5bfe\u5fdc\n* github.com/vmihailenco/msgpack\n    * \u30b3\u30fc\u30c9\u304c\u8aad\u307f\u3084\u3059\u3044\n    * ext type \u3092\u4f7f\u308f\u305a\u306b Go \u306e type \u3068 binary \u3092\u5909\u63db\u3059\u308b\u4ed5\u7d44\u307f\u304c\u3042\u308b\n    * ext type \u975e\u5bfe\u5fdc\n    * omitempty \u975e\u5bfe\u5fdc\n    * anonymous field \u306e\u30a4\u30f3\u30e9\u30a4\u30f3\u5316\u975e\u5bfe\u5fdc\n\n\u57fa\u672c\u7684\u306b\u306f github.com/ugorji/go/codec \u3092\u4f7f\u3046\u306e\u304c\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n\n~~github.com/vmihailenco/msgpack \u306e\u65b9\u306f\u3001\u4f8b\u3048\u3070 time.Time \u3092 int64 \u578b\u3067\u8868\u73fe\u3057\u305f\u3044\u3051\u3069 ext type \u3092\u5b9a\u7fa9\u3057\u305f\u304f\u306a\u3044\u6642\u3068\u304b\u306b\u4f7f\u3048\u305d\u3046\u3067\u3059\u306d\u3002~~\u305f\u3060\u3057 decode \u3059\u308b\u6642\u306b\u578b\u306e\u30ac\u30a4\u30c9\u304c\u5fc5\u8981\u306b\u306a\u308b\u306e\u3067\u3001interface{} \u578b\u306b\u306f decode \u3067\u304d\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u304c\u3002\n\n## \u8ffd\u8a18\next type \u3092\u4f7f\u308f\u305a\u306b Go \u306e type \u3068 binary \u3092\u76f8\u4e92\u5909\u63db\u3059\u308b\u4ed5\u7d44\u307f\u306f github.com/ugorji/go/codec \u306b\u306f\u7121\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u3088\u304f\u898b\u305f\u3089\u3042\u308a\u307e\u3057\u305f\u3002\u4ee5\u4e0b\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3057\u3066\u304a\u3051\u3070\u3044\u3044\u3088\u3046\u3067\u3059\u3002\n\n```go\ntype binaryUnmarshaler interface {\n\tUnmarshalBinary(data []byte) error\n}\n\ntype binaryMarshaler interface {\n\tMarshalBinary() (data []byte, err error)\n}\n```\n\ntime.Time \u306f\u3053\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u306e\u3067\uff08\u305d\u308c\u306b\u5408\u308f\u305b\u3066\u5b9a\u7fa9\u3057\u305f\uff1f\uff09\u4f55\u3082\u3057\u306a\u304f\u3066\u3082 Go \u540c\u58eb\u3060\u3068\u3088\u3057\u306a\u306b\u6271\u3048\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u306a\u304a\u3001github.com/vmihailenco/msgpack \u306e\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n```go\ntype encoder interface {\n\tEncodeMsgpack(io.Writer) error\n}\n\ntype decoder interface {\n\tDecodeMsgpack(io.Reader) error\n}\n```\n", "tags": ["Go", "msgpack", "golang"]}