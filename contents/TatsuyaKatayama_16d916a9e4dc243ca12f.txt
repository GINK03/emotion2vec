{"context": "\n\n\u653e\u7269\u9762\u306e\u6700\u5c0f\u5316\u554f\u984c\n\u4e0b\u8a18\u306e\u6700\u5c0f\u5316\u554f\u984c\u3092OpenMDAO\u3092\u4f7f\u3063\u3066\u89e3\u304f.\nminsubjecttoanswerf(x,y)=(x\u22123)2+xy+(y+4)2\u22123\u221250.0\u2264x\u226450.0\u221250.0\u2264y\u226450.0f(x,y)=\u221227.333atx=6.667,y=\u22127.333minf(x,y)=(x\u22123)2+xy+(y+4)2\u22123subjectto\u221250.0\u2264x\u226450.0\u221250.0\u2264y\u226450.0answerf(x,y)=\u221227.333atx=6.667,y=\u22127.333{\\begin{align}\n    {\\rm min} \\: \\: \\:& f(x,y) = (x-3)^2 + xy + (y+4)^2 - 3 \\\\\n\\\\\n    {\\rm subject \\: to} \\: \\: \\:&  -50.0\\leq x \\leq 50.0 \\\\\n                                &  -50.0\\leq y \\leq 50.0 \\\\\n\\\\\n    {\\rm answer} \\: \\: \\: &  f(x,y)=-27.333  \\: \\:  {\\rm at}\\:   x=6.667, \\: y=-7.333 \\\\\n\\\\\n\\end{align}\n}\n\n\nComponent\u306e\u6e96\u5099\n\u4e0b\u8a18\u306e\u3088\u3046\u306aComponent Class\u3092\u7d99\u627f\u3057\u305fParaboloid Class\u3092\u5b9a\u7fa9\u3059\u308b.\n\nparaboloid.py\nfrom openmdao.api import Component\n\nclass Paraboloid(Component):\n    \"\"\" Evaluates the equation f(x,y) = (x-3)^2 + xy + (y+4)^2 - 3 \"\"\"\n    def __init__(self):\n        super(Paraboloid, self).__init__()\n        self.add_param('x', val=0.0)\n        self.add_param('y', val=0.0)\n        self.add_output('f_xy', shape=1)\n\n    def solve_nonlinear(self, params, unknowns, resids):\n        \"\"\"f(x,y) = (x-3)^2 + xy + (y+4)^2 - 3\n        \"\"\"\n        x = params['x']; y = params['y']\n        unknowns['f_xy'] = (x-3.0)**2 + x*y + (y+4.0)**2 - 3.0\n\n    def linearize(self, params, unknowns, resids):\n        \"\"\" Jacobian for our paraboloid.\"\"\"\n        x = params['x']; y = params['y']\n        J = {}\n        J['f_xy', 'x'] = 2.0*x - 6.0 + y\n        J['f_xy', 'y'] = 2.0*y + 8.0 + x\n        return J\n\n\n\n__init__\u30e1\u30bd\u30c3\u30c9\u3067, \u521d\u671f\u50240.0\u306ex,y\u306e\u5165\u529b\u5909\u6570\u3092\u8ffd\u52a0. \nshape=1 \uff08\u6570\u5024\u578b\uff09\u306e\u672a\u77e5\u306e\u51fa\u529b\u5909\u6570f_xy\u3092\u5b9a\u7fa9.\nsolve_nonlinear\u30e1\u30bd\u30c3\u30c9\u3067f(x,y)f(x,y)f(x,y)\u306e\u8a08\u7b97\u3092\u884c\u3063\u3066\u3044\u308b.\u305f\u3060\u3057\u8a08\u7b97\u306b\u4f7f\u7528\u3059\u308bx,y\u306f,\u5f15\u6570\u306eparams\u3068\u3044\u3046\u8f9e\u66f8\u3067\u5f15\u304d\u6e21\u3055\u308c\u305f\u5024\u3092\u4f7f\u3044,\u540c\u3058\u304f\u5f15\u6570\u306eunknowns\u8f9e\u66f8\u306e\u4e2d\u8eab\u3092\u66f4\u65b0\u3057\u3066\u3044\u308b\nlinearize\u30e1\u30bd\u30c3\u30c9\u306f\u7121\u304f\u3066\u3082\u8a08\u7b97\u53ef\u80fd.\u30e4\u30b3\u30d3\u884c\u5217\u306b\u76f8\u5f53\u3059\u308b\u8f9e\u66f8\u3092\u8fd4\u3057\u3066\u3044\u308b.\nJ['f_xy', 'x']\u306f\u2202f(x,y)\u2202x\u2202f(x,y)\u2202x\\frac{\\partial  f(x,y)}{\\partial  x}\u306e\u5b9f\u969b\u306e\u8a08\u7b97\u3067\u3042\u308b.\n\nProblem\uff08\u554f\u984c\uff09\u306e\u8a2d\u5b9a\nParaboloid\u306ff(x,y)f(x,y)f(x,y)\u95a2\u6570\u3092\u8868\u3059\u90e8\u54c1(\u30af\u30e9\u30b9)\u3067\u3042\u308b.\n\u6700\u9069\u5316\u3092\u884c\u3046\u305f\u3081\u306b\u306f,\u8a2d\u8a08\u5909\u6570\u3084\u76ee\u7684\u95a2\u6570\u3092\u6700\u9069\u5316\u624b\u6cd5\u3092\u6c7a\u3081\u308b\u5fc5\u8981\u304c\u3042\u308b.\nparaboloid.py\u3092\u4fdd\u5b58\u3057\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3067\u4e0b\u8a18\u306e\u30b3\u30fc\u30c9\u3092\u30b9\u30af\u30ea\u30d7\u30c8\u3082\u3057\u304f\u306f\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3067\u5b9f\u884c\u3059\u308b\n\n\nopt_paraboloid.py\nfrom __future__ import print_function\nfrom openmdao.api import IndepVarComp, Component, Problem, Group, SqliteRecorder\nfrom openmdao.api import ScipyOptimizer\nfrom paraboloid import Paraboloid\n\ntop = Problem()\nroot = top.root = Group()\n\nroot.add('p1', IndepVarComp('x', 13.0))\nroot.add('p2', IndepVarComp('y', -14.0))\nroot.add('p', Paraboloid())\nroot.connect('p1.x', 'p.x')\nroot.connect('p2.y', 'p.y')\n\ntop.driver = ScipyOptimizer()\ntop.driver.options['optimizer'] = 'SLSQP'\ntop.driver.add_desvar('p1.x', lower=-50, upper=50)\ntop.driver.add_desvar('p2.y', lower=-50, upper=50)\ntop.driver.add_objective('p.f_xy')\n\nrecorder = SqliteRecorder('paraboloid')\nrecorder.options['record_params'] = True\nrecorder.options['record_metadata'] = True\ntop.driver.add_recorder(recorder)\n\ntop.setup()\ntop.run()\ntop.cleanup() \n\nprint('Minimum of %f found at (%f, %f)' % (top['p.f_xy'], top['p.x'], top['p.y']))\n\n\n\n\n\u307e\u305a\uff11\uff5e\uff14\u884c\u76ee\u3067\u5fc5\u8981\u306a\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\n6\u884c\u76ee\u3067top\u3068\u3044\u3046\u554f\u984c(Problem\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9)\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u308b.\u6587\u5b57\u901a\u308a\u306e\u4eca\u56de\u306e\u6700\u9069\u5316\u554f\u984c\u306etop\u3067\u3042\u308b.\n7\u884c\u76ee\u3067top\u3068\u3044\u3046\u554f\u984c\u306eroot\u306b\u65b0\u898f\u30b0\u30eb\u30fc\u30d7\u3092\u4f5c\u3063\u3066\u3044\u308b.\n9,10\u884c\u76ee\u3067\u5909\u6570x\u3084y\u3092\u6301\u3064p1,p2\u306eComponent(IndepVarComp)\u3092\u8ffd\u52a0\u3057\u3066\u3044\u308b.\n\u3053\u306ep1.x,p2.y\u304c\u81ea\u7531\u306a\u5024\u3092\u53d6\u308a\u3046\u308b\u672c\u554f\u984c(top)\u306e\u8a2d\u8a08\u5909\u6570\u3068\u306a\u308b.\n11\u884c\u76ee\u3067,p\u3068\u3044\u3046\u540d\u524d\u306eParaboloid\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092root\u306b\u8ffd\u52a0\u3057\u3066\u3044\u308b.\n12,13\u884c\u76ee\u3067\u8a2d\u8a08\u5909\u6570p1.x,p2.y\u3092Paraboloid\u306e\u5165\u529b\u5909\u6570p.x,p.y\u306b\u63a5\u7d9a\u3057\u3066\u3044\u308b.\n\u3053\u308c\u306b\u3088\u308a\u8a2d\u8a08\u5909\u6570\u3092p1.x,p2.y\u3092\u5909\u5316\u3055\u305b\u308c\u3070,Paraboloid\u306e\u51fa\u529b\u5909\u6570p.f_xy\u3082\u5909\u5316\u3059\u308b.\n15\u884c\u76eetop.driver = ScipyOptimizer()\u4ee5\u964d\u3067\u306f\u6700\u9069\u5316\u624b\u6cd5\u306b\u3064\u3044\u3066\u5b9a\u7fa9\u3057\u3066\u3044\u308b.\n15\u884c\u76ee\u3067\u6700\u9069\u5316\u30c9\u30e9\u30a4\u30d0\u306bScipyOptimizer\u3092\u6307\u5b9a\u3057\u3066\u3044\u308b.scipy\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u5404\u6700\u9069\u5316\u624b\u6cd5\u304c\u4f7f\u7528\u3067\u304d\u308b.\n16\u884c\u76ee\u3067\u6700\u9069\u5316\u624b\u6cd5\u3092SLSQP.\u9010\u6b21\u4e8c\u6b21\u8a08\u753b\u6cd5\u3067\u3042\u308b.\n17,18\u884c\u76ee\u3067\u306f\u8a2d\u8a08\u5909\u6570p1.x,p2.y\u306e\u53d6\u308a\u3046\u308b\u7bc4\u56f2\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b.\n\u305d\u3057\u306619\u884c\u76ee\u3067\u76ee\u7684\u95a2\u6570\u306baraboloid\u306e\u51fa\u529b\u5909\u6570p.f_xy\u3092\u6307\u5b9a\u3057\u3066\u308b.\n21\uff5e24\u884c\u76ee\u306f\u3001driver\u306e\u904b\u8ee2\u3092\u8a18\u9332\u3059\u308brecorder\u306e\u8a2d\u5b9a\u3067\u3042\u308b.\n21\u884c\u76eeSqliteRecorder\u306e\u5f15\u6570\u306f\u8a18\u9332\u3057\u305f\u30c7\u30fc\u30bf\u306e\u4fdd\u5b58\u30d5\u30a1\u30a4\u30eb\u3067\u3042\u308b.\n26\u884c\u76ee\u3067\u554f\u984c(top Problem)\u306esetup\u3092,27\u884c\u76ee\u3067\u6700\u9069\u5316\u3092\u5b9f\u884c\u3057,28\u884c\u76ee\u3067\u5f8c\u7247\u4ed8\u3051\u3092\u3057\u3066\u3044\u308b.\n\n\n\u6700\u9069\u5316\u7d50\u679c\n\u4e0b\u8a18\u306e\u3088\u3046\u306a\u5b9f\u884c\u7d50\u679c\u304c\u8868\u793a\u3055\u308c\u308b.\n\nstdout\nOptimization terminated successfully.    (Exit mode 0)\n            Current function value: [-27.33333329]\n            Iterations: 4\n            Function evaluations: 5\n            Gradient evaluations: 4\nOptimization Complete\nMinimum of -27.333333 found at (6.666856, -7.333543)\n\n\n\u6b21\u306bSqliteRecorder\u3067\u8a18\u9332\u3057\u305f\u904b\u8ee2\u8a18\u9332(\u30d5\u30a1\u30a4\u30eb\u540d:paraboloid)\u3092\u8aad\u307f\u8fbc\u3080.\n\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u4e0a\u3067\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c.\n\nIPython\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport sqlitedict\n\ndb =sqlitedict.SqliteDict(\"paraboloid\",\"iterations\")\na = np.zeros(5)\nfor i in range(0,5):\n    a[i] = db[db.keys()[i]][\"Unknowns\"][\"p.f_xy\"]\n\n\n\n\nIpython\u3064\u3065\u304d\nplt.plot(np.arange(0,5,1),a,\"-o\")\nplt.xlabel(\"iterations\")\nplt.ylabel(\"f_xy\")\nplt.show()\n\n\n\n# \u653e\u7269\u9762\u306e\u6700\u5c0f\u5316\u554f\u984c\n\u4e0b\u8a18\u306e\u6700\u5c0f\u5316\u554f\u984c\u3092OpenMDAO\u3092\u4f7f\u3063\u3066\u89e3\u304f.\n\n```math\n\\begin{align}\n    {\\rm min} \\: \\: \\:& f(x,y) = (x-3)^2 + xy + (y+4)^2 - 3 \\\\\n\\\\\n    {\\rm subject \\: to} \\: \\: \\:&  -50.0\\leq x \\leq 50.0 \\\\\n                                &  -50.0\\leq y \\leq 50.0 \\\\\n\\\\\n    {\\rm answer} \\: \\: \\: &  f(x,y)=-27.333  \\: \\:  {\\rm at}\\:   x=6.667, \\: y=-7.333 \\\\\n\\\\\n\\end{align}\n```\n\n---\n# Component\u306e\u6e96\u5099\n\u4e0b\u8a18\u306e\u3088\u3046\u306aComponent Class\u3092\u7d99\u627f\u3057\u305fParaboloid Class\u3092\u5b9a\u7fa9\u3059\u308b.\n\n```py:paraboloid.py\nfrom openmdao.api import Component\n\nclass Paraboloid(Component):\n    \"\"\" Evaluates the equation f(x,y) = (x-3)^2 + xy + (y+4)^2 - 3 \"\"\"\n    def __init__(self):\n        super(Paraboloid, self).__init__()\n        self.add_param('x', val=0.0)\n        self.add_param('y', val=0.0)\n        self.add_output('f_xy', shape=1)\n\n    def solve_nonlinear(self, params, unknowns, resids):\n        \"\"\"f(x,y) = (x-3)^2 + xy + (y+4)^2 - 3\n        \"\"\"\n        x = params['x']; y = params['y']\n        unknowns['f_xy'] = (x-3.0)**2 + x*y + (y+4.0)**2 - 3.0\n\n    def linearize(self, params, unknowns, resids):\n        \"\"\" Jacobian for our paraboloid.\"\"\"\n        x = params['x']; y = params['y']\n        J = {}\n        J['f_xy', 'x'] = 2.0*x - 6.0 + y\n        J['f_xy', 'y'] = 2.0*y + 8.0 + x\n        return J\n```\n\n---\n`__init__`\u30e1\u30bd\u30c3\u30c9\u3067, \u521d\u671f\u50240.0\u306e`x,y`\u306e\u5165\u529b\u5909\u6570\u3092\u8ffd\u52a0. \nshape=1 \uff08\u6570\u5024\u578b\uff09\u306e\u672a\u77e5\u306e\u51fa\u529b\u5909\u6570`f_xy`\u3092\u5b9a\u7fa9.\n\n`solve_nonlinear`\u30e1\u30bd\u30c3\u30c9\u3067$f(x,y)$\u306e\u8a08\u7b97\u3092\u884c\u3063\u3066\u3044\u308b.\u305f\u3060\u3057\u8a08\u7b97\u306b\u4f7f\u7528\u3059\u308b`x,y`\u306f,\u5f15\u6570\u306eparams\u3068\u3044\u3046\u8f9e\u66f8\u3067\u5f15\u304d\u6e21\u3055\u308c\u305f\u5024\u3092\u4f7f\u3044,\u540c\u3058\u304f\u5f15\u6570\u306e`unknowns`\u8f9e\u66f8\u306e\u4e2d\u8eab\u3092\u66f4\u65b0\u3057\u3066\u3044\u308b\n\n`linearize`\u30e1\u30bd\u30c3\u30c9\u306f\u7121\u304f\u3066\u3082\u8a08\u7b97\u53ef\u80fd.\u30e4\u30b3\u30d3\u884c\u5217\u306b\u76f8\u5f53\u3059\u308b\u8f9e\u66f8\u3092\u8fd4\u3057\u3066\u3044\u308b.\n`J['f_xy', 'x']`\u306f$\\frac{\\partial  f(x,y)}{\\partial  x}$\u306e\u5b9f\u969b\u306e\u8a08\u7b97\u3067\u3042\u308b.\n\n# Problem\uff08\u554f\u984c\uff09\u306e\u8a2d\u5b9a\nParaboloid\u306f$f(x,y)$\u95a2\u6570\u3092\u8868\u3059\u90e8\u54c1(\u30af\u30e9\u30b9)\u3067\u3042\u308b.\n\u6700\u9069\u5316\u3092\u884c\u3046\u305f\u3081\u306b\u306f,\u8a2d\u8a08\u5909\u6570\u3084\u76ee\u7684\u95a2\u6570\u3092\u6700\u9069\u5316\u624b\u6cd5\u3092\u6c7a\u3081\u308b\u5fc5\u8981\u304c\u3042\u308b.\nparaboloid.py\u3092\u4fdd\u5b58\u3057\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3067\u4e0b\u8a18\u306e\u30b3\u30fc\u30c9\u3092\u30b9\u30af\u30ea\u30d7\u30c8\u3082\u3057\u304f\u306f\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3067\u5b9f\u884c\u3059\u308b\n\n---\n\n```py:opt_paraboloid.py\nfrom __future__ import print_function\nfrom openmdao.api import IndepVarComp, Component, Problem, Group, SqliteRecorder\nfrom openmdao.api import ScipyOptimizer\nfrom paraboloid import Paraboloid\n\ntop = Problem()\nroot = top.root = Group()\n\nroot.add('p1', IndepVarComp('x', 13.0))\nroot.add('p2', IndepVarComp('y', -14.0))\nroot.add('p', Paraboloid())\nroot.connect('p1.x', 'p.x')\nroot.connect('p2.y', 'p.y')\n\ntop.driver = ScipyOptimizer()\ntop.driver.options['optimizer'] = 'SLSQP'\ntop.driver.add_desvar('p1.x', lower=-50, upper=50)\ntop.driver.add_desvar('p2.y', lower=-50, upper=50)\ntop.driver.add_objective('p.f_xy')\n\nrecorder = SqliteRecorder('paraboloid')\nrecorder.options['record_params'] = True\nrecorder.options['record_metadata'] = True\ntop.driver.add_recorder(recorder)\n\ntop.setup()\ntop.run()\ntop.cleanup() \n\nprint('Minimum of %f found at (%f, %f)' % (top['p.f_xy'], top['p.x'], top['p.y']))\n\n```\n\n---\n\u307e\u305a\uff11\uff5e\uff14\u884c\u76ee\u3067\u5fc5\u8981\u306a\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\n6\u884c\u76ee\u3067top\u3068\u3044\u3046\u554f\u984c(Problem\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9)\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u308b.\u6587\u5b57\u901a\u308a\u306e\u4eca\u56de\u306e\u6700\u9069\u5316\u554f\u984c\u306etop\u3067\u3042\u308b.\n7\u884c\u76ee\u3067top\u3068\u3044\u3046\u554f\u984c\u306eroot\u306b\u65b0\u898f\u30b0\u30eb\u30fc\u30d7\u3092\u4f5c\u3063\u3066\u3044\u308b.\n9,10\u884c\u76ee\u3067\u5909\u6570`x`\u3084`y`\u3092\u6301\u3064p1,p2\u306eComponent(IndepVarComp)\u3092\u8ffd\u52a0\u3057\u3066\u3044\u308b.\n\u3053\u306e`p1.x,p2.y`\u304c\u81ea\u7531\u306a\u5024\u3092\u53d6\u308a\u3046\u308b\u672c\u554f\u984c(top)\u306e\u8a2d\u8a08\u5909\u6570\u3068\u306a\u308b.\n11\u884c\u76ee\u3067,p\u3068\u3044\u3046\u540d\u524d\u306eParaboloid\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092root\u306b\u8ffd\u52a0\u3057\u3066\u3044\u308b.\n12,13\u884c\u76ee\u3067\u8a2d\u8a08\u5909\u6570`p1.x,p2.y`\u3092Paraboloid\u306e\u5165\u529b\u5909\u6570`p.x,p.y`\u306b\u63a5\u7d9a\u3057\u3066\u3044\u308b.\n\u3053\u308c\u306b\u3088\u308a\u8a2d\u8a08\u5909\u6570\u3092`p1.x,p2.y`\u3092\u5909\u5316\u3055\u305b\u308c\u3070,Paraboloid\u306e\u51fa\u529b\u5909\u6570`p.f_xy`\u3082\u5909\u5316\u3059\u308b.\n\n15\u884c\u76ee`top.driver = ScipyOptimizer()`\u4ee5\u964d\u3067\u306f\u6700\u9069\u5316\u624b\u6cd5\u306b\u3064\u3044\u3066\u5b9a\u7fa9\u3057\u3066\u3044\u308b.\n15\u884c\u76ee\u3067\u6700\u9069\u5316\u30c9\u30e9\u30a4\u30d0\u306bScipyOptimizer\u3092\u6307\u5b9a\u3057\u3066\u3044\u308b.scipy\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u5404\u6700\u9069\u5316\u624b\u6cd5\u304c\u4f7f\u7528\u3067\u304d\u308b.\n16\u884c\u76ee\u3067\u6700\u9069\u5316\u624b\u6cd5\u3092SLSQP.\u9010\u6b21\u4e8c\u6b21\u8a08\u753b\u6cd5\u3067\u3042\u308b.\n17,18\u884c\u76ee\u3067\u306f\u8a2d\u8a08\u5909\u6570`p1.x,p2.y`\u306e\u53d6\u308a\u3046\u308b\u7bc4\u56f2\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b.\n\u305d\u3057\u306619\u884c\u76ee\u3067\u76ee\u7684\u95a2\u6570\u306baraboloid\u306e\u51fa\u529b\u5909\u6570`p.f_xy`\u3092\u6307\u5b9a\u3057\u3066\u308b.\n\n21\uff5e24\u884c\u76ee\u306f\u3001driver\u306e\u904b\u8ee2\u3092\u8a18\u9332\u3059\u308brecorder\u306e\u8a2d\u5b9a\u3067\u3042\u308b.\n21\u884c\u76eeSqliteRecorder\u306e\u5f15\u6570\u306f\u8a18\u9332\u3057\u305f\u30c7\u30fc\u30bf\u306e\u4fdd\u5b58\u30d5\u30a1\u30a4\u30eb\u3067\u3042\u308b.\n\n26\u884c\u76ee\u3067\u554f\u984c(top Problem)\u306esetup\u3092,27\u884c\u76ee\u3067\u6700\u9069\u5316\u3092\u5b9f\u884c\u3057,28\u884c\u76ee\u3067\u5f8c\u7247\u4ed8\u3051\u3092\u3057\u3066\u3044\u308b.\n\n---\n#\u6700\u9069\u5316\u7d50\u679c\n\u4e0b\u8a18\u306e\u3088\u3046\u306a\u5b9f\u884c\u7d50\u679c\u304c\u8868\u793a\u3055\u308c\u308b.\n\n```bash:stdout\nOptimization terminated successfully.    (Exit mode 0)\n            Current function value: [-27.33333329]\n            Iterations: 4\n            Function evaluations: 5\n            Gradient evaluations: 4\nOptimization Complete\nMinimum of -27.333333 found at (6.666856, -7.333543)\n```\n\n\u6b21\u306bSqliteRecorder\u3067\u8a18\u9332\u3057\u305f\u904b\u8ee2\u8a18\u9332(\u30d5\u30a1\u30a4\u30eb\u540d:paraboloid)\u3092\u8aad\u307f\u8fbc\u3080.\n\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u4e0a\u3067\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c.\n\n```py:IPython\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport sqlitedict\n\ndb =sqlitedict.SqliteDict(\"paraboloid\",\"iterations\")\na = np.zeros(5)\nfor i in range(0,5):\n    a[i] = db[db.keys()[i]][\"Unknowns\"][\"p.f_xy\"]\n```\n\n---\n\n```py:Ipython\u3064\u3065\u304d\nplt.plot(np.arange(0,5,1),a,\"-o\")\nplt.xlabel(\"iterations\")\nplt.ylabel(\"f_xy\")\nplt.show()\n```\n![figure_1.png](https://qiita-image-store.s3.amazonaws.com/0/132571/cbf71a63-f679-872a-3e3d-7fa67dcc3554.png)\n\n\n\n\n\n", "tags": ["OpenMDAO", "Python", "\u6700\u9069\u5316"]}