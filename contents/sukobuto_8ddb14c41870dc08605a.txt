{"tags": ["knockoutjs3.0.0", "JavaScript"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002\u4ed5\u4e8b\u306b\u3066\u3001\u30d3\u30c3\u30c8\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u305d\u306e\u307e\u307e\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306b\u30d0\u30a4\u30f3\u30c9\u3057\u305f\u3044\u5834\u9762\u304c\u3042\u3063\u305f\u306e\u3067\u4f5c\u308a\u307e\u3057\u305f\u3002\n\u672c\u5bb6\u306e checked \u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0 \u3092\u771f\u4f3c\u3066\u3044\u307e\u3059\u3002\n\n\n\u3084\u308a\u305f\u3044\u3053\u3068\n\u30d3\u30c3\u30c8\u30d5\u30a3\u30fc\u30eb\u30c9\uff08\u30d3\u30c3\u30c8\u30de\u30b9\u30af\u3092\u4f7f\u3063\u3066\u30d5\u30e9\u30b0\u3092\u5408\u6210\u3057\u305f\u6570\u5024\uff09 \u306e\u5404\u30d5\u30e9\u30b0\u306e ON/OFF \u3092\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306b\u5bfe\u5fdc\u3065\u3051\u308b\n 0  1  0  1\u3000\u21902\u9032\u6570) \u30d3\u30c3\u30c8\u30d5\u30a3\u30fc\u30eb\u30c9 (10\u9032\u6570\u2192 4)\n[ ][+][ ][+]\u3000\u2190\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\n 0  0  0  1\u3000\u30d3\u30c3\u30c8\u30de\u30b9\u30af\uff08flag1\uff09\n 0  0  1  0  \u30d3\u30c3\u30c8\u30de\u30b9\u30af\uff08flag2\uff09\n 0  1  0  0  \u30d3\u30c3\u30c8\u30de\u30b9\u30af\uff08flag3\uff09\n...\n\n\n\u4f7f\u3044\u65b9\nchecked \u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0 \u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u3068\u307b\u307c\u540c\u3058\u3067\u3059\u3002\n\nView\n<input type=\"checkbox\" data-bind=\"bitField: bitFieldValue, checkedFlag: flag1\"/>\n<input type=\"checkbox\" data-bind=\"bitField: bitFieldValue, checkedFlag: flag2\"/>\n<input type=\"checkbox\" data-bind=\"bitField: bitFieldValue, checkedFlag: flag3\"/>\n\u5024: <span data-bind=\"text: bitFieldValue\"> </span>\n\n\n\nViewModel\nko.applyBindings({\n    bitFieldValue: ko.observable(0),\n    flag1: 1 << 0,  // = 0b0001\n    flag2: 1 << 1,  // = 0b0010\n    flag3: 1 << 2   // = 0b0100\n});\n\n\n\n\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u4ee5\u5916\u306b one-way \u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3059\u308b\u65b9\u6cd5\n\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u4ee5\u5916\u3078\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u5834\u5408\u3001ViewModel \u2192 View \u3078\u306e one-way \u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u306e\u307f\u53ef\u80fd\u3067\u3059\u3002\n\u7279\u5225\u306a\u65b9\u6cd5\u3067\u306f\u306a\u304f\u3001\u30d3\u30c3\u30c8\u6f14\u7b97 property & flag \u3092\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\nView\n<!-- visible binding \u306e\u4f8b -->\n<span data-bind=\"visible: bitFieldValue() & flag1\">\n    flag1 \u304c ON \u3067\u3059\n</span>\n\n<!-- Twitter Bootstrap \u3067 checkbox \u306e\u898b\u305f\u76ee\u3092\u30c8\u30b0\u30eb\u30dc\u30bf\u30f3\u306b\u3059\u308b\u4f8b -->\n<label class=\"btn\" data-bind=\"css: { active: bitFieldValue() & flag1 }\">\n    <input type=\"checkbox\" style=\"display: none;\"\n             data-bind=\"bitFIeld: bitFieldValue, checkedFlag: flag1\"/>\n    FLAG1\n</label>\n\n\n\n\u52d5\u4f5c\u30b5\u30f3\u30d7\u30eb\nKnockoutJS bitField binding : jsFiddle\nKnockout ES5 \u30d7\u30e9\u30b0\u30a4\u30f3\u3092\u4f7f\u3063\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u3053\u3061\u3089\nKnockoutJS bitField binding (ES5) : jsFiddle\n\u66dc\u65e5\u3092\u30d3\u30c3\u30c8\u30d5\u30a3\u30fc\u30eb\u30c9\u5316\u3057\u305f\u3082\u306e\u3068\u3001Linux \u306e\u30d5\u30a1\u30a4\u30eb\u6a29\u9650\u3092\u30e2\u30c7\u30eb\u306b\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\n\u30ab\u30b9\u30bf\u30e0\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\n\u4e0b\u8a18\u30b3\u30fc\u30c9\u3092 ko.applyBindings \u547c\u3073\u51fa\u3057\u524d\u306b\u633f\u5165\u3059\u308c\u3070\u4f7f\u3048\u307e\u3059\u3002\nknockout.js \u4ee5\u5916\u306b\u4f9d\u5b58\u3057\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\nbitFIeld-binding\nko.bindingHandlers.bitField = {\n    'after': ['value', 'attr'],\n    'init': function (element, valueAccessor, allBindings) {\n        var propWriters = allBindings()['_ko_property_writers'];\n\n        function checkedFlag() {\n            return allBindings['has']('checkedFlag')\n                ? ko.unwrap(allBindings.get('checkedFlag'))\n                : element.value;\n        }\n\n        function updateModel() {\n            // This updates the model value from the view value\n            // It runs in response to DOM events (click) and changes in checkedFlag.\n            var isChecked = element.checked,\n                elemValue = checkedFlag();\n\n            // When we're first setting up this computed, don't change any model state.\n            if (!shouldSet) {\n                return;\n            }\n\n            var modelValue = valueAccessor();\n            var unwrapped = ko.unwrap(modelValue);\n            if (oldElemValue !== elemValue) {\n                if (isChecked) {\n                    if (oldElemValue !== undefined) {\n                        unwrapped &= ~oldElemValue;\n                    }\n                    unwrapped |= elemValue;\n                }\n                oldElemValue = elemValue;\n            } else {\n                if (isChecked) {\n                    unwrapped |= elemValue;\n                } else {\n                    unwrapped &= ~elemValue;\n                }\n            }\n            if (ko.isObservable(modelValue)) {\n                modelValue(unwrapped);\n            } else if (propWriters['bitField']) {\n                propWriters.bitField(unwrapped);\n            } else {\n                valueAccessor(unwrapped);\n            }\n        }\n\n        function updateView() {\n            // This updates the view value from the model value.\n            // It runs in response to changes in the bound (checked) value.\n            var modelValue = ko.unwrap(valueAccessor());\n\n            element.checked = (modelValue & checkedFlag()) > 0;\n        }\n\n        if (element.type !== \"checkbox\") return;\n\n        var oldElemValue = checkedFlag(),\n            shouldSet = false;\n\n        // Set up two computeds to update the binding:\n\n        // The first responds to changes in the checkedFlag value and to element clicks\n        ko.computed(updateModel, null, { disposeWhenNodeIsRemoved: element });\n        ko.utils.registerEventHandler(element, \"click\", updateModel);\n\n        // The second responds to changes in the model value (the one associated with the bitField binding)\n        ko.computed(updateView, null, { disposeWhenNodeIdRemoved: element });\n\n        shouldSet = true;\n    }\n};\nko.expressionRewriting._twoWayBindings['bitField'] = true;\n\n\n\u4ed5\u4e8b\u306b\u3066\u3001\u30d3\u30c3\u30c8\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u305d\u306e\u307e\u307e\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306b\u30d0\u30a4\u30f3\u30c9\u3057\u305f\u3044\u5834\u9762\u304c\u3042\u3063\u305f\u306e\u3067\u4f5c\u308a\u307e\u3057\u305f\u3002\n\u672c\u5bb6\u306e [checked \u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0](https://github.com/knockout/knockout/blob/master/src/binding/defaultBindings/checked.js) \u3092\u771f\u4f3c\u3066\u3044\u307e\u3059\u3002\n\n![KnockoutJS bifField binding](http://gifzo.net/bGRJYOP0y0.gif)\n\n# \u3084\u308a\u305f\u3044\u3053\u3068\n\n[\u30d3\u30c3\u30c8\u30d5\u30a3\u30fc\u30eb\u30c9\uff08\u30d3\u30c3\u30c8\u30de\u30b9\u30af\u3092\u4f7f\u3063\u3066\u30d5\u30e9\u30b0\u3092\u5408\u6210\u3057\u305f\u6570\u5024\uff09](http://ja.wikipedia.org/wiki/%E3%83%93%E3%83%83%E3%83%88%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E3%83%89) \u306e\u5404\u30d5\u30e9\u30b0\u306e ON/OFF \u3092\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306b\u5bfe\u5fdc\u3065\u3051\u308b\n\n```\n 0  1  0  1\u3000\u21902\u9032\u6570) \u30d3\u30c3\u30c8\u30d5\u30a3\u30fc\u30eb\u30c9 (10\u9032\u6570\u2192 4)\n[ ][+][ ][+]\u3000\u2190\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\n 0  0  0  1\u3000\u30d3\u30c3\u30c8\u30de\u30b9\u30af\uff08flag1\uff09\n 0  0  1  0  \u30d3\u30c3\u30c8\u30de\u30b9\u30af\uff08flag2\uff09\n 0  1  0  0  \u30d3\u30c3\u30c8\u30de\u30b9\u30af\uff08flag3\uff09\n...\n```\n\n# \u4f7f\u3044\u65b9\n\n[checked \u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0](http://kojs.sukobuto.com/docs/checked-binding) \u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u3068\u307b\u307c\u540c\u3058\u3067\u3059\u3002\n\n```html:View\n<input type=\"checkbox\" data-bind=\"bitField: bitFieldValue, checkedFlag: flag1\"/>\n<input type=\"checkbox\" data-bind=\"bitField: bitFieldValue, checkedFlag: flag2\"/>\n<input type=\"checkbox\" data-bind=\"bitField: bitFieldValue, checkedFlag: flag3\"/>\n\u5024: <span data-bind=\"text: bitFieldValue\"> </span>\n```\n\n```js:ViewModel\nko.applyBindings({\n    bitFieldValue: ko.observable(0),\n    flag1: 1 << 0,  // = 0b0001\n    flag2: 1 << 1,  // = 0b0010\n    flag3: 1 << 2   // = 0b0100\n});\n```\n\n## \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u4ee5\u5916\u306b one-way \u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3059\u308b\u65b9\u6cd5\n\n\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u4ee5\u5916\u3078\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u5834\u5408\u3001ViewModel \u2192 View \u3078\u306e one-way \u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u306e\u307f\u53ef\u80fd\u3067\u3059\u3002\n\u7279\u5225\u306a\u65b9\u6cd5\u3067\u306f\u306a\u304f\u3001\u30d3\u30c3\u30c8\u6f14\u7b97 `property & flag` \u3092\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\n```html:View\n<!-- visible binding \u306e\u4f8b -->\n<span data-bind=\"visible: bitFieldValue() & flag1\">\n    flag1 \u304c ON \u3067\u3059\n</span>\n\n<!-- Twitter Bootstrap \u3067 checkbox \u306e\u898b\u305f\u76ee\u3092\u30c8\u30b0\u30eb\u30dc\u30bf\u30f3\u306b\u3059\u308b\u4f8b -->\n<label class=\"btn\" data-bind=\"css: { active: bitFieldValue() & flag1 }\">\n    <input type=\"checkbox\" style=\"display: none;\"\n             data-bind=\"bitFIeld: bitFieldValue, checkedFlag: flag1\"/>\n    FLAG1\n</label>\n```\n\n# \u52d5\u4f5c\u30b5\u30f3\u30d7\u30eb\n\n[KnockoutJS bitField binding : jsFiddle](http://jsfiddle.net/sukobuto/52UUY/5/)\n\nKnockout ES5 \u30d7\u30e9\u30b0\u30a4\u30f3\u3092\u4f7f\u3063\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u3053\u3061\u3089\n[KnockoutJS bitField binding (ES5) : jsFiddle](http://jsfiddle.net/sukobuto/qunnj6s9/)\n\n\u66dc\u65e5\u3092\u30d3\u30c3\u30c8\u30d5\u30a3\u30fc\u30eb\u30c9\u5316\u3057\u305f\u3082\u306e\u3068\u3001Linux \u306e\u30d5\u30a1\u30a4\u30eb\u6a29\u9650\u3092\u30e2\u30c7\u30eb\u306b\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\n# \u30ab\u30b9\u30bf\u30e0\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\n\n\u4e0b\u8a18\u30b3\u30fc\u30c9\u3092 ko.applyBindings \u547c\u3073\u51fa\u3057\u524d\u306b\u633f\u5165\u3059\u308c\u3070\u4f7f\u3048\u307e\u3059\u3002\nknockout.js \u4ee5\u5916\u306b\u4f9d\u5b58\u3057\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n```js:bitFIeld-binding\nko.bindingHandlers.bitField = {\n\t'after': ['value', 'attr'],\n\t'init': function (element, valueAccessor, allBindings) {\n\t\tvar propWriters = allBindings()['_ko_property_writers'];\n\n\t\tfunction checkedFlag() {\n\t\t\treturn allBindings['has']('checkedFlag')\n\t\t\t\t? ko.unwrap(allBindings.get('checkedFlag'))\n\t\t\t\t: element.value;\n\t\t}\n\n\t\tfunction updateModel() {\n\t\t\t// This updates the model value from the view value\n\t\t\t// It runs in response to DOM events (click) and changes in checkedFlag.\n\t\t\tvar isChecked = element.checked,\n\t\t\t\telemValue = checkedFlag();\n\n\t\t\t// When we're first setting up this computed, don't change any model state.\n\t\t\tif (!shouldSet) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar modelValue = valueAccessor();\n\t\t\tvar unwrapped = ko.unwrap(modelValue);\n\t\t\tif (oldElemValue !== elemValue) {\n\t\t\t\tif (isChecked) {\n\t\t\t\t\tif (oldElemValue !== undefined) {\n\t\t\t\t\t\tunwrapped &= ~oldElemValue;\n\t\t\t\t\t}\n\t\t\t\t\tunwrapped |= elemValue;\n\t\t\t\t}\n\t\t\t\toldElemValue = elemValue;\n\t\t\t} else {\n\t\t\t\tif (isChecked) {\n\t\t\t\t\tunwrapped |= elemValue;\n\t\t\t\t} else {\n\t\t\t\t\tunwrapped &= ~elemValue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (ko.isObservable(modelValue)) {\n\t\t\t\tmodelValue(unwrapped);\n\t\t\t} else if (propWriters['bitField']) {\n\t\t\t\tpropWriters.bitField(unwrapped);\n\t\t\t} else {\n\t\t\t\tvalueAccessor(unwrapped);\n\t\t\t}\n\t\t}\n\n\t\tfunction updateView() {\n\t\t\t// This updates the view value from the model value.\n\t\t\t// It runs in response to changes in the bound (checked) value.\n\t\t\tvar modelValue = ko.unwrap(valueAccessor());\n\n\t\t\telement.checked = (modelValue & checkedFlag()) > 0;\n\t\t}\n\n\t\tif (element.type !== \"checkbox\") return;\n\n\t\tvar oldElemValue = checkedFlag(),\n\t\t\tshouldSet = false;\n\n\t\t// Set up two computeds to update the binding:\n\n\t\t// The first responds to changes in the checkedFlag value and to element clicks\n\t\tko.computed(updateModel, null, { disposeWhenNodeIsRemoved: element });\n\t\tko.utils.registerEventHandler(element, \"click\", updateModel);\n\n\t\t// The second responds to changes in the model value (the one associated with the bitField binding)\n\t\tko.computed(updateView, null, { disposeWhenNodeIdRemoved: element });\n\n\t\tshouldSet = true;\n\t}\n};\nko.expressionRewriting._twoWayBindings['bitField'] = true;\n```\n"}