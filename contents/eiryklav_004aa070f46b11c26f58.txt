{"tags": ["Xcode", "Swift", "Swift2.0"], "context": " More than 1 year has passed since last update.\u65e2\u5b58\u306eUIPickerView\u3067\u306f\u30b5\u30a4\u30ba\u8abf\u6574\u304c\u30a2\u30d5\u30a3\u30f3\u5909\u63db\u3092\u3057\u305f\u308a\u3068\u9762\u5012\u306a\u306e\u3067\u3001\u81ea\u4f5c\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u4eca\u56de\u306f\u5b9f\u88c5\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u81ea\u4f5c\u3059\u308c\u3070\u30c7\u30fc\u30bf\u3092\u30eb\u30fc\u30d7\u306b\u3059\u308b\u306a\u3069\u306e\u62e1\u5f35\u3082\u624b\u8efd\u306b\u3067\u304d\u305d\u3046\u3067\u3059\u306d\u3002\n\n\n\u4f7f\u3044\u65b9\n\nViewController.swift\n  override func viewDidLoad() {\n    ...\n    // view1, ... \u306f SelectionView \u3092\u7d99\u627f\u3059\u308b\n\n    data += [Data(view: view1, id: \"v1\"), Data(view: view2, id: \"v2\"), Data(view: view3, id: \"v3\"), Data(view: view4, id: \"v4\")]\n\n    pickerView = ExPickerView(frame: CGRectMake(50, 300, 300, 125))\n    pickerView.dataSource = self\n    pickerView.delegate   = self\n    pickerView.reload()\n\n  }\n\n...\n\n\nextension ViewController : ExPickerViewDataSource {\n  func numberOfRowsInExPickerView(exPickerView: ExPickerView) -> Int {\n    return data.count\n  }\n}\n\nextension ViewController : ExPickerViewDelegate {\n  func exPickerView(exPickerView: ExPickerView, viewForRow row: Int) -> SelectionView {\n    return data[row].view\n  }\n\n  func exPickerView(exPickerView: ExPickerView, didSelectRow row: Int) {\n    print(\"select: \\(data[row].id)\")\n  }\n\n  func widthInExPickerView(exPickerView: ExPickerView) -> CGFloat {\n    return pickerView.frame.width\n  }\n\n  func rowHeightInExPickerView(exPickerView: ExPickerView) -> CGFloat {\n    return data[0].view.frame.height\n  }\n}\n\n\n\u3068\u3044\u3046\u611f\u3058\u306b\u4f7f\u3044\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u3053\u308c\u3067\u306f\u672c\u7269\u306eUIPickerView\u306e\u3088\u3046\u306b\u3001\u6ed1\u3089\u304b\u306bUIView\u304c\u62e1\u5927\u7e2e\u5c0f\u3057\u306a\u3044\u306e\u3067\u51fa\u6765\u306f\u30a4\u30de\u30a4\u30c1\u304b\u306a\u3041\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\u826f\u3044\u30a2\u30a4\u30c7\u30a2\u304c\u6709\u308c\u3070\u6559\u3048\u3066\u3044\u305f\u3060\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\u3002\n\n\u30b3\u30fc\u30c9\n\nExPickerView.swift\n\nimport UIKit\n\n// \u30b9\u30af\u30ed\u30fc\u30eb\u6642\u3001\u5404\u884c\u306e\u30f4\u30e5\u30fc\u304c\u62e1\u5927\u7e2e\u5c0f\u3092\u53ef\u80fd\u3068\u3059\u308b\npublic protocol Scalable {  // For subclass of UIView\n  func scaleWithRatio(ratio: CGFloat)\n}\n\n// Name: SelectionView: \u5404\u884c\u306e\u30f4\u30e5\u30fc(RowView\u306e\u65b9\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u304b\uff1f)\n// Desc: Scalable\u30d7\u30ed\u30c8\u30b3\u30eb \u3092\u6301\u3064 UIView \u306a\u3089\u4efb\u610f\u306e\u5b9f\u88c5\u3067OK\npublic class SelectionView : UIView, Scalable {\n\n  private var label:      UILabel!\n  private var imageView:  UIImageView!\n\n  private var labelRawX:          CGFloat!\n  private var labelRawPointSize:  CGFloat!\n\n  private var imageViewRawX:      CGFloat!\n  private var imageViewRawSize:   CGSize!\n\n  var text: String! {\n    didSet {\n      label.text = text\n      label.sizeToFit()\n      label.frame.origin.y = (frame.height - label.frame.height) / 2\n    }\n  }\n\n  var image: UIImage! {\n    didSet {\n      imageView.image = image\n    }\n  }\n\n  required public init?(coder aDecoder: NSCoder) { fatalError() }\n\n  override init(frame: CGRect) {\n    super.init(frame: frame)\n    label     = UILabel()\n    label.frame.origin.x = frame.width * 0.1\n    labelRawX = label.frame.origin.x\n    labelRawPointSize = label.font.pointSize\n    addSubview(label)\n\n    imageView = UIImageView()\n    imageView.frame.origin.x = frame.width * 0.8\n    imageViewRawX = imageView.frame.origin.x\n    imageView.frame.size = CGSizeMake(frame.height * 0.9, frame.height * 0.9)\n    imageView.frame.origin.y = (frame.height - imageView.frame.size.height) / 2\n    imageViewRawSize = imageView.frame.size\n    addSubview(imageView)\n  }\n\n  public func scaleWithRatio(ratio: CGFloat) {\n\n    guard 0 <= ratio && ratio <= 1 else {\n      print(\"SelectionView.scaleWithRatio: invalid ratio\")\n      return\n    }\n\n    label.font = UIFont(name: label.font.fontName, size: labelRawPointSize * ratio)\n    label.sizeToFit()\n    label.frame.origin.x = labelRawX + label.frame.width * (1.0 - ratio)\n    label.frame.origin.y = (frame.height - label.frame.height) / 2\n\n    imageView.frame.size.width  = imageViewRawSize.width  * ratio\n    imageView.frame.size.height = imageViewRawSize.height * ratio\n    imageView.frame.origin.x    = imageViewRawX - imageView.frame.width / 3 * (1.0 - ratio)\n    imageView.frame.origin.y    = (frame.height - imageView.frame.size.height) / 2\n\n  }\n\n}\n\n// Name: MovingConstrainedView\n// Desc: ExPickerView \u5185\u306e contentView: MovingConstrainedView \u306e\u79fb\u52d5\u5236\u9650\nclass MovingConstrainedView : UIView {\n  var top:    CGFloat = 0\n  var bottom: CGFloat = 0\n\n  override var frame: CGRect {\n    didSet {\n      if frame.origin.y < top {\n        frame.origin.y = top\n      }\n      if frame.maxY > bottom {\n        frame.origin.y = bottom - frame.height\n      }\n    }\n  }\n}\n\n// Name: ExPickerView\n// Desc: \u81ea\u4f5cUIPickerView\u672c\u4f53\n//       ExPickerViewDataSource \u3068 ExPickerViewDelegate \u3092\u8981\u6c42\u3059\u308b\npublic class ExPickerView : UIView {\n\n  weak public var dataSource: ExPickerViewDataSource?\n  weak public var delegate:   ExPickerViewDelegate?\n\n  // returns selected row.\n  public var selectedRow: Int = 0\n\n  override public init(frame: CGRect) {\n    super.init(frame: frame)\n    clipsToBounds = true\n    layer.borderColor = UIColor.grayColor().CGColor\n    layer.borderWidth = 1\n    layer.cornerRadius = 2.0\n  }\n\n  required public init?(coder aDecoder: NSCoder) { fatalError() }\n\n  public func viewForRow(row: Int) -> SelectionView? {\n    return delegate?.exPickerView(self, viewForRow: row)\n  }\n\n  // Reloading whole view or single component\n  public func reload() {\n\n    contentView = MovingConstrainedView()\n    addSubview(contentView)\n    contentView.top     = bounds.midY - rowHeight / 2 - CGFloat(numberOfRows - 1) * rowHeight\n    contentView.bottom  = bounds.midY + rowHeight / 2 + CGFloat(numberOfRows - 1) * rowHeight\n    contentView.frame = CGRect(\n      x:      0,\n      y:      bounds.midY - rowHeight / 2 - CGFloat(selectedRow) * rowHeight,\n      width:  width,\n      height: CGFloat(numberOfRows) * rowHeight\n    )\n\n    for row in 0..<numberOfRows {\n      let view = viewForRow(row)! ?? SelectionView()\n      view.frame.origin.x = (width - view.frame.width) / 2\n      view.frame.origin.y = CGFloat(row) * rowHeight + (rowHeight - view.frame.height) / 2\n      rowViews[row] = view\n      contentView.addSubview(view)\n    }\n\n    showSelectionViews()\n\n    let selectionRowHeight = frame.height\n    frontImageView = UIImageView(frame: CGRectMake(0, bounds.midY - selectionRowHeight / 2, width, selectionRowHeight))\n    frontImageView.image = UIImage(named: \"selection\")\n    frontImageView.alpha = 0.7\n\n//    addSubview(frontImageView)  // SelectionView \u306e\u524d\u9762\u306b\u8868\u793a\u3057\u305f\u3044\u5834\u5408\n    insertSubview(frontImageView, atIndex: 0) // SelectionView \u306e\u80cc\u9762\u306b\u8868\u793a\u3057\u305f\u3044\u5834\u5408\n\n  }\n\n  private func showSelectionViews() {\n    for row in 0..<numberOfRows {\n      let y = visibleLimitYForRow(row)\n      if 0 <= contentView.frame.origin.y + y && contentView.frame.origin.y + y <= bounds.height {\n        let view = rowViews[row]!\n        view.frame.origin.x = (width - view.frame.width) / 2\n        view.frame.origin.y = CGFloat(row) * rowHeight + (rowHeight - view.frame.height) / 2\n\n        let reduction = CGFloat(abs(row - containingSelectionViewRow())) * 0.1\n        view.scaleWithRatio(1.0 - reduction)\n      }\n    }\n  }\n\n  // selection. in this case, it means showing the appropriate row in the middle\n  // scrolls the specified row to center.\n  public func selectRow(row: Int, animated: Bool) {\n    // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3057\u306a\u3044\u306e\u3067animated\u4f7f\u3063\u3066\u307e\u305b\u3093\u3002\n\n    contentView.frame.origin.y = bounds.midY - rowHeight / 2 - CGFloat(row) * rowHeight\n\n    showSelectionViews()\n\n    selectedRow = row\n    delegate?.exPickerView(self, didSelectRow: row)\n  }\n\n  // MARK: - private -\n\n  private var contentView:    MovingConstrainedView!\n  private var frontImageView: UIImageView!\n  private var rowViews        = [Int : SelectionView]()\n\n  private func visibleLimitYForRow(row: Int) -> CGFloat {\n    return rowHeight * (2 * CGFloat(row) + 1) / 2\n  }\n\n  private func containingSelectionViewRow() -> Int {\n    return Int(floor((bounds.midY - contentView.frame.origin.y) / rowHeight))\n  }\n\n  private var width: CGFloat {\n    get {\n      guard let delegate = delegate else { return 200.0 }\n      return delegate.widthInExPickerView(self)\n    }\n  }\n\n  private var rowHeight: CGFloat {\n    get {\n      guard let delegate = delegate else { return 30.0 }\n      return delegate.rowHeightInExPickerView(self)\n    }\n  }\n\n  private var numberOfRows: Int {\n    get {\n      guard let dataSource = dataSource else { return 0 }\n      return dataSource.numberOfRowsInExPickerView(self)\n    }\n  }\n\n  private var previousLocationOfTouch: CGPoint!\n\n}\n\n// MARK: - touches responder -\nextension ExPickerView {\n\n  override public func touchesBegan(touches: Set<UITouch>, withEvent event: UIEvent?) {\n    super.touchesBegan(touches, withEvent: event)\n    let touch = touches.first!\n    let location = touch.locationInView(self)\n    previousLocationOfTouch = location\n  }\n\n  override public func touchesMoved(touches: Set<UITouch>, withEvent event: UIEvent?) {\n    super.touchesMoved(touches, withEvent: event)\n    let touch = touches.first!\n    let location = touch.locationInView(self)\n    let len = location.y - previousLocationOfTouch.y\n    contentView.frame.origin.y += len\n    previousLocationOfTouch = location\n    showSelectionViews()\n  }\n\n  override public func touchesEnded(touches: Set<UITouch>, withEvent event: UIEvent?) {\n    super.touchesEnded(touches, withEvent: event)\n    selectRow(containingSelectionViewRow(), animated: true)\n  }\n\n}\n\npublic protocol ExPickerViewDataSource: class {\n  func numberOfRowsInExPickerView(exPickerView: ExPickerView) -> Int\n}\n\npublic protocol ExPickerViewDelegate: class {\n  // dataSource \u3068\u306e\u9055\u3044\u306f view \u306b\u95a2\u308f\u308b delegate \u3067\u3042\u308b\u3053\u3068\n  func exPickerView(exPickerView: ExPickerView, viewForRow row: Int) -> SelectionView\n  func exPickerView(exPickerView: ExPickerView, didSelectRow row: Int)\n  func widthInExPickerView(exPickerView: ExPickerView) -> CGFloat\n  func rowHeightInExPickerView(exPickerView: ExPickerView) -> CGFloat\n}\n\n\n\u65e2\u5b58\u306eUIPickerView\u3067\u306f\u30b5\u30a4\u30ba\u8abf\u6574\u304c\u30a2\u30d5\u30a3\u30f3\u5909\u63db\u3092\u3057\u305f\u308a\u3068\u9762\u5012\u306a\u306e\u3067\u3001\u81ea\u4f5c\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u4eca\u56de\u306f\u5b9f\u88c5\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u81ea\u4f5c\u3059\u308c\u3070\u30c7\u30fc\u30bf\u3092\u30eb\u30fc\u30d7\u306b\u3059\u308b\u306a\u3069\u306e\u62e1\u5f35\u3082\u624b\u8efd\u306b\u3067\u304d\u305d\u3046\u3067\u3059\u306d\u3002\n\n![\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u306e\u52d5\u4f5c](https://i.gyazo.com/44458737c8921bd25a904a69c0d3361d.gif)\n\n## \u4f7f\u3044\u65b9\n\n```ViewController.swift\n  override func viewDidLoad() {\n    ...\n    // view1, ... \u306f SelectionView \u3092\u7d99\u627f\u3059\u308b\n\n    data += [Data(view: view1, id: \"v1\"), Data(view: view2, id: \"v2\"), Data(view: view3, id: \"v3\"), Data(view: view4, id: \"v4\")]\n    \n    pickerView = ExPickerView(frame: CGRectMake(50, 300, 300, 125))\n    pickerView.dataSource = self\n    pickerView.delegate   = self\n    pickerView.reload()\n    \n  }\n\n...\n\n\nextension ViewController : ExPickerViewDataSource {\n  func numberOfRowsInExPickerView(exPickerView: ExPickerView) -> Int {\n    return data.count\n  }\n}\n\nextension ViewController : ExPickerViewDelegate {\n  func exPickerView(exPickerView: ExPickerView, viewForRow row: Int) -> SelectionView {\n    return data[row].view\n  }\n  \n  func exPickerView(exPickerView: ExPickerView, didSelectRow row: Int) {\n    print(\"select: \\(data[row].id)\")\n  }\n  \n  func widthInExPickerView(exPickerView: ExPickerView) -> CGFloat {\n    return pickerView.frame.width\n  }\n  \n  func rowHeightInExPickerView(exPickerView: ExPickerView) -> CGFloat {\n    return data[0].view.frame.height\n  }\n}\n```\n\n\u3068\u3044\u3046\u611f\u3058\u306b\u4f7f\u3044\u307e\u3059\u3002\n\n\u3057\u304b\u3057\u3001\u3053\u308c\u3067\u306f\u672c\u7269\u306eUIPickerView\u306e\u3088\u3046\u306b\u3001\u6ed1\u3089\u304b\u306bUIView\u304c\u62e1\u5927\u7e2e\u5c0f\u3057\u306a\u3044\u306e\u3067\u51fa\u6765\u306f\u30a4\u30de\u30a4\u30c1\u304b\u306a\u3041\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\u826f\u3044\u30a2\u30a4\u30c7\u30a2\u304c\u6709\u308c\u3070\u6559\u3048\u3066\u3044\u305f\u3060\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\u3002\n## \u30b3\u30fc\u30c9\n\n```ExPickerView.swift\n\nimport UIKit\n\n// \u30b9\u30af\u30ed\u30fc\u30eb\u6642\u3001\u5404\u884c\u306e\u30f4\u30e5\u30fc\u304c\u62e1\u5927\u7e2e\u5c0f\u3092\u53ef\u80fd\u3068\u3059\u308b\npublic protocol Scalable {  // For subclass of UIView\n  func scaleWithRatio(ratio: CGFloat)\n}\n\n// Name: SelectionView: \u5404\u884c\u306e\u30f4\u30e5\u30fc(RowView\u306e\u65b9\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u304b\uff1f)\n// Desc: Scalable\u30d7\u30ed\u30c8\u30b3\u30eb \u3092\u6301\u3064 UIView \u306a\u3089\u4efb\u610f\u306e\u5b9f\u88c5\u3067OK\npublic class SelectionView : UIView, Scalable {\n  \n  private var label:      UILabel!\n  private var imageView:  UIImageView!\n  \n  private var labelRawX:          CGFloat!\n  private var labelRawPointSize:  CGFloat!\n  \n  private var imageViewRawX:      CGFloat!\n  private var imageViewRawSize:   CGSize!\n  \n  var text: String! {\n    didSet {\n      label.text = text\n      label.sizeToFit()\n      label.frame.origin.y = (frame.height - label.frame.height) / 2\n    }\n  }\n  \n  var image: UIImage! {\n    didSet {\n      imageView.image = image\n    }\n  }\n  \n  required public init?(coder aDecoder: NSCoder) { fatalError() }\n  \n  override init(frame: CGRect) {\n    super.init(frame: frame)\n    label     = UILabel()\n    label.frame.origin.x = frame.width * 0.1\n    labelRawX = label.frame.origin.x\n    labelRawPointSize = label.font.pointSize\n    addSubview(label)\n    \n    imageView = UIImageView()\n    imageView.frame.origin.x = frame.width * 0.8\n    imageViewRawX = imageView.frame.origin.x\n    imageView.frame.size = CGSizeMake(frame.height * 0.9, frame.height * 0.9)\n    imageView.frame.origin.y = (frame.height - imageView.frame.size.height) / 2\n    imageViewRawSize = imageView.frame.size\n    addSubview(imageView)\n  }\n  \n  public func scaleWithRatio(ratio: CGFloat) {\n    \n    guard 0 <= ratio && ratio <= 1 else {\n      print(\"SelectionView.scaleWithRatio: invalid ratio\")\n      return\n    }\n    \n    label.font = UIFont(name: label.font.fontName, size: labelRawPointSize * ratio)\n    label.sizeToFit()\n    label.frame.origin.x = labelRawX + label.frame.width * (1.0 - ratio)\n    label.frame.origin.y = (frame.height - label.frame.height) / 2\n    \n    imageView.frame.size.width  = imageViewRawSize.width  * ratio\n    imageView.frame.size.height = imageViewRawSize.height * ratio\n    imageView.frame.origin.x    = imageViewRawX - imageView.frame.width / 3 * (1.0 - ratio)\n    imageView.frame.origin.y    = (frame.height - imageView.frame.size.height) / 2\n    \n  }\n  \n}\n\n// Name: MovingConstrainedView\n// Desc: ExPickerView \u5185\u306e contentView: MovingConstrainedView \u306e\u79fb\u52d5\u5236\u9650\nclass MovingConstrainedView : UIView {\n  var top:    CGFloat = 0\n  var bottom: CGFloat = 0\n  \n  override var frame: CGRect {\n    didSet {\n      if frame.origin.y < top {\n        frame.origin.y = top\n      }\n      if frame.maxY > bottom {\n        frame.origin.y = bottom - frame.height\n      }\n    }\n  }\n}\n\n// Name: ExPickerView\n// Desc: \u81ea\u4f5cUIPickerView\u672c\u4f53\n//       ExPickerViewDataSource \u3068 ExPickerViewDelegate \u3092\u8981\u6c42\u3059\u308b\npublic class ExPickerView : UIView {\n  \n  weak public var dataSource: ExPickerViewDataSource?\n  weak public var delegate:   ExPickerViewDelegate?\n  \n  // returns selected row.\n  public var selectedRow: Int = 0\n  \n  override public init(frame: CGRect) {\n    super.init(frame: frame)\n    clipsToBounds = true\n    layer.borderColor = UIColor.grayColor().CGColor\n    layer.borderWidth = 1\n    layer.cornerRadius = 2.0\n  }\n  \n  required public init?(coder aDecoder: NSCoder) { fatalError() }\n  \n  public func viewForRow(row: Int) -> SelectionView? {\n    return delegate?.exPickerView(self, viewForRow: row)\n  }\n  \n  // Reloading whole view or single component\n  public func reload() {\n    \n    contentView = MovingConstrainedView()\n    addSubview(contentView)\n    contentView.top     = bounds.midY - rowHeight / 2 - CGFloat(numberOfRows - 1) * rowHeight\n    contentView.bottom  = bounds.midY + rowHeight / 2 + CGFloat(numberOfRows - 1) * rowHeight\n    contentView.frame = CGRect(\n      x:      0,\n      y:      bounds.midY - rowHeight / 2 - CGFloat(selectedRow) * rowHeight,\n      width:  width,\n      height: CGFloat(numberOfRows) * rowHeight\n    )\n    \n    for row in 0..<numberOfRows {\n      let view = viewForRow(row)! ?? SelectionView()\n      view.frame.origin.x = (width - view.frame.width) / 2\n      view.frame.origin.y = CGFloat(row) * rowHeight + (rowHeight - view.frame.height) / 2\n      rowViews[row] = view\n      contentView.addSubview(view)\n    }\n    \n    showSelectionViews()\n    \n    let selectionRowHeight = frame.height\n    frontImageView = UIImageView(frame: CGRectMake(0, bounds.midY - selectionRowHeight / 2, width, selectionRowHeight))\n    frontImageView.image = UIImage(named: \"selection\")\n    frontImageView.alpha = 0.7\n    \n//    addSubview(frontImageView)  // SelectionView \u306e\u524d\u9762\u306b\u8868\u793a\u3057\u305f\u3044\u5834\u5408\n    insertSubview(frontImageView, atIndex: 0) // SelectionView \u306e\u80cc\u9762\u306b\u8868\u793a\u3057\u305f\u3044\u5834\u5408\n    \n  }\n  \n  private func showSelectionViews() {\n    for row in 0..<numberOfRows {\n      let y = visibleLimitYForRow(row)\n      if 0 <= contentView.frame.origin.y + y && contentView.frame.origin.y + y <= bounds.height {\n        let view = rowViews[row]!\n        view.frame.origin.x = (width - view.frame.width) / 2\n        view.frame.origin.y = CGFloat(row) * rowHeight + (rowHeight - view.frame.height) / 2\n        \n        let reduction = CGFloat(abs(row - containingSelectionViewRow())) * 0.1\n        view.scaleWithRatio(1.0 - reduction)\n      }\n    }\n  }\n  \n  // selection. in this case, it means showing the appropriate row in the middle\n  // scrolls the specified row to center.\n  public func selectRow(row: Int, animated: Bool) {\n    // \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3057\u306a\u3044\u306e\u3067animated\u4f7f\u3063\u3066\u307e\u305b\u3093\u3002\n\n    contentView.frame.origin.y = bounds.midY - rowHeight / 2 - CGFloat(row) * rowHeight\n    \n    showSelectionViews()\n    \n    selectedRow = row\n    delegate?.exPickerView(self, didSelectRow: row)\n  }\n  \n  // MARK: - private -\n  \n  private var contentView:    MovingConstrainedView!\n  private var frontImageView: UIImageView!\n  private var rowViews        = [Int : SelectionView]()\n  \n  private func visibleLimitYForRow(row: Int) -> CGFloat {\n    return rowHeight * (2 * CGFloat(row) + 1) / 2\n  }\n  \n  private func containingSelectionViewRow() -> Int {\n    return Int(floor((bounds.midY - contentView.frame.origin.y) / rowHeight))\n  }\n  \n  private var width: CGFloat {\n    get {\n      guard let delegate = delegate else { return 200.0 }\n      return delegate.widthInExPickerView(self)\n    }\n  }\n  \n  private var rowHeight: CGFloat {\n    get {\n      guard let delegate = delegate else { return 30.0 }\n      return delegate.rowHeightInExPickerView(self)\n    }\n  }\n  \n  private var numberOfRows: Int {\n    get {\n      guard let dataSource = dataSource else { return 0 }\n      return dataSource.numberOfRowsInExPickerView(self)\n    }\n  }\n  \n  private var previousLocationOfTouch: CGPoint!\n  \n}\n\n// MARK: - touches responder -\nextension ExPickerView {\n  \n  override public func touchesBegan(touches: Set<UITouch>, withEvent event: UIEvent?) {\n    super.touchesBegan(touches, withEvent: event)\n    let touch = touches.first!\n    let location = touch.locationInView(self)\n    previousLocationOfTouch = location\n  }\n  \n  override public func touchesMoved(touches: Set<UITouch>, withEvent event: UIEvent?) {\n    super.touchesMoved(touches, withEvent: event)\n    let touch = touches.first!\n    let location = touch.locationInView(self)\n    let len = location.y - previousLocationOfTouch.y\n    contentView.frame.origin.y += len\n    previousLocationOfTouch = location\n    showSelectionViews()\n  }\n  \n  override public func touchesEnded(touches: Set<UITouch>, withEvent event: UIEvent?) {\n    super.touchesEnded(touches, withEvent: event)\n    selectRow(containingSelectionViewRow(), animated: true)\n  }\n  \n}\n\npublic protocol ExPickerViewDataSource: class {\n  func numberOfRowsInExPickerView(exPickerView: ExPickerView) -> Int\n}\n\npublic protocol ExPickerViewDelegate: class {\n  // dataSource \u3068\u306e\u9055\u3044\u306f view \u306b\u95a2\u308f\u308b delegate \u3067\u3042\u308b\u3053\u3068\n  func exPickerView(exPickerView: ExPickerView, viewForRow row: Int) -> SelectionView\n  func exPickerView(exPickerView: ExPickerView, didSelectRow row: Int)\n  func widthInExPickerView(exPickerView: ExPickerView) -> CGFloat\n  func rowHeightInExPickerView(exPickerView: ExPickerView) -> CGFloat\n}\n```\n"}