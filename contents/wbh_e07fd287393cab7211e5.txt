{"context": "\n\n\u4fee\u6b63\u5c65\u6b74\n2016/7/18 : filter\u5f8c\u306e\u30b5\u30a4\u30ba\u306e\u8a08\u7b97\u5f0f\u306b\u9593\u9055\u3044\u304c\u3042\u3063\u305f\u306e\u3067\u4fee\u6b63\u3002\n\n\u6982\u8981\n\u8fd1\u5e74\u69d8\u3005\u306a\u3068\u3053\u308d\u3067AI\u3068\u304b\u6df1\u5c64\u5b66\u7fd2(Deep Learning)\u7b49\u3005\u304c\u9a12\u304c\u308c\u3066\u304d\u3066\u3044\u307e\u3059\u3002\n\u3044\u308d\u3044\u308d\u3068\u30e9\u30a4\u30d6\u30e9\u30ea\u3082\u5897\u3048\u3066\u304d\u3066\u8a66\u3057\u3084\u3059\u3044\u96f0\u56f2\u6c17\u306b\u306a\u3063\u3066\u304d\u305f\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u3053\u3067\u3001Chainer\u3092\u4f7f\u3063\u3066Tweet\u306e\u611f\u60c5\u5206\u6790\u3092\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\nTheano\u3067\u306e\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u3064\u3064\u4f3c\u305f\u3088\u3046\u306a\u3053\u3068\u3092Chainer\u3067\u3084\u3063\u3066\u307f\u3088\u3046\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\u305f\u3060\u3001\u3053\u308c\u307e\u3067sklearn\u306a\u3069\u306e\u6a5f\u68b0\u5b66\u7fd2\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u6163\u308c\u3066\u304d\u3066\u3044\u308b\u4eba\u306f\u3001\u5c11\u3057\u4f7f\u3044\u306b\u304f\u3044\u306e\u3067\u3001\u305d\u306e\u8fba\u3082\u5408\u308f\u305b\u3066\u89e3\u6c7a\u3067\u304d\u308c\u3070\u3002\n\u7d50\u69cb\u79c1\u306e\u72ec\u81ea\u7406\u89e3\u304c\u5165\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u9593\u9055\u3044\u304c\u3042\u308b\u3084\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u305d\u306e\u3078\u3093\u306f\u6307\u6458\u3044\u305f\u3060\u304f\u3068\u3042\u308a\u304c\u305f\u3044\u3067\u3059\u3002\n\n\u7b2c\u4e00\u56de\u306e\u5185\u5bb9\n\nsklearn\u3068Chainer\u306e\u9055\u3044\nChainer\u3067\u306eMLP\u5b9f\u88c5\u306e\u30b5\u30f3\u30d7\u30eb\nChainer\u3067\u306eCNN\u3092\u7406\u89e3\u3059\u308b\n\n\n\u74b0\u5883\nMac OSX Yosemite 10.10.15\nPython 2.7\nCPU Intel Core i5 2.6GHz\n\u30e1\u30e2\u30ea 8GB\n(\u305d\u3093\u306a\u88c5\u5099\u3067\u5927\u4e08\u592b\u304b\uff1f\u2192\u308f\u304b\u3089\u306a\u3044)\n\n\u6e96\u5099\n\nChainer\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\npip install chainer\n\n\nsklearn\u3068Chainer\nsklearn\u3067\u306f\nmodel = (SVM\u3068\u304bRandomForest\u3068\u304b)\nmodel.fit(x_train,y_train)\ny_p = model.predict(x_test)\n\n\u3068\u304b\u3067\u3001\u7c21\u5358\u306b\u3067\u304d\u305f\u308f\u3051\u3067\u3059\u3002\n\u3053\u3053\u3067\u3001x_train\u306f\u5927\u304d\u3055N\u00d7MN\u00d7M N \u00d7 M \u306e\u884c\u5217\u3001y_train\u306f\u9577\u3055NN N \u306e\u6559\u5e2b\u30d9\u30af\u30c8\u30eb(0,1\u3068\u304b)\u306b\u306a\u308a\u307e\u3059\u3002NNN\u306f\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba\u3001MMM\u306f\u7279\u5fb4\u91cf\u306e\u6570\u3067\u3059\u3002x_test\u306fx_train\u3068\u5217\u6570\u306e\u540c\u3058(\u3064\u307e\u308a\u7279\u5fb4\u91cf\u306e\u5927\u304d\u3055\u304c\u540c\u3058)\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u306a\u308a\u307e\u3059\u3002\n\u4e00\u65b9Chainer\u3067\u306f\u3001\u3053\u306e\u3088\u3046\u306b\u300cfit\u300d\u300cpredict\u300d\u307f\u305f\u3044\u306a\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308b\u308f\u3051\u3067\u306f\u306a\u304f\u3001\u81ea\u5206\u3067\u4f5c\u308b\u3057\u304b\u3042\u308a\u307e\u305b\u3093\u3002\n\u4f8b\u3048\u3070\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3(MLP)\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3059\u308b\u3088\u3046\u3067\u3059\u3002\nBase\u30af\u30e9\u30b9\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\n# -*- coding: utf-8 -*-\n\nfrom chainer import FunctionSet, Variable, optimizers\nfrom chainer import functions as F\nfrom sklearn import base\nfrom abc import ABCMeta, abstractmethod\nimport numpy as np\nimport six\n\n\nclass BaseChainerEstimator(base.BaseEstimator):\n    __metaclass__= ABCMeta  # python 2.x\n    def __init__(self, optimizer=optimizers.SGD(), n_iter=10000, eps=1e-5, report=100,\n                 **params):\n        self.network = self._setup_network(**params)\n        self.optimizer = optimizer\n        self.optimizer.setup(self.network.collect_parameters())\n        self.n_iter = n_iter\n        self.eps = eps\n        self.report = report\n\n    @abstractmethod\n    def _setup_network(self, **params):\n        return FunctionSet(l1=F.Linear(1, 1))\n\n    @abstractmethod\n    def forward(self, x, train=True):\n        y = self.network.l1(x)\n        return y\n\n    @abstractmethod\n    def loss_func(self, y, t):\n        return F.mean_squared_error(y, t)\n\n    @abstractmethod\n    def output_func(self, h):\n        return F.identity(h)\n\n    def fit(self, x_data, y_data):\n        batchsize = 100\n        N = len(y_data)\n        for loop in range(self.n_iter):\n            perm = np.random.permutation(N)\n            sum_accuracy = 0\n            sum_loss = 0\n            for i in six.moves.range(0, N, batchsize):\n                x_batch = x_data[perm[i:i + batchsize]]\n                y_batch = y_data[perm[i:i + batchsize]]\n                x = Variable(x_batch)\n                y = Variable(y_batch)\n                self.optimizer.zero_grads()\n                yp = self.forward(x)\n                loss = self.loss_func(yp,y)\n                loss.backward()\n                self.optimizer.update()\n                sum_loss += loss.data * len(y_batch)\n                sum_accuracy += F.accuracy(yp,y).data * len(y_batch)\n            if self.report > 0 and loop % self.report == 0:\n                print('loop={}, train mean loss={} , train mean accuracy={}'.format(loop, sum_loss / N,sum_accuracy / N))\n\n        return self\n\n    def predict(self, x_data):\n        x = Variable(x_data)\n        y = self.forward(x,train=False)\n        return self.output_func(y).data\n\nclass ChainerClassifier(BaseChainerEstimator, base.ClassifierMixin):\n    def predict(self, x_data):\n        return BaseChainerEstimator.predict(self, x_data).argmax(1) #argmax\u306f\u884c\u5217\u306e\u884c\u306e\u4e2d\u3067\u6700\u5927\u306b\u306a\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8fd4\u3059\u3002\u3064\u307e\u308a\u30af\u30e9\u30b9\u306f0\u304b\u30891,2\u3068\u3057\u3066\u3044\u304b\u306a\u3044\u3068\u3044\u3051\u306a\u3044\n\n    def predict_proba(self,x_data):\n        return BaseChainerEstimator.predict(self, x_data)\n\n\n\u305d\u306e\u4e0a\u3067\u3001MLP\u306e\u30af\u30e9\u30b9\u3092ChainerClassifier\u3092\u7d99\u627f\u3059\u308b\u5f62\u3067\u3001\nclass MLP3L(ChainerClassifier):\n    \"\"\"\n    3-Layer Perceptron\n    \"\"\"\n    def _setup_network(self, **params):\n        network = FunctionSet(\n            l1=F.Linear(params[\"input_dim\"], params[\"hidden_dim\"]),\n            l2=F.Linear(params[\"hidden_dim\"], params[\"hidden_dim\"]),\n            l3=F.Linear(params[\"hidden_dim\"], params[\"n_classes\"]),\n        )\n        return network\n\n    def forward(self, x, train=True):\n        h1 = F.dropout(F.relu(self.network.l1(x)),train=train)\n        h2 = F.dropout(F.relu(self.network.l2(h1)),train=train)\n        y = self.network.l3(h2)\n        return y\n\n    def loss_func(self, y, t):\n        return F.softmax_cross_entropy(y, t)\n\n    def output_func(self, h):\n        return F.softmax(h)\n\n\u3068\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\u3053\u308c\u3067sklearn\u3068\u540c\u3058\u3088\u3046\u306b\u300cfit\u300d\u300cpredict (predict_proba)\u300d\u304c\u4f7f\u3048\u307e\u3059\u3002\nx_data\u306fnumpy.float32\u578b\u3001y_data\u306fnumpy.int32\u578b\u3067\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3088\u3046\u3067\u3059\u3002\n(fit\u5185\u90e8\u3067Chainer\u306eVariable\u306b\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u3044\u307e\u3059)\n\u3055\u3066\u3001\u4e0a\u8a18\u306eMLP\u3067\u3042\u308c\u3070\u4e0a\u8a18\u306ex_data\u306fsklearn\u3068\u540c\u3058\u3088\u3046\u306b\u5927\u304d\u3055N\u00d7MN\u00d7M N \u00d7 M \u306e\u884c\u5217\u3067\u3044\u3044\u3067\u3059\u3002\u304c\u3001\u3053\u308c\u3092\u4f8b\u3048\u3070\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af(CNN)\u3068\u304b\u306b\u62e1\u5f35\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u3001\u3044\u304d\u306a\u308a\u554f\u984c\u304c\u751f\u3058\u307e\u3059\u3002\nCNN\u306f\u753b\u50cf\u51e6\u7406\u3067\u4e3b\u306b\u7528\u3044\u3089\u308c\u308b\u306e\u3067\u3001\u30a4\u30f3\u30d7\u30c3\u30c8\u304c\uff12\u6b21\u5143\u306b\u306a\u3063\u3066\u304a\u308a\u3001\u3053\u308c\u306b\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba(\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba)\u3092\u52a0\u3048\u308b\u3068\u3001\uff13\u6b21\u5143\u306ex_data\u306b\u3057\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002(\u30c1\u30e3\u30cd\u30eb?\u3068\u3044\u3046\u6982\u5ff5\u304c\u3042\u3063\u3066\u3001\u5b9f\u969b\u306f\uff14\u6b21\u5143\u30c6\u30f3\u30bd\u30eb\u306b\u306a\u308b)\n\nChainer\u3067\u306eCNN\u30b5\u30f3\u30d7\u30eb\u3092\u89e3\u8aad\u3059\u308b\u3002\n\u30b5\u30f3\u30d7\u30eb\u3068\u3057\u3066\u3053\u3061\u3089\u306e\u30b3\u30fc\u30c9\u3092\u4f7f\u308f\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\u4f7f\u7528\u3057\u3066\u3044\u308bMNIST\u306e\u753b\u50cf\u306f28\u00d72828\u00d72828 \u00d7 28\u3067\u3059\u3002\nmodel = chainer.FunctionSet(conv1=F.Convolution2D(1, 20, 5),\n                                conv2=F.Convolution2D(20, 50, 5),  \n                            l1=F.Linear(800, 500),\n                            l2=F.Linear(500, 10))\n\ndef forward(x_data, y_data, train=True):\n    x, t = chainer.Variable(x_data), chainer.Variable(y_data)\n    h = F.max_pooling_2d(F.relu(model.conv1(x)), 2)\n    h = F.max_pooling_2d(F.relu(model.conv2(h)), 2)\n    h = F.dropout(F.relu(model.l1(h)), train=train)\n    y = model.l2(h)\n    if train:\n        return F.softmax_cross_entropy(y, t)\n    else:\n        return F.accuracy(y, t)                                                        \n\n\nF.Convolution2D\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u307f\u3066\u307f\u308b\u3068\u3001\n\n\u3068\u306a\u3063\u3066\u304a\u308a\u3001\u7b2c1\u5f15\u6570\u306bin_channels\u3001\u7b2c2\u5f15\u6570\u306bout_channels\u3001\u7b2c3\u5f15\u6570\u306bksize(Filter\u30b5\u30a4\u30ba)\u3092\u5165\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002in_channels\u306fRGB\u3068\u304b\u30673\u3068\u304b\u306b\u3059\u308b\u3089\u3057\u3044\u3067\u3059\u304c\u30011\u3067\u8a66\u3059\u3068\u3057\u3066\u3044\u3066\u3001out_channels\u306f\u51fa\u529b\u30c1\u30e3\u30cd\u30eb\u6570\u3067\u3059\u304c\u3001\u305f\u3076\u3093\u3001\u30d5\u30a3\u30eb\u30bf\u30fc\u306e\u9055\u3044\u306720\u7a2e\u985e\u306e\u753b\u50cf\u3092\u4f5c\u308b\u3063\u3066\u3053\u3068\u304b\u306a\uff1f\u3068\u52dd\u624b\u306b\u7406\u89e3\u3002ksize\u306f5\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u30d5\u30a3\u30eb\u30bf\u30fc\u304c5\u00d755\u00d755\u00d75\u306e\u30d5\u30a3\u30eb\u30bf\u30fc\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u7573\u307f\u8fbc\u307f\u3068\u30d7\u30fc\u30ea\u30f3\u30b0\u51e6\u7406\u3092\u884c\u3063\u305f\u5f8c\u306e\u7279\u5fb4\u91cf\u306e\u30b5\u30a4\u30ba\n(2016/7/18\u4fee\u6b63 \u3053\u3053\u304b\u3089)\n\u7573\u307f\u8fbc\u307f\u51e6\u7406\u3067\u306f\u3001\u30d5\u30a3\u30eb\u30bf\u30fc\u30b5\u30a4\u30ba\u3092FFF\u3068\u3057\u3066\u3001\u753b\u50cf\u30b5\u30a4\u30ba\u3092S\u00d7SS\u00d7SS\u00d7S\u3068\u3059\u308b\u3068\u3001\u30d5\u30a3\u30eb\u30bf\u30fc\u5f8c\u306e\u753b\u50cf\u30b5\u30a4\u30ba\u306f\u30d1\u30c7\u30a3\u30f3\u30b0\u3068\u304b\u3092\u5165\u308c\u306a\u3044\u5834\u5408\u7279\u5fb4\u30de\u30c3\u30d7\u30b5\u30a4\u30ba\u3092Sf\u00d7SfSf\u00d7SfS_f \u00d7 S_f\u3068\u3057\u3066\u3001\u3053\u3053\u306e\u8a18\u4e8b\u306b\u3088\u308b\u3068\nSf=S\u22122\u00d7[F/2]Sf=S\u22122\u00d7[F/2]{S_f = S - 2 \u00d7 [F/2]\n}\n\u3068\u306a\u308a\u307e\u3059\u3002[][][]\u306f\u5c0f\u6570\u70b9\u4ee5\u4e0b\u5207\u6368\u3066\u3067\u3059\u3002\n\u3069\u3046\u3084\u3089\u3001\u8a66\u3057\u3066\u307f\u308b\u3068\u9055\u3046\u3088\u3046\u3067\u3001\u3068\u3044\u3046\u304bChainer\u306eDocument\u306b\u3082\u66f8\u3044\u3066\u3042\u3063\u305f\u3002\nSf=S\u2212F+1Sf=S\u2212F+1{S_f = S - F + 1\n}\n\u3067\u3044\u3044\u3002\u79fb\u52d5\u5e73\u5747\u3068\u540c\u3058\u3067\u3059\u3088\u306d\u30fc\u305d\u3046\u3067\u3059\u3088\u306d\u30fc\u3002\n\u4ee5\u524d\u306e\u5f0f\u306f\u3001\u30d5\u30a3\u30eb\u30bf\u30fc\u30b5\u30a4\u30ba\u304c\u5947\u6570\u3060\u3068\u3046\u307e\u304f\u3044\u304f\u3051\u3069\u3001\u5076\u6570\u3060\u3068\u3060\u3081\u3002\n\u3042\u3068\u3001\u30d7\u30fc\u30ea\u30f3\u30b0\u51e6\u7406\u3067\u3001Max\u30d7\u30fc\u30ea\u30f3\u30b0\u3092\u4f7f\u3046\u5834\u5408\u3068\u3001Average\u30d7\u30fc\u30ea\u30f3\u30b0\u3092\u4f7f\u3046\u5834\u5408\u3067\u7aef\u3063\u3053\u306e\u51e6\u7406\u304c\u9055\u3063\u3066\u304f\u308b\u3002\n\u8a66\u3057\u305f\u611f\u3058\u3001Average\u30d7\u30fc\u30ea\u30f3\u30b0\u3067\u306f\u3001\u30d7\u30fc\u30ea\u30f3\u30b0\u30b5\u30a4\u30ba\u3067\u5bfe\u8c61\u306e\u30b5\u30a4\u30ba\u3092\u5272\u3063\u305f\u4f59\u308a\u304c\u51fa\u308b\u5834\u5408\u306f\u8a08\u7b97\u3067\u304d\u306a\u3044\u304c\u3001Max\u30d7\u30fc\u30ea\u30f3\u30b0\u3067\u306f\u8a08\u7b97\u3057\u3066\u3057\u307e\u3046\u3002\n\u305d\u306e\u305f\u3081\u3001\u305d\u306e\u8fba\u3092\u6ce8\u610f\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002\n(2016/7/18\u4fee\u6b63 \u3053\u3053\u307e\u3067)\n\u3064\u307e\u308a\u3001\u4eca\u56de\u306e\u4f8b\u3067\u307f\u308b\u3068\u3001\n\u7573\u307f\u8fbc\u307f1\u56de\u76ee\u3067\nSf1=28\u22122\u00d7[5/2]=24Sf1=28\u22122\u00d7[5/2]=24{S_{f1} = 28 - 2 \u00d7 [5/2] = 24\n}\n\u3067\u3001forward\u95a2\u6570\u306e\u4e2d\u3067\u3001Max\u30d7\u30fc\u30ea\u30f3\u30b0\u3092\u884c\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u30d7\u30fc\u30ea\u30f3\u30b0\u5f8c\u306e\u30b5\u30a4\u30ba\u3092Sp1\u00d7Sp1Sp1\u00d7Sp1S_{p1} \u00d7 S_{p1}\u3068\u3057\u3066\u3001\nSp1=24/2=12Sp1=24/2=12{S_{p1} = 24 / 2 = 12\n}\n\u3067\u3001\u7573\u307f\u8fbc\u307f2\u56de\u76ee\u3067\nSf2=12\u22122\u00d7[5/2]=8Sf2=12\u22122\u00d7[5/2]=8{S_{f2} = 12 - 2 \u00d7 [5/2] = 8\n}\n\u3067\u3001forward\u95a2\u6570\u306e\u4e2d\u3067\u3001Max\u30d7\u30fc\u30ea\u30f3\u30b0\u3092\u884c\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u30d7\u30fc\u30ea\u30f3\u30b0\u5f8c\u306e\u30b5\u30a4\u30ba\u3092Sp2\u00d7Sp2Sp2\u00d7Sp2S_{p2} \u00d7 S_{p2}\u3068\u3057\u3066\u3001\nSp2=8/2=4Sp2=8/2=4{S_{p2} = 8 / 2 = 4\n}\n\u3068\u306a\u308a\u307e\u3059\u3002\n\u3064\u307e\u308a\u6700\u7d42\u7684\u306a\u30a4\u30f3\u30d7\u30c3\u30c8\u3068\u306a\u308b\u7279\u5fb4\u91cf\u306e\u6b21\u5143\u306f\u3001\u51fa\u529b\u679a\u6570\u304c50\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\nM=50\u00d74\u00d74=800M=50\u00d74\u00d74=800{M = 50 \u00d7 4 \u00d7 4 = 800\n}\n\u3068\u306a\u308a\u3001\u7b2c1\u5c64\u306e\nl1=F.Linear(800, 500)\n\n\u306e\u7b2c1\u5f15\u6570\u3068\u5408\u3044\u307e\u3059\u3002(Chainer\u3067\u306f\u9593\u9055\u3048\u3066\u3044\u308b\u3068\u6b63\u89e3\u3092\u6559\u3048\u3066\u304f\u308c\u308b\u3089\u3057\u3044\u3067\u3059)\n\nforward\u306b\u6295\u3052\u308b\u524d\u306e\u6e96\u5099\n\u3055\u3066\u3001\u30e2\u30c7\u30eb\u3092\u5b9a\u7fa9\u3057\u305f\u306e\u3061\u3001forward\u95a2\u6570\u306bx_data\u3092\u6295\u3052\u308b\u308f\u3051\u3067\u3059\u304c\u3001\u554f\u984c\u306f\u307e\u3060\u3042\u3063\u3066\u3001Convolution\u3092\u884c\u3046\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u304b\u30894\u6b21\u5143\u30c6\u30f3\u30bd\u30eb\u3092\u6295\u3052\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002(Parameters\u306ex\u3092\u53c2\u7167)\n\nnnn\u306f\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba(\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba)\u3001cIcIc_I\u306f\u30c1\u30e3\u30cd\u30eb\u6570\u3001hhh\u3068www\u306f\u305d\u308c\u305e\u308c\u753b\u50cf\u306e\u7e26\u6a2a\u30b5\u30a4\u30ba\u3067\u3059\u3002\n\u4e0a\u8a18\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u307f\u3066\u307f\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306breshape\u3092\u4f7f\u3063\u30664\u6b21\u5143\u30c6\u30f3\u30bd\u30eb\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\nX_train = X_train.reshape((len(X_train), 1, 28, 28))\n\n\u4eca\u56de\u3001Variable\u578b\u306e\u72b6\u614b\u304b\u3089reshape\u3057\u305f\u3044\u306a\u3041\u3068\u601d\u3063\u3066\u8abf\u3079\u3066\u307f\u308b\u3068Chainer\u306e\u95a2\u6570\u3068\u3057\u3066\u540c\u3058\u7269\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u308c\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n\u6b21\u56de\n\nEmbedID\u306e\u7279\u6027\u3092\u8abf\u3079\u308b\n\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u3067\u306e\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\n\n\n## \u4fee\u6b63\u5c65\u6b74\n**2016/7/18 : filter\u5f8c\u306e\u30b5\u30a4\u30ba\u306e\u8a08\u7b97\u5f0f\u306b\u9593\u9055\u3044\u304c\u3042\u3063\u305f\u306e\u3067\u4fee\u6b63\u3002**\n\n\n## \u6982\u8981\n\u8fd1\u5e74\u69d8\u3005\u306a\u3068\u3053\u308d\u3067AI\u3068\u304b\u6df1\u5c64\u5b66\u7fd2(Deep Learning)\u7b49\u3005\u304c\u9a12\u304c\u308c\u3066\u304d\u3066\u3044\u307e\u3059\u3002\n\u3044\u308d\u3044\u308d\u3068\u30e9\u30a4\u30d6\u30e9\u30ea\u3082\u5897\u3048\u3066\u304d\u3066\u8a66\u3057\u3084\u3059\u3044\u96f0\u56f2\u6c17\u306b\u306a\u3063\u3066\u304d\u305f\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u3053\u3067\u3001[Chainer](http://chainer.org)\u3092\u4f7f\u3063\u3066Tweet\u306e\u611f\u60c5\u5206\u6790\u3092\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n[Theano\u3067\u306e\u8a18\u4e8b](http://qiita.com/hogefugabar/items/93fcb2bc27d7b268cbe6)\u3092\u53c2\u7167\u3057\u3064\u3064\u4f3c\u305f\u3088\u3046\u306a\u3053\u3068\u3092Chainer\u3067\u3084\u3063\u3066\u307f\u3088\u3046\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\n\u305f\u3060\u3001\u3053\u308c\u307e\u3067sklearn\u306a\u3069\u306e\u6a5f\u68b0\u5b66\u7fd2\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u6163\u308c\u3066\u304d\u3066\u3044\u308b\u4eba\u306f\u3001\u5c11\u3057\u4f7f\u3044\u306b\u304f\u3044\u306e\u3067\u3001\u305d\u306e\u8fba\u3082\u5408\u308f\u305b\u3066\u89e3\u6c7a\u3067\u304d\u308c\u3070\u3002\n\n\u7d50\u69cb\u79c1\u306e\u72ec\u81ea\u7406\u89e3\u304c\u5165\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u9593\u9055\u3044\u304c\u3042\u308b\u3084\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u305d\u306e\u3078\u3093\u306f\u6307\u6458\u3044\u305f\u3060\u304f\u3068\u3042\u308a\u304c\u305f\u3044\u3067\u3059\u3002\n\n## \u7b2c\u4e00\u56de\u306e\u5185\u5bb9\n\n* sklearn\u3068Chainer\u306e\u9055\u3044\n* Chainer\u3067\u306eMLP\u5b9f\u88c5\u306e\u30b5\u30f3\u30d7\u30eb\n* Chainer\u3067\u306eCNN\u3092\u7406\u89e3\u3059\u308b\n\n## \u74b0\u5883\n\nMac OSX Yosemite 10.10.15\nPython 2.7\nCPU Intel Core i5 2.6GHz\n\u30e1\u30e2\u30ea 8GB\n\n(\u305d\u3093\u306a\u88c5\u5099\u3067\u5927\u4e08\u592b\u304b\uff1f\u2192\u308f\u304b\u3089\u306a\u3044)\n\n## \u6e96\u5099\n\n### Chainer\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n```bash\npip install chainer\n```\n\n## sklearn\u3068Chainer\n\nsklearn\u3067\u306f\n\n```python\nmodel = (SVM\u3068\u304bRandomForest\u3068\u304b)\nmodel.fit(x_train,y_train)\ny_p = model.predict(x_test)\n```\n\n\u3068\u304b\u3067\u3001\u7c21\u5358\u306b\u3067\u304d\u305f\u308f\u3051\u3067\u3059\u3002\n\n\u3053\u3053\u3067\u3001x_train\u306f\u5927\u304d\u3055$ N \u00d7 M $\u306e\u884c\u5217\u3001y_train\u306f\u9577\u3055$ N $\u306e\u6559\u5e2b\u30d9\u30af\u30c8\u30eb(0,1\u3068\u304b)\u306b\u306a\u308a\u307e\u3059\u3002$N$\u306f\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba\u3001$M$\u306f\u7279\u5fb4\u91cf\u306e\u6570\u3067\u3059\u3002x_test\u306fx_train\u3068\u5217\u6570\u306e\u540c\u3058(\u3064\u307e\u308a\u7279\u5fb4\u91cf\u306e\u5927\u304d\u3055\u304c\u540c\u3058)\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u4e00\u65b9Chainer\u3067\u306f\u3001\u3053\u306e\u3088\u3046\u306b\u300cfit\u300d\u300cpredict\u300d\u307f\u305f\u3044\u306a\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308b\u308f\u3051\u3067\u306f\u306a\u304f\u3001\u81ea\u5206\u3067\u4f5c\u308b\u3057\u304b\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u4f8b\u3048\u3070\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3(MLP)\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b[\u5b9f\u88c5](http://qiita.com/lucidfrontier45/items/0568d0d9e2c125e72734)\u3059\u308b\u3088\u3046\u3067\u3059\u3002\n\nBase\u30af\u30e9\u30b9\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\n\n```python\n# -*- coding: utf-8 -*-\n\nfrom chainer import FunctionSet, Variable, optimizers\nfrom chainer import functions as F\nfrom sklearn import base\nfrom abc import ABCMeta, abstractmethod\nimport numpy as np\nimport six\n\n\nclass BaseChainerEstimator(base.BaseEstimator):\n    __metaclass__= ABCMeta  # python 2.x\n    def __init__(self, optimizer=optimizers.SGD(), n_iter=10000, eps=1e-5, report=100,\n                 **params):\n        self.network = self._setup_network(**params)\n        self.optimizer = optimizer\n        self.optimizer.setup(self.network.collect_parameters())\n        self.n_iter = n_iter\n        self.eps = eps\n        self.report = report\n\n    @abstractmethod\n    def _setup_network(self, **params):\n        return FunctionSet(l1=F.Linear(1, 1))\n\n    @abstractmethod\n    def forward(self, x, train=True):\n        y = self.network.l1(x)\n        return y\n\n    @abstractmethod\n    def loss_func(self, y, t):\n        return F.mean_squared_error(y, t)\n\n    @abstractmethod\n    def output_func(self, h):\n        return F.identity(h)\n\n    def fit(self, x_data, y_data):\n        batchsize = 100\n        N = len(y_data)\n        for loop in range(self.n_iter):\n            perm = np.random.permutation(N)\n            sum_accuracy = 0\n            sum_loss = 0\n            for i in six.moves.range(0, N, batchsize):\n                x_batch = x_data[perm[i:i + batchsize]]\n                y_batch = y_data[perm[i:i + batchsize]]\n                x = Variable(x_batch)\n                y = Variable(y_batch)\n                self.optimizer.zero_grads()\n                yp = self.forward(x)\n                loss = self.loss_func(yp,y)\n                loss.backward()\n                self.optimizer.update()\n                sum_loss += loss.data * len(y_batch)\n                sum_accuracy += F.accuracy(yp,y).data * len(y_batch)\n            if self.report > 0 and loop % self.report == 0:\n                print('loop={}, train mean loss={} , train mean accuracy={}'.format(loop, sum_loss / N,sum_accuracy / N))\n\n        return self\n\n    def predict(self, x_data):\n        x = Variable(x_data)\n        y = self.forward(x,train=False)\n        return self.output_func(y).data\n\nclass ChainerClassifier(BaseChainerEstimator, base.ClassifierMixin):\n    def predict(self, x_data):\n        return BaseChainerEstimator.predict(self, x_data).argmax(1) #argmax\u306f\u884c\u5217\u306e\u884c\u306e\u4e2d\u3067\u6700\u5927\u306b\u306a\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8fd4\u3059\u3002\u3064\u307e\u308a\u30af\u30e9\u30b9\u306f0\u304b\u30891,2\u3068\u3057\u3066\u3044\u304b\u306a\u3044\u3068\u3044\u3051\u306a\u3044\n\n    def predict_proba(self,x_data):\n        return BaseChainerEstimator.predict(self, x_data)\n\n```\n\n\u305d\u306e\u4e0a\u3067\u3001MLP\u306e\u30af\u30e9\u30b9\u3092ChainerClassifier\u3092\u7d99\u627f\u3059\u308b\u5f62\u3067\u3001\n\n\n```python\nclass MLP3L(ChainerClassifier):\n    \"\"\"\n    3-Layer Perceptron\n    \"\"\"\n    def _setup_network(self, **params):\n        network = FunctionSet(\n            l1=F.Linear(params[\"input_dim\"], params[\"hidden_dim\"]),\n            l2=F.Linear(params[\"hidden_dim\"], params[\"hidden_dim\"]),\n            l3=F.Linear(params[\"hidden_dim\"], params[\"n_classes\"]),\n        )\n        return network\n\n    def forward(self, x, train=True):\n        h1 = F.dropout(F.relu(self.network.l1(x)),train=train)\n        h2 = F.dropout(F.relu(self.network.l2(h1)),train=train)\n        y = self.network.l3(h2)\n        return y\n\n    def loss_func(self, y, t):\n        return F.softmax_cross_entropy(y, t)\n\n    def output_func(self, h):\n        return F.softmax(h)\n```\n\n\u3068\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n\u3053\u308c\u3067sklearn\u3068\u540c\u3058\u3088\u3046\u306b\u300cfit\u300d\u300cpredict (predict_proba)\u300d\u304c\u4f7f\u3048\u307e\u3059\u3002\n\nx_data\u306fnumpy.float32\u578b\u3001y_data\u306fnumpy.int32\u578b\u3067\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3088\u3046\u3067\u3059\u3002\n(fit\u5185\u90e8\u3067Chainer\u306eVariable\u306b\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u3044\u307e\u3059)\n\n\n\u3055\u3066\u3001\u4e0a\u8a18\u306eMLP\u3067\u3042\u308c\u3070\u4e0a\u8a18\u306ex_data\u306fsklearn\u3068\u540c\u3058\u3088\u3046\u306b\u5927\u304d\u3055$ N \u00d7 M $\u306e\u884c\u5217\u3067\u3044\u3044\u3067\u3059\u3002\u304c\u3001\u3053\u308c\u3092\u4f8b\u3048\u3070\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af(CNN)\u3068\u304b\u306b\u62e1\u5f35\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u3001\u3044\u304d\u306a\u308a\u554f\u984c\u304c\u751f\u3058\u307e\u3059\u3002\n\nCNN\u306f\u753b\u50cf\u51e6\u7406\u3067\u4e3b\u306b\u7528\u3044\u3089\u308c\u308b\u306e\u3067\u3001\u30a4\u30f3\u30d7\u30c3\u30c8\u304c\uff12\u6b21\u5143\u306b\u306a\u3063\u3066\u304a\u308a\u3001\u3053\u308c\u306b\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba(\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba)\u3092\u52a0\u3048\u308b\u3068\u3001\uff13\u6b21\u5143\u306ex_data\u306b\u3057\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002(\u30c1\u30e3\u30cd\u30eb?\u3068\u3044\u3046\u6982\u5ff5\u304c\u3042\u3063\u3066\u3001\u5b9f\u969b\u306f\b\uff14\u6b21\u5143\u30c6\u30f3\u30bd\u30eb\u306b\u306a\u308b)\n\n## Chainer\u3067\u306eCNN\u30b5\u30f3\u30d7\u30eb\u3092\u89e3\u8aad\u3059\u308b\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u3068\u3057\u3066[\u3053\u3061\u3089](http://aidiary.hatenablog.com/entry/20151007/1444223445)\u306e\u30b3\u30fc\u30c9\u3092\u4f7f\u308f\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\n\u4f7f\u7528\u3057\u3066\u3044\u308bMNIST\u306e\u753b\u50cf\u306f$28 \u00d7 28$\u3067\u3059\u3002\n\n```python\nmodel = chainer.FunctionSet(conv1=F.Convolution2D(1, 20, 5),\n\t\t\t\t\t\t\t\tconv2=F.Convolution2D(20, 50, 5),  \n                            l1=F.Linear(800, 500),\n                            l2=F.Linear(500, 10))\n                            \ndef forward(x_data, y_data, train=True):\n    x, t = chainer.Variable(x_data), chainer.Variable(y_data)\n    h = F.max_pooling_2d(F.relu(model.conv1(x)), 2)\n    h = F.max_pooling_2d(F.relu(model.conv2(h)), 2)\n    h = F.dropout(F.relu(model.l1(h)), train=train)\n    y = model.l2(h)\n    if train:\n        return F.softmax_cross_entropy(y, t)\n    else:\n        return F.accuracy(y, t)                                                        \n\n```\n\nF.Convolution2D\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u307f\u3066\u307f\u308b\u3068\u3001\n\n![Kobito.SCEMO4.png](https://qiita-image-store.s3.amazonaws.com/0/54539/91a4f44c-487f-0e2b-c80e-efa6b517d7c2.png \"Kobito.SCEMO4.png\")\n\n\u3068\u306a\u3063\u3066\u304a\u308a\u3001\u7b2c1\u5f15\u6570\u306bin_channels\u3001\u7b2c2\u5f15\u6570\u306bout_channels\u3001\u7b2c3\u5f15\u6570\u306bksize(Filter\u30b5\u30a4\u30ba)\u3092\u5165\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002in_channels\u306fRGB\u3068\u304b\u30673\u3068\u304b\u306b\u3059\u308b\u3089\u3057\u3044\u3067\u3059\u304c\u30011\u3067\u8a66\u3059\u3068\u3057\u3066\u3044\u3066\u3001out_channels\u306f\u51fa\u529b\u30c1\u30e3\u30cd\u30eb\u6570\u3067\u3059\u304c\u3001\u305f\u3076\u3093\u3001\u30d5\u30a3\u30eb\u30bf\u30fc\u306e\u9055\u3044\u306720\u7a2e\u985e\u306e\u753b\u50cf\u3092\u4f5c\u308b\u3063\u3066\u3053\u3068\u304b\u306a\uff1f\u3068\u52dd\u624b\u306b\u7406\u89e3\u3002ksize\u306f5\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u30d5\u30a3\u30eb\u30bf\u30fc\u304c$5\u00d75$\u306e\u30d5\u30a3\u30eb\u30bf\u30fc\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n### \u7573\u307f\u8fbc\u307f\u3068\u30d7\u30fc\u30ea\u30f3\u30b0\u51e6\u7406\u3092\u884c\u3063\u305f\u5f8c\u306e\u7279\u5fb4\u91cf\u306e\u30b5\u30a4\u30ba\n\n(2016/7/18\u4fee\u6b63 \u3053\u3053\u304b\u3089)\n\n~~\u7573\u307f\u8fbc\u307f\u51e6\u7406\u3067\u306f\u3001\u30d5\u30a3\u30eb\u30bf\u30fc\u30b5\u30a4\u30ba\u3092$F$\u3068\u3057\u3066\u3001\u753b\u50cf\u30b5\u30a4\u30ba\u3092$S\u00d7S$\u3068\u3059\u308b\u3068\u3001\u30d5\u30a3\u30eb\u30bf\u30fc\u5f8c\u306e\u753b\u50cf\u30b5\u30a4\u30ba\u306f\u30d1\u30c7\u30a3\u30f3\u30b0\u3068\u304b\u3092\u5165\u308c\u306a\u3044\u5834\u5408\u7279\u5fb4\u30de\u30c3\u30d7\u30b5\u30a4\u30ba\u3092$S_f \u00d7 S_f$\u3068\u3057\u3066\u3001[\u3053\u3053\u306e\u8a18\u4e8b](http://aidiary.hatenablog.com/entry/20151108/1446952402)\u306b\u3088\u308b\u3068~~\n\n```math\nS_f = S - 2 \u00d7 [F/2]\n```\n\n~~\u3068\u306a\u308a\u307e\u3059\u3002$[]$\u306f\u5c0f\u6570\u70b9\u4ee5\u4e0b\u5207\u6368\u3066\u3067\u3059\u3002~~\n\n**\u3069\u3046\u3084\u3089\u3001\u8a66\u3057\u3066\u307f\u308b\u3068\u9055\u3046\u3088\u3046\u3067\u3001\u3068\u3044\u3046\u304bChainer\u306eDocument\u306b\u3082\u66f8\u3044\u3066\u3042\u3063\u305f\u3002**\n\n```math\nS_f = S - F + 1\n```\n\n\u3067\u3044\u3044\u3002\u79fb\u52d5\u5e73\u5747\u3068\u540c\u3058\u3067\u3059\u3088\u306d\u30fc\u305d\u3046\u3067\u3059\u3088\u306d\u30fc\u3002\n\u4ee5\u524d\u306e\u5f0f\u306f\u3001\u30d5\u30a3\u30eb\u30bf\u30fc\u30b5\u30a4\u30ba\u304c\u5947\u6570\u3060\u3068\u3046\u307e\u304f\u3044\u304f\u3051\u3069\u3001\u5076\u6570\u3060\u3068\u3060\u3081\u3002\n\n\u3042\u3068\u3001\u30d7\u30fc\u30ea\u30f3\u30b0\u51e6\u7406\u3067\u3001Max\u30d7\u30fc\u30ea\u30f3\u30b0\u3092\u4f7f\u3046\u5834\u5408\u3068\u3001Average\u30d7\u30fc\u30ea\u30f3\u30b0\u3092\u4f7f\u3046\u5834\u5408\u3067\u7aef\u3063\u3053\u306e\u51e6\u7406\u304c\u9055\u3063\u3066\u304f\u308b\u3002\n\u8a66\u3057\u305f\u611f\u3058\u3001Average\u30d7\u30fc\u30ea\u30f3\u30b0\u3067\u306f\u3001\u30d7\u30fc\u30ea\u30f3\u30b0\u30b5\u30a4\u30ba\u3067\u5bfe\u8c61\u306e\u30b5\u30a4\u30ba\u3092\u5272\u3063\u305f\u4f59\u308a\u304c\u51fa\u308b\u5834\u5408\u306f\u8a08\u7b97\u3067\u304d\u306a\u3044\u304c\u3001Max\u30d7\u30fc\u30ea\u30f3\u30b0\u3067\u306f\u8a08\u7b97\u3057\u3066\u3057\u307e\u3046\u3002\n\u305d\u306e\u305f\u3081\u3001\u305d\u306e\u8fba\u3092\u6ce8\u610f\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002\n\n(2016/7/18\u4fee\u6b63 \u3053\u3053\u307e\u3067)\n\n\u3064\u307e\u308a\u3001\u4eca\u56de\u306e\u4f8b\u3067\u307f\u308b\u3068\u3001\n\n\u7573\u307f\u8fbc\u307f1\u56de\u76ee\u3067\n\n```math\nS_{f1} = 28 - 2 \u00d7 [5/2] = 24\n```\n\n\u3067\u3001forward\u95a2\u6570\u306e\u4e2d\u3067\u3001Max\u30d7\u30fc\u30ea\u30f3\u30b0\u3092\u884c\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u30d7\u30fc\u30ea\u30f3\u30b0\u5f8c\u306e\u30b5\u30a4\u30ba\u3092$S_{p1} \u00d7 S_{p1}$\u3068\u3057\u3066\u3001\n\n```math\nS_{p1} = 24 / 2 = 12\n```\n\n\u3067\u3001\u7573\u307f\u8fbc\u307f2\u56de\u76ee\u3067\n\n```math\nS_{f2} = 12 - 2 \u00d7 [5/2] = 8\n```\n\n\u3067\u3001forward\u95a2\u6570\u306e\u4e2d\u3067\u3001Max\u30d7\u30fc\u30ea\u30f3\u30b0\u3092\u884c\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u30d7\u30fc\u30ea\u30f3\u30b0\u5f8c\u306e\u30b5\u30a4\u30ba\u3092$S_{p2} \u00d7 S_{p2}$\u3068\u3057\u3066\u3001\n\n```math\nS_{p2} = 8 / 2 = 4\n```\n\n\u3068\u306a\u308a\u307e\u3059\u3002\n\n\u3064\u307e\u308a\u6700\u7d42\u7684\u306a\u30a4\u30f3\u30d7\u30c3\u30c8\u3068\u306a\u308b\u7279\u5fb4\u91cf\u306e\u6b21\u5143\u306f\u3001\u51fa\u529b\u679a\u6570\u304c50\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\n\n```math\nM = 50 \u00d7 4 \u00d7 4 = 800\n```\n\n\u3068\u306a\u308a\u3001\u7b2c1\u5c64\u306e\n\n```python\nl1=F.Linear(800, 500)\n```\n\n\u306e\u7b2c1\u5f15\u6570\u3068\u5408\u3044\u307e\u3059\u3002(Chainer\u3067\u306f\u9593\u9055\u3048\u3066\u3044\u308b\u3068\u6b63\u89e3\u3092\u6559\u3048\u3066\u304f\u308c\u308b\u3089\u3057\u3044\u3067\u3059)\n\n### forward\u306b\u6295\u3052\u308b\u524d\u306e\u6e96\u5099\n\n\u3055\u3066\u3001\u30e2\u30c7\u30eb\u3092\u5b9a\u7fa9\u3057\u305f\u306e\u3061\u3001forward\u95a2\u6570\u306bx_data\u3092\u6295\u3052\u308b\u308f\u3051\u3067\u3059\u304c\u3001\u554f\u984c\u306f\u307e\u3060\u3042\u3063\u3066\u3001Convolution\u3092\u884c\u3046\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u304b\u30894\u6b21\u5143\u30c6\u30f3\u30bd\u30eb\u3092\u6295\u3052\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002(Parameters\u306ex\u3092\u53c2\u7167)\n\n![Kobito.sKeAcV.png](https://qiita-image-store.s3.amazonaws.com/0/54539/166d6c10-9ddb-df2b-220f-107bca215c7e.png \"Kobito.sKeAcV.png\")\n\n$n$\u306f\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba(\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba)\u3001$c_I$\u306f\u30c1\u30e3\u30cd\u30eb\u6570\u3001$h$\u3068$w$\u306f\u305d\u308c\u305e\u308c\u753b\u50cf\u306e\u7e26\u6a2a\u30b5\u30a4\u30ba\u3067\u3059\u3002\n\n\u4e0a\u8a18\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u307f\u3066\u307f\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306breshape\u3092\u4f7f\u3063\u30664\u6b21\u5143\u30c6\u30f3\u30bd\u30eb\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\n\n```python\nX_train = X_train.reshape((len(X_train), 1, 28, 28))\n```\n\n\u4eca\u56de\u3001Variable\u578b\u306e\u72b6\u614b\u304b\u3089reshape\u3057\u305f\u3044\u306a\u3041\u3068\u601d\u3063\u3066\u8abf\u3079\u3066\u307f\u308b\u3068Chainer\u306e\u95a2\u6570\u3068\u3057\u3066\u540c\u3058\u7269\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n![Kobito.StweJ1.png](https://qiita-image-store.s3.amazonaws.com/0/54539/3b19cbbb-2997-4d7b-0abc-6744a3c07bff.png \"Kobito.StweJ1.png\")\n\n\u3053\u308c\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n## \u6b21\u56de\n\n* EmbedID\u306e\u7279\u6027\u3092\u8abf\u3079\u308b\n* \u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u3067\u306e\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\n", "tags": ["Chainer", "DeepLearning", "\u611f\u60c5\u5206\u6790", "\u6df1\u5c64\u5b66\u7fd2", "Python"]}