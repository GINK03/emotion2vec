{"context": " More than 1 year has passed since last update.\u7b2c\u516d\u56de\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\u306e\u53c2\u8003\u554f\u984c\nhttp://qiita.com/items/4c60f10b73812e86441c\n\u306e\u5b9f\u88c5\u3002\n\u307e\u3060\u51fa\u3066\u306a\u3044\u8a00\u8a9e\u3067\u884c\u3053\u3046\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u307e\u305a\u306f groovy \u3067\u3002\n\nLand.groovy\n// groovy 2.0.1\n\ndef ptInRect( x, y, a, b )\n{\n    (0..1).every{\n        (a[it]..b[it]).contains( [x,y][it] )\n    }\n}\n\ndef solve( src )\n{\n    areas=src.split(\",\").collect{\n        it.split( \"-\" ).collect{ it.chars.collect{ it-('0'  as  char)} }\n    }\n    (0..99).count{ xy->\n        x=xy%10\n        y=xy/10 as int /*// to help markdown */\n        areas.every{ \n            ptInRect( x, y, it[0], it[1] ) || ptInRect( x, y, it[0], it[2] )\n        }\n    }\n}\n\ntestData().each{\n    actual = solve( it[0] )\n    if ( actual != it[1] ){\n        printf( \"**EXPECTED is %d ***\", it[1] )\n    }\n    printf( \"%s -> %d\\n\", it[0], actual );\n}\ndef testData(){ \n    \"\"\"\\\n    #1  23-94-28,89-06-51   11\n    #2  11-84-58,02-73-69   40\n    #3  18-41-86,77-04-32   26\n    #4  81-88-23,64-58-14   0\n    #49 28-31-92,13-98-79   48\n    \"\"\".split( /\\n/ ).collect{\n        m = ( it =~ /\\#\\d+\\s+(\\S+)\\s+(\\d+)/ )\n        m ? [ m[0][1], Integer.decode( m[0][2] ) ] : null\n    }.findAll{ it }\n;}\n\n\n\u4f8b\u306b\u3088\u3063\u3066\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u306f\u7701\u7565\u3002\nruby \u306e map \u3084 all \u304c groovy \u3060\u3068 collect \u3084 every \u3067\u3042\u308b\u3053\u3068\u306b\u306a\u304b\u306a\u304b\u6163\u308c\u306a\u3044\u3002\u3042\u3068\u3001divmod \u304c\u7121\u3044\u3089\u3057\u3044(\u898b\u3064\u3051\u3089\u308c\u3066\u306a\u3044\u3060\u3051\u304b\u3082)\u3002\n\u305d\u308c\u3068\u300110/2 \u304c 2(Integer) \u3067\u306f\u306a\u304f 2.5(BigDecimal) \u306b\u306a\u308b\u3053\u3068\u3092\u5fd8\u308c\u3066\u3044\u3066\u3001\u3061\u3068\u82e6\u3057\u3093\u3060\u3002\n\u5b9f\u88c5\u306e\u65b9\u91dd\u306f\u3001\u30de\u30b9\u76ee\u306e\u6570\u304c\u591a\u304f\u306a\u3063\u305f\u3089\u9045\u3059\u304e\u3066\u99c4\u76ee\u306b\u306a\u308b\u3051\u3069\u307e\u3042 10\u271510 \u56fa\u5b9a\u306a\u306e\u3067\u5168\u30de\u30b9\u691c\u67fb\u3067\u3044\u3044\u3088\u306d\u3001\u3068\u3044\u3046\u614b\u5ea6\u3067\u3002\nruby \u3068\u6bd4\u3079\u3066\u6c17\u6301\u3061\u3044\u3044\u306e\u306f\u3001\u3084\u3063\u3071\u308a it\u3002\n\u7b2c\u516d\u56de\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\u306e\u53c2\u8003\u554f\u984c\nhttp://qiita.com/items/4c60f10b73812e86441c\n\u306e\u5b9f\u88c5\u3002\n\u307e\u3060\u51fa\u3066\u306a\u3044\u8a00\u8a9e\u3067\u884c\u3053\u3046\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u307e\u305a\u306f groovy \u3067\u3002\n\n\n```groovy:Land.groovy\n// groovy 2.0.1\n\ndef ptInRect( x, y, a, b )\n{\n    (0..1).every{\n        (a[it]..b[it]).contains( [x,y][it] )\n    }\n}\n\ndef solve( src )\n{\n    areas=src.split(\",\").collect{\n        it.split( \"-\" ).collect{ it.chars.collect{ it-('0'  as  char)} }\n    }\n    (0..99).count{ xy->\n        x=xy%10\n        y=xy/10 as int /*// to help markdown */\n        areas.every{ \n            ptInRect( x, y, it[0], it[1] ) || ptInRect( x, y, it[0], it[2] )\n        }\n    }\n}\n\ntestData().each{\n    actual = solve( it[0] )\n    if ( actual != it[1] ){\n        printf( \"**EXPECTED is %d ***\", it[1] )\n    }\n    printf( \"%s -> %d\\n\", it[0], actual );\n}\ndef testData(){ \n    \"\"\"\\\n    #1  23-94-28,89-06-51   11\n    #2  11-84-58,02-73-69   40\n    #3  18-41-86,77-04-32   26\n    #4  81-88-23,64-58-14   0\n    #49 28-31-92,13-98-79   48\n    \"\"\".split( /\\n/ ).collect{\n        m = ( it =~ /\\#\\d+\\s+(\\S+)\\s+(\\d+)/ )\n        m ? [ m[0][1], Integer.decode( m[0][2] ) ] : null\n    }.findAll{ it }\n;}\n```\n\n\u4f8b\u306b\u3088\u3063\u3066\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u306f\u7701\u7565\u3002\n\nruby \u306e map \u3084 all \u304c groovy \u3060\u3068 collect \u3084 every \u3067\u3042\u308b\u3053\u3068\u306b\u306a\u304b\u306a\u304b\u6163\u308c\u306a\u3044\u3002\u3042\u3068\u3001divmod \u304c\u7121\u3044\u3089\u3057\u3044(\u898b\u3064\u3051\u3089\u308c\u3066\u306a\u3044\u3060\u3051\u304b\u3082)\u3002\n\n\u305d\u308c\u3068\u300110/2 \u304c 2(Integer) \u3067\u306f\u306a\u304f 2.5(BigDecimal) \u306b\u306a\u308b\u3053\u3068\u3092\u5fd8\u308c\u3066\u3044\u3066\u3001\u3061\u3068\u82e6\u3057\u3093\u3060\u3002\n\n\u5b9f\u88c5\u306e\u65b9\u91dd\u306f\u3001\u30de\u30b9\u76ee\u306e\u6570\u304c\u591a\u304f\u306a\u3063\u305f\u3089\u9045\u3059\u304e\u3066\u99c4\u76ee\u306b\u306a\u308b\u3051\u3069\u307e\u3042 10\u271510 \u56fa\u5b9a\u306a\u306e\u3067\u5168\u30de\u30b9\u691c\u67fb\u3067\u3044\u3044\u3088\u306d\u3001\u3068\u3044\u3046\u614b\u5ea6\u3067\u3002\n\nruby \u3068\u6bd4\u3079\u3066\u6c17\u6301\u3061\u3044\u3044\u306e\u306f\u3001\u3084\u3063\u3071\u308a it\u3002\n", "tags": ["yhpg", "\u3069\u3046\u66f8\u304f", "Groovy"]}