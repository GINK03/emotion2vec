{"context": "\u4eca\u56de\u306f\u3001VR\u7a7a\u9593\u5185\u3092\u81ea\u7531\u306b\u6b69\u304d\u56de\u3063\u305f\u308a\u3001\u98db\u3073\u56de\u3063\u305f\u308a\u3067\u304d\u308b\u30a2\u30d7\u30ea\u3092\u5b9f\u88c5\u3002\n\u25c6\u4e8b\u524d\u6e96\u5099\n1.https://www.durovis.com/en/sdk.html \u304b\u3089\u300cDive Unity Plugin Package\u300d\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3002\n2.MainCamera\u306e\u4ee3\u308f\u308a\u306b\u30b9\u30c6\u30fc\u30b8\u4e0a\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u4e2d\u304b\u3089DiveCamera\u3092\u914d\u7f6e\n\u30c7\u30d0\u30a4\u30b9\u4e0a\u3067\u3001Gyro\u30bb\u30f3\u30b5\u30fc\u3092\u611f\u77e5\u3001\u307e\u305fDiveCamera\u81ea\u8eab\u3092\u52d5\u304b\u3059\u305f\u3081\u306b\u4ee5\u4e0b\u306eScript\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n\nGyroScriptWalk.cs\nusing UnityEngine;\nusing System.Collections;\n\npublic class GyroScriptWalk : MonoBehaviour {\n\n    public GameObject diveCamera;\n        // \u79fb\u52d5\u901f\u5ea6\u3092\u6570\u30d1\u30bf\u30fc\u30f3\u8a2d\u5b9a\uff08\u5f8c\u9032\u306f-\u3067\u5b9a\u7fa9)\n    public float moveSpeed  = 10.0f;\n    public float moveSpeed2 = 30.0f;\n    public float moveSpeed3 = -10.0f;\n    public float moveAngleX = 10.0f;\n    public float moveAngleXX = 20.0f;\n    public float moveAngleXXX = 350.0f;\n    public float moveAngleXXXX = 340.0f;\n\n\n    float yOffset;\n\n    Quaternion currentGyro;\n\n    void Start(){\n        Input.gyro.enabled = true;\n        yOffset = gameObject.transform.position.y;\n    }\n\n    void Update () {\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000//\u3000Gyro\u30bb\u30f3\u30b5\u30fc\u3092\u611f\u77e5\n        currentGyro = Input.gyro.attitude;\n        this.transform.localRotation = \n            Quaternion.Euler (90, 90, 0) * (new Quaternion (-currentGyro.x, -currentGyro.y, currentGyro.z, currentGyro.w)); \n\n        // 1.\u30ab\u30e1\u30e9\u306e\u50be\u304d\u3092\u53d6\u5f97\n        float angle = diveCamera.transform.eulerAngles.x;   \n\n        // 2.\u3042\u308b\u89d2\u5ea6\u4ee5\u5185\u3067\u3042\u308c\u3070\u524d\u9032\u3055\u305b\u308b\n        if (moveAngleX < angle && angle < moveAngleXX) {\n            moveForward ();\n        } else if (moveAngleXX < angle && angle < 45.0f) {\n            runForward ();\n        } else if (moveAngleXXX > angle && angle > moveAngleXXXX) {\n            moveBackward ();\n        }\n  }\n\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000// 2.\u901f\u5ea6\u306b\u5408\u308f\u305b\u3066\u79fb\u52d5(moveForward,runForward,moveBackward)\u3092\u5b9a\u7fa9\n    public void moveForward() {\n        Vector3 direction = new Vector3 (diveCamera.transform.forward.x, 0, diveCamera.transform.forward.z).normalized * moveSpeed * Time.deltaTime;\n        Quaternion rotation = Quaternion.Euler (new Vector3 (0, -diveCamera.transform.rotation.eulerAngles.y, 0));\n        diveCamera.transform.Translate (rotation * direction);\n        diveCamera.transform.position = new Vector3 (diveCamera.transform.position.x, yOffset, diveCamera.transform.position.z);\n    }\n\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000public void runForward() {\n        Vector3 direction = new Vector3 (diveCamera.transform.forward.x, 0, diveCamera.transform.forward.z).normalized * moveSpeed2 * Time.deltaTime;\n        Quaternion rotation = Quaternion.Euler (new Vector3 (0, -diveCamera.transform.rotation.eulerAngles.y, 0));\n        diveCamera.transform.Translate (rotation * direction);\n        diveCamera.transform.position = new Vector3 (diveCamera.transform.position.x, yOffset, diveCamera.transform.position.z);\n    }\n\n    public void moveBackward() {\n        Vector3 direction = new Vector3 (diveCamera.transform.forward.x, 0, diveCamera.transform.forward.z).normalized * moveSpeed3 * Time.deltaTime;\n        Quaternion rotation = Quaternion.Euler (new Vector3 (0, -diveCamera.transform.rotation.eulerAngles.y, 0));\n        diveCamera.transform.Translate (rotation * direction);\n        diveCamera.transform.position = new Vector3 (diveCamera.transform.position.x, yOffset, diveCamera.transform.position.z);\n    }\n}\n\n\n\u4eca\u56de\u306f\u3001VR\u7a7a\u9593\u5185\u3092\u81ea\u7531\u306b\u6b69\u304d\u56de\u3063\u305f\u308a\u3001\u98db\u3073\u56de\u3063\u305f\u308a\u3067\u304d\u308b\u30a2\u30d7\u30ea\u3092\u5b9f\u88c5\u3002\n\n\u25c6\u4e8b\u524d\u6e96\u5099\n1.https://www.durovis.com/en/sdk.html \u304b\u3089\u300cDive Unity Plugin Package\u300d\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3002\n2.MainCamera\u306e\u4ee3\u308f\u308a\u306b\u30b9\u30c6\u30fc\u30b8\u4e0a\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u4e2d\u304b\u3089DiveCamera\u3092\u914d\u7f6e\n\n\u30c7\u30d0\u30a4\u30b9\u4e0a\u3067\u3001Gyro\u30bb\u30f3\u30b5\u30fc\u3092\u611f\u77e5\u3001\u307e\u305fDiveCamera\u81ea\u8eab\u3092\u52d5\u304b\u3059\u305f\u3081\u306b\u4ee5\u4e0b\u306eScript\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n\n```GyroScriptWalk.cs\nusing UnityEngine;\nusing System.Collections;\n\npublic class GyroScriptWalk : MonoBehaviour {\n\n\tpublic GameObject diveCamera;\n        // \u79fb\u52d5\u901f\u5ea6\u3092\u6570\u30d1\u30bf\u30fc\u30f3\u8a2d\u5b9a\uff08\u5f8c\u9032\u306f-\u3067\u5b9a\u7fa9)\n\tpublic float moveSpeed  = 10.0f;\n\tpublic float moveSpeed2 = 30.0f;\n\tpublic float moveSpeed3 = -10.0f;\n\tpublic float moveAngleX = 10.0f;\n\tpublic float moveAngleXX = 20.0f;\n\tpublic float moveAngleXXX = 350.0f;\n\tpublic float moveAngleXXXX = 340.0f;\n\n\n\tfloat yOffset;\n\n\tQuaternion currentGyro;\n\n\tvoid Start(){\n\t\tInput.gyro.enabled = true;\n\t\tyOffset = gameObject.transform.position.y;\n\t}\n\n\tvoid Update () {\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000//\u3000Gyro\u30bb\u30f3\u30b5\u30fc\u3092\u611f\u77e5\n\t\tcurrentGyro = Input.gyro.attitude;\n\t\tthis.transform.localRotation = \n\t\t\tQuaternion.Euler (90, 90, 0) * (new Quaternion (-currentGyro.x, -currentGyro.y, currentGyro.z, currentGyro.w)); \n\t\t\n\t\t// 1.\u30ab\u30e1\u30e9\u306e\u50be\u304d\u3092\u53d6\u5f97\n\t\tfloat angle = diveCamera.transform.eulerAngles.x;\t\n\n\t\t// 2.\u3042\u308b\u89d2\u5ea6\u4ee5\u5185\u3067\u3042\u308c\u3070\u524d\u9032\u3055\u305b\u308b\n\t\tif (moveAngleX < angle && angle < moveAngleXX) {\n\t\t\tmoveForward ();\n\t\t} else if (moveAngleXX < angle && angle < 45.0f) {\n\t\t\trunForward ();\n\t\t} else if (moveAngleXXX > angle && angle > moveAngleXXXX) {\n\t\t\tmoveBackward ();\n\t    }\n  }\n\t\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000// 2.\u901f\u5ea6\u306b\u5408\u308f\u305b\u3066\u79fb\u52d5(moveForward,runForward,moveBackward)\u3092\u5b9a\u7fa9\n\tpublic void moveForward() {\n\t\tVector3 direction = new Vector3 (diveCamera.transform.forward.x, 0, diveCamera.transform.forward.z).normalized * moveSpeed * Time.deltaTime;\n\t\tQuaternion rotation = Quaternion.Euler (new Vector3 (0, -diveCamera.transform.rotation.eulerAngles.y, 0));\n\t\tdiveCamera.transform.Translate (rotation * direction);\n\t\tdiveCamera.transform.position = new Vector3 (diveCamera.transform.position.x, yOffset, diveCamera.transform.position.z);\n\t}\n\t\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000public void runForward() {\n\t\tVector3 direction = new Vector3 (diveCamera.transform.forward.x, 0, diveCamera.transform.forward.z).normalized * moveSpeed2 * Time.deltaTime;\n\t\tQuaternion rotation = Quaternion.Euler (new Vector3 (0, -diveCamera.transform.rotation.eulerAngles.y, 0));\n\t\tdiveCamera.transform.Translate (rotation * direction);\n\t\tdiveCamera.transform.position = new Vector3 (diveCamera.transform.position.x, yOffset, diveCamera.transform.position.z);\n\t}\n\n\tpublic void moveBackward() {\n\t\tVector3 direction = new Vector3 (diveCamera.transform.forward.x, 0, diveCamera.transform.forward.z).normalized * moveSpeed3 * Time.deltaTime;\n\t\tQuaternion rotation = Quaternion.Euler (new Vector3 (0, -diveCamera.transform.rotation.eulerAngles.y, 0));\n\t\tdiveCamera.transform.Translate (rotation * direction);\n\t\tdiveCamera.transform.position = new Vector3 (diveCamera.transform.position.x, yOffset, diveCamera.transform.position.z);\n\t}\n}\n```\n", "tags": ["Unity", "DiveCamera", "VR", "C#"]}