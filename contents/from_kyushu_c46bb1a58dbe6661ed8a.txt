{"context": "\u6a2a\u6d5c\u3078\u306a\u3061\u3087\u3053\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u52c9\u5f37\u4f1a\u306b\u3066\u904e\u53bb\u306b\u51fa\u984c\u3055\u308c\u305f\u591a\u6bb5\u968e\u9078\u629c\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n\u56de\u7b54\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306f30\u5206\u7a0b\u5ea6\u3002\n\u672c\u5f53\u306f@list\u306f\u9577\u3055\u6c7a\u3081\u6253\u3061\u3067\u306f\u306a\u304f1..Float::INFINITY\u306b\u3057\u305f\u304b\u3063\u305f\u306e\u3060\u304c\u3001Enumerator::Lazy\u3067\u306f\u89e3\u3051\u305d\u3046\u306b\u306a\u304b\u3063\u305f\u306e\u30671..2000\u3068\u3044\u3046\u7bc4\u56f2\u3067\u3084\u308a\u304f\u308a\u3059\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\u4eca\u56de\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u6e80\u305f\u305b\u3070\u3088\u3044\u3068\u3044\u3046\u8003\u3048\u65b9\u306f\u3084\u306f\u308a\u6027\u306b\u5408\u308f\u306a\u3044\u306e\u3060\u304c\u3001\u3053\u308c\u4ee5\u5916\u56de\u7b54\u304c\u601d\u3044\u3064\u304b\u306a\u304b\u3063\u305f\u306e\u304c\u6094\u3084\u307e\u308c\u308b\u3002\nclass Selection\n  def seq input\n    @list = (1..2000).to_a\n    input.chars.each{|c|\n      case c\n      when \"2\"..\"9\"\n        delete_multiple c.to_i\n      when \"S\"\n        delete_indexes square_next\n      when \"s\"\n        delete_indexes square_prev\n      when \"C\"\n        delete_indexes cubic_next\n      when \"c\"\n        delete_indexes cubic_prev\n      when \"h\"\n        @list = @list.drop(100)\n      end\n    }\n    @list[0..9]\n  end\n\n  private\n  def delete_multiple n\n    @list = @list.reject.with_index(1){|_, i|\n      (i % n) === 0\n    }\n  end\n\n  def delete_indexes indexes\n    indexes.reverse.map{|i|\n      @list.delete_at i\n    }\n  end\n\n  def square_next\n    next_indexes square.map{|n| @list.index(n)}\n  end\n\n  def square_prev\n    prev_indexes square.map{|n| @list.index(n)}\n  end\n\n  def cubic_next\n    next_indexes cubic.map{|n| @list.index(n)}\n  end\n\n  def cubic_prev\n    prev_indexes cubic.map{|n| @list.index(n)}\n  end\n\n  def next_indexes indexes\n    indexes.map{|i| i + 1}.reject{|i| i < 0 || @list.size <= i}\n  end\n\n  def prev_indexes indexes\n    indexes.map{|i| i - 1}.reject{|i| i < 0 || @list.size <= i}\n  end\n\n  def square\n    @list.select{|n|\n      sq = Math.sqrt n\n      sq.to_i === sq\n    }\n  end\n\n  def cubic\n    @list.select{|n|\n      cu = Math.cbrt n\n      cu.to_i === cu\n    }\n  end\nend\n\ntest = <<_TEST\n/*0*/ test( \"ss6cc24S\", \"1,9,21,30,33,37,42,44,49,56\" );    \n/*1*/ test( \"h\", \"101,102,103,104,105,106,107,108,109,110\" );    \n/*2*/ test( \"hh\", \"201,202,203,204,205,206,207,208,209,210\" );    \n/*3*/ test( \"hhh\", \"301,302,303,304,305,306,307,308,309,310\" );    \n/*4*/ test( \"2\", \"1,3,5,7,9,11,13,15,17,19\" );    \n/*5*/ test( \"22\", \"1,5,9,13,17,21,25,29,33,37\" );    \n/*6*/ test( \"222\", \"1,9,17,25,33,41,49,57,65,73\" );    \n/*7*/ test( \"3\", \"1,2,4,5,7,8,10,11,13,14\" );    \n/*8*/ test( \"33\", \"1,2,5,7,10,11,14,16,19,20\" );    \n/*9*/ test( \"333\", \"1,2,7,10,14,16,20,23,28,29\" );    \n/*10*/ test( \"s\", \"1,2,4,5,6,7,9,10,11,12\" );    \n/*11*/ test( \"ss\", \"1,4,5,6,9,10,11,12,13,16\" );    \n/*12*/ test( \"sss\", \"4,5,9,10,11,12,16,17,18,19\" );    \n/*13*/ test( \"S\", \"1,3,4,6,7,8,9,11,12,13\" );    \n/*14*/ test( \"SS\", \"1,4,7,8,9,12,13,14,15,16\" );    \n/*15*/ test( \"SSS\", \"1,8,9,13,14,15,16,20,21,22\" );    \n/*16*/ test( \"c\", \"1,2,3,4,5,6,8,9,10,11\" );    \n/*17*/ test( \"cc\", \"1,2,3,4,5,8,9,10,11,12\" );    \n/*18*/ test( \"ccc\", \"1,2,3,4,8,9,10,11,12,13\" );    \n/*19*/ test( \"C\", \"1,3,4,5,6,7,8,10,11,12\" );    \n/*20*/ test( \"CC\", \"1,4,5,6,7,8,11,12,13,14\" );    \n/*21*/ test( \"CCC\", \"1,5,6,7,8,12,13,14,15,16\" );    \n/*22*/ test( \"23\", \"1,3,7,9,13,15,19,21,25,27\" );    \n/*23*/ test( \"32\", \"1,4,7,10,13,16,19,22,25,28\" );    \n/*24*/ test( \"2h\", \"201,203,205,207,209,211,213,215,217,219\" );    \n/*25*/ test( \"h2\", \"101,103,105,107,109,111,113,115,117,119\" );    \n/*26*/ test( \"sC\", \"1,4,5,6,7,9,10,11,12,13\" );    \n/*27*/ test( \"Cs\", \"1,4,5,6,7,8,10,11,12,13\" );    \n/*28*/ test( \"s468\", \"1,2,4,6,7,11,12,16,17,20\" );    \n/*29*/ test( \"S468\", \"1,3,4,7,8,12,13,16,18,21\" );    \n/*30*/ test( \"cc579\", \"1,2,3,4,8,9,11,13,15,16\" );    \n/*31*/ test( \"CC579\", \"1,4,5,6,8,11,13,15,17,18\" );    \n/*32*/ test( \"85\", \"1,2,3,4,6,7,9,10,12,13\" );    \n/*33*/ test( \"sh\", \"110,111,112,113,114,115,116,117,118,119\" );    \n/*34*/ test( \"94h\", \"150,151,154,155,156,158,159,160,163,164\" );    \n/*35*/ test( \"h9c8\", \"101,102,103,104,105,106,107,110,111,112\" );    \n/*36*/ test( \"Cc3s\", \"1,3,5,6,10,11,13,16,17,19\" );    \n/*37*/ test( \"cs4h6\", \"149,150,152,153,154,157,158,160,161,162\" );    \n/*38*/ test( \"84523c\", \"1,3,11,15,23,26,34,38,46,49\" );    \n/*39*/ test( \"54C78hS\", \"228,231,232,233,236,241,242,243,246,247\" );    \n/*40*/ test( \"65h7ccs\", \"151,152,153,154,157,158,160,163,164,165\" );    \n/*41*/ test( \"c95hSc2C\", \"145,147,151,153,156,159,162,164,168,171\" );    \n/*42*/ test( \"c5h3Ss794\", \"130,131,133,137,138,142,148,150,152,157\" );    \n/*43*/ test( \"7ShscC846\", \"129,130,131,134,135,139,141,142,146,148\" );    \n/*44*/ test( \"cshSCCS7ch\", \"253,254,256,259,260,261,263,264,265,266\" );    \n/*45*/ test( \"hhC7849Ss6C\", \"201,202,203,205,206,211,212,216,220,225\" );    \n/*46*/ test( \"hhsc3C987Ccs\", \"201,202,204,205,207,208,214,217,218,220\" );    \n/*47*/ test( \"SC7S8hc59ss2\", \"162,169,174,178,182,185,188,194,199,203\" );    \n/*48*/ test( \"s7S6c35C9CShc\", \"367,371,377,379,380,385,387,388,392,395\" );    \n/*49*/ test( \"4scC3hh982Cc5s\", \"422,426,430,434,447,451,459,463,471,479\" );    \n/*50*/ test( \"23h465Ssc9CchC\", \"1027,1033,1045,1047,1057,1069,1071,1075,1081,1093\" );\n_TEST\n\nrequire 'minitest/autorun'\n\ndescribe 'Selection' do\n  selection = Selection.new\n  test.split(\"\\n\").each do |line|\n    t, n, input, expect = line.match(/^\\/\\*(\\d+)\\*\\/\\s*test\\(\\s*\"([^\"]+)\",\\s*\"([^\"]+)\"\\s*\\);*\\s*$/).to_a\n    it input do\n      assert_equal expect, selection.seq(input).join(\",\")\n    end\n  end\nend\n\n\n[\u6a2a\u6d5c\u3078\u306a\u3061\u3087\u3053\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u52c9\u5f37\u4f1a](https://yhpg.doorkeeper.jp/)\u306b\u3066\u904e\u53bb\u306b\u51fa\u984c\u3055\u308c\u305f[\u591a\u6bb5\u968e\u9078\u629c](http://nabetani.sakura.ne.jp/hena/ord24eliseq/)\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n\u56de\u7b54\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306f30\u5206\u7a0b\u5ea6\u3002\n\n\u672c\u5f53\u306f`@list`\u306f\u9577\u3055\u6c7a\u3081\u6253\u3061\u3067\u306f\u306a\u304f`1..Float::INFINITY`\u306b\u3057\u305f\u304b\u3063\u305f\u306e\u3060\u304c\u3001`Enumerator::Lazy`\u3067\u306f\u89e3\u3051\u305d\u3046\u306b\u306a\u304b\u3063\u305f\u306e\u3067`1..2000`\u3068\u3044\u3046\u7bc4\u56f2\u3067\u3084\u308a\u304f\u308a\u3059\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\u4eca\u56de\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u6e80\u305f\u305b\u3070\u3088\u3044\u3068\u3044\u3046\u8003\u3048\u65b9\u306f\u3084\u306f\u308a\u6027\u306b\u5408\u308f\u306a\u3044\u306e\u3060\u304c\u3001\u3053\u308c\u4ee5\u5916\u56de\u7b54\u304c\u601d\u3044\u3064\u304b\u306a\u304b\u3063\u305f\u306e\u304c\u6094\u3084\u307e\u308c\u308b\u3002\n\n```ruby\nclass Selection\n  def seq input\n    @list = (1..2000).to_a\n    input.chars.each{|c|\n      case c\n      when \"2\"..\"9\"\n        delete_multiple c.to_i\n      when \"S\"\n        delete_indexes square_next\n      when \"s\"\n        delete_indexes square_prev\n      when \"C\"\n        delete_indexes cubic_next\n      when \"c\"\n        delete_indexes cubic_prev\n      when \"h\"\n        @list = @list.drop(100)\n      end\n    }\n    @list[0..9]\n  end\n\n  private\n  def delete_multiple n\n    @list = @list.reject.with_index(1){|_, i|\n      (i % n) === 0\n    }\n  end\n\n  def delete_indexes indexes\n    indexes.reverse.map{|i|\n      @list.delete_at i\n    }\n  end\n\n  def square_next\n    next_indexes square.map{|n| @list.index(n)}\n  end\n\n  def square_prev\n    prev_indexes square.map{|n| @list.index(n)}\n  end\n\n  def cubic_next\n    next_indexes cubic.map{|n| @list.index(n)}\n  end\n\n  def cubic_prev\n    prev_indexes cubic.map{|n| @list.index(n)}\n  end\n\n  def next_indexes indexes\n    indexes.map{|i| i + 1}.reject{|i| i < 0 || @list.size <= i}\n  end\n\n  def prev_indexes indexes\n    indexes.map{|i| i - 1}.reject{|i| i < 0 || @list.size <= i}\n  end\n\n  def square\n    @list.select{|n|\n      sq = Math.sqrt n\n      sq.to_i === sq\n    }\n  end\n\n  def cubic\n    @list.select{|n|\n      cu = Math.cbrt n\n      cu.to_i === cu\n    }\n  end\nend\n\ntest = <<_TEST\n/*0*/ test( \"ss6cc24S\", \"1,9,21,30,33,37,42,44,49,56\" );    \n/*1*/ test( \"h\", \"101,102,103,104,105,106,107,108,109,110\" );    \n/*2*/ test( \"hh\", \"201,202,203,204,205,206,207,208,209,210\" );    \n/*3*/ test( \"hhh\", \"301,302,303,304,305,306,307,308,309,310\" );    \n/*4*/ test( \"2\", \"1,3,5,7,9,11,13,15,17,19\" );    \n/*5*/ test( \"22\", \"1,5,9,13,17,21,25,29,33,37\" );    \n/*6*/ test( \"222\", \"1,9,17,25,33,41,49,57,65,73\" );    \n/*7*/ test( \"3\", \"1,2,4,5,7,8,10,11,13,14\" );    \n/*8*/ test( \"33\", \"1,2,5,7,10,11,14,16,19,20\" );    \n/*9*/ test( \"333\", \"1,2,7,10,14,16,20,23,28,29\" );    \n/*10*/ test( \"s\", \"1,2,4,5,6,7,9,10,11,12\" );    \n/*11*/ test( \"ss\", \"1,4,5,6,9,10,11,12,13,16\" );    \n/*12*/ test( \"sss\", \"4,5,9,10,11,12,16,17,18,19\" );    \n/*13*/ test( \"S\", \"1,3,4,6,7,8,9,11,12,13\" );    \n/*14*/ test( \"SS\", \"1,4,7,8,9,12,13,14,15,16\" );    \n/*15*/ test( \"SSS\", \"1,8,9,13,14,15,16,20,21,22\" );    \n/*16*/ test( \"c\", \"1,2,3,4,5,6,8,9,10,11\" );    \n/*17*/ test( \"cc\", \"1,2,3,4,5,8,9,10,11,12\" );    \n/*18*/ test( \"ccc\", \"1,2,3,4,8,9,10,11,12,13\" );    \n/*19*/ test( \"C\", \"1,3,4,5,6,7,8,10,11,12\" );    \n/*20*/ test( \"CC\", \"1,4,5,6,7,8,11,12,13,14\" );    \n/*21*/ test( \"CCC\", \"1,5,6,7,8,12,13,14,15,16\" );    \n/*22*/ test( \"23\", \"1,3,7,9,13,15,19,21,25,27\" );    \n/*23*/ test( \"32\", \"1,4,7,10,13,16,19,22,25,28\" );    \n/*24*/ test( \"2h\", \"201,203,205,207,209,211,213,215,217,219\" );    \n/*25*/ test( \"h2\", \"101,103,105,107,109,111,113,115,117,119\" );    \n/*26*/ test( \"sC\", \"1,4,5,6,7,9,10,11,12,13\" );    \n/*27*/ test( \"Cs\", \"1,4,5,6,7,8,10,11,12,13\" );    \n/*28*/ test( \"s468\", \"1,2,4,6,7,11,12,16,17,20\" );    \n/*29*/ test( \"S468\", \"1,3,4,7,8,12,13,16,18,21\" );    \n/*30*/ test( \"cc579\", \"1,2,3,4,8,9,11,13,15,16\" );    \n/*31*/ test( \"CC579\", \"1,4,5,6,8,11,13,15,17,18\" );    \n/*32*/ test( \"85\", \"1,2,3,4,6,7,9,10,12,13\" );    \n/*33*/ test( \"sh\", \"110,111,112,113,114,115,116,117,118,119\" );    \n/*34*/ test( \"94h\", \"150,151,154,155,156,158,159,160,163,164\" );    \n/*35*/ test( \"h9c8\", \"101,102,103,104,105,106,107,110,111,112\" );    \n/*36*/ test( \"Cc3s\", \"1,3,5,6,10,11,13,16,17,19\" );    \n/*37*/ test( \"cs4h6\", \"149,150,152,153,154,157,158,160,161,162\" );    \n/*38*/ test( \"84523c\", \"1,3,11,15,23,26,34,38,46,49\" );    \n/*39*/ test( \"54C78hS\", \"228,231,232,233,236,241,242,243,246,247\" );    \n/*40*/ test( \"65h7ccs\", \"151,152,153,154,157,158,160,163,164,165\" );    \n/*41*/ test( \"c95hSc2C\", \"145,147,151,153,156,159,162,164,168,171\" );    \n/*42*/ test( \"c5h3Ss794\", \"130,131,133,137,138,142,148,150,152,157\" );    \n/*43*/ test( \"7ShscC846\", \"129,130,131,134,135,139,141,142,146,148\" );    \n/*44*/ test( \"cshSCCS7ch\", \"253,254,256,259,260,261,263,264,265,266\" );    \n/*45*/ test( \"hhC7849Ss6C\", \"201,202,203,205,206,211,212,216,220,225\" );    \n/*46*/ test( \"hhsc3C987Ccs\", \"201,202,204,205,207,208,214,217,218,220\" );    \n/*47*/ test( \"SC7S8hc59ss2\", \"162,169,174,178,182,185,188,194,199,203\" );    \n/*48*/ test( \"s7S6c35C9CShc\", \"367,371,377,379,380,385,387,388,392,395\" );    \n/*49*/ test( \"4scC3hh982Cc5s\", \"422,426,430,434,447,451,459,463,471,479\" );    \n/*50*/ test( \"23h465Ssc9CchC\", \"1027,1033,1045,1047,1057,1069,1071,1075,1081,1093\" );\n_TEST\n\nrequire 'minitest/autorun'\n\ndescribe 'Selection' do\n  selection = Selection.new\n  test.split(\"\\n\").each do |line|\n    t, n, input, expect = line.match(/^\\/\\*(\\d+)\\*\\/\\s*test\\(\\s*\"([^\"]+)\",\\s*\"([^\"]+)\"\\s*\\);*\\s*$/).to_a\n    it input do\n      assert_equal expect, selection.seq(input).join(\",\")\n    end\n  end\nend\n```\n", "tags": ["Ruby", "\u3069\u3046\u66f8\u304f", "yhpg"]}