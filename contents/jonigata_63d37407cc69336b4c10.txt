{"context": " More than 1 year has passed since last update.Haxe3\u3067WebGL\u3092\u4f7f\u3063\u3066\u4e09\u89d2\u5f62\u3092\u8868\u793a\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\u3053\u3061\u3089\u306e\u30b3\u30fc\u30c9( https://github.com/skial/haxe-examples/blob/master/2.08/webgl_lesson_01/src/Main.hx )\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\u591a\u5206\u3053\u308c\u3082\u5143\u306fhttp://learningwebgl.com/blog/?p=28 \u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\u597d\u304d\u306bf\u00d7\u00d7k\u3057\u3066\u3088\u3044\u3068\u306e\u3053\u3068\u3060\u3063\u305f\u306e\u3067\u3001untyped\u3092\u4f7f\u3063\u3066\u308b\u90e8\u5206\u306e\u524a\u9664\u3084http://qiita.com/jonigata/items/7c322fd5d5117d52a97a \u3068\u540c\u3058\u3088\u3046\u306a\u51e6\u7f6e\u3092\u884c\u3044\u307e\u3057\u305f\u3002\n\nTriangle.hx\nimport js.html.webgl.RenderingContext;\n\n@:expose\nclass WebGL {\n    static function main() {}\n\n    public static var vertexShaderSource = \"\n        attribute vec3 aVertexPosition;\n\n        void main(void) {\n            gl_Position = vec4(aVertexPosition, 1.0);\n        }\n\";\n\n    public static var fragmentShaderSource = \"\n        precision mediump float;\n\n        void main(void) {\n            gl_FragColor = vec4(0.9, 0.9, 0.9, 1.0);\n        }\n\";\n\n\n    static function start(canvas: js.html.CanvasElement) {\n        initGL(canvas);\n\n        initShaders();\n        initBuffers();\n\n        gl.enable(RenderingContext.DEPTH_TEST);\n        gl.viewport(0, 0, canvas.width, canvas.height);\n\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\n        gl.clear(\n            RenderingContext.COLOR_BUFFER_BIT |\n            RenderingContext.DEPTH_BUFFER_BIT);\n\n        drawScene();\n    }\n\n    static private function initGL(canvas: js.html.CanvasElement) {\n        try {\n            gl = canvas.getContext(\"experimental-webgl\");\n        } catch (e: Dynamic) {}\n        if (gl == null) {\n            js.Lib.alert(\"Could not initialise WebGL, sorry :-(\");\n        }\n    }\n\n    public static function initShaders():Void {\n        var vertexShader =\n            getShader(RenderingContext.VERTEX_SHADER, vertexShaderSource);\n        var fragmentShader =\n            getShader(RenderingContext.FRAGMENT_SHADER, fragmentShaderSource);\n\n        shaderProgram = gl.createProgram();\n        gl.attachShader(shaderProgram, vertexShader);\n        gl.attachShader(shaderProgram, fragmentShader);\n        gl.linkProgram(shaderProgram);\n\n        if (!gl.getProgramParameter(\n                shaderProgram, RenderingContext.LINK_STATUS)) {\n            js.Lib.alert('Could not initialise shaders');\n        }\n\n        gl.useProgram(shaderProgram);\n\n        vertexPositionAttribute =\n            gl.getAttribLocation(shaderProgram, 'aVertexPosition');\n        gl.enableVertexAttribArray(vertexPositionAttribute);\n    }\n\n    public static function getShader(shaderType: Int, str: String) {\n        var shader = gl.createShader(shaderType);\n\n        gl.shaderSource(shader, str);\n        gl.compileShader(shader);\n\n        if (!gl.getShaderParameter(shader, RenderingContext.COMPILE_STATUS)) {\n            js.Lib.alert(gl.getShaderInfoLog(shader));\n            return null;\n        }\n\n        return shader;\n    }\n\n    public static function initBuffers() {\n        triangleVertexPositionBuffer = gl.createBuffer();\n        gl.bindBuffer(\n            RenderingContext.ARRAY_BUFFER, triangleVertexPositionBuffer);\n        var vertices:Array<Float> = [0.0, 1.0, 0.0,\n                                     -1.0, -1.0, 0.0,\n                                     1.0, -1.0, 0.0];\n        gl.bufferData(\n            RenderingContext.ARRAY_BUFFER,\n            cast new js.html.Float32Array(cast vertices),\n            RenderingContext.STATIC_DRAW);\n        itemSize = 3;\n        numItems = 3;\n    }\n\n    public static function drawScene() {\n        gl.bindBuffer(\n            RenderingContext.ARRAY_BUFFER, triangleVertexPositionBuffer);\n        gl.vertexAttribPointer(\n            vertexPositionAttribute,\n            itemSize, RenderingContext.FLOAT, false, 0, 0);\n        gl.drawArrays(RenderingContext.TRIANGLES, 0, numItems);\n    }\n\n\n    static private var gl: js.html.webgl.RenderingContext;\n    static private var shaderProgram;\n    static private var vertexPositionAttribute;\n    static private var triangleVertexPositionBuffer;\n    static private var itemSize;\n    static private var numItems;\n\n}\n\n\n\ntriangle.html\n<!doctype html>\n<html lang=\"ja\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>WebGL</title>\n    <script src=\"./webgl.js\"></script>\n\n  </head>\n  <body onload=\"WebGL.start(document.getElementById('main-screen'))\">\n    <canvas id=\"main-screen\" style=\"border-width: 1px;border-style: solid;\" width=\"640\" height=\"480\">\n    </canvas>\n  </body>\n</html>\n\n\nHaxe3\u3067WebGL\u3092\u4f7f\u3063\u3066\u4e09\u89d2\u5f62\u3092\u8868\u793a\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\u3053\u3061\u3089\u306e\u30b3\u30fc\u30c9( https://github.com/skial/haxe-examples/blob/master/2.08/webgl_lesson_01/src/Main.hx )\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\u591a\u5206\u3053\u308c\u3082\u5143\u306fhttp://learningwebgl.com/blog/?p=28 \u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u597d\u304d\u306bf\u00d7\u00d7k\u3057\u3066\u3088\u3044\u3068\u306e\u3053\u3068\u3060\u3063\u305f\u306e\u3067\u3001untyped\u3092\u4f7f\u3063\u3066\u308b\u90e8\u5206\u306e\u524a\u9664\u3084http://qiita.com/jonigata/items/7c322fd5d5117d52a97a \u3068\u540c\u3058\u3088\u3046\u306a\u51e6\u7f6e\u3092\u884c\u3044\u307e\u3057\u305f\u3002\n\n```haxe:Triangle.hx\nimport js.html.webgl.RenderingContext;\n\n@:expose\nclass WebGL {\n    static function main() {}\n\n    public static var vertexShaderSource = \"\n        attribute vec3 aVertexPosition;\n\n        void main(void) {\n            gl_Position = vec4(aVertexPosition, 1.0);\n        }\n\";\n    \n    public static var fragmentShaderSource = \"\n        precision mediump float;\n\n        void main(void) {\n            gl_FragColor = vec4(0.9, 0.9, 0.9, 1.0);\n        }\n\";\n    \n    \n    static function start(canvas: js.html.CanvasElement) {\n        initGL(canvas);\n\n        initShaders();\n        initBuffers();\n\n        gl.enable(RenderingContext.DEPTH_TEST);\n        gl.viewport(0, 0, canvas.width, canvas.height);\n\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\n        gl.clear(\n            RenderingContext.COLOR_BUFFER_BIT |\n            RenderingContext.DEPTH_BUFFER_BIT);\n\n        drawScene();\n    }\n\n    static private function initGL(canvas: js.html.CanvasElement) {\n        try {\n            gl = canvas.getContext(\"experimental-webgl\");\n        } catch (e: Dynamic) {}\n        if (gl == null) {\n            js.Lib.alert(\"Could not initialise WebGL, sorry :-(\");\n        }\n    }\n\n    public static function initShaders():Void {\n        var vertexShader =\n            getShader(RenderingContext.VERTEX_SHADER, vertexShaderSource);\n        var fragmentShader =\n            getShader(RenderingContext.FRAGMENT_SHADER, fragmentShaderSource);\n\t\t\n        shaderProgram = gl.createProgram();\n        gl.attachShader(shaderProgram, vertexShader);\n        gl.attachShader(shaderProgram, fragmentShader);\n        gl.linkProgram(shaderProgram);\n\t\t\n        if (!gl.getProgramParameter(\n                shaderProgram, RenderingContext.LINK_STATUS)) {\n            js.Lib.alert('Could not initialise shaders');\n        }\n\t\t\n        gl.useProgram(shaderProgram);\n\t\t\n        vertexPositionAttribute =\n            gl.getAttribLocation(shaderProgram, 'aVertexPosition');\n        gl.enableVertexAttribArray(vertexPositionAttribute);\n    }\n\n    public static function getShader(shaderType: Int, str: String) {\n        var shader = gl.createShader(shaderType);\n\n        gl.shaderSource(shader, str);\n        gl.compileShader(shader);\n\n        if (!gl.getShaderParameter(shader, RenderingContext.COMPILE_STATUS)) {\n            js.Lib.alert(gl.getShaderInfoLog(shader));\n            return null;\n        }\n\n        return shader;\n    }\n\t\n    public static function initBuffers() {\n        triangleVertexPositionBuffer = gl.createBuffer();\n        gl.bindBuffer(\n            RenderingContext.ARRAY_BUFFER, triangleVertexPositionBuffer);\n        var vertices:Array<Float> = [0.0, 1.0, 0.0,\n                                     -1.0, -1.0, 0.0,\n                                     1.0, -1.0, 0.0];\n        gl.bufferData(\n            RenderingContext.ARRAY_BUFFER,\n            cast new js.html.Float32Array(cast vertices),\n            RenderingContext.STATIC_DRAW);\n        itemSize = 3;\n        numItems = 3;\n    }\n\n    public static function drawScene() {\n        gl.bindBuffer(\n            RenderingContext.ARRAY_BUFFER, triangleVertexPositionBuffer);\n        gl.vertexAttribPointer(\n            vertexPositionAttribute,\n            itemSize, RenderingContext.FLOAT, false, 0, 0);\n        gl.drawArrays(RenderingContext.TRIANGLES, 0, numItems);\n    }\n\t\n    \n    static private var gl: js.html.webgl.RenderingContext;\n    static private var shaderProgram;\n    static private var vertexPositionAttribute;\n    static private var triangleVertexPositionBuffer;\n    static private var itemSize;\n    static private var numItems;\n    \n}\n```\n\n```html:triangle.html\n<!doctype html>\n<html lang=\"ja\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>WebGL</title>\n    <script src=\"./webgl.js\"></script>\n\n  </head>\n  <body onload=\"WebGL.start(document.getElementById('main-screen'))\">\n    <canvas id=\"main-screen\" style=\"border-width: 1px;border-style: solid;\" width=\"640\" height=\"480\">\n    </canvas>\n  </body>\n</html>\n```\n", "tags": ["Haxe", "WebGL"]}