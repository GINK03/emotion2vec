{"context": "\n\n\u554f\u984c\u70b9\n\n\u30af\u30e9\u30b9\u3078\u5272\u308a\u5f53\u3066\u5404\u30e1\u30bd\u30c3\u30c9\u3092\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3068\u3059\u308b\u5834\u5408\u3001\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u9593\u3067\u7570\u306a\u308b\u5f15\u6570\u3092Init\u6642\u306b\u3080\u308a\u304f\u308aContext\u3068\u3059\u308b\nContextObject\u3092\u4f5c\u3063\u3066\u5404\u95a2\u6570\u306b\u5272\u308a\u5f53\u3066\u3066\u3082\u540c\u3058\n\u3069\u3061\u3089\u306e\u5834\u5408\u3082\u30e1\u30bd\u30c3\u30c9\u30fb\u95a2\u6570\u306e\u5f15\u6570\u304c\u306a\u3044\u306b\u7b49\u3057\u3044\n\u305f\u3060\u3057\u3001\u30af\u30e9\u30b9\u306a\u3089\u4e00\u5fdc\u4ed6\u3067\u3082\u4f7f\u3048\u308b\n\n\u3068\u3044\u3046\u306e\u3092\u8003\u3048\u305f\u6642\u3001\u95a2\u6570\u304b\u3089\u5730\u9053\u306b\u5404\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u306b\u5bfe\u5fdc\u3059\u308bContext\u3092\u51e6\u7406\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u30af\u30e9\u30b9\u306b\u3057\u305f\u307b\u3046\u304c\u3088\u3055\u305d\u3046\uff1fAirflow\u304c\u305d\u3046\u3057\u3066\u3044\u305f\n\n\u30b3\u30fc\u30c9\n\narg_context.py\nimport argparse\n\nclass MyClass:\n    def __init__(self, year, month):\n        self.year = year\n        self.month = month\n\n    def fun():\n        # do something\n\nclass Context:\n    def __init__(self, args):\n        self.year = args.year\n        self.month = args.month\n\n\ndef func1_for_sub(args):\n    context = Context(args)\n    # do something\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers()\n    parser.add_argument('-y', '--year', required=True, type=int)\n    parser.add_argument('-m', '--month', required=True, type=int)\n\n    subcommand_parser = subparsers.add_parser('subcommand')\n    subcommand_parser.set_defaults(func=MyClass.fun)\n\n    args = parser.parse_args()\n    funcname = args.func.__name__\n    del args.func\n    c = MyClass(**vars(args))\n    getattr(c, funcname)()\n\n\n\nargs_to_dict.py\nimport argparse\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers()\n    parser.add_argument('-y', '--year', required=True, type=int)\n    parser.add_argument('-m', '--month', required=True, type=int)\n    parser.add_argument('-d', '--day', required=True, type=int)\n\n    mytest_parser = subparsers.add_parser('mytest')\n    def mytest(year, month, day):\n        print(locals())\n    mytest_parser.set_defaults(func=mytest)\n\n    args = parser.parse_args()\n    print(args) # namespace object\n    dict_args = vars(args)\n    #args.func(**dict_args) # TypeError: mytest() got an unexpected keyword argument 'func' \n\n\n## \u554f\u984c\u70b9\n- \u30af\u30e9\u30b9\u3078\u5272\u308a\u5f53\u3066\u5404\u30e1\u30bd\u30c3\u30c9\u3092\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3068\u3059\u308b\u5834\u5408\u3001\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u9593\u3067\u7570\u306a\u308b\u5f15\u6570\u3092Init\u6642\u306b\u3080\u308a\u304f\u308aContext\u3068\u3059\u308b\n- ContextObject\u3092\u4f5c\u3063\u3066\u5404\u95a2\u6570\u306b\u5272\u308a\u5f53\u3066\u3066\u3082\u540c\u3058\n- \u3069\u3061\u3089\u306e\u5834\u5408\u3082\u30e1\u30bd\u30c3\u30c9\u30fb\u95a2\u6570\u306e\u5f15\u6570\u304c\u306a\u3044\u306b\u7b49\u3057\u3044\n- \u305f\u3060\u3057\u3001\u30af\u30e9\u30b9\u306a\u3089\u4e00\u5fdc\u4ed6\u3067\u3082\u4f7f\u3048\u308b\n\n\u3068\u3044\u3046\u306e\u3092\u8003\u3048\u305f\u6642\u3001\u95a2\u6570\u304b\u3089\u5730\u9053\u306b\u5404\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u306b\u5bfe\u5fdc\u3059\u308bContext\u3092\u51e6\u7406\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u30af\u30e9\u30b9\u306b\u3057\u305f\u307b\u3046\u304c\u3088\u3055\u305d\u3046\uff1fAirflow\u304c\u305d\u3046\u3057\u3066\u3044\u305f\n\n## \u30b3\u30fc\u30c9\n```py3:arg_context.py\nimport argparse\n\nclass MyClass:\n\tdef __init__(self, year, month):\n\t\tself.year = year\n\t\tself.month = month\n\n\tdef fun():\n\t\t# do something\n\nclass Context:\n\tdef __init__(self, args):\n\t\tself.year = args.year\n\t\tself.month = args.month\n\n\ndef func1_for_sub(args):\n\tcontext = Context(args)\n\t# do something\n\nif __name__ == '__main__':\n\tparser = argparse.ArgumentParser()\n\tsubparsers = parser.add_subparsers()\n\tparser.add_argument('-y', '--year', required=True, type=int)\n\tparser.add_argument('-m', '--month', required=True, type=int)\n\n\tsubcommand_parser = subparsers.add_parser('subcommand')\n\tsubcommand_parser.set_defaults(func=MyClass.fun)\n\n\targs = parser.parse_args()\n\tfuncname = args.func.__name__\n\tdel args.func\n\tc = MyClass(**vars(args))\n\tgetattr(c, funcname)()\n```\n\n\n```py3:args_to_dict.py\nimport argparse\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers()\n    parser.add_argument('-y', '--year', required=True, type=int)\n    parser.add_argument('-m', '--month', required=True, type=int)\n    parser.add_argument('-d', '--day', required=True, type=int)\n\n    mytest_parser = subparsers.add_parser('mytest')\n    def mytest(year, month, day):\n        print(locals())\n    mytest_parser.set_defaults(func=mytest)\n\n    args = parser.parse_args()\n    print(args) # namespace object\n    dict_args = vars(args)\n    #args.func(**dict_args) # TypeError: mytest() got an unexpected keyword argument 'func' \n```\n", "tags": ["memo"]}