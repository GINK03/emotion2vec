{"context": "\n\nRC\u53d7\u4fe1\u5668\u306e\u4fe1\u53f7\nRC\u53d7\u4fe1\u5668\u304b\u3089\u51fa\u529b\u3055\u308c\u308b\u4fe1\u53f7\u306f\u56f3\uff11\u306e\u3088\u3046\u306a\u6ce2\u5f62\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u308c\u3063\u3066\u6b63\u5f0f\u306a\u540d\u79f0\u3042\u308b\u3093\u3067\u3059\u304b\u306d\uff1f\u3000\u4fbf\u5b9c\u7684\u306bRC\u4fe1\u53f7\u3068\u547c\u3076\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n\u56f3\uff11\u3000RC\u4fe1\u53f7\nhigh\u30ec\u30d9\u30eb\u306e\u30d1\u30eb\u30b9\u5e45\u30921.5ms\u3092\u4e2d\u5fc3\u306b-127\uff5e+127\u306e\u30d0\u30b9\u4fe1\u53f7\u306b\u5909\u63db\u3059\u308b\u306e\u304c\u4eca\u56de\u306e\u76ee\u7684\u3067\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001RC\u53d7\u4fe1\u5668\u306b\u306f\u96fb\u6e90\u3068\u3057\u30665V\u3092\u5165\u308c\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u4f7f\u3063\u3066\u308bRC\u53d7\u4fe1\u5668\u3067\u306f\u51fa\u529b\u4fe1\u53f7\u306e\u30ec\u30d9\u30eb\u306f3.3V\u3067\u3057\u305f\u3002LDO\u7684\u306a\u96fb\u6e90\u30ec\u30ae\u30e5\u30ec\u30fc\u30bf\u304c\u5165\u3063\u3066\u308b\u3093\u3067\u3059\u304b\u306d\u3002\u4eca\u56de\u306eZynq\u306e\u3088\u3046\u306b3.3V\u3092\u4f7f\u3046\u3053\u3068\u304c\u591a\u3044\u306e\u3067\u3053\u308c\u307e\u305f\u90fd\u5408\u304c\u3088\u3044\u3067\u3059\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306eURL\u306e\u3069\u3053\u304b\u306b\u3042\u308bTKRCV.vhd\u3067\u3059\u3002\u30c6\u30b9\u30c8\u30d9\u30f3\u30c1\u306fbench_TKRCV.vhd\u3067\u3059\u3002\nhttps://github.com/x7700jp/x7700jp_codes\n\u305f\u3044\u3057\u305f\u5206\u91cf\u3058\u3083\u306a\u3044\u306e\u3067\u5168\u6587\u5f15\u7528\u3057\u307e\u3059\u3002\n\nTKRCV.vhd\n\nlibrary IEEE;\nuse IEEE.STD_LOGIC_1164.ALL;\nuse IEEE.STD_LOGIC_ARITH.ALL;\nuse IEEE.STD_LOGIC_UNSIGNED.ALL;\n\nentity TKRCV is\ngeneric (\n    CW     : integer := 7   ; -- PERI_GEN cnt Width\n    CNT    : integer := 110   -- 1.4ms/256/clk_peri\n);\nport (\n    iCLK  : in    std_logic;\n    iRST  : in    std_logic;\n    iRCV  : in    std_logic;\n    oRCV  : out   std_logic_vector(7 downto 0)\n);\nend TKRCV;\n\narchitecture RTL of TKRCV is\n\n    type tSM is (IDLE,CNT_A);\n    signal rSM   : tSM                             := IDLE;\n    signal rCNT  : std_logic_vector(CW-1 downto 0) := (others => '0');\n    signal rCNT2 : std_logic_vector(   8 downto 0) := (others => '0');\n    signal rRCV  : std_logic_vector(   7 downto 0) := (others => '0');\n    signal gRCV  : std_logic_vector(   8 downto 0) ;\n    signal rIN   : std_logic                       := '0';\n\n    constant cRCV_ZERO : std_logic_vector(11 downto 0) := conv_std_logic_vector(273,9); -- 1500 us\n    constant cRCV_LOW  : std_logic_vector(11 downto 0) := conv_std_logic_vector(146,9); --  800 us\n    constant cRCV_HIGH : std_logic_vector(11 downto 0) := conv_std_logic_vector(400,9); -- 2200 us\nbegin\n\n    --\n    P_FF : process(iCLK) begin\n        if (iCLK'event and iCLK = '1') then\n            if (iRST = '1') then\n                rIN <= '0';\n            else\n                rIN <= iRCV;\n            end if;\n        end if;\n    end process;\n\n    P_CNT : process(iCLK) begin\n        if (iCLK'event and iCLK = '1') then\n            if (iRST = '1') then\n                rSM   <= IDLE;\n                rCNT  <= (others => '0');\n                rCNT2 <= (others => '0');\n                rRCV  <= (others => '0');\n            else\n                case rSM is\n                when IDLE =>\n                    if (iRCV = '1' and rIN = '0') then -- iRCV rising edge det\n                        rSM   <= CNT_A;\n                        rCNT  <= (rCNT'high  downto 1 => '0') & '1';\n                        rCNT2 <= (rCNT2'high downto 1 => '0') & '1';\n                    else\n                        rCNT  <= (others => '0');\n                        rCNT2 <= (others => '0');\n                    end if;\n                when CNT_A =>\n                    if (iRCV = '0' or cRCV_HIGH < rCNT ) then\n                        rSM  <= IDLE;\n                        rRCV <= gRCV(7 downto 0);\n                    else\n                        if (rCNT = conv_std_logic_vector(CNT,CW)) then\n                            rCNT  <= (others => '0');\n                            rCNT2 <= rCNT2 + '1';\n                        else\n                            rCNT <= rCNT + '1';\n                        end if;\n                    end if;\n                end case;\n            end if;\n        end if;\n    end process;\n\n    -- gate\n    gRCV <= \"111111110\"       when(rCNT2     < cRCV_LOW ) else\n            \"001111111\"       when(cRCV_HIGH < rCNT2    ) else\n            rCNT2 - cRCV_ZERO ;\n\n\n    -- output\n    oRCV <= rRCV;\n\nend RTL;\n\n\n\n\n\u25a0generic\u5024\u306b\u3064\u3044\u3066\nCNT\uff1aCNT=1.4ms/256/clk_peri\u3068\u8a2d\u5b9a\u3057\u307e\u3059\u3002\uff08clk_peri\u306f\u30af\u30ed\u30c3\u30af\u306e\u5468\u671f\uff09\nCW\uff1aCNT\u5024\u3092\u8868\u73fe\u3067\u304d\u308b\u30d3\u30c3\u30c8\u6570\n\n\u25a0\u30dd\u30fc\u30c8\u306b\u3064\u3044\u3066\niCLK  : \u5165\u529b\u30af\u30ed\u30c3\u30af\niRST  : \u30ea\u30bb\u30c3\u30c8\u4fe1\u53f7\uff08\uff11\u3067\u30ea\u30bb\u30c3\u30c8\uff09\niRCV  : RC\u4fe1\u53f7\noRCV  : RC\u4fe1\u53f7\u306ehigh\u30ec\u30d9\u30eb\u5e45\u3092-127\uff5e+127\u306b\u5909\u63db\u3057\u305f\u5024\n\n\u25a0\u52d5\u4f5c\u306b\u3064\u3044\u3066\n\n\uff11\uff0e\u7acb\u3061\u4e0a\u304c\u308a\u691c\u51fa\nif (iRCV = '1' and rIN = '0') then -- iRCV rising edge det\u3000\u3067RC\u4fe1\u53f7\u306e\u7acb\u3061\u4e0a\u304c\u308a\u691c\u51fa\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\u7acb\u3061\u4e0a\u304c\u308a\u691c\u51fa\u306f\u5bfe\u8c61\u3092\uff11\u30af\u30ed\u30c3\u30af\u9045\u3089\u305b\u305f\u4fe1\u53f7\u3068\u6bd4\u8f03\u3059\u308b\u3053\u3068\u3067\u3067\u304d\u307e\u3059\u3002\nRC\u4fe1\u53f7\u306e\u7acb\u3061\u4e0a\u304c\u308a\u3092\u691c\u51fa\u3057\u305f\u3089\u30b9\u30c6\u30fc\u30c8\uff08rSM \u3092IDLE\u304b\u3089CNT_A\uff09\u3092\u63a8\u79fb\u3055\u305b\u307e\u3059\u3002\nrCNT  <= (rCNT'high  downto 1 => '0') & '1';\u306e\u8a18\u8ff0\u306f\u6700\u4e0b\u4f4d\u4ee5\u5916\u3092\uff10\u3001\u6700\u4e0b\u4f4d\u3092\uff11\u3068\u3059\u308b\u8a18\u8ff0\u3067\u3059\u3002\n\n\uff12\uff0e\u30ab\u30a6\u30f3\u30c8\u52d5\u4f5c\n\u30b9\u30c6\u30fc\u30c8\u304cCNT_A\u306e\u3068\u304d\u306f\u30ab\u30a6\u30f3\u30c8\u52d5\u4f5c\u3067\u3059\u3002\nif (iRCV = '0' or cRCV_HIGH < rCNT ) then\u306fRC\u4fe1\u53f7\u304c0\u306b\u306a\u308b\u304b\u3001\u30bf\u30a4\u30e0\u30aa\u30fc\u30d0\u30fc\u3092\u898b\u3066\u307e\u3059\u3002\nRC\u4fe1\u53f7\u304c0\u306b\u306a\u3063\u305f\u969b\u306b\u3001\u8a08\u6570\u3057\u3066\u3044\u308b\u5024\u3092\u30e9\u30c3\u30c1\u3057\u3066\u51fa\u529b\u3068\u306a\u308a\u307e\u3059\u3002\n\u30bf\u30a4\u30e0\u30aa\u30fc\u30d0\u30fc\u306f\u306a\u3093\u3089\u304b\u306e\u4e0d\u5177\u5408\u3067RC\u4fe1\u53f7\u304c\u60f3\u5b9a\u3088\u308ahigh\u6642\u9593\u304c\u9577\u3044\u5834\u5408\u3001\u30bf\u30a4\u30e0\u30aa\u30fc\u30d0\u30fc\u3068\u3057\u307e\u3059\u3002RC\u4fe1\u53f7\u306e\u6b21\u306e\u7acb\u3061\u4e0a\u304c\u308a\u307e\u3067\u306f\u30b9\u30c6\u30fc\u30c8\u306fIDLE\u306b\u306a\u308a\u307e\u3059\u3002\nif (rCNT = conv_std_logic_vector(CNT,CW)) then\u3067\u306fgeneric\u5024\u306eCNT\u3067\u8a2d\u5b9a\u3057\u305f\u9593\u9694\u3067rCNT2\u3092\u52a0\u7b97\u3057\u3066\u3044\u307e\u3059\u3002\n\n\uff13\uff0e\u30b2\u30fc\u30c8\u51e6\u7406\ngRCV <= \"111111110\"       when(rCNT2     < cRCV_LOW ) else\u3067rCNT2\u3092\u6b63\u898f\u5316\u3057\u3001-127\uff5e+127\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\n\n\uff14\uff0e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u7d50\u679c\n\n\u56f3\uff12\u3000\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u7d50\u679c\n\u203b\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306f\u30d1\u30eb\u30b9\u9593\u9694\u3092\u3064\u3081\u3066\u307e\u3059\u3002\n\u3000RC\u4fe1\u53f7\u306e\u7acb\u3061\u4e0a\u304c\u308a\u3067\u52d5\u4f5c\u3059\u308b\u305f\u3081\u3001\u30d1\u30eb\u30b9\u9593\u9694\u304c\u6240\u5b9a\u306e\u9577\u3055\u3067\u3042\u308b\u5fc5\u8981\u304c\u7121\u3044\u305f\u3081\u3067\u3059\u3002\n\n\u6b21\u56de\u4e88\u544a\u3068\u96d1\u8a18\n\n\u6b21\u56de\u4e88\u544a\n\u6b21\u56de\u306f\u30c8\u30c3\u30d7\u30c7\u30b6\u30a4\u30f3\u306e\u8a18\u8ff0\u306b\u3064\u3044\u3066\u66f8\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\nVivado\u306eIP integrater\u3067\u51fa\u529b\u3057\u305f\u30e9\u30c3\u30d1\u30fc\u3068\u81ea\u524d\u306eVHDL\u3092\u30de\u30fc\u30b8\u3057\u305f\u90e8\u5206\u3092\u8d64\u88f8\u3005\u306b\u516c\u958b\u3057\u3088\u3046\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\uff08\u3059\u3067\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3042\u3052\u3066\u3044\u307e\u3059\u304c\uff09\n\n\u96d1\u8a18\nRC\u4fe1\u53f7\u3092\u5165\u51fa\u529b\u3059\u308b\u3063\u3066\u7d50\u69cb\u96e3\u3057\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u5165\u529b\u3060\u3051\uff0f\u51fa\u529b\u3060\u3051\u3068\u3044\u3046\u306e\u306f\u7c21\u5358\u3067\u3059\u304c\u3001\u5165\u51fa\u529b\u3092\u3044\u3063\u307a\u3093\u306b\u884c\u3046\u5834\u5408\u3001FPGA\u306e\u3088\u3046\u306a\u5404\u6a5f\u80fd\u3092\u72ec\u7acb\u3057\u3066\u52d5\u304b\u305b\u308b\u3088\u3046\u306a\u30c7\u30d0\u30a4\u30b9\u3067\u306a\u3044\u3068\u5927\u5909\u3067\u3059\u3002\nFPGA\u3084Zynq\u3067\u3042\u308c\u3070\u3001\u30de\u30a4\u30b3\u30f3\u3067\u8a00\u3048\u3070\u30bf\u30a4\u30de\u30fc\u3092\u4f7f\u3044\u307e\u304f\u308b\u30c7\u30b6\u30a4\u30f3\u306b\u3064\u3044\u3066\u306f\u3059\u3054\u304f\u3059\u3063\u304d\u308a\u3057\u307e\u3059\u3002\n\u3067\u306f\u6b21\u56de\u3002\n#RC\u53d7\u4fe1\u5668\u306e\u4fe1\u53f7\nRC\u53d7\u4fe1\u5668\u304b\u3089\u51fa\u529b\u3055\u308c\u308b\u4fe1\u53f7\u306f\u56f3\uff11\u306e\u3088\u3046\u306a\u6ce2\u5f62\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u308c\u3063\u3066\u6b63\u5f0f\u306a\u540d\u79f0\u3042\u308b\u3093\u3067\u3059\u304b\u306d\uff1f\u3000\u4fbf\u5b9c\u7684\u306bRC\u4fe1\u53f7\u3068\u547c\u3076\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n![rc.jpg](https://qiita-image-store.s3.amazonaws.com/0/142745/f01c4373-3738-1c65-b321-949dadc1dc7d.jpeg)\n\u56f3\uff11\u3000RC\u4fe1\u53f7\n\nhigh\u30ec\u30d9\u30eb\u306e\u30d1\u30eb\u30b9\u5e45\u30921.5ms\u3092\u4e2d\u5fc3\u306b-127\uff5e+127\u306e\u30d0\u30b9\u4fe1\u53f7\u306b\u5909\u63db\u3059\u308b\u306e\u304c\u4eca\u56de\u306e\u76ee\u7684\u3067\u3059\u3002\n\n\u3061\u306a\u307f\u306b\u3001RC\u53d7\u4fe1\u5668\u306b\u306f\u96fb\u6e90\u3068\u3057\u30665V\u3092\u5165\u308c\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u4f7f\u3063\u3066\u308bRC\u53d7\u4fe1\u5668\u3067\u306f\u51fa\u529b\u4fe1\u53f7\u306e\u30ec\u30d9\u30eb\u306f3.3V\u3067\u3057\u305f\u3002LDO\u7684\u306a\u96fb\u6e90\u30ec\u30ae\u30e5\u30ec\u30fc\u30bf\u304c\u5165\u3063\u3066\u308b\u3093\u3067\u3059\u304b\u306d\u3002\u4eca\u56de\u306eZynq\u306e\u3088\u3046\u306b3.3V\u3092\u4f7f\u3046\u3053\u3068\u304c\u591a\u3044\u306e\u3067\u3053\u308c\u307e\u305f\u90fd\u5408\u304c\u3088\u3044\u3067\u3059\u3002\n\n#\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306eURL\u306e\u3069\u3053\u304b\u306b\u3042\u308bTKRCV.vhd\u3067\u3059\u3002\u30c6\u30b9\u30c8\u30d9\u30f3\u30c1\u306fbench_TKRCV.vhd\u3067\u3059\u3002\nhttps://github.com/x7700jp/x7700jp_codes\n\n\u305f\u3044\u3057\u305f\u5206\u91cf\u3058\u3083\u306a\u3044\u306e\u3067\u5168\u6587\u5f15\u7528\u3057\u307e\u3059\u3002\n\n```vhdl:TKRCV.vhd\n\nlibrary IEEE;\nuse IEEE.STD_LOGIC_1164.ALL;\nuse IEEE.STD_LOGIC_ARITH.ALL;\nuse IEEE.STD_LOGIC_UNSIGNED.ALL;\n\nentity TKRCV is\ngeneric (\n\tCW     : integer := 7   ; -- PERI_GEN cnt Width\n\tCNT    : integer := 110   -- 1.4ms/256/clk_peri\n);\nport (\n\tiCLK  : in    std_logic;\n\tiRST  : in    std_logic;\n\tiRCV  : in    std_logic;\n\toRCV  : out   std_logic_vector(7 downto 0)\n);\nend TKRCV;\n\narchitecture RTL of TKRCV is\n\n\ttype tSM is (IDLE,CNT_A);\n\tsignal rSM   : tSM                             := IDLE;\n\tsignal rCNT  : std_logic_vector(CW-1 downto 0) := (others => '0');\n\tsignal rCNT2 : std_logic_vector(   8 downto 0) := (others => '0');\n\tsignal rRCV  : std_logic_vector(   7 downto 0) := (others => '0');\n\tsignal gRCV  : std_logic_vector(   8 downto 0) ;\n\tsignal rIN   : std_logic                       := '0';\n\n\tconstant cRCV_ZERO : std_logic_vector(11 downto 0) := conv_std_logic_vector(273,9); -- 1500 us\n\tconstant cRCV_LOW  : std_logic_vector(11 downto 0) := conv_std_logic_vector(146,9); --  800 us\n\tconstant cRCV_HIGH : std_logic_vector(11 downto 0) := conv_std_logic_vector(400,9); -- 2200 us\nbegin\n\t\n\t--\n\tP_FF : process(iCLK) begin\n\t\tif (iCLK'event and iCLK = '1') then\n\t\t\tif (iRST = '1') then\n\t\t\t\trIN <= '0';\n\t\t\telse\n\t\t\t\trIN <= iRCV;\n\t\t\tend if;\n\t\tend if;\n\tend process;\n\n\tP_CNT : process(iCLK) begin\n\t\tif (iCLK'event and iCLK = '1') then\n\t\t\tif (iRST = '1') then\n\t\t\t\trSM   <= IDLE;\n\t\t\t\trCNT  <= (others => '0');\n\t\t\t\trCNT2 <= (others => '0');\n\t\t\t\trRCV  <= (others => '0');\n\t\t\telse\n\t\t\t\tcase rSM is\n\t\t\t\twhen IDLE =>\n\t\t\t\t\tif (iRCV = '1' and rIN = '0') then -- iRCV rising edge det\n\t\t\t\t\t\trSM   <= CNT_A;\n\t\t\t\t\t\trCNT  <= (rCNT'high  downto 1 => '0') & '1';\n\t\t\t\t\t\trCNT2 <= (rCNT2'high downto 1 => '0') & '1';\n\t\t\t\t\telse\n\t\t\t\t\t\trCNT  <= (others => '0');\n\t\t\t\t\t\trCNT2 <= (others => '0');\n\t\t\t\t\tend if;\n\t\t\t\twhen CNT_A =>\n\t\t\t\t\tif (iRCV = '0' or cRCV_HIGH < rCNT ) then\n\t\t\t\t\t\trSM  <= IDLE;\n\t\t\t\t\t\trRCV <= gRCV(7 downto 0);\n\t\t\t\t\telse\n\t\t\t\t\t\tif (rCNT = conv_std_logic_vector(CNT,CW)) then\n\t\t\t\t\t\t\trCNT  <= (others => '0');\n\t\t\t\t\t\t\trCNT2 <= rCNT2 + '1';\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\trCNT <= rCNT + '1';\n\t\t\t\t\t\tend if;\n\t\t\t\t\tend if;\n\t\t\t\tend case;\n\t\t\tend if;\n\t\tend if;\n\tend process;\n\n\t-- gate\n\tgRCV <= \"111111110\"       when(rCNT2     < cRCV_LOW ) else\n\t\t\t\"001111111\"       when(cRCV_HIGH < rCNT2    ) else\n\t\t\trCNT2 - cRCV_ZERO ;\n\t\t\t\n\n\t-- output\n\toRCV <= rRCV;\n\nend RTL;\n\n```\n\n####\u25a0generic\u5024\u306b\u3064\u3044\u3066\nCNT\uff1aCNT=1.4ms/256/clk_peri\u3068\u8a2d\u5b9a\u3057\u307e\u3059\u3002\uff08clk_peri\u306f\u30af\u30ed\u30c3\u30af\u306e\u5468\u671f\uff09\nCW\uff1aCNT\u5024\u3092\u8868\u73fe\u3067\u304d\u308b\u30d3\u30c3\u30c8\u6570\n\n####\u25a0\u30dd\u30fc\u30c8\u306b\u3064\u3044\u3066\niCLK  : \u5165\u529b\u30af\u30ed\u30c3\u30af\niRST  : \u30ea\u30bb\u30c3\u30c8\u4fe1\u53f7\uff08\uff11\u3067\u30ea\u30bb\u30c3\u30c8\uff09\niRCV  : RC\u4fe1\u53f7\noRCV  : RC\u4fe1\u53f7\u306ehigh\u30ec\u30d9\u30eb\u5e45\u3092-127\uff5e+127\u306b\u5909\u63db\u3057\u305f\u5024\n\n####\u25a0\u52d5\u4f5c\u306b\u3064\u3044\u3066\n#####\uff11\uff0e\u7acb\u3061\u4e0a\u304c\u308a\u691c\u51fa\nif (iRCV = '1' and rIN = '0') then -- iRCV rising edge det\u3000\u3067RC\u4fe1\u53f7\u306e\u7acb\u3061\u4e0a\u304c\u308a\u691c\u51fa\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\u7acb\u3061\u4e0a\u304c\u308a\u691c\u51fa\u306f\u5bfe\u8c61\u3092\uff11\u30af\u30ed\u30c3\u30af\u9045\u3089\u305b\u305f\u4fe1\u53f7\u3068\u6bd4\u8f03\u3059\u308b\u3053\u3068\u3067\u3067\u304d\u307e\u3059\u3002\nRC\u4fe1\u53f7\u306e\u7acb\u3061\u4e0a\u304c\u308a\u3092\u691c\u51fa\u3057\u305f\u3089\u30b9\u30c6\u30fc\u30c8\uff08rSM \u3092IDLE\u304b\u3089CNT_A\uff09\u3092\u63a8\u79fb\u3055\u305b\u307e\u3059\u3002\nrCNT  <= (rCNT'high  downto 1 => '0') & '1';\u306e\u8a18\u8ff0\u306f\u6700\u4e0b\u4f4d\u4ee5\u5916\u3092\uff10\u3001\u6700\u4e0b\u4f4d\u3092\uff11\u3068\u3059\u308b\u8a18\u8ff0\u3067\u3059\u3002\n\n#####\uff12\uff0e\u30ab\u30a6\u30f3\u30c8\u52d5\u4f5c\n\u30b9\u30c6\u30fc\u30c8\u304cCNT_A\u306e\u3068\u304d\u306f\u30ab\u30a6\u30f3\u30c8\u52d5\u4f5c\u3067\u3059\u3002\nif (iRCV = '0' or cRCV_HIGH < rCNT ) then\u306fRC\u4fe1\u53f7\u304c0\u306b\u306a\u308b\u304b\u3001\u30bf\u30a4\u30e0\u30aa\u30fc\u30d0\u30fc\u3092\u898b\u3066\u307e\u3059\u3002\nRC\u4fe1\u53f7\u304c0\u306b\u306a\u3063\u305f\u969b\u306b\u3001\u8a08\u6570\u3057\u3066\u3044\u308b\u5024\u3092\u30e9\u30c3\u30c1\u3057\u3066\u51fa\u529b\u3068\u306a\u308a\u307e\u3059\u3002\n\u30bf\u30a4\u30e0\u30aa\u30fc\u30d0\u30fc\u306f\u306a\u3093\u3089\u304b\u306e\u4e0d\u5177\u5408\u3067RC\u4fe1\u53f7\u304c\u60f3\u5b9a\u3088\u308ahigh\u6642\u9593\u304c\u9577\u3044\u5834\u5408\u3001\u30bf\u30a4\u30e0\u30aa\u30fc\u30d0\u30fc\u3068\u3057\u307e\u3059\u3002RC\u4fe1\u53f7\u306e\u6b21\u306e\u7acb\u3061\u4e0a\u304c\u308a\u307e\u3067\u306f\u30b9\u30c6\u30fc\u30c8\u306fIDLE\u306b\u306a\u308a\u307e\u3059\u3002\nif (rCNT = conv_std_logic_vector(CNT,CW)) then\u3067\u306fgeneric\u5024\u306eCNT\u3067\u8a2d\u5b9a\u3057\u305f\u9593\u9694\u3067rCNT2\u3092\u52a0\u7b97\u3057\u3066\u3044\u307e\u3059\u3002\n\n#####\uff13\uff0e\u30b2\u30fc\u30c8\u51e6\u7406\ngRCV <= \"111111110\"       when(rCNT2     < cRCV_LOW ) else\u3067rCNT2\u3092\u6b63\u898f\u5316\u3057\u3001-127\uff5e+127\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\n\n#####\uff14\uff0e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u7d50\u679c\n![rc_robot_sim_rcrcv.jpg](https://qiita-image-store.s3.amazonaws.com/0/142745/f6c05e3c-0196-c322-6834-d38d12e7eef0.jpeg)\n\u56f3\uff12\u3000\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u7d50\u679c\n\n\u203b\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306f\u30d1\u30eb\u30b9\u9593\u9694\u3092\u3064\u3081\u3066\u307e\u3059\u3002\n\u3000RC\u4fe1\u53f7\u306e\u7acb\u3061\u4e0a\u304c\u308a\u3067\u52d5\u4f5c\u3059\u308b\u305f\u3081\u3001\u30d1\u30eb\u30b9\u9593\u9694\u304c\u6240\u5b9a\u306e\u9577\u3055\u3067\u3042\u308b\u5fc5\u8981\u304c\u7121\u3044\u305f\u3081\u3067\u3059\u3002\n\n#\u6b21\u56de\u4e88\u544a\u3068\u96d1\u8a18\n###\u6b21\u56de\u4e88\u544a\n\u6b21\u56de\u306f\u30c8\u30c3\u30d7\u30c7\u30b6\u30a4\u30f3\u306e\u8a18\u8ff0\u306b\u3064\u3044\u3066\u66f8\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\nVivado\u306eIP integrater\u3067\u51fa\u529b\u3057\u305f\u30e9\u30c3\u30d1\u30fc\u3068\u81ea\u524d\u306eVHDL\u3092\u30de\u30fc\u30b8\u3057\u305f\u90e8\u5206\u3092\u8d64\u88f8\u3005\u306b\u516c\u958b\u3057\u3088\u3046\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\uff08\u3059\u3067\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3042\u3052\u3066\u3044\u307e\u3059\u304c\uff09\n\n###\u96d1\u8a18\nRC\u4fe1\u53f7\u3092\u5165\u51fa\u529b\u3059\u308b\u3063\u3066\u7d50\u69cb\u96e3\u3057\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u5165\u529b\u3060\u3051\uff0f\u51fa\u529b\u3060\u3051\u3068\u3044\u3046\u306e\u306f\u7c21\u5358\u3067\u3059\u304c\u3001\u5165\u51fa\u529b\u3092\u3044\u3063\u307a\u3093\u306b\u884c\u3046\u5834\u5408\u3001FPGA\u306e\u3088\u3046\u306a\u5404\u6a5f\u80fd\u3092\u72ec\u7acb\u3057\u3066\u52d5\u304b\u305b\u308b\u3088\u3046\u306a\u30c7\u30d0\u30a4\u30b9\u3067\u306a\u3044\u3068\u5927\u5909\u3067\u3059\u3002\nFPGA\u3084Zynq\u3067\u3042\u308c\u3070\u3001\u30de\u30a4\u30b3\u30f3\u3067\u8a00\u3048\u3070\u30bf\u30a4\u30de\u30fc\u3092\u4f7f\u3044\u307e\u304f\u308b\u30c7\u30b6\u30a4\u30f3\u306b\u3064\u3044\u3066\u306f\u3059\u3054\u304f\u3059\u3063\u304d\u308a\u3057\u307e\u3059\u3002\n\n\u3067\u306f\u6b21\u56de\u3002\n", "tags": ["FPGA", "zynq", "VHDL"]}