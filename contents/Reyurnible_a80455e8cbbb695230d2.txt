{"context": "RxKotlin\u3068\u306f\u3001RxJava\u3092\u3082\u3063\u3068Kotlin\u3089\u3057\u304f\u4f7f\u3046\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u306e\u3053\u3068\u3067\u3059\u3002\n\u69cb\u6210\u3068\u3057\u3066\u306f\u3001\u57fa\u672c\u7684\u306bRxJava\u306e\u62e1\u5f35\u95a2\u6570\u304c\u8a70\u307e\u3063\u305f\u3082\u306e\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u5c0e\u5165\n\u307e\u305a\u306f\u3001RxKotlin\u3092\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u5165\u308c\u307e\u3059\u3002\n\u6700\u65b0\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u30010.30.1\u3067\u3059\u3002\n\nbuild.gradle\ndependencies {\n    compile 'io.reactivex:rxkotlin:0.30.1'\n}\n\n\n\n\u3067\u304d\u308b\u3053\u3068\n\n\u65b0\u3057\u3044Observable\u4f5c\u6210\u3059\u308b\u969b\u306b\u4fbf\u5229\u306a\u95a2\u6570\n\n\u7a7a\u306eObservable\u306e\u4f5c\u6210\n\nobservables.kt\npublic fun <T> emptyObservable() : Observable<T> = Observable.empty()\n\n\n\n\u65b0\u3057\u3044Observable\u306e\u4f5c\u6210\n\nobservables.kt\npublic fun <T> observable(body : (s : Subscriber<in T>) -> Unit) : Observable<T> = Observable.create(body)\n\n\n\n\u30ea\u30b9\u30c8\u304b\u3089\u306eObservable\u306e\u4f5c\u6210\n\u62e1\u5f35\u95a2\u6570\u306b\u3088\u3063\u3066\u3001toObservable\u304c\u8ffd\u52a0\u3055\u308c\u3066\u304a\u308a\u3001\u914d\u5217\u306a\u3069\u7c21\u5358\u306bObservable\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nobservables.kt\npublic fun BooleanArray.toObservable() : Observable<Boolean> = this.toList().toObservable()\npublic fun ByteArray.toObservable() : Observable<Byte> = this.toList().toObservable()\npublic fun ShortArray.toObservable() : Observable<Short> = this.toList().toObservable()\npublic fun IntArray.toObservable() : Observable<Int> = this.toList().toObservable()\npublic fun LongArray.toObservable() : Observable<Long> = this.toList().toObservable()\npublic fun FloatArray.toObservable() : Observable<Float> = this.toList().toObservable()\npublic fun DoubleArray.toObservable() : Observable<Double> = this.toList().toObservable()\npublic fun <T> Array<out T>.toObservable() : Observable<T> = Observable.from(this)\n\n\n\nIterator\u304b\u3089\u306eObservable\u306e\u4f5c\u6210\n\nobservables.kt\npublic fun <T> Iterator<T>.toObservable() : Observable<T> = toIterable().toObservable()\npublic fun <T> Iterable<T>.toObservable() : Observable<T> = Observable.from(this)\npublic fun <T> Sequence<T>.toObservable() : Observable<T> = Observable.from(object : Iterable<T> {\n    override fun iterator(): Iterator<T> = this@toObservable.iterator()\n})\n\n\n\n\u5358\u767a\u306eObservable\u306e\u4f5c\u6210\n\nobservables.kt\npublic fun <T> T.toSingletonObservable() : Observable<T> = Observable.just(this)\npublic fun <T> Throwable.toObservable() : Observable<T> = Observable.error(this)\n\n\n\n\n\u65e2\u5b58\u306e\u51e6\u7406\u3092\u30b7\u30f3\u30d7\u30eb\u306b\u66f8\u304f\u305f\u3081\u306e\u95a2\u6570\n\nlift\n\nobservables.kt\npublic fun <T, R> Observable<T>.lift(operator : (Subscriber<in R>) -> Subscriber<T>) : Observable<R> = lift(object : Observable.Operator<R, T> {\n    override fun call(t1: Subscriber<in R>?): Subscriber<in T> = operator(t1!!)\n})\n\n\n\ncombineLatest\n\nobservables.kt\nfun <T, R> List<Observable<T>>.combineLatest(combineFunction: (args: List<T>) -> R): Observable<R> =\n        Observable.combineLatest(this, { combineFunction(it.asList() as List<T>) })\n\n\n\nswitchOnNext\n\nobservables.kt\npublic fun <T> Observable<Observable<T>>.switchOnNext(): Observable<T> = Observable.switchOnNext(this)\n\n\n\nzip\n\nobservables.kt\nfun <T, R> List<Observable<T>>.zip(zipFunction: (args: List<T>) -> R): Observable<R> =\n        Observable.zip(this, { zipFunction(it.asList() as List<T>) })\n\n\n\n\n\u65b0\u3057\u304f\u5b9a\u7fa9\u3055\u308c\u305f\u4fbf\u5229\u306a\u95a2\u6570\n\nNull\u306a\u5024\u3092\u8fd4\u3055\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u304f\u308c\u308bfilterNotNull\u95a2\u6570\n\nobservables.kt\npublic fun <T : Any> Observable<T?>.filterNotNull() : Observable<T> = lift { s ->\n    subscriber<T?>().\n            onCompleted { s.onCompleted() }.\n            onError { t -> s.onError(t) }.\n            onNext { v -> if (v != null) s.onNext(v) }\n}\n\n\n\nNull\u306a\u5024\u304c\u6765\u305f\u6642\u306b\u30a8\u30e9\u30fc\u3092\u51fa\u3057\u305f\u3044\u5834\u5408\u306frequireNoNulls\u95a2\u6570\n\nobservables.kt\npublic fun <T : Any> Observable<T?>.requireNoNulls() : Observable<T> = lift { s ->\n    subscriber<T?>().\n            onCompleted { s.onCompleted() }.\n            onError { t -> s.onError(t) }.\n            onNext { v -> if (v == null) throw NullPointerException(\"null element found in rx observable\") else s.onNext(v) }\n}\n\n\n\n\u5024\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5024\u3068\u5171\u306b\u53d7\u3051\u53d6\u308b\u306b\u306fwithIndex\u95a2\u6570\n\nobservables.kt\npublic fun <T> Observable<T>.withIndex() : Observable<IndexedValue<T>> = lift { s ->\n    var index = 0\n\n    subscriber<T>().\n            onNext { v -> s.onNext(IndexedValue(index++, v)) }.\n            onCompleted { s.onCompleted() }.\n            onError { t -> s.onError(t) }\n}\n\n\n\n\u304a\u308f\u308a\u306b\n\u4eca\u56de\u306f\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3067observables\u30af\u30e9\u30b9\u4ee5\u5916\u306f\u3001\u307e\u3060\u767a\u5c55\u9014\u4e2d\u306a\u611f\u304c\u5f37\u304b\u3063\u305f\u3067observables.kt\u306b\u3064\u3044\u3066\u3060\u3051\u89e6\u308c\u307e\u3057\u305f\uff01\n\u307e\u3060\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u306f0.30.1\u3067\u3059\u304c\u3001RxJava\u306e\u62e1\u5f35\u95a2\u6570\u306e\u96c6\u307e\u308a\u306a\u306e\u3067\u7a4d\u6975\u7684\u306b\u4f7f\u3063\u3066\u3044\u3063\u3066\u554f\u984c\u306a\u3044\u4ee3\u7269\u3067\u3059\u306e\u3067\u3001\u305c\u3072\u307f\u306a\u3055\u3093\u3082\u6d3b\u7528\u3057\u3066\u307f\u3063\u3066\u306f\u3044\u304b\u304c\u3067\u3057\u3087\u3046\u304b\u3002\nRxKotlin\u306e\u30b5\u30f3\u30d7\u30eb\u306f\u307e\u305f\u5f8c\u65e5\u66f8\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\nRxKotlin\u3068\u306f\u3001RxJava\u3092\u3082\u3063\u3068Kotlin\u3089\u3057\u304f\u4f7f\u3046\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u306e\u3053\u3068\u3067\u3059\u3002\n\u69cb\u6210\u3068\u3057\u3066\u306f\u3001\u57fa\u672c\u7684\u306bRxJava\u306e\u62e1\u5f35\u95a2\u6570\u304c\u8a70\u307e\u3063\u305f\u3082\u306e\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n##\u5c0e\u5165\n\u307e\u305a\u306f\u3001RxKotlin\u3092\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u5165\u308c\u307e\u3059\u3002\n\u6700\u65b0\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u3001[0.30.1](http://mvnrepository.com/artifact/io.reactivex/rxkotlin/0.30.1)\u3067\u3059\u3002\n\n\n```build.gradle\ndependencies {\n\tcompile 'io.reactivex:rxkotlin:0.30.1'\n}\n```\n\n##\u3067\u304d\u308b\u3053\u3068\n\n###\u65b0\u3057\u3044Observable\u4f5c\u6210\u3059\u308b\u969b\u306b\u4fbf\u5229\u306a\u95a2\u6570\n\n####\u7a7a\u306eObservable\u306e\u4f5c\u6210\n\n```observables.kt\npublic fun <T> emptyObservable() : Observable<T> = Observable.empty()\n```\n\n####\u65b0\u3057\u3044Observable\u306e\u4f5c\u6210\n\n```observables.kt\npublic fun <T> observable(body : (s : Subscriber<in T>) -> Unit) : Observable<T> = Observable.create(body)\n```\n\n####\u30ea\u30b9\u30c8\u304b\u3089\u306eObservable\u306e\u4f5c\u6210\n\n\u62e1\u5f35\u95a2\u6570\u306b\u3088\u3063\u3066\u3001toObservable\u304c\u8ffd\u52a0\u3055\u308c\u3066\u304a\u308a\u3001\u914d\u5217\u306a\u3069\u7c21\u5358\u306bObservable\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```observables.kt\npublic fun BooleanArray.toObservable() : Observable<Boolean> = this.toList().toObservable()\npublic fun ByteArray.toObservable() : Observable<Byte> = this.toList().toObservable()\npublic fun ShortArray.toObservable() : Observable<Short> = this.toList().toObservable()\npublic fun IntArray.toObservable() : Observable<Int> = this.toList().toObservable()\npublic fun LongArray.toObservable() : Observable<Long> = this.toList().toObservable()\npublic fun FloatArray.toObservable() : Observable<Float> = this.toList().toObservable()\npublic fun DoubleArray.toObservable() : Observable<Double> = this.toList().toObservable()\npublic fun <T> Array<out T>.toObservable() : Observable<T> = Observable.from(this)\n```\n\n####Iterator\u304b\u3089\u306eObservable\u306e\u4f5c\u6210\n\n```observables.kt\npublic fun <T> Iterator<T>.toObservable() : Observable<T> = toIterable().toObservable()\npublic fun <T> Iterable<T>.toObservable() : Observable<T> = Observable.from(this)\npublic fun <T> Sequence<T>.toObservable() : Observable<T> = Observable.from(object : Iterable<T> {\n    override fun iterator(): Iterator<T> = this@toObservable.iterator()\n})\n```\n\n####\u5358\u767a\u306eObservable\u306e\u4f5c\u6210\n\n```observables.kt\npublic fun <T> T.toSingletonObservable() : Observable<T> = Observable.just(this)\npublic fun <T> Throwable.toObservable() : Observable<T> = Observable.error(this)\n```\n\n---\n\n###\u65e2\u5b58\u306e\u51e6\u7406\u3092\u30b7\u30f3\u30d7\u30eb\u306b\u66f8\u304f\u305f\u3081\u306e\u95a2\u6570\n\n####lift\n\n```observables.kt\npublic fun <T, R> Observable<T>.lift(operator : (Subscriber<in R>) -> Subscriber<T>) : Observable<R> = lift(object : Observable.Operator<R, T> {\n    override fun call(t1: Subscriber<in R>?): Subscriber<in T> = operator(t1!!)\n})\n```\n\n####combineLatest\n\n```observables.kt\nfun <T, R> List<Observable<T>>.combineLatest(combineFunction: (args: List<T>) -> R): Observable<R> =\n        Observable.combineLatest(this, { combineFunction(it.asList() as List<T>) })\n```\n\n####switchOnNext\n\n```observables.kt\npublic fun <T> Observable<Observable<T>>.switchOnNext(): Observable<T> = Observable.switchOnNext(this)\n```\n\n####zip\n\n```observables.kt\nfun <T, R> List<Observable<T>>.zip(zipFunction: (args: List<T>) -> R): Observable<R> =\n        Observable.zip(this, { zipFunction(it.asList() as List<T>) })\n```\n\n---\n\n###\u65b0\u3057\u304f\u5b9a\u7fa9\u3055\u308c\u305f\u4fbf\u5229\u306a\u95a2\u6570\n\n####Null\u306a\u5024\u3092\u8fd4\u3055\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u304f\u308c\u308bfilterNotNull\u95a2\u6570\n\n```observables.kt\npublic fun <T : Any> Observable<T?>.filterNotNull() : Observable<T> = lift { s ->\n    subscriber<T?>().\n            onCompleted { s.onCompleted() }.\n            onError { t -> s.onError(t) }.\n            onNext { v -> if (v != null) s.onNext(v) }\n}\n```\n\n####Null\u306a\u5024\u304c\u6765\u305f\u6642\u306b\u30a8\u30e9\u30fc\u3092\u51fa\u3057\u305f\u3044\u5834\u5408\u306frequireNoNulls\u95a2\u6570\n\n```observables.kt\npublic fun <T : Any> Observable<T?>.requireNoNulls() : Observable<T> = lift { s ->\n    subscriber<T?>().\n            onCompleted { s.onCompleted() }.\n            onError { t -> s.onError(t) }.\n            onNext { v -> if (v == null) throw NullPointerException(\"null element found in rx observable\") else s.onNext(v) }\n}\n```\n\n####\u5024\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5024\u3068\u5171\u306b\u53d7\u3051\u53d6\u308b\u306b\u306fwithIndex\u95a2\u6570\n\n```observables.kt\npublic fun <T> Observable<T>.withIndex() : Observable<IndexedValue<T>> = lift { s ->\n    var index = 0\n\n    subscriber<T>().\n            onNext { v -> s.onNext(IndexedValue(index++, v)) }.\n            onCompleted { s.onCompleted() }.\n            onError { t -> s.onError(t) }\n}\n```\n\n##\u304a\u308f\u308a\u306b\n\u4eca\u56de\u306f\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3067observables\u30af\u30e9\u30b9\u4ee5\u5916\u306f\u3001\u307e\u3060\u767a\u5c55\u9014\u4e2d\u306a\u611f\u304c\u5f37\u304b\u3063\u305f\u3067observables.kt\u306b\u3064\u3044\u3066\u3060\u3051\u89e6\u308c\u307e\u3057\u305f\uff01\n\u307e\u3060\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u306f0.30.1\u3067\u3059\u304c\u3001RxJava\u306e\u62e1\u5f35\u95a2\u6570\u306e\u96c6\u307e\u308a\u306a\u306e\u3067\u7a4d\u6975\u7684\u306b\u4f7f\u3063\u3066\u3044\u3063\u3066\u554f\u984c\u306a\u3044\u4ee3\u7269\u3067\u3059\u306e\u3067\u3001\u305c\u3072\u307f\u306a\u3055\u3093\u3082\u6d3b\u7528\u3057\u3066\u307f\u3063\u3066\u306f\u3044\u304b\u304c\u3067\u3057\u3087\u3046\u304b\u3002\n\n**RxKotlin\u306e\u30b5\u30f3\u30d7\u30eb\u306f\u307e\u305f\u5f8c\u65e5\u66f8\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059**\n", "tags": ["Kotlin", "Android", "RxJava"]}