{"context": " More than 1 year has passed since last update.unittest\u306e\u4f7f\u3044\u65b9\u3092JUnit\u3068\u6bd4\u8f03\u3057\u306a\u304c\u3089\u6574\u7406\u3057\u3066\u307f\u307e\u3057\u305f\n\n\u5b9f\u884c\u74b0\u5883\n\nDart 1.1.1\nunittest 0.10.0\nJava 1.7.0\nJUnit 4.11.0\n\n\n\u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30af\u30e9\u30b9\nDart\n\ncalc.dart\nlibrary clac;\n\nclass Calc {\n  int add(int x, int y) {\n    return x + y;\n  }\n  int sub(int x, int y) {\n    return x - y;\n  }\n}\n\n\nJava\n\nCalc.java\npackage main.unittest;\n\npublic class Calc {\n    public int add(int x, int y) {\n        return x + y;\n    }\n    public int sub(int x, int y) {\n        return x - y;\n    }\n}\n\n\n\n\u57fa\u672c\u5f62\nexample02_test.dart \u306e\u3088\u3046\u306b\u3082\u66f8\u3051\u308b\nDart\n\nexample01_test.dart\nlibrary example01;\n\nimport 'calc.dart';\nimport 'package:unittest/unittest.dart';\n\nvoid main() {\n  test(\"add test\", () {\n    Calc calc = new Calc();\n    int expected = 5;\n    int actual = calc.add(3, 2);\n    expect(actual, equals(expected));\n  });\n\n  test(\"sub test\", () {\n    Calc calc = new Calc();\n    int expected = 1;\n    int actual = calc.sub(3, 2);\n    expect(actual, equals(expected));\n  });\n}\n\n\n\nexample02_test.dart\nlibrary example02;\n\nimport 'calc.dart';\nimport 'package:unittest/unittest.dart';\n\nvoid main() {\n  TestFunction testAdd = () {\n    Calc calc = new Calc();\n    int expected = 5;\n    int actual = calc.add(3, 2);\n    expect(actual, equals(expected));\n  };\n\n  TestFunction testSub = () {\n    Calc calc = new Calc();\n    int expected = 1;\n    int actual = calc.sub(3, 2);\n    expect(actual, equals(expected));\n  };\n\n  test(\"add test\", testAdd);\n  test(\"sub test\", testSub);\n}\n\n\nJava\n\nExample01.java\npackage test.unittest;\n\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.junit.Assert.assertThat;\nimport main.unittest.Calc;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.JUnit4;\n\n@RunWith(JUnit4.class)\npublic class Example01 {\n    @Test\n    public void addTest() {\n        Calc calc = new Calc();\n        int expected = 5;\n        int actual = calc.add(3, 2);\n        assertThat(actual, is(expected));\n    }\n\n    @Test\n    public void subTest() {\n        Calc calc = new Calc();\n        int expected = 1;\n        int actual = calc.sub(3, 2);\n        assertThat(actual, is(expected));\n    }\n}\n\n\n\n\u30b0\u30eb\u30fc\u30d7\u5316\nDart\u3067\u306f group \u30e1\u30bd\u30c3\u30c9\u3092\u7528\u3044\u308b\nDart\n\nexample03_test.dart\nlibrary example03;\n\nimport 'calc.dart';\nimport 'package:unittest/unittest.dart';\n\nvoid main() {  \n  group(\"Group Add\", () {\n    test(\"add test1\", () {\n      Calc calc = new Calc();\n      int expected = 5;\n      int actual = calc.add(3, 2);\n      expect(actual, equals(expected));\n    });\n\n    test(\"add test2\", () {\n      Calc calc = new Calc();\n      int expected = 1;\n      int actual = calc.add(3, -2);\n      expect(actual, equals(expected));\n    });\n  });\n\n  group(\"Group Sub\", () {\n    test(\"sub test1\", () {\n      Calc calc = new Calc();\n      int expected = 1;\n      int actual = calc.sub(3, 2);\n      expect(actual, equals(expected));\n    });\n  });\n}\n\n\nJava\n\nExample03.java\npackage test.unittest;\n\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.junit.Assert.assertThat;\nimport main.unittest.Calc;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.experimental.runners.Enclosed;\n\n@RunWith(Enclosed.class)\npublic class Example03 {\n    public static class GroupAdd {\n        @Test\n        public void addTest1() {\n            Calc calc = new Calc();\n            int expected = 5;\n            int actual = calc.add(3, 2);\n            assertThat(actual, is(expected));\n        }\n\n        @Test\n        public void addTest2() {\n            Calc calc = new Calc();\n            int expected = 1;\n            int actual = calc.add(3, -2);\n            assertThat(actual, is(expected));\n        }\n    }\n\n    public static class GroupSub {\n        @Test\n        public void subTest() {\n            Calc calc = new Calc();\n            int expected = 1;\n            int actual = calc.sub(3, 2);\n            assertThat(actual, is(expected));\n        }\n    }\n}\n\n\n\n\u30d5\u30a7\u30fc\u30ba\n\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001Dart\u3067\u306f setUp \u3084 tearDown \u30e1\u30bd\u30c3\u30c9\u3092\u7528\u3044\u308b\n\u30c6\u30b9\u30c8\u3092\u30b9\u30ad\u30c3\u30d7\u3057\u305f\u3044\u5834\u5408\u306f skip_test \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\nDart\n\nexample04_test.dart\nlibrary example04;\n\nimport 'calc.dart';\nimport 'package:unittest/unittest.dart';\n\nvoid main() {\n  Calc calc;\n\n  setUp(() {\n    print(\"set up\");\n    calc = new Calc();\n  });\n\n  tearDown(() {\n    print(\"tear down\");\n  });\n\n  test(\"add test1\", () {\n    int expected = 5;\n    int actual = calc.add(3, 2);\n    expect(actual, equals(expected));\n  });\n\n  skip_test(\"add test2\", () {\n    int expected = 1;\n    int actual = calc.add(3, -2);\n    expect(actual, equals(expected));\n  });\n\n  test(\"sub test1\", () {\n    int expected = 1;\n    int actual = calc.sub(3, 2);\n    expect(actual, equals(expected));\n  });\n}\n\n\nJava\n\nExample04.java\npackage test.unittest;\n\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.junit.Assert.assertThat;\nimport main.unittest.Calc;\n\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Ignore;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.JUnit4;\n\n@RunWith(JUnit4.class)\npublic class Example04 {\n    Calc calc;\n\n    @Before\n    public void setUp() {\n        System.out.println(\"set up\");\n        calc = new Calc();\n    }\n\n    @After\n    public void tearDown() {\n        System.out.println(\"tear down\");\n    }\n\n    @Test\n    public void addTest1() {\n        System.out.println(\"add test1\");\n        int expected = 5;\n        int actual = calc.add(3, 2);\n        assertThat(actual, is(expected));\n    }\n\n    @Ignore\n    public void addTest2() {\n        System.out.println(\"add test2\");\n        int expected = 1;\n        int actual = calc.add(3, -2);\n        assertThat(actual, is(expected));\n    }\n\n    @Test\n    public void subTest() {\n        System.out.println(\"sub test\");\n        int expected = 1;\n        int actual = calc.sub(3, 2);\n        assertThat(actual, is(expected));\n    }\n\n}\n\n\n\nMatcher\nJUnit\u3068\u4f3c\u305f\u3088\u3046\u306aMatcher\u304cDart\u306b\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u308b\nDart\n\nexample05_test.dart\nlibrary example05;\n\nimport 'calc.dart';\nimport 'package:unittest/unittest.dart';\n\nvoid main() {\n  test(\"fail\", () {\n    Calc calc = new Calc();\n    int expected = 5;\n    int actual = calc.add(3, 2);\n    fail(\"fail\");\n    expect(actual, equals(expected));\n  });\n\n  test(\"matchers\", () {\n    int actual = 1;\n    expect(actual, equals(1));\n    expect(actual, isNot(0));\n    expect(actual, same(1));\n    expect(actual, new isInstanceOf<int>());\n\n    expect(actual, isNull);\n    expect(actual, isNotNull);\n  });\n}\n\n\nJava\n\nExample05.java\npackage test.unittest;\n\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.CoreMatchers.instanceOf;\nimport static org.hamcrest.CoreMatchers.not;\nimport static org.hamcrest.CoreMatchers.nullValue;\nimport static org.hamcrest.CoreMatchers.notNullValue;\nimport static org.hamcrest.CoreMatchers.sameInstance;\nimport static org.junit.Assert.assertThat;\nimport static org.junit.Assert.fail;\nimport main.unittest.Calc;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.JUnit4;\n\n@RunWith(JUnit4.class)\npublic class Example05 {\n    @Test\n    public void failTest() {\n        Calc calc = new Calc();\n        int expected = 5;\n        int actual = calc.add(3, 2);\n        fail(\"fail\");\n        assertThat(actual, is(expected));\n    }\n\n    @Test\n    public void matchersTest() {\n        int actual = 1;\n        assertThat(actual, is(1));\n        assertThat(actual, is(not(0)));\n        assertThat(actual, is(sameInstance(1)));\n        assertThat(actual, is(instanceOf(Integer.class)));\n\n        assertThat(actual, is(nullValue()));\n        assertThat(actual, is(notNullValue()));\n    }\n}\n\n\n\n\u4f8b\u5916\u9001\u51fa\nJUnit\u3067\u306fTest\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306b\u6307\u5b9a\u3059\u308b\u304c\u3001Dart\u3067\u306f expect \u30e1\u30bd\u30c3\u30c9\u3067\u691c\u8a3c\u3059\u308b\nDart\n\nexample06_test.dart\nlibrary example06;\n\nimport 'package:unittest/unittest.dart';\n\nvoid main() {\n  test(\"exception\", () {\n    expect(()=> throw new Exception(\"exception\"), throwsException);\n  });\n}\n\n\nJava\n\nExample06.java\npackage test.unittest;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.JUnit4;\n\n@RunWith(JUnit4.class)\npublic class Example06 {\n    @Test(expected = Exception.class)\n    public void exceptionTest() throws Exception {\n        throw new Exception();\n    }\n}\n\n\n\n\u30c6\u30b9\u30c8\u30e9\u30f3\u30ca\u30fc\n\u8907\u6570\u306e\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u3092\u307e\u3068\u3081\u3066\u5b9f\u884c\u3059\u308b\nDart\n\nexample07_test.dart\nlibrary example07;\n\nimport 'example01_test.dart' as example01;\nimport 'example03_test.dart' as example03;\nimport 'example04_test.dart' as example04;\n\nvoid main() {\n  example01.main();\n  example03.main();\n  example04.main();\n}\n\n\nJava\n\nExample07.java\npackage test.unittest;\n\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Suite;\n\n@RunWith(Suite.class)\n@Suite.SuiteClasses({\n    Example01.class,\n    Example03.class,\n    Example04.class,\n})\n\npublic class Example07 {}\n\n\n\n\u53c2\u8003\n\nUnit Testing with Dart\nunittest library\n\nunittest\u306e\u4f7f\u3044\u65b9\u3092JUnit\u3068\u6bd4\u8f03\u3057\u306a\u304c\u3089\u6574\u7406\u3057\u3066\u307f\u307e\u3057\u305f\n\n\n## \u5b9f\u884c\u74b0\u5883\n* Dart 1.1.1\n* unittest 0.10.0\n* Java 1.7.0\n* JUnit 4.11.0\n\n\n## \u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30af\u30e9\u30b9\n**Dart**\n\n```dart:calc.dart\nlibrary clac;\n\nclass Calc {\n  int add(int x, int y) {\n    return x + y;\n  }\n  int sub(int x, int y) {\n    return x - y;\n  }\n}\n```\n\n**Java**\n\n```java:Calc.java\npackage main.unittest;\n\npublic class Calc {\n\tpublic int add(int x, int y) {\n\t\treturn x + y;\n\t}\n\tpublic int sub(int x, int y) {\n\t\treturn x - y;\n\t}\n}\n```\n\n\n## \u57fa\u672c\u5f62\n*example02_test.dart* \u306e\u3088\u3046\u306b\u3082\u66f8\u3051\u308b\n\n**Dart**\n\n```dart:example01_test.dart\nlibrary example01;\n\nimport 'calc.dart';\nimport 'package:unittest/unittest.dart';\n\nvoid main() {\n  test(\"add test\", () {\n    Calc calc = new Calc();\n    int expected = 5;\n    int actual = calc.add(3, 2);\n    expect(actual, equals(expected));\n  });\n  \n  test(\"sub test\", () {\n    Calc calc = new Calc();\n    int expected = 1;\n    int actual = calc.sub(3, 2);\n    expect(actual, equals(expected));\n  });\n}\n```\n\n```dart:example02_test.dart\nlibrary example02;\n\nimport 'calc.dart';\nimport 'package:unittest/unittest.dart';\n\nvoid main() {\n  TestFunction testAdd = () {\n    Calc calc = new Calc();\n    int expected = 5;\n    int actual = calc.add(3, 2);\n    expect(actual, equals(expected));\n  };\n\n  TestFunction testSub = () {\n    Calc calc = new Calc();\n    int expected = 1;\n    int actual = calc.sub(3, 2);\n    expect(actual, equals(expected));\n  };\n  \n  test(\"add test\", testAdd);\n  test(\"sub test\", testSub);\n}\n```\n\n**Java**\n\n```java:Example01.java\npackage test.unittest;\n\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.junit.Assert.assertThat;\nimport main.unittest.Calc;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.JUnit4;\n\n@RunWith(JUnit4.class)\npublic class Example01 {\n\t@Test\n\tpublic void addTest() {\n\t\tCalc calc = new Calc();\n\t\tint expected = 5;\n\t\tint actual = calc.add(3, 2);\n\t\tassertThat(actual, is(expected));\n\t}\n\t\n\t@Test\n\tpublic void subTest() {\n\t\tCalc calc = new Calc();\n\t\tint expected = 1;\n\t\tint actual = calc.sub(3, 2);\n\t\tassertThat(actual, is(expected));\n\t}\n}\n```\n\n\n## \u30b0\u30eb\u30fc\u30d7\u5316\nDart\u3067\u306f *group* \u30e1\u30bd\u30c3\u30c9\u3092\u7528\u3044\u308b\n\n**Dart**\n\n```dart:example03_test.dart\nlibrary example03;\n\nimport 'calc.dart';\nimport 'package:unittest/unittest.dart';\n\nvoid main() {  \n  group(\"Group Add\", () {\n    test(\"add test1\", () {\n      Calc calc = new Calc();\n      int expected = 5;\n      int actual = calc.add(3, 2);\n      expect(actual, equals(expected));\n    });\n    \n    test(\"add test2\", () {\n      Calc calc = new Calc();\n      int expected = 1;\n      int actual = calc.add(3, -2);\n      expect(actual, equals(expected));\n    });\n  });\n  \n  group(\"Group Sub\", () {\n    test(\"sub test1\", () {\n      Calc calc = new Calc();\n      int expected = 1;\n      int actual = calc.sub(3, 2);\n      expect(actual, equals(expected));\n    });\n  });\n}\n```\n\n**Java**\n\n```java:Example03.java\npackage test.unittest;\n\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.junit.Assert.assertThat;\nimport main.unittest.Calc;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.experimental.runners.Enclosed;\n\n@RunWith(Enclosed.class)\npublic class Example03 {\n\tpublic static class GroupAdd {\n\t\t@Test\n\t\tpublic void addTest1() {\n\t\t\tCalc calc = new Calc();\n\t\t\tint expected = 5;\n\t\t\tint actual = calc.add(3, 2);\n\t\t\tassertThat(actual, is(expected));\n\t\t}\n\t\t\n\t\t@Test\n\t\tpublic void addTest2() {\n\t\t\tCalc calc = new Calc();\n\t\t\tint expected = 1;\n\t\t\tint actual = calc.add(3, -2);\n\t\t\tassertThat(actual, is(expected));\n\t\t}\n\t}\n\t\n\tpublic static class GroupSub {\n\t\t@Test\n\t\tpublic void subTest() {\n\t\t\tCalc calc = new Calc();\n\t\t\tint expected = 1;\n\t\t\tint actual = calc.sub(3, 2);\n\t\t\tassertThat(actual, is(expected));\n\t\t}\n\t}\n}\n```\n\n\n## \u30d5\u30a7\u30fc\u30ba\n\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001Dart\u3067\u306f *setUp* \u3084 *tearDown* \u30e1\u30bd\u30c3\u30c9\u3092\u7528\u3044\u308b\n\u30c6\u30b9\u30c8\u3092\u30b9\u30ad\u30c3\u30d7\u3057\u305f\u3044\u5834\u5408\u306f *skip_test* \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\n\n**Dart**\n\n```dart:example04_test.dart\nlibrary example04;\n\nimport 'calc.dart';\nimport 'package:unittest/unittest.dart';\n\nvoid main() {\n  Calc calc;\n  \n  setUp(() {\n    print(\"set up\");\n    calc = new Calc();\n  });\n  \n  tearDown(() {\n    print(\"tear down\");\n  });\n  \n  test(\"add test1\", () {\n    int expected = 5;\n    int actual = calc.add(3, 2);\n    expect(actual, equals(expected));\n  });\n  \n  skip_test(\"add test2\", () {\n    int expected = 1;\n    int actual = calc.add(3, -2);\n    expect(actual, equals(expected));\n  });\n  \n  test(\"sub test1\", () {\n    int expected = 1;\n    int actual = calc.sub(3, 2);\n    expect(actual, equals(expected));\n  });\n}\n```\n\n**Java**\n\n```java:Example04.java\npackage test.unittest;\n\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.junit.Assert.assertThat;\nimport main.unittest.Calc;\n\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Ignore;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.JUnit4;\n\n@RunWith(JUnit4.class)\npublic class Example04 {\n\tCalc calc;\n\t\n\t@Before\n\tpublic void setUp() {\n\t\tSystem.out.println(\"set up\");\n\t\tcalc = new Calc();\n\t}\n\t\n\t@After\n\tpublic void tearDown() {\n\t\tSystem.out.println(\"tear down\");\n\t}\n\t\n\t@Test\n\tpublic void addTest1() {\n\t\tSystem.out.println(\"add test1\");\n\t\tint expected = 5;\n\t\tint actual = calc.add(3, 2);\n\t\tassertThat(actual, is(expected));\n\t}\n\t\n\t@Ignore\n\tpublic void addTest2() {\n\t\tSystem.out.println(\"add test2\");\n\t\tint expected = 1;\n\t\tint actual = calc.add(3, -2);\n\t\tassertThat(actual, is(expected));\n\t}\n\t\n\t@Test\n\tpublic void subTest() {\n\t\tSystem.out.println(\"sub test\");\n\t\tint expected = 1;\n\t\tint actual = calc.sub(3, 2);\n\t\tassertThat(actual, is(expected));\n\t}\n\t\n}\n```\n\n\n## Matcher\nJUnit\u3068\u4f3c\u305f\u3088\u3046\u306aMatcher\u304cDart\u306b\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u308b\n\n**Dart**\n\n```dart:example05_test.dart\nlibrary example05;\n\nimport 'calc.dart';\nimport 'package:unittest/unittest.dart';\n\nvoid main() {\n  test(\"fail\", () {\n    Calc calc = new Calc();\n    int expected = 5;\n    int actual = calc.add(3, 2);\n    fail(\"fail\");\n    expect(actual, equals(expected));\n  });\n  \n  test(\"matchers\", () {\n    int actual = 1;\n    expect(actual, equals(1));\n    expect(actual, isNot(0));\n    expect(actual, same(1));\n    expect(actual, new isInstanceOf<int>());\n    \n    expect(actual, isNull);\n    expect(actual, isNotNull);\n  });\n}\n```\n\n**Java**\n\n```java:Example05.java\npackage test.unittest;\n\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.CoreMatchers.instanceOf;\nimport static org.hamcrest.CoreMatchers.not;\nimport static org.hamcrest.CoreMatchers.nullValue;\nimport static org.hamcrest.CoreMatchers.notNullValue;\nimport static org.hamcrest.CoreMatchers.sameInstance;\nimport static org.junit.Assert.assertThat;\nimport static org.junit.Assert.fail;\nimport main.unittest.Calc;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.JUnit4;\n\n@RunWith(JUnit4.class)\npublic class Example05 {\n\t@Test\n\tpublic void failTest() {\n\t\tCalc calc = new Calc();\n\t\tint expected = 5;\n\t\tint actual = calc.add(3, 2);\n\t\tfail(\"fail\");\n\t\tassertThat(actual, is(expected));\n\t}\n\t\n\t@Test\n\tpublic void matchersTest() {\n\t\tint actual = 1;\n\t\tassertThat(actual, is(1));\n\t\tassertThat(actual, is(not(0)));\n\t\tassertThat(actual, is(sameInstance(1)));\n\t\tassertThat(actual, is(instanceOf(Integer.class)));\n\t\t\n\t\tassertThat(actual, is(nullValue()));\n\t\tassertThat(actual, is(notNullValue()));\n\t}\n}\n```\n\n\n## \u4f8b\u5916\u9001\u51fa\nJUnit\u3067\u306fTest\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306b\u6307\u5b9a\u3059\u308b\u304c\u3001Dart\u3067\u306f *expect* \u30e1\u30bd\u30c3\u30c9\u3067\u691c\u8a3c\u3059\u308b\n\n**Dart**\n\n```dart:example06_test.dart\nlibrary example06;\n\nimport 'package:unittest/unittest.dart';\n\nvoid main() {\n  test(\"exception\", () {\n    expect(()=> throw new Exception(\"exception\"), throwsException);\n  });\n}\n```\n\n**Java**\n\n```java:Example06.java\npackage test.unittest;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.JUnit4;\n\n@RunWith(JUnit4.class)\npublic class Example06 {\n\t@Test(expected = Exception.class)\n\tpublic void exceptionTest() throws Exception {\n\t\tthrow new Exception();\n\t}\n}\n```\n\n\n## \u30c6\u30b9\u30c8\u30e9\u30f3\u30ca\u30fc\n\u8907\u6570\u306e\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u3092\u307e\u3068\u3081\u3066\u5b9f\u884c\u3059\u308b\n\n**Dart**\n\n```dart:example07_test.dart\nlibrary example07;\n\nimport 'example01_test.dart' as example01;\nimport 'example03_test.dart' as example03;\nimport 'example04_test.dart' as example04;\n\nvoid main() {\n  example01.main();\n  example03.main();\n  example04.main();\n}\n```\n\n**Java**\n\n```java:Example07.java\npackage test.unittest;\n\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Suite;\n\n@RunWith(Suite.class)\n@Suite.SuiteClasses({\n\tExample01.class,\n\tExample03.class,\n\tExample04.class,\n})\n\npublic class Example07 {}\n```\n\n\n## \u53c2\u8003\n* [Unit Testing with Dart](https://www.dartlang.org/articles/dart-unit-tests/index.html)\n\n* [unittest library](https://api.dartlang.org/apidocs/channels/stable/#unittest/unittest)", "tags": ["Dart"]}