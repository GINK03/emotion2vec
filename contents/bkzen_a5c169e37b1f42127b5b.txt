{"context": " More than 1 year has passed since last update.\u52c9\u5f37\u4f1a\u306b\u306f\u53c2\u52a0\u3057\u3066\u306a\u3044\u3051\u3069\u304a\u3082\u3057\u308d\u305d\u3046\u306a\u3053\u3068\u3057\u3066\u305f\u306e\u3067\u52dd\u624b\u306b\u53c2\u52a0\u3002\n\n\u30eb\u30fc\u30eb\nhttp://nabetani.sakura.ne.jp/hena/ord11bitamida/\n\n\u4f7f\u7528\u8a00\u8a9e\n\u5019\u88dc\u306b\u306f\u7121\u304b\u3063\u305f\u3051\u3069AS3\u3092\u4f7f\u7528\u3002\n\n\u56de\u7b54\n\u500b\u4eba\u7684\u306b\u30d3\u30c3\u30c8\u6f14\u7b97\u306fif\u6587\u304c\u5c11\u306a\u3044\u307b\u3046\u304c\u7f8e\u3057\u3044\u6c17\u304c\u3059\u308b\u3002\n\nTest189.as\npackage  \n{\n    import flash.display.Sprite;\n\n    public class Test189 extends Sprite \n    {\n        private var count: int;\n\n        private function solve(amida: String): String \n        {\n            var i: int, j: int, p: int, v: int, t: int;\n            var yoko: uint = parseInt(amida.split(\"-\").join(\"\"), 0x10);\n            var res: String = \"\";\n            for (i = 0; i < 9; i++) \n            {\n                for (j = 0, p = i; j < 4; j++) \n                {\n                    v = ((yoko >> (j << 3)) & 0xFF) << 1;\n                    t = (v >> p) & 3;\n                    while (t == 1) t = (v >> --p) & 1;\n                    while (t == 2) t = (v >> ++p) & 2;\n                }\n                res = (8 - p) + res;\n            }\n            return res;\n        }\n\n        private function test(amida: String, answer: String): void\n        {\n            var reply: String = solve(amida);\n            if (reply == answer) \n                trace(count + \" : OK [\" + reply + \"]\");\n            else\n                trace(count + \" : NG\");\n            count++;\n        }\n\n        public function Test189() \n        {\n            /*0*/ test( \"d6-7b-e1-9e\", \"740631825\" );\n            /*1*/ test( \"83-4c-20-10\", \"123805476\" );\n            /*2*/ test( \"fb-f7-7e-df\", \"274056813\" );\n            /*3*/ test( \"55-33-0f-ff\", \"123456780\" );\n            /*4*/ test( \"00-00-00-00\", \"012345678\" );\n            /*5*/ test( \"00-00-00-55\", \"021436587\" );\n            /*6*/ test( \"40-10-04-01\", \"021436587\" );\n            /*7*/ test( \"00-00-aa-00\", \"103254768\" );\n            /*8*/ test( \"80-20-08-02\", \"103254768\" );\n            /*9*/ test( \"ff-7e-3c-18\", \"876543210\" );\n            /*10*/ test( \"aa-55-aa-55\", \"351708264\" );\n            /*11*/ test( \"55-aa-aa-55\", \"012345678\" );\n            /*12*/ test( \"db-24-db-e7\", \"812543670\" );\n            /*13*/ test( \"00-01-00-40\", \"021345687\" );\n            /*14*/ test( \"00-00-80-00\", \"102345678\" );\n            /*15*/ test( \"01-40-00-00\", \"021345687\" );\n            /*16*/ test( \"00-00-00-02\", \"012345768\" );\n            /*17*/ test( \"00-00-02-00\", \"012345768\" );\n            /*18*/ test( \"00-14-00-00\", \"012436578\" );\n            /*19*/ test( \"00-00-01-40\", \"021345687\" );\n            /*20*/ test( \"00-80-01-00\", \"102345687\" );\n            /*21*/ test( \"c8-00-00-81\", \"120354687\" );\n            /*22*/ test( \"05-48-08-14\", \"021435687\" );\n            /*23*/ test( \"24-05-00-f0\", \"413205687\" );\n            /*24*/ test( \"40-08-14-01\", \"021536487\" );\n            /*25*/ test( \"18-c8-80-80\", \"210534678\" );\n            /*26*/ test( \"1c-88-52-00\", \"120564738\" );\n            /*27*/ test( \"ec-dc-67-62\", \"213468705\" );\n            /*28*/ test( \"0a-b6-60-e9\", \"035162784\" );\n            /*29*/ test( \"52-d6-c6-c2\", \"120345678\" );\n            /*30*/ test( \"47-e7-b0-36\", \"231047658\" );\n            /*31*/ test( \"0f-85-91-aa\", \"108263754\" );\n            /*32*/ test( \"76-b6-ed-f3\", \"601435782\" );\n            /*33*/ test( \"f5-5e-f7-3d\", \"025847163\" );\n            /*34*/ test( \"dd-e7-fb-f9\", \"610247538\" );\n            /*35*/ test( \"8f-f4-af-fd\", \"583246017\" );\n            /*36*/ test( \"bf-fb-cb-f7\", \"105382674\" );\n            /*37*/ test( \"e5-fd-ff-ff\", \"512046378\" );\n            /*38*/ test( \"ef-df-ef-fe\", \"713205648\" );\n            /*39*/ test( \"bf-7f-fd-d7\", \"826437105\" );\n            /*40*/ test( \"36-ff-df-de\", \"814527603\" );\n            /*41*/ test( \"6f-dd-ff-ff\", \"230685147\" );\n        }\n    }\n}\n\n\n\u52c9\u5f37\u4f1a\u306b\u306f\u53c2\u52a0\u3057\u3066\u306a\u3044\u3051\u3069\u304a\u3082\u3057\u308d\u305d\u3046\u306a\u3053\u3068\u3057\u3066\u305f\u306e\u3067\u52dd\u624b\u306b\u53c2\u52a0\u3002\n\n##\u30eb\u30fc\u30eb\nhttp://nabetani.sakura.ne.jp/hena/ord11bitamida/\n\n##\u4f7f\u7528\u8a00\u8a9e\n\u5019\u88dc\u306b\u306f\u7121\u304b\u3063\u305f\u3051\u3069AS3\u3092\u4f7f\u7528\u3002\n\n##\u56de\u7b54\n\u500b\u4eba\u7684\u306b\u30d3\u30c3\u30c8\u6f14\u7b97\u306fif\u6587\u304c\u5c11\u306a\u3044\u307b\u3046\u304c\u7f8e\u3057\u3044\u6c17\u304c\u3059\u308b\u3002\n\n```as:Test189.as\npackage  \n{\n\timport flash.display.Sprite;\n\t\n\tpublic class Test189 extends Sprite \n\t{\n\t\tprivate var count: int;\n\t\t\n\t\tprivate function solve(amida: String): String \n\t\t{\n\t\t\tvar i: int, j: int, p: int, v: int, t: int;\n\t\t\tvar yoko: uint = parseInt(amida.split(\"-\").join(\"\"), 0x10);\n\t\t\tvar res: String = \"\";\n\t\t\tfor (i = 0; i < 9; i++) \n\t\t\t{\n\t\t\t\tfor (j = 0, p = i; j < 4; j++) \n\t\t\t\t{\n\t\t\t\t\tv = ((yoko >> (j << 3)) & 0xFF) << 1;\n\t\t\t\t\tt = (v >> p) & 3;\n\t\t\t\t\twhile (t == 1) t = (v >> --p) & 1;\n\t\t\t\t\twhile (t == 2) t = (v >> ++p) & 2;\n\t\t\t\t}\n\t\t\t\tres = (8 - p) + res;\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\t\t\n\t\tprivate function test(amida: String, answer: String): void\n\t\t{\n\t\t\tvar reply: String = solve(amida);\n\t\t\tif (reply == answer) \n\t\t\t\ttrace(count + \" : OK [\" + reply + \"]\");\n\t\t\telse\n\t\t\t\ttrace(count + \" : NG\");\n\t\t\tcount++;\n\t\t}\n\t\t\n\t\tpublic function Test189() \n\t\t{\n\t\t\t/*0*/ test( \"d6-7b-e1-9e\", \"740631825\" );\n\t\t\t/*1*/ test( \"83-4c-20-10\", \"123805476\" );\n\t\t\t/*2*/ test( \"fb-f7-7e-df\", \"274056813\" );\n\t\t\t/*3*/ test( \"55-33-0f-ff\", \"123456780\" );\n\t\t\t/*4*/ test( \"00-00-00-00\", \"012345678\" );\n\t\t\t/*5*/ test( \"00-00-00-55\", \"021436587\" );\n\t\t\t/*6*/ test( \"40-10-04-01\", \"021436587\" );\n\t\t\t/*7*/ test( \"00-00-aa-00\", \"103254768\" );\n\t\t\t/*8*/ test( \"80-20-08-02\", \"103254768\" );\n\t\t\t/*9*/ test( \"ff-7e-3c-18\", \"876543210\" );\n\t\t\t/*10*/ test( \"aa-55-aa-55\", \"351708264\" );\n\t\t\t/*11*/ test( \"55-aa-aa-55\", \"012345678\" );\n\t\t\t/*12*/ test( \"db-24-db-e7\", \"812543670\" );\n\t\t\t/*13*/ test( \"00-01-00-40\", \"021345687\" );\n\t\t\t/*14*/ test( \"00-00-80-00\", \"102345678\" );\n\t\t\t/*15*/ test( \"01-40-00-00\", \"021345687\" );\n\t\t\t/*16*/ test( \"00-00-00-02\", \"012345768\" );\n\t\t\t/*17*/ test( \"00-00-02-00\", \"012345768\" );\n\t\t\t/*18*/ test( \"00-14-00-00\", \"012436578\" );\n\t\t\t/*19*/ test( \"00-00-01-40\", \"021345687\" );\n\t\t\t/*20*/ test( \"00-80-01-00\", \"102345687\" );\n\t\t\t/*21*/ test( \"c8-00-00-81\", \"120354687\" );\n\t\t\t/*22*/ test( \"05-48-08-14\", \"021435687\" );\n\t\t\t/*23*/ test( \"24-05-00-f0\", \"413205687\" );\n\t\t\t/*24*/ test( \"40-08-14-01\", \"021536487\" );\n\t\t\t/*25*/ test( \"18-c8-80-80\", \"210534678\" );\n\t\t\t/*26*/ test( \"1c-88-52-00\", \"120564738\" );\n\t\t\t/*27*/ test( \"ec-dc-67-62\", \"213468705\" );\n\t\t\t/*28*/ test( \"0a-b6-60-e9\", \"035162784\" );\n\t\t\t/*29*/ test( \"52-d6-c6-c2\", \"120345678\" );\n\t\t\t/*30*/ test( \"47-e7-b0-36\", \"231047658\" );\n\t\t\t/*31*/ test( \"0f-85-91-aa\", \"108263754\" );\n\t\t\t/*32*/ test( \"76-b6-ed-f3\", \"601435782\" );\n\t\t\t/*33*/ test( \"f5-5e-f7-3d\", \"025847163\" );\n\t\t\t/*34*/ test( \"dd-e7-fb-f9\", \"610247538\" );\n\t\t\t/*35*/ test( \"8f-f4-af-fd\", \"583246017\" );\n\t\t\t/*36*/ test( \"bf-fb-cb-f7\", \"105382674\" );\n\t\t\t/*37*/ test( \"e5-fd-ff-ff\", \"512046378\" );\n\t\t\t/*38*/ test( \"ef-df-ef-fe\", \"713205648\" );\n\t\t\t/*39*/ test( \"bf-7f-fd-d7\", \"826437105\" );\n\t\t\t/*40*/ test( \"36-ff-df-de\", \"814527603\" );\n\t\t\t/*41*/ test( \"6f-dd-ff-ff\", \"230685147\" );\n\t\t}\n\t}\n}\n```", "tags": ["ActionScript3.0", "as3", "\u3069\u3046\u66f8\u304f"]}