{"context": "\n\n\u6982\u8981\n\u30b2\u30fc\u30e0AI\u306b\u95a2\u3057\u3066\u52c9\u5f37\u3057\u59cb\u3081\u305f\u306e\u3067\uff0c\u305d\u306e\u5099\u5fd8\u9332\uff0e\n\u672c\u8a18\u4e8b\u3067\u306f\u57fa\u672c\u7684\u306a\u7d4c\u8def\u63a2\u7d22\u306b\u3064\u3044\u3066\u8a18\u8ff0\u3059\u308b\uff0e\n\u672c\u8a18\u4e8b\u3067\u306f\uff0c\u4ee5\u4e0b\u306e\u624b\u6cd5\u306b\u3064\u3044\u3066\u53d6\u308a\u4e0a\u3052\u308b\uff0e\n\u25cf\u30e9\u30f3\u30c0\u30e0\u30e0\u30fc\u30d6\u30e1\u30f3\u30c8\n\u25cf\u30d6\u30ec\u30c3\u30c9\u30af\u30e9\u30e0\u7d4c\u8def\u63a2\u7d22\n\u25cf\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\n\u306a\u304a\uff0c\u672c\u8a18\u4e8b\u3067\u306f\u9023\u7d9a\u7684\u306a\u30b2\u30fc\u30e0\u3092\u60f3\u5b9a\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u3092\u793a\u3059\uff0e\n\u96e2\u6563\u7684\u306a\u30b2\u30fc\u30e0\u3067\u306e\u4e0a\u8a18\u624b\u6cd5\u3082\uff0c\u8003\u3048\u65b9\u306f\u540c\u3058\u3067\u3042\u308b\uff0e\n\n\u53c2\u8003\u66f8\n\u3042\u308a\u304d\u305f\u308a\u3067\u306f\u3042\u308b\u304c\u4ee5\u4e0b\u306e\u66f8\u7c4d\u3092\u7528\u3044\u305f\uff0e\n\u30b2\u30fc\u30e0\u958b\u767a\u8005\u306e\u305f\u3081\u306eAI\u5165\u9580\n(\u30b5\u30f3\u30d7\u30eb)\n\n\u4e8b\u524d\u6e96\u5099\n\u30d9\u30af\u30c8\u30eb\u8a08\u7b97\u7528\u306e\u69cb\u9020\u4f53\uff0c\u4fbf\u5229\u95a2\u6570\u306e\u6e96\u5099\u3068\uff0c\n\u89d2\u5ea6\u8a08\u7b97\u7528\u306e\u30de\u30af\u30ed\u306e\u6e96\u5099\u3092\u884c\u3046\uff0e\n\n//\u89d2\u5ea6\u8a08\u7b97\u7528\u30de\u30af\u30ed.\n#define L_PI        (3.1415f)\n#define L_2PI       (6.2830f)\n#define L_H_DEG     (180.0000f)\n#define L_DEG       (360.0000f)\n#define DEG2RAD(e) ((e)*(L_PI)/(L_H_DEG))\n#define RAD2DEG(e) ((e)*(L_H_DEG)/(L_PI))\n#define ADJUST_RAD(e) (((e)<(0.0000f))?(e)+(L_2PI):((e)>(L_2PI))?(e)-(L_2PI):(e))\n#define ADJUST_DEG(e) (((e)<(0.0000f))?(e)+(L_DEG):((e)>(L_DEG))?(e)-(L_DEG):(e))\n\n//\u30d9\u30af\u30c8\u30eb\u69cb\u9020\u4f53.\n#define VECTOR SVector2D<float>\ntemplate <class T>\nstruct SVector2D\n{\n    typedef T DataType;\n    T x;\n    T y;\n    SVector2D(){ Init(); }\n    void Init()\n    {\n        x = T();\n        y = T();\n    }\n    SVector2D   operator +  ( const SVector2D& e ) const { SVector2D tmp; tmp.x = x + e.x; tmp.y = y + e.y; return tmp; }\n    SVector2D&  operator += ( const SVector2D& e ){ x += e.x; y += e.y; return (*this); }\n    SVector2D   operator -  ( const SVector2D& e ) const { SVector2D tmp; tmp.x = x - e.x; tmp.y = y - e.y; return tmp; }\n    SVector2D&  operator -= ( const SVector2D& e ){ x -= e.x; y -= e.y; return (*this); }\n    T           operator *  ( const SVector2D& e ) const { return ( x * e.x ) + ( y * e.y ); }\n    SVector2D&  operator *= ( const int e ){ x *= e; y *= e; return (*this); }\n    SVector2D&  operator *= ( const float e ){ x *= e; y *= e; return (*this); }\n    SVector2D&  operator /= ( const int e ){ x /= e; y /= e; return (*this); }\n    SVector2D&  operator /= ( const float e ){ x /= e; y /= e; return (*this); }\n};\n\n//\u6570\u5b66\u95a2\u9023\u306e\u95a2\u6570\u7fa4.\nnamespace LMath\n{\n    VECTOR::DataType GetScalar( VECTOR vec )\n    {\n        return sqrtf( vec.x * vec.x + vec.y * vec.y );\n    }\n\n    VECTOR Normalize( VECTOR vec )\n    {\n        const VECTOR::DataType vecLen = GetScalar( vec );\n        vec.x /= vecLen;\n        vec.y /= vecLen;\n        return vec;\n    }\n\n    VECTOR Normalize( VECTOR from, VECTOR to )\n    {\n        VECTOR tmp = to - from;\n        return Normalize( tmp );\n    }\n\n    float GetRotateRad( const float from, const float to )\n    {\n        //\u89d2\u5ea6\u5019\u88dc1.\n        const float dir1st      = ( to - from );\n        const float dir1stVal   = fabsf( dir1st );\n\n        //\u89d2\u5ea6\u5019\u88dc2.\n        const float dir2ndVal   = ( L_2PI - dir1stVal );\n        const float dir2nd      = ((dir1st>=0.0f)?-1.0f:1.0f) * dir2ndVal;\n\n        //\u7d76\u5bfe\u5024\u304c\u5c0f\u3055\u3044\u65b9\u3092\u63a1\u7528.\n        return ( dir1stVal > dir2ndVal ) ? dir2nd : dir1st;\n    }\n\n    bool IsCollisionCircle( const VECTOR& pos1, const VECTOR& pos2, const float r )\n    {\n        VECTOR tmp = pos1 - pos2;\n        return ( GetScalar( tmp ) < r );\n    }\n};\n\n\n\n\u30e9\u30f3\u30c0\u30e0\u30e0\u30fc\u30d6\u30e1\u30f3\u30c8\n\n\u6982\u8981\n\u76ee\u6a19\u5730\u70b9\u306b\u5411\u304b\u3063\u3066\u771f\u3063\u76f4\u3050\u9032\u3080\u7d4c\u8def\u63a2\u7d22\uff0e\n\u3053\u308c\u3060\u3051\u3060\u3068LOS\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u540c\u3058\u3060\u304c\uff0c\u305d\u308c\u306b\u52a0\u3048\u3066\uff0c\n\u8996\u7dda\u4e0a\u306b\u969c\u5bb3\u7269\u304c\u3042\u3063\u305f\u5834\u5408\u306f\uff0c\u969c\u5bb3\u7269\u3092\u907f\u3051\u308b\u3088\u3046\u306b\u9069\u5f53\u306a\u65b9\u5411\u306b\u79fb\u52d5\u3059\u308b\uff0e\n\n\u30b5\u30f3\u30d7\u30eb\nvoid Update( const float nowVel, VECTOR& nowPos, const VECTOR& targetPos )\n{\n    const VECTOR    ray             = targetPos - nowPos;\n    const VECTOR    rayNormalVec    = LMath::Normalize( ray );\n    const float     rayScalar       = LMath::GetScalar( ray );\n    const float     checkRange      = 20.0f;\n\n    bool bRandomMove = false;\n\n    VECTOR* obsArray = /*\u969c\u5bb3\u7269\u4f4d\u7f6e\u30ea\u30b9\u30c8*/;\n    const int obsNum = /*\u969c\u5bb3\u7269\u4f4d\u7f6e\u30ea\u30b9\u30c8\u30b5\u30a4\u30ba*/;\n    for( int i = 0; i < objNum; ++i ){\n        //\u969c\u5bb3\u7269\u3068\u306e\u8ddd\u96e2.\n        VECTOR disObs = obsArray[i] - nowPos;\n\n        //\u8996\u7dda\u4e0a\u3078\u306e\u6b63\u5c04\u5f71.\n        //(\u65b9\u5411\u30d9\u30af\u30c8\u30eb\u304c\u5358\u4f4d\u30d9\u30af\u30c8\u30eb\u3058\u3083\u306a\u3044\u3068\u6b63\u3057\u3044\u9577\u3055\u306f\u51fa\u306a\u3044).\n        VECTOR checkProject = rayNormalVec;\n        checkProject *= ( disObs * rayNormalVec );\n\n        //\u6b63\u5c04\u5f71\u306e\u65b9\u304c\u9577\u3044\u5834\u5408\u306f\uff0c\u305d\u3082\u305d\u3082\u30c1\u30a7\u30c3\u30af\u7bc4\u56f2\u306b\u5165\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u7121\u8996.\n        const float projectScalar = LMath::GetScalar( checkProject );\n        if( rayScalar < projectScalar ){ continue; }\n\n        //\u969c\u5bb3\u7269\u5468\u8fba\u3092\u5411\u3044\u3066\u3044\u306a\u3044\u5834\u5408\u3082\u7121\u8996.\n        if( !LMath::IsCollisionCircle( checkProject, disObs, checkRange ) ){\n            continue;\n        }\n\n        bRandomMove = true;\n        break;\n    }\n\n    float dir = ADJUST_RAD( atan2f( -rayNormalVec.y, rayNormalVec.x ) );\n    if( bRandomMove ){\n        //\u969c\u5bb3\u7269\u304c\u3042\u308c\u3070\u9069\u5f53\u306a\u65b9\u5411\u306b\u30e9\u30f3\u30c0\u30e0\u79fb\u52d5\u3059\u308b.\n        const int angle = ( 60 );\n        float displace = DEG2RAD( ( float  )( angle ) + ( float )( rand() % angle ) );\n        if( rand() % 2 ){ displace *= -1.0f; }\n\n        dir = ADJUST_RAD( dir + displace );\n    }\n\n    nowPos.x += nowVel * cosf( dir );\n    nowPos.y += nowVel * -sinf( dir );\n}\n\n\u6d41\u77f3\u306b\u5b8c\u5168\u30e9\u30f3\u30c0\u30e0\u3060\u3068\uff0c\u8996\u7dda\u304c\u901a\u308b\u307e\u3067\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u3067\uff0c\n\u5de6\u53f3\u00b130\u5ea6\u306e\u7bc4\u56f2\u3067\u30e9\u30f3\u30c0\u30e0\u306b\u5024\u3092\u6c7a\u5b9a\u3059\u308b\u3088\u3046\u306b\u3057\u305f\uff0e\n\n\u6ce8\u610f\n\u969c\u5bb3\u7269\u304c\u5927\u91cf\u306b\u3042\u3063\u3066\u307b\u307c\u8996\u7dda\u304c\u901a\u3089\u306a\u3044\u3088\u3046\u306a\u30b1\u30fc\u30b9(\u5927\u90fd\u4f1a\u306e\u8857\u4e2d\u306a\u3069)\u3067\u306f\uff0c\n\u3042\u307e\u308a\u8ce2\u3044\u52d5\u304d\u306f\u3057\u306a\u3044\u306e\u3067\uff0c\u5225\u306e\u65b9\u6cd5\u3092\u6a21\u7d22\u3057\u305f\u65b9\u304c\u826f\u3044\uff0e\n\n\u52d5\u4f5c\u72b6\u6cc1\n\n\n\u611f\u60f3\n\u8ce2\u304f\u898b\u305b\u308b\u305f\u3081\u306b\u306f\uff0c\u30e9\u30f3\u30c0\u30e0\u79fb\u52d5\u3059\u308b\u90e8\u5206\u3092\u304b\u306a\u308a\u5de5\u592b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3068\u601d\u3046\uff0e\n\u4f7f\u3048\u308b\u30b1\u30fc\u30b9\u304c\u601d\u3044\u3064\u304b\u306a\u3044\uff0e\n\n\u30d6\u30ec\u30c3\u30c9\u30af\u30e9\u30e0\u7d4c\u8def\u63a2\u7d22\n\n\u6982\u8981\n\u76ee\u6a19\u304c\u901a\u3063\u305f\u7b87\u6240\u306b\u30d1\u30f3\u304f\u305a(\u30d6\u30ec\u30c3\u30c9\u30af\u30e9\u30e0)\u3092\u843d\u3068\u3057\uff0c\u305d\u308c\u3092\u8ffd\u8de1\u3059\u308b\u63a2\u7d22\u624b\u6cd5\uff0e\n\u3059\u3067\u306b\u76ee\u6a19\u304c\u901a\u3063\u305f\u7b87\u6240\u306a\u306e\u3067\uff0c\u969c\u5bb3\u7269\u306a\u3069\u3092\u6c17\u306b\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\uff0e\n\u30d1\u30f3\u304f\u305a\u3092\u767a\u898b\u3067\u304d\u3066\u3044\u306a\u3044\u6642\u306e\u884c\u52d5\u306f\uff0c\u72b6\u6cc1\u306b\u5fdc\u3058\u3066\u8abf\u6574\u3059\u308b\uff0e\n\n\u30b5\u30f3\u30d7\u30eb\n#define BREAD_CRUMB_MAX_RANGE (60.0f)\n\n//\u30d1\u30f3\u304f\u305a\u3092\u843d\u3068\u3059.\u76ee\u6a19\u304c\u79fb\u52d5\u3057\u305f\u6642\u306b\u547c\u3073\u51fa\u3059.\nvoid DropBreadCrumb( const VECTOR& pos )\n{\n    //\u30d1\u30f3\u304f\u305a\u96c6\u5408.\n    VECTOR* breadArray = /*\u30d1\u30f3\u304f\u305a\u4f4d\u7f6e\u30ea\u30b9\u30c8*/;\n    const int breadNum = /*\u30d1\u30f3\u304f\u305a\u4f4d\u7f6e\u30ea\u30b9\u30c8\u30b5\u30a4\u30ba*/;\n    if( !( breadArray && ( breadNum > 0 ) ) ){ return; }\n\n    //\u6700\u8fd1\u843d\u3068\u3057\u305f\u30d1\u30f3\u304f\u305a\u3088\u308a\u4e00\u5b9a\u7bc4\u56f2\u96e2\u308c\u3066\u3044\u305f\u3089\u30d1\u30f3\u304f\u305a\u3092\u843d\u3068\u3059.\n    if( LMath::IsCollisionCircle( breadArray[0], pos, BREAD_CRUMB_MAX_RANGE ) ){\n        return;\n    }\n\n    //\u5168\u30d1\u30f3\u304f\u305a\u306e\u9bae\u5ea6\u3092\u66f4\u65b0.\n    for( int i = breadNum - 1; i >= 1; --i ){\n        breadArray[i] = breadArray[i-1];\n    }\n\n    //\u65b0\u3057\u3044\u30d1\u30f3\u304f\u305a\u3092\u767b\u9332.\n    breadArray[0] = pos;\n}\n\n//\u30d1\u30f3\u304f\u305a\u3092\u5143\u306b\u4f4d\u7f6e\u3068\u65b9\u5411\u3092\u6c7a\u5b9a\u3059\u308b.\nVECTOR g_targetBread;\nvoid Update( VECTOR& nowPos, float& nowDir, const float nowVel )\n{\n    const float BREAD_COLLISION_RANGE = 15.0f;\n\n    //\u3059\u3067\u306b\u5230\u7740\u3057\u3066\u3044\u308b\u306a\u3089\u7121\u52b9\u306b.\n    if( g_targetBread.x >= 0.0f && g_targetBread.y >= 0.0f )\n    {\n        if( LMath::IsCollisionCircle( g_targetBread, nowPos, BREAD_COLLISION_RANGE ) ){\n            g_targetBread.x = g_targetBread.y = -1.0f;\n        }\n    }\n\n    //\u76ee\u6a19\u30d1\u30f3\u304f\u305a\u304c\u306a\u3044\u5834\u5408\u306f\u63a2\u3059.\n    if( !( g_targetBread.x >= 0.0f && g_targetBread.y >= 0.0f ) )\n    {\n        VECTOR* breadArray = /*\u30d1\u30f3\u304f\u305a\u4f4d\u7f6e\u30ea\u30b9\u30c8*/;\n        const int breadNum = /*\u30d1\u30f3\u304f\u305a\u4f4d\u7f6e\u30ea\u30b9\u30c8\u30b5\u30a4\u30ba*/;\n        for( int i = 0; i < breadNum; ++i ){\n            VECTOR breadPos = breadArray[i];\n            if( !( breadPos.x >= 0.0f && breadPos.y >= 0.0f ) ){ continue; }\n\n            //\u7bc4\u56f2\u5916\u306e\u3082\u306e\u306f\u5224\u5b9a\u304b\u3089\u5916\u3059.\n            const float r = BREAD_CRUMB_MAX_RANGE + ( BREAD_COLLISION_RANGE * 2.0f );\n            if( !LMath::IsCollisionCircle( breadPos, nowPos, r ) ){\n                continue;\n            }\n\n            g_targetBread = breadPos;\n            break;\n        }\n    }\n\n    if( g_targetBread.x >= 0.0f && g_targetBread.y >= 0.0f ){\n        //\u76ee\u6a19\u30d1\u30f3\u304f\u305a\u304c\u3042\u308b\u306a\u3089\u30d1\u30f3\u304f\u305a\u306b\u5411\u304b\u3046.\n\n        //\u76ee\u6a19\u65b9\u5411\u3078\u306e\u65b9\u5411\u30d9\u30af\u30c8\u30eb.\n        VECTOR dirVec = LMath::Normalize( nowPos, g_targetBread );\n\n        //\u89d2\u5ea6\u306b\u5909\u63db.\n        nowDir = ADJUST_RAD( atan2f( -dirVec.y, dirVec.x ) );\n    }\n    else{\n        //\u76ee\u6a19\u30d1\u30f3\u304f\u305a\u304c\u306a\u3044\u306a\u3089\uff0c\u30e9\u30f3\u30c0\u30e0\u3067\u79fb\u52d5.\n\n        //\u4eca\u306e\u65b9\u5411\u00b130.0f\u306e\u7bc4\u56f2\u3092\u30e9\u30f3\u30c0\u30e0\u3067\u79fb\u52d5.\n        const float angle = 30.0f;\n        float displace = DEG2RAD( angle );\n        if( rand() % 2 ){ displace *= -1.0f; }\n\n        nowDir = ADJUST_RAD( nowDir + displace );\n    }\n\n    nowPos.x += nowVel * cosf( nowDir );\n    nowPos.y += nowVel * -sinf( nowDir );\n}\n\n\u4eca\u56de\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\uff0c\u30d1\u30f3\u304f\u305a\u3092\u767a\u898b\u3067\u304d\u3066\u3044\u306a\u3044\u6642\u306e\u884c\u52d5\u306f\uff0c\n\u305d\u306e\u8fba\u3092\u3046\u308d\u3064\u304f\u3088\u3046\u306b\u3057\u3066\u3044\u308b\uff0e\n\n\u6ce8\u610f\n\u30d1\u30f3\u304f\u305a\u306f\u6700\u65b0\u306e\u3082\u306e\u304b\u3089\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3053\u3068\u3067\uff0c\n\u53e4\u3044\u3082\u306e\u3068\u65b0\u3057\u3044\u3082\u306e\u304c\u4e26\u3093\u3067\u843d\u3061\u3066\u3044\u308b\u3088\u3046\u306a\u6642\u306b\uff0c\u65b0\u3057\u3044\u3082\u306e\u3092\u9078\u629e\u3057\u3066\u304f\u308c\u308b\uff0e\n\u3064\u307e\u308a\uff0c\u305f\u3060\u8ffd\u3046\u3060\u3051\u3067\u306f\u306a\u304f\uff0c\u53ef\u80fd\u306a\u3089\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\uff0e\n\u53e4\u3044\u3082\u306e\u304b\u3089\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3068\uff0c\u4f4d\u7f6e\u306b\u3088\u3063\u3066\u306f\u53e4\u3044\u30d1\u30f3\u304f\u305a\u306b\u5f15\u3063\u5f35\u3089\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\uff0e\n\n\u52d5\u4f5c\u72b6\u6cc1\n\u30d1\u30f3\u306e\u7d75\u306fGATAG\u3055\u3093\u306e\u3082\u306e\u3092\uff0c\u4f7f\u7528\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\uff0e\n\n\n\u611f\u60f3\n\u30d1\u30f3\u304f\u305a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\uff0c\u4f4d\u7f6e\u3060\u3051\u3067\u306f\u306a\u304f\uff0c\n\u8272\u3005\u306a\u60c5\u5831\u3092\u542b\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u305f\u3081\uff0c\u7d50\u69cb\u6c4e\u7528\u6027\u304c\u9ad8\u3044\uff0e\n\u5b9f\u969b\u306b\uff0cCEDEC2016\u3067\u767a\u8868\u3055\u308c\u305fLOST REAVERS\u306b\u304a\u3051\u308bAI Director\u306e\u8a66\u307f\u306b\u304a\u3044\u3066\uff0c\nAI\u7528\u306e\u60c5\u5831\u3068\u3057\u3066\u4f7f\u7528\u3057\u305f\u3068\u3044\u3046\u8a71\u304c\u51fa\u305f\uff0e\n\u5354\u8abf\u76ee\u7684\u3067\u6575\u304c\u843d\u3068\u3057\u305f\u308a\uff0c\u30de\u30c3\u30d7\u306b\u8db3\u8de1\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306b\u843d\u3068\u3057\u305f\u308a\uff0c\u8272\u3005\u4f7f\u3048\u305d\u3046\uff0e\n\n\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\n\n\u6982\u8981\n\u524d\u3082\u3063\u3066\uff0c\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u7d4c\u8def\u4e0a\u306e\u5730\u70b9\u60c5\u5831(\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8)\u3092\u57cb\u3081\u8fbc\u3093\u3067\u304a\u304d\uff0c\n\u76ee\u6a19\u5730\u70b9\u306b\u5411\u304b\u3046\u6642\u306b\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u3092\u7d4c\u7531\u3057\u3066\u79fb\u52d5\u3059\u308b\u624b\u6cd5\uff0e\n\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u306f\u969c\u5bb3\u7269\u306b\u5f15\u3063\u304b\u304b\u3089\u306a\u3044\u3088\u3046\u306b\u57cb\u3081\u8fbc\u3080\u305f\u3081\uff0c\n\u56de\u907f\u7b49\u306f\u8003\u3048\u306a\u304f\u3066\u826f\u3044\uff0e\n\n\u30b5\u30f3\u30d7\u30eb\n#define WAY_POINT_MAX_NUM (20)\n#define INF_COST (1 << 28)\nint g_edgeCost[WAY_POINT_MAX_NUM ][WAY_POINT_MAX_NUM ];\nint g_shortestPath[WAY_POINT_MAX_NUM ][WAY_POINT_MAX_NUM ];\n\n//\u30b0\u30e9\u30d5\u751f\u6210.\nvoid CreateGraph()\n{\n    //\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u751f\u6210.\n    {\n        VECTOR* waypointArray = /*\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u4f4d\u7f6e\u30ea\u30b9\u30c8*/;\n        const int waypointNum = /*\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u4f4d\u7f6e\u30ea\u30b9\u30c8\u30b5\u30a4\u30ba*/\n        const int POINT_NUM = 4;\n        for( int i = 0; i < waypointNum; ++i ){\n            VECTOR pos;\n            pos.x = 50.0f + ( 100.0f * (float)(i % POINT_NUM) );\n            pos.y = 50.0f + ( 100.0f * (float)(i / POINT_NUM) );\n            waypointArray[i] = pos;\n        }\n    }\n\n    //\u30a8\u30c3\u30b8\u3092\u8a2d\u5b9a.\n    {\n        //\u521d\u671f\u5316.\n        for( int i = 0; i < WAY_POINT_MAX_NUM; ++i ){\n            for( int j = 0; j < WAY_POINT_MAX_NUM; ++j ){\n                g_edgeCost[i][j] = INF_COST;\n            }\n        }\n\n        //\u81ea\u8eab\u3078\u306e\u30b3\u30b9\u30c8\u306f\u306a\u3057.\n        for( int i = 0; i < WAY_POINT_MAX_NUM; ++i ){ g_edgeCost[i][i] = 0; }\n\n        //\u624b\u4f5c\u696d\u3067\u30a8\u30c3\u30b8\u3092\u8a2d\u5b9a.\n        g_edgeCost[0][1] = g_edgeCost[1][0] = 1;\n        g_edgeCost[1][2] = g_edgeCost[2][1] = 1;\n        g_edgeCost[2][3] = g_edgeCost[3][2] = 2;\n\n        g_edgeCost[0][4] = g_edgeCost[4][0] = 1;\n        g_edgeCost[1][5] = g_edgeCost[5][1] = 2;\n        g_edgeCost[2][6] = g_edgeCost[6][2] = 1;\n        g_edgeCost[3][7] = g_edgeCost[7][3] = 1;\n\n        g_edgeCost[4][5] = g_edgeCost[5][4] = 1;\n        g_edgeCost[5][6] = g_edgeCost[6][5] = 2;\n        g_edgeCost[6][7] = g_edgeCost[7][6] = 1;\n\n        g_edgeCost[4][8] = g_edgeCost[8][4] = 1;\n        g_edgeCost[5][9] = g_edgeCost[9][5] = 2;\n        g_edgeCost[6][10] = g_edgeCost[10][6] = 1;\n        g_edgeCost[7][11] = g_edgeCost[11][7] = 1;\n\n        g_edgeCost[8][9] = g_edgeCost[9][8] = 2;\n        g_edgeCost[9][10] = g_edgeCost[10][9] = 1;\n        g_edgeCost[10][11] = g_edgeCost[11][10] = 3;\n\n        g_edgeCost[8][12] = g_edgeCost[12][8] = 1;\n        g_edgeCost[9][13] = g_edgeCost[13][9] = 1;\n        g_edgeCost[10][14] = g_edgeCost[14][10] = 3;\n        g_edgeCost[11][15] = g_edgeCost[15][11] = 1;\n\n        g_edgeCost[12][13] = g_edgeCost[13][12] = 1;\n        g_edgeCost[13][14] = g_edgeCost[14][13] = 1;\n        g_edgeCost[14][15] = g_edgeCost[15][14] = 1;\n    }\n\n    //\u5168\u70b9\u5bfe\u6700\u77ed\u7d4c\u8def\u3092\u6c42\u3081\u308b.\n    {\n        //\u30a8\u30c3\u30b8\u306e\u72b6\u614b\u3092\u307e\u3093\u307e\u30b3\u30d4\u30fc.\n        for( int i = 0; i < WAY_POINT_MAX_NUM; ++i ){\n            for( int j = 0; j < WAY_POINT_MAX_NUM; ++j ){\n                g_shortestPath[i][j] = g_edgeCost[i][j];\n            }\n        }\n\n        //\u30ef\u30fc\u30b7\u30e3\u30eb\u30d5\u30ed\u30a4\u30c9.\n        for( int k = 0; k < WAY_POINT_MAX_NUM; k++ ){\n            for( int i = 0; i < WAY_POINT_MAX_NUM; i++ ){\n                for( int j = 0; j < WAY_POINT_MAX_NUM; j++){\n                    const int newValue = g_shortestPath[i][k] + g_shortestPath[k][j];\n                    g_shortestPath[i][j] = min( g_shortestPath[i][j], newValue );\n                }\n            }\n        }\n    }\n}\n\n//\u6b21\u306b\u884c\u304f\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u3092\u53d6\u5f97.\nint GetNextNode( const int s, const int e )\n{\n    for( int i = 0; i < WAY_POINT_MAX_NUM; i++ ){\n        if( i == s ){ continue; }\n        if( g_edgeCost[s][i] + g_shortestPath[i][e] == g_shortestPath[s][e]) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nint     g_targetIndex;\nVECTOR  g_targetWayPoint;\n\n//\u4f4d\u7f6e\u66f4\u65b0.\nvoid Update( VECTOR* nowPos, const float nowDir, const float nowVel, const VECTOR targetPos )\n{\n    if( g_targetIndex < 0 ){\n        //\u6700\u521d\u306e\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u304c\u898b\u3064\u304b\u3063\u3066\u3044\u306a\u3044\u306e\u3067\uff0c\u76f4\u8fd1\u306e\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u3092\u63a2\u3059.\n        g_targetIndex       = SearchNearestPoint( nowPos );\n        g_targetWayPoint    = GetWayPointPos( g_targetIndex );\n    }\n    else{\n        //\u76ee\u6a19\u306e\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u306f\u898b\u3064\u304b\u3063\u3066\u3044\u308b\uff0e\n\n        const float RANGE_MAX = 15.0f;\n        if( LMath::IsCollisionCircle( g_targetWayPoint, nowPos, RANGE_MAX ) ){\n            //\u3059\u3067\u306b\u5230\u7740\u3057\u3066\u3044\u308b\u306e\u3067\uff0c\u6b21\u306e\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u3092\u63a2\u3059.\n            const int playerPoint = SearchNearestPoint( targetPos);\n            g_targetIndex       = GetNextNode( g_targetIndex, playerPoint );\n            g_targetWayPoint    = GetWayPointPos( g_targetIndex );\n        }\n    }\n\n    if( g_targetWayPoint.x >= 0.0f && g_targetWayPoint.y >= 0.0f ){\n        //\u76ee\u6a19\u5730\u70b9\u304c\u6709\u52b9\u306a\u3089\uff0c\u305d\u3053\u306b\u5411\u304b\u3046.\n\n        VECTOR dirVec = LMath::Normalize( nowPos, g_targetWayPoint );\n\n        nowDir = ADJUST_RAD( atan2f( -dirVec.y, dirVec.x ) );\n\n        nowPos.x += nowVel * cosf( nowDir );\n        nowPos.y += nowVel * -sinf( nowDir );\n    }\n\n    obj->SetNextPos( nowPos );\n}\n\n//\u6307\u5b9a\u4f4d\u7f6e\u304b\u3089\u4e00\u756a\u8fd1\u3044\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u3092\u63a2\u3059.\nint SearchNearestPoint( const VECTOR& pos )\n{\n    VECTOR* waypointArray = /*\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u4f4d\u7f6e\u30ea\u30b9\u30c8*/;\n    const int waypointNum = /*\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u4f4d\u7f6e\u30ea\u30b9\u30c8\u30b5\u30a4\u30ba*/;\n    if( !( waypointArray && ( waypointNum > 0 ) ) ){ return -1; }\n\n    //\u8ddd\u96e2\u3067\u76f4\u8fd1\u304b\u3069\u3046\u304b\u5224\u65ad.\n    int     nextPoint   = -1;\n    float   minDistance = (float)(1 << 30);\n    for( int i = 0; i < waypointNum; ++i ){\n        const float distance = LMath::GetScalar( waypointArray[i] - pos );\n        if( distance > minDistance ){ continue; }\n        minDistance = distance;\n        nextPoint   = i;\n    }\n\n    return nextPoint;\n}\n\n//\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u306e\u4f4d\u7f6e\u3092\u53d6\u5f97.\nVECTOR  GetWayPointPos( const int& index )\n{\n    VECTOR tmp;\n    tmp.x = tmp.y = -1.0f;\n\n    VECTOR* waypointArray = /*\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u4f4d\u7f6e\u30ea\u30b9\u30c8*/;\n    const int waypointNum = /*\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u4f4d\u7f6e\u30ea\u30b9\u30c8\u30b5\u30a4\u30ba*/;\n    if( !( waypointArray && ( waypointNum > 0 ) ) ){ return tmp; }\n\n    if( 0 > index || index >= waypointNum ){ return tmp; }\n\n    return waypointArray[index];\n}\n\n\n\u30b3\u30b9\u30c8\u30c7\u30fc\u30bf\u306f\u5916\u90e8\u30c7\u30fc\u30bf\u306b\u3059\u3079\u304d\u3060\u304c\uff0c\u4eca\u56de\u306f\u30cf\u30fc\u30c9\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u305f\uff0e\n\u6700\u77ed\u7d4c\u8def\u8a08\u7b97\u306f\u30ef\u30fc\u30b7\u30e3\u30eb-\u30d5\u30ed\u30a4\u30c9\u6cd5\u3092\u4f7f\u7528\u3057\u305f\uff0e\n\u7d4c\u8def\u5fa9\u5143\u304c\u3067\u304d\u308b\u306a\u3089\uff0c\u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u3067\u3082\u30d9\u30eb\u30de\u30f3\u30d5\u30a9\u30fc\u30c9\u3067\u3082SPFA\u3067\u3082\u4f55\u3067\u3082\u826f\u3044\uff0e\n\u306a\u304a\uff0c\u6b21\u56de\u8a18\u4e8b\u306b\u3066\uff0c\u3088\u308a\u52b9\u7387\u7684\u306a\u6700\u77ed\u7d4c\u8def\u8a08\u7b97\u3067\u3042\u308bA*\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7d39\u4ecb\u3059\u308b\u4e88\u5b9a\u3067\u3042\u308b\uff0e\n\n\u6ce8\u610f\n\u30b3\u30b9\u30c8\u30c7\u30fc\u30bf\u306f\uff0c\u5145\u5206\u306b\u5927\u304d\u3044\u521d\u671f\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\uff0e\n\u305f\u3060\u3057\uff0c\u6700\u77ed\u7d4c\u8def\u8a08\u7b97\u6642\u306b\u52a0\u7b97\u51e6\u7406\u304c\u3042\u308b\u306e\u3067\uff0c\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3057\u306a\u3044\u3088\u3046\u306b\u6ce8\u610f\uff0e\n\u307e\u305f\uff0c\u5404\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u306b\u304a\u3044\u3066\uff0c\u81ea\u8eab\u3078\u306e\u30b3\u30b9\u30c8\u306f0\u306b\u8a2d\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\uff0e\n\n\u52d5\u4f5c\u72b6\u6cc1\n\n\u8349\u3080\u3089\u3063\u307d\u3044\u7d75\u3067\u53e5\u5207\u3089\u308c\u3066\u3044\u308b\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u9593\u306e\u30b3\u30b9\u30c8\u306f\u9ad8\u304f\u8a2d\u5b9a\u3057\u3066\u3042\u308b\uff0e\n\u305d\u306e\u305f\u3081\uff0c\u9060\u56de\u308a\u3057\u305f\u65b9\u304c\u6700\u77ed\u306b\u306a\u308b\u3068\u5224\u65ad\u3057\u3066\u3044\u308b\uff0e\n\n\u611f\u60f3\n\u5358\u7d14\u306a\u4ed5\u7d44\u307f\u3067\u306f\u3042\u308b\u3082\u306e\u306e\uff0c\u7d50\u69cb\u8ce2\u304f\u898b\u3048\u308b\uff0e\n\u4eca\u56de\u306f\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u306e\u751f\u6210\u3084\u30b3\u30b9\u30c8\u306e\u8a2d\u5b9a\u3092\u9759\u7684\u306b\u884c\u3063\u3066\u3044\u308b\u304c\uff0c\n\u6700\u8fd1\u306e\u30b2\u30fc\u30e0\u696d\u754c\u3067\u306f\uff0c\u52d5\u7684\u306b\u884c\u3063\u3066\u3044\u308b\u3088\u3046\u3060\uff0e\n\u305d\u306e\u969b\u306b\u306f\uff0c\u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30e1\u30c3\u30b7\u30e5\u306a\u3069\u3092\u53c2\u7167\u3057\u3066\uff0c\u969c\u5bb3\u7269\u304c\u306a\u3044\u3053\u3068\u3092\u4fdd\u8a3c\u3059\u308b\uff0e\n\u307e\u305f\uff0cCEDEC2016\u3067\u767a\u8868\u3055\u308c\u305f\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u306e\u4eba\u5de5\u77e5\u80fd\u306e\u305f\u3081\u306e\u6226\u8853\u4f4d\u7f6e\u89e3\u6790\u30b7\u30b9\u30c6\u30e0\u306b\u3088\u308c\u3070\uff0c\n\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u306e\u52d5\u7684\u751f\u6210\u3092\u4f7f\u7528\u3057\u3066\uff0c\u3088\u308a\u9ad8\u5ea6\u3067\u6c4e\u7528\u7684\u306a\u4f4d\u7f6e\u89e3\u6790\u3092\u884c\u3063\u3066\u3044\u308b\u3068\u306e\u3053\u3068.\n\u73fe\u5728\u306e\u30b2\u30fc\u30e0AI\u6280\u8853\u306b\u304a\u3044\u3066\uff0c\u304b\u306a\u308a\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u624b\u6cd5\u3067\u3042\u308b\uff0e\n\n\u7d39\u4ecb\u3060\u3051\n\n\u30a6\u30a9\u30fc\u30eb\u30c8\u30ec\u30fc\u30b7\u30f3\u30b0\n\u73fe\u5728\u306e\u65b9\u5411\u3092\u57fa\u6e96\u306b\uff0c\u5de6\u65b9\uff0c\u524d\u65b9\uff0c\u53f3\u65b9\uff0c\u5f8c\u65b9\u3068\u3044\u3046\u9806\u306b\u79fb\u52d5\u5148\u3092\u30c1\u30a7\u30c3\u30af\u3057\uff0c\n\u79fb\u52d5\u3067\u304d\u308b\u65b9\u5411\u304c\u3042\u308c\u3070\uff0c\u305d\u3061\u3089\u306b\u79fb\u52d5\u3059\u308b\u3068\u3044\u3046\u624b\u6cd5\uff0e\n\u5e83\u3044\u7a7a\u9593\u304c\u5927\u91cf\u306e\u5c0f\u90e8\u5c4b\u3067\u533a\u5207\u3089\u308c\u3066\u3044\u308b\uff0c\u3068\u3044\u3063\u305f\u30b1\u30fc\u30b9\u306b\u304a\u3044\u3066\uff0c\n\u58c1\u6cbf\u3044\u306b\u79fb\u52d5\u3059\u308b\u3053\u3068\u3067\uff0c\u5168\u5c0f\u90e8\u5c4b\u3092\u8a2a\u554f\u3067\u304d\u308b\u3068\u3044\u3046\u5f37\u307f\u304c\u3042\u308b\uff0e\n\u305f\u3060\u3057\uff0c\u6700\u521d\u306b\u914d\u7f6e\u3055\u308c\u305f\u5834\u6240\u304c\u58c1\u6cbf\u3044\u3058\u3083\u306a\u3044\u5834\u5408\u306f\uff0c\n\u307e\u305a\u58c1\u6cbf\u3044\u306b\u79fb\u52d5\u3059\u308b\u624b\u6bb5\u304c\u5fc5\u8981\u306b\u306a\u308b\uff0e\n\u307e\u305f\uff0c\u58c1\u304c\u7e4b\u304c\u3063\u3066\u3044\u306a\u3044\u5834\u6240\u304c\u3042\u308b\u30b1\u30fc\u30b9\u306a\u3069\uff0c\u5168\u8a2a\u554f\u3067\u304d\u306a\u3044\u30b1\u30fc\u30b9\u3082\u3042\u308b\uff0e\n\n\u7dcf\u62ec\n\u7d4c\u8def\u63a2\u7d22\u306e\u7d39\u4ecb\u3060\u3063\u305f\u304c\uff0c\u30d1\u30f3\u304f\u305a\u3084\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u306a\u3069\uff0c\n\u7d4c\u8def\u63a2\u7d22\u4ee5\u5916\u306b\u3082\u6d3b\u7528\u3067\u304d\u308b\u6982\u5ff5\u3082\u3042\u308b\u306e\u3067\uff0c\u3057\u3063\u304b\u308a\u6d3b\u7528\u3057\u3066\u3044\u304f\u5fc5\u8981\u304c\u3042\u308a\u305d\u3046\uff0e\n#\u6982\u8981\n`\u30b2\u30fc\u30e0AI`\u306b\u95a2\u3057\u3066\u52c9\u5f37\u3057\u59cb\u3081\u305f\u306e\u3067\uff0c\u305d\u306e\u5099\u5fd8\u9332\uff0e\n\u672c\u8a18\u4e8b\u3067\u306f**\u57fa\u672c\u7684\u306a\u7d4c\u8def\u63a2\u7d22**\u306b\u3064\u3044\u3066\u8a18\u8ff0\u3059\u308b\uff0e\n\n\u672c\u8a18\u4e8b\u3067\u306f\uff0c\u4ee5\u4e0b\u306e\u624b\u6cd5\u306b\u3064\u3044\u3066\u53d6\u308a\u4e0a\u3052\u308b\uff0e\n\u25cf**\u30e9\u30f3\u30c0\u30e0\u30e0\u30fc\u30d6\u30e1\u30f3\u30c8**\n\u25cf**\u30d6\u30ec\u30c3\u30c9\u30af\u30e9\u30e0\u7d4c\u8def\u63a2\u7d22**\n\u25cf**\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3**\n\n\u306a\u304a\uff0c\u672c\u8a18\u4e8b\u3067\u306f\u9023\u7d9a\u7684\u306a\u30b2\u30fc\u30e0\u3092\u60f3\u5b9a\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u3092\u793a\u3059\uff0e\n\u96e2\u6563\u7684\u306a\u30b2\u30fc\u30e0\u3067\u306e\u4e0a\u8a18\u624b\u6cd5\u3082\uff0c\u8003\u3048\u65b9\u306f\u540c\u3058\u3067\u3042\u308b\uff0e\n\n#\u53c2\u8003\u66f8\n\u3042\u308a\u304d\u305f\u308a\u3067\u306f\u3042\u308b\u304c\u4ee5\u4e0b\u306e\u66f8\u7c4d\u3092\u7528\u3044\u305f\uff0e\n[\u30b2\u30fc\u30e0\u958b\u767a\u8005\u306e\u305f\u3081\u306eAI\u5165\u9580](https://www.amazon.co.jp/%E3%82%B2%E3%83%BC%E3%83%A0%E9%96%8B%E7%99%BA%E8%80%85%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AEAI%E5%85%A5%E9%96%80-David-M-Bourg/dp/4873112168)\n([\u30b5\u30f3\u30d7\u30eb](http://examples.oreilly.com/9780596005559/))\n\n#\u4e8b\u524d\u6e96\u5099\n\u30d9\u30af\u30c8\u30eb\u8a08\u7b97\u7528\u306e\u69cb\u9020\u4f53\uff0c\u4fbf\u5229\u95a2\u6570\u306e\u6e96\u5099\u3068\uff0c\n\u89d2\u5ea6\u8a08\u7b97\u7528\u306e\u30de\u30af\u30ed\u306e\u6e96\u5099\u3092\u884c\u3046\uff0e\n\n```cpp\n\n//\u89d2\u5ea6\u8a08\u7b97\u7528\u30de\u30af\u30ed.\n#define L_PI\t\t(3.1415f)\n#define L_2PI\t\t(6.2830f)\n#define L_H_DEG\t\t(180.0000f)\n#define L_DEG\t\t(360.0000f)\n#define DEG2RAD(e) ((e)*(L_PI)/(L_H_DEG))\n#define RAD2DEG(e) ((e)*(L_H_DEG)/(L_PI))\n#define ADJUST_RAD(e) (((e)<(0.0000f))?(e)+(L_2PI):((e)>(L_2PI))?(e)-(L_2PI):(e))\n#define ADJUST_DEG(e) (((e)<(0.0000f))?(e)+(L_DEG):((e)>(L_DEG))?(e)-(L_DEG):(e))\n\n//\u30d9\u30af\u30c8\u30eb\u69cb\u9020\u4f53.\n#define VECTOR SVector2D<float>\ntemplate <class T>\nstruct SVector2D\n{\n\ttypedef T DataType;\n\tT x;\n\tT y;\n\tSVector2D(){ Init(); }\n\tvoid Init()\n\t{\n\t\tx = T();\n\t\ty = T();\n\t}\n\tSVector2D\toperator +  ( const SVector2D& e ) const { SVector2D tmp; tmp.x = x + e.x; tmp.y = y + e.y; return tmp; }\n\tSVector2D&\toperator += ( const SVector2D& e ){ x += e.x; y += e.y; return (*this); }\n\tSVector2D\toperator -  ( const SVector2D& e ) const { SVector2D tmp; tmp.x = x - e.x; tmp.y = y - e.y; return tmp; }\n\tSVector2D&\toperator -= ( const SVector2D& e ){ x -= e.x; y -= e.y; return (*this); }\n\tT\t\t\toperator *  ( const SVector2D& e ) const { return ( x * e.x ) + ( y * e.y ); }\n\tSVector2D&\toperator *= ( const int e ){ x *= e; y *= e; return (*this); }\n\tSVector2D&\toperator *= ( const float e ){ x *= e; y *= e; return (*this); }\n\tSVector2D&\toperator /= ( const int e ){ x /= e; y /= e; return (*this); }\n\tSVector2D&\toperator /= ( const float e ){ x /= e; y /= e; return (*this); }\n};\n\n//\u6570\u5b66\u95a2\u9023\u306e\u95a2\u6570\u7fa4.\nnamespace LMath\n{\n\tVECTOR::DataType GetScalar( VECTOR vec )\n\t{\n\t\treturn sqrtf( vec.x * vec.x + vec.y * vec.y );\n\t}\n\n\tVECTOR Normalize( VECTOR vec )\n\t{\n\t\tconst VECTOR::DataType vecLen = GetScalar( vec );\n\t\tvec.x /= vecLen;\n\t\tvec.y /= vecLen;\n\t\treturn vec;\n\t}\n\n\tVECTOR Normalize( VECTOR from, VECTOR to )\n\t{\n\t\tVECTOR tmp = to - from;\n\t\treturn Normalize( tmp );\n\t}\n\n\tfloat GetRotateRad( const float from, const float to )\n\t{\n\t\t//\u89d2\u5ea6\u5019\u88dc1.\n\t\tconst float dir1st\t\t= ( to - from );\n\t\tconst float dir1stVal\t= fabsf( dir1st );\n\n\t\t//\u89d2\u5ea6\u5019\u88dc2.\n\t\tconst float dir2ndVal\t= ( L_2PI - dir1stVal );\n\t\tconst float dir2nd\t\t= ((dir1st>=0.0f)?-1.0f:1.0f) * dir2ndVal;\n\t\t\t\n\t\t//\u7d76\u5bfe\u5024\u304c\u5c0f\u3055\u3044\u65b9\u3092\u63a1\u7528.\n\t\treturn ( dir1stVal > dir2ndVal ) ? dir2nd : dir1st;\n\t}\n\n\tbool IsCollisionCircle( const VECTOR& pos1, const VECTOR& pos2, const float r )\n\t{\n\t\tVECTOR tmp = pos1 - pos2;\n\t\treturn ( GetScalar( tmp ) < r );\n\t}\n};\n\n```\n\n#\u30e9\u30f3\u30c0\u30e0\u30e0\u30fc\u30d6\u30e1\u30f3\u30c8\n##\u6982\u8981\n\u76ee\u6a19\u5730\u70b9\u306b\u5411\u304b\u3063\u3066\u771f\u3063\u76f4\u3050\u9032\u3080\u7d4c\u8def\u63a2\u7d22\uff0e\n\u3053\u308c\u3060\u3051\u3060\u3068[LOS\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0](http://qiita.com/keny30827/items/8c7a8fdfac41a3dc72ff)\u3068\u540c\u3058\u3060\u304c\uff0c\u305d\u308c\u306b\u52a0\u3048\u3066\uff0c\n\u8996\u7dda\u4e0a\u306b\u969c\u5bb3\u7269\u304c\u3042\u3063\u305f\u5834\u5408\u306f\uff0c\u969c\u5bb3\u7269\u3092\u907f\u3051\u308b\u3088\u3046\u306b\u9069\u5f53\u306a\u65b9\u5411\u306b\u79fb\u52d5\u3059\u308b\uff0e\n\n##\u30b5\u30f3\u30d7\u30eb\n\n```cpp\nvoid Update( const float nowVel, VECTOR& nowPos, const VECTOR& targetPos )\n{\n\tconst VECTOR\tray\t\t\t\t= targetPos - nowPos;\n\tconst VECTOR\trayNormalVec\t= LMath::Normalize( ray );\n\tconst float\t\trayScalar\t\t= LMath::GetScalar( ray );\n\tconst float\t\tcheckRange\t\t= 20.0f;\n\n\tbool bRandomMove = false;\n\n\tVECTOR* obsArray = /*\u969c\u5bb3\u7269\u4f4d\u7f6e\u30ea\u30b9\u30c8*/;\n\tconst int obsNum = /*\u969c\u5bb3\u7269\u4f4d\u7f6e\u30ea\u30b9\u30c8\u30b5\u30a4\u30ba*/;\n\tfor( int i = 0; i < objNum; ++i ){\n\t\t//\u969c\u5bb3\u7269\u3068\u306e\u8ddd\u96e2.\n\t\tVECTOR disObs = obsArray[i] - nowPos;\n\n\t\t//\u8996\u7dda\u4e0a\u3078\u306e\u6b63\u5c04\u5f71.\n\t\t//(\u65b9\u5411\u30d9\u30af\u30c8\u30eb\u304c\u5358\u4f4d\u30d9\u30af\u30c8\u30eb\u3058\u3083\u306a\u3044\u3068\u6b63\u3057\u3044\u9577\u3055\u306f\u51fa\u306a\u3044).\n\t\tVECTOR checkProject = rayNormalVec;\n\t\tcheckProject *= ( disObs * rayNormalVec );\n\n\t\t//\u6b63\u5c04\u5f71\u306e\u65b9\u304c\u9577\u3044\u5834\u5408\u306f\uff0c\u305d\u3082\u305d\u3082\u30c1\u30a7\u30c3\u30af\u7bc4\u56f2\u306b\u5165\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u7121\u8996.\n\t\tconst float projectScalar = LMath::GetScalar( checkProject );\n\t\tif( rayScalar < projectScalar ){ continue; }\n\n\t\t//\u969c\u5bb3\u7269\u5468\u8fba\u3092\u5411\u3044\u3066\u3044\u306a\u3044\u5834\u5408\u3082\u7121\u8996.\n\t\tif( !LMath::IsCollisionCircle( checkProject, disObs, checkRange ) ){\n\t\t\tcontinue;\n\t\t}\n\n\t\tbRandomMove = true;\n\t\tbreak;\n\t}\n\n\tfloat dir = ADJUST_RAD( atan2f( -rayNormalVec.y, rayNormalVec.x ) );\n\tif( bRandomMove ){\n\t\t//\u969c\u5bb3\u7269\u304c\u3042\u308c\u3070\u9069\u5f53\u306a\u65b9\u5411\u306b\u30e9\u30f3\u30c0\u30e0\u79fb\u52d5\u3059\u308b.\n\t\tconst int angle = ( 60 );\n\t\tfloat displace = DEG2RAD( ( float  )( angle ) + ( float )( rand() % angle ) );\n\t\tif( rand() % 2 ){ displace *= -1.0f; }\n\n\t\tdir = ADJUST_RAD( dir + displace );\n\t}\n\n\tnowPos.x += nowVel * cosf( dir );\n\tnowPos.y += nowVel * -sinf( dir );\n}\n```\n\n\u6d41\u77f3\u306b\u5b8c\u5168\u30e9\u30f3\u30c0\u30e0\u3060\u3068\uff0c\u8996\u7dda\u304c\u901a\u308b\u307e\u3067\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u3067\uff0c\n\u5de6\u53f3\u00b130\u5ea6\u306e\u7bc4\u56f2\u3067\u30e9\u30f3\u30c0\u30e0\u306b\u5024\u3092\u6c7a\u5b9a\u3059\u308b\u3088\u3046\u306b\u3057\u305f\uff0e\n\n##\u6ce8\u610f\n\u969c\u5bb3\u7269\u304c\u5927\u91cf\u306b\u3042\u3063\u3066\u307b\u307c\u8996\u7dda\u304c\u901a\u3089\u306a\u3044\u3088\u3046\u306a\u30b1\u30fc\u30b9(\u5927\u90fd\u4f1a\u306e\u8857\u4e2d\u306a\u3069)\u3067\u306f\uff0c\n\u3042\u307e\u308a\u8ce2\u3044\u52d5\u304d\u306f\u3057\u306a\u3044\u306e\u3067\uff0c\u5225\u306e\u65b9\u6cd5\u3092\u6a21\u7d22\u3057\u305f\u65b9\u304c\u826f\u3044\uff0e\n\n##\u52d5\u4f5c\u72b6\u6cc1\n![random_move.gif](https://qiita-image-store.s3.amazonaws.com/0/31996/d640b74f-f7f8-77e6-7a6d-0a3e984b4c5b.gif)\n\n##\u611f\u60f3\n\u8ce2\u304f\u898b\u305b\u308b\u305f\u3081\u306b\u306f\uff0c\u30e9\u30f3\u30c0\u30e0\u79fb\u52d5\u3059\u308b\u90e8\u5206\u3092\u304b\u306a\u308a\u5de5\u592b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3068\u601d\u3046\uff0e\n\u4f7f\u3048\u308b\u30b1\u30fc\u30b9\u304c\u601d\u3044\u3064\u304b\u306a\u3044\uff0e\n\n#\u30d6\u30ec\u30c3\u30c9\u30af\u30e9\u30e0\u7d4c\u8def\u63a2\u7d22\n##\u6982\u8981\n\u76ee\u6a19\u304c\u901a\u3063\u305f\u7b87\u6240\u306b**\u30d1\u30f3\u304f\u305a(\u30d6\u30ec\u30c3\u30c9\u30af\u30e9\u30e0)**\u3092\u843d\u3068\u3057\uff0c\u305d\u308c\u3092\u8ffd\u8de1\u3059\u308b\u63a2\u7d22\u624b\u6cd5\uff0e\n\u3059\u3067\u306b\u76ee\u6a19\u304c\u901a\u3063\u305f\u7b87\u6240\u306a\u306e\u3067\uff0c\u969c\u5bb3\u7269\u306a\u3069\u3092\u6c17\u306b\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\uff0e\n**\u30d1\u30f3\u304f\u305a**\u3092\u767a\u898b\u3067\u304d\u3066\u3044\u306a\u3044\u6642\u306e\u884c\u52d5\u306f\uff0c\u72b6\u6cc1\u306b\u5fdc\u3058\u3066\u8abf\u6574\u3059\u308b\uff0e\n\n##\u30b5\u30f3\u30d7\u30eb\n\n```cpp\n#define BREAD_CRUMB_MAX_RANGE (60.0f)\n\n//\u30d1\u30f3\u304f\u305a\u3092\u843d\u3068\u3059.\u76ee\u6a19\u304c\u79fb\u52d5\u3057\u305f\u6642\u306b\u547c\u3073\u51fa\u3059.\nvoid DropBreadCrumb( const VECTOR& pos )\n{\n\t//\u30d1\u30f3\u304f\u305a\u96c6\u5408.\n\tVECTOR* breadArray = /*\u30d1\u30f3\u304f\u305a\u4f4d\u7f6e\u30ea\u30b9\u30c8*/;\n\tconst int breadNum = /*\u30d1\u30f3\u304f\u305a\u4f4d\u7f6e\u30ea\u30b9\u30c8\u30b5\u30a4\u30ba*/;\n\tif( !( breadArray && ( breadNum > 0 ) ) ){ return; }\n\n\t//\u6700\u8fd1\u843d\u3068\u3057\u305f\u30d1\u30f3\u304f\u305a\u3088\u308a\u4e00\u5b9a\u7bc4\u56f2\u96e2\u308c\u3066\u3044\u305f\u3089\u30d1\u30f3\u304f\u305a\u3092\u843d\u3068\u3059.\n\tif( LMath::IsCollisionCircle( breadArray[0], pos, BREAD_CRUMB_MAX_RANGE ) ){\n\t\treturn;\n\t}\n\n\t//\u5168\u30d1\u30f3\u304f\u305a\u306e\u9bae\u5ea6\u3092\u66f4\u65b0.\n\tfor( int i = breadNum - 1; i >= 1; --i ){\n\t\tbreadArray[i] = breadArray[i-1];\n\t}\n\n\t//\u65b0\u3057\u3044\u30d1\u30f3\u304f\u305a\u3092\u767b\u9332.\n\tbreadArray[0] = pos;\n}\n\n//\u30d1\u30f3\u304f\u305a\u3092\u5143\u306b\u4f4d\u7f6e\u3068\u65b9\u5411\u3092\u6c7a\u5b9a\u3059\u308b.\nVECTOR g_targetBread;\nvoid Update( VECTOR& nowPos, float& nowDir, const float nowVel )\n{\n\tconst float BREAD_COLLISION_RANGE = 15.0f;\n\n\t//\u3059\u3067\u306b\u5230\u7740\u3057\u3066\u3044\u308b\u306a\u3089\u7121\u52b9\u306b.\n\tif( g_targetBread.x >= 0.0f && g_targetBread.y >= 0.0f )\n\t{\n\t\tif( LMath::IsCollisionCircle( g_targetBread, nowPos, BREAD_COLLISION_RANGE ) ){\n\t\t\tg_targetBread.x = g_targetBread.y = -1.0f;\n\t\t}\n\t}\n\n\t//\u76ee\u6a19\u30d1\u30f3\u304f\u305a\u304c\u306a\u3044\u5834\u5408\u306f\u63a2\u3059.\n\tif( !( g_targetBread.x >= 0.0f && g_targetBread.y >= 0.0f ) )\n\t{\n\t\tVECTOR* breadArray = /*\u30d1\u30f3\u304f\u305a\u4f4d\u7f6e\u30ea\u30b9\u30c8*/;\n\t\tconst int breadNum = /*\u30d1\u30f3\u304f\u305a\u4f4d\u7f6e\u30ea\u30b9\u30c8\u30b5\u30a4\u30ba*/;\n\t\tfor( int i = 0; i < breadNum; ++i ){\n\t\t\tVECTOR breadPos = breadArray[i];\n\t\t\tif( !( breadPos.x >= 0.0f && breadPos.y >= 0.0f ) ){ continue; }\n\n\t\t\t//\u7bc4\u56f2\u5916\u306e\u3082\u306e\u306f\u5224\u5b9a\u304b\u3089\u5916\u3059.\n\t\t\tconst float r = BREAD_CRUMB_MAX_RANGE + ( BREAD_COLLISION_RANGE * 2.0f );\n\t\t\tif( !LMath::IsCollisionCircle( breadPos, nowPos, r ) ){\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tg_targetBread = breadPos;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif( g_targetBread.x >= 0.0f && g_targetBread.y >= 0.0f ){\n\t\t//\u76ee\u6a19\u30d1\u30f3\u304f\u305a\u304c\u3042\u308b\u306a\u3089\u30d1\u30f3\u304f\u305a\u306b\u5411\u304b\u3046.\n\t\t\n\t\t//\u76ee\u6a19\u65b9\u5411\u3078\u306e\u65b9\u5411\u30d9\u30af\u30c8\u30eb.\n\t\tVECTOR dirVec = LMath::Normalize( nowPos, g_targetBread );\n\t\t\n\t\t//\u89d2\u5ea6\u306b\u5909\u63db.\n\t\tnowDir = ADJUST_RAD( atan2f( -dirVec.y, dirVec.x ) );\n\t}\n\telse{\n\t\t//\u76ee\u6a19\u30d1\u30f3\u304f\u305a\u304c\u306a\u3044\u306a\u3089\uff0c\u30e9\u30f3\u30c0\u30e0\u3067\u79fb\u52d5.\n\n\t\t//\u4eca\u306e\u65b9\u5411\u00b130.0f\u306e\u7bc4\u56f2\u3092\u30e9\u30f3\u30c0\u30e0\u3067\u79fb\u52d5.\n\t\tconst float angle = 30.0f;\n\t\tfloat displace = DEG2RAD( angle );\n\t\tif( rand() % 2 ){ displace *= -1.0f; }\n\n\t\tnowDir = ADJUST_RAD( nowDir + displace );\n\t}\n\n\tnowPos.x += nowVel * cosf( nowDir );\n\tnowPos.y += nowVel * -sinf( nowDir );\n}\n```\n\n\u4eca\u56de\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\uff0c**\u30d1\u30f3\u304f\u305a**\u3092\u767a\u898b\u3067\u304d\u3066\u3044\u306a\u3044\u6642\u306e\u884c\u52d5\u306f\uff0c\n\u305d\u306e\u8fba\u3092\u3046\u308d\u3064\u304f\u3088\u3046\u306b\u3057\u3066\u3044\u308b\uff0e\n\n##\u6ce8\u610f\n**\u30d1\u30f3\u304f\u305a**\u306f\u6700\u65b0\u306e\u3082\u306e\u304b\u3089\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3053\u3068\u3067\uff0c\n\u53e4\u3044\u3082\u306e\u3068\u65b0\u3057\u3044\u3082\u306e\u304c\u4e26\u3093\u3067\u843d\u3061\u3066\u3044\u308b\u3088\u3046\u306a\u6642\u306b\uff0c\u65b0\u3057\u3044\u3082\u306e\u3092\u9078\u629e\u3057\u3066\u304f\u308c\u308b\uff0e\n\u3064\u307e\u308a\uff0c\u305f\u3060\u8ffd\u3046\u3060\u3051\u3067\u306f\u306a\u304f\uff0c\u53ef\u80fd\u306a\u3089\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\uff0e\n\u53e4\u3044\u3082\u306e\u304b\u3089\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3068\uff0c\u4f4d\u7f6e\u306b\u3088\u3063\u3066\u306f\u53e4\u3044**\u30d1\u30f3\u304f\u305a**\u306b\u5f15\u3063\u5f35\u3089\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\uff0e\n\n##\u52d5\u4f5c\u72b6\u6cc1\n\u30d1\u30f3\u306e\u7d75\u306f[GATAG](http://01.gatag.net/0008626-free-illustraition/)\u3055\u3093\u306e\u3082\u306e\u3092\uff0c\u4f7f\u7528\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\uff0e\n![bread_crumb.gif](https://qiita-image-store.s3.amazonaws.com/0/31996/39f303c0-8a21-6c2d-47ed-39ead541e45d.gif)\n\n##\u611f\u60f3\n**\u30d1\u30f3\u304f\u305a**\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\uff0c\u4f4d\u7f6e\u3060\u3051\u3067\u306f\u306a\u304f\uff0c\n\u8272\u3005\u306a\u60c5\u5831\u3092\u542b\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u305f\u3081\uff0c\u7d50\u69cb\u6c4e\u7528\u6027\u304c\u9ad8\u3044\uff0e\n\u5b9f\u969b\u306b\uff0cCEDEC2016\u3067\u767a\u8868\u3055\u308c\u305f[LOST REAVERS\u306b\u304a\u3051\u308bAI Director\u306e\u8a66\u307f](https://cedil.cesa.or.jp/cedil_sessions/view/1475)\u306b\u304a\u3044\u3066\uff0c\nAI\u7528\u306e\u60c5\u5831\u3068\u3057\u3066\u4f7f\u7528\u3057\u305f\u3068\u3044\u3046\u8a71\u304c\u51fa\u305f\uff0e\n\u5354\u8abf\u76ee\u7684\u3067\u6575\u304c\u843d\u3068\u3057\u305f\u308a\uff0c\u30de\u30c3\u30d7\u306b\u8db3\u8de1\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306b\u843d\u3068\u3057\u305f\u308a\uff0c\u8272\u3005\u4f7f\u3048\u305d\u3046\uff0e\n\n#\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\n##\u6982\u8981\n\u524d\u3082\u3063\u3066\uff0c\u30d5\u30a3\u30fc\u30eb\u30c9\u306b**\u7d4c\u8def\u4e0a\u306e\u5730\u70b9\u60c5\u5831(\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8)**\u3092\u57cb\u3081\u8fbc\u3093\u3067\u304a\u304d\uff0c\n\u76ee\u6a19\u5730\u70b9\u306b\u5411\u304b\u3046\u6642\u306b**\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8**\u3092\u7d4c\u7531\u3057\u3066\u79fb\u52d5\u3059\u308b\u624b\u6cd5\uff0e\n\n**\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8**\u306f\u969c\u5bb3\u7269\u306b\u5f15\u3063\u304b\u304b\u3089\u306a\u3044\u3088\u3046\u306b\u57cb\u3081\u8fbc\u3080\u305f\u3081\uff0c\n\u56de\u907f\u7b49\u306f\u8003\u3048\u306a\u304f\u3066\u826f\u3044\uff0e\n\n##\u30b5\u30f3\u30d7\u30eb\n\n```cpp\n#define WAY_POINT_MAX_NUM (20)\n#define INF_COST (1 << 28)\nint g_edgeCost[WAY_POINT_MAX_NUM ][WAY_POINT_MAX_NUM ];\nint g_shortestPath[WAY_POINT_MAX_NUM ][WAY_POINT_MAX_NUM ];\n\n//\u30b0\u30e9\u30d5\u751f\u6210.\nvoid CreateGraph()\n{\n\t//\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u751f\u6210.\n\t{\n\t\tVECTOR* waypointArray = /*\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u4f4d\u7f6e\u30ea\u30b9\u30c8*/;\n\t\tconst int waypointNum = /*\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u4f4d\u7f6e\u30ea\u30b9\u30c8\u30b5\u30a4\u30ba*/\n\t\tconst int POINT_NUM = 4;\n\t\tfor( int i = 0; i < waypointNum; ++i ){\n\t\t\tVECTOR pos;\n\t\t\tpos.x = 50.0f + ( 100.0f * (float)(i % POINT_NUM) );\n\t\t\tpos.y = 50.0f + ( 100.0f * (float)(i / POINT_NUM) );\n\t\t\twaypointArray[i] = pos;\n\t\t}\n\t}\n\n\t//\u30a8\u30c3\u30b8\u3092\u8a2d\u5b9a.\n\t{\n\t\t//\u521d\u671f\u5316.\n\t\tfor( int i = 0; i < WAY_POINT_MAX_NUM; ++i ){\n\t\t\tfor( int j = 0; j < WAY_POINT_MAX_NUM; ++j ){\n\t\t\t\tg_edgeCost[i][j] = INF_COST;\n\t\t\t}\n\t\t}\n\n\t\t//\u81ea\u8eab\u3078\u306e\u30b3\u30b9\u30c8\u306f\u306a\u3057.\n\t\tfor( int i = 0; i < WAY_POINT_MAX_NUM; ++i ){ g_edgeCost[i][i] = 0; }\n\n\t\t//\u624b\u4f5c\u696d\u3067\u30a8\u30c3\u30b8\u3092\u8a2d\u5b9a.\n\t\tg_edgeCost[0][1] = g_edgeCost[1][0] = 1;\n\t\tg_edgeCost[1][2] = g_edgeCost[2][1] = 1;\n\t\tg_edgeCost[2][3] = g_edgeCost[3][2] = 2;\n\t\t\n\t\tg_edgeCost[0][4] = g_edgeCost[4][0] = 1;\n\t\tg_edgeCost[1][5] = g_edgeCost[5][1] = 2;\n\t\tg_edgeCost[2][6] = g_edgeCost[6][2] = 1;\n\t\tg_edgeCost[3][7] = g_edgeCost[7][3] = 1;\n\n\t\tg_edgeCost[4][5] = g_edgeCost[5][4] = 1;\n\t\tg_edgeCost[5][6] = g_edgeCost[6][5] = 2;\n\t\tg_edgeCost[6][7] = g_edgeCost[7][6] = 1;\n\n\t\tg_edgeCost[4][8] = g_edgeCost[8][4] = 1;\n\t\tg_edgeCost[5][9] = g_edgeCost[9][5] = 2;\n\t\tg_edgeCost[6][10] = g_edgeCost[10][6] = 1;\n\t\tg_edgeCost[7][11] = g_edgeCost[11][7] = 1;\n\n\t\tg_edgeCost[8][9] = g_edgeCost[9][8] = 2;\n\t\tg_edgeCost[9][10] = g_edgeCost[10][9] = 1;\n\t\tg_edgeCost[10][11] = g_edgeCost[11][10] = 3;\n\n\t\tg_edgeCost[8][12] = g_edgeCost[12][8] = 1;\n\t\tg_edgeCost[9][13] = g_edgeCost[13][9] = 1;\n\t\tg_edgeCost[10][14] = g_edgeCost[14][10] = 3;\n\t\tg_edgeCost[11][15] = g_edgeCost[15][11] = 1;\n\n\t\tg_edgeCost[12][13] = g_edgeCost[13][12] = 1;\n\t\tg_edgeCost[13][14] = g_edgeCost[14][13] = 1;\n\t\tg_edgeCost[14][15] = g_edgeCost[15][14] = 1;\n\t}\n\n\t//\u5168\u70b9\u5bfe\u6700\u77ed\u7d4c\u8def\u3092\u6c42\u3081\u308b.\n\t{\n\t\t//\u30a8\u30c3\u30b8\u306e\u72b6\u614b\u3092\u307e\u3093\u307e\u30b3\u30d4\u30fc.\n\t\tfor( int i = 0; i < WAY_POINT_MAX_NUM; ++i ){\n\t\t\tfor( int j = 0; j < WAY_POINT_MAX_NUM; ++j ){\n\t\t\t\tg_shortestPath[i][j] = g_edgeCost[i][j];\n\t\t\t}\n\t\t}\n\n\t\t//\u30ef\u30fc\u30b7\u30e3\u30eb\u30d5\u30ed\u30a4\u30c9.\n\t\tfor( int k = 0; k < WAY_POINT_MAX_NUM; k++ ){\n\t\t\tfor( int i = 0; i < WAY_POINT_MAX_NUM; i++ ){\n\t\t\t\tfor( int j = 0; j < WAY_POINT_MAX_NUM; j++){\n\t\t\t\t\tconst int newValue = g_shortestPath[i][k] + g_shortestPath[k][j];\n\t\t\t\t\tg_shortestPath[i][j] = min( g_shortestPath[i][j], newValue );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n//\u6b21\u306b\u884c\u304f\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u3092\u53d6\u5f97.\nint GetNextNode( const int s, const int e )\n{\n\tfor( int i = 0; i < WAY_POINT_MAX_NUM; i++ ){\n\t\tif( i == s ){ continue; }\n\t\tif( g_edgeCost[s][i] + g_shortestPath[i][e] == g_shortestPath[s][e]) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\nint \tg_targetIndex;\nVECTOR \tg_targetWayPoint;\n\n//\u4f4d\u7f6e\u66f4\u65b0.\nvoid Update( VECTOR* nowPos, const float nowDir, const float nowVel, const VECTOR targetPos )\n{\n\tif( g_targetIndex < 0 ){\n\t\t//\u6700\u521d\u306e\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u304c\u898b\u3064\u304b\u3063\u3066\u3044\u306a\u3044\u306e\u3067\uff0c\u76f4\u8fd1\u306e\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u3092\u63a2\u3059.\n\t\tg_targetIndex\t\t= SearchNearestPoint( nowPos );\n\t\tg_targetWayPoint\t= GetWayPointPos( g_targetIndex );\n\t}\n\telse{\n\t\t//\u76ee\u6a19\u306e\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u306f\u898b\u3064\u304b\u3063\u3066\u3044\u308b\uff0e\n\n\t\tconst float RANGE_MAX = 15.0f;\n\t\tif( LMath::IsCollisionCircle( g_targetWayPoint, nowPos, RANGE_MAX ) ){\n\t\t\t//\u3059\u3067\u306b\u5230\u7740\u3057\u3066\u3044\u308b\u306e\u3067\uff0c\u6b21\u306e\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u3092\u63a2\u3059.\n\t\t\tconst int playerPoint = SearchNearestPoint( targetPos);\n\t\t\tg_targetIndex\t\t= GetNextNode( g_targetIndex, playerPoint );\n\t\t\tg_targetWayPoint\t= GetWayPointPos( g_targetIndex );\n\t\t}\n\t}\n\n\tif( g_targetWayPoint.x >= 0.0f && g_targetWayPoint.y >= 0.0f ){\n\t\t//\u76ee\u6a19\u5730\u70b9\u304c\u6709\u52b9\u306a\u3089\uff0c\u305d\u3053\u306b\u5411\u304b\u3046.\n\t\t\n\t\tVECTOR dirVec = LMath::Normalize( nowPos, g_targetWayPoint );\n\n\t\tnowDir = ADJUST_RAD( atan2f( -dirVec.y, dirVec.x ) );\n\n\t\tnowPos.x += nowVel * cosf( nowDir );\n\t\tnowPos.y += nowVel * -sinf( nowDir );\n\t}\n\n\tobj->SetNextPos( nowPos );\n}\n\n//\u6307\u5b9a\u4f4d\u7f6e\u304b\u3089\u4e00\u756a\u8fd1\u3044\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u3092\u63a2\u3059.\nint SearchNearestPoint( const VECTOR& pos )\n{\n\tVECTOR* waypointArray = /*\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u4f4d\u7f6e\u30ea\u30b9\u30c8*/;\n\tconst int waypointNum = /*\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u4f4d\u7f6e\u30ea\u30b9\u30c8\u30b5\u30a4\u30ba*/;\n\tif( !( waypointArray && ( waypointNum > 0 ) ) ){ return -1; }\n\n\t//\u8ddd\u96e2\u3067\u76f4\u8fd1\u304b\u3069\u3046\u304b\u5224\u65ad.\n\tint\t\tnextPoint\t= -1;\n\tfloat\tminDistance = (float)(1 << 30);\n\tfor( int i = 0; i < waypointNum; ++i ){\n\t\tconst float distance = LMath::GetScalar( waypointArray[i] - pos );\n\t\tif( distance > minDistance ){ continue; }\n\t\tminDistance = distance;\n\t\tnextPoint\t= i;\n\t}\n\n\treturn nextPoint;\n}\n\n//\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u306e\u4f4d\u7f6e\u3092\u53d6\u5f97.\nVECTOR\tGetWayPointPos( const int& index )\n{\n\tVECTOR tmp;\n\ttmp.x = tmp.y = -1.0f;\n\n\tVECTOR* waypointArray = /*\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u4f4d\u7f6e\u30ea\u30b9\u30c8*/;\n\tconst int waypointNum = /*\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u4f4d\u7f6e\u30ea\u30b9\u30c8\u30b5\u30a4\u30ba*/;\n\tif( !( waypointArray && ( waypointNum > 0 ) ) ){ return tmp; }\n\n\tif( 0 > index || index >= waypointNum ){ return tmp; }\n\n\treturn waypointArray[index];\n}\n\n```\n\n\u30b3\u30b9\u30c8\u30c7\u30fc\u30bf\u306f\u5916\u90e8\u30c7\u30fc\u30bf\u306b\u3059\u3079\u304d\u3060\u304c\uff0c\u4eca\u56de\u306f\u30cf\u30fc\u30c9\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u305f\uff0e\n\n\u6700\u77ed\u7d4c\u8def\u8a08\u7b97\u306f[\u30ef\u30fc\u30b7\u30e3\u30eb-\u30d5\u30ed\u30a4\u30c9\u6cd5](http://zeosutt.hatenablog.com/entry/2015/05/05/045943)\u3092\u4f7f\u7528\u3057\u305f\uff0e\n\u7d4c\u8def\u5fa9\u5143\u304c\u3067\u304d\u308b\u306a\u3089\uff0c\u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u3067\u3082\u30d9\u30eb\u30de\u30f3\u30d5\u30a9\u30fc\u30c9\u3067\u3082SPFA\u3067\u3082\u4f55\u3067\u3082\u826f\u3044\uff0e\n\u306a\u304a\uff0c\u6b21\u56de\u8a18\u4e8b\u306b\u3066\uff0c\u3088\u308a\u52b9\u7387\u7684\u306a\u6700\u77ed\u7d4c\u8def\u8a08\u7b97\u3067\u3042\u308bA*\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7d39\u4ecb\u3059\u308b\u4e88\u5b9a\u3067\u3042\u308b\uff0e\n\n##\u6ce8\u610f\n\u30b3\u30b9\u30c8\u30c7\u30fc\u30bf\u306f\uff0c\u5145\u5206\u306b\u5927\u304d\u3044\u521d\u671f\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\uff0e\n\u305f\u3060\u3057\uff0c\u6700\u77ed\u7d4c\u8def\u8a08\u7b97\u6642\u306b\u52a0\u7b97\u51e6\u7406\u304c\u3042\u308b\u306e\u3067\uff0c\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3057\u306a\u3044\u3088\u3046\u306b\u6ce8\u610f\uff0e\n\u307e\u305f\uff0c\u5404\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u306b\u304a\u3044\u3066\uff0c\u81ea\u8eab\u3078\u306e\u30b3\u30b9\u30c8\u306f0\u306b\u8a2d\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\uff0e\n\n##\u52d5\u4f5c\u72b6\u6cc1\n![waypoint.gif](https://qiita-image-store.s3.amazonaws.com/0/31996/862b9845-7a8d-03a9-0cf0-1a0d5bc8cce6.gif)\n\n\u8349\u3080\u3089\u3063\u307d\u3044\u7d75\u3067\u53e5\u5207\u3089\u308c\u3066\u3044\u308b\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u9593\u306e\u30b3\u30b9\u30c8\u306f\u9ad8\u304f\u8a2d\u5b9a\u3057\u3066\u3042\u308b\uff0e\n\u305d\u306e\u305f\u3081\uff0c\u9060\u56de\u308a\u3057\u305f\u65b9\u304c\u6700\u77ed\u306b\u306a\u308b\u3068\u5224\u65ad\u3057\u3066\u3044\u308b\uff0e\n\n##\u611f\u60f3\n\u5358\u7d14\u306a\u4ed5\u7d44\u307f\u3067\u306f\u3042\u308b\u3082\u306e\u306e\uff0c\u7d50\u69cb\u8ce2\u304f\u898b\u3048\u308b\uff0e\n\u4eca\u56de\u306f\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u306e\u751f\u6210\u3084\u30b3\u30b9\u30c8\u306e\u8a2d\u5b9a\u3092\u9759\u7684\u306b\u884c\u3063\u3066\u3044\u308b\u304c\uff0c\n\u6700\u8fd1\u306e\u30b2\u30fc\u30e0\u696d\u754c\u3067\u306f\uff0c\u52d5\u7684\u306b\u884c\u3063\u3066\u3044\u308b\u3088\u3046\u3060\uff0e\n\u305d\u306e\u969b\u306b\u306f\uff0c\u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30e1\u30c3\u30b7\u30e5\u306a\u3069\u3092\u53c2\u7167\u3057\u3066\uff0c\u969c\u5bb3\u7269\u304c\u306a\u3044\u3053\u3068\u3092\u4fdd\u8a3c\u3059\u308b\uff0e\n\u307e\u305f\uff0cCEDEC2016\u3067\u767a\u8868\u3055\u308c\u305f[\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u306e\u4eba\u5de5\u77e5\u80fd\u306e\u305f\u3081\u306e\u6226\u8853\u4f4d\u7f6e\u89e3\u6790\u30b7\u30b9\u30c6\u30e0](http://cedec.cesa.or.jp/2016/session/ENG/5264.html)\u306b\u3088\u308c\u3070\uff0c\n\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u306e\u52d5\u7684\u751f\u6210\u3092\u4f7f\u7528\u3057\u3066\uff0c\u3088\u308a\u9ad8\u5ea6\u3067\u6c4e\u7528\u7684\u306a\u4f4d\u7f6e\u89e3\u6790\u3092\u884c\u3063\u3066\u3044\u308b\u3068\u306e\u3053\u3068.\n\u73fe\u5728\u306e\u30b2\u30fc\u30e0AI\u6280\u8853\u306b\u304a\u3044\u3066\uff0c\u304b\u306a\u308a\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u624b\u6cd5\u3067\u3042\u308b\uff0e\n\n#\u7d39\u4ecb\u3060\u3051\n##\u30a6\u30a9\u30fc\u30eb\u30c8\u30ec\u30fc\u30b7\u30f3\u30b0\n\u73fe\u5728\u306e\u65b9\u5411\u3092\u57fa\u6e96\u306b\uff0c\u5de6\u65b9\uff0c\u524d\u65b9\uff0c\u53f3\u65b9\uff0c\u5f8c\u65b9\u3068\u3044\u3046\u9806\u306b\u79fb\u52d5\u5148\u3092\u30c1\u30a7\u30c3\u30af\u3057\uff0c\n\u79fb\u52d5\u3067\u304d\u308b\u65b9\u5411\u304c\u3042\u308c\u3070\uff0c\u305d\u3061\u3089\u306b\u79fb\u52d5\u3059\u308b\u3068\u3044\u3046\u624b\u6cd5\uff0e\n\n\u5e83\u3044\u7a7a\u9593\u304c\u5927\u91cf\u306e\u5c0f\u90e8\u5c4b\u3067\u533a\u5207\u3089\u308c\u3066\u3044\u308b\uff0c\u3068\u3044\u3063\u305f\u30b1\u30fc\u30b9\u306b\u304a\u3044\u3066\uff0c\n\u58c1\u6cbf\u3044\u306b\u79fb\u52d5\u3059\u308b\u3053\u3068\u3067\uff0c\u5168\u5c0f\u90e8\u5c4b\u3092\u8a2a\u554f\u3067\u304d\u308b\u3068\u3044\u3046\u5f37\u307f\u304c\u3042\u308b\uff0e\n\n\u305f\u3060\u3057\uff0c\u6700\u521d\u306b\u914d\u7f6e\u3055\u308c\u305f\u5834\u6240\u304c\u58c1\u6cbf\u3044\u3058\u3083\u306a\u3044\u5834\u5408\u306f\uff0c\n\u307e\u305a\u58c1\u6cbf\u3044\u306b\u79fb\u52d5\u3059\u308b\u624b\u6bb5\u304c\u5fc5\u8981\u306b\u306a\u308b\uff0e\n\n\u307e\u305f\uff0c\u58c1\u304c\u7e4b\u304c\u3063\u3066\u3044\u306a\u3044\u5834\u6240\u304c\u3042\u308b\u30b1\u30fc\u30b9\u306a\u3069\uff0c\u5168\u8a2a\u554f\u3067\u304d\u306a\u3044\u30b1\u30fc\u30b9\u3082\u3042\u308b\uff0e\n\n#\u7dcf\u62ec\n\u7d4c\u8def\u63a2\u7d22\u306e\u7d39\u4ecb\u3060\u3063\u305f\u304c\uff0c**\u30d1\u30f3\u304f\u305a**\u3084**\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8**\u306a\u3069\uff0c\n\u7d4c\u8def\u63a2\u7d22\u4ee5\u5916\u306b\u3082\u6d3b\u7528\u3067\u304d\u308b\u6982\u5ff5\u3082\u3042\u308b\u306e\u3067\uff0c\u3057\u3063\u304b\u308a\u6d3b\u7528\u3057\u3066\u3044\u304f\u5fc5\u8981\u304c\u3042\u308a\u305d\u3046\uff0e\n", "tags": ["AI", "\u30b2\u30fc\u30e0", "C++"]}