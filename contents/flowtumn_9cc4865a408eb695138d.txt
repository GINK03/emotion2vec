{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u30c7\u30fc\u30bf\u3092\u6271\u3046\u6642\u3001\u3069\u306e\u3088\u3046\u306alock\u3092\u3057\u3066\u3044\u307e\u3059\u304b\uff1f\nlock\u3059\u308b\u6642\u9593\u304c\u5c11\u3057\u3067\u3082\u9577\u3044\u3060\u3051\u3067\n\u30d7\u30ed\u30b0\u30e9\u30e0\u5168\u4f53\u306e\u901f\u5ea6\u306e\u4f4e\u4e0b\u3092\u62db\u304f\u305f\u3081\u3001lock\u306f\u975e\u5e38\u306b\u96e3\u3057\u3044\u3067\u3059\u306d\u3002\nhttp://qiita.com/episteme/items/9e6e17512ecadb2ccb40\n\u9762\u767d\u3044\u8a18\u4e8b\u3092\u62dd\u898b\u3057\u3001\u52b9\u7387\u306e\u826f\u3044Lock\u3067\u30c7\u30fc\u30bf\u3092\u6271\u3046\u3068\n\u3069\u308c\u3050\u3089\u3044\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306b\u9055\u3044\u304c\u3042\u308b\u306e\u304b\u306a\u3068\u6c17\u306b\u306a\u308a\n\u305d\u308c\u3092\u691c\u8a3c\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u82e5\u5e72\u30b3\u30fc\u30c9\u304c\u591a\u3081\u3067\u3059(\u3002\u3002\n\u3053\u306e\u8a18\u4e8b\u3067\u306e\u666e\u901a\u306eLock\u3068\u306f\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306e\u4e8b\u3092\u6307\u3057\u3066\u3044\u307e\u3059\u3002\n\u7d14\u7c8b\u306block\u304c\u53d6\u308c\u308b\u307e\u3067block\u3059\u308b\u30b3\u30fc\u30c9\u3067\u3059\u306d\u3002\nstd::lock_guard<decltype(mtx)> l(mtx);\n\u7d50\u679c\u3060\u3051\u5148\u306b\u77e5\u308a\u305f\u3044\u65b9\u306f\u2193\u306b\u884c\u3063\u3066\u3057\u307e\u3063\u3066\u4e0b\u3055\u3044\uff01\n\n\u6e2c\u5b9a\u306e\u6982\u8981\n\n\u6e2c\u5b9a\u306b\u306f\u4ee5\u4e0b\u306e\u30eb\u30fc\u30eb\u3067\u884c\u3044\u307e\u3059\u3002\n\n1.concurrent_queue\u3092\u7528\u610f\u3057\u3001\u6e2c\u5b9a\u524d\u306bthread-safe\u306a\u306e\u304b\u691c\u8a3c\u3002\n2.concurrent_queue\u306b\u5bfe\u3057\u3066\u3001\u8907\u6570\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u30c7\u30fc\u30bf\u306epush/pop\u3092\u7e70\u308a\u8fd4\u3057\u3001\u305d\u306e\u56de\u6570\u3092\u30b9\u30b3\u30a2\u3068\u3057\u3066\u6271\u3046\u3002\n3.\u6e2c\u5b9a\u6642\u9593\u306f5\u79d2\u3068\u3057\u3066\u30013\u56de\u884c\u3046\u3002\n\n\nconcurrent_queue\u306e\u5b9f\u88c5\n\n\u4eca\u56de\u306f\u666e\u901a\u306elock\u3068\u3001\u52b9\u7387\u306e\u826f\u3044lock\u3092\u6bd4\u8f03\u3059\u308b\u306e\u3067\nlock\u306b\u95a2\u3057\u3066\u62bd\u8c61\u30af\u30e9\u30b9\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n\nILock\nstruct ILock {\n    virtual bool lock() = 0;\n    virtual void unlock() = 0;\n};\n\n\n\u30b9\u30b3\u30fc\u30d7\u3092\u629c\u3051\u305f\u3089\u52dd\u624b\u306bunlock\u3055\u308c\u3066\u6b32\u3057\u3044\u3067\u3059\u306d\u3002\n\u306a\u306e\u3067\u4ee5\u4e0b\u306ehelper\u3082\u8ffd\u52a0\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\nreleaser\nstruct releaser {\n    using release_func = std::function <void()>;\n    releaser(release_func f) : f_(std::move(f)) {}\n    ~releaser() {\n        if (f_) {\n            f_();\n        }\n    }\n\n    operator bool() const {\n        return (f_) ? true : false;\n    }\n    release_func f_;\n};\n\n\n\u6b21\u306bconcurrent_queue\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\nconcurrent_queue\ntemplate <typename T, typename L>\nclass concurrent_queue {\n    static_assert(std::is_base_of <flowTumn::ILock, L>::value, \"L must be a descendant of ILock.\");\n\npublic:\n    enum struct Result {\n        Success,\n        Failed,\n        Empty,\n        Timeout,\n    };\n\n    // lock\u3092RAII\u306b\u3002\n    struct locker {\n        releaser lock() {\n            if (l_.lock()) {\n                return{ [this]{ l_.unlock(); } };\n            }\n            else {\n                return{ nullptr };\n            }\n        }\n        L l_;\n    } lock_controller;\n\n    concurrent_queue() = default;\n\n    //queue\u306b\u30c7\u30fc\u30bf\u3092\u8a70\u3081\u8fbc\u307f\u3002\n    Result push(const T& v) {\n        for (;;) {\n            if (auto l = lock_controller.lock()) {\n                queue_.push(v);\n                return Result::Success;\n            }\n            std::this_thread::sleep_for(std::chrono::milliseconds(1));\n        }\n        return Result::Failed;\n    }\n\n    //f\u304b\u3089\u53d6\u308a\u51fa\u3057\u305f\u30c7\u30fc\u30bf\u3092queue\u306b\u8a70\u3081\u8fbc\u307f\u3002\n    Result push(std::function <T()> f) {\n        for (;;) {\n            if (auto l = lock_controller.lock()) {\n                queue_.push(f());\n                return Result::Success;\n            }\n            std::this_thread::sleep_for(std::chrono::milliseconds(1));\n        }\n        return Result::Failed;\n    }\n\n    //queue\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3002\n    std::pair <Result, T> pop() {\n        for (;;) {\n            if (auto l = lock_controller.lock()) {\n                if (0 < queue_.size()) {\n                    auto r = queue_.front();\n                    queue_.pop();\n                    return{ Result::Success, r };\n                } else {\n                    return{ Result::Empty, {} };\n                }\n            }\n            std::this_thread::sleep_for(std::chrono::milliseconds(1));\n        }\n        return{ Result::Failed, {} };\n    }\n\nprivate:\n    std::queue <T> queue_;\n};\n\n\n\u4ee5\u4e0a\u3067\u4eca\u56de\u306b\u4f7f\u7528\u3059\u308bconcurrent_queue\u306e\u5b8c\u6210\u3067\u3059\u3002\nconcurrent_queue\u306f\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3067ILock\u3092\u6e21\u3057\u3066\u3082\u3089\u3044\n\u305d\u308c\u306b\u5bfe\u3057\u3066lock\u3092\u884c\u3044\u3001\u6210\u529f\u304c\u8fd4\u3055\u308c\u305f\u3089\n\u30c7\u30fc\u30bf\u3092push/pop\u3059\u308b\u3068\u3044\u3063\u305f\u4f5c\u308a\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u3053\u306econcurrent_queue\u3092\u7528\u3044\u3066\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u6e2c\u5b9a\u3057\u3066\u307f\u307e\u3059\u3002\n\nLock\u306e\u65b9\u5f0f\n\n\u3055\u3066\u4eca\u56de\u306e\u30e1\u30a4\u30f3\u3067\u3059\u306d\u3002\nILock#lock\u306e\u4e2d\u3067\u7d14\u7c8b\u306bmutex\u3092lock\u3057\u3066\u3057\u307e\u3063\u3066\u3082\u69cb\u3044\u307e\u305b\u3093\u3057\n\u5225\u306e\u3084\u308a\u65b9\u3067lock\u3092\u3057\u3066\u3082\u826f\u3044\u3067\u3059\u3002\n\u3068\u306b\u304b\u304flock\u51fa\u6765\u305f\u4e8b\u3060\u3051\u3092\u8fd4\u305b\u3070\u826f\u3044\u306e\u3067\n\u4ee5\u4e0b\u306e3\u30d1\u30bf\u30fc\u30f3\u306eILock\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\nLockImplement\n//\u666e\u901a\u306elock\u3002mutex\u3092lock\u3067\u304d\u308b\u307e\u3067block\u3057\u307e\u3059\u3002\nstruct lockNormal : public ILock {\n    bool lock() override {\n        mutex_.lock();\n        return true;\n    }\n    void unlock() override {\n        mutex_.unlock();\n    }\n    std::mutex mutex_;\n};\n\n//block\u305b\u305a\u306block\u3092\u7372\u5f97\u3002\nstruct lockTry : public ILock {\n    bool lock() override {\n        return mtx_.try_lock();\n    }\n    void unlock() override{\n        mtx_.unlock();\n    }\n    std::mutex mtx_;\n};\n\n//atomic<bool>\u3092\u7528\u3044\u3066true\u306b\u5909\u66f4\u3067\u304d\u305f\u3089\u6210\u529f\u3002\nstruct lockWeak : public ILock {\n    bool lock() override {\n        bool expected = false;\n        bool desired = true;\n        return flg_.compare_exchange_weak(expected, desired);\n    }\n    void unlock() override {\n        flg_ = false;\n    }\n    std::atomic <bool> flg_{ false };\n};\n\n\n\u4ee5\u4e0a\u3092\u6301\u3063\u3066\u3001concurrent_queue\u306f\u4ee5\u4e0b\u306e\u7528\u306b\u3057\u3066\u4f7f\u3046\u4e8b\u304c\u51fa\u6765\u308b\u69d8\u306b\u306a\u308a\u307e\u3057\u305f\u3002\nauto q = concurrent_queue <int64_t, lockNormal>{};\n\u5f8c\u306f3\u30d1\u30bf\u30fc\u30f3\u306elock\u3092\u4f7f\u3063\u3066\u6e2c\u5b9a\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\n\u6e2c\u5b9a\u306e\u5b9f\u88c5\n\n\u6e2c\u5b9a\u524d\u306b\u3001\u6e2c\u5b9a\u306e\u5b9f\u88c5\u306b\u306a\u308a\u307e\u3059\u3002\n\u30b3\u30fc\u30c9\u3070\u304b\u308a\u3067\u7533\u3057\u8a33\u3042\u308a\u307e\u305b\u3093(..\nqueue\u304c\u304d\u3061\u3093\u3068thread-safe\u306a\u306e\u304b\u3092\u691c\u8a3c\u3057\u305f\u5f8c\u306b\u30b9\u30b3\u30a2\u3092\u6e2c\u308a\u307e\u3059\u3002\n\nperfomance\ntemplate <typename T, typename Lock, typename F>\nuint64_t queue_tester(\n    F gen,\n    uint32_t createGenCount,\n    std::function <void(T)> notify,\n    uint32_t createNotifyCount,\n    std::chrono::milliseconds timeout) {\n    using queue_type = concurrent_queue <int64_t, Lock>;\n\n    auto queue = queue_type{};\n    auto counter = std::atomic <uint64_t> {0};\n    std::atomic <bool> g{ false };\n    std::vector <std::thread> thr;\n\n    auto push = [&gen, &queue, &counter, &g]() {\n        while (!g) {}\n        while (g) {\n            queue.push(gen());\n            ++counter;\n        }\n    };\n\n    auto pop = [&notify, &g, &counter, &queue]() {\n        while (!g) {}\n        while (g) {\n            auto r = queue.pop();\n            if (r.first == queue_type::Result::Success) {\n                notify(r.second);\n            }\n            ++counter;\n        }\n    };\n\n    std::generate_n(std::back_inserter(thr), createGenCount, [push] { return std::thread{ push }; });\n    std::generate_n(std::back_inserter(thr), createNotifyCount, [pop] { return std::thread{ pop }; });\n\n    g = !g;\n    std::this_thread::sleep_for(timeout);\n    g = !g;\n\n    for (auto& elem : thr) {\n        elem.join();\n    }\n\n    return counter.load();\n}\n\n//queue\u304cthread safe\u306a\u306e\u304b\u3092\u691c\u8a3c\u3057\u307e\u3059\u3002\ntemplate <typename L>\nbool checkQueue() {\n    auto v1 = std::atomic <int64_t> {0};\n    auto v2 = std::atomic <int64_t> {0};\n    auto result = std::atomic <bool> {true};\n\n    //cpu\u306e\u30b3\u30a2\u6570\u5206\u8a70\u3081\u308b\u51e6\u7406\u3092\u8ffd\u52a0\u3057\u3001pop\u3057\u305f\u30c7\u30fc\u30bf\u3092\u691c\u8a3c\u3059\u308b\u306e\u306f\u4e00\u3064\u304c\u62c5\u3046\u3002\n    queue_tester <int64_t, L>(\n        [&v1] {\n#if 1\n            //\u691c\u8a3c\u3059\u308b\u30c7\u30fc\u30bf\u3092\u751f\u6210\u3059\u308bfunction\u3092\u8fd4\u3059\u3002(\u3053\u306e\u51e6\u7406\u306flock\u3055\u308c\u305f\u5f8c\u306b\u547c\u3070\u308c\u308b\u3002)\n            return std::function <int64_t()> {\n                [&v1] {\n                    ++v1;\n                    return v1.load();\n                }\n            };\n#else\n            // \u8a70\u3081\u308b\u30b9\u30ec\u30c3\u30c9\u304c\u8907\u6570\u306a\u3089\u3001\u8a70\u3081\u3089\u308c\u308b\u5024\u306f\u30d0\u30e9\u30d0\u30e9\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3002\n            ++v1;\n            return v1.load();\n#endif\n        },\n        std::thread::hardware_concurrency(),\n        [&v2, &result](int64_t n) {\n            //queue\u304b\u3089\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u306e\u901a\u77e5\u3092\u53d7\u3051\u691c\u8a3c\u3059\u308b\u3002\n            ++v2;\n            if (v2.load() != n) {\n                result = false;\n                assert(false && \"queue is bug.\");\n            }\n        },\n        1,\n        std::chrono::seconds(5)\n    );\n\n    return result.load();\n}\n\n//\u30b9\u30b3\u30a2\u3092\u8a08\u6e2c\u3002\ntemplate <typename Lock>\nuint64_t score() {\n    const auto core = std::max <uint32_t> (std::thread::hardware_concurrency() >> 1, 1);\n    return queue_tester <uint64_t, Lock>(\n        [] {\n            //\u597d\u304d\u306a\u5024\u3067\u8a70\u3081\u308b\u3002\u91cd\u8981\u306a\u306e\u306f\u547c\u3070\u308c\u305f\u56de\u6570\u3002\n            return 1234;\n        },\n        core,\n        [](uint64_t) {\n            //pop\u3057\u305f\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u3066\u3082\u4f55\u3082\u3057\u306a\u3044\u3002\u91cd\u8981\u306a\u306e\u306f\u547c\u3070\u308c\u305f\u56de\u6570\u3002\n        },\n        core,\n        std::chrono::seconds(5)\n    );\n}\n\n//\u5e73\u5747\u3092\u7b97\u51fa\ntemplate <typename F, typename FN>\nauto avg(F f, uint32_t count, FN notify) -> decltype(f()) {\n    auto r = decltype(f()){};\n    for (auto i = UINT32_C(0); i < count; ++i) {\n        auto rr = f();\n        notify(rr);\n        r += rr;\n    }\n    return r / count;\n}\n\n\n\n\u3075\u3046\u2026\u2026\u5b8c\u6210\u3067\u3059\u3002\n\u6700\u5f8c\u306e\u4e00\u632f\u308a\u306f\n\u691c\u8a3c\u3068\u7d50\u679c\u306e\u51fa\u529b\u3092\u30de\u30af\u30ed\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\nscore\n//\u30ad\u30e5\u30fc\u3092\u691c\u8a3c\u3057\u305f\u5f8c\u306b\u30b9\u30b3\u30a2\u3092\u8a08\u6e2c\u3002\n#define SCORE(lock, count) \\\n    std::cout << \"TargetLock => \" << \"\"#lock\"\"  << std::endl; \\\n    if (checkQueue<lock>()) { \\\n        std::cout << \"\\t\" << \"checkQueue: Success.\" << std::endl; \\\n        std::cout << \"\\t\" << \"Score(Avg): \" << avg(score<lock>, count, [](decltype(score<lock>()) score) { std::cout << \"\\t\\t\" << \"Score: \" << score << std::endl; }) << std::endl; \\\n    } else {  \\\n        std::cout << \"\\t\" << \"checkQueue: Failed.\" << std::endl; \\\n    } \\\n    std::cout << std::endl;\n\n\n\n\u6e2c\u5b9a & \u7d50\u679c\n\n\u3055\u3066\u3055\u3066\u3001\u5b9f\u969b\u306b\u30b9\u30b3\u30a2\u3092\u8a08\u6e2c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\ntest\nint main() {\n    const auto TEST_COUNT = 3;\n\n    //\u30b9\u30b3\u30a2\u3092\u8a08\u6e2c\u3002lock\u306e\u5b9f\u88c5\u304c\u4e0d\u5341\u5206\u3060\u3068\u691c\u8a3c\u3067\u5f3e\u304b\u308c\u308b\u3002\n    SCORE(lockNormal, TEST_COUNT);\n    SCORE(lockTry, TEST_COUNT);\n    SCORE(lockWeak, TEST_COUNT);\n    return 0;\n}\n\n\n\u79c1\u306e\u958b\u767a\u30de\u30b7\u30f3\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\n(CPU: i7-2600k\u3001Win7\u3001VC2013 Release Build)\n1: Test timeout computed to be: 9.99988e+006\n1: TargetLock => lockNormal\n1:  checkQueue: Success.\n1:      Score: 11758106\n1:      Score: 9432942\n1:      Score: 13260581\n1:  Score(Avg): 11483876\n1: \n1: TargetLock => lockTry\n1:  checkQueue: Success.\n1:      Score: 48652518\n1:      Score: 49120617\n1:      Score: 48946418\n1:  Score(Avg): 48906517\n1: \n1: TargetLock => lockWeak\n1:  checkQueue: Success.\n1:      Score: 80397898\n1:      Score: 80919271\n1:      Score: 81028361\n1:  Score(Avg): 80781843\n1: \n1/1 Test #1: test .............................   Passed   64.01 sec\n\n\u304a\u304a\u3001\u51c4\u3044\u7d50\u679c\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3002\n\u6298\u89d2\u306a\u306e\u3067\u30b0\u30e9\u30d5\u306b\u3082\u3057\u3066\u307f\u307e\u3059\u3002\n\natomic <bool>\u6050\u308b\u3079\u3057\u2026\n\u8abf\u3079\u308b\u3068CPU\u547d\u4ee4\u3067\u6bd4\u8f03\u3068\u5024\u306e\u4ea4\u63db\u3092\u884c\u3063\u3066\u3044\u308b\u3093\u3067\u3059\u306d\u3002(CAS)\nhttp://qiita.com/kmikmy/items/0a7324cc50fd40470407\nhttp://cpprefjp.github.io/reference/atomic/atomic/compare_exchange_weak.html\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u4eca\u56de\u306e\u8a18\u4e8b\u306b\u4f5c\u6210\u3057\u305f\u30bd\u30fc\u30b9\u4e00\u5f0f\u3067\u3059\u3002\nhttps://github.com/flowtumn/lock_performance\n\ntravis-ci\u3067\u306e\u6e2c\u5b9a\u7d50\u679c(linux/osx)\n2015/12/18 travis-ci\u3067\u8a08\u6e2c\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\n# \u306f\u3058\u3081\u306b\n\n\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u30c7\u30fc\u30bf\u3092\u6271\u3046\u6642\u3001\u3069\u306e\u3088\u3046\u306alock\u3092\u3057\u3066\u3044\u307e\u3059\u304b\uff1f\n\nlock\u3059\u308b\u6642\u9593\u304c\u5c11\u3057\u3067\u3082\u9577\u3044\u3060\u3051\u3067\n\u30d7\u30ed\u30b0\u30e9\u30e0\u5168\u4f53\u306e\u901f\u5ea6\u306e\u4f4e\u4e0b\u3092\u62db\u304f\u305f\u3081\u3001lock\u306f\u975e\u5e38\u306b\u96e3\u3057\u3044\u3067\u3059\u306d\u3002\n\nhttp://qiita.com/episteme/items/9e6e17512ecadb2ccb40\n\u9762\u767d\u3044\u8a18\u4e8b\u3092\u62dd\u898b\u3057\u3001\u52b9\u7387\u306e\u826f\u3044Lock\u3067\u30c7\u30fc\u30bf\u3092\u6271\u3046\u3068\n\u3069\u308c\u3050\u3089\u3044\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306b\u9055\u3044\u304c\u3042\u308b\u306e\u304b\u306a\u3068\u6c17\u306b\u306a\u308a\n\n\u305d\u308c\u3092\u691c\u8a3c\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u82e5\u5e72\u30b3\u30fc\u30c9\u304c\u591a\u3081\u3067\u3059(\u3002\u3002\n\n\u3053\u306e\u8a18\u4e8b\u3067\u306e\u666e\u901a\u306eLock\u3068\u306f\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306e\u4e8b\u3092\u6307\u3057\u3066\u3044\u307e\u3059\u3002\n\u7d14\u7c8b\u306block\u304c\u53d6\u308c\u308b\u307e\u3067block\u3059\u308b\u30b3\u30fc\u30c9\u3067\u3059\u306d\u3002\n`std::lock_guard<decltype(mtx)> l(mtx);`\n\n\u7d50\u679c\u3060\u3051\u5148\u306b\u77e5\u308a\u305f\u3044\u65b9\u306f\u2193\u306b\u884c\u3063\u3066\u3057\u307e\u3063\u3066\u4e0b\u3055\u3044\uff01\n\n# **\u6e2c\u5b9a\u306e\u6982\u8981**\n\n\u6e2c\u5b9a\u306b\u306f\u4ee5\u4e0b\u306e\u30eb\u30fc\u30eb\u3067\u884c\u3044\u307e\u3059\u3002\n\n- 1.concurrent_queue\u3092\u7528\u610f\u3057\u3001\u6e2c\u5b9a\u524d\u306bthread-safe\u306a\u306e\u304b\u691c\u8a3c\u3002\n- 2.concurrent_queue\u306b\u5bfe\u3057\u3066\u3001\u8907\u6570\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u30c7\u30fc\u30bf\u306epush/pop\u3092\u7e70\u308a\u8fd4\u3057\u3001\u305d\u306e\u56de\u6570\u3092\u30b9\u30b3\u30a2\u3068\u3057\u3066\u6271\u3046\u3002\n- 3.\u6e2c\u5b9a\u6642\u9593\u306f5\u79d2\u3068\u3057\u3066\u30013\u56de\u884c\u3046\u3002\n\n# **concurrent_queue\u306e\u5b9f\u88c5**\n\n\u4eca\u56de\u306f\u666e\u901a\u306elock\u3068\u3001\u52b9\u7387\u306e\u826f\u3044lock\u3092\u6bd4\u8f03\u3059\u308b\u306e\u3067\nlock\u306b\u95a2\u3057\u3066\u62bd\u8c61\u30af\u30e9\u30b9\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n\n```C++:ILock\nstruct ILock {\n    virtual bool lock() = 0;\n    virtual void unlock() = 0;\n};\n```\n\n\u30b9\u30b3\u30fc\u30d7\u3092\u629c\u3051\u305f\u3089\u52dd\u624b\u306bunlock\u3055\u308c\u3066\u6b32\u3057\u3044\u3067\u3059\u306d\u3002\n\u306a\u306e\u3067\u4ee5\u4e0b\u306ehelper\u3082\u8ffd\u52a0\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```C++:releaser\nstruct releaser {\n\tusing release_func = std::function <void()>;\n\treleaser(release_func f) : f_(std::move(f)) {}\n\t~releaser() {\n\t\tif (f_) {\n\t\t\tf_();\n\t\t}\n\t}\n\n\toperator bool() const {\n\t\treturn (f_) ? true : false;\n\t}\n\trelease_func f_;\n};\n```\n\n\u6b21\u306bconcurrent_queue\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\n```C++:concurrent_queue\ntemplate <typename T, typename L>\nclass concurrent_queue {\n\tstatic_assert(std::is_base_of <flowTumn::ILock, L>::value, \"L must be a descendant of ILock.\");\n\npublic:\n\tenum struct Result {\n\t\tSuccess,\n\t\tFailed,\n\t\tEmpty,\n\t\tTimeout,\n\t};\n\n\t// lock\u3092RAII\u306b\u3002\n\tstruct locker {\n\t\treleaser lock() {\n\t\t\tif (l_.lock()) {\n\t\t\t\treturn{ [this]{ l_.unlock(); } };\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn{ nullptr };\n\t\t\t}\n\t\t}\n\t\tL l_;\n\t} lock_controller;\n\n\tconcurrent_queue() = default;\n\n\t//queue\u306b\u30c7\u30fc\u30bf\u3092\u8a70\u3081\u8fbc\u307f\u3002\n\tResult push(const T& v) {\n\t\tfor (;;) {\n\t\t\tif (auto l = lock_controller.lock()) {\n\t\t\t\tqueue_.push(v);\n\t\t\t\treturn Result::Success;\n\t\t\t}\n\t\t\tstd::this_thread::sleep_for(std::chrono::milliseconds(1));\n\t\t}\n\t\treturn Result::Failed;\n\t}\n\n\t//f\u304b\u3089\u53d6\u308a\u51fa\u3057\u305f\u30c7\u30fc\u30bf\u3092queue\u306b\u8a70\u3081\u8fbc\u307f\u3002\n\tResult push(std::function <T()> f) {\n\t\tfor (;;) {\n\t\t\tif (auto l = lock_controller.lock()) {\n\t\t\t\tqueue_.push(f());\n\t\t\t\treturn Result::Success;\n\t\t\t}\n\t\t\tstd::this_thread::sleep_for(std::chrono::milliseconds(1));\n\t\t}\n\t\treturn Result::Failed;\n\t}\n\n\t//queue\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3002\n\tstd::pair <Result, T> pop() {\n\t\tfor (;;) {\n\t\t\tif (auto l = lock_controller.lock()) {\n\t\t\t\tif (0 < queue_.size()) {\n\t\t\t\t\tauto r = queue_.front();\n\t\t\t\t\tqueue_.pop();\n\t\t\t\t\treturn{ Result::Success, r };\n\t\t\t\t} else {\n\t\t\t\t\treturn{ Result::Empty, {} };\n\t\t\t\t}\n\t\t\t}\n\t\t\tstd::this_thread::sleep_for(std::chrono::milliseconds(1));\n\t\t}\n\t\treturn{ Result::Failed, {} };\n\t}\n\nprivate:\n\tstd::queue <T> queue_;\n};\n```\n\n\u4ee5\u4e0a\u3067\u4eca\u56de\u306b\u4f7f\u7528\u3059\u308bconcurrent_queue\u306e\u5b8c\u6210\u3067\u3059\u3002\n\nconcurrent_queue\u306f\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3067ILock\u3092\u6e21\u3057\u3066\u3082\u3089\u3044\n\u305d\u308c\u306b\u5bfe\u3057\u3066lock\u3092\u884c\u3044\u3001\u6210\u529f\u304c\u8fd4\u3055\u308c\u305f\u3089\n\u30c7\u30fc\u30bf\u3092push/pop\u3059\u308b\u3068\u3044\u3063\u305f\u4f5c\u308a\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u306econcurrent_queue\u3092\u7528\u3044\u3066\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u6e2c\u5b9a\u3057\u3066\u307f\u307e\u3059\u3002\n\n## **Lock\u306e\u65b9\u5f0f**\n\n\u3055\u3066\u4eca\u56de\u306e\u30e1\u30a4\u30f3\u3067\u3059\u306d\u3002\nILock#lock\u306e\u4e2d\u3067\u7d14\u7c8b\u306bmutex\u3092lock\u3057\u3066\u3057\u307e\u3063\u3066\u3082\u69cb\u3044\u307e\u305b\u3093\u3057\n\u5225\u306e\u3084\u308a\u65b9\u3067lock\u3092\u3057\u3066\u3082\u826f\u3044\u3067\u3059\u3002\n\n\u3068\u306b\u304b\u304flock\u51fa\u6765\u305f\u4e8b\u3060\u3051\u3092\u8fd4\u305b\u3070\u826f\u3044\u306e\u3067\n\u4ee5\u4e0b\u306e3\u30d1\u30bf\u30fc\u30f3\u306eILock\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n```cpp:LockImplement\n//\u666e\u901a\u306elock\u3002mutex\u3092lock\u3067\u304d\u308b\u307e\u3067block\u3057\u307e\u3059\u3002\nstruct lockNormal : public ILock {\n\tbool lock() override {\n\t\tmutex_.lock();\n\t\treturn true;\n\t}\n\tvoid unlock() override {\n\t\tmutex_.unlock();\n\t}\n\tstd::mutex mutex_;\n};\n\n//block\u305b\u305a\u306block\u3092\u7372\u5f97\u3002\nstruct lockTry : public ILock {\n\tbool lock() override {\n\t\treturn mtx_.try_lock();\n\t}\n\tvoid unlock() override{\n\t\tmtx_.unlock();\n\t}\n\tstd::mutex mtx_;\n};\n\n//atomic<bool>\u3092\u7528\u3044\u3066true\u306b\u5909\u66f4\u3067\u304d\u305f\u3089\u6210\u529f\u3002\nstruct lockWeak : public ILock {\n\tbool lock() override {\n\t\tbool expected = false;\n\t\tbool desired = true;\n\t\treturn flg_.compare_exchange_weak(expected, desired);\n\t}\n\tvoid unlock() override {\n\t\tflg_ = false;\n\t}\n\tstd::atomic <bool> flg_{ false };\n};\n```\n\n\u4ee5\u4e0a\u3092\u6301\u3063\u3066\u3001concurrent_queue\u306f\u4ee5\u4e0b\u306e\u7528\u306b\u3057\u3066\u4f7f\u3046\u4e8b\u304c\u51fa\u6765\u308b\u69d8\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n`auto q = concurrent_queue <int64_t, lockNormal>{};`\n\n\u5f8c\u306f3\u30d1\u30bf\u30fc\u30f3\u306elock\u3092\u4f7f\u3063\u3066\u6e2c\u5b9a\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\n## **\u6e2c\u5b9a\u306e\u5b9f\u88c5**\n\n\u6e2c\u5b9a\u524d\u306b\u3001\u6e2c\u5b9a\u306e\u5b9f\u88c5\u306b\u306a\u308a\u307e\u3059\u3002\n\u30b3\u30fc\u30c9\u3070\u304b\u308a\u3067\u7533\u3057\u8a33\u3042\u308a\u307e\u305b\u3093(..\n\nqueue\u304c\u304d\u3061\u3093\u3068thread-safe\u306a\u306e\u304b\u3092\u691c\u8a3c\u3057\u305f\u5f8c\u306b\u30b9\u30b3\u30a2\u3092\u6e2c\u308a\u307e\u3059\u3002\n\n```cpp:perfomance\ntemplate <typename T, typename Lock, typename F>\nuint64_t queue_tester(\n\tF gen,\n\tuint32_t createGenCount,\n\tstd::function <void(T)> notify,\n\tuint32_t createNotifyCount,\n\tstd::chrono::milliseconds timeout) {\n\tusing queue_type = concurrent_queue <int64_t, Lock>;\n\n\tauto queue = queue_type{};\n\tauto counter = std::atomic <uint64_t> {0};\n\tstd::atomic <bool> g{ false };\n\tstd::vector <std::thread> thr;\n\n\tauto push = [&gen, &queue, &counter, &g]() {\n\t\twhile (!g) {}\n\t\twhile (g) {\n\t\t\tqueue.push(gen());\n\t\t\t++counter;\n\t\t}\n\t};\n\n\tauto pop = [&notify, &g, &counter, &queue]() {\n\t\twhile (!g) {}\n\t\twhile (g) {\n\t\t\tauto r = queue.pop();\n\t\t\tif (r.first == queue_type::Result::Success) {\n\t\t\t\tnotify(r.second);\n\t\t\t}\n\t\t\t++counter;\n\t\t}\n\t};\n\n\tstd::generate_n(std::back_inserter(thr), createGenCount, [push] { return std::thread{ push }; });\n\tstd::generate_n(std::back_inserter(thr), createNotifyCount, [pop] { return std::thread{ pop }; });\n\n\tg = !g;\n\tstd::this_thread::sleep_for(timeout);\n\tg = !g;\n\n\tfor (auto& elem : thr) {\n\t\telem.join();\n\t}\n\n\treturn counter.load();\n}\n\n//queue\u304cthread safe\u306a\u306e\u304b\u3092\u691c\u8a3c\u3057\u307e\u3059\u3002\ntemplate <typename L>\nbool checkQueue() {\n\tauto v1 = std::atomic <int64_t> {0};\n\tauto v2 = std::atomic <int64_t> {0};\n\tauto result = std::atomic <bool> {true};\n\n\t//cpu\u306e\u30b3\u30a2\u6570\u5206\u8a70\u3081\u308b\u51e6\u7406\u3092\u8ffd\u52a0\u3057\u3001pop\u3057\u305f\u30c7\u30fc\u30bf\u3092\u691c\u8a3c\u3059\u308b\u306e\u306f\u4e00\u3064\u304c\u62c5\u3046\u3002\n\tqueue_tester <int64_t, L>(\n\t\t[&v1] {\n#if 1\n\t\t\t//\u691c\u8a3c\u3059\u308b\u30c7\u30fc\u30bf\u3092\u751f\u6210\u3059\u308bfunction\u3092\u8fd4\u3059\u3002(\u3053\u306e\u51e6\u7406\u306flock\u3055\u308c\u305f\u5f8c\u306b\u547c\u3070\u308c\u308b\u3002)\n\t\t\treturn std::function <int64_t()> {\n\t\t\t\t[&v1] {\n\t\t\t\t\t++v1;\n\t\t\t\t\treturn v1.load();\n\t\t\t\t}\n\t\t\t};\n#else\n\t\t\t// \u8a70\u3081\u308b\u30b9\u30ec\u30c3\u30c9\u304c\u8907\u6570\u306a\u3089\u3001\u8a70\u3081\u3089\u308c\u308b\u5024\u306f\u30d0\u30e9\u30d0\u30e9\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3002\n\t\t\t++v1;\n\t\t\treturn v1.load();\n#endif\n\t\t},\n\t\tstd::thread::hardware_concurrency(),\n\t\t[&v2, &result](int64_t n) {\n\t\t\t//queue\u304b\u3089\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u306e\u901a\u77e5\u3092\u53d7\u3051\u691c\u8a3c\u3059\u308b\u3002\n\t\t\t++v2;\n\t\t\tif (v2.load() != n) {\n\t\t\t\tresult = false;\n\t\t\t\tassert(false && \"queue is bug.\");\n\t\t\t}\n\t\t},\n\t\t1,\n\t\tstd::chrono::seconds(5)\n\t);\n\n\treturn result.load();\n}\n\n//\u30b9\u30b3\u30a2\u3092\u8a08\u6e2c\u3002\ntemplate <typename Lock>\nuint64_t score() {\n\tconst auto core = std::max <uint32_t> (std::thread::hardware_concurrency() >> 1, 1);\n\treturn queue_tester <uint64_t, Lock>(\n\t\t[] {\n\t\t\t//\u597d\u304d\u306a\u5024\u3067\u8a70\u3081\u308b\u3002\u91cd\u8981\u306a\u306e\u306f\u547c\u3070\u308c\u305f\u56de\u6570\u3002\n\t\t\treturn 1234;\n\t\t},\n\t\tcore,\n\t\t[](uint64_t) {\n\t\t\t//pop\u3057\u305f\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u3066\u3082\u4f55\u3082\u3057\u306a\u3044\u3002\u91cd\u8981\u306a\u306e\u306f\u547c\u3070\u308c\u305f\u56de\u6570\u3002\n\t\t},\n\t\tcore,\n\t\tstd::chrono::seconds(5)\n\t);\n}\n\n//\u5e73\u5747\u3092\u7b97\u51fa\ntemplate <typename F, typename FN>\nauto avg(F f, uint32_t count, FN notify) -> decltype(f()) {\n\tauto r = decltype(f()){};\n\tfor (auto i = UINT32_C(0); i < count; ++i) {\n\t\tauto rr = f();\n\t\tnotify(rr);\n\t\tr += rr;\n\t}\n\treturn r / count;\n}\n\n```\n\n\u3075\u3046\u2026\u2026\u5b8c\u6210\u3067\u3059\u3002\n\n\u6700\u5f8c\u306e\u4e00\u632f\u308a\u306f\n\u691c\u8a3c\u3068\u7d50\u679c\u306e\u51fa\u529b\u3092\u30de\u30af\u30ed\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```cpp:score\n//\u30ad\u30e5\u30fc\u3092\u691c\u8a3c\u3057\u305f\u5f8c\u306b\u30b9\u30b3\u30a2\u3092\u8a08\u6e2c\u3002\n#define SCORE(lock, count) \\\n\tstd::cout << \"TargetLock => \" << \"\"#lock\"\"  << std::endl; \\\n\tif (checkQueue<lock>()) { \\\n\t\tstd::cout << \"\\t\" << \"checkQueue: Success.\" << std::endl; \\\n\t\tstd::cout << \"\\t\" << \"Score(Avg): \" << avg(score<lock>, count, [](decltype(score<lock>()) score) { std::cout << \"\\t\\t\" << \"Score: \" << score << std::endl; }) << std::endl; \\\n\t} else {  \\\n\t\tstd::cout << \"\\t\" << \"checkQueue: Failed.\" << std::endl; \\\n\t} \\\n\tstd::cout << std::endl;\n```\n\n# ***\u6e2c\u5b9a & \u7d50\u679c***\n\n\u3055\u3066\u3055\u3066\u3001\u5b9f\u969b\u306b\u30b9\u30b3\u30a2\u3092\u8a08\u6e2c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```cpp:test\nint main() {\n\tconst auto TEST_COUNT = 3;\n\n\t//\u30b9\u30b3\u30a2\u3092\u8a08\u6e2c\u3002lock\u306e\u5b9f\u88c5\u304c\u4e0d\u5341\u5206\u3060\u3068\u691c\u8a3c\u3067\u5f3e\u304b\u308c\u308b\u3002\n\tSCORE(lockNormal, TEST_COUNT);\n\tSCORE(lockTry, TEST_COUNT);\n\tSCORE(lockWeak, TEST_COUNT);\n\treturn 0;\n}\n```\n\n\u79c1\u306e\u958b\u767a\u30de\u30b7\u30f3\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\n(CPU: i7-2600k\u3001Win7\u3001VC2013 Release Build)\n\n```text\n1: Test timeout computed to be: 9.99988e+006\n1: TargetLock => lockNormal\n1: \tcheckQueue: Success.\n1: \t\tScore: 11758106\n1: \t\tScore: 9432942\n1: \t\tScore: 13260581\n1: \tScore(Avg): 11483876\n1: \n1: TargetLock => lockTry\n1: \tcheckQueue: Success.\n1: \t\tScore: 48652518\n1: \t\tScore: 49120617\n1: \t\tScore: 48946418\n1: \tScore(Avg): 48906517\n1: \n1: TargetLock => lockWeak\n1: \tcheckQueue: Success.\n1: \t\tScore: 80397898\n1: \t\tScore: 80919271\n1: \t\tScore: 81028361\n1: \tScore(Avg): 80781843\n1: \n1/1 Test #1: test .............................   Passed   64.01 sec\n```\n\n\u304a\u304a\u3001\u51c4\u3044\u7d50\u679c\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3002\n\n\u6298\u89d2\u306a\u306e\u3067\u30b0\u30e9\u30d5\u306b\u3082\u3057\u3066\u307f\u307e\u3059\u3002\n![score.PNG](https://qiita-image-store.s3.amazonaws.com/0/105345/a9bc6871-8101-c4a2-731b-a00d6ee04644.png)\n\natomic \\<bool\\>\u6050\u308b\u3079\u3057\u2026\n\n\u8abf\u3079\u308b\u3068CPU\u547d\u4ee4\u3067\u6bd4\u8f03\u3068\u5024\u306e\u4ea4\u63db\u3092\u884c\u3063\u3066\u3044\u308b\u3093\u3067\u3059\u306d\u3002(CAS)\nhttp://qiita.com/kmikmy/items/0a7324cc50fd40470407\nhttp://cpprefjp.github.io/reference/atomic/atomic/compare_exchange_weak.html\n\n# \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n\u4eca\u56de\u306e\u8a18\u4e8b\u306b\u4f5c\u6210\u3057\u305f\u30bd\u30fc\u30b9\u4e00\u5f0f\u3067\u3059\u3002\nhttps://github.com/flowtumn/lock_performance\n\n# travis-ci\u3067\u306e\u6e2c\u5b9a\u7d50\u679c(linux/osx)\n\n2015/12/18 travis-ci\u3067\u8a08\u6e2c\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n![linux.PNG](https://qiita-image-store.s3.amazonaws.com/0/105345/a41bea23-341e-b56f-89c6-dd7f175e1bb8.png)\n\n![osx.PNG](https://qiita-image-store.s3.amazonaws.com/0/105345/164a16b4-df13-9b40-0244-9b6498c4f3ce.png)\n", "tags": ["C++11", "\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9", "\u6392\u4ed6\u5236\u5fa1", "\u4e26\u5217\u51e6\u7406"]}