{"tags": ["scikit-learn", "Python", "Scrapy"], "context": "\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3053\u3053\u306b\u3042\u308a\u307e\u3059\u3002\n\u5148\u65e5\u6a5f\u68b0\u5b66\u7fd2\u30cf\u30f3\u30ba\u30aa\u30f3\u3067scikit-learn\u3092\u7528\u3044\u305f\u7c21\u5358\u306a\u30c6\u30ad\u30b9\u30c8\u5206\u985e\u306e\u624b\u6cd5\u3092\u52c9\u5f37\u3057\u305f\u306e\u3067\u3001\u81ea\u5206\u306e\u597d\u304d\u306a\u3082\u306e\u306b\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\u3084\u308a\u305f\u3044\u3053\u3068\n\n\u30a2\u30e1\u30ea\u30ab\u306e\u30e9\u30c3\u30d1\u30fc\u3067\u6709\u540d\u306aEMINEM\u3068SNOOP DOGG\u306e\u6b4c\u8a5e\u3092\u5224\u5b9a\u3059\u308b\u30e2\u30c7\u30eb\u3092SVM\u3092\u7528\u3044\u3066\u4f5c\u6210\u3057\u305f\u3044\u3002\n\u624b\u9806\n\nscrapy\u3067\u6b4c\u8a5e\u30b5\u30a4\u30c8\u304b\u3089\u5404\u30a2\u30fc\u30c6\u30a3\u30b9\u30c8\u306e\u6b4c\u8a5e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\nscikit-learn\u306eTfidfVectorizer\u3067\u30d9\u30af\u30c8\u30eb\u5316\u3059\u308b\nscikit-learn\u306esvm\u3067\u5b66\u7fd2\n\u8a55\u4fa1\n\n\n1) scrapy\u3067\u6b4c\u8a5e\u30b5\u30a4\u30c8\u304b\u3089\u5404\u30a2\u30fc\u30c6\u30a3\u30b9\u30c8\u306e\u6b4c\u8a5e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\n\u4eca\u56de\u306f\u5143\u30c7\u30fc\u30bf\u3092MetroLyrics\u306e\u65b9\u304b\u3089\u53d6\u5f97\u3057\u307e\u3057\u305f\u3002\nQiita\u306e\u3053\u306e\u6295\u7a3f\u3092\u53c2\u8003\u306bmetro_spider.py\u3092\u4f5c\u308a\u3001scrapy runspider metro_spider.py -o snoop_dogg.json\u3068\u3057\u3066SNOOP DOGG\u306e\u6b4c\u8a5e\u3092\u5168\u3066\u6301\u3063\u3066\u304d\u307e\u3057\u305f\u3002\nspider\u30af\u30e9\u30b9\u306e\u5b9f\u88c5\u3067scrapy\u304c\u4fbf\u5229\u3060\u306a\u3068\u611f\u3058\u305f\u306e\u304c\u3001\nresponse.css('.songs-table tbody tr td > a::attr(href)')\n\n\u3068\u3059\u308b\u3060\u3051\u3067\u3001html\u5185\u306e\u30bf\u30b0\u3092\u6307\u5b9a\u3067\u304d\u3001\u30af\u30ed\u30fc\u30eb\u5bfe\u8c61\u3068\u306a\u308b\u30ea\u30f3\u30af\u3092\u53d6\u5f97\u3067\u304d\u307e\u3057\u305f\u3002\n\u30af\u30ed\u30fc\u30eb\u5bfe\u8c61\u5185\u3067\u306f\u3001\n\nlyrics = []\n\nfor lyric in response.xpath('//p[@class=\"verse\"]/text()'):\n\nlyrics.append(lyric.extract())\n\n\n\u3068\u3059\u308b\u3053\u3068\u3067\u8907\u6570\u306ep\u30bf\u30b0\u306b\u307e\u305f\u304c\u3063\u3066\u3044\u308b\u6b4c\u8a5e\u30c7\u30fc\u30bf\u3092\u307e\u3068\u3081\u3066\u304b\u3089\u4fdd\u5b58\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n2) scikit-learn\u306eTfidfVectorizer\u3067\u30d9\u30af\u30c8\u30eb\u5316\u3059\u308b\n\u6b21\u306b\u5148\u307b\u3069\u751f\u6210\u3055\u308c\u305feminem.json\u3068snoop_dogg.json\u306e\u30c7\u30fc\u30bf\u3092scikit-learn\u306eTfidfVectorizer\u3067\u30d9\u30af\u30c8\u30eb\u5316\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\nf = open('eminem.json', 'r')\njson_data_eminem = json.load(f)\nf.close()\n\n\n\u3067json\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001eminem\u306e\u6b4c\u8a5e\u3068snoop dogg\u306e\u6b4c\u8a5e\u3092\u4e00\u3064\u306e\u30ea\u30b9\u30c8(doc_list)\u306b\u5165\u308c\u307e\u3059\u3002\n\nvectorizer = TfidfVectorizer(min_df=1, max_df=50)\nX = vectorizer.fit_transform(doc_list)\n\n\n\u4e00\u884c\u76ee\u3067TfidVectorizer\u3092\u7528\u3044\u305f\u30d9\u30af\u30c8\u30eb\u5316\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u308a\u3001\u4e8c\u884c\u76ee\u3067\u6b4c\u8a5e\u306e\u30ea\u30b9\u30c8\u3092\u30d9\u30af\u30c8\u30eb\u5316\u3057\u3066X\u306b\u4ee3\u5165\u3057\u3066\u3044\u307e\u3059\u3002\n\nperm = np.random.permutation(X.shape[0])\n\ntrain_index = perm[0:80]\ntest_index = perm[80:]\n\nX_train = X[train_index,:]\ny_train = y[train_index]\nX_test = X[test_index,:]\ny_test = y[test_index]\n\n\nnp.random.permutation(X.shape[0])\u306f\u5148\u307b\u3069\u4f5c\u6210\u3057\u305fX\u30c7\u30fc\u30bf\u306f\u524d\u534a\u306e90\u30c7\u30fc\u30bf\u304ceminem\u3001\u5f8c\u534a\u306e90\u30c7\u30fc\u30bf\u304csnoop dogg\u3068\u30c7\u30fc\u30bf\u306e\u9806\u5e8f\u304c\u504f\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u30b7\u30e3\u30c3\u30d5\u30eb\u3057\u3066\u3044\u307e\u3059\u3002\n\u305d\u308c\u30928:1\u306e\u5272\u5408\u3067\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272\u3057\u3066\u3044\u307e\u3059\u3002\n\n3) scikit-learn\u306esvm\u3067\u5b66\u7fd2\n\nfrom sklearn import svm\n\nclf = svm.LinearSVC()\nclf.fit(X_train, y_train)\n\n\nscikit-learn\u3092\u4f7f\u3046\u3068\u5b66\u7fd2\u306f\u3053\u308c\u3060\u3051\u307f\u305f\u3044\u3067\u3057\u305f\u3002\u4fbf\u5229\u3002\n\n4) \u8a55\u4fa1\n\nclf.score(X_test, y_test)\n\n\n\u8a55\u4fa1score\u95a2\u6570\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u6570\u5024\u3068\u3057\u3066\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n$ python scikit.py\n0.8708\n\n\n\u4eca\u56de\u306f9\u5272\u7a0b\u5ea6\u306e\u7d50\u679c\u306b\u306a\u308a\u307e\u3057\u305f\u3002\ntwitter\u59cb\u3081\u307e\u3057\u305f\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f[\u3053\u3053](https://bitbucket.org/Sotaro/emimem_vs_snoopdogg)\u306b\u3042\u308a\u307e\u3059\u3002\n\n\u5148\u65e5\u6a5f\u68b0\u5b66\u7fd2\u30cf\u30f3\u30ba\u30aa\u30f3\u3067scikit-learn\u3092\u7528\u3044\u305f\u7c21\u5358\u306a\u30c6\u30ad\u30b9\u30c8\u5206\u985e\u306e\u624b\u6cd5\u3092\u52c9\u5f37\u3057\u305f\u306e\u3067\u3001\u81ea\u5206\u306e\u597d\u304d\u306a\u3082\u306e\u306b\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u3084\u308a\u305f\u3044\u3053\u3068\n\n---\n\n\u30a2\u30e1\u30ea\u30ab\u306e\u30e9\u30c3\u30d1\u30fc\u3067\u6709\u540d\u306a[EMINEM](https://ja.wikipedia.org/wiki/\u30a8\u30df\u30cd\u30e0)\u3068[SNOOP DOGG](https://ja.wikipedia.org/wiki/\u30b9\u30cc\u30fc\u30d7\u30fb\u30c9\u30c3\u30b0)\u306e\u6b4c\u8a5e\u3092\u5224\u5b9a\u3059\u308b\u30e2\u30c7\u30eb\u3092SVM\u3092\u7528\u3044\u3066\u4f5c\u6210\u3057\u305f\u3044\u3002\n\n\u624b\u9806\n\n---\n\nscrapy\u3067\u6b4c\u8a5e\u30b5\u30a4\u30c8\u304b\u3089\u5404\u30a2\u30fc\u30c6\u30a3\u30b9\u30c8\u306e\u6b4c\u8a5e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\nscikit-learn\u306eTfidfVectorizer\u3067\u30d9\u30af\u30c8\u30eb\u5316\u3059\u308b\nscikit-learn\u306esvm\u3067\u5b66\u7fd2\n\u8a55\u4fa1\n\n---\n\n### 1) scrapy\u3067\u6b4c\u8a5e\u30b5\u30a4\u30c8\u304b\u3089\u5404\u30a2\u30fc\u30c6\u30a3\u30b9\u30c8\u306e\u6b4c\u8a5e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\n\n\u4eca\u56de\u306f\u5143\u30c7\u30fc\u30bf\u3092[MetroLyrics](http://www.metrolyrics.com)\u306e\u65b9\u304b\u3089\u53d6\u5f97\u3057\u307e\u3057\u305f\u3002\n\nQiita\u306e[\u3053\u306e\u6295\u7a3f](http://qiita.com/checkpoint/items/038b59b29df8e1e384a2)\u3092\u53c2\u8003\u306b```metro_spider.py```\u3092\u4f5c\u308a\u3001```scrapy runspider metro_spider.py -o snoop_dogg.json```\u3068\u3057\u3066SNOOP DOGG\u306e\u6b4c\u8a5e\u3092\u5168\u3066\u6301\u3063\u3066\u304d\u307e\u3057\u305f\u3002\n\nspider\u30af\u30e9\u30b9\u306e\u5b9f\u88c5\u3067scrapy\u304c\u4fbf\u5229\u3060\u306a\u3068\u611f\u3058\u305f\u306e\u304c\u3001\n\n```py\nresponse.css('.songs-table tbody tr td > a::attr(href)')\n```\n\u3068\u3059\u308b\u3060\u3051\u3067\u3001html\u5185\u306e\u30bf\u30b0\u3092\u6307\u5b9a\u3067\u304d\u3001\u30af\u30ed\u30fc\u30eb\u5bfe\u8c61\u3068\u306a\u308b\u30ea\u30f3\u30af\u3092\u53d6\u5f97\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u30af\u30ed\u30fc\u30eb\u5bfe\u8c61\u5185\u3067\u306f\u3001\n\n```py3\n\nlyrics = []\n\nfor lyric in response.xpath('//p[@class=\"verse\"]/text()'):\n\nlyrics.append(lyric.extract())\n\n```\n\u3068\u3059\u308b\u3053\u3068\u3067\u8907\u6570\u306ep\u30bf\u30b0\u306b\u307e\u305f\u304c\u3063\u3066\u3044\u308b\u6b4c\u8a5e\u30c7\u30fc\u30bf\u3092\u307e\u3068\u3081\u3066\u304b\u3089\u4fdd\u5b58\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n\n\n\n\n### 2) scikit-learn\u306eTfidfVectorizer\u3067\u30d9\u30af\u30c8\u30eb\u5316\u3059\u308b\n\n\u6b21\u306b\u5148\u307b\u3069\u751f\u6210\u3055\u308c\u305feminem.json\u3068snoop_dogg.json\u306e\u30c7\u30fc\u30bf\u3092scikit-learn\u306eTfidfVectorizer\u3067\u30d9\u30af\u30c8\u30eb\u5316\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n```py3\n\nf = open('eminem.json', 'r')\njson_data_eminem = json.load(f)\nf.close()\n\n```\n\u3067json\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001eminem\u306e\u6b4c\u8a5e\u3068snoop dogg\u306e\u6b4c\u8a5e\u3092\u4e00\u3064\u306e\u30ea\u30b9\u30c8(doc_list)\u306b\u5165\u308c\u307e\u3059\u3002\n\n```py3\n\nvectorizer = TfidfVectorizer(min_df=1, max_df=50)\nX = vectorizer.fit_transform(doc_list)\n\n```\n\u4e00\u884c\u76ee\u3067TfidVectorizer\u3092\u7528\u3044\u305f\u30d9\u30af\u30c8\u30eb\u5316\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u308a\u3001\u4e8c\u884c\u76ee\u3067\u6b4c\u8a5e\u306e\u30ea\u30b9\u30c8\u3092\u30d9\u30af\u30c8\u30eb\u5316\u3057\u3066X\u306b\u4ee3\u5165\u3057\u3066\u3044\u307e\u3059\u3002\n\n```py3\n\nperm = np.random.permutation(X.shape[0])\n\ntrain_index = perm[0:80]\ntest_index = perm[80:]\n\nX_train = X[train_index,:]\ny_train = y[train_index]\nX_test = X[test_index,:]\ny_test = y[test_index]\n\n```\n```np.random.permutation(X.shape[0])```\u306f\u5148\u307b\u3069\u4f5c\u6210\u3057\u305fX\u30c7\u30fc\u30bf\u306f\u524d\u534a\u306e90\u30c7\u30fc\u30bf\u304ceminem\u3001\u5f8c\u534a\u306e90\u30c7\u30fc\u30bf\u304csnoop dogg\u3068\u30c7\u30fc\u30bf\u306e\u9806\u5e8f\u304c\u504f\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u30b7\u30e3\u30c3\u30d5\u30eb\u3057\u3066\u3044\u307e\u3059\u3002\n\u305d\u308c\u30928:1\u306e\u5272\u5408\u3067\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272\u3057\u3066\u3044\u307e\u3059\u3002\n\n### 3) scikit-learn\u306esvm\u3067\u5b66\u7fd2\n\n```py3\n\nfrom sklearn import svm\n\nclf = svm.LinearSVC()\nclf.fit(X_train, y_train)\n\n```\n\n[scikit-learn](http://scikit-learn.org/stable/)\u3092\u4f7f\u3046\u3068\u5b66\u7fd2\u306f\u3053\u308c\u3060\u3051\u307f\u305f\u3044\u3067\u3057\u305f\u3002\u4fbf\u5229\u3002\n\n### 4) \u8a55\u4fa1\n\n```py\n\nclf.score(X_test, y_test)\n\n```\n\u8a55\u4fa1```score```\u95a2\u6570\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u6570\u5024\u3068\u3057\u3066\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n```bash\n\n$ python scikit.py\n0.8708\n\n```\n\u4eca\u56de\u306f9\u5272\u7a0b\u5ea6\u306e\u7d50\u679c\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n[twitter\u59cb\u3081\u307e\u3057\u305f](https://twitter.com/sobamchan)\n"}