{"tags": ["C++", "C++11"], "context": " More than 1 year has passed since last update.std::unique_ptr\u306f\u30dd\u30a4\u30f3\u30bf\u306b\u9650\u3089\u305a\u306a\u3093\u3067\u3082\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u30c7\u30ea\u30fc\u30bf\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u7b2c\u4e8c\u5f15\u6570\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u30e9\u30e0\u30c0\u5f0f\u3092\u30c7\u30ea\u30fc\u30bf\u306b\u6307\u5b9a\u3057\u305f\u3044\u3068\u304d\u306f\u30d8\u30eb\u30d1\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n// helper\ntemplate< class Ty, class D >\nstd::unique_ptr< Ty, D > make_guard( Ty& resource, D&& deleter )\n{\n  return std::unique_ptr< Ty, D >(resource, std::forward< D >(deleter));\n}\n\nstd::unique_ptr\u306e\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306fRAII\u3068\u547c\u3070\u308c\u308b\u3082\u306e\u306b\u542b\u307e\u308c\u3001\u5143\u3005\u6c4e\u7528\u5316\u3067\u304d\u308b\u3088\u3046\u306b\u3067\u304d\u3066\u3044\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u3001\u4ee5\u4e0b\u306fC\u306e\u95a2\u6570\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u6271\u3046\u6642\u306b\u3001fclose\u3092\u81ea\u52d5\u7684\u306b\u3084\u3063\u3066\u304f\u308c\u308b\u3088\u3046\u306b\u3057\u305f\u3082\u306e\u3067\u3059\u3002guardian0\u3068guardian1\u306f\u5168\u304f\u540c\u3058\u52d5\u4f5c\u3092\u3057\u307e\u3059\u3002\nstruct file_closer\n{\n  void operator()(FILE* fp) { fclose(fp); }\n};\n\nint main()\n{\n  // not use a lambda function, but a functor.\n  auto guardian0 = std::unique_ptr< FILE, file_closer >(fopen(bla, bla), file_closer());\n\n  // use a lambda with the helper.\n  auto guardian1 = make_guard(fopen(bla, bla), [](FILE* fp) { fclose(fp); });\n}\n\n\u3055\u3089\u306b\u3001std::unique_ptr\u306f\u6271\u3046\u578b\u304c\u30dd\u30a4\u30f3\u30bf\u3067\u306a\u304f\u3066\u3082\u69cb\u3044\u307e\u305b\u3093\u3002\n\u305d\u306e\u5834\u5408\u3001\u30c7\u30ea\u30fc\u30bf\u306b\u6307\u5b9a\u3059\u308b\u578b\u3092\u30ea\u30bd\u30fc\u30b9\u306e\u578b\u3068\u3057\u3066\u8a8d\u8b58\u3057\u307e\u3059\u3002\u3053\u306e\u3068\u304d\u3001\u30e9\u30e0\u30c0\u5f0f\u3092\u4f7f\u3046\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\nstruct dc_deleter\n{\n  using pointer = HDC; // typeof resource.\n  BOOL operator()(HDC& hdc) { return CreateDC(hdc); }\n};\n\nint main()\n{\n  auto guardian = std::unique_ptr< HDC, dc_deleter >(CreateDC(blabla..), dc_deleter());\n}\n\n\u30c7\u30ea\u30fc\u30bf\u306b\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u3092\u6301\u305f\u305b\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u3068\u304d\u3001\u30c7\u30ea\u30fc\u30bf\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u5fc5\u8981\u306a\u3082\u306e\u3092\u6e21\u3057\u3066\u3042\u3052\u307e\u3057\u3087\u3046\u3002\nEndPaint\u3059\u308b\u90e8\u5206\u306f\u304b\u306a\u308a\u7279\u6b8a\u306a\u4f8b\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u3046\u3044\u3046\u306e\u304cWindows\u306e\u5927\u5acc\u3044\u306a\u3068\u3053\u308d\u3067\u3059\u304c\u3001std::unique_ptr\u306f\u67d4\u8edf\u3067\u3059\u306d\u3002\nclass hdc_ender\n{\n  HWND hWnd;\n  LPPAINTSTRUCT lpPs;\n\npublic:\n  using pointer = HDC;\n  hdc_ender( HWND hWnd, LPPAINTSTRUCT lpPs ) : hWnd(hWnd), lpPs(lpPs) {}\n  BOOL operator()( HDC ) { return EndPaint(hWnd, lpPs); }\n};\n\nint main()\n{\n  auto guardian = std::unique_ptr< HDC, hdc_ender >(BeginPaint(hWnd, lpPs), hdc_ender(hWnd, lpPs));\n}\n\n\n\u4f59\u8ac7\n\u3053\u306e\u30c6\u30af\u30cb\u30c3\u30af\u306fRAII\u3068\u547c\u3070\u308c\u307e\u3059\u304c\u3001\u95a2\u6570\u306e\u6700\u5f8c\u306b\uff08\u6216\u306f\u6b63\u5e38\u306a\u30d5\u30ed\u30fc\u306b\u3088\u3063\u3066\u95a2\u6570\u304b\u3089\u629c\u3051\u308b\u76f4\u524d\u306b\u304a\u3044\u3066\uff09guardian.release();\u3068\u3059\u308b\u3053\u3068\u3067\u3001scope guard\u3068\u547c\u3070\u308c\u308b\u30c6\u30af\u30cb\u30c3\u30af\u306b\u3082\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u4f7f\u3046\u3053\u3068\u306b\u3088\u308a\u3001\u4f8b\u5916\u306b\u3088\u308b\u7570\u5e38/\u901a\u5e38\u306e\u30d5\u30ed\u30fc\u306b\u304a\u3051\u308b\u5931\u6557\u306a\u3069\u3092\u6c17\u306b\u305b\u305a\u30ea\u30bd\u30fc\u30b9\u306e\u958b\u653e\u3092\u78ba\u5b9f\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nbool func(int** resrc_int, long** resrc_long)\n{\n  std::unique_ptr< int > guardian0;\n  std::unique_ptr< long > guardian1;\n  try\n  {\n    guardian0.reset(new int[0x1000]);\n    guardian1.reset(new long[0x1000]);\n  }\n  catch(std::exception& e) { return false; }\n\n  // bla, bla, bla...\n  if(!bla) { return false; }\n\n  *resrc_int = guardian0.release();\n  *resrc_long = guardian1.release();\n  return true;\n}\n\n\u3053\u3046\u3044\u3046\u95a2\u6570\u306e\u306a\u3093\u3068\u30a8\u30ec\u30ac\u30f3\u30c8\u3067\u306a\u3044\u3053\u3068\u3067\u3057\u3087\u3046\u304b\u3002\nbool func(int** resrc_int, long** resrc_long)\n{\n  try\n  {\n    *resrc_int = new int[0x1000];\n  }\n  catch(std::exception& e)\n  { // std::bad_alloc or something\n    return false;\n  }\n  try\n  {\n    *resrc_long = new long[0x1000];\n  }\n  catch(std::exception& e)\n  {\n    delete *resrc_int;\n    return false;\n  }\n\n  // bla, bla, bla...\n\n  if(!bla)\n  { // \u51e6\u7406\u306b\u5931\u6557\u3057\u305f\u3089delete\u3057\u3066false\u3092\u8fd4\u3059\n    delete *resrc_int;\n    delete *resrc_long;\n    return false;\n  }\n\n  // \u6b63\u5e38\u7d42\u4e86.\u3000\u3082\u3061\u308d\u3093delete\u306f\u3057\u306a\u3044\n  return true;\n}\n\nstd::unique_ptr\u306f\u30dd\u30a4\u30f3\u30bf\u306b\u9650\u3089\u305a\u306a\u3093\u3067\u3082\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u30c7\u30ea\u30fc\u30bf\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u7b2c\u4e8c\u5f15\u6570\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u30e9\u30e0\u30c0\u5f0f\u3092\u30c7\u30ea\u30fc\u30bf\u306b\u6307\u5b9a\u3057\u305f\u3044\u3068\u304d\u306f\u30d8\u30eb\u30d1\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n```\n// helper\ntemplate< class Ty, class D >\nstd::unique_ptr< Ty, D > make_guard( Ty& resource, D&& deleter )\n{\n  return std::unique_ptr< Ty, D >(resource, std::forward< D >(deleter));\n}\n```\n\nstd::unique_ptr\u306e\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306fRAII\u3068\u547c\u3070\u308c\u308b\u3082\u306e\u306b\u542b\u307e\u308c\u3001\u5143\u3005\u6c4e\u7528\u5316\u3067\u304d\u308b\u3088\u3046\u306b\u3067\u304d\u3066\u3044\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u3001\u4ee5\u4e0b\u306fC\u306e\u95a2\u6570\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u6271\u3046\u6642\u306b\u3001fclose\u3092\u81ea\u52d5\u7684\u306b\u3084\u3063\u3066\u304f\u308c\u308b\u3088\u3046\u306b\u3057\u305f\u3082\u306e\u3067\u3059\u3002guardian0\u3068guardian1\u306f\u5168\u304f\u540c\u3058\u52d5\u4f5c\u3092\u3057\u307e\u3059\u3002\n\n\n```\nstruct file_closer\n{\n  void operator()(FILE* fp) { fclose(fp); }\n};\n\nint main()\n{\n  // not use a lambda function, but a functor.\n  auto guardian0 = std::unique_ptr< FILE, file_closer >(fopen(bla, bla), file_closer());\n\n  // use a lambda with the helper.\n  auto guardian1 = make_guard(fopen(bla, bla), [](FILE* fp) { fclose(fp); });\n}\n```\n\n\u3055\u3089\u306b\u3001std::unique_ptr\u306f\u6271\u3046\u578b\u304c\u30dd\u30a4\u30f3\u30bf\u3067\u306a\u304f\u3066\u3082\u69cb\u3044\u307e\u305b\u3093\u3002\n\u305d\u306e\u5834\u5408\u3001\u30c7\u30ea\u30fc\u30bf\u306b\u6307\u5b9a\u3059\u308b\u578b\u3092\u30ea\u30bd\u30fc\u30b9\u306e\u578b\u3068\u3057\u3066\u8a8d\u8b58\u3057\u307e\u3059\u3002\u3053\u306e\u3068\u304d\u3001\u30e9\u30e0\u30c0\u5f0f\u3092\u4f7f\u3046\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\n```\nstruct dc_deleter\n{\n  using pointer = HDC; // typeof resource.\n  BOOL operator()(HDC& hdc) { return CreateDC(hdc); }\n};\n\nint main()\n{\n  auto guardian = std::unique_ptr< HDC, dc_deleter >(CreateDC(blabla..), dc_deleter());\n}\n```\n\n\u30c7\u30ea\u30fc\u30bf\u306b\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u3092\u6301\u305f\u305b\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u3068\u304d\u3001\u30c7\u30ea\u30fc\u30bf\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u5fc5\u8981\u306a\u3082\u306e\u3092\u6e21\u3057\u3066\u3042\u3052\u307e\u3057\u3087\u3046\u3002\nEndPaint\u3059\u308b\u90e8\u5206\u306f\u304b\u306a\u308a\u7279\u6b8a\u306a\u4f8b\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u3046\u3044\u3046\u306e\u304cWindows\u306e\u5927\u5acc\u3044\u306a\u3068\u3053\u308d\u3067\u3059\u304c\u3001std::unique_ptr\u306f\u67d4\u8edf\u3067\u3059\u306d\u3002\n\n```\nclass hdc_ender\n{\n  HWND hWnd;\n  LPPAINTSTRUCT lpPs;\n\npublic:\n  using pointer = HDC;\n  hdc_ender( HWND hWnd, LPPAINTSTRUCT lpPs ) : hWnd(hWnd), lpPs(lpPs) {}\n  BOOL operator()( HDC ) { return EndPaint(hWnd, lpPs); }\n};\n\nint main()\n{\n  auto guardian = std::unique_ptr< HDC, hdc_ender >(BeginPaint(hWnd, lpPs), hdc_ender(hWnd, lpPs));\n}\n```\n\n###\u4f59\u8ac7\n\u3053\u306e\u30c6\u30af\u30cb\u30c3\u30af\u306fRAII\u3068\u547c\u3070\u308c\u307e\u3059\u304c\u3001\u95a2\u6570\u306e\u6700\u5f8c\u306b\uff08\u6216\u306f\u6b63\u5e38\u306a\u30d5\u30ed\u30fc\u306b\u3088\u3063\u3066\u95a2\u6570\u304b\u3089\u629c\u3051\u308b\u76f4\u524d\u306b\u304a\u3044\u3066\uff09`guardian.release();`\u3068\u3059\u308b\u3053\u3068\u3067\u3001scope guard\u3068\u547c\u3070\u308c\u308b\u30c6\u30af\u30cb\u30c3\u30af\u306b\u3082\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u4f7f\u3046\u3053\u3068\u306b\u3088\u308a\u3001\u4f8b\u5916\u306b\u3088\u308b\u7570\u5e38/\u901a\u5e38\u306e\u30d5\u30ed\u30fc\u306b\u304a\u3051\u308b\u5931\u6557\u306a\u3069\u3092\u6c17\u306b\u305b\u305a\u30ea\u30bd\u30fc\u30b9\u306e\u958b\u653e\u3092\u78ba\u5b9f\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```\nbool func(int** resrc_int, long** resrc_long)\n{\n  std::unique_ptr< int > guardian0;\n  std::unique_ptr< long > guardian1;\n  try\n  {\n    guardian0.reset(new int[0x1000]);\n    guardian1.reset(new long[0x1000]);\n  }\n  catch(std::exception& e) { return false; }\n\n  // bla, bla, bla...\n  if(!bla) { return false; }\n\n  *resrc_int = guardian0.release();\n  *resrc_long = guardian1.release();\n  return true;\n}\n```\n\n\u3053\u3046\u3044\u3046\u95a2\u6570\u306e\u306a\u3093\u3068\u30a8\u30ec\u30ac\u30f3\u30c8\u3067\u306a\u3044\u3053\u3068\u3067\u3057\u3087\u3046\u304b\u3002\n\n```\nbool func(int** resrc_int, long** resrc_long)\n{\n  try\n  {\n    *resrc_int = new int[0x1000];\n  }\n  catch(std::exception& e)\n  { // std::bad_alloc or something\n    return false;\n  }\n  try\n  {\n    *resrc_long = new long[0x1000];\n  }\n  catch(std::exception& e)\n  {\n    delete *resrc_int;\n    return false;\n  }\n\n  // bla, bla, bla...\n\n  if(!bla)\n  { // \u51e6\u7406\u306b\u5931\u6557\u3057\u305f\u3089delete\u3057\u3066false\u3092\u8fd4\u3059\n    delete *resrc_int;\n    delete *resrc_long;\n    return false;\n  }\n\n  // \u6b63\u5e38\u7d42\u4e86.\u3000\u3082\u3061\u308d\u3093delete\u306f\u3057\u306a\u3044\n  return true;\n}\n```\n"}