{"context": "\n\nBSD process accounting\u3092\u8abf\u3079\u308b\u3053\u3068\u306b\u306a\u3063\u305f\u304d\u3063\u304b\u3051\n\u672c\u3092\u8aad\u3093\u3060\u3089\u305f\u307e\u305f\u307e\u51fa\u3066\u304d\u305f\u3002\u5b9f\u306f\u3088\u304f\u77e5\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u30bd\u30fc\u30b9\u3092\u8aad\u3080\u3053\u3068\u306b\u3057\u305f\u3002\u30bd\u30fc\u30b9\u306fLinux4.7\u3067\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001\u8aac\u660e\u306fLinux man\u304c\u8a73\u3057\u3044\u3067\u3059\u3002\n\n\u30bd\u30fc\u30b9\u691c\u7d22\nLinux\u306e\u30bd\u30fc\u30b9\u3092\"BSD\"\u3092\u30ad\u30fc\u30ef\u30fc\u30c9\u306b\u691c\u7d22\u3002\ninit/Kconfig\n391:config BSD\\_PROCESS_ACCT\n392:    bool \"BSD Process Accounting\"\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001BSD_PROCESS_ACCT\u3067\u691c\u7d22\u304b\u3051\u307e\u3059\u3002\n\nkernel/Makefile\nobj-$(CONFIG\\_BSD_PROCESS_ACCT) += acct.o\n\n\n\nacct()\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\n\nkernel/acct.c\n *  This file implements BSD-style process accounting. Whenever any\n *  process exits, an accounting record of type \"struct acct\" is\n *  written to the file specified with the acct() system call. It is\n *  up to user-level programs to do useful things with the accounting\n *  log. The kernel just provides the raw accounting information.\n\n\nprocess accounting\u6a5f\u80fd\u306f\u3001acct()\u3068\u3044\u3046libc\u95a2\u6570\u3067\u6709\u52b9/\u7121\u52b9\u3092\u5207\u308a\u66ff\u3048\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002acct()\u306fLinux man\u306b\u8a73\u3057\u3044\u3067\u3059\u3002\nacct()\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\nkernel/acct.c\nSYSCALL_DEFINE1(acct, const char __user *, name)\n{\n// \u7565\n    if (name) {\n        struct filename *tmp = getname(name);\n\n// \u7565        \n        error = acct_on(tmp);\n// \u7565        \n\n\nacct_on()\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\u4e00\u756a\u5927\u4e8b\u306a\u7b87\u6240\u306f\u3001\u6307\u5b9a\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3092open()\u3057\u3066\u3044\u308b\u7b87\u6240\u3067\u3001\u3042\u3068\u306f\u8af8\u3005\u306e\u521d\u671f\u5316\u3067\u3059\u3002\n\nkernel/acct.c\nstatic int acct_on(struct filename *pathname)\n{\n// \u7565\n    /* Difference from BSD - they don't do O_APPEND */\n    file = file_open_name(pathname, O_WRONLY|O_APPEND|O_LARGEFILE, 0);\n// \u7565\n    acct->file = file;\n    acct->needcheck = jiffies;\n// \u7565\n    return 0;\n}\n\n\n\nexit()\u3067\u306eacct\u51e6\u7406\nprocess accounting\u306f\u3001\u30d7\u30ed\u30bb\u30b9\u306eexit()\u6642\u306b\u30ed\u30b0\u3092\u53d6\u308b\u6a5f\u80fd\u306a\u306e\u3067\u3001\u5f53\u7136exit()\u3067acct.c\u306e\u95a2\u6570\u3092\u547c\u3093\u3067\u3044\u307e\u3059\u3002\n\nkernel/exit.c\nvoid do_exit(long code)\n{\n    struct task_struct *tsk = current;\n// \u7565    \n    group_dead = atomic_dec_and_test(&tsk->signal->live);\n// \u7565\n    acct_collect(code, group_dead);\n// \u7565\n    if (group_dead)\n        acct_process();\n// \u7565\n}\n\n\n\u3053\u3053\u3067\u3001acct_process()\u306fgroup_dead\u3068\u3044\u3046\u30d5\u30e9\u30b0\u3067\u5b9f\u884c\u53ef\u5426\u3092\u6c7a\u3081\u3066\u3044\u307e\u3059\u3002\n\u5143\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u306f\u3001task\u69cb\u9020\u4f53\u306esignal->live\u3068\u3044\u3046\u30ab\u30a6\u30f3\u30bf\u5909\u6570\u3067\u3001\u3053\u308c\u304c\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u305f\u7d50\u679c0\u306b\u306a\u3063\u305f\u304b\u3069\u3046\u304b\u3092\u898b\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e\u30ab\u30a6\u30f3\u30bf\u306f\u3001fork()\u3084clone()\u7d4c\u7531\u3067\u547c\u3070\u308c\u308bcopy_process()\u3067\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nkernel/fork.c\nstatic struct task_struct *copy_process(unsigned long clone_flags,\n// \u7565\n{\n// \u7565\n        if (thread_group_leader(p)) {\n// \u7565\n        } else {\n            current->signal->nr_threads++;\n            atomic_inc(&current->signal->live);\n// \u7565\n}\n\n\n\u3068\u3053\u308d\u3067\u3001Linux\u306f\u3001\u4ee5\u4e0b\u306e\u5f15\u7528\u306e\u3088\u3046\u306b\u3001\u30d7\u30ed\u30bb\u30b9\u3092\u30b9\u30ec\u30c3\u30c9\u30b0\u30eb\u30fc\u30d7\u3067\u8868\u73fe\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u30d7\u30ed\u30bb\u30b9\u306e\u6700\u521d\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u30b9\u30ec\u30c3\u30c9\u30b0\u30eb\u30fc\u30d7\u30ea\u30fc\u30c0\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\nLinux\u30ab\u30fc\u30cd\u30eb\u89e3\u8aad\u5ba4\u304b\u3089\u306e\u629c\u7c8b\nPOSIX\u306e\u6307\u3059\u30d7\u30ed\u30bb\u30b9\u3068\u306f\u3001\u540c\u4e00\u30e1\u30e2\u30ea\u7a7a\u9593\u306a\u3069\u51e6\u7406\u306b\u5fc5\u8981\u306a\u30ea\u30bd\u30fc\u30b9\u3092\u5171\u6709\u3059\u308b\u30011\u3064\u4ee5\u4e0a\u306e\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u306a\u308a\u307e\u3059\u3002Linux\u3067\u306f\u30b9\u30ec\u30c3\u30c9\u30b0\u30eb\u30fc\u30d7\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n\n\n\u3064\u307e\u308a\u3001exit()\u3067\u306egroup_dead\u306e\u5f79\u5272\u306f\u3001\u4ee5\u4e0b\u306e\u30b3\u30e1\u30f3\u30c8\u3067\u88dc\u8db3\u3057\u305f\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nkernel/exit.c\n    // \u30d7\u30ed\u30bb\u30b9\u306e\u6700\u5f8c\u306e\u30b9\u30ec\u30c3\u30c9\u304cexit()\u3059\u308b\u3068\u304d\n    if (group_dead)\n        acct_process();\n\n\n\nacct_collect()\u3068acct_process()\nacct_collect()\u3067\u3059\u304c\u3001\u30b9\u30ec\u30c3\u30c9\u306e\u7d2f\u7a4d\u5b9f\u884c\u6642\u9593\u306a\u3069\u30ed\u30b0\u306b\u9332\u308a\u305f\u3044\u30c7\u30fc\u30bf\u3092\u56de\u53ce\u3059\u308b\u3060\u3051\u3067\u3059\u306e\u3067\u3001\u7701\u7565\u3057\u307e\u3059\u3002\n\u56de\u53ce\u3057\u305f\u30c7\u30fc\u30bf\u306f\u3001current->signal->pacct\u306b\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002\u30bd\u30fc\u30b9\u3092\u8aad\u3080\u969b\u306f\u3053\u308c\u3092\u982d\u306b\u5165\u308c\u3066\u304f\u3060\u3055\u3044\u3002\n\u307e\u305f\u3001acct_process()\u306f\u51e6\u7406\u306e\u4e2d\u3067do_acct_process\uff08\uff09\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u51e6\u7406\u304c\u30ed\u30b0\u3078\u306e\u66f8\u304d\u8fbc\u307f\u51e6\u7406\u3067\u3059\u3002\n\u9aa8\u3068\u306a\u308b\u90e8\u5206\u3092\u629c\u304d\u51fa\u3057\u305f\u5f15\u7528\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\nkernel/acct.c\nstatic void do_acct_process(struct bsd\\_acct_struct *acct)\n{\n// \u7565\n    /*\n     * First check to see if there is enough free_space to continue\n     * the process accounting system.\n     */\n    if (!check_free_space(acct))\n        goto out;\n\n    // fill_ac()\u306f\u30ed\u30b0\u306b\u66f8\u304d\u8fbc\u3080\u305f\u3081\u306e\u30a8\u30f3\u30c8\u30ea\u3092\u4f5c\u6210\u3059\u308b\u3002\n    // fill_ac()\u306f\u3001\u5148\u306bacct_process()\u3067\u683c\u7d0d\u3057\u305fcurrent->signal->pacct\u5185\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n    fill_ac(&ac);\n// \u7565\n    if (file_start_write_trylock(file)) {\n        /* it's been opened O_APPEND, so position is irrelevant */\n        loff_t pos = 0;\n        __kernel_write(file, (char *)&ac, sizeof(acct_t), &pos);\n        file_end_write(file);\n    }\n// \u7565\n}\n\n\n\u6700\u5f8c\u306b\u3001\u4e0a\u306b\u5f15\u7528\u3057\u305fdo_acct_process()\u304b\u3089\u547c\u3073\u51fa\u3057\u3066\u3044\u308bcheck_free_space()\u306f\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306e\u6b8b\u308a\u30d6\u30ed\u30c3\u30af\u6570\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\u5b9f\u88c5\u3092\u307f\u307e\u3057\u3087\u3046\u3002\n\u983b\u7e41\u306a\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3092\u907f\u3051\u3064\u3064\u3001vfs_statfs()\u306b\u3088\u308b\u7a7a\u304d\u30d6\u30ed\u30c3\u30af\u6570\u306e\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\u5de5\u592b\u304c\u306a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nkernel/acct.c\nstatic int check_free_space(struct bsd_acct_struct *acct)\n{\n    struct kstatfs sbuf;\n\n    // \u30d6\u30ed\u30c3\u30af\u3059\u308b\u53ef\u80fd\u6027\u306e\u3042\u308bvfs_statfs()\u3092\u6bce\u56de\u547c\u3073\u51fa\u3059\u306e\u306f\u8f9b\u3044\u3002\n    // \u3088\u3063\u3066\u3001\u4e00\u5b9a\u306e\u6642\u9593\u304c\u7d4c\u904e\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3042\u308c\u3070\u3001\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306e\n    // \u5229\u7528\u53ef\u80fd\u30d6\u30ed\u30c3\u30af\u6570\u306f\u5927\u304d\u304f\u5909\u308f\u3089\u306a\u3044\u3068\u601d\u3046\u306e\u3067\u3001\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044\n    if (time_is_before_jiffies(acct->needcheck))\n        goto out;\n\n    /* May block */\n    if (vfs_statfs(&acct->file->f_path, &sbuf))\n        goto out;\n\n    if (acct->active) {\n        u64 suspend = sbuf.f_blocks * SUSPEND;\n        do_div(suspend, 100);\n        // \u30d5\u30a1\u30a4\u30eb\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306e\u6b8b\u308a\u30d6\u30ed\u30c3\u30af\u6570\u306b\u4f59\u88d5\u304c\u306a\u3051\u308c\u3070\n        // \u8a18\u9332\u3092\u4e00\u6642\u505c\u6b62\u3002\n        // \u5c06\u6765\u4f59\u88d5\u304c\u51fa\u308b\u307e\u3067\u5f85\u3064\u3002\n        if (sbuf.f_bavail <= suspend) {\n            acct->active = 0;\n            pr_info(\"Process accounting paused\\n\");\n        }\n    } else {\n        u64 resume = sbuf.f_blocks * RESUME;\n        do_div(resume, 100);\n        // \u30d5\u30a1\u30a4\u30eb\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306e\u6b8b\u308a\u30d6\u30ed\u30c3\u30af\u6570\u306b\u4f59\u88d5\u304c\u51fa\u3066\u304d\u305f\u306e\u3067\n        // \u8a18\u9332\u3092\u518d\u958b\u3002\n        if (sbuf.f_bavail >= resume) {\n            acct->active = 1;\n            pr_info(\"Process accounting resumed\\n\");\n        }\n    }\n\n    acct->needcheck = jiffies + ACCT_TIMEOUT*HZ;\nout:\n    return acct->active;\n}\n\n\n\u3053\u308c\u3067process accouting\u304c\u4f55\u3092\u3057\u3066\u3044\u308b\u304b\u3001\u30a4\u30e1\u30fc\u30b8\u304c\u3064\u304b\u3081\u307e\u3057\u305f\u3002\n### BSD process accounting\u3092\u8abf\u3079\u308b\u3053\u3068\u306b\u306a\u3063\u305f\u304d\u3063\u304b\u3051\n\u672c\u3092\u8aad\u3093\u3060\u3089\u305f\u307e\u305f\u307e\u51fa\u3066\u304d\u305f\u3002\u5b9f\u306f\u3088\u304f\u77e5\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u30bd\u30fc\u30b9\u3092\u8aad\u3080\u3053\u3068\u306b\u3057\u305f\u3002\u30bd\u30fc\u30b9\u306fLinux4.7\u3067\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001\u8aac\u660e\u306f[Linux man](https://linuxjm.osdn.jp/html/LDP_man-pages/man5/acct.5.html)\u304c\u8a73\u3057\u3044\u3067\u3059\u3002\n\n### \u30bd\u30fc\u30b9\u691c\u7d22\nLinux\u306e\u30bd\u30fc\u30b9\u3092\"BSD\"\u3092\u30ad\u30fc\u30ef\u30fc\u30c9\u306b\u691c\u7d22\u3002\n\n```\ninit/Kconfig\n391:config BSD\\_PROCESS_ACCT\n392:    bool \"BSD Process Accounting\"\n```\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001BSD\\_PROCESS_ACCT\u3067\u691c\u7d22\u304b\u3051\u307e\u3059\u3002\n\n```:kernel/Makefile\nobj-$(CONFIG\\_BSD_PROCESS_ACCT) += acct.o\n```\n\n### acct()\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\n\n```c:kernel/acct.c\n *  This file implements BSD-style process accounting. Whenever any\n *  process exits, an accounting record of type \"struct acct\" is\n *  written to the file specified with the acct() system call. It is\n *  up to user-level programs to do useful things with the accounting\n *  log. The kernel just provides the raw accounting information.\n```\n\nprocess accounting\u6a5f\u80fd\u306f\u3001acct()\u3068\u3044\u3046libc\u95a2\u6570\u3067\u6709\u52b9/\u7121\u52b9\u3092\u5207\u308a\u66ff\u3048\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002acct()\u306f[Linux man](https://linuxjm.osdn.jp/html/LDP_man-pages/man2/acct.2.html)\u306b\u8a73\u3057\u3044\u3067\u3059\u3002\n\nacct()\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\n```c:kernel/acct.c\nSYSCALL_DEFINE1(acct, const char __user *, name)\n{\n// \u7565\n    if (name) {\n        struct filename *tmp = getname(name);\n\n// \u7565        \n        error = acct_on(tmp);\n// \u7565        \n```\n\nacct_on()\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\u4e00\u756a\u5927\u4e8b\u306a\u7b87\u6240\u306f\u3001\u6307\u5b9a\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3092open()\u3057\u3066\u3044\u308b\u7b87\u6240\u3067\u3001\u3042\u3068\u306f\u8af8\u3005\u306e\u521d\u671f\u5316\u3067\u3059\u3002\n\n```c:kernel/acct.c\nstatic int acct_on(struct filename *pathname)\n{\n// \u7565\n    /* Difference from BSD - they don't do O_APPEND */\n    file = file_open_name(pathname, O_WRONLY|O_APPEND|O_LARGEFILE, 0);\n// \u7565\n    acct->file = file;\n    acct->needcheck = jiffies;\n// \u7565\n    return 0;\n}\n```\n\n### exit()\u3067\u306eacct\u51e6\u7406\nprocess accounting\u306f\u3001\u30d7\u30ed\u30bb\u30b9\u306eexit()\u6642\u306b\u30ed\u30b0\u3092\u53d6\u308b\u6a5f\u80fd\u306a\u306e\u3067\u3001\u5f53\u7136exit()\u3067acct.c\u306e\u95a2\u6570\u3092\u547c\u3093\u3067\u3044\u307e\u3059\u3002\n\n```c:kernel/exit.c\nvoid do_exit(long code)\n{\n    struct task_struct *tsk = current;\n// \u7565    \n    group_dead = atomic_dec_and_test(&tsk->signal->live);\n// \u7565\n    acct_collect(code, group_dead);\n// \u7565\n    if (group_dead)\n        acct_process();\n// \u7565\n}\n```\n\n\u3053\u3053\u3067\u3001acct\\_process()\u306fgroup_dead\u3068\u3044\u3046\u30d5\u30e9\u30b0\u3067\u5b9f\u884c\u53ef\u5426\u3092\u6c7a\u3081\u3066\u3044\u307e\u3059\u3002\n\u5143\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u306f\u3001task\u69cb\u9020\u4f53\u306esignal->live\u3068\u3044\u3046\u30ab\u30a6\u30f3\u30bf\u5909\u6570\u3067\u3001\u3053\u308c\u304c\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u305f\u7d50\u679c0\u306b\u306a\u3063\u305f\u304b\u3069\u3046\u304b\u3092\u898b\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u306e\u30ab\u30a6\u30f3\u30bf\u306f\u3001fork()\u3084clone()\u7d4c\u7531\u3067\u547c\u3070\u308c\u308bcopy_process()\u3067\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```c:kernel/fork.c\nstatic struct task_struct *copy_process(unsigned long clone_flags,\n// \u7565\n{\n// \u7565\n        if (thread_group_leader(p)) {\n// \u7565\n        } else {\n            current->signal->nr_threads++;\n            atomic_inc(&current->signal->live);\n// \u7565\n}\n```\n\n\u3068\u3053\u308d\u3067\u3001Linux\u306f\u3001\u4ee5\u4e0b\u306e\u5f15\u7528\u306e\u3088\u3046\u306b\u3001\u30d7\u30ed\u30bb\u30b9\u3092\u30b9\u30ec\u30c3\u30c9\u30b0\u30eb\u30fc\u30d7\u3067\u8868\u73fe\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u30d7\u30ed\u30bb\u30b9\u306e\u6700\u521d\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u30b9\u30ec\u30c3\u30c9\u30b0\u30eb\u30fc\u30d7\u30ea\u30fc\u30c0\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n```text:Linux\u30ab\u30fc\u30cd\u30eb\u89e3\u8aad\u5ba4\u304b\u3089\u306e\u629c\u7c8b\nPOSIX\u306e\u6307\u3059\u30d7\u30ed\u30bb\u30b9\u3068\u306f\u3001\u540c\u4e00\u30e1\u30e2\u30ea\u7a7a\u9593\u306a\u3069\u51e6\u7406\u306b\u5fc5\u8981\u306a\u30ea\u30bd\u30fc\u30b9\u3092\u5171\u6709\u3059\u308b\u30011\u3064\u4ee5\u4e0a\u306e\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u306a\u308a\u307e\u3059\u3002Linux\u3067\u306f\u30b9\u30ec\u30c3\u30c9\u30b0\u30eb\u30fc\u30d7\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n```\n\n\u3064\u307e\u308a\u3001exit()\u3067\u306egroup_dead\u306e\u5f79\u5272\u306f\u3001\u4ee5\u4e0b\u306e\u30b3\u30e1\u30f3\u30c8\u3067\u88dc\u8db3\u3057\u305f\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```c:kernel/exit.c\n    // \u30d7\u30ed\u30bb\u30b9\u306e\u6700\u5f8c\u306e\u30b9\u30ec\u30c3\u30c9\u304cexit()\u3059\u308b\u3068\u304d\n    if (group_dead)\n        acct_process();\n```\n\n### acct\\_collect()\u3068acct_process()\nacct_collect()\u3067\u3059\u304c\u3001\u30b9\u30ec\u30c3\u30c9\u306e\u7d2f\u7a4d\u5b9f\u884c\u6642\u9593\u306a\u3069\u30ed\u30b0\u306b\u9332\u308a\u305f\u3044\u30c7\u30fc\u30bf\u3092\u56de\u53ce\u3059\u308b\u3060\u3051\u3067\u3059\u306e\u3067\u3001\u7701\u7565\u3057\u307e\u3059\u3002\n\u56de\u53ce\u3057\u305f\u30c7\u30fc\u30bf\u306f\u3001current->signal->pacct\u306b\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002\u30bd\u30fc\u30b9\u3092\u8aad\u3080\u969b\u306f\u3053\u308c\u3092\u982d\u306b\u5165\u308c\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u307e\u305f\u3001acct\\_process()\u306f\u51e6\u7406\u306e\u4e2d\u3067do\\_acct_process\uff08\uff09\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u51e6\u7406\u304c\u30ed\u30b0\u3078\u306e\u66f8\u304d\u8fbc\u307f\u51e6\u7406\u3067\u3059\u3002\n\u9aa8\u3068\u306a\u308b\u90e8\u5206\u3092\u629c\u304d\u51fa\u3057\u305f\u5f15\u7528\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n```c:kernel/acct.c\nstatic void do_acct_process(struct bsd\\_acct_struct *acct)\n{\n// \u7565\n    /*\n     * First check to see if there is enough free_space to continue\n     * the process accounting system.\n     */\n    if (!check_free_space(acct))\n        goto out;\n\n    // fill_ac()\u306f\u30ed\u30b0\u306b\u66f8\u304d\u8fbc\u3080\u305f\u3081\u306e\u30a8\u30f3\u30c8\u30ea\u3092\u4f5c\u6210\u3059\u308b\u3002\n    // fill_ac()\u306f\u3001\u5148\u306bacct_process()\u3067\u683c\u7d0d\u3057\u305fcurrent->signal->pacct\u5185\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n    fill_ac(&ac);\n// \u7565\n    if (file_start_write_trylock(file)) {\n        /* it's been opened O_APPEND, so position is irrelevant */\n        loff_t pos = 0;\n        __kernel_write(file, (char *)&ac, sizeof(acct_t), &pos);\n        file_end_write(file);\n    }\n// \u7565\n}\n```\n\n\u6700\u5f8c\u306b\u3001\u4e0a\u306b\u5f15\u7528\u3057\u305fdo\\_acct\\_process()\u304b\u3089\u547c\u3073\u51fa\u3057\u3066\u3044\u308bcheck\\_free_space()\u306f\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306e\u6b8b\u308a\u30d6\u30ed\u30c3\u30af\u6570\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\u5b9f\u88c5\u3092\u307f\u307e\u3057\u3087\u3046\u3002\n\u983b\u7e41\u306a\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3092\u907f\u3051\u3064\u3064\u3001vfs_statfs()\u306b\u3088\u308b\u7a7a\u304d\u30d6\u30ed\u30c3\u30af\u6570\u306e\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\u5de5\u592b\u304c\u306a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```c:kernel/acct.c\nstatic int check_free_space(struct bsd_acct_struct *acct)\n{\n    struct kstatfs sbuf;\n\n    // \u30d6\u30ed\u30c3\u30af\u3059\u308b\u53ef\u80fd\u6027\u306e\u3042\u308bvfs_statfs()\u3092\u6bce\u56de\u547c\u3073\u51fa\u3059\u306e\u306f\u8f9b\u3044\u3002\n    // \u3088\u3063\u3066\u3001\u4e00\u5b9a\u306e\u6642\u9593\u304c\u7d4c\u904e\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3042\u308c\u3070\u3001\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306e\n    // \u5229\u7528\u53ef\u80fd\u30d6\u30ed\u30c3\u30af\u6570\u306f\u5927\u304d\u304f\u5909\u308f\u3089\u306a\u3044\u3068\u601d\u3046\u306e\u3067\u3001\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044\n    if (time_is_before_jiffies(acct->needcheck))\n        goto out;\n\n    /* May block */\n    if (vfs_statfs(&acct->file->f_path, &sbuf))\n        goto out;\n\n    if (acct->active) {\n        u64 suspend = sbuf.f_blocks * SUSPEND;\n        do_div(suspend, 100);\n        // \u30d5\u30a1\u30a4\u30eb\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306e\u6b8b\u308a\u30d6\u30ed\u30c3\u30af\u6570\u306b\u4f59\u88d5\u304c\u306a\u3051\u308c\u3070\n        // \u8a18\u9332\u3092\u4e00\u6642\u505c\u6b62\u3002\n        // \u5c06\u6765\u4f59\u88d5\u304c\u51fa\u308b\u307e\u3067\u5f85\u3064\u3002\n        if (sbuf.f_bavail <= suspend) {\n            acct->active = 0;\n            pr_info(\"Process accounting paused\\n\");\n        }\n    } else {\n        u64 resume = sbuf.f_blocks * RESUME;\n        do_div(resume, 100);\n        // \u30d5\u30a1\u30a4\u30eb\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306e\u6b8b\u308a\u30d6\u30ed\u30c3\u30af\u6570\u306b\u4f59\u88d5\u304c\u51fa\u3066\u304d\u305f\u306e\u3067\n        // \u8a18\u9332\u3092\u518d\u958b\u3002\n        if (sbuf.f_bavail >= resume) {\n            acct->active = 1;\n            pr_info(\"Process accounting resumed\\n\");\n        }\n    }\n\n    acct->needcheck = jiffies + ACCT_TIMEOUT*HZ;\nout:\n    return acct->active;\n}\n```\n\n\u3053\u308c\u3067process accouting\u304c\u4f55\u3092\u3057\u3066\u3044\u308b\u304b\u3001\u30a4\u30e1\u30fc\u30b8\u304c\u3064\u304b\u3081\u307e\u3057\u305f\u3002\n\n", "tags": ["Linux", "kernel", "log"]}