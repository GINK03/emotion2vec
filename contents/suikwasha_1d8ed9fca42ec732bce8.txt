{"context": " More than 1 year has passed since last update.\u8fd1\u9803PSO2\u306b\u30cf\u30de\u308a\u307e\u304f\u3063\u3066\u3044\u308b\u30a8\u30f3\u30b8\u30cb\u30a2\u306esuikwasha\u3067\u3059.\n\u30c9\u30ef\u30f3\u30b4\u3067\u306f\u4e3b\u306bScala\u3067\u958b\u767a\u3092\u3057\u3066\u3044\u307e\u3059.\n\u4eca\u56de\u306f, Akka/AkkaCluster, Specs2\u3068Mockito, Scalastyle\u306e\u8a71, \u3069\u3061\u3089\u3092\u3084\u308d\u3046\u304b\u8ff7\u3063\u305f\u306e\u3067\u3059\u304cAkka\u306e\u8a71\u3068\u304b\u306f\u4ed6\u306e\u8a73\u3057\u3044\u65b9\u304c\u66f8\u3044\u3066\u304f\u308c\u305d\u3046\u306a\u3068\u3053\u308d\u306a\u306e\u3067, \u4eca\u56de\u306fSpecs2\u306b\u3064\u3044\u3066, \u7279\u306bSpecs2\u3068Mockito\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u5229\u7528\u3057\u305f\u6642\u306e\u6ce8\u610f\u70b9\u306b\u3064\u3044\u3066\u66f8\u3044\u3066\u307f\u307e\u3059.\n\nSpecs2\u3068Mockito\u306b\u3064\u3044\u3066\nSpecs2\u3068\u3044\u3046Scala\u7528\u306e\u30c6\u30b9\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308a\u307e\u3059.\nPlayFramework\u3067\u3082\u306f\u3058\u3081\u304b\u3089\u5229\u7528\u53ef\u80fd\u3067\u3042\u308a, Play\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3082\u5229\u7528\u65b9\u6cd5\u304c\u307e\u3068\u3081\u3089\u308c\u3066\u3044\u308b\u3053\u3068\u304b\u3089\u7d50\u69cb\u306a\u958b\u767a\u8005\u304c\u5229\u7528\u3057\u3066\u308b\u3082\u306e\u3068\u601d\u3063\u3066\u3044\u307e\u3059.\n\u3055\u3066, \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3082\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3059\u304c, Specs2\u3067\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067Mockito\u3068\u3044\u3046\u30e2\u30c3\u30af\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059. Mockito\u306f\u5143\u3005Java\u3067\u4f5c\u3089\u308c\u305f\u30e2\u30c3\u30af\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059, Specs2\u306f\u305d\u308c\u3092\u30e9\u30c3\u30d7\u3059\u308b\u5f62\u3067\u5229\u7528\u53ef\u80fd\u306b\u3057\u3066\u3044\u307e\u3059.\n\u3053\u306eSpecs2\u3068Mockito\u3092\u5229\u7528\u3059\u308b\u3068\u30c6\u30b9\u30c8\u304c\u66f8\u304d\u3084\u3059\u304f\u306a\u308a\u4fbf\u5229\u3067\u3059.\n\u79c1\u306e\u30c1\u30fc\u30e0\u3067\u3082\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u304c, \u4f7f\u3063\u3066\u3044\u308b\u3046\u3061\u306b\u3044\u304f\u3064\u304b\u306e\u7f60\u3092\u8e0f\u307f\u307e\u3057\u305f. \u305d\u306e\u307e\u307e\u3060\u3068, \u901a\u3089\u306a\u3044\u306f\u305a\u306e\u30c6\u30b9\u30c8\u304c\u901a\u3063\u3066\u3057\u307e\u3063\u305f\u308a, \u901a\u308b\u306f\u305a\u306e\u30c6\u30b9\u30c8\u304c\u901a\u3089\u305a\u306b\u539f\u56e0\u7a76\u660e\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3044\u307e\u3059.\n\u305d\u306e\u4e2d\u3067\u3082\u9762\u767d\u304b\u3063\u305f\u7f60\u3068\u539f\u56e0\u3092\u7d39\u4ecb\u3057\u3066\u3044\u304d\u307e\u3059.\n\n\u30e2\u30c3\u30af\u306b\u3057\u305f\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u3042\u308b\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u304cnull\u306b\u306a\u308b\n\u4ee5\u4e0b\u306e\u69d8\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u307e\u3059.\n\nimport org.specs2.mock.Mockito\nimport org.specs2.mutable.Specification\n\nclass FooClient {\n\n  def doSomething(param: String = \"foo\"): Unit = println(param)\n}\n\nclass FooInvoker (foo: FooClient) {\n  def invoke = foo.doSomething()\n}\n\nclass FooInvokerSpec extends Specification with Mockito {\n\n  \"FooInvoker\" should {\n    \"doSomething\u3092\u547c\u3073\u51fa\u305b\u308b\" in {\n      val mockFoo = mock[FooClient]\n      val invoker = new FooInvoker(mockFoo)\n\n      invoker.invoke\n\n      there was one(mockFoo).doSomething(===(\"foo\"))\n    }\n  }\n}\n\n\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059.\n[info] FooInvokerSpec\n[info] \n[info] FooInvoker should\n[info] x doSomething\u3092\u547c\u3073\u51fa\u305b\u308b\n[error]    The mock was not called as expected: \n[error]    Argument(s) are different! Wanted:\n[error]    fooClient.doSomething(\n[error]        'null' is not equal to 'foo'\n[error]    );\n[error]    -> at com.suikwasha.FooInvokerSpec$$anonfun$1$$anonfun$apply$2$$anonfun$apply$1.apply$mcV$sp(FooInvokerSpec.scala:24)\n[error]    Actual invocation has different arguments:\n[error]    fooClient.doSomething(\n[error]        null\n[error]    );\n[error]    -> at com.suikwasha.FooInvoker.invoke(FooInvokerSpec.scala:12) (FooInvokerSpec.scala:24)\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u306b\"foo\"\u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\u306e\u306b, null\u3067\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059. \u30b3\u30fc\u30c9\u3092\u898b\u3066\u3082, \u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u3092\u5229\u7528\u3057\u3066\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u306e\u3067\u3053\u306e\u30c6\u30b9\u30c8\u304c\u901a\u3089\u306a\u3044\u306e\u306f\u304a\u304b\u3057\u3044\u3067\u3059.\n\u539f\u56e0\u3092\u63a2\u308b\u305f\u3081\u306b, \u30c7\u30b3\u30f3\u30d1\u30a4\u30e9(\u4f8b:JavaDecompiler)\u3092\u4f7f\u3063\u3066\u3069\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u304c\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u306e\u304b\u78ba\u304b\u3081\u3066\u307f\u307e\u3059.\n  public void invoke()\n  {\n    this.foo.doSomething(this.foo.doSomething$default$1());\n  }\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u306f, \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\"doSomething$default$1()\"\u3092\u4f7f\u3063\u3066\u547c\u3073\u51fa\u3057\u3066\u308b\u3088\u3046\u3067\u3059.\nSpecs2\u306eMockito\u3067\u306f, \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30e2\u30c3\u30af\u306e\u6319\u52d5\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \n\nmockFooClient.doSomething(===(\"foo\")) returns ...\n\n\n\u672a\u5b9a\u7fa9\u306e\u30e2\u30c3\u30af\u306e\u623b\u308a\u5024\u306fnull\u306b\u306a\u308a\u307e\u3059. \u3064\u307e\u308a, \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3067\u306f\u30e2\u30c3\u30af\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\"doSomething$default$1()\"\u3092\u547c\u3073\u51fa\u3059\u308f\u3051\u3067\u3059\u304c, \u3053\u308c\u304cnull\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059.\n\u306a\u306e\u3067, \u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u3092\u5229\u7528\u3057\u305f\u6642\u306e\u30e2\u30c3\u30af\u306e\u6319\u52d5\u3092\u66f8\u304d\u305f\u3044\u3068\u304d\u306f\n\nmockFooClient.doSomething(===(null)) returns ...\n\n\n\u3068\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u304f, \u3068\u3066\u3082\u3064\u3089\u3044\u611f\u3058\u306b\u306a\u308a\u307e\u3059.\n\u307e\u305f, AnyVal\u3092\u4f7f\u3046\u3068null\u3067\u306f\u306a\u304f, 0\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059.\n\u4ee5\u4e0bFooClient\u306bInt\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u3092\u5229\u7528\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3057\u305f\u3068\u304d\u3068\u305d\u306e\u30c6\u30b9\u30c8\u3092\u8a18\u8ff0\u3057\u305f\u6642\u3067\u3059.\n\n  def doSomething2(param: Int = 1): Int = param\n\n\n[info] x doSomething2\u3092\u547c\u3073\u51fa\u305b\u308b\n[error]    The mock was not called as expected: \n[error]    Argument(s) are different! Wanted:\n[error]    fooClient.doSomething2(\n[error]        '0' is not equal to '1'\n[error]    );\n[error]    -> at com.suikwasha.FooInvokerSpec$$anonfun$1$$anonfun$apply$4$$anonfun$apply$2.apply$mcI$sp(FooInvokerSpec.scala:38)\n[error]    Actual invocation has different arguments:\n[error]    fooClient.doSomething2(\n[error]        0\n[error]    );\n[error]    -> at com.suikwasha.FooInvoker.invoke2(FooInvokerSpec.scala:16) (FooInvokerSpec.scala:38)\n\n\n\u4f55\u6545\u304b3\u56de\u547c\u3070\u308c\u3066\u3057\u307e\u3046\u30e2\u30c3\u30af\n\u307e\u305a\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30c6\u30b9\u30c8\u3092\u66f8\u3044\u3066\u307f\u307e\u3059.\nimport org.specs2.mock.Mockito\nimport org.specs2.mutable.Specification\n\nclass BarClient {\n  def openSession(f: () => Unit): Unit = ???\n}\n\nclass FooOperation {\n  def doWithBarClient(barClient: BarClient): Unit = ???\n}\n\nclass DoSomethingWithBar (barClient: BarClient, fooOp: FooOperation) {\n\n  def doSomethingWithBarAndFoo(): Unit = {\n    barClient.openSession { () =>\n      fooOp.doWithBarClient(barClient)\n    }\n  }\n}\n\nclass DoSomethingWithBarClientSpec extends Specification with Mockito {\n\n  \"DoSomethingWithBarClient\" should {\n\n    \"BarClient\u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u958b\u3044\u3066, FooOperation\u3092\u5b9f\u884c\u3059\u308b\" in {\n      val mockBarClient = mock[BarClient]\n      mockBarClient.openSession(any) answers { arg => arg.asInstanceOf[() => Any].apply() }\n\n      val mockFooOperation = mock[FooOperation]\n\n      val target = new DoSomethingWithBar(mockBarClient, mockFooOperation)\n      target.doSomethingWithBarAndFoo()\n\n      there was one(mockBarClient).openSession(any)\n      there was one(mockFooOperation).doWithBarClient(===(mockBarClient))\n    }\n  }\n}\n\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306f, \u4f55\u304b\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u958b\u3044\u3066, \u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u958b\u3044\u305f\u72b6\u614b\u3067\u4f55\u304b\u3059\u308b\u3068\u3044\u3046\u30af\u30e9\u30b9\u306e\u30c6\u30b9\u30c8\u306e\u3064\u3082\u308a\u3067\u3059.\n\u5272\u3068\u3061\u3087\u304f\u3061\u3087\u304f\u3042\u308b\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059.\n\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059.\n[info] DoSomethingWithBarClientSpec\n[info] \n[info] DoSomethingWithBarClient should\n[info] x BarClient\u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u958b\u3044\u3066, FooOperation\u3092\u5b9f\u884c\u3059\u308b\n[error]    The mock was not called as expected: \n[error]    fooOperation.doWithBarClient();\n[error]    Wanted 1 time:\n[error]    -> at com.suikwasha.DoSomethingWithBarClientSpec$$anonfun$1$$anonfun$apply$4$$anonfun$apply$3.apply$mcV$sp(DoSomethingWithBarClientSpec.scala:37)\n[error]    But was 3 times. Undesired invocation:\n[error]    -> at com.suikwasha.DoSomethingWithBar.doSomethingWithBarAndFoo(DoSomethingWithBarClientSpec.scala:17) (DoSomethingWithBarClientSpec.scala:37)\n\n\u306a\u305c\u304bfooOperation.doWithBarClient3\u56de\u547c\u3070\u308c\u3066\u307e\u3059\u306d, \u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u30821\u56de\u3057\u304b\u547c\u3070\u308c\u3066\u306a\u3044\u306f\u305a\u306a\u306e\u306b...\n\u3053\u308c\u306f, Specs2\u306eMockito\u306e\u30e9\u30c3\u30d1\u30fc\u304c\u30e2\u30c3\u30af\u306e\u5f15\u6570\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3068\u304d\u306bFunction0\u306e\u5834\u5408\u306f\u7279\u5225\u6271\u3044\u3057\u3066apply\u3057\u3066\u3057\u307e\u3046\u4ed5\u69d8\u306e\u305f\u3081\u306b\u8d77\u304d\u307e\u3059.\n\u306a\u305capply\u3059\u308b\u306e\u304b\u3068\u3044\u3046\u3068, \u540d\u524d\u6e21\u3057\u306e\u5f15\u6570\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u3067\u3059.\nscala\u306e\u30b3\u30f3\u30bd\u30fc\u30eb\u3067\u540d\u524d\u6e21\u3057\u304c\u3069\u306e\u3088\u3046\u306a\u30af\u30e9\u30b9\u306b\u306a\u308b\u304b\u898b\u3066\u307f\u307e\u3059.\nscala> class A { def func(a: => Int): Unit = ??? }\ndefined class A\n\nscala> classOf[A].getDeclaredMethods\nres2: Array[java.lang.reflect.Method] = Array(public void A.func(scala.Function0))\n\nA.func\u306e\u5f15\u6570\u304cscala.Function0\u306b\u306a\u3063\u3066\u307e\u3059\u306d, \u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c, \u5f15\u6570a\u306fFunctioin0\u306b\u5305\u307e\u308c\u5b9f\u884c\u6642\u306fFunction0\u306e\u578b\u3092\u6301\u3061\u307e\u3059\u304c, \u30b3\u30fc\u30c9\u4e0a\u306fInt\u3067\u3059.\nMockito\u3067\u306f, \u5b9f\u884c\u6642\u306bA.func\u306e\u5f15\u6570\u304cInt\u3060\u3068\u601d\u3044, Function0\u3092Int\u306b\u5909\u63db\u3057\u3088\u3046\u3068\u3057\u307e\u3059. \u3057\u304b\u3057, \u3053\u308c\u306f\u3082\u3061\u308d\u3093\u5931\u6557\u3057\u3066\u3057\u307e\u3046\u306e\u3067, Specs2\u304c\u524d\u3082\u3063\u3066apply\u3057\u3066Int\u3092\u53d6\u308a\u51fa\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059. \u3053\u306e\u30b3\u30df\u30c3\u30c8\u3067\u5bfe\u5fdc\u3057\u305f\u307f\u305f\u3044\u3067\u3059\u304c, \u5b9f\u88c5\u3092Mockito\u81ea\u4f53\u306e\u30af\u30e9\u30b9\u3092\u4e0a\u66f8\u3044\u3066\u3044\u305f\u308a\u3057\u3066\u3068\u3066\u3082\u697d\u3057\u3044\u611f\u3058\u306b\u306a\u3063\u3066\u3044\u307e\u3059.\n else if (arg.isInstanceOf[Function0[_]]) {\n        // evaluate the byname parameter to collect the argument matchers\n        // if an exception is thrown we keep the value to compare it with the actual one (see \"with Any\" in the MockitoSpec and issue 82)\n        val value = try { arg.asInstanceOf[Function0[_]].apply() } catch { case e: Throwable => e }\n\n\u3067\u3059\u304c, \u3053\u306e\u5bfe\u5fdc\u306e\u526f\u4f5c\u7528\u3068\u3057\u3066\u540d\u524d\u6e21\u3057\u3067\u306f\u306a\u3044\u5f15\u6570\u307e\u3067apply\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f. \u7d50\u679c\u3068\u3057\u3066, \u30e2\u30c3\u30af\u3067Function0\u3092\u53d7\u3051\u53d6\u308a, \u305d\u308c\u3092\u5b9f\u884c\u3057\u3066\u3042\u3052\u308b\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3068\u304d\u306b, \u8907\u6570\u56de\u5b9f\u884c\u3055\u308c\u3066\u3057\u307e\u3063\u3066\u3044\u305f\u308f\u3051\u3067\u3059...\n\u3053\u308c\u306f, \u5bfe\u7b56\u304c\u3053\u308c\u3068\u3044\u3063\u3066\u601d\u3044\u3064\u304b\u306a\u3044\u306e\u3067\u8ab0\u304b\u6559\u3048\u3066\u304f\u3060\u3055\u3044.\n\n\u7d42\u308f\u308a\u306b\n\u4ed6\u306b\u3082AnyVal\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3092\u30e2\u30c3\u30af\u3067\u304d\u306a\u304b\u3063\u305f\u308a...\u3068\u304b\u3044\u308d\u3044\u308d\u3042\u308a\u307e\u3059\u304c\u75b2\u308c\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u3053\u308c\u3050\u3089\u3044\u306b\u3057\u307e\u3059.\n\u53c2\u8003\u306b\u306a\u308c\u3070\u5e78\u3044\u3067\u3059.\n\u8fd1\u9803[PSO2](http://pso2.jp/players/)\u306b\u30cf\u30de\u308a\u307e\u304f\u3063\u3066\u3044\u308b\u30a8\u30f3\u30b8\u30cb\u30a2\u306e[suikwasha](http://twitter.com/suikwasha)\u3067\u3059.\n\u30c9\u30ef\u30f3\u30b4\u3067\u306f\u4e3b\u306bScala\u3067\u958b\u767a\u3092\u3057\u3066\u3044\u307e\u3059.\n\n\u4eca\u56de\u306f, Akka/AkkaCluster, Specs2\u3068Mockito, Scalastyle\u306e\u8a71, \u3069\u3061\u3089\u3092\u3084\u308d\u3046\u304b\u8ff7\u3063\u305f\u306e\u3067\u3059\u304cAkka\u306e\u8a71\u3068\u304b\u306f\u4ed6\u306e\u8a73\u3057\u3044\u65b9\u304c\u66f8\u3044\u3066\u304f\u308c\u305d\u3046\u306a\u3068\u3053\u308d\u306a\u306e\u3067, \u4eca\u56de\u306fSpecs2\u306b\u3064\u3044\u3066, \u7279\u306bSpecs2\u3068Mockito\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u5229\u7528\u3057\u305f\u6642\u306e\u6ce8\u610f\u70b9\u306b\u3064\u3044\u3066\u66f8\u3044\u3066\u307f\u307e\u3059.\n\n#### Specs2\u3068Mockito\u306b\u3064\u3044\u3066\n[Specs2](http://etorreborre.github.io/specs2/)\u3068\u3044\u3046Scala\u7528\u306e\u30c6\u30b9\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308a\u307e\u3059.\n[PlayFramework](https://www.playframework.com/)\u3067\u3082\u306f\u3058\u3081\u304b\u3089\u5229\u7528\u53ef\u80fd\u3067\u3042\u308a, Play\u306e[\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](https://www.playframework.com/documentation/2.3.6/ScalaTestingWithSpecs2)\u306b\u3082\u5229\u7528\u65b9\u6cd5\u304c\u307e\u3068\u3081\u3089\u308c\u3066\u3044\u308b\u3053\u3068\u304b\u3089\u7d50\u69cb\u306a\u958b\u767a\u8005\u304c\u5229\u7528\u3057\u3066\u308b\u3082\u306e\u3068\u601d\u3063\u3066\u3044\u307e\u3059.\n\n\u3055\u3066, \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3082\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3059\u304c, Specs2\u3067\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067Mockito\u3068\u3044\u3046\u30e2\u30c3\u30af\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059. Mockito\u306f\u5143\u3005Java\u3067\u4f5c\u3089\u308c\u305f\u30e2\u30c3\u30af\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059, Specs2\u306f\u305d\u308c\u3092\u30e9\u30c3\u30d7\u3059\u308b\u5f62\u3067\u5229\u7528\u53ef\u80fd\u306b\u3057\u3066\u3044\u307e\u3059.\n\n\u3053\u306eSpecs2\u3068Mockito\u3092\u5229\u7528\u3059\u308b\u3068\u30c6\u30b9\u30c8\u304c\u66f8\u304d\u3084\u3059\u304f\u306a\u308a\u4fbf\u5229\u3067\u3059.\n\u79c1\u306e\u30c1\u30fc\u30e0\u3067\u3082\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u304c, \u4f7f\u3063\u3066\u3044\u308b\u3046\u3061\u306b\u3044\u304f\u3064\u304b\u306e\u7f60\u3092\u8e0f\u307f\u307e\u3057\u305f. \u305d\u306e\u307e\u307e\u3060\u3068, \u901a\u3089\u306a\u3044\u306f\u305a\u306e\u30c6\u30b9\u30c8\u304c\u901a\u3063\u3066\u3057\u307e\u3063\u305f\u308a, \u901a\u308b\u306f\u305a\u306e\u30c6\u30b9\u30c8\u304c\u901a\u3089\u305a\u306b\u539f\u56e0\u7a76\u660e\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3044\u307e\u3059.\n\n\u305d\u306e\u4e2d\u3067\u3082\u9762\u767d\u304b\u3063\u305f\u7f60\u3068\u539f\u56e0\u3092\u7d39\u4ecb\u3057\u3066\u3044\u304d\u307e\u3059.\n\n#### \u30e2\u30c3\u30af\u306b\u3057\u305f\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u3042\u308b\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u304cnull\u306b\u306a\u308b\n\u4ee5\u4e0b\u306e\u69d8\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u307e\u3059.\n\n```scala\n\nimport org.specs2.mock.Mockito\nimport org.specs2.mutable.Specification\n\nclass FooClient {\n\n  def doSomething(param: String = \"foo\"): Unit = println(param)\n}\n\nclass FooInvoker (foo: FooClient) {\n  def invoke = foo.doSomething()\n}\n\nclass FooInvokerSpec extends Specification with Mockito {\n\n  \"FooInvoker\" should {\n    \"doSomething\u3092\u547c\u3073\u51fa\u305b\u308b\" in {\n      val mockFoo = mock[FooClient]\n      val invoker = new FooInvoker(mockFoo)\n\n      invoker.invoke\n\n      there was one(mockFoo).doSomething(===(\"foo\"))\n    }\n  }\n}\n```\n\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059.\n\n~~~\n[info] FooInvokerSpec\n[info] \n[info] FooInvoker should\n[info] x doSomething\u3092\u547c\u3073\u51fa\u305b\u308b\n[error]    The mock was not called as expected: \n[error]    Argument(s) are different! Wanted:\n[error]    fooClient.doSomething(\n[error]        'null' is not equal to 'foo'\n[error]    );\n[error]    -> at com.suikwasha.FooInvokerSpec$$anonfun$1$$anonfun$apply$2$$anonfun$apply$1.apply$mcV$sp(FooInvokerSpec.scala:24)\n[error]    Actual invocation has different arguments:\n[error]    fooClient.doSomething(\n[error]        null\n[error]    );\n[error]    -> at com.suikwasha.FooInvoker.invoke(FooInvokerSpec.scala:12) (FooInvokerSpec.scala:24)\n~~~\n\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u306b\"foo\"\u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\u306e\u306b, null\u3067\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059. \u30b3\u30fc\u30c9\u3092\u898b\u3066\u3082, \u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u3092\u5229\u7528\u3057\u3066\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u306e\u3067\u3053\u306e\u30c6\u30b9\u30c8\u304c\u901a\u3089\u306a\u3044\u306e\u306f\u304a\u304b\u3057\u3044\u3067\u3059.\n\u539f\u56e0\u3092\u63a2\u308b\u305f\u3081\u306b, \u30c7\u30b3\u30f3\u30d1\u30a4\u30e9(\u4f8b:[JavaDecompiler](http://jd.benow.ca/))\u3092\u4f7f\u3063\u3066\u3069\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u304c\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u306e\u304b\u78ba\u304b\u3081\u3066\u307f\u307e\u3059.\n\n```java\n  public void invoke()\n  {\n    this.foo.doSomething(this.foo.doSomething$default$1());\n  }\n```\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u306f, \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\"doSomething\\$default\\$1()\"\u3092\u4f7f\u3063\u3066\u547c\u3073\u51fa\u3057\u3066\u308b\u3088\u3046\u3067\u3059.\nSpecs2\u306eMockito\u3067\u306f, \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30e2\u30c3\u30af\u306e\u6319\u52d5\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \n\n```scala\n\nmockFooClient.doSomething(===(\"foo\")) returns ...\n\n```\n\u672a\u5b9a\u7fa9\u306e\u30e2\u30c3\u30af\u306e\u623b\u308a\u5024\u306fnull\u306b\u306a\u308a\u307e\u3059. \u3064\u307e\u308a, \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3067\u306f\u30e2\u30c3\u30af\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\"doSomething\\$default\\$1()\"\u3092\u547c\u3073\u51fa\u3059\u308f\u3051\u3067\u3059\u304c, \u3053\u308c\u304cnull\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059.\n\n\u306a\u306e\u3067, \u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u3092\u5229\u7528\u3057\u305f\u6642\u306e\u30e2\u30c3\u30af\u306e\u6319\u52d5\u3092\u66f8\u304d\u305f\u3044\u3068\u304d\u306f\n\n```scala\n\nmockFooClient.doSomething(===(null)) returns ...\n\n```\n\n\u3068\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u304f, \u3068\u3066\u3082\u3064\u3089\u3044\u611f\u3058\u306b\u306a\u308a\u307e\u3059.\n\u307e\u305f, AnyVal\u3092\u4f7f\u3046\u3068null\u3067\u306f\u306a\u304f, 0\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059.\n\n\u4ee5\u4e0bFooClient\u306bInt\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u3092\u5229\u7528\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3057\u305f\u3068\u304d\u3068\u305d\u306e\u30c6\u30b9\u30c8\u3092\u8a18\u8ff0\u3057\u305f\u6642\u3067\u3059.\n\n```scala\n\n  def doSomething2(param: Int = 1): Int = param\n\n```\n\n~~~\n[info] x doSomething2\u3092\u547c\u3073\u51fa\u305b\u308b\n[error]    The mock was not called as expected: \n[error]    Argument(s) are different! Wanted:\n[error]    fooClient.doSomething2(\n[error]        '0' is not equal to '1'\n[error]    );\n[error]    -> at com.suikwasha.FooInvokerSpec$$anonfun$1$$anonfun$apply$4$$anonfun$apply$2.apply$mcI$sp(FooInvokerSpec.scala:38)\n[error]    Actual invocation has different arguments:\n[error]    fooClient.doSomething2(\n[error]        0\n[error]    );\n[error]    -> at com.suikwasha.FooInvoker.invoke2(FooInvokerSpec.scala:16) (FooInvokerSpec.scala:38)\n~~~\n\n#### \u4f55\u6545\u304b3\u56de\u547c\u3070\u308c\u3066\u3057\u307e\u3046\u30e2\u30c3\u30af\n\u307e\u305a\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30c6\u30b9\u30c8\u3092\u66f8\u3044\u3066\u307f\u307e\u3059.\n\n```scala\nimport org.specs2.mock.Mockito\nimport org.specs2.mutable.Specification\n\nclass BarClient {\n  def openSession(f: () => Unit): Unit = ???\n}\n\nclass FooOperation {\n  def doWithBarClient(barClient: BarClient): Unit = ???\n}\n\nclass DoSomethingWithBar (barClient: BarClient, fooOp: FooOperation) {\n\n  def doSomethingWithBarAndFoo(): Unit = {\n    barClient.openSession { () =>\n      fooOp.doWithBarClient(barClient)\n    }\n  }\n}\n\nclass DoSomethingWithBarClientSpec extends Specification with Mockito {\n\n  \"DoSomethingWithBarClient\" should {\n\n    \"BarClient\u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u958b\u3044\u3066, FooOperation\u3092\u5b9f\u884c\u3059\u308b\" in {\n      val mockBarClient = mock[BarClient]\n      mockBarClient.openSession(any) answers { arg => arg.asInstanceOf[() => Any].apply() }\n\n      val mockFooOperation = mock[FooOperation]\n\n      val target = new DoSomethingWithBar(mockBarClient, mockFooOperation)\n      target.doSomethingWithBarAndFoo()\n\n      there was one(mockBarClient).openSession(any)\n      there was one(mockFooOperation).doWithBarClient(===(mockBarClient))\n    }\n  }\n}\n```\n\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306f, \u4f55\u304b\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u958b\u3044\u3066, \u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u958b\u3044\u305f\u72b6\u614b\u3067\u4f55\u304b\u3059\u308b\u3068\u3044\u3046\u30af\u30e9\u30b9\u306e\u30c6\u30b9\u30c8\u306e\u3064\u3082\u308a\u3067\u3059.\n\u5272\u3068\u3061\u3087\u304f\u3061\u3087\u304f\u3042\u308b\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059.\n\n\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059.\n\n~~~\n[info] DoSomethingWithBarClientSpec\n[info] \n[info] DoSomethingWithBarClient should\n[info] x BarClient\u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u958b\u3044\u3066, FooOperation\u3092\u5b9f\u884c\u3059\u308b\n[error]    The mock was not called as expected: \n[error]    fooOperation.doWithBarClient();\n[error]    Wanted 1 time:\n[error]    -> at com.suikwasha.DoSomethingWithBarClientSpec$$anonfun$1$$anonfun$apply$4$$anonfun$apply$3.apply$mcV$sp(DoSomethingWithBarClientSpec.scala:37)\n[error]    But was 3 times. Undesired invocation:\n[error]    -> at com.suikwasha.DoSomethingWithBar.doSomethingWithBarAndFoo(DoSomethingWithBarClientSpec.scala:17) (DoSomethingWithBarClientSpec.scala:37)\n~~~\n\n\u306a\u305c\u304bfooOperation.doWithBarClient3\u56de\u547c\u3070\u308c\u3066\u307e\u3059\u306d, \u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u30821\u56de\u3057\u304b\u547c\u3070\u308c\u3066\u306a\u3044\u306f\u305a\u306a\u306e\u306b...\n\n\u3053\u308c\u306f, Specs2\u306eMockito\u306e\u30e9\u30c3\u30d1\u30fc\u304c\u30e2\u30c3\u30af\u306e\u5f15\u6570\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3068\u304d\u306bFunction0\u306e\u5834\u5408\u306f\u7279\u5225\u6271\u3044\u3057\u3066apply\u3057\u3066\u3057\u307e\u3046\u4ed5\u69d8\u306e\u305f\u3081\u306b\u8d77\u304d\u307e\u3059.\n\n\u306a\u305capply\u3059\u308b\u306e\u304b\u3068\u3044\u3046\u3068, \u540d\u524d\u6e21\u3057\u306e\u5f15\u6570\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u3067\u3059.\nscala\u306e\u30b3\u30f3\u30bd\u30fc\u30eb\u3067\u540d\u524d\u6e21\u3057\u304c\u3069\u306e\u3088\u3046\u306a\u30af\u30e9\u30b9\u306b\u306a\u308b\u304b\u898b\u3066\u307f\u307e\u3059.\n\n~~~\nscala> class A { def func(a: => Int): Unit = ??? }\ndefined class A\n\nscala> classOf[A].getDeclaredMethods\nres2: Array[java.lang.reflect.Method] = Array(public void A.func(scala.Function0))\n~~~\n\nA.func\u306e\u5f15\u6570\u304cscala.Function0\u306b\u306a\u3063\u3066\u307e\u3059\u306d, \u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c, \u5f15\u6570a\u306fFunctioin0\u306b\u5305\u307e\u308c\u5b9f\u884c\u6642\u306fFunction0\u306e\u578b\u3092\u6301\u3061\u307e\u3059\u304c, \u30b3\u30fc\u30c9\u4e0a\u306fInt\u3067\u3059.\n\nMockito\u3067\u306f, \u5b9f\u884c\u6642\u306bA.func\u306e\u5f15\u6570\u304cInt\u3060\u3068\u601d\u3044, Function0\u3092Int\u306b\u5909\u63db\u3057\u3088\u3046\u3068\u3057\u307e\u3059. \u3057\u304b\u3057, \u3053\u308c\u306f\u3082\u3061\u308d\u3093\u5931\u6557\u3057\u3066\u3057\u307e\u3046\u306e\u3067, Specs2\u304c\u524d\u3082\u3063\u3066apply\u3057\u3066Int\u3092\u53d6\u308a\u51fa\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059. [\u3053\u306e\u30b3\u30df\u30c3\u30c8](https://github.com/etorreborre/specs2/commit/2c33ecd9b02bcae4d7e0185c935852d04c793dce)\u3067\u5bfe\u5fdc\u3057\u305f\u307f\u305f\u3044\u3067\u3059\u304c, \u5b9f\u88c5\u3092Mockito\u81ea\u4f53\u306e\u30af\u30e9\u30b9\u3092\u4e0a\u66f8\u3044\u3066\u3044\u305f\u308a\u3057\u3066\u3068\u3066\u3082\u697d\u3057\u3044\u611f\u3058\u306b\u306a\u3063\u3066\u3044\u307e\u3059.\n\n```scala\n else if (arg.isInstanceOf[Function0[_]]) {\n        // evaluate the byname parameter to collect the argument matchers\n        // if an exception is thrown we keep the value to compare it with the actual one (see \"with Any\" in the MockitoSpec and issue 82)\n        val value = try { arg.asInstanceOf[Function0[_]].apply() } catch { case e: Throwable => e }\n```\n\n\u3067\u3059\u304c, \u3053\u306e\u5bfe\u5fdc\u306e\u526f\u4f5c\u7528\u3068\u3057\u3066\u540d\u524d\u6e21\u3057\u3067\u306f\u306a\u3044\u5f15\u6570\u307e\u3067apply\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f. \u7d50\u679c\u3068\u3057\u3066, \u30e2\u30c3\u30af\u3067Function0\u3092\u53d7\u3051\u53d6\u308a, \u305d\u308c\u3092\u5b9f\u884c\u3057\u3066\u3042\u3052\u308b\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3068\u304d\u306b, \u8907\u6570\u56de\u5b9f\u884c\u3055\u308c\u3066\u3057\u307e\u3063\u3066\u3044\u305f\u308f\u3051\u3067\u3059...\n\n\u3053\u308c\u306f, \u5bfe\u7b56\u304c\u3053\u308c\u3068\u3044\u3063\u3066\u601d\u3044\u3064\u304b\u306a\u3044\u306e\u3067\u8ab0\u304b\u6559\u3048\u3066\u304f\u3060\u3055\u3044.\n\n#### \u7d42\u308f\u308a\u306b\n\u4ed6\u306b\u3082AnyVal\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3092\u30e2\u30c3\u30af\u3067\u304d\u306a\u304b\u3063\u305f\u308a...\u3068\u304b\u3044\u308d\u3044\u308d\u3042\u308a\u307e\u3059\u304c\u75b2\u308c\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u3053\u308c\u3050\u3089\u3044\u306b\u3057\u307e\u3059.\n\n\u53c2\u8003\u306b\u306a\u308c\u3070\u5e78\u3044\u3067\u3059.\n", "tags": ["Scala", "Specs2", "Mockito"]}