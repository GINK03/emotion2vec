{"context": "\u300c\u8a00\u8a9e\u51e6\u7406100\u30ce\u30c3\u30af 2015 \u7b2c\uff11\u7ae0\u300d\u89e3\u7b54\u4f8b\u3092\u306e\u305b\u3066\u3044\u307e\u3059\u3002\n\u5b9f\u88c5\u306f\u3001Python 2.7.1\u3067\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\u3054\u610f\u898b\u3001\u3054\u6307\u6458\u7b49\u3042\u308c\u3070\u3001\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\n\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af\u3068\u306f\uff1f\n\u6771\u5317\u5927\u5b66\u306e\u4e7e\u30fb\u5ca1\u5d0e\u7814\u7a76\u5ba4\u304c\u516c\u958b\u3057\u3066\u3044\u308b\u554f\u984c\u96c6\u3067\u3059\u3002\u4ee5\u4e0b\u5f15\u7528\u3002\nhttp://www.cl.ecei.tohoku.ac.jp/nlp100/\n\n\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af\u306f\uff0c\u5b9f\u8df5\u7684\u306a\u8ab2\u984c\u306b\u53d6\u308a\u7d44\u307f\u306a\u304c\u3089\uff0c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\uff0c\u30c7\u30fc\u30bf\u5206\u6790\uff0c\u7814\u7a76\u306e\u30b9\u30ad\u30eb\u3092\u697d\u3057\u304f\u7fd2\u5f97\u3059\u308b\u3053\u3068\u3092\u76ee\u6307\u3057\u305f\u554f\u984c\u96c6\u3067\u3059\n\n\n\u7b2c\uff11\u7ae0\u306e\u5185\u5bb9\n\u4ee5\u4e0b\u306e\u5185\u5bb9\u3092\u6271\u3044\u307e\u3059\u3002\n\n\u30c6\u30ad\u30b9\u30c8\u3084\u6587\u5b57\u5217\u3092\u6271\u3046\u984c\u6750\u306b\u53d6\u308a\u7d44\u307f\u306a\u304c\u3089\uff0c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306e\u3084\u3084\u9ad8\u5ea6\u306a\u30c8\u30d4\u30c3\u30af\u3092\u5fa9\u7fd2\u3057\u307e\u3059\uff0e\n\u6587\u5b57\u5217, \u30e6\u30cb\u30b3\u30fc\u30c9, \u30ea\u30b9\u30c8\u578b, \u8f9e\u66f8\u578b, \u96c6\u5408\u578b, \u30a4\u30c6\u30ec\u30fc\u30bf, \u30b9\u30e9\u30a4\u30b9, \u4e71\u6570\n\n\u3053\u306e\u554f\u984c\u96c6\u81ea\u4f53Python\u3067\u6271\u3046\u3053\u3068\u3092\u60f3\u5b9a\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u3053\u306e\u7ae0\u3067\u306f\u3001Python\u306e\u6587\u6cd5\u7fd2\u5f97\u306b\u5f79\u7acb\u3064\u554f\u984c\u4e2d\u5fc3\u3068\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\n00. \u6587\u5b57\u5217\u306e\u9006\u9806\n\n\u6587\u5b57\u5217\"stressed\"\u306e\u6587\u5b57\u3092\u9006\u306b\uff08\u672b\u5c3e\u304b\u3089\u5148\u982d\u306b\u5411\u304b\u3063\u3066\uff09\u4e26\u3079\u305f\u6587\u5b57\u5217\u3092\u5f97\u3088\uff0e\n\nword = \"stressed\"\nprint word[::-1] #\u6587\u5b57\u5217\u306e\u5f8c\u308d\u304b\u3089\u30b9\u30e9\u30a4\u30b9\n\ndesserts\n\n\n01. \u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\n\n\u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\u3068\u3044\u3046\u6587\u5b57\u5217\u306e1,3,5,7\u6587\u5b57\u76ee\u3092\u53d6\u308a\u51fa\u3057\u3066\u9023\u7d50\u3057\u305f\u6587\u5b57\u5217\u3092\u5f97\u3088\uff0e\n\nword = u\"\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\"\nprint word[::2]\n\n\u30d1\u30c8\u30ab\u30fc\n\n\n02. \u300c\u30d1\u30c8\u30ab\u30fc\u300d\uff0b\u300c\u30bf\u30af\u30b7\u30fc\u300d\uff1d\u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\n\n\u300c\u30d1\u30c8\u30ab\u30fc\u300d\uff0b\u300c\u30bf\u30af\u30b7\u30fc\u300d\u306e\u6587\u5b57\u3092\u5148\u982d\u304b\u3089\u4ea4\u4e92\u306b\u9023\u7d50\u3057\u3066\u6587\u5b57\u5217\u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\u3092\u5f97\u3088\uff0e\n\nword1 = u\"\u30d1\u30c8\u30ab\u30fc\"\nword2 = u\"\u30bf\u30af\u30b7\u30fc\"\njoined_word = [x + y for x , y in zip(word1, word2)]\nprint ''.join(joined_word)\n\n\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\n\n\n03. \u5186\u5468\u7387\n\n\"Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.\"\u3068\u3044\u3046\u6587\u3092\u5358\u8a9e\u306b\u5206\u89e3\u3057\uff0c\u5404\u5358\u8a9e\u306e\uff08\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\uff09\u6587\u5b57\u6570\u3092\u5148\u982d\u304b\u3089\u51fa\u73fe\u9806\u306b\u4e26\u3079\u305f\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u305b\u3088\uff0e\n\ntext = \"Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.\"\ntext = text.translate(None, \".,\") #\u300c.\u300d\u300c,\u300d\u3092\u524a\u9664\u3002\ntext = text.split() #str.split()\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u7a7a\u767d\u3067\u5207\u308a\u5206\u3051\nnum_char = [len(x) for x in text]\nprint text\nprint num_char\n\n['Now', 'I', 'need', 'a', 'drink', 'alcoholic', 'of', 'course', 'after', 'the', 'heavy', 'lectures', 'involving', 'quantum', 'mechanics']\n[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9]\n\n\n04. \u5143\u7d20\u8a18\u53f7\n\n\"Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.\"\u3068\u3044\u3046\u6587\u3092\u5358\u8a9e\u306b\u5206\u89e3\u3057\uff0c1, 5, 6, 7, 8, 9, 15, 16, 19\u756a\u76ee\u306e\u5358\u8a9e\u306f\u5148\u982d\u306e1\u6587\u5b57\uff0c\u305d\u308c\u4ee5\u5916\u306e\u5358\u8a9e\u306f\u5148\u982d\u306b2\u6587\u5b57\u3092\u53d6\u308a\u51fa\u3057\uff0c\u53d6\u308a\u51fa\u3057\u305f\u6587\u5b57\u5217\u304b\u3089\u5358\u8a9e\u306e\u4f4d\u7f6e\uff08\u5148\u982d\u304b\u3089\u4f55\u756a\u76ee\u306e\u5358\u8a9e\u304b\uff09\u3078\u306e\u9023\u60f3\u914d\u5217\uff08\u8f9e\u66f8\u578b\u3082\u3057\u304f\u306f\u30de\u30c3\u30d7\u578b\uff09\u3092\u4f5c\u6210\u305b\u3088\uff0e\n\ntext = \"Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.\"\ntext = text.translate(None, \".,\") \ntext = text.split() \npos_dict = {}\n\nfor i, x in enumerate(text, start=1):\n    if i in [1, 5, 6, 7, 8, 9, 15, 16, 19]:\n        pos_dict[x[:1]] = i\n    else:\n        pos_dict[x[:2]] = i\n\n# \u8f9e\u66f8\u306e\u4e2d\u8eab\u3092\u51fa\u73fe\u9806\u306b\u30bd\u30fc\u30c8\u3057\u3066\u8868\u793a cf.http://qiita.com/xxthermidorxx/items/b546471c37b2f443f4c7\nprint sorted(pos_dict.items(), key=lambda x:x[1])\n\n[('H', 1), ('He', 2), ('Li', 3), ('Be', 4), ('B', 5), ('C', 6), ('N', 7), ('O', 8), ('F', 9), ('Ne', 10), ('Na', 11), ('Mi', 12), ('Al', 13), ('Si', 14), ('P', 15), ('S', 16), ('Cl', 17), ('Ar', 18), ('K', 19), ('Ca', 20)]\n\n\n05. n-gram\n\n\u4e0e\u3048\u3089\u308c\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\uff08\u6587\u5b57\u5217\u3084\u30ea\u30b9\u30c8\u306a\u3069\uff09\u304b\u3089n-gram\u3092\u4f5c\u308b\u95a2\u6570\u3092\u4f5c\u6210\u305b\u3088\uff0e\u3053\u306e\u95a2\u6570\u3092\u7528\u3044\uff0c\"I am an NLPer\"\u3068\u3044\u3046\u6587\u304b\u3089\u5358\u8a9ebi-gram\uff0c\u6587\u5b57bi-gram\u3092\u5f97\u3088\uff0e\n\nN_gram\u306e\u89e3\u8aac \u2192 https://kotobank.jp/word/N%E3%82%B0%E3%83%A9%E3%83%A0-1702302\ndef n_gram(char, n, mode = \"word\"):\n    \"\"\"\n    Args:\n        char:\u5bfe\u8c61\u306e\u6587\u5b57\u5217\n        n:N\u306e\u5024\n        mode:\u5358\u8a9e\u3067\u533a\u5207\u308b\u306a\u3089\u300cword\u300d, \u6587\u5b57\u3067\u533a\u5207\u308b\u306a\u3089\u300cchar\u300d.\u30c7\u30d5\u30a9\u30eb\u30c8\u306fword\n    Return:\n        n_gram:N-gram\u3067\u5206\u89e3\u3057\u305f\u7d50\u679c\n    \"\"\"\n    n_gram = []\n    # \u5358\u8a9e\u3000or \u6587\u5b57\u3067\u533a\u5207\u308b\n    if (mode == \"word\"):\n        chars = char.split()  # \u5358\u8a9e\u3067\u533a\u5207\u308b\n    if (mode == \"char\"):\n        chars = char.translate(None, \" \")  # \u6587\u5b57\u3067\u533a\u5207\u308b\n\n    first_n = n\n    while n - 1 < len(chars):\n        n_gram.append(chars[n - first_n: n])\n        n += 1\n\n    return n_gram\n\n\n# \u554f\u306e\u56de\u7b54\nchar = \"I am an NLPer\"\nprint \"\u5358\u8a9ebi-gram\"\nwords = n_gram(char, 2, \"word\")\nprint words\n\nprint \"\u6587\u5b57bi-gram\"\nchars = n_gram(char, 2, \"char\")\nprint chars\n\n\u5358\u8a9ebi-gram\n[['I', 'am'], ['am', 'an'], ['an', 'NLPer']]\n\u6587\u5b57bi-gram\n['Ia', 'am', 'ma', 'an', 'nN', 'NL', 'LP', 'Pe', 'er']\n\n\n06. \u96c6\u5408\n\n\"paraparaparadise\"\u3068\"paragraph\"\u306b\u542b\u307e\u308c\u308b\u6587\u5b57bi-gram\u306e\u96c6\u5408\u3092\uff0c\u305d\u308c\u305e\u308c, X\u3068Y\u3068\u3057\u3066\u6c42\u3081\uff0cX\u3068Y\u306e\u548c\u96c6\u5408\uff0c\u7a4d\u96c6\u5408\uff0c\u5dee\u96c6\u5408\u3092\u6c42\u3081\u3088\uff0e\u3055\u3089\u306b\uff0c'se'\u3068\u3044\u3046bi-gram\u304cX\u304a\u3088\u3073Y\u306b\u542b\u307e\u308c\u308b\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u3088\uff0e\n\n\u554f\u984c05\u306en_gram()\u3092\u5229\u7528\u3057\u3066\u89e3\u7b54\u3057\u3066\u3044\u307e\u3059\u3002\nchar1 = \"paraparaparadise\"\n\nchar2 = \"paragraph\"\n\nx = n_gram(char1, 2, \"char\")\ny = n_gram(char2, 2, \"char\")\nprint \"bi-gram\"\nprint x\nprint y\n\nbi-gram\n['pa', 'ar', 'ra', 'ap', 'pa', 'ar', 'ra', 'ap', 'pa', 'ar', 'ra', 'ad', 'di', 'is', 'se']\n['pa', 'ar', 'ra', 'ag', 'gr', 'ra', 'ap', 'ph']\n\n# set\u578b\u3078\u5909\u63db\nx = set(n_gram(char1, 2, \"char\"))\ny = set(n_gram(char2, 2, \"char\"))\n\nprint \"\u548c\u96c6\u5408\"\nprint x | y\n\n\u548c\u96c6\u5408\nset(['ad', 'ag', 'di', 'is', 'ap', 'pa', 'ra', 'ph', 'ar', 'se', 'gr'])\n\nprint \"\u7a4d\u96c6\u5408\"\nprint x & y\n\n\u7a4d\u96c6\u5408\nset(['ap', 'pa', 'ar', 'ra'])\n\nprint \"\u5dee\u96c6\u5408\"\nprint x - y\n\n\u5dee\u96c6\u5408\nset(['is', 'ad', 'se', 'di'])\n\nprint \"'se'\u304cX\u304a\u3088\u3073Y\u306b\u542b\u307e\u308c\u308b\u304b\u3069\u3046\u304b\"\nprint \"se\" in x\nprint \"se\" in y\n\n'se'\u304cX\u304a\u3088\u3073Y\u306b\u542b\u307e\u308c\u308b\u304b\u3069\u3046\u304b\nTrue\nFalse\n\n\n07. \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u3088\u308b\u6587\u751f\u6210\n\n\u5f15\u6570x, y, z\u3092\u53d7\u3051\u53d6\u308a\u300cx\u6642\u306ey\u306fz\u300d\u3068\u3044\u3046\u6587\u5b57\u5217\u3092\u8fd4\u3059\u95a2\u6570\u3092\u5b9f\u88c5\u305b\u3088\uff0e\u3055\u3089\u306b\uff0cx=12, y=\"\u6c17\u6e29\", z=22.4\u3068\u3057\u3066\uff0c\u5b9f\u884c\u7d50\u679c\u3092\u78ba\u8a8d\u305b\u3088\uff0e\n\ndef template(x, y, z):\n    \"\"\"\n    Args:\n        x:\u6642\u9593\n        y:\u300c\u6c17\u6e29\u300d\u306a\u3069\u306e\u4e8b\u8c61\n        z:\u5024\n    Return:\n        char:x\u6642\u306ey\u306fz\n    \"\"\"\n    char = \"%s\u6642\u306e%s\u306f%s\" % (x, y, z)\n    return char\n\nprint template(12, \"\u6c17\u6e29\", 22.4)\n\n12\u6642\u306e\u6c17\u6e29\u306f22.4\n\n\n08. \u6697\u53f7\u6587\n\n\u4e0e\u3048\u3089\u308c\u305f\u6587\u5b57\u5217\u306e\u5404\u6587\u5b57\u3092\uff0c\u4ee5\u4e0b\u306e\u4ed5\u69d8\u3067\u5909\u63db\u3059\u308b\u95a2\u6570cipher\u3092\u5b9f\u88c5\u305b\u3088\uff0e\n\u82f1\u5c0f\u6587\u5b57\u306a\u3089\u3070(219 - \u6587\u5b57\u30b3\u30fc\u30c9)\u306e\u6587\u5b57\u306b\u7f6e\u63db\n\u305d\u306e\u4ed6\u306e\u6587\u5b57\u306f\u305d\u306e\u307e\u307e\u51fa\u529b\n\u3053\u306e\u95a2\u6570\u3092\u7528\u3044\uff0c\u82f1\u8a9e\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6697\u53f7\u5316\u30fb\u5fa9\u53f7\u5316\u305b\u3088\uff0e  \n\ndef cipher(text):\n    \"\"\"\u4e0e\u3048\u3089\u308c\u305f\u6587\u306e\u5404\u6587\u5b57\u3092\uff0c\u4ee5\u4e0b\u306e\u4ed5\u69d8\u3067\u5909\u63db\u3059\u308b\u95a2\u6570\n\n    \u82f1\u5c0f\u6587\u5b57\u306a\u3089\u3070(219 - \u6587\u5b57\u30b3\u30fc\u30c9)\u306e\u6587\u5b57\u306b\u7f6e\u63db\n    \u305d\u306e\u4ed6\u306e\u6587\u5b57\u306f\u305d\u306e\u307e\u307e\u51fa\u529b\n    \"\"\"\n    cipher_text = \"\"\n    for char in text:\n        if char.islower():\n            cipher_text += chr(219 - ord(char))\n        else:\n            cipher_text += char\n    return cipher_text\n\n# \u82f1\u8a9e\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6697\u53f7\u5316\u30fb\u5fa9\u53f7\u5316\ntext = \"Hi He Lied Because Boron Could Not Oxidize Fluorine.\"\nprint(\"origin text : \" + text)\ncipher_text = cipher(text)\nprint(\"cipher text : \" + cipher_text)\ndecode_text = cipher(cipher_text)\nprint(\"decode text : \" + decode_text)\n\norigin text : Hi He Lied Because Boron Could Not Oxidize Fluorine.\ncipher text : Hr Hv Lrvw Bvxzfhv Blilm Clfow Nlg Ocrwrav Foflirmv.\ndecode text : Hi He Lied Because Boron Could Not Oxidize Fluorine.\n\n\u300c\u8a00\u8a9e\u51e6\u7406100\u30ce\u30c3\u30af 2015 \u7b2c\uff11\u7ae0\u300d\u89e3\u7b54\u4f8b\u3092\u306e\u305b\u3066\u3044\u307e\u3059\u3002\n\u5b9f\u88c5\u306f\u3001Python 2.7.1\u3067\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\u3054\u610f\u898b\u3001\u3054\u6307\u6458\u7b49\u3042\u308c\u3070\u3001\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\n## \u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af\u3068\u306f\uff1f\n\u6771\u5317\u5927\u5b66\u306e\u4e7e\u30fb\u5ca1\u5d0e\u7814\u7a76\u5ba4\u304c\u516c\u958b\u3057\u3066\u3044\u308b\u554f\u984c\u96c6\u3067\u3059\u3002\u4ee5\u4e0b\u5f15\u7528\u3002\nhttp://www.cl.ecei.tohoku.ac.jp/nlp100/\n>\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af\u306f\uff0c\u5b9f\u8df5\u7684\u306a\u8ab2\u984c\u306b\u53d6\u308a\u7d44\u307f\u306a\u304c\u3089\uff0c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\uff0c\u30c7\u30fc\u30bf\u5206\u6790\uff0c\u7814\u7a76\u306e\u30b9\u30ad\u30eb\u3092\u697d\u3057\u304f\u7fd2\u5f97\u3059\u308b\u3053\u3068\u3092\u76ee\u6307\u3057\u305f\u554f\u984c\u96c6\u3067\u3059\n\n## \u7b2c\uff11\u7ae0\u306e\u5185\u5bb9\n\u4ee5\u4e0b\u306e\u5185\u5bb9\u3092\u6271\u3044\u307e\u3059\u3002\n>\u30c6\u30ad\u30b9\u30c8\u3084\u6587\u5b57\u5217\u3092\u6271\u3046\u984c\u6750\u306b\u53d6\u308a\u7d44\u307f\u306a\u304c\u3089\uff0c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306e\u3084\u3084\u9ad8\u5ea6\u306a\u30c8\u30d4\u30c3\u30af\u3092\u5fa9\u7fd2\u3057\u307e\u3059\uff0e\n>\u6587\u5b57\u5217, \u30e6\u30cb\u30b3\u30fc\u30c9, \u30ea\u30b9\u30c8\u578b, \u8f9e\u66f8\u578b, \u96c6\u5408\u578b, \u30a4\u30c6\u30ec\u30fc\u30bf, \u30b9\u30e9\u30a4\u30b9, \u4e71\u6570\n\n\u3053\u306e\u554f\u984c\u96c6\u81ea\u4f53Python\u3067\u6271\u3046\u3053\u3068\u3092\u60f3\u5b9a\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u3053\u306e\u7ae0\u3067\u306f\u3001Python\u306e\u6587\u6cd5\u7fd2\u5f97\u306b\u5f79\u7acb\u3064\u554f\u984c\u4e2d\u5fc3\u3068\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\n## 00. \u6587\u5b57\u5217\u306e\u9006\u9806\n>\u6587\u5b57\u5217\"stressed\"\u306e\u6587\u5b57\u3092\u9006\u306b\uff08\u672b\u5c3e\u304b\u3089\u5148\u982d\u306b\u5411\u304b\u3063\u3066\uff09\u4e26\u3079\u305f\u6587\u5b57\u5217\u3092\u5f97\u3088\uff0e\n\n\n```python\nword = \"stressed\"\nprint word[::-1] #\u6587\u5b57\u5217\u306e\u5f8c\u308d\u304b\u3089\u30b9\u30e9\u30a4\u30b9\n```\n\n    desserts\n\n\n## 01. \u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\n>\u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\u3068\u3044\u3046\u6587\u5b57\u5217\u306e1,3,5,7\u6587\u5b57\u76ee\u3092\u53d6\u308a\u51fa\u3057\u3066\u9023\u7d50\u3057\u305f\u6587\u5b57\u5217\u3092\u5f97\u3088\uff0e\n\n\n```python\nword = u\"\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\"\nprint word[::2]\n```\n\n    \u30d1\u30c8\u30ab\u30fc\n\n\n## 02. \u300c\u30d1\u30c8\u30ab\u30fc\u300d\uff0b\u300c\u30bf\u30af\u30b7\u30fc\u300d\uff1d\u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\n>\u300c\u30d1\u30c8\u30ab\u30fc\u300d\uff0b\u300c\u30bf\u30af\u30b7\u30fc\u300d\u306e\u6587\u5b57\u3092\u5148\u982d\u304b\u3089\u4ea4\u4e92\u306b\u9023\u7d50\u3057\u3066\u6587\u5b57\u5217\u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\u3092\u5f97\u3088\uff0e\n\n\n```python\nword1 = u\"\u30d1\u30c8\u30ab\u30fc\"\nword2 = u\"\u30bf\u30af\u30b7\u30fc\"\njoined_word = [x + y for x , y in zip(word1, word2)]\nprint ''.join(joined_word)\n```\n\n    \u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\n\n\n## 03. \u5186\u5468\u7387\n>\"Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.\"\u3068\u3044\u3046\u6587\u3092\u5358\u8a9e\u306b\u5206\u89e3\u3057\uff0c\u5404\u5358\u8a9e\u306e\uff08\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\uff09\u6587\u5b57\u6570\u3092\u5148\u982d\u304b\u3089\u51fa\u73fe\u9806\u306b\u4e26\u3079\u305f\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u305b\u3088\uff0e\n\n\n```python\ntext = \"Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.\"\ntext = text.translate(None, \".,\") #\u300c.\u300d\u300c,\u300d\u3092\u524a\u9664\u3002\ntext = text.split() #str.split()\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u7a7a\u767d\u3067\u5207\u308a\u5206\u3051\nnum_char = [len(x) for x in text]\nprint text\nprint num_char\n```\n\n    ['Now', 'I', 'need', 'a', 'drink', 'alcoholic', 'of', 'course', 'after', 'the', 'heavy', 'lectures', 'involving', 'quantum', 'mechanics']\n    [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9]\n\n\n## 04. \u5143\u7d20\u8a18\u53f7\n>\"Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.\"\u3068\u3044\u3046\u6587\u3092\u5358\u8a9e\u306b\u5206\u89e3\u3057\uff0c1, 5, 6, 7, 8, 9, 15, 16, 19\u756a\u76ee\u306e\u5358\u8a9e\u306f\u5148\u982d\u306e1\u6587\u5b57\uff0c\u305d\u308c\u4ee5\u5916\u306e\u5358\u8a9e\u306f\u5148\u982d\u306b2\u6587\u5b57\u3092\u53d6\u308a\u51fa\u3057\uff0c\u53d6\u308a\u51fa\u3057\u305f\u6587\u5b57\u5217\u304b\u3089\u5358\u8a9e\u306e\u4f4d\u7f6e\uff08\u5148\u982d\u304b\u3089\u4f55\u756a\u76ee\u306e\u5358\u8a9e\u304b\uff09\u3078\u306e\u9023\u60f3\u914d\u5217\uff08\u8f9e\u66f8\u578b\u3082\u3057\u304f\u306f\u30de\u30c3\u30d7\u578b\uff09\u3092\u4f5c\u6210\u305b\u3088\uff0e\n\n\n```python\ntext = \"Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.\"\ntext = text.translate(None, \".,\") \ntext = text.split() \npos_dict = {}\n\nfor i, x in enumerate(text, start=1):\n\tif i in [1, 5, 6, 7, 8, 9, 15, 16, 19]:\n\t\tpos_dict[x[:1]] = i\n\telse:\n\t\tpos_dict[x[:2]] = i\n\n# \u8f9e\u66f8\u306e\u4e2d\u8eab\u3092\u51fa\u73fe\u9806\u306b\u30bd\u30fc\u30c8\u3057\u3066\u8868\u793a cf.http://qiita.com/xxthermidorxx/items/b546471c37b2f443f4c7\nprint sorted(pos_dict.items(), key=lambda x:x[1])\n```\n\n    [('H', 1), ('He', 2), ('Li', 3), ('Be', 4), ('B', 5), ('C', 6), ('N', 7), ('O', 8), ('F', 9), ('Ne', 10), ('Na', 11), ('Mi', 12), ('Al', 13), ('Si', 14), ('P', 15), ('S', 16), ('Cl', 17), ('Ar', 18), ('K', 19), ('Ca', 20)]\n\n## 05. n-gram\n>\u4e0e\u3048\u3089\u308c\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\uff08\u6587\u5b57\u5217\u3084\u30ea\u30b9\u30c8\u306a\u3069\uff09\u304b\u3089n-gram\u3092\u4f5c\u308b\u95a2\u6570\u3092\u4f5c\u6210\u305b\u3088\uff0e\u3053\u306e\u95a2\u6570\u3092\u7528\u3044\uff0c\"I am an NLPer\"\u3068\u3044\u3046\u6587\u304b\u3089\u5358\u8a9ebi-gram\uff0c\u6587\u5b57bi-gram\u3092\u5f97\u3088\uff0e\n\nN_gram\u306e\u89e3\u8aac \u2192 https://kotobank.jp/word/N%E3%82%B0%E3%83%A9%E3%83%A0-1702302\n\n```python\ndef n_gram(char, n, mode = \"word\"):\n\t\"\"\"\n\tArgs:\n        char:\u5bfe\u8c61\u306e\u6587\u5b57\u5217\n        n:N\u306e\u5024\n        mode:\u5358\u8a9e\u3067\u533a\u5207\u308b\u306a\u3089\u300cword\u300d, \u6587\u5b57\u3067\u533a\u5207\u308b\u306a\u3089\u300cchar\u300d.\u30c7\u30d5\u30a9\u30eb\u30c8\u306fword\n\tReturn:\n        n_gram:N-gram\u3067\u5206\u89e3\u3057\u305f\u7d50\u679c\n\t\"\"\"\n\tn_gram = []\n\t# \u5358\u8a9e\u3000or \u6587\u5b57\u3067\u533a\u5207\u308b\n\tif (mode == \"word\"):\n\t\tchars = char.split()  # \u5358\u8a9e\u3067\u533a\u5207\u308b\n\tif (mode == \"char\"):\n\t\tchars = char.translate(None, \" \")  # \u6587\u5b57\u3067\u533a\u5207\u308b\n\n\tfirst_n = n\n\twhile n - 1 < len(chars):\n\t\tn_gram.append(chars[n - first_n: n])\n\t\tn += 1\n\n\treturn n_gram\n\n\n# \u554f\u306e\u56de\u7b54\nchar = \"I am an NLPer\"\nprint \"\u5358\u8a9ebi-gram\"\nwords = n_gram(char, 2, \"word\")\nprint words\n\nprint \"\u6587\u5b57bi-gram\"\nchars = n_gram(char, 2, \"char\")\nprint chars\n```\n\n    \u5358\u8a9ebi-gram\n    [['I', 'am'], ['am', 'an'], ['an', 'NLPer']]\n    \u6587\u5b57bi-gram\n    ['Ia', 'am', 'ma', 'an', 'nN', 'NL', 'LP', 'Pe', 'er']\n\n\n## 06. \u96c6\u5408\n>\"paraparaparadise\"\u3068\"paragraph\"\u306b\u542b\u307e\u308c\u308b\u6587\u5b57bi-gram\u306e\u96c6\u5408\u3092\uff0c\u305d\u308c\u305e\u308c, X\u3068Y\u3068\u3057\u3066\u6c42\u3081\uff0cX\u3068Y\u306e\u548c\u96c6\u5408\uff0c\u7a4d\u96c6\u5408\uff0c\u5dee\u96c6\u5408\u3092\u6c42\u3081\u3088\uff0e\u3055\u3089\u306b\uff0c'se'\u3068\u3044\u3046bi-gram\u304cX\u304a\u3088\u3073Y\u306b\u542b\u307e\u308c\u308b\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u3088\uff0e\n\n\u554f\u984c05\u306en_gram()\u3092\u5229\u7528\u3057\u3066\u89e3\u7b54\u3057\u3066\u3044\u307e\u3059\u3002\n\n```python\nchar1 = \"paraparaparadise\"\n\nchar2 = \"paragraph\"\n\nx = n_gram(char1, 2, \"char\")\ny = n_gram(char2, 2, \"char\")\nprint \"bi-gram\"\nprint x\nprint y\n```\n\n    bi-gram\n    ['pa', 'ar', 'ra', 'ap', 'pa', 'ar', 'ra', 'ap', 'pa', 'ar', 'ra', 'ad', 'di', 'is', 'se']\n    ['pa', 'ar', 'ra', 'ag', 'gr', 'ra', 'ap', 'ph']\n\n\n\n```python\n# set\u578b\u3078\u5909\u63db\nx = set(n_gram(char1, 2, \"char\"))\ny = set(n_gram(char2, 2, \"char\"))\n```\n\n\n```python\nprint \"\u548c\u96c6\u5408\"\nprint x | y\n```\n\n    \u548c\u96c6\u5408\n    set(['ad', 'ag', 'di', 'is', 'ap', 'pa', 'ra', 'ph', 'ar', 'se', 'gr'])\n\n```python\nprint \"\u7a4d\u96c6\u5408\"\nprint x & y\n```\n\n    \u7a4d\u96c6\u5408\n    set(['ap', 'pa', 'ar', 'ra'])\n\n\n\n```python\nprint \"\u5dee\u96c6\u5408\"\nprint x - y\n```\n\n    \u5dee\u96c6\u5408\n    set(['is', 'ad', 'se', 'di'])\n\n\n\n```python\nprint \"'se'\u304cX\u304a\u3088\u3073Y\u306b\u542b\u307e\u308c\u308b\u304b\u3069\u3046\u304b\"\nprint \"se\" in x\nprint \"se\" in y\n```\n\n    'se'\u304cX\u304a\u3088\u3073Y\u306b\u542b\u307e\u308c\u308b\u304b\u3069\u3046\u304b\n    True\n    False\n\n\n## 07. \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u3088\u308b\u6587\u751f\u6210\n>\u5f15\u6570x, y, z\u3092\u53d7\u3051\u53d6\u308a\u300cx\u6642\u306ey\u306fz\u300d\u3068\u3044\u3046\u6587\u5b57\u5217\u3092\u8fd4\u3059\u95a2\u6570\u3092\u5b9f\u88c5\u305b\u3088\uff0e\u3055\u3089\u306b\uff0cx=12, y=\"\u6c17\u6e29\", z=22.4\u3068\u3057\u3066\uff0c\u5b9f\u884c\u7d50\u679c\u3092\u78ba\u8a8d\u305b\u3088\uff0e\n\n\n```python\ndef template(x, y, z):\n\t\"\"\"\n\tArgs:\n        x:\u6642\u9593\n        y:\u300c\u6c17\u6e29\u300d\u306a\u3069\u306e\u4e8b\u8c61\n        z:\u5024\n\tReturn:\n        char:x\u6642\u306ey\u306fz\n\t\"\"\"\n\tchar = \"%s\u6642\u306e%s\u306f%s\" % (x, y, z)\n\treturn char\n\nprint template(12, \"\u6c17\u6e29\", 22.4)\n```\n\n    12\u6642\u306e\u6c17\u6e29\u306f22.4\n\n\n## 08. \u6697\u53f7\u6587\n>\u4e0e\u3048\u3089\u308c\u305f\u6587\u5b57\u5217\u306e\u5404\u6587\u5b57\u3092\uff0c\u4ee5\u4e0b\u306e\u4ed5\u69d8\u3067\u5909\u63db\u3059\u308b\u95a2\u6570cipher\u3092\u5b9f\u88c5\u305b\u3088\uff0e\n>\n>\u82f1\u5c0f\u6587\u5b57\u306a\u3089\u3070(219 - \u6587\u5b57\u30b3\u30fc\u30c9)\u306e\u6587\u5b57\u306b\u7f6e\u63db\n>\u305d\u306e\u4ed6\u306e\u6587\u5b57\u306f\u305d\u306e\u307e\u307e\u51fa\u529b\n>\u3053\u306e\u95a2\u6570\u3092\u7528\u3044\uff0c\u82f1\u8a9e\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6697\u53f7\u5316\u30fb\u5fa9\u53f7\u5316\u305b\u3088\uff0e  \n\n```python\ndef cipher(text):\n\t\"\"\"\u4e0e\u3048\u3089\u308c\u305f\u6587\u306e\u5404\u6587\u5b57\u3092\uff0c\u4ee5\u4e0b\u306e\u4ed5\u69d8\u3067\u5909\u63db\u3059\u308b\u95a2\u6570\n    \n\t\u82f1\u5c0f\u6587\u5b57\u306a\u3089\u3070(219 - \u6587\u5b57\u30b3\u30fc\u30c9)\u306e\u6587\u5b57\u306b\u7f6e\u63db\n\t\u305d\u306e\u4ed6\u306e\u6587\u5b57\u306f\u305d\u306e\u307e\u307e\u51fa\u529b\n\t\"\"\"\n\tcipher_text = \"\"\n\tfor char in text:\n\t\tif char.islower():\n\t\t\tcipher_text += chr(219 - ord(char))\n\t\telse:\n\t\t\tcipher_text += char\n\treturn cipher_text\n\n# \u82f1\u8a9e\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6697\u53f7\u5316\u30fb\u5fa9\u53f7\u5316\ntext = \"Hi He Lied Because Boron Could Not Oxidize Fluorine.\"\nprint(\"origin text : \" + text)\ncipher_text = cipher(text)\nprint(\"cipher text : \" + cipher_text)\ndecode_text = cipher(cipher_text)\nprint(\"decode text : \" + decode_text)\n```\n\n    origin text : Hi He Lied Because Boron Could Not Oxidize Fluorine.\n    cipher text : Hr Hv Lrvw Bvxzfhv Blilm Clfow Nlg Ocrwrav Foflirmv.\n    decode text : Hi He Lied Because Boron Could Not Oxidize Fluorine.\n", "tags": ["\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af", "\u81ea\u7136\u8a00\u8a9e\u51e6\u7406", "Python", "Jupyter"]}