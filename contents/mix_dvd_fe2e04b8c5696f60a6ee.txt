{"context": "\n\n\u306f\u3058\u3081\u306b\n\u30aa\u30fc\u30d7\u30f3\u30c7\u30fc\u30bf\u306e\u6d3b\u7528\u4f8b\u3068\u3057\u3066\u4f55\u304b\u3044\u3044\u6750\u6599\u304c\u306a\u3044\u304b\u306a\u301c\u3068\u63a2\u3057\u3066\u3044\u305f\u3089\u3001\u30c7\u30fc\u30bf\u30b7\u30c6\u30a3\u9bd6\u6c5f\u306e\u30b5\u30a4\u30c8\u306b\u3066\u3001\u6c34\u4f4d\u30c7\u30fc\u30bf\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u306e\u3092\u898b\u3064\u3051\u305f\u306e\u3067\u3001\u3053\u308c\u3092\u4f7f\u3063\u3066\u6a5f\u68b0\u5b66\u7fd2\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nhttp://data.city.sabae.lg.jp/top_page/\n\n\u30c7\u30fc\u30bf\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n\u4e0a\u8a18\u30b5\u30a4\u30c8\u306b\u3042\u308b\u300c\u30aa\u30fc\u30d7\u30f3\u30c7\u30fc\u30bf\u300d\u306e\u30da\u30fc\u30b8\u3067\u300c\u9632\u707d\u300d\u306e\u30b0\u30eb\u30fc\u30d7\u306b\u4ee5\u4e0b\u306e\u8868\u8a18\u304c\u3042\u308a\u307e\u3059\u3002\n\u6c34\u4f4d\u30c7\u30fc\u30bf(\u798f\u4e95\u770c\u9bd6\u6c5f\u5e02)\n\u8ad6\u624b\u5ddd\u6392\u6c34\u6a5f\u5834 [CSV]\n\u9bd6\u6c5f\u5e02\u5185\u306b\u3042\u308b\u6c34\u4f4d\u8a08\u306e\u30c7\u30fc\u30bf\u3067\u3059\u3002 \u6c34\u4f4d\u306e\u5358\u4f4d : cm \u30c7\u30fc\u30bf : 1000\u4ef6\n\n\n\u6a19\u6e96\u3067\u306f1,000\u4ef6\u306e\u30c7\u30fc\u30bf\u3068\u306e\u3053\u3068\u306a\u306e\u3067\u3059\u304c\u3001\u3054\u306b\u3087\u3054\u306b\u3087\u3059\u308b\u3068\u3082\u3046\u5c11\u3057\u591a\u304f\u53d6\u5f97\u3067\u304d\u305f\u306e\u3067\u305d\u308c\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u6c17\u8c61\u5e81\u304b\u3089\u904e\u53bb\u306e\u6c17\u8c61\u30c7\u30fc\u30bf\u304c\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u308b\u306e\u3067\u3001\u8fd1\u304f\u306b\u3042\u308b\u798f\u4e95\u5e02\u306e\u964d\u6c34\u91cf\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\nhttp://www.data.jma.go.jp/gmd/risk/obsdl/index.php\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8aad\u8fbc\nJupyter Notebook\u3092\u4f7f\u7528\u3057\u3001\u4ee5\u4e0b\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\nfrom ipywidgets import FloatProgress\nfrom IPython.display import display\n\n%matplotlib inline\nimport matplotlib\nimport matplotlib.pyplot as plt\n\nimport pandas as pd\nimport numpy as np\nimport datetime\n\n\n\u6c34\u4f4d\u30c7\u30fc\u30bf\u306e\u8aad\u8fbc\nfilename = \"sparql.csv\"\ndf = pd.read_csv(filename, header=None)\n\n\u30b0\u30e9\u30d5\u3067\u8868\u793a\u3057\u3066\u307f\u308b\u3002\ntmp = []\nfor i in range(len(df)):\n    pos = len(df) - 1 - i\n    tmp.append(df.ix[pos][2])\n\npd.DataFrame({'level': np.array(tmp)}).plot(figsize=(15,5))\n\n\n\u6c34\u4f4d\u30c7\u30fc\u30bf\u306f5\u5206\u9593\u9694\u3067\u53d6\u5f97\u3055\u308c\u3066\u304a\u308a\u3001\u6c17\u8c61\u5e81\u306e\u30c7\u30fc\u30bf\u3068\u6642\u7cfb\u5217\u3092\u3042\u308f\u305b\u308b\u305f\u3081\u306b\u30c7\u30fc\u30bf\u3092\u52a0\u5de5\u3057\u307e\u3059\u3002\n# \u30c7\u30fc\u30bf\u306e\u958b\u59cb\u65e5\u3068\u7d42\u4e86\u65e5\u306e\u53d6\u5f97\ndt1 = datetime.datetime.strptime(df[1][len(df)-1],\"%Y-%m-%dT%H:%M:%S+09:00\")\ndt1 = datetime.datetime(dt1.year,dt1.month,dt1.day,0,0)\ndt2 = datetime.datetime.strptime(df[1][0],\"%Y-%m-%dT%H:%M:%S+09:00\")\n\nprint(\"dt1:\",dt1)\nprint(\"dt2:\",dt2)\n\n# \u30c7\u30fc\u30bf\u306e\u65e5\u6570\u3092\u53d6\u5f97\ndt = (dt2-dt1).days + 1\n\n# 1\u6642\u9593\u6bce\u306e\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\u3092\u6e96\u5099\nlevel = [0] * dt * 24\ndt_al = [0] * dt * 24\n\n# \u30d7\u30ed\u30b0\u30ec\u30b9\u30d0\u30fc\u306e\u8a2d\u5b9a\nfp = FloatProgress(min=0, max=len(df))\ndisplay(fp)\n\nfor i in range(len(df)):\n    wk = datetime.datetime.strptime(df[1][len(df)-i-1],\"%Y-%m-%dT%H:%M:%S+09:00\")\n    pos = (wk - dt1).days * 24 + wk.hour\n    dt_al[pos] = datetime.datetime(wk.year,wk.month,wk.day,wk.hour,0)\n\n    if wk.minute == 0:\n        level[pos] = df[2][len(df)-1-i]\n\n    fp.value = i\n\n\n\u964d\u6c34\u91cf\u30c7\u30fc\u30bf\u306e\u8aad\u8fbc\nCSV\u306b\u6570\u884c\u3044\u3089\u306a\u3044\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u3053\u3068\u3068\u3001\u6587\u5b57\u30b3\u30fc\u30c9\u304c\u30b7\u30d5\u30c8JIS\u3067\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u3002\n\u307e\u305f\u3001\u8aad\u307f\u8fbc\u3093\u3060\u30c7\u30fc\u30bf\u3092\u30b0\u30e9\u30d5\u8868\u793a\u3057\u3066\u307f\u308b\u3002\nfilename = \"data.csv\"\ndf = pd.read_csv(filename,encoding=\"SHIFT-JIS\",skiprows=4)\ndf.plot(figsize=(15,5))\n\n\n\n\u6c34\u4f4d\u3068\u964d\u6c34\u91cf\u306e\u30c7\u30fc\u30bf\u3092\u540c\u3058\u5f62\u5f0f\u306e\u914d\u5217\u306b\u683c\u7d0d\n\u30c7\u30fc\u30bf\u3092\u6271\u3044\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306b\u914d\u5217\u3078\u683c\u7d0d\u3057\u3001\u3064\u3044\u3067\u306b\u30b0\u30e9\u30d5\u8868\u793a\u3092\u3057\u3066\u307f\u308b\u3002\n# \u914d\u5217\u306e\u6e96\u5099\nrain = [0]*len(level)\n\nfor i in range(len(df)):\n    wk = datetime.datetime.strptime(df.ix[i][0],\"%Y/%m/%d %H:%M:%S\")\n    if (wk < dt2) and (wk - dt1).days >= 0:\n        pos = (wk - dt1).days * 24 + wk.hour\n        rain[pos] = df.ix[i][1]\n\n# \u30b0\u30e9\u30d5\u3067\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\u3059\u308b\npp = pd.DataFrame({'level': np.array(level), 'rain': np.array(rain)*15})\npp.plot(figsize=(15,5))\n\n\n\u306a\u3093\u3060\u304b\u6b20\u640d\u30c7\u30fc\u30bf\u304c\u305f\u304f\u3055\u3093\u3042\u308a\u305d\u3046...\uff08\u6c57\uff09\n\n\u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u691c\u8a0e\n\u30b0\u30e9\u30d5\u3092\u898b\u308b\u3068\u3001\u96e8\u304c\u964d\u3063\u305f\u5f8c\u306b\u6c34\u4f4d\u304c\u5897\u3048\u308b\u50be\u5411\u306b\u3042\u308b\u3088\u3046\u306a\u306e\u3067\u300148\u6642\u9593\u524d\u304b\u3089\u305d\u306e\u6642\u9593\u307e\u3067\u306e\u964d\u6c34\u91cf\u306e\u60c5\u5831\u3092\u5165\u529b\u3068\u3057\u3001\u6c34\u4f4d\u3092\u51fa\u529b\u306e\u6559\u5e2b\u30c7\u30fc\u30bf\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n# 48\u6642\u9593\u306e\u964d\u6c34\u91cf\u3092\u4e8c\u6b21\u5143\u914d\u5217\u3067\u53d6\u5f97\nrow = len(level)\ntmp = np.zeros((row,48))\n\nfp = FloatProgress(min=0, max=row)\ndisplay(fp)\n\nfor i in range(row):\n    for j in range(len(tmp[0])):\n        pos = row - 1 - i - j\n        tmp[row-1-i][j] = rain[pos]\n    fp.value = i\n\n\n\u6b20\u640d\u30c7\u30fc\u30bf\u306e\u30c8\u30ea\u30df\u30f3\u30b0\n\u6c34\u4f4d\u306e\u30c7\u30fc\u30bf\u304c\u53d6\u5f97\u3067\u304d\u3066\u3044\u306a\u3044\u3082\u306e\u306b\u3064\u3044\u3066\u306f\u5fc5\u8981\u304c\u306a\u3044\u306e\u3067\u9664\u53bb\u3057\u307e\u3059\u3002\n# \u6b20\u640d\u30c7\u30fc\u30bf\u6570\u306e\u78ba\u8a8d\nnum = 0\nfor i in range(len(level)):\n    if level[i] == 0:\n        num += 1\n\n# \u30c7\u30fc\u30bf\u683c\u7d0d\u306e\u6e96\u5099\nX = np.empty((0,48))\ny = []\n\nfor i in range(len(level)):\n    if level[i] > 0:\n        X = np.append(X, np.array([tmp[i]]), axis=0)\n        y.append(level[i])\n\n# \u30b0\u30e9\u30d5\u3067\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\u3059\u308b\npp = pd.DataFrame({'level': np.array(y), 'rain': X[:,0]*20})\npp.plot(figsize=(15,5))\n\n\n\u30b0\u30e9\u30d5\u3092\u898b\u308b\u3068\u7d50\u69cb\u7dba\u9e97\u306b\u306a\u3063\u305f\u306e\u304c\u308f\u304b\u308b\u3002\n\n\u6a5f\u68b0\u5b66\u7fd2\n\u30af\u30ea\u30fc\u30cb\u30f3\u30b0\u306e\u7d42\u308f\u3063\u305f\u30c7\u30fc\u30bf\u3067\u5b66\u7fd2\u3057\u3001\u4e88\u6e2c\u3057\u305f\u7d50\u679c\u306e\u30b9\u30b3\u30a2\u3092\u78ba\u8a8d\u3059\u308b\u3002\n# \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u8aad\u307f\u8fbc\u3080\nfrom sklearn import cross_validation\n\n# \u30e9\u30d9\u30eb\u4ed8\u304d\u30c7\u30fc\u30bf\u3092\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8 (X_train, y_train)\u3068\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8 (X_test, y_test)\u306b\u5206\u5272\nX_train, X_test, y_train, y_test = cross_validation.train_test_split(X, y, test_size=.2, random_state=42)\n\n# \u6b63\u898f\u5316\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nscaler.fit(X_train)\n\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)\n\n# \u30e2\u30c7\u30eb\u306e\u8a2d\u5b9a\uff08\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\uff09\nfrom sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(n_estimators=200, max_depth=50, random_state=42)\n\n# \u5b66\u7fd2\u3068\u4e88\u6e2c\nmodel.fit(X_train, y_train)\nresult = model.predict(X_test)\nresult.shape\n\n# \u30b9\u30b3\u30a2\nprint(model.score(X_test,y_test))\n\n\u7d50\u679c\u306f...\n0.185628742515\n\n...\u3060\u3081\u3058\u3083\u3093\uff01\n\n\u7d50\u679c\u306e\u691c\u8a3c\n\u30b9\u30b3\u30a2\u306f\u4f4e\u3044\u3051\u3069\u3001\u3061\u3087\u3063\u3068\u30b0\u30e9\u30d5\u3067\u7d50\u679c\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3059\u3002\npp = pd.DataFrame({'act': np.array(y_test), \"pred\": np.array(result)})\npp.plot(figsize=(15,5))\n\n\n...\u3046\u301c\u3093\u3001\u5fae\u5999\u3002\n\u5c11\u3057\u5de5\u592b\u3057\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30c7\u30fc\u30bf\u3092\u6642\u7cfb\u5217\u306b\u5206\u5272\u3057\u3066\u5b66\u7fd2\u3068\u4e88\u6e2c\u3092\u3059\u308b\u3002\nnum = int(len(X) * 0.8)\nprint(len(X), num, len(X)-num)\n\nX_train = X[:num]\nX_test = X[num:]\ny_train = y[:num]\ny_test = y[num:]\n\n\n...\u306a\u3093\u3068\uff01\n\u3061\u3087\u3063\u3068\u3044\u3044\u611f\u3058(^-^)\n\u3067\u306f\u3001\u3053\u306e\u7d50\u679c\u304b\u3089\u4f55\u304c\u3067\u304d\u308b\u304b\u306a\u301c\u3068\u8003\u3048\u3066\u307f\u308b\u3068\u3001\u964d\u6c34\u91cf\u304b\u3089\u6c34\u4f4d\u3092\u7d99\u7d9a\u7684\u306b\u4e88\u6e2c\u3059\u308b\u3053\u3068\u3067\u6025\u6fc0\u306a\u6c34\u4f4d\u306e\u4e0a\u6607\u3092\u691c\u77e5\u3057\u3001\u907f\u96e3\u8b66\u544a\u3092\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u306b\u4f7f\u3048\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\u305d\u3046\u8003\u3048\u308b\u3068\u3001\u3082\u3063\u3068\u3044\u308d\u3044\u308d\u306a\u81ea\u6cbb\u4f53\u304c\u3053\u3046\u3057\u305f\u30c7\u30fc\u30bf\u3092\u516c\u958b\u3057\u3066\u304f\u308c\u308b\u3068\u3044\u3044\u306a\u3068\u601d\u3044\u307e\u3059\u306d\u3002\n\u4ee5\u4e0a\u3001\u6b21\u306f\u4f55\u3057\u3088\u3046\u304b\u306a\u301c\u3002\n# \u306f\u3058\u3081\u306b\n\n\u30aa\u30fc\u30d7\u30f3\u30c7\u30fc\u30bf\u306e\u6d3b\u7528\u4f8b\u3068\u3057\u3066\u4f55\u304b\u3044\u3044\u6750\u6599\u304c\u306a\u3044\u304b\u306a\u301c\u3068\u63a2\u3057\u3066\u3044\u305f\u3089\u3001\u30c7\u30fc\u30bf\u30b7\u30c6\u30a3\u9bd6\u6c5f\u306e\u30b5\u30a4\u30c8\u306b\u3066\u3001\u6c34\u4f4d\u30c7\u30fc\u30bf\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u306e\u3092\u898b\u3064\u3051\u305f\u306e\u3067\u3001\u3053\u308c\u3092\u4f7f\u3063\u3066\u6a5f\u68b0\u5b66\u7fd2\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\nhttp://data.city.sabae.lg.jp/top_page/\n\n# \u30c7\u30fc\u30bf\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n\n\u4e0a\u8a18\u30b5\u30a4\u30c8\u306b\u3042\u308b\u300c\u30aa\u30fc\u30d7\u30f3\u30c7\u30fc\u30bf\u300d\u306e\u30da\u30fc\u30b8\u3067\u300c\u9632\u707d\u300d\u306e\u30b0\u30eb\u30fc\u30d7\u306b\u4ee5\u4e0b\u306e\u8868\u8a18\u304c\u3042\u308a\u307e\u3059\u3002\n\n```\n\u6c34\u4f4d\u30c7\u30fc\u30bf(\u798f\u4e95\u770c\u9bd6\u6c5f\u5e02)\n\u8ad6\u624b\u5ddd\u6392\u6c34\u6a5f\u5834 [CSV]\n\u9bd6\u6c5f\u5e02\u5185\u306b\u3042\u308b\u6c34\u4f4d\u8a08\u306e\u30c7\u30fc\u30bf\u3067\u3059\u3002 \u6c34\u4f4d\u306e\u5358\u4f4d : cm \u30c7\u30fc\u30bf : 1000\u4ef6\n```\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-10-28 12.41.43.png](https://qiita-image-store.s3.amazonaws.com/0/114240/c9ad29a6-514d-cde3-f970-47dafaac9eff.png)\n\n\n\u6a19\u6e96\u3067\u306f1,000\u4ef6\u306e\u30c7\u30fc\u30bf\u3068\u306e\u3053\u3068\u306a\u306e\u3067\u3059\u304c\u3001\u3054\u306b\u3087\u3054\u306b\u3087\u3059\u308b\u3068\u3082\u3046\u5c11\u3057\u591a\u304f\u53d6\u5f97\u3067\u304d\u305f\u306e\u3067\u305d\u308c\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n\u307e\u305f\u3001\u6c17\u8c61\u5e81\u304b\u3089\u904e\u53bb\u306e\u6c17\u8c61\u30c7\u30fc\u30bf\u304c\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u308b\u306e\u3067\u3001\u8fd1\u304f\u306b\u3042\u308b\u798f\u4e95\u5e02\u306e\u964d\u6c34\u91cf\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\n\nhttp://www.data.jma.go.jp/gmd/risk/obsdl/index.php\n\n# \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8aad\u8fbc\n\nJupyter Notebook\u3092\u4f7f\u7528\u3057\u3001\u4ee5\u4e0b\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\n```py:\nfrom ipywidgets import FloatProgress\nfrom IPython.display import display\n\n%matplotlib inline\nimport matplotlib\nimport matplotlib.pyplot as plt\n\nimport pandas as pd\nimport numpy as np\nimport datetime\n```\n\n# \u6c34\u4f4d\u30c7\u30fc\u30bf\u306e\u8aad\u8fbc\n\n```py:\nfilename = \"sparql.csv\"\ndf = pd.read_csv(filename, header=None)\n```\n\n\u30b0\u30e9\u30d5\u3067\u8868\u793a\u3057\u3066\u307f\u308b\u3002\n\n```py:\ntmp = []\nfor i in range(len(df)):\n    pos = len(df) - 1 - i\n    tmp.append(df.ix[pos][2])\n\npd.DataFrame({'level': np.array(tmp)}).plot(figsize=(15,5))\n```\n\n![Unknown.png](https://qiita-image-store.s3.amazonaws.com/0/114240/385b9aad-9c83-e10d-f664-37c2743c5de7.png)\n\n\u6c34\u4f4d\u30c7\u30fc\u30bf\u306f5\u5206\u9593\u9694\u3067\u53d6\u5f97\u3055\u308c\u3066\u304a\u308a\u3001\u6c17\u8c61\u5e81\u306e\u30c7\u30fc\u30bf\u3068\u6642\u7cfb\u5217\u3092\u3042\u308f\u305b\u308b\u305f\u3081\u306b\u30c7\u30fc\u30bf\u3092\u52a0\u5de5\u3057\u307e\u3059\u3002\n\n```py:\n# \u30c7\u30fc\u30bf\u306e\u958b\u59cb\u65e5\u3068\u7d42\u4e86\u65e5\u306e\u53d6\u5f97\ndt1 = datetime.datetime.strptime(df[1][len(df)-1],\"%Y-%m-%dT%H:%M:%S+09:00\")\ndt1 = datetime.datetime(dt1.year,dt1.month,dt1.day,0,0)\ndt2 = datetime.datetime.strptime(df[1][0],\"%Y-%m-%dT%H:%M:%S+09:00\")\n\nprint(\"dt1:\",dt1)\nprint(\"dt2:\",dt2)\n\n# \u30c7\u30fc\u30bf\u306e\u65e5\u6570\u3092\u53d6\u5f97\ndt = (dt2-dt1).days + 1\n\n# 1\u6642\u9593\u6bce\u306e\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\u3092\u6e96\u5099\nlevel = [0] * dt * 24\ndt_al = [0] * dt * 24\n\n# \u30d7\u30ed\u30b0\u30ec\u30b9\u30d0\u30fc\u306e\u8a2d\u5b9a\nfp = FloatProgress(min=0, max=len(df))\ndisplay(fp)\n\nfor i in range(len(df)):\n    wk = datetime.datetime.strptime(df[1][len(df)-i-1],\"%Y-%m-%dT%H:%M:%S+09:00\")\n    pos = (wk - dt1).days * 24 + wk.hour\n    dt_al[pos] = datetime.datetime(wk.year,wk.month,wk.day,wk.hour,0)\n\n    if wk.minute == 0:\n        level[pos] = df[2][len(df)-1-i]\n    \n    fp.value = i\n```\n\n# \u964d\u6c34\u91cf\u30c7\u30fc\u30bf\u306e\u8aad\u8fbc\n\nCSV\u306b\u6570\u884c\u3044\u3089\u306a\u3044\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u3053\u3068\u3068\u3001\u6587\u5b57\u30b3\u30fc\u30c9\u304c\u30b7\u30d5\u30c8JIS\u3067\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u3002\n\u307e\u305f\u3001\u8aad\u307f\u8fbc\u3093\u3060\u30c7\u30fc\u30bf\u3092\u30b0\u30e9\u30d5\u8868\u793a\u3057\u3066\u307f\u308b\u3002\n\n```py:\nfilename = \"data.csv\"\ndf = pd.read_csv(filename,encoding=\"SHIFT-JIS\",skiprows=4)\ndf.plot(figsize=(15,5))\n```\n\n![Unknown.png](https://qiita-image-store.s3.amazonaws.com/0/114240/b1e38f63-5e43-577f-9a75-30320c87e30a.png)\n\n# \u6c34\u4f4d\u3068\u964d\u6c34\u91cf\u306e\u30c7\u30fc\u30bf\u3092\u540c\u3058\u5f62\u5f0f\u306e\u914d\u5217\u306b\u683c\u7d0d\n\n\u30c7\u30fc\u30bf\u3092\u6271\u3044\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306b\u914d\u5217\u3078\u683c\u7d0d\u3057\u3001\u3064\u3044\u3067\u306b\u30b0\u30e9\u30d5\u8868\u793a\u3092\u3057\u3066\u307f\u308b\u3002\n\n```py:\n# \u914d\u5217\u306e\u6e96\u5099\nrain = [0]*len(level)\n\nfor i in range(len(df)):\n    wk = datetime.datetime.strptime(df.ix[i][0],\"%Y/%m/%d %H:%M:%S\")\n    if (wk < dt2) and (wk - dt1).days >= 0:\n        pos = (wk - dt1).days * 24 + wk.hour\n        rain[pos] = df.ix[i][1]\n\n# \u30b0\u30e9\u30d5\u3067\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\u3059\u308b\npp = pd.DataFrame({'level': np.array(level), 'rain': np.array(rain)*15})\npp.plot(figsize=(15,5))\n```\n\n![Unknown-1.png](https://qiita-image-store.s3.amazonaws.com/0/114240/d6786b76-4137-a1a3-022b-8f5dfdb227bc.png)\n\n\n\u306a\u3093\u3060\u304b\u6b20\u640d\u30c7\u30fc\u30bf\u304c\u305f\u304f\u3055\u3093\u3042\u308a\u305d\u3046...\uff08\u6c57\uff09\n\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u691c\u8a0e\n\n\u30b0\u30e9\u30d5\u3092\u898b\u308b\u3068\u3001\u96e8\u304c\u964d\u3063\u305f\u5f8c\u306b\u6c34\u4f4d\u304c\u5897\u3048\u308b\u50be\u5411\u306b\u3042\u308b\u3088\u3046\u306a\u306e\u3067\u300148\u6642\u9593\u524d\u304b\u3089\u305d\u306e\u6642\u9593\u307e\u3067\u306e\u964d\u6c34\u91cf\u306e\u60c5\u5831\u3092\u5165\u529b\u3068\u3057\u3001\u6c34\u4f4d\u3092\u51fa\u529b\u306e\u6559\u5e2b\u30c7\u30fc\u30bf\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n\n```py:\n# 48\u6642\u9593\u306e\u964d\u6c34\u91cf\u3092\u4e8c\u6b21\u5143\u914d\u5217\u3067\u53d6\u5f97\nrow = len(level)\ntmp = np.zeros((row,48))\n\nfp = FloatProgress(min=0, max=row)\ndisplay(fp)\n\nfor i in range(row):\n    for j in range(len(tmp[0])):\n        pos = row - 1 - i - j\n        tmp[row-1-i][j] = rain[pos]\n    fp.value = i\n```\n\n# \u6b20\u640d\u30c7\u30fc\u30bf\u306e\u30c8\u30ea\u30df\u30f3\u30b0\n\n\u6c34\u4f4d\u306e\u30c7\u30fc\u30bf\u304c\u53d6\u5f97\u3067\u304d\u3066\u3044\u306a\u3044\u3082\u306e\u306b\u3064\u3044\u3066\u306f\u5fc5\u8981\u304c\u306a\u3044\u306e\u3067\u9664\u53bb\u3057\u307e\u3059\u3002\n\n```py:\n# \u6b20\u640d\u30c7\u30fc\u30bf\u6570\u306e\u78ba\u8a8d\nnum = 0\nfor i in range(len(level)):\n    if level[i] == 0:\n        num += 1\n\n# \u30c7\u30fc\u30bf\u683c\u7d0d\u306e\u6e96\u5099\nX = np.empty((0,48))\ny = []\n\nfor i in range(len(level)):\n    if level[i] > 0:\n        X = np.append(X, np.array([tmp[i]]), axis=0)\n        y.append(level[i])\n\n# \u30b0\u30e9\u30d5\u3067\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\u3059\u308b\npp = pd.DataFrame({'level': np.array(y), 'rain': X[:,0]*20})\npp.plot(figsize=(15,5))\n```\n\n![Unknown-2.png](https://qiita-image-store.s3.amazonaws.com/0/114240/80366f35-8ae9-a698-e258-563e0d0b82e5.png)\n\n\u30b0\u30e9\u30d5\u3092\u898b\u308b\u3068\u7d50\u69cb\u7dba\u9e97\u306b\u306a\u3063\u305f\u306e\u304c\u308f\u304b\u308b\u3002\n\n# \u6a5f\u68b0\u5b66\u7fd2\n\n\u30af\u30ea\u30fc\u30cb\u30f3\u30b0\u306e\u7d42\u308f\u3063\u305f\u30c7\u30fc\u30bf\u3067\u5b66\u7fd2\u3057\u3001\u4e88\u6e2c\u3057\u305f\u7d50\u679c\u306e\u30b9\u30b3\u30a2\u3092\u78ba\u8a8d\u3059\u308b\u3002\n\n```py:\n# \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u8aad\u307f\u8fbc\u3080\nfrom sklearn import cross_validation\n\n# \u30e9\u30d9\u30eb\u4ed8\u304d\u30c7\u30fc\u30bf\u3092\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8 (X_train, y_train)\u3068\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8 (X_test, y_test)\u306b\u5206\u5272\nX_train, X_test, y_train, y_test = cross_validation.train_test_split(X, y, test_size=.2, random_state=42)\n\n# \u6b63\u898f\u5316\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nscaler.fit(X_train)\n\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)\n\n# \u30e2\u30c7\u30eb\u306e\u8a2d\u5b9a\uff08\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\uff09\nfrom sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(n_estimators=200, max_depth=50, random_state=42)\n\n# \u5b66\u7fd2\u3068\u4e88\u6e2c\nmodel.fit(X_train, y_train)\nresult = model.predict(X_test)\nresult.shape\n\n# \u30b9\u30b3\u30a2\nprint(model.score(X_test,y_test))\n```\n\n\u7d50\u679c\u306f...\n\n```py:\n0.185628742515\n```\n\n...\u3060\u3081\u3058\u3083\u3093\uff01\n\n# \u7d50\u679c\u306e\u691c\u8a3c\n\n\u30b9\u30b3\u30a2\u306f\u4f4e\u3044\u3051\u3069\u3001\u3061\u3087\u3063\u3068\u30b0\u30e9\u30d5\u3067\u7d50\u679c\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3059\u3002\n\n```py:\npp = pd.DataFrame({'act': np.array(y_test), \"pred\": np.array(result)})\npp.plot(figsize=(15,5))\n```\n\n![Unknown-1.png](https://qiita-image-store.s3.amazonaws.com/0/114240/e0c02694-085f-78f3-a584-a2e59a38c96f.png)\n\n...\u3046\u301c\u3093\u3001\u5fae\u5999\u3002\n\n\u5c11\u3057\u5de5\u592b\u3057\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30c7\u30fc\u30bf\u3092\u6642\u7cfb\u5217\u306b\u5206\u5272\u3057\u3066\u5b66\u7fd2\u3068\u4e88\u6e2c\u3092\u3059\u308b\u3002\n\n```py:\nnum = int(len(X) * 0.8)\nprint(len(X), num, len(X)-num)\n\nX_train = X[:num]\nX_test = X[num:]\ny_train = y[:num]\ny_test = y[num:]\n```\n\n![Unknown-2.png](https://qiita-image-store.s3.amazonaws.com/0/114240/ab2ea1b2-3389-9c50-65f7-f47e0d787cbe.png)\n\n...\u306a\u3093\u3068\uff01\n\u3061\u3087\u3063\u3068\u3044\u3044\u611f\u3058(^-^)\n\n\u3067\u306f\u3001\u3053\u306e\u7d50\u679c\u304b\u3089\u4f55\u304c\u3067\u304d\u308b\u304b\u306a\u301c\u3068\u8003\u3048\u3066\u307f\u308b\u3068\u3001\u964d\u6c34\u91cf\u304b\u3089\u6c34\u4f4d\u3092\u7d99\u7d9a\u7684\u306b\u4e88\u6e2c\u3059\u308b\u3053\u3068\u3067\u6025\u6fc0\u306a\u6c34\u4f4d\u306e\u4e0a\u6607\u3092\u691c\u77e5\u3057\u3001\u907f\u96e3\u8b66\u544a\u3092\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u306b\u4f7f\u3048\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u305d\u3046\u8003\u3048\u308b\u3068\u3001\u3082\u3063\u3068\u3044\u308d\u3044\u308d\u306a\u81ea\u6cbb\u4f53\u304c\u3053\u3046\u3057\u305f\u30c7\u30fc\u30bf\u3092\u516c\u958b\u3057\u3066\u304f\u308c\u308b\u3068\u3044\u3044\u306a\u3068\u601d\u3044\u307e\u3059\u306d\u3002\n\n\u4ee5\u4e0a\u3001\u6b21\u306f\u4f55\u3057\u3088\u3046\u304b\u306a\u301c\u3002\n", "tags": ["Python", "scikit-learn", "\u30aa\u30fc\u30d7\u30f3\u30c7\u30fc\u30bf", "\u6a5f\u68b0\u5b66\u7fd2"]}