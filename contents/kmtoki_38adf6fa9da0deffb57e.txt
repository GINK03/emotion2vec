{"context": "\u7d14Lisp\u5b9f\u88c5\u30b7\u30ea\u30fc\u30ba\u7b2c3\u56de\u3067\u3059\n\u7b2c1\u56de \u5c0f\u3055\u306aLisp\n\u7b2c2\u56de SECD\u30de\u30b7\u30f3\n\u4eca\u56de\u306f\u7b2c1\u56de\u3067\u66f8\u3044\u305f\u7269\u3092ruby\u304b\u3089haskell\u3078\u66f8\u304d\u76f4\u3057\u305f\u3060\u3051\u3067\u3059\u306e\u3067\u60aa\u3057\u304b\u3089\u305a\n\u306a\u305c\u305d\u306e\u3088\u3046\u306a\u4e8b\u3092\u3057\u305f\u304b\u3068\u3044\u3046\u3068SECD\u30de\u30b7\u30f3(VM)\u3068\u7d20\u6734\u306a\u518d\u5e30\u30d9\u30fc\u30b9\u306e\u5b9f\u88c5\u3068\u3092\u6bd4\u3079\u3066\u898b\u305f\u304b\u3063\u305f\u304b\u3089\u3067\u3059\n\u3067\u306f\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\nsource\n\nAST\nAbstract Syntax Tree\u7565\u3057\u3066AST\n\u69cb\u6587\u6728\u3067\u3059\u306d\nS\u5f0f\u306f\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u3067List\u3068Atom\u3067\u4e8b\u8db3\u308a\u307e\u3059\n\u4eca\u56de\u306f\u6570\u5b57\u7528\u306bNat\u3092\u8ffd\u52a0\nPos\u306f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u4e2d\u306e\u4f4d\u7f6e\u60c5\u5831\u3067\u3059\n\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u7528\u306b\u5165\u308c\u3066\u304a\u304d\u307e\u3059\n\nLisp/AST.hs\nmodule Lisp.AST where\n\nimport Data.List\n\ntype Pos = (Int,Int)\ndata AST\n  = Atom Pos String\n  | Nat Pos Int\n  | List Pos [AST]\n\ninstance Show AST where\n  show (Atom _ s) = s\n  show (Nat _ n) = show n\n  show (List _ ls) = \"(\" ++ (concat $ intersperse \" \" $ map show ls) ++ \")\"\n\ninstance Eq AST where\n  Atom _ a == Atom _ b = a == b\n  Nat _ a  == Nat _ b = a == b\n  List _ a == List _ b = a == b\n  a == b = False\n\n\n\nParser\n\u6587\u5b57\u5217\u304b\u3089AST\u3078\u5909\u63db\u3059\u308b\u306e\u304cparse\u3067\u3059\u306d\nparsec\u3092\u4f7f\u3063\u3066parse\u3057\u307e\u3059\n((,) <$> P.sourceLine <*> P.sourceColumn) <$> P.getPosition\n\u4f4d\u7f6e\u60c5\u5831\u306f\u3053\u308c\u3067\u53d6\u308c\u307e\u3059\n\nLisp/Parser.hs\n{-# LANGUAGE TupleSections #-}\n\nmodule Lisp.Parser where\n\nimport Lisp.AST\nimport Control.Applicative\nimport qualified Text.Parsec as P\n\nparse :: String -> Either P.ParseError AST\nparse = P.parse sexpr \"\"\n\n-- top = List <$> pos <*> (P.many (sexpr <* spaces) <* P.eof)\n\nsexpr = atom <|> list\n\npos = ((,) <$> P.sourceLine <*> P.sourceColumn) <$> P.getPosition\n\nspaces = P.skipMany (P.space <|> P.tab <|> P.newline <|> comment)\n\ncomment = P.string \";\" *> P.noneOf \"\\n\" <* P.newline\n\natom \n  = Atom <$> pos <*> P.many1 (P.noneOf \"0123456789()' \\t\\r\\n\") \n  <|> Nat <$> pos <*> (read <$> P.many1 P.digit)\n\nlist = P.string \"(\" *> (List <$> pos <*> P.many (sexpr <* spaces)) <* P.string \")\"\n\n\n\nEval\n\u5b9f\u884c\u7cfb\u672c\u4f53\u306b\u306a\u308a\u307e\u3059\nVM\u3068\u9055\u3044\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066VM\u7528\u306e\u547d\u4ee4\u3092\u751f\u6210\u3059\u308b\u5fc5\u8981\u304c\u306a\u304f\n\u7d20\u6734\u306b\u9010\u6b21\u5b9f\u884c\u3057\u3066\u3044\u304d\u307e\u3059\n\u3072\u305f\u3059\u3089\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\n\nLisp/Eval.hs\n{-# LANGUAGE RecordWildCards #-}\n\nmodule Lisp.Eval where\n\nimport Lisp.AST\nimport Control.Monad\nimport qualified Data.Map as M\n\ntype Env = M.Map String AST\n\ndata LispState \n  = LispState {\n    ast :: AST,\n    env :: Env,\n    ref :: Maybe LispState\n  }\n  deriving Show\n\n\neval :: AST -> IO AST\neval a = do\n  ls <- evalState $ initLispState { ast = a }\n  pure $ ast ls\n\n\ninitLispState = LispState (Atom (0,0) \"#nil\") M.empty Nothing\n\nevalError :: LispState -> String -> IO LispState\nevalError ls msg = do\n  let \n    (p, a) = case ast ls of\n      Atom p a -> (p, show a)\n      Nat p n  -> (p, show n)\n      List p l -> (p, show $ ast ls)\n  fail $ show p ++ \" \" ++ msg ++ \" \" ++ a\n  pure ls\n\nevalState :: LispState -> IO LispState\nevalState ls = case ast ls of\n  Atom _ a -> pure $ ls { ast = lookup $ env ls }\n    where\n      lookup e = case M.lookup a e of\n        Just a' -> a'\n        Nothing -> case ref ls of\n          Just e' -> lookup $ env e'\n          Nothing -> ast ls\n\n  Nat _ a -> pure ls\n\n  List _ [] -> pure ls\n\n  List _ (Atom _ \"do\" : body) -> foldM go ls body\n    where\n      go ls' expr = evalState $ ls' { ast = expr }\n\n  List _ [Atom _ \"def\", Atom _ name, body] -> \n    pure $ ls { env = M.insert name body $ env ls }\n\n  List pos (Atom _ \"def\" : _) -> \n    evalError ls \"syntax error\"\n\n  List _ [Atom _ \"lam\", List _ names, body] ->\n    pure ls\n\n  List pos (Atom _ \"lam\" : _) ->\n    evalError ls \"syntax error\"\n\n  List _ [Atom pos \"+\", a, b] -> do\n    a' <- evalState $ ls { ast = a }\n    b' <- evalState $ ls { ast = b }\n\n    case (ast a', ast b') of\n      (Nat _ a, Nat _ b) -> pure $ ls { ast = Nat pos (a + b) }\n      _ -> evalError ls \"+ expect nat\"\n\n  List _ [Atom pos \"-\", a, b] -> do\n    a' <- evalState $ ls { ast = a }\n    b' <- evalState $ ls { ast = b }\n\n    case (ast a', ast b') of\n      (Nat _ a, Nat _ b) -> pure $ ls { ast = Nat pos (a - b) }\n      _ -> evalError ls \"- expect nat\"\n\n  List _ (Atom _ \"puts\" : args) -> mapM_ puts args >> pure ls\n    where\n      puts arg = do\n        a <- evalState $ ls { ast = arg }\n        print a\n\n  List _ [Atom _ \"if\", bool, true, false] -> do\n    b <- evalState $ ls { ast = bool }\n    case ast b of\n      Atom _ \"#t\" -> evalState $ ls { ast = true }\n      Atom _ \"#f\" -> evalState $ ls { ast = false }\n      _ -> evalError ls \"if expect #t or #f\"\n\n  List pos [Atom _ \"atom\", a] -> do \n    a' <- evalState $ ls { ast = a }\n    case ast a' of\n      Atom _ _ -> pure $ ls { ast = Atom pos \"#t\" }\n      List _ _ -> pure $ ls { ast = Atom pos \"#f\" }\n\n  List _ ((Atom _ \"atom\"):_) ->\n    evalError ls \"syntax error\"\n\n  List _ [Atom pos \"eq\", a, b] -> do\n    a' <- evalState $ ls { ast = a }\n    b' <- evalState $ ls { ast = b }\n    if ast a' == ast b' then\n      pure $ ls { ast = Atom pos \"#t\" }\n    else\n      pure $ ls { ast = Atom pos \"#f\" }\n\n  List _ ((Atom _ \"eq\"):_) ->\n    evalError ls \"syntax error\"\n\n  List p1 [Atom p2 \"cons\", a, b] -> do\n    a' <- evalState $ ls { ast = a }\n    b' <- evalState $ ls { ast = b }\n    pure $ ls { ast = List p1 [Atom p2 \"cons\", ast a', ast b'] }\n\n  List p1 ((Atom p2 \"cons\"):_) ->\n    evalError ls \"syntax error\"\n\n  List _ [Atom _ \"car\", a] -> do\n    a' <- evalState $ ls { ast = a }\n    case ast a' of\n      List _ [Atom _ \"cons\", a'', b] -> pure $ ls { ast = a'' }\n      _ -> evalError ls \"car expect cons\"\n\n  List _ ((Atom _ \"car\"):_) ->\n    evalError ls \"syntax error\"\n\n  List _ [Atom _ \"cdr\", a] -> do\n    a' <- evalState $ ls { ast = a }\n    case ast a' of\n      List _ [Atom _ \"cons\", a'', b] -> pure $ ls { ast = b }\n      _ -> evalError ls \"car expect cons\"\n\n  List _ ((Atom _ \"cdr\"):_) ->\n    evalError ls \"syntax error\"\n\n  -- apply\n  List pos (lambda : args) -> do\n    lambda' <- evalState $ ls { ast = lambda }\n    case ast lambda' of\n      List _ [Atom _ \"lam\", List _ names, body] ->\n        if length names == length args then do\n          args' <- mapM (\\a -> ast <$> (evalState $ ls { ast = a })) args\n          let env' = M.union (M.fromList $ zip (map (\\(Atom _ n) -> n) names) args') $ env ls\n          evalState $ ls { ast = body, env = env' }\n        else\n          evalError ls $ \n            \"lam expect \" ++ (show $ length names) ++ \" unexpect \" ++ (show $ length args)\n\n      _ -> evalError lambda' \"apply expect lam\"\n\n\n\nLisp\n\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u95a2\u6570\u7fa4\n\u6587\u5b57\u5217\u304b\u3089\u5b9f\u884c\u3057\u305f\u308a\u3001\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u5b9f\u884c\u3057\u305f\u308a\n\nLisp.hs\nmodule Lisp where\n\nimport Lisp.AST\nimport Lisp.Parser\nimport Lisp.Eval\n\nimport System.Directory\n\nrunLisp' :: String -> String -> IO ()\nrunLisp' fn s = do\n  case parse s of\n    Left err -> print err\n    Right ast -> do\n      ast' <- eval ast\n      print ast'\n\nrunLisp = runLisp' \"runLisp\"\n\nrunLispFile f = do\n  bool <- doesFileExist f\n  if bool then do\n    s <- readFile f\n    runLisp' f s\n  else\n    fail $ f ++ \" does not exist\"\n\n\n\n\u6bd4\u8f03\n\u3068\u8a00\u3063\u3066\u3082\u5358\u7d14\u306a\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3067\u3059\n\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u8a08\u7b97\u3067\u6bd4\u3079\u307e\u3059\n\u307e\u305a\u4eca\u56de\u306e\u518d\u5e30\u30d9\u30fc\u30b9\u306elisp\u304b\u3089\n(do\n  (def fib\n    (lam (n)\n      (if (eq n 0)\n        0 \n        (if (eq n 1)\n          1\n          (+ (fib (- n 2)) (fib (- n 1)))))))\n\n  (fib 30))\n\n\u276f time stack exec lisp fib.lisp\n832040\nstack exec lisp example/fib.lisp  6.91s user 0.75s system 120% cpu 6.383 total\n\n\u6b21\u306b\u524d\u56de\u306eSECD\u30de\u30b7\u30f3\u306elisp\n\u5c11\u3005\u8a00\u8a9e\u4ed5\u69d8\u304c\u9055\u3044\u307e\u3059\u304c\n(letrec \n  (fib \n    (lam n\n      (if (eq n 0)\n        0\n        (if (eq n 1)\n          1\n          (+ (fib (+ n -2)) (fib (+ n -1)))))))\n  (fib 30))\n\n\u276f time stack exec lisp fib.lisp\n832040\nstack exec lisp lisp/fib.lisp  4.80s user 0.71s system 128% cpu 4.276 total\n\n\u3075\u3080\n- \u7d20\u6734\u518d\u5e30 6.91s user 0.75s system 120% cpu 6.383 total\n- SECD\u30de\u30b7\u30f3 4.80s user 0.71s system 128% cpu 4.276 total\n\u610f\u5916\u3068\u958b\u304d\u307e\u3057\u305f\u306d\n\u30b3\u30f3\u30d1\u30a4\u30eb\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u3042\u308bSECD\u30de\u30b7\u30f3\u304c\u4e0d\u5229\u304b\u3068\u601d\u3063\u305f\u3093\u3067\u3059\u304c\u305d\u3046\u3067\u3082\u7121\u3044\u307f\u305f\u3044\u3067\u3059\u306d\nSECD\u30de\u30b7\u30f3\u3059\u3054\u3044\n\n\u6b21\u56de\n3imp\u306e\u30d2\u30fc\u30d7\u30e2\u30c7\u30eb\u3092\u5b9f\u88c5\u4e88\u5b9a\uff08\u672a\u5b9a\uff08\u591a\u5206\u3084\u3089\u306a\u3044\uff09\uff09\n\n\u7d14Lisp\u5b9f\u88c5\u30b7\u30ea\u30fc\u30ba\u7b2c3\u56de\u3067\u3059\n\u7b2c1\u56de [\u5c0f\u3055\u306aLisp](http://qiita.com/kumatoki/items/7a7fda1b73c87c793a9b)\n\u7b2c2\u56de [SECD\u30de\u30b7\u30f3](http://qiita.com/kumatoki/items/0e9a9e341e6b1d9528af)\n\n\u4eca\u56de\u306f\u7b2c1\u56de\u3067\u66f8\u3044\u305f\u7269\u3092ruby\u304b\u3089haskell\u3078\u66f8\u304d\u76f4\u3057\u305f\u3060\u3051\u3067\u3059\u306e\u3067\u60aa\u3057\u304b\u3089\u305a\n\u306a\u305c\u305d\u306e\u3088\u3046\u306a\u4e8b\u3092\u3057\u305f\u304b\u3068\u3044\u3046\u3068SECD\u30de\u30b7\u30f3(VM)\u3068\u7d20\u6734\u306a\u518d\u5e30\u30d9\u30fc\u30b9\u306e\u5b9f\u88c5\u3068\u3092\u6bd4\u3079\u3066\u898b\u305f\u304b\u3063\u305f\u304b\u3089\u3067\u3059\n\u3067\u306f\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\n[source](https://github.com/kmtoki/lisp)\n\n# AST\n\nAbstract Syntax Tree\u7565\u3057\u3066AST\n\u69cb\u6587\u6728\u3067\u3059\u306d\nS\u5f0f\u306f\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u3067List\u3068Atom\u3067\u4e8b\u8db3\u308a\u307e\u3059\n\u4eca\u56de\u306f\u6570\u5b57\u7528\u306bNat\u3092\u8ffd\u52a0\n\nPos\u306f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u4e2d\u306e\u4f4d\u7f6e\u60c5\u5831\u3067\u3059\n\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u7528\u306b\u5165\u308c\u3066\u304a\u304d\u307e\u3059\n\n```haskell:Lisp/AST.hs\nmodule Lisp.AST where\n\nimport Data.List\n\ntype Pos = (Int,Int)\ndata AST\n  = Atom Pos String\n  | Nat Pos Int\n  | List Pos [AST]\n\ninstance Show AST where\n  show (Atom _ s) = s\n  show (Nat _ n) = show n\n  show (List _ ls) = \"(\" ++ (concat $ intersperse \" \" $ map show ls) ++ \")\"\n\ninstance Eq AST where\n  Atom _ a == Atom _ b = a == b\n  Nat _ a  == Nat _ b = a == b\n  List _ a == List _ b = a == b\n  a == b = False\n```\n\n# Parser\n\u6587\u5b57\u5217\u304b\u3089AST\u3078\u5909\u63db\u3059\u308b\u306e\u304cparse\u3067\u3059\u306d\nparsec\u3092\u4f7f\u3063\u3066parse\u3057\u307e\u3059\n\n`((,) <$> P.sourceLine <*> P.sourceColumn) <$> P.getPosition`\n\u4f4d\u7f6e\u60c5\u5831\u306f\u3053\u308c\u3067\u53d6\u308c\u307e\u3059\n\n```haskell:Lisp/Parser.hs\n{-# LANGUAGE TupleSections #-}\n\nmodule Lisp.Parser where\n\nimport Lisp.AST\nimport Control.Applicative\nimport qualified Text.Parsec as P\n\nparse :: String -> Either P.ParseError AST\nparse = P.parse sexpr \"\"\n\n-- top = List <$> pos <*> (P.many (sexpr <* spaces) <* P.eof)\n\nsexpr = atom <|> list\n\npos = ((,) <$> P.sourceLine <*> P.sourceColumn) <$> P.getPosition\n\nspaces = P.skipMany (P.space <|> P.tab <|> P.newline <|> comment)\n\ncomment = P.string \";\" *> P.noneOf \"\\n\" <* P.newline\n\natom \n  = Atom <$> pos <*> P.many1 (P.noneOf \"0123456789()' \\t\\r\\n\") \n  <|> Nat <$> pos <*> (read <$> P.many1 P.digit)\n\nlist = P.string \"(\" *> (List <$> pos <*> P.many (sexpr <* spaces)) <* P.string \")\"\n```\n\n# Eval\n\u5b9f\u884c\u7cfb\u672c\u4f53\u306b\u306a\u308a\u307e\u3059\nVM\u3068\u9055\u3044\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066VM\u7528\u306e\u547d\u4ee4\u3092\u751f\u6210\u3059\u308b\u5fc5\u8981\u304c\u306a\u304f\n\u7d20\u6734\u306b\u9010\u6b21\u5b9f\u884c\u3057\u3066\u3044\u304d\u307e\u3059\n\u3072\u305f\u3059\u3089\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\n\n```haskell:Lisp/Eval.hs\n{-# LANGUAGE RecordWildCards #-}\n\nmodule Lisp.Eval where\n\nimport Lisp.AST\nimport Control.Monad\nimport qualified Data.Map as M\n\ntype Env = M.Map String AST\n\ndata LispState \n  = LispState {\n    ast :: AST,\n    env :: Env,\n    ref :: Maybe LispState\n  }\n  deriving Show\n\n\neval :: AST -> IO AST\neval a = do\n  ls <- evalState $ initLispState { ast = a }\n  pure $ ast ls\n\n\ninitLispState = LispState (Atom (0,0) \"#nil\") M.empty Nothing\n\nevalError :: LispState -> String -> IO LispState\nevalError ls msg = do\n  let \n    (p, a) = case ast ls of\n      Atom p a -> (p, show a)\n      Nat p n  -> (p, show n)\n      List p l -> (p, show $ ast ls)\n  fail $ show p ++ \" \" ++ msg ++ \" \" ++ a\n  pure ls\n\nevalState :: LispState -> IO LispState\nevalState ls = case ast ls of\n  Atom _ a -> pure $ ls { ast = lookup $ env ls }\n    where\n      lookup e = case M.lookup a e of\n        Just a' -> a'\n        Nothing -> case ref ls of\n          Just e' -> lookup $ env e'\n          Nothing -> ast ls\n\n  Nat _ a -> pure ls\n\n  List _ [] -> pure ls\n\n  List _ (Atom _ \"do\" : body) -> foldM go ls body\n    where\n      go ls' expr = evalState $ ls' { ast = expr }\n\n  List _ [Atom _ \"def\", Atom _ name, body] -> \n    pure $ ls { env = M.insert name body $ env ls }\n\n  List pos (Atom _ \"def\" : _) -> \n    evalError ls \"syntax error\"\n\n  List _ [Atom _ \"lam\", List _ names, body] ->\n    pure ls\n\n  List pos (Atom _ \"lam\" : _) ->\n    evalError ls \"syntax error\"\n\n  List _ [Atom pos \"+\", a, b] -> do\n    a' <- evalState $ ls { ast = a }\n    b' <- evalState $ ls { ast = b }\n\n    case (ast a', ast b') of\n      (Nat _ a, Nat _ b) -> pure $ ls { ast = Nat pos (a + b) }\n      _ -> evalError ls \"+ expect nat\"\n\n  List _ [Atom pos \"-\", a, b] -> do\n    a' <- evalState $ ls { ast = a }\n    b' <- evalState $ ls { ast = b }\n\n    case (ast a', ast b') of\n      (Nat _ a, Nat _ b) -> pure $ ls { ast = Nat pos (a - b) }\n      _ -> evalError ls \"- expect nat\"\n\n  List _ (Atom _ \"puts\" : args) -> mapM_ puts args >> pure ls\n    where\n      puts arg = do\n        a <- evalState $ ls { ast = arg }\n        print a\n\n  List _ [Atom _ \"if\", bool, true, false] -> do\n    b <- evalState $ ls { ast = bool }\n    case ast b of\n      Atom _ \"#t\" -> evalState $ ls { ast = true }\n      Atom _ \"#f\" -> evalState $ ls { ast = false }\n      _ -> evalError ls \"if expect #t or #f\"\n\n  List pos [Atom _ \"atom\", a] -> do \n    a' <- evalState $ ls { ast = a }\n    case ast a' of\n      Atom _ _ -> pure $ ls { ast = Atom pos \"#t\" }\n      List _ _ -> pure $ ls { ast = Atom pos \"#f\" }\n\n  List _ ((Atom _ \"atom\"):_) ->\n    evalError ls \"syntax error\"\n\n  List _ [Atom pos \"eq\", a, b] -> do\n    a' <- evalState $ ls { ast = a }\n    b' <- evalState $ ls { ast = b }\n    if ast a' == ast b' then\n      pure $ ls { ast = Atom pos \"#t\" }\n    else\n      pure $ ls { ast = Atom pos \"#f\" }\n\n  List _ ((Atom _ \"eq\"):_) ->\n    evalError ls \"syntax error\"\n\n  List p1 [Atom p2 \"cons\", a, b] -> do\n    a' <- evalState $ ls { ast = a }\n    b' <- evalState $ ls { ast = b }\n    pure $ ls { ast = List p1 [Atom p2 \"cons\", ast a', ast b'] }\n\n  List p1 ((Atom p2 \"cons\"):_) ->\n    evalError ls \"syntax error\"\n\n  List _ [Atom _ \"car\", a] -> do\n    a' <- evalState $ ls { ast = a }\n    case ast a' of\n      List _ [Atom _ \"cons\", a'', b] -> pure $ ls { ast = a'' }\n      _ -> evalError ls \"car expect cons\"\n\n  List _ ((Atom _ \"car\"):_) ->\n    evalError ls \"syntax error\"\n\n  List _ [Atom _ \"cdr\", a] -> do\n    a' <- evalState $ ls { ast = a }\n    case ast a' of\n      List _ [Atom _ \"cons\", a'', b] -> pure $ ls { ast = b }\n      _ -> evalError ls \"car expect cons\"\n\n  List _ ((Atom _ \"cdr\"):_) ->\n    evalError ls \"syntax error\"\n\n  -- apply\n  List pos (lambda : args) -> do\n    lambda' <- evalState $ ls { ast = lambda }\n    case ast lambda' of\n      List _ [Atom _ \"lam\", List _ names, body] ->\n        if length names == length args then do\n          args' <- mapM (\\a -> ast <$> (evalState $ ls { ast = a })) args\n          let env' = M.union (M.fromList $ zip (map (\\(Atom _ n) -> n) names) args') $ env ls\n          evalState $ ls { ast = body, env = env' }\n        else\n          evalError ls $ \n            \"lam expect \" ++ (show $ length names) ++ \" unexpect \" ++ (show $ length args)\n\n      _ -> evalError lambda' \"apply expect lam\"\n```\n\n# Lisp\n\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u95a2\u6570\u7fa4\n\u6587\u5b57\u5217\u304b\u3089\u5b9f\u884c\u3057\u305f\u308a\u3001\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u5b9f\u884c\u3057\u305f\u308a\n\n```haskell:Lisp.hs\nmodule Lisp where\n\nimport Lisp.AST\nimport Lisp.Parser\nimport Lisp.Eval\n\nimport System.Directory\n\nrunLisp' :: String -> String -> IO ()\nrunLisp' fn s = do\n  case parse s of\n    Left err -> print err\n    Right ast -> do\n      ast' <- eval ast\n      print ast'\n\nrunLisp = runLisp' \"runLisp\"\n\nrunLispFile f = do\n  bool <- doesFileExist f\n  if bool then do\n    s <- readFile f\n    runLisp' f s\n  else\n    fail $ f ++ \" does not exist\"\n```\n\n# \u6bd4\u8f03\n\u3068\u8a00\u3063\u3066\u3082\u5358\u7d14\u306a\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3067\u3059\n\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u8a08\u7b97\u3067\u6bd4\u3079\u307e\u3059\n\n\u307e\u305a[\u4eca\u56de](https://github.com/kumatoki/lisp)\u306e\u518d\u5e30\u30d9\u30fc\u30b9\u306elisp\u304b\u3089\n\n```lisp\n(do\n  (def fib\n    (lam (n)\n      (if (eq n 0)\n        0 \n        (if (eq n 1)\n          1\n          (+ (fib (- n 2)) (fib (- n 1)))))))\n\n  (fib 30))\n```\n\n```\n\u276f time stack exec lisp fib.lisp\n832040\nstack exec lisp example/fib.lisp  6.91s user 0.75s system 120% cpu 6.383 total\n```\n\n\u6b21\u306b[\u524d\u56de](https://github.com/kumatoki/SECD)\u306eSECD\u30de\u30b7\u30f3\u306elisp\n\u5c11\u3005\u8a00\u8a9e\u4ed5\u69d8\u304c\u9055\u3044\u307e\u3059\u304c\n\n```lisp\n(letrec \n  (fib \n    (lam n\n      (if (eq n 0)\n        0\n        (if (eq n 1)\n          1\n          (+ (fib (+ n -2)) (fib (+ n -1)))))))\n  (fib 30))\n```\n\n```\n\u276f time stack exec lisp fib.lisp\n832040\nstack exec lisp lisp/fib.lisp  4.80s user 0.71s system 128% cpu 4.276 total\n```\n\n\u3075\u3080\n- \u7d20\u6734\u518d\u5e30 `6.91s user 0.75s system 120% cpu 6.383 total`\n- SECD\u30de\u30b7\u30f3 `4.80s user 0.71s system 128% cpu 4.276 total`\n\u610f\u5916\u3068\u958b\u304d\u307e\u3057\u305f\u306d\n\u30b3\u30f3\u30d1\u30a4\u30eb\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u3042\u308bSECD\u30de\u30b7\u30f3\u304c\u4e0d\u5229\u304b\u3068\u601d\u3063\u305f\u3093\u3067\u3059\u304c\u305d\u3046\u3067\u3082\u7121\u3044\u307f\u305f\u3044\u3067\u3059\u306d\nSECD\u30de\u30b7\u30f3\u3059\u3054\u3044\n\n# \u6b21\u56de\n3imp\u306e\u30d2\u30fc\u30d7\u30e2\u30c7\u30eb\u3092\u5b9f\u88c5\u4e88\u5b9a\uff08\u672a\u5b9a\uff08\u591a\u5206\u3084\u3089\u306a\u3044\uff09\uff09\n\n", "tags": ["Haskell", "lisp"]}