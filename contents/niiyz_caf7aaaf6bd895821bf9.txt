{"context": "OCaml\u3092\u5b66\u7fd2\u4e2d\u3067\u5f15\u6570\u306e\u30ea\u30b9\u30c8\u304c\u660e\u793a\u7684\u3067\u306f\u306a\u3044\u6642\u306btrace\u3057\u3066\u3082\u5177\u4f53\u7684\u306a\u5024\u304c\u78ba\u8a8d\u3067\u304d\u305a\u518d\u5e30\u306e\u30a4\u30e1\u30fc\u30b8\u304c\u308f\u304b\u306a\u304b\u3063\u305f\u306e\u3067\u578b\u3092\u660e\u793a\u7684\u306b\u3057\u3066\u78ba\u8a8d\u3057\u305f\u30e1\u30e2\u3002\n\nmerge.ml\n(* merge : int list -> int list -> int list *)\nlet rec merge list1 list2 = match (list1, list2) with\n  | ([], []) -> []\n  | ([], first2 :: rest2) -> list2\n  | (first1 :: rest1, []) -> list1\n  | (first1 :: rest1, first2 :: rest2) ->\n    if first1 < first2\n    then first1 :: merge rest1 list2\n    else first2 :: merge list1 rest2\n\n\n\nmerge\u3092\u5b9a\u7fa9\u3057\u305f\u6bb5\u968e\u3067\u30ea\u30b9\u30c8\u306e\u4e2d\u306e\u578b\u306f\u3069\u306e\u578b\u3067\u3082OK\u306e\u300c'a\u300d\u306b\u306a\u3063\u3066\u3044\u308b\u3002\ntrace\u3057\u3066\u3082<poly>\u306b\u306a\u3063\u3066\u4f55\u3092\u6e21\u3057\u3066\u3044\u308b\u304b\u308f\u304b\u3089\u306a\u3044\u3002\n\n# #use \"merge.ml\";;\nval merge : 'a list -> 'a list -> 'a list = <fun>\n# #trace merge;;\nmerge is now traced.\n# merge [1; 3][2; 4];;\nmerge <-- [<poly>; <poly>]\nmerge --> <fun>\nmerge* <-- [<poly>; <poly>]\nmerge <-- [<poly>]\nmerge --> <fun>\nmerge* <-- [<poly>; <poly>]\nmerge <-- [<poly>]\nmerge --> <fun>\nmerge* <-- [<poly>]\nmerge <-- []\nmerge --> <fun>\nmerge* <-- [<poly>]\nmerge* --> [<poly>]\nmerge* --> [<poly>; <poly>]\nmerge* --> [<poly>; <poly>; <poly>]\nmerge* --> [<poly>; <poly>; <poly>; <poly>]\n- : int list = [1; 2; 3; 4]\n\n\n\u30ea\u30b9\u30c8\u306b\u306f\u6587\u5b57\u5217\u3082\u5165\u308c\u308b\u3002\n\n# merge [\"a\"; \"d\"][\"c\"; \"b\"];;\nmerge <-- [<poly>; <poly>]\nmerge --> <fun>\nmerge* <-- [<poly>; <poly>]\nmerge <-- [<poly>]\nmerge --> <fun>\nmerge* <-- [<poly>; <poly>]\nmerge <-- [<poly>]\nmerge --> <fun>\nmerge* <-- [<poly>]\nmerge <-- [<poly>]\nmerge --> <fun>\nmerge* <-- []\nmerge* --> [<poly>]\nmerge* --> [<poly>; <poly>]\nmerge* --> [<poly>; <poly>; <poly>]\nmerge* --> [<poly>; <poly>; <poly>; <poly>]\n- : string list = [\"a\"; \"c\"; \"b\"; \"d\"]\n\n\n\n\u5f15\u6570\u306e\u30ea\u30b9\u30c8\u306e\u4e2d\u3092\u660e\u793a\u7684\u306bint\u306b\u3059\u308b\u3002\n\n\nmerge.ml\n(* merge : int list -> int list -> int list *)\nlet rec merge (list1:int list) (list2: int list) = match (list1, list2) with\n  | ([], []) -> []\n  | ([], first2 :: rest2) -> list2\n  | (first1 :: rest1, []) -> list1\n  | (first1 :: rest1, first2 :: rest2) ->\n    if first1 < first2\n    then first1 :: merge rest1 list2\n    else first2 :: merge list1 rest2\n\n\n\n\u5177\u4f53\u7684\u306a\u5024\u304ctrace\u3055\u308c\u308b\u306e\u3067\u30a4\u30e1\u30fc\u30b8\u3057\u3084\u3059\u3044\u3002\n\n# #use \"merge.ml\";;\nval merge : int list -> int list -> int list = <fun>\n# #trace merge;;\nmerge is now traced.\n# merge [1; 3][2; 4];;\nmerge <-- [1; 3]\nmerge --> <fun>\nmerge* <-- [2; 4]\nmerge <-- [3]\nmerge --> <fun>\nmerge* <-- [2; 4]\nmerge <-- [3]\nmerge --> <fun>\nmerge* <-- [4]\nmerge <-- []\nmerge --> <fun>\nmerge* <-- [4]\nmerge* --> [4]\nmerge* --> [3; 4]\nmerge* --> [2; 3; 4]\nmerge* --> [1; 2; 3; 4]\n- : int list = [1; 2; 3; 4]\n\nOCaml\u3092\u5b66\u7fd2\u4e2d\u3067\u5f15\u6570\u306e\u30ea\u30b9\u30c8\u304c\u660e\u793a\u7684\u3067\u306f\u306a\u3044\u6642\u306btrace\u3057\u3066\u3082\u5177\u4f53\u7684\u306a\u5024\u304c\u78ba\u8a8d\u3067\u304d\u305a\u518d\u5e30\u306e\u30a4\u30e1\u30fc\u30b8\u304c\u308f\u304b\u306a\u304b\u3063\u305f\u306e\u3067\u578b\u3092\u660e\u793a\u7684\u306b\u3057\u3066\u78ba\u8a8d\u3057\u305f\u30e1\u30e2\u3002\n\n```ocaml:merge.ml\n(* merge : int list -> int list -> int list *)\nlet rec merge list1 list2 = match (list1, list2) with\n  | ([], []) -> []\n  | ([], first2 :: rest2) -> list2\n  | (first1 :: rest1, []) -> list1\n  | (first1 :: rest1, first2 :: rest2) ->\n    if first1 < first2\n    then first1 :: merge rest1 list2\n    else first2 :: merge list1 rest2\n```\n\n- merge\u3092\u5b9a\u7fa9\u3057\u305f\u6bb5\u968e\u3067\u30ea\u30b9\u30c8\u306e\u4e2d\u306e\u578b\u306f\u3069\u306e\u578b\u3067\u3082OK\u306e\u300c'a\u300d\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n- trace\u3057\u3066\u3082&lt;poly&gt;\u306b\u306a\u3063\u3066\u4f55\u3092\u6e21\u3057\u3066\u3044\u308b\u304b\u308f\u304b\u3089\u306a\u3044\u3002\n\n```\n# #use \"merge.ml\";;\nval merge : 'a list -> 'a list -> 'a list = <fun>\n# #trace merge;;\nmerge is now traced.\n# merge [1; 3][2; 4];;\nmerge <-- [<poly>; <poly>]\nmerge --> <fun>\nmerge* <-- [<poly>; <poly>]\nmerge <-- [<poly>]\nmerge --> <fun>\nmerge* <-- [<poly>; <poly>]\nmerge <-- [<poly>]\nmerge --> <fun>\nmerge* <-- [<poly>]\nmerge <-- []\nmerge --> <fun>\nmerge* <-- [<poly>]\nmerge* --> [<poly>]\nmerge* --> [<poly>; <poly>]\nmerge* --> [<poly>; <poly>; <poly>]\nmerge* --> [<poly>; <poly>; <poly>; <poly>]\n- : int list = [1; 2; 3; 4]\n```\n\n- \u30ea\u30b9\u30c8\u306b\u306f\u6587\u5b57\u5217\u3082\u5165\u308c\u308b\u3002\n\n```\n# merge [\"a\"; \"d\"][\"c\"; \"b\"];;\nmerge <-- [<poly>; <poly>]\nmerge --> <fun>\nmerge* <-- [<poly>; <poly>]\nmerge <-- [<poly>]\nmerge --> <fun>\nmerge* <-- [<poly>; <poly>]\nmerge <-- [<poly>]\nmerge --> <fun>\nmerge* <-- [<poly>]\nmerge <-- [<poly>]\nmerge --> <fun>\nmerge* <-- []\nmerge* --> [<poly>]\nmerge* --> [<poly>; <poly>]\nmerge* --> [<poly>; <poly>; <poly>]\nmerge* --> [<poly>; <poly>; <poly>; <poly>]\n- : string list = [\"a\"; \"c\"; \"b\"; \"d\"]\n\n```\n\n- \u5f15\u6570\u306e\u30ea\u30b9\u30c8\u306e\u4e2d\u3092\u660e\u793a\u7684\u306bint\u306b\u3059\u308b\u3002\n\n```ocaml:merge.ml\n(* merge : int list -> int list -> int list *)\nlet rec merge (list1:int list) (list2: int list) = match (list1, list2) with\n  | ([], []) -> []\n  | ([], first2 :: rest2) -> list2\n  | (first1 :: rest1, []) -> list1\n  | (first1 :: rest1, first2 :: rest2) ->\n    if first1 < first2\n    then first1 :: merge rest1 list2\n    else first2 :: merge list1 rest2\n```\n\n- \u5177\u4f53\u7684\u306a\u5024\u304ctrace\u3055\u308c\u308b\u306e\u3067\u30a4\u30e1\u30fc\u30b8\u3057\u3084\u3059\u3044\u3002\n\n```\n# #use \"merge.ml\";;\nval merge : int list -> int list -> int list = <fun>\n# #trace merge;;\nmerge is now traced.\n# merge [1; 3][2; 4];;\nmerge <-- [1; 3]\nmerge --> <fun>\nmerge* <-- [2; 4]\nmerge <-- [3]\nmerge --> <fun>\nmerge* <-- [2; 4]\nmerge <-- [3]\nmerge --> <fun>\nmerge* <-- [4]\nmerge <-- []\nmerge --> <fun>\nmerge* <-- [4]\nmerge* --> [4]\nmerge* --> [3; 4]\nmerge* --> [2; 3; 4]\nmerge* --> [1; 2; 3; 4]\n- : int list = [1; 2; 3; 4]\n```\n", "tags": ["OCaml"]}