{"context": " More than 1 year has passed since last update.using UnityEngine;\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Runtime.Remoting.Messaging;\nusing System.IO;\nusing System.Net;\nusing Api;\nusing Extention;\nnamespace Helper\n{\n    /// \n    /// Content download engine.\n    /// \n    public sealed class ContentDownloadEngine : SingletonMonoBehaviourFast\n    {\n        #region \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u5909\u6570\n        [SerializeField]\n        private GameObject _progressObj;\n    [SerializeField]\n    private UISlider progressBar;\n\n    [SerializeField]\n    private UILabel progressLabel;\n\n    [SerializeField]\n    private UILabel _fileCheckLabel;\n\n    #endregion\n\n    #region Private Fields\n    public static bool _isLoadFin = false;\n    public static string _udid = \"\";\n\n    private List<ContentsEntity.Contents> _cacheContentsList;\n\n    private volatile int  _currentDownloadCount = 0;\n    private volatile int  _downloadListCount = 0;\n\n    private volatile bool _exeptionFlag = false;\n    private volatile bool _displayErrorPopupFlag = false;\n    private volatile bool _displayNetworkPopupFlag = false;\n\n    private int _setProgress;\n    private object _lockObj = new object();\n    private delegate void ThreadDownloadDelegate(List<Dictionary<string, string>> content, int threadId);\n    private List<IAsyncResult> _asyncResultList;\n    private volatile int _threadQueueCounter = 0;\n    private volatile int  _threadCounter = 0;\n    private volatile int _tryCounter = 0;\n    private volatile int _autoRetry = 0;\n\n    private readonly int threadSplitCount = 5;\n    private readonly int mHttpRequestTimeout = 15 * 1000; // 15 Sec\n    private readonly string mHttpRequestUserAgent  = \"\";\n\n    #endregion\n\n    #region Unity Events\n\n//      void OnApplicationPause (bool pauseStatus)\n//        {\n//          if (pauseStatus == true) {\n//              CacheAssetContentsPrefs.CacheAssetContentsFlush ();\n//            }\n//        }\n    void Start()\n    {\n        _currentDownloadCount = 0;\n        _tryCounter = 0;\n        _autoRetry = 0;\n\n//Debug.Log (\"\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u958b\u59cb\");\nStartTime(); //\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u8a08\u6e2c\u7528\n            //\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306e\u901f\u5ea6\u6700\u9069\u5316\u7528\u8a2d\u5b9a\u3002\n            System.Net.ServicePointManager.UseNagleAlgorithm = false;\n            System.Net.ServicePointManager.DefaultConnectionLimit = 8;\n            //file save proccess init\n            CacheAssetContentsPrefs.Init ();\n        }\n    void Update ()\n    {\n        //\u4f8b\u5916\u304c\u8d77\u304d\u305f\u5834\u5408\u306e\u51e6\u7406\n        if (_exeptionFlag == true)\n        {\n            if (_displayNetworkPopupFlag == false && _threadQueueCounter == 0) {\n                _displayNetworkPopupFlag = true;\n                HttpIoOrNetworkErrorPopup ();\n            } else {\n                if (_displayNetworkPopupFlag == false) {\n                    Debug.Log (\"displayNetworkPopupFlag : \" + _displayNetworkPopupFlag);\n                    Debug.Log (\"Last Thread Counter : \" + _threadQueueCounter);\n                }\n            }\n\n            lock (_lockObj){\n                _exeptionFlag = false;\n            }\n            return;\n        }\n        // ProgressBar\n        if (progressBar != null && _isLoadFin == false)\n        {\n            if (_currentDownloadCount != 0 && _cacheContentsList != null && _downloadListCount > 0)\n            {\n                progressBar.value = ((float)_currentDownloadCount / (float)_downloadListCount) * 2;\n\n                if (progressBar.value <= 0) {\n                    _progressObj.SetActive (false);\n                } else {\n                    _progressObj.SetActive (true);\n                }\n\n                // \u30de\u30a4\u30ca\u30b9\u3068100%\u8d8a\u3048\u306f\u898b\u6804\u3048\u304c\u60aa\u3044\u306e\u3067\u7bc4\u56f2\u66f4\u65b0\n                _setProgress = ((int)(((float)_currentDownloadCount / (float)_downloadListCount) * 100) * 2);\n\n                if (0 <= _setProgress && _setProgress <= 100 ) {\n                    if (_setProgress <= 0) {\n                        progressLabel.text = \"100%\";\n                    } else {\n                        progressLabel.text = _setProgress.ToString () + \"%\";\n                    }\n\n                    _fileCheckLabel.gameObject.SetActive (false);\n                } else if (0 <= _setProgress && _setProgress <= (100 * 2)) {\n                    //\u30d5\u30a1\u30a4\u30eb\u30c1\u30a7\u30c3\u30af\u4e2d\u5c0e\u5165\u3002\n                    progressLabel.text = \"100%\";\n                    progressBar.value = 1.0f;\n                    _fileCheckLabel.gameObject.SetActive (true);\n                } else {\n                    progressLabel.gameObject.SetActive (false);\n                }\n            } else {\n                _progressObj.SetActive (false); //\u3061\u3089\u3064\u304d\u9632\u6b62\u3002\n            }\n        } else if (_isLoadFin == true) {\n            if (_progressObj != null) {\n                _progressObj.SetActive (false); //\u901a\u4fe1\u51e6\u7406\u7d42\u308f\u3063\u3066\u305f\u3089False\n            }\n        }\n    }\n    #endregion\n\n    #region \u5916\u90e8\u7528\u30e1\u30bd\u30c3\u30c9\n    public void MultipleDownload(object _list, bool _popupRetry = false)\n    {\n        _udid = UiidManager.GetUdid ();\n\n        if (NetworkCheck () == false) {\n\n//              _exeptionFlag = true;\n//              _displayNetworkPopupFlag = false;\n                _displayNetworkPopupFlag = true;\n                StartCoroutine(deferredInvoke(0.3f, ()=>{\n                    HttpIoOrNetworkErrorPopup ();\n                }));\n                return;\n            }\n        if (_threadQueueCounter != 0) {\n            Debug.Log (\"Async execute now : \" + _threadQueueCounter);\n            _exeptionFlag = true;\n            return;\n        }\n\n        List<ContentsEntity.Contents> _contentsList = (List<ContentsEntity.Contents>)_list;\n        List<ContentsEntity.Contents> brushedUpList = new List<ContentsEntity.Contents> ();\n\n        _exeptionFlag = false;\n\n        if (_contentsList != null) {\n            foreach (var list in _contentsList) {\n                if (IsMultipleDownloadIgnore (list) == true)\n                    continue;\n\n                string fullPath = string.Format (\"{0}{1}{2}\", StreamingAssetsHelper.GetDownLoadPath (), list.directory, list.file_name);\n\n                if (File.Exists (fullPath)) {\n                    if (CacheAssetContentsPrefs.CacheAssetContentsGetString (list.file_path) != list.release_id) { //\u30d0\u30fc\u30b8\u30e7\u30f3\u756a\u53f7\u304c\u4e00\u81f4\u3057\u306a\u3044\u5834\u5408\u3002\n                        brushedUpList.Add (list);\n                    }\n                } else if (!File.Exists (fullPath)) { //\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\n                    brushedUpList.Add (list);\n                }\n            }\n        }\n\nDebug.Log (brushedUpList.Count + \" \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u7cbe\u67fb\u3055\u308c\u305f\u30ea\u30b9\u30c8\u6570 \");\n        if (brushedUpList.Count <= 0) \n        {\n\nDebug.Log (\" \u5165\u3063\u3066\u308b\u3001\u6b21\u306e\u30b7\u30fc\u30f3\u306b\u98db\u3076\u3002 \");\n                _isLoadFin = true;\n                return;\n            }\n        _cacheContentsList = brushedUpList;\n        _downloadListCount = _cacheContentsList.Count;\n        List<Dictionary<string,string>> dic = new List<Dictionary<string, string>> ();\n\n        //\u5206\u6563\u51fa\u6765\u308b\u3088\u3046\u306b\u51e6\u7406\u66f8\u304f\n        Dictionary<int, List<ContentsEntity.Contents>> _pacialContentsList = new Dictionary<int, List<ContentsEntity.Contents>>();\n        List<ContentsEntity.Contents> tmpC = new List<ContentsEntity.Contents> ();\n        int count = 0;\n        int inCount = 1;\n\n        // \u7aef\u672b\u5225\u306b\u5206\u5272\u6570\u3092\u8abf\u6574\n        int mThreadSplitCount = threadSplitCount;\n        #if UNITY_IPHONE && !UNITY_EDITOR\n            string deviceModel = SystemInfo.deviceModel;\n            Debug.Log (deviceModel);\n            if (deviceModel != null && deviceModel != \"\") {\n                if (deviceModel.IndexOf(\"iPhone3\") != -1 || deviceModel.IndexOf(\"iPhone4\") != -1) {\n                    mThreadSplitCount = 2;\n                } else if (deviceModel.IndexOf(\"iPhone5\") != -1 || deviceModel.IndexOf(\"iPhone6\") != -1) {\n                    mThreadSplitCount = 4;\n                } else if (deviceModel.IndexOf(\"iPad2\") != -1) {\n                    mThreadSplitCount = 2;\n                } else if (deviceModel.IndexOf(\"iPad3\") != -1) {\n                    mThreadSplitCount = 3;\n                } else if (deviceModel.IndexOf(\"iPad4\") != -1) {\n                    mThreadSplitCount = 4;\n                } else if (deviceModel.IndexOf(\"iPod\") != -1) {\n                    mThreadSplitCount = 1;\n                }\n                Debug.Log(\"DeviceModel : \" + deviceModel + \" ThreadCount : \" + mThreadSplitCount);\n            }\n        #elif UNITY_ANDROID && !UNITY_EDITOR\n            var cls = new AndroidJavaClass(\"android.os.Build$VERSION\");\n            int apiLevel = cls.GetStatic<int>(\"SDK_INT\");\n            if (14 <= apiLevel && apiLevel < 17) {\n                mThreadSplitCount = 1;\n            } else if (17 <= apiLevel && apiLevel < 19) {\n                mThreadSplitCount = 3;\n            } else if (19 <= apiLevel && apiLevel < 21) {\n                mThreadSplitCount = 4;\n            }\n            Debug.Log(\"ApiLevel : \" + apiLevel + \" ThreadCount : \" + mThreadSplitCount);\n        #endif\n\n        int splitCount = _cacheContentsList.Count / mThreadSplitCount;\n\n        if (splitCount == 0) {\n            splitCount = _cacheContentsList.Count;\n        }\n\n        foreach (var cList in _cacheContentsList)\n        {\n            count++;\n            tmpC.Add (cList);\n\n            if (splitCount <= count && count % splitCount == 0 && inCount != mThreadSplitCount) {\n                _pacialContentsList.Add (inCount, tmpC);\n                tmpC = new List<ContentsEntity.Contents> ();\n                //Debug.Log (\"list add : \" + inCount);\n                inCount++;\n            } else if (_cacheContentsList.Count == count) {\n                //Debug.Log (\"mod all add\");\n                _pacialContentsList.Add (inCount, tmpC);\n            }\n        }\n\n        _asyncResultList = new List<IAsyncResult>();\n        foreach (var pC in _pacialContentsList)\n        {\n            // Create Download List\n            foreach (var cList in pC.Value) {\n                dic.Add (new Dictionary<string, string> (){\n                    {\"_awsS3Url\", string.Format (\"{0}{1}\", ApiData.GetContentsDataURL (ApiData.API_CONTENTS_REQUEST_URI), cList.file_path)},\n                    {\"dir\", string.Format (\"{0}{1}/\", StreamingAssetsHelper.GetDownLoadPath (), cList.directory)},\n                    {\"file_name\",  cList.file_name},\n                    {\"releaseId\",  cList.release_id},\n                    {\"versionKey\", cList.file_path},\n                    {\"hashFile\",   cList.file_hash}\n                });\n            }\n            List<Dictionary<string, string>> handOf = new List<Dictionary<string, string>> ();\n            handOf.AddRange (dic);\n\n            // Async Excute\n            _threadQueueCounter++;\n            ThreadDownloadDelegate tdDelegate = new ThreadDownloadDelegate (StreamLargeFile);\n            IAsyncResult asyncResult = tdDelegate.BeginInvoke (handOf, _threadQueueCounter, new AsyncCallback(DownloadThreadFinished), null);\n            _asyncResultList.Add (asyncResult);\n\n            // dic init\n            dic = new List<Dictionary<string, string>> ();\n        }\n        Debug.Log (\"Total Thread Count : \" + _threadQueueCounter);\n    }\n\n    #endregion\n\n    #region Private Helper Functions\n    /// <summary>\n    /// Streams the large file.\n    /// Calling this function again when the \"DownloadProgress\" key in the PlayerPrefs present will \n    /// continue the download\n    /// </summary>\n    /// <param name=\"_contentsList\">Contents list.</param>\n    //private void StreamLargeFile(ContentsEntity.Contents _content)\n    private void StreamLargeFile (List<Dictionary<string, string>> _contents, int _threadId)\n    {\n        string _awsS3Url;\n        string dir;\n        string file_name;\n        string releaseId; //\n        string versionKey;//filePath\n        string hashFile; //\u30cf\u30c3\u30b7\u30e5\u5024\n        string saveFileName;\n\n        HttpWebResponse tHttpWebResponse = null;\n        Stream tHttpWebResponseStream = null;\n        byte[] tResponseBytes = null;\n\n        Debug.Log (\"StreamLargeFile Thread Start NO.\" + _threadId);\n        Debug.Log (_contents.Count);\n        foreach (var _content in _contents) {\n\n            if (_exeptionFlag == true) {\n                Debug.LogError (\"ThreadId \" + _threadId + \" / Already Exception at Start\");\n                break;\n            }\n\n            _awsS3Url = null;\n            dir = null;\n            file_name = null;\n            releaseId = null;\n            versionKey = null; //filePath\n            hashFile = null; //\u30cf\u30c3\u30b7\u30e5\u5024\n            saveFileName = null;\n\n            if (_content.TryGetValue (\"_awsS3Url\", out _awsS3Url) == true &&\n                _content.TryGetValue (\"dir\", out dir) == true &&\n                _content.TryGetValue (\"file_name\", out file_name) == true &&\n                _content.TryGetValue (\"releaseId\", out releaseId) == true &&\n                _content.TryGetValue (\"versionKey\", out versionKey) == true &&\n                _content.TryGetValue (\"hashFile\", out hashFile) == true\n                ) {\n                if (!File.Exists (dir))\n                    System.IO.Directory.CreateDirectory (dir);\n\n                saveFileName = string.Format (\"{0}\", file_name);\n\n                tHttpWebResponse = null;\n                tHttpWebResponseStream = null;\n                tResponseBytes = null;\n\n                try\n                {\n                    // get resource\n                    //Debug.Log(\"\u53d6\u5f97URL : \" + _awsS3Url + \"?realse_id=\" + releaseId);\n                    sendHttpRequest (ref tHttpWebResponse, _awsS3Url + \"?realse_id=\" + releaseId);\n\n                    if (tHttpWebResponse.StatusCode != null) {\n                        if (tHttpWebResponse.StatusCode == HttpStatusCode.OK) {\n                            FileStream fs = new FileStream (System.IO.Path.Combine(dir, saveFileName), FileMode.Create, FileAccess.Write);\n                            tHttpWebResponseStream     = tHttpWebResponse.GetResponseStream ();\n                            BinaryReader tBinaryReader = new BinaryReader (tHttpWebResponseStream);\n                            tResponseBytes = tBinaryReader.ReadBytes ((int)tHttpWebResponse.ContentLength);\n                            WriteFromBytesToFile(fs, tResponseBytes, System.IO.Path.Combine(dir, saveFileName));\n                        }\n                    }\n                }\n                catch (Exception tException)\n                {\n                    //Debug.LogError (\"DownloadEngine.threadLoop: Exception: \" + tException.ToString ());\n                    Debug.LogError (\"ThreadId \" + _threadId + \" / Exception\");\n                    _exeptionFlag = true;\n                    break;\n                }\n                finally\n                {\n                    if (tHttpWebResponseStream != null)\n                        tHttpWebResponseStream.Close ();\n                    if (tHttpWebResponse != null)\n                        tHttpWebResponse.Close ();\n                }\n\n                if (_exeptionFlag == true) {\n                    Debug.LogError (\"ThreadId \" + _threadId + \" / Already Exception at Http After\");\n                    break;\n                }\n\n                if (File.Exists (System.IO.Path.Combine(dir, saveFileName)))\n                {\n                    //\u30cf\u30c3\u30b7\u30e5\u30d5\u30a1\u30a4\u30eb\u304c\u65e2\u5b58\n                    if (CacheAssetContentsPrefs.CacheAssetContentsGetString (System.IO.Path.Combine(dir, saveFileName)) != null && CacheAssetContentsPrefs.CacheAssetContentsGetString (System.IO.Path.Combine(dir, saveFileName)) != \"\")\n                    {\n                        //\u65e2\u306b\u30e6\u30fc\u30b6\u30fc\u304c\u30ed\u30fc\u30ab\u30eb\u306b\u30cf\u30c3\u30b7\u30e5\u30c7\u30fc\u30bf\u3068\u6b63\u78ba\u306a\u30b3\u30f3\u30c6\u30f3\u30c4\u30d5\u30a1\u30a4\u30eb\u3092\u6301\u3063\u3066\u3044\u308b\u5834\u5408\u306e\u51e6\u7406\u3002\n                        //\u30d0\u30fc\u30b8\u30e7\u30f3\u30c1\u30a7\u30c3\u30af\n\n//Debug.Log (\" \u30ea\u30ea\u30fc\u30b9ID\u30c1\u30a7\u30c3\u30af \" + releaseId + \" == \" + CacheAssetContentsPrefs.CacheAssetContentsGetString (versionKey));\n                        if (releaseId != CacheAssetContentsPrefs.CacheAssetContentsGetString (versionKey) && CacheAssetContentsPrefs.CacheAssetContentsGetString (versionKey) != null && CacheAssetContentsPrefs.CacheAssetContentsGetString (versionKey) != \"\")\n                        {\n                            // \u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u9055\u3048\u3070\u518d\u5ea6\u3001\u65b0\u3057\u304f\u30ed\u30fc\u30ab\u30eb\u306b\u4fdd\u5b58\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u76f4\u63a5\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u898b\u308b\u51e6\u7406\u3092\u5165\u308c\u308b\u3002\n                            // \u30cf\u30c3\u30b7\u30e5\u30d5\u30a1\u30a4\u30eb\u304c\u9055\u3048\u3070\u3082\u3046\u4e00\u5ea6\u3001\u518d\u51e6\u7406\n                            if (calcMd5 (System.IO.Path.Combine(dir, saveFileName)) != hashFile)\n                            {\n\nDebug.Log (\"\u4e0d\u6574\u54080\");\nDebug.LogError (\"\u4e0d\u6574\u54080:\" + calcMd5 (System.IO.Path.Combine(dir, saveFileName)) + \" == \" + hashFile);\n                                    // \u5931\u6557\u3057\u3066\u3044\u308b\n                                    CacheAssetContentsPrefs.CacheAssetContentsSetString (System.IO.Path.Combine(dir, saveFileName), \"\");\n                                    CacheAssetContentsPrefs.CacheAssetContentsSetString (versionKey, \"\");\n                                    RetryMultipleDownloadCount ();\n                                }\n                                else\n                                {\n                                    //\u6210\u529f\u3057\u3066\u3044\u308b\n//Debug.Log (\"\u6210\u529f0: \" + versionKey);\n                                    CacheAssetContentsPrefs.CacheAssetContentsSetString (System.IO.Path.Combine(dir, saveFileName), hashFile);\n                                    CacheAssetContentsPrefs.CacheAssetContentsSetString (versionKey, releaseId);\n                                    DownloadCountUp ();\n                                }\n                            }\n                            else if (CacheAssetContentsPrefs.CacheAssetContentsGetString (System.IO.Path.Combine(dir, saveFileName)) != hashFile && releaseId == CacheAssetContentsPrefs.CacheAssetContentsGetString (versionKey))\n                            {\n                                //\u30cf\u30c3\u30b7\u30e5\u30d5\u30a1\u30a4\u30eb\u304c\u9055\u3048\u3070\u3082\u3046\u4e00\u5ea6\u3001\u518d\u51e6\u7406\nDebug.Log (\"\u4e0d\u6574\u54081\");\nDebug.LogError (\"\u4e0d\u6574\u54081:\" + CacheAssetContentsPrefs.CacheAssetContentsGetString (System.IO.Path.Combine(dir, saveFileName)) + \" == \" + hashFile);\n                                // \u5931\u6557\u3057\u3066\u3044\u308b\n                                CacheAssetContentsPrefs.CacheAssetContentsSetString (System.IO.Path.Combine(dir, saveFileName), \"\");\n                                CacheAssetContentsPrefs.CacheAssetContentsSetString (versionKey, \"\");\n                                RetryMultipleDownloadCount ();\n                            }\n                            else\n                            {\n                                // \u6210\u529f\u3057\u3066\u3044\u308b\n//Debug.Log (\"\u6210\u529f1: \" + versionKey);\n                                CacheAssetContentsPrefs.CacheAssetContentsSetString (System.IO.Path.Combine(dir, saveFileName), hashFile); \n                                CacheAssetContentsPrefs.CacheAssetContentsSetString (versionKey, releaseId);\n                                DownloadCountUp ();\n                            }\n                        }\n                        else\n                        {\n                            //\u65b0\u898f\u30e6\u30fc\u30b6\u30fc\u3084\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u524a\u9664\u6642\u306b\u5165\u3063\u3066\u3044\u304f\u51e6\u7406\u3002\n                            if (calcMd5 (System.IO.Path.Combine(dir, saveFileName)) != hashFile)\n                            {\n                                // \u30cf\u30c3\u30b7\u30e5\u30d5\u30a1\u30a4\u30eb\u304c\u9055\u3048\u3070\u3082\u3046\u4e00\u5ea6\u3001\u518d\u51e6\u7406\nDebug.Log (\"\u4e0d\u6574\u54082\");\nDebug.LogError (calcMd5 (System.IO.Path.Combine(dir, saveFileName)) + \" == \" + hashFile);\n                                // \u5931\u6557\u3057\u3066\u3044\u308b\n                                CacheAssetContentsPrefs.CacheAssetContentsSetString (System.IO.Path.Combine(dir, saveFileName), \"\");\n                                CacheAssetContentsPrefs.CacheAssetContentsSetString (versionKey, \"\");\n                                RetryMultipleDownloadCount ();\n                            }\n                            else\n                            {\n                                //\u6210\u529f\u3057\u3066\u3044\u308b\n//Debug.Log (\"\u6210\u529f2: \" + versionKey);\n                                CacheAssetContentsPrefs.CacheAssetContentsSetString (System.IO.Path.Combine(dir, saveFileName), hashFile);\n                                CacheAssetContentsPrefs.CacheAssetContentsSetString (versionKey, releaseId);\n                                DownloadCountUp ();\n                            }\n                        }\n                    }\n                //Debug.Log (\"ThreadId \" + _threadId + \" / \" + _currentDownloadCount.ToString() + \" FIX \u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u30ab\u30a6\u30f3\u30c8\");\n\n            } else {\n                Debug.LogError (\"\u30c7\u30fc\u30bf\u6e21\u305b\u3066\u306a\u3044\u3002\");\n                _exeptionFlag = true;\n                break;\n            }\n\n        }\n        //System.GC.Collect ();\n        Debug.Log (\"StreamLargeFile Thread Finish NO.\" + _threadId);\n    }\n\n    /// <summary>\n    /// Writes from bytes to file.\n    /// </summary>\n    /// <param name=\"pDestinationFileStream\">P destination file stream.</param>\n    /// <param name=\"pSourceBuffer\">P source buffer.</param>\n    /// <param name=\"saveFullPath\">Save full path.</param>\n    public void WriteFromBytesToFile(FileStream pDestinationFileStream, byte[] pSourceBuffer, string saveFullPath)\n    {\n        try {\n            long tLength = pSourceBuffer.Length;\n            long tBeforeLength = pDestinationFileStream.Length;\n\n            pDestinationFileStream.Seek(0, SeekOrigin.Begin);\n            if (tLength <= 0) {\n                _exeptionFlag = true;\n            } else {\n                pDestinationFileStream.Write(pSourceBuffer, 0, (int)tLength);\n\n                if (tBeforeLength > tLength) {\n                    pDestinationFileStream.SetLength(tLength);\n                }\n            }\n        } catch (IOException pException) {\n            Debug.LogError(\"IOException:\" + pException.Message);\n        } finally {\n            pDestinationFileStream.Close ();\n        }\n    }\n\n    /// <summary>\n    /// Downloads the thread finished.\n    /// </summary>\n    /// <param name=\"dtAsynResult\">Dt asyn result.</param>\n    private  void DownloadThreadFinished(IAsyncResult dtAsynResult)\n    {\n        AsyncResult dtCastedAsyncResult = (AsyncResult)dtAsynResult;\n        ThreadDownloadDelegate tdDelegate = (ThreadDownloadDelegate)dtCastedAsyncResult.AsyncDelegate;\n        tdDelegate.EndInvoke (dtAsynResult);\n\n        //dtCastedAsyncResult.AsyncWaitHandle.WaitOne();\n        if (dtAsynResult.IsCompleted == true) {\n\n            _threadQueueCounter = _threadQueueCounter - 1;\n\n//              Debug.Log (\"Thread Queue Counter : \" + _threadQueueCounter);\n//              Debug.Log (\"DownloadFinished Get Counter : \" + GetDownloadCount ());\n//              Debug.Log (\"Download Counter : \" + _downloadListCount);\n            if (GetDownloadCount () == _downloadListCount) {\n                StopTime ();\n                Debug.Log (ElapsedTime + \" >>> \u7d4c\u904e\u6642\u9593 \"); //\u3069\u308c\u304f\u3089\u3044\u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u51e6\u7406\u7d42\u308f\u3063\u305f\u304b\uff1f\n                Debug.Log (\"ALL FInished Downloaded > \" + _currentDownloadCount);\n                Debug.Log (\"ALL FInished File Check Error > \" + _tryCounter);\n\n                _currentDownloadCount = 0;\n                _tryCounter = 0;\n                if (_tryCounter == 0) {\n                    _isLoadFin = true; //\u5b8c\u4e86\u901a\u77e5\u7528\u3002\n                    CacheAssetContentsPrefs.CacheAssetContentsFlush (); //\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\u7b49\u3092\u3059\u308b\u305f\u3081\u306e\u30ed\u30fc\u30ab\u30eb\u4fdd\u5b58\u7528\u30c7\u30fc\u30bf\u3002\n                } else {\n                    Debug.Log (\"Download fix broken\");\n                    CacheAssetContentsPrefs.CacheAssetContentsFlush ();\n                    _exeptionFlag = true;\n                }\n                return;\n            } else {\n                if (_threadQueueCounter == 0) {\n                    Debug.Log (\"Counter not fix\");\n\n//                      Debug.Log (\"DownloadFinished Get Counter : \" + GetDownloadCount ());\n//                      Debug.Log (\"Download Counter : \" + _downloadListCount);\n                        // AutoRetry\n                        if (_displayErrorPopupFlag == false && _exeptionFlag == false) {\n                            Debug.Log (\"Counter not fix Auto Retry\");\n                            //_currentDownloadCount = 0;\n                            CacheAssetContentsPrefs.CacheAssetContentsFlush ();\n                            _exeptionFlag = true;\n                        }\n                    }\n                }\n            }\n        }\n        private static IEnumerator deferredInvoke(float seconds, System.Action action)\n        {\n            yield return new WaitForSeconds(seconds);\n            action ();\n        }\n        #endregion\n    #region \u7c21\u6613\u7684\u306a\u30ea\u30af\u30a8\u30b9\u30c8\u51e6\u7406\u3002\n\n    /// <summary>\n    /// Sends the http request.\n    /// </summary>\n    /// <param name=\"pDestinationWebResponse\">P destination web response.</param>\n    /// <param name=\"pSourceUrl\">P source URL.</param>\n    public void sendHttpRequest(ref HttpWebResponse pDestinationWebResponse, string pSourceUrl)\n    {\n        int tTimeout = mHttpRequestTimeout;\n        string tUserAgent = mHttpRequestUserAgent;\n\n        HttpWebRequest tHttpWebRequest = null;\n        if (pDestinationWebResponse != null) {\n            pDestinationWebResponse.Close ();\n            pDestinationWebResponse = null;\n        }\n\n        try {\n            Uri tUrl = new Uri(pSourceUrl);\n            tHttpWebRequest = (HttpWebRequest)WebRequest.Create(tUrl);\n            tHttpWebRequest.Timeout = tTimeout;\n            tHttpWebRequest.UserAgent = tUserAgent;\n\n            if (System.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable()) {\n                //Debug.Log (\"Network conect status : \" + System.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable());\n                pDestinationWebResponse = (HttpWebResponse)tHttpWebRequest.GetResponse();\n\n                // Check response.\n                if (pDestinationWebResponse.StatusCode == HttpStatusCode.OK) {                      \n                    return;\n                }\n            } else {\n                Debug.Log (\"Network disconect\");\n                _exeptionFlag = true;\n                return;\n            }\n        } catch (WebException tWebException) {\n            pDestinationWebResponse = (HttpWebResponse)tWebException.Response;\n            if (pDestinationWebResponse == null) {\n                _autoRetry++;\n                Debug.LogError (\"sendHttpRequest : HttpWebResponse Error {\" + tWebException.Message + \"}\");\n                if (_autoRetry <= 3) {\n                    Debug.Log (\"AutoRetry : \" + _autoRetry);\n                    sendHttpRequest (ref pDestinationWebResponse, pSourceUrl);\n                } else {\n                    _exeptionFlag = true;\n                }\n                return;\n            } else {\n                if (tWebException.Status == System.Net.WebExceptionStatus.ProtocolError) {\n                    System.Net.HttpWebResponse errorResponse = (System.Net.HttpWebResponse)tWebException.Response;\n                    Debug.LogError (\"DownloadEngine.sendHttpRequest: {\" + tWebException.Message + \"} pSourceUrl={\" + pSourceUrl + \"} StatusCode={\" + errorResponse.StatusCode + \"} StatusDescription={\" + errorResponse.StatusDescription + \"}\");\n                } else {\n                    Debug.LogError (\"sendHttpRequest: {\" + tWebException.Message + \"} pSourceUrl={\" + pSourceUrl + \"} ExceptionStatus = {\" + tWebException.Status.ToString () + \"}\");\n                }\n                _exeptionFlag = true;\n                return;\n            }\n        }\n    }\n\n    /// <summary>\n    /// Networks the check.\n    /// </summary>\n    /// <returns><c>true</c>, if check was networked, <c>false</c> otherwise.</returns>\n    private bool NetworkCheck() {\n\n        string host = \"\";\n        if (ApiData._env == \"product\") {\n            host = string.Format(\"http://{0}\", ApiData.Instance.PRODUCT_DOMAIN);\n        } else if (ApiData._env == \"staging\") {\n            host = string.Format(\"http://{0}\", ApiData.Instance.STG_DOMAIN);\n        } else {\n            host = string.Format(\"http://{0}\", ApiData.Instance.DEV_DOMAIN);\n        }\n\n        HttpWebRequest webreq = null;\n        HttpWebResponse webres = null;\n        try\n        {\n            //HttpWebRequest\u306e\u4f5c\u6210\n            webreq = (HttpWebRequest)WebRequest.Create(host);\n            //\u30e1\u30bd\u30c3\u30c9\u3092HEAD\u306b\u3059\u308b\n            webreq.Method = \"HEAD\";\n            //\u53d7\u4fe1\u3059\u308b\n            webres = (HttpWebResponse)webreq.GetResponse();\n            //\u5fdc\u7b54\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u3092\u8868\u793a\n            Debug.Log (\"NetworkCheck OK : \" + webres.StatusCode);\n            return true;\n        }\n        catch (WebException tWebException)\n        {\n            Debug.Log (\"NetworkCheck Error : \" + tWebException.Message);\n            return false;\n        }\n        finally\n        {\n            if (webres != null)\n                webres.Close();\n        }\n    }\n    #endregion\n\n    #region \u518d\u51e6\u7406\n    private void DownloadCountUp ()\n    {\n        lock (_lockObj){\n            _currentDownloadCount++;\n        }\n    }\n    private int GetDownloadCount ()\n    {\n        lock (_lockObj){\n            return _currentDownloadCount;\n        }\n    }\n    private void RetryMultipleDownloadCount ()\n    {\n        lock (_lockObj){\n            _tryCounter++;\n        }\n    }\n    #endregion\n\n\n    #region \u5171\u901a\u30dd\u30c3\u30d7\u30a2\u30c3\u30d7\n    /// <summary>\n    /// Https the error popup.\n    /// </summary>\n    private void HttpIoOrNetworkErrorPopup ()\n    {\n        GameObject.FindGameObjectWithTag (CommonConstants.NGUI_CAMERA_TAG).GetComponent<UICamera> ().enabled = false;\n        new NguiPopupHelper ().CommonPopUpHelper \n        (\n            LocalMsgConst.CONECTION_ERROR_TITLE,\n            LocalMsgConst.CONECTION_ERROR_TEXT,\n            this.gameObject,\n            this.gameObject,\n            \"ReDownload\",\n            \"CancelButton\",\n            CommonConstants.NGUI_COMMON_POPUP_2CHOICE\n        );\n    }\n\n    /// <summary>\n    /// Res the download.\n    /// </summary>\n    public void ReDownload ()\n    {\n        /** SE\u518d\u751f */\n        CriSoundManager.sePlayCue (SoundConstants.CRIADX2_SE_COM_CANCEL);\n\n        _displayNetworkPopupFlag = false;\n        _currentDownloadCount = 0;\n\n        CacheAssetContentsPrefs.CacheAssetContentsFlush ();\n        MultipleDownload (_cacheContentsList, true);\n    }\n\n    public void CancelButton ()\n    {\n        /** SE\u518d\u751f */\n        CriSoundManager.sePlayCue(SoundConstants.CRIADX2_SE_COM_CANCEL);\n\n        Extention.CommonPlayerPrefs.CommonSetString (LocalConstants.SCENE_BEFORE_QUEUE_SAVE_KEY, Application.loadedLevelName);\n        Extention.CommonPlayerPrefs.CommonSetString (LocalConstants.SCENE_AFTER_QUEUE_SAVE_KEY, CommonConstants.SCENE_START);\n        SceneManager.NextSceneRedirect (CommonConstants.SCENE_START);\n    }\n    #endregion\n\n    #region \u30d9\u30f3\u30c1\u30de\u30fc\u30af\u8a08\u6e2c\u7528\u95a2\u6570\u7fa4\n    public DateTime mStartedDateTime;  //\u6642\u9593\u8a08\u6e2c\u7528\n    /// <summary>\n    /// \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\u3092\u8fd4\u3057\u307e\u3059\n    /// </summary>\n    public string ElapsedTime { get; private set; }\n\n    /// <summary>\n    /// \u7d4c\u904e\u6642\u9593\u306e\u8a08\u6e2c\u3092\u958b\u59cb\u3057\u307e\u3059\n    /// </summary>\n    public void StartTime()\n    {\n        mStartedDateTime = DateTime.Now;\n    }\n\n    /// <summary>\n    /// \u7d4c\u904e\u6642\u9593\u306e\u8a08\u6e2c\u3092\u505c\u6b62\u3057\u307e\u3059\n    /// </summary>\n    public void StopTime()\n    {\n        var ts = DateTime.Now - mStartedDateTime;\n        ElapsedTime = string.Format(\n            \"{0:00}:{1:00}:{2:00}.{3:00}\",\n            ts.Hours, \n            ts.Minutes, \n            ts.Seconds,\n            ts.Milliseconds / 10\n        );\n    }\n    #endregion\n\n    #region \u30d5\u30a1\u30a4\u30eb\u30cf\u30c3\u30b7\u30e5\u5024\u8a08\u7b97\u95a2\u6570\n    /// <summary>\n    /// Calculates the File By md5.\n    /// </summary>\n    /// <returns>The md5.</returns>\n    /// <param name=\"filename\">Filename.</param>\n    private string calcMd5 (string path)\n    {\n        string result;\n        using (var stream = new FileStream (path, FileMode.Open,\n                                FileAccess.Read,\n                                FileShare.Read))\n        {\n            byte[] bytehash = System.Security.Cryptography.MD5.Create ().ComputeHash (stream);\n            result = BitConverter.ToString (bytehash).Replace (\"-\", string.Empty);\n            stream.Close ();\n        }\n        return result;\n    }\n\n    #endregion\n\n\n\n    #region \u8a66\u9a13\u7684\u306b\u8a66\u3057\u3066\u3044\u308b\u7b87\u6240\u3002\n    /// <summary>\n    /// Texures the load set.\n    /// \u30ed\u30fc\u30c7\u30a3\u30f3\u30b0\u30b7\u30fc\u30f3\u306e\u8ca0\u8377\u3092\u6e1b\u3089\u3059\u305f\u3081\n    /// \u30b9\u30dd\u30c3\u30c8\u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u8868\u793a\u3055\u305b\u308b\u51e6\u7406\u3092\u5165\u308c\u308b\n    /// \u73fe\u5728\uff1a[\u6b66\u5668\u30a2\u30a4\u30b3\u30f3], [\u30e6\u30cb\u30c3\u30c8\u30a2\u30a4\u30b3\u30f3]\u3001[\u30e6\u30cb\u30c3\u30c8Detail], [UnitNo_deck]\u306epng\n    /// </summary>\n    /// <param name=\"targetId\">Target identifier.</param>\n    /// <param name=\"type\">Type.</param>\n    /// <param name=\"_contents\">Contents.</param>\n    /// <param name=\"targetObj\">Target object.</param>\n    public void TexureLoadSet (string targetId, int type, List<ContentsEntity.Contents> _contents, GameObject targetObj, string option=\"\")\n    {\n        ContentsEntity.Contents content = new ContentsEntity.Contents ();\n        string path = \"\";\n        if (option != \"\") \n        {\n            content = ContentsHandler.GetContentsList (targetId, type.ToString (), _contents, option);\n        } else {\n            content = ContentsHandler.GetContentsList (targetId, type.ToString (), _contents, targetId);\n        }\n\n        if (content != null ) {\n            path = string.Format (\"{0}{1}{2}\", StreamingAssetsHelper.GetDownLoadPath (), content.directory, content.file_name);\n            string dir = string.Format (\"{0}{1}\", StreamingAssetsHelper.GetDownLoadPath (), content.directory);\n            if (!File.Exists (dir))\n                Directory.CreateDirectory (dir);\n\n            //\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u3001\u305d\u306e\u307e\u307e\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3002\n            if (File.Exists (path) == true) {\n                if (CacheAssetContentsPrefs.CacheAssetContentsGetString (content.file_path) == content.release_id)\n                {\n                    Texture2D tex = new Texture2D (4, 4, TextureFormat.ARGB32, false, false);\n                    tex.LoadImage (GetBinaryLocalLoad (path));\n                    tex.Apply (true, true);\n                    targetObj.GetComponent<UITexture> ().mainTexture = tex;\n                } else {\n                    StartCoroutine (SaveAndRendering (targetId, type, _contents, content, targetObj, path, option));\n                }\n                //\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3001\u30c7\u30fc\u30bf\u4fdd\u7ba1\u3057\u3066\u8868\u793a\u51e6\u7406\u3002\n            } else if (File.Exists (path) == false) {\n                StartCoroutine (SaveAndRendering (targetId, type, _contents, content, targetObj, path, option));\n            }\n        }\n    }\n\n\n\n    //Dictionary <string, GameObject> \n    /// <summary>\n    /// Saves to rendering.\n    /// </summary>\n    /// <param name=\"targetId\">Target identifier.</param>\n    /// <param name=\"type\">Type.</param>\n    /// <param name=\"_contents\">Contents.</param>\n    /// <param name=\"content\">Content.</param>\n    /// <param name=\"targetObj\">Target object.</param>\n    /// <param name=\"path\">Path.</param>\n    private GameObject loadObj;\n    private IEnumerator SaveAndRendering (string targetId, int type, List<ContentsEntity.Contents> _contents, ContentsEntity.Contents content, GameObject targetObj, string path, string option = \"\") \n    {\n        GameObject.FindGameObjectWithTag (CommonConstants.NGUI_CAMERA_TAG).GetComponent<UICamera> ().enabled = false;\n        //\u30a2\u30cb\u30e1\u30b7\u30e7\u30f3\u30bb\u30c3\u30c8\n        if (loadObj == null) {\n            loadObj = Instantiate (Resources.Load (ResoucesLoadConst.API_LOADING), Vector3.zero, Quaternion.identity) as GameObject;\n            loadObj.transform.localPosition = new Vector3 (0.0f, -20.0f, 0.0f);\n        }\n\n        using (WWW www = new WWW(string.Format (\"{0}{1}{2}\", ApiData.GetContentsDataURL (ApiData.API_CONTENTS_REQUEST_URI), content.file_path, \"?realse_id=\" + content.release_id))) {\n            while (www == null)\n                yield return (www != null);\n\n            while (www.isDone == false)\n                yield return (www.isDone);\n\n            //non texture file\n            if (string.IsNullOrEmpty(www.error) == false) {\n                Destroy (loadObj);\n                GameObject.FindGameObjectWithTag (CommonConstants.NGUI_CAMERA_TAG).GetComponent<UICamera> ().enabled = true;\n                Debug.LogError (www.error);\n                yield break;\n            } else {\n                StartCoroutine (SavedLocalData(path, www.bytes, content));\n            }\n            while (targetObj == null)\n                yield return (targetObj != null);\n\n            targetObj.GetComponent<UITexture> ().mainTexture = www.texture;\n        }\n\n        //File.WriteAllBytes (path, www.bytes);\n\nDebug.Log (string.Format (\"{0}{1}{2}\", ApiData.GetContentsDataURL (ApiData.API_CONTENTS_REQUEST_URI), content.file_path, \"?realse_id=\" + content.release_id)); \n        }\n    /// <summary>\n    /// Saveds the local data.\n    /// </summary>\n    /// <returns>The local data.</returns>\n    /// <param name=\"path\">Path.</param>\n    /// <param name=\"bytes\">Bytes.</param>\n    private IEnumerator SavedLocalData (string path, byte[] bytes, ContentsEntity.Contents content)\n    {\n        yield return new WaitForSeconds(2.2f);\n\n        File.WriteAllBytes (path, bytes);\n\n        while (File.Exists (path) == false)\n            yield return (File.Exists (path) == true);\n\n        if (calcMd5(path) == content.file_hash) {\n\nDebug.Log (\"hash save file proccessing.......\");\n                CacheAssetContentsPrefs.CacheAssetContentsSetString (path, content.file_hash);\n                CacheAssetContentsPrefs.CacheAssetContentsSetString (content.file_path, content.release_id);\n                CacheAssetContentsPrefs.CacheAssetContentsFlush ();\n            } else {\nDebug.Log (\" no hash file ....... \");\n                File.Delete (path);\n                CacheAssetContentsPrefs.CacheAssetContentsSetString (path, \"\");\n                CacheAssetContentsPrefs.CacheAssetContentsSetString (content.file_path, \"\");\n                CacheAssetContentsPrefs.CacheAssetContentsFlush ();\n            }\nDebug.Log (\"file save finished\");\n            Destroy (loadObj);\n            GameObject.FindGameObjectWithTag (CommonConstants.NGUI_CAMERA_TAG).GetComponent ().enabled = true;\n    }\n\n\n    /// <summary>\n    /// Gets the binary locla load.\n    /// </summary>\n    /// <returns>The Binary Local Load.</returns>\n    private byte[] GetBinaryLocalLoad (string path) \n    {\n        FileStream   fs = new FileStream(path, FileMode.Open);\n        BinaryReader br = new BinaryReader(fs);\n        byte[] buf = br.ReadBytes((int)br.BaseStream.Length);\n        br.Close();\n        return buf;\n    }\n\n\n    /// <summary>\n    /// Ises the multiple download ignore.\n    /// Loading\u30b7\u30fc\u30f3\u306e\u30b3\u30f3\u30c6\u30f3\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306b\u542b\u3081\u306a\u3044\n    /// </summary>\n    /// <returns><c>true</c>, if multiple download ignore was ised, <c>false</c> otherwise.</returns>\n    private bool IsMultipleDownloadIgnore (ContentsEntity.Contents contents)\n    {\n        bool isIgnore = false;\n        string exDir = \"co/un/dt/0/\";\n        List<string> ignoreStrList = new List<string> () {\n            \"co/un/dt\",  //\u30e6\u30cb\u30c3\u30c8\u306e\u8a73\u7d30\u30c6\u30ad\u30b9\u30c1\u30e3\u30fc\uff08\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u540d\uff09\n            //\"co/un/ic\",  //\u30e6\u30cb\u30c3\u30c8\u30a2\u30a4\u30b3\u30f3\uff08\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u540d\uff09\n            \"co/wp\"   //weapon icon, texture\n        };\n\n        //Scent to Scene Filtering\n        if (CommonPlayerPrefs.CommonGetString (LocalConstants.SCENE_AFTER_QUEUE_SAVE_KEY)    == CommonConstants.SCENE_FRIDND\n            || CommonPlayerPrefs.CommonGetString (LocalConstants.SCENE_AFTER_QUEUE_SAVE_KEY) == CommonConstants.SCENE_STRENGTHENING \n            || CommonPlayerPrefs.CommonGetString (LocalConstants.SCENE_AFTER_QUEUE_SAVE_KEY) == CommonConstants.SCENE_USER_STATUS\n            || CommonPlayerPrefs.CommonGetString (LocalConstants.SCENE_AFTER_QUEUE_SAVE_KEY) == CommonConstants.SCENE_MAIN_QUEST\n            || CommonPlayerPrefs.CommonGetString (LocalConstants.SCENE_AFTER_QUEUE_SAVE_KEY) == CommonConstants.SCENE_DOMESTICAFFAIRS\n\n//              || CommonPlayerPrefs.CommonGetString (LocalConstants.SCENE_AFTER_QUEUE_SAVE_KEY) == CommonConstants.SCENE_RAID_BOSS\n            )\n            {\n               //Debug.Log (\"scene jump koko koko \");\n                foreach (var list in ignoreStrList)\n                {\n                    //Exeption\n                    if (contents.directory.Contains (exDir)) \n                    {\n                        isIgnore = false;\n                        break;\n                    }\n                if (contents.directory.Contains (list))\n                {\n                    //Debug.Log (\" \u30de\u30c3\u30c1\u3057\u307e\u3057\u305f\u3002 \");\n                    isIgnore = true;\n                    break;\n                }\n                else\n                {\n                    //Debug.Log (\"non match\");\n                }\n            }\n        }\n\n        return isIgnore;\n    } \n    #endregion\n}\n\n}\nusing UnityEngine;\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Runtime.Remoting.Messaging;\nusing System.IO;\nusing System.Net;\nusing Api;\nusing Extention;\n\n\nnamespace Helper\n{\n    /// <summary>\n    /// Content download engine.\n    /// </summary>\n\tpublic sealed class ContentDownloadEngine : SingletonMonoBehaviourFast<ContentDownloadEngine>\n\t{\n\t\t#region \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u5909\u6570\n\t\t[SerializeField]\n\t\tprivate GameObject _progressObj;\n\n\t\t[SerializeField]\n\t\tprivate UISlider progressBar;\n\n\t\t[SerializeField]\n\t\tprivate UILabel progressLabel;\n\n\t\t[SerializeField]\n\t\tprivate UILabel _fileCheckLabel;\n\n\t\t#endregion\n\n\t    #region Private Fields\n\t\tpublic static bool _isLoadFin = false;\n\t\tpublic static string _udid = \"\";\n\n\t\tprivate List<ContentsEntity.Contents> _cacheContentsList;\n\n\t\tprivate volatile int  _currentDownloadCount = 0;\n\t\tprivate volatile int  _downloadListCount = 0;\n\n\t\tprivate volatile bool _exeptionFlag = false;\n\t\tprivate volatile bool _displayErrorPopupFlag = false;\n\t\tprivate volatile bool _displayNetworkPopupFlag = false;\n\n\t\tprivate int _setProgress;\n\t\tprivate object _lockObj = new object();\n\t\tprivate delegate void ThreadDownloadDelegate(List<Dictionary<string, string>> content, int threadId);\n\t\tprivate List<IAsyncResult> _asyncResultList;\n\t\tprivate volatile int _threadQueueCounter = 0;\n\t\tprivate volatile int  _threadCounter = 0;\n\t\tprivate volatile int _tryCounter = 0;\n\t\tprivate volatile int _autoRetry = 0;\n\n\t\tprivate readonly int threadSplitCount = 5;\n\t\tprivate readonly int mHttpRequestTimeout = 15 * 1000; // 15 Sec\n\t\tprivate readonly string mHttpRequestUserAgent  = \"\";\n\n\t    #endregion\n\n\t    #region Unity Events\n\n//\t\tvoid OnApplicationPause (bool pauseStatus)\n//        {\n//\t\t\tif (pauseStatus == true) {\n//\t\t\t\tCacheAssetContentsPrefs.CacheAssetContentsFlush ();\n//            }\n//        }\n\n\t    void Start()\n\t    {\n\t\t\t_currentDownloadCount = 0;\n\t\t\t_tryCounter = 0;\n\t\t\t_autoRetry = 0;\n//Debug.Log (\"\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u958b\u59cb\");\nStartTime(); //\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u8a08\u6e2c\u7528\n\t\t\t//\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306e\u901f\u5ea6\u6700\u9069\u5316\u7528\u8a2d\u5b9a\u3002\n\t\t    System.Net.ServicePointManager.UseNagleAlgorithm = false;\n\t\t    System.Net.ServicePointManager.DefaultConnectionLimit = 8;\n\t\t\t//file save proccess init\n\t\t    CacheAssetContentsPrefs.Init ();\n\t    }\n\n\t    void Update ()\n\t\t{\n\t\t\t//\u4f8b\u5916\u304c\u8d77\u304d\u305f\u5834\u5408\u306e\u51e6\u7406\n\t\t\tif (_exeptionFlag == true)\n            {\n\t\t\t\tif (_displayNetworkPopupFlag == false && _threadQueueCounter == 0) {\n\t\t\t\t\t_displayNetworkPopupFlag = true;\n\t\t\t\t\tHttpIoOrNetworkErrorPopup ();\n\t\t\t\t} else {\n\t\t\t\t\tif (_displayNetworkPopupFlag == false) {\n\t\t\t\t\t\tDebug.Log (\"displayNetworkPopupFlag : \" + _displayNetworkPopupFlag);\n\t\t\t\t\t\tDebug.Log (\"Last Thread Counter : \" + _threadQueueCounter);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlock (_lockObj){\n\t\t\t\t    _exeptionFlag = false;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// ProgressBar\n\t\t\tif (progressBar != null && _isLoadFin == false)\n\t\t\t{\n\t\t\t\tif (_currentDownloadCount != 0 && _cacheContentsList != null && _downloadListCount > 0)\n\t\t\t\t{\n\t\t\t\t\tprogressBar.value = ((float)_currentDownloadCount / (float)_downloadListCount) * 2;\n\n\t\t\t\t\tif (progressBar.value <= 0) {\n\t\t\t\t\t\t_progressObj.SetActive (false);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_progressObj.SetActive (true);\n\t\t\t\t\t}\n\n\t\t\t\t\t// \u30de\u30a4\u30ca\u30b9\u3068100%\u8d8a\u3048\u306f\u898b\u6804\u3048\u304c\u60aa\u3044\u306e\u3067\u7bc4\u56f2\u66f4\u65b0\n\t\t\t\t\t_setProgress = ((int)(((float)_currentDownloadCount / (float)_downloadListCount) * 100) * 2);\n\n\t\t\t\t\tif (0 <= _setProgress && _setProgress <= 100 ) {\n\t\t\t\t\t\tif (_setProgress <= 0) {\n\t\t\t\t\t\t\tprogressLabel.text = \"100%\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tprogressLabel.text = _setProgress.ToString () + \"%\";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_fileCheckLabel.gameObject.SetActive (false);\n\t\t\t\t\t} else if (0 <= _setProgress && _setProgress <= (100 * 2)) {\n\t\t\t\t\t    //\u30d5\u30a1\u30a4\u30eb\u30c1\u30a7\u30c3\u30af\u4e2d\u5c0e\u5165\u3002\n\t\t\t\t\t\tprogressLabel.text = \"100%\";\n\t\t\t\t\t\tprogressBar.value = 1.0f;\n\t\t\t\t\t\t_fileCheckLabel.gameObject.SetActive (true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprogressLabel.gameObject.SetActive (false);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_progressObj.SetActive (false); //\u3061\u3089\u3064\u304d\u9632\u6b62\u3002\n\t\t\t\t}\n\t\t\t} else if (_isLoadFin == true) {\n\t\t\t\tif (_progressObj != null) {\n\t\t\t\t\t_progressObj.SetActive (false); //\u901a\u4fe1\u51e6\u7406\u7d42\u308f\u3063\u3066\u305f\u3089False\n\t\t\t\t}\n\t\t\t}\n\t    }\n\t    #endregion\n\n\t    #region \u5916\u90e8\u7528\u30e1\u30bd\u30c3\u30c9\n\t\tpublic void MultipleDownload(object _list, bool _popupRetry = false)\n\t\t{\n\t\t\t_udid = UiidManager.GetUdid ();\n\n\t\t\tif (NetworkCheck () == false) {\n//\t\t\t\t_exeptionFlag = true;\n//\t\t\t\t_displayNetworkPopupFlag = false;\n\t\t\t\t_displayNetworkPopupFlag = true;\n\t\t\t\tStartCoroutine(deferredInvoke(0.3f, ()=>{\n\t\t\t\t\tHttpIoOrNetworkErrorPopup ();\n\t\t\t\t}));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (_threadQueueCounter != 0) {\n\t\t\t\tDebug.Log (\"Async execute now : \" + _threadQueueCounter);\n\t\t\t\t_exeptionFlag = true;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tList<ContentsEntity.Contents> _contentsList = (List<ContentsEntity.Contents>)_list;\n\t\t\tList<ContentsEntity.Contents> brushedUpList = new List<ContentsEntity.Contents> ();\n\n\t\t\t_exeptionFlag = false;\n\n\t\t\tif (_contentsList != null) {\n\t\t\t\tforeach (var list in _contentsList) {\n\t\t\t\t\tif (IsMultipleDownloadIgnore (list) == true)\n\t\t\t\t\t\tcontinue;\n\n                    string fullPath = string.Format (\"{0}{1}{2}\", StreamingAssetsHelper.GetDownLoadPath (), list.directory, list.file_name);\n\n\t\t\t\t\tif (File.Exists (fullPath)) {\n\t\t\t\t\t\tif (CacheAssetContentsPrefs.CacheAssetContentsGetString (list.file_path) != list.release_id) { //\u30d0\u30fc\u30b8\u30e7\u30f3\u756a\u53f7\u304c\u4e00\u81f4\u3057\u306a\u3044\u5834\u5408\u3002\n\t\t\t\t\t\t\tbrushedUpList.Add (list);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (!File.Exists (fullPath)) { //\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\n\t\t\t\t\t\tbrushedUpList.Add (list);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\nDebug.Log (brushedUpList.Count + \" \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u7cbe\u67fb\u3055\u308c\u305f\u30ea\u30b9\u30c8\u6570 \");\n\n\t\t\tif (brushedUpList.Count <= 0) \n\t\t\t{\nDebug.Log (\" \u5165\u3063\u3066\u308b\u3001\u6b21\u306e\u30b7\u30fc\u30f3\u306b\u98db\u3076\u3002 \");\n\t\t\t\t_isLoadFin = true;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_cacheContentsList = brushedUpList;\n\t\t\t_downloadListCount = _cacheContentsList.Count;\n\t\t\tList<Dictionary<string,string>> dic = new List<Dictionary<string, string>> ();\n\n\t\t\t//\u5206\u6563\u51fa\u6765\u308b\u3088\u3046\u306b\u51e6\u7406\u66f8\u304f\n\t\t\tDictionary<int, List<ContentsEntity.Contents>> _pacialContentsList = new Dictionary<int, List<ContentsEntity.Contents>>();\n\t\t\tList<ContentsEntity.Contents> tmpC = new List<ContentsEntity.Contents> ();\n\t\t\tint count = 0;\n\t\t\tint inCount = 1;\n\n\t\t\t// \u7aef\u672b\u5225\u306b\u5206\u5272\u6570\u3092\u8abf\u6574\n\t\t\tint mThreadSplitCount = threadSplitCount;\n\t\t\t#if UNITY_IPHONE && !UNITY_EDITOR\n\t\t\t\tstring deviceModel = SystemInfo.deviceModel;\n\t\t\t\tDebug.Log (deviceModel);\n\t\t\t\tif (deviceModel != null && deviceModel != \"\") {\n\t\t\t\t\tif (deviceModel.IndexOf(\"iPhone3\") != -1 || deviceModel.IndexOf(\"iPhone4\") != -1) {\n\t\t\t\t\t\tmThreadSplitCount = 2;\n\t\t\t\t\t} else if (deviceModel.IndexOf(\"iPhone5\") != -1 || deviceModel.IndexOf(\"iPhone6\") != -1) {\n\t\t\t\t\t\tmThreadSplitCount = 4;\n\t\t\t\t\t} else if (deviceModel.IndexOf(\"iPad2\") != -1) {\n\t\t\t\t\t\tmThreadSplitCount = 2;\n\t\t\t\t\t} else if (deviceModel.IndexOf(\"iPad3\") != -1) {\n\t\t\t\t\t\tmThreadSplitCount = 3;\n\t\t\t\t\t} else if (deviceModel.IndexOf(\"iPad4\") != -1) {\n\t\t\t\t\t\tmThreadSplitCount = 4;\n\t\t\t\t\t} else if (deviceModel.IndexOf(\"iPod\") != -1) {\n\t\t\t\t\t\tmThreadSplitCount = 1;\n\t\t\t\t\t}\n\t\t\t\t\tDebug.Log(\"DeviceModel : \" + deviceModel + \" ThreadCount : \" + mThreadSplitCount);\n\t\t\t\t}\n\t\t\t#elif UNITY_ANDROID && !UNITY_EDITOR\n\t\t\t\tvar cls = new AndroidJavaClass(\"android.os.Build$VERSION\");\n\t\t\t\tint apiLevel = cls.GetStatic<int>(\"SDK_INT\");\n\t\t\t\tif (14 <= apiLevel && apiLevel < 17) {\n\t\t\t\t\tmThreadSplitCount = 1;\n\t\t\t\t} else if (17 <= apiLevel && apiLevel < 19) {\n\t\t\t\t\tmThreadSplitCount = 3;\n\t\t\t\t} else if (19 <= apiLevel && apiLevel < 21) {\n\t\t\t\t\tmThreadSplitCount = 4;\n\t\t\t\t}\n\t\t\t\tDebug.Log(\"ApiLevel : \" + apiLevel + \" ThreadCount : \" + mThreadSplitCount);\n\t\t\t#endif\n\n\t\t\tint splitCount = _cacheContentsList.Count / mThreadSplitCount;\n\n\t\t\tif (splitCount == 0) {\n\t\t\t\tsplitCount = _cacheContentsList.Count;\n\t\t\t}\n\n\t\t\tforeach (var cList in _cacheContentsList)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t\ttmpC.Add (cList);\n\n\t\t\t\tif (splitCount <= count && count % splitCount == 0 && inCount != mThreadSplitCount) {\n\t\t\t\t\t_pacialContentsList.Add (inCount, tmpC);\n\t\t\t\t\ttmpC = new List<ContentsEntity.Contents> ();\n\t\t\t\t\t//Debug.Log (\"list add : \" + inCount);\n\t\t\t\t\tinCount++;\n\t\t\t\t} else if (_cacheContentsList.Count == count) {\n\t\t\t\t\t//Debug.Log (\"mod all add\");\n\t\t\t\t\t_pacialContentsList.Add (inCount, tmpC);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_asyncResultList = new List<IAsyncResult>();\n\t\t\tforeach (var pC in _pacialContentsList)\n\t\t\t{\n\t\t\t\t// Create Download List\n\t\t\t\tforeach (var cList in pC.Value) {\n\t\t\t\t\tdic.Add (new Dictionary<string, string> (){\n\t\t\t\t\t\t{\"_awsS3Url\", string.Format (\"{0}{1}\", ApiData.GetContentsDataURL (ApiData.API_CONTENTS_REQUEST_URI), cList.file_path)},\n\t\t\t\t\t\t{\"dir\", string.Format (\"{0}{1}/\", StreamingAssetsHelper.GetDownLoadPath (), cList.directory)},\n\t\t\t\t\t\t{\"file_name\",  cList.file_name},\n\t\t\t\t\t\t{\"releaseId\",  cList.release_id},\n\t\t\t\t\t\t{\"versionKey\", cList.file_path},\n\t\t\t\t\t\t{\"hashFile\",   cList.file_hash}\n\t\t\t\t\t});\n\t\t\t    }\n\t\t\t\tList<Dictionary<string, string>> handOf = new List<Dictionary<string, string>> ();\n\t\t\t\thandOf.AddRange (dic);\n\n\t\t\t\t// Async Excute\n\t\t\t\t_threadQueueCounter++;\n\t\t\t\tThreadDownloadDelegate tdDelegate = new ThreadDownloadDelegate (StreamLargeFile);\n\t\t\t\tIAsyncResult asyncResult = tdDelegate.BeginInvoke (handOf, _threadQueueCounter, new AsyncCallback(DownloadThreadFinished), null);\n\t\t\t\t_asyncResultList.Add (asyncResult);\n\n\t\t\t\t// dic init\n\t\t\t\tdic = new List<Dictionary<string, string>> ();\n\t\t\t}\n\t\t\tDebug.Log (\"Total Thread Count : \" + _threadQueueCounter);\n\t\t}\n\n\t    #endregion\n\n\t    #region Private Helper Functions\n\t    /// <summary>\n\t    /// Streams the large file.\n\t\t/// Calling this function again when the \"DownloadProgress\" key in the PlayerPrefs present will \n\t    ///\tcontinue the download\n\t    /// </summary>\n\t    /// <param name=\"_contentsList\">Contents list.</param>\n\t\t//private void StreamLargeFile(ContentsEntity.Contents _content)\n\t\tprivate void StreamLargeFile (List<Dictionary<string, string>> _contents, int _threadId)\n\t\t{\n\t\t\tstring _awsS3Url;\n\t\t\tstring dir;\n\t\t\tstring file_name;\n\t\t\tstring releaseId; //\n\t\t\tstring versionKey;//filePath\n\t\t\tstring hashFile; //\u30cf\u30c3\u30b7\u30e5\u5024\n\t\t\tstring saveFileName;\n\n\t\t\tHttpWebResponse tHttpWebResponse = null;\n\t\t\tStream tHttpWebResponseStream = null;\n\t\t\tbyte[] tResponseBytes = null;\n\n\t\t\tDebug.Log (\"StreamLargeFile Thread Start NO.\" + _threadId);\n\t\t\tDebug.Log (_contents.Count);\n\t\t\tforeach (var _content in _contents) {\n\n\t\t\t\tif (_exeptionFlag == true) {\n\t\t\t\t\tDebug.LogError (\"ThreadId \" + _threadId + \" / Already Exception at Start\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t_awsS3Url = null;\n\t\t\t\tdir = null;\n\t\t\t\tfile_name = null;\n\t\t\t\treleaseId = null;\n\t\t\t\tversionKey = null; //filePath\n\t\t\t\thashFile = null; //\u30cf\u30c3\u30b7\u30e5\u5024\n\t\t\t\tsaveFileName = null;\n\n\t\t\t\tif (_content.TryGetValue (\"_awsS3Url\", out _awsS3Url) == true &&\n\t\t\t\t    _content.TryGetValue (\"dir\", out dir) == true &&\n\t\t\t\t\t_content.TryGetValue (\"file_name\", out file_name) == true &&\n\t\t\t\t\t_content.TryGetValue (\"releaseId\", out releaseId) == true &&\n\t\t\t\t\t_content.TryGetValue (\"versionKey\", out versionKey) == true &&\n\t\t\t\t\t_content.TryGetValue (\"hashFile\", out hashFile) == true\n\t\t\t\t    ) {\n\t\t\t\t\tif (!File.Exists (dir))\n\t\t\t\t\t\tSystem.IO.Directory.CreateDirectory (dir);\n\n\t\t\t\t\tsaveFileName = string.Format (\"{0}\", file_name);\n\n\t\t\t\t\ttHttpWebResponse = null;\n\t\t\t\t\ttHttpWebResponseStream = null;\n\t\t\t\t\ttResponseBytes = null;\n\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\t// get resource\n\t\t\t\t\t\t//Debug.Log(\"\u53d6\u5f97URL : \" + _awsS3Url + \"?realse_id=\" + releaseId);\n\t\t\t\t\t\tsendHttpRequest (ref tHttpWebResponse, _awsS3Url + \"?realse_id=\" + releaseId);\n\n\t\t\t\t\t\tif (tHttpWebResponse.StatusCode != null) {\n\t\t\t\t\t\t\tif (tHttpWebResponse.StatusCode == HttpStatusCode.OK) {\n\t\t\t\t\t\t\t\tFileStream fs = new FileStream (System.IO.Path.Combine(dir, saveFileName), FileMode.Create, FileAccess.Write);\n\t\t\t\t\t\t\t\ttHttpWebResponseStream     = tHttpWebResponse.GetResponseStream ();\n\t\t\t\t\t\t\t\tBinaryReader tBinaryReader = new BinaryReader (tHttpWebResponseStream);\n\t\t\t\t\t\t\t\ttResponseBytes = tBinaryReader.ReadBytes ((int)tHttpWebResponse.ContentLength);\n\t\t\t\t\t\t\t\tWriteFromBytesToFile(fs, tResponseBytes, System.IO.Path.Combine(dir, saveFileName));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception tException)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Debug.LogError (\"DownloadEngine.threadLoop: Exception: \" + tException.ToString ());\n\t\t\t\t\t\tDebug.LogError (\"ThreadId \" + _threadId + \" / Exception\");\n\t\t\t\t\t\t_exeptionFlag = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tfinally\n\t\t\t\t\t{\n\t\t\t\t\t\tif (tHttpWebResponseStream != null)\n\t\t\t\t\t\t\ttHttpWebResponseStream.Close ();\n\t\t\t\t\t\tif (tHttpWebResponse != null)\n\t\t\t\t\t\t\ttHttpWebResponse.Close ();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_exeptionFlag == true) {\n\t\t\t\t\t\tDebug.LogError (\"ThreadId \" + _threadId + \" / Already Exception at Http After\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (File.Exists (System.IO.Path.Combine(dir, saveFileName)))\n\t\t\t\t\t{\n\t\t\t\t\t\t//\u30cf\u30c3\u30b7\u30e5\u30d5\u30a1\u30a4\u30eb\u304c\u65e2\u5b58\n\t\t\t\t\t\tif (CacheAssetContentsPrefs.CacheAssetContentsGetString (System.IO.Path.Combine(dir, saveFileName)) != null && CacheAssetContentsPrefs.CacheAssetContentsGetString (System.IO.Path.Combine(dir, saveFileName)) != \"\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t    //\u65e2\u306b\u30e6\u30fc\u30b6\u30fc\u304c\u30ed\u30fc\u30ab\u30eb\u306b\u30cf\u30c3\u30b7\u30e5\u30c7\u30fc\u30bf\u3068\u6b63\u78ba\u306a\u30b3\u30f3\u30c6\u30f3\u30c4\u30d5\u30a1\u30a4\u30eb\u3092\u6301\u3063\u3066\u3044\u308b\u5834\u5408\u306e\u51e6\u7406\u3002\n\t\t\t\t\t\t    //\u30d0\u30fc\u30b8\u30e7\u30f3\u30c1\u30a7\u30c3\u30af\n\n//Debug.Log (\" \u30ea\u30ea\u30fc\u30b9ID\u30c1\u30a7\u30c3\u30af \" + releaseId + \" == \" + CacheAssetContentsPrefs.CacheAssetContentsGetString (versionKey));\n\n\t\t\t\t\t\t\tif (releaseId != CacheAssetContentsPrefs.CacheAssetContentsGetString (versionKey) && CacheAssetContentsPrefs.CacheAssetContentsGetString (versionKey) != null && CacheAssetContentsPrefs.CacheAssetContentsGetString (versionKey) != \"\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t        // \u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u9055\u3048\u3070\u518d\u5ea6\u3001\u65b0\u3057\u304f\u30ed\u30fc\u30ab\u30eb\u306b\u4fdd\u5b58\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u76f4\u63a5\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u898b\u308b\u51e6\u7406\u3092\u5165\u308c\u308b\u3002\n\t\t\t\t\t\t\t\t// \u30cf\u30c3\u30b7\u30e5\u30d5\u30a1\u30a4\u30eb\u304c\u9055\u3048\u3070\u3082\u3046\u4e00\u5ea6\u3001\u518d\u51e6\u7406\n\t\t\t\t\t\t\t\tif (calcMd5 (System.IO.Path.Combine(dir, saveFileName)) != hashFile)\n\t\t\t\t\t\t\t\t{\nDebug.Log (\"\u4e0d\u6574\u54080\");\nDebug.LogError (\"\u4e0d\u6574\u54080:\" + calcMd5 (System.IO.Path.Combine(dir, saveFileName)) + \" == \" + hashFile);\n\t\t\t\t\t\t\t\t\t// \u5931\u6557\u3057\u3066\u3044\u308b\n\t\t\t\t\t\t\t\t\tCacheAssetContentsPrefs.CacheAssetContentsSetString (System.IO.Path.Combine(dir, saveFileName), \"\");\n\t\t\t\t\t\t\t\t\tCacheAssetContentsPrefs.CacheAssetContentsSetString (versionKey, \"\");\n\t\t\t\t\t\t\t\t\tRetryMultipleDownloadCount ();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t//\u6210\u529f\u3057\u3066\u3044\u308b\n//Debug.Log (\"\u6210\u529f0: \" + versionKey);\n\t\t\t\t\t\t\t\t\tCacheAssetContentsPrefs.CacheAssetContentsSetString (System.IO.Path.Combine(dir, saveFileName), hashFile);\n\t\t\t\t\t\t\t\t\tCacheAssetContentsPrefs.CacheAssetContentsSetString (versionKey, releaseId);\n\t\t\t\t\t\t\t\t\tDownloadCountUp ();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (CacheAssetContentsPrefs.CacheAssetContentsGetString (System.IO.Path.Combine(dir, saveFileName)) != hashFile && releaseId == CacheAssetContentsPrefs.CacheAssetContentsGetString (versionKey))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t    //\u30cf\u30c3\u30b7\u30e5\u30d5\u30a1\u30a4\u30eb\u304c\u9055\u3048\u3070\u3082\u3046\u4e00\u5ea6\u3001\u518d\u51e6\u7406\nDebug.Log (\"\u4e0d\u6574\u54081\");\nDebug.LogError (\"\u4e0d\u6574\u54081:\" + CacheAssetContentsPrefs.CacheAssetContentsGetString (System.IO.Path.Combine(dir, saveFileName)) + \" == \" + hashFile);\n\t\t\t\t\t\t\t\t// \u5931\u6557\u3057\u3066\u3044\u308b\n\t\t\t\t\t\t\t\tCacheAssetContentsPrefs.CacheAssetContentsSetString (System.IO.Path.Combine(dir, saveFileName), \"\");\n\t\t\t\t\t\t\t\tCacheAssetContentsPrefs.CacheAssetContentsSetString (versionKey, \"\");\n\t\t\t\t\t\t\t\tRetryMultipleDownloadCount ();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// \u6210\u529f\u3057\u3066\u3044\u308b\n//Debug.Log (\"\u6210\u529f1: \" + versionKey);\n\t\t\t\t\t\t\t\tCacheAssetContentsPrefs.CacheAssetContentsSetString (System.IO.Path.Combine(dir, saveFileName), hashFile); \n\t\t\t\t\t\t\t\tCacheAssetContentsPrefs.CacheAssetContentsSetString (versionKey, releaseId);\n\t\t\t\t\t\t\t\tDownloadCountUp ();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t    }\n\t\t\t\t\t    else\n\t\t\t\t\t    {\n\t\t\t\t\t\t    //\u65b0\u898f\u30e6\u30fc\u30b6\u30fc\u3084\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u524a\u9664\u6642\u306b\u5165\u3063\u3066\u3044\u304f\u51e6\u7406\u3002\n\t\t\t\t\t\t\tif (calcMd5 (System.IO.Path.Combine(dir, saveFileName)) != hashFile)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t    // \u30cf\u30c3\u30b7\u30e5\u30d5\u30a1\u30a4\u30eb\u304c\u9055\u3048\u3070\u3082\u3046\u4e00\u5ea6\u3001\u518d\u51e6\u7406\nDebug.Log (\"\u4e0d\u6574\u54082\");\nDebug.LogError (calcMd5 (System.IO.Path.Combine(dir, saveFileName)) + \" == \" + hashFile);\n\t\t\t\t\t\t\t\t// \u5931\u6557\u3057\u3066\u3044\u308b\n\t\t\t\t\t\t\t\tCacheAssetContentsPrefs.CacheAssetContentsSetString (System.IO.Path.Combine(dir, saveFileName), \"\");\n\t\t\t\t\t\t\t\tCacheAssetContentsPrefs.CacheAssetContentsSetString (versionKey, \"\");\n\t\t\t\t\t\t\t\tRetryMultipleDownloadCount ();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t//\u6210\u529f\u3057\u3066\u3044\u308b\n//Debug.Log (\"\u6210\u529f2: \" + versionKey);\n\t\t\t\t\t\t\t\tCacheAssetContentsPrefs.CacheAssetContentsSetString (System.IO.Path.Combine(dir, saveFileName), hashFile);\n\t\t\t\t\t\t\t\tCacheAssetContentsPrefs.CacheAssetContentsSetString (versionKey, releaseId);\n\t\t\t\t\t\t\t\tDownloadCountUp ();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t//Debug.Log (\"ThreadId \" + _threadId + \" / \" + _currentDownloadCount.ToString() + \" FIX \u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u30ab\u30a6\u30f3\u30c8\");\n\n\t\t\t\t} else {\n\t\t\t\t    Debug.LogError (\"\u30c7\u30fc\u30bf\u6e21\u305b\u3066\u306a\u3044\u3002\");\n\t\t\t\t\t_exeptionFlag = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t    \n\t\t\t}\n\t\t\t//System.GC.Collect ();\n\t\t\tDebug.Log (\"StreamLargeFile Thread Finish NO.\" + _threadId);\n\t    }\n\n\t\t/// <summary>\n\t\t/// Writes from bytes to file.\n\t\t/// </summary>\n\t\t/// <param name=\"pDestinationFileStream\">P destination file stream.</param>\n\t\t/// <param name=\"pSourceBuffer\">P source buffer.</param>\n\t\t/// <param name=\"saveFullPath\">Save full path.</param>\n\t\tpublic void WriteFromBytesToFile(FileStream pDestinationFileStream, byte[] pSourceBuffer, string saveFullPath)\n\t\t{\n\t\t\ttry {\n\t\t\t\tlong tLength = pSourceBuffer.Length;\n\t\t\t\tlong tBeforeLength = pDestinationFileStream.Length;\n\n\t\t\t\tpDestinationFileStream.Seek(0, SeekOrigin.Begin);\n\t\t\t\tif (tLength <= 0) {\n\t\t\t\t\t_exeptionFlag = true;\n\t\t\t\t} else {\n\t\t\t\t\tpDestinationFileStream.Write(pSourceBuffer, 0, (int)tLength);\n\n\t\t\t\t\tif (tBeforeLength > tLength) {\n\t\t\t\t\t\tpDestinationFileStream.SetLength(tLength);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (IOException pException) {\n\t\t\t\tDebug.LogError(\"IOException:\" + pException.Message);\n\t\t\t} finally {\n\t\t\t\tpDestinationFileStream.Close ();\n\t\t\t}\n\t\t}\n\n\t\t/// <summary>\n\t    /// Downloads the thread finished.\n\t    /// </summary>\n\t    /// <param name=\"dtAsynResult\">Dt asyn result.</param>\n\t\tprivate  void DownloadThreadFinished(IAsyncResult dtAsynResult)\n\t\t{\n\t\t\tAsyncResult dtCastedAsyncResult = (AsyncResult)dtAsynResult;\n\t\t\tThreadDownloadDelegate tdDelegate = (ThreadDownloadDelegate)dtCastedAsyncResult.AsyncDelegate;\n\t\t\ttdDelegate.EndInvoke (dtAsynResult);\n\n\t\t\t//dtCastedAsyncResult.AsyncWaitHandle.WaitOne();\n\t\t\tif (dtAsynResult.IsCompleted == true) {\n\t\t\t\t\n\t\t\t\t_threadQueueCounter = _threadQueueCounter - 1;\n//\t\t\t\tDebug.Log (\"Thread Queue Counter : \" + _threadQueueCounter);\n//\t\t\t\tDebug.Log (\"DownloadFinished Get Counter : \" + GetDownloadCount ());\n//\t\t\t\tDebug.Log (\"Download Counter : \" + _downloadListCount);\n\n\t\t\t\tif (GetDownloadCount () == _downloadListCount) {\n\t\t\t\t\tStopTime ();\n\t\t\t\t\tDebug.Log (ElapsedTime + \" >>> \u7d4c\u904e\u6642\u9593 \"); //\u3069\u308c\u304f\u3089\u3044\u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u51e6\u7406\u7d42\u308f\u3063\u305f\u304b\uff1f\n\t\t\t\t\tDebug.Log (\"ALL FInished Downloaded > \" + _currentDownloadCount);\n\t\t\t\t\tDebug.Log (\"ALL FInished File Check Error > \" + _tryCounter);\n\n\t\t\t\t\t_currentDownloadCount = 0;\n\t\t\t\t\t_tryCounter = 0;\n\t\t\t\t\tif (_tryCounter == 0) {\n\t\t\t\t\t\t_isLoadFin = true; //\u5b8c\u4e86\u901a\u77e5\u7528\u3002\n\t\t\t\t\t\tCacheAssetContentsPrefs.CacheAssetContentsFlush (); //\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\u7b49\u3092\u3059\u308b\u305f\u3081\u306e\u30ed\u30fc\u30ab\u30eb\u4fdd\u5b58\u7528\u30c7\u30fc\u30bf\u3002\n\t\t\t\t\t} else {\n\t\t\t\t\t\tDebug.Log (\"Download fix broken\");\n\t\t\t\t\t\tCacheAssetContentsPrefs.CacheAssetContentsFlush ();\n\t\t\t\t\t\t_exeptionFlag = true;\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tif (_threadQueueCounter == 0) {\n\t\t\t\t\t\tDebug.Log (\"Counter not fix\");\n//\t\t\t\t\t\tDebug.Log (\"DownloadFinished Get Counter : \" + GetDownloadCount ());\n//\t\t\t\t\t\tDebug.Log (\"Download Counter : \" + _downloadListCount);\n\t\t\t\t\t\t// AutoRetry\n\t\t\t\t\t\tif (_displayErrorPopupFlag == false && _exeptionFlag == false) {\n\t\t\t\t\t\t\tDebug.Log (\"Counter not fix Auto Retry\");\n\t\t\t\t\t\t\t//_currentDownloadCount = 0;\n\t\t\t\t\t\t\tCacheAssetContentsPrefs.CacheAssetContentsFlush ();\n\t\t\t\t\t\t\t_exeptionFlag = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprivate static IEnumerator deferredInvoke(float seconds, System.Action action)\n\t\t{\n\t\t\tyield return new WaitForSeconds(seconds);\n\t\t\taction ();\n\t\t}\n\t    #endregion\n\n\n\t    #region \u7c21\u6613\u7684\u306a\u30ea\u30af\u30a8\u30b9\u30c8\u51e6\u7406\u3002\n\n\t\t/// <summary>\n\t    /// Sends the http request.\n\t    /// </summary>\n\t    /// <param name=\"pDestinationWebResponse\">P destination web response.</param>\n\t    /// <param name=\"pSourceUrl\">P source URL.</param>\n\t\tpublic void sendHttpRequest(ref HttpWebResponse pDestinationWebResponse, string pSourceUrl)\n\t\t{\n\t\t\tint tTimeout = mHttpRequestTimeout;\n\t\t\tstring tUserAgent = mHttpRequestUserAgent;\n\n\t\t\tHttpWebRequest tHttpWebRequest = null;\n\t\t\tif (pDestinationWebResponse != null) {\n\t\t\t\tpDestinationWebResponse.Close ();\n\t\t\t\tpDestinationWebResponse = null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tUri tUrl = new Uri(pSourceUrl);\n\t\t\t\ttHttpWebRequest = (HttpWebRequest)WebRequest.Create(tUrl);\n\t\t\t\ttHttpWebRequest.Timeout = tTimeout;\n\t\t\t\ttHttpWebRequest.UserAgent = tUserAgent;\n\n\t\t\t\tif (System.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable()) {\n\t\t\t\t\t//Debug.Log (\"Network conect status : \" + System.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable());\n\t\t\t\t\tpDestinationWebResponse = (HttpWebResponse)tHttpWebRequest.GetResponse();\n\n\t\t\t\t\t// Check response.\n\t\t\t\t\tif (pDestinationWebResponse.StatusCode == HttpStatusCode.OK) {\t\t\t\t\t\t\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tDebug.Log (\"Network disconect\");\n\t\t\t\t\t_exeptionFlag = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} catch (WebException tWebException) {\n\t\t\t\tpDestinationWebResponse = (HttpWebResponse)tWebException.Response;\n\t\t\t\tif (pDestinationWebResponse == null) {\n\t\t\t\t\t_autoRetry++;\n\t\t\t\t\tDebug.LogError (\"sendHttpRequest : HttpWebResponse Error {\" + tWebException.Message + \"}\");\n\t\t\t\t\tif (_autoRetry <= 3) {\n\t\t\t\t\t\tDebug.Log (\"AutoRetry : \" + _autoRetry);\n\t\t\t\t\t\tsendHttpRequest (ref pDestinationWebResponse, pSourceUrl);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_exeptionFlag = true;\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tif (tWebException.Status == System.Net.WebExceptionStatus.ProtocolError) {\n\t\t\t\t\t\tSystem.Net.HttpWebResponse errorResponse = (System.Net.HttpWebResponse)tWebException.Response;\n\t\t\t\t\t\tDebug.LogError (\"DownloadEngine.sendHttpRequest: {\" + tWebException.Message + \"} pSourceUrl={\" + pSourceUrl + \"} StatusCode={\" + errorResponse.StatusCode + \"} StatusDescription={\" + errorResponse.StatusDescription + \"}\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tDebug.LogError (\"sendHttpRequest: {\" + tWebException.Message + \"} pSourceUrl={\" + pSourceUrl + \"} ExceptionStatus = {\" + tWebException.Status.ToString () + \"}\");\n\t\t\t\t\t}\n\t\t\t\t\t_exeptionFlag = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/// <summary>\n\t\t/// Networks the check.\n\t\t/// </summary>\n\t\t/// <returns><c>true</c>, if check was networked, <c>false</c> otherwise.</returns>\n\t\tprivate bool NetworkCheck() {\n\n\t\t\tstring host = \"\";\n\t\t\tif (ApiData._env == \"product\") {\n\t\t\t\thost = string.Format(\"http://{0}\", ApiData.Instance.PRODUCT_DOMAIN);\n\t\t\t} else if (ApiData._env == \"staging\") {\n\t\t\t\thost = string.Format(\"http://{0}\", ApiData.Instance.STG_DOMAIN);\n\t\t\t} else {\n\t\t\t\thost = string.Format(\"http://{0}\", ApiData.Instance.DEV_DOMAIN);\n\t\t\t}\n\n\t\t\tHttpWebRequest webreq = null;\n\t\t\tHttpWebResponse webres = null;\n\t\t\ttry\n\t\t\t{\n\t\t\t\t//HttpWebRequest\u306e\u4f5c\u6210\n\t\t\t\twebreq = (HttpWebRequest)WebRequest.Create(host);\n\t\t\t\t//\u30e1\u30bd\u30c3\u30c9\u3092HEAD\u306b\u3059\u308b\n\t\t\t\twebreq.Method = \"HEAD\";\n\t\t\t\t//\u53d7\u4fe1\u3059\u308b\n\t\t\t\twebres = (HttpWebResponse)webreq.GetResponse();\n\t\t\t\t//\u5fdc\u7b54\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u3092\u8868\u793a\n\t\t\t\tDebug.Log (\"NetworkCheck OK : \" + webres.StatusCode);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tcatch (WebException tWebException)\n\t\t\t{\n\t\t\t\tDebug.Log (\"NetworkCheck Error : \" + tWebException.Message);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tif (webres != null)\n\t\t\t\t\twebres.Close();\n\t\t\t}\n\t\t}\n\t\t#endregion\n\n\t\t#region \u518d\u51e6\u7406\n\t\tprivate void DownloadCountUp ()\n\t\t{\n\t\t\tlock (_lockObj){\n\t\t\t\t_currentDownloadCount++;\n\t\t\t}\n\t\t}\n\t\tprivate int GetDownloadCount ()\n\t\t{\n\t\t\tlock (_lockObj){\n\t\t\t\treturn _currentDownloadCount;\n\t\t\t}\n\t\t}\n\t\tprivate void RetryMultipleDownloadCount ()\n\t\t{\n\t\t\tlock (_lockObj){\n\t\t\t    _tryCounter++;\n\t\t\t}\n\t\t}\n\t\t#endregion\n\n\n\t\t#region \u5171\u901a\u30dd\u30c3\u30d7\u30a2\u30c3\u30d7\n\t\t/// <summary>\n\t\t/// Https the error popup.\n\t\t/// </summary>\n\t\tprivate void HttpIoOrNetworkErrorPopup ()\n\t\t{\n\t\t\tGameObject.FindGameObjectWithTag (CommonConstants.NGUI_CAMERA_TAG).GetComponent<UICamera> ().enabled = false;\n\t\t\tnew NguiPopupHelper ().CommonPopUpHelper \n\t\t\t(\n\t\t\t\tLocalMsgConst.CONECTION_ERROR_TITLE,\n\t\t\t\tLocalMsgConst.CONECTION_ERROR_TEXT,\n\t\t\t\tthis.gameObject,\n\t\t\t\tthis.gameObject,\n\t\t\t\t\"ReDownload\",\n\t\t\t\t\"CancelButton\",\n\t\t\t\tCommonConstants.NGUI_COMMON_POPUP_2CHOICE\n\t\t\t);\n\t\t}\n\n\t\t/// <summary>\n\t\t/// Res the download.\n\t\t/// </summary>\n\t\tpublic void ReDownload ()\n\t\t{\n\t\t\t/** SE\u518d\u751f */\n\t\t\tCriSoundManager.sePlayCue (SoundConstants.CRIADX2_SE_COM_CANCEL);\n\n\t\t\t_displayNetworkPopupFlag = false;\n\t\t\t_currentDownloadCount = 0;\n\n\t\t\tCacheAssetContentsPrefs.CacheAssetContentsFlush ();\n\t\t\tMultipleDownload (_cacheContentsList, true);\n\t\t}\n\n\t\tpublic void CancelButton ()\n\t\t{\n\t\t\t/** SE\u518d\u751f */\n\t\t\tCriSoundManager.sePlayCue(SoundConstants.CRIADX2_SE_COM_CANCEL);\n\n\t\t\tExtention.CommonPlayerPrefs.CommonSetString (LocalConstants.SCENE_BEFORE_QUEUE_SAVE_KEY, Application.loadedLevelName);\n\t\t\tExtention.CommonPlayerPrefs.CommonSetString (LocalConstants.SCENE_AFTER_QUEUE_SAVE_KEY, CommonConstants.SCENE_START);\n\t\t\tSceneManager.NextSceneRedirect (CommonConstants.SCENE_START);\n\t\t}\n\t\t#endregion\n\n\t\t#region \u30d9\u30f3\u30c1\u30de\u30fc\u30af\u8a08\u6e2c\u7528\u95a2\u6570\u7fa4\n\t\tpublic DateTime mStartedDateTime;  //\u6642\u9593\u8a08\u6e2c\u7528\n\t\t/// <summary>\n\t\t/// \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\u3092\u8fd4\u3057\u307e\u3059\n\t\t/// </summary>\n\t\tpublic string ElapsedTime { get; private set; }\n\n\t\t/// <summary>\n\t\t/// \u7d4c\u904e\u6642\u9593\u306e\u8a08\u6e2c\u3092\u958b\u59cb\u3057\u307e\u3059\n\t\t/// </summary>\n\t\tpublic void StartTime()\n\t\t{\n\t\t    mStartedDateTime = DateTime.Now;\n\t\t}\n\n\t\t/// <summary>\n\t\t/// \u7d4c\u904e\u6642\u9593\u306e\u8a08\u6e2c\u3092\u505c\u6b62\u3057\u307e\u3059\n\t\t/// </summary>\n\t\tpublic void StopTime()\n\t\t{\n\t\t    var ts = DateTime.Now - mStartedDateTime;\n\t\t    ElapsedTime = string.Format(\n\t\t        \"{0:00}:{1:00}:{2:00}.{3:00}\",\n\t\t        ts.Hours, \n\t\t        ts.Minutes, \n\t\t        ts.Seconds,\n\t\t        ts.Milliseconds / 10\n\t\t    );\n\t\t}\n\t\t#endregion\n\n\t\t#region \u30d5\u30a1\u30a4\u30eb\u30cf\u30c3\u30b7\u30e5\u5024\u8a08\u7b97\u95a2\u6570\n\t\t/// <summary>\n\t\t/// Calculates the File By md5.\n\t\t/// </summary>\n\t\t/// <returns>The md5.</returns>\n\t\t/// <param name=\"filename\">Filename.</param>\n\t\tprivate string calcMd5 (string path)\n\t\t{\n\t\t\tstring result;\n\t\t\tusing (var stream = new FileStream (path, FileMode.Open,\n\t\t\t\t                    FileAccess.Read,\n\t\t\t\t                    FileShare.Read))\n\t\t\t{\n\t\t\t\tbyte[] bytehash = System.Security.Cryptography.MD5.Create ().ComputeHash (stream);\n\t\t\t\tresult = BitConverter.ToString (bytehash).Replace (\"-\", string.Empty);\n\t\t\t\tstream.Close ();\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t\t#endregion\n\n\n\n\t\t#region \u8a66\u9a13\u7684\u306b\u8a66\u3057\u3066\u3044\u308b\u7b87\u6240\u3002\n\t\t/// <summary>\n\t\t/// Texures the load set.\n\t\t/// \u30ed\u30fc\u30c7\u30a3\u30f3\u30b0\u30b7\u30fc\u30f3\u306e\u8ca0\u8377\u3092\u6e1b\u3089\u3059\u305f\u3081\n\t\t/// \u30b9\u30dd\u30c3\u30c8\u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u8868\u793a\u3055\u305b\u308b\u51e6\u7406\u3092\u5165\u308c\u308b\n\t\t/// \u73fe\u5728\uff1a[\u6b66\u5668\u30a2\u30a4\u30b3\u30f3], [\u30e6\u30cb\u30c3\u30c8\u30a2\u30a4\u30b3\u30f3]\u3001[\u30e6\u30cb\u30c3\u30c8Detail], [UnitNo_deck]\u306epng\n\t\t/// </summary>\n\t\t/// <param name=\"targetId\">Target identifier.</param>\n\t\t/// <param name=\"type\">Type.</param>\n\t\t/// <param name=\"_contents\">Contents.</param>\n\t\t/// <param name=\"targetObj\">Target object.</param>\n\t\tpublic void TexureLoadSet (string targetId, int type, List<ContentsEntity.Contents> _contents, GameObject targetObj, string option=\"\")\n\t\t{\n\t\t\tContentsEntity.Contents content = new ContentsEntity.Contents ();\n\t\t\tstring path = \"\";\n\t\t\tif (option != \"\") \n\t\t\t{\n\t\t\t\tcontent = ContentsHandler.GetContentsList (targetId, type.ToString (), _contents, option);\n\t\t\t} else {\n\t\t\t\tcontent = ContentsHandler.GetContentsList (targetId, type.ToString (), _contents, targetId);\n\t\t\t}\n\n\t\t\tif (content != null ) {\n\t\t\t\tpath = string.Format (\"{0}{1}{2}\", StreamingAssetsHelper.GetDownLoadPath (), content.directory, content.file_name);\n\t\t\t\tstring dir = string.Format (\"{0}{1}\", StreamingAssetsHelper.GetDownLoadPath (), content.directory);\n\t\t\t\tif (!File.Exists (dir))\n\t\t\t\t\tDirectory.CreateDirectory (dir);\n\t\t\t\t\n\t\t\t\t//\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u3001\u305d\u306e\u307e\u307e\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3002\n\t\t\t\tif (File.Exists (path) == true) {\n\t\t\t\t\tif (CacheAssetContentsPrefs.CacheAssetContentsGetString (content.file_path) == content.release_id)\n\t\t\t\t\t{\n\t\t\t\t\t\tTexture2D tex = new Texture2D (4, 4, TextureFormat.ARGB32, false, false);\n\t\t\t\t\t\ttex.LoadImage (GetBinaryLocalLoad (path));\n\t\t\t\t\t\ttex.Apply (true, true);\n\t\t\t\t\t\ttargetObj.GetComponent<UITexture> ().mainTexture = tex;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tStartCoroutine (SaveAndRendering (targetId, type, _contents, content, targetObj, path, option));\n\t\t\t\t\t}\n\t\t\t\t\t//\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3001\u30c7\u30fc\u30bf\u4fdd\u7ba1\u3057\u3066\u8868\u793a\u51e6\u7406\u3002\n\t\t\t\t} else if (File.Exists (path) == false) {\n\t\t\t\t\tStartCoroutine (SaveAndRendering (targetId, type, _contents, content, targetObj, path, option));\n\t\t\t\t}\n\t\t\t}\n        }\n\n\t\t\n\n\t\t//Dictionary <string, GameObject> \n        /// <summary>\n        /// Saves to rendering.\n        /// </summary>\n        /// <param name=\"targetId\">Target identifier.</param>\n        /// <param name=\"type\">Type.</param>\n        /// <param name=\"_contents\">Contents.</param>\n        /// <param name=\"content\">Content.</param>\n        /// <param name=\"targetObj\">Target object.</param>\n        /// <param name=\"path\">Path.</param>\n\t\tprivate GameObject loadObj;\n\t\tprivate IEnumerator SaveAndRendering (string targetId, int type, List<ContentsEntity.Contents> _contents, ContentsEntity.Contents content, GameObject targetObj, string path, string option = \"\") \n        {\n\t\t\tGameObject.FindGameObjectWithTag (CommonConstants.NGUI_CAMERA_TAG).GetComponent<UICamera> ().enabled = false;\n\t\t\t//\u30a2\u30cb\u30e1\u30b7\u30e7\u30f3\u30bb\u30c3\u30c8\n\t\t\tif (loadObj == null) {\n\t\t\t\tloadObj = Instantiate (Resources.Load (ResoucesLoadConst.API_LOADING), Vector3.zero, Quaternion.identity) as GameObject;\n\t\t\t\tloadObj.transform.localPosition = new Vector3 (0.0f, -20.0f, 0.0f);\n\t\t\t}\n\n\t\t\tusing (WWW www = new WWW(string.Format (\"{0}{1}{2}\", ApiData.GetContentsDataURL (ApiData.API_CONTENTS_REQUEST_URI), content.file_path, \"?realse_id=\" + content.release_id))) {\n\t\t\t\twhile (www == null)\n\t\t\t\t    yield return (www != null);\n\n\t\t\t\twhile (www.isDone == false)\n\t\t\t\t    yield return (www.isDone);\n\n\t\t\t\t//non texture file\n\t\t\t\tif (string.IsNullOrEmpty(www.error) == false) {\n\t\t\t\t\tDestroy (loadObj);\n\t\t\t        GameObject.FindGameObjectWithTag (CommonConstants.NGUI_CAMERA_TAG).GetComponent<UICamera> ().enabled = true;\n\t\t\t\t\tDebug.LogError (www.error);\n\t\t\t\t\tyield break;\n\t\t\t\t} else {\n\t\t\t\t\tStartCoroutine (SavedLocalData(path, www.bytes, content));\n\t\t\t\t}\n\t\t\t\twhile (targetObj == null)\n\t\t\t\t\tyield return (targetObj != null);\n\n\t\t\t\ttargetObj.GetComponent<UITexture> ().mainTexture = www.texture;\n\t\t\t}\n\n\t\t\t//File.WriteAllBytes (path, www.bytes);\n\nDebug.Log (string.Format (\"{0}{1}{2}\", ApiData.GetContentsDataURL (ApiData.API_CONTENTS_REQUEST_URI), content.file_path, \"?realse_id=\" + content.release_id)); \n        }\n\n        /// <summary>\n        /// Saveds the local data.\n        /// </summary>\n        /// <returns>The local data.</returns>\n        /// <param name=\"path\">Path.</param>\n        /// <param name=\"bytes\">Bytes.</param>\n\t\tprivate IEnumerator SavedLocalData (string path, byte[] bytes, ContentsEntity.Contents content)\n\t\t{\n\t\t\tyield return new WaitForSeconds(2.2f);\n\n\t\t\tFile.WriteAllBytes (path, bytes);\n\n\t\t\twhile (File.Exists (path) == false)\n\t\t\t\tyield return (File.Exists (path) == true);\n\n\t\t\tif (calcMd5(path) == content.file_hash) {\nDebug.Log (\"hash save file proccessing.......\");\n\t\t\t\tCacheAssetContentsPrefs.CacheAssetContentsSetString (path, content.file_hash);\n\t\t\t\tCacheAssetContentsPrefs.CacheAssetContentsSetString (content.file_path, content.release_id);\n\t\t\t\tCacheAssetContentsPrefs.CacheAssetContentsFlush ();\n\t\t\t} else {\nDebug.Log (\" no hash file ....... \");\n\t\t\t\tFile.Delete (path);\n\t\t\t\tCacheAssetContentsPrefs.CacheAssetContentsSetString (path, \"\");\n\t\t\t\tCacheAssetContentsPrefs.CacheAssetContentsSetString (content.file_path, \"\");\n\t\t\t\tCacheAssetContentsPrefs.CacheAssetContentsFlush ();\n\t\t\t}\nDebug.Log (\"file save finished\");\n\t\t\tDestroy (loadObj);\n\t\t\tGameObject.FindGameObjectWithTag (CommonConstants.NGUI_CAMERA_TAG).GetComponent<UICamera> ().enabled = true;\n\t\t\t\n        }\n\n\n\t\t/// <summary>\n        /// Gets the binary locla load.\n        /// </summary>\n        /// <returns>The Binary Local Load.</returns>\n        private byte[] GetBinaryLocalLoad (string path) \n        {\n\t\t\tFileStream   fs = new FileStream(path, FileMode.Open);\n\t\t\tBinaryReader br = new BinaryReader(fs);\n            byte[] buf = br.ReadBytes((int)br.BaseStream.Length);\n            br.Close();\n            return buf;\n        }\n\n\n\t\t/// <summary>\n        /// Ises the multiple download ignore.\n\t\t/// Loading\u30b7\u30fc\u30f3\u306e\u30b3\u30f3\u30c6\u30f3\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306b\u542b\u3081\u306a\u3044\n        /// </summary>\n        /// <returns><c>true</c>, if multiple download ignore was ised, <c>false</c> otherwise.</returns>\n\t\tprivate bool IsMultipleDownloadIgnore (ContentsEntity.Contents contents)\n\t\t{\n\t\t\tbool isIgnore = false;\n\t\t\tstring exDir = \"co/un/dt/0/\";\n\t\t\tList<string> ignoreStrList = new List<string> () {\n\t\t\t\t\"co/un/dt\",  //\u30e6\u30cb\u30c3\u30c8\u306e\u8a73\u7d30\u30c6\u30ad\u30b9\u30c1\u30e3\u30fc\uff08\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u540d\uff09\n\t\t\t\t//\"co/un/ic\",  //\u30e6\u30cb\u30c3\u30c8\u30a2\u30a4\u30b3\u30f3\uff08\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u540d\uff09\n\t\t\t\t\"co/wp\"   //weapon icon, texture\n\t\t\t};\n\n\t\t\t//Scent to Scene Filtering\n\t\t\tif (CommonPlayerPrefs.CommonGetString (LocalConstants.SCENE_AFTER_QUEUE_SAVE_KEY)    == CommonConstants.SCENE_FRIDND\n\t\t\t\t|| CommonPlayerPrefs.CommonGetString (LocalConstants.SCENE_AFTER_QUEUE_SAVE_KEY) == CommonConstants.SCENE_STRENGTHENING \n\t\t\t\t|| CommonPlayerPrefs.CommonGetString (LocalConstants.SCENE_AFTER_QUEUE_SAVE_KEY) == CommonConstants.SCENE_USER_STATUS\n\t\t\t\t|| CommonPlayerPrefs.CommonGetString (LocalConstants.SCENE_AFTER_QUEUE_SAVE_KEY) == CommonConstants.SCENE_MAIN_QUEST\n\t\t\t\t|| CommonPlayerPrefs.CommonGetString (LocalConstants.SCENE_AFTER_QUEUE_SAVE_KEY) == CommonConstants.SCENE_DOMESTICAFFAIRS\n//\t\t\t\t|| CommonPlayerPrefs.CommonGetString (LocalConstants.SCENE_AFTER_QUEUE_SAVE_KEY) == CommonConstants.SCENE_RAID_BOSS\n\t\t\t)\n\t\t\t{\n\t\t\t   //Debug.Log (\"scene jump koko koko \");\n\t\t\t\tforeach (var list in ignoreStrList)\n\t\t\t\t{\n\t\t\t\t\t//Exeption\n\t\t\t\t\tif (contents.directory.Contains (exDir)) \n\t\t\t\t\t{\n\t\t\t\t\t\tisIgnore = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (contents.directory.Contains (list))\n\t\t\t\t\t{\n\t\t\t\t\t\t//Debug.Log (\" \u30de\u30c3\u30c1\u3057\u307e\u3057\u305f\u3002 \");\n\t\t\t\t\t\tisIgnore = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t//Debug.Log (\"non match\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn isIgnore;\n\t\t} \n\t\t#endregion\n\t}\n}\n", "tags": ["unity5"]}