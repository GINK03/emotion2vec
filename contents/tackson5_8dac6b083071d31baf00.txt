{"tags": ["OpenCV3.0", "OpenCL"], "context": " More than 1 year has passed since last update.\n\nOpenCV\u3068OpenCL\nOpenCV\u3067\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067OpenCL\u304c\u7d44\u307f\u8fbc\u307e\u308c\u3066\u3044\u3066\u3001\u624b\u8efd\u306bGPU\u7b49\u306e\u30c7\u30d0\u30a4\u30b9\u3067\u306e\u4e26\u5217\u5316\u304c\u5b9f\u73fe\u3067\u304d\u308b\u3002\nOpenCV-CL\u3092\u4f7f\u3048\u3070\u3001OpenCV\u306eMat\u578b\u3068\u30b9\u30e0\u30fc\u30ba\u306b\u9023\u643a\u3067\u304d\u3001\u3055\u3089\u306bOpenCV\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3060\u3051\u3067OpenCL\u306e\u74b0\u5883\u3082\u6574\u3046\u306e\u3067\u3001\u30b3\u30fc\u30c9\u306e\u516c\u958b\u6642\u306b\u5916\u90e8\u4f9d\u5b58\u306e\u5c11\u306a\u3044\u30b3\u30fc\u30c9\u304c\u66f8\u3051\u305d\u3046\u306a\u70b9\u306b\u9b45\u529b\u3092\u611f\u3058\u3066\u3044\u308b\u3002\n\u3053\u3053\u3067\u306f\u7279\u306b\u3001OpenCV 3.0\u306b\u304a\u3051\u308b\u3001\u72ec\u81ea\u30ab\u30fc\u30cd\u30eb\u306b\u3088\u308bOpenCL\u306e\u5b9f\u884c\u65b9\u6cd5\u306b\u3064\u3044\u3066\u89e3\u8aac\u3002\n\u305f\u3060\u3057\u3001\u73fe\u72b6\u3001\u516c\u5f0f\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u306a\u304f\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304b\u3089\u985e\u63a8\u3057\u305f\u3060\u3051\u306a\u306e\u3067\u3001\u9593\u9055\u3044\u304c\u3042\u3063\u305f\u3089\u6307\u6458\u3057\u3066\u307b\u3057\u3044\u3002\n\n\u304a\u3055\u3089\u3044\n\nOpenCV 2.4\u3067OpenCL\nOpenCV 2.4\u3067\u306f\u3001cv::Mat\u306e\u4ee3\u308f\u308a\u306bcv::ocl::oclMat\u3092\u4f7f\u3046\u3068\u3001\u30d5\u30a3\u30eb\u30bf\u30fc\u306a\u3069\u306e\u3044\u304f\u3064\u304b\u306e\u51e6\u7406\u304cOpenCL\u3067\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\u8a73\u3057\u304f\u306f @dandelion1124 \u3055\u3093\u306e\u89e3\u8aac\u3092\u53c2\u8003\u306b\u3057\u3066\u307b\u3057\u3044\u3002\nhttp://www.slideshare.net/YasuhiroYoshimura/gpgpu2opencvopencloclmat\n\u57fa\u672c\u7684\u306b\u306f\u3001\u516c\u5f0f\u306eOpenCV 2.4.7\u4ee5\u964d\u306e\u30d0\u30a4\u30ca\u30ea\u3067\u3042\u308c\u3070\u3001OpenCL\u304cON\u306e\u72b6\u614b\u3067\u30d3\u30eb\u30c9\u6e08\u307f\u3089\u3057\u3044\u306e\u3067\n#include <opencv2/ocl/ocl.hpp>\n#pragma comment (lib, \"opencv_ocl***.lib\")\n\n\u306e\u3088\u3046\u306b\u3001ocl\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\uff06\u30ea\u30f3\u30af\u3057\u3066\u3084\u308c\u3070\u3001\uff08\u4ed6\u306bCUDA\u306a\u3069\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5fc5\u8981\u306a\u304f\uff09\u52d5\u4f5c\u3059\u308b\u3088\u3046\u3067\u3059\u3002\n\u305f\u3060\u3057\u3001staticlib\u7248\u306eOpenCV\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3068\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u7d42\u4e86\u6642\u306b\u7570\u5e38\u7d42\u4e86\u3059\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\uff08OpenCV 2.4.10\u3001Windows OS\u3001Visual Studio2013\u3067\u78ba\u8a8d\uff09\u3002\n\nOpenCV 2.4\u3067\u72ec\u81ea\u30ab\u30fc\u30cd\u30ebOpenCL\n\u4e88\u3081\u7528\u610f\u3055\u308c\u305f\u4ee5\u5916\u306e\u51e6\u7406\u3092\u884c\u3044\u305f\u3044\u5834\u5408\u306f\u3001openCLExecuteKernelInterop\u95a2\u6570\u3092\u5229\u7528\u3002\n\u8a73\u3057\u304f\u306f @dandelion1124 \u3055\u3093\u306e\u89e3\u8aac\u3084\u30b3\u30fc\u30c9\u3092\u53c2\u8003\u306b\u3057\u3066\u307b\u3057\u3044\u3002\nhttp://www.slideshare.net/YasuhiroYoshimura/cv-dandelion1124-20150125\nhttps://gist.github.com/atinfinity/8c25c8fb1b3708aa0944\nOpenCV 2.4\u306e\u554f\u984c\u70b9\nimage2d_t\u578b\u3092\u30ab\u30fc\u30cd\u30eb\u306b\u6e21\u3059\u65b9\u6cd5\u304c\u30e6\u30fc\u30b6\u30fc\u306b\u63d0\u4f9b\u3055\u308c\u3066\u3044\u306a\u3044\u3053\u3068\u3002\nimage2d_t \u306f sampler_t\u3068\u4f75\u305b\u308b\u3053\u3068\u3067\u3001GPU \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u30e6\u30cb\u30c3\u30c8\u3092\u5229\u7528\u3057\u305f\u9ad8\u901f\u306a\u7dda\u5f62\u88dc\u5b8c\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\uff08\u5b9f\u6570\u5024\u5ea7\u6a19\u3067\u306e\u753b\u7d20\u5024\u53d6\u5f97\uff09\u304c\u5b9f\u73fe\u3067\u304d\u308b\u3002\n\u305f\u3060\u3001OpenCV 2.4.10\u306e /sources/modules/ocl/src/tv1flow.cpp \u306ewarpBackward\u95a2\u6570\u3092\u898b\u308b\u3068\u3001\n\ntv1flow.cpp\nvoid ocl_tvl1flow::warpBackward(..., const oclMat &I1, ..)\n{\n    ...\n    cl_mem I1_tex;\n    ...\n    I1_tex = bindTexture(I1);\n    ...\n    args.push_back( make_pair( sizeof(cl_mem), (void*)&I1_tex));\n    ...\n    openCLExecuteKernel(...);\n    releaseTexture(I1_tex);\n}\n\n\n\u3068\u3042\u308b\u306e\u3067\u3001bindTexture\u304c\u547c\u3079\u308c\u3070\u826f\u3055\u305d\u3046\u3060\u3051\u308c\u3069\u3001\u3053\u306e\u95a2\u6570\u306f opencv2/ocl/private/util.hpp\u306b\u66f8\u3044\u3066\u3042\u3063\u3066\u3001\u30e6\u30fc\u30b6\u30fc\u5074\u306b\u306f\u63d0\u4f9b\u3055\u308c\u3066\u3044\u306a\u3044\u6a21\u69d8\u3002\n\u3053\u306e\u554f\u984c\u306f\u3001OpenCV 3.0\u3067\u89e3\u6c7a\u3059\u308b\u3002\n\nOpenCV 3.0\u3067OpenCL\nOpenCV 3.0\u3067\u306f\u3001cv::ocl::oclMat\u306e\u4ee3\u308f\u308a\u306b\u3001cv::UMat\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u3002\n\u3053\u308c\u3092\u7528\u3044\u308b\u3068\u3001\u4f8b\u3048\u3070\ncv::bilateralFilter(umat_src, umat_dst, 10, 10, 10);\n\n\u3068\u547c\u3073\u51fa\u3057\u305f\u6642\u306b\u3001\u666e\u901a\u306bCPU\u3067\u5b9f\u884c\u3059\u308b\u304b\u3001OpenCL\u3067\u30c7\u30d0\u30a4\u30b9\u4e0a\u3067\u5b9f\u884c\u3059\u308b\u304b\u3092cv::ocl::setUseOpenCL(true/false)\u3060\u3051\u3067\u5207\u308a\u66ff\u3048\u3067\u304d\u308b\u3002\n\u8a73\u3057\u304f\u306f @dandelion1124 \u3055\u3093\u306e\u89e3\u8aac\u3092\u53c2\u8003\u306b\u3057\u3066\u307b\u3057\u3044\u3002\nhttp://www.slideshare.net/YasuhiroYoshimura/gpgpu-dandelion1124-201301130\n\u306a\u304a\u3001OpenCV 3.0\u3067\u306f\u3001ocl\u30e2\u30b8\u30e5\u30fc\u30eb\uff08opencv_ocl***.lib\uff09\u304c\u5ec3\u6b62\u3055\u308c\u3066\u3001imgproc\u306a\u3069\u306e\u305d\u308c\u305e\u308c\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u5206\u6563\u3057\u3066\u53ce\u3081\u3089\u308c\u3066\u3044\u308b\u3002\n\u307e\u305f\u3001\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3082\u5909\u308f\u3063\u3066\u3044\u308b\u306e\u3067\u6ce8\u610f\u3002\n//#include <opencv2/ocl/ocl.hpp>  // OpenCV 2.4\n#include <opencv2/core/ocl.hpp> // OpenCV 3.0 \u3067\u306f\u3053\u3063\u3061\n\n\n\u672c\u984c\uff1aOpenCV 3.0\u3067\u72ec\u81ea\u30ab\u30fc\u30cd\u30ebOpenCL\n\u3088\u3046\u3084\u304f\u672c\u984c\u3067\u3059\u304c\u3001OpenCV 3.0\u3067\u306fOpenCL\u307e\u308f\u308a\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u304c\u304b\u306a\u308a\u6574\u7406\u3055\u308c\u3066\u3001\u4f7f\u3044\u3084\u3059\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nOpenCV 3.0.0beta\u7248\u306e\u73fe\u72b6\u3067\u306f\u3001\u307e\u3060\u672a\u5b9f\u88c5\u306a\u90e8\u5206\u3082\u3042\u308b\u305f\u3081\u3001\u8907\u6570\u30c7\u30d0\u30a4\u30b9\u306e\u691c\u51fa\u306a\u3069\u304c\u307e\u3060\u3067\u304d\u306a\u3044\u3088\u3046\u3067\u3059\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u52d5\u304b\u3059\u3053\u3068\u306f\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u74b0\u5883\n\nWindows 8.1\nVisual Studio 2013\nOpenCV 3.0.0 beta\uff08\u516c\u5f0f\u914d\u5e03\u306e\u30d0\u30a4\u30ca\u30ea\u3092\u305d\u306e\u307e\u307e\u4f7f\u7528\uff09\nGeForce GTX Titan Black\uff08\u30c9\u30e9\u30a4\u30d0\u30fc\u30d0\u30fc\u30b8\u30e7\u30f3\uff1a340.62\uff09\n\n\nUMat\u3092\u4f7f\u3063\u305f\u72ec\u81ea\u30ab\u30fc\u30cd\u30eb\u30b3\u30fc\u30c9\nCV_8U\u578b\u306e\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u753b\u50cf\u3092\u30cd\u30ac\u30dd\u30b8\u53cd\u8ee2\u3059\u308b\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\nnegaposi.cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <iterator>\n#include <opencv2/opencv.hpp>\n#include <opencv2/core/ocl.hpp>\n\nusing namespace std;\n\nvoid main()\n{\n    if (!cv::ocl::haveOpenCL())\n    {\n        cout << \"OpenCL is not avaiable...\" << endl;\n        return;\n    }\n    cv::ocl::Context context;\n    if (!context.create(cv::ocl::Device::TYPE_GPU))\n    {\n        cout << \"Failed creating the context...\" << endl;\n        return;\n    }\n\n    // In OpenCV 3.0.0 beta, only a single device is detected.\n    cout << context.ndevices() << \" GPU devices are detected.\" << endl;\n    for (int i = 0; i < context.ndevices(); i++)\n    {\n        cv::ocl::Device device = context.device(i);\n        cout << \"name                 : \" << device.name() << endl;\n        cout << \"available            : \" << device.available() << endl;\n        cout << \"imageSupport         : \" << device.imageSupport() << endl;\n        cout << \"OpenCL_C_Version     : \" << device.OpenCL_C_Version() << endl;\n        cout << endl;\n    }\n\n    // Select the first device\n    cv::ocl::Device(context.device(0));\n\n    // Transfer Mat data to the device\n    cv::Mat mat_src = cv::imread(\"Lena.png\", cv::IMREAD_GRAYSCALE);\n    cv::UMat umat_src = mat_src.getUMat(cv::ACCESS_READ, cv::USAGE_ALLOCATE_DEVICE_MEMORY);\n    cv::UMat umat_dst(mat_src.size(), mat_src.type(), cv::ACCESS_WRITE, cv::USAGE_ALLOCATE_DEVICE_MEMORY);\n\n    // Read the OpenCL kernel code\n    std::ifstream ifs(\"negaposi.cl\");\n    if (ifs.fail()) return;\n    std::string kernelSource((std::istreambuf_iterator<char>(ifs)), std::istreambuf_iterator<char>());\n    cv::ocl::ProgramSource programSource(kernelSource);\n\n    // Compile the kernel code\n    cv::String errmsg;\n    cv::String buildopt = \"\"; // By setting \"-D xxx=yyy \", we can replace xxx with yyy in the kernel\n    cv::ocl::Program program = context.getProg(programSource, buildopt, errmsg);\n\n    cv::ocl::Kernel kernel(\"negaposi\", program);\n    kernel.args(cv::ocl::KernelArg::ReadOnlyNoSize(umat_src), cv::ocl::KernelArg::ReadWrite(umat_dst));\n\n    size_t globalThreads[3] = { mat_src.cols, mat_src.rows, 1 };\n    //size_t localThreads[3] = { 16, 16, 1 };\n    bool success = kernel.run(3, globalThreads, NULL, true);\n    if (!success){\n        cout << \"Failed running the kernel...\" << endl;\n        return;\n    }\n\n    // Download the dst data from the device (?)\n    cv::Mat mat_dst = umat_dst.getMat(cv::ACCESS_READ);\n\n    cv::imshow(\"src\", mat_src);\n    cv::imshow(\"dst\", mat_dst);\n    cv::waitKey();\n}\n\n\n\nnegaposi.cl\n\n__kernel void negaposi(\n   __global uchar* src,\n   int src_step, int src_offset,\n   __global uchar* dst,\n   int dst_step, int dst_offset, int dst_rows, int dst_cols)\n{\n   int x = get_global_id(0);\n   int y = get_global_id(1);\n   if (x >= dst_cols) return;\n   int src_index = mad24(y, src_step, x + src_offset);\n   int dst_index = mad24(y, dst_step, x + dst_offset);\n   dst[dst_index] = 255 - src[src_index];\n};\n\n\n\u30b3\u30e1\u30f3\u30c8\n\n\u73fe\u72b6\u306eOpenCV 3.0.0beta\u3067\u306f\u3001\u30c7\u30d0\u30a4\u30b9\u306f1\u3064\u3057\u304b\u5217\u6319\u3055\u308c\u306a\u3044\u3088\u3046\u3067\u3059\u3002\uff082\u3064\u76ee\u4ee5\u964d\u306b\u691c\u51fa\u3055\u308c\u305f\u30c7\u30d0\u30a4\u30b9\u306f\u7121\u8996\u3057\u3066\u3044\u308b\uff09\n\u305d\u308c\u3086\u3048\u304b\u3001\u4f7f\u7528\u3059\u308b\u30c7\u30d0\u30a4\u30b9\u306e\u9078\u629e\u65b9\u6cd5\u304c\u306a\u3044\u3063\u307d\u3044\uff1f\uff082.4\u3067\u306fcv::ocl::setDevice()\u304c\u4f7f\u3048\u305f\uff09\u2192 cv::ocl::Device(context.device(index)) \u3067\u6307\u5b9a\u3067\u304d\u308b\u3068 @dandelion1124 \u3055\u3093\u304b\u3089\u60c5\u5831\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u306e\u3067\u30b3\u30fc\u30c9\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\nbuildopt \u3067\u3001\"-D xxx=yyy \"\u3092\u5217\u6319\u3059\u308b\u3068\u30ab\u30fc\u30cd\u30eb\u30b3\u30fc\u30c9\u5185\u306exxx\u3092yyy\u3067\u7f6e\u63db\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u3067\u3059\u3002\u5b9a\u6570\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6570\u5024\u306b\u7f6e\u304d\u63db\u3048\u308b\u6642\u306a\u3069\u306b\u4f7f\u3048\u307e\u3059\u3002\nMat\u304b\u3089UMat\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u3068\u304d\u3084\u3001UMat\u304b\u3089Mat\u306b\u843d\u3068\u3059\u3068\u304d\u306eACCESS\u30d5\u30e9\u30b0\u3084USAGE\u30d5\u30e9\u30b0\u306e\u8a2d\u5b9a\u306f\u3001\u3053\u308c\u3067\u6b63\u3057\u3044\u306e\u304b\u306f\u3088\u304f\u308f\u304b\u3063\u3066\u306a\u3044\u3067\u3059\u3002\u3042\u3068\u3001\u5b9f\u306f\u6700\u5f8c\u306e\u3068\u3053\u308d\u3067UMat\u3067\u305d\u306e\u307e\u307e cv::imshow(\"dst\", umat_dst); \u3068\u3057\u3066\u3082\u52d5\u304d\u307e\u3059\u3002\n\u30ab\u30fc\u30cd\u30eb\u5185 mad24\u306f mad24(x,y,z) = x*y + z \u3068\u3044\u3046\u547d\u4ee4\u3067\u3059\u3002\n\u30ed\u30fc\u30ab\u30eb\u30b9\u30ec\u30c3\u30c9\u306f\u3001\u4eca\u56de\u306fNULL\u3067\u7701\u7565\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u9069\u5207\u306b\u8a2d\u5b9a\u3059\u308b\u3060\u3051\u304b\u306a\u308a\u901f\u304f\u306a\u308a\u307e\u3059\u3002\n\n\u30dd\u30a4\u30f3\u30c8\uff1a\u30ab\u30fc\u30cd\u30eb\u5f15\u6570\u306e\u6e21\u3057\u65b9\u3068\u53d7\u3051\u53d6\u308a\u65b9\n\u81ea\u5206\u304c\u30cf\u30de\u3063\u305f\u30dd\u30a4\u30f3\u30c8\u306e\u30e1\u30e2\u3002\n\u4ee5\u4e0b\u306f\u3001UMat\u3092\u30ab\u30fc\u30cd\u30eb\u5f15\u6570\u3068\u3057\u3066\u6307\u5b9a\u3057\u3066\u3044\u308b\u90e8\u5206\u3067\u3059\u3002\n    kernel.args(cv::ocl::KernelArg::ReadOnlyNoSize(umat_src), cv::ocl::KernelArg::ReadWrite(umat_dst));\n\n\u3053\u3053\u3067\u3001\u30ab\u30fc\u30cd\u30eb\u306e\u5b9a\u7fa9\u3092\u898b\u308b\u3068\n__kernel void negaposi(\n   __global uchar* src,\n   int src_step, int src_offset,\n   __global uchar* dst,\n   int dst_step, int dst_offset, int dst_rows, int dst_cols)\n{\n\n\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u3064\u307e\u308a\u3001KernelArg\u306e\u4f5c\u308a\u65b9\u306b\u3088\u3063\u3066\u53d7\u3051\u53d6\u308b\u5f15\u6570\u304c\u5909\u308f\u308b\u3088\u3046\u3067\u3001\u307e\u3068\u3081\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nReadOnly(): data_type *data, int step, int offset, int rows, int cols\nReadOnlyNoSize(): data_type *data, int step, int offset\nPtrReadOnly(): data_type *data\n\nstep\u3084offset\u306e\u60c5\u5831\u306f\u3001\u30c7\u30fc\u30bf\u306e\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u306e\u95a2\u4fc2\u3067\u3001UMat\u304cdense\u306a\u914d\u5217\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u3053\u3068\u304c\u3042\u308b\u305f\u3081\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\u3055\u3089\u306b\nint src_index = mad24(y, src_step, x + src_offset);\n\n\u3053\u306e\u90e8\u5206\u306e\u30a2\u30af\u30bb\u30b9\u65b9\u6cd5\u306f\u3001\u5bfe\u8c61\u3068\u3059\u308bUMat\u306e\u30c7\u30fc\u30bf\u578b\u304cCV_8U\uff081\u30d0\u30a4\u30c8\uff09\u306a\u306e\u3067\u5927\u4e08\u592b\u306a\u306e\u3067\u3059\u304c\u3001\u305d\u3046\u3067\u306a\u3044\u3068\u3044\u308d\u3044\u308d\u554f\u984c\u304c\u751f\u3058\u307e\u3059\u3002\n\u8a73\u3057\u304f\u306f\u3001\u6700\u5f8c\u306b\u66f8\u3044\u305f\"image2D\u578b\u306e\u6e21\u3057\u65b9\"\u3067\u306e\u4f8b\u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3002\n\u307e\u305f\u3001Kernel\u306b\u5f15\u6570\u3092\u30bb\u30c3\u30c8\u3059\u308b\u65b9\u6cd5\u306f\u3001Kernel.args()\u4ee5\u5916\u306b\u3082\nint nArgs = 0;\nnArgs = kernel.set(nArgs, kernelArg1);\nnArgs = kernel.set(nArgs, kernelArg2);\nnArgs = kernel.set(nArgs, kernelArg3);\n\n\u3068\u4e00\u3064\u305a\u3064\u30bb\u30c3\u30c8\u3059\u308b\u65b9\u6cd5\u3082\u3042\u308a\u307e\u3059\u3002\n\nint/float\u578b\u306e\u6e21\u3057\u65b9\nUMat\u4ee5\u5916\u306e\u901a\u5e38\u306eint\u3084float\u3084uchar\u306a\u3069\u3092\u6e21\u3059\u5834\u5408\u306f\u3001\u3082\u3063\u3068\u7c21\u5358\u3067\u3059\u3002\n\u305d\u306e\u307e\u307e kernel.args \u306bint\u3084float\u578b\u306e\u5909\u6570\u3092\u6e21\u305b\u3070OK\u3067\u3059\u3002\n\u4ee5\u4e0b\u3001\u30b3\u30fc\u30c9\u3092\u5909\u66f4\u306e\u3042\u308b\u3068\u3053\u308d\u306e\u307f\u4e00\u90e8\u629c\u7c8b\u3002\n\nsetTo.cpp\n    ...\n    uchar value = 255;\n    cv::ocl::Kernel kernel(\"setTo\", program);\n    kernel.args(value, cv::ocl::KernelArg::ReadWrite(umat_dst));\n    ...\n\n\n\nsetTo.cl\n__kernel void setTo( uchar value,\n   __global uchar* dst,\n   int dst_step, int dst_offset, int dst_rows, int dst_cols)\n{\n   int x = get_global_id(0);\n   int y = get_global_id(1);\n   if (x >= dst_cols) return;\n   int dst_index = mad24(y, dst_step, x + dst_offset);\n   dst[dst_index] = value;\n}\n\n\n\nimage2D\u578b\u306e\u6e21\u3057\u65b9\n\nshift.cpp\n    ...\n    // Transfer Mat data to the device\n    cv::Mat mat_src = cv::imread(\"Lena.png\", cv::IMREAD_GRAYSCALE);\n    mat_src.convertTo(mat_src, CV_32F, 1.0 / 255);\n    cv::UMat umat_src = mat_src.getUMat(cv::ACCESS_READ, cv::USAGE_ALLOCATE_DEVICE_MEMORY);\n    cv::UMat umat_dst(mat_src.size(), CV_32F, cv::ACCESS_WRITE, cv::USAGE_ALLOCATE_DEVICE_MEMORY);\n\n    std::ifstream ifs(\"shift.cl\");\n    if (ifs.fail()) return;\n    std::string kernelSource((std::istreambuf_iterator<char>(ifs)), std::istreambuf_iterator<char>());\n    cv::ocl::ProgramSource programSource(kernelSource);\n\n    // Compile the kernel code\n    cv::String errmsg;\n    cv::String buildopt = cv::format(\"-D dstT=%s\", cv::ocl::typeToStr(umat_dst.depth())); // \"-D dstT=float\"\n    cv::ocl::Program program = context.getProg(programSource, buildopt, errmsg);\n\n    cv::ocl::Image2D image(umat_src);\n    float shift_x = 100.5;\n    float shift_y = -50.0;\n    cv::ocl::Kernel kernel(\"shift\", program);\n    kernel.args(image, shift_x, shift_y, cv::ocl::KernelArg::ReadWrite(umat_dst));\n    ...\n\n\n\nshift.cl\n__constant sampler_t samplerLN = CLK_NORMALIZED_COORDS_FALSE | CLK_ADDRESS_CLAMP_TO_EDGE | CLK_FILTER_LINEAR;\n__kernel void shift(\n   __global const image2d_t src,\n   float shift_x,\n   float shift_y,\n   __global uchar* dst,\n   int dst_step, int dst_offset, int dst_rows, int dst_cols)\n{\n   int x = get_global_id(0);\n   int y = get_global_id(1);\n   if (x >= dst_cols) return;\n   int dst_index = mad24(y, dst_step, mad24(x, (int)sizeof(dstT), dst_offset));\n   __global dstT *dstf = (__global dstT *)(dst + dst_index);\n   float2 coord = (float2)((float)x+0.5f+shift_x, (float)y+0.5f+shift_y);\n   dstf[0] = (dstT)read_imagef(src, samplerLN, coord).x;\n}\n\n\n\u5b9f\u884c\u3059\u308b\u3068\u3001\u753b\u50cf\u9818\u57df\u5916\u306e\u5883\u754c\u3092\u88dc\u5b8c\u3057\u306a\u304c\u3089\u3001\u30b7\u30d5\u30c8\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\u88dc\u5b8c\u3057\u3066\u304f\u308c\u308b\u306e\u306f\u3001sampler_t \u306bCLK_ADDRESS_CLAMP_TO_EDGE\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u308b\u304b\u3089\u3067\u3059\u3002\n\u3000\n\u30dd\u30a4\u30f3\u30c8\uff1aimage2D\u5f15\u6570\u306e\u6e21\u3057\u65b9\u3068\u53d7\u3051\u53d6\u308a\u65b9\nUMat\u3092cv::ocl::Image2D\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u6e21\u3057\u3066\ncv::ocl::Image2D image(umat_src);\n\n\u305d\u306e\u307e\u307e kernel.args \u306b image \u3092\u6e21\u305b\u3070OK\u3067\u3059\u3002\u30ab\u30fc\u30cd\u30eb\u5074\u3082 image2d_t image \u3067\u826f\u3044\u3002\n\u305d\u308c\u304b\u3089\u3001\u30ab\u30fc\u30cd\u30eb\u5185\u3067 read_imagef \u3059\u308b\u3068\u304d\u306ecoord\u306f\u3001\u6574\u6570\u5ea7\u6a19\u306b0.5\u3092\u8db3\u3059\u3053\u3068\u3067\u753b\u7d20\u306e\u4e2d\u5fc3\u3092\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\u305d\u3046\u3067\u306a\u3044\u3068\u96a3\u63a5\u753b\u7d20\u3068\u306e\u7dda\u5f62\u88dc\u5b8c\u304c\u767a\u751f\u3057\u307e\u3059\u3002\nCLK_FILTER_LINEAR\u3092CLK_FILTER_NEAREST\u306b\u3059\u308b\u3068\u3001\u7dda\u5f62\u88dc\u5b8c\u306a\u3057\u3067\u6700\u8fd1\u508d\u753b\u7d20\u306e\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001read_imagef\u306f\u753b\u50cf\u304c1\u30c1\u30e3\u30f3\u30cd\u30eb\u3067\u3082\u5e38\u306b4\u30c1\u30e3\u30f3\u30cd\u30eb\u5206\u306e\u5024\u3092float4\u3068\u3057\u3066\u8fd4\u3059\u306e\u3067\u3001.x\u3092\u4ed8\u3051\u3066\u6700\u521d\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u306e\u5024\u3092\u53d6\u5f97\u3059\u308b\u3002\n\u30dd\u30a4\u30f3\u30c8\uff1afloat\u578b\u306eUMat\u306e\u30a2\u30af\u30bb\u30b9\n\u3061\u3087\u3063\u3068\u3081\u3093\u3069\u304f\u3055\u3044\u3067\u3059\u304c\u3001\u3044\u3063\u305f\u3093 uchar*\u578b\u306e\u30dd\u30a4\u30f3\u30bf\u3067\u30a2\u30c9\u30ec\u30b9\u3092\u8a08\u7b97\u3057\u3066\u304b\u3089\u3001\u5bfe\u8c61\u3068\u3059\u308b\u578b\u306e\u30dd\u30a4\u30f3\u30bf\u306b\u76f4\u3057\u3066\u3044\u307e\u3059\u3002\n   int dst_index = mad24(y, dst_step, mad24(x, (int)sizeof(dstT), dst_offset));\n   __global dstT *dstf = (__global dstT *)(dst + dst_index);\n   dstf[0] = ...;\n\n\u3061\u306a\u307f\u306b dstT\u306f\u3001build\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\ncv::String buildopt = cv::format(\"-D dstT=%s\", cv::ocl::typeToStr(umat_dst.depth()));\n\n\u3068\u3059\u308b\u3053\u3068\u3067\u3001dstT\u304cfloat\u306b\u7f6e\u63db\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u304a\u308f\u308a\u306b\n\u307e\u3060\u3044\u308d\u3044\u308d\u5206\u304b\u3089\u306a\u3044\u3068\u3053\u308d\u306a\u3069\u3042\u308b\u306e\u3067\u3001\u9593\u9055\u3044\u3084\u65b0\u60c5\u5831\u306a\u3069\u3042\u3063\u305f\u3089\u6559\u3048\u3066\u304f\u3060\u3055\u3044\n#OpenCV\u3068OpenCL\nOpenCV\u3067\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067OpenCL\u304c\u7d44\u307f\u8fbc\u307e\u308c\u3066\u3044\u3066\u3001\u624b\u8efd\u306bGPU\u7b49\u306e\u30c7\u30d0\u30a4\u30b9\u3067\u306e\u4e26\u5217\u5316\u304c\u5b9f\u73fe\u3067\u304d\u308b\u3002\nOpenCV-CL\u3092\u4f7f\u3048\u3070\u3001OpenCV\u306eMat\u578b\u3068\u30b9\u30e0\u30fc\u30ba\u306b\u9023\u643a\u3067\u304d\u3001\u3055\u3089\u306bOpenCV\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3060\u3051\u3067OpenCL\u306e\u74b0\u5883\u3082\u6574\u3046\u306e\u3067\u3001\u30b3\u30fc\u30c9\u306e\u516c\u958b\u6642\u306b\u5916\u90e8\u4f9d\u5b58\u306e\u5c11\u306a\u3044\u30b3\u30fc\u30c9\u304c\u66f8\u3051\u305d\u3046\u306a\u70b9\u306b\u9b45\u529b\u3092\u611f\u3058\u3066\u3044\u308b\u3002\n\n\u3053\u3053\u3067\u306f\u7279\u306b\u3001OpenCV 3.0\u306b\u304a\u3051\u308b\u3001\u72ec\u81ea\u30ab\u30fc\u30cd\u30eb\u306b\u3088\u308bOpenCL\u306e\u5b9f\u884c\u65b9\u6cd5\u306b\u3064\u3044\u3066\u89e3\u8aac\u3002\n\u305f\u3060\u3057\u3001\u73fe\u72b6\u3001\u516c\u5f0f\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u306a\u304f\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304b\u3089\u985e\u63a8\u3057\u305f\u3060\u3051\u306a\u306e\u3067\u3001\u9593\u9055\u3044\u304c\u3042\u3063\u305f\u3089\u6307\u6458\u3057\u3066\u307b\u3057\u3044\u3002\n\n# \u304a\u3055\u3089\u3044\n## OpenCV 2.4\u3067OpenCL\nOpenCV 2.4\u3067\u306f\u3001cv::Mat\u306e\u4ee3\u308f\u308a\u306bcv::ocl::oclMat\u3092\u4f7f\u3046\u3068\u3001\u30d5\u30a3\u30eb\u30bf\u30fc\u306a\u3069\u306e\u3044\u304f\u3064\u304b\u306e\u51e6\u7406\u304cOpenCL\u3067\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\u8a73\u3057\u304f\u306f @dandelion1124 \u3055\u3093\u306e\u89e3\u8aac\u3092\u53c2\u8003\u306b\u3057\u3066\u307b\u3057\u3044\u3002\nhttp://www.slideshare.net/YasuhiroYoshimura/gpgpu2opencvopencloclmat\n\n\u57fa\u672c\u7684\u306b\u306f\u3001\u516c\u5f0f\u306eOpenCV 2.4.7\u4ee5\u964d\u306e\u30d0\u30a4\u30ca\u30ea\u3067\u3042\u308c\u3070\u3001OpenCL\u304cON\u306e\u72b6\u614b\u3067\u30d3\u30eb\u30c9\u6e08\u307f\u3089\u3057\u3044\u306e\u3067\n\n```cpp\n#include <opencv2/ocl/ocl.hpp>\n#pragma comment (lib, \"opencv_ocl***.lib\")\n```\n\u306e\u3088\u3046\u306b\u3001ocl\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\uff06\u30ea\u30f3\u30af\u3057\u3066\u3084\u308c\u3070\u3001\uff08\u4ed6\u306bCUDA\u306a\u3069\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5fc5\u8981\u306a\u304f\uff09\u52d5\u4f5c\u3059\u308b\u3088\u3046\u3067\u3059\u3002\n\u305f\u3060\u3057\u3001*staticlib\u7248\u306eOpenCV\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3068\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u7d42\u4e86\u6642\u306b\u7570\u5e38\u7d42\u4e86\u3059\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\uff08OpenCV 2.4.10\u3001Windows OS\u3001Visual Studio2013\u3067\u78ba\u8a8d\uff09*\u3002\n\n## OpenCV 2.4\u3067\u72ec\u81ea\u30ab\u30fc\u30cd\u30ebOpenCL\n\u4e88\u3081\u7528\u610f\u3055\u308c\u305f\u4ee5\u5916\u306e\u51e6\u7406\u3092\u884c\u3044\u305f\u3044\u5834\u5408\u306f\u3001openCLExecuteKernelInterop\u95a2\u6570\u3092\u5229\u7528\u3002\n\u8a73\u3057\u304f\u306f @dandelion1124 \u3055\u3093\u306e\u89e3\u8aac\u3084\u30b3\u30fc\u30c9\u3092\u53c2\u8003\u306b\u3057\u3066\u307b\u3057\u3044\u3002\nhttp://www.slideshare.net/YasuhiroYoshimura/cv-dandelion1124-20150125\nhttps://gist.github.com/atinfinity/8c25c8fb1b3708aa0944\n\n**OpenCV 2.4\u306e\u554f\u984c\u70b9**\nimage2d_t\u578b\u3092\u30ab\u30fc\u30cd\u30eb\u306b\u6e21\u3059\u65b9\u6cd5\u304c\u30e6\u30fc\u30b6\u30fc\u306b\u63d0\u4f9b\u3055\u308c\u3066\u3044\u306a\u3044\u3053\u3068\u3002\nimage2d_t \u306f sampler_t\u3068\u4f75\u305b\u308b\u3053\u3068\u3067\u3001GPU \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u30e6\u30cb\u30c3\u30c8\u3092\u5229\u7528\u3057\u305f\u9ad8\u901f\u306a\u7dda\u5f62\u88dc\u5b8c\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\uff08\u5b9f\u6570\u5024\u5ea7\u6a19\u3067\u306e\u753b\u7d20\u5024\u53d6\u5f97\uff09\u304c\u5b9f\u73fe\u3067\u304d\u308b\u3002\n\n\u305f\u3060\u3001OpenCV 2.4.10\u306e /sources/modules/ocl/src/tv1flow.cpp \u306ewarpBackward\u95a2\u6570\u3092\u898b\u308b\u3068\u3001\n\n```C++:tv1flow.cpp\nvoid ocl_tvl1flow::warpBackward(..., const oclMat &I1, ..)\n{\n    ...\n    cl_mem I1_tex;\n    ...\n    I1_tex = bindTexture(I1);\n    ...\n    args.push_back( make_pair( sizeof(cl_mem), (void*)&I1_tex));\n    ...\n    openCLExecuteKernel(...);\n    releaseTexture(I1_tex);\n}\n```\n\n\u3068\u3042\u308b\u306e\u3067\u3001bindTexture\u304c\u547c\u3079\u308c\u3070\u826f\u3055\u305d\u3046\u3060\u3051\u308c\u3069\u3001\u3053\u306e\u95a2\u6570\u306f opencv2/ocl/private/util.hpp\u306b\u66f8\u3044\u3066\u3042\u3063\u3066\u3001\u30e6\u30fc\u30b6\u30fc\u5074\u306b\u306f\u63d0\u4f9b\u3055\u308c\u3066\u3044\u306a\u3044\u6a21\u69d8\u3002\n\u3053\u306e\u554f\u984c\u306f\u3001OpenCV 3.0\u3067\u89e3\u6c7a\u3059\u308b\u3002\n\n## OpenCV 3.0\u3067OpenCL\nOpenCV 3.0\u3067\u306f\u3001cv::ocl::oclMat\u306e\u4ee3\u308f\u308a\u306b\u3001cv::UMat\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u3002\n\u3053\u308c\u3092\u7528\u3044\u308b\u3068\u3001\u4f8b\u3048\u3070\n\n```cpp-objdump\ncv::bilateralFilter(umat_src, umat_dst, 10, 10, 10);\n```\n\n\u3068\u547c\u3073\u51fa\u3057\u305f\u6642\u306b\u3001\u666e\u901a\u306bCPU\u3067\u5b9f\u884c\u3059\u308b\u304b\u3001OpenCL\u3067\u30c7\u30d0\u30a4\u30b9\u4e0a\u3067\u5b9f\u884c\u3059\u308b\u304b\u3092cv::ocl::setUseOpenCL(true/false)\u3060\u3051\u3067\u5207\u308a\u66ff\u3048\u3067\u304d\u308b\u3002\n\u8a73\u3057\u304f\u306f @dandelion1124 \u3055\u3093\u306e\u89e3\u8aac\u3092\u53c2\u8003\u306b\u3057\u3066\u307b\u3057\u3044\u3002\nhttp://www.slideshare.net/YasuhiroYoshimura/gpgpu-dandelion1124-201301130\n\n\u306a\u304a\u3001OpenCV 3.0\u3067\u306f\u3001ocl\u30e2\u30b8\u30e5\u30fc\u30eb\uff08opencv_ocl***.lib\uff09\u304c\u5ec3\u6b62\u3055\u308c\u3066\u3001imgproc\u306a\u3069\u306e\u305d\u308c\u305e\u308c\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u5206\u6563\u3057\u3066\u53ce\u3081\u3089\u308c\u3066\u3044\u308b\u3002\n\u307e\u305f\u3001\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3082\u5909\u308f\u3063\u3066\u3044\u308b\u306e\u3067\u6ce8\u610f\u3002\n\n```cpp\n//#include <opencv2/ocl/ocl.hpp>  // OpenCV 2.4\n#include <opencv2/core/ocl.hpp> // OpenCV 3.0 \u3067\u306f\u3053\u3063\u3061\n```\n\n#\u672c\u984c\uff1aOpenCV 3.0\u3067\u72ec\u81ea\u30ab\u30fc\u30cd\u30ebOpenCL\n\u3088\u3046\u3084\u304f\u672c\u984c\u3067\u3059\u304c\u3001OpenCV 3.0\u3067\u306fOpenCL\u307e\u308f\u308a\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u304c\u304b\u306a\u308a\u6574\u7406\u3055\u308c\u3066\u3001\u4f7f\u3044\u3084\u3059\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nOpenCV 3.0.0beta\u7248\u306e\u73fe\u72b6\u3067\u306f\u3001\u307e\u3060\u672a\u5b9f\u88c5\u306a\u90e8\u5206\u3082\u3042\u308b\u305f\u3081\u3001\u8907\u6570\u30c7\u30d0\u30a4\u30b9\u306e\u691c\u51fa\u306a\u3069\u304c\u307e\u3060\u3067\u304d\u306a\u3044\u3088\u3046\u3067\u3059\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u52d5\u304b\u3059\u3053\u3068\u306f\u3067\u304d\u307e\u3057\u305f\u3002\n\n##\u74b0\u5883\n* Windows 8.1\n* Visual Studio 2013\n* OpenCV 3.0.0 beta\uff08\u516c\u5f0f\u914d\u5e03\u306e\u30d0\u30a4\u30ca\u30ea\u3092\u305d\u306e\u307e\u307e\u4f7f\u7528\uff09\n* GeForce GTX Titan Black\uff08\u30c9\u30e9\u30a4\u30d0\u30fc\u30d0\u30fc\u30b8\u30e7\u30f3\uff1a340.62\uff09\n\n##UMat\u3092\u4f7f\u3063\u305f\u72ec\u81ea\u30ab\u30fc\u30cd\u30eb\u30b3\u30fc\u30c9\nCV_8U\u578b\u306e\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u753b\u50cf\u3092\u30cd\u30ac\u30dd\u30b8\u53cd\u8ee2\u3059\u308b\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\n```cpp:negaposi.cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <iterator>\n#include <opencv2/opencv.hpp>\n#include <opencv2/core/ocl.hpp>\n\nusing namespace std;\n\nvoid main()\n{\n\tif (!cv::ocl::haveOpenCL())\n\t{\n\t\tcout << \"OpenCL is not avaiable...\" << endl;\n\t\treturn;\n\t}\n\tcv::ocl::Context context;\n\tif (!context.create(cv::ocl::Device::TYPE_GPU))\n\t{\n\t\tcout << \"Failed creating the context...\" << endl;\n\t\treturn;\n\t}\n\n\t// In OpenCV 3.0.0 beta, only a single device is detected.\n\tcout << context.ndevices() << \" GPU devices are detected.\" << endl;\n\tfor (int i = 0; i < context.ndevices(); i++)\n\t{\n\t\tcv::ocl::Device device = context.device(i);\n\t\tcout << \"name                 : \" << device.name() << endl;\n\t\tcout << \"available            : \" << device.available() << endl;\n\t\tcout << \"imageSupport         : \" << device.imageSupport() << endl;\n\t\tcout << \"OpenCL_C_Version     : \" << device.OpenCL_C_Version() << endl;\n\t\tcout << endl;\n\t}\n\n\t// Select the first device\n\tcv::ocl::Device(context.device(0));\n\n\t// Transfer Mat data to the device\n\tcv::Mat mat_src = cv::imread(\"Lena.png\", cv::IMREAD_GRAYSCALE);\n\tcv::UMat umat_src = mat_src.getUMat(cv::ACCESS_READ, cv::USAGE_ALLOCATE_DEVICE_MEMORY);\n\tcv::UMat umat_dst(mat_src.size(), mat_src.type(), cv::ACCESS_WRITE, cv::USAGE_ALLOCATE_DEVICE_MEMORY);\n\n\t// Read the OpenCL kernel code\n\tstd::ifstream ifs(\"negaposi.cl\");\n\tif (ifs.fail()) return;\n\tstd::string kernelSource((std::istreambuf_iterator<char>(ifs)), std::istreambuf_iterator<char>());\n\tcv::ocl::ProgramSource programSource(kernelSource);\n\n\t// Compile the kernel code\n\tcv::String errmsg;\n\tcv::String buildopt = \"\"; // By setting \"-D xxx=yyy \", we can replace xxx with yyy in the kernel\n\tcv::ocl::Program program = context.getProg(programSource, buildopt, errmsg);\n\n\tcv::ocl::Kernel kernel(\"negaposi\", program);\n\tkernel.args(cv::ocl::KernelArg::ReadOnlyNoSize(umat_src), cv::ocl::KernelArg::ReadWrite(umat_dst));\n\n\tsize_t globalThreads[3] = { mat_src.cols, mat_src.rows, 1 };\n\t//size_t localThreads[3] = { 16, 16, 1 };\n\tbool success = kernel.run(3, globalThreads, NULL, true);\n\tif (!success){\n\t\tcout << \"Failed running the kernel...\" << endl;\n\t\treturn;\n\t}\n\n\t// Download the dst data from the device (?)\n\tcv::Mat mat_dst = umat_dst.getMat(cv::ACCESS_READ);\n\n\tcv::imshow(\"src\", mat_src);\n\tcv::imshow(\"dst\", mat_dst);\n\tcv::waitKey();\n}\n```\n\n```cpp:negaposi.cl\n\n__kernel void negaposi(\n   __global uchar* src,\n   int src_step, int src_offset,\n   __global uchar* dst,\n   int dst_step, int dst_offset, int dst_rows, int dst_cols)\n{\n   int x = get_global_id(0);\n   int y = get_global_id(1);\n   if (x >= dst_cols) return;\n   int src_index = mad24(y, src_step, x + src_offset);\n   int dst_index = mad24(y, dst_step, x + dst_offset);\n   dst[dst_index] = 255 - src[src_index];\n};\n```\n**\u30b3\u30e1\u30f3\u30c8**\n\n* \u73fe\u72b6\u306eOpenCV 3.0.0beta\u3067\u306f\u3001\u30c7\u30d0\u30a4\u30b9\u306f1\u3064\u3057\u304b\u5217\u6319\u3055\u308c\u306a\u3044\u3088\u3046\u3067\u3059\u3002\uff082\u3064\u76ee\u4ee5\u964d\u306b\u691c\u51fa\u3055\u308c\u305f\u30c7\u30d0\u30a4\u30b9\u306f\u7121\u8996\u3057\u3066\u3044\u308b\uff09\n* \u305d\u308c\u3086\u3048\u304b\u3001\u4f7f\u7528\u3059\u308b\u30c7\u30d0\u30a4\u30b9\u306e\u9078\u629e\u65b9\u6cd5\u304c\u306a\u3044\u3063\u307d\u3044\uff1f\uff082.4\u3067\u306fcv::ocl::setDevice()\u304c\u4f7f\u3048\u305f\uff09\u2192 cv::ocl::Device(context.device(index)) \u3067\u6307\u5b9a\u3067\u304d\u308b\u3068 @dandelion1124 \u3055\u3093\u304b\u3089\u60c5\u5831\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u306e\u3067\u30b3\u30fc\u30c9\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n* buildopt \u3067\u3001\"-D xxx=yyy \"\u3092\u5217\u6319\u3059\u308b\u3068\u30ab\u30fc\u30cd\u30eb\u30b3\u30fc\u30c9\u5185\u306exxx\u3092yyy\u3067\u7f6e\u63db\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u3067\u3059\u3002\u5b9a\u6570\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6570\u5024\u306b\u7f6e\u304d\u63db\u3048\u308b\u6642\u306a\u3069\u306b\u4f7f\u3048\u307e\u3059\u3002\n* Mat\u304b\u3089UMat\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u3068\u304d\u3084\u3001UMat\u304b\u3089Mat\u306b\u843d\u3068\u3059\u3068\u304d\u306eACCESS\u30d5\u30e9\u30b0\u3084USAGE\u30d5\u30e9\u30b0\u306e\u8a2d\u5b9a\u306f\u3001\u3053\u308c\u3067\u6b63\u3057\u3044\u306e\u304b\u306f\u3088\u304f\u308f\u304b\u3063\u3066\u306a\u3044\u3067\u3059\u3002\u3042\u3068\u3001\u5b9f\u306f\u6700\u5f8c\u306e\u3068\u3053\u308d\u3067UMat\u3067\u305d\u306e\u307e\u307e cv::imshow(\"dst\", umat_dst); \u3068\u3057\u3066\u3082\u52d5\u304d\u307e\u3059\u3002\n* \u30ab\u30fc\u30cd\u30eb\u5185 mad24\u306f mad24(x,y,z) = x*y + z \u3068\u3044\u3046\u547d\u4ee4\u3067\u3059\u3002\n* \u30ed\u30fc\u30ab\u30eb\u30b9\u30ec\u30c3\u30c9\u306f\u3001\u4eca\u56de\u306fNULL\u3067\u7701\u7565\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u9069\u5207\u306b\u8a2d\u5b9a\u3059\u308b\u3060\u3051\u304b\u306a\u308a\u901f\u304f\u306a\u308a\u307e\u3059\u3002\n\n**\u30dd\u30a4\u30f3\u30c8\uff1a\u30ab\u30fc\u30cd\u30eb\u5f15\u6570\u306e\u6e21\u3057\u65b9\u3068\u53d7\u3051\u53d6\u308a\u65b9**\n\u81ea\u5206\u304c\u30cf\u30de\u3063\u305f\u30dd\u30a4\u30f3\u30c8\u306e\u30e1\u30e2\u3002\n\u4ee5\u4e0b\u306f\u3001UMat\u3092\u30ab\u30fc\u30cd\u30eb\u5f15\u6570\u3068\u3057\u3066\u6307\u5b9a\u3057\u3066\u3044\u308b\u90e8\u5206\u3067\u3059\u3002\n\n```cpp\n\tkernel.args(cv::ocl::KernelArg::ReadOnlyNoSize(umat_src), cv::ocl::KernelArg::ReadWrite(umat_dst));\n```\n\u3053\u3053\u3067\u3001\u30ab\u30fc\u30cd\u30eb\u306e\u5b9a\u7fa9\u3092\u898b\u308b\u3068\n\n```cpp\n__kernel void negaposi(\n   __global uchar* src,\n   int src_step, int src_offset,\n   __global uchar* dst,\n   int dst_step, int dst_offset, int dst_rows, int dst_cols)\n{\n```\n\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u3064\u307e\u308a\u3001KernelArg\u306e\u4f5c\u308a\u65b9\u306b\u3088\u3063\u3066\u53d7\u3051\u53d6\u308b\u5f15\u6570\u304c\u5909\u308f\u308b\u3088\u3046\u3067\u3001\u307e\u3068\u3081\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n* ReadOnly(): data_type *data, int step, int offset, int rows, int cols\n* ReadOnlyNoSize(): data_type *data, int step, int offset\n* PtrReadOnly(): data_type *data\n\nstep\u3084offset\u306e\u60c5\u5831\u306f\u3001\u30c7\u30fc\u30bf\u306e\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u306e\u95a2\u4fc2\u3067\u3001UMat\u304cdense\u306a\u914d\u5217\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u3053\u3068\u304c\u3042\u308b\u305f\u3081\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3055\u3089\u306b\n\n```cpp\nint src_index = mad24(y, src_step, x + src_offset);\n```\n\u3053\u306e\u90e8\u5206\u306e\u30a2\u30af\u30bb\u30b9\u65b9\u6cd5\u306f\u3001\u5bfe\u8c61\u3068\u3059\u308bUMat\u306e\u30c7\u30fc\u30bf\u578b\u304cCV_8U\uff081\u30d0\u30a4\u30c8\uff09\u306a\u306e\u3067\u5927\u4e08\u592b\u306a\u306e\u3067\u3059\u304c\u3001\u305d\u3046\u3067\u306a\u3044\u3068\u3044\u308d\u3044\u308d\u554f\u984c\u304c\u751f\u3058\u307e\u3059\u3002\n\u8a73\u3057\u304f\u306f\u3001\u6700\u5f8c\u306b\u66f8\u3044\u305f\"image2D\u578b\u306e\u6e21\u3057\u65b9\"\u3067\u306e\u4f8b\u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u307e\u305f\u3001Kernel\u306b\u5f15\u6570\u3092\u30bb\u30c3\u30c8\u3059\u308b\u65b9\u6cd5\u306f\u3001Kernel.args()\u4ee5\u5916\u306b\u3082\n\n```cpp\nint nArgs = 0;\nnArgs = kernel.set(nArgs, kernelArg1);\nnArgs = kernel.set(nArgs, kernelArg2);\nnArgs = kernel.set(nArgs, kernelArg3);\n```\n\u3068\u4e00\u3064\u305a\u3064\u30bb\u30c3\u30c8\u3059\u308b\u65b9\u6cd5\u3082\u3042\u308a\u307e\u3059\u3002\n\n##int/float\u578b\u306e\u6e21\u3057\u65b9\nUMat\u4ee5\u5916\u306e\u901a\u5e38\u306eint\u3084float\u3084uchar\u306a\u3069\u3092\u6e21\u3059\u5834\u5408\u306f\u3001\u3082\u3063\u3068\u7c21\u5358\u3067\u3059\u3002\n\u305d\u306e\u307e\u307e kernel.args \u306bint\u3084float\u578b\u306e\u5909\u6570\u3092\u6e21\u305b\u3070OK\u3067\u3059\u3002\n\u4ee5\u4e0b\u3001\u30b3\u30fc\u30c9\u3092\u5909\u66f4\u306e\u3042\u308b\u3068\u3053\u308d\u306e\u307f\u4e00\u90e8\u629c\u7c8b\u3002\n\n```cpp:setTo.cpp\n\t...\n\tuchar value = 255;\n\tcv::ocl::Kernel kernel(\"setTo\", program);\n\tkernel.args(value, cv::ocl::KernelArg::ReadWrite(umat_dst));\n\t...\n```\n\n```cpp:setTo.cl\n__kernel void setTo( uchar value,\n   __global uchar* dst,\n   int dst_step, int dst_offset, int dst_rows, int dst_cols)\n{\n   int x = get_global_id(0);\n   int y = get_global_id(1);\n   if (x >= dst_cols) return;\n   int dst_index = mad24(y, dst_step, x + dst_offset);\n   dst[dst_index] = value;\n}\n```\n\n##image2D\u578b\u306e\u6e21\u3057\u65b9\n\n```cpp:shift.cpp\n\t...\n\t// Transfer Mat data to the device\n\tcv::Mat mat_src = cv::imread(\"Lena.png\", cv::IMREAD_GRAYSCALE);\n\tmat_src.convertTo(mat_src, CV_32F, 1.0 / 255);\n\tcv::UMat umat_src = mat_src.getUMat(cv::ACCESS_READ, cv::USAGE_ALLOCATE_DEVICE_MEMORY);\n\tcv::UMat umat_dst(mat_src.size(), CV_32F, cv::ACCESS_WRITE, cv::USAGE_ALLOCATE_DEVICE_MEMORY);\n\n\tstd::ifstream ifs(\"shift.cl\");\n\tif (ifs.fail()) return;\n\tstd::string kernelSource((std::istreambuf_iterator<char>(ifs)), std::istreambuf_iterator<char>());\n\tcv::ocl::ProgramSource programSource(kernelSource);\n\n\t// Compile the kernel code\n\tcv::String errmsg;\n\tcv::String buildopt = cv::format(\"-D dstT=%s\", cv::ocl::typeToStr(umat_dst.depth())); // \"-D dstT=float\"\n\tcv::ocl::Program program = context.getProg(programSource, buildopt, errmsg);\n\n\tcv::ocl::Image2D image(umat_src);\n\tfloat shift_x = 100.5;\n\tfloat shift_y = -50.0;\n\tcv::ocl::Kernel kernel(\"shift\", program);\n\tkernel.args(image, shift_x, shift_y, cv::ocl::KernelArg::ReadWrite(umat_dst));\n\t...\n```\n\n```cpp:shift.cl\n__constant sampler_t samplerLN = CLK_NORMALIZED_COORDS_FALSE | CLK_ADDRESS_CLAMP_TO_EDGE | CLK_FILTER_LINEAR;\n__kernel void shift(\n   __global const image2d_t src,\n   float shift_x,\n   float shift_y,\n   __global uchar* dst,\n   int dst_step, int dst_offset, int dst_rows, int dst_cols)\n{\n   int x = get_global_id(0);\n   int y = get_global_id(1);\n   if (x >= dst_cols) return;\n   int dst_index = mad24(y, dst_step, mad24(x, (int)sizeof(dstT), dst_offset));\n   __global dstT *dstf = (__global dstT *)(dst + dst_index);\n   float2 coord = (float2)((float)x+0.5f+shift_x, (float)y+0.5f+shift_y);\n   dstf[0] = (dstT)read_imagef(src, samplerLN, coord).x;\n}\n```\n\u5b9f\u884c\u3059\u308b\u3068\u3001\u753b\u50cf\u9818\u57df\u5916\u306e\u5883\u754c\u3092\u88dc\u5b8c\u3057\u306a\u304c\u3089\u3001\u30b7\u30d5\u30c8\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\u88dc\u5b8c\u3057\u3066\u304f\u308c\u308b\u306e\u306f\u3001sampler_t \u306bCLK_ADDRESS_CLAMP_TO_EDGE\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u308b\u304b\u3089\u3067\u3059\u3002\n![src.png](https://qiita-image-store.s3.amazonaws.com/0/69982/904aca4b-dae0-d155-fd89-3b50da811d89.png)\u3000![dst.png](https://qiita-image-store.s3.amazonaws.com/0/69982/eddee61d-a96b-a2cb-5801-fd3d2af36631.png)\n\n\n**\u30dd\u30a4\u30f3\u30c8\uff1aimage2D\u5f15\u6570\u306e\u6e21\u3057\u65b9\u3068\u53d7\u3051\u53d6\u308a\u65b9**\nUMat\u3092cv::ocl::Image2D\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u6e21\u3057\u3066\n\n```cpp:\ncv::ocl::Image2D image(umat_src);\n```\n\u305d\u306e\u307e\u307e kernel.args \u306b image \u3092\u6e21\u305b\u3070OK\u3067\u3059\u3002\u30ab\u30fc\u30cd\u30eb\u5074\u3082 image2d_t image \u3067\u826f\u3044\u3002\n\n\u305d\u308c\u304b\u3089\u3001\u30ab\u30fc\u30cd\u30eb\u5185\u3067 read_imagef \u3059\u308b\u3068\u304d\u306ecoord\u306f\u3001\u6574\u6570\u5ea7\u6a19\u306b0.5\u3092\u8db3\u3059\u3053\u3068\u3067\u753b\u7d20\u306e\u4e2d\u5fc3\u3092\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\u305d\u3046\u3067\u306a\u3044\u3068\u96a3\u63a5\u753b\u7d20\u3068\u306e\u7dda\u5f62\u88dc\u5b8c\u304c\u767a\u751f\u3057\u307e\u3059\u3002\nCLK_FILTER_LINEAR\u3092CLK_FILTER_NEAREST\u306b\u3059\u308b\u3068\u3001\u7dda\u5f62\u88dc\u5b8c\u306a\u3057\u3067\u6700\u8fd1\u508d\u753b\u7d20\u306e\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\n\u307e\u305f\u3001read_imagef\u306f\u753b\u50cf\u304c1\u30c1\u30e3\u30f3\u30cd\u30eb\u3067\u3082\u5e38\u306b4\u30c1\u30e3\u30f3\u30cd\u30eb\u5206\u306e\u5024\u3092float4\u3068\u3057\u3066\u8fd4\u3059\u306e\u3067\u3001.x\u3092\u4ed8\u3051\u3066\u6700\u521d\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u306e\u5024\u3092\u53d6\u5f97\u3059\u308b\u3002\n\n**\u30dd\u30a4\u30f3\u30c8\uff1afloat\u578b\u306eUMat\u306e\u30a2\u30af\u30bb\u30b9**\n\u3061\u3087\u3063\u3068\u3081\u3093\u3069\u304f\u3055\u3044\u3067\u3059\u304c\u3001\u3044\u3063\u305f\u3093 uchar*\u578b\u306e\u30dd\u30a4\u30f3\u30bf\u3067\u30a2\u30c9\u30ec\u30b9\u3092\u8a08\u7b97\u3057\u3066\u304b\u3089\u3001\u5bfe\u8c61\u3068\u3059\u308b\u578b\u306e\u30dd\u30a4\u30f3\u30bf\u306b\u76f4\u3057\u3066\u3044\u307e\u3059\u3002\n\n```cpp\n   int dst_index = mad24(y, dst_step, mad24(x, (int)sizeof(dstT), dst_offset));\n   __global dstT *dstf = (__global dstT *)(dst + dst_index);\n   dstf[0] = ...;\n```\n\u3061\u306a\u307f\u306b dstT\u306f\u3001build\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\n\n```cpp\ncv::String buildopt = cv::format(\"-D dstT=%s\", cv::ocl::typeToStr(umat_dst.depth()));\n```\n\u3068\u3059\u308b\u3053\u3068\u3067\u3001dstT\u304cfloat\u306b\u7f6e\u63db\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n# \u304a\u308f\u308a\u306b\n\u307e\u3060\u3044\u308d\u3044\u308d\u5206\u304b\u3089\u306a\u3044\u3068\u3053\u308d\u306a\u3069\u3042\u308b\u306e\u3067\u3001\u9593\u9055\u3044\u3084\u65b0\u60c5\u5831\u306a\u3069\u3042\u3063\u305f\u3089\u6559\u3048\u3066\u304f\u3060\u3055\u3044\n"}