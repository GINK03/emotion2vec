{"context": "\n\n0 \u306f\u3058\u3081\u306b\n\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af\u306f\u3001\u6771\u5317\u5927\u5b66\u306e\u4e7e\u30fb\u5ca1\u5d0e\u7814\u7a76\u5ba4\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u3001\u5b9f\u8df5\u7684\u306a\u8ab2\u984c\u306b\u53d6\u308a\u7d44\u307f\u306a\u304c\u3089\uff0c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\uff0c\u30c7\u30fc\u30bf\u5206\u6790\uff0c\u7814\u7a76\u306e\u30b9\u30ad\u30eb\u3092\u697d\u3057\u304f\u7fd2\u5f97\u3059\u308b\u3053\u3068\u3092\u76ee\u6307\u3057\u305f\u554f\u984c\u96c6\u3067\u3059\u3002\n\u3053\u308c\u307e\u3067\u306b\u3001\u300c\u7b2c4\u7ae0 \u5f62\u614b\u7d20\u89e3\u6790\u300d\u3001\u300c\u7b2c5\u7ae0 \u4fc2\u308a\u53d7\u3051\u89e3\u6790\u300d\u3001\u300c\u7b2c8\u7ae0 \u6a5f\u68b0\u5b66\u7fd2\u300d\u3092\u89e3\u3044\u3066\u304d\u307e\u3057\u305f\u3002\n\u5f15\u304d\u7d9a\u304d\u300c\u7b2c9\u7ae0 \u30d9\u30af\u30c8\u30eb\u7a7a\u9593\u6cd5 (I)\u300d\u3092\u9032\u3081\u3066\u3044\u304d\u307e\u3059\u3002\n\n0.1 \u3053\u306e\u7ae0\u3067\u3084\u308b\u3053\u3068\n\nenwiki-20150112-400-r10-105752.txt.bz2\u306f\uff0c2015\u5e741\u670812\u65e5\u6642\u70b9\u306e\u82f1\u8a9e\u306eWikipedia\u8a18\u4e8b\u306e\u3046\u3061\uff0c\u7d04400\u8a9e\u4ee5\u4e0a\u3067\u69cb\u6210\u3055\u308c\u308b\u8a18\u4e8b\u306e\u4e2d\u304b\u3089\uff0c\u30e9\u30f3\u30c0\u30e0\u306b1/10\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u305f105,752\u8a18\u4e8b\u306e\u30c6\u30ad\u30b9\u30c8\u3092bzip2\u5f62\u5f0f\u3067\u5727\u7e2e\u3057\u305f\u3082\u306e\u3067\u3042\u308b\uff0e\u3053\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u30b3\u30fc\u30d1\u30b9\u3068\u3057\u3066\uff0c\u5358\u8a9e\u306e\u610f\u5473\u3092\u8868\u3059\u30d9\u30af\u30c8\u30eb\uff08\u5206\u6563\u8868\u73fe\uff09\u3092\u5b66\u7fd2\u3057\u305f\u3044\uff0e\u7b2c9\u7ae0\u306e\u524d\u534a\u3067\u306f\uff0c\u30b3\u30fc\u30d1\u30b9\u304b\u3089\u4f5c\u6210\u3057\u305f\u5358\u8a9e\u6587\u8108\u5171\u8d77\u884c\u5217\u306b\u4e3b\u6210\u5206\u5206\u6790\u3092\u9069\u7528\u3057\uff0c\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3092\u5b66\u7fd2\u3059\u308b\u904e\u7a0b\u3092\uff0c\u3044\u304f\u3064\u304b\u306e\u51e6\u7406\u306b\u5206\u3051\u3066\u5b9f\u88c5\u3059\u308b\uff0e\u7b2c9\u7ae0\u306e\u5f8c\u534a\u3067\u306f\uff0c\u5b66\u7fd2\u3067\u5f97\u3089\u308c\u305f\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\uff08300\u6b21\u5143\uff09\u3092\u7528\u3044\uff0c\u5358\u8a9e\u306e\u985e\u4f3c\u5ea6\u8a08\u7b97\u3084\u30a2\u30ca\u30ed\u30b8\u30fc\uff08\u985e\u63a8\uff09\u3092\u884c\u3046\uff0e\n\n\u8981\u3059\u308b\u306bword2vec\u3068\u4f3c\u305f\u3088\u3046\u306a\u52d5\u304d\u3092\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\nword2vec\u3063\u3066\u3044\u3046\u306e\u306f\u3001\u5358\u8a9e\u3092\u30d9\u30af\u30c8\u30eb\u3067\u8868\u73fe\u3057\u3066\u3001\u5358\u8a9e\u540c\u58eb\u306e\u8a08\u7b97\u3084\u6bd4\u8f03\u3092\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3001\u4f8b\u3048\u3070\u300c\u30a4\u30c1\u30ed\u30fc\u300d-\u300c\u91ce\u7403\u300d+\u300c\u672c\u7530\u300d=\u300c\u30b5\u30c3\u30ab\u30fc\u300d\u3068\u304b\u3084\u308b\u3084\u3064\u3067\u3059\u306d\u3002\nword2vec\u3092\u805e\u3044\u305f\u3053\u3068\u304c\u306a\u3044\u65b9\u306f\u3053\u306e\u8fba\u306e\u8a18\u4e8b(\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u306b\u65b0\u98a8\u3092\u5dfb\u304d\u8d77\u3053\u3057\u305fWord2Vec\u3068\u306f\u4f55\u304b)\u306a\u3069\u3092\u8aad\u3093\u3067\u304a\u304f\u3068\u30a4\u30e1\u30fc\u30b8\u304c\u3064\u304f\u3068\u601d\u3044\u307e\u3059\u3002\nword2vec\u306b\u306f\u3001\u65e2\u306bGoogle\u3084DL4J\u306a\u3069\u306e\u5b9f\u88c5\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u306e\u7ae0\u3067\u306f\u3053\u308c\u3089\u3068\u4f3c\u305f\u3088\u3046\u306a\u52d5\u304d\u3092\u3059\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u81ea\u5206\u3067\u5b9f\u88c5\u3057\u3066\u3001word2vec\u304c\u4f55\u3092\u3084\u3063\u3066\u3044\u308b\u306e\u304b\u30a4\u30e1\u30fc\u30b8\u3092\u3064\u304b\u307f\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001\u6b21\u306e10\u7ae0\u3067\u306f\u3001Google\u306eword2vec\u3092\u4f7f\u3063\u3066\u30b4\u30cb\u30e7\u30b4\u30cb\u30e7\u3084\u308b\u3088\u3046\u3067\u3059\u3002\n\n0.2 \u5177\u4f53\u7684\u306b\u306f\u3001\u4e0b\u8a18\u306e\u3053\u3068\u3092\u884c\u3044\u307e\u3059\n\nWikipedia\u306e\u8a18\u4e8b\u3092\u8aad\u307f\u3053\u3093\u3067\u3001\u5358\u8a9e\u6587\u8108\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b\u3002 (80\u301c84)\n\u5358\u8a9e\u6587\u8108\u884c\u5217\u306e\u6b21\u5143\u3092\u5727\u7e2e\u3057\u3066\u3001\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3002(85)\n\u4f5c\u6210\u3057\u305f\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3067\u904a\u3093\u3067\u307f\u308b\u3002(86\u301c89)\n\n\n0.3 \u30cf\u30de\u308a\u3069\u3053\u308d\n\u3053\u306e\u7ae0\u307e\u3067\u305f\u3069\u308a\u7740\u3044\u305f\u4eba\u306a\u3089\u3001\u554f\u984c\u6587\u306e\u610f\u5473\u3055\u3048\u7406\u89e3\u3067\u304d\u308c\u3070\u3001\u30b3\u30fc\u30c9\u306b\u843d\u3068\u3057\u8fbc\u3093\u3067\u3044\u304f\u3053\u3068\u81ea\u4f53\u306f\u305d\u308c\u307b\u3069\u96e3\u3057\u304f\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u305f\u3060\u3057\u5b9f\u884c\u3067\u304d\u307e\u305b\u3093\u3002\n\u30c7\u30fc\u30bf\u91cf\u304c\u5927\u304d\u3059\u304e\u308b\u3093\u3067\u3059\u3002\n\u554f\u984c\u6587\u306b\u306f\n\n\u306a\u304a\uff0c\u554f\u984c83\u3092\u7d20\u76f4\u306b\u5b9f\u88c5\u3059\u308b\u3068\uff0c\u5927\u91cf\uff08\u7d047GB\uff09\u306e\u4e3b\u8a18\u61b6\u304c\u5fc5\u8981\u306b\u306a\u308b\uff0e \u30e1\u30e2\u30ea\u304c\u4e0d\u8db3\u3059\u308b\u5834\u5408\u306f\uff0c\u51e6\u7406\u3092\u5de5\u592b\u3059\u308b\u304b\uff0c1/100\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306e\u30b3\u30fc\u30d1\u30b9enwiki-20150112-400-r100-10576.txt.bz2\u3092\u7528\u3044\u3088\uff0e\n\n\u3068\u3042\u308a\u307e\u3059\u3002\n\u3053\u3046\u66f8\u304b\u308c\u308b\u3068\u51e6\u7406\u306e\u5de5\u592b\u3067\u306a\u3093\u3068\u304b\u3057\u305f\u304f\u306a\u308a\u307e\u3059\u3088\u306d\u3002\n\u79c1\u306e\u5834\u5408\u306f\u300184\u307e\u3067\u306f\u51e6\u7406\u306e\u5de5\u592b\u3067\u306a\u3093\u3068\u304b\u306a\u3063\u305f\u3093\u3067\u3059\u304c\u3001100\u672c\u30ce\u30c3\u30af\u6700\u5927\u306e\u96e3\u95a2\u3068\u3044\u3046\u5642\u3082\u3042\u308b\u300c85. \u4e3b\u6210\u5206\u5206\u6790\u306b\u3088\u308b\u6b21\u5143\u5727\u7e2e\u300d\u306b\u95a2\u3057\u3066\u306f\u3001\u8a66\u884c\u932f\u8aa4\u3057\u3066\u307f\u305f\u3082\u306e\u306e\u6b6f\u304c\u7acb\u305f\u305a\u3001\u7279\u7570\u5024\u5206\u89e3\u3067\u4ee3\u66ff\u3057\u307e\u3057\u305f\u3002\n\u7279\u7570\u5024\u5206\u89e3\u3067\u3001\u304b\u3064\u30011/100\u30b3\u30fc\u30d1\u30b9\u3067\u308285\u3092\u5b9f\u884c\u3059\u308b\u306b\u306f7\u6642\u9593\u3050\u3089\u3044\u304b\u304b\u308a\u307e\u3057\u305f\u3002\n\u30de\u30b7\u30f3\u306e\u30b9\u30da\u30c3\u30af\u3068\u3069\u308c\u3060\u3051\u52b9\u7387\u306e\u3088\u3044\u30ed\u30b8\u30c3\u30af\u3092\u8003\u3048\u3089\u308c\u308b\u304b\u6b21\u7b2c\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u307e\u305a\u306f\u300c1/100\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306e\u30b3\u30fc\u30d1\u30b9\u300d\u3067\u6700\u5f8c\u307e\u3067\u901a\u3057\u3066\u5b9f\u88c5\u3057\u3066\u307f\u308b\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002\n\u305d\u306e\u5f8c\u3001\u4f59\u88d5\u304c\u3042\u308c\u30701/10\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30c7\u30fc\u30bf\u306b\u6311\u6226\u3057\u3066\u307f\u308b\u3068\u826f\u3044\u3067\u3057\u3087\u3046\u3002\n\n0.4 \u5b9f\u884c\u74b0\u5883/\u30c4\u30fc\u30eb\n\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3068\u3057\u3066\u306f\u3001CPU: 2.8GHz Intel Core i7 / \u30e1\u30e2\u30ea: 16GB \u306eMacBookPro\u3092\u3001\n\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3068\u3057\u3066\u306f\u3001Spark\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002(Apache Spark\u3068\u306f\uff1f\uff1aHadoop\u306b\u7d9a\u304f\u5206\u6563\u51e6\u7406\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af)\n\u6700\u521d\u306fSpark\u3092\u4f7f\u308f\u305a\u306b\u666e\u901a\u306bPython\u3067\u9032\u3081\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u300c83. \u5358\u8a9e\uff0f\u6587\u8108\u306e\u983b\u5ea6\u306e\u8a08\u6e2c\u300d\u8fba\u308a\u3067\u3001\u30d5\u30a1\u30a4\u30eb\u306b\u5b9f\u884c\u7d50\u679c\u3092\u4fdd\u5b58\u3059\u308b\u3060\u3051\u30672\u6642\u9593\u4ee5\u4e0a\u304b\u304b\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u3001\u3042\u308c\u3053\u308c\u8a66\u884c\u932f\u8aa4\u3057\u305f\u3042\u3052\u304f\u3001Spark\u3092\u4f7f\u3046\u306b\u81f3\u308a\u307e\u3057\u305f\u3002Spark\u306a\u3089\u6570\u5206\u3067\u7d42\u308f\u308a\u307e\u3059\u3002Spark\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u591a\u304f\u304cScala\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u3053\u3068\u304b\u3089\u3001\u5b9f\u88c5\u8a00\u8a9e\u3082Scala\u306b\u5207\u308a\u66ff\u3048\u307e\u3057\u305f\u3002(Spark\u306b\u306fPython\u5411\u3051\u306eAPI\u3082\u3042\u308a\u307e\u3059\u3002)\n\n0.5 \u5168\u4f53\u69cb\u6210\n\nTree\u30b3\u30de\u30f3\u30c9\n$ tree ./src\n./src\n\u2514\u2500\u2500 main\n\u00a0\u00a0\u00a0 \u251c\u2500\u2500 resources\n\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 combined_words.txt\n\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 context_matrix\n\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 enwiki-20150112-400-r10-105752.txt\n\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 enwiki-20150112-400-r100-10576.txt\n\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 word_vectors\n\u00a0\u00a0\u00a0 \u2514\u2500\u2500 scala\n\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u2514\u2500\u2500 nlp100_9\n\u00a0\u00a0 \u00a0\u00a0\u00a0      \u251c\u2500\u2500 Main.scala\n   \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0  \u2514\u2500\u2500 WikiRDD.scala\n\n\nMain.scala\u306emain\u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u304b\u3089\u3001\n\nrunStage1() Wikipedia\u306e\u8a18\u4e8b\u3092\u8aad\u307f\u3053\u3093\u3067\u3001\u5358\u8a9e\u6587\u8108\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b\u3002 (80\u301c84)\nrunStage2() \u5358\u8a9e\u6587\u8108\u884c\u5217\u306e\u6b21\u5143\u3092\u5727\u7e2e\u3057\u3066\u3001\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3002(85)\nrunStage3() \u4f5c\u6210\u3057\u305f\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3067\u904a\u3093\u3067\u307f\u308b\u3002(86\u301c89)\n\n\u3092\u9806\u306b\u547c\u3073\u51fa\u3057\u3066\u884c\u304d\u307e\u3059\u3002\n\nMain.scala\npackage nlp100_9\n\nimport org.apache.spark._\nimport nlp100_9.WikiRDD._\n\nobject Main {\n  val RAW_FILE = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/enwiki-20150112-400-r100-10576.txt\"\n  val COMBINED_WORDS = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/combined_words.txt\"\n  val CONTEXT_MATRIX = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/context_matrix\"\n  val WORD_VECTORS = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/word_vectors\"\n  val sc = new SparkContext(new SparkConf().setAppName(\"NLP100\").setMaster(\"local[*]\"))\n\n  def main(args: Array[String]): Unit = {\n    runStage1()\n    runStage2()\n    runStage3()\n  }\n\n\n\u30b3\u30fc\u30c9\u3092\u90fd\u5ea6\u3082\u308c\u306a\u304f\u63b2\u8f09\u3059\u308b\u3068\u8aad\u307f\u306b\u304f\u305d\u3046\u306a\u306e\u3067\u3001\u8aac\u660e\u306e\u9014\u4e2d\u3067\u306f\u3001\u305d\u306e\u554f\u984c\u3092\u89e3\u306b\u76f4\u63a5\u95a2\u4fc2\u3059\u308b\u65ad\u7247\u306e\u307f\u8a18\u8f09\u3057\u3001\u30b3\u30fc\u30c9\u306e\u5168\u4f53\u306f\u6700\u5f8c\u306b\u307e\u3068\u3081\u3066\u8a18\u8f09\u3057\u3066\u3044\u307e\u3059\u3002\n\n1 Wikipedia\u306e\u8a18\u4e8b\u3092\u8aad\u307f\u3053\u3093\u3067\u3001\u5358\u8a9e\u6587\u8108\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b\u3002 (80\u301c84)\n\u30e1\u30bd\u30c3\u30c9runStage1()\u304b\u308980\u301c84\u306e\u5b9f\u88c5\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\n\nMain.scala\n  /**\n    * 1. Wikipedia\u306e\u8a18\u4e8b\u3092\u8aad\u307f\u3053\u3093\u3067\u3001\u5358\u8a9e\u6587\u8108\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b\u3002 (80\u301c84)\n    * (100\u5206\u306e1\u30d5\u30a1\u30a4\u30eb\u306e\u5834\u5408\u30018\u5206\u7a0b\u5ea6\u3067\u5b8c\u4e86)\n    */\n  def runStage1(): Unit = {\n    sc.textFile(RAW_FILE)\n      .cleansData                          // 80. \u30b3\u30fc\u30d1\u30b9\u306e\u6574\u5f62\n      .replaceCombinedWord(COMBINED_WORDS) // 81. \u8907\u5408\u8a9e\u304b\u3089\u306a\u308b\u56fd\u540d\u3078\u306e\u5bfe\u51e6\n      .contexts                            // 82. \u6587\u8108\u306e\u62bd\u51fa\n      .map(_ -> 1L)                        // RDD[(String, String)]\u578b\u3092RDD[((String, String), Long)]\u578b\u306b\u5909\u63db\n      .sumByTC                             // 83.\u5358\u8a9e\uff0f\u6587\u8108\u306e\u983b\u5ea6\u306e\u8a08\u6e2c(\u5358\u8a9et\u3068\u6587\u8108\u8a9ec\u306e\u5171\u8d77\u56de\u6570(f(t,c))\u3092\u7b97\u51fa)\n      .contextMatrix                       // 83.\u5358\u8a9e\uff0f\u6587\u8108\u306e\u983b\u5ea6\u306e\u8a08\u6e2c(f(t,c)\u4ee5\u5916)\u3068\u300184.\u5358\u8a9e\u6587\u8108\u884c\u5217\u306e\u4f5c\u6210\n      .saveContextMatrix(CONTEXT_MATRIX)   // \u5358\u8a9e\u6587\u8108\u884c\u5217\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3059\u308b\n  }\n\n\n\u6642\u9593\u304c\u3082\u3063\u305f\u3044\u306a\u3044\u306e\u3067\u3001\u4f59\u8a08\u306a\u30d5\u30a1\u30a4\u30eb\u4fdd\u5b58\u306f\u884c\u308f\u305a\u306b\u300180\u301c84\u307e\u3067\u4e00\u6c17\u306b\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\u3002\n\u5b9f\u969b\u306e\u51e6\u7406\u306fWikiRDD.scala\u306b\u8a18\u8ff0\u3057\u3066\u3044\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001RDD\u3063\u3066\u3044\u3046\u306e\u306fSpark\u304c\u63d0\u4f9b\u3057\u3066\u3044\u308bList\u307f\u305f\u3044\u306a\u3082\u3093\u3067\u3059\u3002\u88cf\u3067\u4e0a\u624b\u304f\u9045\u5ef6\u8a55\u4fa1\uff0b\u5206\u6563\u51e6\u7406\u3057\u3066\u304f\u308c\u308b\u3068\u3053\u308d\u304cList\u3068\u306e\u4e3b\u306a\u9055\u3044\u3067\u3059\u3002(\u53c2\u8003:RDD\u306b\u3064\u3044\u3066\u7c21\u5358\u306b\u307e\u3068\u3081\u3066\u307f\u305f)\n\n80. \u30b3\u30fc\u30d1\u30b9\u306e\u6574\u5f62\n\n\u6587\u3092\u5358\u8a9e\u5217\u306b\u5909\u63db\u3059\u308b\u6700\u3082\u5358\u7d14\u306a\u65b9\u6cd5\u306f\uff0c\u7a7a\u767d\u6587\u5b57\u3067\u5358\u8a9e\u306b\u533a\u5207\u308b\u3053\u3068\u3067\u3042\u308b\uff0e \u305f\u3060\uff0c\u3053\u306e\u65b9\u6cd5\u3067\u306f\u6587\u672b\u306e\u30d4\u30ea\u30aa\u30c9\u3084\u62ec\u5f27\u306a\u3069\u306e\u8a18\u53f7\u304c\u5358\u8a9e\u306b\u542b\u307e\u308c\u3066\u3057\u307e\u3046\uff0e\n\u305d\u3053\u3067\uff0c\u30b3\u30fc\u30d1\u30b9\u306e\u5404\u884c\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u7a7a\u767d\u6587\u5b57\u3067\u30c8\u30fc\u30af\u30f3\u306e\u30ea\u30b9\u30c8\u306b\u5206\u5272\u3057\u305f\u5f8c\uff0c\u5404\u30c8\u30fc\u30af\u30f3\u306b\u4ee5\u4e0b\u306e\u51e6\u7406\u3092\u65bd\u3057\uff0c\u5358\u8a9e\u304b\u3089\u8a18\u53f7\u3092\u9664\u53bb\u305b\u3088\uff0e\n\n\u30c8\u30fc\u30af\u30f3\u306e\u5148\u982d\u3068\u672b\u5c3e\u306b\u51fa\u73fe\u3059\u308b\u6b21\u306e\u6587\u5b57\u3092\u524a\u9664: .,!?;:()[]'\"\n\u7a7a\u6587\u5b57\u5217\u3068\u306a\u3063\u305f\u30c8\u30fc\u30af\u30f3\u306f\u524a\u9664\n\n\u4ee5\u4e0a\u306e\u51e6\u7406\u3092\u9069\u7528\u3057\u305f\u5f8c\uff0c\u30c8\u30fc\u30af\u30f3\u3092\u30b9\u30da\u30fc\u30b9\u3067\u9023\u7d50\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u305b\u3088\uff0e\n\n\u3053\u308c\u306f\u554f\u984c\u7121\u3044\u3067\u3059\u306d\u3002\u554f\u984c\u6587\u306e\u6307\u793a\u4ee5\u5916\u306b\u3082\u5e7e\u3064\u304b\u6c17\u306b\u306a\u3063\u305f\u30b4\u30df\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u524a\u9664\u5bfe\u8c61\u6587\u5b57\u3092\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\n\nWikiRDD.scala\nclass WikiRDDString(rdd: RDD[String]) extends Serializable {\n  def cleansData: RDD[String] = {\n\n    def remove_garbage_char(word: String): String = {\n      val reg = \".,!?;:()\\\\[\\\\]\\\\'\\\\\\\"\u201c\u201d\"\n      word.replaceAll(\"^[%s]+|[%s]+$\".format(reg, reg), \"\")\n    }\n\n    rdd.map(sentence => (sentence split ' ').map(word => remove_garbage_char(word)).filter(word => !word.isEmpty).mkString(\" \"))\n  }\n\n\n\n81. \u8907\u5408\u8a9e\u304b\u3089\u306a\u308b\u56fd\u540d\u3078\u306e\u5bfe\u51e6\n\n\u82f1\u8a9e\u3067\u306f\uff0c\u8907\u6570\u306e\u8a9e\u306e\u9023\u63a5\u304c\u610f\u5473\u3092\u6210\u3059\u3053\u3068\u304c\u3042\u308b\uff0e\n\u4f8b\u3048\u3070\uff0c\u30a2\u30e1\u30ea\u30ab\u5408\u8846\u56fd\u306f\"United States\"\uff0c\u30a4\u30ae\u30ea\u30b9\u306f\"United Kingdom\"\u3068\u8868\u73fe\u3055\u308c\u308b\u304c\uff0c\"United\"\u3084\"States\"\uff0c\"Kingdom\"\u3068\u3044\u3046\u5358\u8a9e\u3060\u3051\u3067\u306f\uff0c\u6307\u3057\u793a\u3057\u3066\u3044\u308b\u6982\u5ff5\u30fb\u5b9f\u4f53\u304c\u66d6\u6627\u3067\u3042\u308b\uff0e\n\u305d\u3053\u3067\uff0c\u30b3\u30fc\u30d1\u30b9\u4e2d\u306b\u542b\u307e\u308c\u308b\u8907\u5408\u8a9e\u3092\u8a8d\u8b58\u3057\uff0c\u8907\u5408\u8a9e\u30921\u8a9e\u3068\u3057\u3066\u6271\u3046\u3053\u3068\u3067\uff0c\u8907\u5408\u8a9e\u306e\u610f\u5473\u3092\u63a8\u5b9a\u3057\u305f\u3044\uff0e\n\u3057\u304b\u3057\u306a\u304c\u3089\uff0c\u8907\u5408\u8a9e\u3092\u6b63\u78ba\u306b\u8a8d\u5b9a\u3059\u308b\u306e\u306f\u5927\u5909\u3080\u305a\u304b\u3057\u3044\u306e\u3067\uff0c\u3053\u3053\u3067\u306f\u8907\u5408\u8a9e\u304b\u3089\u306a\u308b\u56fd\u540d\u3092\u8a8d\u5b9a\u3057\u305f\u3044\uff0e\n\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u4e0a\u304b\u3089\u56fd\u540d\u30ea\u30b9\u30c8\u3092\u5404\u81ea\u3067\u5165\u624b\u3057\uff0c80\u306e\u30b3\u30fc\u30d1\u30b9\u4e2d\u306b\u51fa\u73fe\u3059\u308b\u8907\u5408\u8a9e\u306e\u56fd\u540d\u306b\u95a2\u3057\u3066\uff0c\u30b9\u30da\u30fc\u30b9\u3092\u30a2\u30f3\u30c0\u30fc\u30d0\u30fc\u306b\u7f6e\u63db\u305b\u3088\uff0e\n\u4f8b\u3048\u3070\uff0c\"United States\"\u306f\"United_States\"\uff0c\"Isle of Man\"\u306f\"Isle_of_Man\"\u306b\u306a\u308b\u306f\u305a\u3067\u3042\u308b\uff0e\n\n\u307e\u3060\u6016\u3044\u8a00\u8449\u306f\u51fa\u3066\u304d\u3066\u306a\u3044\u3067\u3059\u306d\u3002\nhttp://www.listofcountriesoftheworld.com/ \u3092\u30b3\u30d4\u30fc\u3057\u3066combined_words.txt\u3068\u3057\u3066\u4fdd\u5b58\u3057\u3066\u304a\u3044\u3066\u3001\u4e0b\u8a18\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\u56fd\u540d\u3060\u3051\u3058\u3083\u306a\u304f\u5730\u540d\u30fb\u4eba\u540d\u306a\u3069\u3082\u6c17\u306b\u306f\u306a\u308a\u307e\u3059\u304c\u3001\u3042\u307e\u308a\u3053\u3060\u308f\u3089\u305a\u306b\u5148\u306b\u9032\u3093\u3060\u307b\u3046\u304c\u5409\u3067\u3059\u3002\n\nWikiRDD.scala\nclass WikiRDDString(rdd: RDD[String]) extends Serializable {\n  (\u4e2d\u7565)\n  def replaceCombinedWord(fileName: String): RDD[String] = {\n    val combinedWordMap = Source.fromFile(fileName).getLines\n      .filter(_.split(' ').length > 1)\n      .map(combinedWord => (combinedWord, combinedWord.replace(' ', '_')))\n      .toMap\n\n    def replaceCombinedWords(sentence: String): String = {\n      var s = sentence\n      combinedWordMap.foreach {\n        combinedWord => s = s.replaceAll(combinedWord._1, combinedWord._2)\n      }\n      s\n    }\n\n    rdd.map(replaceCombinedWords)\n  }\n\n\n\n82. \u6587\u8108\u306e\u62bd\u51fa\n\n81\u3067\u4f5c\u6210\u3057\u305f\u30b3\u30fc\u30d1\u30b9\u4e2d\u306b\u51fa\u73fe\u3059\u308b\u3059\u3079\u3066\u306e\u5358\u8a9et\u306b\u95a2\u3057\u3066\uff0c\u5358\u8a9et\u3068\u6587\u8108\u8a9ec\u306e\u30da\u30a2\u3092\u30bf\u30d6\u533a\u5207\u308a\u5f62\u5f0f\u3067\u3059\u3079\u3066\u66f8\u304d\u51fa\u305b\uff0e\n\u305f\u3060\u3057\uff0c\u6587\u8108\u8a9e\u306e\u5b9a\u7fa9\u306f\u6b21\u306e\u901a\u308a\u3068\u3059\u308b\uff0e\n\n\u3042\u308b\u5358\u8a9et\u306e\u524d\u5f8cd\u5358\u8a9e\u3092\u6587\u8108\u8a9ec\u3068\u3057\u3066\u62bd\u51fa\u3059\u308b\uff08\u305f\u3060\u3057\uff0c\u6587\u8108\u8a9e\u306b\u5358\u8a9et\u305d\u306e\u3082\u306e\u306f\u542b\u307e\u306a\u3044\uff09\n\u5358\u8a9et\u3092\u9078\u3076\u5ea6\u306b\uff0c\u6587\u8108\u5e45d\u306f{1,2,3,4,5}\u306e\u7bc4\u56f2\u3067\u30e9\u30f3\u30c0\u30e0\u306b\u6c7a\u3081\u308b\uff0e\n\n\n\u96e3\u3057\u3044\u8a00\u8449\u306f\u51fa\u3066\u3053\u306a\u3044\u3082\u306e\u306e\u3001\u4f55\u306e\u305f\u3081\u306b\u3053\u3093\u306a\u3053\u3068\u3092\u3059\u308b\u306e\u304b\u610f\u56f3\u306e\u7406\u89e3\u306b\u82e6\u3057\u3080\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u3042\u308b\u5358\u8a9e\u304c\u3069\u3046\u3044\u3063\u305f\u6587\u8108\u3067\u4f7f\u308f\u308c\u308b\u3053\u3068\u304c\u591a\u3044\u306e\u304b\u3092\u8abf\u3079\u308b\u3068\u3044\u3046\u306e\u304c\u3084\u308a\u305f\u3044\u3053\u3068\u3067\u3059\u3002\n\u3067\u3001\u305d\u306e\u6587\u8108\u3063\u3066\u306e\u3092\u3069\u3046\u3044\u3046\u98a8\u306b\u5224\u65ad\u3059\u308b\u304b\u306b\u8272\u3005\u306a\u3084\u308a\u65b9\u304c\u3042\u308b\u3063\u307d\u3044\u3093\u3067\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u30e9\u30f3\u30c0\u30e0\u306b\u524d\u5f8c1\u301c5\u8a9e\u3092\u53d6\u3063\u3066\u304d\u3066\u6587\u8108\u3068\u3057\u3088\u3046\u3068\u8a00\u3063\u3066\u3044\u308b\u308f\u3051\u3067\u3059\u3002\n\u4f8b\u3048\u3070\u3001\u300cWikipedia is an Internet encyclopedia, supported and hosted by the non-profit Wikimedia Foundation.\u300d\u3068\u3044\u3046\u6587\u7ae0\u304c\u3042\u3063\u305f\u3068\u3057\u305f\u3089\u3001\u3053\u306e\u554f\u984c\u3067\u5f97\u305f\u3044\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u306f\u3001\u4e0b\u8a18\u306e\u69d8\u306a\u30bf\u30d6\u533a\u5207\u308a\u306e\u6587\u5b57\u5217\u306b\u306a\u308a\u307e\u3059\u3002\uff08\u4e0b\u8a18\u306e\u4f8b\u3067\u306f\u6587\u8108\u5e45\u306f\u9806\u306b\u30013, 1, 5 \u3067\u3042\u308b\u3068\u4eee\u5b9a\u3057\u3066\u3044\u307e\u3059\uff09\n\n82\u306e\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u30a4\u30e1\u30fc\u30b8\nWikipedia is\nWikipedia an\nWikipedia Internet\nis Wikipedia\nis an\nan Wikipedia\nan is\nan Internet\nan encyclopedia\nan supprted\nan and\nan hosted\n(\u4ee5\u4e0b\u7565)\n\n\n\nWikiRDD.scala\nclass WikiRDDString(rdd: RDD[String]) extends Serializable {\n  (\u4e2d\u7565)\n  def contexts: RDD[(String, String)] = {\n    def getContexts(sentence: String): List[(String, String)] = {\n      val words = sentence.split(' ')\n      words.zipWithIndex.map { case (word, index) =>\n        val d = scala.util.Random.nextInt(5) + 1      // \u6587\u8108\u5e45\n        val from = List(0, index - d + 1).max         // \u6587\u8108\u5e45\u304c0\u3088\u308a\u524d\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u6ce8\u610f!\n        val to = List(index + d, sentence.length).min // \u6587\u8108\u5e45\u304c\u6587\u7ae0\u306e\u672b\u5c3e\u3088\u308a\u5f8c\u308d\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u6ce8\u610f!\n        val contexts = words.slice(from, index).toList ::: words.slice(index + 1, to).toList\n        contexts.map(context => (word, context))\n      }.toList.flatten\n    }\n    rdd.filter(_.nonEmpty).flatMap(getContexts)\n  }\n\n\n\n83. \u5358\u8a9e\uff0f\u6587\u8108\u306e\u983b\u5ea6\u306e\u8a08\u6e2c\n\n82\u306e\u51fa\u529b\u3092\u5229\u7528\u3057\uff0c\u4ee5\u4e0b\u306e\u51fa\u73fe\u5206\u5e03\uff0c\u304a\u3088\u3073\u5b9a\u6570\u3092\u6c42\u3081\u3088\uff0e\n\nf(t,c): \u5358\u8a9et\u3068\u6587\u8108\u8a9ec\u306e\u5171\u8d77\u56de\u6570\nf(t,\u2217): \u5358\u8a9et\u306e\u51fa\u73fe\u56de\u6570\nf(\u2217,c): \u6587\u8108\u8a9ec\u306e\u51fa\u73fe\u56de\u6570\nN: \u5358\u8a9e\u3068\u6587\u8108\u8a9e\u306e\u30da\u30a2\u306e\u7dcf\u51fa\u73fe\u56de\u6570\n\n\n83\u3067\u3084\u308a\u305f\u3044\u3053\u3068\u3092SQL\u3067\u3044\u3046\u3068\u4e0b\u8a18\u306e\u69d8\u306b\u306a\u308a\u307e\u3059\u3002\u672c\u5f53\u306bSQL\u3092\u4f7f\u3046\u8a33\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3042\u304f\u307e\u3067\u30a4\u30e1\u30fc\u30b8\u3067\u3059\u3002\n# 82\u306e\u51fa\u529b\u7d50\u679c\u306eDDL\nCREATE TABLE word_context (\n  word VARCHAR,\n  context VARCHAR\n);\n\n# f(t,c): \u5358\u8a9et\u3068\u6587\u8108\u8a9ec\u306e\u5171\u8d77\u56de\u6570\nSELECT word, context, COUNT(*) FROM word_context GROUP BY word, context;\n\n# f(t,\u2217): \u5358\u8a9et\u306e\u51fa\u73fe\u56de\u6570\nSELECT word, COUNT(*) FROM word_context GROUP BY word;\n\n# f(\u2217,c): \u6587\u8108\u8a9ec\u306e\u51fa\u73fe\u56de\u6570\nSELECT context, COUNT(*) FROM word_context GROUP BY context;\n\n# N: \u5358\u8a9e\u3068\u6587\u8108\u8a9e\u306e\u30da\u30a2\u306e\u7dcf\u51fa\u73fe\u56de\u6570\nSELECT COUNT(*) FROM word_context;\n\n\u3053\u308c\u3092Scala\u3067\u66f8\u304f\u308f\u3051\u3067\u3059\u304c\u3001\u300cf(t,c): \u5358\u8a9et\u3068\u6587\u8108\u8a9ec\u306e\u5171\u8d77\u56de\u6570\u300d\u4ee5\u5916\u306f84\u3067\u3084\u3063\u3066\u3057\u307e\u3063\u305f\u307b\u3046\u304c\u52b9\u7387\u304c\u826f\u3044\u306e\u3067\u3001\u3053\u3053\u3067\u306ff(t,c)\u3060\u3051\u51fa\u3057\u307e\u3059\u3002\n\nWikiRDD.scala\nclass WikiRDDLong(rdd: RDD[((String, String), Long)]) {\n  def sumByTC: RDD[((String, String), Long)] = rdd.groupByKey.map { case (k, v) => k -> v.sum }\n\n\n\u3061\u3087\u3063\u3068\u3053\u3053\u3060\u3051\u898b\u308b\u3068\u8b0e\u304b\u3082\u77e5\u308c\u307e\u305b\u3093\u304c\u3001\u6700\u5f8c\u306b\u30b3\u30fc\u30c9\u306e\u5168\u4f53\u50cf\u3092\u8f09\u305b\u3066\u3044\u308b\u306e\u3067\u78ba\u8a8d\u3057\u3066\u4e0b\u3055\u3044\u3002\n\n84. \u5358\u8a9e\u6587\u8108\u884c\u5217\u306e\u4f5c\u6210\n\n83\u306e\u51fa\u529b\u3092\u5229\u7528\u3057\uff0c\u5358\u8a9e\u6587\u8108\u884c\u5217X\u3092\u4f5c\u6210\u305b\u3088\uff0e\u305f\u3060\u3057\uff0c\u884c\u5217X\u306e\u5404\u8981\u7d20Xtc\u306f\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308b\uff0e\nf(t,c)\u226510\u306a\u3089\u3070\uff0cXtc = PPMI(t,c) = max { log(N \u00d7 f(t,c) / f(t,\u2217) \u00d7 f(\u2217,c)), 0}\nf(t,c)<10\u306a\u3089\u3070\uff0cXtc = 0\n\u3053\u3053\u3067\uff0cPPMI(t,c)\u306fPositive Pointwise Mutual Information\uff08\u6b63\u306e\u76f8\u4e92\u60c5\u5831\u91cf\uff09\u3068\u547c\u3070\u308c\u308b\u7d71\u8a08\u91cf\u3067\u3042\u308b\uff0e\n\u306a\u304a\uff0c\u884c\u5217X\u306e\u884c\u6570\u30fb\u5217\u6570\u306f\u6570\u767e\u4e07\u30aa\u30fc\u30c0\u3068\u306a\u308a\uff0c\u884c\u5217\u306e\u3059\u3079\u3066\u306e\u8981\u7d20\u3092\u4e3b\u8a18\u61b6\u4e0a\u306b\u8f09\u305b\u308b\u3053\u3068\u306f\u7121\u7406\u306a\u306e\u3067\u6ce8\u610f\u3059\u308b\u3053\u3068\uff0e\n\u5e78\u3044\uff0c\u884c\u5217X\u306e\u307b\u3068\u3093\u3069\u306e\u8981\u7d20\u306f0\u306b\u306a\u308b\u306e\u3067\uff0c\u975e0\u306e\u8981\u7d20\u3060\u3051\u3092\u66f8\u304d\u51fa\u305b\u3070\u3088\u3044\uff0e\n\n\u5358\u8a9e\u3068\u6587\u8108\u8a9e\u306e\u30da\u30a2\u306e\u51fa\u73fe\u983b\u5ea6\u3092\u5143\u306b\u3001\u5358\u8a9e\u3068\u6587\u8108\u8a9e\u306e\u95a2\u4fc2\u306e\u5f37\u3055\u3092\u3001\u6b63\u306e\u76f8\u4e92\u60c5\u5831\u91cf\u3068\u3044\u3046\u7d71\u8a08\u91cf\u3067\u8868\u3057\u307e\u3059\u3002\u4e00\u898b\u3001\u96e3\u3057\u3052\u3067\u3059\u304c\u3001\u554f\u984c\u6587\u306b\u66f8\u3044\u3066\u3044\u308b\u5b9a\u7fa9\u901a\u308a\u306b\u30b3\u30fc\u30c9\u5316\u3057\u3066\u3044\u304f\u3060\u3051\u3067\u3059\u3002\n\nWikiRDD.scala\nclass WikiRDDLong(rdd: RDD[((String, String), Long)]) {\n  def contextMatrix: RDD[((String, String), Double)] = {\n    // (83\u306e\u6b8b\u30bf\u30b9\u30af) \u5358\u8a9et\u306e\u51fa\u73fe\u56de\u6570: f(t,\u2217)\n    val mapT = rdd.map(x => x._1._1 -> x._2).groupByKey.map { case (k, v) => k -> v.sum }.collect.toMap\n\n    // (83\u306e\u6b8b\u30bf\u30b9\u30af) \u6587\u8108\u8a9ec\u306e\u51fa\u73fe\u56de\u6570: f(\u2217,c)\n    val mapC = rdd.map(x => x._1._2 -> x._2).groupByKey.map { case (k, v) => k -> v.sum }.collect.toMap\n\n    // (83\u306e\u6b8b\u30bf\u30b9\u30af) \u5358\u8a9e\u3068\u6587\u8108\u8a9e\u306e\u30da\u30a2\u306e\u7dcf\u51fa\u73fe\u56de\u6570\n    val n = rdd.count\n\n    // PPMI\u306e\u7b97\u51fa\n    // Xtc = PPMI(t,c) = max { log(N \u00d7 f(t,c) / f(t,\u2217) \u00d7 f(\u2217,c)), 0}\n    rdd.filter(_._2 >= 10).map(x => x._1 -> Math.log(n * x._2 / (mapT(x._1._1) * mapC(x._1._2)))).filter(_._2 > 0)\n  }\n\n\n\n84\u306e\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u30a4\u30e1\u30fc\u30b8\nperceive they 4.3694478524670215\nNFL teams 4.23410650459726\nEuropean elections 2.995732273553991\nstrictly is 1.791759469228055\nValley region 2.6390573296152584\nhead football 2.8903717578961645\nWilson was 0.6931471805599453\napplied may 1.6094379124341003\npopulation Census 2.302585092994046\nprivate investment 4.543294782270004\n(\u4ee5\u4e0b\u7565)\n\n\n\n2 \u5358\u8a9e\u6587\u8108\u884c\u5217\u306e\u6b21\u5143\u3092\u5727\u7e2e\u3057\u3066\u3001\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3002(85)\n\u3053\u3053\u307e\u3067\u3067\u300c84\u306e\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u30a4\u30e1\u30fc\u30b8\u300d\u306e\u69d8\u306b\u3001\u5358\u8a9e\u3068\u6587\u8108\u8a9e\u3068\u306e\u95a2\u4fc2\u3092\u5b9a\u91cf\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\u6b21\u306f\u3053\u308c\u3092\u30d9\u30af\u30c8\u30eb\u3068\u3057\u3066\u8868\u73fe\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n85. \u4e3b\u6210\u5206\u5206\u6790\u306b\u3088\u308b\u6b21\u5143\u5727\u7e2e\n\n84\u3067\u5f97\u3089\u308c\u305f\u5358\u8a9e\u6587\u8108\u884c\u5217\u306b\u5bfe\u3057\u3066\uff0c\u4e3b\u6210\u5206\u5206\u6790\u3092\u9069\u7528\u3057\uff0c\u5358\u8a9e\u306e\u610f\u5473\u30d9\u30af\u30c8\u30eb\u3092300\u6b21\u5143\u306b\u5727\u7e2e\u305b\u3088\uff0e\n\n\n 300\u6b21\u5143\uff01\uff1f\n\u3055\u3066\u3053\u3053\u3067\u6b21\u5143\u3068\u3044\u3046\u8a00\u8449\u304c\u51fa\u3066\u304f\u308b\u308f\u3051\u3067\u3059\u304c\u3001\u4f55\u306a\u3093\u3067\u3057\u3087\u3046300\u6b21\u5143\u3063\u3066\uff1f\n\u300c84\u3067\u5f97\u3089\u308c\u305f\u5358\u8a9e\u6587\u8108\u884c\u5217\u300d\u3092\u5727\u7e2e\u3057\u3066300\u6b21\u5143\u306b\u3059\u308b\u308f\u3051\u3067\u3059\u304b\u3089\u3001\u73fe\u6642\u70b9\u3067\u306f\u3082\u3063\u3068\u5927\u304d\u3044\u6b21\u5143\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u306d\u3002\n\u307e\u305a\u3001\u300c84\u3067\u5f97\u3089\u308c\u305f\u5358\u8a9e\u6587\u8108\u884c\u5217\u300d\u3092\u3001\u5358\u8a9e\u3092\u7e26\u8ef8(\u884c)\u3001\u6587\u8108\u3092\u6a2a\u8ef8(\u5217)\u3068\u3059\u308b\u3001\u30b9\u30ab\u30b9\u30ab\u306e\u884c\u5217\u3068\u3057\u3066\u6349\u3048\u308b\u3093\u3067\u3059\u3002\u300c84\u306e\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u30a4\u30e1\u30fc\u30b8\u300d\u306e\u4f8b\u3060\u3068\u4e0b\u8a18\u306e\u69d8\u306a\u884c\u5217\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n\n\nthey\nteams\nelections\nis\nregion\nfootball\nwas\nmay\nCensus\ninvestment\n(\u4ee5\u4e0b\u7565)\n\n\n\n\nperceive\n4.36944\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\nNFL\n0\n4.23410\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\nEuropean\n0\n0\n2.99573\n0\n0\n0\n0\n0\n0\n0\n\n\n\nstrictly\n0\n0\n0\n1.79175\n0\n0\n0\n0\n0\n0\n\n\n\nValley\n0\n0\n0\n0\n2.63905\n0\n0\n0\n0\n0\n\n\n\nhead\n0\n0\n0\n0\n0\n2.89037\n0\n0\n0\n0\n\n\n\nWilson\n0\n0\n0\n0\n0\n0\n0.69314\n0\n0\n0\n\n\n\napplied\n0\n0\n0\n0\n0\n0\n0\n1.60943\n0\n0\n\n\n\npopulation\n0\n0\n0\n0\n0\n0\n0\n0\n2.30258\n0\n\n\n\nprivate\n0\n0\n0\n0\n0\n0\n0\n0\n0\n4.54329\n\n\n\n(\u4ee5\u4e0b\u7565)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u3053\u306e\u6a2a\u5e45\u3092\u6b21\u5143\u3068\u547c\u3093\u3067\u308b\u8a33\u3067\u3059\u3002\n1/10\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30c7\u30fc\u30bf\u3060\u3068\u30019.4\u4e07\u884c\uff5810\u4e07\u5217(10\u4e07\u6b21\u5143)\u3050\u3089\u3044\u306b\u306a\u308a\u307e\u3059\u3002\n\u6700\u7d42\u7684\u306b\u3001\u3084\u308a\u305f\u3044\u3053\u3068\u306f\u6700\u521d\u306b\u8ff0\u3079\u305f\u3088\u3046\u306b\u3001\u300c\u30a4\u30c1\u30ed\u30fc\u300d-\u300c\u91ce\u7403\u300d+\u300c\u672c\u7530\u300d=\u300c\u30b5\u30c3\u30ab\u30fc\u300d\u306e\u69d8\u306a\u5358\u8a9e\u540c\u58eb\u306e\u6bd4\u8f03\u30fb\u6f14\u7b97\u3067\u3059\u3002\n\u3053\u3046\u3044\u3063\u305f\u6bd4\u8f03\u30fb\u6f14\u7b97\u3092\u884c\u3046\u306b\u306f10\u4e07\u6b21\u5143\u3082\u3042\u3063\u3066\u306f\u7121\u99c4\u304c\u5927\u304d\u3044\u306e\u3067\u3001\u672c\u5f53\u306b\u305d\u306e\u5358\u8a9e\u306e\u6027\u8cea\u3092\u8868\u73fe\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u6b21\u5143\u306b\u307e\u3067\u5727\u7e2e\u3059\u308b\u306e\u3067\u3059\u3002\n\u5358\u8a9e\u3092\u8868\u73fe\u3059\u308b\u30d9\u30af\u30c8\u30eb\u304c\u3042\u308c\u3070\u6bd4\u8f03\u30fb\u6f14\u7b97\u306f\u3067\u304d\u308b\u306e\u3067\u3001\u5727\u7e2e\u5f8c\u306b\u306f\u6a2a\u8ef8(\u5217)\u306e\u30e9\u30d9\u30eb(\u4e0a\u306e\u4f8b\u3067\u8a00\u3046\u3068\u3053\u308d\u306e\u3001they, team, elections, ...)\u306f\u5931\u308f\u308c\u3066\u3057\u307e\u3063\u3066\u3082\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002\u5358\u8a9e\u306e\u6027\u8cea\u3092\u8868\u305910\u4e07\u500b\u306e\u6307\u6a19\u3092\u307e\u3068\u3081\u3066\u3001\u65b0\u3057\u3044300\u500b\u306e\u6307\u6a19\u3092\u4f5c\u308b\u30a4\u30e1\u30fc\u30b8\u3067\u3059\u3002\n\u5727\u7e2e\u3059\u308b\u65b9\u6cd5\u306b\u306f\u3001\u300c\u4e3b\u6210\u5206\u5206\u6790(PCA)\u300d\u3068\u300c\u7279\u7570\u5024\u5206\u89e3(SVD)\u300d\u304c\u3042\u308a\u307e\u3059\u3002\n\n \u4e3b\u6210\u5206\u5206\u6790(PCA)\n\u4e3b\u6210\u5206\u5206\u6790\u306e\u6b63\u3057\u304f\u3066\u5206\u304b\u308a\u3084\u3059\u3044\u8aac\u660e\u3092\u3059\u308b\u80fd\u529b\u306f\u3001\u79c1\u306b\u306f\u306a\u3044\u306e\u3067\u3053\u306e\u3078\u3093\u3092\u53c2\u8003\u306b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\u3053\u3053\u3067\u306f\u3001\u6b21\u5143\u3092\u524a\u6e1b\u3059\u308b\u30c4\u30fc\u30eb\u3068\u3057\u3066\u30d6\u30e9\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u7684\u306b\u7406\u89e3\u3057\u3066\u5148\u306b\u9032\u3081\u307e\u3059\u3002\n\u4e3b\u6210\u5206\u5206\u6790\u3059\u308b\u30b3\u30fc\u30c9\u306f\u3001Spark/Scala\u3067\u306f\u4e0b\u8a18\u306e\u69d8\u306b\u306a\u308a\u307e\u3059\u3002\n    // \u5358\u8a9e\u6587\u8108\u884c\u5217\u306e\u30b9\u30ab\u30b9\u30ab\u884c\u5217\u5316\u3002PCA\u3059\u308b\u305f\u3081\u306b\u306fRowMatrix\u578b\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n    val contextMap = rdd.collect.toMap\n    val words = rdd.keys.map(_._1).distinct\n    val word_count = words.count.toInt\n    val contexts = rdd.keys.map(_._2).distinct.collect\n\n    val contextMatrix: RDD[Vector] = words.map(w => Vectors.dense(contexts.map(c => contextMap.getOrElse((w, c), 0.0)).slice(0, word_count)))\n\n    val rowMatrix = new RowMatrix(contextMatrix)\n\n    // PCA\u5b9f\u884c\n    val pcMatrix = rowMatrix.computePrincipalComponents(300)\n\n\n\u305f\u3060\u3057\u3001Spark\u306f65,535\u6b21\u5143\u307e\u3067\u3057\u304b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u3089\u3057\u304f\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\u3002\nException in thread \"main\" java.lang.IllegalArgumentException: Argument with more than 65535 cols: 100113\n\n\u305d\u3053\u3067\u300165,535\u6b21\u5143\u4ee5\u4e0b\u306b\u306a\u308b\u3088\u3046\u306b\u3001\u9069\u5f53\u306b\u30c7\u30fc\u30bf\u3092\u7d5e\u3063\u3066\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\u3059\u308b\u3068\u3001\u4eca\u5ea6\u306f\u30e1\u30e2\u30ea\u4e0d\u8db3\u3060\u3068\u6012\u3089\u308c\u307e\u3059\u3002\nException in thread \"main\" java.lang.OutOfMemoryError: Java heap space\n\n\u7d50\u5c40\u3001\u4e3b\u6210\u5206\u5206\u6790\u3092\u3059\u308b\u524d\u306b\u30015\u5343\u6b21\u5143\u3050\u3089\u3044\u307e\u3067\u7d5e\u3089\u306a\u3044\u3068computePrincipalComponents\u3092\u5b9f\u884c\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u4e3b\u6210\u5206\u5206\u6790\u3059\u308b\u524d\u306b\u305d\u3093\u306a\u5927\u80c6\u306b\u7d5e\u3063\u305f\u3089\u3001\u4e3b\u6210\u5206\u5206\u6790\u3067\u6b21\u5143\u524a\u6e1b\u3059\u308b\u610f\u5473\u304c\u306a\u3044\u306e\u3067\u3001\u5225\u306e\u624b\u3092\u8003\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n \u7279\u7570\u5024\u5206\u89e3(SVD)\n\u6b21\u5143\u3092\u524a\u6e1b\u3059\u308b\u305f\u3081\u306e\u3082\u3046\u4e00\u3064\u306e\u30c4\u30fc\u30eb\u304c\u7279\u7570\u5024\u5206\u89e3\u3067\u3059\u3002\u6b63\u78ba\u306a\u8aac\u660e\u304c\u6c17\u306b\u306a\u308b\u65b9\u306f\u3001\u30b0\u30b0\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\u3053\u3053\u3067\u3082\u30d6\u30e9\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3068\u3057\u3066\u3001\u5927\u304d\u306a\u884c\u5217\u306b\u5bfe\u3057\u3066\u7279\u7570\u5024\u5206\u89e3(computeSVD)\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001U\u3068\u03a3\u3068V\u3068\u3044\u3046\uff13\u3064\u306e\u884c\u5217\u306b\u5206\u89e3\u3055\u308c\u3066\u3001U\u3068\u03a3\u306e\u5185\u7a4d\u3092\u8a08\u7b97\u3059\u308b\u3068\u6b21\u5143\u5727\u7e2e\u304c\u3067\u304d\u308b\u3068\u3044\u3046\u3075\u3046\u306b\u7406\u89e3\u3057\u3066\u5148\u306b\u52e7\u3081\u307e\u3059\u3002\nSpark/Scala\u3067\u306e\u30b3\u30fc\u30c9\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nWikiRDD.scala\nclass WikiRDDDouble(rdd: RDD[((String, String), Double)]) {\n\n  def wordVectors: RDD[(String, Array[Double])] = {\n    // \u5358\u8a9e\u6587\u8108\u884c\u5217\u3092\u30de\u30c3\u30d7\u5316\n    val contextMap: Map[(String, String), Double] = rdd.collect.toMap\n\n    // \u4e00\u610f\u306a\u5358\u8a9ec\u306eRDD\n    val words: RDD[String] = rdd.keys.map(_._1).distinct\n\n    // \u4e00\u610f\u306a\u6587\u8108\u8a9ec\u306e\u914d\u5217\n    val contexts: Array[String] = rdd.keys.map(_._2).distinct.collect\n\n    // \u5358\u8a9e\u6587\u8108\u884c\u5217\u3092\u758e\u884c\u5217\u5316\n    val contextMatrix: RDD[Vector] = words.map(w => Vectors.dense(contexts.map(c => contextMap.getOrElse((w, c), 0.0))))\n\n    // \u7279\u7570\u5024\u5206\u89e3(SVD)\n    val svd = new RowMatrix(contextMatrix).computeSVD(300, computeU = true)\n\n    // \u7279\u7570\u5024\u5206\u89e3\u5f8c\u306eU\u3068\u03a3\u306e\u5185\u7a4d\n    val us: RowMatrix = multiplyMatrix(svd.U, svd.s)\n\n    words.zip(us.rows.map(_.toArray))\n  }\n\n  /**\n    * \u7279\u7570\u5024\u5206\u89e3\u5f8c\u306eU\u3068\u03a3\u306e\u5185\u7a4d\u3092\u7b97\u51fa\u3059\u308b(+\u6b63\u898f\u5316)\n    * \n    * https://github.com/sryza/aas/blob/master/ch06-lsa/src/main/scala/com/cloudera/datascience/lsa/RunLSA.scala#L131\n    * \u3068\n    * https://github.com/sryza/aas/blob/master/ch06-lsa/src/main/scala/com/cloudera/datascience/lsa/RunLSA.scala#L143\n    * \u3092\u6df7\u305c\u3066\u5b9f\u88c5\n    */\n  def multiplyMatrix(mat: RowMatrix, diag: Vector): RowMatrix = {\n    val sArr: Array[Double] = diag.toArray\n    new RowMatrix(mat.rows.map(vec => {\n      val newArr: Array[Double] = (0 until vec.size).toArray.map(i => vec.toArray(i) * sArr(i))\n      val length = math.sqrt(newArr.map(x => x * x).sum)\n      Vectors.dense(newArr.map(_ / length))\n    }))\n  }\n\n\n\u7279\u7570\u5024\u5206\u89e3\u306a\u3089\u30011/100\u30c7\u30fc\u30bf\u30677\u6642\u9593\u3067\u306a\u3093\u3068\u304b\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\u554f\u984c\u6587\u306e\u6307\u793a\u901a\u308a\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u305d\u306e\u3046\u3061\u30ea\u30d9\u30f3\u30b8\u3057\u305f\u3044\u3082\u306e\u3067\u3059\u304c\u3001\u53c2\u8003\u6587\u732e\u306b\u6319\u3052\u305f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u898b\u3066\u3082\u5927\u62b5\u7279\u7570\u5024\u5206\u89e3\u3092\u4f7f\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3057\u305f\u306e\u3067\u3001\u4e00\u65e6\u3053\u306e\u307e\u307e\u9032\u3081\u3066\u3082\u554f\u984c\u306f\u7121\u3044\u3067\u3057\u3087\u3046\u3002\n\n3 \u4f5c\u6210\u3057\u305f\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3067\u904a\u3093\u3067\u307f\u308b\u3002(86\u301c89)\n \u304a\u75b2\u308c\u69d8\u3067\u3057\u305f\u3002\u4e8b\u5b9f\u4e0a\u3001\u3053\u3053\u307e\u3067\u30679\u7ae0\u306f\u307b\u307c\u7d42\u308f\u308a\u3067\u3059\u3002 \n\u5f8c\u306f\u300185\u3067\u4f5c\u3063\u305f\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3092\u3042\u308c\u3053\u308c\u3044\u3058\u3063\u3066\u307f\u3066\u6027\u80fd\u3092\u78ba\u8a8d\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\nMain.scala\n  def runStage3(): Unit = {\n    // \u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3092\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u5fa9\u5143\n    val words = sc.textFile(WORD_VECTORS).restoreWordVectors\n\n    // \u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6\u3092\u7b97\u51fa\n    def cos(x: Array[Double], y: Array[Double]): Double = x.zip(y).map(xy => xy._1 * xy._2).sum\n\n    def vec(word: String): Array[Double] = words.vector(word).get\n\n    def plusVec(vec1: Array[Double], vec2: Array[Double]) = vec1.zip(vec2).map(v => v._1 + v._2)\n\n    def minusVec(vec1: Array[Double], vec2: Array[Double]) = vec1.zip(vec2).map(v => v._1 - v._2)\n\n    def printTopN(vec: Array[Double], n: Int = 10): Unit = {\n      val wordMap = words.collect.toMap\n\n      words\n        .map(x => x._1 -> cos(vec, wordMap(x._1))).collect.toList // \u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6\u306e\u4e00\u89a7\u3092\u4f5c\u6210\u3057\u3066\u30ea\u30b9\u30c8\u5316\n        .sortBy(_._2).reverse.slice(0, n) // \u30bd\u30fc\u30c8\u3057\u3066\u30c8\u30c3\u30d7N\u3092\u62bd\u51fa\n        .foreach(x => println(x._1 + \"\\t\" + \"%.8f\".format(x._2))) // \u8868\u793a\n    }\n\n    /**\n      * 86. \u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306e\u8868\u793a\n      *\n      * 85\u3067\u5f97\u305f\u5358\u8a9e\u306e\u610f\u5473\u30d9\u30af\u30c8\u30eb\u3092\u8aad\u307f\u8fbc\u307f\uff0c\"United States\"\u306e\u30d9\u30af\u30c8\u30eb\u3092\u8868\u793a\u305b\u3088\uff0e\n      * \u305f\u3060\u3057\uff0c\"United States\"\u306f\u5185\u90e8\u7684\u306b\u306f\"United_States\"\u3068\u8868\u73fe\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u305b\u3088\uff0e\n      */\n    println(\"86. \u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306e\u8868\u793a\")\n    println(vec(\"United_States\").mkString(\" \"))\n\n    /**\n      * 87. \u5358\u8a9e\u306e\u985e\u4f3c\u5ea6\n      *\n      * 85\u3067\u5f97\u305f\u5358\u8a9e\u306e\u610f\u5473\u30d9\u30af\u30c8\u30eb\u3092\u8aad\u307f\u8fbc\u307f\uff0c\"United States\"\u3068\"U.S.\"\u306e\u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6\u3092\u8a08\u7b97\u305b\u3088\uff0e\n      * \u305f\u3060\u3057\uff0c\"U.S.\"\u306f\u5185\u90e8\u7684\u306b\"U.S\"\u3068\u8868\u73fe\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u305b\u3088\uff0e\n      */\n    println(\"87. \u5358\u8a9e\u306e\u985e\u4f3c\u5ea6\")\n    println(cos(vec(\"United_States\"), vec(\"U.S\")))\n    println(cos(vec(\"United_Kingdom\"), vec(\"U.K\")))\n    println(cos(vec(\"England\"), vec(\"U.K\")))\n    println(cos(vec(\"United_Kingdom\"), vec(\"England\")))\n\n    /**\n      * 88. \u985e\u4f3c\u5ea6\u306e\u9ad8\u3044\u5358\u8a9e10\u4ef6\n      *\n      * 85\u3067\u5f97\u305f\u5358\u8a9e\u306e\u610f\u5473\u30d9\u30af\u30c8\u30eb\u3092\u8aad\u307f\u8fbc\u307f\uff0c\"England\"\u3068\u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6\u304c\u9ad8\u304410\u8a9e\u3068\uff0c\u305d\u306e\u985e\u4f3c\u5ea6\u3092\u51fa\u529b\u305b\u3088\uff0e\n      */\n    println(\"88. \u985e\u4f3c\u5ea6\u306e\u9ad8\u3044\u5358\u8a9e10\u4ef6\")\n    printTopN(vec(\"England\"), 20)\n    printTopN(vec(\"Obama\"), 20)\n    printTopN(vec(\"Japan\"), 20)\n\n    /**\n      * 89. \u52a0\u6cd5\u69cb\u6210\u6027\u306b\u3088\u308b\u30a2\u30ca\u30ed\u30b8\u30fc\n      *\n      * 85\u3067\u5f97\u305f\u5358\u8a9e\u306e\u610f\u5473\u30d9\u30af\u30c8\u30eb\u3092\u8aad\u307f\u8fbc\u307f\uff0cvec(\"Spain\") - vec(\"Madrid\") + vec(\"Athens\")\u3092\u8a08\u7b97\u3057\uff0c\u305d\u306e\u30d9\u30af\u30c8\u30eb\u3068\u985e\u4f3c\u5ea6\u306e\u9ad8\u304410\u8a9e\u3068\u305d\u306e\u985e\u4f3c\u5ea6\u3092\u51fa\u529b\u305b\u3088\uff0e\n      */\n    println(\"89. \u52a0\u6cd5\u69cb\u6210\u6027\u306b\u3088\u308b\u30a2\u30ca\u30ed\u30b8\u30fc\")\n    printTopN(plusVec(minusVec(vec(\"Spain\"), vec(\"Madrid\")), vec(\"Athens\")), 20)\n    printTopN(plusVec(minusVec(vec(\"England\"), vec(\"London\")), vec(\"Tokyo\")), 20)\n  }\n\n\n\n86. \u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306e\u8868\u793a\n\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3092\u51fa\u529b\u3057\u3066\u307f\u307e\u3059\u3002\n\nvec(\"United_States\")\u306e\u51fa\u529b\u7d50\u679c\n0.05194608599987417 0.0027944452235603725 -0.03464696786905431 0.09209495035824586 ...(\u4ee5\u4e0b\u7565)\n\n\n\u4e0a\u8a18\u306e\u69d8\u306a\u3001\u6570\u5b57\u304c300\u500b\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\u5358\u8a9e\u6587\u8108\u884c\u5217\u3068\u306f\u9055\u3044\u6b21\u5143\u5727\u7e2e\u5f8c\u306e\u30d9\u30af\u30c8\u30eb\u306f\u3001\u305d\u308c\u3060\u3051\u3092\u898b\u3066\u3082\u610f\u5473\u306f\u306a\u304f\u3001\u4ed6\u306e\u5358\u8a9e\u3068\u306e\u6bd4\u8f03\u306b\u304a\u3044\u3066\u3057\u304b\u610f\u5473\u3092\u6301\u3061\u307e\u305b\u3093\u3002\n\n87. \u5358\u8a9e\u306e\u985e\u4f3c\u5ea6\nUnited States\u3068U.S.\u306f0.8562344315089965\u3068\u3001\u9ad8\u3044\u985e\u4f3c\u5ea6\u3092\u793a\u3057\u307e\u3057\u305f\u304c\u3001\u305d\u308c\u4ee5\u5916\u306f\u305d\u308c\u307b\u3069\u9ad8\u304f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n88. \u985e\u4f3c\u5ea6\u306e\u9ad8\u3044\u5358\u8a9e10\u4ef6\n\u554f\u984c\u6587\u306e\u6307\u793a\u4ee5\u5916\u306b\u3082\u5e7e\u3064\u304b\u306e\u5358\u8a9e\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u30d9\u30b9\u30c820\u307e\u3067\u898b\u3066\u3044\u307e\u3059\u3002\u4e0b\u8a18\u306fprintTopN(vec(\"Obama\"), 20)\u306e\u7d50\u679c\u3067\u3059\u304c\u3001\u7c73\u56fd\u306e\u5927\u7d71\u9818\u3092\u4e2d\u5fc3\u306b\u653f\u6cbb\u5bb6\u306e\u540d\u524d\u3084President\u306a\u3069\u306e\u5358\u8a9e\u304c\u4e26\u3093\u3067\u3044\u307e\u3059\u3002\u4e0a\u624b\u304f\u5b66\u7fd2\u3067\u304d\u3066\u308b\u3088\u3046\u3067\u3059\u306d\u3002\n\n88.\u985e\u4f3c\u5ea6\u306e\u9ad8\u3044\u5358\u8a9e10\u4ef6\nObama   1.00000000\nObama's 0.98762456\nWoodrow 0.97713770\nReagan  0.97351578\nBarack  0.96941201\nNixon   0.91532997\nChen    0.90677497\nRonald  0.90399366\nCarter  0.88981108\nJimmy   0.87959134\nAbraham 0.82863200\nRoosevelt   0.82592299\nClinton 0.82518346\nVice    0.82254346\nTruman  0.81658883\nLyndon  0.80891514\nUlysses 0.80697392\nTheodore    0.80415276\nPresident   0.73341562\nHarry   0.72970068\n\n\n\n89. \u52a0\u6cd5\u69cb\u6210\u6027\u306b\u3088\u308b\u30a2\u30ca\u30ed\u30b8\u30fc\n\u5730\u7406\u7684\u306a\u8a00\u8449\u3067\u3042\u308b\u3053\u3068\u306f\u5b66\u7fd2\u3057\u3066\u3044\u308b\u3082\u306e\u306e\u3001\u56fd\u3068\u9996\u90fd\u306e\u95a2\u4fc2\u6027\u307e\u3067\u306f\u7406\u89e3\u3067\u304d\u3066\u306a\u3044\u307f\u305f\u3044\u3067\u3059\u306d\u3002\u4e0b\u8a18\u306fprintTopN(plusVec(minusVec(vec(\"Spain\"), vec(\"Madrid\")), vec(\"Athens\")), 20)\u306e\u7d50\u679c\u3067\u3059\u3002\n\n89.\u52a0\u6cd5\u69cb\u6210\u6027\u306b\u3088\u308b\u30a2\u30ca\u30ed\u30b8\u30fc\u306e\u51fa\u529b\u7d50\u679c\nJawaharlal  0.81945976\nMcGill  0.81939535\nYeshiva 0.81939535\nEmory   0.81939535\nTulane  0.81939535\nTezpur  0.81939535\nBrandeis    0.81939535\nMcMaster    0.81939535\nWashburn    0.81939535\nNotre   0.81895540\nPontifical  0.80467503\nWesleyan    0.80453523\nFreiburg    0.79883529\nLoyola  0.79827056\nWuhan   0.79819758\nEMUNI   0.79768679\nPurdue  0.79070632\nA&M 0.78805933\nMiddlesex   0.78464837\nWisconsin\u2013Madison 0.78101616\n\n\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\nMain.scala\npackage nlp100_9\n\nimport org.apache.spark._\nimport nlp100_9.WikiRDD._\n\nobject Main {\n  val RAW_FILE = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/enwiki-20150112-400-r100-10576.txt\"\n  val COMBINED_WORDS = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/combined_words.txt\"\n  val CONTEXT_MATRIX = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/context_matrix\"\n  val WORD_VECTORS = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/word_vectors\"\n  val sc = new SparkContext(new SparkConf().setAppName(\"NLP100\").setMaster(\"local[*]\"))\n\n  def main(args: Array[String]): Unit = {\n    runStage1()\n    runStage2()\n    runStage3()\n  }\n\n  /**\n    * 1. Wikipedia\u306e\u8a18\u4e8b\u3092\u8aad\u307f\u3053\u3093\u3067\u3001\u5358\u8a9e\u6587\u8108\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b\u3002 (81\u301c84)\n    * (100\u5206\u306e1\u30d5\u30a1\u30a4\u30eb\u306e\u5834\u5408\u30018\u5206\u7a0b\u5ea6\u3067\u5b8c\u4e86)\n    */\n  def runStage1(): Unit = {\n    sc.textFile(RAW_FILE)\n      .cleansData // 80. \u30b3\u30fc\u30d1\u30b9\u306e\u6574\u5f62\n      .replaceCombinedWord(COMBINED_WORDS) // 81. \u8907\u5408\u8a9e\u304b\u3089\u306a\u308b\u56fd\u540d\u3078\u306e\u5bfe\u51e6\n      .contexts // 82. \u6587\u8108\u306e\u62bd\u51fa\n      .map(_ -> 1L) // RDD[(String, String)]\u578b\u3092RDD[((String, String), Long)]\u578b\u306b\u5909\u63db\n      .sumByTC // 83.\u5358\u8a9e\uff0f\u6587\u8108\u306e\u983b\u5ea6\u306e\u8a08\u6e2c(\u5358\u8a9et\u3068\u6587\u8108\u8a9ec\u306e\u5171\u8d77\u56de\u6570(f(t,c))\u3092\u7b97\u51fa)\n      .contextMatrix // 83.\u5358\u8a9e\uff0f\u6587\u8108\u306e\u983b\u5ea6\u306e\u8a08\u6e2c(f(t,c)\u4ee5\u5916)\u3068\u300184.\u5358\u8a9e\u6587\u8108\u884c\u5217\u306e\u4f5c\u6210\n      .saveContextMatrix(CONTEXT_MATRIX) // \u5358\u8a9e\u6587\u8108\u884c\u5217\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3059\u308b\n  }\n\n  /**\n    * 2. \u5358\u8a9e\u6587\u8108\u884c\u5217\u306e\u6b21\u5143\u3092\u5727\u7e2e\u3057\u3066\u3001\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3002(85)\n    * (100\u5206\u306e1\u30d5\u30a1\u30a4\u30eb\u3092\u3055\u3089\u306b1/100\u3059\u308b\u3068\u3001\u5206\u3067\u5b8c\u4e86)\n    * (100\u5206\u306e1\u30d5\u30a1\u30a4\u30eb\u3092\u3055\u3089\u306b1/10\u3059\u308b\u3068\u300137\u5206\u3067\u5b8c\u4e86)\n    * (100\u5206\u306e1\u30d5\u30a1\u30a4\u30eb\u3092\u305d\u306e\u307e\u307e\u7a81\u3063\u8fbc\u3080\u3068\u30017\u6642\u959313\u5206\u3067\u5b8c\u4e86(00:23\u301c7:36))\n    */\n  def runStage2(): Unit = {\n    sc.textFile(CONTEXT_MATRIX) // \u5358\u8a9e\u6587\u8108\u884c\u5217\u3092\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u5fa9\u5143\n      .restoreContextMatrix // RDD[String]\u578b\u3092RDD[((String, String), Double)]\u578b\u306b\u5909\u63db\n      .wordVectors // \u6b21\u5143\u3092\u524a\u6e1b\u3057\u3066\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u5316\u3059\u308b\n      .saveWordVectors(WORD_VECTORS) // \u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3059\u308b\n  }\n\n  /**\n    * 3. \u4f5c\u6210\u3057\u305f\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3067\u904a\u3093\u3067\u307f\u308b\u3002(86\u301c89)\n    */\n  def runStage3(): Unit = {\n    val words = sc.textFile(WORD_VECTORS).restoreWordVectors\n\n    def cos(x: Array[Double], y: Array[Double]): Double = x.zip(y).map(xy => xy._1 * xy._2).sum\n\n    def vec(word: String): Array[Double] = words.vector(word).get\n\n    def plusVec(vec1: Array[Double], vec2: Array[Double]) = vec1.zip(vec2).map(v => v._1 + v._2)\n\n    def minusVec(vec1: Array[Double], vec2: Array[Double]) = vec1.zip(vec2).map(v => v._1 - v._2)\n\n    def printTopN(vec: Array[Double], n: Int = 10): Unit = {\n      val wordMap = words.collect.toMap\n\n      words\n        .map(x => x._1 -> cos(vec, wordMap(x._1))).collect.toList // \u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6\u306e\u4e00\u89a7\u3092\u4f5c\u6210\u3057\u3066\u30ea\u30b9\u30c8\u5316\n        .sortBy(_._2).reverse.slice(0, n) // \u30bd\u30fc\u30c8\u3057\u3066\u30c8\u30c3\u30d7N\u3092\u62bd\u51fa\n        .foreach(x => println(x._1 + \"\\t\" + \"%.8f\".format(x._2))) // \u8868\u793a\n    }\n\n    /**\n      * 86. \u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306e\u8868\u793a\n      *\n      * 85\u3067\u5f97\u305f\u5358\u8a9e\u306e\u610f\u5473\u30d9\u30af\u30c8\u30eb\u3092\u8aad\u307f\u8fbc\u307f\uff0c\"United States\"\u306e\u30d9\u30af\u30c8\u30eb\u3092\u8868\u793a\u305b\u3088\uff0e\n      * \u305f\u3060\u3057\uff0c\"United States\"\u306f\u5185\u90e8\u7684\u306b\u306f\"United_States\"\u3068\u8868\u73fe\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u305b\u3088\uff0e\n      */\n    println(\"86. \u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306e\u8868\u793a\")\n    println(vec(\"United_States\").mkString(\" \"))\n\n    /**\n      * 87. \u5358\u8a9e\u306e\u985e\u4f3c\u5ea6\n      *\n      * 85\u3067\u5f97\u305f\u5358\u8a9e\u306e\u610f\u5473\u30d9\u30af\u30c8\u30eb\u3092\u8aad\u307f\u8fbc\u307f\uff0c\"United States\"\u3068\"U.S.\"\u306e\u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6\u3092\u8a08\u7b97\u305b\u3088\uff0e\n      * \u305f\u3060\u3057\uff0c\"U.S.\"\u306f\u5185\u90e8\u7684\u306b\"U.S\"\u3068\u8868\u73fe\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u305b\u3088\uff0e\n      */\n    println(\"87. \u5358\u8a9e\u306e\u985e\u4f3c\u5ea6\")\n    println(cos(vec(\"United_States\"), vec(\"U.S\")))\n    println(cos(vec(\"United_Kingdom\"), vec(\"U.K\")))\n    println(cos(vec(\"England\"), vec(\"U.K\")))\n    println(cos(vec(\"United_Kingdom\"), vec(\"England\")))\n\n    /**\n      * 88. \u985e\u4f3c\u5ea6\u306e\u9ad8\u3044\u5358\u8a9e10\u4ef6\n      *\n      * 85\u3067\u5f97\u305f\u5358\u8a9e\u306e\u610f\u5473\u30d9\u30af\u30c8\u30eb\u3092\u8aad\u307f\u8fbc\u307f\uff0c\"England\"\u3068\u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6\u304c\u9ad8\u304410\u8a9e\u3068\uff0c\u305d\u306e\u985e\u4f3c\u5ea6\u3092\u51fa\u529b\u305b\u3088\uff0e\n      */\n    println(\"88. \u985e\u4f3c\u5ea6\u306e\u9ad8\u3044\u5358\u8a9e10\u4ef6\")\n    printTopN(vec(\"England\"), 20)\n    printTopN(vec(\"Obama\"), 20)\n    printTopN(vec(\"Japan\"), 20)\n\n    /**\n      * 89. \u52a0\u6cd5\u69cb\u6210\u6027\u306b\u3088\u308b\u30a2\u30ca\u30ed\u30b8\u30fc\n      *\n      * 85\u3067\u5f97\u305f\u5358\u8a9e\u306e\u610f\u5473\u30d9\u30af\u30c8\u30eb\u3092\u8aad\u307f\u8fbc\u307f\uff0cvec(\"Spain\") - vec(\"Madrid\") + vec(\"Athens\")\u3092\u8a08\u7b97\u3057\uff0c\u305d\u306e\u30d9\u30af\u30c8\u30eb\u3068\u985e\u4f3c\u5ea6\u306e\u9ad8\u304410\u8a9e\u3068\u305d\u306e\u985e\u4f3c\u5ea6\u3092\u51fa\u529b\u305b\u3088\uff0e\n      */\n    println(\"89. \u52a0\u6cd5\u69cb\u6210\u6027\u306b\u3088\u308b\u30a2\u30ca\u30ed\u30b8\u30fc\")\n    printTopN(plusVec(minusVec(vec(\"Spain\"), vec(\"Madrid\")), vec(\"Athens\")), 20)\n    printTopN(plusVec(minusVec(vec(\"England\"), vec(\"London\")), vec(\"Tokyo\")), 20)\n  }\n}\n\n\n\nWikiRDD.scala\npackage nlp100_9\n\nimport org.apache.spark.mllib.linalg.distributed.RowMatrix\nimport org.apache.spark.mllib.linalg.{Vector, Vectors}\nimport org.apache.spark.rdd.RDD\n\nimport scala.io.Source\n\nobject WikiRDD {\n  implicit def addWikiRDDString(rdd: RDD[String]): WikiRDDString = new WikiRDDString(rdd)\n\n  implicit def addWikiRDDLong(rdd: RDD[((String, String), Long)]): WikiRDDLong = new WikiRDDLong(rdd)\n\n  implicit def addWikiRDDDouble(rdd: RDD[((String, String), Double)]): WikiRDDDouble = new WikiRDDDouble(rdd)\n\n  implicit def addWikiRDDArray(rdd: RDD[(String, Array[Double])]): WikiRDDArray = new WikiRDDArray(rdd)\n}\n\n@SerialVersionUID(1L)\nclass WikiRDDString(rdd: RDD[String]) extends Serializable {\n\n  /**\n    * 80. \u30b3\u30fc\u30d1\u30b9\u306e\u6574\u5f62\n    *\n    * \u6587\u3092\u5358\u8a9e\u5217\u306b\u5909\u63db\u3059\u308b\u6700\u3082\u5358\u7d14\u306a\u65b9\u6cd5\u306f\uff0c\u7a7a\u767d\u6587\u5b57\u3067\u5358\u8a9e\u306b\u533a\u5207\u308b\u3053\u3068\u3067\u3042\u308b\uff0e \u305f\u3060\uff0c\u3053\u306e\u65b9\u6cd5\u3067\u306f\u6587\u672b\u306e\u30d4\u30ea\u30aa\u30c9\u3084\u62ec\u5f27\u306a\u3069\u306e\u8a18\u53f7\u304c\u5358\u8a9e\u306b\u542b\u307e\u308c\u3066\u3057\u307e\u3046\uff0e\n    * \u305d\u3053\u3067\uff0c\u30b3\u30fc\u30d1\u30b9\u306e\u5404\u884c\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u7a7a\u767d\u6587\u5b57\u3067\u30c8\u30fc\u30af\u30f3\u306e\u30ea\u30b9\u30c8\u306b\u5206\u5272\u3057\u305f\u5f8c\uff0c\u5404\u30c8\u30fc\u30af\u30f3\u306b\u4ee5\u4e0b\u306e\u51e6\u7406\u3092\u65bd\u3057\uff0c\u5358\u8a9e\u304b\u3089\u8a18\u53f7\u3092\u9664\u53bb\u305b\u3088\uff0e\n    * - \u30c8\u30fc\u30af\u30f3\u306e\u5148\u982d\u3068\u672b\u5c3e\u306b\u51fa\u73fe\u3059\u308b\u6b21\u306e\u6587\u5b57\u3092\u524a\u9664: .,!?;:()[]'\"\n    * - \u7a7a\u6587\u5b57\u5217\u3068\u306a\u3063\u305f\u30c8\u30fc\u30af\u30f3\u306f\u524a\u9664\n    *\n    * \u4ee5\u4e0a\u306e\u51e6\u7406\u3092\u9069\u7528\u3057\u305f\u5f8c\uff0c\u30c8\u30fc\u30af\u30f3\u3092\u30b9\u30da\u30fc\u30b9\u3067\u9023\u7d50\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u305b\u3088\uff0e\n    */\n  def cleansData: RDD[String] = {\n\n    // \u554f\u984c\u6587\u306e\u6307\u793a\u4ee5\u5916\u306b\u3082\u6c17\u306b\u306a\u3063\u305f\u30b4\u30df\u3092\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\n    def remove_garbage_char(word: String): String = {\n      val reg = \".,!?;:()\\\\[\\\\]\\\\'\\\\\\\"\u201c\u201d\"\n      word.replaceAll(\"^[%s]+|[%s]+$\".format(reg, reg), \"\")\n    }\n\n    rdd.map(sentence => (sentence split ' ').map(word => remove_garbage_char(word)).filter(word => !word.isEmpty).mkString(\" \"))\n  }\n\n  /**\n    * 81. \u8907\u5408\u8a9e\u304b\u3089\u306a\u308b\u56fd\u540d\u3078\u306e\u5bfe\u51e6\n    *\n    * \u82f1\u8a9e\u3067\u306f\uff0c\u8907\u6570\u306e\u8a9e\u306e\u9023\u63a5\u304c\u610f\u5473\u3092\u6210\u3059\u3053\u3068\u304c\u3042\u308b\uff0e\n    * \u4f8b\u3048\u3070\uff0c\u30a2\u30e1\u30ea\u30ab\u5408\u8846\u56fd\u306f\"United States\"\uff0c\u30a4\u30ae\u30ea\u30b9\u306f\"United Kingdom\"\u3068\u8868\u73fe\u3055\u308c\u308b\u304c\uff0c\"United\"\u3084\"States\"\uff0c\"Kingdom\"\u3068\u3044\u3046\u5358\u8a9e\u3060\u3051\u3067\u306f\uff0c\u6307\u3057\u793a\u3057\u3066\u3044\u308b\u6982\u5ff5\u30fb\u5b9f\u4f53\u304c\u66d6\u6627\u3067\u3042\u308b\uff0e\n    * \u305d\u3053\u3067\uff0c\u30b3\u30fc\u30d1\u30b9\u4e2d\u306b\u542b\u307e\u308c\u308b\u8907\u5408\u8a9e\u3092\u8a8d\u8b58\u3057\uff0c\u8907\u5408\u8a9e\u30921\u8a9e\u3068\u3057\u3066\u6271\u3046\u3053\u3068\u3067\uff0c\u8907\u5408\u8a9e\u306e\u610f\u5473\u3092\u63a8\u5b9a\u3057\u305f\u3044\uff0e\n    * \u3057\u304b\u3057\u306a\u304c\u3089\uff0c\u8907\u5408\u8a9e\u3092\u6b63\u78ba\u306b\u8a8d\u5b9a\u3059\u308b\u306e\u306f\u5927\u5909\u3080\u305a\u304b\u3057\u3044\u306e\u3067\uff0c\u3053\u3053\u3067\u306f\u8907\u5408\u8a9e\u304b\u3089\u306a\u308b\u56fd\u540d\u3092\u8a8d\u5b9a\u3057\u305f\u3044\uff0e\n    *\n    * \u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u4e0a\u304b\u3089\u56fd\u540d\u30ea\u30b9\u30c8\u3092\u5404\u81ea\u3067\u5165\u624b\u3057\uff0c80\u306e\u30b3\u30fc\u30d1\u30b9\u4e2d\u306b\u51fa\u73fe\u3059\u308b\u8907\u5408\u8a9e\u306e\u56fd\u540d\u306b\u95a2\u3057\u3066\uff0c\u30b9\u30da\u30fc\u30b9\u3092\u30a2\u30f3\u30c0\u30fc\u30d0\u30fc\u306b\u7f6e\u63db\u305b\u3088\uff0e\n    * \u4f8b\u3048\u3070\uff0c\"United States\"\u306f\"United_States\"\uff0c\"Isle of Man\"\u306f\"Isle_of_Man\"\u306b\u306a\u308b\u306f\u305a\u3067\u3042\u308b\uff0e\n    */\n  def replaceCombinedWord(fileName: String): RDD[String] = {\n    val combinedWordMap = Source.fromFile(fileName).getLines\n      .filter(_.split(' ').length > 1)\n      .map(combinedWord => (combinedWord, combinedWord.replace(' ', '_')))\n      .toMap\n\n    def replaceCombinedWords(sentence: String): String = {\n      var s = sentence\n      combinedWordMap.foreach {\n        combinedWord => s = s.replaceAll(combinedWord._1, combinedWord._2)\n      }\n      s\n    }\n\n    rdd.map(replaceCombinedWords)\n  }\n\n  /**\n    * 82. \u6587\u8108\u306e\u62bd\u51fa\n    *\n    * 81\u3067\u4f5c\u6210\u3057\u305f\u30b3\u30fc\u30d1\u30b9\u4e2d\u306b\u51fa\u73fe\u3059\u308b\u3059\u3079\u3066\u306e\u5358\u8a9et\u306b\u95a2\u3057\u3066\uff0c\u5358\u8a9et\u3068\u6587\u8108\u8a9ec\u306e\u30da\u30a2\u3092\u30bf\u30d6\u533a\u5207\u308a\u5f62\u5f0f\u3067\u3059\u3079\u3066\u66f8\u304d\u51fa\u305b\uff0e\n    * \u305f\u3060\u3057\uff0c\u6587\u8108\u8a9e\u306e\u5b9a\u7fa9\u306f\u6b21\u306e\u901a\u308a\u3068\u3059\u308b\uff0e\n    * - \u3042\u308b\u5358\u8a9et\u306e\u524d\u5f8cd\u5358\u8a9e\u3092\u6587\u8108\u8a9ec\u3068\u3057\u3066\u62bd\u51fa\u3059\u308b\uff08\u305f\u3060\u3057\uff0c\u6587\u8108\u8a9e\u306b\u5358\u8a9et\u305d\u306e\u3082\u306e\u306f\u542b\u307e\u306a\u3044\uff09\n    * - \u5358\u8a9et\u3092\u9078\u3076\u5ea6\u306b\uff0c\u6587\u8108\u5e45d\u306f{1,2,3,4,5}\u306e\u7bc4\u56f2\u3067\u30e9\u30f3\u30c0\u30e0\u306b\u6c7a\u3081\u308b\uff0e\n    */\n  def contexts: RDD[(String, String)] = {\n    def getContexts(sentence: String): List[(String, String)] = {\n      val words = sentence.split(' ')\n      words.zipWithIndex.map { case (word, index) =>\n        val d = scala.util.Random.nextInt(5) + 1\n        val from = List(0, index - d + 1).max\n        val to = List(index + d, sentence.length).min\n        val contexts = words.slice(from, index).toList ::: words.slice(index + 1, to).toList\n        contexts.map(context => (word, context))\n      }.toList.flatten\n    }\n    rdd.filter(_.nonEmpty).flatMap(getContexts)\n  }\n\n  def restoreContextMatrix: RDD[((String, String), Double)] = rdd.map(_.split(' ') match {\n    case Array(t: String, c: String, v: String) => t -> c -> v.toDouble\n  })\n\n  def restoreWordVectors: RDD[(String, Array[Double])] = rdd.map { x => val a = x.split(' '); a.head -> a.tail.map(_.toDouble) }\n}\n\nclass WikiRDDLong(rdd: RDD[((String, String), Long)]) {\n  /**\n    * 83. \u5358\u8a9e\uff0f\u6587\u8108\u306e\u983b\u5ea6\u306e\u8a08\u6e2c\n    *\n    * 82\u306e\u51fa\u529b\u3092\u5229\u7528\u3057\uff0c\u4ee5\u4e0b\u306e\u51fa\u73fe\u5206\u5e03\uff0c\u304a\u3088\u3073\u5b9a\u6570\u3092\u6c42\u3081\u3088\uff0e\n    *\n    * - f(t,c): \u5358\u8a9et\u3068\u6587\u8108\u8a9ec\u306e\u5171\u8d77\u56de\u6570\n    * - f(t,\u2217): \u5358\u8a9et\u306e\u51fa\u73fe\u56de\u6570\n    * - f(\u2217,c): \u6587\u8108\u8a9ec\u306e\u51fa\u73fe\u56de\u6570\n    * - N: \u5358\u8a9e\u3068\u6587\u8108\u8a9e\u306e\u30da\u30a2\u306e\u7dcf\u51fa\u73fe\u56de\u6570\n    */\n  //    // \u30e1\u30e2\u30ea\u4e0d\u8db3\u306e\u5834\u5408\u306f\u5358\u8a9et\u306e\u958b\u59cb\u6587\u5b57\u6bce\u306b\u30b7\u30fc\u30b1\u30f3\u30b7\u30e3\u30eb\u306b\u51e6\u7406\u3092\u9032\u3081\u308b\u3068\u826f\u3044\u3067\u3057\u3087\u3046\n  //    ('a' to 'z').foreach { c =>\n  //      val tempRDD = rdd.filter(x => x._1.startsWith(c.toString) || x._1.startsWith(c.toString.toUpperCase))\n  //      ...\n  //    }\n  //  }\n  def sumByTC: RDD[((String, String), Long)] = rdd.groupByKey.map { case (k, v) => k -> v.sum }\n\n  /**\n    * 84. \u5358\u8a9e\u6587\u8108\u884c\u5217\u306e\u4f5c\u6210\n    *\n    * 83\u306e\u51fa\u529b\u3092\u5229\u7528\u3057\uff0c\u5358\u8a9e\u6587\u8108\u884c\u5217X\u3092\u4f5c\u6210\u305b\u3088\uff0e\u305f\u3060\u3057\uff0c\u884c\u5217X\u306e\u5404\u8981\u7d20Xtc\u306f\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308b\uff0e\n    * f(t,c)\u226510\u306a\u3089\u3070\uff0cXtc=PPMI(t,c)=max{log(N\u00d7f(t,c) / f(t,\u2217)\u00d7f(\u2217,c)), 0}\n    * f(t,c)<10\u306a\u3089\u3070\uff0cXtc=0\n    * \u3053\u3053\u3067\uff0cPPMI(t,c)\u306fPositive Pointwise Mutual Information\uff08\u6b63\u306e\u76f8\u4e92\u60c5\u5831\u91cf\uff09\u3068\u547c\u3070\u308c\u308b\u7d71\u8a08\u91cf\u3067\u3042\u308b\uff0e\n    * \u306a\u304a\uff0c\u884c\u5217X\u306e\u884c\u6570\u30fb\u5217\u6570\u306f\u6570\u767e\u4e07\u30aa\u30fc\u30c0\u3068\u306a\u308a\uff0c\u884c\u5217\u306e\u3059\u3079\u3066\u306e\u8981\u7d20\u3092\u4e3b\u8a18\u61b6\u4e0a\u306b\u8f09\u305b\u308b\u3053\u3068\u306f\u7121\u7406\u306a\u306e\u3067\u6ce8\u610f\u3059\u308b\u3053\u3068\uff0e\n    * \u5e78\u3044\uff0c\u884c\u5217X\u306e\u307b\u3068\u3093\u3069\u306e\u8981\u7d20\u306f0\u306b\u306a\u308b\u306e\u3067\uff0c\u975e0\u306e\u8981\u7d20\u3060\u3051\u3092\u66f8\u304d\u51fa\u305b\u3070\u3088\u3044\uff0e\n    */\n  def contextMatrix: RDD[((String, String), Double)] = {\n    val rddTC = rdd.filter(_._2 >= 10)\n\n    // 83. \u5358\u8a9et\u306e\u51fa\u73fe\u56de\u6570: f(t,\u2217)\n    val mapT = rdd.map(x => x._1._1 -> x._2).groupByKey.map { case (k, v) => k -> v.sum }.collect.toMap\n\n    // 83. \u6587\u8108\u8a9ec\u306e\u51fa\u73fe\u56de\u6570: f(\u2217,c)\n    val mapC = rdd.map(x => x._1._2 -> x._2).groupByKey.map { case (k, v) => k -> v.sum }.collect.toMap\n\n    // 83. \u5358\u8a9e\u3068\u6587\u8108\u8a9e\u306e\u30da\u30a2\u306e\u7dcf\u51fa\u73fe\u56de\u6570\n    val n = rdd.count\n\n    // PPMI\u306e\u7b97\u51fa\n    // Xtc = PPMI(t,c) = max { log(N \u00d7 f(t,c) / f(t,\u2217) \u00d7 f(\u2217,c)), 0}\n    rddTC.map(x => x._1 -> Math.log(n * x._2 / (mapT(x._1._1) * mapC(x._1._2)))).filter(_._2 > 0)\n  }\n}\n\nclass WikiRDDDouble(rdd: RDD[((String, String), Double)]) {\n\n  def saveContextMatrix(fileName: String): Unit = {\n    rdd.map { case ((t: String, c: String), v: Double) => Array(t, c, v).mkString(\" \") }.saveAsTextFile(fileName)\n  }\n\n  /**\n    * 85. \u4e3b\u6210\u5206\u5206\u6790\u306b\u3088\u308b\u6b21\u5143\u5727\u7e2e\n    *\n    * 84\u3067\u5f97\u3089\u308c\u305f\u5358\u8a9e\u6587\u8108\u884c\u5217\u306b\u5bfe\u3057\u3066\uff0c\u4e3b\u6210\u5206\u5206\u6790\u3092\u9069\u7528\u3057\uff0c\u5358\u8a9e\u306e\u610f\u5473\u30d9\u30af\u30c8\u30eb\u3092300\u6b21\u5143\u306b\u5727\u7e2e\u305b\u3088\uff0e\n    */\n  def wordVectors: RDD[(String, Array[Double])] = {\n    // \u5358\u8a9e\u6587\u8108\u884c\u5217\u3092\u30de\u30c3\u30d7\u5316\n    val contextMap: Map[(String, String), Double] = rdd.collect.toMap\n\n    // \u4e00\u610f\u306a\u5358\u8a9ec\u306eRDD\n    val words: RDD[String] = rdd.keys.map(_._1).distinct\n\n    // \u4e00\u610f\u306a\u6587\u8108\u8a9ec\u306e\u914d\u5217\n    val contexts: Array[String] = rdd.keys.map(_._2).distinct.collect\n\n    // \u5358\u8a9e\u6587\u8108\u884c\u5217\u3092\u758e\u884c\u5217\u5316\n    val contextMatrix: RDD[Vector] = words.map(w => Vectors.dense(contexts.map(c => contextMap.getOrElse((w, c), 0.0))))\n\n    // \u7279\u7570\u5024\u5206\u89e3(SVD)\n    val svd = new RowMatrix(contextMatrix).computeSVD(300, computeU = true)\n\n    // \u7279\u7570\u5024\u5206\u89e3\u5f8c\u306eU\u3068\u03a3\u306e\u5185\u7a4d\n    val us: RowMatrix = multiplyMatrix(svd.U, svd.s)\n\n    words.zip(us.rows.map(_.toArray))\n  }\n\n  /**\n    * \u7279\u7570\u5024\u5206\u89e3\u5f8c\u306eU\u3068\u03a3\u306e\u5185\u7a4d\u3092\u7b97\u51fa\u3059\u308b\n    * https://github.com/sryza/aas/blob/master/ch06-lsa/src/main/scala/com/cloudera/datascience/lsa/RunLSA.scala#L131\n    * https://github.com/sryza/aas/blob/master/ch06-lsa/src/main/scala/com/cloudera/datascience/lsa/RunLSA.scala#L143\n    * \u304b\u3089\u30b3\u30d4\u30fc\n    */\n  def multiplyMatrix(mat: RowMatrix, diag: Vector): RowMatrix = {\n    val sArr: Array[Double] = diag.toArray\n    new RowMatrix(mat.rows.map(vec => {\n      val newArr: Array[Double] = (0 until vec.size).toArray.map(i => vec.toArray(i) * sArr(i))\n      val length = math.sqrt(newArr.map(x => x * x).sum)\n      Vectors.dense(newArr.map(_ / length))\n    }))\n  }\n}\n\nclass WikiRDDArray(rdd: RDD[(String, Array[Double])]) {\n  def saveWordVectors(fileName: String): Unit = {\n    rdd.map { case (t: String, v: Array[Double]) => List(t, v.mkString(\" \")).mkString(\" \") }.saveAsTextFile(fileName)\n  }\n\n  def vector(word: String): Option[Array[Double]] = {\n    val wordVector = rdd.filter(_._1 == word)\n    if (wordVector.isEmpty) {\n      None\n    } else {\n      Option(wordVector.first._2)\n    }\n  }\n}\n\n\n\n\u53c2\u8003\u6587\u732e\n\n\u5317\u91ce\u5742\u5099\u5fd8\u9332\n\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af \u7b2c9\u7ae0:\u30d9\u30af\u30c8\u30eb\u7a7a\u9593\u6cd5 (I) @yamano357\n\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb \u5fdc\u7528\u7de8\nApache Spark\u5165\u9580 \u52d5\u304b\u3057\u3066\u5b66\u3076\u6700\u65b0\u4e26\u5217\u5206\u6563\u51e6\u7406\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\n\n\u5ca9\u6ce2\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9 Vol.2 \u306e\u300c\u5358\u8a9e\u306e\u610f\u5473\u3092\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306b\u6559\u3048\u308b\u300d\n\nSpark\u306b\u3088\u308b\u5b9f\u8df5\u30c7\u30fc\u30bf\u89e3\u6790 \u2015\u5927\u898f\u6a21\u30c7\u30fc\u30bf\u306e\u305f\u3081\u306e\u6a5f\u68b0\u5b66\u7fd2\u4e8b\u4f8b\u96c6 \u306e\u300c6\u7ae0 \u6f5c\u5728\u610f\u5473\u89e3\u6790\u3092\u4f7f\u3063\u305fWikipedia\u306e\u7406\u89e3\u300d\n\u4e0a\u8a18\u300c6\u7ae0 \u6f5c\u5728\u610f\u5473\u89e3\u6790\u3092\u4f7f\u3063\u305fWikipedia\u306e\u7406\u89e3\u300d\u306e\u30b3\u30fc\u30c9\n\n\u203b Spark / Scala / \u81ea\u7136\u8a00\u8a9e\u51e6\u7406 \u306b\u8a73\u3057\u3044\u65b9\u3001\u5909\u306a\u3068\u3053\u308d\u304c\u3042\u308c\u3070\u30c4\u30c3\u30b3\u30df\u3092\u5165\u308c\u3066\u3044\u305f\u3060\u3051\u308b\u3068\u5927\u5909\u52a9\u304b\u308a\u307e\u3059\u3002\n# 0 \u306f\u3058\u3081\u306b\n\n[\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af](http://www.cl.ecei.tohoku.ac.jp/nlp100/)\u306f\u3001\u6771\u5317\u5927\u5b66\u306e\u4e7e\u30fb\u5ca1\u5d0e\u7814\u7a76\u5ba4\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u3001\u5b9f\u8df5\u7684\u306a\u8ab2\u984c\u306b\u53d6\u308a\u7d44\u307f\u306a\u304c\u3089\uff0c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\uff0c\u30c7\u30fc\u30bf\u5206\u6790\uff0c\u7814\u7a76\u306e\u30b9\u30ad\u30eb\u3092\u697d\u3057\u304f\u7fd2\u5f97\u3059\u308b\u3053\u3068\u3092\u76ee\u6307\u3057\u305f\u554f\u984c\u96c6\u3067\u3059\u3002\n\u3053\u308c\u307e\u3067\u306b\u3001\u300c[\u7b2c4\u7ae0 \u5f62\u614b\u7d20\u89e3\u6790](http://qiita.com/Masaaki_Inaba/items/eb33cf9a3bb79102ff5c)\u300d\u3001\u300c[\u7b2c5\u7ae0 \u4fc2\u308a\u53d7\u3051\u89e3\u6790](http://qiita.com/Masaaki_Inaba/items/18613a549edc68cb20ca)\u300d\u3001\u300c[\u7b2c8\u7ae0 \u6a5f\u68b0\u5b66\u7fd2](http://qiita.com/Masaaki_Inaba/items/ddb687daf9e67461a3f7)\u300d\u3092\u89e3\u3044\u3066\u304d\u307e\u3057\u305f\u3002\n\u5f15\u304d\u7d9a\u304d\u300c\u7b2c9\u7ae0 \u30d9\u30af\u30c8\u30eb\u7a7a\u9593\u6cd5 (I)\u300d\u3092\u9032\u3081\u3066\u3044\u304d\u307e\u3059\u3002\n\n### 0.1 \u3053\u306e\u7ae0\u3067\u3084\u308b\u3053\u3068\n\n> [enwiki-20150112-400-r10-105752.txt.bz2](http://www.cl.ecei.tohoku.ac.jp/nlp100/data/enwiki-20150112-400-r10-105752.txt.bz2)\u306f\uff0c2015\u5e741\u670812\u65e5\u6642\u70b9\u306e\u82f1\u8a9e\u306eWikipedia\u8a18\u4e8b\u306e\u3046\u3061\uff0c\u7d04400\u8a9e\u4ee5\u4e0a\u3067\u69cb\u6210\u3055\u308c\u308b\u8a18\u4e8b\u306e\u4e2d\u304b\u3089\uff0c\u30e9\u30f3\u30c0\u30e0\u306b1/10\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u305f105,752\u8a18\u4e8b\u306e\u30c6\u30ad\u30b9\u30c8\u3092bzip2\u5f62\u5f0f\u3067\u5727\u7e2e\u3057\u305f\u3082\u306e\u3067\u3042\u308b\uff0e\u3053\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u30b3\u30fc\u30d1\u30b9\u3068\u3057\u3066\uff0c\u5358\u8a9e\u306e\u610f\u5473\u3092\u8868\u3059\u30d9\u30af\u30c8\u30eb\uff08\u5206\u6563\u8868\u73fe\uff09\u3092\u5b66\u7fd2\u3057\u305f\u3044\uff0e\u7b2c9\u7ae0\u306e\u524d\u534a\u3067\u306f\uff0c\u30b3\u30fc\u30d1\u30b9\u304b\u3089\u4f5c\u6210\u3057\u305f\u5358\u8a9e\u6587\u8108\u5171\u8d77\u884c\u5217\u306b\u4e3b\u6210\u5206\u5206\u6790\u3092\u9069\u7528\u3057\uff0c\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3092\u5b66\u7fd2\u3059\u308b\u904e\u7a0b\u3092\uff0c\u3044\u304f\u3064\u304b\u306e\u51e6\u7406\u306b\u5206\u3051\u3066\u5b9f\u88c5\u3059\u308b\uff0e\u7b2c9\u7ae0\u306e\u5f8c\u534a\u3067\u306f\uff0c\u5b66\u7fd2\u3067\u5f97\u3089\u308c\u305f\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\uff08300\u6b21\u5143\uff09\u3092\u7528\u3044\uff0c\u5358\u8a9e\u306e\u985e\u4f3c\u5ea6\u8a08\u7b97\u3084\u30a2\u30ca\u30ed\u30b8\u30fc\uff08\u985e\u63a8\uff09\u3092\u884c\u3046\uff0e\n\n__\u8981\u3059\u308b\u306bword2vec\u3068\u4f3c\u305f\u3088\u3046\u306a\u52d5\u304d\u3092\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002__\nword2vec\u3063\u3066\u3044\u3046\u306e\u306f\u3001\u5358\u8a9e\u3092\u30d9\u30af\u30c8\u30eb\u3067\u8868\u73fe\u3057\u3066\u3001\u5358\u8a9e\u540c\u58eb\u306e\u8a08\u7b97\u3084\u6bd4\u8f03\u3092\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3001\u4f8b\u3048\u3070\u300c\u30a4\u30c1\u30ed\u30fc\u300d-\u300c\u91ce\u7403\u300d+\u300c\u672c\u7530\u300d=\u300c\u30b5\u30c3\u30ab\u30fc\u300d\u3068\u304b\u3084\u308b\u3084\u3064\u3067\u3059\u306d\u3002\nword2vec\u3092\u805e\u3044\u305f\u3053\u3068\u304c\u306a\u3044\u65b9\u306f\u3053\u306e\u8fba\u306e\u8a18\u4e8b([\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u306b\u65b0\u98a8\u3092\u5dfb\u304d\u8d77\u3053\u3057\u305fWord2Vec\u3068\u306f\u4f55\u304b](http://business.nikkeibp.co.jp/article/bigdata/20141110/273649/))\u306a\u3069\u3092\u8aad\u3093\u3067\u304a\u304f\u3068\u30a4\u30e1\u30fc\u30b8\u304c\u3064\u304f\u3068\u601d\u3044\u307e\u3059\u3002\nword2vec\u306b\u306f\u3001\u65e2\u306b[Google](https://code.google.com/archive/p/word2vec)\u3084[DL4J](http://deeplearning4j.org/ja-word2vec.html)\u306a\u3069\u306e\u5b9f\u88c5\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u306e\u7ae0\u3067\u306f\u3053\u308c\u3089\u3068\u4f3c\u305f\u3088\u3046\u306a\u52d5\u304d\u3092\u3059\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u81ea\u5206\u3067\u5b9f\u88c5\u3057\u3066\u3001word2vec\u304c\u4f55\u3092\u3084\u3063\u3066\u3044\u308b\u306e\u304b\u30a4\u30e1\u30fc\u30b8\u3092\u3064\u304b\u307f\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001\u6b21\u306e10\u7ae0\u3067\u306f\u3001Google\u306eword2vec\u3092\u4f7f\u3063\u3066\u30b4\u30cb\u30e7\u30b4\u30cb\u30e7\u3084\u308b\u3088\u3046\u3067\u3059\u3002\n\n### 0.2 \u5177\u4f53\u7684\u306b\u306f\u3001\u4e0b\u8a18\u306e\u3053\u3068\u3092\u884c\u3044\u307e\u3059\n\n1. Wikipedia\u306e\u8a18\u4e8b\u3092\u8aad\u307f\u3053\u3093\u3067\u3001\u5358\u8a9e\u6587\u8108\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b\u3002 (80\u301c84)\n2. \u5358\u8a9e\u6587\u8108\u884c\u5217\u306e\u6b21\u5143\u3092\u5727\u7e2e\u3057\u3066\u3001\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3002(85)\n3. \u4f5c\u6210\u3057\u305f\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3067\u904a\u3093\u3067\u307f\u308b\u3002(86\u301c89)\n\n### 0.3 \u30cf\u30de\u308a\u3069\u3053\u308d\n\n\u3053\u306e\u7ae0\u307e\u3067\u305f\u3069\u308a\u7740\u3044\u305f\u4eba\u306a\u3089\u3001\u554f\u984c\u6587\u306e\u610f\u5473\u3055\u3048\u7406\u89e3\u3067\u304d\u308c\u3070\u3001\u30b3\u30fc\u30c9\u306b\u843d\u3068\u3057\u8fbc\u3093\u3067\u3044\u304f\u3053\u3068\u81ea\u4f53\u306f\u305d\u308c\u307b\u3069\u96e3\u3057\u304f\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u305f\u3060\u3057\u5b9f\u884c\u3067\u304d\u307e\u305b\u3093\u3002\n\u30c7\u30fc\u30bf\u91cf\u304c\u5927\u304d\u3059\u304e\u308b\u3093\u3067\u3059\u3002\n\u554f\u984c\u6587\u306b\u306f\n> \u306a\u304a\uff0c\u554f\u984c83\u3092\u7d20\u76f4\u306b\u5b9f\u88c5\u3059\u308b\u3068\uff0c\u5927\u91cf\uff08\u7d047GB\uff09\u306e\u4e3b\u8a18\u61b6\u304c\u5fc5\u8981\u306b\u306a\u308b\uff0e \u30e1\u30e2\u30ea\u304c\u4e0d\u8db3\u3059\u308b\u5834\u5408\u306f\uff0c\u51e6\u7406\u3092\u5de5\u592b\u3059\u308b\u304b\uff0c1/100\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306e\u30b3\u30fc\u30d1\u30b9[enwiki-20150112-400-r100-10576.txt.bz2](http://www.cl.ecei.tohoku.ac.jp/nlp100/data/enwiki-20150112-400-r100-10576.txt.bz2)\u3092\u7528\u3044\u3088\uff0e\n\n\u3068\u3042\u308a\u307e\u3059\u3002\n\u3053\u3046\u66f8\u304b\u308c\u308b\u3068\u51e6\u7406\u306e\u5de5\u592b\u3067\u306a\u3093\u3068\u304b\u3057\u305f\u304f\u306a\u308a\u307e\u3059\u3088\u306d\u3002\n\u79c1\u306e\u5834\u5408\u306f\u300184\u307e\u3067\u306f\u51e6\u7406\u306e\u5de5\u592b\u3067\u306a\u3093\u3068\u304b\u306a\u3063\u305f\u3093\u3067\u3059\u304c\u3001100\u672c\u30ce\u30c3\u30af\u6700\u5927\u306e\u96e3\u95a2\u3068\u3044\u3046\u5642\u3082\u3042\u308b\u300c85. \u4e3b\u6210\u5206\u5206\u6790\u306b\u3088\u308b\u6b21\u5143\u5727\u7e2e\u300d\u306b\u95a2\u3057\u3066\u306f\u3001\u8a66\u884c\u932f\u8aa4\u3057\u3066\u307f\u305f\u3082\u306e\u306e\u6b6f\u304c\u7acb\u305f\u305a\u3001\u7279\u7570\u5024\u5206\u89e3\u3067\u4ee3\u66ff\u3057\u307e\u3057\u305f\u3002\n\u7279\u7570\u5024\u5206\u89e3\u3067\u3001\u304b\u3064\u30011/100\u30b3\u30fc\u30d1\u30b9\u3067\u308285\u3092\u5b9f\u884c\u3059\u308b\u306b\u306f7\u6642\u9593\u3050\u3089\u3044\u304b\u304b\u308a\u307e\u3057\u305f\u3002\n\u30de\u30b7\u30f3\u306e\u30b9\u30da\u30c3\u30af\u3068\u3069\u308c\u3060\u3051\u52b9\u7387\u306e\u3088\u3044\u30ed\u30b8\u30c3\u30af\u3092\u8003\u3048\u3089\u308c\u308b\u304b\u6b21\u7b2c\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u307e\u305a\u306f\u300c1/100\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306e\u30b3\u30fc\u30d1\u30b9\u300d\u3067\u6700\u5f8c\u307e\u3067\u901a\u3057\u3066\u5b9f\u88c5\u3057\u3066\u307f\u308b\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002\n\u305d\u306e\u5f8c\u3001\u4f59\u88d5\u304c\u3042\u308c\u30701/10\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30c7\u30fc\u30bf\u306b\u6311\u6226\u3057\u3066\u307f\u308b\u3068\u826f\u3044\u3067\u3057\u3087\u3046\u3002\n\n### 0.4 \u5b9f\u884c\u74b0\u5883/\u30c4\u30fc\u30eb\n\n\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3068\u3057\u3066\u306f\u3001CPU: 2.8GHz Intel Core i7 / \u30e1\u30e2\u30ea: 16GB \u306eMacBookPro\u3092\u3001\n\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3068\u3057\u3066\u306f\u3001Spark\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002([Apache Spark\u3068\u306f\uff1f\uff1aHadoop\u306b\u7d9a\u304f\u5206\u6563\u51e6\u7406\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af](http://www.graffe.jp/blog/1710/))\n\u6700\u521d\u306fSpark\u3092\u4f7f\u308f\u305a\u306b\u666e\u901a\u306bPython\u3067\u9032\u3081\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u300c83. \u5358\u8a9e\uff0f\u6587\u8108\u306e\u983b\u5ea6\u306e\u8a08\u6e2c\u300d\u8fba\u308a\u3067\u3001\u30d5\u30a1\u30a4\u30eb\u306b\u5b9f\u884c\u7d50\u679c\u3092\u4fdd\u5b58\u3059\u308b\u3060\u3051\u30672\u6642\u9593\u4ee5\u4e0a\u304b\u304b\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u3001\u3042\u308c\u3053\u308c\u8a66\u884c\u932f\u8aa4\u3057\u305f\u3042\u3052\u304f\u3001Spark\u3092\u4f7f\u3046\u306b\u81f3\u308a\u307e\u3057\u305f\u3002Spark\u306a\u3089\u6570\u5206\u3067\u7d42\u308f\u308a\u307e\u3059\u3002Spark\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u591a\u304f\u304cScala\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u3053\u3068\u304b\u3089\u3001\u5b9f\u88c5\u8a00\u8a9e\u3082Scala\u306b\u5207\u308a\u66ff\u3048\u307e\u3057\u305f\u3002(Spark\u306b\u306fPython\u5411\u3051\u306eAPI\u3082\u3042\u308a\u307e\u3059\u3002)\n\n### 0.5 \u5168\u4f53\u69cb\u6210\n\n```bash:Tree\u30b3\u30de\u30f3\u30c9\n$ tree ./src\n./src\n\u2514\u2500\u2500 main\n\u00a0\u00a0\u00a0 \u251c\u2500\u2500 resources\n\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 combined_words.txt\n\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 context_matrix\n\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 enwiki-20150112-400-r10-105752.txt\n\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 enwiki-20150112-400-r100-10576.txt\n\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 word_vectors\n\u00a0\u00a0\u00a0 \u2514\u2500\u2500 scala\n\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u2514\u2500\u2500 nlp100_9\n\u00a0\u00a0 \u00a0\u00a0\u00a0      \u251c\u2500\u2500 Main.scala\n   \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0  \u2514\u2500\u2500 WikiRDD.scala\n```\n\nMain.scala\u306emain\u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u304b\u3089\u3001\n\n- runStage1() Wikipedia\u306e\u8a18\u4e8b\u3092\u8aad\u307f\u3053\u3093\u3067\u3001\u5358\u8a9e\u6587\u8108\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b\u3002 (80\u301c84)\n- runStage2() \u5358\u8a9e\u6587\u8108\u884c\u5217\u306e\u6b21\u5143\u3092\u5727\u7e2e\u3057\u3066\u3001\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3002(85)\n- runStage3() \u4f5c\u6210\u3057\u305f\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3067\u904a\u3093\u3067\u307f\u308b\u3002(86\u301c89)\n\n\u3092\u9806\u306b\u547c\u3073\u51fa\u3057\u3066\u884c\u304d\u307e\u3059\u3002\n\n```scala:Main.scala\npackage nlp100_9\n\nimport org.apache.spark._\nimport nlp100_9.WikiRDD._\n\nobject Main {\n  val RAW_FILE = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/enwiki-20150112-400-r100-10576.txt\"\n  val COMBINED_WORDS = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/combined_words.txt\"\n  val CONTEXT_MATRIX = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/context_matrix\"\n  val WORD_VECTORS = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/word_vectors\"\n  val sc = new SparkContext(new SparkConf().setAppName(\"NLP100\").setMaster(\"local[*]\"))\n\n  def main(args: Array[String]): Unit = {\n    runStage1()\n    runStage2()\n    runStage3()\n  }\n```\n\n\u30b3\u30fc\u30c9\u3092\u90fd\u5ea6\u3082\u308c\u306a\u304f\u63b2\u8f09\u3059\u308b\u3068\u8aad\u307f\u306b\u304f\u305d\u3046\u306a\u306e\u3067\u3001\u8aac\u660e\u306e\u9014\u4e2d\u3067\u306f\u3001\u305d\u306e\u554f\u984c\u3092\u89e3\u306b\u76f4\u63a5\u95a2\u4fc2\u3059\u308b\u65ad\u7247\u306e\u307f\u8a18\u8f09\u3057\u3001\u30b3\u30fc\u30c9\u306e\u5168\u4f53\u306f\u6700\u5f8c\u306b\u307e\u3068\u3081\u3066\u8a18\u8f09\u3057\u3066\u3044\u307e\u3059\u3002\n\n# 1 Wikipedia\u306e\u8a18\u4e8b\u3092\u8aad\u307f\u3053\u3093\u3067\u3001\u5358\u8a9e\u6587\u8108\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b\u3002 (80\u301c84)\n\n\u30e1\u30bd\u30c3\u30c9runStage1()\u304b\u308980\u301c84\u306e\u5b9f\u88c5\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\n\n```scala:Main.scala\n  /**\n    * 1. Wikipedia\u306e\u8a18\u4e8b\u3092\u8aad\u307f\u3053\u3093\u3067\u3001\u5358\u8a9e\u6587\u8108\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b\u3002 (80\u301c84)\n    * (100\u5206\u306e1\u30d5\u30a1\u30a4\u30eb\u306e\u5834\u5408\u30018\u5206\u7a0b\u5ea6\u3067\u5b8c\u4e86)\n    */\n  def runStage1(): Unit = {\n    sc.textFile(RAW_FILE)\n      .cleansData                          // 80. \u30b3\u30fc\u30d1\u30b9\u306e\u6574\u5f62\n      .replaceCombinedWord(COMBINED_WORDS) // 81. \u8907\u5408\u8a9e\u304b\u3089\u306a\u308b\u56fd\u540d\u3078\u306e\u5bfe\u51e6\n      .contexts                            // 82. \u6587\u8108\u306e\u62bd\u51fa\n      .map(_ -> 1L)                        // RDD[(String, String)]\u578b\u3092RDD[((String, String), Long)]\u578b\u306b\u5909\u63db\n      .sumByTC                             // 83.\u5358\u8a9e\uff0f\u6587\u8108\u306e\u983b\u5ea6\u306e\u8a08\u6e2c(\u5358\u8a9et\u3068\u6587\u8108\u8a9ec\u306e\u5171\u8d77\u56de\u6570(f(t,c))\u3092\u7b97\u51fa)\n      .contextMatrix                       // 83.\u5358\u8a9e\uff0f\u6587\u8108\u306e\u983b\u5ea6\u306e\u8a08\u6e2c(f(t,c)\u4ee5\u5916)\u3068\u300184.\u5358\u8a9e\u6587\u8108\u884c\u5217\u306e\u4f5c\u6210\n      .saveContextMatrix(CONTEXT_MATRIX)   // \u5358\u8a9e\u6587\u8108\u884c\u5217\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3059\u308b\n  }\n```\n\n\u6642\u9593\u304c\u3082\u3063\u305f\u3044\u306a\u3044\u306e\u3067\u3001\u4f59\u8a08\u306a\u30d5\u30a1\u30a4\u30eb\u4fdd\u5b58\u306f\u884c\u308f\u305a\u306b\u300180\u301c84\u307e\u3067\u4e00\u6c17\u306b\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5b9f\u969b\u306e\u51e6\u7406\u306fWikiRDD.scala\u306b\u8a18\u8ff0\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u3061\u306a\u307f\u306b\u3001RDD\u3063\u3066\u3044\u3046\u306e\u306fSpark\u304c\u63d0\u4f9b\u3057\u3066\u3044\u308bList\u307f\u305f\u3044\u306a\u3082\u3093\u3067\u3059\u3002\u88cf\u3067\u4e0a\u624b\u304f\u9045\u5ef6\u8a55\u4fa1\uff0b\u5206\u6563\u51e6\u7406\u3057\u3066\u304f\u308c\u308b\u3068\u3053\u308d\u304cList\u3068\u306e\u4e3b\u306a\u9055\u3044\u3067\u3059\u3002(\u53c2\u8003:[RDD\u306b\u3064\u3044\u3066\u7c21\u5358\u306b\u307e\u3068\u3081\u3066\u307f\u305f](http://dev.classmethod.jp/etc/apache-spark_rdd_investigation/))\n\n## 80. \u30b3\u30fc\u30d1\u30b9\u306e\u6574\u5f62\n\n> \u6587\u3092\u5358\u8a9e\u5217\u306b\u5909\u63db\u3059\u308b\u6700\u3082\u5358\u7d14\u306a\u65b9\u6cd5\u306f\uff0c\u7a7a\u767d\u6587\u5b57\u3067\u5358\u8a9e\u306b\u533a\u5207\u308b\u3053\u3068\u3067\u3042\u308b\uff0e \u305f\u3060\uff0c\u3053\u306e\u65b9\u6cd5\u3067\u306f\u6587\u672b\u306e\u30d4\u30ea\u30aa\u30c9\u3084\u62ec\u5f27\u306a\u3069\u306e\u8a18\u53f7\u304c\u5358\u8a9e\u306b\u542b\u307e\u308c\u3066\u3057\u307e\u3046\uff0e\n> \u305d\u3053\u3067\uff0c\u30b3\u30fc\u30d1\u30b9\u306e\u5404\u884c\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u7a7a\u767d\u6587\u5b57\u3067\u30c8\u30fc\u30af\u30f3\u306e\u30ea\u30b9\u30c8\u306b\u5206\u5272\u3057\u305f\u5f8c\uff0c\u5404\u30c8\u30fc\u30af\u30f3\u306b\u4ee5\u4e0b\u306e\u51e6\u7406\u3092\u65bd\u3057\uff0c\u5358\u8a9e\u304b\u3089\u8a18\u53f7\u3092\u9664\u53bb\u305b\u3088\uff0e\n> \n> - \u30c8\u30fc\u30af\u30f3\u306e\u5148\u982d\u3068\u672b\u5c3e\u306b\u51fa\u73fe\u3059\u308b\u6b21\u306e\u6587\u5b57\u3092\u524a\u9664: .,!?;:()[]'\"\n> - \u7a7a\u6587\u5b57\u5217\u3068\u306a\u3063\u305f\u30c8\u30fc\u30af\u30f3\u306f\u524a\u9664\n> \n> \u4ee5\u4e0a\u306e\u51e6\u7406\u3092\u9069\u7528\u3057\u305f\u5f8c\uff0c\u30c8\u30fc\u30af\u30f3\u3092\u30b9\u30da\u30fc\u30b9\u3067\u9023\u7d50\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u305b\u3088\uff0e\n\n\u3053\u308c\u306f\u554f\u984c\u7121\u3044\u3067\u3059\u306d\u3002\u554f\u984c\u6587\u306e\u6307\u793a\u4ee5\u5916\u306b\u3082\u5e7e\u3064\u304b\u6c17\u306b\u306a\u3063\u305f\u30b4\u30df\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u524a\u9664\u5bfe\u8c61\u6587\u5b57\u3092\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\n\n```scala:WikiRDD.scala\nclass WikiRDDString(rdd: RDD[String]) extends Serializable {\n  def cleansData: RDD[String] = {\n\n    def remove_garbage_char(word: String): String = {\n      val reg = \".,!?;:()\\\\[\\\\]\\\\'\\\\\\\"\u201c\u201d\"\n      word.replaceAll(\"^[%s]+|[%s]+$\".format(reg, reg), \"\")\n    }\n\n    rdd.map(sentence => (sentence split ' ').map(word => remove_garbage_char(word)).filter(word => !word.isEmpty).mkString(\" \"))\n  }\n```\n\n## 81. \u8907\u5408\u8a9e\u304b\u3089\u306a\u308b\u56fd\u540d\u3078\u306e\u5bfe\u51e6\n\n> \u82f1\u8a9e\u3067\u306f\uff0c\u8907\u6570\u306e\u8a9e\u306e\u9023\u63a5\u304c\u610f\u5473\u3092\u6210\u3059\u3053\u3068\u304c\u3042\u308b\uff0e\n> \u4f8b\u3048\u3070\uff0c\u30a2\u30e1\u30ea\u30ab\u5408\u8846\u56fd\u306f\"United States\"\uff0c\u30a4\u30ae\u30ea\u30b9\u306f\"United Kingdom\"\u3068\u8868\u73fe\u3055\u308c\u308b\u304c\uff0c\"United\"\u3084\"States\"\uff0c\"Kingdom\"\u3068\u3044\u3046\u5358\u8a9e\u3060\u3051\u3067\u306f\uff0c\u6307\u3057\u793a\u3057\u3066\u3044\u308b\u6982\u5ff5\u30fb\u5b9f\u4f53\u304c\u66d6\u6627\u3067\u3042\u308b\uff0e\n> \u305d\u3053\u3067\uff0c\u30b3\u30fc\u30d1\u30b9\u4e2d\u306b\u542b\u307e\u308c\u308b\u8907\u5408\u8a9e\u3092\u8a8d\u8b58\u3057\uff0c\u8907\u5408\u8a9e\u30921\u8a9e\u3068\u3057\u3066\u6271\u3046\u3053\u3068\u3067\uff0c\u8907\u5408\u8a9e\u306e\u610f\u5473\u3092\u63a8\u5b9a\u3057\u305f\u3044\uff0e\n> \u3057\u304b\u3057\u306a\u304c\u3089\uff0c\u8907\u5408\u8a9e\u3092\u6b63\u78ba\u306b\u8a8d\u5b9a\u3059\u308b\u306e\u306f\u5927\u5909\u3080\u305a\u304b\u3057\u3044\u306e\u3067\uff0c\u3053\u3053\u3067\u306f\u8907\u5408\u8a9e\u304b\u3089\u306a\u308b\u56fd\u540d\u3092\u8a8d\u5b9a\u3057\u305f\u3044\uff0e\n> \n> \u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u4e0a\u304b\u3089\u56fd\u540d\u30ea\u30b9\u30c8\u3092\u5404\u81ea\u3067\u5165\u624b\u3057\uff0c80\u306e\u30b3\u30fc\u30d1\u30b9\u4e2d\u306b\u51fa\u73fe\u3059\u308b\u8907\u5408\u8a9e\u306e\u56fd\u540d\u306b\u95a2\u3057\u3066\uff0c\u30b9\u30da\u30fc\u30b9\u3092\u30a2\u30f3\u30c0\u30fc\u30d0\u30fc\u306b\u7f6e\u63db\u305b\u3088\uff0e\n> \u4f8b\u3048\u3070\uff0c\"United States\"\u306f\"United_States\"\uff0c\"Isle of Man\"\u306f\"Isle_of_Man\"\u306b\u306a\u308b\u306f\u305a\u3067\u3042\u308b\uff0e\n\n\u307e\u3060\u6016\u3044\u8a00\u8449\u306f\u51fa\u3066\u304d\u3066\u306a\u3044\u3067\u3059\u306d\u3002\nhttp://www.listofcountriesoftheworld.com/ \u3092\u30b3\u30d4\u30fc\u3057\u3066`combined_words.txt`\u3068\u3057\u3066\u4fdd\u5b58\u3057\u3066\u304a\u3044\u3066\u3001\u4e0b\u8a18\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\u56fd\u540d\u3060\u3051\u3058\u3083\u306a\u304f\u5730\u540d\u30fb\u4eba\u540d\u306a\u3069\u3082\u6c17\u306b\u306f\u306a\u308a\u307e\u3059\u304c\u3001\u3042\u307e\u308a\u3053\u3060\u308f\u3089\u305a\u306b\u5148\u306b\u9032\u3093\u3060\u307b\u3046\u304c\u5409\u3067\u3059\u3002\n\n```scala:WikiRDD.scala\nclass WikiRDDString(rdd: RDD[String]) extends Serializable {\n  (\u4e2d\u7565)\n  def replaceCombinedWord(fileName: String): RDD[String] = {\n    val combinedWordMap = Source.fromFile(fileName).getLines\n      .filter(_.split(' ').length > 1)\n      .map(combinedWord => (combinedWord, combinedWord.replace(' ', '_')))\n      .toMap\n\n    def replaceCombinedWords(sentence: String): String = {\n      var s = sentence\n      combinedWordMap.foreach {\n        combinedWord => s = s.replaceAll(combinedWord._1, combinedWord._2)\n      }\n      s\n    }\n\n    rdd.map(replaceCombinedWords)\n  }\n```\n\n## 82. \u6587\u8108\u306e\u62bd\u51fa\n\n> 81\u3067\u4f5c\u6210\u3057\u305f\u30b3\u30fc\u30d1\u30b9\u4e2d\u306b\u51fa\u73fe\u3059\u308b\u3059\u3079\u3066\u306e\u5358\u8a9et\u306b\u95a2\u3057\u3066\uff0c\u5358\u8a9et\u3068\u6587\u8108\u8a9ec\u306e\u30da\u30a2\u3092\u30bf\u30d6\u533a\u5207\u308a\u5f62\u5f0f\u3067\u3059\u3079\u3066\u66f8\u304d\u51fa\u305b\uff0e\n> \u305f\u3060\u3057\uff0c\u6587\u8108\u8a9e\u306e\u5b9a\u7fa9\u306f\u6b21\u306e\u901a\u308a\u3068\u3059\u308b\uff0e\n> \n> - \u3042\u308b\u5358\u8a9et\u306e\u524d\u5f8cd\u5358\u8a9e\u3092\u6587\u8108\u8a9ec\u3068\u3057\u3066\u62bd\u51fa\u3059\u308b\uff08\u305f\u3060\u3057\uff0c\u6587\u8108\u8a9e\u306b\u5358\u8a9et\u305d\u306e\u3082\u306e\u306f\u542b\u307e\u306a\u3044\uff09\n> - \u5358\u8a9et\u3092\u9078\u3076\u5ea6\u306b\uff0c\u6587\u8108\u5e45d\u306f{1,2,3,4,5}\u306e\u7bc4\u56f2\u3067\u30e9\u30f3\u30c0\u30e0\u306b\u6c7a\u3081\u308b\uff0e\n\n\u96e3\u3057\u3044\u8a00\u8449\u306f\u51fa\u3066\u3053\u306a\u3044\u3082\u306e\u306e\u3001\u4f55\u306e\u305f\u3081\u306b\u3053\u3093\u306a\u3053\u3068\u3092\u3059\u308b\u306e\u304b\u610f\u56f3\u306e\u7406\u89e3\u306b\u82e6\u3057\u3080\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u3042\u308b\u5358\u8a9e\u304c\u3069\u3046\u3044\u3063\u305f\u6587\u8108\u3067\u4f7f\u308f\u308c\u308b\u3053\u3068\u304c\u591a\u3044\u306e\u304b\u3092\u8abf\u3079\u308b\u3068\u3044\u3046\u306e\u304c\u3084\u308a\u305f\u3044\u3053\u3068\u3067\u3059\u3002\n\u3067\u3001\u305d\u306e\u6587\u8108\u3063\u3066\u306e\u3092\u3069\u3046\u3044\u3046\u98a8\u306b\u5224\u65ad\u3059\u308b\u304b\u306b\u8272\u3005\u306a\u3084\u308a\u65b9\u304c\u3042\u308b\u3063\u307d\u3044\u3093\u3067\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u30e9\u30f3\u30c0\u30e0\u306b\u524d\u5f8c1\u301c5\u8a9e\u3092\u53d6\u3063\u3066\u304d\u3066\u6587\u8108\u3068\u3057\u3088\u3046\u3068\u8a00\u3063\u3066\u3044\u308b\u308f\u3051\u3067\u3059\u3002\n\n\u4f8b\u3048\u3070\u3001\u300cWikipedia is an Internet encyclopedia, supported and hosted by the non-profit Wikimedia Foundation.\u300d\u3068\u3044\u3046\u6587\u7ae0\u304c\u3042\u3063\u305f\u3068\u3057\u305f\u3089\u3001\u3053\u306e\u554f\u984c\u3067\u5f97\u305f\u3044\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u306f\u3001\u4e0b\u8a18\u306e\u69d8\u306a\u30bf\u30d6\u533a\u5207\u308a\u306e\u6587\u5b57\u5217\u306b\u306a\u308a\u307e\u3059\u3002\uff08\u4e0b\u8a18\u306e\u4f8b\u3067\u306f\u6587\u8108\u5e45\u306f\u9806\u306b\u30013, 1, 5 \u3067\u3042\u308b\u3068\u4eee\u5b9a\u3057\u3066\u3044\u307e\u3059\uff09\n\n```scala:82\u306e\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u30a4\u30e1\u30fc\u30b8\nWikipedia is\nWikipedia an\nWikipedia Internet\nis Wikipedia\nis an\nan Wikipedia\nan is\nan Internet\nan encyclopedia\nan supprted\nan and\nan hosted\n(\u4ee5\u4e0b\u7565)\n```\n\n```scala:WikiRDD.scala\nclass WikiRDDString(rdd: RDD[String]) extends Serializable {\n  (\u4e2d\u7565)\n  def contexts: RDD[(String, String)] = {\n    def getContexts(sentence: String): List[(String, String)] = {\n      val words = sentence.split(' ')\n      words.zipWithIndex.map { case (word, index) =>\n        val d = scala.util.Random.nextInt(5) + 1      // \u6587\u8108\u5e45\n        val from = List(0, index - d + 1).max         // \u6587\u8108\u5e45\u304c0\u3088\u308a\u524d\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u6ce8\u610f!\n        val to = List(index + d, sentence.length).min // \u6587\u8108\u5e45\u304c\u6587\u7ae0\u306e\u672b\u5c3e\u3088\u308a\u5f8c\u308d\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u6ce8\u610f!\n        val contexts = words.slice(from, index).toList ::: words.slice(index + 1, to).toList\n        contexts.map(context => (word, context))\n      }.toList.flatten\n    }\n    rdd.filter(_.nonEmpty).flatMap(getContexts)\n  }\n```\n\n## 83. \u5358\u8a9e\uff0f\u6587\u8108\u306e\u983b\u5ea6\u306e\u8a08\u6e2c\n\n> 82\u306e\u51fa\u529b\u3092\u5229\u7528\u3057\uff0c\u4ee5\u4e0b\u306e\u51fa\u73fe\u5206\u5e03\uff0c\u304a\u3088\u3073\u5b9a\u6570\u3092\u6c42\u3081\u3088\uff0e\n>\n> - f(t,c): \u5358\u8a9et\u3068\u6587\u8108\u8a9ec\u306e\u5171\u8d77\u56de\u6570\n> - f(t,\u2217): \u5358\u8a9et\u306e\u51fa\u73fe\u56de\u6570\n> - f(\u2217,c): \u6587\u8108\u8a9ec\u306e\u51fa\u73fe\u56de\u6570\n> - N: \u5358\u8a9e\u3068\u6587\u8108\u8a9e\u306e\u30da\u30a2\u306e\u7dcf\u51fa\u73fe\u56de\u6570\n\n83\u3067\u3084\u308a\u305f\u3044\u3053\u3068\u3092SQL\u3067\u3044\u3046\u3068\u4e0b\u8a18\u306e\u69d8\u306b\u306a\u308a\u307e\u3059\u3002\u672c\u5f53\u306bSQL\u3092\u4f7f\u3046\u8a33\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3042\u304f\u307e\u3067\u30a4\u30e1\u30fc\u30b8\u3067\u3059\u3002\n\n```83\u3067\u3084\u308a\u305f\u3044\u3053\u3068\u3092SQL\u3067\u3044\u3046\u3068\n# 82\u306e\u51fa\u529b\u7d50\u679c\u306eDDL\nCREATE TABLE word_context (\n  word VARCHAR,\n  context VARCHAR\n);\n\n# f(t,c): \u5358\u8a9et\u3068\u6587\u8108\u8a9ec\u306e\u5171\u8d77\u56de\u6570\nSELECT word, context, COUNT(*) FROM word_context GROUP BY word, context;\n\n# f(t,\u2217): \u5358\u8a9et\u306e\u51fa\u73fe\u56de\u6570\nSELECT word, COUNT(*) FROM word_context GROUP BY word;\n\n# f(\u2217,c): \u6587\u8108\u8a9ec\u306e\u51fa\u73fe\u56de\u6570\nSELECT context, COUNT(*) FROM word_context GROUP BY context;\n\n# N: \u5358\u8a9e\u3068\u6587\u8108\u8a9e\u306e\u30da\u30a2\u306e\u7dcf\u51fa\u73fe\u56de\u6570\nSELECT COUNT(*) FROM word_context;\n```\n\n\u3053\u308c\u3092Scala\u3067\u66f8\u304f\u308f\u3051\u3067\u3059\u304c\u3001\u300cf(t,c): \u5358\u8a9et\u3068\u6587\u8108\u8a9ec\u306e\u5171\u8d77\u56de\u6570\u300d\u4ee5\u5916\u306f84\u3067\u3084\u3063\u3066\u3057\u307e\u3063\u305f\u307b\u3046\u304c\u52b9\u7387\u304c\u826f\u3044\u306e\u3067\u3001\u3053\u3053\u3067\u306ff(t,c)\u3060\u3051\u51fa\u3057\u307e\u3059\u3002\n\n```scala:WikiRDD.scala\nclass WikiRDDLong(rdd: RDD[((String, String), Long)]) {\n  def sumByTC: RDD[((String, String), Long)] = rdd.groupByKey.map { case (k, v) => k -> v.sum }\n```\n\n\u3061\u3087\u3063\u3068\u3053\u3053\u3060\u3051\u898b\u308b\u3068\u8b0e\u304b\u3082\u77e5\u308c\u307e\u305b\u3093\u304c\u3001\u6700\u5f8c\u306b\u30b3\u30fc\u30c9\u306e\u5168\u4f53\u50cf\u3092\u8f09\u305b\u3066\u3044\u308b\u306e\u3067\u78ba\u8a8d\u3057\u3066\u4e0b\u3055\u3044\u3002\n\n## 84. \u5358\u8a9e\u6587\u8108\u884c\u5217\u306e\u4f5c\u6210\n\n> 83\u306e\u51fa\u529b\u3092\u5229\u7528\u3057\uff0c\u5358\u8a9e\u6587\u8108\u884c\u5217X\u3092\u4f5c\u6210\u305b\u3088\uff0e\u305f\u3060\u3057\uff0c\u884c\u5217X\u306e\u5404\u8981\u7d20Xtc\u306f\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308b\uff0e\n> f(t,c)\u226510\u306a\u3089\u3070\uff0cXtc = PPMI(t,c) = max { log(N \u00d7 f(t,c) / f(t,\u2217) \u00d7 f(\u2217,c)), 0}\n> f(t,c)<10\u306a\u3089\u3070\uff0cXtc = 0\n> \u3053\u3053\u3067\uff0cPPMI(t,c)\u306fPositive Pointwise Mutual Information\uff08\u6b63\u306e\u76f8\u4e92\u60c5\u5831\u91cf\uff09\u3068\u547c\u3070\u308c\u308b\u7d71\u8a08\u91cf\u3067\u3042\u308b\uff0e\n> \u306a\u304a\uff0c\u884c\u5217X\u306e\u884c\u6570\u30fb\u5217\u6570\u306f\u6570\u767e\u4e07\u30aa\u30fc\u30c0\u3068\u306a\u308a\uff0c\u884c\u5217\u306e\u3059\u3079\u3066\u306e\u8981\u7d20\u3092\u4e3b\u8a18\u61b6\u4e0a\u306b\u8f09\u305b\u308b\u3053\u3068\u306f\u7121\u7406\u306a\u306e\u3067\u6ce8\u610f\u3059\u308b\u3053\u3068\uff0e\n> \u5e78\u3044\uff0c\u884c\u5217X\u306e\u307b\u3068\u3093\u3069\u306e\u8981\u7d20\u306f0\u306b\u306a\u308b\u306e\u3067\uff0c\u975e0\u306e\u8981\u7d20\u3060\u3051\u3092\u66f8\u304d\u51fa\u305b\u3070\u3088\u3044\uff0e\n\n\u5358\u8a9e\u3068\u6587\u8108\u8a9e\u306e\u30da\u30a2\u306e\u51fa\u73fe\u983b\u5ea6\u3092\u5143\u306b\u3001\u5358\u8a9e\u3068\u6587\u8108\u8a9e\u306e\u95a2\u4fc2\u306e\u5f37\u3055\u3092\u3001\u6b63\u306e\u76f8\u4e92\u60c5\u5831\u91cf\u3068\u3044\u3046\u7d71\u8a08\u91cf\u3067\u8868\u3057\u307e\u3059\u3002\u4e00\u898b\u3001\u96e3\u3057\u3052\u3067\u3059\u304c\u3001\u554f\u984c\u6587\u306b\u66f8\u3044\u3066\u3044\u308b\u5b9a\u7fa9\u901a\u308a\u306b\u30b3\u30fc\u30c9\u5316\u3057\u3066\u3044\u304f\u3060\u3051\u3067\u3059\u3002\n\n```scala:WikiRDD.scala\nclass WikiRDDLong(rdd: RDD[((String, String), Long)]) {\n  def contextMatrix: RDD[((String, String), Double)] = {\n    // (83\u306e\u6b8b\u30bf\u30b9\u30af) \u5358\u8a9et\u306e\u51fa\u73fe\u56de\u6570: f(t,\u2217)\n    val mapT = rdd.map(x => x._1._1 -> x._2).groupByKey.map { case (k, v) => k -> v.sum }.collect.toMap\n\n    // (83\u306e\u6b8b\u30bf\u30b9\u30af) \u6587\u8108\u8a9ec\u306e\u51fa\u73fe\u56de\u6570: f(\u2217,c)\n    val mapC = rdd.map(x => x._1._2 -> x._2).groupByKey.map { case (k, v) => k -> v.sum }.collect.toMap\n\n    // (83\u306e\u6b8b\u30bf\u30b9\u30af) \u5358\u8a9e\u3068\u6587\u8108\u8a9e\u306e\u30da\u30a2\u306e\u7dcf\u51fa\u73fe\u56de\u6570\n    val n = rdd.count\n\n    // PPMI\u306e\u7b97\u51fa\n    // Xtc = PPMI(t,c) = max { log(N \u00d7 f(t,c) / f(t,\u2217) \u00d7 f(\u2217,c)), 0}\n    rdd.filter(_._2 >= 10).map(x => x._1 -> Math.log(n * x._2 / (mapT(x._1._1) * mapC(x._1._2)))).filter(_._2 > 0)\n  }\n```\n\n```scala:84\u306e\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u30a4\u30e1\u30fc\u30b8\nperceive they 4.3694478524670215\nNFL teams 4.23410650459726\nEuropean elections 2.995732273553991\nstrictly is 1.791759469228055\nValley region 2.6390573296152584\nhead football 2.8903717578961645\nWilson was 0.6931471805599453\napplied may 1.6094379124341003\npopulation Census 2.302585092994046\nprivate investment 4.543294782270004\n(\u4ee5\u4e0b\u7565)\n```\n\n# 2 \u5358\u8a9e\u6587\u8108\u884c\u5217\u306e\u6b21\u5143\u3092\u5727\u7e2e\u3057\u3066\u3001\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3002(85)\n\n\u3053\u3053\u307e\u3067\u3067\u300c84\u306e\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u30a4\u30e1\u30fc\u30b8\u300d\u306e\u69d8\u306b\u3001\u5358\u8a9e\u3068\u6587\u8108\u8a9e\u3068\u306e\u95a2\u4fc2\u3092\u5b9a\u91cf\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\u6b21\u306f\u3053\u308c\u3092\u30d9\u30af\u30c8\u30eb\u3068\u3057\u3066\u8868\u73fe\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n## 85. \u4e3b\u6210\u5206\u5206\u6790\u306b\u3088\u308b\u6b21\u5143\u5727\u7e2e\n\n> 84\u3067\u5f97\u3089\u308c\u305f\u5358\u8a9e\u6587\u8108\u884c\u5217\u306b\u5bfe\u3057\u3066\uff0c\u4e3b\u6210\u5206\u5206\u6790\u3092\u9069\u7528\u3057\uff0c\u5358\u8a9e\u306e\u610f\u5473\u30d9\u30af\u30c8\u30eb\u3092300\u6b21\u5143\u306b\u5727\u7e2e\u305b\u3088\uff0e\n\n### :fearful: 300\u6b21\u5143\uff01\uff1f\n\n\u3055\u3066\u3053\u3053\u3067\u6b21\u5143\u3068\u3044\u3046\u8a00\u8449\u304c\u51fa\u3066\u304f\u308b\u308f\u3051\u3067\u3059\u304c\u3001\u4f55\u306a\u3093\u3067\u3057\u3087\u3046300\u6b21\u5143\u3063\u3066\uff1f\n\u300c84\u3067\u5f97\u3089\u308c\u305f\u5358\u8a9e\u6587\u8108\u884c\u5217\u300d\u3092\u5727\u7e2e\u3057\u3066300\u6b21\u5143\u306b\u3059\u308b\u308f\u3051\u3067\u3059\u304b\u3089\u3001\u73fe\u6642\u70b9\u3067\u306f\u3082\u3063\u3068\u5927\u304d\u3044\u6b21\u5143\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u306d\u3002\n\n\u307e\u305a\u3001\u300c84\u3067\u5f97\u3089\u308c\u305f\u5358\u8a9e\u6587\u8108\u884c\u5217\u300d\u3092\u3001\u5358\u8a9e\u3092\u7e26\u8ef8(\u884c)\u3001\u6587\u8108\u3092\u6a2a\u8ef8(\u5217)\u3068\u3059\u308b\u3001\u30b9\u30ab\u30b9\u30ab\u306e\u884c\u5217\u3068\u3057\u3066\u6349\u3048\u308b\u3093\u3067\u3059\u3002\u300c84\u306e\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u30a4\u30e1\u30fc\u30b8\u300d\u306e\u4f8b\u3060\u3068\u4e0b\u8a18\u306e\u69d8\u306a\u884c\u5217\u306b\u306a\u308a\u307e\u3059\u3002\n\n|| they | teams | elections | is | region | football | was | may | Census | investment |(\u4ee5\u4e0b\u7565)|\n|---|---:|---:|---:|---:|---:|---:|---:|---:|---:|---:|---:|\n| perceive | 4.36944 |0|0|0|0|0|0|0|0|0||\n| NFL |0| 4.23410 |0|0|0|0|0|0|0|0|\n| European |0|0| 2.99573 |0|0|0|0|0|0|0|\n| strictly |0|0|0| 1.79175 |0|0|0|0|0|0|\n| Valley |0|0|0|0| 2.63905|0|0|0|0|0|\n| head |0|0|0|0|0| 2.89037 |0|0|0|0|\n| Wilson |0|0|0|0|0|0| 0.69314 |0|0|0|\n| applied |0|0|0|0|0|0|0| 1.60943|0|0|\n| population |0|0|0|0|0|0|0|0| 2.30258|0|\n| private |0|0|0|0|0|0|0|0|0| 4.54329|\n| (\u4ee5\u4e0b\u7565) ||\n\n\u3053\u306e\u6a2a\u5e45\u3092\u6b21\u5143\u3068\u547c\u3093\u3067\u308b\u8a33\u3067\u3059\u3002\n1/10\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30c7\u30fc\u30bf\u3060\u3068\u30019.4\u4e07\u884c\uff5810\u4e07\u5217(10\u4e07\u6b21\u5143)\u3050\u3089\u3044\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u6700\u7d42\u7684\u306b\u3001\u3084\u308a\u305f\u3044\u3053\u3068\u306f\u6700\u521d\u306b\u8ff0\u3079\u305f\u3088\u3046\u306b\u3001\u300c\u30a4\u30c1\u30ed\u30fc\u300d-\u300c\u91ce\u7403\u300d+\u300c\u672c\u7530\u300d=\u300c\u30b5\u30c3\u30ab\u30fc\u300d\u306e\u69d8\u306a\u5358\u8a9e\u540c\u58eb\u306e\u6bd4\u8f03\u30fb\u6f14\u7b97\u3067\u3059\u3002\n\u3053\u3046\u3044\u3063\u305f\u6bd4\u8f03\u30fb\u6f14\u7b97\u3092\u884c\u3046\u306b\u306f10\u4e07\u6b21\u5143\u3082\u3042\u3063\u3066\u306f\u7121\u99c4\u304c\u5927\u304d\u3044\u306e\u3067\u3001\u672c\u5f53\u306b\u305d\u306e\u5358\u8a9e\u306e\u6027\u8cea\u3092\u8868\u73fe\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u6b21\u5143\u306b\u307e\u3067\u5727\u7e2e\u3059\u308b\u306e\u3067\u3059\u3002\n\u5358\u8a9e\u3092\u8868\u73fe\u3059\u308b\u30d9\u30af\u30c8\u30eb\u304c\u3042\u308c\u3070\u6bd4\u8f03\u30fb\u6f14\u7b97\u306f\u3067\u304d\u308b\u306e\u3067\u3001\u5727\u7e2e\u5f8c\u306b\u306f\u6a2a\u8ef8(\u5217)\u306e\u30e9\u30d9\u30eb(\u4e0a\u306e\u4f8b\u3067\u8a00\u3046\u3068\u3053\u308d\u306e\u3001they, team, elections, ...)\u306f\u5931\u308f\u308c\u3066\u3057\u307e\u3063\u3066\u3082\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002\u5358\u8a9e\u306e\u6027\u8cea\u3092\u8868\u305910\u4e07\u500b\u306e\u6307\u6a19\u3092\u307e\u3068\u3081\u3066\u3001\u65b0\u3057\u3044300\u500b\u306e\u6307\u6a19\u3092\u4f5c\u308b\u30a4\u30e1\u30fc\u30b8\u3067\u3059\u3002\n\n\u5727\u7e2e\u3059\u308b\u65b9\u6cd5\u306b\u306f\u3001\u300c\u4e3b\u6210\u5206\u5206\u6790(PCA)\u300d\u3068\u300c\u7279\u7570\u5024\u5206\u89e3(SVD)\u300d\u304c\u3042\u308a\u307e\u3059\u3002\n\n### :scream: \u4e3b\u6210\u5206\u5206\u6790(PCA)\n\n\u4e3b\u6210\u5206\u5206\u6790\u306e\u6b63\u3057\u304f\u3066\u5206\u304b\u308a\u3084\u3059\u3044\u8aac\u660e\u3092\u3059\u308b\u80fd\u529b\u306f\u3001\u79c1\u306b\u306f\u306a\u3044\u306e\u3067[\u3053\u306e\u3078\u3093](http://www.macromill.com/landing/words/b007.html)\u3092\u53c2\u8003\u306b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\u3053\u3053\u3067\u306f\u3001\u6b21\u5143\u3092\u524a\u6e1b\u3059\u308b\u30c4\u30fc\u30eb\u3068\u3057\u3066\u30d6\u30e9\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u7684\u306b\u7406\u89e3\u3057\u3066\u5148\u306b\u9032\u3081\u307e\u3059\u3002\n\n\u4e3b\u6210\u5206\u5206\u6790\u3059\u308b\u30b3\u30fc\u30c9\u306f\u3001Spark/Scala\u3067\u306f\u4e0b\u8a18\u306e\u69d8\u306b\u306a\u308a\u307e\u3059\u3002\n\n```scala\n    // \u5358\u8a9e\u6587\u8108\u884c\u5217\u306e\u30b9\u30ab\u30b9\u30ab\u884c\u5217\u5316\u3002PCA\u3059\u308b\u305f\u3081\u306b\u306fRowMatrix\u578b\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n    val contextMap = rdd.collect.toMap\n    val words = rdd.keys.map(_._1).distinct\n    val word_count = words.count.toInt\n    val contexts = rdd.keys.map(_._2).distinct.collect\n\n    val contextMatrix: RDD[Vector] = words.map(w => Vectors.dense(contexts.map(c => contextMap.getOrElse((w, c), 0.0)).slice(0, word_count)))\n\n    val rowMatrix = new RowMatrix(contextMatrix)\n\n    // PCA\u5b9f\u884c\n    val pcMatrix = rowMatrix.computePrincipalComponents(300)\n\n```\n\n\u305f\u3060\u3057\u3001Spark\u306f65,535\u6b21\u5143\u307e\u3067\u3057\u304b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u3089\u3057\u304f\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\u3002\n\n```\nException in thread \"main\" java.lang.IllegalArgumentException: Argument with more than 65535 cols: 100113\n```\n\n\u305d\u3053\u3067\u300165,535\u6b21\u5143\u4ee5\u4e0b\u306b\u306a\u308b\u3088\u3046\u306b\u3001\u9069\u5f53\u306b\u30c7\u30fc\u30bf\u3092\u7d5e\u3063\u3066\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\u3059\u308b\u3068\u3001\u4eca\u5ea6\u306f\u30e1\u30e2\u30ea\u4e0d\u8db3\u3060\u3068\u6012\u3089\u308c\u307e\u3059\u3002\n\n```\nException in thread \"main\" java.lang.OutOfMemoryError: Java heap space\n```\n\n\u7d50\u5c40\u3001\u4e3b\u6210\u5206\u5206\u6790\u3092\u3059\u308b\u524d\u306b\u30015\u5343\u6b21\u5143\u3050\u3089\u3044\u307e\u3067\u7d5e\u3089\u306a\u3044\u3068`computePrincipalComponents`\u3092\u5b9f\u884c\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u4e3b\u6210\u5206\u5206\u6790\u3059\u308b\u524d\u306b\u305d\u3093\u306a\u5927\u80c6\u306b\u7d5e\u3063\u305f\u3089\u3001\u4e3b\u6210\u5206\u5206\u6790\u3067\u6b21\u5143\u524a\u6e1b\u3059\u308b\u610f\u5473\u304c\u306a\u3044\u306e\u3067\u3001\u5225\u306e\u624b\u3092\u8003\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n### :smile: \u7279\u7570\u5024\u5206\u89e3(SVD)\n\n\u6b21\u5143\u3092\u524a\u6e1b\u3059\u308b\u305f\u3081\u306e\u3082\u3046\u4e00\u3064\u306e\u30c4\u30fc\u30eb\u304c\u7279\u7570\u5024\u5206\u89e3\u3067\u3059\u3002\u6b63\u78ba\u306a\u8aac\u660e\u304c\u6c17\u306b\u306a\u308b\u65b9\u306f\u3001\u30b0\u30b0\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\u3053\u3053\u3067\u3082\u30d6\u30e9\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3068\u3057\u3066\u3001\u5927\u304d\u306a\u884c\u5217\u306b\u5bfe\u3057\u3066\u7279\u7570\u5024\u5206\u89e3(`computeSVD `)\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001U\u3068\u03a3\u3068V\u3068\u3044\u3046\uff13\u3064\u306e\u884c\u5217\u306b\u5206\u89e3\u3055\u308c\u3066\u3001U\u3068\u03a3\u306e\u5185\u7a4d\u3092\u8a08\u7b97\u3059\u308b\u3068\u6b21\u5143\u5727\u7e2e\u304c\u3067\u304d\u308b\u3068\u3044\u3046\u3075\u3046\u306b\u7406\u89e3\u3057\u3066\u5148\u306b\u52e7\u3081\u307e\u3059\u3002\n\nSpark/Scala\u3067\u306e\u30b3\u30fc\u30c9\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```scala:WikiRDD.scala\nclass WikiRDDDouble(rdd: RDD[((String, String), Double)]) {\n\n  def wordVectors: RDD[(String, Array[Double])] = {\n    // \u5358\u8a9e\u6587\u8108\u884c\u5217\u3092\u30de\u30c3\u30d7\u5316\n    val contextMap: Map[(String, String), Double] = rdd.collect.toMap\n\n    // \u4e00\u610f\u306a\u5358\u8a9ec\u306eRDD\n    val words: RDD[String] = rdd.keys.map(_._1).distinct\n\n    // \u4e00\u610f\u306a\u6587\u8108\u8a9ec\u306e\u914d\u5217\n    val contexts: Array[String] = rdd.keys.map(_._2).distinct.collect\n\n    // \u5358\u8a9e\u6587\u8108\u884c\u5217\u3092\u758e\u884c\u5217\u5316\n    val contextMatrix: RDD[Vector] = words.map(w => Vectors.dense(contexts.map(c => contextMap.getOrElse((w, c), 0.0))))\n\n    // \u7279\u7570\u5024\u5206\u89e3(SVD)\n    val svd = new RowMatrix(contextMatrix).computeSVD(300, computeU = true)\n\n    // \u7279\u7570\u5024\u5206\u89e3\u5f8c\u306eU\u3068\u03a3\u306e\u5185\u7a4d\n    val us: RowMatrix = multiplyMatrix(svd.U, svd.s)\n\n    words.zip(us.rows.map(_.toArray))\n  }\n\n  /**\n    * \u7279\u7570\u5024\u5206\u89e3\u5f8c\u306eU\u3068\u03a3\u306e\u5185\u7a4d\u3092\u7b97\u51fa\u3059\u308b(+\u6b63\u898f\u5316)\n    * \n    * https://github.com/sryza/aas/blob/master/ch06-lsa/src/main/scala/com/cloudera/datascience/lsa/RunLSA.scala#L131\n    * \u3068\n    * https://github.com/sryza/aas/blob/master/ch06-lsa/src/main/scala/com/cloudera/datascience/lsa/RunLSA.scala#L143\n    * \u3092\u6df7\u305c\u3066\u5b9f\u88c5\n    */\n  def multiplyMatrix(mat: RowMatrix, diag: Vector): RowMatrix = {\n    val sArr: Array[Double] = diag.toArray\n    new RowMatrix(mat.rows.map(vec => {\n      val newArr: Array[Double] = (0 until vec.size).toArray.map(i => vec.toArray(i) * sArr(i))\n      val length = math.sqrt(newArr.map(x => x * x).sum)\n      Vectors.dense(newArr.map(_ / length))\n    }))\n  }\n```\n\n\u7279\u7570\u5024\u5206\u89e3\u306a\u3089\u30011/100\u30c7\u30fc\u30bf\u30677\u6642\u9593\u3067\u306a\u3093\u3068\u304b\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\u554f\u984c\u6587\u306e\u6307\u793a\u901a\u308a\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u305d\u306e\u3046\u3061\u30ea\u30d9\u30f3\u30b8\u3057\u305f\u3044\u3082\u306e\u3067\u3059\u304c\u3001\u53c2\u8003\u6587\u732e\u306b\u6319\u3052\u305f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u898b\u3066\u3082\u5927\u62b5\u7279\u7570\u5024\u5206\u89e3\u3092\u4f7f\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3057\u305f\u306e\u3067\u3001\u4e00\u65e6\u3053\u306e\u307e\u307e\u9032\u3081\u3066\u3082\u554f\u984c\u306f\u7121\u3044\u3067\u3057\u3087\u3046\u3002\n\n# 3 \u4f5c\u6210\u3057\u305f\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3067\u904a\u3093\u3067\u307f\u308b\u3002(86\u301c89)\n\n:tada: \u304a\u75b2\u308c\u69d8\u3067\u3057\u305f\u3002\u4e8b\u5b9f\u4e0a\u3001\u3053\u3053\u307e\u3067\u30679\u7ae0\u306f\u307b\u307c\u7d42\u308f\u308a\u3067\u3059\u3002:confetti_ball: \n\u5f8c\u306f\u300185\u3067\u4f5c\u3063\u305f\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3092\u3042\u308c\u3053\u308c\u3044\u3058\u3063\u3066\u307f\u3066\u6027\u80fd\u3092\u78ba\u8a8d\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\n```scala:Main.scala\n  def runStage3(): Unit = {\n    // \u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3092\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u5fa9\u5143\n    val words = sc.textFile(WORD_VECTORS).restoreWordVectors\n\n    // \u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6\u3092\u7b97\u51fa\n    def cos(x: Array[Double], y: Array[Double]): Double = x.zip(y).map(xy => xy._1 * xy._2).sum\n\n    def vec(word: String): Array[Double] = words.vector(word).get\n\n    def plusVec(vec1: Array[Double], vec2: Array[Double]) = vec1.zip(vec2).map(v => v._1 + v._2)\n\n    def minusVec(vec1: Array[Double], vec2: Array[Double]) = vec1.zip(vec2).map(v => v._1 - v._2)\n\n    def printTopN(vec: Array[Double], n: Int = 10): Unit = {\n      val wordMap = words.collect.toMap\n\n      words\n        .map(x => x._1 -> cos(vec, wordMap(x._1))).collect.toList // \u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6\u306e\u4e00\u89a7\u3092\u4f5c\u6210\u3057\u3066\u30ea\u30b9\u30c8\u5316\n        .sortBy(_._2).reverse.slice(0, n) // \u30bd\u30fc\u30c8\u3057\u3066\u30c8\u30c3\u30d7N\u3092\u62bd\u51fa\n        .foreach(x => println(x._1 + \"\\t\" + \"%.8f\".format(x._2))) // \u8868\u793a\n    }\n\n    /**\n      * 86. \u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306e\u8868\u793a\n      *\n      * 85\u3067\u5f97\u305f\u5358\u8a9e\u306e\u610f\u5473\u30d9\u30af\u30c8\u30eb\u3092\u8aad\u307f\u8fbc\u307f\uff0c\"United States\"\u306e\u30d9\u30af\u30c8\u30eb\u3092\u8868\u793a\u305b\u3088\uff0e\n      * \u305f\u3060\u3057\uff0c\"United States\"\u306f\u5185\u90e8\u7684\u306b\u306f\"United_States\"\u3068\u8868\u73fe\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u305b\u3088\uff0e\n      */\n    println(\"86. \u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306e\u8868\u793a\")\n    println(vec(\"United_States\").mkString(\" \"))\n\n    /**\n      * 87. \u5358\u8a9e\u306e\u985e\u4f3c\u5ea6\n      *\n      * 85\u3067\u5f97\u305f\u5358\u8a9e\u306e\u610f\u5473\u30d9\u30af\u30c8\u30eb\u3092\u8aad\u307f\u8fbc\u307f\uff0c\"United States\"\u3068\"U.S.\"\u306e\u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6\u3092\u8a08\u7b97\u305b\u3088\uff0e\n      * \u305f\u3060\u3057\uff0c\"U.S.\"\u306f\u5185\u90e8\u7684\u306b\"U.S\"\u3068\u8868\u73fe\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u305b\u3088\uff0e\n      */\n    println(\"87. \u5358\u8a9e\u306e\u985e\u4f3c\u5ea6\")\n    println(cos(vec(\"United_States\"), vec(\"U.S\")))\n    println(cos(vec(\"United_Kingdom\"), vec(\"U.K\")))\n    println(cos(vec(\"England\"), vec(\"U.K\")))\n    println(cos(vec(\"United_Kingdom\"), vec(\"England\")))\n\n    /**\n      * 88. \u985e\u4f3c\u5ea6\u306e\u9ad8\u3044\u5358\u8a9e10\u4ef6\n      *\n      * 85\u3067\u5f97\u305f\u5358\u8a9e\u306e\u610f\u5473\u30d9\u30af\u30c8\u30eb\u3092\u8aad\u307f\u8fbc\u307f\uff0c\"England\"\u3068\u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6\u304c\u9ad8\u304410\u8a9e\u3068\uff0c\u305d\u306e\u985e\u4f3c\u5ea6\u3092\u51fa\u529b\u305b\u3088\uff0e\n      */\n    println(\"88. \u985e\u4f3c\u5ea6\u306e\u9ad8\u3044\u5358\u8a9e10\u4ef6\")\n    printTopN(vec(\"England\"), 20)\n    printTopN(vec(\"Obama\"), 20)\n    printTopN(vec(\"Japan\"), 20)\n\n    /**\n      * 89. \u52a0\u6cd5\u69cb\u6210\u6027\u306b\u3088\u308b\u30a2\u30ca\u30ed\u30b8\u30fc\n      *\n      * 85\u3067\u5f97\u305f\u5358\u8a9e\u306e\u610f\u5473\u30d9\u30af\u30c8\u30eb\u3092\u8aad\u307f\u8fbc\u307f\uff0cvec(\"Spain\") - vec(\"Madrid\") + vec(\"Athens\")\u3092\u8a08\u7b97\u3057\uff0c\u305d\u306e\u30d9\u30af\u30c8\u30eb\u3068\u985e\u4f3c\u5ea6\u306e\u9ad8\u304410\u8a9e\u3068\u305d\u306e\u985e\u4f3c\u5ea6\u3092\u51fa\u529b\u305b\u3088\uff0e\n      */\n    println(\"89. \u52a0\u6cd5\u69cb\u6210\u6027\u306b\u3088\u308b\u30a2\u30ca\u30ed\u30b8\u30fc\")\n    printTopN(plusVec(minusVec(vec(\"Spain\"), vec(\"Madrid\")), vec(\"Athens\")), 20)\n    printTopN(plusVec(minusVec(vec(\"England\"), vec(\"London\")), vec(\"Tokyo\")), 20)\n  }\n```\n\n## 86. \u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306e\u8868\u793a\n\n\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3092\u51fa\u529b\u3057\u3066\u307f\u307e\u3059\u3002\n\n```scala:vec(\"United_States\")\u306e\u51fa\u529b\u7d50\u679c\n0.05194608599987417 0.0027944452235603725 -0.03464696786905431 0.09209495035824586 ...(\u4ee5\u4e0b\u7565)\n```\n\n\u4e0a\u8a18\u306e\u69d8\u306a\u3001\u6570\u5b57\u304c300\u500b\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\u5358\u8a9e\u6587\u8108\u884c\u5217\u3068\u306f\u9055\u3044\u6b21\u5143\u5727\u7e2e\u5f8c\u306e\u30d9\u30af\u30c8\u30eb\u306f\u3001\u305d\u308c\u3060\u3051\u3092\u898b\u3066\u3082\u610f\u5473\u306f\u306a\u304f\u3001\u4ed6\u306e\u5358\u8a9e\u3068\u306e\u6bd4\u8f03\u306b\u304a\u3044\u3066\u3057\u304b\u610f\u5473\u3092\u6301\u3061\u307e\u305b\u3093\u3002\n\n\n## 87. \u5358\u8a9e\u306e\u985e\u4f3c\u5ea6\n\nUnited States\u3068U.S.\u306f`0.8562344315089965`\u3068\u3001\u9ad8\u3044\u985e\u4f3c\u5ea6\u3092\u793a\u3057\u307e\u3057\u305f\u304c\u3001\u305d\u308c\u4ee5\u5916\u306f\u305d\u308c\u307b\u3069\u9ad8\u304f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n## 88. \u985e\u4f3c\u5ea6\u306e\u9ad8\u3044\u5358\u8a9e10\u4ef6\n\n\u554f\u984c\u6587\u306e\u6307\u793a\u4ee5\u5916\u306b\u3082\u5e7e\u3064\u304b\u306e\u5358\u8a9e\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u30d9\u30b9\u30c820\u307e\u3067\u898b\u3066\u3044\u307e\u3059\u3002\u4e0b\u8a18\u306f`printTopN(vec(\"Obama\"), 20)`\u306e\u7d50\u679c\u3067\u3059\u304c\u3001\u7c73\u56fd\u306e\u5927\u7d71\u9818\u3092\u4e2d\u5fc3\u306b\u653f\u6cbb\u5bb6\u306e\u540d\u524d\u3084President\u306a\u3069\u306e\u5358\u8a9e\u304c\u4e26\u3093\u3067\u3044\u307e\u3059\u3002\u4e0a\u624b\u304f\u5b66\u7fd2\u3067\u304d\u3066\u308b\u3088\u3046\u3067\u3059\u306d\u3002\n\n```scala:88.\u985e\u4f3c\u5ea6\u306e\u9ad8\u3044\u5358\u8a9e10\u4ef6\nObama\t1.00000000\nObama's\t0.98762456\nWoodrow\t0.97713770\nReagan\t0.97351578\nBarack\t0.96941201\nNixon\t0.91532997\nChen\t0.90677497\nRonald\t0.90399366\nCarter\t0.88981108\nJimmy\t0.87959134\nAbraham\t0.82863200\nRoosevelt\t0.82592299\nClinton\t0.82518346\nVice\t0.82254346\nTruman\t0.81658883\nLyndon\t0.80891514\nUlysses\t0.80697392\nTheodore\t0.80415276\nPresident\t0.73341562\nHarry\t0.72970068\n```\n\n\n## 89. \u52a0\u6cd5\u69cb\u6210\u6027\u306b\u3088\u308b\u30a2\u30ca\u30ed\u30b8\u30fc\n\n\u5730\u7406\u7684\u306a\u8a00\u8449\u3067\u3042\u308b\u3053\u3068\u306f\u5b66\u7fd2\u3057\u3066\u3044\u308b\u3082\u306e\u306e\u3001\u56fd\u3068\u9996\u90fd\u306e\u95a2\u4fc2\u6027\u307e\u3067\u306f\u7406\u89e3\u3067\u304d\u3066\u306a\u3044\u307f\u305f\u3044\u3067\u3059\u306d\u3002\u4e0b\u8a18\u306f`printTopN(plusVec(minusVec(vec(\"Spain\"), vec(\"Madrid\")), vec(\"Athens\")), 20)`\u306e\u7d50\u679c\u3067\u3059\u3002\n\n```scala:89.\u52a0\u6cd5\u69cb\u6210\u6027\u306b\u3088\u308b\u30a2\u30ca\u30ed\u30b8\u30fc\u306e\u51fa\u529b\u7d50\u679c\nJawaharlal\t0.81945976\nMcGill\t0.81939535\nYeshiva\t0.81939535\nEmory\t0.81939535\nTulane\t0.81939535\nTezpur\t0.81939535\nBrandeis\t0.81939535\nMcMaster\t0.81939535\nWashburn\t0.81939535\nNotre\t0.81895540\nPontifical\t0.80467503\nWesleyan\t0.80453523\nFreiburg\t0.79883529\nLoyola\t0.79827056\nWuhan\t0.79819758\nEMUNI\t0.79768679\nPurdue\t0.79070632\nA&M\t0.78805933\nMiddlesex\t0.78464837\nWisconsin\u2013Madison\t0.78101616\n```\n\n# \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n```scala:Main.scala\npackage nlp100_9\n\nimport org.apache.spark._\nimport nlp100_9.WikiRDD._\n\nobject Main {\n  val RAW_FILE = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/enwiki-20150112-400-r100-10576.txt\"\n  val COMBINED_WORDS = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/combined_words.txt\"\n  val CONTEXT_MATRIX = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/context_matrix\"\n  val WORD_VECTORS = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/word_vectors\"\n  val sc = new SparkContext(new SparkConf().setAppName(\"NLP100\").setMaster(\"local[*]\"))\n\n  def main(args: Array[String]): Unit = {\n    runStage1()\n    runStage2()\n    runStage3()\n  }\n\n  /**\n    * 1. Wikipedia\u306e\u8a18\u4e8b\u3092\u8aad\u307f\u3053\u3093\u3067\u3001\u5358\u8a9e\u6587\u8108\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b\u3002 (81\u301c84)\n    * (100\u5206\u306e1\u30d5\u30a1\u30a4\u30eb\u306e\u5834\u5408\u30018\u5206\u7a0b\u5ea6\u3067\u5b8c\u4e86)\n    */\n  def runStage1(): Unit = {\n    sc.textFile(RAW_FILE)\n      .cleansData // 80. \u30b3\u30fc\u30d1\u30b9\u306e\u6574\u5f62\n      .replaceCombinedWord(COMBINED_WORDS) // 81. \u8907\u5408\u8a9e\u304b\u3089\u306a\u308b\u56fd\u540d\u3078\u306e\u5bfe\u51e6\n      .contexts // 82. \u6587\u8108\u306e\u62bd\u51fa\n      .map(_ -> 1L) // RDD[(String, String)]\u578b\u3092RDD[((String, String), Long)]\u578b\u306b\u5909\u63db\n      .sumByTC // 83.\u5358\u8a9e\uff0f\u6587\u8108\u306e\u983b\u5ea6\u306e\u8a08\u6e2c(\u5358\u8a9et\u3068\u6587\u8108\u8a9ec\u306e\u5171\u8d77\u56de\u6570(f(t,c))\u3092\u7b97\u51fa)\n      .contextMatrix // 83.\u5358\u8a9e\uff0f\u6587\u8108\u306e\u983b\u5ea6\u306e\u8a08\u6e2c(f(t,c)\u4ee5\u5916)\u3068\u300184.\u5358\u8a9e\u6587\u8108\u884c\u5217\u306e\u4f5c\u6210\n      .saveContextMatrix(CONTEXT_MATRIX) // \u5358\u8a9e\u6587\u8108\u884c\u5217\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3059\u308b\n  }\n\n  /**\n    * 2. \u5358\u8a9e\u6587\u8108\u884c\u5217\u306e\u6b21\u5143\u3092\u5727\u7e2e\u3057\u3066\u3001\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3002(85)\n    * (100\u5206\u306e1\u30d5\u30a1\u30a4\u30eb\u3092\u3055\u3089\u306b1/100\u3059\u308b\u3068\u3001\u5206\u3067\u5b8c\u4e86)\n    * (100\u5206\u306e1\u30d5\u30a1\u30a4\u30eb\u3092\u3055\u3089\u306b1/10\u3059\u308b\u3068\u300137\u5206\u3067\u5b8c\u4e86)\n    * (100\u5206\u306e1\u30d5\u30a1\u30a4\u30eb\u3092\u305d\u306e\u307e\u307e\u7a81\u3063\u8fbc\u3080\u3068\u30017\u6642\u959313\u5206\u3067\u5b8c\u4e86(00:23\u301c7:36))\n    */\n  def runStage2(): Unit = {\n    sc.textFile(CONTEXT_MATRIX) // \u5358\u8a9e\u6587\u8108\u884c\u5217\u3092\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u5fa9\u5143\n      .restoreContextMatrix // RDD[String]\u578b\u3092RDD[((String, String), Double)]\u578b\u306b\u5909\u63db\n      .wordVectors // \u6b21\u5143\u3092\u524a\u6e1b\u3057\u3066\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u5316\u3059\u308b\n      .saveWordVectors(WORD_VECTORS) // \u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3059\u308b\n  }\n\n  /**\n    * 3. \u4f5c\u6210\u3057\u305f\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3067\u904a\u3093\u3067\u307f\u308b\u3002(86\u301c89)\n    */\n  def runStage3(): Unit = {\n    val words = sc.textFile(WORD_VECTORS).restoreWordVectors\n\n    def cos(x: Array[Double], y: Array[Double]): Double = x.zip(y).map(xy => xy._1 * xy._2).sum\n\n    def vec(word: String): Array[Double] = words.vector(word).get\n\n    def plusVec(vec1: Array[Double], vec2: Array[Double]) = vec1.zip(vec2).map(v => v._1 + v._2)\n\n    def minusVec(vec1: Array[Double], vec2: Array[Double]) = vec1.zip(vec2).map(v => v._1 - v._2)\n\n    def printTopN(vec: Array[Double], n: Int = 10): Unit = {\n      val wordMap = words.collect.toMap\n\n      words\n        .map(x => x._1 -> cos(vec, wordMap(x._1))).collect.toList // \u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6\u306e\u4e00\u89a7\u3092\u4f5c\u6210\u3057\u3066\u30ea\u30b9\u30c8\u5316\n        .sortBy(_._2).reverse.slice(0, n) // \u30bd\u30fc\u30c8\u3057\u3066\u30c8\u30c3\u30d7N\u3092\u62bd\u51fa\n        .foreach(x => println(x._1 + \"\\t\" + \"%.8f\".format(x._2))) // \u8868\u793a\n    }\n\n    /**\n      * 86. \u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306e\u8868\u793a\n      *\n      * 85\u3067\u5f97\u305f\u5358\u8a9e\u306e\u610f\u5473\u30d9\u30af\u30c8\u30eb\u3092\u8aad\u307f\u8fbc\u307f\uff0c\"United States\"\u306e\u30d9\u30af\u30c8\u30eb\u3092\u8868\u793a\u305b\u3088\uff0e\n      * \u305f\u3060\u3057\uff0c\"United States\"\u306f\u5185\u90e8\u7684\u306b\u306f\"United_States\"\u3068\u8868\u73fe\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u305b\u3088\uff0e\n      */\n    println(\"86. \u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306e\u8868\u793a\")\n    println(vec(\"United_States\").mkString(\" \"))\n\n    /**\n      * 87. \u5358\u8a9e\u306e\u985e\u4f3c\u5ea6\n      *\n      * 85\u3067\u5f97\u305f\u5358\u8a9e\u306e\u610f\u5473\u30d9\u30af\u30c8\u30eb\u3092\u8aad\u307f\u8fbc\u307f\uff0c\"United States\"\u3068\"U.S.\"\u306e\u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6\u3092\u8a08\u7b97\u305b\u3088\uff0e\n      * \u305f\u3060\u3057\uff0c\"U.S.\"\u306f\u5185\u90e8\u7684\u306b\"U.S\"\u3068\u8868\u73fe\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u305b\u3088\uff0e\n      */\n    println(\"87. \u5358\u8a9e\u306e\u985e\u4f3c\u5ea6\")\n    println(cos(vec(\"United_States\"), vec(\"U.S\")))\n    println(cos(vec(\"United_Kingdom\"), vec(\"U.K\")))\n    println(cos(vec(\"England\"), vec(\"U.K\")))\n    println(cos(vec(\"United_Kingdom\"), vec(\"England\")))\n\n    /**\n      * 88. \u985e\u4f3c\u5ea6\u306e\u9ad8\u3044\u5358\u8a9e10\u4ef6\n      *\n      * 85\u3067\u5f97\u305f\u5358\u8a9e\u306e\u610f\u5473\u30d9\u30af\u30c8\u30eb\u3092\u8aad\u307f\u8fbc\u307f\uff0c\"England\"\u3068\u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6\u304c\u9ad8\u304410\u8a9e\u3068\uff0c\u305d\u306e\u985e\u4f3c\u5ea6\u3092\u51fa\u529b\u305b\u3088\uff0e\n      */\n    println(\"88. \u985e\u4f3c\u5ea6\u306e\u9ad8\u3044\u5358\u8a9e10\u4ef6\")\n    printTopN(vec(\"England\"), 20)\n    printTopN(vec(\"Obama\"), 20)\n    printTopN(vec(\"Japan\"), 20)\n\n    /**\n      * 89. \u52a0\u6cd5\u69cb\u6210\u6027\u306b\u3088\u308b\u30a2\u30ca\u30ed\u30b8\u30fc\n      *\n      * 85\u3067\u5f97\u305f\u5358\u8a9e\u306e\u610f\u5473\u30d9\u30af\u30c8\u30eb\u3092\u8aad\u307f\u8fbc\u307f\uff0cvec(\"Spain\") - vec(\"Madrid\") + vec(\"Athens\")\u3092\u8a08\u7b97\u3057\uff0c\u305d\u306e\u30d9\u30af\u30c8\u30eb\u3068\u985e\u4f3c\u5ea6\u306e\u9ad8\u304410\u8a9e\u3068\u305d\u306e\u985e\u4f3c\u5ea6\u3092\u51fa\u529b\u305b\u3088\uff0e\n      */\n    println(\"89. \u52a0\u6cd5\u69cb\u6210\u6027\u306b\u3088\u308b\u30a2\u30ca\u30ed\u30b8\u30fc\")\n    printTopN(plusVec(minusVec(vec(\"Spain\"), vec(\"Madrid\")), vec(\"Athens\")), 20)\n    printTopN(plusVec(minusVec(vec(\"England\"), vec(\"London\")), vec(\"Tokyo\")), 20)\n  }\n}\n```\n\n```scala:WikiRDD.scala\npackage nlp100_9\n\nimport org.apache.spark.mllib.linalg.distributed.RowMatrix\nimport org.apache.spark.mllib.linalg.{Vector, Vectors}\nimport org.apache.spark.rdd.RDD\n\nimport scala.io.Source\n\nobject WikiRDD {\n  implicit def addWikiRDDString(rdd: RDD[String]): WikiRDDString = new WikiRDDString(rdd)\n\n  implicit def addWikiRDDLong(rdd: RDD[((String, String), Long)]): WikiRDDLong = new WikiRDDLong(rdd)\n\n  implicit def addWikiRDDDouble(rdd: RDD[((String, String), Double)]): WikiRDDDouble = new WikiRDDDouble(rdd)\n\n  implicit def addWikiRDDArray(rdd: RDD[(String, Array[Double])]): WikiRDDArray = new WikiRDDArray(rdd)\n}\n\n@SerialVersionUID(1L)\nclass WikiRDDString(rdd: RDD[String]) extends Serializable {\n\n  /**\n    * 80. \u30b3\u30fc\u30d1\u30b9\u306e\u6574\u5f62\n    *\n    * \u6587\u3092\u5358\u8a9e\u5217\u306b\u5909\u63db\u3059\u308b\u6700\u3082\u5358\u7d14\u306a\u65b9\u6cd5\u306f\uff0c\u7a7a\u767d\u6587\u5b57\u3067\u5358\u8a9e\u306b\u533a\u5207\u308b\u3053\u3068\u3067\u3042\u308b\uff0e \u305f\u3060\uff0c\u3053\u306e\u65b9\u6cd5\u3067\u306f\u6587\u672b\u306e\u30d4\u30ea\u30aa\u30c9\u3084\u62ec\u5f27\u306a\u3069\u306e\u8a18\u53f7\u304c\u5358\u8a9e\u306b\u542b\u307e\u308c\u3066\u3057\u307e\u3046\uff0e\n    * \u305d\u3053\u3067\uff0c\u30b3\u30fc\u30d1\u30b9\u306e\u5404\u884c\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u7a7a\u767d\u6587\u5b57\u3067\u30c8\u30fc\u30af\u30f3\u306e\u30ea\u30b9\u30c8\u306b\u5206\u5272\u3057\u305f\u5f8c\uff0c\u5404\u30c8\u30fc\u30af\u30f3\u306b\u4ee5\u4e0b\u306e\u51e6\u7406\u3092\u65bd\u3057\uff0c\u5358\u8a9e\u304b\u3089\u8a18\u53f7\u3092\u9664\u53bb\u305b\u3088\uff0e\n    * - \u30c8\u30fc\u30af\u30f3\u306e\u5148\u982d\u3068\u672b\u5c3e\u306b\u51fa\u73fe\u3059\u308b\u6b21\u306e\u6587\u5b57\u3092\u524a\u9664: .,!?;:()[]'\"\n    * - \u7a7a\u6587\u5b57\u5217\u3068\u306a\u3063\u305f\u30c8\u30fc\u30af\u30f3\u306f\u524a\u9664\n    *\n    * \u4ee5\u4e0a\u306e\u51e6\u7406\u3092\u9069\u7528\u3057\u305f\u5f8c\uff0c\u30c8\u30fc\u30af\u30f3\u3092\u30b9\u30da\u30fc\u30b9\u3067\u9023\u7d50\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u305b\u3088\uff0e\n    */\n  def cleansData: RDD[String] = {\n\n    // \u554f\u984c\u6587\u306e\u6307\u793a\u4ee5\u5916\u306b\u3082\u6c17\u306b\u306a\u3063\u305f\u30b4\u30df\u3092\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\n    def remove_garbage_char(word: String): String = {\n      val reg = \".,!?;:()\\\\[\\\\]\\\\'\\\\\\\"\u201c\u201d\"\n      word.replaceAll(\"^[%s]+|[%s]+$\".format(reg, reg), \"\")\n    }\n\n    rdd.map(sentence => (sentence split ' ').map(word => remove_garbage_char(word)).filter(word => !word.isEmpty).mkString(\" \"))\n  }\n\n  /**\n    * 81. \u8907\u5408\u8a9e\u304b\u3089\u306a\u308b\u56fd\u540d\u3078\u306e\u5bfe\u51e6\n    *\n    * \u82f1\u8a9e\u3067\u306f\uff0c\u8907\u6570\u306e\u8a9e\u306e\u9023\u63a5\u304c\u610f\u5473\u3092\u6210\u3059\u3053\u3068\u304c\u3042\u308b\uff0e\n    * \u4f8b\u3048\u3070\uff0c\u30a2\u30e1\u30ea\u30ab\u5408\u8846\u56fd\u306f\"United States\"\uff0c\u30a4\u30ae\u30ea\u30b9\u306f\"United Kingdom\"\u3068\u8868\u73fe\u3055\u308c\u308b\u304c\uff0c\"United\"\u3084\"States\"\uff0c\"Kingdom\"\u3068\u3044\u3046\u5358\u8a9e\u3060\u3051\u3067\u306f\uff0c\u6307\u3057\u793a\u3057\u3066\u3044\u308b\u6982\u5ff5\u30fb\u5b9f\u4f53\u304c\u66d6\u6627\u3067\u3042\u308b\uff0e\n    * \u305d\u3053\u3067\uff0c\u30b3\u30fc\u30d1\u30b9\u4e2d\u306b\u542b\u307e\u308c\u308b\u8907\u5408\u8a9e\u3092\u8a8d\u8b58\u3057\uff0c\u8907\u5408\u8a9e\u30921\u8a9e\u3068\u3057\u3066\u6271\u3046\u3053\u3068\u3067\uff0c\u8907\u5408\u8a9e\u306e\u610f\u5473\u3092\u63a8\u5b9a\u3057\u305f\u3044\uff0e\n    * \u3057\u304b\u3057\u306a\u304c\u3089\uff0c\u8907\u5408\u8a9e\u3092\u6b63\u78ba\u306b\u8a8d\u5b9a\u3059\u308b\u306e\u306f\u5927\u5909\u3080\u305a\u304b\u3057\u3044\u306e\u3067\uff0c\u3053\u3053\u3067\u306f\u8907\u5408\u8a9e\u304b\u3089\u306a\u308b\u56fd\u540d\u3092\u8a8d\u5b9a\u3057\u305f\u3044\uff0e\n    *\n    * \u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u4e0a\u304b\u3089\u56fd\u540d\u30ea\u30b9\u30c8\u3092\u5404\u81ea\u3067\u5165\u624b\u3057\uff0c80\u306e\u30b3\u30fc\u30d1\u30b9\u4e2d\u306b\u51fa\u73fe\u3059\u308b\u8907\u5408\u8a9e\u306e\u56fd\u540d\u306b\u95a2\u3057\u3066\uff0c\u30b9\u30da\u30fc\u30b9\u3092\u30a2\u30f3\u30c0\u30fc\u30d0\u30fc\u306b\u7f6e\u63db\u305b\u3088\uff0e\n    * \u4f8b\u3048\u3070\uff0c\"United States\"\u306f\"United_States\"\uff0c\"Isle of Man\"\u306f\"Isle_of_Man\"\u306b\u306a\u308b\u306f\u305a\u3067\u3042\u308b\uff0e\n    */\n  def replaceCombinedWord(fileName: String): RDD[String] = {\n    val combinedWordMap = Source.fromFile(fileName).getLines\n      .filter(_.split(' ').length > 1)\n      .map(combinedWord => (combinedWord, combinedWord.replace(' ', '_')))\n      .toMap\n\n    def replaceCombinedWords(sentence: String): String = {\n      var s = sentence\n      combinedWordMap.foreach {\n        combinedWord => s = s.replaceAll(combinedWord._1, combinedWord._2)\n      }\n      s\n    }\n\n    rdd.map(replaceCombinedWords)\n  }\n\n  /**\n    * 82. \u6587\u8108\u306e\u62bd\u51fa\n    *\n    * 81\u3067\u4f5c\u6210\u3057\u305f\u30b3\u30fc\u30d1\u30b9\u4e2d\u306b\u51fa\u73fe\u3059\u308b\u3059\u3079\u3066\u306e\u5358\u8a9et\u306b\u95a2\u3057\u3066\uff0c\u5358\u8a9et\u3068\u6587\u8108\u8a9ec\u306e\u30da\u30a2\u3092\u30bf\u30d6\u533a\u5207\u308a\u5f62\u5f0f\u3067\u3059\u3079\u3066\u66f8\u304d\u51fa\u305b\uff0e\n    * \u305f\u3060\u3057\uff0c\u6587\u8108\u8a9e\u306e\u5b9a\u7fa9\u306f\u6b21\u306e\u901a\u308a\u3068\u3059\u308b\uff0e\n    * - \u3042\u308b\u5358\u8a9et\u306e\u524d\u5f8cd\u5358\u8a9e\u3092\u6587\u8108\u8a9ec\u3068\u3057\u3066\u62bd\u51fa\u3059\u308b\uff08\u305f\u3060\u3057\uff0c\u6587\u8108\u8a9e\u306b\u5358\u8a9et\u305d\u306e\u3082\u306e\u306f\u542b\u307e\u306a\u3044\uff09\n    * - \u5358\u8a9et\u3092\u9078\u3076\u5ea6\u306b\uff0c\u6587\u8108\u5e45d\u306f{1,2,3,4,5}\u306e\u7bc4\u56f2\u3067\u30e9\u30f3\u30c0\u30e0\u306b\u6c7a\u3081\u308b\uff0e\n    */\n  def contexts: RDD[(String, String)] = {\n    def getContexts(sentence: String): List[(String, String)] = {\n      val words = sentence.split(' ')\n      words.zipWithIndex.map { case (word, index) =>\n        val d = scala.util.Random.nextInt(5) + 1\n        val from = List(0, index - d + 1).max\n        val to = List(index + d, sentence.length).min\n        val contexts = words.slice(from, index).toList ::: words.slice(index + 1, to).toList\n        contexts.map(context => (word, context))\n      }.toList.flatten\n    }\n    rdd.filter(_.nonEmpty).flatMap(getContexts)\n  }\n\n  def restoreContextMatrix: RDD[((String, String), Double)] = rdd.map(_.split(' ') match {\n    case Array(t: String, c: String, v: String) => t -> c -> v.toDouble\n  })\n\n  def restoreWordVectors: RDD[(String, Array[Double])] = rdd.map { x => val a = x.split(' '); a.head -> a.tail.map(_.toDouble) }\n}\n\nclass WikiRDDLong(rdd: RDD[((String, String), Long)]) {\n  /**\n    * 83. \u5358\u8a9e\uff0f\u6587\u8108\u306e\u983b\u5ea6\u306e\u8a08\u6e2c\n    *\n    * 82\u306e\u51fa\u529b\u3092\u5229\u7528\u3057\uff0c\u4ee5\u4e0b\u306e\u51fa\u73fe\u5206\u5e03\uff0c\u304a\u3088\u3073\u5b9a\u6570\u3092\u6c42\u3081\u3088\uff0e\n    *\n    * - f(t,c): \u5358\u8a9et\u3068\u6587\u8108\u8a9ec\u306e\u5171\u8d77\u56de\u6570\n    * - f(t,\u2217): \u5358\u8a9et\u306e\u51fa\u73fe\u56de\u6570\n    * - f(\u2217,c): \u6587\u8108\u8a9ec\u306e\u51fa\u73fe\u56de\u6570\n    * - N: \u5358\u8a9e\u3068\u6587\u8108\u8a9e\u306e\u30da\u30a2\u306e\u7dcf\u51fa\u73fe\u56de\u6570\n    */\n  //    // \u30e1\u30e2\u30ea\u4e0d\u8db3\u306e\u5834\u5408\u306f\u5358\u8a9et\u306e\u958b\u59cb\u6587\u5b57\u6bce\u306b\u30b7\u30fc\u30b1\u30f3\u30b7\u30e3\u30eb\u306b\u51e6\u7406\u3092\u9032\u3081\u308b\u3068\u826f\u3044\u3067\u3057\u3087\u3046\n  //    ('a' to 'z').foreach { c =>\n  //      val tempRDD = rdd.filter(x => x._1.startsWith(c.toString) || x._1.startsWith(c.toString.toUpperCase))\n  //      ...\n  //    }\n  //  }\n  def sumByTC: RDD[((String, String), Long)] = rdd.groupByKey.map { case (k, v) => k -> v.sum }\n\n  /**\n    * 84. \u5358\u8a9e\u6587\u8108\u884c\u5217\u306e\u4f5c\u6210\n    *\n    * 83\u306e\u51fa\u529b\u3092\u5229\u7528\u3057\uff0c\u5358\u8a9e\u6587\u8108\u884c\u5217X\u3092\u4f5c\u6210\u305b\u3088\uff0e\u305f\u3060\u3057\uff0c\u884c\u5217X\u306e\u5404\u8981\u7d20Xtc\u306f\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308b\uff0e\n    * f(t,c)\u226510\u306a\u3089\u3070\uff0cXtc=PPMI(t,c)=max{log(N\u00d7f(t,c) / f(t,\u2217)\u00d7f(\u2217,c)), 0}\n    * f(t,c)<10\u306a\u3089\u3070\uff0cXtc=0\n    * \u3053\u3053\u3067\uff0cPPMI(t,c)\u306fPositive Pointwise Mutual Information\uff08\u6b63\u306e\u76f8\u4e92\u60c5\u5831\u91cf\uff09\u3068\u547c\u3070\u308c\u308b\u7d71\u8a08\u91cf\u3067\u3042\u308b\uff0e\n    * \u306a\u304a\uff0c\u884c\u5217X\u306e\u884c\u6570\u30fb\u5217\u6570\u306f\u6570\u767e\u4e07\u30aa\u30fc\u30c0\u3068\u306a\u308a\uff0c\u884c\u5217\u306e\u3059\u3079\u3066\u306e\u8981\u7d20\u3092\u4e3b\u8a18\u61b6\u4e0a\u306b\u8f09\u305b\u308b\u3053\u3068\u306f\u7121\u7406\u306a\u306e\u3067\u6ce8\u610f\u3059\u308b\u3053\u3068\uff0e\n    * \u5e78\u3044\uff0c\u884c\u5217X\u306e\u307b\u3068\u3093\u3069\u306e\u8981\u7d20\u306f0\u306b\u306a\u308b\u306e\u3067\uff0c\u975e0\u306e\u8981\u7d20\u3060\u3051\u3092\u66f8\u304d\u51fa\u305b\u3070\u3088\u3044\uff0e\n    */\n  def contextMatrix: RDD[((String, String), Double)] = {\n    val rddTC = rdd.filter(_._2 >= 10)\n\n    // 83. \u5358\u8a9et\u306e\u51fa\u73fe\u56de\u6570: f(t,\u2217)\n    val mapT = rdd.map(x => x._1._1 -> x._2).groupByKey.map { case (k, v) => k -> v.sum }.collect.toMap\n\n    // 83. \u6587\u8108\u8a9ec\u306e\u51fa\u73fe\u56de\u6570: f(\u2217,c)\n    val mapC = rdd.map(x => x._1._2 -> x._2).groupByKey.map { case (k, v) => k -> v.sum }.collect.toMap\n\n    // 83. \u5358\u8a9e\u3068\u6587\u8108\u8a9e\u306e\u30da\u30a2\u306e\u7dcf\u51fa\u73fe\u56de\u6570\n    val n = rdd.count\n\n    // PPMI\u306e\u7b97\u51fa\n    // Xtc = PPMI(t,c) = max { log(N \u00d7 f(t,c) / f(t,\u2217) \u00d7 f(\u2217,c)), 0}\n    rddTC.map(x => x._1 -> Math.log(n * x._2 / (mapT(x._1._1) * mapC(x._1._2)))).filter(_._2 > 0)\n  }\n}\n\nclass WikiRDDDouble(rdd: RDD[((String, String), Double)]) {\n\n  def saveContextMatrix(fileName: String): Unit = {\n    rdd.map { case ((t: String, c: String), v: Double) => Array(t, c, v).mkString(\" \") }.saveAsTextFile(fileName)\n  }\n\n  /**\n    * 85. \u4e3b\u6210\u5206\u5206\u6790\u306b\u3088\u308b\u6b21\u5143\u5727\u7e2e\n    *\n    * 84\u3067\u5f97\u3089\u308c\u305f\u5358\u8a9e\u6587\u8108\u884c\u5217\u306b\u5bfe\u3057\u3066\uff0c\u4e3b\u6210\u5206\u5206\u6790\u3092\u9069\u7528\u3057\uff0c\u5358\u8a9e\u306e\u610f\u5473\u30d9\u30af\u30c8\u30eb\u3092300\u6b21\u5143\u306b\u5727\u7e2e\u305b\u3088\uff0e\n    */\n  def wordVectors: RDD[(String, Array[Double])] = {\n    // \u5358\u8a9e\u6587\u8108\u884c\u5217\u3092\u30de\u30c3\u30d7\u5316\n    val contextMap: Map[(String, String), Double] = rdd.collect.toMap\n\n    // \u4e00\u610f\u306a\u5358\u8a9ec\u306eRDD\n    val words: RDD[String] = rdd.keys.map(_._1).distinct\n\n    // \u4e00\u610f\u306a\u6587\u8108\u8a9ec\u306e\u914d\u5217\n    val contexts: Array[String] = rdd.keys.map(_._2).distinct.collect\n\n    // \u5358\u8a9e\u6587\u8108\u884c\u5217\u3092\u758e\u884c\u5217\u5316\n    val contextMatrix: RDD[Vector] = words.map(w => Vectors.dense(contexts.map(c => contextMap.getOrElse((w, c), 0.0))))\n\n    // \u7279\u7570\u5024\u5206\u89e3(SVD)\n    val svd = new RowMatrix(contextMatrix).computeSVD(300, computeU = true)\n\n    // \u7279\u7570\u5024\u5206\u89e3\u5f8c\u306eU\u3068\u03a3\u306e\u5185\u7a4d\n    val us: RowMatrix = multiplyMatrix(svd.U, svd.s)\n\n    words.zip(us.rows.map(_.toArray))\n  }\n\n  /**\n    * \u7279\u7570\u5024\u5206\u89e3\u5f8c\u306eU\u3068\u03a3\u306e\u5185\u7a4d\u3092\u7b97\u51fa\u3059\u308b\n    * https://github.com/sryza/aas/blob/master/ch06-lsa/src/main/scala/com/cloudera/datascience/lsa/RunLSA.scala#L131\n    * https://github.com/sryza/aas/blob/master/ch06-lsa/src/main/scala/com/cloudera/datascience/lsa/RunLSA.scala#L143\n    * \u304b\u3089\u30b3\u30d4\u30fc\n    */\n  def multiplyMatrix(mat: RowMatrix, diag: Vector): RowMatrix = {\n    val sArr: Array[Double] = diag.toArray\n    new RowMatrix(mat.rows.map(vec => {\n      val newArr: Array[Double] = (0 until vec.size).toArray.map(i => vec.toArray(i) * sArr(i))\n      val length = math.sqrt(newArr.map(x => x * x).sum)\n      Vectors.dense(newArr.map(_ / length))\n    }))\n  }\n}\n\nclass WikiRDDArray(rdd: RDD[(String, Array[Double])]) {\n  def saveWordVectors(fileName: String): Unit = {\n    rdd.map { case (t: String, v: Array[Double]) => List(t, v.mkString(\" \")).mkString(\" \") }.saveAsTextFile(fileName)\n  }\n\n  def vector(word: String): Option[Array[Double]] = {\n    val wordVector = rdd.filter(_._1 == word)\n    if (wordVector.isEmpty) {\n      None\n    } else {\n      Option(wordVector.first._2)\n    }\n  }\n}\n```\n\n# \u53c2\u8003\u6587\u732e\n\n- [\u5317\u91ce\u5742\u5099\u5fd8\u9332](http://kenichia.hatenablog.com/entry/2016/03/06/133021)\n- [\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af \u7b2c9\u7ae0:\u30d9\u30af\u30c8\u30eb\u7a7a\u9593\u6cd5 (I) @yamano357](http://rpubs.com/yamano357/107149)\n- [\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb \u5fdc\u7528\u7de8](http://www.slideshare.net/adtech-sat/word2vec20140413)\n- [Apache Spark\u5165\u9580 \u52d5\u304b\u3057\u3066\u5b66\u3076\u6700\u65b0\u4e26\u5217\u5206\u6563\u51e6\u7406\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af](https://www.amazon.co.jp/Apache-Spark%E5%85%A5%E9%96%80-%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6%E6%9C%80%E6%96%B0%E4%B8%A6%E5%88%97%E5%88%86%E6%95%A3%E5%87%A6%E7%90%86%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF-%E6%A0%AA%E5%BC%8F%E4%BC%9A%E7%A4%BENTT%E3%83%87%E3%83%BC%E3%82%BF-ebook/dp/B01AXQNTJE?ie=UTF8&qid=&ref_=tmm_kin_swatch_0&sr=)\n- [\u5ca9\u6ce2\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9 Vol.2](http://www.amazon.co.jp/%E5%B2%A9%E6%B3%A2%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B5%E3%82%A4%E3%82%A8%E3%83%B3%E3%82%B9-Vol-2-%E5%B2%A9%E6%B3%A2%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B5%E3%82%A4%E3%82%A8%E3%83%B3%E3%82%B9%E5%88%8A%E8%A1%8C%E5%A7%94%E5%93%A1%E4%BC%9A/dp/4000298526/ref=sr_1_2?ie=UTF8&qid=1463105849&sr=8-2&keywords=%E5%B2%A9%E6%B3%A2%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B5%E3%82%A4%E3%82%A8%E3%83%B3%E3%82%B9) \u306e\u300c\u5358\u8a9e\u306e\u610f\u5473\u3092\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306b\u6559\u3048\u308b\u300d\n- [Spark\u306b\u3088\u308b\u5b9f\u8df5\u30c7\u30fc\u30bf\u89e3\u6790 \u2015\u5927\u898f\u6a21\u30c7\u30fc\u30bf\u306e\u305f\u3081\u306e\u6a5f\u68b0\u5b66\u7fd2\u4e8b\u4f8b\u96c6](http://www.amazon.co.jp/Spark%E3%81%AB%E3%82%88%E3%82%8B%E5%AE%9F%E8%B7%B5%E3%83%87%E3%83%BC%E3%82%BF%E8%A7%A3%E6%9E%90-%E2%80%95%E5%A4%A7%E8%A6%8F%E6%A8%A1%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92%E4%BA%8B%E4%BE%8B%E9%9B%86-Sandy-Ryza/dp/487311750X/ref=sr_1_4?ie=UTF8&qid=1463105820&sr=8-4&keywords=spark) \u306e\u300c6\u7ae0 \u6f5c\u5728\u610f\u5473\u89e3\u6790\u3092\u4f7f\u3063\u305fWikipedia\u306e\u7406\u89e3\u300d\n- [\u4e0a\u8a18\u300c6\u7ae0 \u6f5c\u5728\u610f\u5473\u89e3\u6790\u3092\u4f7f\u3063\u305fWikipedia\u306e\u7406\u89e3\u300d\u306e\u30b3\u30fc\u30c9](https://github.com/sryza/aas/tree/master/ch06-lsa/src/main/scala/com/cloudera/datascience/lsa)\n\n\u203b Spark / Scala / \u81ea\u7136\u8a00\u8a9e\u51e6\u7406 \u306b\u8a73\u3057\u3044\u65b9\u3001\u5909\u306a\u3068\u3053\u308d\u304c\u3042\u308c\u3070\u30c4\u30c3\u30b3\u30df\u3092\u5165\u308c\u3066\u3044\u305f\u3060\u3051\u308b\u3068\u5927\u5909\u52a9\u304b\u308a\u307e\u3059\u3002\n", "tags": ["\u6a5f\u68b0\u5b66\u7fd2", "\u81ea\u7136\u8a00\u8a9e\u51e6\u7406", "\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af", "Spark1.6.1", "Scala2.11.8"]}