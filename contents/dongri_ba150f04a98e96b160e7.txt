{"context": "\u8ffd\u8a18 (2016/04/12)\nBot\u306e\u6a5f\u80fd\u8ffd\u52a0+\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3057\u3066\u308b\u3046\u3061\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u5316\u3057\u307e\u3057\u305f\nhttps://github.com/dongri/line-bot-sdk-go\n\u4eca\u306e\u3068\u3053\u308d\u3001text, sticker, image, video\u7c21\u5358\u306b\u9001\u308c\u307e\u3059\u3002\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u3082\u7c21\u5358\u306b\u53d6\u5f97\u53ef\u80fd\u3067\u3059\u3002\n\n\u307e\u305a\u30b3\u30fc\u30c9\u304b\u3089\u3002\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308b\u3068\u305d\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\u30b5\u30f3\u30d7\u30eb\u3002\u4e0b\u306b\u3061\u3083\u3093\u3068\u3057\u305f\u3084\u3064\u3082\u3042\u308a\u307e\u3059\u3002\n\npackage main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"log\"\n    \"net/http\"\n    \"net/url\"\n    \"os\"\n    \"time\"\n)\n\n// ReceivedMessage ...\ntype ReceivedMessage struct {\n    Result []Result `json:\"result\"`\n}\n\n// Result ...\ntype Result struct {\n    ID          string   `json:\"id\"`\n    From        string   `json:\"from\"`\n    FromChannel int      `json:\"fromChannel\"`\n    To          []string `json:\"to\"`\n    ToChannel   int      `json:\"toChannel\"`\n    EventType   string   `json:\"eventType\"`\n    Content     Content  `json:\"content\"`\n}\n\n// SendMessage ..\ntype SendMessage struct {\n    To        []string `json:\"to\"`\n    ToChannel int      `json:\"toChannel\"`\n    EventType string   `json:\"eventType\"`\n    Content   Content  `json:\"content\"`\n}\n\n// Content ...\ntype Content struct {\n    ID          string   `json:\"id\"`\n    ContentType int      `json:\"contentType\"`\n    From        string   `json:\"from\"`\n    CreatedTime int      `json:\"createdTime\"`\n    To          []string `json:\"to\"`\n    ToType      int      `json:\"toType\"`\n    Text        string   `json:\"text\"`\n}\n\n// const ...\nconst (\n    EndPoint  = \"https://trialbot-api.line.me\"\n    ToChannel = 1383378250\n    EventType = \"138311608800106203\"\n)\n\nfunc main() {\n    http.HandleFunc(\"/\", helloHandler)\n    http.HandleFunc(\"/callback\", callbackHandler)\n    port := os.Getenv(\"PORT\")\n    addr := fmt.Sprintf(\":%s\", port)\n    http.ListenAndServe(addr, nil)\n}\n\nfunc helloHandler(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintf(w, \"Hello, LINE Bot\")\n}\n\nfunc callbackHandler(w http.ResponseWriter, r *http.Request) {\n    decoder := json.NewDecoder(r.Body)\n    var m ReceivedMessage\n    err := decoder.Decode(&m)\n    if err != nil {\n        log.Println(err)\n    }\n    apiURI := EndPoint + \"/v1/events\"\n    for _, result := range m.Result {\n        from := result.Content.From\n        text := result.Content.Text\n        content := new(Content)\n        content.ContentType = result.Content.ContentType\n        content.ToType = result.Content.ToType\n        content.Text = text\n        request(apiURI, \"POST\", []string{from}, *content)\n    }\n}\n\nfunc request(endpointURL string, method string, to []string, content Content) {\n    m := &SendMessage{}\n    m.To = to\n    m.ToChannel = ToChannel\n    m.EventType = EventType\n    m.Content = content\n    b, err := json.Marshal(m)\n    if err != nil {\n        log.Print(err)\n    }\n    req, err := http.NewRequest(method, endpointURL, bytes.NewBuffer(b))\n    if err != nil {\n        log.Print(err)\n    }\n    req = setHeader(req)\n    client := &http.Client{\n        Transport: &http.Transport{Proxy: http.ProxyURL(getProxyURL())},\n        Timeout:   time.Duration(30 * time.Second),\n    }\n    res, err := client.Do(req)\n    if err != nil {\n        log.Print(err)\n    }\n    defer res.Body.Close()\n\n    var result map[string]interface{}\n    body, err := ioutil.ReadAll(res.Body)\n    if err != nil {\n        log.Print(err)\n    }\n    if err := json.Unmarshal(body, &result); err != nil {\n        log.Print(err)\n    }\n    log.Print(result)\n}\n\nfunc setHeader(req *http.Request) *http.Request {\n    req.Header.Add(\"Content-Type\", \"application/json; charset=UTF-8\")\n    req.Header.Add(\"X-Line-ChannelID\", os.Getenv(\"ChannelID\"))\n    req.Header.Add(\"X-Line-ChannelSecret\", os.Getenv(\"ChannelSecret\"))\n    req.Header.Add(\"X-Line-Trusted-User-With-ACL\", os.Getenv(\"MID\"))\n    return req\n}\n\nfunc getProxyURL() *url.URL {\n    proxyURL, err := url.Parse(os.Getenv(\"ProxyURL\"))\n    if err != nil {\n        log.Print(err)\n    }\n    return proxyURL\n}\n\n\n\u3084\u3063\u3066\u308b\u3046\u3061\u306b\u8a70\u307e\u3063\u305f\u3068\u3053\u308d\u3092\u307e\u3068\u3081\n\ncallback URL\u306fhttps\u306e\u307f\n\u4eca\u307e\u3067\u7c21\u5358\u306a\u30b5\u30f3\u30d7\u30eb\u306f\u81ea\u524d\u306e\u30b5\u30fc\u30d0\u30fc\u3067\u3084\u3063\u3066\u3066\u3001\u5f53\u7136https\u5bfe\u5fdc\u3057\u3066\u306a\u3044\u3002\u3057\u304b\u3057LINE Bot\u306ecallback\u306fhttps\u306bport\u3092443\u306b\u6307\u5b9a\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002let's encrypt\u3067https\u5316\u3002\u3057\u304b\u3057callback\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u6765\u306a\u3044\u3002heroku\u3067\u306a\u3093\u3068\u304b\u3059\u308b\u3068\u6c7a\u3081\u308b\u3002\n\u8a31\u53ef\u3057\u305fip\u3057\u304bsendmessage\u3067\u304d\u306a\u3044\nheroku\u306b\u30c7\u30d7\u30ed\u30a4\u3057\u3066\u30ed\u30b0\u3092\u898b\u3066\u308b\u3068ip\u3067\u5f3e\u304b\u308c\u3066\u308b\u3002\u6307\u5b9a\u3057\u305fip\u3067\u3057\u304bpost\u3067\u304d\u306a\u3044\u307f\u305f\u3044\u3002bot\u7ba1\u7406\u30da\u30fc\u30b8\u306bwhitelist\u304c\u3042\u3063\u3066\u305d\u3053\u306b\u81ea\u5206\u306e\u30b5\u30fc\u30d0\u30fcip\u8ffd\u52a0\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3089\u3057\u3044\u3002\u3057\u304b\u3057\u3001heroku\u306f\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u5ea6\u306bip\u304c\u5909\u308f\u3063\u3066\u3066\u4f7f\u3044\u3082\u306e\u306b\u306a\u3089\u306a\u3044\u3002\u3053\u3061\u3089\u306e\u8a18\u4e8b\uff08 http://qiita.com/yuya_takeyama/items/0660a59d13e2cd0b2516 \uff09\u306b\u3082\u304b\u3044\u3066\u3042\u308b\u3088\u3046\u306bproxy\u3092\u4f7f\u3063\u3066proxy\u306eip\u3092\u6307\u5b9a\u3059\u308c\u3070\u89e3\u6c7a\u3067\u304d\u308b\u3002\ncontentType\u3067\u5f3e\u304b\u308c\u3066\u308b\nheader\u306econtent-type\u304b\u3068\u601d\u3063\u305f\u304c\u30e1\u30c3\u30bb\u30fc\u30b8content\u306econtentType\u3092\u3061\u3083\u3093\u3068\u6307\u5b9a\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\n\u5148\u77401\u4e07\u3068\u66f8\u3044\u3066\u3042\u308b\u306e\u304c\u602a\u3057\u3044\n1\u4e07\u67a0\u5916\u3067\u3082Bot\u306e\u767b\u9332\u3067\u304d\u308b\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u7591\u3063\u3066\u308b\u3002\u81ea\u5206\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u306f\u6628\u65e5\u65e9\u3081\u306b\u767b\u9332\u3057\u305f\u306e\u3067\u3001\u4f7f\u3048\u308b\u304c\u30011\u30a2\u30ab\u30a6\u30f3\u30c81Bot\u306e\u5236\u9650\u306e\u305f\u3081\u4eca\u65e5\u5ac1\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u3067\u767b\u9332\u3057\u305f\u3051\u3069\u3001callback\u304c\u6765\u306a\u3044\u3002\n\n\u3068\u308a\u3042\u3048\u305a\u96fb\u8eca\u3067\u3082 haskell\n\n\n**\u8ffd\u8a18 (2016/04/12)**\nBot\u306e\u6a5f\u80fd\u8ffd\u52a0+\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3057\u3066\u308b\u3046\u3061\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u5316\u3057\u307e\u3057\u305f\nhttps://github.com/dongri/line-bot-sdk-go\n\u4eca\u306e\u3068\u3053\u308d\u3001text, sticker, image, video\u7c21\u5358\u306b\u9001\u308c\u307e\u3059\u3002\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u3082\u7c21\u5358\u306b\u53d6\u5f97\u53ef\u80fd\u3067\u3059\u3002\n\n---\n\n\u307e\u305a\u30b3\u30fc\u30c9\u304b\u3089\u3002\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308b\u3068\u305d\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\u30b5\u30f3\u30d7\u30eb\u3002\u4e0b\u306b\u3061\u3083\u3093\u3068\u3057\u305f\u3084\u3064\u3082\u3042\u308a\u307e\u3059\u3002\n\n```go\n\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"time\"\n)\n\n// ReceivedMessage ...\ntype ReceivedMessage struct {\n\tResult []Result `json:\"result\"`\n}\n\n// Result ...\ntype Result struct {\n\tID          string   `json:\"id\"`\n\tFrom        string   `json:\"from\"`\n\tFromChannel int      `json:\"fromChannel\"`\n\tTo          []string `json:\"to\"`\n\tToChannel   int      `json:\"toChannel\"`\n\tEventType   string   `json:\"eventType\"`\n\tContent     Content  `json:\"content\"`\n}\n\n// SendMessage ..\ntype SendMessage struct {\n\tTo        []string `json:\"to\"`\n\tToChannel int      `json:\"toChannel\"`\n\tEventType string   `json:\"eventType\"`\n\tContent   Content  `json:\"content\"`\n}\n\n// Content ...\ntype Content struct {\n\tID          string   `json:\"id\"`\n\tContentType int      `json:\"contentType\"`\n\tFrom        string   `json:\"from\"`\n\tCreatedTime int      `json:\"createdTime\"`\n\tTo          []string `json:\"to\"`\n\tToType      int      `json:\"toType\"`\n\tText        string   `json:\"text\"`\n}\n\n// const ...\nconst (\n\tEndPoint  = \"https://trialbot-api.line.me\"\n\tToChannel = 1383378250\n\tEventType = \"138311608800106203\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", helloHandler)\n\thttp.HandleFunc(\"/callback\", callbackHandler)\n\tport := os.Getenv(\"PORT\")\n\taddr := fmt.Sprintf(\":%s\", port)\n\thttp.ListenAndServe(addr, nil)\n}\n\nfunc helloHandler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello, LINE Bot\")\n}\n\nfunc callbackHandler(w http.ResponseWriter, r *http.Request) {\n\tdecoder := json.NewDecoder(r.Body)\n\tvar m ReceivedMessage\n\terr := decoder.Decode(&m)\n\tif err != nil {\n\t\tlog.Println(err)\n\t}\n\tapiURI := EndPoint + \"/v1/events\"\n\tfor _, result := range m.Result {\n\t\tfrom := result.Content.From\n\t\ttext := result.Content.Text\n\t\tcontent := new(Content)\n\t\tcontent.ContentType = result.Content.ContentType\n\t\tcontent.ToType = result.Content.ToType\n\t\tcontent.Text = text\n\t\trequest(apiURI, \"POST\", []string{from}, *content)\n\t}\n}\n\nfunc request(endpointURL string, method string, to []string, content Content) {\n\tm := &SendMessage{}\n\tm.To = to\n\tm.ToChannel = ToChannel\n\tm.EventType = EventType\n\tm.Content = content\n\tb, err := json.Marshal(m)\n\tif err != nil {\n\t\tlog.Print(err)\n\t}\n\treq, err := http.NewRequest(method, endpointURL, bytes.NewBuffer(b))\n\tif err != nil {\n\t\tlog.Print(err)\n\t}\n\treq = setHeader(req)\n\tclient := &http.Client{\n\t\tTransport: &http.Transport{Proxy: http.ProxyURL(getProxyURL())},\n\t\tTimeout:   time.Duration(30 * time.Second),\n\t}\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Print(err)\n\t}\n\tdefer res.Body.Close()\n\n\tvar result map[string]interface{}\n\tbody, err := ioutil.ReadAll(res.Body)\n\tif err != nil {\n\t\tlog.Print(err)\n\t}\n\tif err := json.Unmarshal(body, &result); err != nil {\n\t\tlog.Print(err)\n\t}\n\tlog.Print(result)\n}\n\nfunc setHeader(req *http.Request) *http.Request {\n\treq.Header.Add(\"Content-Type\", \"application/json; charset=UTF-8\")\n\treq.Header.Add(\"X-Line-ChannelID\", os.Getenv(\"ChannelID\"))\n\treq.Header.Add(\"X-Line-ChannelSecret\", os.Getenv(\"ChannelSecret\"))\n\treq.Header.Add(\"X-Line-Trusted-User-With-ACL\", os.Getenv(\"MID\"))\n\treturn req\n}\n\nfunc getProxyURL() *url.URL {\n\tproxyURL, err := url.Parse(os.Getenv(\"ProxyURL\"))\n\tif err != nil {\n\t\tlog.Print(err)\n\t}\n\treturn proxyURL\n}\n```\n\n# \u3084\u3063\u3066\u308b\u3046\u3061\u306b\u8a70\u307e\u3063\u305f\u3068\u3053\u308d\u3092\u307e\u3068\u3081\n\n1. callback URL\u306fhttps\u306e\u307f\n\u4eca\u307e\u3067\u7c21\u5358\u306a\u30b5\u30f3\u30d7\u30eb\u306f\u81ea\u524d\u306e\u30b5\u30fc\u30d0\u30fc\u3067\u3084\u3063\u3066\u3066\u3001\u5f53\u7136https\u5bfe\u5fdc\u3057\u3066\u306a\u3044\u3002\u3057\u304b\u3057LINE Bot\u306ecallback\u306fhttps\u306bport\u3092443\u306b\u6307\u5b9a\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002let's encrypt\u3067https\u5316\u3002\u3057\u304b\u3057callback\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u6765\u306a\u3044\u3002heroku\u3067\u306a\u3093\u3068\u304b\u3059\u308b\u3068\u6c7a\u3081\u308b\u3002\n\n2. \u8a31\u53ef\u3057\u305fip\u3057\u304bsendmessage\u3067\u304d\u306a\u3044\nheroku\u306b\u30c7\u30d7\u30ed\u30a4\u3057\u3066\u30ed\u30b0\u3092\u898b\u3066\u308b\u3068ip\u3067\u5f3e\u304b\u308c\u3066\u308b\u3002\u6307\u5b9a\u3057\u305fip\u3067\u3057\u304bpost\u3067\u304d\u306a\u3044\u307f\u305f\u3044\u3002bot\u7ba1\u7406\u30da\u30fc\u30b8\u306bwhitelist\u304c\u3042\u3063\u3066\u305d\u3053\u306b\u81ea\u5206\u306e\u30b5\u30fc\u30d0\u30fcip\u8ffd\u52a0\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3089\u3057\u3044\u3002\u3057\u304b\u3057\u3001heroku\u306f\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u5ea6\u306bip\u304c\u5909\u308f\u3063\u3066\u3066\u4f7f\u3044\u3082\u306e\u306b\u306a\u3089\u306a\u3044\u3002\u3053\u3061\u3089\u306e\u8a18\u4e8b\uff08 http://qiita.com/yuya_takeyama/items/0660a59d13e2cd0b2516 \uff09\u306b\u3082\u304b\u3044\u3066\u3042\u308b\u3088\u3046\u306bproxy\u3092\u4f7f\u3063\u3066proxy\u306eip\u3092\u6307\u5b9a\u3059\u308c\u3070\u89e3\u6c7a\u3067\u304d\u308b\u3002\n\n3. contentType\u3067\u5f3e\u304b\u308c\u3066\u308b\nheader\u306econtent-type\u304b\u3068\u601d\u3063\u305f\u304c\u30e1\u30c3\u30bb\u30fc\u30b8content\u306econtentType\u3092\u3061\u3083\u3093\u3068\u6307\u5b9a\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\n\n4. \u5148\u77401\u4e07\u3068\u66f8\u3044\u3066\u3042\u308b\u306e\u304c\u602a\u3057\u3044\n1\u4e07\u67a0\u5916\u3067\u3082Bot\u306e\u767b\u9332\u3067\u304d\u308b\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u7591\u3063\u3066\u308b\u3002\u81ea\u5206\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u306f\u6628\u65e5\u65e9\u3081\u306b\u767b\u9332\u3057\u305f\u306e\u3067\u3001\u4f7f\u3048\u308b\u304c\u30011\u30a2\u30ab\u30a6\u30f3\u30c81Bot\u306e\u5236\u9650\u306e\u305f\u3081\u4eca\u65e5\u5ac1\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u3067\u767b\u9332\u3057\u305f\u3051\u3069\u3001callback\u304c\u6765\u306a\u3044\u3002\n\n\u3068\u308a\u3042\u3048\u305a\u96fb\u8eca\u3067\u3082 haskell\n\n<img width=\"170\" alt=\"Screen Shot 2016-04-08 at 11.21.08 PM.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/15490/b5b4e023-c75f-b194-53f4-4bcff3ac766f.png\">\n\n![Screenshot_20160408-233023.png](https://qiita-image-store.s3.amazonaws.com/0/15490/085ff39a-eb68-3ab1-3d9f-5ce851e98f67.png)\n", "tags": ["Line", "bot", "golang", "Haskell", "Go"]}