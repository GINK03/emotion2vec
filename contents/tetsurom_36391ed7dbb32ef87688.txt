{"tags": ["Qt", "C++", "Rx", "RxCpp"], "context": "Qt Advent Calendar 2016 3\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n\u8981\u7d04\nQt\u306e\u30b7\u30b0\u30ca\u30eb\u3068\u30a4\u30d9\u30f3\u30c8\u3092Observable\u306b\u5909\u63db\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092RxCpp\u3067\u4f5c\u308a\u307e\u3057\u305f\u3002\n\nReactive Extensions\nReactive Extensions(Rx)\u306e\u89e3\u8aac\u306f\u3059\u3067\u306b\u7121\u6570\u306b\u3042\u308b\u306e\u3067\u7701\u7565\u3057\u307e\u3059\u3002\n\n\u306a\u305cReactive Extensions\u3092\u5c0e\u5165\u3059\u308b\u306e\u304b\uff1f\n\n\u3053\u3053\u3067\u306f\u3001Rx\u306eC++\u5b9f\u88c5\u3067\u3042\u308bRxCpp\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\nObservable\u3068\u30b7\u30b0\u30ca\u30eb\nObservable\u3068Qt\u306e\u30b7\u30b0\u30ca\u30eb/\u30b9\u30ed\u30c3\u30c8\u306f\u3001\u3069\u3061\u3089\u3082Observer\u30d1\u30bf\u30fc\u30f3\u3067\u3042\u308b\u70b9\u3067\u540c\u3058\u3067\u3059\u304c\u3001Rx\u3067\u306fObservable\u304b\u3089\u65b0\u305f\u306aObservable\u3092\u4f5c\u308b\u95a2\u6570\u304c\u8c4a\u5bcc\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u5229\u70b9\u304c\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u8a00\u8a9e\u3092\u8d85\u3048\u3066\u540c\u3058Rx\u306eAPI\u304c\u4f7f\u3048\u308b\u3068\u3044\u3046\u306e\u3082(Rx\u3092\u77e5\u3063\u3066\u3044\u308b\u4eba\u306b\u306f)\u5b66\u7fd2\u30b3\u30b9\u30c8\u304c\u4f4e\u304f\u306a\u308a\u5b09\u3057\u3044\u3067\u3059\u3002\n\u305d\u3053\u3067\u3001\u30b7\u30b0\u30ca\u30eb\u3092Observable\u3078\u5909\u63db\u3057\u307e\u3059\u3002\nauto lineedit = new QLineEdit;\n\nrxcpp::observable<QString> textChangedStream = rxcpp::observable<>::create<QString>(\n    [lineedit](rxcpp::subscriber<QString> s){\n        QObject::connect(\n            lineedit,\n            &QLineEdit::textChanged,\n            [s](const QString& v){ s.on_next(v); }\n        );\n    }\n);\n\nRxCpp\u3067observable<T>\u3092\u4f5c\u308b\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u95a2\u6570\u306e1\u3064\u306bcreate\u95a2\u6570\u304c\u3042\u308a\u307e\u3059\u3002create\u95a2\u6570\u306fsubscriber<T>\u3092\u53d7\u3051\u53d6\u308b\u95a2\u6570\u3092\u5f15\u6570\u306b\u53d6\u308a\u307e\u3059\u3002\u6e21\u3057\u305f\u95a2\u6570\u306e\u4e2d\u3067\u5f15\u6570\u306esubscriber<T>\u306eon_next\u95a2\u6570\u306b\u6e21\u3057\u305f\u5024\u304cobservable<T>\u306b\u6d41\u308c\u307e\u3059\u3002\n\u4e0a\u306e\u4f8b\u3067\u306f\u3001s.on_next(\"Hello Observable\");\u3068\u3059\u308b\u3053\u3068\u3067\"Hello Observable\"\u304c\u6d41\u308c\u307e\u3059\u3002\n\u3042\u3068\u306f\u30b7\u30b0\u30ca\u30eb\u304c\u6765\u305f\u6642\u306bon_next\u3092\u547c\u3079\u3070\u3088\u304f\u3001\u30b7\u30b0\u30ca\u30eb\u3092on_next\u3092\u547c\u3076\u30e9\u30e0\u30c0\u5f0f\u3078connect\u3059\u308b\u3053\u3068\u3067observable<T>\u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002\n\nObservable\u3068\u30a4\u30d9\u30f3\u30c8\nQt\u306b\u306f\u30b7\u30b0\u30ca\u30eb\u306e\u4ed6\u306b\u30a4\u30d9\u30f3\u30c8\u3082\u3042\u308a\u307e\u3059\u3002\u30a4\u30d9\u30f3\u30c8\u3082Observable\u306b\u5909\u63db\u3067\u304d\u308c\u3070\u3001\u30b7\u30b0\u30ca\u30eb\u3068\u30a4\u30d9\u30f3\u30c8\u3092\u610f\u8b58\u305b\u305a\u306bObservable\u3068\u3057\u3066\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u3066\u4fbf\u5229\u305d\u3046\u3067\u3059\u3002\nQt\u3067\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u3059\u308b\u65b9\u6cd5\u306f\u3001\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u30fc\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3059\u308b\u65b9\u6cd5\u306e\u4ed6\u306b\u3001\u5916\u90e8\u304b\u3089\u30a4\u30d9\u30f3\u30c8\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u8a2d\u5b9a\u3057\u3066\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3059\u308b\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\n\u6b21\u306e\u3088\u3046\u306a\u30a4\u30d9\u30f3\u30c8\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u4f5c\u3063\u3066\u304a\u304d\u3001\nclass EventFilter: public QObject {\npublic:\n    EventFilter(QObject* parent, QEvent::Type type, rxcpp::subscriber<QEvent*> s)\n        : QObject(parent), type(type), s(s) {}\n    ~EventFilter(){\n        s.on_completed();\n    }\n\n    bool eventFilter(QObject* obj, QEvent* event){\n        if(event->type() == type){\n            s.on_next(event);\n        }\n        return QObject::eventFilter(obj, event);\n    }\nprivate:\n    QEvent::Type type;\n    rxcpp::subscriber<QEvent*> s;\n};\n\n\u76ee\u7684\u306eQObject\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3053\u3068\u3067\u30a4\u30d9\u30f3\u30c8\u3092Observable\u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002\nauto lineedit = new QLineEdit;\n\nrxcpp::observable<QEvent*> keyPressStream = rxcpp::observable<>::create<QEvent*>(\n    [](rxcpp::subscriber<QEvent*> s){\n        lineedit->installEventFilter(new EventFilter(lineedit, QEvent::KeyPress, s));\n    }\n);\n\n\nRxQt\n\u30b7\u30b0\u30ca\u30eb\u3068\u30a4\u30d9\u30f3\u30c8\u3092Observable\u306b\u5909\u63db\u3059\u308b\u51e6\u7406\u3092\u305d\u306e\u90fd\u5ea6\u66f8\u304f\u306e\u306f\u5927\u5909\u306a\u306e\u3067\u30e9\u30a4\u30d6\u30e9\u30ea\u5316\u3057\u307e\u3057\u305f\u3002\n\nRxQt\n\n\n\u6ce8\u610f\nRxCpp\u304c\u52d5\u3051\u3070\u5927\u4e08\u592b\u3060\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u307e\u3060Visual C++ 2015\u3067\u3057\u304b\u8a66\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\nAPI\n\nfrom_signal\ntemplate<class Q, class Ret>\nrxcpp::observable<long>\nrxqt::from_signal(QObject* object, Ret(Q::*)(void))\n\ntemplate<class Q, class Ret, class Arg>\nrxcpp::observable<std::remove_const<std::remove_reference<Arg>::type>::type\nrxqt::from_signal(QObject* object, Ret(Q::*)(Arg))\n\ntemplate<class Q, class Ret, class ...Args>\nrxcpp::observable<std::tuple<std::remove_const<std::remove_reference<Args>::type>::type...>\nrxqt::from_signal(QObject* object, Ret(Q::*)(Args...))\n\n\u30b7\u30b0\u30ca\u30eb\u3092Observable\u306b\u5909\u63db\u3057\u307e\u3059\u3002observable\u306e\u578b\u306f\u30b7\u30b0\u30ca\u30eb\u306e\u5f15\u6570\u306e\u578b\u304b\u3089\u63a8\u8ad6\u3055\u308c\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u5f15\u6570\u306b\u3064\u3044\u3066\u3044\u305f\u53c2\u7167\u3068const\u306f\u5916\u308c\u307e\u3059\u3002\n\n0\u5f15\u6570\u306e\u5834\u5408\nrxcpp\u3067observable<void>\u306f\u4f5c\u308c\u306a\u3044\u305f\u3081\u3001observable<long>\u306b\u306a\u308a\u307e\u3059(\u5024\u306f\u30b7\u30b0\u30ca\u30eb\u304c\u5c4a\u3044\u305f\u56de\u6570)\u3002 \n1\u5f15\u6570\u306e\u5834\u5408\nobservable<(\u5f15\u6570\u306e\u578b)> \u306b\u306a\u308a\u307e\u3059\u3002\nn\u5f15\u6570\u306e\u5834\u5408(n>1)\nobservable<std::tuple<(\u5f15\u6570\u306e\u578b)>> \u306b\u306a\u308a\u307e\u3059\u3002\n\n\nexample\nauto lineedit = new QLineEdit;\n\n// returnPressed\u30b7\u30b0\u30ca\u30eb\u306e\u578b\u306f void (QLineEdit::*)(void) \u306a\u306e\u3067\u3001\n// observable<long> \u306b\u306a\u308b\nrxcpp::observable<long> returnPressedStream\n    = rxqt::from_signal(lineedit, &QLineEdit::returnPressed)\n\n// textChanged\u30b7\u30b0\u30ca\u30eb\u306e\u578b\u306f void (QLineEdit::*)(const QString&) \u306a\u306e\u3067\u3001\n// observable<QString> \u306b\u306a\u308b\nrxcpp::observable<QString> textChangedStream\n    = rxqt::from_signal(lineedit, &QLineEdit::textChanged);\n\n// cursorPositionChanged\u30b7\u30b0\u30ca\u30eb\u306e\u578b\u306f void (QLineEdit::*)(int, int) \u306a\u306e\u3067\u3001\n// observable<std::tuple<int, int>> \u306b\u306a\u308b\nrxcpp::observable<std::tuple<int, int>> cursorPositionChangedStream\n    = rxqt::from_signal(lineedit, &QLineEdit::cursorPositionChanged);\n\n\n\nfrom_event\nrxcpp::observable<QEvent*>\nrxqt::from_event(QObject* object, QEvent::Type type)\n\n\u30a4\u30d9\u30f3\u30c8\u3092Observable\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n\nexample\nauto lineedit = new QLineEdit;\n\nrxqt::from_event(lineedit, QEvent::KeyPress)\n    .subscribe([](const QEvent* e){\n        auto ke = static_cast<const QKeyEvent*>(e);\n        qDebug() << ke->key();\n    });\n\n\n\n\u30b5\u30f3\u30d7\u30eb\n2\u3064\u306e\u30dc\u30bf\u30f3\u30922\u3064\u3068\u3082\u30af\u30ea\u30c3\u30af\u3057\u305f\u3089\u300c\u4e21\u65b9\u62bc\u3057\u305f\u300d\u3068\u51fa\u529b\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\n\nexample\nauto button1 = new QPushButton(\"A\");\nauto button2 = new QPushButton(\"B\");\n\nrxqt::from_signal(button1, static_cast<void(QPushButton::*)(bool)>(&QPushButton::clicked))\n    .zip(rxqt::from_signal(button2, static_cast<void(QPushButton::*)(bool)>(&QPushButton::clicked)))\n    .subscribe([](auto&&){ qDebug() << \"\u4e21\u65b9\u62bc\u3057\u305f\"; });\n\n\n(\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u3068\u30e1\u30f3\u30d0\u30fc\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306b\u5bfe\u3057\u3066static_cast\u304c\u5fc5\u8981\u306b\u306a\u308b\u306e\u304c\u5c11\u3005\u6b8b\u5ff5)\n\n\u307e\u3068\u3081\n\u30b7\u30b0\u30ca\u30eb\u3068\u30a4\u30d9\u30f3\u30c8\u3092Observable\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3067Qt\u3067Rx\u304c\u4f7f\u3048\u307e\u3059\u3002\n[Qt Advent Calendar 2016](http://qiita.com/advent-calendar/2016/qt) 3\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n# \u8981\u7d04\n[Qt\u306e\u30b7\u30b0\u30ca\u30eb\u3068\u30a4\u30d9\u30f3\u30c8\u3092Observable\u306b\u5909\u63db\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea](https://github.com/tetsurom/rxqt)\u3092[RxCpp](https://github.com/Reactive-Extensions/RxCpp)\u3067\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n# Reactive Extensions\n\nReactive Extensions(Rx)\u306e\u89e3\u8aac\u306f\u3059\u3067\u306b\u7121\u6570\u306b\u3042\u308b\u306e\u3067\u7701\u7565\u3057\u307e\u3059\u3002\n\n* [\u306a\u305cReactive Extensions\u3092\u5c0e\u5165\u3059\u308b\u306e\u304b\uff1f](http://blog.mmmcorp.co.jp/blog/2016/07/22/why-rx/)\n\n\u3053\u3053\u3067\u306f\u3001Rx\u306eC++\u5b9f\u88c5\u3067\u3042\u308b[RxCpp](https://github.com/Reactive-Extensions/RxCpp)\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n# Observable\u3068\u30b7\u30b0\u30ca\u30eb\n\nObservable\u3068Qt\u306e\u30b7\u30b0\u30ca\u30eb/\u30b9\u30ed\u30c3\u30c8\u306f\u3001\u3069\u3061\u3089\u3082Observer\u30d1\u30bf\u30fc\u30f3\u3067\u3042\u308b\u70b9\u3067\u540c\u3058\u3067\u3059\u304c\u3001Rx\u3067\u306fObservable\u304b\u3089\u65b0\u305f\u306aObservable\u3092\u4f5c\u308b\u95a2\u6570\u304c\u8c4a\u5bcc\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u5229\u70b9\u304c\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u8a00\u8a9e\u3092\u8d85\u3048\u3066\u540c\u3058Rx\u306eAPI\u304c\u4f7f\u3048\u308b\u3068\u3044\u3046\u306e\u3082(Rx\u3092\u77e5\u3063\u3066\u3044\u308b\u4eba\u306b\u306f)\u5b66\u7fd2\u30b3\u30b9\u30c8\u304c\u4f4e\u304f\u306a\u308a\u5b09\u3057\u3044\u3067\u3059\u3002\n\n\u305d\u3053\u3067\u3001\u30b7\u30b0\u30ca\u30eb\u3092Observable\u3078\u5909\u63db\u3057\u307e\u3059\u3002\n\n```cpp\nauto lineedit = new QLineEdit;\n\nrxcpp::observable<QString> textChangedStream = rxcpp::observable<>::create<QString>(\n    [lineedit](rxcpp::subscriber<QString> s){\n        QObject::connect(\n            lineedit,\n            &QLineEdit::textChanged,\n            [s](const QString& v){ s.on_next(v); }\n        );\n    }\n);\n```\n\nRxCpp\u3067`observable<T>`\u3092\u4f5c\u308b\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u95a2\u6570\u306e1\u3064\u306b`create`\u95a2\u6570\u304c\u3042\u308a\u307e\u3059\u3002`create`\u95a2\u6570\u306f`subscriber<T>`\u3092\u53d7\u3051\u53d6\u308b\u95a2\u6570\u3092\u5f15\u6570\u306b\u53d6\u308a\u307e\u3059\u3002\u6e21\u3057\u305f\u95a2\u6570\u306e\u4e2d\u3067\u5f15\u6570\u306e`subscriber<T>`\u306e`on_next`\u95a2\u6570\u306b\u6e21\u3057\u305f\u5024\u304c`observable<T>`\u306b\u6d41\u308c\u307e\u3059\u3002\n\n\u4e0a\u306e\u4f8b\u3067\u306f\u3001`s.on_next(\"Hello Observable\");`\u3068\u3059\u308b\u3053\u3068\u3067`\"Hello Observable\"`\u304c\u6d41\u308c\u307e\u3059\u3002\n\n\u3042\u3068\u306f\u30b7\u30b0\u30ca\u30eb\u304c\u6765\u305f\u6642\u306b`on_next`\u3092\u547c\u3079\u3070\u3088\u304f\u3001\u30b7\u30b0\u30ca\u30eb\u3092`on_next`\u3092\u547c\u3076\u30e9\u30e0\u30c0\u5f0f\u3078`connect`\u3059\u308b\u3053\u3068\u3067`observable<T>`\u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002\n\n# Observable\u3068\u30a4\u30d9\u30f3\u30c8\n\nQt\u306b\u306f\u30b7\u30b0\u30ca\u30eb\u306e\u4ed6\u306b\u30a4\u30d9\u30f3\u30c8\u3082\u3042\u308a\u307e\u3059\u3002\u30a4\u30d9\u30f3\u30c8\u3082Observable\u306b\u5909\u63db\u3067\u304d\u308c\u3070\u3001\u30b7\u30b0\u30ca\u30eb\u3068\u30a4\u30d9\u30f3\u30c8\u3092\u610f\u8b58\u305b\u305a\u306bObservable\u3068\u3057\u3066\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u3066\u4fbf\u5229\u305d\u3046\u3067\u3059\u3002\n\nQt\u3067\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u3059\u308b\u65b9\u6cd5\u306f\u3001\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u30fc\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3059\u308b\u65b9\u6cd5\u306e\u4ed6\u306b\u3001\u5916\u90e8\u304b\u3089\u30a4\u30d9\u30f3\u30c8\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u8a2d\u5b9a\u3057\u3066\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3059\u308b\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u6b21\u306e\u3088\u3046\u306a\u30a4\u30d9\u30f3\u30c8\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u4f5c\u3063\u3066\u304a\u304d\u3001\n\n```cpp\nclass EventFilter: public QObject {\npublic:\n    EventFilter(QObject* parent, QEvent::Type type, rxcpp::subscriber<QEvent*> s)\n        : QObject(parent), type(type), s(s) {}\n    ~EventFilter(){\n        s.on_completed();\n    }\n\n    bool eventFilter(QObject* obj, QEvent* event){\n        if(event->type() == type){\n            s.on_next(event);\n        }\n        return QObject::eventFilter(obj, event);\n    }\nprivate:\n    QEvent::Type type;\n    rxcpp::subscriber<QEvent*> s;\n};\n```\n\n\u76ee\u7684\u306eQObject\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3053\u3068\u3067\u30a4\u30d9\u30f3\u30c8\u3092Observable\u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002\n\n```cpp\nauto lineedit = new QLineEdit;\n\nrxcpp::observable<QEvent*> keyPressStream = rxcpp::observable<>::create<QEvent*>(\n    [](rxcpp::subscriber<QEvent*> s){\n        lineedit->installEventFilter(new EventFilter(lineedit, QEvent::KeyPress, s));\n    }\n);\n```\n\n# RxQt\n\n\u30b7\u30b0\u30ca\u30eb\u3068\u30a4\u30d9\u30f3\u30c8\u3092Observable\u306b\u5909\u63db\u3059\u308b\u51e6\u7406\u3092\u305d\u306e\u90fd\u5ea6\u66f8\u304f\u306e\u306f\u5927\u5909\u306a\u306e\u3067\u30e9\u30a4\u30d6\u30e9\u30ea\u5316\u3057\u307e\u3057\u305f\u3002\n\n* [RxQt](https://github.com/tetsurom/rxqt)\n\n## \u6ce8\u610f\nRxCpp\u304c\u52d5\u3051\u3070\u5927\u4e08\u592b\u3060\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u307e\u3060Visual C++ 2015\u3067\u3057\u304b\u8a66\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\n## API\n\n### from_signal\n\n```cpp\ntemplate<class Q, class Ret>\nrxcpp::observable<long>\nrxqt::from_signal(QObject* object, Ret(Q::*)(void))\n\ntemplate<class Q, class Ret, class Arg>\nrxcpp::observable<std::remove_const<std::remove_reference<Arg>::type>::type\nrxqt::from_signal(QObject* object, Ret(Q::*)(Arg))\n\ntemplate<class Q, class Ret, class ...Args>\nrxcpp::observable<std::tuple<std::remove_const<std::remove_reference<Args>::type>::type...>\nrxqt::from_signal(QObject* object, Ret(Q::*)(Args...))\n```\n\n\u30b7\u30b0\u30ca\u30eb\u3092Observable\u306b\u5909\u63db\u3057\u307e\u3059\u3002**observable\u306e\u578b\u306f\u30b7\u30b0\u30ca\u30eb\u306e\u5f15\u6570\u306e\u578b\u304b\u3089\u63a8\u8ad6\u3055\u308c\u307e\u3059**\u3002\u305f\u3060\u3057\u3001\u5f15\u6570\u306b\u3064\u3044\u3066\u3044\u305f\u53c2\u7167\u3068const\u306f\u5916\u308c\u307e\u3059\u3002\n\n* 0\u5f15\u6570\u306e\u5834\u5408  \n    rxcpp\u3067`observable<void>`\u306f\u4f5c\u308c\u306a\u3044\u305f\u3081\u3001`observable<long>`\u306b\u306a\u308a\u307e\u3059(\u5024\u306f\u30b7\u30b0\u30ca\u30eb\u304c\u5c4a\u3044\u305f\u56de\u6570)\u3002 \n* 1\u5f15\u6570\u306e\u5834\u5408  \n    `observable<(\u5f15\u6570\u306e\u578b)>` \u306b\u306a\u308a\u307e\u3059\u3002\n* n\u5f15\u6570\u306e\u5834\u5408(n>1)  \n    `observable<std::tuple<(\u5f15\u6570\u306e\u578b)>>` \u306b\u306a\u308a\u307e\u3059\u3002\n\n```cpp:example\nauto lineedit = new QLineEdit;\n\n// returnPressed\u30b7\u30b0\u30ca\u30eb\u306e\u578b\u306f void (QLineEdit::*)(void) \u306a\u306e\u3067\u3001\n// observable<long> \u306b\u306a\u308b\nrxcpp::observable<long> returnPressedStream\n    = rxqt::from_signal(lineedit, &QLineEdit::returnPressed)\n\n// textChanged\u30b7\u30b0\u30ca\u30eb\u306e\u578b\u306f void (QLineEdit::*)(const QString&) \u306a\u306e\u3067\u3001\n// observable<QString> \u306b\u306a\u308b\nrxcpp::observable<QString> textChangedStream\n    = rxqt::from_signal(lineedit, &QLineEdit::textChanged);\n\n// cursorPositionChanged\u30b7\u30b0\u30ca\u30eb\u306e\u578b\u306f void (QLineEdit::*)(int, int) \u306a\u306e\u3067\u3001\n// observable<std::tuple<int, int>> \u306b\u306a\u308b\nrxcpp::observable<std::tuple<int, int>> cursorPositionChangedStream\n    = rxqt::from_signal(lineedit, &QLineEdit::cursorPositionChanged);\n```\n\n### from_event\n\n```cpp\nrxcpp::observable<QEvent*>\nrxqt::from_event(QObject* object, QEvent::Type type)\n```\n\n\u30a4\u30d9\u30f3\u30c8\u3092Observable\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n\n```cpp:example\nauto lineedit = new QLineEdit;\n\nrxqt::from_event(lineedit, QEvent::KeyPress)\n    .subscribe([](const QEvent* e){\n        auto ke = static_cast<const QKeyEvent*>(e);\n        qDebug() << ke->key();\n    });\n```\n\n## \u30b5\u30f3\u30d7\u30eb\n\n2\u3064\u306e\u30dc\u30bf\u30f3\u30922\u3064\u3068\u3082\u30af\u30ea\u30c3\u30af\u3057\u305f\u3089\u300c\u4e21\u65b9\u62bc\u3057\u305f\u300d\u3068\u51fa\u529b\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\n\n```cpp:example\nauto button1 = new QPushButton(\"A\");\nauto button2 = new QPushButton(\"B\");\n\nrxqt::from_signal(button1, static_cast<void(QPushButton::*)(bool)>(&QPushButton::clicked))\n    .zip(rxqt::from_signal(button2, static_cast<void(QPushButton::*)(bool)>(&QPushButton::clicked)))\n    .subscribe([](auto&&){ qDebug() << \"\u4e21\u65b9\u62bc\u3057\u305f\"; });\n```\n\n(\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u3068\u30e1\u30f3\u30d0\u30fc\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306b\u5bfe\u3057\u3066`static_cast`\u304c\u5fc5\u8981\u306b\u306a\u308b\u306e\u304c\u5c11\u3005\u6b8b\u5ff5)\n\n# \u307e\u3068\u3081\n\u30b7\u30b0\u30ca\u30eb\u3068\u30a4\u30d9\u30f3\u30c8\u3092Observable\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3067Qt\u3067Rx\u304c\u4f7f\u3048\u307e\u3059\u3002\n"}