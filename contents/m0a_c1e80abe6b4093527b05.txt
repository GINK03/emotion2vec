{"context": " More than 1 year has passed since last update.\u5143\u3005\u8cea\u554f\u306e\u3064\u3082\u308a\u3067\u4f5c\u3063\u305f\u3093\u3067\u3059\u304c\u81ea\u5df1\u89e3\u6c7a\u3057\u307e\u3057\u305f\n\u30bf\u30a4\u30c8\u30eb\u306e\u901a\u308a\u3001interval\u306e\u9593\u9694\u3092\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u306b\u5bfe\u5fdc\u3059\u308b\u95a2\u6570\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n\n\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb\u5024\u3092\u90fd\u5ea6\u5909\u66f4\u3059\u308b\u95a2\u6570\npublic func interval(throttle throttle:Variable<Double>) -> Observable<Double> {\n\n    return create { (observer) -> Disposable in\n\n        var intervalDisposer:Disposable?\n        return throttle.subscribeNext { (chagedValue) -> Void in\n            intervalDisposer?.dispose()\n            intervalDisposer = interval(chagedValue, MainScheduler.sharedInstance).subscribeNext({ count -> Void in\n                observer.on(.Next(chagedValue))\n            })\n        }\n    }\n}\n\n\n\n\u3044\u304b\u304c\u5b9f\u969b\u306b\u5229\u7528\u3057\u3066\u3044\u308b\u7b87\u6240\u306e\u30b3\u30fc\u30c9\u3068\u306a\u308a\u307e\u3059\u3002\n\n\nimport UIKit\nimport RxSwift\nimport RxCocoa\n\nclass ViewController: UIViewController {\n\n    @IBOutlet weak var incrementalLabel: UILabel!\n    @IBOutlet weak var addDurationButton: UIButton!\n    @IBOutlet weak var decDurationButton: UIButton!\n    @IBOutlet weak var durationTimeLabel: UILabel!\n\n    var durationTime = Variable(0.3)\n    var incrementValue = Variable(0)\n\n    var disposeBag:DisposeBag = DisposeBag()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        //\u8a72\u5f53\u547c\u3073\u51fa\u3057\u7b87\u6240 <------\n        interval(throttle: durationTime).subscribeNext { _ in\n            self.incrementValue.value += 1\n        }.addDisposableTo(disposeBag)\n\n\n        //txt\n        incrementValue.map{ return \"\\($0)\"}.bindTo(incrementalLabel.rx_text).addDisposableTo(disposeBag)\n\n        //chnage durationtime\n        addDurationButton.rx_tap.subscribeNext {\n            self.durationTime.value += 0.1\n            self.durationTime.value = abs(self.durationTime.value)\n        }.addDisposableTo(disposeBag)\n\n        decDurationButton.rx_tap.subscribeNext {\n            self.durationTime.value -= 0.1\n            self.durationTime.value = abs(self.durationTime.value)\n        }.addDisposableTo(disposeBag)\n\n        self.durationTime.map{ return \"\\($0)\" }.bindTo(durationTimeLabel.rx_text).addDisposableTo(disposeBag)\n\n\n    }\n\n}\n\n\u4ee5\u4e0b\u306b\u65e2\u5b58\u30b3\u30fc\u30c9\u3092\u7f6e\u3044\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/m0a-mystudy/adjustableInterval\n\n\n\u5143\u3005\u8cea\u554f\u306e\u3064\u3082\u308a\u3067\u4f5c\u3063\u305f\u3093\u3067\u3059\u304c\u81ea\u5df1\u89e3\u6c7a\u3057\u307e\u3057\u305f\n\u30bf\u30a4\u30c8\u30eb\u306e\u901a\u308a\u3001interval\u306e\u9593\u9694\u3092\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u306b\u5bfe\u5fdc\u3059\u308b\u95a2\u6570\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n![interval.gif](https://qiita-image-store.s3.amazonaws.com/0/3844/b4cf743b-31a4-dded-958c-0c91ad185691.gif \"interval.gif\")\n\n```swift:\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb\u5024\u3092\u90fd\u5ea6\u5909\u66f4\u3059\u308b\u95a2\u6570\npublic func interval(throttle throttle:Variable<Double>) -> Observable<Double> {\n\n    return create { (observer) -> Disposable in\n        \n        var intervalDisposer:Disposable?\n        return throttle.subscribeNext { (chagedValue) -> Void in\n            intervalDisposer?.dispose()\n            intervalDisposer = interval(chagedValue, MainScheduler.sharedInstance).subscribeNext({ count -> Void in\n                observer.on(.Next(chagedValue))\n            })\n        }\n    }\n}\n\n```\n\n\n\u3044\u304b\u304c\u5b9f\u969b\u306b\u5229\u7528\u3057\u3066\u3044\u308b\u7b87\u6240\u306e\u30b3\u30fc\u30c9\u3068\u306a\u308a\u307e\u3059\u3002\n\n\n```\u5229\u7528\u4f8b\n\n\nimport UIKit\nimport RxSwift\nimport RxCocoa\n\nclass ViewController: UIViewController {\n\n    @IBOutlet weak var incrementalLabel: UILabel!\n    @IBOutlet weak var addDurationButton: UIButton!\n    @IBOutlet weak var decDurationButton: UIButton!\n    @IBOutlet weak var durationTimeLabel: UILabel!\n    \n    var durationTime = Variable(0.3)\n    var incrementValue = Variable(0)\n\n    var disposeBag:DisposeBag = DisposeBag()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        //\u8a72\u5f53\u547c\u3073\u51fa\u3057\u7b87\u6240 <------\n        interval(throttle: durationTime).subscribeNext { _ in\n            self.incrementValue.value += 1\n        }.addDisposableTo(disposeBag)\n        \n\n        //txt\n        incrementValue.map{ return \"\\($0)\"}.bindTo(incrementalLabel.rx_text).addDisposableTo(disposeBag)\n\n        //chnage durationtime\n        addDurationButton.rx_tap.subscribeNext {\n            self.durationTime.value += 0.1\n            self.durationTime.value = abs(self.durationTime.value)\n        }.addDisposableTo(disposeBag)\n\n        decDurationButton.rx_tap.subscribeNext {\n            self.durationTime.value -= 0.1\n            self.durationTime.value = abs(self.durationTime.value)\n        }.addDisposableTo(disposeBag)\n\n        self.durationTime.map{ return \"\\($0)\" }.bindTo(durationTimeLabel.rx_text).addDisposableTo(disposeBag)\n        \n    \n    }\n\n}\n```\n\n\n\u4ee5\u4e0b\u306b\u65e2\u5b58\u30b3\u30fc\u30c9\u3092\u7f6e\u3044\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/m0a-mystudy/adjustableInterval\n\n\n\n\n", "tags": ["RxSwift", "Rx"]}