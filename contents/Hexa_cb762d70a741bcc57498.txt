{"context": " More than 1 year has passed since last update.lua-nginx-module \u306e ngx.socket.tcp() \u3084 ngx.socket.udp() \u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\nHTTP \u4ee5\u5916\u306e TCP \u3084 UDP \u3092\u4f7f\u7528\u3057\u305f\u30d7\u30ed\u30c8\u30b3\u30eb\u3067\u30c7\u30fc\u30bf\u3092\u9001\u53d7\u4fe1\u3059\u308b\u3088\u3046\u306a\u30b7\u30b9\u30c6\u30e0\u306b\u3082 Nginx \u304b\u3089\u76f4\u63a5\u63a5\u7d9a\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\n\u305d\u306e\u305f\u3081\u3001Nginx \u306e\u5f8c\u306b\u5225\u9014\u3001HTTP \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u4fe1\u3057\u3066\u3001\u3053\u308c\u3089\u306e\u30b7\u30b9\u30c6\u30e0\u3068\u63a5\u7d9a\u3059\u308b\u3088\u3046\u306a\u30b5\u30fc\u30d0\u3092\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u306a\u304f\u306a\u308a\u307e\u3059\n\u4eca\u56de\u306f\u7c21\u5358\u306b\u3001POST \u30ea\u30af\u30a8\u30b9\u30c8\u3067\u9001\u3063\u305f path \u3068 value \u3092\u4f7f\u7528\u3057\u3066\u3001Graphite (Carbon) \u306b UDP \u304a\u3088\u3073 TCP \u3067\u30c7\u30fc\u30bf\u3092\u9001\u3063\u3066\u307f\u307e\u3057\u305f\n\n\u8a2d\u5b9a\n\nngixn.conf\n\n        location /graphite/udp {\n            set $graphite_host '127.0.0.1';\n            set $graphite_port 2003;\n\n            content_by_lua '\n                local sock = ngx.socket.udp()\n                local graphite_host = ngx.var.graphite_host\n                local graphite_port = ngx.var.graphite_port\n                local ok, err = sock:setpeername(graphite_host, tonumber(graphite_port))\n                if not ok then\n                    ngx.say(err)\n                    return\n                end\n\n                ngx.req.read_body()\n                local args, err = ngx.req.get_post_args()\n                if not args then\n                    ngx.say(err)\n                    return\n                end\n\n                local path = args.path\n                local value = args.value\n\n                local timestamp = os.time()\n                local data = table.concat({path, value, tostring(timestamp)}, \" \")\n                local ok, err = sock:send(data)\n                if err then\n                    ngx.say(err)\n                    return\n                end\n\n                local ok, err = sock:close()\n                if not ok then\n                    ngx.say(err)\n                    return\n                end\n            ';\n        }\n\n        location /graphite/tcp {\n            set $graphite_host '127.0.0.1';\n            set $graphite_port 2003;\n\n            content_by_lua '\n                local sock = ngx.socket.tcp()\n                local graphite_host = ngx.var.graphite_host\n                local graphite_port = ngx.var.graphite_port\n                local ok, err = sock:connect(graphite_host, tonumber(graphite_port))\n                if not ok then\n                    ngx.say(err)\n                    return\n                end\n\n                ngx.req.read_body()\n                local args, err = ngx.req.get_post_args()\n                if not args then\n                    ngx.say(err)\n                    return\n                end\n\n                local path = args.path\n                local value = args.value\n\n                local timestamp = os.time()\n                local data = table.concat({path, value, tostring(timestamp)}, \" \")\n                local ok, err = sock:send(data)\n                if err then\n                    ngx.say(err)\n                    return\n                end\n\n                local ok, err = sock:close()\n                if not ok then\n                    ngx.say(err)\n                    return\n                end\n            ';\n        }\n\n\n\n\u9001\u4fe1\ncurl \u3067\u30c7\u30fc\u30bf\u3092\u9001\u3063\u3066\u307f\u307e\u3059\n\ntcp\n$ curl -v -X POST --data \"path=nginx.tcp.data&value=`expr $RANDOM % 100`\" http://localhost:8080/graphite/tcp\n* Hostname was NOT found in DNS cache\n*   Trying ::1...\n* connect to ::1 port 8080 failed: Connection refused\n*   Trying 127.0.0.1...\n* Connected to localhost (127.0.0.1) port 8080 (#0)\n> POST /graphite/tcp HTTP/1.1\n> User-Agent: curl/7.35.0\n> Host: localhost:8080\n> Accept: */*\n> Content-Length: 28\n> Content-Type: application/x-www-form-urlencoded\n>\n* upload completely sent off: 28 out of 28 bytes\n< HTTP/1.1 200 OK\n* Server openresty/1.7.4.1 is not blacklisted\n< Server: openresty/1.7.4.1\n< Date: Sun, 07 Dec 2014 04:57:12 GMT\n< Content-Type: application/octet-stream\n< Transfer-Encoding: chunked\n< Connection: keep-alive\n<\n* Connection #0 to host localhost left intact\n\n\n\nudp\n$ curl -v -X POST --data \"path=nginx.udp.data&value=`expr $RANDOM % 100`\" http://localhost:8080/graphite/udp\n* Hostname was NOT found in DNS cache\n*   Trying ::1...\n* connect to ::1 port 8080 failed: Connection refused\n*   Trying 127.0.0.1...\n* Connected to localhost (127.0.0.1) port 8080 (#0)\n> POST /graphite/udp HTTP/1.1\n> User-Agent: curl/7.35.0\n> Host: localhost:8080\n> Accept: */*\n> Content-Length: 28\n> Content-Type: application/x-www-form-urlencoded\n>\n* upload completely sent off: 28 out of 28 bytes\n< HTTP/1.1 200 OK\n* Server openresty/1.7.4.1 is not blacklisted\n< Server: openresty/1.7.4.1\n< Date: Sun, 07 Dec 2014 04:57:20 GMT\n< Content-Type: application/octet-stream\n< Transfer-Encoding: chunked\n< Connection: keep-alive\n<\n* Connection #0 to host localhost left intact\n\n\n\nGraphite\n\u9001\u3089\u308c\u3066\u304d\u305f\u30c7\u30fc\u30bf\u3092\u30b0\u30e9\u30d5\u3067\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3059\n\n\n\u53c2\u8003 URL\n\nHttpLuaModule - Nginx Community\n\nlua-nginx-module \u306e ngx.socket.tcp() \u3084 ngx.socket.udp() \u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\nHTTP \u4ee5\u5916\u306e TCP \u3084 UDP \u3092\u4f7f\u7528\u3057\u305f\u30d7\u30ed\u30c8\u30b3\u30eb\u3067\u30c7\u30fc\u30bf\u3092\u9001\u53d7\u4fe1\u3059\u308b\u3088\u3046\u306a\u30b7\u30b9\u30c6\u30e0\u306b\u3082 Nginx \u304b\u3089\u76f4\u63a5\u63a5\u7d9a\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\n\n\u305d\u306e\u305f\u3081\u3001Nginx \u306e\u5f8c\u306b\u5225\u9014\u3001HTTP \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u4fe1\u3057\u3066\u3001\u3053\u308c\u3089\u306e\u30b7\u30b9\u30c6\u30e0\u3068\u63a5\u7d9a\u3059\u308b\u3088\u3046\u306a\u30b5\u30fc\u30d0\u3092\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u306a\u304f\u306a\u308a\u307e\u3059\n\n\n\u4eca\u56de\u306f\u7c21\u5358\u306b\u3001POST \u30ea\u30af\u30a8\u30b9\u30c8\u3067\u9001\u3063\u305f path \u3068 value \u3092\u4f7f\u7528\u3057\u3066\u3001Graphite (Carbon) \u306b UDP \u304a\u3088\u3073 TCP \u3067\u30c7\u30fc\u30bf\u3092\u9001\u3063\u3066\u307f\u307e\u3057\u305f\n\n## \u8a2d\u5b9a\n\n```ngixn.conf\n\n        location /graphite/udp {\n            set $graphite_host '127.0.0.1';\n            set $graphite_port 2003;\n\n            content_by_lua '\n                local sock = ngx.socket.udp()\n                local graphite_host = ngx.var.graphite_host\n                local graphite_port = ngx.var.graphite_port\n                local ok, err = sock:setpeername(graphite_host, tonumber(graphite_port))\n                if not ok then\n                    ngx.say(err)\n                    return\n                end\n\n                ngx.req.read_body()\n                local args, err = ngx.req.get_post_args()\n                if not args then\n                    ngx.say(err)\n                    return\n                end\n\n                local path = args.path\n                local value = args.value\n\n                local timestamp = os.time()\n                local data = table.concat({path, value, tostring(timestamp)}, \" \")\n                local ok, err = sock:send(data)\n                if err then\n                    ngx.say(err)\n                    return\n                end\n\n                local ok, err = sock:close()\n                if not ok then\n                    ngx.say(err)\n                    return\n                end\n            ';\n        }\n\n        location /graphite/tcp {\n            set $graphite_host '127.0.0.1';\n            set $graphite_port 2003;\n\n            content_by_lua '\n                local sock = ngx.socket.tcp()\n                local graphite_host = ngx.var.graphite_host\n                local graphite_port = ngx.var.graphite_port\n                local ok, err = sock:connect(graphite_host, tonumber(graphite_port))\n                if not ok then\n                    ngx.say(err)\n                    return\n                end\n\n                ngx.req.read_body()\n                local args, err = ngx.req.get_post_args()\n                if not args then\n                    ngx.say(err)\n                    return\n                end\n\n                local path = args.path\n                local value = args.value\n\n                local timestamp = os.time()\n                local data = table.concat({path, value, tostring(timestamp)}, \" \")\n                local ok, err = sock:send(data)\n                if err then\n                    ngx.say(err)\n                    return\n                end\n\n                local ok, err = sock:close()\n                if not ok then\n                    ngx.say(err)\n                    return\n                end\n            ';\n        }\n```\n\n## \u9001\u4fe1\n\ncurl \u3067\u30c7\u30fc\u30bf\u3092\u9001\u3063\u3066\u307f\u307e\u3059\n\n```bash:tcp\n$ curl -v -X POST --data \"path=nginx.tcp.data&value=`expr $RANDOM % 100`\" http://localhost:8080/graphite/tcp\n* Hostname was NOT found in DNS cache\n*   Trying ::1...\n* connect to ::1 port 8080 failed: Connection refused\n*   Trying 127.0.0.1...\n* Connected to localhost (127.0.0.1) port 8080 (#0)\n> POST /graphite/tcp HTTP/1.1\n> User-Agent: curl/7.35.0\n> Host: localhost:8080\n> Accept: */*\n> Content-Length: 28\n> Content-Type: application/x-www-form-urlencoded\n>\n* upload completely sent off: 28 out of 28 bytes\n< HTTP/1.1 200 OK\n* Server openresty/1.7.4.1 is not blacklisted\n< Server: openresty/1.7.4.1\n< Date: Sun, 07 Dec 2014 04:57:12 GMT\n< Content-Type: application/octet-stream\n< Transfer-Encoding: chunked\n< Connection: keep-alive\n<\n* Connection #0 to host localhost left intact\n```\n\n```bash:udp\n$ curl -v -X POST --data \"path=nginx.udp.data&value=`expr $RANDOM % 100`\" http://localhost:8080/graphite/udp\n* Hostname was NOT found in DNS cache\n*   Trying ::1...\n* connect to ::1 port 8080 failed: Connection refused\n*   Trying 127.0.0.1...\n* Connected to localhost (127.0.0.1) port 8080 (#0)\n> POST /graphite/udp HTTP/1.1\n> User-Agent: curl/7.35.0\n> Host: localhost:8080\n> Accept: */*\n> Content-Length: 28\n> Content-Type: application/x-www-form-urlencoded\n>\n* upload completely sent off: 28 out of 28 bytes\n< HTTP/1.1 200 OK\n* Server openresty/1.7.4.1 is not blacklisted\n< Server: openresty/1.7.4.1\n< Date: Sun, 07 Dec 2014 04:57:20 GMT\n< Content-Type: application/octet-stream\n< Transfer-Encoding: chunked\n< Connection: keep-alive\n<\n* Connection #0 to host localhost left intact\n```\n\n\n### Graphite\n\n\u9001\u3089\u308c\u3066\u304d\u305f\u30c7\u30fc\u30bf\u3092\u30b0\u30e9\u30d5\u3067\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3059\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2014-12-07 13.58.34.png](https://qiita-image-store.s3.amazonaws.com/0/36202/8db4734b-5b12-6d12-69af-e5407ee21838.png)\n\n\n## \u53c2\u8003 URL\n\n- [HttpLuaModule - Nginx Community](http://wiki.nginx.org/HttpLuaModule)\n", "tags": ["nginx", "Lua"]}