{"context": " More than 1 year has passed since last update.\n\n\u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\nbuild.sbt\u306b\u66f8\u304f\n\nbuild.sbt\n// slick\nlibraryDependencies ++= Seq(\n  \"mysql\" % \"mysql-connector-java\" % \"5.1.29\",\n  \"com.typesafe.slick\" %% \"slick\" % \"2.1.0\",\n  \"c3p0\" % \"c3p0\" % \"0.9.1.2\"\n)\n\n\n\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306e\u63a5\u7d9a\u65b9\u6cd5\nDBConfiguration\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u305d\u3053\u306b\u307e\u3068\u3081\u308b\u306e\u304c\u3044\u3044\u304b\u3082\u3002\nComboPooledDataSource\u3067\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30d7\u30fc\u30ea\u30f3\u30b0\u3057\u3066\u304a\u304f\u3053\u3068\u3067\u3001\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u304c\u5207\u308c\u3066\u3082\u518d\u63a5\u7d9a\u3055\u308c\u308b\u3089\u3057\u3044\u3002\nclass DBConfiguration {\n  import com.mchange.v2.c3p0.ComboPooledDataSource\n  import scala.slick.driver.MySQLDriver.simple._\n\n  val dbType = \"mysql\"\n  val dbHost = \"127.0.0.1\"\n  val dbPort = 3306\n  val dbName = \"mydb\"\n  val dbUser = \"root\"\n  val dbPassword = \"mypass\"\n  val dbDriver = \"com.mysql.jdbc.Driver\"\n  val jdbcUrl = \"jdbc:%s://%s:%d/%s?characterEncoding=UTF-8\".format(dbType, dbHost, dbPort, dbName)\n\n  lazy val database = {\n    val ds = new ComboPooledDataSource\n    ds.setDriverClass(dbDriver)\n    ds.setJdbcUrl(jdbcUrl)\n    ds.setUser(dbUser)\n    ds.setPassword(dbPassword)\n    ds.setInitialPoolSize(3)\n    ds.setMaxPoolSize(30)\n    ds.setTestConnectionOnCheckin(false)\n    ds.setTestConnectionOnCheckout(true)\n    Database.forDataSource(ds)\n  }\n}\n\n\n\u30c9\u30e1\u30a4\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\u30c9\u30e1\u30a4\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306fcase class\u3067\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u3060\u3051\u3002\ncase class User(username: String, email: String)\n\n\n\u30c9\u30e1\u30a4\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u6c38\u7d9a\u5316\u65b9\u6cd5\n\u30c9\u30e1\u30a4\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u6c38\u7d9a\u5316\u306e\u5b9f\u88c5\u306f\u3072\u3068\u3064\u306e\u30af\u30e9\u30b9\u306b\u307e\u3068\u3081\u3066\u304a\u304f\u3068\u3044\u3044\u3002\u3044\u308f\u3086\u308bDataMapper\u30d1\u30bf\u30fc\u30f3\u3002\nSlick\u306e\u30ea\u30b9\u30c8\u64cd\u4f5c\u98a8\u306b\u66f8\u3051\u308bDSL\u3092\u4f7f\u3063\u3066\u3082\u3044\u3044\u304c\u3001\u500b\u4eba\u7684\u306a\u597d\u307f\u3067\u7d20\u306eSQL\u304c\u66f8\u304d\u305f\u3044\u306e\u3067\u3053\u3053\u3067\u306fPlain SQL Query\u3092\u4f7f\u3063\u305f\u3002\n\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306b\u306fMySQLUsersTable\u306b\u306fCRUD\u306e\u3059\u3079\u3066\u306e\u64cd\u4f5c\u304c\u3042\u308b\u3002\nimport scala.slick.jdbc.{ GetResult, StaticQuery => Q }\n\nclass MySQLUsersTable(config: DBConfiguration) {\n  val db = config.database // alias\n\n  // \u7d50\u679c\u306e\u884c\u3068case class\u3092\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u305f\u3081\u306e\u5ba3\u8a00\u3002findAll\u3068findByUsername\u3067\u3053\u308c\u3092\u4f7f\u3046\n  implicit val getUserResult = GetResult(r => User(r.<<, r.<<))\n\n  def createTable() = db.withSession { implicit session =>\n    // NA \u306f non arguments \u306e\u7565\n    Q.updateNA(\n      \"\"\"\n        |CREATE TABLE IF NOT EXISTS `users` (\n        |  `username` varchar(255) NOT NULL DEFAULT '',\n        |  `email` varchar(255) NOT NULL DEFAULT '',\n        |  PRIMARY KEY (`username`)\n        |) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n      \"\"\".stripMargin\n    ).execute\n  }\n\n  def truncate() = db.withSession { implicit session =>\n    Q.updateNA(\"TRUNCATE TABLE users\").execute\n  }\n\n  def add(user: User) = db.withTransaction { implicit session =>\n    // +? \u3067\u6587\u5b57\u5217\u7d50\u5408\u3059\u308b\u3068\u30a8\u30b9\u30b1\u30fc\u30d7\u3082\u3057\u3066\u304f\u308c\u308b\n    (Q.u + \"INSERT INTO users (username, email) VALUES (\" +? user.username + \", \" +? user.email + \")\").execute\n  }\n\n  def findAll: List[User] = db.withSession { implicit session =>\n    (Q[User] + \"SELECT * FROM users\").list\n  }\n\n  def findByUsername(username: String): Option[User] = db.withSession { implicit session =>\n    (Q[String, User] + \"SELECT * FROM users WHERE username = ? LIMIT 1\")(username).list.headOption\n  }\n\n  def update(user: User) = db.withTransaction { implicit session =>\n    (Q.u + \"UPDATE users SET email = \" +? user.email + \" WHERE username = \" +? user.username).execute\n  }\n\n  def delete(username: String) = db.withTransaction { implicit session =>\n    (Q.u + \"DELETE FROM users WHERE username = \" +? username).execute\n  }\n}\n\n\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30b3\u30fc\u30c9\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30b3\u30fc\u30c9\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308b\nval table = new MySQLUsersTable(new DBConfiguration)\n\ntable.createTable()\ntable.truncate()\ntable.add(User(\"alice\", \"alice@example.com\"))\ntable.add(User(\"bob\", \"bob@example.com\"))\ntable.add(User(\"carol\", \"carol@example.com\"))\n\nprintln(table.findAll)\nprintln(table.findByUsername(\"alice\")) // -> Some(User(...))\n\ntable.update(User(\"alice\", \"alice2@example.com\"))\n\nprintln(table.findByUsername(\"alice\"))\n\ntable.delete(\"alice\")\n\nprintln(table.findByUsername(\"alice\")) // -> None\n\n\n\n\n## \u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\n\nbuild.sbt\u306b\u66f8\u304f\n\n```scala:build.sbt\n// slick\nlibraryDependencies ++= Seq(\n  \"mysql\" % \"mysql-connector-java\" % \"5.1.29\",\n  \"com.typesafe.slick\" %% \"slick\" % \"2.1.0\",\n  \"c3p0\" % \"c3p0\" % \"0.9.1.2\"\n)\n```\n\n## \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306e\u63a5\u7d9a\u65b9\u6cd5\n\n`DBConfiguration`\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u305d\u3053\u306b\u307e\u3068\u3081\u308b\u306e\u304c\u3044\u3044\u304b\u3082\u3002\n`ComboPooledDataSource`\u3067\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30d7\u30fc\u30ea\u30f3\u30b0\u3057\u3066\u304a\u304f\u3053\u3068\u3067\u3001\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u304c\u5207\u308c\u3066\u3082\u518d\u63a5\u7d9a\u3055\u308c\u308b\u3089\u3057\u3044\u3002\n\n```scala\nclass DBConfiguration {\n  import com.mchange.v2.c3p0.ComboPooledDataSource\n  import scala.slick.driver.MySQLDriver.simple._\n\n  val dbType = \"mysql\"\n  val dbHost = \"127.0.0.1\"\n  val dbPort = 3306\n  val dbName = \"mydb\"\n  val dbUser = \"root\"\n  val dbPassword = \"mypass\"\n  val dbDriver = \"com.mysql.jdbc.Driver\"\n  val jdbcUrl = \"jdbc:%s://%s:%d/%s?characterEncoding=UTF-8\".format(dbType, dbHost, dbPort, dbName)\n\n  lazy val database = {\n    val ds = new ComboPooledDataSource\n    ds.setDriverClass(dbDriver)\n    ds.setJdbcUrl(jdbcUrl)\n    ds.setUser(dbUser)\n    ds.setPassword(dbPassword)\n    ds.setInitialPoolSize(3)\n    ds.setMaxPoolSize(30)\n    ds.setTestConnectionOnCheckin(false)\n    ds.setTestConnectionOnCheckout(true)\n    Database.forDataSource(ds)\n  }\n}\n```\n\n## \u30c9\u30e1\u30a4\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\n\n\u30c9\u30e1\u30a4\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306fcase class\u3067\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u3060\u3051\u3002\n\n```scala\ncase class User(username: String, email: String)\n```\n\n## \u30c9\u30e1\u30a4\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u6c38\u7d9a\u5316\u65b9\u6cd5\n\n\u30c9\u30e1\u30a4\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u6c38\u7d9a\u5316\u306e\u5b9f\u88c5\u306f\u3072\u3068\u3064\u306e\u30af\u30e9\u30b9\u306b\u307e\u3068\u3081\u3066\u304a\u304f\u3068\u3044\u3044\u3002\u3044\u308f\u3086\u308b[DataMapper](http://martinfowler.com/eaaCatalog/dataMapper.html)\u30d1\u30bf\u30fc\u30f3\u3002\n\nSlick\u306e\u30ea\u30b9\u30c8\u64cd\u4f5c\u98a8\u306b\u66f8\u3051\u308bDSL\u3092\u4f7f\u3063\u3066\u3082\u3044\u3044\u304c\u3001\u500b\u4eba\u7684\u306a\u597d\u307f\u3067\u7d20\u306eSQL\u304c\u66f8\u304d\u305f\u3044\u306e\u3067\u3053\u3053\u3067\u306f[Plain SQL Query](http://slick.typesafe.com/doc/2.1.0/sql.html)\u3092\u4f7f\u3063\u305f\u3002\n\n\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306b\u306f`MySQLUsersTable`\u306b\u306fCRUD\u306e\u3059\u3079\u3066\u306e\u64cd\u4f5c\u304c\u3042\u308b\u3002\n\n```scala\nimport scala.slick.jdbc.{ GetResult, StaticQuery => Q }\n\nclass MySQLUsersTable(config: DBConfiguration) {\n  val db = config.database // alias\n\n  // \u7d50\u679c\u306e\u884c\u3068case class\u3092\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u305f\u3081\u306e\u5ba3\u8a00\u3002findAll\u3068findByUsername\u3067\u3053\u308c\u3092\u4f7f\u3046\n  implicit val getUserResult = GetResult(r => User(r.<<, r.<<))\n\n  def createTable() = db.withSession { implicit session =>\n    // NA \u306f non arguments \u306e\u7565\n    Q.updateNA(\n      \"\"\"\n        |CREATE TABLE IF NOT EXISTS `users` (\n        |  `username` varchar(255) NOT NULL DEFAULT '',\n        |  `email` varchar(255) NOT NULL DEFAULT '',\n        |  PRIMARY KEY (`username`)\n        |) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n      \"\"\".stripMargin\n    ).execute\n  }\n\n  def truncate() = db.withSession { implicit session =>\n    Q.updateNA(\"TRUNCATE TABLE users\").execute\n  }\n\n  def add(user: User) = db.withTransaction { implicit session =>\n    // +? \u3067\u6587\u5b57\u5217\u7d50\u5408\u3059\u308b\u3068\u30a8\u30b9\u30b1\u30fc\u30d7\u3082\u3057\u3066\u304f\u308c\u308b\n    (Q.u + \"INSERT INTO users (username, email) VALUES (\" +? user.username + \", \" +? user.email + \")\").execute\n  }\n\n  def findAll: List[User] = db.withSession { implicit session =>\n    (Q[User] + \"SELECT * FROM users\").list\n  }\n\n  def findByUsername(username: String): Option[User] = db.withSession { implicit session =>\n    (Q[String, User] + \"SELECT * FROM users WHERE username = ? LIMIT 1\")(username).list.headOption\n  }\n\n  def update(user: User) = db.withTransaction { implicit session =>\n    (Q.u + \"UPDATE users SET email = \" +? user.email + \" WHERE username = \" +? user.username).execute\n  }\n\n  def delete(username: String) = db.withTransaction { implicit session =>\n    (Q.u + \"DELETE FROM users WHERE username = \" +? username).execute\n  }\n}\n```\n\n## \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30b3\u30fc\u30c9\n\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30b3\u30fc\u30c9\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308b\n\n```scala\nval table = new MySQLUsersTable(new DBConfiguration)\n\ntable.createTable()\ntable.truncate()\ntable.add(User(\"alice\", \"alice@example.com\"))\ntable.add(User(\"bob\", \"bob@example.com\"))\ntable.add(User(\"carol\", \"carol@example.com\"))\n\nprintln(table.findAll)\nprintln(table.findByUsername(\"alice\")) // -> Some(User(...))\n\ntable.update(User(\"alice\", \"alice2@example.com\"))\n\nprintln(table.findByUsername(\"alice\"))\n\ntable.delete(\"alice\")\n\nprintln(table.findByUsername(\"alice\")) // -> None\n\n```\n", "tags": ["Scala", "slick"]}