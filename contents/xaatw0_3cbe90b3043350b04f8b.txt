{"tags": ["Java", "java8", "JavaFX"], "context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nSwing\u3084VC#\u3067GUI\u3092\u4f5c\u6210\u3057\u3066\u3066\u3069\u3046\u3057\u3066\u3082\u9762\u5012\u304f\u3055\u3044\u306e\u304c\u3001\u753b\u9762\u306e\u5024\u3068\u5185\u90e8\u30c7\u30fc\u30bf\u3092\u540c\u671f\u3055\u305b\u308b\u3053\u3068\u3002\u3057\u304b\u3057\u3001JavaFX\u3067\u306f\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u30d0\u30a4\u30f3\u30c9\u3092\u4f7f\u7528\u3059\u308c\u3070\u975e\u5e38\u306b\u7c21\u5358\u306b\u5b9f\u73fe\u3067\u304d\u308b\u306e\u3067\u9a5a\u3044\u305f\u3002\u3044\u307e\u307e\u3067\u7c21\u5358\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3059\u308b\u3068\u304d\u306b\u30d0\u30a4\u30f3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u304d\u305f\u304c\u3001\u3082\u3046\u5c11\u3057\u672c\u683c\u7684\u306b\u53d6\u308a\u7d44\u3082\u3046\u3068\u601d\u3044\u3001\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u30d0\u30a4\u30f3\u30c9\n\nBindingTest.java\n\n@Test\npublic void NumberBinding(){\n       IntegerProperty num1 = new SimpleIntegerProperty(1);\n       IntegerProperty num2 = new SimpleIntegerProperty(2);\n\n       NumberBinding sum = Bindings.add(num1,num2);\n       assertThat(sum.getValue(), is(3));\n\n       num1.setValue(2);\n       assertThat(sum.getValue(), is(4));\n}\n\n@Test\npublic void IntegerProperty(){\n\n       IntegerProperty num1 = new SimpleIntegerProperty(1);\n       IntegerProperty num2 = new SimpleIntegerProperty(2);\n\n       IntegerProperty sum = new SimpleIntegerProperty();\n       sum.bind(Bindings.add(num1,num2));\n\n       assertThat(sum.getValue(), is(3));\n\n       num1.setValue(2);\n       assertThat(sum.getValue(), is(4));\n}\n\n@Test\npublic void IntegerProperty_\u540c\u3058\u5024\u306b\u30d0\u30a4\u30f3\u30c9(){\n\n       IntegerProperty num1 = new SimpleIntegerProperty(1);\n       IntegerProperty num2 = new SimpleIntegerProperty(2);\n\n       num2.bind(num1);\n\n       assertThat(num1.getValue(), is(1));\n       assertThat(num2.getValue(), is(1));\n\n       num1.setValue(2);\n       assertThat(num1.getValue(), is(2));\n       assertThat(num2.getValue(), is(2));\n}\n\n@Test\npublic void bind(){\n       IntegerProperty num1 = new SimpleIntegerProperty(1);\n       IntegerProperty num2 = new SimpleIntegerProperty(2);\n       num2.bind(num1);\n\n       num1.set(1);\n\n       try{\n           // num2\u306fnum1\u306b\u30d0\u30a4\u30f3\u30c9\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001num2\u306b\u8a2d\u5b9a\u3059\u308b\u3068\u4f8b\u5916\u304c\u767a\u751f\u3059\u308b\n           // java.lang.RuntimeException: A bound value cannot be set.\n\n           num2.set(2);\n           fail();\n       }catch(RuntimeException e){}\n}\n\n@Test\npublic void bindBidirectional(){\n       IntegerProperty num1 = new SimpleIntegerProperty(1);\n       IntegerProperty num2 = new SimpleIntegerProperty(2);\n       num2.bindBidirectional(num1);\n\n       // bindBidirectional\u3067\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u3068\u3001num1,num2\u3069\u3061\u3089\u306b\u3082\u8a2d\u5b9a\u3067\u304d\u308b\n       num1.set(1);\n       assertThat(num1.getValue(), is(1));\n       assertThat(num2.getValue(), is(1));\n\n       num2.set(2);\n       assertThat(num1.getValue(), is(2));\n       assertThat(num2.getValue(), is(2));\n}\n\n@Test\npublic void IntegerProperty_\u8a08\u7b97(){\n\n       IntegerProperty base = new SimpleIntegerProperty(10);\n\n       IntegerProperty add = new SimpleIntegerProperty();\n       IntegerProperty substract = new SimpleIntegerProperty();\n       IntegerProperty multiply = new SimpleIntegerProperty();\n       IntegerProperty divide = new SimpleIntegerProperty();\n       IntegerProperty negate = new SimpleIntegerProperty();\n\n       add.bind(base.add(10));\n       substract.bind(base.subtract(10));\n       multiply.bind(base.multiply(10));\n       divide.bind(base.divide(10));\n       negate.bind(base.negate());\n\n       assertThat(add.get(), is(20));\n       assertThat(substract.get(), is(0));\n       assertThat(multiply.get(), is(100));\n       assertThat(divide.get(), is(1));\n       assertThat(negate.get(), is(-10));\n\n       base.set(5);\n       assertThat(add.get(), is(15));\n       assertThat(substract.get(), is(-5));\n       assertThat(multiply.get(), is(50));\n       assertThat(divide.get(), is(0));\n       assertThat(negate.get(), is(-5));\n}\n\n@Test\npublic void IntegerProperty_\u6bd4\u8f03(){\n\n    IntegerProperty base = new SimpleIntegerProperty(10);\n\n    BooleanProperty isEqualTo = new SimpleBooleanProperty();\n    BooleanProperty greaterThan = new SimpleBooleanProperty();\n    BooleanProperty lessThan = new SimpleBooleanProperty();\n    BooleanProperty greaterThanOrEqualTo = new SimpleBooleanProperty();\n    BooleanProperty lessThanOrEqualTo = new SimpleBooleanProperty();\n\n    isEqualTo.bind(base.isEqualTo(10));\n    greaterThan.bind(base.greaterThan(10));\n    lessThan.bind(base.lessThan(10));\n    greaterThanOrEqualTo.bind(base.greaterThanOrEqualTo(10));\n    lessThanOrEqualTo.bind(base.lessThanOrEqualTo(10));\n\n    assertThat(isEqualTo.get(), is(true));\n    assertThat(greaterThan.get(), is(false));\n    assertThat(lessThan.get(),is(false));\n    assertThat(greaterThanOrEqualTo.get(), is(true));\n    assertThat(lessThanOrEqualTo.get(), is(true));\n}\n\n@Test\npublic void IntegerProperty_\u53f0\u5f62\u306e\u9762\u7a4d(){\n    // \u4e0a\u5e95a\u3001\u4e0b\u5e95b\u3001\u9ad8\u3055h \u2192\u9762\u7a4dS (a+b) * h /2\n    IntegerProperty a = new SimpleIntegerProperty();\n    IntegerProperty b = new SimpleIntegerProperty();\n    IntegerProperty h = new SimpleIntegerProperty();\n\n    DoubleProperty S = new SimpleDoubleProperty();\n    S.bind(a.add(b).multiply(h).divide(2));\n\n    a.set(2);\n    b.set(3);\n    h.set(4);\n    assertThat(S.get(),is(10D));\n\n    a.set(4);\n    assertThat(S.get(),is(14D));\n}\n\n@Test\npublic void BooleanBind(){\n\n       IntegerProperty base = new SimpleIntegerProperty(10);\n\n       BooleanProperty blnEquqls10 = new SimpleBooleanProperty();\n       blnEquqls10.bind(base.isEqualTo(10));\n\n       BooleanProperty blnGreaterThan10 = new SimpleBooleanProperty();\n       blnGreaterThan10.bind(base.greaterThan(10));\n\n       assertThat(blnEquqls10.get(), is(true));\n       assertThat(blnGreaterThan10.get(), is(false));\n\n       base.set(11);\n       assertThat(blnEquqls10.get(), is(false));\n       assertThat(blnGreaterThan10.get(), is(true));\n}\n\n@Test\npublic void BooleanBindAnd(){\n     BooleanProperty boolean1 = new SimpleBooleanProperty();\n     BooleanProperty boolean2 = new SimpleBooleanProperty();\n\n     BooleanProperty result = new SimpleBooleanProperty();\n     result.bind(boolean1.and(boolean2));\n\n     assertThat(result.get(), is(false));\n\n     boolean1.set(true);\n     assertThat(result.get(), is(false));\n\n     boolean2.set(true);\n     assertThat(result.get(), is(true));\n}\n\n@Test\npublic void BooleanBindOr(){\n     BooleanProperty boolean1 = new SimpleBooleanProperty();\n     BooleanProperty boolean2 = new SimpleBooleanProperty();\n\n     BooleanProperty result = new SimpleBooleanProperty();\n     result.bind(boolean1.or(boolean2));\n\n     assertThat(result.get(), is(false));\n\n     boolean1.set(true);\n     assertThat(result.get(), is(true));\n\n     boolean2.set(true);\n     assertThat(result.get(), is(true));\n}\n\n@Test\npublic void BooleanBindAndOr(){\n    // 1 and (2 or 3)\n\n    BooleanProperty boolean1 = new SimpleBooleanProperty();\n    BooleanProperty boolean2 = new SimpleBooleanProperty();\n    BooleanProperty boolean3 = new SimpleBooleanProperty();\n\n    BooleanProperty result = new SimpleBooleanProperty();\n    result.bind(boolean1.and(boolean2.or(boolean3)));\n\n    assertThat(result.get(), is(false));\n\n    boolean1.set(true);\n    assertThat(result.get(), is(false));\n\n    boolean2.set(true);\n    assertThat(result.get(), is(true));\n\n    boolean2.set(false);\n    boolean3.set(true);\n    assertThat(result.get(), is(true));\n\n    boolean1.set(false);\n    assertThat(result.get(), is(false));\n}\n\n@Test\npublic void BooleanBindWhenThenOtherwise(){\n\n    // \u5206\u5b50\u304c4\uff0c\u5206\u6bcd\u304c2\n    IntegerProperty numerator = new SimpleIntegerProperty(4);\n    IntegerProperty denominato = new SimpleIntegerProperty(2);\n\n    // \u5206\u6bcd\u304c0\u3067\u306a\u3044\u306a\u3089\u3001\u5206\u5b50\u3092\u5206\u6bcd\u3067\u5272\u3063\u305f\u5024\u3001\n    // \u4e0a\u8a18\u4ee5\u5916\u306e\u5834\u5408\u30010\u3092\u8fd4\u3059\u3002\n    NumberBinding value =\n        new When(denominato.isNotEqualTo(0))\n        .then(numerator.divide(denominato))\n        .otherwise(0);\n\n    assertThat(value.getValue(),is(2));\n\n    numerator.set(7);\n    assertThat(value.getValue(),is(3));\n\n    denominato.set(0);\n    assertThat(value.getValue(), is(0));\n}\n\n@Test\npublic void StringBind(){\n    StringProperty concat = new SimpleStringProperty();\n    BooleanProperty isEqualTo = new SimpleBooleanProperty();\n    BooleanProperty isEqualToIgnoreCase = new SimpleBooleanProperty();\n    BooleanProperty isNotEqualTo = new SimpleBooleanProperty();\n    BooleanProperty isNotEqualToIgnoreCase = new SimpleBooleanProperty();\n    BooleanProperty isEmpty = new SimpleBooleanProperty();\n    BooleanProperty isNotEmpty = new SimpleBooleanProperty();\n    BooleanProperty isNull = new SimpleBooleanProperty();\n\n    StringProperty target = new SimpleStringProperty(\"A\");\n    concat.bind(target.concat(\"!\"));\n    isEqualTo.bind(target.isEqualTo(\"A\"));\n    isEqualToIgnoreCase.bind(target.isEqualToIgnoreCase(\"A\"));\n    isNotEqualTo.bind(target.isNotEqualTo(\"A\"));\n    isNotEqualToIgnoreCase.bind(target.isNotEqualToIgnoreCase(\"A\"));\n    isEmpty.bind(target.isEmpty());\n    isNotEmpty.bind(target.isNotEmpty());\n    isNull.bind(target.isNull());\n\n    assertThat(concat.get(), is(\"A!\"));\n    assertThat(isEqualTo.get(),is(true));\n    assertThat(isEqualToIgnoreCase.get(),is(true));\n    assertThat(isNotEqualTo.get(),is(false));\n    assertThat(isNotEqualToIgnoreCase.get(),is(false));\n    assertThat(isEmpty.get(), is(false));\n    assertThat(isNotEmpty.get(), is(true));\n    assertThat(isNull.get(), is(false));\n\n    target.set(\"a\");\n    assertThat(concat.get(), is(\"a!\"));\n    assertThat(isEqualTo.get(),is(false));\n    assertThat(isEqualToIgnoreCase.get(),is(true));\n    assertThat(isNotEqualTo.get(),is(true));\n    assertThat(isNotEqualToIgnoreCase.get(),is(false));\n    assertThat(isEmpty.get(), is(false));\n    assertThat(isNotEmpty.get(), is(true));\n    assertThat(isNull.get(), is(false));\n\n    target.set(\"\");\n    assertThat(concat.get(), is(\"!\"));\n    assertThat(isEqualTo.get(),is(false));\n    assertThat(isEqualToIgnoreCase.get(),is(false));\n    assertThat(isNotEqualTo.get(),is(true));\n    assertThat(isNotEqualToIgnoreCase.get(),is(true));\n    assertThat(isEmpty.get(), is(true));\n    assertThat(isNotEmpty.get(), is(false));\n    assertThat(isNull.get(), is(false));\n\n    target.set(null);\n    assertThat(concat.get(), is(\"null!\"));\n    assertThat(isEqualTo.get(),is(false));\n    assertThat(isEqualToIgnoreCase.get(),is(false));\n    assertThat(isNotEqualTo.get(),is(true));\n    assertThat(isNotEqualToIgnoreCase.get(),is(true));\n    assertThat(isEmpty.get(), is(true));\n    assertThat(isNotEmpty.get(), is(false));\n    assertThat(isNull.get(), is(true));\n}\n\n\n\n\nJavaFX\u306e\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u306b\u30d0\u30a4\u30f3\u30c9\u3055\u305b\u3066\u307f\u308b\n\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3067\u30c1\u30a7\u30c3\u30af\u306e\u6709\u7121\u306f\u3001selectedProperty() \u306b\u8a2d\u5b9a\u3059\u308b\u3002\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u6709\u52b9\u7121\u52b9\u306fdisableProperty()\u3067\u8a2d\u5b9a\u3059\u308b\u3002\u30e9\u30d9\u30eb\u3084\u30c6\u30ad\u30b9\u30c8\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u5185\u5bb9\u306ftextProperty()\u3067\u8a2d\u5b9a\u3059\u308b\u3002\n\u305d\u308c\u305e\u308c\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u540c\u58eb\u3092\u30d0\u30a4\u30f3\u30c9\u3057\u305f\u308a\u3001BooleanProperty\u7d4c\u7531\u3067\u30d0\u30a4\u30f3\u30c9\u3055\u305b\u305f\u308a\u3057\u3066\u307e\u3059\u3002\n\nFXController.java\n@FXML CheckBox checkBox1;\n@FXML CheckBox checkBox2;\n@FXML CheckBox checkBox3;\n@FXML CheckBox checkBox4;\n@FXML CheckBox checkBox5;\n\n@FXML Button button;\n@FXML Label label;\n@FXML Label lblCheckbox5;\n\nBooleanProperty blnBindBidirectional = new SimpleBooleanProperty();\n\n@Override\npublic void initialize(URL paramURL, ResourceBundle paramResourceBundle) {\n\n    // \u76f8\u4e92\u306b\u5f71\u97ff\u3057\u5408\u3046\n    checkBox1.selectedProperty().bindBidirectional(checkBox2.selectedProperty());\n\n    // \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b93\u306e\u5024\u306f\u3001\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b94\u306b\u4f9d\u5b58\u3059\u308b\u305f\u3081\u3001\n    // \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b93\u306e\u30c1\u30a7\u30c3\u30af\u3092\u5909\u66f4\u3059\u308b\u3068\u4f8b\u5916\u767a\u751f\u3059\u308b\n    checkBox3.selectedProperty().bind(checkBox4.selectedProperty());\n\n    // \u30c1\u30a7\u30c3\u30af\u304c\u3042\u308b\u3068\u304d\u3001\u30dc\u30bf\u30f3\u304c\u5165\u529b\u53ef\u80fd\u306b\u306a\u308b\n    button.disableProperty().bind(checkBox1.selectedProperty().not());\n\n    // \u30e9\u30d9\u30eb\u306e\u30c6\u30ad\u30b9\u30c8\u306f\u3001\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b91\u306e\u30c1\u30a7\u30c3\u30af\u306e\u5185\u5bb9\u306b\u6587\u5b57\u3092\u9023\u7d50\u3055\u305b\u3066\u51fa\u529b\u3059\u308b\n    StringProperty stringProperty = new SimpleStringProperty(\"\");\n    stringProperty.bind( checkBox1.selectedProperty().asString().concat(\" \u2190\u30c1\u30a7\u30c3\u30af\u306e\u4e2d\u8eab\"));\n    label.textProperty().bind(stringProperty);\n\n    // \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b95\u306e\u30c1\u30a7\u30c3\u30af\u72b6\u6cc1\u306f\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u9023\u52d5\u3055\u305b\u308b\u3002\n    checkBox5.selectedProperty().bindBidirectional(blnBindBidirectional);\n    lblCheckbox5.textProperty().bind(blnBindBidirectional.asString());\n\n    }\n\n    @FXML\n    public void buttonPressed(ActionEvent event){\n        // BooleanProperty\u306etrue/false\u3092\u5165\u308c\u304b\u3048\u308b\n        blnBindBidirectional.set(! blnBindBidirectional.get());\n    }\n}\n\n\n\n\u6700\u5f8c\u306b\n\u3053\u3053\u3067\u306f\u7d39\u4ecb\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306eList\u3068JavaFX\u306eListView\u306e\u4e2d\u8eab\u3092\u30d0\u30a4\u30f3\u30c9\u3055\u305b\u305f\u308a\u3001\u30b3\u30f3\u30dc\u30dc\u30c3\u30af\u30b9\u306e\u9078\u629e\u80a2\u306e\u57fa\u3068\u306a\u3063\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u30d0\u30a4\u30f3\u30c9\u3055\u305b\u305f\u308a\u3068\u3001\u672c\u5f53\u306b\u4fbf\u5229\u3067\u3059\u3002\n\u30bd\u30fc\u30b9\u306f\u3001Github\u306b\u3042\u308a\u307e\u3059\u304c\u3001\u4ed6\u306e\u6295\u7a3f\u306e\u30bd\u30fc\u30b9\u3082\u6df7\u3058\u3063\u3066\u307e\u3059\u3001\u3059\u3044\u307e\u305b\u3093\u3002\n#\u306f\u3058\u3081\u306b\nSwing\u3084VC#\u3067GUI\u3092\u4f5c\u6210\u3057\u3066\u3066\u3069\u3046\u3057\u3066\u3082\u9762\u5012\u304f\u3055\u3044\u306e\u304c\u3001\u753b\u9762\u306e\u5024\u3068\u5185\u90e8\u30c7\u30fc\u30bf\u3092\u540c\u671f\u3055\u305b\u308b\u3053\u3068\u3002\u3057\u304b\u3057\u3001JavaFX\u3067\u306f\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u30d0\u30a4\u30f3\u30c9\u3092\u4f7f\u7528\u3059\u308c\u3070\u975e\u5e38\u306b\u7c21\u5358\u306b\u5b9f\u73fe\u3067\u304d\u308b\u306e\u3067\u9a5a\u3044\u305f\u3002\u3044\u307e\u307e\u3067\u7c21\u5358\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3059\u308b\u3068\u304d\u306b\u30d0\u30a4\u30f3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u304d\u305f\u304c\u3001\u3082\u3046\u5c11\u3057\u672c\u683c\u7684\u306b\u53d6\u308a\u7d44\u3082\u3046\u3068\u601d\u3044\u3001\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n#\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u30d0\u30a4\u30f3\u30c9\n\n```java:BindingTest.java\n\n@Test\npublic void NumberBinding(){\n       IntegerProperty num1 = new SimpleIntegerProperty(1);\n       IntegerProperty num2 = new SimpleIntegerProperty(2);\n\n       NumberBinding sum = Bindings.add(num1,num2);\n       assertThat(sum.getValue(), is(3));\n\n       num1.setValue(2);\n       assertThat(sum.getValue(), is(4));\n}\n\n@Test\npublic void IntegerProperty(){\n\n       IntegerProperty num1 = new SimpleIntegerProperty(1);\n       IntegerProperty num2 = new SimpleIntegerProperty(2);\n\n       IntegerProperty sum = new SimpleIntegerProperty();\n       sum.bind(Bindings.add(num1,num2));\n\n       assertThat(sum.getValue(), is(3));\n\n       num1.setValue(2);\n       assertThat(sum.getValue(), is(4));\n}\n\n@Test\npublic void IntegerProperty_\u540c\u3058\u5024\u306b\u30d0\u30a4\u30f3\u30c9(){\n\n       IntegerProperty num1 = new SimpleIntegerProperty(1);\n       IntegerProperty num2 = new SimpleIntegerProperty(2);\n\n       num2.bind(num1);\n\n       assertThat(num1.getValue(), is(1));\n       assertThat(num2.getValue(), is(1));\n\n       num1.setValue(2);\n       assertThat(num1.getValue(), is(2));\n       assertThat(num2.getValue(), is(2));\n}\n\n@Test\npublic void bind(){\n       IntegerProperty num1 = new SimpleIntegerProperty(1);\n       IntegerProperty num2 = new SimpleIntegerProperty(2);\n       num2.bind(num1);\n\n       num1.set(1);\n\n       try{\n    \t   // num2\u306fnum1\u306b\u30d0\u30a4\u30f3\u30c9\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001num2\u306b\u8a2d\u5b9a\u3059\u308b\u3068\u4f8b\u5916\u304c\u767a\u751f\u3059\u308b\n    \t   // java.lang.RuntimeException: A bound value cannot be set.\n\n    \t   num2.set(2);\n    \t   fail();\n       }catch(RuntimeException e){}\n}\n\n@Test\npublic void bindBidirectional(){\n       IntegerProperty num1 = new SimpleIntegerProperty(1);\n       IntegerProperty num2 = new SimpleIntegerProperty(2);\n       num2.bindBidirectional(num1);\n\n       // bindBidirectional\u3067\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u3068\u3001num1,num2\u3069\u3061\u3089\u306b\u3082\u8a2d\u5b9a\u3067\u304d\u308b\n       num1.set(1);\n       assertThat(num1.getValue(), is(1));\n       assertThat(num2.getValue(), is(1));\n\n       num2.set(2);\n       assertThat(num1.getValue(), is(2));\n       assertThat(num2.getValue(), is(2));\n}\n\n@Test\npublic void IntegerProperty_\u8a08\u7b97(){\n\n       IntegerProperty base = new SimpleIntegerProperty(10);\n\n       IntegerProperty add = new SimpleIntegerProperty();\n       IntegerProperty substract = new SimpleIntegerProperty();\n       IntegerProperty multiply = new SimpleIntegerProperty();\n       IntegerProperty divide = new SimpleIntegerProperty();\n       IntegerProperty negate = new SimpleIntegerProperty();\n\n       add.bind(base.add(10));\n       substract.bind(base.subtract(10));\n       multiply.bind(base.multiply(10));\n       divide.bind(base.divide(10));\n       negate.bind(base.negate());\n\n       assertThat(add.get(), is(20));\n       assertThat(substract.get(), is(0));\n       assertThat(multiply.get(), is(100));\n       assertThat(divide.get(), is(1));\n       assertThat(negate.get(), is(-10));\n\n       base.set(5);\n       assertThat(add.get(), is(15));\n       assertThat(substract.get(), is(-5));\n       assertThat(multiply.get(), is(50));\n       assertThat(divide.get(), is(0));\n       assertThat(negate.get(), is(-5));\n}\n\n@Test\npublic void IntegerProperty_\u6bd4\u8f03(){\n\n\tIntegerProperty base = new SimpleIntegerProperty(10);\n\n\tBooleanProperty isEqualTo = new SimpleBooleanProperty();\n\tBooleanProperty greaterThan = new SimpleBooleanProperty();\n\tBooleanProperty lessThan = new SimpleBooleanProperty();\n\tBooleanProperty greaterThanOrEqualTo = new SimpleBooleanProperty();\n\tBooleanProperty lessThanOrEqualTo = new SimpleBooleanProperty();\n\n\tisEqualTo.bind(base.isEqualTo(10));\n\tgreaterThan.bind(base.greaterThan(10));\n\tlessThan.bind(base.lessThan(10));\n\tgreaterThanOrEqualTo.bind(base.greaterThanOrEqualTo(10));\n\tlessThanOrEqualTo.bind(base.lessThanOrEqualTo(10));\n\n\tassertThat(isEqualTo.get(), is(true));\n\tassertThat(greaterThan.get(), is(false));\n\tassertThat(lessThan.get(),is(false));\n\tassertThat(greaterThanOrEqualTo.get(), is(true));\n\tassertThat(lessThanOrEqualTo.get(), is(true));\n}\n\n@Test\npublic void IntegerProperty_\u53f0\u5f62\u306e\u9762\u7a4d(){\n\t// \u4e0a\u5e95a\u3001\u4e0b\u5e95b\u3001\u9ad8\u3055h \u2192\u9762\u7a4dS (a+b) * h /2\n\tIntegerProperty a = new SimpleIntegerProperty();\n\tIntegerProperty b = new SimpleIntegerProperty();\n\tIntegerProperty h = new SimpleIntegerProperty();\n\n\tDoubleProperty S = new SimpleDoubleProperty();\n\tS.bind(a.add(b).multiply(h).divide(2));\n\n\ta.set(2);\n\tb.set(3);\n\th.set(4);\n\tassertThat(S.get(),is(10D));\n\n\ta.set(4);\n\tassertThat(S.get(),is(14D));\n}\n\n@Test\npublic void BooleanBind(){\n\n       IntegerProperty base = new SimpleIntegerProperty(10);\n\n       BooleanProperty blnEquqls10 = new SimpleBooleanProperty();\n       blnEquqls10.bind(base.isEqualTo(10));\n\n       BooleanProperty blnGreaterThan10 = new SimpleBooleanProperty();\n       blnGreaterThan10.bind(base.greaterThan(10));\n\n       assertThat(blnEquqls10.get(), is(true));\n       assertThat(blnGreaterThan10.get(), is(false));\n\n       base.set(11);\n       assertThat(blnEquqls10.get(), is(false));\n       assertThat(blnGreaterThan10.get(), is(true));\n}\n\n@Test\npublic void BooleanBindAnd(){\n\t BooleanProperty boolean1 = new SimpleBooleanProperty();\n\t BooleanProperty boolean2 = new SimpleBooleanProperty();\n\n\t BooleanProperty result = new SimpleBooleanProperty();\n\t result.bind(boolean1.and(boolean2));\n\n\t assertThat(result.get(), is(false));\n\n\t boolean1.set(true);\n\t assertThat(result.get(), is(false));\n\n\t boolean2.set(true);\n\t assertThat(result.get(), is(true));\n}\n\n@Test\npublic void BooleanBindOr(){\n\t BooleanProperty boolean1 = new SimpleBooleanProperty();\n\t BooleanProperty boolean2 = new SimpleBooleanProperty();\n\n\t BooleanProperty result = new SimpleBooleanProperty();\n\t result.bind(boolean1.or(boolean2));\n\n\t assertThat(result.get(), is(false));\n\n\t boolean1.set(true);\n\t assertThat(result.get(), is(true));\n\n\t boolean2.set(true);\n\t assertThat(result.get(), is(true));\n}\n\n@Test\npublic void BooleanBindAndOr(){\n\t// 1 and (2 or 3)\n\n\tBooleanProperty boolean1 = new SimpleBooleanProperty();\n\tBooleanProperty boolean2 = new SimpleBooleanProperty();\n\tBooleanProperty boolean3 = new SimpleBooleanProperty();\n\n\tBooleanProperty result = new SimpleBooleanProperty();\n\tresult.bind(boolean1.and(boolean2.or(boolean3)));\n\n\tassertThat(result.get(), is(false));\n\n\tboolean1.set(true);\n\tassertThat(result.get(), is(false));\n\n\tboolean2.set(true);\n\tassertThat(result.get(), is(true));\n\n\tboolean2.set(false);\n\tboolean3.set(true);\n\tassertThat(result.get(), is(true));\n\n\tboolean1.set(false);\n\tassertThat(result.get(), is(false));\n}\n\n@Test\npublic void BooleanBindWhenThenOtherwise(){\n\n\t// \u5206\u5b50\u304c4\uff0c\u5206\u6bcd\u304c2\n\tIntegerProperty numerator = new SimpleIntegerProperty(4);\n\tIntegerProperty denominato = new SimpleIntegerProperty(2);\n\n\t// \u5206\u6bcd\u304c0\u3067\u306a\u3044\u306a\u3089\u3001\u5206\u5b50\u3092\u5206\u6bcd\u3067\u5272\u3063\u305f\u5024\u3001\n\t// \u4e0a\u8a18\u4ee5\u5916\u306e\u5834\u5408\u30010\u3092\u8fd4\u3059\u3002\n\tNumberBinding value =\n\t\tnew When(denominato.isNotEqualTo(0))\n\t\t.then(numerator.divide(denominato))\n\t\t.otherwise(0);\n\n\tassertThat(value.getValue(),is(2));\n\n\tnumerator.set(7);\n\tassertThat(value.getValue(),is(3));\n\n\tdenominato.set(0);\n\tassertThat(value.getValue(), is(0));\n}\n\n@Test\npublic void StringBind(){\n\tStringProperty concat = new SimpleStringProperty();\n\tBooleanProperty isEqualTo = new SimpleBooleanProperty();\n\tBooleanProperty isEqualToIgnoreCase = new SimpleBooleanProperty();\n\tBooleanProperty isNotEqualTo = new SimpleBooleanProperty();\n\tBooleanProperty isNotEqualToIgnoreCase = new SimpleBooleanProperty();\n\tBooleanProperty isEmpty = new SimpleBooleanProperty();\n\tBooleanProperty isNotEmpty = new SimpleBooleanProperty();\n\tBooleanProperty isNull = new SimpleBooleanProperty();\n\n\tStringProperty target = new SimpleStringProperty(\"A\");\n\tconcat.bind(target.concat(\"!\"));\n\tisEqualTo.bind(target.isEqualTo(\"A\"));\n\tisEqualToIgnoreCase.bind(target.isEqualToIgnoreCase(\"A\"));\n\tisNotEqualTo.bind(target.isNotEqualTo(\"A\"));\n\tisNotEqualToIgnoreCase.bind(target.isNotEqualToIgnoreCase(\"A\"));\n\tisEmpty.bind(target.isEmpty());\n\tisNotEmpty.bind(target.isNotEmpty());\n\tisNull.bind(target.isNull());\n\n\tassertThat(concat.get(), is(\"A!\"));\n\tassertThat(isEqualTo.get(),is(true));\n\tassertThat(isEqualToIgnoreCase.get(),is(true));\n\tassertThat(isNotEqualTo.get(),is(false));\n\tassertThat(isNotEqualToIgnoreCase.get(),is(false));\n\tassertThat(isEmpty.get(), is(false));\n\tassertThat(isNotEmpty.get(), is(true));\n\tassertThat(isNull.get(), is(false));\n\n\ttarget.set(\"a\");\n\tassertThat(concat.get(), is(\"a!\"));\n\tassertThat(isEqualTo.get(),is(false));\n\tassertThat(isEqualToIgnoreCase.get(),is(true));\n\tassertThat(isNotEqualTo.get(),is(true));\n\tassertThat(isNotEqualToIgnoreCase.get(),is(false));\n\tassertThat(isEmpty.get(), is(false));\n\tassertThat(isNotEmpty.get(), is(true));\n\tassertThat(isNull.get(), is(false));\n\n\ttarget.set(\"\");\n\tassertThat(concat.get(), is(\"!\"));\n\tassertThat(isEqualTo.get(),is(false));\n\tassertThat(isEqualToIgnoreCase.get(),is(false));\n\tassertThat(isNotEqualTo.get(),is(true));\n\tassertThat(isNotEqualToIgnoreCase.get(),is(true));\n\tassertThat(isEmpty.get(), is(true));\n\tassertThat(isNotEmpty.get(), is(false));\n\tassertThat(isNull.get(), is(false));\n\n\ttarget.set(null);\n\tassertThat(concat.get(), is(\"null!\"));\n\tassertThat(isEqualTo.get(),is(false));\n\tassertThat(isEqualToIgnoreCase.get(),is(false));\n\tassertThat(isNotEqualTo.get(),is(true));\n\tassertThat(isNotEqualToIgnoreCase.get(),is(true));\n\tassertThat(isEmpty.get(), is(true));\n\tassertThat(isNotEmpty.get(), is(false));\n\tassertThat(isNull.get(), is(true));\n}\n\n```\n\n#JavaFX\u306e\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u306b\u30d0\u30a4\u30f3\u30c9\u3055\u305b\u3066\u307f\u308b\n\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3067\u30c1\u30a7\u30c3\u30af\u306e\u6709\u7121\u306f\u3001selectedProperty() \u306b\u8a2d\u5b9a\u3059\u308b\u3002\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u6709\u52b9\u7121\u52b9\u306fdisableProperty()\u3067\u8a2d\u5b9a\u3059\u308b\u3002\u30e9\u30d9\u30eb\u3084\u30c6\u30ad\u30b9\u30c8\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u5185\u5bb9\u306ftextProperty()\u3067\u8a2d\u5b9a\u3059\u308b\u3002\n\u305d\u308c\u305e\u308c\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u540c\u58eb\u3092\u30d0\u30a4\u30f3\u30c9\u3057\u305f\u308a\u3001BooleanProperty\u7d4c\u7531\u3067\u30d0\u30a4\u30f3\u30c9\u3055\u305b\u305f\u308a\u3057\u3066\u307e\u3059\u3002\n\n```java:FXController.java\n@FXML CheckBox checkBox1;\n@FXML CheckBox checkBox2;\n@FXML CheckBox checkBox3;\n@FXML CheckBox checkBox4;\n@FXML CheckBox checkBox5;\n\n@FXML Button button;\n@FXML Label label;\n@FXML Label lblCheckbox5;\n\nBooleanProperty blnBindBidirectional = new SimpleBooleanProperty();\n\n@Override\npublic void initialize(URL paramURL, ResourceBundle paramResourceBundle) {\n\n\t// \u76f8\u4e92\u306b\u5f71\u97ff\u3057\u5408\u3046\n\tcheckBox1.selectedProperty().bindBidirectional(checkBox2.selectedProperty());\n\n\t// \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b93\u306e\u5024\u306f\u3001\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b94\u306b\u4f9d\u5b58\u3059\u308b\u305f\u3081\u3001\n\t// \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b93\u306e\u30c1\u30a7\u30c3\u30af\u3092\u5909\u66f4\u3059\u308b\u3068\u4f8b\u5916\u767a\u751f\u3059\u308b\n\tcheckBox3.selectedProperty().bind(checkBox4.selectedProperty());\n\n\t// \u30c1\u30a7\u30c3\u30af\u304c\u3042\u308b\u3068\u304d\u3001\u30dc\u30bf\u30f3\u304c\u5165\u529b\u53ef\u80fd\u306b\u306a\u308b\n\tbutton.disableProperty().bind(checkBox1.selectedProperty().not());\n\n\t// \u30e9\u30d9\u30eb\u306e\u30c6\u30ad\u30b9\u30c8\u306f\u3001\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b91\u306e\u30c1\u30a7\u30c3\u30af\u306e\u5185\u5bb9\u306b\u6587\u5b57\u3092\u9023\u7d50\u3055\u305b\u3066\u51fa\u529b\u3059\u308b\n\tStringProperty stringProperty = new SimpleStringProperty(\"\");\n\tstringProperty.bind( checkBox1.selectedProperty().asString().concat(\" \u2190\u30c1\u30a7\u30c3\u30af\u306e\u4e2d\u8eab\"));\n\tlabel.textProperty().bind(stringProperty);\n\n\t// \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b95\u306e\u30c1\u30a7\u30c3\u30af\u72b6\u6cc1\u306f\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u9023\u52d5\u3055\u305b\u308b\u3002\n\tcheckBox5.selectedProperty().bindBidirectional(blnBindBidirectional);\n\tlblCheckbox5.textProperty().bind(blnBindBidirectional.asString());\n\n\t}\n\n\t@FXML\n\tpublic void buttonPressed(ActionEvent event){\n\t\t// BooleanProperty\u306etrue/false\u3092\u5165\u308c\u304b\u3048\u308b\n\t\tblnBindBidirectional.set(! blnBindBidirectional.get());\n\t}\n}\n```\n\n#\u6700\u5f8c\u306b\n\u3053\u3053\u3067\u306f\u7d39\u4ecb\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306eList\u3068JavaFX\u306eListView\u306e\u4e2d\u8eab\u3092\u30d0\u30a4\u30f3\u30c9\u3055\u305b\u305f\u308a\u3001\u30b3\u30f3\u30dc\u30dc\u30c3\u30af\u30b9\u306e\u9078\u629e\u80a2\u306e\u57fa\u3068\u306a\u3063\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u30d0\u30a4\u30f3\u30c9\u3055\u305b\u305f\u308a\u3068\u3001\u672c\u5f53\u306b\u4fbf\u5229\u3067\u3059\u3002\n\u30bd\u30fc\u30b9\u306f\u3001[Github](https://github.com/xaatw0/quiita/tree/master/src/fxbind)\u306b\u3042\u308a\u307e\u3059\u304c\u3001\u4ed6\u306e\u6295\u7a3f\u306e\u30bd\u30fc\u30b9\u3082\u6df7\u3058\u3063\u3066\u307e\u3059\u3001\u3059\u3044\u307e\u305b\u3093\u3002\n"}